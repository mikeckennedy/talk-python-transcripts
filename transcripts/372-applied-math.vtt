WEBVTT

00:00:00.001 --> 00:00:05.420
Often when we learn about or work with math, it's done so in a very detached style.

00:00:05.420 --> 00:00:09.400
You might learn the rules or techniques of differentiation, for example,

00:00:09.400 --> 00:00:14.160
but how often do you get to apply them to meaningful and interesting problems?

00:00:14.160 --> 00:00:20.160
In this episode, we have Vincent Knight and Grant Palmer on to discuss a wide variety of

00:00:20.160 --> 00:00:25.140
applied and approachable math problems using Python. Whether you're deeply into math or

00:00:25.140 --> 00:00:28.320
not so much, I think there's a lot to enjoy from this episode.

00:00:29.000 --> 00:00:34.740
This is Talk Python to Me, episode 372, recorded June 29th, 2022.

00:00:34.740 --> 00:00:52.580
Welcome to Talk Python to Me, a weekly podcast on Python. This is your host, Michael Kennedy.

00:00:52.580 --> 00:00:57.240
Follow me on Twitter where I'm @mkennedy and keep up with the show and listen to past episodes

00:00:58.000 --> 00:01:03.920
talkpython.fm and follow the show on Twitter via at Talk Python. We've started streaming most of our

00:01:03.920 --> 00:01:09.760
episodes live on YouTube. Subscribe to our YouTube channel over at talkpython.fm/youtube to get

00:01:09.760 --> 00:01:15.880
notified about upcoming shows and be part of that episode. This episode of Talk Python is brought to

00:01:15.880 --> 00:01:22.820
you by Compiler from Red Hat. Listen to an episode of their podcast to demystify the tech industry over

00:01:22.820 --> 00:01:34.580
 talkpython.fm/compiler. And we'll see you next time on Twitter. And we'll see you next time on Twitter.

00:01:34.580 --> 00:02:00.340
A quick announcement before we jump into the show. You probably know about our video courses. I'm super

00:02:00.340 --> 00:02:06.200
super proud of them and they're a fantastic educational resource for many people. But sometimes you can

00:02:06.200 --> 00:02:13.020
benefit from a more hands-on, group-based approach. That's why I'm running another online cohort course.

00:02:13.020 --> 00:02:20.200
This one will cover FastAPI, Async Python programming, and MongoDB. However, the structure is different this

00:02:20.200 --> 00:02:27.500
time around. This course will be taught 100% live in person. You'll attend over Zoom and all the sessions will

00:02:27.500 --> 00:02:34.060
include myself as an instructor and your fellow students. It runs from August 8th to August 19th.

00:02:34.060 --> 00:02:38.880
If that sounds interesting, please check out the link in your podcast player show notes or on the episode

00:02:38.880 --> 00:02:44.920
page. And if your company offers educational credits or training reimbursements, you should be able to

00:02:44.920 --> 00:02:51.220
expense this course as well as our regular Talk Python courses. I'll put some links to templates that you can

00:02:51.220 --> 00:02:56.260
use to help with that in the show notes as well. Vince Grant, welcome to Talk Python To Me.

00:02:56.260 --> 00:02:58.640
Thanks, Michael. Thank you very much for having us. Thank you.

00:02:58.640 --> 00:02:59.640
Yeah, thanks. Nice to be here.

00:02:59.640 --> 00:03:02.760
Yeah, it's good to have you. Vince, I guess it's welcome back for you, right?

00:03:02.760 --> 00:03:09.540
Yeah, I was on the show a while ago. Big listener, love the show. Yeah, I came here a long time ago to

00:03:09.540 --> 00:03:14.740
discuss one of the game theoretic libraries I work on. So yeah, thanks for having me again.

00:03:14.740 --> 00:03:19.840
Yeah, you bet. I love game theory. It's amazing. We'll touch on that a little bit. We're going to

00:03:19.840 --> 00:03:28.220
do kind of a survey of a bunch of different areas of applied math and how Python and compare that with

00:03:28.220 --> 00:03:32.920
how R might solve those problems, some of the libraries involved, some of the techniques involved.

00:03:33.260 --> 00:03:36.940
So lots of fun things. I'm looking forward to diving into them with you.

00:03:36.940 --> 00:03:37.380
Awesome. Awesome.

00:03:37.380 --> 00:03:38.000
Yeah. Awesome.

00:03:38.000 --> 00:03:42.080
But before we do, maybe we'll kick it off with Grant. You're new. Tell people quickly

00:03:42.080 --> 00:03:46.380
about how you got into programming, Python, math. How do you end up here on this show?

00:03:46.380 --> 00:03:52.540
So I'm a lecturer at Cardiff University in the School of Mathematics. So I learned to program

00:03:52.540 --> 00:03:58.300
when I was doing my PhD. Vince here was actually my PhD supervisor. So I essentially learned

00:03:58.300 --> 00:04:01.100
programming from Vince during that time. Nice.

00:04:01.100 --> 00:04:09.320
Yeah. And during my PhD, I sort of realized or I learned that everything that we'd been able

00:04:09.320 --> 00:04:15.360
to learn during my like master's and stuff, it was all completely doable in open source software.

00:04:15.360 --> 00:04:21.800
And that's kind of where I focused my PhD on then. I sort of, one of my main projects during my PhD

00:04:21.800 --> 00:04:26.960
was building a library to be able to do some of this stuff. And then, yeah, I passed then my PhD.

00:04:26.960 --> 00:04:33.360
What general area was your PhD in? I know, Matt, but what specifically?

00:04:33.360 --> 00:04:38.760
Discretive end simulation was where I specialized during my PhD. But like in conjunction with

00:04:38.760 --> 00:04:43.460
that, some of the other techniques, stuff like Markov chains and curing theory, which are sort

00:04:43.460 --> 00:04:47.240
of different ways of solving the same sort of problem. And that's where I sort of specialized

00:04:47.240 --> 00:04:47.480
in.

00:04:47.480 --> 00:04:47.880
Fun.

00:04:47.880 --> 00:04:48.920
Yeah. Very, very cool.

00:04:48.920 --> 00:04:54.680
We have a running, running joke with Garrett that one of his sub topics in his PhD that he became

00:04:54.680 --> 00:05:00.540
hyper specialized in as PhDs go was, is deadlock. And so it's, there's a tweet came up about a

00:05:00.540 --> 00:05:04.720
question about deadlock and all these jokes that come up. We got very excited. Well, I got very

00:05:04.720 --> 00:05:07.540
excited. Like Garrett, someone's joking about your work.

00:05:08.080 --> 00:05:12.760
That's fantastic. Vince, you've already told your story. Maybe just a quick update. What

00:05:12.760 --> 00:05:14.060
have you been up to in the last couple of years?

00:05:14.060 --> 00:05:18.000
Yes. In the last couple of years, having the pleasure of working with Garrett now,

00:05:18.000 --> 00:05:23.500
now that he's a colleague of mine, but otherwise continuing my work on the actual library, which

00:05:23.500 --> 00:05:28.760
is the library we were chatting about just now. And yeah, I'm still a mathematician at Cardiff,

00:05:28.760 --> 00:05:33.760
where the best part of my job is getting to teach people how to program. And that's something.

00:05:34.160 --> 00:05:38.800
Mathematics is such a cool subject, but in a way you're only ever a theoretical mathematician

00:05:38.800 --> 00:05:43.840
until you can program the stuff you're doing. Even the applied stuff is quite theoretic. And then

00:05:43.840 --> 00:05:49.720
it's once you can code these things that are so powerful, it really kind of releases the magic

00:05:49.720 --> 00:05:54.900
of mathematics for want of a less cringy type of way of saying it. So that's kind of what I really

00:05:54.900 --> 00:05:58.120
enjoy doing and what I keep doing. Kind of what we're going to be talking about today.

00:05:58.120 --> 00:06:02.560
Fantastic. Yeah, absolutely. We're going to touch on a bunch of different manifestations of that.

00:06:03.960 --> 00:06:08.840
Cool. I want to put out a quick disclaimer. We're going to be talking about math things,

00:06:08.840 --> 00:06:16.000
obviously Python things as well on the Python show here. The disclaimer is I have some degrees in math,

00:06:16.000 --> 00:06:21.660
but I have not done anything with them for 20 years. And therefore I know just enough to ask

00:06:21.660 --> 00:06:26.680
bad questions and make poor assumptions. So you all are going to have to keep me on track and just tell

00:06:26.680 --> 00:06:31.560
me, no, no, no, Michael, you were totally misremembering that from your courses 20 years ago.

00:06:31.560 --> 00:06:36.620
The real problem is we might just be on just the other side of that boundary where we could

00:06:36.620 --> 00:06:38.960
confidently give you bad answers. That's the...

00:06:38.960 --> 00:06:40.240
Perfect.

00:06:40.240 --> 00:06:42.580
Asking bad questions is fine.

00:06:42.580 --> 00:06:43.520
If you say it confidently, I'm sure it's going to be...

00:06:43.520 --> 00:06:45.940
Yeah, exactly. Confidently giving bad answers is the problem.

00:06:45.940 --> 00:06:54.340
Yeah, sure. All right, cool. Well, let's kick this off by just talking about what is applied mathematics.

00:06:54.340 --> 00:07:02.100
Because one of the final courses I took, it very much confused me, both in the content and just purely in its title.

00:07:02.100 --> 00:07:09.060
This was a course at UCSD in the PhD program there. The course was titled Applied Abstract Algebra.

00:07:09.060 --> 00:07:09.500
Right.

00:07:09.500 --> 00:07:18.560
I'm like, well, is it abstract or is it applied? Because I really don't... I just... So let's just start out with...

00:07:18.560 --> 00:07:22.760
We're going to be talking about solving applied math problems. Like what the heck is applied math versus

00:07:22.760 --> 00:07:28.440
like what I might do in a calculus class where I'm solving a bunch of like formulaic type of problems

00:07:28.440 --> 00:07:35.600
versus real analysis where I'm chaining theories to derive new ideas or maybe it's numerical analysis

00:07:35.600 --> 00:07:38.320
or stats. Like what... Where are we in the math world?

00:07:38.320 --> 00:07:44.980
Yeah. I think applied mathematics is an interesting kind of like term because in a way it's become a...

00:07:44.980 --> 00:07:49.620
It's become destroyed from its meaning in a lot of cases in that there's a whole area of applied

00:07:49.620 --> 00:07:56.380
mathematics as a subfield of mathematics. That's not necessarily applied in any realistic sense.

00:07:56.380 --> 00:07:58.100
I don't know what you think, Gerd.

00:07:58.260 --> 00:08:02.960
Yeah, yeah. So I think traditionally what applied mathematics was when I was doing my undergrad

00:08:02.960 --> 00:08:08.560
was these sort of physics models where they assume no gravity and they assume no friction

00:08:08.560 --> 00:08:13.060
and stuff like that, which doesn't seem very realistic to me at all.

00:08:13.060 --> 00:08:13.260
Yeah.

00:08:13.360 --> 00:08:18.160
Whereas when me and Vince have been talking about applied mathematics, sometimes that goes

00:08:18.160 --> 00:08:23.580
under another name called operational research or operations research. But we call it applied

00:08:23.580 --> 00:08:30.080
mathematics because we're applying various techniques in mathematics to a situation, a real situation.

00:08:30.080 --> 00:08:30.420
Right.

00:08:30.500 --> 00:08:35.800
I do think not necessarily by definition, but just in general, different techniques that apply

00:08:35.800 --> 00:08:40.760
to the more physics-y problems to the more management-style problems maybe that is there.

00:08:40.760 --> 00:08:44.800
But not by definition. It doesn't have to be like that. It's just that's what people find useful.

00:08:44.800 --> 00:08:51.960
Yeah. In a way, a lot of these labels in terms of the mathematical subfields and things are not terribly

00:08:51.960 --> 00:08:59.380
helpful because they create barriers between these fields. This problem I studied in my PhD where

00:08:59.380 --> 00:09:05.980
it's in pure enumerative combinatorics trying to count these types of matrices. Really a problem

00:09:05.980 --> 00:09:10.920
actually because of all other series of conversations. And the most elegant proof that came for this

00:09:10.920 --> 00:09:17.280
conjecture came from statistical mechanics, whatever that means, but it's a field of mathematical

00:09:17.280 --> 00:09:23.400
physics. And it's where all these boundaries from fields not always are helpful, whereas really the

00:09:23.400 --> 00:09:30.000
techniques are the helpful ones and knowing when to apply them. The definition that we would use for

00:09:30.000 --> 00:09:34.060
the purpose of what we're talking about today in terms of applied mathematics are just without

00:09:34.060 --> 00:09:38.220
necessarily going to an incredibly high level of mathematics where you're talking about the stuff

00:09:38.220 --> 00:09:43.480
that they do at CERN that is certainly applied. There's some very low hanging fruit. I don't know

00:09:43.480 --> 00:09:46.580
if that's the right word. Low hanging fruit of where mathematics can very much-

00:09:46.580 --> 00:09:47.900
Like day to day problems.

00:09:47.900 --> 00:09:48.580
Yeah.

00:09:48.580 --> 00:09:53.960
Exactly. Day to day. And it's where you take these ideas of, you know, in high school where you're told,

00:09:53.960 --> 00:09:58.360
oh, matrices are important because computers can do mathematics really quickly with them, but you

00:09:58.360 --> 00:10:03.460
don't do it with a computer. So, you know, who cares, right? But actually with a matrix, you can really apply these things.

00:10:03.460 --> 00:10:08.560
Yeah. They tell you it's important for computers and then you, yeah, then you proceed to do it by hand for the next two weeks. Yeah.

00:10:08.560 --> 00:10:11.080
Exactly. Exactly. Two weeks if you're lucky. Yeah.

00:10:11.080 --> 00:10:33.440
I wish there was some value to that, but yeah, exactly. You're like, well, I could tell you whether this matrix is singular or not, but I have no idea why I would do that. Right? So this is sort of the next step. Like, well, what would you, if you had that knowledge, that kind of knowledge, what would you do with it? Like what kind of problems could you answer? And some of the examples that you all cover in this book that we're going to highlight a little bit are things.

00:10:33.440 --> 00:10:47.200
Like if you have two businesses that are competing, what choices might they make? Or if no, I know this is extremely theoretical and it's never going to happen, but what if there was like a pandemic and there were people who were sick?

00:10:47.200 --> 00:10:48.840
Probably not that funny, but yes.

00:10:48.840 --> 00:11:01.860
We needed to make weird trade-offs about society. Like, should we shut everybody in a basement? Should we make them behave in different ways? What's the cost versus benefit analysis? And those kinds of things, right?

00:11:01.860 --> 00:11:17.860
These things that without needing too much high-level mathematics, you can describe them mathematically relatively simply. And then just with a little bit of code, you can really do cool stuff with it. Just doesn't take much code, you know, and that's, that's where Python really comes in.

00:11:17.860 --> 00:11:27.820
Yeah, for sure. One of the things that we'll see throughout here is there's a bunch of different examples across these different areas of math and these different types of problems in different libraries that apply to solving them.

00:11:27.820 --> 00:11:35.360
But the thing that's cool is every one of those solutions fits within a couple of pages on the long ones, right?

00:11:35.400 --> 00:11:39.660
For Jupyter Notebooks that have the solutions, plus have some of the output of the answer, right?

00:11:39.660 --> 00:11:40.540
Yeah, yeah, yeah.

00:11:40.540 --> 00:11:42.360
It's not a ton of code, is it?

00:11:42.360 --> 00:11:57.700
No, no, exactly. And that's, this kind of touches on something else that we were going to talk about is the idea that a lot of the time when these things are taught, they're taught with specific pieces of software, mostly commercial pieces of software.

00:11:58.000 --> 00:12:27.980
Yeah, yeah.

00:12:27.980 --> 00:12:28.980
Yeah.

00:12:28.980 --> 00:12:29.980
Yeah.

00:12:29.980 --> 00:12:30.980
Yeah.

00:12:30.980 --> 00:12:30.980
Yeah.

00:12:30.980 --> 00:12:30.980
Yeah.

00:12:30.980 --> 00:12:31.980
Yeah.

00:12:31.980 --> 00:12:50.080
It's, I also think it demystifies things a little bit because if what you do is you go to some expensive, polished piece of software like Maple or something, and you can say, you say, well, I could ask this expensive, complex, huge piece of software a question and it can magically give me the answer.

00:12:50.080 --> 00:12:51.080
Yeah.

00:12:51.080 --> 00:12:51.080
Yeah.

00:12:51.080 --> 00:12:58.080
It's great that you get the answer. And it's great that you know you have this very fancy tool, but it doesn't necessarily reveal a ton of understanding because of it, right?

00:12:58.080 --> 00:13:27.080
An idea that's beginning to form in my head. I was just saying this to Gary and I just haven't fully formed. I think there's a blog post that no one's going to read that I want to write one day about, you know, the ethics of it, about teaching these fancy commercial software. It's why these great companies give out these educational software is that they immediately have lots of users of the software that don't know how to use anything else. And I wonder if ethically as educators, if that's okay.

00:13:27.080 --> 00:13:38.080
I think we should make more of an effort to separate the concept from the software. And I was kind of like saying, like, I don't think we should teach any commercial software. And Darren, you made a good point when we were chatting.

00:13:38.080 --> 00:13:56.080
I don't really have a problem with teaching a particular topic through commercial software, as long as we teach it in a separated way so that you know, once you've formulated the concepts and the ideas mathematically, you can use whatever software you want. In the classroom, we happen to have this expensive license.

00:13:56.080 --> 00:13:59.640
So we're going to have this. But outside of the classroom, there are other things you can use.

00:14:00.080 --> 00:14:08.520
Yeah. Well, I think there's a couple aspects here. One, Vince, you spoke about the ethics of it. Is it the right thing to do to basically reinforce this loop?

00:14:08.720 --> 00:14:09.720
Exactly. Exactly.

00:14:09.720 --> 00:14:09.720
Exactly.

00:14:09.720 --> 00:14:37.240
That entrenches some of these. The other part is, if you're in the UK, or if you're in the US, and you say to your student, probably especially if you're in the US, they're used to getting paid so much. I just paid for both my daughters to go through college. So I'm aware that here you pay a lot for the actual tuition. But many places you'll say to students, what is it in the UK? Is there, how is college, what's the affordability? I know in Germany and other places, but don't know it that well there.

00:14:37.240 --> 00:14:42.560
It's a touchy subject in that tuition fees have just come in.

00:14:42.560 --> 00:14:52.280
And so costs of universities here are equivalent, not far off to in-state tuition in public universities in the United States.

00:14:52.280 --> 00:14:54.940
I think they're not far off.

00:14:54.940 --> 00:15:05.060
But then we get to charge, I'm saying we, very, very not talking about me, but we get to charge whatever we want to a certain extent to people from the European Union.

00:15:05.060 --> 00:15:07.680
And then even more to people from outside of that.

00:15:07.680 --> 00:15:11.800
Actually, I don't even know if that's true about the European Union because of recent events anymore.

00:15:11.800 --> 00:15:12.260
Yeah.

00:15:12.260 --> 00:15:13.020
But yeah.

00:15:13.020 --> 00:15:14.840
So yeah, there's a cost.

00:15:14.840 --> 00:15:15.660
Sure.

00:15:15.660 --> 00:15:15.960
Okay.

00:15:15.960 --> 00:15:24.640
So going back though, my point about the ethics was it's one thing to be in the US or places in Europe where we have a decent amount of money.

00:15:24.640 --> 00:15:31.180
It's another to say to somebody, you have to pay $500 for this software to learn the subject, right?

00:15:31.180 --> 00:15:34.620
Where $500 US might be the yearly income.

00:15:34.620 --> 00:15:36.800
For an employed person and their student.

00:15:36.800 --> 00:15:45.780
It seems like there's a lot of good would be done by building up maybe the missing gaps that force or encourage people to go to this commercial software.

00:15:45.780 --> 00:15:54.560
Building that up rather in the form of SciPy libraries and the Python data science stack in general.

00:15:54.560 --> 00:15:55.220
Absolutely.

00:15:55.460 --> 00:15:57.720
So that it's free, open source and all those things.

00:15:57.720 --> 00:15:59.040
I think that would apply for all subjects.

00:15:59.040 --> 00:16:09.220
I think really close to what we're talking about here is with mathematics, I think it's really frustrating because maybe I'm thinking too purely now.

00:16:09.640 --> 00:16:12.060
And I mean pure of heart, not pure mathematics.

00:16:12.060 --> 00:16:16.200
In terms of like mathematics is just such a clean and minimalistic subject.

00:16:16.200 --> 00:16:18.700
You know, you need a pen and a paper to do it.

00:16:18.700 --> 00:16:26.500
And if all of a sudden we're teaching people to use a pen and paper to do mathematics and saying like, oh, but you can only do it with a pen made by a BIC.

00:16:26.820 --> 00:16:30.200
And don't worry, BIC has given us all this free pen.

00:16:30.200 --> 00:16:30.880
The Mongron pen is the only one.

00:16:30.880 --> 00:16:31.540
Exactly.

00:16:31.540 --> 00:16:32.020
Right.

00:16:32.020 --> 00:16:38.920
And then once you graduate, if you want to write down this idea again, you have to use a BIC pen, but you have to pay for it yourself.

00:16:38.920 --> 00:16:48.160
And I really do think mathematics, the evolution of mathematics and a lot of science, I would argue, is into computing, right, is into getting computers to do it.

00:16:48.160 --> 00:16:51.680
And that extension of using the pen now is to use code.

00:16:51.680 --> 00:16:52.960
And yeah, it's...

00:16:52.960 --> 00:16:59.220
For me, at least, I think one of the important things is that separation of mathematical concepts to software.

00:16:59.220 --> 00:17:03.040
Because it's a lot less of a problem, but there's still a problem going.

00:17:03.040 --> 00:17:06.320
The only way you can do this is by using free open software.

00:17:06.320 --> 00:17:12.340
There are some places, unfortunately, that are not allowed to use open software because they think there's security problems and stuff.

00:17:12.340 --> 00:17:18.580
So if you've only taught open software, then certain, like the NHS, for example, I know they discourage using open software.

00:17:18.580 --> 00:17:21.780
So maybe you then think, oh, I can't do this maths thing anymore.

00:17:21.780 --> 00:17:27.220
But if you've separated the concept from the software, at least you know the concept and you know you've got choices.

00:17:27.220 --> 00:17:28.380
Yeah, absolutely.

00:17:28.380 --> 00:17:28.980
Yeah.

00:17:28.980 --> 00:17:30.060
I think that's very true.

00:17:30.060 --> 00:17:33.620
Separating the concept from the software is key where possible.

00:17:33.620 --> 00:17:36.960
And I think perhaps we don't always do a good job of that.

00:17:36.960 --> 00:17:38.380
And here I am speaking as an industry.

00:17:38.380 --> 00:17:39.640
I think sometimes we often...

00:17:39.640 --> 00:17:44.080
I've been to conversations where people have said, I need to use MATLAB.

00:17:44.080 --> 00:17:45.120
Can you help me with MATLAB?

00:17:45.120 --> 00:17:48.460
But it turned out they wanted to know how to numerically solve a differential equation.

00:17:48.460 --> 00:17:49.880
They didn't want to do MATLAB.

00:17:49.880 --> 00:17:51.720
They just wanted to solve a numeric equation.

00:17:51.720 --> 00:17:53.960
They just did not know that that's what they were doing.

00:17:55.960 --> 00:18:01.080
This portion of Talk Python To Me is brought to you by the Compiler Podcast from Red Hat.

00:18:01.080 --> 00:18:04.420
Just like you, I'm a big fan of podcasts.

00:18:04.420 --> 00:18:08.780
And I'm happy to share a new one from a highly respected and open source company.

00:18:08.780 --> 00:18:12.120
Compiler, an original podcast from Red Hat.

00:18:12.120 --> 00:18:17.480
With more and more of us working from home, it's important to keep our human connection with technology.

00:18:17.480 --> 00:18:19.620
With Compiler, you'll do just that.

00:18:19.620 --> 00:18:25.220
The Compiler Podcast unravels industry topics, trends, and things you've always wanted to know about tech

00:18:25.220 --> 00:18:27.580
through interviews with people who know it best.

00:18:27.580 --> 00:18:31.760
These conversations include answering big questions like, what is technical debt?

00:18:31.760 --> 00:18:34.480
What are hiring managers actually looking for?

00:18:34.480 --> 00:18:37.780
And do you have to know how to code to get started in open source?

00:18:37.780 --> 00:18:41.780
I was a guest on Red Hat's previous podcast, Command Line Heroes,

00:18:41.780 --> 00:18:47.220
and Compiler follows along in that excellent and polished style we came to expect from that show.

00:18:47.220 --> 00:18:49.460
I just listened to episode 12 of Compiler.

00:18:49.460 --> 00:18:51.020
How should we handle failure?

00:18:51.020 --> 00:18:55.200
I really valued their conversation about making space for developers to fail

00:18:55.200 --> 00:19:01.020
so that they can learn and grow without fear of making mistakes or taking down the production website.

00:19:01.020 --> 00:19:03.780
It's a conversation we can all relate to, I'm sure.

00:19:03.780 --> 00:19:08.600
Listen to an episode of Compiler by visiting talkpython.fm/compiler.

00:19:08.600 --> 00:19:10.720
The link is in your podcast player's show notes.

00:19:10.720 --> 00:19:15.200
You can listen to Compiler on Apple Podcasts, Overcast, Spotify, Pocket Cast,

00:19:15.200 --> 00:19:17.160
or anywhere you listen to your podcasts.

00:19:17.160 --> 00:19:21.460
And yes, of course, you could subscribe by just searching for it in your podcast player,

00:19:21.460 --> 00:19:27.760
but do so by following talkpython.fm/compiler so that they know that you came from Talk Python To Me.

00:19:27.760 --> 00:19:33.020
My thanks to the Compiler Podcast for keeping this podcast going strong.

00:19:34.940 --> 00:19:42.720
We can dive into the applied math aspects, but I think one other final thing on this is I feel like professors,

00:19:42.720 --> 00:19:48.960
especially as they get older, they've taught a certain way with a certain set of tools for 20 years.

00:19:48.960 --> 00:19:49.620
And you know what?

00:19:49.620 --> 00:19:54.560
That course they wrote, they already have the materials and exercises and all of that.

00:19:54.660 --> 00:19:59.620
And the idea of saying, well, we're going to now throw out this and like grab some new open source library.

00:19:59.620 --> 00:20:06.320
I mean, there's 350,000 libraries on PyPI and they're always changing and turning and something new is coming along.

00:20:06.320 --> 00:20:13.240
And it's maybe a lot to ask, but also maybe not too much to ask to say, look, you should keep up with these things.

00:20:13.240 --> 00:20:18.480
And if there's a new way to present it to your students, not because even some of the ethics stuff,

00:20:18.480 --> 00:20:24.780
but you might be doing a disservice to your student to say, look, the only way that you can solve these problems is with say Fortran,

00:20:24.780 --> 00:20:28.600
or the only way you can do it is with a $2,000 toolbox extension to MATLAB.

00:20:28.600 --> 00:20:30.820
That's the way that you have to go to solve this.

00:20:30.820 --> 00:20:34.700
And here's this, you know, super well-respected professor telling you that's how you do it.

00:20:34.700 --> 00:20:35.700
Well, that's not actually how you do it.

00:20:35.700 --> 00:20:37.220
That's how they've done it for 20 years.

00:20:37.220 --> 00:20:40.140
And so there's a lot of inertia there, right?

00:20:40.140 --> 00:20:47.420
I'm really near what being a lecturer, so maybe I'm being really naive here, but it is an effort to keep up with all this stuff.

00:20:47.420 --> 00:20:48.920
But that's our job.

00:20:48.920 --> 00:20:51.100
Our job is to keep up with the latest maths.

00:20:51.100 --> 00:20:56.340
Anyway, if I was still using, if in 30 years time, I was still using the same maths as I'm using today,

00:20:56.340 --> 00:20:58.120
I wouldn't be doing my job properly.

00:20:58.120 --> 00:21:00.340
So why would, why is the same true with software?

00:21:00.340 --> 00:21:07.740
I think it actually frankly comes back to ethics in that, you know, it's, it's unethical to not make the effort to update your training.

00:21:08.100 --> 00:21:13.580
And if we were talking about doctors and surgeons, they do need to learn new things as the science evolves.

00:21:13.580 --> 00:21:23.640
And I think probably with, with lecturers, professors, higher education, it, it comes back to that dichotomy between research and teaching and how teaching is viewed.

00:21:23.640 --> 00:21:25.220
So, but yes, absolutely.

00:21:25.220 --> 00:21:30.860
I think, you know, in a way I would be disappointed if at the end of my career I'm still teaching Python.

00:21:30.860 --> 00:21:32.400
In a way I'll say, oh, by that.

00:21:32.800 --> 00:21:37.320
Not 2020 Python, but, you know, 2050 Python or whatever it is, right?

00:21:37.320 --> 00:21:37.540
Absolutely.

00:21:37.540 --> 00:21:38.460
Yeah, exactly.

00:21:38.460 --> 00:21:40.820
Oh, Pythons are, you know, I started teaching Python 2.

00:21:40.820 --> 00:21:41.620
Or Python Plus Plus.

00:21:41.620 --> 00:21:43.060
And then I had to figure out how to teach both.

00:21:43.060 --> 00:21:43.580
Yeah.

00:21:43.580 --> 00:21:44.420
And he's having it.

00:21:44.420 --> 00:21:45.220
Exactly.

00:21:45.220 --> 00:21:46.320
Yeah, yeah.

00:21:46.320 --> 00:21:47.780
So you, sorry, I cut you off.

00:21:47.780 --> 00:21:50.180
So you started teaching Python 2 and then now you've moved on.

00:21:50.180 --> 00:21:55.340
And then I had to figure out how to deal with Python 2 and 3 and now I just keep 3 and yeah.

00:21:55.340 --> 00:21:59.300
Yeah, that's, I can't believe that transition took so long, but well, there it is.

00:21:59.300 --> 00:22:04.920
Let's dive into some of the problems and we're going to, more specifically, I'm going to take

00:22:04.920 --> 00:22:10.280
this book that you all created and use it to sort of guide our exploration of both some of

00:22:10.280 --> 00:22:14.200
these problems, how we might solve them with Python and some of the libraries that make it

00:22:14.200 --> 00:22:14.580
possible.

00:22:14.980 --> 00:22:18.740
I guess one of the things that struck me about that journey is that there's not that

00:22:18.740 --> 00:22:21.720
many external packages that are required.

00:22:21.720 --> 00:22:24.720
It's not like, well, this one takes 10 to solve this problem.

00:22:24.720 --> 00:22:28.360
This one takes these complex, these five, if you put them together just right, you get the

00:22:28.360 --> 00:22:28.600
answer.

00:22:28.600 --> 00:22:29.720
So that'll be fun.

00:22:29.720 --> 00:22:34.040
But, you know, tell us a bit about this book, Applied Mathematics with Open Source Software.

00:22:34.040 --> 00:22:39.060
So publisher, this is an academic publisher, which amongst other things means the book is really

00:22:39.060 --> 00:22:43.820
too expensive, but they often just send out emails to people saying, you know, hey, could

00:22:43.820 --> 00:22:44.680
you write a book?

00:22:44.760 --> 00:22:49.640
It's not necessarily a source of flattery, but, you know, got one of these emails and

00:22:49.640 --> 00:22:53.080
Geraint actually had just given a talk at Tycon UK.

00:22:53.080 --> 00:22:55.820
I don't know if you want to say a little bit about the talk you gave.

00:22:55.820 --> 00:22:56.340
Yeah.

00:22:56.340 --> 00:23:01.940
It was very much a precursor to this book where I had given an introduction to the field of

00:23:01.940 --> 00:23:07.600
operational research, which is how we label this certain type of applied mathematics and

00:23:07.600 --> 00:23:09.340
all the different problems that could occur.

00:23:09.340 --> 00:23:14.020
And I think the title of the talk was, there's a library for that because every sort of problem

00:23:14.020 --> 00:23:18.900
that we could come up with, you could pip install a library and in a function or two solve the

00:23:18.900 --> 00:23:20.340
problem, which was a neat little...

00:23:20.340 --> 00:23:20.460
Yeah.

00:23:20.460 --> 00:23:21.660
Oh, there it is.

00:23:21.660 --> 00:23:22.380
There's a neat little...

00:23:22.380 --> 00:23:22.800
That's it.

00:23:22.800 --> 00:23:23.460
Is it?

00:23:23.460 --> 00:23:23.820
Yeah.

00:23:23.820 --> 00:23:23.900
Yeah.

00:23:23.900 --> 00:23:24.020
Yeah.

00:23:24.020 --> 00:23:25.060
I'll link to it.

00:23:25.060 --> 00:23:25.160
Yeah.

00:23:25.220 --> 00:23:29.620
If I can just interrupt, the call for proposals for Tycon UK closes on Saturday.

00:23:29.620 --> 00:23:33.100
So if you're thinking of talking, please submit a talk.

00:23:33.100 --> 00:23:33.560
So yeah.

00:23:33.560 --> 00:23:38.000
And it was just really neat that we had these, like, what we call standard problems.

00:23:38.000 --> 00:23:41.820
It was essentially our postgraduate MSC course that we teach.

00:23:41.940 --> 00:23:46.660
But instead of teaching the maths, there was one or two Python functions that solved it for

00:23:46.660 --> 00:23:46.820
you.

00:23:46.820 --> 00:23:52.260
And then, yeah, that eventually evolved into this book where instead of each little topic

00:23:52.260 --> 00:23:57.000
being a couple of functions, we filled out chapters on some of the theory and, again, tried to

00:23:57.000 --> 00:24:02.000
separate the maths and the programming, emphasizing that by introducing another language, which was

00:24:02.000 --> 00:24:06.300
R, to show that you can do it in two different ways and that the software is independent of the

00:24:06.300 --> 00:24:06.660
problem.

00:24:06.820 --> 00:24:09.760
I think you and I have described it because every now and then, as we were writing the

00:24:09.760 --> 00:24:12.560
book, we kind of stop and go, wait, who's the book for?

00:24:12.560 --> 00:24:16.100
You know, and as we were like making decisions about how exactly to do something, we're like,

00:24:16.100 --> 00:24:16.980
wait, who's the book for?

00:24:16.980 --> 00:24:19.760
And I won't necessarily, well, maybe we should talk about that.

00:24:19.760 --> 00:24:25.540
But I think we've kind of written a book that's meant to be useful to people wanting to get started

00:24:25.540 --> 00:24:32.320
either with the mathematical field problem or with how to actually do it with the code.

00:24:32.320 --> 00:24:36.420
And so every chapter has got the same kind of structure that describes a problem,

00:24:36.800 --> 00:24:42.280
then it describes the basics ideas behind the theory of the problem or the mathematical tools,

00:24:42.280 --> 00:24:43.560
the theory behind the mathematical tools.

00:24:43.560 --> 00:24:47.740
But again, not going into too much depth, kind of what I said before about you don't need to

00:24:47.740 --> 00:24:54.700
understand all of Newton and Leibniz's calculus to be able to kind of predict the outcome of a

00:24:54.700 --> 00:24:55.120
pandemic.

00:24:55.120 --> 00:24:57.360
And then it just solves the problem.

00:24:57.360 --> 00:25:01.700
The original problem, it solves it in two separate ways, using R and Python.

00:25:01.700 --> 00:25:06.320
And the final kind of section in every chapter is pointing at a bunch of literature on it,

00:25:06.500 --> 00:25:07.740
which we thought would be useful.

00:25:07.740 --> 00:25:08.040
Yeah.

00:25:08.040 --> 00:25:13.260
And we're more broadly, you might be able to, these types of problems appear and what you

00:25:13.260 --> 00:25:14.000
might be able to do with it.

00:25:14.000 --> 00:25:14.180
Yeah.

00:25:14.180 --> 00:25:17.940
But the really cool stuff with the publisher is that we had an ongoing kind of conversation

00:25:17.940 --> 00:25:18.820
before the start.

00:25:18.820 --> 00:25:22.000
Garrett and I were both like, well, the book has to be open.

00:25:22.000 --> 00:25:25.980
They've agreed like, oh, there's not a PDF floating around online of the book,

00:25:25.980 --> 00:25:27.940
but all the source files are there.

00:25:27.940 --> 00:25:29.220
So all the late deck files are there.

00:25:29.220 --> 00:25:31.940
There's all the Jupyter notebooks are there with the code.

00:25:31.940 --> 00:25:35.840
We haven't quite gotten all the R markdown files up yet, but they are theoretically all

00:25:35.840 --> 00:25:36.040
there.

00:25:36.040 --> 00:25:40.180
And so the book is very open, which we're happy about.

00:25:40.180 --> 00:25:40.640
Yeah.

00:25:40.640 --> 00:25:41.320
That's great.

00:25:41.320 --> 00:25:43.320
It is very shiny new.

00:25:43.420 --> 00:25:44.640
It still has that new book smell.

00:25:44.640 --> 00:25:48.760
It was released just almost exactly a month ago, right?

00:25:48.760 --> 00:25:49.280
That's right.

00:25:49.280 --> 00:25:49.840
That's right.

00:25:49.840 --> 00:25:50.160
Yeah.

00:25:50.160 --> 00:25:54.180
Keep on saying I've got to have Garant over to celebrate, but we don't get around to doing

00:25:54.180 --> 00:25:54.380
that.

00:25:54.620 --> 00:25:57.440
I had to sign a copy for my nun.

00:25:57.440 --> 00:25:59.320
Oh, nice.

00:25:59.320 --> 00:26:00.600
That's very sweet.

00:26:00.600 --> 00:26:01.300
That's so nice.

00:26:01.300 --> 00:26:02.440
All right.

00:26:02.440 --> 00:26:06.440
Now, before we dive into the various problems in the Python side, while we're still kind of

00:26:06.440 --> 00:26:10.640
talking a little bit high level, this is one of the interesting aspects here is the Python

00:26:10.640 --> 00:26:12.880
and R aspect.

00:26:12.880 --> 00:26:18.180
So when you go through each chapter, which is, I think I agree with you that it's pretty approachable,

00:26:18.180 --> 00:26:22.260
even if you don't have a, you don't have to have like a master's in math or specialize

00:26:22.260 --> 00:26:23.540
in that area for it to make sense.

00:26:23.620 --> 00:26:26.380
It doesn't have, if you don't really want to see a ton of formulas.

00:26:26.380 --> 00:26:26.920
Yeah.

00:26:26.920 --> 00:26:27.780
It's not super intense.

00:26:27.780 --> 00:26:29.900
I think that's our first official review, Michael.

00:26:29.900 --> 00:26:30.700
Pretty approachable.

00:26:30.700 --> 00:26:31.680
It's fantastic to share.

00:26:31.680 --> 00:26:34.280
Yeah.

00:26:34.280 --> 00:26:40.740
Well, like I said, my math, while I said a ton of it is highly rusted, it was pretty approachable

00:26:40.740 --> 00:26:41.100
for me.

00:26:41.100 --> 00:26:41.800
So there's that.

00:26:41.800 --> 00:26:47.000
But maybe just talk about putting R and Python side by side for solving a set of different

00:26:47.000 --> 00:26:47.360
problems.

00:26:47.360 --> 00:26:50.000
What are some of the takeaways either of you got from that?

00:26:50.000 --> 00:26:53.600
One thing we wanted to do here, because we would, well, I would certainly.

00:26:53.600 --> 00:26:57.180
describe myself as a, as a Python person, non-R person.

00:26:57.180 --> 00:27:01.300
I know R, I write R, I've written a book in R, but I would certainly describe myself as

00:27:01.300 --> 00:27:02.560
a Python person in that.

00:27:02.560 --> 00:27:05.560
If you're going to sit down and write something, you would pick Python first.

00:27:05.560 --> 00:27:06.320
I would pick Python.

00:27:06.320 --> 00:27:06.740
Exactly.

00:27:07.320 --> 00:27:10.140
But also, you know, I'm embedded in the Python community.

00:27:10.140 --> 00:27:14.020
I listen to some good Python podcasts.

00:27:14.020 --> 00:27:20.280
I'm a Python person and I can look at some Python code and the joy is that looks very Pythonic,

00:27:20.280 --> 00:27:20.580
right?

00:27:20.580 --> 00:27:22.800
I can, I can, I can tell you that.

00:27:23.180 --> 00:27:28.380
And so we were kind of aware that we didn't want to translate the Python to R when we were

00:27:28.380 --> 00:27:29.580
writing this.

00:27:29.580 --> 00:27:34.720
We wanted to, you know, write this as close to our people as, as we could.

00:27:34.720 --> 00:27:38.300
I don't know if we managed that, but that was something as well that we were aware of.

00:27:38.300 --> 00:27:40.380
It's not just translating languages.

00:27:40.860 --> 00:27:46.140
In Python, yeah, in Python, we have the word Pythonic for idiomatic Python.

00:27:46.140 --> 00:27:50.460
Do you all know, is there a word for that in R or is it just idiomatic R?

00:27:50.460 --> 00:27:52.320
I don't know.

00:27:52.320 --> 00:27:52.580
Yeah.

00:27:52.580 --> 00:27:53.820
I don't either.

00:27:53.820 --> 00:27:54.460
Yeah.

00:27:54.460 --> 00:27:54.980
I think you're right.

00:27:54.980 --> 00:27:55.620
You were going to say something.

00:27:55.620 --> 00:27:56.060
Jump in here.

00:27:56.060 --> 00:28:00.880
So I was going to say, like, as we were writing the book, we noticed that there were certain

00:28:00.880 --> 00:28:06.660
problems, which the R and the Python lined up exactly, not from design, just from, if we

00:28:06.660 --> 00:28:10.840
were going to approach these independently, it is pretty much exactly the same.

00:28:10.840 --> 00:28:11.580
way to solve it.

00:28:11.580 --> 00:28:17.960
There were some problems where we had to reformulate the mathematics because the way

00:28:17.960 --> 00:28:22.180
to do it in R was so different to the way you do it in Python.

00:28:22.180 --> 00:28:23.700
That doesn't mean the math's changed.

00:28:23.700 --> 00:28:28.300
We just had to reformulate it, re-communicate it so that we could write it down in R.

00:28:28.300 --> 00:28:32.860
And then there were some problems, again, where we had to use different mathematics to

00:28:32.860 --> 00:28:36.020
solve it in Python and R because of the availability of libraries and stuff.

00:28:36.020 --> 00:28:37.640
I thought that was really, really neat.

00:28:37.740 --> 00:28:44.400
And I think that emphasizes, again, the separation of concept to software because sometimes you

00:28:44.400 --> 00:28:46.640
did have to do very different things in different softwares.

00:28:46.640 --> 00:28:53.300
My favorite chapter on this is the one that is your specialty, Darren, the discrete event simulation

00:28:53.300 --> 00:28:59.780
chapter, where I forget the name of the two theoretic ideas about discrete event simulation.

00:28:59.780 --> 00:29:02.560
Process-based and what's the other one?

00:29:02.600 --> 00:29:07.000
Yeah, so there's process-based and there's the event scheduling approach.

00:29:07.000 --> 00:29:10.540
There's two different ways of approaching discrete event simulation.

00:29:10.540 --> 00:29:15.920
And the standard library in R to do it is process-based.

00:29:15.920 --> 00:29:20.180
And I don't want to call it the way to do it in Python, but the way we've said in Python

00:29:20.180 --> 00:29:23.920
to do it is by using the Q library, CIW library.

00:29:24.040 --> 00:29:27.200
The only reason Gerard doesn't want to say it's the way to do it in Python is because it's

00:29:27.200 --> 00:29:30.400
using his library, the library that he's maintained around.

00:29:30.400 --> 00:29:33.180
Yeah, nice.

00:29:33.180 --> 00:29:39.340
Both those libraries, I'm pretty sure that underneath, well, I know how Q works underneath, but the

00:29:39.340 --> 00:29:44.200
Simmer, which is the R version, I'm pretty sure underneath they work very, very similarly.

00:29:44.200 --> 00:29:48.680
There's not many ways you could do different ways of discrete event simulation, but the way

00:29:48.680 --> 00:29:51.080
you formulate the problem is very different.

00:29:51.080 --> 00:29:57.980
And going through that in the book and going in Python, you have to take like an overhead

00:29:57.980 --> 00:30:03.280
worldview where you look at the system, whereas in R, you have to take a sort of, you have to

00:30:03.280 --> 00:30:09.880
put yourself in the mind of the customer and go, what is the customer doing right now, rather

00:30:09.880 --> 00:30:13.640
than from a systems point of view, in order to formulate the problem before you could just

00:30:13.640 --> 00:30:14.560
then go and solve it.

00:30:14.560 --> 00:30:19.240
I just thought it was very, very interesting that the way to do it in each language was

00:30:19.240 --> 00:30:20.020
so different.

00:30:20.020 --> 00:30:22.460
And yet probably underneath, it's doing exactly the same thing.

00:30:22.460 --> 00:30:23.600
You get the same answers out.

00:30:23.600 --> 00:30:25.300
You just got to formulate it in a different way.

00:30:25.300 --> 00:30:25.500
Yeah.

00:30:25.500 --> 00:30:30.580
I think that's such a nice example where diversity, and I'm using diversity from the way that languages

00:30:30.580 --> 00:30:31.280
do things.

00:30:31.280 --> 00:30:33.520
I think that's the best chapter in the book, frankly.

00:30:33.520 --> 00:30:38.240
I think that's the best chapter in the book because you not only do things differently

00:30:38.240 --> 00:30:41.160
from a programming point of view, but because you do things differently from a programming

00:30:41.160 --> 00:30:46.600
point of view, the theoretic discussion allows you to kind of, yeah, give a really good

00:30:46.600 --> 00:30:48.540
understanding of these two ways of doing it.

00:30:48.540 --> 00:30:49.040
Yeah.

00:30:49.040 --> 00:30:49.400
Yeah.

00:30:49.400 --> 00:30:52.620
Something else that's kind of worth mentioning about the Python in our bit.

00:30:52.620 --> 00:30:55.920
I don't know if this is a terrible address, but I like tests.

00:30:55.920 --> 00:30:57.620
I don't like trusting in any code.

00:30:57.620 --> 00:30:59.000
I like writing tests all the time.

00:30:59.260 --> 00:31:02.460
And we came to this media thing that we wanted the book to be tested.

00:31:02.460 --> 00:31:05.840
We wanted to know the code was correct in the book, but we wanted to have these two different

00:31:05.840 --> 00:31:06.180
languages.

00:31:06.180 --> 00:31:09.700
And we didn't want to kind of use the standard doc test notation for the Python.

00:31:09.700 --> 00:31:12.400
And then we wanted to find something that would work for the R, et cetera.

00:31:12.400 --> 00:31:18.580
So we actually wrote a little language agnostic doc tester that basically runs through and tests

00:31:18.580 --> 00:31:20.420
all the code in the book for us.

00:31:20.420 --> 00:31:24.200
And theoretically, when we write the second edition and we add Julia as well, it will be up

00:31:24.200 --> 00:31:24.700
to handle it.

00:31:24.700 --> 00:31:29.240
Yeah, I guess Julia is another option that could have possibly shown up in here.

00:31:29.240 --> 00:31:30.020
Pretty interesting.

00:31:30.020 --> 00:31:31.840
I guess it's worth pulling this up.

00:31:31.840 --> 00:31:38.180
It's probably worth pulling up the Stack Overflow friends and putting those in there.

00:31:38.180 --> 00:31:38.580
Yeah.

00:31:38.580 --> 00:31:38.920
Right.

00:31:38.920 --> 00:31:40.640
So we have R.

00:31:40.640 --> 00:31:46.660
We've got, I don't know where these all lie right now, but I would imagine that the graph

00:31:46.660 --> 00:31:49.520
looks a little bit different across these.

00:31:49.520 --> 00:31:53.200
Just for people listening, I would say R is certainly growing.

00:31:53.500 --> 00:31:57.260
It's actually growing pretty healthily compared to many, many programming languages.

00:31:57.260 --> 00:32:00.580
And it's not going crazy, but it's going across.

00:32:00.580 --> 00:32:05.160
And you've got Python, which if anyone's looked in the last couple of years, it's just done

00:32:05.160 --> 00:32:08.100
insane stuff in terms of popularity over there.

00:32:08.100 --> 00:32:09.300
So there's that.

00:32:09.300 --> 00:32:12.620
And then Julia is, it's, I don't know, I can't really read it.

00:32:12.620 --> 00:32:13.900
It's, you know, like point.

00:32:13.900 --> 00:32:15.320
Not quite the same scale.

00:32:15.560 --> 00:32:21.620
0, 1% versus say like 2% for Julia, for R, excuse me.

00:32:21.620 --> 00:32:23.480
And then for 16% for Python.

00:32:23.480 --> 00:32:28.620
There is something to be considered about choosing not just a language because the language has

00:32:28.620 --> 00:32:33.160
a cool way of doing async or its generators are beautiful, but choosing a language for its

00:32:33.160 --> 00:32:34.240
ecosystem as well.

00:32:34.240 --> 00:32:34.500
Yeah.

00:32:34.500 --> 00:32:36.780
And that's where it touches on this here, right?

00:32:36.780 --> 00:32:40.240
But also for the community that's already there, I think.

00:32:40.240 --> 00:32:40.580
Yeah.

00:32:40.580 --> 00:32:47.080
At least in the area of mathematics that me and Vincent are in, I think R and Python are quite

00:32:47.080 --> 00:32:49.220
prevalent, but they're also used in different.

00:32:49.220 --> 00:32:50.680
Maybe their peers there, right?

00:32:50.680 --> 00:32:50.880
Yeah.

00:32:50.880 --> 00:32:51.340
Yeah.

00:32:51.340 --> 00:32:53.040
A little closer than this would show.

00:32:53.040 --> 00:32:54.920
I think they're also used in different ways.

00:32:54.920 --> 00:32:55.840
Would you agree, Vince?

00:32:55.840 --> 00:33:01.860
I would say Python's very, because of PyPy, things like out of the box, there's one library

00:33:01.860 --> 00:33:04.060
to do this and it's their way to do it.

00:33:04.060 --> 00:33:08.980
Whereas with R, people tend to write their own stuff and then upload it to Cran.

00:33:08.980 --> 00:33:09.400
Yeah.

00:33:09.400 --> 00:33:14.320
So you might get lots and lots of different ways of doing the same thing, but each one might

00:33:14.320 --> 00:33:16.000
specialize slightly in a different way.

00:33:16.000 --> 00:33:21.520
Whereas with Python, I feel like there's one library that does it really, really well.

00:33:21.520 --> 00:33:24.140
I think people just use the ecosystems in different ways.

00:33:24.140 --> 00:33:30.600
This portion of Talk Python to Me is brought to you by the Python at Scale Summit.

00:33:30.600 --> 00:33:35.540
The Python at Scale Summit is a conference to highlight innovative big data solutions for

00:33:35.540 --> 00:33:37.260
Python developers and enterprises.

00:33:37.260 --> 00:33:42.360
You'll learn about trends in the Python big data ecosystem, share stories about implementing

00:33:42.360 --> 00:33:47.380
solutions, find out about new innovations, and connect with other data scientists using

00:33:47.380 --> 00:33:47.780
Python.

00:33:47.780 --> 00:33:53.420
The Python at Scale Summit will be a hybrid conference with talks, workshops, and training.

00:33:53.980 --> 00:33:57.960
Of course, there will be networking and social events to connect with other Python professionals

00:33:57.960 --> 00:33:58.240
too.

00:33:58.240 --> 00:34:04.620
Come hear speakers like Matt Rockland from Coiled, Brian Granger from AWS, and many others from

00:34:04.620 --> 00:34:08.640
amazing organizations such as NASA, Capital One, and BCG.

00:34:08.640 --> 00:34:13.880
Get back together with your peers and learn how they're scaling their computation and data analysis

00:34:13.880 --> 00:34:16.300
using Python and the data science stack.

00:34:16.300 --> 00:34:21.280
Register at talkpython.fm/python dash at dash scale.

00:34:21.620 --> 00:34:28.000
When you visit the link, be sure to use the code TALKPYTHON, all caps, to get 15% off your

00:34:28.000 --> 00:34:28.340
tickets.

00:34:28.340 --> 00:34:32.800
That's code TALKPYTHON at talkpython.fm/python at scale.

00:34:32.800 --> 00:34:34.880
The links in your podcast player's show notes.

00:34:34.880 --> 00:34:37.140
Thanks to the Summit for supporting the podcast.

00:34:39.880 --> 00:34:43.740
Yeah, both those two things are often talked as strengths of either library, right?

00:34:43.740 --> 00:34:47.480
The fact that Python has that one way to do things and the set of different ways to do

00:34:47.480 --> 00:34:49.420
string formatting conversation comes up.

00:34:49.420 --> 00:34:54.240
But then the fact that R is kind of like closer to the science.

00:34:54.240 --> 00:34:59.060
I don't know if that's even accurate, but that's the feeling, I guess, is also a strength, right?

00:34:59.140 --> 00:34:59.420
Yeah.

00:34:59.420 --> 00:35:02.920
The reason there's lots and lots of libraries to do the same thing is because they've each

00:35:02.920 --> 00:35:06.940
specialized in something which a new academic has just written a paper on.

00:35:06.940 --> 00:35:08.740
And that's why there's lots of different ways of doing it.

00:35:08.740 --> 00:35:08.940
Yeah.

00:35:08.940 --> 00:35:09.220
All right.

00:35:09.220 --> 00:35:09.420
Sure.

00:35:09.420 --> 00:35:14.960
And maybe, you know, like out in the audience, the ninja says R is really powerful when it

00:35:14.960 --> 00:35:16.880
comes to things like analytics and so on.

00:35:16.880 --> 00:35:17.340
Right.

00:35:17.340 --> 00:35:21.260
So maybe there's certain areas where, you know, there's the libraries you can pick that

00:35:21.260 --> 00:35:22.020
are definitely better.

00:35:22.020 --> 00:35:22.420
Okay.

00:35:22.420 --> 00:35:24.000
Now we talked about the book.

00:35:24.000 --> 00:35:30.680
The book also, as you pointed out, has an open version where you can find it on GitHub,

00:35:30.680 --> 00:35:32.080
which obviously we'll link to.

00:35:32.080 --> 00:35:38.720
And in here for each one of these, you've got some examples, which are basically the, at least

00:35:38.720 --> 00:35:42.160
for the Python side, the Jupyter Notebook examples here.

00:35:42.160 --> 00:35:45.700
So I thought maybe we could sort of talk through a little bit.

00:35:45.700 --> 00:35:46.640
What is the problem?

00:35:47.040 --> 00:35:52.260
And then maybe really first quick, quickly introduce what this area is.

00:35:52.260 --> 00:35:52.700
Cool.

00:35:52.700 --> 00:35:57.160
And then what we can then talk about the problem, the example problem you put out there and some

00:35:57.160 --> 00:35:58.660
of the libraries and techniques there.

00:35:58.660 --> 00:35:58.920
Sure.

00:35:58.920 --> 00:36:06.680
So the chapter two, which you're looking at right there, you say is about a mathematical

00:36:06.680 --> 00:36:09.720
idea called, a mathematical concept called the Markov chain.

00:36:09.720 --> 00:36:16.780
So it's this probability model that you loosely go that you're, as the system go,

00:36:16.780 --> 00:36:18.260
model changes over time.

00:36:18.260 --> 00:36:20.280
The system is in a particular state.

00:36:20.280 --> 00:36:24.860
And then you go with a given probability of being in that state to another state.

00:36:24.860 --> 00:36:26.480
You can go around like that.

00:36:26.480 --> 00:36:28.200
That's not the best explanation I've ever given.

00:36:28.200 --> 00:36:29.720
I've explained that many times.

00:36:29.720 --> 00:36:32.040
That's probably one of my worst explanations.

00:36:32.040 --> 00:36:34.280
But market change can be used to model queues.

00:36:34.700 --> 00:36:37.740
And there's a whole field of mathematics called queuing theory.

00:36:37.740 --> 00:36:41.060
And that is often used as a very applied problem.

00:36:41.060 --> 00:36:44.740
And so the problem we got here is imagine you've got a barber.

00:36:44.740 --> 00:36:50.640
The barber has kind of two decisions, how many chairs they have to cut hair in and how many

00:36:50.640 --> 00:36:53.400
chairs they have to keep people waiting for a chair.

00:36:53.400 --> 00:36:56.300
And obviously that has an impact on the queue, right?

00:36:56.300 --> 00:36:58.240
Of how long people have to wait to get their hair cut.

00:36:58.240 --> 00:37:03.680
And you can use Markov chains to build up a model and find the probability of having to wait

00:37:03.680 --> 00:37:05.020
relatively simply.

00:37:05.020 --> 00:37:06.780
I know, Garen, if you want to clean up what I just said.

00:37:06.880 --> 00:37:09.480
No, yeah.

00:37:09.480 --> 00:37:15.560
So I think the model then would be the second state and the probabilities of going between

00:37:15.560 --> 00:37:16.840
each state from the state unit.

00:37:16.840 --> 00:37:19.520
And that can be written as a matrix.

00:37:19.520 --> 00:37:24.100
And the neat thing then is there's loads and loads of linear algebra techniques, which at

00:37:24.100 --> 00:37:25.800
this point you don't really need to know about.

00:37:25.800 --> 00:37:30.340
But there are linear algebra techniques, which stuff like number can just do for you, which

00:37:30.340 --> 00:37:35.540
if you know which techniques to use, you know how to interpret that as a real life

00:37:35.540 --> 00:37:36.200
interpretation.

00:37:36.200 --> 00:37:41.460
So for example, there's one certain set of equations you can solve using our Markov chain,

00:37:41.460 --> 00:37:46.420
sorry, using our matrix, which will give you the long run probabilities of being in each

00:37:46.420 --> 00:37:46.760
state.

00:37:46.760 --> 00:37:50.980
There's another certain linear algebraic technique, which will give you something else.

00:37:50.980 --> 00:37:52.480
And that's what this is.

00:37:52.480 --> 00:37:53.040
Yeah, nice.

00:37:53.040 --> 00:37:57.880
Yeah, the problem is essentially comes down to solving a matrix equation, which you could

00:37:57.880 --> 00:38:01.260
write down and understand with basic mathematical knowledge.

00:38:01.260 --> 00:38:02.860
And then that can be solved.

00:38:02.860 --> 00:38:05.800
This goes back to what you told in high school, that matrices are great because computers can do

00:38:05.800 --> 00:38:06.180
them fast.

00:38:06.180 --> 00:38:07.540
But then you never actually get to do that.

00:38:07.540 --> 00:38:08.920
You just write down equations.

00:38:08.920 --> 00:38:12.080
But it's just a call to NumPies, the knowledge library.

00:38:12.080 --> 00:38:14.360
You can just solve it immediately for you.

00:38:14.360 --> 00:38:14.920
It's amazing.

00:38:14.920 --> 00:38:15.180
Yeah.

00:38:15.260 --> 00:38:20.940
So the problem here to make this applied or more operational, I guess, that you all put

00:38:20.940 --> 00:38:25.640
out there says you have a barbershop and the shop notices that there's a lot of customers

00:38:25.640 --> 00:38:30.020
who are, they come and the shop is full and the waiting room is full and people just leave.

00:38:30.020 --> 00:38:33.800
And I, you know, since COVID, I've just decided I'm cutting my own hair.

00:38:33.960 --> 00:38:37.080
I can't, it took too long to find a barber or anything that worked.

00:38:37.080 --> 00:38:38.420
And then after that, I kind of figured it out.

00:38:38.420 --> 00:38:41.740
But there used to be this place I would go to and boy, did it need this problem.

00:38:41.740 --> 00:38:44.880
It would be, you would go there and be like an hour and a half wait.

00:38:45.440 --> 00:38:48.760
And, you know, you just, all the time and you never knew.

00:38:48.760 --> 00:38:53.240
But so they would solve it by giving away free beer to people while they wait, which was nice.

00:38:53.240 --> 00:38:58.400
But this one wants to solve it more in a more formal business way where they want to have

00:38:58.400 --> 00:38:59.380
people just wait less.

00:38:59.380 --> 00:39:03.460
So it says you have two barber chairs, there's room for four people in the waiting room.

00:39:03.460 --> 00:39:08.140
There's about 10 customers an hour and it takes about 15 minutes to serve a customer.

00:39:08.340 --> 00:39:14.580
How can we minimize or how do we change things so that we don't have customers leaving because

00:39:14.580 --> 00:39:16.920
they come in, see a full waiting room and take off, right?

00:39:16.920 --> 00:39:22.780
Instead of knocking down a wall and building a bigger waiting room and, or spending a lot

00:39:22.780 --> 00:39:26.940
of money on an extra barber chair and just seeing the effect and maybe five years later trying

00:39:26.940 --> 00:39:29.680
the other way, you can just mathematically model this.

00:39:29.680 --> 00:39:33.340
And this is a good example of, I think what we described as applied mathematics is that you

00:39:33.340 --> 00:39:35.800
can answer these cool questions.

00:39:35.800 --> 00:39:38.240
So you could say, well, maybe we need a bigger waiting room.

00:39:38.240 --> 00:39:41.060
Or maybe we need more barber chairs or something like that.

00:39:41.060 --> 00:39:41.260
Right.

00:39:41.260 --> 00:39:42.860
And then you can make that trade off.

00:39:42.860 --> 00:39:43.260
Yeah.

00:39:43.260 --> 00:39:49.220
So let me find the, this is the numpy, numpy dot lin alg magic.

00:39:49.220 --> 00:39:53.620
And so basically you set it up so that you set up all these scenarios in these constraints

00:39:53.620 --> 00:39:56.800
and then you just say numpy solve it, right?

00:39:56.800 --> 00:39:57.700
That's pretty much it.

00:39:57.700 --> 00:39:58.160
Yeah.

00:39:58.160 --> 00:40:03.100
And mathematically you're, you write down this matrix a and another vector b and you're solving

00:40:03.100 --> 00:40:04.620
the equation ax equals b.

00:40:04.900 --> 00:40:09.920
Most of the code is just getting the matrix set up and the b set up.

00:40:09.920 --> 00:40:12.180
Actually, most of the code is the doc strings.

00:40:12.180 --> 00:40:15.600
And then, and then, yeah, you just use the lin alg dot least squares.

00:40:15.600 --> 00:40:17.580
That's one of many ways you can do it.

00:40:17.580 --> 00:40:22.120
Least squares is actually getting an approximate solution to the linear, linear algebraic equation.

00:40:22.280 --> 00:40:25.560
And there's various reasons why that's a better idea than solving it directly.

00:40:25.560 --> 00:40:27.740
And yeah, it's just, it's basically one line.

00:40:27.920 --> 00:40:33.620
I think one of the neat things about this then is all that maths you sort of learn in school

00:40:33.620 --> 00:40:38.260
or even first year university where you're doing sort of row operations and stuff.

00:40:38.260 --> 00:40:40.460
That's not the mathematics that matters here.

00:40:40.460 --> 00:40:44.380
The mathematics that matters is what is the matrix you need to do that to?

00:40:44.380 --> 00:40:46.820
And once you've done it, how do you interpret the result?

00:40:46.820 --> 00:40:48.220
That is the mathematics.

00:40:48.900 --> 00:40:54.500
It's not the actual operations that you spent so long doing in first year university.

00:40:54.500 --> 00:40:55.860
Yeah, that is a bit ironic.

00:40:55.860 --> 00:41:00.000
That's such a good point, Darren, because I think what is mathematics is an interesting question, right?

00:41:00.000 --> 00:41:04.060
And like, is it being able to differentiate a whole bunch of quadratics really fast?

00:41:04.060 --> 00:41:07.660
Or is it knowing which quadratic you need to differentiate, right?

00:41:07.660 --> 00:41:14.140
And I would argue that it is that, you know, it's knowing what, really knowing what the problem is.

00:41:14.140 --> 00:41:17.620
So that, okay, then the actual specific mathematical technique, well, who cares, right?

00:41:17.900 --> 00:41:18.180
Sure.

00:41:18.180 --> 00:41:21.800
Well, events people so often say, oh, I'm never going to use that.

00:41:21.800 --> 00:41:23.380
I'm never going to do these things.

00:41:23.380 --> 00:41:25.740
I could do that with a calculator or I could do that.

00:41:25.740 --> 00:41:28.900
I think a lot of that might be slightly misplaced.

00:41:28.900 --> 00:41:33.320
I'm not going to say misplaced, but somewhat misplaced focus on some of these things, right?

00:41:33.320 --> 00:41:36.600
Like if you could say, well, spend a little time showing you how to differentiate,

00:41:36.600 --> 00:41:40.960
then we'll show you how to actually solve problems with that instead of just getting,

00:41:40.960 --> 00:41:44.820
you know, more and more complicated techniques that you can apply.

00:41:44.820 --> 00:41:45.380
Yeah.

00:41:45.380 --> 00:41:47.840
Integration's more of a pick and choose, right?

00:41:47.880 --> 00:41:49.340
I like to find which thing applies.

00:41:49.340 --> 00:41:53.960
But still, you know, instead of going deep, deep, deep, deep, deep into that on the first

00:41:53.960 --> 00:41:54.880
year stuff.

00:41:54.880 --> 00:41:55.100
Yeah.

00:41:55.100 --> 00:41:55.360
Yeah.

00:41:55.360 --> 00:41:58.820
You had someone on the show a little while ago called Allen Downey.

00:41:58.820 --> 00:41:59.040
Yeah.

00:41:59.040 --> 00:42:01.060
He writes a lot of really great books.

00:42:01.060 --> 00:42:05.980
And I remember what he said on your show was about, he likes to think of teaching these

00:42:05.980 --> 00:42:09.020
things in the other way that code allows you to do these things immediately.

00:42:09.020 --> 00:42:13.640
So instead of waiting through and waiting and having to have faith that there's going to

00:42:13.640 --> 00:42:14.400
be used to it.

00:42:14.400 --> 00:42:18.100
You can just flip that around, you know, and understand what it is.

00:42:18.240 --> 00:42:21.040
I think there's also a lot of that and what we should be doing.

00:42:21.040 --> 00:42:21.260
Yeah.

00:42:21.260 --> 00:42:22.080
That's a very good point.

00:42:22.080 --> 00:42:23.200
I totally agree.

00:42:23.200 --> 00:42:23.720
All right.

00:42:23.720 --> 00:42:24.480
Wrap this one up.

00:42:24.480 --> 00:42:30.020
You were able to find that it would be better to increase the number of barbers by one than

00:42:30.020 --> 00:42:32.560
increase the waiting room capacity by two.

00:42:32.660 --> 00:42:38.220
Because I think the chance of the shop being full is like 23% if you had something like

00:42:38.220 --> 00:42:38.460
that.

00:42:38.460 --> 00:42:38.960
Yeah.

00:42:38.960 --> 00:42:39.420
Yeah.

00:42:39.420 --> 00:42:39.720
Yeah.

00:42:39.720 --> 00:42:41.660
Versus like 8%.

00:42:41.660 --> 00:42:42.640
Those kinds of things.

00:42:42.640 --> 00:42:47.140
And those are really concrete numbers that you could go to a business and say, you know,

00:42:47.140 --> 00:42:49.120
you hired us to analyze these things.

00:42:49.120 --> 00:42:54.240
We gathered all the necessary information, like average time, you know, how much that might

00:42:54.240 --> 00:42:55.520
vary and those kinds of things.

00:42:55.520 --> 00:42:59.480
And here are your choices and here are what are the rough expected outcomes.

00:42:59.480 --> 00:43:02.560
Like that's really, really valuable information.

00:43:02.560 --> 00:43:08.840
And I am very sure that most barbershops, even chains, don't do this kind of analysis.

00:43:08.840 --> 00:43:10.960
Not necessarily in your algebra going on in barbershops.

00:43:10.960 --> 00:43:11.500
That's an interest.

00:43:11.500 --> 00:43:12.280
That's a bold claim.

00:43:12.280 --> 00:43:13.980
I know.

00:43:13.980 --> 00:43:21.580
And this question, so a lot of the research, Darren, that I do is within healthcare.

00:43:21.580 --> 00:43:26.000
So we work with hospitals solving essentially very similar problems to the one that we've

00:43:26.000 --> 00:43:26.680
just discussed.

00:43:26.680 --> 00:43:30.760
We were keen to avoid too much healthcare because that's what we do so much of.

00:43:30.760 --> 00:43:34.740
But yeah, this, this, if you get rid of the idea of a barbershop, you talk about a ward,

00:43:34.740 --> 00:43:38.860
how many beds are on the ward, how big's the party out for ambulances to wait in, et cetera,

00:43:38.860 --> 00:43:39.240
et cetera.

00:43:39.240 --> 00:43:44.900
That, that becomes very important and very powerful and not, not something you need to spend thousands

00:43:44.900 --> 00:43:47.920
of pounds or dollars on licenses for.

00:43:47.920 --> 00:43:52.780
Not, you know, the, the, not necessarily even have a huge understanding of, of the learning

00:43:52.780 --> 00:43:53.200
mathematics.

00:43:53.200 --> 00:43:54.200
It's all right there.

00:43:54.320 --> 00:43:55.920
It's all right there available to anyone.

00:43:55.920 --> 00:43:56.160
Yeah.

00:43:56.160 --> 00:44:02.080
But there's way more at stake in a hospital and healthcare than there is for a, of course,

00:44:02.080 --> 00:44:02.400
yeah.

00:44:02.400 --> 00:44:02.940
A haircut.

00:44:02.940 --> 00:44:03.200
Yeah.

00:44:03.200 --> 00:44:03.540
Okay.

00:44:03.540 --> 00:44:06.380
Let's go on to the next one.

00:44:06.380 --> 00:44:09.600
So the next topic is discrete events.

00:44:09.600 --> 00:44:12.180
So I'll find my way over to that one.

00:44:12.180 --> 00:44:15.800
And y'all introduce this one to discrete event simulation.

00:44:16.060 --> 00:44:19.800
This sounds like this might be somewhat in your wheelhouse, right?

00:44:19.800 --> 00:44:20.360
Yeah.

00:44:20.360 --> 00:44:25.940
So I think discrete event simulations probably, if you're used to programming, this is probably

00:44:25.940 --> 00:44:30.360
the one that probably makes the most sense because it's moving virtual things from the

00:44:30.360 --> 00:44:30.900
place essentially.

00:44:30.900 --> 00:44:38.100
So the question we're answering, we're asking here is very similar to the question we just

00:44:38.100 --> 00:44:40.080
answered with Markov chains.

00:44:40.520 --> 00:44:46.100
But sometimes things are too complicated to be able to formulate that correct matrix or

00:44:46.100 --> 00:44:49.300
the matrix doesn't quite work because the situation is a bit too complicated.

00:44:49.300 --> 00:44:53.600
But what we can do is build a virtual representation of our system.

00:44:53.600 --> 00:45:00.900
And by sampling random numbers, we can move virtual people around our barbershop and look at what

00:45:00.900 --> 00:45:02.480
would happen, right?

00:45:02.480 --> 00:45:05.480
And just observe, collect data, crunch that data.

00:45:05.480 --> 00:45:07.540
And this is what discrete event simulation is.

00:45:07.800 --> 00:45:13.220
It's building a virtual representation of the system, using random numbers to play that

00:45:13.220 --> 00:45:17.500
virtual representation system, and then collect some data about what just happened virtually.

00:45:17.500 --> 00:45:18.160
Okay, excellent.

00:45:18.160 --> 00:45:20.920
So this one, let me set the problem that you all laid out here.

00:45:20.920 --> 00:45:22.700
This is a bicycle repair shop.

00:45:22.700 --> 00:45:30.740
And there's a set of gates or actions or I guess events you might say that it flows through.

00:45:30.740 --> 00:45:36.120
So a bike arrives randomly at a rate of 15 bikes per hour.

00:45:36.120 --> 00:45:39.260
They show up and they say, hey, there's something wrong with my bike.

00:45:39.260 --> 00:45:42.320
And the staff member looks at it and helps them.

00:45:42.320 --> 00:45:43.720
That takes about three minutes.

00:45:43.720 --> 00:45:46.940
But it turns out about 20% of the time, the bikes don't need repair.

00:45:46.940 --> 00:45:49.900
There's like, did you know that there's a thing to just twist here and tighten it?

00:45:49.900 --> 00:45:50.560
All right, go away.

00:45:50.560 --> 00:45:51.740
You're fixed.

00:45:51.740 --> 00:45:52.460
You're cured.

00:45:52.460 --> 00:45:56.140
But 80% of the time, there's something wrong, flat tire, broken chain, whatever.

00:45:56.140 --> 00:46:00.300
And that gets put into a place where they're waiting to work on it.

00:46:00.300 --> 00:46:02.180
And that takes about six minutes, right?

00:46:02.220 --> 00:46:03.520
And then you've got to collect it back.

00:46:03.520 --> 00:46:11.980
The question is, I guess the difference that I see here is there's not an uncertainty of whether or not you want a haircut when you show up at a barbershop.

00:46:11.980 --> 00:46:16.540
There's just the amount of time and where the people are and the actions they might take if it's too full.

00:46:16.640 --> 00:46:21.040
But here you may show up and you may need help or you may not need help and so on, right?

00:46:21.040 --> 00:46:22.480
So there's, is that the difference?

00:46:22.480 --> 00:46:25.460
I suppose that is the difference between these two problems.

00:46:25.460 --> 00:46:29.440
But that's not the reason we would use simulation over Markov chains.

00:46:29.440 --> 00:46:35.960
In fact, the situation we're looking at here could be formulated as a Markov chain.

00:46:35.960 --> 00:46:42.960
The difference I see is that in this situation, you could have an infinite amount of bicycles in your bicycle shop.

00:46:43.320 --> 00:46:51.240
So if we were to formulate that as a Markov chain, we'd have an infinite matrix, which is not terrible to deal with, but you wouldn't be able to deal with it in the way we just did.

00:46:51.240 --> 00:46:51.980
Got it. Okay.

00:46:51.980 --> 00:46:58.960
Talking about the states that I did kind of awkwardly in the previous chapter, it's just how many people are in the shop.

00:46:58.960 --> 00:47:00.340
So there's three people in the shop.

00:47:00.340 --> 00:47:05.260
Well, there's a probability that the next thing that happens is four or the probability that the next thing that happens is two.

00:47:05.400 --> 00:47:11.220
So it's a very straightforward set of states that is finite, as Garen said.

00:47:11.220 --> 00:47:14.360
Here, there's two things to keep track of.

00:47:14.360 --> 00:47:19.320
There's the number of bikes being seen by, waiting to be seen by an inspector, the number of bikes waiting to be seen by the repair shop.

00:47:19.700 --> 00:47:27.540
And that just immediately, the fact that now you've got these two dimensions that can change, just again adds to the complexity and the fact that it's an infinite amount of them.

00:47:27.540 --> 00:47:28.020
Yeah.

00:47:28.020 --> 00:47:36.840
So the reason we would use simulation for this is because it's a more complicated situation for a variety of reasons than what we had before.

00:47:37.260 --> 00:47:41.960
And it would take a really, really big, if not infinite matrix to be able to solve this.

00:47:41.960 --> 00:47:47.620
So why would we go to that effort when we can get quick, easy answers just by virtually playing this?

00:47:47.620 --> 00:47:48.860
These two chapters are paired.

00:47:48.860 --> 00:47:57.620
And actually, there's this, all the chapters are paired in the book for the reason that they are kind of the two similar types of problems from opposite angles.

00:47:58.180 --> 00:48:13.580
And correct me, Garen, if you don't agree, but I think that the two opposite angles about numerical tractability, how much you can do with an exact method, which is what the previous chapter was, versus a more approximative method.

00:48:13.580 --> 00:48:17.180
And it's not always easy to say exactly what you should use one or the other.

00:48:17.180 --> 00:48:19.620
Sometimes it's absolutely clear, but sometimes it's not.

00:48:19.620 --> 00:48:25.180
But there's these pairs of chapters that kind of reflect that, you know, the size of the problem, for want of a better word.

00:48:25.180 --> 00:48:25.600
Very interesting.

00:48:25.760 --> 00:48:31.700
Okay, the fundamental Python bit here is the CIW, or you pronounce that Q?

00:48:31.700 --> 00:48:32.900
Yeah, I call that Q.

00:48:32.900 --> 00:48:35.400
C-I-W, Q.

00:48:35.400 --> 00:48:37.560
It's the Welsh word for Q.

00:48:37.560 --> 00:48:38.520
Q-U-E-U-E.

00:48:38.520 --> 00:48:39.820
It's the Welsh word for that.

00:48:39.820 --> 00:48:41.580
And that's why I call it the library though.

00:48:41.580 --> 00:48:42.300
Fantastic.

00:48:42.300 --> 00:48:43.140
All right.

00:48:43.140 --> 00:48:55.680
And so the idea is basically you state the problem in terms of the arrival rate of events, the inspection or the service distributions in terms of how those flow through there.

00:48:55.680 --> 00:48:59.280
The number of things that can be servicing it and the routing and so on.

00:48:59.280 --> 00:49:02.380
You create a network with the Q library.

00:49:02.380 --> 00:49:06.280
And then you could just ask it questions, right?

00:49:06.280 --> 00:49:08.440
You can tell it to run a simulation.

00:49:08.440 --> 00:49:13.540
You can run it for some amount of time, like eight seconds or so on.

00:49:13.540 --> 00:49:18.980
And it's interesting that it simulates it, that it doesn't exactly solve it, right?

00:49:19.140 --> 00:49:21.080
That's the point of simulation.

00:49:21.080 --> 00:49:32.040
Well, not the point, but like one of the uses of simulation is that we can quite easily simulate something that's too complicated to solve exactly or would take too long to solve exactly.

00:49:32.040 --> 00:49:33.700
But we can quite easily simulate it.

00:49:33.700 --> 00:49:41.120
The trade-off then is because assimilation is essentially streams of random numbers that we do things to, you could get extreme values.

00:49:41.120 --> 00:49:42.720
You could get flukes.

00:49:43.200 --> 00:49:47.080
So you lose accuracy, but you gain efficiency.

00:49:47.080 --> 00:49:47.380
Yeah.

00:49:47.380 --> 00:49:52.340
So the idea is you run it over and over and over again with the randomness playing out there.

00:49:52.340 --> 00:49:56.340
And then you just say, well, what is the most common set of outcomes look like?

00:49:56.340 --> 00:49:57.380
Yes, actually, I guess.

00:49:57.380 --> 00:49:57.660
Yeah.

00:49:57.660 --> 00:49:58.120
Very cool.

00:49:58.120 --> 00:50:00.280
So what did we learn from this one?

00:50:00.280 --> 00:50:07.860
That we could add an extra inspector at the front or we could add an extra repairer.

00:50:08.300 --> 00:50:10.940
And what was the better outcome here?

00:50:10.940 --> 00:50:16.780
So we were measuring was the maximum amount of time a bicycle spends in the shop.

00:50:16.780 --> 00:50:19.000
We wanted to get bicycles out as quick as possible.

00:50:19.000 --> 00:50:28.180
So if we added an extra bicycle inspector, we would reduce our time, maximum time in the shop by quite a lot.

00:50:28.180 --> 00:50:32.600
But if we added an extra repairer, we'd reduce it, but not quite so much.

00:50:32.600 --> 00:50:36.780
So we essentially found that the bottleneck was the inspection desk and not the repairing.

00:50:36.780 --> 00:50:37.480
How interesting.

00:50:37.740 --> 00:50:49.540
And I suspect, maybe this is not true, but I feel like if I was a business, knowing that would not just help me hire the right person, but I think having an inspector type of person would be easier to get.

00:50:49.540 --> 00:50:50.100
Right.

00:50:50.100 --> 00:50:55.560
You don't have to have as great of a skill set to actually be the mechanic that does the repairs.

00:50:55.560 --> 00:50:59.960
So that's really valuable as somebody who runs a bike shop.

00:50:59.960 --> 00:51:02.900
I will also throw out another statement here.

00:51:02.900 --> 00:51:03.760
It's probably true.

00:51:04.100 --> 00:51:07.820
I also suspect bike shops don't employ these techniques, but should.

00:51:07.820 --> 00:51:10.820
They can now.

00:51:10.820 --> 00:51:12.740
They can.

00:51:12.740 --> 00:51:14.260
Well, they can now, honestly.

00:51:14.260 --> 00:51:15.340
I think.

00:51:15.500 --> 00:51:17.660
I believe larger companies probably would.

00:51:17.660 --> 00:51:23.960
Stuff like supermarkets and airports probably would have a team of people behind them doing this, but smaller shops, probably not.

00:51:23.960 --> 00:51:24.260
Yeah.

00:51:24.260 --> 00:51:25.800
Gosh, I'm trying to remember the name.

00:51:25.800 --> 00:51:26.860
Not always, right?

00:51:26.860 --> 00:51:28.760
Would be a little caveat I'd say to Gary.

00:51:28.760 --> 00:51:39.240
We certainly know of lots of examples of big entities, companies, things that make very expensive decisions without doing these sorts of investigations.

00:51:39.640 --> 00:51:39.880
Yeah.

00:51:39.880 --> 00:51:40.260
Yeah.

00:51:40.260 --> 00:51:42.700
Well, you mentioned grocery stores and stuff.

00:51:42.700 --> 00:51:49.440
I had the folks from Kroger, which I think, if not, is the largest, one of the largest chains in the US.

00:51:49.520 --> 00:51:55.380
They have basically an analytics and data science subsidiary called 8451.

00:51:55.380 --> 00:51:59.560
They employ 200 data scientists who do R and Python.

00:51:59.560 --> 00:52:00.940
That's awesome.

00:52:00.940 --> 00:52:06.320
That's not joking around in terms of, you know, where do the bananas go and those types of things, right?

00:52:06.320 --> 00:52:07.160
So you're right.

00:52:07.160 --> 00:52:09.900
The larger companies definitely, definitely invest in that.

00:52:10.040 --> 00:52:12.560
It's the interesting thing about what is data science, right?

00:52:12.560 --> 00:52:18.860
Talking about data scientists in that, are they looking at historic data and identifying things?

00:52:18.860 --> 00:52:21.580
And I suspect that there's no answer to my question here.

00:52:21.580 --> 00:52:24.120
I suspect different data scientists do different things.

00:52:24.120 --> 00:52:29.260
But when you share a data science department, that doesn't necessarily mean they're doing this type of work.

00:52:29.260 --> 00:52:29.980
It might be.

00:52:29.980 --> 00:52:30.400
Absolutely.

00:52:30.400 --> 00:52:30.840
It might be.

00:52:30.840 --> 00:52:37.740
But it might also be diving into the data and understanding and observing as opposed to necessarily modeling possible.

00:52:37.980 --> 00:52:38.760
It could be AI.

00:52:38.760 --> 00:52:40.720
It could be AI and ML.

00:52:40.720 --> 00:52:45.180
It could be a data ETL, just bringing in data and just getting into system.

00:52:45.180 --> 00:52:46.760
Yeah, there's all these different aspects.

00:52:46.760 --> 00:52:58.400
I wonder more about the data science on when do I go from being somebody that uses, say, Python for computation to becoming a data science, right?

00:52:58.400 --> 00:53:07.040
When do I, would you cross the boundary from being a mathematician or a biologist to becoming a data scientist that has some understanding of biology, for example?

00:53:07.280 --> 00:53:14.860
I would argue it kind of goes back to what we were saying earlier about what is an applied mathematician and, you know, at what point are these labels helpful and at what point are they not, right?

00:53:14.860 --> 00:53:15.920
Yeah, exactly.

00:53:15.920 --> 00:53:21.320
Out in the audience, Fritam says, yeah, data science is such a catch-all phrase right now.

00:53:21.320 --> 00:53:21.860
I would agree.

00:53:21.860 --> 00:53:22.880
Also a buzzword.

00:53:22.880 --> 00:53:24.940
So if you're looking for a job, it's a good one.

00:53:24.940 --> 00:53:26.420
All right.

00:53:26.420 --> 00:53:28.640
Let's go on to another one.

00:53:28.640 --> 00:53:30.740
We'll get through as many of these as we can.

00:53:30.740 --> 00:53:31.920
And then we have time for anyway.

00:53:32.320 --> 00:53:35.360
So those two problem areas were paired together.

00:53:35.360 --> 00:53:35.680
Yeah.

00:53:35.680 --> 00:53:40.140
The next area that you focused on is fairly different with differential equations.

00:53:40.140 --> 00:53:44.880
So those two areas that we were just in is the book's got parts and it's two chapters in every part.

00:53:44.880 --> 00:53:47.160
And that was in the probabilistic modeling is what we'd call it.

00:53:47.160 --> 00:53:49.560
It's modeling these probabilistic type situations.

00:53:49.560 --> 00:53:52.300
And here we're in the dynamical systems section.

00:53:52.300 --> 00:53:56.620
And so specifically here, we're looking at a problem where differential equations can be used.

00:53:56.620 --> 00:54:03.500
And we wrote, we started writing this book before the world changed, before COVID happened.

00:54:03.500 --> 00:54:07.100
And I remember coming into our writing sessions.

00:54:07.100 --> 00:54:08.920
I have to say, I really enjoyed writing the book.

00:54:08.920 --> 00:54:11.380
Very glad to have it finished, but I enjoyed writing the book.

00:54:11.380 --> 00:54:14.720
And I said to Gary, Gary, do we need to change this chapter?

00:54:14.720 --> 00:54:17.340
Because this chapter, there's a disease going around.

00:54:17.340 --> 00:54:18.640
I think we call it a cold.

00:54:18.640 --> 00:54:18.880
Yeah.

00:54:18.880 --> 00:54:21.320
Everyone's caught a cold in a small community.

00:54:21.940 --> 00:54:24.020
There's a cost to not being able to work.

00:54:24.020 --> 00:54:24.300
So coined that to have a cold.

00:54:24.300 --> 00:54:24.920
Right?

00:54:24.920 --> 00:54:28.680
And there's a cost, a financial cost to not be able to work.

00:54:28.680 --> 00:54:35.540
Financial cost with a possible cure that would double the rate at which you get better from the cure.

00:54:35.540 --> 00:54:43.040
Is it worth, from the cold, pardon me, is it worth financially to get this cure was the problem.

00:54:43.040 --> 00:54:45.480
And yeah, we were like, should we make this about COVID?

00:54:45.480 --> 00:54:51.100
You know, should we just essentially all the graphs we spent so long looking at that was on the news all the time.

00:54:51.100 --> 00:54:51.780
You know, this is it.

00:54:51.780 --> 00:54:53.880
This is essentially the same thing.

00:54:53.880 --> 00:54:54.240
Yeah.

00:54:54.240 --> 00:54:55.300
Should we make it about COVID?

00:54:55.300 --> 00:54:57.200
And we decided not to, didn't we, Gary?

00:54:57.200 --> 00:54:59.920
We decided to just keep it somewhat abstract.

00:54:59.920 --> 00:55:01.980
But yeah, that's the problem here.

00:55:02.500 --> 00:55:15.060
And yeah, the model is, is a textbook for want of a better word, a textbook model that's often taught when you start learning about systems of differential equations called the SIR model.

00:55:15.180 --> 00:55:21.500
And the SIR model has a population in three groups, susceptible people.

00:55:21.500 --> 00:55:23.340
Sorry, Vince, I think you're talking about a different chapter.

00:55:23.340 --> 00:55:24.880
I am talking about the right chapter.

00:55:24.880 --> 00:55:26.020
Thank you, Gary.

00:55:26.020 --> 00:55:27.140
Thank you, Gary.

00:55:27.140 --> 00:55:28.580
Sorry, I went off on one.

00:55:28.580 --> 00:55:29.100
Thank you.

00:55:29.100 --> 00:55:30.240
That's the next chapter.

00:55:30.240 --> 00:55:31.960
No, no, brilliant, Gary.

00:55:31.960 --> 00:55:32.780
They're similar.

00:55:32.780 --> 00:55:33.860
Yeah, they're similar.

00:55:33.860 --> 00:55:34.680
Very similar.

00:55:35.120 --> 00:55:42.860
This one we wrote, you can write down a differential equation that dictates not a system, but just the number of people that are infected over time.

00:55:42.860 --> 00:55:45.020
And so you can write that down, that differential equation.

00:55:45.020 --> 00:55:46.840
You can get a solution for it.

00:55:46.840 --> 00:55:47.420
Sorry.

00:55:47.420 --> 00:55:48.380
Thank you, Gary.

00:55:48.380 --> 00:55:49.100
Thank you.

00:55:51.720 --> 00:55:52.620
Yeah, no worries.

00:55:52.620 --> 00:55:57.580
This one actually uses an interesting library that I am just fascinated with.

00:55:57.580 --> 00:55:58.820
It's an awesome library.

00:55:58.820 --> 00:55:59.480
Called SimPy, right?

00:55:59.480 --> 00:56:00.020
Yeah.

00:56:00.020 --> 00:56:00.420
Yeah.

00:56:00.420 --> 00:56:06.460
I just had the folks on back in May, not too long ago for this one, Andre and Aaron for this.

00:56:06.460 --> 00:56:20.120
And I did not expect this from Python because it's, I expected NumPy and the linear algebra type things, but not, you know, here is the integral of this solution of this differential equation.

00:56:20.120 --> 00:56:22.280
And here are the steps that I took to get there.

00:56:22.280 --> 00:56:22.960
It is so neat.

00:56:22.960 --> 00:56:31.920
SimPy is an incredible library that just gives you so much of what mathematics is thought to have to be commercial in that you can have all your symbolic stuff.

00:56:31.920 --> 00:56:38.600
So, you know, if you want to know what is X plus X, you don't need to tell the computer what value X has.

00:56:38.600 --> 00:56:43.580
With SimPy, the computer can just understand the concept that X is this mathematical idea.

00:56:43.580 --> 00:56:44.580
And it's incredible.

00:56:44.580 --> 00:56:47.440
And it's a fantastic, fantastic library.

00:56:47.440 --> 00:56:55.700
I think it was when I started teaching programming to our first year cohort, I actually taught SageMath and SageMath is built on top of SimPy.

00:56:55.700 --> 00:56:59.060
But at some point I decided to just teach with SimPy.

00:56:59.060 --> 00:57:00.040
And so that's what we use here.

00:57:00.040 --> 00:57:00.960
That's what we use here.

00:57:00.960 --> 00:57:04.920
We build up the actual numeric solution for the differential equations.

00:57:04.920 --> 00:57:11.120
We find the expression that if you put it into this differential equation, that would be the solution.

00:57:11.120 --> 00:57:13.000
We get an exact solution here.

00:57:13.000 --> 00:57:13.940
It's pretty wild.

00:57:13.940 --> 00:57:15.940
You say the way you set it up.

00:57:15.940 --> 00:57:17.800
I mean, everything about SimPy is wild.

00:57:17.800 --> 00:57:26.840
But the way you set it up here is you say, I'm going to create some symbols like time T or constant alpha or so on or initial conditions.

00:57:26.840 --> 00:57:28.280
And then you say, I'm going to have a function.

00:57:28.280 --> 00:57:29.480
You don't say what the function is.

00:57:29.480 --> 00:57:31.680
You say there is a function called I.

00:57:31.900 --> 00:57:37.220
And then what you define for the thing you're going to work with is you say, sim.equation.

00:57:37.220 --> 00:57:44.180
And you say, the equation is going to be given the derivative of this function of T and T.

00:57:44.180 --> 00:57:46.500
And then it has this expression in there.

00:57:46.500 --> 00:57:46.780
Negative.

00:57:46.780 --> 00:57:54.660
I guess that's probably the, what you're specifying here is this is the derivative, not the equation itself, which is negative alpha times I of T, right?

00:57:54.660 --> 00:58:02.160
This is one of those parts of SimPy that when we teach this to our first years, it allows us to help identify misunderstandings about the mathematics.

00:58:02.160 --> 00:58:06.640
I think programming can often help you understand mathematics better and likewise and vice versa.

00:58:06.640 --> 00:58:12.940
But people often come to study mathematics and don't know the difference between a formula and an equation.

00:58:12.940 --> 00:58:14.500
And an equation has two sides.

00:58:14.500 --> 00:58:16.440
An equation has an equal side in the middle.

00:58:16.440 --> 00:58:19.940
And so what you're creating here is sim.equation.

00:58:19.940 --> 00:58:23.900
Sim.equ takes two variables, a left-hand side and a right-hand side.

00:58:23.900 --> 00:58:25.340
That's actually the name of the parameters.

00:58:25.340 --> 00:58:28.360
So the left-hand side is the derivative of I.

00:58:28.360 --> 00:58:42.760
So it's saying that the speed at which the number of infected people changes over time, that's the left-hand side of your equation, is equal to, and then the right-hand side of your equation, some constant alpha minus some constant alpha, sorry, times the number.

00:58:42.760 --> 00:58:47.220
So the speed is related to the number, and that's really the relationship that defines differential equations.

00:58:47.220 --> 00:58:47.660
Right.

00:58:47.660 --> 00:58:55.640
And in this scenario, you can change the alpha, the rate of recovery, by providing medicine or just letting people do their thing, you know?

00:58:55.640 --> 00:58:57.160
Naturally recovery, absolutely.

00:58:57.160 --> 00:58:59.700
Yeah, yeah, exactly.

00:58:59.700 --> 00:59:05.960
So in here, you say, you know, given these constants, we're going to, you know, get the equation and then you solve it.

00:59:05.960 --> 00:59:08.360
You come up with the actual symbolic solution.

00:59:08.360 --> 00:59:09.500
Symbolic solution.

00:59:09.500 --> 00:59:10.460
Always blows my mind.

00:59:10.460 --> 00:59:14.520
You say sim.dsolve, like, does that solve the differential equation?

00:59:14.520 --> 00:59:15.220
I'm guessing.

00:59:15.220 --> 00:59:22.260
You give it the equation and the initial conditions and stuff, and you're like, where the initial condition is, we defined a function I.

00:59:22.260 --> 00:59:24.620
We didn't say what it is, really.

00:59:24.620 --> 00:59:30.420
But we said at zero, it's the initial condition of like how many people are sick or whatever that turned out to be, which is just...

00:59:30.420 --> 00:59:31.360
All of which are symbols.

00:59:31.360 --> 00:59:31.680
Amazing.

00:59:31.680 --> 00:59:33.020
Everything here is just an idea.

00:59:33.020 --> 00:59:34.300
Nothing's a number.

00:59:34.300 --> 00:59:35.900
Everything is just an idea or a concept.

00:59:35.900 --> 00:59:36.340
Yeah, yeah.

00:59:36.340 --> 00:59:37.700
We don't know anything about it.

00:59:37.700 --> 00:59:40.780
We just know that these are the constraints of the equation.

00:59:40.780 --> 00:59:45.960
And now it gives you, you get the solution and it's, it's an equation.

00:59:45.960 --> 00:59:46.660
Let's see.

00:59:46.660 --> 00:59:47.600
I got to go further down.

00:59:47.600 --> 00:59:48.460
So that's it there.

00:59:48.460 --> 00:59:48.980
It says that...

00:59:48.980 --> 00:59:54.760
It gives you the actual solution and then you start plugging in like the numbers, the different conditions, and it gives you the answers, right?

00:59:54.760 --> 00:59:55.020
Sorry.

00:59:55.020 --> 00:59:55.560
Exactly.

00:59:55.560 --> 00:59:55.960
Yeah.

00:59:55.960 --> 00:59:57.260
You plug in the numbers at the end.

00:59:57.260 --> 01:00:04.160
So we get the cost if you were to purchase the cure would be 700 and the cost without purchasing the cure would be 500.

01:00:04.160 --> 01:00:12.520
It's just the overall costing into account productivity, offsetting all the impacts of similar type of decisions that governments all over the world will be making.

01:00:12.920 --> 01:00:16.460
And in this particular case, for this cold, Jadier is no, it is not worth getting.

01:00:16.460 --> 01:00:17.340
But good care.

01:00:17.340 --> 01:00:20.780
Don't tell that to the people who are suffering with a fever.

01:00:20.780 --> 01:00:22.580
It's a cold.

01:00:22.580 --> 01:00:24.980
This is not like the common cold.

01:00:24.980 --> 01:00:25.740
This is a cold.

01:00:25.740 --> 01:00:27.140
Yeah.

01:00:27.140 --> 01:00:35.220
We found this chapter really, really neat because when we started doing exactly the same thing going, how do we solve this in R?

01:00:35.220 --> 01:00:38.940
We realized we had to use a completely different approach.

01:00:38.940 --> 01:00:40.680
How do is a bad phrase.

01:00:40.680 --> 01:00:45.820
We went looking at R for an equivalent symbolic mathematics package in R.

01:00:45.820 --> 01:00:47.040
And there is one.

01:00:47.040 --> 01:00:50.840
But really, it's a wrapper for Python's SymPy.

01:00:50.840 --> 01:00:57.640
And so we found ourselves writing strings of Python that you pass to R that R passes to SymPy.

01:00:57.640 --> 01:00:58.700
And yeah.

01:00:58.700 --> 01:00:59.380
Sorry.

01:00:59.380 --> 01:00:59.620
Yeah.

01:00:59.620 --> 01:01:01.580
I think this is your point now.

01:01:01.580 --> 01:01:03.840
That doesn't sound like really like solving it in R.

01:01:03.840 --> 01:01:05.020
Exactly.

01:01:05.360 --> 01:01:05.800
Exactly.

01:01:05.800 --> 01:01:11.220
So then, so we decided, well, no, if we were just to solve this in R, how would you do it?

01:01:11.220 --> 01:01:18.200
And as there is no symbolic library, a library for doing symbolic mathematics in R, we solved it numerically.

01:01:18.200 --> 01:01:21.000
And that just shows like exactly the same problem.

01:01:21.000 --> 01:01:23.040
We get exactly the same answers out.

01:01:23.040 --> 01:01:31.240
But the bit in the middle, the solution steps were completely different in both Python and R for those reasons, which I think is really neat.

01:01:31.240 --> 01:01:35.000
I think that shows that you're concentrating on the problem.

01:01:35.000 --> 01:01:37.360
Rather than the solution steps.

01:01:37.360 --> 01:01:37.820
Absolutely.

01:01:38.320 --> 01:01:48.120
And what you've learned here is that this function that expresses the cost of people being sick, I of T that we talked about is 100 for 100 people sick.

01:01:48.120 --> 01:01:52.060
E to the negative alpha of T, which is, it's pretty awesome.

01:01:52.200 --> 01:02:01.940
I mean, there's never, there's almost always a reason to marvel at the number E. Have you all read the book E, the story of a number? Have I mentioned this before?

01:02:01.940 --> 01:02:03.660
I don't think I have. No.

01:02:04.540 --> 01:02:08.100
This, this book is so good. It just goes back to the history.

01:02:08.100 --> 01:02:08.580
Is it good?

01:02:08.580 --> 01:02:14.160
Literally of just, oh yeah, yeah. It's, I totally can recommend it. So people can check that out if they're...

01:02:14.160 --> 01:02:19.900
E is a ridiculously cool number, right? In terms of, I know Pi gets all the press, but E is a ridiculously cool number.

01:02:20.100 --> 01:02:22.500
It's way cooler than Pi. It's way cooler than Pi.

01:02:22.500 --> 01:02:31.200
I mean, Pi is cool, but it's, if you are into the change of anything, differential equations, integrations, like it's, there's nothing like it.

01:02:31.200 --> 01:02:32.700
I had not heard about that.

01:02:32.700 --> 01:02:37.660
We are going pretty long on time here. So I don't, I want to be respectful of your all time and everything.

01:02:37.840 --> 01:02:43.840
So maybe, is there any other, the problems or areas or libraries that you've made? Actually, let me, let me pick one here.

01:02:43.840 --> 01:02:50.620
Which chapter is the game theory one? Seven or nine? Let's see.

01:02:50.620 --> 01:02:54.240
Wait for it. No, it's not.

01:02:54.240 --> 01:02:55.400
Just one before that. Yeah.

01:02:55.400 --> 01:02:57.960
Or yeah, no, it wasn't before that. Yeah. Got it. Yep.

01:02:57.960 --> 01:03:01.720
The missing one is the linear programming one. All right. Game theory.

01:03:01.720 --> 01:03:06.980
And the reason I want to pull this up is we talked about you, Brent's library and his application.

01:03:07.420 --> 01:03:20.260
How about some Nash pie? I mean, there was a John Nash won the Nobel prize in economics for coming up with, basically proving every, in every game, there was an equilibrium position, which is insane that that's true.

01:03:20.260 --> 01:03:24.060
In a 17 page PhD thesis. Yeah. Incredible.

01:03:24.060 --> 01:03:33.120
And not bad. Not bad. so quick game theory. What is it? People maybe have heard of it, but they don't really know, or maybe they do know.

01:03:33.120 --> 01:03:36.540
I fumbled through the previous one, Gary, but it would make sense for me to take this one.

01:03:36.780 --> 01:03:37.340
Yeah. She should.

01:03:37.340 --> 01:03:37.580
Right.

01:03:37.580 --> 01:03:59.940
So game theory is the study of emergent interactions of if you can kind of make some decisions, describe a system at the lower level, how individuals interact, what happens at, at the higher level. That that's the study of game theory. It's, it's interactive decision-making. A lot of the time you can think of decision-making.

01:03:59.940 --> 01:04:02.500
For example, with that barbershop problem.

01:04:02.500 --> 01:04:26.900
I've discussed at the first stage of, well, if I had this many chairs or this much waiting room, what's the best thing for me? But there you're the only thing that your decision gets hit back with. If you think of a game of tennis, it's playing against the wall. It's playing against that probability. Game theory is just taking it to a slightly different dimension where you have two barbershops. What if you had two barbershops? And if one does this and the other does that, where are the customers going to go? Is the kind of idea.

01:04:26.900 --> 01:04:36.760
Right. Both barbershops could say, expand their waiting room. Both barbershops could hire more barbers or one could say, you know what, if you hire barbers, I'm getting a bigger waiting room. It's like that trade-off. Yeah.

01:04:36.880 --> 01:05:03.880
Exactly. A very famous problem in game theory is the prisoner's dilemma. Two criminals are convicted and are separated and are questioned and they can give evidence about the other prisoner. If they both stay quiet, they both give no evidence. The police won't have enough evidence to send them to prison for a very long time. They'll have to stay for a very short amount of time. So that's in their interest. But the police offer me a deal. And if I give evidence about Geraint, then I'll go free and Geraint will go to prison for far longer.

01:05:03.880 --> 01:05:19.860
Geraint gets offered the same deal and that immediately creates a dilemma that we will both end up getting for a long time. We will both give evidence one about the other. And so that's a very simple model. And that's actually what I came on the show a long time ago to talk about was that actual model and all the interesting stuff you could do with that.

01:05:19.860 --> 01:05:46.680
But this game theoretic chapter is paired with another chapter called agent-based modeling. It's again, one of those points where labeling is interesting because for some agent-based modeling is a subset of game theory. No way it doesn't really matter. And so this chapter is all about emergent behavior. If we can define how decision makers in our system interact, what happens based on what they do, and they being plural, then what is the emergent behavior that you can measure?

01:05:46.680 --> 01:06:00.720
The game that we model in this chapter is there are two taxi firms that serve a community, again, a small town, and they get to decide how many taxis they're going to have.

01:06:00.720 --> 01:06:06.400
The town wants to incentivize these two taxi firms, essentially not to collude.

01:06:06.400 --> 01:06:11.140
They want to incentivize the taxi firms to give better service to the population.

01:06:11.140 --> 01:06:17.620
And so we create the game that allows the tax firms to decide how many taxis they're going to have, one, two, or three.

01:06:17.620 --> 01:06:29.060
And we build a little model that describes what happens if each tax firm has one taxi, what happens if one has one, the other has two, what happens if one has one, the other has three, et cetera, et cetera.

01:06:29.060 --> 01:06:37.960
And then we obtain what is called the Nash equilibrium, which is a measure of if both tax firms know all this and act rationally, what would we expect to happen?

01:06:37.960 --> 01:06:50.320
It's just amazing how these outcomes, it's just so clear, you know, if what's the likelihood of the other person doing or the other player participant taking this particular choice.

01:06:50.320 --> 01:06:54.180
And if or if I take this choice, what are they most likely to do?

01:06:54.180 --> 01:06:55.940
And where are things going to settle in?

01:06:55.940 --> 01:06:58.660
It's really neat how this all sets up here.

01:06:58.660 --> 01:07:00.660
And let me find the section.

01:07:00.660 --> 01:07:01.820
Yeah.

01:07:01.820 --> 01:07:10.660
So what you do is you create a NumPy array or that represents one of the participants outcomes and choices.

01:07:10.660 --> 01:07:14.520
And this one, I guess it's a what is this a zero sum game?

01:07:14.520 --> 01:07:15.780
Because you know, quite not quite.

01:07:15.780 --> 01:07:16.420
It's not zero sum.

01:07:16.420 --> 01:07:17.340
It's symmetric.

01:07:17.340 --> 01:07:18.180
That's symmetric.

01:07:18.180 --> 01:07:18.440
OK.

01:07:18.440 --> 01:07:22.020
So you pass in the transpose of that, which says here's the other player.

01:07:22.020 --> 01:07:24.500
They get basically the opposite of that.

01:07:24.940 --> 01:07:28.260
And then you just say Nash.game and off you go, right?

01:07:28.260 --> 01:07:28.600
Yeah.

01:07:28.600 --> 01:07:30.240
Nash.game creates this game.

01:07:30.240 --> 01:07:31.480
It creates the game object.

01:07:31.480 --> 01:07:35.760
And in the game object, the Nash.py library has all sorts of different algorithms that could be used.

01:07:35.760 --> 01:07:42.140
And the one where we use is something called support enumeration, which is essentially the basic by definition idea.

01:07:42.140 --> 01:07:56.200
And the thing that we do do here is we say, OK, if we are the town hall trying to decide how to let these two tax firms compete, is we essentially are deciding not how we regulate them, but how we incentivize them.

01:07:56.200 --> 01:07:59.180
So what game should we make the two taxi firms play?

01:07:59.180 --> 01:08:08.380
And we do that by essentially say, I guess we will tax you slightly less if you put on this amount of taxis or give you an extra bonus if not.

01:08:08.640 --> 01:08:20.120
And the idea is to what is the smallest amount that the city hall has to kind of guarantee to taxi firms to ensure that their rational behavior would be to give that service to the population.

01:08:20.120 --> 01:08:23.400
So, yeah, then it's just that those three lines you go on the screen right there.

01:08:23.400 --> 01:08:25.520
So while loop where it just increments that offset.

01:08:25.520 --> 01:08:25.800
Yeah.

01:08:25.800 --> 01:08:30.180
And you just say, get the equilibrium from it and off it goes.

01:08:30.180 --> 01:08:30.500
Yeah.

01:08:30.500 --> 01:08:31.300
Very nice.

01:08:31.300 --> 01:08:31.940
OK.

01:08:31.940 --> 01:08:32.820
This is really great.

01:08:32.820 --> 01:08:34.340
And I guess it's worth pointing out.

01:08:34.340 --> 01:08:35.760
I heard of the guy.

01:08:35.760 --> 01:08:36.540
Yeah, that's me.

01:08:36.540 --> 01:08:37.200
I should say that.

01:08:37.200 --> 01:08:38.280
Work on this project.

01:08:38.280 --> 01:08:43.800
So the Nash By Library is myself and former undergraduate.

01:08:43.800 --> 01:08:46.740
Actually, they went on to start their PhD at the School of Mathematics.

01:08:46.740 --> 01:08:48.040
We started this library.

01:08:48.040 --> 01:08:49.860
It's grown quite nicely now.

01:08:49.860 --> 01:08:54.020
To be honest, probably the part of the library I'm the most proud of is the documentation.

01:08:54.020 --> 01:08:59.860
There's arguably a game theory textbook in there if anyone's interested, as well as all the functionality for two-pack games.

01:08:59.860 --> 01:09:01.040
Yeah, fantastic.

01:09:01.040 --> 01:09:02.600
Yeah, it looks really great.

01:09:02.600 --> 01:09:03.960
I'm a big fan of game theory.

01:09:03.960 --> 01:09:05.280
I think it's very simple.

01:09:05.280 --> 01:09:08.840
And yet it reveals pretty amazing answers and behaviors.

01:09:09.480 --> 01:09:14.060
You know, as opposed to something like partial differential equation, which can also reveal amazing answers.

01:09:14.060 --> 01:09:18.500
But the journey to get through it is extremely long versus this.

01:09:18.500 --> 01:09:24.240
You could sit down in the afternoon and explain it to somebody, you know, like that prisoner's dilemma and so on.

01:09:24.240 --> 01:09:26.140
We could all kind of relate to a lot of what's happening there.

01:09:26.200 --> 01:09:27.900
You realize that you're aging.

01:09:27.900 --> 01:09:32.580
But I remember when I first started teaching game theory, everyone had seen the movie A Beautiful Mind.

01:09:32.580 --> 01:09:38.140
But if people listening and are slightly interested in game theory and haven't seen A Beautiful Mind, I'd definitely recommend it.

01:09:38.140 --> 01:09:42.740
It's a Hollywood movie, so have the correct level of expectations.

01:09:42.740 --> 01:09:44.540
It's a really nice movie.

01:09:44.700 --> 01:09:46.620
Russell Crowe plays John Knapp.

01:09:46.620 --> 01:09:51.220
And it's more about, not necessarily about the mathematics, but more about his life, which is incredibly interesting.

01:09:51.220 --> 01:09:59.100
And there's a couple of scenes in that movie that arguably, if you just spend a little bit of time talking about a couple of seats in that movie, you can explain most of the game theory.

01:09:59.100 --> 01:09:59.580
Absolutely.

01:09:59.580 --> 01:10:00.320
All right.

01:10:00.320 --> 01:10:03.100
Well, I get the sense we're a tad bit over time, which is fine.

01:10:03.100 --> 01:10:05.360
But maybe we should wrap it up here.

01:10:05.360 --> 01:10:10.700
There's a bunch of other areas that we haven't covered that are lots of fun that you go into.

01:10:10.700 --> 01:10:12.480
So, yeah, very, very neat.

01:10:12.940 --> 01:10:14.420
But let's kind of wrap it up.

01:10:14.420 --> 01:10:16.980
Maybe we'll ask you the final two questions.

01:10:16.980 --> 01:10:19.680
I want to thank you for having us.

01:10:19.680 --> 01:10:21.340
But I know that you got these two questions coming.

01:10:21.340 --> 01:10:22.580
So, like, oh, do I thank you now?

01:10:22.580 --> 01:10:23.200
Do I thank you later?

01:10:23.200 --> 01:10:25.560
But no, I just really do appreciate you having us on.

01:10:25.560 --> 01:10:27.060
I really do appreciate you as a guest.

01:10:27.060 --> 01:10:28.460
Yeah, you're very welcome.

01:10:28.460 --> 01:10:29.540
It's been great to talk about it.

01:10:29.540 --> 01:10:30.300
All right.

01:10:30.300 --> 01:10:32.300
Now, maybe a lightning round.

01:10:32.300 --> 01:10:35.580
Vince, if you're going to write some Python code, what editor are you using these days?

01:10:35.580 --> 01:10:36.180
I use them.

01:10:36.180 --> 01:10:36.760
I use them.

01:10:36.760 --> 01:10:37.440
Right on.

01:10:37.440 --> 01:10:37.920
Brent?

01:10:37.920 --> 01:10:38.980
I use Sublime.

01:10:38.980 --> 01:10:41.080
I really like having no features.

01:10:41.080 --> 01:10:42.240
I just like typing.

01:10:42.880 --> 01:10:43.700
I don't want features.

01:10:43.700 --> 01:10:44.520
Right on.

01:10:44.520 --> 01:10:47.080
Perfect.

01:10:47.080 --> 01:10:53.380
And then a notable PyPI package that you've come across that you're thinking is worth giving a shout out to?

01:10:53.540 --> 01:10:54.880
I was thinking about this before.

01:10:54.880 --> 01:10:58.600
And the one I'm going to suggest is one called Python Ternary.

01:10:58.600 --> 01:11:00.180
You've got it on the screen there.

01:11:00.180 --> 01:11:00.340
Yeah.

01:11:00.340 --> 01:11:04.980
Python Ternary is a library for plotting on simplexes.

01:11:04.980 --> 01:11:08.260
So for plotting on triangles, want a better word.

01:11:08.260 --> 01:11:12.140
It's the type of plots you draw a lot in evolutionary game theory, as well as other things.

01:11:12.140 --> 01:11:15.220
It's actually a collaborator on a product of mine that maintains this.

01:11:15.220 --> 01:11:18.680
And it's a very nice library for plotting different looking plots.

01:11:18.840 --> 01:11:25.640
I'm sure people think about, well, you could have these different plots on triangle surfaces or, you know, like how much are you at?

01:11:25.640 --> 01:11:28.540
How close are each three different states or something like that?

01:11:28.540 --> 01:11:28.780
Yeah.

01:11:28.780 --> 01:11:36.720
Some of these are really amazing, like this M Cherry one on there where it's got kind of crawling graphs through these triangle different states and so on.

01:11:36.760 --> 01:11:38.880
Yeah, I haven't seen anyone like that before.

01:11:38.880 --> 01:11:39.700
It's very cool.

01:11:39.700 --> 01:11:40.360
It's very cool.

01:11:40.360 --> 01:11:41.740
And it's built on top of Matplotlib.

01:11:41.740 --> 01:11:48.280
So it's essentially the layer to do all the correct scaling and things like that is there for you.

01:11:48.280 --> 01:11:50.440
So yeah, Python Ternary is really cool.

01:11:50.440 --> 01:11:50.680
Yeah.

01:11:50.680 --> 01:11:51.180
Fantastic.

01:11:51.180 --> 01:11:51.780
Grant?

01:11:51.780 --> 01:11:54.840
I think the library I would choose is, it's called Traces.

01:11:54.840 --> 01:11:58.220
It's a small library that, I don't know if you've heard of it before.

01:11:58.220 --> 01:11:59.540
I've got the link here.

01:11:59.540 --> 01:12:00.440
Oh, that one.

01:12:00.440 --> 01:12:00.760
Yeah.

01:12:00.760 --> 01:12:02.400
It does one thing and one thing good.

01:12:02.400 --> 01:12:06.400
It takes moving averages over irregular time intervals.

01:12:06.960 --> 01:12:10.080
And it was a problem which I thought I had until I found this.

01:12:10.080 --> 01:12:11.420
And then it just made life easier.

01:12:11.420 --> 01:12:12.040
I liked it.

01:12:12.040 --> 01:12:12.560
Yeah.

01:12:12.560 --> 01:12:13.120
Very cool.

01:12:13.120 --> 01:12:13.500
Okay.

01:12:13.500 --> 01:12:14.780
I think it's the next link.

01:12:14.780 --> 01:12:16.100
I think it's one just below that.

01:12:16.100 --> 01:12:17.380
This one right here?

01:12:17.380 --> 01:12:18.180
Not that one.

01:12:18.180 --> 01:12:19.000
This one?

01:12:19.000 --> 01:12:19.640
There it is.

01:12:19.640 --> 01:12:20.180
There it is.

01:12:20.180 --> 01:12:20.340
Yeah.

01:12:20.340 --> 01:12:20.680
Yes.

01:12:20.680 --> 01:12:22.640
The Uneven Time Series.

01:12:22.640 --> 01:12:23.000
Yeah.

01:12:23.000 --> 01:12:23.300
Perfect.

01:12:23.300 --> 01:12:23.620
Okay.

01:12:23.620 --> 01:12:23.860
Yeah.

01:12:23.860 --> 01:12:24.500
Oh, yeah.

01:12:24.500 --> 01:12:25.340
That looks great.

01:12:25.340 --> 01:12:26.720
It does one thing and one thing good.

01:12:26.720 --> 01:12:26.800
Fantastic.

01:12:26.800 --> 01:12:27.080
All right.

01:12:27.080 --> 01:12:28.020
Well, yeah.

01:12:28.020 --> 01:12:30.820
And yeah, that's often just what you need.

01:12:30.820 --> 01:12:33.120
Put a link to both of those in the show notes.

01:12:33.120 --> 01:12:34.100
Thank you so much.

01:12:34.140 --> 01:12:39.340
So people are interested in your book or maybe exploring some of these problems.

01:12:39.340 --> 01:12:40.520
What do you tell them?

01:12:40.520 --> 01:12:40.960
Where do they go?

01:12:40.960 --> 01:12:42.440
If you're interested in the book, that's great.

01:12:42.440 --> 01:12:46.900
I think I'd more kind of emphasize just mathematics is so incredibly powerful.

01:12:47.480 --> 01:12:49.380
And it really, really is.

01:12:49.380 --> 01:12:57.420
And it's kind of like I feel that code, open source code, Python, kind of an order of how important each other is.

01:12:57.420 --> 01:13:06.700
And so I think I'd encourage people to investigate those things and you can do amazing things with mathematics and a bit of code.

01:13:06.700 --> 01:13:07.700
That'd be mine.

01:13:07.700 --> 01:13:08.480
I don't know what you think.

01:13:08.480 --> 01:13:08.780
Absolutely.

01:13:08.780 --> 01:13:09.940
No, no.

01:13:09.940 --> 01:13:10.180
Yeah.

01:13:10.180 --> 01:13:11.160
I second that.

01:13:11.740 --> 01:13:21.240
I think my main message is the maths and the software are separate things and they complement each other really well, but they are separate things.

01:13:21.240 --> 01:13:22.460
They are separate things.

01:13:22.460 --> 01:13:22.720
Yeah.

01:13:22.720 --> 01:13:23.160
That's it.

01:13:23.160 --> 01:13:23.780
Fantastic.

01:13:23.780 --> 01:13:24.380
All right.

01:13:24.380 --> 01:13:26.940
And like I said, your book is on GitHub.

01:13:26.940 --> 01:13:32.380
So people can go poke around some of the examples and some of the notebooks and see what we're talking about.

01:13:32.380 --> 01:13:33.320
Make it a little more concrete.

01:13:33.320 --> 01:13:35.300
Make it a little more applied, maybe.

01:13:35.300 --> 01:13:35.660
Yes.

01:13:37.660 --> 01:13:38.640
All right, guys.

01:13:38.640 --> 01:13:39.680
Thanks for being here.

01:13:39.680 --> 01:13:41.000
Thanks for sharing your work.

01:13:41.000 --> 01:13:41.800
It's been a lot of fun.

01:13:41.800 --> 01:13:43.140
No, thank you so much, Michael.

01:13:43.140 --> 01:13:43.920
Thank you.

01:13:43.920 --> 01:13:48.080
This has been another episode of Talk Python to Me.

01:13:48.080 --> 01:13:49.880
Thank you to our sponsors.

01:13:49.880 --> 01:13:51.500
Be sure to check out what they're offering.

01:13:51.500 --> 01:13:52.920
It really helps support the show.

01:13:52.920 --> 01:13:57.620
Listen to an episode of Compiler, an original podcast from Red Hat.

01:13:57.620 --> 01:14:05.060
Compiler unravels industry topics, trends, and things you've always wanted to know about tech through interviews with the people who know it best.

01:14:05.580 --> 01:14:09.160
Subscribe today by following talkpython.fm/compiler.

01:14:09.160 --> 01:14:16.820
Sign up for the Python at Scale conference to connect with your data science colleagues and learn about trends in the Python big data ecosystem.

01:14:16.820 --> 01:14:22.240
Share stories about implementing solutions and find out about innovations in our space.

01:14:22.240 --> 01:14:26.860
Visit talkpython.fm/Python dash at dash scale.

01:14:26.860 --> 01:14:29.460
That's talkpython.fm/Python at scale.

01:14:29.460 --> 01:14:33.340
And use code Talk Python to get 15% off your ticket.

01:14:33.340 --> 01:14:35.420
Want to level up your Python?

01:14:35.420 --> 01:14:39.480
We have one of the largest catalogs of Python video courses over at Talk Python.

01:14:39.480 --> 01:14:44.560
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:14:44.560 --> 01:14:47.240
And best of all, there's not a subscription in sight.

01:14:47.240 --> 01:14:50.140
Check it out for yourself at training.talkpython.fm.

01:14:50.280 --> 01:14:52.040
Be sure to subscribe to the show.

01:14:52.040 --> 01:14:54.820
Open your favorite podcast app and search for Python.

01:14:54.820 --> 01:14:56.140
We should be right at the top.

01:14:56.140 --> 01:15:05.480
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

01:15:06.440 --> 01:15:08.920
We're live streaming most of our recordings these days.

01:15:08.920 --> 01:15:16.700
If you want to be part of the show and have your comments featured on the air, be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:15:16.700 --> 01:15:18.600
This is your host, Michael Kennedy.

01:15:18.600 --> 01:15:19.900
Thanks so much for listening.

01:15:19.900 --> 01:15:21.060
I really appreciate it.

01:15:21.320 --> 01:15:22.980
Now get out there and write some Python code.

01:15:22.980 --> 01:15:43.600
I'll see you next time.

