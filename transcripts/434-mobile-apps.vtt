WEBVTT

00:00:00.001 --> 00:00:03.580
Are you building a mobile app and wondering where Python fits in in the mix?

00:00:03.580 --> 00:00:08.060
Are you supporting others building these apps with back-end APIs written in Python?

00:00:08.060 --> 00:00:11.700
Can you write your entire app end-to-end in Python?

00:00:11.700 --> 00:00:15.980
Well, I have a great panel put together to discuss exactly this,

00:00:15.980 --> 00:00:18.820
and they all have a different and unique take on the options.

00:00:18.820 --> 00:00:24.780
Welcome to Lauren Augie, Harut Wojcijcijan, Andreas Kuhn, Jeffren, and Joshua.

00:00:25.120 --> 00:00:30.360
This is Talk Python to Me, episode 434, recorded September 9th, 2023.

00:00:30.360 --> 00:00:47.880
Welcome to Talk Python to Me, a weekly podcast on Python.

00:00:47.880 --> 00:00:49.620
This is your host, Michael Kennedy.

00:00:49.620 --> 00:00:52.280
Follow me on Mastodon, where I'm @mkennedy,

00:00:52.280 --> 00:00:54.720
and follow the podcast using @talkpython.

00:00:55.060 --> 00:00:57.120
Both on fosstodon.org.

00:00:57.120 --> 00:01:02.200
Keep up with the show and listen to over 7 years of past episodes at talkpython.fm.

00:01:02.200 --> 00:01:05.980
We've started streaming most of our episodes live on YouTube.

00:01:05.980 --> 00:01:09.720
Subscribe to our YouTube channel over at talkpython.fm/youtube

00:01:09.720 --> 00:01:13.520
to get notified about upcoming shows and be part of that episode.

00:01:13.520 --> 00:01:16.020
This episode is sponsored by Sentry.

00:01:16.020 --> 00:01:18.000
Don't let those errors go unnoticed.

00:01:18.000 --> 00:01:18.880
Use Sentry.

00:01:18.880 --> 00:01:21.960
Get started at talkpython.fm/sentry.

00:01:22.780 --> 00:01:26.560
And it's also brought to you by us over at Talk Python Training.

00:01:26.560 --> 00:01:31.180
Did you know that we have over 250 hours of Python courses?

00:01:31.180 --> 00:01:32.380
Yeah, that's right.

00:01:32.380 --> 00:01:34.960
Check them out at talkpython.fm/courses.

00:01:36.420 --> 00:01:37.160
Hey, everyone.

00:01:37.160 --> 00:01:40.300
Andreas, Harut, Lauren, Jeffren, and Joshua.

00:01:40.300 --> 00:01:41.980
All of you, welcome to the show.

00:01:41.980 --> 00:01:43.840
It's so exciting to have you here.

00:01:43.840 --> 00:01:44.580
Thank you so much.

00:01:44.580 --> 00:01:45.380
I'm really happy to be here.

00:01:45.380 --> 00:01:46.220
Yeah, great to be here.

00:01:46.220 --> 00:01:46.900
Same, yeah.

00:01:46.900 --> 00:01:47.520
It's great to be here.

00:01:47.620 --> 00:01:49.060
This is going to be a really fun topic.

00:01:49.060 --> 00:01:54.000
And I think it's one that puts Python into an interesting space.

00:01:54.000 --> 00:01:57.220
Python's really popular, as everyone listening knows.

00:01:57.220 --> 00:02:01.040
Its growth has been super, super high since 2012.

00:02:01.040 --> 00:02:05.560
And yet it really doesn't play a huge part in mobile apps.

00:02:05.560 --> 00:02:11.160
Although we do have some folks representing Kivi here via their app, which is pretty awesome.

00:02:11.160 --> 00:02:12.680
So I'm very excited about that.

00:02:12.680 --> 00:02:17.340
But it's not the first language you might pick for writing mobile apps.

00:02:17.340 --> 00:02:19.720
If you just say, all I care about is mobile apps.

00:02:19.720 --> 00:02:20.480
I just want to get started.

00:02:20.480 --> 00:02:24.940
But I think there's a lot of things that Python plays a part in, right?

00:02:24.940 --> 00:02:25.880
Back-end services.

00:02:25.880 --> 00:02:29.280
And I'm really excited to hear about the Kivi experience as well.

00:02:29.280 --> 00:02:34.880
So there's a ton of Python people out there who either are building or want to build some kind of mobile app.

00:02:34.880 --> 00:02:36.900
It's obviously one of the most important computing platforms.

00:02:36.900 --> 00:02:40.620
So I think everyone's going to learn from everyone's experience here.

00:02:40.960 --> 00:02:45.660
So I think let's just, I guess I'll go around by app.

00:02:45.660 --> 00:02:48.240
That's the best way I can kind of know to do this.

00:02:48.240 --> 00:02:50.160
And have you all introduce yourself.

00:02:50.160 --> 00:02:52.620
And then, actually, let's just have you introduce yourself.

00:02:52.620 --> 00:02:53.540
Then we'll talk about the app.

00:02:53.540 --> 00:02:58.540
So Andreas, we'll go around the Brady Bunch circle of pictures we got on the screen here.

00:02:58.540 --> 00:02:59.500
Andreas, go first.

00:02:59.500 --> 00:03:00.620
Yeah, my name is Andreas.

00:03:00.620 --> 00:03:03.080
I live and work in Stockholm, Sweden.

00:03:03.620 --> 00:03:07.380
And I've been working with Python for about 10 years now.

00:03:07.380 --> 00:03:16.080
And have been working with, I used to work for an online tailor-made suit company where we developed the platform ourselves.

00:03:16.080 --> 00:03:23.540
And now I'm working with a membership management company, which is a Django app that we are running in the background.

00:03:23.540 --> 00:03:24.040
Nice.

00:03:24.040 --> 00:03:24.900
Very exciting.

00:03:25.040 --> 00:03:26.240
Looking forward to hearing about it.

00:03:26.240 --> 00:03:26.700
Harut.

00:03:26.700 --> 00:03:27.220
Hey, guys.

00:03:27.220 --> 00:03:27.920
My name is Harut.

00:03:27.920 --> 00:03:32.680
I have been working in Python for, like, I'd say a decade on and off.

00:03:32.680 --> 00:03:35.820
My background is in applied and computational math.

00:03:36.260 --> 00:03:41.400
So I did a lot of MATLAB in college and then found my way kind of over into Python.

00:03:41.400 --> 00:03:44.140
Did some data analytics, some data science.

00:03:44.140 --> 00:03:47.860
And then for the past few years, found that building tools for people is actually what I really enjoy.

00:03:47.860 --> 00:03:51.600
So I do a lot of work with data visualization, a lot of JavaScript.

00:03:51.600 --> 00:03:56.260
But if there's one thing that's been consistent in the past 10 years, it's been my Python usage overall.

00:03:56.260 --> 00:03:56.620
Awesome.

00:03:56.620 --> 00:03:59.680
That's kind of how I started as well, building scientific tools and stuff.

00:03:59.680 --> 00:04:00.100
Lauren.

00:04:00.100 --> 00:04:00.520
Hi, everyone.

00:04:00.520 --> 00:04:01.360
Yeah, my name is Lauren.

00:04:01.360 --> 00:04:03.220
I've been programming since 2020.

00:04:03.220 --> 00:04:05.960
Prior to that, it was basically a direct result of COVID.

00:04:06.300 --> 00:04:07.600
Prior to that, I was a live sound engineer.

00:04:07.600 --> 00:04:09.560
So setting up for concerts and corporate events, all that.

00:04:09.560 --> 00:04:11.840
All that went away pretty much overnight in March 2020.

00:04:11.840 --> 00:04:15.200
So, yeah, I started learning programming, landed on Flutter.

00:04:15.200 --> 00:04:16.500
That's my main thing.

00:04:16.500 --> 00:04:20.120
Fast forward a couple of years, I had to finish up a contract with a company called T-Vision Insights.

00:04:20.120 --> 00:04:22.880
Likely for me, most of their services are written in Python.

00:04:22.880 --> 00:04:30.140
One of the lead engineers there is a fan of both your podcasts, Michael, and gave me a tip that you're looking for a Flutter developer, which brings me here.

00:04:30.140 --> 00:04:32.580
So I was involved in building the Python mobile app.

00:04:32.580 --> 00:04:35.120
Yeah, now I'm on the Flutter team for an insurance company.

00:04:35.540 --> 00:04:38.980
I did not write any Python until I had finished the mobile app.

00:04:38.980 --> 00:04:41.740
But I had sat through a lot of those courses throughout the development process.

00:04:41.740 --> 00:04:44.620
Kind of landed on FastAPI for my backend services.

00:04:44.620 --> 00:04:45.300
Really like it.

00:04:45.300 --> 00:04:47.760
Was really impressed with how easy it was to get started and all that.

00:04:47.760 --> 00:04:48.720
So, yeah, that's where I'm at.

00:04:48.820 --> 00:04:49.320
Yeah, awesome.

00:04:49.320 --> 00:04:51.020
I'm really looking forward to talking to you.

00:04:51.020 --> 00:04:54.520
Sort of the interplay of how we work together to build that mobile app.

00:04:54.520 --> 00:04:55.720
And it's just so well received.

00:04:55.720 --> 00:04:56.740
It's such a solid app.

00:04:56.740 --> 00:04:59.200
The only people who don't seem to receive it well is the App Store people.

00:04:59.200 --> 00:05:00.100
We'll save that for later.

00:05:02.260 --> 00:05:08.040
If anyone wants to see me cry, there's a good chance at the end of this episode, I will just be in tears.

00:05:08.040 --> 00:05:09.440
But we'll save that for later.

00:05:09.440 --> 00:05:10.680
But I do want to ask.

00:05:10.680 --> 00:05:12.380
I mean, I think that's a really interesting background.

00:05:12.380 --> 00:05:19.260
And people, a lot of people listen to this show and they feel like they hear from guests who are like, yeah, I got my computer science degree.

00:05:19.600 --> 00:05:22.880
I was like an accelerated student, so I got it when I was 16.

00:05:22.880 --> 00:05:26.940
And then, you know, like they're like, well, I admire this person and they're doing awesome stuff.

00:05:26.940 --> 00:05:29.300
But I didn't get my computer science degree at 16.

00:05:29.300 --> 00:05:33.380
Like I was still in high school and I didn't start programming until I was 30 or, you know.

00:05:33.380 --> 00:05:35.860
And is there still a place for me?

00:05:35.860 --> 00:05:38.180
And I think you've super excelled at that.

00:05:38.180 --> 00:05:43.860
And honestly, with Flutter and Dart, which is not one of the simpler, beginner, more beginner friendly language.

00:05:43.860 --> 00:05:47.540
Like it's a pretty seriously structured language.

00:05:47.820 --> 00:05:52.300
So maybe just, you know, give people your thoughts of your three-year journey, I guess, at this point.

00:05:52.300 --> 00:05:53.520
First of all, thank you for saying that.

00:05:53.520 --> 00:05:54.580
And yeah, I listened to your podcast.

00:05:54.580 --> 00:05:56.520
You have some very impressive people on your show.

00:05:56.520 --> 00:05:59.040
My first line of code till 36, right?

00:05:59.040 --> 00:05:59.280
Yeah.

00:05:59.280 --> 00:06:02.100
It was weird, a weird time, 2020, obviously.

00:06:02.100 --> 00:06:06.600
But to be fair, I did have a lot of time on my hands, like many of us did, you know, very abruptly.

00:06:06.600 --> 00:06:13.020
So I kind of went all in, you know, that's just, I got hooked fast and I had a lot of fun.

00:06:13.020 --> 00:06:14.140
You know, it's kind of thing.

00:06:14.140 --> 00:06:15.740
Not everybody gravitates towards programming.

00:06:15.740 --> 00:06:16.260
They try it.

00:06:16.260 --> 00:06:16.860
They don't like it.

00:06:16.860 --> 00:06:18.080
It's not for everybody, to be fair.

00:06:18.080 --> 00:06:20.700
But all it is, is consistency and putting in the time.

00:06:20.700 --> 00:06:22.160
If you don't have a degree, it's fine.

00:06:22.160 --> 00:06:26.580
I even chose, Flutter is not like, if you're looking for a job, there are better technologies

00:06:26.580 --> 00:06:30.160
to choose if you're just trying to, you know, land a job, right?

00:06:30.160 --> 00:06:33.480
Python, obviously way more ubiquitous in terms of finding a job.

00:06:33.480 --> 00:06:36.680
Even on the front end, learning something like React, way more jobs.

00:06:36.900 --> 00:06:38.720
But all that to say, it's still possible.

00:06:38.720 --> 00:06:41.260
I didn't go to college for audio or programming.

00:06:41.260 --> 00:06:46.060
But again, putting the time, consistency, the job hunting process was not particularly fun.

00:06:46.060 --> 00:06:46.920
It was pretty grueling.

00:06:46.920 --> 00:06:49.500
But sooner or later, you just keep at it and you can get there.

00:06:49.500 --> 00:06:51.460
So it's never too late to get started.

00:06:51.460 --> 00:06:51.720
Yeah.

00:06:51.720 --> 00:06:52.060
Awesome.

00:06:52.060 --> 00:06:52.520
Yeah.

00:06:52.800 --> 00:06:54.080
I know you're doing good stuff these days.

00:06:54.080 --> 00:06:54.500
That's great.

00:06:54.500 --> 00:06:54.800
Thanks.

00:06:54.800 --> 00:06:55.600
Jeffrey and Joshua.

00:06:55.600 --> 00:06:57.740
Oh, first of all, my name is Joshua.

00:06:57.740 --> 00:06:58.780
His name is Jeffrey.

00:06:58.780 --> 00:07:00.380
And Jeffrey Julian.

00:07:00.380 --> 00:07:04.380
He is not, we are from Colombia and he is an Spanish speaker.

00:07:04.820 --> 00:07:07.600
So he doesn't know to speak English.

00:07:07.600 --> 00:07:08.740
So I'm here to help.

00:07:08.740 --> 00:07:09.300
Sure, sure.

00:07:09.300 --> 00:07:09.720
Yes.

00:07:09.720 --> 00:07:10.260
Oh, wonderful.

00:07:10.260 --> 00:07:11.620
Well, welcome to both of you.

00:07:11.620 --> 00:07:12.000
Okay.

00:07:12.000 --> 00:07:12.440
Thank you.

00:07:12.440 --> 00:07:13.720
Tell us a bit about yourselves.

00:07:13.720 --> 00:07:14.220
Okay.

00:07:14.220 --> 00:07:19.340
Julián, who is the main programmer or designer of his hub.

00:07:19.340 --> 00:07:28.120
And started like 15 years ago when he was playing some video games and he wanted to know how did they work.

00:07:28.120 --> 00:07:32.680
So he started to look for it and started programming.

00:07:33.120 --> 00:07:35.040
You know, like and so stalked people.

00:07:35.040 --> 00:07:36.520
And that's it.

00:07:36.520 --> 00:07:39.560
He started a career, a university career.

00:07:39.560 --> 00:07:42.800
And he's a very talented designer.

00:07:42.800 --> 00:07:44.320
And as I know, as a friend.

00:07:44.320 --> 00:07:47.920
So he is very close friend of mine.

00:07:47.920 --> 00:07:50.980
And I can say you, I can say, I can tell you that.

00:07:50.980 --> 00:07:58.360
I think maybe the right place to start our conversation now everybody knows all of you is just a quick introduction to your apps.

00:07:58.360 --> 00:08:04.580
And then we'll dive into maybe the first thing is everyone here has chosen a different framework, a different language.

00:08:05.020 --> 00:08:12.980
I think that is in and of itself is pretty interesting that we're all here as fans of Python or some kind of Python roots or interest.

00:08:12.980 --> 00:08:18.420
And yet that is not, you know, it's not necessarily what we chose to write the apps in.

00:08:18.420 --> 00:08:20.840
So I think that's going to be a real interesting conversation.

00:08:20.840 --> 00:08:24.340
But let's jump over and maybe start with this one.

00:08:24.340 --> 00:08:28.440
So PinPlanet, I forgot which app goes with which person or group.

00:08:28.440 --> 00:08:30.160
So we'll have to just jump in.

00:08:30.160 --> 00:08:31.360
Who's PinPlanet?

00:08:31.360 --> 00:08:32.580
I'm the creator of PinPlanet.

00:08:32.580 --> 00:08:38.940
The idea started from, actually started from my girlfriend in December 2020 or October 2021.

00:08:39.240 --> 00:08:39.620
I'm sorry.

00:08:39.620 --> 00:08:40.820
She's a big traveler.

00:08:40.820 --> 00:08:44.560
She's always wanted a way to kind of curate all of her travels, kind of keep them in one place.

00:08:44.560 --> 00:08:59.400
And the thing that she told me at the time that really sold me was, I want to be able to show all my friends, like my place I've traveled to with pins on a 3D globe that spins, which is actually the second screenshot on the screen for, I guess, for people who are watching the live stream.

00:08:59.740 --> 00:09:01.600
And then from there, I was sold.

00:09:01.600 --> 00:09:03.600
So I started building this.

00:09:03.600 --> 00:09:07.660
I will say that the original version of this was actually a web app, a progressive web app.

00:09:07.660 --> 00:09:10.200
And I was a huge proponent of it at the time.

00:09:10.200 --> 00:09:14.540
But for anybody who's used PWAs, they know the experience on both Apple and Google.

00:09:14.540 --> 00:09:17.540
Somehow, both of them are just not that great.

00:09:17.540 --> 00:09:19.540
It just cannot seem to win.

00:09:19.540 --> 00:09:24.640
And we've trained users for, what, like a decade to look for apps in the app store.

00:09:24.640 --> 00:09:26.060
So that's also kind of a pain.

00:09:26.060 --> 00:09:29.020
Yeah, and you can't really list your progressive web app in the app store, right?

00:09:29.060 --> 00:09:34.760
I think actually progressive web apps might be passable because there's a lot of bad frameworks out there that they would compete with.

00:09:34.760 --> 00:09:37.800
But the discoverability is the killer, right?

00:09:37.800 --> 00:09:38.680
It's quite tough.

00:09:38.680 --> 00:09:42.540
So I ended up building this app about three or four months into it.

00:09:42.540 --> 00:09:44.460
I brought my friend Andrew as well.

00:09:44.460 --> 00:09:45.940
I'm actually sitting in his office right now.

00:09:45.940 --> 00:09:47.740
He does quite a lot of Python as well.

00:09:47.740 --> 00:09:48.720
More Python than I do.

00:09:48.720 --> 00:09:51.820
He's the person that I kind of look up to when it comes to writing.

00:09:51.820 --> 00:09:53.100
I can't forget.

00:09:53.100 --> 00:09:54.340
I forgot the word for it now.

00:09:54.340 --> 00:09:57.200
Not Pythonista, but it'll come to me.

00:09:57.200 --> 00:09:58.880
Oh, writing more Pythonic.

00:09:58.880 --> 00:09:59.620
Yes.

00:10:00.360 --> 00:10:04.800
And then from there, I think somewhere around the summer, I decided, okay, you know what?

00:10:04.800 --> 00:10:08.520
The app is gaining a lot of traction, but people want a native experience.

00:10:08.520 --> 00:10:14.220
So I kind of took the plunge, learned Swift and Swift UI, which is a really awesome framework released by Apple.

00:10:14.320 --> 00:10:18.760
And then we released the native version, which focuses on like, you can pin all your places.

00:10:18.760 --> 00:10:21.480
You can add your spots, your reviews, your photos.

00:10:21.480 --> 00:10:22.480
You can add travel buddies.

00:10:22.480 --> 00:10:24.140
You guys can collaborate on trips together.

00:10:24.580 --> 00:10:29.060
There's a really cool explore page where you can see kind of the best pins that other people have put up.

00:10:29.500 --> 00:10:31.880
And we're just, you know, adding more features over time.

00:10:31.880 --> 00:10:32.980
It's getting traction.

00:10:32.980 --> 00:10:33.740
It's a lot of fun.

00:10:33.740 --> 00:10:34.460
It's really exciting.

00:10:34.460 --> 00:10:34.800
Awesome.

00:10:34.800 --> 00:10:35.660
Congratulations.

00:10:35.660 --> 00:10:36.240
Thank you.

00:10:36.240 --> 00:10:42.600
I see that it's, well, first of all, it has five star review out of a bunch of ratings, which is pretty ridiculous.

00:10:42.600 --> 00:10:43.160
That's awesome.

00:10:43.460 --> 00:10:44.360
Also that it's free though.

00:10:44.360 --> 00:10:45.500
Is it just free, free?

00:10:45.500 --> 00:10:48.380
Is there in-app purchases or what's the story?

00:10:48.380 --> 00:10:49.400
It's completely free.

00:10:49.400 --> 00:10:51.540
Just looking for growth and traction and you'll figure it out.

00:10:51.540 --> 00:10:51.880
Yeah.

00:10:51.880 --> 00:10:58.300
Oh, actually, since you're on the screenshots, Michael, I do want to say thank you for the tip, the screenshots pro website or web app.

00:10:58.300 --> 00:10:58.680
Oh yeah.

00:10:58.680 --> 00:10:59.580
That helped out quite a bit.

00:10:59.580 --> 00:10:59.820
Yeah.

00:10:59.820 --> 00:11:00.300
Yeah.

00:11:00.300 --> 00:11:01.100
Really appreciate it.

00:11:01.100 --> 00:11:06.600
Well, it's a pay it forward because Lauren suggested that to me from his app.

00:11:06.600 --> 00:11:08.180
So it goes.

00:11:08.180 --> 00:11:09.540
And on, on it goes.

00:11:09.540 --> 00:11:09.740
Yeah.

00:11:09.840 --> 00:11:14.280
It says we use screenshot, I believe it was screenshots pro.

00:11:14.280 --> 00:11:17.920
Let me, screenshots.pro is the app that I use.

00:11:17.920 --> 00:11:18.120
Yeah.

00:11:18.120 --> 00:11:20.560
And you can come up with really fantastic looking screenshots.

00:11:20.560 --> 00:11:22.340
I'm super happy with how that came out.

00:11:22.340 --> 00:11:22.760
All right.

00:11:22.760 --> 00:11:23.220
My club.

00:11:23.220 --> 00:11:23.820
That's mine.

00:11:23.820 --> 00:11:24.100
Yeah.

00:11:24.100 --> 00:11:29.380
And my club is, like I said previously, is a membership management program.

00:11:29.380 --> 00:11:35.940
We've previously been working with progressive web apps as well, but we had a Ruby on Rails developer who did those.

00:11:36.120 --> 00:11:40.560
And we are a Django backend in where most of the information was.

00:11:40.560 --> 00:11:48.060
So we had a lot of different servers connecting to our backend and doing all of these strange things instead of just having one.

00:11:48.400 --> 00:11:58.920
And exactly like Karut talked about, you need to have your app on the app store because there's a lot of people asking where is your app, even though we did have like progressive web apps and you were able to see everything.

00:11:58.920 --> 00:12:19.480
But what we have now is we've developed so that all of our users can handle the members with their invoices, their memberships in various groups and so on to handle if they're going to certain trainings or going to certain meetups and just answer to that in the app.

00:12:19.740 --> 00:12:23.180
And we also have like push notifications and all of that as well.

00:12:23.180 --> 00:12:23.380
Yeah.

00:12:23.380 --> 00:12:31.580
I think one of the main reasons people might want to create an app as a business is for the notifications because that's an interesting way to reach out for sure.

00:12:31.580 --> 00:12:33.300
It really has helped a lot as well.

00:12:33.300 --> 00:12:43.940
I mean, just being on the app store, regardless if you're on Android or on iOS, just being there actually means that things start to happen with the usage and so on.

00:12:44.020 --> 00:12:54.780
We have about, I think in total about 8,000 installs on these apps, which from going from nothing about half a year ago is rather good for us.

00:12:54.780 --> 00:12:56.360
We're a rather small company.

00:12:56.360 --> 00:12:57.080
So it's.

00:12:57.080 --> 00:12:57.740
Yeah, that's really good.

00:12:57.740 --> 00:12:58.180
I'm sorry.

00:12:58.180 --> 00:12:59.100
Everything's in Swedish.

00:12:59.100 --> 00:13:04.220
We are a Swedish company and we don't have anything translated into English yet.

00:13:04.220 --> 00:13:05.580
The screenshots are awesome.

00:13:05.580 --> 00:13:08.200
And I think it's, it makes perfect sense, right?

00:13:08.200 --> 00:13:13.820
Like not everything needs to be in English, even though it does seem like it some of the times, I suppose.

00:13:13.820 --> 00:13:14.560
All right.

00:13:14.560 --> 00:13:15.480
V3D.

00:13:15.480 --> 00:13:17.300
Let's talk about that, guys.

00:13:17.300 --> 00:13:20.940
Jeffrey is going to talk in Spanish and I'm going to translate.

00:13:20.940 --> 00:13:21.500
Yeah.

00:13:21.500 --> 00:13:22.140
Thanks.

00:13:22.140 --> 00:13:27.960
V3D es una aplicación que inició el desarrollo en el año 2020.

00:13:27.960 --> 00:13:36.100
V3D es an app that he started designing in the pandemic in 2020.

00:13:36.100 --> 00:13:45.560
Inicialmente era para mostrar gráficos 3D, ya que como hobby soy modelador 3D en el software de Blender.

00:13:45.560 --> 00:13:53.220
It was initially just to show graphics on 3D because he is a developer for this.

00:13:53.220 --> 00:14:07.220
Poco a poco vinieron más ideas y quise seguir la programación llevándolas al punto en el que está hoy, donde soporta texturizado, creación de materiales.

00:14:07.220 --> 00:14:12.380
También soporta mando de control Xbox y tiene un módulo de realidad virtual.

00:14:12.380 --> 00:14:21.160
Step by step, I came up with some ideas to implement to the app, like featuring and modeling.

00:14:21.740 --> 00:14:24.500
We can use an Xbox controller.

00:14:24.500 --> 00:14:27.240
Yes, it has a lot of featureings.

00:14:27.240 --> 00:14:30.500
That's pretty cool to use the Xbox controller with the mobile devices.

00:14:30.500 --> 00:14:30.760
Yeah.

00:14:30.760 --> 00:14:37.560
Actualmente estoy trabajando en una actualización que involucra texturizado con imágenes de movimiento.

00:14:37.560 --> 00:14:41.540
Sigo trabajando en ella y próximamente será lanzada.

00:14:41.540 --> 00:14:46.420
Hey, I'm currently working on animated textures, features.

00:14:46.420 --> 00:14:50.480
Yes, and I'm working on it and very soon it's going to be ready.

00:14:50.620 --> 00:14:51.940
Yeah, this looks like an amazing app.

00:14:51.940 --> 00:14:53.480
And this is built in Kivi, yeah?

00:14:53.480 --> 00:14:53.960
I see.

00:14:53.960 --> 00:14:54.660
Awesome.

00:14:54.660 --> 00:14:59.740
This portion of Talk Python to Me is brought to you by Sentry.

00:14:59.740 --> 00:15:02.440
Is your Python application fast?

00:15:02.440 --> 00:15:06.440
Or does it sometimes suffer from slowdowns and unexpected latency?

00:15:06.440 --> 00:15:09.040
Does this usually only happen in production?

00:15:09.040 --> 00:15:12.220
It's really tough to track down the problems at that point, isn't it?

00:15:12.220 --> 00:15:16.760
If you've looked at APM, Application Performance Monitoring products before,

00:15:16.760 --> 00:15:19.100
they may have felt out of place for software teams.

00:15:19.400 --> 00:15:27.000
Many of them are more focused on legacy problems made for ops and infrastructure teams to keep their infrastructure and services up and running.

00:15:27.000 --> 00:15:31.160
Sentry has just launched their new APM service.

00:15:31.160 --> 00:15:38.180
And Sentry's approach to application monitoring is focused on being actionable, affordable, and actually built for developers.

00:15:38.440 --> 00:15:44.040
Whether it's a slow-running query or latent payment endpoint that's at risk of timing out and causing sales to tank,

00:15:44.040 --> 00:15:47.980
Sentry removes the complexity and does the analysis for you,

00:15:47.980 --> 00:15:51.920
surfacing the most critical performance issues so you can address them immediately.

00:15:52.400 --> 00:15:55.000
Sentry has just been a little bit of a slowdown.

00:15:55.000 --> 00:15:56.000
Sentry has just been a slowdown.

00:15:56.000 --> 00:15:57.000
Sentry has just been a slowdown.

00:15:57.000 --> 00:15:58.000
Sentry has just been a slowdown.

00:15:58.000 --> 00:15:59.000
Sentry has just been a slowdown.

00:15:59.000 --> 00:16:00.000
Sentry has just been a slowdown.

00:16:00.000 --> 00:16:01.000
Sentry has just been a slowdown.

00:16:01.000 --> 00:16:02.000
Sentry has just been a slowdown.

00:16:02.000 --> 00:16:03.000
Sentry has just been a slowdown.

00:16:03.000 --> 00:16:04.000
Sentry has just been a slowdown.

00:16:04.000 --> 00:16:05.000
Sentry has just been a slowdown.

00:16:05.000 --> 00:16:05.000
Sentry has just been a slowdown.

00:16:05.000 --> 00:16:06.000
Sentry has just been a slowdown.

00:16:06.000 --> 00:16:07.000
Sentry has just been a slowdown.

00:16:07.000 --> 00:16:07.000
Sentry has just been a slowdown.

00:16:07.000 --> 00:16:08.000
Sentry has just been a slowdown.

00:16:08.000 --> 00:16:09.000
Sentry has just been a slowdown.

00:16:09.000 --> 00:16:10.000
Sentry has just been a slowdown.

00:16:10.000 --> 00:16:11.000
Sentry has just been a slowdown.

00:16:11.000 --> 00:16:13.600
Sentry has just been a slowdown.

00:16:13.600 --> 00:16:14.600
Sentry has just been a slowdown.

00:16:14.600 --> 00:16:16.600
Sentry has just been a slowdown.

00:16:16.600 --> 00:16:17.600
Sentry has just been a slowdown.

00:16:17.600 --> 00:16:19.600
Sentry has just been a slowdown.

00:16:19.600 --> 00:16:20.600
Sentry has just been a slowdown.

00:16:20.600 --> 00:16:21.600
Sentry has just been a slowdown.

00:16:21.600 --> 00:16:22.600
Sentry has just been a slowdown.

00:16:22.600 --> 00:16:23.600
Sentry has just been a slowdown.

00:16:23.600 --> 00:16:24.600
Sentry has just been a slowdown.

00:16:24.600 --> 00:16:25.600
Sentry has just been a slowdown.

00:16:25.600 --> 00:16:26.600
Sentry has just been a slowdown.

00:16:26.600 --> 00:16:27.600
Sentry has just been a slowdown.

00:16:27.600 --> 00:16:28.600
Sentry has just been a slowdown.

00:16:28.600 --> 00:16:29.600
Sentry has just been a slowdown.

00:16:29.600 --> 00:16:30.600
Sentry has just been a slowdown.

00:16:30.600 --> 00:16:31.600
Sentry has just been a slowdown.

00:16:31.600 --> 00:16:32.600
Sentry has just been a slowdown.

00:16:32.600 --> 00:16:33.600
Sentry has just been a slowdown.

00:16:33.600 --> 00:16:34.600
Sentry has just been a slowdown.

00:16:34.600 --> 00:16:36.800
Sentry has just been a slowdown.

00:16:36.800 --> 00:16:38.500
Now, Lauren, I was going to pull up--

00:16:38.500 --> 00:16:40.300
I know we'll pull up the Talk Python app

00:16:40.300 --> 00:16:42.400
that we built together, the mobile app that you built

00:16:42.400 --> 00:16:44.000
and the backend stuff that I built.

00:16:44.000 --> 00:16:46.300
You also have an app that you recently built

00:16:46.300 --> 00:16:47.600
just straight in Flutter.

00:16:47.600 --> 00:16:49.800
Let's maybe just pull that up real quick as well.

00:16:49.800 --> 00:16:51.300
I have it installed and I like it,

00:16:51.300 --> 00:16:53.600
but I don't remember exactly what to search for.

00:16:53.600 --> 00:16:54.100
LAURENCE MORONEY: Oh, thanks.

00:16:54.100 --> 00:16:55.300
Yeah, it's called Epic Skies.

00:16:55.300 --> 00:16:55.900
It's just a weather app.

00:16:55.900 --> 00:16:56.440
LAURENCE MORONEY: Epic Skies.

00:16:56.440 --> 00:16:56.900
That's right.

00:16:56.900 --> 00:16:57.200
LAURENCE MORONEY: Yeah.

00:16:57.200 --> 00:16:58.400
LAURENCE MORONEY: That's a beautiful app as well.

00:16:58.400 --> 00:17:01.100
So you've got a couple apps out in the App Store now, right?

00:17:01.100 --> 00:17:03.600
LAURENCE MORONEY: Well, yeah, this and as far as apps that I built myself,

00:17:03.600 --> 00:17:05.900
yeah, this one, which was released maybe a month ago,

00:17:05.900 --> 00:17:07.900
and your app, Talk Python app.

00:17:07.900 --> 00:17:09.800
LAURENCE MORONEY: So this one is straight Flutter,

00:17:09.800 --> 00:17:11.400
not too many backends, right?

00:17:11.400 --> 00:17:15.100
Probably consumes some public weather API data somewhere.

00:17:15.100 --> 00:17:16.800
LAURENCE MORONEY: Yeah, but that being said,

00:17:16.800 --> 00:17:20.200
having taken your async Mongo Python course, FastAPI,

00:17:20.200 --> 00:17:22.400
as I go to implement push notifications,

00:17:22.400 --> 00:17:24.600
the backend logic will be in Python

00:17:24.600 --> 00:17:27.800
and determining who gets what local weather alerts.

00:17:27.800 --> 00:17:29.700
All that will be-- the app is already deployed.

00:17:29.700 --> 00:17:31.200
I just don't have the features.

00:17:31.200 --> 00:17:32.700
I don't have all that functionality built yet.

00:17:32.700 --> 00:17:34.200
But yeah, backend for this,

00:17:34.200 --> 00:17:35.700
handling the notifications will be Python.

00:17:35.700 --> 00:17:36.500
LAURENCE MORONEY: That's really cool.

00:17:36.500 --> 00:17:37.000
LAURENCE MORONEY: Yeah.

00:17:37.000 --> 00:17:37.500
LAURENCE MORONEY: Yeah.

00:17:37.500 --> 00:17:40.000
LAURENCE MORONEY: You had a couple of releases this year so far.

00:17:40.000 --> 00:17:42.400
And so then also, I'll let you talk about it,

00:17:42.400 --> 00:17:44.700
since you built most of the front end stuff,

00:17:44.700 --> 00:17:45.700
the Talk Python app.

00:17:45.700 --> 00:17:46.400
LAURENCE MORONEY: Sure, yeah.

00:17:46.400 --> 00:17:48.200
I imagine most of the listeners are also students.

00:17:48.200 --> 00:17:50.700
So maybe a lot of people listening have used it.

00:17:50.700 --> 00:17:53.900
But basically, it's a mobile app that allows students

00:17:53.900 --> 00:17:56.500
of Talk Python training to consume their video courses,

00:17:56.500 --> 00:17:56.800
right?

00:17:56.800 --> 00:17:58.300
And similar to Udemy, something like that.

00:17:58.300 --> 00:17:59.800
LAURENCE MORONEY: Yeah.

00:17:59.800 --> 00:18:01.300
LAURENCE MORONEY: It talks to your very fast backend written

00:18:01.300 --> 00:18:05.300
in Python, pulls in the user info, what courses they have access to.

00:18:05.300 --> 00:18:09.800
We track what lectures the users have watched,

00:18:09.800 --> 00:18:10.800
so that it's in sync.

00:18:10.800 --> 00:18:14.300
If they go to the web app, all that stays nicely in sync.

00:18:14.300 --> 00:18:15.800
Yeah, written completely in Flutter.

00:18:15.800 --> 00:18:17.300
There were no--

00:18:17.300 --> 00:18:20.300
it relies very heavily on video player, obviously.

00:18:20.300 --> 00:18:24.800
But all these libraries that we rely very heavily on are just

00:18:24.800 --> 00:18:26.300
as Dart libraries.

00:18:26.300 --> 00:18:28.300
So I didn't have to write not a single line of native code

00:18:28.300 --> 00:18:29.300
as far as that goes.

00:18:29.300 --> 00:18:33.300
Even when Apple made us do in-app purchases or, for example,

00:18:33.300 --> 00:18:35.800
showing the progress in the notification bar,

00:18:35.800 --> 00:18:37.300
there's libraries for all of that.

00:18:37.300 --> 00:18:39.300
I'm grateful you chose Flutter as this,

00:18:39.300 --> 00:18:40.800
because I got to be involved.

00:18:40.800 --> 00:18:43.300
But I also think it was an excellent choice that you could have made.

00:18:43.300 --> 00:18:45.300
LAURENCE MORONEY: I think it was an excellent choice as well.

00:18:45.300 --> 00:18:48.300
And let's go and talk about that, because I can see some good questions

00:18:48.300 --> 00:18:49.800
out in the audience.

00:18:49.800 --> 00:18:52.800
And I know this-- and I also open the show like this, right?

00:18:52.800 --> 00:18:56.300
Like, there are many ways in which you can build these apps.

00:18:56.300 --> 00:18:58.800
And Lauren was just touching on it.

00:18:58.800 --> 00:19:02.800
How close do you need to be to native and use the exact API

00:19:02.800 --> 00:19:05.800
delivered by Apple or Google?

00:19:05.800 --> 00:19:07.800
Or how much do you care about cross-platform?

00:19:07.800 --> 00:19:10.800
Because on this one, for example, you can get it on Google Play,

00:19:10.800 --> 00:19:12.300
you can get it on the App Store.

00:19:12.300 --> 00:19:14.800
The only real change is there's different rules.

00:19:14.800 --> 00:19:17.300
So for example, you can't talk about prices,

00:19:17.300 --> 00:19:20.300
or you've got to do in-app purchases on Apple.

00:19:20.300 --> 00:19:24.300
Or there's little variations that they force from their policies onto you.

00:19:24.300 --> 00:19:26.300
But otherwise, it's just the same code.

00:19:26.300 --> 00:19:29.800
Same code for iPad and tablet as it is for mobile.

00:19:29.800 --> 00:19:32.300
As opposed to Haru, who has the Swift project,

00:19:32.300 --> 00:19:34.800
which is awesome, but you're really tied to Apple.

00:19:34.800 --> 00:19:39.300
But you also get to take advantage of the closest changes.

00:19:39.300 --> 00:19:42.800
The build-publish stuff doesn't keep running into weird issues

00:19:42.800 --> 00:19:44.300
when there's some mismatch.

00:19:44.300 --> 00:19:46.800
I mean, you want to strike beer into your heart.

00:19:46.800 --> 00:19:48.800
Just mention new release of Xcode and then...

00:19:48.800 --> 00:19:51.800
That literally just happened this week.

00:19:51.800 --> 00:19:54.800
I was building something on Xcode 15 Beta 8

00:19:54.800 --> 00:19:57.800
and it was a huge pain to install.

00:19:57.800 --> 00:19:59.300
Didn't build for no reason.

00:19:59.300 --> 00:20:00.300
It's completely unclear.

00:20:00.300 --> 00:20:01.800
No documentation whatsoever.

00:20:01.800 --> 00:20:02.800
It's not great.

00:20:02.800 --> 00:20:05.300
So let's talk about choosing the framework.

00:20:05.300 --> 00:20:06.300
And I'll just go through the...

00:20:06.300 --> 00:20:08.800
I got a bunch of tabs pulled up so we can talk about them.

00:20:08.800 --> 00:20:11.300
Andreas, you chose Ionic.

00:20:11.300 --> 00:20:13.800
Tell people what Ionic is and then why you chose it.

00:20:13.800 --> 00:20:18.800
Ionic is a way to create applications that can be delivered both to you,

00:20:18.800 --> 00:20:23.800
to like normal website, to Android and to iOS.

00:20:23.800 --> 00:20:28.300
So we get all of the functionality and only need to write the code once.

00:20:28.300 --> 00:20:31.300
What it really is, in our case, we chose to write everything in Angular.

00:20:31.300 --> 00:20:31.800
Angular.

00:20:31.800 --> 00:20:35.800
It's a web view running on the mobile phones.

00:20:35.800 --> 00:20:42.800
So you actually get just a simple server running on the mobile phone and also on iPads, of course.

00:20:42.800 --> 00:20:47.800
We also get connectors to the phone for doing things like push notifications.

00:20:47.800 --> 00:20:55.300
So you can connect to the photo and photo library and also to the web camera and so on.

00:20:55.300 --> 00:20:58.300
So you can get all of that functionality into your app as well.

00:20:58.300 --> 00:21:03.300
The only difference being is that you only have to implement it once and it works on all of these three platforms.

00:21:03.300 --> 00:21:09.800
You can even get web functionality or sorry, camera functionality on the web application as well.

00:21:09.800 --> 00:21:12.800
That is running in an Angular in a normal Angular platform.

00:21:12.800 --> 00:21:17.300
So, yeah, that's and the reason we chose Ionic was that we are a very small team.

00:21:17.300 --> 00:21:18.300
We're only three developers.

00:21:18.300 --> 00:21:25.300
I and one of the me and the other one of the other developers had some experience of Angular.

00:21:25.300 --> 00:21:31.300
I've released other applications in Angular and we decided that that would be the way to go.

00:21:31.300 --> 00:21:34.300
So, yeah, that's really why we chose Ionic.

00:21:34.300 --> 00:21:39.300
And what it does have it has like style sheets for each type of application.

00:21:39.300 --> 00:21:40.800
So you have one style sheet for the web.

00:21:40.800 --> 00:21:45.300
You have one style sheet for iOS and your one style sheet for Android.

00:21:45.300 --> 00:21:47.800
So each button gets styled.

00:21:47.800 --> 00:21:52.800
So it looks like an Android button or an iOS button and so on in the system as well.

00:21:52.800 --> 00:21:55.800
Are you all using the Ionic framework for your web app as well?

00:21:55.800 --> 00:21:56.300
Yes.

00:21:56.300 --> 00:21:57.500
OK, now that's interesting.

00:21:57.500 --> 00:22:01.100
That's that's a different level of integration there that are a reuse.

00:22:01.100 --> 00:22:02.000
That's pretty interesting.

00:22:02.000 --> 00:22:08.800
The thing is for us just this specific application, because what we did have previously, we had a progressive web app

00:22:08.800 --> 00:22:18.800
that was written on Ruby on Rails and the Ruby on Rails developer decided to go elsewhere, which meant that me and another Python guy, Ruby on Rails application that we had to take care of.

00:22:19.300 --> 00:22:20.800
I have read some Ruby on Rails.

00:22:20.800 --> 00:22:26.300
I've also written some Ruby on Rails previously, but it's like that 15 years ago, I think.

00:22:26.300 --> 00:22:28.300
So that's not something that we wanted to keep up with.

00:22:28.300 --> 00:22:36.800
And what we do need to do, we need the deep linking, which means that if you get an URL in an email, because we send out notifications for invoices.

00:22:36.800 --> 00:22:48.800
For example, you get an URL in your email, you click on that, you either go to the web application if you don't have the app installed on your mobile phone, but you can get into the application directly if you have it installed on your phone.

00:22:48.800 --> 00:22:51.800
So that type of integration is very important for us as well.

00:22:51.800 --> 00:22:52.800
It's worth pointing out.

00:22:52.800 --> 00:23:00.800
Ionic is cross platform, not just web to mobile as I'm learning, but also so you can publish in the Google Play Store.

00:23:00.800 --> 00:23:02.800
You can publish in the Apple App Store.

00:23:02.800 --> 00:23:23.800
We publish it in all app stores and then we have also, we also have it on the web on its own URL as well with certain, it needs certain documents in the web application to actually make sure that deep linking works in the mobile space as well so that we can get to the right mobile phone application and so on as well.

00:23:23.800 --> 00:23:25.800
Did you look at other frameworks?

00:23:25.800 --> 00:23:31.800
Were you thinking of maybe going through native and writing in Swift or other things?

00:23:31.800 --> 00:23:38.800
The main thing is like, like I said, we're a small team and we needed to do something that was rather simple, that things that we knew something about.

00:23:38.800 --> 00:23:42.800
The other main developer, he is Python, Django developer.

00:23:42.800 --> 00:23:47.800
I worked with him also on that online tailored suit company that we had previously.

00:23:47.800 --> 00:24:00.800
And we've been working with Django for a very long time and just changing to like writing something in Swift or writing then needing to also do it in Java for a an Android application would be too much hassle for us.

00:24:00.800 --> 00:24:06.800
And therefore we chose, we chose something that we sort of thought that we would be more or less comfortable with.

00:24:06.800 --> 00:24:11.800
With it's still just HTML, that's CSS and it's some TypeScript, which is like a better version of JavaScript.

00:24:11.800 --> 00:24:12.800
What is your framework?

00:24:12.800 --> 00:24:14.800
I mean, you kind of mentioned this a little bit.

00:24:14.800 --> 00:24:15.800
Why, why did you choose this?

00:24:15.800 --> 00:24:17.800
And like, you know, did you look at others?

00:24:17.800 --> 00:24:21.800
And yeah, I think this is actually the biggest choice people have to make when they're building an app.

00:24:21.800 --> 00:24:24.800
It's like, what do I even, which direction do I even go?

00:24:24.800 --> 00:24:29.800
Even if I'm sure I'm doing Python in the back end, then still that doesn't solve this problem necessarily.

00:24:29.800 --> 00:24:31.800
Maybe the story will make a little bit more sense.

00:24:31.800 --> 00:24:34.800
I mentioned earlier that the initial version was a PWA.

00:24:34.800 --> 00:24:37.800
That's mostly because my background is web development.

00:24:37.800 --> 00:24:39.800
I write a lot of view as well.

00:24:39.800 --> 00:24:43.800
However, the PWA was difficult for discoverability.

00:24:43.800 --> 00:24:47.800
And then I had to make the really tough choice of, okay, what's kind of the next thing to do?

00:24:47.800 --> 00:24:50.800
I really did look kind of all around the landscape.

00:24:50.800 --> 00:25:11.800
But the one thing that always kind of scared me was that if, or I guess the thing that really pushed me into going native was like, if I wanted really native functionality, which, you know, having like been building apps for quite a few years now, sometimes the things that you want to do or the things that people ask for veers off into like the, all right, this is actually pretty custom.

00:25:11.800 --> 00:25:12.800
There's no library for this.

00:25:12.800 --> 00:25:15.800
Like we gotta, we gotta just like roll up our sleeves and do it.

00:25:15.800 --> 00:25:23.800
And I knew that if I had gone cross platform that all my experience, let's say for example, would have been in Flutter or React Native, which are like the two really, really popular options.

00:25:23.800 --> 00:25:28.800
And if I now needed to write something custom, the one year of Swift experience that I have now, I wouldn't have had.

00:25:28.800 --> 00:25:35.800
So it's like, not only am I using a really difficult and probably not well-documented API, it's like on top of that, I also don't even understand the language.

00:25:35.800 --> 00:25:38.800
So I think for me, that was kind of the big, the big thing.

00:25:38.800 --> 00:25:44.800
And one of the reasons was I always thought maybe like, we haven't done this yet, but maybe we could like amp up the camera or do something with video players,

00:25:44.800 --> 00:25:50.800
or maybe like be a little bit more custom with, with the way that we pull, pull our images in and take more advantage of caching and stuff.

00:25:50.800 --> 00:25:55.800
So that was where, kind of, that was, that was the reason why I ended up, ended up going with Swift.

00:25:55.800 --> 00:25:57.800
I think it was, it was a pretty cool choice.

00:25:57.800 --> 00:26:01.800
Yeah. And it sounds like Swift UI makes it a little bit easier than, you know, a bunch of storyboards and all that.

00:26:01.800 --> 00:26:03.800
Let me say a little bit about, about Swift UI.

00:26:03.800 --> 00:26:05.800
It has been quite helpful.

00:26:05.800 --> 00:26:07.800
I don't know if it's because I've come from the web.

00:26:07.800 --> 00:26:13.800
I've heard online that the people at Apple or the people who developed Swift UI were influenced by React.

00:26:13.800 --> 00:26:18.800
I could, I could see that a little bit having, having used a little bit of React, but it is, it is quite a bit more.

00:26:18.800 --> 00:26:20.800
It is a lot more expressive.

00:26:20.800 --> 00:26:21.800
It's a lot easier to write.

00:26:21.800 --> 00:26:26.800
But let me also say that, you're not going to get away with only writing Swift UI.

00:26:26.800 --> 00:26:33.800
Like you could do maybe 80 to 90%, but there's that additional 10% you have to dip down UI kit and, and kind of put some extra stuff together.

00:26:33.800 --> 00:26:34.800
It's still a little rough around the edges.

00:26:34.800 --> 00:26:35.800
That's kind of the case.

00:26:35.800 --> 00:26:39.800
I'm always thinking of new apps and new ideas and that I have no time to work on them.

00:26:39.800 --> 00:26:43.800
But the one that I have no time to work on right now that I'm thinking of is something to do with the Apple watch.

00:26:43.800 --> 00:26:47.800
And, there's no flutter for Apple watch right now.

00:26:47.800 --> 00:26:51.800
So I'm like, well, maybe I'm going to have to learn Swift after all.

00:26:51.800 --> 00:26:52.800
We'll see.

00:26:52.800 --> 00:26:55.800
We'll see if I, first I got to find time and then we'll come to that.

00:26:55.800 --> 00:26:56.800
We'll solve that problem later.

00:26:56.800 --> 00:26:57.800
Awesome.

00:26:57.800 --> 00:26:58.800
All right.

00:26:58.800 --> 00:27:00.800
Jeffren, Kivy, why'd you choose Kivy?

00:27:00.800 --> 00:27:04.800
My framework favorito, in this case, is Kivy.

00:27:04.800 --> 00:27:06.800
Kivy, I know it in 2011.

00:27:06.800 --> 00:27:07.800
Okay.

00:27:07.800 --> 00:27:10.800
My favorite framework is Kivy.

00:27:10.800 --> 00:27:16.800
I knew it in 2011 and I use it because it's very stable.

00:27:16.800 --> 00:27:17.800
It's steady.

00:27:17.800 --> 00:27:27.800
And because it's a, it has a very active community and it allows, and develop applications for many platforms.

00:27:27.800 --> 00:27:30.800
And with one, just one code.

00:27:30.800 --> 00:27:33.800
So that's why he chose Kivy.

00:27:33.800 --> 00:27:34.800
Sorry.

00:27:34.800 --> 00:27:40.800
It seems like Kivy is a good fit for the type of application that Jeffren built.

00:27:40.800 --> 00:27:41.800
So it was a good match.

00:27:41.800 --> 00:27:42.800
Yes.

00:27:42.800 --> 00:27:43.800
It fits completely with what I've been looking for.

00:27:43.800 --> 00:27:44.800
It fits completely with what I've been looking for.

00:27:44.800 --> 00:27:49.800
In fact, for me it's gratifying to confuse it with a game.

00:27:49.800 --> 00:27:57.800
Because I've always wanted to have that level of realism that they offer in video games, like Unity 3D.

00:27:57.800 --> 00:27:58.800
Okay.

00:27:58.800 --> 00:28:11.800
It's grateful for me that Kivy really much with I look for because it's, I found it nice that people confuse it like a game.

00:28:11.800 --> 00:28:22.800
Because games are realistic in some ways to control what do you want, what do you, how do you want to, and custom your car, for example.

00:28:22.800 --> 00:28:29.800
And this application gives you lots of features to implement to what you want.

00:28:29.800 --> 00:28:30.800
Okay.

00:28:30.800 --> 00:28:31.800
Lauren.

00:28:31.800 --> 00:28:32.800
I don't remember if I mentioned it.

00:28:32.800 --> 00:28:37.800
I actually started briefly with Kotlin and native Android programming in 2020.

00:28:37.800 --> 00:28:42.800
But once I tried Flutter, I just found the developer experience to be exponentially better.

00:28:42.800 --> 00:28:43.800
Right.

00:28:43.800 --> 00:28:45.800
And with the added benefit of being cross-platform.

00:28:45.800 --> 00:28:47.800
So Kotlin as a language, I think is great.

00:28:47.800 --> 00:28:51.800
It's not, that's not the issue, but just the overall process of building an app and native Android versus Flutter.

00:28:51.800 --> 00:28:55.800
I imagine I would probably like Swift better if I tried that.

00:28:55.800 --> 00:28:58.800
I haven't really had a need to dive too deep into it so far.

00:28:58.800 --> 00:29:02.800
But I think Haru made some interesting points in terms of if you need something really custom.

00:29:02.800 --> 00:29:03.800
Yeah.

00:29:03.800 --> 00:29:07.800
Had he chose a cross-platform framework, he then would have had to learn Swift and then do all that.

00:29:07.800 --> 00:29:13.800
But I do want to make the point that you do still have access to any native APIs that you need.

00:29:13.800 --> 00:29:14.800
Right.

00:29:14.800 --> 00:29:15.800
Even if there's not a library for it.

00:29:15.800 --> 00:29:17.800
In Flutter, it's something called a method channel.

00:29:17.800 --> 00:29:20.800
And then you can just, it's just a message you send back to the native platform.

00:29:20.800 --> 00:29:22.800
Whatever you got to do on the native side, you can do.

00:29:22.800 --> 00:29:28.800
That being said, in terms of what really struck me in Flutter was building UI was so much nicer than doing it in Android.

00:29:28.800 --> 00:29:32.800
With the hot reload, you know, you make a change, hit save, immediately updates.

00:29:32.800 --> 00:29:33.800
The widget.

00:29:33.800 --> 00:29:36.800
So in Flutter, all your UI components are called widgets.

00:29:36.800 --> 00:29:40.800
If you ever look at some Flutter UI code, I didn't really like it at first.

00:29:40.800 --> 00:29:42.800
Like it looks a little bit weird if you're not used to it.

00:29:42.800 --> 00:29:51.800
But as soon as you wrap your head around the widget tree and how it all works and get used to using snippets in your preferred IDE, you just say wrap this widget in another widget.

00:29:51.800 --> 00:29:52.800
That saves a bunch of time.

00:29:52.800 --> 00:29:55.800
It's really not fun if you're doing that stuff manually without snippets.

00:29:55.800 --> 00:29:59.800
But all that being said, I was just so much more productive building UIs.

00:29:59.800 --> 00:30:03.800
And again, having the added benefit of being cross platform.

00:30:03.800 --> 00:30:13.800
So for me, that's, I mean, it's unlikely I'll ever have a need to go native or choose a different framework for that matter because Flutter suits all my needs.

00:30:13.800 --> 00:30:14.800
So there's some code.

00:30:14.800 --> 00:30:17.800
If somebody has never seen that, that might look a little bit weird, right?

00:30:17.800 --> 00:30:18.800
It looks normal to me.

00:30:18.800 --> 00:30:25.800
What's interesting about it is like, it's really, you build these like hierarchies of code, but they exactly match the UI hierarchy.

00:30:25.800 --> 00:30:29.800
Like this panel contains these three things and they're kind of indented in code.

00:30:29.800 --> 00:30:39.800
But boy, do you need a smart plugin in your IDE or your editor to like manage the backend of those curly closing things.

00:30:39.800 --> 00:30:46.800
Yeah, it was especially starting out, you're missing one, one parentheses or one curly bracket and your page is full of red squiggly lines.

00:30:46.800 --> 00:30:50.800
And if you don't know how to sort that out, it's not, once you get used to it, it's fine.

00:30:50.800 --> 00:30:54.800
But especially in the early days, sorting out those closing brackets are pretty annoying.

00:30:54.800 --> 00:30:57.800
But yeah, all that being said, I found myself way more productive with Flutter.

00:30:57.800 --> 00:30:59.800
Really easy to build nice UIs.

00:30:59.800 --> 00:31:01.800
The performance is always getting better.

00:31:01.800 --> 00:31:03.800
Animations, all that stuff is really nice.

00:31:03.800 --> 00:31:07.800
And you still have access to the full native APIs if you need to use it.

00:31:07.800 --> 00:31:11.800
Talk Python To Me is partially supported by our training courses.

00:31:11.800 --> 00:31:17.800
Python's async and parallel programming support is highly underrated.

00:31:17.800 --> 00:31:24.800
Have you shied away from the amazing new async and await keywords because you've heard it's way too complicated or that it's just not worth the effort?

00:31:24.800 --> 00:31:30.800
For the right workloads, a hundred times speed up is totally possible with minor changes to your code.

00:31:30.800 --> 00:31:32.800
But you do need to understand the internals.

00:31:32.800 --> 00:31:40.800
And that's why our course, async techniques and examples in Python, show you how to write async code successfully as well as how it works.

00:31:40.800 --> 00:31:46.800
Get started with async and await today with our course at talkpython.fm/async.

00:31:48.800 --> 00:31:56.800
One of my concerns with all of these frameworks, these non-Cotlin, non-Swift frameworks is like, well, how supported are they?

00:31:56.800 --> 00:31:59.800
Like, am I excited about something that 10 people are using?

00:31:59.800 --> 00:32:00.800
You know what I mean?

00:32:00.800 --> 00:32:06.800
But it's so I can pull up Ionic and Ionic's got 50,000 stars.

00:32:06.800 --> 00:32:14.800
And then, you know, one of the other ones I definitely considered and chose is Flutter and it's got 157,000 stars.

00:32:14.800 --> 00:32:18.800
By way of comparison, Flask has around, I think 50,000, 60,000.

00:32:18.800 --> 00:32:20.800
CPython itself has 50,000, right?

00:32:20.800 --> 00:32:22.800
So like, oh, okay.

00:32:22.800 --> 00:32:25.800
Well, that seems like a good enough number that people are using it.

00:32:25.800 --> 00:32:27.800
These are all really interesting choices.

00:32:27.800 --> 00:32:31.800
And I think just making this choice, it's where you got to start, but it's a challenge.

00:32:31.800 --> 00:32:33.800
You got to think about what you're building and whatnot, right?

00:32:33.800 --> 00:32:35.800
I'd like to also add to that.

00:32:35.800 --> 00:32:40.800
I mean, one of the main things that, like you said, one of the things that we had a bit of a worry about was,

00:32:40.800 --> 00:32:47.800
will like, for example, iOS, the app store, will they accept something that's coming from Ionic framework?

00:32:47.800 --> 00:32:55.800
Because you are literally just running a web application in a web view in your app is really a small component.

00:32:55.800 --> 00:33:06.800
And we even had in the previous versions, we had the ability to update the underlying HTML code and the application code from a server that is on the internet.

00:33:06.800 --> 00:33:08.800
So it was really a really strange thing.

00:33:08.800 --> 00:33:12.800
But Apple has never had any issues with our application.

00:33:12.800 --> 00:33:13.800
Yeah, it's fantastic.

00:33:13.800 --> 00:33:14.800
Congratulations also.

00:33:14.800 --> 00:33:17.800
No, I don't think it's the Ionic framework.

00:33:17.800 --> 00:33:20.800
I think there's always a weird issue.

00:33:20.800 --> 00:33:22.800
There's just a weird review processes there.

00:33:22.800 --> 00:33:28.800
But I think Ionic seems to be pretty solid and that people have apps out in the app store.

00:33:28.800 --> 00:33:29.800
Flutter, absolutely.

00:33:29.800 --> 00:33:33.800
Absolutely. Like you can see a bunch of things like the BMW app and stuff.

00:33:33.800 --> 00:33:34.800
Kivi also.

00:33:34.800 --> 00:33:35.800
I think that's really good.

00:33:35.800 --> 00:33:42.800
I think what there's, I think one of the rules of thumbs that people should really have is you're going to use a framework.

00:33:42.800 --> 00:33:47.800
Just look to see that there are apps in the app store based on that framework, right?

00:33:47.800 --> 00:33:54.800
Not proof of concept, not theoretical things, but like here are apps in the app store based on this, this app.

00:33:54.800 --> 00:34:02.800
And not necessarily because it's only a good thing if the app is in the app store, but there's all these little edges, right?

00:34:02.800 --> 00:34:04.800
Like I said, in-app purchasing, for example, right?

00:34:04.800 --> 00:34:09.800
That's something you could, you could build a cool mobile framework and never add that because you haven't gotten around to it.

00:34:09.800 --> 00:34:18.800
But if, even if you don't want it, if the people at the app store require you to have it, your app doesn't go in the app store until you put it in, regardless of whether you even want to.

00:34:18.800 --> 00:34:25.800
Right. Which is Lauren and I spent, how long did we spend like a week and a half full time adding in-app purchasing and we didn't even want it.

00:34:25.800 --> 00:34:27.800
Yeah. Right. And they're like, Nope, Nope.

00:34:27.800 --> 00:34:29.800
You have to have it and rejected, rejected, rejected.

00:34:29.800 --> 00:34:32.800
You know, here's the way you can, what is it?

00:34:32.800 --> 00:34:37.800
You can like protest this rejection to a higher authority protest it, rejected.

00:34:37.800 --> 00:34:44.800
You know, it's like, it wasn't good. It wasn't good. So you got to think about those kinds of things. Like when you choose a framework, right?

00:34:44.800 --> 00:34:51.800
And good job on that in the end, Lauren, we're not done as, as, we'll see, but yeah, nonetheless, we're, we're pretty much there.

00:34:51.800 --> 00:34:55.800
Again, I had a blast working on this. It's really, really nice working with you directly.

00:34:55.800 --> 00:34:57.800
I'm really grateful to have been a part of that.

00:34:57.800 --> 00:35:06.800
There is a question in the audience. I kind of want to get, I guess this is for you, Lauren. This is Alan asks looking into Flutter. I want to know the best way to integrate with AWS.

00:35:06.800 --> 00:35:15.800
For example, is Cognito an option for a signup flow? So I don't know what Cognito is. I guess it's an authentication platform from AWS. I'm guessing.

00:35:15.800 --> 00:35:19.800
But yeah, I mean, just maybe talk about that real quick. If, if you've got any experience.

00:35:19.800 --> 00:35:24.800
I don't personally have a lot of AWS experience and I know they have like a million separate services.

00:35:24.800 --> 00:35:34.800
So I do know that there is an AWS library for Flutter. Again, I don't know what exactly that entails in terms of which one of their services it provides a Dart wrapper for.

00:35:34.800 --> 00:35:38.800
But either way, it's certainly possible to integrate with any, any other services.

00:35:38.800 --> 00:35:43.800
Even if you have to, you know, do it from scratch, it's obviously possible. It's all just APIs at the end of the day.

00:35:43.800 --> 00:35:50.800
So I would say that like every one of these frameworks we just talked about, to my knowledge, has something like pip and PyPI, right?

00:35:50.800 --> 00:35:55.800
We're all used to pip install our projects. Like that's just the lifeblood of how Python works.

00:35:55.800 --> 00:36:03.800
But for example, Flutter has pub.dev and you can, you know, pub get stuff and it's an equivalent type thing, right?

00:36:03.800 --> 00:36:09.800
Compared to like React Native, which is a little bit older, you know, you, you see a lot about how they're, they have a more robust package system.

00:36:09.800 --> 00:36:15.800
But in my experience, I've yet to run across a scenario where I did not find the library that I needed.

00:36:15.800 --> 00:36:19.800
Like weather app uses location. It's plenty of location libraries, you know?

00:36:19.800 --> 00:36:23.800
Yeah. Yeah. And Ionic has NPM obviously, right?

00:36:23.800 --> 00:36:29.800
Yeah. And they, they also have their own package. They have the Cordova packages or Cordova.

00:36:29.800 --> 00:36:30.800
Okay. Yeah.

00:36:30.800 --> 00:36:41.800
Which are, are what they use for connecting to, the telephone itself. So everything that you need to do with that, you, you go through the Cordova store.

00:36:41.800 --> 00:36:45.800
There are a lot of various packages on the Ionic website themselves. So.

00:36:45.800 --> 00:36:51.800
So, yep. And to varying degrees of success, we have CocoaPods for you, Harut, right?

00:36:51.800 --> 00:36:54.800
Now it's actually Swift package manager. So it's, it's a little bit better.

00:36:54.800 --> 00:36:55.800
Oh really?

00:36:55.800 --> 00:36:56.800
It goes by SPM or I dunno.

00:36:56.800 --> 00:36:56.800
Yeah.

00:36:56.800 --> 00:36:59.800
A little bit easier to install less configuration hassle overall.

00:36:59.800 --> 00:37:13.800
Because like I said, the CocoaPods are kind of a little bit janky, right? They're based on like Ruby gems and then they compile. It's a lot of Rube Goldbergian stuff happening there. And then for packages in Kivi, you just use Pip. Yes.

00:37:13.800 --> 00:37:27.800
Utilicé la librería Pigenius. I use the Pigenius library. Y también utilicé para monetizar la aplicación en la Play Store. Con publicidad, utilicé KeepMob.

00:37:27.800 --> 00:37:36.800
And for Play Store, I use for purchasing, KeepMob. Cool. So there's third party packages that you can do in-app purchases with. That's great.

00:37:36.800 --> 00:37:41.800
Para utilizar gráficos 3D, calculo rápido, NumPy.

00:37:41.800 --> 00:37:46.800
And for 3D calculation, I use NumPy, NumPy.

00:37:46.800 --> 00:37:47.800
NumPy.

00:37:47.800 --> 00:37:55.800
That's really cool. That's one of the most popular ones for general science, but I guess it's, it's neat that it applies right there on mobile apps. There definitely are some advantages to having Kivi.

00:37:55.800 --> 00:38:06.800
This is a question for you, Andreas, I guess, but we can maybe all talk about this real quick. What are the limitations of Ionic regarding to being connected to the internet versus Ionics?

00:38:06.800 --> 00:38:12.800
being offline. I'm guessing that that question has comes from the fact that it, it sounds like a web app framework.

00:38:12.800 --> 00:38:26.800
It is a web app framework, but it is self-contained. So when you install the app, you get all of the JavaScript, all of the HTML, all of the CSS that's required to make your app look like it should look on the mobile phone.

00:38:26.800 --> 00:38:40.800
It's more of how you design your application yourself. If you want to, for example, our application doesn't work without internet access because we have all of the information on the back end and there's really nothing that we can do without internet access.

00:38:40.800 --> 00:38:52.800
You could, of course, design it that you download stuff and you use it with, there's a lot of plugins to get like in, what is it that, that Apple likes, they like to use the default database that we get on all of our,

00:38:52.800 --> 00:39:04.800
uh, SQL light maybe. Yeah. SQL light. Thank you. They, they use a lot of SQL light on, on the apps and you can get, SQL light connectors and use that locally on the mobile phone itself. So you can store everything.

00:39:04.800 --> 00:39:08.800
You can store everything if you want to and do a complete offline experience as well.

00:39:08.800 --> 00:39:12.800
And you use block, but did you use block for offline capabilities?

00:39:12.800 --> 00:39:20.800
For anyone not familiar block is one of the many available state management libraries for Flutter. That's the one I choose. I prefer generally. It's what I use at work as well.

00:39:20.800 --> 00:39:30.800
They also have a library called hydrated block, which makes it really, really easy. It just persists any state change within your application without having to write manually write your code.

00:39:30.800 --> 00:39:42.800
Like basically it's, it's a to Jason and from Jason situation. You have like a state class. And as long as your state can be serialized in the Jason, it just does all that in the background, which is really nice.

00:39:42.800 --> 00:39:54.800
So there's, there's like that kind of state's persistence between app sessions, but then there's also actually downloading the files, like for when the, you know, you were offline was very important to you. Right. As far as the functionality.

00:39:54.800 --> 00:39:58.800
So yeah. Yeah. That's one of the reasons the app existed. One of the two or three, right?

00:39:58.800 --> 00:40:07.800
Sure. Yeah. So that was, that wasn't really hydrated block was not actually it saved the file path, but the actual bytes, you know, streaming of the bytes and saving the file itself.

00:40:07.800 --> 00:40:18.800
That was just basically just the HTTP library, writing that directly to the, to the device. And then hydrated block saves the file path for the next time the user needs to watch that offline.

00:40:18.800 --> 00:40:30.800
A route. What's your offline story. We don't really have, have an offline story. I think it's kind of similar to like other platforms. So some like Instagram, if you don't have internet connection, you don't really see photos and it's kind of similar for us right now.

00:40:30.800 --> 00:40:36.800
Keep it simple. Right. And Jeffrey, does your app use online features or is it just offline?

00:40:36.800 --> 00:40:43.800
What the least. So I'm the third imagine is offline. Okay. In V3D we use offline images.

00:40:43.800 --> 00:40:55.800
Okay. Yeah. So no real internet. Excellent. All right. Let's do talk a little bit about some Python about what's going on here. Since, you know, we're just a little ways into the show. I guess we could talk some Python at this point.

00:40:55.800 --> 00:41:19.800
Yeah, it's been a great conversation. Let's just go kind of top to bottom. And Andreas, it sounds like yours is very much an online application and has back in services. You already talked about the Ruby on Rails app and getting away from that. Tell us your story. Give us a little sense of like, what is your back in architecture? And just, you know, what do you got going on with Python? Where some of the technologies and things there are back in architecture is actually just changed.

00:41:19.800 --> 00:41:48.800
We're really proud of it now because we've moved from our own installed servers that have been installed with via very long scripts that you've written down exactly what you need to do and everything and running our own MySQL servers and so on. And we've moved everything into AWS and we're currently running in a Kubernetes setup. So we are really proud of how that's running currently. But we are a Django shop. We've been running Django. The first version was written in 2013.

00:41:48.800 --> 00:42:03.680
And we've just iterated since then. And we're now currently on the latest versions of all of the dependencies that we have in PyPI as of last week, because we did a major upgrade. We need to update our Redis connections for certain reasons.

00:42:03.800 --> 00:42:26.460
But yeah, we've been running Django and just doing a regular Django application, really. And that's the main part of the admin for our customers. They use the Django app to do their administration for the memberships, sending out invoices, creating activities that they need their members to join and so on. All of that is done more or less currently in the Django app.

00:42:26.460 --> 00:42:42.260
And then we have the mobile application is for the members to go in and check which activities are we going to go to, which invoices do we need to pay, connect to other members in the teams or in the clubs that they're members of.

00:42:42.340 --> 00:42:47.520
So primarily, you've got this Django app. And I was imagining that people can log into the Django app as well.

00:42:47.520 --> 00:43:04.280
Yeah. And previously, we had like a lot of Ruby on Rails servers that did certain parts of the application. For example, we have a lot of different payment solutions for the invoices you can pay via Swish, which is a comparison with I think it's called Venmo or Cash App in the States.

00:43:04.280 --> 00:43:14.100
What you do is you send money via your mobile phone number in Sweden. And so we have a backend for handling that that used to be written in Ruby. We've moved that into Django as well.

00:43:14.100 --> 00:43:30.820
We also have credit card payments, which was in Ruby on Rails, moved into Django. And so we were trying to consolidate a lot in the backend and try to move everything back into the Django application and just have the mobile apps out for the members to use to talk to the backend.

00:43:30.820 --> 00:43:36.920
That's excellent. Yeah, there's a bit of a trend away from all that stuff, right? There's a great article, give me back my monolith.

00:43:36.920 --> 00:43:37.920
Yeah, exactly.

00:43:37.920 --> 00:43:38.920
Yeah, exactly.

00:43:38.920 --> 00:43:48.540
Instead of all the microservices and different technologies that were just like, just give me a thing, just let me put it to the app. And it sounds like kind of like you embrace that with Django.

00:43:48.540 --> 00:44:03.080
We've got a lot of experience with Django. Me and the other main developer, we've been working with Django for, I've been working with about 10 years now. He has been working with about 15. And it's our preferred go-to solution for everything in the backend.

00:44:03.080 --> 00:44:12.380
You must have APIs and stuff, right? What do you use for the API side of things? Is it still just straight Django or do you have some REST framework?

00:44:12.380 --> 00:44:17.260
We use Django with Django REST framework. So it's really a simple solution for that as well.

00:44:17.260 --> 00:44:17.660
Yeah.

00:44:17.660 --> 00:44:32.600
And we really enjoy working with that. We have another guy who's come in now who is a developer I've worked with a lot from the Ukraine. And he's been working with us now from Poland instead, just doing development with Django REST framework. And he's really good at those things.

00:44:32.600 --> 00:44:35.700
Yeah, it seems like a nice one. Have you considered Django Ninja?

00:44:35.940 --> 00:44:40.200
I've just read about it. I haven't actually done anything with it. I read about it the other week.

00:44:40.200 --> 00:44:45.040
If you like FastAPI, but you also like Django, then maybe Django Ninja is what you're looking for.

00:44:45.040 --> 00:44:59.100
Yeah, exactly. But that being said, I mean, the new releases with Django, with version 5, with all of the now async views, everything that we're getting with that, I think Django is one of these things that you know that your code will always work.

00:44:59.320 --> 00:45:07.200
But you also get that you're starting to get all of these new features as well to get the systems working as well, which is really amazing.

00:45:07.200 --> 00:45:10.380
I think they're doing a great job with the Django community now.

00:45:10.380 --> 00:45:10.680
Excellent.

00:45:10.680 --> 00:45:16.760
So similar to Andres, we also use Django. So I'm just going to be basically talking, building on top of a lot of the stuff that he said.

00:45:16.760 --> 00:45:19.200
Big fan of the framework. I've been using it for years.

00:45:19.200 --> 00:45:23.520
I'm trying to think. We mostly use Django REST framework.

00:45:24.220 --> 00:45:30.320
A lot of the stuff, a lot of the views are kind of custom built. The ORM is very helpful. Migrations are really helpful.

00:45:30.320 --> 00:45:36.360
We do write some raw SQL for some of the more trickier parts of the app, like the explore page, where the queries need to be more performant.

00:45:36.360 --> 00:45:43.360
We use HTTPX to send notifications to APNS, which is Apple's push notification server.

00:45:43.360 --> 00:45:48.980
We are big fans of type hints. I have some of this I've written down here, just to kind of point out.

00:45:49.440 --> 00:45:59.140
PostGIS for some of our geospatial calculations. And most of it runs on, I don't know why I'm saying most of it, all of it runs on AWS, on pretty bare bones EC2 servers.

00:45:59.140 --> 00:46:04.840
I kind of like the simpler monolith approach where you kind of just like you have a bare bones server, you set up everything.

00:46:04.840 --> 00:46:09.180
And then, you know, you can use something like Ansible to help you bring it up and bring it back down.

00:46:09.180 --> 00:46:11.480
But it's just a lot easier to keep in mind.

00:46:12.440 --> 00:46:15.080
And deploy and version and all those things.

00:46:15.080 --> 00:46:18.240
Hey, while you're on, I think I had a question on the audience.

00:46:18.240 --> 00:46:19.040
I'll go ahead and ask.

00:46:19.040 --> 00:46:24.360
And Sid, in your pin app, is it difficult to write code so that changes are saved?

00:46:24.360 --> 00:46:26.180
You know, Lauren talked about the block thing.

00:46:26.180 --> 00:46:29.300
You kind of just make the changes to the state and they just stay.

00:46:29.300 --> 00:46:31.180
But what's the story for yours?

00:46:31.180 --> 00:46:37.100
I don't know if I fully understand the question, but I think there are two ways, two things that I could say to answer it.

00:46:37.180 --> 00:46:42.960
One is we use user defaults in Swift to take advantage of like saving stuff directly on the device.

00:46:42.960 --> 00:46:47.660
But actually, the main thing that we do is we push a lot of logic to the server.

00:46:47.660 --> 00:46:52.020
And this is like my favorite way to kind of get around the app store nonsense.

00:46:52.020 --> 00:46:54.300
Just, I guess, is the nice way to say it.

00:46:54.300 --> 00:47:01.260
But the more and more logic that you push to the server means that whenever you need, you find a bug or you have a feature or fix that you want to push out.

00:47:01.260 --> 00:47:06.000
You know, you can just change it on your server, redeploy, and then boom, like it's available.

00:47:06.240 --> 00:47:11.340
So sometimes like when people on the app complain about issues with like, oh, this is not displaying correctly.

00:47:11.340 --> 00:47:12.900
And then I'm like, oh, just refresh the app.

00:47:12.900 --> 00:47:14.200
And they're like, oh, that's crazy.

00:47:14.200 --> 00:47:15.160
I can't believe that just worked.

00:47:15.160 --> 00:47:23.260
And other times, certain things that I have to do on the device, I'm like, oh, well, here's a, now I got to submit this to the app store or wait a day for it to get approved.

00:47:23.260 --> 00:47:25.780
Wait two weeks for everybody's phone to update.

00:47:25.780 --> 00:47:26.400
Yeah, absolutely.

00:47:26.400 --> 00:47:29.420
If you can do it on the server, it's just have so much more control.

00:47:29.420 --> 00:47:32.040
And I mean, Lauren, that's how you and I worked a lot, right?

00:47:32.100 --> 00:47:48.300
A lot of the things were like, well, if we want something to be visible in this collection or not visible in that collection or, you know, like, for example, if you want, say, the free courses to appear in a different section but not in the main one, you could just not return them in the API rather than changing the app potentially.

00:47:48.800 --> 00:47:48.960
Right.

00:47:48.960 --> 00:47:49.400
Exactly.

00:47:49.400 --> 00:47:49.640
Yeah.

00:47:49.640 --> 00:47:57.120
I was actually, I recall being impressed by how easy it was, excuse me, for you to make these changes, you know, as these requirements kind of popped up throughout the process.

00:47:57.120 --> 00:47:58.520
You'd be back in 10 minutes.

00:47:58.520 --> 00:47:59.260
Okay, it's ready.

00:47:59.260 --> 00:48:05.420
You know, and it was, I guess, Mongo is maybe partially a factor in that and how flexible it is.

00:48:05.420 --> 00:48:09.780
I made zero database schema changes explicitly on this.

00:48:09.780 --> 00:48:12.600
I just wrote code and it just, it just started doing what it needed.

00:48:12.600 --> 00:48:14.280
The whole, the whole thing through the app.

00:48:14.280 --> 00:48:14.500
Yeah.

00:48:14.500 --> 00:48:15.780
The whole app dev process.

00:48:15.900 --> 00:48:16.960
Yeah, it was fast.

00:48:16.960 --> 00:48:21.780
I remember telling you when I started my job, it was noticeably not as fast as your backend.

00:48:21.780 --> 00:48:24.140
And that's a big company with lots of money.

00:48:24.140 --> 00:48:25.220
That should be super fast.

00:48:25.220 --> 00:48:29.940
Well, yeah, to be fair, I think it's reasonable to assume an insurance company has a larger and more complex backend.

00:48:29.940 --> 00:48:32.140
I think the complexity is also crazy, right?

00:48:32.140 --> 00:48:37.800
Like probably you've got to, we got to apply a bunch of rules to this question, not just return the data.

00:48:37.800 --> 00:48:38.040
Yeah.

00:48:38.040 --> 00:48:38.420
Sure.

00:48:38.420 --> 00:48:41.180
Nonetheless, I'll say it again, your backend is crazy fast.

00:48:41.460 --> 00:48:45.580
And you kind of got me hooked on the FastAPI Mongo situation.

00:48:45.580 --> 00:48:46.360
Yeah.

00:48:46.360 --> 00:48:47.140
Really impressed with all that.

00:48:47.140 --> 00:48:49.020
I know you're not using FastAPI for your backend for that.

00:48:49.020 --> 00:48:51.860
I would if I got a choice actually, but I mean, no, no, no, no, no.

00:48:51.860 --> 00:48:56.320
I'll go ahead and say a little bit about what we're doing on our backend just to kind of be fair to round it out.

00:48:56.320 --> 00:48:58.780
So the Talk Python web app is written in Pyramid.

00:48:58.780 --> 00:49:00.020
I love the Pyramid framework.

00:49:00.020 --> 00:49:02.300
It has a lot of cool features.

00:49:02.300 --> 00:49:04.120
It's really, really fast.

00:49:04.120 --> 00:49:08.040
It was one of the very first ones to support Python 3, like intentionally a lot.

00:49:08.040 --> 00:49:10.700
Like it might run, but we embrace Python 3.

00:49:10.700 --> 00:49:13.220
And that was a huge reason that I chose it.

00:49:13.220 --> 00:49:16.400
I also love the Chameleon framework for writing templates.

00:49:16.400 --> 00:49:18.240
It's really nice.

00:49:18.240 --> 00:49:18.880
It's been great.

00:49:18.880 --> 00:49:20.820
I like the projects with ambitions.

00:49:20.820 --> 00:49:23.520
Start small, but finish big and stay finished.

00:49:23.520 --> 00:49:25.060
Stay finished.

00:49:25.060 --> 00:49:26.120
So that's really good.

00:49:26.120 --> 00:49:31.540
And then it talks to MongoDB using Beanie and that combination is just great.

00:49:31.540 --> 00:49:38.120
And like Haru, it runs on DigitalOcean, not on, not on AWS, but it's just a couple of servers,

00:49:38.120 --> 00:49:38.600
right?

00:49:38.600 --> 00:49:42.360
One for the front end web server, one for the database and it's golden.

00:49:42.360 --> 00:49:42.880
It goes great.

00:49:42.880 --> 00:49:46.460
So yeah, that's, that's pretty much what we got going on there as well.

00:49:46.460 --> 00:49:46.940
Yeah.

00:49:46.940 --> 00:49:52.280
I probably would choose FastAPI if I were to start over, but rewriting the web app,

00:49:52.280 --> 00:49:54.660
it's like 20 or 30,000 lines of Python.

00:49:55.020 --> 00:49:59.420
You know, it's, it would be cool if it was FastAPI, but I'm not sure that the benefits

00:49:59.420 --> 00:50:02.280
of making all those changes are really there.

00:50:02.280 --> 00:50:04.920
It's, it's like, I already liked the framework as it is.

00:50:04.920 --> 00:50:07.000
I also came across Litestar recently.

00:50:07.000 --> 00:50:09.980
I just interviewed those guys here on the show, but not yet published.

00:50:09.980 --> 00:50:12.960
So in the past, but also in the future in a sense.

00:50:12.960 --> 00:50:14.940
And this is a really interesting thing.

00:50:14.940 --> 00:50:19.720
Also built on Starlit that I'm really, really interested in and checking out more as well.

00:50:19.720 --> 00:50:24.080
So there's a lot of, there's so many good back end frameworks to choose from, but you know,

00:50:24.080 --> 00:50:25.340
you got to pick one and go with it.

00:50:25.340 --> 00:50:30.980
And then Jefferyn, I guess maybe it's worth pointing out that Kivi is, while you don't have

00:50:30.980 --> 00:50:34.940
online capabilities for your app, Kivi itself is Python.

00:50:34.940 --> 00:50:38.700
So yours is the only mobile app that is all Python.

00:50:38.880 --> 00:50:41.400
Whereas everybody else's mobile app is something else.

00:50:41.400 --> 00:50:41.940
Yeah.

00:50:41.940 --> 00:50:42.340
Yeah.

00:50:42.340 --> 00:50:47.620
Kivi is building Python.

00:50:47.620 --> 00:50:56.760
With services on the cloud and Flask.

00:50:56.760 --> 00:50:57.060
Okay.

00:50:57.060 --> 00:50:57.720
Flask.

00:50:57.720 --> 00:51:14.040
And I also use Dropbox to save data in the cloud with the same Python.

00:51:14.040 --> 00:51:18.380
What does your app use the Flask online service for?

00:51:18.380 --> 00:51:36.460
We use Flask to upload everything in the cloud and in order to be downloaded in any part of

00:51:36.460 --> 00:51:36.820
the world.

00:51:36.820 --> 00:51:40.940
I said we would talk about the app store, but I also want to finish this on a positive note.

00:51:41.020 --> 00:51:45.900
So I think I'm going to not try to make it the focus of app store horror stories.

00:51:45.900 --> 00:51:50.420
Although I just don't get why they make it so hard to build apps for these frameworks,

00:51:50.420 --> 00:51:56.160
especially Google, not, I mean, especially Apple, but also, also Google in their own special way.

00:51:56.160 --> 00:52:03.600
So instead let's just round this out with maybe like a piece of advice or your thoughts on going

00:52:03.600 --> 00:52:05.780
from having your app to get it in the app store.

00:52:05.780 --> 00:52:07.580
Andreas, you want to go first?

00:52:07.920 --> 00:52:13.540
From our point of view, the main thing that has been a bit of a hassle was if you want to publish

00:52:13.540 --> 00:52:16.340
an iOS app, you need to have a Macintosh.

00:52:16.340 --> 00:52:18.780
So we need to go out and buy a Mac.

00:52:18.780 --> 00:52:20.100
That was one of the things.

00:52:20.100 --> 00:52:25.920
But that being said, what we have done a lot now is we try to automate these things.

00:52:25.920 --> 00:52:31.920
We try to automate pushing the app into the various app stores from GitHub, which we use

00:52:31.920 --> 00:52:33.100
as a repository for it.

00:52:33.480 --> 00:52:39.840
I've successfully done that now for the Google Play, but I can't get the iOS app to build,

00:52:39.840 --> 00:52:40.600
unfortunately.

00:52:40.600 --> 00:52:41.140
Yeah.

00:52:41.140 --> 00:52:42.520
That does not surprise me.

00:52:42.520 --> 00:52:43.240
On GitHub Actions.

00:52:43.240 --> 00:52:46.700
But that's one of the things I think you should invest some time in.

00:52:46.700 --> 00:52:52.360
Because if you do get it working, you can get a lot of these hassle things out of the way.

00:52:52.660 --> 00:52:58.980
And building it on a Mac, it's four or five clicks that I need to do to build it.

00:52:58.980 --> 00:53:01.640
But I need to make sure that I have the right versions everywhere.

00:53:01.640 --> 00:53:08.380
And I make sure that I have set the new version of the application in all places I need to update

00:53:08.380 --> 00:53:11.880
that in both on Android and on iOS.

00:53:12.440 --> 00:53:14.320
various config files I need to update.

00:53:14.320 --> 00:53:18.720
So really looking into automating all of that, I think, would be a good thing to try and do

00:53:18.720 --> 00:53:19.740
as much as possible.

00:53:19.740 --> 00:53:20.000
Yeah.

00:53:20.000 --> 00:53:21.180
That sounds fantastic, actually.

00:53:21.180 --> 00:53:24.280
Even having one of the app stores automated is really nice.

00:53:24.280 --> 00:53:24.580
Yeah.

00:53:24.580 --> 00:53:28.300
Harut, you mentioned builds, Xcode, good times.

00:53:28.300 --> 00:53:29.940
We're going to try to end on a positive note.

00:53:29.940 --> 00:53:30.780
I don't want to talk.

00:53:30.780 --> 00:53:32.360
I don't want to rag on Xcode too much.

00:53:32.360 --> 00:53:33.540
Let's not talk about it.

00:53:33.540 --> 00:53:37.300
But you do need Xcode to build your app to get it in that store.

00:53:37.300 --> 00:53:38.120
That's for sure.

00:53:38.120 --> 00:53:42.220
And if you're like right now, we're what, like four days?

00:53:42.220 --> 00:53:44.900
September 12th is the launch of iPhone 15.

00:53:44.900 --> 00:53:47.920
And iOS 17 will come out a few days after that.

00:53:47.920 --> 00:53:53.400
If you want to try to build something for iOS 17, you do need Xcode 15, which is still in

00:53:53.400 --> 00:53:54.340
beta, beta 8.

00:53:54.340 --> 00:53:57.580
And that can sometimes be tricky to build for, not everything.

00:53:57.580 --> 00:54:02.420
Because like the videos that Apple puts out in June for WWDC, the API has actually changed

00:54:02.420 --> 00:54:03.180
since then.

00:54:03.180 --> 00:54:05.220
And it's, again, not clear sometimes.

00:54:05.220 --> 00:54:05.520
Yeah.

00:54:05.520 --> 00:54:09.720
We're a little spoiled in the Python world about how it, if something once worked, it generally

00:54:09.720 --> 00:54:10.760
continues to work.

00:54:10.760 --> 00:54:11.160
Yeah.

00:54:11.160 --> 00:54:17.360
This next question here from Alan, maybe perfectly lines up your part, Lauren.

00:54:17.360 --> 00:54:20.020
I've not yet published a Flutter app.

00:54:20.020 --> 00:54:22.780
So I really want to learn how this works in the automation available.

00:54:22.780 --> 00:54:23.380
Yeah.

00:54:23.380 --> 00:54:27.000
Maybe just App Store advice and chime in on that potentially.

00:54:27.000 --> 00:54:27.940
Short answer is yes.

00:54:27.940 --> 00:54:30.820
There are a few different CICD platforms available for that.

00:54:30.820 --> 00:54:32.580
Like, for example, GitHub Actions.

00:54:32.580 --> 00:54:37.240
You can get that set up where you push a command from a terminal and it does all this stuff in

00:54:37.240 --> 00:54:38.900
the back end and pushes to the store.

00:54:38.900 --> 00:54:40.020
I personally have not.

00:54:40.020 --> 00:54:40.880
That's on my to-do list.

00:54:40.880 --> 00:54:42.020
I have not actually done that yet.

00:54:42.020 --> 00:54:43.580
There's also CircleCI.

00:54:43.580 --> 00:54:44.540
There's CodeMagic.

00:54:44.540 --> 00:54:46.300
There's a few different services available.

00:54:46.300 --> 00:54:48.720
It's probably a little time consuming to set up.

00:54:48.720 --> 00:54:51.120
Let's say you don't want to get into that, which you should.

00:54:51.120 --> 00:54:52.220
It's definitely worth it in the long run.

00:54:52.220 --> 00:54:55.940
But let's just say like we're not, for Talk Python, we're doing it quote unquote manually.

00:54:56.060 --> 00:54:57.000
It's still not that bad.

00:54:57.000 --> 00:55:02.100
Like basically, in Xcode, you create the archive, upload it within Xcode, go on the web app,

00:55:02.100 --> 00:55:02.480
submit.

00:55:02.480 --> 00:55:02.840
Right.

00:55:02.840 --> 00:55:05.340
And it's more or less, you know, on the Android side.

00:55:05.340 --> 00:55:09.680
You're basically, as far as Flutter is concerned, it's when it comes to publish, you're publishing

00:55:09.680 --> 00:55:10.260
a native app.

00:55:10.260 --> 00:55:10.520
Right.

00:55:10.520 --> 00:55:12.180
So you just got to go through both those processes.

00:55:12.180 --> 00:55:17.120
Android Studio, you build the APK and then upload, you know, and submit.

00:55:17.120 --> 00:55:17.480
Right.

00:55:17.480 --> 00:55:18.660
Via their respective web app.

00:55:18.740 --> 00:55:19.960
So even if you don't go there.

00:55:19.960 --> 00:55:20.220
Yeah.

00:55:20.220 --> 00:55:24.200
It's worth pointing out, like there's, I think, zero difference from the way you publish a

00:55:24.200 --> 00:55:26.080
native app and the way you publish these.

00:55:26.080 --> 00:55:30.340
From what I do, like I'll open up Android Studio and go through the steps or I'll go through

00:55:30.340 --> 00:55:31.500
Xcode and do this.

00:55:31.500 --> 00:55:36.460
It just happens to be what's running or compiling behind the scenes had some Flutter component

00:55:36.460 --> 00:55:38.340
at some point, but it's they're identical.

00:55:38.340 --> 00:55:39.920
People should probably keep that in mind.

00:55:39.920 --> 00:55:40.140
Right.

00:55:40.140 --> 00:55:40.460
Yeah.

00:55:40.460 --> 00:55:42.180
It does compile to native code.

00:55:42.180 --> 00:55:46.820
So as far as like the app stores are concerned and as far, you know, it is a native app just with

00:55:46.820 --> 00:55:48.680
the UI being painted over top.

00:55:48.680 --> 00:55:48.980
Right.

00:55:48.980 --> 00:55:49.800
But so.

00:55:49.800 --> 00:55:52.360
But yeah, lots of options out there if you want to go that route.

00:55:52.360 --> 00:55:52.700
Awesome.

00:55:52.700 --> 00:55:53.680
And cross your fingers.

00:55:53.680 --> 00:55:54.160
Yeah.

00:55:54.160 --> 00:55:54.900
Yeah.

00:55:54.900 --> 00:55:58.960
Jeffron, is your app in the App Store?

00:55:58.960 --> 00:55:59.620
I know.

00:55:59.620 --> 00:56:01.220
It's in the Google Play Store, right?

00:56:01.220 --> 00:56:02.260
Google Play Store.

00:56:02.260 --> 00:56:02.780
Yes.

00:56:02.780 --> 00:56:03.340
Yes.

00:56:03.340 --> 00:56:04.180
Yeah.

00:56:04.180 --> 00:56:06.520
We have launched it in App Store.

00:56:06.520 --> 00:56:08.280
Just only in Play Store.

00:56:08.280 --> 00:56:11.820
And do you have advice for people getting their apps into Google Play?

00:56:11.820 --> 00:56:19.880
Follow the guidelines of privacy.

00:56:19.880 --> 00:56:24.020
Más que todo en la exploración de archivos.

00:56:24.020 --> 00:56:26.980
Overall, archives exploration.

00:56:26.980 --> 00:56:31.760
Eso me ha dado dolores de cabeza en Android a partir de la SDK 30.

00:56:32.160 --> 00:56:32.460
Yes.

00:56:32.460 --> 00:56:39.720
And that have given headaches for me since the updating of SDK 30.

00:56:39.720 --> 00:56:40.200
Excellent.

00:56:40.200 --> 00:56:43.220
Well, everyone, this has been really fun.

00:56:43.220 --> 00:56:46.820
And I said we're not going to share App Store horror stories.

00:56:46.820 --> 00:56:47.880
Horror stories.

00:56:47.880 --> 00:56:49.840
So we're going to pin this on a positive note.

00:56:50.140 --> 00:56:56.340
I think in general, there's just so much possibility in mobile app development these days.

00:56:56.340 --> 00:57:01.580
I don't know about you all, but when I first saw an iPhone or a smartphone, my head was full

00:57:01.580 --> 00:57:03.920
of ideas of like, oh my gosh, you could do this.

00:57:03.920 --> 00:57:04.480
You could do that.

00:57:04.480 --> 00:57:07.760
It's just such an open world for interesting things.

00:57:07.760 --> 00:57:11.420
And it's really cool to hear how you're all building your different apps and putting them

00:57:11.420 --> 00:57:11.700
together.

00:57:11.700 --> 00:57:13.200
So thank you for being here.

00:57:13.200 --> 00:57:14.980
And it's been great.

00:57:14.980 --> 00:57:16.560
Thanks for sharing your experiences.

00:57:16.560 --> 00:57:17.200
Thanks a lot.

00:57:17.200 --> 00:57:17.580
This was great.

00:57:17.580 --> 00:57:18.460
Thanks, Michael.

00:57:18.460 --> 00:57:19.340
This was a lot of fun.

00:57:19.340 --> 00:57:19.800
Thank you.

00:57:19.800 --> 00:57:23.660
This has been another episode of Talk Python to Me.

00:57:23.660 --> 00:57:25.460
Thank you to our sponsors.

00:57:25.460 --> 00:57:27.080
Be sure to check out what they're offering.

00:57:27.080 --> 00:57:28.500
It really helps support the show.

00:57:28.500 --> 00:57:30.620
Take some stress out of your life.

00:57:30.620 --> 00:57:36.100
Get notified immediately about errors and performance issues in your web or mobile applications with

00:57:36.100 --> 00:57:36.400
Sentry.

00:57:36.400 --> 00:57:41.400
Just visit talkpython.fm/sentry and get started for free.

00:57:41.400 --> 00:57:45.000
And be sure to use the promo code talkpython, all one word.

00:57:45.000 --> 00:57:46.920
Want to level up your Python?

00:57:47.320 --> 00:57:50.980
We have one of the largest catalogs of Python video courses over at Talk Python.

00:57:50.980 --> 00:57:56.140
Our content ranges from true beginners to deeply advanced topics like memory and async.

00:57:56.140 --> 00:57:58.820
And best of all, there's not a subscription in sight.

00:57:58.820 --> 00:58:01.720
Check it out for yourself at training.talkpython.fm.

00:58:01.720 --> 00:58:03.780
Be sure to subscribe to the show.

00:58:03.780 --> 00:58:06.560
Open your favorite podcast app and search for Python.

00:58:06.960 --> 00:58:07.880
We should be right at the top.

00:58:07.880 --> 00:58:13.040
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

00:58:13.040 --> 00:58:17.220
and the direct RSS feed at /rss on talkpython.fm.

00:58:17.220 --> 00:58:20.200
We're live streaming most of our recordings these days.

00:58:20.200 --> 00:58:23.600
If you want to be part of the show and have your comments featured on the air,

00:58:23.600 --> 00:58:27.980
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

00:58:28.740 --> 00:58:30.080
This is your host, Michael Kennedy.

00:58:30.080 --> 00:58:31.380
Thanks so much for listening.

00:58:31.380 --> 00:58:32.540
I really appreciate it.

00:58:32.540 --> 00:58:34.440
Now get out there and write some Python code.

00:58:34.440 --> 00:58:55.320
I'll see you next time.

00:58:55.320 --> 00:59:25.300
Thank you.

