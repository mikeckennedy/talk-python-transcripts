WEBVTT

00:00:00.001 --> 00:00:05.640
If you're like most people, the simplicity and ease of getting started is a big part of pytest's appeal.

00:00:05.640 --> 00:00:09.120
But beneath that simplicity, there's a lot of power and depth.

00:00:09.120 --> 00:00:15.760
We have Brian Okken on this episode to dive into his latest pytest tips and tricks for beginners and power users.

00:00:15.760 --> 00:00:21.800
This is Talk Python to Me, episode 407, recorded February 27th, 2023.

00:00:21.800 --> 00:00:38.360
Welcome to Talk Python to Me, a weekly podcast on Python.

00:00:38.360 --> 00:00:40.100
This is your host, Michael Kennedy.

00:00:40.100 --> 00:00:47.580
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython, both on fosstodon.org.

00:00:47.580 --> 00:00:50.200
Be careful with impersonating accounts on other instances.

00:00:50.200 --> 00:00:51.160
There are many.

00:00:51.640 --> 00:00:56.220
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.

00:00:56.220 --> 00:01:00.260
We've started streaming most of our episodes live on YouTube.

00:01:00.260 --> 00:01:07.800
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:07.800 --> 00:01:11.980
This episode is brought to you by Microsoft for Startups Founders Hub.

00:01:11.980 --> 00:01:20.220
Get early stage support for your startup without the requirement to be VC-backed or verified at talkpython.fm/foundershub.

00:01:20.800 --> 00:01:22.220
It's also brought to you by Brilliant.

00:01:22.220 --> 00:01:22.780
It's brought to you by Brilliant.org.

00:01:22.780 --> 00:01:30.680
Stay on top of technology and raise your value to employers or just learn something fun in STEM at Brilliant.org.

00:01:30.680 --> 00:01:35.620
Visit talkpython.fm/brilliant to get 20% off an annual premium subscription.

00:01:35.620 --> 00:01:38.680
Brian, welcome back to Talk Python.com.

00:01:38.920 --> 00:01:39.620
Well, thank you.

00:01:39.620 --> 00:01:40.780
It's good to be back.

00:01:40.780 --> 00:01:42.220
It's really good to have you back.

00:01:42.220 --> 00:01:46.160
I don't know if you've noticed, but over on Talk Python, I put up a guest page.

00:01:46.160 --> 00:01:52.900
And who is out of the 440 guests we've had, you are the most common guest.

00:01:52.900 --> 00:01:58.400
And you are now pulling further away from Brett Cannon and Anthony Shaw, who are hot on your tails there.

00:01:58.580 --> 00:02:02.620
So I'm sure people know you and are familiar with your work.

00:02:02.620 --> 00:02:05.060
But for those who don't, quick introduction.

00:02:05.060 --> 00:02:07.280
People probably know me from Python Bytes, actually.

00:02:07.280 --> 00:02:13.520
And also, I have a podcast called Test and Code that's kind of on pause right now.

00:02:13.520 --> 00:02:15.520
But it'll start up again in a month or so.

00:02:16.320 --> 00:02:19.840
Okay, so I am a software developer, mostly embedded.

00:02:19.840 --> 00:02:23.880
So day job software, embedded C++ stuff.

00:02:23.880 --> 00:02:26.040
I work with RF test equipment.

00:02:26.040 --> 00:02:33.100
I got involved with Python and pytest around the testing part of that, the system-level testing.

00:02:33.100 --> 00:02:37.020
And then I started writing about pytest and about test stuff.

00:02:37.020 --> 00:02:38.720
And then I started podcasting about it.

00:02:38.720 --> 00:02:41.400
And then I started writing books about it and all that sort of stuff.

00:02:41.400 --> 00:02:47.100
So all of this came from me and my love for Python and pytest came from my embedded world.

00:02:47.100 --> 00:02:50.400
I suspect a lot of people don't really think about it that often.

00:02:50.400 --> 00:02:55.860
But Python is great for testing things that is not just other Python code.

00:02:55.860 --> 00:02:56.200
Yeah.

00:02:56.200 --> 00:03:01.880
I mean, there's a lot of people that, for instance, use it even to test websites that are not written in Python.

00:03:01.880 --> 00:03:07.120
Just because, or not written, yeah, not written in Python or not written, like you can test Go.

00:03:07.120 --> 00:03:08.360
You can really test any website.

00:03:08.360 --> 00:03:12.560
So if you can get access to it from Python, you can test it with pytest.

00:03:12.560 --> 00:03:13.260
Right on.

00:03:13.260 --> 00:03:21.480
And we're going to see a whole bunch of cool tips and tricks and ideas about how to do that with pytest and do it better.

00:03:21.480 --> 00:03:24.440
Because as you said, you've been using it in your day job.

00:03:24.440 --> 00:03:29.280
You've also been using it in a semi-non-standard way, right?

00:03:29.280 --> 00:03:34.720
Like testing both C++ code and actual hardware, which is pretty awesome.

00:03:34.720 --> 00:03:37.420
And you've got a lot of exposure through your book and other things.

00:03:37.420 --> 00:03:38.440
So it's going to be really fun.

00:03:38.440 --> 00:03:43.580
And I also wanted to say that early on, so getting started with podcasting is nerve-wracking.

00:03:43.580 --> 00:03:44.720
It's a stressful thing.

00:03:44.720 --> 00:03:54.360
And way back when, when I was just starting out on testing code, you were very encouraging and wanted me to be successful and keep going.

00:03:54.360 --> 00:03:56.120
And that's meant a lot.

00:03:56.120 --> 00:03:56.820
So thank you.

00:03:56.940 --> 00:03:58.500
Thank you for saying that here on the show.

00:03:58.500 --> 00:03:59.320
I really appreciate it.

00:03:59.320 --> 00:04:04.560
And five, six years later, however long it's been, you're still going for sure.

00:04:04.560 --> 00:04:07.680
I mean, tomorrow we're doing another show on Python Bytes.

00:04:07.680 --> 00:04:07.980
Yeah.

00:04:07.980 --> 00:04:08.780
It's been great.

00:04:08.780 --> 00:04:09.040
Yeah.

00:04:09.040 --> 00:04:09.380
Thanks.

00:04:09.840 --> 00:04:12.180
And I guess I did want to give a shout out to Python Bytes.

00:04:12.180 --> 00:04:15.160
I don't speak about it that often on Talk Python every now and then I do.

00:04:15.160 --> 00:04:18.600
But usually I'm speaking to guests who maybe are not familiar with it.

00:04:18.600 --> 00:04:20.420
But that's the show you and I do.

00:04:20.420 --> 00:04:24.380
And so I really want to encourage people who like the show to also check that one out.

00:04:24.380 --> 00:04:27.180
Tell people what Python Bytes is real quick, Brian.

00:04:27.740 --> 00:04:32.700
Well, it's Python headlines and news and headlines delivered directly to your earbuds.

00:04:32.700 --> 00:04:33.640
That's right.

00:04:33.640 --> 00:04:40.860
But the gist of it is, is we both pick a couple topics per week and we don't even really talk about it ahead of time.

00:04:40.860 --> 00:04:44.380
We just pick a couple of Python related topics that we want to talk about.

00:04:44.380 --> 00:04:53.520
And could be like a new library, could be an old library or a tool or a blog post or something happening in the news.

00:04:53.520 --> 00:04:55.900
And then we just talk about it for a few minutes.

00:04:56.300 --> 00:04:58.300
And then the other one asks questions.

00:04:58.300 --> 00:05:00.940
And when we have guests on, they come in too.

00:05:00.940 --> 00:05:03.960
One of the things I really like about it is it's always fresh.

00:05:03.960 --> 00:05:12.240
And then also that people have said, if a topic I'm not interested in, I just wait a few minutes and there'll be something else I can listen to.

00:05:12.240 --> 00:05:13.140
So that's cool.

00:05:13.140 --> 00:05:13.580
Exactly.

00:05:13.580 --> 00:05:16.540
That's really fantastic that it's just, it's always something new.

00:05:16.540 --> 00:05:18.500
And, you know, it's great for us.

00:05:18.500 --> 00:05:20.380
We are always on top of things, always learning.

00:05:20.380 --> 00:05:21.960
But it's, I think it's really cool.

00:05:21.960 --> 00:05:25.200
Way to stay on top of what's happening in the Python space.

00:05:25.380 --> 00:05:25.480
Yeah.

00:05:25.480 --> 00:05:29.300
And for me personally, it's an excuse to stay on top of things in the Python space.

00:05:29.300 --> 00:05:30.420
So, yeah.

00:05:30.420 --> 00:05:32.780
Not just an excuse, a requirement.

00:05:32.780 --> 00:05:36.920
You've got to be on the microphone in two hours.

00:05:36.920 --> 00:05:37.960
We're going to figure it out.

00:05:37.960 --> 00:05:38.360
Yeah.

00:05:38.360 --> 00:05:38.820
Awesome.

00:05:39.660 --> 00:05:39.960
All right.

00:05:39.960 --> 00:05:39.980
All right.

00:05:40.040 --> 00:05:48.360
Now, also, I do want to point out that over on Talk Python training, you did a really great course calling Getting Started with pytest.

00:05:48.860 --> 00:05:50.600
And people can check that out.

00:05:50.600 --> 00:05:57.340
As well as for a couple years now, you've iterated on your book, Python Testing with pytest.

00:05:57.340 --> 00:05:58.800
On to the second edition.

00:05:58.800 --> 00:06:00.700
So those are two really good resources.

00:06:00.700 --> 00:06:04.340
I feel like you're probably going to be drawing from for some of these tips, right?

00:06:04.340 --> 00:06:05.160
Yeah, definitely.

00:06:05.440 --> 00:06:09.880
And the first book launched into having the ability to be able to teach more people.

00:06:09.880 --> 00:06:12.880
So I was able to teach other corporate people and individuals.

00:06:12.880 --> 00:06:24.100
And then I took that learning from, like, how to teach people how to use pytest and used that to influence the second edition, complete rewrite.

00:06:24.100 --> 00:06:28.520
And then took all of that and leveraged it into the short three.

00:06:28.520 --> 00:06:29.740
It's like three and a half hours.

00:06:29.740 --> 00:06:32.360
It's really short for the Getting Started with pytest course.

00:06:32.360 --> 00:06:34.580
I really kind of like what we've done with that.

00:06:34.580 --> 00:06:36.700
You helped out a lot with that course as well.

00:06:36.700 --> 00:06:37.560
Yeah.

00:06:38.120 --> 00:06:40.640
I feel, I look back on my college career.

00:06:40.640 --> 00:06:41.800
I don't know how you feel about this, Brian.

00:06:41.800 --> 00:06:47.200
But I look back and think, you know, a lot of times there's sort of the meme, like, that could have been an email for a meeting these days.

00:06:47.200 --> 00:06:50.500
Like, I kind of feel that way about college.

00:06:50.500 --> 00:06:53.620
Like, a lot of stuff I did in college could have been, it could have been four hours.

00:06:53.620 --> 00:06:55.920
It could have been a four-hour course that I spent a week on.

00:06:55.920 --> 00:06:58.400
But no, I spent a whole semester and, you know.

00:06:58.400 --> 00:06:59.040
Yeah, exactly.

00:06:59.040 --> 00:06:59.580
Six hours.

00:06:59.580 --> 00:07:00.180
Yeah.

00:07:00.180 --> 00:07:01.580
You feel the same way looking back?

00:07:01.580 --> 00:07:03.820
I do.

00:07:03.820 --> 00:07:07.940
And, yeah, there's a lot of stuff that I'm like, wow, that could have been, that could have been like,

00:07:07.940 --> 00:07:09.540
even a half an hour course.

00:07:09.540 --> 00:07:10.380
Yeah, exactly.

00:07:10.380 --> 00:07:12.560
So, I feel like you've condensed it down really well here.

00:07:12.560 --> 00:07:15.940
So, people can check out the course and they can check out the book as well.

00:07:15.940 --> 00:07:20.200
So, a lot of kind comments in the audience as well I'm seeing for your book.

00:07:20.200 --> 00:07:21.140
So, thank you, folks.

00:07:21.140 --> 00:07:21.560
Nice.

00:07:21.560 --> 00:07:21.880
Yeah.

00:07:22.220 --> 00:07:26.120
Well, I guess I envisioned us to kind of talk about this as a podcast.

00:07:26.120 --> 00:07:28.180
But you leveled this up a little bit here.

00:07:28.180 --> 00:07:32.140
You took this and put it together as an article so people will be able to come back to it, right?

00:07:32.140 --> 00:07:34.360
This whole idea of these tips and tricks.

00:07:34.560 --> 00:07:34.960
Yes.

00:07:34.960 --> 00:07:38.140
Because we were bouncing around ideas for what to do.

00:07:38.140 --> 00:07:44.220
And you mentioned, like, maybe some tips and tricks from the course and pull them together as an episode.

00:07:44.220 --> 00:07:45.780
And I'm like, you know what?

00:07:45.780 --> 00:07:46.800
I haven't ever done that.

00:07:46.800 --> 00:07:49.740
So, I pulled together a blog post called pytest Tips and Tricks.

00:07:49.880 --> 00:07:53.620
And it is a blog post, but it's at pythontest.com.

00:07:53.620 --> 00:07:55.780
But I do want to keep it going.

00:07:55.780 --> 00:08:01.880
So, I'll probably, some of these topics I'll probably bring into grateful articles out of them.

00:08:01.880 --> 00:08:05.240
And some of them are just as good as is things.

00:08:05.240 --> 00:08:07.300
It's a living blog post.

00:08:07.300 --> 00:08:07.720
Yes.

00:08:07.720 --> 00:08:09.360
You started it.

00:08:09.360 --> 00:08:13.980
There was a bunch of the, you started a document that had some of the stuff that you pulled out.

00:08:13.980 --> 00:08:16.240
I don't know where you got all this stuff that you started.

00:08:16.240 --> 00:08:17.180
I went through your course.

00:08:17.180 --> 00:08:18.180
Paid attention.

00:08:18.180 --> 00:08:19.080
Nice.

00:08:19.080 --> 00:08:19.520
It's good.

00:08:19.520 --> 00:08:23.740
There's a lot of, you know, for a, like a getting started sort of story.

00:08:23.740 --> 00:08:27.080
There's a lot of really good tips that I think are useful for a lot of folks.

00:08:27.080 --> 00:08:28.060
All right.

00:08:28.060 --> 00:08:29.260
Well, let's jump in.

00:08:29.260 --> 00:08:31.200
There's, you've broken into these different areas.

00:08:31.200 --> 00:08:37.000
And I mean, let's, maybe I'll kick it over to your screen for you to follow along.

00:08:37.000 --> 00:08:37.180
Yeah.

00:08:37.180 --> 00:08:38.220
But yeah, let's kick it off.

00:08:38.220 --> 00:08:43.540
I want to start out really with one of the things that it's so simple to start pytest.

00:08:43.540 --> 00:08:46.700
So they like the, and I think a lot of people get into it.

00:08:46.700 --> 00:08:48.540
So it's really simple and easy to use.

00:08:48.540 --> 00:08:56.620
If you, to start with, you can just write a file called test underscore something and then stick a function in it called test underscore something.

00:08:57.100 --> 00:08:59.240
And that pytest will run that.

00:08:59.240 --> 00:09:02.900
And if you can access, whatever you can access with that, you can get started.

00:09:02.900 --> 00:09:07.780
And I think it's a really cool feature of pytest that you can get started that easily.

00:09:08.020 --> 00:09:12.940
But also, I don't think very many people like learn too much more.

00:09:12.940 --> 00:09:16.380
They'll like, look up, they'll like, somebody will mention fixtures.

00:09:16.380 --> 00:09:18.380
So they'll look that up or parameterization.

00:09:18.380 --> 00:09:19.080
They'll look that up.

00:09:19.080 --> 00:09:20.980
Probably they'll say, how do you catch an exception?

00:09:20.980 --> 00:09:22.840
This is supposed to be an exception.

00:09:22.840 --> 00:09:24.240
Like, how do I do that?

00:09:24.240 --> 00:09:24.840
And maybe.

00:09:24.840 --> 00:09:25.220
Yeah.

00:09:25.360 --> 00:09:28.900
That part, that aspect of it confused me a little bit when I first did pytest.

00:09:28.900 --> 00:09:32.340
I'm like, well, how do I make it do pytest things?

00:09:32.340 --> 00:09:34.080
I just, it's a, it's just a file.

00:09:34.080 --> 00:09:41.080
And then I sure I can do Python asserts, but how do I do like tell pytest is supposed to be greater than seven or not?

00:09:41.180 --> 00:09:44.980
There's a lot of sort of implicit magic behind the scenes as part of that, right?

00:09:44.980 --> 00:09:45.880
There is.

00:09:45.880 --> 00:09:48.460
And I, like, for instance, just using normal asserts.

00:09:48.460 --> 00:09:54.480
Because with like unit tests, you have to do a whole bunch of extra assert methods and helper methods and stuff.

00:09:54.480 --> 00:10:01.000
And you have to derive, with unit, it's often people coming from unit tests or some other X unit style that are confused at the simplicity.

00:10:01.000 --> 00:10:05.740
Because people are used to deriving from a test class or something.

00:10:05.740 --> 00:10:09.900
And then I actually had, saw the reverse of it.

00:10:09.980 --> 00:10:13.240
I saw people that were not used to X unit style.

00:10:13.240 --> 00:10:14.660
They just wanted to write some test code.

00:10:14.660 --> 00:10:20.820
And the, this whole notion on the unit test of, of deriving from a class.

00:10:20.820 --> 00:10:30.340
I saw a whole bunch of people that I tried to teach at unit test to say, oh, well, I'm going to have to go and learn about like object oriented programming.

00:10:30.340 --> 00:10:32.180
And I'm like, oh, you don't.

00:10:32.180 --> 00:10:33.360
It's just the structure.

00:10:33.360 --> 00:10:33.980
That's all.

00:10:33.980 --> 00:10:35.800
You don't need to know how to use it.

00:10:35.800 --> 00:10:37.160
But, so that's one of the nice things.

00:10:37.300 --> 00:10:39.920
So I have on the screen just a simple test.

00:10:39.920 --> 00:10:46.560
I've also had a lot of people ask me, well, can you give me a template for what a, a default template for a unit test or a test?

00:10:46.560 --> 00:10:49.400
And I'm like, well, it's just test underscore.

00:10:49.400 --> 00:10:50.380
That's your template.

00:10:51.760 --> 00:10:53.740
I mean, there's nothing to put in it.

00:10:53.740 --> 00:11:03.740
I've said, okay, for my template, you get at the top of your test, you write getting ready, like a comment that's like getting ready for or set up or something.

00:11:04.180 --> 00:11:06.480
And then you set up all the stuff.

00:11:06.480 --> 00:11:08.520
And then you do an action in the middle.

00:11:08.520 --> 00:11:12.620
And then at the end, you assert what, if the action worked.

00:11:12.620 --> 00:11:13.740
And there you go.

00:11:13.740 --> 00:11:14.380
There's a template.

00:11:15.500 --> 00:11:18.480
There's two traditional styles of structuring this.

00:11:18.480 --> 00:11:26.460
The early testing days were the three A's, the arrange, act, and assert, which is kind of a little bit like what you got here.

00:11:26.980 --> 00:11:33.880
And then there's the given when, then, which I feel like a little more BDD world, maybe.

00:11:33.880 --> 00:11:35.060
What do you prefer?

00:11:35.060 --> 00:11:38.880
I learned given when, then with some of the early writings around BDD.

00:11:38.880 --> 00:11:40.160
And I just liked it.

00:11:40.160 --> 00:11:50.100
I liked the notion of like, oh, given some state, if I do that, when I do something, then something happens and I can test that something.

00:11:50.100 --> 00:11:52.800
Now, there wasn't any structure around it.

00:11:52.800 --> 00:11:53.580
There wasn't any code.

00:11:53.740 --> 00:11:57.040
So now BDD has these Gherkin syntaxes and stuff.

00:11:57.040 --> 00:11:59.800
And for people that that works for, awesome.

00:11:59.800 --> 00:12:00.980
It just doesn't work for me.

00:12:00.980 --> 00:12:10.700
But the notion of behavior-driven development, not the syntax, but the notion of think about the different behaviors of the system and test for it, that I love.

00:12:10.700 --> 00:12:14.500
But the given when, then, and arrange, act, and search, essentially the same thing.

00:12:14.500 --> 00:12:26.740
Do you feel like the nomenclature of BDD maybe hampered its adoption, like talking about like cucumber and Gherkin and it just, you go to your boss and say, we're working on the Gherkin, Father.

00:12:26.740 --> 00:12:28.900
And you need to do real work.

00:12:28.900 --> 00:12:40.860
I don't want to be a pessimist, but I really think what happened, my guess is that it's such a simple concept that there wasn't hardly anything to charge people for as a consultant.

00:12:41.060 --> 00:12:44.280
Yeah. Or to give speeches and conference talks about or whatever, right?

00:12:44.280 --> 00:12:50.100
But if you add like this extra Gherkin layer on top of it, now you have something you can train people about.

00:12:50.100 --> 00:12:51.840
There you go.

00:12:51.840 --> 00:12:54.340
Way to productize it.

00:12:54.340 --> 00:12:55.560
Maybe.

00:12:56.000 --> 00:12:57.180
So I think it's all good.

00:12:57.180 --> 00:12:58.180
Just don't pay for it.

00:12:58.180 --> 00:12:58.360
All right.

00:12:58.360 --> 00:13:06.200
Before we move on from this topic, I think the arrange, act, assert, or the given when then is a really nice way to think about it.

00:13:06.200 --> 00:13:13.440
But I think there's still a large set of folks who struggle to know what scale should this be.

00:13:13.440 --> 00:13:16.220
Should I do 15 asserts?

00:13:16.220 --> 00:13:17.660
I've done all the work to get them ready.

00:13:17.660 --> 00:13:19.060
Should I do one assert?

00:13:19.060 --> 00:13:20.600
If I do two, am I failing?

00:13:20.600 --> 00:13:21.820
I was supposed to do one.

00:13:21.820 --> 00:13:23.860
Now two is the wrong, you know, two is too many.

00:13:23.860 --> 00:13:28.480
How do you feel about what goes under those three comment sections?

00:13:28.480 --> 00:13:30.180
I'm glad you brought that up.

00:13:30.180 --> 00:13:37.380
Really, the one action should be like one function call or one method call or something, if you can get away with that.

00:13:37.380 --> 00:13:42.060
And the getting ready stuff, it could be a lot, especially for the first time.

00:13:42.060 --> 00:13:46.740
So one comment, dollar-driven development.

00:13:46.740 --> 00:13:47.300
That's funny.

00:13:48.340 --> 00:13:52.320
We're going to get to fixtures later, but I think it's okay if it's a whole bunch of setup.

00:13:52.320 --> 00:13:54.980
So it could be like a ton of setup that you have.

00:13:54.980 --> 00:13:58.500
Like most of your code of your function might be getting ready to test something.

00:13:58.500 --> 00:14:02.140
And especially for the first iteration of the test, that's fine, I think.

00:14:02.140 --> 00:14:09.800
And that's where it's good to have comments or a comment, even like a very visible comment block with a bunch of lines and stuff like that to separate the different parts.

00:14:10.180 --> 00:14:14.740
As far as the asserts, there's a lot of people that think, like, you have to do just one assert.

00:14:14.740 --> 00:14:17.820
And you're failing as a developer if you do more than one assert.

00:14:17.820 --> 00:14:20.100
And I think that's not true.

00:14:20.100 --> 00:14:22.880
There's problems with doing more than one assert.

00:14:22.880 --> 00:14:24.520
But am I doing an action?

00:14:24.520 --> 00:14:30.000
And if there's, like, several things I have to test about whether or not the action is right?

00:14:30.000 --> 00:14:35.820
Like, in my world with RF systems, if I'm setting up a signal and I'm measuring a signal.

00:14:35.820 --> 00:14:45.380
Now, what is the, if I test that I got the right signal at the end, I might be testing the power level and the burst width and the burst length.

00:14:45.380 --> 00:14:47.900
And I might be testing a whole bunch of stuff around it.

00:14:47.900 --> 00:14:51.060
And yes, I could separate those all into different tests.

00:14:51.060 --> 00:14:57.940
But if it's really just, it's really conceptually the same thing, I think it's fine to have multiple asserts.

00:14:57.940 --> 00:15:01.600
But if you really don't want to, there's ways to get around not doing multiple asserts.

00:15:01.600 --> 00:15:03.320
Do you use semicolons, a lot of ands?

00:15:03.320 --> 00:15:03.980
Well, you can.

00:15:03.980 --> 00:15:16.260
Like, you can stick, like, for Booleans, for instance, if you had, like, six Booleans that you were testing, you could stick those in a list and compare the list to a list of expected Booleans.

00:15:16.520 --> 00:15:20.600
Sure. Or you could, I mean, you're kind of, like, saying, like, how can we draw this out?

00:15:20.600 --> 00:15:25.560
But there are legitimate ways, like, you could use the any iterator type of thing.

00:15:25.560 --> 00:15:29.060
Or you could use the all, say, all of these things have to pass this.

00:15:29.060 --> 00:15:34.420
Or any of, if any of them fail, then that's, you know, assert not any, something like that, right?

00:15:34.420 --> 00:15:39.540
And one of the problems of not doing that is that your test stops at the first failure.

00:15:40.460 --> 00:15:48.560
So if that's a problem, and sometimes it is, you really do want to see the entire state of all of the, because it might help you debug it.

00:15:48.560 --> 00:15:54.520
Like, oh, this, the return code of a web page was, like, 400, and I expect it to be 200.

00:15:54.520 --> 00:15:58.700
But if you could see the message, you would be so much better.

00:15:58.700 --> 00:16:00.080
Yeah, if you could see more.

00:16:00.080 --> 00:16:04.780
Or if you're testing the title, and that's wrong, but you, you know, you know what I mean?

00:16:04.940 --> 00:16:07.620
If you see more than one bit of information, it helps.

00:16:07.620 --> 00:16:13.040
This portion of Talk Python To Me is brought to you by Microsoft for Startups Founders Hub.

00:16:13.040 --> 00:16:20.060
I'm here to tell you about a fantastic opportunity for startup founders, especially those of you interested in artificial intelligence.

00:16:20.060 --> 00:16:24.940
With over six figures in benefits, this program is a game changer for startups.

00:16:24.940 --> 00:16:27.660
You'll get $150,000 in Azure credits.

00:16:28.200 --> 00:16:39.860
And Founders Hub is offering a unique chance to access OpenAI's APIs, as well as a new Azure OpenAI service, so you can easily infuse generative AI capabilities into your applications.

00:16:39.860 --> 00:16:50.020
The team at Microsoft will also provide you with one-on-one technical advice to help you with architectural plans, scalability, implementation best practices, and security.

00:16:50.020 --> 00:16:55.980
Plus, you'll have access to the network of mentors plugged into the startup world, which is a huge asset when building your network.

00:16:56.360 --> 00:17:00.940
You'll get expert help with topics like products, fundraising, go-to-market, and more.

00:17:00.940 --> 00:17:02.200
And the best part?

00:17:02.200 --> 00:17:08.200
The program is open to everyone and has no funding requirements, whether you're in idea phase or further along.

00:17:08.200 --> 00:17:12.660
It just takes five minutes to apply, and you'll get massive benefits immediately.

00:17:12.660 --> 00:17:14.940
Harness the power of AI for your startup.

00:17:14.940 --> 00:17:20.580
Sign up for Microsoft for Startups Founders Hub today at talkpython.fm/foundershub.

00:17:20.580 --> 00:17:24.280
This is a no-brainer opportunity for startup founders, so don't miss out.

00:17:25.080 --> 00:17:26.080
Oh, and one more thing.

00:17:26.080 --> 00:17:34.180
Just to make a point of how powerful these offerings are, I used the same AI on offer above to completely write that ad you just heard.

00:17:34.180 --> 00:17:40.600
It's incredibly powerful, and if you have the chance to incorporate OpenAI into your startup, you'd better not miss that chance.

00:17:40.600 --> 00:17:44.440
Sign up and get access today at talkpython.fm/foundershub.

00:17:44.640 --> 00:17:49.080
Thank you to Microsoft for sponsoring the show and to OpenAI for helping write this ad.

00:17:52.080 --> 00:17:58.780
Now, I think that's also to be differentiated, as we'll get to later in some other tips, from, well, there's different cases.

00:17:58.780 --> 00:18:03.900
Like, what if I pass it a zero and I pass it a 10 or something above 100?

00:18:03.900 --> 00:18:06.520
All these different inputs, and then I want to test every...

00:18:06.520 --> 00:18:07.500
That's a different story.

00:18:07.500 --> 00:18:07.980
Oh, yeah.

00:18:08.140 --> 00:18:08.940
Right, right, right.

00:18:08.940 --> 00:18:10.220
So we'll get to that.

00:18:10.220 --> 00:18:10.500
All right.

00:18:10.500 --> 00:18:11.480
What's next?

00:18:11.480 --> 00:18:12.540
Well, I wanted to...

00:18:12.540 --> 00:18:19.080
Since we're talking about structuring a test function, I thought it'd be great to just remind people that you have a whole suite.

00:18:19.360 --> 00:18:24.580
So it's good to function, to think about how you're structuring your whole test suite.

00:18:24.580 --> 00:18:28.960
And by test suite, I just mean a directory of stuff that has tests in it.

00:18:28.960 --> 00:18:30.080
You can...

00:18:30.080 --> 00:18:35.000
Being pytest allows you to have your tests interspersed with your code, but I haven't seen that for a long time.

00:18:35.000 --> 00:18:39.920
A lot of people just have, really, a tests directory, and that's what I'm used to.

00:18:39.920 --> 00:18:42.420
Anyway, or a couple directories.

00:18:42.420 --> 00:18:48.740
Like, I often have an examples directory that I want to make sure all those examples still work, like for pytest plugins.

00:18:49.200 --> 00:18:51.820
And I also want to have the tests themselves pass.

00:18:51.820 --> 00:18:54.920
But anyway, structuring the test directory is good.

00:18:54.920 --> 00:18:55.960
I like...

00:18:55.960 --> 00:18:57.240
There's a bunch of ways to do it.

00:18:57.240 --> 00:18:59.580
I like to separate based on, like, functionality.

00:18:59.580 --> 00:19:10.440
So different, like, behaviors of a system and conceptual separations of the system into different functionality bits and separate those into directories.

00:19:10.440 --> 00:19:17.100
You can also structure it based on, like, actual software subsystems in your software.

00:19:17.720 --> 00:19:19.800
And then some people do, like, the same code structure.

00:19:19.800 --> 00:19:24.280
So they have, like, the exact same directory structure in their tests as they do in their source code.

00:19:24.280 --> 00:19:26.240
But I think just thinking...

00:19:26.240 --> 00:19:29.120
Making sure you think about it and don't just know...

00:19:29.120 --> 00:19:30.400
Don't just think there's one answer.

00:19:30.400 --> 00:19:32.520
It's really how you want to run the tests.

00:19:32.980 --> 00:19:34.640
And it helps me if I'm...

00:19:34.640 --> 00:19:37.160
Like, if I'm working on a behavior or sub...

00:19:37.160 --> 00:19:42.440
If you're normally working on a subsystem at that level, then subsystem makes sense to test.

00:19:42.440 --> 00:19:43.540
So you can just...

00:19:43.540 --> 00:19:46.620
Like, I'm working on my particular bit of code.

00:19:46.620 --> 00:19:49.660
And so I'm running those tests related to that.

00:19:49.660 --> 00:19:51.040
You know, it's...

00:19:51.040 --> 00:19:53.320
How you're running the test is how you're going to...

00:19:53.320 --> 00:19:54.420
Anyway.

00:19:54.540 --> 00:19:55.740
Depends how you think about it, right?

00:19:55.740 --> 00:19:57.480
And how it's organized in your brain.

00:19:57.480 --> 00:19:59.540
Also, there's reporting considerations.

00:19:59.540 --> 00:20:00.960
So if you have to...

00:20:00.960 --> 00:20:05.980
If you're reporting to outside people that your, like, tests are passing in different chunks,

00:20:05.980 --> 00:20:07.140
it might...

00:20:07.140 --> 00:20:10.360
The reporting might be easier if you're structured one way versus another.

00:20:10.360 --> 00:20:13.780
Structured like your software or subsystems, that's straightforward to me.

00:20:13.780 --> 00:20:15.280
Like, I've got a data access layer.

00:20:15.280 --> 00:20:17.800
So here's my test that tests the data access layer.

00:20:17.800 --> 00:20:20.440
Presumably mocking out the database, but maybe not.

00:20:20.440 --> 00:20:27.460
When you think about having it in sub-directories, you would just have maybe sub-directories of those.

00:20:27.460 --> 00:20:33.320
And I guess another you could think about is, like, really, really slow integration-style tests

00:20:33.320 --> 00:20:37.840
versus more units, for lack of a better word, tests.

00:20:37.840 --> 00:20:39.300
Right?

00:20:39.300 --> 00:20:41.480
Like, these are ones I can run now.

00:20:41.480 --> 00:20:43.620
These are ones that take an hour.

00:20:44.240 --> 00:20:45.740
Let me run the ones I could take now.

00:20:45.740 --> 00:20:47.180
Like, what's your style?

00:20:47.180 --> 00:20:48.160
So I don't...

00:20:48.160 --> 00:20:53.460
I'm not really that great at, like, throwing in unit tests because I don't really see much value in unit tests.

00:20:53.460 --> 00:20:58.940
I know that I have to have behavior and, like, tests that test the user...

00:20:58.940 --> 00:21:00.080
The end-user functionality.

00:21:00.080 --> 00:21:00.440
Yeah.

00:21:00.440 --> 00:21:06.160
At the point where that is testing all of my code, then I don't feel the need to add unit tests.

00:21:06.160 --> 00:21:10.340
But there are times where they are needed, which is great.

00:21:10.340 --> 00:21:12.300
I do think it's great to separate those.

00:21:12.580 --> 00:21:18.460
Like, so the top hierarchy of separating, like, behavior versus unit tests into one big chunk.

00:21:18.460 --> 00:21:18.760
Yeah.

00:21:18.760 --> 00:21:23.500
The main reason why I like that is because I really want my behavior tests to be...

00:21:23.500 --> 00:21:28.440
If I'm going to do coverage, I really want to know if my behavior tests are covering all of my code.

00:21:28.920 --> 00:21:36.780
It doesn't really help me much to know that my unit tests are covering all my code because that could lead to dumb tests.

00:21:36.780 --> 00:21:44.040
There might be a corner case in my code that I can write a unit test for, but I can't reach otherwise.

00:21:44.580 --> 00:21:46.920
So I think it's better just to delete the code.

00:21:46.920 --> 00:21:50.960
We might get our pytest certifications taken away, but...

00:21:50.960 --> 00:21:52.860
Or our Agile certifications taken away.

00:21:52.860 --> 00:21:53.820
I don't really have one.

00:21:53.820 --> 00:22:03.080
But I agree with you completely that some of these larger-scale tests that kind of, you know, test larger bits of code,

00:22:03.460 --> 00:22:04.460
they're really...

00:22:04.460 --> 00:22:07.840
They might not be 100% on catching all the little things you could test,

00:22:07.840 --> 00:22:12.700
but usually if I break something, many of those break.

00:22:12.700 --> 00:22:15.720
You know, it's usually enough to catch the mistakes.

00:22:15.720 --> 00:22:16.280
Yeah.

00:22:16.720 --> 00:22:22.420
They're easier to write 20 big-scale tests than 1,000 small ones.

00:22:22.420 --> 00:22:27.800
I've also never had a customer-reported issue that could be reproduced as a unit test.

00:22:27.800 --> 00:22:31.820
Avaro out there says, pytestDocs introduces...

00:22:31.820 --> 00:22:35.500
Yeah, it talks about a slow mark just for that use case, which we will...

00:22:35.500 --> 00:22:39.540
We will get to marks as well, but that's definitely a good recommendation.

00:22:39.540 --> 00:22:43.660
So maybe not actually using the directory structure for slow, but using marks.

00:22:43.660 --> 00:22:44.740
Coming back to that.

00:22:44.740 --> 00:22:46.060
But let's carry on.

00:22:46.060 --> 00:22:46.360
Yeah.

00:22:46.360 --> 00:22:49.380
That was structure in a test suite, which is excellent.

00:22:49.380 --> 00:22:54.960
Okay, so I don't know how the transition is here, but I picked...

00:22:54.960 --> 00:22:56.180
Fixtures is the next thing.

00:22:56.180 --> 00:23:00.680
I think one of the first things people need to get used to with pytest is fixtures,

00:23:00.680 --> 00:23:05.480
because it is the big brain shift from any other test framework.

00:23:05.480 --> 00:23:07.400
And they're pretty cool.

00:23:07.400 --> 00:23:11.160
And it's really just a function that's split in half.

00:23:11.160 --> 00:23:13.300
We've got a setup half and a teardown half.

00:23:13.300 --> 00:23:15.880
And they're separated by a yield keyword.

00:23:16.000 --> 00:23:18.260
That separates the setup and teardown.

00:23:19.020 --> 00:23:24.720
And pytest will call that before your test and then finish it up afterwards.

00:23:24.720 --> 00:23:25.940
That's about it.

00:23:25.940 --> 00:23:32.340
Well, I think part of the transition is you talked about the three A's, the arrange, act, and assert.

00:23:32.340 --> 00:23:39.120
The arrange part, if that's going to get reused, well, fixtures are pretty well built for that.

00:23:39.120 --> 00:23:41.900
And you could have more than one fixture in a test, right?

00:23:41.900 --> 00:23:50.320
You could say this part arranges the database and this part arranges, I don't know, some set state of the app that you're going to make them collide and see what happens.

00:23:50.320 --> 00:23:53.380
Yeah, or connections to resources and all sorts of stuff.

00:23:53.380 --> 00:23:53.680
Yeah.

00:23:53.980 --> 00:23:54.680
Or data.

00:23:54.680 --> 00:23:56.860
You can have fixtures that generate data for you.

00:23:56.860 --> 00:23:58.400
And there's many that do that.

00:23:58.400 --> 00:24:01.820
But one of the things, I guess I should have this as one of the tips.

00:24:02.540 --> 00:24:10.060
In writing a test, I recommend putting, like, especially the first test for something you write down, just write it in the test.

00:24:10.060 --> 00:24:16.320
Now, when you go to write the second one, that's a good time to go, how much of this setup is shared?

00:24:16.800 --> 00:24:23.280
And if all of the setup is shared mostly, then you can throw, maybe it makes sense to throw that in one or more fixture.

00:24:23.280 --> 00:24:29.680
I have seen people just copy it, just, like, take it and put it into a fixture and call the fixture setup.

00:24:29.680 --> 00:24:31.000
You can do that.

00:24:31.000 --> 00:24:34.340
It's a little dangerous, though, because what are you setting up?

00:24:34.340 --> 00:24:43.080
I'd rather have it be maybe multiple different ones, like setup database or, you know, configure the network or something like that.

00:24:43.080 --> 00:24:44.360
Have it be descriptive.

00:24:44.360 --> 00:24:45.460
You've got a word there.

00:24:45.600 --> 00:24:46.860
Setup just doesn't say much.

00:24:46.860 --> 00:24:49.000
So say something, I guess.

00:24:49.000 --> 00:24:55.520
Well, that goes back to the whole part of testing that is documentation of how the system works.

00:24:55.520 --> 00:24:55.880
Yeah.

00:24:55.880 --> 00:24:59.160
And part of that should be really good names for your tests.

00:24:59.160 --> 00:25:05.780
You have the advantage that no one is ever going to try to use your test code as an API.

00:25:05.780 --> 00:25:07.160
So it can be a ridiculous name.

00:25:07.160 --> 00:25:08.120
Yeah.

00:25:08.120 --> 00:25:12.220
It's like 15, 20, 30 characters because no one's going to be upset.

00:25:12.220 --> 00:25:15.100
But the test runner doesn't care that the name is long.

00:25:15.500 --> 00:25:16.180
And no one's going to use it.

00:25:16.180 --> 00:25:22.200
The person that is going to look at it is either you or somebody else when something's broken and they're stressed out.

00:25:22.640 --> 00:25:29.140
So when they're trying to get done with their day and the test doesn't work and they're looking at the code going, what are we doing here?

00:25:29.380 --> 00:25:31.760
So yeah, being verbose there is fine.

00:25:31.760 --> 00:25:38.460
In back to the RF world, let's say I'm setting up both a transmitter and a receiver before a test.

00:25:38.720 --> 00:25:46.280
I might be tempted to throw both a test.

00:25:46.280 --> 00:25:50.580
And have a test runner and have set up and have set up transmitter, set up receiver, set up measurement system.

00:25:50.580 --> 00:25:57.520
Have those separate because they're more reusable as parts later and stuff.

00:25:57.520 --> 00:25:57.740
Right.

00:25:57.960 --> 00:26:02.240
Maybe you need a receiver, not a transmitter for some particular reason somewhere.

00:26:02.240 --> 00:26:02.700
Yeah.

00:26:02.700 --> 00:26:07.420
Another thing is it's okay to not reuse fixtures and they can be in the same file.

00:26:07.700 --> 00:26:17.260
So you can, if you just have like this huge setup and a little tiny, like do something section, it's really nice to just throw that into a fixture.

00:26:17.260 --> 00:26:19.800
There's lots of reasons to throw that in the fixture.

00:26:20.380 --> 00:26:32.020
One of the great reasons is you can put asserts in the fixture and you don't want to sprinkle asserts through your test because then your test fails and you're like, did, was the setup failure or not?

00:26:32.020 --> 00:26:39.740
But pytest is awesome that if the assert happens in the fixture, it doesn't report the test as a failure or reports as an error.

00:26:39.740 --> 00:26:42.180
So fixture asserts are errors.

00:26:42.540 --> 00:26:50.520
And then, so you can separate when you're, when you're seeing the whole, all of your, your entire systems failing, but there's really only one failure and all the rest of them are errors.

00:26:50.520 --> 00:26:56.160
It might be that like, you're just not connecting to the database or something like that.

00:26:56.160 --> 00:26:56.600
So.

00:26:56.600 --> 00:26:56.940
Yeah.

00:26:56.940 --> 00:26:57.340
Interesting.

00:26:57.340 --> 00:27:03.480
Out in the audience, Jeff says, one thing I missed on my first trials pytest is the differentiation between error and fail.

00:27:03.480 --> 00:27:03.860
Yeah.

00:27:03.860 --> 00:27:06.720
Which sounds a lot like what you're talking about there.

00:27:06.720 --> 00:27:07.220
Oh yeah.

00:27:07.220 --> 00:27:11.040
And, and his comment around unit test, because unit test is a little different.

00:27:11.280 --> 00:27:15.860
Unit test makes the, I think it's the assertion error versus other exceptions.

00:27:15.860 --> 00:27:23.220
So I think that's the case in unit test that if you, if it's an, like an assertion error, it's a failure.

00:27:23.220 --> 00:27:26.940
And if it's any other exception, it's an error.

00:27:26.940 --> 00:27:29.520
pytest, completely different.

00:27:29.520 --> 00:27:34.560
Any exception, assertion or otherwise that happens within the test itself is a failure.

00:27:34.560 --> 00:27:40.760
And any exception that happens that's uncaught in a setup or in, in a fixture, that's an error.

00:27:40.920 --> 00:27:41.300
Oh, that's cool.

00:27:41.300 --> 00:27:42.800
I didn't realize that differentiation.

00:27:42.800 --> 00:27:43.160
Yeah.

00:27:43.160 --> 00:27:44.980
Also a question from Thomas.

00:27:44.980 --> 00:27:52.460
If you're just having the fixture there to provide data, is it necessary to use yield instead of just returning the value, the data?

00:27:52.460 --> 00:27:54.060
I usually just return the value.

00:27:54.060 --> 00:27:58.280
I only use yield if I have some work to do with the, for a teardown.

00:27:58.400 --> 00:28:05.520
I think also it's just kind of interesting, just the, that yield and what a clever use of generators, right?

00:28:05.520 --> 00:28:18.480
It's very clever and also very nice because in, you can, you can have variables there that are needed for the cleanup, but you don't need to return to anybody or something or save them in a global variable.

00:28:18.480 --> 00:28:20.640
They can just be in the function and that's it.

00:28:20.760 --> 00:28:26.380
So like, you know, database, connect to the database, keep a handle to the database so that you can close it at the end.

00:28:26.380 --> 00:28:28.180
It's very, very clean.

00:28:28.180 --> 00:28:28.460
Right.

00:28:28.460 --> 00:28:30.340
Or start a transaction and roll it back.

00:28:30.340 --> 00:28:32.720
So it's, whatever you did to it's unaffected.

00:28:32.720 --> 00:28:32.920
Yeah.

00:28:33.060 --> 00:28:33.580
Oh yeah.

00:28:33.580 --> 00:28:34.140
All right.

00:28:34.140 --> 00:28:34.700
What's next?

00:28:34.700 --> 00:28:35.260
That was fixtures.

00:28:35.260 --> 00:28:35.900
Well.

00:28:35.900 --> 00:28:37.260
Or unless you got more fixture.

00:28:37.260 --> 00:28:42.620
You made this comment and I'm like, I've been doing pytest so long that I forgot about it.

00:28:42.620 --> 00:28:48.500
Old time pytest stuff had to add finalizer before we kind of settled on the yield system.

00:28:48.500 --> 00:28:50.800
I would say avoid add finalizer.

00:28:50.800 --> 00:28:52.260
It's just going to confuse people.

00:28:52.260 --> 00:28:53.600
So don't do that.

00:28:53.600 --> 00:28:55.420
Also you can nest them.

00:28:55.420 --> 00:28:58.620
So leveraging, using scopes.

00:28:58.940 --> 00:29:08.020
So you can have like, connect to a database by a session scope and then cleaning up the database as a function scope thing so that you're, you know, save time.

00:29:08.020 --> 00:29:14.260
And then ConfTest files, if you want to share them between just, between tests, you can throw the fixture in a ConfTest file.

00:29:14.260 --> 00:29:14.460
Yeah.

00:29:14.460 --> 00:29:21.080
It's not necessarily obvious that if I put a fixture and then I have a bunch of tests below in the same file, it's obvious I can just use it.

00:29:21.080 --> 00:29:24.580
But then if I go to another one, I could be like, well, what about that?

00:29:24.580 --> 00:29:26.460
Those over there, I want to share them across these files.

00:29:26.460 --> 00:29:28.800
So this ConfTest, this is what that's about, right?

00:29:28.900 --> 00:29:29.180
Yeah.

00:29:29.180 --> 00:29:35.020
And a lot of people think you can, or their first attempt is to throw them all into a different module and import the module.

00:29:35.020 --> 00:29:35.840
You can't do that.

00:29:35.840 --> 00:29:36.480
Don't do that.

00:29:36.480 --> 00:29:39.540
And you never want to import the ConfTest file.

00:29:39.540 --> 00:29:40.940
It's not an importable thing.

00:29:40.940 --> 00:29:42.820
It's just, pytest deals with it.

00:29:42.820 --> 00:29:43.000
Yeah.

00:29:43.000 --> 00:29:43.880
Indeed.

00:29:43.880 --> 00:29:44.260
Okay.

00:29:44.260 --> 00:29:48.020
So on fixtures, there's a bunch of built-in ones that are super cool.

00:29:48.300 --> 00:29:57.860
And in the long time, like if you've used things, pytest for a while, we used to have, and we still do, a couple of fixtures called tempter and tempter factory.

00:29:57.860 --> 00:30:00.340
But there's newer ones.

00:30:00.340 --> 00:30:05.040
They've been in for a while, but some people don't know about them, called temp path and temp path factory.

00:30:05.300 --> 00:30:10.080
And they use pathlib path objects, which are awesome.

00:30:10.080 --> 00:30:11.660
So use that if you can.

00:30:11.660 --> 00:30:15.380
It took me a while to love the path class, but I love it now.

00:30:15.380 --> 00:30:16.040
It's really nice.

00:30:16.180 --> 00:30:22.760
I mean, the old one was like just this pi.path.local object, which was very undocumented.

00:30:22.760 --> 00:30:24.860
So I don't recommend it.

00:30:24.860 --> 00:30:27.660
The temp files within pytest, so it's great.

00:30:27.660 --> 00:30:33.340
If you're generating a file or whatever, or you want to save some CSV stuff, it's good.

00:30:33.340 --> 00:30:35.780
It sticks around too, which is kind of cool.

00:30:35.780 --> 00:30:37.120
It sticks around for a little while.

00:30:37.120 --> 00:30:42.160
So you can interrogate your temp files after a test run is done.

00:30:42.660 --> 00:30:47.980
You can look at the, and if you're trying to debug the failures, those temp files will still be there.

00:30:47.980 --> 00:30:49.820
They're not cleaned up directly after.

00:30:49.820 --> 00:30:51.480
They're cleaned up in a future test run.

00:30:51.480 --> 00:30:52.320
Oh, that's interesting.

00:30:52.320 --> 00:30:52.720
Yeah.

00:30:52.720 --> 00:30:56.280
They're like a N minus one or N plus one lifespan or something.

00:30:56.280 --> 00:30:56.960
Yeah.

00:30:56.960 --> 00:31:00.240
There's a bunch of built-in fixtures.

00:31:00.240 --> 00:31:01.900
There's only a handful I use very much.

00:31:01.900 --> 00:31:03.820
I use temp path and temp path.

00:31:03.820 --> 00:31:05.760
So there's temp path and temp path factory.

00:31:05.760 --> 00:31:12.100
The factory versions are used if you, because temp path like is a per test run.

00:31:12.500 --> 00:31:15.000
Like every function, it gets generated.

00:31:15.000 --> 00:31:18.980
So you can't use it if you've got a session scope fixture.

00:31:18.980 --> 00:31:22.460
So the factory ones are session scoped.

00:31:22.460 --> 00:31:29.080
So if you want to use it, anything larger than function scope, use the factory to generate a temp directory.

00:31:29.080 --> 00:31:30.040
So use that.

00:31:30.040 --> 00:31:39.120
Capsys, a lot of, if you want to look at, if you're checking your output, Capsys is good for checking the output of something, the standard out or standard error.

00:31:39.120 --> 00:31:42.080
Because pytest captures and eats some of it, right?

00:31:42.080 --> 00:31:42.280
Yeah.

00:31:42.280 --> 00:31:50.300
By default, pytest will always capture the errors and output and only print it out for, it prints it out for failing tests.

00:31:50.300 --> 00:31:53.680
It'll say, oh, here's the output for the test and it failed.

00:31:53.680 --> 00:31:56.240
So that's helpful, but it's normally gone.

00:31:56.240 --> 00:32:02.940
And if you want to, so there's, you can use Capsys also just to disable that for temporary bits of your code.

00:32:02.940 --> 00:32:06.180
If you want to throw a log out there all the time or something, you can use that.

00:32:06.180 --> 00:32:09.300
So, but I usually use it just to look at the output.

00:32:09.300 --> 00:32:14.460
So especially with pytest plugins, I want to see if I've modified the output, I want to see the output.

00:32:14.460 --> 00:32:16.420
So I can use that to grab that.

00:32:16.420 --> 00:32:18.340
So there's monkey patch as well.

00:32:18.340 --> 00:32:26.720
You can use this for all sorts of stuff, but I usually, if I'm doing fancy things, I usually like actually use just mock.

00:32:26.840 --> 00:32:31.900
But for things like changing your environment, it's great.

00:32:31.900 --> 00:32:37.560
So you can change environmental variables or quick patches, it works great.

00:32:37.560 --> 00:32:42.680
The neat things about these, other than just doing it yourself, is that it cleans up afterward.

00:32:42.680 --> 00:32:51.460
If you patch like a system with like a dummy bit of system or something, after your test is done, it goes back to what it was before.

00:32:51.460 --> 00:32:52.440
So that's pretty cool.

00:32:52.540 --> 00:33:01.320
Yeah, because otherwise you can end up with a problem of the order of operations is left in this half patched state where if something else depends upon it, right?

00:33:01.320 --> 00:33:05.220
pytest config is used for grabbing command line flags a lot.

00:33:05.220 --> 00:33:06.680
That's mostly what I use it for.

00:33:06.680 --> 00:33:13.700
And then the only thing I usually use request for anymore is if from a fixture, I want to know what the test name was.

00:33:13.700 --> 00:33:17.100
I can use, you can use request node name to grab the test name.

00:33:17.580 --> 00:33:23.440
I don't think I use it for anything else anymore, except for parameters to grab the parameter values.

00:33:23.440 --> 00:33:24.220
Yeah.

00:33:24.220 --> 00:33:24.640
Anyway.

00:33:24.640 --> 00:33:25.080
Nice.

00:33:25.080 --> 00:33:25.880
All right.

00:33:25.880 --> 00:33:28.600
I pointed out Mark or the audience.

00:33:28.600 --> 00:33:29.620
They pointed out Mark.

00:33:29.620 --> 00:33:31.340
And here we are.

00:33:31.340 --> 00:33:31.720
Mark.

00:33:31.720 --> 00:33:32.300
Markers.

00:33:32.300 --> 00:33:33.100
Markers.

00:33:33.100 --> 00:33:34.980
pytest.mark.whatever.

00:33:34.980 --> 00:33:36.380
You can use custom markers.

00:33:36.380 --> 00:33:37.240
Markers are great.

00:33:37.240 --> 00:33:38.100
But don't.

00:33:38.100 --> 00:33:40.500
When I learned about markers, I put them everywhere.

00:33:40.700 --> 00:33:44.060
And then I'm like, oh, that's just sort of, it ends up being messy.

00:33:44.060 --> 00:33:45.780
So it can be.

00:33:45.780 --> 00:33:55.500
But it's a great way to, you just, it's like just adding a tag to a test or a test case or something to say that you can use it to run it.

00:33:55.500 --> 00:33:59.540
So you can say, I want to run all the tests that are marked like user interface.

00:33:59.540 --> 00:34:01.140
You can run all the UI tests.

00:34:01.140 --> 00:34:03.320
If you didn't separate them by directory.

00:34:04.000 --> 00:34:10.460
Or like somebody said, you can mark all the slow ones and only run the, only run the slow ones or avoid running the slow ones.

00:34:10.460 --> 00:34:12.860
You can do a not in your execution.

00:34:12.860 --> 00:34:15.100
You can say, run the things not marked slow.

00:34:15.100 --> 00:34:15.560
Yeah.

00:34:15.560 --> 00:34:17.820
You just say, well, it's dash M.

00:34:17.820 --> 00:34:18.900
I should throw that in there.

00:34:18.900 --> 00:34:21.960
Dash M, like not slow.

00:34:21.960 --> 00:34:22.720
Got it.

00:34:22.720 --> 00:34:23.600
But it's two words.

00:34:23.600 --> 00:34:27.120
So you have to put it in quotes, like dash M quote, not slow.

00:34:27.120 --> 00:34:27.860
It'll work.

00:34:27.860 --> 00:34:33.220
And you can mark files with a magic word, magic, magic keyword called pytest Mark.

00:34:33.220 --> 00:34:34.620
With no spaces.

00:34:34.620 --> 00:34:37.160
If you throw that in your file, pytest will see it.

00:34:37.160 --> 00:34:38.760
There's a bunch of built-in ones.

00:34:38.760 --> 00:34:43.400
Mark's the ones that I think are probably most common are skip, skip if, and x fail.

00:34:43.400 --> 00:34:45.160
X is you expect it to fail.

00:34:45.160 --> 00:34:47.600
Like, I know it's failing, but that's okay.

00:34:47.600 --> 00:34:47.920
Yeah.

00:34:47.920 --> 00:34:52.100
So a lot of people might think, why would you ever expect a test to fail?

00:34:52.100 --> 00:34:52.940
You should just fix it.

00:34:52.940 --> 00:34:53.560
No, I know.

00:34:53.560 --> 00:34:54.340
No, no, no, no, no.

00:34:54.340 --> 00:34:56.220
It's Friday, three o'clock.

00:34:56.220 --> 00:34:57.660
You got plans.

00:34:57.660 --> 00:34:58.140
What?

00:34:58.140 --> 00:34:59.080
You got to fix the build.

00:34:59.080 --> 00:34:59.760
Yeah.

00:34:59.760 --> 00:35:00.820
No, seriously though.

00:35:00.820 --> 00:35:01.820
Why would you use this?

00:35:01.820 --> 00:35:02.560
Believe it or not.

00:35:02.680 --> 00:35:04.880
Some people are not responsible for all the code.

00:35:04.880 --> 00:35:05.300
Yeah.

00:35:05.300 --> 00:35:05.980
There's teams.

00:35:05.980 --> 00:35:12.040
So one great reason to use x fail is to submit a defect.

00:35:12.040 --> 00:35:16.100
And then you say, I know this test is failing because of this issue.

00:35:16.100 --> 00:35:17.120
You've submitted a defect.

00:35:17.120 --> 00:35:23.080
And then you throw the defect number in the x fail reason string and move on.

00:35:23.080 --> 00:35:25.780
Now your build is still working.

00:35:25.780 --> 00:35:28.660
And there's, but just be careful.

00:35:28.660 --> 00:35:30.320
I mean, x fails is a big thing.

00:35:30.460 --> 00:35:35.200
So I think as, as whether or not use x fail, it needs to be like your entire software team

00:35:35.200 --> 00:35:41.040
needs to understand it and agree on the process because there needs to be a process around how

00:35:41.040 --> 00:35:45.140
to utilize x fail because it can just sort of hide failures.

00:35:45.140 --> 00:35:46.340
And you don't want that.

00:35:46.340 --> 00:35:46.580
Yeah.

00:35:46.580 --> 00:35:49.380
That's one of the reasons why I really like x fail strict.

00:35:49.380 --> 00:36:00.200
It makes it so that all, it makes it so that like, if they pass, you, if you market as a fail and it passes, it'll just pass.

00:36:00.200 --> 00:36:06.740
But it, we want it to, well, it x, it x passes expected, which means I expected it to fail, but it passed.

00:36:06.740 --> 00:36:16.640
But I like to just have it be a failure, which, so that somebody can look at it and go, oh, yeah, we need to take these out of the test and close the defect or something like that.

00:36:18.940 --> 00:36:21.820
This portion of Talk Python to Me is brought to you by Brilliant.org.

00:36:21.820 --> 00:36:24.820
You're a curious person who loves to learn about technology.

00:36:24.820 --> 00:36:26.740
I know because you're listening to my show.

00:36:26.740 --> 00:36:31.500
That's why you would also be interested in this episode's sponsor, Brilliant.org.

00:36:31.500 --> 00:36:34.620
Brilliant.org is entertaining, engaging, and effective.

00:36:34.860 --> 00:36:50.400
If you're like me and feel that binging yet another sitcom series is kind of missing out on life, then how about spending 30 minutes a day getting better at programming or deepening your knowledge and foundations of topics you've always wanted to learn better, like chemistry or biology over on Brilliant.

00:36:50.400 --> 00:36:59.840
Brilliant has thousands of lessons, from foundational and advanced math to data science, algorithms, neural networks, and more, with new lessons added monthly.

00:37:00.480 --> 00:37:05.860
When you sign up for a free trial, they ask a couple of questions about what you're interested in, as well as your background knowledge.

00:37:05.860 --> 00:37:09.740
Then you're presented with a cool learning path to get you started right where you should be.

00:37:09.740 --> 00:37:12.820
Personally, I'm going back to some science foundations.

00:37:12.820 --> 00:37:16.220
I love chemistry and physics, but haven't touched them for 20 years.

00:37:16.220 --> 00:37:24.240
So I'm looking forward to playing with PV equals NRT, you know, the ideal gas law, and all the other foundations of our world.

00:37:24.240 --> 00:37:30.180
With Brilliant, you'll get hands-on on a whole universe of concepts in math, science, computer science.

00:37:30.180 --> 00:37:33.760
And solve fun problems while growing your critical thinking skills.

00:37:33.760 --> 00:37:36.380
Of course, you could just visit brilliant.org directly.

00:37:36.380 --> 00:37:38.340
Its URL is right there in the name, isn't it?

00:37:38.340 --> 00:37:41.140
But please use our link because you'll get something extra.

00:37:41.140 --> 00:37:44.140
20% off an annual premium subscription.

00:37:44.140 --> 00:37:49.380
So sign up today at talkpython.fm/brilliant and start a 7-day free trial.

00:37:49.380 --> 00:37:51.680
That's talkpython.fm/brilliant.

00:37:51.680 --> 00:37:53.640
The link is in your podcast player's show notes.

00:37:53.640 --> 00:37:56.060
Thank you to brilliant.org for supporting the show.

00:37:58.060 --> 00:38:04.700
The other thing that people should be aware of that I don't think a lot of people know is a --run x fail flag.

00:38:04.700 --> 00:38:09.460
And this is especially useful like to just say, okay, screw it.

00:38:09.460 --> 00:38:13.300
Ignore all the x fails and just run as if I haven't marked them x fail.

00:38:13.300 --> 00:38:15.360
Because maybe you're fixed and you don't know.

00:38:15.360 --> 00:38:17.040
Maybe they didn't take away the x fail.

00:38:17.280 --> 00:38:19.020
Yeah, but they might.

00:38:19.020 --> 00:38:22.900
Or you just want to make you like in a CI system, for instance.

00:38:22.900 --> 00:38:30.520
Like if you're running, most CI systems don't understand all of the different variations of like outputs from pytest.

00:38:30.520 --> 00:38:35.220
Like they don't understand x passes, x fails and skips and all that sort of stuff.

00:38:35.860 --> 00:38:42.000
So in a lot of times then x fails and x passes just show up as just passes and fails.

00:38:42.000 --> 00:38:45.160
So you don't want just to pass everything.

00:38:45.160 --> 00:38:45.880
So run x fail.

00:38:45.880 --> 00:38:49.460
If you just want to say, I want to just run everything.

00:38:49.460 --> 00:38:51.640
And if there's any failure, I want to see it.

00:38:51.640 --> 00:38:53.340
So that's good.

00:38:53.340 --> 00:38:55.960
But anyway, just be careful with x fails.

00:38:55.960 --> 00:38:56.680
I've seen it.

00:38:56.680 --> 00:38:58.300
I've seen it confuse people.

00:38:58.300 --> 00:38:59.020
Yeah, it makes sense.

00:38:59.940 --> 00:39:02.320
What's the story with skip and skip if?

00:39:02.320 --> 00:39:03.960
I guess it's the same.

00:39:03.960 --> 00:39:05.680
I mean, like, why are you skipping something?

00:39:05.680 --> 00:39:07.300
I guess you have to be careful.

00:39:07.300 --> 00:39:09.840
So skip is just skip this test.

00:39:09.840 --> 00:39:11.140
It doesn't run it at all.

00:39:11.140 --> 00:39:15.540
And skip if you can put logic in there to say like, well, if it's on.

00:39:15.540 --> 00:39:28.180
And so a great example of skip if is if you've got operating specific, like maybe if you have operating specific chunks of tests or chunks of code or something.

00:39:28.180 --> 00:39:30.720
Skip if platform equals Darwin.

00:39:30.720 --> 00:39:31.260
Yeah.

00:39:31.260 --> 00:39:32.420
Skip the macOS ones.

00:39:32.420 --> 00:39:33.160
Something like that.

00:39:33.160 --> 00:39:33.880
You got no chance.

00:39:33.880 --> 00:39:34.200
Yeah.

00:39:34.200 --> 00:39:43.980
Or if we're talking coverage in unit test again, for example, maybe you've got functionality that depends on Python 312.

00:39:43.980 --> 00:39:47.600
But you also want to test on Python 3.7.

00:39:47.600 --> 00:39:51.020
And so you know some code is only going to run.

00:39:51.020 --> 00:39:54.480
You're running different code for the same functionality on two Pythons.

00:39:54.820 --> 00:40:03.640
You might want to like have two tests and one of them gets run on Python 3.11 and one of them or 12 and one of them gets run on all of the other versions.

00:40:03.640 --> 00:40:06.520
And you can use skip if to to gate those.

00:40:06.520 --> 00:40:07.000
Interesting.

00:40:07.000 --> 00:40:07.300
Yeah.

00:40:07.300 --> 00:40:07.540
Okay.

00:40:07.540 --> 00:40:08.480
Yeah, that's really cool.

00:40:08.480 --> 00:40:16.600
Hey, before we move on, we've got an interesting question or idea out here from Jeff in the audience, who also is a hardware tester.

00:40:17.400 --> 00:40:21.380
So I like to distribute fixtures in some way to people as a Python package.

00:40:21.380 --> 00:40:22.620
That's a great idea.

00:40:22.620 --> 00:40:23.320
Yeah.

00:40:23.320 --> 00:40:24.480
What do you think about that?

00:40:24.480 --> 00:40:25.640
I think that's a plugin.

00:40:25.640 --> 00:40:26.180
Okay.

00:40:26.180 --> 00:40:27.700
Let's jump to plugins then.

00:40:27.700 --> 00:40:28.560
Let's do it.

00:40:28.560 --> 00:40:29.160
Did I have a plugin section?

00:40:29.160 --> 00:40:30.240
I didn't.

00:40:30.240 --> 00:40:31.400
Maybe I don't.

00:40:31.400 --> 00:40:32.240
Hmm.

00:40:32.240 --> 00:40:33.720
Let's go to the top.

00:40:33.720 --> 00:40:35.160
Notes for a new section?

00:40:35.160 --> 00:40:35.600
Yeah.

00:40:35.600 --> 00:40:36.500
Plugins.

00:40:36.580 --> 00:40:36.700
Totally.

00:40:36.700 --> 00:40:38.300
It's a living blog post.

00:40:38.300 --> 00:40:38.720
Yeah.

00:40:38.720 --> 00:40:40.080
Yes.

00:40:40.080 --> 00:40:43.140
I think it's important to be able to package them as plugins.

00:40:43.140 --> 00:40:47.420
And we don't cover, plugins are kind of a little advanced thing.

00:40:47.420 --> 00:40:54.800
I don't think we cover, we cover using plugins in the course, but in three and a half hours, I don't cover how to write a plugin.

00:40:54.800 --> 00:40:55.200
Yeah.

00:40:55.200 --> 00:41:03.820
There's a ton of plugins on, yeah, you've got the pytest plugin list on pytest, but also you can search for, they're usually pytest dash something.

00:41:04.020 --> 00:41:07.320
So you can search for that on PyPI as well and see a bunch of plugins.

00:41:07.320 --> 00:41:07.680
Yep.

00:41:07.680 --> 00:41:09.340
You even have some out there for yourself, right?

00:41:09.340 --> 00:41:10.540
Quite a few, actually.

00:41:10.540 --> 00:41:12.200
I mean, I'm scrolling and scrolling.

00:41:12.200 --> 00:41:14.040
I'm still in the dash A.

00:41:14.040 --> 00:41:17.440
There's a lot of content there.

00:41:17.440 --> 00:41:25.620
So I guess one tip is people should just go scroll through that list and go, look at all these things they could just fixture into their code, right?

00:41:25.620 --> 00:41:36.520
Or one option is to go to PyCascades this year and watch my talk because I'm giving a talk at PyCascades for about packaging pytest fixtures.

00:41:36.520 --> 00:41:37.080
That's cool.

00:41:37.080 --> 00:41:37.920
When is that?

00:41:37.920 --> 00:41:38.600
It's in March.

00:41:38.600 --> 00:41:39.640
I should look it up.

00:41:39.640 --> 00:41:39.920
Nice.

00:41:39.920 --> 00:41:40.400
Real time.

00:41:40.400 --> 00:41:40.580
Yeah.

00:41:40.580 --> 00:41:45.780
I'm pretty sure those videos will be online afterwards if people are not at the conference in Vancouver.

00:41:45.780 --> 00:41:47.020
Although Vancouver is lovely.

00:41:47.020 --> 00:41:48.420
Oh yeah, they'll be online.

00:41:48.580 --> 00:41:50.620
And I'm also going to publish the slides.

00:41:50.620 --> 00:41:52.080
I just got the slides done.

00:41:52.080 --> 00:41:54.800
So it's March 18th through the 20th.

00:41:54.800 --> 00:41:56.800
And I think mine's on the 19th.

00:41:56.800 --> 00:41:57.080
All right.

00:41:57.080 --> 00:41:57.340
Nice.

00:41:57.340 --> 00:41:57.840
So anyway.

00:41:57.840 --> 00:41:59.580
What section want to do next?

00:41:59.580 --> 00:42:00.720
We got a little bit more time.

00:42:00.720 --> 00:42:02.720
So we talked about markers and fixtures.

00:42:02.720 --> 00:42:07.240
Parameterization is definitely something I think people should learn about.

00:42:07.240 --> 00:42:14.220
And because, especially if you, I've seen a lot of test writing, utilize copy, paste, modify.

00:42:14.760 --> 00:42:17.680
And it should be a red flag for all software engineers.

00:42:17.680 --> 00:42:23.140
But for some reason, it happens a lot in test code of copy, paste, modify.

00:42:23.140 --> 00:42:26.580
You've got a bunch of tests that are kind of the same.

00:42:26.580 --> 00:42:31.300
And you just take one that's similar to what you need and change it.

00:42:31.300 --> 00:42:34.340
And you end up with a lot of test code that way.

00:42:34.340 --> 00:42:38.060
And one way to fix it is to use parameterization.

00:42:38.060 --> 00:42:38.320
Yeah.

00:42:38.320 --> 00:42:43.140
Anytime you've got a lot of, you're like, this is happening over and over again in my code.

00:42:43.700 --> 00:42:45.100
It should be, it's a code smell, right?

00:42:45.100 --> 00:42:46.420
You should know there's some refactoring.

00:42:46.420 --> 00:42:51.760
Or alternatively, Brian, you could get this fancy new Stack Overflow keyboard.

00:42:51.760 --> 00:42:54.580
That's awesome.

00:42:54.580 --> 00:42:56.280
Which has three keys.

00:42:56.280 --> 00:42:57.700
Yes, exactly.

00:42:57.700 --> 00:42:58.240
Go ahead.

00:42:58.240 --> 00:42:58.840
Three keys.

00:42:58.840 --> 00:43:00.500
One of them goes to Stack Overflow.

00:43:00.500 --> 00:43:02.480
One of them is copy.

00:43:02.480 --> 00:43:04.740
And one of them is C and V.

00:43:04.740 --> 00:43:05.700
So copy and paste.

00:43:05.700 --> 00:43:08.660
So that's awesome.

00:43:08.660 --> 00:43:10.300
Power of copy and paste, indeed.

00:43:11.100 --> 00:43:15.640
I assume you have to have a mouse connected to, you know, select the stuff.

00:43:15.640 --> 00:43:16.320
Yeah, probably.

00:43:16.320 --> 00:43:23.920
It really does happen a lot of people like copy another test, change what they need, and then run it.

00:43:23.920 --> 00:43:26.000
Now, there's a bunch of problems with that.

00:43:26.000 --> 00:43:29.700
One is people sometimes forget to change the test name.

00:43:29.700 --> 00:43:30.380
Oh, yeah.

00:43:30.560 --> 00:43:37.720
And then the test, you can have two functions with the same name in Python, and it just like, it just like runs the second one.

00:43:37.720 --> 00:43:41.460
So that's one of the reasons why I'd like to also run coverage.

00:43:41.460 --> 00:43:44.060
If I'm going to run coverage, I want coverage on my tests, too.

00:43:44.060 --> 00:43:47.600
So I have to make sure I have 100% test code coverage.

00:43:47.600 --> 00:43:50.800
So what happens when you run into that scenario in pytest?

00:43:50.800 --> 00:43:55.040
Does it just pretend the first one wasn't there and it got overwritten before it got to it?

00:43:55.040 --> 00:43:55.220
Yeah.

00:43:55.220 --> 00:44:01.480
Just like in any other Python module, if you write the function name again, and even if you have different parameters.

00:44:01.480 --> 00:44:02.940
It's so easy to do.

00:44:02.940 --> 00:44:03.560
It doesn't care.

00:44:03.560 --> 00:44:04.340
Python doesn't care.

00:44:04.340 --> 00:44:07.240
So different web frameworks will handle this differently.

00:44:07.560 --> 00:44:11.960
Flask will throw an error and say, you've tried to use this function before.

00:44:11.960 --> 00:44:16.440
No, when you do an app.get or something on it with the decorator.

00:44:16.440 --> 00:44:16.660
Yeah.

00:44:16.660 --> 00:44:20.180
But for example, Pyramid, which I've used a lot, doesn't.

00:44:20.180 --> 00:44:21.060
It just erases it.

00:44:21.060 --> 00:44:24.120
So you just end up getting like 404s for whatever was there before.

00:44:24.120 --> 00:44:26.160
You're like, well, it was just working.

00:44:26.160 --> 00:44:27.080
Where did it go?

00:44:27.080 --> 00:44:30.140
I didn't even touch that part of the program, and it's just gone.

00:44:30.140 --> 00:44:32.120
It's like, I don't understand, you know?

00:44:32.120 --> 00:44:37.840
And I can only see that it's even less obvious with pytest.

00:44:37.840 --> 00:44:42.380
Like that, how much would you notice when it goes dot, dot, dot, dot, dot, that like it

00:44:42.380 --> 00:44:44.160
didn't increment a dot when you added a test?

00:44:44.160 --> 00:44:44.900
Might not.

00:44:44.900 --> 00:44:46.260
No.

00:44:46.260 --> 00:44:48.860
Well, yeah, it's dangerous.

00:44:48.860 --> 00:44:50.900
But OK, so you get around that.

00:44:50.900 --> 00:44:53.520
It's the other thing of just like thinking about it.

00:44:53.520 --> 00:45:00.380
So if I write a test to begin with, and I think, well, I've set up like, OK, so if I

00:45:00.380 --> 00:45:04.100
go to this web, really, I'm just making like a web page thing.

00:45:04.100 --> 00:45:06.540
I just want to make sure this page gets a 200.

00:45:06.540 --> 00:45:07.600
Is it 200, right?

00:45:07.600 --> 00:45:08.480
Yeah.

00:45:08.480 --> 00:45:12.720
And I want to make sure that gets 200 in the titles right or something like that.

00:45:12.720 --> 00:45:14.820
Now, I might have just a list.

00:45:14.820 --> 00:45:19.700
I mean, that would be an easy test just to make sure all my pages, normal pages are alive,

00:45:19.700 --> 00:45:21.900
is to just go through and test all those.

00:45:22.320 --> 00:45:26.000
Now, I could either just have a list of all the different pages I want to go to and

00:45:26.000 --> 00:45:27.100
just ping through those.

00:45:27.100 --> 00:45:29.220
That could be a loop within my test.

00:45:29.220 --> 00:45:34.260
But that's a loop within a test at the assert at the bottom that doesn't count as the assert

00:45:34.260 --> 00:45:36.820
at the bottom because you're asserting through the whole thing.

00:45:36.820 --> 00:45:42.260
May as well just make that a parameterization and go through all of your all the different

00:45:42.260 --> 00:45:43.260
pages you want to hit.

00:45:43.260 --> 00:45:46.380
And for each of those pages, make sure it's a 200.

00:45:46.380 --> 00:45:51.700
And then you could also like have the title in the parameterization to say, this is the page.

00:45:51.780 --> 00:45:52.480
This is the title.

00:45:52.480 --> 00:45:55.360
Now, for each of those, go through and test it.

00:45:55.360 --> 00:45:56.960
And those are different tests.

00:45:56.960 --> 00:46:03.360
And it's going to be almost as easy to write one test as it is to write now a bunch of test

00:46:03.360 --> 00:46:05.300
cases with parameterization.

00:46:05.300 --> 00:46:09.060
But pytest has a whole bunch of cool parameterization tricks.

00:46:09.060 --> 00:46:11.340
You can do function parameterization.

00:46:11.620 --> 00:46:12.960
You can parameterize a fixture.

00:46:12.960 --> 00:46:18.400
You can even use pytest generate tests to do some fancy parameterization.

00:46:18.400 --> 00:46:21.860
For the most part, if you're new to it, stick with function parameterization.

00:46:21.860 --> 00:46:23.040
It's powerful.

00:46:23.040 --> 00:46:24.680
And hopefully that's all you need.

00:46:24.680 --> 00:46:24.960
Yeah.

00:46:24.960 --> 00:46:26.920
If you've got all these different cases to test.

00:46:26.920 --> 00:46:32.520
I mean, the value of testing often is to give it the good value and see the good value

00:46:32.520 --> 00:46:33.080
comes out.

00:46:33.080 --> 00:46:33.400
Yeah.

00:46:33.400 --> 00:46:33.760
That's true.

00:46:33.760 --> 00:46:38.260
But it's also really valuable to give it all those weird edge cases where you want to

00:46:38.260 --> 00:46:38.820
check boundaries.

00:46:38.820 --> 00:46:42.840
Like if I give it one less than it should have, it should tell me that's an error instead of

00:46:42.840 --> 00:46:43.180
crash.

00:46:43.180 --> 00:46:47.600
If I give it something, you know, like just all the little weird situations.

00:46:47.600 --> 00:46:53.720
So testing all the failing cases and having those scenarios as a parameterized story is

00:46:53.720 --> 00:46:54.040
nice.

00:46:54.040 --> 00:46:59.280
And one of the comments, which I have seen before and I kind of agree with, is that my coat

00:46:59.280 --> 00:47:00.720
is dry and my tests are wet.

00:47:00.720 --> 00:47:09.800
What that means is because dry testing, people can go overboard with dry to the point where

00:47:09.800 --> 00:47:11.560
you can't understand what's going on.

00:47:12.000 --> 00:47:18.700
And so for, especially for tests, you want tests to tell a story of I'm doing this thing

00:47:18.700 --> 00:47:21.320
and I did this other action.

00:47:21.320 --> 00:47:24.200
And then now I can tell that it works because of this.

00:47:24.200 --> 00:47:27.920
And if you break that story up too much, then you don't know.

00:47:27.920 --> 00:47:30.320
You don't know what the story is.

00:47:30.320 --> 00:47:35.400
If you hide your, all of your asserts in a helper function that just says like check stuff,

00:47:35.400 --> 00:47:39.140
you don't know what you're checking and it hides it too much.

00:47:39.140 --> 00:47:44.340
If you're going to do that, make sure that you like name it something that's meaningful.

00:47:44.340 --> 00:47:48.200
And I like to have all of my assert helpers be start with assert.

00:47:48.200 --> 00:47:53.580
So like I could say assert 200 and correct title, for instance, you could do that.

00:47:53.580 --> 00:47:54.300
That'd be fine.

00:47:54.300 --> 00:47:59.600
But one of the reasons for parameterization isn't just to type less.

00:47:59.600 --> 00:48:01.860
It's to be focused on what's failing.

00:48:01.860 --> 00:48:06.640
So let's say in that case I had before my test failed with the loop.

00:48:06.740 --> 00:48:12.420
And I could say, well, okay, so one page on my website isn't working.

00:48:12.420 --> 00:48:13.320
Which one?

00:48:13.320 --> 00:48:14.420
I have to go figure that out.

00:48:14.420 --> 00:48:15.460
I have to look at the error message.

00:48:15.460 --> 00:48:21.780
But if I had them iterated on the page name, I could go, oh, my contact one isn't returning.

00:48:21.780 --> 00:48:23.880
So there's something wrong with my contact page.

00:48:23.880 --> 00:48:25.240
And I know exactly where to go.

00:48:25.240 --> 00:48:27.100
Isolating the test failure is good.

00:48:27.940 --> 00:48:34.600
I had a comment before about if you have multiple asserts, you might not see all of the errors, all the details about that.

00:48:34.600 --> 00:48:35.920
And we talked a little bit about that, too.

00:48:35.920 --> 00:48:41.660
And this helps show the status for the different parameters.

00:48:41.660 --> 00:48:45.020
Instead of I just loop through all the options and make sure they all pass or there's an error.

00:48:45.020 --> 00:48:45.420
Yeah.

00:48:45.420 --> 00:48:49.820
And with like a website, for instance, you know, there might be two pages.

00:48:49.820 --> 00:48:52.840
Whereas if you had them all in a loop, you'd only see the one.

00:48:52.840 --> 00:48:54.500
You're like, oh, contact page is broken.

00:48:54.500 --> 00:48:55.840
I'll go fix that.

00:48:55.840 --> 00:48:56.580
And you come back.

00:48:56.580 --> 00:48:57.960
Oh, something else is broken.

00:48:57.960 --> 00:49:04.120
Whereas if you if it had like three failures, you'd be like, oh, like seven of them are failing.

00:49:04.240 --> 00:49:06.480
All of a sudden something else must be wrong.

00:49:06.480 --> 00:49:06.700
Yeah.

00:49:06.700 --> 00:49:09.720
Related on that same side.

00:49:09.720 --> 00:49:18.580
In my mind, this is like taken to the maximum of parameterization is things like hypothesis where you don't even tell what the parameters you're like.

00:49:18.580 --> 00:49:22.340
Very some ideas and give it to the test.

00:49:22.340 --> 00:49:23.900
What do you think about this?

00:49:23.900 --> 00:49:24.940
Do you find this useful for you?

00:49:24.940 --> 00:49:25.360
I do.

00:49:25.360 --> 00:49:27.360
Hypothesis is an awesome tool.

00:49:27.360 --> 00:49:32.980
It doesn't really it helps you think about a problem differently because you have to think about like.

00:49:33.520 --> 00:49:42.820
What are the because you can't say like add, you can't test add by making sure that it returns for because it's only going to return for in particular cases.

00:49:42.820 --> 00:49:48.080
But you can say, hmm, maybe all the test, all the whole bunch of positive numbers.

00:49:48.080 --> 00:49:50.920
And I want to make sure that the result is positive.

00:49:50.920 --> 00:49:55.120
And so there's like these aspects of your system that you can test for.

00:49:55.120 --> 00:50:01.040
But the other thing that hypothesis is awesome at isn't actually testing the output.

00:50:01.040 --> 00:50:03.420
It's just making sure your code doesn't blow up.

00:50:04.100 --> 00:50:13.040
So throwing hypothesis at systems, I think the first the first awesome thing about it is just it tests some corner cases that your code might not handle.

00:50:13.040 --> 00:50:13.420
Right.

00:50:13.600 --> 00:50:21.740
So anything that throws an exception is going to get dealt with as you know, pytest is going to fail because an exception is hit.

00:50:21.740 --> 00:50:23.340
So that helps.

00:50:23.340 --> 00:50:25.320
Maybe not everyone knows the hypothesis.

00:50:25.320 --> 00:50:30.000
Maybe just tell them like a little bit how it works and how it's like parameterization, but not exactly.

00:50:30.220 --> 00:50:32.240
Well, hypothesis is just going.

00:50:32.240 --> 00:50:38.320
So you can you set up strategies and different things around and they're decorators you put on top of your test.

00:50:38.320 --> 00:50:45.680
And then like you've got an example of like given a string that's text and then you have S.

00:50:45.900 --> 00:50:51.700
So somehow hypothesis will fill in the variables that you put your there.

00:50:51.700 --> 00:50:56.800
Like normally in a if a test had a parameter, it would either be a parameterization or a fixture.

00:50:56.960 --> 00:51:02.560
But hypothesis has utilizes that also and fills it in with hypothesis values.

00:51:02.560 --> 00:51:10.520
And so if you give it if you say it's a string, it'll come up with a whole bunch of them and it'll run your test a whole bunch of times based on.

00:51:10.520 --> 00:51:13.520
And I don't remember what the default is, but it's quite a few.

00:51:13.520 --> 00:51:14.960
It also checks the time.

00:51:14.960 --> 00:51:19.240
I think it doesn't make sure it doesn't like run for hours or something like that.

00:51:19.300 --> 00:51:24.040
But you can tell it how robust to do and it just like makes up stuff.

00:51:24.040 --> 00:51:31.120
But the people behind hypothesis actually are pretty good at coming up with some decent test cases that break a lot of kinds of software.

00:51:31.120 --> 00:51:39.540
So that bit of that we think of as the old style that you think of as a test engineer of like coming up with wacky values.

00:51:39.540 --> 00:51:41.080
You don't need that anymore.

00:51:41.080 --> 00:51:44.380
You can just give have hypothesis come up with wacky values for you.

00:51:44.380 --> 00:51:44.660
Right.

00:51:45.080 --> 00:51:50.820
Think of strategies of like, well, these scenarios we should try to run through and just have it automatic.

00:51:50.820 --> 00:51:54.200
Things that you don't know that are constraints on your system.

00:51:54.200 --> 00:51:59.480
Like maybe your input system, hypothesis tells you, guess what?

00:51:59.480 --> 00:52:02.320
It like breaks on all German names or something like that.

00:52:02.320 --> 00:52:04.240
Yeah, yeah, yeah.

00:52:04.240 --> 00:52:05.100
Or Unicode.

00:52:05.100 --> 00:52:07.520
And you're like, oh, yeah, actually I don't.

00:52:07.520 --> 00:52:11.740
That's neat, but I don't actually expect it to ever get called with Unicode.

00:52:11.740 --> 00:52:14.960
So you can restrict the strategies and stuff.

00:52:15.100 --> 00:52:15.220
Yeah.

00:52:15.220 --> 00:52:16.760
Last thing on this one.

00:52:16.760 --> 00:52:18.740
Jeff asks, how reproducible are these?

00:52:18.740 --> 00:52:22.400
And I see that hypothesis says it'll remember failing tests.

00:52:22.400 --> 00:52:22.800
Yeah.

00:52:22.800 --> 00:52:23.780
I can't hear you.

00:52:23.780 --> 00:52:24.060
Yeah.

00:52:24.060 --> 00:52:29.440
Just maybe the last thing on hypothesis here is, you know, Jeff asks, how reproducible are tests with hypothesis?

00:52:29.440 --> 00:52:30.380
I don't know.

00:52:30.380 --> 00:52:33.000
They do say that it remembers the failing examples.

00:52:33.000 --> 00:52:35.960
So into like SQLite database or something.

00:52:35.960 --> 00:52:38.280
So maybe, maybe it'll replay that.

00:52:38.280 --> 00:52:39.660
Potentially.

00:52:39.660 --> 00:52:42.500
And I'll try the failing ones before, but I haven't played with it either.

00:52:42.500 --> 00:52:49.740
So I think it reports like some seed thing or something that you can reseed it to be the same run or something like that.

00:52:49.800 --> 00:52:51.840
There's a whole section on reproducing failures here.

00:52:51.840 --> 00:52:58.420
And it does say you can provide, one of the things you can say is provide examples of, in addition to the random stuff you pick, please do these things.

00:52:58.420 --> 00:53:01.600
And so I suppose you could take a failing one and put it in there.

00:53:01.600 --> 00:53:07.680
Or if you always do it with the same seed, then its randomness becomes deterministic.

00:53:07.680 --> 00:53:11.200
Which is kind of odd, but.

00:53:11.200 --> 00:53:14.020
Pseudo random is part of CS.

00:53:14.020 --> 00:53:14.580
Yes.

00:53:14.580 --> 00:53:15.380
Yes, indeed.

00:53:15.380 --> 00:53:17.020
All right.

00:53:17.020 --> 00:53:18.720
Well, Brian, we're pretty short on time.

00:53:18.720 --> 00:53:20.740
What else do you want to throw out there real quick before we.

00:53:20.740 --> 00:53:27.680
I think I want to circle back to the beginning and just say, pytest can do a whole bunch of cool stuff.

00:53:27.680 --> 00:53:29.220
Don't do it all at once.

00:53:30.220 --> 00:53:36.340
Gradually add bells and whistles, especially if you're working on a team, because it's a different mindset.

00:53:36.340 --> 00:53:39.660
So it's a make sure that the team is all up to speed.

00:53:39.660 --> 00:53:45.760
You want to make sure that, like all software, don't design a system so complex that you're not smart enough to debug it.

00:53:45.760 --> 00:53:46.720
I love thinking about that.

00:53:46.720 --> 00:53:47.840
That's a really good way to put it.

00:53:47.840 --> 00:53:55.600
Because if you write the most clever code that you can, you're right at the limit of your ability to keep it in your mind and understand it.

00:53:55.600 --> 00:53:57.480
And debugging code is harder than writing code.

00:53:57.480 --> 00:53:59.840
You're not qualified to debug your own code.

00:53:59.840 --> 00:54:00.400
You're not qualified.

00:54:00.400 --> 00:54:05.340
You're writing codes that you can't write code that your body can't pay the check for or whatever.

00:54:05.340 --> 00:54:05.640
Yeah.

00:54:05.640 --> 00:54:09.900
I can't remember who said that first, but it's definitely very true.

00:54:09.900 --> 00:54:10.600
It is indeed.

00:54:10.600 --> 00:54:11.120
Awesome.

00:54:11.120 --> 00:54:12.460
Well, thank you for putting this together.

00:54:12.460 --> 00:54:15.120
Obviously, I'll link to this in the show notes.

00:54:15.120 --> 00:54:16.160
People can check out your course.

00:54:16.160 --> 00:54:17.220
They can check out your book.

00:54:17.220 --> 00:54:21.740
And yeah, it's all your other pytest things.

00:54:22.280 --> 00:54:22.440
Yeah.

00:54:22.440 --> 00:54:24.080
Looking forward to having testing code back.

00:54:24.080 --> 00:54:28.260
And also, everybody that's listening here should be listening on Python Bytes.

00:54:28.260 --> 00:54:29.200
I think you'll enjoy it.

00:54:29.200 --> 00:54:29.540
I agree.

00:54:29.540 --> 00:54:30.440
A lot of fun over there.

00:54:30.440 --> 00:54:30.860
All right.

00:54:30.860 --> 00:54:31.700
Thanks a lot, Michael.

00:54:31.700 --> 00:54:32.060
Yeah.

00:54:32.060 --> 00:54:33.060
Thank you for being here, Brian.

00:54:33.220 --> 00:54:34.380
Thank you, everyone, for listening.

00:54:34.380 --> 00:54:35.360
See y'all later.

00:54:36.740 --> 00:54:39.400
This has been another episode of Talk Python to Me.

00:54:39.400 --> 00:54:41.220
Thank you to our sponsors.

00:54:41.220 --> 00:54:42.820
Be sure to check out what they're offering.

00:54:42.820 --> 00:54:44.240
It really helps support the show.

00:54:44.240 --> 00:54:48.660
Don't miss out on the opportunity to level up your startup game with Microsoft for Startups

00:54:48.660 --> 00:54:49.180
Founders Hub.

00:54:49.180 --> 00:54:54.260
Get over six figures in benefits, including Azure credits and access to OpenAI's APIs.

00:54:54.260 --> 00:54:57.080
Apply now at talkpython.fm/founders hub.

00:54:57.080 --> 00:55:03.620
Stay on top of technology and raise your value to employers or just learn something fun in

00:55:03.620 --> 00:55:05.300
STEM at brilliant.org.

00:55:05.740 --> 00:55:11.520
Visit talkpython.fm/brilliant to get 20% off an annual premium subscription.

00:55:11.520 --> 00:55:13.540
Want to level up your Python?

00:55:13.540 --> 00:55:17.580
We have one of the largest catalogs of Python video courses over at Talk Python.

00:55:17.580 --> 00:55:22.760
Our content ranges from true beginners to deeply advanced topics like memory and async.

00:55:22.760 --> 00:55:25.420
And best of all, there's not a subscription in sight.

00:55:25.420 --> 00:55:28.340
Check it out for yourself at training.talkpython.fm.

00:55:28.340 --> 00:55:33.080
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

00:55:33.080 --> 00:55:34.320
We should be right at the top.

00:55:34.320 --> 00:55:39.500
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

00:55:39.500 --> 00:55:43.700
and the direct RSS feed at /rss on talkpython.fm.

00:55:44.540 --> 00:55:47.120
We're live streaming most of our recordings these days.

00:55:47.120 --> 00:55:50.540
If you want to be part of the show and have your comments featured on the air,

00:55:50.540 --> 00:55:54.960
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

00:55:54.960 --> 00:55:56.800
This is your host, Michael Kennedy.

00:55:56.800 --> 00:55:58.100
Thanks so much for listening.

00:55:58.100 --> 00:55:59.260
I really appreciate it.

00:55:59.520 --> 00:56:01.180
Now get out there and write some Python code.

00:56:01.180 --> 00:56:01.180
Now get out there and write some Python code.

00:56:01.180 --> 00:56:22.680
We'll see you next time.

