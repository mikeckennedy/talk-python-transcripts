WEBVTT

00:00:00.001 --> 00:00:03.660
We recently covered 10 tips that every Flask developer should know,

00:00:03.660 --> 00:00:06.940
but we left down a pretty big group in the Python web space there,

00:00:06.940 --> 00:00:09.560
Django developers, and this one's for you.

00:00:09.560 --> 00:00:14.700
So I've invited Bob Belderbos, who's been running his SaaS business on Python and Django for several

00:00:14.700 --> 00:00:19.760
years now, to share his tips and tricks for working with Django. This is Talk Python to Me,

00:00:19.760 --> 00:00:23.780
episode 277, recorded July 19th, 2020.

00:00:23.780 --> 00:00:42.020
Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:00:42.020 --> 00:00:47.120
and the personalities. This is your host, Michael Kennedy. Follow me on Twitter, where I'm @mkennedy.

00:00:47.120 --> 00:00:50.880
Keep up with the show and listen to past episodes at talkpython.fm,

00:00:50.880 --> 00:00:53.360
and follow the show on Twitter via at Talk Python.

00:00:53.780 --> 00:00:57.080
This episode is brought to you by Linode and us.

00:00:57.080 --> 00:01:03.400
Have you heard about the 100 Days of Code Challenge? It's a challenge where you write code for an hour a day

00:01:03.400 --> 00:01:10.060
for 100 days. It's helped many developers finally master programming, but it can be hard to know what

00:01:10.060 --> 00:01:17.100
to study or have resources to focus on. That's why we wrote not one, but two 100 Days of Code courses.

00:01:17.100 --> 00:01:22.940
100 Days of Code in Python, which covers mostly pure Python, and 100 Days of Web,

00:01:23.300 --> 00:01:27.320
in Python, which covers a whole spectrum of web frameworks and concepts.

00:01:27.320 --> 00:01:33.240
If you've been thinking about taking the 100 Days of Code Challenge, be sure to visit training.talkpython.fm

00:01:33.240 --> 00:01:38.720
and check out our courses. They are the 100 Days of Projects and Lessons, with a tidy bow on top,

00:01:38.720 --> 00:01:39.400
just for you.

00:01:40.400 --> 00:01:42.260
Bob, welcome back to Talk Python to Me.

00:01:42.260 --> 00:01:43.980
Thank you, Mike. It was nice to be here.

00:01:43.980 --> 00:01:48.060
Hey, man. It's good to have you back. Good to be catching up with you. You know what we should be

00:01:48.060 --> 00:01:52.820
doing is we should be catching up in Pittsburgh and having a beer, but instead we're meeting on

00:01:52.820 --> 00:01:54.540
the podcast on Skype, and that's second best.

00:01:54.660 --> 00:01:58.420
Yeah. There was no Python this year. Rub it in. Rub it in.

00:01:58.420 --> 00:02:04.560
It was... I know. I know. You and Julian both had flights from quite far away to come hang out there,

00:02:04.560 --> 00:02:05.720
and it didn't happen, did it?

00:02:05.720 --> 00:02:07.760
It didn't happen. It will happen next year.

00:02:07.760 --> 00:02:13.320
It will. It's hard to see it now, but life will go back to normal, mostly. I think eventually we'll

00:02:13.320 --> 00:02:20.200
get this whole deal figured out, but right now it's a bit chaotic. So let's just maybe check in.

00:02:20.200 --> 00:02:24.560
What have you been up to since the last time you were on? We had you on two episodes before. You were

00:02:24.560 --> 00:02:30.840
on 140, which was a big one where we kind of met each other and whatnot, talking about 100 Days of

00:02:30.840 --> 00:02:36.140
Code projects. Ultimately, we went on to write a couple of courses, the 200 Days of Code for Python

00:02:36.140 --> 00:02:42.980
and Web Python stuff together. And you were also on episode 224, 12 Lessons from 100 Days of Web,

00:02:42.980 --> 00:02:49.440
which sort of ties into that as well. So it seems like you're on with the tips here. That's a good

00:02:49.440 --> 00:02:50.220
set of topics.

00:02:50.220 --> 00:02:53.840
Yeah, a lot of Django, always on the platform.

00:02:53.840 --> 00:03:00.500
So what have you been up to since back then? That was back in 2019, about a year ago.

00:03:00.500 --> 00:03:07.000
2019. Okay. So yeah, obviously the platform is still growing and that's all on Django.

00:03:07.000 --> 00:03:11.340
Not everyone knows what the platform is, right? So tell people about your Code Challenges platform

00:03:11.340 --> 00:03:15.200
and what's going on there because this is a place that you've been running. How long you've been

00:03:15.200 --> 00:03:16.140
running Code Challenges for?

00:03:16.140 --> 00:03:17.980
Since the end of 2017.

00:03:17.980 --> 00:03:24.020
Right. So three years of running production level Django stuff, running it on Heroku and doing other

00:03:24.020 --> 00:03:28.100
interesting things. So a lot of the tips are sort of pulled out of that experience, right?

00:03:28.200 --> 00:03:35.800
Yes. So it's under CodeChallenge.es and it's a platform where people can learn Python through

00:03:35.800 --> 00:03:43.800
practical exercises, which we have almost 290 now. And yeah, that's pretty exciting. And a lot of,

00:03:43.800 --> 00:03:51.880
learned a lot of Django there. And what's going on for the rest? Well, as you really know, I was a

00:03:51.880 --> 00:03:55.740
Python developer at Oracle until next week, actually.

00:03:55.740 --> 00:04:01.240
Next week, which is actually three weeks ago due to time shifting because we speak in the future or

00:04:01.240 --> 00:04:06.980
the past or something like that. But yeah, so from the time of recording, you're just about to wrap up

00:04:06.980 --> 00:04:07.920
your time at Oracle. Yeah.

00:04:07.920 --> 00:04:12.360
Yeah. And going full into PyBytes, which is pretty exciting.

00:04:12.360 --> 00:04:16.680
So congratulations. Congratulations. That's so awesome. So you basically,

00:04:17.460 --> 00:04:20.760
I think some people would consider it a dream, right? You've made it to the point where you built

00:04:20.760 --> 00:04:26.460
something, curated it over time, and now it's strong enough to be your full-time job, which is

00:04:26.460 --> 00:04:28.800
fantastic. Yeah. So it took three and a half years.

00:04:28.800 --> 00:04:33.300
Is that part of that overnight success that just took 10 years type of thing?

00:04:33.300 --> 00:04:40.320
Yeah. Well, I know that's daily work, right? It's a lot of consistency, but yes, I'm going full on

00:04:40.320 --> 00:04:43.480
that right now. Awesome. So congratulations. And thank you.

00:04:43.480 --> 00:04:48.560
That just means you're focused more on making your platform run well. And obviously,

00:04:48.560 --> 00:04:52.320
Groton is a business. The secret that a lot of people don't learn until they try

00:04:52.320 --> 00:04:57.980
is that running a successful software business is like 30% technology.

00:04:57.980 --> 00:04:58.320
Yeah.

00:04:58.320 --> 00:04:59.180
Yeah.

00:04:59.180 --> 00:05:02.820
So there's a lot more to it, but you still get to focus on your Django side and make the

00:05:02.820 --> 00:05:04.480
platform even better. So that'll be a lot of fun.

00:05:04.480 --> 00:05:09.620
Yeah. It's a platform and we do coaching. So we also help a lot of clients with their Django.

00:05:09.620 --> 00:05:13.180
So, and that's, that's a really nice segue. Yeah.

00:05:13.180 --> 00:05:18.620
Yeah. Awesome. All right. Well, I'm looking at the notes that we put together and, there's

00:05:18.620 --> 00:05:24.620
a lot of tips that we got to go through. So I feel like we trimmed it down. So we're going

00:05:24.620 --> 00:05:31.120
to see if we keep it to 10 plus some unspecified number of bonus items as well. So when I think

00:05:31.120 --> 00:05:36.200
of Django, this first tip that you have, this is like one of the main things that I think of

00:05:36.200 --> 00:05:41.800
is like, it comes with these building block pieces that say flask and pyramid and fast

00:05:41.800 --> 00:05:46.260
API and whatnot, just don't come with like admin backends. Yeah. That's where we're going

00:05:46.260 --> 00:05:46.520
to start.

00:05:46.520 --> 00:05:52.380
Yes. So Django clearly comes with batteries included. And some people actually don't like that because

00:05:52.380 --> 00:05:57.800
they want to rule their own and they think it's opinionated. I happen to like their preferences.

00:05:57.800 --> 00:06:03.060
And yeah, one of those well-known building blocks is the admin interface. And it's, it's pretty

00:06:03.060 --> 00:06:08.600
impressive with a few lines of code. You, you can just add your model in an admin.py file and

00:06:08.600 --> 00:06:14.060
you have the complete crowd interface, which is probably not for the end user, but as a maintainer

00:06:14.060 --> 00:06:21.160
of the site, it's, it's pretty convenient. And, it's an also very easy to extend it. So for example,

00:06:21.160 --> 00:06:27.880
taking an admin class here, you can define some search fields, which makes those fields searchable.

00:06:27.880 --> 00:06:32.100
You can have even have out of complete fields, which they integrated with JavaScript.

00:06:32.100 --> 00:06:40.140
You can overwrite to get query set. And yeah, it's a nice way of inheriting from the admin.model

00:06:40.140 --> 00:06:47.040
admin, class. And, yeah. Yeah. So it, it comes out of the box. Just, I don't know. I kind of

00:06:47.040 --> 00:06:53.100
think of it as like Google sheets or something for your database, right? Right. Where each table is like a

00:06:53.100 --> 00:06:58.940
tab or a sheet in the workbook or whatever the terminology of Google sheets is, but the tabs at

00:06:58.940 --> 00:07:02.500
the bottom, right? Something to, I mean, not necessarily the same UI, but that idea that you

00:07:02.500 --> 00:07:08.140
have like a grid over top of it. But what you're telling me here is I can go and derive special

00:07:08.140 --> 00:07:15.300
classes that are tied to the various tables for the models more specifically. And it lets you search

00:07:15.300 --> 00:07:20.600
different aspects of it. It lets you cool auto-completion. You can also say like limit how many

00:07:20.600 --> 00:07:25.100
items come back in your search results per page. So you don't get a million or something like that,

00:07:25.100 --> 00:07:30.140
right? Yeah. Or you can do a list filter, for example, and then, certain columns at the

00:07:30.140 --> 00:07:36.260
right side of the page, you can, filter on them by clicking, just with one line of code. So,

00:07:36.260 --> 00:07:42.200
uh, that's, that's really some cool functionality. And I think maybe in the show notes, we can link to a

00:07:42.200 --> 00:07:48.040
Django admin cookbook. I use a lot, which has like 50 or so tips. And I might've mentioned that before,

00:07:48.040 --> 00:07:54.280
actually on Python bytes and, I learned a lot from that book. That's like 50 pages and,

00:07:54.280 --> 00:07:56.580
yeah, very, workable code.

00:07:56.580 --> 00:08:02.580
Super cool. Another thing you can do is you can write a function called get query set and actually

00:08:02.580 --> 00:08:09.720
do things like pre-join or do a joined queries against other things. Cause otherwise you may end up

00:08:09.720 --> 00:08:14.800
with like the N plus one problem of ORMs where do one query, then everything that comes back,

00:08:14.860 --> 00:08:18.960
you have to do more queries per item to try to like fill out the details. Yeah. I will talk about

00:08:18.960 --> 00:08:23.860
that in, in one of the tips. Yeah. Yeah. Awesome. That's super cool. Let's see. What else do you want

00:08:23.860 --> 00:08:28.620
to say about that? you know, I, was it you, I think it might've been you, either you or Dan

00:08:28.620 --> 00:08:35.540
Bader from real Python talking about using this to actually trigger events as you interact with this

00:08:35.540 --> 00:08:39.520
admin. Was that you? Yeah. I think that was me. Yeah. Yeah. Yeah. Yeah. So tell us that's like,

00:08:39.520 --> 00:08:42.220
I think that's pretty related. Tell people about that. That's pretty cool. We probably,

00:08:42.220 --> 00:08:48.080
we spoke about that on Python bytes. Yeah. I think what we did was in one of the admin models,

00:08:48.080 --> 00:08:55.180
so for right, the safe method, and then see if the object was created and only then do a certain

00:08:55.180 --> 00:09:00.840
action, like emailing people, but in hindsight, that's probably better to do with a salary task.

00:09:00.840 --> 00:09:06.260
But yeah, that's an example of how you can override those methods and do certain things. Yeah.

00:09:06.520 --> 00:09:13.760
pretty easily. Yes. Yeah. Very, very cool. All right. number two, ORM magic. Yeah. Well,

00:09:13.760 --> 00:09:22.800
Django comes with its own ORM object relational mapper, and it's kind of a proxy to the database. So

00:09:22.800 --> 00:09:28.520
you don't have to write SQL yourself. Although I do enjoy that. I am such a fan. I'm so, well,

00:09:28.520 --> 00:09:34.480
you worked at Oracle, didn't you? I'm such a fan of ORMs actually, or in the, the NoSQL world,

00:09:34.480 --> 00:09:39.680
maybe ODMs or, or some, you know, like R might not necessarily make sense, but you know, there's so

00:09:39.680 --> 00:09:44.140
many issues you can run into if you don't use parameterized queries, you know, little Bobby

00:09:44.140 --> 00:09:50.460
tables and all those issues. And just like, if you get the raw queries back and you pull different

00:09:50.460 --> 00:09:54.820
values and you don't, sometimes you forget to convert this thing to an integer and it's just a

00:09:54.820 --> 00:09:58.400
string that has an integer in it. That's sort of like, there can be all these little weird edge cases,

00:09:58.400 --> 00:10:06.460
right. Whereas with ORMs, it kind of, it's like a, a layer that just separates like how your data should

00:10:06.460 --> 00:10:10.360
be transformed. And I really love it. I think it's great. I know it doesn't a hundred percent work all

00:10:10.360 --> 00:10:14.720
the time, right? There's places where it doesn't, but that's not as, you know, like most of the time,

00:10:14.720 --> 00:10:20.840
it's a, it's a beautiful thing. It's yeah, it's, it's a nice abstraction and it's way easier to use

00:10:20.840 --> 00:10:27.420
and more elegant. I would say it's, it's how Django has, it's pretty Pythonic and you have those helper

00:10:27.420 --> 00:10:34.840
methods, like for example, get object or 404 and it retrieves the object. And if not, it's

00:10:34.840 --> 00:10:42.480
a 4.4 exception. Yeah, exactly. Or equivalent response, right? So it's, it might be exactly what

00:10:42.480 --> 00:10:47.280
you need and you don't even, it's, it's just one method. It's a very concise, right? So if you just

00:10:47.280 --> 00:10:51.440
directly went to the objects and said, get me something where like the primary key is such

00:10:51.440 --> 00:10:56.380
and such, you would get an exception potentially, but it might say an exception, which is, does not

00:10:56.380 --> 00:11:01.060
exist. The model does not exist. And you don't want to tell the user like what that's going to tell the

00:11:01.060 --> 00:11:07.280
user is 500 server error, right? If you don't stop it. And so this will translate that to basically

00:11:07.280 --> 00:11:14.500
effectively catch that exception and raise the HTTP 404, which is the proper response. Yeah. Yeah.

00:11:14.500 --> 00:11:23.120
That's the method is in the shortcuts. So that's clearly like a shortcut. Yeah. And yeah, there are

00:11:23.120 --> 00:11:28.380
so many things I can highlight a few. For example, when you get an object, you can also just manually

00:11:28.380 --> 00:11:36.640
catch the does not exist exception. Nice one is get or get underscore or underscore create, which if the

00:11:36.640 --> 00:11:43.980
object is in the database, it retrieves it. And if not, it creates it and returns a tuple of the object.

00:11:43.980 --> 00:11:52.120
And then a boolean created. So I use it in a few places to sometimes I just want the object. And if

00:11:52.120 --> 00:11:56.400
it's not there, I want to create it. And you can do that kind of in one line of code. And then

00:11:56.400 --> 00:12:03.100
the second return a boolean, the created, you can then say, well, if the object was created, do one

00:12:03.100 --> 00:12:06.900
thing, or if it was not created, do you another thing? And again, it's a shortcut, right?

00:12:07.060 --> 00:12:12.500
Interesting. It's like a proactive upsert, update or insert. But the other way.

00:12:12.500 --> 00:12:17.380
Yeah, yeah. Yeah, yeah, yeah, yeah. Get it or yeah.

00:12:17.380 --> 00:12:20.360
Yeah, that's really cool. All right. What else is good in here?

00:12:20.360 --> 00:12:27.120
Use filter a lot. You can also use exclude. And then there are those neat, like English like methods like

00:12:27.120 --> 00:12:36.280
first. So for example, model dot objects dot first, or dot last, or even preparing, I read about earliest

00:12:36.280 --> 00:12:42.340
or latest, and those read like English, and they do exactly what you expect them to do, right? So that

00:12:42.340 --> 00:12:48.380
reads like, like, like, like Python. Then with the query, and for example, if you're filtering,

00:12:48.380 --> 00:12:55.140
you can use under double underscore to, for example, you have a field, and then you can do

00:12:55.140 --> 00:13:00.780
underscore underscore contains. Is that like a person, like a like, percent? Like, exactly.

00:13:00.780 --> 00:13:06.620
Exactly. Okay. Yeah, that's the SQL language. Yeah, yeah, yeah. Just to highlight the syntax that

00:13:06.620 --> 00:13:13.460
this with double underscore. And you can even link to other models, if you go through underscore,

00:13:13.460 --> 00:13:19.220
underscore, and then the foreign key fields, and then underscore, underscore the attribute. But of

00:13:19.220 --> 00:13:24.860
course, as we said before, we have to be careful with doing a lot of lot of queries there. But

00:13:24.860 --> 00:13:30.460
sometimes you just need to reach out to linked models, right? Yeah. Then if you want to do like more

00:13:30.460 --> 00:13:39.540
complex queries, you can use the uppercase q, the q objects. So you could do q, if one field is this,

00:13:39.540 --> 00:13:47.740
or q, if another field is that. So that's a way to concatenate certain conditions, right? Because a lot

00:13:47.740 --> 00:13:51.940
of times you'll end up, you can use filter and put multiple parameters, but you're going to end up with

00:13:51.940 --> 00:13:56.560
an and which is exactly that's a good point. Yes. Yeah, you don't always want to like sometimes you do.

00:13:56.560 --> 00:14:01.560
But if you don't, filter is not going to help you. That's a great addition, because exactly if you do

00:14:01.560 --> 00:14:08.100
like filter attribute equals comma, another attribute equals there and and yeah, with a q, you can do an

00:14:08.100 --> 00:14:17.340
or yeah, which sometimes is convenient. Yeah. And then we have annotations. So the group by. So for

00:14:17.340 --> 00:14:24.920
example, I have a Django tip, we might be able to link to it maybe in the show notes, how to get how we got

00:14:24.920 --> 00:14:30.240
the most common user names on the platform, which happened to be David, Daniel and Michael.

00:14:30.240 --> 00:14:36.760
It's just a lot of programmers like that. Yeah, I guess so. Interesting. I feel like we almost are gonna have to

00:14:36.760 --> 00:14:41.000
create some gists of your little code. Oh, yeah. And then like link to them, right? We could do that.

00:14:41.000 --> 00:14:47.660
We can totally do that. Yeah. And also this one, what I really like that how the code is laid out over multiple

00:14:47.660 --> 00:14:53.300
lines, as I guess black would do it. And you're looking at the same code, right? It's pretty elegant, I think.

00:14:53.500 --> 00:14:57.600
Yeah, it's super elegant. Yeah, I really like it. And I feel like I write Django RRM code all the time,

00:14:57.600 --> 00:15:02.900
even though I don't use Django, nor do I use a relational database. That's weird, right? And the

00:15:02.900 --> 00:15:12.120
reason is I use a Mongo engine, which is the ORM ODM for MongoDB. But it's modeled on Django ORM. So like

00:15:12.120 --> 00:15:17.400
it's almost identical, you know, as much as it can be, being non relational. So anyway, yeah, it's a really

00:15:17.400 --> 00:15:22.000
nice API. I do like it. And these are cool. Yeah, well, we'll put the gist of how you got the most common

00:15:22.000 --> 00:15:27.400
usernames out of our first names out of your users. That's cool. Connect to it. Okay, I guess hand in

00:15:27.400 --> 00:15:34.280
glove with ORMs, ODMs is the models that define them, right? Yeah, nice segue, right? The ORM free is the

00:15:34.280 --> 00:15:41.860
model. So let's talk a little bit about the models. A few tricks there picked up. Auto now add and auto

00:15:41.860 --> 00:15:49.500
now, which are keyword arguments to model fields. Is this if like I have a date time, like a created date,

00:15:49.500 --> 00:15:54.580
or a last updated date or something like that? Exactly. Yes. So if you have an added and an edited

00:15:54.580 --> 00:16:01.360
field, then the auto underscore now underscore add would add the date upon creation. So typically the

00:16:01.360 --> 00:16:07.620
edit and the auto underscore now would update every time the row is updated. So that's a nice and easy

00:16:07.620 --> 00:16:13.740
way to keep track of those dates. Like when most of the record created. Yeah, yeah, yeah. That's sweet. I love the

00:16:13.740 --> 00:16:19.020
auto now versus... All right. I love the distinction as well. Because sometimes you want it just to default when it's

00:16:19.020 --> 00:16:24.220
created. Other times like last login or last updated for a CMS page or something that would

00:16:24.220 --> 00:16:28.920
be what you want. Yeah. And you don't have to write any code. Those are just attributes that come with

00:16:28.920 --> 00:16:37.580
that field and easy to use. Then we have null versus blank on a field. And the distinction there is that

00:16:37.580 --> 00:16:44.140
if you say null equals true, then the field can be empty in the database, right? And if you say

00:16:44.140 --> 00:16:50.320
blank equals true, then it can be empty on the form, right? So if you don't say blank, then, and you use a

00:16:50.320 --> 00:16:56.160
Django form, it might still think that the field is required in a database. So null is for the database

00:16:56.160 --> 00:17:00.520
and blank is for the form. That's the easy way to remember it. Okay. Yeah, yeah. Cool.

00:17:00.520 --> 00:17:06.500
Underscore delete is an important one because if you link models together and you say on the lead equals

00:17:06.500 --> 00:17:13.580
models cascade, then it will recursively, when you delete a record, also delete the related records,

00:17:13.580 --> 00:17:16.520
the records in the related or linked tables.

00:17:16.720 --> 00:17:20.980
Right. So for example, maybe a code challenges, there's a user, the user has done a bunch of

00:17:20.980 --> 00:17:25.660
challenges. You've saved their results, maybe some other stuff about when they logged in. If you delete

00:17:25.660 --> 00:17:31.920
the user and you have a foreign key relationship, it's gonna, it might even freak out, right? It might

00:17:31.920 --> 00:17:36.380
say, no, this relationship is required. You can't delete the user because there's entries in the

00:17:36.380 --> 00:17:41.000
challenges results or whatever. And this way it'll just, it'll wipe out that entire tree, like

00:17:41.000 --> 00:17:42.320
following those relationships, right?

00:17:42.320 --> 00:17:45.740
Yeah. Yeah, yeah, exactly. And it just deletes all their stuff, right?

00:17:45.740 --> 00:17:46.580
So when I'm in-

00:17:46.580 --> 00:17:50.540
Cascading deletes have always scared me. I've like almost never turned them on in my ass because I'm

00:17:50.540 --> 00:17:54.640
just like, boy, that could go a long way. If that could take more down with it than I actually

00:17:54.640 --> 00:17:58.920
intended. But you know, it's very valuable and useful and I totally get it, but it's cool.

00:17:58.920 --> 00:18:04.700
If a user wants to leave the platform, right? We, we have to delete all their data. So I,

00:18:04.760 --> 00:18:10.840
I still do it manually. So then in Django admin, delete user, and then it shows you like all the

00:18:10.840 --> 00:18:16.720
objects that's going to be deleted. Are you sure about that? And like, I always look like a second

00:18:16.720 --> 00:18:22.660
time. Is that indeed the case? And, and yes, it all ties back to the user. So you don't want to delete

00:18:22.660 --> 00:18:27.840
the user and have all kinds of ghost objects in the database potentially. So that's, it's actually useful.

00:18:28.100 --> 00:18:34.400
But if you want to keep the records, you can, instead of models cascade, you can use models set

00:18:34.400 --> 00:18:40.000
null and then it keeps the records, but where the foreign key was user, it sets it to null.

00:18:40.000 --> 00:18:42.700
So that's, that's a good alternative.

00:18:42.700 --> 00:18:48.540
So it kind of cascades it. So the relationship's not broken, not in the database is corrupted sense,

00:18:48.540 --> 00:18:55.300
but it just unwires it. Yeah. Yeah. It makes like there was a user link, but now it's none. Like it's anonymous

00:18:55.300 --> 00:19:01.900
now. This portion of Talk Python to Me is brought to you by Linode. Whether you're working on a

00:19:01.900 --> 00:19:06.720
personal project or managing your enterprise's infrastructure, Linode has the pricing support

00:19:06.720 --> 00:19:11.360
and scale that you need to take your project to the next level. With 11 data centers worldwide,

00:19:11.360 --> 00:19:17.260
including their newest data center in Sydney, Australia, enterprise grade hardware, S3 compatible

00:19:17.260 --> 00:19:23.500
storage, and the next generation network, Linode delivers the performance that you expect at a price

00:19:23.500 --> 00:19:29.620
that you don't get started on the node today with a $20 credit and you get access to native SSD storage,

00:19:29.620 --> 00:19:35.700
a 40 gigabit network, industry leading processors, their revamped cloud manager at cloud.linode.com,

00:19:35.700 --> 00:19:42.520
root access to your server, along with their newest API and a Python CLI. Just visit talkpython.fm

00:19:42.520 --> 00:19:47.900
slash Linode when creating a new Linode account, and you'll automatically get $20 credit for your next

00:19:47.900 --> 00:19:53.400
project. Oh, and one last thing. They're hiring. Go to linode.com slash careers to find out more.

00:19:53.400 --> 00:19:54.720
Let them know that we sent you.

00:19:57.620 --> 00:20:04.940
Yeah, my current systems, if somebody deletes their account, we have a deleted users table next to our users table,

00:20:04.940 --> 00:20:10.360
and then we just null out all the stuff that identifies them, but we still have the ID. So if I go back and say,

00:20:10.360 --> 00:20:16.400
this user did this thing, I can still trace back that ID and go, oh, that's actually a user that used to exist who

00:20:16.400 --> 00:20:21.360
deleted themselves. That's interesting. Yeah, that's, that's cool, because you do have then the original

00:20:21.360 --> 00:20:27.460
data. Yeah, yeah, yeah, yeah. But this, I mean, this, if you're happy to make it go away, it's really handy,

00:20:27.460 --> 00:20:31.520
because with relational stuff, it's really hard to like, all right, well, I'm going to traverse all the

00:20:31.520 --> 00:20:37.140
relationships. And how do you unwind them so that the database will actually accept the delete, right?

00:20:37.140 --> 00:20:41.600
So this, this is really nice. Yeah, cool. And one more model managers, right? What's up with that?

00:20:41.720 --> 00:20:49.040
Yeah, there is an example that you can define your own model or query. For example, here I linked it to,

00:20:49.040 --> 00:20:58.740
we can, we can link to it, a forecast day manager, and it has a latest method. And it, you know, it gets

00:20:58.740 --> 00:21:05.640
the latest forecast date or does any query really, and then you can just call that method on the object. So

00:21:05.640 --> 00:21:11.240
model.objects, your method. So it's kind of a nice way to not have all that

00:21:11.240 --> 00:21:18.020
query logic in the view, potentially, but have that in the model where it should be. And then it's like

00:21:18.020 --> 00:21:25.460
a property, right, where you do some, a bunch of complex stuff, and then it's just instance.yourproperty

00:21:25.460 --> 00:21:29.240
name, which is very clean, right? So I thought that was...

00:21:29.240 --> 00:21:32.500
Yeah, let's write it once and use it in other places without thinking about it, right?

00:21:32.500 --> 00:21:37.160
Yeah. And then again, it reads like English, yeah, and abstract that logic in the model.

00:21:37.240 --> 00:21:38.320
Yeah, beautiful. Beautiful.

00:21:38.320 --> 00:21:43.040
Yeah. And meta classes, which are not really meta classes. Well, I guess they are, but you

00:21:43.040 --> 00:21:44.020
can define it.

00:21:44.020 --> 00:21:45.820
Database meta, not Python meta.

00:21:47.420 --> 00:21:54.400
You can make a class meta in your model, and I don't use it for many things, but for example,

00:21:54.400 --> 00:22:00.360
I think most common example is that you can define the ordering there. For example, you can say

00:22:00.360 --> 00:22:08.460
dash edit, and then in your admin, or wherever, whenever you query that model is, then the objects

00:22:08.460 --> 00:22:10.660
show descend in descending order.

00:22:10.980 --> 00:22:12.920
Right. So the default sort, if you don't specify one.

00:22:12.920 --> 00:22:13.140
Yeah.

00:22:13.140 --> 00:22:14.980
Yeah, that's one example.

00:22:14.980 --> 00:22:16.480
Yeah, that's really handy. Nice, nice.

00:22:16.480 --> 00:22:21.360
All right. Now, this, so far, what we've been talking about, besides my little diversion to Mongo

00:22:21.360 --> 00:22:28.080
engine, which is not a very common use case, has been mostly Django specific. But this next one that

00:22:28.080 --> 00:22:32.980
you got here, I feel like a lot of the frameworks have an equivalent, but a lot of people probably

00:22:32.980 --> 00:22:34.960
don't use them regardless of the framework they're in.

00:22:35.360 --> 00:22:41.480
And that's the debugging toolbar, right? So going more into the developer toolset. Yeah, which has been

00:22:41.480 --> 00:22:48.480
very useful. It's a plugin, so you pip install it, you add it to the installed apps, I believe. And I think

00:22:48.480 --> 00:22:54.240
there's a middleware as well. So a couple of two or three settings. And then, of course, you load it only if

00:22:54.240 --> 00:23:01.200
you are developing locally, or which typically means is when your debug is set to true. Not in production.

00:23:01.200 --> 00:23:06.420
That is super, super important. Yeah, there's tools out there that will scan websites for the

00:23:06.420 --> 00:23:11.600
presence of these debug toolbars and try to pull them up. It's bad news to have them out there. So

00:23:11.600 --> 00:23:14.820
yeah, I mean, there's been a lot of vulnerabilities around this, actually.

00:23:14.820 --> 00:23:20.960
And those are important and easy tweaks, maybe a little segue. For example, you have like the default

00:23:20.960 --> 00:23:28.200
dash admin, slash admin, that's super easy to find, right? So it's very easy to in your URLs

00:23:28.200 --> 00:23:33.320
to make it like my dash backend, and then make it a little bit more hidden, right?

00:23:33.320 --> 00:23:38.680
Well, yeah, exactly. I mean, I don't know how many people have like pulled up the logs for their

00:23:38.680 --> 00:23:43.580
website, as in the request logs live and just go to the server and tell your logs or whatever,

00:23:43.580 --> 00:23:51.100
you will see untold number of requests for various PHP pages and node JS pages and whatnot.

00:23:51.100 --> 00:23:54.760
Yeah, it has nothing to do with your site is they just like, all right, here's the five most common

00:23:54.760 --> 00:24:01.940
backends, you know, WP admin dot PHP and whatnot, right? They're just looking for them. So surely

00:24:01.940 --> 00:24:03.720
they're looking for Django admins as well.

00:24:03.720 --> 00:24:10.540
Yeah. So yeah, watch out with a bit of security. But the main reason I pulled up the debugging

00:24:10.540 --> 00:24:16.980
toolbar here was a story performance story. And on some pages, they became pretty slow. And it's like,

00:24:16.980 --> 00:24:22.440
okay, it could be more data, more users. But actually, then when I start looking at those pages,

00:24:22.580 --> 00:24:27.720
how they load it, with the debugging toolbar, I saw that, yeah, there were actually hundreds and

00:24:27.720 --> 00:24:33.900
hundreds of queries happening. And that was imagine that that would be slow. Yeah, the servers on a

00:24:33.900 --> 00:24:39.580
different the database is on a different server, physical server or virtual server, right? It's got

00:24:39.580 --> 00:24:41.620
the network latency and all that. Right. Yeah.

00:24:42.080 --> 00:24:48.640
And it was actually because I was not using select underscore related to link models in an efficient

00:24:48.640 --> 00:24:55.220
way. So when you use select related, it makes one extra query to link up to two models. But then every

00:24:55.220 --> 00:25:01.780
time you access a foreign attribute, so to say, it's already there, it's like a pre cache. So once I got

00:25:01.780 --> 00:25:08.580
that in place, then the page became super fast. And but the main point was that the debugging toolbar

00:25:08.580 --> 00:25:13.800
made that super easy to to diagnose, right? Yeah. And I think probably hearing the word debugging

00:25:13.800 --> 00:25:17.420
toolbar, a lot of people who've not like, you know, like, what is this annoying thing that's on

00:25:17.420 --> 00:25:21.120
the side of my website? I don't make this go away, right? Like, they haven't really explored it.

00:25:21.120 --> 00:25:27.840
It does catch errors. And to me, like, that's the least value that the thing adds, the debugging part is

00:25:27.840 --> 00:25:31.700
completely, I don't know, I have other tools that tell me that you can just look at the output and the

00:25:31.700 --> 00:25:37.220
stack trace. But the real value is in the performance, you can check off things like track the

00:25:37.220 --> 00:25:43.680
performance of the actual profiling level of your code and show me where the time is being spent.

00:25:43.680 --> 00:25:48.440
And then also into the database, right? Like, these are the queries that are happening on this page,

00:25:48.440 --> 00:25:52.100
and how many and if you see like, Oh, I'd expect two or three, and there's 500, you're like, Oh,

00:25:52.100 --> 00:25:58.200
this is really broken. Let's figure out why we're going and getting its second table over and over and

00:25:58.200 --> 00:26:05.280
over again. Yeah, exactly. Yeah, yeah, yeah. So Blask has an equivalent one of these pyramid has an

00:26:05.280 --> 00:26:09.200
equivalent one of these. They're awesome. You should definitely check them out. Don't deploy

00:26:09.200 --> 00:26:10.080
them in production. Yeah.

00:26:10.080 --> 00:26:13.000
Number five.

00:26:13.000 --> 00:26:21.520
Yeah, I had extending the user model. And I linked to a an article simple from simple is better than

00:26:21.520 --> 00:26:29.020
complex, which is a great jangle blog. And it's more about strategy, like when you start a project,

00:26:29.020 --> 00:26:37.300
and you inevitably going to store more data on a user, right? There are preferences, there are profile

00:26:37.300 --> 00:26:43.880
settings. And you have to kind of think like how you, you're going to do it from the start, because

00:26:43.880 --> 00:26:51.220
one way or another has quite an impact on your code. So the article has four methods, proxy model,

00:26:51.220 --> 00:27:00.180
the one to one with a profile table, and extra two forms of extending the abstract user base class.

00:27:00.180 --> 00:27:07.700
And especially that those last two options are really you want to do only from the start, and I believe

00:27:07.700 --> 00:27:13.100
before running the initial migrations, but I would have to look that up. For the platform, we actually

00:27:13.100 --> 00:27:21.560
went with the one to one model, the profile model, which might cause a few queries there, but it has never

00:27:21.560 --> 00:27:31.040
been really a performance issue. Does lead to pretty easy to maintain code. And we use the signal actually, or I think

00:27:31.040 --> 00:27:39.680
they're called signals, which is interesting to highlight that when the user model gets created, you can use the

00:27:39.680 --> 00:27:47.960
receiver decorator, with a post safe, and then write literally three lines of code that the profile object gets

00:27:47.960 --> 00:27:54.600
created once the user object is created. So basically, when when a new user signs up to your Django app, right?

00:27:54.600 --> 00:28:01.760
And so it, if you need one table, the likes you have a preferences table and a users table, whatever you create

00:28:01.760 --> 00:28:06.960
the user, you want to automatically have the preferences created to defaults or whatever. And so you can wire it up,

00:28:06.960 --> 00:28:14.880
basically an event that is triggered through the ORM, that when you first create one, it's going to set this up, and it's going

00:28:14.880 --> 00:28:21.080
to initialize it with one of these, right? Correct. Yeah. And I think it's a nice trick to know about, like how you can

00:28:21.080 --> 00:28:27.680
signal one model to another, and have the other model do something based on the other one. I think that's a useful trick.

00:28:27.680 --> 00:28:34.240
Yeah. Well, I think an overall general principle that's really, I found really super valuable around like these kinds of

00:28:34.240 --> 00:28:43.140
models and database stuff is, as much as possible, use the ORM to do the default thing, like the add,

00:28:43.140 --> 00:29:04.060
add now, or auto now, auto add, auto now add, that kind of stuff. Yes. Right? So when I create the object, if I don't set anything, a whole bunch of stuff will get filled out. And only the things that I have to specify, do you have to actually go right, as opposed to always updating the updated time yourself or something like that, right? So as much as you can lean on those things, and this is like a,

00:29:04.060 --> 00:29:17.940
cross model version of that. Yeah. Yeah. So usually when you want to do something, the ORM has, has a default way. Yes. So again, it comes back to the previous, or tip number three, like know the ORM pretty well, right?

00:29:18.100 --> 00:29:31.500
Yeah, that's for sure. I don't know how you feel, but when I go around the internet, I feel like there's a lot of sites that just don't understand how their web app interacts with their database. You go there and it takes like six seconds for the page to load.

00:29:32.100 --> 00:29:50.580
Or, you know, you go there and there's like four parts of the site that are like spinning little Ajax things for like five seconds. You're like, what is wrong with you? It can't be this, cannot be this slow. Like it just cannot, I don't care how many million records you have, you got to be able to use an index and make this a little bit faster than this. Right. And just, but it's ongoing, I think.

00:29:50.580 --> 00:29:54.400
Oh, that's a good point. The database index is super important. Yeah.

00:29:54.760 --> 00:30:00.060
Yeah. Yeah. And you can specify another attribute on, yeah. Another attribute you can just specify there. Yeah.

00:30:00.060 --> 00:30:07.240
Yeah. Yeah. I think indexes are definitely, indexes are like magic speed dust you can throw in your database. They're beautiful.

00:30:07.240 --> 00:30:12.460
Yeah. Yeah. No, I'm not sure the ratio, but it can, it can be a hundred times faster, right? It's, it's.

00:30:12.460 --> 00:30:22.520
Oh, easy. A hundred times faster. It's, it's insane. Yeah. And it's, it's like one little line of cut, like index equals true type of stuff. Right. So, so simple, but people overlook it. So, yeah.

00:30:22.520 --> 00:30:27.840
Yeah. No, especially in enterprise with enterprise apps, there are always hammering on, on indexes. Yeah.

00:30:27.840 --> 00:30:33.020
That's very important. I can imagine. I can imagine. All right. Now what's number six?

00:30:33.020 --> 00:30:35.140
Class based views.

00:30:35.140 --> 00:30:46.460
Yeah. So with class based views, these are basically one class corresponds to a URL, but that has different functions to respond to the different HTTP verbs, like get, post, put, that kind of stuff. Is that what these are? Are they different?

00:30:46.460 --> 00:30:56.760
Yes. That's a, I would have to look up the exact classes, but you have typically like list view, detail view, which then tie into the crowd operations. Yes. Yes.

00:30:56.760 --> 00:31:05.540
Right. So you can even have one for head, which is not, not that common, but sometimes, you know, if you're looking for like a browser is looking for, should I actually download this thing?

00:31:05.620 --> 00:31:13.280
Tell me the E tag, you know, last modified sort of thing. So I know whether or not my cache is still valid, stuff like that. Yeah. Very cool. Okay.

00:31:13.280 --> 00:31:24.320
So yeah. And, and I'm kind of torn because I'm looking here at, one of the, you know, the apps for the hundred days, of web where we showed function based versus class based.

00:31:24.520 --> 00:31:36.460
And I like them both because function based, you kind of see what's happening that you, you pull all the objects, then you render a template with, give it a dictionary of things you want to render in the template.

00:31:36.680 --> 00:31:46.220
So it's a, to me that already looks pretty Pythonic and compact, but then if you compare the class based, you see all that inheritance happening.

00:31:46.220 --> 00:31:54.760
For example, we have a quote list, which inherits from list view, which then is that magic superclass with all that default behavior, which is cool.

00:31:54.760 --> 00:31:58.720
If you know them very well, but it can also be hiding a lot of stuff away.

00:31:58.720 --> 00:32:06.100
So for example, the, the list view, the only line there is model equals quote, which says saying like, build me a list view around that model.

00:32:06.300 --> 00:32:08.400
And then stuff magically happens.

00:32:08.400 --> 00:32:08.700
Right.

00:32:08.700 --> 00:32:11.500
So it's cool, but it's also hiding a lot of stuff.

00:32:11.500 --> 00:32:12.140
Yeah.

00:32:12.140 --> 00:32:12.620
Yeah.

00:32:12.620 --> 00:32:13.960
I hear exactly what you're saying.

00:32:13.960 --> 00:32:15.500
I feel kind of the same way.

00:32:15.500 --> 00:32:20.400
No, but, it's definitely inheritance and, you can override certain methods.

00:32:20.400 --> 00:32:23.860
So if you know them well, it's, it's, it's pretty elegant and robust.

00:32:23.860 --> 00:32:24.260
Yeah.

00:32:24.260 --> 00:32:24.580
Nice.

00:32:24.580 --> 00:32:25.100
All right.

00:32:25.100 --> 00:32:25.740
Number seven.

00:32:25.740 --> 00:32:29.940
This also feels very much like the batteries included side of the Django story.

00:32:29.940 --> 00:32:30.360
Yeah.

00:32:30.360 --> 00:32:33.980
I call it miners.py and I guess it can be an episode in itself, right?

00:32:33.980 --> 00:32:34.780
Yeah.

00:32:34.780 --> 00:32:35.920
Pretty much.

00:32:35.920 --> 00:32:36.400
Pretty much.

00:32:36.400 --> 00:32:37.640
I just thought of the highlight.

00:32:37.640 --> 00:32:45.880
If you, kind of, how would you say like meta things, how you manage a, well, that's

00:32:45.880 --> 00:32:48.140
why it's called manage.py, how you manage a Django app.

00:32:48.140 --> 00:32:49.880
Important is the migrate.

00:32:49.880 --> 00:32:50.420
Of course.

00:32:50.420 --> 00:32:51.960
We, we all have used it.

00:32:52.340 --> 00:32:53.740
If you start a Django app.

00:32:53.740 --> 00:32:54.700
You run migrate.

00:32:54.700 --> 00:32:55.140
migrating.

00:32:55.140 --> 00:32:56.540
Um, you're going to have a lot of stuff.

00:32:56.540 --> 00:32:59.420
is, you're going to have a lot of models.

00:32:59.420 --> 00:32:59.460
Um, you're going to have a lot of models.

00:32:59.460 --> 00:32:59.460
Um, you're going to have a lot of models.

00:32:59.460 --> 00:33:00.020
Um, you're going to have a lot of models.

00:33:00.020 --> 00:33:02.860
Uh, the user authentication stuff, embedded.

00:33:02.860 --> 00:33:06.360
But for example, you can use fake initial on migrate.

00:33:06.360 --> 00:33:11.480
And then if the database is kind of further ahead and there's already stuff there, so it's out

00:33:11.480 --> 00:33:17.320
of sync, then fake initial is a way to kind of tell Django, well, if it's already in the

00:33:17.320 --> 00:33:19.420
database, ignore it, which can be useful.

00:33:19.420 --> 00:33:22.500
If, if your database is out of sync, you have low data.

00:33:22.500 --> 00:33:29.280
For example, if you want to have a bunch of data in your initial database, which sometimes

00:33:29.280 --> 00:33:35.320
is referred to as pictures, and you can give it a JSON file and pre-populate your database,

00:33:35.320 --> 00:33:36.340
which can be useful.

00:33:36.340 --> 00:33:42.260
Then we have shell, which is cool because if you do Python manage.py shell, you drop into

00:33:42.260 --> 00:33:46.980
the Django shell and you can play with the ORM directly.

00:33:47.260 --> 00:33:51.720
So you can do like from models, import bytes, and then it can do byte objects, count,

00:33:51.720 --> 00:33:55.480
uh, byte objects, last, whatever ORM stuff.

00:33:55.480 --> 00:33:56.560
So it's a nice way to...

00:33:56.560 --> 00:33:58.160
It's like a REPL for your web app.

00:33:58.160 --> 00:34:00.480
A REPL for your, for your web app.

00:34:00.480 --> 00:34:00.680
Yeah.

00:34:00.680 --> 00:34:02.340
And you can play with the objects there.

00:34:02.340 --> 00:34:03.580
It's, it's pretty useful.

00:34:03.580 --> 00:34:03.940
Yeah.

00:34:03.940 --> 00:34:09.180
It's really handy because if you work with the ORM, you might have some of these auto, like

00:34:09.180 --> 00:34:12.040
linking auto features that set values.

00:34:12.040 --> 00:34:17.240
And if you flip over raw to the raw database, then all of a sudden you lose all that stuff.

00:34:17.240 --> 00:34:20.100
that you've set up to help you kind of manage and make sure it's all consistent.

00:34:20.100 --> 00:34:20.580
Right.

00:34:20.580 --> 00:34:23.160
This way you can kind of script around in there.

00:34:23.160 --> 00:34:23.440
Yeah.

00:34:23.440 --> 00:34:25.120
But with that safety or whatever you call it.

00:34:25.120 --> 00:34:25.960
Yeah, exactly.

00:34:25.960 --> 00:34:26.320
Yeah.

00:34:26.320 --> 00:34:31.120
And then if you load in your production database, you can actually do that on your live database.

00:34:31.120 --> 00:34:32.220
So that's pretty cool.

00:34:32.220 --> 00:34:32.720
Yeah.

00:34:32.720 --> 00:34:33.180
And useful.

00:34:33.180 --> 00:34:38.340
You want to debug something, manage.py test to run the test.

00:34:38.340 --> 00:34:40.140
Not much more to say about that.

00:34:40.220 --> 00:34:43.360
Then most people that use Django will know.

00:34:43.360 --> 00:34:44.440
Create super user.

00:34:44.440 --> 00:34:50.540
So that, gives you a bunch of, prompts to create a user with all the permissions, which

00:34:50.540 --> 00:34:53.520
is useful to have to quickly log into the backend.

00:34:53.520 --> 00:34:58.860
I, and, and the one I really like, lastly is the Django commands.

00:34:58.860 --> 00:35:02.960
So you can write your own kind of use it for cron jobs.

00:35:02.960 --> 00:35:09.520
For example, you can write a command, which inherits from base command and you, overwrite

00:35:09.520 --> 00:35:10.680
the handle method.

00:35:10.680 --> 00:35:16.060
And then typically what, for example, we use it to, for example, we have people on the

00:35:16.060 --> 00:35:18.940
platform doing trials and the trials is two weeks, right?

00:35:18.940 --> 00:35:23.300
So after the two weeks, they are, they're done with the trial and we have to take a couple

00:35:23.300 --> 00:35:26.420
of settings on their profile to, get rid of that access.

00:35:27.200 --> 00:35:34.440
And so we have a command, that queries, all the, the profiles, profile objects of people

00:35:34.440 --> 00:35:39.500
that have an active trial and then compares, like when they started to trial with daytime

00:35:39.500 --> 00:35:44.000
now or time zone now, and does one action already removes the access.

00:35:44.000 --> 00:35:51.260
And that's a, a script that's under the app management slash commands slash script.

00:35:51.260 --> 00:35:53.480
And then in a Roku, we use scheduler.

00:35:53.480 --> 00:35:56.760
And then we say, well, every day at 9am run that script.

00:35:56.760 --> 00:36:04.000
And if you have a script in managed management slash commands, then managed.py recognizes

00:36:04.000 --> 00:36:05.800
that as, as a command.

00:36:05.800 --> 00:36:10.700
So if you put a script in there, then you can use it through the managed.py interface, which

00:36:10.700 --> 00:36:11.240
is pretty cool.

00:36:11.240 --> 00:36:13.100
So you can write your own cron jobs basically.

00:36:13.100 --> 00:36:13.460
Yeah.

00:36:13.460 --> 00:36:13.980
That makes sense.

00:36:13.980 --> 00:36:14.200
Super cool.

00:36:14.200 --> 00:36:14.900
Yeah.

00:36:14.900 --> 00:36:15.140
Yeah.

00:36:15.140 --> 00:36:16.420
No, that's, that's really nice.

00:36:16.420 --> 00:36:21.760
So it basically lets you just add these commands and then tie it into the Heroku scheduler

00:36:21.760 --> 00:36:26.360
or celery or something like that, that it becomes this cool cron job that knows all about your

00:36:26.360 --> 00:36:26.560
site.

00:36:26.560 --> 00:36:26.760
Yeah.

00:36:26.760 --> 00:36:33.760
So in Heroku scheduler, we would define every day at 9am, run Python, manage.py and then

00:36:33.760 --> 00:36:36.020
name of your command, which is the name of your script.

00:36:36.020 --> 00:36:38.480
And yeah, just like that.

00:36:38.480 --> 00:36:39.240
Nice.

00:36:39.240 --> 00:36:40.000
Yeah.

00:36:40.340 --> 00:36:45.380
We can, we have here on the notes, a template, some template code, how, how that would work.

00:36:45.380 --> 00:36:47.060
Maybe we can make a gist of that as well.

00:36:47.060 --> 00:36:47.300
Yeah.

00:36:47.300 --> 00:36:48.560
I think we have to make some gists.

00:36:48.560 --> 00:36:49.800
Yeah.

00:36:49.900 --> 00:36:50.220
All right.

00:36:50.220 --> 00:36:57.060
Number eight is all about middleware, which is code that runs that might see the request

00:36:57.060 --> 00:37:02.800
before it actually hits your end view methods or action methods or potentially changes them

00:37:02.800 --> 00:37:08.320
after it's already been processed and decided, but before it actually goes out the web server

00:37:08.320 --> 00:37:09.300
to the end user.

00:37:09.300 --> 00:37:12.640
So it's like a before and after view of it, right?

00:37:13.120 --> 00:37:18.300
Yeah, that's not super common, I think, but it's a nice way to have some sort of global

00:37:18.300 --> 00:37:24.800
layer in your pipeline, in the request pipeline of Django and practical example.

00:37:24.800 --> 00:37:32.520
We, how we used it on the platform was to remember when we had to make those GDPR changes, like with

00:37:32.520 --> 00:37:33.600
the regulations and stuff.

00:37:33.600 --> 00:37:33.940
Yeah.

00:37:33.940 --> 00:37:39.040
I know we talked about this and we all had to do weeks of rewriting stuff to make sure,

00:37:39.040 --> 00:37:43.900
even though it was in the same vein, it wasn't technically matching every rule.

00:37:43.900 --> 00:37:46.940
So we had to go and go through all that and make sure there was.

00:37:46.940 --> 00:37:47.200
Yeah.

00:37:47.200 --> 00:37:50.780
It could be another episode, the stories we have from that one.

00:37:50.780 --> 00:37:57.160
But so we made all these changes and we had to have some sort of form with already 10K users

00:37:57.160 --> 00:38:02.220
or more to have them kind of say yes to this at one time.

00:38:02.220 --> 00:38:06.980
They had to have like another acknowledgement the next time they visited the site, regardless

00:38:06.980 --> 00:38:10.000
of where they came into, not through the login flow or whatever.

00:38:10.000 --> 00:38:12.140
Yeah, because they were already a user, right?

00:38:12.140 --> 00:38:13.980
So they went through the registration flow.

00:38:13.980 --> 00:38:15.480
So we couldn't put it just there.

00:38:15.480 --> 00:38:17.240
We also had to do for the existing user.

00:38:17.240 --> 00:38:24.520
So we wrote a middleware that redirected, that kept track if they had their consent, gave their

00:38:24.520 --> 00:38:25.720
consent on their profile.

00:38:25.920 --> 00:38:30.840
And if not, it would redirect them to that page, to that form basically, where they would

00:38:30.840 --> 00:38:31.620
give their consent.

00:38:31.620 --> 00:38:38.440
And yeah, it was a nice way to enforce that login, that sorry, that redirect based on a

00:38:38.440 --> 00:38:39.420
profile setting basically.

00:38:39.420 --> 00:38:40.020
Yeah.

00:38:40.020 --> 00:38:46.760
So middleware was perfect there because it's kind of ruthless as it sits in front of all the

00:38:46.760 --> 00:38:47.120
requests.

00:38:47.120 --> 00:38:49.680
That's a really, really good point that it's ruthless.

00:38:49.680 --> 00:38:52.420
And in a good way, in a sense, right?

00:38:52.420 --> 00:38:56.840
Like if you were to think, okay, well, users need to make sure we got to make sure they accept

00:38:56.840 --> 00:38:58.580
the GDPR at this point before they go on.

00:38:58.580 --> 00:39:02.280
So let's check where they go and perform a byte, where they view their solution, maybe where

00:39:02.280 --> 00:39:04.900
they view their account and where they log in.

00:39:04.900 --> 00:39:08.520
And there might be some other part of the site that you forgot about, right?

00:39:08.980 --> 00:39:13.760
And in addition to just having to modify all those places, it's super easy to forget one

00:39:13.760 --> 00:39:14.640
weird edge case.

00:39:14.640 --> 00:39:20.360
But with middleware, every request that hits Python, that hits Django, hits this thing, right?

00:39:20.360 --> 00:39:22.280
And so there's no escaping it.

00:39:22.280 --> 00:39:25.000
You've got to accept the thing or you're getting redirected.

00:39:25.000 --> 00:39:26.000
Yeah, exactly.

00:39:26.000 --> 00:39:33.060
And yeah, I also linked here to a cool article, again, from Vitor Freitas, where he wrote a bunch

00:39:33.060 --> 00:39:36.680
of middleware to catch for any exception that is handling.

00:39:37.000 --> 00:39:38.820
He goes out to Stack Overflow.

00:39:38.820 --> 00:39:41.680
It's called the Stack Overflow exception troubleshooting.

00:39:41.680 --> 00:39:48.140
And only in debug mode, of course, it would list the top three answers.

00:39:48.140 --> 00:39:49.580
Stack Overflow answer, right?

00:39:49.580 --> 00:39:50.620
Oh, that's incredible.

00:39:50.620 --> 00:39:52.300
Yeah, I saw it yesterday.

00:39:52.300 --> 00:39:53.780
I was like, this is so cool.

00:39:53.780 --> 00:39:55.920
That's crazy.

00:39:55.920 --> 00:39:57.240
Such a cool use case.

00:39:57.240 --> 00:39:58.600
So I just wanted to...

00:39:58.600 --> 00:39:59.420
Yeah, that's a wild use case.

00:39:59.420 --> 00:40:00.040
How interesting.

00:40:00.040 --> 00:40:01.280
I'm glad you're linking to that.

00:40:01.280 --> 00:40:06.260
Yeah, the two places that I use that I'm really actively aware of using middleware,

00:40:06.260 --> 00:40:07.060
my sites.

00:40:07.060 --> 00:40:10.400
And Pyramid has middleware as well in Flask and so on.

00:40:10.400 --> 00:40:17.380
One is for things like Sentry, where it's looking at for any unhandled errors.

00:40:17.380 --> 00:40:22.180
And instead of just letting the server 500 page go back to the user, it'll catch it, report

00:40:22.180 --> 00:40:24.020
it, and then send it on, right?

00:40:24.060 --> 00:40:25.800
So it'll gather up all that information.

00:40:25.800 --> 00:40:28.220
And you basically just register that.

00:40:28.220 --> 00:40:29.000
You don't have to do a lot.

00:40:29.000 --> 00:40:32.520
And the other one is this thing I'll just throw out right through on the bonus round really,

00:40:32.520 --> 00:40:37.820
really quick is a thing called SecurePi, which will add all the headers that you should be

00:40:37.820 --> 00:40:39.020
adding for security.

00:40:39.020 --> 00:40:42.820
Like, do not allow my site to be embedded in an iframe on another site.

00:40:42.820 --> 00:40:43.640
Right?

00:40:43.640 --> 00:40:47.620
And the middleware will say, I don't care how you got to this request, but we're going to

00:40:47.620 --> 00:40:52.140
tell you, you can't embed this, whatever this is, on another site in an iframe.

00:40:52.140 --> 00:40:53.240
Oh, that's cool.

00:40:53.240 --> 00:40:53.400
Right?

00:40:53.400 --> 00:40:55.080
So, yeah, it's super cool.

00:40:55.080 --> 00:40:57.440
And it's like literally three lines of code to do it.

00:40:57.440 --> 00:41:00.060
But because it's middleware, you know you're not forgetting it.

00:41:00.060 --> 00:41:04.220
The whole site just now, all of a sudden, adds the right extra security headers.

00:41:04.220 --> 00:41:04.540
Yeah.

00:41:04.540 --> 00:41:09.300
If you're updating 20 views, then it's time to pause and reflect.

00:41:09.300 --> 00:41:09.580
It's a good time.

00:41:09.580 --> 00:41:10.520
If there's a better way, right?

00:41:10.520 --> 00:41:12.320
Exactly.

00:41:12.320 --> 00:41:12.860
Exactly.

00:41:12.860 --> 00:41:13.640
Yeah, yeah, yeah.

00:41:13.640 --> 00:41:14.220
Cool, cool.

00:41:14.220 --> 00:41:19.160
So speaking of better ways, number nine, you should just put your API keys and your passwords

00:41:19.160 --> 00:41:20.760
right inside the code, right?

00:41:20.760 --> 00:41:20.960
No.

00:41:20.960 --> 00:41:22.200
But not the Vue method, probably.

00:41:22.200 --> 00:41:22.920
No?

00:41:22.920 --> 00:41:23.320
No?

00:41:23.320 --> 00:41:23.980
No?

00:41:23.980 --> 00:41:24.400
Okay.

00:41:24.400 --> 00:41:28.780
You mean like committing your secret key to version control?

00:41:28.780 --> 00:41:30.460
I'm just kidding, yeah.

00:41:30.460 --> 00:41:33.060
I know you're...

00:41:33.060 --> 00:41:34.140
Yeah, it's...

00:41:34.140 --> 00:41:35.640
No, that's an important thing.

00:41:35.640 --> 00:41:39.100
There's stuff that you, of course, should keep out of version control.

00:41:39.100 --> 00:41:47.060
The way to do that is to, for example, have a .env file, which you then ignore in your .gitignore.

00:41:47.060 --> 00:41:51.260
And then those keys are hidden forever, right?

00:41:51.820 --> 00:41:55.760
But you still need to reference in your settings.py.

00:41:55.760 --> 00:42:01.120
And there are two packages that make it pretty friendly and easy.

00:42:01.120 --> 00:42:03.140
First one is Python decouple.

00:42:03.800 --> 00:42:10.100
And you import, for example, from decouple, import config, and maybe CSV, depending on the setting.

00:42:10.100 --> 00:42:15.400
And then you can just do secret key equals config, and then the key, right?

00:42:15.400 --> 00:42:20.180
Secret key, which is the actual secret key line in your .env file.

00:42:20.180 --> 00:42:26.680
So it magically knows that there's an .env file, reads it in, and extracts the key from it.

00:42:26.680 --> 00:42:30.620
So really nice plugin to handle your settings.

00:42:30.620 --> 00:42:31.800
Okay.

00:42:31.800 --> 00:42:32.700
Yeah, this is really cool.

00:42:32.700 --> 00:42:33.540
I hadn't heard of that one.

00:42:33.540 --> 00:42:33.980
That's neat.

00:42:34.040 --> 00:42:40.920
Yeah, I always recommend it to anybody using Django, really, to just pip install Python decouple and make their lives easier.

00:42:40.920 --> 00:42:41.960
Yeah.

00:42:42.060 --> 00:42:48.420
And similarly, for the database, you can use dj-database-url.

00:42:48.420 --> 00:42:53.100
Very similar to decouple that it uses the config method.

00:42:53.100 --> 00:42:57.700
And you can just give it default equals config and the database URL.

00:42:57.700 --> 00:43:02.140
And yeah, so as you see here, we can put the snippet in this show notes.

00:43:02.140 --> 00:43:07.440
The database's dictionary config section is very compact.

00:43:07.440 --> 00:43:08.140
You don't have to...

00:43:08.140 --> 00:43:15.080
Well, obviously, you have to have the right database URL string in your .env file, but it's much easier, it feels.

00:43:15.080 --> 00:43:15.880
Right, right.

00:43:15.880 --> 00:43:22.500
And database strings often contain username, passwords, host names, host ports, all the kind of stuff that you kind of not want to share.

00:43:22.500 --> 00:43:22.820
Yeah.

00:43:22.820 --> 00:43:26.220
No, that needs to be all hidden away.

00:43:26.220 --> 00:43:26.620
Yeah.

00:43:26.620 --> 00:43:30.460
And one tip I do have regarding the .env file.

00:43:30.460 --> 00:43:35.660
So as the .env file is hidden from version control, it won't show up on GitHub.

00:43:35.660 --> 00:43:49.300
So I recommend to commit a .env.example file with the same strings, with the same keys, but of course, so the same, for example, secret key, allowed host, and then, of course, not the actual data.

00:43:49.300 --> 00:43:54.960
But just as a way to communicate to other developers, like this is the .env file we're going to use.

00:43:54.960 --> 00:44:00.340
So copy this to a .env file and put in your credentials there.

00:44:00.340 --> 00:44:00.780
Right.

00:44:00.780 --> 00:44:02.440
But it's a nice way to communicate.

00:44:02.440 --> 00:44:08.740
Type the actual database connection string here, type the actual encryption key here, whatever, AWS key there.

00:44:08.740 --> 00:44:17.020
Right, because the platform has like 20 or 30 of those variables, and if somebody would start developing on that project, how do they know, right, what they said?

00:44:17.140 --> 00:44:23.020
Unless you run server and just start screaming about missing keys.

00:44:23.020 --> 00:44:23.260
Yeah.

00:44:23.260 --> 00:44:24.260
Until it crashes.

00:44:24.260 --> 00:44:25.260
Until it crashes.

00:44:25.260 --> 00:44:27.940
The thing is, though, sometimes those don't crash right away, right?

00:44:27.940 --> 00:44:39.540
Like maybe you have a MailChimp API key, and the only time that's going to scream and crash is when you actually try to register a new user, not log in an existing one, or, you know, something weird like that.

00:44:39.540 --> 00:44:42.180
And then like you push it to production and bad things happen.

00:44:42.180 --> 00:44:43.180
Yeah, it's a silent error.

00:44:43.180 --> 00:44:44.180
That's the worst.

00:44:44.180 --> 00:44:44.180
Yeah.

00:44:44.180 --> 00:44:45.180
Yeah, exactly.

00:44:45.180 --> 00:44:49.180
Yeah, it's better if stuff blows up, then it goes silent.

00:44:49.180 --> 00:44:51.180
Like the center five, right?

00:44:51.180 --> 00:44:53.180
No error should pass silently.

00:44:53.180 --> 00:44:54.180
Yeah.

00:44:54.180 --> 00:44:55.180
That's right.

00:44:55.180 --> 00:44:56.180
That's right.

00:44:56.180 --> 00:44:57.180
So, yeah, it's a big one.

00:44:57.180 --> 00:44:57.180
Yeah.

00:44:57.180 --> 00:44:57.180
Yeah.

00:44:57.180 --> 00:44:58.180
Yeah.

00:44:58.180 --> 00:44:59.180
Yeah.

00:44:59.180 --> 00:45:00.180
Yeah.

00:45:00.180 --> 00:45:01.180
Yeah.

00:45:01.180 --> 00:45:02.180
It's a big one.

00:45:02.180 --> 00:45:05.180
Build in template tags and filters.

00:45:05.180 --> 00:45:08.180
And yeah, there's a bunch of stuff there.

00:45:08.180 --> 00:45:16.180
I think it's just good to, as you're writing a lot of templates, where you're going to reference the objects that you're passing from the views.

00:45:16.180 --> 00:45:19.180
It's kind of handy to know how to do that.

00:45:19.180 --> 00:45:24.180
So I will just go over a few ones we learned about and use.

00:45:24.180 --> 00:45:32.180
So for example, you have a books, the list of book objects, and you look through them, but sometimes there are no books, right?

00:45:32.180 --> 00:45:40.180
So instead of like doing if books, look over the books and else there are no books, you can actually do for empty.

00:45:40.180 --> 00:45:48.180
And that's kind of a construct that Django has that if there are no objects, then it goes into the empty block.

00:45:48.180 --> 00:45:49.180
It's just shorter, right?

00:45:49.180 --> 00:45:50.180
Oh my God.

00:45:50.180 --> 00:45:54.180
Is that proper use for like an else block on a for foreign loop?

00:45:54.180 --> 00:45:55.180
Something like that.

00:45:55.180 --> 00:45:56.180
It might be actually.

00:45:56.180 --> 00:46:04.180
So you've got the syntax, you know, you've got the angle bracket percent for book in books, li curly curly book, right?

00:46:04.180 --> 00:46:10.180
So you're that would be and then you would say and for and that would just print out a bunch of allies with the various books that were in the list.

00:46:10.180 --> 00:46:11.180
Yeah.

00:46:11.180 --> 00:46:13.180
Like you said, you're going to want to deal with it.

00:46:13.180 --> 00:46:14.180
If it's not there.

00:46:14.180 --> 00:46:21.180
So instead of doing a whole nother test and an else, like you can just say four books, li, then percent empty.

00:46:21.180 --> 00:46:23.180
Sorry, there are no books and four.

00:46:23.180 --> 00:46:25.180
And it's all like one continuous thing.

00:46:25.180 --> 00:46:26.180
That's pretty cool.

00:46:26.180 --> 00:46:32.180
I guess there's no shame in doing an if, if else performance wise, I guess, but it's just shorter code, right?

00:46:32.180 --> 00:46:33.180
It's, it's more elegant.

00:46:33.180 --> 00:46:37.180
And, again, it's, it all goes back to like knowing about those constructs.

00:46:37.180 --> 00:46:42.180
Yeah. And it's more expressive. It's like, yeah, here's the thing to put when it's empty, not, oh, I see.

00:46:42.180 --> 00:46:46.180
It means that if this thing is false, then we have nothing.

00:46:46.180 --> 00:46:50.180
But if it's true, then we can go into its book list inside.

00:46:50.180 --> 00:46:53.180
Like, it's just, it's more clear about like, here's the empty case.

00:46:53.180 --> 00:46:55.180
So it's more explicit, right? Yeah.

00:46:55.180 --> 00:47:02.180
Yeah. And also to get really nerdy, like in those templates, you get to a lot of indents already because HTML is like that.

00:47:02.180 --> 00:47:04.180
If you properly format it, it's so bad.

00:47:04.180 --> 00:47:08.180
So that extra if else you can save theirs, it's just nice, right?

00:47:08.180 --> 00:47:10.180
Two to four spaces less. It's good.

00:47:10.180 --> 00:47:11.180
Yeah.

00:47:11.180 --> 00:47:16.180
Talk Python To Me is partially supported by our training courses.

00:47:16.180 --> 00:47:19.180
How does your team keep their Python skills sharp?

00:47:19.180 --> 00:47:23.180
How do you make sure new hires get started fast and learn the Pythonic way?

00:47:23.180 --> 00:47:32.180
If the answer is a series of boring videos that don't inspire or a subscription service you pay way too much for and use way too little, listen up.

00:47:32.180 --> 00:47:36.180
At Talk Python training, we have enterprise tiers for all of our courses.

00:47:36.180 --> 00:47:40.180
Get just the one course you need for your team with full reporting and monitoring.

00:47:40.180 --> 00:47:48.180
Or ditch that unused subscription for our course bundles, which include all the courses and you pay about the same price as a subscription once.

00:47:48.180 --> 00:47:54.180
For details, visit training.talkpython.fm/business or just email sales@talkpython.fm.

00:47:54.180 --> 00:48:00.180
Then what we use a lot is overriding blocks.

00:48:00.180 --> 00:48:06.180
So in the base template, you can define a block, for example, title, title of the website.

00:48:06.180 --> 00:48:10.180
And then it's again an example like Fast-Based Views of Inheritance.

00:48:10.180 --> 00:48:16.180
Then if you go into the child template, you can just specify a block title and then give it some other content.

00:48:16.180 --> 00:48:20.180
So in the base template, you kind of set the expectations.

00:48:20.180 --> 00:48:22.180
There are going to be blocks of ABC.

00:48:22.180 --> 00:48:26.180
And then in the child template, you can then actually populate those blocks.

00:48:26.180 --> 00:48:34.180
And I think the advantage is that sometimes a title, for example, needs to go high up in the order of HTML.

00:48:34.180 --> 00:48:39.180
So you have to kind of the order of the elements on the page, you have to kind of have it in your base template.

00:48:39.180 --> 00:48:44.180
And so it's a nice way to set it there and then come back in the child and set it to something else.

00:48:44.180 --> 00:48:45.180
That makes sense.

00:48:45.180 --> 00:48:49.180
Yeah, I love these types of things that I have on all the sites that I run.

00:48:49.180 --> 00:48:51.180
I have three or four that are always there.

00:48:51.180 --> 00:48:53.180
Obviously, the main content, right?

00:48:53.180 --> 00:48:56.180
Like whatever the page content is going to be, there's going to be one for that.

00:48:56.180 --> 00:49:06.180
This title one is super important because you want to be able to set like literally the angle bracket title, but there's not really a good way to get into that space from a base template, a drive template, right?

00:49:06.180 --> 00:49:08.180
It's got to like reach and poke a hole up there.

00:49:08.180 --> 00:49:13.180
The two other that I always have are like extra CSS and extra JavaScript.

00:49:13.180 --> 00:49:22.180
So like in this page, in this few pages, I need to have one more CSS file or I need to have like this one page is going to use Vue.js and be like a single page app.

00:49:22.180 --> 00:49:23.180
But not the rest of the stuff.

00:49:23.180 --> 00:49:27.180
So on this one, I'm going to like punch the Vue.js stuff at the end or something like that.

00:49:27.180 --> 00:49:28.180
Oh, that's cool.

00:49:28.180 --> 00:49:29.180
Yeah.

00:49:29.180 --> 00:49:34.180
For example, maybe on your checkout page, you want to have to stripe JavaScript library, but not on all pages, right?

00:49:34.180 --> 00:49:35.180
Yeah, not on all of them.

00:49:35.180 --> 00:49:42.180
So you can do that extra JavaScript and then have that script import there, although it might not be nice to have that.

00:49:42.180 --> 00:49:45.180
I mean, strict HTML, but you know.

00:49:45.180 --> 00:49:48.180
No, no, I'm pretty sure like that's probably exactly what I have.

00:49:48.180 --> 00:49:49.180
That's a perfect use case.

00:49:49.180 --> 00:49:51.180
It's something like that only appears on a few pages.

00:49:51.180 --> 00:49:53.180
You don't want to bundle the stripe.

00:49:53.180 --> 00:49:59.180
I don't even know if it makes sense in terms of their API to like minify and bundle their JavaScript with yours.

00:49:59.180 --> 00:50:01.180
It needs to come from their site live.

00:50:01.180 --> 00:50:02.180
And so yeah, exactly.

00:50:02.180 --> 00:50:06.180
But you want to stick it in the right place, not just randomly in the middle of the page.

00:50:06.180 --> 00:50:09.180
So these little like block overrides are just perfect.

00:50:09.180 --> 00:50:10.180
Yeah.

00:50:10.180 --> 00:50:11.180
Cool, cool.

00:50:11.180 --> 00:50:14.180
So never hard code URLs or static files.

00:50:14.180 --> 00:50:26.180
You can set the static at the top of your template and then just reference static and then the relative URL or URL to link to another page on your web app.

00:50:26.180 --> 00:50:33.180
You can just use the URL and then reference the name of the URL as you set that in your URLs.py.

00:50:33.180 --> 00:50:47.180
So the example here, we have curly braces percentage and then URL keyword and then the string login and that then matches to the login path in the URLs.py because we named it that explicitly.

00:50:47.180 --> 00:50:48.180
That's a good thing to know.

00:50:48.180 --> 00:50:54.180
Don't go hard code URLs because you switch domain or whatever and that will break.

00:50:54.180 --> 00:50:55.180
Right.

00:50:55.180 --> 00:50:55.180
Yeah.

00:50:55.180 --> 00:50:56.180
Yeah.

00:50:56.180 --> 00:50:56.180
Super cool.

00:50:56.180 --> 00:50:58.180
Other thing I like is filters.

00:50:58.180 --> 00:51:06.180
So I have a tags.py file and we have a bunch of register.filter decorators.

00:51:06.180 --> 00:51:18.180
So for example, here, we wrote one that is new with that receives a daytime and that looks if that daytime is less than seven days in the past.

00:51:18.180 --> 00:51:20.180
So if something is a week old.

00:51:20.180 --> 00:51:22.180
So and then we use it in the template.

00:51:22.180 --> 00:51:28.180
For example, we have by dot edit and that's again that edit field that was with the outer now.

00:51:28.180 --> 00:51:31.180
And then we can do pipe is new goes a bit into the weeds.

00:51:31.180 --> 00:51:39.180
But basically applying that is new filter on a date in the template, you can kind of play with it.

00:51:39.180 --> 00:51:46.180
And what we do, for example, is to give it a class and then I guess show a new image on it.

00:51:46.180 --> 00:51:47.180
Put a little new badge or something on it.

00:51:47.180 --> 00:51:48.180
Yeah.

00:51:48.180 --> 00:51:49.180
Uh huh.

00:51:49.180 --> 00:51:50.180
Yeah.

00:51:50.180 --> 00:51:52.180
I guess if we post the snippet, it makes more sense.

00:51:52.180 --> 00:52:00.180
But yeah, basically, it's a way to write a filter and you don't have to do a lot of if else and complex logic in the template.

00:52:00.180 --> 00:52:07.180
But you have that actually in the back end and then you can just use it as on the object in the template.

00:52:07.180 --> 00:52:08.180
I guess.

00:52:08.180 --> 00:52:08.180
Yeah.

00:52:08.180 --> 00:52:10.180
Let's show the code and it just.

00:52:10.180 --> 00:52:11.180
Yeah.

00:52:11.180 --> 00:52:18.180
But yeah, it's a cool way to basically put a little pipe filtering operator on there and it runs a little bit of custom code that you write.

00:52:18.180 --> 00:52:19.180
Yeah.

00:52:19.180 --> 00:52:20.180
You write it in Python.

00:52:20.180 --> 00:52:21.180
It runs it in templates.

00:52:21.180 --> 00:52:22.180
Yeah, exactly.

00:52:22.180 --> 00:52:23.180
Yeah.

00:52:23.180 --> 00:52:24.180
That's well stated.

00:52:24.180 --> 00:52:25.180
I think.

00:52:25.180 --> 00:52:26.180
Yeah.

00:52:26.180 --> 00:52:27.180
Yeah.

00:52:27.180 --> 00:52:30.180
So when I'm looking through this, you're talking about templates a lot.

00:52:30.180 --> 00:52:47.180
A little while ago, we talked about how it was nice to start out with some code or when you're creating these pages, maybe the database is empty, but you want some stuff in the page because it's super hard to actually see what's going on and design the pages without some content.

00:52:47.180 --> 00:52:50.180
So maybe some kind of lorem ipsum.

00:52:50.180 --> 00:52:53.180
Yeah, that's one that comes out of the box, right?

00:52:53.180 --> 00:52:58.180
I was so surprised that Django has lorem ipsum built into it.

00:52:58.180 --> 00:53:00.180
Must be in high demand, you know?

00:53:00.180 --> 00:53:01.180
Exactly.

00:53:01.180 --> 00:53:04.180
Now, it would be better.

00:53:04.180 --> 00:53:05.180
I mean, this is pretty good.

00:53:05.180 --> 00:53:12.180
It would be better if it were hipster ipsum, which is like lorem ipsum, but speaks.

00:53:12.180 --> 00:53:17.180
It speaks hipster speak, I guess you would call it.

00:53:17.180 --> 00:53:27.180
Like Stumptown, XOXO, keytars, semiotics, PBR, and MP, street art, blue bottle before they sold out, pop up mixtape and so on.

00:53:27.180 --> 00:53:29.180
Of course, Portland shows up in here.

00:53:29.180 --> 00:53:30.180
That's awesome.

00:53:30.180 --> 00:53:31.180
Yeah, yeah.

00:53:31.180 --> 00:53:39.180
So anyway, if people are looking for like lorem ipsum filler, there's actually like a lorem ipsum operation like empty as well in Django.

00:53:39.180 --> 00:53:40.180
Wow.

00:53:40.180 --> 00:53:41.180
That's really cool.

00:53:41.180 --> 00:53:42.180
Yeah, let me see.

00:53:42.180 --> 00:53:44.180
Let me pull it really quick just to see the tag.

00:53:44.180 --> 00:53:45.180
It is.

00:53:45.180 --> 00:53:52.180
Yeah, you just do percent lorem count method randomness close percent close curly.

00:53:52.180 --> 00:53:53.180
And boom, out it comes.

00:53:53.180 --> 00:53:54.180
It's beautiful.

00:53:54.180 --> 00:53:56.180
Yeah, like a lorem 2w random.

00:53:56.180 --> 00:53:58.180
Well, I'll put two random Latin words.

00:53:58.180 --> 00:53:59.180
How cool is that?

00:53:59.180 --> 00:54:03.180
Yeah, so that's really cool actually that it's built right into the templates.

00:54:03.180 --> 00:54:07.180
And what's nice is you don't have to have like paragraphs of junk that you're going to then delete.

00:54:07.180 --> 00:54:10.180
Literally like just a little bit with like I want 20 words here.

00:54:10.180 --> 00:54:11.180
Yeah.

00:54:11.180 --> 00:54:12.180
Right.

00:54:12.180 --> 00:54:13.180
So super cool.

00:54:13.180 --> 00:54:23.180
Well, remember when you were maybe was recording one time like a pretty print of how much time a comment was posted like four days and six hours ago.

00:54:23.180 --> 00:54:27.180
So I actually thought that was humanized and I guess humanized can do that.

00:54:27.180 --> 00:54:31.180
But it's actually here on the text page time since.

00:54:31.180 --> 00:54:32.180
Yeah.

00:54:32.180 --> 00:54:33.180
Oh, really?

00:54:33.180 --> 00:54:38.180
Like it takes a daytime and then it will like humanize it into half an hour ago, an hour ago, a week ago.

00:54:38.180 --> 00:54:39.180
Yeah.

00:54:39.180 --> 00:54:40.180
Oh, that is super cool.

00:54:40.180 --> 00:54:40.180
Yeah.

00:54:40.180 --> 00:54:41.180
Yeah, I love to see dates like that.

00:54:41.180 --> 00:54:41.180
Yeah.

00:54:41.180 --> 00:54:42.180
Yeah.

00:54:42.180 --> 00:54:45.180
I use that on our on our messages and forums.

00:54:45.180 --> 00:54:46.180
It's super nice.

00:54:46.180 --> 00:54:47.180
This is really nice.

00:54:47.180 --> 00:54:50.180
It's perfect nicer, you know, and don't have to write that logic, right?

00:54:50.180 --> 00:54:51.180
You just comes in a template.

00:54:51.180 --> 00:54:53.180
Perfect.

00:54:53.180 --> 00:54:54.180
That's awesome.

00:54:54.180 --> 00:54:55.180
We're spoiled batteries.

00:54:55.180 --> 00:54:56.180
All right.

00:54:56.180 --> 00:54:57.180
Are you ready for a bonus round?

00:54:57.180 --> 00:54:57.180
Yeah.

00:54:57.180 --> 00:54:58.180
Yeah.

00:54:58.180 --> 00:54:59.180
Yeah.

00:54:59.180 --> 00:55:00.180
Let's do a bonus round.

00:55:00.180 --> 00:55:01.180
Let's do it.

00:55:01.180 --> 00:55:02.180
All right.

00:55:02.180 --> 00:55:03.180
So, yeah.

00:55:03.180 --> 00:55:04.180
Bonus number one hit us.

00:55:04.180 --> 00:55:05.180
Okay.

00:55:05.180 --> 00:55:07.180
And I've not used this that much, but playing with it yesterday, it's actually pretty cool.

00:55:07.180 --> 00:55:09.180
It's a Django extensions.

00:55:09.180 --> 00:55:12.180
And I will just highlight a few things you can do.

00:55:12.180 --> 00:55:19.180
You can do Python, manage the pie graph models, and then minus a, minus O, and then a PNG.

00:55:19.180 --> 00:55:27.180
And it will make a PNG or ping, whatever you call it, of all your models in your database.

00:55:27.180 --> 00:55:32.180
So it'll create like a UML diagram of your Django ORM models, basically.

00:55:32.180 --> 00:55:33.180
Yeah.

00:55:33.180 --> 00:55:34.180
Something like that and how they're linked together.

00:55:34.180 --> 00:55:35.180
Yeah.

00:55:35.180 --> 00:55:36.180
Mine is like super small.

00:55:36.180 --> 00:55:39.180
I know if it's formally UML, but yeah, it's definitely more or less.

00:55:39.180 --> 00:55:40.180
Yeah.

00:55:40.180 --> 00:55:44.180
It's so small because there are so many models in our thing, but pretty cool.

00:55:44.180 --> 00:55:45.180
Exactly.

00:55:45.180 --> 00:55:49.180
Like how you can visualize that, I guess, if you would, you know, get more developers on

00:55:49.180 --> 00:55:50.180
board.

00:55:50.180 --> 00:55:51.180
Yeah.

00:55:51.180 --> 00:55:52.180
And you talked about shell.

00:55:52.180 --> 00:55:53.180
Yeah.

00:55:53.180 --> 00:55:57.180
I mentioned shell before, and there's actually a shell underscore plus that comes with the Django

00:55:57.180 --> 00:55:58.180
extensions.

00:55:58.180 --> 00:56:03.180
And then you can also give it dash as IPython, and then you drop into an IPython shell.

00:56:03.180 --> 00:56:06.180
And it also imports all your models.

00:56:06.180 --> 00:56:09.180
So you don't have to import them manually, but it's pretty convenient.

00:56:09.180 --> 00:56:16.180
And not part of the Django extension, but I did want to mention is a plugin called Django

00:56:16.180 --> 00:56:21.180
dash tiny MCE, which gives you a rich text editing field.

00:56:21.180 --> 00:56:22.180
And it's pretty sweet.

00:56:22.180 --> 00:56:23.180
Yeah.

00:56:23.180 --> 00:56:24.180
Yeah.

00:56:24.180 --> 00:56:28.180
So tiny MCE is like a WYSIWYG, what you see what you get, HTML editor, right?

00:56:28.180 --> 00:56:29.180
Yes.

00:56:29.180 --> 00:56:30.180
Yeah.

00:56:30.180 --> 00:56:32.180
So this like brings it in or something like makes it easy to use in Django.

00:56:32.180 --> 00:56:33.180
Yeah.

00:56:33.180 --> 00:56:35.180
Well, you would use the HTML field.

00:56:35.180 --> 00:56:38.180
So from tiny MCE dot models import HTML field.

00:56:38.180 --> 00:56:43.180
So it would of course cause another migration, but yeah, it's, it's pretty easy to use.

00:56:43.180 --> 00:56:45.180
And, it's a huge improvement for the end user.

00:56:45.180 --> 00:56:46.180
Right.

00:56:46.180 --> 00:56:47.180
So, yeah, that's super cool.

00:56:47.180 --> 00:56:50.180
You know, while you're on the topic of that, I'll throw one more out.

00:56:50.180 --> 00:56:52.180
There is simple MDE.com.

00:56:52.180 --> 00:57:01.180
So tiny MCE is cool, but I think the ultimate outcome is HTML and simple MDE is a beautiful

00:57:01.180 --> 00:57:02.180
Markdown editor.

00:57:02.180 --> 00:57:03.180
That's just pure JavaScript.

00:57:03.180 --> 00:57:04.180
Yeah.

00:57:04.180 --> 00:57:05.180
Pure client side JavaScript.

00:57:05.180 --> 00:57:07.180
It has like hotkeys.

00:57:07.180 --> 00:57:13.180
It has side by side secretized scrolling all like even the Markdown, like the text in Markdown,

00:57:13.180 --> 00:57:19.180
even though it's plain text, it's like the headings are bigger than the code bits and whatnot.

00:57:19.180 --> 00:57:21.180
It's, it's really easy to throw it on a text area.

00:57:21.180 --> 00:57:22.180
Looks super nice.

00:57:22.180 --> 00:57:23.180
Yeah.

00:57:23.180 --> 00:57:24.180
Yeah.

00:57:24.180 --> 00:57:25.180
Cool.

00:57:25.180 --> 00:57:26.180
Yeah.

00:57:26.180 --> 00:57:27.180
It's very nice.

00:57:27.180 --> 00:57:28.180
Just turn off spell checker.

00:57:28.180 --> 00:57:29.180
It'll tell you everything's misspelled.

00:57:29.180 --> 00:57:30.180
All right.

00:57:30.180 --> 00:57:31.180
Bonus number two.

00:57:31.180 --> 00:57:32.180
Keep it flying.

00:57:32.180 --> 00:57:33.180
Uh, salary.

00:57:33.180 --> 00:57:34.180
Yeah.

00:57:34.180 --> 00:57:38.180
Salary really want to mention that because, we're especially in the enterprise where I

00:57:38.180 --> 00:57:39.180
see Django, I see salary.

00:57:39.180 --> 00:57:45.180
Like it's just always tasks that are, that have to be offloaded and be done async wise.

00:57:45.180 --> 00:57:46.180
It makes sense.

00:57:46.180 --> 00:57:47.180
Right.

00:57:47.180 --> 00:57:48.180
Right.

00:57:48.180 --> 00:57:51.180
It's not meant to be done in the context of a direct request.

00:57:51.180 --> 00:57:53.180
I learned this the hard way with my site.

00:57:53.180 --> 00:57:59.180
So there's a backend that will let me email the people in a particular course.

00:57:59.180 --> 00:58:02.180
Like, so I could go, if there's an update, like a problem with the course, I can go into

00:58:02.180 --> 00:58:05.180
that course to email everybody who subscribed here.

00:58:05.180 --> 00:58:08.180
And then eventually the first time I did, I didn't really think this all the way through.

00:58:08.180 --> 00:58:13.180
I went in and I filled out an email, I hit go and it just sat there and it spun and it

00:58:13.180 --> 00:58:14.180
spun and it spun.

00:58:14.180 --> 00:58:17.180
And then eventually it timed out after like 20 seconds and crashed.

00:58:17.180 --> 00:58:18.180
I'm like, Oh no.

00:58:18.180 --> 00:58:23.180
So it emailed like thousands of people, but I don't know who actually got the email.

00:58:23.180 --> 00:58:26.180
Cause I said everybody and it got partway through and then crashed.

00:58:26.180 --> 00:58:28.180
And so then what I do, I email them again.

00:58:28.180 --> 00:58:29.180
The first half will get the double.

00:58:29.180 --> 00:58:31.180
The second half didn't get it at all.

00:58:31.180 --> 00:58:33.180
Like I'm just like, what have I done?

00:58:33.180 --> 00:58:34.180
What a fool.

00:58:34.180 --> 00:58:34.180
Yeah.

00:58:34.180 --> 00:58:35.180
So don't do that.

00:58:35.180 --> 00:58:36.180
That's a bad experience.

00:58:36.180 --> 00:58:38.180
But now your Sunday evening will be shorter, right?

00:58:38.180 --> 00:58:42.180
Because you know that ORM and you can, but yeah, you would have to write some sort of

00:58:42.180 --> 00:58:45.180
script to see who got emailed or not, you know?

00:58:45.180 --> 00:58:46.180
Yeah, exactly.

00:58:46.180 --> 00:58:48.180
Like scrape the logs or something, right?

00:58:48.180 --> 00:58:52.180
Like I basically decided, well, I guess the other half of the class is just not getting that

00:58:52.180 --> 00:58:53.180
message.

00:58:53.180 --> 00:58:54.180
I'm sorry.

00:58:54.180 --> 00:58:54.180
Yeah.

00:58:54.180 --> 00:58:55.180
So now it's salary, right?

00:58:55.180 --> 00:59:00.180
You would click send and you would be immediately back at the, from the request cycle.

00:59:00.180 --> 00:59:02.180
So back at your interface.

00:59:02.180 --> 00:59:03.180
Right.

00:59:03.180 --> 00:59:06.180
Dump it in a queue, throw it at salary and say, start emailing these people.

00:59:06.180 --> 00:59:08.180
It's on the queue and it's all happening in the background.

00:59:08.180 --> 00:59:09.180
Yeah.

00:59:09.180 --> 00:59:16.180
So that's, then, you know, for, for other things like heavy file processing, anything intensive,

00:59:16.180 --> 00:59:18.180
send it to you, right?

00:59:18.180 --> 00:59:21.180
Because the user shouldn't be waiting for that.

00:59:21.180 --> 00:59:24.180
I think even for some of my stuff, I started doing logging on a queue.

00:59:24.180 --> 00:59:28.180
I'm just like, I don't want this, whatever this is, I don't want it to like be part of

00:59:28.180 --> 00:59:29.180
this request.

00:59:29.180 --> 00:59:31.180
I'm just going to throw it over there and we'll get to it in a minute.

00:59:31.180 --> 00:59:32.180
You know what I mean?

00:59:32.180 --> 00:59:33.180
Yeah.

00:59:33.180 --> 00:59:34.180
Yeah.

00:59:34.180 --> 00:59:35.180
Yeah.

00:59:35.180 --> 00:59:36.180
And a quick debugging tip.

00:59:36.180 --> 00:59:40.180
If you want to debug salary, actually, sometimes it's convenient to not send it to a queue

00:59:40.180 --> 00:59:42.180
and have it as part of your main process.

00:59:42.180 --> 00:59:48.180
And you can set salary_always_eager equals true in your settings.

00:59:48.180 --> 00:59:55.180
And then all the, then it doesn't go to a task queue anymore, but it goes straight to your main console where you have run server running.

00:59:55.180 --> 00:59:57.180
And it's just easier to debug.

00:59:57.180 --> 01:00:04.180
So I just want to mention that tip that it's not very well documented, but it definitely helped me on a few occasions.

01:00:04.180 --> 01:00:05.180
Yeah.

01:00:05.180 --> 01:00:06.180
Very cool.

01:00:06.180 --> 01:00:07.180
That's awesome.

01:00:07.180 --> 01:00:08.180
I definitely need to make better use of salary and what I'm doing as well.

01:00:08.180 --> 01:00:09.180
All right.

01:00:09.180 --> 01:00:10.180
Last one.

01:00:10.180 --> 01:00:11.180
This one I just threw on there.

01:00:11.180 --> 01:00:12.180
So I'll tell you about it, Bob.

01:00:12.180 --> 01:00:19.180
I told you that there's like all these headers you should be putting into your code and to your HTTP response.

01:00:19.180 --> 01:00:30.180
And if you go look at the OWASP top 10 web vulnerabilities, the open web security group or whatever that OWASP stands for, they go through and they keep track of all the problems.

01:00:30.180 --> 01:00:31.180
Right.

01:00:31.180 --> 01:00:46.180
And some of those can be, you know, cross site scripting, embedding your stuff and something that looks like your site, like an embed something that basically is your site in an iframe, but then put a transparent overlay that captures keystrokes for like say username and password, all sorts of bad stuff like that.

01:00:46.180 --> 01:00:48.180
So there's all these headers you should send back.

01:00:48.180 --> 01:00:54.180
So if you use this thing called secure PI, which is a github.com type slash type error slash your dot PI.

01:00:54.180 --> 01:00:59.180
And I don't know how they got this, but it's pip install secure, which is incredible that that's still available.

01:00:59.180 --> 01:01:08.180
But the idea is it just on any of these frameworks, including Django, it will just as middleware, just drop in all the changes you need.

01:01:08.180 --> 01:01:11.180
And it's like for Django, let's see, what does it take?

01:01:11.180 --> 01:01:12.180
Oh, that's just the Django.

01:01:12.180 --> 01:01:13.180
Just the Django.

01:01:13.180 --> 01:01:16.180
There's a super simple integration on how to set it up.

01:01:16.180 --> 01:01:17.180
I had to pull up the docs.

01:01:17.180 --> 01:01:19.180
Anyway, it's really super easy.

01:01:19.180 --> 01:01:28.180
And then you get things like strict transport security, cross site protection, X frame options, the same origin, like all those kinds of things that you would like to have that you might forget.

01:01:28.180 --> 01:01:30.180
And because it's middleware, it's just like magic.

01:01:30.180 --> 01:01:31.180
Wow, that's really cool.

01:01:31.180 --> 01:01:31.180
Yeah.

01:01:31.180 --> 01:01:35.180
And it works with like 15 different frameworks or 10 different frameworks.

01:01:35.180 --> 01:01:38.180
It's really almost no matter what you're using, it works with it, you know?

01:01:38.180 --> 01:01:39.180
Yeah.

01:01:39.180 --> 01:01:40.180
Wow.

01:01:40.180 --> 01:01:44.180
And you just added to middleware with app dot secure middleware dot set secure headers.

01:01:44.180 --> 01:01:45.180
Yeah.

01:01:45.180 --> 01:01:46.180
Really cool.

01:01:46.180 --> 01:01:47.180
Yeah.

01:01:47.180 --> 01:01:53.180
It's literally like one function, like a simple decorator that you write more or less simple, simple middleware.

01:01:53.180 --> 01:01:54.180
Yeah.

01:01:54.180 --> 01:01:55.180
I just added in there and off it goes.

01:01:55.180 --> 01:01:57.180
So it integrates just like you'd expect.

01:01:57.180 --> 01:01:59.180
Anyway, that's just, it's so easy.

01:01:59.180 --> 01:02:01.180
It's so easy to add that security.

01:02:01.180 --> 01:02:08.180
And who knows if something else comes out that you're supposed to start doing, you know, secure dot PI might get updated and your site will just magically be more secure.

01:02:08.180 --> 01:02:10.180
And you don't have to think about that, which is always nice.

01:02:10.180 --> 01:02:11.180
Yeah.

01:02:11.180 --> 01:02:12.180
Theoretically.

01:02:12.180 --> 01:02:13.180
Pretty cool.

01:02:13.180 --> 01:02:14.180
Thanks.

01:02:14.180 --> 01:02:15.180
Yeah.

01:02:15.180 --> 01:02:16.180
Yeah.

01:02:16.180 --> 01:02:17.180
Yeah.

01:02:17.180 --> 01:02:18.180
You bet.

01:02:18.180 --> 01:02:19.180
Of course.

01:02:19.180 --> 01:02:20.180
Of course.

01:02:20.180 --> 01:02:21.180
All right.

01:02:21.180 --> 01:02:22.180
Well, we did it.

01:02:22.180 --> 01:02:23.180
We didn't take four hours to cover that, even though it did take some, some time.

01:02:23.180 --> 01:02:26.180
I mean, we, you guys who are listening, you can't see there's a ton of details.

01:02:26.180 --> 01:02:27.180
We kind of skipped over.

01:02:27.180 --> 01:02:28.180
We could have gone into it.

01:02:28.180 --> 01:02:29.180
Right.

01:02:29.180 --> 01:02:32.180
Like, like you said, with manage that PI is probably its whole episode.

01:02:32.180 --> 01:02:36.180
For example, we've got Django test, but Django rest framework.

01:02:36.180 --> 01:02:37.180
We got wagtail.

01:02:37.180 --> 01:02:38.180
We got century.

01:02:38.180 --> 01:02:40.180
Then go channels.

01:02:40.180 --> 01:02:42.180
We haven't even touched on authentication.

01:02:42.180 --> 01:02:43.180
There's all sorts of stuff.

01:02:43.180 --> 01:02:43.180
Right.

01:02:43.180 --> 01:02:45.180
That you didn't mention century.

01:02:45.180 --> 01:02:46.180
You didn't mention.

01:02:46.180 --> 01:02:46.180
I did.

01:02:46.180 --> 01:02:48.180
But yeah, that was an official item.

01:02:48.180 --> 01:02:49.180
But yeah.

01:02:49.180 --> 01:02:50.180
Yeah.

01:02:50.180 --> 01:02:51.180
Yeah.

01:02:51.180 --> 01:02:52.180
Yeah.

01:02:52.180 --> 01:02:53.180
Century is cool.

01:02:53.180 --> 01:02:54.180
There were some 500 errors.

01:02:54.180 --> 01:02:55.180
We would have never known about.

01:02:55.180 --> 01:02:56.180
Well, not affiliated or anything.

01:02:56.180 --> 01:02:57.180
Oh, it's real.

01:02:57.180 --> 01:02:58.180
Yeah.

01:02:58.180 --> 01:02:59.180
They're so rare.

01:02:59.180 --> 01:03:00.180
They're so rare.

01:03:00.180 --> 01:03:01.180
And they're under weird edge cases.

01:03:01.180 --> 01:03:10.180
And if you run a website, you should definitely install something like century or roll bar or something like that, where you get notifications anytime there's an error.

01:03:10.180 --> 01:03:11.180
At first, it's annoying.

01:03:11.180 --> 01:03:14.180
Like there's certain things that you can't control.

01:03:14.180 --> 01:03:22.180
Well, somebody will try to, you know, post a binary thing to some part of your API where it expects like Latin characters.

01:03:22.180 --> 01:03:24.180
You'll get like a non Latin parse area.

01:03:24.180 --> 01:03:28.180
Like, okay, well, there's nothing I could do about this, but you could start muting those types of things.

01:03:28.180 --> 01:03:31.180
And eventually you'll be like, oh, I got these errors.

01:03:31.180 --> 01:03:44.180
And literally, I would say more, certainly more than one time, I have seen an error come in over one of those channels, figured out what was going on, fixed it and then sent a message to the user and said, I'm sorry, I saw you had this error.

01:03:44.180 --> 01:03:45.180
Here's I fixed it.

01:03:45.180 --> 01:03:47.180
And they're like, well, I was just about to write you.

01:03:47.180 --> 01:03:52.180
This is crazy that you actually, I didn't even tell you there was an error and you fixed it and contacted me.

01:03:52.180 --> 01:03:53.180
That's so cool.

01:03:53.180 --> 01:03:53.180
Right?

01:03:53.180 --> 01:03:54.180
Yeah.

01:03:54.180 --> 01:03:55.180
Yeah.

01:03:55.180 --> 01:03:57.180
Because often they 500 error, this sucks and they go away.

01:03:57.180 --> 01:03:58.180
Right.

01:03:58.180 --> 01:03:59.180
Exactly.

01:03:59.180 --> 01:04:00.180
Exactly.

01:04:00.180 --> 01:04:01.180
And now you're proactive about it.

01:04:01.180 --> 01:04:03.180
So that, that, that really makes a difference.

01:04:03.180 --> 01:04:03.180
Yeah.

01:04:03.180 --> 01:04:14.180
And even if they're mad and they go away and they've lost faith, whatever, like, you know, there's nothing you can do to change the past, but it's, your site is better every time you catch one of these errors that you wouldn't have caught.

01:04:14.180 --> 01:04:15.180
So yeah.

01:04:15.180 --> 01:04:20.180
But I agree that a lot of time it's like edge cases, but sometimes there's something that, that might indicate a bigger problem.

01:04:20.180 --> 01:04:21.180
That's, that's good to know.

01:04:21.180 --> 01:04:22.180
Right.

01:04:22.180 --> 01:04:27.180
Or you deploy something that's bad and all of a sudden it's like gone crazy and your email and text messages are full.

01:04:27.180 --> 01:04:29.180
You're like, whoa, whoa, whoa, I better go check this out.

01:04:29.180 --> 01:04:29.180
It's not good.

01:04:29.180 --> 01:04:30.180
Yeah.

01:04:30.180 --> 01:04:31.180
It feels a bit safer, right?

01:04:31.180 --> 01:04:35.180
To do a Git push to having that, it's a bit safer.

01:04:35.180 --> 01:04:36.180
Yeah.

01:04:36.180 --> 01:04:37.180
Yeah.

01:04:37.180 --> 01:04:39.180
At least you'll see the smoke if it catches on fire.

01:04:39.180 --> 01:04:40.180
Yeah.

01:04:40.180 --> 01:04:41.180
Yeah.

01:04:41.180 --> 01:04:42.180
All right.

01:04:42.180 --> 01:04:44.180
Well, these are really fun things to cover, Bob.

01:04:44.180 --> 01:04:46.180
And I think people really enjoy them.

01:04:46.180 --> 01:04:50.180
We can put together some of them just, and we'll try to link to the others in the show notes.

01:04:50.180 --> 01:04:51.180
Yeah.

01:04:51.180 --> 01:04:52.180
Cool.

01:04:52.180 --> 01:04:53.180
We'll do.

01:04:53.180 --> 01:04:54.180
I'll try to answer the final two questions.

01:04:54.180 --> 01:04:55.180
Oh,

01:04:55.180 --> 01:04:58.180
so if you're going to write some Django code, what editor to use?

01:04:58.180 --> 01:04:59.180
Yes.

01:04:59.180 --> 01:05:00.180
I still use him.

01:05:00.180 --> 01:05:01.180
Yeah.

01:05:01.180 --> 01:05:02.180
I don't go away.

01:05:02.180 --> 01:05:04.180
Yeah.

01:05:04.180 --> 01:05:07.180
It's, I always say it's a steep learning curve, right?

01:05:07.180 --> 01:05:13.180
Uh, the beginning was very awkward using that editor, but it has this compound effect.

01:05:13.180 --> 01:05:18.180
Once you get to a lot of shortcuts and you just become pretty fast in it and it's very

01:05:18.180 --> 01:05:21.180
convenient, but I'm missing out on all the ID features, I guess.

01:05:21.180 --> 01:05:22.180
Yeah.

01:05:22.180 --> 01:05:23.180
Yeah.

01:05:23.180 --> 01:05:24.180
That's cool.

01:05:24.180 --> 01:05:25.180
You want to hear a little Vim joke?

01:05:25.180 --> 01:05:26.180
Yeah.

01:05:26.180 --> 01:05:27.180
Yeah.

01:05:27.180 --> 01:05:28.180
Okay.

01:05:28.180 --> 01:05:29.180
Yeah.

01:05:29.180 --> 01:05:30.180
I might.

01:05:30.180 --> 01:05:31.180
Yeah.

01:05:31.180 --> 01:05:32.180
So how, how do you generate a random string?

01:05:32.180 --> 01:05:33.180
Yeah.

01:05:33.180 --> 01:05:34.180
I know.

01:05:34.180 --> 01:05:35.180
Trying to exit it.

01:05:35.180 --> 01:05:39.180
You put a first year computer science student in Vim and ask them to exit.

01:05:39.180 --> 01:05:40.180
Yeah.

01:05:40.180 --> 01:05:41.180
That's so good.

01:05:41.180 --> 01:05:42.180
Yeah.

01:05:42.180 --> 01:05:42.180
Yeah.

01:05:42.180 --> 01:05:43.180
It's all good.

01:05:43.180 --> 01:05:44.180
Right.

01:05:44.180 --> 01:05:48.180
And then we covered so many packages here, but maybe just throw out a couple of packages

01:05:48.180 --> 01:05:50.180
that you're like, man, people need to know about this thing.

01:05:50.180 --> 01:05:51.180
Yeah.

01:05:51.180 --> 01:05:57.180
I'm going to, kind of abuse the fact that we had to leave some out to pull them in here.

01:05:57.180 --> 01:06:00.180
So we didn't talk about, the bonus round, the bonus bonus.

01:06:00.180 --> 01:06:07.180
So Django all out is a great package or plugin to, yeah, to really make your authentication

01:06:07.180 --> 01:06:08.180
in Django easy.

01:06:08.180 --> 01:06:09.180
And, and Django rest framework.

01:06:09.180 --> 01:06:11.180
And, and Django rest framework.

01:06:11.180 --> 01:06:15.180
Um, I still find it a great, great package offer to, to build APIs in Django.

01:06:15.180 --> 01:06:22.180
But if it doesn't have to be Django, then let's throw in Python date util, which is really cool.

01:06:22.180 --> 01:06:23.180
Yeah.

01:06:23.180 --> 01:06:24.180
Yeah.

01:06:24.180 --> 01:06:25.180
Python date util is awesome.

01:06:25.180 --> 01:06:27.180
I love its ability to parse stuff without me.

01:06:27.180 --> 01:06:28.180
I think too much about it.

01:06:28.180 --> 01:06:30.180
The fuzzy, fuzzy parsing, right?

01:06:30.180 --> 01:06:31.180
The, yes, exactly.

01:06:31.180 --> 01:06:33.180
It almost always works.

01:06:33.180 --> 01:06:34.180
It is so nice.

01:06:34.180 --> 01:06:37.180
Because you don't have to remember SDRP time.

01:06:37.180 --> 01:06:43.180
You just throw it into parse and it magically, converts it to a daytime object.

01:06:43.180 --> 01:06:44.180
Right?

01:06:44.180 --> 01:06:45.180
Yeah.

01:06:45.180 --> 01:06:46.180
Yeah, absolutely.

01:06:46.180 --> 01:06:47.180
There's some site and I can't remember what it is.

01:06:47.180 --> 01:06:51.180
I know I've covered on Python bytes, but unfortunately I'm not tracking it down right now.

01:06:51.180 --> 01:06:57.180
There's a site that will let you type in a human readable string and then tell you the format string that goes with it.

01:06:57.180 --> 01:06:58.180
Oh, it's so nice.

01:06:58.180 --> 01:06:59.180
Oh no.

01:06:59.180 --> 01:07:00.180
That's cool.

01:07:00.180 --> 01:07:00.180
Yeah.

01:07:00.180 --> 01:07:05.180
So you type like Wednesday at two, 2 PM and it'll, it'll actually pull it up.

01:07:05.180 --> 01:07:07.180
Nah, I can't find it.

01:07:07.180 --> 01:07:08.180
Oh, well anyway.

01:07:08.180 --> 01:07:09.180
Yeah.

01:07:09.180 --> 01:07:10.180
That's cool.

01:07:10.180 --> 01:07:11.180
Long story short.

01:07:11.180 --> 01:07:12.180
This is a great package.

01:07:12.180 --> 01:07:14.180
If you're parsing things, Python dash date util.

01:07:14.180 --> 01:07:15.180
Yeah.

01:07:15.180 --> 01:07:16.180
And now can I mention another one?

01:07:16.180 --> 01:07:17.180
Go for it.

01:07:17.180 --> 01:07:20.180
So if you're working a lot with databases, which obviously happens when you, when you do web development,

01:07:20.180 --> 01:07:24.180
and Django for Postgres, PG CLI.

01:07:24.180 --> 01:07:28.180
PG CLI is like a way nicer interface than PSQL.

01:07:28.180 --> 01:07:29.180
Yeah.

01:07:29.180 --> 01:07:35.180
So just pick install it and you will have a lot more fun working with Postgres databases from the command line.

01:07:35.180 --> 01:07:36.180
Nice.

01:07:36.180 --> 01:07:37.180
Do you know one?

01:07:37.180 --> 01:07:43.180
I know one that you recommended was SQLite browser at sqlitebrowser.org, which is pretty cool, but that's just for SQLite.

01:07:43.180 --> 01:07:44.180
Right.

01:07:44.180 --> 01:07:48.180
Have you come across Beekeeper Studio at beekeeper studio.io?

01:07:48.180 --> 01:07:49.180
No.

01:07:49.180 --> 01:07:51.180
Oh, my goodness.

01:07:51.180 --> 01:08:03.180
So this is a free open source database GUI for Postgres, SQLite, SQL Server, presumably also Oracle works on all the platforms.

01:08:03.180 --> 01:08:04.180
And man, it is cool.

01:08:04.180 --> 01:08:06.180
You can even have like saved queries.

01:08:06.180 --> 01:08:07.180
You typically run.

01:08:07.180 --> 01:08:09.180
It has auto complete all kinds of stuff.

01:08:09.180 --> 01:08:10.180
Wow.

01:08:10.180 --> 01:08:11.180
That looks very nice.

01:08:11.180 --> 01:08:12.180
It looks good.

01:08:12.180 --> 01:08:13.180
Right.

01:08:13.180 --> 01:08:15.180
It's something you look like you'd want to use.

01:08:15.180 --> 01:08:16.180
Yeah.

01:08:16.180 --> 01:08:19.180
Like even just an auto complete query thing.

01:08:19.180 --> 01:08:21.180
Composer is pretty cool.

01:08:21.180 --> 01:08:23.180
So anyway, we need to link to that as well.

01:08:23.180 --> 01:08:24.180
Yeah.

01:08:24.180 --> 01:08:26.180
We're going to throw out some database management stuff.

01:08:26.180 --> 01:08:27.180
That's a really good one.

01:08:27.180 --> 01:08:27.180
I should definitely.

01:08:27.180 --> 01:08:28.180
I'll put that in there as well.

01:08:28.180 --> 01:08:29.180
Cool.

01:08:29.180 --> 01:08:30.180
All right.

01:08:30.180 --> 01:08:31.180
We covered a lot of stuff.

01:08:31.180 --> 01:08:32.180
What a whirlwind.

01:08:32.180 --> 01:08:33.180
But it was really fun.

01:08:33.180 --> 01:08:36.180
So yeah, I guess final call to action.

01:08:36.180 --> 01:08:38.180
People are all excited about what you've talked about.

01:08:38.180 --> 01:08:44.180
Also, maybe they're interested to see how you've taken some of these ideas and put them into action over at code challenges.

01:08:44.180 --> 01:08:46.180
You know, final call action and what what should people do?

01:08:46.180 --> 01:08:47.180
Yeah.

01:08:47.180 --> 01:08:50.180
So we don't have bite exercises on Django.

01:08:50.180 --> 01:08:52.180
That was a bit hard, but regardless.

01:08:52.180 --> 01:08:57.180
Yeah, it's hard to set up the whole server and database infrastructure in like a little tiny bit.

01:08:57.180 --> 01:08:57.180
Right.

01:08:57.180 --> 01:08:58.180
That might be possible.

01:08:58.180 --> 01:09:00.180
I think we have to have a flask bite.

01:09:00.180 --> 01:09:05.180
So I think it's possible because we can install any packages on our AWS land us.

01:09:05.180 --> 01:09:05.180
Right.

01:09:05.180 --> 01:09:06.180
Right.

01:09:06.180 --> 01:09:09.180
But regardless, go to code challenge.es and go write some code.

01:09:09.180 --> 01:09:12.180
That's the best thing you can do if you want to learn Python.

01:09:12.180 --> 01:09:16.180
And you can also reach out to me by our slack.

01:09:16.180 --> 01:09:19.180
So if you go to by by the yes, they're on the resources.

01:09:19.180 --> 01:09:20.180
There's a community link.

01:09:20.180 --> 01:09:21.180
Anybody join your slack there?

01:09:21.180 --> 01:09:23.180
Yeah, that's totally for the community.

01:09:23.180 --> 01:09:31.180
You've got a really, really vibrant and self sustaining slack channel for Python developers like more than most other places I've seen, which is really cool.

01:09:31.180 --> 01:09:32.180
I don't know.

01:09:32.180 --> 01:09:33.180
You've got thousands of people in there, right?

01:09:33.180 --> 01:09:36.180
Yeah, I think we crossed the 2000 mark.

01:09:36.180 --> 01:09:42.180
And yeah, it's awesome how people are interacting, responding, helping each other.

01:09:42.180 --> 01:09:44.180
It's it's it's such a nice place.

01:09:44.180 --> 01:09:44.180
Yeah.

01:09:44.180 --> 01:09:47.180
So they got a code challenge dot es slash community.

01:09:47.180 --> 01:09:48.180
Is that it?

01:09:48.180 --> 01:09:52.180
No, there is a slack but a logo on the platform.

01:09:52.180 --> 01:09:57.180
But if you just want the link, then you can also just go to by by the yes.

01:09:57.180 --> 01:10:00.180
And under the resources drop down, there's a community link.

01:10:00.180 --> 01:10:01.180
And right, right, right.

01:10:01.180 --> 01:10:03.180
Because slack sometimes the invite link.

01:10:03.180 --> 01:10:04.180
Yeah.

01:10:04.180 --> 01:10:05.180
Don't get me started.

01:10:05.180 --> 01:10:06.180
Expires or whatever.

01:10:06.180 --> 01:10:09.180
Don't get me started on getting joined into slack, man.

01:10:09.180 --> 01:10:09.180
Yeah.

01:10:09.180 --> 01:10:11.180
So we just have a dedicated page.

01:10:11.180 --> 01:10:15.180
And if you go to by by by by the yes, then that always works.

01:10:15.180 --> 01:10:16.180
Awesome.

01:10:16.180 --> 01:10:17.180
All right.

01:10:17.180 --> 01:10:20.180
Well, thank you for taking the time to come on here and talk all about this.

01:10:20.180 --> 01:10:23.180
And congratulations on going full time on your project.

01:10:23.180 --> 01:10:24.180
Awesome.

01:10:24.180 --> 01:10:24.180
Good work.

01:10:24.180 --> 01:10:25.180
Thank you.

01:10:25.180 --> 01:10:26.180
Thanks for having me.

01:10:26.180 --> 01:10:27.180
It was great fun.

01:10:27.180 --> 01:10:28.180
Yeah, you bet.

01:10:28.180 --> 01:10:29.180
As always.

01:10:29.180 --> 01:10:30.180
See you.

01:10:30.180 --> 01:10:31.180
Bye.

01:10:31.180 --> 01:10:33.180
This has been another episode of talk Python to me.

01:10:33.180 --> 01:10:37.180
Our guest on this episode was Bob builder boss, and it's been brought to you by Linode

01:10:37.180 --> 01:10:39.180
and us over at Talk Python Training.

01:10:39.180 --> 01:10:44.180
Start your next Python project on Linode's state of the art cloud service.

01:10:44.180 --> 01:10:49.180
Just visit talkpython.fm/linode, L I N O D E.

01:10:49.180 --> 01:10:52.180
You'll automatically get a $20 credit when you create a new account.

01:10:52.180 --> 01:10:54.180
Want to level up your Python?

01:10:54.180 --> 01:10:59.180
If you're just getting started, try my Python jumpstart by building 10 apps course.

01:10:59.180 --> 01:11:07.180
Or if you're looking for something more advanced, check out our new async course that digs into all the different types of async programming you can do in Python.

01:11:07.180 --> 01:11:12.180
And of course, if you're interested in more than one of these, be sure to check out our everything bundle.

01:11:12.180 --> 01:11:14.180
It's like a subscription that never expires.

01:11:14.180 --> 01:11:16.180
Be sure to subscribe to the show.

01:11:16.180 --> 01:11:18.180
Open your favorite podcatcher and search for Python.

01:11:18.180 --> 01:11:20.180
We should be right at the top.

01:11:20.180 --> 01:11:28.180
You can also find the iTunes feed at /itunes, the Google play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

01:11:28.180 --> 01:11:31.180
This is your host, Michael Kennedy.

01:11:31.180 --> 01:11:32.180
Thanks so much for listening.

01:11:32.180 --> 01:11:33.180
I really appreciate it.

01:11:33.180 --> 01:11:35.180
Now get out there and write some Python code.

01:11:35.180 --> 01:12:05.160
Thank you.

