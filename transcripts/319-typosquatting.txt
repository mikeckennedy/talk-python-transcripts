00:00:00 One of the true superpowers of Python is the libraries over at the Python Package Index.

00:00:04 They're all just a pip install away. And yet, like all code that we run on our systems,

00:00:10 it is done with some degree of trust. How do we know that all those useful packages are

00:00:15 trustworthy? That's the topic of this episode. Benz Tozer and John Speedmeyers are here to share

00:00:21 their research into typosquatting on PyPI and other sneaky deeds. And we also get a chance to

00:00:26 discuss some potential solutions, fixes, and tools to help solve this problem.

00:00:31 This is Talk Python to Me, episode 319, recorded May 26, 2021.

00:00:36 Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:00:54 and the personalities. This is your host, Michael Kennedy. Follow me on Twitter where I'm at

00:00:59 mkennedy. And keep up with the show and listen to past episodes at talkpython.fm. And follow the show

00:01:05 on Twitter via at Talk Python. This episode is brought to you by Square and us over at Talk Python

00:01:10 Training. Please check out what we're offering during our segments. It really helps support the show.

00:01:14 Hey, all. I have a quick announcement. We've had transcripts for all of our episodes for a long

00:01:19 time. But recently, we put more time and effort into making them more useful for you.

00:01:24 Now, every show has a link to the transcripts right in your podcast player. And that transcript

00:01:29 page lets you filter, search, and playback audio from exact moments within the transcript. Hope you

00:01:34 enjoy the richer experience around using our episodes as reference materials. I'm also happy to announce

00:01:39 a new sponsor of the show, Assembly AI. Assembly AI is a top-rated API for automatic speech-to-text.

00:01:46 You can transcribe videos and audio files with human-level accuracy in just a few lines of code.

00:01:52 To help us keep leveling up our transcript games, they're sponsoring the transcripts for our episodes

00:01:57 going forward. So thank you to Assembly AI for higher quality transcripts and supporting the podcast.

00:02:02 Check them out at talkpython.fm/assemblyai. Now, on to that conversation.

00:02:07 Vince, John, welcome to Talk Python to Me.

00:02:10 Thank you. Thanks for having us.

00:02:12 Thank you.

00:02:12 Yeah, it's great to have you both here. It's going to be exciting, unnerving, I might say,

00:02:17 a little bit to have this conversation. But I think it's certainly high time.

00:02:21 You'll never pip install the same way.

00:02:23 Exactly, exactly. You just kind of hold your breath as you do at each time. And you know,

00:02:29 I'm also, this is not a challenge that just the Python world faces.

00:02:34 This is anyone that has a package manager.

00:02:37 Yep.

00:02:37 And the more open, the bigger the difficulties, I suppose, right? So NPM,

00:02:41 gems, like you name it, right?

00:02:44 Yep. If you're a software developer these days, it probably affects you.

00:02:47 Absolutely. So before we get into the typo squatting, the supply chain issues and all the

00:02:54 stuff in history and current problems and, you know, on the positive side, there are solutions

00:03:00 and tools and things that we can talk about as well. Before we get into all that, let's start

00:03:04 your story, maybe abbreviated version since there's a couple of you. Ben, how do you get

00:03:08 into programming in Python?

00:03:09 Programming I got into just as a kid. Got a computer when I was, I don't know, nine or

00:03:14 10 and tinkered around with it, enjoyed it, ended up actually taking programming classes in

00:03:18 high school, stuck with it in college, majoring in computer engineering, and was a software developer

00:03:22 for the system engineer sort of stuff in the defense industry for 20 years.

00:03:27 Yeah. What languages did you start in or mainly use?

00:03:30 Originally started in C, actually originally in Pascal, then started in C, C++, and transitioned

00:03:35 over to doing more active Python development. I just needed a web scraper, needed to collect

00:03:40 some data and analyze it, and Python was the right tool for the job.

00:03:43 You didn't want to do that in C++?

00:03:44 I did not, no. And now, you know, Python is my preferred language for tinkering or back-end

00:03:51 web development. Pretty much as much as I can use it for, I use Python.

00:03:53 Yeah, fantastic. John, how about you?

00:03:55 I don't have quite the classic story. I learned it programming through statistics classes in

00:04:01 undergrad, specialized language called Stata that a lot of economists use. Good for legal

00:04:05 trials, well-tested, but I didn't learn Python until I, in grad school, I took more data science

00:04:11 classes and learned the typical NumPy, Panda, scikit-learn sort of stuff.

00:04:17 Right. They're like, let us introduce you to probably, it was called IPython at the time.

00:04:20 Exactly. And now, of course, Jupyter Notebooks, that sort of thing.

00:04:24 Yeah. Fantastic. It's really interesting just to see all the broad and diverse ways that Python

00:04:30 is growing and people are coming into it, you know? It's not that, well, I learned it for

00:04:34 programming, you know, building an operating system and on I went. There's a lot of languages that are

00:04:38 fairly, you know, or JavaScript. I built it to work on a website, right?

00:04:41 Yeah.

00:04:42 It draws people in from all sorts of things, which is awesome.

00:04:44 It's a meeting ground.

00:04:45 Yeah. Yeah. And I think that's one of the strengths, actually, kind of a sidebar is that

00:04:49 we have all these people with different backgrounds and different motivations and interests and things

00:04:53 they're trying to build rather than being more like, well, here's how I build my web app. How do

00:04:57 you build your web app? Yeah. Very cool. And how about now? Vince, what are you up to day-to-day?

00:05:03 So day-to-day, you know, kind of put down the keyboard, at least from the programming perspective.

00:05:07 And I work as a cybersecurity subject matter expert for In-Q-Tel, which, so I guess my job

00:05:13 there is to search for and then work with companies we find in the cybersecurity industry that have a

00:05:18 high impact on national security, as well as providing kind of advisory services to our customers in the

00:05:23 U.S. government.

00:05:24 Okay, cool. So what's In-Q-Tel? Sorry, In-Q-Tel, I guess it is?

00:05:27 Yes.

00:05:28 Yeah. What's the company story there? Because you both are from the same company.

00:05:31 Yeah. So it's a nonprofit, 501c3, stood up a little over 20 years ago by the CIA to basically help

00:05:37 you know, originally the CIA, but now it's seen most of the intelligence community and

00:05:41 elements of the DOD basically acquire and adopt and use cutting edge technology. They realized a

00:05:47 little while ago, you know, around that time that a lot of innovation was moving into Silicon Valley

00:05:51 and into other places in industry and startups. And the traditional acquisition model that federal

00:05:55 government uses doesn't play well with those people. They don't understand it. So we kind of

00:05:59 helped as a bridge working with startups, identifying them, and then helping them interact with the

00:06:04 government and conversely helping the government, you know, adopt, said technologies and support their mission.

00:06:09 So maybe, let me see if I can run a scenario by you. Maybe there's some Silicon Valley company

00:06:13 that's created like a cool ML thing that identifies deforestation or something like that. And the

00:06:21 government decides, oh, this might be really helpful for us for, I have no reason why. I have no idea

00:06:26 why, but let me imagine there's a reason, right? You might help that company like work with the

00:06:31 request for proposals and the whole crazy government side of things and get them more in line with what's

00:06:36 needed there. Is that the story? Yeah, that's to an extent. Yeah. I mean, we actually invest in them,

00:06:39 take equity, and that do help them learn how to interact with the government and also help them

00:06:44 shape their product and meet our customer needs.

00:06:46 Yeah. Okay, cool. Interesting. I had no idea such a company exists.

00:06:50 John, how about yourself?

00:06:51 I'm also at IQT. I work in what's called IQT Labs. It's an open source applied research and development

00:06:58 lab where we do hands-on research, mostly in the open source, largely on GitHub.

00:07:02 Cool. Sounds very, very fun. Now, let's talk about the supply chain issue, I guess, at a real broad level,

00:07:10 right? And I don't know how you all feel. I suspect that you have a little more hesitancy

00:07:16 or whatever as you interact with the computers and software and the internet and so on. You know,

00:07:21 when you, oh, there's a cool new app, maybe I'll try that. Like, you might think a little more

00:07:25 carefully about this than the average, you know, say, teenager or whatever.

00:07:29 There's a little bit of paranoia that comes with this. It's true.

00:07:32 Yeah, exactly. Exactly. That's what I'm getting at. And I feel like one of the more insidious

00:07:37 aspects of this has been the supply chain side of things, right? Because it's one thing to say,

00:07:42 that app looks shady. That site looks shady. Let me just not go there. Let me not click that link.

00:07:47 Let me not install that. But if I were to install, you know, Office Suite X and I completely trust the

00:07:54 company that makes that, but there's some library that they got from a third party and that third party

00:08:01 had been hacked and they somehow Trojan'd that third party thing and no one's found out yet.

00:08:07 I don't know. That's super scary. And that's kind of along the lines of some of the things that we're

00:08:11 touching on. And so I think the most broad one of those in the recent times has got to be SolarWinds,

00:08:16 right? That's certainly what's making the headlines these days. Still even, what,

00:08:20 five, four or five months later. It's, yeah, still a topic of discussion around this theme.

00:08:26 And yeah, I mean, that was a pretty challenging attack to pull off. I mean,

00:08:30 it took nation state actors months, maybe years to plan, you know, laying the groundwork,

00:08:35 getting things in place, you know, basically infiltrating SolarWinds development infrastructure.

00:08:40 Pretty impressive, honestly, that they were able to do it. And obviously the impact was enormous.

00:08:44 It was wildly successful.

00:08:46 I think one thing that Vince and I have been interested in, though, while this sort of attack

00:08:51 is very serious and obviously has rightly gathered a lot of attention, there are a number of other

00:08:56 types of attacks, often focusing on open source software that are actually more numerous.

00:09:01 How serious they are is actually open to debate. But we are still talking many people affected and can

00:09:08 still have grave consequences, especially if you're the one that's hacked.

00:09:12 So it's gotten less front of the newspaper attention, but Vince and I still think it's serious.

00:09:18 Yeah, I think it's very serious. I started with this one because I feel like everyone has heard about this.

00:09:22 Everyone can relate to this, right?

00:09:24 And here's an example of a company that supplies network gear to many of the largest companies and government

00:09:33 organizations around the world. And this was basically a way to get, you know, access to all of those.

00:09:38 They think it's Russia's cozy beer crew, but who knows, right? And it almost doesn't matter.

00:09:44 Another one that I think also is in the news really quick before we jump into the open source stuff.

00:09:49 This is not open source at all, but was called Xcode Ghost. Have you two heard of this?

00:09:54 Yeah. Yeah. So, yeah, I mean, basically what happened here was, you know, app developers,

00:09:59 iOS developers in China don't like to download or can't download stuff from the Apple official

00:10:04 Apple version of Xcode. Someone, you know, put a compromised version of Xcode up on some.

00:10:10 So let's get it off BitTorrent or something.

00:10:12 Yeah. I mean, also some Chinese file sharing site that app developers over there like to use

00:10:16 because it's more convenient and they, they, it was compromised. There was a, basically a,

00:10:20 something that would bake a backdoor into, you know, the ultimate compiled app that would go into

00:10:25 the app store or variant of the app store.

00:10:27 Yeah. So every app that was built and published to the app store with Xcode Ghost, which looked

00:10:33 exactly like Xcode injected a backdoor malware type of thing into it. So there was something like

00:10:39 2,500 applications, the iOS app store that yeah, affected like 128 million people. So that,

00:10:46 that's bad kinds of things, right?

00:10:48 Very bad.

00:10:49 Not ideal.

00:10:49 I mean, I guess attacking a compiler, I mean, developers trust their compiler, I would say,

00:10:54 I mean, not being able to rely on that or feel like you have, and it's very hard to

00:10:57 vet your company, especially for closed source or closed source, product like Xcode.

00:11:02 It's very hard to see is my compiler compromised or not.

00:11:07 Yeah. Yeah. And I think this actually is closer to the open source side of things,

00:11:12 right? Because if you can start to infect the tools of the developers building the things,

00:11:16 that's a problem. Yeah. So let's talk about the open source side, John, you pointed out,

00:11:21 there's many known attacks over there.

00:11:23 That's right.

00:11:23 Set the stage. What's going on?

00:11:25 There's actually a range of attacks, but I'll mention a couple here and we'll get into typosquatting.

00:11:29 So there is certainly a typosquatting attack, which we'll discuss extensively today, which

00:11:33 just like domain names, you might've heard someone is trying to go to a website and, mistypes it

00:11:41 a little, or somehow gets confused about how it's spelled, maybe switching the order of words,

00:11:45 and then ends up someplace that's malicious, either on the web, or if you're downloading a package,

00:11:50 you download a package you think you want, but it's not actually.

00:11:54 And sometimes not always, sometimes that contains malware and does things to your computer that you

00:12:00 don't want.

00:12:01 That's bad, right?

00:12:01 Bad. Especially if there's arbitrary code execution, meaning they can do what they want because perhaps

00:12:08 you've installed it as root.

00:12:09 Right. And well, I think a lot of people who are getting into Python don't realize that when you

00:12:14 pip install something, unless it's being installed as a wheel, as a binary wheel, it's running a setup.py

00:12:21 as your account. So whatever your current account is able to do, like you said, if you run it as

00:12:27 sudo, it's, it can do more, but even if it can just completely wreck your account and get your

00:12:31 information for many people, that's plenty bad on your computer. You don't want to.

00:12:35 Yeah. And it could be your computer. It could be your, your corporation's computer where you work

00:12:39 or your company's computer. And this setup.py, you're exactly right. It is a key attack vector.

00:12:44 For many people, it's simply a helpful way to install software. But unfortunately,

00:12:48 some people abuse that specific resource.

00:12:51 Yeah. I think it's been critical in the growth of how software is built. I remember,

00:12:55 you know, Ben, you were talking about doing C++ programming. I remember back in 97, 98,

00:13:02 99 doing C++ programming then. And it felt like whatever you wanted to do, almost everything you

00:13:07 had to build from scratch. You want a library that does this kind of UI widgets? Well, how do I build

00:13:12 that? You want a library that has this kind of data structure? Where do I either find or build that?

00:13:17 Right. And now it's just pip install this thing, pip install that thing. And the, the building blocks

00:13:22 that we have to compose are so much more effective, right? I can take a couple of libraries here and

00:13:28 click them together. And all of a sudden I've got something absolutely incredible, like pulling data

00:13:33 from different sources, creating amazing graphs. I mean, that is the power of modern software

00:13:38 development, right? And yet, you know, I guess Corey Atkins out in the, the live stream has a nice

00:13:43 sort of comment on this. Like he said, I didn't realize how naive I was thinking packages were

00:13:48 vetted. You're not alone, Corey. And so you're not alone. Join the club.

00:13:52 This portion of Talk Python to Me is brought to you by Square. Payment acceptance can be one of the

00:13:59 most painful parts of building a web app for a business. When implementing checkout, you want

00:14:04 it to be simple to build, secure, and slick to use. Square's new web payment SDK raises the bar

00:14:10 in the payment acceptance developer experience and provides a best in class interface for merchants

00:14:16 and buyers. With it, you can build a customized branded payment experience and never miss a sale.

00:14:22 Deliver a highly responsive payments flow across web and mobile that integrates with credit cards and

00:14:28 debit cards, digital wallets like Apple Pay and Google, ACH bank payments, and even gift cards.

00:14:33 For more complex transactions, follow-up actions by the customer can include completing a payment

00:14:39 authentication step, filling in a credit line application form, or doing background risk checks

00:14:44 on the buyer's device. And developers don't even need to know if the payment method requires

00:14:49 validation. Square hides the complexity from the seller and guides the buyer through the necessary

00:14:54 steps. Getting started with a new web payment SDK is easy. Simply include the web payment SDK

00:14:59 JavaScript, flag an element on the page where you want the payment form to appear, and then attach

00:15:04 hooks for your custom behavior. Learn more about integrating with Square's web payments SDK at

00:15:09 talkpython.fm/square, or just click the link in your podcast player's show notes.

00:15:14 That's talkpython.fm/square. These incredible building blocks, these Lego pieces, there's a lot of faith

00:15:22 out there that these are good building blocks. Not good in the sense they don't have bugs, but good in that

00:15:27 they have a good intent.

00:15:28 Well, I think that's one thing that's the key is that, and one of the things that's a challenge here is you have to

00:15:32 kind of figure out the intent of the people you're trusting, and you are trusting them ultimately, and you have to

00:15:38 hope they do not have malicious intent. Because inferring that is very challenging.

00:15:41 It's a double-edged sword. I mean, I agree. It is a powerful change that you can download a couple

00:15:47 libraries and have an amazing app, potentially in a few minutes, maybe an hour or two. And this is the

00:15:53 dream of code reuse, come alive, finally. And it just so happens that there are sometimes downsides.

00:16:00 They can be mitigated, but unfortunately to the unaware user, which it's all too easy to be unaware,

00:16:06 it's difficult, actually. There are serious, there can be risks.

00:16:10 Yeah, there definitely can. Kim Van Wick out of the live stream has an example. A benign example would

00:16:16 be atter, A-T-T-R versus atters. Both are legitimate packages, but completely different.

00:16:22 Another example would be if I want to install requests, but I actually just type request.

00:16:27 I mean, even auditorily, they sound like requests.

00:16:31 It's easy to do.

00:16:32 It even sounds like very similar with the S versus no S there. And if somebody says,

00:16:38 go install requests, you're like, oh, request, pip install request. God, I did it. Like, wait,

00:16:42 no, no, no, no, don't do that one.

00:16:43 Yeah. And it actually happened. You can find that that attack truly happened, affected,

00:16:47 at least according to the article published about it, 20,000 users. So I don't know how many of them

00:16:52 were actually affected. I haven't, we don't, this is unfortunately part of the problem. It's hard to

00:16:57 track this data, but the example you brought up, I know you brought it up on purpose. It's serious.

00:17:04 Yeah. And requests with the S is installed millions of times a week or a month. Many,

00:17:11 many, many, many, many times, right?

00:17:12 We'll talk about this later, but we found one called Pandar, like Pandas, but with an R.

00:17:17 And, you know, it's not hard to imagine just by, either confusion or a mistake typing this.

00:17:24 Yeah, absolutely. So another area I think that is a little bit interesting before we dive completely

00:17:30 into the package management type of squatting and related type of issues has to do with a trusted

00:17:37 open source thing becoming untrusted. And what I mean by that is there were some examples of things

00:17:44 like Google Chrome extensions being put out there as proper extensions, and then someone taking over

00:17:49 that project and then putting something maybe more adware in it, or something somewhat nefarious,

00:17:55 if not actually malicious, or, you know, somebody who is running the request is not a great example

00:18:01 because it's under the PSF organization, but many of the projects are under an individual, right? On

00:18:08 their GitHub project. And so if somebody was able to break into that person's GitHub repo, and then they

00:18:13 somehow sneak something into the code, well, does it look wrong? No, the, the person who made that change

00:18:19 is the trusted benevolent person who runs this project, right? They are, if, you know, Guido

00:18:25 van Rossum comes in and makes a change, well, who's going to look at that and go, oh, this is, this guy's

00:18:30 sketchy. We better really, like, it's probably going to be fine, right? So if someone takes over an account,

00:18:35 like, not only do they have access to the code and then how it gets pushed out to, you know, potentially

00:18:39 gets into the stream that goes to PyPI. It's also done by the person who looks like they should be most

00:18:45 trusted, right? So things like two-factor auth and just securing your GitHub and things along those

00:18:51 lines seems extremely important as well. Absolutely. I mean, what you're describing with account takeovers

00:18:56 happen numerous times. And there's variants on it too, where there's some single developer who's

00:19:01 overworked, tired, doesn't use the project they create anymore. They just hand it over to someone

00:19:05 who ends up, you know, putting a backdoor in it or some sort of malicious payload. I mean, that, that's

00:19:10 happened. And then also people take advantage of the fact that not only do you have your GitHub

00:19:13 profile secure, but you also have to have your PyPI or Ruby gems or, you know, where you actually

00:19:18 publish your packages, people run. So there's kind of two areas for potential attack. And also people

00:19:23 take advantage of the, you know, most people, at least me anyway, when I would vet software, I would go

00:19:28 look at GitHub and then I would download, I wouldn't download it from GitHub. I would download it using

00:19:32 pip or whatever. And that kind of, dissonance or whatever you want to call it,

00:19:37 there's another opportunity for, for confusion and malfeasance.

00:19:43 Yeah. And so these things are hard to detect, but I guess the area that you all have done a lot of

00:19:49 research in, you built some tools around and probably the biggest area is around the package

00:19:55 management side of things, right? That's right.

00:19:57 So we've talked about typosquatting and some of the challenges where people might mistype things.

00:20:03 And you talked about some examples where you found packages that look like they were intended to be

00:20:09 installed by accident, you know, to catch those. If there's 7 million people type, you know, 7 million

00:20:15 times pip install requests is typed. Chances that a couple of those are misspelled or enough of those

00:20:20 are misspelled is pretty high, but there were actually quite a few examples. Like for example,

00:20:25 the register had an article. When was this? This was, this is recent, March, 2021. The title is Python

00:20:33 Package Index nukes. 3,653 malicious libraries uploaded soon after security shortcomings highlighted.

00:20:41 That's right. This is, there's really a longer historical narrative too, to include this.

00:20:45 I'll call this a political activism, anti-typo squatting activism, where this,

00:20:51 you could call it an attack, is really about drawing attention to this risk.

00:20:55 Yeah. And I feel like a lot of these were people like, look, I'm proving to you this could actually

00:20:59 happen. That's right. I'm proving by creating this thing that uploads as requests with the S&T.

00:21:06 That's right.

00:21:06 Swapped. But were there actually viruses put up there? Like what is the actual harm been?

00:21:12 Yeah. So not all of these are. This one and a number of others, we can discuss those if we have time,

00:21:19 were largely benevolent, but demonstrated the risk. But yes, there have been, at least by our

00:21:25 calculations, 40 known malicious typo squatters on the Python Package Index, affecting thousands of

00:21:31 users. We actually published a blog post on this, something like Python typo squatting is about more

00:21:37 than typos. So yes, this has happened. I don't know the exact persons that it has affected. We just

00:21:43 don't have that data. Sorry if it affected you. And we published this and got some debate on hacker news.

00:21:49 And this is the point where Vince and I said, oh, there's really something here. There's a broad

00:21:53 audience that hasn't had a voice that cares about this.

00:21:56 Yeah. I mean, it could have been nothing, right? If I'm a student at a university and I install it on

00:22:02 a lab computer.

00:22:03 No big deal.

00:22:03 No big deal. Like who trusts those lab computers, right?

00:22:06 You shouldn't.

00:22:07 I mean, not just because like somebody could have installed something bad on it, but there's,

00:22:13 there are college students.

00:22:15 Oh yeah.

00:22:15 Who could be installing all sorts of just, you know, pranks and other kinds of stuff. So you

00:22:20 should just treat those things with.

00:22:22 Contaminated.

00:22:23 Yes, they're fully connected. But on the other hand, if this is a data scientist working at like

00:22:29 a major corporation or an agency and that happened to them, it could be the thing that opens the door

00:22:35 to, you know, access to the entire network and all sorts of lateral movement, right?

00:22:40 That's right. There's even one of the earliest pieces of anti-typo squadding activism comes from

00:22:45 Nikolai Schocker, who was writing his undergraduate thesis at the time in Europe. And he showed that

00:22:53 over a few weeks, he got over 17,000 downloads of a series of type of squad packages, including .mil,

00:23:00 the military addresses of the United States military. So it is certainly possible that people in a more

00:23:06 secure organization that really value security could accidentally be the victim of type of

00:23:11 squatting.

00:23:11 Yeah, absolutely. And the fact that it came out of a .mil domain shows that, yeah, that bad example

00:23:17 could also happen. And also his thesis got covered on Ars Techno.

00:23:21 That's right. Coolest undergrad thesis ever.

00:23:23 Exactly. That's way better than anything I did in college.

00:23:27 Oh yeah.

00:23:28 Yeah. Fantastic. And then there was this project called Pyto Squatting.

00:23:33 Yeah.

00:23:34 Pyto Squatting.

00:23:34 Yeah. It's a play on...

00:23:36 Which actually has been... Yeah, like a play on typo squatting.

00:23:39 It's a play on typo squatting. It's a clever one. And Benjamin Balderbach and Hano Beck,

00:23:43 who are open source software activists, developers, also a journalist, they've really had a multi-year

00:23:51 effort pointing out the dangers here. Not simply criticizing, but trying to help Python Software Foundation

00:23:56 and the warehouse, our PyPI crew, raise money and build a consensus around trying to make

00:24:04 this infrastructure safer.

00:24:05 Yeah. Yeah. So they had this project called Pyto Squatting, but that actually got closed down.

00:24:11 That's right.

00:24:11 Yeah. Because they said that the PS... What do they call it?

00:24:16 The PSRT, Python Security Response Team.

00:24:20 That's it. PSRT. And I'm like, wait, there's a Python Security Response Team?

00:24:26 That's cool.

00:24:26 And they respond to emails too. They're good.

00:24:28 Yeah. Okay. So this is an organization, a group of people under the PSF banner that basically

00:24:34 triage these types of concerns, right?

00:24:37 That's right. That's right.

00:24:38 Okay. Yeah. I'll link to their page on python.org and they have their email there. They also have

00:24:46 rules for different types of disclosure, like whether you should email them, do other things.

00:24:51 That's right. And if you find a malicious package or even a package that you think is very suspicious,

00:24:56 this is who to contact. And they're diligent and timely.

00:25:01 So what do you two think about how this should be disclosed? People out there listening, they find

00:25:06 something. Should they go to Hacker News and say, look, this horrible thing I found on PyPI or on

00:25:12 NPM or whatever. Should they quietly disclose that to the security response team and then talk about it

00:25:21 after it's been removed and fixed? What's the flow for disclosure?

00:25:25 Seems like it would follow any other responsible disclosure process for traditional bugs, exploitable

00:25:31 bugs that are with vulnerabilities, where it would be nice if you find a problem, contact maybe the

00:25:39 Python security team, get in contact with the developer, get it fixed, probably get the package

00:25:43 pulled down if in fact it is malicious. And then, yeah, it'd be nice to have some sort of reporting

00:25:48 mechanism so that everyone who uses it could be identified. And the first part, John Speed was

00:25:53 saying, you know, the Python South for Foundation and the PSR team do a good job or great job of

00:25:57 being on top of it, being timely, being responsible. It's much harder to notify, you know, there's no

00:26:03 authentication when you download one of these packages. So it's very hard to know who's been

00:26:06 affected. So maybe just promoting that more would be helpful. But then people have to know where to

00:26:10 look and that they need to look at all. It becomes challenging quickly.

00:26:13 Well, it's like the Xcode ghost thing, you know, there was 2,500 apps that were backdoored.

00:26:20 And I think only the top 25 were even disclosed. And it's like, if there was a list of 2,500 apps,

00:26:26 are you going to go cross compare? No, you know, no normal person is going to cross compare that

00:26:31 announcement with their phone.

00:26:33 Right.

00:26:33 Right.

00:26:33 Right.

00:26:34 And it's just such a challenge. And I feel like, you know, here we had the same thing,

00:26:37 right? We had 3,653 packages removed. Well, are you going to go check if you had those? It's

00:26:43 extra hard because it's, you didn't intend to ever have them. You didn't intend to swap the S and the

00:26:50 T when you type requests, but you did. And you accidentally, almost unknowingly got it most

00:26:55 likely. Right. And so I do think it's really hard to push this out as an awareness thing and like,

00:27:02 hey, you should know that this happened. And so just go check, right? The checking,

00:27:06 I think it's really tricky.

00:27:07 Yeah. I mean, like many software problems, you need to solve it with more software.

00:27:11 You got to solve it with AI probably.

00:27:13 No, you definitely have to solve it with AI. I think one thing that's helpful and could be part

00:27:18 of that process, but isn't always, unfortunately, is also taking a collection or taking that artifact

00:27:26 that you found, let's say a Python package that was malicious and making sure it gets to somewhere

00:27:31 where it can be studied and hopefully future attacks prevented. And so for Python and a couple

00:27:36 of other languages, there is actually an interesting project. It has a very colorful name. It's called

00:27:41 Backstabber's Knife Collection. Sounds very scary and malicious, but it is actually yet another

00:27:46 enterprising grad student trying to collect malware samples, especially of interpreted languages.

00:27:51 Python is one of them. And so that there can be a community researchers and hopefully then

00:27:57 companies that can fight these packages. So that would be another thing I would add to the list.

00:28:02 Yeah, there you go. Mark Ohm is the main person associated with that and has written some

00:28:07 interesting papers and great stuff. And so I urge you, if you come upon this and you say,

00:28:12 how do I act responsibly here? Do the things Bent says and also maybe grab a sample and give it to

00:28:17 the Backstabber's Knife Collection or another similar repository.

00:28:20 Yeah, interesting. Okay. Have I just messed up my computer by visiting this webpage as well? I wonder.

00:28:25 I don't think so, but there is a...

00:28:27 I'm just teasing. I'm just teasing.

00:28:28 I mean, I can't guarantee anything though, but...

00:28:31 No, of course, of course, of course. Before we get too far on, Corey Adkins also asked,

00:28:35 when we were talking about messing up your computer, the lab computer, so on, he asked,

00:28:39 could installing these types of things also affect shared server space? On my IaaS land,

00:28:46 where I have a shared server running for however much someone else does something bad.

00:28:51 I mean, theoretically, sure. It depends on the permissions, I would think. Yeah. If you install

00:28:55 some dependency that has keylogger baked into it or, I don't know, or, you know, some sort of file,

00:29:00 you know, collector, and it has permission to traverse all directories, then yeah, I mean,

00:29:05 I could certainly see a scenario where that was possible. I mean, I haven't, you know,

00:29:08 I haven't heard of that happening specifically, but there's nothing preventing it theoretically.

00:29:12 Yeah. If you had a series of virtual machines, you know, it's pretty tricky from one virtual machine

00:29:17 to escape to another, but I believe there have been examples, but those are exceedingly rare,

00:29:22 those sorts of vulnerabilities, right? That's right. So while we're on this topic,

00:29:26 I want to throw out an idea and then we'll talk about some of the tools you built, but I feel like

00:29:29 we're right in the middle of this notification thing. Like we've got all these packages, they've

00:29:34 been identified, they have been downloaded. We can see that we probably even have IP addresses,

00:29:39 which you can reverse look up to DNS names as probably how those attributions were given,

00:29:44 but it happens so often in so many different places, right? Like if I've got a continuous

00:29:51 integration story that builds a Docker container that pushes to a Docker hub and then my production

00:29:57 grabs that from that container, the place where the problem happened is not the place where the

00:30:03 problem is, right? It's probably GitHub or some other CI pool. We have a really nice thing for this

00:30:09 in the account space. Have I been pwned by Troy Hunt, which is a really nice project. I definitely

00:30:15 recommend people go there and enter their email address.

00:30:19 And prepare to be horrified.

00:30:20 Yeah. And prepare to be horrified. There's 11.2, 11.3 billion accounts that have been breached,

00:30:27 which is odd because it's more than all the humans, but we have more than one account. So there it is.

00:30:31 But yeah, so you put your email in there and then in the future, well, historically as well,

00:30:37 but then in the future, you say, if something has happened and your email appears in some kind of

00:30:42 password dump, password breach or account informational breach, you'll get an email saying,

00:30:47 Hey, we found something that should be concerning to you. Check it out. I would love to see something

00:30:51 like this for pip, right? Something that says, I pip installed this thing and it just has a record of,

00:30:57 here's my account. These are the things I've pip installed. If there turns out to be a problem

00:31:02 with one of those, notify me that that had happened.

00:31:05 That does sound really useful. I don't think it exists.

00:31:07 I don't think it exists either. And it shouldn't just be a pip thing. It should be an NPM thing.

00:31:11 It should be a gem thing. It should be a crate thing. It should be something that like a,

00:31:15 just a little bit of a wrapper that says, I would like to opt in to saying, here's my UUID.

00:31:22 Here's my email address. And here's the list of things that I've installed. If it turns out that

00:31:27 one of them is horrible, just let me know.

00:31:30 It's so sensible. It makes me laugh.

00:31:32 Yeah.

00:31:33 Well, there's an idea out there as well, but this is way far down the line, right? This is,

00:31:38 oh, we know this has happened. We know who's done it. We've, we know who's been affected and so on,

00:31:43 but starting a little bit further back, you all have built some tools to go and start at the

00:31:50 beginning and say, well, let's look and see what might be out there. That is bad, right? This is

00:31:54 the tool you used to find pandar instead of pandas.

00:31:58 That's right. I mean, I think the, the first idea you had is the crucial one, which is that

00:32:03 you need to know that there's been a compromise in order to report it. And right now it's surprisingly

00:32:08 hard to know that. So we're not the only one to have devised a tool or approach to finding

00:32:14 malicious packages on the Python package index, but we took a particularly simple one and we said,

00:32:19 can we use simply the metadata, especially the name, but some other information too,

00:32:23 of packages. And then look at just the most downloaded packages and check who has names

00:32:29 that are very similar to those packages. This is where AI comes in.

00:32:32 Need crazy AI at this point. You do get a lot of false positives. People have similar names just

00:32:37 because the packages are related. It's fine. There's no problem inherently with having a similar name,

00:32:42 but we cracked open those packages too. This was some very boring Saturday mornings of mine

00:32:49 and simply scanned through the code looking for anything that's suspicious. And lo and behold,

00:32:54 we found one called Pandar that was actually doing key logging. It was a proof of concept. It's unlikely

00:32:59 that it actually would have worked, but we reported it to the Python security response team, security at

00:33:05 python.org. They said, yep, not good. Yanked it. And it was just an example of it's not that hard

00:33:12 to find them. And we were showing yet again with a pretty simple demonstration that it's not that hard.

00:33:18 Interesting. That's really cool. So basically the tool is about finding given popular packages,

00:33:24 finding ones that are oddly similar. And then there's like a, let me go and see what this one's about.

00:33:29 That's right. And so there's a couple additional checks to help anyone using it. And you can find

00:33:33 it's an open source written in Python tool, command line tool. It also checks things like, for instance,

00:33:39 is the description of the package on PyPI, is it very similar? So that what you are witnessing is

00:33:46 someone who's trying to not only type with squat the name, but in some sense, like squat the broader

00:33:52 metadata or almost like the copyright of the package.

00:33:55 Right. Because you want it to look as similar as possible.

00:33:57 Exactly. Like camouflage.

00:33:58 Something that comes to mind. Yeah. Are you guys familiar with sneak?

00:34:01 Yes.

00:34:02 Yes.

00:34:02 Is it package? There's a project. And geez, I'm forgetting.

00:34:06 Are you thinking of the advisor project?

00:34:08 Yes. Sneak package advisor.

00:34:10 Yeah. It's neat.

00:34:11 That's it. It's super neat. Yeah. That's what I was looking for. No, that's not how I want to spell it.

00:34:15 Yeah. And so that thing is pretty cool. The reason I bring this thing up is you can come over here and I

00:34:21 can type in a project like requests or whatever, and it'll tell us eventually,

00:34:26 it'll tell us the package health score. Yeah.

00:34:29 And it'll tell us things like there's this many PRs that have been open and closed. There's this many

00:34:33 contributors. There's this many people participating that the maintenance looks like so on. One thing

00:34:38 that I think would be cool would be to take this number plus a misspelling and say, if that number

00:34:45 is really, really low for a package that should be really, really high, that's a challenge, right?

00:34:50 If you look at the GitHub repo that is delivering this thing and it doesn't look right, if it's not

00:34:56 associated with something that seems kind of hard to replicate, like a GitHub repo with many people

00:35:00 participating over a long period of time, that seems like that could be a good flag as well.

00:35:04 Yeah, certainly. It certainly seems like there's an abundant opportunity to build something into the

00:35:10 actual download client to the pip or a wrapper around pip where it checks these sorts of things and

00:35:17 create speed bumps for you as you are trying to download something or use a package so that

00:35:23 says, hey, this looks suspicious. Have you thoroughly checked this? And I think your idea could contribute to

00:35:29 exactly such a tool or tools. Yeah. Yeah. Very neat. You've been working on this and Martin

00:35:36 Karnoguski created this thing called Aurora and also reached out and said, hey, I'm also working on this.

00:35:43 And so, yeah, tell us about this thing called Aurora. Yeah. So we got an email last fall after publishing

00:35:49 this blog post and he said, hey, I've been working on a similar tool. Not only does it check this metadata,

00:35:55 but we even do static analysis of the entire Python package index. And we said, Martin, that's awesome.

00:36:01 Let's work together. And so over the past six months, roughly now, in an open source collaboration

00:36:08 between a number of us at IQT Labs and Martin Karnoguski, we have further refined Aurora, which

00:36:14 truly is designed to do a static analysis of the entire Python package index open source tool. You can find it.

00:36:20 He releases his data on a try as best as he can to release it regularly. We've also built a tool

00:36:26 called Aura Borealis. That key thing, his aura produces 50 gigs of output when it's done scanning

00:36:33 the entire Python package index. No human can wade through that. So.

00:36:38 And I suspect also the IPA, the Python package authority folks probably don't want everyone

00:36:44 downloading that much data all the time. No, it's exhausting and creates so many database issues and

00:36:50 other things. So we've been working on a tool called Aura Borealis that you've pulled up that is a front

00:36:55 end that makes it easier to use the data set that Martin creates this tool, Aura. This wouldn't

00:37:02 necessarily be part of PyPI, though, of course, it could be. But we imagine this as a tool for

00:37:08 organizations or persons that need to have global knowledge about either global knowledge about the

00:37:15 entire Python package index and to rank and assess potential threats and go look, look for those,

00:37:20 and then take appropriate action or even individual developers that are really curious about packages.

00:37:25 This is makes it easy. The Aura Borealis isn't yet live, but we hope to make it live this summer.

00:37:30 Aura is a in production tool. It works. So go check it out.

00:37:34 Talk Python To Me is partially supported by our training courses.

00:37:39 When you need to learn something new, whether it's foundational Python, advanced topics like async or web apps

00:37:45 and web APIs, be sure to check out our over 200 hours of courses at Talk Python.

00:37:51 And if your company is considering how they'll get up to speed on Python, please recommend they give our content a look. Thanks.

00:37:57 This looks like it's really handy. You know, so the idea is basically it's going to run forever and that's going to generate tremendous amounts of data.

00:38:05 Maybe just put a web front end on top of that static data for everyone to generate it over and over.

00:38:11 Exactly. Instead of having generated over and over now having 50 gigs and having to write your own custom,

00:38:16 probably Python script that's, you know, you'll have to optimize and blah, blah, blah.

00:38:20 Yeah. So came out in the live stream just says I accidentally typed sync instead of sneak,

00:38:26 which also is hard to spell anyway, because it's like a non-common spelling.

00:38:30 So which is an excellent way to demonstrate making a typo of getting the wrong package.

00:38:34 I have no idea what that's going to return. I'm not going to pull it up.

00:38:37 Podcast imitates life, imitates art, imitates compromise.

00:38:43 Exactly. All right. Well, this is really neat. How would I use the Aurora data and the Aurora Borealis project?

00:38:50 I guess also we should talk about this from different angles, right?

00:38:53 Maybe I'm a CISO at a company and I'm concerned that all my people are psyched about data science and Python

00:38:59 or NPM and web front ends and they just make me nervous all day and I want to get on top of it.

00:39:06 So I want, as somebody who is concerned about, I would like to know what's happening in my software

00:39:11 fly chain, or maybe I run, I maintain pandas and I'm really upset that pandar exists and I want to now be able to defend my package.

00:39:20 Like it seems like there's different use cases and people out there.

00:39:24 That's right. I think if you're a company and you have a group of software developers and

00:39:29 you have the, let's say a security team that helps vet packages.

00:39:34 So perhaps you put those packages in an internal repository so that the developers know that they're

00:39:39 cleared to use or Borealis will help you do that.

00:39:42 We're glad to set up pilots and discuss.

00:39:44 You can email me, jmeyers at iqt.org.

00:39:47 But there's also other angles too.

00:39:50 There's just, you're a developer and you want to make an informed choice.

00:39:53 The static analysis tool and its output can help you with that or Borealis.

00:39:57 And I think there is also, you're right, there's a maintainer angle and also a PyPI administrator

00:40:02 angle where you want to either protect a set of namespaces close to your package or you care

00:40:09 about the health of the entire ecosystem.

00:40:11 And those are all possible user types.

00:40:14 Yeah.

00:40:15 And we could probably use your PyPI scan to go and say, look, can I say, look for things

00:40:22 similar to my package name?

00:40:23 Yeah, that's right.

00:40:24 And we built that into Aura Borealis too now.

00:40:27 So in some ways, PyPI scan was a demo and still useful as a command line tool, but Aura Borealis

00:40:33 and Aura has that now built in.

00:40:36 Are you all going to put an API on top of this?

00:40:38 Good question.

00:40:38 That would be cool.

00:40:40 The thing that's tricky, like everything in life, is it costs money and, you know,

00:40:45 engineering resources and time.

00:40:47 I certainly have a vision.

00:40:48 I certainly have a vision.

00:40:48 And, you know, if I don't do it, someone else should do it.

00:40:52 Go make a lot of money.

00:40:53 of creating a technical infrastructure that every single package and every single new version

00:41:00 of every package, IPI, NPM, et cetera, gets scanned, a variety of scans, static analysis,

00:41:06 dynamic analysis, metadata analysis.

00:41:08 And that gets stored in a database that where you and I can go make API calls and get that

00:41:14 information that we should on these packages.

00:41:16 That could be, you know, there could be a free tier.

00:41:18 And then if you really need to make a lot of calls, a paid tier.

00:41:21 But someone should do it, I think.

00:41:23 Yeah, it would be neat to know, like you said, integrate into, say, pip even.

00:41:28 So if I pip install something, it could even flag it and say, hey, no, actually, we're going

00:41:33 to block that.

00:41:34 That's right.

00:41:35 Preemptively, because it's got some low score, unless you do like a --force.

00:41:39 Like, no, really, I mean, yeah, exactly.

00:41:41 It's something that'll sort of slow it down, as you call them speed bumps.

00:41:44 I hope someone does something similar to that.

00:41:46 We have plans, but no active development underway.

00:41:50 All right.

00:41:50 So that sets the stage that some of the tools out there, at least to identify that there

00:41:55 are potentially bad packages.

00:41:57 And it's also, I guess, you know, worth pointing out that if we go over, say, to PyPI, there's

00:42:02 over 300,000 packages over there.

00:42:05 And if there are 40 actually malicious ones, right, the chances are low.

00:42:10 They're not very high.

00:42:12 But so people shouldn't be, you know, running for the hills and complete panic or anything,

00:42:17 I don't think, from this.

00:42:18 But at the same time, we should be careful.

00:42:20 We should be cautious.

00:42:21 So, you know, what can we do?

00:42:23 That's the tough question.

00:42:24 Vince, do you want to start?

00:42:25 And you want me to go?

00:42:26 Sure.

00:42:26 I mean, there's a lot of things that we can do.

00:42:29 I mean, John Speed's hit on a few of them about just kind of being more deliberate, you know,

00:42:33 checking your work before you download something.

00:42:36 And also, you know, when you're considering dependencies, I mean, you mentioned C++ and,

00:42:40 you know, the late 90s.

00:42:41 I vaguely remember those times.

00:42:43 I remember when Boost came out, it was a big deal.

00:42:44 Oh, yeah.

00:42:44 You actually had a dependency that was...

00:42:46 I remember reading more books.

00:42:47 Right.

00:42:48 Less internet, more books to make things...

00:42:50 So, yeah, we moved on from that.

00:42:52 But ultimately, you know, it is worth considering, do you actually need this dependency?

00:42:55 You know, LeftPad, and NPM is a funny, you know, canonical example.

00:42:58 Broke the internet because people didn't feel like typing one line of their own code.

00:43:01 They wanted to import a LeftPad-ing dependency.

00:43:04 I do feel that's a really good example.

00:43:06 And certainly, LeftPad came to mind, not as a malicious thing, but just as a supply chain

00:43:12 Jenga tower type of thing.

00:43:14 And somebody pulled too much on a part of the Jenga tower and it came down.

00:43:17 I feel that the JavaScript community has way smaller Lego pieces than the Python community.

00:43:25 The blocks that you click together here are larger.

00:43:28 So, I feel like there's just fewer in number external dependencies on average in my Python

00:43:35 experience than my JavaScript experience.

00:43:37 Yeah, I think that's accurate.

00:43:37 I mean, numbers vary.

00:43:39 I've seen NPM, people who use NPMs are JavaScript developers.

00:43:43 The average package in NPM has like 94% dependency.

00:43:47 You know, other dependencies, only 6% is your actual code you've written.

00:43:51 Most of the modern languages, meaning JavaScript, Python, and some others are in like the 90-ish

00:43:56 range.

00:43:57 And then you see C and C++ are much lower.

00:43:59 Java is somewhere in the middle.

00:44:00 So, yeah.

00:44:01 Python is, I would say, lower than JavaScript, but much higher than the kind of legacy languages

00:44:06 that are historically used.

00:44:08 So, be deliberate means things like don't just, as fast as you can, type pip install, whatever.

00:44:13 Type pip install and then carefully type out the package name.

00:44:17 Maybe give it a quick read before you hit go.

00:44:19 Yeah, or just copy and paste.

00:44:20 Don't type it all.

00:44:22 Yeah.

00:44:23 So, for example, if I'm over here on PyPI, there's a copy button I can click and it'll

00:44:29 do exactly that.

00:44:30 Right.

00:44:30 Right.

00:44:31 That's an option.

00:44:31 Yeah.

00:44:31 So, yeah.

00:44:32 Just being a little more thoughtful and kind of, you know, looking at the dependency chain

00:44:36 as well before you download something, which is much harder than it should be, to be

00:44:40 completely fair.

00:44:41 That's helpful to know that, you know, maybe the top level you are using Joski.

00:44:46 That's how you pronounce that.

00:44:47 I have no idea what Joski.

00:44:49 I don't know.

00:44:49 You should pip install that right now.

00:44:50 Let's see what happens.

00:44:51 Let's just see what happens.

00:44:52 Here's an example of one of those that should rank lower.

00:44:55 No offense if this is your project, but it literally has zero stars, zero forks.

00:45:00 Its features are to do.

00:45:01 Its requirements are to do.

00:45:02 Its PyPI version banner is not found.

00:45:06 And I mean, it is only four minutes old.

00:45:08 They may be working.

00:45:09 Yeah.

00:45:09 Sure.

00:45:10 Yeah.

00:45:10 If it has dependencies, this one probably doesn't.

00:45:12 But, you know, take a look at those two.

00:45:13 Just makes them there's nothing egregiously wrong at a minimum.

00:45:16 Yeah.

00:45:17 That's one of the things that makes it kind of insidious and hard to see is the thing I

00:45:22 directly look at may be fine.

00:45:24 But the person who maintained that, did they make a mistake in the things that they depend

00:45:28 upon?

00:45:29 Or maybe, you know, transit, like follow that chain that graph down far enough.

00:45:33 Right.

00:45:34 There's a lot of layers that could be happening along the way.

00:45:37 It ends up looking like a web.

00:45:38 And not surprisingly, just because of that, most vulnerabilities inside of packages like

00:45:43 this are in the transitive dependencies, the ones below the first layer, the dependencies

00:45:48 are dependent.

00:45:48 Interesting.

00:45:49 So you can pip install the thing.

00:45:51 What about pinning the version?

00:45:52 I know there were some issues about having a private PyPI server, which I think is a good

00:45:58 idea where you whitelist packages in.

00:46:00 You say, we approve these things and only these things get installed.

00:46:03 And if you want to use a new one, we've got to opt it in.

00:46:06 And then now it's part of the organization.

00:46:08 That seems like something you could do, right?

00:46:10 There's PyPI server that you could set up that is a sort of pass-through layer there.

00:46:15 But then there was also the vulnerability of the version mismatch.

00:46:19 Like if there's a higher version of that thing on the public PyPI, then your local one.

00:46:23 So people were putting in like data layer version 70, you know, and then it's like, oh, there's

00:46:29 a newer version out there for me to go get.

00:46:31 I'll get that, even though it was internal, meant to be internal only, right?

00:46:35 So there's these challenges.

00:46:37 But what do you think about a private whitelist server?

00:46:39 It certainly seems valuable and seems like it's another speed bump, as John Speed was calling

00:46:45 them.

00:46:45 But yeah, I mean, then you run into scenarios like the one you described, where it's kind

00:46:50 of, I guess, that's undefined behavior, potentially, or at least not well-known behavior that maybe

00:46:55 isn't necessarily most intuitive.

00:46:56 So even that might not be enough.

00:46:58 So then, yeah, the pinning could help.

00:47:00 Then, of course, there's the challenge of maintaining your pin at the proper level, which adds more

00:47:05 effort on the developers to maintain up-to-date dependencies.

00:47:10 At least publicly.

00:47:11 Yeah.

00:47:12 Publicly, we have Dependabot on GitHub, which is way more of a pain than it should be to use.

00:47:17 Because if you've got 10 updates, it'll issue 10 PRs, which conflict with themselves.

00:47:22 Anyway, that's a long story.

00:47:24 But it's still at least some automation that says, hey, there's a new version of this.

00:47:27 Here's the change log.

00:47:28 And we also have the CVE security checks of Dependabot, which are really good.

00:47:33 Yeah.

00:47:33 Unfortunately, most of these typosquatting or just general supply chain attacks don't end

00:47:38 up in the NVD as a CVE.

00:47:40 Yeah.

00:47:40 Who's going to study this one and then not just say, take it down, right?

00:47:43 Like it's living under the, in the shadows, right?

00:47:46 Of being unnoticed.

00:47:48 To an extent, yeah.

00:47:48 NPM does a good job with their advisory service of like saying, this is a malicious package

00:47:53 and this is why we removed it.

00:47:55 But not all package managers do that.

00:47:57 And even so, then you have to go to all the most developers.

00:48:00 These ones are developing multiple languages these days.

00:48:03 So it's hard to keep track.

00:48:04 Yeah.

00:48:04 What about having isolated environments for trying out new packages?

00:48:09 So for example, one of the things I'm trying to do is if I'm checking out any new package,

00:48:13 I have to pip install.

00:48:14 And maybe that happens in a Docker container.

00:48:16 And then I throw away the container or possibly a VM with snapshotting on.

00:48:20 And then I roll back the snapshot periodically.

00:48:22 Yeah.

00:48:23 Those both sound like great ways to have good hygiene and not isolate the potential blast radius

00:48:29 of a potentially malicious package.

00:48:33 Yeah.

00:48:33 It's one thing to say, here's a thing we want you to check out and it's on PyPI and it's

00:48:38 really well known, but it's, you know, you got to explore new things that aren't super well

00:48:42 known yet.

00:48:42 Right.

00:48:43 And so how do you install that?

00:48:44 Right.

00:48:45 So I think some kind of blast blast store, like you said, like Docker, like a VM is not

00:48:49 a terrible idea.

00:48:50 Yeah.

00:48:50 It's a good one.

00:48:51 What else?

00:48:51 There's the open source software found, security foundation.

00:48:55 Yeah, that's right.

00:48:56 This is open SSF.

00:48:58 Open SSF.

00:48:59 Clearly a reference to open SSL.

00:49:01 Yeah.

00:49:01 another well known software supply chain compromise that widespread impact.

00:49:06 It's worth.

00:49:07 It's worth.

00:49:07 It's worth pointing out that this group for anyone who is comes very enthusiastic about

00:49:12 open source software supply chain security in particular has become a meeting ground where

00:49:17 both companies, but also persons interested in this sort of topics we've been discussing

00:49:21 the day and more have set up a series of working groups.

00:49:24 There's six roughly and, meet every few weeks, open community, fun, interesting people,

00:49:30 either, interested in the topic or actively working to, give back and contribute.

00:49:35 it's run by the Linux foundation and, we would highly recommend it as a place to

00:49:40 find other like-minded persons.

00:49:41 If you care about these sorts of topics.

00:49:43 Yep.

00:49:43 Fantastic.

00:49:44 And then there's the further on down the road, which we've touched on a couple of times,

00:49:49 but maybe we can encourage some enterprising person, people group out there to go after

00:49:54 it like a, a hardened pip or, you know, we have things that are sort of on top of pip-tools.

00:50:00 We've got pip ENV.

00:50:02 We've got pip X.

00:50:03 I'm a big fan of pip X, the isolation.

00:50:05 And then that gives us kind of need.

00:50:07 And just, I can see like, like a pip sec or something along those or PIPs, maybe a plural

00:50:14 PIPs.

00:50:14 I don't know for pip security, but something like that that incorporates some of these ideas.

00:50:18 Maybe it, it checks in.

00:50:20 You say like, I don't want to install any package that is not in the top 1000.

00:50:25 Sure.

00:50:26 Or a popular package, except for what I whitelist in on top of that or something or check with

00:50:32 Aurora Borealis about the score or check with the, have I been PIP?

00:50:37 Whatever that thing ever would become, right?

00:50:39 So talk about like where you might see things going.

00:50:42 Yeah.

00:50:42 Well, there's been a couple, I'll call them starter projects in the hardened pip area.

00:50:47 There even was one called pip sec.

00:50:49 You can find it on PyPI, but it's really, there's nothing there, unfortunately, at least yet.

00:50:55 That namespace is claimed.

00:50:56 The maintainers who we mentioned, Benjamin Balderbach, especially are interested in doing something,

00:51:01 just haven't had time, other busy priorities.

00:51:04 And I think there is a lot of potential to build out that idea and create something that

00:51:10 could be useful to the average developer.

00:51:12 JavaScript has a tool that has at least some moderate popularity called MPQ that does this.

00:51:18 And I think it's time for the Python community to see if there's something similar.

00:51:23 I would love to see something like that.

00:51:24 Another thing is Google.

00:51:26 Thank you, Google.

00:51:27 Has become a visionary sponsor of the PSF.

00:51:31 And specifically, they want their funds to go towards critical supply chain security improvements,

00:51:37 developing productized malware detection for PyPI, for a type of dynamic analysis infrastructure.

00:51:44 So this sort of gets at the hit at, maybe there's something that the PyPA and PyPI.org could do on their end without even necessarily changing PIP, right?

00:51:55 PIP's going to go talk to some API there.

00:51:57 And it goes, yeah, no, not this one.

00:51:59 That's right.

00:51:59 Or you're going to upload it, like with upload a new package.

00:52:02 It goes, no, we don't want to accept it.

00:52:03 And Dustin Ingram of the Python Software Foundation at PyCon just recently devoted his talk to talking about Python and the software supply chain issues that we've discussed today and writ large to include typosquatting.

00:52:15 And it's clear that there is energy and willingness from even core members of Warehouse and Python Software Foundation to tackle these issues.

00:52:24 So we're glad to see that.

00:52:26 It'd be great to see something like that happening.

00:52:28 I think layers as well, right?

00:52:29 That's how you talk about security often is it's not just, well, you have a strong password and you're fine.

00:52:34 Like, well, and maybe you have two-factor authentication.

00:52:36 And maybe you run as lower permissions and, and, and, and, right?

00:52:39 Yeah.

00:52:39 Layers.

00:52:39 So this could be one of the layers, but not necessarily all of them.

00:52:43 Yeah.

00:52:43 I should note that we even, a couple of us at IQT Labs even put in an issue recently that on Warehouse that might interested some parties here.

00:52:52 It's issue 9527.

00:52:54 You can also find it at short.iqt.org slash issue, just a redirect.

00:52:59 And we essentially call for something like social distancing for the top Python package indexes.

00:53:05 So that for very popular package names, the package names that are close by are blocked off.

00:53:11 So that not saying that anybody who chooses those names is malicious, but just so malicious people can't choose them.

00:53:17 Feel free to upvote that.

00:53:18 We've been discussing this with some of the members of the Warehouse team.

00:53:22 Yeah.

00:53:22 So your proposal is that Pandar should not have even been allowed, right?

00:53:28 That's right.

00:53:28 Given that the package Pandas is so popular, minor variations on its spelling should basically be blocked or maybe redirect to Pandas and say with a warning, like, you tried to install Pandar.

00:53:41 Did you mean to install Pandas?

00:53:42 That's right.

00:53:43 Something like that.

00:53:44 That's right.

00:53:44 So it's a way to build in guardrails so that the unwary don't fall prey to this.

00:53:51 Yeah.

00:53:51 Personally, my first impression is that that's a good idea.

00:53:54 It's worth it that we don't need request and requests and requester.

00:53:58 And, you know, the potential harm is higher than the value of, you know, reusing very, very similar names.

00:54:05 Yeah, we agree.

00:54:06 And there's obviously tradeoffs.

00:54:08 Yeah.

00:54:08 Vince, what do you think?

00:54:09 You must agree with this, I suspect.

00:54:11 I do agree with that.

00:54:12 I definitely supported this.

00:54:13 And I know one other thing that's under consideration that's relevant is namespacing.

00:54:16 So you can, you know, Kenneth Wright is the request guy.

00:54:21 He has his namespace.

00:54:22 You go to his namespace, you're less likely to mistype that and have someone, the namespace and have someone who has claimed the same package within their own namespace.

00:54:31 So possible, but, you know, it's another layer, I guess, as you were describing it.

00:54:35 Yeah, it makes the commands.

00:54:36 You got to type a little bit longer.

00:54:37 But it makes it really clear where it's coming from.

00:54:40 I mean, that's what the point of namespaces and programming is.

00:54:42 It's really clear what library it comes from or what part of your code it comes from.

00:54:47 And who?

00:54:47 Grouped together in namespace.

00:54:48 As well.

00:54:49 I know Go has done, you know, used that to great success.

00:54:52 Yeah, Kim Benwick out there put a cool comment that's sort of related to that, talking about the private IPI server that's, you know, redirecting out.

00:55:01 It would help if the private PIs, if you had an option to prevent the account uploading images from or pulling images with a certain prefix.

00:55:09 For example, if everybody named their packages ABC something at the company, you could say ABC is private, ABC star is private, and never, ever, you know, go look beyond here for that type of thing.

00:55:22 I think that that's pretty interesting.

00:55:23 Yeah, it's a good idea.

00:55:24 Yeah, I think it seems super simple and a good idea.

00:55:27 I agree.

00:55:28 All right, gentlemen.

00:55:29 Well, very cool to talk about this stuff.

00:55:31 Like I said, it's going to make all of us a little bit more nervous, I suspect.

00:55:35 You know, for example, Corey Adkins out there said, I also just found an article on malicious Docker images.

00:55:39 Now I am paranoid, which.

00:55:41 I'm sorry.

00:55:42 Welcome.

00:55:43 Yeah, yeah.

00:55:45 I've been there for a while.

00:55:46 All right.

00:55:47 Before I let you two out of here, though, real quickly, let's answer.

00:55:49 I'll ask you the two questions at the end of the show, of course.

00:55:52 So if you're going to write some Python code, what editor do you use?

00:55:55 I use Vim if I'm in the command line.

00:55:57 But if I have the fortune to be outside of it, use Sublime.

00:56:01 Right on.

00:56:01 I suspect JupyterLab is also in there.

00:56:03 Definitely Jupyter is in there.

00:56:04 Yeah.

00:56:05 And Ben's?

00:56:05 Probably PyCharm.

00:56:07 Yeah, I mean, I'll use Vim if I'm already in a command line.

00:56:11 But yeah, that's not as often these days.

00:56:13 So PyCharm is just my idea of choice.

00:56:15 Right on.

00:56:17 And then notable PyPI package, something that's like, oh, people should know about.

00:56:21 Check out one called NetworkML.

00:56:22 It's a package related to machine learning and network traffic.

00:56:25 The lead maintainer is Charlie Lewis of IQT Labs.

00:56:28 You can go find it on PyPI.

00:56:30 Yeah.

00:56:30 Fantastic.

00:56:31 So machine learning plugins for network traffic.

00:56:34 Yeah.

00:56:34 So it identifies like anomalies and other weirdnesses like that?

00:56:38 Yeah.

00:56:38 It parses network traffic.

00:56:39 And one of the cool things it does is it helps identify what sort of device is being observed.

00:56:45 So is this thing a printer?

00:56:46 Or is this thing a personal computer?

00:56:47 Is it an active directory controller?

00:56:49 Et cetera.

00:56:49 Is it a canary?

00:56:51 Is it a canary?

00:56:52 Who knows?

00:56:54 Awesome.

00:56:54 All right.

00:56:55 Well, thank you both for shedding the light on lots of what's happening, some of the things

00:57:00 that are being done and what might also be done as well.

00:57:03 So final call to action.

00:57:04 People that want to get involved, maybe do more, become more aware.

00:57:07 What do you all say?

00:57:08 Yeah.

00:57:08 I mean, there's plenty of work to be done.

00:57:10 Open SSF is a very welcoming, relatively new organization that has a nice list of stuff

00:57:15 to do.

00:57:15 Python Software Foundation also actually has an active list of items they would like

00:57:21 to work on, some of which are relevant to this topic.

00:57:23 So that'd be two great places to start.

00:57:25 I'll point you back towards that GitHub issue.

00:57:27 Feel free to chime in.

00:57:30 And I think there's definitely potential over the next few months.

00:57:32 Additionally, we're actually working on a survey at IQT Labs called on secure code reuse.

00:57:38 So if you want to help build the research foundations for this, you can find this survey at

00:57:42 short.iqt.org slash survey.

00:57:45 And we're trying to understand the developer or data scientists or other programming professional

00:57:51 experience with package reuse.

00:57:52 So that's another way.

00:57:54 So hopefully this survey informs future tools.

00:57:56 Yeah.

00:57:57 Fantastic.

00:57:57 Well, thanks for the work that you all are doing.

00:57:59 And thanks for being on the show.

00:58:00 Thanks for having us.

00:58:01 Thanks for having us.

00:58:02 Bye.

00:58:02 This has been another episode of Talk Python to Me.

00:58:06 Our guests on this episode were Ben Stoser and John Speedmeyers.

00:58:10 It was brought to you by Square, us over at Talk Python Training, and the transcripts are

00:58:14 brought to you by Assembly AI.

00:58:16 With Square, your web app can easily take payments, seamlessly accept debit and credit cards, as

00:58:22 well as digital wallet payments.

00:58:23 Get started building your own online payment form in three steps with Square's Python SDK

00:58:29 at talkpython.fm/square.

00:58:32 Want to level up your Python?

00:58:34 We have one of the largest catalogs of Python video courses over at Talk Python.

00:58:38 Our content ranges from true beginners to deeply advanced topics like memory and async.

00:58:43 And best of all, there's not a subscription in sight.

00:58:46 Check it out for yourself at training.talkpython.fm.

00:58:49 Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

00:58:53 We should be right at the top.

00:58:55 You can also find the iTunes feed at /itunes, the Google Play feed at /play,

00:59:00 and the direct RSS feed at /rss on talkpython.fm.

00:59:04 We're live streaming most of our recordings these days.

00:59:07 If you want to be part of the show and have your comments featured on the air,

00:59:11 be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

00:59:16 This is your host, Michael Kennedy.

00:59:17 Thanks so much for listening.

00:59:18 I really appreciate it.

00:59:20 Now get out there and write some Python code.

00:59:21 You're welcome.

