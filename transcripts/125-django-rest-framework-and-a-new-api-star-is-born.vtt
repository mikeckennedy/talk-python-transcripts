WEBVTT

00:00:00.001 --> 00:00:02.940
APIs were once the new and enabling thing in technology.

00:00:02.940 --> 00:00:06.220
Today, they're table stakes, and getting them right is important.

00:00:06.220 --> 00:00:11.580
Today, we'll talk about one of the most popular and mature frameworks in Django REST framework.

00:00:11.580 --> 00:00:15.600
You'll meet the creator, Tom Christie, and talk about the framework, API design,

00:00:15.600 --> 00:00:19.080
and even his successful take on funding open source projects.

00:00:19.080 --> 00:00:20.540
But Tom is not done here.

00:00:20.540 --> 00:00:23.980
He's also creating the next-generation API framework

00:00:23.980 --> 00:00:27.760
that fully embraces Python 3's features called API Star.

00:00:27.960 --> 00:00:30.300
It's all about frameworks on Talk Python To Me.

00:00:30.300 --> 00:00:33.720
Episode 125, recorded June 8, 2017.

00:00:57.900 --> 00:01:01.660
Welcome to Talk Python to Me, a weekly podcast on Python,

00:01:01.660 --> 00:01:04.720
the language, the libraries, the ecosystem, and the personalities.

00:01:04.720 --> 00:01:06.840
This is your host, Michael Kennedy.

00:01:06.840 --> 00:01:08.840
Follow me on Twitter, where I'm @mkennedy.

00:01:08.840 --> 00:01:12.720
Keep up with the show and listen to past episodes at talkpython.fm,

00:01:12.720 --> 00:01:15.300
and follow the show on Twitter via at Talk Python.

00:01:15.300 --> 00:01:19.720
This episode is brought to you by Linode and Rollbar.

00:01:19.720 --> 00:01:20.660
That's right.

00:01:20.660 --> 00:01:24.900
Welcome to Linode, who has joined Talk Python To Me as a major sponsor.

00:01:25.500 --> 00:01:28.440
Be sure to check out what both of them are offering during their segments.

00:01:28.440 --> 00:01:29.860
It really helps support the show.

00:01:29.860 --> 00:01:32.300
Tom, welcome to Talk Python.

00:01:32.300 --> 00:01:32.960
Hi.

00:01:32.960 --> 00:01:36.180
Hey, it's great to see you again, and great to have you on the show finally.

00:01:36.180 --> 00:01:38.860
I've been admiring Django REST framework for a long time,

00:01:38.860 --> 00:01:42.260
and really a fan of your new work that we're going to get into.

00:01:42.260 --> 00:01:44.180
So I'm happy to have you here to talk about it.

00:01:44.180 --> 00:01:44.720
Cheers, Mike.

00:01:44.720 --> 00:01:45.460
Good to see you again.

00:01:45.460 --> 00:01:45.840
Yeah, yeah.

00:01:45.840 --> 00:01:46.520
How are you doing, anyway?

00:01:46.520 --> 00:01:48.200
I'm doing super well, super well.

00:01:48.840 --> 00:01:53.700
So I want to hear how you got into programming and Python and all that, but how was PyCon?

00:01:53.700 --> 00:01:55.540
We were both there the last time I saw you.

00:01:55.540 --> 00:02:01.040
Even though right now we're like 6,000 miles apart, we were in the same room just a little

00:02:01.040 --> 00:02:01.420
while ago.

00:02:01.420 --> 00:02:02.280
How did you enjoy it?

00:02:02.660 --> 00:02:05.940
It was hectic.

00:02:05.940 --> 00:02:08.220
You had a booth, right?

00:02:08.220 --> 00:02:10.200
Yeah, we had a booth.

00:02:10.200 --> 00:02:17.040
So I haven't done PyCon before, mostly because with it being over in the States, in the past

00:02:17.040 --> 00:02:23.560
it's been hard for me to justify taking the time and the cost of the transatlantic flight

00:02:23.560 --> 00:02:24.760
and so on.

00:02:24.760 --> 00:02:29.760
Since I've been, and I guess we'll talk about this later, but since I've been doing open

00:02:29.760 --> 00:02:35.080
source for a living, all of a sudden, okay, I really better step up and get across there.

00:02:35.080 --> 00:02:39.700
And I kind of realized slightly later on in the day, oh, wait a minute, they have this

00:02:39.700 --> 00:02:43.640
thing where they offer booths to open source projects.

00:02:43.640 --> 00:02:45.020
We better do that.

00:02:45.020 --> 00:02:46.340
That sounds like a good idea.

00:02:46.340 --> 00:02:53.600
And yeah, just about managed to organize getting one of those with a lot of help from Anna,

00:02:53.600 --> 00:02:54.980
who I also work with.

00:02:56.080 --> 00:03:01.200
And I didn't know what to expect, but it was just nonstop, basically.

00:03:01.200 --> 00:03:02.300
That's really good, right?

00:03:02.300 --> 00:03:04.500
People are dropping in to talk to you about your project.

00:03:04.500 --> 00:03:05.160
Yeah.

00:03:05.160 --> 00:03:10.780
And there's so much kind of positive reinforcement coming from people at the stage, but it was

00:03:10.780 --> 00:03:16.440
just nonstop talking for about three days together with the poster session as well.

00:03:16.840 --> 00:03:21.520
So I have no idea how many, felt like hundreds, but...

00:03:21.520 --> 00:03:22.860
Yeah, that's really cool.

00:03:22.860 --> 00:03:28.200
We had a booth as well for all the podcasters that we had gotten grouped together and had

00:03:28.200 --> 00:03:31.040
the five podcasts all put together in the one booth.

00:03:31.040 --> 00:03:32.400
And it was a real similar experience.

00:03:32.400 --> 00:03:34.980
Like the positive vibes and the feedback was amazing.

00:03:34.980 --> 00:03:40.240
Some of the other guys who hadn't been there before, they were like, wow, this kind of makes

00:03:40.240 --> 00:03:41.840
it so real with all these people.

00:03:42.260 --> 00:03:43.600
Did you have that similar experience?

00:03:43.600 --> 00:03:47.340
Like, you know, there's a number of stars on GitHub and you get a message and stuff,

00:03:47.340 --> 00:03:51.760
but like when hundreds of people come up to you and talk to how you've like enabled something,

00:03:51.760 --> 00:03:53.540
did that strike you pretty strongly?

00:03:53.740 --> 00:04:00.180
I kind of had this odd mixed feelings about, not mixed feelings exactly, but just this strange

00:04:00.180 --> 00:04:05.940
sensation because being at the booth and you've got, like you say, all these people coming

00:04:05.940 --> 00:04:12.260
up and, you know, saying thanks for the work that you do on the project and all of these

00:04:12.260 --> 00:04:13.340
kind of good vibes.

00:04:13.340 --> 00:04:17.800
But then at the same time, I'm standing there at the booth and I'm looking over at all the

00:04:17.800 --> 00:04:24.960
big, real professional companies that know what they're doing and thinking, hmm, that's

00:04:24.960 --> 00:04:27.300
where I'd really like us to get to, you know?

00:04:27.300 --> 00:04:27.760
Yeah.

00:04:27.760 --> 00:04:28.220
Yeah.

00:04:28.220 --> 00:04:29.600
That was interesting.

00:04:29.600 --> 00:04:36.320
But what was also nice as well was having a good excuse to only talk to people at the

00:04:36.320 --> 00:04:36.640
conference.

00:04:37.400 --> 00:04:43.780
You know, the only time that I managed to get upstairs into the talk spaces was for

00:04:43.780 --> 00:04:49.960
the talk that I gave and the rest of all of the talk session time, I was just talking to

00:04:49.960 --> 00:04:51.760
different people and I really enjoyed that.

00:04:51.760 --> 00:04:53.460
I got a lot out of that.

00:04:53.460 --> 00:04:54.100
Yeah.

00:04:54.100 --> 00:04:55.460
I felt the same way.

00:04:55.460 --> 00:04:58.680
I only went to the keynotes and the open spaces.

00:04:58.680 --> 00:05:02.940
And other than that, I really just was at the booth talking to people.

00:05:02.940 --> 00:05:03.940
It was really, really amazing.

00:05:03.940 --> 00:05:07.360
And, you know, thanks to everyone who stopped by my booth and I'm sure you feel the same

00:05:07.360 --> 00:05:07.560
way.

00:05:07.560 --> 00:05:08.920
It was quite cool.

00:05:08.920 --> 00:05:12.100
By the end of the second day, I had basically lost my voice from talking.

00:05:12.100 --> 00:05:13.420
Yes.

00:05:13.420 --> 00:05:19.700
I should also say that we got a bunch of help from other volunteers who offered to step up

00:05:19.700 --> 00:05:23.940
and give us some of their time on the booth, which was awesome as well.

00:05:23.940 --> 00:05:25.040
Yeah, that's cool.

00:05:25.040 --> 00:05:25.880
Thank you to them.

00:05:25.880 --> 00:05:31.440
So, yeah, one positive experience from PyCon and people who are out there listening, be sure

00:05:31.440 --> 00:05:35.080
to get your PyCon tickets early because, as always, it sells out.

00:05:35.080 --> 00:05:37.660
And then I get messages like, hey, can you get me a ticket?

00:05:37.660 --> 00:05:38.200
It's sold out.

00:05:38.200 --> 00:05:40.060
Like, nope, no secret tickets.

00:05:40.060 --> 00:05:41.400
All right.

00:05:41.400 --> 00:05:46.520
So let's get into your story first before we talk about your restful things.

00:05:46.520 --> 00:05:48.500
How do you get into programming in Python?

00:05:48.500 --> 00:05:49.000
Oh, yeah.

00:05:49.000 --> 00:05:49.360
Okay.

00:05:49.360 --> 00:05:53.740
Well, let's start with how do I get into programming, I suppose.

00:05:53.740 --> 00:05:58.940
So ZX Spectrum 128.

00:05:58.940 --> 00:06:07.900
So when I was a little kid, I did a little bit of programming from magazines and stuff.

00:06:07.900 --> 00:06:14.060
You know, when it was in the days when they came with a tape on the cover back then.

00:06:14.640 --> 00:06:20.340
And my dad bought me a ZX Spectrum and I did a little bit of noodling around then.

00:06:20.340 --> 00:06:23.140
Just silly little game stuff.

00:06:23.140 --> 00:06:24.340
Well, not even that, really.

00:06:24.340 --> 00:06:29.860
At that point, that was just copying stuff out of magazines or trying to figure out little

00:06:29.860 --> 00:06:30.540
bits and pieces.

00:06:30.540 --> 00:06:33.280
And then I kind of dropped it for a while.

00:06:33.280 --> 00:06:43.280
And later on, when I was a teenager, I started getting into QBasic and programming games together

00:06:43.280 --> 00:06:43.960
with a friend.

00:06:43.960 --> 00:06:47.140
And we had like a little thing going when we did that.

00:06:47.140 --> 00:06:52.380
And that got me into it enough to decide to do it for a university course.

00:06:52.380 --> 00:06:56.420
And then I've had a big old windy road since then.

00:06:56.420 --> 00:07:01.900
So I started out working in speech recognition, stayed in that field for several years.

00:07:02.200 --> 00:07:11.180
I then moved into networking and worked with a content distribution network who did a peer-to-peer

00:07:11.180 --> 00:07:12.700
content distribution network.

00:07:12.700 --> 00:07:13.640
Peer-to-peer, huh?

00:07:13.640 --> 00:07:14.400
That's pretty cool.

00:07:14.400 --> 00:07:14.780
Yeah.

00:07:14.780 --> 00:07:15.340
Yeah.

00:07:15.340 --> 00:07:25.240
Well, what they started out with initially was providing BitTorrent caches to ISPs so that

00:07:25.240 --> 00:07:31.500
ISPs wouldn't have to pay for the upstream costs to the internet and could instead just cache

00:07:31.500 --> 00:07:34.280
the really popular streams, right?

00:07:34.280 --> 00:07:42.100
Do you feel like BitTorrent was ruined by people using it too much for piracy?

00:07:42.100 --> 00:07:48.380
Like BitTorrent, I think, would have been a really fantastic for all sorts of web content

00:07:48.380 --> 00:07:51.360
delivery, video streaming, so many things.

00:07:52.020 --> 00:07:59.360
But since it got so associated with pirating MP3s and videos, it's kind of a black mark.

00:07:59.360 --> 00:07:59.980
I don't know.

00:07:59.980 --> 00:08:06.860
I think if it had been the right solution technically, then it would have won out on its own merits

00:08:06.860 --> 00:08:07.620
anyway.

00:08:07.620 --> 00:08:15.920
And the legal side of it, I don't think was really the main influencer of that necessarily.

00:08:17.200 --> 00:08:22.820
Oh, and really, I guess the reason why I say that is because I was there busy working at

00:08:22.820 --> 00:08:32.540
a company which was using BitTorrent and was trying to provide a, here's how you do a CDN

00:08:32.540 --> 00:08:33.620
using PID's PIT.

00:08:34.040 --> 00:08:34.880
I don't know.

00:08:34.880 --> 00:08:38.460
It's too long ago for me to give you a code here.

00:08:38.460 --> 00:08:41.120
I'm going to just stop now.

00:08:41.120 --> 00:08:41.940
All right.

00:08:41.940 --> 00:08:42.420
Sounds good.

00:08:42.420 --> 00:08:43.300
All right.

00:08:43.300 --> 00:08:44.360
So you did that for a while.

00:08:44.360 --> 00:08:45.900
Was that in Python or something else?

00:08:45.900 --> 00:08:51.160
So that, see, I can't remember at what point things stepped into Python.

00:08:51.340 --> 00:09:02.960
It was either when I was working in speech recognition and at some point all of the sorts of the build

00:09:02.960 --> 00:09:07.040
tools that you need for doing things like building the language models, right?

00:09:07.040 --> 00:09:12.700
The sorts of things that we were doing when I started there was writing shell scripts and

00:09:12.700 --> 00:09:13.340
pull scripts.

00:09:13.680 --> 00:09:18.620
And I can't quite remember whether I moved into Python then because it's been long enough

00:09:18.620 --> 00:09:23.040
now or whether it was when I then later started doing networking.

00:09:23.040 --> 00:09:28.540
But whenever it was, all of a sudden, it was like, oh, wow.

00:09:28.540 --> 00:09:30.920
This is so, you know.

00:09:30.920 --> 00:09:31.500
This is different.

00:09:31.500 --> 00:09:40.980
Having been used to working in C and C++ and either Pearl or Bash for scripting, it was,

00:09:40.980 --> 00:09:43.860
yes, such a breath of fresh air.

00:09:43.860 --> 00:09:53.340
And it's quite surprising almost to be here after all this time and still be so infused by

00:09:53.340 --> 00:09:56.680
the language and not feel like that's really changed.

00:09:56.680 --> 00:09:58.200
Yeah, that's really an interesting point.

00:09:58.280 --> 00:10:01.580
I've kind of marveled at that myself as well.

00:10:01.580 --> 00:10:06.640
So, you know, even if you just look at like some of the growth curves, popularity curves

00:10:06.640 --> 00:10:13.280
of Python and the ecosystem, it's been around for over 25 years now, but it's still growing

00:10:13.280 --> 00:10:17.800
and growing more quickly now than it did 10 years ago or when it was brand new.

00:10:17.800 --> 00:10:18.760
It's really interesting.

00:10:18.760 --> 00:10:19.380
Right.

00:10:19.380 --> 00:10:26.900
And we're just coming up to potentially a new kind of slice of stuff that it can break into

00:10:26.900 --> 00:10:27.680
as well.

00:10:27.680 --> 00:10:33.120
You know, now that Python's readoption has finally really started to hit that tipping

00:10:33.120 --> 00:10:41.200
point and the asyncio primitives that are in there, all of a sudden there's this new slice

00:10:41.200 --> 00:10:46.900
of stuff that Python could be really, really good at that it historically hasn't particularly

00:10:46.900 --> 00:10:47.240
been.

00:10:47.240 --> 00:10:49.880
Yeah, it's definitely an exciting time.

00:10:49.880 --> 00:10:50.660
Yeah, for sure.

00:10:50.660 --> 00:10:51.920
All right.

00:10:51.920 --> 00:10:52.900
So thanks for the story.

00:10:52.900 --> 00:10:54.080
What do you do day to day?

00:10:54.080 --> 00:10:56.800
You said you're a professional open source developer.

00:10:56.800 --> 00:10:57.720
How awesome is that?

00:10:57.720 --> 00:11:02.620
Yes, that's quite a rare, a rare thing, isn't it?

00:11:02.620 --> 00:11:03.000
Really?

00:11:03.000 --> 00:11:04.460
I love to share these stories.

00:11:04.460 --> 00:11:13.360
I've been, you know, been really lucky with the way things have worked out just with timing

00:11:13.360 --> 00:11:14.140
and so on.

00:11:14.140 --> 00:11:25.420
So, yes, I, as of about 12 months ago, I now work on open source for my living full

00:11:25.420 --> 00:11:25.860
time.

00:11:25.860 --> 00:11:28.400
So let's approach it this way.

00:11:28.440 --> 00:11:33.900
So I started on Rest Framework about five years ago and all of that was as a side project

00:11:33.900 --> 00:11:35.360
as it is with most people.

00:11:35.360 --> 00:11:40.540
And when we came up to the point where I was thinking about all the things we'd need to do

00:11:40.540 --> 00:11:45.420
for Rest Framework 2, I figured that I was going to need some full time on it.

00:11:45.780 --> 00:11:49.860
And in order to do that, we launched a Kickstarter project for it.

00:11:49.860 --> 00:11:51.700
And that was really successful.

00:11:51.700 --> 00:11:54.060
And I managed to get...

00:11:54.060 --> 00:11:54.840
What year was that?

00:11:54.840 --> 00:11:55.300
Do you remember?

00:11:55.300 --> 00:11:58.860
That must have been either 2014 or 2015.

00:11:58.860 --> 00:11:59.720
2015.

00:11:59.720 --> 00:11:59.900
Okay.

00:11:59.900 --> 00:12:01.080
So pretty recently.

00:12:01.080 --> 00:12:01.400
Yeah.

00:12:01.840 --> 00:12:02.280
Yeah.

00:12:02.280 --> 00:12:03.300
Not so long ago.

00:12:03.300 --> 00:12:08.920
It probably, it was probably started in 2014 and I was probably working on it up until

00:12:08.920 --> 00:12:09.560
2015.

00:12:09.560 --> 00:12:11.280
How'd the Kickstarter go, by the way?

00:12:11.280 --> 00:12:12.360
Oh, it was awesome.

00:12:12.360 --> 00:12:12.980
Yeah.

00:12:12.980 --> 00:12:20.840
We were, we got about 35,000 pounds, which I think was about $50,000.

00:12:20.840 --> 00:12:30.780
The way that I organized it, I was with a very small web consultancy or very, very into supporting

00:12:30.780 --> 00:12:31.760
open source.

00:12:31.760 --> 00:12:37.980
The person who's the CTO of the company runs the local Python meetup group and so on.

00:12:37.980 --> 00:12:45.660
And we figured out a way that I would be able to take a slice of time out of my working day

00:12:45.660 --> 00:12:48.940
in exchange for us doing the Kickstarter through the company.

00:12:48.940 --> 00:12:54.800
And I was able to work on the project for, I don't know, maybe about nine months or so as

00:12:54.800 --> 00:13:00.400
a result of the Kickstarter, with most of my time being dedicated to it, or about 50% time.

00:13:00.400 --> 00:13:07.880
So that was great and was much more successful than my highest estimate would have been for it.

00:13:07.880 --> 00:13:09.120
What goal were you asking for?

00:13:09.120 --> 00:13:13.380
I guess our starting point was probably something like 5,000 pounds.

00:13:13.600 --> 00:13:20.540
And maybe I was hoping for 10,000 and flew way past all of that.

00:13:20.540 --> 00:13:20.980
Cool.

00:13:20.980 --> 00:13:21.280
Congrats.

00:13:21.280 --> 00:13:22.200
Yeah, it was great.

00:13:22.200 --> 00:13:22.600
Yeah.

00:13:23.020 --> 00:13:33.880
And then more recently, when I was thinking about the next chunk of functionality that I wanted to be able to deliver, I was trying to figure out how to do it.

00:13:33.880 --> 00:13:37.960
And launching another Kickstarter was one of the options.

00:13:37.960 --> 00:13:46.340
But trying to find a way that we could do it that would remain sustainable rather than just being a big one-off thing.

00:13:46.340 --> 00:13:46.820
Yeah.

00:13:46.820 --> 00:13:50.160
Kickstarters are nice, but they're very much one-off.

00:13:50.160 --> 00:13:51.140
Like, here's a boost.

00:13:51.140 --> 00:13:51.920
Now what?

00:13:51.920 --> 00:13:52.260
Yeah.

00:13:52.260 --> 00:13:53.940
You can't just keep doing Kickstarters.

00:13:53.940 --> 00:14:00.340
Yeah, and it has to be – you have to have a really nicely wrapped up bit of functionality.

00:14:00.340 --> 00:14:08.620
It's difficult to kind of sell it as triage on the project or open-ended bits of work.

00:14:08.620 --> 00:14:11.060
And there's a lot of work as well.

00:14:11.540 --> 00:14:21.620
You can't hit go until you're completely confident that you've really nailed the pitch that you want to make, which can make it quite difficult.

00:14:21.620 --> 00:14:31.600
Because even if you've got something you think, we really need to do a Kickstarter for this, until you feel that you're at the point that, okay, we've got it just right.

00:14:31.600 --> 00:14:32.480
Let's do this.

00:14:32.480 --> 00:14:36.820
You keep on wanting to hold off, hold off, and try and – anyway.

00:14:37.920 --> 00:14:46.120
But this time around, I started thinking about launching an ongoing funding model instead.

00:14:46.120 --> 00:15:06.920
We were really fortunate because it tied in at the same time with when Mozilla launched their MOS awards, so the Mozilla Open Source Awards, where they give awards to projects that they're using in order to help them develop further functionality.

00:15:07.520 --> 00:15:09.300
I mean, that comes with some sort of funding, right?

00:15:09.300 --> 00:15:09.960
It does.

00:15:09.960 --> 00:15:10.800
It does indeed.

00:15:10.800 --> 00:15:15.140
So we put forward an application for the project.

00:15:15.140 --> 00:15:25.900
And when we were told that we'd been successful, and I can't remember exactly how much it was right now.

00:15:26.160 --> 00:15:31.020
It was probably about $35,000, I think, that we'd requested.

00:15:31.020 --> 00:15:38.300
When we found out that we'd been successful, that was the point at which I said, okay, well, I better give this a shot now.

00:15:38.300 --> 00:15:48.680
I told my company that I was going to go and try working on open source full-time, and we launched the collaborative funding model, is what I tend to call it.

00:15:48.680 --> 00:15:49.080
That's cool.

00:15:49.080 --> 00:15:50.520
How long ago was that?

00:15:50.520 --> 00:15:52.060
How long have you been doing it in this path?

00:15:52.060 --> 00:15:53.900
So, yeah, just over a year.

00:15:53.900 --> 00:15:57.540
We literally just passed over the year milestone now.

00:15:57.540 --> 00:15:59.080
So, yeah.

00:15:59.080 --> 00:16:00.180
Are you enjoying it?

00:16:00.180 --> 00:16:01.460
Oh, it's great.

00:16:01.460 --> 00:16:02.240
It's great.

00:16:02.240 --> 00:16:02.960
It's great.

00:16:02.960 --> 00:16:17.640
It's not, you know, being entirely self-driven and being in such an atypical business model, quite an amorphous set of constraints, you know, that can be odd at times.

00:16:17.640 --> 00:16:26.000
But I try to spend most of my working time out of co-working space rather than just working from home.

00:16:26.100 --> 00:16:50.080
So that helps give things structure, and it's been amazing how much you can push things forward when businesses actually have that relationship of trust to invest a little bit of their money in you in order to give you that space to do that.

00:16:50.080 --> 00:16:50.920
So, yeah.

00:16:50.920 --> 00:16:53.780
Yeah, I feel like there should be way more of this.

00:16:53.780 --> 00:17:04.180
There are businesses, there are billion-dollar businesses whose primary product is built on layer upon layer of these super important open source things, and they contribute nothing to it.

00:17:04.180 --> 00:17:04.340
Right.

00:17:05.000 --> 00:17:08.760
And at best, they'll do a PR back to it.

00:17:08.760 --> 00:17:11.260
But even, you know, maybe not even that, right?

00:17:11.260 --> 00:17:21.140
And they would probably get a net benefit financially just by supporting the people to tweak it just a little bit to suit their needs better, you know?

00:17:21.140 --> 00:17:21.600
Right.

00:17:21.600 --> 00:17:22.500
So, yeah.

00:17:22.500 --> 00:17:31.820
And the responsibility of people like myself who are fortunate enough to have managed to find themselves in this position is to prove the business model.

00:17:31.820 --> 00:17:33.800
And so there's two sides to it.

00:17:33.800 --> 00:17:38.960
One's the marketing angle of it, which is important.

00:17:39.120 --> 00:17:42.680
But in a way, it's something that I'm less interested in.

00:17:42.680 --> 00:18:06.160
The thing that I really want to demonstrate is when you take a collaborative approach to investing in infrastructure, if it's shared infrastructure, then the rewards that you get for your investment are so outsized to the rewards that you can get by solely investing only within your own company.

00:18:06.160 --> 00:18:11.120
Because you've got all of these other companies that are also pitching in at the same time.

00:18:11.120 --> 00:18:25.320
So the way that I tend to talk to potential sponsors is I say, hey, I want to work for your business full time for $50 a month or $100 a month or $150 a month.

00:18:25.320 --> 00:18:26.520
And they're like, amazing.

00:18:26.520 --> 00:18:27.340
How do we do this?

00:18:27.340 --> 00:18:29.020
Well, I have a figure I tell them.

00:18:29.020 --> 00:18:34.100
You know, how is that not a reasonable business proposition?

00:18:34.540 --> 00:18:41.800
Okay, I'm not working on exactly day to day what they tell me, but I am working on trying to support their businesses.

00:18:41.800 --> 00:18:44.900
You know, it's not eye in the sky stuff.

00:18:44.900 --> 00:18:48.860
Yeah, I'm not coming to your meetings, but I'm going to be working on your business.

00:18:48.860 --> 00:18:49.420
Yeah.

00:18:50.780 --> 00:18:56.240
Yeah, I think it's a super, super straightforward story.

00:18:56.240 --> 00:18:57.460
And I think you're right.

00:18:57.460 --> 00:18:59.540
There's people sort of blazing that trail.

00:18:59.540 --> 00:19:09.220
And how well it works in the future is going to depend on how well, like the first few successful ones blaze that trail.

00:19:09.220 --> 00:19:09.620
Right?

00:19:09.780 --> 00:19:09.960
Yeah.

00:19:09.960 --> 00:19:10.580
Yeah.

00:19:10.580 --> 00:19:10.640
Yeah.

00:19:10.640 --> 00:19:14.100
We need to build stuff that makes those companies more successful.

00:19:14.100 --> 00:19:21.800
And we also need to sing and dance about the companies that are supporting open source financially.

00:19:22.360 --> 00:19:36.080
And do things like try to get the community into a mindset of when you're looking for your next job, look to companies that are supporting open source financially as your first port of call.

00:19:36.080 --> 00:19:39.140
And try to drive things that way around as well.

00:19:39.140 --> 00:19:44.700
Yeah, I feel like it's something of an awareness thing as well, right?

00:19:44.700 --> 00:19:58.640
Like, it's a pretty straightforward sell to go to pick a random company, Fidelity Investments or whatever, and say, look, if you guys paid like 200 bucks or a thousand bucks a month to these five open source projects to keep them going.

00:19:58.640 --> 00:19:59.520
And everyone did this.

00:19:59.520 --> 00:20:02.340
Like, you would have a much more stable platform.

00:20:02.340 --> 00:20:04.500
Your scalability would be better.

00:20:04.500 --> 00:20:09.120
And you would be able to, you know, trade half a microsecond or millisecond faster or whatever, right?

00:20:09.560 --> 00:20:12.100
That's a really simple story to tell to the business owners.

00:20:12.100 --> 00:20:13.940
But it's, I don't know.

00:20:13.940 --> 00:20:16.840
It's, I'm not sure how much it's happening yet.

00:20:16.840 --> 00:20:18.580
It's step by step, right?

00:20:18.580 --> 00:20:36.680
You know, we need to be able to have really great examples where we can point to whether it's frameworks or platforms or projects that have really succeeded because they have been financially successful and say, look, this is what can happen when you do support these projects.

00:20:36.680 --> 00:20:41.600
This is what the people who supported it and anyone who's using it actually got out of this experience.

00:20:41.600 --> 00:20:43.980
And now we can do it over here and we can do it here and we can do it here.

00:20:43.980 --> 00:20:49.460
And also to do things like look retrospectively and say, how much did that cost each business?

00:20:49.460 --> 00:20:52.720
When you go and you look at all these bits of, well, anyway.

00:20:52.900 --> 00:20:54.340
Yeah, no, I think it's, I think it's really great.

00:20:54.340 --> 00:20:58.440
And we should probably talk about your projects in particular as well.

00:20:58.440 --> 00:20:58.520
Yeah, I know.

00:20:58.520 --> 00:21:03.900
But I really, but I think that this is super interesting to people.

00:21:03.900 --> 00:21:05.020
It's very powerful.

00:21:05.020 --> 00:21:09.080
And for everyone who's doing it, there's probably a thousand people who wish they could.

00:21:09.340 --> 00:21:14.380
And so, like, just the awareness of us talking about it, I think, serves a good purpose.

00:21:14.380 --> 00:21:15.720
I think it's going to change.

00:21:15.720 --> 00:21:16.860
I'm really optimistic.

00:21:16.860 --> 00:21:19.960
I see things have been moving forward.

00:21:21.200 --> 00:21:24.400
And I feel like we're on the start of a wave.

00:21:24.400 --> 00:21:29.860
I mean, that's easy for me to say because I'm fortunate enough to actually be in that position.

00:21:29.860 --> 00:21:33.440
But I do feel like it's starting to change.

00:21:33.440 --> 00:21:33.760
Sure.

00:21:33.760 --> 00:21:39.960
I definitely think it's something that 15 years ago would have been really, really unexpected.

00:21:39.960 --> 00:21:42.220
And now it seems pretty, pretty normal.

00:21:42.220 --> 00:21:43.640
It's just something that's got to get moving.

00:21:43.640 --> 00:21:43.920
Yeah.

00:21:43.920 --> 00:21:48.420
This portion of Talk Python to Me is brought to you by Linode.

00:21:48.920 --> 00:21:52.480
Are you looking for bulletproof hosting that is fast, simple, and incredibly affordable?

00:21:52.480 --> 00:21:57.660
Look past that bookstore and check out Linode at talkpython.fm/Linode.

00:21:57.660 --> 00:21:59.660
That's L-I-N-O-D-E.

00:21:59.660 --> 00:22:03.580
Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:22:03.580 --> 00:22:06.180
They have 10 data centers across the globe.

00:22:06.180 --> 00:22:08.780
So no matter where you are, there's a data center near you.

00:22:08.780 --> 00:22:13.920
Whether you want to run your Python web app, host a private Git server, or even a file server,

00:22:13.920 --> 00:22:16.980
you'll get native SSDs on all the machines.

00:22:16.980 --> 00:22:23.180
It's a 40 gigabit network, 24-7 friendly support, even on holidays, and a seven-day money-back guarantee.

00:22:23.180 --> 00:22:26.520
Want a dedicated server for free for the next four months?

00:22:26.520 --> 00:22:32.020
Use the coupon code python17 at talkpython.fm/Linode.

00:22:32.540 --> 00:22:34.640
You've got a couple of projects that are amazing.

00:22:34.640 --> 00:22:38.940
And so let's take them, I guess, from the beginning.

00:22:38.940 --> 00:22:43.400
So the first one, which we've mostly been talking about, is Django REST framework.

00:22:43.400 --> 00:22:44.380
All right.

00:22:44.380 --> 00:22:47.240
This is the thing you started back in 2010 or so?

00:22:47.240 --> 00:22:47.900
Yes.

00:22:47.900 --> 00:22:48.300
Yeah.

00:22:48.300 --> 00:22:48.560
All right.

00:22:48.560 --> 00:22:51.060
So, you know, everyone knows what Django is.

00:22:51.060 --> 00:22:53.240
They probably know what REST is.

00:22:53.240 --> 00:22:55.080
What's Django REST framework?

00:22:55.640 --> 00:22:57.080
What is this project?

00:22:57.080 --> 00:23:02.260
Django REST framework is, unsurprisingly, an API framework for Django.

00:23:02.260 --> 00:23:13.960
And it tries to fill in all of the gaps of where Django was historically designed as a web framework.

00:23:13.960 --> 00:23:16.120
What are all the extra bits?

00:23:16.260 --> 00:23:16.500
Right.

00:23:16.500 --> 00:23:17.400
Here's HTML.

00:23:17.400 --> 00:23:19.020
Go into browsers.

00:23:19.020 --> 00:23:21.260
You wanted to make a talk to machines, not people, right?

00:23:21.260 --> 00:23:30.680
What are all the various bits and pieces that you would want to provide additionally if you wanted to use Django primarily as an API framework?

00:23:31.640 --> 00:23:53.960
So, for instance, approaching authentication differently, providing things like throttling and permissioning in a way that it's really easy to use them in different slices of your API in different ways, handling things like HTTP content negotiation,

00:23:54.200 --> 00:24:05.980
and all sorts of bits and pieces, providing generic classes of views that give you default functionality for the CRUD case.

00:24:05.980 --> 00:24:20.880
So, if you've got an API where you want to provide a set of different URLs and methods on those URLs that are useful, creating records, retrieving records, updating and deleting records, giving you all of those sorts of bits of tools at the bottom.

00:24:20.880 --> 00:24:30.620
So, maybe you have like slash API slash users, and then you can do a get to get all the users, a get slash ID to get a particular user, a post to create a user, things like that?

00:24:30.620 --> 00:24:31.140
Yes.

00:24:31.140 --> 00:24:46.280
And also dealing with the, if you've got some data that you want to present to the user, or rather if you've got some objects that you want to present to the user, what do you want the representation of those objects to look like?

00:24:46.280 --> 00:24:56.800
If we're dealing with relationships between the objects, are you presenting those as the plain primary keys, or should they be presented as hyperlinks?

00:24:56.800 --> 00:24:58.800
All of those sorts of that.

00:24:58.800 --> 00:25:10.640
Do you want to return big nested sets of data where you've got all sorts of interlinked objects all being returned in bulk, or do you want flat data structures?

00:25:10.820 --> 00:25:12.060
All of those sorts of things.

00:25:12.060 --> 00:25:12.700
Okay, cool.

00:25:12.700 --> 00:25:25.380
So, if I'm working with Django ORM, or even SQLAlchemy, or MongoDB, something like this, and I'm getting sort of ORM objects back, does it handle like the serialization of those types of things?

00:25:25.560 --> 00:25:30.520
So, being Django-based, it works primarily with the Django ORM.

00:25:30.520 --> 00:25:35.120
There's stuff that you could do to integrate it with other backends as well.

00:25:35.120 --> 00:25:44.800
The question is, suppose in my web method, I do a query and I get a list of users back from Django ORM.

00:25:44.800 --> 00:25:50.580
Can I just return that list and have it magically JSONify it, or XMLify it, or whatever?

00:25:50.880 --> 00:25:51.560
Yes and no.

00:25:51.560 --> 00:25:53.060
So, yes, you can.

00:25:53.060 --> 00:25:54.940
No, you probably don't want to do that.

00:25:54.940 --> 00:25:55.440
I shouldn't.

00:25:55.440 --> 00:25:57.560
You can, but don't do it.

00:25:58.080 --> 00:26:07.460
So, you can ask it to give you the default representation and just say, return all of the fields on this model.

00:26:07.460 --> 00:26:14.780
So, give it a model serializer, tell it which model it's pointed at, and say, and I just want all of the fields on that.

00:26:15.200 --> 00:26:27.420
And that will give you a default representation that, depending on which class you use, just uses either primary keys or hyperlinks for relationships that that model happens to have.

00:26:27.420 --> 00:26:33.380
What you would want to do more typically is be a little bit more precise about the representation.

00:26:34.240 --> 00:26:42.020
So, declare the fields that you want returned explicitly and independently of the model itself.

00:26:42.020 --> 00:26:43.960
So, list them all out.

00:26:43.960 --> 00:26:44.860
So, yeah.

00:26:44.860 --> 00:26:45.120
Yeah.

00:26:45.120 --> 00:26:47.220
And going the other way, maybe it's even more important.

00:26:47.220 --> 00:26:52.460
Like, if I post a JSON body to a method, is there serialization on that side?

00:26:52.460 --> 00:26:53.920
Or do I, like, read it?

00:26:54.000 --> 00:26:55.760
There's two different aspects to this.

00:26:55.760 --> 00:27:10.200
So, there's the taking the ORM object and turning that into plain Python data types that are ready to be serialized, that are ready to be rendered.

00:27:10.200 --> 00:27:16.960
That we call the serialization, going between the plain Python data types and ORM objects.

00:27:17.140 --> 00:27:28.820
Then there's the parsing or rendering, which is, on the parsing side, taking request data that's coming in and turning that into Python data types.

00:27:28.820 --> 00:27:31.020
So, JSON.load.

00:27:31.020 --> 00:27:38.980
And on the other side, the rendering, which is taking the data types and turning those into the response body.

00:27:38.980 --> 00:27:40.600
So, JSON.done typically.

00:27:40.600 --> 00:27:40.980
Yeah.

00:27:40.980 --> 00:27:43.500
So, it looks like you have a lot of control over all those different things.

00:27:43.500 --> 00:27:43.860
Yes.

00:27:43.860 --> 00:27:51.900
So, you can, for instance, you control the serialization style, which is what information do you want in the representation.

00:27:51.900 --> 00:27:56.600
But separately to that, you can also control the renderings of that.

00:27:56.600 --> 00:28:04.480
So, you could, for instance, have both a JSON and a YAML output for the same data.

00:28:04.480 --> 00:28:04.620
Sure.

00:28:05.540 --> 00:28:14.720
Did I notice somewhere in your docs that you can basically use, like, a fake or false extension to control that?

00:28:14.720 --> 00:28:21.560
So, like, a slash user slash one dot JSON versus slash user slash one dot XML and things like that?

00:28:21.560 --> 00:28:21.840
Yeah.

00:28:21.920 --> 00:28:27.980
So, there's different ways that you can control which rendering you get.

00:28:27.980 --> 00:28:44.660
By default, REST Framework will use content negotiation, where the client sets an accept header in the request, which informs the server which response type it would like,

00:28:45.060 --> 00:28:58.280
which content type it would like in the response, or you can have URLs that specifically are for one particular type of rendering using suffix.

00:28:58.280 --> 00:29:00.620
So, yes, dot JSON or dot YAML.

00:29:00.620 --> 00:29:01.140
Yeah, yeah.

00:29:01.140 --> 00:29:05.800
So, the most popular API that I know that does that is the Basecamp API.

00:29:05.800 --> 00:29:06.420
Right.

00:29:06.420 --> 00:29:10.220
They do, like, thing dot JSON, even though it's entirely not needed.

00:29:10.220 --> 00:29:11.840
That's just, like, their style, right?

00:29:11.840 --> 00:29:12.600
Some people like that.

00:29:12.600 --> 00:29:13.320
Some people don't.

00:29:13.480 --> 00:29:13.640
Yeah.

00:29:13.640 --> 00:29:22.380
But the thing that's actually drove all of that side of the rendering in the first place anyway was the browsable API.

00:29:22.380 --> 00:29:33.440
So, when you go to a URL in REST Framework, if you make that request with curl or a command line client, you will typically get back,

00:29:33.440 --> 00:29:37.000
depending on exactly what you configure, but you'll typically get back plain JSON.

00:29:37.420 --> 00:29:53.820
When you go to it in the browser and the browser sends an accept header that says, I would prefer HTML, then we're able to return an HTML rendering of the view with the data in line on the page,

00:29:53.820 --> 00:30:01.640
but also a whole bunch of extra information around the outside and controls to allow the user to interact with that API endpoint.

00:30:01.980 --> 00:30:02.380
That's awesome.

00:30:02.380 --> 00:30:06.100
So, it's like self-documenting APIs out of the box?

00:30:06.100 --> 00:30:07.200
Yes, exactly.

00:30:07.200 --> 00:30:08.000
That's really cool.

00:30:08.000 --> 00:30:13.680
Yeah, that's one of the things that I think often gets forgotten on APIs or gets out of date, right?

00:30:13.840 --> 00:30:24.700
Like, either there's basically almost no API, like here's an example and it's incomplete or whatever, or here's the documentation, but our API has evolved and it's no longer.

00:30:24.700 --> 00:30:25.140
Yeah.

00:30:25.460 --> 00:30:32.760
Well, I'm still surprised that there aren't more frameworks that are starting to provide this.

00:30:32.760 --> 00:30:41.520
I mean, the browsable API stuff, that was the entire reason that REST Framework came into existence in the first place,

00:30:41.520 --> 00:30:49.840
because I was thinking about what, you know, why are APIs not, why can't we interact with them using the web browser?

00:30:50.040 --> 00:30:51.000
This is a bit weird.

00:30:51.000 --> 00:30:51.820
Yeah.

00:30:51.820 --> 00:30:56.740
And that was the entire driver for, okay, well, how would you do that?

00:30:56.740 --> 00:30:58.900
Oh, you'd do it like this.

00:30:58.900 --> 00:30:59.660
Oh, wait a minute.

00:30:59.660 --> 00:31:01.520
This is a framework.

00:31:01.520 --> 00:31:05.560
Oh, if I think this is a good idea, then I'd better make it a good framework.

00:31:05.560 --> 00:31:08.240
My prototype is almost the thing.

00:31:08.240 --> 00:31:08.860
You know, that's awesome.

00:31:08.860 --> 00:31:09.360
Yeah.

00:31:09.360 --> 00:31:10.060
Yeah.

00:31:10.800 --> 00:31:19.420
I feel like that's always been a weak point, or traditionally it's been a weak point of HTTP frameworks or APIs is that they're really easy to interact with,

00:31:19.420 --> 00:31:24.180
but it's hard to see the documentation unless somebody's taking the time to do that separate.

00:31:24.180 --> 00:31:24.420
Yeah.

00:31:24.420 --> 00:31:33.480
So can you give us just like a quick sense, not too much in code, but just like the conceptual steps of like,

00:31:33.480 --> 00:31:40.200
how would I create a project and like set it up and add an API method using Django REST framework?

00:31:40.200 --> 00:31:50.700
It slightly depends on whether you are building a project that is primarily a CRUD style API or not,

00:31:50.700 --> 00:31:58.360
because REST framework gives you an awful lot of tools for building those sorts of APIs with a minimal amount of code if you are,

00:31:58.360 --> 00:32:01.000
and that's the most common use case, really.

00:32:01.000 --> 00:32:07.220
Do you point that out like your ORM objects and say, here's an ORM object, give it the various operations?

00:32:07.220 --> 00:32:12.860
The way around that I would approach a new project with REST framework,

00:32:12.860 --> 00:32:22.600
I would start by taking REST framework entirely out of the picture and not think about what tool is this API being built with anyway,

00:32:22.600 --> 00:32:27.160
and instead think about the basic, the fundamentals of the API.

00:32:27.400 --> 00:32:29.620
So which endpoints do I want to expose?

00:32:29.620 --> 00:32:33.860
What do I want the representations of those endpoints to look like?

00:32:33.860 --> 00:32:38.700
How do I want relationships between different objects to look?

00:32:39.540 --> 00:32:46.540
And try to get that side of design figured out in my head first independently.

00:32:46.540 --> 00:32:53.620
Then you've also got the data models as well and thinking about the storage side of things,

00:32:53.620 --> 00:32:58.360
which is very closely tied to the representation, but isn't necessarily the same thing exactly.

00:32:58.360 --> 00:33:08.680
So once you've got the start of those things in your head, then it's a case of blocking out the Django models,

00:33:08.680 --> 00:33:13.280
blocking out corresponding serializers for those models.

00:33:17.580 --> 00:33:22.360
So REST framework gives you a lot of different levels of tooling that you can work at.

00:33:22.360 --> 00:33:29.400
If you want, you can work at a very high level of abstraction where we provide things called view sets

00:33:29.400 --> 00:33:36.820
that bundle up a whole lot of different interactions into a single class

00:33:36.820 --> 00:33:47.120
and provide, mostly automatically provide the routing of URLs onto all of those points of interaction.

00:33:47.120 --> 00:33:51.000
Now I tend to not work at that level of extraction.

00:33:51.000 --> 00:34:08.120
I would usually go down and work at the level of per URL, write either a function-based or a class-based view for that URL,

00:34:08.120 --> 00:34:12.880
and write out the methods on each of those individually.

00:34:12.880 --> 00:34:19.260
And again, there's still another different couple of layers of abstraction that you can be working at there,

00:34:19.260 --> 00:34:29.480
because you can either be using the built-in functionality of give me the automatic create an object function,

00:34:29.480 --> 00:34:32.880
or you can go and write that code yourself.

00:34:32.880 --> 00:34:38.840
When I'm building an API with REST framework, I tend to prefer the explicit approach.

00:34:38.840 --> 00:34:49.080
So if it happens that a listing view or an update view or a delete view is exactly already provided by the framework in the right way,

00:34:49.200 --> 00:34:50.420
then I'll use that.

00:34:50.420 --> 00:35:00.360
But if it's not, rather than trying to override it at particular hook points within those class-based views,

00:35:00.360 --> 00:35:06.880
I'll just override the get or the post or the put or the delete method entirely and write it out explicitly,

00:35:06.880 --> 00:35:10.900
because that really keeps everything surfaced up to the top.

00:35:11.420 --> 00:35:16.820
I find makes it quite a maintainable approach to building the API.

00:35:16.820 --> 00:35:17.360
That's cool.

00:35:17.360 --> 00:35:21.040
I really like that you approach it from the outside.

00:35:21.040 --> 00:35:24.020
Like, how should this look to the people consuming this API?

00:35:24.020 --> 00:35:25.300
Forget the implementation.

00:35:25.300 --> 00:35:28.780
And then let's make that happen with Django REST framework, right?

00:35:28.860 --> 00:35:36.640
Because really, in the end, that's what's going to determine whether people are happy with the API you've delivered them, right?

00:35:36.640 --> 00:35:37.500
Yes.

00:35:37.500 --> 00:35:38.540
Yeah, absolutely.

00:35:38.540 --> 00:35:38.920
Yeah.

00:35:38.920 --> 00:35:40.960
It's not like, well, you do it this way because it was easier.

00:35:40.960 --> 00:35:42.580
It was automatic in Django REST framework.

00:35:42.700 --> 00:35:44.580
But it should have been this other way, right?

00:35:44.580 --> 00:35:53.640
I mean, it started off maybe when the API frameworks and the landscape were younger.

00:35:53.640 --> 00:36:05.600
Maybe it was a bit different then because there's also the aspect of it's useful if the frameworks guide you towards what set of design choices should you be making there.

00:36:05.600 --> 00:36:06.560
Yeah.

00:36:06.560 --> 00:36:14.000
Yeah, but, you know, in 2017, we have more experience building APIs and more examples of good APIs than long ago.

00:36:14.000 --> 00:36:14.840
Yeah.

00:36:14.840 --> 00:36:15.160
Nice.

00:36:15.160 --> 00:36:19.220
So you want to tell us about some of the popular deployments?

00:36:19.220 --> 00:36:20.140
Like, who's using it?

00:36:20.140 --> 00:36:21.100
Do you know how they are?

00:36:21.100 --> 00:36:22.240
Gosh, yeah.

00:36:22.240 --> 00:36:26.400
I should probably open up things like the sponsor list to remind myself there.

00:36:26.400 --> 00:36:27.340
So let's think.

00:36:27.340 --> 00:36:29.260
No, I'm not going to do that.

00:36:29.260 --> 00:36:29.820
I'm just going to.

00:36:29.820 --> 00:36:33.380
So Mozilla are obviously a really big name.

00:36:34.380 --> 00:36:37.800
We're a big sponsor of the Kickstarter.

00:36:37.800 --> 00:36:41.740
I can't remember how much they're using it at the moment, but I think that they are.

00:36:41.740 --> 00:36:48.120
I know that Red Hat are using it at least within a couple of places.

00:36:48.120 --> 00:36:52.280
Heroku use it for something or other.

00:36:53.620 --> 00:36:58.020
And, well, we've got about 60 corporate sponsors.

00:36:58.020 --> 00:37:07.220
So stacks and stacks of different consultancies and product businesses of all types, really.

00:37:07.220 --> 00:37:19.180
It's always interesting when you get a new sign up, finding out what the business is, because there's so many different surprising angles that it's being used from.

00:37:19.180 --> 00:37:22.880
Yeah, can you think of one you're like, whoa, you're doing what with my framework?

00:37:22.880 --> 00:37:38.400
Not off the top of my head, but that's probably like post-PyCon haze, because, you know, they all went in and then, yes, it all walked over me.

00:37:39.460 --> 00:37:40.140
Yeah, excellent.

00:37:40.140 --> 00:37:41.100
All right.

00:37:41.100 --> 00:37:43.980
So it sounds like a really successful project.

00:37:43.980 --> 00:37:52.620
And this is the one that basically let you, through the Kickstarter and the collaborative funding and these things, lets you become a professional open source developer.

00:37:52.620 --> 00:37:55.420
Basically create a business around your framework.

00:37:55.420 --> 00:37:57.500
And congratulations to you on that.

00:37:57.500 --> 00:37:59.020
That is super, super cool.

00:37:59.020 --> 00:38:00.560
I think it's so neat.

00:38:00.560 --> 00:38:02.280
I'm happy to be able to, like, shine a light on it.

00:38:02.280 --> 00:38:02.740
Thanks.

00:38:02.840 --> 00:38:03.640
Yeah, it is.

00:38:03.640 --> 00:38:04.160
It's wonderful.

00:38:04.160 --> 00:38:04.660
Yeah.

00:38:04.660 --> 00:38:11.100
So there's another thing that I came across that you just started working on as well that's very exciting.

00:38:11.100 --> 00:38:17.940
And I don't know how it ties into the funding stuff, but I certainly think it's cool, is called API Star.

00:38:17.940 --> 00:38:19.960
Tell people what API Star is.

00:38:19.960 --> 00:38:24.020
This is a new API framework that I started working on.

00:38:24.020 --> 00:38:29.620
Rest framework is still my main gig, I guess.

00:38:29.620 --> 00:38:36.740
But there are a couple of different things that I think are important to explore at the moment.

00:38:37.340 --> 00:38:40.740
And API Star is my start towards doing some of that.

00:38:40.740 --> 00:38:56.760
It's an API framework that's not tied in to Django or the Django ORM and has a different approach to the fundamental interface that you use for building your code base.

00:38:57.540 --> 00:39:15.540
So rather than having views, which are functions that take a request and return a response, instead you have views where you declare on the view function using type annotations,

00:39:16.240 --> 00:39:21.440
the sorts of data and the sorts of components that that function is going to take.

00:39:21.440 --> 00:39:28.900
And you also declare what type of data it's going to return as well.

00:39:28.900 --> 00:39:36.520
And once you take that different approach, there's a lot of interesting things that you can start to do on top of that.

00:39:36.640 --> 00:39:44.600
So to start with, because you've got a plain data interface rather than take a request and return a response,

00:39:44.600 --> 00:39:53.420
you can layer on different types of network interface or different ways of interacting with that function on top of it.

00:39:53.420 --> 00:40:03.200
So for example, as well as accepting HTTP requests, you could route a command line command onto your view.

00:40:03.200 --> 00:40:15.200
Or you can potentially look at being able to build views that accept either HTTP requests or WebSocket connections and that provide a real-time subscription endpoint.

00:40:15.200 --> 00:40:31.720
There are ways that you can start to think about doing that or even start to think about can we build views that we can share functionality being exposed both to GraphQL endpoints and regular HTTP calls.

00:40:31.720 --> 00:40:38.040
Now, not all of those things are done, but I'm starting to think about how would we be able to do those.

00:40:38.440 --> 00:40:51.420
So what we're going to do is do is do a type system that corresponds to the same capabilities as JSON schema.

00:40:51.420 --> 00:41:03.480
So we have a type system that you can use to declare what your data structures look like, both for the inputs and for the outputs of these functions.

00:41:04.020 --> 00:41:22.800
And once you've got that, you've suddenly got something really powerful where you're able to, for instance, build API documentation based on those type annotations that is guaranteed to always be in sync with your code base.

00:41:22.800 --> 00:41:31.780
Not only can you build this API documentation, you can also build interactive API documentation because you've got enough information in those types

00:41:31.780 --> 00:41:40.540
that you can build HTML form controls that you can build HTML form controls with appropriate controls given the shape of the data input.

00:41:40.540 --> 00:41:53.920
You have this property all of a sudden that you have a really nice one-to-one mapping between your function declarations and an API schema language such as Swagger or Rammel.

00:41:53.920 --> 00:42:01.840
So you can have a really clear way of generating Swagger or Rammel from your type declarations.

00:42:01.840 --> 00:42:06.940
If you wanted, you could even go the other way and say, okay, I've got my Swagger blueprint.

00:42:06.940 --> 00:42:13.240
Build me the stubbed out set of functions that I'm going to want for my project.

00:42:13.680 --> 00:42:22.600
You've also, you've even got enough information that once you write out these declarations, even before you've implemented anything,

00:42:22.600 --> 00:42:28.660
you could start running or you will be able to start running a mock API.

00:42:28.660 --> 00:42:31.000
So you've got all the response types.

00:42:31.000 --> 00:42:37.120
You know what the inputs look like and whether they're valid or they're not valid.

00:42:37.120 --> 00:42:49.380
So that what you can do is have your team build up all the function declarations and present to your front-end team a mock API

00:42:49.380 --> 00:42:57.280
that's already ready to start them build the front-end against,

00:42:57.460 --> 00:43:05.660
while your back-end team starts to fill in all the blanks of, oh, well, we better actually implement the behavior here.

00:43:05.660 --> 00:43:06.040
Yeah.

00:43:06.040 --> 00:43:08.720
So there's also some interesting things you can do.

00:43:08.720 --> 00:43:10.580
Oh, and also, what else?

00:43:10.580 --> 00:43:16.920
Dynamic client libraries that are able to interact with your functions.

00:43:16.920 --> 00:43:26.020
They have enough information being exposed in the schemas that you're able to generate that you can present an interface on the client side

00:43:26.020 --> 00:43:28.880
that corresponds to the same thing you have on the server side.

00:43:28.880 --> 00:43:31.100
So all sorts of cool stuff once you've got this.

00:43:31.100 --> 00:43:38.060
Yeah, that's actually been one of the weak points of HTTP APIs over, say, SOAP services, right?

00:43:38.060 --> 00:43:39.280
SoAP services are dreadful.

00:43:39.380 --> 00:43:47.480
But one of the things that they were good at is they had this WSDL thing that you could then generate basically clients that know all the methods,

00:43:47.480 --> 00:43:49.080
all the types that are exchanged there.

00:43:49.080 --> 00:43:54.020
I'm thinking of SUDs in Python or obviously like Java or .NET and their tooling.

00:43:54.020 --> 00:43:57.780
But here you're kind of describing enough information.

00:43:57.780 --> 00:43:59.100
This is the stuff that goes in.

00:43:59.100 --> 00:44:02.960
This is the stuff that goes out that you could actually bring that back in a sense.

00:44:02.960 --> 00:44:03.560
Yes.

00:44:03.560 --> 00:44:09.160
What this is it's a way of – it's still a restful approach.

00:44:09.160 --> 00:44:14.340
It's just a way of providing a better description to what the interface is.

00:44:14.340 --> 00:44:18.520
And that also has an impact on what sort of APIs you build, actually,

00:44:18.520 --> 00:44:26.800
because given that we haven't had great client-side tooling or great ways of describing what those interfaces are,

00:44:27.560 --> 00:44:33.080
the let's always build CRUD style interfaces is something that's kind of naturally happened

00:44:33.080 --> 00:44:41.100
because it's been a bit of a constraint of we can't express very well different things that don't fit into that.

00:44:41.100 --> 00:44:49.620
But having a really expressive way of being able to declare what those interfaces are lets you take a more,

00:44:49.620 --> 00:44:55.720
okay, these are just different types of actions or different types of views onto the data.

00:44:55.840 --> 00:44:57.760
They don't necessarily have to correspond to CRUD.

00:44:57.760 --> 00:44:57.980
Yeah.

00:44:57.980 --> 00:44:58.360
Yeah.

00:44:58.360 --> 00:45:02.980
This portion of Talk Python to Me has been brought to you by Rollbar.

00:45:02.980 --> 00:45:06.640
One of the frustrating things about being a developer is dealing with errors.

00:45:06.640 --> 00:45:11.700
Relying on users to report errors, digging through log files, trying to debug issues,

00:45:11.700 --> 00:45:15.660
or getting millions of alerts just flooding your inbox and ruining your day.

00:45:15.660 --> 00:45:22.420
With Rollbar's full-stack error monitoring, you get the context, insight, and control you need to find and fix bugs faster.

00:45:22.860 --> 00:45:26.400
Adding Rollbar to your Python app is as easy as pip install Rollbar.

00:45:26.400 --> 00:45:30.640
You can start tracking production errors and deployments in eight minutes or less.

00:45:30.640 --> 00:45:34.820
Are you considering self-hosting tools for security or compliance reasons?

00:45:34.820 --> 00:45:38.400
Then you should really check out Rollbar's compliant SaaS option.

00:45:38.400 --> 00:45:42.920
Get advanced security features and meet compliance without the hassle of self-hosting,

00:45:43.180 --> 00:45:47.760
including HIPAA, ISO 27001, Privacy Shield, and more.

00:45:47.760 --> 00:45:49.140
They'd love to give you a demo.

00:45:49.140 --> 00:45:50.840
Give Rollbar a try today.

00:45:50.840 --> 00:45:54.520
Go to talkpython.fm/Rollbar and check them out.

00:45:55.100 --> 00:46:00.000
One of the things that struck me the most about looking at this API, is it Python 3 only?

00:46:00.000 --> 00:46:01.160
It is, yes.

00:46:01.160 --> 00:46:03.900
So because of the type annotation.

00:46:03.900 --> 00:46:04.420
Right.

00:46:04.420 --> 00:46:04.720
Yeah.

00:46:04.720 --> 00:46:08.300
So the type annotations are the things that struck me the most when I look at it.

00:46:08.340 --> 00:46:16.120
So you might have an API method and the method, say, if you want to have access to the request object,

00:46:16.120 --> 00:46:19.000
you would say request colon then HTTP.request.

00:46:19.000 --> 00:46:22.320
And you basically annotate like this variable is this type.

00:46:22.320 --> 00:46:24.960
And your framework will go, oh, I have one of those types.

00:46:24.960 --> 00:46:26.140
I'm going to inject it here.

00:46:26.380 --> 00:46:29.920
There's all these different types of things that can be injected, right?

00:46:29.920 --> 00:46:30.760
Yes.

00:46:30.760 --> 00:46:37.500
So the different kinds of component that you can inject, they can either be, say, something

00:46:37.500 --> 00:46:43.900
that's based on the incoming request, like you say request, or you could say, you could

00:46:43.900 --> 00:46:45.040
have query params.

00:46:45.040 --> 00:46:49.420
So the class query params, if you put that on, you'll get the dictionary of all the query

00:46:49.420 --> 00:46:49.880
parameters.

00:46:49.880 --> 00:46:54.920
But you can also do interesting things like there's a class, the singular query param.

00:46:55.240 --> 00:47:02.640
And if you put on the name that you use for that variable and the class query param together,

00:47:02.640 --> 00:47:07.140
it will say, okay, I'll give you this query parameter.

00:47:07.140 --> 00:47:12.320
That is so awesome because I feel like all the time, I'm just, I'm not really excited to

00:47:12.320 --> 00:47:13.780
see this thing come into existence.

00:47:13.780 --> 00:47:20.840
So all the time, if you're taking a traditional HTML based framework, Django, Pyramid, Flask,

00:47:20.840 --> 00:47:24.060
whatever, they're like, okay, here's the post dictionary.

00:47:24.060 --> 00:47:26.000
Or here's the data that was submitted.

00:47:26.000 --> 00:47:27.820
Or here's the query string.

00:47:27.820 --> 00:47:30.200
And you can go dig into that dictionary and find the thing you want.

00:47:30.200 --> 00:47:30.860
Here are the headers.

00:47:30.860 --> 00:47:32.760
Dig into the headers and find the thing you want.

00:47:32.760 --> 00:47:37.860
But on yours, you could actually say things like user underscore agent colon HTTP header.

00:47:37.860 --> 00:47:42.340
And it will go into the headers, find the user agent, pull it out and set that value.

00:47:42.340 --> 00:47:48.660
So you just, it's as if all the elements of the request become just function parameters,

00:47:48.800 --> 00:47:49.960
which is glorious.

00:47:49.960 --> 00:47:50.360
Yeah.

00:47:50.360 --> 00:47:51.820
So it's really expressive.

00:47:51.820 --> 00:47:54.340
It reads really nicely when you look at it.

00:47:54.340 --> 00:47:54.600
Right.

00:47:54.600 --> 00:48:00.300
It also means that it's really testable because the interface that you're exposing is exactly

00:48:00.300 --> 00:48:01.720
the thing you want to be exposing.

00:48:01.720 --> 00:48:07.880
You don't have to do things like build up a mock request object in order to test your functionality.

00:48:07.880 --> 00:48:08.500
Right.

00:48:08.560 --> 00:48:14.160
Because if you say it takes a query string and it's, the thing is called name, you just

00:48:14.160 --> 00:48:16.580
pass in the value you want for name in your test and you're done.

00:48:16.580 --> 00:48:16.780
Right.

00:48:16.780 --> 00:48:19.600
You don't have to fake up a dictionary that holds things.

00:48:19.600 --> 00:48:19.880
Right.

00:48:19.880 --> 00:48:20.200
Yeah.

00:48:20.200 --> 00:48:20.680
Yeah.

00:48:20.780 --> 00:48:27.680
And the other thing that's interesting as well is because the way it works is when you

00:48:27.680 --> 00:48:32.820
route all of your views with the application, at the point they get rooted, it inspects what

00:48:32.820 --> 00:48:36.780
the function signature is, figures out, has to look at what all the different components

00:48:36.780 --> 00:48:42.940
are and figures out exactly what's going to need to be run every time it needs to run that

00:48:42.940 --> 00:48:48.300
view, which ends up meaning that it's really, really fast because you only pull in exactly

00:48:48.300 --> 00:48:49.820
the things that you need to pull in.

00:48:49.980 --> 00:48:57.620
So for instance, if you've got a database component, only views which declare that they're using

00:48:57.620 --> 00:49:03.940
the database component will end up getting wrapped in a transaction and anything that doesn't,

00:49:03.940 --> 00:49:05.440
that never gets seen at all.

00:49:05.440 --> 00:49:06.140
That's fantastic.

00:49:06.140 --> 00:49:06.960
Yeah.

00:49:06.960 --> 00:49:10.800
The other thing that I really like about the type annotations is automatic type conversion.

00:49:10.800 --> 00:49:16.360
So you could have like a user underscore ID colon int, and obviously everything comes into

00:49:16.360 --> 00:49:19.960
the web as a string, but do you like parse that into an int?

00:49:19.960 --> 00:49:20.640
Yes.

00:49:20.640 --> 00:49:20.700
Yes.

00:49:20.700 --> 00:49:25.120
That gets handled for you and the type validation on that.

00:49:25.120 --> 00:49:31.180
So you can either use the native types for that, or you can use the type system for that,

00:49:31.180 --> 00:49:36.660
which gives you the more expressive, everything that Jason Schema gives you stuff.

00:49:36.660 --> 00:49:39.200
You know, here's a complex object.

00:49:39.200 --> 00:49:40.240
Here's what it looks like.

00:49:40.240 --> 00:49:40.480
Yeah.

00:49:40.480 --> 00:49:40.920
Wow.

00:49:40.920 --> 00:49:41.280
That's awesome.

00:49:41.280 --> 00:49:42.140
All right.

00:49:42.220 --> 00:49:45.580
Another thing that I found to be interesting was the performance story.

00:49:45.580 --> 00:49:50.300
So like you already touched on it, this is a super lightweight framework, and I didn't

00:49:50.300 --> 00:49:55.680
even realize the extent to which you were ensuring that it only does what it needs to do.

00:49:55.680 --> 00:49:56.660
That's really cool.

00:49:57.220 --> 00:50:04.840
So you ran some various tests with like G Unicorn and Mindheld, or even with like some

00:50:04.840 --> 00:50:08.980
of the shiny new things like Sanic and uv loop, right?

00:50:09.660 --> 00:50:12.760
And so the stuff that you had on the website, let's see, it says Flask.

00:50:12.760 --> 00:50:16.760
You talk about scalability and just raw individual request performance.

00:50:16.760 --> 00:50:24.980
Like, so Flask on your setup, you're getting 5,238 requests per second and about 40 millisecond

00:50:24.980 --> 00:50:25.380
latency.

00:50:26.440 --> 00:50:32.100
On Sanic, which is really an interesting framework as well, you're getting like 21,000 requests

00:50:32.100 --> 00:50:34.080
per second and 10 milliseconds.

00:50:34.080 --> 00:50:37.320
And with API stars, 25,008.

00:50:37.320 --> 00:50:45.080
So you're like five times faster than Flask on both raw individual requests and overall, right?

00:50:45.080 --> 00:50:45.620
That's awesome.

00:50:45.620 --> 00:50:46.620
Yeah.

00:50:46.620 --> 00:50:53.820
Well, keep in mind that that's a test type that is not really real world usage.

00:50:53.820 --> 00:50:56.560
There's some really big provisos to make there.

00:50:56.560 --> 00:50:59.920
We'll talk about that stuff in a bit more detail later, but I interrupted you.

00:50:59.920 --> 00:51:05.720
Well, I was going to say, you have to be really super careful about these sorts of performance

00:51:05.720 --> 00:51:10.100
comparisons because the way I'm using it and the way someone else using it could be super

00:51:10.100 --> 00:51:10.420
different.

00:51:10.420 --> 00:51:13.680
The way I've set up my machine could be really different, but you were running the tech and

00:51:13.680 --> 00:51:16.960
power benchmark, which is a particular one, which is pretty well respected.

00:51:16.960 --> 00:51:22.400
So at least in that sense, you're running the simple JSON serialization version.

00:51:22.720 --> 00:51:26.260
Does that mean like if you use API star, your API is five times fast?

00:51:26.260 --> 00:51:29.800
No, because you're still probably doing your same implementation stuff, right?

00:51:29.800 --> 00:51:34.220
But it means how much overhead are you bringing in with the framework like that?

00:51:34.220 --> 00:51:35.340
You could maybe consider, right?

00:51:35.340 --> 00:51:35.960
Yes.

00:51:35.960 --> 00:51:41.920
So that's what I was trying to demonstrate when I've included that section in the documentation

00:51:41.920 --> 00:51:52.100
is not so much this is going to make things fast for you all the time, but the aspect of the

00:51:52.100 --> 00:51:55.560
framework can get out of your way if you need it to.

00:51:55.560 --> 00:51:56.040
Yes.

00:51:56.280 --> 00:52:03.200
So being able to declare the response type on the view, you can actually have it just

00:52:03.200 --> 00:52:06.220
return a WSGI response directly.

00:52:06.220 --> 00:52:13.540
You end up with the server calling into your framework and a single function call gets made

00:52:13.540 --> 00:52:16.220
and that gets returned directly back to the server.

00:52:16.440 --> 00:52:18.520
So that's an interesting aspect of it.

00:52:18.520 --> 00:52:23.920
Now, that doesn't mean for the different test types where different things like

00:52:23.920 --> 00:52:28.640
asynchronicity come into play that it would perform in the same sort of way, wouldn't it?

00:52:28.640 --> 00:52:29.140
Yeah, of course.

00:52:29.320 --> 00:52:35.260
But I think it's still really important to highlight that aspect of once you take this

00:52:35.260 --> 00:52:41.180
dynamic approach, you can work at whatever level is appropriate for the thing that you're

00:52:41.180 --> 00:52:41.540
building.

00:52:41.540 --> 00:52:42.380
Yeah, very cool.

00:52:42.380 --> 00:52:42.940
Okay.

00:52:42.940 --> 00:52:46.100
So I'm sure I've got you a bunch of email from pointing that out.

00:52:46.100 --> 00:52:49.080
Oh, no.

00:52:49.080 --> 00:52:51.740
Let me tell you how you could have optimized this in this setting.

00:52:51.740 --> 00:52:57.120
Anyway, speaking of performance and asynchrony, there's another project called UVicorn.

00:52:57.880 --> 00:52:58.940
Yeah, UVicorn.

00:52:58.940 --> 00:53:03.020
Tell us what this is.

00:53:03.020 --> 00:53:07.540
It's like the future version of G-Unicorn, right?

00:53:07.540 --> 00:53:17.360
So in Python asynch.io land at the moment, there's a few frameworks that are existing.

00:53:17.360 --> 00:53:23.840
Sanic being one, aiohttp being another.

00:53:23.840 --> 00:53:25.060
Yep, Jepronto.

00:53:25.060 --> 00:53:26.640
That's right.

00:53:26.640 --> 00:53:27.680
A muffin.

00:53:27.680 --> 00:53:28.460
Yeah.

00:53:28.460 --> 00:53:29.840
They're very exciting.

00:53:29.840 --> 00:53:30.540
Kaiowaki.

00:53:30.540 --> 00:53:31.480
Is that right?

00:53:31.480 --> 00:53:32.040
Kaiowaki.

00:53:32.040 --> 00:53:32.880
Yeah.

00:53:32.880 --> 00:53:34.980
So that's, and which is really cool.

00:53:34.980 --> 00:53:43.280
And in particular, Sanic's been interesting because it's shown just how impressive these

00:53:43.280 --> 00:53:53.520
two particular components that it uses are, which is uv loop, which is an event loop that is implemented

00:53:53.520 --> 00:53:59.280
as a Python binding around either the same event loop that Node uses or something that was

00:53:59.280 --> 00:54:00.640
originally built for Node.

00:54:01.060 --> 00:54:09.220
And also an HTTP parsing library that is also a Python implementation, you know, a set of

00:54:09.220 --> 00:54:15.440
Python wrappers around a super fast C implementation that, again, I think was built originally for Node.

00:54:15.440 --> 00:54:19.680
And the performance of those two components is really impressive.

00:54:20.340 --> 00:54:26.180
The only problem that we have in the Python landscape at the moment is that all of these

00:54:26.180 --> 00:54:31.360
AsyncIO frameworks that we have are really still at the framework level.

00:54:31.360 --> 00:54:41.240
There isn't this separation of, well, here's the server, here's the framework, and here's what the interface between those two is.

00:54:41.460 --> 00:54:49.480
We've had that for a long time in our regular old happy synchronous land because we've had WSGI for ages.

00:54:49.480 --> 00:54:56.420
And now you can't repurpose that for AsyncLand because you just can't.

00:54:56.420 --> 00:55:06.280
And the thing that I would like to do is combine the fact that there happens to be an incredibly awesome implementation

00:55:06.620 --> 00:55:16.560
that is super fast and the how do we figure out what the interface between the server and the framework ought to look like

00:55:16.560 --> 00:55:22.740
and bridge that gap and have, okay, here's just the bare bones.

00:55:22.740 --> 00:55:26.500
You know, you've got a single callable and it gets this set of data.

00:55:26.500 --> 00:55:30.660
Now go and build your AsyncIO framework on top of that.

00:55:30.660 --> 00:55:31.440
Okay?

00:55:31.840 --> 00:55:32.980
Yeah, yeah, yeah.

00:55:32.980 --> 00:55:41.140
That's really been the pinch point where we haven't been able to unlock the Async stuff on the server easily with existing frameworks.

00:55:41.140 --> 00:55:41.780
Yes.

00:55:41.780 --> 00:55:47.540
And I think once we've got that, that's really going to kind of set everybody free to start doing interesting things.

00:55:47.540 --> 00:55:52.380
Where it's difficult is trying to figure out how it sits into the existing landscape.

00:55:52.900 --> 00:56:02.760
So, for instance, one of the things that I would like Uvacorn to be able to do is to also be able to interface with Django projects using channels

00:56:02.760 --> 00:56:06.320
and be able to provide WebSocket support.

00:56:06.320 --> 00:56:10.500
But in a different deployment mode to channels has.

00:56:10.500 --> 00:56:18.260
So deployment mode there at the moment is you have your servers and those sit in front of a channel layer,

00:56:18.260 --> 00:56:22.280
which all the data gets passed over, probably Redis or something like that.

00:56:22.280 --> 00:56:26.540
And then you have your workers running behind that and you have those three different components.

00:56:26.540 --> 00:56:35.520
I would like to also be able to provide a different deployment style where you just have a single server process,

00:56:35.520 --> 00:56:42.620
well, set of server processes that are running that interface with the application framework directly.

00:56:42.620 --> 00:56:43.500
Yeah, that's awesome.

00:56:43.500 --> 00:56:50.220
Instead of having one more hop and two sets of worker processes and separate implementations, all that stuff.

00:56:50.220 --> 00:56:54.100
And there's different considerations to both different deployment styles.

00:56:54.100 --> 00:56:59.120
And there's some reasons that tiered approach that channels takes can be preferable as well.

00:56:59.300 --> 00:57:11.040
But I think it would be if you can do this, build a server framework that would be great for AsyncIO frameworks to be built against,

00:57:11.040 --> 00:57:22.180
that is also able to power an existing really, really widely deployed synchronous framework as well and add WebSocket supports.

00:57:22.180 --> 00:57:25.220
I mean, you know, Andrew Goswin's done all of the heavy lifting here.

00:57:25.380 --> 00:57:27.960
I'm just gluing various bits and pieces together.

00:57:27.960 --> 00:57:30.140
This wire goes to this wire, yeah.

00:57:30.140 --> 00:57:33.500
Okay, I think there's like low-hanging fruit here.

00:57:33.500 --> 00:57:38.840
If we take this good work from over here and that good work from over there, yeah, live wire them together.

00:57:38.840 --> 00:57:44.320
Yeah, so that's where that is at the moment.

00:57:44.320 --> 00:57:45.520
That's super exciting.

00:57:45.520 --> 00:57:58.160
Yeah, and ultimately, you know, that is also a different slice of the puzzle for API star because I would like API star to primarily end up being an AsyncIO framework.

00:57:58.160 --> 00:58:05.540
And in order to do that, I want to get a proper separation between the server and the framework for that.

00:58:05.540 --> 00:58:15.000
Yeah, ideally, just make those methods all Async methods and just await on the things in the middle and let the server do all the magic, yeah.

00:58:15.000 --> 00:58:15.740
Sounds easy.

00:58:15.740 --> 00:58:16.340
Yeah, perfect.

00:58:16.340 --> 00:58:18.120
What is that, next week?

00:58:18.120 --> 00:58:20.700
We'll see.

00:58:20.700 --> 00:58:21.920
So let me ask you a question.

00:58:21.920 --> 00:58:30.680
So if I want to take API star and run it on UVicorn in production and send all my traffic and stuff there, is it ready?

00:58:30.680 --> 00:58:32.160
It would be very enthusiastic.

00:58:32.160 --> 00:58:36.120
How's the readiness of API star?

00:58:36.120 --> 00:58:37.720
How's the readiness of this UVicorn?

00:58:37.720 --> 00:58:42.400
So I know that API star is already being used in production by at least a couple of folks.

00:58:42.400 --> 00:58:49.500
You certainly would have to not mind the fact that there will be breaking changes to the API that we provide.

00:58:49.800 --> 00:58:52.300
So pin your dependencies in requirements.txt?

00:58:52.300 --> 00:58:54.260
Yeah, that's one thing.

00:58:54.260 --> 00:58:58.120
And, you know, be prepared to move forward as the framework moves forward.

00:58:58.120 --> 00:59:09.000
The flip side of that is that I think, you know, once it's the reason that it's still slightly in flux is because of the Async side of the puzzle.

00:59:09.000 --> 00:59:11.580
And get crossing that bridge.

00:59:11.580 --> 00:59:17.660
Once that bridge is being crossed, then I think that's when it all starts to tie together really nicely.

00:59:18.280 --> 00:59:28.100
The point at which I'd say, yeah, go and do interesting business things in it will be the point at which you see a proper set of docs available for API star.

00:59:28.100 --> 00:59:32.240
At the moment, it's fairly comprehensively documented, but it's still all on the readme at the moment.

00:59:32.240 --> 00:59:40.280
My big signal to everybody of, yeah, go primetime will be once I've finally got the docs live.

00:59:40.320 --> 00:59:44.120
Because I'll only launch them when I'm really, really happy with how everything's looking.

00:59:44.120 --> 00:59:44.380
Sure.

00:59:44.380 --> 00:59:44.980
Sounds great.

00:59:44.980 --> 00:59:46.620
And UVicorn?

00:59:46.620 --> 00:59:49.680
Well, it's a different slice of stuff that you would use it for.

00:59:49.680 --> 00:59:54.820
So at least at its current level, because it's so much lower level, give it a try.

00:59:54.820 --> 00:59:58.840
Don't do anything with it in production now, for sure.

00:59:59.500 --> 01:00:02.360
At the moment, that's an experimental stage.

01:00:02.360 --> 01:00:09.400
But again, I think that's going to, there's not actually that much work that needs to be done on it.

01:00:09.980 --> 01:00:22.960
So I think that that's going to become, and actually that will kind of land before API star is completely, completely like primetime ready because it's a smaller chunk of work.

01:00:22.960 --> 01:00:23.220
Sure.

01:00:23.220 --> 01:00:23.840
Sounds good.

01:00:23.840 --> 01:00:29.240
So often people will write to me and say, hey, I'm really looking forward to get into open source.

01:00:29.240 --> 01:00:31.280
What project would be good?

01:00:31.280 --> 01:00:33.580
Are you looking for contributors for any of these projects?

01:00:33.580 --> 01:00:34.300
Yeah, sure.

01:00:34.800 --> 01:00:54.040
Best framework's quite hard to get involved with unless you have quite a unique quality, which is the quality of being happy to go in, watch the issues list, and as something comes in, just try and figure out if it makes sense.

01:00:54.040 --> 01:00:55.040
Comment on the issue.

01:00:55.040 --> 01:00:56.500
Does this make sense or not?

01:00:56.500 --> 01:01:00.580
And figure out if you can reproduce it, if it looks like a bug.

01:01:00.940 --> 01:01:12.660
And all of those sorts of bits of day-to-day triage work, and they're not terribly shiny or, you know, wildly exciting.

01:01:12.660 --> 01:01:21.140
It's amazing when people do pick it up, and it's amazing when you see folks who do have the quality of being good at that because it's quite rare.

01:01:21.740 --> 01:01:26.300
But that's more difficult typically for people to get into.

01:01:26.300 --> 01:01:36.560
There's loads and loads of interesting feature work or surrounding stuff that can be done on both API Star and Yuvikon at the moment.

01:01:36.560 --> 01:01:44.100
There's a discussion group for API Star, so shout out on there if you're interested in it,

01:01:44.160 --> 01:01:48.180
and if there's anything in particular that you think you might be interested in working on.

01:01:48.180 --> 01:01:55.080
And with Yuvikon, just raise an issue against the repo, and I'll chat about it there.

01:01:55.080 --> 01:01:55.460
All right.

01:01:55.460 --> 01:01:55.740
Yeah.

01:01:55.740 --> 01:01:56.840
Sounds good.

01:01:56.840 --> 01:01:57.400
Sounds good.

01:01:57.400 --> 01:02:01.880
Well, Tom, I feel like we've covered a lot of ground in this episode.

01:02:01.880 --> 01:02:04.380
It seems like it, yeah.

01:02:04.380 --> 01:02:05.580
Yeah, yeah.

01:02:05.580 --> 01:02:07.780
We could have almost done three shows out of this.

01:02:07.780 --> 01:02:09.140
Maybe we'll come back someday and do that.

01:02:09.960 --> 01:02:13.680
So maybe we'll leave it there for those topics, but let's get to the questions.

01:02:13.680 --> 01:02:17.260
So if you're going to work on any of these projects, what editor do you open up?

01:02:17.260 --> 01:02:19.500
Atom.

01:02:19.500 --> 01:02:20.640
Always Atom.

01:02:20.640 --> 01:02:22.300
I had a brain fail there.

01:02:22.300 --> 01:02:23.800
I was like, wait a minute.

01:02:23.800 --> 01:02:26.080
What is it even called?

01:02:26.080 --> 01:02:26.800
Oh, yeah.

01:02:26.800 --> 01:02:28.300
The title says Atom.

01:02:28.300 --> 01:02:28.540
Awesome.

01:02:28.540 --> 01:02:30.320
Cool, cool.

01:02:30.320 --> 01:02:36.900
And we have over 100,000 packages on PyPI these days.

01:02:37.220 --> 01:02:41.680
What's one that maybe you ran across recently that was awesome, but not everyone knows?

01:02:41.680 --> 01:02:42.660
White Noise.

01:02:42.660 --> 01:02:54.140
White Noise is a piece of whiskey middleware that serves static files for you.

01:02:54.140 --> 01:02:55.620
That's all it does.

01:02:55.620 --> 01:02:56.900
It serves static files for you.

01:02:57.280 --> 01:02:58.220
And it does it so.

01:02:58.220 --> 01:03:05.300
What is great about it is it's fast enough that you can just put in this bit of pure Python code

01:03:05.300 --> 01:03:14.780
that handles being able to have your static files served from the same platform that the rest of your application is being served from.

01:03:14.860 --> 01:03:23.600
You don't have to set up S3 and direct some of the stuff over there and make sure that you're uploading your images to S3 at the right time.

01:03:23.600 --> 01:03:31.540
And it handles all of the right bits of getting the HTTP caching for that right.

01:03:32.320 --> 01:03:43.640
So if you want to be really sad that you can deploy it behind a CDN and your application won't get any significant traffic hits

01:03:43.640 --> 01:03:48.560
because as soon as the CDN got each asset, it'll just end up getting served from the CDN.

01:03:48.560 --> 01:03:52.700
And what I love about White Noise is it's so perfectly scoped.

01:03:52.700 --> 01:03:57.500
It's one of those projects where it's like, okay, yeah, you've got this right.

01:03:57.800 --> 01:03:58.160
That's awesome.

01:03:58.160 --> 01:03:59.360
That sounds really, really fun.

01:03:59.360 --> 01:04:00.500
So thanks for that.

01:04:00.500 --> 01:04:01.420
I hadn't heard of White Noise.

01:04:01.420 --> 01:04:02.440
And I like the name too.

01:04:02.440 --> 01:04:03.380
There you go.

01:04:03.380 --> 01:04:04.980
Yeah, static files.

01:04:04.980 --> 01:04:06.960
So it took me a while to get it.

01:04:06.960 --> 01:04:08.600
Static files, right?

01:04:08.600 --> 01:04:09.820
Yeah, yeah.

01:04:09.820 --> 01:04:10.500
That's awesome.

01:04:10.500 --> 01:04:11.480
Okay.

01:04:11.480 --> 01:04:13.340
So final call to action.

01:04:13.340 --> 01:04:15.220
People want to check out your projects.

01:04:15.220 --> 01:04:15.880
They want to get involved.

01:04:15.880 --> 01:04:16.440
What do they do?

01:04:16.440 --> 01:04:17.860
Just jump in really.

01:04:17.860 --> 01:04:22.560
So API start, that's jumping on the discussion group.

01:04:22.560 --> 01:04:25.760
Even if it's just saying I'm interested, this is why I'm interested.

01:04:25.760 --> 01:04:27.300
And that's a great thing to do.

01:04:27.420 --> 01:04:29.400
Was that what your talk at PyCon was about?

01:04:29.400 --> 01:04:29.900
It was.

01:04:29.900 --> 01:04:30.600
Yes, it was.

01:04:30.600 --> 01:04:30.780
Yeah.

01:04:30.780 --> 01:04:31.000
Okay.

01:04:31.000 --> 01:04:33.720
So you can check that out at youtube.com slash, what is it?

01:04:33.720 --> 01:04:36.540
PyCon 2017 and then search for you.

01:04:36.540 --> 01:04:37.040
Yeah.

01:04:37.040 --> 01:04:37.300
Yeah.

01:04:37.300 --> 01:04:44.920
With REST Framework, the thing that is a really good place to get into is going on to the discussion

01:04:44.920 --> 01:04:45.460
group.

01:04:45.460 --> 01:04:51.400
And if anybody's having problems trying to help there or getting stuck in on Stack Overflow,

01:04:51.400 --> 01:04:53.260
those are all great things to do.

01:04:53.260 --> 01:04:57.320
Or just say hi on Twitter or come and have a chat on IRC.

01:04:57.320 --> 01:04:59.280
Anything like that is always welcome.

01:04:59.280 --> 01:04:59.920
All right.

01:04:59.920 --> 01:05:00.320
Beautiful.

01:05:00.320 --> 01:05:05.500
Well, Tom, this has been a lot of fun to talk about all these API ideas and also the funding

01:05:05.500 --> 01:05:06.560
stuff was really interesting.

01:05:06.560 --> 01:05:07.460
Thanks for being on the show.

01:05:07.460 --> 01:05:07.860
Great.

01:05:07.860 --> 01:05:09.260
Thank you so much, Mike.

01:05:09.260 --> 01:05:10.200
Have a great day.

01:05:10.200 --> 01:05:10.540
You bet.

01:05:10.540 --> 01:05:11.300
Yeah, you too.

01:05:11.300 --> 01:05:11.480
Bye.

01:05:12.600 --> 01:05:15.480
This has been another episode of Talk Python to Me.

01:05:15.480 --> 01:05:17.960
Today's guest was Tom Christie.

01:05:17.960 --> 01:05:21.080
And this episode was brought to you by Linode and Rollbar.

01:05:21.080 --> 01:05:25.560
Linode is bulletproof hosting for whatever you're building with Python.

01:05:25.560 --> 01:05:29.920
Get your four months free at talkpython.fm/Linode.

01:05:29.920 --> 01:05:32.440
Just use the code Python17.

01:05:32.440 --> 01:05:35.700
Rollbar takes the pain out of errors.

01:05:35.920 --> 01:05:40.460
They give you the context and insight you need to quickly locate and fix errors that

01:05:40.460 --> 01:05:43.420
might have gone unnoticed until your users complain, of course.

01:05:43.420 --> 01:05:49.660
As Talk Python to Me listeners, track a ridiculous number of errors for free at rollbar.com slash

01:05:49.660 --> 01:05:50.480
talkpythontome.

01:05:50.980 --> 01:05:53.000
Are you or a colleague trying to learn Python?

01:05:53.000 --> 01:05:57.660
Have you tried books and videos that just left you bored by covering topics point by point?

01:05:57.660 --> 01:06:03.300
Well, check out my online course, Python Jumpstart by Building 10 Apps at talkpython.fm slash

01:06:03.300 --> 01:06:06.280
course to experience a more engaging way to learn Python.

01:06:06.280 --> 01:06:11.060
And if you're looking for something a little more advanced, try my Write Pythonic Code course

01:06:11.060 --> 01:06:13.580
at talkpython.fm/pythonic.

01:06:13.580 --> 01:06:16.340
Be sure to subscribe to the show.

01:06:16.340 --> 01:06:18.540
Open your favorite podcatcher and search for Python.

01:06:18.540 --> 01:06:19.780
We should be right at the top.

01:06:19.780 --> 01:06:25.560
You can also find the iTunes feed at /itunes, Google Play feed at /play, and

01:06:25.560 --> 01:06:29.060
direct RSS feed at /rss on talkpython.fm.

01:06:29.060 --> 01:06:34.180
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

01:06:34.180 --> 01:06:38.860
Corey just recently started selling his tracks on iTunes, so I recommend you check it out at

01:06:38.860 --> 01:06:40.860
 talkpython.fm/music.

01:06:40.860 --> 01:06:45.300
You can browse his tracks he has for sale on iTunes and listen to the full-length version

01:06:45.300 --> 01:06:46.220
of the theme song.

01:06:47.760 --> 01:06:49.300
This is your host, Michael Kennedy.

01:06:49.300 --> 01:06:50.580
Thanks so much for listening.

01:06:50.580 --> 01:06:51.780
I really appreciate it.

01:06:51.780 --> 01:06:53.920
Smix, let's get out of here.

01:06:53.920 --> 01:06:53.920
Smix, let's get out of here.

01:06:53.920 --> 01:07:14.920
Outro Music.

01:07:14.920 --> 01:07:15.420
you

01:07:15.420 --> 01:07:15.920
Bye.

01:07:15.920 --> 01:07:16.160
you

01:07:16.160 --> 01:07:18.220
you

