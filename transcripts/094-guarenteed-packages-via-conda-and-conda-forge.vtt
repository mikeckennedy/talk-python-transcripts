WEBVTT

00:00:00.001 --> 00:00:03.540
Have you ever had trouble installing a package you wanted to use in your Python app?

00:00:03.540 --> 00:00:07.960
Likely it contained some odd dependency, required a compilation step,

00:00:07.960 --> 00:00:10.820
maybe even using an uncommon compiler like Fortran?

00:00:10.820 --> 00:00:12.140
Did you try this on Windows?

00:00:12.140 --> 00:00:17.160
How many times have you seen cannotfindvcvarsall.bat before you have to take a walk?

00:00:17.160 --> 00:00:21.160
If this sounds familiar, you might want to check out the Conda Package Manager,

00:00:21.160 --> 00:00:25.120
Anaconda, the distribution, Conda Forge, and Conda Build.

00:00:25.580 --> 00:00:30.680
Together, these dramatically lower the bar for installing packages across all the platforms.

00:00:30.680 --> 00:00:34.900
This week, you'll meet Phil Ellison, Kale Franz, and Michael Sarahan,

00:00:34.900 --> 00:00:37.480
who all work on various parts of this ecosystem.

00:00:37.480 --> 00:00:43.060
This is Talk Python To Me, episode 94, recorded December 14, 2016.

00:00:43.060 --> 00:01:11.400
Welcome to Talk Python To Me, a weekly podcast on Python,

00:01:11.400 --> 00:01:14.480
the language, the libraries, the ecosystem, and the personalities.

00:01:14.480 --> 00:01:16.580
This is your host, Michael Kennedy.

00:01:16.580 --> 00:01:18.580
Follow me on Twitter, where I'm @mkennedy.

00:01:18.580 --> 00:01:22.460
Keep up with the show and listen to past episodes at talkpython.fm,

00:01:22.460 --> 00:01:25.000
and follow the show on Twitter via at Talk Python.

00:01:25.000 --> 00:01:29.900
This episode is brought to you by MongoDB and Continuum Analytics.

00:01:29.900 --> 00:01:34.540
Thank them both for supporting the show by checking out what they have to offer during their segments.

00:01:34.540 --> 00:01:38.140
Kale, Michael, Phil, welcome to Talk Python, guys.

00:01:38.140 --> 00:01:39.160
It's great to have you here.

00:01:39.160 --> 00:01:39.900
Thanks, Michael.

00:01:40.320 --> 00:01:40.760
Thank you.

00:01:40.760 --> 00:01:41.520
Great to be here.

00:01:41.520 --> 00:01:43.220
I'm looking forward to talking about Conda.

00:01:43.220 --> 00:01:44.940
It's going to be really fun.

00:01:44.940 --> 00:01:47.280
There's a whole ecosystem growing up around it,

00:01:47.280 --> 00:01:51.220
and I think it's a little bit underappreciated just from the people I talk to,

00:01:51.220 --> 00:01:56.100
and so I really want to spread the word about how cool Conda is and what you can do with it.

00:01:56.100 --> 00:01:59.760
So we'll get to all that, but let's start with your guys' story.

00:01:59.760 --> 00:02:00.680
How have you gotten into programming?

00:02:00.680 --> 00:02:03.380
Since there's three of you, let's kind of keep it a little bit short,

00:02:03.380 --> 00:02:05.860
but just, Kale, maybe how do you get into programming in Python?

00:02:05.860 --> 00:02:06.760
30 seconds.

00:02:06.760 --> 00:02:07.380
Yeah.

00:02:07.380 --> 00:02:13.420
In grad school, I was writing a lot of MATLAB code, and then MATLAB is proprietary,

00:02:13.420 --> 00:02:18.620
and this thing called NumPy came along and started using NumPy, and it kind of grew from there.

00:02:18.760 --> 00:02:19.440
Oh, that's really cool.

00:02:19.440 --> 00:02:25.540
Now you're at the very center of the nucleus of NumPy and all that kind of stuff.

00:02:25.540 --> 00:02:26.000
That's great.

00:02:26.000 --> 00:02:27.340
Michael, how about you?

00:02:27.340 --> 00:02:33.080
Yeah, I started out with a web program to show my photos to my parents and family,

00:02:33.080 --> 00:02:37.700
and then grew into science stuff when I went to grad school, much like Kale.

00:02:37.700 --> 00:02:38.820
So, yeah.

00:02:38.820 --> 00:02:39.220
Nice.

00:02:39.220 --> 00:02:40.060
What did you study in grad school?

00:02:40.060 --> 00:02:41.580
Electron microscopy.

00:02:41.580 --> 00:02:43.060
Electron microscopy.

00:02:43.140 --> 00:02:43.600
Okay, wow.

00:02:43.600 --> 00:02:44.180
Very cool.

00:02:44.180 --> 00:02:46.520
Lots of very small things, huh?

00:02:46.520 --> 00:02:47.640
Yeah.

00:02:47.640 --> 00:02:50.280
Was that like image recognition and things like this?

00:02:50.280 --> 00:02:56.740
Yeah, and also spectral processing, so all kinds of fun signal processing and unsupervised learning.

00:02:56.740 --> 00:02:57.400
Oh, okay.

00:02:57.400 --> 00:02:57.960
Very cool.

00:02:57.960 --> 00:02:59.080
Phil, how about you?

00:02:59.080 --> 00:03:00.140
So, I started pretty young.

00:03:00.140 --> 00:03:08.440
I started with Visual Basic when I was about 14, and then at university, I did quite a bit of Maple,

00:03:08.440 --> 00:03:12.200
which is kind of a mathematical language pretty similar to SimPy,

00:03:12.640 --> 00:03:16.500
and then picked up Python when I was in my gap year in France.

00:03:16.500 --> 00:03:22.520
I just loved the open source community, loved the scientific Python space, and went from there.

00:03:22.520 --> 00:03:23.420
Yeah, that's excellent.

00:03:23.420 --> 00:03:27.660
So, you were kind of bumming around Europe, and most people just hang out and chill,

00:03:27.660 --> 00:03:28.900
and you picked up Python.

00:03:28.900 --> 00:03:29.480
Very cool.

00:03:29.480 --> 00:03:30.720
Yeah.

00:03:30.720 --> 00:03:31.700
Awesome.

00:03:31.700 --> 00:03:38.420
Okay, so let's get into Conda first, and then we can get into Conda Build, Conda Forge,

00:03:38.420 --> 00:03:39.760
and the various things around it.

00:03:39.760 --> 00:03:41.740
So, Kale, tell us, what is Conda?

00:03:42.140 --> 00:03:43.340
Conda's a package manager.

00:03:43.340 --> 00:03:47.160
Install software and use software.

00:03:47.160 --> 00:03:49.800
It does a lot more than just manage packages.

00:03:49.800 --> 00:03:51.580
It manages environments.

00:03:52.340 --> 00:04:04.100
So, there's Conda inv, or there's an environment manager and the concept of environments, much like Python virtual inv, except it's system level, and it's Python agnostic, the environment part.

00:04:04.100 --> 00:04:06.340
Oh, it's language agnostic.

00:04:07.100 --> 00:04:13.800
So, you can have environments for, I mean, if you want to build Ruby with it, or whatever types of environments you want, completely supported.

00:04:14.620 --> 00:04:16.860
So, yeah, it's package manager.

00:04:16.860 --> 00:04:17.360
Very nice.

00:04:17.400 --> 00:04:21.800
So, it's kind of like pip in some of its role, but it does more, right?

00:04:21.920 --> 00:04:22.920
In some ways it does more.

00:04:22.920 --> 00:04:24.000
In some ways it does less.

00:04:24.000 --> 00:04:30.640
So, Conda and the Conda ecosystem is not the canonical source of truth for Python packages.

00:04:30.900 --> 00:04:34.820
That's PyPI, and we don't install packages directly from PyPI.

00:04:34.820 --> 00:04:36.500
That's pip's job.

00:04:36.500 --> 00:04:37.920
We don't pretend to.

00:04:38.380 --> 00:04:41.740
But we're much more like, in some ways, more like a system package manager.

00:04:41.740 --> 00:04:45.040
So, more like apt-get or yum or something like that.

00:04:45.040 --> 00:04:50.800
A lot of times with a system manager you'll install Python or you'll install some of your core dependencies.

00:04:50.800 --> 00:04:57.000
The harder things that pip will invoke a compiler for and things will crash or things like that.

00:04:57.000 --> 00:05:00.860
I have wheels help now, but pip still can't install Python.

00:05:00.860 --> 00:05:05.900
So, things that are a little bit lower level is where Conda really excels at.

00:05:06.500 --> 00:05:10.340
And then, so, yeah, that's the tradeoff in capabilities, I guess.

00:05:10.340 --> 00:05:10.800
Sure.

00:05:10.800 --> 00:05:14.120
And let's see if I got the origins correctly.

00:05:14.120 --> 00:05:16.420
I'll tell you what I think and then you tell me whether I'm right or wrong.

00:05:16.420 --> 00:05:20.160
So, I feel like Conda came from sort of two places.

00:05:20.160 --> 00:05:25.140
It feels like it came from you guys wanted to make it easier for data scientists and people, more correctly,

00:05:25.140 --> 00:05:31.720
people working with the data science and scientific tools like NumPy and so on to actually start working with them.

00:05:31.720 --> 00:05:33.920
Because they often had really freaky builds.

00:05:34.180 --> 00:05:36.800
So, like they might depend on some sort of Fortran thing.

00:05:36.800 --> 00:05:40.220
And so, in order to pip install, you have to have like a Fortran compiler.

00:05:40.220 --> 00:05:40.920
A Fortran compiler.

00:05:40.920 --> 00:05:41.420
Yeah, yeah.

00:05:41.420 --> 00:05:46.460
Which, I mean, we're already battling with where is vcvars.bat again on Windows?

00:05:46.460 --> 00:05:48.420
And now you're talking about Fortran compilers?

00:05:48.420 --> 00:05:48.920
Come on.

00:05:48.920 --> 00:05:51.620
So, is that sort of where it came from?

00:05:51.620 --> 00:05:54.460
And it had to manage all these different things like Fortran, for example?

00:05:54.460 --> 00:05:55.720
Yeah, that was the genesis.

00:05:55.720 --> 00:06:00.260
And Conda came about about the same time as wheels came about.

00:06:00.260 --> 00:06:03.960
So, there's a little bit of two different approaches.

00:06:03.960 --> 00:06:10.920
But they've sort of diverged into really pip and wheels and things being Python specific.

00:06:10.920 --> 00:06:16.600
And these source of truth for Python if there's not a more downstream distributor.

00:06:16.600 --> 00:06:19.740
Whereas Conda, we do take care of all the hard parts.

00:06:19.880 --> 00:06:23.140
So, NumPy and SciPy and all those dependencies.

00:06:23.140 --> 00:06:26.700
And then Python and all the runtimes and stuff like that.

00:06:26.700 --> 00:06:27.120
Yeah.

00:06:27.120 --> 00:06:35.660
And one of the big differences is that you guys pre-build the binary pieces that we might need, right?

00:06:35.660 --> 00:06:36.400
Yeah, that's correct.

00:06:36.400 --> 00:06:42.200
So, a lot of times people ship to production and absolutely do not want compilers on their production systems.

00:06:42.200 --> 00:06:44.200
And so, we do ship binaries.

00:06:44.200 --> 00:06:46.020
Yeah, I find that to be really excellent.

00:06:46.140 --> 00:06:57.980
Because, you know, like if I go and get SQLAlchemy or I think PyMongo even, some of these things that have C speedups at various places, often for like deserialization and serialization steps.

00:06:57.980 --> 00:07:01.960
And if I don't have the right setup, you know, maybe it's not going to work.

00:07:01.960 --> 00:07:06.840
Especially if I'm on Windows, for some reason that gets a little harder to do and gets neglected often.

00:07:06.840 --> 00:07:08.460
And so, it makes it like doubly hard, right?

00:07:08.460 --> 00:07:09.540
Sure.

00:07:09.540 --> 00:07:12.260
And those things you don't have to worry about if I Conda install it, right?

00:07:12.260 --> 00:07:14.760
Because it's already been compiled somewhere else by you guys.

00:07:14.760 --> 00:07:21.260
Not only do you not have to worry about that, but you can Conda install Postgres or all of your other general dependencies.

00:07:21.260 --> 00:07:22.440
It's not just Python.

00:07:22.440 --> 00:07:24.500
We have a huge R ecosystem.

00:07:24.500 --> 00:07:30.560
There's plenty of other ecosystems that people are, language interpreter ecosystems that people are building up around.

00:07:30.560 --> 00:07:31.440
Okay.

00:07:31.620 --> 00:07:41.280
And I guess another point about Conda versus a system package manager like YAM or apt-get is for your application code, you rarely want to be running the system Python.

00:07:41.280 --> 00:07:44.280
You always want to have an application-specific Python.

00:07:44.280 --> 00:07:48.220
And the OS package managers don't make that as easy.

00:07:48.220 --> 00:07:50.800
You basically have to make your own RPMs or something like that.

00:07:50.800 --> 00:07:53.180
Conda allows these isolated environments.

00:07:53.400 --> 00:07:54.680
Yeah, it absolutely does.

00:07:54.680 --> 00:07:55.560
That's very cool.

00:07:55.560 --> 00:07:56.020
Very cool.

00:07:56.020 --> 00:07:56.780
Okay.

00:07:56.780 --> 00:08:00.720
So, how does Conda relate to Anaconda?

00:08:00.720 --> 00:08:01.500
Sure.

00:08:01.500 --> 00:08:03.860
Anaconda is a distribution.

00:08:03.860 --> 00:08:08.440
There's an Anaconda distribution that is a set of packages that we ship about every quarter.

00:08:08.440 --> 00:08:20.120
That is the easy way for scientists and engineers, data scientists, PhD students all over the world, to install most of the core Python packages that they'll need.

00:08:20.120 --> 00:08:23.440
To do that, and the package manager part then is Conda.

00:08:23.440 --> 00:08:31.780
And so you get Conda, and then when you need to install other packages from any of our repositories or anaconda.org or anything like that,

00:08:31.780 --> 00:08:37.640
Conda is the command to extend what you install with the Anaconda distribution.

00:08:37.640 --> 00:08:42.780
Okay, so Anaconda is like all that stuff pre-packaged, pre-compiled, like the major tools you want.

00:08:42.780 --> 00:08:45.000
And Conda is the package manager for it.

00:08:45.000 --> 00:08:45.680
Nice.

00:08:45.680 --> 00:08:47.740
Phil, how about Conda Forge?

00:08:47.740 --> 00:08:50.240
Where does Conda Forge relate to all this?

00:08:50.240 --> 00:08:58.060
So, if you see Anaconda as a nice bundled set of packages to install Python and all of its dependencies,

00:08:58.060 --> 00:09:01.660
then Conda Forge is essentially doing the same thing,

00:09:01.660 --> 00:09:07.620
except Anaconda is managed by Continuum, and Conda Forge is a community effort.

00:09:07.620 --> 00:09:10.820
to kind of collaboratively to package this stuff.

00:09:10.820 --> 00:09:12.640
There are so many packages out there, right?

00:09:12.640 --> 00:09:15.740
I mean, just like you guys said, Conda is more than just Python.

00:09:15.740 --> 00:09:20.760
But just in Python, there's over 90,000 packages on PyPI, which is crazy, right?

00:09:20.820 --> 00:09:25.480
So, you probably can't manage all of that yourself, right?

00:09:25.480 --> 00:09:25.920
No.

00:09:26.080 --> 00:09:29.220
And so Conda Forge is to help crowdsource that, open source that a little bit.

00:09:29.220 --> 00:09:29.960
Yeah, exactly.

00:09:29.960 --> 00:09:34.240
It's not reasonable for us to expect Continuum to package all of this stuff.

00:09:34.240 --> 00:09:36.660
It just simply doesn't scale in that way.

00:09:36.660 --> 00:09:43.460
We needed a community effort to package some of the things that Continuum aren't necessarily ever going to package.

00:09:43.860 --> 00:09:48.880
At the end of the day, they're a business, and they're there to supply their customers.

00:09:48.880 --> 00:09:55.000
And that doesn't necessarily cover everybody who has various bespoke packages that need to be shipped.

00:09:55.000 --> 00:09:55.820
Yeah, absolutely.

00:09:55.820 --> 00:10:01.140
There's probably a very quickly small niche tale that sort of develops, right?

00:10:01.200 --> 00:10:08.220
There's probably 500 or 1,000 packages that are super important, and then it becomes really niche quickly after that, right?

00:10:08.220 --> 00:10:08.760
Absolutely.

00:10:08.760 --> 00:10:10.600
That's where Conda Forge started, really.

00:10:10.600 --> 00:10:18.180
I'm the author of several niche packages, which are extremely powerful for the people that it's targeting.

00:10:18.180 --> 00:10:26.400
But by no means would you expect that to be packaged by a company who are there, ultimately, to sell a product to their customers.

00:10:27.420 --> 00:10:35.780
That product may be freely available, but we don't have, as a community, we don't have control of what's packaged and how it's packaged.

00:10:35.780 --> 00:10:36.120
Sure.

00:10:36.120 --> 00:10:37.420
Yeah, that makes a lot of sense.

00:10:37.420 --> 00:10:40.760
So I guess I didn't really ask, what is Conda Forge?

00:10:40.760 --> 00:10:44.680
Maybe give people a quick definition so they know what we're talking about.

00:10:44.680 --> 00:10:45.120
Okay.

00:10:45.120 --> 00:10:55.000
So Conda Forge, in the same way that Anaconda is a bundle of pre-compiled Conda packages, Conda Forge is exactly the same thing.

00:10:55.000 --> 00:11:02.660
It's a channel that you can enable using the Conda package manager to install all of your favorite tools.

00:11:02.660 --> 00:11:18.680
And if your tools aren't available on that channel, then it's a community effort, and you're welcome to contribute your package to be bundled into the Conda Forge community and make it widely available to Conda users.

00:11:18.680 --> 00:11:19.120
Right.

00:11:19.360 --> 00:11:19.620
Okay.

00:11:19.620 --> 00:11:24.940
Yeah, we'll definitely dig into that more and how you can do that in a little bit, but that's great.

00:11:24.940 --> 00:11:39.360
And so in order to deliver things in a binary form, basically compiled for Windows, compiled for Linux, compiled for macOS, and things like that, you guys probably have some pretty interesting build infrastructure.

00:11:40.060 --> 00:11:41.420
Michael, do you want to talk about that?

00:11:41.420 --> 00:11:42.040
Oh, sure.

00:11:42.040 --> 00:11:42.540
Yeah.

00:11:42.540 --> 00:11:45.640
So we have a lot of different build machines.

00:11:45.640 --> 00:11:55.340
And so one of the main advances that Conda Forge has done is to take advantage of many of the free continuous integration services that are on the web.

00:11:56.360 --> 00:12:03.700
And so Phil figured out really, really clever ways to get around the different limits that those CIs present.

00:12:03.700 --> 00:12:09.640
So he thought, oh, well, you know, it's not going to work to build an entire repository of recipes.

00:12:09.640 --> 00:12:16.080
So can I instead break up the one repository into one recipe per repository?

00:12:16.640 --> 00:12:22.660
And that was a really clever workaround that made it possible to use those CIs as infrastructure.

00:12:22.660 --> 00:12:25.220
So that's part of it.

00:12:25.220 --> 00:12:38.440
At Continua, we just have kind of a standard build system where we try to maintain compatibility with older frameworks because we support customers with old CentOS 5 and RHEL 5 systems.

00:12:38.440 --> 00:12:41.360
But other than that, it's the same kind of idea.

00:12:41.360 --> 00:12:41.760
Okay.

00:12:41.760 --> 00:12:46.140
And you build it for, I can see how you would set up CI on Windows pretty easily.

00:12:46.240 --> 00:12:47.800
I see how you set up on Linux really easily.

00:12:47.800 --> 00:12:49.080
What about Mac?

00:12:49.080 --> 00:12:51.920
So Mac is...

00:12:51.920 --> 00:12:54.700
It's got to be a story behind that laugh, right?

00:12:54.700 --> 00:12:57.060
Well, it's a little bit more awkward.

00:12:57.060 --> 00:12:59.640
And the main reason why it's awkward is just Apple licensing.

00:12:59.640 --> 00:13:03.560
They don't let you run virtual machines on anything but Apple hardware.

00:13:03.560 --> 00:13:11.140
And so the number of people who are offering particularly free services with Apple builds is much more limited.

00:13:11.140 --> 00:13:14.780
And that said, you can get it on both CircleCI and TravisCI.

00:13:14.780 --> 00:13:18.400
And so we use TravisCI for Condo Forges Mac builds.

00:13:18.400 --> 00:13:18.840
Okay.

00:13:18.840 --> 00:13:19.320
Yeah.

00:13:19.320 --> 00:13:20.660
I mean, there are a few places.

00:13:20.660 --> 00:13:27.760
Like there's a place called Mac Mini Colo where you can get a bunch of Mac minis and stick them in some data center and they'll like run them for you.

00:13:28.000 --> 00:13:29.680
But yeah, it definitely makes it harder.

00:13:29.680 --> 00:13:32.700
But you guys found some kind of cloud service that you can use.

00:13:32.700 --> 00:13:34.460
You don't have like a closet full of Macs?

00:13:34.460 --> 00:13:37.260
At Continuum, we do have a closet full of Macs.

00:13:37.260 --> 00:13:37.700
Okay.

00:13:37.700 --> 00:13:38.380
Great.

00:13:38.740 --> 00:13:50.760
But I really think this binary distribution thing is really excellent because certainly when you're getting started, it's frustrating to deal with the single compile, the single install.

00:13:50.760 --> 00:13:54.140
So just knowing that it's always going to work is great.

00:13:54.140 --> 00:13:55.540
But also the speed, right?

00:13:55.540 --> 00:13:58.520
You can install stuff much quicker because you don't have to wait on a build.

00:13:58.520 --> 00:13:59.360
Yes, certainly.

00:13:59.360 --> 00:14:05.000
So if you're a Linux nerd, then it's kind of Gintu versus Ubuntu, right?

00:14:05.000 --> 00:14:05.540
Yeah.

00:14:05.540 --> 00:14:06.420
Yeah, yeah.

00:14:06.420 --> 00:14:06.900
Very nice.

00:14:06.900 --> 00:14:10.100
So you have a lot of different places where code is running.

00:14:10.100 --> 00:14:12.640
We talked about the three major OSs.

00:14:12.640 --> 00:14:15.160
Do you have compatibility for others?

00:14:15.160 --> 00:14:17.400
You talked about older systems, for example.

00:14:17.400 --> 00:14:19.140
How do you keep that all straight?

00:14:19.140 --> 00:14:22.260
Well, that's a really hard thing, actually.

00:14:22.260 --> 00:14:26.040
So the way that things are compatible varies by platform.

00:14:26.040 --> 00:14:31.020
And so for Mac, we kind of have to target an older platform, and then it's forward compatible.

00:14:31.020 --> 00:14:40.040
Windows is a weird story because on Windows, the Python version is pretty strongly tied to a particular version of Visual C++.

00:14:40.040 --> 00:14:46.340
And so that's limiting in terms of what kind of code people can actually compile.

00:14:46.340 --> 00:14:47.940
What version do you know?

00:14:47.940 --> 00:14:48.300
Sure.

00:14:48.300 --> 00:14:48.680
Yeah.

00:14:48.680 --> 00:14:52.100
So Python 2.7 requires Visual Studio 2008.

00:14:52.100 --> 00:14:57.940
And that's just kind of a custom because that's what the upstream Python.org build is.

00:14:57.940 --> 00:15:04.140
And so in order to maintain binary compatibility, it's a good idea for everybody to keep that matchup.

00:15:04.140 --> 00:15:13.380
But as a result of that, people can't really build C++11 software for Python 2.7 without mixing these runtimes.

00:15:13.840 --> 00:15:17.540
And when you mix runtimes, it's just kind of it might work.

00:15:17.540 --> 00:15:18.520
It might not.

00:15:18.520 --> 00:15:20.180
You're kind of asking for instability.

00:15:20.180 --> 00:15:20.620
Yeah.

00:15:20.620 --> 00:15:21.020
No kidding.

00:15:21.020 --> 00:15:24.840
It is too bad because C++ has actually had a bit of a renaissance, right?

00:15:24.840 --> 00:15:25.360
Absolutely.

00:15:25.360 --> 00:15:26.840
And 2008 misses.

00:15:26.840 --> 00:15:28.520
That renaissance, that's too old for it.

00:15:28.520 --> 00:15:29.580
Okay.

00:15:29.580 --> 00:15:30.100
Interesting.

00:15:30.100 --> 00:15:30.500
Interesting.

00:15:30.500 --> 00:15:32.960
Can you, any of you guys want to jump in on this?

00:15:33.020 --> 00:15:36.200
Talk about some of the challenges for community packaging.

00:15:36.200 --> 00:15:40.920
Like, if I'm getting binary code delivered to me, how do I trust it?

00:15:40.920 --> 00:15:44.120
Is that really different than trusting the source coming out of PyPI?

00:15:44.120 --> 00:15:44.780
Sure.

00:15:44.780 --> 00:15:46.280
I'll chime in a little bit.

00:15:46.280 --> 00:15:53.800
I would say it's not any different from getting it from PyPI, except that if you get it from PyPI, you can at least inspect the source.

00:15:54.020 --> 00:15:58.640
Whereas if you've got a binary blob, you have to have a different level of trust.

00:15:58.640 --> 00:16:07.060
I think there's one extra level to that because PyPI, it is the original package maintainer that's uploading the package to PyPI, right?

00:16:07.060 --> 00:16:10.500
We're taking from PyPI and we're downstream from that.

00:16:10.500 --> 00:16:14.100
So there is an extra level of people in between.

00:16:14.100 --> 00:16:19.340
On top of that, anybody can upload anything, any package they want to, to Anaconda.org.

00:16:19.340 --> 00:16:22.200
It's up to the user to decide whether they want to use it or not.

00:16:22.980 --> 00:16:25.020
And so there are some challenges there.

00:16:25.020 --> 00:16:31.520
There's also a question of reproducibility in the sense that if you're getting the source, you can compile it anywhere, right?

00:16:31.520 --> 00:16:41.600
But if you're getting a binary and you want to go and change your machine, then you're kind of, you're missing out on the ability to rerun that compile step where you choose.

00:16:41.600 --> 00:16:41.880
Yeah.

00:16:41.880 --> 00:16:46.540
So if you get a new machine, you're always going to have to go back to install via Conda.

00:16:46.540 --> 00:16:50.360
You can't just copy the files over and regenerate it or something.

00:16:50.660 --> 00:16:56.460
If you're on different architectures, for sure, you need to go and refetch the appropriate artifact for your hardware.

00:16:56.460 --> 00:16:56.780
Yeah.

00:16:56.780 --> 00:16:57.180
Okay.

00:16:57.180 --> 00:17:11.020
That said, do you guys do, you know, I had Travis Oliphant on one of the earlier shows and I feel like he said that you guys did some verification that at least the stuff that ships with Anaconda,

00:17:12.020 --> 00:17:18.300
mixes well together that one package that depends on another, you know, that those are compatible versions.

00:17:18.300 --> 00:17:19.160
Is that right?

00:17:19.160 --> 00:17:19.560
Right.

00:17:19.560 --> 00:17:20.600
We do a lot of that.

00:17:20.600 --> 00:17:25.980
And so we have our own kind of automated scripts that test our whole system together.

00:17:26.540 --> 00:17:33.320
And then Conda Forge sort of does that in a more distributed way to say when they build a package, they run the test suite.

00:17:33.320 --> 00:17:34.440
We also do that.

00:17:34.440 --> 00:17:36.540
We run a few other consistency checks.

00:17:36.540 --> 00:17:41.120
But those are the kinds of things that let us make sure that everything is playing well together.

00:17:41.220 --> 00:17:48.680
I'd add there that the Anaconda distribution is extensively, we release it about quarterly and it's extensively tested manually.

00:17:48.680 --> 00:17:58.300
We have a whole QA team that goes through that and make sure that each package works with, or each of the packages, however many that make up the full distribution work together.

00:17:58.840 --> 00:18:01.960
So yeah, there's a lot of extra testing that goes into the distribution.

00:18:01.960 --> 00:18:03.300
Yeah, I think that's really great.

00:18:03.300 --> 00:18:10.520
I think that's one of the big values, not just that you don't have to be able to compile stuff to install it, but that it's taken as a whole somewhat.

00:18:10.520 --> 00:18:13.460
You can trust it rather than here's a hundred little pieces.

00:18:13.460 --> 00:18:15.340
Individually, they're probably fine.

00:18:15.340 --> 00:18:17.140
How are they as a put together, right?

00:18:17.140 --> 00:18:27.080
Yeah, the downside of that is when you install the Anaconda district, Conda install Anaconda, you're explicitly pinning all of your versions or all of your packages to a specific version.

00:18:27.720 --> 00:18:35.480
And then when you want to update everything, people get confused about, I was looking for the most recent version of Jupyter and I said update all.

00:18:35.480 --> 00:18:37.400
Why didn't I get the most recent version of Jupyter?

00:18:37.400 --> 00:18:39.000
So there's a little bit of a downside.

00:18:39.000 --> 00:18:41.640
That is a bit of a downside, I guess.

00:18:41.640 --> 00:18:42.640
I did notice that.

00:18:42.640 --> 00:18:47.140
One of the things I was playing around with was trying to use Conda for my web apps.

00:18:47.140 --> 00:18:54.140
I noticed some of the web frameworks were farther out of date with what I got out of there than I guess I'd like.

00:18:54.140 --> 00:18:55.840
Can you talk about that?

00:18:56.520 --> 00:19:01.880
Whoever has the best info, I guess, on how do we like as things evolve?

00:19:01.880 --> 00:19:05.300
You know, so suppose I've got some package put into Conda Forge.

00:19:05.300 --> 00:19:10.480
How does the versioning on PyPI map into Conda Forge?

00:19:10.480 --> 00:19:12.620
Yeah, I'll try to shoot that.

00:19:12.620 --> 00:19:17.600
It's a manual process to update the recipe that creates the Conda package.

00:19:17.600 --> 00:19:25.860
And so someone has to update the recipe on the staged recipes or on the feedstock on Conda Forge.

00:19:25.860 --> 00:19:30.120
And then it's built out automatically by the CIs, which is great.

00:19:30.120 --> 00:19:32.140
The CIs save you a lot of effort.

00:19:32.760 --> 00:19:35.840
At Continuum, we don't have our CIs quite working yet.

00:19:35.840 --> 00:19:42.320
And so it's really a much more manual process to edit the recipe and then build out each of the different packages.

00:19:42.320 --> 00:19:50.940
With that level of effort, it's just a matter of first noticing that there is a new version available and then doing the work to package it up.

00:19:50.940 --> 00:19:51.300
Sure.

00:19:51.460 --> 00:19:59.060
In the defense of Anaconda versus Conda Forge here, there is clearly a huge overlap between what Anaconda does and what Conda Forge does.

00:19:59.060 --> 00:20:13.940
From someone who's not part of the Anaconda team, I just want to say how much of a great job the Anaconda team actually do in providing a really coherent, well put together set of packages that you can trust, you can rely on.

00:20:14.940 --> 00:20:15.900
They're stable.

00:20:15.900 --> 00:20:20.800
And really, I guess that's the big selling point of Anaconda.

00:20:20.800 --> 00:20:24.020
And Conda Forge really isn't trying to be in that space at all.

00:20:24.020 --> 00:20:29.640
What it wants to be is the kind of the leaner, faster moving community effort.

00:20:29.640 --> 00:20:33.920
But there is no chance that Conda Forge can be as well curated.

00:20:33.920 --> 00:20:37.100
It can't provide the indemnity that you get from Anaconda.

00:20:37.100 --> 00:20:41.780
As a distribution, Anaconda is just an amazing resource to have in the community.

00:20:41.780 --> 00:20:49.580
Yeah, and it ships quarterly, so it's probably, you know, if you're willing to wait an extra month, you'll be on the new version of a lot of things anyway.

00:20:49.580 --> 00:21:03.600
If I'm an author of a popular open source package that's either in Anaconda or Conda Forge, what can I do to make sure that the latest possible version is there, given that I have to accept the release cycles and stuff?

00:21:03.600 --> 00:21:04.580
But what do I do?

00:21:04.580 --> 00:21:07.320
Is there a place I talk to you guys, or what's the story?

00:21:07.320 --> 00:21:11.400
We both have places to submit pull requests to recipes.

00:21:11.400 --> 00:21:19.820
And so for the internal, for Anaconda, it's a recipe or a repository called Anaconda Recipes.

00:21:19.820 --> 00:21:25.200
And then for Conda Forge, it's going to be the feedstock for whatever you want to improve.

00:21:25.200 --> 00:21:28.920
If you want to add it, that's a staged recipes PR.

00:21:28.920 --> 00:21:29.480
Absolutely.

00:21:29.660 --> 00:21:33.980
Okay, so let's maybe talk about the recipes and feedstocks and stuff a little bit.

00:21:33.980 --> 00:21:39.780
I have one more comment that I might have given the wrong impression about the distribution shipping quarterly.

00:21:39.780 --> 00:21:45.480
The distribution is like one installer, one big meta package that has all kinds of stuff in it.

00:21:45.480 --> 00:21:46.860
We're constantly updating.

00:21:47.260 --> 00:21:52.080
I mean, Conda Forge too, but our source, our default repositories, we're updating all the time.

00:21:52.080 --> 00:21:58.220
And you don't have to wait for the quarter to come around to get more recent packages most of the time.

00:21:58.220 --> 00:21:58.540
Oh, yeah, yeah.

00:21:58.540 --> 00:21:58.740
Okay.

00:21:58.740 --> 00:22:05.140
It's just the Anaconda distribution and the big Anaconda meta package is updated once a quarter.

00:22:05.140 --> 00:22:10.260
Those are the packages that get all the extra QA and making sure that they all put together and stuff.

00:22:10.260 --> 00:22:10.820
I see what you mean.

00:22:10.820 --> 00:22:14.560
So like the DMG I got from my Mac, that thing is updated quarterly.

00:22:14.560 --> 00:22:15.620
But you're right.

00:22:15.620 --> 00:22:25.300
When I run a little green circle thing, the sort of overall environmental manager, that thing, I can go and update stuff as they come.

00:22:25.300 --> 00:22:27.620
I remember doing that quite more frequently.

00:22:27.620 --> 00:22:28.120
That's cool.

00:22:28.120 --> 00:22:33.160
Let me take just a moment and tell you about a sponsor of this episode.

00:22:33.160 --> 00:22:38.640
Anaconda Con 2017 is the first conference for open data science leaders around the world

00:22:38.640 --> 00:22:41.660
and the definitive gathering place for the Anaconda crew.

00:22:41.660 --> 00:22:46.700
Whether you are a new or longstanding member of the community focused on business or technology,

00:22:46.700 --> 00:22:50.100
Anaconda Con will help you conquer your biggest data science challenges.

00:22:50.100 --> 00:22:51.940
Data science is a team sport.

00:22:51.940 --> 00:22:59.080
That's why they're offering you two tickets for the price of one to Anaconda Con 17 starting now until January 16th.

00:22:59.080 --> 00:23:04.640
Register today at talkpython.fm/acon to take advantage of the spectacular savings.

00:23:04.640 --> 00:23:06.820
You'll get two tickets for the price of one,

00:23:07.040 --> 00:23:12.680
and you'll have the lovely tech-oriented city of Austin, Texas to share with your friend and all the top data scientists.

00:23:12.680 --> 00:23:14.760
Yeah.

00:23:14.760 --> 00:23:17.060
So let's talk about these recipes just a little bit.

00:23:17.060 --> 00:23:19.820
So let's focus on Condo Forge for a minute.

00:23:19.820 --> 00:23:24.560
If you go there, you can go to github.com/condo-forge, I think.

00:23:24.560 --> 00:23:28.640
And you've got, yeah, you've got a couple of repos.

00:23:28.920 --> 00:23:37.740
One of them is feedstocks, and that's where the accepted, those are the accepted sources that you guys pull from, right, to build packages?

00:23:37.740 --> 00:23:38.220
Right.

00:23:38.220 --> 00:23:46.440
We have a repo which holds, using Git submodules, every single individual feedstock repo that lives in Condo Forge.

00:23:47.440 --> 00:23:57.120
So the feedstock is the place where the recipe is stored canonically, and that has continuous integration enabled.

00:23:57.120 --> 00:24:03.940
So whenever we make changes to that recipe, it goes away, and it builds it each time and makes that artifact available on the Condo Forge channel.

00:24:03.940 --> 00:24:04.300
Okay.

00:24:04.860 --> 00:24:06.320
Maybe tell us what is a recipe.

00:24:06.320 --> 00:24:09.040
You've got a couple of pieces that make that up, right?

00:24:09.040 --> 00:24:09.540
Sure.

00:24:09.540 --> 00:24:11.020
Mike, do you want to talk about recipes?

00:24:11.020 --> 00:24:12.460
Yeah.

00:24:12.460 --> 00:24:27.020
A recipe is a YAML file, for one thing, and it's just kind of a way of expressing a standard of how you tell Condo Build or any other program that interprets that YAML file.

00:24:27.020 --> 00:24:33.840
Where you go to build the source, what are your build options, what are the instructions that you carry out to actually do the source,

00:24:34.420 --> 00:24:38.960
and then one thing that we're adding in is how do you package the source after you've built it,

00:24:38.960 --> 00:24:45.020
because some of the time you want to package different parts of what you've built into different packages.

00:24:45.020 --> 00:24:45.620
I see.

00:24:45.620 --> 00:24:46.200
That makes sense.

00:24:46.200 --> 00:24:53.680
So if basically we go to GitHub and there's a link to a submodule that gets pulled in for each one of these,

00:24:53.680 --> 00:25:00.400
if it's somewhere else other than Git, like Subversion, is it still possible to stick it in there,

00:25:00.400 --> 00:25:04.060
or does it have to be copied over to a GitHub repo or something?

00:25:04.060 --> 00:25:12.480
Condo Forge is based around the GitHub stuff, but there's no intrinsic limit to Condo Build as to where a recipe has to come from.

00:25:12.480 --> 00:25:12.760
Right.

00:25:12.760 --> 00:25:13.000
Okay.

00:25:13.000 --> 00:25:15.260
Well, let's talk quickly about Condo Build.

00:25:15.260 --> 00:25:19.000
Michael, you're also in charge of that, right, or working closely with that?

00:25:19.000 --> 00:25:19.540
Yes.

00:25:19.780 --> 00:25:21.280
So what's the story there?

00:25:21.280 --> 00:25:28.640
Like, if I want to take a package and build it with Condo Build, I've got to put together the recipe for it to work.

00:25:28.640 --> 00:25:29.960
I've got to obviously have the sources.

00:25:30.640 --> 00:25:38.120
And then I get it set up and I give it to you guys and you ship it off to CI on various platforms to build out the various versions or what happens?

00:25:38.120 --> 00:25:38.500
Yeah.

00:25:38.500 --> 00:25:44.540
Condo Build is really just a lot of orchestration of environment setup.

00:25:44.860 --> 00:25:48.260
And so building up a build environment is pretty hard.

00:25:48.260 --> 00:25:50.560
There's a lot of different pieces that go into that.

00:25:50.560 --> 00:25:56.980
And so in previous jobs as a software developer, setting up your workstation takes a day or two.

00:25:57.560 --> 00:26:06.000
So what Condo Build is really for is abstracting that away and taking advantage of Condo environments to make that setup be very seamless.

00:26:06.000 --> 00:26:12.540
And so you list your requirements at build time and at runtime in that YAML file.

00:26:12.540 --> 00:26:16.040
And then Condo Build goes and installs that stuff.

00:26:16.400 --> 00:26:32.480
And it is also doing a lot of kind of housekeeping as far as downloading the source and making sure that it's clean and then putting it in the right place and putting your prompt in the right place and activating VC Verazol, for example.

00:26:32.480 --> 00:26:40.820
And just taking care of all of those details for you so that you don't have to learn to do it yourself or don't have to put up with doing it yourself.

00:26:40.820 --> 00:26:41.460
That's nice.

00:26:41.460 --> 00:26:47.800
So if I can get my thing to build on one platform, how hard is it to get it to build on all the platforms?

00:26:47.800 --> 00:26:50.320
It depends heavily on which package.

00:26:50.320 --> 00:26:55.160
I mean, some packages support all platforms pretty well, pretty natively.

00:26:55.160 --> 00:27:02.120
But for example, some packages that really depend very heavily on Unix tools take a little bit more handholding on Windows.

00:27:02.120 --> 00:27:05.520
There's a lot of other build tools that make life easier.

00:27:05.520 --> 00:27:15.000
So for example, CMake is something that you always get really happy when you see that somebody's using that because it makes it much easier to do cross-platform builds.

00:27:15.000 --> 00:27:21.480
Whereas some other projects will say, oh, I've got a make file for Unix stuff, so Linux and Mac.

00:27:21.480 --> 00:27:26.640
And then on Windows, I've got this Visual Studio 2010 solution file.

00:27:27.300 --> 00:27:31.500
So if you're on Visual Studio 2008, you probably can't use it.

00:27:31.500 --> 00:27:33.720
If you're on 2015, you have to update it.

00:27:33.720 --> 00:27:34.900
And maybe it works.

00:27:34.900 --> 00:27:35.920
Maybe it doesn't.

00:27:35.920 --> 00:27:40.460
So that's the kind of thing where some projects are a lot easier than others.

00:27:41.020 --> 00:27:47.080
I would add, though, that for Python in particular, the recipe is usually trivial.

00:27:47.080 --> 00:27:51.280
It's usually mostly just there's usually about three files.

00:27:51.280 --> 00:27:55.740
There's a meta.yaml that is kind of like setup.py, except we use setup.py.

00:27:55.740 --> 00:28:00.560
And then your build script is mostly just Python setup.py install.

00:28:00.560 --> 00:28:04.020
And most of the time, you don't even include that.

00:28:04.020 --> 00:28:13.780
If you look at most of the Python-based recipes on Conda Forge, there's just a single command to run that setup.py command in the meta.yaml file.

00:28:13.780 --> 00:28:14.140
I see.

00:28:14.140 --> 00:28:18.360
And that gets basically installed into that local Conda environment.

00:28:18.360 --> 00:28:20.520
Then you just grab what you got and ship it?

00:28:20.520 --> 00:28:21.040
Exactly.

00:28:21.040 --> 00:28:25.660
So what Conda Build is doing is taking a snapshot of the files after it creates the environment.

00:28:25.660 --> 00:28:31.980
And then another snapshot after it's done doing whatever you told it to do to install it.

00:28:31.980 --> 00:28:34.360
And then those are the files that make up your package.

00:28:34.360 --> 00:28:34.720
Okay.

00:28:34.720 --> 00:28:35.740
This is excellent.

00:28:35.740 --> 00:28:35.980
Yeah.

00:28:35.980 --> 00:28:40.380
So it sounds like the Conda environments play a super important role.

00:28:40.380 --> 00:28:46.600
And the fact that Conda can install the tool chain as well is really important in making this all work.

00:28:46.600 --> 00:28:47.180
Yes.

00:28:47.180 --> 00:28:48.400
It's not critical.

00:28:48.400 --> 00:28:52.760
So the tool chain being a Conda package is actually something that we're working on.

00:28:52.760 --> 00:28:59.060
You'll soon be able to install the compiler and the runtime libraries and all that stuff as dependencies.

00:28:59.060 --> 00:29:03.460
You can currently, just not very many people do it because it's not supported all that well.

00:29:03.460 --> 00:29:07.200
That's what we're moving towards our main way of doing things.

00:29:07.200 --> 00:29:15.080
And what that'll mean is it's just going to be incredibly easy to, you're just going to be able to volunteer your machine as a build worker.

00:29:15.800 --> 00:29:19.640
And as long as you have Conda build installed on it, it doesn't matter what else you have.

00:29:19.640 --> 00:29:20.560
It'll take care of it.

00:29:20.560 --> 00:29:20.940
Interesting.

00:29:20.940 --> 00:29:27.740
So you mean like I could go and just say, hey, I'm willing to donate some of my cycles and disk and bandwidth to be a build machine?

00:29:27.740 --> 00:29:31.240
Kind of like steady at home or protein folding, those things?

00:29:31.240 --> 00:29:31.860
Yes.

00:29:31.860 --> 00:29:32.860
That is the dream.

00:29:33.080 --> 00:29:37.980
And there's quite a few technical hurdles to get there, but it'll be really neat if we figure it out.

00:29:37.980 --> 00:29:38.940
That sounds awesome.

00:29:38.940 --> 00:29:39.480
Yeah, yeah.

00:29:39.480 --> 00:29:39.940
Very cool.

00:29:39.940 --> 00:29:41.000
Okay.

00:29:42.040 --> 00:29:55.220
So what are some of the challenges around, you know, linking all of these other GitHub or not necessarily GitHub, Git repos into like one sort of super master feedstock repo?

00:29:55.220 --> 00:30:03.280
You know, because you've got all the recipes, but they all either in the Conda or Conda Forge, like kind of link back to all these other places.

00:30:03.280 --> 00:30:05.300
Phil, do you want to answer that or should I?

00:30:05.300 --> 00:30:07.040
You're welcome to answer it.

00:30:07.520 --> 00:30:08.980
Okay, good.

00:30:08.980 --> 00:30:11.900
I think the hard part is how do you do the maintenance work?

00:30:11.900 --> 00:30:21.980
Because it works fantastically well to pull those submodules into one folder just as a view or as a consolidated place to work from.

00:30:21.980 --> 00:30:32.940
But then if you change any of the source code, Git submodules are just unwieldy at best for pushing those changes back to the parent repositories.

00:30:33.660 --> 00:30:41.300
So what Phil has created is fantastically useful for doing the editing on each repository.

00:30:41.300 --> 00:30:51.420
But if there were like, say, a lot of edits you wanted to apply across a lot of different repositories, that's the kind of change that would be kind of tedious and hard to do.

00:30:51.420 --> 00:30:52.100
Yeah, absolutely.

00:30:52.100 --> 00:30:53.680
So what's that tooling look like?

00:30:53.680 --> 00:30:55.300
We don't have any idea yet.

00:30:55.300 --> 00:30:56.360
We're still working on it.

00:30:57.680 --> 00:30:59.480
Just waiting for Phil to work his magic.

00:30:59.480 --> 00:31:00.140
Yeah, yeah.

00:31:00.140 --> 00:31:01.400
Please, Phil, figure that out.

00:31:01.400 --> 00:31:15.900
So on the Condor Forge front, we actually have a Heracuse service that's running periodically to re-render all of our feedstocks whenever we make kind of fundamental template changes to how a feedstock should look.

00:31:15.900 --> 00:31:20.440
And that service actually goes away, re-renders using the tools that we've built.

00:31:20.440 --> 00:31:29.300
And then if there are any changes, pushes a new pull request to be merged by the recipe maintainers on GitHub.

00:31:29.300 --> 00:31:37.420
So actually, it is tedious to have to make these changes to, like, we're up to 1,500 Git repos now.

00:31:37.760 --> 00:31:44.360
It is tedious if you need to make those changes, but there are some tools that we've developed to simplify that if it's kind of a universal change that's needed.

00:31:44.360 --> 00:31:44.760
Yeah.

00:31:44.760 --> 00:31:52.280
To clarify what a re-rendering is, that is just, like, a change to the CI setup work.

00:31:52.280 --> 00:31:57.800
And the re-rendering is to adapt the CI scripts to whatever the latest standard is.

00:31:57.800 --> 00:31:58.200
I see.

00:31:58.200 --> 00:31:58.520
Okay.

00:31:58.520 --> 00:31:58.880
Yeah.

00:31:58.880 --> 00:32:00.940
And what CI tools do you use?

00:32:00.940 --> 00:32:05.300
That's the AppVeer and the CircleCI and TravisCI.

00:32:05.300 --> 00:32:05.800
Okay.

00:32:05.800 --> 00:32:07.000
Yeah, yeah.

00:32:07.000 --> 00:32:07.320
Very nice.

00:32:07.440 --> 00:32:13.700
And when do you choose which, or do you use them all and sort of somehow use them in concert?

00:32:13.700 --> 00:32:14.220
Sure.

00:32:14.220 --> 00:32:21.460
That's something that Phil figured out, and he uses AppVeer for Windows and CircleCI for Linux and TravisCI for Mac.

00:32:21.460 --> 00:32:24.200
Phil, you want to explain why you made those choices?

00:32:24.200 --> 00:32:26.980
I mean, the choices were pretty straightforward, really.

00:32:26.980 --> 00:32:33.240
So, obviously, AppVeer is pretty much the only game in town for Windows continuous integration, or certainly was at the time.

00:32:33.240 --> 00:32:36.680
TravisCI is ubiquitous, and everyone knows it.

00:32:36.680 --> 00:32:45.760
And at the time, when we first developed CondorForge, there was either you could have very limited Mac builds or amazing Linux builds.

00:32:45.760 --> 00:32:47.360
But you can have both.

00:32:47.600 --> 00:32:59.780
So, we ended up having to go down the route of picking Travis for Mac.

00:32:59.780 --> 00:33:11.960
And then, yeah.

00:33:11.960 --> 00:33:13.060
And then, yeah.

00:33:13.060 --> 00:33:25.140
You know, we've got to go down the route of the app, but we've got to go down the route of the app.

00:33:25.140 --> 00:33:26.220
And then, yeah.

00:33:26.220 --> 00:33:30.120
So, yeah.

00:33:30.120 --> 00:33:31.280
So, yeah.

00:33:31.280 --> 00:33:31.920
Yeah.

00:33:31.920 --> 00:33:32.820
That's really great of them.

00:33:32.820 --> 00:33:33.160
Yeah.

00:33:33.160 --> 00:33:33.200
Yeah.

00:33:33.200 --> 00:33:34.400
Nice job.

00:33:35.400 --> 00:33:45.460
Do you think you guys, you think, on a forge or the recipes, Feedstock is what it's called, is the thing on GitHub with the most submodules?

00:33:46.600 --> 00:33:47.760
Oh, good question.

00:33:47.760 --> 00:33:48.480
Thanks.

00:33:48.480 --> 00:33:50.240
Yeah.

00:33:50.240 --> 00:33:52.580
We're up to 1,500 recipes.

00:33:52.580 --> 00:33:54.440
So, about 1,500.

00:33:54.440 --> 00:33:55.680
It's pretty high.

00:33:55.680 --> 00:33:58.500
It's got to be in the top five if it's not number one.

00:33:58.500 --> 00:33:59.360
I bet it's number one.

00:33:59.360 --> 00:34:01.240
That's really interesting.

00:34:01.240 --> 00:34:01.900
Really interesting.

00:34:03.080 --> 00:34:07.960
So, can you talk about the growth and some of the challenges, Phil, of CondorForge?

00:34:07.960 --> 00:34:08.340
Sure.

00:34:08.340 --> 00:34:12.980
So, I mean, we publicly announced CondorForge less than 12 months ago.

00:34:12.980 --> 00:34:17.060
And the uptake curve on it was crazy.

00:34:17.060 --> 00:34:24.180
In the first few months, we'd grown to 100 contributors and kind of 300 recipes or something like that.

00:34:24.180 --> 00:34:28.720
It really is quite amazing that the infrastructure scaled so well.

00:34:28.720 --> 00:34:34.280
I mean, we designed the architecture to have the ability to make lots of Git repos.

00:34:34.280 --> 00:34:40.960
But we had really no idea whether GitHub were going to limit the number of Git repos we could have under one organization.

00:34:40.960 --> 00:34:47.600
You know, the continuous integration services, we had no idea whether they'd be able to cope with so many kind of registered Git repositories.

00:34:47.600 --> 00:34:52.940
There were some real challenges that actually just fell out quite nicely.

00:34:52.940 --> 00:34:53.260
Yeah.

00:34:53.260 --> 00:34:55.720
It sounds like the tooling worked really well, actually.

00:34:55.720 --> 00:34:56.440
Yeah.

00:34:56.440 --> 00:35:01.540
As it became more and more mature, the bottleneck, it turns out, has not been the hardware.

00:35:01.540 --> 00:35:04.800
Actually, the biggest bottleneck probably is me.

00:35:04.800 --> 00:35:16.200
And just kind of developing the governance and the kind of delegated authorities to kind of make decisions without my intervention just takes time.

00:35:16.200 --> 00:35:20.740
And it's actually kind of the fluffy thing that's much harder than the software for me.

00:35:20.740 --> 00:35:22.340
There's no script for that, is there?

00:35:22.340 --> 00:35:22.780
No.

00:35:22.780 --> 00:35:24.740
There's no continuous integration service for that.

00:35:26.340 --> 00:35:26.760
Hey, everyone.

00:35:26.760 --> 00:35:31.560
Let me take just a quick moment and tell you about a new sponsor of the show, MongoDB University.

00:35:31.560 --> 00:35:34.800
MongoDB is one of the fastest growing job skills on the market.

00:35:34.800 --> 00:35:39.400
Long ago when I was getting into MongoDB, I took one of their free courses on Mongo University.

00:35:39.400 --> 00:35:42.300
It was a great way to get up and running with my first app.

00:35:42.300 --> 00:35:50.580
MongoDB University offers free seven-week courses on MongoDB designed to teach you everything you need to know about how to build a MongoDB-based app.

00:35:50.700 --> 00:35:58.300
This course will cover basic installation, JSON, schema design, querying, inserting data, indexing, and working with the Python driver, of course.

00:35:58.300 --> 00:36:04.640
After completing this course, you should have a good understanding how applications are built on top of MongoDB using Python.

00:36:05.000 --> 00:36:09.480
Plus, you'll have a great foundation for preparing for the MongoDB developer certification exam.

00:36:09.480 --> 00:36:12.840
I hope you can join me as a MongoDB University alumnus.

00:36:12.840 --> 00:36:17.660
Sign up for the free seven-week course at talkpython.fm/Mongo.

00:36:18.760 --> 00:36:23.320
Kale, let's talk a little bit about some of the projects under github.com/Conda.

00:36:23.320 --> 00:36:23.980
Sure.

00:36:23.980 --> 00:36:26.140
So there's a few that are interesting to me.

00:36:26.140 --> 00:36:28.980
There's Conda and then there's Constructor.

00:36:28.980 --> 00:36:30.880
What's the story of those?

00:36:30.880 --> 00:36:31.180
Yep.

00:36:31.180 --> 00:36:32.980
So there's Conda and CondaBuild.

00:36:32.980 --> 00:36:35.360
Those are the two big ones that we've been talking about.

00:36:35.360 --> 00:36:36.980
There's Constructor.

00:36:36.980 --> 00:36:47.640
And Constructor is actually a lot of what we use to build the single installer, the Anaconda Distribution installer, at least the .sh ones.

00:36:47.940 --> 00:37:00.200
And so it creates a self-extracting binary into a single .sh or executable file will unroll itself and install all those packages for you.

00:37:00.200 --> 00:37:01.460
That's what Constructor is.

00:37:01.460 --> 00:37:05.140
Some of the other ones, CondaM is on there, but it's deprecated.

00:37:05.140 --> 00:37:12.100
It's been pulled into the Conda repo now so that they can be tested together and shipped together and versioned together and stuff like that.

00:37:12.100 --> 00:37:13.980
There's Capsule repo.

00:37:14.440 --> 00:37:18.060
And Capsule is a bit of an experiment for Continuum right now.

00:37:18.060 --> 00:37:30.600
It's really focused on more managing data science projects, starting services that are dependencies for data science projects like Aretis database or something like that.

00:37:30.600 --> 00:37:41.140
So it takes all the ideas of Conda's package management, environment management, adds services, adds running processes to it, and then adds data to it as well.

00:37:41.140 --> 00:37:44.040
So data shape, schema, stuff like that.

00:37:44.040 --> 00:37:44.360
Wow.

00:37:44.360 --> 00:37:45.260
That sounds pretty interesting.

00:37:45.680 --> 00:37:55.340
So if I want to do something where I'm going to need a Jupyter Notebook server running, I'm going to need Redis, like you said, and a few other things, that could sort of do that all in one shot?

00:37:55.340 --> 00:38:06.920
And then in a portable way so that you can move projects around from a local dev environment to something that is sort of running in production and against your production database.

00:38:06.920 --> 00:38:11.520
Even Conda, one of the great things is it's completely OS agnostic, right?

00:38:11.520 --> 00:38:17.000
So being able to port your projects across OSs and share your projects that way too.

00:38:17.000 --> 00:38:17.400
Cool.

00:38:17.400 --> 00:38:19.260
How does that help for reproducibility?

00:38:19.260 --> 00:38:25.620
Like if I'm a scientist and I've written a paper, can I make a capsule thing and go, and this is the thing that will let you go and do it?

00:38:25.620 --> 00:38:26.580
I can see that happening.

00:38:26.580 --> 00:38:26.880
Yeah.

00:38:26.880 --> 00:38:27.300
Yeah.

00:38:27.300 --> 00:38:28.880
Very, very, very cool.

00:38:28.880 --> 00:38:35.420
The starting point, if you want to examine my data yourself, here's all the tools you need to do it.

00:38:35.420 --> 00:38:37.800
Run a command and you're in.

00:38:37.800 --> 00:38:38.120
Okay.

00:38:38.120 --> 00:38:38.660
Excellent.

00:38:39.580 --> 00:38:44.800
And Phil, how about the Conda Forge Conda Smithy thing on GitHub that you guys have?

00:38:44.800 --> 00:38:45.160
What's that?

00:38:45.160 --> 00:38:45.500
Right.

00:38:45.500 --> 00:38:50.660
So as I say, we've got like 1,500 recipes now that are sitting each in their own Git repository.

00:38:50.660 --> 00:38:54.100
And the Git repository that holds the recipe is called the Feedstock.

00:38:54.100 --> 00:39:02.260
And as you can imagine, there is duplication of things like the readme and the license and the continuous integration scripts.

00:39:02.260 --> 00:39:07.620
And we didn't want to have that kind of duplication where we had to manage that manually.

00:39:08.340 --> 00:39:18.940
So Conda Smithy really is the tool that is the cookie cutter, the templating engine that takes a recipe and turns it into this Git repository.

00:39:18.940 --> 00:39:19.520
I see.

00:39:19.520 --> 00:39:25.480
So if I owned a package and I wanted to get started, maybe I'd check out Conda Smithy to build what I'm going to start with?

00:39:25.600 --> 00:39:25.720
Yeah.

00:39:25.720 --> 00:39:25.720
Yeah.

00:39:25.720 --> 00:39:30.980
You can render your recipe into a feedstock and see how that would look.

00:39:30.980 --> 00:39:33.200
And actually, that's precisely what we do.

00:39:33.200 --> 00:39:38.980
The turn recipes proposed to Conda Forge into feedstocks.

00:39:39.580 --> 00:39:44.460
And the tooling in Conda Smithy also includes the ability to make the new GitHub repository.

00:39:44.460 --> 00:39:46.760
It registers all the webhooks.

00:39:46.760 --> 00:39:52.900
So you can kind of automatically register Travis, Circle, and AppFire continuous integration.

00:39:52.900 --> 00:40:00.320
It just kind of packages everything neatly into one place so that we don't have to repeat ourselves 1,500 times.

00:40:00.320 --> 00:40:01.080
Yeah, absolutely.

00:40:01.080 --> 00:40:03.460
And make it easier for people to contribute.

00:40:03.880 --> 00:40:04.280
All right, guys.

00:40:04.280 --> 00:40:05.980
Looks like we're running out of time.

00:40:05.980 --> 00:40:08.040
I think we might have to leave it there for Conda.

00:40:08.040 --> 00:40:11.140
But let me ask you each two questions.

00:40:11.140 --> 00:40:12.980
I always ask at the end of the show.

00:40:12.980 --> 00:40:14.300
Just there's three of you.

00:40:14.300 --> 00:40:15.420
You go kind of quick.

00:40:15.420 --> 00:40:24.020
First of all, there's over 90, I think 95,000 packages on PyPI and many of them on Conda Forge and within Anaconda.

00:40:24.020 --> 00:40:31.360
Can you each give me maybe one of your favorite packages that's not necessarily popular but you think is really cool that people should learn about?

00:40:31.360 --> 00:40:32.120
Phil, go first.

00:40:32.240 --> 00:40:36.580
I'm going to pick a package which is extremely popular but it's so exciting.

00:40:36.580 --> 00:40:38.280
I'm thrilled that it exists.

00:40:38.280 --> 00:40:41.560
My favorite package is Dask and Dask Distributed.

00:40:41.560 --> 00:40:47.360
I think it's just an amazing solution to a really big problem within the community.

00:40:47.360 --> 00:40:50.900
Yeah, so this is like for parallelizing data pipeline type processing?

00:40:50.900 --> 00:40:51.900
Right, exactly.

00:40:51.900 --> 00:40:55.040
Yeah, and parallel array computation.

00:40:55.040 --> 00:40:57.360
Just really exciting.

00:40:57.360 --> 00:40:58.340
All right, Dask.

00:40:58.340 --> 00:40:59.160
Dask, very cool.

00:40:59.160 --> 00:40:59.680
Cale?

00:40:59.880 --> 00:41:04.480
Yeah, the two packages that popped into my mind are Mahmoud Hashimi's Boltons.

00:41:04.480 --> 00:41:05.300
I love that.

00:41:05.300 --> 00:41:06.240
I use it all the time.

00:41:06.240 --> 00:41:09.940
And then Matt Rockland's PyTools, SciTools.

00:41:10.440 --> 00:41:17.600
Both fairly low level but both awesome libraries for writing general Python and using both all the time.

00:41:17.600 --> 00:41:18.160
Oh, excellent.

00:41:18.160 --> 00:41:19.520
Yeah, I've checked out Boltons.

00:41:19.520 --> 00:41:20.220
Not the other one.

00:41:20.220 --> 00:41:21.280
I'll have to have a look at that.

00:41:21.280 --> 00:41:22.700
They're both, you know, both sound great.

00:41:22.700 --> 00:41:23.780
And Michael?

00:41:23.780 --> 00:41:24.440
pytest.

00:41:25.960 --> 00:41:27.240
Yes, pytest.

00:41:27.240 --> 00:41:30.420
To make sure all these automated builds actually have some sort of meaning, right?

00:41:30.420 --> 00:41:30.780
Yeah.

00:41:30.780 --> 00:41:33.380
And also just all the plugins that go with pytest.

00:41:33.380 --> 00:41:37.140
Let it do incredible things in very expressive ways.

00:41:37.140 --> 00:41:39.080
I'm very, very thankful for pytest.

00:41:39.080 --> 00:41:39.500
Excellent.

00:41:39.500 --> 00:41:42.540
All right, Michael, when you write some Python code, what editor do you open up?

00:41:42.540 --> 00:41:43.240
SpaceMax.

00:41:43.240 --> 00:41:44.100
SpaceMax.

00:41:44.100 --> 00:41:44.920
All right on.

00:41:44.920 --> 00:41:46.240
Cale?

00:41:46.360 --> 00:41:48.120
For Python code in particular, it's PyCharm.

00:41:48.120 --> 00:41:48.600
PyCharm.

00:41:48.600 --> 00:41:49.320
Okay, cool.

00:41:49.320 --> 00:41:50.080
And Phil?

00:41:50.080 --> 00:41:52.100
I'm mostly a Vim user, even on Windows.

00:41:52.100 --> 00:41:52.480
Okay.

00:41:52.480 --> 00:41:53.380
Yeah, yeah.

00:41:53.380 --> 00:41:53.900
Very nice.

00:41:53.900 --> 00:42:00.100
And I guess the legitimate real Vim and the Unix tools are supposed to be there soon.

00:42:00.100 --> 00:42:00.760
Are they already there?

00:42:00.760 --> 00:42:01.180
I'm not sure.

00:42:01.180 --> 00:42:02.920
But the Unix...

00:42:02.920 --> 00:42:03.060
In Conda?

00:42:03.060 --> 00:42:04.020
No, no.

00:42:04.020 --> 00:42:10.360
In Windows 10, it's supposed to have the Ubuntu subsystem in it natively pretty soon.

00:42:10.360 --> 00:42:11.540
Maybe that'll even help with some builds.

00:42:11.540 --> 00:42:11.940
Who knows?

00:42:11.940 --> 00:42:13.220
But, yeah, yeah.

00:42:13.220 --> 00:42:13.520
Very cool.

00:42:13.520 --> 00:42:15.040
Do we have Vim for Conda?

00:42:15.040 --> 00:42:15.960
Has it been written?

00:42:16.220 --> 00:42:16.740
Does anybody know?

00:42:16.740 --> 00:42:17.440
I'm just curious.

00:42:17.440 --> 00:42:18.880
I don't know.

00:42:18.880 --> 00:42:21.380
I wrote Nano a long time ago.

00:42:21.380 --> 00:42:22.720
Is it on Conda Forge?

00:42:22.720 --> 00:42:25.620
Phil, do you have Vim compiled yet on Conda Forge?

00:42:25.620 --> 00:42:26.800
I know of.

00:42:26.800 --> 00:42:28.620
But then, you know, I'm completely out of the loop.

00:42:28.620 --> 00:42:30.400
Sounds like somebody should take that one on.

00:42:30.400 --> 00:42:30.980
Awesome.

00:42:30.980 --> 00:42:32.040
All right.

00:42:32.040 --> 00:42:33.060
Any final call to actions?

00:42:33.060 --> 00:42:36.580
Like, how can people contribute to this overall project that you guys are all working on?

00:42:36.580 --> 00:42:38.160
Vim for Conda Forge, apparently.

00:42:38.160 --> 00:42:39.860
That's step one.

00:42:39.860 --> 00:42:40.720
Oh, I have one.

00:42:40.720 --> 00:42:44.500
I released Conda 4.3.0 today.

00:42:44.500 --> 00:42:45.900
It's a huge feature release.

00:42:46.080 --> 00:42:53.320
It's over almost 900 commits past the 4.2 feature release or feature branch.

00:42:53.320 --> 00:42:55.060
It's released on.

00:42:55.060 --> 00:42:56.640
We have a Conda Canary program.

00:42:57.080 --> 00:43:00.060
So just like Chrome has a Canary program, I kind of ripped off the title.

00:43:00.060 --> 00:43:01.520
Plus, there's some alliteration.

00:43:01.520 --> 00:43:02.360
So Conda Canary.

00:43:02.360 --> 00:43:07.960
And you just add a Conda config, add channels, Conda Canary.

00:43:07.960 --> 00:43:09.820
You add the Conda Canary channel.

00:43:09.820 --> 00:43:10.820
Check it out.

00:43:10.820 --> 00:43:11.680
Use it.

00:43:11.680 --> 00:43:13.420
Let us know what you think of it.

00:43:13.420 --> 00:43:14.640
The changelog is extensive.

00:43:14.640 --> 00:43:20.040
And we'll be releasing it, general availability, probably on the last day of 2016.

00:43:20.400 --> 00:43:21.020
Oh, perfect.

00:43:21.020 --> 00:43:22.000
A nice New Year's gift.

00:43:22.000 --> 00:43:22.460
That's awesome.

00:43:22.460 --> 00:43:23.540
So yeah, people check that out.

00:43:23.540 --> 00:43:24.120
Anything else?

00:43:24.120 --> 00:43:31.520
I'd say if anybody is missing a package on Conda that is in PyPy and it would make your life easier,

00:43:31.520 --> 00:43:34.740
then please submit a recipe to Staged Recipes.

00:43:35.580 --> 00:43:41.120
And the main thing I would emphasize about Conda Forge is the really incredible thing about it is the community.

00:43:41.120 --> 00:43:45.380
There is such an amazing pool of expertise there on how to build software.

00:43:45.380 --> 00:43:47.020
And I've learned a lot.

00:43:47.020 --> 00:43:50.540
And anybody stands to learn a lot just by getting involved there.

00:43:50.540 --> 00:43:51.200
Okay, excellent.

00:43:51.200 --> 00:43:52.320
Yeah, absolutely.

00:43:52.320 --> 00:43:54.900
Easy to contribute and please do so.

00:43:54.900 --> 00:43:58.140
Any of you guys going to be at Anaconda Con in Austin in February?

00:43:58.140 --> 00:43:58.820
Oh, yes.

00:43:58.820 --> 00:43:59.300
Kale?

00:43:59.300 --> 00:44:00.120
We'll be around.

00:44:00.120 --> 00:44:00.920
Yep, absolutely.

00:44:00.920 --> 00:44:01.400
Nice.

00:44:01.400 --> 00:44:03.620
Phil, are you traveling like halfway around the world?

00:44:03.840 --> 00:44:06.600
Unfortunately, I won't be there for Anaconda Con this year.

00:44:06.600 --> 00:44:06.940
All right.

00:44:06.940 --> 00:44:10.900
So if people make it, go say hi to Michael and Kale and we can tweet.

00:44:10.900 --> 00:44:11.640
Tweet at Phil.

00:44:11.640 --> 00:44:12.420
All right, guys.

00:44:12.420 --> 00:44:13.540
Thanks so much for being on the show.

00:44:13.540 --> 00:44:14.940
It's been great to talk about Conda.

00:44:14.940 --> 00:44:18.040
I think it's a really great project overall that you guys are working on.

00:44:18.040 --> 00:44:18.780
So thanks for that.

00:44:18.780 --> 00:44:19.420
Thank you, Michael.

00:44:19.420 --> 00:44:20.180
Thank you.

00:44:20.180 --> 00:44:24.440
This has been another episode of Talk Python To Me.

00:44:24.440 --> 00:44:29.560
Today's guests have been Phil Ellison, Kale Franz, and Michael Sarahan.

00:44:29.560 --> 00:44:34.380
And this episode has been sponsored by Continuum Analytics and MongoDB University.

00:44:34.380 --> 00:44:36.460
Thank you both for supporting the show.

00:44:36.460 --> 00:44:40.420
Whether you want to hear the keynote by Ryan Curran from Forrester Research,

00:44:40.420 --> 00:44:44.080
meet the guys behind Anaconda, or just mingle with high-end data scientists,

00:44:44.080 --> 00:44:47.940
you need to find your way to Austin, Texas for Anaconda Con this February.

00:44:47.940 --> 00:44:50.860
Start at talkpython.fm/acon.

00:44:51.300 --> 00:44:55.640
Get the skills you need to build your Python apps on top of the most successful

00:44:55.640 --> 00:44:58.780
and in-demand document database at MongoDB University.

00:44:58.780 --> 00:45:02.840
Take a free class by visiting talkpython.fm/mongo.

00:45:02.840 --> 00:45:05.820
Are you or a colleague trying to learn Python?

00:45:05.820 --> 00:45:10.480
Have you tried books and videos that just left you bored by covering topics point by point?

00:45:10.480 --> 00:45:13.040
Well, check out my online course, Python Jumpstart,

00:45:13.040 --> 00:45:16.500
by building 10 apps at talkpython.fm/course

00:45:16.500 --> 00:45:19.080
to experience a more engaging way to learn Python.

00:45:19.560 --> 00:45:22.080
And if you're looking for something a little more advanced,

00:45:22.080 --> 00:45:26.440
try my WritePythonic code course at talkpython.fm/pythonic.

00:45:26.440 --> 00:45:29.480
Be sure to subscribe to the show.

00:45:29.480 --> 00:45:31.700
Open your favorite podcatcher and search for Python.

00:45:31.700 --> 00:45:32.940
We should be right at the top.

00:45:32.940 --> 00:45:36.280
You can also find the iTunes feed at /itunes,

00:45:36.280 --> 00:45:38.320
Google Play feed at /play,

00:45:38.320 --> 00:45:42.260
and direct RSS feed at /rss on talkpython.fm.

00:45:42.260 --> 00:45:46.280
Our theme music is Developers, Developers, Developers by Corey Smith,

00:45:46.280 --> 00:45:47.340
who goes by Smix.

00:45:47.700 --> 00:45:50.360
Corey just recently started selling his tracks on iTunes,

00:45:50.360 --> 00:45:54.020
so I recommend you check it out at talkpython.fm/music.

00:45:54.020 --> 00:45:56.780
You can browse his tracks he has for sale on iTunes

00:45:56.780 --> 00:45:59.380
and listen to the full-length version of the theme song.

00:45:59.380 --> 00:46:01.460
This is your host, Michael Kennedy.

00:46:01.460 --> 00:46:02.740
Thanks so much for listening.

00:46:02.740 --> 00:46:03.920
I really appreciate it.

00:46:03.920 --> 00:46:06.080
Smix, let's get out of here.

00:46:10.080 --> 00:46:27.580
I'll see you next time.

00:46:27.580 --> 00:46:28.080
Bye.

00:46:28.080 --> 00:46:28.320
you

00:46:28.320 --> 00:46:30.380
you

