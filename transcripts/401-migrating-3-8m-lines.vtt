WEBVTT

00:00:00.001 --> 00:00:05.300
At some point, you've probably migrated an app from one framework or major runtime version to another.

00:00:05.300 --> 00:00:11.580
For example, Django to Flask, Python 2 to 3, or even Angular to Vue.js.

00:00:11.580 --> 00:00:13.500
This can be a big challenge.

00:00:13.500 --> 00:00:19.660
If you had hundreds of active devs and millions of lines of code, it's a huge challenge.

00:00:19.660 --> 00:00:27.900
We have Ben Barito from Yelp here to recount their story of moving 3.8 million lines of code from Python 2 to 3.

00:00:28.280 --> 00:00:30.260
But this is not just a 2 to 3 story.

00:00:30.260 --> 00:00:34.200
It has many lessons on how to migrate code in many situations.

00:00:34.200 --> 00:00:36.960
There are plenty of gems to take from his experience.

00:00:36.960 --> 00:00:43.380
This is Talk Python to Me, episode 401, recorded January 18, 2023.

00:00:56.560 --> 00:01:00.020
Welcome to Talk Python to Me, a weekly podcast on Python.

00:01:00.020 --> 00:01:01.760
This is your host, Michael Kennedy.

00:01:01.760 --> 00:01:09.240
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython, both on fosstodon.org.

00:01:09.240 --> 00:01:11.840
Be careful with impersonating accounts on other instances.

00:01:11.840 --> 00:01:12.800
There are many.

00:01:12.800 --> 00:01:17.860
Keep up with the show and listen to over 7 years of past episodes at talkpython.fm.

00:01:18.540 --> 00:01:21.880
We've started streaming most of our episodes live on YouTube.

00:01:21.880 --> 00:01:29.460
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:30.740 --> 00:01:33.180
This episode is brought to you by Cox Automotive.

00:01:33.180 --> 00:01:39.060
Join their team and use your technical skills to transform the way the world buys, sells, and owns cars.

00:01:39.060 --> 00:01:42.940
Find an exciting position that's right for you at talkpython.fm/cox.

00:01:42.940 --> 00:01:45.960
And it's also brought to you by User Interviews.

00:01:45.960 --> 00:01:51.060
Earn extra income for sharing your software development opinion at User Interviews.

00:01:51.200 --> 00:01:55.720
Head over to talkpython.fm/userinterviews to participate today.

00:01:55.720 --> 00:01:58.100
Ben, welcome to Talk Python To Me.

00:01:58.100 --> 00:01:58.580
Thank you.

00:01:58.580 --> 00:02:00.020
Thank you so much for having me, Michael.

00:02:00.020 --> 00:02:05.040
We're going to talk a little bit of legacy code, a little bit of very, very large code bases,

00:02:05.040 --> 00:02:12.440
and how you might not have to permanently live in the past, which I think would be really welcome to a lot of people.

00:02:12.440 --> 00:02:17.420
I just talked a little bit about this before I hit record, but even though your topic is specifically

00:02:17.420 --> 00:02:23.540
how the story of move from Python 2 to 3 and this, like, making your whole code base modern,

00:02:23.540 --> 00:02:29.720
I do think that this idea of how do I move from one code base to another code base is super relevant to lots of folks

00:02:29.720 --> 00:02:36.080
who might not be going from Python 2 to 3, but maybe from Flask to FastAPI or vice versa, or those types of things.

00:02:36.080 --> 00:02:42.920
So I think the techniques that you're going to talk about here are more broadly applicable than just a 2 to 3 migration.

00:02:42.920 --> 00:02:49.380
And it's really cool how you all migrated 3.8 million lines of code without interrupting development.

00:02:49.380 --> 00:02:50.060
That's kind of nuts.

00:02:50.060 --> 00:02:52.960
Yeah, I did it, and it still seems ridiculous.

00:02:52.960 --> 00:02:55.060
You lived it, and it seems like a dream. Amazing.

00:02:55.060 --> 00:02:57.360
Before we get to all that, though, let's start with your story.

00:02:57.360 --> 00:02:59.260
How did you get into programming and Python?

00:02:59.260 --> 00:03:01.480
Took a job at Yelp. Yelp was a Python shop.

00:03:01.620 --> 00:03:06.080
Before that, I had a couple internships, and I went to Georgia Tech, and I mostly did Java.

00:03:06.080 --> 00:03:08.620
So it was sort of a new experience for me.

00:03:08.620 --> 00:03:12.680
You know, Python is one of those, like, beginning languages that everyone loves to throw around.

00:03:12.680 --> 00:03:21.960
So I had done, you know, I dabbled in a little bit, but when I first started really getting, like, deep into the language when I started it at Yelp,

00:03:22.140 --> 00:03:28.560
and I've definitely made it, it's sort of become, like, I've become sort of a local expert on it.

00:03:28.560 --> 00:03:34.940
So I've been able to build up a lot of knowledge about, like, you know, a lot of weird edge cases and, you know, stuff like that.

00:03:34.940 --> 00:03:36.360
You may be familiar with it.

00:03:36.360 --> 00:03:39.360
There's a t-shirt that's kind of a joke, a meme.

00:03:39.360 --> 00:03:40.620
It says, I learned Python.

00:03:40.620 --> 00:03:41.440
It was a great weekend.

00:03:41.440 --> 00:03:41.680
Yeah.

00:03:42.460 --> 00:03:46.860
And yet, I've been doing Python for many years, and I'm still learning new stuff.

00:03:46.860 --> 00:03:50.580
Even today, I learned some interesting new Python things.

00:03:50.580 --> 00:03:51.680
So which is it?

00:03:51.680 --> 00:03:54.660
Do you learn it in a day, or is it, like, this deep journey?

00:03:54.660 --> 00:03:59.260
I think most programming languages have some amount of, you know, width and depth.

00:03:59.260 --> 00:04:04.780
I think, you know, Python definitely has the advantage of being, you know, a relatively straightforward language.

00:04:04.780 --> 00:04:11.560
One of the nice things, obviously, is that, like, instead of using a lot of weird keywords, it has, like, you know, words.

00:04:11.940 --> 00:04:13.840
Like, you know, instead of being, like, oh.

00:04:13.840 --> 00:04:15.700
Like, or a pipe.

00:04:15.700 --> 00:04:18.820
Yeah, or, yeah, or instead of double pipe and stuff like that.

00:04:18.820 --> 00:04:21.800
Like, those are the things that I think definitely help people.

00:04:21.800 --> 00:04:27.300
Personally, you know, me coming into it, that wasn't, like, as big of a deal for me because, like, I was already familiar with all that stuff.

00:04:27.300 --> 00:04:27.700
But, like.

00:04:27.700 --> 00:04:36.600
You're coming from a very symbol-heavy world of Java, which is not as symbol-heavy as C++, but it's got a lot of abstractions in what it builds, for sure.

00:04:36.600 --> 00:04:36.960
Yeah.

00:04:36.960 --> 00:04:40.240
I will say, like, I think there are certain things that Python does.

00:04:40.700 --> 00:04:44.360
I will say Python is not, like, a perfect language by any stretch of the imagination.

00:04:44.360 --> 00:04:53.600
But I will say one thing about Python that I think is really cool is it did, sort of, before many other languages, managed to integrate a lot of, like, functional paradigms.

00:04:53.600 --> 00:05:02.020
Like, list comprehensions or comprehensions in general are, I think, one of those features where it's just, like, this doesn't exist in a lot of other, sort of, more popular languages.

00:05:02.020 --> 00:05:02.520
Yeah.

00:05:02.520 --> 00:05:08.420
And they're really, really fluent and powerful in a way that, like, you kind of miss when you don't have it, right?

00:05:08.680 --> 00:05:11.680
And so, like, I think that's something that's really cool about Python.

00:05:11.680 --> 00:05:20.220
But Python itself, you know, being a language with the legacy that it has, you know, I mean, we're going to be talking about the two to three differences which have their own nuances to them.

00:05:20.420 --> 00:05:22.920
But, like, it's always going to have some weirdnesses to it.

00:05:22.920 --> 00:05:29.820
And some of those things are, like, just like, oh, someone made a decision, you know, 30 years ago that, like, still kind of reverberates today.

00:05:29.980 --> 00:05:38.640
And so that means that, like, it has this depth to it, you know, you have to really learn the depth in order to fully understand all of the problems that exist.

00:05:38.640 --> 00:05:44.040
Like, dealing with not necessarily problems with the language, but, like, you know, when you're building software, you run into problems that you have to solve.

00:05:44.040 --> 00:05:44.400
Right.

00:05:44.400 --> 00:05:50.820
And so that's, like, the main, I think that's true of all languages to an extent, especially, you know, popular ones and older ones.

00:05:51.260 --> 00:06:02.780
But, yeah, I do think that Python, more than a lot of languages, really is able to straddle the line of, like, being like, oh, it's approachable, but also you can do a lot of, you know, really interesting and powerful stuff with it.

00:06:02.780 --> 00:06:04.260
Yeah, you compare that with, like, Java.

00:06:04.260 --> 00:06:06.820
Java, you've got to understand functions.

00:06:06.820 --> 00:06:13.820
You've got to understand classes, possibly namespaces, like, just to write the first line of code.

00:06:13.820 --> 00:06:18.620
Whereas Python, you can work with it for, like, you know what, this is really clumsy to repeat this.

00:06:18.620 --> 00:06:20.220
Maybe I'll learn what a function is.

00:06:20.280 --> 00:06:21.200
And then I can start using that.

00:06:21.200 --> 00:06:22.220
But you don't know what a class is.

00:06:22.220 --> 00:06:22.940
You don't care about it.

00:06:22.940 --> 00:06:30.520
You kind of, like, slowly layer on the stuff as you need it, rather than you've got to jump in and go with it all at once.

00:06:30.520 --> 00:06:31.160
Yeah, for sure.

00:06:31.160 --> 00:06:31.400
Yeah.

00:06:31.400 --> 00:06:31.920
Interesting.

00:06:31.920 --> 00:06:33.320
So you're still at Yelp?

00:06:33.320 --> 00:06:33.880
Yes.

00:06:33.880 --> 00:06:34.620
Yeah.

00:06:34.620 --> 00:06:38.600
I'm in our, in a conference room in our San Francisco office right now.

00:06:38.600 --> 00:06:38.960
Excellent.

00:06:38.960 --> 00:06:40.060
And what are you doing there?

00:06:40.060 --> 00:06:42.200
So I work on a team that's called Core Services.

00:06:42.200 --> 00:06:50.200
Our team is responsible for a lot of infrastructure, mostly Python-focused, though not exclusively.

00:06:50.200 --> 00:06:54.740
We do a lot of our sort of, like, internal Python infrastructure.

00:06:54.740 --> 00:07:00.120
So, you know, we'll be responsible for making sure that we can upgrade to new Python versions.

00:07:00.120 --> 00:07:02.400
We've got, we own our internal PyPI.

00:07:02.400 --> 00:07:15.820
We recently, this is a cool thing that has happened since my talk, so I didn't mention it, is we recently built a system to automatically import certain packages from a public PyPI.

00:07:16.280 --> 00:07:18.000
And that has saved us some headaches.

00:07:18.000 --> 00:07:24.140
And then we own some other stuff, like, you know, we've dealt a lot with sort of the general service contract at Yelp.

00:07:24.140 --> 00:07:26.960
So, like, being like, okay, what, what does it mean to be a service?

00:07:26.960 --> 00:07:28.620
How do you, how do you be a good citizen there?

00:07:29.080 --> 00:07:36.220
And a lot of other things, like, testing tools, a lot of, like, sort of, like, oh, I need to test against multiple services.

00:07:36.220 --> 00:07:42.260
We have a testing tool that, like, automates a lot of the steps to, like, sort of get those all connected together so you can test against them.

00:07:42.260 --> 00:07:45.640
Yeah, that sounds like a really fun set of task you're doing there.

00:07:45.640 --> 00:07:50.440
So you said you have an internal, we're going to dive into code and stuff, all this whole migration.

00:07:50.440 --> 00:07:55.400
But, you know, kind of sidebar, like you said, you have this internal private PyPI server.

00:07:55.400 --> 00:07:57.760
What's the details around that?

00:07:57.760 --> 00:08:04.680
Like, how, obviously, you're whitelisting things that can be brought inside saying, we're going to put those onto our server.

00:08:04.680 --> 00:08:08.700
And you can, like, request, and you can choose when to let the new one in and so on.

00:08:08.700 --> 00:08:12.080
But, you know, what's the, what's the software and how do you put that together?

00:08:12.080 --> 00:08:12.400
Right.

00:08:12.400 --> 00:08:19.860
A number of years ago now, we switched to a piece of software that I don't think is used pretty much anywhere else,

00:08:19.860 --> 00:08:24.320
which was built by one of my teammates who named Chris Keel.

00:08:24.320 --> 00:08:30.540
So Chris Keel built essentially a PyPI implementation called Dumb PyPI.

00:08:30.540 --> 00:08:39.520
It's called Dumb PyPI because unlike some other PyPI servers, the way that it works is you just sort of give it a list of distributions

00:08:39.520 --> 00:08:42.240
and then it just generates all of the HTML pages.

00:08:42.240 --> 00:08:48.360
So instead of, instead of being like, oh, I'm a server and I'm like, you know, going to handle this request and blah, blah, blah,

00:08:48.440 --> 00:08:51.900
and like run some code, it's literally like, okay, here are the HTML pages.

00:08:51.900 --> 00:08:56.940
And I see, it's like a, like a static site generator for PyPI backend.

00:08:56.940 --> 00:08:57.760
Yeah.

00:08:57.760 --> 00:08:58.160
Yeah.

00:08:58.160 --> 00:09:03.300
And we've been using that for a really long time and maybe like four or five years now.

00:09:03.300 --> 00:09:06.000
And it's, you know, it's serviced pretty well.

00:09:06.000 --> 00:09:11.580
It's really nice in my opinion, because it's the only service that my team actually owns.

00:09:11.580 --> 00:09:13.320
So it, and it never pages us.

00:09:13.320 --> 00:09:13.980
So that's great.

00:09:13.980 --> 00:09:15.280
I love that it never pages us.

00:09:15.280 --> 00:09:16.680
It can't go down.

00:09:16.680 --> 00:09:17.220
Yeah.

00:09:17.220 --> 00:09:18.300
Not really.

00:09:18.300 --> 00:09:22.360
Well, it can't, it would be good that if it goes down, but also it doesn't.

00:09:22.360 --> 00:09:23.480
That's the great part.

00:09:23.480 --> 00:09:24.560
It just, it just doesn't.

00:09:24.560 --> 00:09:26.500
So Chris's, Chris's software works great.

00:09:26.500 --> 00:09:26.800
Yeah.

00:09:26.800 --> 00:09:28.040
That's a really cool idea.

00:09:28.040 --> 00:09:33.220
And so you tell it certain versions or, or do you just limit it to the libraries and

00:09:33.220 --> 00:09:36.060
let it pick the latest versions of whatever's on real PyPI?

00:09:36.060 --> 00:09:42.340
So the way that we do it is we have a whole system, which like imports packages.

00:09:42.340 --> 00:09:44.920
We actually rebuild all of our wheels.

00:09:44.920 --> 00:09:48.280
It's kind of for kind of hard to explain reasons.

00:09:48.280 --> 00:09:52.500
So what we'll do is we'll like, someone will say, Hey, I want this version of this package,

00:09:52.500 --> 00:09:54.300
or maybe they'll just say, Hey, I want this package.

00:09:54.300 --> 00:09:59.500
And then we'll just pull down the newest one at the time and we'll do some like security

00:09:59.500 --> 00:10:00.140
bedding on it.

00:10:00.140 --> 00:10:03.540
So we have some like automated security stuff and basically just make sure that it's like

00:10:03.540 --> 00:10:04.580
not malicious.

00:10:04.580 --> 00:10:12.040
And then we build the wheels and then we upload those to the S3 bucket that like backs our PyPI.

00:10:12.040 --> 00:10:12.480
Right.

00:10:12.480 --> 00:10:19.020
So we just do that in terms of like how we decided it's basically just sort of like, we, you know,

00:10:19.020 --> 00:10:21.320
make sure, you know, we do the security check.

00:10:21.320 --> 00:10:23.000
We do like, there's a few other things.

00:10:23.120 --> 00:10:24.460
Like we make sure we have all the dependencies.

00:10:24.460 --> 00:10:30.100
We make sure we have a, that it has like a license that we're okay with, with using internally.

00:10:30.100 --> 00:10:32.720
And so all of those things are checked.

00:10:32.720 --> 00:10:37.000
And then we have, as I mentioned, we have this sort of like automated import system.

00:10:37.000 --> 00:10:40.460
So like certain packages, we'll just, we'll try to download them.

00:10:40.460 --> 00:10:43.800
They might fail, you know, one of those checks and then we won't upload it.

00:10:43.800 --> 00:10:45.960
But like, you know, so we'll just like import it.

00:10:45.960 --> 00:10:46.960
We'll try to import it.

00:10:46.960 --> 00:10:49.780
And so certain packages, we'll try to get the newest one.

00:10:49.780 --> 00:10:53.680
Some packages, you know, how we haven't set that up for one reason or another.

00:10:53.680 --> 00:10:56.700
Some packages, there's certain packages that are just like difficult to build.

00:10:56.700 --> 00:10:58.660
And so we avoid importing them.

00:10:58.660 --> 00:10:58.960
Right.

00:10:58.960 --> 00:11:00.840
You're just, we got this one working.

00:11:00.840 --> 00:11:01.660
It's fine.

00:11:01.660 --> 00:11:02.600
Yes.

00:11:02.600 --> 00:11:03.200
Yes.

00:11:03.440 --> 00:11:05.360
And so like some are difficult to build.

00:11:05.360 --> 00:11:08.220
Some are just like, oh, this is a package we've never used before.

00:11:08.220 --> 00:11:10.180
So we just like, don't use it.

00:11:10.180 --> 00:11:10.380
Yeah.

00:11:10.380 --> 00:11:11.660
So, or we don't have it.

00:11:11.660 --> 00:11:11.820
Yeah.

00:11:11.820 --> 00:11:16.260
You talked about how many dependencies your projects have and stuff and that'll be fun.

00:11:16.260 --> 00:11:20.260
But let's maybe take a step back and just talk about, you know, Python at Yelp.

00:11:20.260 --> 00:11:25.320
You've, this main project that you have, it was running on Python too.

00:11:25.320 --> 00:11:28.260
It's kind of obvious, but some of the reasons are obvious.

00:11:28.260 --> 00:11:28.760
Some are not.

00:11:28.760 --> 00:11:31.460
Like why did you care what version of Python it's on?

00:11:31.460 --> 00:11:32.100
That's a good question.

00:11:32.360 --> 00:11:37.260
I mean, I think the main reason was just sort of like we saw the writing on the wall,

00:11:37.260 --> 00:11:39.780
the running on the wall was the end of life or Python too.

00:11:39.780 --> 00:11:40.100
Right.

00:11:40.100 --> 00:11:43.520
And I think everyone else, we knew that other people were going to follow that.

00:11:43.520 --> 00:11:43.760
Right.

00:11:43.760 --> 00:11:49.060
There was, I remember in 2019, when I was looking into this, there was a thing, I think it was

00:11:49.060 --> 00:11:53.940
called like the Python pledge or something like that, where basically like packages would

00:11:53.940 --> 00:11:57.660
like open source packages would say like, Hey, we're going to drop Python three, you know,

00:11:57.660 --> 00:12:02.260
after end of life at some like, you know, either the day of or, or a few months later,

00:12:02.280 --> 00:12:03.000
or something like that.

00:12:03.000 --> 00:12:06.300
And so we were sort of looking at that and being like, well, we use some of those packages,

00:12:06.300 --> 00:12:09.060
you know, and eventually we might want to upgrade them.

00:12:09.060 --> 00:12:09.320
Yeah.

00:12:09.320 --> 00:12:12.540
You're about to get frozen in time around mid 2020.

00:12:12.540 --> 00:12:15.880
So you're, you maybe don't want that.

00:12:15.880 --> 00:12:21.700
By the time that I did my, my talk, I remember, I think it was early 2021 or something, you know,

00:12:21.700 --> 00:12:23.560
pip had dropped support for Python too.

00:12:23.940 --> 00:12:27.380
So that was like one of those things where it was just sort of like, yeah, there's not,

00:12:27.380 --> 00:12:32.960
there's not a realistic ecosystem in which you are able to use like open source and upgrade

00:12:32.960 --> 00:12:37.400
your stuff, you know, for security patches or whatever, you know, I want this new feature.

00:12:37.400 --> 00:12:38.300
Oh, sorry.

00:12:38.300 --> 00:12:40.420
That's Python three only, you know, kind of thing.

00:12:40.660 --> 00:12:42.200
So that was like the main motivation.

00:12:42.200 --> 00:12:42.660
Right.

00:12:42.780 --> 00:12:47.520
And then I think some secondary stuff was just sort of like, as you build, you know,

00:12:47.520 --> 00:12:52.060
as time marches on and like people stop being familiar with like Python two and it has some

00:12:52.060 --> 00:12:56.220
quirks, you know, for Python three, you definitely have the problem of like, okay, now you have

00:12:56.220 --> 00:12:59.520
to like, if you're hiring people and they're working on Python two, you have to train them

00:12:59.520 --> 00:13:04.120
up on those quirks in a way that like you wouldn't necessarily have to do if you're using a modern

00:13:04.120 --> 00:13:05.940
language that other places are using.

00:13:06.180 --> 00:13:11.660
So those are the, I think the main motivations personally, I think I had like a small motivation

00:13:11.660 --> 00:13:16.160
myself, which was just sort of like, I hate seeing things like be left behind like this,

00:13:16.160 --> 00:13:16.560
you know?

00:13:16.560 --> 00:13:17.580
Yeah, sure.

00:13:17.580 --> 00:13:21.620
Very emotional thing, but yeah, that's part of the reason I pushed for it.

00:13:21.620 --> 00:13:22.960
Well, there's the training thing.

00:13:22.960 --> 00:13:28.440
I mean, there's obviously the, just the infrastructure stopping, stopping the updates, but there's the

00:13:28.440 --> 00:13:33.480
training side of helping people who are new come, but there's also the, how do you hire

00:13:33.480 --> 00:13:34.920
the very best engineers?

00:13:35.100 --> 00:13:40.700
It's really hard to get an amazing Python engineer to come and say, you're going to do

00:13:40.700 --> 00:13:42.940
amazing work from 2008.

00:13:42.940 --> 00:13:43.800
You're going to love it.

00:13:43.800 --> 00:13:44.240
You know what I mean?

00:13:44.240 --> 00:13:44.420
Right?

00:13:44.420 --> 00:13:48.740
Like if they're working on some new package that they're inspired about, instead of trying

00:13:48.740 --> 00:13:52.380
to bring that in and like, you know, help make that better and also boost what you're

00:13:52.380 --> 00:13:52.620
doing.

00:13:52.620 --> 00:13:55.140
It's like, well, we can't use that because that you only don't Python three.

00:13:55.140 --> 00:13:57.480
Like, well, of course I created it this, you know, two years ago.

00:13:57.480 --> 00:13:59.180
Why wouldn't it be Python three only?

00:13:59.180 --> 00:14:01.400
And there's a lot of knock on effects like that, right?

00:14:01.400 --> 00:14:01.660
Yeah.

00:14:01.800 --> 00:14:06.400
Did you see the performance stuff from 2.11 or even from 2.11?

00:14:06.400 --> 00:14:07.400
Sorry, 2.11.

00:14:07.400 --> 00:14:08.940
3.11 or even 3.10?

00:14:08.940 --> 00:14:14.900
Where, where you're like, you know, there might actually be fewer servers as well if we do this?

00:14:14.960 --> 00:14:18.380
That's definitely something that we are, you know, we want to do.

00:14:18.380 --> 00:14:22.780
That specific issue is something that we're, we're sort of, we're trying to move towards

00:14:22.780 --> 00:14:25.660
being able to use those versions of Python right now.

00:14:25.660 --> 00:14:30.700
It's always a process just because of various, you know, internal things, but it's definitely

00:14:30.700 --> 00:14:32.960
something that has been, that has been talked about as well.

00:14:32.960 --> 00:14:36.540
Like, yeah, if we could use new versions of Python, maybe things will be faster.

00:14:36.540 --> 00:14:38.200
Things will be more efficient.

00:14:38.420 --> 00:14:42.400
Trying not to spend too much money is definitely a thing that we, we think about.

00:14:42.400 --> 00:14:43.920
So that's definitely exciting.

00:14:43.920 --> 00:14:44.280
Yeah.

00:14:44.280 --> 00:14:49.140
When I did the episode on 3.11, we talked a lot about the performance there and it's, it's

00:14:49.140 --> 00:14:49.480
impressive.

00:14:49.480 --> 00:14:51.600
It's, you know, 40, 50, 60%.

00:14:51.600 --> 00:14:53.520
And I won't steal your thunder.

00:14:53.520 --> 00:14:58.720
I know at the end, you've got some nice performance boosts that you got even from the changes that

00:14:58.720 --> 00:14:59.080
you made.

00:14:59.160 --> 00:15:02.760
But there was somebody in the audience that pointed out, like, not only is this faster,

00:15:02.760 --> 00:15:04.420
which is nice for us, right?

00:15:04.420 --> 00:15:06.820
It's nice that we have to pay less for servers.

00:15:06.820 --> 00:15:11.420
It's nice that our code runs a little bit faster, but it's also good for the planet, right?

00:15:11.420 --> 00:15:18.520
If we just all start using newer, faster foundations, then necessarily we just use less energy to

00:15:18.520 --> 00:15:19.940
do the same thing that we're already doing, right?

00:15:19.940 --> 00:15:22.080
Yeah, that's definitely, I like that.

00:15:22.080 --> 00:15:27.600
This portion of Talk Python Nemy is brought to you by Cox Automotive.

00:15:27.600 --> 00:15:33.860
With brands like Kelly Blue Book, AutoTrader, Dealer.com, and more, Cox Automotive flips

00:15:33.860 --> 00:15:38.080
the script on how we buy, sell, own, and use our cars.

00:15:38.080 --> 00:15:44.360
And now the team at Cox Automotive is looking for software engineers, data scientists, scrum

00:15:44.360 --> 00:15:48.880
masters, and other tech experts to help create meaningful change in the industry.

00:15:48.880 --> 00:15:54.280
Do you want to be part of a collaborative workplace that values your time and work-life balance?

00:15:54.280 --> 00:15:56.600
Consider joining Cox Automotive.

00:15:56.840 --> 00:16:00.460
Visit talkpython.fm/cox today.

00:16:00.460 --> 00:16:03.600
Thank you to Cox Automotive for sponsoring the show.

00:16:03.600 --> 00:16:06.660
Let's talk about Python at Yelp.

00:16:06.660 --> 00:16:11.700
So you've got this repo, this big project called Yelp Main.

00:16:11.700 --> 00:16:12.500
Let's start there.

00:16:12.500 --> 00:16:12.880
Sure.

00:16:12.880 --> 00:16:15.480
Yelp Main is what it sounds like.

00:16:15.480 --> 00:16:18.060
It is sort of the original repo at Yelp.

00:16:18.280 --> 00:16:20.640
That's when you're a startup in 2004.

00:16:20.640 --> 00:16:23.440
You kind of just make a repo, right?

00:16:23.440 --> 00:16:24.820
And it's your web app.

00:16:24.820 --> 00:16:26.560
You probably made a Subversion repo.

00:16:26.560 --> 00:16:29.140
Because you didn't know that CVS stuff.

00:16:29.140 --> 00:16:30.020
We're doing Subversion.

00:16:30.020 --> 00:16:33.540
I don't remember when we switched from Subversion.

00:16:33.540 --> 00:16:35.120
But it was Subversion.

00:16:35.280 --> 00:16:37.680
I don't know if it was before Subversion.

00:16:37.680 --> 00:16:40.320
I don't know if we actually started out in Subversion.

00:16:40.320 --> 00:16:41.000
Okay.

00:16:41.000 --> 00:16:42.900
Because I didn't start until 2014.

00:16:42.900 --> 00:16:43.060
Sure.

00:16:43.360 --> 00:16:47.080
But yeah, it's definitely Subversion was, I know there was some old Subversion stuff.

00:16:47.080 --> 00:16:49.500
But so you have this one, you know, sort of web app.

00:16:49.500 --> 00:16:56.180
And the web app is a server that serves, that originally served everything.

00:16:56.180 --> 00:16:58.040
So, you know, there's a bunch of stuff.

00:16:58.040 --> 00:17:01.340
Like, you know, you can sort of think of as like Yelp.com, right?

00:17:01.340 --> 00:17:07.160
Like, if you go to www.yelp.com, then you're looking at what you think of as Yelp, right?

00:17:07.160 --> 00:17:09.280
It's like, oh, I can search for businesses.

00:17:09.280 --> 00:17:10.480
I can look at their reviews.

00:17:10.480 --> 00:17:12.880
I can write my own reviews, that kind of stuff.

00:17:12.880 --> 00:17:14.880
So it's that, but it's also other stuff.

00:17:14.880 --> 00:17:17.000
It's also our business owner site.

00:17:17.000 --> 00:17:21.680
So biz.yelp.com, which is where business owners, like, look at their own businesses and, like,

00:17:21.680 --> 00:17:25.100
are able to see the metrics and, like, you know, buy ads and stuff like that.

00:17:25.100 --> 00:17:29.760
There's our admin site, which is, you know, where a lot of anybody,

00:17:29.760 --> 00:17:34.560
we have our sort of user operations people whose job is at least partially to do some moderation

00:17:34.560 --> 00:17:35.740
and stuff like that.

00:17:35.740 --> 00:17:37.660
So, like, we need to be able to have those tools.

00:17:37.660 --> 00:17:42.480
And then there's also what we call internal API.

00:17:42.480 --> 00:17:49.200
And internal API is a way for internal stuff to get the data that's in Yelp name.

00:17:49.200 --> 00:17:51.220
So that's what that is.

00:17:51.220 --> 00:17:53.360
And that's like its own separate sort of site.

00:17:53.360 --> 00:17:55.440
And, but these are all in the same repo.

00:17:55.440 --> 00:17:57.080
They all run in the same process.

00:17:57.080 --> 00:17:58.620
That's, and yeah, sorry.

00:17:58.620 --> 00:18:03.480
No, I was just going to ask, is this kind of the, the monorepo style or it's, it's truly

00:18:03.480 --> 00:18:06.320
a monolith in the sense that it's kind of all the same app.

00:18:06.320 --> 00:18:07.480
It's truly a monolith.

00:18:07.480 --> 00:18:12.460
There is some amount of stuff where it's like, oh, we have like different containers running

00:18:12.460 --> 00:18:13.760
like different entry points.

00:18:13.760 --> 00:18:16.560
But like the code is all kind of tangled up together.

00:18:16.560 --> 00:18:22.060
So there's not really a meaningful delineation between different components in a way that you

00:18:22.060 --> 00:18:24.380
could really separate them out in any meaningful way.

00:18:24.460 --> 00:18:29.260
So like my understanding of like what I would define as a monorepo, I wouldn't really call

00:18:29.260 --> 00:18:29.600
it that.

00:18:29.600 --> 00:18:32.480
I would just call it, I would call it just a large app.

00:18:32.820 --> 00:18:33.100
Yeah.

00:18:33.100 --> 00:18:35.320
It's a huge, huge, huge app, huge repo.

00:18:35.320 --> 00:18:35.800
Yeah.

00:18:35.800 --> 00:18:36.420
Yeah.

00:18:36.420 --> 00:18:36.740
Okay.

00:18:36.740 --> 00:18:42.680
So in your talk, you said that you have six different sites with 2000 different endpoints,

00:18:42.680 --> 00:18:44.480
which it's a lot.

00:18:44.480 --> 00:18:49.720
I don't think it's completely excessive or anything like 2000 URL endpoints for, for all

00:18:49.720 --> 00:18:52.520
those different services and like all those different admin apps.

00:18:52.520 --> 00:18:54.680
So it seems it's a lot, but it's not insane.

00:18:54.680 --> 00:18:57.480
And then you have these background batch services.

00:18:57.480 --> 00:18:59.460
What story of those?

00:18:59.460 --> 00:19:01.640
It's just sort of anything that you need done.

00:19:01.640 --> 00:19:04.660
As I said, this was just sort of like, this is the one repo, right?

00:19:04.660 --> 00:19:09.680
And so there's a lot of things that you want done that aren't necessarily done in the context

00:19:09.680 --> 00:19:12.740
of a web request or don't make sense to do synchronously.

00:19:12.960 --> 00:19:17.980
So a lot of that is just sort of like, okay, you know, I need to like do this like really

00:19:17.980 --> 00:19:19.860
complex report or something, right?

00:19:19.860 --> 00:19:23.640
You know, I want to get some metrics that like involve collating a bunch of data, doing a

00:19:23.640 --> 00:19:25.300
bunch of joins against a bunch of tables.

00:19:25.300 --> 00:19:26.000
Okay.

00:19:26.000 --> 00:19:28.320
Well, I'm not going to have just like a web request do that.

00:19:28.320 --> 00:19:30.500
I'm going to put that in like a separate process.

00:19:30.500 --> 00:19:36.100
And we originally, as you can imagine for that type of application, we just called them

00:19:36.100 --> 00:19:36.900
just batches.

00:19:36.900 --> 00:19:37.400
Yeah.

00:19:37.400 --> 00:19:39.420
Like a patch, a batch job, right?

00:19:39.420 --> 00:19:43.980
That name is stuck despite the fact that now batches don't necessarily do that type

00:19:43.980 --> 00:19:44.360
of work.

00:19:44.360 --> 00:19:46.900
They're just sort of anything that you want to do in the background.

00:19:46.900 --> 00:19:51.860
And that could be something like, oh, the first of the month we do our like ad billing,

00:19:51.860 --> 00:19:58.060
or we might have some process where it's just sort of like, oh, we want to like update this

00:19:58.060 --> 00:20:03.560
cache, you know, based on like data like stuff, but we don't want to do it inline in a web

00:20:03.560 --> 00:20:04.040
request.

00:20:04.040 --> 00:20:05.440
We can do it asynchronously.

00:20:05.440 --> 00:20:10.040
So it's really anything that is not in the context of a web request.

00:20:10.040 --> 00:20:15.620
I suspect most major apps, most companies have that kind of stuff too, right?

00:20:15.620 --> 00:20:16.500
They've got to.

00:20:16.500 --> 00:20:18.340
I mean, everyone has some version of it.

00:20:18.340 --> 00:20:22.740
Whether or not they do it exactly the way that we do it is a separate question, but I'm

00:20:22.740 --> 00:20:23.240
not really sure.

00:20:23.240 --> 00:20:26.860
But yeah, I think part of the story is, do you deploy them all out of the same code base?

00:20:26.860 --> 00:20:30.720
Or are they, you know, a bunch of different jobs and repos?

00:20:30.720 --> 00:20:32.000
Or how's that fit together?

00:20:32.000 --> 00:20:33.460
That's probably where the, it varies.

00:20:33.460 --> 00:20:33.900
Yeah.

00:20:33.900 --> 00:20:38.740
I mean, for us, we have, I mean, I said 800 batches and I was referring specifically to

00:20:38.740 --> 00:20:40.820
the batches that are still in the Yelp main repo.

00:20:40.820 --> 00:20:43.240
And like I said, all of these things are kind of tangled together.

00:20:43.240 --> 00:20:45.680
So it's not like, oh, you can just like pull a batch out.

00:20:45.680 --> 00:20:49.300
Like that's like talking about like, well, how do you get the data that it needs?

00:20:49.300 --> 00:20:51.340
And like, what does that look like?

00:20:51.340 --> 00:20:52.000
And blah, blah, blah.

00:20:52.000 --> 00:20:53.900
How does it get the data access layer?

00:20:53.900 --> 00:20:57.660
And how does it get a hold of the logging thing that's over here and all that kind of stuff?

00:20:57.660 --> 00:20:57.880
Right?

00:20:57.980 --> 00:20:58.260
Exactly.

00:20:58.260 --> 00:21:04.020
So like, so those 800 batches, but we also have tons and tons of batches that are in services.

00:21:04.020 --> 00:21:09.120
So they live in service repos and they run and they're, they're in totally separate code base.

00:21:09.120 --> 00:21:10.820
I don't know what that number is.

00:21:10.820 --> 00:21:11.920
I'd have to figure it out.

00:21:11.920 --> 00:21:12.140
Yeah.

00:21:12.140 --> 00:21:12.960
It's definitely a lot.

00:21:12.960 --> 00:21:16.380
It's probably, it's almost certainly more than that, than we have in Yelp main at this point.

00:21:16.380 --> 00:21:20.700
But that paradigm exists all over Yelp and not just in this repo.

00:21:20.700 --> 00:21:20.940
Yeah.

00:21:20.940 --> 00:21:25.180
Well, I think these are a lot of value to having that code together, right?

00:21:25.180 --> 00:21:29.780
If you break this out into a whole bunch of different repos, you've got dependency management,

00:21:29.780 --> 00:21:34.600
versioning, deployment, like there is some value to just saying like, just let it live together.

00:21:34.600 --> 00:21:35.820
We'll upgrade it together.

00:21:35.820 --> 00:21:40.920
But it, it does make for some striking headlines when you talk about how many lines of code got

00:21:40.920 --> 00:21:41.780
upgraded at once, right?

00:21:41.920 --> 00:21:42.060
Yeah.

00:21:42.060 --> 00:21:45.420
I mean, I think that when you're talking about like, why do we solve them all?

00:21:45.420 --> 00:21:49.900
The answer is mostly just because it's really hard to not have one.

00:21:49.900 --> 00:21:53.220
Once you have one, you have to do all the work to move it out.

00:21:53.220 --> 00:21:54.440
And there are disadvantages.

00:21:54.440 --> 00:21:58.660
Like you said, it's sort of like, okay, now, as soon as you have a new repo, it has its own

00:21:58.660 --> 00:22:00.680
set of dependencies that you have to keep up to date.

00:22:00.680 --> 00:22:04.040
And, you know, you have to do other sort of maintenance on it.

00:22:04.040 --> 00:22:09.080
Generally speaking, we consider that better though, still, because it's sort of like, it's always

00:22:09.080 --> 00:22:09.460
better.

00:22:09.700 --> 00:22:14.720
Like imagine if I'm in, in this giant monolith and I'm like, oh, I need to upgrade this package.

00:22:14.720 --> 00:22:17.620
And it's like, okay, well you want to do a major upgrade.

00:22:17.620 --> 00:22:20.340
And this package is imported in a thousand places.

00:22:20.920 --> 00:22:22.780
How you need to deal with that migration.

00:22:22.780 --> 00:22:28.100
Whereas if it's like, oh, I'm in my service and this, and I need to do this package upgrade

00:22:28.100 --> 00:22:29.980
and it's imported in 10 places.

00:22:29.980 --> 00:22:35.140
That's like an afternoon instead of like, you know, a quarter of a year or something.

00:22:35.140 --> 00:22:35.480
Right?

00:22:35.480 --> 00:22:35.740
Yeah.

00:22:36.000 --> 00:22:38.040
So there's definitely advantages to that.

00:22:38.040 --> 00:22:43.760
It does add, it's sort of like more work overall, but you can do it in a more granular way.

00:22:43.760 --> 00:22:47.460
So it allows you to unblock people faster, essentially.

00:22:47.700 --> 00:22:51.100
So like, we definitely want to move away from the monolith and we have been doing that.

00:22:51.100 --> 00:22:56.520
Like compared to when I started at Yelp, we have way, way less code that is important running

00:22:56.520 --> 00:22:57.040
in Yelp main.

00:22:57.040 --> 00:22:58.960
There is still a ton that's important in there.

00:22:59.040 --> 00:23:03.700
Like I mentioned in my talk, like almost inevitably someone has to like call into an internal

00:23:03.700 --> 00:23:05.600
API to get our, get data out of it.

00:23:05.600 --> 00:23:10.740
So that's something that like, we definitely want to fix at some point, but it is a process

00:23:10.740 --> 00:23:15.000
and that process is generally speaking, like we're getting to a point where like some people

00:23:15.000 --> 00:23:17.620
who work at Yelp don't really work in Yelp main anymore.

00:23:17.620 --> 00:23:20.840
Like they just don't have to deal with it, especially not on a day-to-day basis.

00:23:20.840 --> 00:23:21.160
Right.

00:23:21.160 --> 00:23:21.600
Sure.

00:23:21.600 --> 00:23:22.780
And you mentioned your talk.

00:23:22.780 --> 00:23:27.500
I don't know if I said this beginning, but you gave a talk at PyCon 2022, which is definitely

00:23:27.500 --> 00:23:30.920
it was a very popular one and highlights some of these things there as well.

00:23:30.920 --> 00:23:33.600
So I'll be sure to link to that so people can check it out.

00:23:33.600 --> 00:23:38.020
And you talk about people developing in Yelp main, some of them not, but there's still a

00:23:38.020 --> 00:23:38.820
lot happening there.

00:23:38.820 --> 00:23:44.200
You said 20 pushes a day, 800 simultaneous developers.

00:23:44.200 --> 00:23:47.260
And yeah, that's, that's no joke.

00:23:47.260 --> 00:23:49.040
That's a lot of traffic on a repo.

00:23:49.040 --> 00:23:49.420
Yeah.

00:23:49.420 --> 00:23:54.340
I think since I did that talk where we've been going, we've been trending down in terms of

00:23:54.340 --> 00:23:57.180
number of changes per day, but it would still probably close.

00:23:57.180 --> 00:24:01.220
Like somewhere in the eight, like 15 to 25 a day.

00:24:01.220 --> 00:24:06.480
So it's less like that's an appreciable percentage less, but it's still a lot of changes per day.

00:24:06.480 --> 00:24:07.680
Yeah.

00:24:07.680 --> 00:24:08.040
Yeah.

00:24:08.040 --> 00:24:11.660
And you also said you have 700 Python package dependencies.

00:24:11.660 --> 00:24:13.260
We talked about the private PyPI.

00:24:13.700 --> 00:24:18.200
So when you say you have 700 dependencies, that's if I go into the virtual environment and type,

00:24:18.200 --> 00:24:20.660
you know, pip list, I see 700 things.

00:24:20.660 --> 00:24:20.900
Yep.

00:24:20.900 --> 00:24:21.080
Okay.

00:24:21.080 --> 00:24:21.780
It's a lot.

00:24:21.780 --> 00:24:22.240
It's a lot.

00:24:22.240 --> 00:24:23.960
It was an ordeal dealing with me.

00:24:24.620 --> 00:24:28.460
Especially coming from a long time ago until present, right?

00:24:28.460 --> 00:24:31.720
In terms of code, code compatibility, right?

00:24:31.720 --> 00:24:33.340
Some of those things you depended on.

00:24:33.340 --> 00:24:37.280
Maybe their new versions have moved to Python 3, but maybe with breaking changes.

00:24:37.280 --> 00:24:40.600
Others, they might just not have a Python 3 version.

00:24:40.600 --> 00:24:40.960
Mm-hmm.

00:24:41.240 --> 00:24:42.160
And how'd you deal with that?

00:24:42.160 --> 00:24:47.020
There were basically, in terms of like open source stuff, there were basically like three

00:24:47.020 --> 00:24:48.060
ways that we dealt with that.

00:24:48.060 --> 00:24:53.400
So one is just like upgrade and like deal with whatever the upgrade entails.

00:24:53.940 --> 00:24:58.120
I don't think we really ran into any issues where we were like, oh no, we have to do this

00:24:58.120 --> 00:25:01.340
like massive breaking change, you know, migration.

00:25:01.340 --> 00:25:03.740
That wasn't really a problem that we ran into, thankfully.

00:25:03.740 --> 00:25:08.220
So a lot of those were just sort of like figuring out what packages need to be upgraded and just

00:25:08.220 --> 00:25:11.660
like sort of doing the upgrade, making sure that they test pass and that kind of stuff.

00:25:11.660 --> 00:25:12.740
So that wasn't too bad.

00:25:12.740 --> 00:25:17.800
The other one, which was a little bit more annoying was, like you said, some packages just

00:25:17.800 --> 00:25:22.520
stopped updating before they got Python 3 support.

00:25:23.040 --> 00:25:24.080
And we were relying on them.

00:25:24.080 --> 00:25:29.020
So we had to be like, okay, well, can we replace these with something that, you know, fixed?

00:25:29.020 --> 00:25:34.940
And there were a few examples of packages where it sort of stopped getting development.

00:25:34.940 --> 00:25:39.480
And then someone was like, oh, that I see where the problem, like that's a problem for me.

00:25:39.480 --> 00:25:40.400
So I'm going to fix that.

00:25:40.400 --> 00:25:44.180
And so luckily a lot of people had already done that work and they, there were like forks

00:25:44.180 --> 00:25:46.180
or sort of drop-in replacements.

00:25:46.180 --> 00:25:50.040
Sometimes not exactly drop-in replacements, but like, you know, close enough that we could

00:25:50.040 --> 00:25:52.360
like do, do the small amount of work that was needed.

00:25:52.520 --> 00:25:56.680
It's one of the advantages of being a little bit later to the party is let other people

00:25:56.680 --> 00:26:00.040
bump into those problems and maybe they fixed them for you, right?

00:26:00.040 --> 00:26:01.800
That probably happened most of the time, honestly.

00:26:01.800 --> 00:26:03.580
That was definitely a good chunk of the time.

00:26:03.580 --> 00:26:07.560
I couldn't tell you I'd have to like go back and like run the numbers on like what percentage

00:26:07.560 --> 00:26:08.240
of the time that was.

00:26:08.240 --> 00:26:11.480
But like, we definitely, yeah, there was definitely a good chunk of things where we're just sort

00:26:11.480 --> 00:26:13.720
of like, oh, someone already made the fork or whatever.

00:26:13.960 --> 00:26:14.920
And we can just use that.

00:26:14.920 --> 00:26:16.280
And that was, that was nice.

00:26:16.280 --> 00:26:17.640
It was okay.

00:26:17.640 --> 00:26:19.560
That's, that's, you know, that one checked off.

00:26:19.560 --> 00:26:25.400
And then the final sort of grouping was stuff where there, what that wasn't available.

00:26:25.400 --> 00:26:28.440
So it was like, oh, this package is Python 2 only.

00:26:28.440 --> 00:26:30.780
And no one ever made a replacement.

00:26:30.780 --> 00:26:32.440
So we need to deal with that.

00:26:32.440 --> 00:26:38.260
Luckily, we, none of those were in a position where we were completely unable to deal with

00:26:38.260 --> 00:26:38.440
it.

00:26:38.440 --> 00:26:42.260
Like we didn't run into anything where we were like, oh, this is just like, this is like

00:26:42.260 --> 00:26:42.760
a blocker.

00:26:42.760 --> 00:26:46.720
But there were things where we were like, oh, this thing needs to be replaced with something

00:26:46.720 --> 00:26:51.300
else that does something similar or maybe right after right away.

00:26:51.300 --> 00:26:55.620
Like very often we ran into code where it was like, oh, this is using this thing.

00:26:55.620 --> 00:26:59.880
And then you'd start looking into it and you're like, oh, actually this code is like this like

00:26:59.880 --> 00:27:04.000
branch or whatever that uses this package isn't actually used anymore.

00:27:04.000 --> 00:27:07.940
So we can just delete all that code and like not have to think about it.

00:27:07.940 --> 00:27:09.880
So that's, that's how we dealt with it.

00:27:09.880 --> 00:27:10.000
Yeah.

00:27:10.000 --> 00:27:11.400
That's a nice way to upgrade it.

00:27:11.400 --> 00:27:12.080
Let's just get rid of it.

00:27:12.080 --> 00:27:12.320
Yes.

00:27:12.320 --> 00:27:17.440
Were there any packages that you're out there that didn't have Python 3 support and

00:27:17.440 --> 00:27:22.620
you're like, yeah, really, we really depend on this one that you upgraded and contributed

00:27:22.620 --> 00:27:24.720
back or were you able to just move on?

00:27:24.720 --> 00:27:29.220
There was nothing that we ran into that was like an absolute blocker like that.

00:27:29.220 --> 00:27:35.780
So we didn't end up contributing anything in terms of open source other than there were

00:27:35.780 --> 00:27:40.900
some packages that are like on our GitHub, like the Yelp GitHub that we did do upgrades

00:27:40.900 --> 00:27:41.200
for.

00:27:41.200 --> 00:27:41.440
Sure.

00:27:41.880 --> 00:27:45.180
That was, you know, that was the only sort of open source work that we, I think we really

00:27:45.180 --> 00:27:45.960
ended up doing.

00:27:45.960 --> 00:27:46.480
Yeah.

00:27:46.480 --> 00:27:50.840
So luckily, I mean, I don't know if this is lucky or not, but it's definitely, it happened

00:27:50.840 --> 00:27:52.040
so that we didn't have to do that.

00:27:52.040 --> 00:27:52.260
Yeah.

00:27:52.260 --> 00:27:52.780
That's good.

00:27:52.780 --> 00:27:57.780
I mean, it would be nice if you ran across that and helped solve it for someone, but you

00:27:57.780 --> 00:27:58.740
don't have to even better.

00:27:58.740 --> 00:27:59.480
Testing.

00:27:59.480 --> 00:28:04.120
One of the challenges of, well, first it's good to have tests, but one of the challenges

00:28:04.120 --> 00:28:09.500
of these upgrades is you wanted to do this without disrupting development.

00:28:09.500 --> 00:28:11.860
You wanted to keep adding new features.

00:28:11.860 --> 00:28:18.020
You didn't want to say, hey, everyone, stop making any progress or bug fixes for six months

00:28:18.020 --> 00:28:19.680
and we're all just going to do this until we're done.

00:28:19.680 --> 00:28:20.140
Right.

00:28:20.140 --> 00:28:21.040
You wanted to keep it moving.

00:28:21.600 --> 00:28:25.980
But in order to do so, you've got to run the test because you're making wholesale changes

00:28:25.980 --> 00:28:27.480
to millions of lines of code.

00:28:27.480 --> 00:28:28.660
So that's pretty nerve wracking.

00:28:28.660 --> 00:28:28.960
Right.

00:28:28.960 --> 00:28:32.460
And you're swapping out its dependencies in big ways.

00:28:32.460 --> 00:28:35.780
And yet running tests, you all have a lot of tests and they take a while to run.

00:28:35.780 --> 00:28:35.980
Right.

00:28:35.980 --> 00:28:36.260
Yeah.

00:28:36.280 --> 00:28:40.180
We have about a hundred thousand tests in Yelp main, a little under.

00:28:40.180 --> 00:28:45.180
And yeah, if you were to run them serially, at least when I wrote my talk, it was about

00:28:45.180 --> 00:28:46.220
35 hours total.

00:28:46.220 --> 00:28:51.100
But we have a test runner framework called Jolt that we run internally.

00:28:51.100 --> 00:28:56.540
And what it does is it basically like puts those tests up into bundles and then runs those

00:28:56.540 --> 00:28:57.960
across a bunch of machines.

00:28:57.960 --> 00:29:04.200
And so you're basically able to get all of the tests run for Yelp main in about, give or

00:29:04.200 --> 00:29:05.080
take an hour and a half.

00:29:05.080 --> 00:29:05.340
Okay.

00:29:05.740 --> 00:29:07.840
That's pretty good for running a hundred thousand tests.

00:29:07.840 --> 00:29:09.740
That's still a long time to have a test run though.

00:29:09.740 --> 00:29:10.000
Right.

00:29:10.000 --> 00:29:11.260
So you probably need it.

00:29:11.260 --> 00:29:12.960
You can't just get immediate feedback.

00:29:12.960 --> 00:29:13.780
Minor change.

00:29:13.780 --> 00:29:14.340
How'd that go?

00:29:14.340 --> 00:29:14.920
Minor change.

00:29:14.920 --> 00:29:15.420
How'd that go?

00:29:15.420 --> 00:29:17.500
You kind of, it'd be a little more thoughtful than that.

00:29:17.500 --> 00:29:17.700
Right.

00:29:17.700 --> 00:29:18.000
Yeah.

00:29:18.000 --> 00:29:22.700
I mean, I think that in terms of, and this sort of gets into like testing theory is that

00:29:22.700 --> 00:29:29.280
like you start to get an idea of like what changes are like affect what other things

00:29:29.280 --> 00:29:33.600
like sometimes you're not, you're not going to have a perfect idea, but like if you're

00:29:33.600 --> 00:29:35.200
like, oh, this is a thing.

00:29:35.200 --> 00:29:36.660
That just affects everything.

00:29:36.660 --> 00:29:38.000
Then you're going to run all the tests.

00:29:38.000 --> 00:29:40.460
But we did have the ability to run tests.

00:29:40.460 --> 00:29:43.120
If we were like, okay, we want to just run tests under Python three.

00:29:43.120 --> 00:29:47.760
We could do like, oh, I'm just going to run this, you know, test module under Python.

00:29:47.760 --> 00:29:47.820
Right.

00:29:47.820 --> 00:29:48.800
I can do that.

00:29:48.880 --> 00:29:53.720
And so like, if you were literally just like, oh, I'm checking, I'm like fixing this test

00:29:53.720 --> 00:29:55.980
under Python three, then you could just do that.

00:29:55.980 --> 00:29:59.940
You could just be like, oh, I'm iterating very quickly by like changing the code and then

00:29:59.940 --> 00:30:01.580
running the test under Python three.

00:30:01.840 --> 00:30:03.920
And then, you know, oh, it passes.

00:30:03.920 --> 00:30:04.260
Okay.

00:30:04.260 --> 00:30:04.900
Let me double check.

00:30:04.900 --> 00:30:06.540
It passes under Python two as well.

00:30:06.540 --> 00:30:10.520
And then you can commit that and then like put that into PR.

00:30:10.520 --> 00:30:12.060
And then we do require.

00:30:12.060 --> 00:30:17.440
So one of the things is we do require running all doing a full jolt run for every pull request

00:30:17.440 --> 00:30:17.840
to Yelp me.

00:30:18.260 --> 00:30:20.900
So in order to do so, you have to run that anyway.

00:30:20.900 --> 00:30:24.460
But like, while you're waiting for that to run, you can work on something else.

00:30:24.460 --> 00:30:24.760
Sure.

00:30:24.760 --> 00:30:26.260
And you're high confidence.

00:30:26.260 --> 00:30:27.220
You run a couple.

00:30:27.220 --> 00:30:27.420
Okay.

00:30:27.420 --> 00:30:27.840
That makes sense.

00:30:27.840 --> 00:30:31.080
So run a couple of local tests, 10, 100, 500, whatever.

00:30:31.080 --> 00:30:36.740
Once you're happy with that, then you put it as a PR and CI figures out what happens.

00:30:36.740 --> 00:30:36.960
Yeah.

00:30:36.960 --> 00:30:37.120
Okay.

00:30:37.120 --> 00:30:41.360
And I think that ultimately, like there, when we were really early on and we were working

00:30:41.360 --> 00:30:45.300
on like the really foundational stuff, but that was like the causing the most issues.

00:30:45.660 --> 00:30:48.420
That was the time when we're like, oh, we really got to run all the tests.

00:30:48.420 --> 00:30:53.360
But once you get down to the nitty gritty pretty early on, actually, you really don't

00:30:53.360 --> 00:30:55.680
need to think about how it affects other things.

00:30:55.680 --> 00:30:59.180
Like it's mostly just sort of like, yeah, you know, this module affects its own tests and

00:30:59.180 --> 00:30:59.920
that's pretty much it.

00:30:59.920 --> 00:31:00.200
Okay.

00:31:00.200 --> 00:31:01.020
Yeah.

00:31:01.020 --> 00:31:02.580
I'm sure you get a feel for it over time.

00:31:02.580 --> 00:31:06.460
Like these are the kinds of far reaching changes and these are the kinds of things I

00:31:06.460 --> 00:31:07.860
can stay really focused on.

00:31:07.860 --> 00:31:13.520
This portion of Talk Python to Me is brought to you by User Interviews.

00:31:13.920 --> 00:31:18.740
As a developer, how often do you find yourself talking back to products and services that

00:31:18.740 --> 00:31:19.120
you use?

00:31:19.120 --> 00:31:22.920
Sometimes it may be frustration over how it's working poorly.

00:31:22.920 --> 00:31:26.800
And if they just did such and such, it would work better.

00:31:26.800 --> 00:31:28.140
And it's easy to do.

00:31:28.140 --> 00:31:30.060
Other times it might be delight.

00:31:30.060 --> 00:31:30.680
Wow.

00:31:30.680 --> 00:31:32.260
They auto-filled that section for me.

00:31:32.260 --> 00:31:33.640
How did they even do that?

00:31:33.640 --> 00:31:34.080
Wonderful.

00:31:34.080 --> 00:31:34.700
Thanks.

00:31:34.700 --> 00:31:38.800
While this verbalization might be great to get the thoughts out of your head.

00:31:38.800 --> 00:31:42.420
Did you know that you can earn money for your feedback on real products?

00:31:42.420 --> 00:31:47.820
User Interviews connects researchers with professionals that want to participate in research studies.

00:31:47.820 --> 00:31:53.120
There is a high demand for developers to share their opinions on products being created for

00:31:53.120 --> 00:31:53.660
developers.

00:31:53.660 --> 00:31:58.260
Aside from the extra cash, you'll talk to people building products in your space.

00:31:58.260 --> 00:32:03.080
You will not only learn about new tools being created, but you'll also shape the future of the

00:32:03.080 --> 00:32:04.400
products that we all use.

00:32:04.580 --> 00:32:09.340
It's completely free to sign up and you can apply to your first study in under five minutes.

00:32:09.340 --> 00:32:11.640
The average study pays over $60.

00:32:11.640 --> 00:32:17.540
However, many studies specifically interested in developers pay several hundreds of dollars

00:32:17.540 --> 00:32:18.620
for a one-on-one interview.

00:32:18.620 --> 00:32:22.820
Are you ready to earn extra income from sharing your expert opinion?

00:32:22.820 --> 00:32:27.780
Head over to talkpython.fm/userinterviews to participate today.

00:32:27.780 --> 00:32:30.060
The link is in your podcast player show notes.

00:32:30.060 --> 00:32:32.580
Thank you to User Interviews for supporting the show.

00:32:32.580 --> 00:32:40.700
The other requirement you said that you had was that any changes must be rollback safe.

00:32:40.700 --> 00:32:42.300
Can you speak to that?

00:32:42.300 --> 00:32:46.340
I'm thinking like database migrations or that, right?

00:32:46.340 --> 00:32:47.160
What are you thinking here?

00:32:47.160 --> 00:32:51.740
Yeah, I mean, it's I think database migrations are a good example of that type of thing.

00:32:51.740 --> 00:32:57.320
We didn't really run into a situation where we actually had to do any schema changes to databases,

00:32:57.320 --> 00:33:06.260
although there was a thing where we had to do we had to make some changes to some data such that it would be parsed properly under both Python 2 and 3.

00:33:06.780 --> 00:33:16.800
But yeah, what you always want to do is you want to say like, okay, if I undo this later, maybe like a week later, someone realizes, oh, this change made a problem, has a problem.

00:33:16.800 --> 00:33:19.760
We don't want to be in this vision where we say, oh, we can't undo that.

00:33:19.760 --> 00:33:23.540
Something else, you know, it depends on it and we can't we can't undo it.

00:33:23.920 --> 00:33:25.800
And so that was like a main thing.

00:33:25.800 --> 00:33:30.380
It was just sort of like, don't do these things where you're just sort of like, oh, once we do this, we can't go back.

00:33:30.380 --> 00:33:31.440
Like, no, don't do that.

00:33:31.440 --> 00:33:31.880
Right.

00:33:31.880 --> 00:33:38.460
If you need to like do some extra work where you like build up scaffolding or whatever, then like do that work instead.

00:33:38.460 --> 00:33:43.980
And it might take a little bit longer in the in the in the long run, but it makes us have less risk.

00:33:43.980 --> 00:33:47.720
Yeah, I'll save diving into this for later in our conversation.

00:33:47.720 --> 00:34:00.880
But one of the things that you were able to do because of that is you were able to run apps simultaneously in two and three and use URL reverse proxy like Nginx or something to say this part of the web app runs Python 3.

00:34:00.880 --> 00:34:07.660
And this one over here is running Python 2 and filter the traffic and switch it based on how it's performing or behaving.

00:34:07.660 --> 00:34:09.400
If it goes wrong, you can switch it back quick.

00:34:09.680 --> 00:34:18.160
If you didn't have that compatibility, it would be like, all right, today we pull the switch junk and then like you deal with the consequences for how long Yelp is down.

00:34:18.160 --> 00:34:18.440
Right.

00:34:18.440 --> 00:34:25.000
So that's an interesting consequence of this idea that it should be able to be roll back rollbackables.

00:34:25.000 --> 00:34:29.020
You can actually run both versions and then sort of migrate more cautiously.

00:34:29.020 --> 00:34:39.660
You had a cool picture and let me put it on the screen for us here where you talked about the four different steps, the phases and timeline.

00:34:39.660 --> 00:34:42.020
And how much time you spent in there.

00:34:42.020 --> 00:34:43.220
Want to talk us through this?

00:34:43.220 --> 00:34:43.880
Yeah, sure.

00:34:43.880 --> 00:34:52.020
So this is just sort of like if you want to think about, OK, you've got some Python 2 code and you want it to get it to Python 3.

00:34:52.260 --> 00:34:57.520
It's very easy to think about it in a sort of atomic way as you just sort of like, oh, make it Python 3 compatible.

00:34:57.520 --> 00:35:00.940
And it's like, OK, it makes sense on small stuff.

00:35:00.940 --> 00:35:04.980
You know, if you're like, oh, I got my 500 lines back and I'm going to migrate to Python 3 today, you know.

00:35:05.260 --> 00:35:11.900
But on big stuff, when you're talking about millions of lines of code, you want to think about it in terms of in sort of level of compatibility.

00:35:11.900 --> 00:35:24.520
And so the three levels that we had to deal with here were parseability, which basically just means if you try and run this module with Python 3, will it fail with a syntax error or not?

00:35:24.780 --> 00:35:27.800
OK. And so that's the main thing.

00:35:27.800 --> 00:35:32.840
And parseability, it turns out, is pretty easy to fix because there were not a lot, huge number of syntax changes.

00:35:32.840 --> 00:35:35.780
And they're pretty easy to detect and fix in an automated way.

00:35:35.780 --> 00:35:40.040
Yeah. Did you use some tooling like PyUpgrade or any of those types of things?

00:35:40.040 --> 00:35:41.580
PyUpgrade we used a little bit.

00:35:41.580 --> 00:35:49.580
It's not super designed for this, but there was a one specific thing that was really nice about it, which is that it could detect octal literals.

00:35:50.440 --> 00:35:56.440
So if you put like zero and then a number that's an octal literal in Python 2, that's not a lot in Python 3.

00:35:56.440 --> 00:35:59.060
So you have to do zero O number.

00:35:59.060 --> 00:36:04.120
And it was able to detect those really easily and like fix them, which was really nice.

00:36:04.120 --> 00:36:07.420
Those things, it sounds like, oh, well, that's not that much work or that much help.

00:36:07.420 --> 00:36:13.580
But when you're doing it across millions of lines of code, anything you can automate, it's got to be really welcome, right?

00:36:13.580 --> 00:36:15.420
There's a relatively common pattern.

00:36:15.420 --> 00:36:20.420
The reason that I remember that one is there was a relatively common pattern where like people would create like date time.

00:36:20.420 --> 00:36:23.460
objects and then they would write year, month, day.

00:36:23.460 --> 00:36:30.060
And if the month or a year was single digit, they would prefix it with a zero, which works in Python 2.

00:36:30.060 --> 00:36:33.320
They probably didn't mean to make it octal, but that's what they did.

00:36:33.320 --> 00:36:33.660
Yeah.

00:36:33.660 --> 00:36:36.260
And so it kind of worked.

00:36:36.260 --> 00:36:40.620
And so people and so that that existed in a lot of places and it was like a popular pattern.

00:36:40.780 --> 00:36:43.560
But yeah, so PyUpgrade was useful in that way.

00:36:43.560 --> 00:36:50.420
It was useful later on when we were like blowing away all the sick stuff because it's able to fix all those things automatically, which is nice.

00:36:50.420 --> 00:36:51.120
Or most of them.

00:36:51.120 --> 00:36:57.200
But Python modernized was where a lot of most of our automation went because it could fix a lot of this stuff.

00:36:57.200 --> 00:36:57.380
Yeah.

00:36:57.380 --> 00:36:57.660
Yeah.

00:36:57.760 --> 00:36:58.840
So that was priceability.

00:36:58.840 --> 00:37:06.760
Importability is similar is that you try to import it and then you say, you say like, okay, this is failing with an import error.

00:37:06.760 --> 00:37:12.500
Like, or something is making it fail to import, like usually running code at the top level.

00:37:12.500 --> 00:37:15.760
And that was a little bit longer.

00:37:16.140 --> 00:37:19.560
A lot of that was fixing standard lib imports.

00:37:19.560 --> 00:37:22.000
You may be making most of those use six shims.

00:37:22.000 --> 00:37:24.720
If they change the six shim for that.

00:37:24.720 --> 00:37:31.480
And then some of it was also upgrading the packages so they could be used under Python 3 and like imported.

00:37:31.480 --> 00:37:39.560
But there was a little bit of like top level stuff where it was like, oh, this like top level thing is like calling like dict.iter items or something.

00:37:39.560 --> 00:37:40.320
And you got to fix that.

00:37:40.320 --> 00:37:40.540
Yeah.

00:37:40.900 --> 00:37:52.840
So that's, that probably gets maybe a little into the functional parity, which if people look at your talk, they'll see there's a couple weeks of the parsability, maybe a month or two of the importability.

00:37:52.840 --> 00:37:55.340
Then a whole bunch of the functional parity.

00:37:55.340 --> 00:37:58.880
And it reminds me of when I was learning C++ way, way, way back.

00:37:58.880 --> 00:38:03.460
And I got really excited because I finally got some complicated code to compile.

00:38:03.460 --> 00:38:06.860
Not really knowing like, oh, no, no, no, no, no.

00:38:06.860 --> 00:38:09.520
You're only the beginning of figuring out what's wrong with this.

00:38:09.520 --> 00:38:11.740
The compile is the part where it shows you what's wrong.

00:38:11.740 --> 00:38:13.340
Now it's like the mystery tour.

00:38:13.340 --> 00:38:15.360
And like, this is after that, right?

00:38:15.360 --> 00:38:21.280
This is like kind of once you get past parsing and importing, then you're into the how are they different behaviorally?

00:38:21.280 --> 00:38:21.600
Yeah.

00:38:21.600 --> 00:38:29.140
And this is, it's just sort of like, I alluded to this earlier, but basically the idea of you run all of your tests.

00:38:29.140 --> 00:38:33.720
And luckily we had already built up a lot of infrastructure that was really useful to us.

00:38:33.720 --> 00:38:51.780
So one of the things that Jolt was able to do is it was able to do some like normalization of like tracebacks and then be like, oh, these tracebacks are like similar enough that I'm going to group them together as like a single error and say like, oh, this many tests are failing this sort of traceback.

00:38:51.880 --> 00:38:52.060
Okay.

00:38:52.060 --> 00:39:01.300
That was really useful because it was, we were able to just sort of be like, okay, here's where the error is and it's going to fix this many tests or at least unblock this many tests.

00:39:01.300 --> 00:39:01.560
Yeah.

00:39:01.560 --> 00:39:12.880
So that was about a year of basically going through all of those test failures and figuring out, okay, why do they file fail under Python three and just fixing them?

00:39:12.880 --> 00:39:19.420
So a lot of it was like, oh, this thing's supposed to be a string, but it's bytes or vice versa or.

00:39:19.420 --> 00:39:23.880
They're calling dot items, but it's, that used to be a list and it's not a list anymore.

00:39:23.880 --> 00:39:24.720
Yeah.

00:39:24.720 --> 00:39:25.680
So you can index it.

00:39:25.680 --> 00:39:25.960
Yeah.

00:39:26.060 --> 00:39:30.980
So there's all sorts of nitty gritty things that you just have to go through and fix them.

00:39:30.980 --> 00:39:35.920
Some of them are automatable, but like you really need to, but not everything is.

00:39:35.920 --> 00:39:37.180
And some of them are more subtle.

00:39:37.180 --> 00:39:37.720
Yeah.

00:39:37.720 --> 00:39:39.800
What was your target Python three version?

00:39:39.800 --> 00:39:45.480
So we originally targeted three, six at the time it was the newest version.

00:39:45.480 --> 00:39:48.620
When we started the project, it was like the newest version that we had available.

00:39:48.620 --> 00:39:53.260
That was that we were like, we're like, you know, we're sort of ready for, if you will.

00:39:53.260 --> 00:39:53.640
Yeah.

00:39:53.740 --> 00:39:56.320
During, during the project was obviously a long project.

00:39:56.320 --> 00:39:58.100
We were able to get three, seven available.

00:39:58.100 --> 00:40:02.680
And it was actually really great because we were like, I don't know, I'm less than a month

00:40:02.680 --> 00:40:05.080
out from when we were like, oh, we're going to start doing the rollout.

00:40:05.080 --> 00:40:10.220
And my coworker, Chris, who wrote Dump API was working on this project at the time.

00:40:10.220 --> 00:40:11.460
And he was like, you know what?

00:40:11.460 --> 00:40:13.520
I bet we could migrate this to Python three, seven.

00:40:13.520 --> 00:40:14.640
And I'm like, go for it.

00:40:14.640 --> 00:40:14.940
Let's see.

00:40:14.940 --> 00:40:15.980
Let's see how hard it is.

00:40:15.980 --> 00:40:17.400
And he did it in like a day.

00:40:17.400 --> 00:40:20.120
So it was just like, it was just like, oh, he just upgraded it.

00:40:20.120 --> 00:40:23.360
It was like, I think there were like maybe a few three, seven does have like that

00:40:23.360 --> 00:40:26.680
one backwards incompatible incompatibility where it makes asymptote keywords.

00:40:26.680 --> 00:40:29.540
So there were like a few packages where he needed to upgrade.

00:40:29.540 --> 00:40:31.380
But like he was able to do it like really quickly.

00:40:31.380 --> 00:40:34.200
And we were just sort of like, okay, and now we're going to roll out to three, seven.

00:40:34.200 --> 00:40:38.320
So that was nice that it was, it was sort of like we were working on three, six for most

00:40:38.320 --> 00:40:38.560
of it.

00:40:38.560 --> 00:40:41.560
We were, we switched to three, seven near the end and it just sort of worked.

00:40:41.560 --> 00:40:44.800
And it says the foundation for going to the next version after that, right?

00:40:44.800 --> 00:40:45.720
It's actually really weird.

00:40:45.720 --> 00:40:47.140
Chris is working on that again.

00:40:47.140 --> 00:40:51.300
He's going to be trying to upgrade us to three, eight like this week, basically.

00:40:51.500 --> 00:40:52.240
Okay, cool.

00:40:52.240 --> 00:40:53.600
That's really, really excellent.

00:40:53.600 --> 00:40:59.760
What was the emotional state of you and the team as you were going through that year of

00:40:59.760 --> 00:41:00.120
fixing?

00:41:00.120 --> 00:41:00.820
Nope.

00:41:00.820 --> 00:41:05.660
It's list of dick dot items, not list dot items or dictionary dot items.

00:41:05.660 --> 00:41:09.320
And probably excited in the beginning, but you know, six months.

00:41:09.320 --> 00:41:10.260
And what was that like?

00:41:10.260 --> 00:41:12.520
Or making progress or like, oh God, it's still here.

00:41:12.520 --> 00:41:13.020
We're not done.

00:41:13.020 --> 00:41:15.160
I knew what it was going to be like going into it.

00:41:15.160 --> 00:41:19.360
Like I was like, I mean, not exactly, but like, I was like, I know that it's going to be

00:41:19.360 --> 00:41:21.940
this thing where it's like, we're going to make some progress and then we're going to,

00:41:21.940 --> 00:41:24.800
it's going to taper off because of the way that these things work.

00:41:24.800 --> 00:41:30.280
And, but it was definitely like, it was sort of like, you were just sort of doing your tasks

00:41:30.280 --> 00:41:33.360
every day and each task in and of itself was not valuable.

00:41:33.360 --> 00:41:33.780
Right.

00:41:33.780 --> 00:41:37.080
It was sort of like, oh, well, I fixed three tests today, you know, kind of thing.

00:41:37.080 --> 00:41:42.600
But ultimately I was able to see like where the end was.

00:41:42.720 --> 00:41:45.180
So for me, I was like, I was like, yeah, we're going to do this.

00:41:45.180 --> 00:41:45.700
We're going to do it.

00:41:45.700 --> 00:41:51.940
I think not everyone on my team was necessarily like as sort of buying the prize as I was, which

00:41:51.940 --> 00:41:52.460
is fine.

00:41:52.460 --> 00:41:54.700
I think we ended up, we ended up swapping out.

00:41:54.700 --> 00:41:58.120
Basically everyone on the team ended up working on it at one point or another, but it was only

00:41:58.120 --> 00:42:03.200
me and, and another one of my colleagues who, who worked on it basically the whole time.

00:42:03.460 --> 00:42:08.500
So I think, you know, part of it was that some people were like, okay, I'll work on that a

00:42:08.500 --> 00:42:10.420
little bit, but I don't want to only work on that.

00:42:10.420 --> 00:42:11.620
And that's totally understandable.

00:42:11.620 --> 00:42:16.820
Like, I think that this type of work is kind of tedious and this is sort of like, this is

00:42:16.820 --> 00:42:21.340
another argument against monoliths is sort of saying like, if you have to do this, when

00:42:21.340 --> 00:42:25.720
you need to do these, these type of migrations, it becomes really punishing on software engineers.

00:42:25.720 --> 00:42:30.580
Like if you haven't done linting ever, and then five years into it, you like, oh, let's

00:42:30.580 --> 00:42:31.460
get, see what's wrong with you.

00:42:31.460 --> 00:42:33.120
We're at the lunch, you're like a hundred thousand years.

00:42:33.120 --> 00:42:33.460
Like, you know what?

00:42:33.460 --> 00:42:34.000
We're not doing that.

00:42:34.000 --> 00:42:35.820
We're just, we're just going to ignore those.

00:42:35.820 --> 00:42:36.640
Let's just stay.

00:42:36.640 --> 00:42:40.060
Cause you can't just stop and go do a hundred thousand fixes.

00:42:40.060 --> 00:42:42.620
And this is, there's more value on the other side of this.

00:42:42.620 --> 00:42:47.220
So it's, it makes a lot of sense, but it must've been, felt pretty good to get it all done though.

00:42:47.220 --> 00:42:47.920
It really did.

00:42:47.920 --> 00:42:52.340
I mean, it was, it's sort of weird how these projects work is that like, you're sort of

00:42:52.340 --> 00:42:54.200
like, you're doing the work, you're doing the work.

00:42:54.200 --> 00:42:56.740
And then like one day you're just sort of like, and we're done.

00:42:56.740 --> 00:43:00.940
And it's been a year and a half of my life, you know, like, but exciting.

00:43:01.140 --> 00:43:06.740
It was, I had multiple people tell me, they said to me, Hey, it's so cool that you, that,

00:43:06.740 --> 00:43:10.640
you know, we were able to do that because I never thought it would happen.

00:43:10.640 --> 00:43:10.920
Yeah.

00:43:10.920 --> 00:43:15.400
It's kind of amazing to do something that some people are like, this won't ever happen.

00:43:15.400 --> 00:43:17.680
But I did, it happened and we made it happen.

00:43:17.680 --> 00:43:20.140
And I think that that was, you know, really great.

00:43:20.140 --> 00:43:25.020
Let's talk a little bit about how you were able to, to run this on Python two and three.

00:43:25.020 --> 00:43:25.840
What do you do?

00:43:25.840 --> 00:43:31.860
You basically create two virtual environments, one from each setup and then each version and

00:43:31.860 --> 00:43:34.220
then run test there, try it out there.

00:43:34.220 --> 00:43:34.640
Yep.

00:43:34.640 --> 00:43:35.640
That's basically it.

00:43:35.640 --> 00:43:41.020
I mean, there is a technique to having like code that runs under Python two and three, which

00:43:41.020 --> 00:43:45.640
is that, you know, you basically have to make sure that you're using compatibility layers.

00:43:45.640 --> 00:43:47.140
And we use six for that.

00:43:47.140 --> 00:43:52.060
I, that was something that me and most of the people on my team had some pretty significant

00:43:52.060 --> 00:43:57.480
and experience doing, because that's basically how we wrote all of our like libraries or internal

00:43:57.480 --> 00:43:57.860
libraries.

00:43:58.220 --> 00:44:02.540
And, and actually a lot of our like source ones as well, because, you know, you want

00:44:02.540 --> 00:44:06.020
for a long time there, you were like, okay, I want to have Python two and three compatibility.

00:44:06.020 --> 00:44:09.400
So having code that works under both was like pretty normal.

00:44:09.400 --> 00:44:09.720
Yeah.

00:44:09.720 --> 00:44:14.000
Making sure that that code is sort of can run under Python two and three and then building

00:44:14.000 --> 00:44:18.820
the virtual one, there was a little bit of nuance or like a, there was a snag there, which

00:44:18.820 --> 00:44:23.500
is that like something that comes up every once in a while when you're doing this kind of stuff.

00:44:23.500 --> 00:44:27.480
And this still, this is still a thing that happens to this day is you have, you have to

00:44:27.480 --> 00:44:28.540
deal with backport packages.

00:44:28.540 --> 00:44:35.120
So there's like the futures backport, which was the concurrent, which like concurrent futures

00:44:35.120 --> 00:44:36.840
was added in might've been three.

00:44:36.840 --> 00:44:40.200
Oh, I don't remember exactly what version of Python three Python it was added in.

00:44:40.200 --> 00:44:46.040
And then there was like a few other backports, functools 32 backport for adding some of the

00:44:46.040 --> 00:44:51.140
stuff in Python three, three twos, functools, like LRU cache, which is something we used a

00:44:51.140 --> 00:44:51.480
lot of.

00:44:51.480 --> 00:44:56.740
So those were both packages where we needed to actually install them in Python two, because

00:44:56.740 --> 00:45:01.760
like there are packages somewhere in our, you know, depth tree that needs them.

00:45:01.760 --> 00:45:06.260
So what we had, what we ended up doing is we, it was, we made this like silly little, little

00:45:06.260 --> 00:45:11.580
script that it just sort of like took our requirements file and then filtered out the things that don't

00:45:11.580 --> 00:45:14.740
under install under Python three and just spit out a new one.

00:45:14.800 --> 00:45:17.820
And that's the one builder Python three virtual input.

00:45:17.820 --> 00:45:24.320
And so that's how we have Python two and Python three virtual and they're like really similar, not exactly the same, but close enough.

00:45:24.320 --> 00:45:27.420
And then we can run, run the tests against either one of them.

00:45:27.420 --> 00:45:27.820
Nice.

00:45:27.820 --> 00:45:30.720
Or, and then eventually we would do, you know, do the rollout.

00:45:30.720 --> 00:45:40.000
It doesn't like one of the challenges had to do with caching and you have a, a way in which you were using pickle to stuff some results into memcache.

00:45:40.000 --> 00:45:43.520
Is it memcached D or memcached like past tense?

00:45:43.520 --> 00:45:44.540
I never know.

00:45:44.540 --> 00:45:46.440
I never know how to pronounce that, that one.

00:45:46.500 --> 00:45:52.660
I looked at their website like a year ago or like, I guess two years ago or something when I was actually working on this.

00:45:52.660 --> 00:45:57.440
And I'm sure that I know, I'm sure that I read it because it said it there.

00:45:57.440 --> 00:45:59.240
I remember, but I don't remember what the answer is.

00:45:59.240 --> 00:45:59.800
Yeah, no worries.

00:45:59.800 --> 00:46:00.040
All right.

00:46:00.040 --> 00:46:01.480
So let's go with memcached.

00:46:01.480 --> 00:46:02.140
I'll call it memcached.

00:46:02.140 --> 00:46:06.600
So you were, you were previously, you were pickling things.

00:46:06.600 --> 00:46:08.800
You were cpickling, but then that just became pickling.

00:46:09.000 --> 00:46:17.420
But at some point, it's one thing to say at the database query level, we'll deserialize and serialize an ORM object to match the schema.

00:46:17.420 --> 00:46:24.020
It's a whole nother to say the binary shape of this thing is the same across Python versions, which is highly unlikely, right?

00:46:24.020 --> 00:46:24.540
Which is pickle.

00:46:24.540 --> 00:46:25.680
It's basically impossible.

00:46:25.680 --> 00:46:26.120
Yeah.

00:46:26.120 --> 00:46:28.500
That was like the, yeah, that was one of the big problems that we had.

00:46:28.500 --> 00:46:33.760
So we're basically taking up, we were basically like, so we'd pickle, there's like a cache key and then there's a cache value.

00:46:33.760 --> 00:46:41.680
We'd pickle both and then the cache key, we would, we would like hash so that it could be like, you know, a specific binary sequence.

00:46:41.680 --> 00:46:49.120
And then that would, and then we'd, we'd key into that, you know, to get stuff out of the, out of the cache.

00:46:49.120 --> 00:46:56.160
And, but it turns out that for a multitude of reasons, both the key, like you said, the key is not going to be binary the same.

00:46:56.160 --> 00:46:57.620
So like, that's one of the problems.

00:46:57.980 --> 00:47:08.740
And the other problem is that there's a lot of like weirdnesses when you end up like either reading Python two pickles in Python three or reading Python three pickles in Python two.

00:47:08.740 --> 00:47:11.100
It seems like pickles are kind of meant to be transient.

00:47:11.100 --> 00:47:16.920
They're not meant to sort of be long-term storage because there's not a lot of guarantees around their parsability.

00:47:16.920 --> 00:47:17.620
Yeah.

00:47:17.620 --> 00:47:26.120
We were like, okay, well, what's, what's a thing that we can do where we don't have to start being like, okay, now we have to write complicated serialization and stuff.

00:47:26.120 --> 00:47:29.540
And we were like, well, probably JSON, JSON will work.

00:47:29.540 --> 00:47:37.920
And so this is something I worked on for about three months or something was just migrating all of our caches to, to use JSON instead of pickles.

00:47:37.920 --> 00:47:46.440
Yeah, you had this kind of fallback mechanism or this slow upgrade mechanism that said, try to get the JSON version from memcache.

00:47:46.440 --> 00:47:48.940
And if you got it, awesome, go with that.

00:47:48.940 --> 00:47:57.580
But then fall back and try to get the binary pickle, but then immediately replace it with the JSON version so that it just grows over time.

00:47:57.580 --> 00:48:05.720
I mean, thinking about that much code and that many services, there must just be a ton of startup cost if you just kick all the servers over and clean the cache.

00:48:05.720 --> 00:48:06.860
We've never tried it.

00:48:06.860 --> 00:48:11.240
I think everyone's a little bit too scared, but it's definitely like not something we wanted to do.

00:48:11.240 --> 00:48:16.500
And we wanted to be able to be like, okay, for when we cut over to Python 3, we're not just going to lose all of our caches.

00:48:16.500 --> 00:48:24.360
I think this is actually a really great example of something we were discussing before the recording started of like doing a sort of like incremental upgrade.

00:48:24.360 --> 00:48:36.620
And one of the other things I didn't super get into with in my talk is that like one of the things that I felt was a really cool technique, and this really depends on whether or not this is worth it.

00:48:36.800 --> 00:48:42.500
It depends on like how you end up, what the value of your like uptime is basically compared to your dev time.

00:48:42.920 --> 00:48:45.740
But what I did is I sort of logged.

00:48:45.740 --> 00:48:50.040
What I would do is I would like for every cache, I'd be like, okay, I'm going to try to log this to JSON.

00:48:50.040 --> 00:48:52.940
And then if it failed, I wouldn't just fail.

00:48:52.940 --> 00:48:54.240
I'd like do the normal stuff.

00:48:54.240 --> 00:48:55.740
I'd do all the pickle stuff, whatever.

00:48:56.140 --> 00:48:57.240
But then I'd log it somewhere.

00:48:57.240 --> 00:49:01.320
And so that way, I could just like look at this log and be like, oh, here's where my errors are.

00:49:01.320 --> 00:49:10.260
So it wasn't just like, oh, I would do I would like ship changes and then like, see if there were actual errors on prediction is like, there's no errors on prediction.

00:49:10.260 --> 00:49:19.020
There's just errors in this log that I can like fix and like iterate on and no, you know, user ever sees a sees a 500.

00:49:19.020 --> 00:49:20.700
Not everything can fit into that.

00:49:20.700 --> 00:49:23.000
But I think that that's a really I think that's a really useful.

00:49:23.340 --> 00:49:31.800
Yeah, that is really cool because no matter how much testing you do on something this big, it's not until you really put it out there, you see that 100% sure it's going to hang together.

00:49:31.800 --> 00:49:39.680
But if it can fail silently in a way that people don't see, but you you get notified about this and can start working on it.

00:49:39.680 --> 00:49:41.240
That's yeah, that's really valuable.

00:49:41.240 --> 00:49:53.060
Another thing that you did that I thought was pretty clever was the way that you did the rollouts where you were able to say, even though this is one huge monolith of code, that doesn't mean it breaks.

00:49:53.060 --> 00:49:54.260
Evenly, right?

00:49:54.260 --> 00:50:01.920
Once you get it past the parsability stage, there could be some URL endpoint that's going to fail if you request it and another that works totally fine.

00:50:01.920 --> 00:50:02.400
All right.

00:50:02.400 --> 00:50:06.300
So what you were what you all did is you created a reverse proxy.

00:50:06.300 --> 00:50:08.540
And I was imagining Nginx.

00:50:08.540 --> 00:50:10.040
What were you actually using here?

00:50:10.040 --> 00:50:11.340
So it's kind of Nginx.

00:50:11.340 --> 00:50:19.980
It's open Resty, which is a framework where you can write plugins for Nginx in Lua.

00:50:20.420 --> 00:50:24.280
So you can you can do some sort of, you know, general logic in that.

00:50:24.280 --> 00:50:32.680
So you were basically able to say, you know, when you go to Yelp dot com slash something or API dot Yelp dot com or whatever it is, as far as a user, it's the same.

00:50:32.680 --> 00:50:39.700
But some of those URLs are hitting the Python 3 version of this large monolith app running and some are hitting the Python 2.

00:50:39.700 --> 00:50:44.580
And you could move it URL, URL endpoint endpoint at a time.

00:50:44.580 --> 00:50:44.860
Right.

00:50:44.860 --> 00:50:45.140
Yeah.

00:50:45.140 --> 00:50:45.840
Talk to us about that.

00:50:45.840 --> 00:50:46.540
That's pretty clever.

00:50:46.800 --> 00:50:49.440
Yeah, this is a super cool technique.

00:50:49.440 --> 00:50:52.040
So we already had the reverse proxy layer.

00:50:52.040 --> 00:50:53.020
We had the routing service.

00:50:53.020 --> 00:51:01.300
This is something that we had built for just sort of consolidating a bunch of logic in a general place where like everything could rely on it.

00:51:01.660 --> 00:51:06.840
But it was a really great place for us to be able to put this logic as well.

00:51:06.980 --> 00:51:09.580
And I'm going to say say him again.

00:51:09.580 --> 00:51:14.800
Chris Keel on my my colleague on my team came up with this idea as well.

00:51:14.800 --> 00:51:16.800
So it's it's such a great idea.

00:51:16.800 --> 00:51:18.980
And it applies, I think, really generally.

00:51:18.980 --> 00:51:27.660
Like you can just sort of say like, OK, anytime I'm doing some sort of rollout where the setup is such a what in such a way that like I can't like do it within my application.

00:51:27.880 --> 00:51:34.640
Like there's something about the application setup you can if you have this external layer, then you can then you can pretty easily do it.

00:51:34.640 --> 00:51:47.200
And yeah, it was basically just sort of like, you know, we would have a configuration and it would say like, OK, this like prefix endpoint or like this endpoint prefix would go to Python 2 or this one would go to Python 3.

00:51:47.280 --> 00:51:51.920
And we can actually even be a little bit more granular that we could actually give it a percentage of the time.

00:51:51.920 --> 00:51:57.600
So basically like, you know, 20 percent of the time it goes to Python 2, 80 percent of the time it goes to Python 3.

00:51:57.600 --> 00:52:01.800
And so we could do these sort of slower rollouts if people wanted to be more careful.

00:52:01.800 --> 00:52:02.340
I see.

00:52:02.340 --> 00:52:04.840
So maybe it goes like it's on Python 2.

00:52:04.840 --> 00:52:07.360
Now 1 percent of the traffic goes to Python 3.

00:52:07.360 --> 00:52:08.720
Is it dying or no?

00:52:08.720 --> 00:52:09.860
It seems OK.

00:52:09.860 --> 00:52:10.500
It seems OK.

00:52:10.500 --> 00:52:10.840
All right.

00:52:10.840 --> 00:52:11.540
Now 20.

00:52:11.540 --> 00:52:12.120
Now 80.

00:52:12.120 --> 00:52:14.000
Like you could like slowly move it over.

00:52:14.200 --> 00:52:18.200
So if it fails, at least it fails just for a few people.

00:52:18.200 --> 00:52:20.260
And you can you don't even roll it back.

00:52:20.260 --> 00:52:24.180
You just stop sending traffic there and fix it, which is really good.

00:52:24.180 --> 00:52:24.460
Yeah.

00:52:24.460 --> 00:52:24.760
Yeah.

00:52:24.760 --> 00:52:25.480
Very clever.

00:52:25.480 --> 00:52:27.760
And it certainly makes sense for large projects.

00:52:27.760 --> 00:52:32.900
But what's great is it lets you start getting your Python 3 version in production way earlier.

00:52:32.900 --> 00:52:33.480
Right.

00:52:33.480 --> 00:52:34.740
You're not waiting on the last endpoint.

00:52:34.740 --> 00:52:36.240
You just need the first endpoint.

00:52:36.240 --> 00:52:38.960
I mean, probably you didn't do this very like one URL works.

00:52:38.960 --> 00:52:39.480
Put it out there.

00:52:39.480 --> 00:52:42.140
But like you could do it much sooner than you would otherwise.

00:52:42.140 --> 00:52:42.520
Right.

00:52:42.520 --> 00:52:48.520
For various sort of practical reasons, we didn't do we didn't want to actually start

00:52:48.520 --> 00:52:52.080
the rollout until we were like, oh, all of the tests pass under Python 3.

00:52:52.080 --> 00:52:57.720
Because we didn't want people to be like, oh, I'm running my tests and they're not passing

00:52:57.720 --> 00:52:58.840
and that's bad.

00:52:58.840 --> 00:53:02.640
And I mean, they're going to like ignore them or try to fix them in a bad way and stuff like

00:53:02.640 --> 00:53:02.800
that.

00:53:02.800 --> 00:53:07.480
But like, I mean, it was like a two month process where we were like from the first endpoint

00:53:07.480 --> 00:53:08.280
to the last endpoint.

00:53:08.280 --> 00:53:08.940
It was like two months.

00:53:08.940 --> 00:53:14.080
And so that was able that was really nice because it was like, oh, we would dissect

00:53:14.080 --> 00:53:17.920
issues and then we would but we would keep rolling out other stuff.

00:53:17.920 --> 00:53:21.520
And then, you know, the teams or we could try and fix the issues.

00:53:21.520 --> 00:53:22.340
And so.

00:53:22.340 --> 00:53:22.840
Very neat.

00:53:22.840 --> 00:53:23.980
That's great.

00:53:23.980 --> 00:53:24.500
All right.

00:53:24.500 --> 00:53:25.440
Let's wrap this up.

00:53:25.440 --> 00:53:26.980
We're getting short on time here.

00:53:27.140 --> 00:53:32.360
You had some clear benefits, even though you went to Python 3.6, which I think you'll

00:53:32.360 --> 00:53:34.920
see those benefits again if you go to 3.11.

00:53:34.920 --> 00:53:35.800
All right.

00:53:35.800 --> 00:53:40.400
But even so, going from where do you go from 2.7 to 3.6?

00:53:40.400 --> 00:53:42.200
We went from 2.7 to 3.7.

00:53:42.200 --> 00:53:43.220
2.7 to 3.7.

00:53:43.220 --> 00:53:43.580
Right on.

00:53:43.580 --> 00:53:44.120
OK, cool.

00:53:44.120 --> 00:53:47.420
And you said it got faster and used less memory.

00:53:47.420 --> 00:53:48.140
That's pretty good.

00:53:48.140 --> 00:53:49.740
I don't remember the exact numbers.

00:53:49.740 --> 00:53:50.660
It was in my talk.

00:53:50.660 --> 00:53:51.680
I stole from your talk.

00:53:51.680 --> 00:53:54.540
15 to 20 percent speed up and 20 percent less memory.

00:53:54.540 --> 00:53:55.900
That's that's tangible.

00:53:56.280 --> 00:53:56.560
That's right.

00:53:56.560 --> 00:53:57.000
That's right.

00:53:57.000 --> 00:53:57.260
Yeah.

00:53:57.260 --> 00:54:00.940
I remember this is something I didn't mention in my talk, but I thought I think it's kind

00:54:00.940 --> 00:54:01.320
of interesting.

00:54:01.320 --> 00:54:11.740
So we have some stuff that is, you know, more CPU heavy, which we send to what we call VIP

00:54:11.740 --> 00:54:12.380
instances.

00:54:12.380 --> 00:54:19.160
So VIP like containers have more memory and more CPU allocated towards them.

00:54:19.160 --> 00:54:24.960
And so I remember I talked to someone who was involved in like doing a lot of that sort

00:54:24.960 --> 00:54:26.240
of like operational stuff.

00:54:26.240 --> 00:54:31.360
And after that migration, they like looked at numbers and they were like, oh, we can

00:54:31.360 --> 00:54:36.180
now scale down the VIP to what the old normal one was.

00:54:36.180 --> 00:54:38.100
And the normal one is now scaled down even more.

00:54:38.100 --> 00:54:38.660
Oh, that's cool.

00:54:38.660 --> 00:54:39.060
Yeah.

00:54:39.060 --> 00:54:40.060
Which was super cool.

00:54:40.060 --> 00:54:42.840
So it was like super good to do that.

00:54:42.960 --> 00:54:48.520
And I think that beyond just sort of like, oh, this like gave us this immediate or this

00:54:48.520 --> 00:54:50.060
gave us this like outcome.

00:54:50.060 --> 00:54:54.660
It's like we weren't going for this outcome, but I think it really shows how like this type

00:54:54.660 --> 00:54:58.340
of work, like if you're like, you know, I think very often it's easy to look at like

00:54:58.340 --> 00:55:02.600
base level infrastructure work is like, oh, well, it's just maintenance and you just need

00:55:02.600 --> 00:55:03.740
to do it and blah, blah, blah.

00:55:03.740 --> 00:55:05.960
And, you know, it's not really benefiting anything.

00:55:05.960 --> 00:55:10.200
And it's like, no, like we did this and it like saved money on our bottom line, you know,

00:55:10.200 --> 00:55:12.600
and not necessarily everything is going to be like that.

00:55:12.600 --> 00:55:17.700
But like, I think that thinking about base level infrastructure is like it does have a

00:55:17.700 --> 00:55:18.040
benefit.

00:55:18.040 --> 00:55:22.100
It might not necessarily be obvious before you do it.

00:55:22.100 --> 00:55:27.420
But, you know, this is an example of, OK, if you're doing your upgrades, you get to take

00:55:27.420 --> 00:55:31.220
advantage of all the really hard work that all of the people on the Python language team

00:55:31.220 --> 00:55:35.500
have done to make the, you know, make it more efficient and faster.

00:55:35.500 --> 00:55:35.840
Yeah.

00:55:35.840 --> 00:55:37.740
And it probably opens up other possibilities.

00:55:37.740 --> 00:55:41.800
The previous show I just did, which not out yet, so you wouldn't know, but was talking

00:55:41.800 --> 00:55:45.720
about rough the linter written in Rust for Python.

00:55:45.720 --> 00:55:49.880
But, you know, you have this ability to integrate with more modern tools and modern language.

00:55:49.880 --> 00:55:54.260
It's like, oh, if we got to rewrite this section and Rust for that computation, it's trivial

00:55:54.260 --> 00:55:56.300
now where probably it wasn't before.

00:55:56.300 --> 00:55:57.260
I would imagine.

00:55:57.260 --> 00:56:01.400
I haven't tried it in grading by the seven with, you know, things like that.

00:56:01.400 --> 00:56:04.200
But I bet it's not as easy as the new tools, you know?

00:56:04.200 --> 00:56:04.960
Yeah, for sure.

00:56:04.960 --> 00:56:05.340
All right.

00:56:05.340 --> 00:56:06.920
Well, let's leave it here.

00:56:06.920 --> 00:56:09.320
I think that's all the time we got to talk about it.

00:56:09.320 --> 00:56:14.900
But, you know, you must be enjoying it, enjoying work on the projects and the features more now.

00:56:14.900 --> 00:56:17.460
You can just kind of the world is your oyster again.

00:56:17.460 --> 00:56:17.800
Yeah.

00:56:17.800 --> 00:56:22.620
I love using the project that I've been working on actually lately is we've been adding a lot

00:56:22.620 --> 00:56:24.100
of type annotations internally.

00:56:24.100 --> 00:56:26.560
That's, you know, a Python 3 feature right there.

00:56:26.840 --> 00:56:27.400
Yeah, absolutely.

00:56:27.400 --> 00:56:28.800
You can use f-strings.

00:56:28.800 --> 00:56:30.680
You can use type annotations.

00:56:30.680 --> 00:56:35.800
You can start using tools like mypy, not just standard type annotations just for editors.

00:56:35.800 --> 00:56:40.180
But yeah, Pydantic, for example, all those things, right?

00:56:40.180 --> 00:56:40.660
Very cool.

00:56:40.660 --> 00:56:41.260
All right.

00:56:41.260 --> 00:56:43.400
Now, before you get out of here, I got two questions.

00:56:43.400 --> 00:56:48.100
I always ask at the end of the show, if you're going to write some Python code, what editor are

00:56:48.100 --> 00:56:48.720
you using these days?

00:56:48.720 --> 00:56:49.760
I'm a VIN person.

00:56:49.760 --> 00:56:52.020
Do all my development in VIN.

00:56:52.020 --> 00:56:52.460
Right on.

00:56:52.880 --> 00:56:55.460
And then notable PyPI package.

00:56:55.460 --> 00:56:57.540
Give a shout out to Python Modernize.

00:56:57.540 --> 00:57:00.400
But anything that stands out you want to give a shout out to like that?

00:57:00.400 --> 00:57:01.800
I mentioned Python Modernize.

00:57:01.800 --> 00:57:03.880
Great, excellent tool for what it is.

00:57:03.880 --> 00:57:08.760
I also give a shout out in my, I give a shout out to a couple other things in my talk.

00:57:08.760 --> 00:57:13.760
But I think they're definitely worth giving a shout out to still, which is PyUpgrade, which

00:57:13.760 --> 00:57:14.960
we mentioned earlier.

00:57:14.960 --> 00:57:17.380
It has a lot of really nice features.

00:57:17.380 --> 00:57:22.580
But one of the sort of other things is kind of the other half of Python Modernize is that

00:57:22.580 --> 00:57:28.200
it can take your sort of six shim filled code and turn it into sort of normal Python recode.

00:57:28.640 --> 00:57:35.080
And then another tool by the same, same former colleague of mine, Anthony Stille, is pre-commit.

00:57:35.080 --> 00:57:36.860
They're modernized as a pre-commit hook.

00:57:36.860 --> 00:57:38.240
Packrate is a pre-commit hook.

00:57:38.240 --> 00:57:40.420
That's a, that's a thing that we use extensively internally.

00:57:40.420 --> 00:57:45.400
Super, super nice to be able to like, you know, do all those sorts of things and, and, and

00:57:45.400 --> 00:57:48.400
do it in an incremental way, which is something that was really valuable.

00:57:48.600 --> 00:57:54.060
And then the last one, this is just completely random one, but I just love it is more iter

00:57:54.060 --> 00:57:54.560
tools.

00:57:54.560 --> 00:57:56.160
One of my favorite packages.

00:57:56.160 --> 00:58:01.020
We have like an internal package that has a lot of the like functions that are in more

00:58:01.020 --> 00:58:05.960
iter tools, but they're worse or like quirky in some way that I, that I don't like.

00:58:05.960 --> 00:58:10.080
And so that's something that was like, when I first found out about it, I was like, oh man,

00:58:10.080 --> 00:58:10.620
this is great.

00:58:10.620 --> 00:58:14.700
And, and I think it's pretty popular now, but like, I think it's, it's one of those things

00:58:14.700 --> 00:58:17.740
where it's just sort of like, oh, these, all these little functions that you're like, oh,

00:58:17.740 --> 00:58:18.480
I could write that.

00:58:18.480 --> 00:58:21.960
And it's like, you could, but you'd probably write it, you know, with bad edge cases or

00:58:21.960 --> 00:58:22.220
something.

00:58:22.220 --> 00:58:24.480
It's just, it's a great, great library.

00:58:24.480 --> 00:58:26.140
And it's better if you don't have to write it.

00:58:26.140 --> 00:58:26.700
That's for sure.

00:58:26.700 --> 00:58:27.060
Yes.

00:58:27.060 --> 00:58:27.540
All right.

00:58:27.540 --> 00:58:29.020
Well, Ben, thanks for being on the show.

00:58:29.020 --> 00:58:29.920
Final call action.

00:58:29.920 --> 00:58:34.120
Maybe some other people are out there facing this transformation they got to do.

00:58:34.120 --> 00:58:38.760
Like I said, not actually Python two to three, but you know, some major foundation in their

00:58:38.760 --> 00:58:40.320
code base to another, what do you tell them?

00:58:40.320 --> 00:58:42.400
Figure out a way to make it incremental.

00:58:42.400 --> 00:58:47.500
That's really, I think the main takeaway for me is that incremental changes.

00:58:47.500 --> 00:58:49.380
changes have multiple benefits.

00:58:49.380 --> 00:58:51.000
They're making you less risky.

00:58:51.000 --> 00:58:56.800
You're able to do these types of changes in a way like where you don't necessarily have

00:58:56.800 --> 00:58:58.900
to be like, oh, we have to schedule two years of work.

00:58:58.900 --> 00:59:02.820
It's like, no, you can do, you can do it, you know, a chunk at a time when you have time.

00:59:03.280 --> 00:59:08.100
And also it just like generally makes your, you have less errors.

00:59:08.100 --> 00:59:09.320
Absolutely.

00:59:09.320 --> 00:59:10.040
All right.

00:59:10.040 --> 00:59:11.620
Well, thanks so much for being here.

00:59:11.620 --> 00:59:12.800
It's been great to have you on the show.

00:59:12.800 --> 00:59:13.560
Appreciate it.

00:59:13.560 --> 00:59:14.600
Thanks so much for having me.

00:59:15.880 --> 00:59:18.420
This has been another episode of Talk Python to Me.

00:59:18.420 --> 00:59:20.240
Thank you to our sponsors.

00:59:20.240 --> 00:59:21.840
Be sure to check out what they're offering.

00:59:21.840 --> 00:59:23.260
It really helps support the show.

00:59:23.260 --> 00:59:28.600
Join Cox Automotive and use your technical skills to transform the way the world buys,

00:59:28.600 --> 00:59:30.300
sells, and owns cars.

00:59:30.300 --> 00:59:35.420
Find an exciting position that's right for you at talkpython.fm/cox.

00:59:36.220 --> 00:59:41.020
Earn extra income from sharing your software development opinion at user interviews.

00:59:41.020 --> 00:59:45.740
Head over to talkpython.fm/user interviews to participate today.

00:59:45.740 --> 00:59:47.520
Want to level up your Python?

00:59:47.520 --> 00:59:51.580
We have one of the largest catalogs of Python video courses over at Talk Python.

00:59:51.580 --> 00:59:56.760
Our content ranges from true beginners to deeply advanced topics like memory and async.

00:59:56.760 --> 00:59:59.420
And best of all, there's not a subscription in sight.

00:59:59.420 --> 01:00:02.320
Check it out for yourself at training.talkpython.fm.

01:00:02.320 --> 01:00:04.240
Be sure to subscribe to the show.

01:00:04.240 --> 01:00:07.020
Open your favorite podcast app and search for Python.

01:00:07.020 --> 01:00:08.320
We should be right at the top.

01:00:08.320 --> 01:00:11.280
You can also find the iTunes feed at /itunes,

01:00:11.280 --> 01:00:13.480
the Google Play feed at /play,

01:00:13.480 --> 01:00:17.680
and the direct RSS feed at /rss on talkpython.fm.

01:00:17.680 --> 01:00:21.100
We're live streaming most of our recordings these days.

01:00:21.100 --> 01:00:24.520
If you want to be part of the show and have your comments featured on the air,

01:00:24.520 --> 01:00:28.880
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:00:28.880 --> 01:00:30.800
This is your host, Michael Kennedy.

01:00:30.800 --> 01:00:32.080
Thanks so much for listening.

01:00:32.080 --> 01:00:33.240
I really appreciate it.

01:00:33.240 --> 01:00:35.180
Now get out there and write some Python code.

01:00:35.180 --> 01:00:35.640
I'll see you next time.

01:00:35.640 --> 01:00:35.980
Bye.

01:00:35.980 --> 01:00:36.040
Bye.

01:00:36.040 --> 01:00:36.140
Bye.

01:00:36.140 --> 01:00:36.540
Bye.

01:00:36.540 --> 01:00:36.800
Bye.

01:00:36.800 --> 01:00:37.400
Bye.

01:00:37.400 --> 01:00:37.580
Bye.

01:00:37.580 --> 01:00:37.640
Bye.

01:00:37.640 --> 01:00:37.940
Bye.

01:00:37.940 --> 01:00:38.100
Bye.

01:00:38.100 --> 01:00:38.480
Bye.

01:00:38.480 --> 01:00:38.500
Bye.

01:00:38.500 --> 01:00:38.680
Bye.

01:00:38.680 --> 01:00:38.800
Bye.

01:00:38.800 --> 01:00:39.680
Bye.

01:00:39.680 --> 01:00:39.700
Bye.

01:00:39.700 --> 01:00:40.700
Bye.

01:00:40.700 --> 01:00:41.700
Bye.

01:00:41.700 --> 01:00:42.700
Bye.

01:00:42.700 --> 01:00:43.700
Bye.

01:00:43.700 --> 01:00:44.700
Bye.

01:00:44.700 --> 01:00:45.700
Bye.

01:00:45.700 --> 01:00:46.700
Bye.

01:00:46.700 --> 01:00:47.700
Bye.

01:00:47.700 --> 01:00:48.700
Bye.

01:00:48.700 --> 01:00:49.700
Bye.

01:00:49.700 --> 01:00:50.700
Bye.

01:00:50.700 --> 01:00:51.700
Bye.

01:00:51.700 --> 01:00:52.700
Bye.

01:00:52.700 --> 01:00:53.200
you

01:00:53.200 --> 01:00:55.200
Thank you.

01:00:55.200 --> 01:01:25.180
Thank you.

