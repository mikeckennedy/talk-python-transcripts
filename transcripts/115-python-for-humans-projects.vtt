WEBVTT

00:00:00.001 --> 00:00:03.300
When you think of popular Python packages, what comes to mind?

00:00:03.300 --> 00:00:09.340
There's a good chance that this week's guest, Kenneth Wright, wrote the package you just thought of.

00:00:09.340 --> 00:00:16.000
He's the author of some of Python's most popular libraries, including Requests, Records, Maya, and Pipenv.

00:00:16.000 --> 00:00:20.860
I got a chance to catch up with Kenneth at PyCon 2017 this year. Here's the story.

00:00:20.860 --> 00:00:27.780
This is Talk Python to Me, episode 115, recorded live at PyCon on May 20, 2017.

00:00:27.780 --> 00:00:57.760
Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries,

00:00:57.860 --> 00:00:59.440
the ecosystem, and the personalities.

00:00:59.440 --> 00:01:03.580
This is your host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy.

00:01:03.580 --> 00:01:08.860
Keep up with the show and listen to past episodes at talkpython.fm, and follow the show on Twitter

00:01:08.860 --> 00:01:09.980
via at Talk Python.

00:01:09.980 --> 00:01:13.780
This episode is brought to you by Codeship and Hired.

00:01:13.780 --> 00:01:18.120
Be sure to check out what they're offering during their segments. It really helps support the show.

00:01:18.120 --> 00:01:21.040
Kenneth, welcome back to Talk Python.

00:01:21.040 --> 00:01:22.400
Hi, Michael. Thanks for having me.

00:01:22.560 --> 00:01:26.480
It's really nice to have you back. You always seem to have so many amazing projects.

00:01:26.480 --> 00:01:28.080
Oh, thank you very much.

00:01:28.080 --> 00:01:33.000
And your pulse on what's going on in the community. And we happen to be like right in the center of it.

00:01:33.560 --> 00:01:38.460
Yes, we're here at PyCon. This is my favorite week of the year by far. It's the highlight of my life.

00:01:38.460 --> 00:01:42.840
It's definitely a highlight for me as well. And it's the fact that I can drive to it and not fly to it.

00:01:42.840 --> 00:01:43.760
Oh, where do you live?

00:01:43.760 --> 00:01:45.340
I live 15 minutes from here by car.

00:01:45.340 --> 00:01:46.300
Oh, I'm very jealous.

00:01:46.660 --> 00:01:48.100
So that makes it quite easy.

00:01:48.100 --> 00:01:49.520
It won't be that way next year.

00:01:49.520 --> 00:01:53.840
No, next year is going to be a four-hour flight with no... If I'm lucky, right?

00:01:53.840 --> 00:01:54.300
Yeah.

00:01:54.300 --> 00:01:54.680
Yeah.

00:01:54.680 --> 00:01:56.860
It's all good, though. I'm definitely making it there.

00:01:56.860 --> 00:01:58.940
We'll have the Rock and Roll Hall of Fame. It'll be worth it.

00:01:58.940 --> 00:01:59.860
It'll totally be worth it.

00:01:59.860 --> 00:02:05.060
And, you know, there's a bunch of people that wanted to go to this one, and it's sold out, right?

00:02:05.060 --> 00:02:06.420
Yeah, it sells out every year.

00:02:06.420 --> 00:02:11.300
So if you guys are listening and you're like, this sounds so fun, I want to come, but it's sold out, get your tickets early.

00:02:11.300 --> 00:02:12.560
Yep, always get your tickets early.

00:02:12.560 --> 00:02:13.920
PyCon sells out every year.

00:02:13.920 --> 00:02:19.340
Every year. Okay. You don't need too much of an introduction, but you've done a ton of amazing projects that we're going to talk about.

00:02:19.340 --> 00:02:22.700
But tell people, what do you do day to day? Like, who are you?

00:02:22.700 --> 00:02:30.120
My name is Kenneth Reitz. I'm most well known for being the creator of the Request Library, and I work for Heroku.

00:02:30.120 --> 00:02:34.000
I'm the Python overlord at Heroku, so I'm the language owner of Heroku.

00:02:34.000 --> 00:02:37.740
It's not the language owner of Heroku. The language owner of Python at Heroku,

00:02:38.300 --> 00:02:47.460
meaning that everything that's related to Python, basically, that is about the Heroku product is something that I am in charge of.

00:02:47.460 --> 00:02:51.960
I see. So if I want to deploy my Pyramid or Flask web app...

00:02:51.960 --> 00:02:53.820
Yes. It's my job to ensure that you can.

00:02:53.820 --> 00:02:56.080
Or decide if that's appropriate.

00:02:56.940 --> 00:02:57.480
Yeah, exactly.

00:02:57.480 --> 00:03:03.480
Okay. Yeah, that sounds like a pretty fun job. I've never really had a position that was at an overlord title.

00:03:03.480 --> 00:03:04.640
Oh, I gave it to myself.

00:03:04.640 --> 00:03:06.440
Yeah. Well, look, that's all right.

00:03:06.440 --> 00:03:11.240
They asked me what they wanted on my business cards when I started, and I said Python overlord, so it stuck.

00:03:11.240 --> 00:03:13.740
With the fact that they let you do it, that's awesome. That's really cool.

00:03:13.740 --> 00:03:16.360
My official title is Senior Member of Technical Staff.

00:03:16.360 --> 00:03:17.700
I see. That's way less fun than overlord.

00:03:17.700 --> 00:03:18.540
I know, I know.

00:03:18.540 --> 00:03:21.960
But no, it sounds like a pretty fun project. You like working at Heroku?

00:03:21.960 --> 00:03:26.340
I do. I've been there for five and a half years, and I'm not planning on leaving anytime soon. It's a great company.

00:03:26.340 --> 00:03:28.380
Yeah. You don't think this cloud computer thing, it's a fad?

00:03:28.380 --> 00:03:30.060
No, I'd say I think we're good.

00:03:30.060 --> 00:03:31.780
I think it's going to be around for a while, right?

00:03:31.780 --> 00:03:37.380
Yeah, definitely. Platforms as a service is something that I think only more and more people are going to be using.

00:03:37.380 --> 00:03:50.740
And infrastructure as a service, I think, is probably going to change a lot over the next several years, because things like Docker are coming out and becoming more ubiquitous, and there's a lot of technologies and innovation happening in that space.

00:03:50.740 --> 00:04:01.560
And I think that platforms as a service are going to provide a stable platform for people to kind of keep their heads on straight in that world.

00:04:01.760 --> 00:04:10.040
Yeah, that sounds really interesting. I like Docker, but I feel like we're kind of, like, Docker is an intermediate evolutionary step of something else.

00:04:10.040 --> 00:04:12.280
Yeah, I know exactly what you mean.

00:04:12.280 --> 00:04:12.640
Yeah?

00:04:12.640 --> 00:04:18.940
I haven't used Docker too much. I've only done, like, little toy experiments with it or building example repos.

00:04:18.940 --> 00:04:27.960
To me, it feels like a response to a need that exists, but it's, like, not the answer. It's just, like, the first answer.

00:04:27.960 --> 00:04:31.740
Right, like, we have these VMs. They take too long to set up.

00:04:31.740 --> 00:04:33.200
Too long to start.

00:04:33.200 --> 00:04:35.800
The cache is ridiculous on your machine.

00:04:35.800 --> 00:04:39.920
If you use Docker in any capacity, you should check your disk cache for Docker.

00:04:39.920 --> 00:04:42.660
There's a command to do it, and it'll be, like, 30 gigs.

00:04:42.660 --> 00:04:47.980
You know, there's a lot of room for improvement, but I have to give them a lot of credit.

00:04:47.980 --> 00:04:50.760
The Docker format client is stellar.

00:04:50.760 --> 00:04:55.340
It's a very nice client, and they did a lot of work to build it the right way.

00:04:55.340 --> 00:04:55.700
Nice.

00:04:55.860 --> 00:04:58.340
So do you guys have Docker support at Heroku?

00:04:58.340 --> 00:05:02.640
It's not in GA yet, meaning it's not in general availability, but we do have it in beta.

00:05:02.640 --> 00:05:03.100
Okay.

00:05:03.100 --> 00:05:04.080
Yeah, and it's available.

00:05:04.080 --> 00:05:09.860
You can use it in production if you'd like, and I recommend people doing that, especially if you're using scientific applications.

00:05:10.580 --> 00:05:12.180
It works very well for that on Heroku.

00:05:12.180 --> 00:05:14.360
So you can app get install anything you want.

00:05:14.360 --> 00:05:15.700
You use Conda, for example.

00:05:15.700 --> 00:05:22.020
Right, so you can have a lot of the machine learning stuff that's got lots of weird compilation all set up right on your Docker image, right?

00:05:22.020 --> 00:05:22.680
Yeah, exactly.

00:05:22.680 --> 00:05:23.180
Okay.

00:05:23.180 --> 00:05:24.240
Yeah, very cool.

00:05:24.340 --> 00:05:27.900
So maybe tell us, what's it like to deploy a Python web app to Heroku?

00:05:27.900 --> 00:05:29.460
Git push Heroku master.

00:05:29.460 --> 00:05:30.420
Sounds all right.

00:05:30.420 --> 00:05:39.100
Now, so you have a requirements.txt file that you use to specify your pip requirements, and that's how we know that it's a Python app.

00:05:39.100 --> 00:05:39.280
Okay.

00:05:39.280 --> 00:05:42.660
And we install those requirements, and that's effectively it.

00:05:42.660 --> 00:05:48.560
Then you have a proc file, which is standard on Heroku, which you use to say what your entry points are for your application.

00:05:48.560 --> 00:05:52.700
So you do, like, web colon space command to start your application.

00:05:52.700 --> 00:05:53.040
Gotcha.

00:05:53.280 --> 00:05:54.680
Okay. Yeah, sounds very cool.

00:05:54.680 --> 00:05:55.580
And that's all you need.

00:05:55.580 --> 00:05:58.460
Yeah, so that's maybe a good segue over to the projects that you're working on.

00:05:58.460 --> 00:06:02.760
Like, you've been doing some stuff trying to make virtual environments or environments in general better, right?

00:06:02.760 --> 00:06:03.460
Yes, yes.

00:06:03.460 --> 00:06:05.180
I'm working on a project right now called pip Env.

00:06:05.180 --> 00:06:07.940
It's had, like, 40 releases in the last three months.

00:06:07.940 --> 00:06:10.460
It's been quite a bit of work behind it.

00:06:10.460 --> 00:06:11.600
It's relatively stable.

00:06:11.600 --> 00:06:13.220
All right, so what problem is it trying to solve?

00:06:13.220 --> 00:06:15.900
It's trying to solve, try to be as succinct as possible.

00:06:16.220 --> 00:06:31.140
It's trying to combine the workflows of pip and virtual M together, as well as make it as easy as possible to enable deterministic builds and solve the UX problem of requirements.txt.

00:06:31.520 --> 00:06:37.880
Because requirements.txt can be used deterministically, where you just specify all your requirements and all your pin versions.

00:06:37.880 --> 00:06:38.180
Yeah.

00:06:38.620 --> 00:06:45.380
And it can also be used in a more human-friendly format, where you just put the things that you want, and you may or may not put version numbers in there.

00:06:45.380 --> 00:06:45.640
Right.

00:06:45.640 --> 00:06:47.600
And sometimes it's fine, and sometimes it's not.

00:06:47.600 --> 00:06:52.440
So there's a new project from the PyPA, the Python Package Authority, called pip File.

00:06:52.440 --> 00:06:56.000
And it's a new standard that will replace requirements.txt.

00:06:56.000 --> 00:06:57.700
And it's kind of like a YAML file, is that right?

00:06:57.700 --> 00:06:59.000
It's a TOML file.

00:06:59.000 --> 00:06:59.540
TOML file.

00:06:59.540 --> 00:06:59.920
Yes.

00:06:59.920 --> 00:07:03.100
YAML was discussed, but TOML is what we ended up settling on.

00:07:03.100 --> 00:07:04.840
There are two components to it.

00:07:04.840 --> 00:07:10.220
There's a pip file, which is the human part that you put in the things that you want, like Flask.

00:07:10.220 --> 00:07:12.860
And then there's a lock file, which is JSON.

00:07:12.860 --> 00:07:16.980
And it is generated by a machine and can be parsed by machines.

00:07:16.980 --> 00:07:22.880
And it has the deterministic list of all of your packages that you want to have installed, including all the versions.

00:07:22.880 --> 00:07:30.940
So if you had Flask in your first file, the second file would have Flask, WorkZug, isDangerous, Click, etc.

00:07:30.940 --> 00:07:31.780
I see. That's cool.

00:07:31.780 --> 00:07:33.100
So does it capture the version?

00:07:33.100 --> 00:07:33.720
Yes, absolutely.

00:07:33.840 --> 00:07:38.260
So it captures the version and the transitive closure of your dependencies.

00:07:38.260 --> 00:07:42.380
So you say the top-level dependencies, and it gets the lock JSON as all the dependencies.

00:07:42.380 --> 00:07:42.720
Correct.

00:07:42.720 --> 00:07:43.940
And you have two groups.

00:07:43.940 --> 00:07:45.160
You have default and develop.

00:07:45.160 --> 00:07:51.360
So you can say that there are things that you just want for development and things that you just want for production.

00:07:51.360 --> 00:07:52.460
Right, like pytest.

00:07:52.460 --> 00:07:53.120
Exactly.

00:07:53.120 --> 00:07:54.460
Probably not a good reason to deploy that.

00:07:54.460 --> 00:07:55.240
In production.

00:07:55.240 --> 00:07:56.300
Yeah, but there's no reason.

00:07:56.300 --> 00:07:57.480
It's not harmful.

00:07:57.700 --> 00:08:03.700
So if you're doing something like Selenium or Django toolbar or something like that.

00:08:03.700 --> 00:08:06.220
You need the debugger toolbars that give you extra access.

00:08:06.220 --> 00:08:07.280
Yeah, exactly.

00:08:07.280 --> 00:08:10.460
Maybe don't put that in the plain one, right?

00:08:10.460 --> 00:08:11.360
Exactly, exactly.

00:08:11.360 --> 00:08:14.540
So that's the new work that PyPA is doing.

00:08:14.540 --> 00:08:16.520
So yeah, that's what pipfile is.

00:08:16.520 --> 00:08:19.700
And so what pipenv does is it allows you to use...

00:08:19.700 --> 00:08:23.440
So pipfile is going to be put into pip in the future.

00:08:23.440 --> 00:08:24.660
Do you have any idea of the timing?

00:08:24.660 --> 00:08:29.920
There's a man named Donald Stuffed who is solely responsible for almost all things Python packaging.

00:08:29.920 --> 00:08:30.720
He is Mr. Pip.

00:08:30.720 --> 00:08:36.200
And so he is the gil that is responsible for the contention lock on that project.

00:08:36.200 --> 00:08:37.220
He's doing good work there.

00:08:37.220 --> 00:08:42.060
I've contributed to helping it come along, but he wants to rewrite it and make it more functional and less object-oriented.

00:08:42.060 --> 00:08:46.960
And then eventually we are going to land it in pip proper, so pip will support it.

00:08:46.960 --> 00:08:49.520
In the meantime, you can use it in pipenv.

00:08:49.520 --> 00:08:52.040
So you can use this great new functionality today.

00:08:52.040 --> 00:08:59.200
And what pipenv does is it takes away the brutal frustration of having to create and manage virtual environments.

00:08:59.200 --> 00:09:05.320
In addition, it also allows you to use the pipfile and the pipfile.lock, and it gives you a lot of other niceties.

00:09:05.320 --> 00:09:12.340
For example, I was inspired by using Composer for a few moments when I was helping someone with some PHP stuff,

00:09:12.340 --> 00:09:18.420
which is not something I do, but it was something I was helping a new developer friend of mine walk through a tutorial.

00:09:19.420 --> 00:09:25.000
And we did Composer install something, and it said adding that package to Composer.json.

00:09:25.000 --> 00:09:27.340
And that was when the light bulb struck.

00:09:27.340 --> 00:09:28.760
I thought that was a great idea.

00:09:28.760 --> 00:09:29.240
Yeah.

00:09:29.240 --> 00:09:35.520
So when you do pipemp install requests, it will automatically add requests to your pipfile for you.

00:09:35.520 --> 00:09:37.580
So you don't have to go and manually curate this file.

00:09:37.580 --> 00:09:39.680
It'll add and remove packages from it for you.

00:09:39.680 --> 00:09:42.480
So the file exists basically as you pip install things.

00:09:42.480 --> 00:09:44.180
Pipemp install things.

00:09:44.180 --> 00:09:44.900
Inf install things.

00:09:44.900 --> 00:09:47.320
It will find that file and update it automatically.

00:09:47.320 --> 00:09:47.900
Precisely.

00:09:48.020 --> 00:09:48.360
All right.

00:09:48.360 --> 00:09:53.000
And you can lock it, and then you can also specify if you want a Python 2 or Python 3 virtualenv.

00:09:53.000 --> 00:09:55.260
And it's really nice.

00:09:55.260 --> 00:10:01.880
It put a lot of work into the UI, and it has some nice colors and Braille spinners, and it's a very polished product.

00:10:01.880 --> 00:10:02.480
Really awesome.

00:10:02.480 --> 00:10:04.140
And so that's out now, right?

00:10:04.140 --> 00:10:04.920
People can find it.

00:10:04.920 --> 00:10:05.200
Yes.

00:10:05.200 --> 00:10:06.020
What's the path?

00:10:06.020 --> 00:10:06.940
How do they go get it?

00:10:06.940 --> 00:10:08.620
Well, you can pip install pipemp.

00:10:08.620 --> 00:10:09.540
It's very meta.

00:10:09.540 --> 00:10:14.020
And also, it's available at pipemp.org, and there's a nice little animated GIF that'll, or

00:10:14.020 --> 00:10:16.640
GIF, I'm not sure what the official terminology there is.

00:10:16.640 --> 00:10:17.980
You're going to start a GIF GIF fight.

00:10:17.980 --> 00:10:18.800
I don't remember.

00:10:18.800 --> 00:10:19.460
I'm too tired.

00:10:19.460 --> 00:10:20.360
It's PyCon.

00:10:20.360 --> 00:10:20.760
Yeah.

00:10:20.760 --> 00:10:22.480
I actually don't know which one's proper.

00:10:22.480 --> 00:10:28.600
Anyway, there's an animated image file that allows you to see it in action.

00:10:28.600 --> 00:10:30.680
So yeah, pipemp.org.

00:10:30.680 --> 00:10:31.640
You can check it out.

00:10:31.640 --> 00:10:31.900
Nice.

00:10:31.900 --> 00:10:35.240
And are you looking for people to contribute to it, or is it kind of doing its own thing,

00:10:35.240 --> 00:10:35.740
or what's the status?

00:10:35.740 --> 00:10:36.540
It's relatively stable.

00:10:36.540 --> 00:10:39.880
What I'm looking for right now is as much feedback as possible, so I can know how to

00:10:39.880 --> 00:10:40.580
iterate next.

00:10:40.580 --> 00:10:40.940
Awesome.

00:10:40.940 --> 00:10:42.960
So people should just try it out.

00:10:42.960 --> 00:10:47.060
I want everyone to start using it, because I think it's in a great place where it could

00:10:47.060 --> 00:10:52.260
become the next virtual M wrapper, effectively, the thing that everyone uses to manage virtual

00:10:52.260 --> 00:10:54.400
M's and be their go-to tool.

00:10:54.400 --> 00:10:56.060
And I think it's actually ready for that.

00:10:56.060 --> 00:11:00.020
So I just kind of want to market it and get people to know it.

00:11:00.020 --> 00:11:05.560
And then once it gets enough, the snowball starts rolling, then people use packaging tools

00:11:05.560 --> 00:11:07.260
because they're told to by other people.

00:11:07.260 --> 00:11:08.900
So it needs to be...

00:11:08.900 --> 00:11:10.340
The tutorial says type this.

00:11:10.340 --> 00:11:11.100
Exactly.

00:11:11.100 --> 00:11:11.680
Exactly.

00:11:11.680 --> 00:11:11.800
Exactly.

00:11:11.800 --> 00:11:12.580
So that's...

00:11:12.580 --> 00:11:15.240
It'll be a snowball effect, and it'll...

00:11:15.240 --> 00:11:19.420
That's the goal for the project, is to become the next de facto standard, and to have all

00:11:19.420 --> 00:11:22.100
the best practices baked into it so that you don't have to worry about them.

00:11:22.100 --> 00:11:22.440
Yeah.

00:11:22.440 --> 00:11:23.480
It sounds really nice.

00:11:23.480 --> 00:11:25.180
It also sounds beginner-friendly.

00:11:25.180 --> 00:11:25.540
Yeah.

00:11:25.540 --> 00:11:26.360
It's very beginner-friendly.

00:11:26.360 --> 00:11:30.220
It's also very advanced user-friendly, too, because it just does all the stuff you would

00:11:30.220 --> 00:11:31.540
do by hand for you.

00:11:31.540 --> 00:11:31.880
Yeah.

00:11:31.880 --> 00:11:32.580
Yeah.

00:11:32.640 --> 00:11:36.100
It's just the beginners don't know what the magic is, and the people who have been doing

00:11:36.100 --> 00:11:38.440
it for a while are like, oh, it's doing these three things, or whatever, right?

00:11:38.440 --> 00:11:38.980
Yeah, precisely.

00:11:38.980 --> 00:11:39.740
Precisely.

00:11:39.740 --> 00:11:43.680
But if you're a beginner, or you haven't used Virtual Lab and stuff like that, it just works,

00:11:43.680 --> 00:11:44.860
and it tells you what to type next.

00:11:44.860 --> 00:11:49.400
You just type pivm shell, and it gives you a shell that has your new Python interpreter

00:11:49.400 --> 00:11:49.820
in it.

00:11:49.980 --> 00:11:54.600
And it's much more approachable, and it works on Windows, and it's just a lot of

00:11:54.600 --> 00:11:56.480
UX polish into the whole process.

00:11:56.480 --> 00:11:56.840
Yeah.

00:11:56.840 --> 00:11:57.800
It's good that it works on Windows.

00:11:57.800 --> 00:12:02.860
That means it's really easy to recommend for your tutorial and your whatever project you're

00:12:02.860 --> 00:12:03.540
trying to get set up.

00:12:03.540 --> 00:12:04.340
Okay.

00:12:04.340 --> 00:12:09.360
So that's your new virtual environment dependency project.

00:12:09.360 --> 00:12:12.380
What else are you up to since we talked to you about two years ago?

00:12:12.380 --> 00:12:15.520
I've written a couple of libraries that have been interesting.

00:12:15.520 --> 00:12:19.940
The one that I want to talk about the most is called Maya, which I think is very interesting.

00:12:19.940 --> 00:12:20.900
How do you spell it?

00:12:20.900 --> 00:12:22.160
M-A-Y-A.

00:12:22.160 --> 00:12:22.560
Maya.

00:12:22.560 --> 00:12:23.520
Yeah, yeah.

00:12:23.520 --> 00:12:27.840
Like the Hindu philosophy of the illusion, because time zones are an illusion.

00:12:27.840 --> 00:12:33.600
So it is a daytime library that kind of turns time zones on their head, because when you're

00:12:33.600 --> 00:12:36.760
dealing with time zones, you have to deal with localization if you're doing any time zone

00:12:36.760 --> 00:12:37.580
algebra normally.

00:12:37.580 --> 00:12:42.860
So that's if you want to do any math to calculate this time zone versus that time zone, which is

00:12:42.860 --> 00:12:45.340
something that you have to do a lot if you're dealing with timestamps.

00:12:45.420 --> 00:12:47.600
Effectively, you're already you're parsing a website.

00:12:47.600 --> 00:12:48.500
Yeah, for example.

00:12:48.500 --> 00:12:49.280
What are we going to say?

00:12:49.280 --> 00:12:52.640
I was going to say, like, if you're already dealing with time zones, you're like, you're

00:12:52.640 --> 00:12:56.900
a little one step down that path as well of like, well, yeah, you can always hack it to

00:12:56.900 --> 00:12:57.140
work.

00:12:57.140 --> 00:13:01.000
But if you're trying to do things the right way, I actually cannot figure out how to do

00:13:01.000 --> 00:13:04.060
it the right way without using it without building this library.

00:13:04.060 --> 00:13:10.340
So the problem for me was writing a little thing with like an RSS feed and it scraped the

00:13:10.340 --> 00:13:14.680
time from a website and I told it what time zone it was in and like it would report

00:13:14.680 --> 00:13:18.660
back that the RSS feed was being published at like two in the morning and it was like that

00:13:18.660 --> 00:13:19.480
was not the right time.

00:13:19.480 --> 00:13:20.360
I wanted to be at midnight.

00:13:20.360 --> 00:13:24.680
So I wanted to fix it the right way at the standard library and I and I worked on it for

00:13:24.680 --> 00:13:27.680
like four hours on like three, like four lines of code.

00:13:28.340 --> 00:13:32.560
And, you know, and I'm like someone who knows Python pretty well, you know, is it's like

00:13:32.560 --> 00:13:34.280
not, it shouldn't be this difficult.

00:13:34.280 --> 00:13:35.220
You should be able to compare two times.

00:13:35.220 --> 00:13:35.640
Come on.

00:13:35.640 --> 00:13:39.560
And I spent all that time and then I finally got it to work and then I deployed it and then

00:13:39.560 --> 00:13:44.480
it didn't work into production because the server had a different locale than my local machine

00:13:44.480 --> 00:13:47.540
because the time zone algebra is different when you have different locales.

00:13:47.540 --> 00:13:50.180
And that was what the straw that broke the camel's back.

00:13:50.180 --> 00:13:51.040
So I see.

00:13:51.040 --> 00:13:52.440
It's one thing to have just time zones.

00:13:52.560 --> 00:13:57.360
It's another to have German time zones versus U.S. time zones or something like that, right?

00:13:57.360 --> 00:13:57.880
Precisely.

00:13:57.880 --> 00:13:58.520
Precisely.

00:13:58.520 --> 00:13:58.820
Yeah.

00:13:58.820 --> 00:14:04.200
When I'm doing math on time zones, I don't care what the machine, where my machine is located.

00:14:04.200 --> 00:14:05.320
It's the same everywhere.

00:14:05.320 --> 00:14:06.120
It doesn't matter.

00:14:06.120 --> 00:14:09.260
That should not be taken into account when I'm doing time zone algebra.

00:14:09.260 --> 00:14:16.380
So Maya exists to be, have the philosophy that your data should always be in UTC all the

00:14:16.380 --> 00:14:16.720
time.

00:14:16.720 --> 00:14:19.140
You can import it from another time zone.

00:14:19.140 --> 00:14:20.780
You can export it to another time zone.

00:14:20.780 --> 00:14:22.440
You can do that very easily.

00:14:22.640 --> 00:14:26.280
You can generate date times with it, either naive or non-naive.

00:14:26.280 --> 00:14:27.360
What's a naive date time?

00:14:27.360 --> 00:14:32.580
A naive date time is a date time object that does not contain a time zone object.

00:14:32.580 --> 00:14:33.060
Yeah, sure.

00:14:33.060 --> 00:14:35.360
So in Python, you can't be kind of like...

00:14:35.360 --> 00:14:37.140
Which is surprisingly difficult to do.

00:14:37.140 --> 00:14:38.380
That's not like a one-liner.

00:14:38.380 --> 00:14:40.100
That's like an eight-liner in Python.

00:14:40.100 --> 00:14:41.040
Which is crazy.

00:14:41.040 --> 00:14:44.160
If you've got one date time that has a time zone.

00:14:44.160 --> 00:14:45.260
But with Maya, it is a one-liner.

00:14:45.260 --> 00:14:45.960
Yes, of course.

00:14:45.960 --> 00:14:46.280
Yes.

00:14:46.280 --> 00:14:49.760
And you've got a date time with time zone and one that doesn't.

00:14:49.760 --> 00:14:51.300
You can't even subtract them, right?

00:14:51.300 --> 00:14:52.080
They can't be...

00:14:52.080 --> 00:14:53.140
I'm not sure what would happen.

00:14:53.140 --> 00:14:54.740
I think it would say it's incompatible.

00:14:54.740 --> 00:14:56.520
Yeah, I think they're kind of incompatible with each other.

00:14:56.520 --> 00:14:57.040
Yeah.

00:14:57.200 --> 00:15:03.040
So the way that you should approach this, if you're ever building an application, is that

00:15:03.040 --> 00:15:05.660
all of your data should always be UTC all the time.

00:15:05.660 --> 00:15:06.740
And you should know that.

00:15:06.740 --> 00:15:08.260
So it should be time zone aware.

00:15:08.260 --> 00:15:09.560
You should say it's always UTC.

00:15:09.560 --> 00:15:12.120
You should never store it as anything else other than UTC.

00:15:12.120 --> 00:15:18.160
And UTC has its problems because UTC is off by a second now and then.

00:15:18.160 --> 00:15:19.240
But that's okay.

00:15:19.240 --> 00:15:19.900
We're building...

00:15:19.900 --> 00:15:20.900
This is for humans here.

00:15:20.900 --> 00:15:22.940
This is a date time for humans.

00:15:22.940 --> 00:15:23.640
Right.

00:15:23.720 --> 00:15:24.960
So the idea is...

00:15:24.960 --> 00:15:26.100
We're not working on particle colliders.

00:15:26.100 --> 00:15:26.420
Yeah.

00:15:26.420 --> 00:15:30.580
This is for parsing websites and dealing with dates on websites and things like that.

00:15:30.580 --> 00:15:33.680
This is not for scientific uses and stuff like that.

00:15:33.680 --> 00:15:35.780
So it's all based on epoch time.

00:15:35.780 --> 00:15:40.820
And it does the math that way, based on a number of seconds since, I don't know, January 1st,

00:15:40.820 --> 00:15:42.280
1970 or something like that.

00:15:42.280 --> 00:15:42.500
Yeah.

00:15:42.660 --> 00:15:45.420
And it doesn't use any localization for any of its time zone algebra.

00:15:45.420 --> 00:15:46.420
And it works very well.

00:15:46.420 --> 00:15:48.560
And it allows you to just pass in...

00:15:48.560 --> 00:15:50.400
It has two methods for importing stuff.

00:15:50.400 --> 00:15:52.500
It has dot when.

00:15:52.500 --> 00:15:59.220
And you can pass in there any English, any human form of a date.

00:15:59.220 --> 00:15:59.720
Okay.

00:15:59.720 --> 00:16:01.940
And it'll give you back the Maya date time object.

00:16:01.940 --> 00:16:02.400
That's awesome.

00:16:02.400 --> 00:16:03.280
Like, give us some examples.

00:16:03.280 --> 00:16:05.900
Like, a week ago, for example.

00:16:05.900 --> 00:16:07.280
Because that's something that you see on a website.

00:16:07.280 --> 00:16:07.580
Yeah.

00:16:07.680 --> 00:16:12.560
Or you could just, like, the way any human would ever write a date in any way.

00:16:12.560 --> 00:16:13.080
It'll...

00:16:13.080 --> 00:16:14.220
Two hours from now.

00:16:14.220 --> 00:16:14.580
Yeah.

00:16:14.580 --> 00:16:15.840
Two hours from now works.

00:16:15.840 --> 00:16:19.680
You could do, like, 2, 4, 3, you know, or 2, 4, 14, something like that.

00:16:19.680 --> 00:16:23.520
That works January 15th, 2015, stuff like that.

00:16:23.520 --> 00:16:24.420
And you can parse all these?

00:16:24.420 --> 00:16:25.720
And then there's dot parse.

00:16:25.720 --> 00:16:27.840
And dot parse gives you...

00:16:27.840 --> 00:16:33.240
It will read all known standards for machine parsable dates.

00:16:33.900 --> 00:16:37.940
And it'll give it to you in the Maya date time object, which is in UTC.

00:16:37.940 --> 00:16:41.160
And then you can export it from there to a date time object.

00:16:41.160 --> 00:16:47.100
And then it has methods to import and export from all the major RFCs for all the date time objects.

00:16:47.100 --> 00:16:48.740
So I'm very proud of this library.

00:16:48.740 --> 00:16:49.420
I think it's great.

00:16:49.420 --> 00:16:50.480
And I think everyone should use it.

00:16:50.480 --> 00:16:51.460
It's awesome.

00:16:51.460 --> 00:16:51.880
Yeah, yeah.

00:16:51.880 --> 00:16:54.740
I've definitely checked it out and done some stuff with it.

00:16:54.740 --> 00:16:55.480
You're right.

00:16:55.480 --> 00:16:57.160
Those are just surprisingly hard problems.

00:16:57.160 --> 00:16:58.040
And I don't know why.

00:16:58.040 --> 00:17:03.800
It took me, like, a surprisingly lot of thought and work to build this library.

00:17:04.320 --> 00:17:06.020
And it shouldn't have.

00:17:06.020 --> 00:17:11.860
Like, it took me a good three days of solid work to build the prototype of it.

00:17:11.860 --> 00:17:12.800
And it...

00:17:12.800 --> 00:17:13.400
So just...

00:17:13.400 --> 00:17:15.260
I had the API in my head of what I wanted.

00:17:15.260 --> 00:17:17.920
And then, like, to actually get it working properly...

00:17:17.920 --> 00:17:18.600
All variations.

00:17:18.600 --> 00:17:23.500
...by using the proper APIs and stuff, I had to look up so many Stack Overflow questions and stuff.

00:17:23.500 --> 00:17:28.300
And that's the pain I'm trying to help people avoid is to ever have to ever do any of that work.

00:17:28.300 --> 00:17:30.760
You're like, okay, we should solve this once and for all and forever?

00:17:30.760 --> 00:17:31.340
Precisely.

00:17:31.340 --> 00:17:31.940
Precisely.

00:17:31.940 --> 00:17:32.320
Awesome.

00:17:32.320 --> 00:17:32.620
All right.

00:17:32.660 --> 00:17:33.220
Well, thanks for that.

00:17:33.220 --> 00:17:33.860
Absolutely.

00:17:33.860 --> 00:17:35.700
So I want people to give that a try, Maya.

00:17:35.700 --> 00:17:42.780
If you ever have to deal with date times, especially if you're parsing websites or dealing with data from another source that has a date time, you should check out Maya.

00:17:42.780 --> 00:17:43.220
Cool.

00:17:43.220 --> 00:17:45.000
Yeah, so that sounds really cool.

00:17:45.000 --> 00:17:49.640
There's two other projects that I know of that kind of in this area, I know they're not necessarily solving the same problem.

00:17:49.640 --> 00:17:50.500
One is called Arrow.

00:17:50.500 --> 00:17:51.120
Yes.

00:17:51.120 --> 00:17:51.740
Are you familiar with Arrow?

00:17:51.740 --> 00:17:53.160
And then the other is Python DateUtil.

00:17:53.160 --> 00:17:54.940
Like, can you just maybe say...

00:17:54.940 --> 00:17:58.240
So Python DateUtil is a dependency of Maya.

00:17:58.420 --> 00:18:02.180
Maya also uses something called Pendulum, which is similar to Arrow.

00:18:02.180 --> 00:18:02.600
All right.

00:18:02.660 --> 00:18:08.900
So it's kind of like this competition in this space, but we're all friends and we're building each other up.

00:18:08.900 --> 00:18:11.860
So I'm using Pendulum to do some of the...

00:18:11.860 --> 00:18:15.600
I was doing my own date parsing with another humanize or something.

00:18:15.900 --> 00:18:19.300
I have like five or six dependencies that do a lot of this stuff.

00:18:19.300 --> 00:18:24.020
And I just wanted an API that like put all the tools together and works great.

00:18:24.020 --> 00:18:26.200
So Arrow, I'm not overly familiar.

00:18:26.200 --> 00:18:28.960
I had to look at the readme to know which one's which off the top of my head.

00:18:28.960 --> 00:18:30.720
Yeah, I always confuse them myself.

00:18:30.720 --> 00:18:40.660
They all weren't what I wanted because I really want this UTC is king slash queen like mentality in my head of that.

00:18:40.660 --> 00:18:47.680
Like it's always your data should always be UTC and that you can import and export to other things.

00:18:47.680 --> 00:18:52.580
And a couple of them did have that, but it just wasn't as solidified as I wanted it to be.

00:18:52.580 --> 00:18:53.260
So, okay.

00:18:53.260 --> 00:18:53.960
So, yeah.

00:18:53.960 --> 00:18:55.440
Yeah, that's a really cool project.

00:18:55.440 --> 00:18:57.260
I've already played with it.

00:18:57.260 --> 00:19:07.480
And I was talking to someone here, David Golden, and he's talking about adding a relatively complicated class to add times ranges.

00:19:07.480 --> 00:19:13.140
So we may get the ability to do some relatively complicated time range algebra.

00:19:13.140 --> 00:19:13.740
Right.

00:19:13.740 --> 00:19:16.180
For calendars, like are there conflicts?

00:19:16.180 --> 00:19:16.260
Exactly.

00:19:16.260 --> 00:19:17.520
That's where it's coming from.

00:19:17.520 --> 00:19:17.800
Yeah.

00:19:17.800 --> 00:19:22.340
Time conflicts for calendars for like 25 people and stuff like that.

00:19:22.340 --> 00:19:23.520
That's what he wants to solve.

00:19:23.520 --> 00:19:25.520
So we'll see if we get there on Monday.

00:19:25.520 --> 00:19:26.520
That'd be an awesome add-on.

00:19:26.520 --> 00:19:27.660
So you're going to do that for the sprint?

00:19:27.660 --> 00:19:28.240
You're going to work on that?

00:19:28.240 --> 00:19:28.600
Potentially.

00:19:28.600 --> 00:19:28.940
Yeah.

00:19:28.940 --> 00:19:30.000
If it's a good fit.

00:19:30.000 --> 00:19:30.260
Okay.

00:19:30.260 --> 00:19:30.640
Yeah.

00:19:30.640 --> 00:19:30.980
Yeah.

00:19:30.980 --> 00:19:31.260
Yeah.

00:19:31.260 --> 00:19:31.800
Very nice.

00:19:31.800 --> 00:19:36.420
This portion of Talk Python to Me is brought to you by CodeChip.

00:19:36.420 --> 00:19:42.620
Try CodeChip Basic, a free, simple, out-of-the-box, continuous integration service in the cloud.

00:19:42.620 --> 00:19:45.880
Thousands of customers use CodeChip Basic every day.

00:19:45.880 --> 00:19:50.960
Its pre-installed CI dependencies make testing your software and deploying it work out-of-the-box.

00:19:50.960 --> 00:19:55.180
The average setup time for CodeChip Basic is less than three minutes.

00:19:55.740 --> 00:20:01.300
CodeChip Basic comes with a free plan that grants 100 builds per month, unlimited projects, and

00:20:01.300 --> 00:20:02.240
unlimited users.

00:20:02.240 --> 00:20:04.080
Do you run an open source project?

00:20:04.080 --> 00:20:06.020
Those are always free on CodeChip.

00:20:06.020 --> 00:20:08.860
And they just improved their Python support.

00:20:08.860 --> 00:20:15.240
So give CodeChip a try and visit talkpython.fm/CodeChip to learn more and sign up for

00:20:15.240 --> 00:20:15.540
free.

00:20:15.540 --> 00:20:18.640
That's talkpython.fm/CodeChip.

00:20:19.960 --> 00:20:24.700
So another project that you're working on that I think is really nice and has a very,

00:20:24.700 --> 00:20:27.820
take something kind of overly complicated and make it simple is Records.

00:20:27.820 --> 00:20:28.220
Yes.

00:20:28.220 --> 00:20:30.080
I don't think we talked about Records before, did we?

00:20:30.080 --> 00:20:30.500
I don't remember.

00:20:30.500 --> 00:20:30.800
I don't believe so.

00:20:30.800 --> 00:20:32.840
I think I wrote it after we talked last.

00:20:32.840 --> 00:20:33.220
Yeah.

00:20:33.220 --> 00:20:33.720
So yeah.

00:20:33.720 --> 00:20:34.720
Why don't you tell everyone about Records?

00:20:34.720 --> 00:20:38.440
Actually, someone came into the booth, my booth, and said, hey, tell me about Records.

00:20:38.520 --> 00:20:39.780
You know, I heard you talking about it.

00:20:39.780 --> 00:20:40.160
It's really cool.

00:20:40.160 --> 00:20:41.140
Show me a demo of Records.

00:20:41.140 --> 00:20:41.660
Oh, cool.

00:20:41.660 --> 00:20:42.020
Isn't that cool?

00:20:42.020 --> 00:20:42.320
Cool.

00:20:42.320 --> 00:20:43.020
Yeah, those guys are fun.

00:20:43.020 --> 00:20:43.880
That's awesome.

00:20:43.880 --> 00:20:44.220
So yeah.

00:20:44.220 --> 00:20:45.500
Tell everyone else about Records.

00:20:45.500 --> 00:20:51.320
So Records is, so SQLAlchemy is an incredible library for dealing with SQL.

00:20:51.320 --> 00:20:56.900
And it is really interesting when you work for an organization like I do, the way that we

00:20:56.900 --> 00:21:02.740
deal with data is that we use tools like Heroku Data Clips.

00:21:02.740 --> 00:21:07.960
And we use a tool called Looker, which allows you to get access in our data warehouse and

00:21:07.960 --> 00:21:10.480
do some very advanced queries and get SQL out of it.

00:21:10.480 --> 00:21:18.960
And I want to be able to take raw SQL that is written, that is trusted by a source like,

00:21:18.960 --> 00:21:25.340
for example, Looker, which is generated by our business team, BizOps team, and put it

00:21:25.340 --> 00:21:26.000
into my code.

00:21:26.000 --> 00:21:29.860
And you can do that with PsychoPG, too, very easily.

00:21:29.860 --> 00:21:32.720
You can just like, say, execute this SQL.

00:21:32.720 --> 00:21:37.900
But SQLAlchemy gives you a lot of other benefits, like connection pooling.

00:21:37.900 --> 00:21:41.040
And it has nice connection drivers.

00:21:41.040 --> 00:21:46.140
You can figure out what kind of database engine to use on its own, right?

00:21:46.140 --> 00:21:47.040
Precisely.

00:21:47.040 --> 00:21:50.500
SQLAlchemy, MySQL, it just figures it out.

00:21:50.500 --> 00:21:55.680
Yeah, and it has a very nice way of, and I also wanted to get back dictionaries of data.

00:21:56.040 --> 00:21:57.680
So each row is a dictionary.

00:21:57.680 --> 00:22:00.020
It's also a tuple as well as a dictionary.

00:22:00.020 --> 00:22:01.780
It acts as both at the same time.

00:22:01.780 --> 00:22:02.220
Yes.

00:22:02.220 --> 00:22:04.080
Like a named tuple, right?

00:22:04.080 --> 00:22:06.320
It's a named tuple that is also a dictionary.

00:22:06.320 --> 00:22:07.160
It's kind of both.

00:22:07.160 --> 00:22:09.140
It's a very cool little thing.

00:22:09.140 --> 00:22:09.520
Yeah.

00:22:09.520 --> 00:22:13.680
And so I guess for people, if they haven't used it, it's a little bit like just the dbapi,

00:22:13.680 --> 00:22:14.020
too.

00:22:14.020 --> 00:22:15.540
One line of it.

00:22:15.540 --> 00:22:16.120
Right?

00:22:16.120 --> 00:22:16.780
You just like...

00:22:16.780 --> 00:22:21.740
Well, the idea is if you want to use SQLAlchemy and you want to just do raw SQL, you

00:22:21.740 --> 00:22:23.120
have to Google a lot of stuff.

00:22:23.120 --> 00:22:24.620
And it's like a good...

00:22:24.620 --> 00:22:29.220
If you want to do it properly, it's like a good 25, 30, 40 lines of code.

00:22:29.220 --> 00:22:31.820
Kind of got to break out of the object ORM side of things.

00:22:31.820 --> 00:22:32.120
Yeah.

00:22:32.120 --> 00:22:34.340
And then there's some niceties that you want to build into it.

00:22:34.340 --> 00:22:37.420
And then it ends up being 100, 200 lines of code, 300 lines of code.

00:22:37.420 --> 00:22:39.520
So I built a library for that.

00:22:39.520 --> 00:22:41.900
And in addition to that, I also built exporting.

00:22:42.200 --> 00:22:45.420
So I have another library that's very old called Tablib.

00:22:45.420 --> 00:22:45.760
Okay.

00:22:45.760 --> 00:22:54.240
And it gives you tabular data sets that you can export as Excel or as CSV or as a bunch

00:22:54.240 --> 00:22:55.340
of formats, JSON, YAML.

00:22:55.340 --> 00:22:57.820
So this supports that as well.

00:22:57.820 --> 00:22:59.280
So you can take your raw SQL.

00:22:59.280 --> 00:23:00.840
You can get Excel out of it.

00:23:00.840 --> 00:23:02.400
You can get TSV.

00:23:02.400 --> 00:23:03.060
You can get CSV.

00:23:03.060 --> 00:23:05.280
You can get HTML tables.

00:23:05.280 --> 00:23:06.380
Yeah.

00:23:06.380 --> 00:23:07.000
Very, very cool.

00:23:07.000 --> 00:23:11.960
So it's just basically for taking a report from SQL and sticking it into your code base.

00:23:12.060 --> 00:23:15.360
And either using it to power your application or to generate a report.

00:23:15.360 --> 00:23:17.040
And there's a command line tool that comes with it too.

00:23:17.040 --> 00:23:20.580
So it's very little useful, small little thing.

00:23:20.580 --> 00:23:20.920
Right.

00:23:20.920 --> 00:23:21.800
It's a fun little toy.

00:23:21.800 --> 00:23:23.080
But it's very, very powerful.

00:23:23.080 --> 00:23:23.660
It's cool.

00:23:23.660 --> 00:23:28.420
It seems to me like if you just want to connect, ask the database a quick question, like this

00:23:28.420 --> 00:23:29.580
is a really nice way to do it.

00:23:29.580 --> 00:23:30.180
Exactly.

00:23:30.180 --> 00:23:30.840
Exactly.

00:23:30.840 --> 00:23:31.780
Yeah.

00:23:31.780 --> 00:23:34.500
And you don't want to use SQLAlchemy directly if you're doing that.

00:23:34.500 --> 00:23:38.160
Because again, you have to look it up and it's not very intuitive.

00:23:38.460 --> 00:23:42.500
And if you want to parameterize your queries, it's not standard.

00:23:42.500 --> 00:23:47.100
It took me a while to figure out how to parameterize queries in a standardized way that works across

00:23:47.100 --> 00:23:48.580
all query languages.

00:23:48.580 --> 00:23:52.700
So I had to figure out a lot of stuff to get it to work is what I'm trying to say.

00:23:53.180 --> 00:23:55.980
So I solved all those problems with records.

00:23:55.980 --> 00:23:57.920
Nobody wants to be little Bobby Tables.

00:23:57.920 --> 00:23:59.080
Yes, exactly.

00:23:59.080 --> 00:23:59.840
Exactly.

00:23:59.840 --> 00:24:02.540
By the time you put all the correct pieces together, it's a lot of work.

00:24:02.540 --> 00:24:02.820
Yeah.

00:24:02.820 --> 00:24:03.700
So exactly.

00:24:03.700 --> 00:24:08.680
So it's easy if you're going to use PsychoPG2 or something like that to, they have good parameterization

00:24:08.680 --> 00:24:09.460
in PsychoPG2.

00:24:09.460 --> 00:24:10.180
I shouldn't say that.

00:24:10.180 --> 00:24:10.400
Yeah.

00:24:10.400 --> 00:24:13.680
If you're going to use something like SQLAlchemy or anything like that, if you're going

00:24:13.680 --> 00:24:16.420
to be using raw SQL, it's really easy to not parameterize properly.

00:24:17.420 --> 00:24:21.060
One little plus with the string and the variable and it seemed all so innocent.

00:24:21.060 --> 00:24:21.360
Yeah.

00:24:21.360 --> 00:24:21.980
So innocent.

00:24:21.980 --> 00:24:22.480
So innocent.

00:24:22.480 --> 00:24:23.540
What could possibly go wrong?

00:24:23.540 --> 00:24:27.920
I just merged that one pull request that I got from that stranger and then suddenly all

00:24:27.920 --> 00:24:29.020
my bank accounts were empty.

00:24:29.020 --> 00:24:29.880
It didn't make any sense.

00:24:29.880 --> 00:24:30.660
I don't know what happened.

00:24:30.660 --> 00:24:31.520
This world's complicated.

00:24:31.520 --> 00:24:35.820
So are there other projects you want to talk about or maybe just stuff that inspires you?

00:24:35.820 --> 00:24:40.920
So interesting things in the Python world right now for me are API Star by Tom Christie.

00:24:40.920 --> 00:24:41.400
Yeah.

00:24:41.400 --> 00:24:45.100
So he's here not far from my booth and a little not too far from your booth.

00:24:45.100 --> 00:24:47.140
And he's doing really cool stuff.

00:24:47.140 --> 00:24:48.760
He's the Django Rush framework guy.

00:24:48.760 --> 00:24:49.380
Yes, he is.

00:24:49.380 --> 00:24:49.640
Yeah.

00:24:49.640 --> 00:24:49.880
Okay.

00:24:49.880 --> 00:24:55.460
So he built this thing that is a new API framework for Python 3 only.

00:24:55.460 --> 00:24:59.780
And it uses type annotations in the first way that I've ever nodded my head in agreement.

00:24:59.780 --> 00:25:03.120
Whenever I've seen type annotations, I was like, that's the stupidest thing I've ever seen

00:25:03.120 --> 00:25:03.580
in my life.

00:25:03.580 --> 00:25:04.760
Why don't want that in my Python?

00:25:04.760 --> 00:25:07.660
But when I see him using them, I'm like, oh, I get it.

00:25:07.660 --> 00:25:08.280
That makes sense.

00:25:08.280 --> 00:25:08.560
Yeah.

00:25:08.560 --> 00:25:11.020
So I think it's kind of a cool idea.

00:25:11.020 --> 00:25:14.460
And I used it to throw together a little toy API the other day.

00:25:14.460 --> 00:25:17.660
And the cool thing about it is that it's not Flask.

00:25:17.660 --> 00:25:18.600
I love Flask.

00:25:18.600 --> 00:25:19.600
Flask is incredible.

00:25:19.600 --> 00:25:22.220
I'm a contributor and maintainer of Flask.

00:25:22.220 --> 00:25:24.280
Flask is one of my favorite things in the world.

00:25:24.280 --> 00:25:26.640
But it's just nice to change things up.

00:25:26.640 --> 00:25:27.120
Yeah.

00:25:27.120 --> 00:25:30.540
And the really cool thing about it is that it automatically generates documentation for

00:25:30.540 --> 00:25:30.760
you.

00:25:30.760 --> 00:25:32.740
And it's interactive documentation.

00:25:32.740 --> 00:25:33.480
Awesome.

00:25:33.480 --> 00:25:33.640
So.

00:25:33.640 --> 00:25:38.180
And it uses the type annotations to do that, among many other crazy uses of type annotations,

00:25:38.180 --> 00:25:38.380
right?

00:25:38.380 --> 00:25:38.520
Yeah.

00:25:38.520 --> 00:25:39.560
It's a really cool project.

00:25:39.560 --> 00:25:41.780
And it's really early on, but it's getting a lot of hype.

00:25:41.780 --> 00:25:43.780
So he's going to put in all this work.

00:25:43.780 --> 00:25:45.000
And I think it's going to soar.

00:25:45.000 --> 00:25:48.700
It might be like the next Flask for API design, maybe.

00:25:48.700 --> 00:25:49.100
Yeah.

00:25:49.100 --> 00:25:49.260
Yeah.

00:25:49.260 --> 00:25:50.600
It's looking really, really promising.

00:25:50.600 --> 00:25:53.140
It might be companies hiring API star developers one day.

00:25:53.140 --> 00:25:53.440
Yeah.

00:25:53.440 --> 00:25:53.660
You know?

00:25:53.660 --> 00:25:54.040
Yeah.

00:25:54.040 --> 00:25:55.120
I can see that.

00:25:55.200 --> 00:25:57.420
It's nice to be there at the beginning, you know?

00:25:57.420 --> 00:25:59.100
So I encourage everyone to check it out.

00:25:59.100 --> 00:25:59.380
Yeah.

00:25:59.380 --> 00:26:00.420
It is really cool.

00:26:00.420 --> 00:26:01.880
I was impressed with it as well.

00:26:01.880 --> 00:26:03.180
I'm going to have him on the show in a few weeks.

00:26:03.180 --> 00:26:03.440
Yeah.

00:26:03.440 --> 00:26:06.440
It's also one of those things when I'm using it, it's so different than what I'm used to

00:26:06.440 --> 00:26:07.900
that I found it a little cumbersome.

00:26:07.900 --> 00:26:08.200
Yeah.

00:26:08.200 --> 00:26:09.620
So I'm not actually sure.

00:26:09.620 --> 00:26:10.800
I'm not endorsing it necessarily.

00:26:10.800 --> 00:26:15.040
I'm just saying that it's really interesting to me because it's something so different.

00:26:15.040 --> 00:26:16.260
Here's something new and fresh.

00:26:16.260 --> 00:26:16.660
Yes.

00:26:16.660 --> 00:26:17.640
I need that.

00:26:17.640 --> 00:26:23.480
I think I really get bored with using the same libraries all the time because they're so good,

00:26:23.480 --> 00:26:24.360
the ones that we have.

00:26:24.520 --> 00:26:29.740
And it's nice to get a new tool in my box that's like, oh, I could use this for something.

00:26:29.740 --> 00:26:30.060
Yeah.

00:26:30.060 --> 00:26:30.480
For sure.

00:26:30.480 --> 00:26:31.820
And that's a rare thing for me.

00:26:31.820 --> 00:26:32.520
Yeah.

00:26:32.520 --> 00:26:33.560
It's really great.

00:26:33.560 --> 00:26:36.320
And also, I mean, he's already been maintaining Django REST framework.

00:26:36.320 --> 00:26:36.660
Yeah.

00:26:36.660 --> 00:26:41.400
So he knows a lot about APIs and it's all about self-described APIs too.

00:26:41.520 --> 00:26:45.040
So he supports VDN and HAL and all, or is it HAL?

00:26:45.040 --> 00:26:45.700
I don't know.

00:26:45.700 --> 00:26:48.460
He supports all the self-described API stuff.

00:26:48.460 --> 00:26:54.920
So it's all hypermedia friendly and it's very proper REST framework stuff.

00:26:54.920 --> 00:26:56.420
There's a project.

00:26:56.420 --> 00:26:58.160
Well, I guess he's going to talk about it, right?

00:26:58.160 --> 00:26:58.700
Yeah, I guess so.

00:26:58.700 --> 00:26:59.760
You go give us the preview.

00:26:59.760 --> 00:27:00.160
Okay.

00:27:00.260 --> 00:27:02.180
There's a client that comes with it too.

00:27:02.180 --> 00:27:03.640
And it's called core API.

00:27:03.640 --> 00:27:08.340
And it's the kind of a compliment to it where any API you write with this, you can consume

00:27:08.340 --> 00:27:09.640
with this thing called core API.

00:27:10.360 --> 00:27:14.580
And there's a command line client for it, as well as a JavaScript client for it, as well

00:27:14.580 --> 00:27:15.780
as a Python client for it.

00:27:15.780 --> 00:27:22.320
And you automatically get, because they're self-described APIs that describe themselves, you get a fully,

00:27:22.320 --> 00:27:24.800
like, you don't have to write a client for your API.

00:27:24.800 --> 00:27:26.140
It's just already done.

00:27:26.140 --> 00:27:26.760
Oh, wow.

00:27:26.760 --> 00:27:30.740
And in the docs that he generates, show you how to do it in all three of those languages

00:27:30.740 --> 00:27:31.460
built in.

00:27:31.460 --> 00:27:33.480
It's like a really solid piece of work.

00:27:33.480 --> 00:27:34.420
I'm very impressed.

00:27:34.420 --> 00:27:36.280
That is super cool.

00:27:36.280 --> 00:27:40.260
Yeah, the thing that I thought was interesting was, here's a guy who's very committed to

00:27:40.260 --> 00:27:42.800
Django REST framework, creating a new framework.

00:27:42.800 --> 00:27:43.940
And that caught my attention.

00:27:43.940 --> 00:27:45.500
Like, wait, weren't you doing that?

00:27:45.500 --> 00:27:46.020
You know what I mean?

00:27:46.020 --> 00:27:46.480
Yeah, yeah, yeah.

00:27:46.480 --> 00:27:51.540
And it's like, well, he can't start from scratch with Django REST framework.

00:27:51.540 --> 00:27:54.320
It's built on a long heritage of a way of doing things.

00:27:54.320 --> 00:27:58.280
And this is like, what if we could start again, Python 3 only right now from scratch?

00:27:58.280 --> 00:28:00.280
And what if we take Django out of the equation?

00:28:00.280 --> 00:28:04.600
And that's really important, because Django is not necessarily the best thing to be building

00:28:04.600 --> 00:28:06.160
APIs on, necessarily.

00:28:06.800 --> 00:28:07.680
It's not necessary.

00:28:07.680 --> 00:28:08.160
Right.

00:28:08.160 --> 00:28:10.680
It's got a lot of stuff to support rich web apps.

00:28:10.680 --> 00:28:12.180
And you can use Django as a library.

00:28:12.180 --> 00:28:15.740
So you can import Django into an API Star app if you really want.

00:28:15.740 --> 00:28:18.340
And then you can just start using your models in it.

00:28:18.340 --> 00:28:19.720
I mean, there's nothing stopping you.

00:28:19.720 --> 00:28:20.440
Yeah, yeah.

00:28:20.440 --> 00:28:20.980
How interesting.

00:28:20.980 --> 00:28:21.780
All right.

00:28:21.780 --> 00:28:22.880
What other projects?

00:28:22.880 --> 00:28:24.080
Projects that I love.

00:28:24.080 --> 00:28:24.280
Yeah.

00:28:24.280 --> 00:28:25.740
I'm really in love with DocOpt.

00:28:25.740 --> 00:28:26.980
I've always loved that.

00:28:26.980 --> 00:28:27.400
Yeah.

00:28:27.400 --> 00:28:28.620
DocOpt and Click.

00:28:28.620 --> 00:28:30.320
There are two command line libraries.

00:28:30.320 --> 00:28:31.920
I was playing with Click the other day.

00:28:31.920 --> 00:28:35.540
Click and DocOpt are kind of like matter, antimatter.

00:28:35.940 --> 00:28:37.680
Yeah, they're very opposites of each other.

00:28:37.680 --> 00:28:38.040
Exactly.

00:28:38.040 --> 00:28:38.400
Yeah.

00:28:38.400 --> 00:28:39.120
Tell us about them.

00:28:39.120 --> 00:28:40.940
It's amazing.

00:28:40.940 --> 00:28:42.360
It's the opposite of aug parse.

00:28:42.360 --> 00:28:43.380
It uses aug parse.

00:28:43.800 --> 00:28:50.640
It turns out when you type any command in Linux and you do --help and it prints out

00:28:50.640 --> 00:28:53.500
like the thing with the brackets and all this stuff with the commands.

00:28:53.500 --> 00:28:57.080
Sometimes it's super complicated with lots of symbols separating things.

00:28:57.080 --> 00:28:57.840
Yeah.

00:28:57.840 --> 00:29:00.040
There's all these angular brackets and stuff.

00:29:00.040 --> 00:29:03.140
And you're just kind of like, okay, I can infer what that means.

00:29:03.140 --> 00:29:05.300
That's an ANSI standard, it turns out.

00:29:05.800 --> 00:29:11.540
And so you just write that help string in DocOpt in Python as a string.

00:29:11.540 --> 00:29:13.800
And then you say, parse my arguments.

00:29:13.800 --> 00:29:17.180
And it just magically knows exactly what to do.

00:29:17.180 --> 00:29:18.840
So you don't have to write any parsing code.

00:29:18.840 --> 00:29:20.720
And it's just amazing.

00:29:20.720 --> 00:29:22.120
So it's good for small things.

00:29:22.120 --> 00:29:26.860
Like if you're writing a command line thing that doesn't have any like sub commands, maybe

00:29:26.860 --> 00:29:28.740
like one or two sub commands, it's okay.

00:29:28.960 --> 00:29:33.640
If it can fit into a single help printout screen, then DocOpt is great.

00:29:33.640 --> 00:29:34.360
It's an option, yeah.

00:29:34.360 --> 00:29:40.160
Click is fantastic and a very engineered piece of project from Armin Roeneker, the guy from

00:29:40.160 --> 00:29:42.620
Flask and a good friend of mine.

00:29:42.620 --> 00:29:45.800
And he, again, is very engineered.

00:29:45.800 --> 00:29:51.000
It's like everything from Armin is in a good way, in a good way.

00:29:51.000 --> 00:29:53.200
You can dive deep into it.

00:29:53.800 --> 00:29:59.860
And it is, if you're going to build something that has a lot of structure and something that

00:29:59.860 --> 00:30:02.140
has a lot of sub commands and something that has...

00:30:02.140 --> 00:30:03.220
Something like Git, maybe?

00:30:03.220 --> 00:30:04.160
Yeah, or PipM.

00:30:04.160 --> 00:30:06.520
PipM uses Click, for example.

00:30:06.520 --> 00:30:11.040
Because it has, you know, I have like five or six sub commands and they all have different

00:30:11.040 --> 00:30:12.700
arguments and different defaults.

00:30:12.700 --> 00:30:14.780
And DocOpt wouldn't be a good fit for that.

00:30:14.780 --> 00:30:19.060
But Records uses DocOpt, you know, different tools for different tools.

00:30:19.060 --> 00:30:19.760
Yeah.

00:30:19.760 --> 00:30:22.220
Different dependencies for different dependencies.

00:30:22.220 --> 00:30:23.100
Yes, precisely.

00:30:23.100 --> 00:30:24.000
Precisely.

00:30:24.000 --> 00:30:24.360
Awesome.

00:30:24.360 --> 00:30:26.800
Other projects you've been loving lately?

00:30:26.800 --> 00:30:29.100
This is the things that come to mind off the top of my head.

00:30:29.100 --> 00:30:31.340
I was talking to the Beware guys that are over here.

00:30:31.340 --> 00:30:31.640
Yeah.

00:30:31.640 --> 00:30:33.860
I'll do, I guess, a little bit of evangelism for the project.

00:30:33.860 --> 00:30:34.420
Cool project.

00:30:34.420 --> 00:30:35.400
It is a cool project.

00:30:35.400 --> 00:30:38.360
I knew about it last year, but they've come a long way.

00:30:38.360 --> 00:30:45.460
So Beware allows you to, in pure Python with a pip installable module that is no C extensions

00:30:45.460 --> 00:30:46.980
or C dependencies at all.

00:30:46.980 --> 00:30:54.060
To write native Python with a very CSS inspired graphical representation of, that's how you

00:30:54.060 --> 00:30:58.740
like manipulate the graphics is with like a CSS style Python thing.

00:30:58.920 --> 00:31:15.480
You can render Windows forms, Coco for macOS and GTK for Linux and web, single page web apps for the web and Android apps and iOS apps, all from the same code base.

00:31:15.960 --> 00:31:18.620
And there's no C compilation whatsoever.

00:31:18.620 --> 00:31:33.240
And the thing that I'm excited about that I just learned about during PyCon was that they've taken that and they've made a project called Briefcase, which allows you to package up your application into an executable distributable, which is something that I used to work with quite a bit.

00:31:33.240 --> 00:31:39.360
And there's a lot of packages out there that allow you to do that, but they're very cumbersome and they're all very different.

00:31:39.360 --> 00:31:40.560
They sometimes work.

00:31:40.560 --> 00:31:45.020
And they, they all, you can always get them to work.

00:31:45.020 --> 00:31:47.120
But it's a, it's a challenge sometimes.

00:31:47.120 --> 00:31:47.560
Yeah.

00:31:47.560 --> 00:31:54.000
Especially if you're using something like PyQT and embedded web kits and it's, it can be very cumbersome.

00:31:54.000 --> 00:31:57.060
So it's, I'm very impressed with the demo that I got.

00:31:57.060 --> 00:31:58.620
So I think it's pretty cool looking.

00:31:58.620 --> 00:32:00.840
And then I might start playing with Briefcase.

00:32:00.840 --> 00:32:01.500
I'm really.

00:32:01.500 --> 00:32:03.980
Because I like shipping executable distributables.

00:32:03.980 --> 00:32:04.600
Yes, exactly.

00:32:04.600 --> 00:32:09.100
Like that, I feel like that's one of the shortcomings we have is that we don't ship that many.

00:32:09.100 --> 00:32:09.980
Hey, here's my app.

00:32:09.980 --> 00:32:11.880
Double click it and look at the amazing stuff it does.

00:32:11.880 --> 00:32:12.740
As a Python community?

00:32:12.740 --> 00:32:13.140
Yes, yes.

00:32:13.140 --> 00:32:14.380
I completely agree with you.

00:32:14.700 --> 00:32:14.940
Yeah.

00:32:14.940 --> 00:32:20.040
At the keynote here, we saw like this hockey stick growth of Python and you could see it

00:32:20.040 --> 00:32:22.640
across other metrics and like Stack Overflow trends and other places.

00:32:22.640 --> 00:32:27.580
And I just, I think how much steeper would that be if we had a solid desktop UI story?

00:32:27.580 --> 00:32:28.240
Yeah.

00:32:28.460 --> 00:32:30.880
You know, I mean, that could just like, people already love it so much.

00:32:30.880 --> 00:32:33.200
The second you said that, I was like, I could fix that.

00:32:33.200 --> 00:32:35.900
But I have a policy of, I don't want to build things.

00:32:35.900 --> 00:32:37.580
I don't want to, that I'm not dog fooding.

00:32:37.580 --> 00:32:38.060
Yeah.

00:32:38.060 --> 00:32:39.400
Or I'm not sipping my own champagne.

00:32:39.900 --> 00:32:42.740
I don't have any graphical user interfaces to build.

00:32:42.740 --> 00:32:43.220
Yeah.

00:32:43.220 --> 00:32:43.340
Yeah.

00:32:43.340 --> 00:32:43.520
Yeah.

00:32:43.520 --> 00:32:43.600
Yeah.

00:32:43.600 --> 00:32:45.960
But I would love to, that'd be so much fun.

00:32:45.960 --> 00:32:46.900
I would love to see that.

00:32:46.900 --> 00:32:47.640
That camera.

00:32:47.640 --> 00:32:49.320
I could write the documentation for that.

00:32:49.320 --> 00:32:49.700
There you go.

00:32:49.700 --> 00:32:52.060
That's what, it just, it's really a documentation problem.

00:32:52.060 --> 00:32:52.560
Yeah.

00:32:52.720 --> 00:32:54.240
Well, those guys have some pretty solid stuff.

00:32:54.240 --> 00:32:55.980
You just have to say, this is the proper way.

00:32:55.980 --> 00:32:57.380
And then people do listen to you.

00:32:57.380 --> 00:32:58.160
It's really cool.

00:32:58.160 --> 00:33:01.140
Do it this way.

00:33:01.140 --> 00:33:01.460
Yeah.

00:33:01.460 --> 00:33:02.520
Awesome.

00:33:02.520 --> 00:33:03.000
All right.

00:33:03.000 --> 00:33:08.000
So, other projects top of the, run through your, your high, high love list.

00:33:08.000 --> 00:33:08.800
High love list.

00:33:08.800 --> 00:33:10.260
Those are the ones that have come to mind.

00:33:10.260 --> 00:33:10.720
Flask.

00:33:10.720 --> 00:33:11.600
Always great.

00:33:11.600 --> 00:33:17.060
I'm technically a core contributor and I'm going to, I've been running out of things to do in my free time lately.

00:33:17.060 --> 00:33:21.980
Like I've just been really bored and I've been dying to figure out something to do in open source lately.

00:33:21.980 --> 00:33:28.060
Cause I've been working on PipEmp and stuff and, and that I've kind of atrophied with like things to do there.

00:33:28.060 --> 00:33:29.260
Cause it's kind of done.

00:33:29.260 --> 00:33:33.260
And I have to wait until I make a new decision to make any progress there.

00:33:33.260 --> 00:33:35.000
Cause it's, it's very stable.

00:33:35.000 --> 00:33:35.360
Right.

00:33:35.360 --> 00:33:37.280
That's why you need people to kick it around a bit.

00:33:37.280 --> 00:33:38.560
And I need more users.

00:33:38.560 --> 00:33:39.320
Yeah, exactly.

00:33:39.320 --> 00:33:43.500
It has a nice user base, but I need the masses to come.

00:33:43.500 --> 00:33:45.440
Well, you're used to a different level of user base.

00:33:45.440 --> 00:33:47.080
Precisely.

00:33:47.080 --> 00:33:47.640
Yeah.

00:33:47.640 --> 00:33:49.420
I only have 10 million users.

00:33:49.420 --> 00:33:51.300
I don't remember where I was going to go with that,

00:33:51.300 --> 00:33:53.060
but what was your question again?

00:33:53.060 --> 00:33:57.620
What, what other projects do you love that you're like, you said you were thinking about contributing to something.

00:33:57.620 --> 00:33:58.400
Oh yeah.

00:33:58.400 --> 00:34:03.540
So I'm might make a point to start actually being a real maintainer of flask.

00:34:03.540 --> 00:34:04.720
I think that would be good.

00:34:04.720 --> 00:34:07.400
Help triage issues and stuff like that.

00:34:07.400 --> 00:34:14.740
And I would be proud to say, I did say earlier because I'm planning on doing this, that I am a committer to flask.

00:34:14.860 --> 00:34:19.480
So I've had the commit bit for like three years, but I've, I've only merged like three pull requests.

00:34:19.480 --> 00:34:19.760
Sure.

00:34:19.760 --> 00:34:19.960
Yeah.

00:34:19.960 --> 00:34:29.540
I've never really done anything with it, but I would be really proud to add that to my resume that I'm like, that I helped maintain one of the most beloved pieces of software ever.

00:34:29.860 --> 00:34:31.540
In my opinion, I love flask.

00:34:31.540 --> 00:34:32.780
I think it's just the best.

00:34:32.780 --> 00:34:33.080
Yeah.

00:34:33.080 --> 00:34:36.720
I love the simplicity of flask and frameworks, right?

00:34:36.800 --> 00:34:41.200
One of those things though, where I, as a user, I don't have any complaints.

00:34:41.200 --> 00:34:41.680
Yeah.

00:34:41.680 --> 00:34:43.140
So I don't know what to work on.

00:34:43.140 --> 00:34:43.520
I don't want to do anything to it.

00:34:43.520 --> 00:34:44.060
Yeah, exactly.

00:34:44.060 --> 00:34:51.320
And I'm sure if you open the issue tracker, you'd find quite the opposite, but I have as a, I don't have any complaints, so I don't have anything I want to work on.

00:34:51.320 --> 00:34:51.820
Yeah.

00:34:51.820 --> 00:34:52.800
I guess.

00:34:52.800 --> 00:34:57.380
I don't have any ideas because it's one of those things that's written by someone who's a lot smarter than I am.

00:34:57.380 --> 00:34:57.760
Armin.

00:34:57.760 --> 00:35:06.160
Well, I think, you know, around a lot of those things, one of the places where it could open up is the whole async await stuff, but, but that's so much the whole whiskey.

00:35:06.160 --> 00:35:06.840
That's whiskey.

00:35:06.840 --> 00:35:07.280
Yeah.

00:35:07.280 --> 00:35:08.580
That's a whole other animal.

00:35:08.580 --> 00:35:10.480
The whole stack is like not really ready for that.

00:35:10.480 --> 00:35:12.040
Flask channels.

00:35:12.040 --> 00:35:13.420
Yeah.

00:35:13.420 --> 00:35:14.180
Yeah, exactly.

00:35:14.180 --> 00:35:15.160
Like Django channels.

00:35:15.160 --> 00:35:15.580
Yeah.

00:35:15.580 --> 00:35:16.120
Yeah.

00:35:16.120 --> 00:35:16.520
Yeah.

00:35:16.520 --> 00:35:19.880
We need Daphne for, Daphne for Flask.

00:35:19.880 --> 00:35:20.340
Right.

00:35:20.340 --> 00:35:22.580
So maybe, I mean, maybe that's somewhere that needs some pushing.

00:35:22.580 --> 00:35:24.940
I'm not actually familiar with all the options out there for that, but.

00:35:24.940 --> 00:35:25.140
Yeah.

00:35:25.140 --> 00:35:26.120
I don't know what that would look like.

00:35:26.120 --> 00:35:26.720
That'd be interesting.

00:35:26.720 --> 00:35:30.160
It's interesting to think about, but at the same time, it might not be a problem you have, right?

00:35:30.160 --> 00:35:32.940
Like I find these web apps are actually quite fast already.

00:35:32.940 --> 00:35:33.500
Yeah.

00:35:33.500 --> 00:35:33.920
Yeah.

00:35:33.920 --> 00:35:38.480
If you build things to be scalable, which just means they need to be predictably the

00:35:38.480 --> 00:35:39.100
same speed.

00:35:39.100 --> 00:35:39.680
Less stable.

00:35:39.680 --> 00:35:41.880
And then you really don't have any problems.

00:35:41.880 --> 00:35:43.760
And I think everything's pretty fine.

00:35:43.760 --> 00:35:49.580
I don't think we have to really go into some bleeding, cutting edge concurrent worlds if we

00:35:49.580 --> 00:35:50.080
don't have to.

00:35:50.160 --> 00:35:53.780
I think it's wise for things that you're consuming, like for requests, for example,

00:35:53.780 --> 00:35:55.480
we're planning on going to async.

00:35:55.480 --> 00:35:55.980
You are?

00:35:55.980 --> 00:35:56.280
Yeah.

00:35:56.280 --> 00:35:57.760
I was about to ask you, what's the plans for requests?

00:35:57.760 --> 00:35:59.440
So async is going to make its way in there.

00:35:59.440 --> 00:36:02.920
So I could like await a request.get, maybe a get async?

00:36:02.920 --> 00:36:03.960
Yeah, exactly.

00:36:03.960 --> 00:36:06.880
There would be a new set of calls.

00:36:06.880 --> 00:36:09.600
Like right now there's request.get, request.post.

00:36:09.760 --> 00:36:13.600
So there would probably be a request at async.get or something like that.

00:36:13.600 --> 00:36:17.420
And then you would await on that and it would just work.

00:36:17.420 --> 00:36:18.740
That sounds like the business.

00:36:18.740 --> 00:36:19.400
Yeah.

00:36:19.400 --> 00:36:19.500
Yeah.

00:36:19.500 --> 00:36:22.360
Are you familiar with, what is it, AIo HTTP clients?

00:36:22.360 --> 00:36:23.080
I don't know exactly what.

00:36:23.080 --> 00:36:27.940
I had Guido walk me through the code once and it seemed relatively straightforward.

00:36:27.940 --> 00:36:31.660
It seemed like G event, but with explicit instead of the opposite.

00:36:31.660 --> 00:36:33.960
Nice.

00:36:33.960 --> 00:36:36.960
So I'm really excited to hear about this async request stuff.

00:36:36.960 --> 00:36:37.400
Yeah.

00:36:37.400 --> 00:36:39.080
We're working on it during the sprints.

00:36:39.080 --> 00:36:41.540
So, well, Corey is working on it during sprints, I should say.

00:36:41.540 --> 00:36:44.180
There's a project that we depend on called UR Lib 3.

00:36:44.180 --> 00:36:52.320
And that is something that is being, V2 is being worked on by Corey, one of the core contributors

00:36:52.320 --> 00:36:52.900
to requests.

00:36:52.900 --> 00:36:53.420
Uh-huh.

00:36:53.420 --> 00:36:59.660
And he is going to work on the preliminary async stuff.

00:36:59.660 --> 00:37:01.100
He's going to get ready.

00:37:01.100 --> 00:37:03.720
He's like refactoring it, rewriting it.

00:37:03.720 --> 00:37:07.440
And it's going to be in preparation for adding async to that.

00:37:07.440 --> 00:37:09.580
And then once we add async to that.

00:37:09.580 --> 00:37:11.080
And then you're like, all right, we're going to do this.

00:37:11.080 --> 00:37:11.980
And then we're going to do it.

00:37:11.980 --> 00:37:12.240
Yeah.

00:37:12.240 --> 00:37:16.260
And then in maybe six years, we might get to flip those APIs around.

00:37:16.260 --> 00:37:19.500
So maybe the default in request would be asynchronous.

00:37:20.060 --> 00:37:23.660
And then there would be async that would be separate.

00:37:23.660 --> 00:37:24.060
Right.

00:37:24.060 --> 00:37:25.700
But that would happen in like six years.

00:37:25.700 --> 00:37:28.660
That really depends on how the community moves and stuff like that.

00:37:28.660 --> 00:37:32.580
I honestly would be surprised if that's how things move.

00:37:32.580 --> 00:37:34.860
But we'll see.

00:37:34.860 --> 00:37:36.360
People find concurrency confusing.

00:37:36.360 --> 00:37:37.300
They really do.

00:37:37.300 --> 00:37:43.500
And I am hoping that I can really help bridge the gap with requests to make it be like,

00:37:43.500 --> 00:37:44.700
this does not have to be scary.

00:37:44.700 --> 00:37:49.420
This can be exactly what you're used to, except for magically amazing.

00:37:49.420 --> 00:37:52.520
I'm really excited to hear that.

00:37:52.520 --> 00:37:53.620
It is challenging.

00:37:53.620 --> 00:37:58.560
But I was talking to somebody, listening to one of the other podcast Python Bytes that I do.

00:37:58.560 --> 00:38:01.720
And I'd cover the AIOHCP client stuff.

00:38:01.720 --> 00:38:04.400
And they said, I'm trying to remember the numbers.

00:38:04.400 --> 00:38:09.360
It's like, oh, I had this project where we do a lot of scraping or API calls or something.

00:38:09.920 --> 00:38:12.540
And it would take 16 minutes to run.

00:38:12.540 --> 00:38:12.840
Yeah.

00:38:12.840 --> 00:38:14.920
They flipped it to the async version.

00:38:14.920 --> 00:38:17.860
And it ran in like 30 seconds.

00:38:17.860 --> 00:38:20.360
And it actually crashed the machine because it was like doing too much.

00:38:20.360 --> 00:38:22.100
They had to throttle it.

00:38:22.100 --> 00:38:22.400
Yeah.

00:38:22.400 --> 00:38:22.620
Yeah.

00:38:22.620 --> 00:38:23.460
So I mean, just like.

00:38:23.460 --> 00:38:25.480
It's because people don't understand.

00:38:25.480 --> 00:38:27.220
I'm not saying they don't understand.

00:38:27.220 --> 00:38:31.240
But I feel like there's a basic, simple computer science.

00:38:31.240 --> 00:38:33.880
I'm not a computer science student by any means.

00:38:34.000 --> 00:38:38.000
But there's like, you know, you have two things that a computer is limited by that your program is limited by.

00:38:38.000 --> 00:38:40.380
It's IO bandwidth and CPU bandwidth.

00:38:40.380 --> 00:38:44.700
And if you don't understand those things, it's very easy to.

00:38:44.700 --> 00:38:50.940
If you do understand those things, you can not use these new async things.

00:38:50.940 --> 00:38:58.700
And you can get very good performance with just using threads or just using multiprocess or in doing stuff like that.

00:38:58.700 --> 00:39:08.000
The magic of async is that, you know, it just takes that to this logical extreme where you have these event loops that are just like.

00:39:08.660 --> 00:39:09.000
Yeah.

00:39:09.000 --> 00:39:13.680
And I think actually what they were going to, I think they might have run out of memory because they had too much pulled in at once.

00:39:13.680 --> 00:39:14.000
Yeah.

00:39:14.000 --> 00:39:15.160
Something like that.

00:39:15.160 --> 00:39:16.360
But just the like.

00:39:16.360 --> 00:39:19.900
It opens up a whole new can of worms of things that people don't understand.

00:39:19.900 --> 00:39:23.540
And that's one of the things that I kind of prefer synchronous programming.

00:39:23.540 --> 00:39:23.920
Yeah.

00:39:23.920 --> 00:39:24.500
Myself.

00:39:24.500 --> 00:39:27.000
Because it's something that is approachable and people understand.

00:39:27.000 --> 00:39:33.980
And so I think I want to encourage people to understand how to better optimize synchronous code.

00:39:33.980 --> 00:39:34.340
Yeah.

00:39:34.340 --> 00:39:35.760
And there's some great things for that.

00:39:35.760 --> 00:39:37.180
So there's a product like Minald's.

00:39:37.180 --> 00:39:37.920
Have you seen that?

00:39:37.920 --> 00:39:38.580
No, I don't think so.

00:39:38.580 --> 00:39:40.920
It's a WSGI server that you can use with G Unicorn.

00:39:40.920 --> 00:39:41.360
Okay.

00:39:41.360 --> 00:39:43.960
And it uses an asynchronous event loop.

00:39:43.960 --> 00:39:45.440
But you just turn it on.

00:39:45.440 --> 00:39:48.440
And it just spawns every request.

00:39:48.440 --> 00:39:50.220
Gets like a new green thread or something like that.

00:39:50.220 --> 00:39:52.620
And your code just magically is asynchronous.

00:39:52.620 --> 00:39:55.360
You know, and it's just like, that's how G Event works too.

00:39:55.360 --> 00:39:56.580
But it's not using monkey patching.

00:39:56.580 --> 00:39:56.820
Right.

00:39:56.820 --> 00:40:04.460
And that's the level of async that I like is where it's at like the thread level.

00:40:04.460 --> 00:40:04.880
Right.

00:40:04.880 --> 00:40:07.140
I don't want it to be at the code level necessarily.

00:40:07.320 --> 00:40:09.180
Unless it's something like requests doing it.

00:40:09.180 --> 00:40:14.600
I don't personally want to be writing code that is dealing with this stuff.

00:40:14.600 --> 00:40:17.020
I want to be consuming the code that's dealing with that stuff.

00:40:17.020 --> 00:40:17.280
Right.

00:40:17.280 --> 00:40:17.600
Yeah.

00:40:17.600 --> 00:40:18.900
So I think those are solving slightly.

00:40:18.900 --> 00:40:24.980
Like as a software engineer, I don't think people should have to touch the asyncio APIs.

00:40:25.420 --> 00:40:27.880
I think that they should be consuming them.

00:40:27.880 --> 00:40:28.220
Yeah.

00:40:28.220 --> 00:40:29.400
And it's really interesting.

00:40:29.400 --> 00:40:36.980
So I mean, on one hand, like any server environment, it's like almost by the time it gets to your code, it should already have taken care of that problem.

00:40:36.980 --> 00:40:37.480
Precisely.

00:40:37.480 --> 00:40:38.140
Precisely.

00:40:38.140 --> 00:40:38.440
Yeah.

00:40:38.440 --> 00:40:39.720
I mean, if you're on like your one.

00:40:39.720 --> 00:40:46.120
Unless you're like working for a major company, you know, a company that has some major technical issues.

00:40:46.280 --> 00:40:48.920
Not issues, but technical problems that they're challenges.

00:40:48.920 --> 00:40:49.800
Yeah.

00:40:49.800 --> 00:40:52.840
And they're like, we're going to solve this problem in this really cool way.

00:40:52.840 --> 00:40:53.340
And then.

00:40:53.340 --> 00:40:55.440
Your discuss, your Instagram.

00:40:55.440 --> 00:40:55.780
Yeah.

00:40:55.780 --> 00:40:56.940
Urban airship or something.

00:40:56.940 --> 00:40:57.340
Exactly.

00:40:57.340 --> 00:40:57.660
Yeah.

00:40:57.660 --> 00:40:58.300
Precisely.

00:40:58.740 --> 00:40:59.100
Exactly.

00:40:59.100 --> 00:41:01.940
But most apps don't totally need it.

00:41:01.940 --> 00:41:02.120
Yeah.

00:41:02.120 --> 00:41:08.120
So, but that example of 16 minutes to 30 seconds really is like, wow, you could really get a lot out of that.

00:41:08.120 --> 00:41:11.240
And to see if I could use requests to do that, that would just make me smile.

00:41:11.240 --> 00:41:11.520
Yeah.

00:41:11.520 --> 00:41:15.840
Well, you can do things like that today because there's a, there's a library called request futures, which is really great.

00:41:15.840 --> 00:41:16.120
Okay.

00:41:16.120 --> 00:41:26.180
And it uses the concurrency.futures module to allow you to spawn off either threads or sub processes or anything else.

00:41:26.240 --> 00:41:33.400
There's also a G request, which I wrote a very long time ago, which is not very well maintained, but it allows you to use a G event with requests.

00:41:33.400 --> 00:41:34.060
Okay.

00:41:34.060 --> 00:41:35.260
So there are ways to do this today.

00:41:35.260 --> 00:41:37.940
And again, you can do it at that module level.

00:41:37.940 --> 00:41:42.120
So you just write your synchronous code and you just kind of wrap it in an asynchronous paradigm.

00:41:42.120 --> 00:41:47.860
You know, use something like Celery and then you can, you, and then you get concurrency out the wazoo.

00:41:47.860 --> 00:41:49.020
Awesome.

00:41:49.020 --> 00:41:49.400
Yeah.

00:41:49.400 --> 00:41:49.840
It's really cool.

00:41:49.840 --> 00:41:50.000
Yeah.

00:41:50.000 --> 00:41:54.920
This portion of Talk Python to Me is brought to you by Hired.

00:41:55.300 --> 00:41:58.320
Hired is the platform for top Python developer jobs.

00:41:58.320 --> 00:42:03.780
Create your profile and instantly get access to thousands of companies who will compete to work with you.

00:42:03.780 --> 00:42:07.020
Take it from one of Hired's users who recently got a job and said,

00:42:07.020 --> 00:42:10.940
I had my first offer within four days and I ended up getting eight offers in total.

00:42:10.940 --> 00:42:14.160
I've worked with recruiters in the past, but they were pretty hit and miss.

00:42:14.160 --> 00:42:17.000
I tried LinkedIn, but I found Hired to be the best.

00:42:17.000 --> 00:42:21.200
I really liked knowing the salary upfront and privacy was also a huge seller for me.

00:42:21.200 --> 00:42:23.220
Well, that sounds pretty awesome, doesn't it?

00:42:23.420 --> 00:42:25.100
But wait until you hear about the signing bonus.

00:42:25.100 --> 00:42:28.640
Everyone who accepts a job from Hired gets a $300 signing bonus.

00:42:28.640 --> 00:42:31.640
And as Talk Python listeners, it gets even sweeter.

00:42:31.640 --> 00:42:37.000
Use the link talkpython.fm/Hired and Hired will double the signing bonus to $600.

00:42:37.000 --> 00:42:39.080
Opportunity is knocking.

00:42:39.080 --> 00:42:42.800
Visit talkpython.fm/Hired and answer the door.

00:42:43.940 --> 00:42:45.800
Let's maybe talk a little bit about PyCon.

00:42:45.800 --> 00:42:46.540
We're sitting here.

00:42:46.540 --> 00:42:46.980
Yes.

00:42:46.980 --> 00:42:52.840
In an extremely large room that's actually luckily quite empty right now so we can get some good audio, but it's been very busy.

00:42:52.840 --> 00:42:53.480
It has.

00:42:53.480 --> 00:42:54.580
It's been very exciting.

00:42:54.580 --> 00:42:56.000
What's your takeaway for the week?

00:42:56.000 --> 00:42:56.980
You had a good time?

00:42:56.980 --> 00:42:58.560
I've had a fantastic time so far.

00:42:58.560 --> 00:43:01.160
I'm sad that you're speaking about it retrospectively.

00:43:01.160 --> 00:43:02.600
It's in the past, right?

00:43:02.600 --> 00:43:05.100
It's halfway over, I guess, ish, right?

00:43:05.100 --> 00:43:05.860
Yeah, more or less.

00:43:05.860 --> 00:43:11.180
And it breaks my heart because it's my favorite time of the year and I feel like I just got here.

00:43:11.180 --> 00:43:12.700
And I did just get here.

00:43:12.700 --> 00:43:14.540
Yeah, it was really amazing.

00:43:14.920 --> 00:43:18.620
Every time I come here, it's just so many great people to meet.

00:43:18.620 --> 00:43:21.720
And this year I had a booth, so I really got to meet more people.

00:43:21.720 --> 00:43:23.400
I didn't have to randomly run into them.

00:43:23.400 --> 00:43:24.280
Yeah, yeah.

00:43:24.280 --> 00:43:26.640
You have the Heroku booth that you're hanging out at.

00:43:26.640 --> 00:43:27.060
Yeah.

00:43:27.060 --> 00:43:28.300
And it's just...

00:43:28.300 --> 00:43:34.180
For me, PyCon is the one time of year that I have a family at home, of course, but it's really...

00:43:34.180 --> 00:43:38.840
The Python community is my true family and I get to really be with my family.

00:43:38.840 --> 00:43:40.520
And I get to do that when I...

00:43:40.520 --> 00:43:43.420
I don't really go to as many conferences as I used to go to.

00:43:44.260 --> 00:43:50.340
But PyCon has always been the home, like, coming home conference because you get to see almost every single person.

00:43:50.340 --> 00:43:53.240
And they're my best friends in the world, you know?

00:43:53.240 --> 00:43:54.800
And it's utterly fantastic.

00:43:54.800 --> 00:43:55.560
It's awesome.

00:43:55.560 --> 00:44:01.640
Yeah, there's a couple of people that I've been working with really closely for a long time but I've never physically seen.

00:44:01.640 --> 00:44:05.520
My biggest takeaway from PyCon so far has been these fidget spinners.

00:44:05.520 --> 00:44:07.240
The world has become fidgety.

00:44:07.240 --> 00:44:09.780
They're solving a fidgeting problem this year.

00:44:09.780 --> 00:44:13.420
Yeah, I went out to the Saturday market here in Portland and I just got a higher end one.

00:44:13.500 --> 00:44:16.800
Because there was a booth here at PyCon that was giving out fidget spinners.

00:44:16.800 --> 00:44:19.400
Tell people what the heck is this fidgety spinner thing.

00:44:19.400 --> 00:44:22.260
It's something you hold in the center and then you spin it.

00:44:22.260 --> 00:44:27.420
And then, like, you can rotate it and you feel a centrifugal force and it gives you something to do with your hands.

00:44:27.420 --> 00:44:28.680
Yeah, I guess I'll try to describe it.

00:44:28.680 --> 00:44:36.860
Like, imagine a little weighted circular thing with a fixed ball bearing like an axle almost in the middle.

00:44:36.860 --> 00:44:37.180
Yeah.

00:44:37.180 --> 00:44:38.720
You spin it really smoothly.

00:44:38.720 --> 00:44:43.920
Yeah, they're kind of designed, at least the hype on the internet is saying that they're designed for kids with ADD.

00:44:43.920 --> 00:44:44.560
Okay.

00:44:44.660 --> 00:44:45.540
And I have ADD.

00:44:45.540 --> 00:44:46.160
Yeah, okay.

00:44:46.160 --> 00:44:47.580
And I find it to be very useful.

00:44:47.580 --> 00:44:51.160
I usually am vaping like an electronic cigarette.

00:44:51.160 --> 00:44:51.500
Yeah.

00:44:51.500 --> 00:44:54.880
And that gives me something to do with my hands and I find it very pleasurable on many levels.

00:44:54.880 --> 00:45:00.060
And I find it difficult to be a PyCon because I can't, like, be vaping when I'm walking around.

00:45:00.060 --> 00:45:01.100
We're trapped inside, more or less, yeah.

00:45:01.180 --> 00:45:03.740
Yeah, so I have, like, a nicotine patch on and that helps.

00:45:03.740 --> 00:45:11.100
But when, as soon as I got one of these, I, like, totally forgot about smoking because it's just giving me something else to do.

00:45:11.100 --> 00:45:13.700
So, it's, I'm actually really loving it.

00:45:13.700 --> 00:45:13.960
Yeah.

00:45:13.960 --> 00:45:14.940
Yeah, fidget spinners.

00:45:14.940 --> 00:45:20.160
And I think it's going to help me a lot because I work from home and I'm in meetings and I'm usually smoking during the meetings and it's kind of rude.

00:45:20.160 --> 00:45:26.780
So, I'm going to start, and during my podcast, if you listen to Import This, you'll hear, like, little, this weird puff sound.

00:45:26.780 --> 00:45:27.760
It's because I'm vaping.

00:45:27.760 --> 00:45:30.660
So, maybe I'll start fidgeting instead.

00:45:30.700 --> 00:45:31.380
Yeah, you'll be fidgeting.

00:45:31.380 --> 00:45:34.020
And those things are dead silent because they're, like, smooth ball bearings, so.

00:45:34.020 --> 00:45:34.780
Yeah, yeah.

00:45:34.780 --> 00:45:35.420
Do you want to try it?

00:45:35.420 --> 00:45:36.140
Yeah, let me check this out.

00:45:36.140 --> 00:45:36.340
Yeah.

00:45:36.340 --> 00:45:36.840
All right.

00:45:36.840 --> 00:45:38.460
Well, this is high-end.

00:45:38.460 --> 00:45:39.460
Yeah, that one's really cool.

00:45:39.460 --> 00:45:39.900
Wow.

00:45:39.900 --> 00:45:41.800
It was $25, that one was.

00:45:41.800 --> 00:45:42.980
This one was free.

00:45:42.980 --> 00:45:46.740
And then this one was $15 I bought from a kid.

00:45:46.740 --> 00:45:50.860
They set up a little shop downtown and the kids were selling them.

00:45:50.860 --> 00:45:53.140
Kids don't do ice cream stands and lemonade stands?

00:45:53.140 --> 00:45:54.480
No, they're selling spinners.

00:45:54.480 --> 00:45:55.140
That's awesome.

00:45:55.140 --> 00:45:58.040
They raise money for research for their autistic brother.

00:45:58.040 --> 00:45:59.700
Wow, that is actually super cool.

00:45:59.800 --> 00:46:00.700
Yeah, it was a great story.

00:46:00.700 --> 00:46:01.700
I had to buy one.

00:46:01.700 --> 00:46:06.700
I don't need three of them, but I, you know, I can't say no to that.

00:46:06.700 --> 00:46:07.460
Yeah, that's right.

00:46:07.460 --> 00:46:09.300
So, did you go check out the keynotes?

00:46:09.300 --> 00:46:11.160
No, I do the hallway track at PyCon.

00:46:11.160 --> 00:46:11.540
Yeah.

00:46:11.660 --> 00:46:14.160
So, I make a point to not go to almost any talks.

00:46:14.160 --> 00:46:19.280
I went to, Corey Benfield did a talk on requests under the hood and I went to support him at

00:46:19.280 --> 00:46:19.800
his talk.

00:46:19.800 --> 00:46:21.860
But that's the only talk I've been to so far.

00:46:21.860 --> 00:46:27.220
And there's a really great talk at the end of the day tomorrow on NES video games and hacking

00:46:27.220 --> 00:46:27.700
them with Python.

00:46:27.700 --> 00:46:28.980
Yeah, that's got a lot of...

00:46:28.980 --> 00:46:31.060
So, I'm probably going to try to make it to that one.

00:46:31.060 --> 00:46:36.780
Yeah, I mean, people should check out, what is it, youtube.com slash PyCon 2017.

00:46:36.780 --> 00:46:40.080
It's already, videos are already showing up there.

00:46:40.080 --> 00:46:40.480
Oh, really?

00:46:40.480 --> 00:46:41.020
Yeah, yeah.

00:46:41.020 --> 00:46:44.560
There's like, I don't know about the talks yesterday, but the tutorials are up.

00:46:44.620 --> 00:46:47.100
Yeah, and they have, they're transcribed live.

00:46:47.100 --> 00:46:48.260
Yeah, it's really amazing.

00:46:48.260 --> 00:46:50.120
These guys do a great job putting that on.

00:46:50.120 --> 00:46:52.720
I'm really impressed with the accessibility of this conference.

00:46:52.720 --> 00:46:56.340
I've seen people here with wheelchairs, which is, I don't, I've never noticed that before.

00:46:56.340 --> 00:46:57.380
I'm sure it's been a thing.

00:46:57.380 --> 00:47:02.300
But they also have teleprompters, not teleprompters, but what's the opposite of a teleprompter?

00:47:02.300 --> 00:47:03.000
Telescribe?

00:47:03.000 --> 00:47:06.660
Yeah, like a live transcriptionist type thing, whatever.

00:47:06.660 --> 00:47:07.600
Yeah, like you have in court.

00:47:07.600 --> 00:47:08.360
Yes, exactly.

00:47:08.360 --> 00:47:14.060
But for the videos during the talks and even the questions that are being asked are being transcribed.

00:47:14.320 --> 00:47:17.260
And I very, it's just, I love this conference.

00:47:17.260 --> 00:47:18.180
It's a great conference.

00:47:18.180 --> 00:47:18.520
Yeah.

00:47:18.520 --> 00:47:21.420
And I go to a lot of conferences and PyCon is by far my favorite.

00:47:21.420 --> 00:47:21.880
That's cool.

00:47:21.880 --> 00:47:22.480
All right.

00:47:22.480 --> 00:47:24.020
So you've been walking around, like I have been.

00:47:24.020 --> 00:47:29.560
I'm not been going to, I went to the Jake Vander Plaats' keynote on why Python is popular

00:47:29.560 --> 00:47:31.380
in science and it was actually brilliant.

00:47:31.380 --> 00:47:33.780
I talked to him about that yesterday afterwards.

00:47:33.780 --> 00:47:34.520
It's inspiring.

00:47:34.520 --> 00:47:35.400
Was it really?

00:47:35.400 --> 00:47:41.640
So the short takeaway is, like he said, like, look, Python is a mosaic of people using it

00:47:41.640 --> 00:47:44.480
for different things and they're coming in from different angles.

00:47:44.480 --> 00:47:49.480
The way, like, an astronomer might pull up some data and, like, play and iterate with

00:47:49.480 --> 00:47:52.520
it is very different than, like, you and I might write a web app where we're going to

00:47:52.520 --> 00:47:53.120
very structured.

00:47:53.120 --> 00:47:53.760
Yeah, yeah.

00:47:53.760 --> 00:47:56.420
And it's like a static thing that we build up over an architecture.

00:47:56.700 --> 00:48:01.000
And just, like, talking to people from different backgrounds who use the same tools in different

00:48:01.000 --> 00:48:03.420
ways gives you a really interesting perspective on life.

00:48:03.420 --> 00:48:04.120
Oh, it does.

00:48:04.120 --> 00:48:04.620
It does.

00:48:04.620 --> 00:48:04.960
Yeah.

00:48:04.960 --> 00:48:07.900
And Python gives us this common ground to build upon.

00:48:07.900 --> 00:48:13.480
You can meet people who work on satellites and who work on web apps and who hack and who...

00:48:13.480 --> 00:48:13.620
Yeah.

00:48:13.620 --> 00:48:14.540
It's amazing.

00:48:14.540 --> 00:48:18.680
And you're all, like, family to each other because you just speak the same language.

00:48:18.680 --> 00:48:19.580
Yeah, it's amazing.

00:48:19.580 --> 00:48:23.700
Last night I went to dinner with some of the guys from PyCharm and a bunch of people from

00:48:23.700 --> 00:48:25.760
the Data for Democracy group.

00:48:25.760 --> 00:48:30.420
A bunch of data scientists that are doing, like, volunteer work for democracy and freedom

00:48:30.420 --> 00:48:30.960
around the world.

00:48:30.960 --> 00:48:32.860
Yeah, it's just ridiculous.

00:48:32.860 --> 00:48:34.560
I love this place.

00:48:34.560 --> 00:48:38.820
I truly always regret not staying longer because I'm staying for only one day at the sprints.

00:48:38.820 --> 00:48:39.120
Yeah.

00:48:39.120 --> 00:48:43.460
And I always wish I'd stay longer because I really wish PyCon was all year round.

00:48:43.460 --> 00:48:46.960
I just wish this was my life because it really is like coming home.

00:48:46.960 --> 00:48:48.020
It's really nice.

00:48:48.020 --> 00:48:49.600
Yeah, I totally recommend the...

00:48:49.600 --> 00:48:54.420
If anyone is listening and hasn't come to PyCon, I want you to know that my first PyCon,

00:48:54.420 --> 00:48:55.480
I paid for myself.

00:48:55.480 --> 00:49:00.460
I didn't have an employer paying for me to go and I wasn't making much money at the time.

00:49:00.460 --> 00:49:04.500
It was a very large expense, but they do have financial aid available.

00:49:04.500 --> 00:49:06.380
I probably should have applied at the time.

00:49:06.380 --> 00:49:08.340
It was worth every penny.

00:49:08.340 --> 00:49:09.540
It totally changed my life.

00:49:09.540 --> 00:49:12.760
And I had been doing Python for, like, quite a while at that point.

00:49:12.760 --> 00:49:16.900
And it was a big deal for me to go to my first PyCon and I can't recommend it more.

00:49:16.900 --> 00:49:17.520
That's awesome.

00:49:17.600 --> 00:49:18.640
I definitely want to second that.

00:49:18.640 --> 00:49:23.540
And as far as tech conferences go, this is pretty affordable for the size and scale.

00:49:23.540 --> 00:49:25.000
Like, a lot of, like, OzCon.

00:49:25.000 --> 00:49:25.460
Oh, yeah.

00:49:25.460 --> 00:49:25.980
I looked at that.

00:49:25.980 --> 00:49:26.840
It's like $1,500.

00:49:26.840 --> 00:49:28.620
Conferences are extremely expensive.

00:49:28.620 --> 00:49:30.980
This is a very approachable and doable conference.

00:49:30.980 --> 00:49:32.120
It's like $300 or something.

00:49:32.160 --> 00:49:41.460
Yeah, but when you add up the hotel costs and the flights and it's, you know, if you're not making, you know, a really good developer salary, then it's, you know, it's a lot of money.

00:49:41.460 --> 00:49:46.000
If you can't drive in from, like, some four-hour radius, then it starts to really get intense.

00:49:46.000 --> 00:49:46.320
Yeah.

00:49:46.420 --> 00:49:47.860
Yeah, especially the hotel costs.

00:49:47.860 --> 00:49:49.720
But they have financial aid available, too.

00:49:49.720 --> 00:49:54.020
So if there's any reason that finances are a reason that you can't come to PyCon, apply.

00:49:54.020 --> 00:49:55.420
And they'll, like, give you a free ticket.

00:49:55.620 --> 00:50:00.160
It would be cool for somebody to set up some kind of, like, web app before these events.

00:50:00.160 --> 00:50:04.460
So people who are, like, looking to room share and, like, save money.

00:50:04.460 --> 00:50:04.960
Yeah, yeah, yeah.

00:50:04.960 --> 00:50:08.160
They could, like, kind of be, like, find your PyCon roommate.

00:50:08.160 --> 00:50:09.900
Forgot about that.

00:50:09.900 --> 00:50:10.480
Wouldn't that be fun?

00:50:10.480 --> 00:50:11.560
That'd be a fun project to set up.

00:50:11.560 --> 00:50:12.040
Wouldn't that be a fun project?

00:50:12.040 --> 00:50:14.360
Well, I know in years past that was a thing.

00:50:14.360 --> 00:50:14.740
Okay.

00:50:14.740 --> 00:50:19.260
Because I remember the year I went myself, there was, like, a mailing list of people trying to find room shares.

00:50:19.260 --> 00:50:19.900
I'm not sure.

00:50:19.900 --> 00:50:21.300
It must still be a thing.

00:50:21.300 --> 00:50:22.060
Yeah, probably.

00:50:22.060 --> 00:50:22.300
I assume.

00:50:22.300 --> 00:50:24.160
But maybe not.

00:50:24.160 --> 00:50:24.460
I don't know.

00:50:24.460 --> 00:50:26.120
It'd be cool to make something like that.

00:50:26.120 --> 00:50:27.460
I assure you it did exist.

00:50:27.460 --> 00:50:27.920
Yeah.

00:50:27.920 --> 00:50:28.340
Awesome.

00:50:28.340 --> 00:50:29.380
All right.

00:50:29.380 --> 00:50:33.120
So, yeah, definitely if you guys are out there listening and you haven't come to PyCon, you should come.

00:50:33.120 --> 00:50:35.580
But you should get your tickets straight away or you won't be able to come.

00:50:35.580 --> 00:50:36.640
Yeah, it sells out.

00:50:36.640 --> 00:50:38.780
And it's cheaper the earlier you buy them, too.

00:50:38.780 --> 00:50:39.280
Absolutely.

00:50:39.280 --> 00:50:39.740
Yeah.

00:50:39.740 --> 00:50:40.260
All right.

00:50:40.260 --> 00:50:41.500
Kenneth, thanks for being on the show, man.

00:50:41.500 --> 00:50:42.400
Always a pleasure.

00:50:42.400 --> 00:50:43.780
I'm a huge fan of the show.

00:50:43.780 --> 00:50:47.880
And I want to really thank you for all the great advice you give all these developers.

00:50:47.880 --> 00:50:51.940
And I listen to you when I'm taking baths all the time.

00:50:51.940 --> 00:50:52.860
Oh, thank you so much.

00:50:52.860 --> 00:50:53.820
That is awesome.

00:50:53.940 --> 00:50:56.280
You're the only one I still listen to.

00:50:56.280 --> 00:51:01.820
I don't listen to podcasts often enough to be caught up on them, but you're always the one I pull up to listen to.

00:51:01.820 --> 00:51:02.180
Wow.

00:51:02.180 --> 00:51:03.920
So, I listen to you on the way here, actually.

00:51:03.920 --> 00:51:04.600
How cool.

00:51:04.600 --> 00:51:04.920
Awesome.

00:51:04.920 --> 00:51:05.240
Yeah.

00:51:05.400 --> 00:51:08.420
So, really quick before we go, tell people about your podcast.

00:51:08.420 --> 00:51:09.680
Oh, I have a Python podcast.

00:51:09.680 --> 00:51:10.740
It's called Import This.

00:51:10.740 --> 00:51:13.780
If you Google Import This, Kenneth writes, you'll find it.

00:51:13.780 --> 00:51:15.160
It's on SoundCloud.

00:51:15.820 --> 00:51:20.200
And I do very long interviews with Python friends of mine.

00:51:20.200 --> 00:51:22.780
And we just catch up and talk about Python.

00:51:22.780 --> 00:51:27.960
And actually, we talk about things that are unrelated to Python often, like their lives and stuff like that.

00:51:28.040 --> 00:51:28.880
And I just put it.

00:51:28.880 --> 00:51:31.200
It's very unfiltered, uncandid.

00:51:31.200 --> 00:51:33.200
It's a raw, natural conversation.

00:51:33.200 --> 00:51:33.620
Yeah.

00:51:33.620 --> 00:51:35.360
There's no editing or anything like that.

00:51:35.360 --> 00:51:37.080
I mean, it's produced, but it's not.

00:51:37.080 --> 00:51:38.880
I just hit record, basically.

00:51:38.880 --> 00:51:39.460
Awesome.

00:51:39.460 --> 00:51:40.900
So, it's a great little thing.

00:51:40.900 --> 00:51:43.120
And some people really like the longer format podcasts.

00:51:43.120 --> 00:51:44.220
So, it's one of those.

00:51:44.220 --> 00:51:46.680
If you need something on your commute, you should check it out.

00:51:46.680 --> 00:51:47.420
Awesome.

00:51:47.420 --> 00:51:50.960
And I'll definitely be sure to link to it in the show notes of people and just click on it and go there.

00:51:50.960 --> 00:51:51.620
Yeah, it'd be awesome.

00:51:51.620 --> 00:51:52.100
All right.

00:51:52.100 --> 00:51:53.120
Thanks again for being on the show.

00:51:53.120 --> 00:51:53.600
Yeah, definitely.

00:51:53.600 --> 00:51:58.180
This has been another episode of Talk Python to Me.

00:51:58.180 --> 00:52:00.640
Today's guest has been Kenneth Wright.

00:52:00.640 --> 00:52:03.940
And this episode has been brought to you by CodeShip and Hired.

00:52:03.940 --> 00:52:05.440
Do you have software?

00:52:05.440 --> 00:52:08.680
Would you like to know if it has bugs before you deploy it?

00:52:09.020 --> 00:52:14.240
Then jump over to talkpython.fm/code ship and set up a free CodeShip basic account,

00:52:14.240 --> 00:52:16.020
ship tested software.

00:52:16.020 --> 00:52:19.540
Hired wants to help you find your next big thing.

00:52:19.540 --> 00:52:25.360
Visit talkpython.fm/hired to get five or more offers with salary and equity presented

00:52:25.360 --> 00:52:28.080
right up front and a special listener signing bonus of $600.

00:52:28.080 --> 00:52:31.680
Are you or your colleagues trying to learn Python?

00:52:31.680 --> 00:52:34.640
Well, be sure to visit training.talkpython.fm.

00:52:34.640 --> 00:52:40.460
We now have year-long course bundles and a couple of new classes released just this week.

00:52:40.460 --> 00:52:41.440
Have a look around.

00:52:41.440 --> 00:52:42.900
I'm sure you'll find a class you'll enjoy.

00:52:43.560 --> 00:52:45.320
Be sure to subscribe to the show.

00:52:45.320 --> 00:52:47.520
Open your favorite podcatcher and search for Python.

00:52:47.520 --> 00:52:48.760
We should be right at the top.

00:52:49.200 --> 00:52:54.860
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct

00:52:54.860 --> 00:52:58.040
RSS feed at /rss on talkpython.fm.

00:52:58.040 --> 00:53:03.160
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

00:53:03.160 --> 00:53:07.860
Corey just recently started selling his tracks on iTunes, so I recommend you check it out at

00:53:07.860 --> 00:53:09.860
 talkpython.fm/music.

00:53:09.860 --> 00:53:14.280
You can browse his tracks he has for sale on iTunes and listen to the full-length version

00:53:14.280 --> 00:53:15.220
of the theme song.

00:53:16.020 --> 00:53:17.280
This is your host, Michael Kennedy.

00:53:17.280 --> 00:53:18.580
Thanks so much for listening.

00:53:18.580 --> 00:53:19.780
I really appreciate it.

00:53:19.780 --> 00:53:21.920
Smix, let's get out of here.

00:53:21.920 --> 00:53:43.400
Outro Music.

00:53:43.400 --> 00:53:44.200
*outro music*

00:53:44.200 --> 00:54:14.180
Thank you.

