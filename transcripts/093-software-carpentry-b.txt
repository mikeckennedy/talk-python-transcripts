00:00:00 You often hear that we need to teach computer science as a foundational skill.

00:00:03 Why? Well, I'm not actually sure many of the leaders pushing this forward have great answers

00:00:08 other than jobs. But it is fundamentally important that we do teach programming as a core skill.

00:00:13 The reason, I believe, is that whatever your specialty, be that biology, psychology,

00:00:18 geo-surveys, whatever, basic programming will supercharge that skill. And that's why I'm

00:00:24 excited to introduce you to Software Carpentry and Jonah Duckles. They are bringing these skills

00:00:29 and more to scientists and educators throughout the globe. This is Talk Python To Me, recorded

00:00:35 December 6, 2016.

00:00:59 Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the

00:01:06 ecosystem, and the personalities. This is your host, Michael Kennedy. Follow me on Twitter

00:01:11 where I'm @mkennedy. Keep up with the show and listen to past episodes at talkpython.fm

00:01:16 and follow the show on Twitter via at talkpython. This episode has been sponsored by Rollbar and

00:01:22 MongoDB. I want to say a special thank you to MongoDB University for joining Talk Python To Me as a

00:01:27 sponsor. Thank both of them for supporting the show by checking out what they have to offer during their

00:01:32 segments. Jonah, welcome to Talk Python.

00:01:35 Thanks for having me.

00:01:35 Thanks for having me.

00:01:35 Yeah, it's great to have you here. I'm super excited to talk about Software Carpentry and

00:01:39 bringing programming skills to more than just programmers, researchers, scientists, and so on.

00:01:46 It's going to be fun.

00:01:47 Yeah, no, I'm excited, Michael. Thank you for reaching out. And I'm excited to share what Software

00:01:54 Carpentry is up to and how we can build new communities that support researchers all over the world.

00:02:00 It's super cool what you're talking about and what you're doing. Before we get into that,

00:02:03 though, let's talk about you. What's your story? How do you get into programming in Python?

00:02:07 I've been using Linux and Unix since, I don't know, probably my freshman year of high school.

00:02:13 And then I've always kind of dabbled in open source software and tools and did a master's in landscape

00:02:21 ecology, really kind of learning GIS skills and learning how to apply GIS skills towards remote

00:02:28 sensing problems. And I started using ArcGIS in grad school. And they had this sort of Python

00:02:35 ArcGIS scripting object. And it was a really kind of powerful tool for me to use. But I

00:02:42 quickly hit up against the limits of how that scripting object worked and really just kind

00:02:47 of dived into Python and the open source geospatial world around Python and really developed my skills

00:02:53 in graduate school around kind of applying Python towards geospatial analysis problems.

00:03:00 So that was really the motivating factor.

00:03:02 Yeah, that's really interesting. Geospatial stuff is, it's fascinating. There's so much data these

00:03:07 days, right?

00:03:07 Yeah, no. And I went on from graduate school, and I was actually doing agricultural intelligence work,

00:03:13 taking imagery coming from, you know, freely available imagery coming down from satellites like Landsat and

00:03:19 Modus, and writing Python scripts, and R scripts, and Bash scripts, whatever we could cobble together to kind

00:03:26 of do analysis of tabular data and what we saw from remote sensing data. And really, my chops in terms of

00:03:34 an applied programmer were developed in that job postgraduate school, where we were kind of on

00:03:39 deadlines trying to meet reporting deadlines and things. And that's really where I became more of the

00:03:46 language and trying to understand the nuances of Python and the power in the community around Python and the tools

00:03:52 that were developed there. So, yeah.

00:03:55 Oh, yeah, that's, that's really cool. Taking the satellite data. I think we're going to see a lot of that, especially

00:04:00 with the Internet of Things stuff, right? The ability to take geospatial data, maybe some small bits of monitoring

00:04:07 here and there, or even control systems. It's going to be fun to see how that goes in all sorts of areas.

00:04:12 Yeah, and that's, that's really a huge area that my organization, Software Carpentry, can help people with, is to begin to understand how to kind of eat the elephant and build software tools that can take huge streams of data coming from disparate sources and start thinking about how you might build software, how you might take just enough skills as a software engineer, and apply them to your research problem.

00:04:40 So you can start to build the tools that you need to answer the research questions that you have. And we're seeing this in so many different research communities all over the world.

00:04:49 Yeah, so that gets us a little bit to Software Carpentry and what Software Carpentry is, right? So that, why don't we talk a little bit about what Software Carpentry is in this project that you guys have going at software-carpentry.org?

00:05:02 Yeah. Software Carpentry was really founded way back in 1997 by Greg Wilson when he was a newly minted PhD in computer science, and he showed up at Los Alamos National Lab as a postdoctoral researcher.

00:05:17 And researchers were lined up at Los Alamos National Lab as a postdoctoral researcher.

00:05:20 And he was inundated and overwhelmed and realized that these researchers had really a lot of motivation and a lot of excitement to become better programmers, but really didn't have any resources or tools to help them on their way.

00:05:41 And so Software Carpentry was born of that kind of need of these researchers kind of expressing a need for research skills.

00:05:49 And the first iteration of it was a five-day workshop to teach you all the things.

00:05:56 And that went well for a lot of people, but also by the end of the third day, people were kind of passing out in their chairs and unable to retain any more information.

00:06:05 And the brain was full.

00:06:07 It was really overwhelming for the participants.

00:06:10 And so in about 2012, via some work from some people around the Software Carpentry community, particularly some people in Wisconsin as part of the Hacker Within project, started saying,

00:06:22 how can we reboot this and how can we create a really compelling two-day workshop where we train instructors on good adult teaching pedagogy?

00:06:32 And how do we take really high-quality lessons and how do we deliver them with trained instructors, impactful, engaging, and exciting workshops?

00:06:40 And so that's really the work of what we do now is we curate these lessons.

00:06:44 They're open source, CC by Creative Commons Attribution License.

00:06:48 We have a community of instructors around the world that are trained.

00:06:53 About 900 people have gone through our training so far and become certified instructors.

00:06:58 And we're really about capacity building at research organizations to build teams of instructors who talk about how they teach

00:07:06 and try to push the envelope to always improve how they're teaching and to develop new lessons

00:07:13 and really push the skills that researchers are demanding in data-driven research.

00:07:19 So a lot of this is the tools of software engineering, how to build software.

00:07:24 But, you know, we started a very basic, basic, basic level because researchers really need that foundational explanation of how these things fit together.

00:07:34 That's really great.

00:07:35 I feel like certainly when you're in research, knowing some programming is really, really empowering.

00:07:42 And, you know, I used to work at a place with a bunch of cognitive science PhDs.

00:07:48 And not everybody there had some level of programming, but many of the people, the professors and so on, would do really advanced work.

00:07:57 Maybe it was in MATLAB or something.

00:07:59 And we'd have to take their MATLAB algorithms and convert them to real programming languages.

00:08:03 But, you know, it made what they did more or less possible.

00:08:08 So I think, you know, there's this whole learn to code.

00:08:11 And right now we're recording during the hour of code week, which is, you know, pretty interesting.

00:08:15 So all these people in the world are learning to code.

00:08:18 And I think the biggest takeaway or the biggest benefit that seems to get lost is this ability to do even a little bit of programming can superpower whatever your specialty is.

00:08:30 So, you know, if you're a psychologist, you can analyze data like nobody's business compared to, like, people who can't, right?

00:08:37 Other PhDs or whatever who can't.

00:08:39 Similarly in biology or agriculture, like even for farmers, right?

00:08:42 So I think this is really great.

00:08:46 What kind of stuff do you guys cover?

00:08:49 I know we'll go into more detail later, but, like, what are the general areas that you teach?

00:08:53 What do people learn when they come work with you guys?

00:08:55 What are your classes on?

00:08:56 We're basically â€“ so we talk about kind of having a flagship workshop.

00:09:00 And this is our base lessons.

00:09:03 And the target audience originally for this was scientists who were coding, but were coding poorly.

00:09:08 But as it turns out, there's actually a huge community.

00:09:12 There's sort of two communities that come to our classes.

00:09:14 It's about 60-40 split.

00:09:16 About 60% of people coming to our workshops say they have not coded, but they know that they have a research problem that code could help them be more productive and be more efficient at what they do.

00:09:28 And about 40% come and they say, I've been coding as a practicing scientist for a long time, but nobody stopped and taught me how I should be doing it.

00:09:38 And that's why I'm here.

00:09:39 And so the reality â€“ you know, you talk about this researcher who's got this really complex MATLAB code.

00:09:45 The reality is that there's no intentional time spent for a lot of researchers, for a lot of scientists, to say this is how you build software.

00:09:54 This is how you build programs.

00:09:56 They're just thrown in and told to sink or swim as part of the kind of academic process.

00:10:02 And so our goal with our sort of flagship two-day workshop is to really kind of give you a rope to help pull yourself out of the water or to help you kind of build a mental model for â€“ there's this ecosystem of open source tools that are out there.

00:10:17 They can fit together in ways that you can build.

00:10:21 It's almost like learning that here's a bucket of Legos.

00:10:24 Let's put the things together.

00:10:25 And so what we teach in this foundational workshop is the Unix shell and how to repeat tasks in the Unix shell.

00:10:33 And we'll go into more depth about the specifics of these things.

00:10:36 But basically how to be more efficient at repeating tasks in the Unix shell.

00:10:40 And then how to abstract ad hoc shell commands into a script that you can save and then call again and again.

00:10:47 So those are the two major goals of that lesson.

00:10:51 It takes about a half day.

00:10:52 The Python lesson takes about another half day, sometimes another full day, two half days.

00:10:57 And we're not teaching you all the data types in Python.

00:11:01 We're basically trying to teach you that Python is a nice high-level language.

00:11:05 It's a good glue to a lot of tools that are out there.

00:11:08 And it's a great way to start thinking about how to build software that tackles your research challenge.

00:11:17 And so we're really trying to teach them.

00:11:19 A lot of researchers, and I know a lot of listeners to this podcast might be surprised by this, but a lot of researchers are never told that there's these things called functions that you can wrap code with.

00:11:30 Right?

00:11:31 Where you can make a thing that's callable in other places.

00:11:34 Right?

00:11:35 So a lot of researchers write very procedural code.

00:11:38 And we teach them about functions and that functions are callable.

00:11:41 Functions should be small.

00:11:42 And we teach them some of these kind of aspirational things.

00:11:47 We kind of build an ideal for them so that they're thinking their mental model as they're building software and they're eating that elephant around their research problem allows them to think about, okay, maybe this function that's going across three pages in my editor now, maybe I could break that into four or five functions.

00:12:03 Right?

00:12:04 So we're trying to inspire those kinds of ways of thinking while we're also trying to translate skills to them.

00:12:12 One of the things that seems to me that is the kind of overarching theme there is writing software that doesn't just solve a problem but becomes reusable.

00:12:24 Right?

00:12:24 And so like what I saw a lot of the times would be there would be some kind of code written by let's just, you know, take my cognitive science folks as an example.

00:12:32 They'd write code that did amazing stuff but it would, you know, have all sorts of hard coded specific things for the exact problem they're trying to solve.

00:12:44 Like you said, it wasn't typically broken into a lot of functions.

00:12:47 There was not the concept of reusability or testability.

00:12:50 It was like, well, we, we, this is what it needs.

00:12:52 These are the steps.

00:12:53 And I made it do the steps.

00:12:55 Right?

00:12:55 And they might be really advanced but it's just, it's like moving from, from maybe there to, oh, here's a bunch of things I could put into a package that I could then open source and a thousand people could work on it, not just me.

00:13:08 Or here's the thing I could unit test.

00:13:10 Like, what is that?

00:13:11 Right, right, right.

00:13:12 Yeah, yeah, yeah.

00:13:13 Yeah.

00:13:14 And we, in our Unix shell lesson, we're trying to teach the Unix small tools philosophy a bit too.

00:13:22 And we hope that kind of rubs off in the other areas where, you know, we're teaching WC to word count lines, right?

00:13:30 And we teach them to read the man page of this thing called WC and find what the different flags do and make these magical space delimited incantations at the bash prompt.

00:13:41 And think about, they wrote one tool that just counts lines, words, and characters.

00:13:47 That's all it does, right?

00:13:48 And that's all it needs to do.

00:13:50 And that's enough.

00:13:51 And we can build something and we can write a script that has the abstraction layer appropriate for our research question that uses WC, that uses GRAP, that uses SORT, and plugs a few of these things together so that we can say, okay, we can now apply this to the data that's coming in from our sequencer, the data that's coming down from our satellite, the data that's coming in from our time series, from our sensor that we've put out there.

00:14:19 And so, you know, in that way, we're kind of, by thinking about those abstractions, we're hoping and helping to give them the superpowers they need, like you were saying, to give them those kind of abilities to ask more complicated research questions of the data that's all around them and all of that.

00:14:38 Yeah.

00:14:38 So, speaking of the data that's around them, you've got a nice breakdown of different areas of study, right? Astronomy, particle physics, biologies, and kind of what they might need to know and so on. You want to maybe talk about that a bit?

00:14:52 So, the astronomy community is really training their people to be prepared for this data-driven future. It's really kind of exciting and empowering to see, and we see participation in software carpentry from places like the Space Telescope Science Institute, the University of Washington, other astronomy communities at the University of Illinois.

00:15:12 Yeah, the stuff they do in astronomy is no longer just like people going out and grabbing a little light telescope and just staring at the sky and taking notes on a notepad. It's like a serious data-driven thing, right?

00:15:26 And there's tons of machine learning, and you almost have to be a data scientist to be an astronomer these days.

00:15:33 Yes, you do. And we've had a collaboration with some folks in Italy that are astronomers that actually want to formally train their PhDs in astronomy with data-driven data scientist skills so that they're marketable because they realize there's only so many jobs in astronomy.

00:15:52 That's a good point, too.

00:15:54 And that's a theme we're seeing in a lot of disciplines is people are saying, hey, there's this huge demand for data-driven skills. How can we take, you know, we know that we're not going to be able to meet, we're not going to be able to give jobs to all these people we're training. How can we make sure that their training is relevant to other areas as well?

00:16:14 That's a great aspect. Yeah, you were about to talk about particle physics.

00:16:17 Yeah, so the particle physics community, you know, everybody's heard of the Large Hadron Collider, you know, at CERN, and all of these kinds of activities that have gone on.

00:16:26 They have, for a long time, you know, I remember I did my undergraduate in physics, and I remember they were designing the sensors back when I started my bachelor's degree 20 years ago or so.

00:16:39 And now they have these huge data streams, and they've really built a system for the tiers that they use for the processing.

00:16:46 And that is really kind of built into their community and their training very well.

00:16:53 It's actually a good kind of example.

00:16:54 There aren't a tremendous amount of needs there because they've really, their data streams are so systematized and whatnot.

00:17:04 But there's always the need for people with new skills, building new tools, new analysis software.

00:17:09 And so we've seen some interest from the particle physics community in kind of preparing new graduate students to have those baseline skills that are necessary.

00:17:18 Moving on to biologists, biologists have sequencing data coming out their ears, noses, wherever they can find it.

00:17:28 And the rate at which sequencing data can be generated far surpasses, you know, what most grad labs' abilities are to process it.

00:17:37 And this is a, you know, sort of an acute need in biology to take people who have really good experimental design and lab skills and train them on data-driven research.

00:17:50 I thought there was a really hilarious tweet yesterday, which is that bioinformatics is just advanced bash, right?

00:17:57 So you're actually learning really advanced bash to kind of string together.

00:18:02 And that's one perspective, right?

00:18:03 To string together a lot of tools that other people have written.

00:18:06 But through Software Carpentry, what we want to do is we want to help people understand that they can build software that can meet their needs.

00:18:15 And they can build these kind of small tools that fit into the open source ecosystem.

00:18:21 And so about 50% of the people who attend our workshops, and there have been about 20,000 people who've attended our workshops, are biologists of some.

00:18:29 Wow, that's really interesting.

00:18:31 Yeah.

00:18:31 You know, I think, I wonder if partly that's because the astronomers and the particle physicists, like, from a very early place in their study, have to basically become programmers.

00:18:43 Or they just can't process it, right?

00:19:13 Believe this.

00:19:13 And then they go, what?

00:19:15 I can't do that with the skills I have.

00:19:17 And so they...

00:19:18 We did 10.

00:19:18 It took a year.

00:19:19 Well, 10, 20 years ago was, you know, a PhD, a postdoc, and some time as a faculty member.

00:19:29 So, and I might be exaggerating there on 10, but it's the rate at which they can get data is exponential at the moment.

00:19:35 And they have problems, never mind the fact that their people aren't trained in programming.

00:19:42 They just have computational limits to what they can accomplish, even if they could use the computing power available to them.

00:19:49 So there's really interesting questions in biology.

00:19:51 There's really interesting communities being developed.

00:19:54 We're working with groups all over the world that are really building networks of people that have the expertise spread across the network in order to answer the big research challenges they have.

00:20:06 One is this group in Europe, which is a group of 20 countries building infrastructure, bioinformatics infrastructure.

00:20:14 And they really see that as the sequencing facilities, the computational facilities, and the people.

00:20:20 And we're participating in how they build the network of people to be a support network that teaches each other the skills necessary and is agile and adaptable to those skills as they're changing.

00:20:32 Because for your listeners who are in the bioinformatics community, every time you turn around, there's a new hot tool that you should be using, and you should drop your whole previous workflow.

00:20:42 It's almost a joke in the community that that's how fast things are changing and moving.

00:20:48 Yeah, that sounds familiar, actually.

00:20:49 This portion of Talk Python To Me has been brought to you by Rollbar.

00:21:07 One of the frustrating things about being a developer is dealing with errors.

00:21:11 Relying on users to report errors, digging through log files trying to debug issues, or a million alerts just flooding your inbox and ruining your day.

00:21:19 With Rollbar's full-stack error monitoring, you'll get the context, insights, and control that you need to find and fix bugs faster.

00:21:26 It's easy to install.

00:21:28 You can start tracking production errors and deployments in eight minutes or even less.

00:21:32 Rollbar works with all the major languages and frameworks, including the Python ones, such as Django, Flask, Pyramid, as well as Ruby, JavaScript, Node, iOS, and Android.

00:21:42 You can integrate Rollbar into your existing workflow, send error alerts to Slack or HipChat, or even automatically create issues in Jira, Pivotal Tracker, and a whole bunch more.

00:21:51 Rollbar has put together a special offer for Talk Python To Me listeners.

00:21:54 Visit rollbar.com slash Talk Python To Me, sign up, and get the bootstrap plan free for 90 days.

00:22:00 That's 300,000 errors tracked all for free.

00:22:03 But, hey, just between you and me, I really hope you don't encounter that many errors.

00:22:07 Loved by developers at awesome companies like Heroku, Twilio, Kayak, Instacart, Zendesk, Twitch, and more.

00:22:13 Give Rollbar a try today.

00:22:14 Go to rollbar.com slash Talk Python To Me.

00:22:25 So another area of the people that you work with a lot are ecologists.

00:22:28 Yeah.

00:22:29 So ecologists, if you think about field biologists and ecologists, people who go out into the ecosystem and try and make observations, they have these fantastic abilities now to buy cameras, get microphones that sit out in the field and listen for days, weeks, months to the ecosystem, measuring time series of pretty much any parameter.

00:22:52 You can find a sensor that will measure that parameter and gather all that together.

00:22:57 And so they're really in this data-rich era where they have no problem acquiring data.

00:23:03 They really have a challenge when they sit down and they say, OK, I've made these observations across these different treatments over these different sites for this period of time, and I'd really like to build some insight from it.

00:23:17 They really don't have great communities around that in ecology teaching each other how to do this kind of analysis.

00:23:25 And so software carpentry has really been trying to help people think about how to build tools.

00:23:33 And one of the applications area in ecologies is really, you know, how do I build software that can help me smash all this data together and get some insight from it.

00:23:44 We don't have all the answers, but they, if you think about an ecologist or a field biologist, they're usually people who like to spend time out in the ecosystem.

00:23:52 They do a lot of field studies.

00:23:53 And now, same way as biologists are getting more data than they know what to do, ecologists are sitting there and they're getting data from different vendors.

00:24:02 Each vendor wants you to buy a $5,000 license key with a dongle that plugs into your laptop so you can actually process the data.

00:24:09 And I'm not even kidding.

00:24:10 That's what they want you to do.

00:24:11 No, I'm sure.

00:24:12 And you've got seven of these vendors for one site, one observation site, and you sit down and you go, okay, how do I start even eating this elephant?

00:24:24 And you really do need to build software that is special purpose for the experiment if you're going to do that right.

00:24:32 Right.

00:24:33 It sounds like an ecosystem or group that's really ripe for some solid open source stuff to come in and go, we don't need a dongle.

00:24:42 Let's do this.

00:24:43 Yep.

00:24:43 Yeah.

00:24:44 Yeah, yeah.

00:24:44 And there's so much vendor lock-in in that space.

00:24:48 It's completely nuts.

00:24:49 So there are ecologists that are really owning the process, trying to own their data better.

00:24:56 And that's really the kind of empowerment that learning software building skills gives you is you feel like you can tackle that challenge.

00:25:06 And you feel like you can own your data and your processing of your data.

00:25:11 You feel like you've become a creator and you can, I can change this.

00:25:15 I don't have to just take what they give me.

00:25:16 That's great.

00:25:16 So one final group that you mentioned may be worth covering is archivists and scanning manuscripts and digitizing the things, all the things.

00:25:25 You know, this is kind of broadly digital humanities.

00:25:28 This is one particular case of digital humanities where an expert on manuscripts, and if you want to be a student of manuscripts, you literally have to travel to the places, sometimes monasteries and libraries where these manuscripts are held.

00:25:45 And you have to petition for time to spend some number of days or hours analyzing this manuscript.

00:25:53 You can petition to take pictures of it, all different kinds of things.

00:25:57 This particular researcher that I did some work with back when I was working for a university said, what I'm going to do is I'm going to petition for that time, and I'm going to create a data set that everyone can benefit from.

00:26:10 And I'm just going to create this data set.

00:26:13 I don't have the tools to quite process it yet in every way I want to process it.

00:26:17 But I'm going to create this data set and hope that it becomes a model of a way that we can go digitize manuscripts and create data sets that kind of build a generation of digital archivists and manuscript experts.

00:26:33 And so he goes in with this camera rig that he's built, and he moves a point source light around, and he puts different patterns in order to see how the page is not necessarily flat.

00:26:47 And he can see kind of all the undulations in the surface model.

00:26:50 He can build kind of an elevation model of the manuscript itself.

00:26:54 Is that to try to flatten it to project it back?

00:26:57 No.

00:26:57 Well, it's not necessarily to flatten it.

00:26:59 It's just to understand when you're looking at it that it isn't flat.

00:27:03 Yeah, okay.

00:27:03 And as you're interpreting it, you know, there's all sorts of crazy things that happen on these manuscripts.

00:27:08 Like monks would carve their initials into the vellum.

00:27:11 So this is skin.

00:27:13 They'd carve their initials into the vellum in hopes that they would go to heaven because their initials were on, you know, page 23 of a particular manuscript.

00:27:21 And so finding those kind of scratchings on those inscriptions is really hard to do even when you're sitting in a room.

00:27:30 If you imagine you just walked into, you know, a dimly lit monastery with poor lighting and you're trying to see where this stuff is.

00:27:38 His data set he's created really makes it easier than it has ever been to look for this stuff.

00:27:43 Okay.

00:27:44 And so there's really interesting kind of follow-ons from this.

00:27:47 But all of humanities is doing the same thing as all these other disciplines did and saying, you know what?

00:27:54 We can collect data or we can gather data and put it in one place.

00:27:59 How do we begin to ask, you know, really interesting research questions of it?

00:28:04 And how can we build our own tools and how can we empower our next generation of researchers to be prepared to build tools that help us understand this stuff better?

00:28:14 Yeah.

00:28:15 That definitely gives us a good sense of, like, how the different disciplines might benefit from what you guys are teaching.

00:28:22 And certainly the general reusable software story is super cool.

00:28:27 So what are â€“ you mentioned tools.

00:28:30 What are some of the right tools to be working with?

00:28:32 Like, people â€“ you know, how often have there been, like, research mistakes or false results based on using the wrong tools or messing this up?

00:28:41 Yeah.

00:28:41 I mean, that stuff happens all the time.

00:28:44 There's this recent â€“ I can't remember exactly what journal it came out in.

00:28:47 But there was this recent study that said 20% of gene expression data sets in major peer-reviewed papers had errors in them introduced by cutting and pasting gene names into Excel.

00:29:03 And if you've ever seen gene names, they have these crazy names that have numbers and letters.

00:29:08 And some of them look like dates.

00:29:11 And if you've ever cut and pasted data into Excel, you know that Excel kind of just starts making up data types as it sees data.

00:29:21 And so there have been actual problems in gene analysis based on these gene naming errors.

00:29:29 By cutting and pasting vectors of gene names into Excel, you mangle your gene vectors, and they don't mean what you think they mean anymore.

00:29:38 And then you draw upon those and you make conclusions from those false gene names because Excel mangled them as you pasted them.

00:29:47 Yeah, that sounds painful.

00:29:48 Yeah.

00:29:49 That's kind of a model of how we're not always using the right tools, right?

00:29:53 So the tools that we're using are the tools that we kind of grew up with in graduate school.

00:30:00 And, you know, it's this sort of self-perpetuating system where the professors learned to do their bioinformatics analysis in Excel maybe or in other tools,

00:30:11 and they're teaching the next generation to do it in that same way.

00:30:14 And so our sort of approach is not to say, okay, you should never use Excel or you shouldn't use this tool or you shouldn't use that tool.

00:30:22 But what is a set of skills and tools that we can teach you that we can really empower you to own as a part of your process so that you are a more effective and impactful researcher?

00:30:34 And the three broad themes of that are how do you repeat tasks?

00:30:38 And we say, you know, how do you iterate over directories full of files?

00:30:42 That's a pretty common thing that if you have that superpower, you're able to increase your research throughput.

00:30:49 How can you share your code and methods with other researchers?

00:30:54 And how can you â€“ we don't go all the way into unit testing, but how can you have some level of assertion that the function you wrote does the things you think it does, right?

00:31:08 And that is an important concept.

00:31:10 That's almost an ethical concept, right?

00:31:13 So to be a responsible researcher, you have to understand that your code is doing what you think it's doing and how can you begin to ask that question of your code.

00:31:22 Sure.

00:31:22 And code as part of your research project, as part of your paper and your conclusions is becoming more of a thing, right?

00:31:29 Like there's places you can submit your code to to guarantee that it hasn't changed from when you wrote the paper and all sorts of stuff like that, right?

00:31:37 And making sure it works is just part of that, I think.

00:31:41 Yeah, and there's huge problems there.

00:31:43 I mean, things like containers purport to make some of this easier, things like Docker containers, where if you start thinking â€“ and I spent some time working for an academic library.

00:31:53 And if you start thinking about, okay, the library has to archive this project, and it's using, let's say, Python 2.7.

00:32:01 It should be using Python 3, but it's not.

00:32:03 It's still using Python 2.7.

00:32:04 And a whole chain of dependencies with custom compiled Fortran, right?

00:32:09 And you say, okay, we're going to archive this paper, and you don't archive that runtime environment in some way.

00:32:16 And then 20 years from now, you want to run Python 2.7 with all that huge dependency tree, and you want to get the same result.

00:32:23 How do you even do that, right?

00:32:25 That's not a problem we're trying to solve with our workshops yet at the moment, but that's a conversation that's happening in the broader scientific community of how do we articulate what we did in the process of running this code in ways that we can reproduce it at a later date.

00:32:43 Yeah, that's a really interesting problem.

00:32:45 I mean, it's one thing to say reproduce it across different systems or whatever.

00:32:49 It's another to say reproduce it 20, 50, 100 years from now.

00:32:53 Yep, yep.

00:32:54 And should we even be trying to do that, right?

00:32:56 So, you know, if you think about libraries, libraries are these hard drives if you want to use kind of the computationally inclined method.

00:33:06 And a file begins at one cover and ends at another cover, right?

00:33:11 And they put them on shelves, which are, you know, volumes within your hard drive or whatever.

00:33:17 So, right, it's a format they've settled upon.

00:33:20 Some of them, when you open them up, they have really big glossy pages that spill out that you can fold out or whatever, right?

00:33:27 But there's this sort of constraint that a library says we will archive these things called books and we will put them on shelves.

00:33:34 We're still having that conversation of what the digital asset is that we will archive and put on the shelf, right?

00:33:41 And it's got to be simple, like a book.

00:33:44 It starts at this cover.

00:33:45 It ends at that cover.

00:33:46 And the problem is everything between the covers is so damn complicated nobody can figure out what we're going to put on the shelf.

00:33:55 Well, it goes 001, 110, 001.

00:33:58 But other than that, we really don't agree on that.

00:34:00 Right.

00:34:02 Yeah, I think, I feel like partly the problem is the world is just changing so fast digitally right now.

00:34:08 And I feel like as we go farther in the future, there will be some stability, some underlying stability.

00:34:15 I don't think the change will stop and the innovation will stop.

00:34:18 But I think there will be some things like, okay, this has been around for 50 years and is continuing to work.

00:34:22 Like, we can probably go with this for, like, things that have to be ultra stable.

00:34:26 That's a lot about what the technical bits of these researchers need and what you teach and so on.

00:34:33 But one of the really important parts is not just to teach classes to people, but actually to build a community, right?

00:34:40 Do you want to talk about that a bit?

00:34:41 Yeah.

00:34:41 So, we train our instructors in our community.

00:34:45 They come to a workshop and they teach our learners, the people coming to get these skills.

00:34:49 And we collaborate on open source lessons online.

00:34:53 And so, those kind of three constituencies, the people who work on lessons, the instructors in our community, and the learners in our community, are all really how we start to build community so that we can have, first and foremost, an impactful workshop that shows off really high-quality teaching.

00:35:14 And then builds a support structure and community, a community of practices, as it were, at the institution, at the organization, so that you can sustain this kind of future learning, more development of the lessons that are needed, more talking about how to be an impactful instructor.

00:35:32 And turning instructors into instructors, turning learners into instructors, and really giving people avenues to enter and contribute in many different ways.

00:35:44 And so, the ways we do that are we invite people who have technical skills but do not have our instructor certification to become helpers at our workshops.

00:35:53 And a helper is really just someone that helps scale the instructor.

00:35:57 Remember, we're doing â€“ we're really doing hands-on workshops here.

00:36:01 We're doing type-along pedagogy.

00:36:03 We're at the Unix shell.

00:36:04 Everybody's got a shell prompt open, and they're typing along, and they're going through the pain that is understanding that a space-delimited bash shell environment or a Python environment that gets really picky if you don't put the tabs in the right place.

00:36:19 It throws you the screen of error messages that are â€“ if you've never seen them before or if you have seen them before but never stopped to kind of interpret them or look at them, you can use help and you can use guidance to this.

00:36:31 And our helpers are really in the room to help our learners go through that process of learning about what an error message means, trying to look critically at the incantation they typed and figure out what might be wrong with it.

00:36:44 Programming is one of those things where you basically have to do it to learn.

00:36:48 Like, you can watch and watch and watch, and you can get more ready to try.

00:36:51 But until you've actually tried and worked through some kind of problem, you're not there.

00:36:57 So I think it's great that you're doing the hands-on stuff.

00:36:59 And so these guys basically look over the shoulders of anyone and see how they're going, walk around the room, something like that.

00:37:04 Right, exactly.

00:37:05 And that's their role in the workshop.

00:37:07 But what's also happening when they're in the workshop is they're seeing an instructor who's engaged and having a good time teaching.

00:37:12 And our helpers are typically people who have a little bit of these technical skills.

00:37:17 And we try to request that our helpers consider becoming instructors and going through our instructor training process.

00:37:26 And so that's kind of the entry method for a lot of people to become instructors in our community is to first become a helper.

00:37:34 A lot of our learners, too, see this as a way that they can spread these skills to their research lab or to their particular research community that they go to a national conference.

00:37:44 And they aspire to become helpers and then instructors as well.

00:37:47 And so we have with these kind of different avenues of onboarding into our community, we have really built a vibrant community that really gives everybody a role in making those workshops really impactful, really fun, really exciting.

00:38:04 And we invite people to contribute, you know, via Git and GitHub to our lessons online, which are all Creative Commons Attribution.

00:38:13 We have a course out of about 10 lessons.

00:38:21 And we're having kind of a lot of time.

00:38:22 And we're having kind of an ongoing community conversation about what lessons are the appropriate ones in our community to be included in our community.

00:38:30 What should have their own sort of branding and spin off.

00:38:34 We've had a recent group called Library Carpentry, which has really created a stack of carpentry skills that aren't programming but are appropriate for a librarian doing the work of a 21st century data-driven librarian.

00:38:46 And they've really built a vibrant community around that set of lessons.

00:38:50 But they share the same kind of inviting structure of offering workshops to learners, training people as instructors.

00:38:58 And we've agreed to do that in the same way.

00:39:01 And so that kind of gives you a sense of overall our community is really a place to share skills and how you teach and have conversations about how you teach skills workshops.

00:39:12 Yeah, that sounds really, really great.

00:39:14 Like not everybody from some research group can go.

00:39:17 Maybe the principal researcher and maybe one or two other people go and they can take that skill back.

00:39:23 And because the materials are Creative Commons, they could actually go and do like a little workshop for their people or something like that, right?

00:39:30 Yeah, yeah.

00:39:30 And we have professors all over the world who use our workshop lessons as the foundation for the first week or two of skills that they want their students to have in their semester-long courses

00:39:44 before they dive into kind of a deep dive of particular application of those skills.

00:39:49 Oh, right.

00:39:49 Okay, sure.

00:39:50 So if you're going to teach a class on astronomy, maybe you'll use that to like bootstrap it a little bit.

00:39:55 Exactly.

00:39:56 Yeah.

00:39:56 Hey, everyone.

00:39:57 Let me take just a quick moment and tell you about a new sponsor of the show, MongoDB University.

00:40:02 MongoDB is one of the fastest growing job skills on the market.

00:40:05 Long ago when I was getting into MongoDB, I took one of their free courses on Mongo University.

00:40:10 It was a great way to get up and running with my first app.

00:40:13 MongoDB University offers free seven-week courses on MongoDB designed to teach you everything you need to know about how to build a MongoDB-based app.

00:40:21 This course will cover basic installation, JSON, schema design, querying, inserting data, indexing, and working with the Python driver, of course.

00:40:29 After completing this course, you should have a good understanding how applications are built on top of MongoDB using Python.

00:40:36 Plus, you'll have a great foundation for preparing for the MongoDB developer certification exam.

00:40:40 I hope you can join me as a MongoDB University alumnus.

00:40:43 Sign up for the free seven-week course at talkpython.fm/Mongo.

00:40:49 We feel strongly that lessons that are taught by many people are much better than lessons that are taught by a single person.

00:40:57 And there's this famous adage that no battle plan survives first contact with the enemy.

00:41:03 The teaching sort of corollary to that is no lesson plan survives first contact with the student.

00:41:09 And so having lessons that have been taught by many people to many students and are continuously improved through an open contribution model, an open source model, are better lessons than if you sat down and you said, I'm going to teach you Shell today.

00:41:25 And these are the things you should know about the Shell.

00:41:28 And so over time, we've built this set of core lessons that have been taught a lot.

00:41:33 People have had conversations about them.

00:41:35 They're not perfect, as anyone who's contributed to open source knows.

00:41:38 Just because a project has a lot of excitement around it and a lot of people contributing to it doesn't mean that everything about it is perfect, right?

00:41:46 There's always things that crop up because of the nature of multi-party contribution systems.

00:41:53 But overall, there is a deep conversation happening about what should be there and what shouldn't be there and what the ideals are of that community and what they're trying to advance by that project.

00:42:06 And our lessons embody that.

00:42:08 Yeah, that's cool.

00:42:09 And you guys have like a retrospective or something after a bunch of people teach one week or something like this, yeah?

00:42:15 Yeah, we have these debriefing sessions where everyone in the world who's taught a workshop in the last week or so will come to an online video call and talk about what worked for them, what didn't work for them.

00:42:26 Maybe it was their first time teaching Git.

00:42:28 They had taught Python before, but they'd never taught Git.

00:42:31 And they say, you know, I just failed spectacularly when I was trying to tell people how to resolve conflicts, right?

00:42:36 I can't even resolve my own conflicts in Git very well.

00:42:39 And it drives me.

00:42:40 Well, I'm still confused about remaze.

00:42:41 Right.

00:42:42 Right.

00:42:43 Well, our lesson doesn't get into rebase, but, you know, maybe our advanced lesson will one day.

00:42:49 That'll come up eventually.

00:42:51 Yeah.

00:42:51 Nice.

00:42:52 One thing I'd like to bring it back to you is just a concrete example of all of this.

00:42:57 I recently had Jake Vanderplass from University of Washington and the eScience Research Institute up there.

00:43:03 And he's the astrophysicist.

00:43:05 That was episode 81.

00:43:07 And you guys are actually doing a lot of work with them up there.

00:43:09 I think they're doing some really cool stuff with merging academics and science along with real data science and programming.

00:43:16 At the University of Washington, yeah, with the eScience Center, we've trained a ton of instructors up there.

00:43:22 They've actually been â€“ I've been in this job a little over a year now.

00:43:26 And when I first arrived, they were so enthusiastic and excited to get more of their people trained as instructors because it's really great for their careers being affiliated with the eScience Center, teaching workshops to people.

00:43:40 They've really created this buzz on their campus about eScience being for everyone in all disciplines.

00:43:46 They're running quarterly workshops.

00:43:48 They have something like 25 instructors on campus now so they can run workshops whenever they want to.

00:43:53 And they've really got their postdocs and affiliated graduate students that are affiliated with the eScience Center excited about the community building and how, in the process of you teaching other people the skills that you have as a data-driven researcher,

00:44:09 you get better at your own skills.

00:44:11 And so that has been a really neat, evolving story.

00:44:15 They're always pushing into new research communities.

00:44:18 We're always hearing that they've got instructors coming from different disciplines.

00:44:23 And they're really building kind of this neat center on campus, which is the literal place you come to to ask questions about data-driven research and skills that you need to tackle research problems.

00:44:36 And software carpentry has become kind of the entryway into that conversation to say, hey, we've got this workshop.

00:44:44 It's a way to begin to learn these skills.

00:44:46 And, oh, we've got these other programs and structures as well that can support you.

00:44:50 Yeah, that sounds really cool.

00:44:51 I think that whole eScience Institute sounds great.

00:44:54 Like I said, I wish that it was around when I was in grad school.

00:44:58 But, you know, it's a different time.

00:45:01 So this all sounds good.

00:45:02 What do people want to get involved?

00:45:03 Like what do they do?

00:45:05 We have a couple of ways to get involved.

00:45:07 Software-carpentry.org slash join is a website that has a couple of links on it about how to join our mailing list, how to get on our newsletter release, what are going on in terms of our community events and calendars.

00:45:21 We typically have a monthly community call that people can attend.

00:45:25 And that's a way to really become a volunteer and a contributor to the community.

00:45:30 We also have a partnership program or a membership program where your organization, if you are at an organization that would like to bring software carpentry, instructor training, and capacity building services to your organization, you can become a member organization.

00:45:46 What's an example of a member organization?

00:45:48 Is that a university or what is that?

00:45:50 Yeah, so it can be everything from a research lab to a university.

00:45:54 For example, the eScience Institute is a member organization of Software Carpentry.

00:45:58 And what we do with them is we make sure they get a consistent amount of instructor training every year.

00:46:04 We give them a seat on what we call our advisory council, which is a body that helps to set the direction of where our priorities are in terms of lesson development, how we run the community, how we handle things like what our code of conduct is.

00:46:18 And how we spread and how we spread and how we spread and how we spread and where we spread it to.

00:46:23 So we really give people a seat at the community steering wheel through the advisory council.

00:46:29 Oh, yeah. Excellent.

00:46:30 Yeah. So partner organizations range everything from this pan-European collective of 20 countries trying to enhance bioinformatics infrastructure for all of Europe at that scale, like a multinational scale, all the way down to one particular researcher's graduate lab who wants every one of his graduate students or her graduate students to go through software carpentry training.

00:46:55 Wants every one of them by the time they finish their PhD to be an instructor in our community.

00:46:59 And so broad scale.

00:47:02 But the really common thread is that they want to build capacity around these kind of data driven research skills.

00:47:09 Sounds great.

00:47:10 So where are you guys going?

00:47:11 What's the future for software carpentry look like?

00:47:14 Yeah. Right now we're kind of in a mode where we're trying to plant new instructional communities all over the world.

00:47:20 We're trying to spread into developing world countries.

00:47:24 We're trying to figure out how our business model works in those places.

00:47:28 Right now our business model is really these paying partner organizations and helping to bring workshops to organizations.

00:47:36 So we're in this kind of expansion of instructional community.

00:47:40 We want to train as many instructors as we can around the world.

00:47:43 To do that, we've got to build these memberships and partnerships in order to support our organization to do that.

00:47:49 Long term, you know, as we have these vibrant instructional communities around the world,

00:47:54 we really want to support the growth of the lessons that people need.

00:47:59 So I kind of have this dream of a big chart on the wall where you walk into graduate school and you look on the wall and it's seven or eight workshops,

00:48:07 you know, with a dotted line through them that tell you start here and over here,

00:48:11 you'll have some machine learning and data visualization skills.

00:48:14 Right. Or if you're, you know, you want to go into a different discipline,

00:48:18 you really want to get into all the tooling and continuous integration and all of those kinds of things.

00:48:24 You really want to get smart on the software engineering tools side of things, follow this dotted line.

00:48:29 You know, that's going to take a long time.

00:48:31 But the first thing we need to do is get more people in the community talking about these lessons that we have,

00:48:37 creating the lessons that we don't have and creating that conversation.

00:48:41 And then we can kind of step into this rapid expansion of the number of lessons we have.

00:48:47 And so that's kind of the goal at the moment.

00:48:50 Our overall goal is really to, you know, we're a nonprofit.

00:48:54 Our success are kind of basically in our formation statement.

00:48:59 We've said once everybody has all these skills, we should cease to exist.

00:49:03 Right.

00:49:03 We're a long, long way away from that.

00:49:06 We aspire to a world where we're not needed.

00:49:08 Exactly.

00:49:09 Yeah.

00:49:10 So that's our long term goal is to go out of existence.

00:49:14 That being said, there's a lot of work to do between here and there.

00:49:18 And yeah.

00:49:20 That's a great, great goal.

00:49:21 You said you guys are a nonprofit, but you still got to make money to support some of your efforts and so on.

00:49:26 What's the business model look like?

00:49:28 You talked about the member organizations.

00:49:29 They're somehow involved, right?

00:49:31 Yeah.

00:49:31 So member organizations pay us an annual fee.

00:49:33 And they're typically universities, national labs, research networks.

00:49:37 And they pay this annual fee to both get instructor training and to help kind of steer the community and the resources we have as a community.

00:49:45 So some things we do are, for example, every workshop we run has an assessment survey.

00:49:51 And that assessment survey is a pre-workshop and post-workshop assessment that can help you understand kind of the boost that the workshop had on the workshop attendees.

00:50:00 So these are all things that if you were someone sitting at an organization trying to build a training arm of your organization, it would be very expensive for you to build.

00:50:09 But we try to spread that across the member organizations with a modest annual fee.

00:50:14 And we build in those kinds of services and structures into our lessons, into the lessons that we support.

00:50:21 And so that's one part of our revenue model.

00:50:24 The other part is when we bring workshops to new communities, we charge a fee to help get our instructors there.

00:50:33 We don't pay for the travel, but we do the coordination to bring instructors to your particular site.

00:50:39 So, for example, if you, you know, so the Department of Physics and then an astronomer said,

00:50:44 I'd really like to have a software carpentry workshop in the spring of 2017.

00:50:49 They would contact us.

00:50:51 We would find some instructors that were appropriate for teaching the skills that they wanted, the lessons that they wanted for that constituency.

00:50:59 And they would pay us a finder's fee and kind of a workshop fee.

00:51:04 And they would pay the travel for those instructors.

00:51:06 All of our instructors volunteer.

00:51:08 These volunteer instructors really get a tremendous benefit.

00:51:13 We have, maybe we can link in the show notes, there's an impact of instructor report,

00:51:19 which is 40 pages of qualitatively coded responses of our 265 respondents at the time about a year ago,

00:51:26 telling us really how being an instructor in the community has boosted their career, has boosted their science,

00:51:33 has boosted their technical capabilities.

00:51:35 And it really is a virtuous cycle.

00:51:38 Yeah, that's cool.

00:51:39 It definitely would make you stand out from all the other graduating scientists to say,

00:51:44 Oh, yeah, and I teach this to all around the world, all these people.

00:51:47 Like, it's, you know, I've done a lot of training in the software developer space in person and virtual and whatnot.

00:51:52 But it makes a huge difference.

00:51:55 The connections you build from meeting all the students, the experience you build,

00:51:59 the depth of knowledge you get compared to just knowing how to do something with code or the tools,

00:52:05 but understanding them, things like that.

00:52:07 It's great.

00:52:08 Now, I saw on your site that you do have some videos that people can go watch.

00:52:11 That's not the main thing you guys do.

00:52:13 It's not like video training.

00:52:14 These are mostly live, right?

00:52:15 Live videos are really demonstrations of some of our senior instructors,

00:52:21 pedagogical classroom management kinds of practices.

00:52:25 Yes, they are teaching the topics and the skills.

00:52:28 And yes, they are exhaustive in the sense that the videos are the full workshop or full modules of the workshop.

00:52:36 But we really feel strongly that the live instruction and the live experience,

00:52:42 plus having helpers available to help you in the room.

00:52:45 We use a system of sticky notes where you put a green sticky note on your laptop screen,

00:52:50 on the backside of your screen.

00:52:52 If you've solved the problem we've asked you to solve and it's working, and you put a red sticky note up if you haven't been able to solve it or you have a question.

00:53:01 And our helpers that are in the room, we have one helper for every 10 people in the room,

00:53:06 are really going around the room and helping you with your problems as they arise.

00:53:10 That's really clever.

00:53:11 I've done a lot of the workshop stuff that you're talking about, but we never had sticky notes.

00:53:15 That's a great idea.

00:53:16 That's something that we've been doing for quite some time.

00:53:19 And we've even had some people create a third sticky note, a blue one, which is speed up or slow down.

00:53:26 I think it's slow down, right?

00:53:28 So you're talking too fast or you're teaching too fast.

00:53:30 And so if you look out in the room of 40 people and 10 people have a blue one up,

00:53:34 you know, to kind of pace it down a little bit, kinds of things.

00:53:38 So yeah, it's a great system.

00:53:40 We're really trying to have a lot of fun as an instructor and share our passion for these tools, really to share our experience of how

00:53:48 maybe we learned about me as a graduate student.

00:53:51 I can remember having a stack of Landsat files, satellite image files, and needing to do a particular Unix command line tool applied to it.

00:54:00 And, you know, when you write that for loop that gets you to iterate over it

00:54:04 and you can go have a coffee and it runs for three more days and then gets all that work done, you're like,

00:54:09 oh my God, how do people do it without this?

00:54:12 And so we...

00:54:14 They just can't solve those problems, basically, right?

00:54:16 That's too much.

00:54:17 Right, right.

00:54:18 So when you can share that passion and enthusiasm about how you solved some particular problem,

00:54:23 for me, that is really what's so exciting about teaching.

00:54:27 I came up as an instructor in the community.

00:54:28 I taught something like 11 workshops in two years as an instructor in the community.

00:54:34 And really, it's just a lot of fun.

00:54:37 And you give back, you build up people, you're impacting and empowering them to do really awesome research.

00:54:44 Wow, that's awesome.

00:54:46 Well, I think we might be getting to the end of the show.

00:54:49 We're more or less out of time, but it sounds like such a cool project.

00:54:52 And the fact that the content is open source, I think it's really great.

00:54:57 So nice work.

00:54:58 Yeah.

00:54:59 Before we hit the road, let me ask you two final questions.

00:55:03 Of course, I always ask my guests.

00:55:05 Uh-huh.

00:55:05 There are now over 90,000 PyPI packages out there.

00:55:09 A crazy number, right?

00:55:10 It just keeps growing.

00:55:11 So what are some of your favorites that you think people should know about?

00:55:14 These days, I do a lot of preparing documents, like legal agreements and things like that.

00:55:21 So in order to do that, I use cookie cutter a whole heck of a lot, and Jinja templates to fill in documents.

00:55:28 All right.

00:55:29 So that's interesting.

00:55:31 I know about cookie cutter, it's like templates for building projects, like you can build a Django project or some other type of project.

00:55:37 You can pre-bake that in a cookie cutter.

00:55:40 How does that work with documents?

00:55:41 For every agreement that I create, and maybe this isn't the right way to do it,

00:55:46 but this is the way I do it.

00:55:47 I create a little bit of a YAML slug that is all the things I want to fill in to that document.

00:55:53 And then cookie cutter kind of places everything in the right directory for that agreement.

00:56:00 Every agreement is a little bit different.

00:56:02 I have to create a new directory with the template every time, because the template isn't necessarily the same for every single agreement.

00:56:10 The template can kind of change a little bit.

00:56:11 But the hard part, the arduous part, if I did this manually, was to fill in all those fields.

00:56:18 And so cookie cutter kind of drops everything in place.

00:56:21 It drops the markdown template, which I use pandoc to walk into an ODT or a docx or a PDF,

00:56:30 whatever people want.

00:56:31 And so cookie cutter for me is the way that when I have a new partnership or a new membership,

00:56:35 I'm going to sign, I say cookie cutter, the name of the organization, or cookie cutter, the name of the cookie cutter directory.

00:56:41 And it kind of prompts me to fill in all those YAML fields.

00:56:44 Oh, that's really, really, really cool.

00:56:46 All right.

00:56:47 And for editing, if you're going to write some Python code or any code, really,

00:56:50 what editor do you open up?

00:56:52 I'm a VI kind of guy.

00:56:54 I've never, you know, achieved VI ninja skills with commands, you know, four or five letters long or anything like that.

00:57:03 But things like magic, like delete inside quotations or parentheses are just like magical to me.

00:57:10 And I've learned a couple of things that help me move around more efficiently in VI

00:57:15 than I can anywhere else.

00:57:16 And it's on every freaking system anywhere, no matter if your terminal emulator is working

00:57:22 right or not.

00:57:23 It just works.

00:57:23 So back in the dark ages of telnetting into systems that you didn't even know what the system

00:57:30 was, VI would be there to hold under your pillow at night.

00:57:34 So I've just always gone for that.

00:57:38 That's cool.

00:57:39 And a lot of the popular editors that are not VI, many of them have VI bindings as well.

00:57:44 So you can carry it along even if you go somewhere else.

00:57:47 You can read your Gmail with J and K to scroll up and down, you know, just to feel like you're at home.

00:57:54 That's right.

00:57:54 I think I was just doing that like right before we started talking today.

00:57:57 Awesome.

00:57:58 All right.

00:57:58 So final call to action.

00:57:59 People want to get involved.

00:58:00 Like they want to learn more.

00:58:01 What's the story?

00:58:02 You can subscribe to our newsletter.

00:58:04 It's a monthly newsletter at the moment.

00:58:07 It may be slightly more periodic in the future.

00:58:09 You also in our join page linked to before we have a pretty active discuss mailing list for

00:58:16 people who are interested in kind of pedagogical discussions and how to teach programming skills.

00:58:21 You can host a workshop at your organization and you can go to our website and find how to

00:58:27 host a workshop.

00:58:27 And you can also take the next step, which is to really get your organization to become a

00:58:33 member organization and build a community of instructors at your local organization.

00:58:37 Feel free to reach out to me directly on Twitter or email.

00:58:41 And I'll put those links in the, you know, like your contact info and stuff in the show notes.

00:58:45 That's really cool.

00:58:46 Okay.

00:58:46 Excellent.

00:58:47 Awesome.

00:58:47 Well, I'm really glad to see what you guys are doing to create more creators, fewer consumers

00:58:53 in the world of science and software.

00:58:55 So nice work.

00:58:56 Very cool stuff.

00:58:57 Well, thank you, Michael, for the time.

00:58:59 And I'm excited to contribute.

00:59:02 I know this, this shows a little bit off the beaten path in terms of talking tools and

00:59:07 Python systems, but this is an important kind of foundation that can grow the community

00:59:12 of contributors to other Python projects and other parts of the Python ecosystem.

00:59:17 So I'm excited to have had the time to have this conversation with you.

00:59:21 Yeah.

00:59:22 Well, it was great to have you here.

00:59:23 Thank you, Jonah, and see you later.

00:59:24 All right.

00:59:25 Cheers.

00:59:25 This has been another episode of Talk Python To Me.

00:59:29 Today's guest has been Jonah Duckles.

00:59:32 And this episode has been sponsored by Rollbar and MongoDB University.

00:59:35 Thank you both for supporting the show.

00:59:37 Rollbar takes the pain out of errors.

00:59:41 They give you the context and insight you need to quickly locate and fix errors that might

00:59:45 have gone unnoticed until your users complain, of course.

00:59:48 As Talk Python To Me listeners, track a ridiculous number of errors for free at rollbar.com slash

00:59:54 talkpythontome.

00:59:55 Get the skills you need to build your Python apps on top of the most successful and in-demand

01:00:01 document database at MongoDB University.

01:00:04 Take a free class by visiting talkpython.fm/Mongo.

01:00:08 Are you or a colleague trying to learn Python?

01:00:11 Have you tried books and videos that just left you bored by covering topics point by point?

01:00:15 Well, check out my online course, Python Jumpstart by Building 10 Apps at talkpython.fm slash

01:00:21 course to experience a more engaging way to learn Python.

01:00:24 And if you're looking for something a little more advanced, try my Write Pythonic Code course

01:00:29 at talkpython.fm/pythonic.

01:00:33 Be sure to subscribe to the show.

01:00:34 Open your favorite podcatcher and search for Python.

01:00:37 We should be right at the top.

01:00:38 You can also find the iTunes feed at /itunes, Google Play feed at /play, and

01:00:44 direct RSS feed at /rss on talkpython.fm.

01:00:47 Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

01:00:52 Corey just recently started selling his tracks on iTunes, so I recommend you check it out at

01:00:57 talkpython.fm/music.

01:00:59 You can browse his tracks he has for sale on iTunes and listen to the full-length version

01:01:03 of the theme song.

01:01:04 This is your host, Michael Kennedy.

01:01:06 Thanks so much for listening.

01:01:08 I really appreciate it.

01:01:09 Smix, let's get out of here.

01:01:19 Bye.

01:01:20 Bye.

01:01:21 Bye.

01:01:22 Bye.

01:01:23 I'm first.

01:01:25 I'm first.

01:01:28 I'm first.

01:01:31 developers, developers, developers.

01:01:33 .

