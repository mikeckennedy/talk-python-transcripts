WEBVTT

00:00:00.001 --> 00:00:05.180
Have you heard of Django? It's this little web framework that, well, kicked off much of Python's

00:00:05.180 --> 00:00:11.720
significance in the web space back in 2005. And that makes Django officially an adult. That's

00:00:11.720 --> 00:00:16.860
right, Django is now 18, and Django continues to lead the way on how communities should be done for

00:00:16.860 --> 00:00:22.560
individual projects such as web frameworks. We have Carlton Gibson and Wilvison back on the show

00:00:22.560 --> 00:00:28.620
this episode to discuss a bit of Django history, Django trends in 2023, a little bit of HTMX and

00:00:28.620 --> 00:00:35.820
Django, and lots more. This is Talk Python to Me, episode 428, recorded July 26th, 2023.

00:00:35.820 --> 00:00:54.300
Welcome to Talk Python to Me, a weekly podcast on Python. This is your host, Michael Kennedy. Follow

00:00:54.300 --> 00:00:59.840
me on Mastodon, where I'm @mkennedy and follow the podcast using @talkpython, both on

00:00:59.840 --> 00:01:04.780
fosstodon.org. Be careful with impersonating accounts on other instances. There are many.

00:01:04.780 --> 00:01:09.840
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.

00:01:09.840 --> 00:01:15.680
We've started streaming most of our episodes live on YouTube. Subscribe to our YouTube channel over

00:01:15.680 --> 00:01:21.440
at talkpython.fm.com to get notified about upcoming shows and be part of that episode.

00:01:21.440 --> 00:01:27.920
This episode is brought to you by Sentry and us over at Talk Python Training. Please check out what

00:01:27.920 --> 00:01:31.380
we're both offering during our segments. It really helps support the show.

00:01:31.380 --> 00:01:37.060
Will Carlton, welcome to Talk Python to Me. It's awesome to have you both back on the show.

00:01:37.060 --> 00:01:38.420
Thank you for having us on again, Michael.

00:01:38.420 --> 00:01:39.480
Yes, thank you. It's always fun.

00:01:39.660 --> 00:01:44.640
It's always fun to have other podcasters on the show. We'll talk a bit about your podcast

00:01:44.640 --> 00:01:48.960
in a moment. Maybe just do a quick introduction. I know people probably know you from your show,

00:01:48.960 --> 00:01:53.760
Django Chat. They know you from being on Talk Python previously, but for those who don't. Will,

00:01:53.760 --> 00:01:54.280
we'll go first.

00:01:54.280 --> 00:01:59.520
Sure. So, William Vincent, I have three books on Django, most notably Django for Beginners.

00:01:59.520 --> 00:02:04.400
I run a site, learndjango.com. I just got off three years being on the board of Django. So,

00:02:04.400 --> 00:02:09.640
Django is run by a nonprofit. I run a weekly newsletter on Django, Django News. Too many things.

00:02:10.080 --> 00:02:14.000
So, yeah, most of my time is spent doing some consulting and a lot of teaching and learning

00:02:14.000 --> 00:02:16.300
about Django. So, I'm very happy to be at that stage.

00:02:16.300 --> 00:02:17.100
It's a good combination, right?

00:02:17.100 --> 00:02:19.900
If you can make it work, it is. Yeah, if you need that sort of cycle of,

00:02:19.900 --> 00:02:21.900
you know, I need to learn too and be interested.

00:02:21.900 --> 00:02:22.280
Yes.

00:02:22.280 --> 00:02:23.640
I like learning and teaching.

00:02:23.640 --> 00:02:29.860
One of the challenges that I think people can fall into on the traps is if you just teach,

00:02:29.860 --> 00:02:34.600
it's hard to have that. It looks like a good idea, but let me tell you, it's a bad idea.

00:02:34.600 --> 00:02:39.000
And here's the three reasons. And here are the tears that I've shed because I tried this way.

00:02:39.120 --> 00:02:44.840
You need a little hands-on. Like for me, it's running all the infrastructure and APIs and mobile

00:02:44.840 --> 00:02:49.620
app stuff at Talk Python, which is plenty to get the tears. I've pulled out plenty of hair, but you know,

00:02:49.620 --> 00:02:53.900
like I think consulting plus teaching is a really common mix for that. You like it?

00:02:54.060 --> 00:02:58.460
Yeah, I do. I mean, so I've been working on, so I have this site, learnjango.com that I'm trying to

00:02:58.460 --> 00:03:03.320
consolidate everything onto that site. And so that's been an effort I've been working on in earnest the

00:03:03.320 --> 00:03:07.060
last couple of months. And so it's actually been really fun to just be an engineer for a change.

00:03:07.060 --> 00:03:11.680
And I kind of wish I could find a me to help me when I get stuck, but there is no being,

00:03:11.680 --> 00:03:16.340
as Carlton will share something, you know, being stuck is part of the game, but it's, it's uniquely

00:03:16.340 --> 00:03:22.500
satisfying and frustrating to code because everything is solvable. But I, you know, still,

00:03:22.500 --> 00:03:26.980
I find things that stopped me for a couple of days and I'm just like, it brings me back to like the

00:03:26.980 --> 00:03:31.480
first, you know, couple of months of coding and like the terror of like, I'm not smart enough. I can't do

00:03:31.480 --> 00:03:36.800
this, but I know that I'll get it done and I do get it done. So you get the yin and yang, but it's

00:03:36.800 --> 00:03:41.340
uniquely satisfying to do the commit and it's done, right? Whereas even, even a podcast,

00:03:41.340 --> 00:03:45.820
it's in the bank, but it's not quite the same binary feeling of accomplishment.

00:03:45.820 --> 00:03:50.900
That's true. The getting stuck is frustrating, but also it means you're about to level up,

00:03:50.900 --> 00:03:52.820
right? You're going to figure out something. Yeah.

00:03:52.820 --> 00:03:56.660
I try to be excited about it because I know if I'm stuck, then lots of other people are gonna be stuck

00:03:56.660 --> 00:04:00.580
or a lot of times I'm stuck on one little thing. And it's really, cause there's some other thing I,

00:04:00.580 --> 00:04:04.840
some fundamental that I didn't know as well as I thought I did. So we can talk about that,

00:04:04.840 --> 00:04:08.280
but I have, I have thoughts on all of that. So yeah, it's a nice, it's a nice mix to do.

00:04:08.280 --> 00:04:13.240
And more importantly, now I have friends and peers who, when I get stuck, I can ask them. So

00:04:13.240 --> 00:04:18.180
Carlton, of course, is one of them, you know, Django, former Django fellow, a couple others.

00:04:18.180 --> 00:04:22.220
It's important to, you know, we can talk about this, but when you're learning, learning how to ask a

00:04:22.220 --> 00:04:26.420
good question on Stack Overflow or Django has its own forum, which is a great resource forum

00:04:26.420 --> 00:04:31.160
that Django project.com, you know, but the next stage is like, I did a walk, I slept on it,

00:04:31.160 --> 00:04:34.520
like knowing when to ping a friend, cause you don't want to ping a friend all the time,

00:04:34.520 --> 00:04:39.660
but sometimes it's like, okay, like this is, I'm truly stuck. There's no point like wasting a week

00:04:39.660 --> 00:04:43.620
or two on this. Yeah, for sure. That's a really nice stage to get to. And it's also helpful to help

00:04:43.620 --> 00:04:46.780
other people too, cause you're thinking about something and someone gives you something they're

00:04:46.780 --> 00:04:50.240
stuck on. You're like, Oh, boom, that's that. And then you're like, Hey, I'm working on, you know,

00:04:50.240 --> 00:04:54.120
something that's stuck. So anyways, having a community is really, really levels you up too.

00:04:54.240 --> 00:04:58.620
And also people who can relate to good and bad things about code. Django is very stable,

00:04:58.620 --> 00:05:03.140
but has a host of new features, many of which I haven't actually used. Carlton can talk about them.

00:05:03.140 --> 00:05:08.800
So it's important to have community, right? Not just be in your own room with your computer fighting

00:05:08.800 --> 00:05:13.800
with it. Yeah. Yeah. Any trouble or good or bad thing you've had many, many other people have had,

00:05:13.800 --> 00:05:17.940
you just have to find them. Unlike the movie stereotypes, it's, it's way more social,

00:05:18.060 --> 00:05:22.900
this coding thing. It is before. Yeah. But before I let Carlton introduce himself,

00:05:22.900 --> 00:05:28.040
just a quick comment from the audience to make you feel good a bit from Bishon, who says the first

00:05:28.040 --> 00:05:32.300
book I read on Django was William's book. So thank you. Thank you. I appreciate that. Yeah. I just,

00:05:32.300 --> 00:05:36.660
one last point and then I want Carlton to talk, but I wrote three books, Django for Beginners,

00:05:36.660 --> 00:05:42.620
APIs, Professionals that first came out in 2018 and 19. And then I've updated all three of them every

00:05:42.620 --> 00:05:46.300
year since then. So on the one hand, it's been four years. I haven't had a new book,

00:05:46.300 --> 00:05:50.000
but it's also, I've written what? Or you've had 12 new books.

00:05:50.000 --> 00:05:55.140
12 new books. Yeah. I mean, I really have. I really have. It's, it doesn't feel quite as

00:05:55.140 --> 00:05:59.200
satisfying, but I know that I have a built-in audience and I've, so it's a weird dynamic to

00:05:59.200 --> 00:06:03.500
be in a situation where it's sustainable to maintain and update your stuff. I mean, I'm sure you can relate.

00:06:03.500 --> 00:06:06.840
You have all these different courses, right? That's the thing that falls off. You do the effort,

00:06:06.840 --> 00:06:10.540
you get the course out and then it goes out of date or it could be made better, but-

00:06:10.540 --> 00:06:11.660
Or Pydantic 2 comes out.

00:06:11.660 --> 00:06:15.840
Django every eight months comes out. Yeah. So it's, yeah,

00:06:15.920 --> 00:06:19.400
I try to think of the positive of it. It is, I feel like the book is so much better,

00:06:19.400 --> 00:06:23.660
but a lay person or family members or friends are like, when's the new book coming out? It's like,

00:06:23.660 --> 00:06:25.800
I just, I just did it. Like, yeah.

00:06:25.800 --> 00:06:27.120
Yeah, indeed. Carlton.

00:06:27.120 --> 00:06:27.900
Who are you, Carlton?

00:06:27.900 --> 00:06:28.820
Welcome. Who are you?

00:06:28.820 --> 00:06:33.320
Who am I? Well, my name's Carlton. I do a podcast with Will. So basically,

00:06:33.400 --> 00:06:37.680
I've just stepped down as a Django fellow. So I've spent the last five years being a Django fellow,

00:06:37.680 --> 00:06:42.140
which means I was contracted by the Django Software Foundation to help maintain Django itself. And they

00:06:42.140 --> 00:06:46.540
have a couple of fellows and I was one of them for that period. And I've stepped down in order to go

00:06:46.540 --> 00:06:51.860
back to building things with Django rather than working kind of just on Django. It's, so it's a kind of,

00:06:51.920 --> 00:06:56.260
you know, after five years, that's, that was a good time period. And it's time for me to go back to building

00:06:56.260 --> 00:07:01.780
things with Django. I've been using Django forever and I've, I'm a maintainer on a lot of projects in the

00:07:01.780 --> 00:07:06.360
ecosystem. So I've worked on Django as framework, Django Filter, Django Crispy Form, Django Compressor,

00:07:06.360 --> 00:07:10.480
Django AppCon. I've maintained the channels package. You know, I do quite a lot in that.

00:07:10.620 --> 00:07:13.400
So your code runs on many, many servers, you should say.

00:07:13.400 --> 00:07:19.580
More than like, I like to think about like, so one thing when I was a fellow, we were always, people always

00:07:19.580 --> 00:07:25.140
give us a bit of grief about how conservative Django is. It's very stable and very, you know, we're very cautious

00:07:25.140 --> 00:07:30.400
about making backwards incompatible changes. We try not to do that. We've got a solid deprecation policy,

00:07:30.400 --> 00:07:36.500
got the long-term support policies. And then at DjangoCon last year, somebody read out the numbers,

00:07:36.500 --> 00:07:40.480
the download numbers. It's not, you know, it's not necessarily the most downloaded package,

00:07:40.560 --> 00:07:44.640
but it's millions, millions of downloads, millions of projects that are using it.

00:07:44.640 --> 00:07:49.580
And you really can't break it. That's always really like humbling and really kind of,

00:07:49.580 --> 00:07:55.840
yeah, actually all the work we put into making sure that the product is stable is, that's good work.

00:07:55.840 --> 00:07:56.900
That's important work.

00:07:56.900 --> 00:07:59.900
Yeah. Threads is using it, Carlton. You're helping out Mark Zuckerberg.

00:07:59.900 --> 00:08:03.020
Yeah, yeah. Well, I'll be using a fork of it. We can get into that, but yeah.

00:08:03.020 --> 00:08:07.960
I was looking at a comment on the forum. I got a little heart from somebody asked on the Django forum,

00:08:08.420 --> 00:08:14.960
does Django scale or can I run it on lots of systems? And I'm like, well, you do know that Instagram was built on it.

00:08:14.960 --> 00:08:17.880
You know, they're still using that core request response cycle.

00:08:17.880 --> 00:08:20.880
And, you know, my comment was, you're not going to serve more traffic than Instagram.

00:08:20.880 --> 00:08:26.100
So yes, Threads is built on that core request response, but it's still essentially Django.

00:08:26.100 --> 00:08:34.720
Maybe not everyone is up on what Threads is. No, not a parallels programming thing, but a Twitter clone from Meta and Facebook, right?

00:08:34.720 --> 00:08:36.060
Apparently so, yes.

00:08:36.060 --> 00:08:42.160
We have an interview, maybe we can put in the show notes with Carl Mayer, who was original core Django developer who then went to Instagram.

00:08:42.720 --> 00:08:47.000
So he spoke for an hour about, so initially it was just, it was pure Django.

00:08:47.000 --> 00:08:55.300
And then as they scaled, they did things like they ripped out the ORM and they changed this and that, but there is still a core of it, the request response cycle that's in there.

00:08:55.300 --> 00:09:01.420
That's another interesting thing is Django, when you get to massive, massive size, a lot of companies, you know, they have thousands of engineers, right?

00:09:01.420 --> 00:09:08.020
We have, we Django has just the community. So as soon as you hop off the guardrails, then you're kind of on your own.

00:09:08.020 --> 00:09:13.120
And that's sort of separate debate on whether it's worth or not, but you can, you can get quite large and it's interesting.

00:09:13.120 --> 00:09:19.380
By contrast, like I believe Shopify is still on rails, I believe, or seem to have gone much longer.

00:09:19.380 --> 00:09:20.900
Carlton, yeah, you have something to add?

00:09:20.900 --> 00:09:26.320
Well, I don't think it's really, I mean, I know Instagram moved away from the ORM, but that was quite a long time ago.

00:09:26.420 --> 00:09:33.020
If you look at octopus and kraken, they're still basically using something that's basically vanilla Django to do, you know, massive projects.

00:09:33.020 --> 00:09:45.720
And so, you know, what it was back in, you know, 1.6, 1.7, 1.8, when Instagram were needing to pull away from what Django is, is a lot different from what Django is at 2.2, 3, 3, 4, now 4.2.

00:09:45.720 --> 00:09:47.020
Going to be 5, yeah.

00:09:47.020 --> 00:09:56.140
I wonder if they regret that. I wonder, not necessarily, maybe it was the right choice at the time, but do they kind of wish, like wish they had access.

00:09:56.140 --> 00:09:59.620
If nothing else, to fork version 5 instead of version 1.6.

00:09:59.620 --> 00:10:07.140
I wish they'd, I wish there'd been a bit more pushback on Django from thinking about, because what, what was it that caused them to change?

00:10:07.140 --> 00:10:14.060
I think the move from it being able to root string names, strings as view names, like, and having to import the view itself.

00:10:14.060 --> 00:10:19.240
And I think at that point, like, for Instagram to rewrite the whole stack, it was, it was too much.

00:10:19.240 --> 00:10:23.380
And in the end, they kind of forked, but it would have been great if we could have kept them on board.

00:10:23.380 --> 00:10:30.940
I think, yeah, for Instagram, they can, they can, it's, they got enough engineering chops, but it would have been much nicer for Django if we could have kept them on board, I think.

00:10:31.060 --> 00:10:35.880
Well, maybe like a quick positive shout out for the whole meta as a larger organization.

00:10:35.880 --> 00:10:38.600
They seem to be doing a lot for Python these days, you know.

00:10:38.600 --> 00:10:39.340
For Python, yes.

00:10:39.340 --> 00:10:45.960
They're really working a lot on, you know, Sam Gross's initiative on NoGill and the Faster Python and Cinder.

00:10:45.960 --> 00:10:51.380
And, you know, all that probably does come out of some of the foundational stuff for Instagram and running Django there.

00:10:51.380 --> 00:10:57.300
Yeah, and I think Carlton is still involved in very much in pushing Python forwards and, you know, what they're trying to do.

00:10:57.300 --> 00:10:59.020
So, you know, all QDots do them.

00:10:59.020 --> 00:11:02.940
It's, it's very easy to dog on the big corporation so they don't pay enough of that.

00:11:02.940 --> 00:11:07.100
But it's important to recognize when they do contribute that, yes, actually, that's a good thing.

00:11:07.100 --> 00:11:09.840
Yeah, there's plenty that need dogging on, like a lot.

00:11:09.840 --> 00:11:10.420
Most.

00:11:10.420 --> 00:11:13.760
We still have support for Oracle in Django, for example.

00:11:13.760 --> 00:11:14.380
Interesting.

00:11:14.380 --> 00:11:17.240
But Carlton, deployment, there's something else you're working on.

00:11:17.240 --> 00:11:17.920
Well, yes.

00:11:18.240 --> 00:11:26.360
I mean, so I've been, so one thing I wanted to quit or step down as fellow and get to work on is my button tool, which is my simple deployment tool.

00:11:26.360 --> 00:11:28.320
So it's, it's quite vanilla.

00:11:28.320 --> 00:11:29.380
It's old school.

00:11:29.380 --> 00:11:31.120
It uses virtual private server.

00:11:31.120 --> 00:11:32.280
It uses Ansible.

00:11:32.280 --> 00:11:33.600
It's all on AWS.

00:11:33.600 --> 00:11:36.540
And then I'm building UI and tooling on front of that.

00:11:36.540 --> 00:11:41.000
Slightly delayed because I've had personal issues that have taken me up.

00:11:41.000 --> 00:11:43.920
You know, my plan was sit down in April, get on with it.

00:11:43.920 --> 00:11:45.220
My son's been ill for a while.

00:11:45.220 --> 00:11:47.300
So that's, that's just on the back burner.

00:11:48.000 --> 00:11:50.740
The priority with all of these things is look after yourself.

00:11:50.740 --> 00:11:55.660
And in the situation we've been, I haven't had time to work on it particularly, but that will be the autumn now.

00:11:55.660 --> 00:11:58.800
And that's, that's kind of, yeah, I've been talking about it for a while.

00:11:58.800 --> 00:12:01.320
Time to actually ship it and have some capacity to ship it.

00:12:01.320 --> 00:12:06.100
But can we, can we do, can we give it a, maybe it's different angle of pitch, which is that, so it's built on.

00:12:06.100 --> 00:12:07.520
So deployment is trick.

00:12:07.520 --> 00:12:10.540
We can talk about this, you know, going from local to production is hard.

00:12:10.540 --> 00:12:12.620
And when, who do you use these days, right?

00:12:12.620 --> 00:12:16.340
Like there's AWS, there's Azure, there's kind of Google.

00:12:16.340 --> 00:12:17.960
There still is Heroku.

00:12:17.960 --> 00:12:20.420
There's new entrants like Fly and some other ones.

00:12:20.420 --> 00:12:21.760
But what do you really need?

00:12:21.800 --> 00:12:28.960
Like if you're with Django, you want someone who knows Django, who just like puts a layer on top of someone that's not going away like AWS.

00:12:29.320 --> 00:12:36.800
And essentially, as I understand it, Button is a Django fellow saying, here's, you have a Django app, you want to put it online.

00:12:36.800 --> 00:12:40.420
Let me solve all the hard things, do all the hard work for you.

00:12:40.420 --> 00:12:43.420
And it's a beautiful UI on something that's not going to change.

00:12:43.420 --> 00:12:44.260
Yeah, here we go.

00:12:44.260 --> 00:12:45.040
To have it.

00:12:45.040 --> 00:12:46.360
Because all the, it's interesting.

00:12:46.360 --> 00:12:47.800
I updated my books.

00:12:47.800 --> 00:12:52.840
I updated away from Heroku to Fly for the new update because Heroku eliminated their free tier.

00:12:53.360 --> 00:12:59.960
And I personally have really liked what Fly.io is doing, but it's hard to scale these companies.

00:12:59.960 --> 00:13:03.040
Like it's not, it's non-trivial to build what they have.

00:13:03.040 --> 00:13:08.740
And yet if you're AWS, right, all you're going to do is add, add, add, add features when big enterprise clients want things.

00:13:08.740 --> 00:13:12.700
And so at some point it becomes unusable for a solo person or a small startup.

00:13:12.700 --> 00:13:14.620
So I'm a fan of what Carlton's doing.

00:13:14.620 --> 00:13:16.040
Yeah, you want something scary.

00:13:16.040 --> 00:13:18.520
Just go to the AWS console dashboard.

00:13:18.520 --> 00:13:20.060
Yeah, exactly.

00:13:20.060 --> 00:13:21.780
You're like, well, where do I start?

00:13:21.780 --> 00:13:22.600
What should I use?

00:13:22.600 --> 00:13:23.840
There should be enough of a thing.

00:13:23.840 --> 00:13:28.880
I have a Python web app or I have a JavaScript, whatever JavaScript people do, like a, you know, a Rails app.

00:13:28.880 --> 00:13:30.960
Like I just want to get it up and have it not break.

00:13:30.960 --> 00:13:39.560
But this came, so this, the idea for Button came out of exactly those, those kind of thoughts was every week on Django chat, we'd have someone come on and deployment would always come up.

00:13:39.560 --> 00:13:42.440
And it would be like some elaborate story about what they're doing.

00:13:42.440 --> 00:13:49.660
And it's like, well, actually, if you keep it simple and keep it neat, first of all, here's how I deploy and here's how I get my clients to deploy.

00:13:49.660 --> 00:13:52.420
And this is how I deploy many projects over many years.

00:13:52.420 --> 00:13:53.540
And it's continually evolving.

00:13:53.540 --> 00:13:59.900
And then on the other hand, when you go to the AWS console, though, it's like this, ah, too much.

00:13:59.900 --> 00:14:07.540
You don't need 58 services and every configuration option under the button, under the sun.

00:14:07.660 --> 00:14:12.440
But it's nice to be able to break out of that, you know, if you do need to scale or you do need to do it.

00:14:12.440 --> 00:14:14.640
So anyway, this is my, you know, project.

00:14:14.640 --> 00:14:19.020
If it wasn't for life circumstances, I'd be slightly further along, but it's going to be the fall now.

00:14:19.020 --> 00:14:21.180
It's going to be, you know, the shit's coming on nicely.

00:14:21.180 --> 00:14:27.760
And the idea is a simple, a simple approach and with a nice UI on top of it that you can use.

00:14:27.760 --> 00:14:30.800
Well, you definitely have our wishes for your son to get well soon.

00:14:30.800 --> 00:14:32.280
So that's rough.

00:14:32.280 --> 00:14:34.380
Yeah, that's rough when your kid is sick.

00:14:34.380 --> 00:14:36.820
It's been a, yeah, it's been a full on year.

00:14:36.900 --> 00:14:39.340
It's been ill over a year now and it's just ongoing.

00:14:39.340 --> 00:14:42.200
And so, you know, that was another part of why I stepped down as fellow.

00:14:42.200 --> 00:14:44.760
I needed to take a bit of time just for the family.

00:14:44.760 --> 00:14:45.160
Absolutely.

00:14:45.160 --> 00:14:49.100
I think back to the button for a second, btn.dev, by the way.

00:14:49.100 --> 00:14:52.280
You can sign up for the mailing list or the alpha is available too.

00:14:52.280 --> 00:14:52.740
Nice.

00:14:52.740 --> 00:14:56.480
I'm constantly trying to push Carlton's stuff because he always downplays everything he's doing.

00:14:56.480 --> 00:14:57.480
I'm like, come on, man.

00:14:57.480 --> 00:14:59.620
Yeah, but I've got that natural developer shyness.

00:14:59.620 --> 00:15:00.700
I have to wait.

00:15:00.700 --> 00:15:02.200
I have to polish it and wait till it's perfect.

00:15:02.200 --> 00:15:02.440
And he's British.

00:15:02.440 --> 00:15:04.400
Yeah, and I'm British.

00:15:04.400 --> 00:15:05.840
So I'm nice and reserved.

00:15:06.140 --> 00:15:08.520
And anyway, Mike, were you going to make a question?

00:15:08.520 --> 00:15:09.620
It's exciting.

00:15:09.620 --> 00:15:11.060
And we were just talking about it.

00:15:11.060 --> 00:15:13.300
We were just hyping people up about it.

00:15:13.300 --> 00:15:18.620
How it's cool to have these huge deployments running tons of traffic, doing all sorts of

00:15:18.620 --> 00:15:21.420
amazing things with like, yeah, we scaled our servers.

00:15:21.420 --> 00:15:23.900
So we went from 500 to 300 with this trick.

00:15:24.360 --> 00:15:28.720
Yes, that's a cool thing that pushes the envelope that makes a lot of stuff possible with frameworks

00:15:28.720 --> 00:15:31.280
like Django and language like Python.

00:15:31.280 --> 00:15:35.180
But on the other hand, most of us are not Instagram.

00:15:35.180 --> 00:15:36.240
You're not Microsoft.

00:15:36.240 --> 00:15:37.100
You're not Google.

00:15:37.100 --> 00:15:38.060
You're not all these.

00:15:38.060 --> 00:15:41.480
And having or let's say you're not Netflix.

00:15:41.700 --> 00:15:46.140
I actually think that like what AWS console looks like has a lot to do with how Netflix

00:15:46.140 --> 00:15:49.140
works, probably given how early adopters they were.

00:15:49.140 --> 00:15:51.860
But I just think it's worth emphasizing.

00:15:51.860 --> 00:15:52.840
Push button.

00:15:52.840 --> 00:15:54.280
Get it running on a simple server.

00:15:54.280 --> 00:15:55.320
Make it secure.

00:15:55.320 --> 00:15:56.200
Keep it up.

00:15:56.200 --> 00:15:58.240
You know, zero downtime deploy type stuff.

00:15:58.240 --> 00:16:00.160
CICD, a push show brand.

00:16:00.280 --> 00:16:01.320
All those types of things.

00:16:01.320 --> 00:16:06.140
That's more than enough for most people, not just on your hobby projects, but on company

00:16:06.140 --> 00:16:06.780
business.

00:16:06.780 --> 00:16:09.240
Does your website get a thousand visitors a day?

00:16:09.240 --> 00:16:14.780
It doesn't need five servers with failover and Kubernetes clusters and sharded databases.

00:16:14.780 --> 00:16:15.860
And like it just doesn't.

00:16:15.860 --> 00:16:16.120
Right.

00:16:16.120 --> 00:16:19.560
And so having that option, something like button, it's pretty cool, I think.

00:16:19.560 --> 00:16:20.600
Yeah, that's exactly it.

00:16:20.600 --> 00:16:22.940
Like as you speak there, you're just singing to the choir for me.

00:16:22.940 --> 00:16:28.020
It's like, you know, you can get a small box, get a slightly bigger box if you need to.

00:16:28.020 --> 00:16:29.420
Get a slightly bigger box than that.

00:16:29.480 --> 00:16:32.440
You can go get quite, you can get an awful lot of box for not very much money.

00:16:32.440 --> 00:16:34.920
And then maybe two boxes.

00:16:34.920 --> 00:16:35.960
Yeah, yeah, yeah, exactly.

00:16:35.960 --> 00:16:41.020
But this, the kind of architecture I go for, you can scale to a very big site.

00:16:41.020 --> 00:16:45.180
And I know in recent years, Stack Overflow moved to a, you know, much more modern and

00:16:45.180 --> 00:16:45.700
fancy thing.

00:16:45.700 --> 00:16:49.360
But for a long, long, long, long time, they were running on the same kind of big database,

00:16:49.360 --> 00:16:53.020
couple of front end web servers, a load balancer, and nothing more than that.

00:16:53.020 --> 00:16:56.080
And you're not going to serve more traffic than Stack Overflow ever.

00:16:56.080 --> 00:16:59.440
Like nobody, not nobody, but basically nobody's going to serve.

00:16:59.440 --> 00:17:00.240
More traffic than that.

00:17:00.240 --> 00:17:01.680
So that's where I'm coming from.

00:17:01.680 --> 00:17:03.100
And it's not for everybody.

00:17:03.100 --> 00:17:06.320
And there's lots of people who've got opinions, but it's for people who haven't got an opinion.

00:17:06.320 --> 00:17:10.660
It's like, if you don't know, if you don't know how to deploy and you don't really have,

00:17:10.660 --> 00:17:14.520
if you're not already in the game, then well, this is how I do it.

00:17:14.520 --> 00:17:15.940
And you can choose to do it the same way.

00:17:15.940 --> 00:17:16.420
Sure.

00:17:16.560 --> 00:17:17.700
I'm really excited about it.

00:17:17.700 --> 00:17:21.680
And I have been talking about it for a long time and not having the capacity to work on it.

00:17:21.680 --> 00:17:24.860
And now I, bar family situation, I have that capacity.

00:17:24.860 --> 00:17:26.440
And so I'm looking forward to getting it out.

00:17:28.280 --> 00:17:31.260
This portion of Talk Python to Me is brought to you by Sentry.

00:17:31.260 --> 00:17:35.480
You know that Sentry captures the errors that would otherwise go unnoticed.

00:17:35.480 --> 00:17:39.860
Of course, they have incredible support for basically any Python framework.

00:17:39.860 --> 00:17:47.120
They have direct integrations with Flask, Django, FastAPI, and even things like AWS Lambda and Celery.

00:17:47.120 --> 00:17:51.280
But did you know they also have native integrations with mobile app frameworks?

00:17:51.520 --> 00:17:59.000
Whether you're building an Android or iOS app or both, you can gain complete visibility into your application's correctness,

00:17:59.000 --> 00:18:01.620
both on the mobile side and server side.

00:18:01.620 --> 00:18:06.500
We just completely rewrote Talk Python's mobile apps for taking our courses.

00:18:06.500 --> 00:18:11.180
And we massively benefited from having Sentry integration right from the start.

00:18:11.180 --> 00:18:13.980
We used Flutter for our native mobile framework.

00:18:13.980 --> 00:18:19.860
And with Sentry, it was literally just two lines of code to start capturing errors as soon as they happen.

00:18:20.120 --> 00:18:23.840
Of course, we don't love errors, but we do love making our users happy.

00:18:23.840 --> 00:18:28.640
Solving problems as soon as possible with Sentry on the mobile Flutter code

00:18:28.640 --> 00:18:33.760
and the Python server side code together made understanding error reports a breeze.

00:18:33.760 --> 00:18:38.940
So whether you're building Python server side apps or mobile apps or both,

00:18:38.940 --> 00:18:43.220
give Sentry a try to get a complete view of your app's correctness.

00:18:43.220 --> 00:18:48.880
Thank you to Sentry for sponsoring the show and helping us ship more reliable mobile apps to all of you.

00:18:48.880 --> 00:18:55.200
Well, I think it's more broadly, one of the things we're going to talk about is HTMX.

00:18:55.200 --> 00:18:58.060
And I think there is these more iterative tools.

00:18:58.060 --> 00:19:01.600
You don't need to jump to React if you just want a little thing.

00:19:01.600 --> 00:19:03.160
You don't need to go Kubernetes.

00:19:03.160 --> 00:19:04.800
I heard back in that was done.

00:19:04.800 --> 00:19:06.340
It was just all APIs now.

00:19:06.340 --> 00:19:06.700
Come on.

00:19:06.780 --> 00:19:07.520
It's all front-end.

00:19:07.520 --> 00:19:12.840
I put a toot up the other day that they convinced me otherwise meme.

00:19:12.840 --> 00:19:14.640
Django is a front-end framework.

00:19:14.640 --> 00:19:16.260
I'm busy writing an application.

00:19:16.260 --> 00:19:17.420
I'm using HTMX.

00:19:17.420 --> 00:19:18.260
I'm using Alpine.

00:19:18.260 --> 00:19:19.040
I'm using Tailwind.

00:19:19.380 --> 00:19:20.860
I'm doing it all in Django.

00:19:20.860 --> 00:19:23.160
I'm doing it all in Django templates.

00:19:23.160 --> 00:19:28.100
And it's like, you know, I'm hardly doing any of the exciting back-end stuff that we love Django for.

00:19:28.100 --> 00:19:29.840
It's all front-end.

00:19:29.840 --> 00:19:31.740
And it's just vanilla Django.

00:19:31.740 --> 00:19:32.320
It is.

00:19:32.320 --> 00:19:35.760
That's the thing that people who are learning, they're a full-stack developer and they're like,

00:19:35.760 --> 00:19:37.280
APIs, I got to do it all.

00:19:37.280 --> 00:19:39.200
And I mean, you must have this, Michael, with people.

00:19:39.200 --> 00:19:40.280
You're students.

00:19:40.280 --> 00:19:41.400
But I have this a lot of times.

00:19:41.400 --> 00:19:44.500
People who are new say, oh, I want this and that functionality.

00:19:44.500 --> 00:19:47.720
And I'm often like, don't go to APIs unless you need to.

00:19:47.720 --> 00:19:52.400
Because if you're a professional Django developer on a team of more than 10 people, yeah, you're

00:19:52.400 --> 00:19:56.180
going to write APIs because there will be front-end people who just do front-end.

00:19:56.180 --> 00:19:57.120
But when it's just you.

00:19:57.120 --> 00:20:00.080
And even if there's not front-end, there might be a mobile app.

00:20:00.080 --> 00:20:01.900
That's our primary case of APIs.

00:20:01.900 --> 00:20:06.560
Or you might have a public API for users or other companies to work with.

00:20:06.560 --> 00:20:08.880
It doesn't have to be that you're not doing server-side.

00:20:08.880 --> 00:20:14.140
But for a solo person or a small thing, don't just leap to it because it adds so much.

00:20:14.140 --> 00:20:14.860
complexity.

00:20:14.860 --> 00:20:18.700
Do you use Tornado or use an older Python thing?

00:20:18.700 --> 00:20:19.460
Pyramid, okay.

00:20:19.460 --> 00:20:23.700
I've considered switching to something like FastAPI or something like that.

00:20:23.700 --> 00:20:27.860
But then I look and I'm like, you know, it's like a real thin layer over just what would

00:20:27.860 --> 00:20:28.580
be the same anyway.

00:20:28.580 --> 00:20:31.200
And scalability is totally good.

00:20:31.200 --> 00:20:32.340
I mean, it works.

00:20:32.340 --> 00:20:33.120
It works, too.

00:20:33.120 --> 00:20:34.900
It'll run for months without me touching it.

00:20:34.900 --> 00:20:40.000
The chances the website go down and it's not my fault because I deployed something is almost

00:20:40.000 --> 00:20:40.380
zero.

00:20:40.380 --> 00:20:42.660
Like really, really, really close to zero.

00:20:42.760 --> 00:20:44.640
Either that or something's gone wrong in the data center.

00:20:44.640 --> 00:20:46.100
But like the website itself.

00:20:46.100 --> 00:20:50.340
And so, yeah, I chose that eight years ago and I'm still cruising with it.

00:20:50.340 --> 00:20:50.600
It's great.

00:20:50.600 --> 00:20:53.020
I had a client ask me about HA.

00:20:53.020 --> 00:20:53.900
HA, sorry.

00:20:53.900 --> 00:20:54.560
High availability.

00:20:54.560 --> 00:20:58.460
One time they were like, oh, don't we need multiple servers and multiple this or another?

00:20:58.460 --> 00:21:00.260
I'm like, well, how many nines do we need?

00:21:00.260 --> 00:21:00.880
I don't know.

00:21:00.880 --> 00:21:02.880
I can't remember the exact number now off the top of my head.

00:21:02.880 --> 00:21:07.580
But you're already at three nines, even just deploying on the kind of worst setup in the

00:21:07.580 --> 00:21:07.840
world.

00:21:07.840 --> 00:21:12.220
Because the number of the amount of downtime you'll have will be sub few minutes because

00:21:12.220 --> 00:21:13.500
and it will be exactly that.

00:21:13.500 --> 00:21:15.840
You deployed something wrong and then you revert it.

00:21:15.840 --> 00:21:16.420
Yeah, exactly.

00:21:16.420 --> 00:21:17.240
Like, oh, my gosh, quick.

00:21:17.240 --> 00:21:24.180
But we have I think people necessarily don't fully appreciate how much really high end technology

00:21:24.180 --> 00:21:27.860
for so little money we have accessible to us with these cloud providers.

00:21:27.860 --> 00:21:32.280
We have the best data centers in the world for ten dollars.

00:21:32.280 --> 00:21:32.820
Right.

00:21:32.820 --> 00:21:33.500
You know what I mean?

00:21:33.500 --> 00:21:37.980
It's not like, well, these people like you have the same thing that Netflix is using.

00:21:37.980 --> 00:21:40.420
And for a while, they're doing a third of the traffic of the Internet.

00:21:40.420 --> 00:21:41.520
Yes.

00:21:41.520 --> 00:21:42.260
Yeah, exactly.

00:21:42.260 --> 00:21:47.140
So three nines gives you nine hours off a year and you won't even have nine hours off a year.

00:21:47.140 --> 00:21:49.100
Like, yeah, that's highly unlikely.

00:21:49.100 --> 00:21:49.480
Yeah.

00:21:49.480 --> 00:21:51.760
You know, something goes down and you don't fix it.

00:21:51.760 --> 00:21:54.980
But like it's literally if you deploy, you fix it quickly.

00:21:55.360 --> 00:22:00.480
But you get that kind of uptime without having to have multiple availability zones and

00:22:00.480 --> 00:22:03.400
all the failover and all the things that, you know, they like to sell.

00:22:03.400 --> 00:22:04.040
Yeah.

00:22:04.040 --> 00:22:08.880
And yet getting to that point for people who are new, just the act of local versus production

00:22:08.880 --> 00:22:11.440
database stops people like every single person.

00:22:11.440 --> 00:22:11.620
Right.

00:22:11.620 --> 00:22:15.220
They build the site like it's a blog and then they deploy it and they're like, where's my

00:22:15.220 --> 00:22:15.620
blog?

00:22:15.620 --> 00:22:18.380
And it's like, oh, that database is different than this database.

00:22:18.380 --> 00:22:20.800
Like, you know, after a while, I get used to the idea.

00:22:20.800 --> 00:22:22.320
But it's like the code is there.

00:22:22.320 --> 00:22:23.400
Why isn't the data there?

00:22:23.640 --> 00:22:23.840
Right.

00:22:23.840 --> 00:22:27.800
And then so it's just this scale of up to how many nines do you need.

00:22:27.800 --> 00:22:31.820
But most people are focused on just put something up online and add continuous integration.

00:22:31.820 --> 00:22:33.660
Like, I mean, really, what are the basics?

00:22:33.660 --> 00:22:36.260
But they're not basic when you're doing it the first couple of times.

00:22:36.260 --> 00:22:37.420
No, they're not basic.

00:22:37.420 --> 00:22:38.560
They're not basic at all.

00:22:38.560 --> 00:22:40.420
So having something that kind of automates that.

00:22:40.420 --> 00:22:44.920
I think another thing is, you know, you have different team members or if you are an individual

00:22:44.920 --> 00:22:47.640
developer, maybe getting something up on the web.

00:22:47.740 --> 00:22:53.460
I know people I've spoken to about how daunting it is going from zero web apps published to

00:22:53.460 --> 00:22:55.240
one is a major challenge.

00:22:55.240 --> 00:22:55.600
Right.

00:22:55.600 --> 00:22:56.580
Like, I don't know Linux.

00:22:56.580 --> 00:22:58.280
I don't know the terminal.

00:22:58.280 --> 00:22:59.880
I don't do SSH.

00:22:59.880 --> 00:23:01.700
I don't understand the security.

00:23:01.700 --> 00:23:03.440
I don't understand the best practices.

00:23:03.440 --> 00:23:05.640
Like, I just can't, you know.

00:23:05.900 --> 00:23:10.260
Well, and that's something I emphasize in my books is getting something as fast as possible.

00:23:10.260 --> 00:23:13.300
It was a little bit smoother with Heroku than Fly, but Fly is still pretty.

00:23:13.300 --> 00:23:15.980
Like, I take some shortcuts, but I say they're shortcuts.

00:23:15.980 --> 00:23:17.580
You know, this isn't the most secure thing ever.

00:23:17.580 --> 00:23:22.560
But just getting something up that first time because it doesn't have to be crazy complicated.

00:23:22.560 --> 00:23:26.580
And I think the sooner you're dealing with a real live website, the better for many reasons.

00:23:26.580 --> 00:23:28.020
But yeah, that first one.

00:23:28.020 --> 00:23:30.180
You know, you've spent all this time building your application.

00:23:30.180 --> 00:23:32.140
You're finally ready to put it online.

00:23:32.240 --> 00:23:37.540
And then it's like, oh, learn about servers and learn about firewalls and learn about

00:23:37.540 --> 00:23:42.540
rewrite rules and learn about permissions and groups and users and

00:23:42.540 --> 00:23:43.900
Caching.

00:23:43.900 --> 00:23:44.520
Yeah.

00:23:44.520 --> 00:23:47.480
Well, I just say Django has a deployment checklist to help with this.

00:23:47.480 --> 00:23:51.480
But I still think, and others may agree with me in the community, that the local to production

00:23:51.480 --> 00:23:54.960
gap is a big one that Django could do things to address.

00:23:54.960 --> 00:23:58.120
For example, like everything defaults to local setup.

00:23:58.120 --> 00:24:00.060
The deployment checklist, yes, a great resource.

00:24:00.060 --> 00:24:03.980
I spend a lot of time in my books covering this, if you want, you know, handholding.

00:24:03.980 --> 00:24:07.280
Oh, and it's not just a checklist on the, like on the web that you look at.

00:24:07.280 --> 00:24:10.460
You can run manage.py, you know, space check dash dash.

00:24:10.460 --> 00:24:11.340
Yeah, it's a management command.

00:24:11.340 --> 00:24:16.140
And there's a whole, I guess would be the, I think, 12 or something now, sort of the, like,

00:24:16.140 --> 00:24:17.640
really don't launch it without this.

00:24:17.640 --> 00:24:18.700
These aren't even optimizations.

00:24:18.700 --> 00:24:21.040
This is like, just don't leak secrets everywhere.

00:24:21.040 --> 00:24:21.320
Yeah.

00:24:21.320 --> 00:24:24.020
But still for Django, I think for a lot of places, there's a tension, right?

00:24:24.020 --> 00:24:27.360
Between how friendly you are to beginners versus advanced users.

00:24:27.360 --> 00:24:31.380
And I think Django overall has done a very good job of still being friendly to beginners,

00:24:31.380 --> 00:24:37.180
but every, most technologies over time, you know, move towards where the hardcore users

00:24:37.180 --> 00:24:39.520
are because that's who's kind of doing this stuff.

00:24:39.520 --> 00:24:42.520
So that's a tension Django feels, Python, others.

00:24:42.520 --> 00:24:46.860
You know, how do you still keep it beginner friendly, but the people who are in charge want

00:24:46.860 --> 00:24:47.840
different things often?

00:24:48.080 --> 00:24:51.160
That's a real tension in programming and frameworks and all sorts of things.

00:24:51.160 --> 00:24:54.560
And I also think that that's why Python is so popular, honestly, right?

00:24:54.560 --> 00:24:56.340
You can do C++, you can do Rust.

00:24:56.340 --> 00:24:58.340
Like, these are really great for advanced people.

00:24:58.340 --> 00:25:04.120
You can do, you know, BB6 or super simple old school things that are great, easy for beginners.

00:25:04.120 --> 00:25:09.200
But like, Python is easy for beginners, but you can kind of bring in some more advanced stuff.

00:25:09.200 --> 00:25:10.080
You can bring in async.

00:25:10.080 --> 00:25:11.680
You can bring in generators.

00:25:12.120 --> 00:25:16.160
You can bring in ORMs, but you don't have to, where a lot of languages are like, guess

00:25:16.160 --> 00:25:16.360
what?

00:25:16.360 --> 00:25:19.800
We're going to start with a void voice, void star star.

00:25:19.800 --> 00:25:21.260
We're going to go from there, you know?

00:25:21.260 --> 00:25:23.340
Well, the old saying was second best for everything.

00:25:23.340 --> 00:25:27.680
And I think that's not, you know, I think it's first best a number of places now too.

00:25:27.680 --> 00:25:28.180
I agree.

00:25:28.180 --> 00:25:33.000
I think people say that, but I think honestly, it's really, if it's not the first best,

00:25:33.000 --> 00:25:35.600
it is on par with the other first best, right?

00:25:35.600 --> 00:25:40.560
It is a front running contender for a thing where I would say it probably is, you know,

00:25:40.560 --> 00:25:43.280
the undisputed king is in data science and machine learning.

00:25:43.280 --> 00:25:44.400
Yeah, it's all the libraries.

00:25:44.400 --> 00:25:49.400
There's not a competitor out there that is near the level of depth in the ecosystem.

00:25:49.400 --> 00:25:54.400
Well, because there's R and R doesn't have open source in the community that Python does.

00:25:54.400 --> 00:25:54.700
Yeah.

00:25:54.700 --> 00:25:58.700
That seems to be, I mean, most like here in Boston, a lot of friends are scientists and

00:25:58.700 --> 00:26:02.820
it's either R or Python and they all kind of want to use Python, but sometimes they use

00:26:02.820 --> 00:26:05.620
R, but Python just can do more things.

00:26:05.620 --> 00:26:06.760
So depending on what you need.

00:26:06.760 --> 00:26:10.580
The next episode I'm going to release, which I've already recorded, but haven't released.

00:26:10.580 --> 00:26:15.140
So you all don't know about it necessarily is shining for Python, which is pretty interesting.

00:26:15.140 --> 00:26:20.600
Like that's the R web story coming to Python, which I think is just more cool stuff you can

00:26:20.600 --> 00:26:21.360
do in Python, honestly.

00:26:21.360 --> 00:26:23.500
Actually, I need to check the Python version of that.

00:26:23.580 --> 00:26:26.820
Cause one of the, we just had DjangoCon Europe earlier this year.

00:26:26.820 --> 00:26:30.540
And one of the people who came up to me is someone who worked for the, what do you say?

00:26:30.540 --> 00:26:33.340
The UK government on their putting systems together.

00:26:33.340 --> 00:26:36.260
And he had bought my books to get his team to move away.

00:26:36.260 --> 00:26:38.160
Maybe started with double O or something or other.

00:26:38.160 --> 00:26:38.580
I don't know.

00:26:38.580 --> 00:26:40.300
No, not that cool.

00:26:40.300 --> 00:26:44.160
You just COVID information, you know, health stuff, NH, NHIS.

00:26:44.160 --> 00:26:45.280
Is that, is that, yeah.

00:26:45.280 --> 00:26:46.460
Nathan Holt, NHS.

00:26:46.460 --> 00:26:47.040
NHS.

00:26:47.520 --> 00:26:51.360
They were able, so he had said though, that they were able to use R and use the, what

00:26:51.360 --> 00:26:51.640
is it called?

00:26:51.640 --> 00:26:56.720
The webby to put things online, but for interactivity, they, that's where they hit problems.

00:26:56.720 --> 00:27:02.740
So he and his team of 12 had moved a lot of stuff over to Django for the, just more interactivity

00:27:02.740 --> 00:27:03.540
of it all.

00:27:03.540 --> 00:27:07.840
But this is, you know, something the British government was doing to, so I'm, yeah, it's an

00:27:07.840 --> 00:27:11.740
area I want to learn more about, you know, shiny and how all that works, because it's always

00:27:11.740 --> 00:27:14.120
been like, why can't you just take a Jupyter notebook and put it online?

00:27:14.120 --> 00:27:16.960
I mean, you write, like often put it online.

00:27:17.400 --> 00:27:21.400
So I'm trying to understand that too, because the data science space is so big in the web

00:27:21.400 --> 00:27:24.920
space feels small in comparison, but yeah, I look forward to that episode.

00:27:24.920 --> 00:27:29.960
My quick takeaway talking to Joe there was, they really thought about how to make it the

00:27:29.960 --> 00:27:30.960
Pythonic way.

00:27:30.960 --> 00:27:34.460
And it seems like they really embraced it and not just, well, we'll get it to run on Python,

00:27:34.460 --> 00:27:37.300
but it seems like it's going to be a good option for people out there.

00:27:37.300 --> 00:27:38.120
So that's really cool.

00:27:38.120 --> 00:27:42.740
I want to make sure that we talk about some of the history of Django and the future of Django,

00:27:42.740 --> 00:27:47.280
but I know something that all three of us are super excited about is HTML.

00:27:47.280 --> 00:27:51.180
So let's, and we were talking about the front end stuff and the back end.

00:27:51.180 --> 00:27:54.500
And so I don't typically share jokes on Talk Python that much.

00:27:54.500 --> 00:27:58.940
It's more Python bites the show at the end there, but there's this great meme and it has

00:27:58.940 --> 00:28:02.740
the backend dev and it has HTML two people on the HTML.

00:28:02.740 --> 00:28:05.720
When speaking to the backend dev says, look at me, look at me.

00:28:05.720 --> 00:28:07.120
HTML is talking to you.

00:28:07.120 --> 00:28:08.000
This is full stack.

00:28:08.000 --> 00:28:09.000
Now you're full stack.

00:28:09.000 --> 00:28:09.880
Now, come on.

00:28:10.160 --> 00:28:11.840
You're not just a backend developer.

00:28:11.840 --> 00:28:13.560
You're full stack because you're doing HTMLX.

00:28:13.560 --> 00:28:15.580
And I think, you know, it's funny.

00:28:15.580 --> 00:28:21.200
Also the thing called X that is kind of Twitter and half X and partially branded that, that is

00:28:21.200 --> 00:28:22.200
a whole different joke.

00:28:22.200 --> 00:28:27.840
But I think just this, this joke up here, it really touches on, on something that I think

00:28:27.840 --> 00:28:34.920
makes Django makes blast, make all the Python web frameworks way more holistic and important

00:28:34.920 --> 00:28:36.920
back coming back to build these apps, right?

00:28:36.920 --> 00:28:40.400
It's not just like, well, we have to use reacts or we're going to push you to just write JSON

00:28:40.400 --> 00:28:42.420
and points and, and so on and so on.

00:28:42.420 --> 00:28:47.380
And like, no, you can actually flip that and just embrace Python more with HTMLX.

00:28:47.380 --> 00:28:49.800
Who wants to start riffing on HTMLX and Django?

00:28:49.800 --> 00:28:50.660
Carlton, you go ahead.

00:28:50.660 --> 00:28:51.460
This is more of your.

00:28:51.660 --> 00:28:52.640
No, it's exactly that.

00:28:52.640 --> 00:28:57.840
So, I mean, two years ago, three years ago, it was all like, oh, Python's existential threat

00:28:57.840 --> 00:29:02.020
because everything's going to be rewritten in JavaScript because, you know, everything

00:29:02.020 --> 00:29:03.280
on the front end is JavaScript.

00:29:03.280 --> 00:29:06.220
And so it doesn't make sense having these two languages.

00:29:06.220 --> 00:29:10.540
So it's all going to just flip over and Python's going to disappear in a puff of JavaScript.

00:29:10.540 --> 00:29:13.060
Well, now it's kind of like, well, really?

00:29:13.060 --> 00:29:14.700
Is that, is that what I see happening?

00:29:14.700 --> 00:29:15.220
Not, no.

00:29:15.220 --> 00:29:21.140
What I see is the super established mature web frameworks showing the real strength

00:29:21.140 --> 00:29:26.660
of the HTML tooling and the hypermedia tooling that they've, you know, it's, it's,

00:29:26.660 --> 00:29:28.040
it's just so fully developed.

00:29:28.040 --> 00:29:30.440
I mean, Django is 18 years old this summer, right?

00:29:30.440 --> 00:29:32.100
So there's a lot of history there.

00:29:32.100 --> 00:29:33.860
There's a lot of development time gone in.

00:29:33.860 --> 00:29:34.900
There's a lot of richness.

00:29:34.900 --> 00:29:38.340
And once you start using HTMLX, it really is.

00:29:38.340 --> 00:29:39.280
It's like, oh, do you know what?

00:29:39.280 --> 00:29:43.460
This just fits the patterns that Django wants you to use.

00:29:43.460 --> 00:29:47.780
You know, it, like it works with Django forms and you just, you know, oh, look, it's just

00:29:47.780 --> 00:29:48.320
a form view.

00:29:48.420 --> 00:29:52.540
And it's just, all I do is add this little header in and oh, look, I changed the template

00:29:52.540 --> 00:29:52.840
maybe.

00:29:52.840 --> 00:29:59.320
And oh, look, it's, it's a fully interactive, rich client that the users can't tell the difference

00:29:59.320 --> 00:30:02.460
between that and a full SBA built with Rack.

00:30:02.460 --> 00:30:06.080
Or perhaps they can because it loads quicker because it's not, it's actually faster.

00:30:06.080 --> 00:30:09.820
And one of the great reasons for switching to SBAs was they were meant to be quicker.

00:30:10.080 --> 00:30:13.820
But the reality is after all these years, they're loading so much JavaScript into the

00:30:13.820 --> 00:30:18.900
page and doing so much work in the browser in order to get the HTML to be interactive

00:30:18.900 --> 00:30:20.760
that in fact, they feel slower to the user.

00:30:20.760 --> 00:30:25.960
So for people who don't know, HTMLX lets you put attributes on HTML, not complicated stuff.

00:30:25.960 --> 00:30:30.580
Like if you had an image, you could say hx-get and give it a URL.

00:30:30.580 --> 00:30:33.280
And you could say hx-target is some other thing.

00:30:33.280 --> 00:30:38.660
So if you click on that image, it'll go, if this context talked Django, pull back a fragment

00:30:38.660 --> 00:30:43.460
of HTML and pop it with possible animations and transitions and stuff into another section

00:30:43.460 --> 00:30:47.720
for like a master detail, like list details, view story.

00:30:47.940 --> 00:30:54.480
And it's just as nice as most single page app, most friend and frameworks.

00:30:54.480 --> 00:31:00.240
It's, I suppose if the thing completely loaded all the different data and had zero server interaction,

00:31:00.240 --> 00:31:04.320
but then the startup time of that would be completely bad, like you said, Carlton.

00:31:04.320 --> 00:31:05.520
So it's fantastic.

00:31:05.520 --> 00:31:09.040
And let's go back to like the beginner and the people doing simple stuff.

00:31:09.040 --> 00:31:14.420
HTMLX is not just for beginners, but it really works well for them because they no longer have

00:31:14.420 --> 00:31:19.620
to learn a different framework or never different language and a framework like JavaScript and

00:31:19.620 --> 00:31:19.900
view.

00:31:19.900 --> 00:31:21.380
They don't have to write APIs.

00:31:21.380 --> 00:31:22.780
They just do the thing they're doing.

00:31:22.780 --> 00:31:25.440
And all of a sudden all this cool interactivity comes in.

00:31:25.440 --> 00:31:25.620
Right.

00:31:25.620 --> 00:31:25.920
Yeah.

00:31:25.920 --> 00:31:30.280
And like for a decade, it hasn't felt to me, you know, I'm 20 years in the business.

00:31:30.280 --> 00:31:36.380
I know how to do quite a lot, but for a decade or so, it hasn't felt to me feasible to be building

00:31:36.380 --> 00:31:40.360
web good, high quality, professional quality web applications, single-handed.

00:31:40.360 --> 00:31:42.600
But it feels like that again.

00:31:42.600 --> 00:31:43.880
It feels like, do you know what?

00:31:44.160 --> 00:31:45.600
I don't need a whole team here.

00:31:45.600 --> 00:31:49.880
And with interest rates going up and inflation going up, you know, money being tight now,

00:31:49.880 --> 00:31:56.420
I honestly think there is a real big commercial competitive advantage coming back to sort of

00:31:56.420 --> 00:31:57.160
the backend.

00:31:57.160 --> 00:32:02.340
And that's not just Django, but Django and Flask and, you know, Rails even, if you want a different

00:32:02.340 --> 00:32:02.660
language.

00:32:02.660 --> 00:32:09.340
But those kind of stacks where you can produce a really competent crud backend in very little

00:32:09.340 --> 00:32:14.980
time, and then you can produce the front end that's rich enough and feels good and feels

00:32:14.980 --> 00:32:17.120
developed for a fraction of the team size.

00:32:17.120 --> 00:32:19.940
One, two developers instead of five, 10 developers.

00:32:21.600 --> 00:32:26.640
This portion of Talk Python To Me is brought to you by us over at Talk Python Training.

00:32:26.640 --> 00:32:30.300
Let me tell you about one of our really popular courses.

00:32:30.300 --> 00:32:34.680
HTMX plus Flask, modern Python web apps hold the JavaScript.

00:32:34.680 --> 00:32:38.900
HTMX is one of the hottest properties in web development today.

00:32:39.000 --> 00:32:39.880
And for good reason.

00:32:39.880 --> 00:32:44.980
You might even remember all the stuff we talked about with Carson Gross back on episode 321.

00:32:44.980 --> 00:32:50.060
HTMX, along with the libraries and techniques we introduced in our new course, will have you

00:32:50.060 --> 00:32:52.460
writing the best Python web apps you've ever written.

00:32:52.460 --> 00:32:56.040
Clean, fast, and interactive, all without that front end overhead.

00:32:56.040 --> 00:33:00.780
If you're a Python web developer that has wanted to build more dynamic, interactive apps, but

00:33:00.780 --> 00:33:05.580
don't want to or can't write a significant portion of your app in rich front end JavaScript

00:33:05.580 --> 00:33:08.620
frameworks, you'll absolutely love HTMX.

00:33:08.620 --> 00:33:14.620
Check it out over at talkpython.fm/HTMX or just click the link in your podcast player show notes.

00:33:14.620 --> 00:33:22.020
I think it also speaks to the wisdom, I would say, of, so Django has a templating language,

00:33:22.020 --> 00:33:23.720
but it's deliberately basic.

00:33:23.720 --> 00:33:29.980
You can use Jinja and Django by design because 18 years ago, the idea was, well, we're not a

00:33:29.980 --> 00:33:30.580
front end framework.

00:33:30.580 --> 00:33:31.660
Who knows what's going to happen?

00:33:31.820 --> 00:33:36.860
And that provides the opportunity for HTMX comes along, just slide it right in.

00:33:36.860 --> 00:33:41.060
Like Django is not, doesn't have all this stuff built on top of it trying to do that too.

00:33:41.060 --> 00:33:45.600
So that can be a frustration for beginners that why doesn't, why don't the templates do more?

00:33:45.600 --> 00:33:49.720
They actually do a lot, but it opens it up to HTMX.

00:33:49.720 --> 00:33:52.180
And then there's, you know, Django has third party package systems.

00:33:52.180 --> 00:33:56.060
So there's one that Adam Johnson, who's a member of the community has Django HTMX that has

00:33:56.060 --> 00:33:56.520
extensions.

00:33:56.520 --> 00:34:01.180
Like basically everything you want to do, you can kind of copy and paste it in.

00:34:01.180 --> 00:34:05.300
I mean, understand what you're doing, but so this is, yeah, Django HTMX is a great resource,

00:34:05.300 --> 00:34:07.320
but it's not, it's not rocket science.

00:34:07.320 --> 00:34:10.040
It's not, you know, you're not reinventing the wheel, right?

00:34:10.040 --> 00:34:11.240
You have a list view, detail view.

00:34:11.240 --> 00:34:12.940
You want to do auto scroll.

00:34:12.940 --> 00:34:14.700
You want to do some validation on a form.

00:34:14.700 --> 00:34:16.940
It's the same solved problems out there.

00:34:16.940 --> 00:34:17.820
You just have to know where to go.

00:34:17.820 --> 00:34:18.700
You can go quite far with it.

00:34:18.700 --> 00:34:18.860
Yeah.

00:34:18.980 --> 00:34:22.860
That would be an interesting question of where do you really need to not use it?

00:34:22.860 --> 00:34:29.700
I mean, certainly even in a team setting, like it's just such less complexity and it's arguably

00:34:29.700 --> 00:34:31.260
faster and it gets you what you need.

00:34:31.260 --> 00:34:32.240
Where do you not use it?

00:34:32.240 --> 00:34:37.180
So I'm building a quite rich drag and drop interface for a tool.

00:34:37.180 --> 00:34:38.240
It's pretty complex.

00:34:38.240 --> 00:34:39.500
It's pretty interactive.

00:34:39.500 --> 00:34:41.760
And I'm using Alpine to do that on the page.

00:34:41.760 --> 00:34:47.160
And then, but when it comes back to the server request, then dropping back to HTMX to send

00:34:47.160 --> 00:34:48.580
the things and get a chunk back.

00:34:48.580 --> 00:34:53.960
And I can quite often replace either a part or all of the Alpine component with the stuff

00:34:53.960 --> 00:34:55.720
from the HTMX.

00:34:55.720 --> 00:34:59.660
So it's still using rich JavaScript in the client where you need it.

00:34:59.660 --> 00:35:03.860
But you go an awful long way before you need that, you know, and you're dropping in forms

00:35:03.860 --> 00:35:07.980
and you've got a nested list view and you're dropping, you're fetching that nested list view

00:35:07.980 --> 00:35:09.180
and dropping that in place.

00:35:09.180 --> 00:35:11.820
And that's in a modal, which is perhaps powered by Alpine.

00:35:11.820 --> 00:35:15.400
And it looks rich and smooth and it's everything you want.

00:35:15.400 --> 00:35:17.920
But the amount of code is very minimal.

00:35:17.920 --> 00:35:19.080
It's progressive too, right?

00:35:19.080 --> 00:35:23.120
I mean, Vue.js, when it first came on the scene, I forget if it's still doing this, but

00:35:23.120 --> 00:35:26.740
like its whole thing was the progressive, you know, you don't need the full React bundle.

00:35:26.740 --> 00:35:28.920
You can kind of ramp your way in.

00:35:28.920 --> 00:35:31.900
And so I think there's just more ways to get from here to there.

00:35:31.900 --> 00:35:34.960
And you don't have to just go to APIs and the full-blown thing.

00:35:34.960 --> 00:35:39.100
And I have to admit, last week, or perhaps the week before, I was sitting there going,

00:35:39.100 --> 00:35:42.640
I was doing everything at HTMX and I was like, I need a full page load here.

00:35:42.640 --> 00:35:44.280
I need it to refresh the whole page.

00:35:44.280 --> 00:35:44.880
How do I do that?

00:35:44.880 --> 00:35:45.400
How do I do that?

00:35:45.400 --> 00:35:47.860
And I had to step away, go and get a coffee.

00:35:47.860 --> 00:35:51.360
And as I was boiling the kettle, I was like, oh, I could just submit the form normally.

00:35:53.600 --> 00:35:56.160
I'll fall back to just doing what the browser does by default.

00:35:56.160 --> 00:35:56.600
Oh, yeah.

00:35:56.600 --> 00:35:56.920
Okay.

00:35:56.920 --> 00:36:00.060
You just always have to think if it's getting clever, like you're missing something.

00:36:00.060 --> 00:36:00.380
Yeah.

00:36:00.380 --> 00:36:00.560
Yeah.

00:36:00.560 --> 00:36:01.440
No, it was exactly that.

00:36:01.440 --> 00:36:05.520
It's like, I was so in the zone that I'd forgotten the base technology I was using.

00:36:05.520 --> 00:36:10.340
I did a talk at PyBay Food Cart Edition a couple of years ago, and I was talking about

00:36:10.340 --> 00:36:13.020
it on X, whatever that thing.

00:36:13.020 --> 00:36:14.360
And we're going to have to figure this out.

00:36:14.360 --> 00:36:17.400
That thing might be gone pretty soon, but we'll see.

00:36:17.400 --> 00:36:21.040
Anyway, I was talking about it and I said, look, you can write these awesome web apps with

00:36:21.040 --> 00:36:21.380
Python.

00:36:21.380 --> 00:36:25.420
You don't have to use JavaScript and somebody's like, Michael, that's really insensitive.

00:36:25.420 --> 00:36:32.040
People, you shouldn't be degrading the JavaScript developers and that's not the message.

00:36:32.040 --> 00:36:37.100
It's the message that the language you choose, whatever it is, you can just embrace that and

00:36:37.100 --> 00:36:37.700
do a lot more.

00:36:37.700 --> 00:36:43.480
And the biggest example of that is that this is a popular framework in the node community,

00:36:43.480 --> 00:36:44.100
right?

00:36:44.100 --> 00:36:45.480
Which is JavaScript, right?

00:36:45.480 --> 00:36:48.780
And the big value here is that you don't have to also have APIs.

00:36:48.780 --> 00:36:53.260
You don't have to also have a front end and a back end framework in the context, right?

00:36:53.260 --> 00:36:56.700
Like you guys probably know is teaching and help people deploy stuff.

00:36:56.700 --> 00:36:58.420
It's like, well, there's what your front end can do.

00:36:58.420 --> 00:37:03.300
And then there's the security of the browser and there's all the constraints of that.

00:37:03.300 --> 00:37:06.820
And then your back end server, oh, it can talk to the database directly and it could do these

00:37:06.820 --> 00:37:07.340
other things.

00:37:07.340 --> 00:37:12.560
But with HTMX, like your front end code executes in the same context as your back end code.

00:37:12.560 --> 00:37:16.480
So you don't have to have like two security models, two runtime models, two all these two

00:37:16.480 --> 00:37:19.520
conceptual ways of like, well, what's happening here?

00:37:19.520 --> 00:37:20.300
So that means this.

00:37:20.300 --> 00:37:22.160
Like, no, it all happens in one place.

00:37:22.160 --> 00:37:24.720
And that's even valuable if you were doing node in JavaScript.

00:37:24.720 --> 00:37:26.020
Yeah, no, absolutely.

00:37:26.020 --> 00:37:29.600
I think there's a, on the HTMX website, there's an awesome essay.

00:37:29.960 --> 00:37:34.360
It could be the intercooler, but it talks about this impedance between the two sides.

00:37:34.360 --> 00:37:37.160
And the example it gives is GraphQL, I think.

00:37:37.160 --> 00:37:41.820
And the GraphQL gives amazing power onto the front end and you construct all these queries,

00:37:41.820 --> 00:37:42.660
but are they safe?

00:37:42.660 --> 00:37:43.480
And are they, who knows?

00:37:43.480 --> 00:37:47.360
And what companies end up, often end up doing is whitelisting the query.

00:37:47.360 --> 00:37:52.660
So it's in fact, you can't leverage the full expressive GraphQL in the client because it's

00:37:52.660 --> 00:37:56.660
only a certain number of queries which are allowed in order to get over this security problem.

00:37:56.660 --> 00:37:58.620
Those essays there are just phenomenal.

00:37:58.860 --> 00:38:03.980
We should mention, so Carlton's given two talks this year, one of them at DjangoCon Europe.

00:38:03.980 --> 00:38:06.360
He touches upon the locality of behavior.

00:38:06.360 --> 00:38:08.040
I just put in the show notes for you, Michael.

00:38:08.040 --> 00:38:12.880
It's one of the essays, but some of his projects, I saw everyone around me was writing down,

00:38:12.880 --> 00:38:16.420
perhaps you want to expound on that idea, Carlton, because it's not necessarily a new idea,

00:38:16.420 --> 00:38:19.060
but it really seemed to resonate at DjangoCon with people.

00:38:19.060 --> 00:38:22.020
The talk was called Yak Shaving to Where the Puck's Going to Be.

00:38:22.020 --> 00:38:25.720
And it was about, it's just been about what I've been doing since I stepped down as a fellow

00:38:25.720 --> 00:38:26.800
in end of March.

00:38:26.800 --> 00:38:28.820
So April, I sat down to start writing software.

00:38:28.820 --> 00:38:31.400
I had with Django again, rather than on Django, as I said at the beginning.

00:38:31.400 --> 00:38:37.260
And the hook that I built the whole talk around was HTMLX and this idea of locality behavior.

00:38:37.260 --> 00:38:42.600
And so the example that I gave in the talk, which is from the essay there, is HTMLX has

00:38:42.600 --> 00:38:48.320
got just the one HTML file open versus a jQuery example, which is very similar, but it's over

00:38:48.320 --> 00:38:48.940
two files.

00:38:48.940 --> 00:38:51.880
And it's not the only consideration.

00:38:51.880 --> 00:38:55.260
But in that one case, you've got one file open versus two files open.

00:38:55.260 --> 00:38:58.320
Well, there's better locality of behavior where you've got one file open.

00:38:58.320 --> 00:39:02.320
And that really, when I read that essay, it really struck a bell with me.

00:39:02.320 --> 00:39:04.640
For years, I've been talking to clients about this.

00:39:04.640 --> 00:39:08.960
And you've got a form, a Django form, and it's perhaps only got four lines or three lines.

00:39:08.960 --> 00:39:10.140
It's virtually nothing.

00:39:10.140 --> 00:39:15.020
And it'll be off on its own in a separate forms.py file rather than next to the view you're

00:39:15.020 --> 00:39:15.460
working on.

00:39:15.700 --> 00:39:19.680
And so you have to go and open that second forms.py file to see the form.

00:39:19.680 --> 00:39:21.160
And it's always just declares the fields.

00:39:21.160 --> 00:39:21.960
And that's all it does.

00:39:21.960 --> 00:39:22.940
And then you go back to the view.

00:39:22.940 --> 00:39:27.200
And you have to kind of remember it was if you just move that form kind of next to the

00:39:27.200 --> 00:39:31.020
view, all of a sudden, it's all within one screen on your editor.

00:39:31.020 --> 00:39:33.000
And it's much easier to understand.

00:39:33.000 --> 00:39:36.320
And then your speed of development increases.

00:39:36.320 --> 00:39:40.160
And the more I've been playing with this, the more I've used this, it's just like, yeah,

00:39:40.220 --> 00:39:46.340
actually, I'm able to work much faster by focus, particularly of a new code.

00:39:46.340 --> 00:39:49.720
Like when your code starts to get bigger and more gnarly and more curly, and there's more

00:39:49.720 --> 00:39:54.440
bits to it, then okay, you want to break it out so that it remains maintainable.

00:39:54.440 --> 00:39:58.700
But when you're first working on it, and there isn't much of it, and it's constantly in flux,

00:39:58.700 --> 00:40:01.080
keeping it all together, it just helps you go faster.

00:40:01.080 --> 00:40:03.120
It's this idea of locality of behavior.

00:40:03.120 --> 00:40:04.500
It's phenomenal.

00:40:04.500 --> 00:40:06.620
I'm just a massive fan of it.

00:40:06.620 --> 00:40:08.620
Yeah, it's really a brilliant framework.

00:40:08.620 --> 00:40:15.080
And so for Django people, Django-htmx, that's where the magic is to get it easily integrated?

00:40:15.080 --> 00:40:15.460
Yeah.

00:40:15.460 --> 00:40:20.960
So the basics of that is a middleware, which will add an htmx attribute to the request object,

00:40:20.960 --> 00:40:21.940
which lets you query it.

00:40:21.940 --> 00:40:23.360
So is this an htmx request?

00:40:23.360 --> 00:40:24.500
Has it got this header?

00:40:24.500 --> 00:40:25.960
Is it wanting to redirect?

00:40:25.960 --> 00:40:27.620
Is it wanting to do a full page refresh?

00:40:27.620 --> 00:40:32.980
Is it got the various headers that htmx sends that will embed those and a few other niceties

00:40:32.980 --> 00:40:33.360
as well?

00:40:33.360 --> 00:40:34.740
But yeah, you may as well use that.

00:40:34.740 --> 00:40:37.100
That's a good package from Adam, who's one of the cool...

00:40:37.100 --> 00:40:38.220
Adam knows what he's talking about.

00:40:38.220 --> 00:40:38.620
Nice.

00:40:38.620 --> 00:40:38.920
All right.

00:40:38.920 --> 00:40:40.480
Django, 18.

00:40:40.480 --> 00:40:41.580
18 years old.

00:40:41.580 --> 00:40:42.140
Yes.

00:40:42.140 --> 00:40:43.080
Amazingly.

00:40:43.080 --> 00:40:43.800
Amazingly.

00:40:43.800 --> 00:40:44.960
It's old enough to vote.

00:40:44.960 --> 00:40:45.800
Yeah, old enough to vote.

00:40:45.800 --> 00:40:46.080
Yeah.

00:40:46.080 --> 00:40:47.980
It is old enough to vote.

00:40:47.980 --> 00:40:51.900
Not to drink yet, so it's not going to get into trouble on the server for a few more years.

00:40:51.900 --> 00:40:53.000
It is on its holiday in Europe.

00:40:53.000 --> 00:40:53.400
Yeah, okay.

00:40:53.400 --> 00:40:54.040
Well, that's true.

00:40:54.040 --> 00:40:54.320
Yes.

00:40:54.320 --> 00:40:54.620
Okay.

00:40:54.620 --> 00:40:57.200
In Europe, it actually, it totally is.

00:40:57.240 --> 00:41:01.300
I remember when we lived there, my daughters were 16 and we took them out for their 16th

00:41:01.300 --> 00:41:01.580
birthday.

00:41:01.580 --> 00:41:02.200
So yeah.

00:41:02.200 --> 00:41:02.480
Yeah.

00:41:02.480 --> 00:41:04.320
But in the US, we have these rules, you know.

00:41:04.320 --> 00:41:04.800
Two things.

00:41:04.800 --> 00:41:07.980
So Django has major releases updated every eight months.

00:41:07.980 --> 00:41:12.100
So 4.2 came out in April, 5.0 come out in December.

00:41:12.100 --> 00:41:15.380
In between, there's 4.2.1, 4.2.2.

00:41:15.380 --> 00:41:17.960
This is all the work the fellows, Carlton, would do.

00:41:18.320 --> 00:41:23.440
But there's also, so in the Django News newsletter, there is almost every day, there is a new PR

00:41:23.440 --> 00:41:26.240
accepted and merged into Django.

00:41:26.240 --> 00:41:30.120
So on the Django News newsletter, one of the things we have now is a section highlighting

00:41:30.120 --> 00:41:32.180
like the changes this week.

00:41:32.180 --> 00:41:35.420
And I think last week, there were 18 new PRs.

00:41:35.420 --> 00:41:37.560
And that's not just someone opening it up.

00:41:37.560 --> 00:41:40.100
That's like open, discussed, accepted, reviewed.

00:41:40.100 --> 00:41:43.040
Like there's so much activity going on.

00:41:43.040 --> 00:41:48.080
So even as it's 18 years old and it is mature, there is still just so much happening.

00:41:48.280 --> 00:41:51.780
And I think that's one of the messages, Carlton, I try to get to people is like, it's not just

00:41:51.780 --> 00:41:53.760
this static thing at all.

00:41:53.760 --> 00:41:55.100
There's so much that's happening.

00:41:55.100 --> 00:41:58.720
And yet it won't break on you, unlike some other newer technologies.

00:41:58.720 --> 00:42:02.120
I mean, talk about the influx of tickets.

00:42:02.120 --> 00:42:05.220
Just why does Django need fellows?

00:42:05.220 --> 00:42:09.160
The reason it needs fellows is because there's basically five new tickets every single day.

00:42:09.160 --> 00:42:13.520
There's over 1,000 new tickets a year, 1,200 new tickets a year, every year.

00:42:13.520 --> 00:42:15.400
And they keep getting handled.

00:42:15.400 --> 00:42:16.820
They keep getting dealt with.

00:42:16.820 --> 00:42:18.100
The PRs keep getting merged.

00:42:18.240 --> 00:42:19.960
The security releases keep coming.

00:42:19.960 --> 00:42:21.780
And without the fellows, it just wouldn't have happened.

00:42:21.780 --> 00:42:27.700
Django would have sort of just ground into an ever bigger ball of unanswered tickets, unresponded

00:42:27.700 --> 00:42:28.700
things.

00:42:28.700 --> 00:42:34.720
And so it's a project of such a size that without the paid role, it just wouldn't be maintainable.

00:42:34.720 --> 00:42:36.040
Some of these do get resolved.

00:42:36.040 --> 00:42:38.760
I mean, how long was Lily's one on database constraints?

00:42:38.760 --> 00:42:41.400
That was like 13 years, 12, 13 years.

00:42:41.400 --> 00:42:42.340
Tell that story.

00:42:42.480 --> 00:42:44.960
This is one of my favorite features of Django 5.0 that's coming out.

00:42:44.960 --> 00:42:48.580
So we haven't even talked about Django 4.2, but Django 5.0 is coming out soon.

00:42:48.580 --> 00:42:50.660
And in there, so there's some really big ones.

00:42:50.660 --> 00:42:51.940
There's database defaults.

00:42:51.940 --> 00:42:56.080
So on a model field, you've always been able to declare a default value.

00:42:56.080 --> 00:43:01.160
So if there isn't one, give it a date time field, give it now as a classic default.

00:43:01.160 --> 00:43:07.280
But from 5.0, you'll be able to declare those as database defaults, which may not sound like

00:43:07.280 --> 00:43:07.480
much.

00:43:07.540 --> 00:43:08.160
But A, it's quicker.

00:43:08.160 --> 00:43:09.640
It's moving work into the database.

00:43:09.640 --> 00:43:13.640
But B, not every connection to your database goes via your Django application.

00:43:13.640 --> 00:43:15.760
So you're able to have database level default.

00:43:15.760 --> 00:43:20.080
And so if there is a script which isn't using the Django ORM, then you still get the value

00:43:20.080 --> 00:43:20.400
of that.

00:43:20.400 --> 00:43:25.160
And that ties in with work that's been done on constraints with database constraints have

00:43:25.160 --> 00:43:26.660
been massively powered up.

00:43:26.660 --> 00:43:31.280
And they'll even now, you know, your form generation will generate validators that are based on the

00:43:31.280 --> 00:43:32.300
database constraints.

00:43:32.760 --> 00:43:35.640
And it's just so much richness coming in.

00:43:35.640 --> 00:43:41.220
I think, I really think we're also going to get database cascades in Django 5.0.

00:43:41.220 --> 00:43:42.380
It's nearly ready.

00:43:42.380 --> 00:43:44.020
There's a month or so before the feature freeze.

00:43:44.020 --> 00:43:48.960
I think it's going to go in, in which case we're going to have DB defaults and DB level cascades,

00:43:48.960 --> 00:43:50.980
both, you know, added to Django.

00:43:50.980 --> 00:43:55.540
Both of those, it's a decade or more in the resolving in a new release.

00:43:55.540 --> 00:43:57.840
And it's just, oh, wow, that's really exciting.

00:43:57.840 --> 00:44:03.720
Yeah, for a lot of people, a lot of companies, the database is the source of truth for the

00:44:03.720 --> 00:44:04.200
apps, right?

00:44:04.200 --> 00:44:07.560
And like, sure, your code may talk to it, but what is in the database?

00:44:07.560 --> 00:44:10.800
Like there are people whose job it is to defend the schema.

00:44:10.800 --> 00:44:12.620
They call them DBAs, right?

00:44:12.620 --> 00:44:15.740
So Django 4.2 added DB comments.

00:44:15.740 --> 00:44:20.000
So you could add schema level comments to your model fields to explain the use of the model

00:44:20.000 --> 00:44:20.220
field.

00:44:20.220 --> 00:44:21.960
Again, it's for those scenarios.

00:44:21.960 --> 00:44:22.200
Yeah.

00:44:22.200 --> 00:44:26.340
For people who are serious about the databases, these features are just massively important.

00:44:26.660 --> 00:44:31.080
Yeah, I think it's certainly worth considering that there will be other apps, there will be

00:44:31.080 --> 00:44:33.700
other tools, and maybe even data science, right?

00:44:33.700 --> 00:44:35.460
The data science angle is huge.

00:44:35.460 --> 00:44:37.760
Often wants to now talk to the database.

00:44:37.760 --> 00:44:42.140
And even if it's in Python, it's unlikely that in Jupyter, you're going to pull in your

00:44:42.140 --> 00:44:42.560
ORM.

00:44:42.560 --> 00:44:47.220
You're probably using some other data science oriented library to talk to that.

00:44:47.220 --> 00:44:49.680
And so pushing those defaults down is valuable.

00:44:49.680 --> 00:44:51.860
Well, so Michael, you're as situated as anyone to answer this.

00:44:51.860 --> 00:44:56.280
Carlton and I are in the Django world, but how do we bridge the data science to web?

00:44:56.480 --> 00:44:57.680
It doesn't need to be Django world.

00:44:57.680 --> 00:44:59.600
Like what do they need to be on the web?

00:44:59.600 --> 00:45:01.480
And if so, like what's holding them back?

00:45:01.480 --> 00:45:06.280
Because it just feels like this mega, megaton star of data science and this tiny little web

00:45:06.280 --> 00:45:06.520
thing.

00:45:06.520 --> 00:45:07.700
But like, how do they share stuff?

00:45:07.700 --> 00:45:09.060
How do they interact with it?

00:45:09.060 --> 00:45:09.320
Yeah.

00:45:09.320 --> 00:45:11.840
You've got your notebook and then you want to publish it somewhere, right?

00:45:11.840 --> 00:45:12.580
Like, yeah.

00:45:12.580 --> 00:45:14.360
Or just share it, share your information.

00:45:14.360 --> 00:45:17.020
Or you have a database of COVID things.

00:45:17.020 --> 00:45:21.540
For example, in the UK, you want to put online, but let people make change in some way or make

00:45:21.540 --> 00:45:22.060
requests.

00:45:22.320 --> 00:45:24.160
I mean, the data isn't generally static.

00:45:24.160 --> 00:45:26.540
So I think there's two answers from my perspective.

00:45:26.540 --> 00:45:29.860
I think there's, there are the frameworks that are doing that.

00:45:29.860 --> 00:45:35.320
And that would be things like streamlit dash, not dashly, but the other dashboarding one.

00:45:35.320 --> 00:45:39.360
There's panel, I'd say streamlit, probably start with that one, right?

00:45:39.400 --> 00:45:43.960
So those kinds of things where you can get like kind of a simplified view that's kind

00:45:43.960 --> 00:45:44.920
of an interactive thing.

00:45:44.920 --> 00:45:48.060
You wouldn't look at it like we're looking at this Django site and go, yeah, it looks like,

00:45:48.060 --> 00:45:49.200
it feels like this, right?

00:45:49.200 --> 00:45:50.200
It doesn't feel like that.

00:45:50.200 --> 00:45:54.260
It feels like you pushed a kind of a interactive generic UI up.

00:45:54.260 --> 00:45:56.600
But I think that's a pretty good answer for a lot of people.

00:45:56.600 --> 00:46:01.320
I think another is honestly, the stuff with HTMX, right?

00:46:01.400 --> 00:46:06.260
You need a lot of interactivity in many of these things, these data screen screens and

00:46:06.260 --> 00:46:08.460
like to get that interactivity often.

00:46:08.460 --> 00:46:10.280
But you also need it to remember.

00:46:10.280 --> 00:46:11.480
Yeah, yeah.

00:46:11.480 --> 00:46:12.780
I mean, you need it to remember.

00:46:12.780 --> 00:46:16.140
We computed this stuff and I want it to like get me the other info.

00:46:16.140 --> 00:46:21.020
And you kind of need, just because how long it takes to do a lot of the computation, you

00:46:21.020 --> 00:46:23.140
want a somewhat stateful type of behavior.

00:46:23.600 --> 00:46:28.620
And I think HTMX with Plotly or something like that, even Matplotlib, I've done some

00:46:28.620 --> 00:46:32.580
Matplotlib stuff and just like returned it as an image in different areas.

00:46:32.580 --> 00:46:33.240
And yeah.

00:46:33.240 --> 00:46:34.660
What do you, Carlton, what do you think?

00:46:34.660 --> 00:46:35.600
Yeah, no, I'm nodding.

00:46:35.600 --> 00:46:39.500
That's a good approach because, you know, you can quite easily put in a little loading

00:46:39.500 --> 00:46:44.560
indicator there and it'll, when the HTML is ready and just, even if it took the same

00:46:44.560 --> 00:46:48.340
amount of time by just putting in that little animation while it loads, it feels as if it's

00:46:48.340 --> 00:46:51.440
responsive and doing something and it's, it's not rocket science, but.

00:46:51.440 --> 00:46:52.960
A little HX dash indicator.

00:46:52.960 --> 00:46:53.620
Yeah.

00:46:53.620 --> 00:46:53.920
Yeah.

00:46:53.920 --> 00:46:58.040
I was nodding particularly when you said just use Matplotlib and pull it in as an image.

00:46:58.040 --> 00:46:58.820
It's like, yeah, that works.

00:46:58.820 --> 00:47:00.780
That goes an awful long way doing that kind of thing.

00:47:00.780 --> 00:47:01.980
I wasn't familiar with Streamlit.

00:47:01.980 --> 00:47:02.600
That's really cool.

00:47:02.600 --> 00:47:03.300
I mean, it makes sense.

00:47:03.300 --> 00:47:06.780
I'm like, there's got to be someone, some people doing this, solving this problem.

00:47:06.780 --> 00:47:09.660
But yeah, Streamlit is really, really interesting.

00:47:09.660 --> 00:47:14.860
Basically you put deck, you have like a regular script that's not even a web thing and you put

00:47:14.860 --> 00:47:19.880
decorators onto the functions and it says, oh, this parameter here is going to be a

00:47:19.880 --> 00:47:21.260
combo box or something.

00:47:21.400 --> 00:47:25.340
And it knows how to like wire the, it's some voodoo, but it's cool.

00:47:25.340 --> 00:47:27.040
But it does look like a Streamlit app, right?

00:47:27.040 --> 00:47:30.420
It doesn't look like, well, here's my own custom website.

00:47:30.420 --> 00:47:32.700
It's like, well, here's my Streamlit app that I built for you.

00:47:32.700 --> 00:47:32.880
Right.

00:47:32.880 --> 00:47:33.340
So there's.

00:47:33.340 --> 00:47:36.780
But I mean, and yet, you know, many people are using Tailwind now.

00:47:36.780 --> 00:47:40.500
And so every site looks like a Tailwind site and before it was bootstrapped and before,

00:47:40.500 --> 00:47:43.420
you know, so it's like, we can't get too high on our horse about it, you know, because

00:47:43.420 --> 00:47:47.500
at the end of the day, it's like, it just needs to look modern-ish and like move on.

00:47:47.500 --> 00:47:48.340
Yeah, absolutely.

00:47:48.340 --> 00:47:49.060
Absolutely.

00:47:49.280 --> 00:47:51.080
And getting something out is super important.

00:47:51.080 --> 00:47:51.520
Okay.

00:47:51.520 --> 00:47:58.400
So Django is, I would say it is the oldest popular Python web framework period, right?

00:47:58.400 --> 00:48:03.480
There may have been ones before, but it certainly seems to be of the few that are like really,

00:48:03.480 --> 00:48:04.160
really popular.

00:48:04.160 --> 00:48:06.280
The one that's been around the longest.

00:48:06.540 --> 00:48:11.680
What's amazing for me about it is the way the community kind of keeps refreshing itself.

00:48:11.680 --> 00:48:17.280
Like it's not like the founders of Django are still merging every commit and every PR far

00:48:17.280 --> 00:48:17.620
from it.

00:48:17.620 --> 00:48:21.940
But, you know, I think Simon Willison made a commit in either 4.1 or 4.2.

00:48:21.940 --> 00:48:22.380
I can't remember.

00:48:22.380 --> 00:48:23.600
It was his first one for six years.

00:48:23.760 --> 00:48:26.080
He doesn't even live in Lawrence anymore.

00:48:26.080 --> 00:48:26.680
I mean, come on.

00:48:26.680 --> 00:48:27.260
None of them do.

00:48:27.260 --> 00:48:27.760
Exactly.

00:48:27.760 --> 00:48:28.980
What right has he got?

00:48:28.980 --> 00:48:34.060
But the point being is that it was set up deliberately to like hand it on and let it go.

00:48:34.060 --> 00:48:39.880
And it's, I think Django is probably on its fourth or even fifth cohort of generation of kind of maintainers

00:48:39.880 --> 00:48:45.980
now and yeah, that's a whole fresh batch of faces in the community who are doing new and exciting things.

00:48:45.980 --> 00:48:52.920
And it's just so wonderful to see because you get old and long in the tooth and think, oh, I'm worried about the future of Django.

00:48:52.920 --> 00:48:54.480
No, Django is doing great.

00:48:54.480 --> 00:48:57.500
At DjangoCon, we talk about Django things.

00:48:57.500 --> 00:49:03.660
And one of the things we don't necessarily describe to others is what makes Django different than other frameworks out there.

00:49:03.660 --> 00:49:05.000
And it is the community.

00:49:05.400 --> 00:49:12.040
You know, I mean, like Flask is an amazing resource and David Lord and people do great work, but there's no Flask cons.

00:49:12.040 --> 00:49:14.100
There's no, it's its own thing.

00:49:14.100 --> 00:49:18.060
But Django is relatively unique in that it has, it's a nonprofit.

00:49:18.060 --> 00:49:19.420
It has fellows.

00:49:19.420 --> 00:49:20.420
It has conferences.

00:49:20.420 --> 00:49:22.980
It has this whole ecosystem, third-party packages.

00:49:22.980 --> 00:49:26.220
You know, so there's the saying, you know, come for the framework, stay for the community.

00:49:26.220 --> 00:49:34.560
It really is true, but you can't get that across to someone who just looks at the Django website, which looks like what it is, which it hasn't been redone in a number of years.

00:49:34.560 --> 00:49:34.780
Right.

00:49:34.780 --> 00:49:37.580
You think, oh, maybe it's a little bit of a stale, crusty Python thing.

00:49:37.580 --> 00:49:38.640
It's like, no, it's alive.

00:49:38.640 --> 00:49:40.000
There's changes every day.

00:49:40.000 --> 00:49:41.360
You're just not seeing it.

00:49:41.360 --> 00:49:43.420
And it's hard to, you're HTMX, right?

00:49:43.420 --> 00:49:47.480
Like Carson does amazing work, but I think it's pretty much just him, right?

00:49:47.480 --> 00:49:50.020
It's not this community of dozens and dozens of people.

00:49:50.020 --> 00:49:57.260
And so one of the exciting things for Carlton and me is we're both transitioning away a little bit, but still helping bring in new people.

00:49:57.460 --> 00:49:58.540
And that's healthy, right?

00:49:58.540 --> 00:50:04.300
Like we know a bit, but sometimes I get, you know, I know the things that kind of I would like to change that may not change as quickly.

00:50:04.300 --> 00:50:06.600
And then new people have great ideas and enthusiasm.

00:50:06.600 --> 00:50:10.020
And it's like, yes, let me support you because I don't want to get stale with this.

00:50:10.020 --> 00:50:16.780
Project Vaughn asks a pretty good question, which I think is a good question for any really large project that's been around a long time.

00:50:16.780 --> 00:50:18.620
It's like, how do you get more involved with Django?

00:50:18.620 --> 00:50:27.440
For someone who's not proficient in Django, like super, super proficient, given that it's a mature project, it's really hard to get that first PR written.

00:50:27.760 --> 00:50:31.500
One thing that often comes up, oh, there's no ease, there's no low hanging fruit.

00:50:31.500 --> 00:50:32.400
It's a mature framework.

00:50:32.400 --> 00:50:33.480
There's nothing easy to do.

00:50:33.480 --> 00:50:34.880
And it's like, well, yes and no.

00:50:34.880 --> 00:50:35.620
Yes and no.

00:50:35.620 --> 00:50:44.100
There are very few like nothing fixes, you know, that an absolute beginner can just come in and get, because they get snapped up really quickly and they just don't hang around for very long.

00:50:44.100 --> 00:50:47.980
But we've got something like 800 open accepted tickets on Django.

00:50:48.200 --> 00:51:00.600
Now of those 800 tickets, some of them are truly hard, like adding database defaults, which took a dozen years and five Django con sprints and, you know, who knows what to actually get over the line.

00:51:00.600 --> 00:51:02.160
That's truly hard.

00:51:02.160 --> 00:51:04.040
But most of the tickets aren't like that.

00:51:04.040 --> 00:51:10.600
Most of the tickets are no harder than a problem that you're solving in your everyday Django or Python programming work.

00:51:10.600 --> 00:51:13.640
And what they need is time and love.

00:51:13.640 --> 00:51:16.280
And so Django cons, I've run Django cons sprints.

00:51:16.280 --> 00:51:17.860
I've run a kind of getting contributed workshop.

00:51:17.960 --> 00:51:19.620
And the goal of it, you've only got a couple of hours.

00:51:19.620 --> 00:51:20.700
It's only like half a morning.

00:51:20.700 --> 00:51:29.040
And the goal is not to necessarily get your PR in, but it's just to get you to look at a ticket in a bit of depth, get set up with a test suite, you know, install it, get set up.

00:51:29.040 --> 00:51:39.040
But get involved in a ticket and come to understand that ticket and realize that actually after that, a couple of hours of thinking about that ticket, you are literally the world expert on that ticket.

00:51:39.040 --> 00:51:41.860
And even though you're not like, oh, it's established.

00:51:41.860 --> 00:51:43.000
I'm not a Django fellow.

00:51:43.000 --> 00:51:44.120
I'm not an established contributor.

00:51:44.120 --> 00:51:50.360
You, as the world expert on that ticket, you have a valid opinion and your insight will be valuable.

00:51:50.360 --> 00:51:53.780
And yes, you have to dig around and you have to learn some source code.

00:51:54.100 --> 00:51:57.580
But you'll have an idea and it's going to be on the right track.

00:51:57.780 --> 00:52:01.140
And if you put the time and work and love in, you'll be able to resolve that ticket.

00:52:01.140 --> 00:52:06.060
And once people have had that experience, then it's like, oh, I can do another one and I can do another one.

00:52:06.060 --> 00:52:08.260
And it can become the little side hobby.

00:52:08.260 --> 00:52:10.280
And actually then I'm a Django contributor.

00:52:10.280 --> 00:52:15.100
So it's take your time, pick a ticket, really focus on it, become the world expert.

00:52:15.500 --> 00:52:20.440
And in so doing, even if you don't resolve the ticket, you will learn an awful lot about Django.

00:52:20.440 --> 00:52:23.120
You think you know Django by developing Django apps all day.

00:52:23.120 --> 00:52:27.560
Well, you start digging around in the code, I'll guarantee you'll know it a lot better afterwards.

00:52:27.560 --> 00:52:34.980
So that would be what I say is find a ticket that grabs you and just take that little bit of time to really understand it.

00:52:34.980 --> 00:52:36.040
Yeah, that's great advice.

00:52:36.040 --> 00:52:39.620
I guess there's probably sprints you could drop into at some conferences.

00:52:39.620 --> 00:52:40.160
Yeah.

00:52:40.160 --> 00:52:42.620
So after the Django cons, there's two days of sprints.

00:52:42.620 --> 00:52:43.040
Stay around.

00:52:43.120 --> 00:52:52.020
There's a really great opportunity to meet people who are contributing and to get into contributing and be able to sit in the same room as somebody and say, well, you know, how do I get started?

00:52:52.020 --> 00:52:54.180
How, you know, that is a good, a good play.

00:52:54.180 --> 00:52:58.200
But can I just sit there and look over your shoulder as you two work on this?

00:52:58.200 --> 00:52:58.960
Yes.

00:52:58.960 --> 00:52:59.660
Let me be.

00:52:59.660 --> 00:53:01.260
That was the most recent Django con.

00:53:01.260 --> 00:53:02.940
So there's Django con US, Django con Europe.

00:53:02.940 --> 00:53:05.260
There's going to be a Django con Africa this year for the first time.

00:53:05.260 --> 00:53:11.140
But the most recent Django con US, I was at a sprint talking with David Lord, who's the lead maintainer on Flask.

00:53:11.140 --> 00:53:12.720
And he had a question about something or other.

00:53:13.080 --> 00:53:15.840
And someone was like, oh, like Simon Wilson knows about that.

00:53:15.840 --> 00:53:17.220
So I was like, oh, grab Simon over.

00:53:17.220 --> 00:53:18.160
And they'd never met.

00:53:18.160 --> 00:53:22.900
And now it's like, oh, like, so if you can stay for the sprints, it seems like the nothing part.

00:53:22.900 --> 00:53:29.880
It's actually I'd almost take the sprints over the conference if you could, because it's literally just like anyone you want to talk to.

00:53:29.880 --> 00:53:32.100
And you don't have to, you know, like, what are you working on?

00:53:32.100 --> 00:53:33.760
Or, yeah, they're like the best part.

00:53:33.880 --> 00:53:36.120
But maybe it seems intimidating, but it's really not.

00:53:36.120 --> 00:53:38.880
And to Carlton's point, the community really is welcoming.

00:53:38.880 --> 00:53:46.000
So even especially if you're inexperienced, if you're making an effort and people can see that they will be encouraging and want to loop you in.

00:53:46.000 --> 00:53:55.460
There's also I should mention there's a new link program called Django Knot that's trying to pilot having some mentors to give this kind of hands on help a little bit.

00:53:55.740 --> 00:53:56.420
That's a new program.

00:53:56.420 --> 00:54:02.040
It's only, I think, six people right now, but there's they're trying to foster more mentoring of this type.

00:54:02.040 --> 00:54:04.100
But it is a challenge for a mature framework, right?

00:54:04.100 --> 00:54:06.060
You probably can't just go fix HTML.

00:54:06.060 --> 00:54:09.840
It's probably a little more meaty, but it's not all hard just because it's there.

00:54:09.840 --> 00:54:11.840
It's just that it got stuck for whatever reason.

00:54:11.840 --> 00:54:16.800
It needs, as Carlton said, that of someone to come in and put a couple hours and then be the world expert.

00:54:16.800 --> 00:54:17.820
Absolutely.

00:54:17.820 --> 00:54:21.180
So what's the async story Django these days?

00:54:21.180 --> 00:54:21.840
How's it looking?

00:54:21.840 --> 00:54:23.180
It's looking really good.

00:54:23.520 --> 00:54:25.920
Well, do we get to talk about 4.2?

00:54:25.920 --> 00:54:26.160
Yes.

00:54:26.160 --> 00:54:31.120
Django 4.2 brought in async support for streaming responses.

00:54:31.120 --> 00:54:37.060
So within the core framework itself, you can do service and events or, you know, you can have a request come in.

00:54:37.060 --> 00:54:41.460
You can keep it open without blocking the worker and you can periodically send messages down.

00:54:41.460 --> 00:54:43.740
That's really quite exciting in 4.2.

00:54:43.740 --> 00:54:50.060
And with the other thing that came in 4.2 was Psycho PG3, which allows async database connections.

00:54:51.300 --> 00:55:01.140
And so there's a link in the show notes there of somebody put together exactly what I was hoping for, which was the chat, the chat example, but done 100% async.

00:55:01.140 --> 00:55:10.860
So without blocking the blocking ORM call with the service and events, so instead of long polling or without having to use an add-on like channels, which, you know, add-on channels is great if you need it.

00:55:10.860 --> 00:55:14.940
But isn't it cool that you can do service and events just in Django?

00:55:15.180 --> 00:55:27.700
And then in 5.0, which is coming, we're going to have HTTP disconnect handling in, so those long-lived requests, if the client disconnects, you'll get an asyncio cancel there in your view and you'll be able to respond to it and do any cleanup.

00:55:27.700 --> 00:55:39.660
We've also, in 5.0, we're going to have async signals, which gives you an 100% async request-response pathway if you want it, because before the only blocking bit there was the signals, which were synced.

00:55:39.660 --> 00:55:45.480
So you still had to do this sync to async, jump into a thread pool to dispatch the signals.

00:55:45.480 --> 00:55:48.860
But that, if you've got async signal handles, will all be async as well.

00:55:49.040 --> 00:55:51.420
So the entire request-response flow can be async.

00:55:51.420 --> 00:55:55.960
And then sessions is going to be async in 5.0 as well.

00:55:55.960 --> 00:55:59.020
Auth is going to be async as well in 5.0.

00:55:59.020 --> 00:56:05.760
So those kind of core flows are, this is on top of the async interface to the ORM, which was added.

00:56:05.760 --> 00:56:07.180
You know, it's all fleshing out.

00:56:07.180 --> 00:56:12.400
And there's a few decorators, which, you know, aren't yet done, but they'll be done over the next few releases.

00:56:12.400 --> 00:56:14.040
It's really enriched.

00:56:14.040 --> 00:56:18.980
And it's like, yes, yes, five, six years, seven years of work has gone into this.

00:56:19.120 --> 00:56:21.000
And it's really maturing nicely.

00:56:21.000 --> 00:56:24.580
So I think async in Django is a very, very exciting time.

00:56:24.580 --> 00:56:27.560
So when people say, I want a FastAPI, right?

00:56:27.560 --> 00:56:28.200
That's always the thing.

00:56:28.200 --> 00:56:29.440
Well, why not just use FastAPI?

00:56:29.440 --> 00:56:30.500
Well, no.

00:56:30.500 --> 00:56:32.420
If you want to use FastAPI, go use FastAPI.

00:56:32.420 --> 00:56:45.840
But if you're using Django, but you need a couple of these endpoints, which you need higher throughput or, you know, a real-time or two-directional traffic or whatever, you shouldn't have to switch red framework just to have a couple of these endpoints, right?

00:56:45.900 --> 00:56:53.320
It's like Python needs to be in every area because you shouldn't have to switch language just because you need, I don't know what, to be a bit more serious about things.

00:56:53.320 --> 00:56:56.280
So Python needs to be able to account for those more serious use cases.

00:56:56.280 --> 00:56:57.040
Well, same with Django.

00:56:57.040 --> 00:57:05.000
It needs an async story because you shouldn't have to change your web framework just for, you know, service center events or I don't know what other async, you know, a bit of real-time.

00:57:05.240 --> 00:57:08.580
Almost nothing waits on other things like web frameworks do.

00:57:08.580 --> 00:57:10.660
They wait on database calls.

00:57:10.660 --> 00:57:12.020
They wait on the network.

00:57:12.020 --> 00:57:15.140
They wait on caches, you know, like Redis.

00:57:15.140 --> 00:57:18.260
They wait on maybe calling other APIs.

00:57:18.260 --> 00:57:24.160
Like, almost everything they do is coordinating other systems and waiting and then turning that to HTML or JSON.

00:57:24.160 --> 00:57:27.240
And so having rich async support is fantastic.

00:57:27.240 --> 00:57:28.840
Yeah, no, I mean, it's really coming on.

00:57:28.840 --> 00:57:36.320
And there are still, you know, there are bits inside, you know, I don't know if you need the, I don't know, user passage test, decorate, permissions decorator.

00:57:36.320 --> 00:57:37.940
Is that yet async defy?

00:57:37.940 --> 00:57:38.920
I'm not sure if it is.

00:57:38.920 --> 00:57:43.920
But okay, that's not, we haven't got to, maybe we have, I need to check, but we haven't got to that bit yet.

00:57:43.920 --> 00:57:46.880
But okay, those kind of bits, we'll get there with those.

00:57:46.960 --> 00:57:52.060
But that kind of call, I'm building something on the request response cycle with auth, with sessions.

00:57:52.060 --> 00:57:53.500
Yeah, that's all now done.

00:57:53.500 --> 00:57:54.940
And so it's really maturing.

00:57:54.940 --> 00:57:56.360
Getting short on time here, guys.

00:57:56.360 --> 00:57:58.920
It's so nice to have you be in charge of this, I should say, right?

00:57:58.920 --> 00:58:02.880
Because whenever there's those pauses, like my instinct is to jump in and like, look at our notes.

00:58:02.880 --> 00:58:05.640
But like, just like, nope, you're captain of the ship.

00:58:05.640 --> 00:58:06.480
It's so nice.

00:58:06.480 --> 00:58:07.060
Yeah.

00:58:07.060 --> 00:58:11.960
We're just out for a sunset cruise in the whole boat.

00:58:11.960 --> 00:58:13.160
We're coming back to the harbor.

00:58:13.160 --> 00:58:15.840
So what else about the future, right?

00:58:15.840 --> 00:58:20.520
We talked about Django being 18, a lot of the cool ideas and projects and resources.

00:58:20.520 --> 00:58:24.900
But what about the future, some of which we just covered is really exciting.

00:58:24.900 --> 00:58:27.100
Maybe we haven't given time to yet.

00:58:27.100 --> 00:58:29.980
I'm personally excited about the new people getting involved.

00:58:29.980 --> 00:58:37.880
I know that's not as tangible for folks, but coming from Django Cons, coming, like I just stepped off the board as treasurer for three years.

00:58:37.880 --> 00:58:41.220
I know who the new treasurer is, the current president.

00:58:41.220 --> 00:58:43.540
Like, I'm really excited about the new people.

00:58:43.600 --> 00:58:51.960
And so I don't, for a while during COVID, I think some of us had concerns about like, you know, how do we keep this afloat and not have everything crash and burn?

00:58:51.960 --> 00:58:54.380
But I don't have those concerns anymore.

00:58:54.840 --> 00:58:56.020
Yeah, yeah, yeah, yeah.

00:58:56.020 --> 00:59:03.980
Just the fact that if you want something in Python that solves almost every web problem you have and has a really supportive community, Django is still there for you.

00:59:03.980 --> 00:59:05.800
And so I guess that's the big one.

00:59:05.900 --> 00:59:13.520
It's just, and I think from a marketing side, it's just how do we express that it's still cool and interesting and powerful and yet won't break on you.

00:59:13.520 --> 00:59:17.060
It doesn't seem as shiny and new as the next whatever.

00:59:17.060 --> 00:59:22.320
But it's, you know, it's like if you look on Hacker News every like six months, someone's like, wow, Django is like still around.

00:59:22.320 --> 00:59:26.820
Oh, it's like kind of solves all these problems we have with this new JavaScript this or that.

00:59:26.880 --> 00:59:29.360
And it's like, yeah, it's still just doing its thing.

00:59:29.360 --> 00:59:31.500
So I would say the community side.

00:59:31.500 --> 00:59:33.240
I mean, also like I've got projects.

00:59:33.240 --> 00:59:37.160
If you want to learn Django, I mean, like, let me, there's a lot of resources to learn it.

00:59:37.160 --> 00:59:38.620
There's a number, there's videos.

00:59:38.620 --> 00:59:42.780
You have videos, books, tutorials, like some of these newer technologies.

00:59:42.780 --> 00:59:43.740
It's harder.

00:59:43.740 --> 00:59:46.860
There's not a community and it's harder to find the resources.

00:59:46.860 --> 00:59:50.820
You know, there's a lot of strength in being around for a while and yet not being totally stale.

00:59:50.820 --> 00:59:52.900
So that would be my tagline for Django.

00:59:52.900 --> 00:59:53.460
How's that?

00:59:53.460 --> 00:59:54.560
I kind of go off that.

00:59:54.560 --> 00:59:56.680
I think actually it is cool.

00:59:56.840 --> 00:59:58.800
And it's about as cool as it's been for a while.

00:59:58.800 --> 01:00:05.340
I said in my DjangoCon Europe talk that I'm as excited about the framework and where it's going now as I have been for many years.

01:00:05.340 --> 01:00:09.520
Since I said since the DRF Kickstarter, if you remember that back in the day.

01:00:09.520 --> 01:00:14.580
There are over the last few releases, and I don't just mean 4.2 and 5.0 coming up.

01:00:14.580 --> 01:00:22.140
I mean, like the last 3.2, 4.0, 4.1, like last few years, there've been a number of threads, not just the async stuff.

01:00:22.140 --> 01:00:24.560
There's been massive changes to the forms, templating.

01:00:24.900 --> 01:00:28.640
There's been all these changes to the ORM that are powering up every single release.

01:00:28.640 --> 01:00:29.900
And they've all come together.

01:00:29.900 --> 01:00:32.820
And there are patterns now to be discovered.

01:00:33.420 --> 01:00:40.480
And it's like I said, I'm stepping down in part because of life, but in part to get back to working with Django rather than just on Django.

01:00:40.480 --> 01:00:45.080
I want to play with all of these new toys that we've built over the last few releases.

01:00:45.080 --> 01:00:49.900
And I want to discover those patterns and see them codified and see them come out in the community.

01:00:49.900 --> 01:00:52.400
And it's just a massively fertile time.

01:00:52.400 --> 01:00:54.080
And so that's what I'm excited about.

01:00:54.080 --> 01:00:54.860
That's where we're going.

01:00:54.860 --> 01:01:01.340
And I can't say every release Django literally gobsmacked by how many new features you think are there won't be any in the new one.

01:01:01.720 --> 01:01:05.400
But 5.0 is coming out.

01:01:05.400 --> 01:01:07.400
And it's just hitting you out of the park again.

01:01:07.400 --> 01:01:09.520
And it's like, wow, we've only just had 4.2.

01:01:09.520 --> 01:01:10.900
4.2 is not even old yet.

01:01:10.900 --> 01:01:13.080
5.0 is not even in alpha.

01:01:13.080 --> 01:01:15.360
And we're already thinking, oh, can we run it off main?

01:01:15.360 --> 01:01:16.360
Because it's so exciting.

01:01:16.360 --> 01:01:18.620
The future is so many things have come together.

01:01:18.620 --> 01:01:19.960
And the future is just really exciting.

01:01:20.220 --> 01:01:23.520
I feel like I would be bored by now with Django.

01:01:23.520 --> 01:01:25.500
I've only been doing it for over a decade.

01:01:25.500 --> 01:01:29.300
But if anything, there's just so many new features.

01:01:29.300 --> 01:01:34.740
But also, I'm understanding built-in functionality even better to solve problems that I just didn't have before.

01:01:34.740 --> 01:01:37.120
So at some point, maybe I'll be like, oh, I know it all.

01:01:37.120 --> 01:01:38.360
But I feel the opposite.

01:01:38.360 --> 01:01:40.540
I feel like, whoa, I had no idea.

01:01:40.540 --> 01:01:41.700
Just one concrete example.

01:01:41.700 --> 01:01:44.320
Doing all the work with templates and HTMLX.

01:01:44.320 --> 01:01:51.880
And coming to see the patterns about creating, again, fresh for the first time and really using templates for the first time in half a decade.

01:01:51.880 --> 01:01:55.020
It's like, okay, ah, yes, I create a template tag here.

01:01:55.020 --> 01:01:55.760
And I do it this way.

01:01:55.760 --> 01:01:59.200
And I put a mapper in here to create a kind of view model type thing.

01:01:59.200 --> 01:02:01.960
So I pass in an ORM model object into the template tag.

01:02:01.960 --> 01:02:05.640
And then in the template tag, I map it to what I need in the actual template itself.

01:02:05.640 --> 01:02:06.680
Then the template comes in.

01:02:06.680 --> 01:02:09.220
It's like, oh, that's a really good and powerful pattern.

01:02:09.220 --> 01:02:12.100
And it's really encapsulated and neat.

01:02:12.100 --> 01:02:13.820
And it makes my template expressive.

01:02:14.200 --> 01:02:17.080
And oh, rediscovering these things.

01:02:17.080 --> 01:02:24.280
And then being able to say, right, okay, well, what changes does the Django template language need that it hasn't had in quite a few years because no one was using it?

01:02:24.280 --> 01:02:27.020
And yeah, it's just a massively fertile time.

01:02:27.020 --> 01:02:27.620
It is.

01:02:27.620 --> 01:02:40.500
And it's no coincidence that we've been hitting on HTMLX so much because it really puts the power of frameworks like Django back front and center in how you think about building and structuring your web apps.

01:02:41.220 --> 01:02:44.640
It's not like, well, there's this thing in the backend and then we're going to go do these other languages.

01:02:44.800 --> 01:02:46.040
It's like, you know, actually it could be all.

01:02:46.040 --> 01:02:49.620
And there's a bunch of cool features and capabilities that we've been talking about.

01:02:49.620 --> 01:02:56.820
And you can use them throughout your app if you leverage something like, not necessarily, but something like HTMLX, which is really cool, I think.

01:02:57.020 --> 01:02:59.600
For me, it works just with the grain of the framework.

01:02:59.600 --> 01:03:03.080
It's like, this is the way I would do it if I was writing in 2005.

01:03:03.880 --> 01:03:06.800
And I do it exactly the same in 2023.

01:03:06.800 --> 01:03:09.760
And it just works.

01:03:09.760 --> 01:03:15.420
And it's, you know, responsive and dynamic and all these nice things that, you know, clients want.

01:03:15.420 --> 01:03:15.820
Absolutely.

01:03:15.820 --> 01:03:16.660
All right.

01:03:16.660 --> 01:03:17.600
Let's leave it there, guys.

01:03:17.600 --> 01:03:23.540
Thank you so much for covering all this and celebrating Django's 18th birthday.

01:03:23.540 --> 01:03:24.780
18th birthday, yeah.

01:03:24.780 --> 01:03:25.700
Yeah, it's awesome.

01:03:26.000 --> 01:03:29.200
It is an adult and it's a cool framework for sure.

01:03:29.200 --> 01:03:36.120
With really, I think it's the community behind it, especially the fellows and all the board and stuff.

01:03:36.120 --> 01:03:40.760
It makes it really unique and is certainly worth considering as part of the framework, right?

01:03:40.760 --> 01:03:41.320
As you said.

01:03:41.320 --> 01:03:41.740
Okay.

01:03:41.740 --> 01:03:48.200
With that, let's round this out with just a final shout out to what you guys have around Django.

01:03:48.200 --> 01:03:51.220
For example, the Django chat podcast, right?

01:03:51.220 --> 01:03:52.200
Which is excellent.

01:03:52.200 --> 01:03:53.500
Give us a shout about that.

01:03:53.500 --> 01:03:58.720
You know, Will, tell us about Learn Django and maybe Button.dev or whatever else you want to throw in.

01:03:58.720 --> 01:04:00.360
I should say Django chat.com.

01:04:00.360 --> 01:04:07.700
You're sort of the godfather of it because you gave me a lot of good advice when we were starting out in the early days around things and that there might be a market for it.

01:04:07.700 --> 01:04:08.680
So thank you for that.

01:04:08.680 --> 01:04:09.860
You're welcome.

01:04:09.860 --> 01:04:10.600
It's going strong.

01:04:10.600 --> 01:04:11.400
It's a great show.

01:04:11.400 --> 01:04:12.960
I enjoy listening to the episodes.

01:04:12.960 --> 01:04:14.500
We're going to be back in the fall with new episodes.

01:04:14.500 --> 01:04:15.960
And then learnjango.com.

01:04:15.960 --> 01:04:16.880
That's my main website.

01:04:16.880 --> 01:04:21.600
If you want to learn Django, access books, lots of free tutorials, premium ones coming.

01:04:21.600 --> 01:04:23.280
That's sort of an all-in-one resource.

01:04:23.680 --> 01:04:32.260
And I think there's also a link to Django-news, which is a weekly Django newsletter with new news that's happening, new projects, new tutorials, not just mine.

01:04:32.260 --> 01:04:35.600
So that's something I've been doing with Jeff Triplett for a number of years now.

01:04:35.600 --> 01:04:38.000
And that's a good way to stay in tune with what's happening.

01:04:38.000 --> 01:04:40.260
Yeah, that's kind of an essential resource, I'd say.

01:04:40.260 --> 01:04:41.360
And then Button, Carlton.

01:04:41.500 --> 01:04:42.160
Yeah, so okay.

01:04:42.160 --> 01:04:46.440
So I've got a website and I've got a blog somewhere.

01:04:46.440 --> 01:04:50.080
So button, btn.dev, that'll be live in the autumn now.

01:04:50.080 --> 01:04:53.740
But you can follow me on Fosadon or the Fediverse.

01:04:54.260 --> 01:04:58.480
And on my website, there's an RSS feed, which you could subscribe to if you fancy that.

01:04:58.480 --> 01:05:06.700
My other big projects at the moment is working on a set of opinionated CRUD views for Django called Neapolitan, which is a bit of fun.

01:05:06.700 --> 01:05:08.300
I'm having a lot of fun with that.

01:05:08.300 --> 01:05:10.700
So watch my DjangoCon Europe talk for an introduction of that.

01:05:10.820 --> 01:05:18.120
And then I'm working on a package called DjangoTemplatePartials as well, which is about getting template fragments into the DjangoTemplate language, which again...

01:05:18.120 --> 01:05:19.540
I was going to ask you about that.

01:05:19.540 --> 01:05:20.740
I know.

01:05:20.740 --> 01:05:23.200
Now that he's not a fellow, he can do all the things he always wanted to.

01:05:23.200 --> 01:05:25.540
Yeah, when I started using this with...

01:05:25.540 --> 01:05:26.300
Oh, yes.

01:05:26.300 --> 01:05:34.220
And I'm like, man, you have got to come up with a way to reuse HTML almost like functions.

01:05:34.220 --> 01:05:35.520
So I came up with JinjaPartials.

01:05:35.520 --> 01:05:37.000
So what is yours called?

01:05:37.000 --> 01:05:38.380
DjangoTemplatePartials.

01:05:38.380 --> 01:05:39.120
TemplatePartials.

01:05:39.120 --> 01:05:39.880
DjangoTemplatePartials.

01:05:39.880 --> 01:05:40.440
Oh, oh.

01:05:40.620 --> 01:05:41.200
You need a spacer.

01:05:41.200 --> 01:05:43.900
I think I put a link in the notes.

01:05:43.900 --> 01:05:44.580
But yeah.

01:05:44.580 --> 01:05:45.220
Yeah, there you are.

01:05:45.220 --> 01:05:45.580
There you are.

01:05:45.580 --> 01:05:47.220
So that's my take.

01:05:47.220 --> 01:05:50.640
And it just enables you to define reusable components.

01:05:50.640 --> 01:05:54.660
There's a couple of pull requests open, which will just change the API there slightly.

01:05:54.660 --> 01:05:57.680
And then we'll start to think about rolling into Django.

01:05:57.680 --> 01:06:00.180
Hopefully for now, it's going to be Django 5.1.

01:06:00.180 --> 01:06:02.800
There's no chance of me getting in for 5.0 this summer.

01:06:02.800 --> 01:06:04.940
But it's the same idea.

01:06:04.940 --> 01:06:08.160
And the point with it is it's integrated with the Django template loader.

01:06:08.220 --> 01:06:12.580
So all you do in your view is change your template name variable.

01:06:12.580 --> 01:06:16.180
And you still return your template response, same as you always had with the context.

01:06:16.180 --> 01:06:18.500
There's no adjusting your view logic.

01:06:18.500 --> 01:06:20.580
It's almost transparent to the view layer.

01:06:20.580 --> 01:06:31.360
And there are, you know, I've seen people writing logic where they pass the HX vowels, which is where you pass extra parameters in your request from the client, which you could then specify the partial with.

01:06:31.360 --> 01:06:33.720
And then your view logic wouldn't change at all.

01:06:33.720 --> 01:06:35.940
That's out of scope for Django template partials.

01:06:35.940 --> 01:06:37.280
But it's a possibility.

01:06:37.280 --> 01:06:45.960
But the point being that you just, it's this for me or something like it is how Django wants you to do partials with the Django template language.

01:06:45.960 --> 01:06:48.720
Obviously with Jinja, there's an option as well with Django.

01:06:49.100 --> 01:06:52.540
Useful outside of HTMLX required for HTMLX, basically, right?

01:06:52.540 --> 01:06:53.020
Yeah.

01:06:53.020 --> 01:06:54.620
I mean, because what's the other way?

01:06:54.620 --> 01:07:00.320
The problem with it is you then have, if you don't have inline partials, you have to move it to a separate template.

01:07:00.320 --> 01:07:03.380
And then you have to include that template in the other template.

01:07:03.380 --> 01:07:05.940
And that's great at a certain level of complexity.

01:07:05.940 --> 01:07:08.080
But again, it's this locality behavior thing.

01:07:08.080 --> 01:07:12.960
When you're first starting, you don't want that heavy weight kind of in your creative flow.

01:07:12.960 --> 01:07:14.180
You're making progress.

01:07:14.180 --> 01:07:17.800
And all of a sudden, you have to put the brakes on to create a new file, move it open.

01:07:17.800 --> 01:07:19.400
What's the file name again?

01:07:19.400 --> 01:07:20.660
Oh, I've spelled it wrong.

01:07:20.660 --> 01:07:21.420
Oh, it didn't load.

01:07:21.420 --> 01:07:23.160
Oh, because it was in the wrong file.

01:07:23.160 --> 01:07:24.160
You don't want all of that.

01:07:24.160 --> 01:07:26.040
You just want inline that bit.

01:07:26.040 --> 01:07:27.300
Be reusable, please.

01:07:27.300 --> 01:07:28.040
Yeah, very cool.

01:07:28.040 --> 01:07:29.400
Yeah, this is different.

01:07:29.400 --> 01:07:32.480
Mine doesn't embrace the locality behavior as much as yours does.

01:07:32.480 --> 01:07:33.640
So people should check this out.

01:07:33.640 --> 01:07:34.140
This is interesting.

01:07:34.140 --> 01:07:36.000
Obviously, mine doesn't work with Django either.

01:07:36.000 --> 01:07:36.880
So it doesn't really matter.

01:07:37.080 --> 01:07:38.780
Well, it works with Jinja, though, right?

01:07:38.780 --> 01:07:40.020
It works with Jinja, right?

01:07:40.020 --> 01:07:40.620
Yeah, yeah, yeah.

01:07:40.620 --> 01:07:41.160
Right.

01:07:41.160 --> 01:07:45.340
So the Django templates have swappable backends.

01:07:45.340 --> 01:07:49.860
So you can use the Jinja backend to use Jinja templates with Django if that's your cup of tea.

01:07:49.860 --> 01:07:50.840
We got to end this podcast.

01:07:50.840 --> 01:07:57.100
But if you're looking at moving a Flask project over to Django, that would be a way to not touch

01:07:57.100 --> 01:07:58.740
the HTML very much, right?

01:07:58.740 --> 01:07:59.560
Yes, exactly.

01:07:59.560 --> 01:08:01.920
Because you could carry on using your same templates more.

01:08:01.920 --> 01:08:04.720
You might need one or two edits to the, what's it called?

01:08:04.720 --> 01:08:08.360
The Django environment, the Jinja environment or something to, I don't know.

01:08:08.360 --> 01:08:09.800
Thank you guys for being on the show.

01:08:09.800 --> 01:08:12.260
It's always a great time to catch up with you.

01:08:12.260 --> 01:08:13.000
Yeah, thank you for having us.

01:08:14.580 --> 01:08:17.280
This has been another episode of Talk Python to Me.

01:08:17.280 --> 01:08:19.120
Thank you to our sponsors.

01:08:19.120 --> 01:08:20.720
Be sure to check out what they're offering.

01:08:20.720 --> 01:08:22.140
It really helps support the show.

01:08:22.140 --> 01:08:24.280
Take some stress out of your life.

01:08:24.280 --> 01:08:29.760
Get notified immediately about errors and performance issues in your web or mobile applications with

01:08:29.760 --> 01:08:30.060
Sentry.

01:08:30.520 --> 01:08:35.060
Just visit talkpython.fm/sentry and get started for free.

01:08:35.060 --> 01:08:38.660
And be sure to use the promo code talkpython, all one word.

01:08:38.660 --> 01:08:40.360
Want to level up your Python?

01:08:40.360 --> 01:08:44.420
We have one of the largest catalogs of Python video courses over at Talk Python.

01:08:44.420 --> 01:08:49.600
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:08:49.600 --> 01:08:52.260
And best of all, there's not a subscription in sight.

01:08:52.260 --> 01:08:55.160
Check it out for yourself at training.talkpython.fm.

01:08:55.380 --> 01:08:59.840
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:08:59.840 --> 01:09:01.160
We should be right at the top.

01:09:01.160 --> 01:09:06.320
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:09:06.320 --> 01:09:10.520
and the direct RSS feed at /rss on talkpython.fm.

01:09:10.520 --> 01:09:13.940
We're live streaming most of our recordings these days.

01:09:13.940 --> 01:09:17.360
If you want to be part of the show and have your comments featured on the air,

01:09:17.360 --> 01:09:21.740
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:09:21.740 --> 01:09:23.640
This is your host, Michael Kennedy.

01:09:23.640 --> 01:09:24.920
Thanks so much for listening.

01:09:25.100 --> 01:09:26.100
I really appreciate it.

01:09:26.100 --> 01:09:28.000
Now get out there and write some Python code.

01:09:28.000 --> 01:09:30.220
You

01:09:30.220 --> 01:09:32.220
You

01:09:32.220 --> 01:09:34.220
You

01:09:34.220 --> 01:09:36.220
You

01:09:36.220 --> 01:09:38.220
You

01:09:38.220 --> 01:09:40.220
You

01:09:40.220 --> 01:09:42.220
You

01:09:42.220 --> 01:09:44.220
You

01:09:44.220 --> 01:09:46.220
You

01:09:46.220 --> 01:09:48.220
Thank you.

01:09:48.220 --> 01:10:18.200
Thank you.

