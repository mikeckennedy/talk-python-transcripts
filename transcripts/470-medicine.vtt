WEBVTT

00:00:00.001 --> 00:00:07.640
Python is special. It's used by the big tech companies, of course, but it's also used by those you would rarely classify as developers.

00:00:07.640 --> 00:00:15.120
On this episode, we get a look inside how Python is being used at a children's hospital to speed and improve patient care.

00:00:15.120 --> 00:00:22.900
We have Dr. Somak Roy here to share how he's using Python in his day-to-day job to help kids get well a little bit faster.

00:00:22.900 --> 00:00:28.440
This is Talk Python to Me, episode 470, recorded June 23rd, 2024.

00:00:29.280 --> 00:00:30.700
Are you ready for your host?

00:00:30.700 --> 00:00:31.540
There he is.

00:00:31.540 --> 00:00:34.980
You're listening to Michael Kennedy on Talk Python to Me.

00:00:34.980 --> 00:00:38.660
Live from Portland, Oregon, and this segment was made with Python.

00:00:38.660 --> 00:00:44.160
Welcome to Talk Python to Me, a weekly podcast on Python.

00:00:44.160 --> 00:00:45.900
This is your host, Michael Kennedy.

00:00:45.900 --> 00:00:53.380
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython, both on fosstodon.org.

00:00:53.380 --> 00:00:58.460
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.

00:00:58.560 --> 00:01:02.200
We've started streaming most of our episodes live on YouTube.

00:01:02.200 --> 00:01:09.820
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:10.380 --> 00:01:12.700
This episode is brought to you by Sentry.

00:01:12.700 --> 00:01:14.760
Don't let those errors go unnoticed.

00:01:14.760 --> 00:01:17.260
Use Sentry like we do here at Talk Python.

00:01:17.260 --> 00:01:20.620
Sign up at talkpython.fm/sentry.

00:01:21.280 --> 00:01:25.100
And it's brought to you by Posit Connect from the makers of Shiny.

00:01:25.100 --> 00:01:29.600
Publish, share, and deploy all of your data projects that you're creating using Python.

00:01:29.600 --> 00:01:36.280
Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto, Reports, Dashboards, and APIs.

00:01:36.280 --> 00:01:38.680
Posit Connect supports all of them.

00:01:38.680 --> 00:01:43.040
Try Posit Connect for free by going to talkpython.fm/Posit.

00:01:43.420 --> 00:01:44.360
P-O-S-I-T.

00:01:45.080 --> 00:01:46.800
So, Mac, welcome to talkpython.fm.

00:01:46.800 --> 00:01:47.840
Awesome to have you here.

00:01:47.840 --> 00:01:50.520
Hey, thank you, Michael, for the introduction.

00:01:50.520 --> 00:01:52.160
I'm here.

00:01:52.160 --> 00:01:52.940
Excited.

00:01:53.520 --> 00:01:58.680
Yeah, I'm pretty excited to be talking about medicine and all the stuff that you guys are

00:01:58.680 --> 00:01:59.420
doing with Python.

00:01:59.420 --> 00:02:04.380
And I really like these kinds of shows because I think it's important to highlight that Python

00:02:04.380 --> 00:02:09.360
is not just for web developers and pure data science machine learning people, but it's used

00:02:09.360 --> 00:02:13.700
by this huge spectrum of people doing all sorts of interesting stuff and solving real problems

00:02:13.700 --> 00:02:14.180
with it, right?

00:02:14.180 --> 00:02:16.680
And it sounds like you fall pretty solidly in that category.

00:02:16.680 --> 00:02:17.760
Yeah, absolutely.

00:02:17.760 --> 00:02:23.980
It was like Python has been sort of this discovery as I've gone through my career as a physician.

00:02:23.980 --> 00:02:29.640
And it's interesting how to begin with when computer science initially when I was training

00:02:29.640 --> 00:02:34.760
and growing up, it was hard to imagine medicine and computer science sort of being hand in hand

00:02:34.760 --> 00:02:35.060
together.

00:02:35.060 --> 00:02:41.100
But now I think things have progressed and there's a lot of technology that's now in medicine that

00:02:41.100 --> 00:02:43.260
allows you to do all kinds of things.

00:02:43.260 --> 00:02:51.380
And of course, as I've discovered Python, it brings in kind of the toolkit and the ability

00:02:51.380 --> 00:02:57.880
to be able to achieve and solve problems in a way that I think it's not been envisioned before.

00:02:57.880 --> 00:02:59.340
So it's a very exciting time.

00:02:59.340 --> 00:03:01.300
Yeah, it is a very exciting time.

00:03:01.300 --> 00:03:03.160
And I think it's just getting better and better.

00:03:03.160 --> 00:03:06.960
Before we get too far into this, tell people a quick bit about yourself, quick introduction.

00:03:07.320 --> 00:03:07.840
Yeah, absolutely.

00:03:07.840 --> 00:03:09.820
So I'm Soma Croy.

00:03:09.820 --> 00:03:13.020
I am a molecular pathologist.

00:03:13.020 --> 00:03:23.720
It's a type of physician who deals with looking at the genome of either a patient or a patient's tissue.

00:03:23.720 --> 00:03:33.440
And we essentially look at all of these things in a way to be able to help manage a patient's treatment.

00:03:34.320 --> 00:03:42.240
In my current position, I am an associate professor and the director of molecular pathology at Cincinnati Children's Hospital.

00:03:42.240 --> 00:03:48.720
My lab is a clinical lab that is under the division of pathology.

00:03:49.140 --> 00:03:58.380
We do a lot of work that pertains to kids in terms of helping them diagnose and manage pediatric cancer,

00:03:58.380 --> 00:04:03.080
as well as infectious disease that happened in this age.

00:04:04.420 --> 00:04:12.820
I mean, molecular pathology, I essentially trained back in India as a physician, did my MD.

00:04:12.820 --> 00:04:15.520
Then I came here, started in Pittsburgh.

00:04:15.520 --> 00:04:19.300
I did my training in pathology and lab medicine.

00:04:19.300 --> 00:04:21.840
I specialized in molecular pathology.

00:04:21.840 --> 00:04:23.880
Then I was there in Pittsburgh.

00:04:23.880 --> 00:04:26.940
I worked for some time and then opened in Cincinnati Children's.

00:04:27.660 --> 00:04:28.180
Excellent.

00:04:28.180 --> 00:04:36.260
Do you work directly with patients or do you get samples sent to you from other doctors and then you process them and analyze them?

00:04:36.260 --> 00:04:37.640
Yeah, that's a good question.

00:04:37.640 --> 00:04:40.680
So I do not work with patients directly.

00:04:40.900 --> 00:04:48.820
It's a kind of, it's a subspecialty in medicine where my lab works with the samples that have been collected in the patient,

00:04:48.820 --> 00:04:53.900
either from the OR or a procedure or from the radiology suite.

00:04:54.420 --> 00:04:59.100
And then we work on that tissue or the blood sample or a bone marrow sample that comes to us.

00:04:59.100 --> 00:05:05.480
And yes, then all the testing that we perform is off from that specimen.

00:05:05.480 --> 00:05:12.360
And then once we generate the clinical reports back, they go back to the patient's chart and to the patients,

00:05:12.360 --> 00:05:16.120
to the clinicians who are treating and managing them.

00:05:16.120 --> 00:05:24.900
And then that way it helps how, you know, how they're able to then, you know, get a diagnosis and then give the appropriate treatment and the management to the patient.

00:05:24.900 --> 00:05:25.720
Yeah, excellent.

00:05:25.720 --> 00:05:30.920
So, yeah, you must see a lot of, a lot of different stuff flying, flying through the lab you have to analyze.

00:05:30.920 --> 00:05:38.660
So how did you go from I'm studying medicine to I'm writing Python code and running automation?

00:05:38.660 --> 00:05:41.900
And what was that process like?

00:05:41.900 --> 00:05:45.760
Well, that was a, that was an interesting journey for me.

00:05:45.760 --> 00:05:59.760
So before medicine and biology came into my life, I started off, it was second grade, I believe, when, you know, my dad, he got me a computer at that time,

00:05:59.760 --> 00:06:03.060
which is a, you know, 64 kilobytes small machine.

00:06:03.620 --> 00:06:14.840
And it was, I think it was for Toshiba MSX computers where you can, you could write like GW basic code and, you know, some, some basic, you know, predefined hex code.

00:06:14.840 --> 00:06:16.900
And you can, you know, run small applications on that.

00:06:16.900 --> 00:06:18.140
That was my starting point.

00:06:18.140 --> 00:06:20.640
It was, it was super exciting for me.

00:06:20.640 --> 00:06:28.280
And I think from there on the journey went into, as I went through, you know, school, you know, high school and then college.

00:06:29.000 --> 00:06:35.340
You know, medicine was, I would say, you know, biology was something that intrigued me.

00:06:35.340 --> 00:06:42.900
And at the same time, I also got interested in genetics, looking at DNA sequences.

00:06:42.900 --> 00:06:55.680
And, you know, just, I had a natural sort of, you know, liking for the fact that I could, you know, study about the cell or the genome, the DNA and RNA.

00:06:55.680 --> 00:07:02.020
But also I realized that there was a lot of math and competition that you can use to sort of slice and dice data.

00:07:02.020 --> 00:07:06.780
And at that time, you know, the place that I grew in India was a very small place.

00:07:06.780 --> 00:07:10.760
So we didn't have access to resources like internet.

00:07:10.760 --> 00:07:15.040
So I, when I, my exposure to internet was when I actually went to med school for the first time.

00:07:15.040 --> 00:07:17.180
Oh yeah, you can actually connect to like other computers.

00:07:18.080 --> 00:07:21.100
So that's when I started my medicine.

00:07:21.100 --> 00:07:26.800
So obviously I did, I did my training in medicine in medical school back in India.

00:07:26.800 --> 00:07:30.200
That's when I started to, you know, connect and talk to a lot of people.

00:07:30.200 --> 00:07:38.020
And some of my friends who actually were already, you know, writing apps at that time using like, you know, Java applets on browser.

00:07:38.020 --> 00:07:47.220
And so I started to make some connection in terms of, you know, images and how, you know, learning how some of those things can be used in medicine.

00:07:47.220 --> 00:07:52.500
And so radiology, during my radiology rotation, that was my first real life.

00:07:53.860 --> 00:08:00.400
It was my realization that actually in medicine, you can use computers a lot to handle a lot of these images, x-rays, CT scans.

00:08:00.400 --> 00:08:06.680
And I think as it went on, when I came to the U.S., that's where, you know, it really started off.

00:08:06.680 --> 00:08:18.680
During my residency in pathology here, I actually connected with my mentors, Dr. Anil Parwani and Dr. Leland Pantanois.

00:08:18.680 --> 00:08:22.840
They are well-known pathology informaticists.

00:08:22.840 --> 00:08:30.540
They've spent a lot of their time sort of dwelling in the world of pathology, medicine, and, you know, computer science.

00:08:30.540 --> 00:08:42.980
And so that is when I could actually realize that, yes, you can, you know, do a lot of innovative stuff by, you know, developing apps, algorithms, analyzing, you know, either image data or molecular data.

00:08:42.980 --> 00:08:52.740
And so that is when I started to go into designing an app, which was a very simple web app that was a project.

00:08:52.740 --> 00:08:54.160
I was working with one of my mentors.

00:08:54.160 --> 00:09:04.020
And so the idea was that, you know, we had a lot of these pathology images and we wanted to create a little browser app that would display these images as thumbnails.

00:09:04.020 --> 00:09:07.360
And then clicking that could enlarge the image, shoulder the display.

00:09:07.360 --> 00:09:13.440
And so I used, at that time, it was .NET framework to be ASP.NET.

00:09:13.440 --> 00:09:22.400
And so, you know, created a little app using Visual Basic, slowly I then migrated using C# in the same environment.

00:09:22.400 --> 00:09:29.060
And that time I started my advanced fellowship training in molecular pathology.

00:09:29.060 --> 00:09:33.560
That's when I, you know, that's when I started there.

00:09:33.560 --> 00:09:40.080
That's when I realized there's a lot of genomic sequencing data where essentially you're dealing with a lot of strings and numbers.

00:09:40.080 --> 00:09:44.160
And, you know, you have to make a lot of sense in terms of, you know, this large volume of data that comes in.

00:09:44.160 --> 00:09:49.520
If we're working with, so the kind of data that you're working with for, say, this genetic stuff.

00:09:49.520 --> 00:09:50.160
Yes.

00:09:50.820 --> 00:09:58.220
For us, for when you're studying the genomics, so how much data is in, say, one strand of DNA?

00:09:58.220 --> 00:09:59.940
How much of that do you actually care about?

00:09:59.940 --> 00:10:03.740
Like, give me, give us a sense of sort of how much data we're talking.

00:10:03.740 --> 00:10:04.480
Right.

00:10:04.480 --> 00:10:07.800
So it really depends on what is being done.

00:10:07.800 --> 00:10:15.360
And so when we look at, so when we talk about genomics, it is really designed on how the experiment is done.

00:10:15.540 --> 00:10:23.940
So, for example, if we just simply look at the entire human genome, we are talking about three billion alphabets.

00:10:23.940 --> 00:10:30.740
Essentially, it's, you know, the combination of four alphabets, A, T, and A, T, G, and C.

00:10:30.740 --> 00:10:37.280
So these are the four nucleotides of the DNA sequence, and the RNA has one additional one, which replaces A.

00:10:37.280 --> 00:10:40.620
But the idea is that it's a mix and match of these sequence.

00:10:40.620 --> 00:10:51.040
And so if you think about the entire human genome as a single thread of A, T, G, and Cs in various combination, you're looking at three billion alphabets.

00:10:51.040 --> 00:11:05.840
And so what happens is when we do these sequencing experiments where you would take, you know, the DNA molecule from a bunch of cells within a tissue, and then either we read all the three billion base pairs.

00:11:06.440 --> 00:11:13.940
And typically, the way the sequencing is done is you read all of these sequences and, you know, from many molecules.

00:11:13.940 --> 00:11:28.140
And so you'll have multiple copies of that when you're, you know, translating from a molecular, like a chemical molecular structure to a DNA sequence on, say, a flat file on a, you know, in a file system.

00:11:28.140 --> 00:11:36.780
And so if you look at that large scale of data, like the entire genome, we are talking of, you know, hundreds of gigabytes, maybe even terabyte worth of data.

00:11:37.440 --> 00:11:47.660
Then there are other more practical approaches when we look at the genome, when we, and especially this is something that we use for day-to-day patient care, which is referred to as targeted sequencing.

00:11:47.660 --> 00:12:02.840
What that means is instead of the three billion base pairs, we focus on those regions of the human genome that are of most pertinent use, or, you know, that we, at least as the current field of genomics, that we understand what to do with it.

00:12:03.040 --> 00:12:18.840
And so there are certain genes that, at least in the space I work with, cancer genomics, that are, I would say, close to about maybe 2,000 to 2,000 genes, which are known to be cancer-associated.

00:12:18.840 --> 00:12:46.660
And of that, roughly about 500 to 700 genes, where we know that, you know, they have, they've been studied and demonstrated that there are certain types of abnormalities in those genes in terms of the sequence changes, that they have certain meaning from, you know, in context of tumor in order to make a diagnosis, or to understand if the tumor is aggressive or benign, or if there are certain treatments that could be applied to those tumors.

00:12:46.660 --> 00:12:54.500
And that's specifically linked to the kind of sequence change you see in those, in that region of the genome.

00:12:54.500 --> 00:13:04.380
And that, you know, we are talking about, practically speaking, and we talk about, you know, the targeted testing that we do, it's a very small fraction of the large genome.

00:13:04.740 --> 00:13:18.900
Typically, there's a term known as exome sequencing, and exome sequencing refers to sequencing all those regions of the human genome where it at least codes, you know, encodes for one or the other anodated gene.

00:13:18.900 --> 00:13:22.040
That is typically about 1 to 2% of the entire gene.

00:13:22.040 --> 00:13:31.960
And so if we further narrow that down to about say 500, 600 genes, that one would typically sequence for practical cancer molecular testing.

00:13:31.960 --> 00:13:40.760
That's, I would say that's probably about 10th, maybe slightly less than that of the genome, but it's a very high yield from a clinical standpoint.

00:13:40.760 --> 00:13:41.480
Sure.

00:13:41.480 --> 00:13:46.920
Because the most alteration you will find that would make a, that would help with the clinical treatment is high.

00:13:46.920 --> 00:14:08.260
So, if you're going to talk about that data set, that is, you know, it's complex in a different way, because just looking at the raw sequence data would be, you know, somewhere in, you know, I would say 1 to 20 gigs from a single, you know, sequence file, but it entirely depends on how deep we go.

00:14:08.260 --> 00:14:17.620
So, for example, when we talk about sequencing, as I mentioned before, when we sequence a molecule, we can sequence it either at certain depths.

00:14:17.620 --> 00:14:22.940
That means what level of redundancy you want to be able to read that molecule.

00:14:22.940 --> 00:14:26.540
Sometimes we read the molecules, you know, 20 to 30 times.

00:14:26.540 --> 00:14:31.580
So that's referred to as 30x, or sometimes we'll read that, you know, 500 times.

00:14:31.580 --> 00:14:33.140
So that would be 500x.

00:14:33.880 --> 00:14:38.440
Do you do that because you want to make sure you don't misread the gene?

00:14:38.440 --> 00:14:38.640
Yes.

00:14:38.640 --> 00:14:40.200
So, right.

00:14:40.200 --> 00:14:52.880
So what happens is the greater the depth of sequence, so typically for, you know, such large panels that we sequence in a clinical setting, we usually target about 1500x to 2000x.

00:14:52.880 --> 00:14:54.820
That means we're reading that 2000 times.

00:14:54.820 --> 00:15:03.120
So the more the depth it is, the possibility of identifying a certain variation or genomic alteration that is present at a very low level.

00:15:03.120 --> 00:15:10.000
For example, say, you know, you have a tumor cell and within that, only 2% of the cells have this mutation.

00:15:10.000 --> 00:15:10.860
Others don't.

00:15:10.920 --> 00:15:19.900
And so when you're looking for or hunting for these, you know, needles in a haystack, you really want to maximize the amount of depth you have to be able to pick those things up.

00:15:19.900 --> 00:15:21.980
So it really depends on how deep we go.

00:15:21.980 --> 00:15:23.940
The more deep we go, the more data it is.

00:15:23.940 --> 00:15:27.780
And so it can scale up to, you know, almost several hundred gigabytes.

00:15:28.440 --> 00:15:28.640
Sure.

00:15:28.640 --> 00:15:38.440
Yeah, I've always wondered about how you can go and read somebody's genetics and then not make a mistake when you're, you know, reading, using chemicals to read.

00:15:38.440 --> 00:15:42.020
So, but it's really ridiculous how much data is there.

00:15:42.020 --> 00:15:47.100
Off by one, a C for a G or whatever is a bad thing, right?

00:15:47.100 --> 00:15:47.680
Right.

00:15:47.800 --> 00:16:04.240
But it is, you know, I think as the technology has matured, there's, you know, there's always, there's nothing, there's nothing 100%, you know, in terms of the error profile for the enzyme that has been used to work, the technology that is reading the actual fluorescence, converting that to, you know, signal.

00:16:04.240 --> 00:16:12.040
There's always statistical values and probabilities that are associated with, you know, what is the probability that it is wrong or, you know, incorrect or correct.

00:16:12.460 --> 00:16:21.180
But within that, you know, frame and where the current technology is, it's pretty accurate for, if not all, you know, many of the regions of the genome.

00:16:21.180 --> 00:16:23.720
And so it's mind-baffling how it works.

00:16:23.720 --> 00:16:26.400
Yeah, it's, it really is quite amazing.

00:16:26.400 --> 00:16:29.360
It's one of the modern marvels of science for sure.

00:16:29.360 --> 00:16:30.220
It is, it is.

00:16:30.220 --> 00:16:34.260
This portion of Talk Python to Me is brought to you by Sentry.

00:16:34.260 --> 00:16:35.360
Code breaks.

00:16:35.360 --> 00:16:36.680
It's a fact of life.

00:16:36.680 --> 00:16:38.820
With Sentry, you can fix it faster.

00:16:39.400 --> 00:16:44.420
As I've told you all before, we use Sentry on many of our apps and APIs here at Talk Python.

00:16:44.420 --> 00:16:50.240
I recently used Sentry to help me track down one of the weirdest bugs I've run into in a long time.

00:16:50.240 --> 00:16:51.200
Here's what happened.

00:16:51.200 --> 00:17:02.960
When signing up for our mailing list, it would crash under a non-common execution pass, like situations where someone was already subscribed or entered an invalid email address or something like this.

00:17:03.320 --> 00:17:08.960
The bizarre part was that our logging of that unusual condition itself was crashing.

00:17:08.960 --> 00:17:12.160
How is it possible for our log to crash?

00:17:12.160 --> 00:17:14.740
It's basically a glorified print statement.

00:17:14.740 --> 00:17:16.440
Well, Sentry to the rescue.

00:17:16.660 --> 00:17:22.900
I'm looking at the crash report right now, and I see way more information than you'd expect to find in any log statement.

00:17:22.900 --> 00:17:25.940
And because it's production, debuggers are out of the question.

00:17:25.940 --> 00:17:37.840
I see the traceback, of course, but also the browser version, client OS, server OS, server OS version, whether it's production or Q&A, the email and name of the person signing up.

00:17:38.000 --> 00:17:42.720
That's the person who actually experienced the crash, dictionaries of data on the call stack and so much more.

00:17:42.720 --> 00:17:43.660
What was the problem?

00:17:43.660 --> 00:17:53.340
I initialized the logger with the string info for the level rather than the enumeration dot info, which was an integer based enum.

00:17:53.340 --> 00:17:59.920
So the logging statement would crash saying that I could not use less than or equal to between strings and ints.

00:17:59.920 --> 00:18:01.320
Crazy town.

00:18:01.780 --> 00:18:07.520
But with Sentry, I captured it, fixed it, and I even helped the user who experienced that crash.

00:18:07.520 --> 00:18:08.960
Don't fly blind.

00:18:08.960 --> 00:18:10.620
Fix code faster with Sentry.

00:18:10.620 --> 00:18:14.660
Create your Sentry account now at talkpython.fm/sentry.

00:18:14.660 --> 00:18:26.980
And if you sign up with the code TALKPYTHON, all capital, no spaces, it's good for two free months of Sentry's business plan, which will give you up to 20 times as many monthly events as well as other features.

00:18:28.460 --> 00:18:49.480
So I think you're a little bit unusual, a little bit weird in the sense that you got into as your first sort of programming thing to bring to apply to your science and medicine side of things was C-sharp rather than or on vb.net rather than something like Python or R or something.

00:18:49.480 --> 00:18:53.660
So maybe talk a bit about that experience, contrast it with Python.

00:18:53.940 --> 00:18:55.820
Like, why do you end up moving to Python?

00:18:55.820 --> 00:18:56.580
Yeah.

00:18:56.580 --> 00:19:13.620
So, you know, I think the reason I started using vb.net C-sharp was, I would say, most, it was probably influenced a lot by, at the time when I was doing, you know, my med school in India as to, you know, what was available at that time.

00:19:13.660 --> 00:19:18.360
It was not something I would just go to the internet and like start getting a lot of resources as, you know, one would do now.

00:19:18.360 --> 00:19:23.040
So it was pretty much like, you know, this is the book I have available and that's about the document.

00:19:23.040 --> 00:19:23.460
Okay.

00:19:23.460 --> 00:19:24.180
That's the only thing.

00:19:24.180 --> 00:19:24.680
So you start.

00:19:24.680 --> 00:19:24.940
Yeah.

00:19:24.940 --> 00:19:26.100
That's what I use.

00:19:26.500 --> 00:19:26.780
Right.

00:19:26.780 --> 00:19:40.540
And then, but the thing is when I started applying C-sharp and it was mostly C-sharp and a little bit of C++ that I, you know, started to get into like with some of the non-genetic stuff initially, well, the project I'm working on.

00:19:40.880 --> 00:19:58.060
It was not too bad because I was able to accomplish most of the task, but then once I got into genomics and I came, so the way, you know, professionals who get into genomics and molecular pathology, there are a couple different routes.

00:19:58.060 --> 00:20:11.140
So either the physician, you know, people who are physician trained and they kind of have a formal background in medicine and they kind of, you know, do a specialized training and then they, you know, they become molecular pathologists after getting more certified.

00:20:11.140 --> 00:20:18.980
There is the other route, which is more of a research background where sort of, you know, people have spent a lot of their time, you know, in really deep research.

00:20:18.980 --> 00:20:27.060
They've, you know, they've learned a lot of genomics hands-on either from a computational background or from a more laboratory, like a wet laboratory background.

00:20:27.560 --> 00:20:34.940
And so they've spent, you know, they've obviously done their PhDs and postdoc training and then sort of, you know, come into the molecular pathology field.

00:20:34.940 --> 00:20:42.720
You know, people starting there tend to have more of a, you know, a formal computational training.

00:20:42.720 --> 00:20:52.380
So they're getting, you know, they usually get, obviously when you start with a research lab, R, Python are sort of like the most common tools that are used for any kind of data analysis and data set visualization.

00:20:52.380 --> 00:20:57.440
Coming from more of a foreign medicine background, you know, typically in real,

00:20:57.440 --> 00:21:11.460
you know, when we, you know, get training in, you know, clinical informatics or pathology informatics, often it is very, you know, kind of a, I would not say corporate base, a very, you know, formal application development space.

00:21:11.460 --> 00:21:17.820
So it's a lot of, you know, you know, Windows base, .NET, C-sharp, that kind of thing.

00:21:17.820 --> 00:21:18.120
So

00:21:18.120 --> 00:21:19.880
Standard enterprise stack.

00:21:19.880 --> 00:21:20.220
Yeah.

00:21:20.360 --> 00:21:21.760
Java or .NET is a choice.

00:21:21.760 --> 00:21:21.760
Right.

00:21:21.760 --> 00:21:22.260
Yeah.

00:21:22.260 --> 00:21:22.260
Right.

00:21:22.260 --> 00:21:22.760
Right.

00:21:22.760 --> 00:21:22.960
Yeah.

00:21:22.960 --> 00:21:23.360
Okay.

00:21:23.360 --> 00:21:23.860
Yeah.

00:21:23.860 --> 00:21:31.060
In bioinformatics, I mean, at least in genomics, bioinformatics, you know, kind of the ecosystem of tools available, it's, it's a, it's a mishmash of everything.

00:21:31.060 --> 00:21:39.840
It's, there's, for anything which is very competition intensive, like when you're trying to align sequences to the human genome, those are very intensive tasks.

00:21:39.840 --> 00:21:50.280
And typically it's a lot of, you know, C, C++, Java that's involved in some of these very mainstream tools that are available.

00:21:50.280 --> 00:21:54.580
More recently, I think we are seeing Rust coming into the picture as well.

00:21:54.580 --> 00:21:55.920
There's some applications.

00:21:55.920 --> 00:22:04.440
And then of course, you know, Python and R, you know, like the predominant, I think, tool sets, the programming language that are used to solve all of these problems.

00:22:04.440 --> 00:22:32.100
So when I sort of started my molecular pathology fellowship and I got into, now I had to do this project that involved, you know, manipulating all the sequence data to a point where we will be able to develop an application that would help sort of, you know, it's a web-based application that could help, you know, for other pathologists and faculty to read that sequencing data and, you know, digest in a very way that's easy for them to look at it.

00:22:32.100 --> 00:22:36.780
Rather than going to the Linux, you know, terminal and opening up like, you know, raw files and things like that.

00:22:36.780 --> 00:22:41.280
So I used, that was my first project was to use C# in that context.

00:22:41.280 --> 00:22:52.260
But I quickly realized that there was a lot of these algorithms that were natively either written in R or Python and then having to, you know, incorporate those functionalities was not as easily possible.

00:22:52.260 --> 00:22:55.200
So I had to rewrite a lot of those things in C# primarily.

00:22:55.200 --> 00:23:00.900
You know, it was a good learning curve, but I think from a main primitive perspective was getting really difficult.

00:23:00.900 --> 00:23:08.080
And so that's when the realization was that I think the combination of Linux and Python was, you know, I had to move towards that.

00:23:08.080 --> 00:23:09.340
Yeah.

00:23:09.340 --> 00:23:16.260
C# probably from the timeframe that you're thinking about, didn't really have a great package manager story, not to the same degree that the Python does.

00:23:16.260 --> 00:23:19.260
Although they do pretty, they do pretty good now over in the land.

00:23:19.260 --> 00:23:19.760
Right.

00:23:19.760 --> 00:23:20.260
Right.

00:23:20.260 --> 00:23:20.760
Yeah.

00:23:20.760 --> 00:23:21.260
All right.

00:23:21.260 --> 00:23:26.940
So a good question from Chris in the audience says, is there a reason to use Python specifically?

00:23:26.940 --> 00:23:29.940
Like, are there some special sauce packages that make it attractive?

00:23:29.940 --> 00:23:31.940
It sounds like that's kind of what you were getting at.

00:23:31.940 --> 00:23:37.120
You found more solutions to these algorithms than, you know, available in Python than in C#?

00:23:37.120 --> 00:23:38.120
Yeah.

00:23:38.120 --> 00:23:39.120
Or whatever languages.

00:23:39.120 --> 00:23:40.120
Yeah.

00:23:40.120 --> 00:23:41.120
Right.

00:23:41.120 --> 00:23:43.300
So I think, I mean, I think the simple answer is yes.

00:23:43.300 --> 00:23:49.300
I think the community and the amount of work that has been done in this particular space with genomics.

00:23:49.300 --> 00:24:05.480
I mean, when you are really searching for applications, it kind of falls into these three categories of, you know, anything which is a high performance component, you know, program that is usually in the Rust, in a C++, C, a lot of, you know, of those languages, a little bit of Rust and Java.

00:24:05.480 --> 00:24:18.700
And then the other bin is essentially kind of, you know, split up into Python and R. I think for me, Python was, and I think I'm sure others have shared the same way where it's almost like, wow, this is amazing.

00:24:18.700 --> 00:24:23.700
Like coming from C#, it was a little bit of a change because there's no more, like, you know, curly braces.

00:24:23.700 --> 00:24:26.700
Think about the whole thing.

00:24:26.700 --> 00:24:28.700
Did you miss your semicolons?

00:24:28.700 --> 00:24:29.700
Kind of.

00:24:29.700 --> 00:24:35.700
Like even now, sometimes when I write like a little bit of JavaScript, I feel like, oh, yeah, okay.

00:24:35.700 --> 00:24:36.700
This is my term.

00:24:36.700 --> 00:24:37.700
Exactly.

00:24:37.700 --> 00:24:39.700
But, you know, not too bad.

00:24:39.700 --> 00:24:48.100
I think what I got onto was like the simplicity of the language and how powerful it was when, like, if I'm thinking about, you know, you know, I'm not too bad.

00:24:48.100 --> 00:25:09.100
I think about, you know, it was interesting when I had to do something like there was an algorithm where I had to parse out certain, you know, strings in a way where it required some known workflows that we use to do, like, variant annotations when we are toss referencing databases and putting them together.

00:25:09.100 --> 00:25:16.100
You know, when you look for, like, you know, when you look for C# packages, I mean, there's really nothing there for native YouTube.

00:25:16.100 --> 00:25:18.100
So you have to write a lot of those things.

00:25:18.100 --> 00:25:23.100
In Python, it's the amount of time that is spent in developing those things is much faster.

00:25:23.100 --> 00:25:32.100
And the development time itself is quick because you either get an idea of somebody who's already done the work or there's a more formal package that you can use.

00:25:32.100 --> 00:25:38.100
So I think initially when I started off, BioPython was a very interesting collection of packages.

00:25:38.100 --> 00:25:47.100
I think it was, like, you know, a tool suite essentially written to, you know, to have all these functions available for very common day-to-day tasks.

00:25:47.100 --> 00:25:57.100
You know, I want to query a certain region of the, you know, bam file or I want to parse out certain things in the fastq file to look at, you know, some of the sequences or doing, you know,

00:25:57.100 --> 00:26:05.100
counting number of sequences in a given file and, you know, getting read counts, things like that was, it's all out of the box.

00:26:05.100 --> 00:26:09.100
And so that was sort of like the first thing to go about, this is amazing.

00:26:09.100 --> 00:26:13.100
I mean, you just say somebody's already done the work and just putting on top of it.

00:26:13.100 --> 00:26:17.100
So instead of creating these, I'll just like use those.

00:26:17.100 --> 00:26:18.100
Perfect.

00:26:18.100 --> 00:26:19.100
Right.

00:26:19.100 --> 00:26:21.100
So that was one.

00:26:21.100 --> 00:26:25.100
And the other motivation to use Python was, you know, say, for example, why not R?

00:26:25.100 --> 00:26:27.100
You know, why Python?

00:26:27.100 --> 00:26:30.100
Because R is a very rich ecosystem in, you know, at least in Genomics and Visualization.

00:26:30.100 --> 00:26:42.100
So I think the second thing was in terms of the idea that I was working on was having to develop a web application and all of these bioinformatics, you know,

00:26:42.100 --> 00:26:44.100
toolings and algorithms running sort of in the back end.

00:26:44.100 --> 00:26:49.100
And so at that time, it was like, okay, well, you know, Python, I've not heard much about in terms of web application.

00:26:49.100 --> 00:26:53.100
Mostly it was, you know, again, this big, like, you know, C#, .NET.

00:26:53.100 --> 00:26:56.100
That was why I started off, you know, with that.

00:26:56.100 --> 00:27:00.100
But then at that time, you know, there was Django and then Flask was sort of coming in.

00:27:00.100 --> 00:27:03.100
It was a very minimalistic, you know, sort of application.

00:27:03.100 --> 00:27:04.100
So I started focusing on that.

00:27:04.100 --> 00:27:11.100
It was very easy with Flask to, you know, get up and running with very simple, you know, applications to do that.

00:27:11.100 --> 00:27:15.100
I didn't try much into Django just because it was too bloated for me.

00:27:15.100 --> 00:27:17.100
But, you know, Flask was great.

00:27:17.100 --> 00:27:24.100
And then what I realized was you can create a simple web application, but then at the same time, you can use all your, you know,

00:27:24.100 --> 00:27:28.100
Biopithons and all the wonderful biopithetics packages in the back end.

00:27:28.100 --> 00:27:31.100
So it's like a single language that lets you do both.

00:27:31.100 --> 00:27:33.100
And so I was like, this is great.

00:27:33.100 --> 00:27:38.100
It was just, I don't have to go anywhere to learn, you know, a third or a fourth or a fifth different program language.

00:27:38.100 --> 00:27:40.100
And this just gets the job done.

00:27:40.100 --> 00:27:41.100
Yeah.

00:27:41.100 --> 00:27:45.100
Keeping in mind that you are actually main, your main job is medicine, not programming, right?

00:27:45.100 --> 00:27:50.100
It's not like you're a CS person who's just all after, out to learn all the languages, right?

00:27:50.100 --> 00:27:51.100
Right, right, right.

00:27:51.100 --> 00:28:04.100
So that, that definitely is, and again, that's a, that's a huge, you know, I would say I'm, again, as you said, I'm in a, I'm sort of in an unusual position where I'm, you know, a physician, but I also do a lot of these application developments.

00:28:04.100 --> 00:28:11.100
So that certainly is an important point in terms of how much time I have to be able to develop these prototypes.

00:28:11.100 --> 00:28:26.100
And then obviously, you know, typically the way it works is at least right now here, you know, where I am currently working, I have an excellent and amazing team of developers and bioinformations who really do a lot of the development work on the front and back end.

00:28:26.100 --> 00:28:33.100
And so for me to be able to take additional time out of my, you know, the clinical and the patient care work is limited.

00:28:33.100 --> 00:28:40.100
So if I can get whatever prototype I'm thinking of or developing the application fast, then, you know, that's, that's what I'm going for.

00:28:40.100 --> 00:28:46.100
And so you can hand it off to the team and let them polish it up and product, make it production ready, basically.

00:28:46.100 --> 00:28:47.100
Yeah.

00:28:47.100 --> 00:28:48.100
Yeah.

00:28:48.100 --> 00:28:48.100
Yeah.

00:28:48.100 --> 00:29:05.100
I was wondering how much time of your, your job do you get to spend on these kinds of things, you know, finding new packages, optimizing or improving the ways that you're working on stuff versus just sort of handing it off to the folks you work with and, and keeping, you know, focus more on the medicine side.

00:29:05.100 --> 00:29:06.100
Yeah.

00:29:06.100 --> 00:29:10.100
So, it, you know, that, that, I think it's a good question.

00:29:10.100 --> 00:29:19.100
I think it's, it's evolved over time as I have, you know, being sort of, you know, when I was in training and then being a faculty and then, you know, faculty in this new position.

00:29:19.100 --> 00:29:27.100
Um, you know, one of the things I did was as part of my, certification was to, you know, to get board certified in clinical informatics.

00:29:27.100 --> 00:29:35.100
That's a discipline by itself that, you know, involves, a lot of, you know, it's a very broad field in terms of, you know, informatics and healthcare.

00:29:35.100 --> 00:29:38.100
And then one of the buckets there is, you know, software development.

00:29:38.100 --> 00:29:43.100
And so I was, you know, I, I was quite interested sort of in, in that field.

00:29:43.100 --> 00:29:57.100
And so most of my time in terms of being able to, you know, devote to, you know, finding new packages or, trying to, you know, write up an application that could solve a problem or coming up with prototypes.

00:29:57.100 --> 00:30:01.100
Or it was done in a way that sort of aligned with the work I was doing.

00:30:01.100 --> 00:30:09.100
And so it would be days when I'm on clinical service where I'm mostly, you know, working on sort of with, you know, with, patient care related matters.

00:30:09.100 --> 00:30:12.100
So those weeks would be, you know, obviously, very busy.

00:30:12.100 --> 00:30:19.100
I would have, you know, I would wake up at like extremely early in the morning, spend the first two hours, four to six AM just, you know, working on this.

00:30:19.100 --> 00:30:21.100
And then I get back to like, you know, the critical world.

00:30:21.100 --> 00:30:23.100
And then there will be weeks when I'm off clinical service.

00:30:23.100 --> 00:30:27.100
So I, you know, I'm not responsible for any, patient care related work.

00:30:27.100 --> 00:30:41.100
And those weeks would be where I would spend time in terms of, you know, doing these, you know, investigating into sort of some of these packages and, you know, coming up with new ideas, exploring what is all, you know, what is available in terms of certain problems that I've been doing.

00:30:41.100 --> 00:30:42.100
certain problems that I was solving.

00:30:42.100 --> 00:30:48.100
And, you know, that time sort of, you know, my quote protected time professionally, was spent in that.

00:30:48.100 --> 00:30:54.100
And so that would be, you know, maybe a week spent into like, Hey, we are trying to look into this variant annotation tool.

00:30:54.100 --> 00:30:57.100
And then we'd want to, you know, write wrappers around it.

00:30:57.100 --> 00:31:02.100
So it, becomes, easy for, you know, our labs operation to be able to use that.

00:31:02.100 --> 00:31:04.100
And so, so kind of that, that's how it works.

00:31:04.100 --> 00:31:11.100
So some of those, either early mornings or, you know, the weeks I'm off clinical services and how, how that works.

00:31:11.100 --> 00:31:12.100
Yeah.

00:31:12.100 --> 00:31:13.100
So, let's get started.

00:31:13.100 --> 00:31:14.100
So, let's get started.

00:31:14.100 --> 00:31:21.100
This portion of talk Python to me is brought to you by Posit, the makers of Shiny, formerly RStudio and especially Shiny for Python.

00:31:21.100 --> 00:31:23.100
Let me ask you a question.

00:31:23.100 --> 00:31:25.100
Are you building awesome things?

00:31:25.100 --> 00:31:26.100
Of course you are.

00:31:26.100 --> 00:31:27.100
You're a developer or data scientist.

00:31:27.100 --> 00:31:28.100
That's what we do.

00:31:28.100 --> 00:31:30.100
And you should check out Posit Connect.

00:31:30.100 --> 00:31:37.100
Posit Connect is a way for you to publish, share, and deploy all the data products that you're building using Python.

00:31:37.100 --> 00:31:40.100
People ask me the same question all the time.

00:31:40.100 --> 00:31:44.100
Michael, I have some cool data science project or notebook that I built.

00:31:44.100 --> 00:31:47.100
How do I share it with my users, stakeholders, teammates?

00:31:47.100 --> 00:31:52.100
Do I need to learn FastAPI or Flask or maybe Vue or ReactJS?

00:31:52.100 --> 00:31:53.100
Hold on now.

00:31:53.100 --> 00:31:58.100
Now, those are cool technologies and I'm sure you'd benefit from them, but maybe stay focused on the data project.

00:31:58.100 --> 00:32:00.100
Let Posit Connect handle that side of things.

00:32:00.100 --> 00:32:05.100
With Posit Connect, you can rapidly and securely deploy the things you build in Python.

00:32:05.100 --> 00:32:12.100
Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto, Ports, Dashboards, and APIs.

00:32:12.100 --> 00:32:14.100
Posit Connect supports all of them.

00:32:14.100 --> 00:32:20.100
And Posit Connect comes with all the bells and whistles to satisfy IT and other enterprise requirements.

00:32:20.100 --> 00:32:24.100
Make deployment the easiest step in your workflow with Posit Connect.

00:32:24.100 --> 00:32:30.100
For a limited time, you can try Posit Connect for free for three months by going to talkpython.fm/posit.

00:32:30.100 --> 00:32:33.100
That's talkpython.fm/posit.

00:32:33.100 --> 00:32:36.100
The link is in your podcast player show notes.

00:32:36.100 --> 00:32:39.100
Thank you to the team at Posit for supporting Talk Python.

00:32:39.100 --> 00:32:41.100
Is it changing fast?

00:32:41.100 --> 00:32:45.100
So I'll give you an analogy that you could tell me about your space.

00:32:45.100 --> 00:32:49.100
So on one hand, in Python web world, you mentioned Flask and Django.

00:32:49.100 --> 00:32:56.100
You know, Flask and Django, while they are evolving, are kind of, they're kind of the way they have been and they're pretty stable.

00:32:56.100 --> 00:32:59.100
And if you learn Flask five years ago, you're still good to use Flask today.

00:32:59.100 --> 00:33:00.100
Yeah.

00:33:00.100 --> 00:33:10.100
Or is it more like FastAPI, Pydantic, msgspec, just there's something new all the time that you got to keep learning to bring in.

00:33:10.100 --> 00:33:15.100
Are there a ton of new packages just coming online or is there a set of really solid ones?

00:33:15.100 --> 00:33:20.100
So I think it's both yes and no.

00:33:20.100 --> 00:33:23.100
And so it depends on what, you know, what area we're working on.

00:33:23.100 --> 00:33:32.100
So right now in the clinical lab that I'm directing here, you know, when I came here in 2020, it was, you know, when we started off from scratch.

00:33:32.100 --> 00:33:39.100
So essentially the idea was to be able to bring up a pediatric cancer sequencing infrastructure that was not available.

00:33:39.100 --> 00:33:45.100
And so it was ground up from, you know, the lab to personnel, to space, to competition, and such and everything.

00:33:45.100 --> 00:33:51.100
And so we kind of have this sort of, you know, two big bubbles in that operation from an informatics perspective.

00:33:51.100 --> 00:33:59.100
One of them is the, you know, we essentially are in the process of developing our custom lab information system.

00:33:59.100 --> 00:34:01.100
That's essentially a web app.

00:34:01.100 --> 00:34:04.100
And so we have that space and the other space is bioinformatics.

00:34:04.100 --> 00:34:11.100
And so bioinformatics is a lot of the custom scripting or the applications we develop is Python based.

00:34:11.100 --> 00:34:17.100
Some of them we do with the Golang, you know, when we need a little bit of performance aspect.

00:34:17.100 --> 00:34:20.100
And then the other aspect is the web app.

00:34:20.100 --> 00:34:26.100
So from a web app perspective, when we, when I started here, we actually started, we use FastAPI.

00:34:26.100 --> 00:34:37.100
So that's kind of, you know, that was so, you know, the idea was that, well, you know, since you're starting from scratch, and I came to know about FastAPI at that point of time, the whole thing was about, you know, acing away.

00:34:37.100 --> 00:34:40.100
I was, I was pretty much sold on that aspect.

00:34:40.100 --> 00:34:43.100
And then, you know, I think the whole tool made a lot of sense.

00:34:43.100 --> 00:34:51.100
I'm like, okay, well, this is, this is perfect time to be able to, I think when I started FastAPI was, you know, 0.5 or 0.6.

00:34:51.100 --> 00:34:54.100
And so now obviously, you can see a lot of change happening there.

00:34:54.100 --> 00:34:57.100
So, yeah, that definitely is a lot of, you know, fast pace.

00:34:57.100 --> 00:35:04.100
And so we kind of do catching up in a sense where it has to be done in a, you know, in a careful way.

00:35:04.100 --> 00:35:15.100
The reason is because from, you know, as compared to more traditional research lab testing where, you know, at the end, really, you know, there's a lot of discovery, there's a lot of excitement.

00:35:15.100 --> 00:35:23.100
And at the end, it all translates into being sort of, you know, the data is presented at a conference or you publish that as a manuscript.

00:35:23.100 --> 00:35:24.100
And that's the end point.

00:35:24.100 --> 00:35:34.100
So if you move off from version one to version three of an algorithm, you know, you have to obviously make sure that your research, everything is reproducible, but beyond that is not a problem.

00:35:34.100 --> 00:35:41.100
But when we're talking about the same thing in context of a clinical care for a patient, the room for error is very, very little.

00:35:41.100 --> 00:35:42.100
You can't make mistakes.

00:35:42.100 --> 00:35:54.100
And so the entire space of clinical testing is very regulated in that sense, because there's a lot of requirement that, you know, you have to perform that any change that's happened in your pipeline.

00:35:54.100 --> 00:35:57.100
Say you're using, you know, some version of an application.

00:35:57.100 --> 00:35:58.100
Now you upgrade to a newer version.

00:35:58.100 --> 00:36:05.100
You have to demonstrate that the analytical performance in terms of sensitivity and specificity for that pipeline didn't change.

00:36:05.100 --> 00:36:09.100
And so a lot of work is needed when you go, you know, do like a version upgrade.

00:36:09.100 --> 00:36:17.100
So we keep those things very controlled and, you know, and careful versus some other things which are more in the R&D space.

00:36:17.100 --> 00:36:21.100
There's a little bit more room to play around with tools.

00:36:21.100 --> 00:36:22.100
Right. Yeah.

00:36:22.100 --> 00:36:29.100
Chris was asking an audience a great question about basically, is it more exploratory and you just move really fast and don't really worry about tests and stuff like that.

00:36:29.100 --> 00:36:32.100
It sounds like this is more of a production type thing.

00:36:32.100 --> 00:36:39.100
Like if it you're going to run it over and over and if it gives a different answer at some point for testing for a disease or something, that's really bad.

00:36:39.100 --> 00:36:41.100
You need it to be right all the time.

00:36:41.100 --> 00:36:42.100
And so.

00:36:42.100 --> 00:36:43.100
Yes.

00:36:43.100 --> 00:36:52.100
So the rule is when we do, when we do new test developments or we bring a new algorithm, obviously that part of which we refer to, there's a formal term that we use in lab medicine.

00:36:52.100 --> 00:36:56.100
So we have a lot of things called familiarization and optimization or ONF phase.

00:36:56.100 --> 00:37:01.100
That's where, you know, there's a lot of flexibility in new tools, new version, trying out different things.

00:37:01.100 --> 00:37:08.100
But once it moves from that into the validation phase and then once we deploy the application, once the deployment is there, it's a production application.

00:37:08.100 --> 00:37:14.100
We don't touch it unless something really has to be tinkered with or there's a, you know, bug that we have to fix.

00:37:14.100 --> 00:37:16.100
Who's in charge of running those apps?

00:37:16.100 --> 00:37:21.100
Is that people on your team and your lab or is that the hospital or how?

00:37:21.100 --> 00:37:22.100
Yeah.

00:37:22.100 --> 00:37:27.100
So the way it is set up here is, so when I started off, I was the end of one.

00:37:27.100 --> 00:37:36.100
So I started off with the, the fast AP application, I had to build up the, we have, you know, bioinformatics pipeline that I had initially authored.

00:37:36.100 --> 00:37:45.100
But then when we went through the validation phase, I luckily had, you know, two people on staff who kind of were handling the bioinformatics on the front end.

00:37:45.100 --> 00:37:48.100
And then eventually we had a third person who joined the team.

00:37:48.100 --> 00:37:57.100
So then they were kind of, you know, helping me out with a lot of the actual groundwork of, you know, writing the code, getting tests done.

00:37:57.100 --> 00:38:06.100
You know, going through the validation data, summarizing that for me, being a lab director, it is my responsibility ultimately to sign off on all those things.

00:38:06.100 --> 00:38:16.100
So we're going to say, hey, okay, this is the validation and this is what is being demonstrated that, you know, your package or your pipeline or whatever you're working on demonstrates this level of sensitivity.

00:38:16.100 --> 00:38:19.100
Then yes, I being a lab director say that, yes, this is working.

00:38:19.100 --> 00:38:23.100
And once that happens, so we then deploy those applications in production.

00:38:23.100 --> 00:38:28.100
You know, we use GitHub and the usual dev test prod cycle.

00:38:28.100 --> 00:38:30.100
And so that's kind of how it works.

00:38:30.100 --> 00:38:35.100
Well, do you have your own hardware or do you stuff like on DigitalOcean or AWS or?

00:38:35.100 --> 00:38:45.100
So with healthcare data, there is generally a little bit of angst with, you know, data sitting on the cloud outside of the institution.

00:38:45.100 --> 00:38:56.100
I would say like the institution that I work on is very, you know, that way it's quite, you know, very forward thinking and being able to use modern technology.

00:38:56.100 --> 00:39:07.100
So what we have, what we started off and since it was, you know, everything being built up from scratch, we're taking the decision to keep things on print for beginning.

00:39:07.100 --> 00:39:21.100
But we also kept in mind that at some point of time, you know, if the institution decides that, oh, we're going to switch our infrastructure to using, you know, AWS or Azure or whatever the platform is going to be, that we want it to be ready.

00:39:21.100 --> 00:39:32.100
And so the way we had it set up and this is due to our amazing IS team here in, you know, at our institution.

00:39:32.100 --> 00:39:38.100
So we had our own hardware that we got in terms of the actual servers.

00:39:38.100 --> 00:39:45.100
And I had, we collaborated with the IS team to be able to help us build our Kubernetes infrastructure.

00:39:45.100 --> 00:39:55.100
So we have a test and a prod Kubernetes cluster and then all our apps and the biofarmatics pipeline.

00:39:55.100 --> 00:40:02.100
Well, the apps for now and the biofarmatics pipeline that we're looking forward, you know, in the near future to get deployed on these things.

00:40:02.100 --> 00:40:08.100
As a matter of fact, what we've done it, our dev team, we start to, we do a lot of the development on Kubernetes as well.

00:40:08.100 --> 00:40:12.100
And then we keep moving all these things as containerized applications.

00:40:12.100 --> 00:40:13.100
That's excellent.

00:40:13.100 --> 00:40:19.100
So really embracing containers and Docker and Kubernetes and that should make it super easy to move to wherever you want to go.

00:40:19.100 --> 00:40:20.100
Right?

00:40:20.100 --> 00:40:23.100
Anything that can run Kubernetes, you just push, push to that and you're good to go.

00:40:23.100 --> 00:40:24.100
Right.

00:40:24.100 --> 00:40:25.100
Right.

00:40:25.100 --> 00:40:34.100
I mean, that's, it's, you know, it's, it's a little bit difficult to start with, but I think once we are in that, you know, stream, it is, it is much less effort to move things around.

00:40:34.100 --> 00:40:43.100
Yeah. Last year I rewrote all of our servers and APIs and condensed six to eight servers all into one, just Docker cluster.

00:40:43.100 --> 00:40:44.100
And it was a great decision.

00:40:44.100 --> 00:40:46.100
But to me, it was also a little intimidating to play.

00:40:46.100 --> 00:40:50.100
Well, here's one more thing I layer, I have to manage and understand.

00:40:50.100 --> 00:40:53.100
And if something goes wrong there, then everything else still breaks.

00:40:53.100 --> 00:40:56.100
And, but having it set up is really nice once you get used to it.

00:40:56.100 --> 00:40:57.100
Yes.

00:40:57.100 --> 00:40:58.100
Right.

00:40:58.100 --> 00:41:00.100
All right. Let's talk a bit about, well, I have a question for you.

00:41:00.100 --> 00:41:02.100
I want to talk about some of these packages.

00:41:02.100 --> 00:41:03.100
Yeah.

00:41:03.100 --> 00:41:07.100
That you've been, you've been saying are like a lot of the reasons you chose Python and it used a lot.

00:41:07.100 --> 00:41:08.100
That's just great.

00:41:08.100 --> 00:41:12.100
But before we get there, like I got the bio python.org website pulled up.

00:41:12.100 --> 00:41:15.100
And the very first line is bio Python.

00:41:15.100 --> 00:41:17.100
It's a set of freely available tools.

00:41:17.100 --> 00:41:20.100
You know, open source, freely available.

00:41:20.100 --> 00:41:21.100
Right.

00:41:21.100 --> 00:41:22.100
So what does that matter to you guys?

00:41:22.100 --> 00:41:27.100
On one hand, you have a ton of money being in the medical space.

00:41:27.100 --> 00:41:28.100
It's really high stakes.

00:41:28.100 --> 00:41:34.100
So paying for commercial software or commercial libraries is probably not the biggest worry.

00:41:34.100 --> 00:41:37.100
On the other hand, open source is really nice.

00:41:37.100 --> 00:41:39.100
Invest, being able to look inside is really nice.

00:41:39.100 --> 00:41:40.100
Right.

00:41:40.100 --> 00:41:43.100
So it means you don't have to deal with getting permission.

00:41:43.100 --> 00:41:44.100
Right.

00:41:44.100 --> 00:41:45.100
How does that fit into your world?

00:41:45.100 --> 00:41:47.100
I know how it fits into like small startups and things like that.

00:41:47.100 --> 00:41:52.100
But for a hospital, for example, what is free and open source mean to you guys?

00:41:52.100 --> 00:42:01.100
I think it does have a lot of impact in terms of how we end up working and setting up these

00:42:01.100 --> 00:42:02.100
things.

00:42:02.100 --> 00:42:08.100
And obviously, I would, whatever I'm speaking is representing, you know, what it means from

00:42:08.100 --> 00:42:09.100
sort of an operational standpoint.

00:42:09.100 --> 00:42:15.100
You know, when we talk about molecular pathology, generally being able to bring up a clinical service

00:42:15.100 --> 00:42:19.100
like that is a huge investment.

00:42:19.100 --> 00:42:24.100
And so a lot of the investment is, and this is generally applicable to, you know, any institution

00:42:24.100 --> 00:42:31.100
where something like this has been set up for patient care or clinical use.

00:42:31.100 --> 00:42:42.100
The investment is primarily in a lot of the instrumentation and the reagents that we use are generally quite

00:42:42.100 --> 00:42:48.100
expensive, which is sort of, you know, the, I would say when we talk about, you know, what is the

00:42:48.100 --> 00:42:51.100
cost of a test when it is offered.

00:42:51.100 --> 00:42:56.100
That cost factors in a lot of these, you know, operational costs that we need to, you know, buy

00:42:56.100 --> 00:43:01.100
these expensive sequencing instruments, you know, the reagents that are used as consumables as

00:43:01.100 --> 00:43:05.100
we do the tests over and over again, every, you know, every week, every month.

00:43:05.100 --> 00:43:23.100
So from that standpoint, traditionally, the way things have been designed is, you know, I would say 10 years back when we were, you know, work with our finance team to say, okay, the cost of the test is going to be so and so based on all of these different inputs.

00:43:23.100 --> 00:43:30.100
And so, you know, 10 years back, computation, bioinformatics, you know, all of these were not factored in without.

00:43:30.100 --> 00:43:46.100
But now, as we are in that era where, you know, using GPUs on a regular basis to be able to do, you know, simple, I would not say simple, but, you know, routine work to get from the raw sequence data to be able to identify genomic variance.

00:43:46.100 --> 00:43:52.100
Genomic variance that's getting common, you know, using FPGAs, using large clusters to be able to, you know, to perform these tasks.

00:43:52.100 --> 00:43:59.100
And so now we are starting to see those costs getting in as part of the ultimate, you know, cost that goes to the patient for a test.

00:43:59.100 --> 00:44:01.100
And so we try to minimize those things.

00:44:01.100 --> 00:44:07.100
But one of the way to be able to minimize those things is to be able to choose between free open source versus something which is a commercial product.

00:44:07.100 --> 00:44:14.100
And it's always a balance between the reliability and the service that you're able to get back saying, hey, you know, something breaks down.

00:44:14.100 --> 00:44:27.100
We know, you know, there's a, there's an SLA, there's a certain, you know, assurance that this thing is going to have help versus open source free would be where we feel very confident in the code base.

00:44:27.100 --> 00:44:41.100
We sort of, you know, sometimes what happens is when we, you know, when we kind of use some of these open source tools, we end up almost invariably having some wrapper around it to change things or being able to have some insight into the source code.

00:44:41.100 --> 00:44:44.100
So it depends on that balance, you know, what we choose.

00:44:44.100 --> 00:44:55.100
Yeah. How often do you fork, fork it and use your self maintained version versus just run what, what is publicly on PyPI and then maybe wrap it to orchestrate it a bit?

00:44:55.100 --> 00:45:24.100
So I would say for the web application part of it, we don't really do a lot of forking. We kind of go with what it is. The only thing what we do is since we have the luxury of using a combination of GitHub and containers, and knowing the fact that the regulatory requirements require that you tightly version control all these things with, you know, history and all those things. We tend to, when we are developing these things and we are validating it before we do that, we try to stick to a fairly stable version.

00:45:24.100 --> 00:45:42.100
So for example, things like, you know, beta or release candidates, we try to stay away from that, even if they have some desirable features, but unless we see like a full production, you know, version of that, we don't tend to switch to it. So we keep things like that without maintaining or without forking or kind of, you know, making modifications.

00:45:42.100 --> 00:45:58.140
When we get into more of the bioinformatic stuff where we are actually trying to use an algorithm to solve a particular piece of part of the pipeline that is doing some data transformation, it depends on how much we want to change or modify.

00:45:58.140 --> 00:46:13.220
That's when we sometimes fork it. Sometimes we fork where we know that, and this is the unfortunate reality in many of the scenarios where you have great open source tools, but after some time, due to whatever financial or business or other reasons that they stop maintaining.

00:46:13.220 --> 00:46:22.700
And so essentially, we kind of get into this freeze mode. We tend to fork that so that at least we have that available. And then if we make any changes that we kind of keep it to that fork.

00:46:23.980 --> 00:46:34.620
But generally, I would say it's probably in the 80-20 where 20% is where we fork it, make some change. Most of the times we try not to do that.

00:46:34.620 --> 00:46:47.900
But yes, open source free tools have a big impact. A lot of their tools that we use as part of our bioinformatics pipelines, a matter of fact, which is kind of used in the community of molecular pathology to build these bioinformatics pipelines.

00:46:48.940 --> 00:46:59.580
They tend to use a lot of open source tools. And the reason for that is, for example, it's not written in Python, but we have an algorithm called BWA. It's written by Professor Henley.

00:46:59.580 --> 00:47:14.660
That's one of the algorithms that is almost like a de facto, I would say, when it comes to doing sequence alignment. That's a part of the pipeline. And so it's a tried and tested application for more than a decade now.

00:47:14.660 --> 00:47:34.940
So really, there's not a, and this is a fairly stable, you know, algorithm or an application. So we don't tend to, it's well maintained, you know, from an open source perspective. So those obviously are highly, we highly rely on those. But, you know, there is this whole ecosystem of softwares that come under this rubric term of variant calling, where we're trying to identify these different variants.

00:47:34.940 --> 00:47:37.820
there's a whole bunch of those

00:47:37.820 --> 00:47:39.900
and some are fairly well maintained

00:47:39.900 --> 00:47:41.840
they are open

00:47:41.840 --> 00:47:43.860
source sometimes depending on

00:47:43.860 --> 00:47:44.880
the context you're using

00:47:44.880 --> 00:47:47.540
you need a license

00:47:47.540 --> 00:47:49.360
if it is used in a commercial setting

00:47:49.360 --> 00:47:51.900
you don't need a license if it is

00:47:51.900 --> 00:47:53.840
in an academic setting like for example

00:47:53.840 --> 00:47:55.500
when we do clinical testing

00:47:55.500 --> 00:47:57.580
in an institution

00:47:57.580 --> 00:47:59.360
such as where I am right now

00:47:59.360 --> 00:48:01.720
that's an academic institution so typically

00:48:01.720 --> 00:48:03.940
it's not for profit

00:48:03.940 --> 00:48:05.360
and so obviously we

00:48:05.360 --> 00:48:07.700
don't need

00:48:07.700 --> 00:48:09.400
licenses for that use

00:48:09.400 --> 00:48:11.780
but once it goes into a pure commercial space

00:48:11.780 --> 00:48:13.780
where if the lab is doing all of this

00:48:13.780 --> 00:48:15.260
testing for profit then

00:48:15.260 --> 00:48:16.420
there's a license requirement

00:48:16.420 --> 00:48:19.820
so we see a combination of these

00:48:19.820 --> 00:48:21.980
things showing up

00:48:21.980 --> 00:48:23.340
it's actually becoming

00:48:23.340 --> 00:48:25.760
more common now with open source

00:48:25.760 --> 00:48:26.760
tools that

00:48:26.760 --> 00:48:29.840
at least in the genomic biofibic space

00:48:29.840 --> 00:48:31.320
yeah excellent

00:48:31.320 --> 00:48:32.940
I think another benefit probably

00:48:32.940 --> 00:48:34.140
probably for you guys

00:48:34.140 --> 00:48:36.200
I know it's a benefit for a lot of organizations

00:48:36.200 --> 00:48:38.980
is if you use the open source tools

00:48:38.980 --> 00:48:41.000
and you need to hire somebody new

00:48:41.000 --> 00:48:43.240
there's a good chance that they have experience

00:48:43.240 --> 00:48:44.880
already with those tools

00:48:44.880 --> 00:48:46.280
whereas if you use something

00:48:46.280 --> 00:48:47.020
private

00:48:47.020 --> 00:48:47.580
expensive

00:48:47.580 --> 00:48:49.520
you know you might have to teach them from scratch

00:48:49.520 --> 00:48:50.540
what the thing is right

00:48:50.540 --> 00:48:52.300
yes that is

00:48:52.300 --> 00:48:53.000
that is correct

00:48:53.000 --> 00:48:53.740
as a matter of fact

00:48:53.740 --> 00:48:56.000
it's fortunate that a lot of the people

00:48:56.000 --> 00:48:56.640
who've

00:48:56.640 --> 00:48:58.400
done a lot of good work

00:48:58.400 --> 00:48:59.680
and have contributed to

00:48:59.680 --> 00:49:01.960
the genomics biofibic space

00:49:01.960 --> 00:49:04.240
have

00:49:04.240 --> 00:49:05.520
you know the general tendency

00:49:05.520 --> 00:49:07.020
is whenever we are setting up

00:49:07.020 --> 00:49:08.140
any sort of

00:49:08.140 --> 00:49:08.940
you know pipelines

00:49:08.940 --> 00:49:09.800
for

00:49:09.800 --> 00:49:11.160
you know DNA sequencing

00:49:11.160 --> 00:49:11.880
RNA sequencing

00:49:11.880 --> 00:49:12.440
or

00:49:12.440 --> 00:49:13.300
you know more

00:49:13.300 --> 00:49:14.540
from a research perspective

00:49:14.540 --> 00:49:16.240
you know methylation sequencing

00:49:16.240 --> 00:49:17.760
single cell RNA-seq

00:49:17.760 --> 00:49:19.000
you know

00:49:19.000 --> 00:49:21.580
UMI based

00:49:21.580 --> 00:49:22.140
error corrected

00:49:22.140 --> 00:49:23.740
there's a lot of

00:49:23.740 --> 00:49:25.160
there's a very thriving

00:49:25.160 --> 00:49:26.120
open source space

00:49:26.120 --> 00:49:26.580
and so

00:49:26.580 --> 00:49:27.960
that really helps

00:49:27.960 --> 00:49:29.860
with people who come in

00:49:29.860 --> 00:49:31.640
even if they're

00:49:31.640 --> 00:49:32.900
you know not familiar with these tools

00:49:32.900 --> 00:49:34.040
it's easy to get familiar with

00:49:34.040 --> 00:49:35.180
because there's a lot of

00:49:35.180 --> 00:49:37.560
you know community backing that up

00:49:37.560 --> 00:49:39.320
or as you said

00:49:39.320 --> 00:49:40.040
when we have

00:49:40.040 --> 00:49:41.180
when we hire people

00:49:41.180 --> 00:49:42.480
who already are coming from

00:49:42.480 --> 00:49:43.360
you know

00:49:43.360 --> 00:49:44.280
from a different lab

00:49:44.280 --> 00:49:45.340
or they've had some experience

00:49:45.340 --> 00:49:45.740
but you know

00:49:45.740 --> 00:49:46.140
they come and say

00:49:46.140 --> 00:49:47.080
oh yeah we know

00:49:47.080 --> 00:49:48.060
how to do

00:49:48.060 --> 00:49:48.640
you know alignment

00:49:48.640 --> 00:49:49.660
or I'm aware of these

00:49:49.660 --> 00:49:50.940
applications that use that

00:49:50.940 --> 00:49:51.300
it's

00:49:51.300 --> 00:49:52.940
it is much much easier

00:49:52.940 --> 00:49:54.480
from a learning curve perspective

00:49:54.480 --> 00:49:55.400
rather than having to

00:49:55.400 --> 00:49:56.660
you know now open up a manual

00:49:56.660 --> 00:49:57.640
and this is the

00:49:57.640 --> 00:49:58.440
you know

00:49:58.440 --> 00:49:59.820
proprietary thing

00:49:59.820 --> 00:50:00.980
that only works here

00:50:00.980 --> 00:50:01.220
and

00:50:01.220 --> 00:50:02.000
yes

00:50:02.000 --> 00:50:02.660
exactly

00:50:02.660 --> 00:50:03.540
exactly

00:50:03.540 --> 00:50:04.280
cool all right

00:50:04.280 --> 00:50:05.200
well we coordinated a bit

00:50:05.200 --> 00:50:06.320
on a list of

00:50:06.320 --> 00:50:07.300
packages that

00:50:07.300 --> 00:50:08.040
you've

00:50:08.040 --> 00:50:09.300
used in your lab

00:50:09.300 --> 00:50:10.500
or find really helpful

00:50:10.500 --> 00:50:11.300
for your work

00:50:11.300 --> 00:50:11.480
and

00:50:11.480 --> 00:50:12.980
we could touch on those

00:50:12.980 --> 00:50:13.640
just a little bit

00:50:13.640 --> 00:50:14.040
yeah

00:50:14.040 --> 00:50:14.800
yeah so

00:50:14.800 --> 00:50:16.240
cnv kit

00:50:16.240 --> 00:50:18.100
genome-wide copy number

00:50:18.100 --> 00:50:19.520
from high throughput sequencing

00:50:19.520 --> 00:50:20.560
I don't know what that means

00:50:20.560 --> 00:50:21.380
but tell us about it

00:50:21.380 --> 00:50:21.600
yeah

00:50:21.600 --> 00:50:22.140
yeah absolutely

00:50:22.140 --> 00:50:22.520
so

00:50:22.520 --> 00:50:24.060
copying

00:50:24.060 --> 00:50:26.000
so cnv or copy number variation

00:50:26.000 --> 00:50:27.520
this is

00:50:27.520 --> 00:50:28.920
a type of genomic operation

00:50:28.920 --> 00:50:30.040
where what happens is

00:50:30.040 --> 00:50:31.120
in a simplistic way

00:50:31.120 --> 00:50:32.560
at least when

00:50:32.560 --> 00:50:33.440
when we talk about

00:50:33.440 --> 00:50:34.280
cancer

00:50:34.280 --> 00:50:36.940
the cancer cells

00:50:36.940 --> 00:50:37.940
sometimes for it

00:50:37.940 --> 00:50:39.100
to be able to survive

00:50:39.100 --> 00:50:40.320
it tries to use

00:50:40.320 --> 00:50:41.340
different ways

00:50:41.340 --> 00:50:42.160
of doing that

00:50:42.160 --> 00:50:42.580
biologically

00:50:42.580 --> 00:50:43.160
one of the way

00:50:43.160 --> 00:50:43.700
to do that

00:50:43.700 --> 00:50:44.900
is certain genes

00:50:44.900 --> 00:50:45.560
that help

00:50:45.560 --> 00:50:46.740
a cell to grow

00:50:46.740 --> 00:50:48.260
in the absence

00:50:48.260 --> 00:50:48.860
of nutrients

00:50:48.860 --> 00:50:49.740
or with very little

00:50:49.740 --> 00:50:50.200
nutrition

00:50:50.200 --> 00:50:51.660
is certain genes

00:50:51.660 --> 00:50:52.800
if it has more

00:50:52.800 --> 00:50:53.820
copies of those genes

00:50:53.820 --> 00:50:54.620
than normal

00:50:54.620 --> 00:50:55.020
then

00:50:55.020 --> 00:50:55.480
it will

00:50:55.480 --> 00:50:55.880
oh okay

00:50:55.880 --> 00:50:56.420
you know

00:50:56.420 --> 00:50:56.860
it's like

00:50:56.860 --> 00:50:57.880
you have more money

00:50:57.880 --> 00:50:58.360
than expected

00:50:58.360 --> 00:50:59.640
you can do a lot of things

00:50:59.640 --> 00:51:00.880
so typically

00:51:00.880 --> 00:51:01.600
what happens is

00:51:01.600 --> 00:51:02.300
in a normal

00:51:02.300 --> 00:51:03.000
human genome

00:51:03.000 --> 00:51:03.700
any cell

00:51:03.700 --> 00:51:04.360
that we pick up

00:51:04.360 --> 00:51:05.720
it will only have

00:51:05.720 --> 00:51:06.660
two copies of the gene

00:51:06.660 --> 00:51:07.380
one is coming from

00:51:07.380 --> 00:51:07.720
your mom

00:51:07.720 --> 00:51:08.260
one is coming from

00:51:08.260 --> 00:51:08.560
with that

00:51:08.560 --> 00:51:09.340
in cancer

00:51:09.340 --> 00:51:10.100
what happens is

00:51:10.100 --> 00:51:10.660
in certain

00:51:10.660 --> 00:51:11.800
scenarios

00:51:11.800 --> 00:51:12.920
if a gene

00:51:12.920 --> 00:51:14.020
that helps

00:51:14.020 --> 00:51:15.200
with growth of the cell

00:51:15.200 --> 00:51:16.260
or it helps the cell

00:51:16.260 --> 00:51:16.840
to survive

00:51:16.840 --> 00:51:17.800
even without

00:51:17.800 --> 00:51:18.760
signal or nutrition

00:51:18.760 --> 00:51:20.260
if it has more

00:51:20.260 --> 00:51:20.840
copies of that

00:51:20.840 --> 00:51:21.240
it will make

00:51:21.240 --> 00:51:23.160
6, 8, 20, 50 copies

00:51:23.160 --> 00:51:24.120
it can survive

00:51:24.120 --> 00:51:24.560
versus

00:51:24.560 --> 00:51:26.180
there are certain

00:51:26.180 --> 00:51:27.020
scenarios where

00:51:27.020 --> 00:51:28.320
if there is a gene

00:51:28.320 --> 00:51:28.960
that is supposed

00:51:28.960 --> 00:51:29.980
to regulate the cell

00:51:29.980 --> 00:51:30.540
so it doesn't go

00:51:30.540 --> 00:51:30.920
haywire

00:51:30.920 --> 00:51:32.140
if the cancer

00:51:32.140 --> 00:51:33.040
is able to delete

00:51:33.040 --> 00:51:33.640
one of the cells

00:51:33.640 --> 00:51:34.480
one of the genes

00:51:34.480 --> 00:51:35.280
then you only have

00:51:35.280 --> 00:51:35.980
one gene left

00:51:35.980 --> 00:51:36.700
you knock out

00:51:36.700 --> 00:51:36.980
the thing

00:51:36.980 --> 00:51:37.540
and then that

00:51:37.540 --> 00:51:38.300
protective mechanism

00:51:38.300 --> 00:51:38.700
is gone

00:51:38.700 --> 00:51:39.560
so then the cancer

00:51:39.560 --> 00:51:40.440
cell can easily survive

00:51:40.440 --> 00:51:41.960
so what happens

00:51:41.960 --> 00:51:43.100
is with CNV

00:51:43.100 --> 00:51:43.860
or copy number

00:51:43.860 --> 00:51:44.420
variations

00:51:44.420 --> 00:51:45.640
the idea is that

00:51:45.640 --> 00:51:46.700
we use the

00:51:46.700 --> 00:51:47.220
high throughput

00:51:47.220 --> 00:51:48.000
sequencing data

00:51:48.000 --> 00:51:49.060
to be able to

00:51:49.060 --> 00:51:51.120
infer how many copies

00:51:51.120 --> 00:51:51.640
of these genes

00:51:51.640 --> 00:51:52.120
do we have

00:51:52.120 --> 00:51:52.940
is it more than

00:51:52.940 --> 00:51:53.140
two

00:51:53.140 --> 00:51:53.640
is it less than

00:51:53.640 --> 00:51:53.880
two

00:51:53.880 --> 00:51:54.780
and so

00:51:54.780 --> 00:51:55.520
this particular

00:51:55.520 --> 00:51:55.940
package

00:51:55.940 --> 00:51:56.760
it's a very

00:51:56.760 --> 00:51:57.180
very

00:51:57.180 --> 00:51:59.380
well established

00:51:59.380 --> 00:52:00.440
well maintained

00:52:00.440 --> 00:52:02.840
package in the community

00:52:02.840 --> 00:52:03.760
that essentially

00:52:03.760 --> 00:52:04.400
does this thing

00:52:04.400 --> 00:52:05.680
is you give it

00:52:05.680 --> 00:52:06.960
the sequencing data

00:52:06.960 --> 00:52:08.240
and define

00:52:08.240 --> 00:52:09.220
the regions

00:52:09.220 --> 00:52:09.740
of the genome

00:52:09.740 --> 00:52:11.040
that you're interested in

00:52:11.040 --> 00:52:13.240
you can also provide

00:52:13.240 --> 00:52:14.100
like names

00:52:14.100 --> 00:52:14.740
for the regions

00:52:14.740 --> 00:52:15.160
like you know

00:52:15.160 --> 00:52:15.900
this region is

00:52:15.900 --> 00:52:16.560
you know

00:52:16.560 --> 00:52:16.960
gene

00:52:16.960 --> 00:52:18.120
BRAF

00:52:18.120 --> 00:52:18.960
or this EGFR

00:52:18.960 --> 00:52:19.300
or whatever

00:52:19.300 --> 00:52:20.920
you're interested in

00:52:20.920 --> 00:52:22.040
and then what I'll do

00:52:22.040 --> 00:52:23.180
is I'll do all the analysis

00:52:23.180 --> 00:52:24.180
to be able to tell you

00:52:24.180 --> 00:52:24.960
that okay well

00:52:24.960 --> 00:52:26.620
when we are comparing

00:52:26.620 --> 00:52:27.520
this particular tumor

00:52:27.520 --> 00:52:29.420
against this reference

00:52:29.420 --> 00:52:30.200
set of

00:52:30.200 --> 00:52:30.640
you know

00:52:30.640 --> 00:52:31.760
20 normal samples

00:52:31.760 --> 00:52:32.560
where we know that

00:52:32.560 --> 00:52:33.620
you should only have

00:52:33.620 --> 00:52:34.540
two copies of the gene

00:52:34.540 --> 00:52:35.820
in this particular tumor

00:52:35.820 --> 00:52:36.360
we are seeing

00:52:36.360 --> 00:52:37.200
there are 50 copies

00:52:37.200 --> 00:52:37.600
of the gene

00:52:37.600 --> 00:52:39.260
so it gives you

00:52:39.260 --> 00:52:41.140
kind of an output data

00:52:41.140 --> 00:52:41.740
that

00:52:41.740 --> 00:52:43.120
numerical

00:52:43.120 --> 00:52:44.080
can tell you

00:52:44.080 --> 00:52:44.760
that you know

00:52:44.760 --> 00:52:45.560
what it does

00:52:45.560 --> 00:52:46.140
is it does

00:52:46.140 --> 00:52:48.460
a log 2 based

00:52:48.460 --> 00:52:49.100
you know

00:52:49.100 --> 00:52:49.780
transformation of the

00:52:49.780 --> 00:52:50.420
tracing that okay

00:52:50.420 --> 00:52:51.900
after all this

00:52:51.900 --> 00:52:52.360
computation

00:52:52.360 --> 00:52:53.260
when I compare

00:52:53.260 --> 00:52:53.780
to the normal

00:52:53.780 --> 00:52:56.060
this is 50 times more

00:52:56.060 --> 00:52:57.360
this is 20 times more

00:52:57.360 --> 00:52:58.520
the expected copy

00:52:58.520 --> 00:52:59.460
or it is

00:52:59.460 --> 00:53:00.060
you know

00:53:00.060 --> 00:53:01.060
half of the amount

00:53:01.060 --> 00:53:01.880
of copy we need

00:53:01.880 --> 00:53:02.900
in terms of deletions

00:53:02.900 --> 00:53:04.140
so that's what really

00:53:04.140 --> 00:53:04.560
it does

00:53:04.560 --> 00:53:05.360
and

00:53:05.360 --> 00:53:08.260
it's written in Python

00:53:08.260 --> 00:53:09.260
it uses a lot of

00:53:09.260 --> 00:53:10.300
you know

00:53:10.300 --> 00:53:10.740
Python

00:53:10.740 --> 00:53:12.060
it has Python dependencies

00:53:12.060 --> 00:53:12.720
that use

00:53:12.720 --> 00:53:13.760
that have been written

00:53:13.760 --> 00:53:14.200
in sort of

00:53:14.200 --> 00:53:14.820
you know

00:53:14.820 --> 00:53:16.740
in either C

00:53:16.740 --> 00:53:17.720
or like you know

00:53:17.720 --> 00:53:19.000
Python C bindings

00:53:19.000 --> 00:53:20.480
but at the end

00:53:20.480 --> 00:53:21.700
it gives you that data

00:53:21.700 --> 00:53:23.240
and it has an internal

00:53:23.240 --> 00:53:23.900
visualization

00:53:23.900 --> 00:53:25.260
tool

00:53:25.260 --> 00:53:25.640
but

00:53:25.640 --> 00:53:27.600
I was not very happy

00:53:27.600 --> 00:53:28.300
with you know

00:53:28.300 --> 00:53:29.080
how it was written

00:53:29.080 --> 00:53:30.780
so I ended up

00:53:30.780 --> 00:53:31.420
writing a wrapper

00:53:31.420 --> 00:53:32.420
which is called

00:53:32.420 --> 00:53:33.120
CNA plotter

00:53:33.120 --> 00:53:34.240
it's open source

00:53:34.240 --> 00:53:35.060
it essentially

00:53:35.060 --> 00:53:37.060
uses the end data

00:53:37.060 --> 00:53:37.700
for

00:53:37.700 --> 00:53:39.860
from CNA

00:53:39.860 --> 00:53:41.020
and then it

00:53:41.020 --> 00:53:41.760
gives you a nice

00:53:41.760 --> 00:53:42.240
visualization

00:53:42.240 --> 00:53:42.980
of the copy number

00:53:42.980 --> 00:53:43.680
so I think if you go

00:53:43.680 --> 00:53:44.060
down

00:53:44.060 --> 00:53:44.780
if you scroll down

00:53:44.780 --> 00:53:45.380
there's an example

00:53:45.380 --> 00:53:45.820
images

00:53:45.820 --> 00:53:47.340
yeah you have this

00:53:47.340 --> 00:53:47.680
on GitHub

00:53:47.680 --> 00:53:48.520
so people can

00:53:48.520 --> 00:53:49.360
if people

00:53:49.360 --> 00:53:50.400
want to use this

00:53:50.400 --> 00:53:51.160
it's right there

00:53:51.160 --> 00:53:51.360
right

00:53:51.360 --> 00:53:51.820
yep

00:53:51.820 --> 00:53:52.380
it's right there

00:53:52.380 --> 00:53:52.620
yeah

00:53:52.620 --> 00:53:53.040
so

00:53:53.040 --> 00:53:54.540
I think at the

00:53:54.540 --> 00:53:55.040
very bottom

00:53:55.040 --> 00:53:55.740
of the images

00:53:55.740 --> 00:53:56.820
the screenshots

00:53:56.820 --> 00:53:57.200
there

00:53:57.200 --> 00:53:57.880
oh yeah

00:53:57.880 --> 00:53:58.320
yeah

00:53:58.320 --> 00:53:58.720
right here

00:53:58.720 --> 00:53:58.940
yeah

00:53:58.940 --> 00:53:59.580
so for example

00:53:59.580 --> 00:54:00.180
the first image

00:54:00.180 --> 00:54:00.820
over here

00:54:00.820 --> 00:54:02.080
you can see this

00:54:02.080 --> 00:54:03.520
you know

00:54:03.520 --> 00:54:04.520
it's a thin band

00:54:04.520 --> 00:54:04.960
of all these

00:54:04.960 --> 00:54:05.800
multicolor things

00:54:05.800 --> 00:54:06.600
and each one of them

00:54:06.600 --> 00:54:07.260
is a single

00:54:07.260 --> 00:54:08.160
human chromosome

00:54:08.160 --> 00:54:09.420
so chromosome 1

00:54:09.420 --> 00:54:10.100
2, 3, 4

00:54:10.100 --> 00:54:10.780
so on and so forth

00:54:10.780 --> 00:54:12.280
and it

00:54:12.280 --> 00:54:12.780
you know

00:54:12.780 --> 00:54:13.660
if you look

00:54:13.660 --> 00:54:14.700
in the image

00:54:14.700 --> 00:54:15.540
it is at

00:54:15.540 --> 00:54:15.940
you know

00:54:15.940 --> 00:54:16.140
the

00:54:16.140 --> 00:54:17.400
the Y scale

00:54:17.400 --> 00:54:18.300
essentially is log 2

00:54:18.300 --> 00:54:19.380
which is 0

00:54:19.380 --> 00:54:20.280
and going up

00:54:20.280 --> 00:54:21.120
it is 1, 2, 3

00:54:21.120 --> 00:54:21.640
and then

00:54:21.640 --> 00:54:22.620
it's a native scale

00:54:22.620 --> 00:54:23.600
on the lower side

00:54:23.600 --> 00:54:24.300
so anything

00:54:24.300 --> 00:54:25.760
going above 0

00:54:25.760 --> 00:54:26.460
means you have

00:54:26.460 --> 00:54:27.080
more copies

00:54:27.080 --> 00:54:27.660
than 2

00:54:27.660 --> 00:54:28.440
going below

00:54:28.440 --> 00:54:29.120
is less

00:54:29.120 --> 00:54:29.440
you know

00:54:29.440 --> 00:54:30.160
less than 2 copies

00:54:30.160 --> 00:54:31.200
and so if you see

00:54:31.200 --> 00:54:32.060
here in this example

00:54:32.060 --> 00:54:33.520
the plot here

00:54:33.520 --> 00:54:35.080
you see the very end

00:54:35.080 --> 00:54:36.180
which says chromosome X

00:54:36.180 --> 00:54:37.280
is a single

00:54:37.280 --> 00:54:38.920
you know

00:54:38.920 --> 00:54:39.720
the band over here

00:54:39.720 --> 00:54:41.280
is lower at negative 1

00:54:41.280 --> 00:54:42.280
that means this is

00:54:42.280 --> 00:54:43.700
a male patient

00:54:43.700 --> 00:54:44.900
with a single X chromosome

00:54:44.900 --> 00:54:45.960
as compared to females

00:54:45.960 --> 00:54:46.460
who have 2

00:54:46.460 --> 00:54:46.940
you know

00:54:46.940 --> 00:54:47.600
2 X chromosomes

00:54:47.600 --> 00:54:48.240
and so

00:54:48.240 --> 00:54:49.040
when we look at this

00:54:49.040 --> 00:54:49.900
plot below here

00:54:49.900 --> 00:54:50.640
this is actually

00:54:50.640 --> 00:54:52.020
a plot from

00:54:52.020 --> 00:54:52.420
a

00:54:52.420 --> 00:54:53.740
you know

00:54:53.740 --> 00:54:54.420
a cell line

00:54:54.420 --> 00:54:55.160
a tumor cell line

00:54:55.160 --> 00:54:56.380
that is abnormal

00:54:56.380 --> 00:54:57.340
and here we see

00:54:57.340 --> 00:54:58.200
there are 2 genes

00:54:58.200 --> 00:54:58.820
which are

00:54:58.820 --> 00:54:59.540
amplified

00:54:59.540 --> 00:55:00.160
one of them

00:55:00.160 --> 00:55:01.400
is a gene

00:55:01.400 --> 00:55:02.180
known as TERT

00:55:02.180 --> 00:55:04.240
and the other gene

00:55:04.240 --> 00:55:05.060
is MDM2

00:55:05.060 --> 00:55:05.760
so these 2 genes

00:55:05.760 --> 00:55:07.280
are again

00:55:07.280 --> 00:55:08.060
one of those examples

00:55:08.060 --> 00:55:09.200
where it gives the tumor

00:55:09.200 --> 00:55:10.960
survival advantage

00:55:10.960 --> 00:55:11.480
over there

00:55:11.480 --> 00:55:11.920
and so

00:55:11.920 --> 00:55:12.560
you can see here

00:55:12.560 --> 00:55:13.180
there are multiple

00:55:13.180 --> 00:55:14.180
copies of these genes

00:55:14.180 --> 00:55:14.880
as compared to

00:55:14.880 --> 00:55:15.360
you know

00:55:15.360 --> 00:55:15.780
the baseline

00:55:15.780 --> 00:55:16.300
over here

00:55:16.300 --> 00:55:16.980
I see

00:55:16.980 --> 00:55:17.980
so that might predict

00:55:17.980 --> 00:55:18.640
something like

00:55:18.640 --> 00:55:20.060
how survivable

00:55:20.060 --> 00:55:20.940
the cancer is

00:55:20.940 --> 00:55:22.860
right

00:55:22.860 --> 00:55:23.760
so if it

00:55:23.760 --> 00:55:24.660
is it going to be

00:55:24.660 --> 00:55:24.980
localized

00:55:24.980 --> 00:55:25.920
say where it happened

00:55:25.920 --> 00:55:26.460
or it's going to

00:55:26.460 --> 00:55:27.140
like spread to

00:55:27.140 --> 00:55:27.760
other parts of the

00:55:27.760 --> 00:55:28.040
body

00:55:28.040 --> 00:55:29.300
or be difficult

00:55:29.300 --> 00:55:29.800
to treat

00:55:29.800 --> 00:55:30.360
or be resistant

00:55:30.360 --> 00:55:30.800
to treatment

00:55:30.800 --> 00:55:31.440
yes

00:55:31.440 --> 00:55:33.100
so if this is you

00:55:33.100 --> 00:55:33.500
you want

00:55:33.500 --> 00:55:34.400
higher numbers

00:55:34.400 --> 00:55:35.200
not lower numbers

00:55:35.200 --> 00:55:36.380
it all depends

00:55:36.380 --> 00:55:36.620
right

00:55:36.620 --> 00:55:36.900
I mean

00:55:36.900 --> 00:55:37.700
certain genes

00:55:37.700 --> 00:55:38.540
are good genes

00:55:38.540 --> 00:55:39.160
for example

00:55:39.160 --> 00:55:40.640
if there are certain

00:55:40.640 --> 00:55:41.380
checkpoint genes

00:55:41.380 --> 00:55:42.940
if those numbers

00:55:42.940 --> 00:55:43.700
you know

00:55:43.700 --> 00:55:44.720
if they have lower numbers

00:55:44.720 --> 00:55:45.500
you want to have

00:55:45.500 --> 00:55:46.160
two copies of them

00:55:46.160 --> 00:55:46.860
because if that

00:55:46.860 --> 00:55:47.540
protective mechanism

00:55:47.540 --> 00:55:47.980
is gone

00:55:47.980 --> 00:55:48.620
you know

00:55:48.620 --> 00:55:49.760
the tumor becomes

00:55:49.760 --> 00:55:50.780
very aggressive

00:55:50.780 --> 00:55:51.800
again depending on

00:55:51.800 --> 00:55:52.100
the tumor

00:55:52.100 --> 00:55:53.200
so it is all

00:55:53.200 --> 00:55:53.880
into context

00:55:53.880 --> 00:55:54.580
so if you're looking

00:55:54.580 --> 00:55:55.420
at the good genes

00:55:55.420 --> 00:55:56.540
you want to have

00:55:56.540 --> 00:55:57.600
two copies of the good gene

00:55:57.600 --> 00:55:58.220
if you're looking

00:55:58.220 --> 00:55:59.080
at some of the bad genes

00:55:59.080 --> 00:56:00.260
you don't want to have

00:56:00.260 --> 00:56:00.920
more than two copies

00:56:00.920 --> 00:56:01.460
of the bad genes

00:56:01.460 --> 00:56:02.940
one or zero is better

00:56:02.940 --> 00:56:03.400
I got it

00:56:03.400 --> 00:56:03.780
I got it

00:56:03.780 --> 00:56:03.980
okay

00:56:03.980 --> 00:56:04.880
okay

00:56:04.880 --> 00:56:06.280
HGVS

00:56:06.280 --> 00:56:07.220
yes

00:56:07.220 --> 00:56:08.340
this is again

00:56:08.340 --> 00:56:09.880
a wonderful package

00:56:09.880 --> 00:56:11.940
that was initially

00:56:11.940 --> 00:56:12.740
I think it was started

00:56:12.740 --> 00:56:14.720
by a person

00:56:14.720 --> 00:56:15.440
named Vise Hart

00:56:15.440 --> 00:56:15.840
he's

00:56:15.840 --> 00:56:16.380
I think he still

00:56:16.380 --> 00:56:16.880
maintains it

00:56:16.880 --> 00:56:17.480
but there's a lot of

00:56:17.480 --> 00:56:17.860
like you know

00:56:17.860 --> 00:56:18.400
it's a very

00:56:18.400 --> 00:56:20.160
well publicly maintained

00:56:20.160 --> 00:56:21.880
open source

00:56:21.880 --> 00:56:22.700
package

00:56:22.700 --> 00:56:23.620
there's a lot of

00:56:23.620 --> 00:56:25.280
you know

00:56:25.280 --> 00:56:25.660
community

00:56:25.660 --> 00:56:27.520
involvement in that as well

00:56:27.520 --> 00:56:29.620
so what HGVS is

00:56:29.620 --> 00:56:31.140
it's a nomenclature system

00:56:31.140 --> 00:56:33.320
for you know

00:56:33.320 --> 00:56:34.580
giving a name

00:56:34.580 --> 00:56:35.600
to all these variations

00:56:35.600 --> 00:56:36.600
so when you talk about

00:56:36.600 --> 00:56:37.640
I'm not sure

00:56:37.640 --> 00:56:38.420
Michael if you've heard

00:56:38.420 --> 00:56:39.300
about the term mutation

00:56:39.300 --> 00:56:40.980
so mutation

00:56:40.980 --> 00:56:41.860
is a very commonly

00:56:41.860 --> 00:56:42.540
used term

00:56:42.540 --> 00:56:43.480
that refers to

00:56:43.480 --> 00:56:44.180
some kind of

00:56:44.180 --> 00:56:44.800
abnormality

00:56:44.800 --> 00:56:46.180
in the genome

00:56:46.180 --> 00:56:48.180
in this case

00:56:48.180 --> 00:56:49.120
so what happens is

00:56:49.120 --> 00:56:50.240
there are these

00:56:50.240 --> 00:56:51.360
standards that are

00:56:51.360 --> 00:56:52.480
that you know

00:56:52.480 --> 00:56:53.680
most clinical labs

00:56:53.680 --> 00:56:54.900
follow when they're

00:56:54.900 --> 00:56:55.820
putting all of this

00:56:55.820 --> 00:56:56.720
information in the

00:56:56.720 --> 00:56:57.440
patient reports

00:56:57.440 --> 00:56:57.880
saying okay

00:56:57.880 --> 00:56:58.160
you know

00:56:58.160 --> 00:56:58.980
this particular

00:56:58.980 --> 00:56:59.960
tumor has

00:56:59.960 --> 00:57:00.720
you know

00:57:00.720 --> 00:57:02.060
mutation in BRAF

00:57:02.060 --> 00:57:03.160
a mutation in EGFR

00:57:03.160 --> 00:57:03.980
some other gene

00:57:03.980 --> 00:57:05.060
and there is a certain

00:57:05.060 --> 00:57:06.020
way that

00:57:06.020 --> 00:57:07.000
those mutations

00:57:07.000 --> 00:57:07.560
are described

00:57:07.560 --> 00:57:08.500
in terms of

00:57:08.500 --> 00:57:09.180
what sequence

00:57:09.180 --> 00:57:09.640
alterations

00:57:09.640 --> 00:57:10.060
happening

00:57:10.060 --> 00:57:11.420
say at the

00:57:11.420 --> 00:57:12.600
mRNA level

00:57:12.600 --> 00:57:13.460
and what sequence

00:57:13.460 --> 00:57:14.020
alterations are

00:57:14.020 --> 00:57:14.460
happening at the

00:57:14.460 --> 00:57:14.920
protein level

00:57:14.920 --> 00:57:16.280
so now in your

00:57:16.280 --> 00:57:16.620
protein

00:57:16.620 --> 00:57:17.100
you know

00:57:17.100 --> 00:57:17.540
you're missing

00:57:17.540 --> 00:57:18.220
these amino acids

00:57:18.220 --> 00:57:19.440
or you have

00:57:19.440 --> 00:57:20.000
excess of these

00:57:20.000 --> 00:57:20.440
amino acids

00:57:20.440 --> 00:57:20.940
or something

00:57:20.940 --> 00:57:21.420
got switched

00:57:21.420 --> 00:57:22.160
from here to there

00:57:22.160 --> 00:57:23.120
so there's a

00:57:23.120 --> 00:57:23.840
formal way of

00:57:23.840 --> 00:57:24.420
defining that

00:57:24.420 --> 00:57:25.080
and the guidelines

00:57:25.080 --> 00:57:27.120
of the group

00:57:27.120 --> 00:57:28.060
that defines

00:57:28.060 --> 00:57:28.740
that is referred

00:57:28.740 --> 00:57:29.640
to as HGPS

00:57:29.640 --> 00:57:30.920
human genome

00:57:30.920 --> 00:57:31.680
variation society

00:57:31.680 --> 00:57:32.900
and so it's a

00:57:32.900 --> 00:57:33.620
very complicated

00:57:33.620 --> 00:57:34.520
process where

00:57:34.520 --> 00:57:35.080
you have to do

00:57:35.080 --> 00:57:35.400
all these

00:57:35.400 --> 00:57:36.520
translations from

00:57:36.520 --> 00:57:37.740
the you know

00:57:37.740 --> 00:57:38.540
the genomic scale

00:57:38.540 --> 00:57:39.400
where the

00:57:39.400 --> 00:57:40.200
numbering system

00:57:40.200 --> 00:57:40.900
starts from

00:57:40.900 --> 00:57:41.800
one to like

00:57:41.800 --> 00:57:42.840
and you know

00:57:42.840 --> 00:57:43.500
whatever the length

00:57:43.500 --> 00:57:44.060
of your chromosome

00:57:44.060 --> 00:57:44.800
is in terms of

00:57:44.800 --> 00:57:45.360
ATGCs

00:57:45.360 --> 00:57:46.520
and each chromosome

00:57:46.520 --> 00:57:47.020
has a different

00:57:47.020 --> 00:57:47.380
number

00:57:47.380 --> 00:57:48.240
and if you have

00:57:48.240 --> 00:57:48.580
a certain

00:57:48.580 --> 00:57:49.340
alteration that

00:57:49.340 --> 00:57:49.740
is happening

00:57:49.740 --> 00:57:50.580
say in

00:57:50.580 --> 00:57:51.760
chromosome 7

00:57:51.760 --> 00:57:52.680
at this

00:57:52.680 --> 00:57:53.360
particular position

00:57:53.360 --> 00:57:54.140
then you have

00:57:54.140 --> 00:57:54.680
to translate

00:57:54.680 --> 00:57:55.460
that to the

00:57:55.460 --> 00:57:56.160
mRNA of that

00:57:56.160 --> 00:57:56.400
gene

00:57:56.400 --> 00:57:56.820
and then the

00:57:56.820 --> 00:57:57.420
protein of that

00:57:57.420 --> 00:57:57.600
gene

00:57:57.600 --> 00:57:58.060
so it's a lot

00:57:58.060 --> 00:57:58.500
of math

00:57:58.500 --> 00:57:58.880
a lot of

00:57:58.880 --> 00:57:59.240
strings

00:57:59.240 --> 00:58:00.220
involved in

00:58:00.220 --> 00:58:01.580
that process

00:58:01.580 --> 00:58:02.000
and so

00:58:02.000 --> 00:58:02.440
essentially

00:58:02.440 --> 00:58:02.840
this

00:58:02.840 --> 00:58:03.620
HGPS

00:58:03.620 --> 00:58:04.500
Python package

00:58:04.500 --> 00:58:05.960
provides all

00:58:05.960 --> 00:58:06.180
of those

00:58:06.180 --> 00:58:06.560
functionality

00:58:06.560 --> 00:58:07.140
as a wrap

00:58:07.140 --> 00:58:07.640
you can

00:58:07.640 --> 00:58:08.600
create your

00:58:08.600 --> 00:58:09.560
translation

00:58:09.560 --> 00:58:10.100
you can

00:58:10.100 --> 00:58:10.480
essentially

00:58:10.480 --> 00:58:11.780
project

00:58:11.780 --> 00:58:12.720
the variant

00:58:12.720 --> 00:58:13.320
from your

00:58:13.320 --> 00:58:13.700
genomic

00:58:13.700 --> 00:58:14.380
to the

00:58:14.380 --> 00:58:14.880
you know

00:58:14.880 --> 00:58:15.440
the mRNA

00:58:15.440 --> 00:58:16.480
to a protein

00:58:16.480 --> 00:58:16.880
level

00:58:16.880 --> 00:58:17.700
or vice versa

00:58:17.700 --> 00:58:18.080
you can

00:58:18.080 --> 00:58:18.800
validate things

00:58:18.800 --> 00:58:20.820
so we

00:58:20.820 --> 00:58:21.540
ended up

00:58:21.540 --> 00:58:22.160
I actually

00:58:22.160 --> 00:58:22.740
wrote a paper

00:58:22.740 --> 00:58:23.740
about this

00:58:23.740 --> 00:58:24.760
when we

00:58:24.760 --> 00:58:25.680
did a validation

00:58:25.680 --> 00:58:26.520
of how well

00:58:26.520 --> 00:58:27.160
this particular

00:58:27.160 --> 00:58:27.840
package works

00:58:27.840 --> 00:58:28.900
and so now

00:58:28.900 --> 00:58:30.240
in the lab

00:58:30.240 --> 00:58:30.720
that I'm currently

00:58:30.720 --> 00:58:31.780
in we implement

00:58:31.780 --> 00:58:32.640
this thing for

00:58:32.640 --> 00:58:33.680
generating those

00:58:33.680 --> 00:58:34.140
nomenclases

00:58:34.140 --> 00:58:34.800
so what happens

00:58:34.800 --> 00:58:35.880
is when

00:58:35.880 --> 00:58:37.560
we put a report

00:58:37.560 --> 00:58:38.300
out in the

00:58:38.300 --> 00:58:38.860
patient's chart

00:58:38.860 --> 00:58:39.240
and when

00:58:39.240 --> 00:58:40.240
say our

00:58:40.240 --> 00:58:40.800
oncologist

00:58:40.800 --> 00:58:42.620
was treating

00:58:42.620 --> 00:58:43.660
the patient

00:58:43.660 --> 00:58:44.320
they want to

00:58:44.320 --> 00:58:45.000
know what

00:58:45.000 --> 00:58:46.220
did you

00:58:46.220 --> 00:58:46.920
identify in

00:58:46.920 --> 00:58:47.240
this tumor

00:58:47.240 --> 00:58:47.560
genome

00:58:47.560 --> 00:58:48.340
they would

00:58:48.340 --> 00:58:48.780
read that

00:58:48.780 --> 00:58:49.280
nomenclature

00:58:49.280 --> 00:58:49.940
saying oh

00:58:49.940 --> 00:58:50.540
okay this

00:58:50.540 --> 00:58:50.900
particular

00:58:50.900 --> 00:58:51.400
change in

00:58:51.400 --> 00:58:51.920
this BF

00:58:51.920 --> 00:58:52.860
gene

00:58:52.860 --> 00:58:53.480
this is

00:58:53.480 --> 00:58:53.880
significant

00:58:53.880 --> 00:58:54.300
I know

00:58:54.300 --> 00:58:54.620
that there

00:58:54.620 --> 00:58:55.920
are therapies

00:58:55.920 --> 00:58:56.520
that are out

00:58:56.520 --> 00:58:56.940
there that

00:58:56.940 --> 00:58:57.580
we can use

00:58:57.580 --> 00:58:58.060
to treat

00:58:58.060 --> 00:58:58.460
this patient

00:58:58.460 --> 00:58:58.720
tumor

00:58:58.720 --> 00:58:59.840
so that's

00:58:59.840 --> 00:59:00.200
what this

00:59:00.200 --> 00:59:00.660
nomenclature

00:59:00.660 --> 00:59:01.100
system is

00:59:01.100 --> 00:59:01.320
about

00:59:01.320 --> 00:59:01.620
so it's a

00:59:01.620 --> 00:59:01.880
very

00:59:01.880 --> 00:59:03.960
automated

00:59:03.960 --> 00:59:04.480
system

00:59:04.480 --> 00:59:04.940
yeah

00:59:04.940 --> 00:59:05.460
and it

00:59:05.460 --> 00:59:06.240
normalizes

00:59:06.240 --> 00:59:06.900
it if there's

00:59:06.900 --> 00:59:07.540
multiple ways

00:59:07.540 --> 00:59:08.040
to represent

00:59:08.040 --> 00:59:08.420
it

00:59:08.420 --> 00:59:10.500
very nice

00:59:10.500 --> 00:59:11.400
all right

00:59:11.400 --> 00:59:12.180
this one

00:59:12.180 --> 00:59:12.800
I'm familiar

00:59:12.800 --> 00:59:13.040
with

00:59:13.040 --> 00:59:13.500
open

00:59:13.500 --> 00:59:14.080
pi

00:59:14.080 --> 00:59:14.620
excel

00:59:14.620 --> 00:59:15.300
yeah

00:59:15.300 --> 00:59:15.560
I guess

00:59:15.560 --> 00:59:15.880
you probably

00:59:15.880 --> 00:59:16.380
have a lot

00:59:16.380 --> 00:59:16.720
of data

00:59:16.720 --> 00:59:17.100
that either

00:59:17.100 --> 00:59:18.160
comes from

00:59:18.160 --> 00:59:18.680
or goes

00:59:18.680 --> 00:59:19.340
gets shared

00:59:19.340 --> 00:59:20.000
out into

00:59:20.000 --> 00:59:20.560
excel

00:59:20.560 --> 00:59:20.820
right

00:59:20.820 --> 00:59:21.440
yes

00:59:21.440 --> 00:59:22.300
so what

00:59:22.300 --> 00:59:22.920
we do

00:59:22.920 --> 00:59:23.520
is we sort

00:59:23.520 --> 00:59:23.860
of are

00:59:23.860 --> 00:59:24.320
right now

00:59:24.320 --> 00:59:24.860
in our lab

00:59:24.860 --> 00:59:25.140
we're kind

00:59:25.140 --> 00:59:25.500
of in this

00:59:25.500 --> 00:59:26.060
sort of

00:59:26.060 --> 00:59:27.600
you know

00:59:27.600 --> 00:59:29.320
kind of an

00:59:29.320 --> 00:59:30.560
interim phase

00:59:30.560 --> 00:59:31.500
where we

00:59:31.500 --> 00:59:32.040
sometimes

00:59:32.040 --> 00:59:34.500
use excel

00:59:34.500 --> 00:59:34.940
to look at

00:59:34.940 --> 00:59:35.320
some data

00:59:35.320 --> 00:59:35.820
so

00:59:35.820 --> 00:59:37.000
traditionally

00:59:37.000 --> 00:59:37.400
speaking

00:59:37.400 --> 00:59:38.260
before

00:59:38.260 --> 00:59:39.080
you know

00:59:39.080 --> 00:59:39.920
typically any

00:59:39.920 --> 00:59:40.660
lab that

00:59:40.660 --> 00:59:42.340
goes from

00:59:42.340 --> 00:59:42.960
you know

00:59:42.960 --> 00:59:43.840
zero to the

00:59:43.840 --> 00:59:44.300
point where you

00:59:44.300 --> 00:59:44.700
have a web

00:59:44.700 --> 00:59:45.180
application that

00:59:45.180 --> 00:59:45.540
automates

00:59:45.540 --> 00:59:45.940
everything

00:59:45.940 --> 00:59:46.680
the

00:59:46.680 --> 00:59:47.160
intermediate

00:59:47.160 --> 00:59:47.660
phase is

00:59:47.660 --> 00:59:48.280
using a

00:59:48.280 --> 00:59:48.480
lot of

00:59:48.480 --> 00:59:48.700
excel

00:59:48.700 --> 00:59:49.180
so it's

00:59:49.180 --> 00:59:49.680
very common

00:59:49.680 --> 00:59:50.080
in many

00:59:50.080 --> 00:59:50.600
labs

00:59:50.600 --> 00:59:52.220
to use

00:59:52.220 --> 00:59:52.580
excel

00:59:52.580 --> 00:59:53.380
for a lot

00:59:53.380 --> 00:59:53.840
of things

00:59:53.840 --> 00:59:55.400
for qc

00:59:55.400 --> 00:59:56.000
for charts

00:59:56.000 --> 00:59:56.520
for tracking

00:59:56.520 --> 00:59:58.180
so we

00:59:58.180 --> 00:59:59.160
use this

00:59:59.160 --> 01:00:00.240
open pi

01:00:00.240 --> 01:00:00.680
excel

01:00:00.680 --> 01:00:03.620
for a few

01:00:03.620 --> 01:00:04.120
things one

01:00:04.120 --> 01:00:04.600
of them is

01:00:04.600 --> 01:00:05.080
when we

01:00:05.080 --> 01:00:05.500
have a lot

01:00:05.500 --> 01:00:06.240
of you know

01:00:06.240 --> 01:00:06.760
the sequencing

01:00:06.760 --> 01:00:07.340
data that we

01:00:07.340 --> 01:00:07.840
have to

01:00:07.840 --> 01:00:08.920
summarize and

01:00:08.920 --> 01:00:09.420
then generate

01:00:09.420 --> 01:00:09.980
a qc

01:00:09.980 --> 01:00:10.920
to be able

01:00:10.920 --> 01:00:12.720
to present

01:00:12.720 --> 01:00:13.480
that to

01:00:13.480 --> 01:00:14.140
essentially create

01:00:14.140 --> 01:00:14.440
an excel

01:00:14.440 --> 01:00:15.040
document on the

01:00:15.040 --> 01:00:15.320
fly

01:00:15.320 --> 01:00:16.340
from the

01:00:16.340 --> 01:00:17.140
backend to

01:00:17.140 --> 01:00:17.840
provide that

01:00:17.840 --> 01:00:18.220
you know

01:00:18.220 --> 01:00:18.680
whatever data

01:00:18.680 --> 01:00:19.200
they want to

01:00:19.200 --> 01:00:19.640
look at in

01:00:19.640 --> 01:00:19.980
terms of

01:00:19.980 --> 01:00:21.160
statistics or

01:00:21.160 --> 01:00:21.620
you know

01:00:21.620 --> 01:00:21.960
list of

01:00:21.960 --> 01:00:22.900
variants or

01:00:22.900 --> 01:00:24.200
some form of

01:00:24.200 --> 01:00:24.520
you know

01:00:24.520 --> 01:00:25.300
calculation they

01:00:25.300 --> 01:00:25.640
want to do

01:00:25.640 --> 01:00:26.480
further that's

01:00:26.480 --> 01:00:26.960
where we use

01:00:26.960 --> 01:00:27.400
this package

01:00:27.400 --> 01:00:28.700
typically we use

01:00:28.700 --> 01:00:29.280
it as part of

01:00:29.280 --> 01:00:30.140
our biofranics

01:00:30.140 --> 01:00:31.020
pipeline when

01:00:31.020 --> 01:00:31.320
we have to

01:00:31.320 --> 01:00:31.760
generate those

01:00:31.760 --> 01:00:32.720
things but

01:00:32.720 --> 01:00:33.800
it's a very

01:00:33.800 --> 01:00:34.260
handy tool

01:00:34.260 --> 01:00:34.980
we actually

01:00:34.980 --> 01:00:35.400
use something

01:00:35.400 --> 01:00:36.100
similar and

01:00:36.100 --> 01:00:36.880
I'm forgetting

01:00:36.880 --> 01:00:37.280
the name of

01:00:37.280 --> 01:00:37.620
the package

01:00:37.620 --> 01:00:38.200
that is used

01:00:38.200 --> 01:00:41.200
to generate

01:00:41.200 --> 01:00:42.780
our document

01:00:42.780 --> 01:00:43.400
like we use

01:00:43.400 --> 01:00:43.760
some word

01:00:43.760 --> 01:00:44.260
documents for

01:00:44.260 --> 01:00:44.480
creating

01:00:44.480 --> 01:00:45.720
reports but

01:00:45.720 --> 01:00:46.240
we also use

01:00:46.240 --> 01:00:46.800
python there

01:00:46.800 --> 01:00:47.320
to be able

01:00:47.320 --> 01:00:47.760
to summarize

01:00:47.760 --> 01:00:48.220
a lot of

01:00:48.220 --> 01:00:48.620
these data

01:00:48.620 --> 01:00:49.020
points and

01:00:49.020 --> 01:00:49.460
then create

01:00:49.460 --> 01:00:49.820
a word

01:00:49.820 --> 01:00:50.220
document

01:00:50.220 --> 01:00:51.540
that you

01:00:51.540 --> 01:00:51.800
know it

01:00:51.800 --> 01:00:52.160
starts with

01:00:52.160 --> 01:00:52.680
a template

01:00:52.680 --> 01:00:53.040
of a word

01:00:53.040 --> 01:00:53.580
document and

01:00:53.580 --> 01:00:54.420
then use

01:00:54.420 --> 01:00:54.880
python to

01:00:54.880 --> 01:00:55.180
fill up

01:00:55.180 --> 01:00:55.600
all these

01:00:55.600 --> 01:00:55.960
you know

01:00:55.960 --> 01:00:57.520
right here's

01:00:57.520 --> 01:00:58.100
where the graph

01:00:58.100 --> 01:00:58.620
goes here's

01:00:58.620 --> 01:00:59.180
where the summary

01:00:59.180 --> 01:00:59.920
goes here's

01:00:59.920 --> 01:01:00.240
where the

01:01:00.240 --> 01:01:00.780
detected

01:01:00.780 --> 01:01:01.600
whatever it

01:01:01.600 --> 01:01:02.040
goes yeah

01:01:02.040 --> 01:01:02.960
right yeah

01:01:02.960 --> 01:01:04.360
cool are you

01:01:04.360 --> 01:01:05.440
here's two

01:01:05.440 --> 01:01:05.860
things that

01:01:05.860 --> 01:01:06.800
overlap are you

01:01:06.800 --> 01:01:07.300
familiar with

01:01:07.300 --> 01:01:08.220
this this

01:01:08.220 --> 01:01:08.860
thing where

01:01:08.860 --> 01:01:09.660
scientists

01:01:09.660 --> 01:01:10.260
rename

01:01:10.260 --> 01:01:11.200
human genes

01:01:11.200 --> 01:01:11.740
to stop

01:01:11.740 --> 01:01:12.440
excel from

01:01:12.440 --> 01:01:13.240
misreading

01:01:13.240 --> 01:01:14.160
oh yes

01:01:14.160 --> 01:01:15.360
yes absolutely

01:01:15.360 --> 01:01:17.100
oh my gosh

01:01:17.100 --> 01:01:18.160
this is crazy

01:01:18.160 --> 01:01:22.060
yes yes

01:01:22.060 --> 01:01:22.860
it happens

01:01:22.860 --> 01:01:23.880
when we import

01:01:23.880 --> 01:01:24.360
a lot of this

01:01:24.360 --> 01:01:25.260
data coming from

01:01:25.260 --> 01:01:25.860
somewhere we'll

01:01:25.860 --> 01:01:27.180
see entries like

01:01:27.180 --> 01:01:28.720
september 14th or

01:01:28.720 --> 01:01:29.300
you know march

01:01:29.300 --> 01:01:30.880
19th these are

01:01:30.880 --> 01:01:33.480
not yeah this is a

01:01:33.480 --> 01:01:34.160
big problem going

01:01:34.160 --> 01:01:34.740
in and out of

01:01:34.740 --> 01:01:35.780
excel and so as

01:01:35.780 --> 01:01:36.500
much as you can do

01:01:36.500 --> 01:01:37.200
in python or

01:01:37.200 --> 01:01:37.760
any proper

01:01:37.760 --> 01:01:38.660
programming language

01:01:38.660 --> 01:01:39.640
rather than

01:01:39.640 --> 01:01:41.260
using excel but

01:01:41.260 --> 01:01:41.960
there was one

01:01:41.960 --> 01:01:44.780
that was m-a-r-c-h-1

01:01:44.780 --> 01:01:45.800
or march one

01:01:45.800 --> 01:01:48.200
yes or s-e-p-t-1

01:01:48.200 --> 01:01:50.840
it's it's very

01:01:50.840 --> 01:01:51.760
funny some well

01:01:51.760 --> 01:01:52.260
some of the

01:01:52.260 --> 01:01:52.780
gene names are

01:01:52.780 --> 01:01:53.700
funny but then

01:01:53.700 --> 01:01:55.020
excel you know

01:01:55.020 --> 01:01:55.580
gets it to the

01:01:55.580 --> 01:01:56.480
next level when it

01:01:56.480 --> 01:01:57.160
changes the names

01:01:57.160 --> 01:02:00.720
this doesn't make

01:02:00.720 --> 01:02:01.560
any sense yeah

01:02:01.560 --> 01:02:02.180
yeah it doesn't

01:02:02.180 --> 01:02:02.720
make any sense

01:02:02.720 --> 01:02:03.840
yeah all right

01:02:03.840 --> 01:02:04.680
on to the next

01:02:04.680 --> 01:02:05.340
one hera

01:02:05.340 --> 01:02:06.860
yes hera this

01:02:06.860 --> 01:02:07.480
is very interesting

01:02:07.480 --> 01:02:08.220
so this is where

01:02:08.220 --> 01:02:09.420
i think um

01:02:09.420 --> 01:02:11.680
you know where

01:02:11.680 --> 01:02:12.960
in our instance

01:02:12.960 --> 01:02:14.880
we are going

01:02:14.880 --> 01:02:15.680
away from

01:02:15.680 --> 01:02:16.440
standard web

01:02:16.440 --> 01:02:17.420
applications standard

01:02:17.420 --> 01:02:17.920
bioinformatics

01:02:17.920 --> 01:02:18.760
pipeline to really

01:02:18.760 --> 01:02:19.660
touching devops

01:02:19.660 --> 01:02:20.800
using python and

01:02:20.800 --> 01:02:21.680
so one of the

01:02:21.680 --> 01:02:22.880
things that um

01:02:22.880 --> 01:02:24.840
typically uh we

01:02:24.840 --> 01:02:25.320
get to the point

01:02:25.320 --> 01:02:26.240
when we scale up

01:02:26.240 --> 01:02:26.820
our bioinformatics

01:02:26.820 --> 01:02:27.540
pipeline where we

01:02:27.540 --> 01:02:28.000
have multiple

01:02:28.000 --> 01:02:28.720
samples and

01:02:28.720 --> 01:02:29.720
multiple runs and

01:02:29.720 --> 01:02:30.760
everything needs to

01:02:30.760 --> 01:02:31.520
be orchestrated in

01:02:31.520 --> 01:02:32.620
a way where you

01:02:32.620 --> 01:02:33.680
have uh you know

01:02:33.680 --> 01:02:34.200
while you're running

01:02:34.200 --> 01:02:34.940
your pipeline you

01:02:34.940 --> 01:02:35.320
have a lot of

01:02:35.320 --> 01:02:36.160
visibility into

01:02:36.160 --> 01:02:37.240
how it works

01:02:37.240 --> 01:02:38.540
and so this is

01:02:38.540 --> 01:02:39.640
uh one of our

01:02:39.640 --> 01:02:41.120
um uh projects

01:02:41.120 --> 01:02:41.820
we are working on

01:02:41.820 --> 01:02:43.180
to move our

01:02:43.180 --> 01:02:44.120
current bioinformatics

01:02:44.120 --> 01:02:44.980
pipeline the way it

01:02:44.980 --> 01:02:45.760
works you know

01:02:45.760 --> 01:02:46.400
kind of on a single

01:02:46.400 --> 01:02:47.160
server to be able

01:02:47.160 --> 01:02:48.580
to use um

01:02:48.580 --> 01:02:49.660
the kubernetes

01:02:49.660 --> 01:02:50.400
cluster to actually

01:02:50.400 --> 01:02:51.700
deploy the uh

01:02:51.700 --> 01:02:53.220
the long running

01:02:53.220 --> 01:02:54.100
pipelines onto that

01:02:54.100 --> 01:02:54.900
and so there are

01:02:54.900 --> 01:02:55.760
many options you

01:02:55.760 --> 01:02:56.380
know there are

01:02:56.380 --> 01:02:57.660
a more standard

01:02:57.660 --> 01:02:58.720
sort of you know

01:02:58.720 --> 01:03:00.020
uh whittle based

01:03:00.020 --> 01:03:01.340
uh you know

01:03:01.340 --> 01:03:02.280
kind of you know

01:03:02.280 --> 01:03:03.300
protocols that you can

01:03:03.300 --> 01:03:04.640
use uh to run

01:03:04.640 --> 01:03:05.400
on either cloud

01:03:05.400 --> 01:03:06.700
or hpc

01:03:06.700 --> 01:03:07.560
environments there

01:03:07.560 --> 01:03:09.340
is a there's a

01:03:09.340 --> 01:03:10.020
very popular tool

01:03:10.020 --> 01:03:10.760
called next flow

01:03:10.760 --> 01:03:12.180
that is used to be

01:03:12.180 --> 01:03:13.280
able to you know

01:03:13.280 --> 01:03:14.340
kind of create your

01:03:14.340 --> 01:03:15.420
data analysis

01:03:15.420 --> 01:03:16.060
pipe flow you can

01:03:16.060 --> 01:03:16.800
sort of define that

01:03:16.800 --> 01:03:18.040
and then use any

01:03:18.040 --> 01:03:18.900
backend to deploy

01:03:18.900 --> 01:03:20.760
it um one of the

01:03:20.760 --> 01:03:21.740
things that we kind

01:03:21.740 --> 01:03:22.660
of when i was

01:03:22.660 --> 01:03:23.520
exploring this space

01:03:23.520 --> 01:03:24.520
one thing that one

01:03:24.520 --> 01:03:25.160
of the things i came

01:03:25.160 --> 01:03:27.640
across was um uh

01:03:27.640 --> 01:03:28.560
you know the the

01:03:28.560 --> 01:03:29.460
the whole sort of

01:03:29.460 --> 01:03:30.600
ecosystem that argo

01:03:30.600 --> 01:03:32.280
maintains with uh

01:03:32.280 --> 01:03:32.880
you know argo

01:03:32.880 --> 01:03:34.260
workflow and argo

01:03:34.260 --> 01:03:35.280
cicd and all those

01:03:35.280 --> 01:03:35.980
things so workflow

01:03:35.980 --> 01:03:37.020
was interesting because

01:03:37.020 --> 01:03:38.360
argo provides that

01:03:38.360 --> 01:03:38.920
way where you can

01:03:38.920 --> 01:03:39.760
sort of you know

01:03:39.760 --> 01:03:40.640
write your pipelines

01:03:40.640 --> 01:03:41.580
in a yaml format

01:03:41.580 --> 01:03:42.380
and then have it

01:03:42.380 --> 01:03:43.100
you know deployed

01:03:43.100 --> 01:03:44.020
on the kubernetes

01:03:44.020 --> 01:03:45.020
cluster it really is

01:03:45.020 --> 01:03:45.960
very native to the

01:03:45.960 --> 01:03:46.840
kubernetes cluster

01:03:46.840 --> 01:03:48.080
interesting it sounds

01:03:48.080 --> 01:03:49.080
a little bit like

01:03:49.080 --> 01:03:50.760
ansible but for

01:03:50.760 --> 01:03:53.060
specifically for um

01:03:53.060 --> 01:03:54.520
bio type of

01:03:54.520 --> 01:03:55.220
projects right

01:03:55.220 --> 01:03:57.000
yeah so argo so

01:03:57.000 --> 01:03:57.680
interesting thing is

01:03:57.680 --> 01:03:59.220
argo when you know

01:03:59.220 --> 01:04:00.300
when this argo

01:04:00.300 --> 01:04:01.080
workflows was set up

01:04:01.080 --> 01:04:02.680
really for a lot of

01:04:02.680 --> 01:04:03.880
cicd automations in

01:04:03.880 --> 01:04:05.580
mind so you know it

01:04:05.580 --> 01:04:06.380
is yes you can run

01:04:06.380 --> 01:04:07.560
data pipelines in

01:04:07.560 --> 01:04:08.540
general but never it

01:04:08.540 --> 01:04:09.780
was never at least in

01:04:09.780 --> 01:04:10.440
its description it

01:04:10.440 --> 01:04:11.860
never describes use

01:04:11.860 --> 01:04:12.660
case sort of in

01:04:12.660 --> 01:04:14.340
bioinformatics or you

01:04:14.340 --> 01:04:15.800
know biology pipeline

01:04:15.800 --> 01:04:17.040
analysis and

01:04:17.040 --> 01:04:18.960
similarly you know it

01:04:18.960 --> 01:04:20.200
it was like okay it's

01:04:20.200 --> 01:04:21.020
a generic tool you can

01:04:21.020 --> 01:04:21.600
use it for whatever

01:04:21.600 --> 01:04:23.320
you want so i tried

01:04:23.320 --> 01:04:25.160
it out with using you

01:04:25.160 --> 01:04:26.620
know like a yaml

01:04:26.620 --> 01:04:27.440
file and it was a

01:04:27.440 --> 01:04:28.560
simple four-step

01:04:28.560 --> 01:04:29.640
pipeline it was

01:04:29.640 --> 01:04:31.000
wonderful it was

01:04:31.000 --> 01:04:31.920
magical and the good

01:04:31.920 --> 01:04:34.000
thing was uh with

01:04:34.000 --> 01:04:35.140
argo like the argo

01:04:35.140 --> 01:04:36.200
workflow when you

01:04:36.200 --> 01:04:37.560
install that on your

01:04:37.560 --> 01:04:38.480
kubernetes cluster it

01:04:38.480 --> 01:04:40.040
comes with a native

01:04:40.040 --> 01:04:42.900
um web interface so

01:04:42.900 --> 01:04:44.620
it's you know if i'm

01:04:44.620 --> 01:04:45.280
sure if you've heard

01:04:45.280 --> 01:04:46.540
about the workflow

01:04:46.540 --> 01:04:47.940
option with uh

01:04:47.940 --> 01:04:49.820
uh airflow so airflow

01:04:49.820 --> 01:04:50.980
is a package that also

01:04:50.980 --> 01:04:51.820
you know there's a

01:04:51.820 --> 01:04:53.220
nice python SDK for

01:04:53.220 --> 01:04:54.460
that where you have

01:04:54.460 --> 01:04:55.440
you know you deploy it

01:04:55.440 --> 01:04:55.900
on a kubernetes

01:04:55.900 --> 01:04:56.960
cluster we have all

01:04:56.960 --> 01:04:58.400
these amazing you know

01:04:58.400 --> 01:04:59.280
visualizations to show

01:04:59.280 --> 01:05:00.740
what step you run or if

01:05:00.740 --> 01:05:01.780
there's some error there

01:05:01.780 --> 01:05:03.260
it'll do that argo does

01:05:03.260 --> 01:05:04.360
the same thing so it

01:05:04.360 --> 01:05:05.780
has it has obviously the

01:05:05.780 --> 01:05:06.880
built-in capability to

01:05:06.880 --> 01:05:07.960
interact with it as an

01:05:07.960 --> 01:05:09.800
api but then also there's

01:05:09.800 --> 01:05:10.820
a web interface that it'll

01:05:10.820 --> 01:05:11.700
deploy and it can have

01:05:11.700 --> 01:05:13.160
visibility into every

01:05:13.160 --> 01:05:14.080
step of the process you

01:05:14.080 --> 01:05:14.980
can summarize and see

01:05:14.980 --> 01:05:16.700
the entire tree so that

01:05:16.700 --> 01:05:17.480
was very interesting for

01:05:17.480 --> 01:05:18.300
us because we could get

01:05:18.300 --> 01:05:19.220
all that thing done in a

01:05:19.220 --> 01:05:21.040
single thing in a single

01:05:21.040 --> 01:05:22.880
goal but then uh our

01:05:22.880 --> 01:05:24.100
challenge was or well our

01:05:24.100 --> 01:05:25.560
desire was that if you

01:05:25.560 --> 01:05:26.820
could integrate that with

01:05:26.820 --> 01:05:28.480
our limb system that we

01:05:28.480 --> 01:05:29.380
were working on using fast

01:05:29.380 --> 01:05:30.860
api so that it was hey

01:05:30.860 --> 01:05:31.640
if there's any python

01:05:31.640 --> 01:05:32.960
SDK and so that's where

01:05:32.960 --> 01:05:34.140
hera comes so hera

01:05:34.140 --> 01:05:35.820
essentially is a SDK or a

01:05:35.820 --> 01:05:37.780
wrapper that's essentially

01:05:37.780 --> 01:05:39.300
talking to our goal but you

01:05:39.300 --> 01:05:40.820
can define your pipeline

01:05:40.820 --> 01:05:44.220
steps as uh you know dax in

01:05:44.220 --> 01:05:45.500
python and so that makes

01:05:45.500 --> 01:05:47.040
the process so super

01:05:47.040 --> 01:05:48.540
simple where you're now

01:05:48.540 --> 01:05:50.500
natively essentially we can

01:05:50.500 --> 01:05:51.940
integrate that as a back

01:05:51.940 --> 01:05:53.500
end to our uh web

01:05:53.500 --> 01:05:55.080
application and so then

01:05:55.080 --> 01:05:56.420
it's almost like you know

01:05:56.420 --> 01:05:58.100
it's python again from

01:05:58.100 --> 01:05:59.080
start to finish you're not

01:05:59.080 --> 01:05:59.840
you know getting out of

01:05:59.840 --> 01:06:01.400
that and it's it's uh again

01:06:01.400 --> 01:06:02.280
it's a very well-maintained

01:06:02.280 --> 01:06:03.760
application so so we are

01:06:03.760 --> 01:06:05.600
currently doing a validation

01:06:05.600 --> 01:06:06.860
to be able to make sure

01:06:06.860 --> 01:06:08.500
that or demonstrate that you

01:06:08.500 --> 01:06:09.620
know it's equally

01:06:09.620 --> 01:06:11.660
performant when we compare

01:06:11.660 --> 01:06:13.680
to a more sort of uh native

01:06:13.680 --> 01:06:15.440
shell based uh you know

01:06:15.440 --> 01:06:16.380
execution on the pipeline

01:06:16.380 --> 01:06:17.640
okay yeah this is new to

01:06:17.640 --> 01:06:18.980
me i mean of course i know

01:06:18.980 --> 01:06:20.340
airflow but not hera cool

01:06:20.340 --> 01:06:22.680
all right hi in sim did i

01:06:22.680 --> 01:06:24.640
grab the right one here uh

01:06:24.640 --> 01:06:27.780
package no i think it's it's

01:06:27.780 --> 01:06:30.740
similar uh let me uh see if

01:06:30.740 --> 01:06:32.820
i can i can send you the link

01:06:32.820 --> 01:06:34.340
yeah throw it in the private

01:06:34.340 --> 01:06:35.920
chat here and i'll pull it up

01:06:35.920 --> 01:06:40.300
yeah uh yeah okay there we

01:06:40.300 --> 01:06:43.340
go in sim yeah okay got it

01:06:43.340 --> 01:06:46.120
yeah so this is a this is a

01:06:46.120 --> 01:06:48.500
very interesting space in uh

01:06:48.500 --> 01:06:50.580
next generation sequencing

01:06:50.580 --> 01:06:52.580
assay or for uh you know

01:06:52.580 --> 01:06:53.400
high throughput sequencing

01:06:53.400 --> 01:06:54.780
assays so what happens is

01:06:54.780 --> 01:06:56.540
uh as i mentioned that one of

01:06:56.540 --> 01:06:57.600
the things that's required for

01:06:57.600 --> 01:06:58.720
a clinical lab is to be able

01:06:58.720 --> 01:07:00.440
to perform a validation on

01:07:00.440 --> 01:07:02.320
multiple samples of tumors that

01:07:02.320 --> 01:07:03.900
have certain mutations and

01:07:03.900 --> 01:07:05.040
then you can demonstrate that

01:07:05.040 --> 01:07:06.660
you know yes the assay works

01:07:06.660 --> 01:07:09.020
because you have tested you

01:07:09.020 --> 01:07:11.060
know 100 samples that have

01:07:11.060 --> 01:07:13.180
300 different you know mutations

01:07:13.180 --> 01:07:14.600
of genetic alterations and then

01:07:14.600 --> 01:07:16.840
you can demonstrate that yes your

01:07:16.840 --> 01:07:18.300
pipeline or your assay was able to

01:07:18.300 --> 01:07:19.700
pick it up so you can say that

01:07:19.700 --> 01:07:21.400
you know your assay is you know

01:07:21.400 --> 01:07:23.020
x percentage sensitive x

01:07:23.020 --> 01:07:24.500
percentage specific and you know

01:07:24.500 --> 01:07:26.020
your recall rate and things like

01:07:26.020 --> 01:07:27.660
that so what happens is when you're

01:07:27.660 --> 01:07:31.500
trying to um get those samples that

01:07:31.500 --> 01:07:33.440
have these very difficult or

01:07:33.440 --> 01:07:34.920
challenging variants to detect

01:07:34.920 --> 01:07:36.740
because they're just you know

01:07:36.740 --> 01:07:38.680
complex in how they occur

01:07:38.680 --> 01:07:40.620
biologically in the cell is very

01:07:40.620 --> 01:07:42.220
difficult some of these are very

01:07:42.220 --> 01:07:43.800
rare there may be only two

01:07:43.800 --> 01:07:45.640
samples in the entire world or so

01:07:45.640 --> 01:07:47.040
it's just not possible practically

01:07:47.040 --> 01:07:48.660
to you know get those samples

01:07:48.660 --> 01:07:50.220
unless we wait for like you know

01:07:50.220 --> 01:07:51.700
10 years to you know validate that

01:07:51.700 --> 01:07:53.840
so the idea is that if it is

01:07:53.840 --> 01:07:55.560
possible to be able to use

01:07:55.560 --> 01:07:58.840
algorithms which can manipulate the

01:07:58.840 --> 01:08:00.520
existing sequence so for example

01:08:00.520 --> 01:08:02.840
we have a sequence data from an

01:08:02.840 --> 01:08:05.620
existing real tumor sample but we

01:08:05.620 --> 01:08:07.560
can manipulate that in a way where

01:08:07.560 --> 01:08:09.400
we introduce these mutations in a

01:08:09.400 --> 01:08:11.240
in silico so we can introduce

01:08:11.240 --> 01:08:13.120
you know snbs or insertion

01:08:13.120 --> 01:08:15.360
deletion mutations and then use that

01:08:15.360 --> 01:08:17.200
same file to then feed into our

01:08:17.200 --> 01:08:18.400
pipeline biophonics pipeline and

01:08:18.400 --> 01:08:19.400
say okay run through the entire

01:08:19.400 --> 01:08:21.500
data pipeline and at the end let's

01:08:21.500 --> 01:08:22.780
see if we are able to identify

01:08:22.780 --> 01:08:24.260
those variants that we insert and

01:08:24.260 --> 01:08:25.080
so that's where this

01:08:25.080 --> 01:08:27.920
silico mutagenesis comes it's a

01:08:27.920 --> 01:08:30.140
very hot topic it's a very relevant

01:08:30.140 --> 01:08:32.000
topic of interest to really fill

01:08:32.000 --> 01:08:34.460
this large gap in terms of

01:08:34.460 --> 01:08:37.780
availability of rare variants and

01:08:37.780 --> 01:08:39.240
rare samples and how we can really

01:08:39.240 --> 01:08:42.020
improve sort of some of these rare

01:08:42.020 --> 01:08:43.680
but very clinically significant edge

01:08:43.680 --> 01:08:45.080
cases where we don't want to miss

01:08:45.080 --> 01:08:46.640
those variants and actually see

01:08:46.640 --> 01:08:48.480
those in real tumor samples and so

01:08:48.480 --> 01:08:50.760
this is a python package that was

01:08:50.760 --> 01:08:53.380
developed by at the university of

01:08:53.380 --> 01:08:54.600
chicago as part of their clinical

01:08:54.600 --> 01:08:57.680
lab and so what really it does is

01:08:57.680 --> 01:09:00.720
it will take in a list of different

01:09:00.720 --> 01:09:03.000
you know mutations for example in this

01:09:03.000 --> 01:09:04.540
plot i think they give examples of

01:09:04.540 --> 01:09:06.780
you know insertion deletion insertions

01:09:06.780 --> 01:09:08.500
where you have extra sequence or

01:09:08.500 --> 01:09:09.360
deletion where you have certain

01:09:09.360 --> 01:09:11.820
segments which are missing or snbs or

01:09:11.820 --> 01:09:14.060
single nucleoid variants where you have

01:09:14.060 --> 01:09:15.560
one nucleotide that got switched with

01:09:15.560 --> 01:09:17.540
another one and so these are typically

01:09:17.540 --> 01:09:20.420
that we practically see in in like real

01:09:20.420 --> 01:09:22.880
samples or real tumor samples but this is a

01:09:22.880 --> 01:09:26.040
way to mimic that you know in a sample

01:09:26.040 --> 01:09:28.520
that does not have it and so this python

01:09:28.520 --> 01:09:30.840
package is able to you know take that

01:09:30.840 --> 01:09:32.820
list from you say okay i have a list of

01:09:32.820 --> 01:09:35.640
these 20 important mutations that i know

01:09:35.640 --> 01:09:37.200
from the public databases have been

01:09:37.200 --> 01:09:40.320
reported but i want them to be inserted

01:09:40.320 --> 01:09:42.660
into my data set that was created from

01:09:42.660 --> 01:09:44.980
say a set of three or four real tumors

01:09:44.980 --> 01:09:47.940
and then use that to challenge the pipeline

01:09:47.940 --> 01:09:49.820
to say that hey can you still pick it up

01:09:49.820 --> 01:09:50.780
and so i see

01:09:50.780 --> 01:09:53.980
simulate these rare changes and then

01:09:53.980 --> 01:09:56.800
yes test or exercise your setup

01:09:56.800 --> 01:09:59.500
right we've got a few more to cover but i

01:09:59.500 --> 01:10:00.980
think we're getting a little bit short on

01:10:00.980 --> 01:10:02.960
time so let me just close this out with a

01:10:02.960 --> 01:10:05.500
final question for you because i know this

01:10:05.500 --> 01:10:06.780
is the topic du jour

01:10:06.780 --> 01:10:11.820
what is uh what is ai and llms look like

01:10:11.820 --> 01:10:14.160
for you guys is it does it matter is it

01:10:14.160 --> 01:10:15.880
really powerful is it super important

01:10:15.880 --> 01:10:18.360
uh i mean genetics is kind of text data in

01:10:18.360 --> 01:10:21.420
a sense and so yes sort of in the space of

01:10:21.420 --> 01:10:24.460
how it could apply right right it is it is uh

01:10:24.460 --> 01:10:27.540
it is a it is a text data and it's a lot of um

01:10:27.540 --> 01:10:30.140
you know there's a when you talk about like a

01:10:30.140 --> 01:10:32.660
search space a lot of the search space is

01:10:32.660 --> 01:10:34.800
very text based you know there is some

01:10:34.800 --> 01:10:36.340
numerical base was a lot of text based

01:10:36.340 --> 01:10:39.360
search as well and i think uh across the

01:10:39.360 --> 01:10:41.780
entire spectrum from where we start with

01:10:41.780 --> 01:10:43.620
very raw sequencing data to the point that

01:10:43.620 --> 01:10:47.780
we are trying to uh you know uh ask the

01:10:47.780 --> 01:10:50.300
question that okay i found this rare or

01:10:50.300 --> 01:10:52.440
novel mutation in this particular gene what

01:10:52.440 --> 01:10:54.000
does it mean you know what human has it

01:10:54.000 --> 01:10:56.280
been described what disease does it relate

01:10:56.280 --> 01:11:00.520
to uh one of the things that we do as um

01:11:00.520 --> 01:11:02.320
molecular pathologies and this is sort of

01:11:02.320 --> 01:11:03.940
where a lot of the medical work comes in is

01:11:03.940 --> 01:11:06.060
where we really go through a lot of the

01:11:06.060 --> 01:11:07.360
medical literature what we have learned

01:11:07.360 --> 01:11:10.520
before new publications papers out there

01:11:10.520 --> 01:11:12.480
that you know that have a lot of data in

01:11:12.480 --> 01:11:14.860
terms of you know studies that have done on

01:11:14.860 --> 01:11:16.340
this particular gene and they've described

01:11:16.340 --> 01:11:18.920
like okay these alterations actually activate

01:11:18.920 --> 01:11:21.080
the gene or is bad for the tumor or you know

01:11:21.080 --> 01:11:23.800
makes it treatment resistant um so you can

01:11:23.800 --> 01:11:25.800
see the naturally a lot of text starts and

01:11:25.800 --> 01:11:28.820
happens and so in that space uh we are seeing

01:11:28.820 --> 01:11:30.720
in the i would say in the past you know

01:11:30.720 --> 01:11:32.700
three to four years there's been a lot of uh

01:11:32.700 --> 01:11:36.160
applications of ai tools that have come out um

01:11:36.160 --> 01:11:38.040
you know particularly in the space of variant

01:11:38.040 --> 01:11:40.280
calling where we have this genomic sequence data

01:11:40.280 --> 01:11:43.260
and we're trying to identify variants uh you know

01:11:43.260 --> 01:11:46.160
one of the examples uh that's been talked about a lot

01:11:46.160 --> 01:11:49.240
is the uh deep variant caller it's called deep variant

01:11:49.240 --> 01:11:51.780
from uh from the team at google who developed that

01:11:51.780 --> 01:11:55.240
uh that uses a lot of the ai techniques to be able to

01:11:55.240 --> 01:11:57.720
you know pick those things up uh there are some

01:11:57.720 --> 01:12:01.860
genomic databases that um we use for in silico

01:12:01.860 --> 01:12:03.740
prediction for example if you have a variant we have

01:12:03.740 --> 01:12:07.180
no idea about it it uses there's a database called

01:12:07.180 --> 01:12:12.300
dbscsnv that uses random forest um techniques and i

01:12:12.300 --> 01:12:14.680
think it used another algorithm to predict if a

01:12:14.680 --> 01:12:18.340
certain site where there's a mutation can enhance

01:12:18.340 --> 01:12:21.480
uh abnormal mechanism called splicing versus not

01:12:21.480 --> 01:12:24.380
uh similarly there's a lot of tools that are coming in and

01:12:24.380 --> 01:12:28.060
the llms i think are i would say not mainstream but i think

01:12:28.060 --> 01:12:30.000
there's a lot of interesting research that is coming around

01:12:30.000 --> 01:12:32.140
there where people are trying to use um

01:12:32.140 --> 01:12:36.420
llms for doing these more broader text search saying that

01:12:36.420 --> 01:12:40.460
hey you know i have these you know i don't know thousand articles

01:12:40.460 --> 01:12:44.940
and i want to find these particular combination of uh words

01:12:44.940 --> 01:12:50.120
that you know you know uh there's a combination of a disease and a mutation

01:12:50.120 --> 01:12:54.940
and what do i get back on that um i personally tried you know chat gpt with

01:12:54.940 --> 01:12:59.320
different you know like uh phrases and uh questions about it

01:12:59.320 --> 01:13:03.560
what i've seen so far is and this is purely my personal experience i think

01:13:03.560 --> 01:13:08.460
a lot of it reads very real but when you start to look into the

01:13:08.460 --> 01:13:11.500
references as to what it references then you quickly figure out

01:13:11.500 --> 01:13:16.260
right just making that yeah this is not the real deal and so i think

01:13:16.260 --> 01:13:22.160
um i think it's uh you know i don't i'm not a very pessimistic person i would say

01:13:22.160 --> 01:13:26.300
oh no this is all garbage but i think uh there is opportunity there it's just how

01:13:26.300 --> 01:13:31.140
do you train it uh maybe there's a a space or an opportunity and it probably

01:13:31.140 --> 01:13:35.620
already has been people are pursuing this is training a smaller model but

01:13:35.620 --> 01:13:40.960
it's really deeply in genetics or it's trying not trying to use a model that tries to understand

01:13:40.960 --> 01:13:46.680
everything right right yeah it's more yeah more in the medical literature or the genomic literature

01:13:46.680 --> 01:13:51.240
to be able to like meaning is enhanced in that yes so i think there's active work going on there

01:13:51.240 --> 01:13:56.680
but it's uh yeah it's i think it's making you know a lot of a lot of interesting research a lot of

01:13:56.680 --> 01:14:02.240
potential impact on how you know we do things and obviously the tool sets that we currently use

01:14:02.240 --> 01:14:07.600
we might expect in the next 10 years to change yeah for sure all right final thought here people

01:14:07.600 --> 01:14:14.320
are listening they're maybe doing similar work to you how do they get started what would you tell them

01:14:14.320 --> 01:14:20.400
get going with python and some of these packages yeah i mean i would uh you know my uh reflecting on my

01:14:20.400 --> 01:14:27.380
own experience sort of you know in a very uh winded way that i ended up here i think um you know

01:14:27.380 --> 01:14:34.340
python is i i i feel programming in general and i think python particularly as uh programming language

01:14:34.340 --> 01:14:40.420
is a very low you know sort of you know entry point in terms of being able to really quickly get things

01:14:40.420 --> 01:14:46.740
done like learn it easily and get things done i think it should be to me anybody anybody who's trying to pursue

01:14:46.740 --> 01:14:55.380
something in biology or competition biology or bioinformatics i think this is the first thing it's it's something easy to do

01:14:55.380 --> 01:15:00.740
um to be you know i would say relatively easy to do to be able to get from that anybody with you know

01:15:00.740 --> 01:15:10.100
um a desire to learn this has analytical thinking uh i mean i i think investing into python is probably

01:15:10.100 --> 01:15:15.380
the best bet because you can pretty much do anything you want uh that's what i tell you know when i tell

01:15:15.380 --> 01:15:20.500
train people you know in my lab or i talk to other students is that if you want to spend your time you have

01:15:20.500 --> 01:15:25.860
very little time because you're busy you know with your other things uh i think the one thing that can get some

01:15:25.860 --> 01:15:31.860
of the job done and be still aligned with what you're doing is python um and after that i think it's you know it's a

01:15:31.860 --> 01:15:38.980
it's a lot of self-driven learning where you know you're kind of you know looking into things but the good thing is i think the the

01:15:38.980 --> 01:15:44.100
the python community is wonderful it's almost like i sit down and i think about oh i have to solve this problem

01:15:44.100 --> 01:15:49.060
um probably there are 50 other people who think about that and maybe two people have already worked

01:15:49.060 --> 01:15:54.420
on it so it's right they've already published it to pipe the eye and you're good to go absolutely i i

01:15:54.420 --> 01:15:59.940
totally agree with that and you know people should take the couple of weeks get good at it and it'll

01:15:59.940 --> 01:16:08.180
amplify it'll save you time definitely in the long run oh absolutely yes the only thing that i uh that i the only thing i would

01:16:08.180 --> 01:16:16.340
say like an added thing is if somebody is learning python and then they do have an intention you know to

01:16:16.340 --> 01:16:22.020
take it to the point where they would be involved in more serious um like you know application development

01:16:22.020 --> 01:16:26.980
or maintaining an open source package or you know however they contribute to that i think learning a

01:16:26.980 --> 01:16:33.460
little bit more like learning python in its real sense in terms of how to do it right you know there are

01:16:33.460 --> 01:16:39.060
five ways of doing something correctly but i think uh there's one way that is consistent so that it's

01:16:39.060 --> 01:16:44.340
again you know easily shared it's easily maintainable others can easily understand i think that would be

01:16:44.340 --> 01:16:49.540
my second advice it is it takes a little bit time but i think it's well worth the effort to spend the time

01:16:49.540 --> 01:16:57.220
writing you know idiomatic python code so it's um it's portable absolutely all right so mac thank you for

01:16:57.220 --> 01:17:01.380
being on the show it's been great to get this look inside of what you all are doing with python

01:17:01.380 --> 01:17:05.300
yeah thank you for having me on the show i appreciate that yep bye okay bye bye

01:17:05.300 --> 01:17:11.700
this has been another episode of talk python to me thank you to our sponsors be sure to check out

01:17:11.700 --> 01:17:16.980
what they're offering it really helps support the show take some stress out of your life get notified

01:17:16.980 --> 01:17:22.100
immediately about errors and performance issues in your web or mobile applications with sentry

01:17:22.100 --> 01:17:28.420
just visit talkpython.fm/ sentry and get started for free and be sure to use the promo code

01:17:28.420 --> 01:17:35.060
talk python all one word this episode is sponsored by posit connect from the makers of shiny publish

01:17:35.060 --> 01:17:40.740
share and deploy all of your data projects that you're creating using python streamlet dash shiny

01:17:40.740 --> 01:17:48.180
bokeh fast api flask quarto reports dashboards and apis posit connect supports all of them try

01:17:48.180 --> 01:17:55.460
posit connect for free by going to talk python dot fm slash posit p-o-s-i-t want to level up your python

01:17:55.460 --> 01:18:00.980
we have one of the largest catalogs of python video courses over at talk python our content ranges from

01:18:00.980 --> 01:18:06.580
true beginners to deeply advanced topics like memory and async and best of all there's not a subscription

01:18:06.580 --> 01:18:12.580
in sight check it out for yourself at training.talkpython.fm be sure to subscribe to the show open your

01:18:12.580 --> 01:18:18.260
favorite podcast app and search for python we should be right at the top you can also find the itunes feed

01:18:18.260 --> 01:18:25.540
at /itunes the google play feed at /play and the direct rss feed at /rss on talkpython.fm

01:18:25.540 --> 01:18:30.340
we're live streaming most of our recordings these days if you want to be part of the show and have your

01:18:30.340 --> 01:18:36.420
comments featured on the air be sure to subscribe to our youtube channel at talkpython.fm/youtube

01:18:36.420 --> 01:18:41.620
this is your host michael kennedy thanks so much for listening i really appreciate it now get out there

01:18:41.620 --> 01:18:51.780
and write some python code

01:18:51.780 --> 01:19:03.700
you

