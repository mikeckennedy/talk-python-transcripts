WEBVTT

00:00:00.001 --> 00:00:04.860
On this episode, I meet up with Rong Lu and Catherine Kampf from Microsoft while I was at Build this year.

00:00:04.860 --> 00:00:11.940
We cover a bunch of topics around data science and talk about two opposing styles of data science development and related tooling,

00:00:11.940 --> 00:00:17.380
using notebooks in Jupyter or Python code files and editors like Visual Studio Code and PyCharm.

00:00:17.380 --> 00:00:20.300
The conversation was a lot of fun and I'm looking forward to sharing it with you.

00:00:20.300 --> 00:00:25.160
This is Talk Python To Me, episode 217, recorded May 8th, 2019.

00:00:25.160 --> 00:00:44.600
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:44.600 --> 00:00:48.680
This is your host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy.

00:00:48.680 --> 00:00:54.920
Keep up with the show and listen to past episodes at talkpython.fm and follow the show on Twitter via at Talk Python.

00:00:55.700 --> 00:00:58.460
This episode is sponsored by Linode and Backlog.

00:00:58.460 --> 00:01:01.800
Please check out what they're offering during their segments. It really helps support the show.

00:01:01.800 --> 00:01:04.800
Rong, Catherine, welcome to Talk Python.

00:01:04.800 --> 00:01:06.880
Yeah, thank you. Thanks so much for having us.

00:01:06.880 --> 00:01:14.760
Yeah, it's great to be here with you and literally here with you at Microsoft Build at the conference doing some live recording.

00:01:14.760 --> 00:01:17.160
So, quite cool. How's the conference going?

00:01:17.160 --> 00:01:21.560
It's been great. I'm a little sad because it's so sunny out, but the stuff inside is great too.

00:01:21.560 --> 00:01:26.820
Yeah, really exciting news happening here and you see a lot of people getting excited.

00:01:26.820 --> 00:01:30.260
Yeah, is this an event that you've been planning for for a long time?

00:01:30.260 --> 00:01:31.800
Yeah, every year.

00:01:31.800 --> 00:01:34.560
We have the back-to-back PyCon to build.

00:01:34.560 --> 00:01:39.840
It's been a lot of conferencing, a lot of fun announcements, a lot to keep up with, but also met a lot of great people.

00:01:39.840 --> 00:01:41.280
You were also at PyCon, right?

00:01:41.280 --> 00:01:41.800
Yes.

00:01:41.800 --> 00:01:43.520
Yeah, that's pretty awesome. What did you think of PyCon?

00:01:43.520 --> 00:01:45.420
It's great. It was my first PyCon.

00:01:45.420 --> 00:01:49.900
So, pretty cool out there and then see the community and meet people.

00:01:49.900 --> 00:01:53.060
So, it was my first sort of community-run conference.

00:01:53.060 --> 00:02:01.000
I've only been to Microsoft ones in the past, so it was very cool to see that and have more interaction with Python users and Notebooks users.

00:02:01.340 --> 00:02:07.860
Yeah, that's cool. I think both the conferences are pretty special and really nice and I enjoy going to both of them, but they're really different.

00:02:07.860 --> 00:02:08.660
Yeah, definitely.

00:02:09.080 --> 00:02:22.820
For people who haven't gone to Microsoft Build, the experience walking around here is like all this cool stuff and there's like robotics and other kinds of neat things going on, but it's mostly put on by the different Microsoft teams, right?

00:02:22.820 --> 00:02:28.160
Like there's a section of like the Visual Studio for Mac people and you can go talk to the people that work on it and that's great.

00:02:28.160 --> 00:02:33.620
And you go to PyCon and it just doesn't have like that centralized structure, right?

00:02:33.620 --> 00:02:38.700
It's just like a thousand flowers blooming and just, you know, whatever's happening is happening out there.

00:02:38.700 --> 00:02:42.460
So, it's a little more chaotic, but, you know, a little more independent as well.

00:02:42.460 --> 00:02:45.280
I don't know. I think they're both fun and they're both a cool experience.

00:02:45.280 --> 00:02:48.640
There's some nice surprises as well at PyCon.

00:02:48.640 --> 00:03:01.460
Like as I walk through the booth area, like at Build, you kind of expected all these Microsoft Teams there, but at PyCon, you see different companies showing up there because they use Python for development.

00:03:01.460 --> 00:03:01.960
Yeah.

00:03:01.960 --> 00:03:06.260
And like really unexpected companies there, but it's fun.

00:03:06.260 --> 00:03:06.960
It's interesting.

00:03:06.960 --> 00:03:07.820
Yeah, it's super interesting.

00:03:07.820 --> 00:03:08.340
Very different.

00:03:08.340 --> 00:03:18.340
Yeah, you know, one of the parts I really like is the first two and a half days, like the opening night and then the first two days are the Expo Hall days.

00:03:18.340 --> 00:03:19.360
You know, we've got a booth.

00:03:19.360 --> 00:03:20.240
You all had a booth.

00:03:20.240 --> 00:03:21.240
Were you at the booth?

00:03:21.240 --> 00:03:22.100
Yeah, I was.

00:03:22.100 --> 00:03:23.520
Many hours at the booth.

00:03:23.520 --> 00:03:23.980
Yes.

00:03:23.980 --> 00:03:25.780
The booth is a blessing and a curse.

00:03:25.780 --> 00:03:27.480
I was at a booth as well.

00:03:27.480 --> 00:03:30.280
I have been for the last couple of years and it's great.

00:03:30.280 --> 00:03:34.740
You meet so many people, but also like you don't get to experience as much of the rest of the stuff going on.

00:03:34.740 --> 00:03:37.400
But then the next day they take that down.

00:03:37.400 --> 00:03:39.580
It's the poster section and then the job fair.

00:03:39.580 --> 00:03:39.900
Right.

00:03:39.900 --> 00:03:48.380
And the job fair, I think it's pretty revealing because you can walk along and see like all these companies are hiring Python developers, data scientists, web developers, whatever.

00:03:48.580 --> 00:03:51.880
And it's super clear and obvious kind of like what they're up to.

00:03:51.880 --> 00:03:57.520
So you can kind of really put your finger on the pulse of the community by just walking through the job fair.

00:03:57.520 --> 00:03:58.920
Yeah, it was super crowded.

00:03:58.920 --> 00:03:59.440
Yeah.

00:03:59.440 --> 00:04:04.140
So the community is super engaging and super fun.

00:04:04.140 --> 00:04:04.440
Yeah.

00:04:04.440 --> 00:04:05.080
Yeah, absolutely.

00:04:05.080 --> 00:04:06.780
I think that's for sure.

00:04:06.780 --> 00:04:08.520
Both of these events were super cool.

00:04:08.520 --> 00:04:10.400
And I was glad we were all at them.

00:04:10.400 --> 00:04:10.820
That's great.

00:04:11.380 --> 00:04:12.800
So let's start with your story.

00:04:12.800 --> 00:04:14.300
And I guess, Ron, we'll start with you.

00:04:14.300 --> 00:04:16.080
How did you get into programming in Python?

00:04:16.340 --> 00:04:21.240
Actually, about 10 years ago when I was in college, I actually majored in data mining.

00:04:21.240 --> 00:04:24.040
And then back then I learned C.

00:04:24.040 --> 00:04:24.660
Okay.

00:04:24.660 --> 00:04:26.640
But after I graduated, I joined Microsoft.

00:04:26.640 --> 00:04:31.500
I mostly worked on C# related developer tools and then moved to C++.

00:04:31.500 --> 00:04:36.440
And just recently, I just moved from C++ team into the Python team.

00:04:36.440 --> 00:04:38.620
It's like, oh, these people are talking about Python.

00:04:38.620 --> 00:04:41.060
I got to see what's going on there.

00:04:41.060 --> 00:04:47.080
And then, of course, my own knowledge from 10 years ago about data mining no longer applies.

00:04:47.080 --> 00:04:50.980
Like so many new things happening in the AI, data science world.

00:04:50.980 --> 00:04:52.620
And this is super exciting.

00:04:52.620 --> 00:04:53.080
Sure.

00:04:53.080 --> 00:04:55.000
And that's why I got into the Python team.

00:04:55.000 --> 00:04:58.180
It was like, hey, maybe I can use some of my own knowledge here.

00:04:58.180 --> 00:05:02.780
But a lot of learning for me, actually, given how things have moved.

00:05:02.780 --> 00:05:03.620
Yeah, I'm sure.

00:05:03.620 --> 00:05:05.720
I mean, it's changing so fast.

00:05:05.720 --> 00:05:13.460
What was your impression of coming into Python from like these more statically typed compiled type languages and all that?

00:05:13.460 --> 00:05:21.500
Definitely feel like the level of experience required to get started is very different coming from a C++ world.

00:05:21.500 --> 00:05:29.100
And how I see like all these users we have and even younger kids, they start to learn about programming.

00:05:29.360 --> 00:05:37.200
Python is the first language they learn and up to like people are just using Python for various different projects for real life.

00:05:37.200 --> 00:05:38.600
And that's super cool.

00:05:38.600 --> 00:05:45.300
And that's a lot of applications in real life that could change people in their daily life using the power Python.

00:05:45.300 --> 00:05:51.100
Like earrings, predicting different things.

00:05:51.100 --> 00:05:51.400
Yeah.

00:05:51.400 --> 00:05:53.600
Did the white space drive you crazy at first?

00:05:53.600 --> 00:05:54.640
A little.

00:05:54.640 --> 00:05:55.780
And now?

00:05:55.780 --> 00:05:57.940
Now, getting better.

00:05:57.940 --> 00:05:58.380
Good.

00:05:58.380 --> 00:05:59.440
Good.

00:05:59.440 --> 00:06:00.000
But yeah.

00:06:00.000 --> 00:06:00.340
Cool.

00:06:00.340 --> 00:06:01.380
Catherine, how about you?

00:06:01.380 --> 00:06:02.700
I kind of had a similar experience.

00:06:02.700 --> 00:06:08.540
I started programming, just randomly took a course in my high school and then ended up majoring in computer science.

00:06:08.540 --> 00:06:10.360
And that was all in C++.

00:06:10.360 --> 00:06:14.240
And I remember one of my years I ended up in an AI course.

00:06:14.240 --> 00:06:16.360
And the course was mainly around Python.

00:06:16.360 --> 00:06:18.600
And I remember I like hated Python at first.

00:06:18.600 --> 00:06:20.320
I was like, this feels too easy.

00:06:20.320 --> 00:06:21.560
What's going on here?

00:06:21.560 --> 00:06:22.960
Someone's tricking me.

00:06:22.960 --> 00:06:24.140
I don't know what's going on.

00:06:24.140 --> 00:06:25.220
This is no.

00:06:25.220 --> 00:06:26.280
I want my C++.

00:06:27.060 --> 00:06:30.180
And then over the course of the semester, I just fell in love with Python.

00:06:30.180 --> 00:06:34.060
And then when I started at Microsoft, I was exposed more to the big data landscape.

00:06:34.060 --> 00:06:37.600
So using things like PySpark and getting exposure to notebooks there.

00:06:37.600 --> 00:06:40.720
And then, yeah, I've just, Python has very much grown on me.

00:06:40.720 --> 00:06:45.180
My friends from school always laugh because they're like, remember when you hated it and now you're on the Python team?

00:06:45.180 --> 00:06:47.140
Life takes weird turns.

00:06:47.140 --> 00:06:47.440
Yeah.

00:06:47.440 --> 00:06:48.320
Yeah.

00:06:48.320 --> 00:06:48.500
Yeah.

00:06:48.500 --> 00:06:48.960
For sure.

00:06:48.960 --> 00:06:50.420
It's like, no, I want to use a real language.

00:06:50.420 --> 00:06:50.680
Right.

00:06:50.680 --> 00:06:53.240
Compiling and linking and headers.

00:06:53.240 --> 00:06:53.780
Come on.

00:06:54.000 --> 00:06:54.980
Space doesn't matter.

00:06:54.980 --> 00:06:55.660
So my cool.

00:06:55.660 --> 00:06:56.320
That's right.

00:06:56.320 --> 00:06:57.460
I'll write it all in one line.

00:06:57.460 --> 00:06:59.120
Yeah.

00:06:59.120 --> 00:06:59.720
That's pretty cool.

00:06:59.720 --> 00:07:00.640
I love it.

00:07:00.640 --> 00:07:07.080
So, Ron, you both work at Microsoft, but you don't work on the same projects or the same team, right?

00:07:07.080 --> 00:07:07.980
We are on the same team.

00:07:07.980 --> 00:07:08.440
Same team.

00:07:08.440 --> 00:07:09.160
Different projects.

00:07:09.160 --> 00:07:09.700
Different projects.

00:07:09.700 --> 00:07:09.920
Okay.

00:07:09.920 --> 00:07:11.260
So, Ron, let's start with you.

00:07:11.260 --> 00:07:12.440
What do you do day to day?

00:07:12.440 --> 00:07:12.760
Yeah.

00:07:12.840 --> 00:07:15.960
So, I am a program manager on the Python team at Microsoft.

00:07:15.960 --> 00:07:23.920
Primarily, I'm focusing on building developer experience around data science and machine learning inside Visual Studio Code.

00:07:23.920 --> 00:07:27.240
Visual Studio Code is our lightweight cross-platform editor.

00:07:28.120 --> 00:07:31.980
And it's been pretty good for Python general development already.

00:07:31.980 --> 00:07:40.580
But now we're adding a lot of new things around how to make it easier for people who do data exploration, analysis, and machine learning.

00:07:40.580 --> 00:07:49.020
How do we bring all those power of Jupyte Notebooks into an editor so you can use it for everything you do?

00:07:49.480 --> 00:07:52.740
So, there are people who prefer an editor versus notebooks.

00:07:52.740 --> 00:07:55.340
That has been an ongoing debate in the community.

00:07:55.340 --> 00:07:59.020
And that's definitely there are personal preference.

00:07:59.020 --> 00:08:11.480
But we also see a place where VS Code can be the place where you take your notebook file after you're done with your experimentation and you're ready to turn your code into a production code.

00:08:11.480 --> 00:08:15.260
And this is where you can kind of bridge the two worlds together.

00:08:15.260 --> 00:08:17.960
And VS Code can play a role in that.

00:08:18.060 --> 00:08:20.720
So, that's the new area that we're investing in.

00:08:20.720 --> 00:08:23.280
That's what I've been working on since I joined this team.

00:08:23.280 --> 00:08:26.380
I think it's cool that you're working on that because I feel like there's a bit of a divide.

00:08:26.380 --> 00:08:34.500
Not in a negative way, but there's certainly people that will open up a notebook in Jupyter, JupyterLab, something like that, to do exploratory data.

00:08:34.500 --> 00:08:41.380
And there's people who write production code that's structured with tests and coverage and all of that stuff.

00:08:41.380 --> 00:08:47.940
And going between those, I don't know what people do today, but it feels like, well, you take the notebook and you just copy bits over.

00:08:47.940 --> 00:08:55.880
So, we're trying to hopefully minimize the manual copy and paste between the two.

00:08:56.100 --> 00:09:05.360
So, when you have a notebook ready to turn into production, we can help you import a notebook into Python code, in VS Code directly, so you don't have to do all the work yourself.

00:09:05.360 --> 00:09:09.880
And then, once you're in VS Code, of course, you get all the editing features that you expect.

00:09:09.880 --> 00:09:17.400
There's IntelliSense refactoring, debugging, everything in there, so you can live in a developer tool to finish your developer work.

00:09:17.540 --> 00:09:18.400
Yeah, that sounds awesome.

00:09:18.400 --> 00:09:19.760
And Catherine, how about you?

00:09:19.760 --> 00:09:21.240
You're on the other side of the design.

00:09:21.240 --> 00:09:21.720
Yeah.

00:09:21.720 --> 00:09:22.740
We fight.

00:09:22.740 --> 00:09:22.820
We fight.

00:09:22.820 --> 00:09:25.220
She is on the notebook side.

00:09:26.420 --> 00:09:30.420
Every day, 8 a.m., wrong, and I face off to see who's going to win that day.

00:09:30.420 --> 00:09:39.180
So, I'm a program manager on the Azure Notebooks team, and Azure Notebooks is basically an Azure-hosted, free, no-setup-required Jupyter Notebooks environment.

00:09:39.860 --> 00:10:03.860
So, in my day-to-day, I spend a lot of time talking to customers, learning about their experience, whether it be in an editor, like VS Code, or in notebooks, and learning, you know, how we can make that better, and what our next generation of Azure Notebooks should look like to enable every set of scenarios, from educators to enterprise data scientists, and learning about any features or things that they need to be happy on Azure Notebooks.

00:10:03.860 --> 00:10:04.640
Yeah, awesome.

00:10:04.640 --> 00:10:06.140
That sounds like a really fun project.

00:10:06.140 --> 00:10:06.800
It's a blast.

00:10:06.800 --> 00:10:07.480
Yeah, I love it.

00:10:07.480 --> 00:10:08.480
Yeah, cool.

00:10:08.920 --> 00:10:17.320
So, I want to talk a little bit about just kind of notebooks in general and find out where you think they're really useful or, you know, what's sort of coming next in it.

00:10:17.320 --> 00:10:27.340
And I just want to give a quick shout-out to an article on The Atlantic, I think, which I've talked about a few times, but it's called The Scientific Paper is Obsolete, and Here's What's Next.

00:10:27.340 --> 00:10:46.160
And it's got, like, a lot of a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper.

00:10:46.160 --> 00:10:53.160
And I think that's a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper.

00:10:53.160 --> 00:11:06.660
And I think that's a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper.

00:11:06.660 --> 00:11:13.660
And I think that's a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper.

00:11:13.660 --> 00:11:20.660
I think that's a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper.

00:11:20.660 --> 00:11:32.660
And I think that's a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper, and it's got a lot of people in the paper.

00:11:32.660 --> 00:11:43.060
So there's scenarios like that, all the way to, you know, we have a security team at Microsoft who's building their anomaly detector and threat detection, threat hunting, all within notebooks.

00:11:43.060 --> 00:11:49.320
So I think it's just super cool to be a part of and see the vast array of use cases for notebooks.

00:11:49.320 --> 00:11:52.220
Yeah, it sounds like maybe it's not even really shaken out, right?

00:11:52.220 --> 00:11:53.020
Yeah, exactly.

00:11:53.020 --> 00:11:55.740
We kind of know what the use case for code looks like, right?

00:11:55.740 --> 00:11:59.940
Like regular executable files, you know, websites and whatnot.

00:12:00.180 --> 00:12:05.800
But I feel like with notebooks, there's just all these different attempts to make use of them.

00:12:05.800 --> 00:12:06.020
Right.

00:12:06.020 --> 00:12:12.600
You know, could you treat them as like units that can be combined as like a function or something, or like are they a paper that's better?

00:12:12.600 --> 00:12:13.020
Yeah.

00:12:13.020 --> 00:12:13.300
Yeah.

00:12:13.300 --> 00:12:13.820
Which is right.

00:12:13.820 --> 00:12:14.680
Yeah, it's cool to see.

00:12:14.680 --> 00:12:25.600
I mean, we get within our community, it's easy to see the applications and data science, but then it's always great to hear outside perspectives, people coming from different languages or different areas of technology and everything,

00:12:25.600 --> 00:12:31.300
and thinking about how they can use this as a platform for experimentation or sharing work and collaborating.

00:12:31.300 --> 00:12:33.220
So it's very, very inspiring.

00:12:33.220 --> 00:12:34.100
Yeah, yeah.

00:12:34.100 --> 00:12:34.900
That's pretty awesome.

00:12:34.900 --> 00:12:35.200
Yeah.

00:12:35.200 --> 00:12:35.460
Wrong?

00:12:35.460 --> 00:12:35.940
Absolutely.

00:12:35.940 --> 00:12:40.980
I think the interactivity is what Jupyter is most powerful at.

00:12:41.220 --> 00:12:48.840
Like the fact that we can turn a static report or paper into something that everybody can go and execute.

00:12:48.840 --> 00:12:50.060
That's super cool.

00:12:50.060 --> 00:12:58.680
Not only we have seen a lot of people using notebooks for teaching, because that's like where organized documentation plus real code.

00:12:58.680 --> 00:12:59.280
Yeah.

00:12:59.380 --> 00:13:01.820
It's super easy for a teaching setting.

00:13:01.820 --> 00:13:07.540
And also we use that like internally as well as we report numbers and build dashboards.

00:13:07.540 --> 00:13:16.440
What if everything is interactive and other people can go and pivot the data independently without having to go into like a pile of code.

00:13:16.440 --> 00:13:19.220
So that's really, really, really powerful.

00:13:19.540 --> 00:13:22.640
And that's why it's so popular in the data science community.

00:13:22.640 --> 00:13:23.680
Absolutely.

00:13:23.680 --> 00:13:25.140
A great thing to have.

00:13:25.140 --> 00:13:30.620
And I think that adoption is going to just keep going, given how easy it is to get started.

00:13:30.620 --> 00:13:33.900
And I think one of the things you mentioned earlier, just reproducibility.

00:13:33.900 --> 00:13:40.220
I think that's one of the things notebooks simultaneously does really well and also poorly in terms of like environment sharing.

00:13:41.000 --> 00:13:43.840
And that's something we've been thinking a lot about just in our platform.

00:13:43.840 --> 00:13:48.420
You know, if I'm sharing a notebook with wrong, how can I make sure that dependencies get so complex?

00:13:48.420 --> 00:13:53.240
How can I make sure that everything wrong has everything she will need to run this notebook?

00:13:53.240 --> 00:14:02.000
And even with data sets, you know, if you share a report that connected to a database that was once storing, you know, this data from May 2016.

00:14:02.000 --> 00:14:03.900
And now it's June 2019.

00:14:03.900 --> 00:14:05.640
You know, how do you handle those cases?

00:14:05.640 --> 00:14:05.980
Right.

00:14:05.980 --> 00:14:10.320
And the report says, you know, such and such and like mark down below, like in a cell below it.

00:14:10.400 --> 00:14:12.440
But it's like the data is not the same anymore.

00:14:12.440 --> 00:14:12.720
Right.

00:14:12.720 --> 00:14:12.880
Right.

00:14:12.880 --> 00:14:14.800
That's actually, that's an interesting idea.

00:14:14.800 --> 00:14:15.100
Right.

00:14:15.100 --> 00:14:16.420
The life cycle of it.

00:14:16.420 --> 00:14:16.640
Right.

00:14:16.640 --> 00:14:16.980
Yeah.

00:14:16.980 --> 00:14:25.520
I think that's one thing that Azure notebooks could potentially help because the fact that it runs in the cloud and then we could potentially have pre-config the environment.

00:14:25.520 --> 00:14:29.760
So you can make sure your notebooks will always produce the same results.

00:14:29.760 --> 00:14:30.140
Yeah.

00:14:30.140 --> 00:14:35.920
So right now you can use like environment setup scripts and import your requirements.txt or environment config.

00:14:35.920 --> 00:14:38.980
But in the future, we definitely want to make that as seamless as possible.

00:14:38.980 --> 00:14:43.980
So I can just share whether it be an Azure notebooks project or a GitHub repository with you that has my requirements.

00:14:43.980 --> 00:14:46.160
So it'll just be in a container and everything's good to go.

00:14:46.160 --> 00:14:46.980
That's pretty cool.

00:14:46.980 --> 00:14:50.200
I mean, even with the requirements, the .txt file, right?

00:14:50.200 --> 00:14:54.100
It might say we need these things to run this notebook, but they might not be pinned.

00:14:54.100 --> 00:14:54.520
Right.

00:14:54.520 --> 00:14:54.860
Right.

00:14:54.920 --> 00:15:01.880
And so like you run it again a year later, one of those things has become incompatible with like the code that was written or something like that.

00:15:01.880 --> 00:15:02.060
Right.

00:15:02.060 --> 00:15:03.500
It's a challenge.

00:15:03.500 --> 00:15:08.600
And as a data scientist, you probably don't think about like, oh, I better like pin the versions of my dependencies.

00:15:08.600 --> 00:15:09.800
You're like, oh, look, it's a graph.

00:15:09.800 --> 00:15:10.260
It's working.

00:15:10.260 --> 00:15:10.820
Yes.

00:15:10.820 --> 00:15:12.220
Don't change it.

00:15:12.220 --> 00:15:12.800
Don't touch it.

00:15:12.800 --> 00:15:13.840
That's my version.

00:15:14.380 --> 00:15:21.520
But of course, later on, if the package has newer versions, then you have to upgrade your notebook to make sure it still runs and stuff like that.

00:15:21.520 --> 00:15:23.560
It is kind of a pain to manage.

00:15:23.560 --> 00:15:24.320
It's pretty tricky.

00:15:25.320 --> 00:15:30.900
So I want to dig in more to Azure Notebooks, but like let's, you said there's like this battle you all do at age.

00:15:30.900 --> 00:15:45.240
So I think it's Ron's turn to like say a little bit about like, if not notebooks, if it's going to be more like code editor style of work, but still in the data exploratory way, you talked about this other thing that you're doing.

00:15:45.240 --> 00:15:45.900
What's that look like?

00:15:45.900 --> 00:15:52.420
Yeah, essentially to summarize what we have done is we brought the power of Jupyter Notebooks into VS Code.

00:15:52.420 --> 00:16:04.000
So imagine, so today in Jupyter Notebooks, you can run a piece of code and get your results right away, whether it's a data frame or it's a plot or just text, markdown.

00:16:04.000 --> 00:16:06.800
And imagine you can do all that inside VS Code.

00:16:06.800 --> 00:16:10.120
In a slightly different view, but you get the same results.

00:16:10.120 --> 00:16:14.300
Is it actually the same format, the IPYNB file?

00:16:14.700 --> 00:16:16.320
Or is it something different?

00:16:16.320 --> 00:16:21.080
So actually, so at the moment, the scenario we support is you work with Python scripts.

00:16:21.080 --> 00:16:28.660
So once you have your Jupyter Notebooks ready, you're ready to import, we grab all the code in there and put everything into a Python file.

00:16:28.660 --> 00:16:31.240
So you're literally working with a Python file.

00:16:31.240 --> 00:16:32.480
Right, just a .py file.

00:16:32.480 --> 00:16:35.100
We have converted it into PY.

00:16:35.100 --> 00:16:35.420
Yes.

00:16:35.420 --> 00:16:40.060
So the idea is, hey, this is really an editing centric experience.

00:16:40.420 --> 00:16:46.820
And the fact that you can visualize all those things like plots and data frames and all that, that's like an add-on bonus.

00:16:46.820 --> 00:16:48.580
But you are really working with...

00:16:48.580 --> 00:16:51.280
Yeah, and do you have like a demarcator for the different cells?

00:16:51.280 --> 00:16:51.940
Yes.

00:16:51.940 --> 00:16:53.660
Like a double hash or something?

00:16:53.660 --> 00:16:53.900
Right.

00:16:53.900 --> 00:16:55.100
It's single hash.

00:16:55.100 --> 00:16:55.820
Single hash, okay.

00:16:55.920 --> 00:16:58.760
No hash percent percent is the magic command.

00:16:58.760 --> 00:16:59.200
Okay.

00:16:59.200 --> 00:17:03.600
Not command, comment style, special comment you can put in Python file.

00:17:03.600 --> 00:17:05.820
And then we can recognize, oh, this is a cell.

00:17:05.820 --> 00:17:07.840
And then we do magic things.

00:17:07.840 --> 00:17:08.440
Okay.

00:17:08.760 --> 00:17:13.820
So we'll visualize, like, kind of visually we'll highlight those cells in the code editor.

00:17:13.820 --> 00:17:16.900
So you kind of get a feel of, like, Jupyter notebooks.

00:17:16.900 --> 00:17:20.980
But then you can also run single cell using shift enter.

00:17:20.980 --> 00:17:24.200
Like, that's the key that people use, shift enter.

00:17:24.200 --> 00:17:26.040
Yeah, you can do the same in VS Code.

00:17:26.040 --> 00:17:26.560
Okay.

00:17:26.560 --> 00:17:28.420
And you get the same results.

00:17:28.740 --> 00:17:34.740
We show all the results in a separate window in VS Code that's separate from your code.

00:17:34.740 --> 00:17:36.020
That's just how the design.

00:17:36.020 --> 00:17:38.300
We decided to go with that design.

00:17:38.300 --> 00:17:44.380
But there's no reason we can't show results in line because we have got some requests around that.

00:17:44.380 --> 00:17:45.040
Right, right.

00:17:45.040 --> 00:17:47.980
So we're trying to bring the two together.

00:17:47.980 --> 00:17:54.200
I think there are very different users who want different things depending on their background.

00:17:54.840 --> 00:17:59.200
People coming from Jupyter notebooks are more familiar with inline results.

00:17:59.200 --> 00:18:05.740
But those who come from software engineering background that I used to work with editors and cofiles,

00:18:05.740 --> 00:18:08.480
they're more like, oh, I just wanted something on the side.

00:18:08.480 --> 00:18:11.700
So I can see all the history, like all the results.

00:18:11.700 --> 00:18:13.180
I can always go back.

00:18:13.180 --> 00:18:15.840
So nothing is getting replaced in line.

00:18:15.840 --> 00:18:17.180
But they want more of an editor experience.

00:18:17.180 --> 00:18:18.080
Right.

00:18:18.080 --> 00:18:19.680
That's more of an editor experience.

00:18:19.680 --> 00:18:24.080
So I think that we just provide different options for people who come from different backgrounds.

00:18:24.520 --> 00:18:29.400
So you can pick if you want a notebook, if you want a notebook style in VS Code, you can do all that.

00:18:29.480 --> 00:18:34.240
This portion of Talk Python To Me is brought to you by Linode.

00:18:34.440 --> 00:18:37.980
Are you looking for hosting that's fast, simple, and incredibly affordable?

00:18:37.980 --> 00:18:43.080
Well, look past that bookstore and check out Linode at talkpython.fm/Linode.

00:18:43.080 --> 00:18:44.980
That's L-I-N-O-D-E.

00:18:44.980 --> 00:18:49.400
Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:18:49.400 --> 00:18:51.600
They have 10 data centers across the globe.

00:18:51.720 --> 00:18:55.440
So no matter where you are or where your users are, there's a data center for you.

00:18:55.440 --> 00:18:59.920
Whether you want to run a Python web app, host a private Git server, or just a file server,

00:18:59.920 --> 00:19:07.100
you'll get native SSDs on all the machines, a newly upgraded 200 gigabit network, 24-7 friendly support,

00:19:07.100 --> 00:19:09.860
even on holidays, and a seven-day money-back guarantee.

00:19:09.860 --> 00:19:11.480
Need a little help with your infrastructure?

00:19:11.480 --> 00:19:16.220
They even offer professional services to help you with architecture, migrations, and more.

00:19:16.220 --> 00:19:19.180
Do you want a dedicated server for free for the next four months?

00:19:19.180 --> 00:19:22.240
Just visit talkpython.fm/Linode.

00:19:22.240 --> 00:19:28.940
Well, you'll have to help me out with this one because I haven't done a lot of teamwork on notebooks,

00:19:28.940 --> 00:19:36.680
but I hear that merging notebooks can be challenging, especially if someone's rerun a cell and it has a new output.

00:19:36.680 --> 00:19:37.300
Oh, yeah.

00:19:37.300 --> 00:19:37.880
Right.

00:19:37.880 --> 00:19:43.040
Because it's called an API and it's like caught in the weather, but they ran it and the weather's now different.

00:19:43.040 --> 00:19:43.520
Yeah.

00:19:43.520 --> 00:19:46.120
And so it's like a merge conflict and stuff like that.

00:19:46.580 --> 00:19:47.240
This is a problem?

00:19:47.240 --> 00:19:48.500
This is a problem, yeah.

00:19:48.500 --> 00:19:53.740
The way notebooks are stored in IPYMB is just kind of a JSON file.

00:19:53.740 --> 00:19:58.360
So it stores, you know, the output and specific metadata about your file as well.

00:19:58.360 --> 00:20:06.360
So you can go and change one line and you'll suddenly, you know, try to merge it and you'll see eight lines or like 80 lines and everything's moved around.

00:20:06.360 --> 00:20:10.320
So this is, yeah, one of our big focus in the near future for Azure notebooks is

00:20:10.320 --> 00:20:14.100
how do you make sure that source control is as easy as possible for notebooks?

00:20:14.480 --> 00:20:20.520
And, you know, we were just talking to a user last week who was like, we tried to use GitHub with notebooks, but then it got too complex.

00:20:20.520 --> 00:20:22.600
So we all just had, you know, they were a team of four.

00:20:22.600 --> 00:20:24.100
They all created their individual notebooks.

00:20:24.100 --> 00:20:27.720
And then in the end, one person was tasked with copying the bits and pieces that were good.

00:20:27.760 --> 00:20:29.200
It's your job to make the final notebook.

00:20:29.200 --> 00:20:31.640
Yeah, you know, they got the short of the stick.

00:20:31.640 --> 00:20:32.240
Yeah.

00:20:32.240 --> 00:20:32.560
Uh-huh.

00:20:32.560 --> 00:20:40.260
So, you know, we were talking to a bunch of users, as I said, like that to understand not just having GitHub integrated right here,

00:20:40.260 --> 00:20:44.620
because that doesn't solve the issue with the formatting of notebooks and that still doesn't make it perfect.

00:20:44.800 --> 00:20:50.740
But making sure that we have a complete, super easy end-end experience for that problem in the notebooks world.

00:20:50.740 --> 00:20:51.680
It sounds tricky.

00:20:51.680 --> 00:20:55.460
And it sounds like the code thing that you guys are doing maybe sidesteps that.

00:20:55.460 --> 00:20:55.880
Right.

00:20:55.880 --> 00:20:56.200
Yeah.

00:20:56.960 --> 00:21:00.920
We tried to solve that by avoiding using notebook files.

00:21:00.920 --> 00:21:03.820
That's why we convert everything into a PIE file.

00:21:03.820 --> 00:21:06.840
Now you can use source control and everything around it.

00:21:06.840 --> 00:21:07.660
It's just plain code.

00:21:07.660 --> 00:21:08.980
Right, and the output goes somewhere else.

00:21:08.980 --> 00:21:09.280
Yes.

00:21:09.280 --> 00:21:11.300
And it's not part of the diff or whatever.

00:21:11.300 --> 00:21:12.380
Right, right.

00:21:12.380 --> 00:21:17.720
But you can actually export the results as a notebook file if you want to go back.

00:21:17.720 --> 00:21:21.520
Like if you want to share the results with someone, send someone a notebook file.

00:21:21.520 --> 00:21:27.080
So we joke that wrong and I fight, but we work really closely together because so many scenarios are,

00:21:27.080 --> 00:21:28.140
I explore in notebooks.

00:21:28.140 --> 00:21:31.360
Now I want to build a .py file and VS Code.

00:21:31.360 --> 00:21:35.820
And maybe I make some changes that I actually want to now share that as an updated notebook.

00:21:35.820 --> 00:21:40.380
We work very hardly to make that end-to-end complete scenario that's super easy.

00:21:40.380 --> 00:21:41.120
Yeah, that's cool.

00:21:41.120 --> 00:21:45.080
I guess while we're on the subject, maybe we could talk about like collaboration.

00:21:45.080 --> 00:21:48.740
If I'm working on an Azure notebook, I go over there.

00:21:48.740 --> 00:21:51.000
Can I share that kind of Google Docs style?

00:21:51.340 --> 00:21:52.320
With collaboration?

00:21:52.320 --> 00:21:53.100
Not yet.

00:21:53.100 --> 00:21:56.880
We're thinking about how we could maybe leverage something like VS Code Live Share,

00:21:56.880 --> 00:22:01.740
where you could do live sharing with individual people and watch them edit all within the same document.

00:22:01.740 --> 00:22:07.180
But this is something that has come up in a few notebooks products before and then sometimes been rolled back

00:22:07.180 --> 00:22:10.420
because it's not super easy with the formatting.

00:22:10.420 --> 00:22:15.280
But yeah, so right now in Azure Notebooks, you can share a notebook publicly and you can clone it.

00:22:15.280 --> 00:22:18.500
And we can collaborate that way, but not yet with the live co-editing.

00:22:18.500 --> 00:22:19.060
Yeah, cool.

00:22:19.160 --> 00:22:22.920
That's something you can do in VS Code with the Visual Studio Live Share feature.

00:22:22.920 --> 00:22:24.560
Yeah, maybe people don't know about that.

00:22:24.560 --> 00:22:28.740
I did talk to Dan Taylor in the previous episode, but maybe people didn't hear so.

00:22:28.740 --> 00:22:35.760
Live Share enables real-time co-editing and co-debugging across different machines or across different OS.

00:22:35.760 --> 00:22:44.940
So the idea is any number, I guess up to 30 at the moment, any number of developers can collaborate real-time.

00:22:45.600 --> 00:22:47.020
And it's not just screen sharing.

00:22:47.020 --> 00:22:49.860
It's real session share, being shared.

00:22:49.860 --> 00:22:58.320
So anyone can make changes to the same code base and everybody else can see it and you can run the code and debug and everyone else can see that too.

00:22:58.320 --> 00:23:06.620
So essentially you can encourage a lot of scenarios around like pill programming or just remote troubleshooting.

00:23:07.160 --> 00:23:10.420
And we also see like that being used in classroom settings too.

00:23:10.420 --> 00:23:16.040
Like a teacher is hosting a session with 30 students looking at the same thing.

00:23:16.040 --> 00:23:17.820
And that's pretty interesting.

00:23:17.820 --> 00:23:20.960
That actually generated a lot of interesting scenarios.

00:23:20.960 --> 00:23:26.120
Yeah, I bet it did like office hours, but I'll help you by just being on your system basically, right?

00:23:26.120 --> 00:23:27.040
Yeah, absolutely.

00:23:27.040 --> 00:23:32.400
So we actually extended that functionality beyond the basic support.

00:23:32.400 --> 00:23:36.820
So now we have added the Jupyter support on top of Live Share as well.

00:23:36.820 --> 00:23:44.820
So now you can imagine you're working on your notebook, you want some help and somebody else can connect to your session, you can run a cell.

00:23:45.000 --> 00:23:51.160
And both of your machines are going to see the plots, the data frames and everything the same on the screen.

00:23:51.160 --> 00:23:52.060
So that's pretty cool.

00:23:52.060 --> 00:23:53.100
Yeah, that seems super cool.

00:23:53.100 --> 00:23:59.800
Like one of the problems, of course, especially I think in data science would be the actual data, right?

00:23:59.800 --> 00:24:11.060
Like if you have a gigabyte of data and then you're talking to that from your notebook or from these like notebook-like PyFiles, it's one thing to say, well, yeah, you can just grab the notebook or grab the Python file out of GitHub.

00:24:11.060 --> 00:24:15.040
But then there's a gig of data, you got to get to them somehow, right?

00:24:15.040 --> 00:24:19.060
So being able to like connect in and just sort of run in place would be cool.

00:24:19.060 --> 00:24:21.740
Yeah, actually, everything happens on the host machine.

00:24:21.740 --> 00:24:31.300
Meaning if the guest machine doesn't have the same setup, same environment setup, that's okay because nothing is required on the guest machine.

00:24:31.300 --> 00:24:33.960
You literally just need VS Code installed.

00:24:34.120 --> 00:24:43.080
And then all the like building and IntelliSense debugging and all the packages, environment settings, everything is streamed from the host machine.

00:24:43.080 --> 00:24:45.720
So you can literally see everything exactly the same.

00:24:45.720 --> 00:24:46.920
Yeah, that's really nice.

00:24:46.920 --> 00:24:49.120
You know, I have some friends who did a lot of paired programming.

00:24:49.120 --> 00:24:55.920
It was always, well, let's set up a virtual machine and like do a shared remote desktop so we can both type or other like weird things.

00:24:55.920 --> 00:24:58.180
Yeah, it's a lot of work to get us set up.

00:24:58.180 --> 00:24:59.240
I'm really excited about this.

00:24:59.240 --> 00:24:59.720
This is cool.

00:25:00.020 --> 00:25:01.820
And how about on Azure Notebooks?

00:25:01.820 --> 00:25:05.900
Can you like, if I have a gig of data, can I like upload that in there?

00:25:05.900 --> 00:25:07.980
Like what's the story with the data backing them?

00:25:07.980 --> 00:25:12.200
Yeah, so you can either store things locally in Azure Notebooks within your project.

00:25:12.200 --> 00:25:16.880
And so if you cloned it, you'd clone that data with and none of that's going to your local machine.

00:25:16.880 --> 00:25:18.160
So you don't have to worry about those things.

00:25:18.160 --> 00:25:19.080
It's all Azure hosted.

00:25:19.080 --> 00:25:19.860
It happens really quickly.

00:25:19.860 --> 00:25:21.040
The cloud is fast.

00:25:21.040 --> 00:25:25.400
So yeah, you can also, you know, connect to an Azure Blob store.

00:25:25.400 --> 00:25:36.440
So for instance, in the demo Ron and I are doing today, we put a bunch of pet images that we're classifying in a Blob store and we pull them down in Azure Notebooks and then send it out and test it on our web service from there.

00:25:36.440 --> 00:25:37.320
Yeah, that's cool.

00:25:37.320 --> 00:25:44.660
I guess that would be the most cloud natural cloud native sort of solution is we'll put it in like cloud storage and then talk to it or read it or write it.

00:25:44.660 --> 00:25:44.840
Right, right.

00:25:44.840 --> 00:25:45.600
Yeah, okay.

00:25:45.600 --> 00:25:46.640
Yeah, that's pretty awesome.

00:25:46.640 --> 00:25:50.680
So I know that Visual Studio Code is free, right?

00:25:50.680 --> 00:25:51.900
Free open source and so on.

00:25:51.900 --> 00:25:53.140
Yes, everything we do here.

00:25:53.140 --> 00:25:59.800
The Python extension and Jupyter support is part of the Python extension, which is also all free at open source.

00:25:59.800 --> 00:26:01.460
So I don't need to install anything else.

00:26:01.460 --> 00:26:05.620
It's just like when the Python extension updates itself, then magically.

00:26:05.620 --> 00:26:06.220
It's all in there.

00:26:06.220 --> 00:26:06.660
It's in there.

00:26:06.660 --> 00:26:07.920
Okay, super cool.

00:26:07.920 --> 00:26:08.840
What about Notebooks?

00:26:08.840 --> 00:26:09.820
Notebooks is free.

00:26:09.820 --> 00:26:10.180
Okay.

00:26:10.700 --> 00:26:14.800
You can, you know, we let you run for free on our hosted compute.

00:26:14.800 --> 00:26:20.160
You can connect to an Azure VM if you want a more beefy machine, GPUs, etc.

00:26:20.160 --> 00:26:23.280
You can connect to an Azure VM, in which case those would be paid.

00:26:23.280 --> 00:26:27.900
Right, so I would pay for like a fancy VM that has GPUs and then I would talk to it?

00:26:27.900 --> 00:26:28.820
Yes, exactly.

00:26:28.820 --> 00:26:29.840
How does that work, right?

00:26:29.840 --> 00:26:36.240
Like instead of, I wouldn't just go to my VM I set up and just like pip install Jupyter and do stuff there, right?

00:26:36.240 --> 00:26:37.620
Like it sounds like it would be different.

00:26:37.620 --> 00:26:41.580
Yeah, so we actually use something called a data science virtual machine in Azure.

00:26:41.580 --> 00:26:44.260
And with that, Jupyter's already installed there.

00:26:44.260 --> 00:26:52.440
So from Azure Notebooks, you just, we have an easy compute picker that'll automatically populate with the list of your data science virtual machines that you have access to.

00:26:52.440 --> 00:26:55.580
You just click on it, hit run, and everything just works.

00:26:55.580 --> 00:26:57.800
And you're running your notebook on that VM.

00:26:57.800 --> 00:26:58.400
Yeah, that's cool.

00:26:58.400 --> 00:27:02.040
Are there like scientists and companies and stuff using that a lot to do cool stuff?

00:27:02.040 --> 00:27:02.400
Yeah.

00:27:02.400 --> 00:27:06.800
We have a bunch of companies as well as education, research.

00:27:06.800 --> 00:27:12.560
We see a lot of researchers using it, especially because for the free classroom settings, people use that a lot.

00:27:12.560 --> 00:27:14.180
Yeah, that seems pretty cool.

00:27:14.180 --> 00:27:20.780
One of the things I saw on the Azure Notebooks that I thought was kind of cool is a lot of different languages supported.

00:27:20.780 --> 00:27:21.300
Yes.

00:27:21.420 --> 00:27:23.360
Yeah, so what languages are, can I run there?

00:27:23.360 --> 00:27:24.780
I mean, there's Python, obviously.

00:27:24.780 --> 00:27:28.680
So Python 2 and 3, and then Fsharp and R.

00:27:28.680 --> 00:27:29.040
Okay.

00:27:29.040 --> 00:27:30.680
So Fsharp is kind of surprising, right?

00:27:30.680 --> 00:27:36.120
Fsharp is like a functional .NET programming language, which I haven't really done very much with.

00:27:36.120 --> 00:27:38.040
But what I didn't see there was Csharp.

00:27:38.100 --> 00:27:42.380
And I figured if you're going to have Fsharp, maybe you would also just throw in Csharp for the fun of it.

00:27:42.380 --> 00:27:43.520
Like, that's kind of interesting.

00:27:43.520 --> 00:27:43.960
Why not?

00:27:43.960 --> 00:27:45.240
It's something we're thinking about.

00:27:45.240 --> 00:27:48.500
We haven't, you know, we see so much of our usage is Python.

00:27:48.500 --> 00:27:52.220
So from that, we really focus on making that our optimal experience.

00:27:52.220 --> 00:27:53.980
And that's where most of our energy goes.

00:27:53.980 --> 00:27:58.300
But we definitely do hear requests every now and again for Csharp.

00:27:58.300 --> 00:28:04.740
And it's one of those, similar to what I was talking about earlier, where you see so much Python usage with notebooks, but there's so many other scenarios.

00:28:04.740 --> 00:28:06.340
And Csharp is a perfect example.

00:28:06.340 --> 00:28:08.900
You know, how can you experiment with Csharp on notebooks?

00:28:08.900 --> 00:28:11.520
So something we love to do, just haven't done yet.

00:28:11.520 --> 00:28:12.200
Yeah, yeah, sure.

00:28:12.200 --> 00:28:17.420
No, I mean, I think definitely focusing on Python and Python 3, that's like the sweet spot, right?

00:28:17.420 --> 00:28:17.760
Of course.

00:28:17.760 --> 00:28:20.940
But just, yeah, the Fsharp being there kind of stood out to me.

00:28:21.280 --> 00:28:30.460
So if I'm building these notebooks or even with VS Code, like, what are some of the other things in Azure that people are using and connecting to?

00:28:30.460 --> 00:28:33.900
Like, I know there's a bunch of other data science, machine learning stuff going on there.

00:28:33.900 --> 00:28:34.360
Oh, yeah.

00:28:34.360 --> 00:28:35.380
What are some of the cool scenarios?

00:28:35.380 --> 00:28:40.340
So the very basic thing we can start with is definitely just beefy machines, right?

00:28:40.340 --> 00:28:40.720
Yeah.

00:28:40.720 --> 00:28:42.160
Give me some GPUs.

00:28:42.160 --> 00:28:43.760
Right, GPUs, faster machines.

00:28:43.760 --> 00:28:48.760
And then, so on top of that, Azure provides what we call data science VMs.

00:28:49.560 --> 00:28:54.420
These are, think of those as VMs pre-installed with, like, data packages pre-installed.

00:28:54.420 --> 00:28:56.460
So when you go there, everything is already there.

00:28:56.460 --> 00:28:57.940
Like, Jupyter Notebooks is installed.

00:28:57.940 --> 00:29:00.160
All those packages are already there.

00:29:00.160 --> 00:29:01.680
So you can definitely connect to that.

00:29:01.680 --> 00:29:02.260
We have Windows.

00:29:02.260 --> 00:29:03.240
We have Linux.

00:29:03.240 --> 00:29:05.720
Different OSs, depending on what you want.

00:29:05.720 --> 00:29:09.780
So that's kind of the fairly common use case of Azure resources.

00:29:09.780 --> 00:29:12.820
Of course, you can use storage if you want to store data there.

00:29:12.820 --> 00:29:14.520
So you can do all that already.

00:29:15.120 --> 00:29:22.000
On top of that, Azure also provides a service that's machine learning specific called Azure Machine Learning Service.

00:29:22.000 --> 00:29:28.340
It is a comprehensive set of services that covers the entire workflow in machine learning.

00:29:28.340 --> 00:29:29.720
So starting with data.

00:29:29.720 --> 00:29:33.080
So Azure Machine Learning Service can help you manage data.

00:29:33.140 --> 00:29:37.040
Like, we provide what we call a data store, which is part of the service.

00:29:37.040 --> 00:29:40.140
So you don't have to manage your storage separately.

00:29:40.140 --> 00:29:44.140
Machine Learning Service knows where to find your data for training, for example.

00:29:44.140 --> 00:29:44.560
I see.

00:29:44.560 --> 00:29:47.840
It's probably, you don't have to, like, use the blob storage API.

00:29:47.840 --> 00:29:50.120
Yeah, and then you figure out how to connect to that thing, right?

00:29:50.120 --> 00:29:50.560
Yeah, exactly.

00:29:50.560 --> 00:29:52.480
So Azure Machine Learning Service is part of the whole world.

00:29:52.480 --> 00:29:55.060
The machine learning service manages the whole world for you.

00:29:55.060 --> 00:29:58.420
And then moving on, of course, for training, you need more compute.

00:29:58.420 --> 00:30:00.360
Like VMs we talked about.

00:30:00.360 --> 00:30:04.620
So Azure Machine Learning Service can help you manage compute as well at scale.

00:30:04.620 --> 00:30:12.400
So you can say, I want 50 machines, up to 50 machines, but scale them back down if I'm not using them.

00:30:12.400 --> 00:30:15.400
Which is the best part because I'm terrible at controlling my costs.

00:30:15.400 --> 00:30:15.800
Right.

00:30:15.800 --> 00:30:16.860
Scale down to zero.

00:30:16.860 --> 00:30:18.280
Yeah, scale down to zero.

00:30:18.560 --> 00:30:22.060
But you can scale up to as many as you want pretty fast.

00:30:22.060 --> 00:30:22.440
Yeah, that's cool.

00:30:22.440 --> 00:30:23.900
And that's good that if you forget.

00:30:23.900 --> 00:30:24.260
Right.

00:30:24.260 --> 00:30:24.620
Yeah.

00:30:24.620 --> 00:30:26.200
Which I always do.

00:30:26.200 --> 00:30:27.980
Yeah, you won't spend all your money.

00:30:27.980 --> 00:30:28.280
Right, right.

00:30:28.280 --> 00:30:32.060
Especially when they're like, you know, you have like a 16-node GPU cluster.

00:30:32.060 --> 00:30:32.520
Right.

00:30:32.520 --> 00:30:34.360
Keep them running for days.

00:30:34.360 --> 00:30:35.200
That'll be...

00:30:35.200 --> 00:30:36.060
Yeah, it's a big bill.

00:30:36.060 --> 00:30:36.320
Yeah.

00:30:36.320 --> 00:30:39.220
So it also helps you manage your training jobs.

00:30:39.220 --> 00:30:45.000
So you have different training runs and you have different results you want to keep around.

00:30:45.000 --> 00:30:47.840
So Azure Machine Learning Service can help you manage all that.

00:30:48.040 --> 00:30:52.900
So for example, you have one experiment that has like 100 repeated runs.

00:30:52.900 --> 00:30:54.500
Each run has different results.

00:30:54.500 --> 00:30:57.380
And at the end of a run, you generate a different model file.

00:30:57.380 --> 00:31:00.740
So that's all being stored as part of a service.

00:31:00.740 --> 00:31:07.900
So you can always go back, look at a model and go back and say, oh, this is the run I did that got to this model.

00:31:07.900 --> 00:31:09.400
So you can always trace back.

00:31:09.400 --> 00:31:10.620
So that's all managed.

00:31:11.120 --> 00:31:17.140
And then of course, once you have the model at the end of training, you can download it to local and do whatever you want with it.

00:31:17.140 --> 00:31:17.340
Right.

00:31:17.460 --> 00:31:21.260
But also you could have the Machine Learning Service manage it for you.

00:31:21.260 --> 00:31:27.960
Imagine if you have multiple models and you have multiple versions that becomes a nightmare to manage.

00:31:27.960 --> 00:31:31.700
So you can have Machine Learning Service to manage all that in a central location.

00:31:32.240 --> 00:31:39.100
Not only that, but also once you have that registered with the service, it's super simple to turn the model into a runnable service.

00:31:39.100 --> 00:31:41.540
Like literally, we can do that in five minutes.

00:31:41.540 --> 00:31:42.160
That's cool.

00:31:42.160 --> 00:31:48.080
Turn that into a service that's running in a single container that Azure can spin up for you fairly quickly.

00:31:48.080 --> 00:31:50.400
Really, five minutes, everything's done.

00:31:50.880 --> 00:31:52.760
Then you can start using this model already.

00:31:52.760 --> 00:31:54.520
So you talked about this pet image.

00:31:54.520 --> 00:31:54.940
Yes.

00:31:54.940 --> 00:31:58.100
So what are you trying to find from these pet images?

00:31:58.100 --> 00:31:58.520
Yeah.

00:31:58.520 --> 00:32:05.740
So the end result is basically you can send our web service an image of a pet, cat or dog, not like an obscure pet.

00:32:05.740 --> 00:32:05.760
Not a lizard.

00:32:05.760 --> 00:32:06.160
Yeah.

00:32:06.160 --> 00:32:11.260
And our model will send back probabilities of different breeds.

00:32:11.260 --> 00:32:16.000
So if you send a golden retriever, I had my roommate wanted to test it with her golden retriever from home.

00:32:16.000 --> 00:32:16.860
So send that.

00:32:16.980 --> 00:32:20.840
And it got 99.7% confident that it was a golden retriever.

00:32:20.840 --> 00:32:21.480
That's awesome.

00:32:21.480 --> 00:32:21.880
Yeah.

00:32:21.880 --> 00:32:24.520
So you could do that like with this thing she's talking about, right?

00:32:24.520 --> 00:32:24.680
Yeah.

00:32:24.680 --> 00:32:26.400
You turn it up and you say turn it into a service.

00:32:26.400 --> 00:32:26.660
Yeah.

00:32:26.660 --> 00:32:29.900
And then it's like a HTTP post an image to it or something.

00:32:29.900 --> 00:32:31.840
And then it says, here's a JSON result.

00:32:31.840 --> 00:32:32.020
Yeah.

00:32:32.020 --> 00:32:32.340
Exactly.

00:32:32.340 --> 00:32:35.840
So we're going to talk about all that in our build talk.

00:32:35.840 --> 00:32:36.280
Yes.

00:32:36.280 --> 00:32:36.960
Oh, yeah.

00:32:36.960 --> 00:32:39.960
Which is now available online at the time of this podcast.

00:32:39.960 --> 00:32:41.460
Yeah.

00:32:41.460 --> 00:32:46.440
We can put a link to it in the show notes actually thanks to the power of time travel and recording

00:32:46.440 --> 00:32:47.100
and all that.

00:32:47.100 --> 00:32:52.460
This portion of Talk Python To Me is sponsored by Backlog from NewLab.

00:32:52.460 --> 00:32:57.580
Developers know the importance of organization and efficiency when it comes to collaborating on a team.

00:32:57.580 --> 00:33:02.000
And Backlog is the perfect collaborative task management software for your team.

00:33:02.000 --> 00:33:08.540
With Backlog, you can create tasks, track bugs, make changes, give feedback, and have team conversations right next to your code.

00:33:08.740 --> 00:33:11.760
You track progress with features like Gantt and Burndown charts.

00:33:11.760 --> 00:33:15.160
You document your processes right alongside your wikis.

00:33:15.160 --> 00:33:18.880
You can integrate with the tools you use every day like Slack, Jira, and Google Sheets.

00:33:18.880 --> 00:33:22.640
You can automatically register issues from email or web form submissions.

00:33:22.640 --> 00:33:26.760
Take your work on the go using their top rated mobile apps available on Android and iOS.

00:33:27.300 --> 00:33:33.860
Try Backlog for your team for free for 30 days using our special URL at talkpython.fm/backlog.

00:33:33.860 --> 00:33:36.520
That's talkpython.fm/backlog.

00:33:38.140 --> 00:33:45.220
You know, one thing that I saw when I was going through your website that I thought was super cool was this LIGO project.

00:33:45.220 --> 00:33:51.460
So, you know, Python has been at the center of a bunch of super cool science stuff, right?

00:33:51.460 --> 00:33:57.360
Like, Kyle Cranmer and his team did a bunch of stuff with Python around the Higgs boson discovery.

00:33:57.920 --> 00:34:02.600
There was Dr. Katie Bowen and the black hole picture.

00:34:02.600 --> 00:34:09.560
And then the LIGO experiment, which is detecting, like, you know, I still just don't have my mind around, like, general relativity.

00:34:09.560 --> 00:34:14.520
But, like, the space-time, you know, with, like, the curvature of gravity and all that.

00:34:14.520 --> 00:34:19.920
And so, the idea is if, like, there's enough of a disturbance in it, it should have a wave, right?

00:34:21.080 --> 00:34:23.960
And, you know, Einstein predicted that.

00:34:23.960 --> 00:34:30.220
But just recently, the LIGO project detected black holes colliding and actually captured that.

00:34:30.220 --> 00:34:33.280
And, you know, that was Azure Notebooks, apparently.

00:34:33.280 --> 00:34:35.620
Yeah, they do use Azure Notebooks.

00:34:35.620 --> 00:34:38.560
I'm not sure if it was used for the specific black hole collision.

00:34:38.560 --> 00:34:39.500
Yeah, yeah, yeah.

00:34:39.500 --> 00:34:40.320
They do use it, yeah.

00:34:40.320 --> 00:34:48.560
I think it's just so cool that Python and Notebooks, in particular, seem to be showing up around all this, like, super cool science.

00:34:48.560 --> 00:34:58.080
I guess, let me ask both of you, you know, when you talk to people who are coming into the Python world and into the notebook type of space, what are they coming from?

00:34:58.080 --> 00:35:00.400
Is that, like, MATLAB or other tools?

00:35:00.400 --> 00:35:01.900
You know, like, where are they coming from?

00:35:01.900 --> 00:35:05.360
I see a lot of users coming from R and RStudio.

00:35:05.360 --> 00:35:07.360
That's kind of the world.

00:35:07.360 --> 00:35:12.540
But they see, like, some of they still, I've seen users who use a mix of those two languages.

00:35:12.540 --> 00:35:17.560
They still feel like R has done something really well and they already have things set up there.

00:35:17.660 --> 00:35:21.660
But they also see, like, all these Python packages that make things easy.

00:35:21.660 --> 00:35:23.800
So they wanted to use that as well.

00:35:23.800 --> 00:35:25.420
So I definitely see a lot of that.

00:35:25.420 --> 00:35:30.080
Yeah, I think what's cool about Python is you do kind of land on it from a lot of different paths.

00:35:30.080 --> 00:35:37.600
So I had a user I was talking to last week who was saying, you know, I feel like they're business analysts and they've been using Excel for so many years.

00:35:37.600 --> 00:35:41.040
And they were like, I feel like Python has become the next thing once you've learned Excel.

00:35:41.040 --> 00:35:44.600
And now, you know, you want to do more advanced things or go from Excel into Python.

00:35:44.600 --> 00:35:48.780
But then you'll talk, I was talking to a researcher a couple of weeks ago who also teaches a course.

00:35:48.780 --> 00:35:52.160
And he was saying their course was in MATLAB two years ago.

00:35:52.160 --> 00:35:54.420
Then they moved to R for a year.

00:35:54.420 --> 00:35:58.100
And now they're standardizing across their department on Python.

00:35:58.100 --> 00:36:01.300
Because it is so, they're like, people would start in MATLAB.

00:36:01.300 --> 00:36:03.080
Then they need R for a different course.

00:36:03.080 --> 00:36:04.160
And it was just too much.

00:36:04.160 --> 00:36:09.180
But they felt like Python would cover all their courses, use cases and make their students happy.

00:36:09.180 --> 00:36:10.420
Yeah, that's pretty interesting.

00:36:10.420 --> 00:36:12.820
I'm sure they have a little bit of whiplash going on.

00:36:12.820 --> 00:36:13.860
Yeah, I know.

00:36:13.860 --> 00:36:19.640
But Python's interesting because it's not just useful for this like focused data analysis.

00:36:19.640 --> 00:36:20.240
Right.

00:36:20.240 --> 00:36:26.780
Like if I go and learn MATLAB and I say I'm getting a degree in math or biology or whatever,

00:36:26.780 --> 00:36:32.620
and then I leave and I'm not still doing research in biology, my MATLAB skills are probably not helpful.

00:36:32.620 --> 00:36:34.280
For the most part, right?

00:36:34.280 --> 00:36:38.480
It's not like, well, I'm going to go and like get recruited to work as a MATLAB person.

00:36:38.480 --> 00:36:45.660
Maybe, but not nearly to the extent that Python skills will like open up the door to parallel careers.

00:36:45.660 --> 00:36:49.580
And so I think whenever I think of students or academic programs, I think, you know,

00:36:49.580 --> 00:36:53.920
it's really good that they're doing something like Python, even if it weren't Python,

00:36:53.920 --> 00:36:59.660
something that is like a general skill independent of like the research or the PhD or whatever, right?

00:36:59.740 --> 00:37:05.380
And I know they've standardized like high school, the AP curriculum in the US has standardized on Python

00:37:05.380 --> 00:37:09.500
for being the introductory language, which I thought was really cool because when I took it, it was Java.

00:37:09.500 --> 00:37:11.400
And I kind of never used Java.

00:37:11.400 --> 00:37:12.600
Right.

00:37:12.600 --> 00:37:13.180
Yeah.

00:37:13.180 --> 00:37:13.780
Yeah.

00:37:13.780 --> 00:37:17.120
Python is definitely what used in so many different areas.

00:37:17.120 --> 00:37:20.900
Like for one, being able to build web apps, that's huge.

00:37:20.900 --> 00:37:28.580
And in the data science area and beyond those two, we also see a lot of just general purpose scripting using Python.

00:37:28.580 --> 00:37:28.880
Yeah.

00:37:28.880 --> 00:37:31.640
And on top of whatever else they're using, right?

00:37:31.640 --> 00:37:32.060
Yeah.

00:37:32.060 --> 00:37:32.280
Yeah.

00:37:32.280 --> 00:37:34.080
And the IoT stuff as well, right?

00:37:34.080 --> 00:37:36.340
Like it's, you got CircuitPython and MicroPython.

00:37:36.340 --> 00:37:36.460
Oh, yeah.

00:37:36.460 --> 00:37:37.280
That's super cool.

00:37:37.280 --> 00:37:38.880
So I think that's pretty cool.

00:37:38.880 --> 00:37:46.080
Now, one thing I did want to ask you about, because I think this is super positive, but I don't really know why it's so different in data science.

00:37:46.280 --> 00:37:58.040
I feel like in data science, the core projects, NumPy, Jupyter, and whatnot, are well-funded, at least compared to, say, Flask for web development or, you know, SQLAlchemy.

00:37:58.040 --> 00:38:07.700
Like you go and you look at NumPy, and it's got like, I don't remember exactly, like Sloan Foundation funding and DARPA funding maybe.

00:38:07.700 --> 00:38:10.740
But there's like these large groups funding these data science projects.

00:38:10.740 --> 00:38:18.220
Why do you think data science, open source, gets so much support like this, whereas a lot of the rest of Python kind of doesn't?

00:38:18.220 --> 00:38:23.620
I mean, it's not like Instagram isn't worth, you know, billions of dollars and based on Python as well.

00:38:23.620 --> 00:38:25.200
Or, you know, there's a hundred examples like that.

00:38:25.200 --> 00:38:26.120
Do you have thought?

00:38:26.120 --> 00:38:34.320
Since I'm relatively new to the area, to the space, I'm not super familiar with those particular projects and how they got funded.

00:38:34.660 --> 00:38:47.900
But I feel like, just make a feel, like the popularity in the space, like interest in the space, just AI and data science in general got a lot of attention, for sure, from all sorts of people.

00:38:47.900 --> 00:38:52.180
And it's not just like, hey, we build this for fun, right?

00:38:52.180 --> 00:38:56.040
But also, we want to take AI, we want to build that into our businesses.

00:38:56.440 --> 00:38:59.820
And that's something serious, that it better make good predictions, right?

00:38:59.820 --> 00:39:08.240
If this is going to impact my business or people's real life, like making predictions for patients and that serious stuff.

00:39:08.240 --> 00:39:09.660
So we need to get it right.

00:39:09.660 --> 00:39:10.740
It better work great.

00:39:10.740 --> 00:39:12.720
All those packages we rely on, right?

00:39:12.720 --> 00:39:16.060
They're fundamental to the prediction and data analysis.

00:39:16.060 --> 00:39:24.780
And that might be why it's easier to get attention and funded because the value to the business, like we see in real life.

00:39:24.780 --> 00:39:27.440
I have a guess for myself as well, but I want to hear your thoughts.

00:39:27.440 --> 00:39:27.860
Yeah.

00:39:27.860 --> 00:39:32.340
I was thinking something similar just in terms of the enterprise use cases.

00:39:32.340 --> 00:39:36.180
And of course, there's all the power of buzzword and data science.

00:39:36.180 --> 00:39:37.340
Is it based on AI?

00:39:37.340 --> 00:39:38.120
We're going to pay for that.

00:39:38.120 --> 00:39:38.600
Yeah, I love that.

00:39:38.600 --> 00:39:39.100
Yes.

00:39:39.100 --> 00:39:41.000
AI infuse everything.

00:39:41.000 --> 00:39:43.700
So I think that likely definitely helps.

00:39:43.700 --> 00:39:52.800
And then like you were referencing a few of those projects where, you know, science and research, which might be more ingrained in grant worlds versus something like Instagram.

00:39:52.800 --> 00:39:53.480
Exactly.

00:39:53.480 --> 00:39:56.840
Like there's already like a grant infrastructure, right?

00:39:56.840 --> 00:39:56.980
Right.

00:39:56.980 --> 00:40:02.080
Like it's super normal to go, I'm going to apply for a $3 million grant for this project.

00:40:02.080 --> 00:40:02.380
Right.

00:40:02.380 --> 00:40:02.700
Right.

00:40:02.700 --> 00:40:06.840
And it's, I guess, because it lives in that world so much, maybe that's a little bit why.

00:40:06.840 --> 00:40:07.100
Yeah.

00:40:07.100 --> 00:40:07.540
I don't know.

00:40:07.540 --> 00:40:08.080
It's interesting.

00:40:08.080 --> 00:40:08.340
Yeah.

00:40:08.340 --> 00:40:13.300
The other reason I was thinking is the data scientists usually report to like executives.

00:40:14.140 --> 00:40:15.120
That helps too.

00:40:15.120 --> 00:40:18.840
Leverage those one-on-ones.

00:40:18.840 --> 00:40:19.220
Yeah.

00:40:19.220 --> 00:40:19.660
Exactly.

00:40:19.660 --> 00:40:22.040
You know, yeah, we need a little bit of support here.

00:40:22.040 --> 00:40:23.320
Yeah.

00:40:23.320 --> 00:40:24.340
So let's see.

00:40:24.340 --> 00:40:28.100
I got a few other things I want to ask you about before we run out of time here.

00:40:28.100 --> 00:40:31.860
So, you know, not too long ago, GitHub was acquired by Microsoft.

00:40:31.860 --> 00:40:38.960
Like what changes have you seen internally or like in the Azure data science side of things as a result?

00:40:38.960 --> 00:40:49.240
Actually, long before the acquisition, Microsoft internal teams have already started to adopt Git for source control, like in our internal teams.

00:40:49.240 --> 00:40:51.060
That has happened even before this.

00:40:51.460 --> 00:40:57.740
So I would say after the acquisition, there's definitely more use of Git, GitHub.

00:40:57.740 --> 00:41:04.400
And also we see more integrations that we are building with GitHub being a front door to developers.

00:41:04.400 --> 00:41:09.160
And so more integration into like Visual Studio Code, better experience there.

00:41:09.280 --> 00:41:15.420
And we also build new features on GitHub as a result of GitHub being part of Microsoft.

00:41:15.420 --> 00:41:16.340
Yeah, that's cool.

00:41:16.340 --> 00:41:22.920
And you guys did do the virtual file system stuff contribution back to GitHub so that you could actually put Windows in there.

00:41:22.920 --> 00:41:24.120
Because apparently it was broken.

00:41:24.120 --> 00:41:25.880
Catherine, how about you?

00:41:25.880 --> 00:41:27.620
Yeah, it's been super exciting.

00:41:27.620 --> 00:41:32.880
I mean, like Ron was saying, I mean, Git is so ubiquitous that we were using it a lot beforehand.

00:41:32.880 --> 00:41:39.220
But now the acquisition has just opened the door to so many opportunities in terms of product integrations.

00:41:39.220 --> 00:41:45.840
And it kind of has reshifted a lot of our thinking across our different products, particularly in developer division where Ron and I work.

00:41:45.840 --> 00:41:47.780
What should we build into our product first?

00:41:47.780 --> 00:41:51.200
What would be a good integration where we could leverage GitHub for this?

00:41:51.200 --> 00:41:56.240
It's opened up a bunch of new scenarios and hopefully customers will continue to see the value from it.

00:41:56.240 --> 00:41:56.760
Yeah, that's cool.

00:41:56.760 --> 00:41:58.920
Everybody at Microsoft uses Git now.

00:41:58.920 --> 00:41:59.240
Yeah.

00:41:59.240 --> 00:42:02.540
Even as PMs, we write documentation.

00:42:02.540 --> 00:42:06.020
And then we're checking there, have to use Git.

00:42:06.020 --> 00:42:09.020
Microsoft Docs are all on Git now, which is fun.

00:42:09.020 --> 00:42:11.100
Yeah, all our documentations run on Git.

00:42:11.100 --> 00:42:13.880
So that's one single system that we use.

00:42:13.880 --> 00:42:14.940
Yeah, that's super cool.

00:42:14.940 --> 00:42:18.540
So with Azure Notebooks, what's the version control story?

00:42:18.540 --> 00:42:20.120
I know what it is for the Python.

00:42:20.120 --> 00:42:21.420
PY files.

00:42:21.420 --> 00:42:23.060
Just check them into GitHub or wherever.

00:42:23.060 --> 00:42:25.680
Yeah, so for Azure Notebooks right now,

00:42:25.940 --> 00:42:33.180
you can launch a terminal within Azure Notebooks that'll connect you to the container you're running your project in.

00:42:33.180 --> 00:42:36.700
And then from there, you can use the Git command line as you're used to.

00:42:36.700 --> 00:42:39.160
And we also have two views in Azure Notebooks.

00:42:39.160 --> 00:42:41.300
There's the vanilla classic Jupyter UI.

00:42:41.300 --> 00:42:47.880
And then you can also use the JupyterLab UI and install any Git extensions you want to in either of those ecosystems.

00:42:48.120 --> 00:42:48.540
That's cool.

00:42:48.540 --> 00:42:49.840
Yeah, I hadn't really thought about that.

00:42:49.840 --> 00:42:52.580
I guess it is baked into JupyterLab probably, right?

00:42:52.580 --> 00:42:52.880
Yeah.

00:42:52.880 --> 00:42:53.240
Yeah.

00:42:53.240 --> 00:42:53.440
Cool.

00:42:53.440 --> 00:42:59.760
So one thing that I did think was pretty neat is on the Azure Notebook page, you have a bunch of featured projects that are kind of cool.

00:42:59.760 --> 00:43:02.580
So maybe I could talk a little bit about something.

00:43:02.580 --> 00:43:06.120
So there's one that talks about getting started with Azure machine learning.

00:43:06.120 --> 00:43:06.840
That's pretty cool.

00:43:06.980 --> 00:43:11.300
But then the second one was the Python Data Science Handbook by Jake Vanderplass.

00:43:11.300 --> 00:43:11.600
Yes.

00:43:11.600 --> 00:43:12.180
That's cool.

00:43:12.180 --> 00:43:12.580
Yeah.

00:43:12.580 --> 00:43:13.940
Maybe you want to talk about those a little bit?

00:43:13.940 --> 00:43:15.880
Like just how people can find them as well?

00:43:15.880 --> 00:43:16.100
Yeah.

00:43:16.140 --> 00:43:23.740
We feature a few projects that are six or so that we kind of rotate in or out depending on new releases or anything like that.

00:43:23.740 --> 00:43:26.940
Jake's book is usually always there because people love that.

00:43:26.940 --> 00:43:27.500
And we love it.

00:43:27.500 --> 00:43:30.460
It's kind of our, it's such a big book of notebooks.

00:43:30.460 --> 00:43:30.880
Yeah.

00:43:30.880 --> 00:43:32.260
Listeners aren't familiar with it.

00:43:32.260 --> 00:43:35.680
It's like a whole O'Reilly book written all in Jupyter Notebook.

00:43:35.680 --> 00:43:37.200
So it's a massive GitHub repository.

00:43:37.200 --> 00:43:41.160
So we'll use it for like stress testing our systems and stuff because it's so big.

00:43:41.160 --> 00:43:42.960
It's kind of become our de facto standard.

00:43:43.540 --> 00:43:49.640
But we also have things like I think University of Cambridge Introduction to Python course is featured there, which is super cool.

00:43:49.640 --> 00:43:54.600
And it's really great for all of our education scenarios that use Azure notebooks to see that.

00:43:54.600 --> 00:43:58.420
And then it also feeds a lot of online course inspiration as well.

00:43:58.420 --> 00:44:01.940
So we'll see a lot of people coming from different EDU, Coursera courses.

00:44:01.940 --> 00:44:03.700
So we try to feature that content as well.

00:44:03.700 --> 00:44:04.020
That's cool.

00:44:04.020 --> 00:44:07.780
You see people creating like online courses and books and stuff like that.

00:44:07.780 --> 00:44:08.080
Yeah.

00:44:08.080 --> 00:44:13.200
And something like any cloud hosted notebooks makes such a great case for online courses.

00:44:13.360 --> 00:44:17.320
So you don't have to spend 10 minutes telling people how to install things.

00:44:17.320 --> 00:44:20.540
And then you're not there in person to help them with any installation.

00:44:20.540 --> 00:44:26.520
So being able to use something like Azure notebooks where everything's just ready and you can clone this repo and you're good to go.

00:44:26.520 --> 00:44:28.360
It's definitely has been super helpful.

00:44:28.360 --> 00:44:29.400
Yeah, that's cool.

00:44:29.400 --> 00:44:34.340
Definitely when I've done training and stuff, it's like a lot of it is let's make sure everyone can run Python.

00:44:34.600 --> 00:44:37.420
Like just type Python 3 dash capital V.

00:44:37.420 --> 00:44:39.180
Tell me what you get.

00:44:39.180 --> 00:44:40.880
Are you okay?

00:44:40.880 --> 00:44:41.880
Is it a number?

00:44:41.880 --> 00:44:42.880
Is it 3, 4?

00:44:44.560 --> 00:44:46.880
That's a very important first step.

00:44:46.880 --> 00:44:47.140
Right.

00:44:47.140 --> 00:44:47.880
Yeah.

00:44:47.880 --> 00:44:48.000
Yeah.

00:44:48.000 --> 00:44:48.140
Yeah.

00:44:48.140 --> 00:44:51.580
So we try to limit the time spent there and maximize time spent on code.

00:44:51.580 --> 00:44:52.100
Yeah.

00:44:52.100 --> 00:44:52.760
That's cool.

00:44:52.760 --> 00:44:53.060
Yeah.

00:44:53.060 --> 00:44:57.520
Did you hear about the announcement of Python shipping with the next version of Windows?

00:44:57.520 --> 00:44:59.400
The next major release in Windows?

00:44:59.400 --> 00:45:03.300
This was Steve Dower talked about this at PyCon.

00:45:03.700 --> 00:45:08.620
And basically, you know, Steve got Python 3.7 in the Windows store.

00:45:08.620 --> 00:45:09.300
Yes.

00:45:09.300 --> 00:45:09.960
And that was cool.

00:45:09.960 --> 00:45:11.980
So if you need to go install it, that would set it up.

00:45:11.980 --> 00:45:12.140
Yeah.

00:45:12.140 --> 00:45:16.780
So apparently now Python is going to come as a little shim in Windows.

00:45:16.780 --> 00:45:17.780
So if you type Python.

00:45:17.780 --> 00:45:18.100
Right.

00:45:18.100 --> 00:45:18.380
Yeah.

00:45:18.380 --> 00:45:22.220
It'll pop up that store thing and say click here to install it and then type it again.

00:45:22.220 --> 00:45:22.680
Yes.

00:45:22.680 --> 00:45:24.360
I know Steve worked on that hard.

00:45:24.360 --> 00:45:26.160
Finally made it happen.

00:45:26.160 --> 00:45:26.660
Yeah.

00:45:26.660 --> 00:45:27.080
That's awesome.

00:45:27.080 --> 00:45:29.900
I really think that's going to be a huge, huge deal.

00:45:29.900 --> 00:45:30.180
I mean.

00:45:30.180 --> 00:45:30.540
Yeah.

00:45:30.540 --> 00:45:33.400
So many people get lost in that first initial hurdle.

00:45:33.600 --> 00:45:34.760
So hopefully it'll help.

00:45:34.760 --> 00:45:35.020
Yeah.

00:45:35.020 --> 00:45:37.780
I mean, it still doesn't solve all the, you know, pip install this.

00:45:37.780 --> 00:45:38.000
Right.

00:45:38.000 --> 00:45:40.140
First step.

00:45:40.140 --> 00:45:40.480
Yeah.

00:45:40.480 --> 00:45:41.240
We're getting closer.

00:45:41.240 --> 00:45:44.420
It's at least there's one less bit of friction there.

00:45:44.420 --> 00:45:44.600
Yeah.

00:45:44.600 --> 00:45:44.840
Definitely.

00:45:44.840 --> 00:45:45.220
Yeah.

00:45:45.220 --> 00:45:45.540
Yeah.

00:45:45.540 --> 00:45:46.580
So let's see.

00:45:46.580 --> 00:45:50.760
I guess, you know, maybe you could each chime in about what was your favorite thing that

00:45:50.760 --> 00:45:53.260
you saw or coolest thing here at the conference?

00:45:53.260 --> 00:45:57.260
I'm super excited about the new terminal that ships in Windows.

00:45:57.260 --> 00:45:57.840
Yeah.

00:45:57.840 --> 00:45:58.580
That sounds pretty cool.

00:45:58.580 --> 00:45:58.900
Yeah.

00:45:58.900 --> 00:46:01.640
I haven't used it myself, but it looks pretty cool.

00:46:01.900 --> 00:46:09.780
And then I already heard of like comments about, hey, I want to switch to Windows now for development

00:46:09.780 --> 00:46:12.320
because now I can do everything on one machine.

00:46:12.320 --> 00:46:14.140
Like it's pretty cool.

00:46:14.140 --> 00:46:15.960
I'm looking forward to start using it.

00:46:15.960 --> 00:46:16.260
Yeah.

00:46:16.260 --> 00:46:18.700
That thing has not changed in a really long time.

00:46:18.700 --> 00:46:19.040
Yeah.

00:46:19.040 --> 00:46:19.340
I know.

00:46:19.560 --> 00:46:21.460
And I'm glad they focused on that.

00:46:21.460 --> 00:46:21.680
Yeah.

00:46:21.680 --> 00:46:25.620
Because command line is the center of developer workflow.

00:46:25.620 --> 00:46:29.280
And we definitely think that's important too.

00:46:29.280 --> 00:46:30.060
Yeah.

00:46:30.060 --> 00:46:31.740
I feel that's actually an interesting point.

00:46:31.740 --> 00:46:37.160
I wonder how much of like people sort of doing a lot of open source other like Microsoft

00:46:37.160 --> 00:46:42.420
outreach to other platforms outside of Windows, bringing people that kind of live in that space,

00:46:42.480 --> 00:46:47.300
which is often more command line terminal driven back end, like sort of going like,

00:46:47.300 --> 00:46:49.480
all right, why is it such a bad experience here on Windows?

00:46:49.480 --> 00:46:49.840
Yeah.

00:46:49.840 --> 00:46:53.560
On the command prompt and like sort of get, I wonder like there's probably some cycle there.

00:46:53.560 --> 00:46:54.320
Oh yeah, absolutely.

00:46:54.320 --> 00:46:58.320
They have definitely went through like multiple iterations.

00:46:58.320 --> 00:46:58.760
Yeah.

00:46:59.180 --> 00:47:02.720
But because it used to work very differently than the other platforms.

00:47:02.720 --> 00:47:03.040
Yeah.

00:47:03.040 --> 00:47:06.820
But now it is important that we get that right and make that better.

00:47:06.820 --> 00:47:10.360
So make Windows a great development environment again.

00:47:10.360 --> 00:47:10.820
Very cool.

00:47:10.820 --> 00:47:11.040
Yeah.

00:47:11.040 --> 00:47:11.600
That's a good one.

00:47:11.600 --> 00:47:11.940
How about you?

00:47:11.940 --> 00:47:12.220
Yeah.

00:47:12.220 --> 00:47:17.340
So I thought the terminal and the WSL, Windows subsystem for Linux announcements were all really

00:47:17.340 --> 00:47:17.600
great.

00:47:17.600 --> 00:47:23.000
I also really like, we talked a bit about Azure machine learning and originally that had their

00:47:23.000 --> 00:47:28.300
own APIs, which they'll still maintain, but they're also introducing compatibility with MLflow,

00:47:28.300 --> 00:47:34.220
which is a Databricks project from the Spark community around managing ML life cycles.

00:47:34.220 --> 00:47:39.540
And I thought that was another cool combination where we're enabling the open source community

00:47:39.540 --> 00:47:40.880
on Azure platforms.

00:47:40.880 --> 00:47:42.280
So I was excited about that as well.

00:47:42.280 --> 00:47:42.680
All right.

00:47:42.680 --> 00:47:44.820
Big things that are like work with that API.

00:47:44.820 --> 00:47:45.220
Yeah.

00:47:45.220 --> 00:47:45.540
Yeah.

00:47:45.540 --> 00:47:50.660
So you can use the MLflow APIs and it'll work perfectly with your Azure machine learning workspace

00:47:50.660 --> 00:47:52.400
and track the model life cycle.

00:47:52.400 --> 00:47:52.900
Very nice.

00:47:52.900 --> 00:47:53.100
Yeah.

00:47:53.100 --> 00:47:54.240
That's really, really cool.

00:47:54.240 --> 00:47:55.660
All right.

00:47:55.660 --> 00:48:00.500
Well, one more question and then I'll ask you the two sort of closing questions, of course.

00:48:00.500 --> 00:48:07.520
So the final question is, I feel like over the last five, six years, Python has been super, super

00:48:07.520 --> 00:48:07.920
popular.

00:48:07.920 --> 00:48:10.900
Have you seen the Stack Overflow article?

00:48:10.900 --> 00:48:10.960
Yeah.

00:48:10.960 --> 00:48:12.280
The incredible growth of Python?

00:48:12.280 --> 00:48:12.620
Yeah.

00:48:12.620 --> 00:48:12.780
Yeah.

00:48:12.780 --> 00:48:14.220
It's in one of our slide deck versions.

00:48:15.660 --> 00:48:19.480
So there it has this huge, huge growth and it's really positive.

00:48:19.480 --> 00:48:21.320
It's so fun to be part of that community.

00:48:21.320 --> 00:48:21.800
Oh, yeah.

00:48:21.800 --> 00:48:22.380
Absolutely.

00:48:22.380 --> 00:48:23.120
Super exciting.

00:48:23.120 --> 00:48:23.980
It's super cool.

00:48:23.980 --> 00:48:30.260
I feel like a lot of those, the new folks to that graph, they're not everyone, but a lot

00:48:30.260 --> 00:48:33.140
of them are coming from the data science side of things.

00:48:33.140 --> 00:48:34.260
What do you think about this?

00:48:34.260 --> 00:48:34.820
Yeah, absolutely.

00:48:34.960 --> 00:48:41.580
I've seen an article actually on Stack Overflow last year, analyzing why Python is growing

00:48:41.580 --> 00:48:42.300
so fast.

00:48:42.300 --> 00:48:48.660
I think one of the conclusions that author made was because of AI and machine learning becoming

00:48:48.660 --> 00:48:52.180
more and more popular in just like any businesses.

00:48:52.180 --> 00:48:57.340
Because it used to be a very tech-driven thing that's only high-tech companies are doing that.

00:48:57.460 --> 00:49:00.920
But now we want to infuse AI everywhere in all different businesses.

00:49:00.920 --> 00:49:04.240
And then we see that start to come up.

00:49:04.240 --> 00:49:07.220
A lot of developers want to do something with AI.

00:49:07.220 --> 00:49:11.360
And then Python being a natural choice for doing that job.

00:49:11.360 --> 00:49:16.460
That's why we've seen a lot of Python growth coming definitely from that space.

00:49:16.460 --> 00:49:24.120
And actually, one of the data points he pointed to was the fact how fast Pandas as a data package

00:49:24.120 --> 00:49:25.940
has grown in the past few years.

00:49:26.500 --> 00:49:31.660
as one indication that how much data science work, the workload has been growing in the

00:49:31.660 --> 00:49:32.420
Python world.

00:49:32.420 --> 00:49:33.640
So it's super exciting.

00:49:33.640 --> 00:49:38.680
So like Python is now the number four on the most popular language list.

00:49:38.680 --> 00:49:42.660
Went from like, was it six or seven last year?

00:49:42.660 --> 00:49:43.600
Yeah, it's definitely growing.

00:49:43.600 --> 00:49:45.040
And now it's number four.

00:49:45.040 --> 00:49:52.400
Yeah, we're definitely kind of working on the most very hot area where there's Python and

00:49:52.400 --> 00:49:54.300
AI and the intersection in between.

00:49:54.300 --> 00:49:55.600
Oh yeah, you put those two together.

00:49:55.600 --> 00:49:56.920
Thanks for keeping us employed.

00:49:56.920 --> 00:49:57.320
Yes.

00:49:57.320 --> 00:50:02.940
But yeah, I was like wrong with saying, I also think it's cool because I think you can see

00:50:02.940 --> 00:50:07.620
the power of Python really quickly in a data science scenario, especially with the community

00:50:07.620 --> 00:50:10.160
around it and all of the different packages you can use.

00:50:10.160 --> 00:50:13.200
I think that really shines in data science and ML cases.

00:50:13.340 --> 00:50:17.440
I mean, even just with like visualization libraries, there's so many and there's so many that do

00:50:17.440 --> 00:50:22.380
such like cool, powerful things that I feel like when people are first getting exposed to

00:50:22.380 --> 00:50:26.160
Python through data science, it really shines and shows the power of it.

00:50:26.160 --> 00:50:31.300
Yeah, it's true because you can really quickly generate a graph or a model or something like

00:50:31.300 --> 00:50:31.440
that.

00:50:31.440 --> 00:50:32.340
Yeah, like a 3D plot.

00:50:32.340 --> 00:50:33.340
It's awesome.

00:50:33.340 --> 00:50:33.840
Yeah.

00:50:34.040 --> 00:50:36.140
As opposed to like, let's build a little game, right?

00:50:36.140 --> 00:50:38.160
Like it still takes a while to build tic-tac-toe.

00:50:38.160 --> 00:50:39.360
Right, right, right.

00:50:39.360 --> 00:50:41.140
And then it just looks like a terminal thing.

00:50:41.140 --> 00:50:42.360
You're like, well, it's not so impressive.

00:50:42.360 --> 00:50:43.200
Exactly, yeah.

00:50:43.480 --> 00:50:44.660
Yeah, that's a pretty good point.

00:50:44.660 --> 00:50:45.600
All right, cool.

00:50:45.600 --> 00:50:52.780
Well, it's been a super interesting compare and contrast, the .py versus the Notebooks way

00:50:52.780 --> 00:50:53.160
of working.

00:50:53.160 --> 00:50:55.180
But thanks for both of you for sharing the stories.

00:50:55.180 --> 00:50:57.420
Let me ask you a quick question before we get out of here.

00:50:57.420 --> 00:51:01.160
Although I'm especially wrong, I'm sure I'm going to be able to guess your answer here.

00:51:01.160 --> 00:51:05.920
So are you going to write some Python code?

00:51:05.920 --> 00:51:06.820
What editor do you use?

00:51:06.820 --> 00:51:07.600
We just do the code.

00:51:07.600 --> 00:51:08.880
You guess right.

00:51:08.880 --> 00:51:09.520
Right on.

00:51:10.160 --> 00:51:15.260
I said, if I'm writing some Python code, usually Notebooks, but I used to be a Vimmer,

00:51:15.260 --> 00:51:20.920
and now I use a Vim extension for VS Code when I'm in an editor environment.

00:51:20.920 --> 00:51:21.820
That's cool.

00:51:21.820 --> 00:51:22.580
You kind of brought them together.

00:51:22.580 --> 00:51:23.460
Yeah, I brought them together.

00:51:23.460 --> 00:51:24.280
It's just been great.

00:51:24.280 --> 00:51:25.220
Yeah, it's nice.

00:51:25.220 --> 00:51:27.380
I need my key mapping.

00:51:27.380 --> 00:51:28.380
Yeah, it's all in there.

00:51:28.380 --> 00:51:32.660
So when I can get that with the power of VS Code, I'm happy.

00:51:32.660 --> 00:51:33.140
Then you're happy.

00:51:33.140 --> 00:51:33.460
Awesome.

00:51:33.460 --> 00:51:38.560
And then, you know, there's so many packages out there that people might know about.

00:51:38.560 --> 00:51:42.720
So have you come across one that's like, oh, wow, this is really cool.

00:51:42.720 --> 00:51:43.900
People should check it out.

00:51:43.900 --> 00:51:45.300
Notable PyPI package?

00:51:45.300 --> 00:51:52.720
I haven't like deeply doing this myself, but I looked at like Plotly, which does 3D plots.

00:51:52.720 --> 00:51:56.080
It's one of the first things I tried when I first joined the team.

00:51:56.080 --> 00:51:59.040
And we actually can render that inside VS Code too.

00:51:59.040 --> 00:52:00.840
And you can interact with that plot.

00:52:00.840 --> 00:52:02.960
And I thought that was super cool.

00:52:02.960 --> 00:52:02.980
Oh, yeah.

00:52:02.980 --> 00:52:03.480
That's pretty cool.

00:52:03.480 --> 00:52:03.700
Yeah.

00:52:03.700 --> 00:52:05.040
Plotly is great for graphics.

00:52:05.260 --> 00:52:09.160
Yeah, I'm a sucker for a good visualization library too.

00:52:09.160 --> 00:52:11.540
So yeah, I like Boca.

00:52:11.540 --> 00:52:13.040
I like Plotly.

00:52:13.040 --> 00:52:15.300
Yeah, I think those are probably my favorites.

00:52:15.300 --> 00:52:16.680
I'm trying to think if there's any.

00:52:16.680 --> 00:52:17.600
Yeah, those are really cool.

00:52:17.600 --> 00:52:22.280
I'll throw one out that's notebook related that's not graphical is Paper Mill.

00:52:22.280 --> 00:52:23.160
Have you tried Paper Mill?

00:52:23.160 --> 00:52:23.180
Oh, yeah.

00:52:23.180 --> 00:52:24.660
Yes, Paper Mill is very cool.

00:52:24.660 --> 00:52:29.260
Yeah, kind of turn your notebook into almost like a function you can call or something like that.

00:52:29.260 --> 00:52:29.480
Yeah.

00:52:29.480 --> 00:52:30.240
It's pretty wild.

00:52:30.580 --> 00:52:30.860
All right.

00:52:30.860 --> 00:52:32.600
Well, thank you both for being on the show.

00:52:32.600 --> 00:52:34.560
It's been a lot of fun to talk about it.

00:52:34.560 --> 00:52:40.120
I'm happy to see the work you all are doing in VS Code around sort of editorifying notebooks.

00:52:40.120 --> 00:52:42.640
And also, yeah, good work on the cloud stuff.

00:52:42.640 --> 00:52:42.980
Yeah.

00:52:42.980 --> 00:52:43.420
Thank you.

00:52:43.420 --> 00:52:43.620
Awesome.

00:52:43.620 --> 00:52:44.180
Super fun.

00:52:44.180 --> 00:52:45.200
Thanks for having us.

00:52:45.200 --> 00:52:45.380
Yeah.

00:52:45.380 --> 00:52:45.640
Yeah.

00:52:45.640 --> 00:52:46.260
Thanks for being here.

00:52:46.260 --> 00:52:46.520
Bye.

00:52:46.520 --> 00:52:49.960
This has been another episode of Talk Python To Me.

00:52:49.960 --> 00:52:53.760
Our guests on this episode have been Rong Lu and Catherine Kampf.

00:52:53.760 --> 00:52:56.080
And it's been brought to you by Linode and Backlog.

00:52:56.080 --> 00:53:00.320
Linode is your go-to hosting for whatever you're building with Python.

00:53:00.320 --> 00:53:03.900
Get four months free at talkpython.fm/Linode.

00:53:03.900 --> 00:53:05.820
That's L-I-N-O-D-E.

00:53:05.820 --> 00:53:12.400
With Backlog, you can create tasks, track bugs, make changes, give feedback, and have team conversations

00:53:12.400 --> 00:53:13.780
right next to your code.

00:53:13.780 --> 00:53:20.620
Try Backlog for your team for free for 30 days using the special URL talkpython.fm/backlog.

00:53:20.620 --> 00:53:23.120
Want to level up your Python?

00:53:23.120 --> 00:53:27.980
If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

00:53:28.100 --> 00:53:33.080
Or if you're looking for something more advanced, check out our new async course that digs into

00:53:33.080 --> 00:53:36.120
all the different types of async programming you can do in Python.

00:53:36.120 --> 00:53:40.100
And of course, if you're interested in more than one of these, be sure to check out our

00:53:40.100 --> 00:53:40.800
Everything Bundle.

00:53:40.800 --> 00:53:42.680
It's like a subscription that never expires.

00:53:42.680 --> 00:53:44.980
Be sure to subscribe to the show.

00:53:44.980 --> 00:53:47.400
Open your favorite podcatcher and search for Python.

00:53:47.400 --> 00:53:48.620
We should be right at the top.

00:53:48.620 --> 00:53:53.460
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

00:53:53.840 --> 00:53:57.620
and the direct RSS feed at /rss on talkpython.fm.

00:53:57.620 --> 00:53:59.700
This is your host, Michael Kennedy.

00:53:59.700 --> 00:54:01.220
Thanks so much for listening.

00:54:01.220 --> 00:54:02.280
I really appreciate it.

00:54:02.280 --> 00:54:04.020
Now get out there and write some Python code.

00:54:04.020 --> 00:54:24.280
I really appreciate it.

00:54:24.280 --> 00:54:54.260
Thank you.

