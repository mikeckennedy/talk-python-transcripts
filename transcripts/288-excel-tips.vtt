WEBVTT

00:00:00.001 --> 00:00:04.180
Excel is one of the most used and most empowering pieces of software out there,

00:00:04.180 --> 00:00:09.960
but that doesn't make it a good fit for every data processing need. And when you outgrow Excel,

00:00:09.960 --> 00:00:14.460
a really good option for that next step is Python and the data science tech stack,

00:00:14.460 --> 00:00:18.920
Pandas, Jupyter, and Friends. Chris Moffitt is back on Talk Python to give us

00:00:18.920 --> 00:00:23.600
concrete tips and tricks for moving from Excel to Python and Pandas.

00:00:23.600 --> 00:00:29.240
This is Talk Python To Me, episode 288, recorded September 15th, 2020.

00:00:29.240 --> 00:00:48.160
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:00:48.160 --> 00:00:53.260
and the personalities. This is your host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy.

00:00:53.260 --> 00:00:57.000
Keep up with the show and listen to past episodes at talkpython.fm,

00:00:57.320 --> 00:01:02.120
and follow the show on Twitter via at talkpython. This episode is sponsored by the Voyager video

00:01:02.120 --> 00:01:06.960
game, which is built on Python and Linode. Check out what they're both offering during their

00:01:06.960 --> 00:01:12.480
segments. It really helps support the show. Talk Python To Me is partially supported by our

00:01:12.480 --> 00:01:18.900
training courses. I got a joke for you. What's the world's most popular IDE? Excel. Funny, right?

00:01:18.900 --> 00:01:23.240
Except many companies really do run on Excel to the point where they would be much better off

00:01:23.240 --> 00:01:29.660
using clean and simple programming tools. For many, Python's data science stack would be vastly better.

00:01:29.660 --> 00:01:35.320
But moving from Excel to Python is a challenge. Most data science courses don't focus specifically on

00:01:35.320 --> 00:01:40.760
the Excel use cases. That's why we've teamed up with Chris Moffitt from Practical Business Python to

00:01:40.760 --> 00:01:46.040
create a course tailor-made for helping people learn just enough pandas in Jupyter to replace the

00:01:46.040 --> 00:01:52.500
problematic Excel usage with clean and scalable Python code. If you or your co-workers are ready to move

00:01:52.500 --> 00:01:58.260
beyond Excel, visit talkpython.fm/Excel, or just click the link in the show notes to learn more

00:01:58.260 --> 00:02:03.340
about this online course at Talk Python training. Chris, welcome back to Talk Python To Me.

00:02:03.340 --> 00:02:05.480
Thanks, Michael. Really excited to be back.

00:02:05.480 --> 00:02:14.380
Yeah, it's great to have you back. You know, back on episode 200, this is January of 2019. So coming up

00:02:14.380 --> 00:02:20.280
on two years ago, we did an episode together called Escaping Excel Hell with Python and Pandas. And it was,

00:02:20.600 --> 00:02:27.140
I got to tell you, out of upwards of 290 episodes now, well, at the time of the recording, and this

00:02:27.140 --> 00:02:33.620
is the sixth most popular episode ever, there must be some sort of problem with Excel that people are

00:02:33.620 --> 00:02:36.240
looking forward to dodge or get away from to escape.

00:02:36.240 --> 00:02:40.240
Yeah, I think so. I wish I could say it was all me and people wanted to hear me. But no,

00:02:40.240 --> 00:02:44.260
I think you're right. There's definitely some challenges with Excel that people are trying to

00:02:44.260 --> 00:02:44.680
get around.

00:02:45.080 --> 00:02:49.260
Yeah. And there are, and we're going to talk about them. I think there's some interesting

00:02:49.260 --> 00:02:54.180
parallels. You do this in Excel. Here's how you do that in Python. But there's also some

00:02:54.180 --> 00:02:59.900
interesting possibilities like, oh, I could turn this into an API, which is not too many people are

00:02:59.900 --> 00:03:04.260
probably using Excel as an API. But I will bet you there's a Windows machine in the cloud

00:03:04.260 --> 00:03:07.500
running Excel that somebody has an API focused on.

00:03:07.840 --> 00:03:12.460
Oh, I'm sure you're right. And I agree. I mean, I think that's one of the real powerful aspects of

00:03:12.460 --> 00:03:16.740
Python is your ceiling is a lot higher. You can do a lot more once you get into Python.

00:03:16.740 --> 00:03:17.060
Yeah.

00:03:17.060 --> 00:03:20.020
If you only want to use it for a little bit, that's great. But if you really want to

00:03:20.020 --> 00:03:23.040
take it to the next level, those options are out there for you.

00:03:23.040 --> 00:03:27.180
Yeah, absolutely. So let's just do a quick catch up. It's been a couple of years since you've been on

00:03:27.180 --> 00:03:29.040
the show. What have you been up to since then?

00:03:29.780 --> 00:03:33.280
Continuing to work on the blog, continuing to write articles.

00:03:33.280 --> 00:03:39.140
I just saw that PB Python, Practical Business Python, got ranked as the 12th most bestest

00:03:39.140 --> 00:03:41.260
Python blog on the internet. That's awesome.

00:03:41.260 --> 00:03:45.800
I saw that. Yeah, I don't know what their methodology was. But I will say they ranked,

00:03:45.800 --> 00:03:49.740
I think, on four or five different categories. And the one that they gave me a little bit of a lower

00:03:49.740 --> 00:03:54.620
rank on was the frequency of writing new content. And I think that's spot on. I wish I could write

00:03:54.620 --> 00:03:55.300
more. Yeah.

00:03:55.400 --> 00:04:00.060
But it does take time to get good content out there. And I've really enjoyed continuing to do

00:04:00.060 --> 00:04:05.700
that, mainly because it helps me learn and engage with the audience and learn what people want to

00:04:05.700 --> 00:04:07.960
hear about with the Python ecosystem.

00:04:07.960 --> 00:04:08.360
Yeah.

00:04:08.360 --> 00:04:10.420
So I've been continuing to do that. And

00:04:10.420 --> 00:04:10.880
Awesome.

00:04:10.880 --> 00:04:18.160
I actually have a new job. So that's always been exciting in a pandemic to start a new job and

00:04:18.160 --> 00:04:21.540
work from home full time. Like I know you're very used to.

00:04:21.540 --> 00:04:28.320
I am very used to it. I got lucky and got a mobile, remote friendly job about 12 years ago.

00:04:28.320 --> 00:04:33.400
And I've just never looked back. You know, a lot of the stuff that people are discovering in this

00:04:33.400 --> 00:04:39.000
pandemic has kind of been things I've embraced in life and really appreciate. I don't appreciate being

00:04:39.000 --> 00:04:43.140
locked away from my friends, not being able to go to restaurants. But I do appreciate not having a

00:04:43.140 --> 00:04:47.560
commute, not having all the expense and all those kinds of things. That's really nice.

00:04:47.560 --> 00:04:52.820
I definitely enjoy getting up in the morning and my commute is a couple steps from the bedroom and

00:04:52.820 --> 00:04:56.100
not 30 to 45 minutes. Definitely enjoy that.

00:04:56.100 --> 00:05:00.600
That's right. My office is in my garage, which is a separated garage in my house. I got to go across

00:05:00.600 --> 00:05:04.700
the sidewalk periodically. I'll scare a squirrel when I go out in the morning. So there's a chance of

00:05:04.700 --> 00:05:06.600
excitement, but it's pretty low excitement.

00:05:06.600 --> 00:05:09.680
Yes. Yes. Definitely have to find some benefits in all of this.

00:05:09.680 --> 00:05:13.780
That's right. So you said you have a new job. What kind of work are you doing there?

00:05:14.020 --> 00:05:19.560
I'm working, I'm continuing to work in the medical device industry. And right now I'm doing pricing

00:05:19.560 --> 00:05:25.880
strategy and analytics. So working with the company to plan our new product launches and what our pricing

00:05:25.880 --> 00:05:30.840
strategy is and how do we execute those effectively. So it's been really enjoyable so far.

00:05:30.840 --> 00:05:35.440
Yeah. It sounds like you're able to take these ideas and just a hundred percent make that the core of

00:05:35.440 --> 00:05:35.920
what you're doing.

00:05:35.920 --> 00:05:41.340
Yeah, absolutely. I mean, a lot of, you know, I keep quoting your term that Python is a superpower,

00:05:41.340 --> 00:05:47.320
and that's definitely the case for me is the knowledge that I have to take Python and apply

00:05:47.320 --> 00:05:52.080
it to some of those real world business problems that I encounter on a day-to-day basis, clean some

00:05:52.080 --> 00:05:57.960
data, manipulate some data, build some visualizations to tell a story. It's really powerful and I really

00:05:57.960 --> 00:05:59.460
enjoy getting a chance to do that.

00:05:59.460 --> 00:06:04.800
Yeah. I do think programming is a superpower and Python is a special kind of superpower for sure.

00:06:04.800 --> 00:06:05.360
Exactly.

00:06:05.800 --> 00:06:10.560
Now it's been, like I said, about two years since you were on the show. We did talk about some of the

00:06:10.560 --> 00:06:19.220
benefits of choosing basically Python's data science stack over Excel. But let's, for those who don't

00:06:19.220 --> 00:06:24.020
have an insanely good memory or haven't heard it before, let's just do a quick review of like some of the

00:06:24.020 --> 00:06:27.280
reasons you might want to use Python instead of Excel.

00:06:27.780 --> 00:06:34.520
Sure. So the first thing I think of is the repeatability aspect. So in Excel, once you create

00:06:34.520 --> 00:06:41.320
something, you'll typically end up with a bunch of tabs and a bunch of data all over the place and a

00:06:41.320 --> 00:06:47.420
bunch of formulas that are nested, maybe some VBA. And it's really hard to repeat that process. There's

00:06:47.420 --> 00:06:52.240
no way to start from the beginning and do it again. So if you've done some analysis, say,

00:06:52.240 --> 00:06:58.480
in January and you want to repeat it in October, you almost have to start from scratch. You can see

00:06:58.480 --> 00:07:03.240
that file, but there's no just button to push to run it all again. And with Python, if you do it right

00:07:03.240 --> 00:07:06.220
and build a script, then you do have that repeatability aspect.

00:07:06.220 --> 00:07:13.240
One of the things that drives me crazy about Excel from a programmer mindset is you hear of the different

00:07:13.240 --> 00:07:19.360
control flow structures and whatnot in programming languages like Python didn't have a switch statement,

00:07:19.360 --> 00:07:24.480
but maybe Python is getting a switch statement. It has obviously ifs and loops. One of the things

00:07:24.480 --> 00:07:30.020
very few people boast about their language having or saying a good thing is a go-to statement. You're

00:07:30.020 --> 00:07:33.560
like, oh, our go-tos are really improved now. Like, no, no, they're not.

00:07:33.560 --> 00:07:38.960
No, no. And like you said, Excel is just kind of like a whole bunch of go-to statements. And that

00:07:38.960 --> 00:07:44.280
really is the way you need to troubleshoot Excel. And I think that's the other piece is that

00:07:44.280 --> 00:07:48.580
repeatability kind of goes hand in hand with traceability. I mean, you can certainly write

00:07:48.580 --> 00:07:55.000
challenging Python code that's hard to understand. But in general, Python code flows from the top to

00:07:55.000 --> 00:08:00.980
the bottom and you can see what happens. Whereas Excel, it is really hard to figure out what's going

00:08:00.980 --> 00:08:05.380
on. And even if you look at the formulas, there can be errors in the formulas or there can be

00:08:05.380 --> 00:08:11.340
gaps in the formulas. So there's just a lot of subtle bugs that are difficult to trace with Excel

00:08:11.340 --> 00:08:13.660
that I think Python makes a lot easier.

00:08:13.660 --> 00:08:19.840
I think one of the challenges is when you look at an Excel spreadsheet or it could be Apple numbers or

00:08:19.840 --> 00:08:26.840
it could be Google sheets, like the same basic thing, the data is hiding the logic, right? You

00:08:26.840 --> 00:08:31.180
see a number in a cell and you don't know whether that number was typed there, what was imported from

00:08:31.180 --> 00:08:37.440
something, or if it was computed in a really complicated way. And so you've got these go-tos on

00:08:37.440 --> 00:08:39.820
top of like labels that hide the go-tos.

00:08:39.820 --> 00:08:44.480
And you can hide the data and just see the formulas, but then you don't see the data.

00:08:44.480 --> 00:08:49.240
So like you said, even when you try to get around it, it is not very easy at all.

00:08:49.240 --> 00:08:56.080
Yeah. What about lots of like large files or lots of data, something like that? Excel, Excel's at it,

00:08:56.080 --> 00:08:56.260
right?

00:08:57.580 --> 00:09:02.440
It's funny. I mean, we're certainly not talking about big data by any means, but when Excel gets

00:09:02.440 --> 00:09:07.940
to a little over a million rows, it just can't read the data. And nowadays it's very easy to get data

00:09:07.940 --> 00:09:14.340
that's well outside of what Excel can handle. And I even think if, even if you have a data set that's

00:09:14.340 --> 00:09:20.600
relatively large and fits in Excel, the performance penalty is pretty large and it's difficult to

00:09:20.600 --> 00:09:25.200
manipulate that data and analyze that data efficiently in Excel because it's just

00:09:25.200 --> 00:09:29.760
kind of a resource hog, right? You've got a lot of things that Excel supports, which are really nice

00:09:29.760 --> 00:09:35.220
from a visualization and the way it looks on screen. But in Python, for the most part, once that data is

00:09:35.220 --> 00:09:40.820
read in, if it fits in memory, it's going to be pretty performant and you can manipulate gigabytes

00:09:40.820 --> 00:09:46.260
of data on kind of your standard laptop pretty easily with Python without having to move to some

00:09:46.260 --> 00:09:48.080
of the more advanced data science tools.

00:09:48.080 --> 00:09:54.780
Yeah. I'm always, it blows my mind how fast programming languages are. Even when you've got

00:09:54.780 --> 00:10:00.180
slow Python, right? I think performance of Python is super interesting because you can talk about

00:10:00.180 --> 00:10:06.600
this code runs more slowly than say compiled C++. Maybe it's 20 times slower if it's doing numerical

00:10:06.600 --> 00:10:11.560
calculations, but that's still really fast. But there's also, of course, I could put that into

00:10:11.560 --> 00:10:14.980
like a numpy array. Now it's back to the C level speed and there's all these variations.

00:10:14.980 --> 00:10:20.100
But I remember on this course, I just did the memory management course. There's a section where I did

00:10:20.100 --> 00:10:26.260
performance around different types, structuring your classes in different ways. And so one of the metrics

00:10:26.260 --> 00:10:33.140
I had was how many attributes of the classes can you access per second? I think it was like 18 million

00:10:33.140 --> 00:10:36.900
reads per second. You're like, that's a lot of processing, right?

00:10:37.500 --> 00:10:42.720
Right. Right. Absolutely. And one of the things that I found is even just reading in an Excel file,

00:10:42.720 --> 00:10:48.380
it just takes time. Even in Python, it takes a lot of time because that Excel file is pretty bloated.

00:10:48.380 --> 00:10:53.680
It carries a lot of information outside of just the data. But once it's in Python, then it almost

00:10:53.680 --> 00:10:57.680
doesn't matter. It's really quick and a really, really big benefit.

00:10:58.040 --> 00:11:03.560
Yeah. The other thing to keep in mind as we're talking about this to position it is much of what

00:11:03.560 --> 00:11:09.860
you're proposing or you're going to propose shortly is to use Python's data science stack. So when we

00:11:09.860 --> 00:11:15.500
talk about the performance of data analysis in Python, what you really mean is mostly the performance

00:11:15.500 --> 00:11:21.740
of data analysis in C, right? Because when you talk about NumPy and pandas, a lot of that stuff is

00:11:21.740 --> 00:11:25.040
orchestration layers in Python over top native code.

00:11:25.040 --> 00:11:32.080
Sure. So people a lot smarter than me have figured out how to build these capabilities in C. You're right.

00:11:32.080 --> 00:11:37.520
And it also runs on Windows. It runs on Mac. It runs on all the different operating systems.

00:11:37.520 --> 00:11:43.660
And you're right. It runs very quickly, much more so than people would expect, especially people that think

00:11:43.660 --> 00:11:48.520
that Python has this reputation as being a slow language or maybe not a performant language.

00:11:48.520 --> 00:11:54.360
Yeah. Yeah. Meanwhile, Instagram is running on Python. YouTube is doing a million requests a second.

00:11:54.360 --> 00:11:59.980
Like there's variations on what defines slow, right? I think another interesting thing that is not

00:11:59.980 --> 00:12:04.140
mentioned here, but is probably worth mentioning is price.

00:12:04.140 --> 00:12:13.020
Yes, absolutely. So there are commercial variations of Python and there are companies that support Python,

00:12:13.020 --> 00:12:19.480
but Microsoft is making it available through the Windows store for free. All of the tools that we've

00:12:19.480 --> 00:12:25.100
mentioned like pandas or using conda for managing the environment are free and open source.

00:12:25.100 --> 00:12:30.720
So you can at least get started with it without having to buy some enterprise licensing. And when you

00:12:30.720 --> 00:12:36.640
get in big companies, enterprise licensing is really expensive. And I think sometimes developers that maybe

00:12:36.640 --> 00:12:42.500
haven't been in that environment don't realize how much companies pay for some of these licenses for

00:12:42.500 --> 00:12:45.820
commercial software. It's just really, really crazy to think about.

00:12:46.220 --> 00:12:54.840
Yeah. And I think most enterprises probably have maxed out Excel for everybody, right? They all have Word, they all have Excel, and you know, they all have Outlook.

00:12:54.840 --> 00:12:55.400
Right.

00:12:56.560 --> 00:13:05.140
But you want to do some computation, say in the cloud, right? I want to take some of this work and analyze it over there or turn it into an API endpoint or whatever.

00:13:05.140 --> 00:13:12.260
All of a sudden, maybe we don't have licenses to like fire up Windows machines and put Excel, like that doesn't make a lot of sense, right?

00:13:12.260 --> 00:13:18.580
Whereas you just take these same things as people know in Python and you just pip install them over there instead of over here.

00:13:18.580 --> 00:13:20.100
Or conda, you take your pick.

00:13:20.180 --> 00:13:31.860
Yes. And I think that speaks to this concept that there's just this higher ceiling with Python that you can get started and then, like you said, start to move to the cloud, start to move to some of these other services that are out there.

00:13:31.860 --> 00:13:42.460
And you can take the same thing that you're doing on your local machine to analyze a few thousand rows of data and scale it in the web to millions and millions of rows of data.

00:13:42.460 --> 00:13:45.660
Right. Docker, Kubernetes, all these things become an option.

00:13:45.660 --> 00:13:47.280
Exactly. Yes.

00:13:47.280 --> 00:13:52.540
Nice. A lot of what we're saying sounds like use the Python data science stack instead of Excel.

00:13:52.540 --> 00:14:02.260
But I know for sure there are many people who must deliver an Excel product or maybe receive input starting from an Excel worksheet, a workbook.

00:14:02.260 --> 00:14:16.300
And they've got to maybe they can make this step to the side where I say the rebels live, you know, but they've still got to either receive or deliver Excel, present stuff for other people in Excel and so on.

00:14:16.520 --> 00:14:19.080
There's some cool integration on that level as well.

00:14:19.080 --> 00:14:22.700
Right. Yes. And I think you're touching on a really key point.

00:14:22.800 --> 00:14:27.780
I think people that come from a programming background and see Excel just see the challenges.

00:14:27.780 --> 00:14:35.400
But businesses run on Excel and there is a lot of power in Excel and you can't just take Excel out of the organization.

00:14:35.400 --> 00:14:42.880
You shouldn't march into your CFO's office and say, we're deleting Excel and everybody's going to learn to use Python.

00:14:43.080 --> 00:14:45.640
That's just not practical in any world.

00:14:45.640 --> 00:14:47.740
And I don't think that will really be in the future.

00:14:48.060 --> 00:14:54.780
So thinking about the problem and thinking about where Python really solves the problems and where Excel can still be leveraged.

00:14:54.780 --> 00:14:56.300
Excel is a great modeling tool.

00:14:56.300 --> 00:15:07.360
Python using Pandas and some of the other tools we'll talk about allows you to export Excel files and even build interactive Excel files that you can share with others.

00:15:07.400 --> 00:15:14.500
So that those that just want the final answer or that final report or the final model can still do it in Excel.

00:15:14.500 --> 00:15:19.080
And Excel is a perfectly appropriate tool for a lot of those scenarios.

00:15:19.640 --> 00:15:23.520
Yeah. And there's some nice libraries that you can read Excel files.

00:15:23.520 --> 00:15:29.040
Obviously, Pandas just imports them directly, but you can also write to them like you can format the cells.

00:15:29.040 --> 00:15:30.300
You can change their colors.

00:15:30.300 --> 00:15:34.300
You can add formulas back into the Excel file you deliver.

00:15:34.300 --> 00:15:40.940
Right. So there's a way to sort of do all your work in Pandas, but then generate something that's a live Excel.

00:15:40.940 --> 00:15:41.500
Yes.

00:15:41.500 --> 00:15:44.080
Artifact for people who need to pick it up and run with it.

00:15:44.080 --> 00:15:45.300
I've done that quite a bit.

00:15:45.300 --> 00:15:47.320
And I think it's like a lot of data analysis.

00:15:47.320 --> 00:15:49.180
You start with a rough cut.

00:15:49.180 --> 00:15:53.620
And so maybe you dump something to Excel and it doesn't look very pretty, but it gives you what you need.

00:15:53.620 --> 00:16:02.680
And then once you get to the point where it's almost like a production ready report that you want to give to people every week or month or whenever,

00:16:02.680 --> 00:16:09.240
then you can start to apply that formatting and you can put all the styles that you can really do in Excel by hand.

00:16:09.240 --> 00:16:10.240
You can put those in.

00:16:10.240 --> 00:16:11.360
You can put pivot tables.

00:16:11.360 --> 00:16:12.720
You can put visualizations.

00:16:12.720 --> 00:16:14.840
There's a whole bunch of things you can do there.

00:16:15.000 --> 00:16:32.360
And then if you really want to take it to the next level, you can start to do some of the more sophisticated visualizations like with Streamlit or some of the other tools that are out there that really allow a high degree of interactivity on front or on top of that Python base capability.

00:16:34.020 --> 00:16:40.400
This portion of Talk Python To Me is sponsored by the PC game Voyager, available on Steam and published by Tollip Consulting.

00:16:40.400 --> 00:16:44.380
Voyager is an edutainment game in which you travel around the world.

00:16:44.380 --> 00:16:47.900
You visit famous cities and discover well-known landmarks and attractions.

00:16:47.900 --> 00:16:52.620
Enjoy stylized graphics, beautiful photos, and the local music of each city.

00:16:52.620 --> 00:16:56.240
You even apply for a variety of jobs to pay for your next plane ticket.

00:16:56.500 --> 00:17:02.240
Play it yourself or suggest it for your children so they can learn about the world instead of playing battle royales all the time.

00:17:02.240 --> 00:17:06.480
And for an added bonus, Voyager is written entirely in Python.

00:17:06.480 --> 00:17:12.340
Visit talkpython.fm/voyager or just click the link in your podcast player.

00:17:12.340 --> 00:17:16.560
You'll get a key for the game and instructions on how to redeem it on Steam.

00:17:16.560 --> 00:17:20.280
Or you can, of course, also just search for Voyager on Steam.

00:17:20.280 --> 00:17:23.980
That's V-O-Y-A-G-E-R directly on Steam.

00:17:23.980 --> 00:17:28.080
With something like Streamlit, you could publish it.

00:17:28.080 --> 00:17:29.600
People could consume it live.

00:17:29.600 --> 00:17:30.260
Yes.

00:17:30.260 --> 00:17:33.060
Maybe there's even a download as Excel button.

00:17:33.060 --> 00:17:33.960
Yeah, absolutely.

00:17:33.960 --> 00:17:37.880
I mean, I think there is a challenge and I think that'll be something that happens in the future is

00:17:37.880 --> 00:17:41.140
how do you build up that infrastructure at a company?

00:17:41.140 --> 00:17:44.980
When you're at a startup, maybe it's easy to spin up a service and get Streamlit going.

00:17:44.980 --> 00:17:54.100
But as a company grows, it's not that easy for most people to just get access to a Linux server somewhere and run Streamlit and host it for the organization.

00:17:54.100 --> 00:17:58.400
Even though it may be technically relatively simple, there's a lot of hoops to go through.

00:17:58.400 --> 00:18:01.520
So I don't think we've quite made that as easy as we'd like.

00:18:01.520 --> 00:18:03.860
But I think it's going to continue to improve in the future.

00:18:03.860 --> 00:18:04.760
Yeah, I agree.

00:18:04.760 --> 00:18:15.240
If you're just barely moving outside of Excel and you're just starting to pick up Python, like set up your own cloud VM with Linux and SSH probably is a bridge too far.

00:18:15.240 --> 00:18:16.160
Yeah.

00:18:16.160 --> 00:18:19.700
I mean, it's certainly gotten a lot easier than it was many, many years ago.

00:18:19.820 --> 00:18:22.680
I mean, there's so many services that just almost make it push button.

00:18:22.680 --> 00:18:26.500
But I think there's also this aspect of security as well.

00:18:26.500 --> 00:18:31.760
There's I think there's a lot of flexibility in being able to bring Python and install it on your system.

00:18:31.760 --> 00:18:35.180
And there may be some challenges with your IT organization to get that supported.

00:18:35.180 --> 00:18:42.720
But the one thing that I do think is really challenging is when you deal with sensitive data, you want to be careful about putting it out in the cloud.

00:18:42.720 --> 00:18:50.440
And those are the types of things you really get in trouble if you put all your confidential pricing data on a server somewhere and the company is not supportive of that.

00:18:50.440 --> 00:18:53.200
That's kind of what they call a career limiting move.

00:18:53.200 --> 00:18:55.220
That's right.

00:18:55.220 --> 00:18:59.200
You go into the big board meeting like, look, I've done all this amazing work.

00:18:59.200 --> 00:19:00.180
That's on the Internet.

00:19:00.180 --> 00:19:00.840
You're fired.

00:19:00.840 --> 00:19:01.700
Exactly.

00:19:01.700 --> 00:19:02.340
Wait a minute.

00:19:02.340 --> 00:19:03.040
What just happened?

00:19:03.040 --> 00:19:04.140
I thought I was doing good.

00:19:04.140 --> 00:19:05.760
I definitely don't want to promote that.

00:19:05.760 --> 00:19:07.460
And I think most people understand that.

00:19:07.460 --> 00:19:09.600
And there are certainly varying degrees.

00:19:09.780 --> 00:19:12.580
Some companies, it's probably wouldn't be a challenge.

00:19:12.580 --> 00:19:16.760
But then you go to the banking industry or the government or other places.

00:19:16.760 --> 00:19:17.460
And that is.

00:19:17.460 --> 00:19:19.540
Or the medical industry, like what you are in.

00:19:19.540 --> 00:19:19.700
Yeah.

00:19:19.700 --> 00:19:20.760
Or the medical industry.

00:19:20.760 --> 00:19:21.120
Yes.

00:19:21.120 --> 00:19:22.640
A huge, huge challenge.

00:19:22.640 --> 00:19:23.320
Yeah, absolutely.

00:19:23.320 --> 00:19:25.580
So let's dive into the 10 tips.

00:19:25.580 --> 00:19:31.180
Before we do, some of these tips are coming out of a course that you wrote at Talk Python.

00:19:31.180 --> 00:19:33.880
And you want to just tell people really quickly about the course?

00:19:33.880 --> 00:19:34.560
Sure.

00:19:34.560 --> 00:19:35.000
Sure.

00:19:35.000 --> 00:19:36.620
So we just went live with this course.

00:19:36.620 --> 00:19:40.100
And what I'm really excited about is we start from the beginning.

00:19:40.100 --> 00:19:42.120
And it is kind of a Windows focus.

00:19:42.120 --> 00:19:45.980
Because I think a lot of people that are taking this course are in a Windows environment.

00:19:45.980 --> 00:19:51.160
And all the code that we walk through can run on Windows or Mac or Linux.

00:19:51.160 --> 00:19:53.100
But I start from the beginning.

00:19:53.100 --> 00:19:56.300
How do you get your system set up and running in Windows?

00:19:56.800 --> 00:20:02.320
And then one of the powerful aspects of Pandas is that it is a complex library.

00:20:02.320 --> 00:20:06.200
But you really only have to learn a few concepts to get started.

00:20:06.200 --> 00:20:09.640
So we start from the beginning, assuming you know a little bit of Python.

00:20:09.640 --> 00:20:16.200
And then progress through these Pandas concepts with the idea that we want to get you up and running as quickly as possible.

00:20:16.200 --> 00:20:21.060
So that you can apply the code to your own business problems and start to solve some problems.

00:20:21.180 --> 00:20:27.120
And I use the model of talking about how you would do something in Excel and translate it to Python.

00:20:27.120 --> 00:20:33.600
And talk about the Pandas library commands and functions that you would use to manipulate the data.

00:20:33.740 --> 00:20:46.820
And then at the end, I have a kind of a real-world scenario where we talk about ingesting an Excel file or multiple Excel files, combining them, analyzing them, cleaning them, and then generating an Excel report.

00:20:46.820 --> 00:21:02.560
And I think this course really is a nice summary of how you can quickly get up to speed with Python and Pandas, get that stack running, and build a stable foundation for you to progress and just take on more and more complex tasks as you grow your skills.

00:21:02.680 --> 00:21:03.980
Yeah, it's super cool.

00:21:03.980 --> 00:21:08.880
I really enjoyed going through the course as just somebody consuming it, even though I helped put the pieces together.

00:21:08.880 --> 00:21:16.240
And there's some of my stuff I do, some accounting in Google Sheets, not actually Excel, but effectively the same experience.

00:21:16.240 --> 00:21:22.720
And after that, I'm like, yeah, I really need to take some notes and rewrite some of the important parts of what I'm doing in Excel.

00:21:22.720 --> 00:21:24.820
So yeah, people should definitely check that out.

00:21:24.820 --> 00:21:25.740
I'll put a link in the show notes.

00:21:26.220 --> 00:21:38.180
All right, without further ado, let's talk about 10 quick, easy things that we can do in Python and Pandas to move, sort of solve some of our problems or solve a series of problems in one analysis in Excel.

00:21:38.180 --> 00:21:38.740
Sure.

00:21:38.740 --> 00:21:46.960
So I think the first thing is, and it may sound obvious, but being very specific about defining the problem you want to solve.

00:21:46.960 --> 00:21:56.800
And so the example I'd give is if you came to me and said, hey, Chris, I'd like to build a model to predict customer churn at the company.

00:21:56.800 --> 00:21:59.620
And I'd say, well, what kind of model do you have today?

00:21:59.620 --> 00:22:01.480
And they say, well, we don't have a model.

00:22:01.480 --> 00:22:04.840
Well, that may be a little bit much to start out with.

00:22:04.840 --> 00:22:11.340
I think something more appropriate might be, here's a report where I open up Salesforce every day.

00:22:11.340 --> 00:22:15.340
Someone copies and pastes some data into an Excel spreadsheet.

00:22:15.340 --> 00:22:19.240
Someone manually cleans it up and then emails us out.

00:22:19.240 --> 00:22:20.360
And we do it every day.

00:22:20.360 --> 00:22:22.320
And it takes us 30 minutes a day.

00:22:22.320 --> 00:22:25.020
But we have, you know, an intern do it for us.

00:22:25.180 --> 00:22:29.780
That's the crazy stuff is there's somebody usually at these companies that do that.

00:22:29.780 --> 00:22:30.380
Yes.

00:22:30.380 --> 00:22:38.660
Either because they were told every day, every Monday, beginning of the month, whatever, before the presentation, like they sit down and they do these things.

00:22:38.660 --> 00:22:44.580
And it just, it blows my mind because, you know, you maybe spend two hours, but it's not just the two hours.

00:22:44.580 --> 00:22:47.140
Like what if there's a mistake?

00:22:47.140 --> 00:22:50.080
You know, it could be tremendous.

00:22:50.480 --> 00:22:58.060
One of the things you pointed out in the course was there's all these, there's like this history of crazy Excel errors.

00:22:58.060 --> 00:22:58.840
Right?

00:22:58.840 --> 00:22:59.560
Yeah.

00:22:59.560 --> 00:23:12.860
And I think I even mentioned one where one of the genome types that they use in scientific notation, you know, in scientific publications, they actually changed it because it was being confused with a date type in Excel.

00:23:12.860 --> 00:23:19.200
So essentially, it was easier to change science than it was to change Excel to properly process this data.

00:23:19.200 --> 00:23:20.060
That's right.

00:23:20.060 --> 00:23:24.120
I read that article in the global organization that oversees the naming of genes.

00:23:24.120 --> 00:23:24.580
Yes.

00:23:24.920 --> 00:23:30.220
The sequence of DNA pairs that give us all, all the different features we have.

00:23:30.220 --> 00:23:33.240
Some of them were named in ways that were being detected.

00:23:33.240 --> 00:23:38.700
Like one was March one, all one word, but that would become March 1st if you type that in.

00:23:38.700 --> 00:23:42.460
So they literally renamed, I think, 27 different genes.

00:23:42.460 --> 00:23:43.900
So they would be Excel friendly.

00:23:43.900 --> 00:23:47.440
They wouldn't get renamed and or reinterpreted.

00:23:47.440 --> 00:23:55.220
And then also they set up guidelines to say you can't name stuff that might be understood in a non-obvious way by Excel.

00:23:55.220 --> 00:23:56.040
It's crazy.

00:23:56.040 --> 00:23:56.980
It's crazy.

00:23:56.980 --> 00:24:01.800
I mean, as someone from a computer background, you would think, well, why would it matter what it's named?

00:24:01.800 --> 00:24:07.800
But we've all been bitten by those Excel trying to help you with things that just make it all the more worse.

00:24:07.800 --> 00:24:08.760
Yeah, exactly.

00:24:08.760 --> 00:24:15.500
So my disbelief or something along those lines is that this person sits down and does this every so often.

00:24:15.840 --> 00:24:21.640
And you only ask that question weekly, probably, because it's so painful to create the answer.

00:24:21.640 --> 00:24:23.580
And it's so error prone to create the answer.

00:24:23.580 --> 00:24:33.580
What if you could instantaneously, you know, instant, just like on demand, say, give me the current state of the report for the last seven days now or whatever.

00:24:33.580 --> 00:24:33.900
Right.

00:24:33.900 --> 00:24:38.960
And that was a five second calculation rather than a person that could make errors.

00:24:40.240 --> 00:24:47.000
And when it's a very manual process and it takes time, there may be things that you could do to tweak it to make it more useful.

00:24:47.000 --> 00:24:50.780
Maybe you want the report daily or maybe you want to add some extra fields.

00:24:50.980 --> 00:24:54.160
But people just don't want to take that on because it is painful.

00:24:54.160 --> 00:25:02.040
But once you start to automate this process, then adding a new field is easy or increasing your distribution list or reformatting it.

00:25:02.040 --> 00:25:03.340
Now I want a PDF version.

00:25:03.340 --> 00:25:03.800
Right.

00:25:03.800 --> 00:25:04.800
The granularity.

00:25:04.800 --> 00:25:05.120
Right.

00:25:05.120 --> 00:25:07.260
Like, well, we can't do it by zip code.

00:25:07.260 --> 00:25:09.640
We've got to do it by state because it's already taken half an hour.

00:25:09.640 --> 00:25:10.480
It would take a week.

00:25:10.480 --> 00:25:10.960
Right.

00:25:11.000 --> 00:25:11.880
We did it by zip code.

00:25:11.880 --> 00:25:13.260
So those kinds of things.

00:25:13.260 --> 00:25:13.480
All right.

00:25:13.480 --> 00:25:16.720
So step one or tip one is define the problem clearly.

00:25:16.720 --> 00:25:17.420
Yes.

00:25:17.420 --> 00:25:22.140
And it's not just defining it clearly, but it's making sure that you understand that problem.

00:25:22.140 --> 00:25:26.500
So it's almost more taking an existing problem that is really well understood.

00:25:26.500 --> 00:25:29.700
So you can just focus on learning Python and not learning the problem.

00:25:29.700 --> 00:25:36.160
And as you grow your skills, then you can start to tackle more and more complex problems with that base kind of Python knowledge.

00:25:36.540 --> 00:25:36.620
Yeah.

00:25:36.620 --> 00:25:43.440
One of the problems with all computer models, computer software is it'll almost always give you an answer whether or not that answer makes any sense.

00:25:43.440 --> 00:25:44.540
Exactly.

00:25:44.540 --> 00:25:45.100
Yes.

00:25:45.100 --> 00:25:45.560
Yeah.

00:25:45.560 --> 00:25:46.780
100%.

00:25:46.780 --> 00:25:48.220
All right.

00:25:48.220 --> 00:25:48.960
Tip number two.

00:25:48.960 --> 00:25:52.340
So the second one is get your Python environment set up.

00:25:52.340 --> 00:25:57.580
And it's gotten a lot better over the years, especially in the Windows world.

00:25:57.580 --> 00:26:03.020
As I mentioned, it is now officially supported in the Windows store and you can install it there.

00:26:03.200 --> 00:26:06.780
But I recommend using some sort of environment.

00:26:06.780 --> 00:26:16.040
I prefer using Miniconda to install it on Windows, install Python and the associated libraries on Windows and manage the environments.

00:26:16.040 --> 00:26:20.880
I think that's kind of the key thing to take some time and get it set up.

00:26:21.120 --> 00:26:32.380
Because one of the crazy things, just as I've taught new people how to use it, the concept of where are files on my file system is actually something you need to spend some time on.

00:26:32.380 --> 00:26:45.180
When you're on a Windows environment and you've got OneDrive and you've got Teams and you've got SharePoint and you've got Box and you've got Network Drive and local files, most people aren't very familiar with where they all are.

00:26:45.180 --> 00:26:50.640
And Windows makes it hard sometimes to even know exactly where on the disk something is.

00:26:50.860 --> 00:26:56.120
And that's a pretty important skill to have as you start getting your Python environment set up.

00:26:56.120 --> 00:27:04.860
And so it's really important to kind of get that base foundation in place so that you can start doing the actual Python development.

00:27:04.860 --> 00:27:05.420
Yeah.

00:27:05.420 --> 00:27:08.680
And there's a little bit of work to manage the concept of an environment.

00:27:08.680 --> 00:27:09.420
Right.

00:27:09.440 --> 00:27:11.240
Like that's not a trivial thing.

00:27:11.240 --> 00:27:15.620
And the unfortunate aspect is that hits you like step one or two.

00:27:15.620 --> 00:27:20.500
You know, the very next thing you basically start with is, OK, you need an environment then.

00:27:20.500 --> 00:27:24.260
But what's I think trickier is paths.

00:27:24.260 --> 00:27:26.620
Like, oh, when I type Python, it means this.

00:27:26.620 --> 00:27:30.540
But actually, Pip, if I type that, it means something else from a different environment.

00:27:30.540 --> 00:27:35.400
Like I pip installed a thing, but then I run Python and it's not in there.

00:27:35.400 --> 00:27:36.280
It can't import it.

00:27:36.360 --> 00:27:40.920
Well, it's like because for some reason, the pip was from the Python 2.7 path.

00:27:40.920 --> 00:27:45.660
And the Python, when you typed it, it runs the Python 3.1, which is not even the same thing.

00:27:45.660 --> 00:27:48.140
You know, you don't even want to get into that conversation.

00:27:48.140 --> 00:27:54.260
So I think it just started clearly with like content environments or something like that makes it a much easier thing.

00:27:54.260 --> 00:27:56.920
Once you get over that small step, then it's pretty straightforward.

00:27:56.920 --> 00:27:57.680
Yes.

00:27:57.680 --> 00:27:58.840
Yeah, absolutely.

00:27:58.840 --> 00:28:07.760
And I think if you confront it head on and have that discussion and encourage people that if you follow this process, you're not going to break anything.

00:28:07.760 --> 00:28:13.300
So if you're in a virtual environment, the worst case is your virtual environment is messed up and you can kind of restart that.

00:28:13.300 --> 00:28:13.800
Throw it away.

00:28:13.800 --> 00:28:14.320
Start over.

00:28:14.320 --> 00:28:15.060
Exactly.

00:28:15.620 --> 00:28:16.020
Yeah.

00:28:16.020 --> 00:28:16.060
Yeah.

00:28:16.060 --> 00:28:17.920
And especially on a work computer, I suspect.

00:28:17.920 --> 00:28:18.620
Right.

00:28:18.620 --> 00:28:22.780
Like I periodically will get frustrated and reformat my home computer.

00:28:22.960 --> 00:28:29.280
But if it's like a corporate one and it's got all sorts of VPN stuff that they're going to ask you, why are you messing with it?

00:28:29.280 --> 00:28:31.440
You just don't even want to mess that thing up.

00:28:31.440 --> 00:28:31.740
Yes.

00:28:31.740 --> 00:28:33.460
Maybe you don't have permissions to either.

00:28:33.460 --> 00:28:34.040
Yeah.

00:28:34.040 --> 00:28:42.340
And that is one of the things that has gotten better with Python is you can install it without administrative access, which in the past wasn't always the case.

00:28:42.340 --> 00:28:42.700
Yeah.

00:28:43.300 --> 00:28:58.700
Another thing that you advocate, and I guess this leads us into tip three, is really be super organized about your data because you can have source data, but then maybe you open up those Excel files and edit them and then they're no longer source data or they're all mixed in or they have random names.

00:28:58.700 --> 00:29:02.360
So what's your tip on kind of setting the stage with data?

00:29:02.360 --> 00:29:09.060
One of the things that I encourage people to do is get the data in as raw a format as possible.

00:29:09.440 --> 00:29:27.300
So what that might mean is if it's, say, a sales summary data, can you actually get transaction level data that's maybe directly from a data warehouse or your ERP system or somewhere so that it has all the information you need and is in a format that you don't touch?

00:29:27.300 --> 00:29:33.440
So maybe it's Excel, maybe it's CSV, but you store it somewhere and do not touch it at all.

00:29:33.620 --> 00:29:41.480
Because I think what people tend to do with Excel is because you can open up the data, you go in and make changes.

00:29:41.480 --> 00:29:50.480
So people will go and change a file name or change a cell or clean up some data by hand, which is fine, but it's not reproducible.

00:29:50.480 --> 00:29:51.520
Right.

00:29:51.520 --> 00:29:57.340
So I encourage people to set up a structure where the data is stored and you never touch it.

00:29:57.480 --> 00:30:11.880
And then if you do need to manipulate it, you have an intermediate directory structure where you store that manipulated file and then another directory structure where you store the output file and start getting in that disciplined process of managing those input and output files.

00:30:11.880 --> 00:30:12.440
Yeah.

00:30:12.440 --> 00:30:25.700
And you take this as far as having a cookie cutter template that people can run cookie cutter name of the template and it'll generate like the raw data file, the intermediate processing, the reports, the code, all that kind of stuff that always do it the same.

00:30:25.760 --> 00:30:25.880
Right.

00:30:25.880 --> 00:30:26.440
Yes.

00:30:26.440 --> 00:30:27.720
It just makes it easier.

00:30:27.720 --> 00:30:30.740
And when someone's starting, they don't have all the bad habits.

00:30:30.740 --> 00:30:31.340
Right.

00:30:31.340 --> 00:30:33.760
So this is just, you know, this is how you get started.

00:30:33.760 --> 00:30:37.680
You create these directories and you move between the directories in this way.

00:30:37.680 --> 00:30:40.240
And people are trying to learn so much.

00:30:40.240 --> 00:30:43.140
It's just accepted that that's the best way to do it.

00:30:43.140 --> 00:30:43.600
Yeah.

00:30:43.600 --> 00:30:45.620
And if you hand it off to someone else, right.

00:30:45.620 --> 00:30:51.420
Some people in the accounting department worked on it, then they handed it off to, I don't know, the marketing people.

00:30:51.420 --> 00:30:55.940
If they all know that this is the way we do it, then they understand where to go.

00:30:55.940 --> 00:31:02.140
And I also set it up and I encourage people to do this so that you're less likely to make a mistake.

00:31:02.140 --> 00:31:06.900
And if you do make a mistake, you're not going to really break the whole pipeline.

00:31:06.900 --> 00:31:10.320
It's kind of segmented out and firewalled almost, if you will.

00:31:10.320 --> 00:31:11.400
Yeah, absolutely.

00:31:11.900 --> 00:31:12.120
All right.

00:31:12.120 --> 00:31:15.780
Number four gets us into some of the pandas commands.

00:31:15.780 --> 00:31:16.340
Yes.

00:31:16.340 --> 00:31:18.620
So I love pandas.

00:31:18.620 --> 00:31:22.300
Pandas is a, an extremely powerful toolbox.

00:31:22.300 --> 00:31:30.860
And I think that is a big challenge for new users, because if you start to approach pandas, it's almost like, well, where do I start?

00:31:30.860 --> 00:31:34.180
How do I get a handle on all the options that are out there?

00:31:34.180 --> 00:31:42.080
And so I think that the first thing to do is to understand how to select your data by rows and columns.

00:31:42.080 --> 00:31:48.400
And pandas has the loc command, .loc, as well as the .iloc.

00:31:48.400 --> 00:31:53.120
And all the basic pandas tutorials kind of cover this.

00:31:53.320 --> 00:31:59.100
But when you're working with Excel, this is actually an extremely powerful command.

00:31:59.100 --> 00:32:06.900
And it can be almost deceptive how much you can get done with it and how much you need to learn it to use it in the day-to-day analysis.

00:32:06.900 --> 00:32:14.520
So I'd like to spend time just starting there with the basics of selecting data by rows and columns.

00:32:14.520 --> 00:32:20.540
So if you have a data frame, got some columns and some rows, I can say df.loc, L-O-C, bracket.

00:32:20.540 --> 00:32:24.100
And then you can give it column names, almost like slicing, right?

00:32:24.100 --> 00:32:28.240
So I could say, like, state colon country.

00:32:28.240 --> 00:32:31.780
And that might give me state, zip code, city, country.

00:32:31.780 --> 00:32:32.500
Yes.

00:32:32.500 --> 00:32:33.100
Yep.

00:32:33.100 --> 00:32:36.460
So it's kind of building up that mental model.

00:32:36.460 --> 00:32:38.040
People have Excel.

00:32:38.040 --> 00:32:41.180
They have A through ZZ columns.

00:32:41.180 --> 00:32:42.680
And they have the number of rows.

00:32:42.680 --> 00:32:45.420
And we're kind of used to manipulating data that way.

00:32:45.420 --> 00:32:50.060
This starts to get people to think about it in the pandas way.

00:32:50.060 --> 00:32:55.200
And I think it's different, but there's enough similarities that it kind of fits in that mental model.

00:32:55.200 --> 00:32:56.100
Yeah, for sure.

00:32:56.100 --> 00:33:01.020
One of the differences is now all of a sudden it's much more important what you name your column names.

00:33:01.020 --> 00:33:03.120
Yes, you're absolutely right.

00:33:03.120 --> 00:33:06.900
It matters what you name your columns, but the order doesn't matter now.

00:33:06.900 --> 00:33:14.040
So that's one of the challenges with Excel is, let's say you're doing a VLOOKUP and then you add an extra column in there.

00:33:14.040 --> 00:33:18.020
Suddenly your VLOOKUPs are broken or something else breaks down the line.

00:33:18.020 --> 00:33:25.780
So this is a little bit more like kind of a SQL table approach where you care about the names more so than the order.

00:33:25.780 --> 00:33:32.340
And I think that it's easier to troubleshoot naming changes than it is to troubleshoot order changes.

00:33:32.340 --> 00:33:37.240
This portion of Talk Python To Me is brought to you by Linode.

00:33:37.240 --> 00:33:41.360
Whether you're working on a personal project or managing your enterprise's infrastructure,

00:33:41.360 --> 00:33:46.180
Linode has the pricing, support, and scale that you need to take your project to the next level.

00:33:46.180 --> 00:33:50.980
With 11 data centers worldwide, including their newest data center in Sydney, Australia,

00:33:50.980 --> 00:33:56.660
enterprise-grade hardware, S3-compatible storage, and the next-generation network,

00:33:56.660 --> 00:34:00.820
Linode delivers the performance that you expect at a price that you don't.

00:34:00.940 --> 00:34:06.300
Get started on Linode today with a $20 credit and you get access to native SSD storage,

00:34:06.300 --> 00:34:08.960
a 40-gigabit network, industry-leading processors,

00:34:08.960 --> 00:34:12.400
their revamped cloud manager at cloud.linode.com,

00:34:12.400 --> 00:34:16.880
root access to your server, along with their newest API and a Python CLI.

00:34:16.880 --> 00:34:22.140
Just visit talkpython.fm/Linode when creating a new Linode account

00:34:22.140 --> 00:34:24.920
and you'll automatically get $20 credit for your next project.

00:34:24.920 --> 00:34:26.200
Oh, and one last thing.

00:34:26.200 --> 00:34:27.000
They're hiring.

00:34:27.000 --> 00:34:30.100
Go to linode.com slash careers to find out more.

00:34:30.540 --> 00:34:31.440
Let them know that we sent you.

00:34:31.440 --> 00:34:35.120
The order changes are a nightmare.

00:34:35.120 --> 00:34:35.740
Yes.

00:34:36.100 --> 00:34:40.300
So next tip is to use what are called accessors.

00:34:40.300 --> 00:34:40.920
Yes.

00:34:40.920 --> 00:34:41.940
Which are really cool.

00:34:41.940 --> 00:34:44.340
I had no idea about accessors before I checked out your course.

00:34:44.340 --> 00:34:47.180
Those people have much data frames I would actually work with.

00:34:47.180 --> 00:34:51.180
Well, this is another kind of good analogy to Excel.

00:34:51.180 --> 00:34:53.860
So we talk about selecting rows and columns of data.

00:34:53.860 --> 00:34:57.200
But now what do you actually do to that data?

00:34:57.200 --> 00:35:04.940
And the string accessor gives you a lot of powerful capability to clean data, to manipulate string data.

00:35:04.940 --> 00:35:07.960
So if you have text, you can uppercase it.

00:35:07.960 --> 00:35:09.020
You can lowercase it.

00:35:09.020 --> 00:35:10.600
You can strip out characters.

00:35:10.600 --> 00:35:12.320
You can use regular expressions.

00:35:12.320 --> 00:35:16.080
You can pretty much do anything that you can do in Python on a string.

00:35:16.080 --> 00:35:17.540
You can do in pandas.

00:35:17.900 --> 00:35:22.500
And the creators of pandas have done all this work to make it really fast.

00:35:22.800 --> 00:35:24.780
So you don't have to write loops.

00:35:24.780 --> 00:35:31.480
You use these accessors for strings to get at that data and potentially filter your data or clean it.

00:35:31.480 --> 00:35:36.280
And then the date time accessor is extremely powerful.

00:35:36.280 --> 00:35:42.680
I mean, I think it's one of those things that it seems on the face that it just gives you access to the date.

00:35:42.680 --> 00:35:44.620
But you can do so much with it.

00:35:44.620 --> 00:35:49.360
And it is so much easier to work with dates and times and pandas than it is Excel.

00:35:49.540 --> 00:36:00.060
And so I think that's a really fundamental concept to grasp so you can start to build more manipulation analysis capabilities in Python and pandas.

00:36:00.060 --> 00:36:00.560
Yeah.

00:36:00.560 --> 00:36:03.540
And that sort of hints a little bit on the underlying types.

00:36:03.540 --> 00:36:04.340
Yes.

00:36:04.340 --> 00:36:05.080
Right.

00:36:05.080 --> 00:36:08.740
Like Excel has some kind of idea of types a little bit.

00:36:08.740 --> 00:36:11.580
Like you do have the date columns and it knows about numbers.

00:36:11.580 --> 00:36:15.260
Put numbers on the right and strings on the left, for example, is a pretty good giveaway.

00:36:15.260 --> 00:36:18.980
But it's more important here because you're doing these operations.

00:36:18.980 --> 00:36:23.280
Like the dot DT probably doesn't make a lot of sense on a string and vice versa.

00:36:23.280 --> 00:36:23.840
Right.

00:36:23.840 --> 00:36:24.600
Yes.

00:36:24.600 --> 00:36:32.000
And that is one of the things where I think as people are new to pandas, there's a lot of times where pandas will make it easy for you.

00:36:32.000 --> 00:36:41.300
But there are certainly times where you have to go into it a little bit more and force the types and make sure that you're having good discussion or a good decision about what type you want.

00:36:41.420 --> 00:36:45.620
And I think it also exposes maybe errors in your data.

00:36:45.620 --> 00:36:53.700
So you think it's a date, time column, but then you go into it and realize you have some dummy values in there and you have to figure out at least what to do with it.

00:36:54.040 --> 00:36:55.860
And Excel may not care.

00:36:55.860 --> 00:37:02.000
But pandas is going to force you to really understand that data and make some decisions about it so you can process it appropriately.

00:37:02.000 --> 00:37:03.760
Yeah, that makes a lot of sense.

00:37:03.840 --> 00:37:12.820
Another thing that you touched on or sort of implied there is that even in regular Python programming, you do a lot of loops and things like that.

00:37:12.820 --> 00:37:14.800
Like I want to compare these two sets.

00:37:14.800 --> 00:37:20.740
So I might do a loop and then zip them together and then check whether the thing I got back, you know, they compare in some way.

00:37:20.900 --> 00:37:26.940
But just in pandas in general, you have to have a much more of a set based mindset, right?

00:37:26.940 --> 00:37:27.600
Yes.

00:37:27.600 --> 00:37:33.020
In general, like I don't even think in the course I even talk about loops.

00:37:33.020 --> 00:37:34.800
And for the most part, you should.

00:37:34.800 --> 00:37:36.500
Yeah, I don't think you do either at all.

00:37:36.500 --> 00:37:39.240
Not have to do a loop in pandas.

00:37:39.240 --> 00:37:43.580
Now, you may have to loop through files or something to get the data into pandas.

00:37:43.740 --> 00:37:51.460
But for the most part, looping is not something you want to do in pandas because they have, like you said, these vectorized formulas.

00:37:51.460 --> 00:37:57.740
So they're specialized and they kind of apply everything in parallel versus sequentially in a loop.

00:37:57.740 --> 00:37:59.800
And it's a different way of thinking.

00:37:59.800 --> 00:38:03.340
And it takes a little bit of time to kind of get that all there.

00:38:03.340 --> 00:38:10.600
But I think it is really powerful because you think about the data as a whole versus a whole bunch of individual cells in an Excel file.

00:38:10.600 --> 00:38:11.140
Right.

00:38:11.340 --> 00:38:15.860
And you could probably still just loop over everything, index back into them and update it.

00:38:15.860 --> 00:38:19.420
But it would not just be more verbose, maybe more error prone.

00:38:19.420 --> 00:38:20.440
It would also be slower.

00:38:20.440 --> 00:38:21.120
Yes.

00:38:21.120 --> 00:38:21.860
Much slower.

00:38:21.860 --> 00:38:22.640
Much slower.

00:38:22.640 --> 00:38:23.000
Yeah.

00:38:23.000 --> 00:38:23.540
Yeah.

00:38:23.540 --> 00:38:28.300
Speaking of working with sets and stuff, the next tip, Boolean indexing.

00:38:28.300 --> 00:38:36.200
So Boolean indexing is really combining those accessors that we talked about with location to then filter your data.

00:38:36.320 --> 00:38:40.960
And I think the best example I always use is like the auto filter in Excel.

00:38:40.960 --> 00:38:44.600
That's probably one of the most common things that I use.

00:38:44.600 --> 00:38:47.560
And I suspect most people use when you get a new data set.

00:38:47.560 --> 00:38:57.960
You open up your data and you click that auto filter and you select maybe a date range and you select maybe certain customers you're looking at or sort by revenue, whatever you're doing.

00:38:58.160 --> 00:39:01.100
And it's just all those kind of drop downs that you select.

00:39:01.100 --> 00:39:14.380
Well, essentially, the Boolean indexing or masking allows you to do that in code so that you can select those data sets and maybe do additional summary analysis or you can actually update the data set.

00:39:14.380 --> 00:39:18.780
So this is a powerful tool, not just for analysis, but also for cleaning your data.

00:39:18.780 --> 00:39:19.280
Right.

00:39:19.280 --> 00:39:30.660
So you could say things like if the total sales for this particular customer is greater than 100,000, I want to pull them out to a separate set and work with them special or maybe give them a discount.

00:39:30.660 --> 00:39:31.440
Right.

00:39:31.440 --> 00:39:32.780
Add to their discount range.

00:39:32.780 --> 00:39:33.540
Things like that.

00:39:33.540 --> 00:39:34.240
Absolutely.

00:39:34.240 --> 00:39:47.100
It's almost like anything you would do with an if statement in an Excel formula you can do with this combination, but it's much more powerful and easier to manage because it's in Python.

00:39:47.100 --> 00:39:51.460
It's not this kind of crazy nested Excel statement.

00:39:51.460 --> 00:40:01.340
And so you can build it up and as complicated as you want, but at least it's all just clean Python and not just kind of gnarly nested Excel formulas.

00:40:01.340 --> 00:40:01.800
Yeah.

00:40:01.880 --> 00:40:06.480
Whoever came up with the if statements and those kinds of things in Excel, what were they thinking?

00:40:06.480 --> 00:40:07.000
I don't know.

00:40:07.000 --> 00:40:07.880
I don't know.

00:40:07.880 --> 00:40:11.280
It definitely doesn't scale very well to multiple if statements.

00:40:11.280 --> 00:40:13.560
It's not the simplest sort of thing, right?

00:40:13.560 --> 00:40:15.180
No, no, it's not at all.

00:40:15.180 --> 00:40:15.500
No.

00:40:15.500 --> 00:40:15.940
All right.

00:40:15.940 --> 00:40:17.520
You talked about next step.

00:40:17.520 --> 00:40:22.980
You talked about having the data in its most raw format and I concur.

00:40:22.980 --> 00:40:29.900
I think that's a great idea, but that often means it might be too granular for the types of questions you're asking.

00:40:30.100 --> 00:40:31.940
The granularity might be off, right?

00:40:31.940 --> 00:40:37.340
Like maybe I want to know sales by state, but I have sales by city, every cell.

00:40:37.340 --> 00:40:40.580
And I just want to know the number and the state, for example.

00:40:40.580 --> 00:40:41.320
Right.

00:40:41.320 --> 00:40:43.520
So I might maybe could do a group by or something.

00:40:43.520 --> 00:40:44.140
Yes.

00:40:44.520 --> 00:40:49.860
Group by is, I think, outside of the local accessors.

00:40:49.860 --> 00:40:51.280
I use group by a ton.

00:40:51.280 --> 00:40:58.000
And group by is the way you can actually aggregate your data across multiple different columns.

00:40:58.000 --> 00:41:03.880
And then not just sum the data, you can perform many mathematical functions on it.

00:41:03.880 --> 00:41:04.760
You can do the average.

00:41:04.760 --> 00:41:06.140
You can do a standard deviation.

00:41:06.140 --> 00:41:07.520
You get the min and the max.

00:41:07.520 --> 00:41:12.380
But you can almost have as many levels as you want.

00:41:12.900 --> 00:41:15.700
And so it's very trivial to do a group by.

00:41:15.700 --> 00:41:18.000
And like you said, look at it maybe by state.

00:41:18.000 --> 00:41:20.140
And then you look at it by region.

00:41:20.140 --> 00:41:22.900
And then maybe you look at it by product.

00:41:22.900 --> 00:41:23.300
Who knows?

00:41:23.300 --> 00:41:23.520
Yeah.

00:41:23.620 --> 00:41:25.580
The salespeople or the product.

00:41:25.580 --> 00:41:25.880
Yeah.

00:41:25.880 --> 00:41:30.160
So it's just a lot of flexibility with very minimal code.

00:41:30.160 --> 00:41:36.000
And I find that that's a really much simpler way to analyze the data and just kind of iterate

00:41:36.000 --> 00:41:38.120
through that process using group by.

00:41:38.120 --> 00:41:41.000
And it's another one of those functions.

00:41:41.000 --> 00:41:44.460
It's almost deceptive in how powerful it is.

00:41:44.460 --> 00:41:44.880
Yeah.

00:41:44.880 --> 00:41:45.780
Yeah, absolutely.

00:41:45.780 --> 00:41:48.820
It's another one of those set based mindsets as well.

00:41:48.820 --> 00:41:49.440
Yes.

00:41:49.440 --> 00:41:50.200
Yes.

00:41:50.200 --> 00:41:53.580
Because it's not your the everything is kind of done on the

00:41:53.580 --> 00:41:54.660
column basis.

00:41:54.660 --> 00:41:59.360
And so it's just doing all the heavy lifting behind the scenes for you.

00:41:59.360 --> 00:41:59.720
Yeah.

00:41:59.720 --> 00:42:06.460
So next tip, when I hear people who are Excel power users, you know, they're doing serious

00:42:06.460 --> 00:42:08.100
stuff because they talk about pivot tables.

00:42:08.100 --> 00:42:09.280
I don't know.

00:42:09.280 --> 00:42:11.060
I do what pivot tables or of these.

00:42:11.060 --> 00:42:13.580
And then how do they manifest over in pandas?

00:42:13.580 --> 00:42:14.060
Sure.

00:42:14.060 --> 00:42:15.060
So you're right.

00:42:15.060 --> 00:42:20.080
The pivot table is kind of the I think it's probably the number one tool that people use

00:42:20.080 --> 00:42:21.000
in Excel.

00:42:21.000 --> 00:42:27.240
And it's a really convenient way to group the data in multiple different levels across

00:42:27.240 --> 00:42:28.140
rows and columns.

00:42:28.140 --> 00:42:31.700
So you can adjust how many levels you want to group it.

00:42:31.700 --> 00:42:36.500
And then you can summarize the numeric values in multiple different ways.

00:42:36.660 --> 00:42:40.140
And what is really nice about it from an Excel perspective is it's all GUI driven.

00:42:40.140 --> 00:42:44.480
So you can kind of drag and drop your columns and put them wherever you want so that you

00:42:44.480 --> 00:42:49.340
can quickly adjust the way the data is being presented just using that GUI.

00:42:49.340 --> 00:42:56.360
And what pandas has the pivot table command is really kind of group by on steroids.

00:42:56.360 --> 00:42:59.520
So everything that group by can do pivot table can do.

00:42:59.520 --> 00:43:06.240
And it uses the similar kind of structure that the Excel pivot table uses as well.

00:43:06.240 --> 00:43:10.040
And so what I find is group by is the first step.

00:43:10.040 --> 00:43:16.620
And then as I start to group more and more levels or do something called unstacking or stacking

00:43:16.620 --> 00:43:20.200
the data, then pivot table really makes that easier.

00:43:20.200 --> 00:43:23.340
And I think that's a nice transition for people that have experience with Excel.

00:43:23.340 --> 00:43:25.500
They have this pivot table concept.

00:43:25.500 --> 00:43:27.400
And pandas does the same thing.

00:43:27.760 --> 00:43:33.920
And if you start to master that, you've really got a very powerful tool to do a lot of quick

00:43:33.920 --> 00:43:35.320
and easy analysis and reporting.

00:43:35.320 --> 00:43:36.320
Yeah, absolutely.

00:43:36.320 --> 00:43:43.020
So another thing that you talked about is taking multiple sources of data, maybe multiple Excel

00:43:43.020 --> 00:43:49.860
workbooks that have some column that means the same thing and sticking those together and

00:43:49.860 --> 00:43:52.580
having it merge that data together automatically.

00:43:52.580 --> 00:43:53.320
Yes.

00:43:53.320 --> 00:43:58.440
So I think in Excel, probably the most common way to do that is the VLOOKUP.

00:43:58.440 --> 00:44:01.660
So everyone has some VLOOKUP experience.

00:44:01.660 --> 00:44:03.120
They're more advanced.

00:44:03.120 --> 00:44:09.520
Maybe they use index match, or I think there's the new Excel called XLOOKUP, which is even more

00:44:09.520 --> 00:44:09.940
powerful.

00:44:09.940 --> 00:44:15.380
But the basic idea is it's kind of a very simple merge or join of the data.

00:44:15.380 --> 00:44:17.080
And pandas supports that.

00:44:17.080 --> 00:44:23.300
But pandas merging of data is much more like the SQL approach where you can do a left join or

00:44:23.300 --> 00:44:29.520
right join and inner and outer joins and have a lot more sophisticated usage where you can

00:44:29.520 --> 00:44:34.120
join maybe on multiple columns without having to concatenate them together like you would

00:44:34.120 --> 00:44:34.500
in Excel.

00:44:34.500 --> 00:44:36.400
So it's really powerful to do that.

00:44:36.400 --> 00:44:41.680
And then also, I'm sure a lot of people in Excel will do just the cut and paste.

00:44:41.680 --> 00:44:47.060
So you've got different tabs with data, and you can easily, if the data is all the same,

00:44:47.060 --> 00:44:50.280
stack it on top of each other with the pandas concatenate command.

00:44:50.280 --> 00:44:50.840
Right.

00:44:51.040 --> 00:44:54.320
I've got January, February, and March's sales data.

00:44:54.320 --> 00:44:55.300
I want it for the quarter.

00:44:55.300 --> 00:44:57.320
So we're just going to jam it on the end.

00:44:57.320 --> 00:44:57.940
Exactly.

00:44:57.940 --> 00:44:59.160
One after another, right?

00:44:59.160 --> 00:44:59.520
Yeah.

00:44:59.520 --> 00:45:00.080
Yeah.

00:45:00.080 --> 00:45:01.860
And I think people do that all the time.

00:45:01.860 --> 00:45:04.260
And that's certainly a valid approach.

00:45:04.260 --> 00:45:06.660
It's hard to repeat, and it's easy to make mistakes.

00:45:07.320 --> 00:45:12.380
But once you master those concatenate and merge commands, then it's very easy.

00:45:12.380 --> 00:45:17.600
And things that you can do in Excel where maybe cutting and pasting, you know, a thousand

00:45:17.600 --> 00:45:18.240
rows is fine.

00:45:18.240 --> 00:45:20.760
But if you have a million, you just can't really do that in Excel.

00:45:20.760 --> 00:45:24.700
Whereas pandas, it's all the same command, whether you're doing 10 rows or 10 million rows.

00:45:24.700 --> 00:45:25.260
Yeah.

00:45:25.260 --> 00:45:25.660
Yeah.

00:45:25.660 --> 00:45:26.140
Very cool.

00:45:26.140 --> 00:45:26.960
All right.

00:45:27.020 --> 00:45:31.260
So far, these nine tips have probably given us a nice result.

00:45:31.260 --> 00:45:32.360
We've got the data.

00:45:32.800 --> 00:45:36.820
But one of the cool things I can do in Excel is I can go over to that chart section.

00:45:36.820 --> 00:45:39.340
They want this kind of chart or that kind of chart.

00:45:39.340 --> 00:45:39.920
Yes.

00:45:39.920 --> 00:45:40.780
Yeah.

00:45:40.780 --> 00:45:46.800
And so the next tip is picking a plotting library or a data visualization library and starting

00:45:46.800 --> 00:45:47.620
to learn it.

00:45:47.620 --> 00:45:53.480
So one of the challenges in the Python ecosystem is there are a lot of options.

00:45:53.480 --> 00:45:56.340
It's a good thing because there are a lot of options.

00:45:56.340 --> 00:45:58.260
There's a lot of really good options.

00:45:58.260 --> 00:46:02.040
But it is challenging for a new user to figure out where to start.

00:46:02.040 --> 00:46:03.740
So I just want to do a bar chart.

00:46:03.740 --> 00:46:06.140
I want to do a line chart, maybe a box plot.

00:46:06.140 --> 00:46:06.480
Right.

00:46:06.480 --> 00:46:10.160
Even just knowing what basic library I need to start researching.

00:46:10.160 --> 00:46:11.260
Should I do Plotly?

00:46:11.260 --> 00:46:13.120
Should I do Matplotlib?

00:46:13.120 --> 00:46:15.100
I've heard there's other things, right?

00:46:15.100 --> 00:46:16.660
Where do you even start, right?

00:46:16.660 --> 00:46:17.920
Yeah, it's really hard.

00:46:17.920 --> 00:46:23.380
And so what I think is important is if you're getting started and you're tackling this kind

00:46:23.380 --> 00:46:29.100
of well-known problem and you've built up some core pandas knowledge, pick a library

00:46:29.100 --> 00:46:30.080
and go with it.

00:46:30.340 --> 00:46:35.140
And right now, the one that I recommend, it's certainly not the only one, but I've had some

00:46:35.140 --> 00:46:36.880
good experience with it is Plotly.

00:46:36.880 --> 00:46:43.960
And specifically, Plotly has a Plotly Express API, which is kind of a streamlined approach to

00:46:43.960 --> 00:46:45.360
manipulate data.

00:46:45.620 --> 00:46:48.260
And I think that that works really well.

00:46:48.260 --> 00:46:52.480
One of the things I like about it is it integrates well with your Jupyter Notebooks.

00:46:52.480 --> 00:46:54.980
It is interactive by default.

00:46:54.980 --> 00:46:58.300
So once you build one, it does all the JavaScript behind the scenes.

00:46:58.300 --> 00:47:02.380
So you can hover over your plots and see the individual data points.

00:47:02.380 --> 00:47:04.080
And it works really well.

00:47:04.080 --> 00:47:04.500
Nice.

00:47:04.740 --> 00:47:10.600
And if you need to do more in-depth modifications of it, you can do that as well.

00:47:10.600 --> 00:47:12.400
So I think it strikes a nice balance.

00:47:12.400 --> 00:47:14.680
There's certainly other options out there.

00:47:14.680 --> 00:47:20.600
But what I think is best for someone is to pick one and stick with it a little bit and get a

00:47:20.600 --> 00:47:21.500
feel for the API.

00:47:21.500 --> 00:47:25.660
And then if you decide that that's not the right one, maybe look at some alternatives as well.

00:47:25.660 --> 00:47:28.280
Yeah, a lot of these have galleries, right?

00:47:28.280 --> 00:47:32.940
You can go into the gallery and go, does it make pictures kind of like I need yes or no?

00:47:32.940 --> 00:47:34.960
And then you can decide whether to pay attention to it.

00:47:34.960 --> 00:47:35.500
Yes.

00:47:35.500 --> 00:47:40.220
And I think the way these libraries plot is so different from Excel.

00:47:40.220 --> 00:47:46.260
It takes some time for you to kind of figure out how to fit it in your brain so that you can

00:47:46.260 --> 00:47:47.980
use them effectively.

00:47:47.980 --> 00:47:53.320
And so that's why I encourage someone to stick with it, get it, you know, apply it to your problem.

00:47:53.320 --> 00:47:56.060
And it even goes back to our earlier point about getting the data.

00:47:56.060 --> 00:48:01.300
So you have to have the data in the right format in the sufficient level of detail so that you

00:48:01.300 --> 00:48:02.140
can do this plotting.

00:48:02.140 --> 00:48:07.640
But once you get your mind around it, it's much faster to iterate through your visualizations

00:48:07.640 --> 00:48:12.720
and really get some meaningful insight with just very few lines of code.

00:48:12.720 --> 00:48:13.700
Yeah, absolutely.

00:48:13.700 --> 00:48:16.320
The one I've been using for this kind of stuff lately is Altair.

00:48:16.320 --> 00:48:17.280
It's been nice as well.

00:48:17.280 --> 00:48:18.980
Yeah, I like Altair as well.

00:48:18.980 --> 00:48:19.820
I mean, it's a great one.

00:48:19.820 --> 00:48:21.520
Bokeh is good as well.

00:48:21.520 --> 00:48:22.420
It's kind of hard.

00:48:22.420 --> 00:48:24.200
It's like picking your favorite child.

00:48:24.200 --> 00:48:27.620
You certainly don't want to go on record with that.

00:48:27.620 --> 00:48:30.780
But if you pick one of those three, I don't think you're going to go wrong.

00:48:30.780 --> 00:48:31.740
Yeah, absolutely.

00:48:31.740 --> 00:48:32.660
All right.

00:48:32.660 --> 00:48:33.880
Well, those are some really great tips.

00:48:33.880 --> 00:48:37.460
Like I said, after seeing all these things in action, I'm like, I've been doing it wrong.

00:48:37.460 --> 00:48:42.640
I've got to take some time and go and put some of this in practice and what I'm doing because

00:48:42.640 --> 00:48:45.140
I've got Excel type things like everyone else, you know?

00:48:45.300 --> 00:48:45.540
Yes.

00:48:45.540 --> 00:48:49.720
And you, if you're using Google Sheets or other things where you want to pull in data,

00:48:49.720 --> 00:48:53.660
I think that's really where you'd experience a lot of benefits.

00:48:53.660 --> 00:48:58.840
And those are some of the other, you know, next level benefits of using Pandas as you have those

00:48:58.840 --> 00:49:04.700
ability to bring in data pretty seamlessly and easily through APIs or other sources.

00:49:04.700 --> 00:49:05.340
Yeah.

00:49:05.340 --> 00:49:10.060
And it's worth also pointing out that we said you can read and write Excel files with

00:49:10.060 --> 00:49:15.020
Python and that's great, but you can also read and write Google Sheets, right?

00:49:15.020 --> 00:49:19.640
So if you need to deliver a Google Sheet to somebody or update an existing one, there are

00:49:19.640 --> 00:49:23.820
APIs to connect to a Google Sheet and do similar things to it.

00:49:23.980 --> 00:49:24.220
Right.

00:49:24.220 --> 00:49:26.280
And it's all pretty straightforward.

00:49:26.280 --> 00:49:30.980
And especially once you're using Pandas, it will either support Pandas or if it doesn't

00:49:30.980 --> 00:49:34.900
support Pandas, it's going to be pretty easy for you to figure out how to get that Pandas

00:49:34.900 --> 00:49:39.280
data into that format because Pandas is such a common tool that everybody uses.

00:49:39.280 --> 00:49:39.840
Yeah.

00:49:39.840 --> 00:49:40.340
Awesome.

00:49:40.340 --> 00:49:40.680
All right.

00:49:40.680 --> 00:49:44.280
Well, let's wrap up this tip section with a really quick thought.

00:49:44.280 --> 00:49:49.400
You know, you've been going through this journey at a couple of companies, probably to varying

00:49:49.400 --> 00:49:54.920
degrees of willingness or unwillingness with various participants in the loop.

00:49:54.920 --> 00:49:57.000
What's your advice to people out there?

00:49:57.000 --> 00:49:58.020
What's your experience been?

00:49:58.020 --> 00:50:05.300
I think the thing that you have going for you now is the data science kind of revolution and

00:50:05.300 --> 00:50:11.480
so many people understanding that data science is the thing, artificial intelligence, machine

00:50:11.480 --> 00:50:15.720
learning, whatever the term is like it is for better or worse, a little bit of a buzzword.

00:50:15.720 --> 00:50:18.140
People in your organization are going to know about it.

00:50:18.260 --> 00:50:23.500
And I would say leverage that to say this Python tool, which can help us with data science

00:50:23.500 --> 00:50:27.940
tasks, can also help us with some of these manual processes that we have.

00:50:27.940 --> 00:50:34.960
And you can point to maybe some of your bigger enterprise applications that actually support

00:50:34.960 --> 00:50:35.380
Python.

00:50:35.380 --> 00:50:40.840
So I'll give one example like Tableau is a visualization tool that I think a lot of companies

00:50:40.840 --> 00:50:43.360
have and they actually have bindings for Python.

00:50:43.360 --> 00:50:47.080
And if you go to a Tableau user group, they will talk about using Python.

00:50:47.080 --> 00:50:50.580
So it's not as foreign a concept anymore as it used to be.

00:50:50.580 --> 00:50:55.600
So I think in general, people are going to be more receptive to talking about Python.

00:50:55.600 --> 00:51:02.960
So frame it in those terms as this is kind of a data science industry standard that you want

00:51:02.960 --> 00:51:07.080
to start learning and applying to your specific use cases.

00:51:07.600 --> 00:51:12.960
And then I think the other thing I'd recommend is it is really hard.

00:51:12.960 --> 00:51:14.820
I think you talked about this before.

00:51:14.820 --> 00:51:17.960
People look at Python and Python seems so easy.

00:51:17.960 --> 00:51:20.380
It is kind of like pseudocode.

00:51:21.040 --> 00:51:23.600
And people say, okay, I understand it.

00:51:23.600 --> 00:51:28.180
But getting them to take the next step to actually write code for themselves to solve their own

00:51:28.180 --> 00:51:28.540
problem.

00:51:28.540 --> 00:51:31.860
So I think trying to find a way to have a cohort of people.

00:51:31.860 --> 00:51:33.640
Maybe you need two or three people.

00:51:33.640 --> 00:51:35.320
You're going down this journey together.

00:51:35.480 --> 00:51:36.980
So it's not just you.

00:51:36.980 --> 00:51:42.020
It's coworkers or maybe cross-functioning across different departments where you hold each

00:51:42.020 --> 00:51:44.880
other accountable to actually doing some of the work.

00:51:44.880 --> 00:51:46.140
So you're learning about it.

00:51:46.140 --> 00:51:47.100
You're applying it.

00:51:47.100 --> 00:51:54.540
You're using this group to reinforce it and keep the momentum versus just getting caught

00:51:54.540 --> 00:51:59.140
up in all the day-to-day work that squeezes out all the fun stuff you'd like to do in Python.

00:51:59.580 --> 00:52:00.260
Yeah, for sure.

00:52:00.260 --> 00:52:06.760
And one other tip I would throw in there is nothing solves the debates about whether this

00:52:06.760 --> 00:52:11.080
is possible, whether this is a good idea, as just doing it, right?

00:52:11.080 --> 00:52:15.220
So your example of we're going to spend 30 minutes to get all this data together and then

00:52:15.220 --> 00:52:16.800
we're going to fill it out in Excel.

00:52:16.800 --> 00:52:21.900
Like if you say, maybe if you're one of the high-end programmers of the company, it's not

00:52:21.900 --> 00:52:23.100
going to give you much credence.

00:52:23.100 --> 00:52:28.480
But if you're somebody who's not typically the developer and you go and say, look, this used

00:52:28.480 --> 00:52:33.340
to be super painful and error-prone and monthly, now I wrote this code and it took me four hours

00:52:33.340 --> 00:52:34.000
instead of two.

00:52:34.000 --> 00:52:37.300
But now I just push the button and it's instant, always, right?

00:52:37.300 --> 00:52:39.660
Everyone else would be like, wait a minute, that was horrible.

00:52:39.660 --> 00:52:41.680
We can avoid horrible things like that, right?

00:52:41.680 --> 00:52:44.500
Like play, I think playing to that angle as well, it's got a lot of value.

00:52:44.500 --> 00:52:50.440
And you have to be able to be comfortable selling those wins, letting people know that, yes,

00:52:50.440 --> 00:52:52.060
this is something we accomplished.

00:52:52.060 --> 00:52:56.140
Here's something maybe behind the scenes, some data we scrubbed or manipulated.

00:52:56.380 --> 00:52:59.480
And then nothing breeds success like success.

00:52:59.480 --> 00:53:04.820
So once you prove you could do it, people start to come to you and say, hey, you know,

00:53:04.820 --> 00:53:11.740
like I had some survey monkey data that I worked with to clean up and I didn't spend a lot of

00:53:11.740 --> 00:53:13.900
time explaining how much work it was to clean it up.

00:53:13.900 --> 00:53:14.620
I just did it.

00:53:14.620 --> 00:53:18.660
But the next time a survey came out, you know, they came back to me and said, hey, could you

00:53:18.660 --> 00:53:19.280
help with this?

00:53:19.280 --> 00:53:20.880
And fortunately, I had those scripts.

00:53:20.880 --> 00:53:25.600
So all that time and energy I spent there, I could just kind of repurpose and keep moving it

00:53:25.600 --> 00:53:25.880
forward.

00:53:25.880 --> 00:53:26.420
Yeah.

00:53:26.420 --> 00:53:27.180
Cool, cool.

00:53:27.180 --> 00:53:30.720
Two really quick things I just want to touch on while I've got you here.

00:53:30.720 --> 00:53:37.120
You put together a really nice article on setting up a Python developer environment on Windows,

00:53:37.120 --> 00:53:38.920
but using Linux.

00:53:38.920 --> 00:53:40.700
I want to tell people real quick about that.

00:53:40.700 --> 00:53:41.300
Sure.

00:53:41.780 --> 00:53:47.100
So several years ago, Microsoft came out with something called Windows Subsystem for Linux,

00:53:47.100 --> 00:53:48.040
WSL.

00:53:48.040 --> 00:53:57.760
And it's essentially gives you kind of a lightweight kernel in Windows that you can then install

00:53:57.760 --> 00:54:00.540
Ubuntu or a couple other different versions of Linux.

00:54:00.540 --> 00:54:04.880
And you've got a full Linux environment running on your Windows system.

00:54:05.040 --> 00:54:07.940
And it opens essentially instantaneously.

00:54:07.940 --> 00:54:12.960
And performance is good, but also it integrates with Windows.

00:54:12.960 --> 00:54:19.180
So when you want to use your file explorer to look at your files on the WSL system and copy

00:54:19.180 --> 00:54:21.260
between your Windows system, it's easy to do.

00:54:21.260 --> 00:54:24.500
You can even do things like this is really cool.

00:54:24.500 --> 00:54:30.580
Like you run a Jupyter Notebook in WSL and it will open up your Chrome browser in your Windows

00:54:30.580 --> 00:54:31.080
environment.

00:54:31.080 --> 00:54:37.280
So they are much more tightly integrated than just like a normal virtual machine or a dual

00:54:37.280 --> 00:54:38.060
boot system.

00:54:38.060 --> 00:54:41.660
And a lot of this is on the Windows Subsystem 2, right?

00:54:41.660 --> 00:54:42.220
Correct.

00:54:42.220 --> 00:54:46.200
If you do enough research and you look back, people might complain that it doesn't do some

00:54:46.200 --> 00:54:46.820
of these things.

00:54:46.820 --> 00:54:50.460
But that was version one before it was kind of more integrated.

00:54:50.460 --> 00:54:51.180
Correct.

00:54:51.180 --> 00:54:51.460
Yeah.

00:54:51.460 --> 00:54:55.260
There were some changes under the hood, especially with the file systems and the way they were

00:54:55.260 --> 00:54:57.720
set up and how the access is done in speed.

00:54:58.100 --> 00:55:02.420
So definitely anybody that's thinking about going down this path, use WSL 2.

00:55:02.420 --> 00:55:06.940
And the other thing that Windows has done is I don't have any specific insight, but it sounds

00:55:06.940 --> 00:55:08.240
like it's been very successful.

00:55:08.240 --> 00:55:14.880
And I know Microsoft has even backported WSL 2 to some of the prior builds so that you don't

00:55:14.880 --> 00:55:18.540
even have to be on the bleeding edge quite as much as you did in the past.

00:55:18.540 --> 00:55:25.280
So I think they've really hit on something with being able to use a full Linux system

00:55:25.280 --> 00:55:31.140
in Windows and using the new Windows Terminal, which, you know, it's a little surprising to

00:55:31.140 --> 00:55:34.380
get excited about a terminal given how long they've been around.

00:55:34.380 --> 00:55:35.040
No, it's not.

00:55:35.040 --> 00:55:35.700
It was horrible.

00:55:35.700 --> 00:55:37.860
But the Windows Terminal is really nice.

00:55:37.860 --> 00:55:42.800
And if you've worked on a Linux system, you're going to feel right at home.

00:55:42.800 --> 00:55:43.740
And it's really powerful.

00:55:43.740 --> 00:55:44.680
Yeah, absolutely.

00:55:44.900 --> 00:55:48.500
Now, I guess it's worth pointing out really quickly that you can do everything that you've

00:55:48.500 --> 00:55:51.620
been talking about up to this point without Windows subsystem for Linux.

00:55:51.620 --> 00:55:56.180
But it's just if you want to sometimes certain things work better on Linux and you don't have

00:55:56.180 --> 00:55:58.360
to go create virtual machines and stuff if you don't want to.

00:55:58.360 --> 00:55:58.760
Yes.

00:55:58.760 --> 00:56:05.000
And I will say I do think Windows subsystem for Linux, I think you need administrative access

00:56:05.000 --> 00:56:07.220
to get that all set up and running.

00:56:07.220 --> 00:56:11.960
So that may be a little more difficult for people to do on their work computers.

00:56:11.960 --> 00:56:16.840
But if you have a computer at home or you do have admin access, it's pretty cool.

00:56:16.840 --> 00:56:17.180
Yeah.

00:56:17.180 --> 00:56:18.320
A lot of power.

00:56:18.320 --> 00:56:19.240
Yeah, for sure.

00:56:19.240 --> 00:56:24.820
And then you have this other project called Side Table, which sounds like it makes displaying

00:56:24.820 --> 00:56:29.060
information exactly like an Excel user who found their way over to Pandas might want to

00:56:29.060 --> 00:56:29.660
do better.

00:56:29.660 --> 00:56:30.960
Tell us about that project real quick.

00:56:30.960 --> 00:56:31.520
Sure.

00:56:31.680 --> 00:56:35.820
It's a simple library I put together, but I've actually found it really useful.

00:56:35.820 --> 00:56:42.000
I use a lot of my day-to-day analysis just to get quick summary tables of my data.

00:56:42.000 --> 00:56:48.760
So I think probably the more correct term is it's a frequency table, but it gives you quick

00:56:48.760 --> 00:56:55.980
summary information if you just want to know on a new data set, like how much, how are sales

00:56:55.980 --> 00:56:59.780
distributed by state or by region or by salesperson.

00:56:59.880 --> 00:57:04.880
It's just kind of a quick one line command that will give you a nicely formatted summary

00:57:04.880 --> 00:57:05.520
of your data.

00:57:05.520 --> 00:57:10.860
It doesn't require anything else outside of Pandas, so it's easy to install and really

00:57:10.860 --> 00:57:13.780
streamlined and kind of integrated with your data workflow.

00:57:13.780 --> 00:57:18.440
And so I've really enjoyed working on that and I've enjoyed using it and hope others will

00:57:18.440 --> 00:57:18.780
as well.

00:57:18.780 --> 00:57:19.200
Yeah.

00:57:19.200 --> 00:57:20.240
People can just check it out.

00:57:20.240 --> 00:57:24.380
I'll put a link in the show notes and it's visually very clear why you'd want a better

00:57:24.380 --> 00:57:28.120
presentation than some of the default Pandas output as it shows up.

00:57:28.120 --> 00:57:28.980
And it's nice.

00:57:28.980 --> 00:57:29.400
Yeah.

00:57:29.400 --> 00:57:29.860
Cool.

00:57:29.860 --> 00:57:29.980
Cool.

00:57:29.980 --> 00:57:30.500
All right.

00:57:30.500 --> 00:57:33.620
Well, before you get out of here, let me ask you the final two questions.

00:57:33.620 --> 00:57:37.320
If you're going to write some Python code, maybe you're going to do this kind of work that you're

00:57:37.320 --> 00:57:37.780
talking about.

00:57:37.780 --> 00:57:39.400
What editor do you typically use?

00:57:39.400 --> 00:57:41.520
So I'm changing my answer from the last time.

00:57:41.520 --> 00:57:45.680
So last time I think I said I was sublime, but I am using Visual Studio Code now.

00:57:46.120 --> 00:57:51.060
And back to the WSL point, it integrates really well with WSL as well.

00:57:51.060 --> 00:57:51.920
Yeah, it does.

00:57:51.920 --> 00:57:53.680
It runs everywhere.

00:57:53.680 --> 00:57:55.340
So yeah, I really enjoy it.

00:57:55.340 --> 00:58:00.420
I'd say my one knock on it is I don't spend enough time in it to actually memorize all the

00:58:00.420 --> 00:58:00.760
shortcuts.

00:58:00.760 --> 00:58:04.980
So I try and force myself to get more efficient with it every time I use it.

00:58:04.980 --> 00:58:06.620
But I really enjoy using it.

00:58:06.620 --> 00:58:06.920
Yeah.

00:58:06.920 --> 00:58:09.920
There's a lot of stuff underneath the surface that you don't know that's there unless

00:58:09.920 --> 00:58:11.000
you know to go look for it.

00:58:11.000 --> 00:58:11.520
Yes.

00:58:11.940 --> 00:58:12.820
Yeah, very cool.

00:58:12.820 --> 00:58:18.120
And if you come from a sublime background or Atom, Visual Studio Code seems like the very

00:58:18.120 --> 00:58:20.660
natural like, well, here's the modern version of that thing.

00:58:20.660 --> 00:58:21.260
Yes.

00:58:21.260 --> 00:58:22.400
Yeah, it's great.

00:58:22.400 --> 00:58:27.020
And I do keep up with, you know, every month they give updates and they're really doing a

00:58:27.020 --> 00:58:29.180
lot of improvements on Jupyter Notebook support.

00:58:29.180 --> 00:58:32.920
And there are some pretty cool things you can do with that integration right now.

00:58:32.920 --> 00:58:35.680
So I'm excited to see how that evolves over time as well.

00:58:35.680 --> 00:58:36.440
Yeah, for sure.

00:58:36.440 --> 00:58:37.260
All right.

00:58:37.260 --> 00:58:40.620
Also notable PyPI package or Conda package.

00:58:40.620 --> 00:58:42.780
If you prefer to view it through that lens.

00:58:42.780 --> 00:58:45.040
But, you know, something cool that people maybe don't know about.

00:58:45.040 --> 00:58:47.420
We could pip install side table as one of them.

00:58:47.420 --> 00:58:48.320
That's certainly one.

00:58:48.320 --> 00:58:52.720
The other one I'll go back to is we talked about Plotly Express.

00:58:52.720 --> 00:58:55.480
There's a library called Kaleido.

00:58:55.480 --> 00:58:56.860
I think is how you pronounce it.

00:58:56.860 --> 00:59:02.900
That actually makes it easy to export your images, the graphical images you create with

00:59:02.900 --> 00:59:06.020
Plotly to a PNG or an SVG file.

00:59:06.460 --> 00:59:11.920
And I use that a ton just to generate some graphics, save them out and, you know, send

00:59:11.920 --> 00:59:13.800
them in an email or put them in a PowerPoint.

00:59:13.800 --> 00:59:16.400
And that's really high quality.

00:59:16.400 --> 00:59:18.840
So sometimes I've done the copy and paste.

00:59:18.840 --> 00:59:20.400
So you use the screen snipping.

00:59:20.400 --> 00:59:22.600
It's not just the screenshot or whatever.

00:59:22.600 --> 00:59:22.920
Yeah.

00:59:23.560 --> 00:59:24.000
Exactly.

00:59:24.000 --> 00:59:28.800
So it doesn't sound that revolutionary, but it's just one of those things that's really,

00:59:28.800 --> 00:59:31.160
really handy to have and really useful and it works well.

00:59:31.160 --> 00:59:31.620
Yeah.

00:59:31.620 --> 00:59:37.600
Well, people spend a lot of time looking at presentations and it just, if it has those,

00:59:37.600 --> 00:59:43.120
that fuzzy screenshotty feels like this isn't those kinds of things add up.

00:59:43.180 --> 00:59:46.940
It's like having a good microphone when you're on Zoom or something like that, right?

00:59:46.940 --> 00:59:47.420
Exactly.

00:59:47.420 --> 00:59:52.020
You're never going to get criticized for not having it, but people just like to talk to

00:59:52.020 --> 00:59:55.260
you more or it's a more pleasant experience if they don't have to strain to hear you.

00:59:55.260 --> 00:59:55.700
Yeah.

00:59:55.700 --> 00:59:57.020
That was a perfect analogy.

00:59:57.020 --> 00:59:57.500
Yeah.

00:59:57.500 --> 00:59:57.720
Thanks.

00:59:57.720 --> 00:59:58.820
All right.

00:59:58.820 --> 00:59:59.960
Well, final call to action.

00:59:59.960 --> 01:00:04.900
People, Python's popularity has grown since the last time we spoke by quite a bit.

01:00:04.900 --> 01:00:10.960
So the opportunity to use the Python data science tools are probably even more in their own

01:00:10.960 --> 01:00:11.800
now than they were then.

01:00:11.800 --> 01:00:12.460
What do you say?

01:00:12.460 --> 01:00:13.460
Yeah, absolutely.

01:00:13.460 --> 01:00:17.280
I think you kind of wonder when that curve is going to flatten out.

01:00:17.280 --> 01:00:19.380
And I still think we have a long way to go.

01:00:19.380 --> 01:00:26.900
And Python just has so much to offer to automate and improve processes where people only know Excel.

01:00:26.900 --> 01:00:30.820
So I think try and encourage people to start taking that journey.

01:00:31.220 --> 01:00:35.960
And if they're interested in the course, certainly would love to have them take the course.

01:00:35.960 --> 01:00:37.860
So I think that's a good place to get started.

01:00:37.860 --> 01:00:43.200
And I'd say maybe if you're advanced enough with Python and don't think you need the course,

01:00:43.200 --> 01:00:46.160
maybe it's a good place for your co-workers to get started as well.

01:00:46.160 --> 01:00:47.100
Yeah, absolutely.

01:00:47.100 --> 01:00:47.900
The course is great.

01:00:47.900 --> 01:00:48.940
Like I said, it inspired me.

01:00:48.940 --> 01:00:54.100
We're also doing a free webcast in a couple of weeks, which is actually a month ago.

01:00:54.100 --> 01:00:56.540
Because of time travel of podcast recording.

01:00:56.760 --> 01:01:01.600
But just another point of how much this kind of stuff is wanted, right?

01:01:01.600 --> 01:01:04.240
I sent out one email and one social media message.

01:01:04.240 --> 01:01:09.700
And over almost 1,000 people, surely by the time it's finished, 1,000 people have signed up for this webcast.

01:01:09.700 --> 01:01:10.420
Like, sign me up.

01:01:10.420 --> 01:01:11.460
I want out of this Excel thing.

01:01:11.460 --> 01:01:11.880
Yeah.

01:01:11.880 --> 01:01:13.680
No, I'm really looking forward to that.

01:01:13.680 --> 01:01:14.560
I think it's going to be great.

01:01:14.560 --> 01:01:15.840
I mean, it really was great.

01:01:15.840 --> 01:01:16.360
Yes.

01:01:16.360 --> 01:01:17.540
It was great.

01:01:17.540 --> 01:01:18.240
It went really well.

01:01:18.240 --> 01:01:19.060
I'm sure that it did.

01:01:19.360 --> 01:01:22.540
But I want to point out that it's recorded and I'll put a link in the show notes.

01:01:22.540 --> 01:01:27.340
So whatever it is that Chris and I come up with for that, you'll be able to check that out as well.

01:01:27.340 --> 01:01:28.340
So that'll be in the show notes.

01:01:28.340 --> 01:01:28.780
Yeah.

01:01:28.780 --> 01:01:29.180
Great.

01:01:29.180 --> 01:01:30.760
Well, thanks a lot for having me.

01:01:30.760 --> 01:01:31.740
I really enjoyed the talk.

01:01:31.740 --> 01:01:32.100
Yeah.

01:01:32.100 --> 01:01:38.320
Thanks for coming back and helping us out with this Excel thing and getting more Jupyter and more pandas and more Python.

01:01:38.320 --> 01:01:39.020
Absolutely.

01:01:39.020 --> 01:01:39.880
Thank you.

01:01:39.880 --> 01:01:40.220
You bet.

01:01:40.220 --> 01:01:40.600
Bye.

01:01:40.600 --> 01:01:40.620
Bye.

01:01:41.620 --> 01:01:44.380
This has been another episode of Talk Python To Me.

01:01:44.380 --> 01:01:50.800
Our guest on this episode was Chris Moffitt, and it's been brought to you by Voyager, the video game, and Linode Cloud Hosting.

01:01:50.800 --> 01:01:54.460
Voyager is a game developed and published by Tolib Consulting.

01:01:54.460 --> 01:01:58.300
Travel the world in front of your computer and learn a whole lot.

01:01:58.300 --> 01:02:03.660
Visit talkpython.fm/Voyager or just search for Voyager on Steam.

01:02:03.660 --> 01:02:06.180
That's V-O-Y-A-G-E-R.

01:02:06.180 --> 01:02:10.980
Start your next Python project on Linode's state-of-the-art cloud service.

01:02:11.240 --> 01:02:15.280
Just visit talkpython.fm/Linode, L-I-N-O-D-E.

01:02:15.280 --> 01:02:18.600
You'll automatically get a $20 credit when you create a new account.

01:02:18.600 --> 01:02:20.760
Want to level up your Python?

01:02:20.760 --> 01:02:25.620
If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

01:02:25.620 --> 01:02:33.780
Or if you're looking for something more advanced, check out our new async course that digs into all the different types of async programming you can do in Python.

01:02:33.780 --> 01:02:38.440
And of course, if you're interested in more than one of these, be sure to check out our Everything Bundle.

01:02:38.440 --> 01:02:40.320
It's like a subscription that never expires.

01:02:40.860 --> 01:02:42.480
Be sure to subscribe to the show.

01:02:42.480 --> 01:02:44.900
Open your favorite podcatcher and search for Python.

01:02:44.900 --> 01:02:46.120
We should be right at the top.

01:02:46.120 --> 01:02:55.100
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

01:02:55.100 --> 01:02:57.180
This is your host, Michael Kennedy.

01:02:57.180 --> 01:02:58.680
Thanks so much for listening.

01:02:58.680 --> 01:02:59.720
I really appreciate it.

01:02:59.720 --> 01:03:01.520
Now get out there and write some Python code.

01:03:01.520 --> 01:03:01.720
Thank you.

01:03:01.720 --> 01:03:02.340
Thank you.

01:03:02.340 --> 01:03:02.340
Thank you.

01:03:02.340 --> 01:03:02.720
Thank you.

01:03:02.720 --> 01:03:03.420
Thank you.

01:03:03.420 --> 01:03:03.600
Thank you.

01:03:03.600 --> 01:03:03.720
Thank you.

01:03:03.720 --> 01:03:04.720
Bye.

01:03:04.720 --> 01:03:05.720
Bye.

01:03:05.720 --> 01:03:06.720
Bye.

01:03:06.720 --> 01:03:07.720
Bye.

01:03:07.720 --> 01:03:08.720
Bye.

01:03:08.720 --> 01:03:09.720
Bye.

01:03:09.720 --> 01:03:10.720
Bye.

01:03:10.720 --> 01:03:11.720
Bye.

01:03:11.720 --> 01:03:12.720
Bye.

01:03:12.720 --> 01:03:13.720
Bye.

01:03:13.720 --> 01:03:14.720
Bye.

01:03:14.720 --> 01:03:15.720
Bye.

01:03:15.720 --> 01:03:16.720
Bye.

01:03:16.720 --> 01:03:17.720
Bye.

01:03:17.720 --> 01:03:18.720
Bye.

01:03:18.720 --> 01:03:19.220
you

01:03:19.220 --> 01:03:19.720
you

01:03:19.720 --> 01:03:21.720
Thank you.

01:03:21.720 --> 01:03:51.700
Thank you.

