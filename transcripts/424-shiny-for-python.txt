00:00:00 If you want to share your data science results as interactive web apps, you could learn Flask or Django and a bunch of other web technologies.

00:00:06 Or you could pick up one of the powerful frameworks for deploying data science specifically.

00:00:11 And if you're searching through that space, you're likely to hear about Shiny.

00:00:15 But that's just for the R side of data science, right?

00:00:18 Not any longer.

00:00:19 Joe Chen is here to introduce us to the recently released Shiny for Python.

00:00:24 And it looks like a really solid new framework on the block.

00:00:28 This is Talk Python To Me, episode 424, recorded June 19th, 2023.

00:00:34 Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:50 This is your host, Michael Kennedy.

00:00:52 Follow me on Mastodon, where I'm @mkennedy and follow the podcast using @talkpython,

00:00:57 both on fosstodon.org.

00:00:59 Be careful with impersonating accounts on other instances.

00:01:02 There are many.

00:01:03 Keep up with the show and listen to over seven years of past episodes at talkpython.fm.

00:01:08 We've started streaming most of our episodes live on YouTube.

00:01:12 Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:20 I'm really excited to have a new sponsor for this episode.

00:01:23 Welcome on board to GlareDB.

00:01:26 GlareDB is an open source database for querying distributed and disparate data.

00:01:31 Connect your data sources and use the Python tools you already know to ask questions and integrate data across data sources.

00:01:39 Get started today at talkpython.fm/GlareDB.

00:01:42 And it's brought to you by InfluxDB.

00:01:45 InfluxDB is the database purpose built for handling time series data at a massive scale for real-time analytics.

00:01:51 Try them for free at talkpython.fm/InfluxDB.

00:01:57 Hey, Joe.

00:01:57 Welcome to Talk Python To Me.

00:01:59 Hi, Michael.

00:01:59 It's a pleasure to be here.

00:02:00 It's a pleasure to have you here.

00:02:02 We're talking Python to an R person.

00:02:04 What's going on here?

00:02:05 What is happening?

00:02:06 I know, right?

00:02:07 Cats and dogs living together.

00:02:10 Oh, my gosh.

00:02:11 No, it's great.

00:02:12 Glad to have you here.

00:02:13 Yeah, thanks.

00:02:14 So we're going to talk about Shiny, which has traditionally been UI framework, a web framework for kind of rad rapid development for R applications that need some interactivity.

00:02:26 But you have a big release for the Python people.

00:02:29 That's also interesting and worth talking about.

00:02:32 So that's the topic of today's show.

00:02:34 Yeah, absolutely.

00:02:35 I hope you starting out mentioning R that people haven't dropped off already.

00:02:40 I promise we'll have lots to say about Python and Shiny for Python.

00:02:44 Of course, I'm sure.

00:02:46 Shiny for Python is going to be super fun.

00:02:48 Before we get to that, though, let's get started with your story.

00:02:51 How did you get into programming R and then what brought you over to Python, at least temporarily or partially?

00:02:57 Yeah, my background was in web programming really more than anything else.

00:03:01 I got into programming actually through desktop publishing and graphic design.

00:03:05 That was what I was really excited about.

00:03:08 And in college, that turned into web design.

00:03:10 I went to college from 1996 through 2000.

00:03:13 So that the height of the dot com sort of craziness.

00:03:16 And I just found myself.

00:03:18 CD Baby and all that stuff.

00:03:19 Oh, yeah.

00:03:19 Absolutely.

00:03:20 Pets.com.

00:03:21 Oh, yeah.

00:03:22 Pets.com.

00:03:23 That's right.

00:03:23 And I just found myself sort of pulled into just all the cool things that we could do on the web.

00:03:29 And went from sort of front end web development, which meant something very different back then than it does today.

00:03:35 I mean, HTML, right?

00:03:37 HTML.

00:03:37 Yep.

00:03:38 Basically, string interpolation as a career.

00:03:41 That was what I was all about.

00:03:42 And that sort of led me into really falling in love with programming as a discipline.

00:03:47 And I got more into the back end, more into sort of closer and closer to the systems level programming.

00:03:54 And I just really enjoyed being sort of full stack, both on the website and even spent a few years doing Windows desktop programming, just to kind of see what that world was like.

00:04:05 And one of the things that I like, one of the best things that happened to me early in my career was hooking up with JJ Allaire, who's the founder of our studio and the founder of two other companies that I worked for previous to that in Boston.

00:04:19 And I kind of got to the point in my career where I was more interested in the people I was working with than the technologies or even the idea.

00:04:28 I knew I liked startups and I knew I liked working for JJ and the people that he had around him.

00:04:33 And he got excited about R.

00:04:35 I think his friend who was like a high school science teacher somehow got turned on to R.

00:04:41 And JJ was fascinated by the fact that this is in 2008 or 2009.

00:04:49 There was this GPL licensed platform for doing what traditionally people would do in very proprietary platforms like all these statistics packages that you might have been forced to learn in college, you know, back in the 2000s.

00:05:05 And here was this pretty rough, pretty raw, but all the pieces were there kind of platform for doing all this stuff with code.

00:05:13 And he immediately saw something and I definitely saw nothing.

00:05:16 But I believed in JJ and I he had the idea to build an IDE in a web browser for this R language.

00:05:24 And I was like, I don't see the chain and thinking that leads you to think that this is a good idea, but also sounds super fun.

00:05:32 And I would love to see if it's possible to build an IDE for the web.

00:05:36 And so in the beginning, really, I was in R completely by accident.

00:05:42 And I didn't even really learn much R as I was building, helping to build the RStudio IDE.

00:05:46 That's kind of the irony of those types of platforms, right?

00:05:49 100%.

00:05:50 When I talk to people about Jupyter Notebooks, they're enabling Python people, but they're writing TypeScript.

00:05:55 That's exactly right.

00:05:57 That's right.

00:05:57 What's the story for RStudio's side?

00:06:00 Yeah, yeah.

00:06:01 Oh, it's a crazy story technology wise.

00:06:04 Well, the part that's not crazy, the sort of hardcore server bits are written in C++.

00:06:08 But the front end, the front end is written in Java, which is then transpiled to JavaScript using a package called Google Web Toolkit.

00:06:17 Oh, yeah.

00:06:17 Okay, sure.

00:06:18 Oh, okay.

00:06:18 So you've heard of GWT.

00:06:20 I haven't written anything with it, but yeah, I know it.

00:06:21 Sure.

00:06:22 Yeah.

00:06:22 I mean, in a world before TypeScript and before React, this really was a godsend.

00:06:29 Like to be able to have static typing and the right sort of abstractions to be able to really build large scale.

00:06:37 I mean, RStudio is a giant piece of software, hundreds and hundreds of thousands of lines of code.

00:06:41 And I think the very best JavaScript developers can write code bases at large of pure JavaScript, but not me.

00:06:48 Like I definitely needed the crutch of, you know, static type checking.

00:06:53 And anyway, working on RStudio ID was a blast.

00:06:57 And the best thing about it was I got to meet so many data scientists.

00:07:00 And at the time, we call them statisticians.

00:07:02 Now they call data scientists.

00:07:04 But learning what they do, what the problems they were solving was so interesting.

00:07:08 And that eventually led to Shiny.

00:07:11 And that's when I really started getting serious about actually writing R code in my day to day, which was a fascinating journey in and of itself.

00:07:18 Yeah.

00:07:19 Well, I would say that your faith was well placed, right?

00:07:23 Even if you're like, I'm not sure about this RStudio thing.

00:07:25 I think it's, I think some people have heard of it.

00:07:27 Yeah.

00:07:29 Yeah.

00:07:29 It really has been such an incredible, such incredible ride.

00:07:33 And there were many steps along the way where I was like, this does not really make a ton of sense to me.

00:07:39 But JJ has proven out time and time again that things that he cares about, it turns out that there are other people that care about it.

00:07:47 So he was really super into reproducible research before it was on everybody's lips.

00:07:53 And he really spent a lot of time trying to make that world better for R.

00:07:57 And by then I'd certainly learned to sort of trust in his instincts.

00:08:02 And, you know, just time after time, there have been many bets like that that have paid off really well.

00:08:06 It must have been pretty gratifying to work on this project and then talk to these data scientists and say, you know, here, oh, we're doing this work at the Large Hadron Collider.

00:08:16 Or we're doing this work to solve cancer.

00:08:18 And let me, you got to, can you help me with this?

00:08:22 I'm trying to like work on this protein folding or, you know, something like that, right?

00:08:25 Yeah.

00:08:26 Probably with some really cool experiences you had like that.

00:08:28 100%.

00:08:29 Yeah.

00:08:29 I think the first time I ever demoed Shiny in particular at a user group meeting and I was super nervous and went a little overboard on having like lots of demos.

00:08:40 And one of them, this is back in 2012, was charting the spread of AIDS throughout the world and showing the sort of levels rise and fall as time went on.

00:08:50 And it was interesting at the time because AIDS was sort of receding as education and drugs were getting better.

00:08:57 Except in South Africa, it was getting much, much worse before finally starting to get better because, well, because of many reasons.

00:09:04 And so I showed this demo and then afterwards, a friend of mine who I didn't know what he worked on, I just knew him through these user group meetings, came up and said, oh yeah, I'm working at, I think he was at Fred Hutch at the time, working on, you know, an AIDS vaccine.

00:09:16 And we're using Shiny to basically be the bridge between the biostatisticians and the biologists and looking at the results of these, you know, assays or whatever it was that they were analyzing.

00:09:26 And that was just blew me away.

00:09:27 And absolutely, every conference I go to, you know, many times a year between then and now, I've just been humbled by the kind of things that people are doing with Shiny.

00:09:37 You know, I can really, I hear some stories like that as well.

00:09:39 And I imagine it's just 10x when you're building developer tools like that.

00:09:43 So how about now?

00:09:44 What are you doing day to day?

00:09:45 Yeah.

00:09:46 Well, my title is CTO.

00:09:47 That is an honorary title that I think reflects that I was the first employee, but I don't do traditional CTO type activities most of the time.

00:09:56 My day to day, I help lead the Shiny team specifically, which is a team of maybe 10 or 11 right now, mostly engineers.

00:10:04 And we split our time between Shiny for R and Shiny for Python.

00:10:09 Right now, probably more on the Shiny for Python side, given that there's so much more to do.

00:10:12 And right now, I am in the thick of it, writing features for the next release of Shiny for Python, really getting to lean into React.

00:10:22 I've been working with some really fun, like headless table libraries to build data grids with, you know, fast virtualized scrolling.

00:10:29 That should be a really nice addition to Shiny for Python for the next release.

00:10:33 Okay. Yeah, that sounds really cool.

00:10:35 Well, let's talk about Shiny itself.

00:10:37 I suspect a lot of people on the data science side have heard of Shiny, even though it's in the R space.

00:10:43 I know the conversations come up around it.

00:10:46 Other ones that kind of live in a similar orbit, maybe, are, you know, Streamlit.

00:10:51 I've had Adrian on, the founder of Streamlit on before, and we've got Dash and Panel and Pinecone and others.

00:10:57 So, you know, that sort of sets the stage for what this could be about.

00:11:01 Maybe give folks a sense of just what is Shiny and it's, you know, maybe even in its R form originally.

00:11:08 And then we can talk about the Python side.

00:11:11 Yeah, absolutely.

00:11:12 So, Shiny is a way to create web applications easily without having to learn a lot of web development technologies like HTML, CSS, and JavaScript.

00:11:22 Especially JavaScript.

00:11:24 Especially JavaScript.

00:11:25 100%.

00:11:26 The interactive part of all these, like this callback hits that.

00:11:30 Yeah.

00:11:31 100%.

00:11:31 Yeah.

00:11:32 It was conceived primarily for data science.

00:11:35 It is, I think a lot of the ideas behind Shiny are quite general and we'll, I'm sure we'll delve more into that.

00:11:42 But we, in the creation design of this, we really are laser focused on data science and the kinds of problems that people want to solve by creating interactive visualizations, interactive reports, and even like workflow applications.

00:11:57 But all of it around the analyzing of data.

00:12:00 This was, in 2012, this was like a pretty radical notion.

00:12:06 And I think there was a little bit of skepticism from some people close to us who were thinking, like, you're going to make data science, you know, like, why would data science scientists want to become web developers?

00:12:17 And I think this was, the answer was like, there are really a lot of problems that they can solve using interactive artifacts.

00:12:24 But the whole point is that they do not have to become web developers.

00:12:27 Yeah, I was going to say, like, you should turn that on its head and say, they don't want to become web developers, which is exactly the value proposition, right?

00:12:36 They want to share their work, and they want to make it interactive and collaborative.

00:12:39 But the last thing they want, generally speaking, is to like, and I'm diving into Vue and React and all that stuff, right?

00:12:48 Yeah, absolutely.

00:12:49 Absolutely.

00:12:49 Yeah.

00:12:50 Yeah.

00:12:50 And that being said, I think I personally am, you know, I've been doing web development since basically 1996.

00:12:59 And the idea of working day in and day out on a project that was really sort of like my first website type, you know, like something that had a lot of guardrails, something that really limited you to whatever few tools were in its toolbox, that wouldn't be really satisfying or interesting for me.

00:13:17 So even though Shiny is designed to be very easy to get started and for you not to have to know JavaScript or anything like that, if you do know JavaScript, if you do know HTML and CSS, if you, you know, live and breathe that stuff, but you want to create a convenient way to create data science related applications, Shiny really lets you lean into those skills as well and use HTML, CSS, and JavaScript to enhance or customize or extend Shiny for your own purposes.

00:13:41 It's really important to us to capture sort of both ends of that spectrum.

00:13:47 This portion of Talk Python To Me is brought to you by InfluxData, the makers of InfluxDB.

00:13:52 InfluxDB is a database purpose built for handling time series data at a massive scale for real-time analytics.

00:14:00 Developers can ingest, store, and analyze all types of time series data, metrics, events, and traces in a single platform.

00:14:07 So, dear listener, let me ask you a question.

00:14:10 How would boundless cardinality and lightning-fast SQL queries impact the way that you develop real-time applications?

00:14:17 InfluxDB processes large time series data sets and provides low-latency SQL queries,

00:14:22 making it the go-to choice for developers building real-time applications and seeking crucial insights.

00:14:27 For developer efficiency, InfluxDB helps you create IoT, analytics, and cloud applications using timestamped data rapidly and at scale.

00:14:36 It's designed to ingest billions of data points in real-time with unlimited cardinality.

00:14:42 InfluxDB streamlines building once and deploying across various products and environments from the edge, on-premise, and to the cloud.

00:14:50 Try it for free at talkpython.fm/InfluxDB.

00:14:55 The link is in your podcast player show notes.

00:14:57 Thanks to Influx Data for supporting the show.

00:15:02 We'll talk about the programming model and how it works, but I think maybe the first big contrast that I'd like you to set up for us is thinking of the Python side now.

00:15:11 Like, why not just Jupyter Notebooks?

00:15:13 Why not Jupyter Notebooks or Jupyter Lab?

00:15:16 And just, we have that.

00:15:17 That's on the web, sort of, kind of sometimes.

00:15:20 It depends how we want to put it up there or share it or let it be executable.

00:15:24 But, you know, compared to that, I think it's pretty different.

00:15:27 But, you know, I think it's something that people maybe want to get their head around.

00:15:29 Yeah, no, totally.

00:15:30 You're right.

00:15:31 I mean, you hear a lot of the same words being used, right?

00:15:33 Like, you know, it's browser-based applications that do interactive things.

00:15:37 And I think the difference is that Jupyter and Jupyter Lab, those are sort of the places where data scientists can do work, right?

00:15:44 Where you can ask unbounded kinds of questions from your data.

00:15:47 And that's where you iterate, where you do exploratory data analysis, where you, you know, write functions and things like that.

00:15:53 And, yeah, you do have this beautiful immediacy to the results that you get, right?

00:15:58 That's why everybody really loves working in notebooks.

00:16:01 And Shiny and frameworks like it are really for communicating outwards.

00:16:06 It's really not for the data scientists to write code for their own understanding most of the time.

00:16:12 It's really about creating a web application to show somebody else.

00:16:16 Let's say that you, you know, are collaborating with some people that are, don't have the programming chops that you do, that have never launched a REPL in their life or installed Python.

00:16:25 And you want to give them the ability to ask questions of your data and of your analysis.

00:16:31 Maybe what if scenarios or in the simplest case, think like a BI dashboard or something like that.

00:16:37 Like nobody's asking why, you know, execs need to look at a BI dashboard instead of running SQL queries on their own, you know, inside of a console.

00:16:46 And this is similar.

00:16:47 So if you want to create an interactive artifact for other people to consume, then Shiny and frameworks like it come into play.

00:16:55 And Jupyter, not as much.

00:16:56 I mean, you can certainly save Jupyter notebooks and then sort of share, you know, a link to the published notebook.

00:17:02 But the interactivity is either non-existent or more limited when you do things that way.

00:17:08 Absolutely.

00:17:08 You don't want to give them the full notebook because the last thing you want is the general public typing Pantos code in there or arbitrary Python code.

00:17:18 But you want to give them some interactivity.

00:17:20 You know, maybe we could look at this little example down here just to, you know, just talk through like what an app might look like.

00:17:27 Right on the homepage, shiny.posit.co, you have, you know, I think this is kind of a big statement towards your commitment to Python.

00:17:36 It's like right on the homepage on equal, on par with R.

00:17:39 It says get started with R, get started with Python.

00:17:41 And you scroll down, it has the R in the Python code, right?

00:17:43 Like they're not like, hey, we also will make an attempt at this Python thing.

00:17:46 But you've got this example.

00:17:48 Do you want to give us a quick talk to what this app is?

00:17:50 It looks like it evaluates things about ducks and that's all I can tell about it.

00:17:54 Yeah.

00:17:55 Stuff about ducks.

00:17:56 This is using the Palmer's Penguins dataset.

00:17:59 Penguins rather, okay.

00:18:00 Yeah, yeah.

00:18:01 So on the left, we have a sidebar with a number of controls.

00:18:05 There's two select boxes.

00:18:07 There's some check boxes.

00:18:08 And then there's a couple of toggle switches.

00:18:10 And on the right, you have a matplotlib generated scatterplot with some marginal plots added on.

00:18:17 And this is sort of the hello world of Shiny, where you have one or more outputs and some inputs that when you change them, the output automatically updates.

00:18:31 In this case, you can decide what variables do you want to apply to the X and Y axes.

00:18:37 And then you can filter it by the species of penguin.

00:18:40 And then there are a couple of toggles to just decide whether you want coloring by species and whether you want the marginal plots or not.

00:18:48 And it sort of does everything that you would expect it to do when you select and deselect those values.

00:18:53 Yeah, so for example, you have filter by species and Gen 2 is checked.

00:18:57 But if I uncheck it, the whole UI redraws with just showing the other two species of penguin.

00:19:04 And you can turn the species on and off and terms on whether or not like it highlights based on that.

00:19:11 Yeah.

00:19:12 You've got to drop down for different things you might compare.

00:19:14 And you can just toggle those.

00:19:16 And the UI changes kind of like you wrote a fancy front-end JavaScript framework where that's happening behind the scenes, right?

00:19:23 That's right.

00:19:23 That's right.

00:19:24 Yeah, sorry, I didn't mean to cut you off there.

00:19:25 Yeah.

00:19:26 And just to be clear, when you say the UI redraws, we're not talking about a whole page reload.

00:19:29 I mean, it's not 1998.

00:19:31 It is, you know, the things that need to update, update on the page.

00:19:35 Yeah.

00:19:36 It's a really interesting way to create programs.

00:19:39 And there's a couple other things I've seen that are like this, but I really, I think it's a super slick framework.

00:19:46 Before we get into it, Diego's got a question.

00:19:49 It says, could China be used to do fancy math, say, for someone trying to upload their GitHub website for their PhD thesis model?

00:19:55 Like, what can we create?

00:19:57 Like, could you create a kind of a LaTeX-looking integrated thing with interactive math bits in there?

00:20:02 Right, right.

00:20:03 Yeah, yeah.

00:20:04 So, yes, you do have the ability to do, well, I could interpret that question one or two.

00:20:09 One is, yeah, can you do the computation for this PhD thesis model?

00:20:15 And in that case, absolutely.

00:20:17 It's just whatever you can express in Python or R, for that matter.

00:20:20 And in terms of putting, like, LaTeX equations on the screen, yes, this is a completely built-in feature for Shiny for R.

00:20:29 And for Shiny for Python, it's a little less slick, but we do have an example application that shows how to drop in.

00:20:35 It's based on MathJax, basically.

00:20:37 So you can include the resources for MathJax and then write your equation in LaTeX format.

00:20:45 And, yeah, it'll render.

00:20:46 Diego, I hope that answers your question.

00:20:48 Hope so as well.

00:20:50 Yep.

00:20:50 Seems like it.

00:20:51 All right.

00:20:52 So let's jump over to the GitHub page for a minute here and talk through some of the things that you all call out right at the top.

00:20:59 So it's open source for one, right?

00:21:01 That's a big deal.

00:21:03 It's under the MIT license right here on GitHub under PyGash Shiny.

00:21:07 Yeah.

00:21:07 I should add, you know, full disclosure, we are a for-profit company.

00:21:11 We are a B Corp.

00:21:12 Actually, we're a benefit corp, but we are for-profit.

00:21:15 And Shiny for Python is completely open source, MIT license, no sort of gotchas there.

00:21:22 When it comes to deploy your Shiny app, we have a variety of different ways you can do that that we offer as a company.

00:21:28 We have an open source on-prem solution called Shiny Server.

00:21:32 We have hosted cloud hosting that we manage that you can easily deploy to.

00:21:38 And we have free and paid tiers.

00:21:40 And we also have Posit Connect, which is a sort of a more comprehensive platform for enterprises to allow their data scientists to communicate with the rest of the organization.

00:21:51 And that has, like, very robust enterprise-grade Shiny for Python hosting built in, and that is a paid product.

00:21:58 Okay.

00:21:58 Does it have, like, special ways to access, like, your SQL server on your enterprise, you know, like, access more authenticated access to data or auth to the thing itself to protect it and so on?

00:22:11 Yeah.

00:22:12 For sure, auth to the thing itself.

00:22:14 And it integrates with your, you know, LDAP or SSO-type systems.

00:22:18 And it helps with scaling your application, so it will sort of monitor how much load each of your Python processes is getting and then spawn, you know, automatically scale up.

00:22:29 It can, you know, hook up to Kubernetes in the back end so that your Shiny apps, the Python computation is happening, you know, in pods on the back end.

00:22:37 So lots and lots of different ways that it sort of tries to make things easier.

00:22:41 Sure.

00:22:42 Okay.

00:22:42 Cool.

00:22:43 Very cool.

00:22:43 So basically, short story is Shiny for Python's open source.

00:22:47 I could take the on-prem open source thing and just host it myself if I wanted.

00:22:51 I presume that means I could also fire up a virtual machine in the server, in the cloud, and install it up there and kind of, that's my on-prem if I wish.

00:23:00 Yeah, absolutely.

00:23:01 And this is also, Shiny for Python is built on top of Starlet, which is the same underlying framework that FastAPI uses.

00:23:09 So it's almost true that anywhere you can host FastAPI, you can host Shiny for Python.

00:23:14 Oh, interesting.

00:23:14 Just put some Gunicorn, uvicorn workers in front of it.

00:23:18 Except Gunicorn.

00:23:20 Yeah, the only exception is that because Shiny for Python is stateful and we can talk more about that as we, I'm assuming we're going to talk a little bit about how we compare to some of the other things out there.

00:23:30 We do need, if you're going to load balance across multiple processes, it does have to be a stateful load balancer, which is normally quite easy to do.

00:23:38 But Gunicorn is not stateless.

00:23:39 It's not sticky.

00:23:41 It's stateless, yeah.

00:23:41 Sorry, yeah.

00:23:42 So you need a sticky load balancer.

00:23:44 And, oh, I should also mention that Hugging Face is another place that you can deploy Shiny for Python apps these days.

00:23:50 Yeah, excellent.

00:23:51 Okay, well, I think that that's certainly a fair trade-off to the commercial side of your story, which we started talking about by a new company and going to work on that.

00:24:01 And it's really about sort of Shiny as a service and a Shiny cloud, so it's easy to not worry about the deployment side, right?

00:24:08 The app itself, the framework itself is about not worrying about writing web stuff.

00:24:12 The deployment thing is still a deal, right?

00:24:15 If you just say, and then you just get dear data scientists, you fire up your Linux machines and you keep them up to date and secure.

00:24:21 And that doesn't feel great to a lot of data scientists either, I'm sure.

00:24:24 Yeah, yeah, that's right.

00:24:26 So I think with our open source on-prem hosting, it's like that.

00:24:32 It's just a piece of software that you install on Linux.

00:24:35 And with Connect, it's more like your IT department sets this up for you.

00:24:40 And then you straight from your local machine, once you have your Shiny app working, you just type in a command like RS Connect deploy and point it at your server and everything gets taken care of for you,

00:24:52 including, you know, getting all the right Python dependencies installed on the server and using the right version of Python.

00:24:58 And hopefully the act of, you know, we have customers that are writing multiple new Shiny apps a day and deploying multiple new Shiny apps a day.

00:25:07 And, you know, the usefulness of that app might be a day or it might be, you know, five years.

00:25:14 And we want to serve both sides of that spectrum.

00:25:17 I suspect that does make a lot of sense.

00:25:19 If you're a data scientist exploring something, you can be like, hey, look, I came up with this today.

00:25:24 What did you think?

00:25:25 And maybe the next day, based on feedback, you do something completely different and it's become irrelevant, right?

00:25:29 Yeah.

00:25:30 And, you know, one interesting thing about this is, you know, you hear about something like Shiny for Python, like, you know, Streamlit or Dash.

00:25:37 And you think that this is really about displacing, say, Power BI and Tableau, right?

00:25:43 But actually, in our experience with Shiny for R, the first thing it displaced were gigantic PDFs that people were sending around.

00:25:50 You know, like, I have generated all of this data for my analysis.

00:25:54 I don't know what you want.

00:25:56 So here is like a 500-page PDF filled with tables for you to go explore.

00:26:00 And with Shiny, you can present something that's much more interactive.

00:26:04 That makes it much easier for some domain expert on the other side to find a needle in the haystack that you happen to be working together.

00:26:10 Well, you know, you completely removed that cycle, that iteration cycle of what if we used a different number for this, you know, constraint here?

00:26:17 What if we only filtered?

00:26:19 It's like that's part of the UI.

00:26:20 That's part of what you deliver is that interactivity.

00:26:22 And as far as displacing things, it sounds like you're displacing SharePoint.

00:26:26 If that could just be completely erased from the world, that would be awesome.

00:26:31 Because every interaction I have with that software of sharing, like corporate doc sharing, is just like, oh, boy, here you go.

00:26:37 Okay.

00:26:38 Let's take it top to bottom maybe for here in this.

00:26:41 Although I do have to point out, I could tell you still have that love for R because it's still 0.2% R.

00:26:47 I love it.

00:26:49 It's 47% Python, 47% Java Script.

00:26:52 Yeah.

00:26:53 0.2% R.

00:26:54 I just want to make it clear.

00:26:56 You do not have to install R to run Shiny for Python.

00:26:58 I think that R is there's a couple of scripts that we use that we grab resources from the Shiny for RP repo.

00:27:05 And I think, you know, that was one of the first things that one of our programmers did.

00:27:10 And they didn't know Python yet.

00:27:11 So they wrote it in R.

00:27:13 That's fine.

00:27:14 It's fine.

00:27:15 I just thought it was funny.

00:27:15 It's there, but just a shade of it.

00:27:18 Okay.

00:27:20 This portion of Talk Python To Me is brought to you by GlareDB.

00:27:23 GlareDB is an open source database for querying distributed data.

00:27:28 Here's how it works.

00:27:29 First, you connect your data sources.

00:27:31 GlareDB makes it easy to connect to your data, no matter where it's stored, with integrations into many popular databases, data warehouses, and more.

00:27:39 This includes Snowflake, Postgres, MongoDB, BigQuery, and object storage.

00:27:44 Now you can query everything.

00:27:46 You use the full power of SQL to query your data across these many different data sources.

00:27:51 Join data across production databases and analytical warehouses without limits.

00:27:56 Finally, you can use the tools you already know and love.

00:27:59 Visualize and query your data using tools you know from Python's data science stack.

00:28:04 With just a single import, you can query Pandas and Polars data frames using just SQL.

00:28:09 You'll be asking questions, extracting insights, and driving decisions with your data without waiting for an ETL pipeline to move data around.

00:28:18 So if you have distributed data and disparate data sources, and you love open source, you owe it to yourself to give GlareDB a try.

00:28:25 Visit talkpython.fm/GlareDB to get started.

00:28:29 The link is in your podcast player show notes.

00:28:31 And please use the link to let them know that you came from us.

00:28:34 Thank you to the team at GlareDB for sponsoring the show.

00:28:37 So the first thing that you point out here is how is Shiny different from some of the things I said that it was like.

00:28:47 For example, Streamlit or Dash.

00:28:49 Yeah, absolutely.

00:28:50 Maybe touch on that a little.

00:28:51 Sure.

00:28:52 And I think really the one that comes up the most is Streamlit.

00:28:56 Man, Streamlit really has taken the world by storm, it seems like, since they came out in, what was it, 2018?

00:29:02 Something like that?

00:29:03 Yeah, I think it's 2018.

00:29:04 Yeah, it's only been a few years.

00:29:06 It clearly really resonated with the Python world.

00:29:09 I do have to say, I was very taken aback by the simplicity of their programming model when it first came out.

00:29:15 And I pay a little bit of attention to, you know, new things that come out and purport to be high level web frameworks.

00:29:22 And most of the time they were sort of like, okay, I recognize the tradeoffs that they're making here.

00:29:28 But the Streamlit one was definitely a very bold choice that they made.

00:29:32 Streamlit, I think it feels to me that they really prioritized ease of getting started and having the simplest possible mental model in a much higher level of priority than everything else, which is a bold stance.

00:29:47 And I really applaud them for being sort of clear about what their vision is.

00:29:50 So Streamlit is unbelievably easy to get started with, I think primarily because, I don't know if you've done a lot of Streamlit, but it has this top to bottom execution model.

00:29:58 A little, not a ton, but yeah.

00:29:59 Yeah.

00:29:59 Like if you were to start out with, not a Jupyter notebook, but like a regular Python script that was doing a bunch of data analysis stuff, you know, reading data, maybe doing some transformations and then outputting some, you know, tables and plots.

00:30:14 Streamlit lets you take that sort of straight up and down script and sprinkle in some Streamlit inputs and outputs.

00:30:21 And boom, like you have now written an interactive Streamlit app.

00:30:25 You just say, you know, Streamlit run and then the name of the file and it just works.

00:30:29 In that sense, it's quite incredible.

00:30:32 It's very easy to get started with.

00:30:34 And the cost to spin up a new Streamlit app is so low that I was actually talking to another, to a YouTuber, Fanilo.

00:30:41 I don't remember his last name.

00:30:43 I think there's one Fanilo in the Streamlit world.

00:30:45 And he was saying that he actually uses this instead of Jupyter notebooks to do interactive, you know, exploratory data analysis, which I thought was interesting.

00:30:53 The sort of drawback of having this simple of a model is that it really works well for the simplest apps.

00:31:01 And then the model is a little bit too simple for even like moderately complex.

00:31:08 It's not even complex.

00:31:10 But just like you're you sooner or later will often in a surprising way smack into some surprising wall.

00:31:16 This is not something that is theoretical.

00:31:19 We definitely have talked to a lot of Streamlit users.

00:31:22 And even the happy ones will say, we really this is just for prototypes.

00:31:27 And then we throw them out because you just cannot you can't think of Streamlit apps as something that can grow with you as your as your needs grow.

00:31:35 So I think the sort of time from zero to value for Streamlit is almost zero.

00:31:41 That's incredibly quick.

00:31:43 But the time from value to the time of, OK, now we're going to throw this thing out and the last 20 percent.

00:31:50 Yeah.

00:31:51 And it's actually not the last 20 percent.

00:31:53 I think it's more like the last 60 percent.

00:31:55 And I mean, that might be uncharitable and unbiased.

00:31:58 But but honestly, like in my using this framework, which is it's not to take away from their achievements.

00:32:03 It's in it clearly has resonated incredibly strongly with a lot of people in the Python world.

00:32:09 But I think, you know, no one who uses Streamlit seriously will tell you that you can do most of the things that you want in this sort of top to bottom execution model.

00:32:17 You will often in surprisingly quick ways run into limitations there.

00:32:23 And I do want to say, like Streamlit, they recognize this.

00:32:26 And after some time they added, try to give you ways to work around that top to bottom execution model.

00:32:33 They introduced the notion of session state and they introduced multiple attempts at nice caching abstractions.

00:32:39 And I think they make somewhat more complex apps possible.

00:32:45 But I really I mean, I'm happy to recommend Streamlit for those easy cases.

00:32:51 I cannot recommend Streamlit once you start, you know, getting into session state.

00:32:56 It really is quite a fragile paradigm to be coding in.

00:32:59 And and by the way, just to make it clear here, I don't have a huge financial like motivation to lie about this.

00:33:07 Posit Connect, which is the way, you know, we make money in this area.

00:33:11 It is designed to host Streamlit as well.

00:33:13 And we have custom like a lot of customers that do that.

00:33:16 So it doesn't matter to us whether you use Shiny or Streamlit.

00:33:19 I mean, it matters to me personally.

00:33:21 Like it makes me feel good when people use Shiny.

00:33:24 But as a business, we 100% love when our customers use a Streamlit.

00:33:28 But it really is.

00:33:30 I think we'll talk more about reactive programming later.

00:33:32 I hope what it doesn't give you is a nice model for the complicated stuff.

00:33:36 It only gives you a nice model for the very, very simplest stuff.

00:33:39 Which serves an important role.

00:33:40 But, you know, also means that Shiny might serve an important role, too.

00:33:43 Another question from the audience, I think maybe worth the diversion is got real world examples of Shiny for Python that you could talk about.

00:33:50 And let me take a step back since it's so brand new.

00:33:52 Just Shiny, right?

00:33:54 You got that.

00:33:54 Because I feel like the feature set is pretty similar.

00:33:57 It's just like the R people have been at it for a lot longer, you know?

00:34:00 Yeah, absolutely.

00:34:01 And just to make clear, so Shiny for R has been around since 2012.

00:34:05 Shiny for Python has been in alpha since last year.

00:34:09 And we just took the alpha tag off in the last, I don't know, six weeks or maybe less than that.

00:34:13 Yeah.

00:34:14 So I think, and I'm sorry, I didn't come prepared with any more links than what's on the website.

00:34:19 Yeah, no worries.

00:34:19 We have a Discord where people are starting to gather and talk about some of the things that they're doing with Shiny for Python.

00:34:25 So, yeah, I think on the left here, if you select, say, orbit simulation.

00:34:30 Yeah, the orbit simulation is cool.

00:34:32 This is a demo written by one of our engineers.

00:34:35 But this is using, well, first of all, we haven't talked about this, but this is actually using Wasm.

00:34:40 So there is no Python running on the background here.

00:34:42 Okay.

00:34:43 This is using a feature of Shiny called Shiny Live.

00:34:48 So this is using Pyodide, which is the same sort of Python in the browser technology that PyScript is currently using.

00:34:55 And you still write your Shiny app using Python.

00:34:58 You still don't have to write any HTML, CSS, and JavaScript.

00:35:01 But when you run it, you can run it, you know, straight out of a web browser, as you can see here.

00:35:06 So that's why it took a little bit longer to get started is because it's installing Python into your browser and, you know, installing AstroPy.

00:35:14 Well, we say a while, it took like two seconds the first time.

00:35:16 Sure.

00:35:17 Yeah.

00:35:18 Oh, I forget that.

00:35:19 Yeah.

00:35:19 For your listeners, they won't be able to see it.

00:35:21 Yeah, exactly.

00:35:22 Yeah.

00:35:22 This is an example of like a relatively simple set of inputs and one 3D output that I think in this case is being rendered with Matplotlib.

00:35:32 And you can choose some different parameters about the Earth, Moon, and Sun, and Planet X.

00:35:39 And it has, you know, arbitrarily complicated calculations happening on the back end by AstroPy to determine like how these bodies would move when they're affected by each other's gravity.

00:35:49 There's a lot of Shiny apps that are like this, that there is one particular algorithm, one particular model that it's demonstrating, and then wanting to show what happens when you try different parameters.

00:36:01 So I'd say this is sort of in the simplest category of Shiny apps in terms of, you know, what's easy to imagine here.

00:36:08 And yeah, there's some other stuff on the left there.

00:36:11 Some example apps show the use of different widgets.

00:36:14 So there's one for Plotly there.

00:36:16 You can use the Plotly JavaScript-based visualization library with Shiny for Python if you want your scatter plots to have, you know, tooltips that show, you know, data, for example.

00:36:28 I mean, this particular one seems not to do that much.

00:36:31 And, you know, you can use...

00:36:32 The Wordle?

00:36:32 Yeah, there's a Wordle clone.

00:36:34 I don't know.

00:36:35 It looks like a...

00:36:36 It looks like a mobile phone keyboard.

00:36:39 I mean, I have a whole keyboard right here.

00:36:41 But it's like, now you can type into the mobile phone keyboard.

00:36:45 Yeah.

00:36:45 Yeah.

00:36:46 Wordy?

00:36:46 No, it didn't take it.

00:36:48 Come on.

00:36:49 No.

00:36:49 Yeah.

00:36:49 That's pretty funny.

00:36:53 Yeah.

00:36:53 Yeah.

00:36:53 Those are just the beginning ones, right?

00:36:55 You even have camera input.

00:36:57 I don't know what that's going to do.

00:36:58 Oh, this is designed for a phone.

00:37:00 Yeah, yeah, yeah.

00:37:01 We have another example that's not on here that will use your webcam.

00:37:04 But...

00:37:05 Yeah, it's okay.

00:37:05 But it doesn't...

00:37:06 I don't think it works on the WASM mode.

00:37:08 Yeah, there's probably security limitations or other differences.

00:37:12 Yeah.

00:37:13 Yeah.

00:37:13 I will say one thing that you won't see as much here that you do see on Shiny for R is

00:37:19 like interactive dashboards or even non-interactive real-time streaming dashboards.

00:37:24 Not because the sort of underlying technology is not there, but because the actual like UI

00:37:29 widgets for making something that looks like a dashboard is in Shiny for R, but not in Shiny

00:37:36 for Python.

00:37:36 But that is coming within the next, I don't know, hopefully week or two weeks.

00:37:40 So we have a new release coming that adds a lot more UI stuff.

00:37:43 And that is a very, very common use of Shiny is for people that are creating dashboards that

00:37:48 show key performance indicators and time series plots and geographic data plotted on the

00:37:54 on an interactive leaflet map.

00:37:56 That's bread and butter for a lot of data scientists out there who are using Shiny.

00:38:00 Okay.

00:38:00 That sounds very exciting.

00:38:02 And the kind of stuff that no one wants to do on the web.

00:38:05 Very few people want to do directly on the web.

00:38:09 You want to be able to just grab a library.

00:38:10 Yeah.

00:38:10 All right.

00:38:11 So I sent us a little bit on this diversion here over those, but maybe the next thing would

00:38:16 be reactive programming.

00:38:17 Tell us about that.

00:38:19 Yeah.

00:38:19 So Shiny was really born out of this idea of reactive programming.

00:38:24 That was the motivating concept.

00:38:26 And for people who haven't heard that term before, maybe heard it, but never really were

00:38:30 clear on what it means.

00:38:31 Reactive programming is a programming paradigm that can be applied to many different programming

00:38:37 languages where it's about making it easy to program against values that are changing over

00:38:43 time.

00:38:44 In a normal programming paradigm, if you have a value X, say X equals one, and then you have

00:38:52 Y equals X plus one, and then you change the value of X, the value of Y does not change,

00:38:58 right?

00:38:58 It's not reactive in that way.

00:38:59 Whereas if you were in Excel and you had one cell using another cell plus one, then you

00:39:07 would expect that to change.

00:39:08 So Excel is sort of the most common example of a reactive model that I'm familiar with.

00:39:14 And so you wire up the data to say, this number depends on these other numbers, and this one

00:39:19 depends on that formula.

00:39:20 And it's the underlying reactive system just says, we're going to do the minimum amount of

00:39:25 recompute to keep them up to date.

00:39:27 That's exactly right.

00:39:28 That's exactly right.

00:39:29 So in this case, the values that are changing might be a slider that is in your user interface,

00:39:35 right?

00:39:36 And when the user drags that slider from zero to five, there might be all sorts of downstream

00:39:42 calculations that need to recompute now because you've changed that value.

00:39:46 And in a world prior to reactive programming, the dominant model was, and maybe in a lot of places

00:39:54 still is callback based programming or event handling is the other name for it.

00:39:59 And that's, if you've ever used a framework that had like something called an on click or

00:40:04 something like that, you're doing event handling, right?

00:40:06 This button is pressed.

00:40:07 I am going to execute this exact, you know, code in response to a button click.

00:40:12 And in that world, which is a world that I inhabited for many years, doing full-time, very complicated

00:40:18 UI programming using that model.

00:40:20 Sounds like some desktop programming, maybe some C-sharp or Windows Form, something like

00:40:24 that.

00:40:25 That's right.

00:40:25 That's right.

00:40:26 Exactly.

00:40:26 I worked at Microsoft working on Windows Forms apps that we shipped.

00:40:30 And RStudio was created in that paradigm as well.

00:40:34 It's actually quite difficult to do that kind of programming well.

00:40:38 It's very easy to understand how to code in an event-driven sort of way or using callbacks.

00:40:44 But to get your callback logic right as the number of events, the number of outputs, and

00:40:51 the number of intermediate sort of calculations as they increase, it's really hard to, number

00:40:58 one, keep it performant, and number two, keep it correct.

00:41:01 And the idea for doing a web framework for data scientists actually predates me finding

00:41:06 out about reactive programming.

00:41:07 And I actually said no.

00:41:09 Like, I actually, JJ and I talked about it, and I was like, we could do it and we should

00:41:13 not unless we come up with some way that is better than event handling.

00:41:17 Because what I didn't want to do was make it easy to come up with answers that were incorrect,

00:41:23 which is what I think callback-based programming makes it very easy for you to forget to update

00:41:28 some aspect of your calculation.

00:41:29 And now you have an answer, it's just not the right answer.

00:41:32 Right.

00:41:32 Maybe you update two graphs, but there's some number that has like a total in it.

00:41:36 And you forget in your event handler, you've got to update all three.

00:41:39 And so then...

00:41:40 And not just update all three.

00:41:42 Yeah.

00:41:42 Yeah.

00:41:43 You'd have to update all three in the correct order, potentially, right?

00:41:46 Because one of those subcalculations might depend on the other.

00:41:48 So the whole thing, it is certainly possible to create very complex or even simple, too complex

00:41:55 interactive stuff using callbacks.

00:41:58 But I never felt like this was a great way to work.

00:42:01 And when I was building these desktop apps, I often felt at the end of the day, like I had

00:42:07 been operating at the very edges of my mental capacity.

00:42:10 And it's even worse when you go to modify existing code or, God forbid, have to help debug somebody

00:42:17 else's UI code.

00:42:19 I mean, it really is very, very difficult.

00:42:21 And I heard about reactive programming via this JavaScript framework called Meteor.

00:42:27 And I don't know if you've heard of Meteor.

00:42:29 Heard of it, but I haven't ever used it.

00:42:31 Yeah.

00:42:32 Not a lot of people have.

00:42:33 I think it was very influential in terms of its ideas, but it didn't catch on anything

00:42:37 like React.

00:42:38 But Meteor, I heard about it in 2012.

00:42:42 And I can't really convey how awe-inspiring it was to see.

00:42:47 I think I saw like a five-minute demo that was on the front page of Hacker News.

00:42:51 And, you know, I was just flabbergasted at what they were doing in this demo.

00:42:57 And there were like no event handlers anywhere.

00:42:59 And yet everything was just completely snappily updating.

00:43:02 I was like so taken aback by this that it's stuck in my brain for weeks.

00:43:06 Like I was like, how do they do that?

00:43:08 Like that doesn't make any sense to me.

00:43:09 And I finally like did some Googling around and there was a Stack Overflow answer that indicated

00:43:16 like this is sort of more or less how it works.

00:43:19 You know, with that clue, I downloaded their source code and sort of found my way to how exactly

00:43:25 it was implemented.

00:43:26 And I actually was getting on a plane and I downloaded the repo before I got on the plane.

00:43:30 I was like, by the time this plane lands, I'm going to figure this out.

00:43:33 And it actually is a beautifully elegant mechanism that, you know, I'll probably talk about someday.

00:43:39 I mean, we could talk about it now, but I think it would probably be the rest of this rest of our

00:43:43 time.

00:43:44 But it's a beautifully elegant and ultimately quite simple mechanism that underlies all this magic.

00:43:50 When I saw that and eventually took me a couple of weeks to connect the dots, but when I realized,

00:43:55 wait a minute, this could be how data scientists could create highly interactive things without

00:44:00 fear, without worrying that they're going to forget to update some intermediate thing and

00:44:05 get the wrong answer.

00:44:06 Or worse, they wouldn't worry about it.

00:44:07 They just get the wrong answer and then be angry after the fact, right?

00:44:10 We're going to retract that paper.

00:44:12 I'm sorry.

00:44:13 Yeah.

00:44:13 Yeah.

00:44:14 On the R side, it really has, these ideas have proven themselves out year after year after

00:44:20 year.

00:44:21 I think people are building incredibly cool things in reactive programming with no background

00:44:25 in software engineering, much less hardcore front-end web development.

00:44:31 So I really do believe, you know, there are a lot of different ways people are solving this

00:44:36 problem in Python.

00:44:37 You know, Streamlit and Dash each have their own takes and Pinecone and Solara, all these

00:44:41 different ones.

00:44:43 And the ones that sort of have thought carefully about this problem of how do you help people

00:44:49 programming against what is inherently a dynamic system while staying safe, while making sure

00:44:55 that you're getting the right answers every time and doing it in an efficient way.

00:44:58 Those are the ones that I think are closest to the spirit of Shiny.

00:45:02 And that's really why I think Shiny for Python needed to exist.

00:45:06 Because I mean, I looked at Dash and Streamlit and I just felt like, you know, I'm glad that

00:45:11 people are really getting a lot of value out of these, especially out of Streamlit.

00:45:15 But I really feel like this needs to exist as well.

00:45:19 We really need like an industrial strength reactive framework for things that are not just

00:45:24 top to bottom execution.

00:45:25 One thing that's standing out to me on the page here is you talk about there are a few utility

00:45:29 functions to help manage or utility things to help manage reactivity.

00:45:34 And one is context blocks, you know, with isolate and other ones are decorators for functions.

00:45:41 And, you know, just those two things are pretty, pretty solid Pythonic constructs of the language.

00:45:48 Right.

00:45:49 And so it looks like you put some thought into not just writing our code in Python, but trying

00:45:54 to embrace some of the Pythonic language capabilities.

00:45:57 Yeah, that's absolutely right.

00:45:59 It was really important to us when we were talking about the design philosophy for Shiny

00:46:04 for Python to really make it a Python first experience.

00:46:09 That's not necessarily like, I think the other choice is defensible too, which is let's make

00:46:14 these two frameworks look as similar as possible so that you can seamlessly move from one to the

00:46:18 other.

00:46:19 And I was just not convinced that anyone would really enjoy writing our style code in Python.

00:46:25 Like I wouldn't.

00:46:27 I mean, that just feels something feels hacky about that.

00:46:30 Yeah.

00:46:30 So yeah, we definitely spent some time and I'm not new to Python.

00:46:33 I think I learned Python originally in 2003, something like that.

00:46:36 And I've spent some time with the language.

00:46:38 So yeah, it felt to me like so much of Shiny is this reactive programming is about creating

00:46:44 independent units of either this is code that generates a plot or this is code that calculates

00:46:51 a data frame.

00:46:53 And taking those little bits of code and deciding when is the right time for each of them to run

00:46:58 because there are like dependencies between these different blocks.

00:47:00 And the notion of these being functions that have decorators on them felt to me like a pretty spot

00:47:07 on analogy, right?

00:47:08 Like you're creating a chunk of code, which in Python is a function, and then you are annotating

00:47:14 it with an indicator of your intent.

00:47:17 So in Shiny, you would write, you know, for a plot output, you would say def plot one or

00:47:21 whatever you named that plot.

00:47:23 You would have your matplotlib code inside.

00:47:25 And then as a decorator to that function, you would say, this is an output.

00:47:30 And the type of the output is a plot.

00:47:32 Now, I will say that being said, I have been a little bit surprised how many data scientists

00:47:37 in Python I've talked to have not worked with decorators.

00:47:40 I mean, most of them are familiar enough, but like a non-zero amount of people have told me,

00:47:45 like, I haven't done decorators before, and this is a little bit scary.

00:47:48 So that was not something that I was anticipating going into this.

00:47:51 So yeah, so I got a couple of thoughts.

00:47:53 One is, if you went with your alternate reality, where you said, let's make them as identical

00:47:58 as possible, there's certainly a case to be made for that, I agree.

00:48:01 But that would sort of say the primary audience is the people that flows between R and Python.

00:48:08 Which is certainly non-zero, but it's not like, let's try to resonate most deeply with

00:48:13 just the Python community full stop rather than the transit folks, you know?

00:48:19 Yeah, that's right.

00:48:20 So I would say, I mean, looking in from the outside, that this looks like a good choice.

00:48:24 Second, the with concepts and the decorators and data scientists is, I think one of the powers

00:48:31 of Python, the reason a lot of data scientists use it is you can be really effective with a

00:48:36 partial understanding, a highly partial understanding of what Python is and how it works, right?

00:48:42 Like you might not know how to create a class.

00:48:43 You might not even know how to create a function, but you can still pip install a few cool libraries

00:48:48 or condo install them and then run top to bottom five lines that generate an amazing output,

00:48:52 right?

00:48:52 And so I think there's a, not talking about all data science, but I think there's a slice

00:48:58 of kind of pretty new to Python data science who are like, came from somewhere else.

00:49:03 Like I heard this is awesome and I'm starting to get some traction with it, but even they

00:49:06 haven't gone into, you know, crazy concepts of decorators that take functions and star arg

00:49:12 wraps them and returns other functions.

00:49:13 You know, like that said, from a syntactical perspective, I think it's pretty, he's like,

00:49:18 oh, this function, it has to be reactive.

00:49:20 So I put at reactive event on it.

00:49:22 Yeah, that's right.

00:49:24 Yeah.

00:49:24 Yeah.

00:49:24 you're asked if there's, any examples, with user authentication.

00:49:29 I know there's, you guys have a, your gallery, which is what I skipped before, but the gallery,

00:49:34 I think is maybe easier to quickly browse, but there's more in the examples.

00:49:37 Yeah.

00:49:38 And honestly, we are a little behind on the examples.

00:49:41 we spent a lot of the last, six months working on features and not on examples.

00:49:46 You've been busy building the thing, not talking about what you could.

00:49:50 Yeah.

00:49:50 Yeah.

00:49:51 Yeah.

00:49:51 so I think we need our examples to catch up a little bit.

00:49:53 I will say that user authentication is something that we have as part of both hosted platform

00:50:01 and for Posit Connect.

00:50:03 So I think a lot of companies that are trying to sort of have a similar business model as

00:50:09 us and have a open source framework and also some kind of enterprise hosting often draw the

00:50:17 line that way, that, that authentication is one of the things that isn't in the framework.

00:50:21 It wraps the framework.

00:50:22 That being said in shiny for R people definitely went ahead and wrote their own packages that

00:50:28 put authentication into the framework and made it open source.

00:50:30 And I'm sure those things are going to happen in a shiny for Python very quickly as well.

00:50:35 Yeah.

00:50:35 How similar is the execution model?

00:50:37 Like the internals, what's happening conceptually on the server stuff or even on the website across

00:50:44 those?

00:50:44 Yeah.

00:50:44 There's a couple of ways to answer that.

00:50:46 I would say right now it is surprisingly close, which is not really what we were anticipating.

00:50:52 Shiny for Python is written in asyncio and that async framework is quite different than how async works

00:51:00 in R. And I think we, after, you know, spending a lot of time on this implementation, the mental model for the shiny app author is actually quite similar.

00:51:10 So where we ended up, I think it does for all intents and purposes as an app author, it's a very similar execution model.

00:51:16 So each user, if you were to launch a shiny for Python app right now from your, not from Wasm, but like using a regular shiny for Python, running it out of Python, and you connected three web browsers, they would all be running in the same process.

00:51:29 Each one gets their own copy of their, their own session, basically.

00:51:35 So there's no confusing whose inputs are applying to whose outputs.

00:51:38 Everybody has their own copies of inputs and outputs and they're wired together, but it's all running on the same process and it's all running.

00:51:45 Currently, they all run on the same thread.

00:51:47 We do that on purpose because you can also have shared reactives.

00:51:51 So, you know, you could have global variables that essentially when one browser updates them, everybody gets an update and you could have some kind of shared scoreboard or a chat room or whatever.

00:52:02 That being said, if you want, you can also do async.

00:52:06 So your outputs and calculations can also be async functions.

00:52:10 And therefore your session, if it's doing some kind of long running async calculation, can give up its control of the thread to some other session that can execute.

00:52:19 Right, or it's doing some database thing where it's pulling a bunch of data, can say, we're waiting on the database.

00:52:25 You guys keep going.

00:52:26 Yeah, that's right.

00:52:27 Okay.

00:52:27 So we're getting short on time here.

00:52:29 Let me ask you two more questions.

00:52:32 The first one is, I think from a community perspective, like what opens up now, right?

00:52:38 So we have R and we have Python and there are similarities between these, but there's really smart people doing creative and powerful stuff on both sides.

00:52:45 Because of the chronology, I guess, mostly I imagine that there's more Shiny work that's happened on the R side than on the Python side.

00:52:53 But how much does this make it possible for people who maybe wrote a book with Shiny for R and they might want a Python version, right?

00:53:03 It seems to me that having this as an option, if the whole UI is now kind of almost equivalent, if not syntactically identical, like, oh, all of a sudden we could have these two versions or we could move from one side of that fence to the other and still stick with Shiny in the same reactive programming model.

00:53:21 Yeah.

00:53:21 I want to make sure I get your question right.

00:53:23 Are you talking about people who are sort of in the Shiny ecosystem who have like extension packages and things like that?

00:53:30 Or are you talking about people who write Shiny apps?

00:53:32 People who write Shiny apps.

00:53:33 People who are like users creating these Shiny apps.

00:53:36 Maybe they created them in Shiny for R and they're like, I've always wanted to do a Python one, but I really like Shiny, so I'm not going anywhere.

00:53:42 You know, but now there's Shiny for Python, you're like, oh, maybe this is a way to have that as an option, right?

00:53:47 Or I'm a teacher teaching a class at a college and I did it with Shiny in R and they're telling me I have to move to Python.

00:53:53 I thought I'd use Streamlit, but maybe now I can move over.

00:53:56 Like, how much do you see that scenario coming into play now?

00:54:00 We absolutely are.

00:54:01 Yeah.

00:54:01 And I think I underestimated this a little bit.

00:54:04 I think what I was anticipating is that people who are very comfortable with Shiny for R and comfortable with R in general might see Shiny for Python as sort of a threat as, you know, the Shiny team has given up on R and all they care about is Python now and they're selling out to the Python, you know, crowd or whatever.

00:54:20 And that really has not been the case at all.

00:54:24 And then, Joe, you come on this podcast and oh my goodness.

00:54:26 Yeah, that's right.

00:54:29 Just kidding.

00:54:30 In fact, it's almost been a sense of relief.

00:54:33 And that applies as well to, you know, our company name was RStudio.

00:54:37 We rebranded Deposit.

00:54:38 And similarly, we announced both things at the same conference that we were going from RStudio Deposit in terms of our company name.

00:54:46 And Shiny for Python is now going to be a thing in addition to Shiny for R.

00:54:49 And I almost feel like the predominant emotion that we got from our community was relief.

00:54:57 Because I think unless you're in very specific fields, there's nobody that doesn't have some Python around them, right?

00:55:04 That maybe your team does R, but then you have this sibling team that, you know, maybe is more ML model heavy, and they definitely use Python.

00:55:13 Or your IT department really is a lot more comfortable deploying Python.

00:55:16 And I think as much as people love R, knowing that they have the option, knowing that they can take these ideas that they really like from R and be able to reuse them in Python.

00:55:30 I mean, yes, there will be some syntax to learn, but that's never the hard part, right?

00:55:34 I mean, the hard part is everything that you express using syntax.

00:55:37 The libraries and the UIs and all that, yeah.

00:55:39 Yeah.

00:55:39 So that's really what we've heard is that people, even if they're like totally happy with Shiny for R, they're happy that Shiny for Python exists because they know that if the time comes where they have to add that to their toolkit, that it's an option.

00:55:53 And they don't have to now try to map everything that they know and take for granted from Shiny to have to map that to Dash or to Streamlit or Panel or something like that.

00:56:02 Yeah. You know, another example is you work at a university where R is actually really has a good stronghold, right?

00:56:09 It has a, especially in the math and statistics department.

00:56:11 But maybe you were working with some astronomers and that their whole research group does Python and you want to work with them.

00:56:18 But, you know, like you also want to bring Shiny, right?

00:56:21 So that's what, like that, all that conversation right there kind of encapsulates why I thought this would be a really cool topic to have you on the show is, you know,

00:56:30 it kind of opens up this bridge for a lot of people in a lot of directions.

00:56:34 Yeah. And speaking of bridges, a member of my team pointed out that, you know, he's someone who in his previous job went from an R organization to like a more Python heavy organization.

00:56:45 And as someone who's coming from an R world, it can be a little bit intimidating, you know, to sort of start at the, of the ladder again, especially if you're in some kind of, you know, a team situation where you expect to be productive and to contribute to the team.

00:57:00 And Shiny for Python, especially being new, the people are coming from the R world and sort of find themselves, whether by choice or involuntarily, you know, needing to do Python, that Shiny for Python might be an interesting, like you said, bridge for them to go from one ecosystem to the other,

00:57:18 while maintaining a certain level of familiarity and to be able to deliver a lot of value.

00:57:23 Because I mean, one of the reasons I think Shiny resonated on the R side is because the things that you build with Shiny, if they have value, they are extremely visible.

00:57:32 They're extremely visible to your coworkers inside your organization.

00:57:36 And it really, you're talking about how, you know, people coming up and saying how they've built impactful things with, with Shiny.

00:57:42 Another common theme I heard was how much Shiny helped their careers going from doing work in a REPL or a notebook and instead being able to deliver very dramatic interactive applications.

00:57:56 It's a really powerful way to, to, to have an impact in your organization.

00:58:00 It is.

00:58:01 And I think data scientists, and especially this kind of like visual, let me turn the knobs and see what happens type of experience, is the type of person that has the ear of pretty high up folks.

00:58:12 And if you've got powerful tools like this to make a good impression, you're like, they asked me, I asked them if they could give us predictions of this, or if they could rethink this.

00:58:20 And they came back with a new web app the next day.

00:58:23 Are you kidding me?

00:58:23 It took us six months to redesign our stupid website for the homepage.

00:58:27 You know what I mean?

00:58:27 Something like this, right?

00:58:28 And so it lets you look good, right?

00:58:30 To the right people.

00:58:31 That's right.

00:58:32 100%.

00:58:32 Yeah.

00:58:33 Cool.

00:58:33 Joe, I'd say you're making a big impact here.

00:58:36 We got Alan out there saying, I just started using Shiny during this live stream.

00:58:39 Yes.

00:58:40 How hard is it to deploy this into an AWS EC2 instance, for example?

00:58:44 Yeah, you totally can.

00:58:45 The easiest thing to do is to look up Shiny server.

00:58:48 Most of the documentation talks about, you might find it on the R side of the website, but it's actually all the same.

00:58:54 So if you're using Ubuntu, it's a simple install of a Debian package.

00:59:01 If you're using Fedora, it's an RPM.

00:59:04 And it should be pretty easy to get started with.

00:59:08 But also don't forget that you can also just sling it into our free hosting, especially if you're just getting started.

00:59:14 Yeah.

00:59:14 Excellent.

00:59:15 Excellent.

00:59:15 Roadmap.

00:59:16 Let's close it out with Roadmap.

00:59:17 Yeah.

00:59:18 So in the upcoming release, we have been focused a lot on UI components.

00:59:24 And that's something that we're going to continue to focus on for a while.

00:59:28 We definitely want to make the more dashboard-y type applications very easy to write.

00:59:35 And we also are wanting to beef up on the output side of some of our widgets.

00:59:41 So we don't have a great table widget right now.

00:59:43 It just kind of takes a Pandas table and renders it to HTML using Pandas styler.

00:59:49 But we want to have fast, scalable virtual grid, basically.

00:59:53 And also for more interactive type outputs like that, I should mention that we support IPy widgets natively.

01:00:01 So most IPy widgets will just drop right in, including Plotly and PyDeck.

01:00:06 And well, most of them work just fine.

01:00:10 And we'll be doing more to sort of make some of those feel a little bit more native.

01:00:14 And the IPy widget stuff works great.

01:00:17 But I think we also want to make it feel a little bit more functional in some cases than object-oriented.

01:00:23 Yeah.

01:00:23 And we have a lot of examples to write, a lot of documentation to write.

01:00:27 And there are also quite a few features to port over from Shiny4R.

01:00:31 And the last thing I'll say is that automated testing is something that we are working on as well, making it easier for you to write automated tests for your Shiny4Python apps.

01:00:40 It's an approach that's based on PlayWrite that we use internally right now.

01:00:44 But we're going to have helper classes and functions to make it a little less boilerplate-y to write these kinds of tests for Shiny4Python apps.

01:00:53 Nice.

01:00:54 PlayWrite's really cool.

01:00:55 Yeah.

01:00:55 Yeah.

01:00:55 Very, very, yeah.

01:00:58 Very, very cool.

01:00:58 Like Selenium, but more Pythonic.

01:01:00 So pretty neat.

01:01:01 Yeah.

01:01:01 Yeah.

01:01:02 Well, it's a cool roadmap.

01:01:03 People want, they've got ideas.

01:01:05 They want to reach out to you.

01:01:07 Is GitHub an option?

01:01:09 Like, do they open an issue?

01:01:10 Do they email you?

01:01:11 How do they reach you guys?

01:01:12 Yeah.

01:01:12 So we have a GitHub issue is always appreciated and we will absolutely read those and engage.

01:01:19 We also have a Discord for things that are a little more, you know, if you want a little bit more of a back and forth and, or do you just want to meet us?

01:01:28 Do you just want to talk about, you know, any of the design decisions we've made or how we might be different than, you know, XYZ framework?

01:01:34 We're happy to talk to anyone and everyone.

01:01:36 And I think to get to the Discord is on our GitHub homepage, I believe.

01:01:41 Excellent.

01:01:41 Excellent.

01:01:41 Let's see if I can find a Discord.

01:01:44 There you have it.

01:01:44 Join us on Discord right on the homepage and the read me of the GitHub.

01:01:48 Yeah.

01:01:48 All right, Joe.

01:01:49 Thanks for being here.

01:01:49 Thanks for creating this.

01:01:50 Thank you.

01:01:50 This is cool.

01:01:51 I think it's a nice contribution and really, like I said, it's a cool bridge between the R and Python communities.

01:01:57 Thank you.

01:01:58 If you don't mind me saying so, I really enjoy your podcast.

01:02:01 And I think that you are, you're quite good at this.

01:02:05 And I just really appreciate all the conversations that you've had.

01:02:09 You seem like just a really generous interviewer and you do a really great job of sort of helping people really feel three-dimensional, even when we're talking about like very technical stuff.

01:02:19 So I appreciate that.

01:02:20 I really appreciate that.

01:02:21 That's super kind.

01:02:22 Thank you for saying that.

01:02:23 And thank you for being on the show.

01:02:24 Yeah, my pleasure.

01:02:25 We'll do all the links in the show notes for all these things.

01:02:28 People can check them out there.

01:02:29 And yeah, see you next time.

01:02:30 All right.

01:02:31 Thanks so much.

01:02:31 This has been another episode of Talk Python To Me.

01:02:35 Thank you to our sponsors.

01:02:37 Be sure to check out what they're offering.

01:02:39 It really helps support the show.

01:02:40 Influx Data encourages you to try InfluxDB.

01:02:44 InfluxDB is a database purpose built for handling time series data at a massive scale for real-time analytics.

01:02:51 Try it for free at talkpython.fm/InfluxDB.

01:02:54 GlareDB is an open source database for querying distributed and disparate data.

01:03:01 Connect your data sources and use the Python tools you already know to ask questions and integrate data across data sources.

01:03:08 Get started today at talkpython.fm/GlareDB.

01:03:11 Want to level up your Python?

01:03:13 We have one of the largest catalogs of Python video courses over at Talk Python.

01:03:17 Our content ranges from true beginners to deeply advanced topics like memory and async.

01:03:22 And best of all, there's not a subscription in sight.

01:03:25 Check it out for yourself at training.talkpython.fm.

01:03:28 Be sure to subscribe to the show.

01:03:30 Open your favorite podcast app and search for Python.

01:03:32 We should be right at the top.

01:03:34 You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

01:03:43 We're live streaming most of our recordings these days.

01:03:47 If you want to be part of the show and have your comments featured on the air,

01:03:50 be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:03:54 This is your host, Michael Kennedy.

01:03:56 Thanks so much for listening.

01:03:58 I really appreciate it.

01:03:59 Now get out there and write some Python code.

01:04:01 Thank you.

01:04:01 Bye.

01:04:02 Bye.

01:04:02 Bye.

01:04:02 Bye.

01:04:02 Bye.

01:04:03 Bye.

01:04:04 Bye.

01:04:05 Bye.

01:04:06 Bye.

01:04:07 Bye.

01:04:08 Bye.

01:04:09 Bye.

01:04:10 Bye.

01:04:11 Bye.

01:04:12 Bye.

01:04:13 Bye.

01:04:14 Bye.

01:04:15 Bye.

01:04:16 Bye.

01:04:17 Bye.

01:04:18 you you you Thank you.

