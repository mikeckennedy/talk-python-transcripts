WEBVTT

00:00:00.001 --> 00:00:03.140
How much time do you spend solving negative engineering problems?

00:00:03.140 --> 00:00:05.500
And can a framework solve them for you?

00:00:05.500 --> 00:00:09.920
Think of negative engineering as things you do to avoid bad outcomes in software.

00:00:09.920 --> 00:00:13.840
At the lowest level, this can be writing good error handling with try-accept.

00:00:13.840 --> 00:00:15.820
But it's broader than that.

00:00:15.820 --> 00:00:20.820
Logging, observability, like with Sentry Tools, retries, failovers,

00:00:20.820 --> 00:00:23.440
as in what you might get from Kubernetes, and so on.

00:00:23.440 --> 00:00:26.600
We have a great chat with Chris White about Prefect,

00:00:26.600 --> 00:00:31.760
a tool for data engineers and data scientists, meaning to solve these problems automatically.

00:00:31.760 --> 00:00:36.980
It's also a conversation I think is applicable to the broader software development community as well.

00:00:36.980 --> 00:00:42.340
This is Talk Python To Me, episode 365, recorded May 9th, 2022.

00:00:55.500 --> 00:00:58.700
Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:58.700 --> 00:01:00.420
This is your host, Michael Kennedy.

00:01:00.420 --> 00:01:02.700
Follow me on Twitter, where I'm @mkennedy,

00:01:02.700 --> 00:01:06.620
and keep up with the show and listen to past episodes at talkpython.fm.

00:01:06.620 --> 00:01:09.720
And follow the show on Twitter via at Talk Python.

00:01:09.720 --> 00:01:13.240
We've started streaming most of our episodes live on YouTube.

00:01:13.240 --> 00:01:17.060
Subscribe to our YouTube channel over at talkpython.fm/youtube

00:01:17.060 --> 00:01:20.860
to get notified about upcoming shows and be part of that episode.

00:01:21.680 --> 00:01:25.280
This episode is sponsored by Microsoft for Startups Founders Hub.

00:01:25.280 --> 00:01:31.040
Check them out at talkpython.fm/founders hub to get early support for your startup.

00:01:31.040 --> 00:01:34.700
And it's brought to you by us over at Talk Python Training.

00:01:34.700 --> 00:01:39.280
Did you know we have one of the largest course libraries for Python courses?

00:01:39.280 --> 00:01:41.820
They're all available without a subscription.

00:01:41.820 --> 00:01:44.420
So check it out over at talkpython.fm.

00:01:44.420 --> 00:01:45.680
Just click on courses.

00:01:47.360 --> 00:01:50.800
Transcripts for this and all of our episodes are brought to you by Assembly AI.

00:01:50.800 --> 00:01:53.500
Do you need a great automatic speech-to-text API?

00:01:53.500 --> 00:01:56.040
Get human-level accuracy in just a few lines of code.

00:01:56.040 --> 00:01:58.800
Visit talkpython.fm/assemblyai.

00:01:58.800 --> 00:02:01.280
Chris, welcome to Talk Python To Me.

00:02:01.280 --> 00:02:02.360
Yeah, thanks for having me.

00:02:02.360 --> 00:02:03.060
Happy to be here.

00:02:03.060 --> 00:02:04.060
I'm happy to have you here.

00:02:04.060 --> 00:02:05.060
It's going to be a lot of fun.

00:02:05.060 --> 00:02:08.100
We're going to talk a lot of data engineering things.

00:02:08.100 --> 00:02:12.200
Try to loop that back to the more traditional software development side.

00:02:12.200 --> 00:02:16.460
You have a really cool open source project and startup in Prefect.

00:02:16.460 --> 00:02:24.020
And we're both going to talk about the product as well as, you know, making an open source successful business model, which is really cool.

00:02:24.020 --> 00:02:24.380
Yeah.

00:02:24.380 --> 00:02:27.300
I'm very into that and very, you know, that's very important to me.

00:02:27.300 --> 00:02:29.820
And I love to highlight cases of people doing that.

00:02:29.820 --> 00:02:30.960
Well, it looks like you all are.

00:02:30.960 --> 00:02:31.480
Yeah, excellent.

00:02:31.480 --> 00:02:31.720
Yeah.

00:02:31.720 --> 00:02:35.200
It's a, as we'll see as we get into it, it's a core part of how we view the world.

00:02:35.200 --> 00:02:36.060
Yeah, that's awesome.

00:02:36.060 --> 00:02:38.840
Before we get to all that, though, let's start with your story.

00:02:38.840 --> 00:02:40.120
How'd you get into programming in Python?

00:02:40.120 --> 00:02:44.060
So I think like a lot of, so I was born in the 80s.

00:02:44.060 --> 00:02:46.100
I feel like a lot of people in my generation, right?

00:02:46.100 --> 00:02:50.860
We got into HTML and building websites on AngelFire and GeoCities.

00:02:50.860 --> 00:02:54.780
So, you know, from the early days, I was into playing around with computers.

00:02:54.780 --> 00:03:03.560
I would say didn't really get into Python until probably high school is when I first started dabbling.

00:03:03.560 --> 00:03:06.960
And it was really just, I was working at a bank.

00:03:06.960 --> 00:03:08.840
I was like trying to automate some small things.

00:03:08.840 --> 00:03:11.120
And to be clear, I did not get very far.

00:03:11.120 --> 00:03:14.360
It was a mildly successful undertaking.

00:03:14.360 --> 00:03:16.700
And then college, kind of similar story.

00:03:16.700 --> 00:03:19.060
Like it was one of those things that I just would, I had a couple of books.

00:03:19.060 --> 00:03:20.060
I would play around with it.

00:03:20.060 --> 00:03:24.540
It was always just a fun activity for me, but I never had any serious focus on it.

00:03:25.020 --> 00:03:37.280
I think in college, when it started to get into really econometrics, it's when I started to play more seriously and start to try to understand some of the performance implications of what I was doing and things like that.

00:03:37.440 --> 00:03:47.360
And then taking kind of the next level in grad school, a friend of mine and myself thought that we were smart enough to build some machine learning models for trading.

00:03:47.360 --> 00:03:50.140
And we did all of that in combination of Python and Otter.

00:03:50.140 --> 00:03:51.040
Surprise.

00:03:51.040 --> 00:03:51.600
Okay.

00:03:51.600 --> 00:03:52.600
That's amazing.

00:03:52.600 --> 00:03:53.540
Yeah.

00:03:53.540 --> 00:03:54.280
Lost some money.

00:03:54.540 --> 00:04:00.420
But it was a great lesson in understanding data and exactly what you're doing.

00:04:00.420 --> 00:04:04.100
And genuinely, so I was studying pure math in grad school.

00:04:04.100 --> 00:04:12.760
And that experiment and kind of the actual like visceral outcome of it is what really got me into studying machine learning more deeply.

00:04:12.760 --> 00:04:14.800
Because I was like, wait a second, there's something interesting here.

00:04:14.800 --> 00:04:16.640
And so I started to dig in more.

00:04:16.640 --> 00:04:18.180
That must have been a really cool experience.

00:04:18.180 --> 00:04:19.440
Even if you did lose money.

00:04:19.440 --> 00:04:21.580
It's important to put some skin in the game.

00:04:21.580 --> 00:04:22.060
Exactly.

00:04:22.060 --> 00:04:22.460
Right.

00:04:22.520 --> 00:04:27.000
Like it's a hobby until you start to take it seriously and try to get real outcomes.

00:04:27.000 --> 00:04:30.700
Because there's always these layers of these levels, right?

00:04:30.700 --> 00:04:34.260
Like I'm going to learn this thing and poke around and kind of get it to work.

00:04:34.260 --> 00:04:37.160
Or I'm going to learn this thing so that it actually works.

00:04:37.160 --> 00:04:41.100
Or I'm going to learn this thing so I can explain it when there's three ways.

00:04:41.100 --> 00:04:42.720
They all kind of do the same thing.

00:04:42.720 --> 00:04:45.040
I can explain when to choose which one, right?

00:04:45.040 --> 00:04:50.760
And the more seriously you take it and the more is on the line, the more you kind of, you get that real understanding of it.

00:04:50.860 --> 00:04:57.220
I mean, this is a little off of Python, but I think that resonates with me so much on every dimension when it comes to learning something.

00:04:57.220 --> 00:05:00.520
You have to, it's not a passive activity.

00:05:00.520 --> 00:05:01.740
You have to engage with it.

00:05:01.740 --> 00:05:02.080
Right.

00:05:02.080 --> 00:05:03.940
And it's in my opinion, the only way to learn anything.

00:05:03.940 --> 00:05:06.180
Math, programming, business, whatever.

00:05:06.180 --> 00:05:06.900
Totally agree.

00:05:06.900 --> 00:05:09.640
Speaking of math, you have a math background, right?

00:05:09.640 --> 00:05:10.420
I do.

00:05:10.420 --> 00:05:11.460
Proudly so, yes.

00:05:11.460 --> 00:05:12.160
Yeah, awesome.

00:05:12.160 --> 00:05:12.400
Yeah.

00:05:12.460 --> 00:05:12.940
So do I.

00:05:12.940 --> 00:05:20.820
I just last episode spoke with the SymPy, S-Y-M-Py guys, about doing symbolic math with Python.

00:05:20.820 --> 00:05:23.340
And that was pretty fascinating stuff.

00:05:23.340 --> 00:05:25.340
Have you played with any of the symbolic stuff?

00:05:25.340 --> 00:05:26.700
I have played with it, yeah.

00:05:26.700 --> 00:05:28.540
I had no serious project.

00:05:28.540 --> 00:05:31.480
Like genuinely just playing around with it to see kind of what it's capable of.

00:05:31.480 --> 00:05:32.620
It is really cool.

00:05:33.520 --> 00:05:35.480
I would definitely go look up that episode, yeah.

00:05:35.480 --> 00:05:36.380
Awesome.

00:05:36.380 --> 00:05:37.840
What kind of math did you study?

00:05:37.840 --> 00:05:46.620
So I started my PhD program focusing on arithmetic geometry, which for people out there, it's one of the more abstract forms of math.

00:05:46.620 --> 00:05:48.900
I still really like that stuff a lot, honestly.

00:05:48.900 --> 00:05:51.540
But what I found was that-

00:05:51.540 --> 00:05:53.660
Is it like manifolds and stuff like that?

00:05:53.660 --> 00:05:55.100
Not quite.

00:05:55.100 --> 00:05:56.660
It's a little bit-

00:05:56.660 --> 00:05:58.680
So they use a lot of the same-

00:05:58.680 --> 00:06:02.100
A lot of their arguments are kind of by analogy with things like manifolds.

00:06:02.440 --> 00:06:08.440
But you're studying geometric structures that are way more discrete than a manifold.

00:06:08.440 --> 00:06:16.480
And so like the spectrum of prime numbers on the integers is like a geometric object for the purposes of arithmetic geometry.

00:06:16.480 --> 00:06:17.000
Wow.

00:06:17.000 --> 00:06:17.460
Okay.

00:06:17.460 --> 00:06:24.320
Hard to visualize, but it just turns out a lot of the formal definitions of geometry have these really deep analogs and arithmetic.

00:06:24.320 --> 00:06:26.420
And you can actually learn a lot.

00:06:26.420 --> 00:06:31.300
And the most famous example of this that I think a lot of people will probably be familiar with is Fermat's last theorem.

00:06:31.300 --> 00:06:32.220
Yeah, that's right.

00:06:32.360 --> 00:06:34.180
So that was all arithmetic geometry.

00:06:34.180 --> 00:06:35.780
It was all using some of those techniques.

00:06:35.780 --> 00:06:36.520
Yeah, that's right.

00:06:36.520 --> 00:06:39.840
So they're really heavy duty to solve very simple two-state problems.

00:06:39.840 --> 00:06:49.740
There was a really good book about Fermat's last theorem by this guy named, something like Amol or something like that.

00:06:49.740 --> 00:06:50.960
Maybe you'll find it for the show notes.

00:06:50.960 --> 00:06:52.380
It's just absolutely fascinating book.

00:06:52.380 --> 00:06:53.080
Oh, that's awesome.

00:06:53.080 --> 00:06:54.860
It just talks about the struggle that guy-

00:06:54.860 --> 00:06:55.300
Yeah, yeah.

00:06:55.300 --> 00:06:58.020
It really talks about the struggle that guy who solved it went through.

00:06:58.020 --> 00:06:58.820
Cool.

00:06:58.820 --> 00:07:00.280
Well, how about now?

00:07:00.280 --> 00:07:01.280
You're at Prefect, right?

00:07:01.280 --> 00:07:02.160
What do you do day to day?

00:07:02.240 --> 00:07:10.120
I didn't finish where I went with grad school, which is relevant to how I got to Prefect, which I ended up going into optimization theory, still on the pure side.

00:07:10.120 --> 00:07:11.300
So still very much proof-based.

00:07:11.820 --> 00:07:17.700
But that was right when machine learning was becoming a thing, right after I had done this experiment with my friend and started getting into it.

00:07:17.700 --> 00:07:22.140
And so that's kind of how I started to head more towards industry.

00:07:22.140 --> 00:07:24.880
And for me, I consider myself a problem solver.

00:07:24.880 --> 00:07:27.980
And so I was always very good at solving problems.

00:07:27.980 --> 00:07:32.980
But I'll admit, I wasn't always the best at maybe justifying a grant proposal or something like that.

00:07:32.980 --> 00:07:38.620
And so that's kind of when I started to think more about industry and started doing some consulting and test the waters.

00:07:38.620 --> 00:07:50.160
And so anyways, long story short, got into data, got into machine learning, got into tooling for machine learning, got into backend engineering for hosting the tooling, et cetera, et cetera.

00:07:50.160 --> 00:07:52.880
And then met with Jeremiah, who's the CEO of Prefect.

00:07:52.880 --> 00:07:53.720
Yeah.

00:07:53.720 --> 00:07:55.420
Just sucks you in, right?

00:07:55.420 --> 00:07:55.800
Exactly.

00:07:55.800 --> 00:07:56.860
It's a black hole.

00:07:56.860 --> 00:07:57.320
Yeah.

00:07:57.320 --> 00:07:57.440
Yeah.

00:07:57.440 --> 00:07:58.460
Yeah, cool.

00:07:58.460 --> 00:08:06.080
So you started out working at banks doing sort of homegrown data engineering, right?

00:08:06.080 --> 00:08:08.700
Is that maybe a good way to describe it?

00:08:08.700 --> 00:08:10.140
Homegrown a lot of things, yes.

00:08:10.140 --> 00:08:12.160
So homegrown data engineering, one of them.

00:08:12.160 --> 00:08:15.780
Homegrown model building was another big, big thing.

00:08:15.780 --> 00:08:18.520
Homegrown data governance at one point.

00:08:18.520 --> 00:08:20.680
Homegrown data platform.

00:08:20.680 --> 00:08:27.300
And actually, the data platform was particularly interesting because looking back, it kind of felt like a microcosm of a lot of the,

00:08:27.300 --> 00:08:28.840
the tool explosion we've seen lately.

00:08:28.840 --> 00:08:36.720
Where the platform we were building was for data scientists to deploy their model to and connect it up to data sources that, you know, we would keep up to date.

00:08:36.720 --> 00:08:38.260
And so that's where the data engineering comes in.

00:08:38.260 --> 00:08:40.980
And then business analysts are the actual downstream users.

00:08:41.360 --> 00:08:45.940
And they would interact with these models through an API that we would build for them on top of the models.

00:08:45.940 --> 00:08:47.540
It was still in Python.

00:08:47.540 --> 00:08:51.320
So they would actually have to write Python, which was really interesting.

00:08:51.320 --> 00:08:53.000
So you got to teach them classes on it.

00:08:53.000 --> 00:08:53.940
That is interesting.

00:08:53.940 --> 00:08:54.580
Yeah.

00:08:55.240 --> 00:08:55.460
Yeah.

00:08:55.580 --> 00:08:58.940
I've seen, you know, non-developer types do that before.

00:08:58.940 --> 00:09:03.580
I've seen it in like real-time stock trading, you know, like brokerages and hedge funds.

00:09:03.580 --> 00:09:03.860
Right.

00:09:04.060 --> 00:09:08.460
And yeah, it's, you're going to learn Python because you need to talk to the tool.

00:09:08.460 --> 00:09:13.520
I've also seen people learn SQL who have no business knowing SQL otherwise, but for sort of a similar reason.

00:09:13.520 --> 00:09:13.880
Yeah.

00:09:13.880 --> 00:09:14.200
Yeah.

00:09:14.200 --> 00:09:16.460
And SQL is a little bit more approachable, I think.

00:09:16.460 --> 00:09:16.660
Yeah.

00:09:16.660 --> 00:09:22.680
But Python, Python is just a little, it's easier to kind of shoot yourself in the foot with Python, I think, if you don't really know it well.

00:09:22.680 --> 00:09:24.280
It's just more open-ended, right?

00:09:24.280 --> 00:09:26.220
It's just, it's way more open-ended.

00:09:26.220 --> 00:09:26.960
Cool.

00:09:26.960 --> 00:09:27.460
All right.

00:09:27.460 --> 00:09:39.480
So you talk a lot about negative engineering concepts and how you've structured Prefect to help alleviate, eliminate, solve, prevent some of those problems.

00:09:39.480 --> 00:09:47.260
So maybe we should start the conversation and sort of twofold, like maybe give us a quick overview of what you might call data engineering.

00:09:47.260 --> 00:09:50.920
And then what are these negative engineering things that live in that space?

00:09:51.440 --> 00:09:55.960
So, yeah, and I think these two concepts are related, but also, but I think negative engineering is definitely more general.

00:09:55.960 --> 00:09:59.400
So for, well, let me start with negative engineering and then we'll kind of, kind of drill in.

00:09:59.400 --> 00:09:59.640
Yeah.

00:09:59.640 --> 00:10:06.360
So negative engineering, we've got a blog post that we published, I think three years ago at this point on negative engineering.

00:10:06.360 --> 00:10:08.320
Encourage anyone who's interested, go read it.

00:10:08.320 --> 00:10:14.080
I think since we have released that blog post, we have refined kind of our own understanding and thinking about this.

00:10:14.080 --> 00:10:20.300
And one thing that I kind of noticed is negative engineering got this sentiment, like it's just anything I don't really like to do.

00:10:20.300 --> 00:10:22.080
And that's not accurate.

00:10:22.080 --> 00:10:22.720
There's a lot of things.

00:10:22.720 --> 00:10:23.800
Those are negative engineering.

00:10:23.800 --> 00:10:24.580
I'll tell you what.

00:10:24.580 --> 00:10:25.100
Yeah, exactly.

00:10:25.100 --> 00:10:26.180
Got nothing done in those meetings.

00:10:26.180 --> 00:10:26.540
Yeah.

00:10:26.540 --> 00:10:26.900
Exactly.

00:10:26.900 --> 00:10:28.440
And like, I don't think so.

00:10:28.440 --> 00:10:38.700
And so, yeah, to be really precise with the way we think about this, positive engineering is code or interacting with software systems that you do explicitly to achieve an outcome.

00:10:38.700 --> 00:10:45.560
So I run a SQL query to populate my dashboard or something like that.

00:10:45.560 --> 00:10:48.820
It's a very concrete connection to some sort of outcome.

00:10:48.820 --> 00:10:55.780
And then negative engineering are code you write systems you interact with that ensure those outcomes.

00:10:55.780 --> 00:10:58.140
I am sort of like insurance.

00:10:58.720 --> 00:11:02.560
And so defensive code is a great example of negative engineering.

00:11:02.640 --> 00:11:04.220
It's something that you're writing.

00:11:04.220 --> 00:11:12.960
When you're writing those try accepts and everything, you're really hedging against anticipated failure modes that you're trying to account for right now.

00:11:12.960 --> 00:11:15.880
If the data was always well formed, it would never crash.

00:11:15.880 --> 00:11:18.540
If the servers was always up, it would never crash.

00:11:18.900 --> 00:11:19.780
Exactly, exactly.

00:11:19.780 --> 00:11:23.360
But then you get the reports, the sentry messages or whatever.

00:11:23.360 --> 00:11:24.380
Exactly.

00:11:24.380 --> 00:11:26.380
And so observability, I think.

00:11:26.380 --> 00:11:28.080
Complete negative engineering.

00:11:28.080 --> 00:11:30.460
Observability is not something you do for its own sake.

00:11:30.460 --> 00:11:35.080
You do it in anticipation of an unknown future failure mode.

00:11:35.080 --> 00:11:37.400
It allows you to recover the outcome.

00:11:37.400 --> 00:11:38.580
That you want to avoid.

00:11:38.580 --> 00:11:40.980
Yeah, failure is only like the first class citizen here, right?

00:11:40.980 --> 00:11:45.120
Something failed and you want to figure out what happens so that you can fix it.

00:11:45.120 --> 00:11:57.160
To really tie it to insurance even more directly, all of the things we're talking about are situations where a small error has a disproportionately large negative impact on an outcome.

00:11:57.160 --> 00:11:59.920
So scheduling is an example here.

00:11:59.920 --> 00:12:09.220
If you have Cron running on a server, running a Python script, and something you do, maybe you load just far too much data in your script and the machine crashes out of memory.

00:12:09.220 --> 00:12:10.220
You don't get an alert.

00:12:10.220 --> 00:12:14.320
You wake up the next morning and 30 jobs have not run.

00:12:14.500 --> 00:12:15.420
You don't know why.

00:12:15.420 --> 00:12:16.780
You have to figure out why.

00:12:16.780 --> 00:12:18.960
By the time you figure it out, you're five hours deep.

00:12:18.960 --> 00:12:20.560
Maybe not that long, but two hours deep.

00:12:20.560 --> 00:12:29.260
And using a service or a system, and we'll talk about the details, like Prefect or some other type of observability negative engineering tool, you would potentially get a text alert.

00:12:29.260 --> 00:12:33.520
Or at a minimum, you would wake up and immediately see, oh, that happened at 1 a.m.

00:12:33.520 --> 00:12:34.140
I know what happened.

00:12:34.140 --> 00:12:35.180
Let me just fix it really quickly.

00:12:35.180 --> 00:12:36.500
And you're back up to speed.

00:12:36.500 --> 00:12:36.980
Yeah, interesting.

00:12:36.980 --> 00:12:37.340
Yeah.

00:12:37.340 --> 00:12:43.640
Frank out in the audience says, defensive programming, that means good handling on exceptions and so forth.

00:12:43.720 --> 00:12:45.540
And I think that's interesting, Frank.

00:12:45.540 --> 00:12:47.100
I think I do agree.

00:12:47.100 --> 00:12:50.920
But it sounds to me, Chris, like you're even talking like way broader.

00:12:50.920 --> 00:12:58.380
Like, do you, if you're writing an API, do you have to even think about hosting that or making sure that it's scaled out correct?

00:12:58.380 --> 00:13:08.540
Or like, you know, observability as tracking error reporting in the broad sense of sure, you should be doing the small defensive programming, but also to deal with these negative engineering problems.

00:13:08.540 --> 00:13:12.180
But like, there's whole businesses around dealing with segments of it.

00:13:12.620 --> 00:13:13.620
Exactly, exactly.

00:13:13.620 --> 00:13:23.500
And I think putting a word to it, as simple as it may seem, really helps, especially for building a company and a product like refine and target.

00:13:23.500 --> 00:13:27.660
Like, what are the features that are important to us and which ones are not important, at least at this time?

00:13:27.660 --> 00:13:30.220
And especially in orchestration and data engineering.

00:13:30.500 --> 00:13:34.740
I mean, it's very tempting to build cool stuff because there's lots of cool stuff you can build.

00:13:34.740 --> 00:13:36.740
But are you guaranteeing an outcome?

00:13:36.740 --> 00:13:38.800
Are you ensuring against some outcome?

00:13:38.800 --> 00:13:42.080
Like, are you sure you know exactly what you're providing here when you build that cool thing?

00:13:42.080 --> 00:13:42.440
Right.

00:13:42.440 --> 00:13:49.120
So you guys use, you try to identify some of these areas of negative engineering that data engineers run into.

00:13:49.120 --> 00:13:53.760
And you're like, how do we build a framework such that they don't have to worry about or think about that?

00:13:53.760 --> 00:13:54.820
Exactly, exactly.

00:13:54.820 --> 00:14:06.760
And so for data engineering, I think of this as it's any software engineering that you do that either moves data, cleans data, or prepares data.

00:14:06.760 --> 00:14:12.580
Either for another person to ingest or maybe another system to ingest, but it's all the activities surrounding that.

00:14:12.580 --> 00:14:18.160
And I think for, I know, maybe not everyone listening is in the data space specifically.

00:14:18.160 --> 00:14:25.160
So just as the easiest example, we have a production database running behind some web server, some API, and you want to do analytics on it.

00:14:25.160 --> 00:14:29.060
Well, maybe you're using Postgres, not the best analytics database.

00:14:29.060 --> 00:14:31.840
And also you don't want to actually write a query that takes down the database.

00:14:31.840 --> 00:14:32.920
So what do you do?

00:14:32.920 --> 00:14:36.180
You take the data out, you put it into BigQuery or Snowflake or somewhere else.

00:14:36.180 --> 00:14:37.680
You run your analytics over there.

00:14:37.680 --> 00:14:38.860
The schema is there.

00:14:38.860 --> 00:14:39.000
Right.

00:14:39.000 --> 00:14:50.560
You probably totally change the schemas because you want to, in a relational database, somewhat in the document database, maybe a little less, but definitely in a relational database, your job is third normal form.

00:14:50.560 --> 00:14:53.540
Like, how do I not have any data that repeats?

00:14:53.540 --> 00:14:56.960
I'll have a 10-way join rather than have something repeat.

00:14:56.960 --> 00:15:00.440
But when you want to do reporting, those joins are killers.

00:15:00.440 --> 00:15:07.700
You just want, like, I want to do a straight query where, you know, this column is that and just, like, wreck the normalization for performance reasons, right?

00:15:07.700 --> 00:15:07.800
Right.

00:15:07.800 --> 00:15:08.540
You just want to have fun.

00:15:08.540 --> 00:15:08.740
Yeah.

00:15:08.740 --> 00:15:09.720
Exactly.

00:15:09.720 --> 00:15:18.060
So you can ask the questions in very interesting ways, like many ways, in simple queries rather than being a SQL master.

00:15:18.060 --> 00:15:18.700
Exactly.

00:15:18.700 --> 00:15:19.140
Exactly.

00:15:19.140 --> 00:15:25.120
And keeping that system running, keeping the data fresh, keeping the schemas in sync, that's a lot of work, actually.

00:15:25.120 --> 00:15:28.280
And that's one of the classic examples of data engineering.

00:15:28.380 --> 00:15:30.060
There's a lot of other stuff, too, but that's the classic.

00:15:30.060 --> 00:15:37.240
This portion of Talk Python To Me is brought to you by Microsoft for Startups Founders Hub.

00:15:37.240 --> 00:15:39.320
Starting a business is hard.

00:15:39.320 --> 00:15:44.260
By some estimates, over 90% of startups will go out of business in just their first year.

00:15:44.260 --> 00:15:53.720
With that in mind, Microsoft for Startups set out to understand what startups need to be successful and to create a digital platform to help them overcome those challenges.

00:15:53.720 --> 00:15:56.420
Microsoft for Startups Founders Hub was born.

00:15:56.820 --> 00:16:03.060
Founders Hub provides all founders at any stage with free resources to solve their startup challenges.

00:16:03.060 --> 00:16:11.680
The platform provides technology benefits, access to expert guidance and skilled resources, mentorship and networking connections, and much more.

00:16:11.680 --> 00:16:21.260
Unlike others in the industry, Microsoft for Startups Founders Hub doesn't require startups to be investor-backed or third-party validated to participate.

00:16:21.860 --> 00:16:23.960
Founders Hub is truly open to all.

00:16:23.960 --> 00:16:25.460
So what do you get if you join them?

00:16:25.460 --> 00:16:33.740
You speed up your development with free access to GitHub and Microsoft Cloud computing resources and the ability to unlock more credits over time.

00:16:33.740 --> 00:16:43.440
To help your startup innovate, Founders Hub is partnering with innovative companies like OpenAI, a global leader in AI research and development, to provide exclusive benefits and discounts.

00:16:44.100 --> 00:16:48.860
Through Microsoft for Startups Founders Hub, becoming a founder is no longer about who you know.

00:16:48.860 --> 00:17:02.420
You'll have access to their mentorship network, giving you a pool of hundreds of mentors across a range of disciplines and areas like idea validation, fundraising, management and coaching, sales and marketing, as well as specific technical stress points.

00:17:02.560 --> 00:17:07.680
You'll be able to book a one-on-one meeting with the mentors, many of whom are former founders themselves.

00:17:07.680 --> 00:17:12.780
Make your idea a reality today with the critical support you'll get from Founders Hub.

00:17:12.780 --> 00:17:18.740
To join the program, just visit talkpython.fm/foundershub, all one word, no links in your show notes.

00:17:19.180 --> 00:17:21.060
Thank you to Microsoft for supporting the show.

00:17:21.060 --> 00:17:32.940
One of the things I see stand out, I don't want to get the API right away, but I just see like coming out of the API that you all build is there's like retries like right front and center.

00:17:32.940 --> 00:17:36.480
Like here's a task and I wanted to retry with this plan, right?

00:17:36.480 --> 00:17:40.260
You have this number of times or there's probably like a back off story and stuff.

00:17:40.260 --> 00:17:41.140
Exactly.

00:17:41.140 --> 00:17:46.080
And that's another great example of small error, the tiniest network blip.

00:17:46.700 --> 00:17:50.960
Kubernetes, I don't know, I've seen kubedms sometimes just doesn't do what it's supposed to do.

00:17:50.960 --> 00:17:55.440
Somebody was flipping over the load balancer and you hit it at just the wrong time and there it goes, right?

00:17:55.440 --> 00:17:55.800
Exactly.

00:17:55.800 --> 00:17:59.520
And now next thing you know, I mean, a lot of different things can happen depending on the script you wrote.

00:17:59.520 --> 00:18:04.400
Maybe you did a lot of good defensive programming yourself and the try accept was a little bit too much.

00:18:04.400 --> 00:18:08.080
And so your next task actually runs despite the first one failing.

00:18:08.080 --> 00:18:10.440
And maybe it passes the exception downstream.

00:18:10.440 --> 00:18:13.840
And now you have this cascade of errors that you have no idea what they mean.

00:18:13.980 --> 00:18:23.140
And another thing in negative engineering is dependency management, making sure that if this fails, things that depend on it do not run unless they are configured to run only on failure.

00:18:23.140 --> 00:18:23.460
Yeah.

00:18:23.460 --> 00:18:26.400
Worst case scenario, they say, yes, this is a good investment.

00:18:26.400 --> 00:18:26.980
You should buy it.

00:18:26.980 --> 00:18:28.180
Or yes, this is a good decision.

00:18:28.180 --> 00:18:28.800
And they like.

00:18:28.800 --> 00:18:29.680
Exactly.

00:18:29.680 --> 00:18:30.180
Exactly.

00:18:30.180 --> 00:18:31.320
It's really cheap.

00:18:31.380 --> 00:18:33.480
Well, it's zero because the task failed to find the price.

00:18:33.480 --> 00:18:34.520
So, of course, you should buy it.

00:18:34.520 --> 00:18:35.120
Exactly.

00:18:35.120 --> 00:18:35.500
Exactly.

00:18:35.500 --> 00:18:39.380
And you want to know that it happened and make sure that the effect, the blast radius is minimized.

00:18:39.380 --> 00:18:40.880
And that's really what it's all about.

00:18:40.880 --> 00:18:45.320
And like retry is a perfect example of just one of those small things that can cascade weird, unexpected ways.

00:18:45.320 --> 00:18:46.180
Yeah.

00:18:46.180 --> 00:18:50.780
What are some of the other areas of crufter of these problems you see in data engineering?

00:18:50.780 --> 00:18:52.220
Logging is a big one.

00:18:52.360 --> 00:18:56.400
Just having a place where you can see some centralized set of important logs.

00:18:56.400 --> 00:18:58.080
Any and all.

00:18:58.080 --> 00:19:00.800
The more you use like Kubernetes are more like you kind of.

00:19:00.800 --> 00:19:01.100
Oh, yeah.

00:19:01.100 --> 00:19:02.120
Distributed systems.

00:19:02.120 --> 00:19:03.380
Microservice it out.

00:19:03.380 --> 00:19:06.320
The harder it is to know what's going on in the logging story.

00:19:06.320 --> 00:19:06.740
Well, right.

00:19:06.740 --> 00:19:12.220
And the definition we work with in the modern data stack are data tools that deliver their feature over an API.

00:19:12.220 --> 00:19:21.860
And so if you think about that, you're dealing with inherently this giant microservice system that you want to like coordinate and see in some centralized place.

00:19:21.940 --> 00:19:22.840
In some meaningful way.

00:19:22.840 --> 00:19:26.400
And collaboration, versioning, those are all other things.

00:19:26.400 --> 00:19:26.900
Caching.

00:19:26.900 --> 00:19:31.400
So just configurable like storage locations for things.

00:19:31.400 --> 00:19:43.940
And then maybe the biggest one that is simple, but I see people building this internally all the time, which is just exposing an API, a parametrized API, which is triggering some type of job.

00:19:43.940 --> 00:19:47.440
Next thing you know, it needs to be available, you know, throughout your whole network.

00:19:47.440 --> 00:19:48.420
It needs to be up.

00:19:48.420 --> 00:19:51.520
It needs to be monitored and tracked and audited and all these things.

00:19:51.520 --> 00:19:52.340
Maybe versioned.

00:19:52.340 --> 00:19:53.500
Maybe versioned.

00:19:53.500 --> 00:19:53.960
Exactly.

00:19:53.960 --> 00:19:54.400
Exactly.

00:19:54.400 --> 00:19:55.080
Oh my gosh.

00:19:55.080 --> 00:19:55.440
Yeah.

00:19:55.440 --> 00:19:58.600
It just gets, all of a sudden you're like, okay, I'm building an entire system.

00:19:58.600 --> 00:20:00.360
My job is not this.

00:20:00.360 --> 00:20:01.060
Yeah.

00:20:01.280 --> 00:20:03.300
It's one of those things that seems so simple.

00:20:03.300 --> 00:20:11.620
Like I would love it if you would just really help us out, you know, Michael here, if you could just give me a quick little, little API that we could just call that API.

00:20:11.620 --> 00:20:13.080
I mean, look, I'll just, here's the JSON.

00:20:13.080 --> 00:20:14.060
It's like that big.

00:20:14.060 --> 00:20:17.060
And if I could just call it, boy, things would just unlock.

00:20:17.060 --> 00:20:20.520
And then, then it's like a holiday and it's not working.

00:20:20.520 --> 00:20:23.500
And now I'm dealing, like, how did I get this job?

00:20:23.500 --> 00:20:23.800
Right.

00:20:23.800 --> 00:20:24.120
Right.

00:20:24.120 --> 00:20:24.320
Right.

00:20:24.320 --> 00:20:25.300
Yeah.

00:20:25.300 --> 00:20:28.820
And the second someone says just anything, you're like, oh, I'm on edge.

00:20:28.820 --> 00:20:29.220
What do you mean?

00:20:29.220 --> 00:20:29.880
Are you sure?

00:20:30.920 --> 00:20:31.320
Exactly.

00:20:31.320 --> 00:20:32.720
I don't want it.

00:20:32.720 --> 00:20:33.880
Give it to someone else.

00:20:33.880 --> 00:20:34.800
Give it to someone else.

00:20:34.800 --> 00:20:35.260
Awesome.

00:20:35.260 --> 00:20:35.940
All right.

00:20:35.940 --> 00:20:40.560
Well, you know, maybe that's a good time to talk a little bit more in detail about Prefect.

00:20:40.560 --> 00:20:48.380
So you all have on the GitHub page, if I track it down, you've got an interesting way to discuss it.

00:20:48.380 --> 00:20:56.000
It says Prefect is the new workflow management system designed for modern infrastructure and powered by the open source Prefect core.

00:20:56.000 --> 00:20:59.860
Users organize tasks into flows and Prefect takes care of the rest.

00:21:00.300 --> 00:21:03.260
So there's a lot of stuff here that I thought might be fun to dive into.

00:21:03.260 --> 00:21:08.140
So new workflow management system, as opposed to what was there before.

00:21:08.140 --> 00:21:10.600
So maybe we could sort of take this apart a bit.

00:21:10.600 --> 00:21:11.120
Yeah.

00:21:11.120 --> 00:21:12.220
So we actually.

00:21:12.220 --> 00:21:13.800
What do you mean by new workflow?

00:21:13.800 --> 00:21:14.420
We have.

00:21:14.420 --> 00:21:16.940
I know you also have a new, new one coming as well, right?

00:21:16.940 --> 00:21:17.320
Yeah.

00:21:17.320 --> 00:21:17.540
Yeah.

00:21:17.540 --> 00:21:18.240
We have new, new.

00:21:18.240 --> 00:21:19.760
You always got to keep rebuilding.

00:21:19.760 --> 00:21:27.340
We have a great post on at least part of this that encourage people to go check out called the history of data flow automation that really will get our head of product wrote it.

00:21:27.340 --> 00:21:29.820
And it's just a great kind of tour through the history.

00:21:29.820 --> 00:21:34.520
But so for us, a lot of the different workflows, so workflow management, right?

00:21:34.520 --> 00:21:40.280
You have some set of businessy business logic tasks that are stringed together with some dependency.

00:21:40.280 --> 00:21:42.340
It could be a lot of conditionals or something like that.

00:21:42.340 --> 00:21:46.300
You want to run it usually on a schedule, but sometimes ad hoc or maybe event based.

00:21:46.860 --> 00:21:51.300
And there's a lot of different systems for managing these quote unquote workflows.

00:21:51.300 --> 00:21:51.720
Okay.

00:21:51.840 --> 00:21:52.600
Many of them.

00:21:52.600 --> 00:21:55.680
I guess one way to think about it is they're cut by context.

00:21:55.680 --> 00:21:57.040
What context are you operating in?

00:21:57.040 --> 00:22:01.280
Is this like a data context or like Zapier, for example, is a very consumer facing?

00:22:01.280 --> 00:22:03.920
And what is the user persona?

00:22:03.920 --> 00:22:04.220
Right.

00:22:04.220 --> 00:22:09.660
If you think about Zapier with all these different automations, all these triggers, and then all these actions, it's just like.

00:22:09.660 --> 00:22:10.040
Right.

00:22:10.540 --> 00:22:11.740
I mean, if that must be insane.

00:22:11.740 --> 00:22:12.500
Yeah, exactly.

00:22:12.500 --> 00:22:13.260
And that's a workflow.

00:22:13.260 --> 00:22:14.260
It's totally valid.

00:22:14.260 --> 00:22:16.780
And their user persona is a no code person.

00:22:16.780 --> 00:22:17.880
Also totally valid.

00:22:17.880 --> 00:22:26.500
And so for us, new workflow management system means kind of the next generation after a lot of the Hadoop tooling.

00:22:26.500 --> 00:22:34.220
So Hadoop, as you can kind of see in this post too, Hadoop caused an explosion of just really cool new tools.

00:22:34.220 --> 00:22:40.120
And Airflow, Luigi, Azkaban, I like this another one, maybe Uzi.

00:22:40.120 --> 00:22:45.260
A lot of these kind of came out of that error to manage these distributed jobs.

00:22:45.920 --> 00:22:51.280
And so they're kind of like, I think of them as like distributed state-based Cron.

00:22:51.280 --> 00:22:54.540
You can put them on a well-defined schedule.

00:22:54.540 --> 00:22:55.800
They manage the depend.

00:22:55.800 --> 00:22:58.400
So it's actual dependency management, which Cron does not do.

00:22:58.400 --> 00:23:03.820
And they can do it kind of across multiple computers, which is really convenient.

00:23:03.820 --> 00:23:04.080
Yeah.

00:23:04.080 --> 00:23:06.520
In a real simple way, it's like kind of the Cron.

00:23:06.520 --> 00:23:07.860
It is kind of like Cron, right?

00:23:07.860 --> 00:23:11.340
Like just look here for data and then just run this process against it.

00:23:11.340 --> 00:23:16.140
But it's so much more with the dependencies and then pass it to here.

00:23:16.140 --> 00:23:17.020
And then, yeah, right.

00:23:17.020 --> 00:23:18.820
It's just the flow of it.

00:23:18.820 --> 00:23:19.240
Exactly.

00:23:19.240 --> 00:23:21.560
And you would be insane to try that with just timing.

00:23:21.560 --> 00:23:22.160
Exactly.

00:23:22.160 --> 00:23:22.720
Exactly.

00:23:22.720 --> 00:23:27.220
And so new for, I mean, new for us can mean a lot of different things, but I'll just, I'll

00:23:27.220 --> 00:23:28.440
just say, we just talked about it.

00:23:28.500 --> 00:23:33.200
It's really taking approach of scheduling is important and alerting on failures of scheduling

00:23:33.200 --> 00:23:35.920
is important, but we're like expanding the vision there.

00:23:35.920 --> 00:23:40.980
And it's much more about this negative engineering, which includes observability, configuration management,

00:23:40.980 --> 00:23:43.120
event-driven work, not just scheduled work.

00:23:43.120 --> 00:23:47.460
Scale is really important because data scientists have a lot of the same needs as data engineers

00:23:47.460 --> 00:23:50.180
and those tools were not meant for data scientists.

00:23:50.180 --> 00:23:50.540
Right.

00:23:50.540 --> 00:23:50.820
Yeah.

00:23:50.820 --> 00:23:51.160
Yeah.

00:23:51.160 --> 00:23:55.860
You were talking, I heard you speak about wanting to run a bunch of experiments, like hundreds

00:23:55.860 --> 00:23:58.260
of thousands of experiments as a data scientist.

00:23:58.260 --> 00:24:05.280
And some of the other tools would talk about running operations in tens per minute or tens,

00:24:05.280 --> 00:24:06.420
something like that.

00:24:06.420 --> 00:24:09.260
And you're like, I need something that does it in tens or hundreds per second.

00:24:09.260 --> 00:24:09.720
Yeah.

00:24:09.720 --> 00:24:15.080
I mean, anything that, you know, allows you to just explore a search space of hyper parameters

00:24:15.080 --> 00:24:20.100
and do so in a way that is easy to quickly find, you know, some subset of those parameters

00:24:20.100 --> 00:24:21.800
and see whether they succeeded or failed.

00:24:21.800 --> 00:24:23.540
You can define that criteria.

00:24:23.540 --> 00:24:28.080
You can raise an exception, for example, if like some output just violates some assumption

00:24:28.080 --> 00:24:28.620
you have.

00:24:28.620 --> 00:24:31.380
And then that way it shows up as red is like, you're not going to look at that.

00:24:31.380 --> 00:24:36.220
And managing an interface to the infrastructure is another big part of this.

00:24:36.220 --> 00:24:40.180
So I guess maybe I'm jumping ahead, but the next part is design for modern infrastructure.

00:24:40.180 --> 00:24:43.320
And I think modern infrastructure can mean a lot of different things.

00:24:44.200 --> 00:24:50.240
For us, it means first off that there's a diverse array of infrastructure people use.

00:24:50.240 --> 00:24:53.000
And so creating a system that can plug and play with a lot of them.

00:24:53.000 --> 00:24:57.920
So we support, for example, some of the more popular ways of deploying prefig flows are in

00:24:57.920 --> 00:25:00.000
Kubernetes and Fargate.

00:25:00.000 --> 00:25:02.040
So kind of like a serverless style model.

00:25:02.720 --> 00:25:03.960
So you can do it on your local machine.

00:25:03.960 --> 00:25:08.940
And so just having that kind of unified interface to interact with all these things is one aspect of modern.

00:25:08.940 --> 00:25:14.520
Another is that local development to cloud development story.

00:25:14.520 --> 00:25:15.640
That's really important, right?

00:25:15.680 --> 00:25:23.860
You want to make sure that these are as close as possible to each other so that you can debug things locally and things like that.

00:25:23.860 --> 00:25:26.820
And so that's another aspect as we try really hard.

00:25:26.820 --> 00:25:34.720
And 2.0 gets this way better than 1.0 for the record of mirroring what code is exactly running in prod versus your local.

00:25:34.720 --> 00:25:40.220
Something that always makes me nervous when I hear people talking about, oh, this is cloud native.

00:25:40.220 --> 00:25:44.220
And you can just, there's like 50 different services in this particular cloud.

00:25:44.220 --> 00:25:46.800
And so why don't you just leverage like nine or 10 of them?

00:25:46.800 --> 00:25:51.420
And I just always think, you know, well, what is the development going to feel like for that?

00:25:51.420 --> 00:25:58.160
You know, how, if I'm on a spotty internet connection or something like that, is it just inaccessible to work on?

00:25:58.160 --> 00:26:01.580
Do I have to just completely sort of live in this cloud world?

00:26:01.580 --> 00:26:07.920
And it sounds like there's a more sort of local version that you can try and work with as well here.

00:26:07.920 --> 00:26:08.160
Yeah.

00:26:08.160 --> 00:26:15.620
And one of the things that we achieved with 2.0 is we refactored kind of where orchestration, different aspects of orchestration takes place.

00:26:15.620 --> 00:26:21.680
And so all of the true orchestration logic that we want to own runs behind an API.

00:26:21.680 --> 00:26:27.000
And the reason that I'm saying, I'm like emphasizing that is in 1.0, that's not 100% true.

00:26:27.100 --> 00:26:31.440
And so when you run a workflow locally, it's talking to an API.

00:26:31.440 --> 00:26:33.760
Maybe it's your self-hosted open source API.

00:26:33.760 --> 00:26:36.020
So it's maybe responding slightly differently.

00:26:36.020 --> 00:26:44.060
But the code path running on your machine and its requirements and everything else is exactly the same as what's going to run in production.

00:26:44.060 --> 00:26:45.360
It just might talk to a different URL.

00:26:45.360 --> 00:26:45.780
Sure.

00:26:45.780 --> 00:26:46.940
Let me stick on this.

00:26:46.940 --> 00:26:48.400
We were halfway through your sentence.

00:26:48.580 --> 00:26:51.120
I do want to talk more about like the cloud and stuff.

00:26:51.120 --> 00:26:56.720
So powered by the open source preflect prefect core workflow engine.

00:26:56.720 --> 00:26:58.020
Tell us about that.

00:26:58.240 --> 00:27:03.540
So since day one, always wanted to put as much open source as is reasonable.

00:27:03.760 --> 00:27:18.240
And one of kind of the ways that we think about what we put in the open source, and then I'll tell you what kind of this workflow engine is, are like, what are the things that we are maximally leveraged to support extensions of and, you know, new configurations of?

00:27:18.240 --> 00:27:21.620
And our core workflow engine is definitely one of those things, right?

00:27:21.620 --> 00:27:22.620
We're the experts in it.

00:27:22.620 --> 00:27:31.260
And that engine is the thing that manages, for example, that a downstream dependency can't run if it's upstream failed or maybe just hasn't completed yet.

00:27:31.260 --> 00:27:34.660
The caching logic is a part of that workflow engine.

00:27:34.660 --> 00:27:39.460
The triggering logic for the workflow, the scheduling of the workflow, all of that stuff is open source.

00:27:39.460 --> 00:27:44.420
That's the UI visibility sort of tracking bit as well, right?

00:27:44.420 --> 00:27:45.200
A hundred percent.

00:27:45.200 --> 00:27:45.460
Yep.

00:27:45.460 --> 00:27:46.440
That is all open source.

00:27:46.440 --> 00:27:47.840
And we build it as a part.

00:27:47.840 --> 00:27:55.920
So we actually have a dedicated front-end team and we build the UI and package it up in the packages of pre-built website.

00:27:55.920 --> 00:27:56.240
Yeah.

00:27:56.240 --> 00:27:57.760
I'm not sure of where I would.

00:27:57.760 --> 00:27:58.440
Oh, here we go.

00:27:58.440 --> 00:28:00.620
I found a cool little UI picture.

00:28:00.620 --> 00:28:01.020
Oh, there we go.

00:28:01.020 --> 00:28:02.640
That's, yeah, that's the 2.0 one.

00:28:02.640 --> 00:28:02.820
Yeah.

00:28:02.820 --> 00:28:03.160
Yeah.

00:28:03.160 --> 00:28:13.180
So, I mean, this UI to see what's working, what's not working, how often has it succeeded, you know, what's succeeded, what's failing, what jobs are unhealthy, for example.

00:28:13.180 --> 00:28:15.040
Like, that's all negative engineering, right?

00:28:15.380 --> 00:28:19.140
Your job wasn't to start out to build this observability web front-end.

00:28:19.140 --> 00:28:25.260
Your job was to get the data in and then get it into the database and start doing it for analysis or whatever.

00:28:25.260 --> 00:28:25.720
Exactly.

00:28:25.720 --> 00:28:26.400
Predictions.

00:28:26.400 --> 00:28:30.060
But here you are in Vue.js going after it, right?

00:28:30.060 --> 00:28:30.780
Or whatever it is.

00:28:30.780 --> 00:28:31.480
No, it is Vue.

00:28:31.480 --> 00:28:32.180
Good call.

00:28:32.180 --> 00:28:32.640
Good call.

00:28:32.640 --> 00:28:32.860
Yeah.

00:28:32.860 --> 00:28:33.360
Right on.

00:28:33.360 --> 00:28:39.660
And one of the ways I think about this dashboard view is it gives you this landing page to, you have some mental model of your expectations.

00:28:39.880 --> 00:28:42.680
You can check quickly if they are violated here.

00:28:42.680 --> 00:28:44.800
And then if so, dig in further, click around.

00:28:44.800 --> 00:28:49.800
And if not, you know, we are more than happy when people exit out of the UI and are like, we're moving on.

00:28:49.800 --> 00:28:50.380
It's like, perfect.

00:28:50.380 --> 00:28:51.220
We did our job then.

00:28:51.220 --> 00:28:52.160
Yeah, that's good.

00:28:52.160 --> 00:28:53.480
But yeah, that's pretty neat.

00:28:53.480 --> 00:28:55.560
So that's part of the core engine.

00:28:55.560 --> 00:28:56.000
Yep.

00:28:56.000 --> 00:28:56.740
A hundred percent.

00:28:56.880 --> 00:28:59.980
And so things like auth, for example, are not part of that.

00:28:59.980 --> 00:29:03.720
So in that case, like a lot of ways auth can get extended.

00:29:03.720 --> 00:29:05.920
There's a lot of different ways that we might implement it.

00:29:05.920 --> 00:29:07.500
And that's not exactly right.

00:29:07.500 --> 00:29:11.580
Our competitive advantage, supporting different ways that you might deploy auth securely.

00:29:11.580 --> 00:29:13.460
And so it's like, nope, that's our platform feature.

00:29:13.460 --> 00:29:17.720
We can do it in the way we know best and can do it securely.

00:29:17.720 --> 00:29:18.120
Sure.

00:29:18.120 --> 00:29:26.240
And so it's worth pointing out, I suppose, that the way it works is there's the open source engine and then there's the Python API.

00:29:26.240 --> 00:29:30.920
And then you talked about different ways to run it and to host it, right?

00:29:30.920 --> 00:29:34.100
So one way to host it is to just use your cloud, right?

00:29:34.100 --> 00:29:39.620
You've got the Preflect cloud where it just runs with all these things there.

00:29:39.620 --> 00:29:40.960
And then the others, I could run it.

00:29:40.960 --> 00:29:45.520
I could self-host that core workflow engine or just run it on my laptop or whatever.

00:29:45.520 --> 00:29:49.760
So it's a little bit more complicated than that, actually, in an interesting way.

00:29:49.760 --> 00:29:49.780
All right.

00:29:49.780 --> 00:29:50.020
All right.

00:29:50.020 --> 00:29:50.700
Tell us about it.

00:29:50.700 --> 00:29:54.380
So Jeremiah and I both come from finance world.

00:29:54.380 --> 00:29:58.900
And so a lot of our first kind of early design partners and advisors come from that world.

00:29:58.900 --> 00:30:07.660
And one of the challenges one of our advisors gave us was very genuinely, I don't want to learn your tech stack so that I can host it within my tech stack.

00:30:07.660 --> 00:30:11.960
And there's no way I'm ever going to give you my code or data because it's highly proprietary.

00:30:11.960 --> 00:30:13.880
That's your problem.

00:30:13.880 --> 00:30:16.240
And we're like, okay, well, that sounds impossible, right?

00:30:16.240 --> 00:30:17.080
But we thought about it.

00:30:17.080 --> 00:30:23.620
I think companies are already so freaked out about losing the data without even meaningfully giving it to someone else, right?

00:30:23.620 --> 00:30:26.240
They're already like, well, we might lose this.

00:30:26.240 --> 00:30:27.640
We might, you know, might be ransomware.

00:30:27.640 --> 00:30:28.740
There might be other things, right?

00:30:28.740 --> 00:30:33.820
And so the idea of just handing it over does seem probably pretty far out there for a lot of them.

00:30:33.820 --> 00:30:34.200
Exactly.

00:30:34.480 --> 00:30:43.460
And so what we designed after a long time, we really like thought about it, but we did this back in 2018, maybe beginning of 2018.

00:30:43.460 --> 00:30:47.520
We came up with a model where orchestration takes place over an API.

00:30:48.020 --> 00:30:52.120
And if you really think about it, think of other orchestrators, Cron, Kubernetes is a container orchestrator.

00:30:52.120 --> 00:30:53.200
They operate on metadata.

00:30:53.200 --> 00:30:58.660
They operate on container registry locations and specs for how you expect it to run.

00:30:58.660 --> 00:31:10.860
And once we had that insight, we designed the system so that the cloud hosted API that we run operates purely in metadata, result locations, flow names, flow versions, things like that.

00:31:10.860 --> 00:31:14.780
And then you run an open source agent anywhere that you want.

00:31:14.780 --> 00:31:17.320
And it operates on a pure outbound pull it model.

00:31:17.560 --> 00:31:24.440
So all of our features are based on the agent polling and then your workflow also potentially doing some communication.

00:31:24.440 --> 00:31:28.820
And because of that, you know, there's still this outbound connection you have to think about.

00:31:28.820 --> 00:31:30.860
You still have to trust us with some of your parameters.

00:31:30.860 --> 00:31:35.240
And, you know, there's definitely still some security surface area that we have to think about.

00:31:35.240 --> 00:31:40.120
But we do not post your data and we do not have access to your execution.

00:31:40.120 --> 00:31:43.540
And that unlocked this problem for us.

00:31:43.540 --> 00:31:50.520
And so as long as we have enough agents that can be deployed in lots of different places, then, you know, we can deliver a lot of value.

00:31:50.520 --> 00:31:51.960
Yeah, that's pretty excellent.

00:31:51.960 --> 00:31:58.540
So if you want to host it in AWS or Kubernetes or Linode or wherever, you just, that's up to you, huh?

00:31:58.540 --> 00:31:59.000
Exactly.

00:31:59.000 --> 00:32:00.300
100% up to you.

00:32:00.300 --> 00:32:03.860
Is there a way where I can do it somewhat offline?

00:32:03.860 --> 00:32:10.180
Like, for example, with the open source core engine, does that still go back to you guys or is that sort of local?

00:32:10.180 --> 00:32:11.220
No, that's totally local.

00:32:11.220 --> 00:32:13.260
And it's designed with the same hybrid approach.

00:32:13.340 --> 00:32:19.880
So you could have, you know, your platform team, maybe your DevOps team hosting the API for you and the database behind it.

00:32:19.880 --> 00:32:22.640
And then you as the data team can manage your agents.

00:32:22.640 --> 00:32:26.620
And just as long as you have access to the API, you can set it up the exact same way internally if you want.

00:32:26.620 --> 00:32:29.080
And we've seen places do that for sure.

00:32:29.080 --> 00:32:29.360
Sure.

00:32:32.240 --> 00:32:37.160
If you're a regular listener of the podcast, you've surely heard about Talk Python's online courses.

00:32:37.300 --> 00:32:39.240
But have you had a chance to try them out?

00:32:39.240 --> 00:32:42.480
No matter the level you're looking for, we have a course for you.

00:32:42.480 --> 00:32:48.840
Our Python for Absolute Beginners is like an introduction to Python, plus that first year computer science course that you never took.

00:32:48.840 --> 00:32:55.700
Our data-driven web app courses build a full PyPI.org clone along with you right on the screen.

00:32:55.940 --> 00:32:58.640
And we even have a few courses to dip your toe in with.

00:32:58.640 --> 00:33:03.980
See what we have to offer at training.talkpython.fm or just click the link in your podcast player.

00:33:07.420 --> 00:33:11.040
Let's maybe talk through a quick example of using it.

00:33:11.040 --> 00:33:11.620
Oh, hold on.

00:33:11.620 --> 00:33:17.160
The last part of that sentence is users organize tasks into flows.

00:33:17.160 --> 00:33:23.640
And so let's look at a quick example maybe of the code that you might do here.

00:33:23.640 --> 00:33:24.260
Let's see.

00:33:24.260 --> 00:33:25.060
Sure, here.

00:33:25.060 --> 00:33:25.860
This probably isn't.

00:33:25.860 --> 00:33:30.240
It's always tricky to talk about code on audio formats.

00:33:30.240 --> 00:33:35.160
But just give us a sense of what does it look like to write code for Prefect.

00:33:35.160 --> 00:33:35.380
Yeah.

00:33:35.500 --> 00:33:37.040
So one of our design principles, right?

00:33:37.040 --> 00:33:39.540
We talked a little while ago about this negative engineering problem.

00:33:39.540 --> 00:33:40.520
It kind of emerges.

00:33:40.520 --> 00:33:44.240
And eventually you're doing all those activities that you didn't care about.

00:33:44.240 --> 00:33:48.120
And kind of in an interesting way, we try to mirror that with the way Prefect gets adopted.

00:33:48.120 --> 00:33:50.720
So I love to call it incremental adoption.

00:33:50.720 --> 00:33:57.540
I want the complexity of what you're trying to achieve and the amount of code you have to write to scale.

00:33:57.540 --> 00:34:00.260
I mean, ideally like sublinearly or something, but, you know, scaled together.

00:34:00.260 --> 00:34:04.400
And so an example you have here, our 2.0 takes this way further.

00:34:04.580 --> 00:34:06.360
But we operate on this decorator model.

00:34:06.360 --> 00:34:07.400
So just really simple.

00:34:07.400 --> 00:34:08.480
You have Python functions.

00:34:08.480 --> 00:34:09.420
You already wrote them.

00:34:09.420 --> 00:34:11.260
You presumably already even have this script.

00:34:11.260 --> 00:34:15.100
You just want to sprinkle in some Prefect so that you get some observability into it.

00:34:15.100 --> 00:34:19.340
And then if you want to start to do more and more things, you might have to write more and more code.

00:34:19.460 --> 00:34:23.220
But it's, you know, appropriate for the activity that you're trying to achieve.

00:34:23.220 --> 00:34:26.200
And so, yeah, we try to be really simple.

00:34:26.200 --> 00:34:33.480
We like it when people kind of get the feeling that this is like a toy kind of package that you play around that just has these heavy duty impacts.

00:34:34.160 --> 00:34:37.120
So, yeah, tasks are the smallest unit of work that we can look at.

00:34:37.120 --> 00:34:39.360
Tasks can do things like retry.

00:34:39.360 --> 00:34:40.140
They can cache.

00:34:40.140 --> 00:34:41.940
They have well-defined inputs and outputs.

00:34:41.940 --> 00:34:46.760
Flows are containers for managing dependencies of tasks.

00:34:46.760 --> 00:34:51.540
They also have well-defined inputs and outputs, also have their own states.

00:34:51.940 --> 00:34:56.820
But flows are the things that can be scheduled and triggered via API.

00:34:56.820 --> 00:35:02.740
And tasks are kind of just the smaller, more granular units of orchestration within those workflows.

00:35:02.740 --> 00:35:06.060
And so the way that this looks is it looks just like a function.

00:35:06.060 --> 00:35:10.040
And you kind of just call it with the arguments or whatever.

00:35:10.040 --> 00:35:10.780
Yep.

00:35:10.780 --> 00:35:14.120
And then you put a task decorator on there, which is pretty interesting.

00:35:14.120 --> 00:35:16.400
And that's where the retry thing can be.

00:35:16.400 --> 00:35:16.780
Exactly.

00:35:16.780 --> 00:35:20.460
Then you also have a context manager, which I think is a nice pattern.

00:35:20.680 --> 00:35:22.660
So you have a context manager to create the flow.

00:35:22.660 --> 00:35:26.880
And then you basically simulate doing all the work with an abstract parameter.

00:35:26.880 --> 00:35:28.940
And then you kind of set it off, right?

00:35:28.940 --> 00:35:31.220
So that is true in 1.0.

00:35:31.220 --> 00:35:33.780
However, what we found.

00:35:33.780 --> 00:35:34.880
Something new is coming.

00:35:34.880 --> 00:35:35.780
Yeah, this is important.

00:35:35.780 --> 00:35:39.660
That context manager, all that code runs like you called out.

00:35:39.660 --> 00:35:42.500
And so it compiles this DAG.

00:35:42.500 --> 00:35:43.280
That's everyone.

00:35:43.280 --> 00:35:44.460
Directed acyclic graph.

00:35:44.460 --> 00:35:48.480
What we realized in talking to a lot of our users on 1.0

00:35:48.480 --> 00:35:51.780
is that confronting the DAG.

00:35:51.780 --> 00:35:55.060
Because sometimes people would write their own Python code

00:35:55.060 --> 00:35:56.780
that wasn't prefect in that context manager.

00:35:56.780 --> 00:35:57.520
And it would actually run.

00:35:57.520 --> 00:35:58.620
It wouldn't be deferred.

00:35:58.620 --> 00:35:59.760
And they would get confused.

00:35:59.760 --> 00:36:01.260
They're like, why do I have to care about this?

00:36:01.260 --> 00:36:07.400
And we started to realize that this DAG model really came most likely

00:36:07.400 --> 00:36:10.040
out of the constraints of YAML flat file formats.

00:36:10.040 --> 00:36:12.840
And they were mirrored in all the different tools

00:36:12.840 --> 00:36:14.180
that were built on top of that.

00:36:14.180 --> 00:36:16.120
And then all of a sudden, everyone's talking about DAGs.

00:36:16.120 --> 00:36:18.380
Data engineer, when they're writing a script,

00:36:18.380 --> 00:36:20.200
to move data around, should focus on the script.

00:36:20.200 --> 00:36:22.760
They shouldn't focus on this abstract program concept of

00:36:22.760 --> 00:36:24.260
can't do control flow, essentially,

00:36:24.260 --> 00:36:26.460
without really thinking deeply about it.

00:36:26.460 --> 00:36:30.100
And so in 2.0, we remove this context manager.

00:36:30.100 --> 00:36:33.200
Flows are also now specified via decorator.

00:36:33.200 --> 00:36:36.140
So the deferred computation is just function definition.

00:36:36.140 --> 00:36:39.740
And now we will discover the tasks at runtime.

00:36:39.740 --> 00:36:42.760
And you can implement native Python logic in flows.

00:36:42.760 --> 00:36:44.360
And that's totally fine by us.

00:36:44.760 --> 00:36:49.140
So it just unlocks the expressiveness of what you can write in Prefect really natively.

00:36:49.140 --> 00:36:49.840
natively.

00:36:49.840 --> 00:36:50.460
That's awesome.

00:36:50.460 --> 00:36:54.560
So you can have loops or if statements or whatever you want to write.

00:36:54.560 --> 00:36:54.960
Oh, yeah.

00:36:54.960 --> 00:36:56.520
While statements even.

00:36:56.520 --> 00:36:56.840
Yeah.

00:36:56.840 --> 00:36:59.400
You can have flows that change structure from run to run.

00:36:59.400 --> 00:37:00.180
All of it.

00:37:00.180 --> 00:37:00.440
Okay.

00:37:00.440 --> 00:37:04.680
So the thing that strikes me here is you kind of write regular Python code.

00:37:04.680 --> 00:37:06.160
And you put a decorator or two on it.

00:37:06.160 --> 00:37:09.220
And it just works in a different but similar way.

00:37:09.420 --> 00:37:13.780
That's a little bit of that negative engineering influence as well.

00:37:13.780 --> 00:37:19.500
It's like, how do I take normal stuff without too much work and make it more general for pipelines?

00:37:19.500 --> 00:37:20.020
Exactly.

00:37:20.020 --> 00:37:23.120
We call it workflows as code instead of code as workflows.

00:37:23.120 --> 00:37:23.940
I'm sorry.

00:37:23.940 --> 00:37:25.540
Code as workflows.

00:37:25.540 --> 00:37:27.540
Because you have the code.

00:37:27.540 --> 00:37:28.540
It is the workflow.

00:37:28.540 --> 00:37:30.960
And now you just want us to care about it.

00:37:31.400 --> 00:37:34.300
And so we should be minimally invasive when we do that.

00:37:34.300 --> 00:37:38.320
Because the second you have to refactor your code significantly, you're back in negative engineering.

00:37:38.320 --> 00:37:41.140
You have to think about the consequences of the refactor and everything else.

00:37:41.140 --> 00:37:43.240
And we want to avoid that as much as humanly possible.

00:37:43.240 --> 00:37:44.300
You should have to do a little bit.

00:37:44.300 --> 00:37:44.640
Yeah.

00:37:44.640 --> 00:37:49.220
A couple of things that I saw that stood out to me checking out your API here that was interesting.

00:37:49.220 --> 00:37:54.600
One was I can have async methods and async execution of these things.

00:37:54.600 --> 00:37:58.660
So async and await style, async def methods and await operations.

00:37:58.660 --> 00:38:00.140
You want to talk about that support?

00:38:00.140 --> 00:38:00.480
Yeah.

00:38:00.600 --> 00:38:06.060
So if you actually go to orion-docs.prefect.io, that's where a lot of our 2.0 docs are currently

00:38:06.060 --> 00:38:08.100
located while we're still in beta.

00:38:08.100 --> 00:38:09.100
But they will, of course.

00:38:09.100 --> 00:38:10.460
And then hyphen docs.

00:38:10.460 --> 00:38:11.080
Yeah.

00:38:11.080 --> 00:38:12.080
So this async works.

00:38:12.080 --> 00:38:12.840
That's probably where I saw it.

00:38:12.840 --> 00:38:13.060
Yeah.

00:38:13.060 --> 00:38:13.640
Yeah.

00:38:13.640 --> 00:38:14.140
Yeah.

00:38:14.140 --> 00:38:14.280
Cool.

00:38:14.280 --> 00:38:19.880
Big shout out to our prefect engineer, Michael Adkins, who really took a lot of time to dig

00:38:19.880 --> 00:38:21.260
into the guts of async.

00:38:21.260 --> 00:38:24.600
And he set it up so that you can do crazy things.

00:38:24.600 --> 00:38:29.380
You can have synchronously defined flows with asynchronous tasks.

00:38:29.700 --> 00:38:34.080
And our engine, the executor, will manage it all for you just to make sure that they're

00:38:34.080 --> 00:38:35.720
running in the right event loops and things like that.

00:38:35.720 --> 00:38:36.320
It's really cool.

00:38:36.320 --> 00:38:40.660
We've got to create a loop and just run this in a way because internally it's synchronous

00:38:40.660 --> 00:38:41.600
or something like that, right?

00:38:41.600 --> 00:38:42.080
Exactly.

00:38:42.080 --> 00:38:42.580
Exactly.

00:38:42.580 --> 00:38:44.320
And so it's really slick.

00:38:44.320 --> 00:38:48.680
And it gives at least users who know how to write async code, kind of this native feeling

00:38:48.680 --> 00:38:49.460
of parallelism.

00:38:49.600 --> 00:38:53.100
We all know it's not quite parallelism, but it gives you at least that feeling, especially

00:38:53.100 --> 00:38:54.680
when you're doing a modern data stack.

00:38:54.680 --> 00:38:58.180
If it's all API driven, you've got a lot of network IOs.

00:38:58.180 --> 00:38:59.620
It's talking to databases.

00:38:59.620 --> 00:39:01.040
It's talking to file IO.

00:39:01.040 --> 00:39:02.740
It's talking to external APIs.

00:39:02.740 --> 00:39:04.460
Like all of those are perfectly scalable.

00:39:04.460 --> 00:39:05.080
Exactly.

00:39:05.080 --> 00:39:05.900
Exactly.

00:39:06.160 --> 00:39:06.320
Yeah.

00:39:06.320 --> 00:39:06.740
Yeah.

00:39:06.740 --> 00:39:06.980
Cool.

00:39:06.980 --> 00:39:12.800
So you can have at task and say, I'm just going to do an async def some function.

00:39:12.800 --> 00:39:19.500
The example you have in your docs, your Orion docs is using HTTPX async clients to go talk

00:39:19.500 --> 00:39:20.640
to the GitHub stuff.

00:39:20.640 --> 00:39:21.340
Oh, yeah.

00:39:21.340 --> 00:39:21.980
Oh, yeah.

00:39:21.980 --> 00:39:24.680
And here you also have, here's your at flow decorator, right?

00:39:24.680 --> 00:39:25.560
For this thing.

00:39:25.760 --> 00:39:29.600
And another thing too, that we did that I'm really proud of that I've already started

00:39:29.600 --> 00:39:35.580
to see kind of be one of the ways people onboard into Prefect is previously with the API, you

00:39:35.580 --> 00:39:40.700
had to pre-register your flow and tell the API this thing exists, you know, get ready for

00:39:40.700 --> 00:39:40.880
it.

00:39:40.880 --> 00:39:45.900
And then runs had to get created server side before they could run client side.

00:39:45.900 --> 00:39:51.140
With the new model, we set everything up and all of this was this like deep study in bookkeeping.

00:39:51.140 --> 00:39:55.660
Like how can we create stable indices or stable identifiers for things that, you know, we can

00:39:55.660 --> 00:39:57.420
identify across processes and runs.

00:39:57.420 --> 00:40:00.560
And so in the new model, you can take this flow.

00:40:00.560 --> 00:40:05.820
And if you are just pointing to our cloud API, you can call it as a function interactively,

00:40:05.820 --> 00:40:09.560
and it will still communicate with cloud API just as opposed to deployed workflow.

00:40:09.560 --> 00:40:14.480
And so what that means though, sorry, just going back to the incremental adoption story is you

00:40:14.480 --> 00:40:22.720
can use cron and then you can just put one line of code on your main function at flow, keep

00:40:22.720 --> 00:40:24.240
cron running with that Python script.

00:40:24.240 --> 00:40:28.780
And you've immediately gotten a really pretty kind of record of all of the jobs that cron's

00:40:28.780 --> 00:40:29.020
running.

00:40:29.020 --> 00:40:32.000
And if it fails, you'll get the failure alerts and everything else.

00:40:32.000 --> 00:40:34.460
And cron's still your scheduler, which is totally fine by us.

00:40:34.460 --> 00:40:34.800
Sure.

00:40:34.800 --> 00:40:35.620
Oh, that's interesting.

00:40:35.620 --> 00:40:36.140
Yeah.

00:40:36.140 --> 00:40:39.720
And then, you know, at some point you want to start to see into the future and that's when

00:40:39.720 --> 00:40:41.300
you have to use our scheduler instead of cron.

00:40:41.300 --> 00:40:41.960
But yeah.

00:40:41.960 --> 00:40:43.880
But once again, incremental adoption.

00:40:43.880 --> 00:40:44.180
Yeah.

00:40:44.260 --> 00:40:45.520
The API here is pretty wild.

00:40:45.520 --> 00:40:52.460
You're exploding a list comprehension of calls to the task to an ASIC IO gather.

00:40:52.460 --> 00:40:55.660
That's a pretty intense line right there, but I like it.

00:40:55.660 --> 00:40:59.240
It's not intense in the way that it's like, oh my gosh, what is this insanity?

00:40:59.240 --> 00:41:00.200
But no, yeah.

00:41:00.200 --> 00:41:01.140
It's a lot going on there.

00:41:01.140 --> 00:41:01.380
Yeah.

00:41:01.380 --> 00:41:01.800
Yeah.

00:41:01.800 --> 00:41:01.900
Yeah.

00:41:01.900 --> 00:41:04.760
You know, there's the joke t-shirt maybe you've seen.

00:41:04.760 --> 00:41:06.540
It says, I learned Python.

00:41:06.540 --> 00:41:07.420
It was a great weekend.

00:41:07.420 --> 00:41:07.960
Right?

00:41:08.040 --> 00:41:12.860
Like, that's true for like variables and loops and functions, but like, then you see

00:41:12.860 --> 00:41:13.420
stuff like it.

00:41:13.420 --> 00:41:13.980
It's like, oh wait.

00:41:13.980 --> 00:41:14.200
Yeah.

00:41:14.200 --> 00:41:15.040
There's more patterns here.

00:41:15.040 --> 00:41:15.700
Maybe it's longer than a week.

00:41:15.700 --> 00:41:17.180
It might be more than a weekend.

00:41:17.180 --> 00:41:17.940
Give me a moment.

00:41:17.940 --> 00:41:18.200
Yeah.

00:41:18.200 --> 00:41:19.460
No, this is really cool.

00:41:19.460 --> 00:41:20.880
I really like this new API.

00:41:20.880 --> 00:41:22.880
So when's 2.0 a thing?

00:41:22.880 --> 00:41:26.260
When is it released in the main way of working?

00:41:26.260 --> 00:41:30.660
Our planned release date, or I shouldn't say date, but just like target, you know, you can

00:41:30.660 --> 00:41:33.860
expect it's one of the weeks or something around is July 1st.

00:41:33.860 --> 00:41:35.700
But we are still releasing.

00:41:35.700 --> 00:41:40.320
So anyone out there is intrigued by this, especially if you're completely new to Prefect,

00:41:40.320 --> 00:41:44.040
I definitely encourage you to just start with one of our beta 2.0 releases.

00:41:44.040 --> 00:41:49.200
They're way slicker, way easier to get your head around, more interesting.

00:41:49.200 --> 00:41:52.000
And there's still like everything, you know, working.

00:41:52.000 --> 00:41:56.300
We just, there's some critical paths that we haven't fully released yet that we want to

00:41:56.300 --> 00:41:59.200
make sure are there and tested heavily before we go into GA.

00:41:59.200 --> 00:41:59.540
Right.

00:41:59.540 --> 00:42:02.900
But if what's there works for people that they could, they could use it.

00:42:02.900 --> 00:42:03.180
Oh yeah.

00:42:03.180 --> 00:42:04.600
Should definitely work.

00:42:04.600 --> 00:42:06.460
And if you run into weird bugs like that, let's not.

00:42:06.460 --> 00:42:06.700
Yeah.

00:42:06.700 --> 00:42:14.020
How does it plug into the cloud visibility layer and all that is if I run some one and want

00:42:14.020 --> 00:42:16.020
some two, is it going to go crazy or?

00:42:16.020 --> 00:42:16.460
No.

00:42:16.460 --> 00:42:19.460
So they both will be configured to talk to the right API.

00:42:19.460 --> 00:42:22.740
And so you won't be able to see them in the same place.

00:42:22.740 --> 00:42:28.240
So that's unfortunate if you will, but you can definitely run them side by side.

00:42:28.460 --> 00:42:30.080
I mean, the environments aren't compatible.

00:42:30.080 --> 00:42:32.980
So you'll have to have different Python environments that you're running them in.

00:42:32.980 --> 00:42:33.500
But yeah.

00:42:33.500 --> 00:42:34.740
But otherwise, yeah.

00:42:34.740 --> 00:42:37.020
I mean, I think some of our 1.0 clients, for example.

00:42:37.020 --> 00:42:38.020
Because what?

00:42:38.020 --> 00:42:43.680
Pip install prefix is equal, equal one, something or equal, equal two or something along those

00:42:43.680 --> 00:42:43.880
lines.

00:42:43.880 --> 00:42:44.060
Right.

00:42:44.060 --> 00:42:45.300
You'd like need different libraries.

00:42:45.300 --> 00:42:45.700
Yeah.

00:42:45.700 --> 00:42:50.140
So if you just did pip install prefix right now, you'd get a official 1.0 release.

00:42:50.140 --> 00:42:51.080
I don't remember the number.

00:42:51.080 --> 00:42:55.100
So you'll have to make sure that you allow for pre-release in your pip command.

00:42:55.100 --> 00:43:01.000
So either, I think if you just specify equals equals 2.0, I think we're at like B3 right

00:43:01.000 --> 00:43:01.300
now.

00:43:01.300 --> 00:43:02.840
Then you'll get it.

00:43:02.840 --> 00:43:06.520
But yeah, you have to explicitly call it out since it's not, since it's still in beta.

00:43:06.520 --> 00:43:06.900
Sure.

00:43:06.900 --> 00:43:09.800
I always like going to pipi.org.

00:43:09.800 --> 00:43:12.300
It's just like, it's 375,000.

00:43:12.300 --> 00:43:12.620
I know.

00:43:12.620 --> 00:43:13.560
It's impressive.

00:43:13.560 --> 00:43:15.060
Yeah.

00:43:15.060 --> 00:43:17.160
So 1.2.1 is the current one.

00:43:17.160 --> 00:43:20.740
But in here, yeah, you're 2.0, beta 3.

00:43:20.740 --> 00:43:23.620
And we are planning to cut another release later this week.

00:43:23.620 --> 00:43:24.980
So you can expect B4.

00:43:24.980 --> 00:43:30.480
Probably it'll be B4 by the time people get around to hearing this and shipping and so on.

00:43:30.480 --> 00:43:30.800
Yeah.

00:43:30.800 --> 00:43:30.900
Yeah.

00:43:31.680 --> 00:43:32.920
But still, really cool.

00:43:32.920 --> 00:43:36.720
So basically, your advice to people who are like, hey, this sounds interesting.

00:43:36.720 --> 00:43:37.480
I want to check it out.

00:43:37.480 --> 00:43:38.440
Like, just start with two.

00:43:38.440 --> 00:43:38.720
Yeah.

00:43:38.720 --> 00:43:39.640
I'd say just start with two.

00:43:39.640 --> 00:43:45.240
It's working, easier to grok, and I think is more powerful and more flexible for different

00:43:45.240 --> 00:43:47.480
use cases, especially if you're thinking outside of data.

00:43:47.480 --> 00:43:47.760
Sure.

00:43:47.760 --> 00:43:53.020
So when I hear people talk about data engineering, you know, if you go into that world, you see

00:43:53.020 --> 00:43:58.180
all these amazing tools that people have built that look like, wow, these are really

00:43:58.180 --> 00:43:58.540
amazing.

00:43:58.540 --> 00:44:02.560
And to me, they feel quite similar, like Prefect and Friends.

00:44:02.560 --> 00:44:05.700
It feels real similar to the web frameworks, right?

00:44:05.700 --> 00:44:07.320
Like Flask or Django.

00:44:07.320 --> 00:44:08.060
And you're like, okay.

00:44:08.060 --> 00:44:12.720
So for example, what I mean by that is in Flask, all I have to do is I have to say, here's a

00:44:12.720 --> 00:44:13.960
function that goes to this URL.

00:44:13.960 --> 00:44:17.920
And I just write the code and return a dictionary or something like that.

00:44:17.920 --> 00:44:23.720
I don't have to think about headers, cookies, connect, you know, like stay connected header,

00:44:23.720 --> 00:44:25.460
HTTP2 traffic.

00:44:25.460 --> 00:44:29.720
Like I just do the little bit and it just, it puts it all together for me.

00:44:29.720 --> 00:44:34.220
And in the data engineering world, there's a bunch of stuff like that, that I feel many

00:44:34.220 --> 00:44:36.600
people are wholly unaware probably.

00:44:36.600 --> 00:44:36.940
Yeah.

00:44:36.940 --> 00:44:41.340
There is an explosion of tooling in data engineering right now.

00:44:41.340 --> 00:44:44.300
And also in kind of the adjacent analytics world.

00:44:44.300 --> 00:44:48.040
This kind of goes back to what I was saying about how we kind of crystallize this concept

00:44:48.040 --> 00:44:48.960
of negative engineering.

00:44:48.960 --> 00:44:50.720
And it's just important.

00:44:50.720 --> 00:44:54.080
I think all of these tools come from some very real use case, right?

00:44:54.080 --> 00:44:57.620
And I think it's just important to figure out, like the way I talk to people about this

00:44:57.620 --> 00:45:01.660
stuff is you shouldn't really pick a tool just on its current feature set.

00:45:01.660 --> 00:45:05.900
You should pick it on its vision as well as whether it works for you today, because you're

00:45:05.900 --> 00:45:08.800
going to change a lot and you want to make sure that the tool is changing with you because

00:45:08.800 --> 00:45:12.220
these tools, especially the explosion of startups, we're all changing quite quickly.

00:45:12.220 --> 00:45:14.600
And you want to make sure that we're changing in an aligned way.

00:45:14.600 --> 00:45:17.180
And having that fleshed out vision is important.

00:45:17.180 --> 00:45:21.560
And if it's just a tool that like seems cool, but like, what exactly is this doing for me?

00:45:21.560 --> 00:45:21.980
Exactly.

00:45:21.980 --> 00:45:22.680
Precisely.

00:45:22.680 --> 00:45:26.260
If you can't really articulate that, then, you know, that's not to say you shouldn't keep

00:45:26.260 --> 00:45:29.240
using it or something, but just that's, that's always my exercise that I do with

00:45:29.240 --> 00:45:29.740
new tools.

00:45:29.740 --> 00:45:30.100
Yeah.

00:45:30.340 --> 00:45:34.560
When it's something as fundamental as this, you kind of have to think about, I'm going

00:45:34.560 --> 00:45:35.900
to live with this for a while.

00:45:35.900 --> 00:45:36.380
Exactly.

00:45:36.380 --> 00:45:39.440
Do I want to have this as my roommate when I come to work?

00:45:39.440 --> 00:45:39.900
Right.

00:45:39.900 --> 00:45:41.100
Do I want to debug this?

00:45:41.100 --> 00:45:42.920
Do I want to exactly extend it?

00:45:42.920 --> 00:45:44.720
You know, you're definitely going to do something weird with it.

00:45:44.720 --> 00:45:46.720
We've all done weird things with every tool we use.

00:45:46.720 --> 00:45:49.240
Oh yeah, absolutely.

00:45:49.240 --> 00:45:50.120
All right.

00:45:50.120 --> 00:45:56.000
So my question to you about this sort of like parallel to Flask and the web frameworks and

00:45:56.000 --> 00:45:57.020
various other things.

00:45:57.020 --> 00:46:01.620
This is solving a lot of negative engineering problems for data scientists and data engineers.

00:46:01.620 --> 00:46:03.620
What do you see?

00:46:03.620 --> 00:46:10.820
Where do you see maybe people like me who mostly do APIs and web apps and things along those lines?

00:46:11.220 --> 00:46:12.800
Should I be using stuff like this?

00:46:12.800 --> 00:46:16.700
And where do you see the solving problems for people who don't like traditionally put on the

00:46:16.700 --> 00:46:18.640
data science, data engineering hat?

00:46:18.640 --> 00:46:21.900
So there's two, two places that I think are relevant.

00:46:21.900 --> 00:46:27.920
I think the first is just like really kind of tactical, just tracking of background work,

00:46:27.920 --> 00:46:29.380
tracking of background tasks, right?

00:46:29.380 --> 00:46:31.720
Like Celery is a popular example for something like this.

00:46:31.820 --> 00:46:31.920
Yeah.

00:46:31.920 --> 00:46:32.740
Let me give you an example.

00:46:32.740 --> 00:46:36.760
So like for, in my world, I've, I might hit a button, have to send out thousands of emails

00:46:36.760 --> 00:46:37.980
like because of that.

00:46:37.980 --> 00:46:38.200
Right.

00:46:38.200 --> 00:46:42.940
And then maybe based on, on that, I might, if it bounces, take them out of the email list

00:46:42.940 --> 00:46:43.520
or whatever.

00:46:43.520 --> 00:46:43.960
Right.

00:46:43.960 --> 00:46:44.280
Exactly.

00:46:44.280 --> 00:46:47.380
You want to record the fact it's a perfect example.

00:46:47.380 --> 00:46:49.640
So just anything like that for a background task.

00:46:49.640 --> 00:46:52.920
And that's one of the things too, that we're going to try to make even simpler because we

00:46:52.920 --> 00:46:56.900
have focused a little bit on the data space and the very easy changes we can make to

00:46:56.900 --> 00:46:57.600
kind of extend that.

00:46:57.600 --> 00:47:01.800
And then the second thing, and this is, this is the way I always kind of

00:47:01.800 --> 00:47:02.780
kind of like to think about Prefect.

00:47:02.780 --> 00:47:06.980
It's one way you can consider everything I've been saying is we're kind of like the

00:47:06.980 --> 00:47:09.740
SRE toolkit at the business logic layer.

00:47:09.740 --> 00:47:13.920
And it's something that kind of everybody could just use just that single pane of glass.

00:47:13.920 --> 00:47:17.280
You get alerts, you get notifications, you can collaborate with people and it's just

00:47:17.280 --> 00:47:18.400
kind of all right there for you.

00:47:18.400 --> 00:47:22.140
And at the end of the day, like, you know, you don't really have to manage the code that

00:47:22.140 --> 00:47:23.440
much if you're just using the UI.

00:47:23.440 --> 00:47:28.580
And so I think that's how we can expand by just kind of giving people that value.

00:47:28.580 --> 00:47:30.360
You want to look at the things that are happening.

00:47:30.540 --> 00:47:33.220
You want to see a place where all of your systems are just right there.

00:47:33.220 --> 00:47:34.680
And it's at the business logic layer.

00:47:34.680 --> 00:47:37.800
You're not looking at CPU and memory all the time, although you could display that if you

00:47:37.800 --> 00:47:38.200
wanted to.

00:47:38.200 --> 00:47:39.580
So how about this as an example?

00:47:39.580 --> 00:47:45.920
I created an e-commerce site and I want to track, I just want visibility into people buying

00:47:45.920 --> 00:47:46.340
stuff.

00:47:46.340 --> 00:47:47.360
What's working?

00:47:47.360 --> 00:47:47.960
What's failing?

00:47:47.960 --> 00:47:49.360
What's the rate?

00:47:49.360 --> 00:47:50.720
The bosses.

00:47:50.720 --> 00:47:53.200
I need something on the web that I can look at this.

00:47:53.200 --> 00:47:54.100
Exactly.

00:47:54.100 --> 00:47:54.980
Get reporting.

00:47:55.200 --> 00:47:59.200
And the key thing here, right, that you said that is like puts it in Prefect's camp

00:47:59.200 --> 00:48:06.240
and not in, say, Datadog's camp is you want to track the user button click, for example,

00:48:06.240 --> 00:48:09.100
like some business logic thing.

00:48:09.100 --> 00:48:14.040
Whereas something like Datadog is an SRE or observability tool that's going to tell you

00:48:14.040 --> 00:48:15.460
your API throughput.

00:48:15.460 --> 00:48:19.480
Prefect isn't trying to do negative engineering for your raw infrastructure.

00:48:19.480 --> 00:48:21.540
It's trying to do it for your business logic.

00:48:21.720 --> 00:48:21.980
Got it.

00:48:21.980 --> 00:48:22.500
Okay.

00:48:22.500 --> 00:48:22.940
Yeah.

00:48:22.940 --> 00:48:23.480
Very interesting.

00:48:23.480 --> 00:48:27.860
So Prefect, open source, if I want, I could just take it and do my own thing, right?

00:48:27.860 --> 00:48:28.360
Oh yeah.

00:48:28.360 --> 00:48:29.040
Go for it.

00:48:29.040 --> 00:48:35.020
It is Apache 2.0 licensed as of maybe a month ago.

00:48:35.020 --> 00:48:39.460
So before we had a few different licenses floating around, but now we're all in, all Apache 2.0.

00:48:39.460 --> 00:48:39.740
Okay.

00:48:39.740 --> 00:48:41.760
Give me the elevator pitch on Apache 2.0.

00:48:41.760 --> 00:48:43.400
So what does that mean that I can do?

00:48:43.400 --> 00:48:49.120
It means you can do quite literally anything as long as you don't violate trademarks, essentially.

00:48:49.600 --> 00:48:52.680
And so, you know, don't violate, don't use logos or something like that.

00:48:52.680 --> 00:48:53.440
So with MIT or something like that.

00:48:53.440 --> 00:48:54.240
Yeah, exactly.

00:48:54.240 --> 00:48:56.180
It's very, very generous.

00:48:56.180 --> 00:48:58.420
You know, you don't have to check with us or anything like that.

00:48:58.420 --> 00:48:58.640
Sure.

00:48:58.640 --> 00:48:59.300
Okay.

00:48:59.300 --> 00:48:59.800
Excellent.

00:48:59.800 --> 00:49:00.200
Yeah.

00:49:00.200 --> 00:49:04.000
You guys are doing a lot of stuff, not just with Prefect, but with other projects out there

00:49:04.000 --> 00:49:04.560
as well, right?

00:49:04.560 --> 00:49:05.320
Yeah, we are.

00:49:05.320 --> 00:49:10.940
We really kind of, like I said at the beginning, tried to instill this kind of open source ethos

00:49:10.940 --> 00:49:15.740
that even at the business layer, like we're trying really hard to genuinely deliver value,

00:49:15.740 --> 00:49:16.080
right?

00:49:16.080 --> 00:49:20.240
And that includes to our customers and users, but also to just the broader ecosystem that

00:49:20.240 --> 00:49:23.160
we find ourselves in, which is exploding right now.

00:49:23.160 --> 00:49:27.900
And so we have a lot of different efforts that we, yeah, I can definitely go through and list

00:49:27.900 --> 00:49:30.820
them all like ways we try to contribute back to open source.

00:49:30.820 --> 00:49:31.180
Yeah.

00:49:31.180 --> 00:49:31.920
Give us a little bit.

00:49:31.920 --> 00:49:33.260
So we do a few different things.

00:49:33.260 --> 00:49:39.880
So one thing that we do is we will send pizza to basically any conference or meetup talk

00:49:39.880 --> 00:49:41.700
that has a talk featuring Prefect.

00:49:41.700 --> 00:49:44.540
And so you just have to submit a quick application.

00:49:44.540 --> 00:49:45.820
We'll probably reach out to you.

00:49:45.820 --> 00:49:48.100
And then, you know, that's pretty much it there.

00:49:48.100 --> 00:49:52.660
If you are a Prefect engineer, we have kind of this like advocacy program.

00:49:52.660 --> 00:49:57.060
And if you get involved with that, we've sent people to conferences before that are not

00:49:57.060 --> 00:49:57.820
Prefect employees.

00:49:57.820 --> 00:50:01.500
So that's another thing that we try to give back.

00:50:02.060 --> 00:50:06.280
More concretely on the business side, we, every engineering team at Prefect, so right

00:50:06.280 --> 00:50:08.500
now there are five kind of distinct teams.

00:50:08.500 --> 00:50:15.600
They each get a $10,000 annual budget to sponsor any and all open source projects or just maintainers

00:50:15.600 --> 00:50:20.160
directly that they think are impactful, maybe for their work or maybe for our ecosystem.

00:50:20.160 --> 00:50:24.020
And so some of them, just to give you an example, one of the ones that kind of kicked this whole

00:50:24.020 --> 00:50:28.560
thing off was we sponsor MKDocs material theme, just really slick theming.

00:50:28.560 --> 00:50:30.400
And so that was, that was the first one.

00:50:30.460 --> 00:50:34.680
We also sponsor a lot of view projects and we're going to be expanding this to like fast

00:50:34.680 --> 00:50:39.300
API and some other ones that we just have to, you know, dot our eyes and everything and

00:50:39.300 --> 00:50:40.120
cross our T's.

00:50:40.120 --> 00:50:44.180
And then, so this is kind of an escalating rate intensity.

00:50:44.180 --> 00:50:51.240
And the last thing is we've actually Prefect, the company has gotten into investing in certain

00:50:51.240 --> 00:50:55.520
open source tools that we think are very compatible with some of the things we want to do.

00:50:55.620 --> 00:50:58.180
So the big one, the headline one here is Textualize.

00:50:58.180 --> 00:51:02.000
So Will, who the author of, yeah, exactly.

00:51:02.000 --> 00:51:04.720
I always be afraid to say this a lot of things, I'm afraid I'm going to say it wrong.

00:51:04.720 --> 00:51:07.020
So he's the author of Rich and Textual.

00:51:07.020 --> 00:51:10.480
And as everyone knows now, it's all out there.

00:51:10.480 --> 00:51:15.040
So he's building the service Textualize for hosting these text-based terminal applications and

00:51:15.040 --> 00:51:16.320
distributing them through the web.

00:51:16.460 --> 00:51:21.300
So in kind of an interesting sense, it's like spiritually similar to the hybrid model,

00:51:21.300 --> 00:51:21.500
right?

00:51:21.500 --> 00:51:22.860
You can kind of run one of these agents.

00:51:22.860 --> 00:51:27.520
And we've always wanted to expose richer interactions with Prefect agents running in

00:51:27.520 --> 00:51:28.880
your infrastructure through our UI.

00:51:28.880 --> 00:51:31.940
And like, when we talked to Will, it was like, oh, this is it.

00:51:31.940 --> 00:51:32.660
This is perfect.

00:51:32.660 --> 00:51:35.320
And it's got all the right like theming differences.

00:51:35.320 --> 00:51:37.100
So you'll be able to tell this is something you wrote.

00:51:37.100 --> 00:51:42.200
It's like very text-driven compared to kind of our more branded, you know, assets lurking around

00:51:42.200 --> 00:51:42.680
the UI.

00:51:43.180 --> 00:51:46.320
And so, yeah, we invested in his company, yeah, in their seed realm.

00:51:46.320 --> 00:51:47.160
I'm really glad to hear that.

00:51:47.160 --> 00:51:49.400
I'm also really glad for Rich that he's got that going.

00:51:49.400 --> 00:51:51.240
He's been making such progress.

00:51:51.240 --> 00:51:52.320
Oh, yeah, yeah.

00:51:52.320 --> 00:51:55.020
He gets to the top of Hacker News, I feel like, every other day.

00:51:55.020 --> 00:51:55.680
So I will.

00:51:55.680 --> 00:51:56.980
I always switch his name.

00:51:56.980 --> 00:51:57.900
I feel so bad.

00:51:57.900 --> 00:51:59.440
I'm very happy for Will.

00:51:59.440 --> 00:52:00.700
And he's been doing so much with Rich.

00:52:00.700 --> 00:52:01.900
My brother's named Rich.

00:52:01.900 --> 00:52:02.660
It's a problem.

00:52:02.660 --> 00:52:05.780
But, you know, you go and I'm finding so many of these projects.

00:52:05.780 --> 00:52:08.860
I'm like, oh, this is really interesting, especially for our Python Bytes podcast.

00:52:08.860 --> 00:52:11.340
We're just covering packages and things that are interesting that week.

00:52:12.000 --> 00:52:14.620
And more often than not, you're like, that's got a really cool UI.

00:52:14.620 --> 00:52:18.780
Oh, I see in the dependency, you know, requirements.txt or PyProject.toml.

00:52:18.780 --> 00:52:21.340
Rich is at the heart of making that look good.

00:52:21.340 --> 00:52:22.220
Oh, yeah.

00:52:22.220 --> 00:52:22.840
We use it.

00:52:22.840 --> 00:52:24.620
It is great.

00:52:24.620 --> 00:52:25.580
Yeah, absolutely.

00:52:25.580 --> 00:52:26.660
It totally is.

00:52:27.140 --> 00:52:35.960
So one of the final things I want to talk to you about is creating a business around open source with this very permissible model that you're giving away.

00:52:35.960 --> 00:52:37.320
And I think it's super admirable.

00:52:37.320 --> 00:52:43.140
I know there's other companies doing it to various degrees and to various degrees of success.

00:52:43.300 --> 00:52:47.020
Like MongoDB comes to mind, for example, and, you know, Red Hat and stuff.

00:52:47.020 --> 00:52:50.620
But all these examples that I see are just are like, fantastic.

00:52:50.620 --> 00:52:52.000
Look at what you guys are doing.

00:52:52.000 --> 00:53:01.860
You're investing in other open source projects by having a successful business with this open source core engine as the core.

00:53:02.080 --> 00:53:10.180
And so I just, you know, wanted to give you a chance to talk about the business model, maybe, you know, riff on that a bit and give people advice out there who are doing their own thing.

00:53:10.180 --> 00:53:19.600
Like another one that comes to mind is you guys do a lot with Dask and like Coiled is now sort of in a similar position with Dask hosting Dask as a service, sort of.

00:53:19.600 --> 00:53:19.800
Right.

00:53:19.800 --> 00:53:20.040
Yeah.

00:53:20.040 --> 00:53:21.400
And we're partners with Coiled, too.

00:53:21.400 --> 00:53:24.020
So we keep up to date all our integrations there.

00:53:24.020 --> 00:53:26.200
So, yeah, our business model for cloud.

00:53:26.200 --> 00:53:31.720
And it's, you know, unsurprisingly, too, that we're going to get some slight changes, but like spiritually very similar.

00:53:31.720 --> 00:53:45.240
So first and foremost, we really want to make sure, especially like the hobbyists, the open source projects out there, you can come in and, you know, use the system to actually achieve, you know, powerful use cases for free.

00:53:45.240 --> 00:53:56.900
And so one of the ways that we came up with our free tier volume, which is 20,000 free task runs a month, is we asked ourselves for just a very bare bones airflow deployment running.

00:53:56.900 --> 00:53:59.140
Like how many tasks would you turn through a month?

00:53:59.140 --> 00:54:04.320
And like that's, you could run a business's ETL processes off of that volume.

00:54:04.320 --> 00:54:06.660
And so that's kind of roughly where we picked this number.

00:54:06.660 --> 00:54:09.860
So like we do think that this satisfies real business need.

00:54:09.860 --> 00:54:15.340
And then kind of the reason that you would move out of it would be for kind of pretty standard reasons, right?

00:54:15.340 --> 00:54:16.600
You want to unlock more scale.

00:54:16.600 --> 00:54:17.200
Okay.

00:54:17.200 --> 00:54:18.600
So then you talk to us.

00:54:18.600 --> 00:54:24.220
You want to add more users because, you know, you're capped on users and maybe even you want more teams.

00:54:24.420 --> 00:54:30.200
So if you're an actual enterprise, you're presumably going to have some more permission structures that you need to grapple with.

00:54:30.200 --> 00:54:34.220
And so that's when our enterprise tier comes in, SSO integrations, all of that fun stuff.

00:54:34.220 --> 00:54:38.560
And kind of this isn't really going to change in spirit for 2.0.

00:54:38.560 --> 00:54:39.500
It's going to be pretty similar.

00:54:39.500 --> 00:54:41.160
There's going to be some sort of throughput metric.

00:54:41.740 --> 00:54:46.020
Maybe it's task runs, maybe it's storage, something else that, you know, a lot of it's free.

00:54:46.020 --> 00:54:48.980
And then you want to add more users, more workspaces.

00:54:48.980 --> 00:54:51.700
You start to talk to us and then kind of it grows.

00:54:51.700 --> 00:54:59.420
You know, if you start to have really big performance needs or you have requirements for data locality and things like that, like we start to talk, you know, enterprise plans.

00:54:59.420 --> 00:55:01.020
So we try to align it.

00:55:01.020 --> 00:55:09.420
And one of the things, too, that was insight for me to really think about in the early days was like business models, you're not selling the code you write.

00:55:09.420 --> 00:55:11.820
And that's why open source, you know, works.

00:55:11.820 --> 00:55:16.260
There's some value that you're providing and you have to find, figure out what that is.

00:55:16.260 --> 00:55:19.140
And like for us, it's kind of almost like funny.

00:55:19.620 --> 00:55:23.240
Having to host and maintain an API locally is negative engine.

00:55:23.240 --> 00:55:25.560
And so that's not what you're trying to do.

00:55:25.560 --> 00:55:26.720
You're trying to schedule jobs.

00:55:26.720 --> 00:55:34.540
And so kind of migrating up to cloud tends to be a natural thing unless you've got the resources to manage it and scale it out, which is also perfectly fine.

00:55:34.540 --> 00:55:37.920
And the thing is, there's a lot of expertise in running systems like this.

00:55:37.920 --> 00:55:39.320
Yeah, there really is.

00:55:39.320 --> 00:55:39.520
Yeah.

00:55:39.520 --> 00:55:41.500
And the database, too, you want it to be scalable.

00:55:41.500 --> 00:55:42.500
And yeah.

00:55:42.500 --> 00:55:42.940
Yeah.

00:55:42.940 --> 00:55:44.480
So I think there's a lot of value.

00:55:44.480 --> 00:55:45.620
I think it makes perfect sense.

00:55:45.620 --> 00:55:50.420
Like give you the core for free and you can run it and you can maintain it.

00:55:50.420 --> 00:55:55.200
It can be your baby or it can be kind of hands off and we'll take care of it.

00:55:55.200 --> 00:55:57.680
Like you said, authentication and all that kind of stuff.

00:55:57.680 --> 00:55:58.040
Yeah.

00:55:58.040 --> 00:56:03.500
And we have a really active, like a crazy active Slack community.

00:56:03.500 --> 00:56:09.320
So, you know, if you're doing that yourself and self-hosting, I can go ask there and I'm sure you're going to get a lot of responses.

00:56:09.320 --> 00:56:12.560
I think there's 16,000 people, something like that in there right now.

00:56:12.560 --> 00:56:13.020
Wow.

00:56:13.020 --> 00:56:13.440
Okay.

00:56:13.440 --> 00:56:14.220
It's active.

00:56:14.500 --> 00:56:18.000
Like messages pretty much, you know, flying by pretty regularly.

00:56:18.000 --> 00:56:21.220
And then, oh, our discourse as well is up and coming.

00:56:21.220 --> 00:56:21.520
Yeah.

00:56:21.520 --> 00:56:23.340
I think it's worth maybe just highlighting.

00:56:23.340 --> 00:56:29.120
There's, you guys have almost 9,000 stars on GitHub, which is, that's quite far up there.

00:56:29.120 --> 00:56:29.800
That's pretty awesome.

00:56:29.800 --> 00:56:30.280
Yeah.

00:56:30.280 --> 00:56:32.400
So, yeah, that's, y'all must be proud.

00:56:32.400 --> 00:56:32.700
Yeah.

00:56:32.700 --> 00:56:35.180
We, you know, it's always fun when you're open source project.

00:56:35.180 --> 00:56:38.540
We reached the number one trending repo on GitHub one time.

00:56:38.540 --> 00:56:40.120
This was maybe two years ago.

00:56:40.120 --> 00:56:40.620
Oh, wow.

00:56:40.620 --> 00:56:44.800
We had a random happy hour that night just to celebrate.

00:56:44.800 --> 00:56:45.280
I was one.

00:56:45.280 --> 00:56:47.160
How long has it been out?

00:56:47.160 --> 00:56:47.960
When did you start it?

00:56:47.960 --> 00:56:48.800
So, let's see.

00:56:48.800 --> 00:56:52.580
Prefect, the company is four years old.

00:56:52.580 --> 00:56:58.360
And I believe we open sourced, I want to say, in December of 2018.

00:56:59.260 --> 00:57:02.660
So, the core, at least, has been out for quite a while.

00:57:02.660 --> 00:57:07.380
And then cloud was maybe six months later when the first version of cloud got out.

00:57:07.380 --> 00:57:07.580
Cool.

00:57:07.580 --> 00:57:08.000
Yeah.

00:57:08.000 --> 00:57:10.500
So, not brand new, but not super old.

00:57:10.500 --> 00:57:10.700
Yeah.

00:57:10.700 --> 00:57:14.260
Battle tested, but definitely still got a lot to build.

00:57:14.260 --> 00:57:15.300
Yeah, for sure.

00:57:15.300 --> 00:57:18.620
Did you guys build it on Python 3 only just at that point?

00:57:18.620 --> 00:57:18.780
Yeah.

00:57:18.780 --> 00:57:19.420
Python 3 only.

00:57:19.420 --> 00:57:19.700
Yeah.

00:57:19.760 --> 00:57:22.100
We try to just build for the future, right?

00:57:22.100 --> 00:57:22.460
Yeah.

00:57:22.460 --> 00:57:24.180
Shrinking audience.

00:57:24.180 --> 00:57:24.420
Yeah.

00:57:24.420 --> 00:57:29.320
You end up in a place with a lot of negative engineering if you try to support too much too

00:57:29.320 --> 00:57:30.140
far back, I would say.

00:57:30.140 --> 00:57:30.460
Yeah.

00:57:30.460 --> 00:57:32.460
For the community, you got the Slack, and that's pretty awesome.

00:57:32.460 --> 00:57:33.620
You got the discourse.

00:57:33.620 --> 00:57:36.060
Then you also have Club 42.

00:57:36.060 --> 00:57:39.540
And if people just go to your website and they go to a community, they'll see this.

00:57:39.540 --> 00:57:41.420
You'll see the I Want a Pizza if you've got a user group.

00:57:41.420 --> 00:57:45.160
But I'm guessing this has to do something with Hitchhiker's Guide.

00:57:45.160 --> 00:57:47.020
What's the story with this Club 42 thing?

00:57:47.020 --> 00:57:47.240
Yeah.

00:57:47.240 --> 00:57:50.160
So, Hitchhiker's Guide definitely is a theme for us.

00:57:50.160 --> 00:57:51.800
Everyone gets a free copy when you join.

00:57:51.800 --> 00:57:55.420
Club 42 is our application only.

00:57:55.420 --> 00:57:56.460
So, you can apply.

00:57:56.460 --> 00:57:57.340
It's not invite-o.

00:57:57.340 --> 00:58:02.280
It's a private group of kind of external advocates of prefect.

00:58:02.280 --> 00:58:06.840
So, people who just really want to get early access to things, who have proven themselves

00:58:06.840 --> 00:58:10.900
to be the positive forces in our community, which, to be clear, doesn't mean that they're

00:58:10.900 --> 00:58:14.280
necessarily, like, some of them are technical experts, but you don't necessarily have to

00:58:14.280 --> 00:58:14.380
be.

00:58:14.380 --> 00:58:19.360
The point is just that you kind of help our community succeed in whatever way that makes

00:58:19.360 --> 00:58:19.500
sense.

00:58:19.500 --> 00:58:20.200
Just keep it healthy.

00:58:20.200 --> 00:58:21.100
Yeah, yeah.

00:58:21.100 --> 00:58:21.740
That's fantastic.

00:58:21.740 --> 00:58:23.720
Yeah, we run, like, special events with them.

00:58:23.720 --> 00:58:25.360
And they get early access to everything.

00:58:25.360 --> 00:58:27.260
They were the first people that got Cloud 2.0 access.

00:58:27.260 --> 00:58:28.500
I think that's really valuable.

00:58:28.500 --> 00:58:30.100
I think more companies should be doing it.

00:58:30.100 --> 00:58:32.080
I know MongoDB did that for a while.

00:58:32.080 --> 00:58:33.580
I don't, I think they stopped.

00:58:33.580 --> 00:58:37.980
You know, Microsoft has Microsoft MVPs, and I'm pretty sure Docker has something similar.

00:58:37.980 --> 00:58:39.720
But, yeah, it's a cool idea.

00:58:39.720 --> 00:58:40.640
I'm glad you guys are doing it.

00:58:40.720 --> 00:58:41.920
Yeah, it's really fun.

00:58:41.920 --> 00:58:45.800
And just to kind of get, right, you get a bunch of people all caring about one thing

00:58:45.800 --> 00:58:49.120
kind of together, and interesting conversations always happen.

00:58:49.120 --> 00:58:49.540
For sure.

00:58:49.540 --> 00:58:50.080
All right.

00:58:50.080 --> 00:58:51.660
We're getting short on our time here, Chris.

00:58:51.660 --> 00:58:58.220
But I guess one more thing I can imagine, you know, it's, I know a lot of people who are

00:58:58.220 --> 00:59:03.440
working for amazing companies are starting to reevaluate the amazingness of it now that

00:59:03.440 --> 00:59:08.060
they've got to go back to the office or like the rules have changed and then they've changed

00:59:08.060 --> 00:59:08.420
again.

00:59:08.420 --> 00:59:10.280
And they may be thinking of other positions.

00:59:10.280 --> 00:59:13.180
What's the hiring situation?

00:59:13.180 --> 00:59:15.600
You guys have open positions to work on this fun stuff?

00:59:15.760 --> 00:59:17.300
We do have open positions.

00:59:17.300 --> 00:59:18.900
We're fully remote.

00:59:18.900 --> 00:59:20.160
So no worries on that.

00:59:20.160 --> 00:59:24.660
Although we do have plenty of opportunities for meeting people in person as well, optionally.

00:59:25.160 --> 00:59:29.740
So we have kind of these hubs that people can apply to and will show up like 20 people at

00:59:29.740 --> 00:59:32.020
a time and have like a mini internal conference.

00:59:32.020 --> 00:59:34.600
And we're having our first full company off site later in July.

00:59:34.600 --> 00:59:35.140
It'd be really fun.

00:59:35.140 --> 00:59:36.460
But anyways, yes, we have open roles.

00:59:36.460 --> 00:59:37.560
Highly encouraged.

00:59:37.740 --> 00:59:42.320
If you don't, so right now the biggest roles on my mind are kind of more in the platform

00:59:42.320 --> 00:59:42.760
space.

00:59:42.760 --> 00:59:45.500
So SRE style roles, platform engineer roles.

00:59:45.500 --> 00:59:48.780
And so if that appeals to you or you have any experience there, let us know.

00:59:48.780 --> 00:59:54.000
And if you don't see a role on our website that maybe fits you, don't be shy about reaching

00:59:54.000 --> 00:59:58.240
out because sometimes these things take a long time and let's just formally keep a conversation

00:59:58.240 --> 01:00:00.140
going and, and yeah.

01:00:00.140 --> 01:00:00.600
Sure.

01:00:00.600 --> 01:00:02.220
Say I have this special power.

01:00:02.220 --> 01:00:06.300
It doesn't match one of your three listings, but I bet it could help somehow, right?

01:00:06.300 --> 01:00:06.740
Exactly.

01:00:06.740 --> 01:00:07.080
Exactly.

01:00:07.220 --> 01:00:08.680
I mean, you know, it happens.

01:00:08.680 --> 01:00:09.300
It happens.

01:00:09.300 --> 01:00:10.500
It's happened to Prefect before.

01:00:10.500 --> 01:00:14.620
So yeah, my email is, is Chris at Prefect.io.

01:00:14.620 --> 01:00:16.420
So you can feel free to just email me.

01:00:16.420 --> 01:00:16.700
Yeah.

01:00:16.700 --> 01:00:17.160
Fantastic.

01:00:17.160 --> 01:00:17.740
That's great.

01:00:17.740 --> 01:00:18.920
All right.

01:00:18.920 --> 01:00:23.820
I think, I think that might be where we got to leave it for data engineering and Prefect,

01:00:23.820 --> 01:00:25.040
but very, very interesting.

01:00:25.040 --> 01:00:27.820
But before we get out of here, you've got to answer the final two questions.

01:00:27.820 --> 01:00:31.660
If you're going to write some Python code these days, what editor are you pulling out?

01:00:31.660 --> 01:00:33.560
Oh, put me on the spot.

01:00:33.560 --> 01:00:35.580
I'm still a Vim user.

01:00:35.580 --> 01:00:37.460
I'm a platform survivalist.

01:00:37.460 --> 01:00:41.320
If I find myself in the, in the corners of an old system, I want to be, I want to feel

01:00:41.320 --> 01:00:41.820
powerful.

01:00:41.820 --> 01:00:43.020
And so Vim's worth it.

01:00:43.020 --> 01:00:43.400
Pretty sure.

01:00:43.400 --> 01:00:47.260
I think there's still a ton of people who are on the Vim and the Emacs.

01:00:47.260 --> 01:00:48.500
I mean, they can't talk to each other.

01:00:48.500 --> 01:00:49.260
They can't, they don't get along.

01:00:49.420 --> 01:00:55.800
I started out programming, but I started out programming, doing Emacs on Silicon graphics

01:00:55.800 --> 01:00:56.240
machines.

01:00:56.240 --> 01:00:56.400
Wait.

01:00:56.400 --> 01:00:59.080
So what's your now editor of choice?

01:00:59.080 --> 01:01:00.760
Right now, these days I'm on PyCharm.

01:01:00.760 --> 01:01:01.080
Okay.

01:01:01.080 --> 01:01:01.880
That's a good choice.

01:01:01.880 --> 01:01:03.720
PyCharm and VS Code seem very, yeah.

01:01:03.720 --> 01:01:04.060
Yeah.

01:01:04.100 --> 01:01:07.420
I use VS Code as well for like small little things.

01:01:07.420 --> 01:01:10.020
And if I'm like, here's my big project, then PyCharm is the choice.

01:01:10.020 --> 01:01:10.620
Yeah.

01:01:10.860 --> 01:01:15.840
And then notable PyPI package, I mean, pip install prefect is one of them, but like

01:01:15.840 --> 01:01:18.780
some library that you've seen that you're like, oh, this thing is amazing.

01:01:18.780 --> 01:01:20.280
I really should tell the world about it.

01:01:20.280 --> 01:01:21.880
Rich in textual for sure.

01:01:21.880 --> 01:01:22.420
Oh yeah.

01:01:22.420 --> 01:01:24.300
FastAPI, I think is amazing.

01:01:24.300 --> 01:01:28.900
I really think that you can scale out some pretty powerful web servers with that.

01:01:28.900 --> 01:01:29.880
It's really pretty amazing.

01:01:29.880 --> 01:01:32.040
I was just doing that before we jumped on the call.

01:01:32.040 --> 01:01:32.840
Oh, nice.

01:01:32.840 --> 01:01:33.240
Nice.

01:01:33.240 --> 01:01:35.600
And then we did mention it earlier.

01:01:35.600 --> 01:01:39.960
Dask is a really powerful Python framework for distributed computing.

01:01:40.440 --> 01:01:43.420
Definitely easy to get started with and really powerful as you scale.

01:01:43.420 --> 01:01:47.260
Those are the ones come to mind immediately.

01:01:47.260 --> 01:01:47.660
Cool.

01:01:47.660 --> 01:01:48.860
Those are all fantastic.

01:01:48.860 --> 01:01:50.320
All right, Chris, final call to action.

01:01:50.320 --> 01:01:52.040
People are interested in prefect.

01:01:52.040 --> 01:01:52.860
What do you tell them?

01:01:52.860 --> 01:01:53.760
What do they do?

01:01:53.760 --> 01:01:56.160
Definitely join our Slack and go to our GitHub.

01:01:56.160 --> 01:02:00.980
That's where you'll really be able to immediately kind of get involved in the action, figure out

01:02:00.980 --> 01:02:05.200
what's going on, just ask around for best practices, how to get started, get some project

01:02:05.200 --> 01:02:06.580
ideas, whatever the case may be.

01:02:06.580 --> 01:02:06.820
Yeah.

01:02:06.820 --> 01:02:10.420
And you have a nice tutorial, but maybe what you would

01:02:10.420 --> 01:02:17.060
recommend Orion docs, orion-docs.prefect.io to like the tutorial to follow along for now?

01:02:17.060 --> 01:02:17.140
Yes.

01:02:17.140 --> 01:02:17.640
Yes.

01:02:17.640 --> 01:02:21.020
I would definitely recommend Orion docs to get started.

01:02:21.020 --> 01:02:25.860
And we'll slowly start making these more discoverable over the coming weeks.

01:02:25.860 --> 01:02:27.900
Well, I'll put it in the share notes so people can get to it.

01:02:27.900 --> 01:02:28.220
Awesome.

01:02:28.220 --> 01:02:28.680
Awesome.

01:02:28.680 --> 01:02:29.140
All right.

01:02:29.140 --> 01:02:30.800
Well, it's really great to chat with you.

01:02:30.800 --> 01:02:31.680
Thanks for being here.

01:02:31.680 --> 01:02:32.020
Yeah.

01:02:32.020 --> 01:02:32.840
Thank you so much, Michael.

01:02:32.840 --> 01:02:33.580
This was really fun.

01:02:33.580 --> 01:02:34.260
Yeah, it sure was.

01:02:34.260 --> 01:02:34.540
Bye.

01:02:34.540 --> 01:02:38.640
This has been another episode of Talk Python To Me.

01:02:38.640 --> 01:02:40.460
Thank you to our sponsors.

01:02:40.460 --> 01:02:42.060
Be sure to check out what they're offering.

01:02:42.060 --> 01:02:43.480
It really helps support the show.

01:02:43.480 --> 01:02:45.700
Starting a business is hard.

01:02:45.700 --> 01:02:51.800
Microsoft for Startups, Founders Hub provides all founders at any stage with free resources

01:02:51.800 --> 01:02:54.320
and connections to solve startup challenges.

01:02:54.980 --> 01:02:58.860
Apply for free today at talkpython.fm/foundershub.

01:02:58.860 --> 01:03:00.960
Want to level up your Python?

01:03:00.960 --> 01:03:05.020
We have one of the largest catalogs of Python video courses over at Talk Python.

01:03:05.020 --> 01:03:10.180
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:03:10.180 --> 01:03:12.860
And best of all, there's not a subscription in sight.

01:03:12.860 --> 01:03:15.760
Check it out for yourself at training.talkpython.fm.

01:03:15.760 --> 01:03:17.660
Be sure to subscribe to the show.

01:03:17.660 --> 01:03:20.520
Open your favorite podcast app and search for Python.

01:03:20.520 --> 01:03:21.760
We should be right at the top.

01:03:22.200 --> 01:03:26.900
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:03:26.900 --> 01:03:31.100
and the direct RSS feed at /rss on talkpython.fm.

01:03:31.100 --> 01:03:34.540
We're live streaming most of our recordings these days.

01:03:34.540 --> 01:03:37.960
If you want to be part of the show and have your comments featured on the air,

01:03:37.960 --> 01:03:42.320
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:03:42.320 --> 01:03:44.220
This is your host, Michael Kennedy.

01:03:44.220 --> 01:03:45.520
Thanks so much for listening.

01:03:45.520 --> 01:03:46.680
I really appreciate it.

01:03:46.680 --> 01:03:48.580
Now get out there and write some Python code.

01:03:48.580 --> 01:04:09.340
I'll see you next time.

01:04:09.340 --> 01:04:39.320
Thank you.

