WEBVTT

00:00:00.001 --> 00:00:01.820
Do you write web apps in Django?

00:00:01.820 --> 00:00:08.360
The framework has come a long way lately, with versions 3 and 4 adopting many of the modern Python capabilities.

00:00:08.360 --> 00:00:09.540
Async, for example.

00:00:09.540 --> 00:00:16.800
But there are so many other libraries and apps that you can use to do more with less code and plug in new functionality.

00:00:16.800 --> 00:00:24.640
I'm happy to have Christopher Trudeau here on Talk Python to take us through his 17 favorite libraries you should be using in Django.

00:00:24.980 --> 00:00:30.940
This is Talk Python To Me, episode 379, recorded August 22nd, 2022.

00:00:30.940 --> 00:00:46.940
Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:46.940 --> 00:00:48.660
This is your host, Michael Kennedy.

00:00:48.660 --> 00:00:54.880
Follow me on Twitter where I'm @mkennedy and keep up with the show and listen to past episodes at talkpython.fm.

00:00:54.880 --> 00:00:57.980
And follow the show on Twitter via at Talk Python.

00:00:57.980 --> 00:01:01.580
We've started streaming most of our episodes live on YouTube.

00:01:01.580 --> 00:01:09.100
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:09.100 --> 00:01:15.620
This episode of Talk Python To Me is brought to you by the IRL podcast, an original podcast from Mozilla.

00:01:15.620 --> 00:01:18.280
This season, they're looking at AI in real life.

00:01:18.280 --> 00:01:22.080
Listen to an episode at talkpython.fm/IRL.

00:01:22.700 --> 00:01:25.840
And it's brought to you by Microsoft for Startups Founders Hub.

00:01:25.840 --> 00:01:29.820
Get early stage support for your company and build that startup you've been dreaming about.

00:01:29.820 --> 00:01:34.000
Visit talkpython.fm/foundershub to apply for free.

00:01:34.000 --> 00:01:38.300
Transcripts for this and all of our episodes are brought to you by Assembly AI.

00:01:38.300 --> 00:01:40.980
Do you need a great automatic speech to text API?

00:01:40.980 --> 00:01:43.540
Get human level accuracy in just a few lines of code.

00:01:43.540 --> 00:01:46.380
Visit talkpython.fm/assemblyai.

00:01:47.260 --> 00:01:50.040
Hey all, a quick announcement before we jump into the interview.

00:01:50.040 --> 00:01:57.140
Some of the ideas we discuss in this episode come from a brand new Django course that Chris authored over at Talk Python Training.

00:01:57.140 --> 00:02:02.440
If you enjoy this episode and want to put these ideas into practice or you want to just get started with Django,

00:02:02.440 --> 00:02:06.620
be sure to check out his course at talkpython.fm/Django.

00:02:06.860 --> 00:02:07.940
Now let's dive in.

00:02:07.940 --> 00:02:11.140
Chris, welcome to Talk Python To Me.

00:02:11.140 --> 00:02:12.180
Thanks for having me.

00:02:12.180 --> 00:02:13.720
Yeah, it's great to have you here on the show.

00:02:13.720 --> 00:02:19.360
You know, we've worked on some projects together and talked otherwise, but your first time here on Talk Python.

00:02:19.360 --> 00:02:19.960
Monumental.

00:02:19.960 --> 00:02:21.300
Indeed, indeed.

00:02:21.500 --> 00:02:23.260
So I'm super excited to talk about Django.

00:02:23.260 --> 00:02:28.220
I don't do that much Django, which is why you're here because you do a ton of stuff with Django.

00:02:28.220 --> 00:02:31.060
So really excited to have you share your experience.

00:02:31.060 --> 00:02:36.340
And we're going to focus on a bunch of cool little tools and apps that you can plug into Django and make it better,

00:02:36.340 --> 00:02:39.660
make it do more and do a lot of the Django things, you know,

00:02:39.660 --> 00:02:42.520
pull a few pieces together and make your app better without a lot of coding, right?

00:02:42.520 --> 00:02:43.240
That's the idea.

00:02:43.240 --> 00:02:43.680
Indeed.

00:02:43.680 --> 00:02:46.600
Before we get to all that, though, let's just start with your background.

00:02:46.600 --> 00:02:48.260
How do you get into programming in Python?

00:02:48.540 --> 00:02:53.560
I'm an old man, not punch card old, but single digit megahertz old.

00:02:53.560 --> 00:02:55.620
My dad worked for IBM.

00:02:55.620 --> 00:02:58.440
So my first computer was an IBM PC Junior.

00:02:58.440 --> 00:03:02.900
256 kilobytes of memory with the expansion card.

00:03:02.900 --> 00:03:08.220
No hard drive, five and a quarter floppy and 4.77 megahertz.

00:03:08.220 --> 00:03:10.740
And that second seven is really, really important.

00:03:10.740 --> 00:03:11.760
It made all the difference.

00:03:11.760 --> 00:03:12.940
Did it have a turbo button?

00:03:12.940 --> 00:03:14.020
It did not.

00:03:14.020 --> 00:03:18.300
IBM did not do that little bit of marketing stuff.

00:03:18.300 --> 00:03:22.260
But I'm pretty sure my USB charger has more processing power now.

00:03:22.260 --> 00:03:24.540
But all my friends had Commodores.

00:03:24.540 --> 00:03:28.300
And so I couldn't trade pirated games with them because that's what everyone did.

00:03:28.300 --> 00:03:33.000
And the box came with this kid friendly teach yourself basic book.

00:03:33.000 --> 00:03:35.160
And so that was kind of my intro.

00:03:35.160 --> 00:03:38.100
There was I had one game and nothing else to do with the computer.

00:03:38.320 --> 00:03:46.160
And the first program I remember writing was a Batman logo, not copying it from a book, like on my own kind of thing.

00:03:46.160 --> 00:03:51.500
And so like the basic library had like draw arc and fill in yellow and it kind of clicked for me.

00:03:51.500 --> 00:04:00.140
And 30 years later, I was running a software department at a company that got acquired by a large firm who shall remain nameless.

00:04:00.320 --> 00:04:04.180
They just own all of your favorite movie franchises and have a rodent fronting it.

00:04:04.180 --> 00:04:05.240
I think you know who I'm talking about.

00:04:05.240 --> 00:04:10.620
And as part of that acquisition, the department got shut down, but we were asked to stick around to help with the transition.

00:04:10.620 --> 00:04:14.140
We had about two weeks worth of work to do and we had six months to do it in.

00:04:14.140 --> 00:04:18.180
So I had a fair amount of spare time on my hands and I used that to pick up Python.

00:04:18.660 --> 00:04:31.560
And the first script I wrote in Python was that we had a photo sharing site and the due diligence of the transfer included looking for questionable content in that photo sharing site.

00:04:31.560 --> 00:04:39.300
And I had to, for the police investigation, go off and grab a whole bunch of stuff out of S3 and download it that belonged to this one individual.

00:04:39.300 --> 00:04:46.560
So the script was kind of icky, but I was very, very impressed on how little code I had to write in comparison to previous languages.

00:04:46.880 --> 00:04:52.720
Part of that's Python itself and part of it was just, you know, pip install, pip install, pip install, and it solved all these problems.

00:04:52.720 --> 00:04:55.000
And I've never looked back.

00:04:55.000 --> 00:04:58.160
It's been my primary language for almost 15 years now.

00:04:58.160 --> 00:04:58.900
What a good language.

00:04:58.900 --> 00:04:59.440
What a good choice.

00:04:59.440 --> 00:05:07.020
Who knew 15 years ago or 10 years ago or whenever we all got into it that it would be so incredibly popular these days, right?

00:05:07.020 --> 00:05:08.400
Yeah, it's grown a lot.

00:05:08.400 --> 00:05:10.500
It's, yeah, it's really taken off.

00:05:10.500 --> 00:05:11.940
Yeah, I just saw an article.

00:05:11.940 --> 00:05:13.120
What was it called?

00:05:13.120 --> 00:05:19.400
The Unstoppable Programming Language or something like that from InfoWorld.

00:05:19.400 --> 00:05:21.880
And boy, it, I'll even pull it up.

00:05:21.880 --> 00:05:28.140
What an interesting situation where, you know, the subtitle of the article is Unstoppable Python.

00:05:28.140 --> 00:05:31.220
Once again, ranked number one in the TOV index.

00:05:31.440 --> 00:05:33.400
I think it's the breadth of the libraries, right?

00:05:33.400 --> 00:05:39.740
Like most of the languages, there's, you know, JavaScript is often at the top of that list, but it's only really for one purpose.

00:05:39.740 --> 00:05:41.120
It's for building web applications.

00:05:41.120 --> 00:05:44.440
And I know you can do other things in it and not trying to upset the internet.

00:05:44.840 --> 00:05:47.180
But with the data science behind.

00:05:47.180 --> 00:05:48.360
You're going to get us email, Chris.

00:05:48.360 --> 00:05:49.060
Oh, yeah, I'm sure.

00:05:49.060 --> 00:05:50.960
Well, you'll get them email.

00:05:50.960 --> 00:05:51.920
I'll be long gone.

00:05:51.920 --> 00:05:52.560
So that's fine.

00:05:52.560 --> 00:05:58.740
With the data science side, with the ML side, with the, you can do things on the web side, right?

00:05:58.740 --> 00:06:04.480
Like there's being number two in all of these areas very easily makes you want number one overall, right?

00:06:04.520 --> 00:06:07.320
So it's, I think it's the breadth more than anything.

00:06:07.320 --> 00:06:07.640
Yeah.

00:06:07.640 --> 00:06:14.380
You talked about how the company around was acquired and you had all this sort of time to kind of think about changes.

00:06:14.380 --> 00:06:23.700
I find times like that are really interesting ways to maybe refocus your career or to think about where you've been and where you might be going.

00:06:23.700 --> 00:06:27.260
Maybe whether you should turn left or right or just keep going the way you are.

00:06:27.260 --> 00:06:28.560
You know, I've had a few like that.

00:06:28.560 --> 00:06:31.800
And it's, those are some good opportunities to take if you can get them.

00:06:31.800 --> 00:06:33.800
Yeah, it gives you a chance to experiment if nothing else.

00:06:34.000 --> 00:06:36.780
You know, there was no pressure to pick up a language.

00:06:36.780 --> 00:06:37.860
I was a manager at the time.

00:06:37.860 --> 00:06:39.460
So there was no pressure at all, period.

00:06:39.460 --> 00:06:45.820
But yeah, it gives you the breathing room to go and play with a few things and get comfortable with it.

00:06:45.820 --> 00:06:48.900
And the next job I took was helping a small startup.

00:06:48.900 --> 00:06:53.680
And a manager comes to me and says, oh, pick the language, pick the stack.

00:06:53.680 --> 00:06:55.140
And I was like, okay, we'll do Python.

00:06:55.140 --> 00:06:55.800
We'll do Django.

00:06:55.800 --> 00:06:57.200
Then it sort of went from there.

00:06:57.200 --> 00:06:58.040
So good choice.

00:06:58.040 --> 00:06:58.760
How about now?

00:06:58.760 --> 00:06:59.660
What are you doing these days?

00:06:59.660 --> 00:07:03.760
My marketing people tells me, tell me I'm supposed to call myself a fractional CTO.

00:07:03.980 --> 00:07:08.380
So I help organizations with technical decisions and software processes.

00:07:08.380 --> 00:07:10.520
So that's architecture, some coding.

00:07:10.520 --> 00:07:13.340
Often it means nowadays the agile process stuff.

00:07:13.340 --> 00:07:14.500
So it's a bit of a mixed bag.

00:07:14.500 --> 00:07:22.320
I tend to specialize in trying to get small teams more efficient in some tech way, either the process or the learning itself.

00:07:22.760 --> 00:07:25.480
And because of the agile thing, I've done a fair amount of teaching.

00:07:25.480 --> 00:07:30.080
Because oftentimes when you're bootstrapping new teams, you got to start out with Scrum 101 and all that kind of good stuff.

00:07:30.080 --> 00:07:34.040
And that kind of led into the screencasting and online teaching world.

00:07:34.380 --> 00:07:38.380
So now I've done over 30 courses in Python and I'm still clicking along.

00:07:38.380 --> 00:07:45.980
So it's become this sort of side thing that I have that has blown up into its own thing.

00:07:45.980 --> 00:07:46.700
I can relate.

00:07:46.700 --> 00:07:47.500
I can definitely.

00:07:47.500 --> 00:07:48.120
It's awesome.

00:07:49.640 --> 00:07:50.420
Well, cool.

00:07:50.420 --> 00:07:57.720
So part of that actually is you and I just recently worked on a course for Talk Python training, Django, getting started.

00:07:57.720 --> 00:08:00.360
Which there's been, you know, it's a six hour course.

00:08:00.360 --> 00:08:01.080
People can check it out.

00:08:01.080 --> 00:08:02.140
There's a bunch of good stuff.

00:08:02.140 --> 00:08:04.120
We're not going to really talk about that.

00:08:04.180 --> 00:08:14.400
But it kind of got me thinking like, hey, wouldn't it be great to just cover all the cool little things that you touch on here and then just, you know, in your other training.

00:08:14.400 --> 00:08:22.640
I guess people probably could reach out to you if they've got a team and they want to maybe help them shift gears, help them change technologies or change the way they're working.

00:08:22.640 --> 00:08:23.260
Sure.

00:08:23.260 --> 00:08:25.360
Always nice to have the pipeline full.

00:08:25.360 --> 00:08:26.340
So for sure.

00:08:26.340 --> 00:08:26.720
Indeed.

00:08:26.720 --> 00:08:27.220
Yeah.

00:08:27.320 --> 00:08:36.380
So, you know, you always, you might be brought in to do one thing like, hey, help us do Django or help us change the way we're working with sort of deploying our apps or whatever.

00:08:36.380 --> 00:08:38.560
But then there's like, oh, but did you know about this tool?

00:08:38.560 --> 00:08:39.500
And have you tried this?

00:08:39.500 --> 00:08:40.900
And wouldn't it be easier if you use that?

00:08:40.900 --> 00:08:42.900
And so how about we make that the next hour?

00:08:42.900 --> 00:08:43.920
Yeah.

00:08:43.920 --> 00:08:46.040
You know, and this kind of ties back to that.

00:08:46.040 --> 00:08:48.720
You know, we were sort of talking about Python and the breadth of that, right?

00:08:48.720 --> 00:08:56.120
One of the reasons it's so easy to get a lot of things going is because there are so many libraries that have been there and done that.

00:08:56.380 --> 00:09:01.060
And I often, we're going to talk about later, you know, one of the ones that's sort of a catch all.

00:09:01.060 --> 00:09:06.500
And every time I'm in there, I'm like, oh, oh, wait, I need to remember that's in here because I keep writing that code.

00:09:06.500 --> 00:09:06.820
Right.

00:09:06.820 --> 00:09:13.740
And so knowing that things are out there and finding this stuff can make a big difference in how little code you have to write.

00:09:13.740 --> 00:09:21.140
And it's always great when someone else has tested it, because then not only are you not having to write it yourself, but it's probably more stable than the stuff that you're writing yourself.

00:09:21.140 --> 00:09:22.380
Or at least I'll speak for myself.

00:09:22.380 --> 00:09:23.820
It's more stable than my code.

00:09:23.820 --> 00:09:24.180
For sure.

00:09:24.480 --> 00:09:28.800
Well, I think, you know, people who are getting into programming think about what is an expert.

00:09:28.800 --> 00:09:36.220
An expert is somebody who could write these crazy algorithms or implement this wild file processing stuff from scratch.

00:09:36.220 --> 00:09:38.020
And that somewhat is true.

00:09:38.240 --> 00:09:43.720
But more often, the expert is the person that knows they can pip install this other thing and not have to write that.

00:09:43.720 --> 00:09:45.780
You know, they're like, oh, these libraries exist.

00:09:45.780 --> 00:09:47.580
I know they'll work in this situation.

00:09:47.580 --> 00:09:48.600
I don't need to do this.

00:09:48.600 --> 00:09:48.900
Right.

00:09:48.900 --> 00:09:49.780
So, yeah.

00:09:50.080 --> 00:09:52.960
It's both a power, but it's also really like knowing Python.

00:09:52.960 --> 00:09:57.520
I think knowing Python is partly knowing the libraries outside just the language.

00:09:57.520 --> 00:10:07.840
I would say more than partly like picking up a new language is if you've done a few before and it's in the same vein, although, you know, all the grandchildren of C based languages.

00:10:07.840 --> 00:10:10.820
It's like, OK, so how do they what's variable assignment look like?

00:10:10.820 --> 00:10:12.100
What does four loops look like?

00:10:12.100 --> 00:10:15.120
Once you've done that, you know, a few days later, you're ready to go.

00:10:15.840 --> 00:10:20.040
Knowing the depth of what's out there so that you don't have to write it, that takes forever.

00:10:20.040 --> 00:10:20.400
Right.

00:10:20.400 --> 00:10:23.840
So, you know, there's language expertise within months.

00:10:23.840 --> 00:10:28.000
There's library expertise, which is years and is constantly changing.

00:10:28.000 --> 00:10:29.160
It's nonstop.

00:10:29.160 --> 00:10:33.020
It's like you can't learn them as quickly as they come out, really, especially if you're in JavaScript.

00:10:33.020 --> 00:10:34.020
That's another story.

00:10:34.020 --> 00:10:37.320
Yeah, I saw a funny T-shirt that said I learned Python.

00:10:37.320 --> 00:10:38.180
It was a great weekend.

00:10:38.180 --> 00:10:40.980
And that's in some sense true.

00:10:40.980 --> 00:10:41.320
Right.

00:10:41.320 --> 00:10:45.720
But on the other, you'll compare and contrast that to like, I feel like I've been doing this forever.

00:10:45.720 --> 00:10:47.560
And I'm still learning every single day.

00:10:47.560 --> 00:10:49.140
How do you square those two things?

00:10:49.140 --> 00:10:49.360
Right.

00:10:49.360 --> 00:10:51.100
It's a lot largely what you just said.

00:10:51.100 --> 00:10:51.460
Yeah.

00:10:51.460 --> 00:10:52.000
All right.

00:10:52.000 --> 00:10:55.260
So we're going to talk about a bunch of different topics.

00:10:55.260 --> 00:10:56.980
We'll see what the final number is.

00:10:56.980 --> 00:11:03.140
17 ish different libraries, some of them directly pluggable into Django for specific things,

00:11:03.140 --> 00:11:05.060
and some of them just really helpful for Django.

00:11:05.060 --> 00:11:07.120
So you want to kick us off with the first one here?

00:11:07.120 --> 00:11:15.220
So there's sort of two groups in the first group of things that we're going to talk about are libraries that any project of a reasonable size should consider using.

00:11:15.380 --> 00:11:17.620
So these are like you said, these aren't the Django specific stuff.

00:11:17.620 --> 00:11:22.960
And then we'll get through a few of those and then we'll get into the actual this you should use this for Django.

00:11:22.960 --> 00:11:26.160
So this first one that you've got up on the screen there, this is coverage.

00:11:26.480 --> 00:11:31.320
This measures how much of your code gets run when you run your code.

00:11:31.320 --> 00:11:34.260
So it's typically used for your user tests.

00:11:34.260 --> 00:11:40.680
And what you're trying to figure out is how many how much of your code has been exercised when you run your tests.

00:11:40.680 --> 00:11:51.340
So it has sub commands, one of which is run, and you basically hand it any script and it will give you a output listing of what it saw as it went along.

00:11:51.340 --> 00:12:00.600
That output listing is like a file by file listing and shows you like a percentage mark that says, oh, you know, 30% or 50% or whatever of this file got executed in your run.

00:12:00.600 --> 00:12:06.620
And then there's a couple other commands that you can run that will combine all this information into a report.

00:12:06.800 --> 00:12:12.200
And the report is spit out in HTML and that gives you a fully annotated list of your code.

00:12:12.200 --> 00:12:14.980
So you can go in and see, oh, there's the red line.

00:12:14.980 --> 00:12:16.560
That's a line that didn't get triggered.

00:12:16.560 --> 00:12:23.600
So often I find when I'm writing tests, it's usually fairly easy to get the, you know, the easy path through, right?

00:12:23.600 --> 00:12:25.160
You're not thinking about the errors or whatever.

00:12:25.160 --> 00:12:26.500
You just sort of, oh, I exercised it.

00:12:26.500 --> 00:12:28.760
And then you go, oh, I've only got 75%.

00:12:28.760 --> 00:12:32.440
Well, finding if you want that, you want to have something higher than that.

00:12:32.440 --> 00:12:36.100
You go in, you look at the report and you go, oh, that red line is that error condition.

00:12:36.100 --> 00:12:39.480
Okay, I need to add a test to make sure that that error condition is handled properly.

00:12:39.480 --> 00:12:47.000
So I often take this one and then write a little bash script that does this, runs my tests and then runs a linter afterwards.

00:12:47.000 --> 00:12:49.200
So it's my little check-in hook, right?

00:12:49.200 --> 00:12:53.260
So just before I do a push, it'll go off and run all my tests and give me coverage.

00:12:53.260 --> 00:12:56.440
And if I don't like the numbers, then I go off and fix it some more.

00:12:56.440 --> 00:13:04.000
I think when you're learning about testing, it's important to test the happy path, but that's the one that often kind of obvious, right?

00:13:04.320 --> 00:13:06.480
You're going to know right away if that thing is broken.

00:13:06.480 --> 00:13:07.960
But it's those edge cases.

00:13:07.960 --> 00:13:14.920
What if I put a string into this input where, you know, a number like the word seven versus the number seven?

00:13:14.920 --> 00:13:23.600
Is that a 500 server error or is that a, sorry, invalid data, ideally even caught on the client side with HTML5 validation or something?

00:13:23.840 --> 00:13:25.560
Those kinds of things are really hard to think about.

00:13:25.560 --> 00:13:28.120
And coverage really points out, you know what?

00:13:28.120 --> 00:13:37.740
All the parts that are read that are uncovered, those are the error handling or the guarding clauses or the other cases where you're not normally going to run into them.

00:13:37.740 --> 00:13:39.500
So you really need to have a test to check them.

00:13:39.500 --> 00:13:40.200
Yeah, that's right.

00:13:40.200 --> 00:13:41.960
I'm also independent of coverage.

00:13:42.040 --> 00:13:44.540
I'm also a big fan of when bugs show up.

00:13:44.540 --> 00:13:47.540
I'm not a pure TDD guy until bugs show up.

00:13:47.540 --> 00:13:55.720
So when the bug shows up, I go and write the test that triggers the bug and then I fix it because then I'm adding to my regression test as well.

00:13:55.720 --> 00:13:55.940
Right.

00:13:55.940 --> 00:13:59.940
So that's also to your point, it's those weird conditions that you didn't even think of.

00:13:59.940 --> 00:14:08.480
And coverage, because it is only line based, you can get into trouble where, you know, the first part of an if clause passes and the second part doesn't.

00:14:08.480 --> 00:14:09.720
And so it's green.

00:14:09.720 --> 00:14:12.160
It looks like it's happy, but that doesn't mean you don't have a bug.

00:14:12.160 --> 00:14:12.380
Right.

00:14:12.380 --> 00:14:14.240
So there's always this mix and go.

00:14:14.240 --> 00:14:18.300
But coverage can help you find this stuff first time through if you're looking.

00:14:18.300 --> 00:14:21.180
I'm definitely not a purist, TDD purist myself either.

00:14:21.180 --> 00:14:28.300
I find there's tests add a lot of value, but there's also a practical, I just got to get some stuff done and I don't need to like retest everything.

00:14:28.300 --> 00:14:30.000
It'll only so many hours in the day.

00:14:30.000 --> 00:14:31.660
Yes, exactly.

00:14:31.660 --> 00:14:39.880
But I do like this idea of like once you found a bug, if you can reproduce it with a test, you kind of pin it down so you don't play whack-a-mole and have it ever come back.

00:14:39.880 --> 00:14:40.300
Exactly.

00:14:40.300 --> 00:14:40.620
Yeah.

00:14:40.620 --> 00:14:49.180
Kind of related to this whole part of the conversation, Anthony in the audience asks, he's interested to know how best to test Django web apps with pytest.

00:14:49.180 --> 00:14:54.200
Feels that there ought to be ready-made recipes for this, given how opinionated Django is.

00:14:54.200 --> 00:14:55.260
You got any thoughts on that?

00:14:55.260 --> 00:14:59.740
I don't actually use pytest myself, so I'm only vaguely familiar with it.

00:14:59.740 --> 00:15:00.980
There are some recipes out there.

00:15:00.980 --> 00:15:06.480
I know there are Django apps that you can install that will help you and pre-canned with the recipes.

00:15:06.480 --> 00:15:10.180
Django is fairly robust itself.

00:15:10.340 --> 00:15:15.600
It builds a whole bunch of things on top of the unit test framework that is very Django specific.

00:15:15.600 --> 00:15:19.220
And it allows you to shortcut the web as well.

00:15:19.220 --> 00:15:24.940
So you can access the views directly, which means you don't have to worry about like a lot of JavaScript and things like that.

00:15:25.100 --> 00:15:33.620
And it also has a live server mode, which I was playing with this afternoon, actually, which runs a server so that you can run things like Selenium on top of it.

00:15:33.620 --> 00:15:38.100
So there's a fairly rich set of mechanisms in there for Django to begin with.

00:15:38.680 --> 00:15:47.240
From what I understand of the pytest library, it really just sort of makes some of those hooks easier and exposes them rather than introducing a lot of extra functionality.

00:15:47.240 --> 00:15:47.660
For sure.

00:15:47.660 --> 00:15:50.440
Wouldn't you know that there's an awesome Django list?

00:15:50.440 --> 00:15:52.320
And it happens to be done by Will Vincent.

00:15:52.320 --> 00:15:55.820
In here, there's a whole section on testing.

00:15:55.820 --> 00:15:59.120
And you've got some pytest Django.

00:15:59.120 --> 00:16:01.960
You've got Factory Boy for test fixture replacements.

00:16:01.960 --> 00:16:04.300
A feature flipper Django waffle.

00:16:04.300 --> 00:16:06.100
That's kind of an interesting name.

00:16:06.420 --> 00:16:12.080
Model Bakery for creating, I'm guessing, the ORM models in interesting ways.

00:16:12.080 --> 00:16:13.740
And yeah, people can check this out.

00:16:13.740 --> 00:16:20.880
Another related question, Nick asks, I like to hear opinions on mocking the ORM database when testing versus actually using the database.

00:16:20.880 --> 00:16:22.440
I don't know how you feel about this, Chris.

00:16:22.440 --> 00:16:25.940
I don't tend to mock unless I absolutely have to.

00:16:25.940 --> 00:16:29.360
I usually mock for things like, oh, we have to do something with dates.

00:16:29.360 --> 00:16:34.380
And dates and times always cause problems because, you know, you're running the test now.

00:16:34.800 --> 00:16:38.980
For the ORM, I tend to just use tests straight into the ORM.

00:16:38.980 --> 00:16:43.800
Django comes with a lot of mechanisms like fixtures that allow you to push things into the database.

00:16:43.800 --> 00:16:49.660
And the test suite automatically will install those fixtures and wraps each test in transactions.

00:16:49.660 --> 00:16:52.340
So it does it and then undoes what you did.

00:16:52.340 --> 00:16:56.060
So you're always in a known good state at the beginning of each one of your functions.

00:16:56.460 --> 00:17:00.780
So I haven't really come across a case where I really need to mock out the ORM.

00:17:00.780 --> 00:17:05.520
I would guess there's probably a argument about speed there.

00:17:05.520 --> 00:17:09.600
But I tend to get around that with things like tagging my tests.

00:17:09.600 --> 00:17:13.800
So I will tag much that are like the smoke test, the quick one pass through.

00:17:13.800 --> 00:17:22.380
And if I need like a really fast test to run on, say, check in, then use a smoke tag and then let the regression run overnight if I have to or whatever.

00:17:22.380 --> 00:17:25.940
So I haven't come across the need for mocking it out yet myself.

00:17:25.940 --> 00:17:26.320
Yeah.

00:17:26.320 --> 00:17:30.540
And you can use SQLite with an in-memory database model as well.

00:17:30.540 --> 00:17:36.200
And just as start of the whole test run, you could fill that in-memory version up with known good test data.

00:17:36.200 --> 00:17:38.740
The transactions will kind of roll it back each time, right?

00:17:38.740 --> 00:17:44.220
And so just let it rip on SQLite in memory and then disappear into the ether of RAM.

00:17:44.220 --> 00:17:44.560
Yeah.

00:17:44.560 --> 00:17:49.660
It tends to be, unless you're doing huge amounts of work, it tends to be pretty peppy.

00:17:49.660 --> 00:17:50.040
Sure.

00:17:50.040 --> 00:17:50.500
Yeah.

00:17:50.500 --> 00:17:52.280
And you can choose how much data you put in it, right?

00:17:52.280 --> 00:17:53.720
So you can chill out on that.

00:17:56.280 --> 00:18:02.540
This episode of Talk Python To Me is brought to you by the IRL podcast, an original podcast from Mozilla.

00:18:02.540 --> 00:18:07.880
If you're like me, you care about the ideas behind technology, not just the tech itself.

00:18:07.880 --> 00:18:11.760
We know that tech has an enormous influence on society.

00:18:11.760 --> 00:18:14.040
Many of these effects are hugely beneficial.

00:18:14.040 --> 00:18:19.220
Just think about how much information we carry with us every day through our cell phones.

00:18:19.220 --> 00:18:22.420
Other tech influences can be more negative.

00:18:22.640 --> 00:18:30.040
I really appreciate that Mozilla is always on the lookout for and working to mitigate negative influences of tech for all of us.

00:18:30.040 --> 00:18:35.220
If those kinds of ideas resonate with you, you should definitely check out the IRL podcast.

00:18:35.220 --> 00:18:40.640
It's hosted by Bridget Todd, and this season of IRL looks at AI in real life.

00:18:40.640 --> 00:18:41.920
Who can AI help?

00:18:41.920 --> 00:18:42.960
Who can it harm?

00:18:42.960 --> 00:18:49.040
The show features fascinating conversations with people who are working to build a more trustworthy AI.

00:18:49.480 --> 00:18:59.440
For example, there's an episode on how the world is mapped with AI, but it's the data that's missing from those maps that tells as much of the story as the data that's there.

00:18:59.440 --> 00:19:03.580
Another episode is about gig workers who depend on apps for their livelihood.

00:19:03.580 --> 00:19:08.520
It looks at how they're pushing back against algorithms that control how much they get paid,

00:19:08.520 --> 00:19:14.300
and how they're seeking new ways to gain power over data and create better working conditions for all of them.

00:19:14.760 --> 00:19:21.860
And for you political junkies, there's even an episode about the role that AI plays when it comes to the spread of disinformation around elections.

00:19:21.860 --> 00:19:25.260
Obviously, a huge concern for democracies around the world.

00:19:25.260 --> 00:19:34.540
I just listened to The Tech That We Won't Build, which explores when developers and data scientists should consider saying no to projects that can be harmful to society,

00:19:34.540 --> 00:19:36.760
even though we do have the tech to build them.

00:19:37.160 --> 00:20:05.020
The next thing kind of related to that is PyFlakes.

00:20:05.020 --> 00:20:07.180
I mentioned at the end of that that I often use a linter.

00:20:07.180 --> 00:20:09.020
This is the one that I tend to go to.

00:20:09.020 --> 00:20:13.200
PyFlakes is code-focused rather than style-focused.

00:20:13.200 --> 00:20:19.740
So when I first started linting Python, a lot of the code I was maintaining was not PEP 8 compliant,

00:20:19.740 --> 00:20:23.860
and we'd run the linters and they were just constantly screaming about everything.

00:20:23.860 --> 00:20:27.280
PyFlakes was like a nice little happy medium for us.

00:20:27.540 --> 00:20:35.700
It runs using the abstract syntax trees, which means it doesn't actually load the modules, which is good because that means you're not having to do the side effects of your actual code.

00:20:35.880 --> 00:20:41.140
And I usually use it for things like finding unused imports and weird variables and things like that.

00:20:41.140 --> 00:20:50.100
The other place is I find if I've made a lot of changes across a whole bunch of files, running PyFlakes before I run my tests, it's sort of a bit of an idiot check, right?

00:20:50.160 --> 00:20:53.980
So the things that don't compile or whatever, it'll go through and run everything once for you.

00:20:53.980 --> 00:20:58.140
And it seems I find it faster to do that than, say, run all my tests first.

00:20:58.140 --> 00:20:58.440
Sure.

00:20:58.440 --> 00:21:04.720
This is kind of like a compiler, you know, and compiled languages, C++, C#, Swift, whatever.

00:21:05.200 --> 00:21:11.260
You press compile and there's a how does it all hang together sort of check that the system has to go through as a static language.

00:21:11.260 --> 00:21:12.480
And we don't have that.

00:21:12.480 --> 00:21:16.800
Even if you put type hints, that's a hint, not a requirement for accuracy.

00:21:16.800 --> 00:21:24.400
And so not saying that this does, you know, type validation like mypy, but it makes sure that your code at least somewhat hangs together, right?

00:21:24.400 --> 00:21:25.820
It's a nice, nice quick check.

00:21:25.820 --> 00:21:27.480
Yeah, it's a sanity checking.

00:21:27.480 --> 00:21:28.360
Yeah, absolutely.

00:21:28.360 --> 00:21:35.960
And there's a version of this, if you want to dig down into it, that is called Flake 8 that combines PyFlakes with PEP 8.

00:21:35.960 --> 00:21:41.960
So if you want to get all anal retentive about the code cleaning and all the rest of that, you can dig into that.

00:21:41.960 --> 00:21:44.780
And essentially, it's just called the same kind of commands after it.

00:21:44.780 --> 00:21:52.980
Also has a nice little, one of the things I always look for in a linter is the pragma that says ignore this line so that you can turn off the noise.

00:21:52.980 --> 00:21:56.400
Because every once in a while, there's going to be something that you want it to ignore.

00:21:56.600 --> 00:22:02.580
And I find as soon as you've got warnings popping up in your code, it starts to become broken window theory, right?

00:22:02.580 --> 00:22:03.960
Like, oh, there's a warning there.

00:22:03.960 --> 00:22:05.200
Oh, now there's two warnings there.

00:22:05.200 --> 00:22:06.260
Now there's three warnings there.

00:22:06.260 --> 00:22:09.160
And the next thing you know, you've got 100 warnings and nobody's doing anything about them.

00:22:09.160 --> 00:22:10.120
So I like to try.

00:22:10.120 --> 00:22:13.480
That's exactly the analogy I was thinking as well.

00:22:13.480 --> 00:22:14.960
And that's the way it is.

00:22:14.960 --> 00:22:22.100
Because especially in a team situation, you know, there's some people who are really bought into like CI and that kind of stuff.

00:22:22.100 --> 00:22:29.380
There's other people who are not really that interested and worried whether the test still passed or worried about whether the linters pass.

00:22:29.380 --> 00:22:30.920
And they're just going to go along.

00:22:30.920 --> 00:22:37.340
But certainly if that kind of stuff starts showing up, they're like, well, if it's already got warnings, I don't care about one more, you know?

00:22:37.340 --> 00:22:37.620
Yeah.

00:22:37.620 --> 00:22:39.600
So the zero warnings policy is pretty good.

00:22:39.600 --> 00:22:42.640
And this kind of thing helps you find that and check it easily.

00:22:42.760 --> 00:22:50.500
Right. So for people who are listening, you just put hash for comment, Blake 8 colon no QA on a line and then it'll skip that line.

00:22:50.500 --> 00:22:58.020
You know, there's times when you get advice that in general is good advice, like try accept past or something like that.

00:22:58.020 --> 00:22:59.040
You should never do that.

00:22:59.040 --> 00:23:06.880
Except for sometimes in little weird situations, you're like, no, I really just need this to not care if there's an error and just keep going.

00:23:06.880 --> 00:23:10.640
And we're just, you know, stuff and you'll you'll be stuck with this permanent warning.

00:23:10.640 --> 00:23:11.920
This file has an error.

00:23:11.920 --> 00:23:13.700
You're catching too broad of an exception.

00:23:13.700 --> 00:23:14.740
Like in general, yes.

00:23:14.740 --> 00:23:16.280
But right now I don't care.

00:23:16.280 --> 00:23:17.400
I accept that.

00:23:17.400 --> 00:23:18.520
Let's just keep going together.

00:23:18.520 --> 00:23:18.840
Yeah.

00:23:18.840 --> 00:23:22.040
And this kind of stuff really is great for making those warnings go away.

00:23:22.040 --> 00:23:24.660
And you can tie it into your PR process as well.

00:23:24.660 --> 00:23:34.400
So if I'm doing a poll review for something you've done where you've put this, we can have a policy that says there better be a comment above it that explains why you're allowed to ignore it in this session.

00:23:34.400 --> 00:23:37.100
So it becomes sort of two kinds of flag.

00:23:37.100 --> 00:23:38.320
It's a flag for pie flakes.

00:23:38.320 --> 00:23:44.600
And it's also a flag flag for your code reviewer to go, oh, we should explain why, you know, is this a valid case?

00:23:44.600 --> 00:23:45.360
Oh, yes, we do.

00:23:45.360 --> 00:23:46.840
This is this is the generic.

00:23:46.840 --> 00:23:51.240
So let's put a comment that says, yes, we meant to do this rather than I was just too lazy to fix it.

00:23:51.240 --> 00:23:52.300
Yeah, that's a really good point.

00:23:52.300 --> 00:23:53.340
Actually, I like that a lot.

00:23:53.580 --> 00:23:53.780
All right.

00:23:53.780 --> 00:23:58.000
On to another Sphinx, the Python documentation generator.

00:23:58.000 --> 00:23:58.400
Yeah.

00:23:58.400 --> 00:24:01.240
So this is a sort of bit of a left turn here.

00:24:01.240 --> 00:24:06.220
I will admit I am obsessive compulsive when it comes to comments and documentation.

00:24:06.220 --> 00:24:10.680
I did co-op in university, which is what I think they call paid internships in the US.

00:24:10.680 --> 00:24:15.040
And my third co-op term was with the same department as my second.

00:24:15.040 --> 00:24:18.920
And the first day back into the office, I said hello to everyone.

00:24:18.920 --> 00:24:21.840
And then my boss says, yeah, there's a bug in the code you wrote last term.

00:24:21.840 --> 00:24:22.620
Go fix it.

00:24:22.620 --> 00:24:27.100
And if my name had not been at the top of the commit, I would have sworn this was written by somebody else.

00:24:27.100 --> 00:24:28.380
The code was just hideous.

00:24:28.380 --> 00:24:32.940
And this is where I learned the whole comments are for other people is only half right.

00:24:32.940 --> 00:24:35.820
Sometimes you're that other person like eight months later.

00:24:35.820 --> 00:24:37.000
Just shifted in time.

00:24:37.000 --> 00:24:37.240
Yeah.

00:24:37.240 --> 00:24:37.680
Yeah.

00:24:37.780 --> 00:24:41.260
So I've become very, very, very retentive about it.

00:24:41.260 --> 00:24:48.640
And so what Sphinx is, is a mechanism for taking your PyDoc comments and turning it into documentation.

00:24:49.020 --> 00:24:55.980
And so if you were writing your comments already, it gives you a couple little formatting tags that you should take advantage of.

00:24:55.980 --> 00:25:03.360
But once you've done that, it's a lot of effort.

00:25:03.360 --> 00:25:10.740
So I've got a lot of effort to take advantage of the code.

00:25:10.740 --> 00:25:12.740
And so I've got a lot of effort to take advantage of the code.

00:25:12.740 --> 00:25:13.740
And so I've got a lot of effort to take advantage of the code.

00:25:13.740 --> 00:25:15.740
And so I've got a lot of effort to take advantage of the code.

00:25:15.740 --> 00:25:17.800
And so I've got a lot of effort to take advantage of the code.

00:25:17.800 --> 00:25:25.720
But one of the things I find I use a lot is you can highlight references to other parts of your code.

00:25:25.720 --> 00:25:37.000
So if I've got a class that I'm using here, an object that is some sort of class, if I note it properly in the comment, when the documentation is created, I can click a link and it'll take me through to it.

00:25:37.000 --> 00:25:39.340
So you can always find the cross references.

00:25:39.340 --> 00:25:40.340
Yeah, that's fantastic.

00:25:40.340 --> 00:25:43.600
Generates all sorts of different kinds of output.

00:25:43.600 --> 00:25:50.800
I personally only ever use the HTML, but it does EPUB, ManPages, LaTeX, if you want to spit out some PDF and some other things as well.

00:25:50.800 --> 00:25:56.840
Comes with a sort of a quick start command that builds all your cookie cutter files for what you need.

00:25:56.840 --> 00:26:01.640
It also allows you to intermix in general RST files.

00:26:01.640 --> 00:26:09.700
So if you want to write, say, a how-to guide separate from your code, but then suck in some documentation from your code, it allows you to mix and match that.

00:26:09.700 --> 00:26:10.620
So as an example.

00:26:10.620 --> 00:26:13.040
Tutorial or installing or something like that.

00:26:13.380 --> 00:26:20.840
Yeah, so I often will write, although Markdown is the most common format for the readme file on GitHub, I use readme.rst.

00:26:20.840 --> 00:26:28.600
And the reason I do that is because I usually use that same readme file as the intro file in my Sphinx doc.

00:26:28.600 --> 00:26:37.760
So I essentially just say, oh, go grab that readme.rst, pull it in here as the title page, add a little table of contents flag on the bottom of it.

00:26:37.760 --> 00:26:39.660
And the next thing you know, you've got some documentation.

00:26:39.660 --> 00:26:41.100
Yeah, that's really fantastic.

00:26:41.420 --> 00:26:45.960
It's great when you can get your work to multiply automatically.

00:26:45.960 --> 00:26:50.180
And obviously, you know, you've got to have been in the habit of doing this kind of stuff anyways.

00:26:50.180 --> 00:26:55.780
But if you were, adding a little bit of rigor to how you're writing the comments helps a lot.

00:26:55.780 --> 00:26:59.120
And I find particularly with things like APIs, right?

00:26:59.120 --> 00:27:02.880
Because you should be writing that doc string anyways that says this is what the call is.

00:27:02.880 --> 00:27:04.560
These are the parameters and what they mean.

00:27:04.760 --> 00:27:12.340
And it turns all that into a PDF document that you can, you know, hand off to managers or whatever, put up on your web page or however you like to do that.

00:27:12.340 --> 00:27:12.580
Yeah.

00:27:12.580 --> 00:27:20.960
For those who are not a fan of restructured text, there's the MIST markdown version or plugin.

00:27:20.960 --> 00:27:22.940
So you can do markdown as well these days.

00:27:23.020 --> 00:27:23.840
I have to check that out.

00:27:23.840 --> 00:27:24.820
I haven't played with that one yet.

00:27:24.820 --> 00:27:25.220
Yeah, yeah.

00:27:25.220 --> 00:27:25.720
It's pretty neat.

00:27:25.720 --> 00:27:29.220
You can even do inline restructured text within your markdown.

00:27:29.220 --> 00:27:30.620
So you're like, markdown, markdown.

00:27:30.620 --> 00:27:32.540
Oh, I need something a little bit more complicated.

00:27:32.540 --> 00:27:33.640
There's a way.

00:27:33.640 --> 00:27:38.240
I don't remember what the syntax is, but there's a way to, you know, inline a little restructured text.

00:27:38.240 --> 00:27:38.680
Excellent.

00:27:38.680 --> 00:27:39.900
And then fall back to markdown.

00:27:39.900 --> 00:27:40.180
Yeah.

00:27:40.180 --> 00:27:41.780
A little bit of an escape hatch.

00:27:41.780 --> 00:27:46.620
And then embed your HTML inside of your restructured text inside of your markdown.

00:27:46.620 --> 00:27:47.640
It's turtles all the way down.

00:27:47.640 --> 00:27:48.040
Excellent.

00:27:48.040 --> 00:27:48.720
Absolutely.

00:27:48.720 --> 00:27:52.400
The other thing, there are companion plugins for this as well.

00:27:52.400 --> 00:28:00.660
So one of the other libraries that I use is something called a Sphinx RTD theme, which is a read the docs style theme and plugs right in.

00:28:00.660 --> 00:28:06.340
And essentially, it allows you to generate your HTML looking like the read the docs site.

00:28:06.800 --> 00:28:13.620
And if you combine that with a git hook into read the docs, your read the docs will get automatically updated every single time you do your push up to git.

00:28:13.620 --> 00:28:15.540
So nice little combination there.

00:28:15.540 --> 00:28:16.360
Yeah, that's very cool.

00:28:16.360 --> 00:28:21.140
I do find it sort of meta that the Sphinx read the docs theme is hosted on read the docs.

00:28:21.140 --> 00:28:22.920
Yes.

00:28:22.920 --> 00:28:25.420
So fun.

00:28:25.420 --> 00:28:26.880
All right.

00:28:26.880 --> 00:28:28.020
PUDB.

00:28:28.020 --> 00:28:29.020
Is that the right?

00:28:29.020 --> 00:28:31.620
I have no idea how you're supposed to pronounce it.

00:28:31.620 --> 00:28:33.620
I always say PUDB, but that's fine.

00:28:33.620 --> 00:28:34.260
PUDB.

00:28:34.620 --> 00:28:43.660
Well, I do feel like a lot of these projects like this one, if you have too much of an acronym or you have too clever of a name, you really should put a, and here's the MP3 of how you say it.

00:28:43.660 --> 00:28:44.480
Hey, there you go.

00:28:44.480 --> 00:28:44.860
Yes.

00:28:44.860 --> 00:28:47.080
The little, I loved that answer with Linux.

00:28:47.080 --> 00:28:50.240
It was, hi, my name is Linus and this is how you spell Linux.

00:28:50.240 --> 00:28:51.600
And I couldn't understand his accent.

00:28:51.600 --> 00:28:52.760
It didn't clear anything up.

00:28:52.760 --> 00:28:53.460
It was fantastic.

00:28:53.460 --> 00:28:54.940
That's funny.

00:28:54.940 --> 00:28:57.400
I think I've mentioned up front that I'm old.

00:28:57.860 --> 00:29:02.980
So a lot of my early career was spent on Unix systems, SunSpark systems, that kind of stuff.

00:29:02.980 --> 00:29:06.440
And at the time there was this whole war between VI and Emacs.

00:29:06.440 --> 00:29:07.820
The war is over.

00:29:07.820 --> 00:29:09.100
I think VS Code won.

00:29:09.100 --> 00:29:14.900
But I picked VI because it was the only thing guaranteed to be installed on any of the systems I was telnetting into.

00:29:14.900 --> 00:29:18.920
And so I'm still very old school using Vim to this day.

00:29:18.920 --> 00:29:19.220
Yeah.

00:29:19.380 --> 00:29:20.500
I mean, you just said the word telnet.

00:29:20.500 --> 00:29:20.940
Come on.

00:29:20.940 --> 00:29:21.940
I'm keeping it.

00:29:21.940 --> 00:29:23.140
It was telnetting.

00:29:23.140 --> 00:29:24.160
It was pre-SSH.

00:29:24.160 --> 00:29:24.600
I know.

00:29:24.600 --> 00:29:24.880
Yeah.

00:29:24.880 --> 00:29:25.860
Now, hold on now.

00:29:25.860 --> 00:29:28.600
Did you do like Archie and Gopher before telnet?

00:29:28.600 --> 00:29:29.780
A little bit of Gopher.

00:29:29.780 --> 00:29:32.100
I'd never, I was never on an Archie system.

00:29:32.100 --> 00:29:33.180
I did a little bit of Gopher.

00:29:33.180 --> 00:29:33.520
Yeah.

00:29:33.520 --> 00:29:34.040
So.

00:29:34.040 --> 00:29:36.000
It could even go more old school than that, but yeah.

00:29:36.000 --> 00:29:36.220
Okay.

00:29:36.220 --> 00:29:36.540
Yeah.

00:29:36.540 --> 00:29:36.760
Great.

00:29:36.760 --> 00:29:40.020
So maybe these days you're SSH'd in, but same basic idea, right?

00:29:40.020 --> 00:29:40.880
Same basic idea.

00:29:40.880 --> 00:29:43.040
So why am I babbling about this?

00:29:43.040 --> 00:29:45.980
Well, what this means is because I use an editor rather than an IDE.

00:29:46.320 --> 00:29:49.980
And of course there's another place where you'll get letters because you can do everything in Vim

00:29:49.980 --> 00:29:50.240
script.

00:29:50.240 --> 00:29:53.600
So it's an IDE as well, but I tend to just use it as a letter editor.

00:29:53.600 --> 00:29:57.080
What that means is I tend to use a standalone debugger.

00:29:57.080 --> 00:29:59.220
So PUDB is one of those.

00:29:59.220 --> 00:30:00.960
It's a standalone debugger.

00:30:00.960 --> 00:30:04.960
I'm not sure why, but I've never been a big fan of PDB.

00:30:04.960 --> 00:30:06.140
The one that comes with Python.

00:30:06.140 --> 00:30:09.800
Part of that is because it's based on GDB, which I never liked either.

00:30:09.800 --> 00:30:14.220
I just need to see more screen, more code on my screen at a time.

00:30:14.620 --> 00:30:18.720
And so this is a TUI program, which is text user interface.

00:30:18.720 --> 00:30:23.340
And it's for, and if you want to, again, shout out to the old folks in the audience, it's

00:30:23.340 --> 00:30:25.440
got a very Borland turbo feel to it.

00:30:25.440 --> 00:30:28.560
So you can see the screen and the text that you're working on.

00:30:28.560 --> 00:30:32.700
And then there's a couple little side windows with your stack and your variables and set

00:30:32.700 --> 00:30:35.380
breakpoints, all the things you expect a debugger to do.

00:30:35.380 --> 00:30:39.520
And if you're stopped at a breakpoint, you can open up a REPL and it gives you full context

00:30:39.520 --> 00:30:41.820
of where you are, just like you would with inside of PDB.

00:30:41.820 --> 00:30:46.720
So I find oftentimes I'm doing more debugging in the REPL in context than I am actually in

00:30:46.720 --> 00:30:47.420
the debugger.

00:30:47.420 --> 00:30:52.560
Now, why this is a big deal for me is let alone the local.

00:30:52.560 --> 00:30:54.960
If I were using PyCharm or whatever, I can work locally.

00:30:54.960 --> 00:30:58.280
This will work anywhere where I can SSH into.

00:30:58.280 --> 00:31:02.400
So because it runs over the terminal, I can get into a machine.

00:31:02.740 --> 00:31:03.980
I can use this and have it work.

00:31:03.980 --> 00:31:07.340
And it means I'm using consistent environment across all the places I go.

00:31:07.340 --> 00:31:09.980
So I don't try to sell this to other people.

00:31:09.980 --> 00:31:14.540
When I manage teams, I don't say you will use this, but it tends to be my go-to.

00:31:14.540 --> 00:31:19.920
And I like to tell people that it's out there because you never know when you have to do that

00:31:19.920 --> 00:31:20.560
remote stuff.

00:31:20.560 --> 00:31:20.820
Yeah.

00:31:20.820 --> 00:31:25.260
A lot of times, you know, like it works on my machine and you get the certification even

00:31:25.260 --> 00:31:25.480
there.

00:31:25.480 --> 00:31:26.580
It works on my machine.

00:31:26.580 --> 00:31:29.260
And then I go to the server and it doesn't work.

00:31:29.260 --> 00:31:34.600
And I can't really figure out why, you know, especially when you're setting up a new environment,

00:31:34.600 --> 00:31:39.140
you're like, ah, trying to run the web app now and micro WSGI over here and it just won't

00:31:39.140 --> 00:31:40.780
start or something like that.

00:31:40.780 --> 00:31:40.940
Right.

00:31:40.980 --> 00:31:44.600
So the ability to get a little more insight over SSH is pretty cool.

00:31:44.600 --> 00:31:44.860
Yep.

00:31:44.860 --> 00:31:45.080
Good.

00:31:45.080 --> 00:31:45.860
All right.

00:31:45.860 --> 00:31:52.000
Is this, I think this may be our last sort of, nope, second to last general, general library

00:31:52.000 --> 00:31:52.640
is talks.

00:31:52.640 --> 00:31:52.960
Yep.

00:31:52.960 --> 00:31:56.080
So this is a wrapper for all your tests.

00:31:56.080 --> 00:32:01.960
So it essentially builds virtual environments based on a quick little configuration file.

00:32:01.960 --> 00:32:03.560
So give you an example.

00:32:03.860 --> 00:32:08.980
Let's say I've got a line that says pi brace three, seven, three, eight, three, nine, three,

00:32:08.980 --> 00:32:11.080
10 dash Django 400.

00:32:11.080 --> 00:32:16.200
It knows how to split that apart and we'll do all the combinations of running Python three,

00:32:16.200 --> 00:32:19.160
seven with 400, three, eight with 400 and et cetera, et cetera, et cetera.

00:32:19.160 --> 00:32:24.480
And it creates a little virtual environment for each one of those combinations and then runs

00:32:24.480 --> 00:32:27.680
all of your unit tests inside of that virtual environment.

00:32:27.680 --> 00:32:32.460
So if you're doing library support across multiple Python versions or across multiple, say,

00:32:32.540 --> 00:32:37.020
Django versions, then you can mix and match these with just a few lines inside of a configuration

00:32:37.020 --> 00:32:39.580
file and it will go off and run all of this.

00:32:39.580 --> 00:32:43.500
And those virtual environments are created locally and cached.

00:32:43.500 --> 00:32:48.700
So although the first time it runs, it's dreadfully slow because it has to pip install all of your

00:32:48.700 --> 00:32:50.160
requirements in each one of those environments.

00:32:50.160 --> 00:32:55.620
Once that's set up, it just leaves them there, which means, you know, first time hurts.

00:32:55.620 --> 00:32:56.740
And after that, it's not too bad.

00:32:56.740 --> 00:33:02.520
It's one of those trade-offs between I want an absolutely clean from scratch reproducible thing.

00:33:02.520 --> 00:33:03.000
Yes.

00:33:03.000 --> 00:33:04.360
Also, when I get my job done.

00:33:04.360 --> 00:33:09.800
So if you're going to test across five different versions of Python, maybe don't try to pip install

00:33:09.800 --> 00:33:15.160
something like micro whiskey or other things that have to compile for a great long while.

00:33:15.160 --> 00:33:17.020
Just, just leave it there.

00:33:17.020 --> 00:33:19.860
Because it does compile and leave it, you know, let it do it.

00:33:19.860 --> 00:33:20.620
Go get dinner.

00:33:20.620 --> 00:33:24.820
Come back and just never delete that virtual environment ever, ever again.

00:33:24.820 --> 00:33:25.280
Yeah.

00:33:25.280 --> 00:33:27.560
I suspect it has multiple levels of caching as well.

00:33:27.560 --> 00:33:31.540
Like if I pip install something and it's exactly the same version, it'll still be cached

00:33:31.540 --> 00:33:34.140
even on my machine, even if I recreate the virtual environment.

00:33:34.140 --> 00:33:34.980
So probably.

00:33:34.980 --> 00:33:35.920
There's levels of it.

00:33:35.920 --> 00:33:38.160
It essentially just creates a, I'm trying to remember.

00:33:38.160 --> 00:33:39.060
I think it's dot.

00:33:39.060 --> 00:33:40.880
It might even be dot VM.

00:33:40.880 --> 00:33:42.060
It might be dot talks.

00:33:42.060 --> 00:33:42.660
I can't remember.

00:33:42.660 --> 00:33:46.420
But it essentially just creates a directory and creates a directory inside of that for each

00:33:46.420 --> 00:33:47.260
one of your combinations.

00:33:47.400 --> 00:33:50.000
And then pip installs into that virtual environment.

00:33:50.000 --> 00:33:52.940
So when it runs the next time, it'll do upgrades and things like that.

00:33:52.940 --> 00:33:57.160
And if you need to, you can just go in and RMRF the directory and blow it away if you're

00:33:57.160 --> 00:33:58.860
running into trouble and need to start from scratch.

00:33:58.860 --> 00:34:01.000
It sounds interesting for a web app.

00:34:01.000 --> 00:34:04.400
It sounds super useful for a library package.

00:34:04.400 --> 00:34:05.760
That's where I tend to use it.

00:34:05.760 --> 00:34:10.200
So we'll talk later about one of my little bits of self-promotion here.

00:34:10.200 --> 00:34:12.660
But I've got a couple of Django libraries that are out there.

00:34:12.660 --> 00:34:18.240
And, you know, I support 3.6 through 4.0, I haven't got around to 4.1 yet, and three

00:34:18.240 --> 00:34:19.760
or four versions of Django in it.

00:34:19.760 --> 00:34:24.220
And every once in a while, you'll run into something that just doesn't work in some version

00:34:24.220 --> 00:34:25.840
that you think is generic.

00:34:25.840 --> 00:34:30.140
And it's become a lot easier since I've dropped support for 2.7 because there was a lot more

00:34:30.140 --> 00:34:31.400
crap having to deal with that.

00:34:31.400 --> 00:34:32.960
But that's how you catch those things.

00:34:32.960 --> 00:34:33.660
Yeah, absolutely.

00:34:33.660 --> 00:34:36.660
The last general one here is Pillow.

00:34:36.660 --> 00:34:38.060
This is semi-general.

00:34:38.060 --> 00:34:41.400
In case you're sleepy, you're programming too long and you just need to take like a little

00:34:41.400 --> 00:34:42.740
bit of a nap or what's going on here?

00:34:42.740 --> 00:34:43.740
That's what it's for.

00:34:43.740 --> 00:34:44.360
That's right.

00:34:44.360 --> 00:34:45.780
Pillow is for sleeping.

00:34:45.780 --> 00:34:48.640
It's also for image manipulation.

00:34:48.640 --> 00:34:52.000
So I don't do a lot of graphics stuff.

00:34:52.000 --> 00:34:56.480
My Batman logo, notwithstanding, was very early on in my programming career.

00:34:56.480 --> 00:35:01.820
But in fact, Django has a semi-dependency on this.

00:35:01.820 --> 00:35:03.580
You don't need it out of the gate.

00:35:03.580 --> 00:35:06.640
But if you're using certain features in Django, you do have to have it installed.

00:35:07.120 --> 00:35:09.700
There's a field in Django, which is the image file field.

00:35:09.700 --> 00:35:14.560
And it uses the Pillow library to make sure that the files that are associated with it

00:35:14.560 --> 00:35:15.780
actually are images.

00:35:15.780 --> 00:35:19.380
So this is a really deep, really cool image processing library.

00:35:19.380 --> 00:35:22.120
And I tend to just skim the surface of it.

00:35:22.120 --> 00:35:26.440
I use it for image and I use it for a couple libraries as well that deal with image thumbnails.

00:35:26.440 --> 00:35:28.340
But otherwise, I don't really touch it.

00:35:28.340 --> 00:35:33.140
But it tends to be one of those things that if I go through all of the virtual environments

00:35:33.140 --> 00:35:36.240
set up on my system, I'm finding, oh, it's installed in a lot of them.

00:35:36.240 --> 00:35:40.040
So it's one of those that's kind of common that I, because I don't do a lot of image stuff,

00:35:40.040 --> 00:35:43.020
it's not something that I'm playing with a lot.

00:35:43.020 --> 00:35:44.480
But it's very, very powerful.

00:35:44.480 --> 00:35:47.640
So if you're into this kind of stuff, this is a great library to play with.

00:35:47.640 --> 00:35:54.720
And if you're not, you may want just the surface level pieces for some web things like thumbnails.

00:35:54.720 --> 00:35:58.620
If you're running a website that accepts, say, image upload, for example.

00:35:58.620 --> 00:35:59.120
Yes.

00:35:59.120 --> 00:36:02.040
You obviously need this for the Django ORM field.

00:36:02.040 --> 00:36:03.240
That's the image type.

00:36:03.240 --> 00:36:06.620
But you could also say, if it's too large, let's just resize it.

00:36:06.620 --> 00:36:09.260
Or you can resize it to the same size all the time.

00:36:09.260 --> 00:36:14.140
You know, it drives me crazy when I go to sites where like, this image is 1500 by something

00:36:14.140 --> 00:36:15.800
and we only support 1280.

00:36:15.800 --> 00:36:17.120
It's like, just resize it then.

00:36:17.120 --> 00:36:17.760
Yes.

00:36:17.760 --> 00:36:19.600
Yeah.

00:36:19.600 --> 00:36:25.900
I've also used it in like in some command line scripts, which will like create like two

00:36:25.900 --> 00:36:28.640
or three versions of an image that is in the static files.

00:36:28.640 --> 00:36:28.880
Right.

00:36:28.880 --> 00:36:30.380
So it'll automatically go through.

00:36:30.380 --> 00:36:33.920
And like you said, okay, we've got our master that's, you know, 1500 by 1500.

00:36:33.920 --> 00:36:36.280
And it'll go create some extra ones or whatever.

00:36:36.280 --> 00:36:39.700
And you run a command and it'll run through all your static files and check that there's two

00:36:39.700 --> 00:36:41.440
or three size versions or that kind of thing.

00:36:41.440 --> 00:36:44.600
So again, if you're playing with the web, size is important.

00:36:44.600 --> 00:36:44.880
Right.

00:36:45.000 --> 00:36:50.100
So yeah, for example, if you want to have icons for your web app that can be saved to

00:36:50.100 --> 00:36:54.980
iOS home screens, you know, they want all these different sizes from like 512 down to 64.

00:36:54.980 --> 00:36:59.540
And if you're doing retina or high resolution, you can have different ones that get swapped

00:36:59.540 --> 00:37:00.140
in and out.

00:37:00.140 --> 00:37:02.820
And like, it'd be really nice to just automate all that.

00:37:02.820 --> 00:37:03.020
Right.

00:37:03.020 --> 00:37:03.480
That's right.

00:37:03.480 --> 00:37:03.600
Yeah.

00:37:03.600 --> 00:37:10.360
This portion of Talk Python To Me is brought to you by Microsoft for Startups Founders Hub.

00:37:10.360 --> 00:37:12.440
Starting a business is hard.

00:37:12.440 --> 00:37:17.360
By some estimates, over 90% of startups will go out of business in just their first year.

00:37:17.360 --> 00:37:23.060
With that in mind, Microsoft for Startups set out to understand what startups need to be successful

00:37:23.060 --> 00:37:26.840
and to create a digital platform to help them overcome those challenges.

00:37:26.840 --> 00:37:29.540
Microsoft for Startups Founders Hub was born.

00:37:29.540 --> 00:37:36.160
Founders Hub provides all founders at any stage with free resources to solve their startup challenges.

00:37:36.160 --> 00:37:41.760
The platform provides technology benefits, access to expert guidance and skilled resources,

00:37:41.760 --> 00:37:44.800
mentorship and networking connections, and much more.

00:37:44.800 --> 00:37:50.620
Unlike others in the industry, Microsoft for Startups Founders Hub doesn't require startups to be

00:37:50.620 --> 00:37:53.840
investor backed or third party validated to participate.

00:37:53.840 --> 00:37:57.080
Founders Hub is truly open to all.

00:37:57.400 --> 00:37:58.560
So what do you get if you join them?

00:37:58.560 --> 00:38:03.400
You speed up your development with free access to GitHub and Microsoft Cloud computing resources

00:38:03.400 --> 00:38:06.820
and the ability to unlock more credits over time.

00:38:06.820 --> 00:38:11.520
To help your startup innovate, Founders Hub is partnering with innovative companies like OpenAI,

00:38:11.520 --> 00:38:16.540
a global leader in AI research and development, to provide exclusive benefits and discounts.

00:38:17.140 --> 00:38:21.980
Through Microsoft for Startups Founders Hub, becoming a founder is no longer about who you know.

00:38:21.980 --> 00:38:27.620
You'll have access to their mentorship network, giving you a pool of hundreds of mentors across a range of disciplines

00:38:27.620 --> 00:38:33.240
and areas like idea validation, fundraising, management and coaching, sales and marketing,

00:38:33.240 --> 00:38:35.520
as well as specific technical stress points.

00:38:35.520 --> 00:38:40.740
You'll be able to book a one-on-one meeting with the mentors, many of whom are former founders themselves.

00:38:40.740 --> 00:38:45.900
Make your idea a reality today with the critical support you'll get from Founders Hub.

00:38:46.000 --> 00:38:51.840
To join the program, just visit talkpython.fm/founders hub, all one word, no links in your show notes.

00:38:51.840 --> 00:38:54.160
Thank you to Microsoft for supporting the show.

00:38:54.160 --> 00:39:05.040
This one, I'm going to vote this next one here as probably the best icon of all the things we're going to talk about.

00:39:05.040 --> 00:39:06.540
It's the Django Ninja.

00:39:06.540 --> 00:39:09.220
Yes, they've done a good job with it.

00:39:09.220 --> 00:39:14.780
There's a special flavor of marketing to open source projects, isn't there?

00:39:14.780 --> 00:39:15.580
Yes, there is.

00:39:15.580 --> 00:39:16.980
Yes, I think it's called none.

00:39:16.980 --> 00:39:22.300
We could talk for hours on why it's called the GIMP.

00:39:22.300 --> 00:39:30.500
Anyways, I find that because I'm a Django guy, I don't have a really strong need for single page applications.

00:39:30.500 --> 00:39:37.440
A lot of the work I find I end up doing, Django templates is good enough for many of the pages in the application.

00:39:37.440 --> 00:39:40.060
But then there's going to be some pages where you want to do fancier stuff.

00:39:40.060 --> 00:39:45.040
So I often use view.js so that I can do best of both worlds there.

00:39:45.240 --> 00:39:48.120
So I, you know, this is kind of a multi page application.

00:39:48.120 --> 00:39:53.640
So those pages that require SPA kind of feel to it, they have view on it.

00:39:53.640 --> 00:39:58.760
And those that don't, I just use generic 1.0 web style stuff.

00:39:58.760 --> 00:40:05.540
So in the 2.0 world, you need REST APIs and enter Django Ninja.

00:40:05.540 --> 00:40:06.480
This is what it does.

00:40:06.480 --> 00:40:11.620
So it sits on top of a Django view and essentially RESTifies the view.

00:40:11.620 --> 00:40:15.620
And I, when I say on top, I mean that literally you actually use decorators.

00:40:15.740 --> 00:40:24.180
So you write a view, decorate it with an HTTP method like get or put, and then that view outputs JSON instead of your usual HTML.

00:40:24.180 --> 00:40:27.080
The library is built on top of Pydantic.

00:40:27.080 --> 00:40:31.920
So it relies heavily on the types to help it define the JSON that comes out.

00:40:31.920 --> 00:40:36.960
You write a little schema file that says the names and types of the fields for the JSON output.

00:40:36.960 --> 00:40:43.060
And it's got a schema that is based on top of Django models.

00:40:43.500 --> 00:40:47.060
So this works a lot like a model form if you've ever used one of those.

00:40:47.060 --> 00:40:50.320
So let's say I've got, you know, a Django model called a customer.

00:40:50.320 --> 00:40:56.260
I can create a schema called customer out that inherits from Django, from Ninja's model schema.

00:40:56.260 --> 00:41:00.540
I create a subclass called config, which is kind of like the meta subclass in Django.

00:41:00.540 --> 00:41:04.040
And it sets the model attribute to point to the customer.

00:41:04.040 --> 00:41:07.180
And if I want to use all the fields in the model, that's it.

00:41:07.180 --> 00:41:08.820
It's basically just the three lines.

00:41:08.820 --> 00:41:11.460
And you can customize that.

00:41:11.540 --> 00:41:15.660
So like model form, you can say, don't use all the fields, only use these fields.

00:41:15.660 --> 00:41:21.840
Or you can add fields if there's things like, say you want a field called name that combines first name and last name.

00:41:21.840 --> 00:41:25.540
You can build something that computes that so that it doesn't actually use the model directly.

00:41:25.540 --> 00:41:33.900
So oftentimes you end up having to write a couple of these because you often need the inbound and the outbound to have different fields in it.

00:41:33.900 --> 00:41:40.560
So a common practice is to have your schema for customer be called, say, customer out or customer in.

00:41:40.560 --> 00:41:43.500
There's nothing that enforces that, but that's how they do it in their documentation.

00:41:43.500 --> 00:41:46.000
And I've kind of just sort of picked up the habit as you go along.

00:41:46.000 --> 00:41:53.120
Yeah, it's so tempting sometimes to think, oh, we can just exchange the same model inbound and outbound in so many ways that just doesn't pan out.

00:41:53.120 --> 00:41:59.800
Even if you're using something like Beanie or SQL model or something where like literally the Pydantic model goes in the database as well.

00:41:59.800 --> 00:42:04.960
Often that's not even the same thing because, for example, your inbound create user, you want a password.

00:42:04.960 --> 00:42:09.120
Your response, you'd never want to send the user the password directly back.

00:42:09.120 --> 00:42:10.420
You shouldn't even know what it is.

00:42:10.420 --> 00:42:13.280
The ID field is the most common thing, right?

00:42:13.280 --> 00:42:19.620
Like every model's got one and there's hacks you can do to say, oh, if it's zero, it's a create, you know, and that's a common way of doing things.

00:42:19.620 --> 00:42:23.120
But for Django Ninja, what I often just do is just leave it out.

00:42:23.120 --> 00:42:26.480
And because there are objects like anything else, you can inherit it, right?

00:42:26.500 --> 00:42:29.460
So you can start with the in and then add the ID to it.

00:42:29.460 --> 00:42:30.940
So there's ways around it.

00:42:30.940 --> 00:42:31.740
It's what it comes down to.

00:42:31.740 --> 00:42:35.000
The Django Ninja can be plugged into an existing Django app.

00:42:35.000 --> 00:42:38.740
It's not like a separate thing that I run that is also correct like Django.

00:42:38.740 --> 00:42:41.220
It's actually just stuff that sits on top.

00:42:41.220 --> 00:42:42.520
It's got its own routes.

00:42:42.520 --> 00:42:47.200
So essentially you're building Django views, but you're decorating them with the Ninja.

00:42:47.200 --> 00:42:54.240
And when you decorate it, it automatically collects all of those underneath one path in the URLs file.

00:42:54.240 --> 00:42:55.780
So you set up a router.

00:42:56.100 --> 00:42:58.340
Usually you set it to say something like slash API.

00:42:58.340 --> 00:43:05.480
And so back to that customer example I was using, if I added a view for create customer, I set it to the customer path.

00:43:05.480 --> 00:43:09.820
And because it's decorated, it automatically ends up under slash API slash customers.

00:43:09.820 --> 00:43:12.560
So it takes care of a lot of that for you.

00:43:12.560 --> 00:43:16.200
It looks like it also has async support as well, which is pretty neat.

00:43:16.200 --> 00:43:18.680
It started from scratch with the asyncio.

00:43:18.900 --> 00:43:23.820
I'm not 100% sure of this, but I think there's a couple former DRF guys on here.

00:43:23.820 --> 00:43:28.480
And I think it was a rewrite from scratch with async from the beginning and Pydantic.

00:43:28.480 --> 00:43:30.920
So I think it's sort of the next generation.

00:43:30.920 --> 00:43:33.320
The key writers weren't in the DRF.

00:43:33.320 --> 00:43:37.740
They obviously took a lot of learning from what was there and what worked and what didn't work.

00:43:37.820 --> 00:43:41.080
It's pretty familiar to FastAPI type of programming.

00:43:41.080 --> 00:43:44.580
And it has a lot of uses of type hints, right?

00:43:44.580 --> 00:43:47.220
For example, you have an API function that takes a delay.

00:43:47.220 --> 00:43:48.060
It says it's an integer.

00:43:48.060 --> 00:43:51.880
I suppose it probably actually parses that and validates it and so on.

00:43:51.960 --> 00:43:52.200
Yes.

00:43:52.200 --> 00:43:56.820
And it's particularly useful as well because by the time you're getting things down, you

00:43:56.820 --> 00:43:59.560
know, your web string, everything is string, right?

00:43:59.560 --> 00:44:01.640
Like when you post it, it's all coming up in the string.

00:44:01.640 --> 00:44:05.720
So somebody somewhere has to go, oh, that's supposed to be an int and try to convert it.

00:44:05.720 --> 00:44:07.860
So it takes care of a lot of that kind of stuff.

00:44:07.860 --> 00:44:12.000
And in fact, one of the reasons there's so little coding in this, particularly with the

00:44:12.000 --> 00:44:16.400
schema definitions is because you're just, if you've already got that model file, it knows

00:44:16.400 --> 00:44:20.800
the Django field is a text field or is a Boolean or is an integer.

00:44:20.920 --> 00:44:22.580
And it goes, oh, okay, I know what to do with that, right?

00:44:22.580 --> 00:44:26.980
So it essentially is building on top of that stuff that's already there for your existing

00:44:26.980 --> 00:44:27.300
code.

00:44:27.300 --> 00:44:27.940
That's really cool.

00:44:27.940 --> 00:44:31.200
And you basically so much of the validation has already happened.

00:44:31.200 --> 00:44:34.440
By the time it gets to you, you're much closer to the right answer.

00:44:34.440 --> 00:44:35.700
You don't have to check so many things.

00:44:35.700 --> 00:44:36.860
Much less code you have to write.

00:44:36.860 --> 00:44:37.340
Yeah, for sure.

00:44:37.340 --> 00:44:42.420
And if that's not good enough on top of all of this is it comes with a web-based debugging

00:44:42.420 --> 00:44:42.720
view.

00:44:42.720 --> 00:44:44.940
So it lists all of your registered calls.

00:44:44.940 --> 00:44:46.580
You can go and click on things.

00:44:46.580 --> 00:44:48.300
Authentication is required for the call.

00:44:48.300 --> 00:44:50.520
And it's got a whole bunch of stuff in the back end for that as well.

00:44:50.880 --> 00:44:56.100
You can click through and say, okay, I push this button and paste in my key or hit the

00:44:56.100 --> 00:44:58.400
login button in my Django and then use it that way.

00:44:58.400 --> 00:45:03.480
So it allows you to sort of see all of this and it includes in it the output in curl.

00:45:03.480 --> 00:45:08.960
So as you're using the debugger, you can copy and paste the line into your terminal and then

00:45:08.960 --> 00:45:09.700
run it in curl.

00:45:09.700 --> 00:45:12.980
It's a quick little tool for helping you sort of figure it all out.

00:45:12.980 --> 00:45:14.000
Pretty powerful.

00:45:14.000 --> 00:45:20.420
It even has an interesting sync to async adapter decorator to allow you to work with the ORM

00:45:20.420 --> 00:45:22.400
until it's kind of migrated along.

00:45:22.400 --> 00:45:26.020
Shouldn't be as necessary now that 4.1's out because that was one of the major changes in

00:45:26.020 --> 00:45:28.220
Django 4.1 is they added async to the ORM.

00:45:28.220 --> 00:45:30.040
So yeah, that's really a big deal.

00:45:30.040 --> 00:45:30.320
Yeah.

00:45:30.320 --> 00:45:34.560
I actually remember one of the comments I saw on Twitter after 4.1 came out was, oh, the

00:45:34.560 --> 00:45:36.680
Django guys, the ninja guys are going to love this.

00:45:36.680 --> 00:45:37.300
I'm like, yeah.

00:45:38.700 --> 00:45:39.460
Sounds like it.

00:45:39.460 --> 00:45:40.240
All right.

00:45:40.240 --> 00:45:43.780
Julio asks, is this as complete as Django REST framework?

00:45:43.780 --> 00:45:46.860
And Nick Harvey says it looks lighter than Django REST framework.

00:45:46.860 --> 00:45:50.860
Maybe give your thoughts and then we can maybe pull up the next topic.

00:45:50.860 --> 00:45:56.180
Why don't we punt seeing as the next one is the Django REST framework and we can talk about

00:45:56.180 --> 00:45:56.980
it as we go along.

00:45:56.980 --> 00:45:59.760
The short answer is no, it's definitely not as complete.

00:45:59.760 --> 00:46:04.960
So the Django REST framework or DRF to its friends is Ninja's granddaddy.

00:46:04.960 --> 00:46:08.600
And it for a long time was the go-to REST library in Django.

00:46:08.900 --> 00:46:11.700
Like Ninja, it breaks things down into serializers.

00:46:11.700 --> 00:46:14.280
That's the equivalent of a schema and then views and routes.

00:46:14.280 --> 00:46:18.080
And like Ninja, it supports decorators, but it also supports classes.

00:46:18.080 --> 00:46:21.260
But because it's older, it doesn't support the type mechanism.

00:46:21.260 --> 00:46:24.600
So you have to do a little more boilerplate code to get this going.

00:46:24.600 --> 00:46:27.440
You have to do a few more things with the serializers.

00:46:27.440 --> 00:46:32.040
It tends to, I was going to say it tends to favor a class-based approach.

00:46:32.040 --> 00:46:33.120
I'm not sure if that's true.

00:46:33.120 --> 00:46:36.380
When I write with the DRF, I tend to use the class-based approach.

00:46:36.500 --> 00:46:40.280
There are other mechanisms in there, but it seems to be the one that felt natural for

00:46:40.280 --> 00:46:40.640
me there.

00:46:40.640 --> 00:46:43.180
It has a concept called a view set class.

00:46:43.180 --> 00:46:48.920
And this is really where it shines because you define an object, which is an endpoint.

00:46:48.920 --> 00:46:53.400
And then you can say inside of that endpoint, I want to do list and create and retrieve and

00:46:53.400 --> 00:46:54.300
update and destroy.

00:46:54.480 --> 00:46:56.700
And you tie that into your query set.

00:46:56.700 --> 00:46:59.240
And it does all of those things for your object.

00:46:59.240 --> 00:47:03.600
So back to my customer example, I could build out that customer endpoint.

00:47:03.600 --> 00:47:06.500
And then I can say, I want to use list, create and retrieve.

00:47:06.500 --> 00:47:11.280
And it'll allow me to create a customer or list all the customers or get a specific customer.

00:47:11.280 --> 00:47:13.700
And it does it based on mix-ins.

00:47:13.700 --> 00:47:17.800
So you can mix and match what, which of those choices you want.

00:47:17.900 --> 00:47:20.220
So it's sort of this composing kind of mechanism.

00:47:20.220 --> 00:47:24.880
I question or sort of an observation here from, to be fair, I haven't done much with

00:47:24.880 --> 00:47:25.420
DRF.

00:47:25.420 --> 00:47:31.140
But it feels to me like a lot of what you're getting with DRF is like, I have a database

00:47:31.140 --> 00:47:31.660
table.

00:47:31.660 --> 00:47:34.660
Let me do the rest things to it.

00:47:34.660 --> 00:47:38.420
Like I want to be able to do a get against and get all of them or get against an ID and

00:47:38.420 --> 00:47:39.380
get individual ones.

00:47:39.440 --> 00:47:43.340
I want to be able to do a post and maybe create one where it's a lot.

00:47:43.340 --> 00:47:46.940
It seems like it's very structured around CRUD, but over API.

00:47:46.940 --> 00:47:48.660
Is that accurate or no?

00:47:48.660 --> 00:47:49.960
There are ways around it.

00:47:49.960 --> 00:47:55.560
So the concept of a serializer does not have to be tied to a model, but this is a tool for

00:47:55.560 --> 00:47:55.860
Django.

00:47:55.860 --> 00:47:59.060
So it's not really a surprise that it's kind of tied to the models.

00:47:59.060 --> 00:48:04.980
And that's for the most part, even with Ninja, I find 80% of what you're doing over the rest

00:48:04.980 --> 00:48:08.200
API is mapping to your database models in the first place.

00:48:08.360 --> 00:48:12.840
particular if you're doing it for something like React, because the things in your database

00:48:12.840 --> 00:48:15.260
are usually what you're showing up on the screen.

00:48:15.260 --> 00:48:17.900
So it usually tends to map fairly easily.

00:48:17.900 --> 00:48:22.220
And there's enough depth there that if you need to introduce new fields or do something

00:48:22.220 --> 00:48:24.700
custom, it doesn't handcuff you.

00:48:24.700 --> 00:48:28.300
It does allow you to do a lot of this stuff easier, though.

00:48:28.300 --> 00:48:32.860
So like if you are sticking with things that map nicely to your database, then, you know,

00:48:32.860 --> 00:48:35.660
it requires far less code is what it comes down to.

00:48:35.660 --> 00:48:40.040
I guess to get back to that sort of question, it is just definitely lighter weight.

00:48:40.040 --> 00:48:45.380
It definitely I find requires less code than the DRF because it takes advantage of things

00:48:45.380 --> 00:48:48.360
like the typing that which DRF is older and it didn't exist.

00:48:48.360 --> 00:48:52.320
And it was compatible with Python 2 and some of the stuff where those type pieces weren't

00:48:52.320 --> 00:48:52.660
there.

00:48:53.140 --> 00:48:56.420
DRF has a much richer output listing.

00:48:56.420 --> 00:49:02.960
So if I were going to need something that was not JSON based, for example, over REST, I might

00:49:02.960 --> 00:49:03.920
go back to the DRF.

00:49:03.920 --> 00:49:10.960
So it's got mechanisms for either through it or through plugins, YAML, XML, MessagePack, Excel,

00:49:10.960 --> 00:49:12.260
even LaTeX, right?

00:49:12.320 --> 00:49:16.040
So there's libraries that go with these libraries that make this that sort of connect these things

00:49:16.040 --> 00:49:16.400
together.

00:49:16.400 --> 00:49:18.580
So, yeah, there's there's a lot of depth here.

00:49:18.580 --> 00:49:25.440
The only place that the DRF makes me really, really nervous and is the permission mechanism.

00:49:25.440 --> 00:49:28.880
I have shot myself in the foot a few too many times doing it.

00:49:29.460 --> 00:49:34.560
It's fine by default, but then as soon as you start mucking with it a little bit, it seems

00:49:34.560 --> 00:49:36.220
to open up a whole bunch of things.

00:49:36.220 --> 00:49:40.840
You have to make sure once you start playing in that space that you do it correctly and test

00:49:40.840 --> 00:49:41.280
properly.

00:49:41.280 --> 00:49:43.260
Otherwise, you could have gaping holes.

00:49:43.260 --> 00:49:46.620
Ninja seemed to be a little more locked down by default.

00:49:46.620 --> 00:49:47.740
So I kind of liked that.

00:49:47.740 --> 00:49:51.960
But that could just because I'm missing toes from playing with the DRF over the years.

00:49:51.960 --> 00:49:54.460
You know what the guns look like?

00:49:54.460 --> 00:49:54.620
Yeah.

00:49:54.620 --> 00:49:57.920
Tishar asked, I think this is probably in reference to the Django Ninja.

00:49:58.200 --> 00:50:00.860
It looks similar to FastAPI and how would you compare them?

00:50:00.860 --> 00:50:03.580
It's a lot of sort of similar kind of concepts.

00:50:03.580 --> 00:50:10.880
And in fact, you know, either between FastAPI, the typing mechanisms, is FastAPI directly based

00:50:10.880 --> 00:50:13.180
on Pydantic or just deeply influenced by it?

00:50:13.180 --> 00:50:18.380
I think just I feel like Pydantic became very popular because of FastAPI, but they're separate

00:50:18.380 --> 00:50:18.860
projects.

00:50:18.860 --> 00:50:19.280
Okay.

00:50:19.280 --> 00:50:20.260
Separate maintainers.

00:50:20.260 --> 00:50:21.800
Ninja is built on top of Pydantic.

00:50:21.800 --> 00:50:25.980
So, you know, they're all being inspired by the same thing and trying to solve very similar

00:50:25.980 --> 00:50:26.420
problems.

00:50:26.420 --> 00:50:28.860
So it's not surprising me that people are seeing.

00:50:28.860 --> 00:50:29.460
Yeah, exactly.

00:50:29.460 --> 00:50:33.560
And at the bottom of the Django Ninja site, it says, this project was heavily inspired by

00:50:33.560 --> 00:50:34.280
FastAPI.

00:50:34.280 --> 00:50:34.520
Yeah.

00:50:34.520 --> 00:50:39.140
My feeling is like, if you're already doing Django and you want to add APIs and you like

00:50:39.140 --> 00:50:44.080
FastAPI, this might be a really good option because it brings so much of a similar model,

00:50:44.080 --> 00:50:48.320
but you don't have to now maintain two apps that like run separately or version separately,

00:50:48.320 --> 00:50:49.080
all that.

00:50:49.080 --> 00:50:49.260
Yeah.

00:50:49.260 --> 00:50:54.700
I also find it's got a little bit of a flask flavoring as well, right?

00:50:54.700 --> 00:50:55.960
As to how some of those pieces.

00:50:55.960 --> 00:50:59.840
And again, that's the same thing, FastAPI, using the decorators, using the types, right?

00:50:59.840 --> 00:51:03.120
So it's a similar kind of influences if nothing else.

00:51:03.120 --> 00:51:03.340
Yeah.

00:51:03.340 --> 00:51:03.940
Very neat.

00:51:03.940 --> 00:51:04.320
I think.

00:51:04.320 --> 00:51:05.040
All right.

00:51:05.040 --> 00:51:06.780
Django Grappelli.

00:51:06.780 --> 00:51:08.080
What's this one for?

00:51:08.080 --> 00:51:08.540
All right.

00:51:08.540 --> 00:51:10.460
So a little bit of a tangent here for a second.

00:51:10.460 --> 00:51:15.040
Django is named after a jazz guitarist named Django Reinhardt.

00:51:15.040 --> 00:51:19.920
And he was often a duo working with somebody named Stefan Grappelli.

00:51:19.920 --> 00:51:24.800
So if you're looking for a name for a library for Django, Grappelli is a good fit.

00:51:24.800 --> 00:51:26.660
So now great.

00:51:26.660 --> 00:51:27.460
We've got a name.

00:51:27.460 --> 00:51:29.140
What does it do?

00:51:29.140 --> 00:51:32.760
This is actually a reskinning of the Django admin.

00:51:32.760 --> 00:51:37.400
So the Grappelli folks have taken advantage of the fact that the Django admin is built on

00:51:37.400 --> 00:51:42.580
top of the Django templating mechanism, and they've rewritten all those templates using

00:51:42.580 --> 00:51:43.580
a new style.

00:51:43.860 --> 00:51:48.200
The style still feels a little dated, but not quite as dated as the Django admin.

00:51:48.200 --> 00:51:49.580
So it's a step in the right direction.

00:51:49.580 --> 00:51:55.620
It does logical things like a lot of the top right-hand corner, you know, reset password

00:51:55.620 --> 00:51:56.360
view page.

00:51:56.360 --> 00:51:59.620
A lot of that stuff gets moved into like little dropdowns and that kind of thing.

00:51:59.620 --> 00:52:01.680
The coloring is a little more consistent.

00:52:01.680 --> 00:52:03.480
It uses a footer.

00:52:03.480 --> 00:52:06.160
So like the actions are always in the same place.

00:52:06.160 --> 00:52:08.680
It just generally feels cleaner to me.

00:52:08.680 --> 00:52:13.620
I often use the Django admin for like my backend support people.

00:52:13.620 --> 00:52:15.940
Don't tend to use it customer facing.

00:52:15.940 --> 00:52:21.580
So, you know, folks who are trainable and I find that when I've used it with them, Grappelli

00:52:21.580 --> 00:52:22.800
feels better for them.

00:52:22.800 --> 00:52:24.360
They just, it feels a little more intuitive.

00:52:24.740 --> 00:52:30.960
So it's just a, it really is just a skin, but it's a nice skin and it's a really easy install.

00:52:30.960 --> 00:52:32.240
You have very little you have to do.

00:52:32.240 --> 00:52:36.200
You get a couple, a couple of changes to your settings.py file and it's all done for you.

00:52:36.200 --> 00:52:36.440
So.

00:52:36.620 --> 00:52:36.720
Yeah.

00:52:36.720 --> 00:52:41.140
And also it looks like, you know, you hear skin, you think, oh, it's pretty, but it also

00:52:41.140 --> 00:52:43.360
seems like it adds more functionality.

00:52:43.360 --> 00:52:46.500
Like it adds autocomplete for foreign keys and relationships.

00:52:46.500 --> 00:52:50.980
It adds like a tiny MCE, which is rich text editor.

00:52:50.980 --> 00:52:53.700
It adds reordering through drag and drop.

00:52:53.700 --> 00:52:56.060
I mean, those are a little bit more than just pretty, right?

00:52:56.060 --> 00:52:58.760
It's modernization of the interface is really what it comes down to.

00:52:58.760 --> 00:52:59.000
Yeah.

00:52:59.000 --> 00:52:59.320
Yeah.

00:52:59.320 --> 00:52:59.760
Very cool.

00:52:59.760 --> 00:53:05.900
So another random Django bit of history to go along with the musicians was created in Lawrence,

00:53:05.900 --> 00:53:06.500
Kansas, right?

00:53:06.660 --> 00:53:06.900
Yes.

00:53:06.900 --> 00:53:07.520
By the newspaper.

00:53:07.520 --> 00:53:09.200
That's where I went to college.

00:53:09.200 --> 00:53:09.560
So.

00:53:09.560 --> 00:53:10.520
Ah, okay.

00:53:10.520 --> 00:53:14.220
Right, right down the street from the home of Django around the same timeframe.

00:53:14.220 --> 00:53:14.800
There you go.

00:53:14.800 --> 00:53:15.060
Right.

00:53:15.060 --> 00:53:15.420
All right.

00:53:15.420 --> 00:53:16.820
So what's up next?

00:53:16.820 --> 00:53:17.620
Import export.

00:53:17.620 --> 00:53:19.500
So it's like a distributor.

00:53:19.500 --> 00:53:22.060
It's going to make some money off selling rugs or what's the deal?

00:53:22.060 --> 00:53:22.540
Rugs.

00:53:22.540 --> 00:53:22.880
Yes.

00:53:22.880 --> 00:53:23.300
Sure.

00:53:23.300 --> 00:53:23.940
Rugs.

00:53:23.940 --> 00:53:26.460
All right.

00:53:26.460 --> 00:53:31.920
Unlike Grappelli, where you have no idea by the name, this one's a little better.

00:53:31.920 --> 00:53:34.500
You might have an idea what it does, right?

00:53:34.500 --> 00:53:36.360
Less creative, more straight to the point.

00:53:36.460 --> 00:53:37.980
Like this is a utilitarian name.

00:53:37.980 --> 00:53:40.220
I can import or I can export stuff from Django.

00:53:40.220 --> 00:53:40.540
Okay.

00:53:40.540 --> 00:53:41.340
That's exactly it.

00:53:41.340 --> 00:53:41.960
How does it work though?

00:53:41.960 --> 00:53:42.100
What?

00:53:42.100 --> 00:53:46.300
Like, I mean, not just a database dump, probably something more interesting than that.

00:53:46.300 --> 00:53:46.500
Yeah.

00:53:46.500 --> 00:53:51.680
So it's built on top of Tablib, which is a Python library for tabular data formats.

00:53:51.680 --> 00:53:57.200
And essentially it maps things out of your ORM to whatever Tablib can handle.

00:53:57.380 --> 00:54:04.200
So that's Excel, JSON, YAML, Pandas, HTML, JIRA, TSV, ODS, CSV, DBF.

00:54:04.200 --> 00:54:06.180
And I even know what some of those acronyms mean.

00:54:06.180 --> 00:54:10.240
It's essentially your go-to place for spitting stuff out.

00:54:10.900 --> 00:54:15.620
So like Ninja and like the DRF, it has this, what it calls resources.

00:54:15.620 --> 00:54:16.740
This is like our schema.

00:54:16.740 --> 00:54:19.740
And it essentially does that mapping thing again.

00:54:19.740 --> 00:54:24.160
So you can say, I want to take this model and I want to map it to this mechanism.

00:54:24.420 --> 00:54:28.640
And then it'll, you just run it and say, export this to JSON and you'll get it in JSON.

00:54:28.640 --> 00:54:31.400
Export this to YAML and it'll export it to YAML.

00:54:31.400 --> 00:54:35.200
There are mechanisms inside of the resources, similar to what I was talking about in Ninja

00:54:35.200 --> 00:54:37.180
and the DRF to do compositing.

00:54:37.180 --> 00:54:42.220
So if I want a name field, which is based on first name and last name, it'll combine all

00:54:42.220 --> 00:54:43.620
those things and give that to you together.

00:54:43.620 --> 00:54:47.780
One of the things that I like most, I haven't used this library a lot, but when I have used

00:54:47.780 --> 00:54:52.040
it, it's because of this feature, which is it integrates nicely with the Django admin.

00:54:52.220 --> 00:54:55.200
So you essentially can build one of these resources.

00:54:55.200 --> 00:55:00.300
Let's say back to my customer example, let's say you want to be able to import customers.

00:55:00.300 --> 00:55:06.080
You can essentially define the resource and then you add a mix in to your customer admin

00:55:06.080 --> 00:55:10.040
object and it automatically gives you an import button on the client screen.

00:55:10.040 --> 00:55:13.880
And when you hit that import, it'll upload, you give it the CSV file.

00:55:13.880 --> 00:55:17.760
It gives you a little screen that says, oh, this is the data that's coming in.

00:55:17.760 --> 00:55:19.520
And you can say, yes, I like it.

00:55:19.520 --> 00:55:20.920
And it'll put it into the database.

00:55:21.140 --> 00:55:24.820
And it's smart enough to know the difference between creates and updates.

00:55:24.820 --> 00:55:29.060
So depending on whether or not your ID field is blank, this is back to that zero thing we

00:55:29.060 --> 00:55:30.040
were talking about before.

00:55:30.040 --> 00:55:32.420
It will actually update things that are there.

00:55:32.420 --> 00:55:38.960
So if you've got a situation where you've got a client phone book or something that's maintained

00:55:38.960 --> 00:55:43.400
through some other system and you need to keep them in sync, this is a quick and easy way

00:55:43.400 --> 00:55:44.000
to do that.

00:55:44.520 --> 00:55:50.120
throw it together with a management command and stick it in a cron job and you can constantly

00:55:50.120 --> 00:55:51.080
push these things through.

00:55:51.080 --> 00:55:56.660
It might sound really simple, but the ability to say, hey, business person or manager or salesperson,

00:55:56.660 --> 00:55:59.520
you can just take your CSV and upload it.

00:55:59.520 --> 00:56:02.920
You don't have to bother the dev team to add your data.

00:56:03.080 --> 00:56:05.240
Like that's pretty fantastic, actually.

00:56:05.240 --> 00:56:08.400
One of my clients is a very lightweight CMS.

00:56:08.400 --> 00:56:14.080
And of course, when they sign up a new customer, they don't want to have to input their customer's

00:56:14.080 --> 00:56:14.880
data by hand.

00:56:14.880 --> 00:56:15.100
Right.

00:56:15.100 --> 00:56:16.140
So you can say, oh, go.

00:56:16.140 --> 00:56:18.080
You have it in an Excel file somewhere.

00:56:18.080 --> 00:56:18.540
Great.

00:56:18.540 --> 00:56:20.120
Save as put it in this format.

00:56:20.120 --> 00:56:21.460
Suck it all the data in.

00:56:21.600 --> 00:56:23.060
So it can make a big difference.

00:56:23.060 --> 00:56:23.320
Yeah.

00:56:23.320 --> 00:56:25.460
And the preview, make sure this looks good.

00:56:25.460 --> 00:56:26.980
Like that's also an important part.

00:56:26.980 --> 00:56:28.040
That's a lifesaver, right?

00:56:28.040 --> 00:56:29.700
You know exactly what you're getting in there.

00:56:29.700 --> 00:56:34.180
You can check it rather than it going, you know, running havoc all over your database.

00:56:34.180 --> 00:56:38.680
Which it probably would if people just randomly start uploading stuff.

00:56:38.680 --> 00:56:39.140
Exactly.

00:56:39.140 --> 00:56:42.840
And that might make your app crash, but you could use the Django debug toolbar to figure out

00:56:42.840 --> 00:56:43.500
what's going on.

00:56:43.500 --> 00:56:44.960
Look at you, king of the segues.

00:56:44.960 --> 00:56:45.580
Yes.

00:56:45.580 --> 00:56:46.120
Oh, yeah.

00:56:46.120 --> 00:56:50.180
So the next one here is, as you said, this is the Django debug toolbar.

00:56:50.180 --> 00:56:55.620
So this is a plugin for Django that overlays over your views and gives you all sorts of

00:56:55.620 --> 00:56:57.040
information what's going on in your page.

00:56:57.040 --> 00:57:02.100
The installation is a little more involved than, hey, just add this to settings.py because

00:57:02.100 --> 00:57:04.840
you need some middleware and some static files and things.

00:57:04.840 --> 00:57:06.900
But once you've, the instructions are good though.

00:57:06.900 --> 00:57:09.260
So as long as you follow the instructions closely, you'll be okay.

00:57:09.260 --> 00:57:12.980
And once you got that going, it pops up in the top right-hand corner.

00:57:12.980 --> 00:57:14.560
I think that's actually configurable.

00:57:14.560 --> 00:57:17.520
And it has a list of panels.

00:57:17.520 --> 00:57:20.120
It comes with, I think it's 12 of them.

00:57:20.120 --> 00:57:22.520
And then there's a whole bunch of plugins that you can do as well.

00:57:22.520 --> 00:57:25.480
So for example, there's history information.

00:57:25.480 --> 00:57:28.620
A useful one I find I use a fair amount is the time panel.

00:57:28.620 --> 00:57:33.020
So it shows you the breakdown of where, you know, where your call has been spent.

00:57:33.020 --> 00:57:37.100
The one you've got up on the screen there right now is the one that saves my bacon all

00:57:37.100 --> 00:57:38.920
the time, which is the SQL panel.

00:57:39.160 --> 00:57:42.900
So it shows you exactly what queries were run, how long each of them took.

00:57:42.900 --> 00:57:46.100
I understand enough database stuff to just get me in trouble, right?

00:57:46.100 --> 00:57:50.760
The ORM provides this nice abstraction that I find really helpful, but I'm aware that I'm,

00:57:50.760 --> 00:57:53.320
you know, sometimes I'm doing things that aren't efficient in SQL.

00:57:53.320 --> 00:57:55.860
Or you don't know you're doing something inefficient, right?

00:57:55.860 --> 00:57:58.080
You might not be aware you forgot a join.

00:57:58.080 --> 00:57:58.780
Exactly.

00:57:58.780 --> 00:58:01.540
And now you have this N plus one problem where you're like, I thought I did one query.

00:58:01.540 --> 00:58:03.900
Why are there 50 queries, 51 queries on this page?

00:58:03.900 --> 00:58:03.920
Exactly.

00:58:03.920 --> 00:58:04.380
You know?

00:58:04.480 --> 00:58:08.260
So when you've got that sluggishness, you go to the time panel, you see that you're

00:58:08.260 --> 00:58:10.300
spending all your time in the SQL space.

00:58:10.300 --> 00:58:12.480
Then you go to the SQL panel and you go, oh, okay.

00:58:12.480 --> 00:58:13.720
So this is where it is.

00:58:13.720 --> 00:58:15.100
I'm beating my database to death.

00:58:15.100 --> 00:58:15.680
Why?

00:58:15.680 --> 00:58:19.260
And then you can figure out, like you said, oh, I need to add an index or, you know, I

00:58:19.260 --> 00:58:20.720
need to change the join or whatever.

00:58:20.720 --> 00:58:21.060
Right.

00:58:21.060 --> 00:58:25.580
So in the Django debug toolbar, it has a time section that says CPU and total.

00:58:25.580 --> 00:58:29.660
And if the CPU time is the majority, then it's your Python code.

00:58:29.660 --> 00:58:32.400
If it's not, then it's like, what are you waiting on?

00:58:32.400 --> 00:58:34.300
Are you waiting on a database or an API?

00:58:34.300 --> 00:58:37.500
Or go look somewhere else because it's not your code exactly.

00:58:37.500 --> 00:58:40.580
It's an external resource that's holding it up, right?

00:58:40.580 --> 00:58:40.840
Yeah.

00:58:40.840 --> 00:58:43.480
So it helps you sort of pull these things through it.

00:58:43.480 --> 00:58:47.680
And it's information that's available in any profiler as well, but it's there in combined

00:58:47.680 --> 00:58:48.320
with other things.

00:58:48.320 --> 00:58:49.720
So you don't have to go do it separately.

00:58:49.720 --> 00:58:51.180
So there's other ones there.

00:58:51.180 --> 00:58:56.600
Things like caching, headers, signal registering, logging, the list goes on.

00:58:56.600 --> 00:59:00.920
And then it's a published mechanism for how you build your own panels.

00:59:00.920 --> 00:59:05.920
So even on the main site, there's another 19 panels with instructions on how to write your

00:59:05.920 --> 00:59:06.160
own.

00:59:06.160 --> 00:59:09.600
And if you go digging, there are people that aren't in the official list as well.

00:59:09.600 --> 00:59:12.240
So there are dozens and dozens of them out there.

00:59:12.240 --> 00:59:12.580
For sure.

00:59:12.580 --> 00:59:14.720
Probably in the awesome Django.

00:59:14.720 --> 00:59:15.580
I bet.

00:59:15.580 --> 00:59:19.760
You know, I bet there's like, there's a whole thing on the toolbar.

00:59:19.760 --> 00:59:20.380
Yeah.

00:59:20.380 --> 00:59:21.800
It was right there at the top where you're testing.

00:59:21.800 --> 00:59:22.240
That's right.

00:59:22.240 --> 00:59:22.540
Yeah.

00:59:22.540 --> 00:59:22.840
Yeah.

00:59:22.840 --> 00:59:25.220
I thought maybe there'd be a list of plugins as well.

00:59:25.220 --> 00:59:25.960
Oh, a subset.

00:59:25.960 --> 00:59:26.380
Yeah.

00:59:26.380 --> 00:59:26.840
Yeah.

00:59:26.840 --> 00:59:27.140
Yeah.

00:59:27.140 --> 00:59:27.280
Yeah.

00:59:27.280 --> 00:59:28.340
Like a subsection.

00:59:28.340 --> 00:59:32.820
But yeah, these things are really nice and I find them to be quite useful on the, you

00:59:32.820 --> 00:59:34.520
know, they've got different, I got the whole list here.

00:59:34.520 --> 00:59:35.300
Like profiling.

00:59:35.300 --> 00:59:36.240
That's kind of cool.

00:59:36.240 --> 00:59:42.140
I guess one also, one really quick thing you might want to touch on for everybody is it might

00:59:42.140 --> 00:59:43.680
not be best to put this in production.

00:59:44.720 --> 00:59:45.160
Yes.

00:59:45.160 --> 00:59:48.120
I think there's a rule against turning this off in production.

00:59:48.120 --> 00:59:51.380
If I remember correctly, it will not run if debug is set to true.

00:59:51.380 --> 00:59:52.180
It's to false.

00:59:52.180 --> 00:59:52.680
Excuse me.

00:59:52.680 --> 00:59:54.380
So by out of the box.

00:59:54.380 --> 00:59:59.160
So if you're, if you're following best practices of setting debug to false in your production environments,

00:59:59.160 --> 01:00:00.000
it won't be there.

01:00:00.000 --> 01:00:02.760
It doesn't hurt to belt and suspenders that though.

01:00:02.760 --> 01:00:07.700
I usually put this, if I'm using it, I usually put it inside of my, you know, requirements

01:00:07.700 --> 01:00:08.480
dash dev.

01:00:08.480 --> 01:00:13.860
And I have a little hack I use to build up my installed apps that I add to it from local

01:00:14.400 --> 01:00:18.760
things, which there's a podcast in and of itself there as to how you configure in different

01:00:18.760 --> 01:00:19.200
environments.

01:00:19.200 --> 01:00:24.820
But I often only add this to that piece or hackishly commented in and out as I need to.

01:00:24.820 --> 01:00:30.760
It's a little bit of a crude lever, but if it's not in the requirements.txt or pyproject.toml

01:00:30.760 --> 01:00:33.880
or whatever, you're not going to accidentally run the toolbar if it's not installed.

01:00:33.880 --> 01:00:35.340
So don't install it in production.

01:00:35.340 --> 01:00:35.660
Yep.

01:00:35.660 --> 01:00:36.140
Exactly.

01:00:36.140 --> 01:00:36.800
Effective, right?

01:00:36.800 --> 01:00:37.020
Yep.

01:00:37.020 --> 01:00:38.340
How about some local flavor?

01:00:38.340 --> 01:00:39.420
Yep.

01:00:39.420 --> 01:00:40.580
Local flavor.

01:00:40.580 --> 01:00:46.880
So this package eons ago used to actually be inside of Django and it just got kept getting

01:00:46.880 --> 01:00:47.520
bigger and bigger.

01:00:47.520 --> 01:00:52.300
And essentially this is the localization information for different countries.

01:00:52.300 --> 01:00:56.620
So for example, the CA folder is for Canada, which is where I'm from.

01:00:56.620 --> 01:00:58.640
It includes a list of all the provinces.

01:00:58.640 --> 01:01:00.080
That's what we call states.

01:01:00.380 --> 01:01:05.300
It's got a widget for postal codes, which is what we call zip codes and social insurance

01:01:05.300 --> 01:01:07.640
numbers, which is what we call social insurance numbers.

01:01:07.640 --> 01:01:10.520
Although we use a different acronym for whatever reason.

01:01:10.520 --> 01:01:15.300
So essentially, if you're using things like shipping addresses, you want local flavor.

01:01:15.300 --> 01:01:22.340
It's mostly just giant dictionaries and collections of tuples, but it's useful data that often you

01:01:22.340 --> 01:01:23.340
would end up writing yourself.

01:01:23.340 --> 01:01:25.580
And it's always nice when somebody else is maintaining it.

01:01:26.020 --> 01:01:30.360
And for any fellow non-Americans listening, it is spelt without the U.

01:01:30.360 --> 01:01:34.740
I'm not sure if it was intentional when they picked the name that the name itself needs

01:01:34.740 --> 01:01:40.160
internationalization or whether that was just an amusing little accident, but that's what it is.

01:01:40.160 --> 01:01:42.060
So even just having the country codes is great.

01:01:42.060 --> 01:01:45.800
Is this something that maybe makes sense to use outside of Django or is it?

01:01:45.800 --> 01:01:47.600
I'm not sure how easy.

01:01:47.600 --> 01:01:49.300
I've never done it.

01:01:49.300 --> 01:01:50.160
It might work.

01:01:50.160 --> 01:01:55.880
It really is just a long dictionary and collections of tuples, but some of it's kind of Django

01:01:55.880 --> 01:01:56.320
Django-esque.

01:01:56.320 --> 01:02:01.260
For example, the list of provinces is set up so that you can use it easily inside of

01:02:01.260 --> 01:02:03.860
a dropdown in a choices field.

01:02:03.860 --> 01:02:04.240
Got it.

01:02:04.240 --> 01:02:08.420
You might be able to take advantage of it without that, but it's formatted in a fashion that makes

01:02:08.420 --> 01:02:09.900
sense in the Django world.

01:02:09.900 --> 01:02:10.380
Good to know.

01:02:10.380 --> 01:02:10.780
All right.

01:02:10.780 --> 01:02:15.460
We already talked about the import and the export buttons, but even more buttons on the admin

01:02:15.460 --> 01:02:16.040
if we want them.

01:02:16.040 --> 01:02:16.980
Even more buttons.

01:02:16.980 --> 01:02:17.460
Yes.

01:02:17.460 --> 01:02:18.980
You can always do with more buttons.

01:02:18.980 --> 01:02:23.220
So I've only used this one a couple times, but it saved me a whole bunch of work.

01:02:23.660 --> 01:02:25.420
So I thought it deserved a mention.

01:02:25.420 --> 01:02:30.180
The Django admin area pretty much is mapped to your model objects.

01:02:30.180 --> 01:02:32.480
It really is just sitting on top of your ORM.

01:02:32.480 --> 01:02:37.560
And every once in a while, you're going to need something that you want your support staff

01:02:37.560 --> 01:02:41.440
to be able to do that isn't really directly tied to the ORM.

01:02:41.440 --> 01:02:46.560
And in fact, I've seen libraries out there that hack things, creating fake objects inside

01:02:46.560 --> 01:02:49.140
of the database so that they will show up in the ORM properly.

01:02:49.140 --> 01:02:52.100
And instead of doing that, you use admin extra buttons.

01:02:52.100 --> 01:02:57.760
So this is really just a way of inserting views into your admin.

01:02:57.760 --> 01:03:03.820
And it's got a quick little mechanism for forms so that if you hit a button, it'll pop up the

01:03:03.820 --> 01:03:04.440
form for you.

01:03:04.480 --> 01:03:08.020
You can fill in the form and then it'll give you the data from the form as a callback.

01:03:08.020 --> 01:03:09.920
And then you can do whatever you want with it.

01:03:10.060 --> 01:03:16.500
So where I've used it recently was I had a complex count creation mechanism that has to create

01:03:16.500 --> 01:03:19.180
like five or six different objects that have to be tied together.

01:03:19.180 --> 01:03:23.700
So instead of having my support staff going in and using the admin to create each one of

01:03:23.700 --> 01:03:25.860
those separately, I gave them a little button.

01:03:25.860 --> 01:03:29.540
They fill in the form and it creates all the objects and ties them together nicely.

01:03:29.940 --> 01:03:34.280
And actually just a couple of days ago, I added one, which was sometimes I'll have in

01:03:34.280 --> 01:03:38.080
production code, like a couple of accounts that are like sample accounts that you want

01:03:38.080 --> 01:03:42.400
to reset the data to a known state so that you can hand it off to demo somebody or quick

01:03:42.400 --> 01:03:44.000
if you're trying to sell a client or something.

01:03:44.000 --> 01:03:46.080
So this doesn't even require the form.

01:03:46.080 --> 01:03:50.140
There's a mechanism in here called confirm action, which essentially is it gives you the

01:03:50.140 --> 01:03:50.420
button.

01:03:50.420 --> 01:03:53.100
It pops up a little thing that says, are you sure you want to do this?

01:03:53.100 --> 01:03:56.980
And if you say yes, it goes off and calls your little five lines of code.

01:03:56.980 --> 01:03:58.460
So it's nice and clean.

01:03:59.100 --> 01:04:05.000
The form rendering is ugly is the word, but that kind of fits with the traditional,

01:04:05.000 --> 01:04:05.640
traditional.

01:04:05.640 --> 01:04:06.400
It's traditional.

01:04:06.400 --> 01:04:09.480
It fits very nicely with what's inside of the Django admin.

01:04:09.480 --> 01:04:12.600
It doesn't look out of place, but there's nothing sexy with it.

01:04:12.600 --> 01:04:15.440
I have not used it in combination with Grappelli yet.

01:04:15.440 --> 01:04:18.360
So it'd be interesting to see what happens in that case.

01:04:18.360 --> 01:04:23.040
There's basically very little styling on the form, but it has saved me a whole bunch of

01:04:23.040 --> 01:04:23.400
code.

01:04:23.400 --> 01:04:28.860
And oftentimes I find when you're writing things for your support staff, they're spending 90%

01:04:28.860 --> 01:04:30.540
of the time inside of the admin anyways.

01:04:30.540 --> 01:04:35.080
So pulling them out of it for one special page is a bit of a pain.

01:04:35.400 --> 01:04:38.160
And you usually have to write a whole bunch of extra stuff on top of it.

01:04:38.160 --> 01:04:41.740
And so this, because it inserts it right inside of the admin means you don't have to get them

01:04:41.740 --> 01:04:42.640
into a different place.

01:04:42.640 --> 01:04:46.620
And they're in an interface that they know how to use and makes things easier.

01:04:46.620 --> 01:04:48.880
So very much like that import export.

01:04:48.880 --> 01:04:52.920
If import export didn't exist and give you that button up top, this would be a way of building

01:04:52.920 --> 01:04:53.060
it.

01:04:53.060 --> 01:04:53.480
Really nice.

01:04:53.480 --> 01:04:55.500
And it's very decorator heavy.

01:04:55.500 --> 01:04:56.240
It is.

01:04:56.240 --> 01:04:56.620
Yes.

01:04:56.620 --> 01:04:57.000
Yeah.

01:04:57.300 --> 01:04:59.300
Everything's a button or a view.

01:04:59.300 --> 01:05:01.860
And you've got up on the screen there, right?

01:05:01.860 --> 01:05:03.960
That's the confirm that I was talking about at the top.

01:05:03.960 --> 01:05:06.300
You call it decorate the view.

01:05:06.300 --> 01:05:11.560
And that's because in this case, you're inserting it inside of the actual Django admin model pieces,

01:05:11.560 --> 01:05:11.800
right?

01:05:11.800 --> 01:05:17.280
So you have to essentially, the decorators are doing the registration to say, okay, this is

01:05:17.280 --> 01:05:18.760
extra code for the admin.

01:05:18.760 --> 01:05:20.320
It's how they're hooking it all.

01:05:20.380 --> 01:05:21.720
Yeah, it looks very, very useful.

01:05:21.720 --> 01:05:22.300
All right.

01:05:22.300 --> 01:05:23.120
We've got a couple more.

01:05:23.120 --> 01:05:23.380
Yep.

01:05:23.380 --> 01:05:25.260
This one, I think I know the guy who created this one.

01:05:25.260 --> 01:05:25.720
Yes.

01:05:25.720 --> 01:05:28.640
So this is a little bit of blatant self-promotion.

01:05:28.640 --> 01:05:32.560
This is Django All, A-W-L, like the leather working tool.

01:05:32.560 --> 01:05:33.900
And yeah, this is one of mine.

01:05:33.900 --> 01:05:38.500
If I had been aware of the Django extensions library at the time that I wrote this, I probably

01:05:38.500 --> 01:05:40.820
should have just contributed to the Django extensions library.

01:05:40.820 --> 01:05:41.880
It would have been the smarter thing.

01:05:41.880 --> 01:05:44.220
But at the time, I wasn't familiar with it.

01:05:44.220 --> 01:05:46.460
And since then, I've been maintaining this beast.

01:05:46.880 --> 01:05:52.300
It's a general collection of a whole bunch of crap, like extensions that I just found

01:05:52.300 --> 01:05:54.860
I was writing over and over again every single time I went to a client.

01:05:54.860 --> 01:05:59.560
So one of the times I was doing that, the client, I went to the client and said, let's open source

01:05:59.560 --> 01:06:00.120
this stuff.

01:06:00.120 --> 01:06:00.940
And they went, okay, great.

01:06:00.940 --> 01:06:02.780
And since then, I've been doing this.

01:06:02.780 --> 01:06:03.460
You sell widgets.

01:06:03.460 --> 01:06:05.240
You don't sell Django admin extensions.

01:06:05.240 --> 01:06:08.960
Like, let's make the world a better place and contribute back ideas.

01:06:08.960 --> 01:06:09.540
Exactly.

01:06:09.540 --> 01:06:10.220
This will hurt you.

01:06:10.220 --> 01:06:12.380
Big list of random crap, right?

01:06:12.380 --> 01:06:18.520
So a bunch of mix-ins, CSS color utilities, some context processor pieces.

01:06:18.520 --> 01:06:19.900
Custom admin commands.

01:06:19.900 --> 01:06:20.420
Yep.

01:06:20.420 --> 01:06:25.600
There's decorators in here that make sure that you're doing a post with JSON content.

01:06:25.600 --> 01:06:31.400
So that if somebody's calling your view in the illegal way, it screams ranked models.

01:06:31.400 --> 01:06:35.760
So one, two, three, four, five, and gives you a little thing inside of the admin to move

01:06:35.760 --> 01:06:36.560
them up and down.

01:06:36.560 --> 01:06:38.160
Some testing tools.

01:06:38.160 --> 01:06:42.860
So there's a custom test runner in here, which adds a whole bunch of features for doing

01:06:42.860 --> 01:06:47.120
things like getting out information out of the Django admin and checking that the fields

01:06:47.120 --> 01:06:48.260
and the admin are correct.

01:06:48.260 --> 01:06:51.980
So really just sort of a little catch-all that's out there.

01:06:51.980 --> 01:06:55.420
But yeah, it's here and I happily take PRs.

01:06:55.420 --> 01:06:58.100
So go find it, break it.

01:06:58.100 --> 01:06:59.300
If you find it useful, great.

01:06:59.300 --> 01:07:02.480
If you don't, send me a note and tell me why not and I'll fix it.

01:07:02.480 --> 01:07:02.700
Yeah.

01:07:02.700 --> 01:07:03.040
Lovely.

01:07:03.040 --> 01:07:03.860
It looks really useful.

01:07:03.860 --> 01:07:06.880
I'll stop with the shameless promotion after this one.

01:07:07.480 --> 01:07:08.220
Hey, I'll keep going.

01:07:08.220 --> 01:07:08.900
These are good.

01:07:08.900 --> 01:07:10.460
This is a Django airplane.

01:07:10.460 --> 01:07:17.000
So I used to, I used to have to do a lot of traveling when I was consulting and being on

01:07:17.000 --> 01:07:21.540
a plane is a great place to get some uninterrupted four or five hours of coding in unless you're

01:07:21.540 --> 01:07:22.260
coding on the web.

01:07:22.260 --> 01:07:26.220
And particularly in the olden days when you didn't get wifi on the planes and even now it's

01:07:26.220 --> 01:07:27.380
spotty and expensive.

01:07:27.380 --> 01:07:28.500
You can't really count on it.

01:07:28.500 --> 01:07:28.660
Yeah.

01:07:28.660 --> 01:07:28.980
Yeah.

01:07:28.980 --> 01:07:34.240
So what I found was, you know, if I'm using something like bootstrap from a CDN, I would

01:07:34.240 --> 01:07:38.360
get in and I'd be trying to run my Django site and be like, oh crap, nothing's looking right

01:07:38.360 --> 01:07:40.040
because the CDN is there.

01:07:40.040 --> 01:07:45.060
So this is essentially a little tag that you use anywhere where you would use an HREF for,

01:07:45.060 --> 01:07:47.180
you know, links or style sheets or whatever.

01:07:47.440 --> 01:07:53.300
And then there is a setting that defines the mode of the system.

01:07:53.300 --> 01:07:58.000
And if you're in build mode, anytime these tags find it, they'll go off, they'll grab the

01:07:58.000 --> 01:08:01.020
content and they'll save it to the disc and just runs the page normally.

01:08:01.020 --> 01:08:05.680
And then when you're in cache mode, instead of trying to get to the internet, it pulls it

01:08:05.680 --> 01:08:06.620
off of the disc.

01:08:06.620 --> 01:08:12.300
So it's nothing terribly complicated, but it solved a particular problem that I was having

01:08:12.300 --> 01:08:12.780
a lot.

01:08:12.780 --> 01:08:18.660
And now that I'm not really traveling, I'm not touching it as much, but if folks out there

01:08:18.660 --> 01:08:19.180
find it useful.

01:08:19.180 --> 01:08:20.080
People travel less.

01:08:20.080 --> 01:08:20.500
I don't know.

01:08:20.500 --> 01:08:20.980
It's kind of weird.

01:08:20.980 --> 01:08:21.280
Yeah.

01:08:21.280 --> 01:08:22.580
There's been a few changes.

01:08:22.580 --> 01:08:23.780
Life has changed.

01:08:23.780 --> 01:08:25.300
There have been changes.

01:08:25.300 --> 01:08:27.980
Although I did travel recently in a pandemonium.

01:08:27.980 --> 01:08:30.420
So if you want madness, you can go back and try to fly.

01:08:30.420 --> 01:08:30.860
Yeah.

01:08:30.860 --> 01:08:31.520
So this is really nice.

01:08:31.520 --> 01:08:36.440
So basically you say airplane, instead of a static ref to a CDN, you say airplane and then

01:08:36.440 --> 01:08:40.560
the reference to the CDN and either it just passes through or it can download and then

01:08:40.560 --> 01:08:43.520
pass through, or you can say I'm in this development mode.

01:08:43.520 --> 01:08:47.940
Just, I don't have, I'm either at like a coffee shop or I'm traveling or whatever.

01:08:47.940 --> 01:08:51.580
And just let me, I'm, you know, another good use case, not just airplane, even though that's

01:08:51.580 --> 01:08:57.220
the name is if you're at a hotel with notoriously bad internet and you're traveling for work and

01:08:57.220 --> 01:09:01.100
you got to get a presentation or new version ready for the morning, like that can be a super

01:09:01.100 --> 01:09:02.320
frustrating experience.

01:09:02.320 --> 01:09:05.860
It essentially moves anything that's normally on your internet down to your hard drive.

01:09:05.860 --> 01:09:09.280
If you've tagged it properly and there's a couple of management commands as well.

01:09:09.440 --> 01:09:12.980
So like, it'll tell you what's in your cache and you know, how to see it and how to wipe

01:09:12.980 --> 01:09:13.880
it out if you need to.

01:09:13.880 --> 01:09:19.300
So there's a couple little utilities, but like I said, it's one of those, one of those libraries

01:09:19.300 --> 01:09:23.180
that is simple, doesn't do a lot, but solves a particular problem.

01:09:23.180 --> 01:09:25.260
So if you're having that problem, go for it.

01:09:25.260 --> 01:09:25.420
Yeah.

01:09:25.420 --> 01:09:25.780
Fantastic.

01:09:25.780 --> 01:09:27.440
Your example is for a CSS.

01:09:27.440 --> 01:09:34.460
Can I like leverage this to like JSON API somehow like offline, some API calls or anything,

01:09:34.460 --> 01:09:36.800
or is it, is there not really a way to fit that together?

01:09:36.800 --> 01:09:39.480
I don't think it would work.

01:09:39.480 --> 01:09:44.240
If it's a straight URL that was always coming back with the same value and it was hard coded,

01:09:44.240 --> 01:09:46.200
it probably shouldn't care.

01:09:46.200 --> 01:09:49.020
But yeah, it would depend on how you were using it.

01:09:49.020 --> 01:09:49.500
Yeah, sure.

01:09:49.500 --> 01:09:50.440
Last one.

01:09:50.440 --> 01:09:52.480
The thing you always put last security, right?

01:09:52.480 --> 01:09:53.240
Just kidding.

01:09:53.240 --> 01:09:54.300
Okay.

01:09:54.300 --> 01:09:55.020
We're skipping ahead.

01:09:55.020 --> 01:09:55.420
Got it.

01:09:55.420 --> 01:09:55.820
No problem.

01:09:55.820 --> 01:09:56.720
Oh, are we skipping ahead?

01:09:56.720 --> 01:09:58.580
I had a Django extensions next.

01:09:58.580 --> 01:09:58.900
So.

01:09:58.900 --> 01:09:59.400
Oh yeah.

01:09:59.400 --> 01:10:00.900
I think I just didn't open that one.

01:10:00.900 --> 01:10:01.420
That's fine.

01:10:01.560 --> 01:10:04.960
I kind of touched on this one when I was talking about Django All.

01:10:04.960 --> 01:10:10.600
This is a collection of things that probably should just be built into Django is really what

01:10:10.600 --> 01:10:11.340
it comes down to.

01:10:11.340 --> 01:10:13.460
There's a whole bunch of different areas.

01:10:13.460 --> 01:10:15.260
Again, it's this huge hodgepodge.

01:10:15.740 --> 01:10:24.480
So there's extra tools for the admin, more management commands, more signals, template filters, extra model fields, job management.

01:10:24.480 --> 01:10:26.120
It's a very lightweight job management.

01:10:26.120 --> 01:10:30.580
But if you're not at the level where you want to use Celery or something like that, this might be good enough for you.

01:10:30.580 --> 01:10:35.660
Some model mix-ins, permission mix-ins, extra validators, some utility methods.

01:10:35.660 --> 01:10:44.920
The one I use here all the time, particularly when I was learning Django Ninja and I was trying to understand how the router worked, is a management command called show URLs.

01:10:44.920 --> 01:10:50.080
It'll show you all the URLs you've registered, what their keywords are, and how to call them.

01:10:50.080 --> 01:10:54.520
So it's a nice little introspective kind of thing to work through backwards.

01:10:54.520 --> 01:10:58.120
It's got another management command called run script.

01:10:58.120 --> 01:11:01.840
And this one's so useful that I had the exact same thing in Django All.

01:11:01.840 --> 01:11:04.780
Again, as I said, I should have just looked at this library first.

01:11:04.780 --> 01:11:10.300
And the idea of run script is it gives you a Django context for running a Python script.

01:11:10.300 --> 01:11:18.560
So this is kind of like the dash dot slash management shell command, where it gives you inside of a Django context, but it does it for the script that you're running.

01:11:18.560 --> 01:11:19.300
Oh, that's cool.

01:11:19.300 --> 01:11:22.120
So things like the database are initialized and stuff?

01:11:22.120 --> 01:11:22.520
Exactly.

01:11:22.520 --> 01:11:22.940
Yeah.

01:11:22.940 --> 01:11:23.320
Okay.

01:11:23.320 --> 01:11:26.220
I find I generally use it if I'm debugging, right?

01:11:26.220 --> 01:11:34.420
So if I've got three or four things I want to do in the database and I need to run it three or four times until I figured out what the problem is, rather than constantly doing that in the REPL over and over again,

01:11:34.420 --> 01:11:39.700
you stick it in a file, run the script, look at your debug or use it in the debugger.

01:11:39.700 --> 01:11:45.200
Of course, is the other thing there, because you can step through that a lot easier than you can say inside of a inside of a REPL.

01:11:45.200 --> 01:11:46.760
So a lot of good stuff here.

01:11:46.760 --> 01:11:49.500
And it's one of those libraries that I find every time I look at it.

01:11:49.500 --> 01:11:50.880
I'm like, oh, I have to remember that's there.

01:11:50.880 --> 01:11:51.540
And then I forget.

01:11:51.720 --> 01:11:54.420
But you always have to sort of go back and dig through it.

01:11:54.420 --> 01:11:56.480
So it's a good little toolbox.

01:11:57.000 --> 01:12:00.100
Diff looks cool for probably pre-post migration.

01:12:00.100 --> 01:12:08.800
There's three or four SQL commands in there that'll tell you how your migrations are, how they've changed, how you're managing them, what it's doing to them.

01:12:08.800 --> 01:12:13.320
Django has since added a couple things that are similar to it inside of the core library.

01:12:13.320 --> 01:12:15.440
But these are definitely more powerful.

01:12:15.680 --> 01:12:19.640
So, yeah, if you're trying to figure out what's going on with your models, there's some interesting stuff in there as well.

01:12:19.640 --> 01:12:20.280
Yeah, fantastic.

01:12:20.280 --> 01:12:21.120
All right.

01:12:21.120 --> 01:12:23.320
Maybe that brings us to Django All-Off.

01:12:23.320 --> 01:12:24.020
This is it.

01:12:24.020 --> 01:12:25.340
This is the last one.

01:12:25.340 --> 01:12:28.660
So this is Django All-Off.

01:12:28.660 --> 01:12:30.940
This is your go-to place for authentication.

01:12:30.940 --> 01:12:40.800
It has a series of workflows in it that are your typical user management things like sign up, email addresses, email verification, password resets.

01:12:40.800 --> 01:12:43.920
And so I don't usually use it for that.

01:12:43.920 --> 01:12:48.960
I use it for the thing that most people use it for, which is it's got this hook for your social media account authentication.

01:12:48.960 --> 01:12:53.200
So most social media sites use either OAuth or OAuth2.

01:12:53.720 --> 01:13:03.740
And so if you've ever been on one of those web pages that says, you know, you can sign in or create an account with your Facebook account or your Google account, this is a plugin that allows you to do that inside of your Django space.

01:13:03.740 --> 01:13:06.840
They have over a hundred different providers.

01:13:06.840 --> 01:13:07.720
I stopped counting.

01:13:07.720 --> 01:13:09.760
I just gave up after a while.

01:13:09.760 --> 01:13:16.340
Most of them are overlays on top of OAuth2, but there are also some that are custom as well.

01:13:16.340 --> 01:13:25.220
And what happens is when a user signs up using one of these, it still uses the standard Django user, but then it creates an associated object.

01:13:25.220 --> 01:13:29.260
And the advantage of this design is it means different users can use different things.

01:13:29.260 --> 01:13:30.320
I can sign in using Facebook.

01:13:30.320 --> 01:13:34.400
You can sign in using Git or Google or GitHub or Google.

01:13:34.400 --> 01:13:39.000
But we still end up in the same user style account inside of the database.

01:13:39.000 --> 01:13:42.540
But the other advantage of it is you can also associate multiple things.

01:13:42.620 --> 01:13:49.240
So say you were writing a site that wanted people to be able to log in through GitHub or GitLab, but also wanted to be able to tweet.

01:13:49.240 --> 01:13:56.740
Well, you could not necessarily allow logging in with Twitter, but you could allow them to authenticate through it so that you could tweet on their behalf.

01:13:56.740 --> 01:13:59.880
So it allows you to start connecting and play with all those things.

01:13:59.880 --> 01:14:02.400
The plugin, the workflow is plugin.

01:14:02.400 --> 01:14:03.760
Try that again.

01:14:03.760 --> 01:14:05.420
The workflow is pluggable as well.

01:14:05.420 --> 01:14:08.400
So there's hooks inside of the signup process.

01:14:08.400 --> 01:14:14.880
So let's say you've got some questions that you need to ask the user when they sign up, like extra information that Django doesn't normally have.

01:14:14.880 --> 01:14:17.120
It's got a flow for that that helps you with it.

01:14:17.120 --> 01:14:19.580
So really, really comprehensive library.

01:14:19.580 --> 01:14:24.320
The only thing I find that's challenging with this really has nothing to do with the library itself.

01:14:24.320 --> 01:14:27.120
It's just that third-party authentication tends to be messy.

01:14:27.840 --> 01:14:31.880
You are always dealing with tokens and provider sites and all the rest of it.

01:14:31.880 --> 01:14:33.740
And you're going to be...

01:14:33.740 --> 01:14:36.220
Have you registered your OAuth application at...

01:14:36.220 --> 01:14:36.700
Exactly.

01:14:36.700 --> 01:14:37.520
...AngelList?

01:14:37.520 --> 01:14:39.160
Did you do it right?

01:14:39.160 --> 01:14:39.540
Like, oh.

01:14:39.540 --> 01:14:42.780
You're always going to be in this space of, did I screw it up?

01:14:42.780 --> 01:14:44.180
Is it the token that's not right?

01:14:44.180 --> 01:14:46.100
Am I not hooking the library incorrectly?

01:14:46.100 --> 01:14:48.160
I always find it's a little finicky.

01:14:48.160 --> 01:14:49.520
Now, once you get it going, it's fine.

01:14:49.520 --> 01:14:52.980
But there, it does tend to be a little cumbersome getting there.

01:14:53.060 --> 01:14:55.660
Yeah, it's a little magical in, like, the traditional sense.

01:14:55.660 --> 01:14:57.220
Like, it can just work amazingly.

01:14:57.220 --> 01:15:01.200
But if it doesn't, you're like, I just don't know what the incantation I'm supposed to give it is.

01:15:01.200 --> 01:15:02.280
Because it's just not...

01:15:02.280 --> 01:15:02.780
It won't.

01:15:02.780 --> 01:15:03.840
It won't do the thing.

01:15:03.840 --> 01:15:07.020
You're debugging something that is somebody else's responsibility.

01:15:07.020 --> 01:15:10.460
So you're not getting a lot of information out of the host system, usually.

01:15:10.460 --> 01:15:15.440
Yeah, and often it's encrypted and signed and, like, stuff doesn't match.

01:15:15.440 --> 01:15:17.920
It's like, how are you supposed to know how it doesn't match?

01:15:17.920 --> 01:15:20.620
Anyway, but, I mean, that's the story of OAuth.

01:15:20.840 --> 01:15:23.360
OAuth 2, not this library's problem, right?

01:15:23.360 --> 01:15:25.340
The library makes it a lot easier.

01:15:25.340 --> 01:15:29.500
It's just, like you said, there's still a level that is painful.

01:15:29.500 --> 01:15:31.220
It swims in complex water.

01:15:31.220 --> 01:15:35.680
One thing that is kind of nice here is you can unroll your OAuth as well.

01:15:35.680 --> 01:15:41.540
You can say, I did originally sign up on GitHub, but I just want to make a password from my account now.

01:15:41.540 --> 01:15:43.460
I'll let you drop that out, which is, I think, kind of cool.

01:15:43.460 --> 01:15:48.920
I think it was a very smart architectural decision to continue to use the Django authentication mechanism underneath.

01:15:48.920 --> 01:15:53.640
It means, from a support standpoint, you don't have to worry about a lot of things.

01:15:53.640 --> 01:15:55.180
You can still see them inside of the admin.

01:15:55.180 --> 01:15:56.560
You're not having to worry those pieces.

01:15:56.560 --> 01:16:01.900
And like you said, if something goes wrong with somebody's Facebook account, you don't lose anything.

01:16:01.900 --> 01:16:09.900
You basically, you know, they can send you a support email and you can send them a password reset off of a primary account and rehook them up another way, which is a thing of beauty.

01:16:10.020 --> 01:16:10.680
Yeah, that's great.

01:16:10.680 --> 01:16:11.120
All right.

01:16:11.120 --> 01:16:15.100
Well, I would say we're a little over time, but it's been a super interesting list to talk through with.

01:16:15.100 --> 01:16:19.520
So maybe call it a wrap on however many topics we came up with.

01:16:19.520 --> 01:16:24.880
A whole bunch of cool ideas for doing more with Django and Python web apps in general.

01:16:24.880 --> 01:16:25.800
So thanks for that.

01:16:25.800 --> 01:16:26.420
Happy to do it.

01:16:26.420 --> 01:16:26.660
Yeah.

01:16:26.660 --> 01:16:29.200
Now, before we get out of here, I've got to answer the two questions.

01:16:29.200 --> 01:16:31.020
Well, I've answered one of them already.

01:16:31.020 --> 01:16:33.840
You're going to write a code.

01:16:33.840 --> 01:16:35.120
What editor do you use?

01:16:35.120 --> 01:16:35.440
Yeah.

01:16:35.440 --> 01:16:36.200
So I'm Vim.

01:16:36.200 --> 01:16:39.080
And for those who are taking the course, I used PyCharm there.

01:16:39.160 --> 01:16:40.920
So you don't have to understand antiquated.

01:16:40.920 --> 01:16:43.400
Speaking of magic, you don't have to follow along there.

01:16:43.400 --> 01:16:46.960
So I did use PyCharm there, but Vim is still my standard.

01:16:46.960 --> 01:16:48.880
And then notable PyPI package.

01:16:48.880 --> 01:16:50.860
It can be any one of these you want to give a shout out to.

01:16:50.860 --> 01:16:53.360
We've really kind of answered that question a bunch of times.

01:16:53.360 --> 01:16:55.140
But if you want to give a shout out to something else as well.

01:16:55.140 --> 01:16:57.840
I got something else for you, which is Ascii Maddox.

01:16:57.840 --> 01:17:02.480
So I do a lot of TUI work and I'm really keen on this library.

01:17:02.480 --> 01:17:08.740
They have a bunch of form widget stuff and also a whole bunch of cool, awesome 80s style

01:17:08.740 --> 01:17:09.940
animation bits and pieces.

01:17:09.940 --> 01:17:12.560
Core developer is a guy named Peter Britton.

01:17:12.560 --> 01:17:13.800
Very responsive.

01:17:13.800 --> 01:17:15.220
Always looking for MRs.

01:17:15.220 --> 01:17:17.000
So yay, Peter and Ascii Maddox.

01:17:17.000 --> 01:17:20.960
So if you're into this space, this is definitely something to check out.

01:17:20.960 --> 01:17:21.340
Wow.

01:17:21.340 --> 01:17:21.880
Amazing.

01:17:21.880 --> 01:17:22.820
Yeah, it looks pretty awesome.

01:17:22.820 --> 01:17:23.380
All right.

01:17:23.380 --> 01:17:23.940
Great example.

01:17:23.940 --> 01:17:24.480
All right.

01:17:24.480 --> 01:17:28.600
Final Call to Action, so many of the things that we've talked about here, if they're

01:17:28.600 --> 01:17:30.420
interesting, people want to learn how to actually use them.

01:17:30.420 --> 01:17:35.160
Grappelli, create your own admin command, a bunch of other stuff covered in your course.

01:17:35.160 --> 01:17:38.120
So check that out over at talkpython.fm.

01:17:38.120 --> 01:17:40.660
Just click on courses, find the Getting Started with Django course.

01:17:40.660 --> 01:17:41.720
Well done on that.

01:17:41.720 --> 01:17:45.000
Thank you so much for coming here and sharing all these.

01:17:45.000 --> 01:17:47.720
You know, maybe give a final call to action.

01:17:47.720 --> 01:17:51.660
People want to get started with these ideas and bring some of the material to their apps.

01:17:51.660 --> 01:17:52.240
What would you say?

01:17:52.240 --> 01:17:53.420
I think a lot of it depends.

01:17:53.780 --> 01:17:56.700
You know, anytime I'm trying to learn something new for me, it's always about the project,

01:17:56.700 --> 01:17:57.020
right?

01:17:57.020 --> 01:18:01.000
So if I, you know, if you're doing something that needs the REST API, then, you know, Ninja

01:18:01.000 --> 01:18:02.960
or DRF might be the place to go.

01:18:02.960 --> 01:18:07.860
If you're, you know, if you just want to play a little bit, then, or you're learning more

01:18:07.860 --> 01:18:13.080
about how Django works, the debug toolbar is a fantastic way of sort of learning some of

01:18:13.080 --> 01:18:16.360
the internals and taking your Django to the next level, because it's exposing a bunch of

01:18:16.360 --> 01:18:19.200
that stuff that you kind of think you know how it works.

01:18:19.200 --> 01:18:19.520
Yeah.

01:18:19.520 --> 01:18:21.140
It's a nice little place of doing a tutorial.

01:18:21.140 --> 01:18:23.520
So those might be good places to start.

01:18:23.580 --> 01:18:23.700
Yeah.

01:18:23.700 --> 01:18:24.000
That's cool.

01:18:24.000 --> 01:18:25.840
The framework tries to hide a lot of that stuff.

01:18:25.840 --> 01:18:28.840
The toolbar will like reveal it what's going on, right?

01:18:28.840 --> 01:18:29.100
Yeah.

01:18:29.100 --> 01:18:32.920
Well, as good framework should, but every once in a while, you want to see the guy behind

01:18:32.920 --> 01:18:33.300
the curtain.

01:18:33.300 --> 01:18:34.560
So that's right.

01:18:34.560 --> 01:18:35.300
All right, Chris.

01:18:35.300 --> 01:18:36.620
Well, thank you so much for being here.

01:18:36.620 --> 01:18:37.740
It's been a whole lot of fun.

01:18:37.740 --> 01:18:38.500
Enjoyed it.

01:18:38.560 --> 01:18:38.680
Yeah.

01:18:38.680 --> 01:18:39.120
Same.

01:18:39.120 --> 01:18:39.700
See ya.

01:18:39.700 --> 01:18:39.940
Cheers.

01:18:39.940 --> 01:18:39.960
Cheers.

01:18:39.960 --> 01:18:43.900
This has been another episode of Talk Python To Me.

01:18:44.400 --> 01:18:45.660
Thank you to our sponsors.

01:18:45.660 --> 01:18:45.740
Thank you to our sponsors.

01:18:45.740 --> 01:18:47.340
Be sure to check out what they're offering.

01:18:47.340 --> 01:18:48.740
It really helps support the show.

01:18:48.740 --> 01:18:52.380
You care about the ideas behind technology, not just the tech itself.

01:18:52.380 --> 01:18:55.520
And you know that tech has an enormous influence on society.

01:18:55.740 --> 01:18:57.680
So check out the IRL podcast.

01:18:57.680 --> 01:18:59.260
It's hosted by Bridget Todd.

01:18:59.260 --> 01:19:02.080
And this season of IRL looks at AI in real life.

01:19:02.080 --> 01:19:05.880
Listen to an episode at talkpython.fm/IRL.

01:19:05.880 --> 01:19:07.900
Starting a business is hard.

01:19:07.900 --> 01:19:13.980
Microsoft for startups, Founders Hub provides all founders at any stage with free resources

01:19:13.980 --> 01:19:16.500
and connections to solve startup challenges.

01:19:16.740 --> 01:19:21.020
Apply for free today at talkpython.fm/founders hub.

01:19:21.020 --> 01:19:22.980
Want to level up your Python?

01:19:22.980 --> 01:19:27.020
We have one of the largest catalogs of Python video courses over at Talk Python.

01:19:27.020 --> 01:19:32.200
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:19:32.200 --> 01:19:34.860
And best of all, there's not a subscription in sight.

01:19:34.860 --> 01:19:37.780
Check it out for yourself at training.talkpython.fm.

01:19:37.780 --> 01:19:39.680
Be sure to subscribe to the show.

01:19:39.680 --> 01:19:42.460
Open your favorite podcast app and search for Python.

01:19:42.460 --> 01:19:43.760
We should be right at the top.

01:19:43.760 --> 01:19:48.920
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:19:48.920 --> 01:19:53.120
and the direct RSS feed at /rss on talkpython.fm.

01:19:53.120 --> 01:19:56.560
We're live streaming most of our recordings these days.

01:19:56.560 --> 01:19:59.960
If you want to be part of the show and have your comments featured on the air,

01:19:59.960 --> 01:20:04.340
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:20:04.340 --> 01:20:06.240
This is your host, Michael Kennedy.

01:20:06.240 --> 01:20:07.520
Thanks so much for listening.

01:20:07.520 --> 01:20:08.700
I really appreciate it.

01:20:08.700 --> 01:20:10.600
Now get out there and write some Python code.

01:20:10.600 --> 01:20:31.480
I'll see you next time.

