WEBVTT

00:00:00.001 --> 00:00:02.780
Do you or your team maintain a large Python 2 code base?

00:00:02.780 --> 00:00:08.440
Would you like to move to Python 3, but there's just too much in place keeping you on legacy Python?

00:00:08.440 --> 00:00:11.180
Then you will definitely enjoy the story from Jason Fried.

00:00:11.180 --> 00:00:17.700
He created a grassroots campaign to move Facebook's massive Python 2 code base over to Python 3.

00:00:17.700 --> 00:00:21.340
And he made Python 3 part of Facebook's culture today.

00:00:21.340 --> 00:00:23.700
There are lessons here for every listener.

00:00:23.700 --> 00:00:28.800
This is Talk Python to Me, episode 185, recorded November 10th, 2018.

00:00:28.800 --> 00:00:48.380
Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:48.380 --> 00:00:50.300
This is your host, Michael Kennedy.

00:00:50.300 --> 00:00:52.440
Follow me on Twitter where I'm @mkennedy.

00:00:52.440 --> 00:00:56.200
Keep up with the show and listen to past episodes at talkpython.fm.

00:00:56.200 --> 00:00:58.700
And follow the show on Twitter via at Talk Python.

00:00:59.340 --> 00:01:02.060
This episode is sponsored by Linode and Rollbar.

00:01:02.060 --> 00:01:04.280
Please check out what they're offering during their segments.

00:01:04.280 --> 00:01:05.800
It really helps support the show.

00:01:05.800 --> 00:01:07.580
Jason, welcome to Talk Python.

00:01:07.580 --> 00:01:08.620
Thank you for having me.

00:01:08.620 --> 00:01:09.700
It's great to have you here.

00:01:09.700 --> 00:01:11.400
We've been working on this for a while, haven't we?

00:01:11.400 --> 00:01:12.980
It's been a long time.

00:01:12.980 --> 00:01:17.120
It's one of the more drawn out, sort of getting a guest on the show.

00:01:17.120 --> 00:01:19.920
But I think people are going to be really happy about it.

00:01:19.920 --> 00:01:21.720
I think it's a great story.

00:01:21.720 --> 00:01:24.840
And the timing is perfect around the move to Python 3.

00:01:24.840 --> 00:01:25.200
Yeah.

00:01:25.200 --> 00:01:26.560
Yeah, it's going to be super fun.

00:01:26.780 --> 00:01:29.720
So we're going to talk about how you've done this at Facebook.

00:01:29.720 --> 00:01:30.740
And you didn't just start.

00:01:30.740 --> 00:01:31.780
It's a long journey.

00:01:31.780 --> 00:01:35.160
But before we get into all that, let's start with a little bit of your background.

00:01:35.160 --> 00:01:36.580
How do you get into programming in Python?

00:01:36.580 --> 00:01:39.520
I didn't have anything to do with Python until I moved to Facebook.

00:01:40.040 --> 00:01:42.480
So before that, I was a Perl programmer.

00:01:42.480 --> 00:01:44.280
I'm kind of ashamed now.

00:01:44.280 --> 00:01:46.320
But I used to love Perl back in the day.

00:01:46.320 --> 00:01:50.240
And then that was not socially acceptable when I moved to Facebook in 2011.

00:01:50.240 --> 00:01:53.380
So I had to learn Python.

00:01:54.320 --> 00:01:56.940
And surprisingly enough, I picked it up very easily.

00:01:56.940 --> 00:02:02.340
And because I'm a little obsessive, so I dug into it enough that I started helping people.

00:02:02.340 --> 00:02:04.780
And that kind of started...

00:02:04.780 --> 00:02:06.820
I guess I thought of myself as an expert.

00:02:06.820 --> 00:02:11.180
But even today, you always get better and better as you get.

00:02:11.180 --> 00:02:12.820
And you look back at some of your old stuff.

00:02:12.820 --> 00:02:14.640
And you're like, yeah, I used to write code like that.

00:02:15.120 --> 00:02:17.380
It doesn't matter how much of an expert you are.

00:02:17.380 --> 00:02:19.500
There's still plenty you don't know.

00:02:19.500 --> 00:02:21.160
And there's still stuff that you look back.

00:02:21.160 --> 00:02:22.100
You're like, whoa, I did that.

00:02:22.100 --> 00:02:22.740
That was bad.

00:02:22.740 --> 00:02:25.080
Yeah, you're like, don't look at that old code, please.

00:02:25.080 --> 00:02:27.940
It's like my skeleton, so my closet.

00:02:27.940 --> 00:02:28.860
Exactly.

00:02:28.860 --> 00:02:31.720
Well, it shows you're making progress, right?

00:02:31.720 --> 00:02:32.040
Yeah.

00:02:32.040 --> 00:02:39.700
I do think it's highly interesting that you were one of the driving forces for this entire

00:02:39.700 --> 00:02:41.640
sort of transformation at Facebook.

00:02:42.420 --> 00:02:45.620
And yet, you walked in the door going, Python?

00:02:45.620 --> 00:02:47.040
Is that the one with the space?

00:02:47.040 --> 00:02:48.240
Or is that a different language?

00:02:48.240 --> 00:02:50.400
Yeah, I played with it before.

00:02:50.400 --> 00:02:52.000
But I didn't really know how to write it.

00:02:52.000 --> 00:02:53.200
You didn't come in as like...

00:02:53.200 --> 00:02:55.360
It's not like Guido von Rassum came in.

00:02:55.360 --> 00:02:56.600
It's like, all right, we're going to change things.

00:02:56.600 --> 00:02:57.200
We're going to fix it.

00:02:57.200 --> 00:03:02.280
Like, basically, more or less a beginner, a newcomer, was the driving force.

00:03:02.280 --> 00:03:03.940
And I think that's an interesting part of the story.

00:03:03.940 --> 00:03:05.900
Yeah, I don't think it's like...

00:03:05.900 --> 00:03:07.340
So, I guess I came in like the end.

00:03:07.340 --> 00:03:10.360
It was October of 2011 on Halloween.

00:03:10.960 --> 00:03:16.260
So, I really didn't get involved in the whole community of Python at Facebook until 2012.

00:03:16.260 --> 00:03:18.600
And we have internal Facebook.

00:03:18.600 --> 00:03:20.240
And there's like groups and stuff.

00:03:20.240 --> 00:03:23.200
So, there was a Python at Facebook group.

00:03:23.200 --> 00:03:26.620
And there was a lot of people learning Python.

00:03:26.620 --> 00:03:30.120
And because I picked it up, I guess, quicker than they did, I was able to help them out.

00:03:30.120 --> 00:03:35.620
And because I was helping them out, people just assumed I knew what I was talking about.

00:03:36.320 --> 00:03:37.780
That's interesting how that happens, right?

00:03:37.780 --> 00:03:38.440
Yeah.

00:03:38.440 --> 00:03:40.040
They don't know you that well, right?

00:03:40.040 --> 00:03:41.720
They're like, oh, this guy's telling me stuff.

00:03:41.720 --> 00:03:42.380
So, he must know it.

00:03:42.380 --> 00:03:45.180
And because I'm like, you know, I think I know what I'm talking about.

00:03:45.180 --> 00:03:46.220
I go and fix things.

00:03:46.220 --> 00:03:54.920
And I start fixing enough stuff that I start touching stuff all over the code base and different projects that I'm not involved in.

00:03:54.920 --> 00:03:58.020
Because I have to touch like either one thing and I don't like the way it looks.

00:03:58.020 --> 00:03:59.140
So, I'm going to go fix it.

00:03:59.140 --> 00:04:07.680
And, you know, you somehow turn into before you know what people think of you as the subject matter expert.

00:04:07.680 --> 00:04:08.020
Yeah.

00:04:08.020 --> 00:04:09.300
That's really interesting.

00:04:09.300 --> 00:04:16.220
And I guess in some sense, you sort of fulfill that prophecy by doing it enough until you know.

00:04:16.300 --> 00:04:20.280
But there is that weird middle ground where people see you that way and you don't really see yourself that way.

00:04:20.280 --> 00:04:21.360
But you kind of are.

00:04:21.360 --> 00:04:21.860
Yeah.

00:04:21.860 --> 00:04:22.420
Yeah.

00:04:22.420 --> 00:04:22.740
Yeah.

00:04:22.740 --> 00:04:23.140
Interesting.

00:04:23.140 --> 00:04:26.940
So, what do you do day to day these days at Facebook?

00:04:26.940 --> 00:04:31.060
So, I'm on a team we lovingly call the Ministry of the Silly Walks.

00:04:31.760 --> 00:04:34.780
Initially, it's called the PE Python Foundation.

00:04:34.780 --> 00:04:37.100
But it's an internal team.

00:04:37.100 --> 00:04:41.220
And we are taking care of Python as a runtime at Facebook.

00:04:41.220 --> 00:04:48.980
So, it means ensuring that we update it in a timely manner that we're going to have 3.7 something released in the next couple weeks.

00:04:48.980 --> 00:04:53.880
That we're going to look at those shared libraries that have existed for 10 years.

00:04:53.880 --> 00:05:00.780
And nobody like to make sure that we're doing best practices instead of, oh, yeah, well, Ted wrote this in 2008.

00:05:01.120 --> 00:05:03.000
So, it's still good, right?

00:05:03.000 --> 00:05:03.800
And you're like, no.

00:05:03.800 --> 00:05:04.200
Yeah.

00:05:04.200 --> 00:05:07.680
Maybe we shouldn't be rewriting our own thread pools everywhere.

00:05:07.680 --> 00:05:10.960
Maybe we should just use concurrent futures or stuff like that.

00:05:10.960 --> 00:05:11.840
Yeah.

00:05:11.840 --> 00:05:12.360
Yeah, exactly.

00:05:12.360 --> 00:05:13.340
Like, that's built in.

00:05:13.340 --> 00:05:14.800
Let's not reinvent the world.

00:05:14.800 --> 00:05:15.980
That's quite interesting.

00:05:15.980 --> 00:05:18.440
I'm sure there's some old stuff like that.

00:05:18.440 --> 00:05:22.840
So, I guess one question to the extent that you're allowed to answer it.

00:05:22.840 --> 00:05:25.060
I don't want you to talk about anything you're not allowed to.

00:05:25.060 --> 00:05:28.080
But when I think of Facebook, I think of PHP.

00:05:28.880 --> 00:05:36.660
What's the story with Python at Facebook versus, I know Instagram joined, but there was Python at Facebook before Instagram was part of Facebook.

00:05:36.660 --> 00:05:39.240
The software engineers that run the front end, it's all PHP.

00:05:40.080 --> 00:05:47.520
But in the back end, people who are like SREs and these system administrators and ops people, they love Python.

00:05:47.520 --> 00:05:48.720
Or they did back then.

00:05:48.720 --> 00:05:50.240
So, they wrote all these scripts in Python.

00:05:50.240 --> 00:05:53.080
They were all these things to, like, push the front end in Python.

00:05:53.540 --> 00:05:57.820
So, you end up having this infrastructure to keep the site running all written in Python.

00:05:57.820 --> 00:05:59.720
We've talked about this all the time.

00:05:59.720 --> 00:06:09.800
So, like, if you have, if your service throws an alarm of some kind, there's another service that reads that alarm and starts running these remediations people have written in code.

00:06:09.800 --> 00:06:11.320
Well, that code is Python.

00:06:11.840 --> 00:06:15.160
And it's all written, the service to do it is Python.

00:06:15.160 --> 00:06:18.000
And the service that distributes that is Python.

00:06:18.000 --> 00:06:22.620
It's like, basically, it's we filled in the glue was with Python in the back end.

00:06:23.280 --> 00:06:25.300
Where all the cracks were, it's been filled with Python.

00:06:25.300 --> 00:06:25.880
Exactly.

00:06:25.880 --> 00:06:26.300
Interesting.

00:06:26.300 --> 00:06:27.040
Okay.

00:06:27.040 --> 00:06:27.560
How interesting.

00:06:27.560 --> 00:06:32.280
So, I guess that's probably a good segue to your main topic.

00:06:32.280 --> 00:06:40.800
And because one of the things you started creating in Python 3 there was this infrastructure stuff.

00:06:40.800 --> 00:06:46.200
So, maybe let's get started by, you know, I just wanted to ask you, I have my own strong opinions about this.

00:06:46.200 --> 00:06:51.880
But do you believe that there's any debate about whether you should use Python 2 or Python 3 these days?

00:06:51.880 --> 00:06:56.020
Or is that, I mean, several years ago, that was a solid debate that was raging.

00:06:56.020 --> 00:06:56.900
Do you think it still is?

00:06:56.900 --> 00:06:58.320
I don't think it's a debate anymore.

00:06:58.320 --> 00:07:06.060
Like, there's a site, I don't happen to know, but you could probably find it, that it's the scientific Python packages.

00:07:06.060 --> 00:07:10.060
And it's like them signing off to drop support for Python 2.

00:07:10.060 --> 00:07:13.940
Yes, that was, it's like called the Python 3 statement.

00:07:13.940 --> 00:07:15.320
Yeah, it's crazy.

00:07:15.320 --> 00:07:19.240
It's done by Matthias Ossier or something like that.

00:07:19.240 --> 00:07:19.440
Yeah.

00:07:19.440 --> 00:07:20.740
And there's tons of these projects.

00:07:20.740 --> 00:07:21.960
I also don't know the name of the URL.

00:07:21.960 --> 00:07:22.360
Sorry.

00:07:22.360 --> 00:07:22.680
Yeah.

00:07:22.680 --> 00:07:26.840
But there's tons of these projects that said that, oh, people just assumed they would always be Python 2.

00:07:26.840 --> 00:07:29.620
And they're like, no, we're going to get rid of our Python 2 support.

00:07:29.620 --> 00:07:29.920
Yeah.

00:07:29.920 --> 00:07:35.220
I think it really changed when, I think when the Python death clock went up.

00:07:35.220 --> 00:07:38.160
Also, I don't happen to know.

00:07:38.160 --> 00:07:44.240
But Guido was like, look, let's just make it January, January 1st of 2020.

00:07:44.560 --> 00:07:44.620
Yeah.

00:07:44.620 --> 00:07:45.320
Let's not.

00:07:45.320 --> 00:07:45.560
Yeah.

00:07:45.560 --> 00:07:46.700
I think it was on the mailing list.

00:07:46.700 --> 00:07:49.620
He said, let's don't miss words about when this might be.

00:07:49.620 --> 00:07:51.460
We're going to make it January 1st, 2020.

00:07:51.460 --> 00:07:52.640
Not, you know.

00:07:52.640 --> 00:07:53.040
Yeah.

00:07:53.040 --> 00:07:54.800
I think the only other really good option.

00:07:54.800 --> 00:07:55.760
Yes, exactly.

00:07:55.760 --> 00:07:57.740
The other possible one could have been PyCon.

00:07:57.740 --> 00:07:59.980
So it could have been like a party like right then.

00:07:59.980 --> 00:08:02.520
But I feel like the sooner the better, honestly.

00:08:02.520 --> 00:08:02.840
Yeah.

00:08:02.840 --> 00:08:05.520
It's like, I know we don't have this debate at Facebook anymore.

00:08:05.520 --> 00:08:07.060
We've won that debate.

00:08:07.060 --> 00:08:09.360
I do a new hire training class.

00:08:09.360 --> 00:08:15.540
And it's like, well, if you're already on the fence of whether you're going to use 2 or 3, you're a little late to the debate here at Facebook.

00:08:15.960 --> 00:08:18.920
We won that debate in 2014.

00:08:18.920 --> 00:08:20.740
Exactly.

00:08:20.740 --> 00:08:23.420
You need a time machine to beat that one at this time.

00:08:24.060 --> 00:08:24.500
Yeah.

00:08:24.500 --> 00:08:32.640
And there had been a lot of conversations around, well, this library doesn't quite support Python 3, so you can't quite move yet.

00:08:32.640 --> 00:08:42.220
And all I've seen in the last year and a half is here's one more amazing library that's Python 3.5 or 3.6 because it's using certain types of type annotations and async and await and so on.

00:08:42.220 --> 00:08:52.260
It really feels like the argument and the evidence has shifted that you're being left behind with all these cool libraries, not stuck because of these cool libraries.

00:08:52.620 --> 00:08:56.220
So the URL that you're looking for is python3statement.org.

00:08:56.220 --> 00:08:59.440
That's a good one about the scientific ones.

00:08:59.440 --> 00:08:59.880
Okay.

00:08:59.880 --> 00:09:01.180
I agree with you.

00:09:01.180 --> 00:09:02.520
I think that's great.

00:09:02.520 --> 00:09:04.600
I remember, I think this was you.

00:09:04.600 --> 00:09:13.940
I saw this around on Twitter to the effect of when Python 3.6 shipped, you said within two days, Facebook was running Python 3.6 in production.

00:09:13.940 --> 00:09:15.060
Was that you?

00:09:15.060 --> 00:09:16.240
Am I remembering that right?

00:09:16.240 --> 00:09:18.300
It may have been Lukash.

00:09:18.300 --> 00:09:20.360
It may have been Lukash, yeah.

00:09:20.360 --> 00:09:24.340
I may have said that, but we were very aggressive on 3.6.

00:09:24.340 --> 00:09:30.020
We've slowed down a bit because it's gotten more complicated, but we're going to be 3.7.

00:09:30.020 --> 00:09:43.440
And I'm trying to push internally that we get these things released quicker than the external release schedule so that we don't build up that layer of, oh, people have snuck in internal patches or something.

00:09:43.440 --> 00:09:55.800
One of the things you talked about that I thought was interesting is basically people get stuck on the idea of this is going to be an impossible problem to solve and we just can't do the switch.

00:09:55.800 --> 00:10:02.080
But once you've made the switch from 2 to 3 and then 3, 4 to 3, 5, like this starts to become a habit.

00:10:02.080 --> 00:10:04.180
You're like, oh, yeah, we just do that when a new one comes out.

00:10:04.820 --> 00:10:06.120
Is it sort of feeling that way now?

00:10:06.120 --> 00:10:12.840
Yeah, we've gotten to the point because we don't support multiple versions of 3 at Facebook and we never supported multiple versions of 2.

00:10:12.840 --> 00:10:20.180
You just kind of you got moved along whatever the slow pace that the compilers on the team would push things out.

00:10:20.180 --> 00:10:26.860
But for 3, it's just if we break you going to 3.7, it means you need to fix your code.

00:10:26.860 --> 00:10:28.280
It's your problem, right?

00:10:28.280 --> 00:10:28.940
Yeah, it's your problem.

00:10:28.940 --> 00:10:31.200
We're going to let you, we're not going to do it by purpose.

00:10:31.200 --> 00:10:35.020
Like on purpose, we're not going to like, we'll let you know, we'll try to fix it.

00:10:35.020 --> 00:10:39.480
But if we can't, we're going to involve you because we don't support multiple versions of 3.

00:10:39.480 --> 00:10:40.920
We're all going to be pushing forward.

00:10:40.920 --> 00:10:45.040
You know, we don't want to be, we don't ever want to be stuck in a situation like we were with 2.

00:10:45.040 --> 00:10:45.360
Right.

00:10:45.360 --> 00:10:47.100
I think it's a really interesting lesson.

00:10:47.100 --> 00:10:48.900
You were like, well, we were badly stuck.

00:10:48.900 --> 00:10:52.020
And so now we're going to be very aggressive and never getting stuck again.

00:10:52.020 --> 00:11:02.300
So your original talk, so you've given two presentations at various PyCons about this, one at PyOhio 2016 and one at the latest PyCon US in 2018.

00:11:02.300 --> 00:11:07.020
Your original one was entitled Rules for Radicals.

00:11:07.020 --> 00:11:08.780
Why the radicals identifier?

00:11:08.780 --> 00:11:10.640
What was radical about all this?

00:11:10.640 --> 00:11:18.980
You know, when you're trying to think of a topic, the name of your talk, you try to want to get something that will make the conference team get it.

00:11:18.980 --> 00:11:20.940
And then you have to kind of get it approved internally.

00:11:20.940 --> 00:11:24.080
And I think I had three different topics.

00:11:24.080 --> 00:11:27.160
I think one of them was, we used to call it like lies.

00:11:27.160 --> 00:11:32.100
And there's basically about lying to people to get for their own good.

00:11:32.100 --> 00:11:34.800
But like, yeah, Tom's like, you can't say that.

00:11:34.800 --> 00:11:38.400
I was like, okay, well, how about Rules for Radicals?

00:11:38.400 --> 00:11:39.260
Because it's like that.

00:11:39.260 --> 00:11:40.680
I've never read the book.

00:11:40.680 --> 00:11:43.120
I've read Epsirps from a little ago.

00:11:43.120 --> 00:11:45.680
But it's like, it's all about making change.

00:11:47.020 --> 00:11:47.620
So I was like, what?

00:11:47.620 --> 00:11:49.100
It's kind of perfect for my talk.

00:11:49.100 --> 00:11:52.840
My talk's kind of about like driving change from a position of no power.

00:11:52.840 --> 00:11:53.200
Right.

00:11:53.200 --> 00:11:57.400
I think that the no power aspect is one of the super interesting aspects.

00:11:57.400 --> 00:12:03.780
So many companies and people tell me that like at our company, we can't, we're still on Python 2 because no one has decided.

00:12:03.780 --> 00:12:14.140
And one of the really interesting things is the Facebook engineering culture and this aspect of sort of earned authority, I guess.

00:12:14.140 --> 00:12:17.380
Like you don't really have authority, but you start answering questions and helping people.

00:12:17.380 --> 00:12:18.500
And you're like, oh, that person knows.

00:12:18.500 --> 00:12:19.260
So I'll listen to them.

00:12:19.260 --> 00:12:25.660
So maybe talk a little bit about the culture and how that worked there or still does.

00:12:25.660 --> 00:12:26.080
Yeah.

00:12:26.280 --> 00:12:28.660
It's a very, it's a great place to work.

00:12:28.660 --> 00:12:32.160
So if you're on the fence about working for Facebook, just work for Facebook.

00:12:32.160 --> 00:12:32.580
It's great.

00:12:32.580 --> 00:12:36.300
But the thing is, it's like it's engineer led.

00:12:36.300 --> 00:12:40.420
So a manager or someone in leadership never comes and says, oh, we're going to use this technology.

00:12:40.420 --> 00:12:43.100
We're going to use Twisted or we're going to use Django.

00:12:43.100 --> 00:12:46.560
No, it's usually, it's engineers say, you know what?

00:12:46.560 --> 00:12:56.020
If we use this module and they convince their engineers next to them that cross the hall down the street in Dublin, Ireland, and they all start using this thing, we start using it.

00:12:56.020 --> 00:13:06.300
And it's like you have to build up consensus by having a good idea because nobody has the like dictatorial thing.

00:13:06.300 --> 00:13:07.600
Like we're going to do it this way.

00:13:07.600 --> 00:13:07.900
Right.

00:13:07.900 --> 00:13:13.320
There's not an on high statement that we're going to be using this technology or that technology.

00:13:13.320 --> 00:13:15.760
It's just like, all right, you all are smart engineers.

00:13:15.760 --> 00:13:17.420
These are the problems.

00:13:17.420 --> 00:13:18.320
These are our goals.

00:13:18.320 --> 00:13:19.420
Make it happen.

00:13:19.420 --> 00:13:19.880
Exactly.

00:13:19.880 --> 00:13:24.360
It's like this is, and then I go to these engineers and be like, look, I can have an argument.

00:13:24.360 --> 00:13:25.980
This is what I think we need to do.

00:13:25.980 --> 00:13:32.060
And if, and you're like, we should, you know, we should go to Python three because it is, it is looking this way.

00:13:32.060 --> 00:13:33.340
It's going to be the future.

00:13:33.340 --> 00:13:35.620
And at the time it was very sketchy.

00:13:35.620 --> 00:13:41.300
Like it may not have been the future, but now we're no, we've, we clearly made the right decision.

00:13:42.200 --> 00:13:49.120
It's like, once we like, look, do we want to be stuck in the old age or do we want to be able to keep moving forward?

00:13:49.120 --> 00:13:54.140
Cause it's like, if we don't make a decision now, we need to like prepare for the other case.

00:13:54.140 --> 00:13:54.640
Right.

00:13:54.640 --> 00:14:02.740
And by the time that argument gets settled, it could be really painful to turn a big ship of technology like Facebook.

00:14:02.740 --> 00:14:03.080
Right.

00:14:03.080 --> 00:14:03.420
Yeah.

00:14:03.420 --> 00:14:04.760
So we needed to get started early.

00:14:07.600 --> 00:14:10.380
This portion of talk Python to me is brought to you by Linode.

00:14:10.380 --> 00:14:12.600
Are you looking for bulletproof hosting?

00:14:12.600 --> 00:14:14.360
That's fast, simple, and incredibly affordable.

00:14:14.360 --> 00:14:19.260
Look past that bookstore and check out Linode at talkpython.fm/Linode.

00:14:19.260 --> 00:14:21.220
That's L I N O D E.

00:14:21.220 --> 00:14:25.660
Plans start at just $5 a month for a dedicated server with a gig of Ram.

00:14:25.660 --> 00:14:28.180
They have 10 data centers across the globe.

00:14:28.260 --> 00:14:30.700
So no matter where you are, there's a data center near you.

00:14:30.700 --> 00:14:46.040
Whether you want to run your Python web app, host a private Git server or file server, you'll get native SSDs on all the machines, a newly upgraded 200 gigabit network, 24 seven friendly support, even on holidays and a seven day money back guarantee.

00:14:46.040 --> 00:14:48.400
Do you need a little help with your infrastructure?

00:14:48.400 --> 00:14:54.620
They even offer professional services to help you get started with architecture, migrations and more.

00:14:54.620 --> 00:14:57.700
Get a dedicated server for free for the next four months.

00:14:57.700 --> 00:15:00.540
Just visit talkpython.fm/Linode.

00:15:02.420 --> 00:15:17.720
What are some of the things that you felt like came out in Python 3 that subsequently came out and you're like, oh, this is one of the things that were really important to us that we didn't know, but we knew things like this would be available if we did this.

00:15:17.720 --> 00:15:24.560
Well, you know, it's like, I think early on, because like when we were wanting to go to Python 3, it was still Python 3.3.

00:15:25.120 --> 00:15:31.720
It was still, most people don't consider Python 3 worth anything at all until like 3.4 or 5 came out.

00:15:31.720 --> 00:15:33.780
And some would probably say 3.6.

00:15:33.780 --> 00:15:38.160
But I think I was even on the fence to a certain point.

00:15:38.160 --> 00:15:40.220
I was very much in the two only school.

00:15:40.220 --> 00:15:45.000
But I went, I was really in, because, you know, we all know Python, we have this GIL.

00:15:45.000 --> 00:15:53.020
We, unless we're doing IO bound work, we're really handicapped in the single thread or multi-thread for CPU bound tasks.

00:15:53.560 --> 00:15:57.160
And I was, being a new person in Python, I wanted to solve this solution.

00:15:57.160 --> 00:15:58.100
So it was like async.

00:15:58.100 --> 00:15:59.140
Async's the solution.

00:15:59.140 --> 00:16:01.460
And at the time, I was a very big G event person.

00:16:01.460 --> 00:16:07.700
You know, I looked a little bit about Twisted, but Twisted, I was still new to the language, and it was just too confusing for me.

00:16:07.700 --> 00:16:08.000
Right.

00:16:08.000 --> 00:16:09.020
It is a little different, yeah.

00:16:09.020 --> 00:16:15.840
But I went to a talk by Guido when he talked about Tulip, which is what we call asyncio, or what was called asyncio now.

00:16:15.840 --> 00:16:22.900
And I just like had this epiphany, like all this stuff, because like I'm writing, I'm writing libraries for people to use internally.

00:16:23.200 --> 00:16:28.640
And if they have not, if they have decided to use Twisted, they couldn't use my library if I wrote it in G event.

00:16:28.640 --> 00:16:31.700
Or if I wrote my library in Twisted, they couldn't use it in G event.

00:16:31.700 --> 00:16:38.120
Or they had to like kind of make a religious decision about which framework they were going to use, because they were very opinionated.

00:16:38.120 --> 00:16:38.340
Right.

00:16:38.400 --> 00:16:43.300
So all of Python's async capabilities was like these random grassroots projects.

00:16:43.300 --> 00:16:43.540
Yeah.

00:16:43.540 --> 00:16:45.480
And none of them had anything to do with each other.

00:16:45.480 --> 00:16:46.420
None of them talked to each other.

00:16:46.420 --> 00:16:47.160
Right.

00:16:47.160 --> 00:16:47.440
Exactly.

00:16:47.960 --> 00:16:57.540
And I had this, it was like, wait, if this is in the standard lib, and people can use it, and they will, because it's easy enough to use, that means that we could all standardize around it.

00:16:57.620 --> 00:17:08.440
And I think the day after, like Tornado, which has got an async framework around it for doing these websites, it posted abilities to tie into the event loop.

00:17:08.440 --> 00:17:16.180
And then it was like, well, if Twisted did it, and now we have Twisted, you can run your Twisted application or run async.io on a Twisted event loop and vice versa.

00:17:16.180 --> 00:17:27.820
So you can like, we're in this magic world where I, as the library writer, don't have to make the religious decision for the application writer, that they can decide to be like natively twisted.

00:17:27.820 --> 00:17:28.300
Right.

00:17:28.300 --> 00:17:30.040
Because that's the wrong direction.

00:17:30.040 --> 00:17:30.760
Right.

00:17:30.760 --> 00:17:33.680
And I was like, we need to go to Python 3.

00:17:33.680 --> 00:17:35.340
We have to have async.io.

00:17:35.340 --> 00:17:40.980
You know, because I knew async was the future, but there wasn't a clear path in Python 2.

00:17:40.980 --> 00:17:44.360
But in Python 3, there was a path.

00:17:44.360 --> 00:17:49.280
Yeah, and I feel like the async story in Python is getting a lot better.

00:17:49.280 --> 00:17:53.260
I mean, you talked about async.io, and then we have like a cleaner API with async and await.

00:17:53.260 --> 00:17:54.000
Yeah.

00:17:54.000 --> 00:18:02.000
We have a bunch of these cool web frameworks coming along based on things like uv loop, which, you know, replace the async.io event loop and all sorts of cool stuff happening there.

00:18:02.000 --> 00:18:05.720
Yeah, there's like even reimagining of async.io using async await.

00:18:05.720 --> 00:18:09.260
There's two competing frameworks for async.io.

00:18:09.500 --> 00:18:15.140
And someone has already written compatibility drivers so you can basically patch them to each other.

00:18:15.140 --> 00:18:17.680
So if you have a library written in the email, you can use them.

00:18:17.680 --> 00:18:21.460
And I was like, that is the future that I saw back in 2013.

00:18:21.460 --> 00:18:22.700
Right.

00:18:22.700 --> 00:18:25.500
And I think it's coming to play.

00:18:26.420 --> 00:18:34.260
And that was what I really, I was like, oh, we have to do this because, you know, I'm tired of making these janky geovint libraries nobody can use.

00:18:34.260 --> 00:18:36.880
I want to make so that people can actually start working with.

00:18:36.880 --> 00:18:37.140
Yeah.

00:18:37.140 --> 00:18:38.580
And I can definitely see that at Facebook.

00:18:38.580 --> 00:18:41.340
Like you're building these libraries and you want people to adopt them.

00:18:41.340 --> 00:18:44.080
Well, you know, you don't want to have that be a real small group.

00:18:44.080 --> 00:18:45.340
You had an interesting.

00:18:45.340 --> 00:18:51.380
So I think some of those additional reimaginings are probably Trio, Curio by David Beasley.

00:18:51.380 --> 00:18:52.060
Trio, Curio.

00:18:52.060 --> 00:18:56.480
Someone has already written compatibility to make them talk to async.io applications.

00:18:56.480 --> 00:19:00.000
And I don't know if they can talk to each other, but I've seen one that talks to either or.

00:19:00.000 --> 00:19:00.440
Right.

00:19:00.440 --> 00:19:01.900
You can probably chain it through like.

00:19:01.900 --> 00:19:02.180
Yeah.

00:19:02.180 --> 00:19:05.160
Go to async.io to Curio or whatever.

00:19:05.160 --> 00:19:05.640
Right.

00:19:05.640 --> 00:19:05.960
Yeah.

00:19:06.120 --> 00:19:06.320
All right.

00:19:06.320 --> 00:19:20.340
So I think one of the really interesting parts of this journey is to sort of go through the years because kind of like we started off, like the view of Python 3 now is really different than the view of it five years ago.

00:19:20.340 --> 00:19:20.940
Exactly.

00:19:20.940 --> 00:19:25.940
There's absolutely advocates and people pulling for it, but it was a different world.

00:19:25.940 --> 00:19:29.720
So want to take us back to 2013 and sort of start there?

00:19:29.720 --> 00:19:30.160
Yeah.

00:19:30.160 --> 00:19:39.100
I think like it was like back in 2013, there was a big movement of the let's just stay in Python 2 forever.

00:19:39.100 --> 00:19:46.180
Like I guess that I think there was this undercurrent that the core team of Python, of CPython had lost their minds.

00:19:46.180 --> 00:19:48.600
And then Python 3 was ridiculous.

00:19:48.600 --> 00:19:52.600
And it was a very, I think I may have, I was new to the language.

00:19:52.600 --> 00:19:57.020
So I just like, I just picked whatever everybody else was using at Facebook, which was 2.6.

00:19:57.020 --> 00:20:01.360
Well, and you look around, like on Stack Overflow, there were people saying never move to 3.

00:20:01.360 --> 00:20:02.700
Like that's just a waste.

00:20:02.700 --> 00:20:05.320
I mean, there was a lot of that sentiment happening.

00:20:05.320 --> 00:20:07.320
People were like, oh, don't bother learning Python 3.

00:20:07.320 --> 00:20:14.340
And you're just like, you know, and then when I learned it, it was just like, why did we, you know, it's not that bad.

00:20:14.600 --> 00:20:17.920
Honestly, I feel like the differences are so small.

00:20:17.920 --> 00:20:28.420
Sort of modern 2.7 and Python 3 is like, well, you put parentheses on the print statement and like a few other handful of things that they're, none of them are like massive conceptually differences.

00:20:28.420 --> 00:20:28.720
Right.

00:20:28.720 --> 00:20:30.380
It was the libraries.

00:20:30.380 --> 00:20:30.740
Yeah.

00:20:30.740 --> 00:20:31.460
The libraries.

00:20:31.460 --> 00:20:38.900
Cause like, especially cause in, in 2.6, like we had to change the way you did exception catching.

00:20:39.260 --> 00:20:45.660
The change, I don't, I don't even remember what it was, but I remember we had to fix it because it was like, it got deprecated by the time 2.7 came out.

00:20:45.660 --> 00:20:47.280
It no longer worked.

00:20:47.280 --> 00:20:54.440
So it had to fix stuff, but it was like, there were so many old crusty things that had been running on like Python 2 for like 10 years.

00:20:54.440 --> 00:20:58.760
So people were just like, no, I don't want to do it again.

00:20:58.760 --> 00:20:59.980
You know, they were just like.

00:20:59.980 --> 00:21:03.840
Well, and maybe the person who wrote that part is not even at the company anymore.

00:21:03.840 --> 00:21:04.800
No one wants to touch it.

00:21:04.800 --> 00:21:05.220
Exactly.

00:21:05.220 --> 00:21:08.420
They don't want to, they don't want that thing to become their problem.

00:21:08.420 --> 00:21:08.960
Right.

00:21:09.040 --> 00:21:10.100
They just want to work on their stuff.

00:21:10.100 --> 00:21:16.260
It's the same for a lot of third party, third party libraries that the person maintaining it just disappeared.

00:21:16.260 --> 00:21:19.740
We don't know if he's dead or she's dead.

00:21:19.740 --> 00:21:25.180
We just, they don't respond to emails or, you know, and their project is just kind of withered away.

00:21:25.180 --> 00:21:26.180
Yeah.

00:21:26.180 --> 00:21:26.920
People use it.

00:21:26.920 --> 00:21:27.400
Retired.

00:21:27.400 --> 00:21:28.940
They don't care about it.

00:21:28.940 --> 00:21:31.900
Maybe they've moved on to Node.js or whatever.

00:21:31.900 --> 00:21:32.200
Right.

00:21:32.200 --> 00:21:33.580
But for whatever reason, they don't care.

00:21:33.580 --> 00:21:36.720
And the crazy part, some of these modules are super popular.

00:21:36.720 --> 00:21:37.080
Yeah.

00:21:37.080 --> 00:21:38.380
Like the MySQL driver.

00:21:38.380 --> 00:21:38.800
Yeah.

00:21:38.820 --> 00:21:42.180
That one, that one, that one became basically unattended.

00:21:42.180 --> 00:21:42.600
Yeah.

00:21:42.600 --> 00:21:42.960
Wow.

00:21:42.960 --> 00:21:44.420
How interesting.

00:21:44.420 --> 00:21:47.400
I can certainly see like maybe some burnout as well.

00:21:47.400 --> 00:21:47.660
Right.

00:21:47.660 --> 00:21:50.240
You're just like, I just got to take a break.

00:21:50.240 --> 00:21:52.820
If no one else is going to help, this is just going to sit here.

00:21:52.820 --> 00:21:55.760
Cause you know, you gotta, gotta live your life.

00:21:55.760 --> 00:21:56.060
Right.

00:21:56.060 --> 00:21:58.240
Your goal is not to just provide software to the world.

00:21:58.240 --> 00:21:59.060
You're a human.

00:21:59.060 --> 00:21:59.340
Right.

00:21:59.380 --> 00:21:59.660
Exactly.

00:21:59.660 --> 00:21:59.880
All right.

00:21:59.880 --> 00:22:07.680
So you said back in 2013, you're kind of like, I would love for this to be a thing to use Python 3, but I don't think it's going to happen.

00:22:07.680 --> 00:22:08.200
Right.

00:22:08.600 --> 00:22:12.440
You actually had access to Python 3, theoretically, as an option.

00:22:12.440 --> 00:22:14.920
But in practice, it was all messed up, right?

00:22:14.920 --> 00:22:17.920
Yeah, like the binaries were there for Python 3.

00:22:17.920 --> 00:22:20.920
You could run them and get the interpreter.

00:22:20.920 --> 00:22:23.380
But we have kind of a complicated environment.

00:22:23.380 --> 00:22:29.440
We have build systems that go and build C++ dependencies for compiled modules.

00:22:29.440 --> 00:22:36.060
And they kind of make PEXs, which is basically, it's like an archive of all your code that

00:22:36.060 --> 00:22:39.640
you can distribute to a machine and just kind of run it like a binary, but for Python.

00:22:39.640 --> 00:22:40.020
Right.

00:22:40.020 --> 00:22:43.020
It's like a hacked zip file that's executable.

00:22:43.020 --> 00:22:43.700
Exactly.

00:22:43.700 --> 00:22:45.380
And it bundles up all your definencies.

00:22:45.380 --> 00:22:48.420
But it does not bundle up the Python runtime, right?

00:22:48.420 --> 00:22:50.740
It's effectively like a virtual environment, kind of.

00:22:50.740 --> 00:22:52.660
Yeah, it's a deployable virtual environment.

00:22:52.660 --> 00:22:55.660
And the system that we had that built that didn't work.

00:22:55.660 --> 00:23:01.340
So it would call out to Python 2 to run, to basically import your code and do a .compile

00:23:01.340 --> 00:23:04.500
using the compile module to get the PYC.

00:23:05.040 --> 00:23:07.960
And then we would just pack up the PYCs to make this PEX thing.

00:23:07.960 --> 00:23:12.620
And of course, it was like, you would give it Python 3 code and the PyTor compiler would

00:23:12.620 --> 00:23:13.380
blow up on it.

00:23:13.380 --> 00:23:14.620
And you're just like, great.

00:23:14.620 --> 00:23:18.640
And then once you fix all that, it's like, you get this PEX and you run it and it just

00:23:18.640 --> 00:23:19.280
seg faults.

00:23:19.280 --> 00:23:20.240
Or not just seg fault.

00:23:20.240 --> 00:23:25.740
It just stack traces like in the early guts where we're setting up the environment.

00:23:25.740 --> 00:23:27.640
You know, you're like, oh, great.

00:23:27.640 --> 00:23:30.000
It's deeply down broken.

00:23:30.000 --> 00:23:32.260
This is not my problem, but it's not going to run, right?

00:23:32.260 --> 00:23:33.500
It's like deeply broken.

00:23:33.500 --> 00:23:37.240
And it's like, I could have just thrown my hands up at that point, but like, this is

00:23:37.240 --> 00:23:38.000
never going to work.

00:23:38.000 --> 00:23:43.620
And I may have for a week or so, but like, once you figure out that nobody's going to fix

00:23:43.620 --> 00:23:43.800
it.

00:23:43.800 --> 00:23:47.120
You do talk about that sort of be the change you want to see in the world.

00:23:47.120 --> 00:23:49.900
And eventually you're just like, well, if no one else is going to do it, it's going to

00:23:49.900 --> 00:23:50.600
have to be me, right?

00:23:50.680 --> 00:23:54.800
And it turns out, yeah, like if you want something to change and you wait around for

00:23:54.800 --> 00:23:56.340
someone to do it, it may never happen.

00:23:56.340 --> 00:23:57.600
It likely will never happen.

00:23:57.600 --> 00:23:57.820
Yeah.

00:23:57.820 --> 00:23:58.680
Likely will never happen.

00:23:58.680 --> 00:24:04.480
So I started fixing it and got like, I would get it to compile and then I would, I put up

00:24:04.480 --> 00:24:08.960
a diff and have to like go chase down people to like, who knew kind of the system I was

00:24:08.960 --> 00:24:10.280
messing with to do the building.

00:24:10.280 --> 00:24:12.060
Like, Hey, could you review this code?

00:24:12.060 --> 00:24:13.940
Be like, here's my unit test.

00:24:13.940 --> 00:24:18.200
You know, I built some Python three stuff and it ran like, okay, let's land it.

00:24:18.200 --> 00:24:22.220
You know, and then, then the thing that would happen is like the next week, somebody would

00:24:22.220 --> 00:24:26.660
have committed some other Python two only code and you're just like, Oh God, this is never

00:24:26.660 --> 00:24:26.940
ending.

00:24:26.940 --> 00:24:27.460
Yeah.

00:24:27.460 --> 00:24:27.780
Yeah.

00:24:27.780 --> 00:24:32.340
So you talked a little bit about one of the challenges is you've got to convert the libraries

00:24:32.340 --> 00:24:35.880
you depend upon that are internal Facebook libraries to be two and three compatible.

00:24:35.880 --> 00:24:36.600
Yeah.

00:24:36.600 --> 00:24:42.920
And then you also talked about like this regression problem, like constantly challenges you.

00:24:42.920 --> 00:24:46.300
I guess that wasn't until the next year, but that was a problem, right?

00:24:46.300 --> 00:24:47.920
Like you would, you would make your stuff work.

00:24:48.000 --> 00:24:51.280
And then somebody would change a base library that wouldn't work.

00:24:51.280 --> 00:24:55.700
So in 2014, like 13, like people didn't care about Python three.

00:24:55.700 --> 00:25:00.140
So like, they knew that we've kind of, like, we kind of said that it's probably the future.

00:25:00.140 --> 00:25:01.040
We should move to it.

00:25:01.040 --> 00:25:04.700
Like, I think people all kind of had this sense that eventually we'll have to move.

00:25:04.700 --> 00:25:08.280
Like, if you want to Python three support, they would be like, well, we don't have the

00:25:08.280 --> 00:25:09.020
roadmap for that.

00:25:09.020 --> 00:25:12.080
Like, we don't have the manpower to work on that right now.

00:25:12.080 --> 00:25:13.520
So you just go and fix it.

00:25:13.520 --> 00:25:13.700
Right.

00:25:13.700 --> 00:25:18.000
We can't stop for six weeks and like rewrite or six months and rewrite this.

00:25:18.000 --> 00:25:18.220
Right.

00:25:18.220 --> 00:25:21.960
Well, most libraries, it wasn't, it was like, it was a handful of things you would fix.

00:25:21.960 --> 00:25:22.400
Yeah.

00:25:22.480 --> 00:25:26.060
And then just like, oh, they're handling, it's like bytes and string doing wrong, but

00:25:26.060 --> 00:25:27.240
you would fix it.

00:25:27.700 --> 00:25:31.380
And people would, no, people aren't running against Python three, so they just break you.

00:25:31.380 --> 00:25:34.620
So I figured out, it's like, well, you know, that's what I think I really got.

00:25:34.620 --> 00:25:40.620
I really accepted the, the concept of unit test driven development was that when I went

00:25:40.620 --> 00:25:44.600
out and fixed these things, I immediately inject that, I immediately put a test to make sure

00:25:44.600 --> 00:25:45.620
they stayed fixed.

00:25:45.620 --> 00:25:46.760
Yeah.

00:25:46.760 --> 00:25:48.180
I'm not going to fix this again.

00:25:48.480 --> 00:25:54.240
And that, that really stemmed the bleeding because when the next, when the next person

00:25:54.240 --> 00:25:58.540
came to write a code against this library and change something, they would immediately break

00:25:58.540 --> 00:25:58.960
my unit test.

00:25:58.960 --> 00:26:00.540
They're like, oh, well, let me fix this.

00:26:00.540 --> 00:26:00.880
Right.

00:26:00.880 --> 00:26:01.580
Yeah.

00:26:01.580 --> 00:26:06.900
So that's one of the things that you talked about is basically, instead of you playing

00:26:06.900 --> 00:26:12.680
whack-a-mole and constantly chasing these problems around, you, you sort of found a way to get

00:26:12.680 --> 00:26:14.860
the build to work better.

00:26:14.860 --> 00:26:22.660
And somehow you managed to get the build system to, to verify Python three behavior without really

00:26:22.660 --> 00:26:26.040
the authority, just kind of like, yeah, this is for code quality.

00:26:26.040 --> 00:26:27.320
We're going to do this as well.

00:26:27.320 --> 00:26:28.900
And people are like, okay, great.

00:26:28.900 --> 00:26:29.180
Yeah.

00:26:29.240 --> 00:26:32.120
So we had like, everybody knows about flake eight.

00:26:32.120 --> 00:26:36.860
It lints your code and it, you can run, like we already had a PEP 8 linter.

00:26:36.860 --> 00:26:40.160
We actually had our, you know, we were kind of organized.

00:26:40.160 --> 00:26:42.980
We actually made sure that all of our Python code kind of looked the same.

00:26:42.980 --> 00:26:45.120
We would hit, pepe.

00:26:45.120 --> 00:26:48.060
People may not, but argue, heck, how do I fix this?

00:26:48.060 --> 00:26:53.220
But, to make the campaign happy, but some various teams would just run their own linters.

00:26:53.220 --> 00:26:58.520
And I noticed myself, I would commit code and maybe like I had to fix something during code

00:26:58.520 --> 00:27:03.840
review and I forgot to run the linter on it and it would make it into, into production.

00:27:03.840 --> 00:27:08.780
And it would break a test immediately because it was like a syntax error or something silly.

00:27:08.780 --> 00:27:11.200
And, you're like, oh, it's so stupid.

00:27:11.200 --> 00:27:12.120
How did I miss this?

00:27:12.120 --> 00:27:17.040
I was like, well, we're not running linters automatically, but there are linters rather than language like

00:27:17.040 --> 00:27:18.860
PHP or P bus plot.

00:27:18.860 --> 00:27:20.480
There's no space that these linters that ran.

00:27:20.560 --> 00:27:25.380
I was like, well, like we're using fabricator, which is this open source code review tool.

00:27:25.380 --> 00:27:29.580
And it had a thing to tie into, flake eight.

00:27:29.580 --> 00:27:38.020
So I, I went ahead and set it up and I was like, well, if I can run flake eight under Python three and under Python two,

00:27:38.120 --> 00:27:43.360
I would know if people, if I made like an obvious break to two or three.

00:27:43.940 --> 00:27:48.680
And I did that and it was probably, it was really hell for a while for a lot of people.

00:27:48.680 --> 00:27:52.900
Cause you were getting double the amount of flint warnings in your code review.

00:27:52.900 --> 00:27:55.360
You'd get them for both two and three.

00:27:55.360 --> 00:28:02.580
And I spent a lot of time to tell people it's like, okay, explain to people what's going on and why they shouldn't go secretly disable my linter.

00:28:03.580 --> 00:28:10.480
And, because it was like, this will make our code better quality and people like, they were already running these linters.

00:28:10.480 --> 00:28:11.880
They were like, oh yeah, this is great.

00:28:11.880 --> 00:28:13.820
Can we actually make them to do?

00:28:13.820 --> 00:28:14.960
Woo gosh, did that.

00:28:14.960 --> 00:28:17.260
And that was, that didn't happen to like 2016.

00:28:17.260 --> 00:28:17.980
I don't think.

00:28:17.980 --> 00:28:19.340
But right.

00:28:19.340 --> 00:28:23.080
And now you're almost to the point where you do it by turning off the version two one.

00:28:23.080 --> 00:28:27.780
Well, no, like I think, well, gosh, basically if the messages were the same, he didn't print it.

00:28:27.780 --> 00:28:28.900
They're like, he didn't print the version.

00:28:28.900 --> 00:28:29.840
He said, pie flakes.

00:28:29.840 --> 00:28:31.800
This is the message kind of thing.

00:28:31.800 --> 00:28:32.140
Yeah.

00:28:32.360 --> 00:28:42.660
So another thing that you talked about doing is using the dunder future module to at least stop writing only Python two code, right?

00:28:42.660 --> 00:28:45.320
Like you imported the print function and division and so on.

00:28:45.320 --> 00:28:49.560
But this was like one of the early, early things, even when there was not actually a path, right?

00:28:49.560 --> 00:28:49.880
Yeah.

00:28:49.880 --> 00:28:54.780
We had a linter, someone, he wanted to prolong the use of his two eight.

00:28:54.780 --> 00:28:59.900
He wanted to keep writing two eight and hopefully it live longer than he thought.

00:29:00.080 --> 00:29:03.060
Like maybe we switched to three and like the next year.

00:29:03.060 --> 00:29:07.840
He didn't really know, but he wanted to, he wanted Python two to behave more like three.

00:29:07.840 --> 00:29:09.720
And that was pretty wise actually.

00:29:09.720 --> 00:29:12.100
And that got us very far at Facebook.

00:29:12.100 --> 00:29:14.700
And he set up a linter to force everybody to do it.

00:29:14.700 --> 00:29:17.660
And it caused a lot of pain at the time, but people just fixed.

00:29:17.660 --> 00:29:22.720
Like if you make it like this, like a commit hook or something, people just try to make it happy.

00:29:22.980 --> 00:29:24.940
And if they can't make it happy, then they complain.

00:29:24.940 --> 00:29:25.840
That's pretty interesting.

00:29:25.840 --> 00:29:26.620
Yeah.

00:29:26.620 --> 00:29:30.320
There was no real message from on high to say we're using Python three.

00:29:30.320 --> 00:29:33.600
But when the linter says, oh, this doesn't work right because of Python three.

00:29:33.600 --> 00:29:34.720
Well, all right, we'll just fix that.

00:29:34.720 --> 00:29:34.940
Yeah.

00:29:34.940 --> 00:29:37.040
It's like, oh, why, why does my import not work?

00:29:37.040 --> 00:29:41.000
Oh, well you're using, you can't use these relative imports without being explicitly relative.

00:29:41.280 --> 00:29:42.700
And yeah, it took a while.

00:29:42.700 --> 00:29:47.540
The Unicode literals thing probably ate up a lot of time, but we solved that back in like Python two.

00:29:47.540 --> 00:29:49.900
And people internalized it.

00:29:49.900 --> 00:29:53.220
It's like, if you wrote good Python two, you were using the future imports.

00:29:53.220 --> 00:29:53.680
Right.

00:29:53.680 --> 00:29:53.980
Yeah.

00:29:53.980 --> 00:29:54.480
That's really cool.

00:29:54.480 --> 00:30:06.400
Another thing you did back in 2012, sorry, 2014, when this was kind of a still just a little micro project was in the build system or just all the environments.

00:30:06.400 --> 00:30:09.860
You made sure that six and two to three were sort of omnipresent.

00:30:09.860 --> 00:30:11.140
What was the story of that?

00:30:11.220 --> 00:30:15.020
Well, we had these linters in place and people were always like, well, how do I fix this thing?

00:30:15.020 --> 00:30:22.220
That would spend a ton of, a lot of churn on the message board was like, okay, I understand this is a problem, but how do I fix it?

00:30:22.220 --> 00:30:24.700
And it's still working two and three.

00:30:24.700 --> 00:30:33.440
And it was like, well, you can do this extra code or, hey, there's this thing, this module called six or this module called future that you can import.

00:30:33.440 --> 00:30:33.840
And it does.

00:30:33.840 --> 00:30:37.680
So, and people like, well, okay, so I have to go add this to my build dependencies.

00:30:37.680 --> 00:30:39.520
And you're like, or they would get mad.

00:30:39.520 --> 00:30:40.760
It's like, oh, it's not there automatically.

00:30:41.160 --> 00:30:44.020
So it's like to make it easier to like lower that barrier.

00:30:44.020 --> 00:30:55.980
I just, I tripped the system into injecting it to everybody's build configs so that your pecs that when it gets produced would have six and the future module.

00:30:55.980 --> 00:30:56.580
That's really cool.

00:30:56.580 --> 00:31:00.700
So that was, they could just do this code and then they have to change anything about their system.

00:31:00.700 --> 00:31:02.840
It was like, it was just, that was the way you could write it.

00:31:02.840 --> 00:31:04.240
It was like, it was part of the standard lib.

00:31:04.240 --> 00:31:04.740
That's great.

00:31:04.740 --> 00:31:11.500
Maybe for folks who don't necessarily have battle scars from the Python two days, tell them what six is.

00:31:11.500 --> 00:31:17.220
So six is like the first link, the first library for converting two to three.

00:31:17.480 --> 00:31:21.740
It allows you to do things that are completely different from either language.

00:31:21.740 --> 00:31:25.800
Like if you're setting a meta class on a class, it's different.

00:31:25.800 --> 00:31:28.660
Like the syntax is different, Python two and three.

00:31:28.840 --> 00:31:34.620
So six provides you a decorator you can call that you can wrap your class with and it'll, it'll set the meta class.

00:31:34.620 --> 00:31:39.400
And six has a thing where it like, cause there are modules that moved between two and three.

00:31:39.520 --> 00:31:43.140
And six has a thing where you can import from a certain move location.

00:31:43.140 --> 00:31:45.000
And there was also this thing called Python.

00:31:45.000 --> 00:31:47.140
It's called the future module.

00:31:47.140 --> 00:31:50.540
From that, you can, it's, it's kind of like six, but it's a little different.

00:31:50.540 --> 00:31:52.400
Sometimes it's, sometimes it's nicer code.

00:31:52.400 --> 00:31:53.280
Sometimes it doesn't.

00:31:53.280 --> 00:31:54.440
I use both.

00:31:54.440 --> 00:31:56.400
So I don't have to force that decision on people.

00:31:56.400 --> 00:31:58.400
You know, it's like, I just want to make people happy.

00:31:58.400 --> 00:31:59.680
Give them all the tools.

00:31:59.680 --> 00:32:00.500
All the tools.

00:32:00.500 --> 00:32:01.700
You want a crescent wrench.

00:32:01.700 --> 00:32:02.420
You want a socket wrench.

00:32:02.420 --> 00:32:02.660
Whatever.

00:32:02.660 --> 00:32:03.680
Just get it to run a load.

00:32:03.680 --> 00:32:09.180
Before six, you would have to write these if statements where you would say like, if sys.version.

00:32:09.440 --> 00:32:15.000
Or info, like, cause it's the main topic, like offset zero equals three.

00:32:15.000 --> 00:32:16.260
You would do some code.

00:32:16.260 --> 00:32:18.180
Like, this is a lot of garbage.

00:32:18.180 --> 00:32:21.840
And six is like, oh, just say from six import pi three.

00:32:21.840 --> 00:32:23.200
And you say, if pi three.

00:32:23.200 --> 00:32:24.660
And you're like, oh, that's better.

00:32:24.660 --> 00:32:25.640
You know, so.

00:32:25.640 --> 00:32:26.380
Yeah, it's much better.

00:32:26.380 --> 00:32:32.160
This portion of Talk Python to Me is brought to you by Rollbar.

00:32:32.160 --> 00:32:33.560
Got a question for you.

00:32:33.560 --> 00:32:36.280
Have you been outsourcing your bug discovery to your users?

00:32:36.280 --> 00:32:38.940
Have you been making them send you bug reports?

00:32:39.360 --> 00:32:40.620
You know, there's two problems with that.

00:32:40.620 --> 00:32:42.600
You can't discover all the bugs this way.

00:32:42.600 --> 00:32:45.160
And some users don't bother reporting bugs at all.

00:32:45.160 --> 00:32:47.060
They just leave, sometimes forever.

00:32:47.060 --> 00:32:50.860
The best software teams practice proactive error monitoring.

00:32:50.860 --> 00:32:59.260
They detect all the errors in their production apps and services in real time and debug important errors in minutes or hours, sometimes before users even notice.

00:32:59.900 --> 00:33:04.340
Teams from companies like Twilio, Instacart and CircleCI use Rollbar to do this.

00:33:04.540 --> 00:33:10.440
With Rollbar, you get a real-time feed of all the errors so you know exactly what's broken in production.

00:33:10.440 --> 00:33:17.620
And Rollbar automatically collects all the relevant data and metadata you need to debug the errors so you don't have to sift through logs.

00:33:17.780 --> 00:33:21.580
If you're using Rollbar yet, they have a special offer for you and it's really awesome.

00:33:21.580 --> 00:33:26.080
Sign up and install Rollbar at talkpython.fm/Rollbar.

00:33:26.080 --> 00:33:38.100
And Rollbar will send you a $100 gift card to use at the Open Collective, where you can donate to any of the 900 plus projects listed under the Open Source Collective or to the Women Who Code organization.

00:33:38.560 --> 00:33:41.760
Get notified of errors in real time and make a difference in open source.

00:33:41.760 --> 00:33:44.640
Visit talkpython.fm/Rollbar today.

00:33:44.640 --> 00:33:53.640
You had sort of summarized each year your thought about how likely this Python 3 world might be.

00:33:53.640 --> 00:33:57.100
In 2013, you said, not going to work, not going to be a thing probably.

00:33:57.100 --> 00:33:57.520
Yeah.

00:33:57.520 --> 00:33:59.740
2014, you're like, highly unlikely.

00:34:00.600 --> 00:34:10.740
So then one of the really interesting things that caught my attention about your talk was in 2015, you started getting involved with teaching Python at Facebook to new hires.

00:34:10.740 --> 00:34:11.640
Yes.

00:34:11.640 --> 00:34:12.000
Talk about that.

00:34:12.000 --> 00:34:18.260
So, yeah, we had this class because we've already talked about we have this kind of complicated environment we build.

00:34:18.260 --> 00:34:22.780
We have the PEC system, the fake zip file with the binary on top of it.

00:34:23.100 --> 00:34:26.740
And we have all the C++ that's compiled in with you.

00:34:26.740 --> 00:34:32.960
And we have a whole process for getting external libraries into it so it can be linked with those C++.

00:34:32.960 --> 00:34:34.660
There's a lot.

00:34:34.660 --> 00:34:38.920
And coming with just an open source knowledge of Python, you would be lost.

00:34:38.920 --> 00:34:51.600
So we have this class that all boot campers, at least for touch engineering, can learn about Python and learn, hopefully get rid of all these roadblocks so that they can hit the ground and just produce some Python code that does some more work.

00:34:51.880 --> 00:34:53.800
Here's what Python at Facebook looks like.

00:34:53.800 --> 00:34:55.920
Here's how you work with our infrastructure from Python.

00:34:55.920 --> 00:34:56.760
Stuff like that, right?

00:34:56.760 --> 00:34:58.880
Because that's where they're going to learn that, right?

00:34:58.880 --> 00:35:00.860
Yeah, we'd warn them about the linter.

00:35:00.860 --> 00:35:02.880
They'd be like, oh, yeah, the linter's going to hit you.

00:35:02.880 --> 00:35:03.820
And this is how you fix it.

00:35:03.820 --> 00:35:06.860
Like, we talk about the four futures.

00:35:06.860 --> 00:35:09.360
And that was already in there when I started teaching classes.

00:35:09.360 --> 00:35:13.680
Like, what if we start teaching people that we expect them to write Python 3?

00:35:13.680 --> 00:35:16.960
And secretly, that was my secret.

00:35:16.960 --> 00:35:18.620
Because it wasn't really true.

00:35:18.620 --> 00:35:21.180
But the new hires didn't know that.

00:35:21.180 --> 00:35:21.500
Right.

00:35:21.500 --> 00:35:23.460
And it was feasible.

00:35:23.460 --> 00:35:24.040
Yeah.

00:35:24.040 --> 00:35:25.820
Like, they could write Python 3 at this point.

00:35:25.820 --> 00:35:28.080
You'd done enough work to get the infrastructure in place.

00:35:28.080 --> 00:35:29.160
So it would work.

00:35:29.160 --> 00:35:29.400
Yeah.

00:35:29.400 --> 00:35:32.000
So it's like we say, oh, you're expected to write Python 3.

00:35:32.000 --> 00:35:37.240
And if you have any issues, feel free to fix them yourself if you can.

00:35:37.240 --> 00:35:39.080
Otherwise, reach out to us.

00:35:39.280 --> 00:35:42.780
And it was like there was like a couple friends, friends of Python 3.

00:35:42.780 --> 00:35:47.660
That was like a secret group that we were trying to push it forward at this point.

00:35:47.660 --> 00:35:50.080
That you could reach out to us and we'll help you.

00:35:50.080 --> 00:35:51.820
Or post in the message board.

00:35:51.820 --> 00:35:54.220
And we'll help you with your problem.

00:35:54.220 --> 00:35:54.820
That's awesome.

00:35:54.880 --> 00:35:56.340
We were gathering like a wiki.

00:35:56.340 --> 00:35:56.740
Yeah.

00:35:56.740 --> 00:35:59.560
And to be clear, when you say if you run into a problem, just fix it.

00:35:59.560 --> 00:36:01.120
That isn't with your code necessarily.

00:36:01.120 --> 00:36:02.720
That's like you try to use one of the libraries.

00:36:02.720 --> 00:36:04.400
It doesn't work in Python 3.

00:36:04.400 --> 00:36:10.500
Well, you're expected to go kind of try to make that dependency that we have work in Python 3.

00:36:10.500 --> 00:36:15.400
And just get them to sort of own the foundation of all the Python, right?

00:36:15.400 --> 00:36:15.600
Yeah.

00:36:15.600 --> 00:36:17.940
At Facebook, there's this saying.

00:36:17.940 --> 00:36:19.880
It's like nothing is nobody else's problem.

00:36:19.880 --> 00:36:22.380
Or it's not something along those lines.

00:36:22.380 --> 00:36:26.220
But it's like there's this mentality that something's broken.

00:36:26.220 --> 00:36:29.660
You don't just immediately go and find out, oh, well, who owns this code?

00:36:29.660 --> 00:36:30.360
I'm going to go complain.

00:36:30.360 --> 00:36:31.340
Like, no.

00:36:31.340 --> 00:36:32.360
See if you can fix it.

00:36:32.360 --> 00:36:38.580
Because if you fix it within like five minutes, you'll be ahead of your schedule if you had to go and like track down a person.

00:36:38.580 --> 00:36:42.220
And like complain to them and get them to release something on their schedule.

00:36:42.220 --> 00:36:43.480
You can just fix it.

00:36:43.480 --> 00:36:45.120
Put up a little diff and keep working.

00:36:45.120 --> 00:36:51.660
And if we taught people to just do that, like we kind of were tricking them to do work for us.

00:36:51.660 --> 00:36:52.100
Yeah.

00:36:52.100 --> 00:37:00.520
Yeah, there's a lot of lessons of sort of distributed responsibility, distributed work in here through the linters and through this education component.

00:37:00.520 --> 00:37:02.500
And it more or less worked, right?

00:37:02.500 --> 00:37:03.920
People started writing Python 3 code.

00:37:03.920 --> 00:37:06.380
Yeah, they would join their teams after boot camp.

00:37:06.920 --> 00:37:09.060
And they would say, hey, how come we're not using Python 3?

00:37:09.060 --> 00:37:11.000
And the people there, they didn't have a good answer.

00:37:11.000 --> 00:37:14.860
And the new people would start writing Python 3.

00:37:14.860 --> 00:37:22.220
And so, like all these teams started coming out with like, hey, we're putting out Python 3 for our new project.

00:37:22.220 --> 00:37:24.580
Because that's all the new people want to write.

00:37:24.580 --> 00:37:26.800
I think that's great.

00:37:27.200 --> 00:37:30.660
So, 2015, you dubbed the year of maybe.

00:37:30.660 --> 00:37:31.800
Maybe it's going to work.

00:37:31.800 --> 00:37:32.440
Starting to look good.

00:37:32.440 --> 00:37:37.800
And then 2016, something pretty major happened with Instagram.

00:37:37.800 --> 00:37:42.240
Instagram is one of or not the biggest Django deployment.

00:37:42.240 --> 00:37:47.300
And they actually did a whole keynote about their move to Python 3.

00:37:47.300 --> 00:37:48.520
But that was a big deal, right?

00:37:48.660 --> 00:37:49.580
Yes, that was huge.

00:37:49.580 --> 00:37:53.480
The thing was like, well, Instagram was Python 2 at the time.

00:37:53.480 --> 00:37:57.000
And it was like, do we, does Instagram stay on Python 2?

00:37:57.000 --> 00:38:03.720
And we were, it was like me and Lukash Longa were like, he really fought hard for us.

00:38:03.720 --> 00:38:05.880
Like, no, you guys have to move to Python 3.

00:38:06.120 --> 00:38:10.260
And if you don't move to Python 3, you should just give up the ghost and go to PHP.

00:38:10.260 --> 00:38:12.140
And they're like, whoa, whoa, whoa.

00:38:12.140 --> 00:38:13.280
They're like, just a second.

00:38:13.280 --> 00:38:13.900
We can find it.

00:38:13.900 --> 00:38:15.000
Actually, you know, it's at Facebook.

00:38:15.000 --> 00:38:17.220
That's a good sound business argument to say.

00:38:17.220 --> 00:38:19.140
It's like, you should probably use PHP.

00:38:19.140 --> 00:38:20.600
We've invested a lot of money in that.

00:38:20.600 --> 00:38:22.960
And it runs like the biggest website in the world.

00:38:22.960 --> 00:38:24.560
Like, I think that makes sense.

00:38:24.560 --> 00:38:29.260
And they're like, oh, let's just stay with Python.

00:38:29.260 --> 00:38:32.120
You know, we don't want to like lose all of our developers.

00:38:32.120 --> 00:38:33.540
Yeah, that's really interesting.

00:38:33.880 --> 00:38:39.460
There was a keynote, I think, at the 2016, 2017, PyCon, about this.

00:38:39.460 --> 00:38:47.420
And it was really, really just such a step-by-step practical way for large organizations to move.

00:38:47.420 --> 00:38:51.100
Because it wasn't just Instagram upgraded to Python 3.

00:38:51.100 --> 00:38:53.960
They also changed Django, major Django versions.

00:38:53.960 --> 00:38:58.320
And they did all of that without branching in production.

00:38:58.320 --> 00:38:58.480
Yeah.

00:38:58.480 --> 00:38:59.620
Right?

00:38:59.620 --> 00:39:01.680
Like, that is just incredible.

00:39:01.680 --> 00:39:03.960
It talks to the power of tests as well.

00:39:03.960 --> 00:39:10.080
Like, this is all unit test-driven, where they would take a test and they would make it work on Python 3.

00:39:10.080 --> 00:39:13.920
Or like, change the code enough to where it would still pass on 2 and 3.

00:39:13.920 --> 00:39:15.080
Right.

00:39:15.080 --> 00:39:17.980
And I don't know how they did Django.

00:39:17.980 --> 00:39:20.600
That was like, that's crazy.

00:39:20.600 --> 00:39:21.480
That's another level.

00:39:21.480 --> 00:39:23.420
But I think it also involves unit tests.

00:39:23.420 --> 00:39:24.900
It must have, right?

00:39:24.900 --> 00:39:26.280
But still, that's impressive.

00:39:26.280 --> 00:39:28.220
Without branching in production.

00:39:28.220 --> 00:39:28.620
Yeah.

00:39:28.620 --> 00:39:29.180
That's crazy.

00:39:29.180 --> 00:39:31.280
That's really super impressive.

00:39:31.280 --> 00:39:35.640
And every time I hear someone say, oh, we can't move to Python 3.

00:39:35.640 --> 00:39:36.860
Or it's totally unpractical.

00:39:36.860 --> 00:39:37.280
Yeah.

00:39:37.280 --> 00:39:38.700
We're too big to move to Python 3.

00:39:38.700 --> 00:39:38.780
Yeah.

00:39:38.780 --> 00:39:44.140
It's like, well, here's a roadmap and a pretty insane example.

00:39:44.140 --> 00:39:49.000
You know, the rest of the stuff is not as visible what you're working on because it's infrastructure level.

00:39:49.000 --> 00:39:51.040
But still, you know, also impressive.

00:39:51.520 --> 00:39:55.580
Another thing that you said happened around 2016 is it became Python 3 by default.

00:39:55.580 --> 00:39:56.140
What does that mean?

00:39:56.140 --> 00:40:02.900
Whenever you would, like I talked about their build system, and you had a little script that you would tell it, oh, these are the third party dependencies I need.

00:40:02.900 --> 00:40:05.080
These are the dependencies that someone at Facebook has written.

00:40:05.080 --> 00:40:07.060
These are the C++ dependencies I need.

00:40:07.060 --> 00:40:14.300
And it would, the build system, you would say build, and it would give you the little pecs that you could take to any system of Facebook and it would run your Python code.

00:40:14.300 --> 00:40:18.420
That can fit if you just, like, copied what the wikis told you to do.

00:40:18.420 --> 00:40:20.180
It would give you a Python 2 binary.

00:40:20.180 --> 00:40:28.020
And we had been telling people in the class, a new hard class, that, oh, you should add this thing that says pi underscore version equals three.

00:40:28.020 --> 00:40:29.880
And you'll get a Python 3.

00:40:29.880 --> 00:40:32.020
And people are like, oh, why do I have to say that?

00:40:32.020 --> 00:40:35.480
And we just say, oh, because two, two, I always do default.

00:40:35.480 --> 00:40:40.640
It was like, there were so many people every day were saying, oh, we'll release this to Python 3.

00:40:40.640 --> 00:40:47.860
That it was like, the only people that were still writing Python 2 code, they didn't have, they didn't really, they weren't like staunch Python 2 supporters.

00:40:47.860 --> 00:40:49.320
They were just using the defaults.

00:40:49.320 --> 00:40:53.160
So I had this like, well, what if we just switch the default, see if anybody cares?

00:40:53.160 --> 00:40:57.960
And so I sent a message out like, hey, I'm going to switch the default to Python 3.

00:40:57.960 --> 00:40:59.820
If you think this is a bad idea, say something.

00:40:59.820 --> 00:41:02.020
And nobody said anything.

00:41:02.200 --> 00:41:05.920
And people were all like, thumbs up, you know, I like this, this is good.

00:41:05.920 --> 00:41:15.560
And so I did the switcheroo and I made everybody who's currently in Python 2 explicitly say that they're Python 2 and everybody's Python 3 get rid of their version line completely.

00:41:15.560 --> 00:41:17.720
And it was just the default was the Python 3 version.

00:41:17.720 --> 00:41:20.600
And nobody got broken.

00:41:20.600 --> 00:41:23.000
There was no like major side outages.

00:41:23.000 --> 00:41:26.600
It just, that was a very smart decision.

00:41:26.600 --> 00:41:30.540
It was like, look, we were probably at like, probably less than 20%.

00:41:30.540 --> 00:41:34.920
I think I have a graph somewhere in my talk where it was like, oh yeah, we were way less than 20%.

00:41:34.920 --> 00:41:41.600
We were not even like 10, but it felt like we were really high because all the new stuff was coming out for Python 3.

00:41:41.600 --> 00:41:42.000
Right.

00:41:42.000 --> 00:41:44.400
And then this just, just flipped it, right?

00:41:44.400 --> 00:41:46.840
All the people who were not setting things explicitly, they didn't care.

00:41:46.840 --> 00:41:49.340
It just, it changed, changed the tide, right?

00:41:49.340 --> 00:41:50.880
People who didn't care what version they're using.

00:41:50.880 --> 00:41:55.580
They just wanted a version of Python that they could, you know, because as long as it wasn't C++, these guys were happy.

00:41:55.580 --> 00:42:00.140
They just, you know, not having to, they didn't care and they weren't part of this fight.

00:42:00.140 --> 00:42:03.100
So we just, whatever the default was, they're going to use it.

00:42:03.100 --> 00:42:03.880
That's really excellent.

00:42:03.880 --> 00:42:05.480
And a lot of the future work, right?

00:42:05.480 --> 00:42:09.200
The import, the print function and stuff is kind of what made that work, right?

00:42:09.200 --> 00:42:09.700
Oh yeah.

00:42:09.700 --> 00:42:10.700
And like, yeah.

00:42:10.700 --> 00:42:14.520
So like a lot of the existing modules of people who had already fixed all that future stuff,

00:42:14.520 --> 00:42:17.880
some of them just imported fine into Python 3.

00:42:17.880 --> 00:42:18.160
Right.

00:42:18.160 --> 00:42:21.800
I mean, how often are you like doing crazy, like meta class stuff, right?

00:42:21.820 --> 00:42:22.880
Like that's not that common.

00:42:22.880 --> 00:42:26.100
More than we should is the case.

00:42:26.100 --> 00:42:28.000
Everybody's like, I don't use meta class here.

00:42:28.000 --> 00:42:29.420
Like maybe you shouldn't.

00:42:29.420 --> 00:42:35.580
But yeah, it's like, I think in most of the major, like heavily used code paths had already

00:42:35.580 --> 00:42:38.980
been cleaned up by like me or somebody else.

00:42:38.980 --> 00:42:44.260
Cause if, if it's a, if it's a major use dependency, it's already been fixed for Python 3.

00:42:44.260 --> 00:42:48.780
Cause by 2016, we already had a services in production, right?

00:42:48.780 --> 00:42:49.380
Python 3.

00:42:49.380 --> 00:42:49.680
Yeah.

00:42:49.680 --> 00:42:50.300
That's great.

00:42:50.600 --> 00:42:55.360
So one of the things I think is interesting, there's a quote that you talk about from one

00:42:55.360 --> 00:43:00.000
of the engineers that sort of touches on this conception that Python 3 is slower.

00:43:00.000 --> 00:43:05.060
And it says something to the effect of, we just did a very basic two to three on our service,

00:43:05.060 --> 00:43:08.960
which means they ran the two to three program on the service to just automatically upgrade

00:43:08.960 --> 00:43:09.280
it.

00:43:09.280 --> 00:43:10.800
Everything just worked.

00:43:10.800 --> 00:43:14.200
Now we're using half as much memory and it's 40% faster.

00:43:14.200 --> 00:43:15.100
Yes, this is true.

00:43:15.100 --> 00:43:16.320
That's a, that's a true quote.

00:43:16.460 --> 00:43:21.460
I saw the, I think I may have stamped the diff as being approved and it was like simple.

00:43:21.460 --> 00:43:25.820
Like it was just like changing the way they catch exceptions.

00:43:25.820 --> 00:43:26.860
Right.

00:43:26.860 --> 00:43:31.420
And, cause it's like, I think before it involved, I didn't remember at this point,

00:43:31.420 --> 00:43:34.480
I've, I've, I've, I've, that's, that's just lost left on my head space, but it was like,

00:43:34.480 --> 00:43:38.520
it was just basic things that you're like, Oh, that that's easy.

00:43:38.520 --> 00:43:40.520
Like you didn't even need the tool to change it.

00:43:40.520 --> 00:43:43.400
It was like, it wasn't, they didn't really have a lot of code that needed to be changed.

00:43:44.020 --> 00:43:46.120
But, so it was like surprising.

00:43:46.120 --> 00:43:48.320
There's like, Oh, that's all you changed.

00:43:48.320 --> 00:43:50.940
And you, you're 40% faster.

00:43:50.940 --> 00:43:51.400
Really?

00:43:51.400 --> 00:43:51.780
Yeah.

00:43:51.780 --> 00:43:53.880
Which speaks to the different runtime, right?

00:43:53.880 --> 00:43:54.960
The different CPython.

00:43:54.960 --> 00:43:55.840
Yeah.

00:43:55.840 --> 00:43:58.800
And for a long time, Python three was a lot slower.

00:43:58.800 --> 00:44:04.540
And I think still there might be some edge cases that are faster and Python two seven.

00:44:04.540 --> 00:44:06.400
A lot of it probably has to do with strings, right?

00:44:06.400 --> 00:44:09.520
Like the, the different behaviors around strings and bytes and all that stuff.

00:44:09.520 --> 00:44:14.680
I think it's gotten faster and three six, like they, they, they really like pulled ahead

00:44:14.680 --> 00:44:17.520
to use less memory and stuff with all the different fixes.

00:44:17.520 --> 00:44:21.140
But I think that when that thing came out, people were still comparing.

00:44:21.140 --> 00:44:23.420
It's like three, two and three, three.

00:44:23.420 --> 00:44:24.580
And they just had, right.

00:44:24.580 --> 00:44:25.900
That was their argument.

00:44:25.900 --> 00:44:30.120
And they just hadn't actually updated their benchmarks to use new version.

00:44:30.120 --> 00:44:31.740
Cause they'd already given up a little Python three.

00:44:31.740 --> 00:44:33.800
And they're like, Oh, Python three is just too slow.

00:44:33.800 --> 00:44:38.900
And then it's like, by the time three, five came out, I think that, or that might've

00:44:38.900 --> 00:44:39.540
been out three, four.

00:44:39.540 --> 00:44:44.280
But, it was like, it's kind of snuck up and be like, actually the core dev has been

00:44:44.280 --> 00:44:46.680
working a lot to make this really fast.

00:44:46.680 --> 00:44:48.740
And that work continues today, right?

00:44:48.740 --> 00:44:49.200
Yes.

00:44:49.200 --> 00:44:49.680
Yeah.

00:44:49.680 --> 00:44:52.720
Python three seven bound function calls.

00:44:52.720 --> 00:44:55.880
So function methods basically are 20% faster.

00:44:55.880 --> 00:44:56.560
Oh, I can't wait.

00:44:56.560 --> 00:44:57.660
In most cases.

00:44:57.660 --> 00:44:57.920
Right.

00:44:57.920 --> 00:45:00.040
Like, and that's just three, six to three, seven.

00:45:00.040 --> 00:45:00.660
This is great.

00:45:00.660 --> 00:45:02.080
So yeah, it's, it's all good.

00:45:02.080 --> 00:45:03.460
I'm hoping for next week.

00:45:03.460 --> 00:45:08.060
If, if Lucas hears this, I'm hoping for next week.

00:45:08.280 --> 00:45:08.420
Okay.

00:45:08.420 --> 00:45:12.700
So you had deemed 2016 Python three by default.

00:45:12.700 --> 00:45:13.360
That was good.

00:45:13.360 --> 00:45:16.460
And then 27 is sort of overtaking Python two.

00:45:16.460 --> 00:45:21.940
And one of the things you highlighted then that happened was now Instagram is running on

00:45:21.940 --> 00:45:22.680
Python three.

00:45:22.680 --> 00:45:27.920
It has access to this amazing new features that were locked, you know, blocked off like

00:45:27.920 --> 00:45:31.580
asyncio and in the typing static, you know, type hints and all that stuff.

00:45:31.580 --> 00:45:31.780
Right.

00:45:31.840 --> 00:45:32.000
Yeah.

00:45:32.000 --> 00:45:35.560
It's like, you can say it's like, Oh, you can use typing in Python two, but it's like

00:45:35.560 --> 00:45:39.000
the types in top two or three are semantically different.

00:45:39.000 --> 00:45:43.420
Like things that you can do in two, like you may have, they may have different types or

00:45:43.420 --> 00:45:45.320
they may have the same type, but they're behave differently.

00:45:45.480 --> 00:45:48.600
So it's like your type formation may not be the same between versions.

00:45:48.600 --> 00:45:51.460
So we told them to hold off to the winter three.

00:45:51.460 --> 00:45:55.240
Cause it just made, we'd have to double the work, but yeah.

00:45:55.240 --> 00:45:55.560
Right.

00:45:55.560 --> 00:45:57.540
And you don't have it like in the function.

00:45:57.540 --> 00:46:00.620
You've got it like in, in doc string type format, right?

00:46:00.700 --> 00:46:02.420
Which is not nearly as nice.

00:46:02.420 --> 00:46:02.440
Yeah.

00:46:02.440 --> 00:46:03.320
It's not as nice.

00:46:03.320 --> 00:46:04.540
And or whatever.

00:46:04.540 --> 00:46:04.860
Right.

00:46:04.860 --> 00:46:05.140
Yeah.

00:46:05.140 --> 00:46:06.740
And people want it to be in line.

00:46:06.740 --> 00:46:11.340
They want it because if it's a comment, it's gonna like, it's not always going to be correct.

00:46:11.340 --> 00:46:16.320
So at least with the type annotations, like you would know, like it would, it's like, Oh,

00:46:16.320 --> 00:46:18.120
I changed the name of the import.

00:46:18.120 --> 00:46:19.840
It's all going to go fix all the types.

00:46:19.840 --> 00:46:23.480
But if it was a comment, you wouldn't know that until you decided to actually run the type

00:46:23.480 --> 00:46:26.600
checker in the early days before we even had a type checker.

00:46:26.600 --> 00:46:28.600
It was like, we're just putting these types for humans to read.

00:46:28.600 --> 00:46:29.300
Yeah, exactly.

00:46:29.820 --> 00:46:34.920
So one of the things that you said around this time is that working in Python was fun

00:46:34.920 --> 00:46:35.500
again, right?

00:46:35.500 --> 00:46:40.160
People were super excited about all the new stuff and the new capabilities and it just kind of

00:46:40.160 --> 00:46:41.680
revitalized people's joy, right?

00:46:41.680 --> 00:46:42.080
Yeah.

00:46:42.080 --> 00:46:47.340
It's like, like, I guess because of the whole two, three problem, like people who were, who

00:46:47.340 --> 00:46:51.260
were like fans of Python were like, they were really negative.

00:46:51.260 --> 00:46:53.100
They're like, Python's dead.

00:46:53.100 --> 00:46:55.600
You know, I guess kind of like the pearl is dead.

00:46:55.600 --> 00:46:58.940
It kind of in, in their, in your mind though, if, if you're in your mind, you're not switching

00:46:58.940 --> 00:47:00.820
to Python three.

00:47:00.820 --> 00:47:01.560
It is dead.

00:47:01.560 --> 00:47:01.740
Yeah.

00:47:01.740 --> 00:47:02.020
For them.

00:47:02.020 --> 00:47:06.460
Well, people have stopped working on this for, since 2008, right?

00:47:06.460 --> 00:47:09.680
Like it's, it's just nothing is happening anymore.

00:47:09.680 --> 00:47:14.340
But once you're over that hurdle, all of a sudden like, Oh, look, this pool is warm.

00:47:14.340 --> 00:47:15.140
It's fun here.

00:47:15.360 --> 00:47:18.120
So like all this for a while, it's like, let's go to go.

00:47:18.120 --> 00:47:19.780
Let's rewrite everything and go.

00:47:19.780 --> 00:47:23.900
And I guess if we had decided to do that, we would still be working on it for, till the

00:47:23.900 --> 00:47:24.640
next four years.

00:47:24.640 --> 00:47:30.180
But, luckily it's like, people were like, Oh wait, there's all this good stuff.

00:47:30.180 --> 00:47:33.880
All this cool stuff in Python three, like Instagram found out with ACCO.

00:47:34.520 --> 00:47:36.880
It's like, this is good stuff.

00:47:36.880 --> 00:47:39.420
And people would convert just to have that stuff.

00:47:39.420 --> 00:47:39.820
Yeah.

00:47:39.820 --> 00:47:44.480
And I think that's the main argument now is there was so much that is inaccessible to Python

00:47:44.480 --> 00:47:44.820
two.

00:47:44.820 --> 00:47:47.280
That is so exciting and interesting these days.

00:47:47.280 --> 00:47:52.180
It's just crazy to not just do the simple work to, to get onto that side where you have

00:47:52.180 --> 00:47:52.800
that as an option.

00:47:52.800 --> 00:47:53.060
Yeah.

00:47:53.060 --> 00:47:56.160
And what I would tell people in my bootcamp, I was like, if you're going to write a library

00:47:56.160 --> 00:48:01.880
for Python users, don't write Python two support for one, it's going to waste your time.

00:48:01.880 --> 00:48:03.600
Cause it's just, it's extra load for you.

00:48:03.600 --> 00:48:05.660
You have to make sure it works in both languages.

00:48:05.660 --> 00:48:07.020
You won't be able to use the new stuff.

00:48:07.020 --> 00:48:11.480
And yeah, I'm not telling them this, but it means that those Python two users will have

00:48:11.480 --> 00:48:13.300
to move to three to use your new good stuff.

00:48:13.300 --> 00:48:13.840
Yeah, absolutely.

00:48:13.840 --> 00:48:18.000
And there's some realistic, reasonable examples for that.

00:48:18.000 --> 00:48:22.420
Like the Django team talked about how they, they were able to drop a ton of code.

00:48:22.580 --> 00:48:25.640
And the Jupyter team is a NumPy.

00:48:25.640 --> 00:48:30.700
I can't remember, but some stuff talked about in the Python statement that we talked about

00:48:30.700 --> 00:48:31.000
earlier.

00:48:31.000 --> 00:48:38.060
There's significant amount of simpler code and not just less code, but really, truly simpler.

00:48:38.060 --> 00:48:42.400
And they say that that helps bring on new people as contributors, right?

00:48:42.400 --> 00:48:46.220
They don't have to figure out how to write it in two different languages, sort of versions.

00:48:46.220 --> 00:48:47.520
They're like, there's one thing to write.

00:48:47.520 --> 00:48:48.480
This is how you do it.

00:48:48.480 --> 00:48:48.740
Oh yeah.

00:48:48.740 --> 00:48:52.560
The compatibility layers in some of these modules were horrific.

00:48:52.560 --> 00:48:55.500
You know, that's why a lot of people were angry.

00:48:55.500 --> 00:49:00.160
It's like, because the languages were in certain low level cases, languages were different enough

00:49:00.160 --> 00:49:02.300
that you would have something that would be simple.

00:49:02.300 --> 00:49:06.200
A couple lines would turn into like 20 lines, you know?

00:49:06.200 --> 00:49:07.660
So it worked in both languages.

00:49:07.660 --> 00:49:08.140
Yeah.

00:49:08.140 --> 00:49:10.860
Like, why can't I just type import this thing?

00:49:10.940 --> 00:49:12.660
It's like, well, you see, you got to do the sign.

00:49:12.660 --> 00:49:14.640
We decided to rename it.

00:49:14.640 --> 00:49:16.000
Yeah.

00:49:16.000 --> 00:49:16.920
Yeah, exactly.

00:49:16.920 --> 00:49:18.120
I understand.

00:49:18.120 --> 00:49:18.460
Okay.

00:49:18.460 --> 00:49:19.580
So that was 2017.

00:49:19.580 --> 00:49:22.440
And 2018, you have declared victory.

00:49:22.440 --> 00:49:22.940
Is that right?

00:49:22.940 --> 00:49:23.540
Yes.

00:49:23.540 --> 00:49:23.920
Yeah.

00:49:23.920 --> 00:49:26.760
At this point, we know what Python 3 has won at Facebook.

00:49:27.280 --> 00:49:28.940
And I think it's won in the world.

00:49:28.940 --> 00:49:30.480
Like, there's...

00:49:30.480 --> 00:49:32.000
I don't think it...

00:49:32.000 --> 00:49:37.040
Even like with Guido's retirement from the core team, I think it's a done deal.

00:49:37.040 --> 00:49:39.000
You know, nobody is...

00:49:39.000 --> 00:49:43.840
There's no strong figure for the Python 2 camp at this point.

00:49:43.840 --> 00:49:44.180
Yeah.

00:49:44.480 --> 00:49:49.340
I know there are plenty of people hanging on, but I think there's just so many reasons

00:49:49.340 --> 00:49:50.100
to move now.

00:49:50.100 --> 00:49:53.980
It's much harder to make that as a reasonable argument.

00:49:53.980 --> 00:49:56.520
It's just like, well, I just haven't done it yet.

00:49:56.520 --> 00:49:57.220
It's kind of a...

00:49:57.220 --> 00:49:58.540
It's a hard place to be in.

00:49:58.540 --> 00:50:01.800
It's like, oh, it's like, we're going to be in a debt thing.

00:50:01.800 --> 00:50:04.860
And, you know, maybe somebody will take care of it.

00:50:04.860 --> 00:50:07.440
That's not a good vision for your future.

00:50:07.440 --> 00:50:12.180
If you're staking your entire project, somebody has a kind of their heart is going to take care

00:50:12.180 --> 00:50:12.280
of.

00:50:12.280 --> 00:50:12.620
Yeah.

00:50:12.620 --> 00:50:13.620
It's really rough.

00:50:14.100 --> 00:50:18.620
So let's talk about this tweet that Lukas Lenga had sent out.

00:50:18.620 --> 00:50:22.960
And you had mentioned in your presentation, and it's a graph, like a performance graph of

00:50:22.960 --> 00:50:26.600
an app that was written there on Python 2.7.

00:50:26.600 --> 00:50:30.880
And then when it switched to Python 3.6, could you just give us the quick summary of that?

00:50:30.880 --> 00:50:31.740
Like it's...

00:50:31.740 --> 00:50:32.780
Yeah, I probably won't talk about it.

00:50:32.780 --> 00:50:33.860
I don't know what this is, but...

00:50:33.860 --> 00:50:35.080
Yeah, no, it's not super important.

00:50:35.080 --> 00:50:35.480
Yeah.

00:50:35.480 --> 00:50:37.660
We traveled to Dublin to help this team out.

00:50:37.660 --> 00:50:43.440
We're with them for two weeks, just helping them fix some, like, issues because their code

00:50:43.440 --> 00:50:44.760
was pretty old.

00:50:44.760 --> 00:50:46.980
Like, it was older than my tenure at Facebook.

00:50:46.980 --> 00:50:51.820
So, like, once at the end of the week, we switched, we fixed all their little problems.

00:50:52.300 --> 00:50:57.220
They switched over and immediately saw this drastic drop in their memory usage.

00:50:57.220 --> 00:50:59.000
There was some CPU.

00:50:59.000 --> 00:51:00.000
Oh, wait, no, they had...

00:51:00.000 --> 00:51:01.280
Oh, it was half the memory.

00:51:01.280 --> 00:51:01.780
Oh, yeah.

00:51:01.780 --> 00:51:02.900
It was just half as much memory.

00:51:02.900 --> 00:51:03.240
Yeah.

00:51:03.240 --> 00:51:06.820
It looks like four times improvement in CPU and half the memory.

00:51:06.820 --> 00:51:08.600
So, 2x in memory.

00:51:08.600 --> 00:51:08.860
Yeah.

00:51:08.860 --> 00:51:09.620
They were just like...

00:51:09.620 --> 00:51:10.100
We were just...

00:51:10.100 --> 00:51:13.400
I think Wukash immediately copied the graph and tweeted it.

00:51:13.400 --> 00:51:14.800
You know, it was just like, this is insane.

00:51:14.800 --> 00:51:15.400
Yes, exactly.

00:51:15.400 --> 00:51:16.860
And this goes back to what we were saying before.

00:51:16.860 --> 00:51:18.260
Yeah, the world seemed to like it.

00:51:18.260 --> 00:51:21.780
There's like 1,800 likes or something just like, yep.

00:51:21.780 --> 00:51:25.420
This is the kind of stuff that people need to see because you can tell them, like, well,

00:51:25.420 --> 00:51:26.200
it's better or whatever.

00:51:26.200 --> 00:51:31.500
But it's a whole other thing to say, well, that fleet of servers can be one server that

00:51:31.500 --> 00:51:33.960
you don't have a hard time maintaining anymore, right?

00:51:33.960 --> 00:51:34.320
Yeah.

00:51:34.320 --> 00:51:35.960
Like, that's a much stronger story.

00:51:35.960 --> 00:51:38.000
And you don't have to do anything but just make it run here.

00:51:38.000 --> 00:51:40.580
Yeah, so this means that they were able to get rid of machines.

00:51:40.580 --> 00:51:41.100
Yeah.

00:51:41.100 --> 00:51:42.800
Because they're not doing as much work anymore.

00:51:42.800 --> 00:51:44.460
And that makes everybody happy.

00:51:44.460 --> 00:51:48.000
That makes your bosses happy because they're not spending as much money, especially if you're

00:51:48.000 --> 00:51:52.040
like a cloud deployment and you're paying for each one of those nodes that costs you

00:51:52.040 --> 00:51:52.320
money.

00:51:53.200 --> 00:51:56.460
And it's, yeah, it's like you were saying nobody was saying these things.

00:51:56.460 --> 00:52:00.700
It's like there was just this common understanding that, oh, Python 3 is slower than Python 2.

00:52:00.700 --> 00:52:06.420
And we had to, like, break that lie that was still just kind of floating out there.

00:52:06.420 --> 00:52:14.580
And we, and Lukash, he's talked about this a lot, was that a lot of the, like, core people

00:52:14.580 --> 00:52:18.260
that, like, I don't know core people, but, like, people that wrote, like, really hard problems

00:52:18.260 --> 00:52:21.480
in Python who had solved, like, kind of the low level, they were very negative.

00:52:21.860 --> 00:52:25.520
And it was because they were solving the really low level problems.

00:52:25.520 --> 00:52:30.980
But it was like the average, like, Joe or Jane writing Python code.

00:52:30.980 --> 00:52:33.200
They're never going to see those issues.

00:52:33.200 --> 00:52:37.800
So that when, when somebody comes out and be like, oh, I wrote this, this database driver

00:52:37.800 --> 00:52:40.220
and it was a pain to do for Python 3.

00:52:40.220 --> 00:52:44.560
It's like they do a disservice to everybody who will never see those issues.

00:52:44.980 --> 00:52:45.020
Right.

00:52:45.020 --> 00:52:50.820
Because you're, almost no one is natively, deep down at the native network layer.

00:52:50.820 --> 00:52:51.120
Yeah.

00:52:51.120 --> 00:52:54.820
Except for people writing web frameworks or data access.

00:52:54.820 --> 00:52:56.440
You know, like, there's a few folks.

00:52:56.440 --> 00:52:59.600
And they take a bit of a beating, right?

00:52:59.600 --> 00:53:05.380
But they're also highly respected folks because they're the head of these major web frameworks

00:53:05.380 --> 00:53:07.160
or database projects.

00:53:07.720 --> 00:53:09.300
And they're like, this was super hard.

00:53:09.300 --> 00:53:10.440
This is the hardest thing I've done.

00:53:10.440 --> 00:53:13.880
It's like, well, okay, that sucked and we're sorry.

00:53:13.880 --> 00:53:17.460
But, like, that is not what it's going to be like for other people.

00:53:17.460 --> 00:53:20.360
They still import your thing and call query and it's all good.

00:53:20.360 --> 00:53:20.880
Exactly.

00:53:21.260 --> 00:53:21.460
Yeah.

00:53:21.460 --> 00:53:22.400
That's pretty interesting.

00:53:22.400 --> 00:53:27.580
So, I think these graphs, you know, also the story around Instagram, right?

00:53:27.580 --> 00:53:32.460
Like, Instagram as a whole was able to turn off servers, was able to use less memory.

00:53:32.460 --> 00:53:36.120
Like, they went pretty deep into that in the keynote that they covered that as well.

00:53:36.120 --> 00:53:40.960
So, one other thing that you talked about in the 2018 timeframe, which I guess is now,

00:53:40.960 --> 00:53:43.960
is this end of life of Python 2 internally.

00:53:43.960 --> 00:53:47.040
Like, we know about the Python 2 death clock.

00:53:47.040 --> 00:53:48.740
At least it exists.

00:53:48.740 --> 00:53:50.080
I don't know if everyone knows about it.

00:53:50.080 --> 00:53:56.420
But we know that there's the official external deadline for Python 2 at January 1st, 2020.

00:53:56.420 --> 00:54:00.300
But you've also internally announced a deadline for this, right?

00:54:00.300 --> 00:54:00.580
Yeah.

00:54:00.580 --> 00:54:03.940
We want to make sure that we don't want to push past January 1st.

00:54:03.940 --> 00:54:10.320
So, next year is going to be the year that I go around and help kind of, like, go through

00:54:10.320 --> 00:54:14.060
and, like, find out those people that are still stuck on 2.

00:54:14.060 --> 00:54:18.120
And maybe they've been in a cave all these years and they haven't known that 3 is a thing.

00:54:18.440 --> 00:54:20.860
But, or maybe the team just doesn't exist anymore.

00:54:20.860 --> 00:54:23.020
The thing's just running on automation.

00:54:23.020 --> 00:54:24.780
Because we're...

00:54:24.780 --> 00:54:25.900
Why is that website still up?

00:54:25.900 --> 00:54:30.580
It's, well, you know, sometimes some things are just written well enough and they have enough

00:54:30.580 --> 00:54:32.380
automation around it to keep it up.

00:54:32.380 --> 00:54:36.540
It's just, you know, you figure out that, oh, wait, there is no team supporting this.

00:54:36.540 --> 00:54:37.940
You know, like, oh, wow.

00:54:38.040 --> 00:54:39.260
That's a success story, right?

00:54:39.260 --> 00:54:40.660
But, yeah, it's a challenge.

00:54:40.660 --> 00:54:43.800
It auto-builds and auto-deploys every month and nobody touches it.

00:54:43.800 --> 00:54:50.340
So, yeah, it's like, so I think we're already internally, we're well over 80% of the libraries

00:54:50.340 --> 00:54:51.960
are all Python 3.

00:54:52.440 --> 00:54:57.660
And I think we're well over 60-something for, like, actually all those PEXs.

00:54:57.660 --> 00:55:00.240
Like, the amount of PEXs we ship or Python 3.

00:55:00.600 --> 00:55:03.600
So, it was figured, like, well, how long do we want to support this thing?

00:55:03.600 --> 00:55:07.260
Because we don't want to get into the situation where we're having to support Python 2 past

00:55:07.260 --> 00:55:10.380
the death clock, the deadline at the end of life.

00:55:10.380 --> 00:55:11.580
So...

00:55:11.580 --> 00:55:13.640
You don't want to be in 2020 doing anything with...

00:55:13.640 --> 00:55:15.240
Yeah, so we're telling people that...

00:55:15.240 --> 00:55:15.980
Trying to keep it going.

00:55:15.980 --> 00:55:23.420
By the end of 2019, at Facebook, we're going to want to make it impossible to ship new Python 2 code.

00:55:23.420 --> 00:55:27.560
Just so it's like, it's got, there's got to be some cutoff at some point.

00:55:27.560 --> 00:55:30.340
And we're still going to support things that were already written, I think,

00:55:30.340 --> 00:55:34.480
until, like, I think we said we were giving people, like, you know, maybe until 2022.

00:55:34.480 --> 00:55:38.400
But it's like, at that point, you won't even be able to run it anymore.

00:55:38.400 --> 00:55:43.880
It's like, we're going to get Python 2, the actual run times off the servers.

00:55:43.880 --> 00:55:46.200
We're going to get them off the, out of the compilers.

00:55:46.200 --> 00:55:48.160
We're going to make sure it doesn't exist.

00:55:48.160 --> 00:55:51.120
Yeah, all the PEXs, they won't work anymore, right?

00:55:51.120 --> 00:55:51.300
Yeah.

00:55:51.300 --> 00:55:52.660
They're missing their CPython.

00:55:52.660 --> 00:55:55.960
If it's just something that has been built in, like, five years, people still use it,

00:55:55.960 --> 00:55:58.840
and it somehow miraculously works, it will stop working.

00:55:58.840 --> 00:55:59.120
Right.

00:55:59.120 --> 00:56:02.760
And then there'll probably be a little bit of a scramble to patch that stuff up, make it work.

00:56:02.760 --> 00:56:04.540
We're hoping we catch all that in 2019.

00:56:04.540 --> 00:56:05.400
And I think we will.

00:56:05.400 --> 00:56:05.640
Yeah.

00:56:05.640 --> 00:56:06.480
Yeah, yeah.

00:56:06.480 --> 00:56:08.160
You guys have a lot of automated builds and whatnot.

00:56:08.160 --> 00:56:10.360
Yeah, we have a lot of automation that can tell us immediately.

00:56:10.360 --> 00:56:14.180
If I say that, oh, people that said they want two are now getting three,

00:56:14.180 --> 00:56:17.360
I'll immediately start getting test failures if it's not working.

00:56:18.660 --> 00:56:18.980
Exactly.

00:56:18.980 --> 00:56:20.700
Just a little reporting, I'll tell you all that.

00:56:20.700 --> 00:56:21.560
Okay.

00:56:21.560 --> 00:56:24.120
So, Jason, that's a super interesting story.

00:56:24.120 --> 00:56:26.140
And I think it's a real success.

00:56:26.140 --> 00:56:41.220
And one of the things I don't think we necessarily covered as well as you did in your talk here is just at no point along the way did some manager or organization come along and say to you, like, okay, make this happen.

00:56:41.280 --> 00:56:49.940
It's just like you wanted to see this happen and you just started working cooperatively with these different teams until it became a thing, right?

00:56:50.060 --> 00:57:01.540
Yeah, at some point, like this was in 2016, when Instagram was moving, it was kind of like, hey, maybe we need a team to help people move or help, like, Instagram.

00:57:01.540 --> 00:57:07.220
We kind of escaped the bullet of being the team that helps you move from two to three.

00:57:07.220 --> 00:57:09.460
Because we did that for Instagram.

00:57:09.460 --> 00:57:10.500
We did it for a couple other people.

00:57:10.500 --> 00:57:14.480
But we were like, no, let's be the team that stewards Python for the future.

00:57:14.840 --> 00:57:19.940
It's like we want something more lofty than just being the converter, the converting janitors or something.

00:57:19.940 --> 00:57:20.200
Right.

00:57:20.200 --> 00:57:22.940
That's very much more lofty in the long term, right?

00:57:22.940 --> 00:57:23.260
Yes.

00:57:23.260 --> 00:57:23.480
Yeah.

00:57:23.480 --> 00:57:23.860
Yeah.

00:57:23.860 --> 00:57:24.700
Yeah.

00:57:24.700 --> 00:57:25.100
Very nice.

00:57:25.100 --> 00:57:29.980
So, I guess transitioning, like, this is what you guys did.

00:57:29.980 --> 00:57:34.360
This is what you were able to sort of germinate within Facebook.

00:57:34.360 --> 00:57:38.520
What would you say to other companies that are stuck on Python 2?

00:57:38.520 --> 00:57:46.640
Well, I was saying if they're engineer-led, like Facebook, and there's a lot of – we're in this internet economy, and there's a lot of startups that are out there.

00:57:46.640 --> 00:57:48.080
They're very much engineer-led.

00:57:48.080 --> 00:57:50.120
The same model works.

00:57:50.120 --> 00:57:53.820
You just basically, you know, you can go and attack it through code quality.

00:57:53.820 --> 00:57:59.700
I was telling somebody, it's like, I didn't always work in the Bay Area and Silicon Valley and these startups.

00:57:59.700 --> 00:58:03.820
I used to work what I used to call real corporations in consulting.

00:58:04.540 --> 00:58:09.620
And it's like, there you've got a manager, and instead of convincing other engineers, you just convinced a manager.

00:58:09.620 --> 00:58:10.960
And it was sometimes easier.

00:58:10.960 --> 00:58:11.260
Right.

00:58:11.260 --> 00:58:14.660
There's one person to convince, and if you win that battle, it's done.

00:58:14.660 --> 00:58:14.920
Yeah.

00:58:14.920 --> 00:58:15.220
Right.

00:58:15.220 --> 00:58:17.260
It's coming from on high, and it's just said.

00:58:17.260 --> 00:58:17.540
Yeah.

00:58:17.540 --> 00:58:20.600
If you can attack it with, like, some of the things we talked about, it's being faster.

00:58:20.600 --> 00:58:22.100
Maybe it's going to use less money.

00:58:22.100 --> 00:58:23.620
Maybe we'll use less servers.

00:58:23.620 --> 00:58:26.000
And you can give them the example of Instagram.

00:58:26.000 --> 00:58:28.300
They were able to do it without slowing down.

00:58:28.300 --> 00:58:32.040
They didn't stop releasing features to convert to Python 3.

00:58:32.040 --> 00:58:33.380
They did it all in line.

00:58:33.580 --> 00:58:33.700
Yeah.

00:58:33.700 --> 00:58:39.060
I really think that Instagram example, I'm so glad they did it as a keynote with all the clear steps.

00:58:39.060 --> 00:58:45.520
Because it's not just an inspiring example, but it's a step-by-step roadmap to how it happens.

00:58:45.520 --> 00:58:46.120
Exactly.

00:58:46.120 --> 00:58:47.700
It's very inspirational.

00:58:47.700 --> 00:58:51.540
So I guess, you know, this is a five-year journey, more or less.

00:58:51.540 --> 00:58:54.560
What was easier than you expected, and what was harder?

00:58:54.920 --> 00:58:59.640
There were several times where I made prognostications that were completely wrong.

00:58:59.640 --> 00:59:05.820
Like, I thought that we would always have Python 2 as, like, the default, and we would still be a French thing.

00:59:05.820 --> 00:59:09.920
But it's like, we quickly overtook Python 2 faster than we thought.

00:59:10.480 --> 00:59:17.120
Like, I remember we actually had a message in our internal, like, IRC, like, hey, when Python 3 gets to 29%, let's have a party.

00:59:17.880 --> 00:59:19.540
And, like, I just noticed it.

00:59:19.540 --> 00:59:21.000
Nobody, like, had seen it for a while.

00:59:21.000 --> 00:59:22.060
I noticed, like, oh, wait a minute.

00:59:22.060 --> 00:59:23.900
We're at, like, 80.

00:59:23.900 --> 00:59:25.780
Wow.

00:59:25.780 --> 00:59:27.060
So I updated the messages.

00:59:27.060 --> 00:59:27.700
Have a party.

00:59:27.700 --> 00:59:28.640
We have, like, 90%.

00:59:28.640 --> 00:59:29.980
There you go.

00:59:29.980 --> 00:59:32.420
Yeah, and that's really something to celebrate, right?

00:59:32.420 --> 00:59:34.040
Like, you're pretty much there at that point.

00:59:34.040 --> 00:59:37.700
Yeah, so I definitely think we're going to have an internal funeral for Python 2.

00:59:37.700 --> 00:59:43.960
And I've already, I was like, oh, no, we'll get, we'll, I was like, we'll get something, we'll make it look like a casket.

00:59:43.960 --> 00:59:47.600
And have people talk about the good things that Python 2 did.

00:59:47.600 --> 00:59:49.660
And we'll get rid of it.

00:59:49.660 --> 00:59:52.900
Python 2 got us to where we are today, right?

00:59:52.900 --> 00:59:55.840
Like, it was a major part of that journey, so.

00:59:55.840 --> 00:59:56.840
Yeah, we can acknowledge it.

00:59:56.840 --> 00:59:57.940
We just don't have to be stuck there.

00:59:57.940 --> 00:59:58.540
Exactly.

00:59:59.460 --> 01:00:00.100
What was harder?

01:00:00.100 --> 01:00:03.700
You didn't actually expect it to work that well.

01:00:03.700 --> 01:00:09.480
It sounds like in the early days, you're kind of like, this is a great try, but I'm not so sure it's going to work.

01:00:09.480 --> 01:00:12.980
So maybe you just, you saw it as hard, and it actually wasn't, but.

01:00:12.980 --> 01:00:15.220
Yeah, it wasn't as hard as I thought it was going to be.

01:00:15.220 --> 01:00:17.680
Like, there's still the long tail of stuff.

01:00:17.680 --> 01:00:20.860
Like, you know, we're getting to smaller, smaller values.

01:00:20.860 --> 01:00:27.080
And I think it's just because we have, like, you know, in every company, you get more, as the company grows, you have more people writing code.

01:00:27.160 --> 01:00:31.080
If that code is Python 3, your percentages of two just get pushed down automatically.

01:00:31.080 --> 01:00:31.440
Right.

01:00:31.440 --> 01:00:39.780
So I think that that is the, so the hardest thing is just to convince teams that, like, give them the, like, there are teams that say they want to move.

01:00:39.780 --> 01:00:42.260
Like, everybody has the, like, oh, we want to move.

01:00:42.260 --> 01:00:43.980
We just don't have the manpower.

01:00:43.980 --> 01:00:46.400
We don't have it on a roadmap to move.

01:00:47.180 --> 01:00:51.460
And they have it now because we've said, hey, it's 2019's the year.

01:00:51.460 --> 01:00:53.200
You have to do it now or never.

01:00:53.200 --> 01:00:54.520
It's going to stop running.

01:00:54.520 --> 01:00:55.640
It's going to be a problem.

01:00:55.640 --> 01:00:58.480
So that is probably, it's like, there are, yeah.

01:00:58.480 --> 01:01:00.780
So it's just, there's some teams that feel hopeless.

01:01:00.780 --> 01:01:01.800
Yeah, I can imagine.

01:01:01.800 --> 01:01:02.920
It's like, kind of like what I thought.

01:01:03.100 --> 01:01:10.200
Yeah, do you have companies that you acquire that bring, like, new Python 2 as another challenge every now and then?

01:01:10.200 --> 01:01:11.360
Or does that not happen too much?

01:01:11.360 --> 01:01:12.320
I don't know if I'm sure you can talk about that.

01:01:12.320 --> 01:01:14.540
But then, like, sure, there's got to be some things.

01:01:14.600 --> 01:01:30.040
But I think we kind of, like, there's enough people internally that, like, I guess when you're a good leader, like, and people don't know you're a leader, is that when they start repeating the same arguments that you were giving years ago, it's like coming out of their mouths instead of your own mouth.

01:01:30.040 --> 01:01:31.240
I think, you know, you've won.

01:01:31.240 --> 01:01:34.020
So it's like these people show up, like, hey, I've got this Python 2 app.

01:01:34.020 --> 01:01:37.020
It's not working the way I want it to.

01:01:37.020 --> 01:01:40.400
And what's the first from some random person I've never even met?

01:01:40.400 --> 01:01:42.700
I'll get some things like, why don't you switch to three?

01:01:43.380 --> 01:01:44.220
It has a defect.

01:01:44.220 --> 01:01:44.980
Let's fix it.

01:01:44.980 --> 01:01:47.440
Yeah, it's like switch to three and then we can help you.

01:01:47.440 --> 01:01:49.420
Nobody knows how to do two anymore.

01:01:49.420 --> 01:01:50.680
Yeah, yeah, that's great.

01:01:50.680 --> 01:01:51.040
It's great.

01:01:51.040 --> 01:01:51.620
I like it.

01:01:51.620 --> 01:01:53.460
I mean, more organizations should be here.

01:01:53.460 --> 01:01:58.420
All right, so I want to get your thought on one final thing and give a quick shout out to something that could help people as well.

01:01:58.420 --> 01:02:10.420
So the same guy that put together, was involved in putting together the Sunsetting Python 2 support, the Python 3 statement, started calling Python 2 legacy Python.

01:02:10.420 --> 01:02:11.540
Oh, I do like that.

01:02:11.540 --> 01:02:14.220
Python 3 modern or just straight Python.

01:02:14.220 --> 01:02:16.260
There's Python and then there's legacy Python.

01:02:16.260 --> 01:02:17.440
And so the question is, Noah.

01:02:17.440 --> 01:02:18.600
We do that internally.

01:02:18.600 --> 01:02:19.640
You like this idea?

01:02:19.640 --> 01:02:21.320
Yes, we call it legacy Python.

01:02:21.320 --> 01:02:21.980
I love it.

01:02:21.980 --> 01:02:22.580
I do too.

01:02:22.780 --> 01:02:26.360
I have actually used that to identify other things I'm trying to sunset.

01:02:26.740 --> 01:02:27.460
That's beautiful.

01:02:27.460 --> 01:02:38.720
And I think when you spoke about talking to managers, like if you go to a manager and you say like, look, our entire infrastructure, our entire system is built on this legacy thing that's going to be unsupported in a year.

01:02:38.720 --> 01:02:40.200
Like they're like, whoa, whoa, whoa.

01:02:40.200 --> 01:02:40.680
That's scary.

01:02:40.680 --> 01:02:41.380
That sounds horrible.

01:02:41.380 --> 01:02:42.380
We got to fix this, right?

01:02:42.380 --> 01:02:42.600
Yeah.

01:02:42.600 --> 01:02:46.780
Like if you say Python 2 versus Python 3, you're like, ah, techno mumbo jumbo, leave me alone, right?

01:02:46.840 --> 01:02:48.560
But legacy, they know that's bad.

01:02:48.560 --> 01:02:49.440
They don't want that.

01:02:49.440 --> 01:02:49.680
Yeah.

01:02:49.680 --> 01:02:54.580
It's like sometimes we took jabs at Python 2 staunch supporters.

01:02:54.580 --> 01:03:00.700
We would just to like make like we would call them blood heights because they didn't like the future.

01:03:00.700 --> 01:03:03.360
They didn't like new technology.

01:03:03.880 --> 01:03:09.260
So we were like, hey, are you like, are you like, is that how you got to work today?

01:03:09.260 --> 01:03:09.800
Exactly.

01:03:09.800 --> 01:03:11.440
Like how do you power that computer, right?

01:03:11.440 --> 01:03:11.620
Yeah.

01:03:11.620 --> 01:03:13.660
Plug it in or you got to puddle the thing or what?

01:03:13.660 --> 01:03:16.320
It's like seeing your soul machine base.

01:03:16.320 --> 01:03:16.940
Exactly.

01:03:16.940 --> 01:03:17.560
Interesting.

01:03:17.560 --> 01:03:18.240
Cool.

01:03:18.240 --> 01:03:19.040
I'm glad.

01:03:19.040 --> 01:03:21.880
That's definitely something I'm trying to push on the community as well.

01:03:21.880 --> 01:03:24.520
And I think it's, I think it's resonates with people mostly.

01:03:24.520 --> 01:03:25.320
All right.

01:03:25.320 --> 01:03:32.160
So then a quick shout out, friend of the show, Anthony Shaw, wrote a cool course on converting from Python 2 to Python 3 over a Pluralsight.

01:03:32.260 --> 01:03:35.060
So people should check out his course as well if they want to go along.

01:03:35.060 --> 01:03:44.760
But certainly they should check out the keynote at PyCon 2016 or 2017 from Instagram because that really is a, you know, this is the roadmap of how you do it.

01:03:44.760 --> 01:03:45.600
2017.

01:03:45.600 --> 01:03:46.060
Thanks.

01:03:46.060 --> 01:03:46.860
Yeah.

01:03:46.860 --> 01:03:47.800
So that's a great one.

01:03:47.800 --> 01:03:49.000
All right.

01:03:49.000 --> 01:03:52.420
Well, we could talk for a long time, but I want to be respectful of your time.

01:03:52.420 --> 01:03:53.740
So we'll just leave it here, I guess.

01:03:53.740 --> 01:03:56.060
So I'll ask you two quick questions before we get out of here.

01:03:56.060 --> 01:03:59.320
First of all, if you're going to write some Python code, what editor do you use?

01:03:59.320 --> 01:04:00.580
Well, I'm Nuclide.

01:04:00.580 --> 01:04:01.360
So Adam.

01:04:01.360 --> 01:04:01.600
Okay.

01:04:01.900 --> 01:04:02.260
The editor.

01:04:02.260 --> 01:04:05.220
But it's with Fim mode because I still use a lot of Fim.

01:04:05.220 --> 01:04:13.300
And, but if I, if I used to be a real big fan of PyCharm, it's just setting it up all the time was kind of a, it takes a lot of time.

01:04:13.300 --> 01:04:15.420
So I always use Adam.

01:04:15.420 --> 01:04:16.660
Adam's quicker.

01:04:16.660 --> 01:04:17.120
Yep.

01:04:17.120 --> 01:04:17.540
All right.

01:04:17.540 --> 01:04:17.740
Cool.

01:04:17.740 --> 01:04:20.600
And then a notable PyPI package.

01:04:20.600 --> 01:04:24.540
Maybe not the most popular one, but something you're like, oh, people should know about this.

01:04:24.540 --> 01:04:25.060
Wow.

01:04:25.060 --> 01:04:25.520
Let's see.

01:04:25.520 --> 01:04:25.900
Click.

01:04:25.900 --> 01:04:26.420
Click.

01:04:26.420 --> 01:04:27.180
All right.

01:04:27.180 --> 01:04:28.120
Tell people quickly about it.

01:04:28.120 --> 01:04:29.600
What's the, what's the elevator pitch on click?

01:04:29.720 --> 01:04:36.800
Well, like internally people write these, they, they want to write these nice, like get style applications that are these sub commands.

01:04:36.800 --> 01:04:37.920
And the.

01:04:37.920 --> 01:04:39.080
Get add dot.

01:04:39.080 --> 01:04:39.400
Get.

01:04:39.400 --> 01:04:39.920
Yes.

01:04:39.920 --> 01:04:40.500
Exactly.

01:04:40.500 --> 01:04:41.160
That kind of stuff.

01:04:41.160 --> 01:04:41.280
Right.

01:04:41.440 --> 01:04:48.520
Uh, the art parse or opt parse to make that happen is horrendous and it's disgusting.

01:04:48.520 --> 01:04:52.100
And people have written modules around these things to make it.

01:04:52.100 --> 01:04:53.480
And all of them are awful.

01:04:53.480 --> 01:04:57.300
And, and it was like, I was like, look, this is this thing.

01:04:57.300 --> 01:04:59.340
I wrote, I used click for one of my projects.

01:04:59.340 --> 01:05:03.180
I think the project that was the first Python three project used it.

01:05:03.220 --> 01:05:04.240
I was so happy with it.

01:05:04.240 --> 01:05:17.620
I just kept telling people you have to use this thing because it means that somebody I get off the street, who's been programming Python and open source, that it will feel natural for them to write an application with us without having to use some internal like CLI parsing.

01:05:17.620 --> 01:05:18.800
Yeah.

01:05:18.800 --> 01:05:19.560
That's really great.

01:05:19.560 --> 01:05:19.740
Yeah.

01:05:19.740 --> 01:05:24.980
It's definitely one of the most popular ways to build CLI apps, which is, you know, quite a few of the Python ones.

01:05:24.980 --> 01:05:25.560
So very cool.

01:05:26.360 --> 01:05:27.220
All right, Jason.

01:05:27.220 --> 01:05:29.140
So people are excited.

01:05:29.140 --> 01:05:32.140
They want to take their organization on the same journey.

01:05:32.140 --> 01:05:33.860
What's the final call to action?

01:05:33.860 --> 01:05:34.780
Like, what do they need to do?

01:05:34.780 --> 01:05:39.600
You just got to set up, set some goals, set a plan, like, like, you know, demand in the future.

01:05:39.600 --> 01:05:42.280
Like, look, we're going to be, we're going to go to Python three.

01:05:42.280 --> 01:05:43.420
We're not just going to stay there.

01:05:43.420 --> 01:05:45.280
We're like, that's, this is a stop.

01:05:45.280 --> 01:05:48.460
We're going to go to, we're going to, it's a stop over to Python three seven.

01:05:48.460 --> 01:05:50.320
It's a stop over to Python three eight.

01:05:50.320 --> 01:05:54.660
We want to be modern so that when the new things happen, we can move with them.

01:05:54.660 --> 01:05:55.000
Yeah.

01:05:55.000 --> 01:05:55.940
And they're happening fast.

01:05:56.240 --> 01:05:56.600
Exactly.

01:05:56.600 --> 01:05:59.100
And they're happening in large numbers.

01:05:59.100 --> 01:06:00.200
So you definitely want to be there.

01:06:00.200 --> 01:06:00.540
All right.

01:06:00.540 --> 01:06:02.320
Thank you so much for sharing the story.

01:06:02.320 --> 01:06:06.400
I think it's going to inspire a lot of folks to take some action.

01:06:06.400 --> 01:06:07.180
Yeah, I think so.

01:06:07.180 --> 01:06:07.780
It's been fun.

01:06:07.780 --> 01:06:08.720
Yeah, it sure has.

01:06:08.720 --> 01:06:10.600
Nice chat with you and goodbye.

01:06:10.600 --> 01:06:10.960
Bye.

01:06:10.960 --> 01:06:15.400
This has been another episode of Talk Python to Me.

01:06:15.400 --> 01:06:20.600
On this episode, our guest was Jason Fried, and it's been brought to you by Linode and Rollbar.

01:06:20.600 --> 01:06:24.540
Linode is bulletproof hosting for whatever you're building with Python.

01:06:24.760 --> 01:06:28.900
Get four months free at talkpython.fm/Linode.

01:06:28.900 --> 01:06:30.720
That's L-I-N-O-D-E.

01:06:30.720 --> 01:06:33.780
Rollbar takes the pain out of errors.

01:06:33.780 --> 01:06:40.460
They give you the context and insight you need to quickly locate and fix errors that might have gone unnoticed until your users complained, of course.

01:06:41.100 --> 01:06:47.780
Track a ridiculous number of errors for free as Talk Python to Me listeners at talkpython.fm/rollbar.

01:06:48.180 --> 01:06:49.760
Want to level up your Python?

01:06:49.760 --> 01:06:56.720
If you're just getting started, try my Python jumpstart by building 10 apps or our brand new 100 days of code in Python.

01:06:56.720 --> 01:07:00.540
And if you're interested in more than one course, be sure to check out the Everything Bundle.

01:07:00.540 --> 01:07:02.780
It's like a subscription that never expires.

01:07:03.320 --> 01:07:04.960
Be sure to subscribe to the show.

01:07:04.960 --> 01:07:07.180
Open your favorite podcatcher and search for Python.

01:07:07.180 --> 01:07:08.420
We should be right at the top.

01:07:08.420 --> 01:07:17.700
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct RSS feed at /rss on talkpython.fm.

01:07:17.700 --> 01:07:19.600
This is your host, Michael Kennedy.

01:07:19.600 --> 01:07:20.960
Thanks so much for listening.

01:07:20.960 --> 01:07:22.020
I really appreciate it.

01:07:22.360 --> 01:07:23.980
Now get out there and write some Python code.

01:07:23.980 --> 01:07:44.540
I'll see you next time.

01:07:44.540 --> 01:08:14.520
Thank you.

