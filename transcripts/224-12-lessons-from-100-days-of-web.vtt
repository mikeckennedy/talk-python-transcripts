WEBVTT

00:00:00.001 --> 00:00:06.580
Back in May of 2018, Bob Belderbos, Julian Sequira, and I started what would turn out to be a nine-month

00:00:06.580 --> 00:00:12.600
project. We wanted to create a dedicated 100 days of code course specifically for Python web

00:00:12.600 --> 00:00:17.120
developers. Much of what we created for that course, we did have prior experience with,

00:00:17.120 --> 00:00:22.140
but with that many different topics, much of it was also new to us. On this episode,

00:00:22.140 --> 00:00:27.360
we teamed up to distill the lessons, tips, and tools we found interesting on that journey into

00:00:27.360 --> 00:00:31.280
a quick list of cool tips and techniques. We hope you find something new and useful.

00:00:31.280 --> 00:00:36.700
This is Talk Python To Me, episode 224, recorded July 29th, 2019.

00:00:36.700 --> 00:00:55.340
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:00:55.340 --> 00:01:00.020
and the personalities. This is your host, Michael Kennedy. Follow me on Twitter where I'm at,

00:01:00.020 --> 00:01:05.020
M. Kennedy. Keep up with the show and listen to past episodes at talkpython.fm, and follow the

00:01:05.020 --> 00:01:10.720
show on Twitter via at Talk Python. This episode is brought to you by Ting and Linode. Please check

00:01:10.720 --> 00:01:14.620
out what they're offering during their segments. It really helps support the show. Bob Julian,

00:01:14.620 --> 00:01:16.140
welcome back to Talk Python To Me.

00:01:16.140 --> 00:01:16.580
Thank you.

00:01:16.580 --> 00:01:17.440
Good to be here, Mike.

00:01:17.440 --> 00:01:18.000
Nice to be here.

00:01:18.100 --> 00:01:24.500
Yeah, it's good to have you both here. We kicked off our acquaintanceship way back. I can't remember

00:01:24.500 --> 00:01:29.940
which episode it was. It was quite a while ago when we talked about this 100 Days of Code project

00:01:29.940 --> 00:01:36.100
and journey that you all had been on. And actually, it's turned out to be quite the journey from there

00:01:36.100 --> 00:01:36.660
as well, right?

00:01:36.780 --> 00:01:40.600
Oh, yeah. Just nonstop. I think it was episode 140 as well.

00:01:40.600 --> 00:01:42.600
Yes, it was 140. Thank you.

00:01:42.600 --> 00:01:46.220
100 Days Survivors. It was quite a hardship.

00:01:46.220 --> 00:01:51.300
Yeah. So, back then, you guys had been going through 100 Days of Code and documenting it and

00:01:51.300 --> 00:01:56.100
blogging about it. And then, you know, you came on the show to talk about it. And after that show,

00:01:56.100 --> 00:02:00.120
we were sitting around talking like, you know, this is really cool. There's not a whole lot to support

00:02:00.120 --> 00:02:06.160
people specifically in Python to do it. So, you guys and I, we all teamed up to write the 100 Days

00:02:06.160 --> 00:02:12.240
of Code course that we released last year. And that was really fun and people seemed to like it. So,

00:02:12.240 --> 00:02:19.040
we wrote the 100 Days of Web in Python course. And that was quite the journey as well and recently

00:02:19.040 --> 00:02:25.980
released that. So, this show is going to be based on stuff that we take from those experiences.

00:02:26.780 --> 00:02:30.720
And I want to be clear. I don't want this to be just like an infomercial about the course. I want

00:02:30.720 --> 00:02:36.660
us really just to focus on the technology. But when we created these courses, this is like,

00:02:36.660 --> 00:02:40.640
it took us nine months to write that 100 Days of Web course. And some of that was just the effort of

00:02:40.640 --> 00:02:45.320
recording. But a lot of it was research and polishing ideas and like understanding things better,

00:02:45.320 --> 00:02:45.520
right?

00:02:45.520 --> 00:02:52.360
Oh, without a doubt. The amount of tech that and skill that I had to develop in order to teach it

00:02:52.360 --> 00:02:59.080
was insane. There were so many topics that I just, I knew a tiny bit about, but not enough to actually

00:02:59.080 --> 00:03:05.040
build something usable and something I could teach. So, yeah, a lot of that time, I would say 80% of that

00:03:05.040 --> 00:03:07.780
time was actually learning and trying to figure stuff out.

00:03:07.780 --> 00:03:08.040
Yeah.

00:03:08.040 --> 00:03:08.820
Bob?

00:03:08.820 --> 00:03:15.540
And there were some very big topics like JavaScript and Django. And we had to break them down in four

00:03:15.540 --> 00:03:17.860
day segments, which was a challenge in itself.

00:03:17.860 --> 00:03:22.420
Yeah. Well, I think part of the challenge of anything like this, and especially the web,

00:03:22.420 --> 00:03:28.960
is I don't really know when this tipping point occurred, but it felt to me like for quite a while,

00:03:28.960 --> 00:03:32.960
it was pretty straightforward. There were some choices you had to make if you wanted to write

00:03:32.960 --> 00:03:38.720
a web app in Python. Like, am I going to use Django? I'm going to use Flask. Maybe I'm going to use Pyramid

00:03:38.720 --> 00:03:46.260
like Michael. I really like that framework still. And now, now you look at the list of like new and

00:03:46.260 --> 00:03:52.200
upcoming frameworks. There's like a new web framework every month, at least. It's crazy. So, you know,

00:03:52.200 --> 00:03:57.360
it's not a surprise that we don't know all these off the top of our head because it's hard to keep up

00:03:57.360 --> 00:04:01.320
with all of them. And then there's always the, well, that's only been out for a month. Like if I learn it,

00:04:01.320 --> 00:04:05.060
is it going to actually be around like two months from now? Right. So it's, there's just,

00:04:05.460 --> 00:04:09.100
do you guys get the sense that the web is kind of blown up? And then, you know, that's only the

00:04:09.100 --> 00:04:13.000
Python framework, right? We've got JavaScript, we've got databases, we've got like, there's a lot

00:04:13.000 --> 00:04:17.920
of axes on which that happens. That's exactly right. I hit the, I actually hit that issue recently at

00:04:17.920 --> 00:04:22.960
work where, you know, I'm trying to create a web app, but did I use Flask or was I going to use,

00:04:22.960 --> 00:04:28.140
you know, Django? And then wait, what sort of interaction did I need on there? What sort of

00:04:28.140 --> 00:04:33.460
JavaScript do I need to learn? Oh, wait, do I need jQuery? You know, it just, the list went on,

00:04:33.520 --> 00:04:38.120
you know, how am I going to deploy it? Is it going to be a static site? And yeah, it's just,

00:04:38.120 --> 00:04:43.340
it's ridiculous, but it means there's a lot of fun to be had. That's right. There's a ton of fun to be

00:04:43.340 --> 00:04:48.520
had. And so when we went through this course, we all learned a bunch of stuff. And basically it's made

00:04:48.520 --> 00:04:56.100
up of roughly 24 four day little projects. And each one of them is generally a separate technology and

00:04:56.100 --> 00:05:01.500
generally standalone. And I said, I don't want this to be an epimertial about the course. So I want to

00:05:01.500 --> 00:05:06.280
really point out that this is all, every bit of this is, we're going to talk about is in a GitHub

00:05:06.280 --> 00:05:11.060
repository. And each section has its own little bit with its own readme. So if you want to go play with

00:05:11.060 --> 00:05:16.260
that, the GitHub repo is open and free. And we'll talk about like where each one of these topics lives

00:05:16.260 --> 00:05:23.120
in the GitHub repo. And I'll be sure to put that in the show notes as well. So with that in mind, Bob,

00:05:23.120 --> 00:05:27.680
you want to kick us off with the first topic that you got out of the course that you think is

00:05:27.680 --> 00:05:33.880
interesting for Python web devs? Yeah, sure. And I start right off the bat with APIs and API star.

00:05:33.880 --> 00:05:42.560
It's by the same author of Django rest. So I chose that framework as it's relatively new. And knowing

00:05:42.560 --> 00:05:51.800
the author, I expected to have sensible defaults. And it had was a fun little project that makes it very

00:05:51.800 --> 00:05:58.840
easy to build your APIs. I got pretty quick results. I also needed some test data for which I used

00:05:58.840 --> 00:06:06.180
Macaroo, which is a service or website that makes it very easy to get fake data. And combining the two,

00:06:06.180 --> 00:06:13.020
yeah, became an interesting project where I think I use some car data and build an API around it.

00:06:13.260 --> 00:06:19.040
One of the challenges though, that I saw when we deployed the app is that there were some breaking

00:06:19.040 --> 00:06:27.320
changes. So yeah, one warning when you use top notch open source off the shelf products that they might

00:06:27.320 --> 00:06:34.240
change and they might change rapidly. So I think in the end, we had to pin the version in the requirements.

00:06:34.980 --> 00:06:37.800
So to make sure that people weren't hitting those issues.

00:06:37.800 --> 00:06:44.040
Absolutely. And API star is really cool. It's by Tom Christie. And it has changed a lot, actually,

00:06:44.040 --> 00:06:49.140
even since, since we wrote the course. And that's, you know, that's just the way the way it goes.

00:06:49.140 --> 00:06:54.060
That's what I was sort of hinting at not specifically thinking of API star, but there's a ton of these

00:06:54.060 --> 00:06:59.200
projects that are like that. And, you know, I think it's good to do like a survey of all them out there. But it's

00:06:59.200 --> 00:07:04.960
also challenging to figure out which one is going to gain the popularity and energy because they ebb and

00:07:04.960 --> 00:07:11.520
flow. But yeah, it's really interesting. I love this the way that it works. One of the things that you introduced

00:07:11.520 --> 00:07:20.180
me to here that I found super interesting is a great service for fake data. Because, you know, as a course

00:07:20.180 --> 00:07:25.620
developer and trainer, having fake data is awesome, because you don't want to use real data, but you want to have

00:07:25.620 --> 00:07:32.500
realistic data. But, you know, there's not that many trainers or course developers, right? But almost everyone has to have a

00:07:32.500 --> 00:07:37.020
prototype app. And you often have to build the app before you have the data, because the app is going to collect the

00:07:37.020 --> 00:07:43.000
data, right? And so in order to build out the UI and the API and all that stuff, it's really good to have

00:07:43.000 --> 00:07:46.520
realistic data. So tell us about this place where you got the data from on that.

00:07:46.520 --> 00:07:55.340
Yeah, it's muckerrule.com. And it has 143 data types, as we speak. And it's broken down in location,

00:07:55.660 --> 00:08:12.580
commerce, advanced, personal, and the VIN number. And yeah, you just pop them in the field names,

00:08:12.720 --> 00:08:20.760
and then you can download it in CSV, JSON, tab limited, SQL, Cassandra, Firebase, Excel, XML, like all

00:08:20.760 --> 00:08:27.020
these useful data formats. And it generates a file. And then yeah, you can just load it in and start

00:08:27.020 --> 00:08:28.120
using it. It's really cool.

00:08:28.120 --> 00:08:32.440
Yeah, you named off some data types. And one of them was like car VIN, vehicle identification number.

00:08:32.440 --> 00:08:38.480
And that's like this big, long, specific thing. But it literally generates reasonably valid looking

00:08:38.940 --> 00:08:43.280
VIN numbers, not just random values there, but like actually what you would expect in terms of

00:08:43.280 --> 00:08:48.540
number of character. Yes, exactly. And it has that stuff for like medical bits. And like,

00:08:48.540 --> 00:08:52.080
it's really quite interesting, all the data sources that it pulled from.

00:08:52.080 --> 00:08:58.580
Yeah, indeed. And if I look at the API class, then that literally translates to the data. So I have a car

00:08:58.580 --> 00:09:06.420
class with ID, manufacturer, model, year, and VIN. So it made it relatively easy to build an API on top of

00:09:06.420 --> 00:09:10.320
it. Yeah, that's cool. So if you're out there building something, and you need data for your API

00:09:10.320 --> 00:09:16.080
or web app or whatever, Macro, that's pretty cool. And one thing I also wanted to highlight in this

00:09:16.080 --> 00:09:24.220
section is PostPen. It's a GUI to test your API. So that's another thing. I used it before, but I guess

00:09:24.220 --> 00:09:30.740
I became better at it because I had to use it again. And yeah, it's very convenient to test your API and

00:09:30.740 --> 00:09:38.340
get and post requests from GUI. Yeah, you can do it from your dev tools. But Postman is so nice. It lets

00:09:38.340 --> 00:09:45.040
you set the headers just right. It lets you do all the ACP verbs, you know, post, delete, things like

00:09:45.040 --> 00:09:52.260
that. For Talk Python, I have a whole suite of APIs I have to maintain for most of the courses. And I have

00:09:52.260 --> 00:09:59.080
a whole like segment of saved like development and production stuff in Postman for testing that and

00:09:59.080 --> 00:10:03.080
make sure it all works. And yeah, I definitely recommend Postman as well. Yeah, awesome. All

00:10:03.080 --> 00:10:07.760
right, Julian, you want to talk about this next one? Like I'm really excited about that. I just can't

00:10:07.760 --> 00:10:12.880
believe how much we get out of this next one here. Okay, so I'm really excited about this one. This is

00:10:12.880 --> 00:10:21.560
Netlify. Sounds a bit like Netflix, but it's Netlify. It was a static site generating deployment

00:10:21.560 --> 00:10:26.260
website. It's just like a jack of all trades. I absolutely loved it. And the funny thing is,

00:10:26.260 --> 00:10:31.640
as we touched on before, I knew nothing about this. I didn't even know it existed before this course.

00:10:31.640 --> 00:10:36.100
As we were planning the course, you showed me this, Mike. You said, hey, if you're doing something on

00:10:36.100 --> 00:10:40.660
static sites, check this out. Yeah, originally your goal was to just cover static sites. And like,

00:10:40.700 --> 00:10:44.300
what do you use, Pelican or something like this? Yeah, Pelican. Yeah, that's right. And I go,

00:10:44.300 --> 00:10:48.060
if you're doing Pelican, you got to check out Netlify because that looks super interesting.

00:10:48.060 --> 00:10:53.300
And I thought, oh, what is this? What's this thing Mike's pointing me to? And when I went and checked

00:10:53.300 --> 00:10:59.280
it out and actually had a go, it was fantastic. So to give anyone who's listening the general overview

00:10:59.280 --> 00:11:06.680
is it's this amazing tool where you write your static site in GitHub as you normally would or whatever.

00:11:07.540 --> 00:11:14.400
And once you have it built in there using Pelican or Jekyll or Hugo or whatever else you want to use,

00:11:14.400 --> 00:11:20.000
you then point Netlify at your GitHub repo. So there is a little hook in there that

00:11:20.000 --> 00:11:27.440
links into your repo and it just monitors your repo. It's this continuous delivery or continuous deployment

00:11:27.440 --> 00:11:35.740
type tool where once it detects a change in your GitHub repo, it'll build your site for you

00:11:35.740 --> 00:11:42.200
and deploy it on the net for you. So just completely hands off. You don't have to do a thing. And that was

00:11:42.200 --> 00:11:47.920
probably one of the most satisfying parts of the course was when I was demonstrating that or recording it.

00:11:47.920 --> 00:11:52.620
There was that moment of fear where I thought, oh, is it going to work? Please work. And then it just worked.

00:11:53.380 --> 00:12:02.360
So as I'm recording, I generated the site. I pushed my GitHub code to GitHub and then it actually created the site within a minute.

00:12:02.360 --> 00:12:07.180
And yeah, it's just, it's live up on the net. They give you a free URL.

00:12:07.720 --> 00:12:14.900
So it's obviously some garbled rubbish that's your URL and you can obviously then go and purchase your own domain and add all that in.

00:12:14.900 --> 00:12:23.560
That's all extra. But from a free base standpoint, you can run your static website on the net using Netlify.

00:12:23.560 --> 00:12:25.900
And it was really cool. I really enjoyed it.

00:12:25.980 --> 00:12:34.160
Yeah. It seems like just such a nice way to do things. To me, it feels kind of like what Heroku is to Python apps.

00:12:34.160 --> 00:12:39.120
Like you can just get push Heroku and it takes your app and figures out how to run it.

00:12:39.120 --> 00:12:42.140
Like Netlify is that for purely static sites.

00:12:42.380 --> 00:12:52.740
Yeah, exactly right. So I think one of the most surprising things for me was going through the documentation on the website and just seeing how, I guess, fully documented everything was.

00:12:52.740 --> 00:13:00.540
It actually tempted me because we use Pelican for PyBytes. That's our static site framework of choice for PyBytes.

00:13:00.540 --> 00:13:08.040
So I was familiar with it. But once I got on the documentation and started going through it, I'm like, ooh, I want to try Jekyll.

00:13:08.040 --> 00:13:12.820
Because I know Bob's mentioned that. He uses it for his blog. And then I've heard good things about Hugo.

00:13:12.820 --> 00:13:23.560
And I just, there's this massive list that you can go through. And so if there's anyone listening to this that has a static site, I totally challenge you to give this a go.

00:13:23.560 --> 00:13:26.740
Because it was one of the most satisfying things.

00:13:26.740 --> 00:13:30.800
Yeah, it's super cool. And I can't believe what they offer for free, right?

00:13:30.800 --> 00:13:35.160
I mean, just to be clear, we have no affiliation with Netlify. They didn't pay anything for this.

00:13:35.160 --> 00:13:39.340
Just like, this is really cool. I can't believe that it's actually available.

00:13:39.340 --> 00:13:47.120
Like, so custom domain, HTTPS certificates, continuous deployment through GitHub, all of that for free. It's crazy.

00:13:47.120 --> 00:13:48.540
Yeah, it's a beautiful tool.

00:13:48.540 --> 00:13:52.640
Awesome. Yeah, so if you've got anything static, that's definitely the way to do it. That's cool.

00:13:52.640 --> 00:13:55.820
All right, so I guess I'm up next for the next one here.

00:13:56.280 --> 00:14:00.080
One of the things I wanted to focus on was just foundational HTML.

00:14:00.080 --> 00:14:03.560
Because I want to hear your two opinions on this.

00:14:03.560 --> 00:14:07.600
Because to me, I for a long time didn't want to get into web development.

00:14:07.600 --> 00:14:14.260
Because I knew I was a good developer, but I didn't feel like I was artistic in the graphical visual sense.

00:14:14.260 --> 00:14:17.740
You know, like I was always like bad at art in school or whatever.

00:14:18.220 --> 00:14:21.620
So I felt like I'm going to have a hard time designing stuff.

00:14:21.620 --> 00:14:27.700
So HTML and CSS and all that like was until I took the time to sit down and properly learn it.

00:14:27.700 --> 00:14:29.740
It was actually not a huge roadblock.

00:14:29.740 --> 00:14:34.460
But so I'd always try to find like, what is the way I could do this without really writing HTML?

00:14:34.460 --> 00:14:37.600
Like what little widget will generate the thing that I want to work?

00:14:37.600 --> 00:14:39.960
Like the calendar, because I don't want to write.

00:14:39.960 --> 00:14:40.540
You know what I mean?

00:14:40.600 --> 00:14:41.880
Like that was me for a long time.

00:14:41.880 --> 00:14:46.920
But then once I learned HTML and CSS super well, like it became this thing that I was happy to do.

00:14:46.920 --> 00:14:51.940
And I felt like it was made like getting into this stuff much easier and took away all that hesitation.

00:14:51.940 --> 00:14:52.720
So I thought it was great.

00:14:52.720 --> 00:14:55.580
So I wanted to talk about like the history of HTML.

00:14:55.580 --> 00:14:59.720
And there's just some stuff that surprised me there that I thought I would cover here.

00:14:59.720 --> 00:15:14.960
So in the GitHub repo on days five to eight in there, there's a section where we go and recreate Yahoo.com and Google.com from scratch as they were in 1996.

00:15:14.960 --> 00:15:16.660
That was cool.

00:15:16.660 --> 00:15:18.100
It's cool.

00:15:18.100 --> 00:15:21.160
But oh my gosh, can you guys believe what those sites used to look like?

00:15:21.160 --> 00:15:22.020
Trash.

00:15:22.020 --> 00:15:23.320
I don't want to know.

00:15:23.320 --> 00:15:24.960
It's so weird.

00:15:24.960 --> 00:15:38.160
I look back to 1996 websites and like, wow, it was really easy to actually create a web startup because like Google and Yahoo, we recreated the sites in 15 minutes or something, you know?

00:15:38.160 --> 00:15:39.680
And it's just like, wow.

00:15:39.680 --> 00:15:40.060
Yeah.

00:15:40.060 --> 00:15:40.440
Really?

00:15:40.440 --> 00:15:41.240
15 minutes.

00:15:41.240 --> 00:15:41.800
Okay.

00:15:41.800 --> 00:15:47.460
And now Google is a highly interesting technical foundation, but Yahoo is like a directory listing.

00:15:47.460 --> 00:15:49.660
Like you could have finished it up in another hour.

00:15:49.660 --> 00:15:52.800
I mean, it was really interesting, but that's all it was.

00:15:52.800 --> 00:15:58.580
And so some of the things I found interesting as well is back in 1996, you couldn't use spreadsheets.

00:15:58.580 --> 00:15:59.880
Spreadsheets.

00:15:59.880 --> 00:16:01.440
Sorry, that's for style sheets.

00:16:01.440 --> 00:16:04.580
Style sheets were not introduced until 1999.

00:16:04.580 --> 00:16:05.460
Wow.

00:16:05.460 --> 00:16:05.800
Wow.

00:16:05.800 --> 00:16:06.400
I didn't know that.

00:16:06.400 --> 00:16:06.660
Yeah.

00:16:06.660 --> 00:16:11.240
All the HTML attributes had to just be set in the DOM, like over and over.

00:16:11.240 --> 00:16:12.440
Yes, exactly.

00:16:12.440 --> 00:16:12.920
Right.

00:16:12.920 --> 00:16:15.860
Like you would for like a newsletter because they don't know that style sheets.

00:16:15.860 --> 00:16:17.360
So that was crazy.

00:16:17.700 --> 00:16:21.500
And then the other thing was, if you look at the history of HTML, like there was a lot

00:16:21.500 --> 00:16:24.880
of rapid growth from 1990 to 2000.

00:16:24.880 --> 00:16:28.800
There was a bunch of versions, you know, every couple of years or something like that.

00:16:28.800 --> 00:16:32.420
In 1999 was HTML4.

00:16:32.940 --> 00:16:42.540
In 2000 was XHTML, which is an attempt to make all HTML documents formal XML, like a superset

00:16:42.540 --> 00:16:43.040
of XML.

00:16:43.040 --> 00:16:44.900
So every element had to be closed.

00:16:44.900 --> 00:16:49.200
Every attribute had to have a value with quotes for the value and things like that.

00:16:49.200 --> 00:16:49.400
Right.

00:16:49.400 --> 00:16:51.040
So that was 2000.

00:16:51.040 --> 00:16:55.240
The next change to HTML was 14 years later.

00:16:55.500 --> 00:17:01.340
So HTML didn't change for 14 years, even though this is like basically on the heels of the

00:17:01.340 --> 00:17:02.840
dot-com boom and everything.

00:17:02.840 --> 00:17:04.960
Like what happened there, right?

00:17:04.960 --> 00:17:07.940
So in 2014, HTML5 came out.

00:17:07.940 --> 00:17:11.760
Now I know there's probably like super minor little changes, but like no important changes

00:17:11.760 --> 00:17:16.280
happened between 2000 and 2014, literally in the specification.

00:17:16.280 --> 00:17:21.820
That's one of the things I actually kind of off topic, but what I love about this is that

00:17:21.820 --> 00:17:27.120
you did all this research, discovered all this stuff, and then I got to go and learn

00:17:27.120 --> 00:17:27.900
it through you.

00:17:27.900 --> 00:17:33.300
So this is all cool stuff because, and I hate to say it, Mike, but you know, back in those

00:17:33.300 --> 00:17:36.100
dates you were talking about, I was still pretty, I was still in school.

00:17:36.100 --> 00:17:36.800
I'm sorry.

00:17:36.800 --> 00:17:41.000
Well, you could have been one of those like kids that started a startup and dropped out

00:17:41.000 --> 00:17:41.620
of middle school.

00:17:41.620 --> 00:17:44.040
Could have.

00:17:44.040 --> 00:17:44.560
No, just kidding.

00:17:44.560 --> 00:17:45.360
Should have.

00:17:45.360 --> 00:17:46.560
Could have, should have, right?

00:17:46.560 --> 00:17:47.400
Yeah.

00:17:47.400 --> 00:17:47.940
What are you doing?

00:17:47.940 --> 00:17:49.860
I'm going, I'm going to go to college next year.

00:17:50.180 --> 00:17:50.460
Yeah.

00:17:50.460 --> 00:17:53.860
I'm going to take my yacht on a tour because my business is doing pretty well.

00:17:53.860 --> 00:17:54.840
One day.

00:17:54.840 --> 00:17:56.380
I'll push that on my kids.

00:17:56.380 --> 00:17:57.100
No, I'm kidding.

00:17:57.100 --> 00:17:57.300
Yeah.

00:17:57.300 --> 00:18:03.280
This portion of Talk Python To Me is brought to you by Ting.

00:18:03.280 --> 00:18:07.920
Let me tell you about Ting, a new mobile service available in the US that's targeted developers

00:18:07.920 --> 00:18:10.000
and other technically savvy folks.

00:18:10.000 --> 00:18:14.940
First of all, their average customer only pays $23 a month, but they're no discount provider.

00:18:14.940 --> 00:18:18.760
Their service runs over T-Mobile's and Sprint's fast nationwide network.

00:18:19.120 --> 00:18:23.300
If you don't use that much data because you're usually on Wi-Fi, like many of you are, then

00:18:23.300 --> 00:18:24.620
Ting will save you a ton of cash.

00:18:24.620 --> 00:18:25.500
But don't worry.

00:18:25.500 --> 00:18:29.040
You can still use as much data as you like for just $10 per gig.

00:18:29.040 --> 00:18:31.360
One mobile feature I use all the time is tethering.

00:18:31.360 --> 00:18:35.880
And with Ting, you get unlimited tethering at the same data rate with your account.

00:18:35.880 --> 00:18:40.740
$6 a month for a phone line, $10 a gig, $3 a month for text if you usually chat over

00:18:40.740 --> 00:18:41.760
iMessage or WhatsApp.

00:18:41.760 --> 00:18:42.920
Think about it.

00:18:42.920 --> 00:18:45.660
No contracts and super clear and fair billing.

00:18:46.160 --> 00:18:47.960
Visit python.ting.com.

00:18:47.960 --> 00:18:50.700
That's python.ting.com.

00:18:50.700 --> 00:18:52.380
And check out their savings calculator.

00:18:52.380 --> 00:18:55.000
Enter your usage and see exactly what you'd pay.

00:18:55.000 --> 00:18:58.800
Use that link and you'll get a $25 credit to try them as well.

00:18:58.800 --> 00:19:00.540
That's python.ting.com.

00:19:00.540 --> 00:19:02.020
Or just click the link in the show notes.

00:19:03.720 --> 00:19:05.460
All right, Bob, you're up next.

00:19:05.460 --> 00:19:07.720
No, you had to commence on HTML, actually.

00:19:07.720 --> 00:19:12.680
Well, I was pretty happy that you covered it because HTML is so fundamental for a web developer.

00:19:12.680 --> 00:19:17.520
Because when I look at my Django workflow, I mean, part of my time, I'm actually writing

00:19:17.520 --> 00:19:18.760
HTML in the template.

00:19:18.760 --> 00:19:20.140
So it's very important.

00:19:20.140 --> 00:19:21.840
Also, as well as CSS.

00:19:21.840 --> 00:19:25.620
It's always something that needs to be styled, even if you're using a framework.

00:19:25.620 --> 00:19:29.900
So it's kind of, it's very basic knowledge that web developers should have.

00:19:29.900 --> 00:19:34.580
The other thing I'm really astonished by is how far we've come.

00:19:34.580 --> 00:19:36.440
The other day, you needed a progress bar.

00:19:36.440 --> 00:19:39.320
And now you can have this predefined tag, progress, right?

00:19:39.320 --> 00:19:41.940
So no JavaScript, no scripting.

00:19:41.940 --> 00:19:45.880
You can just use a progress tag and give it like a numeric value.

00:19:45.880 --> 00:19:47.920
And you have your, that's pretty cool.

00:19:47.920 --> 00:19:49.500
That is so cool.

00:19:49.500 --> 00:19:49.720
Yeah.

00:19:49.720 --> 00:19:51.420
We really have come a long ways.

00:19:51.520 --> 00:19:53.940
Yeah, but you don't always see JavaScript.

00:19:53.940 --> 00:19:57.020
And I do agree that CSS is actually of those skills.

00:19:57.020 --> 00:20:01.540
If you can learn the basics of CSS, like that is like kind of a web superpower, right?

00:20:01.540 --> 00:20:03.240
That really unlocks a lot of things.

00:20:03.240 --> 00:20:06.060
Another part, though, is JavaScript some of the time, right?

00:20:06.060 --> 00:20:06.700
Yeah.

00:20:06.700 --> 00:20:08.220
No, you cannot escape it.

00:20:08.220 --> 00:20:11.060
And you better learn JavaScript.

00:20:11.060 --> 00:20:15.260
A good part, actually, because most of the web is powered by JavaScript.

00:20:15.260 --> 00:20:17.940
I mean, there's Python, there's the backend always.

00:20:17.940 --> 00:20:22.260
But every page out there uses JavaScript and some of them a lot.

00:20:22.260 --> 00:20:26.520
So the challenge I had, though, I mean, JavaScript is a whole language.

00:20:26.520 --> 00:20:28.660
And I needed to cover it in four days.

00:20:28.660 --> 00:20:29.560
So that was tough.

00:20:29.560 --> 00:20:35.020
So I really tried to become an essentialist and focus on the essential part.

00:20:35.020 --> 00:20:42.020
So the data types and a little bit of ES6, actually, as well, because that's now important to know.

00:20:42.020 --> 00:20:44.780
Yeah, that's basically version six of JavaScript.

00:20:44.780 --> 00:20:45.540
Right.

00:20:45.540 --> 00:20:45.840
Right.

00:20:45.840 --> 00:20:46.640
ECMAScript six.

00:20:46.740 --> 00:20:46.860
Yeah.

00:20:46.860 --> 00:20:47.200
Right.

00:20:47.200 --> 00:20:51.160
So we have arrow functions and destructuring, map and filter.

00:20:51.160 --> 00:20:53.820
So it's likely that you're going to find it.

00:20:53.820 --> 00:20:55.540
So I did cover some ES6.

00:20:55.540 --> 00:21:02.480
And also within this context, I wanted to talk about React, which is one of the major frameworks in JavaScript.

00:21:02.480 --> 00:21:07.380
And again, that was a pretty steep mountain to climb.

00:21:08.140 --> 00:21:16.940
So I decided to actually try to make a game, a hangman game, because games are good when you're handling with variables and classes and functions.

00:21:16.940 --> 00:21:20.460
And you have to keep state as well as use a user interface.

00:21:20.460 --> 00:21:22.000
So I decided to build a game, which was not easy.

00:21:22.000 --> 00:21:24.220
So I decided to build a game, which was not easy.

00:21:24.220 --> 00:21:31.220
But actually, it did give me a way to break a huge topic down into 16 or so segments.

00:21:31.220 --> 00:21:31.740
That's cool.

00:21:31.920 --> 00:21:36.080
What was your thought of React coming from a Python background?

00:21:36.080 --> 00:21:37.320
Like, do you like it?

00:21:37.320 --> 00:21:39.380
What's the general programming model feel like?

00:21:39.380 --> 00:21:41.640
It was a bit confusing at first.

00:21:41.640 --> 00:21:49.380
But then I did start to appreciate it for its design philosophy, especially how it treats mutability.

00:21:49.380 --> 00:21:52.960
So I did end up liking it, yes.

00:21:52.960 --> 00:21:54.680
But it took a little bit to get into.

00:21:54.680 --> 00:21:55.980
There's a lot of moving pieces.

00:21:55.980 --> 00:21:56.300
Yeah.

00:21:56.300 --> 00:22:03.440
As a web developer, it feels a little weird to me because I always tried to aim for, like, separation of concerns, right?

00:22:03.440 --> 00:22:07.760
So you've got your style sheet, you've got your JavaScript, and then you've got your HTML.

00:22:08.080 --> 00:22:15.080
And I've always aimed to have, like, the HTML depend as little as possible on the other two and so on, right?

00:22:15.080 --> 00:22:16.540
Like, try to keep those focused.

00:22:16.540 --> 00:22:22.460
And here, it's like you embed the HTML in the JavaScript little component bits.

00:22:22.460 --> 00:22:23.900
It seems a little funky to me.

00:22:23.900 --> 00:22:25.340
Yeah, JSX, right?

00:22:25.340 --> 00:22:27.020
The new syntax.

00:22:27.020 --> 00:22:27.460
Yeah.

00:22:27.460 --> 00:22:29.500
That's a little weird at start.

00:22:29.500 --> 00:22:30.180
I agree.

00:22:30.180 --> 00:22:32.500
Yeah, I guess if the tooling supports it, right?

00:22:32.500 --> 00:22:36.700
If the tooling treats that little HTML block as HTML, then it's not so bad.

00:22:36.920 --> 00:22:38.340
But it's definitely a mind shift, yeah.

00:22:38.340 --> 00:22:40.660
And there are tools to bootstrap your app.

00:22:40.660 --> 00:22:46.560
For example, I used Create React app, which I think is from Facebook, who invented the whole framework.

00:22:46.560 --> 00:22:49.940
And that did help because you get all your defaults in place.

00:22:49.940 --> 00:22:55.420
And you can just npm start and you have a basic structure in place.

00:22:55.420 --> 00:22:56.520
So that really helped.

00:22:56.520 --> 00:22:57.200
Yeah, that's cool.

00:22:57.380 --> 00:23:04.800
Yeah, a lot of these front end frameworks, JavaScript frameworks have like little bootstrappy scaffolding CLIs for them.

00:23:04.800 --> 00:23:05.240
That's cool.

00:23:05.240 --> 00:23:09.000
So just because I'm a complete noob with JavaScript, right?

00:23:09.000 --> 00:23:10.460
And I'm trying to learn it now.

00:23:11.420 --> 00:23:15.460
So you're, and this is an interesting point from a teaching standpoint.

00:23:15.460 --> 00:23:20.560
You had to squeeze JavaScript into four days, which is just seems unthinkable.

00:23:20.560 --> 00:23:25.800
You had to really whittle that down to people who don't know it, right?

00:23:25.800 --> 00:23:27.660
Teaching it from scratch.

00:23:27.660 --> 00:23:32.040
And so can I learn this myself from zero?

00:23:32.040 --> 00:23:32.860
Yes, you can.

00:23:32.980 --> 00:23:33.140
Okay.

00:23:33.140 --> 00:23:35.660
Now, so this is actually more for me than anyone else.

00:23:35.660 --> 00:23:40.700
I mean, it assumes some basic programming knowledge.

00:23:40.700 --> 00:23:49.020
I mean, you do need to know what a variable is, but it starts very basic with the data types and basic construct looping and all that.

00:23:49.020 --> 00:23:53.740
And, you know, if you already know Python or another language, I mean, a lot of stuff sounds familiar, right?

00:23:53.740 --> 00:23:58.540
I mean, a list or array in JavaScript, you can slice as well.

00:23:58.540 --> 00:24:00.620
Or, well, you can take an index.

00:24:00.620 --> 00:24:02.100
You cannot actually slice it.

00:24:02.580 --> 00:24:04.480
Or you can slice it, but it's dot slice.

00:24:04.480 --> 00:24:09.520
So it's all very similar, the concepts, but the syntax is sometimes different.

00:24:09.520 --> 00:24:10.000
Okay, cool.

00:24:10.000 --> 00:24:10.400
Cool, cool.

00:24:10.400 --> 00:24:10.920
All right.

00:24:10.920 --> 00:24:13.380
Julian, you focused a lot on Flask.

00:24:13.380 --> 00:24:17.840
So you cover one of the plugins for Flask called Flask Login, right?

00:24:17.840 --> 00:24:18.080
Yeah.

00:24:18.080 --> 00:24:21.040
So this one was more like a bucket list item for me.

00:24:21.040 --> 00:24:27.020
For ages, I've wanted to deal with how to log in to a website using Flask.

00:24:27.020 --> 00:24:32.500
And I got to tell you, Mike, this one, I wanted to rip my hair out by the end of it.

00:24:32.500 --> 00:24:35.900
I think it took me a solid month to wrap my head around it.

00:24:35.900 --> 00:24:42.000
For anyone who's not familiar with Flask Login, the actual Flask Login part is the easy part.

00:24:42.000 --> 00:24:52.660
Everything you need to learn before that is SQLAlchemy to build yourself a database, to build yourself a model for your users to be able to log in.

00:24:52.660 --> 00:24:55.460
And I'd never dealt with any of that before.

00:24:55.460 --> 00:25:00.080
So this was one of the major learning points for me in this whole challenge, this 100 days.

00:25:00.080 --> 00:25:03.560
But it was the most satisfying thing to figure out.

00:25:03.560 --> 00:25:09.260
When you look at my page, as you said, Mike, it's HTML from back in 1996.

00:25:09.260 --> 00:25:11.420
I think my page looked even worse than that.

00:25:12.160 --> 00:25:20.960
But to see a logged out and a logged in sort of view, I think I had a few beers that night to celebrate.

00:25:20.960 --> 00:25:22.580
Nice.

00:25:22.580 --> 00:25:28.840
Yeah, it was one of the most satisfying things because it's actually really simple once you get your head around it.

00:25:29.720 --> 00:25:34.180
There is a whole lot of SQLAlchemy you have to learn or I have to learn.

00:25:34.180 --> 00:25:37.440
And I teach this before you get into the Flask Login.

00:25:37.440 --> 00:25:40.880
And that was the hardest part for me, as I've just said.

00:25:40.880 --> 00:25:46.220
But if you can get through that and if you know that stuff, then the actual Flask Login is pretty easy.

00:25:46.220 --> 00:25:52.620
I think one of the greatest parts of it is, you know, as with Flask, there's a lot of stuff with decorators.

00:25:53.040 --> 00:26:04.260
And there's this amazing little decorator you can throw on any of your functions for the, you know, the web pages that you're going to be running on your site called, I think it's just Login.

00:26:04.260 --> 00:26:05.440
Or is it?

00:26:05.440 --> 00:26:06.220
No, no, what is it?

00:26:06.220 --> 00:26:07.240
It's Login Required.

00:26:07.240 --> 00:26:08.520
Login underscore required.

00:26:08.520 --> 00:26:12.000
And you throw that on any of your pages, any of your routes.

00:26:12.000 --> 00:26:17.680
And if someone tries to browse that page, it'll check to see if they're logged in or not.

00:26:17.680 --> 00:26:19.840
And it was as simple as that.

00:26:19.840 --> 00:26:26.160
You sort of had to do nothing else to your site to be able to do that, to get the Login page to work.

00:26:26.160 --> 00:26:29.420
That was probably the most satisfying part of using Flask Login.

00:26:29.420 --> 00:26:31.020
So that was a really good one.

00:26:31.020 --> 00:26:38.640
And if you haven't given it a try, just give yourself a few hours and give it a chop because it actually is quite simple to use.

00:26:38.640 --> 00:26:45.300
And once you implement a Logout page to create users so that people can actually register an account,

00:26:45.680 --> 00:26:51.360
tie all that in with an SQLAlchemy database back end, and this thing just is beautiful after that.

00:26:51.360 --> 00:26:52.020
That's cool.

00:26:52.020 --> 00:26:53.700
Yeah, it sounds like a really nice way to do it.

00:26:53.700 --> 00:26:55.680
And these plugins for Flask are definitely cool.

00:26:55.680 --> 00:27:02.540
It also, if you're using Flask anyway, there's a high probability if you're using SQLAlchemy also, right?

00:27:02.540 --> 00:27:05.460
Like Flask is a micro framework and doesn't come with some ORM.

00:27:06.080 --> 00:27:10.460
So as long as you're using a relational database, the chances are very high you're using SQLAlchemy.

00:27:10.460 --> 00:27:14.880
I mean, you could be using something else like there's PeeWee ORM, which is nice.

00:27:14.880 --> 00:27:17.860
You might be using something like Mongo Engine for MongoDB.

00:27:17.860 --> 00:27:19.800
But, you know, most likely SQLAlchemy.

00:27:19.800 --> 00:27:22.480
So you're already kind of in that space, right?

00:27:22.480 --> 00:27:25.360
So here's just the user aspect being handled for you.

00:27:25.420 --> 00:27:40.600
Well, the tough part as well is if you're a brand new person to Flask, that getting from that single page Flask app to running a fully fledged Flask app with, you know, your directory structure and views and also having a database.

00:27:40.600 --> 00:27:43.360
There's a massive leap there that you have to make.

00:27:43.360 --> 00:27:45.760
So get the SQLAlchemy down.

00:27:45.760 --> 00:27:46.680
That's the first part.

00:27:46.680 --> 00:27:48.060
Then work on your plugins.

00:27:48.660 --> 00:27:49.640
Yeah, absolutely.

00:27:49.640 --> 00:27:55.560
I feel like I'm not sure what the right way to put it, but I feel like Flask sells itself as being so super simple, right?

00:27:55.560 --> 00:27:56.720
Like I create the one file.

00:27:56.720 --> 00:27:57.640
I create app.py.

00:27:57.640 --> 00:28:00.680
I call the Flask thing to create the app.

00:28:00.680 --> 00:28:02.040
I use that to decorate a function.

00:28:02.040 --> 00:28:02.700
Hello, world.

00:28:02.700 --> 00:28:03.880
App.run.

00:28:03.880 --> 00:28:04.580
We're good, right?

00:28:04.580 --> 00:28:07.420
But in reality, there's all these other things to it, right?

00:28:07.420 --> 00:28:10.880
There's like the database access and the structure and the factoring and the testing.

00:28:10.880 --> 00:28:14.940
And there's more to it than initially meets the eye when you create these things.

00:28:14.940 --> 00:28:16.700
It's almost like a false sense of security.

00:28:16.700 --> 00:28:17.340
Yes.

00:28:17.940 --> 00:28:22.860
Yeah, that's why I kind of said I wasn't sure how to put it because it doesn't – I don't necessarily put that forward as a positive, right?

00:28:22.860 --> 00:28:24.960
Like Flask sells itself as like, oh, it's just this one file.

00:28:24.960 --> 00:28:30.420
But like if you really create an app that's just one file, like a whole website, like you're probably doing it wrong.

00:28:30.420 --> 00:28:30.940
You know what I mean?

00:28:30.940 --> 00:28:32.260
Like it's so important.

00:28:32.260 --> 00:28:34.560
It's kind of like encouraging you to not do the best thing.

00:28:34.560 --> 00:28:36.480
So anyway, it's still – it's a great framework.

00:28:36.480 --> 00:28:36.940
I like it.

00:28:36.940 --> 00:28:37.840
All right.

00:28:37.840 --> 00:28:39.600
I guess that puts me next here.

00:28:39.600 --> 00:28:42.960
So the next thing I want to talk about is also Flask.

00:28:42.960 --> 00:28:45.460
And this one is called Court.

00:28:45.640 --> 00:28:49.240
So this puts together a couple of ideas that I find really interesting in Python.

00:28:49.240 --> 00:28:57.020
You know, a lot of times you hear people tell you that like asynchronous programming in Python is super complicated.

00:28:57.020 --> 00:28:58.300
And it's basically broken.

00:28:58.300 --> 00:29:01.480
And like you can't really use it anyway because of the GIL and stuff like this.

00:29:02.320 --> 00:29:05.300
And I did a lot of thinking about this and a lot of research on this.

00:29:05.300 --> 00:29:10.120
And actually, I think as of Python 3.5 and beyond, like that's not really true.

00:29:10.120 --> 00:29:14.140
It's not really – I don't think it was totally true before and it's definitely not true these days.

00:29:14.140 --> 00:29:17.100
I think asynchronous programming in Python is really interesting.

00:29:17.100 --> 00:29:19.400
So I'll talk about that in a second.

00:29:19.400 --> 00:29:26.580
But also things like Flask and Django and Pyramid, none of those support async programming, which is odd.

00:29:26.820 --> 00:29:27.760
I mean, it strikes me as odd.

00:29:27.760 --> 00:29:28.860
Does it strike you guys as odd?

00:29:28.860 --> 00:29:29.740
Yes, a little bit.

00:29:29.740 --> 00:29:32.480
Yeah, I'd expect so these days, but it is weird.

00:29:32.560 --> 00:29:33.180
Exactly, right?

00:29:33.180 --> 00:29:40.820
Like what web apps basically do is they talk to other systems and like coordinate it and then they wait while that happens, right?

00:29:40.820 --> 00:29:42.020
Like you make a request.

00:29:42.020 --> 00:29:43.080
It talks to the database.

00:29:43.080 --> 00:29:43.720
It waits.

00:29:43.720 --> 00:29:47.360
Maybe it has another question for the database after it figures out what user it is.

00:29:47.360 --> 00:29:49.180
It's going to ask like, well, what's in this category?

00:29:49.180 --> 00:29:51.220
They post it over to me and it waits for that.

00:29:51.220 --> 00:29:53.680
And maybe it's going to call an API and wait for that.

00:29:53.680 --> 00:29:55.860
Maybe it's a cache and it'll call Redis and wait for that.

00:29:55.860 --> 00:29:59.140
And it's going to put those answers together in a template and give it back to you, right?

00:29:59.140 --> 00:30:02.880
Like it's all about coordinating waiting basically is the way I see the web.

00:30:02.880 --> 00:30:07.080
And yet that's the perfect scenario for asynchronous programming.

00:30:07.080 --> 00:30:11.580
Like let you do other stuff while you're waiting on the database because you're actually not doing any work.

00:30:11.580 --> 00:30:12.200
You're just waiting.

00:30:12.200 --> 00:30:16.940
But because of the history of the way these frameworks are built up, they're all based on WSGI.

00:30:16.940 --> 00:30:19.380
WSGI is like basically single thread requests.

00:30:19.380 --> 00:30:20.460
There's not a great way to do it.

00:30:20.840 --> 00:30:26.620
So if you do want to do that, you have to pick one of these many plethora of these brand new frameworks.

00:30:26.620 --> 00:30:29.600
Or you could pick this thing called Cort, which is cool.

00:30:29.600 --> 00:30:31.580
And I've covered this on Talk Python before.

00:30:31.580 --> 00:30:38.720
But Cort is basically a API and plugin level compatible thing with Flask.

00:30:39.400 --> 00:30:44.040
But it supports asynchronous methods and async and await and all that kind of stuff.

00:30:44.040 --> 00:30:44.940
So that's pretty cool.

00:30:44.940 --> 00:30:48.500
So you just basically replace the word Flask with Cort.

00:30:48.500 --> 00:30:50.540
If it's a lowercase Flask, it's a lowercase Cort.

00:30:50.540 --> 00:30:54.000
If it's an uppercase F on the Flask, it's uppercase Q on the Cort.

00:30:54.000 --> 00:30:55.260
And like that's pretty much it.

00:30:55.260 --> 00:30:58.980
And things like Flask login and all that stuff still work with it.

00:30:59.360 --> 00:31:08.800
And yet it allows you to write async def home or async def login or async, you know, whatever view you want, you can do async stuff.

00:31:08.800 --> 00:31:11.420
And within there, you can await your database call.

00:31:11.420 --> 00:31:14.840
You can await your Redis key lookup and things like that.

00:31:14.840 --> 00:31:15.460
That's nice.

00:31:15.460 --> 00:31:16.440
Oh, that is cool.

00:31:16.440 --> 00:31:16.780
Yeah.

00:31:16.780 --> 00:31:18.060
So it's really nice.

00:31:18.060 --> 00:31:22.440
It's interesting if Flask, sorry, if Cort is going to be its own thing in the long term.

00:31:22.820 --> 00:31:31.660
I know there was some conversation with David Lord and the maintainer of Cort about maybe like somehow working together if they're so similar.

00:31:31.660 --> 00:31:33.840
Like, could we just make Flask async?

00:31:33.840 --> 00:31:36.400
And Flask does have async on its roadmap.

00:31:36.400 --> 00:31:40.420
I know there's a conversation about Django's async roadmap and things like that.

00:31:40.420 --> 00:31:44.600
So, you know, these other main frameworks are working towards that, but they're already existing.

00:31:44.600 --> 00:31:45.620
I don't know.

00:31:45.620 --> 00:31:48.100
It's a challenge, but there's a bunch of really interesting things there.

00:31:48.100 --> 00:31:56.700
And the other thing I want to throw out while we're on this topic that I thought was just one of my favorite things is there's all these different ways to do asynchronous programming in Python.

00:31:56.700 --> 00:32:02.720
Like we've got threads, we've got processes, we've got asyncio, which uses the async and await keywords.

00:32:02.720 --> 00:32:05.160
But for some reason, threads, you can't use async.

00:32:05.160 --> 00:32:08.220
You can't await a thread, which is weird because you should be able to.

00:32:08.220 --> 00:32:09.660
Things like that.

00:32:09.660 --> 00:32:11.860
But there's this thing called unsync.

00:32:11.860 --> 00:32:18.080
And unsync lets you put a decorator on all of your asynchronous methods.

00:32:18.080 --> 00:32:24.980
And it will figure out which type of asynchronous programming or execution is appropriate for it.

00:32:24.980 --> 00:32:26.220
So sometimes it'll use threads.

00:32:26.220 --> 00:32:27.540
Sometimes it'll use asyncio.

00:32:27.540 --> 00:32:29.760
Sometimes it'll actually create subprocesses.

00:32:29.760 --> 00:32:32.240
But your program model is all the same.

00:32:32.240 --> 00:32:34.600
It's just async and await straight across the board.

00:32:34.600 --> 00:32:36.120
It's a beautiful library.

00:32:36.120 --> 00:32:37.340
I just love that thing.

00:32:37.340 --> 00:32:44.740
And I don't think we talk about it in the course here on this stuff, but it's definitely worth checking out if you're doing much with async and await.

00:32:44.740 --> 00:32:45.640
It's definitely cool.

00:32:45.640 --> 00:32:52.200
So anyway, if you want to play with this conversion from Flask to core for async bits, that's days 21 to 24 in the GitHub repo.

00:32:52.200 --> 00:32:52.640
Great.

00:32:52.640 --> 00:32:53.680
Yeah, that's a fun one.

00:32:53.680 --> 00:32:57.800
Speaking of Django and its async roadmap, Bob?

00:32:57.800 --> 00:33:01.040
Speaking of Django, I wanted to ask you, is the async on the roadmap?

00:33:01.040 --> 00:33:06.160
Anyway, if it's not, it's still my favorite.

00:33:06.160 --> 00:33:08.240
So a big chunk.

00:33:08.240 --> 00:33:09.960
Yeah, the Django guys are talking about it.

00:33:09.960 --> 00:33:10.740
They're playing it.

00:33:10.740 --> 00:33:11.500
It's just not there yet.

00:33:11.500 --> 00:33:12.540
I'm sure they are.

00:33:12.540 --> 00:33:15.560
Yeah, I'm a big fan.

00:33:15.560 --> 00:33:25.740
And so a big chunk of the research and the coverage I had in the course was Django and Django logging registration and Django REST.

00:33:26.600 --> 00:33:33.040
So also Django is a very big topic and people find themselves with a steep learning curve.

00:33:33.760 --> 00:33:38.940
So the best way to go is to build a very simple CRUD app.

00:33:38.940 --> 00:33:41.820
So create, read, update, delete.

00:33:41.820 --> 00:33:45.160
And I built a quotes app with one model.

00:33:45.160 --> 00:33:49.140
Very simple, but a great opportunity to look into Django's ORM.

00:33:49.700 --> 00:33:57.620
So if you're not familiar with these frameworks, one of the things they do is get rid of you writing raw SQL.

00:33:57.620 --> 00:34:04.880
So you can use the object relational mapper or ORM and it makes it very easy to talk to a database.

00:34:04.880 --> 00:34:07.560
And Django's ORM I really like.

00:34:07.560 --> 00:34:10.940
I mean, it's very intuitive and the syntax makes a lot of sense.

00:34:10.940 --> 00:34:16.000
Yeah, and Django is different in the sense that like Julian and I were talking about SQLAlchemy, which we both like.

00:34:16.440 --> 00:34:21.440
But SQLAlchemy is its own separate thing and you choose to bring it into Flask or Pyramid or something like that.

00:34:21.440 --> 00:34:26.220
But with Django, it comes with its own like more integrated data access layer, right?

00:34:26.220 --> 00:34:27.360
Right. That's a great addition.

00:34:27.360 --> 00:34:32.360
Yeah, because yeah, Flask, you have to set it up separately and usually you go with SQLAlchemy.

00:34:32.360 --> 00:34:35.420
But Django has all the stuff in the box.

00:34:35.420 --> 00:34:36.920
It's a complete solution.

00:34:36.920 --> 00:34:44.180
Also the templating, I think for Flask, you would use Jinja and Django has its own templating engine.

00:34:44.180 --> 00:34:50.460
So Django is great if you want to have a complete solution out of the box, but then it is opinionated.

00:34:50.460 --> 00:34:52.660
So some people like it, some people don't.

00:34:52.660 --> 00:34:55.220
And I do like the decisions they made.

00:34:55.220 --> 00:34:56.860
What do you like, Django or Flask?

00:34:56.860 --> 00:34:58.160
What do you think?

00:34:58.160 --> 00:35:01.220
It's a never-ending battle between you and me.

00:35:01.220 --> 00:35:03.580
You're Django, man.

00:35:03.580 --> 00:35:04.720
Fine.

00:35:04.920 --> 00:35:05.200
Yeah.

00:35:05.200 --> 00:35:14.160
So another thing I covered was, I mean, always, usually if you make a website, you need some sort of registration and login.

00:35:14.480 --> 00:35:20.560
So I covered the Django registration plugin, which recently was upgraded to 3.0.

00:35:20.560 --> 00:35:21.760
Great plugin.

00:35:21.960 --> 00:35:25.640
If you need to capture emails and do two-way authentication.

00:35:25.640 --> 00:35:31.680
So you need to send an email, confirmation email for a user to confirm and register.

00:35:31.680 --> 00:35:35.080
The only thing confusing was that the templates were missing.

00:35:35.080 --> 00:35:37.080
So I ended up providing them in a zip file.

00:35:37.080 --> 00:35:42.320
Even so, I would really recommend looking into that plugin, which is called Django registration.

00:35:42.700 --> 00:35:46.240
And lastly, in this context, I also covered Django REST.

00:35:46.240 --> 00:35:49.560
As we mentioned before, same author as API star.

00:35:49.560 --> 00:35:58.680
And yeah, it's another great framework that makes it easy, relatively easy to build APIs, but do it on top of your Django models.

00:35:58.680 --> 00:36:00.380
So I use the same quote app.

00:36:00.380 --> 00:36:00.620
Right.

00:36:00.620 --> 00:36:12.280
If you've already got your Django models made for your web app, like if you want to expose that as a RESTful endpoint, like this is a supernatural choice because you only have to put the API, like a thin API layer on top of what you already got.

00:36:12.280 --> 00:36:12.540
Right.

00:36:12.640 --> 00:36:18.380
Yeah, you basically make a serialization module and that's almost all you have to do.

00:36:18.380 --> 00:36:20.300
So it makes it really easy.

00:36:20.300 --> 00:36:23.680
And it has also support for permissions.

00:36:23.680 --> 00:36:27.440
So I think that's done via some middleware.

00:36:27.440 --> 00:36:31.680
And yeah, I also plugged in a swagger for documentation.

00:36:31.680 --> 00:36:36.000
And yeah, it was all pretty easy, relatively a few lines of code.

00:36:36.000 --> 00:36:40.320
So I really liked Django REST framework and I can highly recommend it.

00:36:40.320 --> 00:36:40.820
That's cool.

00:36:40.940 --> 00:36:43.680
Do you use Django REST framework in your code challenge platform?

00:36:43.680 --> 00:36:44.620
Yeah, good question.

00:36:44.620 --> 00:36:45.860
I actually not.

00:36:45.860 --> 00:36:47.920
Just use Django, but not Django REST, right?

00:36:47.920 --> 00:36:48.200
Yeah.

00:36:48.200 --> 00:36:50.960
Django made that pretty easy to do.

00:36:50.960 --> 00:36:53.600
We just manually made some API endpoints.

00:36:53.600 --> 00:36:54.080
Yeah.

00:36:54.180 --> 00:36:55.700
Yeah, I ended up doing that a lot as well.

00:36:55.700 --> 00:37:02.700
We were thinking though, at some point we need a mobile app or something and we need to make an API for the whole thing.

00:37:02.700 --> 00:37:04.440
Then we definitely want to use it.

00:37:04.440 --> 00:37:05.900
Yeah, for sure.

00:37:05.900 --> 00:37:07.240
I've been down that road.

00:37:07.240 --> 00:37:12.700
Yeah, another module I want to highlight was SendGrid for emails.

00:37:12.920 --> 00:37:17.040
Because with the registration plugin, you have to send a verification link.

00:37:18.140 --> 00:37:23.300
And SendGrid makes it very easy with their API to send emails.

00:37:23.300 --> 00:37:25.600
So I use that as well in this context.

00:37:25.600 --> 00:37:30.300
Yeah, the days are a long call and you should set up your own SMTP server and talk to it locally.

00:37:30.300 --> 00:37:32.720
Using something like SendGrid makes a lot of sense.

00:37:32.820 --> 00:37:40.660
Yeah, and I think I also at some point tried to use Gmail, but then it doesn't really like being used as an API or so.

00:37:40.660 --> 00:37:42.160
So it's security concerns.

00:37:42.160 --> 00:37:44.640
So it's not, that was not a success.

00:37:44.640 --> 00:37:46.880
Lessons you learn.

00:37:46.880 --> 00:37:48.400
Why is my email not getting delivered?

00:37:48.400 --> 00:37:53.340
This portion of Talk Python To Me is brought to you by Linode.

00:37:53.340 --> 00:37:57.060
Are you looking for hosting that's fast, simple, and incredibly affordable?

00:37:57.240 --> 00:38:02.180
Well, look past that bookstore and check out Linode at talkpython.fm/Linode.

00:38:02.180 --> 00:38:04.100
That's L-I-N-O-D-E.

00:38:04.100 --> 00:38:08.500
Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:38:08.500 --> 00:38:10.700
They have 10 data centers across the globe.

00:38:10.700 --> 00:38:14.540
So no matter where you are or where your users are, there's a data center for you.

00:38:14.540 --> 00:38:19.020
Whether you want to run a Python web app, host a private Git server, or just a file server,

00:38:19.020 --> 00:38:24.240
you'll get native SSDs on all the machines, a newly upgraded 200 gigabit network,

00:38:24.440 --> 00:38:28.960
24-7 friendly support, even on holidays, and a seven-day money-back guarantee.

00:38:28.960 --> 00:38:30.560
Need a little help with your infrastructure?

00:38:30.560 --> 00:38:35.320
They even offer professional services to help you with architecture, migrations, and more.

00:38:35.320 --> 00:38:38.260
Do you want a dedicated server for free for the next four months?

00:38:38.260 --> 00:38:41.340
Just visit talkpython.fm/Linode.

00:38:41.340 --> 00:38:44.860
Julian, what do you got for the next one?

00:38:44.860 --> 00:38:50.940
So the next one is actually kind of simple, but again, it was very satisfying, a lot of fun to do.

00:38:50.940 --> 00:38:57.560
So I did some Heroku deployment on, what was it, day 65 to 68, something like that.

00:38:57.560 --> 00:39:00.720
And it was really satisfying.

00:39:00.720 --> 00:39:06.220
So I know with Netlify, I was able to deploy a static site and have it all hosted.

00:39:06.220 --> 00:39:08.640
But this time I wanted to get my Flask app.

00:39:08.640 --> 00:39:14.000
And one of the best parts was the Flask app that I was creating throughout all of the course.

00:39:14.000 --> 00:39:15.480
It's all running local.

00:39:15.480 --> 00:39:17.720
You know, it's all local on your desktop.

00:39:17.720 --> 00:39:28.460
So this was the chance to get it out on the web, to get it running in a dyno on Heroku and just deployed out there so I could spam it to all my friends and family and say, look what I made.

00:39:28.460 --> 00:39:30.940
And they make it really simple.

00:39:30.940 --> 00:39:37.400
And this is why I think we use Heroku as well for quite a few things on the side, but they just make it too easy.

00:39:37.840 --> 00:39:42.600
And the best part is with your Flask app, they fully support Flask.

00:39:42.600 --> 00:39:44.780
So you can just deploy it.

00:39:44.780 --> 00:39:48.580
You link the repo that you've created locally to Heroku.

00:39:48.580 --> 00:39:58.240
And again, when you push the code up to Heroku, it processes and it actually deploys your site onto your dyno and it's live.

00:39:58.700 --> 00:40:07.280
So I think the only thing you really need to throw into your code is a little proc file and a couple of little tags here and there.

00:40:07.280 --> 00:40:08.240
And that's it.

00:40:08.240 --> 00:40:09.780
Heroku takes care of the rest.

00:40:09.780 --> 00:40:11.580
So it's actually really simple.

00:40:11.580 --> 00:40:15.580
That was part of what I covered in that section of the course.

00:40:15.820 --> 00:40:19.460
But I also wanted to highlight some of the cool features Heroku has.

00:40:19.460 --> 00:40:22.980
And again, I'm going to say, I know this sounds like a massive plug for Heroku, but it's not.

00:40:22.980 --> 00:40:24.500
I just really like what they do.

00:40:24.500 --> 00:40:27.500
They have a lot of plugins that you can use.

00:40:27.500 --> 00:40:29.340
I think they call them plugins.

00:40:29.340 --> 00:40:30.720
Yeah, whatever.

00:40:30.720 --> 00:40:31.620
We're going to call them plugins.

00:40:31.620 --> 00:40:32.740
We're going to call them plugins today.

00:40:32.740 --> 00:40:35.020
So there are two that I wanted to cover.

00:40:35.020 --> 00:40:38.400
Bob just mentioned one, SendGrid, because we use SendGrid a lot.

00:40:38.400 --> 00:40:43.480
So again, you can hear that a lot of the stuff we're discussing here, we use actively.

00:40:43.480 --> 00:40:45.920
So that's why we wanted to cover it in the course.

00:40:45.920 --> 00:40:52.380
But this SendGrid plugin, it links, the add-on, it links with your SendGrid account.

00:40:52.380 --> 00:40:59.420
And it's the most minimal amount of code to throw into your code base to then shoot off an email automatically.

00:40:59.420 --> 00:41:02.400
And it just works really well.

00:41:02.400 --> 00:41:04.540
So I really enjoyed that, teaching that.

00:41:04.540 --> 00:41:12.800
In fact, I think the hardest part was making that section take a day, because it was so easy to teach.

00:41:12.800 --> 00:41:14.980
It was, you know, I was struggling for things to say.

00:41:14.980 --> 00:41:17.100
I probably should have just sang a song or something.

00:41:17.100 --> 00:41:23.020
But then the other one I wanted to cover off was Heroku Scheduler, however you want to pronounce that word, scheduler.

00:41:23.020 --> 00:41:28.260
But it's just essentially cron, and it makes your life so much easier.

00:41:28.260 --> 00:41:31.500
You don't need to go into any backends and worry about it.

00:41:31.500 --> 00:41:35.420
It has a nice web interface if you're that way inclined, like me.

00:41:35.980 --> 00:41:38.320
And it's just super helpful.

00:41:38.320 --> 00:41:40.280
You can automate so many tasks.

00:41:40.280 --> 00:41:46.200
You can little parts of your Flask app, whatever you want, with this little scheduler.

00:41:46.200 --> 00:41:49.600
Literally put in the code that you want it to run every time.

00:41:49.600 --> 00:41:51.720
And it's just, it's really easy.

00:41:51.720 --> 00:41:53.020
Really pleasant to use.

00:41:53.020 --> 00:41:54.240
Really pleasant experience.

00:41:54.240 --> 00:41:55.700
It's not something you get to say very often.

00:41:55.880 --> 00:41:58.280
Yeah, that's a great way to describe deployment, right?

00:41:58.280 --> 00:42:01.460
Like, normally deployment is something that people got to learn a lot about.

00:42:01.460 --> 00:42:03.820
It's really tricky, and stuff goes down.

00:42:03.820 --> 00:42:06.200
Like, where are the Nginx logs?

00:42:06.200 --> 00:42:08.300
It says it doesn't work, but I don't know why.

00:42:08.300 --> 00:42:10.020
I can't figure out where the logs are.

00:42:10.020 --> 00:42:11.580
You know, like, so this is really nice.

00:42:12.120 --> 00:42:17.580
I know there's a lot of people, like you guys, who love platform-as-a-service stuff, like Heroku.

00:42:17.580 --> 00:42:24.620
But there's also a good case to be made if you want a bunch of VMs, depending on, like, how you want to configure things and whatnot, like on the node or something.

00:42:24.620 --> 00:42:30.740
So, yeah, definitely, if you're inclined towards the platform-as-a-service side, that sounds like a good option for sure.

00:42:30.740 --> 00:42:31.600
Yeah, definitely.

00:42:31.600 --> 00:42:36.900
All right, so the next one I want to talk about kind of has to do with, like, deployment and evolving your app over time as well.

00:42:36.900 --> 00:42:38.520
And that's database migrations.

00:42:39.220 --> 00:42:45.360
So, if you're using SQLAlchemy, Mike Bayer created this thing, who also created SQLAlchemy, created this thing called Alembic.

00:42:45.360 --> 00:42:51.520
And if you're using Django ORM, there's migrations built into that as well.

00:42:51.520 --> 00:42:57.020
And the idea is that regardless of which one you're using, but I'll talk about SQLAlchemy just to have something concrete.

00:42:57.020 --> 00:43:07.180
If your SQLAlchemy class structure does not match what your database structure looks like, your app is coming to an abrupt screeching halt, right?

00:43:07.180 --> 00:43:07.680
Oh, yeah.

00:43:08.000 --> 00:43:09.680
You're going to get a, you know that, right?

00:43:09.680 --> 00:43:10.900
You're going to get a 500 error.

00:43:10.900 --> 00:43:16.920
It's going to say operational error database schema, like this column doesn't exist or something terrible like that.

00:43:16.920 --> 00:43:19.080
And you'll be like, whoa, that sounds kind of bad.

00:43:19.080 --> 00:43:26.060
But, like, if you make a change to your code, like add a column or something, and then you deploy it, boom, your app is taken offline, right?

00:43:26.060 --> 00:43:27.500
Like, it will no longer talk to the database.

00:43:27.500 --> 00:43:28.280
It's a problem.

00:43:28.280 --> 00:43:29.960
So, how do you manage that, right?

00:43:29.980 --> 00:43:33.260
Like, some people probably, like, evolve the database manually.

00:43:33.260 --> 00:43:36.000
That sounds a little scary to me.

00:43:36.000 --> 00:43:42.360
Just because it's, you've got to write the SQL transformations to do it right or, like, open up the tool and edit it.

00:43:42.580 --> 00:43:47.960
So, what's great with Alembic is you can just point it at your SQLAlchemy models, point it at your database.

00:43:47.960 --> 00:43:49.960
There's a little bit of configuration to set it up.

00:43:49.960 --> 00:43:54.140
But then you can just run a command, auto-generate the migration.

00:43:54.140 --> 00:43:57.580
And it'll look at your classes and it'll look at the database and go, well, this column was dropped.

00:43:57.640 --> 00:44:00.880
This one was added and this index was updated in this way.

00:44:00.880 --> 00:44:07.100
And then it just lets you run a command line operation that will automatically transform the database like that.

00:44:07.100 --> 00:44:08.560
So, one developer makes a change.

00:44:08.560 --> 00:44:09.780
The other developer checks it out.

00:44:09.780 --> 00:44:13.020
You know, obviously, that change needs to accompany a migration.

00:44:13.020 --> 00:44:16.760
So, then they can just run the migrations as they get the new version of the app.

00:44:16.760 --> 00:44:18.980
You push it to Q&A or staging.

00:44:18.980 --> 00:44:20.060
You run the migration.

00:44:20.060 --> 00:44:24.720
And then as part of your deployment, you can just have it always run a migration.

00:44:24.720 --> 00:44:29.940
And, like, if there's no operations, it just goes, you know, if it's up to date, it just goes, eh, nothing happens.

00:44:29.940 --> 00:44:31.100
So, we'll just keep going.

00:44:31.100 --> 00:44:37.840
So, it's a really nice way to make sure that your database constantly stays in sync with your ORM models.

00:44:37.840 --> 00:44:38.920
Oh, that is really cool.

00:44:38.920 --> 00:44:39.180
Yeah.

00:44:39.180 --> 00:44:42.000
And when I first looked at it, I'm like, whoa, this looks complicated.

00:44:42.000 --> 00:44:43.280
Why is this so hard to set up?

00:44:43.280 --> 00:44:44.080
Maybe it is.

00:44:44.080 --> 00:44:44.540
I don't know.

00:44:44.540 --> 00:44:53.460
There's a few little hitches that, like, cause some challenges about, like, how do you import the models correctly from the context of executing within Alembic and stuff like that.

00:44:53.460 --> 00:44:55.480
But once you get it all figured out, it's not too bad.

00:44:55.480 --> 00:44:57.600
We covered that in day 61 to 64.

00:44:57.600 --> 00:45:00.820
So, you can go check out the little sample code there.

00:45:00.820 --> 00:45:03.680
Another alternative is to just not use a relational database.

00:45:03.680 --> 00:45:06.880
Like, you know, all my stuff, like, in production runs on MongoDB.

00:45:06.880 --> 00:45:09.520
And MongoDB doesn't have this problem.

00:45:09.520 --> 00:45:12.860
But it also has basically an ORM, something called an ODM for them.

00:45:12.860 --> 00:45:14.580
Mongo Engine is what I use.

00:45:14.640 --> 00:45:17.180
And it's basically like SQLAlchemy.

00:45:17.180 --> 00:45:19.880
It's more like Django ORM, actually, but same idea.

00:45:19.880 --> 00:45:22.780
But MongoDB doesn't have this problem in general.

00:45:22.780 --> 00:45:25.200
So, you don't have migrations really there.

00:45:25.200 --> 00:45:26.920
You can sidestep it that way.

00:45:26.920 --> 00:45:29.160
But a lot of people want to use a relational database.

00:45:29.160 --> 00:45:30.620
And if you do, migrations.

00:45:30.620 --> 00:45:31.780
It's a great way to solve the problem.

00:45:31.780 --> 00:45:33.300
Ah, that's really cool.

00:45:33.540 --> 00:45:35.980
And I can see it's, so I'm just on the documentation.

00:45:35.980 --> 00:45:39.260
And it's actually alembic.sqlalchemy.org.

00:45:39.260 --> 00:45:41.420
So, yeah, very cool.

00:45:41.420 --> 00:45:43.840
Yeah, yeah, same organization, same people behind it.

00:45:43.840 --> 00:45:46.840
Bob, do you guys use migrations, the Django migrations for what you're doing?

00:45:46.840 --> 00:45:47.800
Yeah, very simple.

00:45:47.800 --> 00:45:49.240
Make migrations.

00:45:49.240 --> 00:45:52.040
That makes a file you commit to version control.

00:45:52.040 --> 00:45:53.800
And then just migrate.

00:45:53.800 --> 00:45:55.360
And then it syncs it to the database.

00:45:55.360 --> 00:45:56.120
Works great.

00:45:56.120 --> 00:45:58.620
Yeah, sounds real similar to the auto-generate feature there.

00:45:58.620 --> 00:45:58.920
It's cool.

00:45:58.920 --> 00:46:00.500
All right, Bob, what's your last one?

00:46:00.500 --> 00:46:01.380
Slackbots.

00:46:02.720 --> 00:46:07.400
That was one of the most fun chapters I worked on.

00:46:07.400 --> 00:46:09.420
And, well, we all...

00:46:09.420 --> 00:46:11.100
Slack is used for all sorts of things, right?

00:46:11.100 --> 00:46:11.980
Like, people chat with it.

00:46:11.980 --> 00:46:14.720
But it's also got so many integrations, right?

00:46:14.720 --> 00:46:18.180
Like, for example, if, like, I have an error on my website,

00:46:18.180 --> 00:46:22.920
I have a Slack channel that Rollbar will detect the error on my website

00:46:22.920 --> 00:46:26.720
and then post a message to me on Slack that there was an error on the website, right?

00:46:26.720 --> 00:46:28.220
And that's like a Slack bot, sort of.

00:46:28.220 --> 00:46:29.560
Sort of, I guess.

00:46:29.560 --> 00:46:31.520
But, yeah, there's all sorts of uses for it.

00:46:31.520 --> 00:46:35.620
Yeah, when people do a pull request or a code challenge repo,

00:46:35.620 --> 00:46:38.160
we get a notification in our pull request channel.

00:46:38.160 --> 00:46:42.980
But also, if you think about, like, the general Slack bot, it's super useful.

00:46:42.980 --> 00:46:44.860
Like, you can set reminders and stuff.

00:46:44.860 --> 00:46:48.260
So, yeah, bots overall are becoming more popular.

00:46:48.520 --> 00:46:50.980
So, it's a nice skill to have, I think.

00:46:50.980 --> 00:46:55.640
And so, yeah, for this chapter, I looked into Slack API.

00:46:56.800 --> 00:47:00.340
And we made a random book slash command.

00:47:00.340 --> 00:47:07.780
So, if you type slash book in our Slack, it reaches out to some books API we have for another app we run.

00:47:08.320 --> 00:47:09.980
And it posts back some random title.

00:47:09.980 --> 00:47:12.480
You can also do slash book and then user.

00:47:12.480 --> 00:47:14.640
And you get the last book for the user.

00:47:14.640 --> 00:47:15.900
So, that's fun.

00:47:15.900 --> 00:47:16.300
That's cool.

00:47:16.460 --> 00:47:20.120
And what's nice about these apps is that there's a lot of moving pieces.

00:47:20.120 --> 00:47:25.240
So, it's not only the Slack API, but you have to call another API to get your data.

00:47:25.420 --> 00:47:29.580
So, in this case, that was Google Books API, which I think has been around forever.

00:47:29.580 --> 00:47:37.100
And we had to make a little Flask app for the slash command to actually grab data.

00:47:37.100 --> 00:47:40.620
So, it was and retrieving data from an API and making an API.

00:47:40.620 --> 00:47:46.940
And then, before rolling it out, you want to test your local server on the internet.

00:47:46.940 --> 00:47:55.400
And for that, I used ngrok, right, which is a pretty important tool if you want to, how would I say that?

00:47:55.400 --> 00:48:01.060
Link your local host to your internet address or make your local host available on the internet, so to say.

00:48:01.060 --> 00:48:03.220
So, you get this kind of temporary IP.

00:48:03.220 --> 00:48:10.680
And anybody connecting to that IP is actually talking to your local web server, which is cool, useful.

00:48:10.680 --> 00:48:12.600
I'm so glad you covered ngrok here.

00:48:12.600 --> 00:48:15.900
You threw this in here because ngrok is incredible.

00:48:15.900 --> 00:48:24.920
So, like, if I type ngrok and I give it a port, it'll say I could map, like, port 5000 if I was doing Flask.

00:48:24.920 --> 00:48:30.880
Locally, over to, like, 88532ff5.ingrok.io.

00:48:30.880 --> 00:48:33.980
And it actually has an HTTP and HTTPS version.

00:48:33.980 --> 00:48:36.740
So, at first, I thought, oh, this is kind of interesting.

00:48:36.740 --> 00:48:39.280
But I've been using this for some incredible stuff.

00:48:39.280 --> 00:48:42.640
So, for example, when I was developing my mobile apps,

00:48:42.640 --> 00:48:54.760
I wanted my phone where I had the debugger attached to my phone to be able to talk to the web services that I was building locally with the debugger and PyCharm attached to the web service.

00:48:54.760 --> 00:48:55.280
Right?

00:48:55.380 --> 00:48:58.840
And, of course, I could drop my firewall and, like, set this up and, like, all.

00:48:58.840 --> 00:49:01.620
But we just run an ngrok command.

00:49:01.620 --> 00:49:04.060
You don't need to change firewall settings on either end.

00:49:04.060 --> 00:49:08.440
It just automatically goes through the internet, through HTTPS, and then right back in there.

00:49:08.440 --> 00:49:10.240
And you can step through one, step through the other.

00:49:11.020 --> 00:49:18.760
Another one was I was doing some integration with Gumroad for the purchasing of the PyCharm book that Matt Harrison and I wrote.

00:49:18.760 --> 00:49:22.420
And we had to do some – there's one option you can buy where you also get a course.

00:49:22.420 --> 00:49:24.940
And so, it had to, like, create an account and, like, put you in the course.

00:49:24.940 --> 00:49:26.740
And, like, it wasn't working.

00:49:27.160 --> 00:49:29.080
So, I put the URL it was supposed to work and it wasn't working.

00:49:29.080 --> 00:49:30.200
Like, why is this not working?

00:49:30.200 --> 00:49:32.640
And, like, why don't I just put the ngrok URL in there?

00:49:32.640 --> 00:49:41.380
And I was literally stepping through in the debugger, Gumroad's callback into, like, my local machine, into PyCharm, into the APIs I was creating.

00:49:41.380 --> 00:49:43.320
It is so cool, this ngrok thing.

00:49:43.320 --> 00:49:44.620
It's definitely underestimated.

00:49:44.620 --> 00:49:45.540
That's really cool.

00:49:45.540 --> 00:49:48.460
If you cannot debug something on local host, you're lost, right?

00:49:48.460 --> 00:49:49.380
Right.

00:49:49.380 --> 00:49:56.820
I mean, here you want to have Slack, in your example, you want to have Slack send a message over and it goes to your HTTP endpoint to do something and then it gets a response.

00:49:57.020 --> 00:49:59.240
Like, you can't debug Slack, right?

00:49:59.240 --> 00:50:01.360
That's their infrastructure out on the internet.

00:50:01.360 --> 00:50:07.820
But you can actually, like, deeply run and iterate on, like, your local version using ngrok.

00:50:07.820 --> 00:50:08.580
It's awesome.

00:50:08.580 --> 00:50:08.960
Yeah.

00:50:08.960 --> 00:50:09.480
Yeah, okay.

00:50:09.480 --> 00:50:10.480
I'm excited about that.

00:50:10.480 --> 00:50:11.360
I got to stop.

00:50:11.360 --> 00:50:14.080
But, yeah, definitely you found it valuable as well, huh?

00:50:14.080 --> 00:50:15.600
No, that is cool.

00:50:15.600 --> 00:50:17.600
So, the whole ngrok thing is amazing.

00:50:17.600 --> 00:50:20.980
I didn't even know you used that, Bob, in that part of the course.

00:50:20.980 --> 00:50:24.760
Did you create any other Slack bots other than just the books one?

00:50:24.760 --> 00:50:26.880
There's one we actually use quite a bit.

00:50:26.880 --> 00:50:31.160
which is called Karma Bot on our Slack.

00:50:31.160 --> 00:50:39.980
And if you want to give people credit for contributing to the community, helping each other out, you just use add handle plus plus.

00:50:39.980 --> 00:50:46.160
And Karma Bot keeps a local database of users' karmas.

00:50:46.440 --> 00:50:49.420
So, the user then gets extra points.

00:50:49.420 --> 00:50:53.300
And it's funny how people sometimes react to that gamification.

00:50:53.300 --> 00:50:58.420
Definitely boost community participation.

00:50:58.960 --> 00:51:01.220
And, yeah, it's all run by a Slack bot.

00:51:01.220 --> 00:51:02.140
It's kind of funny.

00:51:02.140 --> 00:51:06.380
It's a bot, but people kind of treat it as a human at some point, right?

00:51:06.380 --> 00:51:11.280
That's really one of the most satisfying projects.

00:51:11.280 --> 00:51:13.600
It's not in the course, but it's on GitHub.

00:51:13.600 --> 00:51:15.360
We will link to it.

00:51:16.060 --> 00:51:20.700
That's another example of a bit more elaborated Slack API project.

00:51:20.700 --> 00:51:21.160
For sure.

00:51:21.160 --> 00:51:24.200
Julian, you want to wrap up your section with Chuck Norris?

00:51:24.200 --> 00:51:25.200
Oh, yeah, I do.

00:51:25.200 --> 00:51:33.120
So, while we're having a bit of fun, this was the most fun I had in the course from an actual fun standpoint.

00:51:33.780 --> 00:51:36.460
So, what I wanted to do is, I guess I'll give you the quick background.

00:51:36.460 --> 00:51:42.820
It was Flask, but what I wanted to do was give the users a sort of real-life use case.

00:51:42.820 --> 00:51:51.620
So, when you make a Flask app, especially when you're learning Flask from the start, one of the easiest things to do is to try and talk to an external API.

00:51:51.620 --> 00:51:58.980
So, not make a Flask API, but just go out to an API, pull some data, and then present it on your Flask app webpage.

00:51:59.720 --> 00:52:06.640
So, that involves, you know, setting some gets, getting some posts potentially, and then presenting that data.

00:52:06.640 --> 00:52:08.700
So, doing something with it to present it on your page.

00:52:08.700 --> 00:52:13.840
And it's all little simple bits, but combining it all together is...

00:52:13.840 --> 00:52:16.860
I remember when I first learnt this was a bit complex.

00:52:16.860 --> 00:52:19.380
So, I wanted to demonstrate that in a few days.

00:52:19.380 --> 00:52:25.300
And probably the fun part here was choosing some interesting APIs to play with.

00:52:25.300 --> 00:52:29.040
And the first one I chose was the Pokemon API.

00:52:29.460 --> 00:52:29.880
Actually, no.

00:52:29.880 --> 00:52:31.300
The first one I chose was Chuck Norris.

00:52:31.300 --> 00:52:33.120
So, there were two, Pokemon and Chuck Norris.

00:52:33.120 --> 00:52:42.120
And the Pokemon one was really nice because what I was getting people to do was enter in a color on the webpage that you create.

00:52:42.580 --> 00:52:47.800
And that color then shoots off to the Pokemon API and returns...

00:52:47.800 --> 00:52:51.240
You get returned a list of all Pokemon with that color.

00:52:51.240 --> 00:52:57.240
And then, you know, the course shows you how to list that data on your page or print it onto your page.

00:52:57.240 --> 00:53:01.280
So, really simple stuff, but really actionable.

00:53:01.280 --> 00:53:04.420
And you get that instant feedback of, hey, look what I just made.

00:53:04.420 --> 00:53:04.980
This is cool.

00:53:05.420 --> 00:53:11.260
And because you get to see the Pokemon API, you get to see all the cool little things that you can pull.

00:53:11.260 --> 00:53:19.100
So, I've seen people on Twitter who then expanded on this, like spread into another day or two and got all sorts of other information from the API.

00:53:19.680 --> 00:53:22.060
And it was just really cool to see.

00:53:22.060 --> 00:53:25.800
But what was actually quite hilarious was the Chuck Norris API.

00:53:25.800 --> 00:53:30.560
So, I couldn't believe it existed first and foremost, which just killed me for a day.

00:53:31.060 --> 00:53:35.420
But the API just returns a Chuck Norris joke.

00:53:35.420 --> 00:53:41.720
And the reason this is so funny is because obviously the jokes are hilarious and lame and terrible, whatever.

00:53:41.720 --> 00:53:47.340
But I didn't realize they were some could kind of be inappropriate.

00:53:47.340 --> 00:53:55.000
And I didn't realize until after I'd recorded everything and put all this time into the course.

00:53:55.000 --> 00:53:56.900
And then I got to the end.

00:53:56.900 --> 00:53:58.520
I'm like, oh, that joke wasn't fantastic.

00:53:58.900 --> 00:54:02.560
So, I think there's a disclaimer in the course now saying, look, just please ignore any jokes.

00:54:02.560 --> 00:54:05.800
Just this is more for the API, not so much for the joke.

00:54:05.800 --> 00:54:06.680
Yeah, it's funny though.

00:54:06.680 --> 00:54:08.000
This was a great chapter to do.

00:54:08.000 --> 00:54:09.940
It's really actionable and a lot of fun.

00:54:09.940 --> 00:54:16.000
Yeah, and consuming APIs, especially from Python where we have requests and other things like that, AIoHCP client, for example.

00:54:16.000 --> 00:54:18.440
It's so accessible.

00:54:18.440 --> 00:54:23.820
I think before people try it, if they haven't, it sounds like, oh, this integration might be hard.

00:54:23.820 --> 00:54:25.500
Like, usually it's not.

00:54:25.500 --> 00:54:27.220
Yeah, it's actually quite simple.

00:54:27.540 --> 00:54:34.460
And probably the best part is when you're dealing with that sort of thing generally, or a lot of use cases will have you use forms.

00:54:34.460 --> 00:54:39.300
And doing the very simplistic Flask forms that are built in are nice.

00:54:39.300 --> 00:54:44.520
And then it's a nice gateway into the WT forms that Flask has as well.

00:54:45.320 --> 00:54:46.040
Yeah, it's good.

00:54:46.040 --> 00:54:47.320
A lot of good stuff in that one.

00:54:47.320 --> 00:54:47.920
Yeah, great.

00:54:47.920 --> 00:54:52.300
I want to wrap it up with some JavaScript stuff, actually.

00:54:52.300 --> 00:54:59.420
One of the things that I'm not really a super fan of JavaScript, although I use plenty of it here and there.

00:54:59.420 --> 00:55:07.840
You know, a lot of people, when they create web apps, they think it has to be like a JavaScript front-end thing, like React or Angular or Vue or something like that.

00:55:07.840 --> 00:55:09.680
And then, like, maybe there's some API endpoints.

00:55:09.680 --> 00:55:14.060
And I always find apps like that are, I don't know.

00:55:14.840 --> 00:55:19.960
They're okay, but they always seem to, like, break down or have these little glitches or just, like, weirdnesses about them.

00:55:19.960 --> 00:55:27.040
So I think you can still build amazing apps that are mostly server-side with a little bit of JavaScript here and there as you need it.

00:55:27.120 --> 00:55:39.940
But if, for some reason, you do want to build, like, a progressive web app that has an offline capability or something that's a single-page app for whatever reason that doesn't navigate, you know, one of the options that I looked into was Vue.js.

00:55:39.940 --> 00:55:43.820
As opposed to, say, Angular, which is, you know, it's got a lot of structure.

00:55:43.820 --> 00:55:46.220
It requires TypeScript and things like that.

00:55:46.220 --> 00:55:47.840
Bob, you talked about React.

00:55:47.840 --> 00:55:49.380
And actually, React is really cool.

00:55:49.380 --> 00:55:50.440
There's some great examples.

00:55:50.440 --> 00:55:57.080
There's this one of building a whole bunch of different apps, and one of them is this, like, recreation of the Mac calculator.

00:55:57.080 --> 00:55:58.540
And it looks really, really good.

00:55:58.540 --> 00:55:59.580
I'll link to that as well.

00:55:59.580 --> 00:56:02.680
So React has got some cool examples and options.

00:56:02.680 --> 00:56:06.180
But I just found Vue.js to be so clean and simple.

00:56:06.180 --> 00:56:08.940
You just create a little Vue.js app in JavaScript.

00:56:08.940 --> 00:56:15.600
You give it values like name, colon, right, nothing or string or whatever.

00:56:15.600 --> 00:56:17.360
And it does two-way data binding.

00:56:17.360 --> 00:56:19.720
It's got a lot of plug-ins for editing it.

00:56:19.720 --> 00:56:24.180
So if you're building these front-end apps, I definitely recommend people check out Vue.js.

00:56:24.180 --> 00:56:29.620
It's just, it's got, like, a real minimal, easy-to-get-started type of front-end framework there.

00:56:29.620 --> 00:56:33.240
So another thing that I thought was interesting was Axios.

00:56:33.240 --> 00:56:36.040
And, Bob, you and I talked about Axios as well, right?

00:56:36.040 --> 00:56:39.980
Like, Vue.js doesn't have a native way to talk to web services.

00:56:39.980 --> 00:56:43.380
But Axios, this is a JavaScript plugin library.

00:56:43.380 --> 00:56:44.380
I will link to that as well.

00:56:44.760 --> 00:56:50.080
It's a super simple way to talk to APIs from your JavaScript.

00:56:50.080 --> 00:56:51.820
And it's just, I don't know, I love it.

00:56:51.820 --> 00:56:54.860
I'm like, wow, this actually makes this so incredibly easy.

00:56:54.860 --> 00:56:56.480
It's a super useful library.

00:56:56.860 --> 00:57:06.680
I used it as well in the React chapter to retrieve data from a Python tips API, another API we set up just for the course, another API.

00:57:06.680 --> 00:57:10.000
And, yeah, it made it so easy to retrieve data.

00:57:10.000 --> 00:57:14.500
It's really, if you're working with JavaScript and APIs, you should check out Axios.

00:57:15.320 --> 00:57:17.420
And then I want to throw in two other quick things.

00:57:17.420 --> 00:57:22.560
There's something called the Quasar framework, which builds on top of Vue.js.

00:57:22.560 --> 00:57:31.240
And it has a whole, just a ton of these, like, widgets and controls that you can just, in Vue.js, just include.

00:57:31.240 --> 00:57:39.260
And you get all sorts of great, like, higher-level UI elements that are just pre-built and plugged right into Vue, which is pretty cool.

00:57:39.260 --> 00:57:45.260
And then the other thing is something called Vue.py, Vue.py.

00:57:45.260 --> 00:57:56.440
And so this is a Python layer, so you can write Python code in the front end of your browser that actually is Vue.js bindings.

00:57:56.440 --> 00:57:57.440
Wow, cool.

00:57:57.440 --> 00:57:58.380
That's really cool.

00:57:58.380 --> 00:57:59.680
Yeah, it's really cool.

00:57:59.680 --> 00:58:01.820
So I think it uses Brython.

00:58:01.820 --> 00:58:03.720
Let me look real quick, but I'm pretty sure.

00:58:03.720 --> 00:58:09.180
Yeah, so you can define, like, a Vue component, for example, by just deriving from the Vue component.

00:58:09.180 --> 00:58:15.060
So, like, from Vue, import Vue component, class, hello Vue.py, parenthesis, Vue component.

00:58:15.060 --> 00:58:17.720
And it's really quite interesting there.

00:58:17.720 --> 00:58:22.460
So I'm not sure that it's a good idea, but it's a very interesting idea.

00:58:22.460 --> 00:58:23.440
Maybe it's a good idea.

00:58:23.440 --> 00:58:24.680
It depends what you're building, right?

00:58:24.680 --> 00:58:33.740
Like, if you're building something that's really sensitive to download, like, I think the Brython element or something is, like, you know, it's not entirely small.

00:58:34.220 --> 00:58:36.420
The JavaScript, you've got to download to get that to work.

00:58:36.420 --> 00:58:37.340
But, yeah, it's Brython.

00:58:37.340 --> 00:58:47.020
So still, like, if it's an offline app or, you know, an intranet app or it's going to be bundled up into something like Electron.js, well, then you don't care about the file size, really.

00:58:47.020 --> 00:58:48.760
So Vue.py is pretty interesting.

00:58:48.760 --> 00:58:52.800
That was Dias 93 to 96, and people can check that out.

00:58:52.800 --> 00:58:57.960
There's an example of consuming a movie service API using Axios and Vue.js.

00:58:58.300 --> 00:59:02.440
Well, you guys, that's pretty much it from our course and the topics we're going to cover.

00:59:02.440 --> 00:59:04.900
Mostly that's it for time because we've covered a lot, right?

00:59:04.900 --> 00:59:05.440
Oh, yeah.

00:59:05.440 --> 00:59:06.480
A lot of technology there.

00:59:06.480 --> 00:59:08.480
That's, like, six months worth of content.

00:59:08.480 --> 00:59:09.520
Yeah, I would say.

00:59:09.520 --> 00:59:11.380
And, you know, this is only 12 topics.

00:59:11.380 --> 00:59:12.960
So we covered maybe 13 or 14.

00:59:12.960 --> 00:59:14.560
A few got kind of doubled up.

00:59:14.560 --> 00:59:21.520
In the course, we actually covered 28 different technology topics in these different segments, which is pretty insane.

00:59:21.880 --> 00:59:23.100
So let me just ask you about this.

00:59:23.100 --> 00:59:33.240
What is, like, after going through all these topics and researching them and studying them, what's your kind of takeaway from this whole exploring the web broadly experience?

00:59:33.240 --> 00:59:39.180
Okay, so for me, I would say it's just that there's so much out there.

00:59:39.180 --> 00:59:52.380
If you listen to all the noise that you hear on Twitter, if you listen to all the stuff that you find or you read everything that you find and you don't actually just choose something to focus on, you're never going to learn anything.

00:59:52.380 --> 00:59:57.760
So my takeaway is, okay, yes, there's all sorts of JavaScript frameworks out there.

00:59:57.760 --> 01:00:00.000
Yes, there's all sorts of web frameworks for Python.

01:00:00.000 --> 01:00:01.240
Choose one.

01:00:01.880 --> 01:00:10.820
Learn what you need to learn to get your job done and then be happy with that because there's always going to be something else that could potentially do it better.

01:00:10.820 --> 01:00:16.660
And then once you've got your thing going, then potentially look at something else that might iterate over that.

01:00:16.660 --> 01:00:22.000
But, yeah, I just couldn't believe, as I was doing a lot of the research, I couldn't believe how much is out there.

01:00:22.000 --> 01:00:31.720
And as you were saying, Mike, how quickly new things pop up because by the time we finished making this course, there was stuff that was around that wasn't there when we started.

01:00:31.720 --> 01:00:32.640
And vice versa.

01:00:32.640 --> 01:00:36.520
Yeah, stuff that wasn't there when we finished.

01:00:36.520 --> 01:00:37.500
Exactly.

01:00:37.500 --> 01:00:44.600
There was, what's that library that Kenneth Reitz makes the, not request the other one that he just came up with?

01:00:44.600 --> 01:00:45.160
Responder?

01:00:45.160 --> 01:00:45.820
Responder.

01:00:45.820 --> 01:00:48.420
Like that came out while we were making this course, I'm pretty sure.

01:00:48.960 --> 01:00:51.860
So that sort of thing is just going to keep happening.

01:00:51.860 --> 01:00:54.620
So this is why I'm flask and Bob's Django.

01:00:54.620 --> 01:00:57.040
Bob, what are your thoughts on this?

01:00:57.040 --> 01:00:58.080
My takeaway is similar.

01:00:58.080 --> 01:01:03.180
There's so much going on that it's easy to get scared and it's daunting.

01:01:03.420 --> 01:01:07.820
But I think it comes down to grasping the fundamentals.

01:01:07.820 --> 01:01:13.080
So for me, that really is some HTML, CSS and JavaScript.

01:01:13.080 --> 01:01:16.900
You absolutely want to know at least the basics of those.

01:01:16.900 --> 01:01:19.480
And for Python, yeah, look into a framework.

01:01:19.480 --> 01:01:26.360
There are people with more preference for flask, do it yourself or Django, the whole suite in one.

01:01:26.360 --> 01:01:28.460
I'm more the latter.

01:01:28.460 --> 01:01:32.880
And then I guess go deep in the framework of your choice.

01:01:32.880 --> 01:01:34.620
And another, yeah, fundamental.

01:01:34.620 --> 01:01:40.060
You always want to know some database skills, even some raw SQL I would recommend.

01:01:40.060 --> 01:01:45.940
And yeah, so the fundamentals and then choose the tools of your preference and go deep.

01:01:46.200 --> 01:01:46.980
Yeah, that's good advice.

01:01:46.980 --> 01:01:51.820
And definitely, Julian, you're right that you can just spend your time constantly chasing

01:01:51.820 --> 01:01:53.240
like the next new thing.

01:01:53.240 --> 01:01:57.960
And they come and go so fast that like you will never actually get to somewhere to be

01:01:57.960 --> 01:02:01.640
like doing something concrete and building it on if you just keep doing that.

01:02:01.640 --> 01:02:05.040
Just pick one of these things, start learning, right?

01:02:05.040 --> 01:02:08.520
Like you can always transition later for the next project if you decided you like something

01:02:08.520 --> 01:02:09.100
better in the end.

01:02:09.100 --> 01:02:12.160
But you just got to like put a stake in the ground and start somewhere.

01:02:12.260 --> 01:02:18.060
The other one I'd like to point out is you don't have to learn JavaScript to build decent

01:02:18.060 --> 01:02:19.540
web applications, right?

01:02:19.540 --> 01:02:21.940
Or if you do, it's an extremely small amount.

01:02:21.940 --> 01:02:26.220
Like if you listen to people talk on the web, it's like, oh, you got to know like Angular,

01:02:26.220 --> 01:02:27.620
you got to know this, you got to know that.

01:02:27.620 --> 01:02:32.760
And it's like you can, but you absolutely can build awesome stuff with Django, Flask, Pyramid,

01:02:32.820 --> 01:02:37.960
whatever, just using server side stuff and maybe like a smidgen of interactive, you know,

01:02:37.960 --> 01:02:41.660
focus this text box or maybe show this dialogue.

01:02:41.660 --> 01:02:42.820
But that's about it, right?

01:02:42.820 --> 01:02:46.940
You can learn just Python or you can learn just JavaScript, but like you don't have to

01:02:46.940 --> 01:02:48.700
like necessarily learn them in parallel.

01:02:48.700 --> 01:02:53.400
Yeah, I think that's a great point, especially when people in the community ask like, I want

01:02:53.400 --> 01:02:55.180
to make a blog and I need to learn Django.

01:02:55.180 --> 01:02:59.780
That's fine, but you can actually use static sites and GitHub, right?

01:02:59.920 --> 01:03:02.560
And so you don't actually have to learn Django per se.

01:03:02.560 --> 01:03:07.920
So I would definitely really look at what you're building and then try to choose the right

01:03:07.920 --> 01:03:10.020
tool because it's easy to overdo it.

01:03:10.020 --> 01:03:10.200
All right.

01:03:10.200 --> 01:03:11.980
Maybe it's Netlify and Pelican or something.

01:03:11.980 --> 01:03:12.380
Yeah.

01:03:12.380 --> 01:03:13.100
Yeah, exactly.

01:03:13.100 --> 01:03:13.640
Yeah, exactly.

01:03:13.640 --> 01:03:14.040
Yeah.

01:03:14.040 --> 01:03:14.620
Cool.

01:03:14.620 --> 01:03:15.100
All right.

01:03:15.100 --> 01:03:17.000
Well, that was a lot of fun to talk about those.

01:03:17.000 --> 01:03:20.260
Let me ask you both the two questions before we get out of here, though.

01:03:20.260 --> 01:03:24.380
If you're going to write some Python code, Bob, what editor do you use?

01:03:24.380 --> 01:03:25.020
VS Code?

01:03:25.020 --> 01:03:25.620
Vim.

01:03:25.620 --> 01:03:27.200
Vim?

01:03:27.200 --> 01:03:28.720
It's still Vim.

01:03:28.720 --> 01:03:29.180
Yeah.

01:03:29.180 --> 01:03:30.500
It's just habits.

01:03:30.500 --> 01:03:30.880
Yeah.

01:03:30.880 --> 01:03:31.400
Yeah.

01:03:31.400 --> 01:03:31.680
Cool.

01:03:31.680 --> 01:03:32.120
Julian?

01:03:32.120 --> 01:03:36.000
Well, I was going to say Vim because that's just what I use.

01:03:36.000 --> 01:03:40.400
But look, if I got to choose some other one, I'd actually stick with Notepad++.

01:03:40.400 --> 01:03:42.200
I actually really enjoyed that.

01:03:42.200 --> 01:03:43.120
Yeah, that's cool.

01:03:43.120 --> 01:03:45.340
And I guess I'll throw mine in there as well.

01:03:45.340 --> 01:03:46.060
PyCharm.

01:03:46.060 --> 01:03:47.400
That's not a huge surprise to people.

01:03:47.400 --> 01:03:49.800
Now, notable PyPI package.

01:03:49.940 --> 01:04:00.980
I mean, we explored probably over 100 different PyPI packages for the various parts of this and the dependencies and whatnot of all the stuff that we interacted with.

01:04:00.980 --> 01:04:03.980
So, there's got to be some that you're like, I didn't even know about this.

01:04:03.980 --> 01:04:04.680
And it's really cool.

01:04:04.680 --> 01:04:06.480
Bob, you want to go first?

01:04:06.640 --> 01:04:12.120
I guess the question for this episode is notable PyPI packages that's not mentioned before.

01:04:12.120 --> 01:04:14.100
So, I cannot go on with Django.

01:04:14.100 --> 01:04:16.040
Yeah, it could be one that you mentioned before.

01:04:16.040 --> 01:04:20.100
Yeah, but Django would be a bit not a surprise.

01:04:20.460 --> 01:04:23.140
Now, for example, for web scraping, right?

01:04:23.140 --> 01:04:31.380
Two weeks ago, we had a live code challenge and we were scraping some PyCon Spain website data and beautiful soup, right?

01:04:31.380 --> 01:04:36.040
It's a great package that makes it easy to traverse the DOM.

01:04:36.040 --> 01:04:38.540
And yeah, I'm still happy with that package.

01:04:38.540 --> 01:04:41.820
It's very easy to use and gets the job done.

01:04:41.820 --> 01:04:44.560
Yeah, and if you want to keep it short, you could pip install BS4.

01:04:44.560 --> 01:04:45.380
Yeah, even shorter.

01:04:45.380 --> 01:04:47.460
Exactly.

01:04:47.460 --> 01:04:47.840
Julian?

01:04:47.840 --> 01:04:52.680
It's actually got nothing to do with web stuff because Flask would be a no-brainer for me here.

01:04:52.680 --> 01:04:58.560
But one of the ones that I've used time and time again, especially at work, has actually been PXpect.

01:04:58.560 --> 01:04:59.900
You guys heard of that?

01:04:59.900 --> 01:05:00.840
I haven't heard of that, no.

01:05:00.840 --> 01:05:03.900
It's a little automation library or module.

01:05:03.900 --> 01:05:11.120
It's pretty much the main function is to automate interactive processes that provide predictable output.

01:05:11.120 --> 01:05:14.480
So, think Telnet, SSH, Git and everything like that.

01:05:14.480 --> 01:05:18.940
So, you can automate what's going to happen because you know what your response is going

01:05:18.940 --> 01:05:20.380
to be when you SSH to a server.

01:05:20.380 --> 01:05:23.540
You know that the password prompt is going to come up.

01:05:23.540 --> 01:05:24.460
So, you can code in.

01:05:24.460 --> 01:05:28.560
Okay, when you get this exact prompt, now what do you do?

01:05:28.560 --> 01:05:30.340
And it's really cool.

01:05:30.340 --> 01:05:32.960
There's a whole, obviously, bunch of documentation on it.

01:05:32.960 --> 01:05:35.280
But that's a library module I really like.

01:05:35.280 --> 01:05:36.280
Yeah, that's really cool.

01:05:36.380 --> 01:05:40.440
It does SSH, FTP, Telnet, all sorts of cool stuff.

01:05:40.440 --> 01:05:41.460
I love it.

01:05:41.460 --> 01:05:45.400
See, this is why I asked this question because I learned something every time.

01:05:45.400 --> 01:05:48.520
The one I'm going to throw out there is unsync.

01:05:48.520 --> 01:05:51.040
So, I talked about unsync before.

01:05:51.040 --> 01:05:59.120
It basically unifies all the different ways of doing asynchronous programming in Python and puts the async and await interface on it.

01:05:59.120 --> 01:06:05.280
And it's beautiful because it's only 126 lines in a single Python file.

01:06:05.280 --> 01:06:10.720
And yet, it basically fixes most of Python's async API.

01:06:10.720 --> 01:06:13.560
It's unbelievable that happens in such a small amount of effort.

01:06:13.560 --> 01:06:15.460
So, really love that one.

01:06:15.460 --> 01:06:17.300
And if you're doing async programming, check that out.

01:06:17.300 --> 01:06:17.820
Yep.

01:06:17.820 --> 01:06:18.520
All right, guys.

01:06:18.520 --> 01:06:19.720
Thank you for being here.

01:06:19.720 --> 01:06:21.100
Julie and Bob.

01:06:21.100 --> 01:06:21.640
Thank you.

01:06:21.640 --> 01:06:22.740
It's good to be back, Mike.

01:06:22.740 --> 01:06:23.920
Thank you for having us again, man.

01:06:23.920 --> 01:06:24.420
Yeah, yeah.

01:06:24.420 --> 01:06:25.780
Thanks for writing this course with me.

01:06:25.780 --> 01:06:26.840
We all learned a lot.

01:06:27.020 --> 01:06:28.800
And it was fun to share with everyone a little bit.

01:06:28.800 --> 01:06:29.340
Cheers, man.

01:06:29.340 --> 01:06:30.080
We'll see you next time.

01:06:30.080 --> 01:06:30.340
Cheers.

01:06:30.340 --> 01:06:30.660
Yep.

01:06:30.660 --> 01:06:30.820
Bye.

01:06:30.820 --> 01:06:34.560
This has been another episode of Talk Python To Me.

01:06:34.560 --> 01:06:38.280
Our guests on this episode were Bob Bilderbos and Julian Sequira.

01:06:38.280 --> 01:06:40.760
And it's been brought to you by Ting and Linode.

01:06:40.760 --> 01:06:44.740
Ting is the fast mobile network custom built for technical folks.

01:06:44.740 --> 01:06:48.100
Use their savings calculator to see exactly what you'd pay.

01:06:48.100 --> 01:06:53.840
Visit python.ting.com to get a $25 credit and get started without a contract.

01:06:54.720 --> 01:06:57.820
Linode is your go-to hosting for whatever you're building with Python.

01:06:57.820 --> 01:07:01.380
Get four months free at talkpython.fm/Linode.

01:07:01.380 --> 01:07:03.280
That's L-I-N-O-D-E.

01:07:03.280 --> 01:07:05.700
Want to level up your Python?

01:07:05.700 --> 01:07:10.560
If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

01:07:10.560 --> 01:07:15.660
Or if you're looking for something more advanced, check out our new async course that digs into

01:07:15.660 --> 01:07:18.720
all the different types of async programming you can do in Python.

01:07:18.720 --> 01:07:22.680
And of course, if you're interested in more than one of these, be sure to check out our

01:07:22.680 --> 01:07:23.380
Everything Bundle.

01:07:23.540 --> 01:07:25.280
It's like a subscription that never expires.

01:07:25.280 --> 01:07:27.580
Be sure to subscribe to the show.

01:07:27.580 --> 01:07:29.980
Open your favorite podcatcher and search for Python.

01:07:29.980 --> 01:07:31.200
We should be right at the top.

01:07:31.200 --> 01:07:36.760
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the

01:07:36.760 --> 01:07:40.200
direct RSS feed at /rss on talkpython.fm.

01:07:40.200 --> 01:07:42.280
This is your host, Michael Kennedy.

01:07:42.280 --> 01:07:43.780
Thanks so much for listening.

01:07:43.780 --> 01:07:44.840
I really appreciate it.

01:07:44.840 --> 01:07:46.620
Now get out there and write some Python code.

01:07:46.620 --> 01:08:07.400
I'll see you next time.

01:08:07.400 --> 01:08:37.380
Thank you.

