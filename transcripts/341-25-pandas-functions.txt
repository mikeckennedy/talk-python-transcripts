00:00:00 Do you do anything with Jupyter Notebooks?

00:00:02 If you do, there's a very good chance you're working with the Pandas library.

00:00:05 This is one of the primary tools for anyone doing computational work or data exploration with Python.

00:00:12 Yet, this library is massive, and knowing the idiomatic way to use it can be hard to discover.

00:00:18 That's why I've invited Beks Toichev to be our guest.

00:00:21 He wrote an excellent article highlighting 25 idiomatic Pandas functions and properties

00:00:26 we should all keep in our data toolkit.

00:00:28 I'm sure there is something here for all of us to take away and use Pandas that much better.

00:00:33 This is Talk Python To Me, episode 341, recorded November 4th, 2021.

00:00:39 Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:55 This is your host, Michael Kennedy.

00:00:57 Follow me on Twitter, where I'm @mkennedy, and keep up with the show and listen to past

00:01:01 episodes at talkpython.fm.

00:01:03 And follow the show on Twitter via at Talk Python.

00:01:06 We've started streaming most of our episodes live on YouTube.

00:01:09 Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming

00:01:15 shows and be part of that episode.

00:01:17 This episode is brought to you by Shortcut and Linode, and the transcripts are sponsored

00:01:23 by Assembly AI.

00:01:24 Bex, welcome to Talk Python To Me.

00:01:29 Hello, Michael.

00:01:29 Thanks for having me.

00:01:30 Hey, it's fantastic to have you here on the show.

00:01:33 Your article 25 Pandas functions that you didn't know or probably don't know, I guess, as we'll

00:01:40 see.

00:01:41 That really caught my attention.

00:01:43 Honestly, I don't know many of them.

00:01:45 So I learned a bunch by watching it.

00:01:47 You know, I do spend more time on the web side of Python and the database side of Python than

00:01:53 I do on the data science.

00:01:54 But certainly Pandas is a super important part of Python these days.

00:02:00 And honestly, the whole data science side is the fastest growing part of Python.

00:02:04 Pandas is like one of the first libraries that you will be introduced in any beginner Python

00:02:09 or in any beginner data science course.

00:02:12 And it's amazing how much it has grown since it was first launched.

00:02:18 And the funny thing about the article is that before writing it, I also didn't know most of the functions.

00:02:23 I would always get annoyed by people who use some like complex functions.

00:02:28 And I just wanted to know how they worked and explain it to my audience.

00:02:33 So that was the idea of the article.

00:02:36 Both me and the audience learning.

00:02:37 That's the little bit of secret behind these types of things.

00:02:41 Behind the tutorials, behind articles, behind podcasts, and even behind courses.

00:02:45 A lot of times we dive into them because we're like, oh, I really want to learn these things.

00:02:50 And just let me, you know, put it in a format I can present to the rest of the world and help

00:02:54 everyone else out, right?

00:02:55 Yeah, yeah.

00:02:56 Awesome.

00:02:56 Yeah, before we get into this, I want to talk about your articles and some Kaggle competitions.

00:03:01 And then we'll dive into the 25 functions.

00:03:04 But, you know, let's start with your story.

00:03:06 How did you get into programming in Python?

00:03:07 Right after I finished high school, I got interested in web development.

00:03:11 I learned some HTML and CSS.

00:03:13 And I was hoping to get things to get more, to be more exciting.

00:03:18 But at some time, I just got bored because I'm really into math.

00:03:23 And web development had nothing to do with math, so it was very boring.

00:03:28 So I switched to learning Python.

00:03:30 Learned it for a while and discovered that data science is more, mostly connected to math and statistics.

00:03:37 So I just bought a really good course.

00:03:41 And that's how it starts.

00:03:44 Yeah, that's fantastic.

00:03:45 You know, I think people do often feel like you have to be really good at math to be good

00:03:49 at programming.

00:03:49 And honestly, most of programming has very little to do with math.

00:03:54 Yes, of course.

00:03:55 Yeah.

00:03:56 But data science does.

00:03:57 So data science is unique in this way.

00:03:59 I mean, I guess computational science, right?

00:04:01 If you're an astrophysicist, you do a lot of math as well.

00:04:04 But for most of us, math is just a structured way of thinking.

00:04:08 And we have structured programs.

00:04:10 And that's kind of the end of the relationship there.

00:04:12 But if someone is out there and they really love math and they want to take it farther,

00:04:18 but they want to do that in computers, it sounds like recommending data science might be the

00:04:21 right path.

00:04:22 Yeah, of course.

00:04:23 It's very, really beautiful how software and math connect together in data science,

00:04:28 what kind of things it can achieve for neural networks and state-of-the-art machine learning

00:04:34 algorithms.

00:04:34 It's really amazing.

00:04:36 Yeah.

00:04:36 It's one of these areas that's just growing so fast.

00:04:40 And there's such big advancements.

00:04:42 Yeah.

00:04:42 You know, you look at, I think back to when I was in college and we talked about artificial

00:04:48 intelligence and AI, and it was all about the Turing test, you know?

00:04:53 Could you get a chat bot that would trick a human into thinking that it was an actual other

00:04:58 human?

00:04:59 And it never really seemed to come into reality.

00:05:03 It always seemed like, oh, there's, it's kind of always 30 years out.

00:05:06 And then all of a sudden we have self-driving cars and we have Google Copilot.

00:05:10 Yeah.

00:05:11 It's just the step jump over the last couple of years has been amazing.

00:05:14 Yeah.

00:05:14 I was also amazed by Google Copilot.

00:05:16 Like right after it was launched, I wrote an article on it, like as a kind of intro.

00:05:21 And it really took off.

00:05:23 Like so many people were interested in it.

00:05:25 Like it received like more than 50,000 views, the article.

00:05:28 Yeah.

00:05:29 A lot of people are amazed by it.

00:05:30 I'm amazed by it as well.

00:05:31 I think it's, it is amazing.

00:05:33 It's also bringing to light some interesting, almost legal and philosophical things, right?

00:05:40 If people put code on GitHub, they didn't necessarily intend to train an AI with it.

00:05:45 If they put code on GitHub, that's under GPL.

00:05:48 Well, what the AI knows, is that now GPL or is that completely, you know, can that be used

00:05:53 in closed source?

00:05:54 These are not known, right?

00:05:55 These are, these are interesting questions.

00:05:57 Yeah.

00:05:58 I don't think we're going to answer.

00:05:59 We're not going to completely fill them out today.

00:06:01 Let's focus on something more, a little smaller.

00:06:05 So you mentioned your articles and you've been doing a lot of writing.

00:06:09 So you're a top 10 writer in artificial intelligence on Medium.

00:06:13 Yeah.

00:06:13 Yeah.

00:06:14 Yeah.

00:06:14 And you're also a Kaggle master.

00:06:17 Yeah.

00:06:18 Yeah.

00:06:18 Yeah.

00:06:19 Let's talk about those two things for a little bit.

00:06:20 Just give us a sense of the stuff that you write about on Medium and maybe some of your

00:06:23 favorite articles before we dive into this one that I picked out.

00:06:26 I started writing on Medium a year ago.

00:06:29 It was just purely for educational purposes.

00:06:31 I really liked how like what the things you learn will be like, will be locked into your

00:06:37 brain by writing about them.

00:06:39 So it was a really amazing way to learn something new.

00:06:42 But as my number of articles grew, like my audience grew and I met a lot of people.

00:06:49 I had, it opened a lot of doors for me writing.

00:06:53 Yeah.

00:06:54 And most important of all, I'm more confident about my knowledge than ever before.

00:06:59 That's fantastic.

00:07:00 I really like that you point out that it opened doors because so many people feel like I'm

00:07:06 not ready to write.

00:07:07 I'm not ready to speak a user group or a conference, or I'm not ready to appear on a podcast or any

00:07:12 of these sorts of ways where you put yourself out there.

00:07:14 Right.

00:07:14 Yeah.

00:07:15 But when you do that, the act of doing that pushes you to grow.

00:07:19 And it also opens doors to people.

00:07:21 You know, if you're out there and you're genuine, you don't have to be an absolute expert in

00:07:25 everything.

00:07:25 You just have to be excited and interested.

00:07:27 Other people who are excited want to talk to you and work on something with you, right?

00:07:30 Yes.

00:07:31 You just have to be one step ahead of your audience and that's it.

00:07:34 Right.

00:07:34 When you write articles.

00:07:35 That's right.

00:07:36 And not necessarily in everything they know, just the little area that you're interested in,

00:07:39 right?

00:07:39 Yes.

00:07:40 Yes.

00:07:40 Yeah.

00:07:40 Awesome.

00:07:41 And so that's really great that you're doing this writing stuff.

00:07:44 The other thing is Kaggle.

00:07:45 Tell us about what you've been doing at Kaggle.

00:07:48 I really admire people who do, who do like do competitions on Kaggle for a while.

00:07:53 And I really had this like imposter syndrome.

00:07:56 I couldn't join the competitions because I thought that they were too complex that I had

00:08:01 like a lot of things to learn before I joined them.

00:08:03 I still do.

00:08:04 But after I joined like the tabular playground competitions, I learned that I can do it.

00:08:11 Yeah.

00:08:12 So I started posting my articles in the form of notebooks on Kaggle as well, which started

00:08:17 getting a lot of views and really nice comments from the audience.

00:08:20 The community on Kaggle is even more amazing than on Medium.

00:08:24 For an article that gets like read by thousands of people on Medium, I usually receive like

00:08:29 one or two comments.

00:08:30 But if you write, if you post the same article as a notebook on Kaggle, like the audience loves

00:08:35 it because Kaggle is mostly suited for this kind of tutorials.

00:08:40 And I usually receive like 30 or 40 comments.

00:08:42 And that's really amazing as a writer to be part of that kind of community.

00:08:46 Yeah.

00:08:47 That's really amazing.

00:08:48 I had no idea.

00:08:48 I didn't realize you could post on Kaggle.

00:08:50 Yeah.

00:08:51 No.

00:08:51 You kind of post your solutions and then have a conversation around them sort of, right?

00:08:55 Yes.

00:08:55 Yes.

00:08:55 Yes.

00:08:56 Okay.

00:08:56 Awesome.

00:08:57 People want to get started with Kaggle.

00:08:58 What do they need to do?

00:08:59 Like maybe before we drop this topic, if people haven't done stuff with Kaggle yet, but they

00:09:03 maybe want to use it to learn.

00:09:04 What's your advice there?

00:09:05 Yeah.

00:09:06 I just, right after you create an account, they have a whole suite of courses, free courses

00:09:12 you can take.

00:09:13 I think those are the, those are very best, very good starting points for any beginner.

00:09:19 And also they have like two or three beginner level competitions.

00:09:23 So you don't get intimidated by those grandmasters or masters.

00:09:27 They're just a simple datasets you can work with and you just have to submit your predictions

00:09:33 and just get a score and nothing too complex.

00:09:37 And that's really the amazing part of Kaggle.

00:09:40 That's why those three competitions I have, I think they have like 100,000 people competing

00:09:46 at any single time in, in any time.

00:09:49 That's wild.

00:09:50 One of the challenges when you're learning is finding a structured problem to approach,

00:09:55 right?

00:09:56 Maybe in the web world, people try to build things that are too ambitious.

00:10:00 They're like, oh, I want to build Airbnb.

00:10:02 You're like, whoa, whoa, whoa, whoa.

00:10:03 You don't really hardly understand CSS.

00:10:05 Let's take it down a notch and let's go slow.

00:10:08 And we'll get a right side problem for you to address.

00:10:10 Data science has the same problem, but I think it has another aspect, which is, and you need

00:10:14 the data to start from, right?

00:10:17 Yeah.

00:10:17 And I feel like Kaggle helps in bringing that kind of stuff over.

00:10:22 Yeah.

00:10:22 Yeah.

00:10:23 Kaggle like has an amazing list of datasets.

00:10:26 I almost always use Kaggle datasets for my, for my articles because most of them are digestible

00:10:33 and small enough for people to get an advantage of.

00:10:35 Awesome.

00:10:36 A question from the audience from Brandon Bennett asks, are Kaggle competitions, just machine

00:10:42 learning and artificial intelligence related?

00:10:44 Are there other types?

00:10:45 Yeah.

00:10:45 Kaggle competitions are only AI or data science related.

00:10:49 Yeah.

00:10:49 Okay.

00:10:50 So for example, the latest launched on Kaggle, I think is about finding the cuteness quotient

00:10:57 of pets.

00:10:58 It was, yeah, you just take in like thousands of images and you process them with Python or

00:11:05 R and the neural network learns the structure and learns the cuteness quotient and just spits

00:11:12 out a new quotient for any new image you get.

00:11:15 That's amazing.

00:11:16 So it used to be, here's a machine learning model that can answer, is it a cat or a dog?

00:11:21 And now it's giving you a cuteness score.

00:11:23 Yeah.

00:11:24 Yeah.

00:11:24 I can definitely see my daughter getting into data science with this one.

00:11:27 She's all about pets and cats and dogs.

00:11:30 And I personally want to put a vote out there for the golden cocker, the golden retriever mixed

00:11:37 with the cocker spaniel.

00:11:38 Boy, those things are cute.

00:11:39 Okay.

00:11:40 So that's Kaggle.

00:11:41 Sounds really great for learning.

00:11:43 Yeah.

00:11:43 And I suspect knowing something about pandas will pay off.

00:11:47 Oh, of course.

00:11:48 Right?

00:11:49 Like it's such a foundational aspect.

00:11:52 Yeah.

00:11:52 Pandas are used extensively.

00:11:55 It is.

00:11:56 And I feel like pandas is one of those things that you could learn it really quickly.

00:12:00 You could learn to do stuff with pandas in a day.

00:12:03 Yeah.

00:12:04 Yeah.

00:12:05 But then in a year, you could still be learning stuff about pandas.

00:12:08 If you use it every day for a year, you know what I mean?

00:12:10 Yeah.

00:12:11 Most data science libraries are just very vast.

00:12:14 There are a lot of functionalities.

00:12:16 And most of the time, like you can get around by learning like 10 or 15% of all those functions.

00:12:22 But when you really need to get something like really rare edge cases or unique cases,

00:12:28 you really need to know some of those rare functions that are buried in the documentation

00:12:34 just so that you don't have to reinvent the wheel.

00:12:37 Yeah.

00:12:37 In Python, we speak about Pythonic code.

00:12:41 There's code that we could write that might be code that runs, but it looks like it comes

00:12:46 from Java or it looks like it comes from C and somebody just got it working.

00:12:50 And I suspect you have the same thing in data science and around pandas.

00:12:54 It's like, yeah, you technically could do this with pandas, but why don't you just call

00:12:58 this function?

00:12:59 And probably the answer is, well, I didn't know that function existed.

00:13:02 Of course, I would have called it if I had known to do it, but I just didn't know, right?

00:13:06 I'm new.

00:13:06 Yeah.

00:13:07 So hopefully we can shine a light on some of those things that you can do.

00:13:10 I mean, for example, not that we'll necessarily cover it in your article, but if you're doing

00:13:15 a for loop with a data frame, you're probably doing it wrong, right?

00:13:18 The golden rule is to never use loops, like teach loops completely.

00:13:23 Yeah.

00:13:23 That's pretty interesting.

00:13:24 It definitely takes a different way of thinking, sort of set-based processing and passing in

00:13:30 expressions and lambdas to various places and whatnot.

00:13:32 Yeah.

00:13:33 Maps and whatnot.

00:13:34 Okay.

00:13:34 We're going to talk about some of those.

00:13:35 Let's dive in.

00:13:36 First of all, how did you pick these 25?

00:13:39 Were these just 25 that you saw people use?

00:13:41 They were interesting.

00:13:42 You're like, I didn't even know that existed.

00:13:43 Or what was your philosophy here?

00:13:45 For this kind of articles, I usually go to the API reference of the documentation.

00:13:49 It just lists every single class and functionality of some library, the API reference.

00:13:54 And I just read them one by one.

00:13:56 I decide which one of those is going to be beneficial to me and possibly for my audience.

00:14:02 And I just pick them out.

00:14:04 Yeah.

00:14:04 Come by one.

00:14:04 Yeah.

00:14:05 Yeah.

00:14:05 That's really cool.

00:14:05 I love to discover these types of things.

00:14:07 So why don't we, you kick it off with number one?

00:14:10 Yeah.

00:14:11 What's number one here?

00:14:12 The first one is Excel writer.

00:14:13 It's a class for writing to Excel sheets.

00:14:18 So if you have multiple data frames, you can write to Excel sheets as separate tabs with

00:14:24 separate sheets.

00:14:24 The pandas has usually, the data frames have this two Excel function, but you give it the

00:14:31 Excel writer instance, it's going to write it to a separate sheet.

00:14:35 It's going to enable you to write to separate sheets.

00:14:37 Yeah.

00:14:38 This is super neat.

00:14:38 So in your example here, which of course we'll link to the article and people can check

00:14:43 out, they all have a bunch of code samples under each one of these.

00:14:46 You've got two data frames.

00:14:48 Yeah.

00:14:48 And you want to put them into some kind of Excel spreadsheet.

00:14:52 So you create one of these writers.

00:14:54 This is the function you're talking about.

00:14:56 And then you go to the data frame, you say to Excel and you give it the writer and a sheet

00:14:59 name and you give it, you can do that for each data frame and give it different sheet

00:15:03 names and it just piles up along the bottom.

00:15:05 Right.

00:15:05 It's really neat.

00:15:06 It's ridiculously simple, right?

00:15:08 It's like given the data frames, it's three lines of code to create an Excel file and

00:15:12 write it.

00:15:12 Yeah.

00:15:13 Yeah.

00:15:13 If you know this, you'd have to create two separate Excel files and just add them together

00:15:18 later manually, which is not programmatic.

00:15:20 Right.

00:15:21 Or maybe you say you don't know that you can write to Excel.

00:15:24 I mean, I'm pretty sure I could write to CSV.

00:15:26 Ah, yeah.

00:15:27 And there's multiple levels, right?

00:15:28 Like one level is like, I'm going to write it line by line, putting the commas in there

00:15:32 myself.

00:15:33 Another one could be the write CSV, right?

00:15:35 Read CSV, write CSV.

00:15:36 But this one is like more structured, right?

00:15:39 And then you could possibly use some of the more advanced tooling to do things like stylize

00:15:44 or highlight aspects of it or whatever, right?

00:15:47 Like Py Open Excel or something like that.

00:15:49 Now for this one, you talk about, all right.

00:15:52 It says that you need to have the right supporting libraries there, right?

00:15:57 You, for example, have to have different libraries.

00:16:00 I can't remember which one it was.

00:16:01 I think it was Py.

00:16:02 Py open by Excel.

00:16:03 Open by Excel.

00:16:04 Yeah, that's it right here.

00:16:05 I knew it was in here.

00:16:06 Yeah.

00:16:06 Open Py Excel.

00:16:07 If you want to work with XLS files.

00:16:10 And there's other ones as well, right?

00:16:12 Otherwise, you'll get an error.

00:16:13 Right.

00:16:14 So basically, Pandas delegates to this library, which actually understands Excel and writes

00:16:20 to it.

00:16:20 Yeah.

00:16:21 There's another one where it talks about using FSSpec.

00:16:25 And this caught my attention as like, oh, wow, this is way more flexible.

00:16:29 Because I'm not sure people are aware of what FSSpec is.

00:16:33 Are you familiar with FSSpec?

00:16:34 No, no.

00:16:35 So FSSpec is this library that allows you to treat different destinations as Python file systems.

00:16:43 Like, you know, with open some file name.

00:16:45 Instead of file name, you can do all sorts of stuff.

00:16:48 So let me see if I can find some of the documentation here of the things that it can go to.

00:16:54 Yeah.

00:16:54 Integrates with a bunch of different places, but it goes to places like S3 storage and

00:17:01 FTP and database and zip files and all of these types of crazy things.

00:17:07 And it even does caching, I guess, is right?

00:17:10 So this Excel writer, while it already sounds really interesting because it writes to Excel,

00:17:15 like destination of these Excel files, like this could be an Excel file in a database or

00:17:20 something with basically hardly any changes to the code.

00:17:23 Yes.

00:17:24 Yeah, that's super cool.

00:17:25 So good one to kick it off there.

00:17:27 A lot going on.

00:17:28 This portion of Talk Python To Me is brought to you by Shortcut, formerly known as clubhouse.io.

00:17:35 Happy with your project management tool?

00:17:37 Most tools are either too simple for a growing engineering team to manage everything,

00:17:41 or way too complex for anyone to want to use them without constant prodding.

00:17:45 Shortcut is different though, because it's worse.

00:17:48 No, wait, no, I mean, it's better.

00:17:49 Shortcut is project management built specifically for software teams.

00:17:53 It's fast, intuitive, flexible, powerful, and many other nice positive adjectives.

00:17:58 Key features include team-based workflows.

00:18:04 Or customize them to match the way they work.

00:18:09 type version control integration.

00:18:10 Type version control integration.

00:18:10 Type version control integration.

00:18:19 Whether you use GitHub, GitLab, or Bitbucket, Clubhouse ties directly into them, so you can update progress from the command line.

00:18:26 Keyboard friendly interface.

00:18:26 Keyboard friendly interface.

00:18:28 The rest of Shortcut is just as friendly as their power bar, allowing you to do virtually anything without touching your mouse.

00:18:34 Throw that thing in the trash.

00:18:35 Iteration planning.

00:18:36 Set weekly priorities.

00:18:38 Set weekly priorities and let Shortcut run the schedule for you with accompanying burndown charts and other reporting.

00:18:44 Give it a try over at talk python.

00:18:47 Talk python dot fm slash shortcut.

00:18:49 Again, that's talk python dot fm slash shortcut.

00:18:53 Choose shortcut because you shouldn't have to project manage your project management.

00:18:57 The next one is pipe, right?

00:19:01 Yeah.

00:19:02 The image also.

00:19:03 Yeah.

00:19:04 There's like a lumberjack looking dude smoking pipe there.

00:19:07 That's very cool.

00:19:08 Yeah.

00:19:08 Yes.

00:19:08 Tell us about pipe.

00:19:09 When you do data analysis, like most of the time, the data you'll be dealing with will be like not clean.

00:19:16 You have to perform some operations.

00:19:18 And pipe really offers a way to just package those all those operations into a single line of code or into a single code of block of code.

00:19:28 It's kind of like it's going to like SQL and pipelines where you just have to run as only single line of code and just perform several operations at the same time.

00:19:37 It's really just a neat way to do data cleaning.

00:19:40 Right.

00:19:40 And it's what's called a fluent API.

00:19:43 So if I call data frame dot pipe, what comes back is another data frame and then I could call dot pipe on it again and then dot pipe and dot pipe and chain those together.

00:19:52 Yes.

00:19:52 Applying different operations and transformations.

00:19:55 It's almost like a map reduce or aggregation framework type of thing here.

00:20:00 Right.

00:20:00 It's pretty flexible.

00:20:01 I would think it's just like and it's, you know, its entirety like the amazing one of the amazing features of pandas like consistency always.

00:20:08 Yeah, I really like it.

00:20:10 It looks super neat.

00:20:11 So you need to do transformations on a data frame with custom functions and get answers out.

00:20:17 Yeah.

00:20:18 Another thing that you pointed out here is that as part of this, you could apply it to the whole data frame or you could pass a set of columns.

00:20:26 Yes.

00:20:26 As part of it.

00:20:27 So as what you're piping across, what does that do?

00:20:30 That reduces the result to just those.

00:20:32 If you pass in three things, just those three columns.

00:20:34 And then these two functions remove outliers and go categoricals are our function that accept arguments.

00:20:41 And when you pass it to pipe, we just have to pass the function name.

00:20:45 Got it.

00:20:45 Which means you can pass the arguments.

00:20:47 So to pass the arguments, actually, you just have to provide them after the comma.

00:20:53 So this remove outliers function just accepts one argument as a list and it performs like outlier removal and just returns the whole data frame.

00:21:02 I see.

00:21:03 So you can pass like your function might take the data frame, but it might also take additional information.

00:21:07 Like I want to exclude things that are over a hundred dollars and just throw them away.

00:21:11 Well, you got to pass that hundred in because it needs to know a hundred versus some other cutoff value.

00:21:16 Right.

00:21:16 Got it.

00:21:17 Yes.

00:21:17 Yes.

00:21:17 Okay.

00:21:17 Cool.

00:21:18 And you say it resembles scikit-learn pipeline.

00:21:21 Yeah, that's pretty cool.

00:21:23 All right.

00:21:24 We're up to number three factorize.

00:21:27 Yeah.

00:21:28 Tell us about this one.

00:21:29 In machine learning as algorithms only accept numerical data and the most real world data sets contain categoricals, which means like there are like a class one, class two or class three.

00:21:41 And you have to encode them like a two numeric, like zero, one, two, three, or using like one hundred encoder or labeling code in scikit-learn.

00:21:49 But you can do that in pandas as well.

00:21:51 You just have to pass the column to factorize and it just encodes them with numericals for each class.

00:21:58 I see.

00:21:59 So let me see if I can give an audio friendly example for listeners here.

00:22:03 Yeah.

00:22:03 If we've got something that says a data frame where one of the pieces is what the weather was like sunny, rainy, sun, rain, snow, clouds, something like that.

00:22:16 You can't feed sun to the machine learning model.

00:22:20 You got to give it a number, right?

00:22:21 Yes.

00:22:21 So this will convert that to like zero for sun and everywhere sun appeared, you would now have a zero.

00:22:26 One for rain, everywhere there was a rain and so on.

00:22:30 So it just does that, figures out how many different categories there are and then gives them a number that can be sent off to machine learning, right?

00:22:36 You explained that.

00:22:37 Awesome.

00:22:39 You see, I'm learning, right?

00:22:40 I'm just following along with you here.

00:22:42 Awesome.

00:22:42 Okay.

00:22:43 That's a really cool one.

00:22:44 This next one seems a little bit crazy, but it looks very useful.

00:22:48 Explode, right?

00:22:49 What is explode?

00:22:50 Survey data.

00:22:51 Surveys usually contain questions that are multiple choice.

00:22:55 You can just pick a lot of like more than one answer to one question and that's recorded as one answer.

00:23:01 So you're just going to end up with this kind of lists in a single cell of the table.

00:23:07 Like a question.

00:23:08 Oh, if you have a question one and the user just picks the answers ABC, it's going to end up ABC is going to end up as a list in a single cell of a table.

00:23:18 Right.

00:23:18 So for an example here, you have a series that has one and then six and then seven.

00:23:23 And then the fourth element is a list of three other numbers.

00:23:26 And you're like, wait a minute, those are not supposed to just be multidimensional.

00:23:30 I want a straight series, right?

00:23:31 You want a straight series.

00:23:32 And when you call explode on this series, it's going to just expand the series vertically and just going to fill up.

00:23:40 It just takes the elements of the single cell lists and just expands them vertically.

00:23:46 Yeah.

00:23:47 And these are the types of things that you were talking about with loops, right?

00:23:50 It would be easy to go through and say, I'm going to build up a new data frame.

00:23:54 And if I see a list instead of a number, I'm going to just start appending those from the list with an inner loop and then we'll carry on.

00:23:59 Right.

00:23:59 And here you've literally done it in one line.

00:24:01 Yeah.

00:24:02 Yeah.

00:24:02 This would be crazy complex if you did it like manually.

00:24:04 Right.

00:24:06 And honestly, slower, right?

00:24:07 Because a lot of this is probably implemented in C, whereas you would be doing it at the Python layer.

00:24:12 It's going to be very slow.

00:24:13 All right.

00:24:13 Another question from Brandon out there.

00:24:15 Glad he's here in the live stream.

00:24:16 How would I apply Explode to the entire data frame?

00:24:20 I'm guessing he's thinking about maybe if you had multiple columns and they each potentially had this.

00:24:26 I don't think that's possible.

00:24:27 Yeah.

00:24:27 I don't think Pandas allows that.

00:24:29 Yeah.

00:24:29 Okay.

00:24:29 So it's got to be on a series, not on a data frame.

00:24:32 Right.

00:24:33 Got it.

00:24:33 Okay.

00:24:34 Cool.

00:24:34 So these are all fun names that stand out.

00:24:37 The next one.

00:24:38 You're a fun name.

00:24:39 Yeah.

00:24:39 Yeah.

00:24:40 And you pick some cool pictures, right?

00:24:41 Yeah.

00:24:42 Yeah.

00:24:42 All right.

00:24:42 So what's the next one?

00:24:43 Squeeze.

00:24:44 Squeeze.

00:24:44 Squeeze.

00:24:44 As you can see, there are some conditional operators who return real data frames, even if it's a single cell.

00:24:53 As you can see from the subset set, we're just asking the diamonds data frame to return all diamonds that are priced below $1.

00:25:02 And it just returns a single result, which is 326.

00:25:08 But it's returned as a data frame, which is not comfortable to work with, like a single cell data frame.

00:25:13 Right.

00:25:13 Because Panda doesn't know ahead of time that a .luck call is going to result in a single item.

00:25:18 This happens a lot in databases, too.

00:25:20 You do a query, and the result is actually a single thing.

00:25:23 But the framework has no way to know that the data is structured in a way that's unique or that's a one thing.

00:25:29 And I suspect that's common here with data frames as well.

00:25:32 You're structured.

00:25:33 Like, I know this is going to give me the one answer.

00:25:35 Yeah.

00:25:36 But it just returns the whole table.

00:25:38 Yeah, yeah, you're like, well, now I got to, like, dig in and give me the first row, first column.

00:25:42 Yeah, okay.

00:25:43 So squeeze helps fix this?

00:25:44 You just call this, like, oh, squeeze on a single cell data frame or series, and just it removes all the dimensionality and just returns the number.

00:25:53 Interesting.

00:25:53 That's cool.

00:25:53 What happens if I call it on one that's got more than one item?

00:25:57 Do you know?

00:25:58 Does it just give you the first, or does it freak out and let you know?

00:26:01 I never tried that.

00:26:02 Yeah, I never tried that.

00:26:04 Yeah, don't do that, right?

00:26:06 It's like, maybe if you just actually want the first answer, maybe it's okay, but it also might give you an exception.

00:26:11 I don't know.

00:26:12 I'll be fine to try it now.

00:26:13 Yeah, exactly.

00:26:14 Cool.

00:26:14 So the next one has to do with finding things in a range, right?

00:26:18 Yeah, between, yeah.

00:26:20 Yeah, it's like, just the name suggests, like, you want to take all the rows that are in between some range.

00:26:27 For example, here in the code example, I'm choosing all diamonds that are priced between $3,500 and $3,700.

00:26:35 Nice.

00:26:36 So, of course, you could do this probably as an expression.

00:26:39 You could definitely do this as a loop.

00:26:42 But both of those are slower, I'm sure, because they're not implemented internally, right?

00:26:47 Yeah, less elegant.

00:26:48 This one is better and faster and shorter.

00:26:51 Yeah, and one of the things, the third parameter you can pass here to between, in addition to, like, the lower bound and upper bound, is whether or not it includes the endpoints, right?

00:27:00 This one is inclusive is neither.

00:27:03 So it's like open set.

00:27:05 Nice.

00:27:06 Another thing that I've seen here, which is not one of your 25, but looks nice.

00:27:10 I'm used to visualizing, quickly visualizing a data frame when I get it back with head or tail.

00:27:17 And I want to know, like, okay, kind of what did I get back here?

00:27:19 Show me the front.

00:27:20 That'll be good.

00:27:21 Do ahead.

00:27:21 Or let's go to the end and see what happened at the end.

00:27:23 But here you have .sample.

00:27:25 That's interesting.

00:27:25 I use it often because some data sets have, like, ordering, for example, time series data sets.

00:27:31 And the first few rows might be not too representative of the whole data frame.

00:27:36 So I just call sample with, like, five or ten rows.

00:27:40 And that randomly samples the data set.

00:27:43 And usually sometimes that represents the data set better than head or tail.

00:27:49 Right, exactly.

00:27:50 And so it just kind of randomly picks some stuff throughout the data set to show you what's going on, right?

00:27:55 For large data sets, that's really handy.

00:27:57 Nice to know.

00:27:58 Yeah.

00:27:58 So the next one has to do with, I'm guessing, like, when you're doing matrix multiplication and vectors and, like, truly doing math.

00:28:07 Most of the time I would expect this to show up.

00:28:09 Yeah.

00:28:10 Most of the time, yes.

00:28:11 Yeah.

00:28:11 Transpose.

00:28:12 Yeah.

00:28:12 Yeah.

00:28:13 It stands for transpose.

00:28:14 I usually, you usually don't do math or matrix multiplication in Pandas.

00:28:19 You will do it in NumPy.

00:28:21 But this one, I use it mostly for when you, on the result of describe.

00:28:25 You see here, describe returns.

00:28:28 The axis inverted.

00:28:30 So the five numbers number is given as rows.

00:28:33 And that's really a problem when you have multiple columns because the data set starts to expand horizontally, which makes you scroll to the right, which you don't want.

00:28:45 So when you do describe, you get things like given a data set, it'll say, here's the count of this index, the mean of this index, or this value of a column, standard deviation, and so on.

00:28:56 And the number of options there is unbounded.

00:28:58 But the fact that it goes count, mean, standard deviation, minimum, and then a few more things, that's fixed.

00:29:03 And that fits pretty well.

00:29:04 So you're saying if you transpose or flip the rows and columns so that you make it go vertical instead of across, that's an easier way to look at it.

00:29:12 Yeah, yeah.

00:29:12 I agree.

00:29:13 And it's as easy as saying .t.

00:29:15 So it's not too hard to do, right?

00:29:17 You might as well.

00:29:17 It's an attribute.

00:29:18 Yeah.

00:29:19 Cool.

00:29:19 All right.

00:29:20 That's a really good one.

00:29:22 So you're saying if I'm going to do like some kind of matrix multiplication stuff, I should not do it in Pandas.

00:29:27 I should just stick to NumPy.

00:29:28 Yeah.

00:29:29 NumPy is like purely for mathematical purposes.

00:29:31 And it's much faster than Pandas.

00:29:34 I suspect that NumPy has a good transpose as well.

00:29:36 But yeah, there.

00:29:37 It has the same attribute.

00:29:39 Yeah.

00:29:39 There's a lot of synergy between those two libraries.

00:29:41 So the next one has to do with styling things and how they look, right?

00:29:45 One of the things that's cool about Pandas is it mixes well with Jupyter Notebooks.

00:29:50 And Jupyter Notebooks have a nice sort of explore the data.

00:29:53 And let's see what's going on.

00:29:54 Let me just look at it, right?

00:29:55 So this styler thing, the style attribute helps you with that, right?

00:29:59 Yeah.

00:30:00 Here, like it takes advantage of that.

00:30:02 The fact that Jupyter uses HTML and CSS under the hood.

00:30:06 So you can take advantage of that and use some HTML and CSS knowledge to style your data frame based on some like hyphonic loops or conditionals.

00:30:17 Here, for example, after you take the transports or the describe, you can just highlight the maximums of each row or column using the highlight column max function.

00:30:28 Yeah.

00:30:29 The Pandas offers a lot of functions after the style attribute.

00:30:32 You can use the built-in functions or you can come up with some custom logic to style your data frame using HTML and CSS.

00:30:39 Okay.

00:30:40 Yeah, this is great.

00:30:41 So you can say, for example, here dot style dot highlight max.

00:30:46 And then you give it some CSS values like colors, dark red or something like that, right?

00:30:50 You just don't have to look at the row numbers.

00:30:53 It just shows you the most important metrics or the ones that you want.

00:30:57 It's really useful when you have like multiple columns.

00:31:00 You just don't want to have to.

00:31:01 You just don't want to look at all those crazy numbers and you just use some.

00:31:06 Yeah, like a real reasonable or maybe straightforward thing you might start out by doing.

00:31:11 So, well, let me just sort it.

00:31:13 We'll sort it so the highest one's at the top.

00:31:15 But in this example, you've got multiple columns and the max of one column is in one value, but it's a different row for a different attribute of it, right?

00:31:24 So sorting it is going to do nothing except for like if you come up with a whole bunch of variations and try to look at it and a little bit of color, a little bit of picture goes a long ways.

00:31:33 Yeah, yeah.

00:31:34 Visual.

00:31:34 Yeah, absolutely.

00:31:35 This portion of Talk Python To Me is sponsored by Linode.

00:31:40 Cut your cloud bills in half with Linode's Linux virtual machines.

00:31:44 Develop, deploy and scale your modern applications faster and easier.

00:31:49 Whether you're developing a personal project or managing larger workloads, you deserve simple, affordable and accessible cloud computing solutions.

00:31:56 Get started on Linode today with $100 in free credit for listeners of Talk Python.

00:32:01 You can find all the details over at talkpython.fm/Linode.

00:32:05 Linode has data centers around the world with the same simple and consistent pricing, regardless of location.

00:32:12 Choose the data center that's nearest to you.

00:32:15 You also receive 24, 7, 365 human support with no tiers or handoffs, regardless of your plan size.

00:32:23 Imagine that real human support for everyone.

00:32:25 You can choose shared or dedicated compute instances, or you can use your $100 in credit on S3 compatible object storage, managed Kubernetes clusters and more.

00:32:36 If it runs on Linux, it runs on Linode.

00:32:38 Visit talkpython.fm and click the create free account button to get started.

00:32:43 You can also find the link right in your podcast player show notes.

00:32:46 Thank you to Linode for supporting Talk Python.

00:32:49 Yeah, the second example you have here in your article is a little more nuanced.

00:32:55 This looks great.

00:32:55 Tell us about that.

00:32:56 This one is like background gradient.

00:32:58 So it just colors each cell of the column based on its magnitude.

00:33:04 It's kind of like a continuous palette.

00:33:08 It just shows where the maximum or the minimums are and just how they compare to each other.

00:33:15 Yeah, it's almost like if you could do a heat map in an Excel table, you know, by making the cells different colors.

00:33:20 You can pass in a color map and all sorts of stuff to control how that looks.

00:33:24 Yeah.

00:33:24 Yeah, cool.

00:33:25 I like it.

00:33:25 This is great.

00:33:26 You know, it's one of these things where, again, one line of code and you can dramatically improve the presentation value or the informational value of what you're looking at.

00:33:34 Right.

00:33:35 Nice.

00:33:35 All right.

00:33:36 I feel like that's similar to your number nine.

00:33:39 Yeah.

00:33:39 This one is Pandas options.

00:33:41 Like it's kind of settings of your phone.

00:33:43 You just set them globally and it applies to all the data frames, the series and all the functions that you are going to be using inside the project or inside the session of Jupyter Notebook.

00:33:53 So if you want to have some sort of number of columns that are shown or some kind of color or something like that, you can just set that up at the beginning.

00:34:01 Yeah.

00:34:01 You just don't have to call them every single time or change them every single time.

00:34:05 It's just a shorthand of way of doing things like setting global settings.

00:34:11 Yeah.

00:34:11 You could probably even do something like have a little JSON file that describes the look and feel of what you're doing.

00:34:17 Just your first line, just load it up and set it and then, you know, go from there.

00:34:21 Something to that effect, right?

00:34:22 Yeah.

00:34:23 Yeah.

00:34:23 So you don't have to completely fill the first few lines of your notebook with like setup code.

00:34:28 Yeah.

00:34:28 For example, one of those examples is like a display max rows.

00:34:32 If you set it to five and you just call the data frame, it's going to only show the first five rows.

00:34:38 So you don't have to call .hat every time.

00:34:40 Oh, that's interesting.

00:34:41 Yeah.

00:34:42 Because of course, if there's enough rows, it won't print the whole thing out, right?

00:34:45 Probably.

00:34:46 Yeah.

00:34:46 You don't want to print 10 million rows and completely lock up the system.

00:34:49 Yeah.

00:34:50 Yeah.

00:34:50 Yeah.

00:34:50 Yeah.

00:34:50 That's going to.

00:34:51 Cool.

00:34:52 Oh, and another one that's kind of nice is display precision.

00:34:55 And if you set that, you won't see the, you know, 1.27e to the five or whatever, right?

00:35:01 You can.

00:35:02 It's really annoying when you're working with like math functions.

00:35:06 It just keeps giving in like scientific notation when you just want to like see the first or four or five decimal places.

00:35:15 Yeah.

00:35:15 Scientific notation is great when you're dealing with huge numbers or tremendously small numbers, right?

00:35:20 Like how many meters across is an atom?

00:35:23 Okay.

00:35:23 So you're going to need an E to something.

00:35:25 But for human beings often, you know, you want to just look at the number and go, yeah, that's a million, not like, you know, 1.2e to the six or seven, whatever.

00:35:33 It's going to be really annoying.

00:35:34 That's cool.

00:35:35 And this is just one of those options you can set up and it just globally applies to that notebook.

00:35:39 So another thing that's interesting about pandas is the columns have types usually, but not always.

00:35:46 It's one of those like beginning level things that you will encounter, but it can get really annoying if the data types are incorrect for your column.

00:35:55 The most important one is the object data type.

00:35:58 Right.

00:35:58 That's like, I don't really know.

00:36:00 So we're just going to store it.

00:36:02 Yeah.

00:36:02 Yeah.

00:36:03 I'm just going to put it inside of an object and objects are like object data type is the worst one.

00:36:10 It also limits the functionality of pandas and it's also the most memory consuming.

00:36:14 Right.

00:36:15 So the next function, what number are we on here?

00:36:18 Number 10.

00:36:18 10, yes.

00:36:19 And the hit list is convert underscore D types as in convert data types.

00:36:25 When you call it on the whole data frame, it just, it tries to infer the correct data type for each column.

00:36:32 If it's a float or integer or string like that.

00:36:36 So your example, you're reading a CSV file and some of the columns are detected correctly like floats, but others get this object.

00:36:43 But after calling convert D types, it's like, you know what?

00:36:45 No, those are strings.

00:36:46 But it can't handle the date times because there are so many date time formats and pandas can't possibly know all of them.

00:36:54 Why are date times so hard?

00:36:55 They really shouldn't be, but they really are.

00:36:58 It's crazy.

00:36:58 And then you throw in time zones and you'll forget it.

00:37:01 Okay.

00:37:01 And throw in daylight savings and all these other things.

00:37:04 Oh, yeah.

00:37:05 That's crazy.

00:37:06 Yeah.

00:37:07 Daylight saving is crazy.

00:37:08 Yeah.

00:37:08 I suspect some of the Kaggle stuff.

00:37:10 Part of the challenge is like normalize these dates because who knows or something along those lines.

00:37:15 Time zones are like total mess.

00:37:18 Yeah, for sure.

00:37:18 So related to converting the data types is to select them.

00:37:24 Yeah.

00:37:24 Which is a way to filter what's in there.

00:37:28 Like you can filter by column or rows or even a condition.

00:37:31 But this is saying like, I only want the strings or only want the numbers, right?

00:37:36 While doing machine learning, you have to apply certain pre-processing functions to only a subsets of the data.

00:37:43 Like only on categoricals or only numerics.

00:37:46 So this function will become very handy.

00:37:49 You just pass the data type using NumPy.

00:37:54 And it just gives all the subset of the data frame with that data type.

00:37:58 Nice.

00:37:59 So you would say like data frame dot select data types and then include equals np number.

00:38:04 And now instantly the resulting data frame is a subset that only has numbers, right?

00:38:09 Yes.

00:38:10 That's cool.

00:38:10 And then also you point out that you can do the reverse.

00:38:12 Just like give you just the other, like just the informational bits, like categories and stuff or rating by saying exclude.

00:38:20 Yeah.

00:38:21 Very nice.

00:38:21 Okay.

00:38:22 Well, we just missed it with Halloween here.

00:38:24 Yeah.

00:38:25 Yeah.

00:38:26 Mask.

00:38:26 But mask.

00:38:27 Yeah.

00:38:28 Cool.

00:38:28 Like a mask here.

00:38:30 But mask is number 12.

00:38:33 That's about it.

00:38:34 It's a conditional on, you can use it on, on series or data frames and it just returns the subset of the data where some condition is true.

00:38:44 Yeah.

00:38:45 Okay.

00:38:45 So, yeah.

00:38:46 And this example here, you've got a bunch of ages.

00:38:49 And I want to subset them using B2.

00:38:51 I want to take all those rows that are beyond 60 or below 50 and convert those values to NAND.

00:38:59 Okay.

00:38:59 So, this is like an in-place update or I guess it replaces, creates another one that is like as if you updated it.

00:39:06 And it finds all the stuff that's, I guess, outside of your range and then applies this other value, right?

00:39:12 Like if it's stuff that's outside of this range, in this case, you're going to set it to not a number, but it could be set to zero or max or anything.

00:39:19 Uh-huh.

00:39:20 Yeah.

00:39:20 Cool.

00:39:21 A very good one.

00:39:22 Similar, I guess, is min and max.

00:39:25 And then some of these, as we get a little farther down your recommendations, I like them.

00:39:28 They're not just, oh, here, you can apply this function, but apply it in this scenario or this context to get an interesting outcome, right?

00:39:36 So, that's what number 13 is like.

00:39:37 Min and max along columns axis.

00:39:40 Usually, when you call min or max on a column, it just returns the minimum or maximum of that column.

00:39:47 But sometimes you want it to row-wise, like it just treats rows as columns and it gives min and max across the rows.

00:39:56 That's usually useful.

00:39:58 A handy way of doing something that would take a lot of code if you're done manually.

00:40:02 Another one of these tricks that are techniques that lets you avoid looping, right?

00:40:06 Here I show a good example of like comparing four different libraries on five datasets.

00:40:11 You want the best performance on each dataset.

00:40:14 So, you have to find the best score across the rows.

00:40:18 Exactly.

00:40:18 So, the columns are the different libraries like XGBoost, CatBoost, Scikit-Learn, and so on, being applied to the same dataset.

00:40:25 And you want to just go for row one, what one did the best?

00:40:28 Row two, what one did the best?

00:40:29 Yeah.

00:40:30 Yeah.

00:40:30 Very nice.

00:40:31 It takes a lot of code if done manually.

00:40:32 Yeah.

00:40:33 Cool.

00:40:33 Number 14, N largest and N smallest.

00:40:37 Yeah.

00:40:38 We're talking about those max or minimums.

00:40:41 So, N largest, when you pass a number and a column name, it just returns the data frame that contains the smallest or largest N rows of that column.

00:40:53 Nice.

00:40:53 So, if I were to call min or max, that would give me the smallest or the largest one, respectively, right?

00:40:59 Yes.

00:40:59 But a really interesting or common question you might have is like, what are the top 10 selling products this month, right?

00:41:07 Yeah.

00:41:07 And this lets you just say N largest 10, and then you pick the column on which to judge it.

00:41:12 Here you have price, right?

00:41:13 Five most expensive diamonds in the diamonds data set.

00:41:16 Yeah.

00:41:16 Again, one of these things that, you know, no more looping or any of that stuff.

00:41:20 No more if statements.

00:41:21 Just call it, right?

00:41:22 This one is like the five cheapest, most cheapest diamonds.

00:41:25 Yeah.

00:41:25 And so, N smallest and N largest.

00:41:27 Fantastic.

00:41:28 Also, sometimes when you're asking for a minimum or maximum thing, you don't actually want the minimum or maximum.

00:41:34 You want to know where that is because you're going to get that thing back and say, I need that whole row because I want to learn more information about it, right?

00:41:42 But if you said, well, what's the minimum price?

00:41:44 It's seven.

00:41:44 Like, oh, okay, great.

00:41:46 Now do I need to like loop through until I find that thing that has seven or something like this?

00:41:50 So, you've got a recommendation for that.

00:41:52 Yeah.

00:41:52 The IDX man is IDX min.

00:41:54 This returns the index values of minimum or max.

00:41:58 So that you can look at the row that they are stored at or the column.

00:42:03 Fantastic.

00:42:03 Yeah.

00:42:04 So, here's the row that contains the minimum price.

00:42:07 I love it.

00:42:08 Yeah.

00:42:08 Really nice.

00:42:08 So, so many of these are really easy to apply, right?

00:42:11 Like, it's not a lot of research to learn how to apply ID max, but at the same time, or IDX max, but at the same time, knowing that it exists, now all of a sudden you can use it really easily.

00:42:22 But you probably wouldn't have known to look for it, right?

00:42:24 Yeah.

00:42:25 Yeah.

00:42:25 Cool.

00:42:26 People often talk about differences between beginner developers and expert developers.

00:42:32 And I think a lot of times beginners look at folks like you who have a lot of experience.

00:42:36 They're like, oh, this guy is so incredibly smart and he just has this way of solving these problems.

00:42:40 It's so amazing.

00:42:41 And, you know, to some degree, that's probably true.

00:42:44 But a lot of it is like just building up layers and layers of these like, oh, I know I can use ID max, IDX max.

00:42:51 I know that I can use N largest.

00:42:53 And you just sort of pile them together.

00:42:54 And then like, bam, like the solution becomes easier because you have these little building blocks.

00:42:59 Right.

00:42:59 So it's, I think it's really valuable for people getting into Pandas.

00:43:03 I usually think that the biggest difference between a beginner level and a more experienced programmer is just, is like just how much time they spend on the documentation.

00:43:12 Yeah.

00:43:13 Yeah.

00:43:14 Yeah.

00:43:14 If you read the docs, like if you patiently read the docs, you're just going to become a really good user of that particular tool or library.

00:43:21 I agree.

00:43:21 There's just more, you understand it better.

00:43:24 You know more of what it has to offer.

00:43:26 So it's like, it's less you've got to reinvent.

00:43:29 Yeah.

00:43:29 All right.

00:43:29 I talked about how you have something that may be well known, but then applying it in a scenario.

00:43:34 And this number 16 is value counts with drop in a false.

00:43:39 What's this one about?

00:43:40 When you have a series with like categoricals, you just want to see the proportions or their numbers as a whole in the total series.

00:43:48 And that usually doesn't include the null values.

00:43:51 So you have to call is null and chain it with some so that you get a, you learn the number of NADs in that column.

00:43:59 But you can do it efficiently with value counts with setting, by setting drop in a to false, which includes the proportions of the null values as well.

00:44:09 Yeah.

00:44:09 So it just gives you a, basically a percentage as a ratio here.

00:44:13 It's just a ratio of the number of the different categories that have appeared here.

00:44:18 Right.

00:44:19 So very cool.

00:44:20 And now just not a number is included.

00:44:21 That's great.

00:44:22 Yeah.

00:44:22 Number 17 clip.

00:44:24 This is a good one.

00:44:25 Yeah.

00:44:25 Yeah.

00:44:25 For data that exceeds, I don't know, maybe a range, maybe it's supposed, some instruments supposed to collect zero to a hundred and it's goes crazy and goes outside of a hundred.

00:44:34 Yeah.

00:44:35 For example, we go back to the ages example where I just want to have ages between like 18 or 60, 18 and 60.

00:44:43 And I want to exclude all those values.

00:44:46 And when you call clip with those custom values, it's just going to impose those hard limits on the whole series.

00:44:52 Right.

00:44:52 So it'll replace the ones that are over with the maximum that you said and the ones that are too low, it'll bring them up to the minimum.

00:44:59 Right.

00:44:59 Yeah.

00:44:59 Very cool.

00:45:00 Again, against the whole data set, not looping.

00:45:02 Only at one column at a time.

00:45:04 Yeah.

00:45:05 We talked about how difficult time is, but you do have some recommendations for searching for data that appears at a certain time or in a time range, right?

00:45:14 What's number 18?

00:45:15 This one is like a subsetting of rows of the data frame at some particular time of the day, like any time of the day.

00:45:23 But you like, for example, three o'clock, 9.30, 10.30, or any time that you want.

00:45:29 You're just going to take all those rows and return them using at time.

00:45:33 Yeah, that's super easy, right?

00:45:35 Just pass in at time and you literally specify times, right?

00:45:39 Like 15 colon zero, zero as a string.

00:45:42 Like a real conversation or messaging.

00:45:46 And then the other one, which is also interesting, is between time, right?

00:45:49 Like what happened in the morning, for example?

00:45:52 Like what are those sales that happened in the morning or after midnight or during some particular interval?

00:46:00 This one is really handy to do that.

00:46:03 Yeah.

00:46:03 So super easy.

00:46:04 Just data frame dot between time.

00:46:05 Or is that a series?

00:46:06 No, it doesn't matter.

00:46:08 Okay.

00:46:08 It doesn't matter.

00:46:09 It usually has to be, it has to have a daytime index.

00:46:13 That's it.

00:46:13 Yeah.

00:46:13 Okay.

00:46:14 So then you just pass in strings like 9 colon 45 to 12 colon zero zero.

00:46:19 And you know, that's like late morning or something.

00:46:21 Beautiful.

00:46:21 The next one here has to do with time series.

00:46:24 Number 19, B date range.

00:46:26 Tell us about this.

00:46:27 Well, this one is like, stands for business date range, business date range.

00:46:32 So like fundus internally built in a lot built into calendars.

00:46:37 Like it just, when you want to, how can I say, when you want to index the data frame, you want time series data frame.

00:46:43 You want to include only like working days.

00:46:47 Like you want to exclude all the weekdays, weekends.

00:46:49 Yeah.

00:46:50 You can do that for every single of the year or for every single week of the year, because you can possibly know which days are weekends.

00:46:57 So when you call B date range, it just takes, it just indexes the data frame using only weekdays.

00:47:05 And also it excludes the holidays, I think.

00:47:09 Oh my gosh.

00:47:09 I was just wondering about holidays.

00:47:11 Like there's another wrinkle in there.

00:47:12 Already things like leap year and stuff like that is built into this, I would imagine.

00:47:17 So this is super cool.

00:47:18 Yeah.

00:47:19 This is very important for when you are doing time series forecasting or announcing analysis because like, or working with stocks because stocks are only traded on weekdays and not on holidays.

00:47:31 So it will be very important.

00:47:32 Or even if you do in like traffic analysis, you want to understand accidents that are a result of rush hour, right?

00:47:39 You wouldn't want to look on a weekend.

00:47:40 Yeah.

00:47:41 All right.

00:47:41 The next one has to do with correlation.

00:47:43 Auto core, C-O-R-R.

00:47:46 Yeah.

00:47:46 Auto correlation.

00:47:47 Yeah.

00:47:48 I don't do much with time series.

00:47:49 You're going to have to tell us about this one.

00:47:51 What's going on here?

00:47:51 This is usually how it's the auto correlation of a series or time series tells the predictability of the time series with itself.

00:48:00 It's, do you know about correlation coefficient?

00:48:03 Yeah, exactly.

00:48:03 It tells you how much the model matches the actual data.

00:48:07 Like it's 97% likely that the model will predict the stuff coming up, right?

00:48:12 Could be linear or more complicated, but that's something like that.

00:48:14 Yeah.

00:48:14 Yeah.

00:48:15 The gist of this is that if a time series has a high auto correlation with itself, it means that you can predict it more easily.

00:48:23 Got it.

00:48:23 Yeah.

00:48:23 It's basically how predictable or unpredictable is this thing.

00:48:27 Yeah.

00:48:27 There's a lot of details about autoc relation and it has very many applications in time series.

00:48:34 But the gist is that like it shows you how much predictability it has like at each interval.

00:48:40 Cool.

00:48:40 It sounds very useful if you're doing that kind of stuff.

00:48:42 All right.

00:48:43 Number 21 has NANDs.

00:48:45 It's also an attribute.

00:48:47 You just call it on a series and it returns true or false.

00:48:51 If you have, it returns true if you have at least one missing value in a series.

00:48:56 Yeah.

00:48:56 So there was this quote, I remember who it's attributed to.

00:48:59 Sorry.

00:49:00 That says something to the effect of like data cleanup and data wrangling is not the dirty work.

00:49:06 It is the work of data science, like to get everything ready.

00:49:09 And then you just like hit it with the magic at the end.

00:49:11 Right.

00:49:12 And this feels like that lands right in that realm is like given some data frame or series,

00:49:16 does it have not in numbers or is it all good?

00:49:19 Yeah.

00:49:19 Missing values is like a huge problem in machine learning.

00:49:22 Most scikit-learn algorithms don't accept missing values.

00:49:26 So you either have to drop them or impute them using some techniques.

00:49:31 And this one is very handy to detect those missing values.

00:49:35 Right.

00:49:36 I suspect this is the first test.

00:49:37 Like if it has not in numbers and then we're going to go do stuff.

00:49:41 But if it says false, then you're good to go.

00:49:43 Just roll.

00:49:43 Yeah.

00:49:44 Yeah.

00:49:44 Go with that.

00:49:45 But it usually turns through.

00:49:46 Unfortunately.

00:49:48 Are you familiar with the missing no?

00:49:51 Let me.

00:49:51 Yeah.

00:49:52 Yeah.

00:49:52 This is another thing that I would sort of came to mind is like this whole thing, this

00:49:57 missing no package as in like no numbers.

00:50:00 So a way to not just answer yes or no, but to get visualizations.

00:50:03 Have you used this?

00:50:04 Yeah.

00:50:05 Yeah.

00:50:05 I also wrote an article on it, I think.

00:50:07 Okay.

00:50:07 Well, yeah.

00:50:08 So definitely.

00:50:08 That's awesome.

00:50:09 Yeah.

00:50:09 Things like this sound really useful to me.

00:50:11 They seem like.

00:50:12 I really like that missingness matrix.

00:50:14 It just shows the reasons why missing values are correlated to how missing values are correlated

00:50:20 with other columns.

00:50:21 Right.

00:50:21 Is it a whole bunch of missing data in one row?

00:50:23 Yeah.

00:50:24 And then it's all good?

00:50:25 Or is it interspersed?

00:50:26 Like this one's missing the birthday, but that one's missing the name or something like

00:50:29 that.

00:50:29 Right.

00:50:30 Yeah.

00:50:30 It's a really good package.

00:50:31 Yeah.

00:50:31 Fantastic.

00:50:32 All right.

00:50:32 At number 22.

00:50:34 At and Iat.

00:50:35 This one is like a faster versions of lock and Iat.

00:50:39 It just enables you to index your data frame.

00:50:43 But this one is specifically designed for retrieving single value conditionals.

00:50:48 Nice.

00:50:48 It's almost like an array index.

00:50:51 Yeah.

00:50:51 A little bit.

00:50:52 What's the difference between at and Iat?

00:50:54 Using at, you can use like column labels.

00:50:57 Like as you can see here, we are using cut and an index.

00:51:00 But Iat, you have to know the index of that column.

00:51:03 I see.

00:51:04 So with At, it would be like row and then column name, where Iat is row and column number.

00:51:09 It's probably less flexible.

00:51:10 You got to know that cut is four because it could be moved around as people are creating

00:51:15 or inserting data.

00:51:16 Yeah.

00:51:16 Okay.

00:51:16 Ag sort as in aggregation.

00:51:19 This one just returns the indices that would sort a data frame.

00:51:23 Okay.

00:51:23 Based on some column.

00:51:25 So in during data analysis, you sometimes want the indices, not the actual sorted data

00:51:31 so that you can use those indices in multiple times over.

00:51:34 Got it.

00:51:35 So you get the sorted.

00:51:35 Say, I want to sort by the total bill.

00:51:38 Yeah.

00:51:38 But then give me the indexes as if it was sorted, but don't actually change it.

00:51:43 So then you could go and then request data off those indexes.

00:51:46 Got it.

00:51:46 Yeah.

00:51:46 Yeah.

00:51:47 Nice.

00:51:47 All right.

00:51:47 We're closing in on the end and we've brought in the cat, the cat accessor.

00:51:51 Cat accessor.

00:51:52 Yeah.

00:51:52 I should have put an image here.

00:51:54 Yeah.

00:51:54 There would have been some kind of cool cat you can put in there.

00:51:57 Yeah.

00:51:58 As like pandas enables you to perform some like data type specific functions.

00:52:03 Like there is DT accessor for date time and also STR for strings.

00:52:08 And this one is for strictly for categorical purposes.

00:52:11 It has like a large suite of categorical functions that makes it easier to work on categories, ordinals

00:52:19 or nominal data.

00:52:20 Yeah.

00:52:21 Fantastic.

00:52:22 And let's bring it to the 25th with a nth group by nth.

00:52:27 Yeah.

00:52:27 This one is less useful or used very in very rare edge cases.

00:52:32 When you group by some column, possibly a categorical column, we want to look at those rows or groups,

00:52:38 right?

00:52:39 Calling nth on grouped data frame just returns that nth row or nth row of that groups of each group.

00:52:47 Got it.

00:52:47 Okay.

00:52:48 Yeah.

00:52:49 That looks really cool.

00:52:49 Yeah.

00:52:50 All right.

00:52:50 Well, that's it for our list.

00:52:52 Hopefully people out there listening have definitely learned something.

00:52:56 Now, your title was just to put a little disclaimer in here for everyone.

00:53:00 It's 25 panda functions you didn't know existed.

00:53:02 Pipe P guarantee equals 0.8.

00:53:04 So you had this 80%.

00:53:06 Yeah.

00:53:06 I'm guaranteed.

00:53:07 I love it.

00:53:08 That's a little bit of a stats joke in the title.

00:53:10 No one complained about that.

00:53:12 So I think that was right.

00:53:13 Yeah.

00:53:14 It sounds about right.

00:53:15 It seems like there's a lot of neat use cases here that people can find.

00:53:18 These are your 25 that you found interesting.

00:53:20 Other people might find them as well.

00:53:22 There are so many.

00:53:23 Oh, so many.

00:53:24 Yeah.

00:53:25 These are the types of things, though, that people can say, all right, today I'm going to

00:53:29 try to work with number one as I'm doing my data analysis and stuff.

00:53:32 I just, I know I'm going to be doing some Excel stuff.

00:53:34 So let's do the Excel writer one.

00:53:36 And then, you know, maybe later it's like, oh, I know I'm doing survey type of data.

00:53:40 So let me work with explode and just try to, you know, if you work these in one at a time,

00:53:45 eventually they become part of your tool chest and they're good, right?

00:53:48 Yeah.

00:53:48 Yeah.

00:53:48 And just expanding your tool set and skills.

00:53:51 I think part of the trick is to make sure that you apply it a little bit, right?

00:53:55 I mean, you know, they're out there, but just as you use them, like bring them in.

00:53:58 It just saves you time and resources.

00:54:00 Awesome.

00:54:00 Yeah.

00:54:01 Half the battle is just knowing that it exists, right?

00:54:03 It's not that it's necessarily hard to use.

00:54:04 It's like, I just didn't know this was even an option.

00:54:07 Yeah.

00:54:08 All of these are very easy to use.

00:54:09 You just know that they exist.

00:54:11 Yeah.

00:54:11 I feel like so much of Pandas is that way, but they're so, it's hard to know because there's

00:54:15 so much to do there.

00:54:16 It's cool.

00:54:17 Out of the live stream, Brandon, just wanted, now we're cutting it out.

00:54:19 I wanted to throw out, he said, very helpful.

00:54:21 Thank you for the article, Bex.

00:54:22 Cool.

00:54:23 You're welcome.

00:54:23 Yeah, I agree.

00:54:24 Yeah.

00:54:24 Thanks for doing this one.

00:54:25 I do want to point out, we certainly don't have time to cover it, but let me pull it up

00:54:30 here so I can make sure it goes in the links as well.

00:54:32 You did the same thing for NumPy, right?

00:54:34 And you also were a little more confident.

00:54:36 I got to say, you're a little more confident here.

00:54:37 Your P of guarantee equals 0.85 instead of 0.8.

00:54:40 NumPy practices are a little bit harder to understand.

00:54:44 That's why most of them don't bother to learn those, most people.

00:54:48 So I was a bit confident because I also didn't know most of these functions.

00:54:52 That's why I was a bit more confident.

00:54:54 Yeah.

00:54:54 Fantastic.

00:54:55 All right.

00:54:56 So if people like this flow and they want to kind of go a little deeper and go into the

00:55:00 NumPy layer, they can check that out.

00:55:01 And they can also check out a bunch of your other writing.

00:55:03 I also have the same for SK Learn.

00:55:05 Okay.

00:55:05 Right on for SK Learn.

00:55:07 Great.

00:55:07 All right.

00:55:08 Anything else you want to add to this article before we call it good on that topic?

00:55:12 I think we covered everything.

00:55:13 Yeah.

00:55:14 We covered it well.

00:55:14 I think it was fun.

00:55:15 Yeah.

00:55:15 It was fun.

00:55:16 All right.

00:55:16 Now, before you get out of here, there's the two questions you've got to answer.

00:55:21 If you're going to write some Python code, what editor do you use?

00:55:25 What are you going to use?

00:55:25 For data analysis, I usually use JupyterLab.

00:55:28 Yep.

00:55:29 But if I have to do pure Python, that's always PyCharm.

00:55:33 I love it.

00:55:34 Awesome.

00:55:34 That's a good combo.

00:55:35 Yeah.

00:55:35 And then notable PyPI package.

00:55:38 Something.

00:55:39 It doesn't have to be something super popular, but something that you've been across that

00:55:42 people are like, you're like, people should know about this.

00:55:44 This is something I learned about.

00:55:45 I recently come across with UMAP.

00:55:48 UMAP?

00:55:49 It's for dimensional add to reduction.

00:55:50 UMAP Python.

00:55:51 It's usually used for like very large data sets to project them to 2D so that you can

00:55:57 visualize them.

00:55:58 This one is a really useful package.

00:56:00 Nice.

00:56:01 So definitely people are trying to project down to 2D.

00:56:04 I mean, that's one of the problems, right?

00:56:05 Is how do you look at some of this stuff that's...

00:56:08 Like 100 dimensional or 200 dimensions.

00:56:10 You just can't visualize.

00:56:12 I don't even have any idea at all how to do 100 dimensions.

00:56:16 I remember we were doing some work with complex analysis and two dimensional.

00:56:21 Each dimension was complex numbers.

00:56:23 So four dimensional.

00:56:24 That was a challenge.

00:56:25 I have no idea how to approach 100.

00:56:27 No one does.

00:56:28 That's why this kind of dimensional add to reduction techniques exist.

00:56:31 Yeah.

00:56:31 Fantastic.

00:56:32 And of course, important machine learning and stuff, right?

00:56:35 There's like dimensions that you can just throw away because they don't actually contribute

00:56:38 to the predictions and stuff, right?

00:56:40 Yeah.

00:56:40 You might does that exactly.

00:56:41 Excellent.

00:56:41 Super.

00:56:42 All right, Bex.

00:56:43 Thank you for being here.

00:56:44 Final call to action.

00:56:45 People want to get deeper in Pandas, maybe learn more about some of your articles.

00:56:50 You know, what do you tell them?

00:56:51 As I said, just first check the documentation.

00:56:53 The documentation is usually, it should be your first choice.

00:56:56 It's the best place to learn about a library.

00:56:59 It takes a little dedication, but go through it and find out what it has to offer and go

00:57:02 from there, right?

00:57:03 It's a bit hard to read, but the documentation is always like gives the best information about

00:57:09 the library because it's written by the package creators.

00:57:13 So they know the library the best.

00:57:15 For sure.

00:57:15 Yeah.

00:57:16 All right.

00:57:17 Well, thank you for being here.

00:57:18 Thanks for writing the article and sharing that with us.

00:57:19 Thanks for having me.

00:57:20 Yeah, you bet.

00:57:21 Bye.

00:57:21 Thank you.

00:57:22 Bye.

00:57:22 This has been another episode of Talk Python To Me.

00:57:26 Thank you to our sponsors.

00:57:28 Be sure to check out what they're offering.

00:57:29 It really helps support the show.

00:57:31 Choose Shortcut, formerly Clubhouse.io, for tracking all of your project's work because

00:57:36 you shouldn't have to project manage your project management.

00:57:39 Visit talkpython.fm/shortcut.

00:57:43 Simplify your infrastructure and cut your cloud bills in half with Linode's Linux virtual

00:57:46 machines.

00:57:47 Develop, deploy, and scale your modern applications faster and easier.

00:57:50 Visit talkpython.fm/linode and click the create free account button to get started.

00:57:55 Do you need a great automatic speech to text API?

00:57:59 Get human level accuracy in just a few lines of code.

00:58:01 Visit talkpython.fm/assembly AI.

00:58:04 Want to level up your Python?

00:58:06 We have one of the largest catalogs of Python video courses over at Talk Python.

00:58:11 Our content ranges from true beginners to deeply advanced topics like memory and async.

00:58:15 And best of all, there's not a subscription in sight.

00:58:18 Check it out for yourself at training.talkpython.fm.

00:58:21 Be sure to subscribe to the show.

00:58:23 Open your favorite podcast app and search for Python.

00:58:26 We should be right at the top.

00:58:27 You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the

00:58:33 direct RSS feed at /rss on talkpython.fm.

00:58:36 We're live streaming most of our recordings these days.

00:58:40 If you want to be part of the show and have your comments featured on the air, be sure to

00:58:44 subscribe to our YouTube channel at talkpython.fm/youtube.

00:58:48 This is your host, Michael Kennedy.

00:58:49 Thanks so much for listening.

00:58:51 I really appreciate it.

00:58:52 Now get out there and write some Python code.

00:58:54 Bye.

00:58:54 Bye.

00:58:55 Bye.

00:58:56 Bye.

00:58:57 Bye.

00:58:58 Bye.

00:58:59 Bye.

00:59:00 Bye.

00:59:01 Bye.

00:59:02 Bye.

00:59:03 Bye.

00:59:04 Bye.

00:59:05 Bye.

00:59:06 Bye.

00:59:07 Bye.

00:59:08 Bye.

00:59:09 Bye.

00:59:10 Bye.

00:59:11 Bye.

00:59:11 Bye.

00:59:11 Bye.

00:59:11 Bye.

00:59:12 Thank you.

00:59:14 Thank you.

