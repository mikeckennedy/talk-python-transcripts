WEBVTT

00:00:00.001 --> 00:00:05.140
It's been an amazing year for Python. We've seen its meteoric growth continue to become the most

00:00:05.140 --> 00:00:10.180
popular major programming language. We've seen significant grants and funding come in for open

00:00:10.180 --> 00:00:16.420
source. And this just might be the year that the Python 2 or Python 3 question was finally settled.

00:00:16.420 --> 00:00:21.600
Join Brian Okken, my co-host from our Python Bytes podcast, and me as we look back at many

00:00:21.600 --> 00:00:28.880
of the major milestones for Python in 2017. This is Talk Python to Me, episode 145, recorded

00:00:28.880 --> 00:00:49.680
December 21st, 2017. Welcome to Talk Python to Me, a weekly podcast on Python, the language,

00:00:49.680 --> 00:00:54.780
the libraries, the ecosystem, and the personalities. This is your host, Michael Kennedy. Follow me on

00:00:54.780 --> 00:00:58.700
Twitter where I'm @mkennedy. Keep up with the show and listen to past episodes at

00:00:58.700 --> 00:01:04.720
talkpython.fm and follow the show on Twitter via at Talk Python. This episode is sponsored by

00:01:04.720 --> 00:01:09.000
Linode and Rollbar. Please check out what they're offering during their segments. It really helps

00:01:09.000 --> 00:01:14.580
support the show. Talk Python to Me is partially supported by our training courses. Have you tried

00:01:14.580 --> 00:01:20.420
to learn Python but got stuck or lost focus? We know how it feels to try and jam fact after fact,

00:01:20.420 --> 00:01:26.200
loop construct after turn hair expression, into your head. At best, it's boring. At worst,

00:01:26.700 --> 00:01:31.800
it can turn you off programming altogether. That's why we built our course, Python Jumpstart by building

00:01:31.800 --> 00:01:37.320
10 apps. This course guides you through carefully planned applications. It starts simple, but

00:01:37.320 --> 00:01:43.080
progresses to quite real apps. Best of all, you won't be learning dry facts. You'll be learning like

00:01:43.080 --> 00:01:48.760
the pros do by building real applications and learning in context. If you want to start building with Python,

00:01:48.920 --> 00:01:52.460
just visit talkpython.fm/course to get started.

00:01:54.020 --> 00:01:58.100
Before we get to the interview, I want to share a quick update about our Python courses with you.

00:01:58.100 --> 00:02:02.460
Do you work on a software team that needs training and could really use a chance to level up their

00:02:02.460 --> 00:02:07.340
Python? Maybe your entire company is looking to become more proficient. We have special offers

00:02:07.340 --> 00:02:12.800
that make our courses here at Talk Python the best option for everyone you work with. Our courses don't

00:02:12.800 --> 00:02:18.020
require an ongoing subscription like so many corporate training options do. And they're roughly priced

00:02:18.020 --> 00:02:24.040
about the same as a book. We're here to help you succeed. Send us a note at sales at talkpython.fm

00:02:24.040 --> 00:02:31.200
to start a conversation. And here's a bit of a timely announcement. We're giving away a PyCon ticket

00:02:31.200 --> 00:02:37.780
to one lucky individual. So every year PyCon in the US sells out. If you don't have a ticket,

00:02:37.780 --> 00:02:44.640
go buy a ticket or, or you could become a friend of the show. Many of you already are. And thank you

00:02:44.640 --> 00:02:50.800
for that. If you're not just go to talkpython.fm/friends into your email address, and you'll be

00:02:50.800 --> 00:02:57.540
in the running on January 8. We're going to do a draw using a little random dot choice and figure out

00:02:57.540 --> 00:03:03.100
who the lucky winner is who wins a free ticket to PyCon. So be sure to become a friend of the show

00:03:03.100 --> 00:03:08.640
if you want to be part of that. Now let's get to the interview. Brian, welcome back to Talk Python.

00:03:08.640 --> 00:03:13.760
Thanks for having me back for this special episode. I always love these year and review shows and

00:03:13.760 --> 00:03:20.080
it's really excellent that you could be here to do it together with me. So you were on previously a

00:03:20.080 --> 00:03:25.800
couple years ago to talk about the testing column, how the testing pyramid was broken and we need more

00:03:25.800 --> 00:03:30.380
testing column, right? I guess. I can't even remember what we talked about. So that makes sense.

00:03:30.380 --> 00:03:35.640
It's been a long time, but I do remember the testing column is now a thing after that episode. That was

00:03:35.640 --> 00:03:42.220
cool. So people may know you from our work together on Python Bytes, our other podcasts. They may know

00:03:42.220 --> 00:03:48.280
you from your test and code podcast and they may know you from your book, right? Yeah. Just so this last

00:03:48.280 --> 00:03:54.820
year got the book, Python testing with pytest with pragmatic publishers published this last year. So

00:03:54.820 --> 00:04:00.480
yeah. Yeah. Awesome. That's definitely one of the things we'll review as we go through here. So we're

00:04:00.480 --> 00:04:07.940
going to get together today and talk about what we think were the major accomplishments, major pieces of

00:04:07.940 --> 00:04:16.160
news, not necessarily the major projects, say, in terms of like projects you find on GitHub or something,

00:04:16.160 --> 00:04:23.380
but more like the trends in Python in 2017. So I think that's going to be a lot of fun. Do you want

00:04:23.380 --> 00:04:28.180
to kick us off with what may be one of the biggest trends out there? Yeah. One of the biggest trends

00:04:28.180 --> 00:04:36.720
that we saw in 2017 is a dramatic shift from Python 2 or legacy Python to Python 3 or modern Python.

00:04:36.900 --> 00:04:42.240
I love the term legacy Python and modern Python or just Python and legacy Python. I think it's actually

00:04:42.240 --> 00:04:48.260
making a difference. And Matthias, who originally started that trend, well done, man. That is awesome.

00:04:48.260 --> 00:04:57.060
So I think this is finally the year where the question seems silly to ask. Like it's been a few years.

00:04:57.060 --> 00:05:01.460
We're like, yeah, you can do Python 3. You can do Python 2. You know, how is this progressing? It should

00:05:01.460 --> 00:05:06.180
really be going quicker. But to me, it feels like if somebody says, I'm going to start a new project

00:05:06.180 --> 00:05:09.920
with Python 2, you kind of smack them and go, what? What are you doing, man? Come on. Like,

00:05:09.920 --> 00:05:13.400
it seems like that's the feeling in the industry these days, which is really good, right?

00:05:13.400 --> 00:05:17.460
I definitely think so. And I think there's been a switch. Hopefully there's been a switch in

00:05:17.460 --> 00:05:21.860
the education, like in colleges and stuff, people using Python 3 instead.

00:05:22.100 --> 00:05:26.740
There's a couple of milestones around this that we wanted to highlight, right? One of them is this

00:05:26.740 --> 00:05:32.980
article by ActiveState, the guys at ActiveState called Python 3 versus Python 2. It's different

00:05:32.980 --> 00:05:39.960
this time. They really lay out some of the things, some of the facts around this. For example, 95% of

00:05:39.960 --> 00:05:47.640
the top 360, don't know why they chose that number, 360 packages listed on py3readiness.org,

00:05:47.960 --> 00:05:54.560
95% of those are Python 3 ready. So traditionally, the blockage has been this sort of catch-22 around

00:05:54.560 --> 00:05:58.880
packages not supporting Python 3, right? Yeah. A couple of years ago, that was definitely the case

00:05:58.880 --> 00:06:04.660
of people trying to switch and they found out they had some key package that hadn't been migrated yet.

00:06:04.660 --> 00:06:11.660
But for the most part, that's behind us. Yeah, absolutely. So Django, Django played a big role

00:06:11.660 --> 00:06:17.460
this year in sort of putting a nail on the Python 2 or legacy Python coffin, right? Right. I mean,

00:06:17.460 --> 00:06:24.480
even just this month, Django 2.0 came out and it does not support Python 2. It's 3.4 and above.

00:06:24.480 --> 00:06:32.280
And with a little side note that 3.4 is only going to be supported for another year-ish. So move up to

00:06:32.280 --> 00:06:37.880
modern Python. Yeah, that's awesome. 3.5, I guess. But I think if you're going to move up, may as well

00:06:37.880 --> 00:06:43.260
just move up to 3.6. Right. Yeah. The only reason I think to not move to 3.6 is if you're working on

00:06:43.260 --> 00:06:48.600
like a Linux distribution and it doesn't support it or it's a complete pain to like a non-standard. But

00:06:48.600 --> 00:06:53.720
even so, 3.5 already has async and away. It has all, it has type hints. It has a lot of the magic

00:06:53.720 --> 00:06:59.780
features that you really care about, which is awesome. Yeah. So Django, the current shipping

00:06:59.780 --> 00:07:04.680
version of Django does not support legacy Python. That's awesome, right? Yeah, that's awesome. And I

00:07:04.680 --> 00:07:10.920
think that Django, when it used to default to Python 2.7, I think that was part of what was

00:07:10.920 --> 00:07:15.700
keeping people behind. Yeah. Even previous to this, I actually don't know the timing on when this

00:07:15.700 --> 00:07:21.080
happened. It was a little while ago, but they switched the default instructions from their

00:07:21.080 --> 00:07:26.940
tutorials or getting started tutorials from saying use Python 2 to saying use Python 3. And that made like

00:07:26.940 --> 00:07:35.020
a significant statistical differences in just the consumption of Python 3 libraries on PyPI just from

00:07:35.020 --> 00:07:40.460
the documentation switch, which was pretty powerful. Let's talk about some of the, there's a few other

00:07:40.460 --> 00:07:46.540
switches. Heroku switched their default to 3.6 recently. Yeah, that's awesome. It was like 2.7.13

00:07:46.540 --> 00:07:51.180
or something. And so now if you go to Heroku and say, give me a Python app, you get Python 3 unless

00:07:51.180 --> 00:07:57.280
you say no, no, I mean legacy Python, excuse me. NumPy has laid out their plans for dropping Python 2.

00:07:57.280 --> 00:08:02.960
Looks like you've got till 2020. Yeah, the NumPy folks are not moving super quick, but the fact that

00:08:02.960 --> 00:08:08.080
they say we are dropping Python 2 support should put it on the radar of everybody in the data science

00:08:08.080 --> 00:08:14.340
world, like same thing, start moving, right? I think their motivation is very similar to the Django

00:08:14.340 --> 00:08:21.120
folks in that they've had extra work and extra burden. It's harder for people to come and

00:08:21.120 --> 00:08:25.700
contribute to the project because they have to contribute two versions sometimes, a Python 2

00:08:25.700 --> 00:08:31.040
and a Python 3 version of everything. They're like, why? Why do we have all this code? So they're like,

00:08:31.040 --> 00:08:35.980
not only do we think it's time to move, but we think we will have a better chance of adding new

00:08:35.980 --> 00:08:40.260
features and getting new contributors if we drop this Python 2 thing. So that's pretty cool.

00:08:40.260 --> 00:08:48.920
This was laid out at the last 2017 PyCon was a talk with Instagram switching to Python 3 and how they did it

00:08:48.920 --> 00:09:01.360
on one branch. And that was amazing. That was insane, right? But you're right. So I think that was a great talk and that did show to everybody else. Man, if these guys can do it with a very complex code structure, you can too.

00:09:01.360 --> 00:09:06.840
My biggest takeaway from that was, oh my gosh, they did that on the main branch.

00:09:06.840 --> 00:09:10.340
They made that change without branching.

00:09:10.340 --> 00:09:12.700
They got it working in production and everything, which is pretty awesome.

00:09:12.700 --> 00:09:15.440
And the whole way in which they did that was cool.

00:09:15.440 --> 00:09:20.340
But my main takeaway was, whoa, if they can do it, pretty much anyone can.

00:09:20.340 --> 00:09:23.320
There may be a few companies, like let's say Bank of America.

00:09:23.320 --> 00:09:26.400
They've got an enormous Python 2 code base.

00:09:26.960 --> 00:09:32.520
But unless you're at that scale, this is sort of a case study in how you could make this happen for you.

00:09:32.520 --> 00:09:38.500
What's interesting is we started the year with still talking about trying to get people to move on to Python 3.

00:09:38.500 --> 00:09:41.980
And at the end of the year, we're not really talking about that so much anymore.

00:09:41.980 --> 00:09:52.380
We're talking about some of the new exciting projects that are Python 3 only, like API Star and all the type int libraries and stuff going on.

00:09:52.380 --> 00:09:53.060
That's really cool.

00:09:53.060 --> 00:09:56.180
API Star is by Tom Christie, same guy that did Django REST framework.

00:09:56.380 --> 00:09:59.780
Things like I want to re-envision a REST framework, but with Python 3 features.

00:09:59.780 --> 00:10:05.140
Really interesting use cases of things that are only available in Python 3.

00:10:05.140 --> 00:10:16.460
And then we have, you said, like we've got PyAnnotate, mypy, and MonkeyType, which are all around this type hinting, type annotation thing.

00:10:16.460 --> 00:10:18.420
And it's available only in Python 3.

00:10:18.420 --> 00:10:23.820
I started the year not thinking type hints were a good idea, but I think they are now.

00:10:23.820 --> 00:10:25.560
Everybody else has convinced me.

00:10:25.560 --> 00:10:28.000
I try to use them judiciously, but I do really like them.

00:10:28.000 --> 00:10:34.380
I think on this section, on this topic, our first one, this move to Python 3, we should leave people with the Python 3 death clock.

00:10:34.380 --> 00:10:34.780
Yes.

00:10:34.780 --> 00:10:35.940
Or the Python 2 death clock.

00:10:35.940 --> 00:10:38.840
What, PythonClock.org?

00:10:38.840 --> 00:10:40.380
Yeah, PythonClock.org.

00:10:40.460 --> 00:10:46.900
And so we have about two years, three months, and 14 days until Python 2 drops, even security fixes.

00:10:46.900 --> 00:10:47.700
All right.

00:10:47.700 --> 00:10:54.180
And so if you have a manager or your team's like, I don't know if we should really do this switch.

00:10:54.180 --> 00:10:55.640
We should just stick with Python 2.

00:10:55.640 --> 00:10:56.460
We already all know it.

00:10:56.460 --> 00:10:59.240
Like put this up on a big screen somewhere and just let it count down.

00:10:59.620 --> 00:11:00.740
It's a little scary now.

00:11:00.740 --> 00:11:02.660
I think in about two years it'll be real scary.

00:11:02.660 --> 00:11:09.600
A similar timer shows up on some of the Python libraries, the documentation, like requests has that at the top, I think.

00:11:09.600 --> 00:11:10.280
Yeah, that's awesome.

00:11:10.280 --> 00:11:11.500
All right.

00:11:11.500 --> 00:11:12.480
So let's move on.

00:11:12.480 --> 00:11:16.140
Speaking of requests, you'll find requests on PyPI, right?

00:11:16.320 --> 00:11:18.520
Yeah, along with a whole bunch of other things.

00:11:18.520 --> 00:11:19.720
A whole bunch of other things.

00:11:19.720 --> 00:11:21.540
What if you misspell requests?

00:11:21.540 --> 00:11:23.300
That would have been a problem for a while.

00:11:23.300 --> 00:11:23.780
Yeah.

00:11:23.780 --> 00:11:24.380
Yeah, absolutely.

00:11:24.380 --> 00:11:33.320
So one of the things that happened this year was that hackers subverted PyPI and they got 10 malicious libraries installed.

00:11:33.320 --> 00:11:35.660
And the malicious code is not in the library itself.

00:11:35.660 --> 00:11:38.880
They literally took the open source code and just put it into their library.

00:11:38.880 --> 00:11:44.460
But when you pip install things, it has the setup.py that runs to configure everything.

00:11:44.460 --> 00:11:45.680
That can do anything.

00:11:45.860 --> 00:11:47.900
And so they put malicious code in there.

00:11:47.900 --> 00:11:49.700
It was a weird thing.

00:11:49.700 --> 00:11:51.280
It was almost, it was kind of bizarre.

00:11:51.280 --> 00:11:58.240
What surprised me is that they had it running so that the actual package, the real code was still running.

00:11:58.240 --> 00:12:00.940
It was just the setup was all messed up.

00:12:00.940 --> 00:12:01.420
That's right.

00:12:01.420 --> 00:12:08.200
So you would not be able to determine that you had installed one of these virus packages by it not working.

00:12:08.200 --> 00:12:10.020
Because it was literally the same code.

00:12:10.020 --> 00:12:11.220
Like you imported it ran.

00:12:11.220 --> 00:12:13.140
It just happened to be really, really bad.

00:12:13.220 --> 00:12:17.120
So the way they did this was by typo squatting, basically.

00:12:17.120 --> 00:12:21.960
If you type requests but you misspelled it somehow, right?

00:12:21.960 --> 00:12:32.520
They might create a package that is this virus injected version by copying requests and uploading it to PyPI under misspellings of these various things.

00:12:32.520 --> 00:12:32.960
Yeah.

00:12:32.960 --> 00:12:35.060
It's just wacky.

00:12:35.180 --> 00:12:41.200
But the community kind of got around this and got it dealt with pretty quickly, which was pretty nice.

00:12:41.200 --> 00:12:47.020
The couple things they had, the new pip won't let you do misspellings of some of the common packages.

00:12:47.020 --> 00:12:49.880
You're not allowed to create standard library names, right?

00:12:49.880 --> 00:12:53.500
Like they used URL lib or something like that.

00:12:53.500 --> 00:12:56.540
Like that was not actually a package, but you would reasonably import it.

00:12:56.540 --> 00:12:59.680
So you, you know, they could trick you into pip installing it.

00:12:59.760 --> 00:13:02.900
Anything that's been seen has been taken down.

00:13:02.900 --> 00:13:05.500
All of these malicious libraries are gone now.

00:13:05.500 --> 00:13:07.100
And then, well, hopefully.

00:13:07.100 --> 00:13:14.020
And then somebody went around and squatted on a whole bunch of names to make sure that it wasn't taken by somebody else.

00:13:14.020 --> 00:13:14.380
Yeah.

00:13:14.540 --> 00:13:22.700
So they're like, all right, we're going to just put a message or some sort of import or install warning here and just say like, no, you can't, you can't have these.

00:13:22.700 --> 00:13:28.500
There's also some, some utility that would generate variations or misspellings of your package.

00:13:28.500 --> 00:13:33.900
So you could squat on your own if you run a popular package as well, which is, which is pretty nice.

00:13:33.900 --> 00:13:35.060
So I don't know.

00:13:35.060 --> 00:13:37.460
On one hand, this is really disturbing.

00:13:37.460 --> 00:13:43.260
On the other, if you look at how many times those things were downloaded, they're in the, like the tens or hundreds, not millions.

00:13:43.780 --> 00:13:45.340
So that's one thing.

00:13:45.340 --> 00:13:57.480
One of the good things about this, I think, that came out is, I mean, some people's first reaction might be, why didn't the team that runs PyPI, why didn't they proactively fix this or know about it?

00:13:57.480 --> 00:14:01.140
And it highlighted the fact that all these people are volunteers.

00:14:01.140 --> 00:14:04.060
And maybe we need to do something about that.

00:14:04.060 --> 00:14:04.820
Well, yeah.

00:14:04.820 --> 00:14:10.040
And PyPI itself is utterly critical for making the Python ecosystem work, right?

00:14:10.080 --> 00:14:20.080
Anytime you set up a new machine, you set up a new project, you do an automated build, there's probably some sort of pip install dash r requirements dot txt process that happens, right?

00:14:20.080 --> 00:14:22.040
And that flows through PyPI.

00:14:22.040 --> 00:14:25.020
The amount of data that flows through there is super incredible.

00:14:25.360 --> 00:14:31.780
And it turns out that there's just a handful of people, as in one or two, who work on this at all.

00:14:31.780 --> 00:14:33.060
And like you said, they're volunteers.

00:14:33.060 --> 00:14:37.940
So one of the big pieces of news is that Mozilla came along to fix this, right?

00:14:37.940 --> 00:14:38.460
Right.

00:14:38.460 --> 00:14:55.080
So the next thing we were going to talk about was the huge grant, the huge, in open source terms, $170,000 grant from Mozilla to help with the sustainability of PyPI, which is just awesome.

00:14:55.080 --> 00:14:56.620
Yeah, that is really, really great.

00:14:56.620 --> 00:14:59.020
I'm so glad to hear that they're doing this.

00:14:59.020 --> 00:15:05.380
It's, on one hand, it's not a huge amount of money, but it really does put the foundation in place.

00:15:05.380 --> 00:15:09.140
A lot of this is going towards moving over to warehouse, I think.

00:15:09.140 --> 00:15:11.240
So that'll be good.

00:15:11.240 --> 00:15:18.500
I think that'll help with a lot of open, a lot more people being able to contribute to the maintenance and update.

00:15:18.500 --> 00:15:19.180
That's really interesting.

00:15:19.180 --> 00:15:25.460
One of the problems with PyPI, the website, is that it's super old and crusty.

00:15:25.460 --> 00:15:27.140
It's not like Shiny Flask.

00:15:27.140 --> 00:15:29.860
It's not cool new Django 2.0.

00:15:30.560 --> 00:15:38.200
It's like hand-rolled, custom, couple of files, thousands of lines, funky code.

00:15:38.200 --> 00:15:43.520
And it's great that it works, but it really needs to be modernized.

00:15:43.520 --> 00:15:47.820
And so one of the things that this includes is moving over to what you already mentioned, warehouse.

00:15:47.820 --> 00:15:50.220
Warehouse is the new implementation.

00:15:50.380 --> 00:15:55.540
And that's what you'll find at PyPI.org, not the PyPI.python.org slash PyPI.

00:15:55.540 --> 00:15:57.480
Why that's there twice, who knows.

00:15:57.480 --> 00:16:01.600
But the new one, and that's actually written in Pyramid.

00:16:01.600 --> 00:16:04.080
It's a well-factored code with unit tests.

00:16:04.080 --> 00:16:06.080
I think that move is a great move.

00:16:06.080 --> 00:16:10.000
And I'm excited to put the old version behind us as soon as we can.

00:16:10.000 --> 00:16:11.200
It still works great.

00:16:11.420 --> 00:16:16.480
But I understand when people complain about having to maintain some legacy code that's crusty.

00:16:16.480 --> 00:16:20.240
Yeah, and the problem was people would want to come and submit a feature for it.

00:16:20.240 --> 00:16:24.700
And they would look at it and go, actually, no, this is a complete mess.

00:16:24.700 --> 00:16:25.420
I can't work on this.

00:16:25.420 --> 00:16:25.920
I'm out of here.

00:16:25.920 --> 00:16:29.820
And so we have this sort of dual problem.

00:16:30.020 --> 00:16:37.620
One, that there's people who are working on this critical thing only in this volunteer mode, more or less.

00:16:37.620 --> 00:16:44.100
And then there are people who want to contribute to it, but its current state repels them, technically speaking.

00:16:44.100 --> 00:16:46.840
So it's like a double negative, right?

00:16:46.840 --> 00:16:53.620
For some of this funding to try to convert over, then maybe we can get swarms of open source people to help out.

00:16:53.620 --> 00:16:54.340
Yeah, that'd be awesome.

00:16:54.600 --> 00:17:01.200
So I'm looking forward to that little pre-release, pre-production warning at PyPI.org to go away.

00:17:01.200 --> 00:17:03.480
Thanks for Mozilla helping on that.

00:17:03.480 --> 00:17:08.640
And just related really, really quickly, you talked about major open source projects getting funding.

00:17:08.640 --> 00:17:16.900
NumPy got a whopping grant for $645,000 to improve it over the next two years.

00:17:16.900 --> 00:17:19.360
That's awesome open source support right there.

00:17:19.360 --> 00:17:26.280
That's a lot of money, but that's a drop in the bucket for the people that are really leaning on data science a lot.

00:17:26.280 --> 00:17:27.480
Yeah, it definitely drives a lot.

00:17:27.480 --> 00:17:29.860
What I would just like to see is Django get that.

00:17:29.860 --> 00:17:30.940
Pyramid get that.

00:17:30.940 --> 00:17:32.120
Request get that.

00:17:32.120 --> 00:17:40.840
You know, other, like so many of these popular open source packages that are these third-party packages are so critical.

00:17:40.840 --> 00:17:43.220
So many companies making billions of dollars on it.

00:17:43.220 --> 00:17:44.680
They could throw in a little bit.

00:17:44.680 --> 00:17:45.780
A little bit of support, right?

00:17:45.780 --> 00:17:51.140
It does seem interesting that, I mean, requests is used, for instance, as an example.

00:17:51.140 --> 00:17:57.400
There's so many like that, though, that are used by so many people that, and they still have, you still have to have day jobs.

00:17:57.400 --> 00:17:57.900
That's right.

00:17:57.900 --> 00:17:58.860
All right.

00:17:58.860 --> 00:18:02.180
So let's move on to something slightly political.

00:18:02.680 --> 00:18:05.980
But I don't want to make this overly politicized.

00:18:05.980 --> 00:18:18.760
But I think there is something we really should touch on a little bit here, and that is I can see positive sides of the whole Democratic side of the U.S. government, the Republican arguments some of the times.

00:18:19.160 --> 00:18:30.400
But this anti-fact, anti-science, anti-climate science bent of the current administration, it's real danger to like a lot of what we really need to focus on.

00:18:30.400 --> 00:18:35.980
I mean, climate change, in my opinion, is the biggest challenge we are facing currently as humans, period.

00:18:35.980 --> 00:18:39.080
And it's been in danger, right?

00:18:39.300 --> 00:18:42.360
It doesn't even matter what side of the fence you're on.

00:18:42.360 --> 00:18:47.340
Taking data down is like data on climate change should be, it's just data.

00:18:47.340 --> 00:18:49.640
It's not something we should argue about.

00:18:49.640 --> 00:18:49.860
Right.

00:18:49.860 --> 00:18:51.760
Facts should be facts, period.

00:18:51.760 --> 00:18:55.620
You can argue about the interpretation, but facts are facts.

00:18:55.800 --> 00:18:59.280
And they're really important for us to make the right decisions.

00:18:59.280 --> 00:19:13.420
And so one of the huge challenges is there was a suspicion that when Donald Trump was going to become president, that many of these government-controlled, super important data sources were going to disappear, right?

00:19:13.420 --> 00:19:20.800
Like NOAA, the Oceanic Institute, EPA, National Renewable Energy Laboratory, all these different places, right?

00:19:20.800 --> 00:19:24.420
Theoretically, some of this data could be vanished, right?

00:19:24.420 --> 00:19:29.960
I don't know what the current state is, though, of some of that data, but some of it is at the very least harder to find.

00:19:29.960 --> 00:19:30.280
Yeah.

00:19:30.280 --> 00:19:37.540
And you hear about things like there being forbidden words at the EPA, like you can't use the word climate change, for example.

00:19:37.540 --> 00:19:38.240
How scary is that?

00:19:38.240 --> 00:19:45.020
So there were these data activists who decided we're going to save this, right?

00:19:45.020 --> 00:19:45.760
Yeah.

00:19:45.760 --> 00:19:49.620
So they went off and it started right at what?

00:19:49.740 --> 00:19:57.800
Right at January 20th, the inauguration, started copying as much data as possible and storing them in European servers.

00:19:57.800 --> 00:20:02.980
That's a pretty, I mean, it's a huge effort, but that's a pretty cool thing.

00:20:02.980 --> 00:20:03.520
Yeah, it is.

00:20:03.580 --> 00:20:10.080
So there were 60 scientists and programmers who gathered at the Department of Information Studies in UCLA.

00:20:10.080 --> 00:20:13.940
There was a bunch more in Toronto, Philadelphia, Chicago, all over the world.

00:20:13.940 --> 00:20:22.240
And I'm sure requests and beautiful soup and a lot of that was in full force going around just sucking all of this data off these websites.

00:20:22.480 --> 00:20:25.560
And you might say like, okay, these people are paranoid, whatever, right?

00:20:25.560 --> 00:20:34.740
But in fact, right at noon, the day Trump was sworn in, a lot of the climate change pages on whitehouse.gov just disappeared, right?

00:20:34.740 --> 00:20:37.480
So those were grabbed just in time, I think.

00:20:37.480 --> 00:20:39.560
That's just weird to take stuff down right away.

00:20:39.560 --> 00:20:43.200
Quite an interesting data hacktivist sort of story.

00:20:43.200 --> 00:20:49.980
I mean, they weren't actually hacking things, but they were definitely out there using code and probably a lot of Python to try to rescue the data, which is quite interesting.

00:20:49.980 --> 00:21:06.260
There are definitely probably people using Python, but also one of the things that I'm glad we highlighted the story is that there is not a, you can't separate your interaction with the governments and the world and the fact that you're a programmer.

00:21:06.260 --> 00:21:13.020
And in this story, we see that programmers are able to save things that politicians might want to get rid of.

00:21:13.020 --> 00:21:14.100
So it's good.

00:21:14.100 --> 00:21:16.540
It was really, really heartened to see this.

00:21:16.540 --> 00:21:17.800
Quite an interesting story.

00:21:19.180 --> 00:21:22.460
This portion of Talk Python To Me is brought to you by Linode.

00:21:22.460 --> 00:21:26.480
Are you looking for bulletproof hosting that's fast, simple, and incredibly affordable?

00:21:26.480 --> 00:21:32.660
Look past that bookstore and check out Linode at talkpython.fm/Linode, L-I-N-O-D-E.

00:21:32.660 --> 00:21:36.980
Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:21:36.980 --> 00:21:41.920
They have 10 data centers across the globe, so no matter where you are, there's a data center near you.

00:21:41.920 --> 00:21:55.240
Whether you want to run your Python web app, host a private Git server, or a file server, you'll get native SSDs on all machines, a newly upgraded 200 gigabit network, and 24-7 friendly support, even on holidays, and a seven-day money-back guarantee.

00:21:55.240 --> 00:21:58.720
Want a dedicated server for free for the next four months?

00:21:58.720 --> 00:22:03.080
Use the coupon code Python17 at talkpython.fm/Linode.

00:22:04.060 --> 00:22:12.240
All right, so another thing that I feel like was really significant this year was the whole async and await, asyncio thing in Python.

00:22:12.240 --> 00:22:16.920
We saw a lot of new web frameworks come in in 2017, or at least we heard about them.

00:22:17.000 --> 00:22:20.920
I don't know how many of them are production ready, but they're definitely on the way, which is pretty cool.

00:22:20.920 --> 00:22:30.240
One of the challenges for any of these web frameworks to be async enabled, and maybe it's worth mentioning why that might be good, right?

00:22:30.240 --> 00:22:34.280
Especially because you have the gill, right?

00:22:34.280 --> 00:22:40.380
It's hard to add parallelism to your Python code in simple ways.

00:22:40.880 --> 00:22:42.880
But usually what do web servers do?

00:22:42.880 --> 00:22:47.880
They call other web services, microservice-type things, or external services, like payment gateways.

00:22:47.880 --> 00:22:51.320
They talk to databases, and then they do a little bit of stuff.

00:22:51.320 --> 00:22:53.900
Maybe they talk to the file system, and then they get back to you.

00:22:53.900 --> 00:22:56.560
But a lot of it is this kind of orchestration bit, really.

00:22:56.560 --> 00:23:03.240
And all of those can be pushed into the asyncio loop, right?

00:23:03.240 --> 00:23:06.240
If you use, like, Postgres, there's an async version for Postgres.

00:23:06.240 --> 00:23:08.420
Async library for consuming this.

00:23:08.420 --> 00:23:10.740
You can await, like, a query, which is really awesome.

00:23:10.780 --> 00:23:18.200
But if your web framework doesn't support it, like Flask doesn't support it, Pyramid doesn't support it, Django doesn't support it, you can't use that.

00:23:18.200 --> 00:23:19.720
Like, it's useless, right?

00:23:19.720 --> 00:23:21.260
You cannot use that in your website.

00:23:21.260 --> 00:23:30.260
So you really need a framework that will, all the way down through it, allow you to sort of release these awaitable coroutines.

00:23:30.260 --> 00:23:34.820
I'm probably talking through my hat on this one, since you're more of the web developer.

00:23:34.820 --> 00:23:38.600
But we did see three interesting ones come along, and probably more.

00:23:38.740 --> 00:23:42.680
Like, I'm not giving it, I guess I should probably throw aiohttp in there as well.

00:23:42.680 --> 00:23:51.400
But the three that come to mind for me are SANIC, which is a new web framework entirely built on alternate implementation.

00:23:51.400 --> 00:23:53.900
I think uv loop is what SANIC's based on.

00:23:54.260 --> 00:24:00.900
So you can go and write code against your web framework and use all of this async and await stuff.

00:24:00.900 --> 00:24:04.220
There's Jepronto, which is really interesting.

00:24:04.220 --> 00:24:13.160
And Jepronto, I think, caused a lot of a stir because they originally published an announcement on Medium.

00:24:13.160 --> 00:24:22.740
And they have, like, a really pretty impressive graph right on their GitHub page saying, we're getting millions of requests per second on a single server.

00:24:22.740 --> 00:24:26.120
They show it next to Go and Node.

00:24:26.120 --> 00:24:28.880
And it's like, I don't know, 20 times faster?

00:24:28.880 --> 00:24:32.500
I mean, it's a lot, lot faster than the other things.

00:24:32.500 --> 00:24:40.620
And so on one hand, they caused a big stir about people going, well, you're doing your benchmarking wrong for this reason or that reason or whatever.

00:24:40.620 --> 00:24:42.880
So Jepronto is pretty interesting.

00:24:42.880 --> 00:24:48.060
The thing that's unfortunate is it's kind of stalled out in the last 10 months.

00:24:48.060 --> 00:24:49.340
It came on really strong.

00:24:49.340 --> 00:24:52.140
And there's just not a lot happening in the commit history.

00:24:52.140 --> 00:24:52.640
Interesting.

00:24:52.820 --> 00:24:54.620
Yeah, but Sanic, on the other hand, it's going pretty strong.

00:24:54.620 --> 00:24:58.780
And a new one that we recently covered on Python Bytes is called Quart.

00:24:58.780 --> 00:25:04.840
And Quart takes the Flask API and makes it async and awaitable.

00:25:04.840 --> 00:25:12.360
So you could take the code that you know and make it work, basically, in this async world that you want.

00:25:12.360 --> 00:25:15.480
This one does seem to be fairly active as well.

00:25:15.480 --> 00:25:21.640
I'm going to have the guy who's created it on this show on Talk Python in a few weeks as well.

00:25:21.640 --> 00:25:22.720
So we'll dig more into it.

00:25:22.760 --> 00:25:28.140
But basically, it's Python asyncio web microframework with exactly the same API as Flask.

00:25:28.140 --> 00:25:34.100
But you can say your views can be async def method name, not just def method name, right?

00:25:34.100 --> 00:25:35.760
So it's really, really cool.

00:25:35.760 --> 00:25:36.100
Yeah.

00:25:36.100 --> 00:25:42.560
Hats off to him for coming up with just taking the Flask API and reusing that.

00:25:42.560 --> 00:25:44.040
Why come up with something new?

00:25:44.040 --> 00:25:44.760
That's right.

00:25:44.760 --> 00:25:45.240
That's smart.

00:25:45.240 --> 00:25:52.540
I also saw Armin Roeneker talking about this kind of stuff, who's behind Flask, talking about some of these ideas.

00:25:52.700 --> 00:25:54.820
And stuff around Flask on Twitter.

00:25:54.820 --> 00:25:58.980
I don't know if there's anything officially happening directly in Flask, but I wouldn't be surprised.

00:25:58.980 --> 00:26:00.700
That'd be a good thing to throw money at.

00:26:00.700 --> 00:26:02.620
Hey, everybody throwing money at projects.

00:26:02.620 --> 00:26:04.040
Yeah, exactly.

00:26:04.040 --> 00:26:10.500
Let's make our, instead of switching to Go or something, let's just make our web frameworks actually do what Python can do.

00:26:10.920 --> 00:26:15.200
One of the things that is at the core of all of our Python programs is CPython.

00:26:15.200 --> 00:26:21.160
And if people want to contribute to it, how and where that's happened has kind of been a journey, right?

00:26:21.160 --> 00:26:22.960
I didn't realize the history.

00:26:22.960 --> 00:26:28.120
I knew that in 2017 it moved over to GitHub, but it's moved around a little bit.

00:26:28.120 --> 00:26:28.800
It has.

00:26:29.000 --> 00:26:33.920
It was somewhere where I actually don't even know really where it was pre-2006.

00:26:33.920 --> 00:26:35.500
In 2006 it was on Subversion.

00:26:35.500 --> 00:26:37.660
Then they moved it to Mercurial.

00:26:37.660 --> 00:26:42.160
Back then Mercurial, Git, they were kind of vying for action.

00:26:42.160 --> 00:26:44.780
But, and you know, Mercurial makes a lot of sense.

00:26:44.780 --> 00:26:45.480
It's written in Python.

00:26:45.780 --> 00:26:48.040
So Python should be hosted on Python.

00:26:48.040 --> 00:26:48.680
It's kind of meta.

00:26:48.680 --> 00:26:57.100
But in 2017 it really is the modern workflow for social programming and open sources on GitHub these days.

00:26:57.100 --> 00:27:01.780
So the big news is Python, CPython code moved to GitHub.

00:27:01.780 --> 00:27:07.220
I'm not going to make a judgment call as to whether that's a, whether all of the activity on GitHub is a good thing or a bad thing.

00:27:07.220 --> 00:27:08.040
It just is.

00:27:08.040 --> 00:27:12.660
So you can't ignore that most open source developers are using GitHub.

00:27:12.660 --> 00:27:14.680
So it makes sense to put that there too.

00:27:14.680 --> 00:27:15.080
Absolutely.

00:27:15.240 --> 00:27:18.840
It's like saying, I want to go and do stuff on social networks, but I don't want to be on Facebook.

00:27:18.840 --> 00:27:22.740
It's like, well, that's just the way a lot of it is.

00:27:22.740 --> 00:27:23.160
I'm sorry.

00:27:23.160 --> 00:27:23.880
Yeah.

00:27:23.880 --> 00:27:28.560
So this was actually done by, sort of motivated by Brett Cannon a little bit.

00:27:28.560 --> 00:27:39.260
And he said one of his goals was he would like the ability to review an external contribution from submission to commit all on a tablet while at a beach on Wi-Fi.

00:27:39.260 --> 00:27:42.940
And he can do that with GitHub, but he couldn't do that with Mercurial and the other things.

00:27:42.940 --> 00:27:44.180
So that's pretty cool.

00:27:44.700 --> 00:27:52.720
It was also motivated by people submitting patches, but the whole flow of reviewing it, there's not the pull request style and stuff there.

00:27:52.720 --> 00:27:57.580
So it's, it just wasn't really, the request would set idle for like a year.

00:27:57.580 --> 00:28:01.080
You'd make some change to CPython and people wouldn't even like paid attention.

00:28:01.080 --> 00:28:01.520
Right.

00:28:01.520 --> 00:28:02.320
Oh, that's terrible.

00:28:02.320 --> 00:28:03.980
That'll take away your motivation for sure.

00:28:03.980 --> 00:28:04.200
Right.

00:28:04.600 --> 00:28:04.900
Yeah.

00:28:04.900 --> 00:28:07.960
And whatever we can do to get Brett on a beach more often.

00:28:07.960 --> 00:28:09.220
Yeah, that's right.

00:28:09.220 --> 00:28:12.780
Well, so well done.

00:28:12.780 --> 00:28:13.160
Well done.

00:28:13.160 --> 00:28:14.160
Everyone involved in that.

00:28:14.620 --> 00:28:20.380
Now, the next one I want to talk about has to do with Python becoming a very, very popular language.

00:28:20.380 --> 00:28:30.100
And this is not a, an achievement per se of 2017, but this is where certainly some hit some milestones and the world has started to pay a lot of attention to it.

00:28:30.320 --> 00:28:40.960
The growth of Python, I mean, it's been growing fast for a long time, but having it overtake some of the other languages in certain surveys happened this year, which is great.

00:28:40.960 --> 00:28:53.180
One of the places I love to get this data from is Stack Overflow and they have their yearly developer survey, but they also have on staff data scientists that just analyze stuff and write reports about it.

00:28:53.180 --> 00:28:53.320
Right.

00:28:53.320 --> 00:28:53.920
Which is pretty awesome.

00:28:53.920 --> 00:28:57.000
So one was called the incredible growth of Python.

00:28:57.000 --> 00:29:06.880
And they said June, 2017 was the first month that Python was the most visited tag on Stack Overflow.

00:29:07.480 --> 00:29:14.480
Not JavaScript, not Ruby, not C#, not Swift, Python, which I think is pretty awesome.

00:29:14.480 --> 00:29:15.560
Yeah, it's great.

00:29:15.560 --> 00:29:18.520
Hopefully that's not because it's the most confusing language.

00:29:18.520 --> 00:29:23.580
What I thought was really interesting is you can go read the article, the incredible growth of Python on Stack Overflow.

00:29:23.580 --> 00:29:29.380
And if you look at the comments and comments, at least at the time when it came out, were turned on.

00:29:29.380 --> 00:29:30.860
So people were commenting at the bottom.

00:29:30.860 --> 00:29:37.420
It read a lot like, you know, people were sort of disappointed that their favorite language didn't make it.

00:29:37.460 --> 00:29:40.080
Well, Ruby's used so much in Silicon Valley.

00:29:40.080 --> 00:29:41.440
Why is Ruby not here?

00:29:41.440 --> 00:29:44.700
Or I don't, you know, I think Python must be so complicated.

00:29:44.700 --> 00:29:48.260
That's why it's so much, you know, it's got so many visits, right?

00:29:48.260 --> 00:29:51.640
You should just use C++, something simple that doesn't need explaining.

00:29:51.640 --> 00:29:53.220
You know, and you're like, wait a minute.

00:29:53.220 --> 00:29:58.980
No, there's no way that C++ doesn't need more explaining than Python and its language syntax.

00:29:58.980 --> 00:30:01.920
And, you know, there's a lot of things that could contribute to this.

00:30:02.000 --> 00:30:04.260
I think partly PyPI might actually be part of it.

00:30:04.260 --> 00:30:07.760
Like, if you want to talk about requests, that's got a Python tag.

00:30:07.760 --> 00:30:09.720
You want to talk about Django, that's got a Python tag.

00:30:09.720 --> 00:30:12.780
You want to talk about SQL CanE, that's got a Python tag, right?

00:30:12.780 --> 00:30:18.560
Like, all these different things around Python that people use and love also contribute to this factor.

00:30:18.620 --> 00:30:24.060
Yeah, and we're seeing so many different groups like use Python that weren't before.

00:30:24.060 --> 00:30:29.420
There's a lot of people not using R anymore for data science and machine learning, switching to Python.

00:30:29.420 --> 00:30:40.860
We've got technical people, universities, a lot of people that used to use visual programming in the science and engineering fields are using free Python tools now.

00:30:40.860 --> 00:30:41.800
Yeah, absolutely.

00:30:41.800 --> 00:30:42.920
It's just great.

00:30:42.920 --> 00:30:45.420
Yeah, and so there's two graphs I want to call people's attention to.

00:30:45.420 --> 00:30:49.320
One is projections of future traffic for major programming languages.

00:30:49.320 --> 00:30:52.600
So Python, JavaScript, Java, C#, PHP, and C++.

00:30:52.600 --> 00:31:01.940
And you see the graph and almost all of those major languages are either flat or slightly downward trending, whereas Python is like hockey stick.

00:31:01.940 --> 00:31:06.200
And then the projection has it just blowing away from all these.

00:31:06.200 --> 00:31:07.240
It's really incredible.

00:31:07.240 --> 00:31:13.080
The other one has to do with Python compared to smaller growing technologies.

00:31:13.080 --> 00:31:20.400
So things like Rust and Go, there's so much hype around Go and how this is going to change the world and everyone should be there.

00:31:21.040 --> 00:31:27.120
If you compare the amount of interest in Python versus interest in Go, it's like 20 to 1.

00:31:27.120 --> 00:31:28.340
It's incredible.

00:31:28.340 --> 00:31:37.480
And then not just that, but the rate of the graph of interest in Python is actually growing faster than in Go or Rust or any of these things.

00:31:37.640 --> 00:31:40.980
So I feel like people probably hear, oh, you should switch to Go.

00:31:40.980 --> 00:31:41.980
You should go write that in Rust.

00:31:41.980 --> 00:31:43.960
You should use R or whatever, right?

00:31:43.960 --> 00:31:47.300
But in reality, these are not the same thing.

00:31:47.300 --> 00:31:49.880
I don't think things switch too quickly either.

00:31:49.880 --> 00:32:00.300
One of the things that came up, I think it was in this article, is the growth in high-income countries in Python is faster than a lot of other countries.

00:32:00.300 --> 00:32:06.600
The non-high-income countries, I don't even know what that means, but tend to follow by a year or two.

00:32:06.600 --> 00:32:12.100
So we should see even more growth worldwide in Python in the upcoming years.

00:32:12.340 --> 00:32:13.360
I think it's awesome.

00:32:13.360 --> 00:32:20.540
You know, on one hand, I feel like people probably say, oh, well, programming is not a popularity contest, right?

00:32:20.540 --> 00:32:24.360
Like, so what if it's more people use this versus that, right?

00:32:24.360 --> 00:32:26.160
A lot of people use PHP and PHP is crappy.

00:32:26.160 --> 00:32:31.280
Well, on one hand, PHP has a downward graph, right?

00:32:31.280 --> 00:32:42.320
So one of my rules of thumb is when you look at the trajectory of a technology that you want to bet your career on, that graph should have a positive derivative.

00:32:42.320 --> 00:32:45.740
It should be pointing upwards, preferably increasingly so.

00:32:45.740 --> 00:32:48.500
A second derivative is being positive, also good.

00:32:48.500 --> 00:32:54.620
But you should not necessarily bet your career on downward graphs.

00:32:54.620 --> 00:33:05.160
And also, if you think about, like, what hang-ups people have when they start Python, it's not things like, like, see, you got to come up with memory management and all that stuff that's really hard to deal with.

00:33:05.160 --> 00:33:07.620
There's a lot of hard to deal with stuff in C++.

00:33:07.620 --> 00:33:11.740
And I spend a lot of my time in C++, so I kind of love it too.

00:33:12.180 --> 00:33:15.420
But the big hang-up for Python is just the spaces thing.

00:33:15.420 --> 00:33:17.320
And that's easy to get over.

00:33:17.320 --> 00:33:20.300
And then you're on to making great things.

00:33:20.300 --> 00:33:21.920
Yeah, you're definitely on to making great things.

00:33:21.920 --> 00:33:25.200
You know, as soon as you pip install, like, a couple amazing things, you're like, oh, wait.

00:33:25.200 --> 00:33:26.480
Spaces, they're cool.

00:33:26.480 --> 00:33:27.580
I can deal with this.

00:33:27.580 --> 00:33:28.940
And then after a week, you're like, wait.

00:33:28.940 --> 00:33:30.580
Why do I have to put curly braces?

00:33:30.580 --> 00:33:31.460
What are all these symbols?

00:33:31.460 --> 00:33:32.560
Like, this is so annoying.

00:33:32.560 --> 00:33:33.040
Yeah.

00:33:33.040 --> 00:33:33.920
Yeah, pretty funny.

00:33:33.920 --> 00:33:34.420
Pretty funny.

00:33:34.420 --> 00:33:36.800
So I think this is definitely interesting.

00:33:36.800 --> 00:33:40.540
People out there thinking about where they should focus for their career.

00:33:41.200 --> 00:33:43.640
Definitely have a look at this article and draw your own conclusions.

00:33:43.640 --> 00:33:50.880
But I think it's really a generally positive thing for everybody involved in Python in a lot of different ways.

00:33:50.880 --> 00:33:51.980
Yeah, especially us.

00:33:51.980 --> 00:33:52.980
Yes, especially us.

00:33:52.980 --> 00:33:55.900
People love to listen to us talk about Python news.

00:33:56.520 --> 00:33:56.720
Awesome.

00:33:56.720 --> 00:34:10.540
So one of the things I feel like has been the trend really since the internet, before the web, since the internet came out, early William Gibson days has been like this real fascination with technology.

00:34:10.540 --> 00:34:15.140
Technology is, it's almost assumed that it's going to make lives better.

00:34:15.660 --> 00:34:16.940
We can connect more.

00:34:16.940 --> 00:34:21.900
And look, if we connect on Facebook more, we can share our views and they might be different.

00:34:21.900 --> 00:34:24.340
And then we'll come to a greater understanding.

00:34:24.340 --> 00:34:27.520
There'll be less fighting and less disagreement and whatnot.

00:34:27.780 --> 00:34:31.820
That's actually seemed to play out for quite a while.

00:34:31.820 --> 00:34:35.600
But I'm starting to feel like there's a trend saying maybe not so much anymore.

00:34:35.600 --> 00:34:38.220
Yeah, I guess I'm not quite sure where you're going with this.

00:34:38.660 --> 00:34:51.660
Well, there's a couple of really interesting articles and sort of trends coming out around how technology is not necessarily, by default, a positive thing for a human society, for society.

00:34:51.660 --> 00:34:52.920
Right?

00:34:52.920 --> 00:34:54.400
So there's a couple of articles.

00:34:54.400 --> 00:34:57.340
One is called Tech People Think They Aren't, Are They Good Guys?

00:34:57.340 --> 00:34:57.960
They Aren't.

00:34:57.960 --> 00:34:59.040
That was in Wired.

00:34:59.040 --> 00:35:00.120
It came out recently.

00:35:00.120 --> 00:35:05.580
There was one in the MIT Technology Review called The Dark Secret at the Heart of AI.

00:35:06.180 --> 00:35:12.440
And then the last one is The Real Threat of Artificial Intelligence on The New York Times.

00:35:12.440 --> 00:35:17.360
That's a pretty big turn from where we have been over the last 20 years.

00:35:17.360 --> 00:35:17.900
That's true.

00:35:17.900 --> 00:35:22.180
But I think in new technologies and programming, people don't really understand what it is.

00:35:22.180 --> 00:35:25.420
And so they're often scared of the unknown.

00:35:25.420 --> 00:35:26.560
Yeah, that's for sure.

00:35:26.560 --> 00:35:29.720
I think, you know, the tech people, they think they're the good guys.

00:35:29.720 --> 00:35:30.160
They aren't.

00:35:30.160 --> 00:35:35.460
This article in Wired, they talked a lot about how people in Silicon Valley,

00:35:35.700 --> 00:35:38.760
they really focus on Silicon Valley, but also in tech in general.

00:35:38.760 --> 00:35:45.480
They need to be aware that they're losing this view where, well, these startups and these

00:35:45.480 --> 00:35:48.600
tech startups, they're good by default unless they prove otherwise.

00:35:48.600 --> 00:35:49.020
Right?

00:35:49.020 --> 00:35:51.060
They kind of have to prove that they're doing the right thing.

00:35:51.060 --> 00:35:55.420
And so, you know, we used to talk about how big data was going to do a lot of good things

00:35:55.420 --> 00:35:55.940
for people.

00:35:55.940 --> 00:35:57.200
Also the dangers of it.

00:35:57.320 --> 00:36:04.780
But Netflix recently had some kind of social media post that was like, hey, we just noticed

00:36:04.780 --> 00:36:09.780
that there are 10 people that watched this, I don't know, some Christmas show or something.

00:36:09.780 --> 00:36:14.220
We just noticed there's these 10 people that watched the same Christmas show for 18 days

00:36:14.220 --> 00:36:14.700
in a row.

00:36:14.700 --> 00:36:17.240
How sad or something like that.

00:36:17.280 --> 00:36:18.800
I mean, like, that's crazy, right?

00:36:18.800 --> 00:36:19.240
No.

00:36:19.240 --> 00:36:22.840
There's a lot of like wondering like, okay, well, why would you watch the same show 18

00:36:22.840 --> 00:36:23.580
days in a row?

00:36:23.580 --> 00:36:27.680
Maybe it's just on in like some store and they always want to show this Christmas show.

00:36:27.680 --> 00:36:30.080
Maybe you fell asleep 17 times.

00:36:30.080 --> 00:36:31.000
You just want to finish it.

00:36:31.000 --> 00:36:32.980
That's like, this time I'm going to finish it.

00:36:32.980 --> 00:36:34.180
I'm getting a coffee.

00:36:34.180 --> 00:36:34.840
I'm going to watch it.

00:36:34.900 --> 00:36:37.360
I can't even remember what the show was, but it wasn't something amazing.

00:36:37.360 --> 00:36:42.620
I feel like there's this interesting trend of people being more skeptical.

00:36:42.620 --> 00:36:48.300
You know, we have Apple and the encryption more sort of thing going on with Congress and

00:36:48.300 --> 00:36:50.160
the FBI at the beginning of the year.

00:36:50.160 --> 00:36:51.680
There's a lot of stuff there.

00:36:51.680 --> 00:36:53.600
Being cautious is a good thing.

00:36:53.600 --> 00:37:01.480
Like things, people adding things like Google Home and Amazon's, whatever Amazon's thing is

00:37:01.480 --> 00:37:01.740
called.

00:37:01.740 --> 00:37:03.000
Their Echoes and various things.

00:37:03.000 --> 00:37:09.840
Yeah, into their house and in other forms of presence in your life that didn't used

00:37:09.840 --> 00:37:10.420
to be there.

00:37:10.420 --> 00:37:16.220
We do kind of have to trust these companies to not do anything evil with all of that information.

00:37:16.220 --> 00:37:21.900
And yeah, maybe it's good to be a little skeptical and have some people checking out, making sure

00:37:21.900 --> 00:37:23.200
that there's nothing weird going on.

00:37:23.200 --> 00:37:23.720
That's for sure.

00:37:23.720 --> 00:37:29.240
And I do feel like the default behavior or default assumption was, well, it's Google.

00:37:29.240 --> 00:37:32.480
They're probably fine with my email or it's Amazon.

00:37:32.820 --> 00:37:33.540
What are they going to do?

00:37:33.540 --> 00:37:36.140
You know, I'm just buying a book from them and so on.

00:37:36.140 --> 00:37:38.540
And it's kind of not so much that way.

00:37:38.540 --> 00:37:43.860
I have an Amazon Dot, which is one of the Alexa type things.

00:37:43.860 --> 00:37:46.160
And it's sitting here.

00:37:46.160 --> 00:37:48.980
I made it quiet so it wouldn't disrupt the podcast.

00:37:48.980 --> 00:37:52.180
And the way you do that is you press this mute button on it.

00:37:52.180 --> 00:37:52.720
Okay.

00:37:53.880 --> 00:37:58.760
But the color that it changes to when it's not listening is really interesting.

00:37:58.760 --> 00:38:00.640
It changes to a bright red ring.

00:38:00.640 --> 00:38:04.700
Like there's something wrong and dangerous about it when it's not listening.

00:38:04.700 --> 00:38:05.620
Oh, interesting.

00:38:05.860 --> 00:38:11.580
You would think it would turn, I don't know, green or white or like everything's safe.

00:38:11.580 --> 00:38:14.000
Tell, you know, say your secrets, whatever you want.

00:38:14.000 --> 00:38:14.220
Right.

00:38:14.220 --> 00:38:14.820
We're not listening.

00:38:14.820 --> 00:38:16.860
But no, it turns bright red when it's not listening.

00:38:16.860 --> 00:38:17.400
Interesting.

00:38:17.400 --> 00:38:17.780
Yeah.

00:38:17.780 --> 00:38:18.020
Yeah.

00:38:18.020 --> 00:38:18.160
Pretty.

00:38:18.280 --> 00:38:19.640
What does it look like when it is listening?

00:38:19.640 --> 00:38:21.240
It's normally dark.

00:38:21.240 --> 00:38:24.620
But then if it's listening to you, it gets like a blue ring that kind of whirls around.

00:38:24.620 --> 00:38:25.720
It's a pretty cool device.

00:38:25.720 --> 00:38:26.440
I really like it.

00:38:26.440 --> 00:38:29.700
But I only have it in my office, not, you know, the rest of the house.

00:38:29.700 --> 00:38:33.480
So there's two other things around this that I also wanted to talk about.

00:38:33.480 --> 00:38:38.400
And those were, I guess they're the same subject, but from two perspectives.

00:38:38.400 --> 00:38:41.280
And that's sort of this artificial intelligence machine learning.

00:38:41.280 --> 00:38:43.820
And so let me set the stage for you.

00:38:43.820 --> 00:38:49.780
Like last year, there was this experimental vehicle just created by researchers at NVIDIA,

00:38:49.780 --> 00:38:51.200
the graphics people.

00:38:51.200 --> 00:38:59.600
And it was an autonomous car, but it wasn't like what Google or Tesla or GM is doing, where

00:38:59.600 --> 00:39:03.700
there's some sort of conditional programming for it.

00:39:03.700 --> 00:39:08.500
They didn't provide it a single instruction on how to do what it did.

00:39:08.500 --> 00:39:13.160
Instead, what they did is they taught it how to drive by have it watch and observe what humans

00:39:13.160 --> 00:39:14.840
do to cars while humans drive.

00:39:14.840 --> 00:39:16.140
That's pretty interesting.

00:39:16.140 --> 00:39:17.020
It's pretty interesting.

00:39:17.020 --> 00:39:21.540
But then it leads, you know, like this type of thing is not just done with cars, although

00:39:21.540 --> 00:39:23.100
it's pretty illustrative with cars.

00:39:23.100 --> 00:39:29.900
It's also done with mortgages, with cancer diagnoses, various other things, police activity.

00:39:29.900 --> 00:39:36.180
And so if this car crashes in unexpected ways, if it's going down the street and then it just

00:39:36.180 --> 00:39:40.000
swerves over and crashes into a tree, how do you know why it did that?

00:39:40.000 --> 00:39:41.300
You can't ask it.

00:39:41.300 --> 00:39:44.200
It's just, well, it learned pretty well.

00:39:44.200 --> 00:39:45.500
And most of the time it drives right.

00:39:45.500 --> 00:39:46.500
And sometimes it doesn't.

00:39:46.500 --> 00:39:52.340
And so there's some really interesting ramifications of like living with machines that are integral

00:39:52.340 --> 00:39:56.980
to our lives that can't be separated from human society once we depend upon it.

00:39:56.980 --> 00:40:00.980
Like at one point we didn't need the internet, but imagine if you took it away now, right?

00:40:00.980 --> 00:40:02.280
The economies would crumble.

00:40:02.960 --> 00:40:10.360
So there's actually a proposal for a law in the EU saying that you need the ability to

00:40:10.360 --> 00:40:15.060
have the computer tell you why it made a decision about you, right?

00:40:15.060 --> 00:40:18.960
So if you are denied for mortgage, a mortgage loan, why?

00:40:18.960 --> 00:40:19.640
Right?

00:40:19.640 --> 00:40:20.240
Things like that.

00:40:20.240 --> 00:40:27.500
And so these full on deep learning AIs that just learned through observation, they can't

00:40:27.500 --> 00:40:28.780
tell you why they did a thing, right?

00:40:28.780 --> 00:40:32.400
They're not like looking at themselves knowing why.

00:40:32.400 --> 00:40:33.360
Possibly not.

00:40:33.360 --> 00:40:37.140
But I think that systems can be made such that they are interrogatable.

00:40:37.300 --> 00:40:37.940
Yeah, I hope so.

00:40:37.940 --> 00:40:41.200
But I think it's a really interesting trend that we're seeing more and more of this AI

00:40:41.200 --> 00:40:47.100
stuff appear, you know, up and down our interactions where we know less and less about it.

00:40:47.100 --> 00:40:52.400
A couple of interesting things about that is now I don't have the reference for it, but

00:40:52.400 --> 00:40:59.380
there was some talk about how soon should we have driverless cars on the streets?

00:40:59.380 --> 00:41:03.740
And one view is that we should make sure that they're very, very safe.

00:41:04.400 --> 00:41:07.740
And another view is that they just need to be safer than people.

00:41:07.740 --> 00:41:08.080
Yes.

00:41:08.080 --> 00:41:13.220
If you lower the death rate, even if there still is a non-zero death rate, it's still

00:41:13.220 --> 00:41:14.400
better than what we have now.

00:41:14.400 --> 00:41:15.900
And that's interesting.

00:41:15.900 --> 00:41:17.700
I think that's a super interesting trade-off.

00:41:17.700 --> 00:41:23.460
And from a high-level ethics perspective, I think you say as soon as it is safer than

00:41:23.460 --> 00:41:29.420
human drivers, if by deploying this technology, we save lives, it seems like the right thing

00:41:29.420 --> 00:41:29.760
to do.

00:41:29.760 --> 00:41:35.360
But, you know, if one of the behaviors of that life-saving AI is, well, there was an

00:41:35.360 --> 00:41:41.500
oncoming car, so I swerved and drove off a cliff to avoid hitting it and killed my own

00:41:41.500 --> 00:41:44.600
driver instead of I saw there were five people in the oncoming car, for example.

00:41:44.600 --> 00:41:46.640
So I saved four lives, right?

00:41:46.640 --> 00:41:47.560
Or maybe even more.

00:41:48.200 --> 00:41:56.480
By driving this one person off, the news coverage and the human shock of being in control or subject

00:41:56.480 --> 00:41:59.960
to one of these types of systems, it's going to be really interesting to see how that plays

00:41:59.960 --> 00:42:00.180
out.

00:42:00.180 --> 00:42:03.800
But still, from an ethics perspective, I think as soon as it's ready, to be safer.

00:42:03.880 --> 00:42:08.920
But I remember a lot of these questions, like the five versus one, these came up with, I remember

00:42:08.920 --> 00:42:16.620
these in philosophy in college, and I never really thought it would actually apply to technology

00:42:16.620 --> 00:42:17.220
right now.

00:42:17.220 --> 00:42:19.040
That's a really interesting point, because neither did I.

00:42:19.040 --> 00:42:24.240
I remember like, well, if there's a burning building, and there's a baby inside, and there's

00:42:24.240 --> 00:42:30.200
these people over here, and you could only save either the baby or the three older people,

00:42:30.440 --> 00:42:33.440
like, which is the right, you know, these weird trade offs, you're like, well, nobody's

00:42:33.440 --> 00:42:34.360
ever going to do that, right?

00:42:34.360 --> 00:42:38.480
Like, nobody's going to make those conscious decisions to sit there and go, at best, it's

00:42:38.480 --> 00:42:42.040
like you made a split reaction in an emergency, and you did what you did, right?

00:42:42.040 --> 00:42:45.700
But when you're building these systems, you're like encoding it, basically.

00:42:45.700 --> 00:42:48.480
Yeah, it's like, no, this isn't a rhetorical question.

00:42:48.480 --> 00:42:50.400
We really need to know which one should we pick.

00:42:50.400 --> 00:42:54.260
That's going to take some serious adjustments, I think.

00:42:54.260 --> 00:42:54.620
Yeah.

00:42:54.620 --> 00:43:00.280
Since I don't know a lot about machine learning and stuff, when I had Catherine Jarmel on test

00:43:00.280 --> 00:43:04.680
and code, I asked her this, is it even possible to build systems that are interrogatable?

00:43:04.680 --> 00:43:10.980
And her answer went over my head, of course, but she was confident that if those laws are

00:43:10.980 --> 00:43:13.080
in place, that it's going to be possible.

00:43:13.080 --> 00:43:14.320
So that's a good thing.

00:43:14.320 --> 00:43:15.180
Yeah, that's interesting.

00:43:15.180 --> 00:43:20.980
I think, you know, if you design for it, you can probably at least get some kind of, you

00:43:20.980 --> 00:43:22.140
probably can design for it.

00:43:22.140 --> 00:43:25.980
But, you know, we'll probably have to do that as an explicit requirement, right?

00:43:25.980 --> 00:43:26.500
Yeah.

00:43:26.500 --> 00:43:29.220
Because otherwise, you just make it work, and you're happy, right?

00:43:29.220 --> 00:43:29.460
Yeah.

00:43:29.460 --> 00:43:33.260
And the interesting thing about that is, I think, will benefit otherwise, too.

00:43:33.260 --> 00:43:39.960
The reasons why artificial intelligence system came up with a conclusion might surprise us,

00:43:39.960 --> 00:43:45.320
and it might teach us more about how we can better make decisions even without the AI.

00:43:45.320 --> 00:43:53.660
When Google beat the world champion in Go, the top Go players started to study the non-intuitive

00:43:53.660 --> 00:44:00.220
solutions that the AI was, you know, applying to the game to beat this guy, and they started

00:44:00.220 --> 00:44:01.920
becoming better and learning new techniques.

00:44:01.920 --> 00:44:02.580
It's pretty interesting.

00:44:02.700 --> 00:44:08.800
And that'll hopefully happen in, like, detecting problems in CAT scans and things like that.

00:44:08.800 --> 00:44:09.040
Right.

00:44:09.040 --> 00:44:12.460
Reliability in airplane motors so they don't crash and stuff.

00:44:12.460 --> 00:44:12.860
Awesome.

00:44:12.860 --> 00:44:17.940
So I definitely think it's both very positive and kind of, you know, we're going to go back

00:44:17.940 --> 00:44:20.880
to philosophy class as a society as well.

00:44:20.880 --> 00:44:21.460
Yeah.

00:44:21.460 --> 00:44:21.860
Pretty interesting.

00:44:23.480 --> 00:44:26.480
This portion of Talk Python to Me has been brought to you by Rollbar.

00:44:26.480 --> 00:44:30.160
One of the frustrating things about being a developer is dealing with errors.

00:44:30.160 --> 00:44:30.640
Ugh.

00:44:30.640 --> 00:44:36.080
Relying on users to report errors, digging through log files, trying to debug issues, or getting

00:44:36.080 --> 00:44:39.180
millions of alerts just flooding your inbox and ruining your day.

00:44:39.180 --> 00:44:43.940
With Rollbar's full stack error monitoring, you get the context, insight, and control you

00:44:43.940 --> 00:44:45.920
need to find and fix bugs faster.

00:44:46.080 --> 00:44:49.920
Adding Rollbar to your Python app is as easy as pip install Rollbar.

00:44:49.920 --> 00:44:54.160
You can start tracking production errors and deployments in eight minutes or less.

00:44:54.160 --> 00:44:58.320
Are you considering self-hosting tools for security or compliance reasons?

00:44:58.320 --> 00:45:01.900
Then you should really check out Rollbar's compliant SaaS option.

00:45:01.900 --> 00:45:07.060
Get advanced security features and meet compliance without the hassle of self-hosting, including

00:45:07.060 --> 00:45:11.280
HIPAA, ISO 27001, Privacy Shield, and more.

00:45:11.280 --> 00:45:12.660
They'd love to give you a demo.

00:45:12.660 --> 00:45:14.360
Give Rollbar a try today.

00:45:14.360 --> 00:45:18.040
Go to talkpython.fm/rollbar and check them out.

00:45:18.040 --> 00:45:24.500
So another big piece of news that we got was that Python is starting to appear inside of

00:45:24.500 --> 00:45:25.980
some major applications.

00:45:25.980 --> 00:45:26.980
Yeah.

00:45:26.980 --> 00:45:28.760
Surprising ones, I would say, actually.

00:45:28.760 --> 00:45:29.900
They definitely surprised me.

00:45:29.900 --> 00:45:30.220
Yeah.

00:45:30.220 --> 00:45:34.580
We may have jumped the gun on the Excel and Python, but hopefully that'll happen.

00:45:34.580 --> 00:45:34.860
Yeah.

00:45:34.860 --> 00:45:37.600
If we can encourage Microsoft to do that.

00:45:37.600 --> 00:45:42.320
I think it's definitely one of the highest voted things, but it's not a thing yet.

00:45:42.320 --> 00:45:47.540
So one thing, let's start with something that is out right now in 2017.

00:45:47.540 --> 00:45:54.600
And that is SQL Server, Microsoft's database server, which is ubiquitously installed inside

00:45:54.600 --> 00:45:56.120
these large corporations, right?

00:45:56.120 --> 00:46:02.280
It's like inside these large Microsoft Windows enterprises, like SQL Server is just the de facto

00:46:02.280 --> 00:46:02.820
database.

00:46:02.820 --> 00:46:11.240
And what's interesting is now Python 3.5 ships inside SQL Server so you can do in-process machine

00:46:11.240 --> 00:46:13.140
learning against your data.

00:46:13.140 --> 00:46:14.020
Oh, that's great.

00:46:14.020 --> 00:46:14.640
Yeah.

00:46:14.640 --> 00:46:15.020
Cool.

00:46:15.020 --> 00:46:15.460
Yeah.

00:46:15.460 --> 00:46:19.160
So if you've got 100 gigabytes of data in your database, instead of trying to suck that across

00:46:19.160 --> 00:46:26.080
the network or move it around, you just write a stored procedure that is in Python and you

00:46:26.080 --> 00:46:32.520
can use all the Anaconda libraries, TensorFlow, all that kind of stuff like in process, which

00:46:32.520 --> 00:46:34.200
is really going to be pretty awesome.

00:46:34.200 --> 00:46:35.120
Yeah, that's great.

00:46:35.120 --> 00:46:37.960
So that's a concrete thing that has happened.

00:46:38.700 --> 00:46:43.260
A thing that may happen, has got a lot of news in the last couple of weeks is Excel.

00:46:43.260 --> 00:46:46.680
I'm not sure who this came from, but I think it was part of the, what is it?

00:46:46.680 --> 00:46:48.580
People vote on new features or something?

00:46:48.580 --> 00:46:52.080
On UserVoice, they have a, like, what new features do you want in Excel?

00:46:52.080 --> 00:46:53.900
And this is, I think, the most popular one.

00:46:53.900 --> 00:46:58.720
And then they sent out like kind of a survey to find out why people want it.

00:46:58.720 --> 00:47:02.460
We pushed it on Python Bytes to try to get more people to answer this survey.

00:47:02.600 --> 00:47:07.460
I personally don't care a whole lot about SQL Server or Excel, but especially with Excel,

00:47:07.460 --> 00:47:13.100
if currently what you use to program Excel to automate it is this thing called VBA, which

00:47:13.100 --> 00:47:17.660
is like a crap, it's even for Visual Basic, it's like a crappy cut down version of that,

00:47:17.660 --> 00:47:18.200
right?

00:47:18.200 --> 00:47:19.620
It's like a bad programming language.

00:47:19.620 --> 00:47:27.620
And so there's this push to get Python to be the new macro programming language of Python,

00:47:27.840 --> 00:47:35.160
of Excel inside Excel, which would be really awesome because within companies, like Excel

00:47:35.160 --> 00:47:39.880
is probably the biggest database, in quotes, that companies have.

00:47:39.880 --> 00:47:45.240
And so many people work inside of Excel and are sort of Excel experts.

00:47:45.240 --> 00:47:51.180
And if we could get all of those people somewhat interested in Python, that would be just positive

00:47:51.180 --> 00:47:52.060
across the board, I think.

00:47:52.060 --> 00:47:52.820
Yeah, definitely.

00:47:52.820 --> 00:47:53.720
It'd be great.

00:47:53.720 --> 00:47:54.060
Yep.

00:47:54.340 --> 00:47:57.480
So everyone out there, go upload this thing on User Voice.

00:47:57.480 --> 00:47:58.760
We'll put the link in the show notes.

00:47:58.760 --> 00:48:01.880
It might increase the use of Excel, which might not be a good thing.

00:48:01.880 --> 00:48:02.460
Yeah, that's true.

00:48:02.460 --> 00:48:03.380
Maybe it would be negative.

00:48:03.380 --> 00:48:04.840
Try to keep that down.

00:48:04.840 --> 00:48:05.520
All right.

00:48:05.520 --> 00:48:09.760
So the last one for the year has to do with Google, right?

00:48:09.760 --> 00:48:12.280
Google implements Python on Go.

00:48:12.280 --> 00:48:14.380
Is that what we have here?

00:48:14.380 --> 00:48:15.180
That is what we have.

00:48:15.180 --> 00:48:21.900
So the people at YouTube created this thing called Grumpy, which I don't know about naming

00:48:21.900 --> 00:48:25.740
open source projects, but if you want people to love it and to be attracted to it, call it

00:48:25.740 --> 00:48:27.260
Grumpy might not be the best name.

00:48:27.260 --> 00:48:35.180
But instead of having Python implemented in C, as it is in CPython, it's that underlying

00:48:35.180 --> 00:48:38.100
implementation written in Go with some of that.

00:48:38.540 --> 00:48:45.560
So Go's sort of claim to fame is like asynchronous from the scratch, like parallel from the very

00:48:45.560 --> 00:48:46.380
core of it.

00:48:46.380 --> 00:48:51.940
And so if you want to do the parallel asynch.io type stuff we were talking about, then having

00:48:51.940 --> 00:48:55.760
Go as the foundation makes that incredibly easy and powerful.

00:48:55.760 --> 00:48:58.280
Do you have any idea where this stage is?

00:48:58.280 --> 00:49:00.300
Is it still something that's going along?

00:49:00.300 --> 00:49:01.560
Are people contributing to it?

00:49:01.560 --> 00:49:03.220
That's a pretty interesting question.

00:49:03.220 --> 00:49:06.620
I'm not entirely sure what's going on with it.

00:49:06.760 --> 00:49:08.280
I actually think it's a great name.

00:49:08.280 --> 00:49:11.980
It's because people grumpy about having to use Go can use Python instead.

00:49:11.980 --> 00:49:13.280
It's not super active.

00:49:13.280 --> 00:49:16.500
The last check-in was November 21st.

00:49:16.500 --> 00:49:21.060
So that's, and you know, that's about a month ago, right?

00:49:21.060 --> 00:49:26.340
But this also could just be, you know, how much is Google pushing this out?

00:49:26.400 --> 00:49:32.980
I think what this was, was really a research project for what would it look like if we implemented

00:49:32.980 --> 00:49:37.340
the foundations of Python instead of with C, we'll do it with Go.

00:49:37.340 --> 00:49:40.920
And the reason is, this is from the YouTube team.

00:49:40.920 --> 00:49:46.340
And they process, well, YouTube is running the front-end parts on Python 2.7, I believe.

00:49:47.200 --> 00:49:51.760
And they're processing over a million requests per second.

00:49:52.500 --> 00:49:57.560
So they have, let's say, unique parallels and requirements.

00:49:57.560 --> 00:49:58.040
Yeah.

00:49:58.040 --> 00:49:58.500
Right?

00:49:58.500 --> 00:50:01.400
And so they're like, okay, well, what can we do if we wrote this in Go?

00:50:01.400 --> 00:50:02.640
And it's pretty interesting.

00:50:02.640 --> 00:50:07.800
But it's, like you sort of pointed out, it's stalled out a little bit in the last four or five

00:50:07.800 --> 00:50:08.040
months.

00:50:08.040 --> 00:50:12.420
So I'm not sure if it's going to go somewhere, if it's like being worked on internally, and

00:50:12.420 --> 00:50:14.500
then they're going to release it, or I don't know.

00:50:14.540 --> 00:50:17.200
Maybe somebody from YouTube can contact us and tell us what's going on.

00:50:17.200 --> 00:50:20.420
I did have them on the podcast.

00:50:20.420 --> 00:50:27.740
So I had a guy named Dylan Trotter on the podcast who was a major player in this at YouTube and

00:50:27.740 --> 00:50:28.420
talked about it.

00:50:28.420 --> 00:50:30.700
But that was back on episode 95.

00:50:30.700 --> 00:50:32.860
So the news is not super fresh.

00:50:32.860 --> 00:50:38.780
One of the things you brought up here in the notes is that we often think about Python as

00:50:38.780 --> 00:50:42.720
just CPython, but like this Grumpy is another version that's running on Go.

00:50:43.260 --> 00:50:45.140
But there's a whole bunch of others that...

00:50:45.140 --> 00:50:47.240
There's a crazy bunch of others for people who don't know.

00:50:47.240 --> 00:50:47.860
Yeah.

00:50:47.860 --> 00:50:50.940
So you have another article called How Big is the Python Family?

00:50:50.940 --> 00:50:51.420
Yeah.

00:50:51.420 --> 00:50:56.480
This is from the Czech.io guys who have like the gamification of Python learning.

00:50:56.480 --> 00:50:59.560
And they wrote this article called How Big is the Python Family?

00:50:59.560 --> 00:51:07.360
And so we already have CPython, Jython, Iron Python, or one variation of Python on .NET.

00:51:07.360 --> 00:51:08.660
Then there's Python 4.NET.

00:51:08.660 --> 00:51:09.440
There's Cython.

00:51:09.440 --> 00:51:10.200
There's PyPy.

00:51:10.200 --> 00:51:11.280
There's MicroPython.

00:51:11.980 --> 00:51:13.460
And now we have Grumpy.

00:51:13.460 --> 00:51:17.160
And there's also some others with Java that I can't remember the name of, but it wasn't

00:51:17.160 --> 00:51:17.620
in the article.

00:51:17.620 --> 00:51:20.880
I think that's cool that people are tackling it for different things.

00:51:20.880 --> 00:51:23.760
I'm really excited to see MicroPython keep growing.

00:51:23.760 --> 00:51:24.160
Yeah.

00:51:24.160 --> 00:51:26.120
I'm actually really excited about MicroPython.

00:51:26.120 --> 00:51:31.240
So those of you who don't know, MicroPython runs on microcontrollers, so like $5 chips.

00:51:31.240 --> 00:51:36.760
And basically your Python program is the running operating system on there.

00:51:36.780 --> 00:51:38.120
And you can just do whatever you want.

00:51:38.120 --> 00:51:43.520
You can do insane things like you can actually take a Lambda expression and hook it directly

00:51:43.520 --> 00:51:45.600
to a hardware interrupt on the microcontroller.

00:51:45.600 --> 00:51:46.860
Yeah, that's just awesome.

00:51:46.860 --> 00:51:48.280
I mean, it's such a cool little project.

00:51:48.280 --> 00:51:50.200
Nice.

00:51:50.200 --> 00:51:50.580
All right.

00:51:50.620 --> 00:51:52.540
Well, that's our year in review.

00:51:52.540 --> 00:51:53.940
I know we missed a bunch of things.

00:51:53.940 --> 00:52:00.040
And if you feel like something's important, go to talkpython.fm/145 and put an entry

00:52:00.040 --> 00:52:00.880
in the show notes.

00:52:00.880 --> 00:52:05.700
But before we kind of round out what we want to talk about, there's a couple of honorable

00:52:05.700 --> 00:52:06.880
mentions left there, Brian.

00:52:07.020 --> 00:52:13.560
I think it was notable that you, both the podcast Python Bytes and Talk Python, hit every week

00:52:13.560 --> 00:52:16.660
of the year in 2017, which is pretty awesome.

00:52:16.660 --> 00:52:17.120
Thank you.

00:52:17.120 --> 00:52:19.320
Yeah, that's actually quite awesome.

00:52:19.320 --> 00:52:24.740
And thanks for your help with that, because I went and tooled around Europe and the Middle

00:52:24.740 --> 00:52:26.260
East for like four weeks.

00:52:26.260 --> 00:52:28.260
And you and some other folks kept it rolling.

00:52:28.260 --> 00:52:28.960
So awesome.

00:52:28.960 --> 00:52:29.460
Oh, that's right.

00:52:29.460 --> 00:52:30.500
We had some guest hosts.

00:52:30.500 --> 00:52:31.160
That was fun.

00:52:31.160 --> 00:52:31.480
That's right.

00:52:31.680 --> 00:52:34.440
And Test and Code had seven episodes.

00:52:34.440 --> 00:52:36.840
I'm going to try to get an eighth out before the end of the year.

00:52:36.840 --> 00:52:40.340
That's not as impressive, but still going.

00:52:40.340 --> 00:52:43.660
No, but you did 52 weeks of Python Bytes as well.

00:52:43.660 --> 00:52:44.200
And that was awesome.

00:52:44.200 --> 00:52:44.960
Those were very fun.

00:52:44.960 --> 00:52:49.340
And the ones that you did have on Test and Code were really good.

00:52:49.340 --> 00:52:52.960
The Chaos Monkey and some of the other ones, really, really nice.

00:52:52.960 --> 00:52:53.600
All right.

00:52:53.600 --> 00:52:53.940
Thanks.

00:52:53.940 --> 00:53:00.140
One of the most, like the most recent one with testing in machine learning and data science

00:53:00.140 --> 00:53:02.840
with Catherine was really popular, which is great.

00:53:02.840 --> 00:53:03.220
That's cool.

00:53:03.220 --> 00:53:04.100
Yeah, she does a great job.

00:53:04.100 --> 00:53:08.040
The other thing, we didn't bring them up because they weren't huge stories to talk about.

00:53:08.040 --> 00:53:13.900
But I think there's a trend to more and more people embracing virtual environments with

00:53:13.900 --> 00:53:16.300
things like PipEnv coming along.

00:53:16.300 --> 00:53:18.600
And I think that's a good thing.

00:53:18.600 --> 00:53:20.440
People should be using more of those.

00:53:20.440 --> 00:53:21.340
So yay.

00:53:21.340 --> 00:53:22.200
Yeah, yeah, absolutely.

00:53:22.200 --> 00:53:23.600
We have PipEnv.

00:53:23.600 --> 00:53:24.520
We got Tox.

00:53:24.520 --> 00:53:27.260
And there's some other ones as well.

00:53:27.660 --> 00:53:30.180
I think Fade was one that would do interesting things.

00:53:30.180 --> 00:53:35.140
There's a lot of libraries that are really trying to make virtual environments just seamless.

00:53:35.140 --> 00:53:35.960
It's really nice.

00:53:35.960 --> 00:53:37.780
I've been using PyCharm a lot.

00:53:37.780 --> 00:53:43.120
And it has picked up its game with using local virtual environments, too.

00:53:43.120 --> 00:53:44.440
And that's a good thing.

00:53:44.440 --> 00:53:44.900
I love that.

00:53:44.900 --> 00:53:50.020
Create a new project that says, all right, new virtual environment and a well-known folder

00:53:50.020 --> 00:53:51.340
within this project.

00:53:51.340 --> 00:53:52.860
Unless you want to say otherwise.

00:53:52.860 --> 00:53:53.480
This is what we're doing.

00:53:53.480 --> 00:53:54.740
I really think that's the right move.

00:53:54.740 --> 00:53:55.540
Yeah, it's great.

00:53:55.660 --> 00:53:55.840
Awesome.

00:53:55.840 --> 00:53:59.980
Another big thing, which you hinted at at the beginning, is you shipped your book, which

00:53:59.980 --> 00:54:02.800
was quite the long labor of work.

00:54:02.800 --> 00:54:05.600
But you have your Python testing with pytest out.

00:54:05.600 --> 00:54:06.740
And that's been going strong, right?

00:54:06.740 --> 00:54:08.040
It's been phenomenal.

00:54:08.040 --> 00:54:13.480
And people have been sending me pictures on Twitter of them and their book all over the

00:54:13.480 --> 00:54:13.780
world.

00:54:13.780 --> 00:54:19.820
I've got one picture from France and one all over, a couple in Africa.

00:54:19.820 --> 00:54:21.880
It's pretty cool to see all over the world.

00:54:21.880 --> 00:54:22.420
It's great.

00:54:22.420 --> 00:54:25.840
Yeah, it's been great to sort of sit on the sidelines and watch the reception of your

00:54:25.840 --> 00:54:26.040
book.

00:54:26.040 --> 00:54:27.940
So it's on Pragmatic.

00:54:27.940 --> 00:54:30.620
You can get it there in paperback or digital.

00:54:30.620 --> 00:54:32.040
And you can also get it on Amazon, right?

00:54:32.040 --> 00:54:32.900
Yeah, definitely.

00:54:32.900 --> 00:54:33.360
Awesome.

00:54:33.360 --> 00:54:34.400
Okay.

00:54:34.400 --> 00:54:38.700
So it's time to ask you the two questions that are always at the end of the show.

00:54:38.700 --> 00:54:39.160
All right.

00:54:39.160 --> 00:54:39.640
All right.

00:54:39.640 --> 00:54:41.360
So what is your...

00:54:41.360 --> 00:54:44.380
If you're going to write some Python codes, let's say it that way, what editor do you open

00:54:44.380 --> 00:54:44.540
up?

00:54:44.800 --> 00:54:46.100
Now it's PyCharm.

00:54:46.100 --> 00:54:51.520
When you interviewed me a couple of years ago, it was sublime, but I have fully switched

00:54:51.520 --> 00:54:52.340
to PyCharm.

00:54:52.340 --> 00:54:52.720
Interesting.

00:54:52.720 --> 00:54:54.380
I mean, that's my favorite as well.

00:54:54.380 --> 00:54:54.980
Everyone knows.

00:54:54.980 --> 00:54:56.040
I go on and on about it.

00:54:56.040 --> 00:54:56.920
But tell me why.

00:54:56.920 --> 00:54:58.120
Like, what was the motivation?

00:54:58.120 --> 00:55:01.540
The integration with pytest, of course, is pretty darn good.

00:55:01.540 --> 00:55:06.480
And they're working with me to try to get it even more integrated, which I'm pretty impressed

00:55:06.480 --> 00:55:09.760
with the development team to be responsive to some of my requests.

00:55:09.880 --> 00:55:10.360
Yeah, that's awesome.

00:55:10.360 --> 00:55:11.320
They are very responsive.

00:55:11.320 --> 00:55:18.700
The other thing is I write a lot of Markdown, and the Markdown plugins make writing Markdown

00:55:18.700 --> 00:55:21.040
in PyCharm just very, very nice.

00:55:21.040 --> 00:55:24.560
So it's got a side-by-side viewer, and it's cool.

00:55:24.560 --> 00:55:25.140
I like it.

00:55:25.140 --> 00:55:25.560
Yeah, nice.

00:55:25.560 --> 00:55:26.400
All right.

00:55:26.400 --> 00:55:28.100
And notable PyPI package?

00:55:28.100 --> 00:55:29.960
Well, pytest.

00:55:29.960 --> 00:55:30.400
Awesome.

00:55:30.400 --> 00:55:38.600
But I want to add that when I'm using pytest, lately, I'm always adding the pytest HTML plugin

00:55:38.600 --> 00:55:41.200
from Mozilla to make reports.

00:55:41.200 --> 00:55:41.920
It's pretty cool.

00:55:41.920 --> 00:55:42.480
Okay, nice.

00:55:42.480 --> 00:55:47.180
So you get better, like, HTML-friendly, pretty output, not just text logs.

00:55:47.180 --> 00:55:54.000
And it pops up, like, some JavaScript widgets so that you can filter and sort and all sorts

00:55:54.000 --> 00:55:54.600
of great things.

00:55:54.600 --> 00:55:59.460
Yeah, we started the show talking about, with our first item, talking about the Python 3

00:55:59.460 --> 00:56:04.020
and the type annotation stuff with PyAnnotate, mypy, MonkeyTypes, and all that.

00:56:04.020 --> 00:56:07.920
pytest has some PyAnnotate integrations as well, right?

00:56:07.920 --> 00:56:08.400
Oh, right.

00:56:08.400 --> 00:56:09.420
Yeah, I forgot about that.

00:56:09.420 --> 00:56:10.080
That's pretty cool.

00:56:10.080 --> 00:56:10.700
Yeah, I can't remember.

00:56:10.700 --> 00:56:15.680
Was that PyAnnotate-pytest or pytest-PyAnnotate or pytestAnnotate?

00:56:15.680 --> 00:56:16.080
I don't know.

00:56:16.080 --> 00:56:18.600
I could put the link in the show notes, but yeah, it's pretty cool.

00:56:18.600 --> 00:56:19.020
All right.

00:56:19.020 --> 00:56:19.420
All right.

00:56:19.420 --> 00:56:19.940
All right.

00:56:19.980 --> 00:56:25.700
Well, I think it's been quite the year in the Python space for 2017.

00:56:25.700 --> 00:56:29.220
So any final thoughts on what you've observed?

00:56:29.220 --> 00:56:35.140
I just want to thank everybody for their support of both this podcast and all the Python podcasts

00:56:35.140 --> 00:56:35.540
out there.

00:56:35.540 --> 00:56:41.380
And I want to mention to people that if you like this sort of banter of a couple of people

00:56:41.380 --> 00:56:45.680
talking about what's going on in the Python world, you should also check out Python Bytes

00:56:45.680 --> 00:56:46.680
if you haven't already.

00:56:46.800 --> 00:56:47.940
I also want to say thanks.

00:56:47.940 --> 00:56:48.840
That's a great point.

00:56:48.840 --> 00:56:53.980
People out there who listen and give us feedback and really enjoy what we're doing, that's why

00:56:53.980 --> 00:56:54.780
we can do this, right?

00:56:54.780 --> 00:56:55.700
So thank you, everyone.

00:56:55.700 --> 00:57:01.840
And definitely visit pythonbytes.fm and subscribe over there because we do this kind of stuff

00:57:01.840 --> 00:57:05.160
more or less weekly, but in shorter form over on Python Bytes.

00:57:05.360 --> 00:57:10.380
The number of people that showed up to say hi to us at PyCon, we had a booth there.

00:57:10.380 --> 00:57:12.000
That was an incredible turnout.

00:57:12.000 --> 00:57:15.160
A lot of people, a lot of listeners coming up and talking with us.

00:57:15.160 --> 00:57:15.620
It was great.

00:57:15.620 --> 00:57:15.880
Yeah.

00:57:15.880 --> 00:57:17.020
That was really, really awesome.

00:57:17.020 --> 00:57:18.240
And we're going to do it this year, right?

00:57:18.240 --> 00:57:18.800
In Cleveland.

00:57:18.800 --> 00:57:19.860
Yeah, definitely.

00:57:19.860 --> 00:57:22.780
Brian and I have a booth lined up along with some other folks.

00:57:22.780 --> 00:57:25.400
And so be sure to stop by in 2018.

00:57:25.400 --> 00:57:29.080
And get your PyCon ticket because it's going to sell out very soon.

00:57:29.080 --> 00:57:29.580
Definitely.

00:57:29.580 --> 00:57:30.340
I got mine.

00:57:30.340 --> 00:57:31.120
I got mine as well.

00:57:31.120 --> 00:57:32.060
All right, Brian.

00:57:32.220 --> 00:57:36.640
Thank you so much for getting together and sharing this look back at 2017 with me.

00:57:36.640 --> 00:57:37.060
Oh, yeah.

00:57:37.060 --> 00:57:37.540
Thank you.

00:57:37.540 --> 00:57:37.840
You bet.

00:57:37.840 --> 00:57:38.060
Bye.

00:57:38.060 --> 00:57:41.740
This has been another episode of Talk Python to Me.

00:57:41.740 --> 00:57:44.360
Today's guest was Brian Okken.

00:57:44.360 --> 00:57:47.560
And this episode has been brought to you by Linode and Rollbar.

00:57:47.560 --> 00:57:51.980
Linode is bulletproof hosting for whatever you're building with Python.

00:57:51.980 --> 00:57:56.340
Get your four months free at talkpython.fm/linode.

00:57:56.340 --> 00:57:58.860
Just use the code python17.

00:57:58.860 --> 00:58:01.860
Rollbar takes the pain out of errors.

00:58:02.300 --> 00:58:06.620
They give you the context and insight you need to quickly locate and fix errors that

00:58:06.620 --> 00:58:09.560
might have gone unnoticed until your users complain, of course.

00:58:09.560 --> 00:58:14.380
As Talk Python to Me listeners, track a ridiculous number of errors for free at

00:58:14.380 --> 00:58:16.640
rollbar.com slash talkpythontome.

00:58:16.640 --> 00:58:19.220
Are you or a colleague trying to learn Python?

00:58:19.220 --> 00:58:23.880
Have you tried books and videos that just left you bored by covering topics point by point?

00:58:23.940 --> 00:58:29.900
Well, check out my online course Python Jumpstart by building 10 apps at talkpython.fm/course

00:58:29.900 --> 00:58:32.480
to experience a more engaging way to learn Python.

00:58:32.480 --> 00:58:37.300
And if you're looking for something a little more advanced, try my Write Pythonic code course

00:58:37.300 --> 00:58:39.840
at talkpython.fm/pythonic.

00:58:40.700 --> 00:58:42.580
Be sure to subscribe to the show.

00:58:42.580 --> 00:58:44.780
Open your favorite podcatcher and search for Python.

00:58:44.780 --> 00:58:46.020
We should be right at the top.

00:58:46.020 --> 00:58:51.800
You can also find the iTunes feed at /itunes, Google Play feed at /play, and

00:58:51.800 --> 00:58:55.340
direct RSS feed at /rss on talkpython.fm.

00:58:55.720 --> 00:58:57.220
This is your host, Michael Kennedy.

00:58:57.220 --> 00:58:58.560
Thanks so much for listening.

00:58:58.560 --> 00:58:59.640
I really appreciate it.

00:58:59.640 --> 00:59:01.580
Now, get out there and write some Python code.

00:59:01.580 --> 00:59:21.500
I'll see you next time.

00:59:21.500 --> 00:59:51.480
Thank you.

