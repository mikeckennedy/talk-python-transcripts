WEBVTT

00:00:00.001 --> 00:00:04.720
Long gone are the days of the web acting just like linked documents and glorified brochures.

00:00:04.720 --> 00:00:08.360
Web apps of today are just that, rich interactive applications.

00:00:08.360 --> 00:00:14.360
But unlike your average desktop app, these are apps with hundreds of thousands or even millions of concurrent users.

00:00:14.360 --> 00:00:21.940
We expect these apps will instantly reflect changes to the data potentially made by any of these many users connected to the system while using them.

00:00:21.940 --> 00:00:27.500
This has put a strain on the web servers, databases, and architecture in general of our web apps.

00:00:27.980 --> 00:00:36.420
Technology has responded by delivering amazing real-time capabilities with things like web sockets and signal R at the client layer and event-driven systems on the web servers.

00:00:36.420 --> 00:00:40.300
But what about the database? Could it be events all the way down?

00:00:40.300 --> 00:00:44.960
That was the goal of RethinkDB's co-founders when they pitched it to Y Combinator.

00:00:44.960 --> 00:00:48.320
Now it's time to hear the story of RethinkDB with Slava Akshmet.

00:00:48.320 --> 00:00:54.740
This is Talk Python To Me, episode 65, recorded June 22, 2016.

00:00:55.960 --> 00:01:21.860
Welcome to Talk Python To Me, a weekly podcast on Python.

00:01:21.860 --> 00:01:24.940
The language, the libraries, the ecosystem, and the personalities.

00:01:24.940 --> 00:01:27.040
This is your host, Michael Kennedy.

00:01:27.040 --> 00:01:29.040
Follow me on Twitter where I'm @mkennedy.

00:01:29.040 --> 00:01:32.920
Keep up with the show and listen to past episodes at talkpython.fm.

00:01:32.920 --> 00:01:35.500
And follow the show on Twitter via at Talk Python.

00:01:35.500 --> 00:01:39.200
This episode is brought to you by Hired and SnapCI.

00:01:39.200 --> 00:01:45.980
Thank them for supporting the show on Twitter via at Hired underscore HQ and at Snap underscore CI.

00:01:45.980 --> 00:01:48.520
Slava, welcome to the show.

00:01:48.520 --> 00:01:49.960
Thank you. It's good to be here.

00:01:49.960 --> 00:01:58.600
Yeah, it's really excited to talk about my favorite kind of databases, which are document databases and NoSQL databases.

00:01:58.600 --> 00:02:01.420
So we're going to dig into RethinkDB today.

00:02:01.420 --> 00:02:05.640
And you guys have such a cool story and such a cool community that you built up.

00:02:05.640 --> 00:02:07.440
And we'll get into that.

00:02:07.440 --> 00:02:09.140
But before we do, let's start at the beginning.

00:02:09.140 --> 00:02:09.800
What's your story?

00:02:09.800 --> 00:02:10.580
How do you get into programming?

00:02:10.860 --> 00:02:12.260
Well, so I was born in Ukraine.

00:02:12.260 --> 00:02:21.560
And when I was maybe seven or eight years old, my parents got me a machine called ZX Spectrum, which was this tiny computer that plugged into a TV and a cassette player.

00:02:22.220 --> 00:02:23.920
And they got it for me to play games.

00:02:23.920 --> 00:02:26.700
But when you booted it, it had a basic interpreter.

00:02:26.700 --> 00:02:32.900
And somehow, I don't know what happened, but the basic interpreter was more interesting to me than the video games.

00:02:32.900 --> 00:02:39.900
And I just kind of started learning basic and learning, you know, learning how to type commands and what they do.

00:02:39.900 --> 00:02:42.480
And eventually I wanted to make games.

00:02:42.480 --> 00:02:46.380
So, you know, I used the basic interpreter's graphing library.

00:02:46.740 --> 00:02:47.660
And it was really slow.

00:02:47.660 --> 00:02:51.620
So that's how I got into assembly because I realized I could speed things up.

00:02:51.620 --> 00:02:54.580
And, yeah, and that was the beginning.

00:02:54.580 --> 00:02:56.020
That's a bit of a jump, right?

00:02:56.020 --> 00:02:56.840
It was.

00:02:56.840 --> 00:02:58.600
It was a bit of a jump.

00:02:58.600 --> 00:03:00.400
And at the time, like, there was no internet.

00:03:00.400 --> 00:03:06.380
So I had to work off of a manual that was kind of printed on a criminal printer and half the stuff was missing.

00:03:06.380 --> 00:03:08.160
But that's how I got into it.

00:03:08.160 --> 00:03:09.120
And I just never stopped.

00:03:09.120 --> 00:03:10.700
Yeah, that's awesome.

00:03:10.700 --> 00:03:16.200
I've also made that jump from high-level languages to assembly for a little bit of time.

00:03:16.440 --> 00:03:19.260
And, yeah, I kind of left that behind.

00:03:19.260 --> 00:03:22.840
But those were basically the options in the early days, right?

00:03:22.840 --> 00:03:24.940
Basic and assembly.

00:03:24.940 --> 00:03:27.260
You could pick your extreme and go to it, I guess.

00:03:27.260 --> 00:03:30.760
Yeah, on the ZX Spectrum, there were really two options.

00:03:30.760 --> 00:03:32.940
It was the built-in basic interpreter and assembly.

00:03:32.940 --> 00:03:34.400
There were no compilers.

00:03:34.400 --> 00:03:35.500
Like, you couldn't get.

00:03:35.500 --> 00:03:38.500
I don't think you could get a different language on it.

00:03:38.500 --> 00:03:40.980
So, yeah, it was just those two things.

00:03:41.280 --> 00:03:46.700
And I figured out how to mix and match them and, you know, do all kinds of cool stuff on that machine.

00:03:46.700 --> 00:03:54.320
Yeah, I probably learned, like, 75% of everything I know now about programming, just, like, tinkering.

00:03:54.320 --> 00:03:56.020
It was the ZX Spectrum.

00:03:56.280 --> 00:03:58.260
And it was the kind of a computer that's similar.

00:03:58.260 --> 00:03:59.700
I guess it's similar to the Atari.

00:03:59.700 --> 00:04:01.600
But we couldn't get that in Ukraine.

00:04:01.600 --> 00:04:06.000
So, you know, I was stuck with that, like, four kilobyte of memory, you know.

00:04:06.000 --> 00:04:07.860
I couldn't save anything.

00:04:07.860 --> 00:04:09.440
Couldn't save anything.

00:04:09.440 --> 00:04:10.620
So that's how I got started.

00:04:10.620 --> 00:04:11.580
Wow, that's cool.

00:04:11.580 --> 00:04:13.140
You said it connected to a television.

00:04:13.140 --> 00:04:16.100
What do you think the resolution in pixels of that thing was?

00:04:16.220 --> 00:04:24.260
Oh, man, so I don't remember, but I think it was, like, 120 pixels vertical or something like that.

00:04:24.260 --> 00:04:25.500
It was really small.

00:04:25.500 --> 00:04:26.780
Probably.

00:04:26.780 --> 00:04:28.600
Or, you know, it didn't feel that way at the time.

00:04:28.600 --> 00:04:31.100
No, it felt amazing at the time, right?

00:04:31.100 --> 00:04:31.520
It felt amazing.

00:04:31.520 --> 00:04:32.380
Yeah, it was amazing.

00:04:32.380 --> 00:04:34.480
I'm sure it wouldn't be fun programming it now.

00:04:34.480 --> 00:04:38.080
Yeah, it's probably a thing better left to nostalgia.

00:04:38.080 --> 00:04:41.520
Yeah, I was actually thinking about buying it on eBay.

00:04:41.520 --> 00:04:42.540
Oh, nice.

00:04:42.540 --> 00:04:45.880
Because they're available and they're pretty cheap, but I never actually got around to it,

00:04:45.880 --> 00:04:46.940
and I don't know if I ever will.

00:04:46.940 --> 00:04:49.720
Yeah, nostalgia.

00:04:49.720 --> 00:04:50.320
How interesting.

00:04:50.320 --> 00:04:53.020
So let's talk about something a little more modern.

00:04:53.020 --> 00:04:58.680
You built a pretty amazing database, a document database called RethinkDB,

00:04:58.680 --> 00:05:03.940
and your tagline is it's a database for the real-time web.

00:05:03.940 --> 00:05:05.200
What is RethinkDB?

00:05:05.200 --> 00:05:09.120
Well, so RethinkDB is a NoSQL scalable real-time database.

00:05:09.420 --> 00:05:14.080
When you start out using it, it's fairly similar to MangaDB in the sense that you could store

00:05:14.080 --> 00:05:15.680
and retrieve JSON documents.

00:05:15.680 --> 00:05:19.200
You could scale it out to multiple machines or multiple data centers.

00:05:19.200 --> 00:05:21.740
But that's pretty much where the similarities end.

00:05:21.740 --> 00:05:28.580
What's unique about RethinkDB that you can't get in any other database that I know of right now

00:05:28.580 --> 00:05:32.500
is that it's designed for real-time applications.

00:05:32.500 --> 00:05:36.980
And the way that it works is in a traditional database, you send a query and get a response,

00:05:36.980 --> 00:05:37.740
and then you're done.

00:05:37.740 --> 00:05:39.800
And if you want an update, you have to send another query.

00:05:39.800 --> 00:05:43.400
And in RethinkDB, you can subscribe to queries.

00:05:43.400 --> 00:05:47.540
So you could say, I'm interested in the top 10 selling books in my bookstore.

00:05:47.920 --> 00:05:52.720
And then any time the data in the database changes in the way that updates that results,

00:05:52.720 --> 00:05:55.720
the database pushes the notification to the application.

00:05:55.720 --> 00:06:00.520
So if you're building any kind of a collaborative application or a multiplayer game where things

00:06:00.520 --> 00:06:05.620
change all the time or some analytic software where you need updates right away,

00:06:05.620 --> 00:06:08.480
RethinkDB is a really, really great database for that.

00:06:08.580 --> 00:06:10.820
And it's unique, I think, because no one else does that.

00:06:10.820 --> 00:06:17.820
Where your application is designed around this event-driven model where anytime something

00:06:17.820 --> 00:06:22.480
changes in the database, you get an event saying, hey, the relevant results that you're interested

00:06:22.480 --> 00:06:23.380
in are now different.

00:06:23.380 --> 00:06:28.040
And that makes it dramatically, dramatically easier for people to build real-time apps.

00:06:28.040 --> 00:06:29.740
Yeah, that's really cool.

00:06:29.740 --> 00:06:32.420
And that is quite a unique capability.

00:06:32.420 --> 00:06:35.140
I'm quite sure that MongoDB does not have that.

00:06:35.520 --> 00:06:39.220
You've got to ask the question over and over to get new answers.

00:06:39.220 --> 00:06:45.880
In modern databases that aren't RethinkDB, you can kind of fake this by doing various things.

00:06:45.880 --> 00:06:49.740
Like you could poll and you can ask the same question over and over again.

00:06:49.740 --> 00:06:52.240
You could subscribe to the replication log.

00:06:52.240 --> 00:06:56.560
There are things users can do to get a semblance of this functionality.

00:06:56.560 --> 00:07:02.080
But it's really different when it's baked into the product or project on day one.

00:07:02.080 --> 00:07:05.040
Because it just opens up a whole world of possibilities.

00:07:05.040 --> 00:07:10.360
And when it's a higher level feature that you can run on most queries or almost all queries,

00:07:10.360 --> 00:07:16.360
it opens up so many possibilities that you can't really do by faking it in other systems.

00:07:16.360 --> 00:07:17.880
Yeah, I totally agree.

00:07:17.880 --> 00:07:18.840
That sounds great.

00:07:18.840 --> 00:07:21.780
I recall you telling a story.

00:07:21.780 --> 00:07:23.020
I heard it somewhere.

00:07:23.380 --> 00:07:28.920
You sort of talked about the progression of real-time systems, right?

00:07:29.060 --> 00:07:37.180
So we have the front end being real-time with things like Node.js and SignalR and some of these things that happen on the server.

00:07:37.180 --> 00:07:39.080
You can get real-time stuff there.

00:07:39.080 --> 00:07:41.660
But then it kind of stops.

00:07:41.660 --> 00:07:42.980
Can you maybe tell that story?

00:07:42.980 --> 00:07:47.540
I think that'll help really cement what your value proposition is.

00:07:47.740 --> 00:07:51.940
Yeah, so traditionally web applications were built around request response.

00:07:51.940 --> 00:07:54.180
Like that's how HTTP works, right?

00:07:54.180 --> 00:07:56.800
You type in a web address in the browser.

00:07:56.800 --> 00:07:58.840
The browser sends a request to the web server.

00:07:58.840 --> 00:08:02.500
The web server sends a request to the database to get some information.

00:08:02.500 --> 00:08:03.580
The database responds.

00:08:03.580 --> 00:08:04.720
The web server responds.

00:08:04.720 --> 00:08:05.960
And then you render the page.

00:08:05.960 --> 00:08:08.480
So that's how web apps were built traditionally.

00:08:08.480 --> 00:08:15.720
And then things started changing because people realized that to have really immersive experiences,

00:08:15.720 --> 00:08:20.340
they have to push information to the browser without reloading the whole page, refreshing the whole page.

00:08:20.340 --> 00:08:25.520
So what started happening is that people started building applications around push functionality.

00:08:25.520 --> 00:08:28.720
So JavaScript is fundamentally event-driven.

00:08:28.720 --> 00:08:35.760
And people started building front-end frameworks like Angular and React around the idea of events and event-driven programming.

00:08:35.980 --> 00:08:40.560
And then as that became available, you needed that on the back end.

00:08:40.560 --> 00:08:44.820
And we have things like SignalR or WebSockets to allow push to the browser.

00:08:44.820 --> 00:08:51.960
So on the back end, Node.js is this fundamentally event-driven programming model where you can respond to events.

00:08:51.960 --> 00:08:54.900
But then when you get to the database, it still requests response.

00:08:54.900 --> 00:09:02.680
And the idea behind RethinkDB was, well, let's make a full stack event-driven programming, environment programming model,

00:09:02.680 --> 00:09:06.920
where you don't stop at Node.js, but the database itself is event-driven,

00:09:06.920 --> 00:09:09.220
where you say, I'm interested in these things.

00:09:09.220 --> 00:09:12.240
And then anytime something changes, we fire an event.

00:09:12.240 --> 00:09:15.500
And then Node.js processes that event and pushes that to the browser.

00:09:15.500 --> 00:09:16.980
And then the browser processes that event.

00:09:16.980 --> 00:09:21.140
So what that does is it gives you a complete full stack event-driven programming model.

00:09:21.360 --> 00:09:27.680
And now you don't have to fake events when you go from the Node.js layer to the database layer.

00:09:27.680 --> 00:09:28.840
The whole thing is event-driven.

00:09:28.840 --> 00:09:35.940
And that makes just real-time architecture so much easier to deal with and opens up so many possibilities for building apps

00:09:35.940 --> 00:09:39.520
because things that took a week now take a couple of hours.

00:09:39.940 --> 00:09:42.860
Yeah, that's really cool because those are hard problems to solve.

00:09:42.860 --> 00:09:46.480
And if you can just plug the pieces together, that's wonderful, right?

00:09:46.480 --> 00:09:47.060
Yeah.

00:09:47.060 --> 00:09:49.780
So for all of these problems, you can kind of hack around them.

00:09:49.780 --> 00:09:51.860
And people have done that for a long time.

00:09:51.860 --> 00:09:55.540
I mean, people build real-time event-driven applications before everything could be existed.

00:09:55.540 --> 00:09:59.100
But hacking around this problem, it takes a long time.

00:09:59.100 --> 00:10:01.760
People solve the same problem over and over and over again.

00:10:01.760 --> 00:10:02.580
It's really hard.

00:10:03.080 --> 00:10:05.040
You kind of need the main expertise.

00:10:05.040 --> 00:10:10.520
So you need a team of people that really understand this problem and got burned a couple of times by trying to solve it.

00:10:10.520 --> 00:10:14.680
And the idea was like, hey, let's just abstract this so people never have to deal with this again.

00:10:14.680 --> 00:10:15.600
Yeah, that's great.

00:10:15.600 --> 00:10:20.480
Can you give some examples of some apps that people have built or the types of apps people have built?

00:10:20.480 --> 00:10:22.920
Yeah, so RethinkDB has a pretty huge community.

00:10:22.920 --> 00:10:26.780
So we have about 200,000 developers building applications on it now.

00:10:26.780 --> 00:10:29.840
And it's doubling about every three to four months.

00:10:29.840 --> 00:10:32.580
So people have built all kinds of apps.

00:10:32.580 --> 00:10:34.040
People have built games.

00:10:34.040 --> 00:10:36.260
People have built analytics apps.

00:10:36.260 --> 00:10:39.440
Just anything you can imagine that can be built from mobile or the web.

00:10:39.440 --> 00:10:49.640
One of our big examples is Fidelity Investments, which is a big investment firm, built a mobile app for their users to manage their accounts in real time.

00:10:49.640 --> 00:10:52.020
So you open the Fidelity mobile app.

00:10:52.020 --> 00:10:53.980
All of that is backed by RethinkDB.

00:10:54.220 --> 00:11:03.220
I think that's probably the biggest use case I can talk about where RethinkDB backs basically like 40 or 50 million users that Fidelity has.

00:11:03.220 --> 00:11:11.240
Some others like Rethink is used by NASA for some real-time updates on what happens with extravehicular suit activity.

00:11:11.400 --> 00:11:17.820
So every time astronauts go on a spacewalk, there's a bunch of data that's being generated, being processed in real time.

00:11:17.820 --> 00:11:19.360
So it's all over the place.

00:11:19.360 --> 00:11:29.100
People use it for financial applications, for just web apps, for collaborative apps, and for things I personally wouldn't imagine like spacesuit activity.

00:11:29.180 --> 00:11:30.920
Yeah, that's really awesome.

00:11:30.920 --> 00:11:36.100
I would have never thought spacewalks would be one of the use cases, but yeah, that's really cool.

00:11:36.100 --> 00:11:40.220
Yeah, we definitely did not design it with that in mind.

00:11:40.220 --> 00:11:43.380
I would never think about that in a million years.

00:11:43.380 --> 00:11:44.300
Let's see.

00:11:44.300 --> 00:11:47.500
If we set up a VPN from the space shuttle, then...

00:11:47.500 --> 00:11:48.040
No, just kidding.

00:11:48.040 --> 00:11:52.280
Yeah, no, it's an SSH connection, probably.

00:11:52.280 --> 00:11:53.340
Yeah, probably.

00:11:53.340 --> 00:11:58.540
Okay, so let's talk about the origins of RethinkDB.

00:11:58.540 --> 00:12:03.340
What gave you the idea that, hey, we should create our own database?

00:12:03.340 --> 00:12:04.820
Like, that's pretty daunting, right?

00:12:04.820 --> 00:12:12.280
Before we started, I was in grad school, and I was actually working on mammalian brain simulation on supercomputers.

00:12:12.280 --> 00:12:19.280
So I knew a lot about just distributed computing, and I knew a lot about the idea of, like, real time.

00:12:19.700 --> 00:12:25.880
Because in brain simulation, you generate a lot of data that you have to send between multiple machines,

00:12:25.880 --> 00:12:30.660
and there are a lot of challenges in figuring out how to parallelize all that stuff, because the network is the bottleneck.

00:12:30.660 --> 00:12:36.740
And my co-founder, who was also at the same university, he was more of a human-computer interaction expert.

00:12:36.740 --> 00:12:39.280
Like, he basically was really interested in user interfaces.

00:12:39.280 --> 00:12:44.500
And when we met, we just kind of got together, and we spent, like, hours and hours talking about computing

00:12:44.500 --> 00:12:46.780
and the future of software and where things are going.

00:12:46.980 --> 00:12:51.460
And it was obvious to us that the world is really becoming more real-time.

00:12:51.460 --> 00:12:53.180
Like, there's a ton of data being generated.

00:12:53.180 --> 00:12:56.980
We generate more and more and more data every day, probably exponentially.

00:12:56.980 --> 00:13:03.340
And it was very clear that, like, these static user interfaces just aren't going to last very long,

00:13:03.340 --> 00:13:05.200
and everything's becoming real-time.

00:13:05.440 --> 00:13:08.820
So we looked at how applications are being built, how they're being deployed.

00:13:08.820 --> 00:13:15.940
And it occurred to us that, like, there's a lot of innovation around real-time almost everywhere in the stack except the database.

00:13:16.140 --> 00:13:25.540
And it was just the part we thought was very important to build to advance this mission of kind of unlocking real-time apps for anybody who wanted to do it.

00:13:25.540 --> 00:13:31.400
Like, what we want to do, and it's our goal even now, is to make real-time be the default.

00:13:31.400 --> 00:13:37.040
So when you build an app, it should be real-time by default, not static by default, and then people have to do a lot of work.

00:13:37.040 --> 00:13:38.440
So that's how we got started.

00:13:38.680 --> 00:13:40.820
And, yeah, building a database is a daunting process.

00:13:40.820 --> 00:13:41.940
It's a very hard problem.

00:13:41.940 --> 00:13:42.780
It's a lot of work.

00:13:42.780 --> 00:13:47.500
But we were excited about, you know, we kind of, we didn't look at the downsides.

00:13:47.500 --> 00:13:50.660
We mostly looked at, hey, what is this going to make possible?

00:13:50.660 --> 00:13:52.300
And it was just really exciting.

00:13:52.300 --> 00:13:54.800
So we never thought about how long it will take.

00:13:54.800 --> 00:13:55.400
Yeah, sure.

00:13:55.400 --> 00:13:56.760
And people are successful, right?

00:13:56.760 --> 00:14:03.460
They have this dream and this vision, and it's like, we're going to make it through the challenging bits, and we're going to create this thing, right?

00:14:03.460 --> 00:14:07.400
So it sounds like you were really driven to sort of solve that real-time problem.

00:14:07.400 --> 00:14:08.300
We were.

00:14:08.300 --> 00:14:11.260
I mean, to be honest, we also thought it would be easier than it was.

00:14:11.260 --> 00:14:15.000
And we thought it would take a lot less time than it did.

00:14:15.000 --> 00:14:19.760
So a lot of it was naivete, but it served us pretty well, I think, in hindsight.

00:14:19.760 --> 00:14:23.380
Yeah, maybe it didn't let you get through.

00:14:23.380 --> 00:14:25.680
Otherwise, it would have been like, well, that's too much work.

00:14:25.680 --> 00:14:26.100
Forget it.

00:14:26.100 --> 00:14:26.860
That's cool.

00:14:26.860 --> 00:14:30.400
And one of the things you did pretty early on was you went through Y Combinator, right?

00:14:30.400 --> 00:14:31.380
The accelerator.

00:14:31.380 --> 00:14:32.240
Yeah, we did.

00:14:32.240 --> 00:14:32.680
Cool.

00:14:32.680 --> 00:14:34.600
So what was that experience like?

00:14:34.600 --> 00:14:35.220
What year was that?

00:14:35.220 --> 00:14:37.940
So we went through Y Combinator in the summer of 2009.

00:14:38.000 --> 00:14:43.000
And at the time, me and Michael, my co-founder, we were in New York, and we were in school.

00:14:43.000 --> 00:14:47.860
And we had this idea, and we applied to Y Combinator.

00:14:47.860 --> 00:14:48.640
We got an interview.

00:14:48.640 --> 00:14:49.820
So we flew to California.

00:14:49.820 --> 00:14:51.820
The interview was like eight minutes.

00:14:52.460 --> 00:14:57.280
We got in, and we knew we wanted to go to California and start a company.

00:14:57.280 --> 00:14:59.280
So we just packed up our bags and moved here.

00:14:59.280 --> 00:15:04.440
And Y Combinator for us was great because we were new to the startup world.

00:15:04.440 --> 00:15:08.440
We kind of knew a lot about software, but we didn't know a lot about how to start businesses

00:15:08.440 --> 00:15:12.020
and hire people and manage people and how any of that stuff works.

00:15:12.220 --> 00:15:16.680
And Y Combinator would invite speakers who were successful in the startup world.

00:15:16.680 --> 00:15:19.680
And every Tuesday, they'd have a new speaker who would talk about their story.

00:15:19.680 --> 00:15:25.800
And just that process of listening to people who've built successful things before was extremely

00:15:25.800 --> 00:15:32.200
useful because it got us in the mindset of what it takes to build something that people

00:15:32.200 --> 00:15:36.960
really want to use, like build something that makes, that's valuable for a lot of people.

00:15:36.960 --> 00:15:38.240
So that was great.

00:15:38.240 --> 00:15:40.060
I mean, it was a phenomenal experience.

00:15:40.060 --> 00:15:41.520
I'd recommend it to anybody.

00:15:41.520 --> 00:15:42.020
Yeah.

00:15:42.020 --> 00:15:46.440
I've never gone through an experience like that, but it sounds really cool and like it would

00:15:46.440 --> 00:15:47.220
be very beneficial.

00:15:47.220 --> 00:15:53.300
So, you know, I think when people are new and they're thinking about starting businesses,

00:15:53.300 --> 00:15:56.460
they often think about the technology, right?

00:15:56.460 --> 00:16:03.880
Like if we build this app and have the best technology, just this work, just the way that

00:16:03.880 --> 00:16:10.080
it should solve whatever problem that solving, that's only like 30%, 20% of what it takes to

00:16:10.080 --> 00:16:14.180
start launch and be successful with a technology business, right?

00:16:14.180 --> 00:16:18.520
There's all the marketing and the growth hacking and the user outreach.

00:16:18.520 --> 00:16:22.280
And like how much of those types of things did you learn at YC?

00:16:22.280 --> 00:16:24.560
We learned a lot about that at YC.

00:16:24.560 --> 00:16:30.600
It was, I'd say, so everyone who goes to YC is very competent technically.

00:16:30.600 --> 00:16:35.240
And that was the whole premise of YC, that you get really technically competent people and

00:16:35.240 --> 00:16:39.000
you teach them all these other things that they need to know to build something successful.

00:16:39.000 --> 00:16:42.900
So technology itself, I mean, it permeated everything.

00:16:42.900 --> 00:16:47.860
It was in the background of everything because obviously it's about tech companies, but it wasn't,

00:16:47.860 --> 00:16:50.580
we didn't learn like how to program at YCM or anything.

00:16:50.580 --> 00:16:53.260
It was all about how do you build a successful project?

00:16:53.260 --> 00:16:54.800
How do you grow it?

00:16:54.800 --> 00:16:57.840
How do you build a product that people really care about?

00:16:57.840 --> 00:16:59.740
How do you think about markets?

00:16:59.740 --> 00:17:00.700
Things like that.

00:17:00.700 --> 00:17:03.660
It was very little of it was about the technology itself.

00:17:03.660 --> 00:17:09.400
Like the whole thing was under the premise that technology is super important and technology

00:17:09.400 --> 00:17:11.460
unlocks all kinds of possibilities for people.

00:17:12.000 --> 00:17:14.160
But everyone at YC was already good at that.

00:17:14.160 --> 00:17:18.300
So the bigger part, the much bigger part was around all these other things you mentioned.

00:17:18.300 --> 00:17:18.760
Right.

00:17:18.760 --> 00:17:19.080
Yeah.

00:17:19.080 --> 00:17:21.440
So the technology is basically table stakes.

00:17:21.440 --> 00:17:25.480
Like you don't even get there if you don't have that skill set.

00:17:25.480 --> 00:17:29.680
But it's teaching you all the things you didn't maybe even know that you needed to know to

00:17:29.680 --> 00:17:30.100
succeed.

00:17:30.100 --> 00:17:30.400
Right.

00:17:30.720 --> 00:17:30.880
Yeah.

00:17:30.880 --> 00:17:35.560
I think the premise of YCM is if you take technically competent people, all this other

00:17:35.560 --> 00:17:36.880
stuff, you can teach them.

00:17:36.880 --> 00:17:39.740
Marketing and growth hacking and all these things.

00:17:39.740 --> 00:17:41.640
Like it's hard, but it's not rocket science.

00:17:41.640 --> 00:17:46.300
Like if you can build a compiler, you could probably figure out how to market your product.

00:17:46.300 --> 00:17:47.980
That's the premise of YC.

00:17:47.980 --> 00:17:51.080
And the idea was like, hey, there's a lot of information there.

00:17:51.080 --> 00:17:52.780
It's not very hard, but it's hard to get.

00:17:52.780 --> 00:17:55.460
So we're just going to teach people all this stuff and see what happens.

00:17:55.460 --> 00:17:57.060
And I think the proof is in the pudding.

00:17:57.060 --> 00:17:59.160
Like YC is really successful now.

00:17:59.160 --> 00:18:21.140
This episode is brought to you by SnapCI, the only hosted cloud-based continuous integration

00:18:21.140 --> 00:18:25.620
and delivery solution that offers multi-stage pipelines as a built-in feature.

00:18:26.280 --> 00:18:31.040
SnapCI is built to follow best practices like automated builds, testing before integration,

00:18:31.040 --> 00:18:34.120
and provides high visibility into who's doing what.

00:18:34.120 --> 00:18:39.360
Just connect Snap to your GitHub repo and it automatically builds the first pipeline for you.

00:18:39.360 --> 00:18:43.860
It's simple enough for those who are new to continuous integration, yet powerful enough

00:18:43.860 --> 00:18:45.660
to run dozens of parallel pipelines.

00:18:45.660 --> 00:18:47.980
More reliable and frequent releases.

00:18:47.980 --> 00:18:48.880
That's Snap.

00:18:48.880 --> 00:19:08.460
One of the cool aspects of RethinkDB is it's open source, right?

00:19:08.460 --> 00:19:10.380
Like I can go to GitHub and get it.

00:19:10.640 --> 00:19:15.380
I go to github.com/rethinkDB slash rethinkDB to get the database itself.

00:19:15.380 --> 00:19:17.420
And it's really popular, right?

00:19:17.420 --> 00:19:19.260
It has over 14,000 stars.

00:19:19.260 --> 00:19:20.520
Yeah.

00:19:20.520 --> 00:19:26.800
So you said that it was one of the biggest C++ open source projects on GitHub or something like that.

00:19:26.800 --> 00:19:27.260
Is this true?

00:19:27.260 --> 00:19:27.700
Yes.

00:19:27.700 --> 00:19:28.840
It depends on how you measure.

00:19:28.840 --> 00:19:33.780
So if you go to github.com/explore, I think they keep changing the interface.

00:19:33.780 --> 00:19:35.200
I don't know if you can check this now.

00:19:35.200 --> 00:19:37.300
But at least they used to be.

00:19:37.300 --> 00:19:39.760
So you used to be able to look at trending projects.

00:19:39.760 --> 00:19:41.000
I think that's still available.

00:19:41.000 --> 00:19:46.800
And you used to be able to look at, like filtered out by stars, by language, by all kinds of things.

00:19:46.800 --> 00:19:47.920
I haven't done this in a while.

00:19:47.920 --> 00:19:53.500
But yeah, Rethink has been the biggest trending C++ project on GitHub for a long, long time.

00:19:53.500 --> 00:19:55.300
Pretty much since we launched it, actually.

00:19:55.900 --> 00:19:56.060
Yeah.

00:19:56.060 --> 00:19:57.400
That's really cool.

00:19:57.400 --> 00:19:58.640
When did you actually launch it?

00:19:58.640 --> 00:20:00.720
You said you did Y Combinator in 2009.

00:20:00.720 --> 00:20:03.620
When was there a thing that you let loose on the world?

00:20:03.620 --> 00:20:08.320
I think it took about three and a half years to get the first version out.

00:20:08.320 --> 00:20:10.660
My memory is a little hazy on this because it's been a while.

00:20:10.660 --> 00:20:12.640
But yeah, it's a hard problem.

00:20:12.640 --> 00:20:15.520
And it took a while to build the first version of the product.

00:20:15.520 --> 00:20:16.680
How many people worked on it?

00:20:16.680 --> 00:20:18.860
So right now we're 18 people.

00:20:18.860 --> 00:20:23.620
But before the first version, I think the whole company was about seven.

00:20:23.620 --> 00:20:24.060
Okay.

00:20:24.660 --> 00:20:26.740
It's definitely a big project to undertake.

00:20:26.740 --> 00:20:28.120
So yeah, very cool.

00:20:28.120 --> 00:20:36.840
When I look at GitHub, it tells me that it's like 50% C++, 26% Python, some JavaScript.

00:20:36.840 --> 00:20:39.720
What are the technologies inside?

00:20:39.720 --> 00:20:40.280
Yeah.

00:20:40.280 --> 00:20:44.420
So Rethink is pretty complex because it touches almost every part of the stack.

00:20:44.420 --> 00:20:50.940
And on the bottom of the stack, it touches the operating system and all the APIs that we have to deal with.

00:20:51.000 --> 00:20:54.380
To do disk access and network access and memory management and things like that.

00:20:54.380 --> 00:20:58.800
So all of that stuff is done in C++ and even a little bit of assembly, actually.

00:20:58.800 --> 00:21:06.440
And then around the core C++ database, there are a lot of technologies to connect it to users.

00:21:06.600 --> 00:21:09.520
So the drivers are done in a lot of different languages.

00:21:09.520 --> 00:21:15.900
Like there's a Node.js driver, a Python driver, a Java driver, Ruby driver, just drivers for all kinds of languages.

00:21:15.900 --> 00:21:20.180
So that is written in whatever native language the driver is for.

00:21:20.620 --> 00:21:28.320
Then there is a lot of code for testing different things, for testing the query language, testing the distributed system, all kinds of tasks.

00:21:28.320 --> 00:21:30.040
So most of that is written in Python.

00:21:30.040 --> 00:21:32.140
And then there's a lot of glue code.

00:21:32.140 --> 00:21:33.360
You know, there are Bash scripts.

00:21:33.360 --> 00:21:39.840
So we kind of, we try to minimize the number of languages and technologies that we use just to kind of keep it contained.

00:21:40.400 --> 00:21:46.640
But it, so most of it is C++, but we really have, we have a lot of different things that we use.

00:21:46.640 --> 00:21:49.440
I'd say the biggest ones are C++, Python, and Bash.

00:21:49.440 --> 00:21:52.260
And then there are drivers for almost every language.

00:21:52.260 --> 00:21:52.620
Right.

00:21:52.620 --> 00:21:56.200
And you pretty much have to use those languages to write them usually anyway.

00:21:56.200 --> 00:21:56.660
Yeah.

00:21:56.880 --> 00:21:57.160
Okay.

00:21:57.160 --> 00:21:58.560
Cool.

00:21:58.560 --> 00:22:07.360
So when I think about NoSQL databases, you've got the document databases, you've got key value stores and those sorts of things.

00:22:07.360 --> 00:22:16.760
It feels to me like document databases are the kind of database that you could use as your sole database for your app.

00:22:16.760 --> 00:22:17.020
Right.

00:22:17.020 --> 00:22:24.320
There's some things like Redis, DynamoDB, where you probably use it for like some particular use case, but it's not your only data store.

00:22:24.600 --> 00:22:32.240
What do you think about this idea that document databases could replace your relational database rather than just be another thing that you use in parallel?

00:22:32.240 --> 00:22:37.900
Well, so databases are fundamentally very horizontal technologies and you could use them.

00:22:37.900 --> 00:22:41.160
They're applicable to a lot of different problems.

00:22:41.160 --> 00:22:50.340
And I think that so relational databases used to be this Swiss army knife where you could use them for almost anything because most of the data used to be relational.

00:22:50.920 --> 00:22:55.280
And now with modern apps, most of the data is not relational.

00:22:55.280 --> 00:22:57.140
Most of the data is hierarchical.

00:22:57.140 --> 00:22:58.360
There are a lot of fields missing.

00:22:58.360 --> 00:23:01.480
You know, it's what we think of as document kind of base data.

00:23:01.480 --> 00:23:11.520
So I think for most of the modern use cases, object oriented or document databases are really, really versatile and they could be used for almost anything.

00:23:11.560 --> 00:23:14.480
Now there's still data being generated that's relational.

00:23:14.480 --> 00:23:19.460
And just like with anything, like you could use relational databases to store document data.

00:23:19.460 --> 00:23:25.740
You could use document databases to store relational data and it will work fine, but you'll have to hack around a bunch of problems.

00:23:26.080 --> 00:23:35.940
So I think document databases will be used more and more and more as more data is being generated, more apps are being built, and those are fundamentally not relational data models.

00:23:35.940 --> 00:23:38.140
So document databases are great for that.

00:23:38.140 --> 00:23:46.180
I don't think they're going to replace relational databases personally because relational databases are just fundamentally better at storing relational data.

00:23:46.600 --> 00:23:49.540
And, you know, some people decide to unify their infrastructure.

00:23:49.540 --> 00:23:53.720
They figure, I don't want two pieces, two technologies managing things.

00:23:53.720 --> 00:23:54.620
I want just one.

00:23:54.620 --> 00:23:58.840
And they could put relational data in the document database and it will work just fine.

00:23:58.840 --> 00:24:01.740
But it's not, you know, it's not ideal.

00:24:01.740 --> 00:24:04.160
I think that you'd have to hack around a bunch of things.

00:24:04.160 --> 00:24:05.340
There are some things you can't do.

00:24:05.340 --> 00:24:12.940
So my view of the world is that people will continue using different specialized technologies for different use cases.

00:24:12.940 --> 00:24:14.220
And there's always a balance.

00:24:14.420 --> 00:24:17.240
Like if you use too many specialized technologies, it's too hard to manage.

00:24:17.240 --> 00:24:21.320
If you use too few, you have to hack around a bunch of stuff and you have operational problems.

00:24:21.320 --> 00:24:23.020
So there is a good middle ground there.

00:24:23.020 --> 00:24:26.240
And that sort of feels to me like that's where the world is going.

00:24:26.240 --> 00:24:28.200
That's what we see most of our customers use.

00:24:28.200 --> 00:24:28.640
Okay.

00:24:28.640 --> 00:24:29.000
Yeah.

00:24:29.000 --> 00:24:32.380
That's a really interesting way to phrase it and to look at it.

00:24:32.380 --> 00:24:36.620
So what kind of relational features does Rethink have?

00:24:36.620 --> 00:24:38.620
Like does it have foreign keys?

00:24:38.620 --> 00:24:39.560
Does it have joins?

00:24:39.560 --> 00:24:41.080
Does it take transactions?

00:24:41.080 --> 00:24:43.220
Does it take any of these kinds of things on?

00:24:43.460 --> 00:24:49.440
Or does it lean more towards the MongoDB style where it foregoes those for other reasons?

00:24:49.440 --> 00:24:49.920
Okay.

00:24:49.920 --> 00:24:53.340
So RethinkDB does particularly distributed joins.

00:24:53.340 --> 00:24:55.100
It does distributed subqueries.

00:24:55.100 --> 00:25:04.300
So as far as the complexity of a given query, you can do almost anything in RethinkDB and sometimes more than you could in a relational database.

00:25:04.640 --> 00:25:06.580
So we take on all of those challenges.

00:25:06.580 --> 00:25:11.440
And particularly distributed joins are extremely useful in almost every use case, actually.

00:25:11.440 --> 00:25:14.120
So we don't do transactions.

00:25:14.120 --> 00:25:16.300
At least we don't do transactions for now.

00:25:16.300 --> 00:25:20.000
There are some proposals and integrating them, but they're still on the drawing board.

00:25:20.000 --> 00:25:24.840
We don't do foreign keys in the way they're understood in relational databases.

00:25:24.980 --> 00:25:28.600
So for example, we don't do cascading deletes or things like that.

00:25:28.600 --> 00:25:36.140
So RethinkDB is much, it has way more relational features than any other document database that I can think of.

00:25:36.140 --> 00:25:37.620
Like certainly way more than Mongo.

00:25:38.260 --> 00:25:49.260
But it's not quite as good for relational data as like say Postgres or Oracle or SQL Server or MySQL or one of the many relational database management systems.

00:25:49.260 --> 00:25:49.780
Okay.

00:25:49.780 --> 00:25:50.240
Yeah.

00:25:50.240 --> 00:25:50.920
Very interesting.

00:25:50.920 --> 00:25:53.860
What does it look like to use this?

00:25:53.860 --> 00:26:01.520
And maybe you could give us, I don't know, an example from the Python driver, if you know it off the top of your head, or if not, just from any other of the drivers.

00:26:01.780 --> 00:26:08.500
Like if I create a new project and I want to, I have Rethink running, how do I connect to it and get going?

00:26:08.500 --> 00:26:09.460
Like what are the steps?

00:26:09.460 --> 00:26:11.280
You don't have to say code exactly.

00:26:11.280 --> 00:26:16.420
One of the biggest design goals that we had was Rethink is to make it very, very easy to use.

00:26:16.420 --> 00:26:23.160
And we literally thought like every extra step that a developer has to go through will cut our user base in half.

00:26:23.160 --> 00:26:25.380
So we just made it as simple as possible.

00:26:25.380 --> 00:26:26.960
And we spent a lot of time doing that.

00:26:26.960 --> 00:26:31.620
The easiest way, I mean, to figure it out is like if you go to rethinkdb.com slash docs,

00:26:31.920 --> 00:26:34.880
there's like a 30-second tutorial that shows people how to use it.

00:26:34.880 --> 00:26:36.680
But in Python, it's very simple.

00:26:36.680 --> 00:26:40.600
You import RethinkDB, and it's just a Python driver for Rethink.

00:26:40.600 --> 00:26:43.420
You say RethinkDB.connect, and then you run a query.

00:26:43.420 --> 00:26:47.580
Like for example, it's a table users.insert.

00:26:47.580 --> 00:26:49.960
You just put a document in there, .run.

00:26:49.960 --> 00:26:52.840
That inserts the document into the database.

00:26:52.840 --> 00:26:53.840
It's really, really simple.

00:26:53.840 --> 00:26:54.820
It's just a couple of lines.

00:26:55.220 --> 00:27:03.820
Yeah, and you guys have a nice fluent API where you say, I want to create a query, .filter by this, .limited by that, and order it by that, and so on, right?

00:27:03.820 --> 00:27:06.220
You can chain them together in a really nice style.

00:27:06.220 --> 00:27:08.440
Yeah, so that was inspired by jQuery.

00:27:08.820 --> 00:27:16.260
So the goal of the query language was, first of all, to make it seem native in the programming language that people use.

00:27:16.260 --> 00:27:19.020
So if you're using Python, the query language, I mean, it's just Python.

00:27:19.020 --> 00:27:21.100
If you're using Ruby, it's just Ruby and so on.

00:27:21.740 --> 00:27:34.140
And one of the biggest kind of challenges that people run into when they use SQL is if you look at Stack Overflow questions that people asked about SQL, they're kind of different from questions about any other programming language.

00:27:34.140 --> 00:27:39.100
Like if someone's using Python and you look at Stack Overflow questions, the questions are like, I'm trying to do this.

00:27:39.100 --> 00:27:40.120
It's not quite working.

00:27:40.120 --> 00:27:45.020
I don't understand what's going on or how does this function work or things like that.

00:27:45.360 --> 00:27:49.240
But in SQL, people ask weird questions like, I want to do this.

00:27:49.240 --> 00:27:50.920
I don't know how to express it.

00:27:50.920 --> 00:27:52.440
Like, how do I even do this?

00:27:52.440 --> 00:27:52.940
Right?

00:27:52.940 --> 00:28:02.620
And that's because SQL was designed for business analysts, and it's kind of like, it was sort of meant to be like English, but it's not really English because it's a programming language, of course, or a query language.

00:28:02.620 --> 00:28:04.500
So it's kind of challenging.

00:28:04.500 --> 00:28:08.500
And the goal with Requel was make it be, you know, really, really intuitive.

00:28:08.500 --> 00:28:15.260
So you start out, and you can think of it as a data flow language, kind of like Bash and Pypes, where you start out with a table, and then you say,

00:28:15.260 --> 00:28:20.420
I want to run this transformation, and then I want to run that transformation after that, and then you can keep changing things.

00:28:20.420 --> 00:28:30.860
And it turns out to be really intuitive because people can write queries by just changing on things and seeing intermediate results and incrementally building up the query until they finally get to what they want.

00:28:31.240 --> 00:28:40.720
So with Requel, it just becomes really, really easy to express what you want in a way that I think SQL could never allow people, just because of the fundamental differences in the design.

00:28:40.720 --> 00:28:48.760
Yeah, it feels a little more written for programmers in a simple way rather than trying to create yet another language.

00:28:48.760 --> 00:28:50.520
So yeah, that's really nice.

00:28:50.520 --> 00:28:50.820
Yeah, for sure.

00:28:50.820 --> 00:28:51.780
Yeah, that's really nice.

00:28:51.780 --> 00:29:04.180
So one thing that you guys focus on a lot, and I think it feels like it's a little bit of the influence of your co-founder, Michael, is design and the way it feels to use software.

00:29:04.180 --> 00:29:12.340
All of the design stuff and usability, that's mostly Michael's doing, and Michael really cares about the user experience.

00:29:12.340 --> 00:29:17.840
And he takes it from, you know, I mean, it's not just how things look or how many steps you have to go through.

00:29:17.840 --> 00:29:24.480
He thinks it through to the point of, like, what does the user feel when he interacts with a particular feature?

00:29:24.480 --> 00:29:28.320
What does the user feel when he interacts with the product as a whole?

00:29:28.600 --> 00:29:39.520
So he spends a lot of time just thinking holistically about the user experience and the kind of subjective experience the developers go through when they use the product.

00:29:39.520 --> 00:29:41.720
And that permeates everything.

00:29:41.720 --> 00:29:43.020
That permeates the query language.

00:29:43.020 --> 00:29:51.540
That permeates, like, the install process, the art that goes into everything to be and goes into the documentation to make things easy.

00:29:51.540 --> 00:29:55.480
You know, the website, the admin console, like, all of these things.

00:29:55.820 --> 00:30:04.740
Yeah, I was thinking specifically the admin console because a lot of databases, the tools that use them feel not so great, right?

00:30:04.740 --> 00:30:07.960
Like, sometimes you just have a command line interface to it.

00:30:07.960 --> 00:30:13.240
You know, if you have a UI, it usually looks like it was created by a DBA.

00:30:13.240 --> 00:30:14.780
You know, something like this, right?

00:30:14.780 --> 00:30:28.320
It's not a great experience, but you guys have, like, a beautiful, simple-to-use web management interface for your databases, even for, like, sharding and replication and failover and all these kinds of things, right?

00:30:28.320 --> 00:30:29.140
Yeah.

00:30:29.140 --> 00:30:38.920
So our hypothesis was that, like, people spend—if you're running a web application, there's a lot you do on the front end, sometimes a lot on the back end.

00:30:39.100 --> 00:30:44.600
But the database is at the core of the thing, so people spend most of their time writing database queries.

00:30:44.600 --> 00:30:49.380
And if you think about, like, what's that like for the application developer?

00:30:49.380 --> 00:30:55.700
Well, that means they spend, you know, six, seven, eight, sometimes more hours a day just dealing with the database product.

00:30:55.700 --> 00:30:57.140
It's their life at work.

00:30:57.500 --> 00:31:01.340
And it was very important that that experience is pleasant for them.

00:31:01.340 --> 00:31:03.720
And that, for me, it's a lot of different things.

00:31:03.720 --> 00:31:20.460
But one of the biggest ones is we thought that there needs to be almost like a development environment where people feel comfortable, that's easy to learn, easy to experiment with queries, easy to figure out what's going on, easy to test things, play around, easy to figure out what happens in your cluster.

00:31:20.820 --> 00:31:22.180
So that was the goal of the web UI.

00:31:22.180 --> 00:31:23.540
It wasn't an afterthought.

00:31:23.540 --> 00:31:30.460
It was something we thought was very, very important for the people—for our users, right, for developers that are going to use Rethink.

00:31:30.460 --> 00:31:39.740
Because they spend so much time in it every single day that not adding it or not building it and not thinking it through almost didn't really make any sense.

00:31:39.740 --> 00:31:45.060
Like, we were really surprised that that doesn't exist in a lot of other database systems.

00:31:45.060 --> 00:31:50.360
Because if you think about how much time people spend on them, that just seems like a crucial, crucial thing to do.

00:31:50.360 --> 00:31:54.740
It would almost be like building a compiler without having a text editor.

00:31:54.740 --> 00:31:57.900
Like, the text editor is a fundamental part of writing programs.

00:31:57.900 --> 00:31:59.560
It's really, really, really important.

00:31:59.560 --> 00:32:05.520
Like, you need a good compiler, but without the text editor, like, just the experience of using the compiler would be miserable.

00:32:05.520 --> 00:32:06.740
Yeah, that's a good analogy.

00:32:06.740 --> 00:32:13.040
It feels like you guys really focus on making, interacting with the whole system delightful.

00:32:13.040 --> 00:32:14.380
Yes, that's very important.

00:32:14.380 --> 00:32:21.220
Yeah, one of the things that really surprised me in a positive way was I heard that you guys have a full-time artist.

00:32:21.220 --> 00:32:28.360
Like, if you look at your documentation, you have little, like, cartoon characters and stuff to make it feel friendlier.

00:32:28.360 --> 00:32:34.680
You know, like, if, in particular, I have, like, rethinkdb.com slash docs slash quick start pulled up.

00:32:34.740 --> 00:32:37.860
And there's, like, a little database walking up to this character.

00:32:37.860 --> 00:32:45.560
Most database companies I think of are on the opposite spectrum of this type of experience.

00:32:45.560 --> 00:32:46.380
This is really cool.

00:32:46.380 --> 00:32:47.280
Yeah, definitely.

00:32:47.460 --> 00:32:57.320
So, when we were first shipping everything, like, before the first version, we thought it was important to do just basic things that you do, like, you know, branding.

00:32:58.020 --> 00:33:03.880
Just, like, kind of the things that every open source or every project does in general.

00:33:03.880 --> 00:33:06.640
So, we hired an artist to do a lot of the work.

00:33:06.640 --> 00:33:10.640
And Annie kind of came in and she did the original things.

00:33:10.640 --> 00:33:13.320
But she also had an enormous amount of passion around art.

00:33:13.320 --> 00:33:15.360
She brought that passion to the company.

00:33:15.360 --> 00:33:30.960
And it became immediately obvious to, or, you know, very quickly it became obvious to Michael and I that Annie's work and her passion for the art can permeate a lot more than just the basic things, like, you know, the logo and some illustrations on the front page.

00:33:30.960 --> 00:33:39.060
And she was very adamant about, like, hey, this could really change the experience of people interacting with the product.

00:33:39.660 --> 00:33:43.780
And because Michael is a user-experienced person, like, he immediately grabbed onto this idea.

00:33:43.780 --> 00:33:46.180
And Annie did a couple of things early on.

00:33:46.180 --> 00:33:47.020
Like, she made the dog.

00:33:47.020 --> 00:33:48.480
She made illustrations for the documentation.

00:33:48.480 --> 00:33:50.780
And people started commenting on it.

00:33:50.780 --> 00:33:54.400
Like, on Twitter, people would say, wow, that makes everything feel way more accessible.

00:33:54.400 --> 00:33:57.600
She brought that passion into the company.

00:33:57.600 --> 00:34:01.740
And then it was just obvious that it makes everything way better for our users.

00:34:01.740 --> 00:34:03.240
And no one else does that.

00:34:03.240 --> 00:34:06.500
So, it was also kind of differentiating for the company because people notice it.

00:34:06.840 --> 00:34:13.240
She, like, added this whole new dimension of interacting with the software project that you don't often see in other projects.

00:34:13.240 --> 00:34:13.560
Yeah.

00:34:13.560 --> 00:34:15.160
I'm sure you guys are really delighted.

00:34:15.160 --> 00:34:18.680
Like, wow, this really does make this so much friendlier.

00:34:18.680 --> 00:34:20.180
It's cool.

00:34:20.180 --> 00:34:21.180
I really like it.

00:34:21.180 --> 00:34:21.900
It's a nice touch.

00:34:21.900 --> 00:34:22.260
Yeah.

00:34:22.260 --> 00:34:25.080
It's kind of unobvious at the beginning that that would matter.

00:34:25.080 --> 00:34:31.640
But then when we did a couple of these things and, like, everyone started noticing and people started commenting, like, wow, this makes everything way more accessible.

00:34:31.640 --> 00:34:33.820
We were like, yeah, we need to do more of this.

00:34:33.820 --> 00:34:34.980
Yeah, for sure.

00:34:34.980 --> 00:34:49.480
This portion of Talk Python To Me is brought to you by Hired.

00:34:49.480 --> 00:34:52.500
Hired is the platform for top Python developer jobs.

00:34:52.500 --> 00:34:57.320
Create your profile and instantly get access to 3,500 companies who will work to compete with you.

00:34:57.640 --> 00:35:05.480
Take it from one of Hired's users who recently got a job and said, I had my first offer on Thursday after going live on Monday and I ended up getting eight offers in total.

00:35:05.480 --> 00:35:08.940
I've worked with recruiters in the past, but they've always been pretty hit and miss.

00:35:08.940 --> 00:35:11.760
I tried LinkedIn, but I found Hired to be the best.

00:35:11.760 --> 00:35:13.860
I really like knowing the salary up front.

00:35:13.860 --> 00:35:16.220
Privacy was also a huge seller for me.

00:35:16.220 --> 00:35:17.920
Sounds awesome, doesn't it?

00:35:17.920 --> 00:35:19.940
Well, wait until you hear about the sign-in bonus.

00:35:20.340 --> 00:35:23.340
Everyone who accepts a job from Hired gets $1,000 signing bonus.

00:35:23.340 --> 00:35:26.000
And as Talk Python listeners, it gets way sweeter.

00:35:26.000 --> 00:35:31.240
Use the link Hired.com slash Talk Python To Me and Hired will double the signing bonus to $2,000.

00:35:31.240 --> 00:35:33.040
Opportunity's knocking.

00:35:33.040 --> 00:35:36.800
Visit Hired.com slash Talk Python To Me and answer the door.

00:35:43.880 --> 00:35:46.460
Can you talk about the community around RethinkDB?

00:35:46.460 --> 00:35:48.580
It's grown really quickly.

00:35:48.580 --> 00:35:50.600
You've got a very passionate user base.

00:35:50.600 --> 00:35:53.380
You guys do a lot to engage the community.

00:35:53.380 --> 00:35:54.960
Can you talk about some of the things you do?

00:35:54.960 --> 00:35:55.680
Yeah.

00:35:55.680 --> 00:36:01.980
So the user community is one of those things that's also the core of the company.

00:36:01.980 --> 00:36:07.860
We thought it's very important to do good community building and connect with our users.

00:36:08.540 --> 00:36:17.180
And usually what happens with open source is people, they'll build up for the idea that people have about open source is you build a software and you make the source code available.

00:36:17.180 --> 00:36:19.940
But that doesn't make a community happen, right?

00:36:19.940 --> 00:36:22.360
And actually, most of the work is done by Michael.

00:36:22.360 --> 00:36:26.940
And we have someone here, Christina Kielan, who does a lot of community management.

00:36:26.940 --> 00:36:28.440
She's absolutely amazing at it.

00:36:28.860 --> 00:36:38.920
And so the way we approach the idea of building a community is everyone who uses RethinkDB or contributes to it in any way is kind of equal.

00:36:38.920 --> 00:36:44.800
And we, the employees of the company, we just happen to be paid for our work, but we're also just members of the community.

00:36:44.800 --> 00:36:48.840
And what that means is it's not just about publishing the source code.

00:36:48.840 --> 00:36:53.420
It's about doing everything openly so that users could communicate with us.

00:36:53.420 --> 00:36:56.860
Like, for example, we do all design discussions on GitHub.

00:36:56.860 --> 00:37:02.860
And it's, you know, our employees comment on features and design proposals and things like that.

00:37:02.860 --> 00:37:10.220
But they do it with our users because anybody in the world who's using RethinkDB can go on GitHub and say, hey, I think this should be done this way.

00:37:10.220 --> 00:37:11.140
People can contribute.

00:37:11.140 --> 00:37:12.580
So the whole thing is done in the open.

00:37:12.580 --> 00:37:24.280
And that is huge for fostering a good community because people feel invested in the project and they feel like, you know, their opinions are really going to be heard and that they can kind of drive the direction of the project.

00:37:24.280 --> 00:37:26.840
They can drive the direction of the features, how they're going to be designed.

00:37:26.840 --> 00:37:28.580
So that's one of the things that we do.

00:37:28.580 --> 00:37:29.880
The art is really important.

00:37:29.880 --> 00:37:31.420
We do a lot of local meetups.

00:37:31.420 --> 00:37:37.440
We try to engage everyone on social media, you know, on Twitter, Facebook, things like that.

00:37:37.440 --> 00:37:43.200
So community is just, it's about as fundamental to RethinkDB as the software itself.

00:37:43.200 --> 00:37:50.340
And we take it really seriously and we think through a lot of the interactions, you know, how users feel, how they interact with the project.

00:37:50.340 --> 00:37:53.500
So it's been a pretty big deal for us.

00:37:53.500 --> 00:37:56.400
And at the beginning, like, we didn't know whether any of this was going to work.

00:37:56.400 --> 00:37:58.420
But then the community grew really, really quickly.

00:37:58.420 --> 00:38:01.220
And, yeah, it turned out to be really important.

00:38:01.220 --> 00:38:01.900
That's great.

00:38:01.900 --> 00:38:06.180
It's one of the really cool aspects of open source, right?

00:38:06.180 --> 00:38:17.060
And you guys have a successful, thriving business based on a thing that I can go to GitHub, click download as a zip file or a clone.

00:38:17.060 --> 00:38:20.020
And I have the product, basically.

00:38:20.020 --> 00:38:29.160
And so I'm really fascinated and delighted when I see companies making successful businesses out of open source projects.

00:38:29.420 --> 00:38:38.540
Can you talk about what it's like to run a business where the main thing you have is sort of given away or out in the open?

00:38:38.540 --> 00:38:39.000
Yeah.

00:38:39.000 --> 00:38:39.760
Yeah.

00:38:39.760 --> 00:38:43.700
Sometimes I talk to my dad about that and he still doesn't understand how this works.

00:38:43.700 --> 00:38:48.520
He's like, okay, so you give away the product for free and anybody can get it for free, right?

00:38:48.520 --> 00:38:49.440
Like, how does that work?

00:38:49.440 --> 00:38:50.260
Yeah.

00:38:50.260 --> 00:38:59.500
And so what happens with, particularly with RethinkDB is our goal was to make it available to anybody who wants it.

00:38:59.500 --> 00:39:06.720
And if the product is good and the world is really going in the direction of real time, then eventually RethinkDB will be in most of the development steps.

00:39:07.120 --> 00:39:10.100
So what we wanted is to make it accessible to anybody who wants it.

00:39:10.100 --> 00:39:16.820
Like if it's a student who's building a new project or experimenting with new ideas or a hobbyist, they should be able to get it for free.

00:39:16.820 --> 00:39:23.220
But with a product like a database, it's very easy to run it on your laptop and you don't need to pay for it.

00:39:23.220 --> 00:39:24.140
You don't need any support.

00:39:24.140 --> 00:39:30.040
But if you're a big organization that's deploying RethinkDB across five data centers around the world,

00:39:30.040 --> 00:39:35.280
there are enormous amounts of operational challenges that these companies have to deal with.

00:39:35.280 --> 00:39:37.740
And they're pretty risk averse too.

00:39:37.740 --> 00:39:43.660
So, you know, they can't, you know, if you're deploying a big application across the world, like it can't fail.

00:39:43.660 --> 00:39:46.840
You have to make sure you do health checks.

00:39:46.840 --> 00:39:48.620
You have to make sure everything works right.

00:39:48.620 --> 00:39:51.460
So for companies like that, we sell support and services.

00:39:51.460 --> 00:39:54.020
And most of the revenue comes from that.

00:39:54.020 --> 00:39:57.240
And that wouldn't work for every open source project.

00:39:57.240 --> 00:40:03.760
Because, for example, if you're selling like a developer tool, like a text editor, there is no operational component in it.

00:40:03.760 --> 00:40:13.200
But for open source projects that have a big operational component, like it has to run 24-7, people take that very seriously and they buy support, you know, in big organizations.

00:40:13.200 --> 00:40:14.900
So that's how the business works.

00:40:14.900 --> 00:40:19.480
And it's not applicable to every open source project.

00:40:19.480 --> 00:40:23.660
It's only applicable to open source projects where there's a big operational part.

00:40:23.840 --> 00:40:28.640
If there isn't a big operational part, there may or may not be open source business there.

00:40:28.640 --> 00:40:30.100
I don't know exactly.

00:40:30.100 --> 00:40:37.300
But for us, it's the big, large-scale operational component that makes the financial aspect of the company work.

00:40:37.300 --> 00:40:39.300
Yeah, that makes a lot of sense to me.

00:40:39.940 --> 00:40:52.880
I guess if you're building a product where you draw the architectural diagram and your product is on the bottom or if it's like a hub and spoke and your product is in the center, that's a thing that can't fail.

00:40:52.880 --> 00:40:58.180
And databases cannot fail, not in the sense that it has a bug or something.

00:40:58.300 --> 00:41:07.420
But, like, if somehow it goes down or you can't connect for it or it doesn't replicate, like, all sorts of bad stuff happens when the data stops flowing, right?

00:41:07.420 --> 00:41:14.840
So you're right that you're in somewhat of a unique place where this is really something that people depend upon.

00:41:14.840 --> 00:41:16.120
Yeah, absolutely.

00:41:16.340 --> 00:41:26.360
And another thing about databases is that Rethink is really easy to use, probably about as easy as any other project you can think of, but, you know, with the same complexity.

00:41:26.360 --> 00:41:32.160
But it's also, at the same time, databases are fundamentally complex and distributed databases are even more so.

00:41:32.500 --> 00:41:34.320
So we make it very, very easy.

00:41:34.320 --> 00:41:36.800
I mean, you can distribute everything to be in the click of a button.

00:41:36.800 --> 00:41:48.560
But if you have enormous amounts of data and many, many data centers, people will pay for support just for the safety of knowing that if something goes wrong, they can pick up the phone and their problem will be solved.

00:41:48.560 --> 00:41:51.240
And it's really, really important because their businesses depend on it.

00:41:51.240 --> 00:41:55.980
So, yeah, for distributed databases like Rethink, that's what makes the whole thing work.

00:41:55.980 --> 00:41:57.280
There are examples.

00:41:57.280 --> 00:42:01.580
So, for example, with, like, web servers, they're relatively simple and they're really robust now.

00:42:01.680 --> 00:42:04.760
So you wouldn't necessarily buy support if you use, like, Nginx or Apache.

00:42:04.760 --> 00:42:08.300
So Rethink is definitely in a unique position.

00:42:08.300 --> 00:42:12.160
I wouldn't necessarily take this lesson and apply it to every open source project.

00:42:12.160 --> 00:42:12.700
Right.

00:42:12.700 --> 00:42:17.040
But if you think it through a little bit, there are a lot of projects where this methodology applies.

00:42:17.040 --> 00:42:17.600
Absolutely.

00:42:17.600 --> 00:42:20.000
Every project kind of has to find its way.

00:42:20.000 --> 00:42:27.160
You know, I had Pablo Hoffman from the Scrapey, the open source web scraping project on.

00:42:27.900 --> 00:42:43.280
And what he ended up doing to sort of build a business around the web scraping library was to create web scraping as a surface and have, you know, one click, push your code to the cloud and we'll handle all the infrastructure and management and scaling.

00:42:43.280 --> 00:42:45.820
I mean, there's all these different ways.

00:42:45.900 --> 00:42:47.280
And I just found that to be fascinating.

00:42:47.280 --> 00:42:49.200
There's all these different ways in which you can do it.

00:42:49.200 --> 00:42:56.740
But I think giving everybody in the Python community, the open source community examples and a bit of a look inside is really cool.

00:42:57.740 --> 00:43:08.560
So you talked about having your database be in the whole, basically the interaction with Rethink in general, being as simple as possible and easier than everything else.

00:43:08.560 --> 00:43:22.460
Do you ever feel like, I guess, is there a tension between, hey, we could make this even easier and, oh, but if that's easier, we might get less support calls about this.

00:43:22.460 --> 00:43:29.000
Is that a tension that you balance or do you just always go for improving the product and then go from there?

00:43:29.000 --> 00:43:33.720
So in practice, this turns out not to be a tension that's actually important.

00:43:33.720 --> 00:43:37.980
Because if you look at, I mean, this isn't unique to everything to be.

00:43:37.980 --> 00:43:41.180
This is pretty much any operational product like this.

00:43:41.180 --> 00:43:45.540
If you look at where most of the revenue comes from, it comes from really, really big customers.

00:43:46.260 --> 00:43:55.920
And if we think it doesn't matter how easy we make it used, we make it be like big customers will still have enormous challenges that very few people face.

00:43:55.920 --> 00:43:57.520
It doesn't matter which product they use.

00:43:57.520 --> 00:44:01.720
Like we make their challenges go away, but they still have to pay for support.

00:44:01.720 --> 00:44:05.900
So the tension comes in play when you're talking about smaller customers.

00:44:05.900 --> 00:44:09.520
But smaller customers don't really pay that much for databases anyway.

00:44:09.700 --> 00:44:18.260
So, you know, if you're trying to maximize revenue, you can pretty much not worry about like really small businesses because they won't pay that much anyway.

00:44:18.260 --> 00:44:25.040
And you can focus on selling, on making, you know, the commercial aspects of the project really compelling to big companies.

00:44:25.040 --> 00:44:29.120
And for that, there is no tension between ease of use and revenue whatsoever.

00:44:29.120 --> 00:44:31.600
For smaller businesses, yeah, there's a little bit of that tension.

00:44:31.600 --> 00:44:35.200
But if you look at the numbers, it turns out not to be that important.

00:44:35.200 --> 00:44:36.600
So we never really think about it.

00:44:36.600 --> 00:44:39.160
We make it as easy as possible every time.

00:44:39.160 --> 00:44:39.400
Cool.

00:44:39.400 --> 00:44:40.520
That makes a lot of sense.

00:44:40.520 --> 00:44:46.420
I mean, big companies just want reassurances, right?

00:44:46.420 --> 00:44:55.640
When you're a 50,000 person business and the thing that you guys sell depends on the data that keeps flowing, it doesn't matter if you can push a button to like scale.

00:44:55.640 --> 00:44:59.140
They want somebody that will take away the risk around that, right?

00:44:59.140 --> 00:45:00.600
Yeah, it's taking on the risk.

00:45:00.600 --> 00:45:01.860
It's also things like training.

00:45:01.860 --> 00:45:10.600
Like, for example, most of our big customers, like the teams that interact with RethinkDB, you know, they can be up to 100, 150 people.

00:45:11.080 --> 00:45:20.780
And it's not that 150 people necessarily like work with Rethink itself, but they're somehow related, you know, to the application or the operations of it or something that's relevant.

00:45:21.200 --> 00:45:22.200
So you have to train.

00:45:22.200 --> 00:45:27.340
If you think about it from a high level perspective, like you have to train 150 people to use this new product.

00:45:27.340 --> 00:45:29.300
Like, yeah, they could learn it on their own.

00:45:29.300 --> 00:45:30.480
They could go online.

00:45:30.480 --> 00:45:31.460
They could read the documentation.

00:45:31.460 --> 00:45:39.000
But we have structured courses where we can come in and we can teach people and get them up to speed very, very quickly and get them to be productive.

00:45:39.000 --> 00:45:44.000
So it's big companies have a whole different layer of challenges that they face.

00:45:44.000 --> 00:45:46.580
And they have usually more money than time.

00:45:46.580 --> 00:45:47.020
Yeah.

00:45:47.020 --> 00:45:48.680
So they're happy to trade one for the other.

00:45:48.680 --> 00:45:50.180
And that's essentially what we do.

00:45:50.180 --> 00:45:50.540
Sure.

00:45:50.540 --> 00:46:01.560
If you have to get 100 people up to speed on something, training is so much more often the right answer to do it in a week or two rather than say, okay, everybody, go figure this out and we'll get back together.

00:46:01.560 --> 00:46:03.180
Yeah.

00:46:03.180 --> 00:46:03.560
Yeah.

00:46:03.560 --> 00:46:06.020
So you guys just had a release.

00:46:06.020 --> 00:46:06.800
What was it?

00:46:06.800 --> 00:46:09.100
2.3 that you added a bunch of new features.

00:46:09.100 --> 00:46:09.980
Do you want to highlight that?

00:46:09.980 --> 00:46:10.620
Yeah.

00:46:10.620 --> 00:46:11.240
So we do.

00:46:11.240 --> 00:46:14.680
One of the things about our releases is we try to do frequent releases.

00:46:15.040 --> 00:46:20.560
We try to release a new version of Rethink every two to four months, depending on how things go.

00:46:20.560 --> 00:46:25.300
So the 2.3, we had user accounts, we had encryption, we added official Windows support.

00:46:25.300 --> 00:46:30.920
So a lot of these features, they're a little bit boring in the sense that most of these were built for bigger companies.

00:46:30.920 --> 00:46:39.680
Like as we get more and more big customers, they have demands that may not be necessarily important to developers that like download Rethink and try to build a simple app.

00:46:39.680 --> 00:46:43.000
But yeah, RethinkDB 2.3 had a lot of features like that.

00:46:43.000 --> 00:46:44.700
We're kind of targeted at big customers.

00:46:44.900 --> 00:46:46.060
They were targeted at scale.

00:46:46.060 --> 00:46:49.680
Things like encryption, compliance, like a lot of stuff like that.

00:46:49.680 --> 00:46:57.940
In RethinkDB 2.4, which is coming out, we are adding a lot more things to the query language that are going to be really, really exciting.

00:46:57.940 --> 00:47:04.440
We're adding real-time aggregations so people can do real-time analytics much easier.

00:47:04.440 --> 00:47:07.460
We're kind of expanding Requel to support new terms.

00:47:07.460 --> 00:47:11.280
There's going to be a lot of exciting stuff pretty much for everybody.

00:47:11.280 --> 00:47:11.680
Okay.

00:47:11.680 --> 00:47:12.300
That's awesome.

00:47:13.040 --> 00:47:13.200
Yeah.

00:47:13.200 --> 00:47:13.220
Yeah.

00:47:13.220 --> 00:47:17.800
Some of those enterprise features, they don't make you jump up and down with excitement.

00:47:17.800 --> 00:47:21.720
But that's critical to being adopted in these big companies.

00:47:21.720 --> 00:47:25.460
And that's an important part of the business, right?

00:47:25.460 --> 00:47:25.980
Yeah.

00:47:25.980 --> 00:47:27.080
I mean, it's really important.

00:47:27.200 --> 00:47:32.880
If you're running a database across multiple data centers over the internet, encryption is extremely important.

00:47:32.880 --> 00:47:33.980
So we have to add that.

00:47:33.980 --> 00:47:38.480
It's not necessarily that exciting, but it's kind of a showstopper for a lot of big companies.

00:47:38.480 --> 00:47:38.840
Yeah.

00:47:39.120 --> 00:47:41.740
Is there a Rethink as a service?

00:47:41.740 --> 00:47:49.680
Like, can I go somewhere and pay $10 a month and have a small Rethink cluster I can work with or something like this?

00:47:49.680 --> 00:47:50.100
Yeah.

00:47:50.100 --> 00:47:51.360
So there are a couple.

00:47:51.360 --> 00:47:53.900
The biggest one is actually done by IBM.

00:47:53.900 --> 00:47:55.600
They bought a company called Compose.io.

00:47:55.600 --> 00:47:57.480
You can go to compose.io.

00:47:57.740 --> 00:48:00.980
And they host, actually, like most documentary-oriented databases.

00:48:00.980 --> 00:48:05.120
So they do RethinkDB, MongoDB, Elastic, I think a couple of others.

00:48:05.120 --> 00:48:07.320
It's pretty inexpensive to get started.

00:48:07.320 --> 00:48:09.600
It's very cheap if you just want a single node.

00:48:09.600 --> 00:48:12.940
And then they allow you to scale up pretty much as much as you want.

00:48:12.940 --> 00:48:15.620
So Compose.io is probably the easiest way.

00:48:15.620 --> 00:48:16.720
There are a couple of others.

00:48:16.720 --> 00:48:19.240
And, of course, people can run it on Amazon themselves.

00:48:19.240 --> 00:48:20.640
There's lots of different options.

00:48:21.120 --> 00:48:24.740
But most users that want Rethink as a service use Compose.io right now.

00:48:24.740 --> 00:48:25.140
Okay.

00:48:25.140 --> 00:48:26.060
Yeah, that's cool.

00:48:26.060 --> 00:48:27.240
Nice of that's out there.

00:48:27.240 --> 00:48:32.560
So while we're talking, I'd like to talk about Horizon.js.

00:48:32.560 --> 00:48:36.640
So tell me what Horizon.js is.

00:48:36.640 --> 00:48:40.680
So Horizon.js is a new project that we just launched a couple of weeks ago.

00:48:40.680 --> 00:48:46.680
It's built on top of RethinkDB, and it was an experiment that I actually think turned out to be really successful.

00:48:46.840 --> 00:48:53.740
So what happened was the motivation behind Horizon, like what happened was a lot of users who were new to databases,

00:48:53.740 --> 00:48:56.400
they wanted to build apps, mobile apps, web apps.

00:48:56.400 --> 00:49:03.080
So they'd go on the bug tracker, and they'd say, hey, I'm trying to access the database from the browser, and it doesn't work.

00:49:03.080 --> 00:49:07.140
And, of course, it wouldn't work because databases fundamentally have to be accessed from a back end.

00:49:07.140 --> 00:49:13.280
And people kept asking this question, and we thought, hey, maybe we can make it easy to access the database from the browser.

00:49:13.400 --> 00:49:21.480
So we built Horizon, which is a prefabricated back end, and what it lets people do is build JavaScript apps without writing any back end code.

00:49:21.480 --> 00:49:28.640
So you can build a mobile app or a web app, and the back end, all of the back end is handled completely by the Horizon project.

00:49:28.640 --> 00:49:29.700
You just start Horizon.

00:49:29.700 --> 00:49:31.560
It's basically a server.

00:49:31.560 --> 00:49:36.200
It connects to RethinkDB, and then all you have to do is write code on the front end,

00:49:36.200 --> 00:49:39.180
and then all the back end stuff will be handled by Horizon itself.

00:49:39.180 --> 00:49:44.080
So what that does is it makes building real-time apps dramatically easier, again,

00:49:44.080 --> 00:49:47.080
because you don't have to write a single line of back end code.

00:49:47.080 --> 00:49:51.960
And the goal behind Horizon was as people build more sophisticated apps,

00:49:51.960 --> 00:49:54.020
they're going to, of course, need to write back end code.

00:49:54.020 --> 00:50:00.700
So when the app gets complex enough, you can stop using Horizon as a standalone server and import it into Node.js

00:50:00.700 --> 00:50:04.320
and start writing back end code and still use all of the Horizon services.

00:50:04.720 --> 00:50:08.340
That's Horizon, and we didn't know how important it was going to be.

00:50:08.340 --> 00:50:09.440
We wanted to try it.

00:50:09.440 --> 00:50:11.640
It seemed like it would make a lot of people's lives easier.

00:50:11.640 --> 00:50:13.980
And right now, so we launched it a couple of weeks ago.

00:50:13.980 --> 00:50:17.580
I think right now Horizon already has a quarter of RethinkDB's user base.

00:50:17.580 --> 00:50:21.140
So it turned out to be pretty successful, and it's growing.

00:50:21.140 --> 00:50:22.820
It makes building things easier.

00:50:22.820 --> 00:50:25.200
Yeah, people must have really been waiting for that.

00:50:25.200 --> 00:50:33.620
So interesting that it basically, it's not so much a front end thing as it is a back end with an API

00:50:33.620 --> 00:50:39.820
to alleviate the need for front end people to write back end code that they probably would rather not write anyway.

00:50:39.820 --> 00:50:41.440
Yep, that's exactly what it is.

00:50:41.440 --> 00:50:44.460
Horizon doesn't, so it does come with a small front end library,

00:50:44.460 --> 00:50:51.920
but it's meant to be used with React or Angular or one of the many, many front end frameworks.

00:50:52.180 --> 00:50:54.840
We don't actually do very much front end.

00:50:54.840 --> 00:50:59.600
It's just, it helps front end developers build apps without writing back end code.

00:50:59.600 --> 00:51:01.920
That's kind of all Horizon is, but it's a lot.

00:51:01.920 --> 00:51:07.520
Because it turns out that there's an enormous amount of plumbing that people have to deal with over and over and over again,

00:51:07.520 --> 00:51:08.920
and Horizon just takes care of that.

00:51:08.920 --> 00:51:09.960
Yeah, that's cool.

00:51:09.960 --> 00:51:13.360
And what's it written in for the back end?

00:51:13.360 --> 00:51:16.760
Is that like a custom Node.js server or something different?

00:51:16.760 --> 00:51:18.740
Yeah, Horizon is all Node.js.

00:51:18.740 --> 00:51:19.520
Yeah.

00:51:19.620 --> 00:51:24.420
When you said you can take it and plug it into Node, I figured you guys must just be going,

00:51:24.420 --> 00:51:28.880
here's the Node thing you've got to run, and if you want, you can put it into your app, right?

00:51:28.880 --> 00:51:29.260
That's cool.

00:51:29.260 --> 00:51:30.660
Yeah, that's exactly how it works.

00:51:30.660 --> 00:51:36.960
Can you talk about the popularity of various back ends for Rethink TV or middle tier, I guess?

00:51:37.960 --> 00:51:42.860
How frequent is it that people are working with it from, say, Python versus Node versus Ruby?

00:51:42.860 --> 00:51:44.320
Do you know those numbers?

00:51:44.320 --> 00:51:47.840
So I actually, I don't know these numbers off the top of my head.

00:51:47.840 --> 00:51:52.660
My intuition is that most of the users, everything could be used in Node.js.

00:51:52.660 --> 00:51:57.960
I think Python is the second biggest, and Ruby is very close.

00:51:57.960 --> 00:52:00.940
Java is really popular in enterprise environments.

00:52:00.940 --> 00:52:03.180
.NET is really popular in enterprise environments.

00:52:03.580 --> 00:52:04.900
I think Node is still the biggest.

00:52:04.900 --> 00:52:07.400
I honestly don't know the exact breakdown.

00:52:07.400 --> 00:52:15.860
And it's kind of actually hard to figure out because the drivers are accessible through the package managers for their respective language.

00:52:15.860 --> 00:52:18.260
And some of them have statistics, some of them don't.

00:52:18.260 --> 00:52:22.880
Like, some of them measure statistics differently, so it's fairly hard to compare.

00:52:22.880 --> 00:52:25.000
Yeah, apples, oranges, yeah.

00:52:25.000 --> 00:52:25.440
Yeah.

00:52:25.440 --> 00:52:26.320
Okay, interesting.

00:52:26.320 --> 00:52:33.240
I noticed something that you guys have on your Horizon project that's in private beta.

00:52:33.240 --> 00:52:37.060
Well, it's almost all that way because it's just so brand new, right?

00:52:37.060 --> 00:52:40.000
But it is this thing called Horizon Cloud.

00:52:40.000 --> 00:52:40.880
What's that?

00:52:40.880 --> 00:52:47.000
Well, so Horizon Cloud is a way for people to deploy and manage and scale Horizon applications.

00:52:47.000 --> 00:52:49.160
So the whole stack is open source, right?

00:52:49.160 --> 00:52:50.220
Rethink TV is open source.

00:52:50.220 --> 00:52:51.320
Horizon is open source.

00:52:51.740 --> 00:52:53.040
Anyone can download them.

00:52:53.040 --> 00:52:54.180
Anyone can build an app.

00:52:54.180 --> 00:53:02.460
You can deploy the app any way you want, you know, on Linode or AWS or Azure or pretty much in any way that you want.

00:53:02.460 --> 00:53:07.820
But deploying an app at scale is still pretty challenging.

00:53:08.380 --> 00:53:17.080
And what we learned from our customers is very often, you know, they'll make these huge Rethink TV and Horizon deployments.

00:53:17.080 --> 00:53:23.940
And they'll call us and, you know, they'll buy a support contract and we help them out with a lot of these deployments.

00:53:23.940 --> 00:53:27.080
So in this process, we learned a lot about best practices.

00:53:27.080 --> 00:53:32.740
We learned about the patterns of, you know, how to scale big applications, how to scale big Rethink TV clusters.

00:53:32.740 --> 00:53:38.160
And Horizon Cloud takes, it's basically software as a service or platform as a service.

00:53:38.360 --> 00:53:41.580
It takes all of that knowledge and operationalizes it in a service.

00:53:41.580 --> 00:53:55.600
So the goal is if you want to deploy a massive Horizon or Rethink TV application, you can do it yourself because everything's open source or you could use Horizon Cloud and then we'll deal with all of the deployment and scaling and management issues.

00:53:55.600 --> 00:53:57.520
So that's the goal of Horizon Cloud.

00:53:57.640 --> 00:54:03.020
It basically makes, it takes away all the headaches of deploying and managing and scaling these applications.

00:54:03.020 --> 00:54:03.780
Interesting.

00:54:03.780 --> 00:54:14.840
So it sounds like it takes some of the consulting work that you might have been doing and turns it into like a framework or an offering that's automatic in some sense.

00:54:14.840 --> 00:54:15.700
Yes.

00:54:15.700 --> 00:54:17.520
Yeah, that's exactly what it does.

00:54:17.520 --> 00:54:23.460
And the goal with Horizon Cloud is so you could deploy, Horizon Cloud right now is building the Google Compute Engine.

00:54:23.460 --> 00:54:25.760
So we'll deploy everything to Google Compute.

00:54:26.140 --> 00:54:31.620
But eventually Horizon Cloud will run on pretty much any backend cloud service.

00:54:31.620 --> 00:54:33.540
So people will be able to pick.

00:54:33.540 --> 00:54:39.980
And for enterprise customers who don't necessarily want to run on the cloud, they'll be able to run Horizon Cloud on their own internal infrastructure.

00:54:39.980 --> 00:54:40.720
Okay.

00:54:40.720 --> 00:54:41.880
Yeah, that sounds awesome.

00:54:41.880 --> 00:54:48.580
So congratulations on the launch with Horizon because that really looks like something people were waiting for.

00:54:48.580 --> 00:54:50.480
Yeah, we're very excited about it.

00:54:50.480 --> 00:54:55.480
It was a lot of work and a different kind of work from building a database, but people seem to really like it.

00:54:55.860 --> 00:54:56.520
Yeah, it's cool.

00:54:56.520 --> 00:55:00.640
You know, you get really successful as the one thing like RethinkDB.

00:55:00.640 --> 00:55:05.140
And you think, well, how are we going to make another thing that's equally successful, right?

00:55:05.140 --> 00:55:14.020
It's really challenging but also interesting to create these new products that somewhat level up on each other but at the same time are new things.

00:55:14.020 --> 00:55:15.100
So, yeah, nice.

00:55:15.340 --> 00:55:16.180
Yeah, it's really exciting.

00:55:16.180 --> 00:55:18.860
And you kind of get better at building products after a while.

00:55:18.860 --> 00:55:24.740
So, I think building Horizon was certainly easier than building RethinkDB, but it was still pretty challenging.

00:55:24.740 --> 00:55:25.180
Yeah.

00:55:26.140 --> 00:55:33.680
It feels to me like whenever you build a product, an app that's going to ship somewhere major or something like that, you feel like you're almost done.

00:55:33.680 --> 00:55:38.520
And then there's like a hundred little small things that you keep having to do.

00:55:38.520 --> 00:55:40.020
And it just takes way longer.

00:55:40.300 --> 00:55:42.300
So, when you finally do ship, it feels great.

00:55:42.300 --> 00:55:42.660
Oh, yeah.

00:55:42.660 --> 00:55:45.360
Yeah, it takes way longer even if you plan for it.

00:55:45.360 --> 00:55:46.140
It still takes longer.

00:55:46.140 --> 00:55:50.600
You tell yourself it's going to take twice as long and it still doesn't feel right that it takes a long.

00:55:50.600 --> 00:55:51.620
Awesome.

00:55:51.840 --> 00:55:54.820
So, we're just about out of time.

00:55:54.820 --> 00:55:59.340
Let me ask you a couple of questions before we call it a show.

00:55:59.340 --> 00:56:07.900
The question I always ask my guests when they're, and so we get to the end of the conversation is, when you write code, what editor do you use?

00:56:07.900 --> 00:56:08.600
Emacs.

00:56:08.600 --> 00:56:10.000
Always Emacs for me.

00:56:10.000 --> 00:56:10.880
Emacs, right.

00:56:10.880 --> 00:56:13.700
You have a big Lisp background, right?

00:56:13.700 --> 00:56:15.440
Like you started out doing a lot of Lisp code.

00:56:15.440 --> 00:56:16.000
Is that correct?

00:56:16.000 --> 00:56:20.400
Yeah, I was really excited about Lisp for a long time and to a large degree I still am.

00:56:20.700 --> 00:56:23.200
I still am, although we don't use it at RethinkDB.

00:56:23.200 --> 00:56:26.140
We use a lot of ideas that come from Lisp, but not the language itself.

00:56:26.140 --> 00:56:31.540
But, yeah, I was very excited about Lisp, Common Lisp, and I got into Emacs and Emacs Lisp.

00:56:31.540 --> 00:56:35.940
So, that part of my background, like I still use Emacs every day.

00:56:35.940 --> 00:56:38.640
Honestly, I don't think I'm ever going to switch to anything else.

00:56:38.640 --> 00:56:39.340
Yeah, it's awesome.

00:56:39.340 --> 00:56:40.520
That just sounds impossible.

00:56:40.520 --> 00:56:43.360
It's a world you cannot imagine, right?

00:56:43.360 --> 00:56:43.900
Mm-hmm.

00:56:43.900 --> 00:56:44.480
Yeah, funny.

00:56:44.480 --> 00:56:48.720
Okay, and then while you have everyone's attention, any final calls to action?

00:56:49.560 --> 00:56:51.220
How do they get started with Rethink?

00:56:51.220 --> 00:56:53.880
Who's maybe listening from the RethinkDB community?

00:56:53.880 --> 00:56:57.960
You guys are amazing, and you make everything worthwhile, and you make the product better.

00:56:57.960 --> 00:57:02.080
For anyone who hasn't used RethinkDB, I'd encourage you to go to RethinkDB.com.

00:57:02.080 --> 00:57:04.220
You can download it in a couple of seconds.

00:57:04.220 --> 00:57:05.880
You could get started very, very quickly.

00:57:05.880 --> 00:57:07.800
And we're on Twitter at RethinkDB.

00:57:07.800 --> 00:57:10.440
If you have any questions, we're always there to help out.

00:57:10.600 --> 00:57:11.900
All right, fantastic.

00:57:11.900 --> 00:57:18.800
So, this has been a really interesting look inside your company, building open source projects, a cool, fresh new database.

00:57:18.800 --> 00:57:20.720
Thanks for taking the time to chat with us all.

00:57:20.720 --> 00:57:21.660
Yeah, it's my pleasure.

00:57:21.660 --> 00:57:22.900
Thank you for having me on the show.

00:57:22.900 --> 00:57:23.520
Yep, bye-bye.

00:57:31.520 --> 00:58:00.120
Are you or a colleague trying to learn or improve your Python?

00:58:00.120 --> 00:58:04.980
Have you tried books and videos that just left you bored by covering topics point by point?

00:58:04.980 --> 00:58:13.260
Check out my online course, Python Jumpstart by Building 10 Apps, at talkpython.fm/course to experience a more engaging way to learn Python.

00:58:13.260 --> 00:58:21.840
And if you're looking for something a little more advanced, try my WritePythonic code course at talkpython.fm/pythonic, or recommend it to a friend or colleague.

00:58:22.120 --> 00:58:27.920
You can find the links from this show at talkpython.fm/episode slash show slash 65.

00:58:28.580 --> 00:58:30.460
And be sure to subscribe to the show.

00:58:30.460 --> 00:58:32.820
Open your favorite podcatcher and search for Python.

00:58:32.820 --> 00:58:34.200
We should be right at the top.

00:58:34.200 --> 00:58:42.020
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct RSS feed at /rss on talkpython.fm.

00:58:42.280 --> 00:58:46.360
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

00:58:46.360 --> 00:58:49.580
You can hear the entire song at talkpython.fm/music.

00:58:49.580 --> 00:58:51.480
This is your host, Michael Kennedy.

00:58:51.480 --> 00:58:56.880
I really appreciate you all taking the time to listen, give feedback, suggestions on shows, and sharing it with your friends.

00:58:56.880 --> 00:58:59.360
Smix, let's get out of here.

00:58:59.420 --> 00:59:20.820
Outro Music.

00:59:20.820 --> 00:59:21.320
Bye.

