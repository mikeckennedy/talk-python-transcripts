WEBVTT

00:00:00.001 --> 00:00:06.180
The great power of Python is it's over 400,000 packages on PyPI to serve as building blocks for your app.

00:00:06.180 --> 00:00:11.080
How do you get those needed packages on your dev machine and manage them within your project?

00:00:11.080 --> 00:00:13.340
What about production and QA servers?

00:00:13.340 --> 00:00:18.960
And I don't even know where to start if you're shipping built software to non-developer end users.

00:00:18.960 --> 00:00:24.840
There are many variations on how this works today, and where we should go from here has been a hot topic of discussion.

00:00:24.840 --> 00:00:27.720
So today, that's the topic of Talk Python.

00:00:27.720 --> 00:00:33.160
I have a great panel of guests, Steve Dower, Pradyun Gedam, Ofek Lev, and Paul Moore.

00:00:33.160 --> 00:00:39.220
This is Talk Python To Me, episode 406, recorded February 21st, 2023.

00:00:39.220 --> 00:00:55.200
Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:55.200 --> 00:00:56.940
This is your host, Michael Kennedy.

00:00:57.320 --> 00:01:04.420
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython, both on fosstodon.org.

00:01:04.420 --> 00:01:07.020
Be careful with impersonating accounts on other instances.

00:01:07.020 --> 00:01:07.980
There are many.

00:01:07.980 --> 00:01:13.040
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.

00:01:13.040 --> 00:01:17.080
We've started streaming most of our episodes live on YouTube.

00:01:17.080 --> 00:01:24.620
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:25.580 --> 00:01:28.160
This episode is brought to you by Cox Automotive.

00:01:28.160 --> 00:01:36.360
Use your technical skills to transform the way the world buys, sells, and owns cars at talkpython.fm/cox and by Sentry.

00:01:36.360 --> 00:01:38.200
Don't let those errors go unnoticed.

00:01:38.200 --> 00:01:38.980
Use Sentry.

00:01:38.980 --> 00:01:42.400
Get started at talkpython.fm/sentry.

00:01:43.620 --> 00:01:47.440
Steve, Paul Ofeck, and Predian, welcome all to Talk Python To Me.

00:01:47.440 --> 00:01:48.240
Happy to have a year.

00:01:48.240 --> 00:01:48.820
Thanks, Dennis.

00:01:48.820 --> 00:01:49.560
Yeah, you bet.

00:01:49.560 --> 00:01:50.880
New for some of you.

00:01:50.880 --> 00:01:52.380
Welcome back for some others.

00:01:52.380 --> 00:01:54.200
So either way, still great.

00:01:54.400 --> 00:01:59.860
Let's just go around the video square here and have you all just do a quick introduction.

00:01:59.860 --> 00:02:02.860
I know, like I said, some of you have been here before, but it may have been a while.

00:02:02.860 --> 00:02:04.080
So, Steve, you want to kick us off?

00:02:04.080 --> 00:02:04.960
My name is Steve Dower.

00:02:04.960 --> 00:02:07.840
Zuba on Twitter and GitHub in various places.

00:02:07.840 --> 00:02:09.140
I'm CPython core developer.

00:02:09.620 --> 00:02:13.140
And I actually got involved in Python in the first place to help with packaging.

00:02:13.140 --> 00:02:18.480
And while I'm not kind of officially closely involved with packaging as much now, I still

00:02:18.480 --> 00:02:19.720
help contribute.

00:02:19.720 --> 00:02:20.400
Yeah, awesome.

00:02:20.400 --> 00:02:25.200
And you're also pretty notable for helping step up Python's game on Windows.

00:02:25.200 --> 00:02:28.380
Yeah, along with some of the others in this panel, actually.

00:02:28.380 --> 00:02:31.040
We've got a few of the Windows contributors here.

00:02:31.040 --> 00:02:31.320
Yeah.

00:02:31.320 --> 00:02:33.020
But yeah, that's kind of my focus area.

00:02:33.020 --> 00:02:33.560
Yeah, awesome.

00:02:33.560 --> 00:02:34.860
Paul, welcome.

00:02:34.860 --> 00:02:35.780
Happy to have you here.

00:02:35.780 --> 00:02:37.080
Hi, nice to be here.

00:02:37.080 --> 00:02:38.080
I'd say I'm Paul.

00:02:38.280 --> 00:02:44.240
I'm a core Python developer and a pip maintainer, two things I'm most involved in.

00:02:44.240 --> 00:02:51.200
I'm also, for my sins, the PEP delegate for packaging standards, if you like.

00:02:51.200 --> 00:03:00.380
So basically anything that's a PEP around interoperability between packaging tools comes to me ultimately

00:03:00.380 --> 00:03:03.120
for the decision on how it's going.

00:03:03.120 --> 00:03:07.740
I've been around in packaging for years now, so I've got quite a lot of the history behind me,

00:03:07.840 --> 00:03:10.300
which is also useful in this server discussion.

00:03:10.300 --> 00:03:11.240
Yeah, absolutely.

00:03:11.240 --> 00:03:13.120
Very much involved with pip.

00:03:13.120 --> 00:03:16.160
And that's at the heart of this, right?

00:03:16.160 --> 00:03:18.880
That's probably the earliest tool there, yeah.

00:03:18.880 --> 00:03:19.700
It's a venerable one.

00:03:19.700 --> 00:03:21.100
Yeah, welcome.

00:03:21.100 --> 00:03:21.560
Hey, yeah.

00:03:21.560 --> 00:03:27.100
I'm the primary maintainer of Hatch, which has been around for a few years.

00:03:27.220 --> 00:03:35.800
But more recently, I rewrote it from scratch to better satisfy kind of what I wanted and what more users wanted the UX to look like.

00:03:35.800 --> 00:03:40.940
It comes with a build back end hatchling, too, that is also a bit new.

00:03:40.940 --> 00:03:52.460
So yeah, my primary focus is the user experience, making things as easy and less prone to errors as possible with perspective and fade and stuff like that.

00:03:52.460 --> 00:03:52.720
Excellent.

00:03:52.720 --> 00:03:52.980
Yeah.

00:03:52.980 --> 00:04:03.760
So Hatch is in the general category of these higher level tools that work on top of the lower level Python ones to provide more consistent workflows for doing things.

00:04:03.760 --> 00:04:08.660
And that's kind of the heart of this discussion, honestly, is like, what should those workflows be?

00:04:08.660 --> 00:04:10.300
What tools should be responsible for it?

00:04:10.300 --> 00:04:10.740
And so on.

00:04:10.920 --> 00:04:14.060
We're not quite there yet because Pravyan still has to introduce himself.

00:04:14.060 --> 00:04:14.460
Indeed.

00:04:14.460 --> 00:04:15.960
Hi, I'm Pravyan.

00:04:15.960 --> 00:04:21.740
I am a maintainer on pip, FLIT, and a few more Python packaging stuff.

00:04:21.740 --> 00:04:29.760
I'm also the maintainer of Tomo, as well as, well, I guess I'm a new C-Python code developer as of.

00:04:29.760 --> 00:04:31.880
So yeah, that's me.

00:04:31.880 --> 00:04:32.480
Yeah, welcome.

00:04:32.480 --> 00:04:33.720
You're doing a lot of cool stuff.

00:04:33.720 --> 00:04:39.980
So we're all here together because, let me pull this up my screen really quick.

00:04:40.360 --> 00:04:52.120
Because of this discussion over on discuss.python.org, it's multi-part, which is notable for how long just a part of it is, Python packaging strategy discussion.

00:04:52.120 --> 00:04:59.780
And part one, if you scroll down just a little bit, it says that there are 272 replies and 150 minutes of reading time.

00:04:59.780 --> 00:05:05.920
And that's before we get to the related blogs, the GitHub issues, part two, the survey results, all of these things.

00:05:06.800 --> 00:05:12.180
So this is quite a discussion, and a lot of people seem to care a lot about it.

00:05:12.180 --> 00:05:13.780
I don't think you've brought your screen up there for us, Michael.

00:05:13.780 --> 00:05:14.780
Oh, I have not, have I?

00:05:14.780 --> 00:05:15.260
There we go.

00:05:15.260 --> 00:05:15.800
Thank you.

00:05:15.800 --> 00:05:16.320
Yeah.

00:05:16.460 --> 00:05:21.140
So let's start the discussion with maybe a summary of what's going on here.

00:05:21.140 --> 00:05:26.720
This was posted by Shamika, who unfortunately couldn't be here today, was going to be here, but can't make it.

00:05:26.720 --> 00:05:30.900
So I'm going to have to let whoever feels most qualified to jump in on this.

00:05:30.900 --> 00:05:34.000
Who wants to sort of set the stage for what this discussion was about?

00:05:34.000 --> 00:05:35.940
Paul, you look like you might be willing to fight.

00:05:37.100 --> 00:05:39.840
Paul looked like everybody else was backing off there.

00:05:39.840 --> 00:05:52.440
Yeah, one of the things that we've wanted to do for some time now is sort of get a better feel for how the user community views packaging.

00:05:52.440 --> 00:06:00.000
Shamika joined the packaging community as the project manager for the packaging effort as a whole.

00:06:00.000 --> 00:06:09.040
And one of the things she initiated in that was getting a survey done to effectively try and answer those questions.

00:06:09.040 --> 00:06:12.800
What do the users think of the packaging ecosystem?

00:06:12.800 --> 00:06:15.440
What do they think of how things are going?

00:06:15.440 --> 00:06:17.280
What do they want from Python packaging?

00:06:17.280 --> 00:06:19.420
There was a fair bit.

00:06:19.420 --> 00:06:26.000
There was a, I don't honestly know how big the response was, but it was quite, we got quite a decent response from it,

00:06:26.120 --> 00:06:30.760
which basically got summarized up in a couple of feedback documents.

00:06:30.760 --> 00:06:32.000
Yeah, I think, here we go.

00:06:32.000 --> 00:06:37.180
There's a PDF that I'll link to that has the actual survey responses.

00:06:37.180 --> 00:06:45.060
Yeah, and it turns out that putting a banner on PyPI.org seems to be the winner in terms of reaching out to people who care.

00:06:45.060 --> 00:06:51.600
We have almost 8.7k responses and 7.9k out of those are from PyPI.

00:06:51.600 --> 00:06:54.120
So that's more than 90%.

00:06:54.120 --> 00:06:54.860
Yeah, absolutely.

00:06:55.100 --> 00:07:01.560
Basically, from that, the discussions on Python discourse are following on from that,

00:07:01.560 --> 00:07:06.000
taking a number of the messages that came out of the survey,

00:07:06.000 --> 00:07:13.300
and essentially getting everybody in the packaging community together to talk about, you know,

00:07:13.300 --> 00:07:14.760
what does this mean?

00:07:14.760 --> 00:07:16.900
What do we expect we can do about this?

00:07:16.900 --> 00:07:19.680
How do we address the comments that have been made?

00:07:19.680 --> 00:07:21.120
Where do we take it?

00:07:21.120 --> 00:07:25.300
There are a number of discussions planned.

00:07:25.300 --> 00:07:27.160
I don't know how many.

00:07:27.160 --> 00:07:32.060
The first one, Pradian's either waving at me or suggesting it's five.

00:07:33.640 --> 00:07:39.040
The first one is the one that we've had already, the sort of main strategy.

00:07:39.040 --> 00:07:45.380
There are a number of follow-ups to that, one of which has just started, but most of which haven't taken place yet.

00:07:45.740 --> 00:07:52.000
So where we're at now, the initial discussion, which was the thread that you showed previously,

00:07:52.000 --> 00:07:59.600
that went on for about a month on discourse, generated quite a lot of discussion.

00:08:00.460 --> 00:08:07.740
And we now need to sort of digest that and understand where that leaves us and what actions we can take from it,

00:08:07.740 --> 00:08:13.560
what conclusions we can draw, how we pull that together into something that we can actually do something with, I guess.

00:08:13.560 --> 00:08:13.840
Yeah.

00:08:13.840 --> 00:08:20.140
And I think it's worth adding that this is not kind of an unusual thing for our packaging kind of participants.

00:08:20.680 --> 00:08:31.940
We have quite a significant history of a few comments kicking off a huge discussion that flows and fragments and drags on for hundreds of posts.

00:08:31.940 --> 00:08:33.740
And this one actually feels a bit different.

00:08:33.740 --> 00:08:39.340
This one feels like there's a real sort of commitment from certainly some of the main players who are involved in it.

00:08:39.340 --> 00:08:43.920
You know, if you look at the regular posters in that other thread, then, you know, you'll see a lot of us up near the top.

00:08:43.980 --> 00:08:48.240
But there's also a number of other people involved who are, it feels more serious this time.

00:08:48.240 --> 00:08:56.280
It feels like we really not just feeling or recognizing pain that we've always kind of seen and known is out there for a lot of people using it.

00:08:56.280 --> 00:08:59.600
But it feels like we're kind of at a place where something has to give.

00:08:59.600 --> 00:09:05.800
And I feel like we're getting closer and closer to being able to change whatever it is that needs to change to make that give.

00:09:05.800 --> 00:09:12.060
So I think it's an exciting set of discussions, though it is long and meandering and drawn out.

00:09:12.460 --> 00:09:14.280
And occasionally a little frustrating.

00:09:14.280 --> 00:09:18.160
I've taken a few breaks during it just to cool off.

00:09:18.160 --> 00:09:20.960
And I suspect some of the others in here have as well.

00:09:20.960 --> 00:09:23.520
But it is a lot of it's nothing new.

00:09:23.520 --> 00:09:26.140
It's nothing that we haven't heard or come across before.

00:09:26.140 --> 00:09:31.120
Having it laid out the way the survey did gave us a real kind of strong starting point.

00:09:31.120 --> 00:09:34.180
And there's just a lot of honestly discussion.

00:09:34.180 --> 00:09:41.760
A lot of things that have to be talked through because we're all different people with different backgrounds, different areas and trying to get aligned.

00:09:41.940 --> 00:09:47.640
Well enough to then align the random group of volunteers who make up this group.

00:09:47.640 --> 00:09:52.360
It's like we jokingly call it a packaging authority, but that's the biggest joke in the world.

00:09:53.360 --> 00:10:04.380
And so to actually align the volunteers working on independent projects takes a huge, you know, we've got to build up that momentum and that alignment before we can even start, you know, changing projects.

00:10:04.380 --> 00:10:05.300
Yeah, there it is.

00:10:05.300 --> 00:10:07.040
There's a couple of levels of this, right?

00:10:07.040 --> 00:10:12.620
I mean, as a broad Python community, we've got to get enough alignment that people will back it.

00:10:12.860 --> 00:10:18.460
But there's a bunch of people who would have to build whatever variant of this you might pick.

00:10:18.460 --> 00:10:20.640
And you've got to agree on that as well.

00:10:20.640 --> 00:10:23.180
And many of them are working on different tools.

00:10:23.180 --> 00:10:25.580
Pradion mentioned Flit and Pip.

00:10:25.580 --> 00:10:27.400
In fact, it's Hatch and Hatchling.

00:10:27.400 --> 00:10:28.420
Paul is Pip.

00:10:28.560 --> 00:10:34.220
Like, in some sense, the discussion might be, well, should pip take on the responsibilities of Flit?

00:10:34.220 --> 00:10:35.780
Or should it do less?

00:10:35.780 --> 00:10:42.520
And Hatch takes on, you know, there's this give and take, which I think is going to be an interesting thing to see play out.

00:10:43.020 --> 00:10:47.740
We've had a thousand flowers bloom sort of moment, I think, with the packaging.

00:10:47.740 --> 00:10:49.980
We've seen a bunch of different tools come along.

00:10:49.980 --> 00:10:55.680
But that's also led to, I think, confusion with people who are like, well, one blog post said use poetry.

00:10:55.680 --> 00:10:57.080
Now this one says use Hatch.

00:10:57.080 --> 00:10:58.760
This other one said don't use any of them.

00:10:58.760 --> 00:10:59.460
What do I do?

00:10:59.460 --> 00:10:59.980
I'm new.

00:10:59.980 --> 00:11:00.520
I'm confused.

00:11:00.520 --> 00:11:01.120
Yeah.

00:11:01.120 --> 00:11:06.640
Well, before we move on, just sort of summarizing your thoughts of this overall discussion, just kicking it off.

00:11:06.640 --> 00:11:09.480
You know, Ofec and Pradion, you haven't got a chance to weigh in.

00:11:09.480 --> 00:11:10.560
Ofec, what do you think?

00:11:10.660 --> 00:11:19.760
Yeah, I will say, although the main sentiment about the takeaway from the survey was that people wanted more unification and sort of guidance,

00:11:19.760 --> 00:11:26.020
I think the thread itself was not as much about that, but just like a myriad issues.

00:11:26.020 --> 00:11:31.740
So only one of the issues was actually about tools and user experience.

00:11:31.740 --> 00:11:34.660
Other people brought up other longstanding issues.

00:11:34.660 --> 00:11:37.540
Like we want more integration with Conda.

00:11:37.540 --> 00:11:39.180
That's a large topic there.

00:11:39.800 --> 00:11:47.080
Some other people want better support for essential modules and detection of like GPU, stuff like that.

00:11:47.080 --> 00:11:53.340
So there's lots of needs from various communities that also have to be worked out.

00:11:53.340 --> 00:11:57.860
It's not all just about user experience and things like that.

00:11:57.860 --> 00:11:58.100
Sure.

00:11:58.100 --> 00:11:59.260
That makes sense.

00:11:59.260 --> 00:12:05.740
Pradion, you wrote a huge, great long blog post on this, which we're going to get to a little bit, but, you know, higher level first.

00:12:05.920 --> 00:12:06.800
It's been productive.

00:12:06.800 --> 00:12:12.400
One of the things that Steve gave me the word for is level setting.

00:12:12.400 --> 00:12:23.640
There's a lot of sort of bringing everyone up to context on or bringing everyone up to the same amount of information and sort of understanding other use cases that you don't have yourself,

00:12:23.640 --> 00:12:27.460
even though you're right that supports that and things like that.

00:12:27.460 --> 00:12:33.580
Having all of the discussion happen has helped bring everyone up to the same page on these things.

00:12:33.580 --> 00:12:42.140
One thing I want to push back and what Steve just said, which is sort of the Python packaging authority does not have authority, is probably not true.

00:12:42.280 --> 00:12:49.260
We do have four here who gets the authority to decide on things directly delegated from the steering council.

00:12:49.260 --> 00:12:50.600
I heard the cats.

00:12:50.600 --> 00:12:52.340
That's about as far as it goes.

00:12:53.700 --> 00:13:02.140
There is a level of authority involved, but it's limited because we'll get onto the structure of the PyPA, I guess.

00:13:02.140 --> 00:13:06.760
But there's a lot of independent projects, a lot of independent people.

00:13:06.760 --> 00:13:14.940
And one of the things that this discussion did was bring everybody together and get us interacting maybe more than we had done.

00:13:14.940 --> 00:13:26.400
I think historically, it's probably worth also saying that historically, packaging started off very much one or two tools that did everything, things like disto tools and setup tools.

00:13:26.400 --> 00:13:27.740
They were it.

00:13:27.740 --> 00:13:41.900
And there were all sorts of issues at that time, which meant that we consciously tried to take a view that we were going to enable diversity, allow other tools to get into the mix.

00:13:41.900 --> 00:13:49.580
We started by looking at how we could make alternatives to setup tools work, how we could give people choice there.

00:13:49.580 --> 00:13:51.200
And from there, it's grown.

00:13:51.200 --> 00:13:54.480
And we've now got choice in a lot of areas that we never used to have choice in.

00:13:54.480 --> 00:13:56.100
That wasn't an accident.

00:13:56.100 --> 00:14:05.100
That was a conscious decision that we made to try to give some level of competition, some level of innovation that hadn't been there beforehand.

00:14:05.600 --> 00:14:19.220
One of the things that this discussion has done, well, one of the things the survey did has brought home to us the downside of that is that everybody's confused as heck, that nobody knows what to do now because we've just given them 100 million choices.

00:14:19.820 --> 00:14:21.780
And that's a very fair comment.

00:14:21.780 --> 00:14:28.440
It wasn't the intention, but it was an obvious consequence of that diversity that we promoted.

00:14:28.440 --> 00:14:37.040
Now what we need to do and what we're trying to do on the back of the discussion, on the back of what we've learned is try and pull that back together again.

00:14:37.040 --> 00:14:38.820
We've got all these tools now.

00:14:39.220 --> 00:14:47.560
We want to try and, if not exactly unify them, but certainly give a clearer picture, a more this is how you do things story.

00:14:47.560 --> 00:14:55.880
And part of the problem with that, one of the things that Getting Everybody Talking has done, it's made it clearer that we do need to work together.

00:14:55.880 --> 00:15:02.140
We can't keep competing because the users of the tools are just lost knowing what to do.

00:15:02.440 --> 00:15:13.240
So we need to bring things together, but nobody is, certainly I don't think at this point anybody is saying that we're going to shut down all the other tools, all the people working on them have wasted their time.

00:15:13.240 --> 00:15:14.520
That's not the idea at all.

00:15:14.520 --> 00:15:29.740
But we still need to navigate how we get a more unified approach within the context that we've got, which is a lot of people working on their own vision of how they are serving a subset of the overall group of users.

00:15:30.080 --> 00:15:35.280
Like Steve said, I think it's been really useful getting everybody together and everybody getting each other's perspectives.

00:15:35.280 --> 00:15:39.180
We now need to work out what to do with that, frankly.

00:15:39.180 --> 00:15:44.960
This portion of Talk Python To Me is brought to you by Cox Automotive.

00:15:44.960 --> 00:15:47.720
Cox Automotive isn't a car company.

00:15:47.720 --> 00:15:51.640
It's a technology company that's transforming the automotive industry.

00:15:51.640 --> 00:15:56.220
The team at Cox Automotive understands the future of car buying and ownership,

00:15:56.500 --> 00:16:03.260
and they're looking for software developers, data engineers, scrum masters, and other experts to help make that happen.

00:16:03.260 --> 00:16:11.320
If you're interested in innovating with brands like Kelly Blue Book, Auto Traders, and others, then you should check out Cox Automotive.

00:16:11.320 --> 00:16:15.500
Just visit talkpython.fm/cox to find out more.

00:16:15.500 --> 00:16:18.940
Thank you to Cox Automotive for sponsoring the show.

00:16:20.440 --> 00:16:27.040
One thing that stood out to me from reading the survey, and we can poke through some of the interesting questions and responses there.

00:16:27.040 --> 00:16:31.800
I feel like there's two users that almost need two approaches.

00:16:32.360 --> 00:16:40.520
There are people who are creating libraries and shipping them to PyPI, and they're kind of core Python developer folks.

00:16:40.520 --> 00:16:48.740
Not core developers, but they live and breathe Python, and they build Python things, and stuff like Pydantic or FastAPI and so on.

00:16:48.740 --> 00:16:51.880
They might need the flexibility and the diversity.

00:16:52.460 --> 00:17:00.700
Sarah, the new grad student in the biology department that needs to get pandas to work, and she knows that Python is her path forward.

00:17:00.700 --> 00:17:06.040
She shouldn't have to decide whether to use Flit or Hatch or straight pip plus maybe pip-tools.

00:17:06.040 --> 00:17:15.880
These are two very different use cases, and almost like bringing them together to, well, what's the best of those two solutions together seems almost maybe the wrong.

00:17:15.880 --> 00:17:18.500
You might make both groups unhappy going down that path.

00:17:18.500 --> 00:17:24.900
If we bring together the current 8,000 tools, it's going to make 7,999 groups unhappy.

00:17:24.900 --> 00:17:27.000
I mean, this is part of the challenge.

00:17:27.000 --> 00:17:34.240
Though I think an interesting thing there, and probably about halfway through this mega thread, it kind of clicked, at least for me.

00:17:34.240 --> 00:17:39.800
I think some people had mentioned it earlier, that there's really two big categories of tools.

00:17:39.800 --> 00:17:48.320
Kind of as you say, there's the tools for packaging and the tools for using packages, which includes what seems to be the biggest issue is the environment managers.

00:17:48.320 --> 00:17:55.580
It's the virtual environment creation, which is kind of half of poetry, but not the other half.

00:17:55.580 --> 00:17:57.820
A big part of Hatch, but not the other half.

00:17:57.820 --> 00:17:59.220
It's none of Flit.

00:17:59.220 --> 00:18:01.540
It's none of setup tools.

00:18:01.640 --> 00:18:03.580
It's like those are purely about building packages.

00:18:03.580 --> 00:18:10.560
And it's on this side, the building packages, where we've invested in kind of creating and driving that diversity.

00:18:10.560 --> 00:18:12.520
And I think that's worked really well.

00:18:12.520 --> 00:18:22.340
We've got a range of standards that make them interoperable at the right places so that pip can take kind of any of these backends and trigger them correctly.

00:18:23.140 --> 00:18:29.260
Source code written to provide metadata for any of these backends can be easily transferred between a lot of them.

00:18:29.260 --> 00:18:31.060
That seems to mostly work.

00:18:31.060 --> 00:18:37.880
And it's a situation where, again, as you say, the deep in Python maintainers have a choice in what backend they want to use.

00:18:37.880 --> 00:18:43.120
And what kind of clicked is people were saying, you know, we want less diversity.

00:18:43.120 --> 00:18:45.880
And a lot of us were going, well, the diversity is in the backend.

00:18:46.100 --> 00:18:48.220
So if you want less, then we have to combine the backends.

00:18:48.220 --> 00:18:58.620
But I think what clicked is that, no, that's not what they're wanting because it is the newcomer to Python who just wants it to work, who's trying to choose between all of these environment managers.

00:18:58.620 --> 00:19:06.940
And especially when you throw a condor in there as well, which is just so fundamentally different in how it behaves from the ones that kind of rely on PyPI directly.

00:19:07.680 --> 00:19:12.620
We already have that divide and the diversity has shown up on this side uncontrolled.

00:19:12.620 --> 00:19:13.200
Uncontrolled.

00:19:13.200 --> 00:19:19.580
We didn't set out to see poetry created or see Pip-Enf created or any of these, but it's there.

00:19:19.580 --> 00:19:26.520
And how do we rein in something that has grown up all by itself completely outside of anything that we've ever tried to control?

00:19:26.520 --> 00:19:36.020
One thing that struck me in that discussion was I'm really quite happy with a lot of the, like Steve says, the backend tools, all that sort of stuff.

00:19:36.020 --> 00:19:43.960
But it occurred to me that when I'm just writing little hobby programs and things like that for myself, I'm with everybody else.

00:19:43.960 --> 00:19:45.380
Packaging is horrible.

00:19:45.380 --> 00:19:50.320
I just want to say, start a project, start up a notebook, do something.

00:19:50.320 --> 00:19:51.960
And it's really hard.

00:19:52.960 --> 00:20:01.120
And it hadn't occurred to me until we had this discussion that that's very much the two sides of the user equation.

00:20:01.120 --> 00:20:10.600
We've really not put as much effort into the just wants to use Python to do their job side of the user base than we should.

00:20:10.600 --> 00:20:13.780
And tools like Hatch and PDM is another one.

00:20:13.780 --> 00:20:14.880
Poetry is another one.

00:20:14.880 --> 00:20:17.500
They are addressing that.

00:20:17.500 --> 00:20:20.220
And I actually went off and started exploring them.

00:20:20.220 --> 00:20:25.160
I thought, hey, there's cool stuff going on here that I really wasn't as conscious of as I could have been.

00:20:25.160 --> 00:20:27.080
So, yeah, absolutely.

00:20:27.080 --> 00:20:30.340
We need to look at that side as well now, I think.

00:20:30.340 --> 00:20:30.700
I agree.

00:20:30.700 --> 00:20:35.360
The Italian behavior we're talking about is like libraries versus applications.

00:20:36.080 --> 00:20:40.720
So, as people have mentioned, it is very easy now to build the library and test it.

00:20:40.720 --> 00:20:46.900
And that's due in large part to the standards that we made to allow diversity for the build back end.

00:20:46.900 --> 00:20:48.100
So, that's very good.

00:20:48.100 --> 00:20:50.580
But, yeah, it's where the applications are.

00:20:50.580 --> 00:20:51.980
That's like the hard part now.

00:20:52.360 --> 00:21:04.660
And I think at least one of the missing features that I think we should devote resources to, I know Brett isn't here, but locked files is something that we desperately need.

00:21:04.660 --> 00:21:10.260
And poetry has their own implementation of locked files and dependency resolution.

00:21:10.260 --> 00:21:11.740
So does PDM.

00:21:11.740 --> 00:21:14.380
But there's nothing like standard for that.

00:21:14.380 --> 00:21:17.720
And that should be the next step, I think, for applications.

00:21:17.720 --> 00:21:27.360
While we're talking about the future and sort of where we are, I will point out part of the reason we're seeing a bunch of this is because we've solved some of the harder problems already.

00:21:27.360 --> 00:21:33.480
We are at a point where, oh, I'm having difficulties installing pandas and figuring out how to work for that.

00:21:33.480 --> 00:21:35.840
And not, I can't install pandas.

00:21:35.840 --> 00:21:36.480
That's a good point.

00:21:36.480 --> 00:21:39.120
Or I can't publish pandas or whatever.

00:21:39.120 --> 00:21:42.080
So, we have been solving problems as we go.

00:21:42.080 --> 00:21:46.740
It's just we're going to keep seeing more and more problems, especially in a user base this large.

00:21:46.740 --> 00:21:50.920
There's always going to be more interesting and really difficult problems to solve.

00:21:50.920 --> 00:21:56.500
I think a lot of the people who are now just trying to get on with using Python for their day job,

00:21:56.500 --> 00:22:03.880
probably when we were starting the process of moving away from setup tools, they didn't even exist.

00:22:03.880 --> 00:22:06.000
Python wasn't that popular in those days.

00:22:06.000 --> 00:22:10.740
There's a new set of users who are coming along with a new set of problems.

00:22:11.340 --> 00:22:18.600
And if we don't keep our eye on what people are trying to do with Python, we'll get left behind, I guess.

00:22:18.600 --> 00:22:19.920
We won't be relevant.

00:22:19.920 --> 00:22:22.920
They won't have any solutions for what they're trying to do.

00:22:22.920 --> 00:22:28.860
And a lot of them came in because they believed Python was easy because we've got a reputation for being easy.

00:22:28.860 --> 00:22:33.200
They wouldn't be frustrated if they thought it was going to be impossible and then found out that it's impossible.

00:22:33.200 --> 00:22:33.980
They wouldn't be frustrated.

00:22:34.480 --> 00:22:37.040
They wouldn't be happy, but they'd be satisfied.

00:22:37.040 --> 00:22:40.760
It's because they've come in expecting this great experience that everyone's talking about.

00:22:40.760 --> 00:22:45.880
And we're just not able to deliver it in enough cases that the frustration comes in.

00:22:45.880 --> 00:22:46.960
And we get that.

00:22:46.960 --> 00:22:48.980
We all get hit by it as well.

00:22:49.380 --> 00:22:51.780
I am quite optimistic about it, though.

00:22:51.780 --> 00:23:07.680
I think one person brought up a good point in one of the recent discourse threads that, despite the hardships with packaging and everything we're discussing here, Python has gained massively in popularity and usage despite all these obstacles.

00:23:07.680 --> 00:23:12.340
So, yeah, I'm pretty optimistic that we can satisfy people's needs.

00:23:12.340 --> 00:23:13.820
I'm too.

00:23:13.820 --> 00:23:16.220
I think there's – I think Paddy didn't really hit on it.

00:23:16.220 --> 00:23:19.960
I remember long ago that certain things wouldn't install.

00:23:19.960 --> 00:23:23.120
Sorry, you couldn't get this to compile or this other thing wouldn't work right.

00:23:23.120 --> 00:23:27.900
And it hadn't really occurred to me explicitly, but I haven't seen those errors for a real long time.

00:23:27.900 --> 00:23:32.660
Yeah, and there's a lot of work that's gone into build backends to make that possible.

00:23:32.660 --> 00:23:42.940
Certainly for Linux users, the huge amount of effort that went into defining the many Linux standard, which is kind of the base layout of system libraries

00:23:42.940 --> 00:23:59.180
and where they're expected to be on a system so that people can build a binary package for Linux that can assume that those libraries are there and distribute those has meant that, yeah, a lot of the time when you go to install something, you'll get already built, already compiled packages that are just ready to go.

00:23:59.720 --> 00:24:13.440
And kind of the problem that that's raised up is we've taken the really obvious problem of you don't have a compiled package yet up to the point where you have a compiled package that is subtly incompatible with some other compiled package,

00:24:13.440 --> 00:24:20.900
which can be really subtle because it can be one of those 99% of the times it works fine and then the other time it just segfaults and everything dies.

00:24:21.240 --> 00:24:28.840
Or maybe subtle data corruption, like there's a million little things that can subtly go wrong there and we're starting to see some of those come up.

00:24:28.840 --> 00:24:39.640
Certainly the people in the data science side of things saw them come up quicker because they use a lot more of these complex packages and they do interact with each other and they do check things like numerical stability.

00:24:39.640 --> 00:24:43.560
A lot of the rest of us don't worry about that kind of stuff most of the time.

00:24:43.560 --> 00:24:45.120
And so we're like, yeah, this works.

00:24:45.120 --> 00:24:45.800
This works.

00:24:45.800 --> 00:24:46.440
Put it out there.

00:24:46.440 --> 00:24:53.020
Maybe if wheel existed before conda, people would have just pushed harder on wheel potentially and conda might not exist.

00:24:53.020 --> 00:24:57.700
Not saying it shouldn't exist, but that might, it might not have been a bad enough problem to make it.

00:24:57.700 --> 00:24:58.180
I agree.

00:24:58.180 --> 00:25:03.480
Like conda came into existence because the solutions that were there weren't able to satisfy it.

00:25:03.480 --> 00:25:08.100
And it was so far, like just the distance from where we were at that point.

00:25:08.100 --> 00:25:11.540
Because at that point, like eggs, probably no one watching even remembers eggs.

00:25:11.540 --> 00:25:12.220
I'm sure Paul does.

00:25:12.800 --> 00:25:15.160
At that point, it was, OFEC may as well.

00:25:15.160 --> 00:25:17.340
I'm not sure how long you've been involved, mate.

00:25:17.340 --> 00:25:19.200
But yeah, it was like, it was a very different world.

00:25:19.200 --> 00:25:21.680
And the distance to get there just looks so impossible.

00:25:21.680 --> 00:25:27.400
But yeah, if we'd been at wheels, then they may have said, well, this little tweak to wheels will make it work for us.

00:25:27.400 --> 00:25:29.180
And who knows where we might have been then.

00:25:29.180 --> 00:25:30.260
It's quite possible.

00:25:30.260 --> 00:25:33.300
I can't judge, honestly, but it's quite possible.

00:25:33.300 --> 00:25:38.400
But conda is where wheels will be in a number of years.

00:25:38.400 --> 00:25:42.400
I think there are fundamental reasons why that might not be the case.

00:25:42.400 --> 00:25:45.960
And we may have to find different ways of dealing with the problems.

00:25:45.960 --> 00:25:52.620
But yeah, these sort of really difficult, really basically not solved technical problems.

00:25:52.620 --> 00:25:57.400
It's not that Python is struggling with something that's easy.

00:25:57.560 --> 00:26:03.860
There are no languages or environments anywhere that have really solved these problems.

00:26:03.860 --> 00:26:07.180
So we're trying to find solutions as we go along.

00:26:07.180 --> 00:26:16.060
And I think in spite of what Steve is saying, I think having an 80%, 90% solution often is plenty good enough.

00:26:16.240 --> 00:26:25.380
I don't want to say that we should abandon the users who really need that because they are on the forefront of things like AI research and data science.

00:26:25.380 --> 00:26:30.620
And they're doing incredible work, which they can't do if Python falls apart on them.

00:26:30.880 --> 00:26:38.780
But at the same time, I think we're now in a position where we have to balance the general solution with the specialist solution and try and understand that.

00:26:38.780 --> 00:26:41.720
And for a lot of us, certainly for me, that's quite new.

00:26:41.720 --> 00:26:48.540
I'm not entirely comfortable yet with the idea of saying we need a different solution for this than we have for that.

00:26:48.540 --> 00:26:50.880
It's something we're all getting to grips with, I think.

00:26:50.880 --> 00:27:01.180
One aspect of this is also sort of kind of related to the Konda and Python success aspects of this is Python is a famously glue language.

00:27:01.180 --> 00:27:06.420
So when you're trying to package or use Python, you're not just using Python.

00:27:06.420 --> 00:27:11.220
You're using a whole stack of other languages and tech stacks along with it.

00:27:11.220 --> 00:27:13.980
Photography uses Rots under the hood.

00:27:13.980 --> 00:27:17.440
And there's Fortran code in NumPy.

00:27:17.940 --> 00:27:25.020
There's all sorts of diverse tooling underneath what just looks like a Python package.

00:27:25.020 --> 00:27:27.580
And that works.

00:27:27.580 --> 00:27:30.580
And you are able to use these.

00:27:30.580 --> 00:27:35.120
And it also introduces all the challenges that come with all of those themselves.

00:27:35.120 --> 00:27:38.380
So we're in a good spot.

00:27:38.380 --> 00:27:40.360
There's also a long way ahead.

00:27:40.360 --> 00:27:44.000
But we're also quite a ways from where we were.

00:27:44.000 --> 00:28:07.240
And I think one of the things to bring it around that the strategy discussion is doing is helping us understand where the gaps are right now and what the most painful points are right now, which is where the user survey was really helpful in telling us these are the things that at least the users that we follow and who did fill the survey think the problem and pain points are.

00:28:07.240 --> 00:28:13.080
I would say just quick estimate looking at the source of the respondents from the survey.

00:28:13.080 --> 00:28:24.180
that even these results lean more towards the highly committed software developer side and data science side of Python and not the super casual user.

00:28:24.180 --> 00:28:25.720
There's a huge bias.

00:28:25.720 --> 00:28:26.460
Yeah.

00:28:26.460 --> 00:28:32.020
My example of Sarah in the biology department, she's not going to PyPI and going through surveys.

00:28:32.020 --> 00:28:36.720
She might see the banner, which is, whatever, I care by biology or I care by economics.

00:28:36.720 --> 00:28:37.040
Right.

00:28:37.100 --> 00:28:41.240
So I think even this should be taken with a bit of a bit of a bias.

00:28:41.240 --> 00:28:47.120
I think one of the useful pieces of data that we did collect was user experience, like experience level.

00:28:47.120 --> 00:28:57.660
One of the things that's not a bit true but not done is sort of split this survey data that we have across various axes and see if we see other pieces of transparency here.

00:28:58.080 --> 00:29:05.080
I don't think any of the people who have acted in this space have had the time to be into the data.

00:29:05.080 --> 00:29:08.860
I, for one, don't have the expertise or skill set to do so.

00:29:08.860 --> 00:29:19.300
So like one of the things that would be really useful is having people look through this data and come up with new insights and flag things, which is an unangering amount of work.

00:29:19.300 --> 00:29:20.100
It is.

00:29:20.100 --> 00:29:28.820
That's very much a common problem we have is so many people use Python who we just have no way of getting in touch with.

00:29:28.820 --> 00:29:34.340
We have no way of knowing what their experience is because why would they talk to us?

00:29:34.340 --> 00:29:38.040
It's like you don't go and talk to the engineers who design your car.

00:29:38.040 --> 00:29:39.440
You just drive the flipping thing.

00:29:39.440 --> 00:29:43.260
And there's an awful lot of people who treat Python like that.

00:29:43.260 --> 00:29:45.400
And we can ask.

00:29:45.400 --> 00:29:46.920
We can put surveys up.

00:29:46.920 --> 00:29:55.420
But at the end of the day, like you say, the sort of people who would really, really like to get feedback from simply don't look at these sort of things.

00:29:55.420 --> 00:29:59.040
They aren't involved in going on to PyPI.

00:29:59.040 --> 00:30:06.600
You know, they type pip install something that the guy across the desk from them told them would work and they never see PyPI.

00:30:06.600 --> 00:30:18.880
In my workplace, I was very conscious that we had some people who were dabbling in Python who didn't interact at all with the community, never even contemplated doing so.

00:30:18.880 --> 00:30:21.760
And that's with me sitting next to them and saying, hey, Python's cool.

00:30:21.760 --> 00:30:24.320
And that's the norm.

00:30:24.320 --> 00:30:26.400
That's the actual Python user.

00:30:26.400 --> 00:30:32.040
Anyone who's looking at a survey and responding to it is already in the top 5%.

00:30:32.600 --> 00:30:38.000
This portion of Talk Python To Me is brought to you by Sentry.

00:30:38.000 --> 00:30:40.880
How would you like to remove a little stress from your life?

00:30:40.880 --> 00:30:46.860
Do you worry that users may be encountering errors, slowdowns, or crashes with your app right now?

00:30:46.860 --> 00:30:49.900
Would you even know it until they sent you that support email?

00:30:49.900 --> 00:31:00.320
How much better would it be to have the error or performance details immediately sent to you, including the call stack and values of local variables and the active user recorded in the report?

00:31:00.800 --> 00:31:03.740
With Sentry, this is not only possible, it's simple.

00:31:03.740 --> 00:31:07.300
In fact, we use Sentry on all the Talk Python web properties.

00:31:07.300 --> 00:31:13.840
We've actually fixed a bug triggered by a user and had the upgrade ready to roll out as we got the support email.

00:31:13.840 --> 00:31:15.820
And that was a great email to write back.

00:31:15.820 --> 00:31:19.220
Hey, we already saw your error and have already rolled out the fix.

00:31:19.220 --> 00:31:20.640
Imagine their surprise.

00:31:20.640 --> 00:31:22.840
Surprise and delight your users.

00:31:23.080 --> 00:31:26.900
Create your Sentry account at talkpython.fm/sentry.

00:31:26.900 --> 00:31:38.580
And if you sign up with the code Talk Python, all one word, it's good for two free months of Sentry's business plan, which will give you up to 20 times as many monthly events as well as other features.

00:31:38.580 --> 00:31:40.140
Create better software.

00:31:40.140 --> 00:31:43.000
Delight your users and support the podcast.

00:31:43.000 --> 00:31:47.960
Visit talkpython.fm/sentry and use the coupon code Talk Python.

00:31:50.340 --> 00:31:56.880
There's a really interesting term that Scott Hanselman came up with called the dark matter developer.

00:31:56.880 --> 00:31:59.520
The unseen 99%.

00:31:59.520 --> 00:32:05.560
And it's exactly what you're describing here, Paul, is you can't reach them because they don't come to the meetups.

00:32:05.560 --> 00:32:06.640
They don't come to the conferences.

00:32:06.640 --> 00:32:08.260
They don't subscribe to the blog.

00:32:08.260 --> 00:32:10.620
They just use it as a tool and go home.

00:32:10.620 --> 00:32:11.320
And they shouldn't.

00:32:11.320 --> 00:32:13.380
They don't, you know, it's not what they're doing.

00:32:13.380 --> 00:32:21.640
Some of the best feedback that we do get in these discussions comes from, as well as kind of people who get actual issues reported to them.

00:32:21.720 --> 00:32:25.480
So every time the pip maintainers are like, people are reporting this problem all the time.

00:32:25.480 --> 00:32:27.880
Okay, we know that's a problem because it's getting to the developers.

00:32:27.880 --> 00:32:37.240
But we also get feedback from people who do training and tutorials and people who kind of manage Python's presence in a workplace and in an organization.

00:32:37.240 --> 00:32:42.320
Because in that position, and that's kind of the position that I do as well at my work, we get more of that feedback.

00:32:42.320 --> 00:32:51.240
We get people complaining about things that they'd never think to take out in public, but they'll happily put on an internal list somewhere saying, hey, how come Python can't do this?

00:32:51.460 --> 00:32:51.620
Right.

00:32:51.620 --> 00:32:55.720
Or they'll ask for help because they actually have a job to do and they need to get it done.

00:32:55.720 --> 00:32:58.680
And, you know, we're all getting paid to be there.

00:32:58.680 --> 00:33:02.240
So there's no kind of fear or shame in saying, hey, can someone just tell me how to do this?

00:33:02.240 --> 00:33:09.720
And so by being kind of that central point in that place, just the same as when you're teaching a class, students are going to say, this didn't work.

00:33:09.720 --> 00:33:11.460
And now you see a problem.

00:33:11.460 --> 00:33:19.420
And when you start seeing the same things over and over again, that becomes kind of useful additional feedback to factor into these kind of surveys.

00:33:19.720 --> 00:33:23.340
And I don't think we've put a lot of weight in kind of the quantitative response here.

00:33:23.340 --> 00:33:24.500
Like it's quotes.

00:33:24.500 --> 00:33:34.460
It's stuff that people have put in the open spaces that, you know, the ones that have really resonated or been repeated a lot are the ones that we've pulled out into the discussion and have been working from.

00:33:34.620 --> 00:33:38.960
And kind of the actual numbers is like, yeah, they could mean anything realistically.

00:33:38.960 --> 00:33:41.560
And we can slice them to make them mean whatever we want.

00:33:41.560 --> 00:33:42.000
Exactly.

00:33:42.000 --> 00:33:50.400
So there's a careful balance there of drawing the right insights from this, knowing the limitations of what we've done.

00:33:50.400 --> 00:33:52.440
As is probably the case with every survey.

00:33:52.660 --> 00:33:54.940
Let me read out some of the, oh, sorry, go ahead, Nofick.

00:33:54.940 --> 00:33:58.920
And then I'll read off some of the comments that actually some of the respondents actually made.

00:33:58.920 --> 00:33:59.400
But go ahead.

00:33:59.400 --> 00:34:12.600
Oh, yeah, no, I was going to say, I agree with Steve that I think since we have no access to these, you know, 99% of actual developers, I think what maps closest to them would be users and industry.

00:34:12.600 --> 00:34:21.220
I got companies building applications, because if you're a user of Python, like kind of by definition, you're writing an app and not really building a library.

00:34:21.220 --> 00:34:33.100
So I think if we hear feedback from, you know, people at companies trying to build apps facing hardships, I think that would reflect the main, main chunk of users.

00:34:33.100 --> 00:34:34.040
That is a good point.

00:34:34.040 --> 00:34:50.540
I made the distinction that was almost like beginner versus expert, but really, I guess how I should have phrased it is closer to what you said, Ofick, is people building applications and presentation type things that they never will share with anybody through PyPI or something.

00:34:50.540 --> 00:34:51.900
They just want to get it to run.

00:34:51.900 --> 00:34:54.160
Maybe they'll deploy it, but they won't publish it.

00:34:54.160 --> 00:34:59.420
Versus people building Flask and Pydantic and SQLAlchemy and so on.

00:34:59.420 --> 00:35:00.840
These are really different use cases.

00:35:00.840 --> 00:35:07.260
So the person building that may be extremely talented and experienced, but they also have different constraints and different goals.

00:35:07.260 --> 00:35:08.520
So that's a really good point.

00:35:08.520 --> 00:35:09.000
All right.

00:35:09.000 --> 00:35:13.160
So I'm quick respondent thoughts here, just from this discussion thread.

00:35:13.160 --> 00:35:16.140
So one person says, unify multiple tools.

00:35:16.140 --> 00:35:20.460
It's good to have new ideas and new implementation, but it has to converge after a while.

00:35:20.460 --> 00:35:21.560
That's pretty interesting.

00:35:21.560 --> 00:35:26.580
Number two, there should be one and preferably only one obvious way to do it.

00:35:26.580 --> 00:35:29.700
Get rid of the fragmentation straight out of a Xenopython there.

00:35:30.080 --> 00:35:34.600
Number three, I definitely want Python to introduce the one true packaging tool.

00:35:34.600 --> 00:35:40.880
Ideally, both as easy as Rust's cargo and extensible package.

00:35:40.880 --> 00:35:41.880
Installing is easy.

00:35:41.880 --> 00:35:43.580
Package building is the wild west.

00:35:43.580 --> 00:35:47.720
So that kind of speaks to potentially the other side of creating the libraries.

00:35:47.720 --> 00:35:49.700
And then person forward said, blow it all away.

00:35:49.700 --> 00:35:51.620
Just everything goes away.

00:35:51.620 --> 00:35:52.980
Start over from scratch.

00:35:53.760 --> 00:35:59.140
Paul, you had actually a comment here in this discussion about the historical perspective.

00:35:59.140 --> 00:36:10.880
I think I even potentially pulled it up here saying, you know, having pip be exactly this tool might be really hard because pip has been built to do certain things and people now rely on it.

00:36:10.880 --> 00:36:11.080
Right.

00:36:11.080 --> 00:36:13.240
PIP is in a very odd position here.

00:36:13.380 --> 00:36:19.420
It is shipped with Python and it's shipped with Python for a very specific reason.

00:36:19.420 --> 00:36:23.100
You've got to have something to start the whole process off.

00:36:23.100 --> 00:36:24.940
You've got to be able to bootstrap.

00:36:25.300 --> 00:36:28.020
If you use Hatch, how do you get Hatch on your PC?

00:36:28.020 --> 00:36:29.220
You need something.

00:36:29.220 --> 00:36:32.380
And pip was incorporated into the Python.

00:36:32.380 --> 00:36:35.040
It's not technically part of the standard library.

00:36:35.040 --> 00:36:36.940
It's installed with the standard library.

00:36:36.940 --> 00:36:38.180
But let's not go there.

00:36:38.540 --> 00:36:43.320
But it was incorporated to give us that bootstrapping capability.

00:36:43.320 --> 00:36:48.460
At the time, that's really all pip was, was an installer.

00:36:48.460 --> 00:36:55.080
It had build capabilities because you needed to build things from source because that's how you installed a lot of things.

00:36:55.080 --> 00:36:56.680
I predated wheels and all that.

00:36:56.680 --> 00:36:56.880
Yeah.

00:36:56.880 --> 00:36:57.280
Yeah.

00:36:57.280 --> 00:37:00.080
Wheels were nowhere near as common at the time.

00:37:00.080 --> 00:37:02.460
Since then, things have changed.

00:37:02.860 --> 00:37:08.540
But pip is still the one thing that it's where people get into the whole packaging ecosystem.

00:37:08.540 --> 00:37:11.000
They have to start by saying pip install.

00:37:11.000 --> 00:37:14.100
And there's a very good point which was made.

00:37:14.100 --> 00:37:15.420
I mean, this is January.

00:37:15.420 --> 00:37:18.380
My opinions change every 15 minutes.

00:37:18.380 --> 00:37:19.900
So that was a long time ago now.

00:37:19.900 --> 00:37:29.100
But there was a good point made, which is that pip is in the position to be that unified tool.

00:37:29.100 --> 00:37:30.700
But it's not what it is now.

00:37:31.020 --> 00:37:41.080
Other tools like Hatch or PDM or Poetry are better at being the workflow tool that people talk about when they make analogies with Rust and Cargo, for example.

00:37:41.080 --> 00:37:42.660
But they don't come with Python.

00:37:42.660 --> 00:37:53.400
And to balance that problem out and come up with a solution there, we can't just look at packaging in isolation.

00:37:53.920 --> 00:38:07.720
One of the things Condor does, which is what allows them to solve certain problems that they solve, but at the same time is one of the reasons some people don't find Condor appropriate, is that it bundles Python.

00:38:07.720 --> 00:38:11.480
You install Condor and then use that to install Python.

00:38:11.480 --> 00:38:16.080
And that's a fundamentally different way of getting Python.

00:38:16.080 --> 00:38:17.520
Rust has a similar thing.

00:38:17.600 --> 00:38:19.760
You get rust up and that gives you rust and cargo.

00:38:19.760 --> 00:38:21.340
The model is there.

00:38:21.340 --> 00:38:23.020
The model is used in other places.

00:38:23.020 --> 00:38:30.860
But a change like that is not something that the packaging community can agree on by themselves.

00:38:31.080 --> 00:38:33.880
That would involve the core developers, the steering council.

00:38:33.880 --> 00:38:38.080
It's a very, very significant change to the whole model.

00:38:38.080 --> 00:38:50.340
And I think one of the things that we struggle with and one of the things I was sort of trying to get at at this point in the discussion was that we're not in a position to do that at the moment.

00:38:50.340 --> 00:38:51.740
Maybe we should be.

00:38:51.840 --> 00:38:58.500
One of the things coming out of this discussion is a broader look at what can we achieve, what can't we achieve.

00:38:58.500 --> 00:39:02.520
But we need to work out how to take that forward if we want to.

00:39:02.520 --> 00:39:10.240
So, yeah, I think pip is in an odd position because a lot of people say, why can't we add this to Pip?

00:39:10.240 --> 00:39:12.560
Because pip should be the thing to do.

00:39:13.120 --> 00:39:20.520
But speaking as a pip maintainer, I'm not even sure if that's what pip should be doing because we've got a lot of history.

00:39:20.520 --> 00:39:23.120
We've got a lot of legacy code in Pip.

00:39:23.120 --> 00:39:27.520
It will be a big disruptive change to use as a pip to add workflow.

00:39:27.520 --> 00:39:29.500
Whereas Hatch is doing a great job of it.

00:39:29.500 --> 00:39:30.560
PDM is doing fine.

00:39:30.560 --> 00:39:33.620
We do want to get into that area.

00:39:33.620 --> 00:39:43.540
And that's where, in all honesty, that's where a lot of the discussion started to veer towards big grand philosophy questions.

00:39:43.540 --> 00:39:50.320
And I think a lot of people got quite frustrated because they're hard questions and nobody's got an answer.

00:39:50.320 --> 00:39:51.600
People wanted action.

00:39:51.600 --> 00:39:55.320
I think one of the things that came out of the survey was a real sense of urgency.

00:39:55.320 --> 00:39:58.240
People said, burn it all down and create something new now.

00:39:58.240 --> 00:40:00.680
We want a unified solution now.

00:40:00.680 --> 00:40:03.720
And that put everybody under a sense of pressure.

00:40:03.720 --> 00:40:05.460
We ought to be doing better.

00:40:05.460 --> 00:40:09.160
But the reality is some of these things will take a long time.

00:40:09.160 --> 00:40:13.220
And thinking about them is the first step, which is what we're doing here.

00:40:13.220 --> 00:40:21.100
The analogies that people make, I find very interesting because some people do come in saying, make it more like Condor, which, as Paul said, kind of sits outside of Python.

00:40:21.100 --> 00:40:29.140
But then other people say, make it more like Cargo, make it more like NPM, which kind of have the virtual environment thing built into the packaging tool.

00:40:29.820 --> 00:40:32.460
So rather, but it still lives inside it.

00:40:32.460 --> 00:40:42.960
And we get people always coming in with these assumptions that because pip is part of the standard distributions of Python, I'm choosing those words carefully as a core developer.

00:40:43.520 --> 00:40:46.680
Because it comes with the Python.org distributions.

00:40:46.680 --> 00:40:51.700
They assume that because it's included, it's going to be like the ones that are included in other languages.

00:40:51.700 --> 00:40:53.120
And that's simply not the case.

00:40:53.120 --> 00:40:55.940
I mean, for starters, we existed well before those did.

00:40:55.940 --> 00:40:59.540
So we couldn't have copied what Rust does or what Node does.

00:41:00.240 --> 00:41:08.600
But having all those requests come in kind of just show that if we did burn it down, we don't even know what people actually want built back in its place.

00:41:08.600 --> 00:41:10.340
Because they're all asking for different things.

00:41:10.340 --> 00:41:14.460
I think part of the challenge, people are asking for you all to decide.

00:41:14.840 --> 00:41:24.720
I got that sense from a lot of this conversation, from some of the feedback, the survey results, was nobody is deciding in the core developer space.

00:41:24.720 --> 00:41:26.140
Tell us how to do it.

00:41:26.140 --> 00:41:27.080
We'll go with that.

00:41:27.080 --> 00:41:28.360
A lot of them would say.

00:41:28.360 --> 00:41:29.700
Obviously, not everyone.

00:41:29.700 --> 00:41:35.680
The C-Python co-developers, well, this isn't the most polite way of saying this, but they sort of don't care about packaging.

00:41:35.680 --> 00:41:41.720
The Python streamer effectively delegates all of this and says, you figure it out.

00:41:41.720 --> 00:41:47.440
And while there's a bunch of people here who are co-developers, they're wearing two hats.

00:41:47.440 --> 00:41:48.700
It's not a single hat.

00:41:48.700 --> 00:41:53.340
And to jump back in the conversation, I'm sorry, I've done that a few times already.

00:41:53.340 --> 00:41:53.960
Please do.

00:41:53.960 --> 00:41:57.460
Python is a very redistributor-driven distribution model.

00:41:57.460 --> 00:42:05.960
Whereas with RustUp, for example, everyone's getting Rust as the Rust team built it and as the Rust team packaged it and it ships to them.

00:42:05.960 --> 00:42:14.500
Many people are getting their Python from Homebrew or from PyEand and compiling it or from ASDF and doing the same thing.

00:42:14.500 --> 00:42:19.320
Or from Debian who have patched it in a bazillion ways.

00:42:20.020 --> 00:42:28.040
And a lot of the Python packaging problems that people keep hitting are actually these problems in a trench coat.

00:42:28.040 --> 00:42:32.880
These are Python distribution problems that are showing up when they use the packaging tooling.

00:42:32.880 --> 00:42:36.220
And that causes a lot of friction there as well.

00:42:36.220 --> 00:42:40.720
And solving that as probably hinted at is the last problem.

00:42:40.720 --> 00:42:45.540
And it's also tricky because problems mirror your organization.

00:42:45.540 --> 00:42:49.320
And as we're organized, we aren't set to solve this.

00:42:49.320 --> 00:42:50.420
Not easily.

00:42:50.420 --> 00:42:53.820
To be fair to the distributors, we like distributing Python as source code.

00:42:53.820 --> 00:43:00.420
Like the official release of CPython is a pile of source code that someone else should build and give to you.

00:43:00.560 --> 00:43:14.200
Because that's the Linux model, whichever model it is from 30 years back, is you got your operating system with the software built for it by someone who picked up all those source bundles and built it for you if you didn't do it yourself.

00:43:14.680 --> 00:43:20.260
And so it's never really been built around the core team, build the binaries and distribute those.

00:43:20.260 --> 00:43:27.920
And it certainly does confuse people because we do do that for Windows and we do do that for macOS because we've been able to because we never had distributors pick those up.

00:43:27.920 --> 00:43:29.120
I think with...

00:43:29.120 --> 00:43:31.340
In the same way that the Linux distributors did.

00:43:31.340 --> 00:43:39.580
With more Windows users nowadays than we used to have, I think that confusion is much more visible.

00:43:39.580 --> 00:43:45.360
The people coming from a Windows background think, well, I get Python from Python.org.

00:43:45.360 --> 00:43:49.220
People coming from a Linux background think Python.org has nothing.

00:43:49.220 --> 00:43:52.600
I get it from Ubuntu or it's just there.

00:43:52.600 --> 00:43:54.460
I don't even know where I get it from.

00:43:54.460 --> 00:43:57.600
That's something that is changing.

00:43:57.600 --> 00:43:59.840
I don't know if we will ever...

00:43:59.840 --> 00:44:09.420
I think languages like Rust with things like RustUp, that's a new model and it comes from much more recent how people expect things to be delivered to them.

00:44:09.420 --> 00:44:17.200
And Python's got a heck of a lot of history here that isn't as easy to change as people might like to think it is.

00:44:17.200 --> 00:44:18.620
I'm not saying we don't.

00:44:18.620 --> 00:44:20.640
I'm not saying this isn't a challenge.

00:44:20.640 --> 00:44:38.940
I guess to draw an analogy, it's similar to the source distribution versus wheel problem that we solve in some sense, wherein you can still build your own NumPy, but the NumPy developers ship a single NumPy and that has certain choices made that you can make differently.

00:44:38.940 --> 00:44:41.160
I guess I wasn't trying to be combative here.

00:44:42.920 --> 00:44:45.040
This is how packaging discussions always go.

00:44:45.040 --> 00:44:46.420
This is how packaging discussions.

00:44:46.420 --> 00:44:47.280
We always get combative.

00:44:47.280 --> 00:44:50.140
We sound like we're arguing and we're actually agreeing with each other.

00:44:50.140 --> 00:44:53.260
We're still just arguing together.

00:44:53.260 --> 00:44:54.380
But a big difference...

00:44:54.380 --> 00:44:54.480
Oh, sorry.

00:44:54.560 --> 00:45:05.760
In future, I would imagine what would be best for users would be not to download a Python executable that installs, but rather you would download the workflow tool.

00:45:05.760 --> 00:45:13.300
So whatever our version of cargo ends up being, that's what you would actually download and install on Windows or Mac.

00:45:13.300 --> 00:45:15.660
And that would manage your Python.

00:45:16.080 --> 00:45:25.400
In that case, then that would be easier to install for users and you wouldn't have the conflict of, you know, like, should pip do everything?

00:45:25.400 --> 00:45:28.120
Because then it wouldn't be pip we're talking about.

00:45:28.120 --> 00:45:34.180
Because right now, if you were to add workflow features to pip, that's a bit awkward because pip is in every Python.

00:45:34.180 --> 00:45:39.120
So you have like multiple workflow tools on your path, which is a bit odd.

00:45:39.120 --> 00:45:45.720
Yeah, then you're tied to figuring out how do I get to the right version of Python to then ask it the workflow questions?

00:45:45.720 --> 00:45:47.120
And what if I get that wrong?

00:45:47.120 --> 00:45:50.360
And if 3.10 is not in the path, it's installed, but why doesn't this work?

00:45:50.360 --> 00:45:51.360
So on and so on.

00:45:51.360 --> 00:45:55.900
Yeah, so a couple of the interesting tools that have been growing a bit in more recent times.

00:45:55.900 --> 00:45:58.340
We've had the PY launcher on Windows for a while.

00:45:58.340 --> 00:46:03.700
And Brett, unfortunately not here, is maintaining a PY launcher for other platforms as well.

00:46:04.240 --> 00:46:10.260
And so there's some suggestion, I think Brett's actually experimenting a bit with adding some of this functionality into that tool.

00:46:10.260 --> 00:46:17.980
So kind of the primary function of the PY tool is you have that one command to launch Python, and it takes an option to select which version you actually want to run.

00:46:17.980 --> 00:46:20.400
So you don't end up with multiple copies on path.

00:46:20.400 --> 00:46:22.040
You don't worry about which order they're in.

00:46:22.040 --> 00:46:28.440
You just say PY and you'll get the latest version, whatever the latest version is, because it can do a more intelligent sort.

00:46:28.440 --> 00:46:32.120
Or you say PY-3.10-3.11.

00:46:32.120 --> 00:46:35.480
Or it has shebangs on Windows even, or you say the version in there?

00:46:35.480 --> 00:46:35.900
Yeah.

00:46:35.900 --> 00:46:39.160
The Windows one has a lot of extra functionality.

00:46:39.160 --> 00:46:44.160
I briefly looked at merging the two and kind of adopting Brett's one for both platforms.

00:46:44.160 --> 00:46:55.580
But honestly, the Windows one, like 5% of the functionality is launching Python, and the other 95% does not exist in the cross-platform one because it exists in the platform itself.

00:46:56.240 --> 00:46:59.540
So there's a lot of other stuff that I don't even want to bring up in the Windows one.

00:46:59.540 --> 00:47:07.800
But we do already have this extra tool that's getting installed everywhere, that's independently installable, that might be a suitable place to take on some of that workload.

00:47:08.120 --> 00:47:24.680
I think the big challenge here, and I don't want to get into the Pip-Conda discussion again, but we have at this point 10 years worth of evidence of what happens when you put out a workflow tool that isn't strictly Python, but will give you Python.

00:47:25.160 --> 00:47:27.640
And it hasn't beaten all the other workflow tools.

00:47:27.640 --> 00:47:30.660
People still don't want to use the tool that does that.

00:47:30.660 --> 00:47:39.280
And so I don't know if we can simply assume that providing that tool or mandating that kind of tool is going to be a winner because it exists.

00:47:39.280 --> 00:47:41.480
It's been around for a long time, and it's not won.

00:47:41.480 --> 00:47:47.060
I think it's proven to be a fantastic experience if it suits you.

00:47:47.060 --> 00:47:48.220
That's what Condor...

00:47:48.220 --> 00:47:56.960
You listen to a Condor user, and they are massively enthusiastic about it, but it's because it fits what they want to do.

00:47:56.960 --> 00:48:01.760
You listen to somebody who doesn't like Condor, and they're equally frustrated with the choices it makes.

00:48:01.940 --> 00:48:03.340
And I think Steve's right.

00:48:03.340 --> 00:48:07.900
I think we have to learn all of the lessons, not just some of the lessons.

00:48:07.900 --> 00:48:14.480
And one of the lessons here is that sort of everything in one bundle tool is a mixed blessing.

00:48:14.480 --> 00:48:19.720
I'm going to call from January because that's right in front of me, and it seems very prudent.

00:48:19.720 --> 00:48:26.420
Many of the respondents wanting a unified tool will have an implicit assumption that their preferred workflow will be supported.

00:48:26.760 --> 00:48:35.700
There are many workflows in the queue, and trying to corral all of them into a single workflow is quite possibly a not-particle problem.

00:48:35.700 --> 00:48:43.380
I don't think anybody responded to the survey saying, please give a unified workflow tool that doesn't do what I currently do.

00:48:43.380 --> 00:48:44.060
Exactly.

00:48:44.060 --> 00:48:46.600
Please make what I do not work.

00:48:46.600 --> 00:48:47.060
Yes.

00:48:47.060 --> 00:48:48.580
Or make it hard.

00:48:48.580 --> 00:48:48.940
Yeah.

00:48:48.940 --> 00:48:52.400
Everyone thinks their own workflow is normal, and everyone else is the weird one.

00:48:52.500 --> 00:48:59.280
Speaking of workflows, I was thinking through this process and thinking of, well, what might an option be?

00:48:59.280 --> 00:49:02.660
What might some other tool look like?

00:49:02.660 --> 00:49:08.620
You all talk a lot about in the surveys and in the responses about a user experience, right?

00:49:08.620 --> 00:49:15.720
And we've got certainly notable people in the community who are well-known for creating APIs that just connect with folks, right?

00:49:15.720 --> 00:49:22.880
So I put together this idea of, what if there was a few more commands in Python itself that you didn't even have to think about?

00:49:22.880 --> 00:49:23.740
Do I have pip?

00:49:23.740 --> 00:49:27.160
Does it use hatch under the covers, or does it not?

00:49:27.160 --> 00:49:33.900
What if you had things like Python init, Python add requests, Python upgrade all, Python build?

00:49:33.900 --> 00:49:36.820
I think you've just misspelled hatch here, haven't you?

00:49:36.820 --> 00:49:37.700
I probably have.

00:49:38.800 --> 00:49:41.120
You've spelled hatch with a P-Y-T-H-O-N.

00:49:41.120 --> 00:49:41.900
I probably have.

00:49:41.900 --> 00:49:43.660
Yeah, exactly.

00:49:43.660 --> 00:49:46.380
Well, but I don't have to think if pip is installed.

00:49:46.380 --> 00:49:48.500
I don't think if pip is there.

00:49:48.500 --> 00:49:56.060
I'm almost afraid to put this up here as a proposal, because if it got adopted, then it might be the way, and I don't like it.

00:49:56.060 --> 00:50:01.800
I don't know if I would like it, but have you thought to go this far to say, we're not even going to talk about the tools that make this happen?

00:50:01.800 --> 00:50:05.060
This might be pip plus hatch making this happen behind the scenes.

00:50:05.060 --> 00:50:11.520
You might set an environment variable that says, please use poetry when you do this stuff, but I don't want to talk or know about poetry.

00:50:11.520 --> 00:50:12.880
I just want the output of it.

00:50:12.880 --> 00:50:17.060
Just Python install, that's all you tell them, versus pip install-requirements.txt.

00:50:17.060 --> 00:50:18.580
Oh, I meant pip 3.

00:50:18.580 --> 00:50:19.940
Wait, pip 3 doesn't exist.

00:50:19.940 --> 00:50:20.980
Why doesn't pip 3 exist?

00:50:20.980 --> 00:50:22.260
On and on and on, right?

00:50:22.260 --> 00:50:27.900
And then if you want to do more, you use hatch, or use pip-tools, or insane, not insane.

00:50:27.900 --> 00:50:28.760
I'd use that.

00:50:28.760 --> 00:50:32.540
I think there is a question, like Steve said, this is almost hatch.

00:50:32.880 --> 00:50:35.740
MakeApp is the one I'm looking at and thinking, please give it to me now.

00:50:35.740 --> 00:50:37.500
But it's almost hatch.

00:50:37.500 --> 00:50:44.520
The question is whether hatch is where it is, or PDM, or poetry, or whether it's Python.

00:50:44.520 --> 00:50:54.720
If you want it to be the Python command, then I think there's a whole, we're way too far through this now to talk about the role of the PyPA,

00:50:54.720 --> 00:50:59.480
and how it links to the core developers.

00:50:59.700 --> 00:51:10.720
But there's a whole disconnect that we struggle with, and we continue to struggle with, which is, what can we do in packaging, and what do we need the core to be involved with?

00:51:10.720 --> 00:51:20.540
Pradyum mentioned earlier, Python core, defer packaging decisions to the PyPA and to the packaging people, which is great as long as it works.

00:51:20.540 --> 00:51:27.340
But when it doesn't, when we need to integrate more, we're not really there yet in knowing how to address that sort of thing.

00:51:27.340 --> 00:51:31.640
So I think a tool that does something like that, it's certainly what I'm looking for.

00:51:31.640 --> 00:51:36.860
It's certainly what I think a lot of people see when they say workflow tool.

00:51:37.220 --> 00:51:42.500
And as I say, we've got people like Hatch and PDM and Poetry making that a reality.

00:51:42.500 --> 00:51:44.280
You just made tools into people.

00:51:44.280 --> 00:51:45.020
Yeah, sorry.

00:51:45.020 --> 00:51:48.100
I don't know all the names.

00:51:48.100 --> 00:51:54.140
But yeah, we have people making that sort of thing happen in the different tools that are around.

00:51:54.140 --> 00:51:58.860
Unifying is a question that I think we need to look at.

00:51:59.080 --> 00:52:05.020
And there's a clear message that having 10 different tools that do this sort of workflow is not what people want.

00:52:05.020 --> 00:52:07.760
But we don't know quite what the best model is yet.

00:52:07.760 --> 00:52:09.180
So there's some work to do there.

00:52:09.180 --> 00:52:13.980
The massive danger, Paul, is if you pick one and it turns out to not be really that great.

00:52:13.980 --> 00:52:14.160
Yeah.

00:52:14.160 --> 00:52:15.780
Which we've been burnt by before.

00:52:15.780 --> 00:52:16.840
Many times.

00:52:16.840 --> 00:52:21.260
So it makes us a lot more hesitant to pick something.

00:52:21.260 --> 00:52:25.080
I think all I'll say on this is, yeah, there's tools out there doing a lot of this.

00:52:25.440 --> 00:52:33.980
The best way to get it adopted into core Python is have a tool that is clearly the winner that we can integrate that tool directly.

00:52:33.980 --> 00:52:44.000
And so the transition path becomes if you're using Python 3.36 or whatever version it makes it into, then you have Python that command.

00:52:44.000 --> 00:52:49.640
If you want to work with a previous version, then first you install, let's say, Hatch and use Hatch that command.

00:52:49.640 --> 00:52:53.820
This is the kind of thing that might get integrated into that PY launcher I mentioned before.

00:52:54.140 --> 00:52:57.540
Because we have more ability to add more random commands to that.

00:52:57.540 --> 00:53:00.280
All of these are valid Python commands today.

00:53:00.280 --> 00:53:05.160
So people could theoretically be running these commands already and having it do something.

00:53:05.160 --> 00:53:07.040
I'm clearly not doing what you intend here.

00:53:07.040 --> 00:53:08.240
But they're all valid commands.

00:53:08.240 --> 00:53:11.580
And so we can't just push out a minor update that breaks them.

00:53:11.580 --> 00:53:20.960
The only thing we do need to watch with that is something that Pradian mentioned in his blog post, which is, we want to see a winner in one sense.

00:53:21.380 --> 00:53:33.040
But we want to be very careful not to end up in a competitive situation where rather than working together to get to the ideal workflow, we're working against each other.

00:53:33.040 --> 00:53:36.540
We do not want, it's not going to be good for users.

00:53:36.540 --> 00:53:39.100
It's not going to be good for the tool developers.

00:53:39.100 --> 00:53:44.860
It's not going to be good for the community if we're all trying to compete with each other on, I've got this whizzy new feature.

00:53:44.860 --> 00:53:46.720
We want to work together.

00:53:46.720 --> 00:53:56.780
And I think we want, I hesitate to use the word a winner, but we want a clear sort of best of breed that we can promote.

00:53:56.780 --> 00:54:07.280
Because, as we've said, we've been so burned by saying, this is what we should use, having everything go horribly wrong, that we're very reluctant to do that without evidence.

00:54:07.280 --> 00:54:13.080
So we want to see something become that tool that people want.

00:54:13.080 --> 00:54:20.560
Which is going to get difficult as long as we have competing solutions where it's like, oh, now we're split 50-50.

00:54:20.560 --> 00:54:22.500
And now what?

00:54:22.500 --> 00:54:23.920
There were decent solutions.

00:54:23.920 --> 00:54:26.720
Whichever you pick makes half the ecosystem angry.

00:54:26.940 --> 00:54:31.320
Yeah, but I think it is important to eventually get help from Core Python.

00:54:31.320 --> 00:54:38.000
I know we were just talking about how Conda has been around for like a decade and that workflow tool hasn't won.

00:54:38.000 --> 00:54:43.760
But like, if a decade ago, you know, on python.org, you had that tool, I think that would have won.

00:54:43.760 --> 00:54:46.820
It's just about advertising it on, you know, Core Python.

00:54:46.820 --> 00:54:49.080
So eventually we'll need their assistance.

00:54:49.080 --> 00:54:50.440
Yeah, that's a really good point.

00:54:50.440 --> 00:54:51.060
Indeed.

00:54:51.060 --> 00:54:54.020
And, you know, we definitely do want to make it work from the Core Python side.

00:54:54.320 --> 00:54:57.940
I might be the least kind of conflicted core developer here.

00:54:57.940 --> 00:55:00.460
So I can say that we do want to make this work.

00:55:00.460 --> 00:55:06.260
It's just seen as kind of outside of the core runtime responsibilities.

00:55:06.260 --> 00:55:17.460
One of the massive discussion threads actually kicked off because I mistakenly thought the steering council kind of owned responsibility for packaging and delegated it officially to the PyPA.

00:55:17.460 --> 00:55:20.700
But it turns out I was wrong and they just don't cover packaging at all.

00:55:20.700 --> 00:55:24.880
And so packaging is kind of outside of core focus entirely.

00:55:24.880 --> 00:55:30.140
It's officially not cared for by the core developers, not unofficially not cared for, if that makes sense.

00:55:30.140 --> 00:55:31.360
It's like we do care about it.

00:55:31.360 --> 00:55:32.280
We do want it to work.

00:55:32.280 --> 00:55:37.040
We do want it to be a good experience because we know it's critical to the overall Python experience.

00:55:37.540 --> 00:55:44.760
But it's also just scoped out of being our job, which is why, you know, we don't hold up releases based on packaging.

00:55:44.760 --> 00:55:52.280
And to get packaging features into the core runtime is it just feels like a huge amount of work to do because it's got to overcome that.

00:55:52.480 --> 00:56:01.600
This is so important to the core runtime, you know, to the reference interpreter that it's got to be in there, even though it's a packaging thing.

00:56:01.600 --> 00:56:05.060
So it's challenging, but there's definitely those of us who want to make it happen.

00:56:05.200 --> 00:56:09.720
And one of the benefits of being outside of the language is that it can move faster.

00:56:09.720 --> 00:56:16.320
Python has an annual release cycle compared to, to draw an analogy, the Rust plus cargo story of six weeks.

00:56:16.800 --> 00:56:28.980
And also not having this be in the core language makes it possible for alternative platforms and implementations that don't exist, that CPython does not care about today, to support those things.

00:56:28.980 --> 00:56:35.040
Wasm, which is a T3 support, PEP 11 for anyone who cares about where that word comes from.

00:56:35.040 --> 00:56:36.580
Pryodive exists.

00:56:36.580 --> 00:56:38.380
It runs things.

00:56:38.380 --> 00:56:42.000
CPython compiles on Wasm and it runs things.

00:56:42.000 --> 00:56:46.060
The packaging story for Python in the browser is going to be very different.

00:56:46.500 --> 00:56:49.460
The development workflow of Python in the browser is going to be very different.

00:56:49.460 --> 00:57:00.620
And if you try to shunt poetry and pip or those specific tools as differently shaped into those workflows, that's just not going to work.

00:57:00.620 --> 00:57:06.600
And you also don't want to rebuild that avenue of innovation using these tools.

00:57:06.600 --> 00:57:16.480
Or that's one of the pieces that is sort of a symptom of success or a problem of success, which is Hatch, Poetry, PDM, all of these exist.

00:57:16.480 --> 00:57:20.020
Because the other problems have been solved well enough.

00:57:20.020 --> 00:57:24.660
And they've been solved well enough that these are now the main main points.

00:57:24.660 --> 00:57:26.740
They're innovating in this space.

00:57:26.740 --> 00:57:34.780
And there's other aspects of Python getting innovated on in terms of where it runs, in terms of how you interact with it even.

00:57:35.500 --> 00:57:39.200
And as long as we don't stifle those, we're doing fine.

00:57:39.200 --> 00:57:43.380
And that's a really good point about it not being in the core distribution as well.

00:57:43.380 --> 00:57:53.080
Like if the ability to install packages was considered a core feature of the runtime, we wouldn't be able to release the runtime for a new platform until we'd figured that out.

00:57:53.080 --> 00:57:54.640
Because that would block the release.

00:57:54.640 --> 00:58:01.480
Because we'd have to say Python is incomplete until it has a complete packaging story on this brand new platform.

00:58:01.480 --> 00:58:03.820
So because that is separated, we can release Python.

00:58:03.820 --> 00:58:10.020
And so we have WASM releases of the CPython runtime because packaging is not part of that.

00:58:10.020 --> 00:58:13.440
And so we don't have to wait for that to come up.

00:58:13.440 --> 00:58:22.020
And yeah, because it's independent, Anaconda can come along and build PyScript and build packaging around the runtime because it doesn't have to be tightly integrated into it.

00:58:22.080 --> 00:58:23.300
So there's big advantages.

00:58:23.300 --> 00:58:28.260
Like there's a reason we pulled distri-tools out of the core library because it was restricting things.

00:58:28.260 --> 00:58:46.100
And so it opens up more things, but it does put more responsibility on distributors, essentially, to build a distribution of Python that includes the workflow tools, the packaging tools, the indexes, the repositories, whatever they need to give users of that distribution a good experience.

00:58:46.600 --> 00:58:54.260
And ultimately, a lot of this comes down to our distributions from Python.org have a very, very basic story for this.

00:58:54.260 --> 00:58:55.100
Like we have pip.

00:58:55.100 --> 00:58:57.100
That's basically our entire story.

00:58:57.100 --> 00:59:03.860
Linux distros have their own story, which again, is they keep a very narrow focus on what they want to care about.

00:59:04.440 --> 00:59:06.840
And users want things outside of that.

00:59:06.840 --> 00:59:11.480
Even condo users, very kind of narrow focus to what's in those repositories.

00:59:11.480 --> 00:59:17.200
And when you try and go outside of that, then things start breaking down just the same as all the distributions do.

00:59:17.200 --> 00:59:19.700
So it's got pluses and minuses.

00:59:19.700 --> 00:59:24.840
Python gets into places where it otherwise couldn't if packaging was a core feature of the runtime.

00:59:25.200 --> 00:59:37.040
But it does mean that packaging is determined by the distribution and not by the core team and not even by the core maintainers of the kind of satellite projects that are really, really close to the core runtime.

00:59:37.040 --> 00:59:44.660
Because setup tools can't determine how a WASM build is going to work because they're not controlling that distribution.

00:59:45.300 --> 00:59:53.000
So there's a separation of roles that is not really clear, even to most of us who are involved, if I'm honest, that we all have different jobs to do.

00:59:53.000 --> 00:59:55.520
And someone has to pull it all together.

00:59:55.520 --> 00:59:59.060
And unfortunately, a lot of the time, it's the end user has to connect the dots.

00:59:59.060 --> 01:00:01.820
Well, I think, guys, we are out of time, I would say.

01:00:01.820 --> 01:00:04.700
Although not out of discussion points, for sure.

01:00:04.700 --> 01:00:06.160
This could just go on and on.

01:00:06.160 --> 01:00:08.140
Super interesting conversation.

01:00:08.140 --> 01:00:10.460
It's really great to see it getting this focus.

01:00:10.460 --> 01:00:13.700
But yeah, it's going to be interesting to see where it goes.

01:00:13.700 --> 01:00:14.940
It's a challenge.

01:00:14.940 --> 01:00:16.900
But, Arjan, I really like your idea.

01:00:16.900 --> 01:00:18.360
It's that we're going to rise to it.

01:00:18.360 --> 01:00:22.760
We've now come, we've solved the hard enough problems now that this new thing is a problem.

01:00:22.760 --> 01:00:23.600
Ofak, go ahead.

01:00:23.600 --> 01:00:27.360
I have one quick question because I'm sure listeners would be curious, too.

01:00:27.360 --> 01:00:32.000
What do we think the next steps either are or should be for this?

01:00:32.000 --> 01:00:38.400
I know we split off into different discussions and we're trying to research the feedback that we got.

01:00:38.400 --> 01:00:41.120
But what do we think the next steps are?

01:00:41.460 --> 01:00:45.600
Or is that just the next step, just trying to understand what users want more?

01:00:45.600 --> 01:00:47.140
I don't think we know yet.

01:00:47.140 --> 01:00:52.160
Yeah, I mean, I've written far too many posts on where I think we've got to go next.

01:00:52.160 --> 01:00:56.420
But I do think we still have to, as Prajian mentioned earlier, level set.

01:00:56.420 --> 01:00:58.180
There's a lot of people involved.

01:00:58.180 --> 01:01:01.800
We all have different backgrounds, different expectations, different experiences.

01:01:02.060 --> 01:01:06.200
And we just need to talk and figure that out.

01:01:06.200 --> 01:01:13.640
And it's the kind of thing that would be ideal for us all to fly to some remote island somewhere for a week and just hash it all out in person.

01:01:13.640 --> 01:01:15.240
That's unfortunately not going to happen.

01:01:15.240 --> 01:01:17.020
So long discourse threads.

01:01:17.020 --> 01:01:20.020
We're not leaving Hawaii until we solve this.

01:01:20.020 --> 01:01:20.860
We've got to stay here.

01:01:20.860 --> 01:01:21.360
I'm okay with that.

01:01:21.360 --> 01:01:22.180
I will do it.

01:01:22.920 --> 01:01:24.820
Three months later, we're still there.

01:01:24.820 --> 01:01:26.560
Yeah.

01:01:26.560 --> 01:01:28.400
Absolutely.

01:01:28.400 --> 01:01:29.160
All right.

01:01:29.160 --> 01:01:31.020
Well, you all, thank you so much for being here.

01:01:31.020 --> 01:01:35.200
Thanks for taking the time and participating in this first, the original discussion.

01:01:35.200 --> 01:01:36.760
And then this here as well.

01:01:36.760 --> 01:01:41.180
I think it's going to highlight a lot of interesting and unseen aspects for people.

01:01:41.300 --> 01:01:46.000
But a word, listeners out there, they want to get maybe their feedback in.

01:01:46.000 --> 01:01:49.060
We saw some folks in the audience asking how they take the survey.

01:01:49.060 --> 01:01:49.940
The survey is closed.

01:01:49.940 --> 01:01:54.160
I'll give you a chance to sort of say like, what next for people out there listening?

01:01:54.160 --> 01:01:55.880
Steve, we'll go around the circle again.

01:01:55.880 --> 01:01:57.320
You're the top of it.

01:01:57.320 --> 01:01:57.660
Go first.

01:01:57.660 --> 01:02:01.440
If you're still on Twitter, then you can mention me in a tweet at Zuba.

01:02:01.440 --> 01:02:07.860
I do read those and I do collect a lot of kind of random information and ideas out of there.

01:02:08.500 --> 01:02:11.220
Otherwise, discourse and start a discussion.

01:02:11.220 --> 01:02:15.740
And don't be surprised if we point you at an existing one and say we've done this one to death already.

01:02:15.740 --> 01:02:18.180
So I'm always happy to hear more.

01:02:18.180 --> 01:02:22.660
And I guess just be aware that we do get very overloaded.

01:02:22.660 --> 01:02:22.920
Sure.

01:02:22.920 --> 01:02:23.220
Paul?

01:02:23.220 --> 01:02:27.620
Yeah, I think that's probably about the situation.

01:02:27.620 --> 01:02:30.640
Again, I'm not very active on social media.

01:02:30.640 --> 01:02:34.800
You can probably ping me on Twitter or Mastodon and I might notice.

01:02:34.800 --> 01:02:36.340
Certainly get involved.

01:02:36.340 --> 01:02:37.700
I can't promise.

01:02:38.240 --> 01:02:40.860
Certainly get involved on Discord.

01:02:40.860 --> 01:02:49.020
I think a lot of people are put off joining the conversations because it feels quite a hostile environment.

01:02:49.020 --> 01:02:52.520
There's a lot of, like Steve said, we've seen that before.

01:02:52.520 --> 01:02:54.900
We do want new perspectives.

01:02:54.900 --> 01:02:57.660
We do want people offering ideas.

01:02:57.660 --> 01:02:59.220
And it's hard.

01:02:59.220 --> 01:03:07.640
It's hard to speak up because there's so much history that people will assume you know and you won't.

01:03:07.640 --> 01:03:12.320
But please do, you know, come with half-baked ideas.

01:03:12.320 --> 01:03:15.080
We'll maybe tell you how to bake them.

01:03:15.080 --> 01:03:17.540
We'll maybe tell you we've already covered them.

01:03:17.600 --> 01:03:19.260
But we won't ignore them.

01:03:19.260 --> 01:03:20.320
We'll see them.

01:03:20.760 --> 01:03:27.200
And even if it looks like we're not picking up on things that you think are really important, they'll get in the pot.

01:03:27.200 --> 01:03:28.640
We will be aware of them.

01:03:28.640 --> 01:03:29.760
And that's the main thing.

01:03:29.760 --> 01:03:33.300
What we want more than anything is to be aware of what people think.

01:03:33.300 --> 01:03:33.600
Yep.

01:03:33.600 --> 01:03:34.360
Effect?

01:03:34.540 --> 01:03:36.160
Yeah, I agree with what's been said.

01:03:36.160 --> 01:03:39.200
I'm always on the discourse forums, reading feedback.

01:03:39.200 --> 01:03:48.660
And if any Twitter threads gain popularity, I think it's important to realize most people that work on this are volunteers at the end of the day.

01:03:48.660 --> 01:03:52.900
So we might not have much time to iterate as fast as people want.

01:03:52.900 --> 01:03:55.440
But we are trying our best, for sure.

01:03:55.440 --> 01:03:55.820
Excellent.

01:03:55.820 --> 01:04:00.820
And there was that big sponsorship to make major progress on PyPI.org.

01:04:00.820 --> 01:04:02.500
And maybe we'll see something like that at some point.

01:04:02.500 --> 01:04:04.260
Pradyan, you get the final word here.

01:04:04.360 --> 01:04:05.800
That's literally what I was going to say.

01:04:05.800 --> 01:04:07.360
Invest in Python, folks.

01:04:07.360 --> 01:04:13.060
If you work somewhere that uses Python, tell them to invest in the language.

01:04:13.060 --> 01:04:21.320
And part of why we're having these discussions is because the role that initiated the user service is a sponsored role from Bloomberg.

01:04:21.320 --> 01:04:28.720
And these sorts of investments into the ecosystem are vital to sort of make things keep working.

01:04:28.720 --> 01:04:33.920
Because there's only software we can go with a bunch of people doing this in their evenings.

01:04:34.180 --> 01:04:38.700
When they're, you know, slightly sort of bored and kind of want to keep themselves busy.

01:04:38.700 --> 01:04:46.080
And these tough problems are not going to solve themselves because someone had half an hour in their evening or an hour in their evening.

01:04:46.080 --> 01:04:46.520
Yep.

01:04:46.520 --> 01:04:47.240
All right.

01:04:47.240 --> 01:04:47.760
Good point.

01:04:47.760 --> 01:04:49.680
And thank you all for being here.

01:04:49.840 --> 01:04:50.400
Thanks very much.

01:04:50.400 --> 01:04:50.900
Thanks, Michael.

01:04:50.900 --> 01:04:51.060
Bye.

01:04:51.060 --> 01:04:51.060
Bye.

01:04:51.060 --> 01:04:51.340
Bye.

01:04:51.480 --> 01:04:52.080
Bye.

01:04:52.080 --> 01:04:52.480
Bye.

01:04:52.480 --> 01:04:52.960
Bye.

01:04:52.960 --> 01:04:55.240
This has been another episode of Talk Python To Me.

01:04:55.240 --> 01:04:56.980
Thank you to our sponsors.

01:04:56.980 --> 01:04:58.660
Be sure to check out what they're offering.

01:04:58.660 --> 01:05:00.080
It really helps support the show.

01:05:00.080 --> 01:05:03.760
Join Cox Automotive and use your technical skills

01:05:03.760 --> 01:05:05.740
to transform the way the world buys,

01:05:05.740 --> 01:05:07.460
sells, and owns cars.

01:05:07.460 --> 01:05:10.160
Find an exciting position that's right for you

01:05:10.160 --> 01:05:12.600
at talkpython.fm/cox.

01:05:12.600 --> 01:05:15.040
Take some stress out of your life.

01:05:15.040 --> 01:05:17.320
Get notified immediately about errors

01:05:17.320 --> 01:05:19.380
and performance issues in your web

01:05:19.380 --> 01:05:20.840
or mobile applications with Sentry.

01:05:21.300 --> 01:05:24.260
Just visit talkpython.fm/sentry

01:05:24.260 --> 01:05:25.820
and get started for free.

01:05:25.820 --> 01:05:28.620
And be sure to use the promo code talkpython,

01:05:28.620 --> 01:05:29.420
all one word.

01:05:29.420 --> 01:05:31.040
Want to level up your Python?

01:05:31.040 --> 01:05:33.200
We have one of the largest catalogs

01:05:33.200 --> 01:05:35.160
of Python video courses over at Talk Python.

01:05:35.160 --> 01:05:37.400
Our content ranges from true beginners

01:05:37.400 --> 01:05:40.260
to deeply advanced topics like memory and async.

01:05:40.260 --> 01:05:42.920
And best of all, there's not a subscription in sight.

01:05:42.920 --> 01:05:45.840
Check it out for yourself at training.talkpython.fm.

01:05:45.840 --> 01:05:47.740
Be sure to subscribe to the show,

01:05:47.740 --> 01:05:49.480
open your favorite podcast app,

01:05:49.480 --> 01:05:50.520
and search for Python.

01:05:50.920 --> 01:05:51.840
We should be right at the top.

01:05:51.840 --> 01:05:54.780
You can also find the iTunes feed at /itunes,

01:05:54.780 --> 01:05:57.000
the Google Play feed at /play,

01:05:57.000 --> 01:06:01.200
and the direct RSS feed at /rss on talkpython.fm.

01:06:01.200 --> 01:06:04.620
We're live streaming most of our recordings these days.

01:06:04.620 --> 01:06:05.980
If you want to be part of the show

01:06:05.980 --> 01:06:08.020
and have your comments featured on the air,

01:06:08.020 --> 01:06:10.120
be sure to subscribe to our YouTube channel

01:06:10.120 --> 01:06:12.400
at talkpython.fm/youtube.

01:06:12.400 --> 01:06:14.300
This is your host, Michael Kennedy.

01:06:14.300 --> 01:06:15.600
Thanks so much for listening.

01:06:15.600 --> 01:06:16.760
I really appreciate it.

01:06:16.760 --> 01:06:18.680
Now get out there and write some Python code.

01:06:20.540 --> 01:06:39.600
I'll see you next time.

01:06:39.600 --> 01:07:09.580
Thank you.

