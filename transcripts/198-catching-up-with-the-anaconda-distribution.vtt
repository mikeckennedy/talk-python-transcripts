WEBVTT

00:00:00.001 --> 00:00:04.060
It's time to catch up with the Anaconda crew and see what's new in the Anaconda distribution.

00:00:04.060 --> 00:00:08.340
This edition of Python was created to solve some of the stickier problems around deployment,

00:00:08.340 --> 00:00:13.040
especially in the data science space. Their usage gives them deep insight into how Python is being

00:00:13.040 --> 00:00:17.580
used in the enterprise space as well. And that turns out to be a very interesting part of the

00:00:17.580 --> 00:00:22.400
conversation. Join me and Peter Wang, CTO at Anaconda Inc., on this episode of Talk Python

00:00:22.400 --> 00:00:42.580
to Me, number 198, recorded January 16th, 2019. Welcome to Talk Python To Me, a weekly podcast

00:00:42.580 --> 00:00:47.560
on Python, the language, the libraries, the ecosystem, and the personalities. This is your

00:00:47.560 --> 00:00:51.780
host, Michael Kennedy. Follow me on Twitter, where I'm @mkennedy. Keep up with the show

00:00:51.780 --> 00:00:56.860
and listen to past episodes at talkpython.fm, and follow the show on Twitter via at Talk Python.

00:00:56.860 --> 00:01:02.180
This episode is sponsored by Linode and Rollbar. Please check out what they're offering during

00:01:02.180 --> 00:01:06.200
their segments. It really helps support the show. Peter, welcome to Talk Python.

00:01:06.200 --> 00:01:07.960
Thank you very much. I'm very happy to be here.

00:01:07.960 --> 00:01:12.880
I'm happy to have you here. It's been a while since we've talked about Anaconda. I had Travis

00:01:12.880 --> 00:01:17.080
Oliphant on the show way back when, but it seems like it's time for a catch up on what you all

00:01:17.080 --> 00:01:21.160
have been up to. Yeah, well, there's been a lot going on. It's definitely, one of the employees

00:01:21.160 --> 00:01:25.480
that's commented that every six months, it feels like a different company. And we do,

00:01:25.480 --> 00:01:28.440
yeah, the space is evolving very quickly. We're trying to just keep up with it.

00:01:28.440 --> 00:01:31.420
So you would say this data science thing is not a fad. It's probably going to be around

00:01:31.420 --> 00:01:31.740
for a while?

00:01:31.740 --> 00:01:34.680
At this point, I think I'm going to go on a limb and say it's probably going to be around

00:01:34.680 --> 00:01:35.240
for a little while.

00:01:35.240 --> 00:01:38.680
Right on. All right, before we get into all that though, let's start with your story.

00:01:38.680 --> 00:01:40.140
How did you get into programming in Python?

00:01:40.140 --> 00:01:44.280
I actually got into programming when I was a young kid and I've been always programming.

00:01:44.280 --> 00:01:46.960
I've actually been programming for almost as long as I've been speaking English.

00:01:46.960 --> 00:01:50.060
I got a PC when I first came here to the United States, so I was very lucky.

00:01:50.540 --> 00:01:56.140
But I actually majored in physics and out of college, I started going to computer programming

00:01:56.140 --> 00:02:03.740
as a profession. And I did a bunch of C++, but I discovered this thing called Python on Slashdot.

00:02:03.740 --> 00:02:08.960
And I think they announced the version 152. And I was like, fine, I'll go take a look at it.

00:02:08.960 --> 00:02:14.100
And I started playing with it and I just fell in love. And so my day job was like getting beat

00:02:14.100 --> 00:02:19.280
up by C++ templates and out of compliance compilers. And at night, I just hack on Python.

00:02:19.920 --> 00:02:23.980
So finally, after a few years of this, I ended up moving to Austin. I got a job doing Python

00:02:23.980 --> 00:02:29.000
as my day job, which was awesome. In like 2004, I started at Enthought. And I did a lot of work

00:02:29.000 --> 00:02:33.620
in the scientific community and doing consulting with Python because I knew the science given my

00:02:33.620 --> 00:02:37.040
math and science background in physics. But I also knew the software principles and software

00:02:37.040 --> 00:02:40.880
engineering. So it was a really fantastic time. And that's basically the long and short of it.

00:02:40.880 --> 00:02:44.600
Yeah, that sounds like a great fit. You know, things just came together, right? You have this math and science

00:02:44.600 --> 00:02:47.860
background and you love Python. You found this job and it all just,

00:02:48.020 --> 00:02:51.180
like all of those things came together to really put you in the right place.

00:02:51.180 --> 00:02:55.000
They really did. I feel very, very blessed in that way. Now, it was a lot of hard work too,

00:02:55.000 --> 00:03:00.820
but I got very comfortable. And, you know, there's this great quote from Bruce Lee that you must never,

00:03:00.820 --> 00:03:04.600
like not, you must never get comfortable, but there will be plateaus and you can't stay there.

00:03:04.800 --> 00:03:11.320
And so I think towards the end of the 20, the aughts, the 2000s, around 2010, I was starting to see big

00:03:11.320 --> 00:03:16.200
data happening. And I started realizing that Python was getting used for business data analysis more

00:03:16.200 --> 00:03:20.980
than just science and engineering. And that our little cozy scipy community could actually be

00:03:20.980 --> 00:03:26.460
something much bigger. And so I started doing some exploration, exploratory work. I really wanted to

00:03:26.460 --> 00:03:30.780
do like D3 for Python. You had a few of the little things I wanted to scratch, some few other itches.

00:03:30.980 --> 00:03:36.080
And so I started Continuum with Travis in order to address some of the technical gaps that we had in

00:03:36.080 --> 00:03:41.340
the community and the technology stack. And then also to really push a narrative in the technology

00:03:41.340 --> 00:03:47.760
market that yes, Python is good for business use. Yes, it's production ready. Yes, you should use it.

00:03:47.980 --> 00:03:53.000
And it can handle big data just fine. And so we really started pushing that narrative in 2012,

00:03:53.000 --> 00:03:57.500
you know, created num focus, created py data, did all these things. And I think that the results have

00:03:57.500 --> 00:04:03.140
spoken for themselves. I definitely think they are that they have. That's great. In 2012, I do think

00:04:03.140 --> 00:04:07.720
there was a little bit more of a debate of, well, is it safe to use Python for our business critical

00:04:07.720 --> 00:04:15.300
stuff? But I feel like that battle has been really solidly won, especially on the data science front,

00:04:15.300 --> 00:04:20.200
right? There was debates about R, maybe R was the space to be. That's not really where it's at anymore,

00:04:20.200 --> 00:04:20.480
is it?

00:04:20.480 --> 00:04:25.960
No, there was definitely a period of language war sort of stuff going on early on. It's odd, like, you know,

00:04:25.960 --> 00:04:31.480
even then, the discussion about is data science a fad? Is it a fad term? Isn't it just business

00:04:31.480 --> 00:04:36.480
intelligence? Or is this just that big data hype cycle all over again? You know, there's a lot of

00:04:36.480 --> 00:04:42.160
doubters and haters on that term. But as I've talked to more users and managers and stuff,

00:04:42.600 --> 00:04:47.460
at businesses, it's clear that they're thinking about data analysis and data analytics in a very

00:04:47.460 --> 00:04:51.540
different way than they have for like decades. And data science is definitely, definitely here to stay

00:04:51.540 --> 00:04:52.060
because of that.

00:04:52.060 --> 00:04:57.840
Absolutely, absolutely. So maybe give people a sense of what you do day to day so they know where you're

00:04:57.840 --> 00:04:58.260
coming from.

00:04:58.260 --> 00:05:05.660
Well, my day to day consists of my former role as CTO. I run the community innovation and open source

00:05:05.660 --> 00:05:10.420
group here at Anaconda. I actually don't run the product engineering teams. And I work with

00:05:10.420 --> 00:05:15.920
everyone. But my general role is working with the community, helping the various community oriented

00:05:15.920 --> 00:05:20.340
and open source devs that we have champion their projects and work better with the broader community.

00:05:20.340 --> 00:05:25.320
I also do a lot of industry facing technical marketing and evangelism. So a lot of customers

00:05:25.320 --> 00:05:29.260
will have me go and speak at internal data science events they do, things like that. There's actually

00:05:29.260 --> 00:05:34.600
remarkably few people in the Python world that really speak to industry on behalf of Python itself,

00:05:34.600 --> 00:05:39.100
relative to the usage of it. I mean, you'll find no shortage of industry analysts talking about how

00:05:39.100 --> 00:05:44.560
great Java is, or how great these like big data projects are, you know, all these like PR type

00:05:44.560 --> 00:05:49.860
things. There's no one doing that for Python. And so that is actually some of my day job. And beyond

00:05:49.860 --> 00:05:53.020
that, it's just trying to keep up with all the things that are happening in data science, machine

00:05:53.020 --> 00:05:58.300
learning, data engineering, data visualization, AI, all of it.

00:05:58.300 --> 00:06:04.460
On top of the advocacy role, it's a pretty much full time learning thing, right? Because there's so

00:06:04.460 --> 00:06:05.040
much change, right?

00:06:05.040 --> 00:06:09.460
There's so much in every area. I mean, there's all the cloud stuff too. There's edge learning,

00:06:09.460 --> 00:06:13.740
there's data privacy, you name it. Every single area that touches data science is undergoing massive

00:06:13.740 --> 00:06:14.640
change right now.

00:06:14.640 --> 00:06:18.880
That's super exciting, but it's also a bit of a challenge. And I think the Anaconda distribution

00:06:18.880 --> 00:06:24.420
does help some with that. Before we get into the distribution story, though, let's just talk about

00:06:24.420 --> 00:06:32.460
Anaconda Inc. So when I had Travis on the show a couple years ago, it was Continuum that was the

00:06:32.460 --> 00:06:37.940
company and Anaconda was the distribution. But now those are not different anymore, right? It's just

00:06:37.940 --> 00:06:40.700
Anaconda, the company and the distribution.

00:06:40.700 --> 00:06:47.080
We renamed ourselves really out of pragmatism, because we would go to places and we'd introduce

00:06:47.080 --> 00:06:51.800
ourselves as Continuum Analytics. And they're like, oh, yes, you guys, like you got some Python stuff.

00:06:51.800 --> 00:06:56.780
We see that here. Like, who are you guys? And then we say, oh, well, we make Anaconda. And they're like, oh,

00:06:56.780 --> 00:07:01.140
I love Anaconda. I use Anaconda all the time and blah, blah, blah. And so we sort of like, after that started

00:07:01.140 --> 00:07:06.000
happening to us all the time, we sort of figured like, well, maybe we should just call ourselves Anaconda.

00:07:06.000 --> 00:07:12.540
And, you know, one of the things that held that up was for a long time, as we were growing the company and

00:07:12.540 --> 00:07:18.120
growing the distribution, we were afraid that changing the company name would actually spook the community.

00:07:18.800 --> 00:07:22.880
And it's a really, it's been one of these interesting things. Like I have, I have lots to say

00:07:22.880 --> 00:07:27.060
about open source. Let's just put it that way. But it's very hard to play the game of open source,

00:07:27.060 --> 00:07:32.460
honestly, and not still get beat up with FUD about it. And so even though we've open sourced our build

00:07:32.460 --> 00:07:35.760
tools, we've open sourced the recipes, we open source everything from the very beginning,

00:07:35.760 --> 00:07:40.960
there are still people in the community who distrust us because we're a company trying to make a

00:07:40.960 --> 00:07:45.760
sustainable, build sustainable funding for this open source effort. So it's a really,

00:07:45.800 --> 00:07:49.800
that was one of the reasons we actually were reticent to do that name change until finally

00:07:49.800 --> 00:07:51.680
just became a no brainer that we basically had to.

00:07:51.680 --> 00:07:56.680
Yeah. If people keep mistaking you for Anaconda Inc, maybe just say, fine, that is our name.

00:07:56.680 --> 00:08:00.140
Yeah. And we'll just deal with the haters, you know, on a one-off basis, I guess. I don't know.

00:08:00.140 --> 00:08:06.400
Yeah, exactly. I mean, it's not unprecedented, right? 37 Signals, who made Basecamp and,

00:08:06.400 --> 00:08:11.180
you know, sort of founded Ruby on Rails, they eventually renamed themselves just to Basecamp.

00:08:11.180 --> 00:08:15.320
They're like, yep, the one major project, fine, we're just called that, right? I guess it's like

00:08:15.320 --> 00:08:19.100
Microsoft reading themselves Windows, which they're probably very happy they didn't. But,

00:08:19.100 --> 00:08:25.620
you know, in a lot of senses, that makes sense. That's cool. Okay, so there's a broad spectrum

00:08:25.620 --> 00:08:31.060
of folks who listen to the show. Many of them will have experience with data science. Many of them

00:08:31.060 --> 00:08:36.700
will know what the Anaconda distribution is. But maybe just, you know, for the folks who are new or

00:08:36.700 --> 00:08:40.780
have been working somewhere else, tell them, what is this distribution? How is it different

00:08:40.780 --> 00:08:43.040
than the standard CPython? And why did you guys make it?

00:08:43.040 --> 00:08:49.020
I'll try to sum this up for a technical, but not data science necessarily audience, right? The basic

00:08:49.020 --> 00:08:56.000
gist of it is that Anaconda arose out of a failure in the Python ecosystem to address the packaging needs

00:08:56.000 --> 00:09:03.200
for the numerical and computationally like heavyweight packages that are in Python. And so for the same

00:09:03.200 --> 00:09:08.320
reason that Linux distributions exist, very few people build Linux from scratch. For actually

00:09:08.320 --> 00:09:13.860
exactly the same technical reasons, we built the Anaconda distribution, because it's actually really,

00:09:13.860 --> 00:09:18.860
really hard to correctly build all of the underlying components that you need for doing productive data

00:09:18.860 --> 00:09:25.880
science and machine learning. And so the reason it's distribution is because all of the libraries you

00:09:25.880 --> 00:09:30.480
build and the packages, the modules with extension modules that you load up, they need to be compiled

00:09:30.480 --> 00:09:35.980
together, they need to be compiled in a compatible way. And so you need to agree on compiler definitions,

00:09:35.980 --> 00:09:41.760
you need to agree on code generation targets, optimization levels, things like that. And if you

00:09:41.760 --> 00:09:49.540
only ever use pure Python packages, so packages whose code only consists of PY files, then you basically

00:09:49.540 --> 00:09:54.220
never run into a problem. It's only when you start having extension libraries, things that depend on maybe

00:09:54.220 --> 00:09:59.020
system libraries, God forbid you try to cross platforms between Linux and Mac and Windows across

00:09:59.020 --> 00:10:06.060
architectures between ARM and x86, you're completely hosed. And so we, in service to the scientific Python

00:10:06.060 --> 00:10:11.460
community, we built this distribution that was a set of packages and a way of building packages that are

00:10:11.460 --> 00:10:16.220
compatible with each other. So that's what the Anaconda distribution is. It's a bulk distribution with about a

00:10:16.220 --> 00:10:23.420
couple hundred pre made libraries. And we have a package updater in it called Conda that lets you

00:10:23.420 --> 00:10:29.180
then install thousands more that are built by us and built by a large open community that also uses the

00:10:29.180 --> 00:10:35.160
same standards. So that's what Conda and Anaconda are in a nutshell. And it's really one of these like

00:10:35.160 --> 00:10:42.000
packaging war kind of things or packaging, the confusion of Python packaging. We actually tried to approach

00:10:42.000 --> 00:10:49.260
Guido back in the day to help define some standards around this. And he basically gave us a very helpful

00:10:49.260 --> 00:10:53.680
guidance, which is maybe your packaging needs are so exotic, you need to build your own system. So we took

00:10:53.680 --> 00:10:59.620
him at his word and we did it. And consequently, when people use Conda, in a lot of cases, things just work.

00:10:59.620 --> 00:11:04.540
There's still like corner cases and a lot of like little rough spots, especially in terms of pip interop.

00:11:04.540 --> 00:11:08.760
But we're very proud of the work we've done so far. And it's used in production every day by big,

00:11:08.760 --> 00:11:13.980
big companies that people rely on Python for their production workloads. So that's basically Anaconda

00:11:13.980 --> 00:11:14.820
and Conda in a nutshell.

00:11:14.820 --> 00:11:20.860
Okay, well, that's a really good summary. Yeah, when I think of it, the main value is that you get

00:11:20.860 --> 00:11:27.820
pre compiled binary versions of the packages that would otherwise have to be compiled from source when you

00:11:27.820 --> 00:11:29.280
pip install them, right?

00:11:29.280 --> 00:11:29.960
Yes.

00:11:29.960 --> 00:11:38.560
And the other part is the cross package compatibility, because somebody makes one package, and they have an

00:11:38.560 --> 00:11:43.700
interest in making them as best they can or whatever, but they don't really care about integrating and testing

00:11:43.700 --> 00:11:49.660
against all the other open source projects that you may pull into your project that they don't even care or know about,

00:11:49.660 --> 00:11:55.100
right? So this sort of bigger picture compatibility that you look at is pretty cool as well.

00:11:55.180 --> 00:11:58.980
It's actually become quite critical. And I think this is one of the areas that the Python community,

00:11:58.980 --> 00:12:05.180
in the confounding haze of packaging, and half built packaging solutions, that we've not really

00:12:05.180 --> 00:12:10.280
been good at giving guidance to the user community about is that if all you ever need to do is build

00:12:10.280 --> 00:12:14.040
one package for yourself, and you fully control the deployment environment, and the development

00:12:14.040 --> 00:12:19.300
environment, then maybe you can go and do that, right? But if you actually have to work on a team

00:12:19.300 --> 00:12:23.900
with other people, like for example, on web developers, a lot of times, they control the

00:12:23.900 --> 00:12:28.440
server, they choose the packages they bring, and they write the code, and they can just push it out

00:12:28.440 --> 00:12:30.200
to their server. And they're good, right?

00:12:30.200 --> 00:12:33.880
Yeah, and they're good to go. And they can you can do any number of things that you want to, you know,

00:12:33.880 --> 00:12:38.480
what I would what I would liken it to is if you ever do, if you build your own wheel, if you build your

00:12:38.480 --> 00:12:44.280
own native extensions, it's like getting plastic powder or plastic pellets, and making your own mold

00:12:44.280 --> 00:12:49.640
mold of Legos or Lego like things and pouring your own little pieces. And so as long as you're the one

00:12:49.640 --> 00:12:53.780
that controls what they have to plug into, and you're the one that controls all the molds, then you

00:12:53.780 --> 00:12:58.340
don't need any standard definitions of studs or holes or lengths or anything like that, you're good to go.

00:12:58.340 --> 00:13:03.600
But if you ever want to work with other people who have their own molds and their own places and

00:13:03.600 --> 00:13:08.600
studs, they want to put these things on, you've got to come up with a standard definition. And so what

00:13:08.600 --> 00:13:13.460
Anaconda is essentially, it's like a Lego system, we've standardized what the studs are and what the

00:13:13.460 --> 00:13:16.900
holes are. So lots of people can build different kinds of Legos, and they all can plug together.

00:13:16.900 --> 00:13:18.660
And that's kind of the long and the short of it.

00:13:18.660 --> 00:13:25.260
Yeah, very interesting. So some other things that are in play there are you talked about Conda and

00:13:25.260 --> 00:13:29.920
installing the packages that you built, right, the couple hundred or whatever that come with the

00:13:29.920 --> 00:13:35.060
distribution. But then you also said installing the others through this thing called Conda Forge.

00:13:35.060 --> 00:13:35.920
What's Conda Forge?

00:13:35.920 --> 00:13:42.820
Well, Conda Forge is a community of people who I would say out of a masochistic charity to the

00:13:42.820 --> 00:13:48.320
community. They take on the job of maintaining build scripts and recipes that take upstream

00:13:48.320 --> 00:13:54.540
software and make it so it's actually buildable in a reproducible way and that it works with other

00:13:54.540 --> 00:13:59.980
things. So it's a community of package builders and they have several hundred contributors and

00:13:59.980 --> 00:14:04.340
they've built thousands of packages. We ourselves build about a thousand, although only 200 are built

00:14:04.340 --> 00:14:09.160
into the big Anaconda installer download. But the Conda Forge community goes even beyond that and

00:14:09.160 --> 00:14:11.400
builds several thousand. And that's what Conda Forge is.

00:14:11.600 --> 00:14:16.760
Yeah. Interesting. So people are like, you know, it's really painful to build this package,

00:14:16.760 --> 00:14:21.800
but only one of us should ever suffer and feel that once. And we'll do that on behalf of the

00:14:21.800 --> 00:14:23.660
community. I'll take that on for this one package.

00:14:23.660 --> 00:14:27.620
Yeah, basically. I mean, you know, the real challenge is it's one of those things in life

00:14:27.620 --> 00:14:32.480
where it's almost worse that it's easy to do a bad job. I don't know that we have a term for this

00:14:32.480 --> 00:14:36.500
in English. Maybe there's a long German word for it. But it's like the same thing with the coding

00:14:36.500 --> 00:14:40.480
principles of like, if something is broken, you want it to break loudly and fail loudly,

00:14:40.480 --> 00:14:45.940
right? You don't want it to make a half effort. Sometimes it kind of works sometimes. And so with,

00:14:45.940 --> 00:14:51.480
but building package is the same thing. Most people can kind of get a build working for most things,

00:14:51.480 --> 00:14:57.280
but does it work well? Will they ever be able to do it again? Like it doesn't work with anything else.

00:14:57.280 --> 00:15:01.700
None of those things, you know, it takes a lot of work to make a good package build. So,

00:15:01.700 --> 00:15:06.120
well, that speaks to the reproducibility side of things. And I know in data science and

00:15:06.120 --> 00:15:11.960
scientists using data science tools, that reproducibility is a super important aspect.

00:15:11.960 --> 00:15:16.720
And I guess the first step is I can run the software, which means I can build the packages

00:15:16.720 --> 00:15:17.440
and install them.

00:15:17.440 --> 00:15:22.280
Right. And that is really what we think that providing pre-built binaries and then having

00:15:22.280 --> 00:15:27.460
good provenance of the build system itself. That's really some of the only ways you can really

00:15:27.460 --> 00:15:32.600
honestly, like not kidding yourself, have reproducibility. I think some people think

00:15:32.600 --> 00:15:38.480
that Docker somehow saves them, but it really doesn't. So it's kind of a struggle right now,

00:15:38.480 --> 00:15:42.660
honestly, because there's so many moving pieces. There's a lot of confusion in that space, but I do.

00:15:42.660 --> 00:15:47.920
Yes, I do agree with you that Conda packages used properly can absolutely be a great way to ensure

00:15:47.920 --> 00:15:49.440
reproducibility for data science.

00:15:49.440 --> 00:15:54.020
Yeah. Well, it's probably better than saying, well, if you want to install this package,

00:15:54.020 --> 00:15:59.480
you're going to need to have the Visual Studio 2008 compiler set up correctly on your machine

00:15:59.480 --> 00:16:05.260
in 2025 or whatever, right? When it's no longer compatible with the Windows or who knows what,

00:16:05.260 --> 00:16:05.480
right?

00:16:05.480 --> 00:16:08.460
Yeah. We're going to have to, like, one of the reasons I think that our team,

00:16:08.460 --> 00:16:13.720
the Conda and Anaconda team are happy to move away from Python 2 is because the dependency on that

00:16:13.720 --> 00:16:19.220
compiler. Someday when we finally put Python 2 to rest, I'm probably going to try to eBay a bunch of,

00:16:19.220 --> 00:16:24.680
like, boxes of those CDs just so they can break them out of, you know, sort of like a cleansing

00:16:24.680 --> 00:16:28.020
bonfire or something. I don't know. Maybe you shouldn't burn CDs. That's bad, actually.

00:16:28.020 --> 00:16:32.840
Yeah, but you could have some sort of ceremony with them for sure.

00:16:32.840 --> 00:16:33.540
Yeah.

00:16:33.540 --> 00:16:38.240
I think the new Python 3.7, it uses MSBuild. Is that right?

00:16:38.240 --> 00:16:42.740
You know, I'm not sure on the details of that, but I think that there have been significant

00:16:42.740 --> 00:16:48.820
improvements. And, you know, the Python folks who work at Microsoft have worked really hard

00:16:49.000 --> 00:16:53.860
to improve the compiler situation there for Python. I think it's much better now with Python 3 and in

00:16:53.860 --> 00:16:59.440
the later releases of Windows. It's just we have, you know, very old Python, very old Windows that

00:16:59.440 --> 00:17:04.160
still are deployed that we have to keep those users going. So that's where almost all the pain is.

00:17:04.160 --> 00:17:08.180
I can imagine. Yeah, I just had Steve Dower from Microsoft on the show, and he's in charge of the

00:17:08.180 --> 00:17:12.260
installer and stuff there. And he's doing some really, really cool stuff to make it more accessible

00:17:12.260 --> 00:17:19.040
on Windows. And it's easy to go to conferences and forget how important Windows actually is,

00:17:19.040 --> 00:17:23.140
right? You look around, it looks like everyone has a Mac. There's a few people running Linux.

00:17:23.140 --> 00:17:28.640
That's pretty much what you see at the conferences, right? But that's not what the actual consumption

00:17:28.640 --> 00:17:30.480
out in the world is, is it?

00:17:30.600 --> 00:17:35.240
No, that's not at all reflective of the of even the United States. And then you go to the broader

00:17:35.240 --> 00:17:42.360
world. It's a lot of Windows. It's a lot of Windows, a lot of Linux, too. But yeah, I think this is one of

00:17:42.360 --> 00:17:47.540
the structural problems that faces the open source community is that when you're small, it's easy to do

00:17:47.540 --> 00:17:52.000
product management, because it's like you and your buddies. But once you get bigger, you have to actually

00:17:52.000 --> 00:17:57.580
intentionally go and try to pull in information from your users. And I think that's the Python, that's

00:17:57.580 --> 00:18:00.500
actually, I think, a structural challenge for the Python community at this point in time.

00:18:00.500 --> 00:18:05.180
When we're talking about Conda Forge and things like that, something I had not heard of before,

00:18:05.180 --> 00:18:11.540
but I saw that you're running is something called BioConda. Now, it sounds like it might have to do with

00:18:11.540 --> 00:18:16.780
biology and data science around biology, but that's all I can discern from it. Tell us about that.

00:18:16.780 --> 00:18:17.460
That's new to me.

00:18:17.460 --> 00:18:22.460
So BioConda is actually not one of our projects. And oh, I should have said this earlier with Conda Forge.

00:18:22.840 --> 00:18:29.180
BioConda, Conda Forge, and various other sort of groups, they use our Anaconda Cloud package hosting

00:18:29.180 --> 00:18:35.240
infrastructure to support their community. Because with the Conda package installer, it's easy to give

00:18:35.240 --> 00:18:40.320
it a namespace flag, basically a channel name, and then it will go and download packages only from that

00:18:40.320 --> 00:18:46.060
channel on Anaconda Cloud. So these represent, Conda Forge and BioConda represent different communities

00:18:46.060 --> 00:18:50.620
that are using the Conda packaging tool, but they may have set slightly different standards or included

00:18:50.620 --> 00:18:55.960
certain other standards in their build system protocols and standards. So all these packages

00:18:55.960 --> 00:19:00.820
work together. So yes, BioConda is for the biology, genomics sort of community.

00:19:00.820 --> 00:19:01.380
Yeah.

00:19:01.380 --> 00:19:05.580
They have very specialized, well, specialized is maybe a euphemism, but there's a lot of specialized

00:19:05.580 --> 00:19:11.000
software needs in the biology community. It's very R-centric. There's a lot of, depending on what

00:19:11.000 --> 00:19:13.120
you're doing in that domain, there's a lot of PERL sometimes.

00:19:13.120 --> 00:19:14.220
So...

00:19:14.220 --> 00:19:17.100
Yeah, interesting. We'll leave that there.

00:19:17.100 --> 00:19:20.940
Are there other ones? Is there like a ChemConda or things like that?

00:19:20.940 --> 00:19:24.720
No. So there's actually... Yeah. So I think Bio... I'm going to kick myself later,

00:19:24.720 --> 00:19:29.440
probably, as I forget some. But there are major research disciplines and communities that do use

00:19:29.440 --> 00:19:34.180
Conda quite a bit. So I think the astronomy research community has taken on Python and embraced Python

00:19:34.180 --> 00:19:39.340
a lot. They use Conda as a way to get nightly builds and dev builds and just really get easy

00:19:39.340 --> 00:19:43.760
deployments, right, of their complex software. One of the things that Conda does well,

00:19:43.760 --> 00:19:48.960
I should have said this earlier, it's not just a Python packaging tool. It's a sort of a userland

00:19:48.960 --> 00:19:54.860
software packaging tool. So we package up R, Perl, Python, C, C++, Fortran, Java, Scala,

00:19:54.860 --> 00:20:01.180
Ruby, Node, you name it. We really are almost like a portable userland RPM kind of thing.

00:20:01.180 --> 00:20:07.280
And so that allows for these communities that have a lot of scientific engineering code written in not

00:20:07.280 --> 00:20:12.000
Python, sometimes not even C or C++. We can package all those things up together, move

00:20:12.000 --> 00:20:13.980
these collections of packages around.

00:20:13.980 --> 00:20:18.820
Yeah, that's pretty interesting. That takes the challenge of packaging and sort of

00:20:18.820 --> 00:20:22.620
magnifies it extremely, right? Multiplies it combinatorially.

00:20:22.620 --> 00:20:25.360
Oh, yeah. Oh, yeah. It definitely gets pretty complex.

00:20:28.200 --> 00:20:33.360
This portion of Talk Python To Me is brought to you by Linode. Are you looking for hosting that's fast,

00:20:33.360 --> 00:20:38.080
simple, and incredibly affordable? Well, look past that bookstore and check out Linode at

00:20:38.080 --> 00:20:45.340
 talkpython.fm/Linode. That's L-I-N-O-D-E. Plans start at just $5 a month for a dedicated server

00:20:45.340 --> 00:20:50.440
with a gig of RAM. They have 10 data centers across the globe. So no matter where you are or where your

00:20:50.440 --> 00:20:55.560
users are, there's a data center for you. Whether you want to run a Python web app, host a private Git server,

00:20:55.560 --> 00:21:02.160
or just a file server, you'll get native SSDs on all the machines, a newly upgraded 200 gigabit network,

00:21:02.160 --> 00:21:07.840
24-7 friendly support, even on holidays, and a seven-day money-back guarantee. Need a little help

00:21:07.840 --> 00:21:12.740
with your infrastructure? They even offer professional services to help you with architecture, migrations,

00:21:12.740 --> 00:21:18.280
and more. Do you want a dedicated server for free for the next four months? Just visit talkpython.fm

00:21:18.280 --> 00:21:26.860
slash Linode. So another thing that looks like it's doing really well is Anaconda Cloud. And so

00:21:26.860 --> 00:21:31.240
this is a place where like data scientists can share their work and their packages and things like that.

00:21:31.240 --> 00:21:35.980
Is that right? Yes. So right now, Anaconda Cloud is primarily, I think, used as a package hosting

00:21:35.980 --> 00:21:40.420
environment. And a lot of developers in the data science ecosystem use it as a way to publish

00:21:40.420 --> 00:21:45.100
nightlies or dev builds. Many of the projects, the key projects, they give us a heads up when they're

00:21:45.100 --> 00:21:50.120
about to cut a new release so that they can push, make sure that they can announce the Conda package

00:21:50.120 --> 00:21:54.720
at the same time they announce the release of the, you know, cutting new version of the software. So

00:21:54.720 --> 00:22:00.840
it's very nice of them. Yeah. So how's that work alongside as well as moving differently than just

00:22:00.840 --> 00:22:07.340
putting on PyPI? It gets pretty complex. So number one, there's channel support. So we basically have

00:22:07.340 --> 00:22:11.800
individual developers can have their own channel and those packages, you know, their users can just

00:22:11.800 --> 00:22:17.080
download packages from just that channel and not sort of a single global namespace, right?

00:22:17.080 --> 00:22:22.220
Another really important thing is that there's not just one build. So Conda as a packaging system

00:22:22.220 --> 00:22:28.200
has much deeper and richer metadata about the build environment and what it expects of the runtime

00:22:28.200 --> 00:22:33.500
environment. So I can build a package that the same upstream software, I can build different versions

00:22:33.500 --> 00:22:37.640
that are optimized for different levels of your hardware, like whether or not you have GPUs,

00:22:37.740 --> 00:22:42.960
whether or not you want, you have an advanced Intel chip or a relatively basic chip, I can push all of

00:22:42.960 --> 00:22:48.720
that stuff in. And maybe using this version of a compiler or that version of a compiler, like Clang

00:22:48.720 --> 00:22:53.360
versus GNU GCC, you know, these things actually make material difference in whether or not the package

00:22:53.360 --> 00:22:59.040
will work. That level of resolution and that ability to feature flag and select is not available on PyPI

00:22:59.040 --> 00:23:04.160
as far as I'm aware. And again, it's just, you know, even if one package is available, if you use

00:23:04.160 --> 00:23:09.540
pip to install PyPI, pip aggressively goes and tries to build other things from source, right? And if it

00:23:09.540 --> 00:23:14.820
doesn't, it sort of has a very, it doesn't do an a priori solve what you need, it sort of grabs things

00:23:14.820 --> 00:23:19.160
as they go. And so you can end up with very much the incorrect packages coming down, you can end up

00:23:19.160 --> 00:23:22.780
trying to build something from source that maybe build successfully. But again, that's not what you

00:23:22.780 --> 00:23:24.640
wanted. You want the pre build, right?

00:23:24.640 --> 00:23:27.740
Right, with different settings, different compiler. Okay, that's the primary difference.

00:23:27.920 --> 00:23:32.780
It is frustrating periodically that you can say, here's a bunch of things I need to install

00:23:32.780 --> 00:23:38.820
on pip, you know, pip install these things. And one of them will have a requirement that the version

00:23:38.820 --> 00:23:44.980
of one part is no larger than such and such. And yet it'll go grab, you know, depending on the order

00:23:44.980 --> 00:23:50.740
once you specify it, it may grab the wrong one, you know, and just install that. And then the other

00:23:50.740 --> 00:23:55.920
package is incompatible. Like there's weird little cases like that you can get into all the time,

00:23:55.920 --> 00:24:00.580
right? Because it's actually, this is one of those areas of software development that for most people,

00:24:00.580 --> 00:24:05.820
it's not a fun and sexy area to think about. But it's a deeply critical thing. When we rely on open

00:24:05.820 --> 00:24:10.820
source software is to actually understand what does the dependency matrix look like. And there's no free

00:24:10.820 --> 00:24:15.660
lunch, you know, if you do it in kind of this relatively naive way, like what pip does, then you

00:24:15.660 --> 00:24:19.880
can easily end up in a corner, and things are incompatible. If you try to do it, what we do,

00:24:19.920 --> 00:24:24.540
which is have very explicit and curated metadata about versions, and you do an a priori solve,

00:24:24.540 --> 00:24:30.460
well, people complain the solve takes a long time, which it can. So there's really no free lunch on

00:24:30.460 --> 00:24:37.400
that. I think one of the challenges that we actually have is that the metadata itself can be wrong. And

00:24:37.400 --> 00:24:42.240
we found that all over the place. So packages think they will declare they're compatible with this

00:24:42.240 --> 00:24:46.260
version or that version, and they're actually not. And so we have to actually patch what the upstream

00:24:46.260 --> 00:24:51.760
declarations are. So again, it gets subtle and detailed. There's just a lot of like muck in this

00:24:51.760 --> 00:24:56.680
area that we have to deal with. Yeah, it sounds a little bit like, these are the problems that you

00:24:56.680 --> 00:25:02.580
can address and then learn about. If your job is to coordinate a whole bunch of packages that don't

00:25:02.580 --> 00:25:06.620
interact intentionally with each other, right? They just want to make their project,

00:25:06.620 --> 00:25:12.440
something that you can ship and install and use. And that's fine, right? But at this,

00:25:12.440 --> 00:25:15.220
this interaction across them is where it gets tricky.

00:25:15.220 --> 00:25:19.440
There's absolutely a tragedy of the commons. Like with the way I've, the metaphor I've used in the

00:25:19.440 --> 00:25:24.860
past is that every developer, you know, open source maintainers, bless their hearts. They are way,

00:25:24.860 --> 00:25:28.840
they're doing a thankless job a lot of times anyway, and they're way burned out and stressed.

00:25:28.840 --> 00:25:33.500
But they're really solving for it. Does my vehicle work in my driveway? You know, can it get out of my

00:25:33.500 --> 00:25:38.420
driveway and drive into my other maintainers driveway down the street? And if that works, they're good to go

00:25:38.420 --> 00:25:44.320
a lot of times. And when everyone, one, every of the thousand developers in the ecosystem do this,

00:25:44.320 --> 00:25:49.300
you'll end up with a bunch of cars squashing all over each other in the, in the, in the highways and

00:25:49.300 --> 00:25:52.520
the freeways, because they're not thinking about that integration problem for their end users.

00:25:52.520 --> 00:25:56.000
And the end users, a lot of times in data science, they're not sophisticated software developers.

00:25:56.000 --> 00:25:58.620
They have no ability to solve this problem for themselves.

00:25:58.620 --> 00:26:05.120
They're at the very edge of struggling to write a 10 line script, not understand the complexity of like

00:26:05.120 --> 00:26:07.860
TensorFlow dependencies or something like that.

00:26:07.860 --> 00:26:09.320
Exactly. Exactly.

00:26:09.320 --> 00:26:15.740
So one thing that you all did recently, that seems to be a trend is you switch from the major minor

00:26:15.740 --> 00:26:20.940
versioning scheme to calendar based scheme. And I think this is an interesting thing, especially

00:26:20.940 --> 00:26:26.300
around open source, because we've had, you know, Mamuta Shemi created this site called Zerover,

00:26:26.300 --> 00:26:32.880
sort of make fun of all the projects that have been around for 10, 15 years with, you know,

00:26:32.880 --> 00:26:38.980
50 or a hundred releases, but are like 0.1 point 17, you know, some point, you know,

00:26:38.980 --> 00:26:44.880
like really small versions. And it seems like one of the fixes is to say, well, let's move towards

00:26:44.880 --> 00:26:50.620
something that has more to do with, I can look at the version and I can tell you without deeply

00:26:50.620 --> 00:26:55.080
knowing that software, whether that's a new version, an old version, a medium aged version,

00:26:55.080 --> 00:27:01.820
right? Like if I told you request was 2.1.4, is that new? Is that out of date? I don't know.

00:27:02.020 --> 00:27:07.060
Right. But if you use this, this new style, it's pretty obvious. Like, what was the thinking there?

00:27:07.060 --> 00:27:11.460
It's a community convention. It definitely makes it, it's for that user affordance that you can

00:27:11.460 --> 00:27:16.120
sort of look at it and know. And also, you know, we set this expectation that we will release at a

00:27:16.120 --> 00:27:19.860
regular cadence and it's for our own internal documentation and everything else. Everyone

00:27:19.860 --> 00:27:24.100
just is able to collaborate more easily around that. But I think the zero ver thing, I mean,

00:27:24.100 --> 00:27:27.800
I love Mamuta and I think it was a hilarious thing, you know, in a community here where we have

00:27:27.800 --> 00:27:33.520
SciPy and iPython or, you know, Jupyter and other things, pandas, you know, zero dot, whatever,

00:27:33.520 --> 00:27:38.960
or I guess it's not quite zero dot anymore, but like SciPy for sure. These things, there's actually

00:27:38.960 --> 00:27:43.080
something we can laugh at all we want to, but there's a thing there that the author is trying

00:27:43.080 --> 00:27:46.480
to say, or the maintainer is trying to say, which is, it's not quite ready yet.

00:27:46.560 --> 00:27:53.300
You know, I'll call it 1.0 when I'm good and ready and I'm not ready yet. It might not be for 20 years.

00:27:53.300 --> 00:27:57.660
And so, of course, that's also kind of a silly position to take with literally millions of people

00:27:57.660 --> 00:27:59.340
and their production code depend on your software.

00:27:59.340 --> 00:28:04.520
I think they're not saying that it's ready. I think what they're, they're thinking of to say

00:28:04.520 --> 00:28:10.260
when it goes to 1.0 a lot of times is it's done and software is rarely done.

00:28:10.260 --> 00:28:13.500
Well, software is done. The instance it's released, at least that version of it, right?

00:28:13.500 --> 00:28:18.640
I think this is where we as an industry actually have to get, we have to up-level our thinking

00:28:18.640 --> 00:28:25.260
about this. And we got to stop thinking about software as artifacts, hardballs of code that

00:28:25.260 --> 00:28:30.320
are static. And we actually have to start thinking about this from a flow perspective, that we are

00:28:30.320 --> 00:28:36.640
looking at flows of projects. And there's a covenant that is established in a relationship

00:28:36.640 --> 00:28:41.020
between the user of one of these flows and the people who originate those flows.

00:28:41.020 --> 00:28:45.400
And I think, you know, there's a really interesting thing I learned years ago about

00:28:45.400 --> 00:28:52.040
aerodynamics. And basically that when planes move less than the speed of sound, you can reason

00:28:52.040 --> 00:28:55.460
about aerodynamics somewhat similarly to water and water flow, right?

00:28:55.460 --> 00:29:00.500
But once you break the sound barrier, the thing that actually causes you the greatest amount

00:29:00.500 --> 00:29:04.660
of pressure on your airframe and things like that, you actually have to reason about the change

00:29:04.660 --> 00:29:08.820
in cross-sectional area of the airplane as it moves through the air.

00:29:08.820 --> 00:29:14.500
So it's almost more like streams of thick rope and you're shoving rope aside.

00:29:14.500 --> 00:29:19.280
So you move from this particle flow way to looking at actual flows.

00:29:19.280 --> 00:29:25.300
And so similarly with software, I think we've got to stop thinking about this as being just a code drop,

00:29:25.300 --> 00:29:31.080
right? And maintainers as people who go and dump out a bunch of code and actually look at a relationship

00:29:31.080 --> 00:29:35.200
with projects. And this gets to like sustainability. This gets to, you know,

00:29:35.260 --> 00:29:40.120
versioning and what's what, what is the promise in a version number, all of that stuff. It's actually

00:29:40.120 --> 00:29:46.060
deeply involved. I don't know that the software industry has really started to learn how to consume

00:29:46.060 --> 00:29:50.480
like the enterprise consumers of open source. I don't know that their internal practices have

00:29:50.480 --> 00:29:52.240
really caught up with thinking about it that way.

00:29:52.240 --> 00:29:56.460
Yeah. And that's kind of why I was bringing up the versioning a little more deeply because

00:29:56.460 --> 00:30:04.360
I think the folks that spend their time all day in open source, they know that Flask, even though it had

00:30:04.360 --> 00:30:10.140
some small version number recently moved to 1.0, but it had some small version number, but it's really

00:30:10.140 --> 00:30:16.980
used a lot and it's been around a lot. So it's fine. Right. But the corporate groups, the enterprise groups,

00:30:17.620 --> 00:30:24.140
they see that as a flag of like, that's test software. We're not ready to like make our bank

00:30:24.140 --> 00:30:29.880
run on test software. Is that the feeling that you got by interacting with, because you, you touch both

00:30:29.880 --> 00:30:34.160
open source and enterprise groups more than a lot of folks, I would suspect.

00:30:34.160 --> 00:30:39.420
Yes, absolutely. We, we are a B2B software company. That's where the bulk of our revenue comes from.

00:30:39.520 --> 00:30:44.280
And absolutely. We suffered, we suffered mildly for that. You know, we have to basically go and

00:30:44.280 --> 00:30:48.720
talk to procurement and compliance and it people that are swimming, you know, they're up to their

00:30:48.720 --> 00:30:53.700
ears in software. They look at a spreadsheet. We come in with our software, our enterprise software

00:30:53.700 --> 00:30:57.860
and say, well, you know, here's the open source things that are in the manifest. And they look at

00:30:57.860 --> 00:31:01.520
this thing and they're like, what is this? This is a pile of garbage. It's all zero dot, whatever.

00:31:01.520 --> 00:31:05.700
Right. And it's like, yeah, but that runs Instagram, you know, like that literally runs

00:31:05.700 --> 00:31:09.020
Dropbox. So like, what are you complaining? You don't really want to get into that.

00:31:09.040 --> 00:31:11.420
Once you have that argument with an IT guy, you've already lost.

00:31:11.420 --> 00:31:15.120
Right. You're, you're a small insurance company with a hundred thousand customers.

00:31:15.120 --> 00:31:21.200
You're not running, you know, YouTube with a million requests per second. That's using similar

00:31:21.200 --> 00:31:23.920
software, right? It's, but it's the mentality, right?

00:31:23.920 --> 00:31:29.460
Yeah. And you know, a lot of, a lot of going into any kind of, I would say that over the last,

00:31:29.460 --> 00:31:33.120
you know, five or six years, I've had to do a lot of adulting. And one of the parts of adulting

00:31:33.120 --> 00:31:38.400
up from just being a geek, like, you know, code nerd kind of guy to being able to actually have

00:31:38.560 --> 00:31:41.380
customer conversations is actually having quite a bit of empathy for the customer.

00:31:41.380 --> 00:31:45.340
Right. And from their perspective, yeah, they are just a regional bank with a few hundred

00:31:45.340 --> 00:31:51.180
thousand customers. They don't have the budget of alphabet to write to throw at a SRE team

00:31:51.180 --> 00:31:55.640
and a whole dev team and all that stuff. So their approaches to understanding risk and risk

00:31:55.640 --> 00:31:59.900
mitigation from the thousands of vendors that want to sell them software. Maybe it's the most

00:31:59.900 --> 00:32:03.060
practical, you know, I'm not, again, I'm not defending it, but I'm just saying one could come

00:32:03.060 --> 00:32:04.820
to a point of empathy, right? With their approach.

00:32:04.940 --> 00:32:09.580
That's a really good point. I do totally agree. It is exactly because they're small,

00:32:09.580 --> 00:32:15.900
they can't hire the fresh new hottest software engineers that would rather be in Silicon Valley

00:32:15.900 --> 00:32:21.280
or Austin or, you know, Portland or wherever, right? Like they just don't even have the ability

00:32:21.280 --> 00:32:26.740
to determine whether or not what you're saying is true in a lot of, a lot of cases, right? It's like,

00:32:26.740 --> 00:32:27.940
they just, you know, exactly.

00:32:28.120 --> 00:32:32.500
We just rather use Microsoft. We know that they give us this SLA and this agreement and

00:32:32.500 --> 00:32:37.540
we're just good, right? There's one way to make websites, use ASP.net. We're good. Just use,

00:32:37.540 --> 00:32:41.960
you know, something else supported like that, right? And it's, it's a challenge that they

00:32:41.960 --> 00:32:45.160
obviously want to use these new tools and powerful tools, especially in data science,

00:32:45.160 --> 00:32:50.280
right? But they've, they've got a different culture and way of describing software being ready.

00:32:50.480 --> 00:32:54.420
You know, and we can laugh all we want to about like these compliance guys, like beating us up

00:32:54.420 --> 00:33:00.300
for our, you know, scipy, o. whatever. But on the flip side, you know, how many of our,

00:33:00.300 --> 00:33:06.120
our credit card reports and our gas bills come from, yeah, basically some like little ASP app or some,

00:33:06.120 --> 00:33:10.840
you know, access database, God forbid with a bunch of VBA macros, right? That runs the world. So

00:33:10.840 --> 00:33:12.620
how elite are we really?

00:33:12.840 --> 00:33:17.760
That's an interesting point. Yeah. It's definitely worth thinking about. So in a broader sense though,

00:33:17.760 --> 00:33:25.300
I feel like Python is making its way into this enterprise and a major corporation space. I know

00:33:25.300 --> 00:33:31.500
it's increasingly being used for a lot of work, not just data science, but, you know, other types of

00:33:31.500 --> 00:33:36.660
software as well. How do you see it? How do you see the world with your inside view you got?

00:33:36.660 --> 00:33:41.540
Well, I think that's absolutely right. And I think that the Python community may not survive that

00:33:41.540 --> 00:33:43.140
adoption. Interesting. What do you mean by that?

00:33:43.140 --> 00:33:48.980
Not Python, the language, but the Python community. What I mean by that is that, you know, I've talked

00:33:48.980 --> 00:33:53.740
to quite a few like maintainers of some popular projects and they've all reflected to me that

00:33:53.740 --> 00:33:58.280
last couple of years as Python has gone, Python adoption just shot through the roof. I think some

00:33:58.280 --> 00:34:04.380
of it is our pushes on data science and things like that. Others are, you know, this rapid rise of

00:34:04.380 --> 00:34:09.940
deep learning. You know, many things have contributed to this, but ultimately Python is now one of the

00:34:09.940 --> 00:34:14.000
most popular languages on the planet. People are getting jobs in Python and they're using Python

00:34:14.000 --> 00:34:21.060
to do their jobs. And what we're seeing is this transition in the expectation of like, hey, man,

00:34:21.060 --> 00:34:25.320
this is just my nine to five. Like this is a tool that I'm supposed to use to do my job.

00:34:25.320 --> 00:34:28.640
And this tool sucks right now. So I'm going to get on your GitHub and I'm going to give you a bunch

00:34:28.640 --> 00:34:34.420
of grief about it because this is your freaking tool. You know, my, like my employer, I got to feed

00:34:34.420 --> 00:34:38.880
my family. My employer tells me how to use this tool. It's a piece of crap. And so that is,

00:34:39.000 --> 00:34:44.100
that's what I said. I think the Python community might not survive that adoption transition unless

00:34:44.100 --> 00:34:52.160
it intentionally really works hard to drive a positive, like to drive some values into the

00:34:52.160 --> 00:34:52.820
newcomers.

00:34:52.820 --> 00:34:58.340
So maybe that person that comes and complains because, well, I used to download my stuff from

00:34:58.340 --> 00:35:03.520
Microsoft.com. Now I get it from Python.org, but this thing sucks. So I'm going to go back and just

00:35:03.520 --> 00:35:08.520
complain about it as if, you know, there's a commercial entity on the other side whose job

00:35:08.620 --> 00:35:11.540
it is to make the SLA legit.

00:35:11.540 --> 00:35:15.660
Right. Right. But more likely, more likely, actually, they picked up, they inherited some

00:35:15.660 --> 00:35:19.100
piece of crap, three-year-old Python code from some guy who didn't know what he was doing.

00:35:19.100 --> 00:35:21.240
Written in Python 2.5 or something. Yeah.

00:35:21.240 --> 00:35:25.720
Oh, absolutely. It'll be, it'll be 2.5. I think there's a couple of 2.4 things running

00:35:25.720 --> 00:35:30.420
around that I'm aware of, but a lot of 2.5, there's a lot of 2.5 out there. And yeah,

00:35:30.460 --> 00:35:34.860
and it's using some old version of that plot lib or something or some old version of pandas. And

00:35:34.860 --> 00:35:38.440
they're going to complain, you know, on the tracker or on the, you know, on the issue tracker about that.

00:35:38.440 --> 00:35:44.200
And part of the cultural change that I think we should try to encourage sounds like, okay,

00:35:44.200 --> 00:35:50.020
you're doing this for your job. You need, it's not so great. We are the maintainers, but you have

00:35:50.020 --> 00:35:57.280
a company who depends upon this. Can your company contribute some time, a PR, some fit, like it's got

00:35:57.280 --> 00:36:01.940
to be a two-way street. I think it can't just be, well, you know, one of the things I suspect that

00:36:01.940 --> 00:36:10.100
you also feel at Anaconda Inc. is there are so many companies out there making millions and billions

00:36:10.100 --> 00:36:16.720
of dollars a year on top of free. There's like people working in their free time on some open

00:36:16.720 --> 00:36:22.160
source project that company is basically built upon and they make billions of dollars and contribute back

00:36:22.160 --> 00:36:24.300
nearly zero or zero.

00:36:24.660 --> 00:36:31.480
Yes. I've frequently equipped that I can fit probably the core NumPy pandas maintainers

00:36:31.480 --> 00:36:36.540
in my, no, no, my, okay. So we've gotten a few more now, so they don't all fit my minivan,

00:36:36.540 --> 00:36:39.720
but at one point in time, certainly core NumPy.

00:36:39.720 --> 00:36:42.960
You're going to need one of those longer, like full vans that holds 15 people.

00:36:43.540 --> 00:36:47.140
I may need a 15 person van, but I could, I could probably fit them in the 15 person van.

00:36:47.140 --> 00:36:54.120
You know, Matt Plotlib, which everybody relies on is like just a few people, maybe part-time. There's

00:36:54.120 --> 00:36:55.660
not like one whole FTE on it even.

00:36:55.660 --> 00:36:56.000
Yeah.

00:36:56.000 --> 00:37:00.860
There's projects like Jupyter that are very large, but also underfunded. And there's projects

00:37:00.860 --> 00:37:05.840
that are small and underfunded. And it's extreme. Yes. It's exceptionally tragic.

00:37:05.840 --> 00:37:06.140
Right.

00:37:06.140 --> 00:37:07.120
It's exceptionally tragic.

00:37:07.120 --> 00:37:11.740
Well, and do you know that I think the part of the tragedy to me is like, if it really took

00:37:11.740 --> 00:37:18.560
a thousand people to make Matt Plotlib, 600 people to make Flask, maybe the community can't contribute

00:37:18.560 --> 00:37:26.120
back enough to pay those thousand engineers full-time. But like you said, it's like a van full of people,

00:37:26.120 --> 00:37:33.100
or it's my small car full of people for Flask, right? And click and all those things. The people

00:37:33.100 --> 00:37:39.640
and the companies that use Flask make so much money and depends so heavily upon it that they could easily

00:37:39.640 --> 00:37:46.140
pay those three, four or five people to be full-time on that and be doing really well. Right. But they don't.

00:37:46.140 --> 00:37:49.520
Right. It's just, it's not even asking very much of them, which is what's crazy.

00:37:49.520 --> 00:37:53.620
I'm of two minds on this or not two minds, but I have like two major views on this.

00:37:53.920 --> 00:37:58.000
One of them is that we should look at this as the triumph of software. I mean,

00:37:58.000 --> 00:38:00.980
to sort of just to sort of restate the point you're making, which is that,

00:38:00.980 --> 00:38:09.020
holy crap, one or two or 10 people can build something that is fundamental to

00:38:09.020 --> 00:38:15.340
billions and billions of dollars of global economic activity. That's something to be celebrated,

00:38:15.340 --> 00:38:19.240
right? Because that should free up. Think of how many more thousands of software developers

00:38:19.240 --> 00:38:23.380
don't have to be working on Flask. They can just go and have free time. Not really,

00:38:23.380 --> 00:38:24.860
but you know, in theory, that's how.

00:38:24.860 --> 00:38:28.860
Build something more interesting than just the framework, right? They could build something with

00:38:28.860 --> 00:38:29.680
this result.

00:38:29.680 --> 00:38:34.200
So that's one way to look at it and that we should celebrate where we can. But on the other hand,

00:38:34.200 --> 00:38:39.340
the thing is like, if we can't even somehow come up with the funding for like 10 FTEs for these

00:38:39.340 --> 00:38:44.360
fundamental projects, what's broken? What's broken, right? Because it can't be, it's not,

00:38:44.360 --> 00:38:50.060
it can't be that hard. And so I think there's two ways to look at this. One is that the open source

00:38:50.060 --> 00:38:57.620
community as the, essentially the field of software, I think it's essentially commoditizing out and the

00:38:57.620 --> 00:39:01.920
labor, what open source represents. And this particular thing happening in the Python ecosystem

00:39:01.920 --> 00:39:07.440
is the very vanguard of this transition. It represents essentially the end of labor economics

00:39:07.440 --> 00:39:15.740
for software. And so that going away, we're at that transition. And so it's very hard to think about it

00:39:15.740 --> 00:39:21.020
for companies because companies will allocate budget for software development in a very like

00:39:21.020 --> 00:39:26.300
headcount oriented way, right? And they know what they're getting when they pay for an FTE dev here

00:39:26.300 --> 00:39:27.320
or there or wherever.

00:39:27.320 --> 00:39:27.640
Sure.

00:39:27.640 --> 00:39:31.500
If they just throw money at some open source, what are they getting for it? You know, they know how to,

00:39:31.500 --> 00:39:34.700
they know how to pay money for software. Companies are very good at paying money for software,

00:39:34.700 --> 00:39:40.520
but paying for stuff that they can already get for free. They literally, that is a null value on a

00:39:40.520 --> 00:39:46.440
spreadsheet. They cannot compute that. It is a NAN, right? So my view on this is actually quite simple,

00:39:46.440 --> 00:39:51.900
which is that if open source developers, the people like me who care about the open source ecosystem,

00:39:51.900 --> 00:39:59.620
if we want to sustain the community innovation and that positive abundance mentality that we have in the

00:39:59.620 --> 00:40:04.840
open source ecology, the human ecology of open source has moved to post scarcity, post labor economics.

00:40:05.080 --> 00:40:10.120
If we want to sustain that, then we need to actually drive a new conversation. We need to actually

00:40:10.120 --> 00:40:15.080
provide the tooling and the infrastructure for the companies to think about how to consume this.

00:40:17.280 --> 00:40:22.520
This portion of Talk Python To Me is brought to you by Rollbar. Got a question for you. Have you been

00:40:22.520 --> 00:40:27.900
outsourcing your bug discovery to your users? Have you been making them send you bug reports? You know,

00:40:27.900 --> 00:40:32.340
there's two problems with that. You can't discover all the bugs this way. And some users don't bother

00:40:32.340 --> 00:40:38.060
reporting bugs at all. They just leave sometimes forever. The best software teams practice proactive

00:40:38.060 --> 00:40:43.220
error monitoring. They detect all the errors in their production apps and services in real time and

00:40:43.220 --> 00:40:49.100
debug important errors in minutes or hours, sometimes before users even notice. Teams from companies like

00:40:49.100 --> 00:40:56.480
Twilio, Instacart and CircleCI use Rollbar to do this. With Rollbar, you get a real time feed of all the errors

00:40:56.480 --> 00:41:02.260
so you know exactly what's broken in production. And Rollbar automatically collects all the relevant data and

00:41:02.260 --> 00:41:07.200
metadata you need to debug the errors so you don't have to sift through logs. If you aren't using Rollbar yet,

00:41:07.400 --> 00:41:12.140
they have a special offer for you. And it's really awesome. Sign up and install Rollbar at

00:41:12.140 --> 00:41:18.800
 talkpython.fm/Rollbar. And Rollbar will send you a $100 gift card to use at the Open Collective,

00:41:18.800 --> 00:41:24.940
where you can donate to any of the 900 plus projects listed under the Open Source Collective or to the

00:41:24.940 --> 00:41:29.900
Women Who Code organization. Get notified of errors in real time and make a difference in Open Source.

00:41:29.900 --> 00:41:32.860
Visit talkpython.fm/Rollbar today.

00:41:34.540 --> 00:41:35.780
What are some of the key elements?

00:41:35.780 --> 00:41:39.760
One way to do it is you can look at it almost like treat each new... Number one,

00:41:39.760 --> 00:41:44.380
it's something we have to work on ourselves, which is to not make money be a bad word,

00:41:44.380 --> 00:41:48.460
which is still a mindset that pervades many Open Source communities and developers.

00:41:48.460 --> 00:41:52.620
Any affiliation with any kind of money-managing,

00:41:52.620 --> 00:41:55.280
money-changing organization is seen as essentially...

00:41:55.280 --> 00:41:57.720
It's seen as corrupting sometimes. Yeah, yeah.

00:41:57.720 --> 00:42:02.300
It's corrupting, exactly. So, I mean, we literally had a SciPy mailing list,

00:42:02.300 --> 00:42:07.380
I think a couple of years ago, someone was arguing that we should only allow steering council members

00:42:07.380 --> 00:42:11.880
to be part of universities or part of academia, which they don't have their own agendas.

00:42:11.880 --> 00:42:15.620
And the other people were just like, are you kidding me? Academics don't have agendas anymore.

00:42:15.620 --> 00:42:19.360
So, people like to kid themselves a lot about this kind of stuff. But anyway,

00:42:19.360 --> 00:42:22.000
so I think that the Open Source community needs to, number one,

00:42:22.000 --> 00:42:25.800
not be allergic to money and treat it as a corrupting influence, right?

00:42:25.800 --> 00:42:33.060
There's companies and ways, business models that are trying to help Open Source and trying to be

00:42:33.060 --> 00:42:37.700
good participants in it. And then there are the corrupting, evil, taking advantage of type

00:42:37.700 --> 00:42:42.400
companies. So, like, it's not black and white, but there are certainly paths forward where

00:42:42.400 --> 00:42:49.420
companies like you guys and others are putting in lots of effort to try to make things better

00:42:49.420 --> 00:42:50.180
legitimately.

00:42:50.420 --> 00:42:54.240
Yeah. And I appreciate that you recognize that. Like, we really have really tried to be good

00:42:54.240 --> 00:42:59.180
citizens in the Open Source community. But I think companies, for a lot of companies, that

00:42:59.180 --> 00:43:04.480
it's like the mind is willing, but the spreadsheets are weak. You know, like, it's still really hard for

00:43:04.480 --> 00:43:08.720
people and proponents and advocates, even within those companies, to, at the end of the day,

00:43:08.720 --> 00:43:12.960
make the budgetary justifications. Because the companies internally don't know how to,

00:43:12.960 --> 00:43:14.640
they don't know how to reason about it.

00:43:14.640 --> 00:43:14.760
Yeah.

00:43:14.760 --> 00:43:18.860
You know? So, I think that's where the Open Source community can try to help. Like,

00:43:18.860 --> 00:43:23.780
number one, one thing we could do is do almost like a Kickstarter style or like, you know,

00:43:23.780 --> 00:43:28.400
I play Warcraft a little bit. And so, it's like world boss, like, takedown. So, before we can

00:43:28.400 --> 00:43:34.060
release any new versions of Library XYZ next year, we've got to get this much money in, right?

00:43:34.060 --> 00:43:34.480
Yeah.

00:43:34.480 --> 00:43:39.560
And people basically just, but they put the money in. But I think that's actually as fun as that

00:43:39.560 --> 00:43:43.600
would be in the Kickstarter model like that, as cool as that would be and as interesting as that

00:43:43.600 --> 00:43:48.300
would be, I think businesses have a hard time just writing checks for donations. So,

00:43:48.300 --> 00:43:51.860
the other thing that I think the Open Source community needs to do, I think the one that's

00:43:51.860 --> 00:43:57.800
more realistic, is to actually form entities that can have a business-to-business conversation

00:43:57.800 --> 00:44:05.320
with the corporate players and understand how to talk to their procurement, talk to their legal and

00:44:05.320 --> 00:44:10.760
everyone else, and basically act as a crossover facility to do the product management so the

00:44:10.760 --> 00:44:13.320
businesses know what they're getting for their money. It's not a charity. You know,

00:44:13.320 --> 00:44:18.820
some things that people may not be aware of is that for a business to write a $10,000 charity check,

00:44:18.820 --> 00:44:22.280
that comes out of a different part of the business a lot of times.

00:44:22.280 --> 00:44:27.640
Even if everyone wants to, for budgetary and for finance and compliance reasons,

00:44:27.640 --> 00:44:32.480
they literally cannot just write a check to some dude, you know, some Open Source hacker in the

00:44:32.480 --> 00:44:36.060
middle of Europe somewhere. So, these are the things that we need to actually put together.

00:44:36.060 --> 00:44:43.760
I think the allergic to money issue, I think that that can be solved with the right examples of Open Source

00:44:43.760 --> 00:44:51.620
companies and companies entering Open Source in positive ways. But I feel like there's some kind of

00:44:51.620 --> 00:44:57.940
structure or something that has to get between the corporations and the Open Source projects,

00:44:58.320 --> 00:45:05.260
where it's like you say, it's not a charity check. It's you pay into this and there's, you get a little

00:45:05.260 --> 00:45:10.280
bit more of something. And I don't know what that is, but there's something like that. Then the companies

00:45:10.280 --> 00:45:18.100
can justify it. They say, look, we depend upon this thing. We pay, you know, 0.01% of our revenue to the

00:45:18.100 --> 00:45:22.960
people that make it work so that our system doesn't go away. And here's what we get for that 0.01%. I don't know

00:45:22.960 --> 00:45:26.400
what that is. It's actually, we don't have to reinvent the wheel here. It happens all the time

00:45:26.400 --> 00:45:31.920
in every other industry. It's an industry consortium. It's an industry consortium. You pay into it. And

00:45:31.920 --> 00:45:36.480
what happens is you get votes on various technical councils and technical boards, and they do the

00:45:36.480 --> 00:45:42.420
product management and the dev management for what the thing should be. In the Python world, we want that

00:45:42.420 --> 00:45:48.760
to, in all cases for a lot of these projects, we want that to still be subordinate to the vision

00:45:48.760 --> 00:45:56.120
of the open innovation volunteer kind of crew. But there's so much housekeeping. There's so much

00:45:56.120 --> 00:46:01.080
issue tracking stuff. There's so much like documentation, management, cleanup, just keeping

00:46:01.080 --> 00:46:06.640
the lights on and the yak shaving. There's so much that goes into a project that these kinds of

00:46:06.640 --> 00:46:11.540
consortium models can fund. And I think Python itself, and I'll just come out on your podcast and I'll just

00:46:11.540 --> 00:46:14.380
say it. I think Python itself badly needs this. Yeah.

00:46:14.380 --> 00:46:19.920
Badly needs an actual consortium like this to be operated in a way that can accept dollars easily.

00:46:19.920 --> 00:46:23.920
That's easy for people to write checks, right? Like we all know this as entrepreneurs, like make

00:46:23.920 --> 00:46:27.960
yourself easy to do business with. The open source community, I would say, has not made itself easy

00:46:27.960 --> 00:46:32.360
to do business with. You got to either hire a core dev. And if you do, that core dev then has to,

00:46:32.360 --> 00:46:37.800
in their own minds, be like, am I wearing my community hat or my employee hat, which is tough on them,

00:46:37.800 --> 00:46:41.480
right? It's very stressful for them. And the open source community, even when we get the dollars,

00:46:41.620 --> 00:46:45.880
we don't make it clear to the people writing the checks what those dollars are buying for them.

00:46:45.880 --> 00:46:49.740
Like if they have a couple of issues that are easy to solve, that really can make a difference for

00:46:49.740 --> 00:46:53.060
them, we don't necessarily prioritize those issues just because they wrote us a check because we don't

00:46:53.060 --> 00:46:58.160
want to feel like we're that, you know, like it's that quid pro quo. So I think that you really need

00:46:58.160 --> 00:47:02.940
some kind of facility in the middle of that access consortium that is able to help businesses steer

00:47:02.940 --> 00:47:07.780
and guide a lot of these maintenance, pretty basic kinds of maintenance things that need to happen

00:47:07.780 --> 00:47:13.000
for projects that would make their lives easier. And that can then funnel a ton of money into a ton

00:47:13.000 --> 00:47:16.940
of margin on that goes into the innovation work and all the forward looking kind of stuff.

00:47:16.940 --> 00:47:18.320
And everyone's happy.

00:47:18.320 --> 00:47:19.900
Yeah. Do you think the PSF could do it?

00:47:19.900 --> 00:47:24.940
I think the PSF could do it. I think that the PSF would be, I don't know if it operates as a

00:47:24.940 --> 00:47:25.420
nonprofit.

00:47:25.420 --> 00:47:26.500
It does. Yeah.

00:47:26.500 --> 00:47:31.080
Yeah. So if it's a nonprofit, I think it'd be very hard for it to do it. It might need to actually

00:47:31.080 --> 00:47:35.460
create like sort of Mozilla Foundation, Mozilla Corporation. I think it would need to create

00:47:35.460 --> 00:47:42.200
some kind of a traditional C corporate or a B Corp, perhaps like a social mission for profit that it

00:47:42.200 --> 00:47:47.320
owns like director seats on and, you know, the chunk of the things. But companies, a lot of times are

00:47:47.320 --> 00:47:52.340
just prohibited from writing checks to 501c3s unless it comes out of their philanthropy group.

00:47:52.340 --> 00:47:55.700
So again, this is that making it easy to do business with kind of thing.

00:47:55.700 --> 00:47:56.260
Yeah. Interesting.

00:47:56.460 --> 00:48:00.400
Absolutely. I think the PSF should spin up a thing like that. And I've been sort of

00:48:00.400 --> 00:48:04.500
quietly advocating for this behind the scenes a little bit. And maybe I'll be more vocal about

00:48:04.500 --> 00:48:05.280
that here this year.

00:48:05.280 --> 00:48:08.440
All right. Well, we can spread a little word on the podcast as we just have.

00:48:08.440 --> 00:48:15.580
It's really interesting. And I think there's absolutely lots of possibilities for business

00:48:15.580 --> 00:48:26.180
models in open source. But I feel like there's actually a 98% gap, like 2% of that is captured.

00:48:26.380 --> 00:48:33.900
98% of it is not because we have these large, but still not huge, like banks in the Midwest that

00:48:33.900 --> 00:48:38.280
contribute nothing. They do no PRs. They don't do anything to that effect, right? They just,

00:48:38.280 --> 00:48:43.040
it's just not in their culture. And like you said, there's no real mechanism for them to

00:48:43.040 --> 00:48:45.720
pay a little and get more and justify that.

00:48:45.720 --> 00:48:49.360
Yes. Yes. And actually some of the open source business models that are emerging now,

00:48:49.360 --> 00:48:54.760
they present challenges of their own. Again, my overriding thesis is that the world of software

00:48:54.760 --> 00:49:01.640
is actually commoditizing pretty quickly. And so people, like if you look at the things that have

00:49:01.640 --> 00:49:07.020
been happening in the last six months, as I would say open source software component vendors,

00:49:07.020 --> 00:49:13.720
like Mongo and Redis and Timescale and others, as they start getting their business eaten by the cloud

00:49:13.720 --> 00:49:18.200
vendors, they're realizing that open source, you know, sounded great. Open core sounded great.

00:49:18.280 --> 00:49:23.940
And then they start losing any future route to revenue. And they've got to actually aggressively

00:49:23.940 --> 00:49:29.820
go to like dual licensing and like deep viral HEPL three kind of stuff. I don't know that open source

00:49:29.820 --> 00:49:35.120
is even the right conversation to have anymore. I think it should be around sustainable community

00:49:35.120 --> 00:49:40.760
innovation and the freedom to experiment, freedom to innovate, freedom to, you know, there's a lot of

00:49:40.760 --> 00:49:47.640
like free as in beer and free as in innovation. But like, the traditional ways we have about talking about the

00:49:47.640 --> 00:49:53.080
source code itself, again, is limited in this paradigm of like code drops. And we're beyond that now.

00:49:53.080 --> 00:49:58.740
Yeah. And you know, you look at the cloud, for example, a lot of these places that they provide you something,

00:49:58.740 --> 00:50:06.120
and you pay on usage, right? You don't buy any software in the cloud, but you have the subscription

00:50:06.120 --> 00:50:11.860
model all over the place, right? And that's, that's starting to really shift the way things are working

00:50:11.860 --> 00:50:16.800
as well. And I feel like the cloud vendors actually have this interesting lock in where they're a little

00:50:16.800 --> 00:50:20.360
bit defended against some of these challenges that are coming up.

00:50:20.360 --> 00:50:25.460
Well, absolutely. There's only like three major cloud vendors of significance in here in the US,

00:50:25.560 --> 00:50:32.280
at least. And all of them are absolutely going for lock in. And they're, you know, ultimately,

00:50:32.280 --> 00:50:36.800
their business model. It's not necessarily I mean, it's a for profit business model, put it that way,

00:50:36.800 --> 00:50:40.800
right? Yeah, the cloud is the new lock in with a lot of those API's. It's interesting. And like this

00:50:40.800 --> 00:50:45.560
MongoDB AWS thing you talked about, like, that's a little bit of it as well, right? But it's pretty

00:50:45.560 --> 00:50:50.020
interesting. Yeah, I think we could probably talk for hours and hours on this, because we're both

00:50:50.020 --> 00:50:55.060
pretty passionate about it. It's awesome. But let me ask you a few more questions before we run out of

00:50:55.060 --> 00:51:00.140
time. Sure. These are all sort of forward looking type things. And one of them is data science from

00:51:00.140 --> 00:51:05.120
you called out the year 2012 to me that if you look at the analytics and the graphs and the usage,

00:51:05.120 --> 00:51:13.220
like there's a huge increase in the derivative of a lot of things around Python at 2012, up till now.

00:51:13.220 --> 00:51:20.100
So five years further out, what do you think data science looks like? Is it still deeply working

00:51:20.100 --> 00:51:23.760
with Python? Is it solving different problems? Where is it going?

00:51:23.760 --> 00:51:30.060
We're going to see data science much more integrated. People have a better sense of what it

00:51:30.060 --> 00:51:36.180
can and can't do by itself rather, right? It's a new discipline that's coming into the business. It's a

00:51:36.180 --> 00:51:40.280
new swim lane. Everyone's trying to figure out how they stand in relation to it. There's a lot of

00:51:40.280 --> 00:51:44.480
political, you know, fighting and a lot of experimentation within a lot of businesses that I see. But at the end of

00:51:44.480 --> 00:51:52.400
the day, I think this idea of doing data exploration, doing model development, and revving models that are

00:51:52.400 --> 00:51:57.080
really critical to the business is the new reality for people. So that's not going away. That's a

00:51:57.080 --> 00:52:01.560
fundamental dynamic that's going to be here. And if you need to go and explore data, you need to go and

00:52:01.560 --> 00:52:06.520
do model development, then you're going to be doing data science full stop, right? There's no,

00:52:06.740 --> 00:52:12.420
like, if you need to basically bring in domain expertise, stats, and coding ability to do that

00:52:12.420 --> 00:52:16.520
well, then you're going to need data scientists intersect. You need all three of those skills,

00:52:16.520 --> 00:52:21.140
you need all three of those. But data scientists are going to find themselves needing to have a much

00:52:21.140 --> 00:52:26.360
better, I think the borders between data, the data science world and the others will clarify better.

00:52:26.360 --> 00:52:31.840
So you'll have data scientists interacting with data engineers, and much better, hopefully much better

00:52:31.840 --> 00:52:36.100
established best practices around how that's supposed to go. And then IT people start accepting that,

00:52:36.100 --> 00:52:40.560
yes, Python is here to stay, we're going to need to deploy real Python stuff. And we need to know a

00:52:40.560 --> 00:52:45.020
little more something about it, right? And so a lot of these little intersectional areas right now

00:52:45.020 --> 00:52:49.180
between data science and other concerns, same thing with BI, people right now, there's literally people

00:52:49.180 --> 00:52:53.660
out there selling point and click visualization tools saying that's data science. And it's like,

00:52:53.660 --> 00:52:58.480
that's not really data science. But they're going to figure that out probably in the next couple

00:52:58.480 --> 00:53:01.940
of years. Hopefully, they get the clue. Yeah, I think that's what I think is going to happen.

00:53:02.400 --> 00:53:06.800
Now, the result of that happening is a gigantic, I think that that clue is going to really start

00:53:06.860 --> 00:53:13.500
hitting home in two years or so. Then the immediate next problem that people have is overall workflow

00:53:13.500 --> 00:53:18.520
management across all of these things. Because everyone's got their favorite tools. Everyone is

00:53:18.520 --> 00:53:23.540
producing things that touch and intersect with everyone else's stuff. How do we get all of this

00:53:23.540 --> 00:53:28.140
stuff managed in one place? And I think that's the challenge doesn't be fit, we're gonna be square in

00:53:28.140 --> 00:53:50.560
the middle of that conversation still. And five years from now, assuming that the Chinese economy

00:53:50.560 --> 00:53:56.160
assuming that the Chinese economy hasn't collapsed, we are going to see some really scary stuff coming

00:53:56.160 --> 00:54:01.160
out of Chinese and the AI innovation happening there. Because they have been, they're completely

00:54:01.160 --> 00:54:07.500
unapologetic about using their entire national population of a billion people as a sandbox for

00:54:07.500 --> 00:54:12.160
trying AI surveillance, sort of cybernetic, the computer controls you kind of things.

00:54:12.160 --> 00:54:16.960
Yeah, the whole social ranking, and all that stuff that's...

00:54:16.960 --> 00:54:20.060
So here's the terrifying thing about that. I'm going to be a little bit of a contrarian on this.

00:54:20.060 --> 00:54:24.580
What if it turns out that their sesame credit system, Rev2, no, Rev1 is scary and crappy.

00:54:24.580 --> 00:54:29.380
Rev2, what if it turns out that they give social sesame credits for their businesses and local

00:54:29.380 --> 00:54:30.360
politicians? Yeah.

00:54:30.360 --> 00:54:34.200
What if they actually start upgrading social sesame credits to being this kind of thing where

00:54:34.200 --> 00:54:38.500
it becomes almost like a, again, back to Warcraft, but like a Warcraft honor reputation system,

00:54:38.500 --> 00:54:44.080
right? And becomes multicolored, it becomes vectorized instead of scalar. They might actually

00:54:44.080 --> 00:54:50.240
innovate a scary, awesome approach that has deep problems because it requires a surveillance state.

00:54:50.240 --> 00:54:54.860
And the Western world might look at that and say, huh, you know, that actually works a lot better

00:54:54.860 --> 00:54:58.180
than, you know, Ivanka Trump, you know, running our fast food joints.

00:54:58.180 --> 00:54:58.460
Yeah.

00:54:58.460 --> 00:55:03.200
Sorry, the White House. So that dates this podcast, by the way. For those who are listening months in

00:55:03.200 --> 00:55:07.960
the future, in case you forgot, just two days ago, the President of the United States served Big

00:55:07.960 --> 00:55:12.240
Macs at the White House. That just, that happened. So this is still fresh in our minds.

00:55:12.240 --> 00:55:16.880
To Clemson, who won the national college football championship. Yeah.

00:55:16.880 --> 00:55:21.540
Yes. It's incredible. Anyway. So the point is that the scary thing about the Chinese AI system

00:55:21.540 --> 00:55:23.820
is that it might work and work really, really well.

00:55:23.820 --> 00:55:28.640
Yeah. Not that it's just pure wrong, but actually there's aspects of it that are amazing

00:55:28.640 --> 00:55:32.000
in its sort of black mirror, electric dreams way.

00:55:32.000 --> 00:55:36.800
Oh yeah. Tell you what, it's going to be pretty amazing. I think the same way that like a lot of the

00:55:36.800 --> 00:55:41.100
Western world is like, oh, well, we already saw where this goes in Orwell, so we're not going to

00:55:41.100 --> 00:55:46.540
go there. Western world has that kind of snottiness about it. I think they're underestimating how good

00:55:46.540 --> 00:55:53.020
it could be and how tempting that goodness can look to technologists, to the capitalists, and to the

00:55:53.020 --> 00:55:58.820
policymakers here. That's really for me as a, as someone fled the communist regime, you know, as a

00:55:58.820 --> 00:56:00.620
child, like that's the scary thing about it.

00:56:00.620 --> 00:56:05.620
That is really an interesting analysis. And certainly I was thinking ethics, data ethics,

00:56:05.620 --> 00:56:12.760
and accountability for data models and AI and ML, right? Like, sorry, you couldn't get the house.

00:56:12.760 --> 00:56:17.820
The AI said no, right? Like, no, no, no. You have to say why the AI said no. Well, we don't know,

00:56:17.820 --> 00:56:22.220
but it's really good. And it said no, you know, like answering that problem is going to be interesting

00:56:22.220 --> 00:56:22.500
too.

00:56:22.500 --> 00:56:28.500
It is. And you know, the thing is that already now you get denied, right? And there's already a model

00:56:28.500 --> 00:56:33.200
that tells you why you're denied. And the AI can, this kind of gets back to that same thing with the

00:56:33.200 --> 00:56:37.160
whole black mirror thing and the AI in China, like really, really good AI. It doesn't look like that

00:56:37.160 --> 00:56:43.000
AI, you know? So the really, really good systems, quote unquote, good, the really effective systems

00:56:43.000 --> 00:56:48.300
at partitioning people and spot targeting them, they're going to be dressed up in ways that are

00:56:48.300 --> 00:56:52.680
palatable. Our robot overlords will look like Cylons. They're going to look really human-like.

00:56:52.680 --> 00:56:56.660
This is the scary future, man. I'm not trying to like scare you and scare your listeners.

00:56:56.880 --> 00:57:01.800
I'm just telling you though, like, this is what's coming. And as humans, I'm actually a human. I'm

00:57:01.800 --> 00:57:06.680
not a Cylon as humans, as, you know, tribe human, I think we've got to get better at being human.

00:57:06.680 --> 00:57:10.420
And so that's maybe too philosophical hand wavy, but anyway.

00:57:10.420 --> 00:57:17.360
Yeah. It's really an interesting thing to ponder for sure. All right. So I guess final comment or topic

00:57:17.360 --> 00:57:25.060
just real quickly is I feel like there's been this Python 2, 3 debate, modern Python versus legacy Python,

00:57:25.060 --> 00:57:33.520
as I like to position it. And I feel like the adoption of modern Python in data science is much faster

00:57:33.520 --> 00:57:40.780
than it has been in the general Python space. One, do you think that's true? And then two, why do you think that is?

00:57:41.000 --> 00:57:45.920
One, I think it's true. And two, I think it's because a lot of data science stuff is new and

00:57:45.920 --> 00:57:52.880
legacy data science code tends to age with models. So like a piece of data science code is only as good

00:57:52.880 --> 00:57:59.240
as the model data that it was trained on and models change because the world changes. So there's a built

00:57:59.240 --> 00:58:04.980
in expiration date on any data science model that you've got. So you're not keeping transaction systems

00:58:04.980 --> 00:58:06.440
from 20 years ago live.

00:58:06.440 --> 00:58:11.440
The complexity and the algorithms and the techniques are just not even relevant, right? Like the machine

00:58:11.440 --> 00:58:15.480
learning of five years ago doesn't compete with the machine learning of today. And it's not like

00:58:15.480 --> 00:58:20.460
you're just going to upgrade. It's a totally different thing. You just retrain it on TensorFlow

00:58:20.460 --> 00:58:21.800
or Keras or whatever, right?

00:58:21.800 --> 00:58:27.420
Right. And secondly, this is another sort of important dynamic, which is that the regulatory environment

00:58:27.420 --> 00:58:32.200
around data science hasn't caught up. So it doesn't require you, you know, I was talking to an engineer

00:58:32.200 --> 00:58:39.000
from a software modeling engineer from an airplane company. And he was saying, yeah, the FAA requires

00:58:39.000 --> 00:58:45.100
us to be able to reproduce our computational design models for like decades, for decades.

00:58:45.100 --> 00:58:46.320
Yeah. Wow.

00:58:46.320 --> 00:58:50.560
So, I mean, yeah, because planes actually, if they're well maintained, they fly for a long time,

00:58:50.560 --> 00:58:53.060
right? And if there's a structural failure of a part...

00:58:53.060 --> 00:58:55.200
Right. There's a lot of 737s out there. Yeah.

00:58:55.300 --> 00:58:59.800
Oh, yeah. And so data science just doesn't have that problem yet. And, you know, one of the earliest

00:58:59.800 --> 00:59:03.820
adopters of Python, this is a really interesting dynamic that people may not be aware of, but

00:59:03.820 --> 00:59:10.280
in the mid 2000s, there was a significant uptake of Python in the hedge fund and the finance industry.

00:59:10.280 --> 00:59:18.060
And so that was Python 2, Python 2, 5, 2, 6 around the time. And so that got into a lot of places.

00:59:18.060 --> 00:59:23.820
And finance is actually a pretty regulated area. And so a lot of that code, especially if it starts

00:59:23.820 --> 00:59:27.880
running production finance systems, people need to keep it running, not only because they're...

00:59:27.880 --> 00:59:33.140
Even if you stop using a particular finance model to like score or to do whatever, to price a trade

00:59:33.140 --> 00:59:37.660
and things like that, oftentimes you'll want to go back and do what's called backtesting.

00:59:37.660 --> 00:59:43.260
So you want to run new data against those old models, and you'll want to race them against the

00:59:43.260 --> 00:59:48.840
new models, right? You'll want to run new models on old data and new data on old models. And so that

00:59:48.840 --> 00:59:52.420
kind of backtesting approach, you need to keep that old code running for that purpose as well,

00:59:52.420 --> 00:59:56.800
just from a risk management perspective. So a lot of the finance industries like running

00:59:56.800 --> 01:00:01.900
ahead and adopting Python 2 has sort of gotten them stuck on Python 2 a little bit.

01:00:01.900 --> 01:00:09.000
Okay. Interesting. Yeah. So almost a victim of its own success in a way, but in some of these

01:00:09.000 --> 01:00:13.400
industries. All right. I guess we're going to have to leave it there because we're out of time. But

01:00:13.400 --> 01:00:19.860
like I said, a lot of interesting stuff to talk about. I have to just put it at rest. So before we move on,

01:00:19.860 --> 01:00:23.040
though, I'm going to ask you the two questions, always ask it in the show. If you're going to

01:00:23.040 --> 01:00:25.400
write some Python code, what editor would you use?

01:00:25.540 --> 01:00:30.500
My old go-to is still Vim. But for large code bases, I tend to use PyCharm so I can, you know,

01:00:30.500 --> 01:00:31.520
sort of navigate more easily.

01:00:31.520 --> 01:00:39.240
Yeah, sure. Makes sense. And then there's many, many packages on PyPI or available on CondoForge.

01:00:39.240 --> 01:00:43.780
What do you think one that people maybe haven't heard of, but they should, or you want to recommend?

01:00:43.780 --> 01:00:46.600
Is it bad form to pimp? Is it like to pimp your own stuff?

01:00:46.760 --> 01:00:48.840
No, you do it. No, no, go ahead.

01:00:48.840 --> 01:00:53.440
So I'm really, really excited about a new project that we created called Intake,

01:00:53.440 --> 01:00:58.120
which I would encourage people to take a look at it. It's pretty new. We just launched it last year.

01:00:58.120 --> 01:01:00.720
Yeah, it looks interesting. I was going to ask you more about it, but we just

01:01:00.720 --> 01:01:03.380
have too many topics already. So tell us about it real quick.

01:01:03.380 --> 01:01:09.000
So Intake is a data loading abstraction library. So it's basically just load my data,

01:01:09.000 --> 01:01:14.060
and it abstracts your data loading stuff into a declarative syntax so that the beginning of your

01:01:14.060 --> 01:01:19.580
data science scripts doesn't have a whole bunch of like embedded and brittle SQL calls or pandas

01:01:19.580 --> 01:01:23.980
column transformations or things like that. Intake is a way to make it so that your actual

01:01:23.980 --> 01:01:29.800
data science or data transformation code is sort of its own code artifact and your data bits are your

01:01:29.800 --> 01:01:34.120
data bits. It's kind of a nerdy thing, but we think that it actually addresses that data,

01:01:34.120 --> 01:01:38.300
that model reproducibility and code reproducibility problem that data scientists face.

01:01:38.300 --> 01:01:42.920
Sounds really useful. Thanks. All right. So final call to action. People are excited about

01:01:42.920 --> 01:01:48.020
the Anaconda distribution or maybe getting, making some progress on this open source business model

01:01:48.020 --> 01:01:50.640
thing we talked about. What would you say to people?

01:01:50.640 --> 01:01:55.960
So I would say that we have AnacondaCon coming up. So if you're actually using Python

01:01:55.960 --> 01:02:01.920
in a commercial environment, strongly recommend AnacondaCon. We have a, we try to make a really good

01:02:01.920 --> 01:02:07.960
blend of technology and practitioner kind of stuff and workshops there combined with

01:02:07.960 --> 01:02:12.620
business perspectives. So it's not like an industry conference like Gartner or Strata.

01:02:12.620 --> 01:02:16.780
It's not like a pure one of those things. It's also not a pure like tech community conference,

01:02:16.780 --> 01:02:19.920
like Pi data or something like that. So it's, we try to make a mix of those things.

01:02:19.920 --> 01:02:23.340
We've gotten really good reviews in the past couple of years. It's our third year doing it.

01:02:23.340 --> 01:02:26.580
I'm super excited about it. It's here in Austin in April, April 3rd to 5th.

01:02:26.580 --> 01:02:32.520
So that's AnacondaCon.io. And secondly, people are using Anaconda to like it and they're using it in a

01:02:32.520 --> 01:02:36.260
business environment. I would recommend they check out Anaconda Enterprise. We are very,

01:02:36.260 --> 01:02:40.680
very proud of the product and we have a lot of problems that we solve for people inside business

01:02:40.680 --> 01:02:44.000
environments and the business use of Python for deployment, package management.

01:02:44.240 --> 01:02:47.340
Yeah. Real quickly, like what, what's the, what do you get from, right? You know,

01:02:47.340 --> 01:02:50.980
I talked about the business model should be, you get a little bit more for your money,

01:02:50.980 --> 01:02:57.000
not just pure charity, you know, here's a PayPal donate button. What do people get real quick?

01:02:57.000 --> 01:03:02.100
So Anaconda Enterprise is, it gives you the ability to have your own managed package repository.

01:03:02.480 --> 01:03:07.860
It gives you a way to do secured and governed collaborative notebooks and model deployment.

01:03:07.860 --> 01:03:12.840
It works in the cloud. It works on prem. Many of our customers use it across an air gap and very

01:03:12.840 --> 01:03:18.160
strictly governed environments. We basically make it so that data scientists and Python practitioners

01:03:18.160 --> 01:03:22.380
in business can be as effective with Anaconda as they are at home nights and weekends on their

01:03:22.380 --> 01:03:25.940
own laptops. All right. Yeah. That sounds cool. We just clear all the IT hurdles. Yeah,

01:03:25.940 --> 01:03:30.740
that's sweet. All right. Well, thanks for all that you've talked about here, Peter. It's been a

01:03:30.740 --> 01:03:33.700
super interesting conversation. Thanks for being on the show. Thank you so much for having me. I

01:03:33.700 --> 01:03:38.900
really enjoyed it. You bet. Bye. Bye-bye. This has been another episode of Talk Python To Me.

01:03:38.900 --> 01:03:43.480
Our guest on this episode was Peter Wang. It's been brought to you by Linode and Rollbar.

01:03:43.480 --> 01:03:49.580
Linode is your go-to hosting for whatever you're building with Python. Get four months free at

01:03:49.580 --> 01:03:57.120
 talkpython.fm/Linode. That's L-I-N-O-D-E. Rollbar takes the pain out of errors. They give you the

01:03:57.120 --> 01:04:02.340
context insight you need to quickly locate and fix errors that might have gone unnoticed until users

01:04:02.340 --> 01:04:07.700
complain, of course. Track a ridiculous number of errors for free as Talk Python To Me listeners at

01:04:07.700 --> 01:04:14.900
 talkpython.fm/Rollbar. Want to level up your Python? If you're just getting started, try my Python

01:04:14.900 --> 01:04:20.340
Jumpstart by Building 10 Apps course. Or if you're looking for something more advanced, check out our new

01:04:20.340 --> 01:04:25.240
async course that digs into all the different types of async programming you can do in Python.

01:04:25.240 --> 01:04:29.560
And of course, if you're interested in more than one of these, be sure to check out our everything

01:04:29.560 --> 01:04:34.960
bundle. It's like a subscription that never expires. Be sure to subscribe to the show. Open your favorite

01:04:34.960 --> 01:04:39.720
podcatcher and search for Python. We should be right at the top. You can also find the iTunes feed

01:04:39.720 --> 01:04:45.760
at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on

01:04:45.760 --> 01:04:51.380
talkpython.fm. This is your host, Michael Kennedy. Thanks so much for listening. I really appreciate it.

01:04:51.380 --> 01:04:53.160
Now get out there and write some Python code.

01:04:53.160 --> 01:04:53.780
Bye.

01:04:53.780 --> 01:04:54.400
Bye.

01:04:54.400 --> 01:04:54.400
Bye.

01:04:54.400 --> 01:04:54.400
Bye.

01:04:54.400 --> 01:04:54.400
Bye.

01:04:54.400 --> 01:04:54.400
Bye.

01:04:54.400 --> 01:05:13.900
Bye bye.

