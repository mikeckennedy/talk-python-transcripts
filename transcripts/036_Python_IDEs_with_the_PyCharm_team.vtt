WEBVTT

00:00:00.001 --> 00:00:03.460
As a software developer, what's the most important application on your computer?

00:00:03.460 --> 00:00:09.600
If your answer is Microsoft Outlook, my heart goes out to you. Stay strong. But for most of us,

00:00:09.600 --> 00:00:14.860
it's probably a toss-up between our web browser and code editors. And for editors, there's basically

00:00:14.860 --> 00:00:20.940
two camps. There's the lightweight, smart text editors such as Vim, Emacs, and Sublime Text,

00:00:20.940 --> 00:00:26.920
and heavyweight but highly functional IDEs such as PyDev and PyCharm. This week, you'll meet

00:00:26.920 --> 00:00:32.180
Dmitry Trophimov, who's one of the main developers behind one of my favorite editors, PyCharm.

00:00:32.180 --> 00:00:38.320
This is episode number 36 of Talk Python To Me, recorded November 11, 2015.

00:00:53.840 --> 00:01:07.920
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the

00:01:07.920 --> 00:01:12.540
ecosystem, and the personalities. This is your host, Michael Kennedy. Follow me on Twitter,

00:01:12.540 --> 00:01:17.460
where I'm @mkennedy. Keep up with the show and listen to past episodes at talkpython.fm,

00:01:17.580 --> 00:01:23.780
and follow the show on Twitter via at talkpython. This episode is brought to you by Hired and OpBeat.

00:01:23.780 --> 00:01:29.060
Thank them for supporting the show on Twitter via at Hired underscore HQ and at OpBeat.

00:01:29.060 --> 00:01:34.520
Hi, everyone. Thanks for listening to this episode. I have a few quick comments before we get to the

00:01:34.520 --> 00:01:40.080
interview. Some of the features we talk about are better understood visually rather than described

00:01:40.080 --> 00:01:44.940
in audio. And for that reason and others, I decided to write a blog post visually highlighting

00:01:44.940 --> 00:01:49.640
some of these concepts. This post is called Nine Reasons You Should Be Using PyCharm. If you're

00:01:49.640 --> 00:01:56.800
interested, check it out at bit.ly slash whypycharm. Last but not least, the PyCharm team at JetBrains

00:01:56.800 --> 00:02:02.080
offered to give away three annual subscriptions to PyCharm Professional. I'll do the drawing Monday,

00:02:02.080 --> 00:02:07.260
December 7th. That's a week from the release date of this podcast. All you have to do to be eligible is

00:02:07.260 --> 00:02:11.920
become a friend of the show. Visit talkpython.fm and click Friends of the Show in the navigation

00:02:11.920 --> 00:02:18.600
bar and sign up. Now let's get on to the show. Let me introduce Dmitry. Dmitry Tarfimov currently

00:02:18.600 --> 00:02:24.920
leads the development of PyCharm, a popular Python IDE by JetBrains. Dmitry is passionate about

00:02:24.920 --> 00:02:29.940
automation and software tooling. Before PyCharm, he implemented many different tools for a variety

00:02:29.940 --> 00:02:36.080
of companies, including a visual site scraper generator, a model to code mapper, and even a

00:02:36.080 --> 00:02:41.660
generator for hardware used in submarines. In his spare time, he's a committed running enthusiast

00:02:41.660 --> 00:02:47.200
and triathlete. Dmitry lives in Munich, Germany. Dmitry, welcome to the show.

00:02:47.200 --> 00:02:48.220
Hi, Mike.

00:02:48.220 --> 00:02:55.400
Hi. I'm really excited to talk about PyCharm and JetBrains and editors and tooling for Python

00:02:55.400 --> 00:02:56.580
with you today. It's going to be great.

00:02:56.580 --> 00:02:59.580
Yeah, sure. Thanks for inviting me.

00:03:00.020 --> 00:03:05.080
Yeah. So before we dig into all that, let's start at the beginning. How'd you get into

00:03:05.080 --> 00:03:06.960
programming in Python? What's your story?

00:03:06.960 --> 00:03:15.460
That was long ago, actually. My first programming experience was when I was something about seven

00:03:15.460 --> 00:03:22.500
years old. Back then, I had a ZX Spectrum computer and it was possible to program it with Sinclair

00:03:22.500 --> 00:03:30.580
BASIC. So I read a book about programming in BASIC and found some source program inside the book.

00:03:30.580 --> 00:03:37.220
And this program is supposed to do something cool. So I sit down and typed all the program into the

00:03:37.220 --> 00:03:43.120
computer, actually without full understanding how does it work. I was seven and I typed quite slow.

00:03:43.120 --> 00:03:48.540
So it took like, I don't know, like an hour or something to type that program in. And after I

00:03:48.540 --> 00:03:56.240
finished, I felt relief. But then when I tried to run it, it just failed. You know, so it didn't start.

00:03:56.240 --> 00:04:02.900
And I had no clue why. The error message was totally unclear for me. And it was very frustrating. Nobody

00:04:02.900 --> 00:04:09.560
could help me because I was at home alone. And I felt like I was betrayed by the book, which I trusted.

00:04:10.280 --> 00:04:18.760
So yeah, maybe if I have started to learn programming today with Python and PyCharm, for example, I would have

00:04:18.760 --> 00:04:25.220
much more pleasant experience. At least Python is a much, much better language. And PyCharm would hint

00:04:25.220 --> 00:04:31.900
me about which error I had and which is more important to where it was. So yeah, maybe. But my programming

00:04:31.900 --> 00:04:37.720
story didn't end there, obviously. Several years after I went into a computer class where I learned how to

00:04:37.720 --> 00:04:45.880
program Pascal, there was a brilliant teacher and Turbo Pascal IDE. And I learned step by step. And

00:04:45.880 --> 00:04:53.680
at some point, I realized that I can do computer programming in Pascal. Maybe that's why I'm a fan

00:04:53.680 --> 00:04:59.040
of IDEs because of Turbo Pascal. I don't know. Maybe that could be an imprint for me.

00:04:59.040 --> 00:05:02.660
Was it a young, impressionable programmer?

00:05:02.660 --> 00:05:07.460
Yeah. Awesome. So how'd you go from Pascal to Python?

00:05:07.460 --> 00:05:17.400
Actually, from Pascal, I converted to Java directly. So it was C and Assembler in the middle somewhere.

00:05:17.400 --> 00:05:27.980
And then I've been doing a lot of Java. And at some point, I realized that I need to have a scripting

00:05:27.980 --> 00:05:35.740
language in my toolbox. But I couldn't choose which one. And I wrote one small project in several

00:05:35.740 --> 00:05:42.940
languages just to be able to compare them. I took Groovy, Ruby, Python, and Perl. Perl was a total disaster.

00:05:42.940 --> 00:05:53.740
But others were more or less equal. But I remember my impression from Python. That felt pretty much like

00:05:53.740 --> 00:06:00.620
all other languages. But at the same time, very different from them. And everything felt

00:06:00.620 --> 00:06:09.660
reasonable and easy there. And I did like that. So since that, I used Python from time to time.

00:06:09.660 --> 00:06:20.380
And then I joined JetBrains to make a new IDE for Python called PyCharm. It was in early beta. And so I'm

00:06:20.380 --> 00:06:24.300
working on it till now. It was five and a half years ago.

00:06:24.300 --> 00:06:30.540
That's really excellent. And I've never heard people choosing a language the way you just described

00:06:30.540 --> 00:06:38.220
it. But it's such a good idea to say, look, I'm interested in learning this type of language. And it

00:06:38.220 --> 00:06:43.580
looks like there's these choices, four or five or six or whatever. And the idea of writing a simple

00:06:43.580 --> 00:06:49.900
program in each and then comparing the experience, that's really cool. I think more people should adopt that.

00:06:49.900 --> 00:06:55.180
Yeah, I gained a lot of experience doing that. And it was fun.

00:06:55.180 --> 00:07:01.980
Yeah, I always kind of just gone with, you know, do the research, see what's popular, what are the capabilities,

00:07:01.980 --> 00:07:08.460
what are the pluses and minuses, and then I'll just dive into one and just try to learn it. I never did sit down and like,

00:07:08.460 --> 00:07:15.260
do a bunch together and compare and contrast. That's cool. PyCharm. Before we get into PyCharm,

00:07:15.260 --> 00:07:20.380
maybe, you know, when I think about the company that makes PyCharm, JetBrains, where you work,

00:07:20.380 --> 00:07:28.780
I see you guys as one of the premier, if not the premier, developer tool companies out there.

00:07:29.420 --> 00:07:35.820
Can you maybe just talk a little bit about what is JetBrains, what type of apps and products you build?

00:07:35.820 --> 00:07:45.740
Yeah, sure. JetBrains is a company that makes tools for software developers, as you said. And

00:07:45.740 --> 00:07:51.580
currently, there are more than 500 people working there. And we have offices in St. Petersburg,

00:07:51.580 --> 00:08:00.460
Munich, Prague, and Boston. So the two biggest development spots are in St. Petersburg and Munich.

00:08:00.460 --> 00:08:08.060
And yeah, we make tools for software developers. And actually being ourselves software developers,

00:08:08.060 --> 00:08:14.780
this allows us to make really good tools. You know, there is a culture in JetBrains that everybody

00:08:15.420 --> 00:08:26.220
writes a code. Even our sales, they do program a lot, actually. So the company grows, but this is very,

00:08:26.220 --> 00:08:34.300
this is amazing that this culture stays. And talking about our products, of course, we have

00:08:34.300 --> 00:08:42.140
many ideas like PyCharm, IntelJ IDEA, RubyMine, PHPStorm, WebStorm, CLion, AppCode. So for

00:08:43.420 --> 00:08:53.180
basically for most major and popular languages, even if there is no IDE for a language, there should be a

00:08:53.180 --> 00:09:00.060
plugin that is maintained by JetBrains or third parties. So the IntelJ platform is quite, quite

00:09:00.060 --> 00:09:08.060
diverse and solid. Yeah, that's, that seems to be kind of the foundation of most of your IDEs. I kind of see

00:09:08.060 --> 00:09:16.060
you guys as the company that looks at what other software development systems are doing or build

00:09:16.060 --> 00:09:22.700
that and fixing the problems. Like, you know, Microsoft makes Visual Studio and it has, it's not bad, but it

00:09:22.700 --> 00:09:29.260
has these issues. And so you guys make ReSharper. Yeah, exactly. Exactly. And then, you know, Apple makes,

00:09:29.260 --> 00:09:32.060
Apple makes Xcode, but you're like, oh, this is not so great.

00:09:32.060 --> 00:09:34.060
Yeah.

00:09:34.060 --> 00:09:36.060
Yeah.

00:09:36.060 --> 00:09:38.060
Yeah.

00:09:38.060 --> 00:09:40.060
Yeah.

00:09:40.060 --> 00:09:40.060
Yeah.

00:09:40.060 --> 00:09:42.060
Yeah.

00:09:42.060 --> 00:09:50.060
Yeah.

00:09:50.060 --> 00:09:52.060
Yeah.

00:09:52.060 --> 00:09:52.060
Yeah.

00:09:52.060 --> 00:09:52.060
Yeah.

00:09:52.060 --> 00:10:02.060
Yeah.

00:10:02.060 --> 00:10:02.060
Yeah.

00:10:02.060 --> 00:10:02.060
Yeah.

00:10:02.060 --> 00:10:04.060
Yeah.

00:10:04.060 --> 00:10:04.060
Yeah.

00:10:04.060 --> 00:10:06.060
Yeah.

00:10:06.060 --> 00:10:12.880
If they're willing to have the time and energy and interest to actually learn the tools.

00:10:12.880 --> 00:10:14.800
Tools are very important.

00:10:14.800 --> 00:10:26.200
I wanted also to add that many people know about our ideas, but less people know that also we create other tools for software development.

00:10:26.200 --> 00:10:28.480
So we have a range of server-side tools.

00:10:28.480 --> 00:10:33.960
It is continuous integration called TeamCity.

00:10:33.960 --> 00:10:36.380
There is a bug tracker called Utrek.

00:10:36.380 --> 00:10:40.280
And there is a code review tool called AppSource.

00:10:40.280 --> 00:10:43.960
And we even make our own GVM programming language called Kotlin.

00:10:43.960 --> 00:10:50.320
So every area of software development, we try to make a product in this area.

00:10:50.320 --> 00:10:52.660
And actually, we use this product.

00:10:52.660 --> 00:10:55.200
And this allows us to make it good.

00:10:55.200 --> 00:10:58.960
Yeah, if you don't use the thing you're building, then you just...

00:10:58.960 --> 00:10:59.260
Yeah.

00:10:59.260 --> 00:11:01.160
It's just not good, right?

00:11:01.160 --> 00:11:04.260
You have to use the thing that you're building to make it truly excellent.

00:11:04.260 --> 00:11:05.140
Sure.

00:11:05.140 --> 00:11:06.300
Sure.

00:11:06.300 --> 00:11:06.880
All right.

00:11:06.880 --> 00:11:09.320
So like I said, I think most people know PyCharm.

00:11:09.320 --> 00:11:12.460
But maybe give us the 30-second elevator pitch.

00:11:12.460 --> 00:11:13.320
What is it?

00:11:13.320 --> 00:11:15.960
PyCharm is an IDE for Python.

00:11:15.960 --> 00:11:18.140
There are two editions of PyCharm.

00:11:18.440 --> 00:11:23.020
The first is PyCharm Community Edition that is free and open source.

00:11:23.020 --> 00:11:27.460
And it provides all basic functionality without any limitations.

00:11:27.460 --> 00:11:30.860
And there is a professional edition.

00:11:30.860 --> 00:11:38.380
It's not free, but it has many features, especially for professional development, like support for web technologies.

00:11:38.380 --> 00:11:48.920
There's many languages, like HTML, CSS, JavaScript, different JavaScript frameworks, Python web frameworks, like Django, Flask, Pyramid, Web2Py.

00:11:48.920 --> 00:11:59.520
And a lot of functionality, like working with databases and working with code on remote environments and profiling code coverage.

00:11:59.660 --> 00:12:03.400
So this is all in professional edition.

00:12:03.400 --> 00:12:04.200
Yeah.

00:12:04.200 --> 00:12:10.020
And you also have some cool database integration that I think we'll come back to in a little bit because it kind of blew my mind when I saw it.

00:12:10.020 --> 00:12:12.060
So I'm interested to ask you about it.

00:12:13.360 --> 00:12:18.560
One of the things that's cool about PyCharm, I think, is that it's really cross-platform.

00:12:18.560 --> 00:12:20.540
Yeah, that's true.

00:12:20.540 --> 00:12:25.720
PyCharm, as well as IntelliJ platform, is implemented in Java.

00:12:25.720 --> 00:12:30.180
So it basically runs everywhere where GVM can run.

00:12:30.180 --> 00:12:41.420
There are some parts that are native, but they are not essential for the main functionality, actually.

00:12:41.920 --> 00:12:46.460
And there are three operational systems that are officially supported.

00:12:46.460 --> 00:12:50.060
It is macOS X, Linux, and Windows.

00:12:50.060 --> 00:12:58.380
But actually, I know that our users even managed to run PyCharm on some environments like Raspberry Pi.

00:12:58.380 --> 00:13:07.200
And, you know, it's funny because we have issues in our tracker that sound like it's great that I could run PyCharm on Raspberry Pi.

00:13:07.200 --> 00:13:09.320
But unfortunately, embedded terminal is not working.

00:13:10.220 --> 00:13:11.220
So, yeah.

00:13:11.220 --> 00:13:16.060
So in that case, we just answer, okay, sorry for that.

00:13:16.060 --> 00:13:19.120
But embedded terminal is also open source.

00:13:19.120 --> 00:13:24.200
So you can port it to Raspberry Pi, send us a pull request, and something like that.

00:13:24.200 --> 00:13:26.340
Yeah, that's really funny.

00:13:27.600 --> 00:13:30.780
The fact that it runs on Raspberry Pi at all is pretty awesome.

00:13:30.780 --> 00:13:33.180
People are saying, oh, this part doesn't work.

00:13:33.180 --> 00:13:35.580
It's like, did you really expect it all to work?

00:13:35.580 --> 00:13:37.420
But yeah, that's cool.

00:13:37.420 --> 00:13:37.880
That's cool.

00:13:37.880 --> 00:13:45.260
I've seen somewhere, I think I even sent it on Twitter not too long ago, somebody had it running inside of a Docker container.

00:13:45.260 --> 00:13:46.260
Yeah, that's crazy.

00:13:46.260 --> 00:13:46.580
That's crazy.

00:13:46.580 --> 00:13:47.500
That's crazy.

00:13:47.500 --> 00:13:52.240
We just added support for Docker in the latest version.

00:13:52.240 --> 00:13:57.260
And so it was also a response like, oh, that's great.

00:13:57.260 --> 00:14:03.220
But what I want is to run PyCharm in Docker and then run containers from PyCharm.

00:14:04.820 --> 00:14:06.460
Yeah, it was, it's very nice.

00:14:06.460 --> 00:14:12.300
Actually, I don't understand this scenario yet, but I think I will try it myself.

00:14:12.300 --> 00:14:16.700
Yeah, it's probably just because you can, right?

00:14:16.700 --> 00:14:22.720
But when you guys announced support for Docker, that's like, you can create Docker containers that run your apps,

00:14:22.720 --> 00:14:25.720
not you can run PyCharm within Docker containers.

00:14:25.720 --> 00:14:28.560
But, you know, I guess someone got that working, which is cool.

00:14:28.560 --> 00:14:29.280
Yeah.

00:14:29.280 --> 00:14:32.860
So you said there's like 500 people at JetBrains.

00:14:32.860 --> 00:14:33.480
Yeah.

00:14:34.380 --> 00:14:38.100
Yeah, how many people are actually part of the PyCharm initiative?

00:14:38.100 --> 00:14:43.600
There are 14 people working directly on PyCharm.

00:14:43.600 --> 00:14:46.920
PyCharm is built upon Intel J Platform.

00:14:46.920 --> 00:14:57.940
So if we count those people, so it adds like from 50 to 60 people more that are contributing directly to Platform.

00:14:58.200 --> 00:15:04.840
But actually, that is not very easy to count because there are a lot of people who work on different IDs.

00:15:04.840 --> 00:15:07.580
For example, WebStorm.

00:15:07.580 --> 00:15:12.000
All functionality of WebStorm comes with PyCharm Professional Edition.

00:15:12.000 --> 00:15:14.920
So do we count as an Intel J Platform or not?

00:15:14.920 --> 00:15:17.100
So that's difficult to measure.

00:15:18.420 --> 00:15:23.480
Yeah, there's a lot of intersection between the different IDE teams like AppCode and WebStorm.

00:15:23.480 --> 00:15:25.740
So, yeah, I can see that that's tricky.

00:15:25.740 --> 00:15:26.180
Okay.

00:15:26.180 --> 00:15:31.480
So it's a pretty large team, full-time team working on PyCharm, yeah?

00:15:31.480 --> 00:15:32.300
Yeah.

00:15:32.300 --> 00:15:32.700
Yeah.

00:15:32.700 --> 00:15:44.520
By the way, we're proud that we have a proportion of girls and guys like 50-50 almost in our team.

00:15:45.120 --> 00:15:46.880
That is really excellent.

00:15:46.880 --> 00:15:48.240
Cheers to you guys.

00:15:48.240 --> 00:15:48.720
That's great.

00:15:48.720 --> 00:15:54.220
So when I run PyCharm, you know, as Sid, it's built on Intel J.

00:15:54.220 --> 00:16:03.480
Like how much of the thing that is running that I'm working with is PyCharm and how much of that is just Intel J with like a little understanding layer back into Python?

00:16:05.260 --> 00:16:10.340
Actually, all the Intel J Platform is built that way that it is a language agnostic.

00:16:10.340 --> 00:16:16.160
So it's like a framework upon which you can write a parser and inspections.

00:16:16.160 --> 00:16:24.220
But there is actually no that strict separation.

00:16:25.100 --> 00:16:29.740
When you're getting started, there's different ways to get started in Python, right?

00:16:29.740 --> 00:16:36.980
One way is to just type Python in your terminal or command prompt and then start entering stuff into the REPL.

00:16:36.980 --> 00:16:41.620
That's probably the least productive thing you can do, although it's the easiest to get started, right?

00:16:41.660 --> 00:16:46.900
Like you can create variables and import modules and things like that, right?

00:16:46.900 --> 00:16:58.120
And then as you go up, you know, there's stuff like editors like Vim and Emacs and Sublime Text where, you know, they're really nice editors,

00:16:58.120 --> 00:17:05.500
but they don't necessarily help you understand the standard library and things like that necessarily.

00:17:05.500 --> 00:17:09.680
And then you've got PyCharm, which can help you with the language.

00:17:09.680 --> 00:17:12.780
Where do you think people should start?

00:17:12.780 --> 00:17:13.940
What are your thoughts?

00:17:13.940 --> 00:17:19.200
Is there a lot of value in starting sort of with no support?

00:17:19.200 --> 00:17:27.340
Or do you think it's more helpful to have like a really helpful environment, even if you don't necessarily learn some of the details right away?

00:17:27.340 --> 00:17:33.460
I think that the supportive environment is beneficial, actually.

00:17:33.460 --> 00:17:38.920
It even can help you to learn the language and it assists you.

00:17:38.920 --> 00:17:44.420
So I would prefer to start with an IDE.

00:17:44.420 --> 00:17:48.600
You know, we're both sort of self-selecting in that sense as well.

00:17:48.600 --> 00:17:58.680
But I kind of agree with you that, you know, it's great to memorize the API for things like requests or the string library.

00:17:58.680 --> 00:18:11.020
But, you know, if I can just hit dot and type T and it shows me all the other options that maybe I'll have on strings, you know, that's really helpful, right?

00:18:11.380 --> 00:18:12.520
As a new person.

00:18:12.520 --> 00:18:13.020
Yeah, sure.

00:18:13.020 --> 00:18:15.420
And you do memorize them, actually.

00:18:15.420 --> 00:18:24.480
Because it just takes less time when you see it in code completion, not in Google, for example, or documentation.

00:18:24.480 --> 00:18:28.820
So you get information faster and you do memorize it.

00:18:29.620 --> 00:18:33.040
There's some cool plugins that I want to come back to later to talk about that as well.

00:18:33.040 --> 00:18:39.440
But another thing that's really challenging can be creating new types of projects.

00:18:39.440 --> 00:18:50.980
So if I want a new Flask website based on Bootstrap or I want a Pyramid website based on the starter template or something like that.

00:18:51.520 --> 00:18:58.960
Can you talk about, like, sort of what the types of projects you can create in PyCharm as, like, starter projects?

00:18:58.960 --> 00:19:00.340
Yeah, sure.

00:19:00.340 --> 00:19:05.200
It's mostly all type of Python web framework.

00:19:05.200 --> 00:19:16.700
So it is Django, Flask, Pyramid, Web2Py, and also all kinds of pure web projects.

00:19:17.920 --> 00:19:21.440
Actually, the main project that you can create in PyCharm is pure Python projects.

00:19:21.440 --> 00:19:25.060
So you can just start with that, for example, and then you can add everything that you want.

00:19:25.060 --> 00:19:31.600
If you know that you are going to develop Django projects, then it's better to start with Django projects from the start.

00:19:31.600 --> 00:19:35.020
Because everything will be configured and you will have a template.

00:19:35.020 --> 00:19:43.980
Yeah, I think one of the things that people struggle with, and as you get experience, you forget that it's actually really hard.

00:19:43.980 --> 00:19:46.620
You're just like, oh, that's a little bit of extra work.

00:19:46.920 --> 00:19:49.300
But in the beginning, it can be really hard.

00:19:49.300 --> 00:19:51.760
So, you know, suppose I want to get started with Pyramid.

00:19:51.760 --> 00:19:53.000
Right?

00:19:53.000 --> 00:20:04.660
Well, to get started with Pyramid, I can't just, like, create a file and start typing, you know, create my WSGI app and here's my handler configurations and so on.

00:20:04.660 --> 00:20:09.460
I have to pip install Pyramid and the various dependencies.

00:20:10.360 --> 00:20:21.260
And then I've got to know to use, like, pcreate, the thing that will generate the template starter code or, of course, write it from scratch, which is a lot of work.

00:20:21.260 --> 00:20:24.560
And that will generate a whole bunch of stuff, a whole project structure.

00:20:24.560 --> 00:20:30.960
And then I've got to run, you know, the setup configuration stuff because it's all treated like packages and so on.

00:20:31.400 --> 00:20:38.160
And I think people that are experienced with Python sort of forget how non-obvious that part is, right?

00:20:38.160 --> 00:20:42.480
But having it just as a thing you click, I'd like a new Pyramid app, and all that stuff happens.

00:20:42.480 --> 00:20:44.320
You know, that's really cool.

00:20:44.640 --> 00:20:56.080
I think that's one of the things that's nice about, like, creating new projects with PyCharm is a lot of that configuration stuff and dependency stuff is handled all in one shot.

00:21:07.000 --> 00:21:09.660
This episode is brought to you by Hired.

00:21:09.660 --> 00:21:16.120
Hired is a two-sided, curated marketplace that connects the world's knowledge workers to the best opportunities.

00:21:16.120 --> 00:21:25.280
Each offer you receive has salary and equity presented right up front, and you can view the offers to accept or reject them before you even talk to the company.

00:21:25.280 --> 00:21:31.640
Typically, candidates receive five or more offers in just the first week, and there are no obligations ever.

00:21:31.640 --> 00:21:33.740
Sounds pretty awesome, doesn't it?

00:21:33.740 --> 00:21:35.840
Well, did I mention there's a signing bonus?

00:21:36.440 --> 00:21:39.900
Everyone who accepts a job from Hired gets a $2,000 signing bonus.

00:21:39.900 --> 00:21:44.240
And as Talk Python listeners, it gets way sweeter.

00:21:44.240 --> 00:21:51.800
Use the link Hired.com slash Talk Python To Me, and Hired will double the signing bonus to $4,000.

00:21:51.800 --> 00:21:53.500
Opportunity's knocking.

00:21:53.500 --> 00:21:57.120
Visit Hired.com slash Talk Python To Me and answer the call.

00:22:05.880 --> 00:22:06.340
True.

00:22:06.340 --> 00:22:06.740
True.

00:22:06.740 --> 00:22:07.140
True.

00:22:07.140 --> 00:22:07.300
True.

00:22:07.300 --> 00:22:07.300
True.

00:22:07.300 --> 00:22:07.380
True.

00:22:07.380 --> 00:22:07.460
True.

00:22:07.460 --> 00:22:11.640
But also, you can start, you're going to go step-by-step with PyCharm.

00:22:11.640 --> 00:22:21.400
So you can just create pure Python project, or you can just open a directory and create file there, and then start typing something.

00:22:21.680 --> 00:22:28.900
And when you have a user's name, PyCharm will offer you to install this package from PyPI, so you can do that.

00:22:28.900 --> 00:22:39.060
And it's not that strict that if you develop a pyramid, you need to start from a pyramid project and generate everything.

00:22:39.060 --> 00:22:39.800
Right.

00:22:39.800 --> 00:22:40.220
That's true.

00:22:40.380 --> 00:22:46.220
So it's possible that it's helpful for you, but if you already have a pyramid website, you can just grab the directory.

00:22:46.220 --> 00:22:46.740
Yeah, yeah.

00:22:46.740 --> 00:22:47.020
Sure.

00:22:47.020 --> 00:22:50.720
Throw it on PyCharm, then it'll sort of be as if you had created it, right?

00:22:50.720 --> 00:22:50.900
Yeah.

00:22:50.900 --> 00:22:59.860
PyCharm will understand the structure of your project so that it is actually a pyramid project and will configure pretty much of everything.

00:23:00.840 --> 00:23:08.460
I don't really want to necessarily just go through all the features of PyCharm, but maybe you could talk about a couple favorites.

00:23:08.460 --> 00:23:17.300
Like, for example, I think my two favorite features in PyCharm are the sort of smart IntelliSense, right?

00:23:17.300 --> 00:23:25.920
So I get code completion across all the files in my project, as well as all the packages that I've installed in my environment and the standard library and so on.

00:23:25.920 --> 00:23:27.840
So that sort of IntelliSense is really cool.

00:23:28.300 --> 00:23:32.460
And then the sort of navigation stuff, right?

00:23:32.460 --> 00:23:35.560
So I can say, oh, here's the function being called on some object.

00:23:35.560 --> 00:23:37.480
Take me to its implementation.

00:23:37.480 --> 00:23:38.980
What are your favorites?

00:23:38.980 --> 00:23:48.140
Actually, I also like IntelliSense and navigation, but my favorite is definitely the debugger.

00:23:48.140 --> 00:23:58.280
I don't know, maybe since those days when I wrote Pascal and Turbo Pascal at DEI, I always like the ability to dive into a running program and see what is actually happening there.

00:23:58.280 --> 00:23:58.340
Yeah.

00:23:58.340 --> 00:24:12.920
So, and I'm proud that PyCharm has a very solid debugger and we even have some almost unique features like debugging of sub-processes and debugging of applications on remote environments.

00:24:13.320 --> 00:24:16.160
I like this part most.

00:24:16.160 --> 00:24:24.240
Actually, we have quite good version control support, JIT support, for example.

00:24:25.240 --> 00:24:26.720
So it's not bad.

00:24:26.720 --> 00:24:31.560
I would even say amazing, but it could be considered a bit immodest for a JIT brain person.

00:24:31.560 --> 00:24:33.400
But yes, I like our JIT integration.

00:24:33.400 --> 00:24:39.480
And my favorite feature there is ability to compare different branches in JIT log.

00:24:39.480 --> 00:24:40.100
Okay.

00:24:40.100 --> 00:24:40.940
Yeah, that's pretty awesome.

00:24:40.940 --> 00:24:41.840
Local history.

00:24:41.840 --> 00:24:42.280
I'm sorry.

00:24:42.280 --> 00:24:45.400
So for interrupting, local history is amazing also.

00:24:45.580 --> 00:24:50.360
Yeah, I was definitely going to say, if you're talking about version control, this idea of local history is cool.

00:24:50.360 --> 00:24:55.140
Let's take a step back for a minute and dig into the other ones just for a moment.

00:24:55.140 --> 00:24:57.780
And then I want to talk about local history because that's really awesome.

00:24:57.780 --> 00:25:02.900
So how do you guys do IntelliSense for Python?

00:25:02.900 --> 00:25:06.400
Like how does that work in a dynamic language?

00:25:07.480 --> 00:25:08.560
How does it work?

00:25:08.560 --> 00:25:16.720
IntelliSense in PyCharm works that way that when you write your code in PyCharm, it's parsed in real time.

00:25:16.720 --> 00:25:25.640
And analyzed this way that PyCharm tries to understand what is your goal and how to help you the best way.

00:25:25.640 --> 00:25:29.440
So it offers you code completion.

00:25:29.440 --> 00:25:32.300
It reformats your code.

00:25:32.300 --> 00:25:36.300
It inserts correct indentation, for example.

00:25:36.800 --> 00:25:41.700
So it highlights, of course it highlights syntax errors.

00:25:41.700 --> 00:25:49.440
But beyond that, it also tries to warn you about some errors that are not so obvious.

00:25:49.440 --> 00:26:03.020
So if, for example, you reuse a variable that you iterate through in a cycle or if value could be undefined, how is it implemented?

00:26:04.080 --> 00:26:10.760
Well, more what I'm thinking is, you know, when I write Python code, I don't ever declare a type.

00:26:10.760 --> 00:26:13.500
I don't say, you know, int x equals 7.

00:26:13.500 --> 00:26:15.620
I just say x equals 7.

00:26:15.620 --> 00:26:20.040
And, you know, sometimes it's really obvious, right, when you declare it just like that.

00:26:20.040 --> 00:26:29.080
But sometimes, you know, there's a long chain of events that leads to data being passed from one stage to another, to another, to another, to another, to finally being assigned to a variable.

00:26:29.080 --> 00:26:32.900
And it seems like you guys do a really good job of actually knowing what that's supposed to be.

00:26:32.900 --> 00:26:37.200
Yeah, we try to infer types for variables.

00:26:38.100 --> 00:26:40.920
And we do it quite, quite good.

00:26:40.920 --> 00:26:44.340
So it's called data flow analysis.

00:26:45.080 --> 00:26:53.840
When you write your code inside a function or a method, we trace the types of all the variables.

00:26:53.840 --> 00:26:57.400
Yeah, I think that's really awesome.

00:26:57.400 --> 00:27:07.440
And I think that's one of the benefits over things like Sublime Text, where if it sees you use some function or property of something that looks like an object above,

00:27:07.680 --> 00:27:15.000
it'll sort of then suggest it later as IntelliSense, but it doesn't really understand, like, the way the whole program fits together.

00:27:15.000 --> 00:27:18.100
It's missing a lot of the cool stuff that you guys have there.

00:27:18.100 --> 00:27:22.040
I know you just announced support for Python 3.5.

00:27:22.040 --> 00:27:22.660
True.

00:27:22.660 --> 00:27:27.240
And that includes this thing called Python Type Hints.

00:27:27.980 --> 00:27:37.740
Yeah, actually, PyCharm team participated, was involved, actually, in the process of elaboration of this proposal.

00:27:37.740 --> 00:27:40.040
That's really cool.

00:27:40.040 --> 00:27:44.460
Maybe before I ask you a question about it, maybe you could tell everyone what those are.

00:27:45.360 --> 00:27:56.320
There is a PEP 484, so-called, this is initiative adding a declaration of typing into Python.

00:27:56.320 --> 00:28:02.400
So before there was no standard way to annotate types.

00:28:02.400 --> 00:28:11.480
It was something starting from Python 3, but it was very limited and couldn't be used extensive.

00:28:11.980 --> 00:28:26.880
In Python 3.5, Gubito Warren Rossum came up with a proposal of elaboration of standard notation for annotating types for arguments and variables.

00:28:26.880 --> 00:28:33.280
Yeah, so maybe an example would be I've got a function, sayHello, right?

00:28:33.280 --> 00:28:37.480
Maybe the function is called sayHello, and you give it a name and a time of day.

00:28:38.480 --> 00:28:43.280
How would I use type hints to maybe indicate that the name is always supposed to be some kind of string,

00:28:43.280 --> 00:28:46.600
and the time of day is an integer or something like this?

00:28:46.600 --> 00:28:55.620
You write for a date, you write a semicolon and then a date type.

00:28:55.620 --> 00:29:07.100
And to annotate the return value, you write an arrow, so it's minus, greater, and you write a return type.

00:29:07.480 --> 00:29:15.280
And actually, the main thing here is that those types don't influence the runtime.

00:29:15.280 --> 00:29:25.840
So they are only for tools like PyCharm and for checkers, for different linters, to validate your code, to find errors.

00:29:26.640 --> 00:29:27.660
Right, of course.

00:29:27.660 --> 00:29:34.260
Yeah, so the type hints don't really change anything about how Python works as a language or an execution environment.

00:29:34.260 --> 00:29:43.400
But, you know, the reason I think they're interesting is for people like you and other refactoring tools and, like you said, linters.

00:29:43.400 --> 00:29:46.760
What do you guys think about type hints in Python?

00:29:46.760 --> 00:29:47.600
You're a fan of it?

00:29:48.600 --> 00:29:56.420
Actually, I see it a bit controversial because, in some sense, it kills the spirit of Python.

00:29:57.500 --> 00:30:09.580
But I would not prefer that all the Python sources become full of type annotations because it would be not Python.

00:30:09.580 --> 00:30:10.580
It would be something different.

00:30:11.220 --> 00:30:17.940
But still, that is obvious that there is a need to annotate standard libraries.

00:30:18.020 --> 00:30:28.760
And in this PEP 484 proposal, there is a way to annotate types not in your source but in separate header files.

00:30:29.420 --> 00:30:40.420
And I think that would be beneficial if every developer of a popular library would, other than writing code,

00:30:40.420 --> 00:30:48.380
would make this type annotations for users of his library because it will leverage the usage

00:30:48.380 --> 00:30:52.620
because people would be able to use tools with code completion.

00:30:52.620 --> 00:30:55.880
And it would be much, much easier for them to learn the library.

00:30:56.740 --> 00:31:01.460
So I think this is the way to go, but it should be taken with care.

00:31:01.460 --> 00:31:03.980
Okay, I think that's a really good recommendation.

00:31:03.980 --> 00:31:09.100
Like, maybe when I go to write code, if I'm just writing an app for myself,

00:31:09.100 --> 00:31:11.680
maybe I don't bother to do any of these type hints.

00:31:11.680 --> 00:31:16.800
But maybe the libraries that I'm consuming, especially the standard library,

00:31:16.800 --> 00:31:24.540
if it had those annotations, then that makes it much easier for me to kind of know what to do,

00:31:24.540 --> 00:31:29.820
for linters to say, oh, it looks like you're passing a double, it expects an integer,

00:31:29.820 --> 00:31:31.120
or something like this, right?

00:31:31.120 --> 00:31:31.400
Yeah.

00:31:31.400 --> 00:31:36.460
The greatest accomplishment of PEP 484 and Python 3.5,

00:31:36.460 --> 00:31:41.480
in the long run, there is a standard notation.

00:31:42.060 --> 00:31:48.620
So it's fixed now, and it's quite advanced to express pretty much everything about types.

00:31:48.620 --> 00:31:58.340
Yeah, I think you're right that this is going to be a controversial feature of the language.

00:31:58.340 --> 00:32:01.860
But it's going to be interesting to see what happens over time, you know?

00:32:02.440 --> 00:32:03.000
Yeah.

00:32:03.000 --> 00:32:09.560
Because before, why it's important to have this standard notation,

00:32:09.560 --> 00:32:12.720
in PyCharm we had our own notation, actually,

00:32:12.720 --> 00:32:15.980
because we're dealing with the type inference,

00:32:15.980 --> 00:32:21.660
we had to annotate some parts of standard library on different libraries

00:32:21.660 --> 00:32:25.240
that could not be inferred.

00:32:25.240 --> 00:32:27.280
So we had to annotate them,

00:32:27.280 --> 00:32:29.840
and we came up with our own notation,

00:32:29.840 --> 00:32:33.840
and it was not very good to invent your own will.

00:32:33.840 --> 00:32:37.540
So the PyCharm team actually has,

00:32:37.540 --> 00:32:39.560
before the type hints came along,

00:32:39.560 --> 00:32:42.800
you had done something else that is kind of like type hints

00:32:42.800 --> 00:32:44.680
for the standard library,

00:32:44.680 --> 00:32:46.940
just so that PyCharm could work correctly.

00:32:47.080 --> 00:32:48.080
Is this true?

00:32:48.080 --> 00:32:49.060
Yeah, that's true.

00:32:49.060 --> 00:32:56.160
We had to do that to be able to annotate standard library

00:32:56.160 --> 00:32:58.420
to provide type inference in PyCharm.

00:32:58.420 --> 00:33:00.160
And as far as I know,

00:33:00.160 --> 00:33:08.020
Google had their own notation and set of type annotations.

00:33:08.020 --> 00:33:12.740
So now it's great that we can merge our efforts,

00:33:13.320 --> 00:33:18.140
create a common repository of type annotations.

00:33:18.140 --> 00:33:21.160
Like there is one for TypeScript, as far as I know.

00:33:21.160 --> 00:33:24.740
So I think that that's a move in the right direction.

00:33:24.740 --> 00:33:26.460
Yeah, that's definitely a move in the right direction.

00:33:26.460 --> 00:33:26.960
Okay.

00:33:26.960 --> 00:33:29.080
So yeah, it's going to be interesting to see what happens

00:33:29.080 --> 00:33:30.260
with this whole type hints thing,

00:33:30.260 --> 00:33:31.660
because in my mind,

00:33:31.660 --> 00:33:35.680
it's really for people like you that are building tools to help us.

00:33:35.680 --> 00:33:37.500
And maybe when we're writing code,

00:33:37.500 --> 00:33:39.300
maybe type hints are just a thing

00:33:39.300 --> 00:33:40.640
that make our life a little bit better

00:33:40.640 --> 00:33:41.560
because our tools are better.

00:33:41.560 --> 00:33:41.760
Yeah.

00:33:41.760 --> 00:33:42.800
Maybe that's how that works.

00:33:42.800 --> 00:33:42.860
Sure.

00:33:42.860 --> 00:33:47.800
In PyCharm, you can run both Python 2 and Python 3.

00:33:47.800 --> 00:33:50.780
You also have really good support for virtual environments

00:33:50.780 --> 00:33:53.000
and virtual hints and things like that, right?

00:33:53.000 --> 00:33:54.980
You can actually, within the tool,

00:33:54.980 --> 00:33:56.620
say I'm going to create a new project.

00:33:56.620 --> 00:33:58.720
And as part of creating this project,

00:33:58.720 --> 00:34:00.360
set up a virtual environment

00:34:00.360 --> 00:34:02.920
based on either Python 2 or Python 3 or whatever.

00:34:02.920 --> 00:34:05.720
What other implementations do you guys support?

00:34:05.720 --> 00:34:07.020
Like do you support PyPy?

00:34:07.020 --> 00:34:08.260
Sure, yeah.

00:34:08.260 --> 00:34:12.680
We do support PyPy and we support Jython and IronPython.

00:34:12.680 --> 00:34:13.880
Interesting.

00:34:13.880 --> 00:34:16.100
I didn't realize you supported IronPython.

00:34:16.100 --> 00:34:18.080
I guess that would be a Windows-only feature, wouldn't it?

00:34:18.080 --> 00:34:19.500
Yes, true.

00:34:19.500 --> 00:34:23.280
Yeah, since .NET, at least in that variation of it,

00:34:23.280 --> 00:34:24.540
only works on Windows.

00:34:24.540 --> 00:34:39.280
This episode is brought to you by OpBeat.

00:34:39.280 --> 00:34:42.060
OpBeat is application monitoring for developers.

00:34:42.060 --> 00:34:46.500
It's performance monitoring, error logging, release tracking, and workflow in one simple product.

00:34:46.500 --> 00:34:48.860
OpBeat is integrated with your code base

00:34:48.860 --> 00:34:53.220
and makes monitoring and debugging of your production apps much faster and your code better.

00:34:53.780 --> 00:34:56.360
OpBeat is free for an unlimited number of users.

00:34:56.360 --> 00:34:58.760
And starting today, December 1st,

00:34:58.760 --> 00:35:03.900
OpBeat is announcing that their Flask support is graduating from beta to a full commercial product.

00:35:03.900 --> 00:35:07.860
Visit opbeat.com slash Flask to get started today.

00:35:17.540 --> 00:35:24.440
So another thing that I think is cool is I can go to my project and go to my project settings in PyCharm,

00:35:24.440 --> 00:35:29.240
and it will show me, regardless of whether I'm using like a system-level Python

00:35:29.240 --> 00:35:33.420
or I'm using like a virtual environment that was created,

00:35:33.420 --> 00:35:38.960
it will show me all the packages that have been installed from pip and their versions

00:35:38.960 --> 00:35:42.300
and whether they're upgrades that I could potentially install and things like that, right?

00:35:43.120 --> 00:35:43.820
Yeah, true.

00:35:43.820 --> 00:35:44.320
That's right.

00:35:44.320 --> 00:35:48.040
I remember when I was new to Python, I found that really helpful

00:35:48.040 --> 00:35:51.400
because you could go there and it's got like a little search dialogue

00:35:51.400 --> 00:35:54.620
and you can say, find me my package and then click to install it.

00:35:54.620 --> 00:35:57.940
And it'll kind of automate a lot of that stuff for you.

00:35:57.940 --> 00:36:00.960
Yeah, and you even can install it from your editor.

00:36:00.960 --> 00:36:04.660
If you have any Resolve import, you can just press Alt-Enter, for example,

00:36:04.660 --> 00:36:12.600
and PyCharm will install this package to your active Python app.

00:36:12.600 --> 00:36:14.060
Yeah, yeah.

00:36:14.060 --> 00:36:16.760
So maybe let's talk about Alt-Enter for a little bit

00:36:16.760 --> 00:36:23.020
because Alt-Enter is definitely one of the things that makes PyCharm unique in my mind, right?

00:36:23.020 --> 00:36:27.460
So when you see problems in code or PEP 8 violations

00:36:27.460 --> 00:36:33.060
or maybe an import of a package that lives out on PyPI

00:36:33.060 --> 00:36:36.600
but is not actually installed into the environment that you have active,

00:36:36.600 --> 00:36:39.420
PyCharm will suggest fixes, right?

00:36:39.420 --> 00:36:44.940
Right. In most cases, you just press Alt-Enter and PyCharm will fix it for you.

00:36:44.940 --> 00:36:48.460
Yeah. So like, for example, if I say import requests

00:36:48.460 --> 00:36:52.180
and then I start typing things and I don't actually have,

00:36:52.180 --> 00:36:54.940
say I'm in a virtual environment and I don't have requests installed in there,

00:36:54.940 --> 00:36:58.320
it would say, hey, here's a package you're importing

00:36:58.320 --> 00:36:59.820
and we know about it.

00:36:59.820 --> 00:37:02.100
We know it lives on PyPI, but you don't have it installed.

00:37:02.100 --> 00:37:04.020
Hit Alt-Enter and we'll just install it for you.

00:37:04.140 --> 00:37:04.960
Yes, that's true.

00:37:04.960 --> 00:37:09.760
Or, you know, import the module if you've got it in your environment

00:37:09.760 --> 00:37:12.320
but it's not actually, the import keyword is missing or whatever.

00:37:12.320 --> 00:37:12.920
Very cool.

00:37:12.920 --> 00:37:14.320
Yeah.

00:37:15.060 --> 00:37:18.880
Yeah. I just think constant watching of, hey, how can I help you, right?

00:37:18.880 --> 00:37:22.440
A lot of times as programmers, we're dealing with lots of details

00:37:22.440 --> 00:37:26.280
and we're putting pieces together just so, right?

00:37:26.280 --> 00:37:29.980
Like I've got to make sure I've got this package and its dependencies installed

00:37:29.980 --> 00:37:32.860
and I've got to have this import keyword up here just so.

00:37:33.500 --> 00:37:39.220
And, you know, I think a lot of the mental juggling that we have to do can go away

00:37:39.220 --> 00:37:43.980
if you have some kind of editor that says, oh, we've noticed that you didn't connect this piece here.

00:37:43.980 --> 00:37:46.200
Hit Alt-Enter and it's connected.

00:37:46.200 --> 00:37:50.140
You know, like we realize you may have pip installed some library

00:37:50.140 --> 00:37:52.340
but you didn't type import at the top, for example.

00:37:52.340 --> 00:37:53.960
Yeah, that's very handy.

00:37:54.340 --> 00:38:01.440
I cannot even imagine how to program without it when you get used to it.

00:38:01.440 --> 00:38:03.540
So it's difficult.

00:38:03.540 --> 00:38:05.900
It totally is difficult.

00:38:05.900 --> 00:38:09.420
And, you know, I do a ton of Python programming, of course,

00:38:09.420 --> 00:38:14.100
and the other work that I do is typically in C# and Visual Studio.

00:38:14.100 --> 00:38:16.520
And I have exactly the same feeling when I'm over there.

00:38:16.520 --> 00:38:20.000
Like if I don't have V Sharp or I'm like, oh, this thing is just partly broken.

00:38:20.000 --> 00:38:20.200
Yeah.

00:38:20.200 --> 00:38:22.980
How can I continue to work in this area?

00:38:23.300 --> 00:38:28.020
Yeah, this is barbaric if I have to go to the top of the file and type import or, you know,

00:38:28.020 --> 00:38:29.700
using or whatever, depending on the language.

00:38:29.700 --> 00:38:31.060
Yeah, that's awesome.

00:38:31.060 --> 00:38:39.000
So one of the things that's super important in dynamic languages like Python is, you know,

00:38:39.000 --> 00:38:44.820
since there's no real compile step, there can be errors that are just not detected, right?

00:38:44.820 --> 00:38:47.980
Maybe even something as simple as a compiler would have detected it.

00:38:47.980 --> 00:38:52.820
But because it's not ever compiled, which is, you know, working out really well for Python,

00:38:53.000 --> 00:38:54.940
but it means those errors don't get caught.

00:38:54.940 --> 00:38:59.600
So typically having some other way to catch them, like unit testing, is really good.

00:38:59.600 --> 00:38:59.920
Sure.

00:38:59.920 --> 00:39:01.720
Unit testing is a...

00:39:01.720 --> 00:39:03.960
Do you guys have built-in support for unit testing?

00:39:03.960 --> 00:39:05.740
And like code coverage and stuff like that?

00:39:05.740 --> 00:39:05.900
Yeah, sure.

00:39:05.900 --> 00:39:11.340
Unit testing, I think, is a basic thing when you deal with dynamic language.

00:39:12.840 --> 00:39:18.340
And yes, of course, PySharp has support for unit testing.

00:39:18.340 --> 00:39:24.600
And we support actually different test runners, not only unit tests, but nose tests and py tests and AT tests.

00:39:25.600 --> 00:39:35.480
What you can do is you can run your tests from PySharp and you will see the results in a nice formatted tree.

00:39:35.480 --> 00:39:40.800
And you can navigate directly to source to see stack trace.

00:39:40.800 --> 00:39:42.560
And of course, you can debug your tests.

00:39:42.560 --> 00:39:43.760
You can profile them.

00:39:43.760 --> 00:39:45.120
You can see coverage results.

00:39:45.980 --> 00:39:49.700
Almost everything possible, what you're going to mention.

00:39:49.700 --> 00:39:51.460
So profiling is interesting.

00:39:51.460 --> 00:39:58.140
On show 28, we did a show about profiling Python sort of from the command line.

00:39:59.100 --> 00:40:04.720
And about that same time, I saw that you guys actually announced profiling support for PyCharm.

00:40:04.720 --> 00:40:06.900
And that's pretty excellent.

00:40:06.900 --> 00:40:09.160
I've not had a chance to try it yet.

00:40:09.160 --> 00:40:09.880
How does that work?

00:40:09.880 --> 00:40:14.480
Can you walk me through what I learn if I do profiling and how I do it in PyCharm?

00:40:14.480 --> 00:40:17.120
That's actually pretty simple to use.

00:40:17.120 --> 00:40:21.400
You just press the profile button for your run configuration.

00:40:21.400 --> 00:40:28.320
And your process is executed with cprofile injected.

00:40:28.320 --> 00:40:37.120
And as long as you want to capture a snapshot with your profile data, you just press the button capture snapshot.

00:40:37.120 --> 00:40:48.180
And it's shown in PyCharm with statistics of what method, statistics for all functions, how long did it take for them to launch.

00:40:48.380 --> 00:40:58.600
And actually, we have a nice visual representation in graph form where the hotspots are colored with red.

00:40:58.600 --> 00:41:04.280
And you can just see what is slow in your program.

00:41:04.280 --> 00:41:05.400
Yeah.

00:41:05.540 --> 00:41:08.460
The whole visual component of it, I think it's really important.

00:41:08.460 --> 00:41:08.640
Yeah.

00:41:08.640 --> 00:41:19.780
And unfortunately, just after we made the first attempt of making the integration with cprofile,

00:41:20.220 --> 00:41:25.100
it appeared that it's too limited and too basic to add features.

00:41:25.100 --> 00:41:35.380
And it was like a pity that there were no really good profiling backend for Python

00:41:35.380 --> 00:41:40.340
because cprofile doesn't provide you a lot of information.

00:41:40.540 --> 00:41:47.500
But hopefully, this summer, PyPy team has announced VM prof profiler.

00:41:47.500 --> 00:41:56.820
That seems to be much, much better and more advanced as cprofile.

00:41:56.820 --> 00:42:07.660
And we plan to integrate this one in PyCharm as long as it will support macOS X and Windows.

00:42:07.660 --> 00:42:12.200
But they have plans to do that and we can collaborate together to make this happen.

00:42:12.200 --> 00:42:12.940
Oh, yeah.

00:42:12.940 --> 00:42:17.020
That's going to be really excellent because it's already helpful and that'll be even better.

00:42:17.020 --> 00:42:17.660
Very nice.

00:42:17.660 --> 00:42:21.540
So another thing that you guys have support for is Vagrant.

00:42:21.540 --> 00:42:26.240
And I know of Vagrant, but I haven't really done anything with it.

00:42:26.240 --> 00:42:28.380
For everybody listening, what's Vagrant?

00:42:28.380 --> 00:42:32.480
Vagrant is basically a tool that eases the usage of virtual machines.

00:42:33.400 --> 00:42:46.680
So you can just download an image of your virtual machine and start it up and launch your process inside.

00:42:46.680 --> 00:43:00.120
What we have done in PyCharm is that in PyCharm, you can work with Python interpreter located inside your Vagrant virtual machine as if it is local interpreter.

00:43:00.560 --> 00:43:06.580
For example, your desktop is Windows and you even don't have Python there at all.

00:43:06.580 --> 00:43:09.620
You just take Vagrant virtual machine image.

00:43:10.360 --> 00:43:14.700
And in PyCharm, you add Python located in this virtual machine as a remote interpreter.

00:43:14.700 --> 00:43:20.980
And after that, yeah, you have all the features of the IDE.

00:43:20.980 --> 00:43:26.380
You can run your code, debug, run your test profile, and you have code completion.

00:43:26.380 --> 00:43:27.080
So everything.

00:43:27.720 --> 00:43:28.340
That's really cool.

00:43:28.340 --> 00:43:32.360
So say I'm on Windows and I don't have Python set up.

00:43:32.360 --> 00:43:37.640
I could have a Vagrant virtual machine running Ubuntu with Python 3 installed.

00:43:37.640 --> 00:43:47.060
And I could just fire that up and it will automatically copy, say, my web app files over and then kick off Python on that machine and then attach to it remotely.

00:43:47.060 --> 00:43:47.740
Yeah, exactly.

00:43:47.740 --> 00:43:48.300
Exactly.

00:43:48.760 --> 00:43:49.620
That's really cool.

00:43:49.620 --> 00:43:52.480
So you also announced Docker support.

00:43:52.480 --> 00:43:59.460
And in my mind, Docker is like a slightly more lightweight, modern take on that same idea.

00:43:59.460 --> 00:44:01.940
Can you maybe talk about what you're doing with Docker?

00:44:01.940 --> 00:44:03.160
Yeah, true.

00:44:03.160 --> 00:44:15.100
It could be seen as the same idea, but people say about it that Docker is virtualization without actual virtualization.

00:44:15.100 --> 00:44:20.480
So Docker is the technology of containers.

00:44:20.480 --> 00:44:29.900
So it relies on Linux core functionality to isolate processes from each other.

00:44:30.560 --> 00:44:32.620
There is a concept of Docker image.

00:44:32.620 --> 00:44:39.760
It's some set of configured software and files.

00:44:39.760 --> 00:44:44.140
And when you run this image, you get a container.

00:44:44.140 --> 00:44:48.080
So a container is a running Docker image.

00:44:48.080 --> 00:44:54.280
And if you have several containers, they can run on the same Linux machine, but they don't interfere at all.

00:44:54.680 --> 00:45:05.820
Every container has its own file system layer and its own network configuration.

00:45:05.820 --> 00:45:07.060
So they don't interfere.

00:45:07.060 --> 00:45:14.420
And after this container finishes its work, it's killed and removed.

00:45:14.420 --> 00:45:17.500
And you don't need to dispose of nothing.

00:45:18.240 --> 00:45:20.520
Yeah, I think Docker is really cool.

00:45:20.520 --> 00:45:22.060
And I think it's going to make a big...

00:45:22.060 --> 00:45:23.100
Yeah, sorry.

00:45:23.100 --> 00:45:23.880
So sorry.

00:45:23.880 --> 00:45:29.120
I forgot to say that the main advantage of Docker is speed.

00:45:29.120 --> 00:45:35.360
If you, of course, for the same purpose, you can use a virtual machine, for example, Vagrant with VirtualBox.

00:45:35.880 --> 00:45:39.700
But to start a virtual machine, it can take minutes sometimes.

00:45:39.700 --> 00:45:45.440
And starting a Docker container is just a second or a millisecond.

00:45:45.440 --> 00:45:46.940
So it could be really fast.

00:45:46.940 --> 00:45:49.640
And I think that's the main selling point.

00:45:49.880 --> 00:45:58.580
What we do in PyCharm is we have pretty much the same integration with Docker as with Vagrant.

00:45:58.580 --> 00:46:02.780
It's different under the hood, but it looks like the same.

00:46:02.780 --> 00:46:10.820
So you just add an interpreter inside your Docker image as a remote interpreter.

00:46:11.280 --> 00:46:16.180
And then you just run it or debug it or profile it.

00:46:16.180 --> 00:46:24.260
And PyCharm executes your container and takes all the necessary information attached to the process if you want to debug it and so on.

00:46:24.260 --> 00:46:25.500
That's cool.

00:46:25.500 --> 00:46:28.820
So what do I need to do to get started with Docker and PyCharm?

00:46:28.820 --> 00:46:34.280
Like, do I need to go and install Docker on my machine?

00:46:34.280 --> 00:46:36.140
Can I do this on OS X?

00:46:36.140 --> 00:46:38.260
Does it have to be done on Linux?

00:46:38.260 --> 00:46:39.440
What's the story there?

00:46:39.840 --> 00:46:44.480
You can do that on Windows and macOS X and Linux.

00:46:44.480 --> 00:46:48.360
All you need is to install so-called Docker toolbox.

00:46:48.360 --> 00:46:51.240
That is a set of software from Docker.

00:46:51.240 --> 00:46:54.480
It will install a Docker machine on your desktop.

00:46:54.480 --> 00:46:57.580
And that's pretty much it.

00:46:57.580 --> 00:47:06.740
You just take PyCharm Professional Edition and you go to our settings at the remote interpreter and say that it should be Docker remote interpreter.

00:47:07.400 --> 00:47:10.160
And then you select Python.

00:47:10.160 --> 00:47:14.160
For example, Python 3 Docker image and press OK.

00:47:14.160 --> 00:47:15.760
So, and that's it.

00:47:15.760 --> 00:47:22.320
You can execute your project just with this image inside the container.

00:47:22.800 --> 00:47:23.780
Okay, that's really cool.

00:47:23.780 --> 00:47:28.500
I'm going to have to play with that because that's something I've never looked into, but that sounds pretty awesome.

00:47:28.500 --> 00:47:35.380
So one of the things that I think is cool that PyCharm has is there's a bunch of community plugins.

00:47:36.380 --> 00:47:44.540
Like if I want to do like Markdown in PyCharm, there's probably a plugin I can get so that I can edit Markdown.

00:47:44.540 --> 00:47:45.100
Is that correct?

00:47:45.900 --> 00:47:46.360
Yeah, true.

00:47:46.360 --> 00:47:52.660
There are a lot of plugins and third-party plugins and JetBrains plugins in our plugin repository.

00:47:52.660 --> 00:47:55.440
Yeah, that's one of the things I like.

00:47:55.440 --> 00:48:06.100
And my favorite one, since I do a lot of training, but I also think is helpful even just if you're exploring parts of the tools that you don't know, is this thing called Presentation Assistant.

00:48:06.100 --> 00:48:06.780
Do you know that?

00:48:07.220 --> 00:48:08.520
Yeah, this one is nice.

00:48:08.520 --> 00:48:09.480
Yeah, it's nice.

00:48:09.480 --> 00:48:24.300
So every time you execute some kind of operation, like if I do a refactoring or a navigation or some sort of correct, you know, autocorrect, like pull in a missing import statement or something like this.

00:48:24.300 --> 00:48:37.060
Or even if I go to a menu and I click it, it'll always show me, it'll do like a little transparent semi or translucent overlay of what the actual keystroke that I would have had to do to make that happen.

00:48:37.060 --> 00:48:42.240
And so when you're learning, like you can use the menus and the buttons and stuff.

00:48:42.240 --> 00:48:48.580
But if you just turn on this Presentation Assistant, it'll show you like how to do this all just straight from the keyboard, right?

00:48:48.580 --> 00:48:51.080
I think it helped me a lot become more proficient.

00:48:51.080 --> 00:48:57.180
But I think it's also helpful if you're doing a training class and you hit some keystroke and something funky happens, right?

00:48:57.180 --> 00:49:00.180
Like, well, the students will ask, like, how did you make that happen?

00:49:00.180 --> 00:49:02.300
And, you know, with that thing turned on, they'll see it.

00:49:02.300 --> 00:49:03.840
So, yeah, that's really cool.

00:49:03.840 --> 00:49:05.200
Yeah, true.

00:49:05.640 --> 00:49:07.580
So you said there's other editors in there.

00:49:07.580 --> 00:49:09.080
What is built in?

00:49:09.080 --> 00:49:11.200
Like, so I can obviously edit Python.

00:49:11.200 --> 00:49:12.980
You said HTML, JavaScript.

00:49:12.980 --> 00:49:17.820
Does it have support for things like Angular or TypeScript or things like that?

00:49:17.820 --> 00:49:23.320
Yeah, we do support AngularJS and TypeScript.

00:49:23.320 --> 00:49:25.480
And much, much more.

00:49:25.480 --> 00:49:31.520
There is a support for many different JavaScript frameworks.

00:49:31.520 --> 00:49:32.680
Yeah, cool.

00:49:32.680 --> 00:49:33.680
So TypeScript's interesting.

00:49:33.800 --> 00:49:36.200
Do you just support, like, the editing of it?

00:49:36.200 --> 00:49:42.180
Or do you have some, like, compile step that'll transpile that into JavaScript so I can actually use it?

00:49:42.180 --> 00:49:43.740
Or do I have to do that outside of PyCharm?

00:49:43.740 --> 00:49:52.560
I'm actually not sure about how this works in detail because I never used TypeScript support myself and never developed it.

00:49:52.560 --> 00:49:56.000
But for sure you can compile TypeScript.

00:49:56.000 --> 00:49:59.480
But for sure you can compile TypeScript to JavaScript from PyCharm and WebStorm.

00:49:59.480 --> 00:50:03.280
This functionality comes into PyCharm from WebStorm.

00:50:03.280 --> 00:50:04.040
That's right.

00:50:04.040 --> 00:50:05.220
Okay, I see.

00:50:05.220 --> 00:50:09.080
That's part of the integration between all the different IDE teams.

00:50:09.120 --> 00:50:09.940
Yeah, true.

00:50:09.940 --> 00:50:10.800
Yeah, cool.

00:50:10.800 --> 00:50:21.820
So one thing you talked about earlier that I thought was pretty cool, and the first time I saw it, I'm like, wow, this really, you know, several times it saved me from, like, messing up something bad.

00:50:22.700 --> 00:50:26.040
Is this, you know, obviously of support for Git and subversion and so on.

00:50:26.040 --> 00:50:28.200
But this thing you call local history.

00:50:28.200 --> 00:50:29.760
Do you want to tell people about local history?

00:50:29.760 --> 00:50:32.840
Yeah, local history is a cool feature.

00:50:32.840 --> 00:50:37.320
It saved me several times from losing a portion of my work.

00:50:38.620 --> 00:50:44.760
It is useful not very often, but when it is, it can save you a ton of time.

00:50:44.760 --> 00:50:51.820
What is it basically, it's a versioning of your local changes that even when they are not committed.

00:50:51.820 --> 00:51:04.580
For example, when you have your local changes lost due to some broken external tool or some Git misuse, for example, when you accidentally reset everything.

00:51:05.460 --> 00:51:10.860
Or even if you don't have version, like, if you're one of those people like, version control, don't need that, right?

00:51:10.860 --> 00:51:12.500
Just start editing, right?

00:51:12.500 --> 00:51:16.080
I hope that there is not much of those people.

00:51:16.080 --> 00:51:30.800
But still, yeah, if somebody doesn't use version control, for example, what PyCharm can offer is to restore or revert your changes to some point in the history.

00:51:30.800 --> 00:51:38.000
So you just open local history and you see all changes that happened with your files.

00:51:38.000 --> 00:51:40.040
And this is a very detailed view.

00:51:40.040 --> 00:51:42.780
It shows differences between files.

00:51:42.780 --> 00:51:43.700
And yeah.

00:51:43.700 --> 00:51:52.100
Yeah, the way I think of it, it's kind of like Git, but the Git that you didn't set up or think about or bother to interact with, right?

00:51:52.140 --> 00:52:01.120
So independent of whatever real source control you're using, there's like a separate automatic autosave type of version control that you can fall back on if you need it.

00:52:01.120 --> 00:52:03.380
Yeah, that's really helpful.

00:52:03.380 --> 00:52:05.360
Like you said, I probably use that once every two months.

00:52:05.360 --> 00:52:06.900
But when I do, I'm like, oh, thank goodness.

00:52:06.900 --> 00:52:07.680
Yeah, yeah, yeah.

00:52:07.680 --> 00:52:11.460
Maybe even less, but I still really appreciate it when it works.

00:52:13.220 --> 00:52:15.660
We're kind of getting towards the end of the show a little bit.

00:52:15.660 --> 00:52:20.980
And one of the things I think is probably more interesting than just the details.

00:52:20.980 --> 00:52:28.060
I wanted to talk about some of the details because there's just, and we just barely touched on all the cool things that I think PyCharm can do.

00:52:28.060 --> 00:52:34.180
I wanted to talk about these so that people out there are like, there's this tool that can help so much.

00:52:34.180 --> 00:52:42.200
Even though maybe it starts slower than Vim or Emacs or Sublime Text, you know, if you're willing to wait like two seconds, that's not really that long.

00:52:42.200 --> 00:52:47.580
You get this great thing to help you write code and work on, especially large projects.

00:52:47.580 --> 00:52:58.100
You know, one of the things I hear a lot, obviously there's a bunch of people that like tools that help them a lot, but there's also people that just want super lightweight.

00:52:58.740 --> 00:53:05.140
So if somebody came to you and said, Dimitri, you know, I think what you guys built is cool, but it's just not for me.

00:53:05.140 --> 00:53:07.220
I don't really need an IDE.

00:53:07.220 --> 00:53:11.600
I work on these big Python projects, but I've never needed an IDE.

00:53:11.600 --> 00:53:13.000
I just feel like they're in my way.

00:53:13.000 --> 00:53:19.940
Like, what would you say, give PyCharm a chance or think about some kind of IDE that's there to sort of support them?

00:53:19.940 --> 00:53:26.860
First of all, I just offer a person to try, but if he has already tried.

00:53:26.860 --> 00:53:33.920
And for some reason find that he feels more at home with Vim.

00:53:33.920 --> 00:53:35.980
So I don't know.

00:53:35.980 --> 00:53:37.000
It's also okay.

00:53:37.000 --> 00:53:44.780
I think that everybody choose their own way to develop applications.

00:53:44.780 --> 00:53:48.220
I think the right approach is to try different things.

00:53:48.220 --> 00:53:55.940
So it's not very effective when you're stuck with something and you don't try different things.

00:53:55.940 --> 00:54:02.400
I think even with somebody, programs uses PyCharm extensively.

00:54:02.400 --> 00:54:05.040
I think it's okay also to try different editors.

00:54:05.040 --> 00:54:08.920
You can find different approaches and you can compare.

00:54:09.360 --> 00:54:12.060
So it's just better to try.

00:54:12.060 --> 00:54:14.720
So that's my philosophy.

00:54:14.720 --> 00:54:17.960
As I said before, I've done that with different languages.

00:54:17.960 --> 00:54:22.240
So when I wanted to pick up dynamic language, I just tried different things.

00:54:22.240 --> 00:54:26.900
So I think the same thing applies to IDs and editors.

00:54:28.000 --> 00:54:36.860
If you look at any of the individual features, I don't think there's a single feature that would convince anybody that, hey, I should try this tool.

00:54:36.860 --> 00:54:40.280
If they're kind of like, you know, IDs are not for me, right?

00:54:40.280 --> 00:54:44.560
If I told you, hey, this thing has local history, they're like, yeah, I use Git.

00:54:44.560 --> 00:54:45.900
No problem.

00:54:45.900 --> 00:54:47.540
Oh, this thing has code coverage.

00:54:47.640 --> 00:54:51.660
Well, I can use, you know, coverage.py and get that.

00:54:51.660 --> 00:54:55.640
And I think it's the bringing it all together.

00:54:55.640 --> 00:54:59.560
Like all, no single feature is like, they're great, but they're not that amazing.

00:54:59.560 --> 00:55:08.520
But, you know, 20 or 50 or 100 of them all at the same time is when it starts to be really an interesting tool for you when you're working in ID.

00:55:08.520 --> 00:55:16.600
So that's kind of my view of the benefits is no single feature is going to really make it worthwhile.

00:55:16.600 --> 00:55:18.940
But taken as a whole, they start to really add up.

00:55:18.940 --> 00:55:20.320
Yeah, true.

00:55:20.320 --> 00:55:21.120
I agree with you.

00:55:21.120 --> 00:55:22.360
That's true.

00:55:22.360 --> 00:55:28.820
There's always a couple of questions I ask my guests before we sort of wrap up the show.

00:55:29.560 --> 00:55:38.880
What's your favorite PyPI package or maybe project out on GitHub or something that is cool, maybe not everyone knows about, that you'd like to point out to the community?

00:55:38.880 --> 00:55:43.780
Actually, my favorite is coverage.py.

00:55:43.780 --> 00:55:51.320
I like it very much and I contributed to it at some moment unintentionally.

00:55:51.320 --> 00:55:56.620
But it's very well-known package, actually.

00:55:56.620 --> 00:56:01.540
If to point something to people, I would notice TOX.

00:56:01.540 --> 00:56:10.100
I think that's very, very useful when you want to test your Python projects on different environments, in different Pythons, for example.

00:56:10.100 --> 00:56:21.580
And yeah, I've heard about such a project called DTOX, which is basically TOX, but executes your TOX tests in parallel.

00:56:21.580 --> 00:56:26.720
I never tried it, but I think the idea is cool, so maybe it's worth trying.

00:56:26.720 --> 00:56:28.500
Yeah, that's pretty awesome.

00:56:28.500 --> 00:56:32.020
So, coverage PY, TOX, T-O-X?

00:56:32.020 --> 00:56:32.820
Yes.

00:56:32.820 --> 00:56:33.360
And then DTOX.

00:56:33.360 --> 00:56:34.060
Yeah, okay.

00:56:34.060 --> 00:56:35.020
Very nice.

00:56:35.020 --> 00:56:36.120
Well, thanks for recommendations.

00:56:36.120 --> 00:56:41.680
And then, I think you might be biased on this one, but I always ask everyone what their favorite editor is.

00:56:41.680 --> 00:56:45.480
Are you an Emacs person, a PyCharm person, a Vim, Sublime Text?

00:56:45.480 --> 00:56:46.960
Yeah, it is.

00:56:46.960 --> 00:56:48.140
It is PyCharm, of course.

00:56:48.560 --> 00:56:49.200
Of course.

00:56:49.200 --> 00:56:49.740
All right.

00:56:49.740 --> 00:56:50.640
That's awesome.

00:56:50.640 --> 00:56:57.780
So, before we go, do you have any, like, calls to actions, things you'd like people to do, know about?

00:56:57.780 --> 00:57:03.200
Try PyCharm if you did not yet, if you haven't.

00:57:03.200 --> 00:57:06.460
And please say us what you think.

00:57:06.460 --> 00:57:09.500
So, we do listen to our users.

00:57:09.500 --> 00:57:15.500
And the things that our users tell us are very important.

00:57:16.700 --> 00:57:17.260
Okay.

00:57:17.260 --> 00:57:18.460
Yeah, that's cool.

00:57:18.460 --> 00:57:21.520
If we have feedback for you, how do we give it to you?

00:57:21.520 --> 00:57:23.080
There are different channels.

00:57:23.080 --> 00:57:26.860
You can submit issues and feature requests to our tracker.

00:57:26.860 --> 00:57:29.620
Or you can write our support.

00:57:29.620 --> 00:57:31.680
There is a forum.

00:57:32.380 --> 00:57:41.760
I would prefer to write directly to issue tracker and vote for features because there are a lot of features and feature requests in our tracker already.

00:57:41.760 --> 00:57:53.480
And actually, we do look at votes when we consider features for the next version to be included in the roadmap.

00:57:53.480 --> 00:57:54.280
Okay.

00:57:54.500 --> 00:57:54.800
Excellent.

00:57:54.800 --> 00:57:57.720
Well, it's been really fun to talk to you about PyCharm.

00:57:57.720 --> 00:57:59.900
It's quite a project you guys put together there.

00:57:59.900 --> 00:58:01.280
Thank you.

00:58:01.280 --> 00:58:02.460
It was a pleasure to talk with you.

00:58:02.460 --> 00:58:03.040
Yeah.

00:58:03.040 --> 00:58:03.780
Thanks for being on the show.

00:58:03.780 --> 00:58:04.200
See you later.

00:58:05.280 --> 00:58:08.280
This has been another episode of Talk Python To Me.

00:58:08.280 --> 00:58:10.320
Today's guest was Dmitry Trofimov.

00:58:10.320 --> 00:58:12.980
And this episode has been sponsored by Hired and OpBeat.

00:58:12.980 --> 00:58:15.020
Thank you guys for supporting the show.

00:58:15.020 --> 00:58:17.960
Hired wants to help you find your next big thing.

00:58:17.960 --> 00:58:23.880
Visit Hired.com slash Talk Python To Me to get five or more offers with salary and equity presented right up front.

00:58:24.120 --> 00:58:26.820
And a special listener signing bonus of $4,000.

00:58:26.820 --> 00:58:31.380
OpBeat is mission control for your Python web applications.

00:58:31.380 --> 00:58:36.280
Keep an eye on errors, performance, profiling, and more for your Django and Flask web app.

00:58:36.280 --> 00:58:40.000
Tell them thanks for supporting the show on Twitter where they are at OpBeat.

00:58:40.000 --> 00:58:42.360
Did you know you can personally support the show too?

00:58:42.360 --> 00:58:49.520
Just visit Patreon.com slash mkennedy and join over 60 listeners who contribute between $1 and $2 per episode.

00:58:50.200 --> 00:58:56.480
You can find the links from the show at talkpython.fm/episodes slash show slash 36.

00:58:56.480 --> 00:58:58.860
And be sure to subscribe to the show.

00:58:58.860 --> 00:59:01.040
Open your favorite podcatcher and search for Python.

00:59:01.040 --> 00:59:02.600
We should be right at the top.

00:59:02.600 --> 00:59:06.460
You can also find the iTunes and direct RSS feeds in the footer of the website.

00:59:06.460 --> 00:59:11.480
Our theme music is Developers, Developers, Developers by Corey Smith who goes by Smix.

00:59:11.480 --> 00:59:14.540
You can hear the entire song on talkpython.fm.

00:59:14.540 --> 00:59:16.620
This is your host, Michael Kennedy.

00:59:16.620 --> 00:59:18.020
Thanks again for listening.

00:59:18.020 --> 00:59:20.080
Smix takes it out of here.

00:59:20.080 --> 00:59:22.460
Stating with my voice.

00:59:22.460 --> 00:59:24.260
There's no norm that I can feel within.

00:59:24.260 --> 00:59:25.440
Haven't been sleeping.

00:59:25.440 --> 00:59:27.100
I've been using lots of rest.

00:59:27.100 --> 00:59:29.960
I'll pass the mic back to who rocked it best.

00:59:29.960 --> 00:59:34.340
I'll pass the mic back to who rocked it best.

00:59:34.340 --> 00:59:36.400
I'll pass the mic back to who rocked it best.

00:59:36.400 --> 00:59:38.400
I'll pass the mic back to who rocked it best.

00:59:38.400 --> 00:59:39.280
I'll pass the mic back to who rocked it best.

00:59:39.280 --> 00:59:41.340
I'll pass the mic back to who rocked it best.

00:59:41.340 --> 00:59:42.280
I'll pass the mic back to who rocked it best.

