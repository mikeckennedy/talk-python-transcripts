00:00:00 It's been an amazing year for Python. We've seen its meteoric growth continue to become the most

00:00:05 popular major programming language. We've seen significant grants and funding come in for open

00:00:10 source. And this just might be the year that the Python 2 or Python 3 question was finally settled.

00:00:16 Join Brian Okken, my co-host from our Python Bytes podcast, and me as we look back at many

00:00:21 of the major milestones for Python in 2017. This is Talk Python to Me, episode 145, recorded

00:00:28 December 21st, 2017. Welcome to Talk Python to Me, a weekly podcast on Python, the language,

00:00:49 the libraries, the ecosystem, and the personalities. This is your host, Michael Kennedy. Follow me on

00:00:54 Twitter where I'm @mkennedy. Keep up with the show and listen to past episodes at

00:00:58 talkpython.fm and follow the show on Twitter via at Talk Python. This episode is sponsored by

00:01:04 Linode and Rollbar. Please check out what they're offering during their segments. It really helps

00:01:09 support the show. Talk Python to Me is partially supported by our training courses. Have you tried

00:01:14 to learn Python but got stuck or lost focus? We know how it feels to try and jam fact after fact,

00:01:20 loop construct after turn hair expression, into your head. At best, it's boring. At worst,

00:01:26 it can turn you off programming altogether. That's why we built our course, Python Jumpstart by building

00:01:31 10 apps. This course guides you through carefully planned applications. It starts simple, but

00:01:37 progresses to quite real apps. Best of all, you won't be learning dry facts. You'll be learning like

00:01:43 the pros do by building real applications and learning in context. If you want to start building with Python,

00:01:48 just visit talkpython.fm/course to get started.

00:01:54 Before we get to the interview, I want to share a quick update about our Python courses with you.

00:01:58 Do you work on a software team that needs training and could really use a chance to level up their

00:02:02 Python? Maybe your entire company is looking to become more proficient. We have special offers

00:02:07 that make our courses here at Talk Python the best option for everyone you work with. Our courses don't

00:02:12 require an ongoing subscription like so many corporate training options do. And they're roughly priced

00:02:18 about the same as a book. We're here to help you succeed. Send us a note at sales at talkpython.fm

00:02:24 to start a conversation. And here's a bit of a timely announcement. We're giving away a PyCon ticket

00:02:31 to one lucky individual. So every year PyCon in the US sells out. If you don't have a ticket,

00:02:37 go buy a ticket or, or you could become a friend of the show. Many of you already are. And thank you

00:02:44 for that. If you're not just go to talkpython.fm/friends into your email address, and you'll be

00:02:50 in the running on January 8. We're going to do a draw using a little random dot choice and figure out

00:02:57 who the lucky winner is who wins a free ticket to PyCon. So be sure to become a friend of the show

00:03:03 if you want to be part of that. Now let's get to the interview. Brian, welcome back to Talk Python.

00:03:08 Thanks for having me back for this special episode. I always love these year and review shows and

00:03:13 it's really excellent that you could be here to do it together with me. So you were on previously a

00:03:20 couple years ago to talk about the testing column, how the testing pyramid was broken and we need more

00:03:25 testing column, right? I guess. I can't even remember what we talked about. So that makes sense.

00:03:30 It's been a long time, but I do remember the testing column is now a thing after that episode. That was

00:03:35 cool. So people may know you from our work together on Python Bytes, our other podcasts. They may know

00:03:42 you from your test and code podcast and they may know you from your book, right? Yeah. Just so this last

00:03:48 year got the book, Python testing with pytest with pragmatic publishers published this last year. So

00:03:54 yeah. Yeah. Awesome. That's definitely one of the things we'll review as we go through here. So we're

00:04:00 going to get together today and talk about what we think were the major accomplishments, major pieces of

00:04:07 news, not necessarily the major projects, say, in terms of like projects you find on GitHub or something,

00:04:16 but more like the trends in Python in 2017. So I think that's going to be a lot of fun. Do you want

00:04:23 to kick us off with what may be one of the biggest trends out there? Yeah. One of the biggest trends

00:04:28 that we saw in 2017 is a dramatic shift from Python 2 or legacy Python to Python 3 or modern Python.

00:04:36 I love the term legacy Python and modern Python or just Python and legacy Python. I think it's actually

00:04:42 making a difference. And Matthias, who originally started that trend, well done, man. That is awesome.

00:04:48 So I think this is finally the year where the question seems silly to ask. Like it's been a few years.

00:04:57 We're like, yeah, you can do Python 3. You can do Python 2. You know, how is this progressing? It should

00:05:01 really be going quicker. But to me, it feels like if somebody says, I'm going to start a new project

00:05:06 with Python 2, you kind of smack them and go, what? What are you doing, man? Come on. Like,

00:05:09 it seems like that's the feeling in the industry these days, which is really good, right?

00:05:13 I definitely think so. And I think there's been a switch. Hopefully there's been a switch in

00:05:17 the education, like in colleges and stuff, people using Python 3 instead.

00:05:22 There's a couple of milestones around this that we wanted to highlight, right? One of them is this

00:05:26 article by ActiveState, the guys at ActiveState called Python 3 versus Python 2. It's different

00:05:32 this time. They really lay out some of the things, some of the facts around this. For example, 95% of

00:05:39 the top 360, don't know why they chose that number, 360 packages listed on py3readiness.org,

00:05:47 95% of those are Python 3 ready. So traditionally, the blockage has been this sort of catch-22 around

00:05:54 packages not supporting Python 3, right? Yeah. A couple of years ago, that was definitely the case

00:05:58 of people trying to switch and they found out they had some key package that hadn't been migrated yet.

00:06:04 But for the most part, that's behind us. Yeah, absolutely. So Django, Django played a big role

00:06:11 this year in sort of putting a nail on the Python 2 or legacy Python coffin, right? Right. I mean,

00:06:17 even just this month, Django 2.0 came out and it does not support Python 2. It's 3.4 and above.

00:06:24 And with a little side note that 3.4 is only going to be supported for another year-ish. So move up to

00:06:32 modern Python. Yeah, that's awesome. 3.5, I guess. But I think if you're going to move up, may as well

00:06:37 just move up to 3.6. Right. Yeah. The only reason I think to not move to 3.6 is if you're working on

00:06:43 like a Linux distribution and it doesn't support it or it's a complete pain to like a non-standard. But

00:06:48 even so, 3.5 already has async and away. It has all, it has type hints. It has a lot of the magic

00:06:53 features that you really care about, which is awesome. Yeah. So Django, the current shipping

00:06:59 version of Django does not support legacy Python. That's awesome, right? Yeah, that's awesome. And I

00:07:04 think that Django, when it used to default to Python 2.7, I think that was part of what was

00:07:10 keeping people behind. Yeah. Even previous to this, I actually don't know the timing on when this

00:07:15 happened. It was a little while ago, but they switched the default instructions from their

00:07:21 tutorials or getting started tutorials from saying use Python 2 to saying use Python 3. And that made like

00:07:26 a significant statistical differences in just the consumption of Python 3 libraries on PyPI just from

00:07:35 the documentation switch, which was pretty powerful. Let's talk about some of the, there's a few other

00:07:40 switches. Heroku switched their default to 3.6 recently. Yeah, that's awesome. It was like 2.7.13

00:07:46 or something. And so now if you go to Heroku and say, give me a Python app, you get Python 3 unless

00:07:51 you say no, no, I mean legacy Python, excuse me. NumPy has laid out their plans for dropping Python 2.

00:07:57 Looks like you've got till 2020. Yeah, the NumPy folks are not moving super quick, but the fact that

00:08:02 they say we are dropping Python 2 support should put it on the radar of everybody in the data science

00:08:08 world, like same thing, start moving, right? I think their motivation is very similar to the Django

00:08:14 folks in that they've had extra work and extra burden. It's harder for people to come and

00:08:21 contribute to the project because they have to contribute two versions sometimes, a Python 2

00:08:25 and a Python 3 version of everything. They're like, why? Why do we have all this code? So they're like,

00:08:31 not only do we think it's time to move, but we think we will have a better chance of adding new

00:08:35 features and getting new contributors if we drop this Python 2 thing. So that's pretty cool.

00:08:40 This was laid out at the last 2017 PyCon was a talk with Instagram switching to Python 3 and how they did it

00:08:48 on one branch. And that was amazing. That was insane, right? But you're right. So I think that was a great talk and that did show to everybody else. Man, if these guys can do it with a very complex code structure, you can too.

00:09:01 My biggest takeaway from that was, oh my gosh, they did that on the main branch.

00:09:06 They made that change without branching.

00:09:10 They got it working in production and everything, which is pretty awesome.

00:09:12 And the whole way in which they did that was cool.

00:09:15 But my main takeaway was, whoa, if they can do it, pretty much anyone can.

00:09:20 There may be a few companies, like let's say Bank of America.

00:09:23 They've got an enormous Python 2 code base.

00:09:26 But unless you're at that scale, this is sort of a case study in how you could make this happen for you.

00:09:32 What's interesting is we started the year with still talking about trying to get people to move on to Python 3.

00:09:38 And at the end of the year, we're not really talking about that so much anymore.

00:09:41 We're talking about some of the new exciting projects that are Python 3 only, like API Star and all the type int libraries and stuff going on.

00:09:52 That's really cool.

00:09:53 API Star is by Tom Christie, same guy that did Django REST framework.

00:09:56 Things like I want to re-envision a REST framework, but with Python 3 features.

00:09:59 Really interesting use cases of things that are only available in Python 3.

00:10:05 And then we have, you said, like we've got PyAnnotate, mypy, and MonkeyType, which are all around this type hinting, type annotation thing.

00:10:16 And it's available only in Python 3.

00:10:18 I started the year not thinking type hints were a good idea, but I think they are now.

00:10:23 Everybody else has convinced me.

00:10:25 I try to use them judiciously, but I do really like them.

00:10:28 I think on this section, on this topic, our first one, this move to Python 3, we should leave people with the Python 3 death clock.

00:10:34 Yes.

00:10:34 Or the Python 2 death clock.

00:10:35 What, PythonClock.org?

00:10:38 Yeah, PythonClock.org.

00:10:40 And so we have about two years, three months, and 14 days until Python 2 drops, even security fixes.

00:10:46 All right.

00:10:47 And so if you have a manager or your team's like, I don't know if we should really do this switch.

00:10:54 We should just stick with Python 2.

00:10:55 We already all know it.

00:10:56 Like put this up on a big screen somewhere and just let it count down.

00:10:59 It's a little scary now.

00:11:00 I think in about two years it'll be real scary.

00:11:02 A similar timer shows up on some of the Python libraries, the documentation, like requests has that at the top, I think.

00:11:09 Yeah, that's awesome.

00:11:10 All right.

00:11:11 So let's move on.

00:11:12 Speaking of requests, you'll find requests on PyPI, right?

00:11:16 Yeah, along with a whole bunch of other things.

00:11:18 A whole bunch of other things.

00:11:19 What if you misspell requests?

00:11:21 That would have been a problem for a while.

00:11:23 Yeah.

00:11:23 Yeah, absolutely.

00:11:24 So one of the things that happened this year was that hackers subverted PyPI and they got 10 malicious libraries installed.

00:11:33 And the malicious code is not in the library itself.

00:11:35 They literally took the open source code and just put it into their library.

00:11:38 But when you pip install things, it has the setup.py that runs to configure everything.

00:11:44 That can do anything.

00:11:45 And so they put malicious code in there.

00:11:47 It was a weird thing.

00:11:49 It was almost, it was kind of bizarre.

00:11:51 What surprised me is that they had it running so that the actual package, the real code was still running.

00:11:58 It was just the setup was all messed up.

00:12:00 That's right.

00:12:01 So you would not be able to determine that you had installed one of these virus packages by it not working.

00:12:08 Because it was literally the same code.

00:12:10 Like you imported it ran.

00:12:11 It just happened to be really, really bad.

00:12:13 So the way they did this was by typo squatting, basically.

00:12:17 If you type requests but you misspelled it somehow, right?

00:12:21 They might create a package that is this virus injected version by copying requests and uploading it to PyPI under misspellings of these various things.

00:12:32 Yeah.

00:12:32 It's just wacky.

00:12:35 But the community kind of got around this and got it dealt with pretty quickly, which was pretty nice.

00:12:41 The couple things they had, the new pip won't let you do misspellings of some of the common packages.

00:12:47 You're not allowed to create standard library names, right?

00:12:49 Like they used URL lib or something like that.

00:12:53 Like that was not actually a package, but you would reasonably import it.

00:12:56 So you, you know, they could trick you into pip installing it.

00:12:59 Anything that's been seen has been taken down.

00:13:02 All of these malicious libraries are gone now.

00:13:05 And then, well, hopefully.

00:13:07 And then somebody went around and squatted on a whole bunch of names to make sure that it wasn't taken by somebody else.

00:13:14 Yeah.

00:13:14 So they're like, all right, we're going to just put a message or some sort of import or install warning here and just say like, no, you can't, you can't have these.

00:13:22 There's also some, some utility that would generate variations or misspellings of your package.

00:13:28 So you could squat on your own if you run a popular package as well, which is, which is pretty nice.

00:13:33 So I don't know.

00:13:35 On one hand, this is really disturbing.

00:13:37 On the other, if you look at how many times those things were downloaded, they're in the, like the tens or hundreds, not millions.

00:13:43 So that's one thing.

00:13:45 One of the good things about this, I think, that came out is, I mean, some people's first reaction might be, why didn't the team that runs PyPI, why didn't they proactively fix this or know about it?

00:13:57 And it highlighted the fact that all these people are volunteers.

00:14:01 And maybe we need to do something about that.

00:14:04 Well, yeah.

00:14:04 And PyPI itself is utterly critical for making the Python ecosystem work, right?

00:14:10 Anytime you set up a new machine, you set up a new project, you do an automated build, there's probably some sort of pip install -r requirements.txt process that happens, right?

00:14:20 And that flows through PyPI.

00:14:22 The amount of data that flows through there is super incredible.

00:14:25 And it turns out that there's just a handful of people, as in one or two, who work on this at all.

00:14:31 And like you said, they're volunteers.

00:14:33 So one of the big pieces of news is that Mozilla came along to fix this, right?

00:14:37 Right.

00:14:38 So the next thing we were going to talk about was the huge grant, the huge, in open source terms, $170,000 grant from Mozilla to help with the sustainability of PyPI, which is just awesome.

00:14:55 Yeah, that is really, really great.

00:14:56 I'm so glad to hear that they're doing this.

00:14:59 It's, on one hand, it's not a huge amount of money, but it really does put the foundation in place.

00:15:05 A lot of this is going towards moving over to warehouse, I think.

00:15:09 So that'll be good.

00:15:11 I think that'll help with a lot of open, a lot more people being able to contribute to the maintenance and update.

00:15:18 That's really interesting.

00:15:19 One of the problems with PyPI, the website, is that it's super old and crusty.

00:15:25 It's not like Shiny Flask.

00:15:27 It's not cool new Django 2.0.

00:15:30 It's like hand-rolled, custom, couple of files, thousands of lines, funky code.

00:15:38 And it's great that it works, but it really needs to be modernized.

00:15:43 And so one of the things that this includes is moving over to what you already mentioned, warehouse.

00:15:47 Warehouse is the new implementation.

00:15:50 And that's what you'll find at PyPI.org, not the PyPI.python.org slash PyPI.

00:15:55 Why that's there twice, who knows.

00:15:57 But the new one, and that's actually written in Pyramid.

00:16:01 It's a well-factored code with unit tests.

00:16:04 I think that move is a great move.

00:16:06 And I'm excited to put the old version behind us as soon as we can.

00:16:10 It still works great.

00:16:11 But I understand when people complain about having to maintain some legacy code that's crusty.

00:16:16 Yeah, and the problem was people would want to come and submit a feature for it.

00:16:20 And they would look at it and go, actually, no, this is a complete mess.

00:16:24 I can't work on this.

00:16:25 I'm out of here.

00:16:25 And so we have this sort of dual problem.

00:16:30 One, that there's people who are working on this critical thing only in this volunteer mode, more or less.

00:16:37 And then there are people who want to contribute to it, but its current state repels them, technically speaking.

00:16:44 So it's like a double negative, right?

00:16:46 For some of this funding to try to convert over, then maybe we can get swarms of open source people to help out.

00:16:53 Yeah, that'd be awesome.

00:16:54 So I'm looking forward to that little pre-release, pre-production warning at PyPI.org to go away.

00:17:01 Thanks for Mozilla helping on that.

00:17:03 And just related really, really quickly, you talked about major open source projects getting funding.

00:17:08 NumPy got a whopping grant for $645,000 to improve it over the next two years.

00:17:16 That's awesome open source support right there.

00:17:19 That's a lot of money, but that's a drop in the bucket for the people that are really leaning on data science a lot.

00:17:26 Yeah, it definitely drives a lot.

00:17:27 What I would just like to see is Django get that.

00:17:29 Pyramid get that.

00:17:30 Request get that.

00:17:32 You know, other, like so many of these popular open source packages that are these third-party packages are so critical.

00:17:40 So many companies making billions of dollars on it.

00:17:43 They could throw in a little bit.

00:17:44 A little bit of support, right?

00:17:45 It does seem interesting that, I mean, requests is used, for instance, as an example.

00:17:51 There's so many like that, though, that are used by so many people that, and they still have, you still have to have day jobs.

00:17:57 That's right.

00:17:57 All right.

00:17:58 So let's move on to something slightly political.

00:18:02 But I don't want to make this overly politicized.

00:18:05 But I think there is something we really should touch on a little bit here, and that is I can see positive sides of the whole Democratic side of the U.S. government, the Republican arguments some of the times.

00:18:19 But this anti-fact, anti-science, anti-climate science bent of the current administration, it's real danger to like a lot of what we really need to focus on.

00:18:30 I mean, climate change, in my opinion, is the biggest challenge we are facing currently as humans, period.

00:18:35 And it's been in danger, right?

00:18:39 It doesn't even matter what side of the fence you're on.

00:18:42 Taking data down is like data on climate change should be, it's just data.

00:18:47 It's not something we should argue about.

00:18:49 Right.

00:18:49 Facts should be facts, period.

00:18:51 You can argue about the interpretation, but facts are facts.

00:18:55 And they're really important for us to make the right decisions.

00:18:59 And so one of the huge challenges is there was a suspicion that when Donald Trump was going to become president, that many of these government-controlled, super important data sources were going to disappear, right?

00:19:13 Like NOAA, the Oceanic Institute, EPA, National Renewable Energy Laboratory, all these different places, right?

00:19:20 Theoretically, some of this data could be vanished, right?

00:19:24 I don't know what the current state is, though, of some of that data, but some of it is at the very least harder to find.

00:19:29 Yeah.

00:19:30 And you hear about things like there being forbidden words at the EPA, like you can't use the word climate change, for example.

00:19:37 How scary is that?

00:19:38 So there were these data activists who decided we're going to save this, right?

00:19:45 Yeah.

00:19:45 So they went off and it started right at what?

00:19:49 Right at January 20th, the inauguration, started copying as much data as possible and storing them in European servers.

00:19:57 That's a pretty, I mean, it's a huge effort, but that's a pretty cool thing.

00:20:02 Yeah, it is.

00:20:03 So there were 60 scientists and programmers who gathered at the Department of Information Studies in UCLA.

00:20:10 There was a bunch more in Toronto, Philadelphia, Chicago, all over the world.

00:20:13 And I'm sure requests and beautiful soup and a lot of that was in full force going around just sucking all of this data off these websites.

00:20:22 And you might say like, okay, these people are paranoid, whatever, right?

00:20:25 But in fact, right at noon, the day Trump was sworn in, a lot of the climate change pages on whitehouse.gov just disappeared, right?

00:20:34 So those were grabbed just in time, I think.

00:20:37 That's just weird to take stuff down right away.

00:20:39 Quite an interesting data hacktivist sort of story.

00:20:43 I mean, they weren't actually hacking things, but they were definitely out there using code and probably a lot of Python to try to rescue the data, which is quite interesting.

00:20:49 There are definitely probably people using Python, but also one of the things that I'm glad we highlighted the story is that there is not a, you can't separate your interaction with the governments and the world and the fact that you're a programmer.

00:21:06 And in this story, we see that programmers are able to save things that politicians might want to get rid of.

00:21:13 So it's good.

00:21:14 It was really, really heartened to see this.

00:21:16 Quite an interesting story.

00:21:19 This portion of Talk Python To Me is brought to you by Linode.

00:21:22 Are you looking for bulletproof hosting that's fast, simple, and incredibly affordable?

00:21:26 Look past that bookstore and check out Linode at talkpython.fm/Linode, L-I-N-O-D-E.

00:21:32 Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:21:36 They have 10 data centers across the globe, so no matter where you are, there's a data center near you.

00:21:41 Whether you want to run your Python web app, host a private Git server, or a file server, you'll get native SSDs on all machines, a newly upgraded 200 gigabit network, and 24-7 friendly support, even on holidays, and a seven-day money-back guarantee.

00:21:55 Want a dedicated server for free for the next four months?

00:21:58 Use the coupon code Python17 at talkpython.fm/Linode.

00:22:04 All right, so another thing that I feel like was really significant this year was the whole async and await, asyncio thing in Python.

00:22:12 We saw a lot of new web frameworks come in in 2017, or at least we heard about them.

00:22:17 I don't know how many of them are production ready, but they're definitely on the way, which is pretty cool.

00:22:20 One of the challenges for any of these web frameworks to be async enabled, and maybe it's worth mentioning why that might be good, right?

00:22:30 Especially because you have the gill, right?

00:22:34 It's hard to add parallelism to your Python code in simple ways.

00:22:40 But usually what do web servers do?

00:22:42 They call other web services, microservice-type things, or external services, like payment gateways.

00:22:47 They talk to databases, and then they do a little bit of stuff.

00:22:51 Maybe they talk to the file system, and then they get back to you.

00:22:53 But a lot of it is this kind of orchestration bit, really.

00:22:56 And all of those can be pushed into the asyncio loop, right?

00:23:03 If you use, like, Postgres, there's an async version for Postgres.

00:23:06 Async library for consuming this.

00:23:08 You can await, like, a query, which is really awesome.

00:23:10 But if your web framework doesn't support it, like Flask doesn't support it, Pyramid doesn't support it, Django doesn't support it, you can't use that.

00:23:18 Like, it's useless, right?

00:23:19 You cannot use that in your website.

00:23:21 So you really need a framework that will, all the way down through it, allow you to sort of release these awaitable coroutines.

00:23:30 I'm probably talking through my hat on this one, since you're more of the web developer.

00:23:34 But we did see three interesting ones come along, and probably more.

00:23:38 Like, I'm not giving it, I guess I should probably throw aiohttp in there as well.

00:23:42 But the three that come to mind for me are SANIC, which is a new web framework entirely built on alternate implementation.

00:23:51 I think uv loop is what SANIC's based on.

00:23:54 So you can go and write code against your web framework and use all of this async and await stuff.

00:24:00 There's Jepronto, which is really interesting.

00:24:04 And Jepronto, I think, caused a lot of a stir because they originally published an announcement on Medium.

00:24:13 And they have, like, a really pretty impressive graph right on their GitHub page saying, we're getting millions of requests per second on a single server.

00:24:22 They show it next to Go and Node.

00:24:26 And it's like, I don't know, 20 times faster?

00:24:28 I mean, it's a lot, lot faster than the other things.

00:24:32 And so on one hand, they caused a big stir about people going, well, you're doing your benchmarking wrong for this reason or that reason or whatever.

00:24:40 So Jepronto is pretty interesting.

00:24:42 The thing that's unfortunate is it's kind of stalled out in the last 10 months.

00:24:48 It came on really strong.

00:24:49 And there's just not a lot happening in the commit history.

00:24:52 Interesting.

00:24:52 Yeah, but Sanic, on the other hand, it's going pretty strong.

00:24:54 And a new one that we recently covered on Python Bytes is called Quart.

00:24:58 And Quart takes the Flask API and makes it async and awaitable.

00:25:04 So you could take the code that you know and make it work, basically, in this async world that you want.

00:25:12 This one does seem to be fairly active as well.

00:25:15 I'm going to have the guy who's created it on this show on Talk Python in a few weeks as well.

00:25:21 So we'll dig more into it.

00:25:22 But basically, it's Python asyncio web microframework with exactly the same API as Flask.

00:25:28 But you can say your views can be async def method name, not just def method name, right?

00:25:34 So it's really, really cool.

00:25:35 Yeah.

00:25:36 Hats off to him for coming up with just taking the Flask API and reusing that.

00:25:42 Why come up with something new?

00:25:44 That's right.

00:25:44 That's smart.

00:25:45 I also saw Armin Roeneker talking about this kind of stuff, who's behind Flask, talking about some of these ideas.

00:25:52 And stuff around Flask on Twitter.

00:25:54 I don't know if there's anything officially happening directly in Flask, but I wouldn't be surprised.

00:25:58 That'd be a good thing to throw money at.

00:26:00 Hey, everybody throwing money at projects.

00:26:02 Yeah, exactly.

00:26:04 Let's make our, instead of switching to Go or something, let's just make our web frameworks actually do what Python can do.

00:26:10 One of the things that is at the core of all of our Python programs is CPython.

00:26:15 And if people want to contribute to it, how and where that's happened has kind of been a journey, right?

00:26:21 I didn't realize the history.

00:26:22 I knew that in 2017 it moved over to GitHub, but it's moved around a little bit.

00:26:28 It has.

00:26:29 It was somewhere where I actually don't even know really where it was pre-2006.

00:26:33 In 2006 it was on Subversion.

00:26:35 Then they moved it to Mercurial.

00:26:37 Back then Mercurial, Git, they were kind of vying for action.

00:26:42 But, and you know, Mercurial makes a lot of sense.

00:26:44 It's written in Python.

00:26:45 So Python should be hosted on Python.

00:26:48 It's kind of meta.

00:26:48 But in 2017 it really is the modern workflow for social programming and open sources on GitHub these days.

00:26:57 So the big news is Python, CPython code moved to GitHub.

00:27:01 I'm not going to make a judgment call as to whether that's a, whether all of the activity on GitHub is a good thing or a bad thing.

00:27:07 It just is.

00:27:08 So you can't ignore that most open source developers are using GitHub.

00:27:12 So it makes sense to put that there too.

00:27:14 Absolutely.

00:27:15 It's like saying, I want to go and do stuff on social networks, but I don't want to be on Facebook.

00:27:18 It's like, well, that's just the way a lot of it is.

00:27:22 I'm sorry.

00:27:23 Yeah.

00:27:23 So this was actually done by, sort of motivated by Brett Cannon a little bit.

00:27:28 And he said one of his goals was he would like the ability to review an external contribution from submission to commit all on a tablet while at a beach on Wi-Fi.

00:27:39 And he can do that with GitHub, but he couldn't do that with Mercurial and the other things.

00:27:42 So that's pretty cool.

00:27:44 It was also motivated by people submitting patches, but the whole flow of reviewing it, there's not the pull request style and stuff there.

00:27:52 So it's, it just wasn't really, the request would set idle for like a year.

00:27:57 You'd make some change to CPython and people wouldn't even like paid attention.

00:28:01 Right.

00:28:01 Oh, that's terrible.

00:28:02 That'll take away your motivation for sure.

00:28:03 Right.

00:28:04 Yeah.

00:28:04 And whatever we can do to get Brett on a beach more often.

00:28:07 Yeah, that's right.

00:28:09 Well, so well done.

00:28:12 Well done.

00:28:13 Everyone involved in that.

00:28:14 Now, the next one I want to talk about has to do with Python becoming a very, very popular language.

00:28:20 And this is not a, an achievement per se of 2017, but this is where certainly some hit some milestones and the world has started to pay a lot of attention to it.

00:28:30 The growth of Python, I mean, it's been growing fast for a long time, but having it overtake some of the other languages in certain surveys happened this year, which is great.

00:28:40 One of the places I love to get this data from is Stack Overflow and they have their yearly developer survey, but they also have on staff data scientists that just analyze stuff and write reports about it.

00:28:53 Right.

00:28:53 Which is pretty awesome.

00:28:53 So one was called the incredible growth of Python.

00:28:57 And they said June, 2017 was the first month that Python was the most visited tag on Stack Overflow.

00:29:07 Not JavaScript, not Ruby, not C#, not Swift, Python, which I think is pretty awesome.

00:29:14 Yeah, it's great.

00:29:15 Hopefully that's not because it's the most confusing language.

00:29:18 What I thought was really interesting is you can go read the article, the incredible growth of Python on Stack Overflow.

00:29:23 And if you look at the comments and comments, at least at the time when it came out, were turned on.

00:29:29 So people were commenting at the bottom.

00:29:30 It read a lot like, you know, people were sort of disappointed that their favorite language didn't make it.

00:29:37 Well, Ruby's used so much in Silicon Valley.

00:29:40 Why is Ruby not here?

00:29:41 Or I don't, you know, I think Python must be so complicated.

00:29:44 That's why it's so much, you know, it's got so many visits, right?

00:29:48 You should just use C++, something simple that doesn't need explaining.

00:29:51 You know, and you're like, wait a minute.

00:29:53 No, there's no way that C++ doesn't need more explaining than Python and its language syntax.

00:29:58 And, you know, there's a lot of things that could contribute to this.

00:30:02 I think partly PyPI might actually be part of it.

00:30:04 Like, if you want to talk about requests, that's got a Python tag.

00:30:07 You want to talk about Django, that's got a Python tag.

00:30:09 You want to talk about SQL CanE, that's got a Python tag, right?

00:30:12 Like, all these different things around Python that people use and love also contribute to this factor.

00:30:18 Yeah, and we're seeing so many different groups like use Python that weren't before.

00:30:24 There's a lot of people not using R anymore for data science and machine learning, switching to Python.

00:30:29 We've got technical people, universities, a lot of people that used to use visual programming in the science and engineering fields are using free Python tools now.

00:30:40 Yeah, absolutely.

00:30:41 It's just great.

00:30:42 Yeah, and so there's two graphs I want to call people's attention to.

00:30:45 One is projections of future traffic for major programming languages.

00:30:49 So Python, JavaScript, Java, C#, PHP, and C++.

00:30:52 And you see the graph and almost all of those major languages are either flat or slightly downward trending, whereas Python is like hockey stick.

00:31:01 And then the projection has it just blowing away from all these.

00:31:06 It's really incredible.

00:31:07 The other one has to do with Python compared to smaller growing technologies.

00:31:13 So things like Rust and Go, there's so much hype around Go and how this is going to change the world and everyone should be there.

00:31:21 If you compare the amount of interest in Python versus interest in Go, it's like 20 to 1.

00:31:27 It's incredible.

00:31:28 And then not just that, but the rate of the graph of interest in Python is actually growing faster than in Go or Rust or any of these things.

00:31:37 So I feel like people probably hear, oh, you should switch to Go.

00:31:40 You should go write that in Rust.

00:31:41 You should use R or whatever, right?

00:31:43 But in reality, these are not the same thing.

00:31:47 I don't think things switch too quickly either.

00:31:49 One of the things that came up, I think it was in this article, is the growth in high-income countries in Python is faster than a lot of other countries.

00:32:00 The non-high-income countries, I don't even know what that means, but tend to follow by a year or two.

00:32:06 So we should see even more growth worldwide in Python in the upcoming years.

00:32:12 I think it's awesome.

00:32:13 You know, on one hand, I feel like people probably say, oh, well, programming is not a popularity contest, right?

00:32:20 Like, so what if it's more people use this versus that, right?

00:32:24 A lot of people use PHP and PHP is crappy.

00:32:26 Well, on one hand, PHP has a downward graph, right?

00:32:31 So one of my rules of thumb is when you look at the trajectory of a technology that you want to bet your career on, that graph should have a positive derivative.

00:32:42 It should be pointing upwards, preferably increasingly so.

00:32:45 A second derivative is being positive, also good.

00:32:48 But you should not necessarily bet your career on downward graphs.

00:32:54 And also, if you think about, like, what hang-ups people have when they start Python, it's not things like, like, see, you got to come up with memory management and all that stuff that's really hard to deal with.

00:33:05 There's a lot of hard to deal with stuff in C++.

00:33:07 And I spend a lot of my time in C++, so I kind of love it too.

00:33:12 But the big hang-up for Python is just the spaces thing.

00:33:15 And that's easy to get over.

00:33:17 And then you're on to making great things.

00:33:20 Yeah, you're definitely on to making great things.

00:33:21 You know, as soon as you pip install, like, a couple amazing things, you're like, oh, wait.

00:33:25 Spaces, they're cool.

00:33:26 I can deal with this.

00:33:27 And then after a week, you're like, wait.

00:33:28 Why do I have to put curly braces?

00:33:30 What are all these symbols?

00:33:31 Like, this is so annoying.

00:33:32 Yeah.

00:33:33 Yeah, pretty funny.

00:33:33 Pretty funny.

00:33:34 So I think this is definitely interesting.

00:33:36 People out there thinking about where they should focus for their career.

00:33:41 Definitely have a look at this article and draw your own conclusions.

00:33:43 But I think it's really a generally positive thing for everybody involved in Python in a lot of different ways.

00:33:50 Yeah, especially us.

00:33:51 Yes, especially us.

00:33:52 People love to listen to us talk about Python news.

00:33:56 Awesome.

00:33:56 So one of the things I feel like has been the trend really since the internet, before the web, since the internet came out, early William Gibson days has been like this real fascination with technology.

00:34:10 Technology is, it's almost assumed that it's going to make lives better.

00:34:15 We can connect more.

00:34:16 And look, if we connect on Facebook more, we can share our views and they might be different.

00:34:21 And then we'll come to a greater understanding.

00:34:24 There'll be less fighting and less disagreement and whatnot.

00:34:27 That's actually seemed to play out for quite a while.

00:34:31 But I'm starting to feel like there's a trend saying maybe not so much anymore.

00:34:35 Yeah, I guess I'm not quite sure where you're going with this.

00:34:38 Well, there's a couple of really interesting articles and sort of trends coming out around how technology is not necessarily, by default, a positive thing for a human society, for society.

00:34:51 Right?

00:34:52 So there's a couple of articles.

00:34:54 One is called Tech People Think They Aren't, Are They Good Guys?

00:34:57 They Aren't.

00:34:57 That was in Wired.

00:34:59 It came out recently.

00:35:00 There was one in the MIT Technology Review called The Dark Secret at the Heart of AI.

00:35:06 And then the last one is The Real Threat of Artificial Intelligence on The New York Times.

00:35:12 That's a pretty big turn from where we have been over the last 20 years.

00:35:17 That's true.

00:35:17 But I think in new technologies and programming, people don't really understand what it is.

00:35:22 And so they're often scared of the unknown.

00:35:25 Yeah, that's for sure.

00:35:26 I think, you know, the tech people, they think they're the good guys.

00:35:29 They aren't.

00:35:30 This article in Wired, they talked a lot about how people in Silicon Valley,

00:35:35 they really focus on Silicon Valley, but also in tech in general.

00:35:38 They need to be aware that they're losing this view where, well, these startups and these

00:35:45 tech startups, they're good by default unless they prove otherwise.

00:35:48 Right?

00:35:49 They kind of have to prove that they're doing the right thing.

00:35:51 And so, you know, we used to talk about how big data was going to do a lot of good things

00:35:55 for people.

00:35:55 Also the dangers of it.

00:35:57 But Netflix recently had some kind of social media post that was like, hey, we just noticed

00:36:04 that there are 10 people that watched this, I don't know, some Christmas show or something.

00:36:09 We just noticed there's these 10 people that watched the same Christmas show for 18 days

00:36:14 in a row.

00:36:14 How sad or something like that.

00:36:17 I mean, like, that's crazy, right?

00:36:18 No.

00:36:19 There's a lot of like wondering like, okay, well, why would you watch the same show 18

00:36:22 days in a row?

00:36:23 Maybe it's just on in like some store and they always want to show this Christmas show.

00:36:27 Maybe you fell asleep 17 times.

00:36:30 You just want to finish it.

00:36:31 That's like, this time I'm going to finish it.

00:36:32 I'm getting a coffee.

00:36:34 I'm going to watch it.

00:36:34 I can't even remember what the show was, but it wasn't something amazing.

00:36:37 I feel like there's this interesting trend of people being more skeptical.

00:36:42 You know, we have Apple and the encryption more sort of thing going on with Congress and

00:36:48 the FBI at the beginning of the year.

00:36:50 There's a lot of stuff there.

00:36:51 Being cautious is a good thing.

00:36:53 Like things, people adding things like Google Home and Amazon's, whatever Amazon's thing is

00:37:01 called.

00:37:01 Their Echoes and various things.

00:37:03 Yeah, into their house and in other forms of presence in your life that didn't used

00:37:09 to be there.

00:37:10 We do kind of have to trust these companies to not do anything evil with all of that information.

00:37:16 And yeah, maybe it's good to be a little skeptical and have some people checking out, making sure

00:37:21 that there's nothing weird going on.

00:37:23 That's for sure.

00:37:23 And I do feel like the default behavior or default assumption was, well, it's Google.

00:37:29 They're probably fine with my email or it's Amazon.

00:37:32 What are they going to do?

00:37:33 You know, I'm just buying a book from them and so on.

00:37:36 And it's kind of not so much that way.

00:37:38 I have an Amazon Dot, which is one of the Alexa type things.

00:37:43 And it's sitting here.

00:37:46 I made it quiet so it wouldn't disrupt the podcast.

00:37:48 And the way you do that is you press this mute button on it.

00:37:52 Okay.

00:37:53 But the color that it changes to when it's not listening is really interesting.

00:37:58 It changes to a bright red ring.

00:38:00 Like there's something wrong and dangerous about it when it's not listening.

00:38:04 Oh, interesting.

00:38:05 You would think it would turn, I don't know, green or white or like everything's safe.

00:38:11 Tell, you know, say your secrets, whatever you want.

00:38:14 Right.

00:38:14 We're not listening.

00:38:14 But no, it turns bright red when it's not listening.

00:38:16 Interesting.

00:38:17 Yeah.

00:38:17 Yeah.

00:38:18 Pretty.

00:38:18 What does it look like when it is listening?

00:38:19 It's normally dark.

00:38:21 But then if it's listening to you, it gets like a blue ring that kind of whirls around.

00:38:24 It's a pretty cool device.

00:38:25 I really like it.

00:38:26 But I only have it in my office, not, you know, the rest of the house.

00:38:29 So there's two other things around this that I also wanted to talk about.

00:38:33 And those were, I guess they're the same subject, but from two perspectives.

00:38:38 And that's sort of this artificial intelligence machine learning.

00:38:41 And so let me set the stage for you.

00:38:43 Like last year, there was this experimental vehicle just created by researchers at NVIDIA,

00:38:49 the graphics people.

00:38:51 And it was an autonomous car, but it wasn't like what Google or Tesla or GM is doing, where

00:38:59 there's some sort of conditional programming for it.

00:39:03 They didn't provide it a single instruction on how to do what it did.

00:39:08 Instead, what they did is they taught it how to drive by have it watch and observe what humans

00:39:13 do to cars while humans drive.

00:39:14 That's pretty interesting.

00:39:16 It's pretty interesting.

00:39:17 But then it leads, you know, like this type of thing is not just done with cars, although

00:39:21 it's pretty illustrative with cars.

00:39:23 It's also done with mortgages, with cancer diagnoses, various other things, police activity.

00:39:29 And so if this car crashes in unexpected ways, if it's going down the street and then it just

00:39:36 swerves over and crashes into a tree, how do you know why it did that?

00:39:40 You can't ask it.

00:39:41 It's just, well, it learned pretty well.

00:39:44 And most of the time it drives right.

00:39:45 And sometimes it doesn't.

00:39:46 And so there's some really interesting ramifications of like living with machines that are integral

00:39:52 to our lives that can't be separated from human society once we depend upon it.

00:39:56 Like at one point we didn't need the internet, but imagine if you took it away now, right?

00:40:00 The economies would crumble.

00:40:02 So there's actually a proposal for a law in the EU saying that you need the ability to

00:40:10 have the computer tell you why it made a decision about you, right?

00:40:15 So if you are denied for mortgage, a mortgage loan, why?

00:40:18 Right?

00:40:19 Things like that.

00:40:20 And so these full on deep learning AIs that just learned through observation, they can't

00:40:27 tell you why they did a thing, right?

00:40:28 They're not like looking at themselves knowing why.

00:40:32 Possibly not.

00:40:33 But I think that systems can be made such that they are interrogatable.

00:40:37 Yeah, I hope so.

00:40:37 But I think it's a really interesting trend that we're seeing more and more of this AI

00:40:41 stuff appear, you know, up and down our interactions where we know less and less about it.

00:40:47 A couple of interesting things about that is now I don't have the reference for it, but

00:40:52 there was some talk about how soon should we have driverless cars on the streets?

00:40:59 And one view is that we should make sure that they're very, very safe.

00:41:04 And another view is that they just need to be safer than people.

00:41:07 Yes.

00:41:08 If you lower the death rate, even if there still is a non-zero death rate, it's still

00:41:13 better than what we have now.

00:41:14 And that's interesting.

00:41:15 I think that's a super interesting trade-off.

00:41:17 And from a high-level ethics perspective, I think you say as soon as it is safer than

00:41:23 human drivers, if by deploying this technology, we save lives, it seems like the right thing

00:41:29 to do.

00:41:29 But, you know, if one of the behaviors of that life-saving AI is, well, there was an

00:41:35 oncoming car, so I swerved and drove off a cliff to avoid hitting it and killed my own

00:41:41 driver instead of I saw there were five people in the oncoming car, for example.

00:41:44 So I saved four lives, right?

00:41:46 Or maybe even more.

00:41:48 By driving this one person off, the news coverage and the human shock of being in control or subject

00:41:56 to one of these types of systems, it's going to be really interesting to see how that plays

00:41:59 out.

00:42:00 But still, from an ethics perspective, I think as soon as it's ready, to be safer.

00:42:03 But I remember a lot of these questions, like the five versus one, these came up with, I remember

00:42:08 these in philosophy in college, and I never really thought it would actually apply to technology

00:42:16 right now.

00:42:17 That's a really interesting point, because neither did I.

00:42:19 I remember like, well, if there's a burning building, and there's a baby inside, and there's

00:42:24 these people over here, and you could only save either the baby or the three older people,

00:42:30 like, which is the right, you know, these weird trade offs, you're like, well, nobody's

00:42:33 ever going to do that, right?

00:42:34 Like, nobody's going to make those conscious decisions to sit there and go, at best, it's

00:42:38 like you made a split reaction in an emergency, and you did what you did, right?

00:42:42 But when you're building these systems, you're like encoding it, basically.

00:42:45 Yeah, it's like, no, this isn't a rhetorical question.

00:42:48 We really need to know which one should we pick.

00:42:50 That's going to take some serious adjustments, I think.

00:42:54 Yeah.

00:42:54 Since I don't know a lot about machine learning and stuff, when I had Catherine Jarmel on test

00:43:00 and code, I asked her this, is it even possible to build systems that are interrogatable?

00:43:04 And her answer went over my head, of course, but she was confident that if those laws are

00:43:10 in place, that it's going to be possible.

00:43:13 So that's a good thing.

00:43:14 Yeah, that's interesting.

00:43:15 I think, you know, if you design for it, you can probably at least get some kind of, you

00:43:20 probably can design for it.

00:43:22 But, you know, we'll probably have to do that as an explicit requirement, right?

00:43:25 Yeah.

00:43:26 Because otherwise, you just make it work, and you're happy, right?

00:43:29 Yeah.

00:43:29 And the interesting thing about that is, I think, will benefit otherwise, too.

00:43:33 The reasons why artificial intelligence system came up with a conclusion might surprise us,

00:43:39 and it might teach us more about how we can better make decisions even without the AI.

00:43:45 When Google beat the world champion in Go, the top Go players started to study the non-intuitive

00:43:53 solutions that the AI was, you know, applying to the game to beat this guy, and they started

00:44:00 becoming better and learning new techniques.

00:44:01 It's pretty interesting.

00:44:02 And that'll hopefully happen in, like, detecting problems in CAT scans and things like that.

00:44:08 Right.

00:44:09 Reliability in airplane motors so they don't crash and stuff.

00:44:12 Awesome.

00:44:12 So I definitely think it's both very positive and kind of, you know, we're going to go back

00:44:17 to philosophy class as a society as well.

00:44:20 Yeah.

00:44:21 Pretty interesting.

00:44:23 This portion of Talk Python to Me has been brought to you by Rollbar.

00:44:26 One of the frustrating things about being a developer is dealing with errors.

00:44:30 Ugh.

00:44:30 Relying on users to report errors, digging through log files, trying to debug issues, or getting

00:44:36 millions of alerts just flooding your inbox and ruining your day.

00:44:39 With Rollbar's full stack error monitoring, you get the context, insight, and control you

00:44:43 need to find and fix bugs faster.

00:44:46 Adding Rollbar to your Python app is as easy as pip install Rollbar.

00:44:49 You can start tracking production errors and deployments in eight minutes or less.

00:44:54 Are you considering self-hosting tools for security or compliance reasons?

00:44:58 Then you should really check out Rollbar's compliant SaaS option.

00:45:01 Get advanced security features and meet compliance without the hassle of self-hosting, including

00:45:07 HIPAA, ISO 27001, Privacy Shield, and more.

00:45:11 They'd love to give you a demo.

00:45:12 Give Rollbar a try today.

00:45:14 Go to talkpython.fm/rollbar and check them out.

00:45:18 So another big piece of news that we got was that Python is starting to appear inside of

00:45:24 some major applications.

00:45:25 Yeah.

00:45:26 Surprising ones, I would say, actually.

00:45:28 They definitely surprised me.

00:45:29 Yeah.

00:45:30 We may have jumped the gun on the Excel and Python, but hopefully that'll happen.

00:45:34 Yeah.

00:45:34 If we can encourage Microsoft to do that.

00:45:37 I think it's definitely one of the highest voted things, but it's not a thing yet.

00:45:42 So one thing, let's start with something that is out right now in 2017.

00:45:47 And that is SQL Server, Microsoft's database server, which is ubiquitously installed inside

00:45:54 these large corporations, right?

00:45:56 It's like inside these large Microsoft Windows enterprises, like SQL Server is just the de facto

00:46:02 database.

00:46:02 And what's interesting is now Python 3.5 ships inside SQL Server so you can do in-process machine

00:46:11 learning against your data.

00:46:13 Oh, that's great.

00:46:14 Yeah.

00:46:14 Cool.

00:46:15 Yeah.

00:46:15 So if you've got 100 gigabytes of data in your database, instead of trying to suck that across

00:46:19 the network or move it around, you just write a stored procedure that is in Python and you

00:46:26 can use all the Anaconda libraries, TensorFlow, all that kind of stuff like in process, which

00:46:32 is really going to be pretty awesome.

00:46:34 Yeah, that's great.

00:46:35 So that's a concrete thing that has happened.

00:46:38 A thing that may happen, has got a lot of news in the last couple of weeks is Excel.

00:46:43 I'm not sure who this came from, but I think it was part of the, what is it?

00:46:46 People vote on new features or something?

00:46:48 On UserVoice, they have a, like, what new features do you want in Excel?

00:46:52 And this is, I think, the most popular one.

00:46:53 And then they sent out like kind of a survey to find out why people want it.

00:46:58 We pushed it on Python Bytes to try to get more people to answer this survey.

00:47:02 I personally don't care a whole lot about SQL Server or Excel, but especially with Excel,

00:47:07 if currently what you use to program Excel to automate it is this thing called VBA, which

00:47:13 is like a crap, it's even for Visual Basic, it's like a crappy cut down version of that,

00:47:17 right?

00:47:18 It's like a bad programming language.

00:47:19 And so there's this push to get Python to be the new macro programming language of Python,

00:47:27 of Excel inside Excel, which would be really awesome because within companies, like Excel

00:47:35 is probably the biggest database, in quotes, that companies have.

00:47:39 And so many people work inside of Excel and are sort of Excel experts.

00:47:45 And if we could get all of those people somewhat interested in Python, that would be just positive

00:47:51 across the board, I think.

00:47:52 Yeah, definitely.

00:47:52 It'd be great.

00:47:53 Yep.

00:47:54 So everyone out there, go upload this thing on User Voice.

00:47:57 We'll put the link in the show notes.

00:47:58 It might increase the use of Excel, which might not be a good thing.

00:48:01 Yeah, that's true.

00:48:02 Maybe it would be negative.

00:48:03 Try to keep that down.

00:48:04 All right.

00:48:05 So the last one for the year has to do with Google, right?

00:48:09 Google implements Python on Go.

00:48:12 Is that what we have here?

00:48:14 That is what we have.

00:48:15 So the people at YouTube created this thing called Grumpy, which I don't know about naming

00:48:21 open source projects, but if you want people to love it and to be attracted to it, call it

00:48:25 Grumpy might not be the best name.

00:48:27 But instead of having Python implemented in C, as it is in CPython, it's that underlying

00:48:35 implementation written in Go with some of that.

00:48:38 So Go's sort of claim to fame is like asynchronous from the scratch, like parallel from the very

00:48:45 core of it.

00:48:46 And so if you want to do the parallel asynch.io type stuff we were talking about, then having

00:48:51 Go as the foundation makes that incredibly easy and powerful.

00:48:55 Do you have any idea where this stage is?

00:48:58 Is it still something that's going along?

00:49:00 Are people contributing to it?

00:49:01 That's a pretty interesting question.

00:49:03 I'm not entirely sure what's going on with it.

00:49:06 I actually think it's a great name.

00:49:08 It's because people grumpy about having to use Go can use Python instead.

00:49:11 It's not super active.

00:49:13 The last check-in was November 21st.

00:49:16 So that's, and you know, that's about a month ago, right?

00:49:21 But this also could just be, you know, how much is Google pushing this out?

00:49:26 I think what this was, was really a research project for what would it look like if we implemented

00:49:32 the foundations of Python instead of with C, we'll do it with Go.

00:49:37 And the reason is, this is from the YouTube team.

00:49:40 And they process, well, YouTube is running the front-end parts on Python 2.7, I believe.

00:49:47 And they're processing over a million requests per second.

00:49:52 So they have, let's say, unique parallels and requirements.

00:49:57 Yeah.

00:49:58 Right?

00:49:58 And so they're like, okay, well, what can we do if we wrote this in Go?

00:50:01 And it's pretty interesting.

00:50:02 But it's, like you sort of pointed out, it's stalled out a little bit in the last four or five

00:50:07 months.

00:50:08 So I'm not sure if it's going to go somewhere, if it's like being worked on internally, and

00:50:12 then they're going to release it, or I don't know.

00:50:14 Maybe somebody from YouTube can contact us and tell us what's going on.

00:50:17 I did have them on the podcast.

00:50:20 So I had a guy named Dylan Trotter on the podcast who was a major player in this at YouTube and

00:50:27 talked about it.

00:50:28 But that was back on episode 95.

00:50:30 So the news is not super fresh.

00:50:32 One of the things you brought up here in the notes is that we often think about Python as

00:50:38 just CPython, but like this Grumpy is another version that's running on Go.

00:50:43 But there's a whole bunch of others that...

00:50:45 There's a crazy bunch of others for people who don't know.

00:50:47 Yeah.

00:50:47 So you have another article called How Big is the Python Family?

00:50:50 Yeah.

00:50:51 This is from the Czech.io guys who have like the gamification of Python learning.

00:50:56 And they wrote this article called How Big is the Python Family?

00:50:59 And so we already have CPython, Jython, Iron Python, or one variation of Python on .NET.

00:51:07 Then there's Python 4.NET.

00:51:08 There's Cython.

00:51:09 There's PyPy.

00:51:10 There's MicroPython.

00:51:11 And now we have Grumpy.

00:51:13 And there's also some others with Java that I can't remember the name of, but it wasn't

00:51:17 in the article.

00:51:17 I think that's cool that people are tackling it for different things.

00:51:20 I'm really excited to see MicroPython keep growing.

00:51:23 Yeah.

00:51:24 I'm actually really excited about MicroPython.

00:51:26 So those of you who don't know, MicroPython runs on microcontrollers, so like $5 chips.

00:51:31 And basically your Python program is the running operating system on there.

00:51:36 And you can just do whatever you want.

00:51:38 You can do insane things like you can actually take a Lambda expression and hook it directly

00:51:43 to a hardware interrupt on the microcontroller.

00:51:45 Yeah, that's just awesome.

00:51:46 I mean, it's such a cool little project.

00:51:48 Nice.

00:51:50 All right.

00:51:50 Well, that's our year in review.

00:51:52 I know we missed a bunch of things.

00:51:53 And if you feel like something's important, go to talkpython.fm/145 and put an entry

00:52:00 in the show notes.

00:52:00 But before we kind of round out what we want to talk about, there's a couple of honorable

00:52:05 mentions left there, Brian.

00:52:07 I think it was notable that you, both the podcast Python Bytes and Talk Python, hit every week

00:52:13 of the year in 2017, which is pretty awesome.

00:52:16 Thank you.

00:52:17 Yeah, that's actually quite awesome.

00:52:19 And thanks for your help with that, because I went and tooled around Europe and the Middle

00:52:24 East for like four weeks.

00:52:26 And you and some other folks kept it rolling.

00:52:28 So awesome.

00:52:28 Oh, that's right.

00:52:29 We had some guest hosts.

00:52:30 That was fun.

00:52:31 That's right.

00:52:31 And Test and Code had seven episodes.

00:52:34 I'm going to try to get an eighth out before the end of the year.

00:52:36 That's not as impressive, but still going.

00:52:40 No, but you did 52 weeks of Python Bytes as well.

00:52:43 And that was awesome.

00:52:44 Those were very fun.

00:52:44 And the ones that you did have on Test and Code were really good.

00:52:49 The Chaos Monkey and some of the other ones, really, really nice.

00:52:52 All right.

00:52:53 Thanks.

00:52:53 One of the most, like the most recent one with testing in machine learning and data science

00:53:00 with Catherine was really popular, which is great.

00:53:02 That's cool.

00:53:03 Yeah, she does a great job.

00:53:04 The other thing, we didn't bring them up because they weren't huge stories to talk about.

00:53:08 But I think there's a trend to more and more people embracing virtual environments with

00:53:13 things like PipEnv coming along.

00:53:16 And I think that's a good thing.

00:53:18 People should be using more of those.

00:53:20 So yay.

00:53:21 Yeah, yeah, absolutely.

00:53:22 We have PipEnv.

00:53:23 We got Tox.

00:53:24 And there's some other ones as well.

00:53:27 I think Fade was one that would do interesting things.

00:53:30 There's a lot of libraries that are really trying to make virtual environments just seamless.

00:53:35 It's really nice.

00:53:35 I've been using PyCharm a lot.

00:53:37 And it has picked up its game with using local virtual environments, too.

00:53:43 And that's a good thing.

00:53:44 I love that.

00:53:44 Create a new project that says, all right, new virtual environment and a well-known folder

00:53:50 within this project.

00:53:51 Unless you want to say otherwise.

00:53:52 This is what we're doing.

00:53:53 I really think that's the right move.

00:53:54 Yeah, it's great.

00:53:55 Awesome.

00:53:55 Another big thing, which you hinted at at the beginning, is you shipped your book, which

00:53:59 was quite the long labor of work.

00:54:02 But you have your Python testing with pytest out.

00:54:05 And that's been going strong, right?

00:54:06 It's been phenomenal.

00:54:08 And people have been sending me pictures on Twitter of them and their book all over the

00:54:13 world.

00:54:13 I've got one picture from France and one all over, a couple in Africa.

00:54:19 It's pretty cool to see all over the world.

00:54:21 It's great.

00:54:22 Yeah, it's been great to sort of sit on the sidelines and watch the reception of your

00:54:25 book.

00:54:26 So it's on Pragmatic.

00:54:27 You can get it there in paperback or digital.

00:54:30 And you can also get it on Amazon, right?

00:54:32 Yeah, definitely.

00:54:32 Awesome.

00:54:33 Okay.

00:54:34 So it's time to ask you the two questions that are always at the end of the show.

00:54:38 All right.

00:54:39 All right.

00:54:39 So what is your...

00:54:41 If you're going to write some Python codes, let's say it that way, what editor do you open

00:54:44 up?

00:54:44 Now it's PyCharm.

00:54:46 When you interviewed me a couple of years ago, it was sublime, but I have fully switched

00:54:51 to PyCharm.

00:54:52 Interesting.

00:54:52 I mean, that's my favorite as well.

00:54:54 Everyone knows.

00:54:54 I go on and on about it.

00:54:56 But tell me why.

00:54:56 Like, what was the motivation?

00:54:58 The integration with pytest, of course, is pretty darn good.

00:55:01 And they're working with me to try to get it even more integrated, which I'm pretty impressed

00:55:06 with the development team to be responsive to some of my requests.

00:55:09 Yeah, that's awesome.

00:55:10 They are very responsive.

00:55:11 The other thing is I write a lot of Markdown, and the Markdown plugins make writing Markdown

00:55:18 in PyCharm just very, very nice.

00:55:21 So it's got a side-by-side viewer, and it's cool.

00:55:24 I like it.

00:55:25 Yeah, nice.

00:55:25 All right.

00:55:26 And notable PyPI package?

00:55:28 Well, pytest.

00:55:29 Awesome.

00:55:30 But I want to add that when I'm using pytest, lately, I'm always adding the pytest HTML plugin

00:55:38 from Mozilla to make reports.

00:55:41 It's pretty cool.

00:55:41 Okay, nice.

00:55:42 So you get better, like, HTML-friendly, pretty output, not just text logs.

00:55:47 And it pops up, like, some JavaScript widgets so that you can filter and sort and all sorts

00:55:54 of great things.

00:55:54 Yeah, we started the show talking about, with our first item, talking about the Python 3

00:55:59 and the type annotation stuff with PyAnnotate, mypy, MonkeyTypes, and all that.

00:56:04 pytest has some PyAnnotate integrations as well, right?

00:56:07 Oh, right.

00:56:08 Yeah, I forgot about that.

00:56:09 That's pretty cool.

00:56:10 Yeah, I can't remember.

00:56:10 Was that PyAnnotate-pytest or pytest-PyAnnotate or pytestAnnotate?

00:56:15 I don't know.

00:56:16 I could put the link in the show notes, but yeah, it's pretty cool.

00:56:18 All right.

00:56:19 All right.

00:56:19 All right.

00:56:19 Well, I think it's been quite the year in the Python space for 2017.

00:56:25 So any final thoughts on what you've observed?

00:56:29 I just want to thank everybody for their support of both this podcast and all the Python podcasts

00:56:35 out there.

00:56:35 And I want to mention to people that if you like this sort of banter of a couple of people

00:56:41 talking about what's going on in the Python world, you should also check out Python Bytes

00:56:45 if you haven't already.

00:56:46 I also want to say thanks.

00:56:47 That's a great point.

00:56:48 People out there who listen and give us feedback and really enjoy what we're doing, that's why

00:56:53 we can do this, right?

00:56:54 So thank you, everyone.

00:56:55 And definitely visit pythonbytes.fm and subscribe over there because we do this kind of stuff

00:57:01 more or less weekly, but in shorter form over on Python Bytes.

00:57:05 The number of people that showed up to say hi to us at PyCon, we had a booth there.

00:57:10 That was an incredible turnout.

00:57:12 A lot of people, a lot of listeners coming up and talking with us.

00:57:15 It was great.

00:57:15 Yeah.

00:57:15 That was really, really awesome.

00:57:17 And we're going to do it this year, right?

00:57:18 In Cleveland.

00:57:18 Yeah, definitely.

00:57:19 Brian and I have a booth lined up along with some other folks.

00:57:22 And so be sure to stop by in 2018.

00:57:25 And get your PyCon ticket because it's going to sell out very soon.

00:57:29 Definitely.

00:57:29 I got mine.

00:57:30 I got mine as well.

00:57:31 All right, Brian.

00:57:32 Thank you so much for getting together and sharing this look back at 2017 with me.

00:57:36 Oh, yeah.

00:57:37 Thank you.

00:57:37 You bet.

00:57:37 Bye.

00:57:38 This has been another episode of Talk Python to Me.

00:57:41 Today's guest was Brian Okken.

00:57:44 And this episode has been brought to you by Linode and Rollbar.

00:57:47 Linode is bulletproof hosting for whatever you're building with Python.

00:57:51 Get your four months free at talkpython.fm/linode.

00:57:56 Just use the code python17.

00:57:58 Rollbar takes the pain out of errors.

00:58:02 They give you the context and insight you need to quickly locate and fix errors that

00:58:06 might have gone unnoticed until your users complain, of course.

00:58:09 As Talk Python to Me listeners, track a ridiculous number of errors for free at

00:58:14 rollbar.com slash talkpythontome.

00:58:16 Are you or a colleague trying to learn Python?

00:58:19 Have you tried books and videos that just left you bored by covering topics point by point?

00:58:23 Well, check out my online course Python Jumpstart by building 10 apps at talkpython.fm/course

00:58:29 to experience a more engaging way to learn Python.

00:58:32 And if you're looking for something a little more advanced, try my Write Pythonic code course

00:58:37 at talkpython.fm/pythonic.

00:58:40 Be sure to subscribe to the show.

00:58:42 Open your favorite podcatcher and search for Python.

00:58:44 We should be right at the top.

00:58:46 You can also find the iTunes feed at /itunes, Google Play feed at /play, and

00:58:51 direct RSS feed at /rss on talkpython.fm.

00:58:55 This is your host, Michael Kennedy.

00:58:57 Thanks so much for listening.

00:58:58 I really appreciate it.

00:58:59 Now, get out there and write some Python code.

00:59:01 I'll see you next time.

00:59:21 Thank you.

