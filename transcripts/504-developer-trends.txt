00:00:00 What trends and technologies should you be paying attention to today?

00:00:03 Are there hot new database servers you should check out?

00:00:06 Or will that just be a flash in the pan?

00:00:08 I love these forward-looking episodes, and this one is super fun.

00:00:12 I've put together an amazing panel.

00:00:14 Gina Häußge, Ines Montani, Richard Campbell, and Calvin Hendryx-Parker.

00:00:18 We dive into the recent Stack Overflow Developer Survey results as a sounding board for our thoughts on rising and falling trends in Python in the broader developer space.

00:00:28 This is Talk Python To Me, episode 504, recorded April 9th, 2025.

00:00:34 Are you ready for your host, please?

00:00:37 You're listening to Michael Kennedy on Talk Python To Me.

00:00:40 Live from Portland, Oregon, and this segment was made with Python.

00:00:47 Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:50 This is your host, Michael Kennedy.

00:00:52 Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython, both accounts over at Fostadon.org, and keep up with the show and listen to over nine years of episodes at talkpython.fm.

00:01:05 If you want to be part of our live episodes, you can find the live streams over on YouTube.

00:01:10 Subscribe to our YouTube channel over at talkpython.fm/youtube and get notified about upcoming shows.

00:01:16 This episode is brought to you by NordLayer.

00:01:18 NordLayer is a toggle-ready network security platform built for modern businesses.

00:01:23 It combines VPN, access control, and threat protection in one easy-to-use platform.

00:01:27 Visit talkpython.fm/nordlayer and remember to use the code talkpython dash 10.

00:01:34 And it's brought to you by Auth0.

00:01:37 Auth0 is an easy to implement adaptable authentication and authorization platform.

00:01:42 Think easy user logins, social sign-on, multi-factor authentication, and robust role-based access control.

00:01:49 With over 30 SDKs and quick starts, Auth0 scales with your product at every stage.

00:01:54 Get 25,000 monthly active users for free at talkpython.fm/auth0.

00:02:00 Hello, everyone.

00:02:02 Ines, Gina, Richard, and Calvin.

00:02:04 Welcome back to the show, all of you.

00:02:06 It's great to have you all here.

00:02:07 Yay!

00:02:08 Yay!

00:02:09 Hi.

00:02:10 Yeah, really, really good to have you all here.

00:02:11 It's been fun to have you all on separately for different shows.

00:02:14 Although, Gina, you've definitely been on a few panel shows before recently on, I think the last movie was our Mastodon one, right?

00:02:20 We talked about that.

00:02:21 That was a lot of fun.

00:02:22 Today, we're going to talk about developer trends in a general sense.

00:02:28 And I invited you all because I, like all of you, really appreciate having you here.

00:02:33 And thanks for taking the time to be here.

00:02:34 But you all also kind of work in little bits of different spaces of technology and interests and so on.

00:02:40 So I think we'll get a really nice, diverse perspective of experiences and so on.

00:02:45 I think the AI section is going to be especially interesting, as we'll see.

00:02:50 Where are we going with that? That's always interesting. So what we're going to do is we're going to use the 2024 Stack Overflow Developer Survey results. It's a little bit old, but it's less than a year old. I think it's close enough to use as a skeleton to kind of make that conversation happen. So it's going to be a ton of fun to just have a wide-ranging exploration of how people are learning technology, using technology, which ones they're using, and so on. Before that, So let's just do a quick round of introductions and we'll go around the Brady Bunch squares in order, I suppose.

00:03:23 So Ines, you're on top left. Welcome. Great to see you.

00:03:26 Yeah, nice to be back. Yeah, I'm Ines. I'm the co-founder of Explosion.

00:03:32 We're probably most well known for spaCy, which is an open source library for natural language processing in Python.

00:03:39 So everything to do with text, AI, I do a lot in the open source space and also helping developers build their own AI models in-house, taking back control, that sort of stuff.

00:03:52 So, yeah, very curious.

00:03:54 Like it was quite hard not to look at the results beforehand, but I did it.

00:04:00 Thank you.

00:04:00 Yeah.

00:04:01 And we recently talked about open source and LLMs and AI and stuff.

00:04:06 and will open source or the big cloud companies dominate that.

00:04:09 That was a lot of fun to talk about.

00:04:10 Yeah, the AI revolution won't be monopolized.

00:04:13 Yes, exactly. That was great.

00:04:15 Gina, hello, welcome.

00:04:16 Hi, yeah, my name is Gina.

00:04:19 I'm also known as Fuzel and my claim to fame is probably Octoprint, which is the snappy web interface for your 3D printer, which is actually written in Python, which in turn is probably why I am here.

00:04:32 Yeah, and I also happen to be a full-time maintainer working on that project and have been doing that now for well over 12 years.

00:04:40 So, yeah, it's a weird life, but it works somehow.

00:04:44 It's got an amazing life.

00:04:45 I mean, I'm sure a lot of people are seeing that as the dream, right?

00:04:48 You created an open source project and it's successful enough that you can do that full-time.

00:04:53 That's a dream.

00:04:55 The people who are now listening to this instead of watching that will not see it when I point to my head, though, and show all the gray hair that is up on there.

00:05:03 That wasn't there when I started this.

00:05:05 So just pointing that out.

00:05:08 There are downsides to this, possibly.

00:05:10 Just correlation.

00:05:11 Not necessarily the same, right?

00:05:13 It's bad things out.

00:05:14 I'm sure.

00:05:16 Yeah, I know how that goes.

00:05:18 Hey, Richard.

00:05:19 Good to see you.

00:05:19 Good to see you, too, friend.

00:05:21 Richard Campbell, I make the podcast.NET Rocks, Run As Radio, and now part of Windows Weekly as well.

00:05:26 I'm supposed to be a half-free, you know,.NET person, but as GitHub loves to remind me, write entirely too much Python.

00:05:34 And YAML.

00:05:35 Why do I write so much YAML?

00:05:36 I don't know.

00:05:37 Anyway.

00:05:38 What kind of live choices have you made?

00:05:39 And then C#.

00:05:40 I don't.

00:05:40 You know what?

00:05:41 I munge a lot of data these days.

00:05:43 I don't know if you know this, but Python's pretty good at that.

00:05:46 Yeah.

00:05:46 You know, my Jupyter Notebooks open most of the time because there's always some chunk of data I need to rip through.

00:05:52 There's some surprisingly good tools.

00:05:54 I was just talking with Reuben Lerner about Panda stuff.

00:05:57 And what you can do in a couple of lines of code is ridiculous.

00:06:01 You know, MapReduce used to be this huge task where I harnessed multiple machines to try and, you know, actually crush a large amount of data in a reasonable length of time.

00:06:09 A contemporary PC is really good at it.

00:06:13 Stuff has changed.

00:06:14 This is it's only getting easier.

00:06:16 And, you know, use the tools du jour and you'll find you'll get good results in less time.

00:06:20 Absolutely.

00:06:21 Yeah.

00:06:21 You have a bunch of great podcasts.

00:06:23 People.

00:06:23 Thank you.

00:06:25 And whenever I get to talk to you, it's usually one of the geek outs, right?

00:06:28 Like that's where we end up though.

00:06:30 Yeah, yeah.

00:06:30 We've done some great geek outs.

00:06:32 Some life in the solar system and energy talks and so on.

00:06:36 Yeah.

00:06:36 The nuclear power topic these days has been really huge because everybody's talking about it.

00:06:41 And it turns out I did a bunch of stuff on that backbone before it was cool.

00:06:44 And so people keep asking me to do more.

00:06:45 Yeah, that's very, very neat.

00:06:47 Calvin.

00:06:48 Hello, hello.

00:06:48 Good to see you.

00:06:49 Good to see you too, Michael.

00:06:50 I'm Calvin Hendryx-Parker.

00:06:51 I'm CTO and co-founder of Six Feet Up, where we are a Python and AI for good organization.

00:06:57 My lifelong Pythonista, I chose Python back in the year 2000 and decided I never wanted to look back.

00:07:03 And so I made a company around building cool Python stuff for other folks.

00:07:07 So I guess that's kind of my claim to fame.

00:07:09 This year will be my 21st PyCon.

00:07:11 So my PyCon attendance can now drink.

00:07:13 We always have the best parties together.

00:07:16 And some of the highlights are all the get togethers that we do.

00:07:19 Yeah, getting the people together.

00:07:20 That's what's important.

00:07:21 Yeah, you should all come to Europe.

00:07:23 PyCon DE is later this month.

00:07:25 I'm very excited.

00:07:26 It's going to be.

00:07:27 Oh, okay.

00:07:28 I don't know if I never.

00:07:28 Oh, and your person as well.

00:07:29 But I think the PyCons, and PyCon Italy is also very good.

00:07:34 PyData, Amsterdam.

00:07:35 I don't want to single out too many individual conferences, but you should

00:07:38 totally come to Italy.

00:07:39 No, you've got favorites.

00:07:39 I hear it in your voice.

00:07:41 Yeah, that's awesome.

00:07:42 Sounds like events you need to bring your stunt liver to, though.

00:07:48 Yeah, Calvin, I definitely think you definitely have been hosting some of the great parties, the after parties and stuff at PyCon.

00:07:56 Well, I love the community.

00:07:58 That's probably why I'm here is because I'm definitely a community first type person.

00:08:01 Yeah, beautiful.

00:08:02 All right, well, with that, let's just go ahead and jump right in to the topics here.

00:08:08 So like I said, what we're going to do is we're going to go through the Stack Overflow survey and just kind of use it as something to riff off of.

00:08:17 So the first portion of Stack Overflow, of course, I'll put the link in the show notes.

00:08:20 You can check it out and follow along.

00:08:22 It had 65,000 people participate.

00:08:25 That's a lot of people.

00:08:26 I don't feel like Stack Overflow almost could have gotten more, but that's still statistically pretty significant.

00:08:32 And Stack Overflow, I think it's pretty broad across all the technologies these days.

00:08:39 Although I think Python is still the number one language on Stack Overflow.

00:08:44 If we were to check out Stack Overflow.

00:08:45 Maybe jail.

00:08:46 Yeah, Stack Overflow Trends.

00:08:49 We look at...

00:08:50 I mean, some might argue that's because Python is the number one language for developers in general.

00:08:55 Yeah, yeah, yeah.

00:08:57 Well, I'm just saying that I think the results will be pretty significant, include a significant amount of Python feedback, not just overall, for better and worse.

00:09:09 This portion of Talk Python To Me is brought to you by NordLayer.

00:09:13 NordLayer is a toggle-ready network security platform for modern businesses.

00:09:17 It combines VPN, access control, and threat protection in one easy-to-use platform.

00:09:23 There's no hardware or complex setup, just secure connections and full control in less than 10 minutes.

00:09:29 It's easy to start with quick deployment, step-by-step onboarding, and 24-7 support.

00:09:34 It's easy to combine.

00:09:36 It works with existing setups in all major platforms.

00:09:39 And it's easy to scale.

00:09:41 add users, features, and servers in just a few clicks, single sign-on and provisioning included.

00:09:47 NordLayer provides zero-trust network access-based solutions.

00:09:51 It adds threat protection to keep malware, ransomware, and phishing from reaching your endpoints.

00:09:57 It increases your threat intelligence to spot threats before they escalate, and it helps businesses achieve compliance.

00:10:04 So if you're responsible for the security of your software or data science team, you should definitely give NordLayer a look.

00:10:10 As Talk Python listeners, you'll get an exclusive offer up to 22% off NordLayer's yearly plans, plus an additional 10% off the top with our coupon.

00:10:20 Just use the code Talk Python-10.

00:10:23 That's Talk Python-10, all lowercase.

00:10:26 Try NordLayer risk-free with their 14-day money-back guarantee.

00:10:31 Visit talkpython.fm/nordlayer to get started.

00:10:34 That's talkpython.fm/nordlayer.

00:10:36 The link is in your podcast player's show notes.

00:10:38 Thank you to NordLayer for supporting Talk Python To Me.

00:10:42 Yeah, so right now, if you look at it, we've got Python at the number one, and we've got JS as number two.

00:10:48 Yeah, but boy, oh boy, there's a really precipitous drop in 2023, and we'll come back to that.

00:10:53 That's going to be super interesting.

00:10:54 But that's section three of our conversation right there.

00:10:59 So the first thing that comes up here is education.

00:11:03 How much education have you had as a person who works here?

00:11:07 And then I think maybe it's probably most relevant to focus in on the professional developers.

00:11:11 They break out all respondents versus students versus professionals and so on.

00:11:16 So let's maybe let's do a quick around here.

00:11:19 You know, how much programming did you all learn in school versus how much did you teach yourself?

00:11:24 None.

00:11:25 In school.

00:11:26 Okay.

00:11:27 Yeah, tell us about it.

00:11:27 I mean, I didn't go into computer science.

00:11:31 What did you study?

00:11:33 Communication science, media science and linguistics.

00:11:36 Because, you know, when I was like trying to decide what to do for university, it was weird because I didn't really feel like a programmer.

00:11:42 I was always programming on the side.

00:11:44 But like, you know, I thought of programmers and it was like boys from the computer club.

00:11:48 There was no one really, you know, also being a young woman, like there was not really any role model or like idea like, hey, I'm actually a programmer too.

00:11:57 So, yeah.

00:11:58 Absolutely.

00:11:59 Yeah, we talked about how your linguistics experience brought you into NLP stuff, which got you into programming, right?

00:12:04 I mean, I did a tiny bit.

00:12:05 I did a tiny bit of pearl in university, but I'm not really counting that.

00:12:09 And also, everything we were doing there, I kind of already knew from, I don't

00:12:13 know, just acting around myself.

00:12:14 Sure.

00:12:15 Who else?

00:12:15 Who else wants to share?

00:12:17 I think everyone majored in here.

00:12:19 I was computer graphics technology.

00:12:22 I took an engineering course in C, an engineering course in Fortran, but I wouldn't call that a computer science background.

00:12:29 No.

00:12:30 Interesting, but not a computer science background.

00:12:31 Dina?

00:12:32 I actually have what is now a master's degree equivalent in computer science.

00:12:38 For me, I also grew up programming and figuring that that was the most amazing thing ever.

00:12:45 And then I learned that it was an actual job.

00:12:47 And that was when I knew what I wanted to become.

00:12:50 But to this day, I say I didn't learn much programming or anything like that.

00:12:56 At university, I learned tolerance towards frustration and stress management.

00:13:01 but all of the programming stuff is actually mostly self-taught I would say

00:13:06 because also I mean yeah we did some assembler stuff and some really weird old stuff at university also some Java which later became my main job for but before I before I went into the whole maintainer with Python situation but yeah I think it's it's it's more been a case of lifelong self-teaching and and trying to stay up with things that are happening and learning new languages here and there and such.

00:13:34 Yeah. It's not like engineering or something where it's kind of stable.

00:13:38 You know, bridges are still bridges.

00:13:40 Stuff is changing fast. You've got to stay on top of it.

00:13:42 That's really interesting.

00:13:43 Yeah. What's your background, actually?

00:13:45 Oh, Michael. Sorry.

00:13:46 I am pretty close to where you are, Ines, as well.

00:13:54 I was in school for a long time. I love school.

00:13:57 Well, I studied math and chemistry, mostly math.

00:14:00 And I only did just enough programming to do the research projects I was on, which was very, very little until the very end.

00:14:08 And then I'm like, you know what?

00:14:09 I kind of like this better.

00:14:11 What am I going to do to keep doing this?

00:14:13 Because it seems like the job opportunities are way better and it's much more interesting.

00:14:18 So, yeah, I'm definitely on the self-taught train.

00:14:21 Yeah, that's me.

00:14:21 But it's really my father.

00:14:23 He was an electrical engineer and designed electronic cash registers.

00:14:26 So I started programming cash registers when I was eight.

00:14:30 The original point of sale, amazing.

00:14:32 Yeah, from the very beginning.

00:14:33 And then when the TRS-80 Model 1 shipped in 1977, I was in the radio shack for the next year because that was the only thing I was interested in, a whole 4K of RAM.

00:14:45 Amazing.

00:14:46 Yeah.

00:14:46 So then my first part-time job after school was repairing TRS-80s for a company called HNS Microsystems.

00:14:55 I've never done anything else.

00:14:57 So by the time I graduated high school, I did my last two years of high school living on my own, making a living as a programmer.

00:15:03 So I didn't go to university.

00:15:05 I was too busy working.

00:15:06 Well, I think it paid off for you.

00:15:09 I think it turned out all right.

00:15:10 Yeah, it did okay.

00:15:12 But, you know, I have the advantage of being first, right?

00:15:17 Yeah, exactly.

00:15:17 I remember reading the specifications of the IBM BC before it was released and going, 640K of RAM?

00:15:24 Who's going to need that?

00:15:26 That's way more than you're ever going to need.

00:15:28 All right.

00:15:28 So what does Stack Overflow say?

00:15:29 It says that about 75% of the people have a bachelor's or a master's degree, but only a little under, where is that number again?

00:15:40 School.

00:15:40 A little under 50%, just under 50% of the people actually are using school to become software developers.

00:15:48 Then, you know, how we, so pretty much all of us here are in some way or other having to keep up with this technology and libraries and so on our own.

00:15:59 And so the next one asks, like, what online resources are you using?

00:16:04 So maybe we can go around real quick.

00:16:06 Where are you all spending your time?

00:16:07 I'll start first.

00:16:09 Probably YouTube for me with, you know, other blogs and other things thrown in.

00:16:14 But YouTube is a big portion where I, like, learn new things and keep up.

00:16:18 stuff i'm a reader you know like i it's the fastest mechanism for me i prefer to read my documentation is the pace that i can read it at and then test stuff out you know i like youtube it's just too slow yeah see i'm a slow reader because

00:16:35 i was also like the problem my problem with youtube is like there are so many people on youtube and they all speak really they speak too slowly and yes you can like make it faster and it's just but yeah i have a very similar feeling And it's, yeah, it makes me happy to see also under Stack Overflow stats, to see documentation be so significant and also to hear it come up again.

00:16:55 Because, you know, we've always put, like, I've always put so much work into our documentation.

00:17:00 And I've always been really passionate about documentation.

00:17:02 And sometimes I wonder, hey, do people actually read this?

00:17:06 How much does it really matter?

00:17:07 And so it's nice to see that it seems to matter.

00:17:09 Meaning what you don't see on this list is podcasts.

00:17:12 Because who would learn from a podcast?

00:17:13 Who would, oh my gosh.

00:17:15 no no no no no no no no no no no no they're auditory material at the bottom there you go

00:17:23 i used to down i used to not think youtube was important i was also in the same boat of like this is too slow why are people spending this time i feel like that's my disconnected my brain recreational learning it's on youtube but like my real like hardcore learning is probably more blogs blogs and docs yeah

00:17:41 when i when i want to learn some new language or something then i go with written things actually like books shocking i know but um uh but when it's like making skills like binding or whatnot then it's certainly youtube because then it helps to actually see people do that by hand it doesn't help me watch someone else code it helps me to read the documentation and understand how things fit together and click through some library things and such but yeah I don't know this trend towards everything needs to be a YouTube video that goes like 15 minutes and 10 of those are please sponsor me and such something I

00:18:23 don't understand but maybe I'm too old.

00:18:26 I'm surprised AI is so low on the list because that seems like that pair programming I'm going to do it together while some AI explains something to me is pretty effective I've seen my kids use that and I wonder if it was a time

00:18:38 that was a year ago Yeah, as soon as you're right.

00:18:42 Those two, you know, the ChatGPT revolution starts in 23.

00:18:45 Like, it's not in a lot of time.

00:18:48 And yeah, I'm now in the insider version of VS Code with that build with Claude.

00:18:54 And like, wow, that thing's a really great tutorial tool.

00:18:57 But that's only been in the past couple of months.

00:19:00 Wow.

00:19:01 Yeah.

00:19:02 Yeah, it's also, I'm guessing like AI here, they mean, you know, a chatbot type interface.

00:19:07 I mean, I know I keep complaining about this and it's maybe pedantic, but I'm like, AI already has this terminology problem.

00:19:14 And I feel like, why do you need to call it AI?

00:19:17 AI means so many things.

00:19:18 And it's like, you know, half of these things have AI in them.

00:19:22 And like, what do you mean?

00:19:23 Be more explicit.

00:19:24 Because I think it's actually, for so many things, including how we think about open source software regulation and so on, It's actually a huge issue that we do not distinguish between products like chatbot products and software components, for example, and call everything AI.

00:19:40 And I think ultimately the people that benefit from it most are big tech companies.

00:19:44 So I feel like we should stop doing that.

00:19:47 So I'm a bit mildly, I mean, mildly annoyed at Stack Overflow for just calling it AI.

00:19:54 Yeah, I can probably fix it.

00:19:55 Let me just right click inspect.

00:20:00 But in some ways it's become the new agile, right?

00:20:03 It's like it's a word so overloaded and it doesn't mean anything anymore.

00:20:07 Yeah.

00:20:07 Yeah.

00:20:07 We're using agile.

00:20:09 It just means we stop writing down the waterfall.

00:20:11 There you go.

00:20:12 Now, I know, Richard, you have an interesting take on a lot of this stuff.

00:20:16 Like things are AI until they weren't going to prove it.

00:20:20 Remember that AI is a marketing term for raising money, right?

00:20:23 Marvin Minsky coins it in the 1950s to get money out of the U.S. military, which, by the way, worked.

00:20:28 But inevitably, once a technology works, it gets a new name, right?

00:20:33 It becomes image recognition or large language models.

00:20:36 So as long as it's called AI, you know it doesn't work.

00:20:40 Still looking for its place in the world.

00:20:43 You'll get a new name.

00:20:45 All right.

00:20:45 So out on the Stack Overflow survey, technical documentation is the number one.

00:20:52 84% of people say that they do that.

00:20:55 Not surprisingly, number two is Stack Overflow, but it's a self-selecting group.

00:20:58 So there's that.

00:21:00 Tutorials, blogs, how-to videos.

00:21:01 I mean, I just want to thank you all.

00:21:03 Thank you, everyone, for making me feel weird and being the only one who said YouTube here.

00:21:07 Sorry.

00:21:08 No, I'm just teasing.

00:21:10 Seriously, for me, when I'm trying to learn, this mostly goes for like frameworks.

00:21:15 Like I want to learn UA framework or I don't know.

00:21:20 Seeing it built up as sort of a, as somebody's like, we're going to, let me talk you through or show you how I'd build this like sort of start to end.

00:21:28 That really sticks with me better than reading documentation.

00:21:32 And once I see that, then I'll go to the documentation and AI and like, okay, help me click the pieces together.

00:21:38 Anyway, that's my world.

00:21:39 It's proof you have lots of screen space, right?

00:21:41 That you have your coding window open in one spot.

00:21:43 Then you got the YouTube video up in the top right.

00:21:46 And then you've got the doc down the bottom right.

00:21:48 So you can work your way.

00:21:49 I mean, now that you say it, like, you know, it is not actually, it takes some of it back, what I said earlier.

00:21:54 Also, we did some videos.

00:21:55 I did some YouTube end-to-end tutorials, and they did quite well.

00:21:59 And I still have people to this day come up to me, ask me when I'm doing my next video, say that they've really enjoyed them.

00:22:05 So there's clearly, there is an audience for it.

00:22:08 Yeah, yeah, yeah.

00:22:09 Which reminds me, I should do another YouTube video.

00:22:11 I have, like, the script ready.

00:22:12 I just, I'm really bad at actually recording.

00:22:15 And I have a Pluralsight subscription that comes with, you know, one of the influencer packages.

00:22:19 So I tend to go there.

00:22:21 So it's not like a don't consume video.

00:22:23 It's just not YouTube.

00:22:25 Yeah, sure.

00:22:26 So during the pandemic, I had a couple of sessions where I actually just streamed myself while working on Octoprint and explaining my thought process.

00:22:34 And that is something that I felt was helping those people a lot who didn't have much development experience at all and were just trying to understand.

00:22:45 So here's a problem.

00:22:46 How would someone who has done this before approach this problem, reduce it into several parts and then approach every single part and the thought cycles that are involved and so on?

00:22:59 For something like that, I think a video is great.

00:23:01 But if it's something like technology, like how do I program a command line thingy in Go, for example, that is not something where I would watch a YouTube video for, but rather look up code snippets and then try it on my own.

00:23:16 So maybe that's also a thing because you said you want to be, you basically want to move through the process with the developer.

00:23:25 So maybe that is that kind of approach more where you are trying to wrap your head around how what is possible and how can I solve this specific problem versus going into a deep dive into the API or something like that and just figuring out things that way.

00:23:41 Yeah, I think so.

00:23:43 For me, I like to kind of learn.

00:23:44 I want to sort of a surface layer experience of it.

00:23:47 Then I'll want to go a little deeper, then a little deeper instead of trying to like, anyway.

00:23:53 This portion of Talk Python To Me is brought to you by Auth0.

00:23:56 Do you struggle with authentication?

00:23:58 Sure, you can start with usernames and passwords.

00:24:00 But what about single sign-on, social auth, integration with AI agents?

00:24:05 It can quickly become a major time sink.

00:24:08 And rarely is authentication your core business.

00:24:11 It's just table stakes that you got to get right before you can move on to building your actual product.

00:24:16 That's why you should consider Auth0.

00:24:19 Auth0 is an easy to implement adaptable authentication and authorization platform.

00:24:24 Think easy user logins, social sign-on, multi-factor authentication, and robust role-based access control.

00:24:31 With over 30 different SDKs and quick starts, Auth0 scales with your product at every stage.

00:24:38 Auth0 lets you implement secure authentication and authorization for your preferred deployment environment.

00:24:43 You can use all of your favorite tools and frameworks, whether it's Flask, Django, FastAPI, or something else, to manage user logins, roles, and permissions.

00:24:52 Leave authentication to Auth0 so that you can start focusing on the features your users will love.

00:24:58 Auth0's latest innovation, Auth4Gen AI, which is now available in developer preview.

00:25:03 secure your Agenic apps, and integrate with the Gen.AI ecosystem using features like user authentication for AI agents, token vault, async authorization, and FGA for RAG.

00:25:15 So if you're a Python developer or data scientist looking for an easy and powerful way to secure your applications, get started now with up to 25,000 monthly active users for free at talkpython.fm/auth0. That's talkpython.fm/auth0. The link is in your podcast player's show notes. Thank you to Auth0 for supporting the show. Let's talk experience. Now, I know everyone on this call, we're all pretty young, but we probably have at least five years of experience doing this stuff. No, I know. We've been

00:25:46 doing it for a while. Give or take.

00:25:48 Really quick.

00:25:49 Numbers of your programming, top to bottom, Ines, roughly? Oh, depends. How do you count? Like, really professionally and doing this job, it's like, it's over 10 years. I did, you know, start writing my first website 24 years ago.

00:26:06 But that's like, I don't know.

00:26:08 I would never say like, oh, I started programming when I was 11 and that's how much

00:26:12 experience I have.

00:26:13 Obviously, I'm really in this job and everything, like really doing what I do like a bit over 10 years.

00:26:19 Awesome.

00:26:21 First line of code.

00:26:22 Professionally.

00:26:23 Yeah, professionally would be 25-ish years ago.

00:26:28 In general, 35 -ish.

00:26:31 yeah like that so yeah awesome richard well yeah i mean i was when do you get paid right so i was being paid for code in my team so 40 years

00:26:41 yeah amazing yeah 27 years for me i was gonna say 27 for me as well i think thanks i feel

00:26:49 for these people who are in the one to four year like range this is a really i think it's a tough time for those folks yeah but also

00:26:56 there's a lot of people still joining the industry like the this what 25 to 30 percent constant ad going into the industry means we're always going to skew young effectively or

00:27:08 like early in in the um you know programming journey because you know i think actually speaking of trends like what we see i think in especially in ai or in like you know out the machine learning field like the most successful projects are those where people upskill and subject matter experts who are like maybe experts in finance, in some other area, pick up the tools because, you know, it's never been easier to learn programming and solve a problem.

00:27:35 And I think there we might have people actually quite established in their career, but only recently learned programming.

00:27:40 And I think that's an interesting trend.

00:27:42 And I think with everything and the way it's going in the field, I think we'll see a lot more of that.

00:27:48 Yeah, but is this survey biased that we've got more younger folks maybe replying than older folks on the list too?

00:27:55 What I mean, interesting is this big jump there from like we are starting at less than a year with 5.5% and then suddenly we spike up to one to four years with 27.3 and then the curve ebbs down again until we are at

00:28:09 0.1.

00:28:11 Less than one year is because they don't find Stack Overflow.

00:28:14 Exactly.

00:28:15 That is what I'm taking from that.

00:28:17 If you're in the one to four bracket, you are constantly on stack overflow.

00:28:22 And if you are earlier than that, then you are not yet, you haven't discovered this.

00:28:27 Certainly my experience consulting into teams is the majority of the developers on a given team are under 10 years of experience.

00:28:35 And they have a senior that's over 10 years.

00:28:37 I would say as well.

00:28:38 And just to give you another perspective.

00:28:40 So the people listening, the biggest category is one to four years, 27%, and then five to nine is another 25.

00:28:48 So over 50% in there.

00:28:50 But most importantly, it's the one to four years, I believe.

00:28:53 We need to keep that in mind.

00:28:54 Now, you could say Stack Overflow is skewing this because people are just hammering on Stack Overflow and trying to figure out what to do when they're brand new.

00:29:03 But the PSF JetBrains survey, which didn't have anything to do with a code help site like Stack Overflow, I think 40% were less than three years.

00:29:13 40% of the people doing Python have been doing it less, three years or less.

00:29:16 And so it's, I think this is a more broad trend, which is something we got to keep in mind when we're building libraries, building products, doing

00:29:24 tutorials and so on, is that a good chunk of your audience will be like, everyone knows what a virtual environment is.

00:29:31 Everyone knows what Async is.

00:29:32 Like, no, no, they don't.

00:29:34 They take back part of that, like feeling for those one to four year people is that they also didn't get to experience Python 2.

00:29:40 They only know the beauty that it's Python 3.

00:29:44 Their will has not been crushed. They have optimism in their lives.

00:29:48 Much less the migration, right?

00:29:50 Yeah.

00:29:53 Writing Python 2 and 3 compatible code.

00:29:58 Stop, stop. You're bringing back the nightmares and the headaches.

00:30:03 What were you saying about grey hair, Gina?

00:30:06 Python 2 to 3. At least At least half of that is from that.

00:30:11 Yeah, on the JavaScript side, now it's relatively hard to find folks that experience Angular 1.1 and the chaos that was moving to 2, right?

00:30:19 Like that's now passed.

00:30:21 So yeah, in a sense, new developers coming in, they get to benefit from the fact that they're getting into stabler tools with robust solutions.

00:30:30 There's a lot less experimentation, depending on where you're going.

00:30:33 I mean, there's nobody with 10 years experience with an LLM.

00:30:36 So, you know, everybody's a beginner there.

00:30:38 Yeah.

00:30:38 They'll still be able to experience some packaging grief somewhere along the line.

00:30:42 Yeah, yeah, yeah.

00:30:42 I mean, it depends on how you define LLM.

00:30:43 It doesn't matter how long you've been doing this, deployment sucks.

00:30:46 Yeah.

00:30:48 People call everything an LLM now.

00:30:50 So, you know, in theory, I can go around and claim I have 10 years experience in LLMs because, you know, relatively large language models.

00:30:58 Yeah.

00:30:58 You probably all have heard the joke, but I imagine many listeners haven't, that Sebastian from FastAPI.

00:31:05 Oh, yeah.

00:31:06 put out there. He said, I just saw a job posting.

00:31:09 He created FastAPI, right? And this is two years into it existing.

00:31:13 So I just saw a job posting asking for four years of experience with FastAPI.

00:31:17 He's like, I created it and I only have two years experience with it. I don't know who

00:31:20 this is for.

00:31:23 Hey, we all have 10 years of experience with AI.

00:31:26 Amazing. There you go.

00:31:30 Well, hey, if you're a 10x developer, you get 10 years of experience per year. I mean, come on. All right. Let's talk technologies. And I don't know how you all feel about this, this sort of like, what is the most popular programming language? And

00:31:44 again, focus on professional, but I feel there's a lot of things that are not comparable. And this one probably is the most you'll have like SQL versus C++. You're like, these,

00:31:54 I don't know if those are the same.

00:31:56 Yeah. CSS versus C++, like not the same thing. They're not. Anyway, that rant out of the way.

00:32:03 They qualified their heading with putting in their markup languages.

00:32:07 Ah, okay.

00:32:08 Okay.

00:32:08 But Python and Java and C++ are in there.

00:32:13 C++ is the hardcore markup language.

00:32:17 Anyway.

00:32:17 So what was the original question?

00:32:19 It's just for making scripts.

00:32:21 The original question here.

00:32:22 Let me just give people a quick bit of numbers.

00:32:24 JavaScript is number one, which they put up as JS, 64%.

00:32:29 SQL is number two at 54.

00:32:30 HTML, CSS, which, again, are not the same thing.

00:32:32 but 52%.

00:32:34 And then Py, which I assume stands for Python, is 46.

00:32:37 Then TS for TypeScript.

00:32:38 But then like longer words like PowerShell are written out.

00:32:41 I don't know why some are abbreviated and some aren't.

00:32:43 Nonetheless, that's kind of what it is.

00:32:45 And the question is, which programming, scripting, and markup language have you done extensive development work over the past year?

00:32:50 So obviously this panel is fairly skewed, but just maybe give me your perspective on where you see energy going to these days, different languages.

00:33:02 For example, in Python, we've seen a lot of people move to Rust, even though most people are still doing Python and so on.

00:33:07 Yeah, and most is a relative concept.

00:33:09 Rust is still, you know, at the edge of the long tail, so to speak.

00:33:14 Yeah, Rust is super, super low, actually.

00:33:17 It's like 2% or something.

00:33:18 You know, it's a pretty specialized space to live.

00:33:21 Yeah, it's 11% for Stack Overflow.

00:33:23 But in the trends, I think it's...

00:33:26 Speaking of trends, like one thing I would find interesting, can you click on learning to code?

00:33:32 Like it would be interesting because they did separate it out.

00:33:34 It'd be interesting to see people who are learning.

00:33:37 What are they learning maybe?

00:33:39 I mean, they didn't ask specifically, what are you learning?

00:33:41 But like extensive development.

00:33:42 And there we have Python at the top.

00:33:44 Yeah, quite a bit.

00:33:46 And HTML.

00:33:47 Okay, I get that.

00:33:48 HTML, CSS, like everyone's putting together stuff on the web.

00:33:52 I don't know if everyone read the question correctly and like really thought about extensive development.

00:33:58 Like maybe people thought everyone's hacking.

00:34:00 I don't know.

00:34:00 I'm sure most people who develop hack around with CSS or with HTML a bit every year.

00:34:06 Unavoitably.

00:34:08 Yeah.

00:34:08 So I'm not surprised.

00:34:10 If you gather all the web technologies together.

00:34:12 Yeah.

00:34:14 It's a web-y world.

00:34:15 If you're making a web app, like you have a lot of different languages and markup languages you're interacting with, which you don't necessarily have in Python.

00:34:23 You write Python.

00:34:24 Maybe if you're a library developer, you do some C or Rust, but that's kind of it.

00:34:29 Whereas, okay, if you're a web developer, you do HTML, CSS, JavaScript, TypeScript all

00:34:34 together.

00:34:35 You might do some database stuff as well.

00:34:39 You might do VashScript.

00:34:40 There's just this huge pile of technologies that come with a certain job, and we just mostly have one.

00:34:46 Yeah, but most Python people are writing a little SQL, too.

00:34:49 You've got to get your data from somewhere.

00:34:50 But you can have someone else do that.

00:34:55 You can use an existing API.

00:34:57 I'm sure I would...

00:34:59 I don't really write SQL, to be honest.

00:35:03 And I think I would know a lot of...

00:35:06 Also, I like to call it SQL, but that's a different story.

00:35:09 But I know a lot of developers, I'm sure, who don't write SQL.

00:35:14 I don't write SQL either.

00:35:15 Might not even know it.

00:35:16 What SQL?

00:35:19 It's called SQL.

00:35:20 I honestly, when I'm talking to databases, I use ORMs and ODMs most of the time.

00:35:25 I know, Richard, you're a big database guy.

00:35:27 I've been everywhere for one time or another.

00:35:29 So it seems like a friendly language to me.

00:35:31 And apparently, according to the professional developer side, lots of people are touching it.

00:35:35 And I presume they each responded, checked multiple boxes.

00:35:39 Because we rarely actually live in one language.

00:35:41 You usually have to go spend time elsewhere.

00:35:44 Do you read that learning to code is like, that's aspirational.

00:35:47 They wish they were doing Python.

00:35:50 Did they ask that question this year?

00:35:52 Because they used to ask that, right?

00:35:54 In the developer survey.

00:35:56 Like, what do you wish you were writing?

00:36:00 Yes, that's in the most loved and most hated and most wanted.

00:36:06 I don't know if that's in here.

00:36:07 Actually, let's go down to it.

00:36:08 I think they might have stopped doing that.

00:36:09 I think they might have stopped as well.

00:36:11 Yeah.

00:36:12 Gosh, because I love that.

00:36:12 There's an admired and desired section in 2.2.

00:36:16 Okay.

00:36:17 Let's see.

00:36:18 Admired and desired.

00:36:19 Yeah, there it is.

00:36:20 Okay.

00:36:21 This is pretty interesting.

00:36:22 Yeah.

00:36:23 What do the bars mean here, folks?

00:36:26 Admired versus desired, right?

00:36:28 Yeah.

00:36:28 So I admire Python, but I don't actually want to do it.

00:36:31 So admired is read.

00:36:33 That's like, I think this is like a borderline contest.

00:36:36 I mean, no offense to Stack Overflow, but that's like a borderline contestant for the data is ugly subreddit.

00:36:42 Because I find this quite hard to read.

00:36:44 No offense to anyone.

00:36:46 It was just people who made this, And I don't want to be a dick about it.

00:36:49 No, I'm not green.

00:36:50 I agree.

00:36:52 Can someone decipher this for me?

00:36:54 Because I actually don't understand what I'm looking at here right now.

00:36:58 Let me describe it here.

00:36:59 So there's a, if you go to the section, there's two bars.

00:37:04 There's like kind of an error bar looking thing with two numbers.

00:37:07 And it has a range on the blue one on the left is how desired is it?

00:37:13 And then there's a red one that shows how admired it is.

00:37:17 And you can see the delta, the gap between how much it's wanted versus how much people admire it.

00:37:23 So lust is probably the biggest.

00:37:25 Elixir makes the sense to me, right?

00:37:27 Because Elixir is really not easy to work in.

00:37:30 But it's beautiful when it works.

00:37:33 So it makes perfect sense to me that almost nobody's doing it, but everybody thinks it's cool.

00:37:37 Yeah.

00:37:37 Seventy, seven percent think it's cool.

00:37:39 Five percent are doing it or actually want to do it.

00:37:42 Yeah.

00:37:43 That seems that that resonates with me.

00:37:45 I get that.

00:37:46 Right.

00:37:47 that that would make sense.

00:37:48 So here we have Python number one, both in absolutely number one in desired, not number one in admired, which is pretty interesting.

00:37:58 It's still quite high up there, but there are things like Rust, which is more admired, and Zig, which is wild, and even Elixir, as you point out there.

00:38:08 But yeah, I think this represents trends pretty well.

00:38:11 Yeah, and when you're talking about admired, it's like, who are the cool people that are talking about this?

00:38:15 How much did this number move for Rust because Russinovich was all over it?

00:38:19 Yeah, yeah.

00:38:20 And in Python, we've got a bunch of tools that have come along, especially from the astral folks, but others where we've seen huge benefits because people have written in Rust.

00:38:29 I don't know how much of that is we've just put better algorithms into it and how much of it is actually Rust, but it is Rust and Rust.

00:38:36 I think that puts a lot of shine on it, but people are still rather just write Python, but it seems impressive or cool, and I think that kind of gets captured here.

00:38:43 Yeah, I think definitely sometimes people ask us, and if we were to rewrite spaCy from scratch, we might – maybe we still use Siphon, but maybe we would have also used Rust.

00:38:54 It totally wasn't a thing back then, but I think the alternatives are just C++ or Siphon, which isn't very extensively documented.

00:39:05 So I can see by Rust, it's nice and attractive.

00:39:09 Yeah, quite interesting.

00:39:11 All right, I want to cover one more from this section, and then we need to make sure that we save a little bit of time for the AI category, because that's certainly going to be a thing.

00:39:21 And that is cloud platforms.

00:39:24 So one of the things I find really interesting is how much the big three hyperscale clouds, AWS, Azure, and Google Cloud, to dominate where people are working, right?

00:39:37 I don't know how often developers make a decision in this space.

00:39:39 Yeah, you certainly have talked to a lot of larger companies that have really big cloud deployments.

00:39:44 Give us your thoughts.

00:39:45 Any more than most developers choose what database you're using.

00:39:48 Somebody else selected that product and pays for the licenses for it, and you are going to consume.

00:39:53 I will say of the ones that are on this list, I feel like AWS is the most developer-centric or friendly.

00:39:59 I would consider Azure being infrastructure ops-friendly and AWS being like, oh, they're going to throw out a lot more developer-y type things.

00:40:07 We've had a lot of headaches.

00:40:08 I mean, I'm not an infrastructure person, but I just know we did have some headaches with AWS and Google Cloud.

00:40:14 It's like what we ended up migrating to because it felt much more developer-friendly.

00:40:19 I would go with GCP as the most developer-friendly, but the corp doesn't necessarily like it when you get further afield with it.

00:40:26 I think what AWS has been brilliant at is how they manage their startup relationships.

00:40:31 You know, once you get to a certain size working with AWS, a tech shows up to help you.

00:40:35 Like they've done a really good job of cultivating support there.

00:40:38 Plus they are the reference name.

00:40:40 Yeah.

00:40:40 And also cultivating like developers that specialize in it, because ultimately that's kind of how it works.

00:40:45 You have like DevOps people.

00:40:46 And if you do manage like, you know, significant infrastructure on any of these platforms, you need a developer to do the maintenance on it.

00:40:53 Like that's also something, you know, we've realized when we had to downscale some of our operations a bit, you know, like the infrastructure is set up so that it needs people to maintain it and so that it can do all of the things.

00:41:04 And, you know, if the company encourages, you know, more people to specialize in its platform, then, you know, you also have more

00:41:12 companies hiring people to do it.

00:41:14 Because you add up these numbers and say they don't add up to 100%.

00:41:16 It's like, listen, as soon as you get to a certain size of an organization, you have more than one cloud in your life.

00:41:21 Like, it's just not optional.

00:41:23 Question.

00:41:24 Can we take a look at the split between professional developers and learning to code?

00:41:28 Just out of curiosity.

00:41:29 Yeah, I don't even know what I was doing over in that learning to code mix.

00:41:33 That doesn't make any sense.

00:41:34 So that is what I would expect.

00:41:35 Now learning to code, please.

00:41:38 So just for people listening, AWS, 52%.

00:41:41 Azure, 30%.

00:41:43 Google Cloud, 25%.

00:41:45 On the pro developer side.

00:41:47 Awesome.

00:41:48 And then when you're learning to code.

00:41:50 Yeah, Google Cloud is number one at 24% learning code.

00:41:53 But the split is way more distributed across all these areas, which is interesting.

00:41:58 And when you talk about dev -friendly, it's none of the big guys, right?

00:42:02 like first selling Firebase and Cloudflare and DigitalOcean even I would put up there are much more dev-centric.

00:42:09 I also am a bit confused about like what do they define as cloud here?

00:42:13 Because I would certainly put Amazon Web Services and Azure and stuff into a completely different bucket than a vServer hosted at Hetzner or at OVH.

00:42:21 So that is a bit weird because, I mean, I might be missing something, but I think neither OVH nor Hetzner or something like that do have an offering similar to

00:42:30 AWS and such.

00:42:31 So that's a bit of a mixed bag.

00:42:33 Hetzner has basically, it has cloud servers, it has cloud firewalls, and it has a beta version of S3 storage, and that's it.

00:42:44 Yeah, and you can also, you can vertically scale and such.

00:42:47 They have an API for scaling.

00:42:49 I have all my stuff hosted there, basically.

00:42:52 But it's definitely not the same thing as all of this orchestration stuff that you can do with AWS agents and such,

00:43:00 or even Cloudflare.

00:43:01 So I think that's a bit of a mixed thing.

00:43:03 I think this is clearly evidence that they asked developers this question,

00:43:05 not the people actually.

00:43:08 What percentage of the developers are using serverless-y things on Amazon and not just putting up EC2 instances with their stuff in it?

00:43:16 That would be interesting.

00:43:17 That would be super interesting.

00:43:20 Who does web development?

00:43:22 Because we have platforms there that I also use, like Visele or Netlify, which is where we host our stuff, which if you're learning to build a website, that's the easiest way to just press play and you have a website running, but it might not be necessarily where you would even host the machine learning model.

00:43:38 Although it's kind of, I think they're all trying to break into that field as well, but like it's, I think it's very use case specific.

00:43:44 Yeah.

00:43:45 Yeah.

00:43:45 There's a lot of ways to slice and dice this.

00:43:47 Yeah.

00:43:48 I think there's still, there's still developers coming up to terms with containers.

00:43:52 And so they're not even in, you know, running containers in any environment.

00:43:56 Yeah, like me.

00:43:57 Yeah.

00:43:58 Certainly in the Microsoft world, It's, you know, unless you're over.

00:44:03 I mean, mentally, I'm coming to terms with, so.

00:44:06 Without a doubt.

00:44:07 The Microsoft World containers, because Windows containers are terrible, until you're at a place working in.NET where you're comfortable deploying onto a Linux instance, which, by the way, immediately saves you 20%, 25% on

00:44:18 your cloud consumption, then containers work.

00:44:21 And now you need to learn all of that as well.

00:44:24 Although your AKS is your packaged container services make that a lot easier.

00:44:29 So folks don't have to learn it.

00:44:31 They just deploy into a service.

00:44:32 Yeah, certainly in that space, a lot of people first have to learn Linux and then they can learn Docker

00:44:37 or even VMs, right?

00:44:39 It's a big lift for a lot of folks that are just like, I have a GUI for my web server.

00:44:45 Is there a container section on this survey that people talk about that?

00:44:48 Let's see.

00:44:49 Although, no.

00:44:50 I mean, just it falls into Docker isn't other tools.

00:44:54 Yeah, it's another tool.

00:44:56 Yeah, okay.

00:44:57 So, yeah, I have all of my stuff running over at Petzner as well.

00:45:02 I'm a massive fan of Petzner.

00:45:03 This makes me sad.

00:45:04 This is just a year ago.

00:45:05 This is a year ago, but still.

00:45:08 Still.

00:45:08 Yeah.

00:45:09 I don't even know why.

00:45:10 I just can't.

00:45:11 It's so spread out all over the place.

00:45:14 Yeah.

00:45:16 I believe there's like, I don't know.

00:45:18 There's things like pip and NPM, but also Kubernetes.

00:45:21 You know, like, I'm not really sure they're the same.

00:45:23 Or a Visual Studio solution, which is the file format for an application.

00:45:27 That's a tool?

00:45:32 This is a grab bag of random words.

00:45:34 Yeah, it is.

00:45:35 We're just going to skip on.

00:45:36 All right.

00:45:37 We have just a little bit of time for the finale here.

00:45:40 And I think I want to put the caveat out here as we talk about the AI section that, one, there's a lot of hype.

00:45:46 It's all over the place.

00:45:47 It can mean different things to different people.

00:45:49 Also, as we talked about at the beginning, this is a year old.

00:45:53 And a year in AI years is probably like 10 years.

00:45:59 And I do worry about virtue signaling here too.

00:46:02 Just like this is almost asking, do you recycle, right?

00:46:05 Yeah.

00:46:07 I break my glass in the backyard and just leave it there.

00:46:11 I did grab the 2023 numbers as well just to compare these two because I didn't follow the instructions on badly behaved.

00:46:17 Oh, no.

00:46:18 That's good.

00:46:21 So the key number there, that's 60%.

00:46:23 And in 2023, it was 40%.

00:46:25 Okay.

00:46:26 In 2023, it's a good one.

00:46:27 I mean, admittedly, GitHub Copilot at that point was already three years old.

00:46:31 Like we tend to think from ChatGPT forward, but Copilot, GitHub Copilot came first, the original Copilot.

00:46:37 Yeah, for sure.

00:46:38 And it's been there, it feels like.

00:46:41 I really want to focus on the sentiment and sort of how you all are using this as to kind of close this out.

00:46:47 However, or not using it, which is fine.

00:46:49 But I do want to just, there's a really interesting graph here.

00:46:52 If you look at the Stack Overflow language trends, which show how many questions appear on Stack Overflow for that technology, Python has had this meteoric growth, almost hockey stick, not quite, but almost until

00:47:07 2023, really.

00:47:10 Like late, late 2022, right around November.

00:47:14 Is this graph really just showing the demise of Stack Overflow?

00:47:16 Yes.

00:47:17 If you look at this graph, there's a massive drop of Python there, but there's also a massive drop of JavaScript and some others

00:47:26 as well, but certainly the most popular ones.

00:47:28 And that is basically when ChatGPT came out.

00:47:30 And that is a really interesting developer trend on its own right there.

00:47:34 But I do think to put this into perspective, also, are new questions on Stack Overflow a good thing?

00:47:40 Like that's, I think that's another, you know, yes, it looks like, oh, but I mean, yeah,

00:47:45 maybe the people who would have otherwise opened a question that was already answered like two years ago.

00:47:50 Yeah, they found their answer on Stack Overflow, and that's great.

00:47:55 Like, you know, we don't need the internet to be flooded with like a lot of redundant information.

00:47:59 Like I know to Stack Overflow.

00:48:03 You're hinting at the other aspect of it, which is getting progressively harder to add questions to Stack Overflow.

00:48:08 Yeah.

00:48:09 Question.

00:48:09 I think you're right.

00:48:10 I think you're right, Ines.

00:48:11 I think it's people are just going elsewhere.

00:48:13 And that's kind of what I was thinking there.

00:48:14 The question that graph just there, was that questions asked for that thing or search terms for that

00:48:22 thing?

00:48:22 I believe.

00:48:23 Because it's a huge difference.

00:48:26 Over time based on that.

00:48:27 I think it's question asked.

00:48:28 Yeah.

00:48:28 Or maybe answers as well.

00:48:30 But it's not search terms.

00:48:32 It's content, I believe, on there.

00:48:34 I just wanted to make sure.

00:48:35 Okay.

00:48:36 And just in case people are worried that maybe it's crashing or something, you can look at the T-O-B.

00:48:44 I can't index.

00:48:46 I can't type.

00:48:46 And I know I spelled that, but you know what?

00:48:48 We're going to get that fixed.

00:48:49 There we go.

00:48:53 I don't know.

00:48:54 I just, I don't even, I mean, if you look at Python, it's still year over year up

00:48:59 6%, which is not just faster.

00:49:03 It's like six.

00:49:04 It's a blowout.

00:49:04 Three to six times faster.

00:49:05 It is a below out level of growth.

00:49:08 And so you're seeing.

00:49:08 It's all new dev.

00:49:10 That's people coming in using a chat tool to learn programming.

00:49:14 And it's really good at Python.

00:49:16 Like if you want to navigate.

00:49:18 Yeah.

00:49:18 It's VS Code with the free copilot.

00:49:22 Teach me Python.

00:49:23 You're going to have a good experience.

00:49:24 Yeah.

00:49:25 All right.

00:49:26 With that out of the way, what's your sentiment personally for AI?

00:49:32 And maybe how do you see people?

00:49:34 I love the 20% of that.

00:49:35 no and I don't plan to. I bet you they all skew older.

00:49:40 That's probably true.

00:49:42 Ines, you live in the ML space.

00:49:47 You're kind of AI before AI, like legitimately.

00:49:52 Yeah, I guess. I don't know what that is.

00:49:53 You mean generative chat tools?

00:49:55 Let's say LLM. Yeah, let's say LLMs.

00:49:58 Well, like LLMs that generate text for a human to read.

00:50:02 Because you can also use LLMs.

00:50:03 Because the question is, what tools do you use as part of your development process, not as part of your API or for your app to run it, but what do you use to write code, basically? Let's go with that.

00:50:14 Yeah, so I don't actually, I don't use many models a lot to like actually help me write code because I think the stuff I do is like quite specialized and specific or often, you know, it's like very specific things in like the libraries we're building, for example.

00:50:29 But I do think to explain code to you or for workflows like infrastructure and stuff, that's where it's like really helpful.

00:50:37 Also, I know my co-founder, for example, he's also he's done a bunch of quite complex infrastructure stuff, like setting things up with Terraform.

00:50:44 And they're really having a model summarize and explain it to you.

00:50:49 That is very helpful.

00:50:52 Yeah, yeah.

00:50:53 I've done things like explain this Docker Compose file to me.

00:50:56 What does this line mean?

00:50:57 I don't understand this.

00:50:59 does it mean if it fails it'll restart or if i should have done restart i just what does this do you know and it really is quite good at that uh interesting yeah so not so much you're not vibing let's let's put you as the non-vibing yeah yeah

00:51:12 but i found out that actually because we've always i think i might have mentioned this before in another context but like we've always put a lot of in the libraries we write a lot of work into all this backwards compatibility stuff making sure we don't break users code and this actually had a very positive side effect which is that um these models are really good at writing for example spacey code and it's never something we planned we were just like oh we just want to do all the boring stuff right and make our users happy but um yeah this really paid off like i've heard the mod these models co-pilot chat 3pt are really good at writing code for our libraries

00:51:48 and you were attributing that's a good documentation right And we always put a lot of work into our documentation.

00:51:52 I think that may have added to that as well.

00:51:57 Yeah, yeah, absolutely.

00:51:59 Dina, what do you think?

00:51:59 I know you're not a super...

00:52:02 No.

00:52:02 You're not an AI accelerist, let's say.

00:52:05 Let's say I consider myself an AI skeptical.

00:52:10 So the thing with me is when Copilot came out as a GitHub star, I had a very early access to it and then I started using it And I allowed it to autocomplete a lot of my lines.

00:52:21 I found it an amazing help in translating my stuff because I write everything in octoprint in English first.

00:52:27 And then the whole UI needs to be translated to German on every release.

00:52:30 And doing that by hand is a lot of work.

00:52:33 And having the I make suggestions is really nice in that case.

00:52:37 And then I started to get shoved into my face from every place all around me.

00:52:42 And I read up on the energy consumption of that stuff and the water consumption of that stuff.

00:52:46 and that they were thinking about firing up additional power thingies again just for

00:52:50 that stuff.

00:52:51 And that was when I decided, okay, I'm not going to use this anymore.

00:52:54 I'm refusing to use this.

00:52:56 And I have disabled Copilot and try to not touch anything AI if I can, simply because I don't like how it is getting pushed into everyone's throat these days, down everyone's throat these days.

00:53:09 I actually do have a free account on ChatGPT.

00:53:13 I sometimes have the problem that I forget words in English or in German that I can still remember how to describe.

00:53:20 And then when I do not have anyone I can describe that to, I can describe it to a ChatGPT.

00:53:24 And then it tells me, oh, you did mean, I don't know, interface or something like that.

00:53:29 And then I'm like, yay, exactly.

00:53:30 And I'm happy.

00:53:31 But other than that, I don't touch that with a 10-foot pole anymore because simply it's just too much.

00:53:37 I don't like hypes at all.

00:53:39 But what do you mean it's generative models?

00:53:43 Yeah, sorry, sorry.

00:53:45 No, no, you are completely right because I get this little shock every time that I am also into game development.

00:53:52 And now every time that I read or watch a video about how to build some kind of AI for a game, my initial reaction is always AI.

00:54:02 And then I realize, no, stop, that's the good type.

00:54:04 That's the thing that makes the characters, the NPCs walk around and such and

00:54:08 pathfinding and whatever, right?

00:54:11 But yeah, I'm totally with you.

00:54:13 I just suffer from the same problem at first.

00:54:15 Yeah.

00:54:16 You're a very principled person.

00:54:18 I definitely admire that about you.

00:54:19 It's tough.

00:54:20 I think I do hate having AI jammed into everywhere.

00:54:23 Like my email client can rewrite stuff with the AI.

00:54:28 It almost never comes out the way I want.

00:54:30 And when I do, all the formatting is lost.

00:54:32 I'm like, hey.

00:54:33 It's the worst.

00:54:33 Yes, I know.

00:54:34 Do you get comments like that where I'm like, I know exactly.

00:54:37 Like, why do you want to encourage people to write these shitty, comments on posts that add absolutely nothing and essentially

00:54:44 spam.

00:54:45 And that you then need another chat thingy to parse again in order to summarize them

00:54:52 for that.

00:54:52 That's like completely like, why?

00:54:55 I know it.

00:54:55 All right.

00:54:56 Well, you don't have a time to love.

00:54:57 I got to keep moving along here.

00:54:59 All right.

00:54:59 Richard, where are you on this?

00:55:01 Well, look, you know, I'm talking to a lot of PMs and things who are saying my team is 25, 30% more productive using these tools.

00:55:10 And they can see just more check-ins of more code with fewer remediations.

00:55:16 What we saw in the first six months of the team using it is more reverts because they were over-committing with the code they didn't fully understand.

00:55:24 But over time, they got better at it.

00:55:26 And when they actually got to the PR and merge, the code stuck.

00:55:30 So there was a lot of fewer problems net to the point now where it's like, I kind of can't hire anybody if they're not using these tools because it's like they're not using an editor.

00:55:39 the productivity level is substantial if they're in the workflow and i and i noticed going

00:55:45 further down the list of data here like yeah that ai the ai and the development workflow if they're using it for writing code right that's what it's doing it's code completion and it's you know describe the problem and it gives you a first gen and you can iterate a couple of times on it but this is also a year ago like the ability

00:56:01 to write uh pr explanations and things was only just emerging when this survey was being done.

00:56:08 Today, I notice everybody's PR explanations are wildly better because they didn't write them, the tool

00:56:14 did.

00:56:15 Yeah, I've seen that.

00:56:17 And also maybe as a bit of a positive outlook, like I do think we're already seeing that it's possible to use local models and use much smaller models, you know, that you can actually run on your laptop

00:56:29 and with the device constraints that you have.

00:56:32 And it's like, it is a subset of things.

00:56:34 I think I was just reading something today about also Visual Studio Code supporting more local models and adding more features for that.

00:56:44 So I think, because it's such a specific thing.

00:56:47 I feel like we're starting to write size now.

00:56:49 That it's for, you know, the initial iterations of these products, we're throwing as much meat at them as possible as

00:56:53 they weren't sure they were going to work.

00:56:55 And now it's like, hey, too much is also a problem because it goes off on weird wandering.

00:57:00 And we've been able to narrow size the models.

00:57:02 Companies can have their own internal fine-tuned models as well, like something really small.

00:57:07 Okay, that model just writes PR descriptions for our team that works in this field with Python.

00:57:13 And then it's small.

00:57:14 Everyone runs it locally.

00:57:15 It's data private.

00:57:16 You don't need to send your shit to GitHub, to Microsoft, to OpenAI.

00:57:22 It's like it all stays internal and you have control over it.

00:57:25 And I do think that would be a good compromise and solve a lot of the problems.

00:57:31 But of course, it's something that there are a lot of companies out there, especially very large companies that do not like this kind of vision.

00:57:37 And that's also why I'm so passionate about not calling everything AI, because ultimately, you know, it really just benefits big tech who, you know, likes having us call chat, us for chatbots and open source software into the same bucket and regulate it exactly the same way.

00:57:55 Yeah.

00:57:56 And this is the problem with the hype cycle is as you go, you know, following Gartner's pattern into the trough of disillusionment, you do end up with dumb regulations to respond to social concerns rather than thoughtful.

00:58:09 Here are the different problems and how we can scope them more.

00:58:11 And lobbied by companies like, you know, OpenAI, for example.

00:58:16 Yeah.

00:58:17 The incumbents want to lock in their advantage.

00:58:20 Where's our regulatory capture, please? We need to work that in to the various places. Yeah.

00:58:25 All right, Calvin.

00:58:26 Well, for folks who know me, they probably know that I'm an eternal optimist, and I'm definitely very excited about the AI developer tools.

00:58:34 I'm actually giving a talk on it like next week at IndiePie about this because there's so many good options out there.

00:58:40 Now, that said, I feel like these tools definitely benefit the senior coders more than they do the junior coders.

00:58:46 Like I feel like this whole, every time I hear the word vibe coding, I shudder kind of like Gina does around anything that says AI.

00:58:55 So I think there's a great potential for a lot of tech that to be produced very, very quickly with those kinds of tools.

00:59:02 And I feel like under poor guidance or poor mentorship, there's a lot of damage that could be done.

00:59:08 But the upside is so good.

00:59:10 Kind of like Richard, like we're probably only going to hire somebody who is basically augmenting their personal skills with a set of tools behind them that make them perform at a higher level just in general.

00:59:23 There's so much upside to it.

00:59:24 And I do love the local tools.

00:59:26 Like I run Mistral Small and Llama 3.3, all that stuff locally.

00:59:30 And so nothing's going off my laptop to interoperate with a lot of my tooling.

00:59:35 There's so many good open source options, too.

00:59:37 I know a lot of people are excited about like Cloud Code and Copilot, but the Ader chats, the Goose clients, those things are really incredible and they're open source.

00:59:50 They all run local.

00:59:54 I want to jump on the terminology bandwagon.

00:59:57 They're agentic, another terrible abused word that everyone's using.

01:00:02 But the tools like Goose and Ader will run commands locally on your machine as a proxy to figure out things.

01:00:11 And I love that capability that is now doing the introspection, exploration, understanding.

01:00:17 It's really a great usage of the reasoning models.

01:00:20 And being able to use multiple models simultaneously against a code base is really, really powerful.

01:00:24 And I don't think a lot of developers see that.

01:00:26 I think a lot of people just jump into like a ChatGPT or a quad and try and just brute force their way to a solution.

01:00:32 and I don't think that's the right approach.

01:00:33 I would love to see more folks take a measured approach to this and really make it small incremental improvements, and you get a lot of win there.

01:00:43 Is that the topic of your talk?

01:00:44 Are you going to talk about that?

01:00:47 I'm going to take five of the current developer tools like that and compare them.

01:00:53 I'm going to basically take a...

01:00:54 Oh, that's cool.

01:00:55 You need to send me the slides.

01:00:57 I really want to check it out because I recently just had a conversation with like a journalist who wanted to know about these things and brought down some of the thoughts and it was it actually really mirrored um what you all have been saying so

01:01:08 yeah um yeah i want to look deeper into this yeah because some of them have superpowers that are different than the others

01:01:14 and i don't think folks understand that either like uh for example the goose no goose goose is very get aware no i'm sorry take that back ader chat because even in my brain they don't say straight. Ader chat is very Git aware and it uses it as its undo function and it's very deeply the prompting that they put into it understands Git really, really well, which means it can quickly discern what's going on in a code base because it basically does a mapping of your repository structure and then uses that to know when to pull stuff in. Again, I'm super positive and pro on this stuff and the fact that Ader can use local models mixed in with anything else you want to pull in there, it's really flexible. You're not tied to some AWS or Google or OpenAI or Anthropoc.

01:01:57 I'm also interested in this.

01:01:58 Are you going to be recording that talk or streaming?

01:02:00 Oh, yeah, yeah.

01:02:00 It'll be recorded and it'll be streamed.

01:02:02 We'll have it online.

01:02:03 So I can go back to YouTube and watch it there like I do not have to.

01:02:07 Or you all can join and ask great questions.

01:02:09 Awesome, okay.

01:02:10 Yeah, yeah.

01:02:11 No, it does sound super interesting.

01:02:12 IndiePy.org, a little plug for, I'm a co-organizer, co-founder of IndiePy, the local Python group here too.

01:02:18 In Indianapolis?

01:02:19 Yeah.

01:02:20 In Indiana, yep.

01:02:22 I would say, well, for me, I've definitely gone on a journey through all of this stuff.

01:02:27 When I first saw it, I still to this day feel like LM's probably border on copyright theft.

01:02:34 So I'm a little displeased with them.

01:02:36 Well, maybe a lot displeased.

01:02:38 But at the same time, that horse is out of the barn.

01:02:41 It's not coming home.

01:02:41 It's gone.

01:02:42 And so then you got to say, well, now what are we going to do?

01:02:46 Am I going to just pretend this doesn't exist because I'm a little bit put off by that?

01:02:51 when everyone else is using it to create libraries, tools, applications, content, et cetera.

01:02:57 That's not that reasonable either, right?

01:02:59 You kind of, to Richard's comment about the productivity, right?

01:03:01 You got to be practical.

01:03:03 And I would also found them to be fairly, like, mind-blowingly cool, but somewhat inaccurate.

01:03:10 But that's kind of like a 2023, 2024 version.

01:03:13 Now, if you get to the higher level models, they are so good.

01:03:17 They are so powerful and so effective that it's, if you stopped messing with them a year ago, because you don't want to, because they're not really that accurate, I would encourage people to look at it again and maybe look at Calvin's talk.

01:03:31 And then Gina, for your concerns, I also share those, although I definitely have a ChatGPT subscription these days.

01:03:38 Check out stuff like LM Studio and other ways of running it local, right?

01:03:43 Like you can avoid a lot of the melting the power grid.

01:03:46 I mean, then I'm paying for the energy cost.

01:03:48 That's also a problem.

01:03:50 Yeah, but it's not that.

01:03:52 It's not.

01:03:53 You can run lower models that take not that much time.

01:03:57 You're right.

01:03:57 I mean, the energy cost is trading.

01:04:01 It's so efficient.

01:04:02 I mean, efficient, relatively, to everything else out there.

01:04:04 It's so efficient.

01:04:05 Yeah.

01:04:05 And we haven't gotten to optimized yet, right?

01:04:08 No, yeah, you're right.

01:04:09 The MPU is still in its infancy.

01:04:10 Yeah, this is, in five years, this is going to be, But local models, especially, I think, are going to be really much more capable.

01:04:17 We saw DeepSea already.

01:04:18 And this is driving innovation around abundance.

01:04:22 I think we're going to have new solutions to these energy problems, new solutions to the cooling problems.

01:04:27 Like, we can't continue, obviously, down this route.

01:04:29 I do share Gina's concern.

01:04:31 But, again, I think I come at it with a very optimistic, maybe overly optimistic view.

01:04:36 Maybe I wish I was a little more realistic about it.

01:04:41 I think Gina is right.

01:04:42 that there is a problem that has to be addressed.

01:04:44 Yeah, but also we are coming out of this hype.

01:04:48 I don't know what the Gartner cycle is calling it again, but I call it the post-hype hangover sort of

01:04:54 way in that phase.

01:04:56 And I think then there's going to be a more reasonable mindset.

01:04:59 I've always been advocating for smaller models, more task-specific models, using these large generative models to create systems rather than as systems.

01:05:10 Like using them as systems, that's kind of 2023.

01:05:14 Like what we're doing now is using them to help us write code, but also using them to create data for smaller models, which is totally possible.

01:05:24 And that's not old NLP.

01:05:25 That's just, yeah, next level.

01:05:27 Maybe to not only say something negative about that, also maybe something positive on my side about that stuff.

01:05:32 So I find it very interesting.

01:05:34 And I think there are some great tools or going to be some great tools that are utilizing this technology.

01:05:40 But only if the person using it is actually able to determine whether that stuff it is outputting is actually good.

01:05:48 Yeah.

01:05:49 Only if it is, it doesn't necessarily have to run locally, at least not for me, because I am developing open source anyhow.

01:05:56 So everything I do is going to be out in the open anyhow.

01:05:59 But yeah, some privacy aspects are also something that are to be considered.

01:06:03 So local would be nice.

01:06:05 Lower energy costs.

01:06:06 And please allow me to disable this stuff when I don't want to use it.

01:06:12 Because I don't want to have every single tool start waving at me all the time going, hey, by the way, you can also now use my chatbot interface when I'm like, no, I'm just happy if you list my files here, dear file listener.

01:06:27 And if I list that, something like that, you know, the other day I was looking for a new terminal and found stuff that was also trying to tell me that it has AI in it, whatever they meant with that.

01:06:41 But I don't need a chatbot interface when I'm trying to write bash.

01:06:44 So thank you very much.

01:06:46 So give me an off switch, allow me to run this stuff locally and yeah, don't shove it down my throat and also don't try to plaster it all over the place as the solution for every single problem, especially for people who don't fully understand the problem space yet because then we also get like in the open source situation, we also get a lot of issues now generated with

01:07:09 AI, security tickets generated by AI, like suggestions from people to help other people generated by AI that are completely wrong and are causing more problems than anything.

01:07:20 So if all of this stuff stops, then yes, then I will take another look.

01:07:25 But until then, I'm just fed up up to here with that and I can't stand it anymore.

01:07:30 Yeah.

01:07:31 No, I agree. I mean, I work and I work very closely in the space and I absolutely agree with your points.

01:07:36 Yeah.

01:07:37 Yeah. All right, everyone. I think we're just getting started. We could go for a very long time, but we also are out of time.

01:07:44 Ines, Gina, Richard, Calvin, thank you all for being here. It's been a lot of fun.

01:07:48 Thank you.

01:07:49 Thanks, Michael.

01:07:50 Bye.

01:07:51 This has been another episode of Talk Python To Me.

01:07:54 Thank you to our sponsors. Be sure to check out what they're offering. It really helps support the show.

01:07:59 This episode is brought to you by NordLayer.

01:08:01 NordLayer is a toggle-ready network security platform built for modern businesses.

01:08:06 It combines VPN, access control, and threat protection in one easy-use platform.

01:08:10 Visit talkpython.fm/nordlayer and remember to use the code talkpython-10.

01:08:16 And it's brought to you by Auth0.

01:08:19 Auth0 is an easy-to-implement, adaptable authentication and authorization platform.

01:08:24 Think easy user logins, social sign-on, multi-factor authentication, and robust role-based access control.

01:08:31 With over 30 SDKs and quick starts, Auth0 scales with your product at every stage.

01:08:37 Get 25,000 monthly active users for free at talkpython.fm/auth0.

01:08:43 Want to level up your Python?

01:08:44 We have one of the largest catalogs of Python video courses over at Talk Python.

01:08:48 Our content ranges from true beginners to deeply advanced topics like memory and async.

01:08:53 And best of all, there's not a subscription in sight.

01:08:56 Check it out for yourself at training.talkpython.fm.

01:08:59 Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:09:04 We should be right at the top.

01:09:05 You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

01:09:15 We're live streaming most of our recordings these days.

01:09:17 If you want to be part of the show and have your comments featured on the air, Be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:09:26 This is your host, Michael Kennedy.

01:09:27 Thanks so much for listening.

01:09:28 I really appreciate it.

01:09:30 Now get out there and write some Python code.

