WEBVTT

00:00:00.001 --> 00:00:04.240
Quick, name the three most advanced engineering organizations you can think of.

00:00:04.240 --> 00:00:08.480
Maybe an aerospace company such as SpaceX or Boeing came to mind.

00:00:08.480 --> 00:00:10.700
Maybe you thought about CERN and the LHC.

00:00:10.700 --> 00:00:16.700
But in terms of bespoke engineering capabilities, you should certainly put the F1 race teams on your list.

00:00:16.700 --> 00:00:21.200
These organizations appear as 20 or 30 people on a race day shown on TV.

00:00:21.200 --> 00:00:26.660
But in fact, the number of people back at the home base doing the engineering work can be well over 500 employees.

00:00:26.880 --> 00:00:32.260
Almost every tiny part you see on these cars, as well as the tools to maintain them, are custom built.

00:00:32.260 --> 00:00:34.540
The engineering problems solved are immense.

00:00:34.540 --> 00:00:37.860
Would it surprise you to know that Python is playing a major role here?

00:00:37.860 --> 00:00:43.820
On this episode, you'll meet Joe Borg, who helped pioneer Python's adoption at several F1 teams.

00:00:43.820 --> 00:00:49.260
This is Talk Python to Me, episode 296, recorded November 16th, 2020.

00:00:49.260 --> 00:00:52.320
Wait, wait, wait, wait.

00:00:52.320 --> 00:00:55.880
Normally, I'd play a little guitar riff right here to kick off the episode.

00:00:56.200 --> 00:00:59.180
But this episode is about racing and race cars.

00:00:59.180 --> 00:01:02.680
So let's kick it off with a different kind of instrument and note.

00:01:02.680 --> 00:01:05.780
Let's jump into a 2017 Indy Pro Mazda.

00:01:05.780 --> 00:01:08.420
The furlap around the storied Brands Hatch circuit.

00:01:08.420 --> 00:01:10.000
And let the engine notes be the music.

00:01:10.000 --> 00:01:13.780
The furlap around the storied Brands Hatch circuit.

00:01:13.780 --> 00:01:14.540
The furlap around the storied Brands Hatch circuit.

00:01:14.540 --> 00:01:15.140
The furlap around the storied Brands Hatch circuit.

00:01:15.140 --> 00:01:17.140
The furlap around the storied Brands Hatch circuit.

00:01:17.140 --> 00:01:19.140
The furlap around the storied Brands Hatch circuit.

00:01:19.140 --> 00:01:19.680
The furlap around the storied Brands Hatch circuit.

00:01:19.680 --> 00:01:20.220
The furlap around the storied Brands Hatch circuit.

00:01:20.220 --> 00:01:21.140
The furlap around the storied Brands Hatch circuit.

00:01:21.140 --> 00:01:22.600
The furlap around the storied Brands Hatch circuit.

00:01:22.600 --> 00:01:23.980
The furlap around the storied Brands Hatch circuit.

00:01:23.980 --> 00:01:24.600
The furlap around the storied Brands Hatch circuit.

00:01:24.600 --> 00:01:25.680
The furlap around the storied Brands Hatch circuit.

00:01:25.680 --> 00:01:26.600
The furlap around the storied Brands Hatch circuit.

00:01:26.600 --> 00:01:43.200
The furlap around the storied Brands Hatch circuit.

00:01:43.200 --> 00:01:44.400
Welcome to Talk Python to Me.

00:01:44.400 --> 00:01:46.200
A weekly podcast on Python.

00:01:46.200 --> 00:01:49.360
The language, the libraries, the ecosystem, and the personalities.

00:01:49.360 --> 00:01:51.080
This is your host, Michael Kennedy.

00:01:51.080 --> 00:01:53.280
Follow me on Twitter where I'm @mkennedy.

00:01:53.280 --> 00:01:55.420
And keep up with the show and listen to past episodes at

00:01:55.420 --> 00:02:00.180
Talk Python.fm and follow the show on Twitter via @talkpython.

00:02:00.180 --> 00:02:04.020
This episode is brought to you by Linode and Talk Python Training.

00:02:04.020 --> 00:02:05.740
Please check out the offers during their segments.

00:02:05.740 --> 00:02:08.300
It really helps support the show.

00:02:08.300 --> 00:02:12.100
At Talk Python, we run a bunch of web apps and web APIs.

00:02:12.100 --> 00:02:16.860
These power the training courses as well as the mobile apps on iOS and Android.

00:02:16.860 --> 00:02:21.180
If I had to build these from scratch again today, there's no doubt which framework I would use.

00:02:21.180 --> 00:02:23.100
It's FastAPI.

00:02:23.100 --> 00:02:27.540
To me, FastAPI is the embodiment of modern Python and modern APIs.

00:02:27.540 --> 00:02:29.940
You have beautiful usage of type annotations.

00:02:29.940 --> 00:02:32.700
You have model binding and validation with Pydantic.

00:02:32.700 --> 00:02:35.980
And you have first class async and await support.

00:02:35.980 --> 00:02:40.860
If you're building or rebuilding a web app, you owe it to yourself to check out our newest course.

00:02:40.860 --> 00:02:45.300
modern APIs with FastAPI over at Talk Python Training.

00:02:45.300 --> 00:02:47.740
You have a first course in a series we're building on FastAPI.

00:02:47.740 --> 00:02:52.140
And for just $39, it'll take you from interested to production with FastAPI.

00:02:52.140 --> 00:03:00.180
To learn more and get started today, just visit talkpython.fm/fastapi or click the link in your podcast player show notes.

00:03:00.180 --> 00:03:01.740
Joe, welcome to Talk Python To Me.

00:03:01.740 --> 00:03:02.740
Joe, welcome to Talk Python To Me.

00:03:02.740 --> 00:03:03.740
Joe Pyshko: Thank you.

00:03:03.740 --> 00:03:04.140
Nice to be here.

00:03:04.140 --> 00:03:05.140
Nice to be here.

00:03:05.140 --> 00:03:05.140
Oh, man.

00:03:05.140 --> 00:03:06.580
It's exciting to have you here.

00:03:06.580 --> 00:03:10.660
I get to come back to one of my favorite topics, racing, which is always cool.

00:03:10.660 --> 00:03:16.300
And we're going to hit the peak of racing and engineering, I think, with F1 here.

00:03:16.300 --> 00:03:17.700
Joe Pyshko: I think so.

00:03:17.700 --> 00:03:22.580
I probably shouldn't admit this is an F1 guy, but I've always kind of preferred WEC.

00:03:22.580 --> 00:03:26.140
But F1 certainly up there with the high performance.

00:03:26.140 --> 00:03:27.140
Joe Pyshko: Sating.

00:03:27.140 --> 00:03:31.580
So the world endurance champion cars, yeah, like Ferraris and stuff like that, right?

00:03:31.580 --> 00:03:32.020
Joe Pyshko: Exactly.

00:03:32.020 --> 00:03:35.820
All the Porsches, Toyota, I think are the biggest one-store racing in it.

00:03:35.820 --> 00:03:36.820
Joe Pyshko: Yeah, yeah.

00:03:36.820 --> 00:03:41.500
Well, now that you've stepped away, I got a little distance between F1, but you work for

00:03:41.500 --> 00:03:45.460
two different F1 teams doing some really neat stuff with Python, and we're going to dig into

00:03:45.460 --> 00:03:46.460
that.

00:03:46.460 --> 00:03:47.460
And I'm super excited about it.

00:03:47.460 --> 00:03:50.220
Before we get to that, though, let's just start with your story.

00:03:50.220 --> 00:03:52.180
How did you get into programming and what brought you to Python?

00:03:52.180 --> 00:03:56.100
Joe Pyshko: I've always been kind of a techie guy since I was a young,

00:03:56.100 --> 00:03:57.100
young kid.

00:03:57.100 --> 00:04:01.820
And my dad was doing a university course when I was like five or six, just about young enough

00:04:01.820 --> 00:04:02.820
to remember.

00:04:02.820 --> 00:04:08.660
He got a computer as part of the course and sort of, I was introduced at quite a young age.

00:04:08.660 --> 00:04:11.100
It was just, it wasn't anything special at that point.

00:04:11.100 --> 00:04:13.540
It was Windows 95 or whatever.

00:04:13.540 --> 00:04:14.540
Showing my age there, I guess.

00:04:14.540 --> 00:04:15.540
I don't know which way.

00:04:15.540 --> 00:04:17.540
Joe Pyshko: Windows 95 was kind of special.

00:04:17.540 --> 00:04:18.540
Joe Pyshko: Yeah.

00:04:18.540 --> 00:04:22.660
Joe Pyshko: I think Windows 95, like it was the first operating system that really felt like

00:04:22.660 --> 00:04:23.660
welcoming and good.

00:04:23.660 --> 00:04:26.700
Joe Pyshko: I mean, I think you could debate about some of the early Mac ones, but the

00:04:26.700 --> 00:04:29.380
early Mac ones were like super bizarre in some ways.

00:04:29.380 --> 00:04:32.380
And Windows 3, one, like that was a neat time actually.

00:04:32.380 --> 00:04:33.380
Joe Pyshko: Yeah.

00:04:33.380 --> 00:04:38.840
Oddly, I was introduced to Windows 3.1 after 95 because of school, which seems like a weird

00:04:38.840 --> 00:04:39.660
order to do it in.

00:04:39.660 --> 00:04:41.380
Joe Pyshko: What is this thing?

00:04:41.380 --> 00:04:46.100
Joe Pyshko: I sort of vaguely remember that though with my dad choosing the themes because

00:04:46.100 --> 00:04:50.100
I think it came with plus or whatever it was called, the big theme pack on Windows 95.

00:04:50.100 --> 00:04:53.100
And we spent more time doing that than about anything else.

00:04:53.100 --> 00:04:57.820
But then he started showing me how Excel works and how you can do not just the kind of conditions

00:04:57.820 --> 00:05:01.100
on each cell, but then into VB and stuff like that.

00:05:01.100 --> 00:05:03.100
So that's how the seed kind of got planted.

00:05:03.100 --> 00:05:07.260
Joe Pyshko: I never went to university, but I did an apprenticeship with British Telecom,

00:05:07.260 --> 00:05:09.700
quite big in the UK with that kind of thing.

00:05:09.700 --> 00:05:14.180
And I actually did network engineering for a few years there and got my qualification.

00:05:14.180 --> 00:05:16.580
I think that would be an associate's degree in the US.

00:05:16.580 --> 00:05:17.220
Joe Pyshko: Yeah.

00:05:17.220 --> 00:05:21.460
At that time, there's probably not a lot of programming in the network engineering, but

00:05:21.460 --> 00:05:23.540
there's a lot of scripting and automation.

00:05:23.540 --> 00:05:25.540
So it's like on the cusp of programming, right?

00:05:25.540 --> 00:05:26.540
Joe Pyshko: Exactly.

00:05:26.540 --> 00:05:27.540
Joe Pyshko: Okay.

00:05:27.540 --> 00:05:31.740
Joe Pyshko: So I much preferred that to sit manually subnetting stuff for tests, et cetera.

00:05:31.740 --> 00:05:36.300
Like it was much nicer to be doing mostly like it was just scripts for provisioning routers

00:05:36.300 --> 00:05:37.460
and things like that.

00:05:37.460 --> 00:05:41.900
And we had a few systems internally that were, that we wrote because the commercial stuff just

00:05:41.900 --> 00:05:43.900
wasn't very suited for us.

00:05:43.900 --> 00:05:48.300
And then I got quite a lucky break with my, the first team I worked for.

00:05:48.300 --> 00:05:52.980
Dropped in for an interview, which took several hours, which I kind of assume was a good thing.

00:05:52.980 --> 00:05:55.660
Joe Pyshko: And they haven't kicked me out yet.

00:05:55.660 --> 00:05:56.500
Maybe I'm here.

00:05:56.500 --> 00:05:57.500
Joe Pyshko: Exactly.

00:05:57.500 --> 00:06:00.740
Which was, it wasn't really a technical interview at all.

00:06:00.740 --> 00:06:03.900
It was more, how would you approach this on a high level?

00:06:03.900 --> 00:06:09.780
And I think at the time there wasn't really a developer focus for especially the aerodynamics

00:06:09.780 --> 00:06:10.780
side in Formula One.

00:06:10.780 --> 00:06:15.660
So literally just saying, you know, I'd have a web front end for all of the users and I'd

00:06:15.660 --> 00:06:20.940
store stuff in a database and I'd save things on a, on a network file share, et cetera.

00:06:20.940 --> 00:06:23.940
That was enough to, to pique an interest.

00:06:23.940 --> 00:06:24.940
Joe Pyshko: Cool.

00:06:24.940 --> 00:06:26.460
And did you learn Python there?

00:06:26.460 --> 00:06:27.460
Joe Pyshko: Yeah.

00:06:27.460 --> 00:06:32.340
So it was, I think I had a few months in between interviewing there and then actually starting

00:06:32.340 --> 00:06:32.700
the job.

00:06:32.700 --> 00:06:35.660
So I started learning at home.

00:06:35.660 --> 00:06:37.340
I was already a Linux user.

00:06:37.340 --> 00:06:42.260
In my high school, we had a Linux user group, which especially in the UK, I think was a very

00:06:42.260 --> 00:06:43.260
rare thing.

00:06:43.260 --> 00:06:47.980
It just so happened that one of the IT guys was into it and a couple of the six formers

00:06:47.980 --> 00:06:49.140
were into it.

00:06:49.140 --> 00:06:50.500
It was Fedora Core One.

00:06:50.500 --> 00:06:52.460
I think at that time had just come out.

00:06:52.460 --> 00:06:52.460
Yeah.

00:06:52.460 --> 00:06:54.140
And that's what we were all in.

00:06:54.140 --> 00:06:58.020
We'd found some old computers that might be being dropped or whatever.

00:06:58.020 --> 00:07:03.820
And we were allowed to reprovision them with, with Fedora Core One and get them a new lease

00:07:03.820 --> 00:07:04.620
of life as it were.

00:07:04.620 --> 00:07:06.020
So I'd, I'd kind of got...

00:07:06.020 --> 00:07:07.020
Yeah.

00:07:07.020 --> 00:07:08.020
They were probably blazing.

00:07:08.020 --> 00:07:09.020
They probably had thrown away because they were too slow to run.

00:07:09.020 --> 00:07:10.020
Exactly.

00:07:10.020 --> 00:07:11.020
And they were blazing, right?

00:07:11.020 --> 00:07:12.020
Joe Pyshko: Yeah.

00:07:12.020 --> 00:07:13.020
It was nice.

00:07:13.020 --> 00:07:15.020
We did a couple of like LAN parties.

00:07:15.020 --> 00:07:16.020
I can't remember what game.

00:07:16.020 --> 00:07:20.020
Probably some terrible free game that no one actually played in real life.

00:07:20.020 --> 00:07:23.020
But just to prove that we could get them running on the network.

00:07:23.020 --> 00:07:27.020
I had a bit of background of sort of scripting and like provisioning, especially Linux nodes

00:07:27.020 --> 00:07:28.020
at that point.

00:07:28.020 --> 00:07:30.020
So the biggest thing was learning Python.

00:07:30.020 --> 00:07:35.020
And so I literally sat down with Python for dummies at that point and just started basically.

00:07:35.020 --> 00:07:36.020
Yeah.

00:07:36.020 --> 00:07:37.020
Cool.

00:07:37.020 --> 00:07:40.020
Neat place to like start this new venture and you can learn this new language and kind

00:07:40.020 --> 00:07:45.020
of like grow into this whole tech world that you were jumping into, right?

00:07:45.020 --> 00:07:48.020
Like sort of, we'll start with almost IT, but like, let's go farther.

00:07:48.020 --> 00:07:49.020
Exactly.

00:07:49.020 --> 00:07:52.020
I'd always sort of wanted to be a software developer.

00:07:52.020 --> 00:07:58.020
I just needed that kind of prod, I think, to focus on that rather than networking and IT.

00:07:58.020 --> 00:07:59.020
Yeah.

00:07:59.020 --> 00:08:00.020
I had a similar experience.

00:08:00.020 --> 00:08:05.020
You know, I feel like in the abstract, before you get there, like being a software developer

00:08:05.020 --> 00:08:09.020
is this big daunting thing and it's, there's like so much to know and you don't really know

00:08:09.020 --> 00:08:10.020
where to go with it.

00:08:10.020 --> 00:08:13.020
But then someone comes to you and says, could you do this one thing?

00:08:13.020 --> 00:08:15.020
Could you make this happen with programming?

00:08:15.020 --> 00:08:16.020
Like, I could do that one thing.

00:08:16.020 --> 00:08:17.020
Sure.

00:08:17.020 --> 00:08:18.020
I can do that.

00:08:18.020 --> 00:08:19.020
I'm not a programmer, but that I can do.

00:08:19.020 --> 00:08:20.020
Let me work on that for a while.

00:08:20.020 --> 00:08:23.020
And like, eventually you're like, wait a minute, I could do a lot of stuff.

00:08:23.020 --> 00:08:24.020
I'm a programmer.

00:08:24.020 --> 00:08:25.020
How do I get here?

00:08:25.020 --> 00:08:30.020
Especially with the first job was mostly converting to start with anyway, the first kind of six

00:08:30.020 --> 00:08:34.020
months was converting existing stuff into Python, mostly Bash at the time.

00:08:34.020 --> 00:08:40.020
So you've already got at that point, you're not focused massively on sort of architectural.

00:08:40.020 --> 00:08:41.020
Right, right.

00:08:41.020 --> 00:08:45.020
Side of things more just getting comfortable with Python, trying to do everything in a

00:08:45.020 --> 00:08:46.020
Pythonic way.

00:08:46.020 --> 00:08:49.020
So obviously with Bash, there's going to be a lot of repeated code when you're trying

00:08:49.020 --> 00:08:51.020
to modularize that.

00:08:51.020 --> 00:08:55.020
And yeah, that was a really nice way to kind of settle in, I think.

00:08:55.020 --> 00:08:56.020
Yeah.

00:08:56.020 --> 00:08:57.020
Cool.

00:08:57.020 --> 00:08:59.020
So I mentioned you had stepped a little bit away from F1 these days.

00:08:59.020 --> 00:09:00.020
So what are you doing now?

00:09:00.020 --> 00:09:02.020
So now I work for Canonical.

00:09:02.020 --> 00:09:06.020
People, if they don't know the company Canonical, probably have heard of Ubuntu.

00:09:06.020 --> 00:09:09.020
So Canonical are the kind of corporation that back Ubuntu.

00:09:09.020 --> 00:09:12.020
And yeah, I'm working for the Kubernetes team.

00:09:12.020 --> 00:09:14.020
We work on a couple of projects.

00:09:14.020 --> 00:09:20.020
One is what we call charm Kubernetes, which is a kind of very modular Kubernetes distribution.

00:09:20.020 --> 00:09:25.020
You can sort of pick and choose how you want your cluster to look and you're pick and choose

00:09:25.020 --> 00:09:28.020
out all the different components of how you want to put it together.

00:09:28.020 --> 00:09:29.020
That's all done in Python.

00:09:29.020 --> 00:09:33.020
So we have these, the individual components in our distribution are called charms and they're

00:09:33.020 --> 00:09:36.020
literally blocks of Python code to define what to do.

00:09:36.020 --> 00:09:39.020
what to do if it bumps into another component.

00:09:39.020 --> 00:09:42.020
If one of those components go away, how to react to that, et cetera.

00:09:42.020 --> 00:09:48.020
So imagine something like Terraform, but with a constant controller that's watching over the

00:09:48.020 --> 00:09:49.020
infrastructure.

00:09:49.020 --> 00:09:50.020
Yeah.

00:09:50.020 --> 00:09:51.020
That sounds super cool.

00:09:51.020 --> 00:09:52.020
It is nice.

00:09:52.020 --> 00:09:56.020
We're currently working on a new revision of the actual Python framework that's written

00:09:56.020 --> 00:09:58.020
in to basically make it more Pythonic.

00:09:58.020 --> 00:10:01.020
It was perhaps a bit more kind of scripty before.

00:10:01.020 --> 00:10:02.020
So that's, we're quite excited about that.

00:10:02.020 --> 00:10:04.020
I think that's going to be releasing in a few months.

00:10:04.020 --> 00:10:05.020
Nice.

00:10:05.020 --> 00:10:07.020
What's the relationship of that and OpenStack?

00:10:07.020 --> 00:10:08.020
Is there any?

00:10:08.020 --> 00:10:11.020
I used to work for the OpenStack team as a field software engineer.

00:10:11.020 --> 00:10:16.020
So at that time I was sort of going to customers and helping them either decide to go down the

00:10:16.020 --> 00:10:18.020
OpenStack route or not.

00:10:18.020 --> 00:10:22.020
OpenStack as well through Canonical is delivered in the same way through what we call charms.

00:10:22.020 --> 00:10:28.020
So all the individual components of OpenStack basically defined in Python and then connected

00:10:28.020 --> 00:10:33.020
together with what we call interfaces, which again is sort of Python defined functions of

00:10:33.020 --> 00:10:37.020
executed at the time that your infrastructure comes up and then mutates.

00:10:37.020 --> 00:10:38.020
Nice.

00:10:38.020 --> 00:10:42.020
So a lot of people listening out there, I would imagine everyone has heard of Kubernetes.

00:10:42.020 --> 00:10:43.020
Yeah.

00:10:43.020 --> 00:10:44.020
And probably Docker as well.

00:10:44.020 --> 00:10:46.020
Maybe less degree OpenStack.

00:10:46.020 --> 00:10:47.020
Yeah.

00:10:47.020 --> 00:10:50.020
You know, I've had some guys from OpenStack on before, Flavio.

00:10:50.020 --> 00:10:51.020
Mm-hmm.

00:10:51.020 --> 00:10:57.020
But maybe just give us the elevator pitch of like Kubernetes, Docker, and then what this thing

00:10:57.020 --> 00:11:01.020
that you guys are building, like why is that better than just like random Kubernetes or your

00:11:01.020 --> 00:11:03.020
Docker compose or something like that?

00:11:03.020 --> 00:11:04.020
Sure.

00:11:04.020 --> 00:11:09.020
So a kind of on a single machine level, you have Docker and Docker is basically just there

00:11:09.020 --> 00:11:10.020
to run containers.

00:11:10.020 --> 00:11:15.020
You can have either a single executable in that container or multiple, but obviously there's

00:11:15.020 --> 00:11:21.020
an amount of isolation that goes on with that container, namely network resource and disk

00:11:21.020 --> 00:11:22.020
base.

00:11:22.020 --> 00:11:27.020
If you want to orchestrate something a bit bigger and especially across several nodes, perhaps even

00:11:27.020 --> 00:11:29.020
several networks, you would use Kubernetes.

00:11:29.020 --> 00:11:35.020
Kubernetes is basically just there to decide when and where to place your Docker, in this

00:11:35.020 --> 00:11:38.020
case containers, it can be others, but we'll keep it Docker at this point.

00:11:38.020 --> 00:11:43.020
And then also what to do if there's any issue in either provisioning those or once they've

00:11:43.020 --> 00:11:44.020
started running.

00:11:44.020 --> 00:11:49.020
So it's just Kubernetes is sat there to basically ensure that what you've asked for remains the

00:11:49.020 --> 00:11:50.020
case.

00:11:50.020 --> 00:11:54.020
So if you've asked for five Nginx servers inside Docker to keep them running and if one of them

00:11:54.020 --> 00:11:57.020
fails to replace it with a new one.

00:11:57.020 --> 00:11:58.020
Yeah.

00:11:58.020 --> 00:12:00.020
And Kubernetes is pretty good for like rolling out new versions, right?

00:12:00.020 --> 00:12:02.020
It can do basically zero downtime deployments.

00:12:02.020 --> 00:12:03.020
Yeah, exactly.

00:12:03.020 --> 00:12:07.020
So for example, if I had like a web app, I'll have the actual, let's say in this case, the

00:12:07.020 --> 00:12:10.020
Django app and I release a new version of that.

00:12:10.020 --> 00:12:17.020
I can actually use Kubernetes even to start rolling out the new version of Django app and then get

00:12:17.020 --> 00:12:25.020
the, for example, Nginx load balancer to start firing 10% of the traffic at the new instance of our web app.

00:12:25.020 --> 00:12:30.020
And if there's a problem, it can just remove that part of our Nginx application.

00:12:30.020 --> 00:12:34.020
Sorry, our Django application and then continue how it used to be.

00:12:34.020 --> 00:12:38.020
Or indeed, if it's successful, we can keep changing that 10% to 100 in time.

00:12:38.020 --> 00:12:39.020
So it's very flexible like that.

00:12:39.020 --> 00:12:44.020
So you've kind of come back to the software side of where you started with like network engineering, right?

00:12:44.020 --> 00:12:45.020
Yes.

00:12:45.020 --> 00:12:46.020
Yes.

00:12:46.020 --> 00:12:56.020
There's definitely been quite a few instances where I've had to sit and remember how to work out subnets by hand again, which is something that I was hoping never to use again.

00:12:56.020 --> 00:13:00.020
But certainly, certainly appreciating that I had to before.

00:13:00.020 --> 00:13:01.020
Yeah, absolutely.

00:13:01.020 --> 00:13:02.020
All right.

00:13:02.020 --> 00:13:07.020
So let's talk about this, your Python journey through a couple of F1 teams.

00:13:07.020 --> 00:13:23.020
But I do want to set the stage just by setting the, giving people a sense of the scale, because when I learned about F1, it seemed to me like, okay, well, here's a, there's like a race organization and you watch it on TV or you watch it somehow.

00:13:23.020 --> 00:13:28.020
You'll see like, there's a team of 20 people in the little pit garage and the pit wall there.

00:13:28.020 --> 00:13:32.020
And you're like, okay, well, these are the people that do the racing and the race car.

00:13:32.020 --> 00:13:33.020
And they talk about engineering.

00:13:33.020 --> 00:13:43.020
But then as you pay more attention, you're like, oh, and then this is where they actually went back and redesigned the carbon fiber tub so that they could like change some setting.

00:13:43.020 --> 00:13:53.020
And then they redid this, you know, like you start to realize like there's a huge engineering, like super advanced engineering organization that looks almost like an aerospace company, maybe.

00:13:53.020 --> 00:13:58.020
Yeah, these days, aerodynamics is very much the biggest factor in Formula One.

00:13:58.020 --> 00:14:09.020
And as you say, you watch the Formula One on the television, you maybe see, as you say, 20 engineers and mechanics sat either on the pit wall itself or in the garage ready to service the car.

00:14:09.020 --> 00:14:23.020
But in reality, there's another 400 people, 500 people back at base who have been working on the tiniest details on that car to make sure that every bit of performance possible is being extracted.

00:14:23.020 --> 00:14:36.020
These days, it's not uncommon to see aerodynamic departments alone with 100 people working in it, which, you know, is a large user base, you know, even for a fairly modest software company, I'd say.

00:14:36.020 --> 00:14:44.020
Yeah, yeah, that's quite an incredible thing to realize just that many people are working on, you know, like you said, just the aerodynamics.

00:14:44.020 --> 00:14:47.020
And that was the part that you were associated with most, right?

00:14:47.020 --> 00:14:54.020
That's right. So I was a aerodynamic software engineer slash aerodynamic systems engineer, depending on who was giving me the title at the time.

00:14:54.020 --> 00:15:02.020
So effectively, I was the main person writing software and sort of ensuring the quality of it for these aerodynamic departments.

00:15:02.020 --> 00:15:14.020
It did bleed and especially in the second team into the vehicle dynamics department as well, because obviously what you're simulating, it's like shock springs, that kind of stuff.

00:15:14.020 --> 00:15:15.020
Is that what that would be?

00:15:15.020 --> 00:15:19.020
Exactly. Even usually nowadays, all of that is driven mostly by aero.

00:15:19.020 --> 00:15:23.020
So even the suspension on the Formula One car isn't about having this.

00:15:23.020 --> 00:15:29.020
It never was about having the smoothest ride, but it's mostly about keeping the car in the correct attitude for to exploit the aerodynamics.

00:15:29.020 --> 00:15:35.020
So you'll see an F1. Yeah. And I guess it's probably worth also putting out, like you said aerodynamics are important.

00:15:35.020 --> 00:15:38.020
It's an important part. It's it's an insanely important part.

00:15:38.020 --> 00:15:45.020
And like you watch those cars go and it looks like slot cars, like those toy cars that had like literally a little peg that would stick them to the track.

00:15:45.020 --> 00:15:48.020
Right. They just zoom, zoom, zoom, zoom. And it seems like impossible.

00:15:48.020 --> 00:15:50.020
And that's because of all the aerodynamic force.

00:15:50.020 --> 00:15:57.020
And you listen to them talk about it's like multiple times the weight of the car in aerodynamic force. Right.

00:15:57.020 --> 00:16:03.020
Yeah. I would need to double check this, but I'm pretty sure around the time that I was there, you're talking 4000 kilos.

00:16:03.020 --> 00:16:07.020
So four metric tons at the kind of 200 mile an hour mark.

00:16:07.020 --> 00:16:13.020
I know I'm mixing metric and imperial, but at that kind of speed, it's in that ballpark of downforce.

00:16:13.020 --> 00:16:18.020
So it's multiple times, maybe not quite an order of magnitude, but not far off in downforce.

00:16:18.020 --> 00:16:24.020
Yeah. And obviously it's not too difficult to just do that in downforce, but you need to do that without adding a huge amount of drag to the car as well.

00:16:24.020 --> 00:16:32.020
So the real research is right. No drag, no, no, no extra weight, not much extra weight, all those kinds of things. Yeah, it's exactly.

00:16:32.020 --> 00:16:38.020
That's where you could just have a huge wing. Yes. Like a 747 on it. Right. It'd be fine.

00:16:38.020 --> 00:16:42.020
Exactly. Massive angle of attack. It's something else worse.

00:16:42.020 --> 00:16:46.020
And then it could only do. Yeah. And I get, yeah, there's also like some interesting history in Formula One.

00:16:46.020 --> 00:16:50.020
Like one of the very, very cars didn't used to have these aerodynamics.

00:16:50.020 --> 00:16:55.020
And in the early days, one of the first ones was called a fan car.

00:16:55.020 --> 00:17:03.020
And it was this bizarre car where they put like a rubber skirt on the car and literally put a fan that just sucked the air out and just like it was like a vacuum to the surface.

00:17:03.020 --> 00:17:06.020
And that that was around for a little while. So it was banned.

00:17:06.020 --> 00:17:10.020
Yeah. But it was they actually withdrew it before it was officially banned.

00:17:10.020 --> 00:17:16.020
There was some odd politics going on. Interestingly, the guy that designed that has just come out with a road car with the same system in place.

00:17:16.020 --> 00:17:20.020
So if you want to, if you want to buy the experience that you can buy it now.

00:17:20.020 --> 00:17:22.020
Amazing.

00:17:22.020 --> 00:17:26.020
This portion of Talk Python To Me is sponsored by Linode.

00:17:26.020 --> 00:17:30.020
Simplify your infrastructure and cut your cloud bills in half with Linode's Linux virtual machines.

00:17:30.020 --> 00:17:34.020
Develop, deploy and scale your modern applications faster and easier.

00:17:34.020 --> 00:17:39.020
Whether you're developing a personal project or managing large workloads, you deserve simple, affordable and expensive.

00:17:39.020 --> 00:17:46.020
Cloud computing solutions. As listeners of Talk Python To Me, you'll get a $100 free credit.

00:17:46.020 --> 00:17:50.020
You can find all the details at talkpython.fm/linode.

00:17:50.020 --> 00:17:56.020
Linode has data centers around the world with the same simple and consistent pricing, regardless of location.

00:17:56.020 --> 00:17:59.020
Just choose the data center that's nearest to your users.

00:17:59.020 --> 00:18:05.020
You'll also receive 24/7/365 human support with no tiers or handoffs, regardless of your plan size.

00:18:05.020 --> 00:18:16.020
You can choose shared and dedicated compute instances, or you can use your $100 in credit on S3 compatible object storage, managed Kubernetes clusters, and more.

00:18:16.020 --> 00:18:18.020
If it runs on Linux, it runs on Linode.

00:18:18.020 --> 00:18:25.020
If it runs on Linux, visit talkpython.fm/linode or click the link in your show notes, then click that create free account button to get started.

00:18:25.020 --> 00:18:36.020
All right. So it's in this context of working in these really intense aerodynamic requirements that the cars have today that you started working in the first team that you work for.

00:18:36.020 --> 00:18:39.020
At the time you were working for it, it was called Forced India.

00:18:39.020 --> 00:18:40.020
That's right.

00:18:40.020 --> 00:18:42.020
And now it's called Racing Point.

00:18:42.020 --> 00:18:43.020
Yep.

00:18:43.020 --> 00:18:48.020
If people listen to this episode next year, it's going to be called Austin Martin, I believe.

00:18:48.020 --> 00:18:49.020
That's right.

00:18:49.020 --> 00:18:50.020
Is that right?

00:18:50.020 --> 00:18:51.020
Yeah.

00:18:51.020 --> 00:18:52.020
Yeah. Okay.

00:18:52.020 --> 00:18:55.020
So that group, and at least so far, has always been the pink car.

00:18:55.020 --> 00:18:57.020
So that makes it pretty obvious, right?

00:18:57.020 --> 00:18:58.020
All right.

00:18:58.020 --> 00:19:01.020
So yeah, you said you started there and you had that interview.

00:19:01.020 --> 00:19:04.020
Tell us about like, you showed up, there's a bunch of bash scripts.

00:19:04.020 --> 00:19:05.020
Yeah.

00:19:05.020 --> 00:19:06.020
Then what?

00:19:06.020 --> 00:19:11.020
So then basically, the first job I had was to sit down and to convert as much of that into Python.

00:19:11.020 --> 00:19:16.020
There was an aerodynamicist who had since moved on, who was kind of also interested in Python.

00:19:16.020 --> 00:19:18.020
I'm not sure how he got interested in Python.

00:19:18.020 --> 00:19:23.020
So he'd done a small amount of work, like a sort of proof of concept, as it were.

00:19:23.020 --> 00:19:28.020
Yeah. Before we get too much of the details, let's take a step back and just like, what kind of problems were you solving?

00:19:28.020 --> 00:19:32.020
Because I know a lot of people probably don't know like the standard workflow of aerodynamicists and so on, right?

00:19:32.020 --> 00:19:33.020
Sure.

00:19:33.020 --> 00:19:44.020
So effectively, the name of the game there is to allow aerodynamicists to draw parts CAD and then within a certain amount of time, be told whether that was a good thing or a bad thing.

00:19:44.020 --> 00:19:51.020
So obviously, we can do that with a physical wind tunnel, which is how Formula One teams have been doing it for decades.

00:19:51.020 --> 00:19:58.020
And then more recently, as technology has caught up, we can do that with simulations, which are called computational fluid dynamic simulations.

00:19:58.020 --> 00:20:04.020
So when I think back to my math experiences, like basically the hardest math seemed to be around fluid dynamics.

00:20:04.020 --> 00:20:07.020
So that sounds like there's a lot of computation.

00:20:07.020 --> 00:20:10.020
There's a lot of a lot of things going on there.

00:20:10.020 --> 00:20:12.020
It's not easy to do that kind of stuff, right?

00:20:12.020 --> 00:20:13.020
Sure.

00:20:13.020 --> 00:20:16.020
So like laminar flow, very basic flow is fairly easy to model.

00:20:16.020 --> 00:20:25.020
It's when you start talking about the turbulence that goes around the car, which is what a lot of teams exploit, what all the teams exploit to really get a lot of that downforce.

00:20:25.020 --> 00:20:31.020
And that's when you sort of get away from realized sort of mathematics into more sort of guesswork.

00:20:31.020 --> 00:20:39.020
I guess it's come from lots of years of getting as close as possible to having something that's real, but it's still a bit of guesswork.

00:20:39.020 --> 00:20:40.020
Right, right.

00:20:40.020 --> 00:20:41.020
Okay.

00:20:41.020 --> 00:20:43.020
So in this context, you showed up and you're working.

00:20:43.020 --> 00:20:50.020
There's a bunch of bash scripts that like piece together like the CFD computational fluid dynamics pools and maybe data coming out of the wind tunnels.

00:20:50.020 --> 00:20:52.020
And you're like bash scripts.

00:20:52.020 --> 00:20:53.020
Come on.

00:20:53.020 --> 00:20:54.020
Exactly.

00:20:54.020 --> 00:20:56.020
Which is, it was very common.

00:20:56.020 --> 00:21:01.020
Most of the guys that set the stuff up from university and that's how they did their projects at university.

00:21:01.020 --> 00:21:02.020
Right.

00:21:02.020 --> 00:21:05.020
Probably didn't come as developers, but probably came out of engineering disciplines.

00:21:05.020 --> 00:21:06.020
Exactly.

00:21:06.020 --> 00:21:06.020
Yeah.

00:21:06.020 --> 00:21:09.020
So they had the same attitude from university, which was, we just need to get this done.

00:21:09.020 --> 00:21:12.020
We know bash, which is perfectly fair enough.

00:21:12.020 --> 00:21:21.020
The goals really were to get something that was a bit more reliable because you obviously you change a line in bash and you've got no real accountability for that change.

00:21:21.020 --> 00:21:26.020
It could, if one part of this sort of pipeline fails, then the whole thing would fail.

00:21:26.020 --> 00:21:29.020
So it needs to be made more robust.

00:21:29.020 --> 00:21:36.020
And we wanted to start sharing code because it was, there was these mammoth bash files for each sort of discrete part of the process.

00:21:36.020 --> 00:21:39.020
And can imagine trying to debug those things.

00:21:39.020 --> 00:21:42.020
Or if you want to change something, you're like, oh, we really don't want to touch that part.

00:21:42.020 --> 00:21:43.020
That part's bad.

00:21:43.020 --> 00:21:51.020
There were days where we'd sit there just staring at thousands of lines of bash, trying to, trying to find, you know, very, very small problems.

00:21:51.020 --> 00:21:53.020
Is there a debugger for bash?

00:21:53.020 --> 00:21:55.020
I don't think, not that I've ever heard of.

00:21:55.020 --> 00:21:58.020
So we were using Eclipse at the time, the IDE.

00:21:58.020 --> 00:22:01.020
You had the theme, the bash theme, which helped a lot.

00:22:01.020 --> 00:22:02.020
Yeah.

00:22:02.020 --> 00:22:04.020
Just, just even for counting brackets.

00:22:04.020 --> 00:22:05.020
It's syntactically correct.

00:22:05.020 --> 00:22:06.020
It's sort of.

00:22:06.020 --> 00:22:07.020
Yeah.

00:22:07.020 --> 00:22:08.020
Exactly.

00:22:08.020 --> 00:22:09.020
But I don't think there was specifically a debugger.

00:22:09.020 --> 00:22:10.020
Yeah.

00:22:10.020 --> 00:22:10.020
Yeah.

00:22:10.020 --> 00:22:13.020
And not that I'm sure someone will send us a message in the show notes.

00:22:13.020 --> 00:22:16.020
Like here's the debugger, but yeah, that it's not easy to work through those things.

00:22:16.020 --> 00:22:17.020
Yeah.

00:22:17.020 --> 00:22:23.020
We've done stuff with minus X, obviously to get a step-by-step printout of what was going on, which we had to resort to quite often.

00:22:23.020 --> 00:22:30.020
But the level of, verbosity that you'd get back would be far too much for what you really needed that, you know, it would have just been a variable that hadn't been set correctly.

00:22:30.020 --> 00:22:31.020
And yeah.

00:22:31.020 --> 00:22:32.020
Yeah.

00:22:32.020 --> 00:22:33.020
That take a day to debug.

00:22:33.020 --> 00:22:34.020
Okay.

00:22:34.020 --> 00:22:39.020
So you're going to convert these over into Python and you also wanted to share more code, started using databases, things like that.

00:22:39.020 --> 00:22:40.020
Yep.

00:22:40.020 --> 00:22:53.020
So there was already some use of a, SQL, my SQL in the first instance database that was being written to in order for an existing web app to be able to display mostly headline numbers could then be drilled down into.

00:22:53.020 --> 00:22:58.020
So once you sort of change the part on the car, it would tell you the kind of effects that that had.

00:22:58.020 --> 00:23:08.020
And so, yeah, it was about really getting more into the database than just, you know, summary, as it were things like we would need to produce images.

00:23:08.020 --> 00:23:16.020
And that was all file name based to begin with, which is fine until you suddenly have a new variable, for example, on the, in the image.

00:23:16.020 --> 00:23:19.020
And then suddenly your whole naming convention falls apart.

00:23:19.020 --> 00:23:30.020
So it was basically just lots of little bringing it up to some grade of sort of, I guess, enterprise grade rather than the kind of university thesis grade that it was at.

00:23:30.020 --> 00:23:31.020
Sure.

00:23:31.020 --> 00:23:32.020
How did people interact with it?

00:23:32.020 --> 00:23:36.020
It was basically like a website or some kind of GUI app or what was it?

00:23:36.020 --> 00:23:41.020
Yeah, the biggest kind of the front page as it were, was a web app at the first company was all written in PHP.

00:23:41.020 --> 00:23:49.020
And there was, there was an existing site when I started work there and sort of ended up doing quite a lot of modifications to that.

00:23:49.020 --> 00:23:52.020
It was all static pages when I first started.

00:23:52.020 --> 00:23:58.020
So trying to make them more interactive so that people didn't have to keep hitting refresh every sort of two minutes.

00:23:58.020 --> 00:24:02.020
And there's a lot of image manipulation because you're talking about an entire car.

00:24:02.020 --> 00:24:07.020
So we would make thousands of images per car, per simulation.

00:24:07.020 --> 00:24:11.020
And to be able to browse those, you know, statically was not nice either.

00:24:11.020 --> 00:24:17.020
You're literally loading a full image each time you click next or up or down or however you're trying to navigate.

00:24:17.020 --> 00:24:21.020
So yeah, that was the kind of main entry point for someone.

00:24:21.020 --> 00:24:31.020
If they wanted to drill down at that point, they would usually open some specialized application where you can basically open the 3D model of the car plus all of the simulation data.

00:24:31.020 --> 00:24:36.020
So, you know, I'm sure people have seen like a picture, like a 3D model of a car in CAD.

00:24:36.020 --> 00:24:44.020
Now imagine the actual aerodynamic simulation data on top of that and that you can turn on and off and choose how that's being depicted, etc.

00:24:44.020 --> 00:24:45.020
Yeah.

00:24:45.020 --> 00:24:47.020
And that just required quite a lot of hardware to do.

00:24:47.020 --> 00:24:52.020
So that was, that was something that was sort of saved for when you really needed to drill down.

00:24:52.020 --> 00:24:56.020
Yeah, it's still, it sounds like a really empowering thing, right?

00:24:56.020 --> 00:25:01.020
I mean, instead of doing physical testing and building physical parts, plugging them into a wind tunnel.

00:25:01.020 --> 00:25:02.020
Exactly.

00:25:02.020 --> 00:25:03.020
All right.

00:25:03.020 --> 00:25:06.020
You can piece these tools together and dream them up.

00:25:06.020 --> 00:25:08.020
See what the math says.

00:25:08.020 --> 00:25:09.020
Exactly.

00:25:09.020 --> 00:25:10.020
And look at them, right?

00:25:10.020 --> 00:25:11.020
It really streamlined.

00:25:11.020 --> 00:25:15.020
You know, if you think about it for the wind tunnel, the part would have to be designed in CAD.

00:25:15.020 --> 00:25:24.020
It would then have to be effectively 3D printed, not in the way that your home 3D printer would do, but it's a similar concept that would then have to go and be finished.

00:25:24.020 --> 00:25:28.020
Because if it was the home printer, like the 150 mile an hour wind would just blow it apart, right?

00:25:28.020 --> 00:25:29.020
Yeah.

00:25:29.020 --> 00:25:34.020
And all the kind of small defects you get kind of render anything you've done useless as well, sadly.

00:25:34.020 --> 00:25:35.020
Okay.

00:25:35.020 --> 00:25:38.020
And then these model parts have to be finished by hand as well.

00:25:38.020 --> 00:25:43.020
So they were a team of probably 10 or 20 people literally just finishing small plastic-ish parts.

00:25:43.020 --> 00:25:50.020
And then the aerodynamicists would have to convince their team leader that this warranted some time in the wind tunnel.

00:25:50.020 --> 00:25:54.020
So then that part would be physically has to then be affixed to the model in the wind tunnel.

00:25:54.020 --> 00:25:56.020
That run is then performed.

00:25:56.020 --> 00:25:58.020
And then you get the data from that.

00:25:58.020 --> 00:26:08.020
Whereas with the CFD approach, computer simulation approach, at that point, just making a change in CAD and then getting the result back, it would still take a few hours to run.

00:26:08.020 --> 00:26:13.020
But in comparison for the time and labor that goes into the physical parts, it's very empowering.

00:26:13.020 --> 00:26:15.020
As you say, it's a much quicker.

00:26:15.020 --> 00:26:16.020
It's way better.

00:26:16.020 --> 00:26:17.020
Yeah.

00:26:17.020 --> 00:26:18.020
What kind of compute did you guys have?

00:26:18.020 --> 00:26:20.020
Just like machines you could send it off to?

00:26:20.020 --> 00:26:23.020
Or did you have like grid computing or like high end clusters or?

00:26:23.020 --> 00:26:30.020
So the Formula One teams tend to be quite, I say, paranoid is probably the word that comes to mind when it comes to compute.

00:26:30.020 --> 00:26:36.020
So there is no cloud computing done, which I think is a shame because we could really exploit that.

00:26:36.020 --> 00:26:42.020
So the teams have physical clusters on site due to a quirk in the rules.

00:26:42.020 --> 00:26:45.020
Teams had very specific clusters at the time as well.

00:26:45.020 --> 00:26:50.020
So there were limits on how many floating point operations we could perform within a time.

00:26:50.020 --> 00:26:51.020
No way.

00:26:51.020 --> 00:26:53.020
So I mean, I'm sure a lot of people don't know.

00:26:53.020 --> 00:26:57.020
There's actual limits on how much time you're allowed to do all sorts of testing.

00:26:57.020 --> 00:27:00.020
How much wind tunnel time are you allowed to spend per year?

00:27:00.020 --> 00:27:02.020
How much time on a test track?

00:27:02.020 --> 00:27:03.020
That's right.

00:27:03.020 --> 00:27:08.020
All these different things are highly, highly regulated, but down to the down to the floating point operation?

00:27:08.020 --> 00:27:09.020
Literally.

00:27:09.020 --> 00:27:17.020
And as I'm sure some people are aware, like my gosh, modern CPUs tend to do multiple floating point operations per clock cycle.

00:27:17.020 --> 00:27:26.020
But the simulation code that we were using, which most teams use because it was written quite a while ago, will only exploit a single.

00:27:26.020 --> 00:27:28.020
Some I think would exploit two.

00:27:28.020 --> 00:27:34.020
But it meant that the number that you were giving to the regulating body, it had to be pegged to the CPU.

00:27:34.020 --> 00:27:42.020
If your CPUs were performing eight floating point operations per cycle, that's what you had to tell the governing body.

00:27:42.020 --> 00:27:45.020
So the most important thing wasn't necessarily the speed.

00:27:45.020 --> 00:27:49.020
It was like your resource was number of CPU operations in a sense.

00:27:49.020 --> 00:27:50.020
Yeah, exactly.

00:27:50.020 --> 00:27:52.020
And like, how do you minimize that?

00:27:52.020 --> 00:27:53.020
Okay.

00:27:53.020 --> 00:27:58.020
And literally AMD sponsored one of the teams in the early days of this rule.

00:27:58.020 --> 00:28:04.020
And they pulled an old, I can't remember which, I think it was called the bulldozer spec at the time.

00:28:04.020 --> 00:28:06.020
If I recall, it was an old Opteron, I think.

00:28:06.020 --> 00:28:07.020
And literally.

00:28:07.020 --> 00:28:08.020
Yeah, yeah.

00:28:08.020 --> 00:28:12.020
It was one of the old server, server things from AMD server CPUs.

00:28:12.020 --> 00:28:13.020
Uh huh.

00:28:13.020 --> 00:28:14.020
So nothing special at all off the shelf.

00:28:14.020 --> 00:28:17.020
It would be almost free because they were trying to get rid of them.

00:28:17.020 --> 00:28:24.020
And they basically sort of through hardware killed off all but one of those floating point operations per cycle.

00:28:24.020 --> 00:28:27.020
And then went, oh, we've got a perfect Formula One chip here.

00:28:27.020 --> 00:28:30.020
And then sold it for obscene amounts of money to the teams.

00:28:30.020 --> 00:28:34.020
So most teams were running, we're running with those for a while.

00:28:34.020 --> 00:28:36.020
That's since been rectified, which is good to see.

00:28:36.020 --> 00:28:41.020
But yeah, it was, I'm trying to recall how many, we probably had several thousand cores.

00:28:41.020 --> 00:28:50.020
Each job would run on a few hundred cores spread across several machines, several hundred gigabytes of memory, if not getting into the terabytes of memory per simulation.

00:28:50.020 --> 00:28:51.020
Yeah.

00:28:51.020 --> 00:28:54.020
So yeah, they were quite hefty, quite hefty jobs.

00:28:54.020 --> 00:29:01.020
And they would take anything between four to eight hours to process depending on the size of the, of the model that you were using.

00:29:01.020 --> 00:29:07.020
I'm just still like blown away that that's the metric you got to worry about is like the number of CPU operations.

00:29:07.020 --> 00:29:08.020
Yes.

00:29:08.020 --> 00:29:15.020
It really just must drive a lot of non-intuitive or non-obvious decisions or choices or trade-offs, right?

00:29:15.020 --> 00:29:18.020
Like, oh, this part, we could probably do this part in Python.

00:29:18.020 --> 00:29:20.020
Oh, but there's a lot of operations there.

00:29:20.020 --> 00:29:22.020
We're going to write that in assembly or something weird like that, right?

00:29:22.020 --> 00:29:28.020
So we were quite lucky in that sense because the actual simulation software itself, we bought in.

00:29:28.020 --> 00:29:32.020
And so at that point we just said, this is what it says on the box.

00:29:32.020 --> 00:29:34.020
So we'll assume this is correct.

00:29:34.020 --> 00:29:35.020
All right.

00:29:35.020 --> 00:29:41.020
Although things like any like time loading the data in was a big cost because that was on the clock effectively.

00:29:41.020 --> 00:29:44.020
As soon as the job started, the clock's running.

00:29:44.020 --> 00:29:51.020
So the actual kind of the software itself, how many can some, how many clock cycles it was consuming?

00:29:51.020 --> 00:29:52.020
Wasn't a big issue.

00:29:52.020 --> 00:29:54.020
It was just about getting stuff done as quickly as possible.

00:29:54.020 --> 00:29:57.020
Like the isn't simulation time.

00:29:57.020 --> 00:29:58.020
So, right.

00:29:58.020 --> 00:30:05.020
You know, if, if you have a bit of Python sat there loading some artifact that's taking five minutes, that's a big problem.

00:30:05.020 --> 00:30:09.020
So anything that was blocking, we had to pay real special attention to.

00:30:09.020 --> 00:30:10.020
Oh, how interesting.

00:30:10.020 --> 00:30:12.020
That's such an interesting constraint.

00:30:12.020 --> 00:30:13.020
Maybe give us a sense of some of like the,

00:30:13.020 --> 00:30:16.020
some of the libraries and stuff that you were using there.

00:30:16.020 --> 00:30:23.020
I mean, before you answer, I just, one of the things that never, and you know, never ends to blow me away.

00:30:23.020 --> 00:30:30.020
Blown away by, I guess I should get it out that way is on one hand, things feel so different.

00:30:30.020 --> 00:30:42.020
So I think that's a high-end custom engineering company that is a high-end custom engineering company that is F1 racing teams compared to like a grocery store, a software team that optimizes like what offers do we send to people?

00:30:42.020 --> 00:30:43.020
You look at the tools, you look at some of the programming.

00:30:43.020 --> 00:30:45.020
You look at some of the programming.

00:30:45.020 --> 00:30:47.020
It sounds real similar a lot of the times, right?

00:30:47.020 --> 00:30:48.020
Yeah.

00:30:48.020 --> 00:30:51.020
Even though like the special sauce is absolutely different.

00:30:51.020 --> 00:30:52.020
Internally, it looks a lot of similar.

00:30:52.020 --> 00:31:00.020
All we were really doing was gluing bits of existing software together and then trying to kind of optimize around that.

00:31:00.020 --> 00:31:09.020
So we use like NumPy, for example, for handling all of these, all the numerical data that comes in after the simulation and just trying to, for example, average over it.

00:31:09.020 --> 00:31:10.020
So these would...

00:31:10.020 --> 00:31:17.020
One thing that is really, I was wondering about when I saw you sort of make a note of this was if you had terabytes of data.

00:31:17.020 --> 00:31:18.020
Yeah.

00:31:18.020 --> 00:31:19.020
How do you load that up?

00:31:19.020 --> 00:31:20.020
Right?

00:31:20.020 --> 00:31:21.020
Like, where does that go?

00:31:21.020 --> 00:31:25.020
We're using some sort of distributed computing or like processing it in little parts.

00:31:25.020 --> 00:31:28.020
I mean, Dask might make it work, right?

00:31:28.020 --> 00:31:29.020
Across different machines.

00:31:29.020 --> 00:31:30.020
But what was the story there?

00:31:30.020 --> 00:31:34.020
So we had dedicated infrastructure for loading the cases.

00:31:34.020 --> 00:31:39.020
So these things would have around a terabyte of RAM each.

00:31:39.020 --> 00:31:46.020
And so we would load, obviously, the jobs that had come off the distributed, like actual compute side of the cluster.

00:31:46.020 --> 00:31:50.020
It would then write out a, let's say, terabyte file.

00:31:50.020 --> 00:31:59.020
They then were loaded on to another node, which isn't on the regulation clock, as it were, because we finished the actual compute part, the actual simulation part.

00:31:59.020 --> 00:32:04.020
And then we can start actually decimating this data and getting what we want out of it.

00:32:04.020 --> 00:32:05.020
So this bit can take a bit longer.

00:32:05.020 --> 00:32:10.020
We obviously still want it to be performant because we don't want stuff waiting in the queue.

00:32:10.020 --> 00:32:17.020
So these were huge nodes, the really fancy Nvidia graphics cards in them, pretty big CPUs as well.

00:32:17.020 --> 00:32:18.020
But the RAM was the big thing.

00:32:18.020 --> 00:32:23.020
I mean, especially back in the early 2010s, like a terabyte of RAM was pretty serious.

00:32:23.020 --> 00:32:27.020
And, you know, far bigger than the hard disk space.

00:32:27.020 --> 00:32:30.020
And the power supply for all these computers, right?

00:32:30.020 --> 00:32:34.020
Like there must have been like a big, huge power system.

00:32:34.020 --> 00:32:40.020
Even though the cooling in what was a fairly small server room was huge because these things are just lit up all the time.

00:32:40.020 --> 00:32:41.020
Okay.

00:32:41.020 --> 00:32:44.020
So you had machines that were like heavy enough that could just basically load it up anyway.

00:32:44.020 --> 00:32:45.020
Yeah.

00:32:45.020 --> 00:32:46.020
All onto one node.

00:32:46.020 --> 00:32:53.020
And then we would use a mixture of some open source applications that are designed to load in these sort of big files.

00:32:53.020 --> 00:32:56.020
PowerView is the kind of main one.

00:32:56.020 --> 00:33:00.020
We replaced some commercial software with PowerView because PowerView was free and open source.

00:33:00.020 --> 00:33:06.020
So we could actually a develop against it and be not have to pay for the commercial side of it.

00:33:06.020 --> 00:33:10.020
And we did actually pay them for support, which ended up being really nice, actually.

00:33:10.020 --> 00:33:21.020
And so, yeah, we would use software like that as well as some Python libraries like NumPy and Matplotlib and use these two in combination to make lots of images of the car, lots of plots.

00:33:21.020 --> 00:33:24.020
Because, of course, we need to see as many plots as possible.

00:33:24.020 --> 00:33:25.020
Yeah.

00:33:25.020 --> 00:33:32.020
And sort of try and average out a lot of the data into something meaningful because no one can sit back and look at a terabyte of data.

00:33:32.020 --> 00:33:39.020
We need to pull out a kind of headlines from that, but be average over a lot of that data just to get meaningful numbers.

00:33:39.020 --> 00:33:43.020
Well, it sounds like a really interesting thing that you guys put together there.

00:33:43.020 --> 00:33:50.020
So you did that for a couple of years or five years and then you moved on to another team who decides to change its name.

00:33:50.020 --> 00:33:51.020
Yes.

00:33:51.020 --> 00:33:53.020
Because that's your history, apparently.

00:33:53.020 --> 00:33:59.020
To Scuderia Toro Rosso, which is now AlphaTauri.

00:33:59.020 --> 00:34:00.020
Yes, that's right.

00:34:00.020 --> 00:34:01.020
Is that right?

00:34:01.020 --> 00:34:02.020
So it's the Red Bull sister team.

00:34:02.020 --> 00:34:03.020
Exactly.

00:34:03.020 --> 00:34:08.020
So Toro Rosso is just Red Bull in Italian, which was nice because I got to go to Italy quite a lot.

00:34:08.020 --> 00:34:14.020
So, yeah, I spent quite a few years at Force India and we did some great work there.

00:34:14.020 --> 00:34:16.020
I worked with some really, really good people.

00:34:16.020 --> 00:34:23.020
And we spent a long time converting what was there into a much more sort of streamlined and enterprise.

00:34:23.020 --> 00:34:25.020
I keep using that word process.

00:34:25.020 --> 00:34:29.020
Did you look back at that time and just have like a lot of pride and like look at that transition?

00:34:29.020 --> 00:34:30.020
Yes.

00:34:30.020 --> 00:34:33.020
We helped them on the technical side of engineering there.

00:34:33.020 --> 00:34:34.020
Definitely.

00:34:34.020 --> 00:34:37.020
I think that there's still a great team there that are carrying that on.

00:34:37.020 --> 00:34:40.020
You know, it wasn't a case of me leaving and it all stopped.

00:34:40.020 --> 00:34:42.020
It's still very much all continuing.

00:34:42.020 --> 00:34:44.020
They're still making big strides with stuff there.

00:34:44.020 --> 00:34:46.020
So that's really nice to see.

00:34:46.020 --> 00:34:49.020
And in fact, I think they've done a few of the rewrites that I was hoping to do there,

00:34:49.020 --> 00:34:54.020
which is why I ended up going to Toro Rosso is because rewrote a lot of the bash into Python.

00:34:54.020 --> 00:35:05.020
I really wanted to rewrite that PHP web app because kind of I've done as much as I could by slapping a kind of single page application on the top of an existing PHP site.

00:35:05.020 --> 00:35:08.020
And I really wanted to actually use Django.

00:35:08.020 --> 00:35:14.020
I'd made the proposal there to replace it with Django because we were already very invested with Python at that point.

00:35:14.020 --> 00:35:18.020
So, yeah, the I got a phone call one night from someone at Toro Rosso.

00:35:18.020 --> 00:35:20.020
So it's amazing how this works in Formula One.

00:35:20.020 --> 00:35:22.020
Like there's a lot of churn between the teams.

00:35:22.020 --> 00:35:27.020
So I got a call saying, oh, we heard that you've translated a lot of stuff from bash to Python.

00:35:27.020 --> 00:35:30.020
We're looking to replace our processes as well.

00:35:30.020 --> 00:35:31.020
Would you be interested?

00:35:31.020 --> 00:35:37.020
I sort of said, well, yeah, I've been waiting for a while to get the go ahead to do this at Force India.

00:35:37.020 --> 00:35:40.020
So I'll come and I'll try it here instead.

00:35:40.020 --> 00:35:41.020
So, yeah.

00:35:41.020 --> 00:35:42.020
Yeah, that's really cool.

00:35:42.020 --> 00:35:48.020
What I think is really interesting about that transition is like you've got to bump up against all the challenges.

00:35:48.020 --> 00:35:55.020
And, you know, you made a lot of progress at the first company, but it was still stuck in the kind of the way it was before.

00:35:55.020 --> 00:36:03.020
And here's a chance to say, all right, if I could reinvent that world and do it the way I now know it should be done.

00:36:03.020 --> 00:36:03.020
Exactly.

00:36:03.020 --> 00:36:04.020
Like that was your chance here.

00:36:04.020 --> 00:36:05.020
Right.

00:36:05.020 --> 00:36:09.020
Which most people, I don't really think, get a chance to kind of put those two things side by side.

00:36:09.020 --> 00:36:10.020
So what was that like?

00:36:10.020 --> 00:36:11.020
Yeah, I agree.

00:36:11.020 --> 00:36:17.020
I mean, I fully appreciate why Force India didn't just want to start everything from scratch because everything's much better than it was four years ago.

00:36:17.020 --> 00:36:19.020
So why do we need to keep going?

00:36:19.020 --> 00:36:22.020
So, yeah, it was it was really a good opportunity.

00:36:22.020 --> 00:36:29.020
I really had been that sort of planning how I might do it from scratch in my head, especially facilitating Django.

00:36:29.020 --> 00:36:31.020
Like at the time Django was becoming quite popular.

00:36:31.020 --> 00:36:38.020
And I'd kind of got fed up with writing inline SQL in Python and PHP at that point.

00:36:38.020 --> 00:36:40.020
It's not really great either in any place.

00:36:40.020 --> 00:36:46.020
No, luckily it's everything's fairly sort of secure and tied down in that environment.

00:36:46.020 --> 00:36:47.020
Very much air gapped.

00:36:47.020 --> 00:36:49.020
There's no there's no Internet connectivity.

00:36:49.020 --> 00:36:50.020
So no little Bobby tables.

00:36:50.020 --> 00:36:51.020
Exactly.

00:36:51.020 --> 00:36:52.020
Do you know that?

00:36:52.020 --> 00:36:53.020
Yeah, exactly.

00:36:53.020 --> 00:36:54.020
Yeah, yeah.

00:36:54.020 --> 00:36:56.020
It would have to be an aerodynamicist doing it.

00:36:56.020 --> 00:36:59.020
It would be interesting to see if they could put SQL injection into a CAD model.

00:36:59.020 --> 00:37:01.020
That would be quite a feat.

00:37:01.020 --> 00:37:02.020
Indeed.

00:37:02.020 --> 00:37:05.020
So tell us about like when you had this perspective, this chance to kind of redo things.

00:37:05.020 --> 00:37:07.020
Tell us tell us about that journey.

00:37:07.020 --> 00:37:16.020
So, yeah, my main goal really was to kind of bring together both the web app side and the side that was running all of the simulation side.

00:37:16.020 --> 00:37:27.020
So as we've said at 14 year, it was very much you had a bunch of code that was running these discrete steps through the cluster and then spat out some data at the end, which was then picked up by the web front end.

00:37:27.020 --> 00:37:32.020
What I really wanted to do was make that much more of a single application, probably behemoth.

00:37:32.020 --> 00:37:40.020
And to leverage a lot of the stuff that Django gave you like the ORM, for example, is a real interest from my perspective.

00:37:40.020 --> 00:37:43.020
You know, having your database written out in code.

00:37:43.020 --> 00:37:43.020
Yeah.

00:37:43.020 --> 00:37:44.020
Or sometimes get a bad rap.

00:37:44.020 --> 00:37:49.020
I did a bad rap, but I feel like 80% of the time it's absolutely like no, no contest.

00:37:49.020 --> 00:37:51.020
Like it should just obviously be the thing used.

00:37:51.020 --> 00:37:55.020
And every now and then it maybe it's not the right answer, but that's not the main case.

00:37:55.020 --> 00:37:57.020
It's so nice to work with those things.

00:37:57.020 --> 00:37:58.020
I agree.

00:37:58.020 --> 00:38:02.020
Especially when you have a lot of relational data like we would have.

00:38:02.020 --> 00:38:06.020
So, of course, we have an overarching object, which is the simulation you just run.

00:38:06.020 --> 00:38:17.020
And that's connected to hundreds of discrete fields and rows all over different tables, which to manage in your mind, something that's not committable, as it were, is not nice.

00:38:17.020 --> 00:38:20.020
Having it all nicely laid out in Python.

00:38:20.020 --> 00:38:26.020
And of course, your Python linter can check that what you're doing is saying passing objects around on the face of it.

00:38:26.020 --> 00:38:31.020
So, yeah, it makes that not just easier, but in my mind, a lot, a lot safer as well.

00:38:31.020 --> 00:38:41.020
Yeah, there was some, I don't know where they got the data, if it's like some internal research or just internal keeping a record of how many bugs there were.

00:38:41.020 --> 00:38:50.020
When I talked to Lucas Lange from his time at Facebook and Instagram, and they converted a whole bunch of stuff to have type hints, basically so the system could know what's going on.

00:38:50.020 --> 00:39:00.020
And they said they dropped the number of bugs that they run into quite a bit down by just having that kind of how does this hang together type of analysis in there like you're talking about.

00:39:00.020 --> 00:39:07.020
Yeah, I can definitely see that. Like the moment that type hinting became a first class citizen in Python, I was straight on it.

00:39:07.020 --> 00:39:11.020
Because it does just, as you say, all the silly things that people do it.

00:39:11.020 --> 00:39:16.020
I mean, not all of them, but it gets rid of a lot of the silly mistakes you make a lot more than you first think as well.

00:39:16.020 --> 00:39:21.020
Yeah, many of them. Yeah, for sure. Yeah, I'm with you. It's fantastic.

00:39:21.020 --> 00:39:30.020
Yeah, and the ORM is doing that for you on a database level. And it just means you don't have to keep creating DB connections in code all over the place.

00:39:30.020 --> 00:39:36.020
If you've got part of your application that needs to access the database, it's just an object to Python's view.

00:39:36.020 --> 00:39:41.020
So it just to me, it simplifies so much of that environment that I was very happy to use it.

00:39:41.020 --> 00:39:46.020
Nice. So you rebuilt a lot of that workflow over that PHP sort of static site thing.

00:39:46.020 --> 00:39:47.020
Exactly.

00:39:47.020 --> 00:39:55.020
In Django. And that sounds like it was a really good experience, right? Like what was the contrast between like a PHP site and Django?

00:39:55.020 --> 00:40:04.020
To me, I think PHP has moved on quite a lot now. At the time when I was using it, it was mostly just a templating language, or at least we were using it as such.

00:40:04.020 --> 00:40:09.020
Right. In 2010, it probably was already not brand new at that point, right? It probably had been...

00:40:09.020 --> 00:40:10.020
Exactly.

00:40:10.020 --> 00:40:14.020
...around for a little while. So we're talking like 2005 PHP or something along those lines, right?

00:40:14.020 --> 00:40:16.020
Probably, yes. So it...

00:40:16.020 --> 00:40:17.020
Yeah, okay.

00:40:17.020 --> 00:40:22.020
It was a massive difference. So it was all of the front end was defined effectively in PHP.

00:40:22.020 --> 00:40:28.020
I then slapped on a bunch of JavaScript to try and make it a bit more of an SPA, but it never...

00:40:28.020 --> 00:40:30.020
Obviously, that's... there's a limit to that.

00:40:30.020 --> 00:40:41.020
I wanted to make this new sort of management site completely first class SPA, because when you're dealing with so many different objects on your webpage,

00:40:41.020 --> 00:40:45.020
being updated constantly, the simulation is spitting out new data every few seconds.

00:40:45.020 --> 00:40:50.020
And if you want to track that, you don't want to be sat there refreshing the page every couple of minutes.

00:40:50.020 --> 00:40:52.020
Right. Yeah, it sounds super cool.

00:40:52.020 --> 00:40:54.020
What JavaScript framework did you pick?

00:40:54.020 --> 00:41:00.020
In the end, Durandal, which isn't that well known. The guy who wrote it now works at Microsoft and has...

00:41:00.020 --> 00:41:02.020
I've heard of it, but I've never used it. Yeah.

00:41:02.020 --> 00:41:05.020
So it's now... it's been sort of superseded by Aurelia.

00:41:05.020 --> 00:41:09.020
I think of the guy's name. I think it's Eisenberg is that name?

00:41:09.020 --> 00:41:10.020
Mm-hmm.

00:41:10.020 --> 00:41:11.020
But just look up Aurelia.

00:41:11.020 --> 00:41:12.020
Rob Eisenberg. Is that right?

00:41:12.020 --> 00:41:14.020
That's the one. Yeah, exactly.

00:41:14.020 --> 00:41:14.020
Yeah.

00:41:14.020 --> 00:41:24.020
And the reason why I liked it is because it's not very intrusive. If you know JavaScript, you'll get along very well with Aurelia or Durandal, because it just looks like JavaScript.

00:41:24.020 --> 00:41:38.020
You're just making observable variables effectively. Whereas we played around with Angular for a bit when it just felt like I was writing something completely new and didn't really want to spend time learning completely new world effectively.

00:41:38.020 --> 00:41:41.020
Yeah, for sure. I had the same sort of feeling about Angular.

00:41:41.020 --> 00:41:52.020
Yeah. So it was like, especially for what we were doing, I found it a great front end toolkit, honestly. And all the stuff I'd done at Force India, I'd written pretty much from scratch.

00:41:52.020 --> 00:42:06.020
A lot of jQuery to Polyfill because we had a mix of Internet Explorer on the Windows machines and Firefox on all the Linux machines. But mostly it was all from scratch, which I didn't want to do again, because again, that has limitations pretty quickly.

00:42:06.020 --> 00:42:07.020
Of course.

00:42:07.020 --> 00:42:20.020
So we didn't use much of the Django templating itself. So we weren't creating that many static pages with Django. We were mostly using the views as an API server, and we would just serve up this SPA on first.

00:42:20.020 --> 00:42:23.020
Right, just basically teach the views to return JSON and you're good.

00:42:23.020 --> 00:42:24.020
Exactly.

00:42:24.020 --> 00:42:25.020
Something like that.

00:42:25.020 --> 00:42:25.020
Yeah.

00:42:25.020 --> 00:42:26.020
Okay.

00:42:26.020 --> 00:42:35.020
So one thing that you put in the notes here that I think is super interesting is that you had some of the views were like performance critical, and they were backed by CPI object.

00:42:35.020 --> 00:42:36.020
Yes.

00:42:36.020 --> 00:42:37.020
So what is this?

00:42:37.020 --> 00:42:37.020
What is this?

00:42:37.020 --> 00:42:38.020
Tell me about this.

00:42:38.020 --> 00:42:40.020
So I'm trying to think precisely what it was doing.

00:42:40.020 --> 00:42:47.020
It was basically just collecting a bunch of numbers and then either multiplying them together or doing some function on a bunch of numbers.

00:42:47.020 --> 00:42:58.020
And yeah, that was taking too long for Python to do on its own. So we ended up basically writing that in C using py object. And then obviously, you can just import that.

00:42:58.020 --> 00:42:59.020
Right, exactly.

00:42:59.020 --> 00:43:10.020
You can use the code to do on your Django view, which is really, really nice. And it sped up the function massively. And that was a function that was called multiple times in a page load, which isn't the nicest thing to do, but it had to be done.

00:43:10.020 --> 00:43:13.020
So like the page load speed was improved dramatically.

00:43:13.020 --> 00:43:14.020
Absolutely.

00:43:14.020 --> 00:43:26.020
I think that's a really interesting escape hatch because Python is so nice for so many things. But there are certain things where it's just kind of slow out, right? And a lot of the libraries that get used in those places like NumPy and whatnot, they actually just fall back to C.

00:43:26.020 --> 00:43:27.020
Exactly.

00:43:27.020 --> 00:43:40.020
Internally, you just don't have to think about it, right? But this ability to say, Oh, I'm going to rewrite this in C or in Rust or something just for this little tiny bit, like you don't have to write the whole thing in it. Just this, you know, 10 lines or 20 lines or whatever it is.

00:43:40.020 --> 00:43:50.020
Yeah, and that's all it was. I think we wrote it once, piled it, shipped it. And then I think there's one alteration done a month later. And that was it. It just sat there for years. And we never touched it again.

00:43:50.020 --> 00:44:02.020
Beautiful. Yeah, the reason it's so interesting to me is because I often think about this in the terms of like a data science computation, right around those tools. Sure, they would do but like in terms of Django, it's just interesting to see it there. It's cool.

00:44:02.020 --> 00:44:19.020
Yeah, because we were using Django for pretty much everything except the actual driving of the simulations themselves. So we used Celery quite extensively for queuing and running micro tasks. So the simulations at this point, we're actually kicking off a bunch of Celery tasks to go and extract data, etc, etc.

00:44:19.020 --> 00:44:36.720
etc, etc. So it was we had two very big, not quite as big as the nodes that I'd mentioned before, but two very big nodes running this Django app across the two of them. And just having Django manage all of that with the fact that we can just import the ORM to dump data into the database was really, really nice.

00:44:36.720 --> 00:44:41.620
Sounds super cool. Another thing this time sounds like you got to displace was a little bit of MATLAB.

00:44:41.620 --> 00:44:53.320
Yeah, so that's the sort of small work I did with the vehicle science side of things. Basically, I think any software developers job in F1 is either replacing Bash, Excel or MATLAB, because

00:44:53.320 --> 00:44:56.580
Yeah, one of the people can replace one of the three pick one, right?

00:44:56.580 --> 00:45:12.000
I did. Yeah, I managed to do all three, actually. Believe it or not, quite a few teams as of recently were running wind tunnels off out of Excel, which is I still whoever wrote the VB to make that work is insane and a genius at the same time.

00:45:12.000 --> 00:45:14.620
Like it's a mad genius.

00:45:14.980 --> 00:45:17.820
It's on the line for sure between the two.

00:45:17.820 --> 00:45:31.620
Yeah, I was I interviewed Kane Replical from Richard Childress Racing, the NASCAR team and talked about the stuff he was doing with wind tunnels there as well. And yeah, it was like an insane amount of Excel they are doing over there in NASCAR as well.

00:45:31.620 --> 00:45:43.060
Like, yeah, I mean, if you have the tool, and you don't really know programming that well, but like, if we put it here, we can like, ease it together. I could see how you kind of put yourself into that corner of like, well, it works over here. But exactly.

00:45:43.060 --> 00:45:44.540
Oh my gosh, is it slow and hard, right?

00:45:44.540 --> 00:45:54.260
Again, it was when you had people who'd only ever used Excel, who were starting the teams, or at least coming into the teams when technology was picking up, you know, this is what they picked, that's what they knew.

00:45:54.260 --> 00:45:54.700
Yeah.

00:45:54.700 --> 00:46:12.500
And you soon outpace that. I mean, you know, obviously, Excel gets quite flaky when you put this level of data in. But then also you have the problems, you've got one instance that you can open, and that's it. So you had the situation where someone in the office next door would open your Excel sheet, and then the wind tunnel would stop

00:46:12.500 --> 00:46:15.800
adding data to the sheet because someone else had opened it.

00:46:16.180 --> 00:46:20.060
Because Excel took a lock on that file, and that can't be written to or something like that, right? Yeah.

00:46:20.060 --> 00:46:20.940
Oh, gosh.

00:46:20.940 --> 00:46:24.960
Exactly. It works while it worked. And then we were very happy to overwrite it.

00:46:25.160 --> 00:46:42.760
I mean, as much fun as it is to like make fun of Excel, and there's like all these examples of minor Excel errors leading to really catastrophic decisions, like large investments that were very bad and all sorts of stuff. But it's also I think it's also worth just admiring, like you said, okay, these people came from here, and they just knew Excel.

00:46:42.760 --> 00:46:43.360
Yeah.

00:46:43.640 --> 00:46:51.460
But they built this, this simulation thing, when they didn't really know programming or programming language, and they still did it like that's pretty awesome.

00:46:51.460 --> 00:46:58.480
Yeah, no, I agree. And you know, that applies to the bash stuff as well. I don't think I've met many developers that could sit down and write 10,000 lines of bash.

00:46:59.320 --> 00:47:03.840
You know, and I don't know I could do it. I might quit before I got to 10,000.

00:47:03.840 --> 00:47:10.780
And it worked pretty well for five or 10 years. It's certainly impressive in its own right.

00:47:10.780 --> 00:47:17.180
Yeah. So a lot of these things are both Yeah, like a lot of these are both like, triumphs, but also it's like time to move on, right?

00:47:17.180 --> 00:47:17.680
Exactly.

00:47:17.680 --> 00:47:18.280
Yeah.

00:47:18.280 --> 00:47:19.280
So I think Matt,

00:47:19.280 --> 00:47:22.980
I'm so sorry, I sort of derailed you from this MATLAB thing. So tell me about it.

00:47:22.980 --> 00:47:23.960
No, no, that's good.

00:47:24.460 --> 00:47:38.960
I'd say that the MATLAB side, unlike the other two, we wanted to replace bash and XL because of the obvious limitations. But the reason that we wanted to replace MATLAB was, I mean, purely the cost and the cost for what you gain from MATLAB.

00:47:38.960 --> 00:47:50.500
You know, MATLAB can be very good when you're doing very complex things. It can simulate discrete or even bits of electronics if you want it to. So we have people that will make a model for how a tire deforms.

00:47:50.500 --> 00:47:55.700
And then that becomes a component in MATLAB. And, you know, it's nice that you can then share that with other people in the company.

00:47:55.700 --> 00:47:56.200
Right.

00:47:56.200 --> 00:48:10.780
But a lot of the stuff they, you know, do is just analyzing the how many times a tire heats up and cools down during a lap and what window of temperature it sits in. And you just don't need to be paying several thousand dollars a year to do to work that out.

00:48:11.500 --> 00:48:16.560
Well, and it also gets harder to run in situations like, say, with Docker or other stuff, right?

00:48:16.560 --> 00:48:23.400
Like, yeah, if you want to put it on a server or scale it out, all of a sudden you're like, well, we got to get approval to run it on 10 machines instead of one.

00:48:23.400 --> 00:48:27.840
It's not even necessarily a cost. It's just like, why is this friction here?

00:48:27.840 --> 00:48:28.220
Yes.

00:48:28.220 --> 00:48:30.140
If I can just as equally do it somewhere else.

00:48:30.140 --> 00:48:37.020
Yeah, exactly. And you had times where race engineer might drop their laptop and get a new one set up at a race weekend.

00:48:37.020 --> 00:48:41.560
But their MATLAB license was tied to the old laptop, so they couldn't get that immediately.

00:48:41.560 --> 00:48:42.900
So that was a problem.

00:48:43.200 --> 00:48:50.180
So the job was basically just to work with the vehicle science department to make a few Python scripts.

00:48:50.180 --> 00:48:54.640
Effectively, they were just, you know, it weren't much more than just scripts to replace as much of MATLAB as we could.

00:48:54.640 --> 00:48:58.660
And really, it was just me teaching them the basics of sort of NumPy, Matplotlib.

00:48:58.660 --> 00:49:01.040
And then they just took it and ran with it.

00:49:01.040 --> 00:49:01.760
Yeah, beautiful.

00:49:01.760 --> 00:49:05.480
And you can do, there's so much of NumPy that replaces Matplotlib.

00:49:06.000 --> 00:49:12.080
And as you say, not only is it something that they can do on any laptop, you can then start actually scheduling it as well.

00:49:12.080 --> 00:49:16.520
So rather than having to manually run it every lap or whatever, they can just schedule it to do that.

00:49:16.520 --> 00:49:22.600
Yeah. So you replace MATLAB with NumPy and Excel with Pandas and you're kind of good, right?

00:49:22.600 --> 00:49:25.720
Exactly. You're at the races, quite literally.

00:49:25.720 --> 00:49:27.380
You're off to the races. Beautiful.

00:49:27.380 --> 00:49:34.820
Yeah. So that sounds like a really fun project you did for like three or four years to just go, okay, what if we started over?

00:49:34.820 --> 00:49:38.220
What if we really built what we wanted instead of what we were able to do?

00:49:38.220 --> 00:49:44.900
And yeah, how did people in your department and at the team react to seeing that sort of transform?

00:49:44.900 --> 00:49:46.640
So it was a good mix.

00:49:46.640 --> 00:49:53.740
One of the things I really enjoyed about working in F1 is you're sat next to your customers, which I know might sound off-putting, but honestly, it was great.

00:49:53.740 --> 00:49:54.700
No, it's super cool.

00:49:54.700 --> 00:50:03.440
If somebody came over and like, this is beautiful what you built, but if you could just do it slightly just like this, instead of, you know, well, next release, like, okay, give me five minutes.

00:50:03.640 --> 00:50:03.880
Yeah.

00:50:03.880 --> 00:50:05.140
Let me make that tweak.

00:50:05.140 --> 00:50:07.040
And then they're like, yeah, this is fantastic.

00:50:07.040 --> 00:50:07.520
Exactly.

00:50:07.520 --> 00:50:08.920
Right. That's a cool experience.

00:50:08.920 --> 00:50:09.600
I've had that too.

00:50:09.600 --> 00:50:33.040
And just seeing someone's face light up when you've gone from a very static web page where you're, you know, having to load literally an x-axis by x-axis of plots to being able to literally just add a click of a button, change the variable on one axis, change what position in the car that plot is looking at, then say, save that, add another one to the page, compare the two, you know, overlay them, etc.

00:50:33.040 --> 00:50:37.760
It's great to sit and see that, you know, everyone in Formula One is under a lot of pressure.

00:50:37.760 --> 00:50:43.280
So anything, anything that you can do to help take that pressure off people, they're going to appreciate it very quickly.

00:50:43.280 --> 00:50:43.640
Yeah.

00:50:43.800 --> 00:50:46.640
And anything that helps them find performance because then they look good.

00:50:46.640 --> 00:50:53.640
Sadly, I'm not that they're getting a pat on the back for someone designing a great new bit of aero that's adding time to the car.

00:50:53.640 --> 00:50:58.420
But it is nice to know that the processes I've put in place has enabled them to do it.

00:50:58.660 --> 00:50:59.560
Yeah, super cool.

00:50:59.560 --> 00:51:00.920
Are you still a fan of F1?

00:51:00.920 --> 00:51:02.040
Do you watch it these days?

00:51:02.040 --> 00:51:06.720
Not as much as I just found out, but I have, I think it's ESPN in the US.

00:51:06.720 --> 00:51:08.060
So I moved to the US recently.

00:51:08.060 --> 00:51:14.560
So I'm still getting my bearings on how to find various TV shows and things I want to watch.

00:51:14.560 --> 00:51:21.920
So I watched Imola and Portuguese Grand Prix, mainly because they're two very exciting tracks for me.

00:51:21.920 --> 00:51:25.680
The Toroso factory is very close to Imola.

00:51:25.680 --> 00:51:26.260
All right.

00:51:26.420 --> 00:51:28.800
So I've walked the track quite a few times.

00:51:28.800 --> 00:51:31.000
I've been to coffee outside the track many times.

00:51:31.000 --> 00:51:33.100
Or I always wanted to do a track day there.

00:51:33.100 --> 00:51:35.120
And sadly, the stars never aligned.

00:51:35.120 --> 00:51:36.040
That would have been fun.

00:51:36.040 --> 00:51:37.880
But it would have been.

00:51:37.880 --> 00:51:40.700
I probably would have got a bit too excited and ended up crashing.

00:51:40.700 --> 00:51:44.140
But it was a particularly nice track.

00:51:44.140 --> 00:51:46.780
So one that I was very keen to get some time on.

00:51:46.780 --> 00:51:47.780
There's still hope.

00:51:47.780 --> 00:51:49.580
I still have friends that live near there.

00:51:49.580 --> 00:51:52.980
So maybe I'll pay and do a proper track day.

00:51:52.980 --> 00:51:54.980
You might make it back there and get there.

00:51:54.980 --> 00:51:55.400
Yeah.

00:51:55.620 --> 00:51:55.880
Yeah.

00:51:55.880 --> 00:51:57.260
I've been back since leaving.

00:51:57.260 --> 00:52:01.020
I've been back there a couple of times, actually, for sort of mini holidays and things.

00:52:01.020 --> 00:52:08.660
And you can go and rent budget race cars there to do a few laps in, which I might do hopefully after the pandemic clears up.

00:52:08.660 --> 00:52:09.180
Yeah.

00:52:09.180 --> 00:52:09.980
That sounds fantastic.

00:52:09.980 --> 00:52:10.800
I'd love to do that, too.

00:52:10.800 --> 00:52:11.300
All right.

00:52:11.320 --> 00:52:12.360
So one final question.

00:52:12.360 --> 00:52:16.120
I kind of want to put all these pieces together and get your thoughts on it.

00:52:16.120 --> 00:52:20.120
So this racing world, my sense is like, it's pretty high pressure.

00:52:20.120 --> 00:52:21.220
It's high stress.

00:52:21.220 --> 00:52:22.560
It demands a lot of your time.

00:52:22.560 --> 00:52:24.640
And you talked about these events, right?

00:52:24.640 --> 00:52:28.340
Like the software has to be ready to deliver on a date.

00:52:28.340 --> 00:52:30.660
And it's not like, well, we'll push the release a week.

00:52:30.660 --> 00:52:31.240
Right.

00:52:31.240 --> 00:52:32.800
It's got to be there for that thing.

00:52:32.800 --> 00:52:33.080
Right.

00:52:33.680 --> 00:52:40.260
And now you're working for a tech company building almost like an operating system layer for deployment.

00:52:40.260 --> 00:52:41.300
Yeah.

00:52:41.680 --> 00:52:43.160
What's that comparison look like?

00:52:43.160 --> 00:52:48.820
Like if people are in one and they want to think about the other, like what your two worlds look like in those times.

00:52:48.820 --> 00:52:54.980
So certainly my work life balance has shifted towards life quite a lot, which is nice.

00:52:54.980 --> 00:52:58.240
I mean, it was a great seven odd years that I spent.

00:52:58.240 --> 00:52:59.420
I learned a lot.

00:52:59.420 --> 00:53:01.280
And the pressure was a good thing to learn a lot.

00:53:01.280 --> 00:53:02.940
It was the right amount to help there.

00:53:02.940 --> 00:53:09.500
But it's the kind of the any way I can think to describe it was move fast, but don't break things, basically.

00:53:09.500 --> 00:53:12.860
So we had to anything that went wrong, we had to fix quick.

00:53:12.860 --> 00:53:13.260
Right.

00:53:13.260 --> 00:53:16.500
We weren't towards the latter time at Toroso.

00:53:16.500 --> 00:53:27.120
We tried to get some sort of like real sprint planning going forward rather than just kind of picking stuff that was being shouted at the loudest or shouted for the loudest.

00:53:27.120 --> 00:53:31.000
So we tried to get some more calm and some stability.

00:53:31.000 --> 00:53:37.020
But ultimately, if something's broken, unfortunately, the things that would break wouldn't usually be our tools.

00:53:37.020 --> 00:53:40.900
It would be maybe the company that we'd paid to write the simulation software.

00:53:40.900 --> 00:53:42.320
Something would change in that.

00:53:42.320 --> 00:53:45.620
And we had to rewrite the function that read data from it.

00:53:45.620 --> 00:53:50.780
So that stuff had to obviously happen very quickly when it does go wrong because you just can't waste a minute.

00:53:51.140 --> 00:54:01.480
Or if there's, you know, a node goes down because there's a problem in the data center or something, we have to mitigate that really, really fast, as well as delivering all of these fancy new toys that we've promised.

00:54:01.480 --> 00:54:03.800
And they can't break either.

00:54:04.700 --> 00:54:05.680
So it is nice.

00:54:05.680 --> 00:54:08.480
Oddly, we did barely any integration testing.

00:54:08.480 --> 00:54:10.880
It was never really on our agenda.

00:54:10.880 --> 00:54:14.340
It was more sort of get as many features out as possible.

00:54:14.500 --> 00:54:20.780
And I have to admit, I do much prefer now being somewhere where testing is mandatory, you know.

00:54:20.780 --> 00:54:23.880
A little more of a safety net.

00:54:23.880 --> 00:54:24.560
Exactly.

00:54:24.560 --> 00:54:31.820
It's a lot more reassuring to hit the release button when it's been through at least some agreed upon tests rather than just being like, well, I've tested this on my laptop.

00:54:31.820 --> 00:54:33.100
You know, my work laptop.

00:54:33.100 --> 00:54:34.980
Hopefully it will work on everyone else's.

00:54:34.980 --> 00:54:35.520
Exactly.

00:54:35.520 --> 00:54:36.600
It works on my machine.

00:54:36.600 --> 00:54:37.020
We're good.

00:54:37.020 --> 00:54:37.600
Exactly.

00:54:37.600 --> 00:54:38.380
Chip it.

00:54:38.380 --> 00:54:39.560
Nice.

00:54:39.560 --> 00:54:40.000
Cool.

00:54:40.180 --> 00:54:47.780
Yeah, if anyone's thinking about going into, you know, that industry, then it's going to be intense for sure.

00:54:47.780 --> 00:54:50.640
If you can thrive off that environment, then you're going to love it.

00:54:50.640 --> 00:54:57.500
I think a lot of people are in the kind of mindset that they can thrive on it for a while and then they just need to have a bit of a break for a while.

00:54:57.500 --> 00:55:00.500
Some people have put up with it for 20, 30 years.

00:55:00.500 --> 00:55:07.080
You know, I've worked with some people who have been in F1 for that kind of length of time and we're still loving it, which is great to see.

00:55:07.080 --> 00:55:08.400
Yeah, good for them, right?

00:55:08.800 --> 00:55:13.780
I'm a big believer that careers go in sort of seasons, right?

00:55:13.780 --> 00:55:21.800
There's part of your life where you might be young and energetic and you don't have a large family time commitment and something like this would just be perfect.

00:55:21.800 --> 00:55:25.180
But then that same person 10 years later might actually hate it, right?

00:55:25.180 --> 00:55:26.440
They don't want to be away from the family.

00:55:26.440 --> 00:55:30.280
They don't want to be away from a home or like there's just...

00:55:30.280 --> 00:55:32.820
It depends where you are, not just who you are, I think.

00:55:32.820 --> 00:55:34.200
Like where you are in your career, yeah.

00:55:34.200 --> 00:55:34.860
Exactly.

00:55:35.340 --> 00:55:37.480
And it's been nice working with different things.

00:55:37.480 --> 00:55:41.660
So we never really exploited Kubernetes in either of the teams that I work for.

00:55:41.660 --> 00:55:46.580
It was something that we were starting to look at, but most of our provisioning was bare metal provisioning.

00:55:46.740 --> 00:55:58.040
So to have a software layer on top of that, we were talking earlier about the operations per cycle limits, like having a bunch of virtual networks that Kubernetes put together on top of that is just going to suck cycles away.

00:55:58.040 --> 00:55:58.440
Right.

00:55:58.640 --> 00:56:04.960
So we were thinking about doing that with the Django app, actually, to put that in a Kubernetes cluster across those two nodes.

00:56:04.960 --> 00:56:08.200
But, you know, in the end, Docker Swarm was plenty for that.

00:56:08.200 --> 00:56:09.800
There's no need to complicate that further.

00:56:09.800 --> 00:56:10.440
Right.

00:56:10.440 --> 00:56:12.780
There's always the opportunity to, but...

00:56:12.780 --> 00:56:13.460
That's right.

00:56:13.460 --> 00:56:13.940
There is.

00:56:13.940 --> 00:56:19.160
Well, that's a super interesting look inside of your time in F1 and the Python.

00:56:19.160 --> 00:56:21.740
It sounds like Python played a super significant role there.

00:56:21.980 --> 00:56:22.860
Yeah, definitely.

00:56:22.860 --> 00:56:30.280
I'm fairly confident that the majority of teams are pretty deep into Python now, purely because it works great.

00:56:30.280 --> 00:56:37.780
It's the kind of blue code that you need to be driving these kind of commercial softwares that are used for each stage of simulation.

00:56:37.780 --> 00:56:42.560
You can then, with the same bit of code, start making a bunch of images and plots.

00:56:42.560 --> 00:56:44.480
You can have your web server running in it.

00:56:44.480 --> 00:56:49.080
It's so kind of diverse in that sense and fairly easy to pick up.

00:56:49.140 --> 00:57:01.000
I should mention that although I was the kind of primary software engineer at both teams, for the aerodynamics department at least, you know, I had a lot of input from people who trained as aerodynamicists but wanted to learn Python.

00:57:01.000 --> 00:57:03.820
And, you know, for the most part, found it quite easy.

00:57:03.820 --> 00:57:06.360
What is this magic that you're wielding over here?

00:57:06.360 --> 00:57:08.180
Exactly.

00:57:09.680 --> 00:57:22.500
For example, if you wanted a certain picture to be made that we weren't currently making, an aerodynamicist could just sit down, change a few lines of code, push it into a Git branch, and we could have that running in a couple of hours, which is really powerful.

00:57:22.500 --> 00:57:31.060
To give someone the ability just to say, right, I want this to be added to this big chain of steps, and it just works.

00:57:31.060 --> 00:57:31.540
Yeah.

00:57:31.540 --> 00:57:32.420
Super cool.

00:57:33.100 --> 00:57:33.340
All right.

00:57:33.340 --> 00:57:36.280
Well, I think we're out of time, but it's definitely a neat look inside.

00:57:36.280 --> 00:57:40.740
Now, before I let you hire you, though, I've got to ask you the two questions that go at the end, of course.

00:57:40.740 --> 00:57:41.320
Sure.

00:57:41.320 --> 00:57:43.900
If you're going to write some Python code, what editor do you use?

00:57:44.120 --> 00:57:45.560
So now I use VS Code.

00:57:45.560 --> 00:57:48.920
I'll admit that I used PyCharm through my whole F1 career.

00:57:48.920 --> 00:57:49.280
Yeah.

00:57:49.280 --> 00:57:49.880
All right.

00:57:49.880 --> 00:57:52.680
And I've been pulled over to the VS Code side.

00:57:52.680 --> 00:57:53.400
Interesting.

00:57:53.400 --> 00:57:53.640
Yeah.

00:57:53.640 --> 00:57:55.560
And I think it's down to those two these days.

00:57:55.560 --> 00:57:57.140
Like, those are the most popular answers.

00:57:57.140 --> 00:58:02.460
It used to be a lot more variety when I started the show, but now it seems to be settling into those two camps.

00:58:02.460 --> 00:58:03.500
So, yeah.

00:58:03.500 --> 00:58:08.820
And then a notable PyPI package, something that's cool that you've run across that maybe people should know about.

00:58:08.900 --> 00:58:09.300
Yeah.

00:58:09.300 --> 00:58:16.800
So I've been writing some tests recently, and I had a function that I didn't really that would run a part of this code.

00:58:16.800 --> 00:58:21.600
And basically, it would take a while for the application running behind it to settle.

00:58:21.600 --> 00:58:23.900
And I didn't really want to put a bunch of sleeps in there.

00:58:23.900 --> 00:58:25.060
That just seemed bad.

00:58:25.060 --> 00:58:27.560
And I didn't want to write my own back off loop.

00:58:27.560 --> 00:58:30.180
So basically, I found that there's a package called back off.

00:58:30.180 --> 00:58:38.400
And you could just decorate methods or functions that you want to be backed off and then provide a bunch of parameters, like how many times you want it to try.

00:58:38.400 --> 00:58:41.580
How long you want it to wait before the next attempt.

00:58:41.580 --> 00:58:42.580
It was really nice.

00:58:42.580 --> 00:58:46.820
You just literally put the one decorator around your function and it's done.

00:58:46.820 --> 00:58:47.880
Yeah, that's really cool.

00:58:47.880 --> 00:58:53.740
And you can do things like back off on exception of these types of exceptions, then just slow down and try it again.

00:58:53.740 --> 00:58:54.820
And so on.

00:58:54.820 --> 00:58:55.880
Yeah, it's really nice.

00:58:55.880 --> 00:58:57.580
Especially for writing tests.

00:58:57.580 --> 00:58:59.620
Some kind of like too many requests.

00:58:59.620 --> 00:59:01.040
You know, what is that?

00:59:01.040 --> 00:59:02.960
Some 400 error, right?

00:59:02.960 --> 00:59:04.380
Like there's someone that says too many requests.

00:59:04.380 --> 00:59:06.180
That one, let's just slow it down a little.

00:59:06.180 --> 00:59:12.200
Yeah, so if anyone's dealt with the AWS API and has got that, the rate limiter from there, this is a great library for that.

00:59:12.200 --> 00:59:12.860
Okay, cool.

00:59:12.860 --> 00:59:13.500
Yeah, it's a great one.

00:59:13.500 --> 00:59:14.560
And I hadn't heard of that before.

00:59:14.560 --> 00:59:14.980
Very neat.

00:59:14.980 --> 00:59:16.360
All right, final call to action.

00:59:16.360 --> 00:59:18.240
I'll give you two angles here.

00:59:18.240 --> 00:59:23.900
One, if people want to get into some kind of racing career with software development skills, what should they do?

00:59:23.980 --> 00:59:28.600
And then maybe getting started with your Kubernetes charms, charmed Kubernetes stuff.

00:59:28.600 --> 00:59:29.340
Sure.

00:59:29.340 --> 00:59:35.660
So if someone wants to get into, I mean, the Formula One software development side, there's really two approaches.

00:59:35.660 --> 00:59:44.420
I think most of the aerodynamic and the sort of wind tunnel, well, both the CFD and the wind tunnel side will be Python these days.

00:59:44.420 --> 00:59:47.640
A lot of C# is being used in Formula One now as well.

00:59:47.640 --> 00:59:53.780
So if there's anyone who's got a taste for C#, anything that's done on Windows will be written in C# now.

00:59:53.780 --> 01:00:00.760
So for example, the driver in the loop simulators, you know, the actual simulators the drivers sit in will be all written in C#.

01:00:00.760 --> 01:00:04.480
So yeah, you don't even really have to be that big into F1.

01:00:04.640 --> 01:00:07.820
I happen to be because I've been racing since a kid, since I was a kid.

01:00:07.820 --> 01:00:13.760
But yeah, as long as you've got some sort of basis in Python and or C#, just apply.

01:00:13.760 --> 01:00:14.540
I mean, just try.

01:00:14.540 --> 01:00:15.860
I really wasn't that experienced.

01:00:15.860 --> 01:00:19.180
I got a, you know, a lucky break and exploited it to as much as I could.

01:00:19.180 --> 01:00:19.940
Beautiful.

01:00:19.940 --> 01:00:23.140
And then Charmed Kubernetes, people are interested in that?

01:00:23.140 --> 01:00:23.900
Yeah, sure.

01:00:23.900 --> 01:00:29.380
So we at Canonical currently have two Kubernetes products that we are working on at the moment.

01:00:29.380 --> 01:00:34.160
One is called MicroKates, which is a very opinionated distribution of Kubernetes.

01:00:34.160 --> 01:00:36.900
It started off as a single node distribution.

01:00:36.900 --> 01:00:43.000
So if you just had your dev laptop and you wanted to test some Kubernetes application that you were writing,

01:00:43.000 --> 01:00:45.720
you could just literally in one command install MicroKates.

01:00:45.720 --> 01:00:50.760
Now with there's a lot of demand coming from sort of IoT and Edge devices,

01:00:50.760 --> 01:00:53.840
you can now run them in a proper Kubernetes cluster.

01:00:53.840 --> 01:01:01.680
So with literally one command to install Kubernetes and then another one to add it to your cluster,

01:01:01.680 --> 01:01:02.440
you've got it.

01:01:02.440 --> 01:01:06.980
So if anyone's used kubeadm, it's similar, except for you've got everything in your MicroKates package.

01:01:06.980 --> 01:01:10.420
You've got the container runtime and the API server and everything else.

01:01:10.420 --> 01:01:11.740
Oh, yeah, that's neat.

01:01:11.740 --> 01:01:16.500
I mean, normally I think of Kubernetes being a server side, big server type of infrastructure, right?

01:01:16.500 --> 01:01:17.160
Exactly.

01:01:17.160 --> 01:01:24.420
So one of the things that also put me off using Kubernetes in the Formula One team was basically testing on it was quite tricky then.

01:01:24.420 --> 01:01:27.900
So with stuff like MicroKates, it's really easy.

01:01:27.900 --> 01:01:31.540
You can just define the infrastructure that you want to test and you can just run it in MicroKates,

01:01:31.540 --> 01:01:34.140
whether that be on your local dev machine or in CICD.

01:01:34.140 --> 01:01:39.980
And now if you've got a bunch of Raspberry Pis running on some Edge platform, you can do the same.

01:01:39.980 --> 01:01:41.500
It's just a single command to install it.

01:01:41.660 --> 01:01:43.720
You have everything you need in that single package.

01:01:43.720 --> 01:01:47.920
And yeah, you just add them to the cluster with a single command as well.

01:01:47.920 --> 01:01:51.120
So a total of two commands to install it and enroll it.

01:01:51.120 --> 01:01:58.480
And then if you want a less opinionated Kubernetes distribution, all of the kind of the actual code behind it is all written in Python.

01:01:58.480 --> 01:01:59.900
It's called Charm Kubernetes.

01:01:59.900 --> 01:02:08.560
It runs off a product called Juju, which is basically the actual program that deploys and then monitors your Kubernetes cluster

01:02:08.560 --> 01:02:10.960
and then enforces that what you've asked for stays.

01:02:10.960 --> 01:02:14.340
So, you know, you can choose between the different run times.

01:02:14.340 --> 01:02:21.740
So if you want a Docker or a container D runtime, you can swap out your CNIs, so Flannel, Calico, etc.

01:02:21.740 --> 01:02:23.800
All with single line commands.

01:02:23.800 --> 01:02:25.560
And you can do it on a running cluster.

01:02:25.560 --> 01:02:32.800
And because of this sort of Python infrastructure code that we have running in the background, it's handling all of that for you.

01:02:32.800 --> 01:02:37.720
You're not having to either reapply it or gracefully bring down your cluster first.

01:02:37.720 --> 01:02:39.760
It will all do this on a running cluster.

01:02:40.120 --> 01:02:40.520
Wow.

01:02:40.520 --> 01:02:41.240
That sounds neat.

01:02:41.240 --> 01:02:41.900
Awesome.

01:02:41.900 --> 01:02:42.440
So, yeah.

01:02:42.440 --> 01:02:45.960
Two very different paths for people to check out depending on what they're interested in.

01:02:45.960 --> 01:02:49.580
So let me just ask you real quick, since you mentioned it, what kind of racing did you do?

01:02:49.580 --> 01:02:51.560
I did endurance karting.

01:02:51.560 --> 01:02:56.500
So there was a series called EPEC, which is European Pro Kart Endurance Championship.

01:02:57.040 --> 01:03:00.380
So we did 24-hour races across Europe.

01:03:00.380 --> 01:03:01.280
No way.

01:03:01.280 --> 01:03:02.860
24-hour kart races?

01:03:02.860 --> 01:03:03.840
Oh, my goodness.

01:03:03.840 --> 01:03:04.440
Yeah.

01:03:04.440 --> 01:03:06.420
So there were three or four of us per team.

01:03:06.420 --> 01:03:10.500
We do two or three hours each and just keep rotating like that.

01:03:10.860 --> 01:03:15.140
People might think of karts as like things they go ride at little adventure parks.

01:03:15.140 --> 01:03:17.480
But the racing karts are beasts.

01:03:17.480 --> 01:03:19.620
Like those things are really fast and intense.

01:03:19.620 --> 01:03:21.260
So, yeah, it's an interesting world.

01:03:21.260 --> 01:03:21.580
They're cool.

01:03:21.580 --> 01:03:22.180
Yeah.

01:03:22.320 --> 01:03:25.120
They're not the kind of bachelor party things that I think you'd imagine.

01:03:25.120 --> 01:03:27.620
They're capable of doing 100 miles an hour.

01:03:27.620 --> 01:03:30.840
So you do have to have your, you know, it's not good to be sleepy.

01:03:30.840 --> 01:03:31.760
Two inches off the ground.

01:03:31.760 --> 01:03:32.920
Oh, if that.

01:03:32.920 --> 01:03:34.920
Two inches off the ground with no seatbelt, right?

01:03:34.920 --> 01:03:35.160
Yeah.

01:03:35.160 --> 01:03:35.460
Even.

01:03:35.460 --> 01:03:36.820
Two millimeters, I think.

01:03:36.820 --> 01:03:38.580
Oh, my goodness.

01:03:38.580 --> 01:03:41.540
Well, Joe, this is a super cool look at what you've been up to.

01:03:41.540 --> 01:03:44.640
And thanks for sharing another cool Python story.

01:03:44.640 --> 01:03:45.620
Thank you very much for having me.

01:03:45.620 --> 01:03:46.300
Yeah, you bet.

01:03:46.300 --> 01:03:46.640
Bye.

01:03:46.640 --> 01:03:50.360
This has been another episode of Talk Python to Me.

01:03:50.360 --> 01:03:52.640
Our guest in this episode was Joe Borg.

01:03:52.640 --> 01:03:56.920
And it's been brought to you by us over at Talk Python Training and our friends at Linode.

01:03:56.920 --> 01:04:01.860
Simplify your infrastructure and cut your cloud bills in half with Linode's Linux virtual machines.

01:04:01.860 --> 01:04:05.220
Develop, deploy, and scale your modern applications faster and easier.

01:04:05.220 --> 01:04:10.180
Visit talkpython.fm/Linode and click the create free account button to get started.

01:04:10.180 --> 01:04:12.100
Want to level up your Python?

01:04:12.100 --> 01:04:16.960
If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

01:04:16.960 --> 01:04:25.120
Or if you're looking for something more advanced, check out our new async course that digs into all the different types of async programming you can do in Python.

01:04:25.120 --> 01:04:29.780
And of course, if you're interested in more than one of these, be sure to check out our Everything Bundle.

01:04:29.780 --> 01:04:31.660
It's like a subscription that never expires.

01:04:31.660 --> 01:04:33.800
Be sure to subscribe to the show.

01:04:33.800 --> 01:04:36.320
Open your favorite podcatcher and search for Python.

01:04:36.320 --> 01:04:37.460
We should be right at the top.

01:04:37.460 --> 01:04:46.440
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

01:04:46.440 --> 01:04:48.520
This is your host, Michael Kennedy.

01:04:48.520 --> 01:04:50.020
Thanks so much for listening.

01:04:50.020 --> 01:04:51.060
I really appreciate it.

01:04:51.060 --> 01:04:52.820
Now get out there and write some Python code.

01:04:52.820 --> 01:05:14.320
I really appreciate it.

