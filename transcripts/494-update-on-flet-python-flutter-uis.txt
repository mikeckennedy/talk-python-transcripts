00:00:00 As Python developers, we're incredibly lucky to have over half a million packages that we can choose to build our applications from over at PyPI. However, when it comes to choosing a UI framework, the options get narrowed down very quickly. Intersect those choices with the ones that work on mobile, and you have a very short list. Flutter is a UI framework for building desktop and mobile applications, and is in fact the one that we use to build the Talk Python courses app, which you'll find at talkpython.fm/apps. That's why I'm so excited about Flet. Flet is a Python UI framework that is distributed and executed on the Flutter framework, making it possible to build mobile apps and desktop apps with Python. We have Fedor Fitzner back on the show after he launched his project a couple of years ago to give us an update on how close they are to a full featured mobile app framework in Python. This is Talk Python to Me, Episode 491 recorded December 17th, 2024.

00:00:59 - Are you ready for your host, please?

00:01:01 - You're listening to Michael Kennedy on Talk Python to Me.

00:01:05 Live from Portland, Oregon, and this segment was made with Python.

00:01:11 - Welcome to Talk Python to Me, a weekly podcast on Python.

00:01:14 This is your host, Michael Kennedy.

00:01:16 Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython, both accounts over at fosstodon.org.

00:01:25 And keep up with the show and listen to over nine years of episodes at talkpython.fm.

00:01:30 If you want to be part of our live episodes, you can find the live streams over on YouTube.

00:01:34 Subscribe to our YouTube channel over at talkpython.fm/youtube and get notified about upcoming shows.

00:01:40 This episode is sponsored by Posit Connect from the makers of Shiny.

00:01:45 Publish, share, and deploy all of your data projects that you're creating using Python.

00:01:49 Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto, Reports, Dashboards, and APIs.

00:01:56 Posit Connect supports all of them.

00:01:58 Try Posit Connect for free by going to talkpython.fm/posit.

00:02:03 P-O-S-I-T.

00:02:05 And it's also brought to you by us over at Talk Python Training.

00:02:09 Did you know that we have over 250 hours of Python courses?

00:02:13 Yeah, that's right.

00:02:14 Check them out at talkpython.fm/courses.

00:02:16 Flash courses.

00:02:17 Peter, welcome back to Talk Python to Me.

00:02:20 Awesome to have you here.

00:02:20 >> I'm Michael, fellow Python developers.

00:02:23 >> Yeah, it's real good to have you here.

00:02:25 I know that there was a lot of excitement about Flutter.

00:02:28 In fact, I got a message just a couple of weeks ago from somebody saying, "Is Flutter what you use to write your mobile apps?" And I'm like, "No, because that was a while ago." And I kind of wish that was an option, but it wasn't an option for us at the time.

00:02:42 Anyway, I think Flutter is going strong.

00:02:46 I think there's a lot of excitement around it.

00:02:48 And certainly there's an excitement for building mobile applications in Python.

00:02:53 Yeah.

00:02:53 Flutter is getting stronger and stronger.

00:02:55 You know, like recently I saw there was an attempt to fork Flutter, you know, because like it was a feeling in the community that it's not moving anywhere.

00:03:06 You know, but I don't believe that even that guy mentioned that there are like 50 developers working on Flutter right now at Google.

00:03:15 So yeah, Flutter is getting better and better and their release cycle is pretty awesome, you know?

00:03:21 Sometimes it's really hard to catch up, but still, yeah.

00:03:24 - That can actually be a problem.

00:03:25 I just updated Flutter on my Mac mini.

00:03:29 I had out of date Cocoa Pods and Ruby and there's a whole tool chain that people need to know about.

00:03:35 Maybe we can talk a little bit about the tool chain, but yeah, you're constantly chasing versions and releases and updates.

00:03:42 You've got Android Studio versions.

00:03:44 You've got Xcode.

00:03:46 There's a lot there.

00:03:46 We recently started using Flutter version manager FVM and it's pretty good.

00:03:52 Yeah, because the updating is so fast, you know, it's really hard to catch up.

00:03:58 This portion of Talk Python to Me is brought to you by the folks at Posit.

00:04:02 Posit has made a huge investment in the Python community lately.

00:04:05 Known originally for RStudio, they've been building out a suite of tools and services for team Python.

00:04:12 Today, I want to focus on hosting your Python-based data science workloads.

00:04:17 This includes dashboards, reports, plots, interactive web apps, all the way to custom Flask and Django apps.

00:04:24 Their service is Posit Connect.

00:04:26 Posit Connect makes it easy for data scientists to share work built with Python code.

00:04:31 If you have a Streamlit app, Dash, dashboard, Plotly, interactive plot, a FastAPI service, or even a Quarto report, just give Posit Connect the code it needs to maintain the asset and Connect automatically does the rest.

00:04:45 Connect will manage your APIs and serve your interactive apps for you.

00:04:49 And if you want, you can update your reports and dashboards on a scheduled basis.

00:04:53 That's right, no need to explain to the stakeholders why that dashboard or plot stopped updating last week.

00:04:59 You get to focus on your data science and leveraging your skillset while Connect makes you look good, keeping your code running and private.

00:05:07 With Connect, you get a private URL on your Connect server, ensuring that your asset is continuously available to your shareholders.

00:05:14 And you can control which users have access to the asset.

00:05:18 Let Posit Connect handle the delivery and DevOps involved in sharing your work.

00:05:22 You focus on what you do best.

00:05:25 So if you work on a data science team, you owe it to you and your org to check out Posit Connect.

00:05:31 Visit talkpython.fm/connect today and get a three-month free trial to see if it's a good fit.

00:05:37 That's talkpython.fm/connect.

00:05:40 The link is in your podcast player show notes.

00:05:42 Thank you to Posit for supporting Talk Python To Me.

00:05:46 Maybe a quick introduction.

00:05:47 It has been, you know, we, I guess it's worth giving a shout out back in summer 2022, you were on the show when Flutter first came out to tell everyone about, sorry, when Flutter first came out to tell everyone about Flut and how it's basically Flutter plus Python for UI, but it's been a while.

00:06:06 So, you know, tell people quickly who you are and we can get into the project.

00:06:11 My name is Peter Fitzner.

00:06:13 I'm the founder and developer of a flat framework, like Flutter for Python, for Flutter, yeah, it's been two and a half years since we released the first version. It's not like the first release of web and since that time we gained really great traction. To my mind like we got 12,000 stars on Github, 72 contributors, 5k members on discord channel and I found the statistics for PyPI. It's like almost 3 million downloads from PyPI of web package. So It's a great community, great people, a lot of feedback, a lot of issues.

00:07:03 So it's pretty nice.

00:07:04 That's awesome.

00:07:04 And it definitely seems like it's going strong.

00:07:07 I do think maybe it's worth actually talking a bit about what Flutter is before we dive into Python for Flutter with Flut, right?

00:07:15 Give people a quick sense of what is this Flutter thing that we're talking about?

00:07:18 Flutter is a cross-platform framework.

00:07:22 It works for web, iOS, Android, and all desktop platforms.

00:07:28 It allows you to write nice apps, really nice apps with great UI in Dart language.

00:07:34 So you have to learn a new language.

00:07:37 And Flutter is a framework.

00:07:40 So it's like, it's not just UI, it's application framework.

00:07:44 It has all the things to build the app.

00:07:49 There's the language, which is Dart, not Flutter, but then Flutter has all the UI widgets and the mechanisms, but it also is a whole series of build tools that will take that and create things that you can upload to the mobile app stores like app, Apple's app store or Google play or other places, right?

00:08:10 Like desktop apps.

00:08:11 So there's a bunch of layers to what Flutter really is.

00:08:15 I think Also, the interesting part about Flutter is that it has a painted UI.

00:08:22 So it started from the Skai engine and now they have their own engine in Palo Alto.

00:08:28 So the UI is basically painted on the canvas.

00:08:32 So it looks similar everywhere on every device.

00:08:36 Like some frameworks, like for example React Native, they use native controls.

00:08:44 But Flutter, it looks similar on every device.

00:08:48 It's cool that it runs everywhere, but sometimes that can fall short.

00:08:52 The biggest example of this for me is Java applications.

00:08:55 When they have their own file browsing dialogue, you're like, Oh, this is clearly not a native sort of thing going on here.

00:09:01 You know, on a, on a desktop situation, they don't look like windows dialogues.

00:09:05 They don't look like macOS dialogues.

00:09:07 They just look like Java dialogues.

00:09:08 But so that can be a problem or limitation.

00:09:12 But Flutter tries to look like the native controls.

00:09:17 There's the, what do they call them?

00:09:18 The Cupertino widgets and the material design widgets that, so it tries to adapt to the platforms it's on.

00:09:25 That's why it's called Adaptive.

00:09:27 Yeah.

00:09:28 It's like this material design is built in, there is Cupertino controls.

00:09:33 It also, I thought there are, think body packages for micro-OS and Windows like Fluent Design.

00:09:40 By the way about dialogue, you know, if like this it's called file picker and it looks different for all platforms.

00:09:48 So it's not always drawn like the UI.

00:09:51 You can write like a native package, like using the underlying operating system API.

00:09:57 So the dialogue looks pretty standard on macOS or windows.

00:10:02 So yeah, it's not always so bad.

00:10:05 It is for building apps all over the place, Flutter, but I would say it's real seems to be in the mobile app space, right?

00:10:12 What do you think?

00:10:13 Primarily iOS and Android?

00:10:15 - Some recently asked me about like, why not React Native?

00:10:20 So why you chose, and I went to Google, like, you know, like typing like Flutter, yes, React Native.

00:10:27 And the interesting, it became more popular this year, 2024.

00:10:33 So it's a little bit ahead of React Native, Flutter, in this year.

00:10:39 So, yeah, so it's, it's according to stick with floor questionnaire, something like that.

00:10:46 So it's gaining popularity.

00:10:48 And I would say that yes, Flutter is more a mobile fast framework, despite they have awesome support for desktop platforms or web, it's still mobile first.

00:11:00 And when we talked about Flutter, we should probably talk first about mobile devices and these benefits it brings to mobile development.

00:11:10 That's right.

00:11:10 It's a pretty interesting.

00:11:11 I just looked on Stack Overflow trends.

00:11:13 Let's see if I can find it.

00:11:15 Yeah, look at that.

00:11:17 The flutter is quite a bit higher than React Native.

00:11:20 More than I expected.

00:11:22 I'll put a link to that in the show notes for the Stack Overflow trends graph.

00:11:26 What are the reasons behind that?

00:11:28 Maybe it's ecosystem, maybe because it's pretty easy to find an extension to find some nice package on pub.dev.

00:11:40 Maybe it's because it looks nice on both iOS and Android, and it looks similar, maybe.

00:11:48 Maybe because Dart itself, I know people tend to criticize Dart, but I have some experience writing in JavaScript, TypeScript, and I can say that it was really nice learning Dart.

00:12:02 It's a great language.

00:12:04 And honestly, I know it's unpopular, but I feel it's kind of like better than JavaScript.

00:12:11 It's just my opinion.

00:12:13 So once you learn it, you can do everything.

00:12:16 It's pretty nice.

00:12:17 Maybe because of that.

00:12:18 - Perhaps.

00:12:19 And before we move off Flutter, just real quick, I wanna give a quick shout out to Lauren, the developer I worked with.

00:12:24 He and I built the Talk Python courses apps in Flutter, which is why I have more than just like reading the docs experience in it.

00:12:32 And those apps are going strong today.

00:12:35 They're really great.

00:12:36 Although I'm about to release a new version because you never stop releasing new versions, even if you think you're done and something changes behind the scenes with iOS or Android this time it's Android.

00:12:46 Yeah.

00:12:46 They go that all the time, that package that used to do this thing.

00:12:49 It doesn't do it anymore.

00:12:50 Like, Oh no.

00:12:51 Okay.

00:12:52 Okay.

00:12:52 So that's the foundation that's Flutter.

00:12:55 Flet.

00:12:55 Tell us about Flet.

00:12:56 I mean, you talked about the downloads, but like, where does it fit in this Flutter ecosystem?

00:13:00 Flet is a native framework.

00:13:03 As you can think, it's not just translated from Python to Dart.

00:13:08 It's not just bindings for Flutter widgets, like PyQt, PySite, for example, but it's a standalone framework that uses Flutter for each UI.

00:13:23 So Flet is an application framework.

00:13:25 It's not just UI, and it uses Flutter to build each UI.

00:13:30 I see. So people should think of it more as an independent UI and application framework for Python, not so much as a extension of Flutter into the Python world. Is that maybe the way to think of it?

00:13:43 Right. We're still trying to go away from this label, you know, it's kind of, but it works really nice, like, right. Flutter, Epson, Python, it works pretty good, like in terms of a CEO, for example, but, but it's not true. Like It's a framework that uses, we could, I mean, potentially we could replace it with something else like this backend, you know, with like Compose or, you know, React Native, but no, it's Flutter.

00:14:12 And it's really great.

00:14:15 We, we, we have our own controls and it's not always one-to-one maybe, maybe, but it's like maybe of Flutter controls, they are built out of like multiple Flutter widgets.

00:14:29 So we combine multiple Flutter widgets into controls.

00:14:34 Because sometimes if you have some Flutter experience, sometimes you can notice that it's getting really...

00:14:42 the UI getting really complex or, like, you know, later, like a lot of controls, like, wrapped into other widgets.

00:14:54 Like, for example, if you want to center something, There is a center widget if you want to limit the size, the resize box.

00:15:03 So Flag combines many widgets into more like controls and those are properties.

00:15:10 So it's like it's cluttered in serve to Python developers in Pythonic way, I would say.

00:15:18 On your, if people want to browse these controls, widgets, what do you want to call them?

00:15:22 There's a whole controls section in your docs and I'll link to the docs, but the left it says controls and you go there, there's layout controls, navigation controls, you know, app bar type things that you might expect from standard mobile apps.

00:15:36 And of course, like I sort of pointed out, you got the Cupertino versions and you've got the non Cupertino material design versions.

00:15:43 So people can have a look at that and just get a sense for all the controls, but there are many, how many controls do you know off the top of your head?

00:15:49 Oh, it's like a hundred plus I would say.

00:15:52 And some really nice ones, right?

00:15:53 Like you've got a web view, you've got maps, animations, charts.

00:15:59 Yeah.

00:15:59 Web view is, is not available for like all platforms at the moment.

00:16:04 It's mostly for mobile and for my class, if I'm not mistaken.

00:16:08 So yeah, it's kind of like there is a flat rule limitation right now that, for windows that doesn't allow to have a proper web view on windows platform.

00:16:18 Oh yes.

00:16:19 I remember that.

00:16:19 That's yeah.

00:16:21 What a hassle.

00:16:22 There is work going on.

00:16:26 You know, you were on the show before to talk about Flet and those were pretty early days then, right?

00:16:32 To over two years ago.

00:16:34 A lot.

00:16:35 You've been, you're going strong.

00:16:36 Like you said, you talked about the downloads and the contributors and stars and all that.

00:16:40 That's awesome.

00:16:41 So you, what have you all been up to?

00:16:44 Where's this effort gone?

00:16:45 Like what, what progress have you made?

00:16:46 We started from a simple design.

00:16:49 it was pre-built executable for every platform, mostly like for desktop platform, which is able to display all controls we have. And that executable was an ease part of a wheel, flet wheel you install. So if you do heap install flet, you install this executable with the Python API itself. But then we started getting more and more requests like asking Like, how would I put all this beautiful stuff to a mobile device?

00:17:23 Or how do I do a standalone app?

00:17:26 And, well, the answer is we should generate executable and Python should be part of it.

00:17:34 Python, your program, set by the libraries you use for your program, all this stuff should be part of this executable.

00:17:42 It's been a lot of work to produce a standalone package for desktop, for web, and for mobile.

00:17:51 So Flutter is a good start for that.

00:17:54 So the question was Python itself and third-party packages.

00:18:00 So we decided that, like, okay, Python for desktop platform is really straightforward.

00:18:09 You just take regular, basically regular Python and bundle it into your executable or application bundle and that's it.

00:18:19 So it's pretty straightforward. For mobile devices, there is a challenge and we know that multiple projects when are working on this problem, like the most popular Kybee and Beware, Those guys started back, started solving this problem back in 2010, maybe 2012 if I'm not mistaken.

00:18:43 And they did really great job and they're still doing great, you know.

00:18:49 Yeah, I know Beware's got a lot of recent support as well through the Anaconda team, which is really great.

00:18:56 We started from Kavi. I don't know, at that point, like two years ago, I thought that I saw maybe that Kavi is more popular And I decided to explore this way, whether Kyde could be used as a foundation for planning or we can grab portions of Kyde and make something different, you know.

00:19:19 And it was good for the start, obviously.

00:19:24 We managed to use Kyde tooling, like Python for Android, Python for iOS, and their command line and their libraries and their recipes to compile runtime, Python runtime and third party modules and use them in quantification.

00:19:45 So, I mean, there was Kyvee.

00:19:47 But you guys ended up moving off of it, right?

00:19:50 Recipes was a great, and it's still a great idea, but there were limitations, you know, like first of all, Kyvee recipes, some of those recipes, they're outdated. So I tried building a few recipes. So I fought tidy and tried building new recipes by myself. And it wasn't easy task, you know, it's kind of so recipes, it's basically Python code. And there are a lot of historic stuff, you know, it's you should know about like a lot of debugging, I was really struggling trying to build new recipes and update existing recipes for Kairi.

00:20:34 And also the biggest issue with Kairi's approach was you have to build all the Python runtime and all the modules like packages by yourself all the time.

00:20:48 If you're a user, it's kind of pain. So you should enjoy SDK installed and all environment wearables in place you know like and I mean it could be a real struggle to build and it takes time sometimes like if you add NumPy pandas to your app as a dependencies it could take like half an hour to build all the packages and fingers crossed you know like whether it finishes okay you know or you get some weird pre-prepare yeah it wasn't nice it wasn't nice. I mean, it worked, this approach worked for simple things, you know, with the way your app requires fewer Python packages. But if it's not something trivial, it's either no recipe or outdated recipe, or you have to build your own recipe, etc, etc.

00:21:44 And a recipe is basically saying how to build some particular library or Python itself for Android or for iOS or something, is that right?

00:21:53 We can dig into that.

00:21:54 Yeah.

00:21:54 But it's kind of basically like settings.

00:21:57 It's a bunch of settings for compiler for linker and how to move resulting files.

00:22:03 You know, and basically that's it.

00:22:05 Yeah.

00:22:05 That doesn't sound that easy.

00:22:07 Yeah, absolutely.

00:22:08 Yeah.

00:22:08 It's C, C++.

00:22:11 Yeah.

00:22:11 I can talk about this later, you know, it's.

00:22:14 It's probably, probably people get enough of a, an idea from it.

00:22:18 Is this, so I know that you are using or you publish serious Python.

00:22:23 Is this sort of your answer to that?

00:22:25 As we do open source and Kylie and other projects are open source, I thought maybe it's a good idea to contribute something to open source, right?

00:22:36 We can do this as a part of our application templates, for example, and not dealing with this plugin, you know, but I thought maybe someone would be interested in using Python with your Clutter app.

00:22:52 So C++ Python is a pretty low-level package that allows you to embed Python engine into your Clutter application.

00:23:02 So, and I'm not sure if it's even popular, you know, but maybe someone can use it for some purposes.

00:23:10 Do you do anything with Python build standalone?

00:23:14 You know, uv has started making it really easy to install Python, all the different platforms of it by leveraging Python build standalone that was previously run by Greg now by Astral.

00:23:26 Yes.

00:23:27 Or do you do something else?

00:23:28 Yeah.

00:23:28 Like where you build, you build it for platforms.

00:23:31 So you're talking about this GitHub project, building every version of Python for all platforms, right?

00:23:37 Yeah.

00:23:38 We use this repository for desktop as a, as a starting point and we don't want pre-built Python from that repo and we actually repackaged it.

00:23:48 For mobile, now we use a different approach and I can talk about this.

00:23:53 For web we use Pyodide.

00:23:55 Yeah.

00:23:55 Well, let's maybe talk for a little bit about the runtime side of things and we could talk about packaging after that.

00:24:03 Flutter goes into all different places, more than most platforms.

00:24:07 You can build desktop apps.

00:24:08 You can build mobile apps.

00:24:09 You can also build web apps, kind of a competitor to Angular or something like that.

00:24:15 Right.

00:24:16 And if you're going to have Python run times in these different locations, and that's kind of why I was asking about Python build standalone is, you know, there's all these variations of places that could be, which is quite tricky.

00:24:27 Right.

00:24:27 So the web version is WASM WebAssembly based, right?

00:24:32 Web could be deployed in two like moments in two states, like client side and the server side.

00:24:40 So if it's deployed as a server side app, obviously the Flutter part runs in the browser and Python runs on the server and it's standard Python with any module, you can use anything.

00:24:57 And client part, client side, talks to server by web sockets.

00:25:04 So all UI changes are streamed via web sockets to the client and all events go back to server side.

00:25:14 So this is one mode, it's called server side.

00:25:16 And another mode is client side or static web side.

00:25:21 You can build, you can publish web app as a static website and put it on CloudFlare or GitHub pages or whatever you like.

00:25:33 Yeah, you just put the WebAssembly files there and it just picks it up and goes, right?

00:25:36 It's Flutter itself and Python, Pyodide, which is WebAssembly, which is Python and WebAssembly.

00:25:45 So we don't compile Flutter part into WebAssembly yet because we have a lot of dependencies and not all of them support Wasm.

00:25:56 But it's definitely on our roadmap and we'll have a branch trying to produce fastening builds.

00:26:04 So it would be really nice because the size would be much smaller.

00:26:09 The size of Flutter web would be much slower.

00:26:12 It's probably right now it's 10 megabytes maybe.

00:26:16 And it's going to be like two megabytes something.

00:26:20 So it's going to be really nice when we do that.

00:26:23 And with the right amount of caching, the right style of caching, it's not big of a deal, right?

00:26:27 PyGuide is a pretty strong project.

00:26:30 It has the biggest number of packages supported.

00:26:34 So it's great.

00:26:36 I mean, like it got really great support.

00:26:39 I believe that the Python core devs are also working on getting Python itself to be a sort of officially built for WebAssembly.

00:26:50 I know Brett Cannon's done a ton of work for this as well.

00:26:53 Does that help you guys in any way?

00:26:55 use built-in, this built-in Python support.

00:27:00 So we migrated from Kylie to this approach.

00:27:03 And it's thanks to the way guys, Russell and Malcolm.

00:27:09 So Russell is iOS, Malcolm is Android.

00:27:12 So they did a great, a really great job putting like this iOS and Android support into Python project itself.

00:27:21 And now they, they like actually, they, they implemented the support for Python 3.13 and they ported to lower versions.

00:27:31 Oh, nice.

00:27:32 When I first, first saw the proposal, you know, for iOS, first of all, I really liked it.

00:27:40 It's really great.

00:27:42 I mean, like the way producing binary libraries, you know, like for, and packaging them, it's really good because we can use dynamic libraries versus static libraries entirely. Like entirely everything, like all these third-party modules you can file on your machine every time they produce static libraries. Basically like a files for iOS. And finally, and they like the entire code base is like single executable at the end, you know, like everything like NumPy, like all this stuff is a single file.

00:28:20 I mean, you cannot reuse some of those libraries, you know, like when you package them into iOS app, I really love the approach and I understood, you know, that it's probably the way going forward, you know, and you see it's kind of like it's getting like a standard now and it allows this approach allows you to have binary wheels that are prebuilt and put somewhere on not on PyPy.org yet.

00:28:50 They don't support this model yet, but you can publish them on a custom feed, you know, and use and all users, all your users, they can download them from that location.

00:29:04 Now that's it.

00:29:06 Yeah, it's great.

00:29:08 It's standard.

00:29:09 And in the future, we can use pre-built wheels by like project maintainers, you know, like if NumPy, for example, decide releasing those wheels, we can, we can use them because we follow these standards, you know, like, so we use like standard runtime.

00:29:30 Excellent.

00:29:31 But NumPy folks, for example, as you said, they could use their expertise to get NumPy, this NumPy C code and Python code to build for WebAssembly and just put that in as automation and GitHub and everyone else in the world doesn't have to solve it over and over.

00:29:47 Right?

00:29:48 The Python 3.13 Python itself is, is pretty fresh.

00:29:52 You know, it's many packages are still on, like don't support it.

00:29:58 Right.

00:29:58 So I believe like in at some point those projects will start doing their will start producing their own iOS and Android wheels and publishing them to PiPi once it's supported.

00:30:11 So yeah, and of course, they can reuse our expertise.

00:30:16 Yeah, you're making me dream, dream big, you know, like wheels for iOS and wheels for Android.

00:30:22 Could you, could you imagine a day where it's as easy to just get libraries for the mobile platforms as it is for Mac or Linux or whatever?

00:30:31 It's still not many people working in this area.

00:30:34 And what I can tell you, it's like modern processors, modern CPUs in the Android and iOS, like Apple devices.

00:30:45 They're pretty powerful, you know?

00:30:46 And I remember there were a lot of like those times, like 2012, 2010, when Kylie and VMware started, there were a lot of issues trying to squeeze this desktop C code into a mobile processor.

00:31:04 Now it's much easier. Most of those packages could be compiled as is without any tweaks, without any pictures, you know, so it's pretty, it's pretty nice.

00:31:15 Maybe yeah, in the future we will have this as a standard thing, you know.

00:31:18 Yeah.

00:31:19 Last PyCon with the, maybe the Python before started, I think it was salt lake anyway, it doesn't really matter.

00:31:26 Recently, Carol Willing at the PyCon US keynote talked about how mobile is such an important platform.

00:31:33 And you know, there's people like you and Russell Keith McGee and the B-Ware team working on it.

00:31:39 But I think it feels a little chicken and an egg to me, you know, if it was a little easier, there would be a huge bunch of people that jump into it, but there's, it takes projects like Flet and the Beware one to just kind of unlock it.

00:31:53 And then I think once it gets unlocked, people are going to realize and just go for it, you know, Kevin Python on the mobile devices is, is, is pretty awesome.

00:32:02 You know, it's like for, for Android, for example, it's, it adds maybe like 8 megabytes of size to your app.

00:32:11 So it's not so large.

00:32:12 And it makes sense.

00:32:14 Python is a great language.

00:32:15 It's great for beginners, you know, for scientists.

00:32:20 So it's really, I don't know, like addictive, you know, like to write apps for everything in Python.

00:32:28 I've become like, I've been using Python for three years already, and I still love it, you know.

00:32:35 Like I write most of my, like, even like sweets, you know, like in Python, like, so I'm looking back and all.

00:32:43 Yeah.

00:32:43 I've worked in a lot of programming languages, myself, static and dynamic ones.

00:32:48 And yeah, it's Python.

00:32:49 It's comfortable.

00:32:50 It's nice.

00:32:51 Yeah.

00:32:51 All right.

00:32:52 I want to talk about packaging and I know that's the area that you've been working on a lot as well.

00:32:57 And as a segue, let's take a question from the audience.

00:33:00 Alan out there asks, I'm someone taking a careful look at Flet.

00:33:04 My question is what is the process of getting finished app reviewed by Apple or Google?

00:33:09 I think, let me rephrase that into slightly different part because the reviewed by Apple or Google, there's like a voodoo doll and you stick it with a few pins and then you like rub it with an oil and then they, they approve your app, right?

00:33:23 Like that seems to be the process.

00:33:25 It's been so hard, but I think the thing is how do you get it built in a way that you can submit it to the app store?

00:33:32 And then it's just down to, right?

00:33:33 So what's the process?

00:33:35 This is one of those ruff questions, you know, it's, and you should have a list of ruff questions.

00:33:41 You're ready to answer.

00:33:43 So right now you can build your APK for AAB for Android.

00:33:48 You can sign it, but you have to upload the file manually right now into.

00:33:54 I see.

00:33:54 So you have to sideload it basically at the moment.

00:33:56 YOLT command allows you to build the AAB file, which is basically APK for multiple platforms.

00:34:03 sign it, and then you upload it by yourself through the web interface of Google Play.

00:34:09 Oh, let me go back then. That's not side loading it. That's just not having it auto upload.

00:34:14 Yeah.

00:34:14 That's encouraging.

00:34:15 So we have own Flag app in both Google Play and App Store. It's for testing apps on mobile devices. Basically, like the same flag client that connects to app through web sockets and the app itself is running on your machine.

00:34:32 So yeah, and honestly, right now we publish it with Fastlane.

00:34:38 So there is a CI job that publishes both iOS and Android versions with Fastlane.

00:34:46 I'm not sure, maybe we will do the instructions how to use Fastlane because it's a great tool and it's pretty easy to synchronize certificates you know, for App Store and publish your app and make that information for app.

00:35:00 So, yeah, but right now you can, you can build IP, you can build AAB, but you have to upload them manually.

00:35:08 I think that's fine.

00:35:09 Yeah.

00:35:09 And then the review process starts.

00:35:11 That's the voodoo doll part where you get the voodoo doll out and you hit it with the needles.

00:35:16 People usually concerned about like, whether is it allowed to have Python or like the like stuff like that in your app and would it be approved by Apple, by Google?

00:35:29 And I can tell you it works pretty well.

00:35:32 We dogfood our own stuff.

00:35:34 So we build Klet app using Klet.

00:35:37 So the way it's packaged inside, it's getting approved.

00:35:43 There are some issues.

00:35:43 I can tell you there are some issues.

00:35:46 For example, disabled, we used to disable x86 devices right away.

00:35:52 And because they're like Google Play, usual machines, they show just like a black screen, you know, like, like the market share for those devices is pretty small right now.

00:36:05 So we disabled that.

00:36:07 So two plus is the review, but it works.

00:36:10 It works.

00:36:11 talk through the publishing workflow that you all have with the new CLI tools you got, but let's just dive into one more thing real quick.

00:36:20 So when I have my Python code running, let's just say iOS, I have my Python code running on an iPhone.

00:36:27 What is the runtime look like?

00:36:30 Is that regular CPython?

00:36:33 Can I add a standard package as a wheel?

00:36:37 Like, could I use HTTPX?

00:36:39 Like what is the story around the execution environment and the external packages and so on?

00:36:45 It's CPython.

00:36:46 As I said, right now we use, or this serious Python package, it uses Python.

00:36:52 There is, by those scripts, which are part of Python 3.13.

00:36:58 So like, theoretically, if you go there to Python repository and look into those, folders you will see instructions you can you can follow those instructions and build runtime like build CPython for both iOS and Android but yes this is it's not blossom it's CPython compiled into native iOS or Android code like platform for platform not like code assemble and binary packages yes you have to repackage, you have to build binary packages targeting those platforms as well. And for that purposes we use Mobile Forge project by DeWire.

00:37:41 It's pretty nice, it's an awesome project, it's a brainchild of Malcolm and Russell.

00:37:48 And yeah, in its turn it uses cross-env package, which is basically the way to simulate, like it allows you to create a virtual environment and Python thinks that it's being run on a mobile device, you know. So it's like basically Mobile Forge is like you do people install something and it feels like for Python it feels like it's being run this command on a mobile device and you it uses like if it's binary package and there is setup.py or pyproject.toml It uses mobile compilers, cross compilers to build.so file and produce a build.

00:38:33 So if a pip install action requires a local build of something, it will use the mobile compilers with the target platform being like iPhone or whatever.

00:38:44 The whole package like this cross-env, it tweaks Python into thinking it's kind of like running on a mobile device, you know, like it has these compilers, this archiver, this linker, you know, it's so nice. So like, and it's, it's pretty, it's pretty smart thing, you know, like in most cases, so you should do a recipe. But this time recipe is, is basically YAML file, it's like meta.yaml.

00:39:16 And in most cases, if it's standard C, if it's simple package, you don't have to do anything.

00:39:24 It works right away.

00:39:25 You can build it for Android.

00:39:27 You can build it for iOS.

00:39:29 It takes literally minutes to produce a binary wheel for both platforms.

00:39:35 I'll definitely link that in the show notes.

00:39:36 All right, back to wherever I put it, the publishing side of things.

00:39:41 So maybe we could talk through a little bit about the CLI and the process.

00:39:47 Tell us, tell us how we go through this to get something built here.

00:39:49 The first release, the first releases of web were using the like so-called web, like offering flat path command and using PyInstaller to produce executable.

00:40:01 But it worked for desktop platforms as well only.

00:40:05 And to produce the package, like the bundle for mobile platform, it's you need to do more. It's still possible as those guys are basically zip files inside, you know, you can build the AAB, you can build the APK, you can build the IPA by yourself or using Xcode tools. And it's like, it's the approach BWAM takes, for example. So the briefcase it builds like packages basically from scratch you know but for Flutter we use we require to use Flutter SDK so there is a new command let build which uses Flutter SDK and it's basically like a wrapper around the Flutter build command which allows you to build the app for desktop for web for mobile. So inside we take template, we take template and we create a new Flutter app and we build this Flutter app.

00:41:05 Right. And just for people listening, the template looks something like here's a folder with a bunch of images and here's a main.py and a pyproject.toml, stuff that Python people would be familiar with.

00:41:15 This is template for the app and template for Flutter app, it's something internal.

00:41:20 You don't have to look into that.

00:41:22 You know, it's like...

00:41:23 It gets kind of complicated for the different platforms and linking them together and stuff.

00:41:27 The problem with this, with Flutter is like the difference because we want to, we want to support extensions.

00:41:33 We want to allow people using those nice extensions packages on pub.dev.

00:41:39 So we cannot have the same process every time we, we should really run Flutter build to like, for example, include a media kit for video control or audio players package for audio control.

00:41:54 It's not the same.

00:41:55 It's always.

00:41:56 So it should be built from dark to this code Flutter produces.

00:42:03 That's a lot of what Flutter is.

00:42:04 It's like orchestrating all the pieces to build into the right stuff to go into the mobile apps.

00:42:10 Yeah, exactly.

00:42:11 So we've got this pyproject.toml and you even have a create CLI command, like flit create my app or whatever.

00:42:19 And it will go and get that all out there.

00:42:21 Right.

00:42:22 Recent stuff and still pretty rough.

00:42:25 Yeah.

00:42:25 And here you have flat build and then target platform and where a target platform is APK that is Android, AAB, IPA, which is iOS, web, macOS, windows, and Linux, that's a pretty impressive list of package destinations for building an executable.

00:42:41 So if I build, let's suppose this.

00:42:43 If I build a, let's say windows.

00:42:46 I say target equals Windows, what files or file or executable or what do I get when I run that?

00:42:54 Do I get just a.exe? Do I get a.exe with DLLs or a whole bunch of other stuff?

00:42:59 Yeah, unfortunately it's not a single.exe, but it's.exe and a bunch of DLLs. Yes. It's, if you look inside the folder, you'll see like this executable, then Python itself, Python in runtime, which is a bunch of lead files, you know, and DLLs, Python files themselves, then your app coming as a zip file, also different kinds of DLLs from, from plugins, from extension packages, Flutter packages, like for video, for example, it's going to be like four more DLLs, something.

00:43:36 So yeah, it's, it's, it's a bunch of things.

00:43:39 Yeah.

00:43:39 But, but it's something I could put into an installer or copy to a Windows And then you create a shortcut to the.exe and it, it looks like an app to the user.

00:43:49 You can make self-extracting archive for MSI.

00:43:52 Okay.

00:43:53 And for macOS?

00:43:54 For macOS, it's a bundle.

00:43:56 Is that app bundle?

00:43:57 Yeah.

00:43:58 But it's a standard bundle that looks like a file, but it's a folder.

00:44:02 Works like a charm, you know, like having the right structure.

00:44:05 Again, the app inside is a part of the Flutter asset, which is like, it's called like car file.

00:44:13 It's not like even the zip, it's car file and which has all the assets.

00:44:19 Nice.

00:44:19 It's a work in progress, you know, like to.

00:44:22 Are you ready for the hard question now?

00:44:24 Those are all awesome answers, but here's the one that has been driving me crazy.

00:44:28 Is so many of these platforms by that, I mean, windows and Mac have anti malware, anti phishing protections, which is good, but that means if you build a dot app file and just try to run it.

00:44:45 It'll say this is from an untrusted developer.

00:44:48 We'll probably, you want to move it to the trash.

00:44:50 You know what I mean?

00:44:50 Like the lack of notarization or on windows, if it's not digitally signed with a trusted cert certificate, it gets treated with like a yellow warning.

00:45:00 Is there a way to digitally sign these or notarize them through Apple?

00:45:06 Yeah, I know flutter can do it.

00:45:07 So maybe you could show up, maybe it shells down to the flutter side of how that works.

00:45:12 But still, it looks pretty complicated, you know, like, even from my perspective, like, it looks pretty creepy.

00:45:19 But I have this item on my desk right now to start from my class.

00:45:25 Because there was a complaint from one user recently, like two days ago, and I still had this issue.

00:45:32 So I'm gonna work on that, and I'm gonna provide, like, a definitive answer.

00:45:38 It's not like I'm not going to say like it's do whatever you like.

00:45:42 Like, no, I'm going to go through all this stuff because right now we honestly, we use it.

00:45:47 We don't even use sandbox mode in produce.app file.

00:45:53 You know, it's so we start from there and there was an issue with the loading Python binaries, like package binaries.

00:46:03 I'm going to, I'm going to solve that problem as well.

00:46:06 So yeah, definitely. It's our next step. Yeah. We, as you see, we're getting closer and closer to building real apps and we're getting more and more developers building real apps and they want to publish them. It's not just experimental, you know, anymore, like they want to publish them.

00:46:26 And we are working on that right now, like publishing. And it's actually, it's our number one priority for the next year.

00:46:35 I'll tell you, if you had that, that dialed, I mean, that means that that opens up desktop apps completely.

00:46:42 Absolutely.

00:46:43 Yeah.

00:46:43 So we will, I will start from micro-ends because I have probably more, a little bit more experience with micro-ends right now.

00:46:52 And then I want to continue with the Windows Store.

00:46:55 I never published anything to Windows Store before.

00:46:58 So it's going to be an interesting journey, you know, but yeah, Windows Store as well.

00:47:02 Well, yeah, even if you just digitally signed it so that if you download it off someone else's website, it wouldn't go, Oh my gosh, this is an executable.

00:47:11 That's untrusted runaway.

00:47:12 You know, we actually sign our MSIs right now for, for other products.

00:47:18 And it's kind of like conspiracy, you know, like, so you have to use a really expensive certificate to pass through what was like screen, Windows screen, something like, so it's not just even like code signing and not even easy code sign is something else.

00:47:38 Yeah.

00:47:39 Yeah.

00:47:39 On MacOS it's gatekeeper and these sorts of things.

00:47:42 Yeah.

00:47:42 Yeah.

00:47:43 I remember it's like $600 per year, something like that.

00:47:47 At least if you want to pass this windows 11 screen.

00:47:52 Yeah.

00:47:52 Otherwise it's always a warning.

00:47:55 Always.

00:47:55 Where's the let's encrypt for desktop apps.

00:47:57 Come on people, somebody help us out.

00:48:00 Where's the cert bot for let's for desktop apps.

00:48:03 But yeah, I, you know, like it's, it's there for a reason because people kept getting wrecked by ransomware and all sorts of stuff, but it does make building desktop apps challenging.

00:48:11 Well, yeah, but we'll get there.

00:48:13 No worries.

00:48:13 I love it.

00:48:14 All right.

00:48:14 What else should we say about, about this here?

00:48:17 I guess controls.

00:48:19 I know there was a question.

00:48:20 See a video.

00:48:21 There was a question out in the audience also from Allen's is about camera controls.

00:48:26 Is this a thing that you guys support yet?

00:48:29 We started working on that, but it's not like it was kind of like testing the waters, you know, like it's kind of like at this moment we are trying to harmonize API, flat API and as I see it right now, we, we're going to split all controls into like visual controls and so-called services.

00:48:50 So camera is going to be service because yeah, right now it's sometimes it's, it's messy, you know, like to use non-visual controls, you have to add them like to overlay or something.

00:49:04 And like if you jump to a different page, it like audio could stop, you know, like, so we're going to re-implement that. And camera is true. Camera is the number one parameter right now. That's why there is a draft pull request and we're not closing it. So we keep it in mind The reason I even brought that up right now is because part of this packaging process, you have to state things like your permissions that you're requesting, like access to location.

00:49:39 And you also have to include which optional controls you want to build like audio recorder or geolocation or maps and things like that.

00:49:48 Right?

00:49:48 This is something we're going to change by the next release as well.

00:49:53 We will make this process more streamlined, easier to add new controls or services and include them into the build process.

00:50:03 Well, even having them under a subsection of your pyproject.toml is pretty nice, actually.

00:50:10 It looks standard, you know?

00:50:11 Yeah.

00:50:11 It looks like it belongs, which is really nice.

00:50:13 Right.

00:50:14 And obviously you've got icons and splash screens and all of those types of things that you have to include in order to build, especially mobile apps, but even icon for a dot app or dot exe.

00:50:25 Yeah.

00:50:26 I guess one more thing we got time for one more thing to call out here about this packaging side of things, or maybe, maybe two, but this one's pretty interesting is by default, flat will flat build.

00:50:36 We'll just pile your Python app together and assume that it must be fine, but you have a --compile app option that will compile your Python files.

00:50:46 Now people listening might think, well, but there's no Python compiler.

00:50:50 There is a Python compiler.

00:50:51 You just don't do anything with it.

00:50:52 It's in the interpreter, right?

00:50:54 So when Python loads your Python files, it converts it to a byte code and then interprets it.

00:51:00 Right.

00:51:01 But you can have it compile that to PYC files, which will detect problems.

00:51:05 Right.

00:51:06 That's kind of cool.

00:51:07 Yeah.

00:51:07 Yeah.

00:51:07 Tell people about that a bit.

00:51:08 One of the reasons we introduced those options is that if you always compile and there are some issues inside user code, the entire process fails, you know, Like even at least one single syntax error somewhere in your app leads to like a failed build process.

00:51:30 And also you can disable compilation so it could be easy to debug your app.

00:51:38 People asking like, is it like, can I see what's going on?

00:51:43 Like if I am like downloaded your app and looked inside, like, can I see what's going on inside my app?

00:51:49 Like can users see?

00:51:50 Well, it's not the way to properly protect your app from someone looking at the logic.

00:52:00 It's not 100% protection.

00:52:04 So maybe you should use obfuscators.

00:52:06 And we have some ideas to build obfuscating into Pipeline.

00:52:12 I was thinking obfuscators were kind of like a separate thing.

00:52:16 Imagine if it doesn't work.

00:52:18 I mean, it's good if it works, like if you obfuscate it and it works, but Python is pretty complex thing because it's, it operates by text files, you know, like, so you can break some paths, you know, like module names, you know.

00:52:35 Exactly.

00:52:36 If it obfuscates the import statement or it's an import request, like that's not going to work anymore, you know, cause that's how Python works.

00:52:44 It needs to see it.

00:52:44 Yeah.

00:52:45 I want to play with it.

00:52:46 I want to play with it.

00:52:46 If I compile my Python files, my PY files, does that omit them from the project and only include the PYC files or how does that work?

00:52:56 We remove the PY.

00:52:58 Yeah.

00:52:59 That's already pretty, pretty good levels of obfuscation.

00:53:02 There are disassemblers and decompilers for C code for, especially for.NET and Java, you can get those back to almost source level decompilation and sort of things.

00:53:12 So yeah, that's, that's kind of close to at least close to, I would say it puts on par with.NET level of obvious cases.

00:53:18 >> It's the star.

00:53:19 >> Yeah.

00:53:19 >> Yeah.

00:53:20 All right.

00:53:20 The last thing I guess we should talk about real quick is just permissions.

00:53:24 So if you live in this mobile world, this is androidmanifest.xml or info.plist or.entitlements and all these things.

00:53:32 And so you support these platform specific deals pretty much because Flutter supports them, right?

00:53:38 >> It's not like pre-camped permissions.

00:53:41 You can put anything you like.

00:53:42 It's basically, it's whatever you put here into PyProject.toml or common line arguments, it goes directly to this build template.

00:53:55 So it's, in fact, it's a big template, it's a cookie cutter template, and there are a bunch of for each statements, you know, like going through all these arrays.

00:54:06 So whatever you put here, it goes to those entitlements, PLLs and manifest file.

00:54:13 So it's pretty, it's pretty flexible.

00:54:15 Yeah.

00:54:16 But sure.

00:54:17 We have like some predefined.

00:54:19 When you say it's a cookie cutter thing, it's not just like a template.

00:54:24 It literally uses the Python cookie cutter library, right?

00:54:27 It's in a separate repository.

00:54:29 So every flat build command downloads that template and provides the data.

00:54:36 combined template and data and produces this Flutter app.

00:54:41 And then it goes to Flutter build.

00:54:42 >> It looks great.

00:54:43 And it also looks like a lot of work.

00:54:45 So congratulations on making it this far.

00:54:48 >> Thank you.

00:54:50 Yeah, it's still a lot of work.

00:54:51 >> Yeah.

00:54:52 Yeah.

00:54:52 Yeah.

00:54:53 Let's see.

00:54:53 I wanted to just have you real quickly close out.

00:54:56 I don't know where I stuck it somewhere in here, the roadmap for, for where you're going.

00:55:01 So maybe tell us what's in the future.

00:55:03 What's in the near term that people can count on and then we'll wrap up.

00:55:06 Yeah, maybe this roadmap is already outdated, but yeah, first of all, we want to have this 1.0 because it's maybe it's a psychological thing, you know, it's like people, developers feel stability and all that.

00:55:23 When there is 1.0, it says that the framework is ready for Silver Saps.

00:55:29 It's a commitment to sustainability.

00:55:31 Like we think we're ready.

00:55:32 It's commitment for sustainability and it's commitment for proper release schedule.

00:55:39 So we'll keep this release after releasing it and we'll be providing patches to this 1.0, etc.

00:55:46 So you can start doing real apps using 1.0.

00:55:50 So it's 1.0 and we were doing a lot of work trying to harmonize API, trying to remove outdated stuff, trying to like have consistent naming conventions across different controls, you know, it's like property names, method names, remove different duplicates.

00:56:11 So it's a lot of work and we're almost there.

00:56:16 So definitely like another thing is improving developer experience, right?

00:56:23 So improving developer experience, further improving developer experience, Like for example, we will be pre-installing all dependencies to make flood build command work really smooth on your computer.

00:56:37 Like right now you have to install Flutter by itself, but we'll be installing correct version of Flutter on your behalf and Android is, yeah, Java, Java could be a pain, real pain.

00:56:50 Like sending this Java home.

00:56:52 If you're a people who have not been through Flutter projects, they don't They don't know all the little tools and the version mismatches.

00:57:01 And I've got this version of Android Studio, but the Android SDK version wasn't checked correctly.

00:57:07 And so now I can't, you know, like that, what you're saying is there's a lot of stuff that you could help out with and make that smoother, but it's challenging.

00:57:14 Yeah. And still, it's still, you need Android Studio or XCode or Visual Studio.

00:57:21 Yeah. You can spend a lot of time configuring those things.

00:57:24 You know what, maybe next year we're going to, we're going to work, start working on the service, you know, like I call it packaging and publishing service.

00:57:34 So you could somehow link a GitHub branch, like a production branch or something.

00:57:39 If you push that, you guys grab it and you'll build all the assets.

00:57:42 Yeah.

00:57:42 Nice.

00:57:43 You can push your, just, you know, your code in this directory to this service and get artifact back, you know, like MSI file or ATP file.

00:57:55 That's it.

00:57:56 That'd be awesome.

00:57:56 Actually.

00:57:57 That's very cool.

00:57:57 You don't need to deal with all these dependencies, like all this stuff, you know, it's you just do your part, your like Python code and that's it.

00:58:08 And the rest will be done inside the, yeah, in the cloud.

00:58:12 So that's the idea.

00:58:14 That's the plan.

00:58:14 Very promising.

00:58:15 I love it.

00:58:16 And I love all this work, all this progress you guys have made.

00:58:19 So thanks for coming back on and sharing with everyone.

00:58:21 Let's close it out.

00:58:23 Final call to action.

00:58:23 People are interested in Flet.

00:58:25 What do you tell them?

00:58:26 Go ahead.

00:58:27 Download the latest version.

00:58:29 Try doing your app and join our discord channel.

00:58:33 Let us know what you think.

00:58:34 Awesome.

00:58:35 All right.

00:58:36 Thanks a bunch.

00:58:36 See you later.

00:58:37 Yeah.

00:58:37 Thank you guys.

00:58:39 Bye.

00:58:40 This has been another episode of talk Python to me.

00:58:43 Thank you to our sponsors.

00:58:45 Be sure to check out what they're offering.

00:58:46 It really helps support the show.

00:58:48 This episode is sponsored by Posit Connect from the makers of Shiny.

00:58:52 Publish, share, and deploy all of your data projects that you're creating using Python.

00:58:57 Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto, Reports, Dashboards, and APIs.

00:59:04 Posit Connect supports all of them.

00:59:06 Try Posit Connect for free by going to talkpython.fm/posit, P-O-S-I-T.

00:59:12 Want to level up your Python?

00:59:13 We have one of the largest catalogs of Python video courses over at Talk Python.

00:59:17 Our content ranges from true beginners to deeply advanced topics like memory and async.

00:59:22 And best of all, there's not a subscription in sight.

00:59:25 Check it out for yourself at training.talkpython.fm.

00:59:28 Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

00:59:33 We should be right at the top.

00:59:34 You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the Direct RSS feed at /rss on talkpython.fm.

00:59:43 We're live streaming most of our recordings these days.

00:59:46 If you want to be part of the show and have your comments featured on the air, be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

00:59:55 This is your host Michael Kennedy.

00:59:56 Thanks so much for listening.

00:59:57 I really appreciate it.

00:59:59 Now get out there and write some Python code.
