00:00:00 What's it like to be a beginner in software development? How about learning Python for the

00:00:04 first time? This episode is a special panel episode and is the first of a two-part series

00:00:09 we are doing on the podcast called Beginners and Experts. On this first episode, we have a

00:00:14 conversation between the beginners and the experts and how we can close the gap to help the beginners

00:00:19 get up to speed as quickly as possible. Our panelists are Carly Cindy, Joy Dayton May,

00:00:25 Cece Flora Muniqua, and Ned Batchelder. And this is Talk Python To Me, episode 203, recorded January 30th, 2019.

00:00:34 Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:00:52 and the personalities. This is your host, Michael Kennedy. Follow me on Twitter where I'm at,

00:00:57 mkennedy. Keep up with the show and listen to past episodes at talkpython.fm and follow the show on

00:01:02 Twitter via at talkpython. This episode is brought to you by Linode and Ting. Check out what they're

00:01:08 offering during their segments. It really helps support the show. Cece, Joy, Carly, and Ned,

00:01:13 welcome all of you to the podcast.

00:01:15 Hey, thank you.

00:01:16 Thanks. Glad to be here.

00:01:17 Thank you, Mike.

00:01:18 You're welcome. You're welcome. It's great to have you all here. People love the panel shows

00:01:22 with lots of different perspectives. So I'm excited to put this together for everyone. So let's start

00:01:28 with just who you are and maybe where you are in this beginner expert side of things and what you do

00:01:35 day to day so people have a perspective. And Cece, let's begin with you.

00:01:38 Thank you for having me, Mike. I'm really excited to be doing this with all of you. So I'm a student

00:01:45 in Zimbabwe at Terraro Institute of Technology and I'm studying information security. I started

00:01:51 programming in 2016 and I started with C when we were doing a module for the degree program that I'm doing.

00:02:01 Eventually, we started learning Python. I have a lecturer who is very passionate about Python. He's the one who introduced Python to us. He had to change the curriculum a bit. Instead, we would have learned Java, but he changed the curriculum so that he can introduce Python to us.

00:02:19 And so my first hello out in Python, I did in class. And after that, I just started going on and on learning Python.

00:02:29 Yeah, that's really great. I'm so glad that person changed it from Java to Python. That's happened in a lot of education spaces.

00:02:36 Yeah, I love that guy.

00:02:37 Definitely, because I don't think I would have continued with Java. It's not very favorable for me.

00:02:44 For sure. All right. That's wonderful. And what do you do day to day? You're still a student. Are you a grad student at the school there?

00:02:50 I'm still a student. I'm going for my senior year next year, but currently I've been interning at Dimension Data and I've been with them for a few months now.

00:03:01 My main work task at Dimension Data includes automating tasks and developing learning hubs.

00:03:10 So what we do is write Python scripts. All of the work that I've been doing today is as done in Python. So it's great.

00:03:18 We also do a lot of integrating with APIs, which is a new technology for me.

00:03:23 And I've been learning a lot from Dimension Data and everything that we do there.

00:03:28 Yeah. How exciting. Dimension Data is doing amazing stuff with getting people into programming.

00:03:32 And that's how I know you. You and I work together a little bit on some of those projects.

00:03:36 So that's great. Joy, yeah. How about you? Tell us about yourself.

00:03:40 Thanks for having me. And my name is Joy, Joy Ma.

00:03:44 I'm a product manager at the Paulson Institute in Chicago.

00:03:49 So we're a think tank focused on international economics.

00:03:54 And when you think about think tanks, the stereotype of a think tank is usually in D.C.

00:04:01 As a matter of fact, there are over 400 think tanks in D.C.

00:04:05 They have a lot of former politicians.

00:04:08 They have a lot of former diplomats.

00:04:10 And they have amazing experiences.

00:04:12 And based on their personal experiences of sometimes 60 years, they make policy recommendations for other policymakers on the Capitol Hill.

00:04:23 But our think tank is pretty young.

00:04:26 We were established in 2012 by former Treasury Secretary Hank Paulson.

00:04:30 And we're trying to think of a new way to establish a name in this already very crowded field.

00:04:39 And that's when I started to venture out and look at all of the different options to do policy analysis.

00:04:45 Back in 2016, when I first started looking at international trade policy and international investment policy,

00:04:52 that was a moment I saw they are just half a decade of data freely, publicly accessible out there.

00:05:02 But nobody has ever done any sort of research into it.

00:05:05 So I thought, you know, being a relatively younger person without a 60-year diplomatic experience on my belt,

00:05:12 I would just look into 60 years' worth of data and see what I can come up with.

00:05:16 And that's how we conducted our research at Paulson Institute and has been pretty successful, I would say, by institute, by think tank standard.

00:05:27 A lot of our research did get published on Wall Street Journal, New York Times.

00:05:33 And we certainly also made our fair share of contribution to policymaking recommendation.

00:05:40 That's really great.

00:05:40 So it sounds like a lot of data science, probably a lot of Jupyter notebooks and analysis like that, yeah?

00:05:46 A lot of pandas, a lot of cleaning, a lot of days.

00:05:49 Sometimes it's pretty painful.

00:05:52 I can imagine.

00:05:52 Cool, cool.

00:05:53 That's excellent.

00:05:55 Welcome.

00:05:55 Carly, how about you?

00:05:57 Yeah.

00:05:57 Hey, thanks again so much for having me on the show.

00:06:00 I'm excited to be here.

00:06:01 I'm representing part of the beginner side of this conversation.

00:06:04 I have my master's in molecular biology, and I worked doing scientific research for about 10 years.

00:06:11 And I was working in an epigenetics lab and generating a lot of sequencing data, which are essentially flat files with a lot of strings,

00:06:19 or sequences composed of AT, Cs, and Gs, and some metadata.

00:06:22 And I needed a way to analyze all of this data I was generating.

00:06:26 And there are public websites, but they can be super slow when you're trying to run these files when they get really large or a lot of these files.

00:06:33 So you really need to run them at the command line, run these tools.

00:06:36 And generally, while you're SSH'd onto a larger machine than you have on your personal machine.

00:06:42 So that introduced me to a whole lot of bash and some scripting.

00:06:45 And then we started designing experiments that are a little bit more complex.

00:06:49 So it required a lot of modifications to these files before we sent them in to the command line tools.

00:06:56 And so that's when I started looking into Python.

00:06:59 And I took a class called Python for Biologists.

00:07:02 And this is what really opened my eyes to how many problems Python could solve that I was faced every day.

00:07:09 Just like little problems.

00:07:10 So I started building tools for the lab where people could like drop Excel sheets into it.

00:07:15 And it would just like parse and figure out and do some things that we just would make our life easier day to day.

00:07:19 And so after building some of these tools and doing these analyses at scale, I decided that I wanted to do that full time.

00:07:27 And so for the past two years, I've been working full time at a company that makes software for life science researchers and for their daily workflow.

00:07:35 So it's kind of a perfect fit there.

00:07:37 So in being in a really small startup, I feel like I do a bit of everything day to day.

00:07:42 I look at code and improve merger busts and write code, modify code, test code.

00:07:47 Also wear a bit of a product project management manager hat and define projects and research potential tools.

00:07:54 And if they're out there, maybe we can, you know, containerize them or maybe build our own.

00:07:59 I mean, I also even talk to customers and see where we can be meeting their needs with the code that we're writing.

00:08:05 Well, it sounds really interesting.

00:08:06 I think this is one of the situations where people have some skill already, like really solid skill, like you have molecular biology, right?

00:08:16 And programming makes that better.

00:08:19 It's not like, oh, forget this biology.

00:08:21 I'm just going to go become a programmer, right?

00:08:23 I want to do React with, you know, JavaScript, right?

00:08:26 It's just like, how do I do what I'm doing better?

00:08:28 Yeah.

00:08:28 Yeah, absolutely.

00:08:29 I was trying to be affirmative, assertive.

00:08:32 Yeah.

00:08:33 Yeah.

00:08:33 Yeah.

00:08:34 Yeah.

00:08:34 I think, I mean, same thing.

00:08:36 I think that joy, like you were coming, you know, from the economy side of things where it's like being able to integrate the knowledge you already have and just enhance the knowledge you already have and just make, see those problems that you've seen in the past, however many years you've been in that field.

00:08:48 And then all of a sudden be able to solve them with some code is really exciting.

00:08:53 Absolutely.

00:08:53 You know, I was trained as an economist in undergrad and graduate level studies for, God, almost a decade.

00:09:01 And the most valuable part of the training is to help you identify questions that needs to be answered.

00:09:09 And it's with Python for the first time, I feel I have so many tools to answer those questions.

00:09:16 But as you said, Carly, sometimes you're wearing the product manager head and you need to identify what is the need of your client.

00:09:23 And in my case, I need to identify what is the pain point for a policymaking and use the domain knowledge we have.

00:09:31 We can identify those points very specifically and then use the tools such as Python.

00:09:36 We can solve it so much more efficiently.

00:09:38 Yeah.

00:09:39 Absolutely.

00:09:39 Ned, you want to introduce yourself as well?

00:09:42 Yeah.

00:09:42 So let me just start off by saying that as a beginner in both molecular biology and policy analysis, I am a little intimidated to be on this panel with all these experts.

00:09:51 Absolutely.

00:09:53 So I'm a software engineer with a long career.

00:09:55 I'm deeply embedded in the Python world.

00:09:58 I organize the Boston Python user group.

00:10:02 I've given PyCon talks at, I think, 10 different PyCons.

00:10:07 I'm a maintainer for coverage.py.

00:10:09 I hang out in the Python IRC channel.

00:10:11 I really need to find another hobby in my life of some sort.

00:10:14 I do everything with Python.

00:10:16 Yeah.

00:10:16 You and me both.

00:10:17 I'm not going to introduce myself, but I'm both a beginner and expert, just as you said, Ned.

00:10:21 Exactly.

00:10:23 Certainly in the biology and the policy side of things.

00:10:26 So I want to start this conversation off by talking about something that you wrote, Ned.

00:10:32 Yeah.

00:10:32 Highlighting the beginners and experts perspective from somebody who's been doing it a long time, right?

00:10:39 When somebody's a beginner, they are just always bumping into sharp edges of the technology.

00:10:45 Oh, why does this not work?

00:10:46 Oh, why is this, you know, why won't this thing install on this machine and all that kind of stuff, right?

00:10:51 But you talk about how, well, in some ways, those sort of feelings and those challenges don't go away.

00:10:56 So maybe you want to quickly summarize your beginners and experts article or essay.

00:11:01 This got started almost two years ago when I was working on a side project.

00:11:04 And as I talked about various aspects of that side project, first at a lightning talk at work,

00:11:09 and then I wrote a blog post about something I was struggling with about it.

00:11:13 And I realized that over the course of that summer, as I was working on that project,

00:11:18 that I was feeling like a beginner in lots of ways.

00:11:21 There are aspects of it that I knew exactly what to do, but there were aspects of it where,

00:11:25 you know, I was Googling on Stack Overflow to figure out, you know, how do I make this thing do a thing?

00:11:30 And that beginners often feel like that they are having trouble because they are a beginner

00:11:36 and that their plan is I will learn everything and eventually I will be an expert.

00:11:42 And once I am an expert, like all these other experts I see, then I won't have those problems anymore.

00:11:47 I, you know, I will know what to do.

00:11:49 And I won't have these confusing mornings where everything seems wrong and backwards

00:11:54 and I can't make anything work.

00:11:56 Just nothing works.

00:11:57 Why does this not work?

00:11:58 Why does this not work?

00:11:58 Right.

00:11:59 Michael, what you just described, right?

00:12:01 The sharp edges and why doesn't this install on that machine?

00:12:03 I don't know how you knew what I did this Monday, but yes, that's the way my days often are.

00:12:10 So beginners think experts know everything and there's no friction in their development tool

00:12:15 chain and cycles and all that stuff.

00:12:16 But what you'll know once you become an expert is that experts don't know everything.

00:12:22 Experts are constantly encountering new things.

00:12:25 Joy, you just mentioned that you do a lot of pandas.

00:12:27 I have done maybe two things with pandas.

00:12:30 And one of them was literally last night.

00:12:31 And I was Googling on Stack Overflow to ask, how do I know what the names of the columns in a pandas data frame are?

00:12:38 Right.

00:12:38 Which is super basic because I don't know anything about pandas.

00:12:41 Oh, Nat.

00:12:42 I've done countless nights of mine spent looking at Stack Overflow.

00:12:47 Yes, exactly.

00:12:48 And the thing I was trying to drive home with, I eventually wrote this blog post and I did a talk at Boston Python about it.

00:12:56 And the point I was trying to drive home was that although I stand before you as a sort of acknowledged expert in Python, I often have no idea what I'm doing.

00:13:05 And the real difference between beginners and experts isn't that beginners know nothing and experts know everything.

00:13:11 But that beginners think that this feeling is either going to last forever because they're dumb or it's going to eventually go away because they've learned everything.

00:13:21 Whereas experts know this is a very familiar feeling.

00:13:24 I have been in situations lots of times where I don't understand what's going on.

00:13:29 And because I've been in that situation lots of times, I know I'm going to get through it.

00:13:34 I have some tools.

00:13:35 I have some strategies that I can use to get through this difficult part and end up back again in a place where I know how to do things.

00:13:44 Either because I've put that problem behind me or because I've learned the solution to that problem and I can now apply that solution.

00:13:50 And one of the bumper sticker slogans that I'm thinking of using about this is that an expert is just someone who's been a beginner many, many, many times.

00:13:59 Over and over again.

00:14:01 The expert goes back to being a beginner and comes out of it and so has cycled through that learning curve over and over again.

00:14:07 That's super interesting.

00:14:08 And it's basically you get really good at, all right, how do I interpret this error message?

00:14:13 What places was I able to Google or search or arrive?

00:14:16 What the answer is?

00:14:17 Where did I find an example that I could borrow and adapt?

00:14:19 Like those are the kinds of things you get better at.

00:14:22 And then the calmness of like, yeah, this is really frustrating, but it's just like last week.

00:14:27 And I know by lunchtime it'll be fine.

00:14:29 We'll figure this out.

00:14:30 But right, it doesn't go away.

00:14:31 Right.

00:14:31 Or I know that this is a thing that I really do have to master.

00:14:34 So I'm going to use my good learning strategies for it.

00:14:37 Or I know this is a problem that I just need to put some duct tape over right now and then I can forget about it.

00:14:43 So I'll just use my quick hack strategies for this.

00:14:45 There you go.

00:14:45 Stack Overflow for that one.

00:14:46 Yeah, I never use Stack Overflow for the real learning strategies.

00:14:49 No, I would never do that.

00:14:51 Never.

00:14:51 Of course not.

00:14:52 That would be wrong, Ned.

00:14:54 Cece, let me ask you, how do you look at experts?

00:14:58 Do you feel like all these people who have been doing this for a long time, like Ned, they've just got it all figured out?

00:15:03 Or do you connect a little bit more with his perspective of what he's writing here?

00:15:07 Yes, I do understand what Ned is talking about.

00:15:10 In my perspective, sometimes I feel like experts do know everything.

00:15:17 There are some people who have started coding at like nine years old.

00:15:23 It's hard to believe that that person still has those frustrations when you started coding when you were nine years old.

00:15:29 In my view, I'll be seeing you as someone who knows everything about coding you.

00:15:33 Every error you come across, you'll be able to fix it in a minute.

00:15:38 But as I've been growing in coding, I'm seeing that as I learn more, as I learn new things every day, those frustrations keep coming back.

00:15:49 And I keep going through the same process again of encountering an error and then having to fix it, getting the frustration and everything.

00:15:58 So experts and beginners, we are more on the same level if we try to look at it.

00:16:06 Just like Ned said, experts are beginners who have been going through the frustrations over and over and over again.

00:16:15 That's true.

00:16:17 Yeah, I think like not unique either just to like developers.

00:16:21 I feel like scientists make good programmers because we're so familiar with failure.

00:16:26 Because like when you set up experiments in the lab, like, you know, a negative result is still a result.

00:16:31 But you're getting so many negative results is so infrequent that you have a eureka moment.

00:16:36 And so, but I feel like that kind of helped me a little bit with programming too.

00:16:40 It's like, I try something and it doesn't work.

00:16:42 It's like, all right, well, that's, you know, just check that off.

00:16:44 I'll move on to the next thing.

00:16:46 Like a negative result is still a result.

00:16:48 That's right.

00:16:49 It's kind of like the Thomas Edison, I've learned 3,000 ways not to build a light bulb.

00:16:53 That's where you're going, right?

00:16:55 That is really interesting when you say how you know the learning strategy and the tools so that you're confident that you're going to be able to solve the problem either today or tomorrow.

00:17:07 And for me, you know, in data science, we talk about this black box.

00:17:11 For me, the path to gaining that confidence is almost like a black box to me.

00:17:16 As a beginner, we learn very practical skills.

00:17:20 We learn all commands in pandas here and there.

00:17:23 But from here to having the confidence to solve a problem that's never been encountered by us before,

00:17:29 gaining that confidence for me is definitely something very interesting to learning more about.

00:17:35 It's hard to get to that point, right?

00:17:37 To feel like you will be able to tackle whatever problem you encounter, whether it's a molehill or a mountain.

00:17:44 And honestly, I think one of the good strategies is to not try to solve everything.

00:17:48 I've seen some beginning learners who, they'll put it this way, they want to understand everything.

00:17:53 Everything, they either mean very, very broad, right?

00:17:56 I want to read the entire Python standard library.

00:17:58 I want to know all of it, which it's just too big.

00:18:00 You can't do it.

00:18:01 Or they mean very, very deep.

00:18:02 I want to know how Python's implemented, like what's really down under there.

00:18:06 And sometimes I've seen people get taunted, like, so you want to know how transistors are made?

00:18:10 Like, how deep down are you really talking about here?

00:18:14 And beginners, I love that optimism and hunger and veracity that a beginner like that can have.

00:18:20 But they're going to have to realize that they're not going to be able to do that.

00:18:24 And at some point, they're just going to have to say, there's a thing right over there I could learn about.

00:18:28 And I'm just not going to learn about it because I have to go and do this other thing over here.

00:18:32 That's another kind of strategy.

00:18:33 I know enough to solve this problem.

00:18:35 We're good.

00:18:35 Yeah.

00:18:36 What you just said is both very reassuring to a beginner like myself, but also very intimidating.

00:18:42 Weirdly.

00:18:44 Yes.

00:18:44 It's the same time.

00:18:46 One of the things I said in the blog post is, you know, the good news for beginners is that, you know, experts aren't significantly different than you.

00:18:53 They've just had a lot more experience.

00:18:55 But the bad news for beginners is this bad feeling you have where you're confused and mystified and frustrated.

00:19:01 You're going to have that for the rest of your career.

00:19:03 I mean, I've already run into that.

00:19:04 I feel like even I've been doing this, I guess, for two years officially.

00:19:09 And I've run into that many times.

00:19:11 And each time I hit that where I'm like, I've started coding something and I'm like, oh, no, I don't know if I can actually do this.

00:19:18 But then somehow, you know, like I take a step back, I go back and then actually getting beyond that feeling.

00:19:24 Like the next time I hit it, I'm like, all right, I already had this terrible feeling before.

00:19:28 I know I can get past this.

00:19:31 So I think maybe just the like kind of dulling your senses to that feeling of like, oh, my gosh, you know, like this is a huge, huge hill to climb.

00:19:40 Right.

00:19:41 Yeah, that's really interesting, Carly.

00:19:42 I remember when I was first, the first couple years I was working as a professional developer, I didn't have much experience before.

00:19:49 So it was both awesome and super frustrating and scary at the same time.

00:19:54 And I remember often taking 15 minute walks around the office park.

00:19:59 I'm just like, you know what?

00:20:00 I just I just got to step away for a minute.

00:20:02 It's sunny outside.

00:20:03 I'll be back and I can just I can clear my mind and do this.

00:20:06 And I guess I don't really do that that much anymore.

00:20:08 But yeah, I think you get less emotionally frustrated, but you still are bumping into these sharp edges.

00:20:16 You're just like, why does this not work?

00:20:17 Like, it's I've done this for a year and it's the same.

00:20:21 Why is it not?

00:20:21 You know, just like, what is going on today?

00:20:23 Right.

00:20:23 Yeah.

00:20:24 One of the big challenges, I think that Ned, I'd love to hear your thoughts on this, but I'm going to ask the ladies first.

00:20:29 One of the really big differences, I think, is the beginners have a harder time deciding how to start to solve a problem.

00:20:41 As an expert, you can look at something and go, oh, that needs we got to parse this file type and we're going to use the database and probably we're going to use an ORM and we're going to wire it together like this.

00:20:49 And then, you know, we go and bump into the sharp edges of those things.

00:20:52 But we kind of know roughly how to attack the problem.

00:20:57 And I think that a lot of beginners are like, I don't know how to start.

00:21:00 I see what you did.

00:21:01 This was amazing.

00:21:02 I have no idea how I would ever come up with that idea to get there.

00:21:05 Like, how does that like, does that resonate with you all?

00:21:08 Definitely.

00:21:08 I mean, this is just kind of when you're given a problem and you're just like, oh, okay.

00:21:15 Now, where do I start?

00:21:17 You know, like when you're taking an introductory class or any of those, it's like, this is what we're going to do and this is how we're going to solve it.

00:21:22 You know, or I mean, I know that like last week I had, I was trying to solve a problem and I ended up coding probably like 200 lines of code.

00:21:30 And then I was going to set up kind of a sanity check with a colleague.

00:21:33 And I was thinking about how to explain this problem to that person.

00:21:38 I realized a much simpler solution.

00:21:40 So I basically got rid of all that and then just was able to solve it with a few lines of code.

00:21:45 And I think kind of having that perspective like of stepping back and like knowing like the tools to solve it, you know, like if you've already kind of solved something indirectly that's similar to it.

00:21:56 And I think that was my issue last week was I had never solved anything similar to that problem before.

00:22:01 So I didn't know like the tools to be able to solve it in the most efficient way.

00:22:06 So I kind of spent a long time making a really long solution to it.

00:22:11 And then realizing that there was a much more direct route.

00:22:14 And I think, yeah, I think that familiarity with like seeing things done one way and then just dealing with the little details is definitely tough being a beginner because you haven't seen a lot of examples of the way a problem is solved.

00:22:27 This portion of talk Python to me is brought to you by Linode.

00:22:31 Are you looking for hosting that's fast, simple, and incredibly affordable?

00:22:34 Well, look past that bookstore and check out Linode at talkpython.fm/Linode.

00:22:39 That's L I N O D E.

00:22:41 Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:22:46 They have 10 data centers across the globe.

00:22:48 So no matter where you are or where your users are, there's a data center for you.

00:22:52 Whether you want to run a Python web app, host a private Git server, or just a file server, you'll get native SSDs on all the machines, a newly upgraded 200 gigabit network, 24 seven friendly support, even on holidays, and a seven day money back guarantee.

00:23:06 Need a little help with your infrastructure?

00:23:08 They even offer professional services to help you with architecture, migrations, and more.

00:23:13 Do you want a dedicated server for free for the next four months?

00:23:16 Just visit talkpython.fm/Linode.

00:23:19 From my experiences, when I first started learning Python about two years ago, it's relatively easy to learn about the specific tools, to learn about pandas, to learn about object-oriented programming, to be able to write a couple of lines of code and make it up and running.

00:23:39 But the real problem for me, and this might be just beginners' ignorance at this point, I think the tools are relatively easier to acquire and there are concrete examples out there.

00:23:49 And if you run into a very specific problem, there are people out there, you can ask them, there is stack overflow.

00:23:56 But the real problem comes in for me when it comes to the structure.

00:24:00 How do I arrange the tools in my toolbox to identify, solve, and reassess my own solution to a specific problem?

00:24:09 And that's when, I think it was roughly two years into learning Python by myself, I started to realize,

00:24:18 okay, right now the real problem for me is not to solve one specific problem to get the name of the column,

00:24:25 but to actually identify the problem and put it in a framework that I know how to extract the features and how to solve it.

00:24:34 And that's when I started.

00:24:36 For the first time, I was just taking a lot of online classes.

00:24:39 For the first time, I joined, I don't know if I'm supposed to say this, but I joined data science training at General Assembly,

00:24:47 which gives you a much deeper understanding about just ideology.

00:24:51 From structurally speaking, how to think about the problem as a data science problem,

00:24:57 as opposed to economics problem, which I'm very comfortable with, but it's not the best way to solve, to get answers that we are looking for.

00:25:06 Joy, that's exactly, I think being able to become familiar with the tools is something that is really helpful,

00:25:11 because knowing the tools that can help solve your problems is really important.

00:25:14 Because if you don't know a general idea of what some libraries or tools can do,

00:25:19 then you might, like me, start writing it from scratch.

00:25:23 And then be like, oh, there's something that I can do.

00:25:26 Why did I just keep installing the magic?

00:25:31 So, like, I think that that's, you know, like, and the more you're around and you have, like,

00:25:35 those water cooler conversations and you hear about, like, tools that other people are using,

00:25:39 and then you can kind of apply those tools to problems that you have.

00:25:43 I think it's kind of exposure to the domain, I think, can really help speed up answering problems.

00:25:49 But that's, I mean, it's tough as a beginner because you don't have that exposure yet.

00:25:53 Yeah, and it's super hard to learn.

00:25:54 It's not very well taught anywhere, I would say.

00:25:56 Cece, how do you feel about this idea of, like, how do I even get started solving a problem?

00:26:01 I can relate to what you're saying, Mike.

00:26:04 There are times that I come across challenges that I do not know where exactly to start solving the challenge.

00:26:09 When I started working at Dimension Data, I came across this site, the PyBytes site, where they have challenges.

00:26:17 Their challenges are so awesome.

00:26:19 And I started taking those challenges.

00:26:21 I started with the beginner challenges, of course.

00:26:24 And when I read the challenges, some of them are so simple that I can think, I can do this in, like, one minute.

00:26:32 But when I go into the editor and try to write some code, my brain freezes, and then I have nothing.

00:26:39 Yes, that's how I feel sometimes.

00:26:42 But as I continue taking the challenges on PyBytes, I realize that after some period of time, and I can relate to other challenges that I've done before and be like, oh, last week I did less combinations.

00:26:56 I think I can apply that to this challenge.

00:27:00 That's how experts feel like they have exposure, just like Joy said.

00:27:05 They have exposure to more tools to use and what you can do to solve challenges, which I think the first step of deciding what to use when solving a challenge is the most important.

00:27:17 When you're facing a challenge, rather than just jumping in to try and solve the challenge without even thinking through what tools you can use to solve the challenge.

00:27:27 That's really interesting.

00:27:28 And I think you doing the PyBytes challenge makes a lot of sense.

00:27:31 Bob and Julian are doing great stuff with their Code Challenges platform.

00:27:34 So I think that practice helps.

00:27:36 I do want to say I feel, I totally agree with Ned that we, as experts, we run into these things where it's like, wow, this is so frustrating.

00:27:44 Why doesn't this work?

00:27:45 Why can't I make this silly thing?

00:27:47 You just do whatever it's supposed to.

00:27:49 And it feels very similar.

00:27:50 But what I think is very different is when you approach a problem, you're like, I see, I've solved this kind of before.

00:27:55 And we did this major thing, this major thing, and that major thing.

00:27:58 And it kind of clicked.

00:28:00 And you can sort of break the problem down into these smaller bits.

00:28:03 And you have this history of I've kind of solved this data problem like four or five times like this.

00:28:07 It's probably like that.

00:28:08 Let me try that first.

00:28:09 I think those building blocks are a huge differentiator.

00:28:13 And that gets way, way easier.

00:28:15 Ned, what do you think about my idea here?

00:28:17 No, definitely.

00:28:17 As someone with a long career, I've been in lots of different projects and written lots of different code.

00:28:25 So I have sort of a long tail of patterns that I can match against, right?

00:28:31 We get a new problem.

00:28:32 This reminds me of something.

00:28:34 I can either just remember what I did before.

00:28:36 I can literally go and find the code.

00:28:39 Often, I can do something quickly at work because previously in a side project, I had to solve that problem.

00:28:44 And I could do it at my leisure on a side project.

00:28:46 But then I've got the code in place that I can just go and grab for a work thing.

00:28:50 But I have to say, Titi just said that she would read Python bytes, think, oh, I can do this.

00:28:56 And then she gets in her editor and her brain freezes.

00:28:58 That happens to me too.

00:29:00 Exactly that feeling.

00:29:02 I can't tell you how many times I'm waking up in the morning and I think, I know what I'm going to hack on before breakfast.

00:29:07 This is going to be great.

00:29:08 And then I get into Vim and I'm like, you know what?

00:29:10 This is actually hard.

00:29:10 I don't know what to do right here.

00:29:13 Like, maybe I was just still in kind of that foggy dream state and I thought it was easy.

00:29:17 But right now, it's actually hard.

00:29:19 And I'm not going to make the kind of progress over this cereal bowl that I thought I was going to make.

00:29:23 And that's just programming.

00:29:25 It's really hard to be specific enough to tell a computer exactly what to do.

00:29:29 It just is.

00:29:30 And so, sometimes you think it's going to be a thing and it turns out to be harder than that.

00:29:37 I think a lot of it, the pattern matching is really the way I think of it in terms of going back into your experience.

00:29:43 I was working with an intern last summer and we were debugging a problem.

00:29:46 And I said, I think it's going to be, this is the solution.

00:29:49 And he asked me, like, how did you know that was the solution?

00:29:51 And I felt like, well, in the logs, there was a zero.

00:29:55 And over here, there was a none.

00:29:57 And zero and none are kind of the same.

00:29:59 And they were both kind of out of place in each niche.

00:30:04 And so, I kind of put those two things together and what would make that happen.

00:30:07 And so, there's a lot of pattern matching in solving problems, either to decide how to get started on a thing or to debug a thing.

00:30:15 And just being, going through it a number of times over the years gives you more of a sense of sort of like,

00:30:22 what's the anomaly in this environment that I should be focusing on to debug the problem?

00:30:27 Or how do I break this big problem into smaller chunks, two of which are familiar and one of which is unfamiliar,

00:30:33 so that I can just do the familiar ones quickly and then focus on the unfamiliar.

00:30:36 And that kind of cognitive pattern matching, I think, is a skill that you develop over time.

00:30:42 You definitely develop it over time.

00:30:44 What I've been wondering and kind of searching for the last six months is how can you fast track that?

00:30:50 What I've been wanting to do is build a class that basically says, here are a bunch of problems.

00:30:57 How, as an experienced person, do you go through the idea of even starting to attack the problem?

00:31:02 You know, almost forget, like, here's the details of an ORM or an API.

00:31:07 It's just like, how do I even begin to put this into parts that then I can attack with code?

00:31:13 What do you think?

00:31:14 Like, how would you do that?

00:31:15 For instance, what I just said was, oh, this is the anomaly that I'll focus on.

00:31:19 Well, to a beginner, the entire log file is new and different and exotic, right?

00:31:23 So how do you know?

00:31:24 It's a scrambled mess.

00:31:24 How do you know what's the important part?

00:31:25 What's the regular normal part of this gobbledygook?

00:31:29 I don't know.

00:31:29 So, yeah, that is a thorny problem.

00:31:32 How to get that kind of facility with the normal versus the weird in our environments.

00:31:39 I think it can be done, but I don't really quite have a great sense on how it is.

00:31:43 So somebody presents a problem to you, like, hey, I need you to get this data that we got off of our experiment, and I want you to clean it up and analyze it and show it in this way.

00:31:53 You know, something to that effect.

00:31:54 Like, conceptually, that's really easy, but when you try to actually look at what are the actual steps my program has to do?

00:32:01 What are the actual big ideas?

00:32:03 Like, okay, we're going to read this file.

00:32:04 Okay, we're going to, you know, try to transform this data.

00:32:07 Just like those big steps, I feel like, are the challenge to, once you identify them, then it kind of becomes an easier problem to solve.

00:32:14 But how do you help beginners learn to identify those, sort of break the problem down like that, do you think?

00:32:20 One of the problems I think beginners have, just to jump in, is to think like a computer.

00:32:24 We're not used to having to think so specifically about each tiny little step that we can then write the code that does what we need to do, right?

00:32:36 A lot of beginners will, I'll say, well, tell me in English what it is you want this program to do, and they'll give me one sentence of the whole thing.

00:32:43 It's got to browse the web.

00:32:45 Well, there's little bits and pieces in browse the web, right?

00:32:48 So let's break it down.

00:32:49 And that's very difficult for some people to do because we're not used to thinking that way, right?

00:32:53 I can say to a person, go to the store and get the milk.

00:32:56 And they're like, okay, I'll go to the store and get the milk.

00:32:57 I didn't need to break it down into all the little pieces, right?

00:33:01 You can find videos online of people playing with their kids.

00:33:04 I'm a robot.

00:33:05 Tell me how to make a peanut butter and jelly sandwich.

00:33:06 And the kid tries to tell them what to do.

00:33:08 And the dad just literally follows the instruction and makes a total mess of the thing because the kid's not used to explaining how do you get the lid off of a peanut butter jar?

00:33:16 The computer is that dad.

00:33:21 This portion of Talk Python To Me is brought to you by Ting.

00:33:23 Let me tell you about Ting, a new mobile service available in the U.S. that's targeted developers and other technically savvy folks.

00:33:30 First of all, their average customer only pays $23 a month, but they're no discount provider.

00:33:35 Their service runs over T-Mobile's and Sprint's fast nationwide network.

00:33:39 If you don't use that much data because you're usually on Wi-Fi, like many of you are, then Ting will save you a ton of cash.

00:33:45 But don't worry, you can still use as much data as you like for just $10 per gig.

00:33:49 One mobile feature I use all the time is tethering.

00:33:51 And with Ting, you get unlimited tethering at the same data rate with your account.

00:33:56 $6 a month for a phone line, $10 a gig, $3 a month for text if you usually chat over iMessage or WhatsApp.

00:34:02 Think about it.

00:34:03 No contracts and super clear and fair billing.

00:34:06 Visit python.ting.com.

00:34:08 That's python.ting.com and check out their savings calculator.

00:34:12 Enter your usage and see exactly what you'd pay.

00:34:15 Use that link and you'll get a $25 credit to try them as well.

00:34:19 That's python.ting.com or just click the link in the show notes.

00:34:24 I mean, that's a really interesting way to put it where you're like, I'm just going to go to the store, but you're like, you know, get in the car and do all these things.

00:34:30 So it's kind of when you say that, it kind of like picture like a flow chart in my head.

00:34:35 Like, so with like a problem, generally, is there some type of data?

00:34:39 Like, is it in a file?

00:34:40 Is it a stream?

00:34:41 Is it like from the web?

00:34:42 Like, so and how do you how do you access that data?

00:34:44 Where is that data going?

00:34:45 So like kind of following the trail of the data and what needs to happen to that data at each point really dictates the way you will program something, whether it's a file or whether it's a stream or, you know.

00:34:56 And so I think kind of following that the trail of data and then kind of making choices on that can help break things down.

00:35:04 Right.

00:35:05 And one of the fundamental characteristics of the software world that we've put ourselves in is that there are unlimited levels of complexity.

00:35:12 And so we deal with abstractions all the time.

00:35:15 And another challenge for beginners is accepting an abstraction and using it.

00:35:21 And in a way, breaking down a problem for a computer is all about setting up those barriers between the two halves of the problem and dealing with them separately rather than thinking of them as a whole.

00:35:32 Right.

00:35:32 So when I said when we said go to the store and get some milk, well, step one is get in the car.

00:35:36 Step two is drive the car to the store.

00:35:38 That step two is awfully complicated.

00:35:40 Right.

00:35:40 Ask the people who are building self-driving cars right now.

00:35:43 So there's an abstraction there that we're willing to deal with.

00:35:46 Right.

00:35:46 You turn the wheel, the car turns.

00:35:47 Right.

00:35:48 Sometimes you have to debug that abstraction.

00:35:50 Sometimes you just have to accept that abstraction.

00:35:52 And moving up and down those levels of abstractions and just ignoring some of them, what's underneath some of them, but debugging what's underneath some other ones.

00:36:01 It's a huge maze of distractions and complexity that beginners can get lost in.

00:36:06 So that's just another skill.

00:36:07 I think it sort of touches upon the point I was talking about before.

00:36:10 The really difficult part for a beginner may come from how to extract structure and abstraction out of a very complex problem.

00:36:19 When we're talking about making a peanut butter sandwich, then for a beginner, he or she doesn't necessarily know what are the steps to do so.

00:36:27 Once you have the steps to do so, you can Google how to open the peanut butter jar.

00:36:34 You can Google how to put a bread into the toaster oven.

00:36:37 And I think the difficult part is actually building that structure, having that mental structure to know which step is after another one.

00:36:46 And for me personally, a lot of the, it was about two years getting to Python studies.

00:36:53 It started to click for me.

00:36:55 To some extent, I feel like the building the structure of to solve, building the structure of a solution to a problem is just like any type of analytical thinking.

00:37:07 You need to identify the problem and then you need to have five to seven steps to resolve a problem.

00:37:14 And then going into each of the every single step to look into the tools, the practical solutions to every single bottleneck that we need to overcome.

00:37:24 And for example, I'm an economist and I was looking at U.S.-China trade war and people keep asking this million dollar question, which is, what is going to be the cost of the trade war?

00:37:36 Is the U.S. economy going to be impact?

00:37:38 And it's such a great question, but it's so complex.

00:37:43 But then once you break it down into how about let's look at the first industry, the second industry and the service industry and look at the impact on all three industries by the trade war.

00:37:55 And then you have a structure to go into there to find the data, to extract information out of the data.

00:38:00 And once you compile them together, you're answering an awfully complex question.

00:38:05 That's a good way to break it down.

00:38:07 You know, Ned, something that came to mind is you were describing these being willing to accept an abstraction, right?

00:38:13 Like you don't actually care how the CPU makes it work.

00:38:16 I just know if I type this and I hit run, it runs, right?

00:38:19 Like I'm willing to just not even worry.

00:38:21 It's like there's a gray layer that I just am willing to kind of accept.

00:38:26 And I think that those layers of abstraction happen a lot in programming at different levels, right?

00:38:32 Like I'm willing to use an ORM and I'm willing to call save and I don't care how the database works.

00:38:37 Or I need to dig in and understand the full third normal form theory of relational data and get obsessed about that, right?

00:38:45 Like there's totally different levels there.

00:38:48 And I think one of the challenges when you're first learning is what is the right level?

00:38:53 When can I ignore the nuanced details of the database?

00:38:57 And when am I going to be like, when is that like critical to make that right?

00:39:01 So choosing the level of abstraction, I think also tells you like what kind of tools and APIs and packages you can use even.

00:39:08 Right. Well, and the fact, I mean, you've already chosen Python, right?

00:39:10 Which means that there's certain kinds of things other programmers and other languages have to worry about that you don't have to worry about.

00:39:17 Right.

00:39:18 Malloc anyone?

00:39:19 Exactly.

00:39:20 Right.

00:39:21 You don't have to allocate and deallocate memory.

00:39:23 And if you're working in data science, like Joy is, then you've got Pandas and Pandas provides you this really high level abstraction of a data frame that does all sorts of things.

00:39:31 You know, that five years ago before Pandas was around, if we wanted to do that analysis, even in Python, we'd be writing 100 lines of code just to sum an average or whatever it is we need to do.

00:39:41 Right.

00:39:41 You try to build it with dictionaries and lists and other more fundamental things.

00:39:45 Right.

00:39:45 Exactly.

00:39:46 Yeah.

00:39:46 You have to decide what level you're going to be working at.

00:39:49 And sometimes you can go down a level just because you're fascinated by it.

00:39:52 Like maybe you want to know how transistors work and how a CPU is made out of transistors.

00:39:56 But if you're trying to write a Python program and you can't get it done because you're obsessed about transistors, you're not going to be able to finish the Python program.

00:40:04 You have to leave that to someone else.

00:40:06 You have to assume that's going to work.

00:40:07 Yeah.

00:40:07 It's fine to be obsessed about some nuanced detail, but you shouldn't conflate it with trying to solve your problem if it's not relevant.

00:40:14 And I think making that distinction is the challenge.

00:40:17 Yeah.

00:40:17 Yeah.

00:40:17 Cece, how about you?

00:40:19 How do you see like trying to find the right level to think about these problems?

00:40:24 You talked about working with APIs, for example.

00:40:26 Like that takes a lot of getting your head around.

00:40:29 And you can either say, I call this function and the data comes back as JSON.

00:40:34 Or you can say, well, there's all this HTTP headers and all this exchange and the right.

00:40:40 Like there's a lot of details you could get into.

00:40:42 Like how did you think about working with those problems?

00:40:44 Well, for me, I think that there really is no problem when you're facing a challenge to write what you're supposed to do down.

00:40:52 Like what you learn when you're learning the basics, the flow charts and how to do algorithms.

00:40:59 I think even when you're an expert, it's okay to just jot down what you're supposed to do and write all the simple steps that you're supposed to do.

00:41:10 And in those simple steps, decide exactly what you're supposed to do.

00:41:14 Like what Joy mentioned.

00:41:17 Those are the steps that will guide you into the challenge that you're facing.

00:41:22 So for me, I've been learning to do that when I face a challenge that I really can't solve within five or ten minutes.

00:41:32 Maybe after some deep thinking, I'll write down what I'm supposed to do.

00:41:37 In those simple steps, work on each one by one.

00:41:41 If we can all adapt on that concept, I think it will be easier for everyone.

00:41:47 Because when you're a beginner, there's an age to go and Google your challenges on Stack Overflow.

00:41:55 And just get in answer straight away from Stack Overflow.

00:42:00 And a piece of code and paste it into your editor.

00:42:05 But then the problem is when you paste code from Stack Overflow, that code is going to bring more bugs.

00:42:11 Rather than going step by step and understanding each step that you're supposed to do, I think it's an easier way.

00:42:19 And I've learned that the hard way myself because I did projects where, after projects where, most of the times, I just need to take code from Stack Overflow.

00:42:30 But at the end of the day, I will still be having a ton of bugs that I have to debug for the code to record.

00:42:39 Yeah, the danger with Stack Overflow can be, you know, it might solve the problem, but then it has all these other issues.

00:42:45 And if you take too many of those pieces together and don't understand what they do, you can end up with something that's really hard to take care of.

00:42:51 Because you're like, if I change this, it breaks, but I just don't really know why.

00:42:55 And that can be super frustrating.

00:42:58 And this, you know, touches a little bit on what Ned talked about earlier, where sometimes, you know, this part doesn't really matter that much.

00:43:07 I just need this to work and I'm going to never worry about it again.

00:43:09 So let me just grab that thing from Stack Overflow, jam it in there and we're good.

00:43:13 And other times it's really important.

00:43:15 Ned, how would you help people make that distinction?

00:43:18 That can be hard too.

00:43:19 I mean, that unfortunately requires predicting the future, which no one knows how to do.

00:43:23 So, I mean, I was dealing with this a few days ago.

00:43:27 I was trying to automate creating AWS instances and I was stuck in like Googling, finding things that didn't work, that didn't seem to go together.

00:43:36 When I thought they'd go together, I didn't understand.

00:43:38 At the time, I knew that I just needed a little thing and if it could just do the thing, it could be crappy.

00:43:45 And I knew exactly who at work I could go and talk to when I wanted to make it nice.

00:43:48 You kind of have to decide what do you want to be an expert in and what don't you want to be an expert in.

00:43:52 I'm personally not, I don't want to be an expert in DevOps.

00:43:55 I don't want to know everything about how to make servers on AWS.

00:43:58 I just need sometimes to have one.

00:44:01 So, I'm not going to dive into that, right?

00:44:03 And it doesn't interest me.

00:44:05 What config setting do I need to put here to make my website run?

00:44:08 Okay, I'm putting that.

00:44:09 Thank you.

00:44:10 So, one of the things I've learned in my long career is that almost everything, when I approach it as a new thing and I've got a mental model of what that thing is going to be like, it's always at least three times more complicated than I thought it was going to be.

00:44:22 Which, it makes sense.

00:44:24 Like, why if I know nothing about a thing, will I have an accurate mental model of that thing?

00:44:28 But I'm constantly surprised at just how much more complex real things can be.

00:44:32 Things generally tend to be way more complicated than you estimate them to be in so many ways.

00:44:37 And you just kind of got to accept that, right?

00:44:38 That's right.

00:44:39 So, we're kind of getting near the end and I want to ask a couple more questions.

00:44:43 So, let me start with this one.

00:44:45 As people who just learned to program are just really getting your feet underneath you as programmers, you know, what advice do you all have for maybe other people who are thinking of getting into programming or they're also close to the same level as you?

00:45:04 Joy, let's start with you.

00:45:05 I think keep going.

00:45:06 Keep going is the number one advice I've gave to anyone who is starting, just started to learn programming.

00:45:13 It's very easy to feel frustrated and just give it up after one try, second try, third try.

00:45:21 I wasn't the only one who started programming two years ago.

00:45:25 And I think, unfortunately, I'm one of the few who are still doing it.

00:45:30 And one thing that really helped me was to join this.

00:45:34 It's called Chipy, Chicago Python user group.

00:45:37 They have a weekly meeting.

00:45:39 And sometimes I go just with a bunch of friends who are full-time developers.

00:45:44 They work on their set projects in a coffee shop.

00:45:47 And I just join them.

00:45:49 You know, not necessarily I'm going to learn.

00:45:52 I'm going to bug them a lot or learn a lot directly from them because we work on a completely different set of problems.

00:45:59 But just having that schedule, having that mental space that every Saturday, one o'clock in the afternoon to five o'clock in the afternoon is data science time, is Python time.

00:46:10 I think for me, that's at moments of frustration and moments of I may, why don't I just give it up already?

00:46:18 Those are really the things that kept me going.

00:46:20 That's an interesting part.

00:46:21 I think having somebody to ask those questions of, even if you don't like bug them a lot, just every now and then be able to go, you know, I've been stuck on this for six hours.

00:46:33 I know it is easy.

00:46:34 Could you just tell me, like, what is the thing I'm doing wrong?

00:46:38 And a lot of times, if you have somebody to ask that question of, I think it can make a big difference.

00:46:43 Because you could go to Stack Overflow.

00:46:44 People are going to be mean that you maybe don't know how to phrase the question quite right.

00:46:47 Like, it can be really frustrating.

00:46:49 But having just a little bit of a community like you talked about is nice.

00:46:52 Cece, how about you?

00:46:53 Advice for people who are getting into programming?

00:46:55 I think the most surprising thing that I learned when I got into programming is how simple it is.

00:47:00 Before I started programming, I thought programmers are people who have some level of IQ or some superpower.

00:47:08 But then I just realized that you can just pass commands to the computer and then it can do exactly what you want it to do.

00:47:16 So, for those who would like to start programming, I think I would just say you should just go for it.

00:47:22 Because anyone can do it.

00:47:24 Anyone can be a programmer as long as you have a passion for it and you really want to achieve something in your life.

00:47:32 Mostly to make time for programming.

00:47:35 Because I think that is the most important factor.

00:47:38 To make time to practice for programming.

00:47:41 It is difficult for most people, I know.

00:47:43 And most people struggle with making time to practice their programming.

00:47:48 So, making time is very important so that you don't forget what you learned yesterday.

00:47:53 And then you have to start all over again.

00:47:56 And I'd like to support Carly as well on joining communities.

00:48:01 That has helped me a lot.

00:48:02 I have a lot of communities that I am a part of.

00:48:05 And I get to ask questions.

00:48:08 And people reply me.

00:48:10 And that is very helpful.

00:48:11 Being a part of a community with like-minded people who are doing the same thing that they are doing is awesome.

00:48:17 Yeah, it makes a huge difference.

00:48:18 And I think I really connect with this idea that you just talked about.

00:48:23 That before I was a programmer, I looked at people who are programmers and I'm like, wow, now that is a smart person right there.

00:48:30 Like, there's no way I can do what they...

00:48:32 There's just no way.

00:48:33 But as you get into it, what I've realized is to be really good at programming.

00:48:39 And Joy, this also touches on what you said.

00:48:41 I feel like persistence.

00:48:42 Like, how did I know to do this thing to make the program work?

00:48:46 Well, because I tried 15 other things.

00:48:48 And this was the 16th.

00:48:50 And now it worked.

00:48:50 And so problem solved, right?

00:48:52 Like, if you just go, well, I tried it and it didn't work.

00:48:54 So I quit.

00:48:55 Like, that is not...

00:48:57 It just doesn't work that way.

00:48:58 Like you said, Carly, it's kind of like an experiment.

00:49:00 You have to try a bunch of stuff.

00:49:01 And eventually, something will work.

00:49:03 But it really requires persistence.

00:49:06 And I think that that's more important than being super smart.

00:49:08 It's okay.

00:49:09 Yeah, Carly?

00:49:10 Yeah, I definitely agree with all of that, for sure.

00:49:12 Just kind of ripping the bandaid off and solving a problem that you're interested in and just

00:49:16 kind of just start jumping in on it.

00:49:19 And also going to, like, groups, like, meetups or...

00:49:23 Because I went to a Python meetup a lot and still do.

00:49:26 And that...

00:49:26 Just being around people who are taking, like, their evenings to go and do...

00:49:29 They're going to be really, like, supportive and excited to share and answer questions.

00:49:34 And also, when I kind of related to that, like, when I was started at my job, I know I felt...

00:49:41 Struggled a little bit, feeling like I wasn't contributing and still just, like, trying to get familiar with the code base.

00:49:45 And I ended up just reaching out to one of my colleagues and just, I think, showing genuine interest in what your colleagues are doing and their, like, domain of expertise.

00:49:54 I was...

00:49:55 I think that's really, really helpful for a beginner.

00:49:57 So I specifically worked with our head of security and helped develop, like, static and dynamic code scans that would run, like, at build time.

00:50:05 And this was, like, a win-win because I was able to contribute early on.

00:50:09 And my colleague was able to see progress being made in an area that they were interested in.

00:50:13 And even if it's just for a short time, having that, like, kind of moral support and camaraderie and mentorship, like, with someone at your company can be really, really helpful to kind of get off the ground at a company.

00:50:24 Yeah, absolutely.

00:50:24 So leverage the relationships you already have to kind of get a mentor almost.

00:50:29 So maybe we could round this conversation out.

00:50:32 We're getting long on time here.

00:50:33 We don't have much time.

00:50:35 Maybe a closing thought here, Ned, on one of your other articles.

00:50:39 You talked about toxic experts.

00:50:41 And I don't want to necessarily take all the time to go into too much detail.

00:50:43 But your conclusion was, like, a lot of the experts bemoan the fact that there's a lot of people in the industry that don't know that much.

00:50:52 And, like, that missing knowledge is one of the problems.

00:50:54 But your conclusion was that really empathy is something that we need to make sure we have enough of.

00:50:59 I want to get a chance to answer your question about what beginners should do as they're getting started.

00:51:04 I'll quickly give some advice to beginners.

00:51:06 The first is just know yourself.

00:51:09 And, for instance, how you learn best.

00:51:11 I see beginners come in and say, what's the best way to learn Python?

00:51:14 And that really depends on how you like to learn.

00:51:16 Like, I, as an expert, might say, oh, you definitely have to read a 600-page book from cover to cover.

00:51:21 But maybe you actually like 10-minute videos better.

00:51:24 So just know what works for you and do it.

00:51:28 And if someone gives you advice that you know doesn't work for you, that doesn't mean that you're doing it wrong.

00:51:33 That means that they don't know who you are.

00:51:34 Which kind of gets into the toxic expert idea, which is that there are people who know a lot.

00:51:40 And they can be bad sources of help in a bunch of ways.

00:51:45 One of the risks that in any walk of life, not just programming, is that you know your own insides really well.

00:51:52 And you can look at someone's outsides and make a conclusion about their insides and compare and feel bad.

00:51:58 But that's because you're comparing your insides to their outsides.

00:52:01 So, for instance, there's a lot of stuff I don't know.

00:52:05 But you don't know that I don't know that.

00:52:06 All you see is all my answers on Stack Overflow or all the code I'm maintaining.

00:52:10 And you think, wow, Ned knows everything.

00:52:12 That's because I'm not writing blog posts about all the stuff I don't know.

00:52:16 So, don't compare your insides where you know all the stuff you don't know and all your doubts to my outsides where I'm just like, hey, I'm great.

00:52:23 Look at all my awesome tweets or whatever it is I'm doing on social media.

00:52:26 So, there was a great keynote by Jacob Kaplan Moss.

00:52:29 I forget how many PyCon's ago.

00:52:31 Jacob is one of the benevolent dictators of Django, or at least he was at the time.

00:52:36 He helped create Django and ran the Django project.

00:52:39 So, he was well known for that.

00:52:40 And he did a keynote at PyCon basically entitled, I am a mediocre programmer.

00:52:45 And he talked about all the stuff he doesn't know how to do.

00:52:48 And honestly, it was a little eye-opening.

00:52:50 Like, I thought, wow, Jacob, you don't know how to do that?

00:52:53 Okay.

00:52:54 That's surprising to me because you run the Django project.

00:52:56 But it's just a good demonstration of the idea that experts are not the superpowers that beginners might think they are.

00:53:05 And we are in a culture where we don't expose our failures, right?

00:53:10 To get back to Carly's scientific world, right?

00:53:13 Scientists typically don't publish their failed experiments.

00:53:17 And programmers typically don't.

00:53:19 Michael didn't publish his 15 failed attempts at getting the database to work, right?

00:53:23 So, it's really easy to look at all the successes that people are trumpeting and conclude that your little failed program indicates that you are bad and they are good.

00:53:33 And it's just not true.

00:53:34 So, that's my advice to beginners is know yourself and don't judge your insides by other people's outsides.

00:53:39 Yeah, that's great advice.

00:53:40 Yeah.

00:53:41 Want to make a quick call for empathy to everyone out there listening?

00:53:44 Yes.

00:53:45 So, for empathy, yeah.

00:53:46 A lot of experts are really good at writing complex code and really bad at understanding what beginners know and don't know, caring about the beginner's path that they're on.

00:53:57 This all got started because one of the things that came out of that side project is I wrote a piece explaining the big O notation.

00:54:04 And one of the comments on the piece was, you should be ashamed of this post.

00:54:08 And this guy thought I should be ashamed of the entire post because he had a quibble about one sentence in it, which even after looking into it, I still think he was wrong.

00:54:17 But he thought that, like, I was a bad person because of this one technical detail about algorithmic analysis.

00:54:25 Now, he might have, if he'd had a point, he could have said to me, hey, Ned, I love this piece.

00:54:29 There's one little place where you could have done a little bit better.

00:54:31 But he came in with a huge hammer and hit me over the head with it.

00:54:33 That's not a way to teach people.

00:54:35 Beginners, you are going to encounter these people.

00:54:37 Just walk away from them.

00:54:39 They may know more than you, but they're not going to be able to teach you.

00:54:43 And it doesn't matter that they know more than you.

00:54:44 They're bad people.

00:54:45 Just skip them.

00:54:46 That's pretty good advice for a lot of situations, right?

00:54:50 Yeah, absolutely.

00:54:51 Yeah, exactly.

00:54:52 I think we're over time.

00:54:53 So, let's go ahead and just leave it there.

00:54:56 Carly, Joy, Cece, and Ned, thank you all for being on the show and sharing all of your advice from the different parts of the spectrum you're living on.

00:55:04 It's great.

00:55:04 Yeah, absolutely.

00:55:05 Thank you.

00:55:05 Yes, thank you.

00:55:06 It's good.

00:55:06 Thank you, Mike.

00:55:07 Yeah, thanks.

00:55:08 And bye, everyone.

00:55:08 Bye.

00:55:09 Bye.

00:55:09 Bye.

00:55:10 This has been another episode of Talk Python To Me.

00:55:13 Our guests on this episode were Carly Cindy, Joy Dayton May, Cece Flora Muniqua, and Ned Batchelder.

00:55:22 And it's been brought to you by Linode and Ting.

00:55:24 Linode is your go-to hosting for whatever you're building with Python.

00:55:28 Get four months free at talkpython.fm/linode.

00:55:32 That's L-I-N-O-D-E.

00:55:34 Ting is the fast mobile network custom built for technical folks.

00:55:38 Use their savings calculator to see exactly what you'd pay.

00:55:41 Visit python.ting.com to get a $25 credit and get started without a contract.

00:55:48 Want to level up your Python?

00:55:50 If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

00:55:55 Or if you're looking for something more advanced, check out our new async course that digs into all the different types of async programming you can do in Python.

00:56:03 And of course, if you're interested in more than one of these, be sure to check out our Everything Bundle.

00:56:07 It's like a subscription that never expires.

00:56:09 Be sure to subscribe to the show.

00:56:12 Open your favorite podcatcher and search for Python.

00:56:14 We should be right at the top.

00:56:15 You can also find the iTunes feed at /itunes, the Google Play feed at /play,

00:56:20 and the direct RSS feed at /rss on talkpython.fm.

00:56:25 This is your host, Michael Kennedy.

00:56:26 Thanks so much for listening.

00:56:28 I really appreciate it.

00:56:29 Now get out there and write some Python code.

00:56:31 I really appreciate it.

