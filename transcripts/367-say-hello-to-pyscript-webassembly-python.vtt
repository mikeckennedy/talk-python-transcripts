WEBVTT

00:00:00.001 --> 00:00:11.920
Despite Python being overwhelmingly popular and reactions to it positive, there are major areas of computing where Python is not present, most notably on mobile and on the front-end side of the web.

00:00:11.920 --> 00:00:18.220
PyScript, a new project launched by Fabio Pliger from Anaconda, just might change that.

00:00:18.220 --> 00:00:25.460
It was made public and announced at PyCon just two weeks ago by Peter Wang and now has over 10,000 GitHub stars.

00:00:25.840 --> 00:00:30.600
But what is hype versus reality versus projected hopes and dreams?

00:00:30.600 --> 00:00:32.760
We're going to find out on this episode.

00:00:32.760 --> 00:00:35.560
Fabio is here to tell us all about his new project.

00:00:35.560 --> 00:00:40.820
This is Talk Python To Me, episode 367, recorded May 12, 2022.

00:00:53.420 --> 00:00:56.660
Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:56.660 --> 00:00:58.380
This is your host, Michael Kennedy.

00:00:58.380 --> 00:01:04.560
Follow me on Twitter where I'm @mkennedy and keep up with the show and listen to past episodes at talkpython.fm.

00:01:04.560 --> 00:01:07.640
And follow the show on Twitter via at Talk Python.

00:01:07.640 --> 00:01:11.200
We've started streaming most of our episodes live on YouTube.

00:01:11.200 --> 00:01:18.800
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:19.800 --> 00:01:23.420
This episode is sponsored by Microsoft for Startups Founders Hub.

00:01:23.420 --> 00:01:29.180
Check them out at talkpython.fm/foundershub to get early support for your startup.

00:01:29.180 --> 00:01:32.840
And it's brought to you by us over at Talk Python Training.

00:01:32.840 --> 00:01:37.400
Did you know we have one of the largest course libraries for Python courses?

00:01:37.400 --> 00:01:39.940
They're all available without a subscription.

00:01:39.940 --> 00:01:42.560
So check it out over at talkpython.fm.

00:01:42.560 --> 00:01:43.840
Just click on courses.

00:01:44.720 --> 00:01:48.200
Transcripts for this and all of our episodes are brought to you by Assembly AI.

00:01:48.200 --> 00:01:50.880
Do you need a great automatic speech-to-text API?

00:01:50.880 --> 00:01:53.420
Get human-level accuracy in just a few lines of code.

00:01:53.420 --> 00:01:56.180
Visit talkpython.fm/assemblyai.

00:01:56.180 --> 00:02:00.400
Hey, before we jump into the interview with Fabio, creator of PyScript,

00:02:00.400 --> 00:02:04.720
I want to just tell you really quickly about this new YouTube video I made.

00:02:04.720 --> 00:02:09.160
After chatting with Fabio, but before this episode is released,

00:02:09.160 --> 00:02:11.960
I decided to play around with PyScript some more.

00:02:12.480 --> 00:02:13.520
It's really, really cool.

00:02:13.520 --> 00:02:21.600
Turns out that one of the things there's not a great example for is how do I take and build a regular web application,

00:02:21.600 --> 00:02:24.760
something you might do with Vue.js or something like that,

00:02:24.760 --> 00:02:27.920
with PyScript using Python on the front end.

00:02:28.540 --> 00:02:37.120
And is it possible to actually avoid downloading the CPython runtime as a WebAssembly that comes out of Pyodide and all those things

00:02:37.120 --> 00:02:44.480
and make your code sort of installed locally and run really fast and have actually a pretty great user experience?

00:02:44.480 --> 00:02:46.640
Well, it turns out the answer is yes.

00:02:46.640 --> 00:02:50.580
So I put together a 30-minute demo tutorial of that over on YouTube.

00:02:50.820 --> 00:02:56.440
If you want to dive in a little bit and see that in action, after you listen to this episode, be sure to jump over to YouTube.

00:02:56.440 --> 00:03:00.820
The link is at the bottom of the show notes in your podcast player on the episode page.

00:03:00.820 --> 00:03:03.960
Head on over to my personal YouTube channel and check out that video.

00:03:03.960 --> 00:03:05.300
I think you'll be pretty impressed.

00:03:05.300 --> 00:03:08.380
And it'll just make you want to do more stuff with PyScript, I'm sure.

00:03:08.380 --> 00:03:10.900
All right, let's chat with Fabio about PyScript.

00:03:10.900 --> 00:03:14.000
Fabio, welcome to Talk Python To Me.

00:03:14.000 --> 00:03:14.480
Thank you.

00:03:14.680 --> 00:03:16.320
I'm really happy to be here.

00:03:16.320 --> 00:03:17.000
Yeah, you're welcome.

00:03:17.000 --> 00:03:24.500
And I'm excited to have you here because I am quite excited about the PyScript announcement that you have put so much work into.

00:03:24.500 --> 00:03:33.080
I'm very excited about the possibility of finding Python in other places than where it has really great strongholds, right?

00:03:33.080 --> 00:03:42.960
For as much as Python is, the incredible growth of Python that Stack Overflow blogged about in 2017 and all the growth in different metrics.

00:03:43.100 --> 00:03:46.820
But by some metrics, first, most popular language or second, depending.

00:03:46.820 --> 00:03:52.100
But for all of that, there's still very notable places where Python is not.

00:03:52.100 --> 00:04:00.240
And what you're working on has the possibility to unlock one or more of those places or a whole different set of contingency.

00:04:00.240 --> 00:04:06.460
The people of data scientists, web developers, UI developers, maybe just for desktop even.

00:04:06.460 --> 00:04:07.900
So exciting.

00:04:07.900 --> 00:04:11.840
Yeah, I think it captured a lot of the things behind the project.

00:04:11.840 --> 00:04:16.660
Really happy to talk about all of those because, yeah, that's the reason we started it.

00:04:16.660 --> 00:04:17.760
So excited.

00:04:17.760 --> 00:04:19.860
Yeah, and it's super exciting.

00:04:19.860 --> 00:04:28.520
There's been some attempts at this and we're going to get into, I want to sort of start our conversation about the history of what has come before and so on.

00:04:28.520 --> 00:04:31.040
Before we do, though, let's just hear a bit about you.

00:04:31.040 --> 00:04:32.560
How did you get into programming in Python?

00:04:32.780 --> 00:04:39.200
So programming, I was being curious about a lot of things and probably doing too many things still today.

00:04:39.200 --> 00:04:48.240
Early on, I got into programming through friends who had computers and Commodore or things like that.

00:04:48.240 --> 00:04:49.460
We would pop on.

00:04:49.460 --> 00:04:54.780
I had a, in my dad at some point bought a, I don't even know the version.

00:04:54.780 --> 00:05:01.180
It was like similar to Commodore, but it was in Brazil, a gradient MSX or something.

00:05:01.180 --> 00:05:09.040
It was a local, like a national branded computer, but it allowed you to jump in and do basic stuff and programming.

00:05:09.040 --> 00:05:13.080
So I remember trying to play with my friends and try to code games.

00:05:13.080 --> 00:05:15.120
Of course, we never get anything done.

00:05:15.440 --> 00:05:19.160
But I always been passionate about computers and games and stuff like that.

00:05:19.160 --> 00:05:27.140
So into college, I took a computer science degree, dreaming to become a game developer also never happened because I got...

00:05:27.140 --> 00:05:35.260
I think it's really interesting that so many people want to get into game development and then they kind of see the sort of grinding mode of that industry, right?

00:05:35.260 --> 00:05:37.320
It's like both fascinating and has this great pull.

00:05:37.320 --> 00:05:40.200
Then you're like, but it's really hard on humans as well.

00:05:40.200 --> 00:05:43.440
Yes, it's a very hard industry and very competitive.

00:05:43.920 --> 00:05:53.400
My brother is an indie game developer and a lot of sleepless nights and working hard trying to get his thing out there.

00:05:53.400 --> 00:05:55.540
And so, yeah, I think...

00:05:55.540 --> 00:05:57.320
And through life, I also...

00:05:57.320 --> 00:05:58.060
Just life happened.

00:05:58.060 --> 00:06:06.560
I met my now wife and started to be a little more serious about, you know, gaming is great, but I also need to make plans for the future.

00:06:06.560 --> 00:06:17.420
So I ended up graduating and started to work for a company that's automation, like machines automation and big industries, many on pharmaceuticals.

00:06:17.640 --> 00:06:26.120
And I worked there for a while and I was in the team that would develop high level applications for analytics.

00:06:26.120 --> 00:06:30.720
And we would usually do for big pharmaceutical production lines.

00:06:30.720 --> 00:06:41.280
So providing all the charts and everything they need to say this production batch is valid for whatever FDA or whatever entity is approving them.

00:06:41.280 --> 00:06:43.120
A lot of paperwork, a lot of things.

00:06:43.120 --> 00:06:47.540
Eventually, at some point, my unit became a big part of the company.

00:06:47.540 --> 00:06:55.300
So my, at the time, the CEO of the company asked, hey, do you want a startup spinoff of our company?

00:06:55.300 --> 00:06:56.580
Just focus on software.

00:06:56.580 --> 00:06:58.660
So I did that.

00:06:58.660 --> 00:07:00.860
That sounds like a pretty fun challenge.

00:07:00.860 --> 00:07:01.380
Yes.

00:07:01.380 --> 00:07:04.940
Like do a startup without quite the risk of actually being a startup.

00:07:04.940 --> 00:07:05.580
Yeah.

00:07:05.580 --> 00:07:06.140
Yes.

00:07:06.140 --> 00:07:07.160
Like you're going to get paid.

00:07:07.160 --> 00:07:07.680
You know what I mean?

00:07:07.680 --> 00:07:08.280
Yes.

00:07:08.280 --> 00:07:09.000
You're going to get paid.

00:07:09.540 --> 00:07:16.360
It also, I think the startup reality in Italy, I was still in Italy at the time, is very different from here.

00:07:16.360 --> 00:07:21.620
It's really hard to have investors or, you know, to have, to collect money.

00:07:21.620 --> 00:07:30.280
And basically you need to, it boils down to you investing on yourself, in your own company, and then trying to get profit within a number of years.

00:07:30.280 --> 00:07:30.640
Okay.

00:07:30.640 --> 00:07:34.300
It's got to be way more bootstrapped, self-funded, you know, sort of thing, huh?

00:07:34.300 --> 00:07:34.640
Okay.

00:07:34.640 --> 00:07:35.040
Yeah.

00:07:35.040 --> 00:07:37.320
Do you think that's changed or is that still the same?

00:07:37.320 --> 00:07:38.240
I think it's changing.

00:07:38.240 --> 00:07:38.680
Yeah.

00:07:38.760 --> 00:07:46.880
The last 10 years, I think a lot changed just from like the industry in general became way stronger in Europe as well.

00:07:46.880 --> 00:07:47.980
There's a different mindset.

00:07:47.980 --> 00:07:58.200
And I think culturally, South Europe has this culture of a different way to see money and investments compared to the US, for instance.

00:07:58.200 --> 00:07:58.880
Sure.

00:07:58.880 --> 00:08:04.640
But eventually, like this experience led me to the Python community early on.

00:08:04.640 --> 00:08:08.120
I actually got into Python not by myself.

00:08:08.120 --> 00:08:09.240
I heard about the language.

00:08:09.240 --> 00:08:09.840
I was curious.

00:08:09.840 --> 00:08:17.480
But someone within the company said, oh, we, you know, the son of this customer is really big in the Python community.

00:08:17.480 --> 00:08:21.580
He could help us see if it's a good fit for our use case.

00:08:21.900 --> 00:08:23.620
And it was around early 2000s.

00:08:23.620 --> 00:08:25.660
And it was around early 2000s, maybe 2002, one.

00:08:25.660 --> 00:08:27.060
Pretty early days of Python, really.

00:08:27.060 --> 00:08:27.800
Yes.

00:08:27.800 --> 00:08:31.140
And early days of, you know, scientific Python as well.

00:08:31.140 --> 00:08:38.320
You know, the whole separation between Numerae and NumPy, numeric, all of that.

00:08:38.320 --> 00:08:39.840
So I started.

00:08:40.360 --> 00:08:41.280
I loved the language.

00:08:41.280 --> 00:08:43.500
I started to use it in our tools.

00:08:43.500 --> 00:08:48.280
It was a funny time where it was definitely unknown as a language.

00:08:48.280 --> 00:08:53.400
And to get into big companies, it was a little tricky on the QA point of view.

00:08:53.980 --> 00:08:55.100
And then, but it was interesting.

00:08:55.100 --> 00:09:02.300
Eventually, I started to get more engaged with community, started to go to meetups in Italy and everything.

00:09:02.300 --> 00:09:13.260
And then I think it was around 2004 or 2005, I started to go to my first conferences in Europe, love the community, started to, how can I get involved?

00:09:13.760 --> 00:09:26.200
So at that point, later, late 2000s, I started the, with a bunch of friends in the Italian community, we started the Python Italia Association, which is basically nonprofit trying to push the language.

00:09:26.200 --> 00:09:31.520
And the main focus was organizing the Python Italy conference.

00:09:31.520 --> 00:09:33.160
We started in 2007.

00:09:33.160 --> 00:09:38.760
Also that great, great community, a lot of work, but also paid back.

00:09:38.760 --> 00:09:41.620
I remember the first year we were like, let's do this thing.

00:09:41.620 --> 00:09:42.520
We were very passionate.

00:09:43.000 --> 00:09:44.720
And we ended up in negative.

00:09:44.720 --> 00:09:46.980
And all the members of the society.

00:09:46.980 --> 00:09:47.720
Yes.

00:09:47.720 --> 00:09:59.280
So just to say that big props to everyone in the community doing a lot of the community work, because it's a lot of work and it often is not paid or can even be out of each one.

00:09:59.280 --> 00:10:01.080
You might have to pay to do the work.

00:10:01.080 --> 00:10:01.580
Yes.

00:10:01.580 --> 00:10:02.900
With the opposite of getting paid.

00:10:02.900 --> 00:10:03.220
Yeah.

00:10:03.220 --> 00:10:09.340
Long story short, I started to be also more engaged with the European community.

00:10:09.840 --> 00:10:14.020
And we organized the European Python in 2011.

00:10:14.020 --> 00:10:16.280
So for three years in a row.

00:10:16.280 --> 00:10:18.200
And that got me into the European society.

00:10:18.200 --> 00:10:39.840
Eventually became chairman of that, which basically means your Python society is this European nonprofit that pretty much in line with the PSF, tried in different ways, but tries to engage with community, organize conferences, raise some money to invest back in the community through grants and things like this.

00:10:39.840 --> 00:10:43.720
And then I did that for a number of years.

00:10:43.720 --> 00:10:51.360
So eventually, well, back in the day when I was starting to learn Python, I also started to use a lot of the scientific libraries.

00:10:51.360 --> 00:11:00.560
And one of them was Chaco, which was a graphic plotting library for Python that Peter Wang developed with Brian VandenVen.

00:11:00.560 --> 00:11:01.760
I think he was in the show.

00:11:01.760 --> 00:11:04.160
Peter Wang being the CEO of Anaconda.

00:11:04.440 --> 00:11:07.180
Yes, today, CEO of Anaconda.

00:11:07.180 --> 00:11:11.080
And we met for the first time in person at Europython in Florence.

00:11:11.080 --> 00:11:14.960
And he was like, okay, we know each other from the internet for a while.

00:11:14.960 --> 00:11:17.360
Let's get more involved.

00:11:17.360 --> 00:11:21.440
That year, I was still trying to make my company be successful.

00:11:21.440 --> 00:11:23.560
It wasn't the right time.

00:11:23.560 --> 00:11:29.080
The following year, I met with Travis Oliphant, the other founder of Anaconda in Berlin.

00:11:29.540 --> 00:11:32.580
We just figured out, you know, like we're doing a lot of things that are similar.

00:11:32.580 --> 00:11:34.260
We're passionate about the same thing.

00:11:34.260 --> 00:11:37.260
So I eventually joined Anaconda in 2014.

00:11:37.260 --> 00:11:41.300
And then eventually that following year, I moved to the U.S.

00:11:41.300 --> 00:11:42.680
I joined the company full time.

00:11:42.680 --> 00:11:43.100
Fantastic.

00:11:43.100 --> 00:11:44.780
Well, it's quite the journey.

00:11:44.780 --> 00:11:45.460
Yes.

00:11:45.460 --> 00:11:46.720
This is interesting language.

00:11:46.720 --> 00:11:48.700
Let me just start participating in some of the meetups.

00:11:48.700 --> 00:11:50.000
Meetups become conferences.

00:11:50.000 --> 00:11:53.020
Conference become continent-wide conferences.

00:11:53.020 --> 00:11:58.460
And I think it's a pretty good takeaway for people who want to get more involved in the community.

00:11:58.460 --> 00:12:03.460
And like every one of those steps probably didn't feel massive other than maybe moving to the U.S.

00:12:03.460 --> 00:12:04.720
and joining Anaconda.

00:12:04.720 --> 00:12:08.520
But, you know, they all probably seem like really iterative and sort of incremental.

00:12:08.520 --> 00:12:16.700
But at the same time, it builds up to this really cool place where you're maybe building amazing Python things in the browser at Anaconda.

00:12:16.700 --> 00:12:17.220
Right.

00:12:17.220 --> 00:12:17.720
Yeah.

00:12:17.720 --> 00:12:21.660
My experience has very much been what, you know, a lot of people say.

00:12:21.660 --> 00:12:23.640
You come from the language, you stay for the community.

00:12:23.640 --> 00:12:25.860
That is really my experience.

00:12:26.380 --> 00:12:26.500
Yeah.

00:12:26.600 --> 00:12:27.320
And then, yeah.

00:12:27.320 --> 00:12:30.960
Anaconda allowed me to work on a lot of interesting things.

00:12:30.960 --> 00:12:33.840
Like, as you said, Python in the browser is the ultimate project.

00:12:33.840 --> 00:12:39.180
But when I joined, I started with being a core developer for Bokeh, which had some of that.

00:12:39.180 --> 00:12:42.620
Bokeh is a visualization library for Python on the browser.

00:12:42.620 --> 00:12:45.240
And with your project you have now, you can still put Bokeh in the browser.

00:12:45.460 --> 00:12:45.780
Exactly.

00:12:45.780 --> 00:12:48.320
It can stay in the browser.

00:12:48.320 --> 00:12:49.340
Exactly.

00:12:49.340 --> 00:12:50.160
Yes, exactly.

00:12:50.160 --> 00:12:52.320
Even more in the browser than before, I guess.

00:12:52.320 --> 00:12:52.680
Yeah.

00:12:52.680 --> 00:12:53.000
All right.

00:12:53.000 --> 00:12:53.620
Let's dive in.

00:12:53.620 --> 00:12:59.020
Now, before we dive in real quick, since you talked about gaming, want to be in game development and your brother and so on.

00:12:59.020 --> 00:13:02.620
Have you watched the documentary Power On, the story of Xbox?

00:13:02.620 --> 00:13:03.440
I haven't.

00:13:03.440 --> 00:13:03.880
No.

00:13:03.960 --> 00:13:05.900
This is a documentary that came out.

00:13:05.900 --> 00:13:07.440
It's a four-hour show.

00:13:07.440 --> 00:13:08.500
You can watch it on YouTube.

00:13:08.500 --> 00:13:09.500
Cool.

00:13:09.500 --> 00:13:11.180
And it's like the history of Xbox.

00:13:11.180 --> 00:13:11.480
Nice.

00:13:11.480 --> 00:13:15.340
And if you're just into, like, tech history documentaries, this thing is pretty interesting.

00:13:15.340 --> 00:13:16.660
But let's not talk about games.

00:13:16.660 --> 00:13:18.820
Let's talk about the birth and death of JavaScript.

00:13:19.960 --> 00:13:21.280
Have you seen this presentation?

00:13:21.280 --> 00:13:21.820
Yes.

00:13:21.820 --> 00:13:22.580
Great.

00:13:22.580 --> 00:13:24.200
It is so good, isn't it?

00:13:24.200 --> 00:13:25.140
Yes.

00:13:25.140 --> 00:13:27.940
One of my favorite funny talks, you know.

00:13:27.940 --> 00:13:34.920
The reason I bring this up is there's a lot of interesting building blocks that I suspect many people in the Python community are fully unaware of.

00:13:34.920 --> 00:13:38.620
There's been all these developments over in the JavaScript world.

00:13:38.620 --> 00:13:43.720
And Gary Bernhardt did this talk at PyCon 2014, the birth and death of JavaScript.

00:13:43.720 --> 00:13:45.200
And no, I'm not mispronouncing it.

00:13:45.200 --> 00:13:46.280
That's how it's done in the talk.

00:13:46.580 --> 00:13:55.700
It tells this hilarious story of the future of, like, weird human evolution and programming and JavaScript and how we don't do JavaScript, but everything's JavaScript.

00:13:55.700 --> 00:14:04.580
But what is the underlying theme is, like, an actual interesting technical history, how people started doing crazy stuff with JavaScript pre-WebAssembly.

00:14:04.580 --> 00:14:10.980
So there were compilers, like in Scriptum, that will compile C code to JavaScript.

00:14:10.980 --> 00:14:13.420
And then the JavaScript JITs have become so fast.

00:14:13.520 --> 00:14:20.480
So one of the examples was, like, Chrome running Firefox, running something else, like maybe like an embedded Windows.

00:14:20.480 --> 00:14:21.880
I can't remember what it was.

00:14:21.880 --> 00:14:28.280
But just there were, like, layers and layers of JavaScript doing wild stuff that we wouldn't imagine otherwise, right?

00:14:28.280 --> 00:14:28.640
Yeah.

00:14:28.640 --> 00:14:29.260
Yeah.

00:14:29.580 --> 00:14:40.160
And I think that's part of also one of the reasons with Peter we said, OK, this is the right time to try this out because the browsers became so powerful.

00:14:40.160 --> 00:14:46.180
And so they are basically, if you see from a different perspective, they are mini virtual machines.

00:14:46.180 --> 00:14:47.560
They have their own file system.

00:14:47.560 --> 00:14:50.480
They have their own isolation networking.

00:14:50.760 --> 00:14:54.140
A lot of the things, you can really see that as a VM.

00:14:54.140 --> 00:14:58.360
Like the JVM, like the .NET CLR, and to some degree, like Python, right?

00:14:58.360 --> 00:14:58.660
Right.

00:14:58.660 --> 00:14:59.140
Right.

00:14:59.140 --> 00:15:00.780
The CPython on a regular machine.

00:15:00.780 --> 00:15:01.040
Yeah.

00:15:01.040 --> 00:15:05.220
You can run full operating systems on top of, in the browser.

00:15:05.220 --> 00:15:13.240
And honestly, the explosion of interesting things in the last few years have been crazy and doesn't seem to decelerate at all.

00:15:13.540 --> 00:15:16.900
So the level of maturity is kind of encouraging.

00:15:16.900 --> 00:15:17.380
It is.

00:15:17.380 --> 00:15:21.480
And the performance, while not native performance, is not that far off.

00:15:21.480 --> 00:15:25.480
At least some of the examples that Gary gave, it was like 50%.

00:15:25.480 --> 00:15:30.500
You could run Doom at 50% speed when you compile it to the browser or something insane like that.

00:15:30.500 --> 00:15:30.820
Right.

00:15:30.820 --> 00:15:31.360
Yeah.

00:15:31.360 --> 00:15:32.060
It's good enough.

00:15:32.060 --> 00:15:33.180
It's more than good enough.

00:15:33.180 --> 00:15:33.360
Yeah.

00:15:33.360 --> 00:15:43.320
I mean, because the alternative so often is, well, we're going to send a request over to the server, and that might be native and fast, but it's also network latency, and it's also a shared compute resource.

00:15:43.320 --> 00:15:44.480
With a thousand other people.

00:15:44.480 --> 00:15:51.260
And here you are sitting on your MacBook Pro Max with 16 cores, and you're just waiting.

00:15:51.260 --> 00:15:51.680
Yeah.

00:15:51.680 --> 00:15:52.260
Yeah.

00:15:52.260 --> 00:15:56.060
That's actually one aspect that a lot of people don't consider.

00:15:56.060 --> 00:16:01.180
There is the performance in terms of how fast it goes.

00:16:01.180 --> 00:16:06.500
But there are a few aspects that you also need to consider overall in the overall experience.

00:16:07.200 --> 00:16:17.560
How long for the developer side of a point of view, how long before they can actually get in front of something usable or spinning up their environments and things like this.

00:16:17.560 --> 00:16:21.040
Then there's loading time versus execution time.

00:16:21.040 --> 00:16:22.180
Also very different.

00:16:22.180 --> 00:16:25.720
But from the eyes of the user, it kind of sums up.

00:16:25.720 --> 00:16:37.900
There are so many small niches or small verticals that we can work on in the whole JavaScript or browser ecosystem that I think we can make a lot of improvements the next few years.

00:16:37.900 --> 00:16:38.240
Yeah.

00:16:38.620 --> 00:16:47.080
You think of grid computing and distributed computing, part of the power of the cloud is that I could just go say, I need more.

00:16:47.080 --> 00:16:50.540
We have four servers, but a bunch of people showed up.

00:16:50.580 --> 00:16:54.740
So give me 20 servers and scale my Kubernetes cluster across that for now.

00:16:54.740 --> 00:16:57.200
And four to 20 is amazing.

00:16:57.200 --> 00:17:00.740
But four to 100 million is really different.

00:17:00.740 --> 00:17:09.740
If we can push a lot of that compute to everybody's personal computers, even our iPhones are like unimaginably fast little devices.

00:17:09.740 --> 00:17:10.300
Right.

00:17:10.300 --> 00:17:16.340
Like the whole M1 crazy transition is basically an iPhone chip with more voltage, you know, and better cooling.

00:17:16.340 --> 00:17:16.560
Right.

00:17:16.560 --> 00:17:18.000
There's not much more to it than that.

00:17:18.000 --> 00:17:24.740
So finding ways to execute more of our code on the clients is pretty interesting.

00:17:24.740 --> 00:17:25.620
Yeah.

00:17:25.620 --> 00:17:26.360
Totally agree.

00:17:26.360 --> 00:17:38.600
We already see that even on the server side, projects like BASC, where very popular pushing computing on nodes and, you know, the distributed architecture is very powerful and it is needed.

00:17:38.600 --> 00:17:43.020
We can have the possibility to make the same thing on the client side on the browser as well.

00:17:43.020 --> 00:17:43.300
Yeah.

00:17:43.300 --> 00:17:43.880
Yeah.

00:17:44.300 --> 00:17:55.720
DESC, for those out there who don't know, is a Pandas-like, NumPy-like API that you can just say, but run it distributed across these machines on the cluster automatically.

00:17:55.720 --> 00:18:00.760
You know, Matthew Rocklin started Coiled and, you know, former Anaconda alumni.

00:18:00.760 --> 00:18:02.060
A lot of tie-ins there.

00:18:02.060 --> 00:18:02.940
Yeah.

00:18:02.940 --> 00:18:03.260
Yeah.

00:18:03.260 --> 00:18:03.640
Cool.

00:18:03.640 --> 00:18:11.420
It's not the same thing in any way, but it is a way that really takes Python and gives it way more compute resources potentially.

00:18:11.460 --> 00:18:25.160
So are there any particular sort of set the stage with this compile-to-see and stuff, but is there any other sort of building blocks in the history of how we got to what you all built in the JavaScript stack that you want to call out?

00:18:25.540 --> 00:18:26.180
Yes, definitely.

00:18:26.180 --> 00:18:35.940
I think one major thing that, you know, I want to give props as much as we can, the Pyodide project, which is, you know, a runtime for Python on the browser.

00:18:36.560 --> 00:18:49.340
And they've been extremely, like, one of the reasons we could work on PyScript was because it has a level of maturity and performance right now that is really stable, right?

00:18:49.340 --> 00:18:54.500
And actually also been, they're a great community, very supportive.

00:18:54.960 --> 00:19:01.180
So a big shout out to them, Hood and Roman specifically, the two main core developers.

00:19:01.180 --> 00:19:13.720
And the whole work underneath that project as well, you know, like the progress of the MScript and WASM and WebAssembly, there is a huge community behind that.

00:19:14.140 --> 00:19:23.440
So actually, that's one of the principles that we try to, at the core of PyScript, is we don't want to reinvent anything that we don't need.

00:19:23.440 --> 00:19:40.320
We want to be really additive to the ecosystem, glue things together, provide nice and easy APIs and high-level APIs so that we can lower the barrier, basically give more accessibility to the tools, to the users, rather than reinventing something that's not needed.

00:19:40.320 --> 00:19:42.960
Yeah, so PyIodide.

00:19:42.960 --> 00:19:45.760
This project is a cool project.

00:19:45.760 --> 00:19:53.140
I interviewed Michael from the project about this way, way back, a couple years ago.

00:19:53.140 --> 00:20:05.280
But yeah, it uses this MScript and WebAssembly story to basically compile a port of CPython to run in WebAssembly in the browser, which is fantastic, right?

00:20:05.280 --> 00:20:09.300
I mean, that's, and to some degree, that's the building block that you all really needed, right?

00:20:09.300 --> 00:20:10.160
Yes, yeah.

00:20:10.160 --> 00:20:10.700
Yeah, definitely.

00:20:10.700 --> 00:20:11.120
Yeah.

00:20:11.120 --> 00:20:20.740
I must mention also, yeah, Michael Dropbom and Christian Himes, who has been also pushing a lot of the Python on WASM ecosystem.

00:20:20.740 --> 00:20:21.280
Yes.

00:20:21.280 --> 00:20:21.680
Yeah.

00:20:21.680 --> 00:20:27.280
There's a lot of good energy in the Python community to actually try to push that together, right?

00:20:27.280 --> 00:20:27.540
Yeah.

00:20:27.540 --> 00:20:31.020
And also Brett Cannon has been a big proponent of making that happen.

00:20:31.020 --> 00:20:37.460
I don't know how directly he evolved with the day-to-day, like, let's make it compile, but I know he's been really pushing on that effort as well.

00:20:37.460 --> 00:20:44.860
This portion of Talk Python To Me is brought to you by Microsoft for Startups Founders Hub.

00:20:44.860 --> 00:20:50.800
Starting a business is hard. By some estimates, over 90% of startups will go out of business in

00:20:50.800 --> 00:20:55.560
just their first year. With that in mind, Microsoft for Startups set out to understand

00:20:55.560 --> 00:21:00.980
what startups need to be successful and to create a digital platform to help them overcome those

00:21:00.980 --> 00:21:06.620
challenges. Microsoft for Startups Founders Hub was born. Founders Hub provides all founders at

00:21:06.620 --> 00:21:12.800
any stage with free resources to solve their startup challenges. The platform provides technology

00:21:12.800 --> 00:21:18.220
benefits, access to expert guidance and skilled resources, mentorship and networking connections,

00:21:18.220 --> 00:21:23.860
and much more. Unlike others in the industry, Microsoft for Startups Founders Hub doesn't

00:21:23.860 --> 00:21:31.040
require startups to be investor-backed or third-party validated to participate. Founders Hub is truly open

00:21:31.040 --> 00:21:35.740
to all. So what do you get if you join them? You speed up your development with free access to

00:21:35.780 --> 00:21:41.360
GitHub and Microsoft Cloud computing resources and the ability to unlock more credits over time.

00:21:41.360 --> 00:21:46.040
To help your startup innovate, Founders Hub is partnering with innovative companies like OpenAI,

00:21:46.040 --> 00:21:51.080
a global leader in AI research and development, to provide exclusive benefits and discounts.

00:21:51.080 --> 00:21:56.500
Through Microsoft for Startups Founders Hub, becoming a founder is no longer about who you know.

00:21:56.500 --> 00:22:01.560
You'll have access to their mentorship network, giving you a pool of hundreds of mentors across a range

00:22:01.560 --> 00:22:07.420
of disciplines and areas like idea validation, fundraising, management and coaching, sales and

00:22:07.420 --> 00:22:12.100
marketing, as well as specific technical stress points. You'll be able to book a one-on-one meeting

00:22:12.100 --> 00:22:17.680
with the mentors, many of whom are former founders themselves. Make your idea a reality today with the

00:22:17.680 --> 00:22:23.640
critical support you'll get from Founders Hub. To join the program, just visit talkpython.fm slash

00:22:23.640 --> 00:22:28.640
foundershub, all one word, no links in your show notes. Thank you to Microsoft for supporting the show.

00:22:28.640 --> 00:22:38.520
Let's get to your announcement. I mean, I didn't go to PyCon this year, mostly just not ready to be in a

00:22:38.520 --> 00:22:43.460
room with people from around the world for that long and to give the world a chance to try it out,

00:22:43.460 --> 00:22:47.680
then I'll see how it goes and do it next year. But I missed everyone there. And, but I got a lot of

00:22:47.680 --> 00:22:52.240
messages. One was friends saying, why aren't you here? Why can't we have a beer together? Which,

00:22:52.240 --> 00:22:57.120
sorry, I really missed that. And then the other is, have you heard of PyScript? Oh my goodness,

00:22:57.120 --> 00:23:02.620
this was the announcement. Like this, if there's any big piece of news that came out from presentations

00:23:02.620 --> 00:23:07.800
and talks and announcements, like this is the one. So PyScript, people can guess, but what is it?

00:23:07.800 --> 00:23:16.500
Tell us about this. So PyScript is a framework that allows users to basically use HTML tags to define,

00:23:16.500 --> 00:23:24.000
to run Python code and define different components. Those can be related to executing code, but also

00:23:24.000 --> 00:23:31.900
providing, defining your environments, what packages you want to install, et cetera, as well as some UI

00:23:31.900 --> 00:23:39.820
components that make things easier for users that are not familiar with HTML and CSS and all the styling

00:23:39.820 --> 00:23:48.000
of things. It's based on a Python runtime, which is Pyodide that allows Python execution on the browser.

00:23:48.000 --> 00:23:56.820
And it has interoperability capabilities with JavaScript as well. So you can use both Python libraries as well

00:23:56.820 --> 00:23:59.300
as JavaScript libraries in your code.

00:23:59.300 --> 00:24:03.880
Yeah. This is really great. And if people go to PyScript.net and scroll down and what is PyScript,

00:24:03.880 --> 00:24:08.620
it really calls all these out. Like if you're trying to present this to your boss or your team,

00:24:08.620 --> 00:24:11.660
you're like, this is something cool we should check out. Like they should definitely go to that list

00:24:11.660 --> 00:24:12.140
right there. Yeah.

00:24:12.140 --> 00:24:18.200
Yes. Yeah. That is, you know, the most immediate list of things. You know, there's a lot that we're

00:24:18.200 --> 00:24:25.140
working on and trying to provide as a tooling, but it's very, very new and very, you know, green,

00:24:25.140 --> 00:24:27.720
if I must say. So yeah.

00:24:27.720 --> 00:24:30.620
So maybe don't totally release a product on it just yet.

00:24:30.720 --> 00:24:38.700
Yes. Definitely. Very bad idea to release a product. This, you know, expect APIs, code and features to change.

00:24:38.700 --> 00:24:54.260
Actually, it's one of the things that we intentionally talked about before Python was, you know, should we have a versioning in place or something like this so that, you know, you would expect any project to go that goes out there to have versions and everything.

00:24:54.260 --> 00:25:03.240
Yeah. Yeah. So we intentionally said, no, let's wait because it is, or let's put a version like do not use in production dot zero dot one.

00:25:03.240 --> 00:25:05.180
Zero dot zero dot zero dot negative one.

00:25:05.340 --> 00:25:24.340
Yes. Mostly because, you know, with this, we want, we wanted to have something that is working, that is useful, that it can be used by and hacked on by users that they want, but also give the vision that we have in mind and for people to see the possibilities.

00:25:24.760 --> 00:25:28.160
And that was the main focus for the project until Python.

00:25:28.160 --> 00:25:28.700
Right.

00:25:28.700 --> 00:25:36.180
Now, a lot of the following things are just the things that we want to achieve in order to enable a community.

00:25:36.180 --> 00:25:38.720
And this is an open source project.

00:25:38.720 --> 00:25:42.540
It's not an, it started at Anaconda, but it's an open source project.

00:25:42.540 --> 00:25:50.400
We want to have a strong community, have contributors beyond the Anaconda team and build it together.

00:25:50.720 --> 00:25:58.520
Yeah. That was one of my questions I wanted to ask you about is it sounds like you all have a very strong vision of what this should be and where you want it to go.

00:25:58.520 --> 00:25:59.100
Yes.

00:25:59.100 --> 00:26:03.860
But from what you just said, it's, I was wondering, does that mean it's more source open than open source?

00:26:03.860 --> 00:26:12.700
And like, we're driving this way and we'll take PRs as long as it's on our, our roadmap or how open are you to people just jumping in and giving ideas and trying to build it up?

00:26:12.780 --> 00:26:31.340
Oh, yeah. Great question. We are very open. So it's worth also saying that right now we are at the stage where I don't think we've made it that easy for people to onboard and understand the vision, understand the project, and actually be able to contribute.

00:26:31.340 --> 00:26:49.240
We're missing a lot of documentation. So one of the biggest pushes that we we've been having after PyCon is to actually build up the documentation around those things so that anyone contributing have a easier time onboarding, understand the visions, and can give feedback based on those things.

00:26:49.240 --> 00:27:02.580
So as soon as we are also growing the team behind it that so there's a lot of small things that we are preparing for the being a community that is on itself or self organized and everything.

00:27:02.580 --> 00:27:07.140
So overall, I think that this is really a community project.

00:27:07.140 --> 00:27:12.520
Sure. Speaking of community, let me just pull up the GitHub page. So you're just shy of 10,000 stars.

00:27:12.520 --> 00:27:13.340
Yeah, crazy.

00:27:13.340 --> 00:27:18.780
That's, I don't know how old it is, but it's how long is this repo been public? Not that long, right?

00:27:18.780 --> 00:27:22.420
We actually made it public 10 minutes in during Peter's talk.

00:27:22.420 --> 00:27:31.920
Okay. So you're like half of Flask almost or half of closing in on FastAPI levels of numbers of stars. There's a lot of interest in this.

00:27:31.920 --> 00:27:37.880
Yes, which is really exciting, but also is somehow overwhelming, right? Like I'll be very honest.

00:27:37.880 --> 00:27:40.000
There's a lot of expectations as well, right?

00:27:40.000 --> 00:27:48.120
Yes. Yes. And so we are aware of all of that. I think the main thing really for us is to, you know,

00:27:48.320 --> 00:27:57.220
we want to make sure that our users have patience because we're trying to get to a stable state or at least, you know.

00:27:57.220 --> 00:27:58.660
It's less than two weeks old. Come on.

00:27:58.660 --> 00:27:59.840
Exactly. Yes.

00:27:59.840 --> 00:28:01.000
It's a baby.

00:28:01.000 --> 00:28:10.780
Yeah. I could talk about this for hours. But at the same time, we want to make sure that it's usable and we want to collect users' feedback to make it better.

00:28:10.900 --> 00:28:21.280
Actually, one thing that is very important is that it got a lot of interest and a lot of excitement from the Python community and some of the web community as well.

00:28:21.280 --> 00:28:30.280
But I really want to make sure that everyone understands the picture. The full picture is what Peter said, like programming for the 99%.

00:28:30.800 --> 00:28:42.220
So beyond developers, how can we have a tool that students can learn very fast, get to learning coding very fast or even non-developers?

00:28:42.220 --> 00:28:47.160
I would love my mom to write her recipe book with PyScrime, right? Because it's that easy.

00:28:47.160 --> 00:28:47.360
Yeah.

00:28:47.360 --> 00:28:57.720
And thinking about the possibility of shipping that in your phone or your mobile users in developing countries that do not have access to computers and things like this, but they have a phone.

00:28:58.220 --> 00:29:05.400
What we also hope is that the social impact of a tool like this could be very big. One can dream.

00:29:05.400 --> 00:29:14.640
Yeah. Yeah. One can dream for sure. So something maybe you could take inspiration from is the Swift Playgrounds, right? It seems like you can model that pretty well.

00:29:14.640 --> 00:29:20.880
And I feel like Swift was largely borrowing from Python in a lot of its ways. So it's time to borrow a little back from Swift.

00:29:20.880 --> 00:29:21.760
Yes.

00:29:21.760 --> 00:29:26.280
For people who don't know, Swift Playgrounds is like a little bit like a REPL, a little bit like Jupyter.

00:29:26.600 --> 00:29:34.900
But then on the right, you get kind of more iOS outputs, like little widgets and graphs and animations and whatever.

00:29:34.900 --> 00:29:41.960
But it seems like that could be a similar way that's sort of like Jupyter, but also a little more web playful.

00:29:41.960 --> 00:29:47.680
Right. Yes. And I would say we have no shame into like borrowing from others, right?

00:29:47.680 --> 00:29:51.020
I think that actually is how you can grow well.

00:29:51.260 --> 00:29:58.300
Like take what's successful from this community or this language, et cetera, and try to use that to make a better tool.

00:29:58.300 --> 00:30:00.800
Yeah. Because it's so early, because it's so fresh.

00:30:00.800 --> 00:30:10.100
Like one of the drawbacks, call it a drawback, one of the temporary limitations is people can't just jump in and build the next version of Gmail or whatever with it right now.

00:30:10.560 --> 00:30:15.140
But a benefit is so many people want to contribute to open source and they're like, I love Django.

00:30:15.140 --> 00:30:18.240
I'm going to contribute to that. Or I love Jupyter. I want to contribute to that.

00:30:18.240 --> 00:30:31.140
And then it's such a complex, highly leveraged, very polished system that like, well, contributing to that means you have like an insane level of understanding to make this little change that won't break everything else.

00:30:31.220 --> 00:30:46.660
Whereas this is pretty fresh, right? So if somebody wants to come along and build something like a Swift Playground equivalent, the door is open for, and I'm not sure how much you want to accept that, but like the door is open for people to be, to grab ideas that are lower hanging fruit at the moment.

00:30:46.660 --> 00:30:57.560
Yeah. The idea is also to allow users to extend the tool itself and without having to change the tool, like with extensions and things like this.

00:30:57.560 --> 00:31:08.680
Like in my mind, I see that as a sort of Minecraft for programmers, right? Like you can view your own blocks and then share with others and then they can share, they can.

00:31:08.680 --> 00:31:11.680
Right. I can check out my mod pack for this thing or whatever.

00:31:11.940 --> 00:31:17.780
Yeah. Yeah. Yeah. And yeah, the idea is to make it well, powerful, but also fun and hackable.

00:31:17.780 --> 00:31:27.680
Yeah. Very cool. All right. Now let's talk about, I know we talked to some of these things here, but let me just dive in a little bit on the bullet points to kind of do a wrap up summary before we move into the coding.

00:31:27.680 --> 00:31:37.820
So Python in the browser, this means it runs 100% in the browser through primarily WebAssembly, which is leveraging the Pyodide project. Yeah.

00:31:37.820 --> 00:31:43.980
Right. That's right. Okay. And the WebAssembly stuff runs, I think, even better than the JavaScript.

00:31:43.980 --> 00:31:50.320
The C code compiled to JavaScript because this is still more of a binary form and whatnot.

00:31:50.320 --> 00:32:01.320
That's pretty excellent. One of the things that really inspires me here, you spoke about this will allow us to do things on our phones and on lower end computers and do other things like that.

00:32:01.320 --> 00:32:02.820
where like now we have this possibility

00:32:02.820 --> 00:32:04.620
just if you have a browser, you can kind of do it.

00:32:04.620 --> 00:32:06.160
I totally agree and that's great.

00:32:06.160 --> 00:32:09.960
But what really gets me excited about where this could go

00:32:09.960 --> 00:32:11.540
is progressive web apps

00:32:11.540 --> 00:32:15.900
or something even like Electron.js, right?

00:32:15.900 --> 00:32:18.660
Where I build like a true desktop application

00:32:18.660 --> 00:32:21.520
like VS Code or Slack or whatever,

00:32:21.520 --> 00:32:24.140
but instead of having to write everything in JavaScript,

00:32:24.140 --> 00:32:25.920
you know, write it in Python, right?

00:32:25.920 --> 00:32:29.260
And just got to include the 2 meg or 3 meg WASM file

00:32:29.260 --> 00:32:32.080
with your, what is already a massive Chrome distribution.

00:32:32.080 --> 00:32:33.600
So no one would know anyway.

00:32:33.600 --> 00:32:33.880
Right.

00:32:33.880 --> 00:32:34.660
Anyways, all right.

00:32:34.660 --> 00:32:36.100
So yeah, the estimation.

00:32:36.100 --> 00:32:38.080
Think about this, like there's a way to sort of,

00:32:38.080 --> 00:32:40.300
this is what I was hinting at at the beginning as well.

00:32:40.300 --> 00:32:43.320
Like, oh my gosh, we can have things in our doc

00:32:43.320 --> 00:32:44.500
that are like modern looking,

00:32:44.500 --> 00:32:46.620
that are based on Python easily.

00:32:46.620 --> 00:32:47.480
Very exciting.

00:32:47.480 --> 00:32:47.900
Yes.

00:32:47.900 --> 00:32:49.360
Or Taskbar if you're a Windows person.

00:32:49.360 --> 00:32:50.820
Right.

00:32:50.820 --> 00:32:53.420
The whole story about the native apps

00:32:53.420 --> 00:32:55.600
and mobile and whatnot.

00:32:55.600 --> 00:32:58.300
Russell Keith McGee, maintainer of beware,

00:32:58.300 --> 00:33:00.760
is he just joined Anaconda a few months ago.

00:33:00.760 --> 00:33:01.520
Oh, he did?

00:33:01.520 --> 00:33:01.800
Okay.

00:33:01.800 --> 00:33:02.500
I didn't know that.

00:33:02.500 --> 00:33:02.720
Excellent.

00:33:02.720 --> 00:33:03.020
Yes.

00:33:03.020 --> 00:33:05.540
And he's been sort of looking at the project,

00:33:05.540 --> 00:33:07.880
collaborating, contributing with some stuff.

00:33:07.880 --> 00:33:09.300
He actually made an example.

00:33:09.300 --> 00:33:12.640
One of the examples is written in Toga,

00:33:12.640 --> 00:33:15.300
which is the beware toolkit for UI design

00:33:15.300 --> 00:33:16.020
and stuff like this.

00:33:16.500 --> 00:33:18.140
And it's built in Toga,

00:33:18.140 --> 00:33:20.280
but has a PyScript backend

00:33:20.280 --> 00:33:24.720
so that it can render to PyScript directly.

00:33:24.720 --> 00:33:28.720
Pretty much like it can build for iOS or Android or Mac.

00:33:28.720 --> 00:33:32.340
But another interesting story is the opposite, right?

00:33:32.340 --> 00:33:33.520
Like, can we have an app,

00:33:33.520 --> 00:33:36.700
a PyScript app that then Toga can transform

00:33:36.700 --> 00:33:38.880
into an electron-like app

00:33:38.880 --> 00:33:40.260
that you can just run on your mobile?

00:33:40.260 --> 00:33:41.720
Lots of possibilities.

00:33:41.720 --> 00:33:42.380
Please do it.

00:33:42.380 --> 00:33:42.640
Do it.

00:33:42.640 --> 00:33:42.960
Do it.

00:33:43.740 --> 00:33:45.480
So many people would be happy, yeah.

00:33:45.480 --> 00:33:45.920
Yeah.

00:33:45.920 --> 00:33:47.520
If you're listening, that's for you.

00:33:47.520 --> 00:33:48.440
Yes.

00:33:48.440 --> 00:33:49.200
Oh, my goodness.

00:33:49.200 --> 00:33:52.200
Look, I think there are plenty of negatives

00:33:52.200 --> 00:33:53.600
about electron apps.

00:33:53.600 --> 00:33:56.660
Like, why does my password manager

00:33:56.660 --> 00:33:58.560
need 400 megs of RAM to run?

00:33:58.560 --> 00:34:03.200
But we have such a limited set of options

00:34:03.200 --> 00:34:06.020
for desktop and mobile apps and Python

00:34:06.020 --> 00:34:08.700
that for now, that would be massively welcome

00:34:08.700 --> 00:34:10.220
to do something like this.

00:34:10.220 --> 00:34:11.720
And then there's always possibilities of,

00:34:11.720 --> 00:34:13.180
well, do you actually have to ship Chrome

00:34:13.180 --> 00:34:14.460
in some like massive runtime

00:34:14.460 --> 00:34:16.240
or could there be a smaller host, right?

00:34:16.240 --> 00:34:18.080
Like there's layers of improvement.

00:34:18.080 --> 00:34:19.560
All right, next one, Python ecosystem.

00:34:19.560 --> 00:34:21.260
When you think about the history,

00:34:21.260 --> 00:34:23.220
this is not the first or the second time

00:34:23.220 --> 00:34:25.040
that someone has done Python in the browser.

00:34:25.040 --> 00:34:26.900
Like if you're familiar with,

00:34:26.900 --> 00:34:27.840
are you familiar with Anvil?

00:34:27.840 --> 00:34:28.480
Yes.

00:34:28.480 --> 00:34:31.640
I had Meredith on from Anvil

00:34:31.640 --> 00:34:34.100
to talk about both Anvil one time

00:34:34.100 --> 00:34:35.640
and then I think it was Sculpt,

00:34:35.640 --> 00:34:37.200
which is what they use.

00:34:37.200 --> 00:34:39.240
And Anvil has both a back end and front end

00:34:39.240 --> 00:34:40.260
that's all Python.

00:34:40.260 --> 00:34:42.040
A really interesting project.

00:34:42.620 --> 00:34:45.780
And they were using a JavaScript variant

00:34:45.780 --> 00:34:47.280
called Sculpt.

00:34:47.280 --> 00:34:48.340
And there's, I think,

00:34:48.340 --> 00:34:50.260
Brython is another one that you could choose.

00:34:50.260 --> 00:34:52.500
But one of the challenges of that

00:34:52.500 --> 00:34:54.960
is it's Python-like, right?

00:34:54.960 --> 00:34:56.600
It's not really the Python runtime.

00:34:56.600 --> 00:34:58.020
Do you maybe want to talk about

00:34:58.020 --> 00:35:01.100
like how that differs from the Python ecosystem,

00:35:01.100 --> 00:35:02.480
Python runtime that you all have?

00:35:02.480 --> 00:35:02.840
Right.

00:35:02.840 --> 00:35:04.900
That's exactly the difference, right?

00:35:04.900 --> 00:35:06.660
And probably the Pyodide folks

00:35:06.660 --> 00:35:08.640
would have a lot more to say.

00:35:08.640 --> 00:35:10.540
But the big difference is what you said.

00:35:10.680 --> 00:35:11.900
Like it's Python-like.

00:35:11.900 --> 00:35:12.980
For example, numerically,

00:35:12.980 --> 00:35:14.760
like JavaScript doesn't have integers.

00:35:14.760 --> 00:35:17.680
So your Python has to somehow fake integers

00:35:17.680 --> 00:35:19.680
if you're going to do things like that, right?

00:35:19.680 --> 00:35:20.000
Right.

00:35:20.000 --> 00:35:23.040
It's mimicking what you would expect with Python,

00:35:23.040 --> 00:35:24.300
but with the JavaScript.

00:35:24.840 --> 00:35:28.560
And it's not really a full-blown Python interpreter

00:35:28.560 --> 00:35:30.760
that you can also install your packages.

00:35:30.760 --> 00:35:33.780
The whole Python ecosystem is not supported.

00:35:33.780 --> 00:35:35.500
And I think that's the big difference

00:35:35.500 --> 00:35:38.240
that was the differentiator for Pyodide.

00:35:38.240 --> 00:35:39.820
And now that, you know,

00:35:39.820 --> 00:35:43.540
CPython actually compiles to Asm through M-Scripten,

00:35:43.540 --> 00:35:45.380
it's very exciting that we can...

00:35:45.380 --> 00:35:48.660
Is running the same VM or the same runtime

00:35:48.660 --> 00:35:51.100
that we get with CPython on our desktops,

00:35:51.100 --> 00:35:53.380
more or less, like a cut-down limited version,

00:35:53.380 --> 00:35:55.940
but it's not like a weird transpile to JavaScript

00:35:55.940 --> 00:35:56.700
and then run it.

00:35:56.700 --> 00:35:57.980
Yes, correct.

00:35:57.980 --> 00:36:00.680
With a few caveats, right?

00:36:00.680 --> 00:36:03.660
That's one of the things that I think is worth mentioning.

00:36:03.660 --> 00:36:05.980
It's the same CPython code,

00:36:05.980 --> 00:36:09.760
and it's the same thing you get in your local installation.

00:36:10.100 --> 00:36:11.460
A few things are different

00:36:11.460 --> 00:36:13.900
just because the browser as a VM,

00:36:13.900 --> 00:36:15.920
they work differently, right?

00:36:15.920 --> 00:36:18.400
Like file system is different on the browser.

00:36:18.400 --> 00:36:20.120
Sockets are different.

00:36:20.120 --> 00:36:20.520
Threading, probably.

00:36:20.520 --> 00:36:22.740
Threading, multiprocessing,

00:36:22.740 --> 00:36:24.620
pipes, and things like this, right?

00:36:24.620 --> 00:36:27.620
There are solutions for some of these

00:36:27.620 --> 00:36:30.240
that will require work

00:36:30.240 --> 00:36:31.860
and probably upstream

00:36:31.860 --> 00:36:35.420
with some of the parts of the standard libraries

00:36:35.420 --> 00:36:37.500
or the third-party packages,

00:36:37.500 --> 00:36:39.080
but they are just different.

00:36:39.080 --> 00:36:40.560
So we need to account for that.

00:36:40.560 --> 00:36:41.060
Sure.

00:36:41.060 --> 00:36:41.620
All right.

00:36:41.620 --> 00:36:43.000
So you can use, it says,

00:36:43.000 --> 00:36:44.900
many popular Python packages

00:36:44.900 --> 00:36:47.360
and stuff in the scientific data stack.

00:36:47.360 --> 00:36:48.840
Question from the audience,

00:36:48.840 --> 00:36:50.980
from Christopher Tyler says,

00:36:50.980 --> 00:36:52.640
my very limited understanding,

00:36:52.640 --> 00:36:53.840
since you're using PyDyde,

00:36:53.840 --> 00:36:54.980
is that there's a limitation

00:36:54.980 --> 00:36:56.360
on the libraries you can use,

00:36:56.360 --> 00:36:59.180
meaning can you import your own custom libraries?

00:36:59.180 --> 00:37:00.640
Generally, it's yes, right?

00:37:00.640 --> 00:37:02.340
But not universally, isn't it?

00:37:02.340 --> 00:37:02.600
Right.

00:37:02.600 --> 00:37:03.440
That's a great question.

00:37:03.440 --> 00:37:05.900
Let's talk first about the standard libraries

00:37:05.900 --> 00:37:07.040
and the third-party libraries

00:37:07.040 --> 00:37:08.780
that you have on PyPI, et cetera.

00:37:08.780 --> 00:37:12.060
So PyDyde ships with the standard library

00:37:12.060 --> 00:37:15.060
plus a set of packages that they ported.

00:37:15.060 --> 00:37:17.300
Most of these are,

00:37:17.300 --> 00:37:20.360
they use C extensions and things like that.

00:37:20.360 --> 00:37:21.960
So they need to be compiled.

00:37:21.960 --> 00:37:25.440
And so the PyDyde team took that work

00:37:25.440 --> 00:37:26.820
and took care of it.

00:37:26.820 --> 00:37:28.560
They're included in the distribution.

00:37:28.560 --> 00:37:32.300
There is a way for you to also build packages

00:37:32.300 --> 00:37:33.640
that depend on C extensions.

00:37:34.120 --> 00:37:36.900
They have a nice guide in their website

00:37:36.900 --> 00:37:38.060
that you can follow,

00:37:38.060 --> 00:37:39.880
and they will help with that.

00:37:39.880 --> 00:37:40.860
In general,

00:37:40.860 --> 00:37:44.500
you should expect your Python packages to work

00:37:44.500 --> 00:37:46.520
if you hip install them, right?

00:37:46.520 --> 00:37:46.740
Yeah.

00:37:46.900 --> 00:37:48.360
The caveat there is,

00:37:48.360 --> 00:37:50.120
do they have other dependencies

00:37:50.120 --> 00:37:51.460
that are C,

00:37:51.460 --> 00:37:52.900
depend on C extensions,

00:37:52.900 --> 00:37:55.880
and that will cascade in what work?

00:37:56.380 --> 00:37:58.680
Or do they rely on some of the things

00:37:58.680 --> 00:37:59.640
that I mentioned before,

00:37:59.640 --> 00:38:00.980
like multi-threat,

00:38:00.980 --> 00:38:02.140
multi-processing,

00:38:02.140 --> 00:38:03.560
and sockets and stuff?

00:38:03.560 --> 00:38:05.260
So in that case,

00:38:05.260 --> 00:38:06.760
the package may install,

00:38:06.760 --> 00:38:09.040
but it will raise an error

00:38:09.040 --> 00:38:11.480
because multi-processing is not supported

00:38:11.480 --> 00:38:12.540
or other things like this.

00:38:12.540 --> 00:38:14.440
What about simple stuff like async and await?

00:38:14.440 --> 00:38:15.420
Great question.

00:38:15.420 --> 00:38:16.800
It's not from a,

00:38:16.800 --> 00:38:17.080
like,

00:38:17.080 --> 00:38:18.960
what it expects of the operating system

00:38:18.960 --> 00:38:19.560
is pretty low,

00:38:19.560 --> 00:38:21.580
but it's also pretty advanced.

00:38:21.580 --> 00:38:21.980
Right.

00:38:21.980 --> 00:38:23.780
That is more of,

00:38:23.780 --> 00:38:26.400
I think it's less of the packaging problem

00:38:26.400 --> 00:38:28.980
and more of a philosophical problem

00:38:28.980 --> 00:38:31.140
in terms of how you compare Python

00:38:31.140 --> 00:38:32.960
to JavaScript, for instance, right?

00:38:32.960 --> 00:38:33.820
JavaScript,

00:38:33.820 --> 00:38:36.540
even if it's synchronous as a language,

00:38:36.540 --> 00:38:39.880
it has built the idioms over time

00:38:39.880 --> 00:38:42.140
to always try to be asynchronous

00:38:42.140 --> 00:38:44.340
because for obvious reasons,

00:38:44.340 --> 00:38:45.040
you don't want to,

00:38:45.040 --> 00:38:47.200
you don't want to block your browser

00:38:47.200 --> 00:38:47.900
or, you know,

00:38:47.900 --> 00:38:49.820
if you're doing something in your page

00:38:49.820 --> 00:38:51.260
and you block your Chrome on your phone.

00:38:51.260 --> 00:38:51.720
And that way,

00:38:51.720 --> 00:38:53.920
it seems like it should be a fantastic match

00:38:53.920 --> 00:38:54.640
for async and await.

00:38:54.640 --> 00:38:55.060
Yes.

00:38:55.060 --> 00:38:56.440
The waiting on I.O., yeah.

00:38:56.440 --> 00:38:56.900
Yes.

00:38:56.900 --> 00:38:58.140
It is a fantastic match

00:38:58.140 --> 00:38:59.880
and almost everything that you do

00:38:59.880 --> 00:39:02.220
that would be blocking in JavaScript,

00:39:02.220 --> 00:39:03.600
you would async await.

00:39:03.600 --> 00:39:04.680
In Python,

00:39:04.680 --> 00:39:06.680
we are used to do everything blocking

00:39:06.680 --> 00:39:09.860
and then when we want to do explicitly,

00:39:09.860 --> 00:39:10.800
we just,

00:39:10.800 --> 00:39:12.120
we use async.io

00:39:12.120 --> 00:39:13.440
or something different.

00:39:13.440 --> 00:39:16.720
So I think on that side of things,

00:39:16.720 --> 00:39:17.740
it's more of a,

00:39:17.740 --> 00:39:20.000
how you develop your Python code

00:39:20.000 --> 00:39:22.180
rather than the language and the package.

00:39:22.180 --> 00:39:24.020
You might have to have a mental model

00:39:24.020 --> 00:39:25.560
that matches closer to like

00:39:25.560 --> 00:39:26.960
what JavaScript traditionally has.

00:39:26.960 --> 00:39:27.320
Yes.

00:39:27.320 --> 00:39:27.780
Yeah.

00:39:27.780 --> 00:39:28.800
But, you know,

00:39:28.800 --> 00:39:29.900
you can use async await

00:39:29.900 --> 00:39:31.420
anywhere in your code

00:39:31.420 --> 00:39:32.820
in Pyodide and PyScript.

00:39:32.820 --> 00:39:34.280
Oh, sweet.

00:39:34.280 --> 00:39:35.320
Okay.

00:39:35.320 --> 00:39:37.520
I should have started on this list here

00:39:37.520 --> 00:39:38.500
40 minutes ago.

00:39:38.500 --> 00:39:41.380
But next question from Roller is,

00:39:41.380 --> 00:39:42.900
how would I pip install something

00:39:42.900 --> 00:39:43.580
into PyScript?

00:39:43.580 --> 00:39:44.560
Which is, you know,

00:39:44.560 --> 00:39:46.020
a follow-up from what Chris asked

00:39:46.020 --> 00:39:47.880
in this like Python ecosystem integration.

00:39:47.880 --> 00:39:49.760
Clearly, pip install a thing

00:39:49.760 --> 00:39:51.680
is like got to be at least 30%

00:39:51.680 --> 00:39:53.160
why Python is so popular.

00:39:53.160 --> 00:39:53.520
Right.

00:39:53.520 --> 00:39:54.000
Yeah.

00:39:54.000 --> 00:39:56.120
Not commenting on the packaging

00:39:56.120 --> 00:39:57.760
for Python or JavaScript.

00:39:57.760 --> 00:39:58.640
And they all,

00:39:58.640 --> 00:39:59.380
we all know that

00:39:59.380 --> 00:40:01.560
most people don't have problems with them.

00:40:02.020 --> 00:40:03.680
They all have idiosyncrasies,

00:40:03.680 --> 00:40:04.140
let's say.

00:40:04.140 --> 00:40:05.540
They all got their weirdnesses.

00:40:05.540 --> 00:40:05.880
Right.

00:40:05.880 --> 00:40:07.380
So Pyodide itself

00:40:07.380 --> 00:40:09.020
allows you to use MicroPip,

00:40:09.020 --> 00:40:09.860
which is,

00:40:09.860 --> 00:40:11.580
we will pip install

00:40:11.580 --> 00:40:12.520
your dependencies.

00:40:12.520 --> 00:40:14.300
Is it like an NPM-like thing

00:40:14.300 --> 00:40:15.120
where it creates like,

00:40:15.120 --> 00:40:16.120
instead of a node module,

00:40:16.120 --> 00:40:17.620
it creates something else?

00:40:17.620 --> 00:40:17.940
Yeah.

00:40:17.940 --> 00:40:19.100
It's like NPM,

00:40:19.100 --> 00:40:20.320
or it's more like pip

00:40:20.320 --> 00:40:21.320
really for Python.

00:40:21.320 --> 00:40:22.920
And it will go,

00:40:22.920 --> 00:40:24.360
and if it's a package

00:40:24.360 --> 00:40:26.260
provided by Pyodide itself,

00:40:26.260 --> 00:40:27.860
we will load that package

00:40:27.860 --> 00:40:28.500
for you.

00:40:28.660 --> 00:40:29.660
If it's a package

00:40:29.660 --> 00:40:30.760
that is not available there,

00:40:30.760 --> 00:40:33.040
it will check on IPI.

00:40:33.040 --> 00:40:34.460
And you can also specify

00:40:34.460 --> 00:40:36.740
the location of the package itself.

00:40:36.740 --> 00:40:38.640
So if you have your own repository,

00:40:38.640 --> 00:40:40.700
but you have your URL

00:40:40.700 --> 00:40:42.620
that points to a wheel file

00:40:42.620 --> 00:40:43.600
or a zip file,

00:40:43.600 --> 00:40:44.740
it will install from there.

00:40:44.740 --> 00:40:44.960
Yeah.

00:40:44.960 --> 00:40:46.020
And that wheel can be remote,

00:40:46.020 --> 00:40:46.820
just like you might have

00:40:46.820 --> 00:40:48.340
a CDN-pointed thing

00:40:48.340 --> 00:40:49.000
for JavaScript.

00:40:49.000 --> 00:40:49.520
Yes.

00:40:49.520 --> 00:40:50.360
Like, here's my wheel.

00:40:50.360 --> 00:40:50.720
Okay.

00:40:50.720 --> 00:40:51.120
Yeah.

00:40:51.120 --> 00:40:52.220
If it's pure Python, right?

00:40:52.220 --> 00:40:52.840
If it's C,

00:40:52.840 --> 00:40:53.980
then all bets are off.

00:40:53.980 --> 00:40:54.880
If it's C,

00:40:54.880 --> 00:40:57.000
you should have done your duty

00:40:57.000 --> 00:40:58.220
and ported it

00:40:58.220 --> 00:40:59.320
to WebAssembly.

00:40:59.320 --> 00:41:01.460
But the PyScript

00:41:01.460 --> 00:41:02.400
provides a layer

00:41:02.400 --> 00:41:03.200
on top of that

00:41:03.200 --> 00:41:05.420
where you can specify

00:41:05.420 --> 00:41:07.700
a tag called PyEnv

00:41:07.700 --> 00:41:10.340
and it accepts CMO format

00:41:10.340 --> 00:41:11.720
and you can specify

00:41:11.720 --> 00:41:12.880
your dependencies there

00:41:12.880 --> 00:41:14.740
and both for packages

00:41:14.740 --> 00:41:15.800
and also has

00:41:15.800 --> 00:41:17.720
an extra key called paths

00:41:17.720 --> 00:41:19.280
where you can actually provide

00:41:19.280 --> 00:41:20.920
the link to your modules,

00:41:20.920 --> 00:41:21.820
custom modules

00:41:21.820 --> 00:41:22.360
that you want to...

00:41:22.360 --> 00:41:23.580
effectively like the working

00:41:23.580 --> 00:41:25.760
directory of your Python.

00:41:25.760 --> 00:41:26.340
So when you type

00:41:26.340 --> 00:41:27.440
import filename

00:41:27.440 --> 00:41:29.100
or directory slash filename,

00:41:29.100 --> 00:41:30.540
it kind of mirrors that

00:41:30.540 --> 00:41:31.280
to the browser, right?

00:41:31.280 --> 00:41:32.320
Yes, exactly that.

00:41:32.320 --> 00:41:34.360
If you know how Python works,

00:41:34.360 --> 00:41:35.460
it's basically adding

00:41:35.460 --> 00:41:37.200
those files to your syspath.

00:41:37.200 --> 00:41:39.340
So it finds them.

00:41:39.340 --> 00:41:39.680
Interesting.

00:41:39.680 --> 00:41:40.260
Yeah.

00:41:40.260 --> 00:41:41.080
Cool, cool.

00:41:41.080 --> 00:41:41.400
All right.

00:41:41.400 --> 00:41:42.780
Another one that's really important here

00:41:42.780 --> 00:41:44.660
is Python with JavaScript.

00:41:44.660 --> 00:41:46.560
So it's not like you're locked

00:41:46.560 --> 00:41:49.600
into this PyScript little box, right?

00:41:49.800 --> 00:41:51.240
What I think this is another thing

00:41:51.240 --> 00:41:52.500
that makes me very optimistic

00:41:52.500 --> 00:41:53.560
for the future is

00:41:53.560 --> 00:41:55.240
you can communicate back

00:41:55.240 --> 00:41:56.380
to other JavaScript,

00:41:56.380 --> 00:41:57.780
to JavaScript events,

00:41:57.780 --> 00:41:59.300
button clicks to the DOM.

00:41:59.300 --> 00:42:01.760
So if here's another dream

00:42:01.760 --> 00:42:02.820
that I have is something

00:42:02.820 --> 00:42:05.360
like a Vue.js wrapper

00:42:05.360 --> 00:42:06.500
type of thing

00:42:06.500 --> 00:42:07.540
that I could do in Python

00:42:07.540 --> 00:42:10.040
and then do sort of model binding

00:42:10.040 --> 00:42:11.460
or attribute binding

00:42:11.460 --> 00:42:12.580
to the DOM

00:42:12.580 --> 00:42:14.500
and have that sort of stuff happening.

00:42:14.500 --> 00:42:16.000
And this is really important

00:42:16.000 --> 00:42:17.740
to make it a first class citizen

00:42:17.740 --> 00:42:18.520
that can work with

00:42:18.520 --> 00:42:19.740
all the stuff on the page.

00:42:19.740 --> 00:42:20.800
not like a canvas

00:42:20.800 --> 00:42:21.700
that was given or something.

00:42:21.700 --> 00:42:22.040
Yeah.

00:42:22.040 --> 00:42:22.520
Yeah.

00:42:22.520 --> 00:42:24.380
So before I go into this,

00:42:24.380 --> 00:42:25.760
I want to plus one

00:42:25.760 --> 00:42:26.480
on what you said

00:42:26.480 --> 00:42:27.600
around reactive

00:42:27.600 --> 00:42:29.360
sort of programming

00:42:29.360 --> 00:42:30.200
and components

00:42:30.200 --> 00:42:32.120
where they can be attributes

00:42:32.120 --> 00:42:33.660
that auto notify

00:42:33.660 --> 00:42:34.640
others' elements.

00:42:34.640 --> 00:42:36.300
That is definitely something

00:42:36.300 --> 00:42:37.100
that we would love

00:42:37.100 --> 00:42:38.300
to explore more.

00:42:38.300 --> 00:42:39.360
And there's a lot of interest.

00:42:39.360 --> 00:42:40.540
And on the Python

00:42:40.540 --> 00:42:42.020
with JavaScript side of things,

00:42:42.020 --> 00:42:43.860
I, after the keynote

00:42:43.860 --> 00:42:44.940
at PyCon,

00:42:45.080 --> 00:42:46.140
I saw a lot of videos

00:42:46.140 --> 00:42:47.760
coming up with like,

00:42:47.760 --> 00:42:49.800
oh, is JavaScript that

00:42:49.800 --> 00:42:50.820
now that Python

00:42:50.820 --> 00:42:52.100
can run on the browser

00:42:52.100 --> 00:42:53.420
and things like this.

00:42:53.420 --> 00:42:55.700
I think that narrative

00:42:55.700 --> 00:42:57.740
kind of looks at

00:42:57.740 --> 00:42:59.440
one side versus the other

00:42:59.440 --> 00:43:00.540
where we,

00:43:00.540 --> 00:43:02.860
what we really want to encourage

00:43:02.860 --> 00:43:04.660
is actually the two together.

00:43:04.660 --> 00:43:05.940
There is a ton

00:43:05.940 --> 00:43:07.260
of really great libraries

00:43:07.260 --> 00:43:08.100
in JavaScript.

00:43:08.460 --> 00:43:09.920
And there is a level

00:43:09.920 --> 00:43:11.300
of maturity in JavaScript

00:43:11.300 --> 00:43:13.160
on things on the browser

00:43:13.160 --> 00:43:14.620
or UI creation

00:43:14.620 --> 00:43:16.040
or, you know,

00:43:16.040 --> 00:43:17.560
drawing on Canvas

00:43:17.560 --> 00:43:19.020
or on the page

00:43:19.020 --> 00:43:22.320
that we are nowhere close

00:43:22.320 --> 00:43:23.660
to the 1% in Python.

00:43:23.660 --> 00:43:25.060
And all of a sudden,

00:43:25.060 --> 00:43:26.340
you can use those tools

00:43:26.340 --> 00:43:28.140
in Python and vice versa.

00:43:28.140 --> 00:43:29.200
All of a sudden,

00:43:29.200 --> 00:43:30.300
JavaScript users

00:43:30.300 --> 00:43:31.420
could use NumPy

00:43:31.420 --> 00:43:32.280
or SciPy

00:43:32.280 --> 00:43:33.260
and other things

00:43:33.260 --> 00:43:34.660
to power their applications, right?

00:43:34.660 --> 00:43:35.540
Wow, that's interesting.

00:43:35.540 --> 00:43:36.420
I hadn't really thought

00:43:36.420 --> 00:43:37.700
about the benefit others

00:43:37.700 --> 00:43:39.180
like outside of Python

00:43:39.180 --> 00:43:40.260
people may be receiving.

00:43:40.260 --> 00:43:40.720
But yeah,

00:43:40.720 --> 00:43:42.440
now Python becomes a thing

00:43:42.440 --> 00:43:43.300
so they could leverage.

00:43:43.300 --> 00:43:44.000
Yeah, exactly.

00:43:44.000 --> 00:43:45.480
I think if we start

00:43:45.480 --> 00:43:47.420
looking at this that way,

00:43:47.420 --> 00:43:48.460
then you can see

00:43:48.460 --> 00:43:49.760
how PyScript is a glue

00:43:49.760 --> 00:43:50.920
for building

00:43:50.920 --> 00:43:52.180
reacher applications,

00:43:52.180 --> 00:43:52.640
depending,

00:43:52.640 --> 00:43:53.340
like independently

00:43:53.340 --> 00:43:54.980
if you're a JavaScript developer

00:43:54.980 --> 00:43:56.000
or a Python developer.

00:43:56.000 --> 00:43:57.980
And we are starting

00:43:57.980 --> 00:43:58.500
with Python.

00:43:58.500 --> 00:43:59.860
It makes a lot of sense.

00:43:59.860 --> 00:44:01.420
But if there is

00:44:01.420 --> 00:44:02.480
a Rust implementation

00:44:02.480 --> 00:44:03.540
on WASM

00:44:03.540 --> 00:44:04.720
or an R,

00:44:04.720 --> 00:44:05.640
I'm sure

00:44:05.640 --> 00:44:06.460
that the Python

00:44:06.460 --> 00:44:07.460
scientific community

00:44:07.460 --> 00:44:08.140
would love to

00:44:08.140 --> 00:44:09.280
use R tools

00:44:09.280 --> 00:44:10.260
in the page

00:44:10.260 --> 00:44:11.980
with Python stuff

00:44:11.980 --> 00:44:12.780
and maybe JavaScript

00:44:12.780 --> 00:44:14.140
as well, right?

00:44:14.140 --> 00:44:14.400
Yeah.

00:44:14.400 --> 00:44:15.380
I think it's

00:44:15.380 --> 00:44:16.180
building together

00:44:16.180 --> 00:44:17.860
kind of movement

00:44:17.860 --> 00:44:18.980
that we want to push forward.

00:44:18.980 --> 00:44:19.360
Yeah.

00:44:19.360 --> 00:44:20.900
If I can look out

00:44:20.900 --> 00:44:22.540
and imagine a future,

00:44:22.540 --> 00:44:23.340
I don't know

00:44:23.340 --> 00:44:24.340
that there's a chance

00:44:24.340 --> 00:44:25.320
how much it would exist,

00:44:25.320 --> 00:44:26.620
but a really great future

00:44:26.620 --> 00:44:26.880
of like,

00:44:26.880 --> 00:44:27.100
well,

00:44:27.100 --> 00:44:28.380
we have WebAssembly.

00:44:28.380 --> 00:44:29.900
What if we really

00:44:29.900 --> 00:44:30.880
made WebAssembly

00:44:30.880 --> 00:44:31.580
more of a

00:44:31.580 --> 00:44:32.860
first-class citizen

00:44:32.860 --> 00:44:34.400
from a browser maker

00:44:34.400 --> 00:44:35.000
perspective?

00:44:35.200 --> 00:44:36.140
one thing

00:44:36.140 --> 00:44:36.800
I think would be

00:44:36.800 --> 00:44:37.640
fantastic is

00:44:37.640 --> 00:44:38.300
if instead of

00:44:38.300 --> 00:44:39.780
getting to the DOM

00:44:39.780 --> 00:44:40.460
through JavaScript

00:44:40.460 --> 00:44:41.340
and through the events

00:44:41.340 --> 00:44:41.940
through JavaScript

00:44:41.940 --> 00:44:43.760
is if all of the

00:44:43.760 --> 00:44:44.660
browser makers said,

00:44:44.660 --> 00:44:45.740
here's a WebAssembly

00:44:45.740 --> 00:44:47.020
native thing

00:44:47.020 --> 00:44:47.720
that you can use

00:44:47.720 --> 00:44:49.580
to bind to the DOM

00:44:49.580 --> 00:44:50.580
and to the events

00:44:50.580 --> 00:44:52.120
and basically control it,

00:44:52.120 --> 00:44:52.620
you know,

00:44:52.620 --> 00:44:53.280
you could have

00:44:53.280 --> 00:44:54.120
Rust in the browser,

00:44:54.120 --> 00:44:55.060
Python in the browser,

00:44:55.060 --> 00:44:56.080
C# in the browser,

00:44:56.080 --> 00:44:57.220
and they could all have

00:44:57.220 --> 00:44:58.660
this common API

00:44:58.660 --> 00:44:59.800
defined in

00:44:59.800 --> 00:45:00.660
maybe even

00:45:00.660 --> 00:45:02.100
an adapter type thing

00:45:02.100 --> 00:45:02.300
like,

00:45:02.300 --> 00:45:02.500
well,

00:45:02.500 --> 00:45:02.960
in C#

00:45:02.960 --> 00:45:03.500
it's classes

00:45:03.500 --> 00:45:04.140
and in Python

00:45:04.140 --> 00:45:04.720
it's,

00:45:04.720 --> 00:45:04.940
you know,

00:45:04.940 --> 00:45:05.480
Lambdas,

00:45:05.480 --> 00:45:05.840
I don't know,

00:45:05.840 --> 00:45:06.080
whatever,

00:45:06.080 --> 00:45:06.440
right?

00:45:06.440 --> 00:45:07.480
Like some variation

00:45:07.480 --> 00:45:08.320
that's more native

00:45:08.320 --> 00:45:09.700
to your world,

00:45:09.700 --> 00:45:10.480
but if there was

00:45:10.480 --> 00:45:11.600
some kind of interaction

00:45:11.600 --> 00:45:12.740
that we could build on,

00:45:12.740 --> 00:45:13.980
that would be even better,

00:45:13.980 --> 00:45:14.900
but we don't have that,

00:45:14.900 --> 00:45:15.640
so this integration

00:45:15.640 --> 00:45:16.200
with JavaScript

00:45:16.200 --> 00:45:17.520
and all of its

00:45:17.520 --> 00:45:18.780
modern features

00:45:18.780 --> 00:45:19.560
is fantastic.

00:45:19.560 --> 00:45:20.600
You still would want that,

00:45:20.600 --> 00:45:21.340
but it would be nice

00:45:21.340 --> 00:45:22.060
if there was a way,

00:45:22.060 --> 00:45:23.520
just put Python aside,

00:45:23.520 --> 00:45:24.160
like if I'm doing

00:45:24.160 --> 00:45:24.960
WebAssembly stuff

00:45:24.960 --> 00:45:25.680
that I could stay

00:45:25.680 --> 00:45:26.300
in WebAssembly,

00:45:26.300 --> 00:45:27.440
stay native

00:45:27.440 --> 00:45:28.620
to interact more

00:45:28.620 --> 00:45:29.280
with the browser.

00:45:29.480 --> 00:45:29.600
Yeah,

00:45:29.600 --> 00:45:30.800
and honestly,

00:45:30.800 --> 00:45:31.400
the interaction

00:45:31.400 --> 00:45:33.040
between the WebAssembly

00:45:33.040 --> 00:45:33.820
part of it

00:45:33.820 --> 00:45:34.320
and JavaScript,

00:45:34.320 --> 00:45:35.260
it's very fast.

00:45:35.260 --> 00:45:35.920
You know,

00:45:35.920 --> 00:45:36.900
I want to highlight

00:45:36.900 --> 00:45:37.780
one thing that you said.

00:45:37.780 --> 00:45:39.460
A lot of the future

00:45:39.460 --> 00:45:41.040
and how can this improve

00:45:41.040 --> 00:45:42.040
is on the,

00:45:42.040 --> 00:45:42.360
you know,

00:45:42.360 --> 00:45:44.040
browser folks to...

00:45:44.040 --> 00:45:44.640
It's on the vendors,

00:45:44.640 --> 00:45:44.940
yeah,

00:45:44.940 --> 00:45:45.560
it's on the shoulders

00:45:45.560 --> 00:45:46.040
to do it.

00:45:46.040 --> 00:45:46.400
Yes,

00:45:46.400 --> 00:45:47.060
because like

00:45:47.060 --> 00:45:49.300
the huge bottleneck

00:45:49.300 --> 00:45:50.160
that we have right now

00:45:50.160 --> 00:45:52.120
is that you still,

00:45:52.120 --> 00:45:52.900
like when you load

00:45:52.900 --> 00:45:53.380
your things,

00:45:53.380 --> 00:45:54.260
you still need

00:45:54.260 --> 00:45:55.080
to compile them

00:45:55.080 --> 00:45:56.220
and run them

00:45:56.220 --> 00:45:57.180
in WebAssembly.

00:45:57.180 --> 00:45:59.260
So there's a loading time

00:45:59.260 --> 00:45:59.660
right now

00:45:59.660 --> 00:46:00.340
is very high

00:46:00.340 --> 00:46:01.460
and we're working

00:46:01.460 --> 00:46:02.760
on optimizing things

00:46:02.760 --> 00:46:03.720
and there's a lot

00:46:03.720 --> 00:46:05.100
of great work

00:46:05.100 --> 00:46:06.660
from the CPython folks

00:46:06.660 --> 00:46:07.780
and the Pyodide folks

00:46:07.780 --> 00:46:09.380
to reduce the size

00:46:09.380 --> 00:46:10.420
of things that you're shipping

00:46:10.420 --> 00:46:11.380
by default.

00:46:11.380 --> 00:46:12.320
But ultimately,

00:46:12.320 --> 00:46:13.680
if you have a large

00:46:13.680 --> 00:46:14.980
scientific application,

00:46:14.980 --> 00:46:16.100
you still want to install

00:46:16.100 --> 00:46:16.700
NumPy

00:46:16.700 --> 00:46:18.040
and Vokey

00:46:18.040 --> 00:46:19.120
and other stuff like this

00:46:19.120 --> 00:46:20.080
and you will have

00:46:20.080 --> 00:46:20.640
a loading time.

00:46:20.640 --> 00:46:21.560
There is a loading time

00:46:21.560 --> 00:46:22.120
and, you know,

00:46:22.120 --> 00:46:23.500
I think that might mean

00:46:23.500 --> 00:46:24.620
it doesn't make sense

00:46:24.620 --> 00:46:25.820
for the homepage

00:46:25.820 --> 00:46:26.420
of Reddit

00:46:26.420 --> 00:46:29.380
or like your marketing page

00:46:29.380 --> 00:46:30.760
that needs to load

00:46:30.760 --> 00:46:31.500
super fast

00:46:31.500 --> 00:46:32.200
to have

00:46:32.200 --> 00:46:33.540
to be implemented in this.

00:46:33.540 --> 00:46:34.780
But if you're writing

00:46:34.780 --> 00:46:35.940
something like

00:46:35.940 --> 00:46:36.560
Google Maps,

00:46:36.560 --> 00:46:37.460
Gmail,

00:46:37.460 --> 00:46:39.020
like I go to those sites

00:46:39.020 --> 00:46:39.660
and then they spin

00:46:39.660 --> 00:46:40.300
and spin and spin

00:46:40.300 --> 00:46:41.060
for three seconds

00:46:41.060 --> 00:46:41.920
already,

00:46:41.920 --> 00:46:42.660
you know,

00:46:42.660 --> 00:46:43.840
like the first time

00:46:43.840 --> 00:46:44.240
you hit that,

00:46:44.240 --> 00:46:44.800
it does that.

00:46:44.800 --> 00:46:45.340
The second time

00:46:45.340 --> 00:46:46.260
it would just be cached.

00:46:46.260 --> 00:46:46.640
Right?

00:46:46.640 --> 00:46:47.440
All the stuff is off.

00:46:47.440 --> 00:46:48.600
The WebAssembly stuff

00:46:48.600 --> 00:46:49.540
is just off disk

00:46:49.540 --> 00:46:51.060
and if your expectation

00:46:51.060 --> 00:46:51.860
is this page

00:46:51.860 --> 00:46:52.780
might take two seconds

00:46:52.780 --> 00:46:53.740
to load sometimes,

00:46:53.740 --> 00:46:54.560
you're good,

00:46:54.560 --> 00:46:55.560
I think, honestly.

00:46:55.560 --> 00:46:55.920
Yeah.

00:46:55.920 --> 00:46:56.980
All that to say

00:46:56.980 --> 00:46:58.180
like this is the current state,

00:46:58.180 --> 00:46:58.380
right?

00:46:58.380 --> 00:46:59.480
I think there's a huge

00:46:59.480 --> 00:47:00.720
margin for improvement

00:47:00.720 --> 00:47:01.460
in the future

00:47:01.460 --> 00:47:03.300
and a lot of really great

00:47:03.300 --> 00:47:04.360
people are looking at it.

00:47:04.360 --> 00:47:04.940
Yeah.

00:47:04.940 --> 00:47:05.560
Okay.

00:47:05.560 --> 00:47:06.480
I agree

00:47:06.480 --> 00:47:07.600
and I think the momentum

00:47:07.600 --> 00:47:08.120
is just building.

00:47:08.120 --> 00:47:09.380
So let's look at some code

00:47:09.380 --> 00:47:10.000
and some examples

00:47:10.000 --> 00:47:11.140
so we can make this concrete

00:47:11.140 --> 00:47:12.720
for people over audio,

00:47:12.720 --> 00:47:13.240
which is tricky,

00:47:13.240 --> 00:47:14.060
but let's do it anyway.

00:47:14.060 --> 00:47:16.700
So you've got the GitHub page

00:47:16.700 --> 00:47:18.260
which has a bunch of examples

00:47:18.260 --> 00:47:20.020
and so what I want to do

00:47:20.020 --> 00:47:20.860
is kind of just pull up

00:47:20.860 --> 00:47:22.860
some of the examples here

00:47:22.860 --> 00:47:25.040
and let me remind myself

00:47:25.040 --> 00:47:26.380
what they are called.

00:47:26.380 --> 00:47:28.100
Let's do this one first,

00:47:28.100 --> 00:47:28.760
actually.

00:47:28.760 --> 00:47:30.820
I want to look at anti-gravity.

00:47:30.820 --> 00:47:33.700
So we all know the xkcd

00:47:33.700 --> 00:47:34.920
and if you go to the REPL

00:47:34.920 --> 00:47:35.320
and Python

00:47:35.320 --> 00:47:36.800
you type import anti-gravity,

00:47:36.800 --> 00:47:38.220
amazing stuff happens.

00:47:38.220 --> 00:47:40.160
And so here we have that

00:47:40.160 --> 00:47:41.900
equivalent in PyScript,

00:47:41.900 --> 00:47:43.580
but there's a couple of things

00:47:43.580 --> 00:47:44.280
that are really interesting

00:47:44.280 --> 00:47:44.620
about this.

00:47:44.620 --> 00:47:45.340
So let's pull this up.

00:47:45.340 --> 00:47:47.040
It says based on this thing

00:47:47.040 --> 00:47:47.880
and you give it a second

00:47:47.880 --> 00:47:48.440
and it says,

00:47:48.440 --> 00:47:50.080
the xkcd is,

00:47:50.080 --> 00:47:51.260
how are you flying?

00:47:51.260 --> 00:47:52.040
There's someone up there flying.

00:47:52.040 --> 00:47:52.260
They're like,

00:47:52.260 --> 00:47:52.660
Python,

00:47:52.660 --> 00:47:54.740
I just imported anti-gravity,

00:47:54.740 --> 00:47:54.980
right?

00:47:54.980 --> 00:47:55.360
It's great.

00:47:55.360 --> 00:47:56.980
But this is a variation.

00:47:56.980 --> 00:47:58.880
Maybe describe what just happened

00:47:58.880 --> 00:47:59.740
on the screen here.

00:47:59.740 --> 00:48:01.720
People can go to the demo

00:48:01.720 --> 00:48:02.260
and watch it,

00:48:02.260 --> 00:48:02.660
of course.

00:48:02.660 --> 00:48:03.140
This is,

00:48:03.140 --> 00:48:03.380
yeah.

00:48:03.380 --> 00:48:04.340
If they just check out the repo.

00:48:04.340 --> 00:48:05.120
This is a great,

00:48:05.120 --> 00:48:06.240
great example

00:48:06.240 --> 00:48:08.000
done by Philip Rudiger,

00:48:08.000 --> 00:48:10.100
his core contributor

00:48:10.100 --> 00:48:11.320
to PyScript

00:48:11.320 --> 00:48:12.740
but also contributor

00:48:12.740 --> 00:48:13.300
to Panel,

00:48:13.300 --> 00:48:14.600
the Holovie,

00:48:14.600 --> 00:48:15.920
he's done a lot

00:48:15.920 --> 00:48:16.820
of great stuff.

00:48:16.820 --> 00:48:18.240
And what's happening here

00:48:18.240 --> 00:48:19.480
is we're loading

00:48:19.480 --> 00:48:21.620
the SVG first

00:48:21.620 --> 00:48:23.080
and then there's

00:48:23.080 --> 00:48:24.440
another Python function

00:48:24.440 --> 00:48:25.400
that basically takes

00:48:25.400 --> 00:48:26.320
that statement

00:48:26.320 --> 00:48:27.780
and makes it float

00:48:27.780 --> 00:48:29.040
but basically changing

00:48:29.040 --> 00:48:29.500
coordinates.

00:48:29.700 --> 00:48:30.700
literally animates

00:48:30.700 --> 00:48:31.420
and flies up

00:48:31.420 --> 00:48:32.080
into the sky.

00:48:32.080 --> 00:48:33.600
Like it really takes off

00:48:33.600 --> 00:48:34.520
not just it's up there,

00:48:34.520 --> 00:48:34.720
right?

00:48:34.720 --> 00:48:35.480
Yes, yes.

00:48:35.480 --> 00:48:37.000
And for anyone

00:48:37.000 --> 00:48:38.520
wanting to check them out,

00:48:38.520 --> 00:48:39.120
the examples

00:48:39.120 --> 00:48:40.300
are also available

00:48:40.300 --> 00:48:41.840
on pyScript.net

00:48:41.840 --> 00:48:42.780
slash examples

00:48:42.780 --> 00:48:44.100
and you can run them.

00:48:44.100 --> 00:48:44.900
They are, okay.

00:48:44.900 --> 00:48:45.640
Directly there.

00:48:45.640 --> 00:48:46.280
Interesting.

00:48:46.280 --> 00:48:47.720
We'll link to that as well.

00:48:47.720 --> 00:48:49.720
So I said this is interesting.

00:48:49.720 --> 00:48:50.240
It's interesting

00:48:50.240 --> 00:48:51.080
for several reasons.

00:48:51.080 --> 00:48:51.940
One,

00:48:51.940 --> 00:48:52.960
if I go and look

00:48:52.960 --> 00:48:54.380
at my task manager

00:48:54.380 --> 00:48:55.100
in Vivaldi,

00:48:55.100 --> 00:48:56.260
this is doing like

00:48:56.260 --> 00:48:57.440
30% CPU

00:48:57.440 --> 00:48:59.180
constantly refreshing.

00:48:59.180 --> 00:48:59.520
I don't know

00:48:59.520 --> 00:49:00.280
what the frame rate is

00:49:00.280 --> 00:49:01.860
but it seems certainly

00:49:01.860 --> 00:49:03.700
passable in terms of

00:49:03.700 --> 00:49:05.120
there's cool animations

00:49:05.120 --> 00:49:06.040
going on

00:49:06.040 --> 00:49:07.540
on this rendering

00:49:07.540 --> 00:49:08.240
this canvas

00:49:08.240 --> 00:49:09.680
and it looks good, right?

00:49:09.680 --> 00:49:10.560
It doesn't seem like

00:49:10.560 --> 00:49:11.260
oh, this just isn't

00:49:11.260 --> 00:49:11.700
going to work.

00:49:11.700 --> 00:49:12.540
It's like the person

00:49:12.540 --> 00:49:13.560
doesn't like glitch.

00:49:13.560 --> 00:49:14.640
Right, right.

00:49:14.640 --> 00:49:15.160
You know what I mean?

00:49:15.160 --> 00:49:15.420
Yeah.

00:49:15.420 --> 00:49:16.320
The other one is

00:49:16.320 --> 00:49:17.400
it highlights many

00:49:17.400 --> 00:49:17.980
of the things

00:49:17.980 --> 00:49:18.740
that I think are

00:49:18.740 --> 00:49:19.960
pretty interesting here.

00:49:19.960 --> 00:49:20.800
Let me pull up

00:49:20.800 --> 00:49:22.320
the code for the example

00:49:22.320 --> 00:49:23.480
and this maybe

00:49:23.480 --> 00:49:24.180
will give us a chance

00:49:24.180 --> 00:49:24.620
to talk through

00:49:24.620 --> 00:49:25.460
the programming model.

00:49:25.460 --> 00:49:26.820
So first of all,

00:49:26.820 --> 00:49:27.460
the first thing

00:49:27.460 --> 00:49:27.960
that's interesting

00:49:27.960 --> 00:49:28.880
is it has this

00:49:28.880 --> 00:49:30.600
pyenv section

00:49:30.600 --> 00:49:31.520
and you have

00:49:31.520 --> 00:49:32.400
people maybe

00:49:32.400 --> 00:49:33.140
have seen examples

00:49:33.140 --> 00:49:33.680
and if you go

00:49:33.680 --> 00:49:34.520
to the home screen

00:49:34.520 --> 00:49:35.500
you can actually

00:49:35.500 --> 00:49:37.340
the pyscript.net

00:49:37.340 --> 00:49:37.980
it says

00:49:37.980 --> 00:49:40.100
there's new tag

00:49:40.100 --> 00:49:41.140
done through web components

00:49:41.140 --> 00:49:42.260
called py-script

00:49:42.260 --> 00:49:43.160
instead of just script

00:49:43.160 --> 00:49:43.700
and you can just

00:49:43.700 --> 00:49:44.680
write Python code

00:49:44.680 --> 00:49:46.720
directly in the browser

00:49:46.720 --> 00:49:48.320
but you only want to do

00:49:48.320 --> 00:49:49.140
that for so long

00:49:49.140 --> 00:49:50.480
until you want to

00:49:50.480 --> 00:49:51.120
read it across

00:49:51.120 --> 00:49:51.780
a couple pages

00:49:51.780 --> 00:49:52.260
or whatever.

00:49:52.260 --> 00:49:53.500
So what's really cool

00:49:53.500 --> 00:49:54.020
here is the

00:49:54.020 --> 00:49:54.980
implementation of this

00:49:54.980 --> 00:49:56.540
is actually a custom

00:49:56.540 --> 00:49:57.480
Python file

00:49:57.480 --> 00:49:58.680
on the server, right?

00:49:58.680 --> 00:49:59.540
Yeah, exactly.

00:49:59.540 --> 00:50:01.120
We've been working

00:50:01.120 --> 00:50:02.200
on that

00:50:02.200 --> 00:50:03.360
for some time

00:50:03.360 --> 00:50:04.380
the design of this

00:50:04.380 --> 00:50:05.240
because as you said

00:50:05.240 --> 00:50:06.620
there's a tension

00:50:06.620 --> 00:50:08.280
between allowing people

00:50:08.280 --> 00:50:09.340
to just drop things

00:50:09.340 --> 00:50:10.200
in the page

00:50:10.200 --> 00:50:11.040
and then have your

00:50:11.040 --> 00:50:11.780
Python code there

00:50:11.780 --> 00:50:12.620
and it just works

00:50:12.620 --> 00:50:14.120
to also

00:50:14.120 --> 00:50:15.300
suggesting

00:50:15.300 --> 00:50:16.720
better patterns

00:50:16.720 --> 00:50:19.080
to do this.

00:50:19.080 --> 00:50:19.780
Like you definitely

00:50:19.780 --> 00:50:20.440
don't

00:50:20.440 --> 00:50:21.260
from a quality

00:50:21.260 --> 00:50:21.740
point of view

00:50:21.740 --> 00:50:22.420
it's really hard

00:50:22.420 --> 00:50:23.140
to test anything

00:50:23.140 --> 00:50:23.820
that you just drop

00:50:23.820 --> 00:50:24.400
on the page

00:50:24.400 --> 00:50:24.820
you know

00:50:24.820 --> 00:50:25.360
a readability

00:50:25.360 --> 00:50:25.980
point of view

00:50:25.980 --> 00:50:27.080
or refactor it

00:50:27.080 --> 00:50:28.080
or anything, right?

00:50:28.080 --> 00:50:28.720
Right, right.

00:50:28.720 --> 00:50:29.740
But at the same time

00:50:29.740 --> 00:50:30.660
we really want this

00:50:30.660 --> 00:50:31.560
to be

00:50:31.560 --> 00:50:32.720
something that people

00:50:32.720 --> 00:50:33.600
can play with

00:50:33.600 --> 00:50:34.300
and hack with

00:50:34.300 --> 00:50:35.240
and then don't have

00:50:35.240 --> 00:50:36.560
too much to think

00:50:36.560 --> 00:50:37.300
to think about

00:50:37.300 --> 00:50:38.320
oh I need a file

00:50:38.320 --> 00:50:39.080
I need to name it

00:50:39.080 --> 00:50:39.480
Python

00:50:39.480 --> 00:50:40.740
you know all of that.

00:50:40.740 --> 00:50:41.740
If there was a

00:50:41.740 --> 00:50:43.440
npm install step

00:50:43.440 --> 00:50:44.080
and then there was

00:50:44.080 --> 00:50:45.160
a compile step

00:50:45.160 --> 00:50:46.300
and then a pack step

00:50:46.300 --> 00:50:47.580
like you would shave off

00:50:47.580 --> 00:50:49.060
like 75% of the people

00:50:49.060 --> 00:50:49.640
who just wanted

00:50:49.640 --> 00:50:50.340
to check it out.

00:50:50.340 --> 00:50:50.620
Right.

00:50:50.620 --> 00:50:52.240
So we allowed

00:50:52.240 --> 00:50:52.760
this pattern

00:50:52.760 --> 00:50:54.000
but you could also say

00:50:54.000 --> 00:50:54.880
like the same code

00:50:54.880 --> 00:50:55.400
could be

00:50:55.400 --> 00:50:56.220
the same thing

00:50:56.220 --> 00:50:56.800
in PyM

00:50:56.800 --> 00:50:57.780
and then in PyScript

00:50:57.780 --> 00:50:59.120
you could also have

00:50:59.120 --> 00:51:00.940
PyScript source equals

00:51:00.940 --> 00:51:02.040
in a Python file

00:51:02.040 --> 00:51:03.860
so you can run that

00:51:03.860 --> 00:51:04.820
from files as well.

00:51:04.820 --> 00:51:05.360
Right, yeah.

00:51:05.360 --> 00:51:06.120
So just like

00:51:06.120 --> 00:51:07.660
with the regular script tag

00:51:07.660 --> 00:51:08.340
you say source

00:51:08.340 --> 00:51:09.240
and it can do a thing

00:51:09.240 --> 00:51:09.780
on startup

00:51:09.780 --> 00:51:10.620
you know like

00:51:10.620 --> 00:51:11.600
jQuery did it

00:51:11.600 --> 00:51:14.380
$document.ready

00:51:14.380 --> 00:51:15.740
hook right at the top

00:51:15.740 --> 00:51:16.260
all the time

00:51:16.260 --> 00:51:16.820
like you could do

00:51:16.820 --> 00:51:17.260
the equivalent

00:51:17.260 --> 00:51:18.240
of something like that.

00:51:18.240 --> 00:51:19.200
Okay, this is cool

00:51:19.200 --> 00:51:20.420
but this is only part of it

00:51:20.420 --> 00:51:21.140
let me open up

00:51:21.140 --> 00:51:22.020
the other file

00:51:22.020 --> 00:51:23.400
the antigravity.py

00:51:23.400 --> 00:51:24.480
and this is the one

00:51:24.480 --> 00:51:25.200
this is the one

00:51:25.200 --> 00:51:25.960
that made me really happy

00:51:25.960 --> 00:51:27.440
because when I look at this

00:51:27.440 --> 00:51:28.200
it's

00:51:28.200 --> 00:51:29.180
you know how is that

00:51:29.180 --> 00:51:30.040
animation happening right?

00:51:30.040 --> 00:51:30.640
What you do is

00:51:30.640 --> 00:51:31.460
you set a timer

00:51:31.460 --> 00:51:32.720
do a callback

00:51:32.720 --> 00:51:33.440
you know where you are

00:51:33.440 --> 00:51:33.900
in JavaScript

00:51:33.900 --> 00:51:34.720
and it goes

00:51:34.720 --> 00:51:35.980
click, click, click, click, click

00:51:35.980 --> 00:51:37.040
let's see how often

00:51:37.040 --> 00:51:37.980
are you doing this?

00:51:38.480 --> 00:51:39.180
Do you remember

00:51:39.180 --> 00:51:40.400
what the target

00:51:40.400 --> 00:51:41.340
frame rate was here?

00:51:41.340 --> 00:51:42.320
I don't remember.

00:51:42.320 --> 00:51:43.020
Yeah, anyway

00:51:43.020 --> 00:51:43.960
there's some sort of time

00:51:43.960 --> 00:51:44.540
where you say

00:51:44.540 --> 00:51:45.820
run it this frequently

00:51:45.820 --> 00:51:47.020
and basically

00:51:47.020 --> 00:51:48.420
what you do

00:51:48.420 --> 00:51:49.480
is you go over here

00:51:49.480 --> 00:51:50.060
and you say

00:51:50.060 --> 00:51:51.100
this is Python

00:51:51.100 --> 00:51:52.200
you say document

00:51:52.200 --> 00:51:53.660
get element by ID

00:51:53.660 --> 00:51:54.060
alright

00:51:54.060 --> 00:51:54.680
first of all

00:51:54.680 --> 00:51:55.020
awesome

00:51:55.020 --> 00:51:56.980
with a ternary expression

00:51:56.980 --> 00:51:58.020
and then

00:51:58.020 --> 00:51:58.960
you go

00:51:58.960 --> 00:51:59.500
and

00:51:59.500 --> 00:52:00.560
add

00:52:00.560 --> 00:52:01.920
through the DOM parser

00:52:01.920 --> 00:52:02.460
you add

00:52:02.460 --> 00:52:03.600
the SVG in there

00:52:03.600 --> 00:52:04.620
that's amazing

00:52:04.620 --> 00:52:06.200
you do a replace child

00:52:06.200 --> 00:52:07.580
with some HTML stuff

00:52:07.580 --> 00:52:08.340
and then

00:52:08.340 --> 00:52:09.160
you go

00:52:09.160 --> 00:52:09.780
and you hook

00:52:09.780 --> 00:52:10.700
the set interval

00:52:10.700 --> 00:52:11.440
so set interval

00:52:11.440 --> 00:52:12.260
is the way to say

00:52:12.260 --> 00:52:13.060
set a callback

00:52:13.060 --> 00:52:13.680
on a timer

00:52:13.680 --> 00:52:14.180
in JavaScript

00:52:14.180 --> 00:52:15.120
and

00:52:15.120 --> 00:52:16.220
then you just call

00:52:16.220 --> 00:52:17.400
the Python function

00:52:17.400 --> 00:52:18.280
self.move

00:52:18.280 --> 00:52:18.900
right?

00:52:18.900 --> 00:52:20.080
So there's a really

00:52:20.080 --> 00:52:20.780
cool interaction

00:52:20.780 --> 00:52:21.560
between JavaScript

00:52:21.560 --> 00:52:22.260
that's happening

00:52:22.260 --> 00:52:23.380
at a high

00:52:23.380 --> 00:52:24.580
frequency

00:52:24.580 --> 00:52:25.780
that shows

00:52:25.780 --> 00:52:26.500
do some stuff

00:52:26.500 --> 00:52:26.920
in Python

00:52:26.920 --> 00:52:28.220
go over to JavaScript

00:52:28.220 --> 00:52:29.700
go through the DOM

00:52:29.700 --> 00:52:30.880
and then call back

00:52:30.880 --> 00:52:31.420
into Python

00:52:31.420 --> 00:52:32.280
when things that are

00:52:32.280 --> 00:52:32.880
interesting happen

00:52:32.880 --> 00:52:33.600
here is an interval

00:52:33.600 --> 00:52:34.160
but it could be

00:52:34.160 --> 00:52:34.820
a button click

00:52:34.820 --> 00:52:35.820
or a drop down

00:52:35.820 --> 00:52:36.260
select

00:52:36.260 --> 00:52:36.660
or whatever

00:52:36.660 --> 00:52:36.960
right?

00:52:36.960 --> 00:52:37.300
Right

00:52:37.300 --> 00:52:37.800
right

00:52:37.800 --> 00:52:38.480
and

00:52:38.480 --> 00:52:39.380
we're doing

00:52:39.380 --> 00:52:39.940
some work

00:52:39.940 --> 00:52:40.400
right now

00:52:40.400 --> 00:52:40.800
at

00:52:40.800 --> 00:52:41.960
providing

00:52:41.960 --> 00:52:42.980
a higher level

00:52:42.980 --> 00:52:43.340
interface

00:52:43.340 --> 00:52:44.340
that would

00:52:44.340 --> 00:52:45.020
be more

00:52:45.020 --> 00:52:45.620
Pythonic

00:52:45.620 --> 00:52:46.540
to those

00:52:46.540 --> 00:52:47.240
JavaScript

00:52:47.240 --> 00:52:48.000
you know

00:52:48.000 --> 00:52:48.580
the usual

00:52:48.580 --> 00:52:49.020
things that you

00:52:49.020 --> 00:52:49.500
would always

00:52:49.500 --> 00:52:50.160
do in JavaScript

00:52:50.160 --> 00:52:51.240
like selecting

00:52:51.240 --> 00:52:51.640
an element

00:52:51.640 --> 00:52:52.640
by ID

00:52:52.640 --> 00:52:53.500
or class

00:52:53.500 --> 00:52:53.900
or things

00:52:53.900 --> 00:52:54.380
like this

00:52:54.380 --> 00:52:55.080
like a CSS

00:52:55.080 --> 00:52:55.760
selector

00:52:55.760 --> 00:52:56.360
sort of

00:52:56.360 --> 00:52:56.720
right

00:52:56.720 --> 00:52:57.240
model

00:52:57.240 --> 00:52:57.680
or something

00:52:57.680 --> 00:52:57.900
yeah

00:52:57.900 --> 00:52:58.180
yeah

00:52:58.180 --> 00:52:58.720
exactly

00:52:58.720 --> 00:52:59.620
so I think

00:52:59.620 --> 00:53:00.480
the goal

00:53:00.480 --> 00:53:01.160
is to provide

00:53:01.160 --> 00:53:01.720
the simplest

00:53:01.720 --> 00:53:02.660
and more

00:53:02.660 --> 00:53:03.560
expressive

00:53:03.560 --> 00:53:04.780
or Pythonic

00:53:04.780 --> 00:53:05.300
interface

00:53:05.300 --> 00:53:05.560
that we

00:53:05.560 --> 00:53:05.860
could

00:53:05.860 --> 00:53:06.560
to hide

00:53:06.560 --> 00:53:06.900
some of

00:53:06.900 --> 00:53:07.080
that

00:53:07.080 --> 00:53:07.680
complexity

00:53:07.680 --> 00:53:08.100
because

00:53:08.100 --> 00:53:08.840
at the end

00:53:08.840 --> 00:53:09.580
a lot of

00:53:09.580 --> 00:53:10.120
Python users

00:53:10.120 --> 00:53:10.920
or new users

00:53:10.920 --> 00:53:12.000
will have to end up

00:53:12.000 --> 00:53:12.700
learning about

00:53:12.700 --> 00:53:13.720
JavaScript itself

00:53:13.720 --> 00:53:14.620
right

00:53:14.620 --> 00:53:15.840
I didn't want to learn

00:53:15.840 --> 00:53:16.280
JavaScript

00:53:16.280 --> 00:53:16.860
and here I am

00:53:16.860 --> 00:53:17.620
learning JavaScript

00:53:17.620 --> 00:53:18.820
I think what you're

00:53:18.820 --> 00:53:19.220
learning though

00:53:19.220 --> 00:53:19.500
is not

00:53:19.500 --> 00:53:20.280
you're not learning

00:53:20.280 --> 00:53:20.760
JavaScript

00:53:20.760 --> 00:53:21.360
what you're

00:53:21.360 --> 00:53:21.880
learning is

00:53:21.880 --> 00:53:22.420
the DOM

00:53:22.420 --> 00:53:22.720
API

00:53:22.720 --> 00:53:23.400
the APIs

00:53:23.400 --> 00:53:23.940
that JavaScript

00:53:23.940 --> 00:53:25.040
often consumes

00:53:25.040 --> 00:53:25.440
right

00:53:25.440 --> 00:53:25.740
correct

00:53:25.740 --> 00:53:25.960
right

00:53:25.960 --> 00:53:26.360
you have to

00:53:26.360 --> 00:53:26.740
learn that

00:53:26.740 --> 00:53:27.400
the DOM

00:53:27.400 --> 00:53:28.220
has a

00:53:28.220 --> 00:53:28.680
get element

00:53:28.680 --> 00:53:29.180
by tag

00:53:29.180 --> 00:53:29.460
name

00:53:29.460 --> 00:53:30.500
rather than

00:53:30.500 --> 00:53:31.420
I have to

00:53:31.420 --> 00:53:31.780
say

00:53:31.780 --> 00:53:32.660
I can't

00:53:32.660 --> 00:53:33.260
say var

00:53:33.260 --> 00:53:33.780
anymore

00:53:33.780 --> 00:53:34.380
var

00:53:34.380 --> 00:53:35.200
char

00:53:35.200 --> 00:53:35.600
they have

00:53:35.600 --> 00:53:35.900
to say

00:53:35.900 --> 00:53:36.300
let

00:53:36.300 --> 00:53:36.700
or else

00:53:36.700 --> 00:53:36.900
that'll

00:53:36.900 --> 00:53:37.280
complain

00:53:37.280 --> 00:53:37.540
you know

00:53:37.540 --> 00:53:37.720
what I mean

00:53:37.720 --> 00:53:37.900
like

00:53:37.900 --> 00:53:38.340
you're not

00:53:38.340 --> 00:53:38.620
learning

00:53:38.620 --> 00:53:39.320
the language

00:53:39.320 --> 00:53:39.900
nuances

00:53:39.900 --> 00:53:40.640
but you are

00:53:40.640 --> 00:53:41.080
learning the

00:53:41.080 --> 00:53:41.580
APIs

00:53:41.580 --> 00:53:42.340
that JavaScript

00:53:42.340 --> 00:53:42.840
people are

00:53:42.840 --> 00:53:43.420
very common

00:53:43.420 --> 00:53:44.100
familiar

00:53:44.100 --> 00:53:44.300
with

00:53:44.300 --> 00:53:44.580
and it's

00:53:44.580 --> 00:53:44.800
a great

00:53:44.800 --> 00:53:45.060
point

00:53:45.060 --> 00:53:45.380
like

00:53:45.380 --> 00:53:46.000
another

00:53:46.000 --> 00:53:46.360
thing

00:53:46.360 --> 00:53:47.160
for instance

00:53:47.160 --> 00:53:47.660
the set

00:53:47.660 --> 00:53:48.060
interval

00:53:48.060 --> 00:53:48.800
could be

00:53:48.800 --> 00:53:49.260
replaced

00:53:49.260 --> 00:53:49.560
with

00:53:49.560 --> 00:53:49.800
full

00:53:49.800 --> 00:53:50.120
Python

00:53:50.120 --> 00:53:50.480
and just

00:53:50.480 --> 00:53:50.660
say

00:53:50.660 --> 00:53:50.880
like

00:53:50.880 --> 00:53:51.180
from

00:53:51.180 --> 00:53:51.880
asyncio

00:53:51.880 --> 00:53:52.560
important

00:53:52.560 --> 00:53:53.000
sleep

00:53:53.000 --> 00:53:53.480
you know

00:53:53.480 --> 00:53:53.980
time sleep

00:53:53.980 --> 00:53:54.800
and then

00:53:54.800 --> 00:53:55.520
while

00:53:55.520 --> 00:53:56.520
just do a loop

00:53:56.520 --> 00:53:57.540
just do a loop

00:53:57.540 --> 00:53:58.680
and asyncio

00:53:58.680 --> 00:53:58.800
wait

00:53:58.800 --> 00:53:59.300
interesting

00:53:59.300 --> 00:54:00.320
no kidding

00:54:00.320 --> 00:54:00.640
okay

00:54:00.640 --> 00:54:01.440
like a while

00:54:01.440 --> 00:54:01.920
true

00:54:01.920 --> 00:54:02.460
exactly

00:54:02.460 --> 00:54:03.320
await sleep

00:54:03.320 --> 00:54:04.040
then move

00:54:04.040 --> 00:54:04.440
okay

00:54:04.440 --> 00:54:05.160
yeah this is

00:54:05.160 --> 00:54:05.620
really really

00:54:05.620 --> 00:54:05.840
neat

00:54:05.840 --> 00:54:06.260
I think

00:54:06.260 --> 00:54:07.120
this example

00:54:07.120 --> 00:54:07.740
is so simple

00:54:07.740 --> 00:54:08.480
it's playful

00:54:08.480 --> 00:54:09.920
and it's not

00:54:09.920 --> 00:54:10.440
just

00:54:10.440 --> 00:54:11.840
we put a graph

00:54:11.840 --> 00:54:12.400
on the page

00:54:12.400 --> 00:54:12.960
not to say

00:54:12.960 --> 00:54:13.280
that that's

00:54:13.280 --> 00:54:13.680
not important

00:54:13.680 --> 00:54:14.140
but it's

00:54:14.140 --> 00:54:14.500
different

00:54:14.500 --> 00:54:14.940
than what

00:54:14.940 --> 00:54:15.280
we've seen

00:54:15.280 --> 00:54:15.620
before

00:54:15.620 --> 00:54:16.060
often

00:54:16.060 --> 00:54:16.400
yeah

00:54:16.400 --> 00:54:17.200
honestly

00:54:17.200 --> 00:54:18.100
I really

00:54:18.100 --> 00:54:18.760
props to

00:54:18.760 --> 00:54:19.160
to fill

00:54:19.160 --> 00:54:19.460
it like

00:54:19.460 --> 00:54:20.240
in I don't

00:54:20.240 --> 00:54:20.600
know what

00:54:20.600 --> 00:54:21.520
50 lines

00:54:21.520 --> 00:54:21.920
of code

00:54:21.920 --> 00:54:22.980
or 40 lines

00:54:22.980 --> 00:54:23.320
of code

00:54:23.320 --> 00:54:23.580
yeah like

00:54:23.580 --> 00:54:24.600
yeah 45

00:54:24.600 --> 00:54:25.480
for the entire

00:54:25.480 --> 00:54:26.160
implementation

00:54:26.160 --> 00:54:27.460
of a flying

00:54:27.460 --> 00:54:28.520
anti-gravity

00:54:28.520 --> 00:54:28.800
right

00:54:28.800 --> 00:54:29.460
SKCV

00:54:29.460 --> 00:54:30.040
pretty neat

00:54:30.040 --> 00:54:30.660
pretty neat

00:54:30.660 --> 00:54:31.020
yeah

00:54:31.020 --> 00:54:31.740
and in Python

00:54:31.740 --> 00:54:32.180
those are not

00:54:32.180 --> 00:54:33.340
45 lines

00:54:33.340 --> 00:54:34.060
of JavaScript

00:54:34.060 --> 00:54:34.480
right

00:54:34.480 --> 00:54:34.780
cool

00:54:34.780 --> 00:54:35.360
okay

00:54:35.360 --> 00:54:36.460
audience question

00:54:36.460 --> 00:54:37.000
Marcel

00:54:37.000 --> 00:54:37.920
says

00:54:37.920 --> 00:54:38.600
would it accept

00:54:38.600 --> 00:54:39.280
loading data

00:54:39.280 --> 00:54:40.060
from a file

00:54:40.060 --> 00:54:40.800
for processing

00:54:40.800 --> 00:54:41.940
like you know

00:54:41.940 --> 00:54:42.480
we're pulling

00:54:42.480 --> 00:54:42.940
in modules

00:54:42.940 --> 00:54:43.500
but like

00:54:43.500 --> 00:54:43.900
what's the

00:54:43.900 --> 00:54:44.440
data story

00:54:44.440 --> 00:54:45.220
that's a

00:54:45.220 --> 00:54:45.780
really really

00:54:45.780 --> 00:54:46.820
great question

00:54:46.820 --> 00:54:47.440
I think the

00:54:47.440 --> 00:54:47.880
data story

00:54:47.880 --> 00:54:48.640
is yet to be

00:54:48.640 --> 00:54:48.900
told

00:54:48.900 --> 00:54:49.460
we're

00:54:49.460 --> 00:54:50.520
dedicating a

00:54:50.520 --> 00:54:51.060
lot of effort

00:54:51.060 --> 00:54:51.640
to that

00:54:51.640 --> 00:54:52.440
right now

00:54:52.440 --> 00:54:52.880
you can

00:54:52.880 --> 00:54:53.680
you can load

00:54:53.680 --> 00:54:54.660
data using

00:54:54.660 --> 00:54:55.640
fetch

00:54:55.640 --> 00:54:56.300
basically

00:54:56.300 --> 00:54:57.020
and you can

00:54:57.020 --> 00:54:57.560
fetch data

00:54:57.560 --> 00:54:58.180
and then read

00:54:58.180 --> 00:54:58.940
just like normal

00:54:58.940 --> 00:54:59.340
files

00:54:59.340 --> 00:55:00.580
PyDite provides

00:55:00.580 --> 00:55:01.600
a PyFetch

00:55:01.600 --> 00:55:02.580
wrapper around

00:55:02.580 --> 00:55:03.380
the JavaScript

00:55:03.380 --> 00:55:03.860
fetch

00:55:03.860 --> 00:55:04.880
but there

00:55:04.880 --> 00:55:05.660
is a lot

00:55:05.660 --> 00:55:06.940
that can be

00:55:06.940 --> 00:55:07.200
done

00:55:07.200 --> 00:55:07.680
and we are

00:55:07.680 --> 00:55:08.320
working on it

00:55:08.320 --> 00:55:08.920
to have

00:55:08.920 --> 00:55:09.680
better support

00:55:09.680 --> 00:55:10.400
and just

00:55:10.400 --> 00:55:11.120
how does the

00:55:11.120 --> 00:55:11.540
story for

00:55:11.540 --> 00:55:12.300
larger files

00:55:12.300 --> 00:55:12.900
look like

00:55:12.900 --> 00:55:13.340
can I do

00:55:13.340 --> 00:55:13.800
a panda

00:55:13.800 --> 00:55:14.480
read CSV

00:55:14.480 --> 00:55:14.860
and give

00:55:14.860 --> 00:55:15.340
it a URL

00:55:15.340 --> 00:55:15.700
or something

00:55:15.700 --> 00:55:16.100
like that

00:55:16.100 --> 00:55:16.520
that's a

00:55:16.520 --> 00:55:17.000
great question

00:55:17.000 --> 00:55:17.640
I'm not

00:55:17.640 --> 00:55:17.840
sure

00:55:17.840 --> 00:55:18.000
I don't

00:55:18.000 --> 00:55:18.180
know

00:55:18.180 --> 00:55:18.740
yeah I

00:55:18.740 --> 00:55:19.020
don't know

00:55:19.020 --> 00:55:19.640
I have no

00:55:19.640 --> 00:55:20.200
idea I really

00:55:20.200 --> 00:55:21.040
just wondering

00:55:21.040 --> 00:55:21.300
yeah

00:55:21.300 --> 00:55:22.240
yeah but

00:55:22.240 --> 00:55:22.800
yeah that's

00:55:22.800 --> 00:55:23.100
one of the

00:55:23.100 --> 00:55:23.540
stories that

00:55:23.540 --> 00:55:24.120
I think

00:55:24.120 --> 00:55:25.080
is needs

00:55:25.080 --> 00:55:25.820
more development

00:55:25.820 --> 00:55:26.420
right now

00:55:26.420 --> 00:55:26.960
you can pull

00:55:26.960 --> 00:55:27.860
files and read

00:55:27.860 --> 00:55:28.660
them with that

00:55:28.660 --> 00:55:29.360
method but

00:55:29.360 --> 00:55:30.160
there's more

00:55:30.160 --> 00:55:30.860
work to be

00:55:30.860 --> 00:55:31.200
done there

00:55:31.200 --> 00:55:31.440
yeah

00:55:31.440 --> 00:55:32.740
okay let's

00:55:32.740 --> 00:55:33.460
look at another

00:55:33.460 --> 00:55:34.420
demo here

00:55:34.420 --> 00:55:35.420
let's see

00:55:35.420 --> 00:55:36.020
give me

00:55:36.020 --> 00:55:37.040
so good

00:55:37.040 --> 00:55:37.300
okay

00:55:37.300 --> 00:55:38.160
this one's

00:55:38.160 --> 00:55:38.800
interesting too

00:55:38.800 --> 00:55:39.760
this panel

00:55:39.760 --> 00:55:40.180
I think it's

00:55:40.180 --> 00:55:40.840
panel stream

00:55:40.840 --> 00:55:41.440
is the one

00:55:41.440 --> 00:55:42.020
and this

00:55:42.020 --> 00:55:42.920
is one of

00:55:42.920 --> 00:55:43.720
those that

00:55:43.720 --> 00:55:44.080
is gonna

00:55:44.080 --> 00:55:44.740
take some

00:55:44.740 --> 00:55:45.060
time to

00:55:45.060 --> 00:55:45.340
load

00:55:45.340 --> 00:55:45.980
because

00:55:45.980 --> 00:55:46.640
under the

00:55:46.640 --> 00:55:47.040
hood it's

00:55:47.040 --> 00:55:47.440
installing

00:55:47.440 --> 00:55:47.840
panel

00:55:47.840 --> 00:55:49.000
and installing

00:55:49.000 --> 00:55:50.020
bokeh I

00:55:50.020 --> 00:55:50.740
think and

00:55:50.740 --> 00:55:51.760
other visualization

00:55:51.760 --> 00:55:52.420
libraries that

00:55:52.420 --> 00:55:53.280
are heavier

00:55:53.280 --> 00:55:53.960
right right

00:55:53.960 --> 00:55:54.880
right so

00:55:54.880 --> 00:55:55.960
well let's try it a

00:55:55.960 --> 00:55:56.600
second time right

00:55:56.600 --> 00:55:57.220
so

00:55:57.220 --> 00:55:59.140
what do you

00:55:59.140 --> 00:55:59.820
guess seven or

00:55:59.820 --> 00:56:00.160
eight seconds

00:56:00.160 --> 00:56:00.620
maybe it took

00:56:00.620 --> 00:56:01.180
that first time

00:56:01.180 --> 00:56:01.500
but if I

00:56:01.500 --> 00:56:02.000
hit it again

00:56:02.000 --> 00:56:02.740
it says it

00:56:02.740 --> 00:56:03.760
downloaded 3.6

00:56:03.760 --> 00:56:05.020
megs

00:56:05.020 --> 00:56:05.440
yeah

00:56:05.440 --> 00:56:06.340
tick tock

00:56:06.340 --> 00:56:06.940
you should

00:56:06.940 --> 00:56:07.440
have cached

00:56:07.440 --> 00:56:08.300
most of the

00:56:08.300 --> 00:56:08.760
things that you

00:56:08.760 --> 00:56:09.100
compiled

00:56:09.100 --> 00:56:10.580
but also if

00:56:10.580 --> 00:56:10.960
you have

00:56:10.960 --> 00:56:11.900
if you set

00:56:11.900 --> 00:56:12.740
your browser

00:56:12.740 --> 00:56:13.220
to not

00:56:13.220 --> 00:56:13.840
cache it

00:56:13.840 --> 00:56:14.820
will not

00:56:14.820 --> 00:56:15.420
change anything

00:56:15.420 --> 00:56:16.060
yeah well I

00:56:16.060 --> 00:56:16.460
think the

00:56:16.460 --> 00:56:16.980
the challenge

00:56:16.980 --> 00:56:17.680
is that I'm

00:56:17.680 --> 00:56:18.400
using just

00:56:18.400 --> 00:56:19.740
python-m

00:56:19.740 --> 00:56:20.760
HTTP server

00:56:20.760 --> 00:56:21.200
so I'm not

00:56:21.200 --> 00:56:21.840
really using a

00:56:21.840 --> 00:56:24.160
proper server

00:56:24.160 --> 00:56:24.720
for this

00:56:24.720 --> 00:56:24.960
yeah

00:56:24.960 --> 00:56:25.620
so that's not

00:56:25.620 --> 00:56:25.900
helping

00:56:25.900 --> 00:56:26.740
I'm gonna let

00:56:26.740 --> 00:56:27.120
that one load

00:56:27.120 --> 00:56:27.560
up while we're

00:56:27.560 --> 00:56:28.360
I'm pulling up

00:56:28.360 --> 00:56:29.300
another one here

00:56:29.300 --> 00:56:29.700
that I want to

00:56:29.700 --> 00:56:30.120
talk about

00:56:30.120 --> 00:56:31.080
yeah is there

00:56:31.080 --> 00:56:31.540
one that you

00:56:31.540 --> 00:56:32.100
think we should

00:56:32.100 --> 00:56:32.840
highlight in

00:56:32.840 --> 00:56:33.420
particular I

00:56:33.420 --> 00:56:33.820
mean we've

00:56:33.820 --> 00:56:34.100
got the

00:56:34.100 --> 00:56:34.680
matplotlib

00:56:34.680 --> 00:56:35.180
one which is

00:56:35.180 --> 00:56:35.800
pretty interesting

00:56:35.800 --> 00:56:36.940
over here

00:56:36.940 --> 00:56:38.800
that shows

00:56:38.800 --> 00:56:39.260
this

00:56:39.260 --> 00:56:40.300
the d3 one

00:56:40.300 --> 00:56:40.920
is pretty

00:56:40.920 --> 00:56:41.620
interesting as

00:56:41.620 --> 00:56:41.920
well

00:56:41.920 --> 00:56:42.820
the d3 one

00:56:42.820 --> 00:56:43.140
you said

00:56:43.140 --> 00:56:43.640
right

00:56:43.640 --> 00:56:43.900
okay

00:56:43.900 --> 00:56:44.840
d3 has been

00:56:44.840 --> 00:56:45.800
a library

00:56:45.800 --> 00:56:46.480
that python

00:56:46.480 --> 00:56:47.420
folks have

00:56:47.420 --> 00:56:48.900
always wanting

00:56:48.900 --> 00:56:50.060
to be using

00:56:50.060 --> 00:56:50.660
that one was

00:56:50.660 --> 00:56:51.180
super fast

00:56:51.180 --> 00:56:51.860
that one was

00:56:51.860 --> 00:56:52.640
two or three

00:56:52.640 --> 00:56:52.960
seconds

00:56:52.960 --> 00:56:53.340
right

00:56:53.340 --> 00:56:54.040
maybe less

00:56:54.040 --> 00:56:54.340
than two

00:56:54.340 --> 00:56:54.600
seconds

00:56:54.600 --> 00:56:54.800
yeah

00:56:54.800 --> 00:56:55.040
yeah

00:56:55.040 --> 00:56:55.440
and that

00:56:55.440 --> 00:56:56.180
should have

00:56:56.180 --> 00:56:57.060
basically the

00:56:57.060 --> 00:56:57.740
same loading

00:56:57.740 --> 00:56:58.120
time as

00:56:58.120 --> 00:56:58.520
javascript

00:56:58.520 --> 00:56:59.160
because we're

00:56:59.160 --> 00:56:59.640
not really

00:56:59.640 --> 00:56:59.980
importing

00:56:59.980 --> 00:57:00.820
much

00:57:00.820 --> 00:57:01.680
or installing

00:57:01.680 --> 00:57:01.880
new

00:57:01.880 --> 00:57:02.240
libraries

00:57:02.240 --> 00:57:02.720
and once I

00:57:02.720 --> 00:57:03.200
hit your

00:57:03.200 --> 00:57:04.020
your example

00:57:04.020 --> 00:57:05.260
server then it's

00:57:05.260 --> 00:57:05.700
cached it

00:57:05.700 --> 00:57:05.880
right

00:57:05.880 --> 00:57:06.160
yeah

00:57:06.160 --> 00:57:06.720
yeah

00:57:06.720 --> 00:57:07.500
the second

00:57:07.500 --> 00:57:07.960
time you do

00:57:07.960 --> 00:57:08.320
yes

00:57:08.320 --> 00:57:09.380
so yeah

00:57:09.380 --> 00:57:10.320
another one

00:57:10.320 --> 00:57:11.640
the webgl

00:57:11.640 --> 00:57:13.020
right down

00:57:13.020 --> 00:57:13.620
this one

00:57:13.620 --> 00:57:15.040
this also should

00:57:15.040 --> 00:57:16.240
load pretty fast

00:57:16.240 --> 00:57:16.760
and shows

00:57:16.760 --> 00:57:17.980
wrapping webgl

00:57:17.980 --> 00:57:18.580
oh yeah

00:57:18.580 --> 00:57:19.140
directly

00:57:19.140 --> 00:57:19.800
this one

00:57:19.800 --> 00:57:20.140
this one shows

00:57:20.140 --> 00:57:20.640
an example

00:57:20.640 --> 00:57:21.240
of

00:57:21.240 --> 00:57:22.640
codecahedrons

00:57:22.640 --> 00:57:23.080
or something

00:57:23.080 --> 00:57:23.400
a bunch

00:57:23.400 --> 00:57:24.120
sort of rotating

00:57:24.120 --> 00:57:24.960
spinning around

00:57:24.960 --> 00:57:25.460
it's a little bit

00:57:25.460 --> 00:57:26.680
like a 3d

00:57:26.680 --> 00:57:27.880
asteroid game

00:57:27.880 --> 00:57:28.220
with no

00:57:28.220 --> 00:57:28.780
spaceships

00:57:28.780 --> 00:57:30.560
something like

00:57:30.560 --> 00:57:31.080
that I guess

00:57:31.080 --> 00:57:32.520
maybe is a way

00:57:32.520 --> 00:57:33.120
to think of it

00:57:33.120 --> 00:57:34.260
and if I go to

00:57:34.260 --> 00:57:34.920
oh and also

00:57:34.920 --> 00:57:35.740
as I move my

00:57:35.740 --> 00:57:36.460
mouse it reacts

00:57:36.460 --> 00:57:36.920
to I didn't

00:57:36.920 --> 00:57:37.440
I hadn't moved

00:57:37.440 --> 00:57:37.860
my mouse

00:57:37.860 --> 00:57:38.760
so that's pretty

00:57:38.760 --> 00:57:39.020
cool

00:57:39.020 --> 00:57:39.880
I open up my

00:57:39.880 --> 00:57:41.040
little task

00:57:41.040 --> 00:57:41.900
manager thing

00:57:41.900 --> 00:57:42.560
I don't know

00:57:42.560 --> 00:57:43.200
if it shares

00:57:43.200 --> 00:57:43.980
but it says

00:57:43.980 --> 00:57:44.940
basically

00:57:44.940 --> 00:57:45.720
it shows you

00:57:45.720 --> 00:57:46.120
how hard it's

00:57:46.120 --> 00:57:47.000
working and it's

00:57:47.000 --> 00:57:48.240
20% CPU

00:57:48.240 --> 00:57:49.520
for this 3d

00:57:49.520 --> 00:57:50.200
rendering

00:57:50.200 --> 00:57:51.360
interaction thing

00:57:51.360 --> 00:57:52.080
that's

00:57:52.080 --> 00:57:52.840
if you probably

00:57:52.840 --> 00:57:53.460
try to do this

00:57:53.460 --> 00:57:54.080
in pure Python

00:57:54.080 --> 00:57:54.760
and like Pygame

00:57:54.760 --> 00:57:55.460
it might be more

00:57:55.460 --> 00:57:55.880
yeah

00:57:55.880 --> 00:57:56.580
I'm not sure

00:57:56.580 --> 00:57:56.960
about like

00:57:56.960 --> 00:57:57.640
the performance

00:57:57.640 --> 00:57:58.660
and you know

00:57:58.660 --> 00:57:59.480
like resources

00:57:59.480 --> 00:58:00.480
but it should

00:58:00.480 --> 00:58:01.200
be pretty much

00:58:01.200 --> 00:58:02.260
once you're

00:58:02.260 --> 00:58:03.300
using JavaScript

00:58:03.300 --> 00:58:04.040
things

00:58:04.040 --> 00:58:04.940
they should be

00:58:04.940 --> 00:58:05.340
pretty much

00:58:05.340 --> 00:58:05.940
the same

00:58:05.940 --> 00:58:06.760
as JavaScript

00:58:06.760 --> 00:58:07.500
pure JavaScript

00:58:07.500 --> 00:58:08.620
much like Python

00:58:08.620 --> 00:58:09.520
often just sort

00:58:09.520 --> 00:58:10.120
of orchestrates

00:58:10.120 --> 00:58:10.560
C code

00:58:10.560 --> 00:58:11.280
once you've loaded

00:58:11.280 --> 00:58:11.860
something into

00:58:11.860 --> 00:58:12.460
the C layer

00:58:12.460 --> 00:58:12.960
and you're kind

00:58:12.960 --> 00:58:13.300
of just

00:58:13.300 --> 00:58:14.260
instructing it

00:58:14.260 --> 00:58:14.860
through simple

00:58:14.860 --> 00:58:15.220
commands

00:58:15.220 --> 00:58:15.800
it's probably

00:58:15.800 --> 00:58:16.220
not very

00:58:16.220 --> 00:58:16.720
different here

00:58:16.720 --> 00:58:17.160
exactly

00:58:17.160 --> 00:58:17.760
yes

00:58:17.760 --> 00:58:18.180
all right

00:58:18.180 --> 00:58:18.780
cool

00:58:18.780 --> 00:58:19.100
all right

00:58:19.100 --> 00:58:20.120
so I strongly

00:58:20.120 --> 00:58:20.920
encourage people

00:58:20.920 --> 00:58:21.400
to go check

00:58:21.400 --> 00:58:21.940
out the demo

00:58:21.940 --> 00:58:22.320
code

00:58:22.320 --> 00:58:23.200
it's just under

00:58:23.200 --> 00:58:23.680
the example

00:58:23.680 --> 00:58:24.180
folders

00:58:24.180 --> 00:58:25.060
in the GitHub

00:58:25.060 --> 00:58:25.380
repo

00:58:25.380 --> 00:58:26.080
which we'll link

00:58:26.080 --> 00:58:26.320
to

00:58:26.320 --> 00:58:26.920
Fabio

00:58:26.920 --> 00:58:27.360
we're running

00:58:27.360 --> 00:58:27.940
low on time

00:58:27.940 --> 00:58:28.160
here

00:58:28.160 --> 00:58:28.820
there's so much

00:58:28.820 --> 00:58:29.620
so much more

00:58:29.620 --> 00:58:30.140
I want to talk

00:58:30.140 --> 00:58:30.580
to you about

00:58:30.580 --> 00:58:31.500
you drive

00:58:31.500 --> 00:58:31.820
yeah

00:58:31.820 --> 00:58:32.340
let me just

00:58:32.340 --> 00:58:32.960
see a couple

00:58:32.960 --> 00:58:33.560
of example

00:58:33.560 --> 00:58:34.060
or a couple

00:58:34.060 --> 00:58:34.460
of areas

00:58:34.460 --> 00:58:34.800
I want to

00:58:34.800 --> 00:58:35.300
talk about

00:58:35.300 --> 00:58:35.640
here

00:58:35.640 --> 00:58:36.360
I just want

00:58:36.360 --> 00:58:37.260
to quickly

00:58:37.260 --> 00:58:37.760
touch on

00:58:37.760 --> 00:58:38.140
security

00:58:38.140 --> 00:58:38.540
I think

00:58:38.540 --> 00:58:38.960
the security

00:58:38.960 --> 00:58:39.420
story is

00:58:39.420 --> 00:58:40.260
pretty simple

00:58:40.260 --> 00:58:40.660
but I do

00:58:40.660 --> 00:58:41.380
have one

00:58:41.380 --> 00:58:41.800
question

00:58:41.800 --> 00:58:42.840
so to some

00:58:42.840 --> 00:58:43.160
degree

00:58:43.160 --> 00:58:43.740
people might

00:58:43.740 --> 00:58:44.120
go oh

00:58:44.120 --> 00:58:44.520
my gosh

00:58:44.520 --> 00:58:45.620
it's compiled

00:58:45.620 --> 00:58:46.360
C and

00:58:46.360 --> 00:58:47.640
JavaScript

00:58:47.640 --> 00:58:48.480
in the browser

00:58:48.480 --> 00:58:49.320
like you know

00:58:49.320 --> 00:58:50.180
what madness

00:58:50.180 --> 00:58:50.580
are people

00:58:50.580 --> 00:58:51.320
going to

00:58:51.320 --> 00:58:51.860
unleash

00:58:51.860 --> 00:58:52.680
on the world

00:58:52.680 --> 00:58:52.880
right

00:58:52.880 --> 00:58:53.360
this is like

00:58:53.360 --> 00:58:54.020
ActiveX

00:58:54.020 --> 00:58:54.500
or some

00:58:54.500 --> 00:58:55.240
dreaded

00:58:55.240 --> 00:58:55.800
com thing

00:58:55.800 --> 00:58:56.220
all over

00:58:56.220 --> 00:58:56.520
again

00:58:56.520 --> 00:58:57.400
and really

00:58:57.400 --> 00:58:58.140
WebAssembly

00:58:58.140 --> 00:58:59.140
also has

00:58:59.140 --> 00:58:59.680
the same

00:58:59.680 --> 00:59:00.120
sandbox

00:59:00.120 --> 00:59:00.560
security

00:59:00.560 --> 00:59:01.060
as JavaScript

00:59:01.060 --> 00:59:01.440
right

00:59:01.440 --> 00:59:01.840
right

00:59:01.840 --> 00:59:02.800
actually a lot

00:59:02.800 --> 00:59:03.660
of the issues

00:59:03.660 --> 00:59:04.320
that we've

00:59:04.320 --> 00:59:04.720
been getting

00:59:04.720 --> 00:59:05.560
around security

00:59:05.560 --> 00:59:06.720
boils down

00:59:06.720 --> 00:59:07.780
to that

00:59:07.780 --> 00:59:08.580
people like

00:59:08.580 --> 00:59:09.380
not being

00:59:09.380 --> 00:59:09.960
used you

00:59:09.960 --> 00:59:10.380
know to

00:59:10.380 --> 00:59:11.320
seeing the

00:59:11.320 --> 00:59:12.140
browser as

00:59:12.140 --> 00:59:12.800
a VM

00:59:12.800 --> 00:59:13.960
so oh

00:59:13.960 --> 00:59:15.020
if I type

00:59:15.020 --> 00:59:16.140
OS list

00:59:16.140 --> 00:59:16.640
there and

00:59:16.640 --> 00:59:16.980
stuff like

00:59:16.980 --> 00:59:17.260
this I

00:59:17.260 --> 00:59:17.700
can I have

00:59:17.700 --> 00:59:18.240
access to

00:59:18.240 --> 00:59:18.620
the file

00:59:18.620 --> 00:59:18.980
system

00:59:18.980 --> 00:59:19.880
well you're

00:59:19.880 --> 00:59:20.440
having access

00:59:20.440 --> 00:59:20.860
to an

00:59:20.860 --> 00:59:21.320
ephemera

00:59:21.320 --> 00:59:22.660
file system

00:59:22.660 --> 00:59:23.260
in the

00:59:23.260 --> 00:59:23.600
browser

00:59:23.600 --> 00:59:24.420
here and

00:59:24.420 --> 00:59:25.120
not your

00:59:25.120 --> 00:59:25.740
local file

00:59:25.740 --> 00:59:26.140
system

00:59:26.140 --> 00:59:26.840
that is a

00:59:26.840 --> 00:59:27.500
very important

00:59:27.500 --> 00:59:28.040
aspect

00:59:28.040 --> 00:59:28.520
one thing

00:59:28.520 --> 00:59:28.840
that would

00:59:28.840 --> 00:59:29.400
make me

00:59:29.400 --> 00:59:30.360
super happy

00:59:30.360 --> 00:59:31.400
is if we

00:59:31.400 --> 00:59:32.260
had some

00:59:32.260 --> 00:59:33.240
beautiful

00:59:33.240 --> 00:59:34.360
Python API

00:59:34.360 --> 00:59:35.140
to the local

00:59:35.140 --> 00:59:36.240
data side

00:59:36.240 --> 00:59:36.520
of things

00:59:36.520 --> 00:59:37.160
so inside

00:59:37.160 --> 00:59:37.680
the browser

00:59:37.680 --> 00:59:38.320
in JavaScript

00:59:38.320 --> 00:59:38.800
you get

00:59:38.800 --> 00:59:39.740
access to

00:59:39.740 --> 00:59:40.240
what's it

00:59:40.240 --> 00:59:40.380
called

00:59:40.380 --> 00:59:41.040
local DB

00:59:41.040 --> 00:59:41.660
and there's

00:59:41.660 --> 00:59:42.120
like a

00:59:42.120 --> 00:59:42.620
there's

00:59:42.620 --> 00:59:42.920
different

00:59:42.920 --> 00:59:43.340
levels

00:59:43.340 --> 00:59:43.600
there's

00:59:43.600 --> 00:59:43.980
like a

00:59:43.980 --> 00:59:44.500
file

00:59:44.500 --> 00:59:45.580
sort of

00:59:45.580 --> 00:59:46.580
per site

00:59:46.580 --> 00:59:47.240
file storage

00:59:47.240 --> 00:59:47.600
thing

00:59:47.600 --> 00:59:48.340
that's tied

00:59:48.340 --> 00:59:48.620
to your

00:59:48.620 --> 00:59:48.920
user

00:59:48.920 --> 00:59:49.340
and then

00:59:49.340 --> 00:59:49.680
there's

00:59:49.680 --> 00:59:50.040
like an

00:59:50.040 --> 00:59:50.380
embedded

00:59:50.380 --> 00:59:51.160
SQLite

00:59:51.160 --> 00:59:51.640
like thing

00:59:51.640 --> 00:59:52.260
I mean

00:59:52.260 --> 00:59:52.700
if you had

00:59:52.700 --> 00:59:53.380
something like

00:59:53.380 --> 00:59:54.400
SQL model

00:59:54.400 --> 00:59:55.760
or some

00:59:55.760 --> 00:59:56.080
other

00:59:56.080 --> 00:59:57.240
proper ORM

00:59:57.240 --> 00:59:57.500
that would

00:59:57.500 --> 00:59:57.800
let you

00:59:57.800 --> 00:59:58.280
connect

00:59:58.280 --> 00:59:59.680
to query

00:59:59.680 --> 00:59:59.960
that

00:59:59.960 --> 01:00:00.780
I suspect

01:00:00.780 --> 01:00:01.280
that could

01:00:01.280 --> 01:00:01.800
probably be

01:00:01.800 --> 01:00:02.280
built pretty

01:00:02.280 --> 01:00:02.640
easily

01:00:02.640 --> 01:00:03.360
with a

01:00:03.360 --> 01:00:04.380
interoperability

01:00:04.380 --> 01:00:05.000
layer to

01:00:05.000 --> 01:00:05.820
figure out

01:00:05.820 --> 01:00:06.300
just how to

01:00:06.300 --> 01:00:07.160
translate that

01:00:07.160 --> 01:00:07.460
over to

01:00:07.460 --> 01:00:07.760
JavaScript

01:00:07.760 --> 01:00:08.900
but is it

01:00:08.900 --> 01:00:09.380
what do you

01:00:09.380 --> 01:00:09.640
think

01:00:09.640 --> 01:00:10.220
you know

01:00:10.220 --> 01:00:10.840
more than I do

01:00:10.840 --> 01:00:11.600
there are

01:00:11.600 --> 01:00:12.040
lots of

01:00:12.040 --> 01:00:12.880
possibilities

01:00:12.880 --> 01:00:13.800
and scenarios

01:00:13.800 --> 01:00:14.600
of you know

01:00:14.600 --> 01:00:15.560
using what

01:00:15.560 --> 01:00:15.940
the browser

01:00:15.940 --> 01:00:16.600
provides you

01:00:16.600 --> 01:00:17.120
like local

01:00:17.120 --> 01:00:17.540
storage

01:00:17.540 --> 01:00:18.720
or small

01:00:18.720 --> 01:00:19.740
instances of

01:00:19.740 --> 01:00:20.280
databases

01:00:20.280 --> 01:00:20.700
and stuff

01:00:20.700 --> 01:00:21.120
like that

01:00:21.120 --> 01:00:22.200
so that is

01:00:22.200 --> 01:00:22.960
almost

01:00:22.960 --> 01:00:23.800
shipped

01:00:23.800 --> 01:00:24.340
and default

01:00:24.340 --> 01:00:25.060
with all

01:00:25.060 --> 01:00:25.500
the browsers

01:00:25.500 --> 01:00:26.320
there are

01:00:26.320 --> 01:00:26.920
interesting

01:00:26.920 --> 01:00:27.920
projects

01:00:27.920 --> 01:00:28.580
well at

01:00:28.580 --> 01:00:29.120
least one

01:00:29.120 --> 01:00:29.820
that I've

01:00:29.820 --> 01:00:30.180
seen

01:00:30.180 --> 01:00:30.460
like

01:00:30.460 --> 01:00:30.820
Google

01:00:30.820 --> 01:00:31.340
project

01:00:31.340 --> 01:00:31.660
where

01:00:31.660 --> 01:00:32.280
from

01:00:32.280 --> 01:00:32.860
Google

01:00:32.860 --> 01:00:33.560
from the

01:00:33.560 --> 01:00:33.980
Chrome team

01:00:33.980 --> 01:00:34.760
that is

01:00:34.760 --> 01:00:35.300
experimenting

01:00:35.300 --> 01:00:36.480
with scenarios

01:00:36.480 --> 01:00:37.180
where you can

01:00:37.180 --> 01:00:37.620
actually

01:00:37.620 --> 01:00:39.320
allow apps

01:00:39.320 --> 01:00:40.120
to access

01:00:40.120 --> 01:00:41.160
your file

01:00:41.160 --> 01:00:41.540
system

01:00:41.540 --> 01:00:42.200
or other

01:00:42.200 --> 01:00:42.620
resources

01:00:42.620 --> 01:00:43.020
native

01:00:43.020 --> 01:00:43.580
resources

01:00:43.580 --> 01:00:44.000
right

01:00:44.000 --> 01:00:44.380
like and

01:00:44.380 --> 01:00:44.620
it's

01:00:44.620 --> 01:00:45.180
it goes

01:00:45.180 --> 01:00:45.620
through a

01:00:45.620 --> 01:00:46.460
process of

01:00:46.460 --> 01:00:46.840
approval

01:00:46.840 --> 01:00:47.620
but you

01:00:47.620 --> 01:00:48.260
can mount

01:00:48.260 --> 01:00:49.200
directories

01:00:49.200 --> 01:00:50.180
and use

01:00:50.180 --> 01:00:50.920
them from

01:00:50.920 --> 01:00:51.640
your browser

01:00:51.640 --> 01:00:52.380
as a local

01:00:52.380 --> 01:00:52.720
mount

01:00:52.720 --> 01:00:53.660
those are

01:00:53.660 --> 01:00:54.460
also

01:00:54.460 --> 01:00:54.900
very

01:00:54.900 --> 01:00:55.320
interesting

01:00:55.320 --> 01:00:55.800
scenarios

01:00:55.800 --> 01:00:56.000
that

01:00:56.000 --> 01:00:56.220
could

01:00:56.220 --> 01:00:56.820
open

01:00:56.820 --> 01:00:57.080
up

01:00:57.080 --> 01:00:57.520
a lot

01:00:57.520 --> 01:00:57.820
of

01:00:57.820 --> 01:00:58.380
different

01:00:58.380 --> 01:00:58.940
ways

01:00:58.940 --> 01:00:59.080
of

01:00:59.080 --> 01:00:59.460
interacting

01:00:59.460 --> 01:00:59.760
with

01:00:59.760 --> 01:01:00.120
PyScript

01:01:00.120 --> 01:01:00.780
maybe

01:01:00.780 --> 01:01:01.120
it would

01:01:01.120 --> 01:01:01.360
mean

01:01:01.360 --> 01:01:01.880
you can

01:01:01.880 --> 01:01:02.160
actually

01:01:02.160 --> 01:01:03.100
develop

01:01:03.100 --> 01:01:03.440
your

01:01:03.440 --> 01:01:03.840
PyScript

01:01:03.840 --> 01:01:04.220
app

01:01:04.220 --> 01:01:04.680
directly

01:01:04.680 --> 01:01:05.000
from

01:01:05.000 --> 01:01:05.140
your

01:01:05.140 --> 01:01:05.400
local

01:01:05.400 --> 01:01:05.760
machine

01:01:05.760 --> 01:01:06.040
and

01:01:06.040 --> 01:01:06.220
then

01:01:06.220 --> 01:01:06.700
serve

01:01:06.700 --> 01:01:06.820
it

01:01:06.820 --> 01:01:07.040
on the

01:01:07.040 --> 01:01:07.380
browser

01:01:07.380 --> 01:01:07.980
real

01:01:07.980 --> 01:01:08.400
time

01:01:08.400 --> 01:01:08.880
or

01:01:08.880 --> 01:01:09.420
your

01:01:09.420 --> 01:01:09.680
app

01:01:09.680 --> 01:01:09.900
could

01:01:09.900 --> 01:01:10.200
write

01:01:10.200 --> 01:01:10.620
files

01:01:10.620 --> 01:01:10.880
or

01:01:10.880 --> 01:01:11.340
do

01:01:11.340 --> 01:01:11.600
your

01:01:11.600 --> 01:01:12.040
models

01:01:12.040 --> 01:01:12.200
or

01:01:12.200 --> 01:01:12.720
computation

01:01:12.720 --> 01:01:12.880
of

01:01:12.880 --> 01:01:12.980
the

01:01:12.980 --> 01:01:13.200
browser

01:01:13.200 --> 01:01:13.360
and

01:01:13.360 --> 01:01:13.520
then

01:01:13.520 --> 01:01:14.040
write

01:01:14.040 --> 01:01:14.540
results

01:01:14.540 --> 01:01:14.780
your

01:01:14.780 --> 01:01:15.040
local

01:01:15.040 --> 01:01:15.460
files

01:01:15.460 --> 01:01:16.080
there's

01:01:16.080 --> 01:01:16.320
a lot

01:01:16.320 --> 01:01:16.500
that

01:01:16.500 --> 01:01:16.700
can

01:01:16.700 --> 01:01:16.840
be

01:01:16.840 --> 01:01:17.240
explored

01:01:17.240 --> 01:01:19.380
my

01:01:19.380 --> 01:01:20.000
security

01:01:20.000 --> 01:01:20.380
question

01:01:20.380 --> 01:01:20.880
outside

01:01:20.880 --> 01:01:21.160
of

01:01:21.160 --> 01:01:21.320
the

01:01:21.320 --> 01:01:21.900
sandbox

01:01:21.900 --> 01:01:22.400
let's

01:01:22.400 --> 01:01:22.560
not

01:01:22.560 --> 01:01:23.000
stress

01:01:23.000 --> 01:01:23.240
about

01:01:23.240 --> 01:01:23.420
it

01:01:23.420 --> 01:01:23.800
we

01:01:23.800 --> 01:01:23.980
already

01:01:23.980 --> 01:01:24.180
have

01:01:24.180 --> 01:01:24.440
had

01:01:24.440 --> 01:01:24.640
web

01:01:24.640 --> 01:01:24.920
assembly

01:01:24.920 --> 01:01:25.140
for

01:01:25.140 --> 01:01:25.340
a long

01:01:25.340 --> 01:01:25.920
time

01:01:25.920 --> 01:01:26.160
is

01:01:26.160 --> 01:01:26.440
this

01:01:26.440 --> 01:01:26.780
py

01:01:26.780 --> 01:01:27.100
env

01:01:27.100 --> 01:01:27.520
section

01:01:27.520 --> 01:01:27.940
here

01:01:27.940 --> 01:01:28.240
where

01:01:28.240 --> 01:01:28.340
you

01:01:28.340 --> 01:01:28.460
can

01:01:28.460 --> 01:01:28.720
say

01:01:28.720 --> 01:01:29.160
go

01:01:29.160 --> 01:01:29.380
find

01:01:29.380 --> 01:01:29.560
this

01:01:29.560 --> 01:01:29.900
file

01:01:29.900 --> 01:01:30.560
right

01:01:30.560 --> 01:01:30.680
and

01:01:30.680 --> 01:01:30.820
I'm

01:01:30.820 --> 01:01:31.020
thinking

01:01:31.020 --> 01:01:31.420
of

01:01:31.420 --> 01:01:32.000
my

01:01:32.000 --> 01:01:32.360
website

01:01:32.360 --> 01:01:32.600
which

01:01:32.600 --> 01:01:32.800
has

01:01:32.800 --> 01:01:32.940
a

01:01:32.940 --> 01:01:33.180
static

01:01:33.180 --> 01:01:33.740
files

01:01:33.740 --> 01:01:35.120
folder

01:01:35.120 --> 01:01:35.560
section

01:01:35.560 --> 01:01:35.900
where I

01:01:35.900 --> 01:01:36.080
might

01:01:36.080 --> 01:01:36.280
put

01:01:36.280 --> 01:01:36.500
this

01:01:36.500 --> 01:01:36.640
because

01:01:36.640 --> 01:01:36.780
that

01:01:36.780 --> 01:01:36.960
needs

01:01:36.960 --> 01:01:37.100
to

01:01:37.100 --> 01:01:37.240
be

01:01:37.240 --> 01:01:37.520
served

01:01:37.520 --> 01:01:37.760
up

01:01:37.760 --> 01:01:38.280
as

01:01:38.280 --> 01:01:38.780
effectively

01:01:38.780 --> 01:01:38.980
a

01:01:38.980 --> 01:01:39.200
static

01:01:39.200 --> 01:01:39.480
file

01:01:39.480 --> 01:01:39.640
to

01:01:39.640 --> 01:01:39.800
the

01:01:39.800 --> 01:01:40.060
front

01:01:40.060 --> 01:01:40.260
end

01:01:40.260 --> 01:01:40.720
but

01:01:40.720 --> 01:01:40.900
I've

01:01:40.900 --> 01:01:41.420
got

01:01:41.420 --> 01:01:41.820
my

01:01:41.820 --> 01:01:42.120
app

01:01:42.120 --> 01:01:42.580
py

01:01:42.580 --> 01:01:42.940
my

01:01:42.940 --> 01:01:43.660
various

01:01:43.660 --> 01:01:44.260
views

01:01:44.260 --> 01:01:44.520
and

01:01:44.520 --> 01:01:45.140
settings

01:01:45.140 --> 01:01:45.440
dot

01:01:45.440 --> 01:01:46.020
json

01:01:46.020 --> 01:01:46.320
and

01:01:46.320 --> 01:01:46.760
like

01:01:46.760 --> 01:01:47.040
if

01:01:47.040 --> 01:01:47.120
I

01:01:47.120 --> 01:01:47.280
put

01:01:47.280 --> 01:01:47.460
too

01:01:47.460 --> 01:01:47.640
many

01:01:47.640 --> 01:01:47.860
dot

01:01:47.860 --> 01:01:48.040
dot

01:01:48.040 --> 01:01:48.380
slashes

01:01:48.380 --> 01:01:48.620
there

01:01:48.620 --> 01:01:48.860
am I

01:01:48.860 --> 01:01:49.040
going to

01:01:49.040 --> 01:01:49.220
be able

01:01:49.220 --> 01:01:49.480
to get

01:01:49.480 --> 01:01:49.660
to

01:01:49.660 --> 01:01:49.900
other

01:01:49.900 --> 01:01:50.240
stuff

01:01:50.240 --> 01:01:50.560
or

01:01:50.560 --> 01:01:50.700
is

01:01:50.700 --> 01:01:50.800
it

01:01:50.800 --> 01:01:51.060
okay

01:01:51.060 --> 01:01:51.700
suppose

01:01:51.700 --> 01:01:52.140
this

01:01:52.140 --> 01:01:52.860
folder

01:01:52.860 --> 01:01:53.380
this

01:01:53.380 --> 01:01:53.720
file

01:01:53.720 --> 01:01:54.020
lives

01:01:54.020 --> 01:01:54.200
in

01:01:54.200 --> 01:01:54.920
static

01:01:54.920 --> 01:01:55.600
slash

01:01:55.600 --> 01:01:56.240
antigravity

01:01:56.240 --> 01:01:56.440
dot

01:01:56.440 --> 01:01:57.040
html

01:01:57.040 --> 01:01:57.600
but

01:01:57.600 --> 01:01:57.760
the

01:01:57.760 --> 01:01:57.960
rest

01:01:57.960 --> 01:01:58.040
of

01:01:58.040 --> 01:01:58.180
my

01:01:58.180 --> 01:01:58.440
app

01:01:58.440 --> 01:01:59.000
is

01:01:59.000 --> 01:01:59.340
like

01:01:59.340 --> 01:02:00.020
one

01:02:00.020 --> 01:02:00.320
directory

01:02:00.320 --> 01:02:00.600
up

01:02:00.600 --> 01:02:00.980
from

01:02:00.980 --> 01:02:02.240
that

01:02:02.240 --> 01:02:02.660
could

01:02:02.660 --> 01:02:02.800
I

01:02:02.800 --> 01:02:03.020
say

01:02:03.020 --> 01:02:03.240
my

01:02:03.240 --> 01:02:03.620
path

01:02:03.620 --> 01:02:04.000
to

01:02:04.000 --> 01:02:04.280
my

01:02:04.280 --> 01:02:04.680
module

01:02:04.680 --> 01:02:04.940
is

01:02:04.940 --> 01:02:05.220
dot

01:02:05.220 --> 01:02:05.220
dot

01:02:05.220 --> 01:02:05.440
dot

01:02:05.440 --> 01:02:05.980
slash

01:02:05.980 --> 01:02:06.220
app

01:02:06.220 --> 01:02:06.420
dot

01:02:06.420 --> 01:02:06.680
pi

01:02:06.680 --> 01:02:06.820
and

01:02:06.820 --> 01:02:07.000
then

01:02:07.000 --> 01:02:07.300
maybe

01:02:07.300 --> 01:02:07.600
read

01:02:07.600 --> 01:02:07.800
like

01:02:07.800 --> 01:02:08.080
some

01:02:08.080 --> 01:02:08.400
right

01:02:08.400 --> 01:02:08.780
source

01:02:08.780 --> 01:02:09.060
code

01:02:09.060 --> 01:02:09.240
with

01:02:09.240 --> 01:02:09.440
like

01:02:09.440 --> 01:02:09.620
a

01:02:09.620 --> 01:02:09.920
token

01:02:09.920 --> 01:02:10.120
that

01:02:10.120 --> 01:02:10.280
I

01:02:10.280 --> 01:02:11.040
put

01:02:11.040 --> 01:02:11.240
in

01:02:11.240 --> 01:02:11.380
there

01:02:11.380 --> 01:02:11.520
that

01:02:11.520 --> 01:02:11.620
I

01:02:11.620 --> 01:02:11.780
shouldn't

01:02:11.780 --> 01:02:11.860
have

01:02:11.860 --> 01:02:11.960
put

01:02:11.960 --> 01:02:12.040
in

01:02:12.040 --> 01:02:12.160
there

01:02:12.160 --> 01:02:12.320
but

01:02:12.320 --> 01:02:12.500
then

01:02:12.500 --> 01:02:12.760
now

01:02:12.760 --> 01:02:12.920
it's

01:02:12.920 --> 01:02:13.240
public

01:02:13.240 --> 01:02:13.500
yeah

01:02:13.500 --> 01:02:13.960
relative

01:02:13.960 --> 01:02:14.960
paths

01:02:14.960 --> 01:02:15.180
should

01:02:15.180 --> 01:02:15.520
work

01:02:15.520 --> 01:02:16.020
just

01:02:16.020 --> 01:02:16.460
fine

01:02:16.460 --> 01:02:17.040
there's

01:02:17.040 --> 01:02:17.340
also

01:02:17.340 --> 01:02:17.920
I

01:02:17.920 --> 01:02:18.120
think

01:02:18.120 --> 01:02:18.480
with

01:02:18.480 --> 01:02:19.000
PyScript

01:02:19.000 --> 01:02:19.700
the

01:02:19.700 --> 01:02:20.620
distinction

01:02:20.620 --> 01:02:21.100
between

01:02:21.100 --> 01:02:21.960
development

01:02:21.960 --> 01:02:22.440
time

01:02:22.440 --> 01:02:22.920
and

01:02:22.920 --> 01:02:23.520
deployment

01:02:23.520 --> 01:02:23.920
time

01:02:23.920 --> 01:02:24.100
or

01:02:24.100 --> 01:02:24.500
bundling

01:02:24.500 --> 01:02:24.820
time

01:02:24.820 --> 01:02:25.100
is

01:02:25.100 --> 01:02:25.440
a

01:02:25.440 --> 01:02:25.660
little

01:02:25.660 --> 01:02:26.500
more

01:02:26.500 --> 01:02:27.520
highlighted

01:02:27.520 --> 01:02:27.900
like

01:02:27.900 --> 01:02:28.260
as a

01:02:28.260 --> 01:02:28.600
developer

01:02:28.600 --> 01:02:29.340
I'd

01:02:29.340 --> 01:02:29.500
love

01:02:29.500 --> 01:02:29.840
to

01:02:29.840 --> 01:02:30.540
have

01:02:30.540 --> 01:02:30.900
those

01:02:30.900 --> 01:02:31.420
relative

01:02:31.420 --> 01:02:31.960
paths

01:02:31.960 --> 01:02:32.320
and

01:02:32.320 --> 01:02:33.160
explore

01:02:33.160 --> 01:02:33.520
and

01:02:33.520 --> 01:02:34.080
have

01:02:34.080 --> 01:02:34.700
full

01:02:34.700 --> 01:02:35.020
access

01:02:35.020 --> 01:02:35.400
to

01:02:35.400 --> 01:02:36.260
a lot

01:02:36.260 --> 01:02:36.400
of

01:02:36.400 --> 01:02:36.780
libraries

01:02:36.780 --> 01:02:37.200
but

01:02:37.200 --> 01:02:37.380
when

01:02:37.380 --> 01:02:37.560
I

01:02:37.560 --> 01:02:38.100
deploy

01:02:38.100 --> 01:02:38.320
I

01:02:38.320 --> 01:02:38.800
bundle

01:02:38.800 --> 01:02:39.060
my

01:02:39.060 --> 01:02:39.580
application

01:02:39.580 --> 01:02:40.480
one of

01:02:40.480 --> 01:02:40.580
the

01:02:40.580 --> 01:02:40.760
things

01:02:40.760 --> 01:02:40.900
that

01:02:40.900 --> 01:02:40.980
we

01:02:40.980 --> 01:02:41.080
are

01:02:41.080 --> 01:02:41.380
very

01:02:41.380 --> 01:02:41.840
interested

01:02:41.840 --> 01:02:42.440
in

01:02:42.440 --> 01:02:43.100
developing

01:02:43.100 --> 01:02:43.500
more

01:02:43.500 --> 01:02:43.920
is

01:02:43.920 --> 01:02:44.400
we

01:02:44.400 --> 01:02:44.640
should

01:02:44.640 --> 01:02:45.260
bundle

01:02:45.260 --> 01:02:45.560
that

01:02:45.560 --> 01:02:45.820
as

01:02:45.820 --> 01:02:46.160
one

01:02:46.160 --> 01:02:46.500
thing

01:02:46.500 --> 01:02:47.140
and

01:02:47.140 --> 01:02:47.700
paths

01:02:47.700 --> 01:02:47.920
should

01:02:47.920 --> 01:02:48.260
be

01:02:48.260 --> 01:02:48.960
absolute

01:02:48.960 --> 01:02:49.580
so

01:02:49.580 --> 01:02:49.760
there

01:02:49.760 --> 01:02:49.880
is

01:02:49.880 --> 01:02:50.060
no

01:02:50.060 --> 01:02:50.400
issues

01:02:50.400 --> 01:02:50.700
with

01:02:50.700 --> 01:02:51.060
what

01:02:51.060 --> 01:02:51.220
you're

01:02:51.220 --> 01:02:51.520
saying

01:02:51.520 --> 01:02:52.040
we

01:02:52.040 --> 01:02:52.340
could

01:02:52.340 --> 01:02:52.860
bundle

01:02:52.860 --> 01:02:53.480
the

01:02:53.480 --> 01:02:53.900
interpreter

01:02:53.900 --> 01:02:54.660
and

01:02:54.660 --> 01:02:54.860
your

01:02:54.860 --> 01:02:55.340
dependencies

01:02:55.340 --> 01:02:55.720
so

01:02:55.720 --> 01:02:55.880
that

01:02:55.880 --> 01:02:56.040
we

01:02:56.040 --> 01:02:56.300
can

01:02:56.300 --> 01:02:57.100
optimize

01:02:57.100 --> 01:02:58.180
size

01:02:58.180 --> 01:02:58.940
remove

01:02:58.940 --> 01:02:59.420
dependencies

01:02:59.420 --> 01:02:59.680
that

01:02:59.680 --> 01:03:00.020
you're

01:03:00.020 --> 01:03:00.240
not

01:03:00.240 --> 01:03:00.640
using

01:03:00.640 --> 01:03:01.280
so

01:03:01.280 --> 01:03:01.800
the

01:03:01.800 --> 01:03:02.040
loading

01:03:02.040 --> 01:03:02.280
time

01:03:02.280 --> 01:03:02.440
is

01:03:02.440 --> 01:03:02.880
smaller

01:03:02.880 --> 01:03:03.640
basically

01:03:03.640 --> 01:03:03.920
three

01:03:03.920 --> 01:03:04.220
shake

01:03:04.220 --> 01:03:04.700
like

01:03:04.700 --> 01:03:05.140
a lot

01:03:05.140 --> 01:03:05.260
of

01:03:05.260 --> 01:03:05.540
JavaScript

01:03:05.540 --> 01:03:06.140
libraries

01:03:06.140 --> 01:03:06.420
do

01:03:06.420 --> 01:03:07.140
so

01:03:07.140 --> 01:03:07.740
there

01:03:07.740 --> 01:03:07.960
are

01:03:07.960 --> 01:03:08.280
definitely

01:03:08.280 --> 01:03:08.620
patterns

01:03:08.620 --> 01:03:08.780
to

01:03:08.780 --> 01:03:09.220
explore

01:03:09.220 --> 01:03:09.800
in that

01:03:09.800 --> 01:03:10.220
scenario

01:03:10.220 --> 01:03:10.460
soon

01:03:10.460 --> 01:03:10.660
yeah

01:03:10.660 --> 01:03:10.900
okay

01:03:10.900 --> 01:03:11.500
yeah

01:03:11.500 --> 01:03:11.740
you

01:03:11.740 --> 01:03:12.020
definitely

01:03:12.020 --> 01:03:12.160
don't

01:03:12.160 --> 01:03:12.320
want to

01:03:12.320 --> 01:03:12.420
go

01:03:12.420 --> 01:03:12.780
dot dot

01:03:12.780 --> 01:03:13.080
slash

01:03:13.080 --> 01:03:13.420
app

01:03:13.420 --> 01:03:14.140
because

01:03:14.140 --> 01:03:14.740
somebody

01:03:14.740 --> 01:03:14.940
could

01:03:14.940 --> 01:03:15.120
then

01:03:15.120 --> 01:03:15.400
inject

01:03:15.400 --> 01:03:15.640
that

01:03:15.640 --> 01:03:15.900
but

01:03:15.900 --> 01:03:16.120
yeah

01:03:16.120 --> 01:03:17.500
it's

01:03:17.500 --> 01:03:17.780
interesting

01:03:17.780 --> 01:03:18.500
I'll be

01:03:18.500 --> 01:03:19.060
cool to

01:03:19.060 --> 01:03:19.260
see what

01:03:19.260 --> 01:03:19.400
you'll

01:03:19.400 --> 01:03:19.520
do

01:03:19.520 --> 01:03:19.680
there

01:03:19.680 --> 01:03:19.980
but

01:03:19.980 --> 01:03:20.540
definitely

01:03:20.540 --> 01:03:20.840
that's

01:03:20.840 --> 01:03:20.940
the

01:03:20.940 --> 01:03:21.100
only

01:03:21.100 --> 01:03:21.320
thing

01:03:21.320 --> 01:03:21.520
that's

01:03:21.520 --> 01:03:21.660
coming

01:03:21.660 --> 01:03:21.780
to

01:03:21.780 --> 01:03:21.940
mind

01:03:21.940 --> 01:03:22.180
like

01:03:22.180 --> 01:03:22.760
hmm

01:03:22.760 --> 01:03:22.920
I

01:03:22.920 --> 01:03:23.080
wonder

01:03:23.080 --> 01:03:23.300
what's

01:03:23.300 --> 01:03:23.440
gonna

01:03:23.440 --> 01:03:23.680
happen

01:03:23.680 --> 01:03:23.940
there

01:03:23.940 --> 01:03:24.200
oh

01:03:24.200 --> 01:03:24.400
so

01:03:24.400 --> 01:03:24.620
but

01:03:24.620 --> 01:03:24.840
if

01:03:24.840 --> 01:03:25.060
you do

01:03:25.060 --> 01:03:25.520
dot dot

01:03:25.520 --> 01:03:26.080
app

01:03:26.080 --> 01:03:26.520
you're

01:03:26.520 --> 01:03:26.720
still

01:03:26.720 --> 01:03:26.980
like

01:03:26.980 --> 01:03:27.580
it's

01:03:27.580 --> 01:03:28.100
basically

01:03:28.100 --> 01:03:28.680
on you

01:03:28.680 --> 01:03:29.000
to

01:03:29.000 --> 01:03:29.920
define

01:03:29.920 --> 01:03:30.200
what

01:03:30.200 --> 01:03:30.420
you're

01:03:30.420 --> 01:03:30.760
actually

01:03:30.760 --> 01:03:31.280
serving

01:03:31.280 --> 01:03:31.520
as

01:03:31.520 --> 01:03:31.840
your

01:03:31.840 --> 01:03:32.180
static

01:03:32.180 --> 01:03:32.420
file

01:03:32.420 --> 01:03:32.860
server

01:03:32.860 --> 01:03:33.220
if

01:03:33.220 --> 01:03:33.540
it's

01:03:33.540 --> 01:03:33.740
not

01:03:33.740 --> 01:03:34.160
accessible

01:03:34.160 --> 01:03:34.500
as a

01:03:34.500 --> 01:03:34.740
static

01:03:34.740 --> 01:03:35.100
file

01:03:35.100 --> 01:03:35.540
already

01:03:35.540 --> 01:03:36.200
this

01:03:36.200 --> 01:03:36.480
will

01:03:36.480 --> 01:03:36.780
just

01:03:36.780 --> 01:03:37.420
404

01:03:37.420 --> 01:03:37.680
yeah

01:03:37.680 --> 01:03:37.960
okay

01:03:37.960 --> 01:03:38.180
then

01:03:38.180 --> 01:03:38.380
right

01:03:38.380 --> 01:03:38.560
yeah

01:03:38.560 --> 01:03:38.800
then

01:03:38.800 --> 01:03:39.120
then

01:03:39.120 --> 01:03:39.480
flask

01:03:39.480 --> 01:03:39.820
pyramid

01:03:39.820 --> 01:03:40.540
friends

01:03:40.540 --> 01:03:40.980
have it

01:03:40.980 --> 01:03:41.180
covered

01:03:41.180 --> 01:03:41.700
yeah

01:03:41.700 --> 01:03:42.000
yeah

01:03:42.000 --> 01:03:42.380
exactly

01:03:42.380 --> 01:03:42.660
now

01:03:42.660 --> 01:03:42.860
it's

01:03:42.860 --> 01:03:43.820
just

01:03:43.820 --> 01:03:44.080
you're

01:03:44.080 --> 01:03:44.240
like

01:03:44.240 --> 01:03:44.400
it's

01:03:44.400 --> 01:03:44.560
not

01:03:44.560 --> 01:03:44.700
our

01:03:44.700 --> 01:03:45.160
responsibility

01:03:45.160 --> 01:03:45.620
but

01:03:45.620 --> 01:03:46.000
you

01:03:46.000 --> 01:03:46.280
shouldn't

01:03:46.280 --> 01:03:46.500
be

01:03:46.500 --> 01:03:47.000
allowing

01:03:47.000 --> 01:03:47.260
you

01:03:47.260 --> 01:03:47.400
know

01:03:47.400 --> 01:03:47.880
slash

01:03:47.880 --> 01:03:48.780
static

01:03:48.780 --> 01:03:49.160
slash

01:03:49.160 --> 01:03:49.700
dot

01:03:49.700 --> 01:03:50.340
slash

01:03:50.340 --> 01:03:50.560
app

01:03:50.560 --> 01:03:50.740
dot

01:03:50.740 --> 01:03:50.920
pi

01:03:50.920 --> 01:03:51.140
being

01:03:51.140 --> 01:03:51.420
served

01:03:51.420 --> 01:03:51.720
anyway

01:03:51.720 --> 01:03:52.040
right

01:03:52.040 --> 01:03:52.480
right

01:03:52.480 --> 01:03:52.740
okay

01:03:52.740 --> 01:03:52.980
cool

01:03:52.980 --> 01:03:53.700
the other

01:03:53.700 --> 01:03:53.940
thing

01:03:53.940 --> 01:03:54.260
is

01:03:54.260 --> 01:03:54.940
one

01:03:54.940 --> 01:03:55.060
of

01:03:55.060 --> 01:03:55.180
the

01:03:55.180 --> 01:03:55.420
things

01:03:55.420 --> 01:03:55.620
that

01:03:55.620 --> 01:03:55.940
Steve

01:03:55.940 --> 01:03:56.180
Dauer

01:03:56.180 --> 01:03:56.540
talked

01:03:56.540 --> 01:03:56.820
about

01:03:56.820 --> 01:03:57.240
recently

01:03:57.240 --> 01:03:57.880
is

01:03:57.880 --> 01:03:58.280
that

01:03:58.280 --> 01:03:59.080
they

01:03:59.080 --> 01:03:59.560
started

01:03:59.560 --> 01:04:00.500
enable

01:04:00.500 --> 01:04:01.220
the

01:04:01.220 --> 01:04:01.740
real

01:04:01.740 --> 01:04:02.220
the

01:04:02.220 --> 01:04:02.640
full

01:04:02.640 --> 01:04:03.020
c

01:04:03.020 --> 01:04:03.340
python

01:04:03.340 --> 01:04:03.720
to

01:04:03.720 --> 01:04:03.920
being

01:04:03.920 --> 01:04:04.280
built

01:04:04.280 --> 01:04:04.920
within

01:04:04.920 --> 01:04:06.160
mscripten

01:04:06.160 --> 01:04:06.820
web

01:04:06.820 --> 01:04:07.240
assembly

01:04:07.240 --> 01:04:07.880
targets

01:04:07.880 --> 01:04:08.460
is

01:04:08.460 --> 01:04:08.760
this

01:04:08.760 --> 01:04:09.000
of

01:04:09.000 --> 01:04:09.320
interest

01:04:09.320 --> 01:04:09.500
to

01:04:09.500 --> 01:04:09.620
you

01:04:09.620 --> 01:04:09.860
all

01:04:09.860 --> 01:04:10.140
does

01:04:10.140 --> 01:04:10.540
this

01:04:10.540 --> 01:04:12.220
supersede

01:04:12.220 --> 01:04:13.720
Pyiodide's

01:04:13.720 --> 01:04:14.180
version

01:04:14.180 --> 01:04:14.660
in some

01:04:14.660 --> 01:04:14.860
way

01:04:14.860 --> 01:04:15.040
is

01:04:15.040 --> 01:04:15.440
what

01:04:15.440 --> 01:04:16.140
Pyiodide's

01:04:16.140 --> 01:04:16.360
version

01:04:16.360 --> 01:04:16.660
actually

01:04:16.660 --> 01:04:16.980
is

01:04:16.980 --> 01:04:17.280
the

01:04:17.280 --> 01:04:17.640
Pyodide

01:04:17.640 --> 01:04:18.120
team

01:04:18.120 --> 01:04:18.840
and

01:04:18.840 --> 01:04:19.380
the

01:04:19.380 --> 01:04:19.540
c

01:04:19.540 --> 01:04:19.980
python

01:04:19.980 --> 01:04:21.440
team

01:04:21.440 --> 01:04:21.640
are

01:04:21.640 --> 01:04:22.380
collaborating

01:04:22.380 --> 01:04:23.020
on

01:04:23.020 --> 01:04:23.940
making

01:04:23.940 --> 01:04:24.560
the

01:04:24.560 --> 01:04:25.060
two

01:04:25.060 --> 01:04:25.940
making

01:04:25.940 --> 01:04:26.380
Pyodide

01:04:26.380 --> 01:04:26.780
basically

01:04:26.780 --> 01:04:27.140
use

01:04:27.140 --> 01:04:27.420
that

01:04:27.420 --> 01:04:27.620
as

01:04:27.620 --> 01:04:27.720
a

01:04:27.720 --> 01:04:28.060
baseline

01:04:28.060 --> 01:04:28.580
python

01:04:28.580 --> 01:04:29.080
that

01:04:29.080 --> 01:04:30.100
actually

01:04:30.100 --> 01:04:30.300
would

01:04:30.300 --> 01:04:30.440
be

01:04:30.440 --> 01:04:30.700
very

01:04:30.700 --> 01:04:31.060
helpful

01:04:31.060 --> 01:04:31.740
to

01:04:31.740 --> 01:04:31.860
the

01:04:31.860 --> 01:04:32.180
Pyodide

01:04:32.180 --> 01:04:32.420
team

01:04:32.420 --> 01:04:32.620
as

01:04:32.620 --> 01:04:32.860
well

01:04:32.860 --> 01:04:33.140
they

01:04:33.140 --> 01:04:33.300
would

01:04:33.300 --> 01:04:33.600
have

01:04:33.600 --> 01:04:33.980
way

01:04:33.980 --> 01:04:34.220
less

01:04:34.220 --> 01:04:34.460
things

01:04:34.460 --> 01:04:34.620
to

01:04:34.620 --> 01:04:35.080
maintain

01:04:35.080 --> 01:04:35.640
they

01:04:35.640 --> 01:04:35.820
can

01:04:35.820 --> 01:04:36.040
just

01:04:36.040 --> 01:04:36.440
delegate

01:04:36.440 --> 01:04:37.000
to

01:04:37.000 --> 01:04:37.820
improvements

01:04:37.820 --> 01:04:38.360
and

01:04:38.360 --> 01:04:39.040
optimizations

01:04:39.040 --> 01:04:39.340
that

01:04:39.340 --> 01:04:39.700
the

01:04:39.700 --> 01:04:39.860
c

01:04:39.860 --> 01:04:40.100
python

01:04:40.100 --> 01:04:40.380
core

01:04:40.380 --> 01:04:40.640
team

01:04:40.640 --> 01:04:40.780
is

01:04:40.780 --> 01:04:41.560
they're

01:04:41.560 --> 01:04:41.920
doing

01:04:41.920 --> 01:04:42.460
and

01:04:42.460 --> 01:04:42.680
can

01:04:42.680 --> 01:04:43.040
focus

01:04:43.040 --> 01:04:43.580
on

01:04:43.580 --> 01:04:43.740
the

01:04:43.740 --> 01:04:44.220
additional

01:04:44.220 --> 01:04:44.960
features

01:04:44.960 --> 01:04:45.180
of

01:04:45.180 --> 01:04:45.600
Pyodide

01:04:45.600 --> 01:04:46.180
so

01:04:46.180 --> 01:04:46.980
that

01:04:46.980 --> 01:04:47.260
actually

01:04:47.260 --> 01:04:48.000
we had

01:04:48.000 --> 01:04:48.260
a

01:04:48.260 --> 01:04:48.940
few

01:04:48.940 --> 01:04:49.260
they're

01:04:49.260 --> 01:04:49.580
building

01:04:49.580 --> 01:04:49.860
in the

01:04:49.860 --> 01:04:50.040
web

01:04:50.040 --> 01:04:50.280
assembly

01:04:50.280 --> 01:04:50.620
version

01:04:50.620 --> 01:04:50.840
because

01:04:50.840 --> 01:04:50.980
it

01:04:50.980 --> 01:04:51.240
didn't

01:04:51.240 --> 01:04:51.640
exist

01:04:51.640 --> 01:04:51.900
that's

01:04:51.900 --> 01:04:52.080
probably

01:04:52.080 --> 01:04:52.240
not

01:04:52.240 --> 01:04:52.360
what

01:04:52.360 --> 01:04:52.460
they

01:04:52.460 --> 01:04:52.760
want

01:04:52.760 --> 01:04:52.980
to

01:04:52.980 --> 01:04:53.300
do

01:04:53.300 --> 01:04:53.480
right

01:04:53.480 --> 01:04:53.880
exactly

01:04:53.880 --> 01:04:54.380
yes

01:04:54.380 --> 01:04:54.820
yes

01:04:54.820 --> 01:04:55.060
yeah

01:04:55.060 --> 01:04:55.600
yeah

01:04:55.600 --> 01:04:55.920
okay

01:04:55.920 --> 01:04:56.380
their

01:04:56.380 --> 01:04:56.680
real

01:04:56.680 --> 01:04:57.100
innovation

01:04:57.100 --> 01:04:57.720
I think

01:04:57.720 --> 01:04:58.340
in addition

01:04:58.340 --> 01:04:58.660
to just

01:04:58.660 --> 01:04:58.940
getting the

01:04:58.940 --> 01:04:59.060
web

01:04:59.060 --> 01:04:59.340
assembly

01:04:59.340 --> 01:04:59.620
thing

01:04:59.620 --> 01:04:59.920
working

01:04:59.920 --> 01:05:00.300
is

01:05:00.300 --> 01:05:00.600
like

01:05:00.600 --> 01:05:00.880
how

01:05:00.880 --> 01:05:01.060
do

01:05:01.060 --> 01:05:01.220
you

01:05:01.220 --> 01:05:01.540
bring

01:05:01.540 --> 01:05:01.900
these

01:05:01.900 --> 01:05:02.800
important

01:05:02.800 --> 01:05:03.480
C

01:05:03.480 --> 01:05:04.700
mixed

01:05:04.700 --> 01:05:05.200
C

01:05:05.200 --> 01:05:05.880
libraries

01:05:05.880 --> 01:05:06.180
in

01:05:06.180 --> 01:05:06.400
like

01:05:06.400 --> 01:05:06.900
numpy

01:05:06.900 --> 01:05:07.120
and

01:05:07.120 --> 01:05:07.420
such

01:05:07.420 --> 01:05:07.960
to

01:05:07.960 --> 01:05:08.100
the

01:05:08.100 --> 01:05:08.420
browser

01:05:08.420 --> 01:05:08.760
that

01:05:08.760 --> 01:05:09.180
otherwise

01:05:09.180 --> 01:05:09.660
wouldn't

01:05:09.660 --> 01:05:09.900
just

01:05:09.900 --> 01:05:10.440
drop

01:05:10.440 --> 01:05:10.660
in

01:05:10.660 --> 01:05:10.920
as

01:05:10.920 --> 01:05:11.160
you

01:05:11.160 --> 01:05:11.260
know

01:05:11.260 --> 01:05:11.620
python

01:05:11.620 --> 01:05:11.960
stuff

01:05:11.960 --> 01:05:12.220
running

01:05:12.220 --> 01:05:12.620
on top

01:05:12.620 --> 01:05:12.720
of

01:05:12.720 --> 01:05:12.940
the

01:05:12.940 --> 01:05:13.660
interpreter

01:05:13.660 --> 01:05:14.360
right

01:05:14.360 --> 01:05:14.780
that

01:05:14.780 --> 01:05:15.040
seems

01:05:15.040 --> 01:05:15.280
to be

01:05:15.280 --> 01:05:15.420
the

01:05:15.420 --> 01:05:16.000
most

01:05:16.000 --> 01:05:16.420
important

01:05:16.420 --> 01:05:17.060
thing

01:05:17.060 --> 01:05:17.260
that

01:05:17.260 --> 01:05:17.480
they

01:05:17.480 --> 01:05:18.540
brought

01:05:18.540 --> 01:05:18.820
to

01:05:18.820 --> 01:05:18.940
the

01:05:18.940 --> 01:05:19.200
table

01:05:19.200 --> 01:05:19.620
right

01:05:19.620 --> 01:05:20.100
not

01:05:20.100 --> 01:05:20.600
discounting

01:05:20.600 --> 01:05:20.740
that

01:05:20.740 --> 01:05:21.160
there

01:05:21.160 --> 01:05:21.420
was

01:05:21.420 --> 01:05:21.660
not

01:05:21.660 --> 01:05:21.800
a

01:05:21.800 --> 01:05:21.980
web

01:05:21.980 --> 01:05:22.260
assembly

01:05:22.260 --> 01:05:22.640
version

01:05:22.640 --> 01:05:22.880
and

01:05:22.880 --> 01:05:23.020
they

01:05:23.020 --> 01:05:23.240
made

01:05:23.240 --> 01:05:23.400
that

01:05:23.400 --> 01:05:23.720
also

01:05:23.720 --> 01:05:24.020
happen

01:05:24.020 --> 01:05:24.160
right

01:05:24.160 --> 01:05:24.300
like

01:05:24.300 --> 01:05:24.540
that's

01:05:24.540 --> 01:05:24.760
also

01:05:24.760 --> 01:05:25.220
super

01:05:25.220 --> 01:05:25.660
important

01:05:25.660 --> 01:05:26.260
but

01:05:26.260 --> 01:05:26.560
well

01:05:26.560 --> 01:05:26.800
yeah

01:05:26.800 --> 01:05:27.140
I guess

01:05:27.140 --> 01:05:28.080
what makes

01:05:28.080 --> 01:05:28.380
them more

01:05:28.380 --> 01:05:28.720
distinct

01:05:28.720 --> 01:05:28.860
of

01:05:28.860 --> 01:05:28.980
all

01:05:28.980 --> 01:05:29.100
the

01:05:29.100 --> 01:05:29.340
other

01:05:29.340 --> 01:05:29.660
attempts

01:05:29.660 --> 01:05:29.820
is

01:05:29.820 --> 01:05:29.960
that

01:05:29.960 --> 01:05:30.100
they

01:05:30.100 --> 01:05:30.220
are

01:05:30.220 --> 01:05:30.500
really

01:05:30.500 --> 01:05:30.820
focused

01:05:30.820 --> 01:05:30.980
on

01:05:30.980 --> 01:05:31.140
making

01:05:31.140 --> 01:05:31.340
sure

01:05:31.340 --> 01:05:31.480
that

01:05:31.480 --> 01:05:31.680
data

01:05:31.680 --> 01:05:32.040
science

01:05:32.040 --> 01:05:32.460
libraries

01:05:32.460 --> 01:05:33.280
work

01:05:33.280 --> 01:05:33.400
in

01:05:33.400 --> 01:05:33.540
this

01:05:33.540 --> 01:05:33.960
situation

01:05:33.960 --> 01:05:34.320
yes

01:05:34.320 --> 01:05:34.980
I think

01:05:34.980 --> 01:05:35.180
that

01:05:35.180 --> 01:05:35.520
is

01:05:35.520 --> 01:05:36.240
one

01:05:36.240 --> 01:05:36.420
of

01:05:36.420 --> 01:05:36.600
the

01:05:36.600 --> 01:05:37.120
main

01:05:37.120 --> 01:05:37.480
things

01:05:37.480 --> 01:05:37.780
that

01:05:37.780 --> 01:05:38.640
made

01:05:38.640 --> 01:05:39.160
high

01:05:39.160 --> 01:05:39.320
dive

01:05:39.320 --> 01:05:39.980
successful

01:05:39.980 --> 01:05:40.660
because

01:05:40.660 --> 01:05:41.640
a lot

01:05:41.640 --> 01:05:41.760
of

01:05:41.760 --> 01:05:41.960
times

01:05:41.960 --> 01:05:42.120
you

01:05:42.120 --> 01:05:42.320
would

01:05:42.320 --> 01:05:42.740
support

01:05:42.740 --> 01:05:42.980
just

01:05:42.980 --> 01:05:43.220
the

01:05:43.220 --> 01:05:43.500
language

01:05:43.500 --> 01:05:44.000
itself

01:05:44.000 --> 01:05:44.540
and

01:05:44.540 --> 01:05:44.800
then

01:05:44.800 --> 01:05:45.240
when

01:05:45.240 --> 01:05:45.380
you

01:05:45.380 --> 01:05:45.580
want

01:05:45.580 --> 01:05:45.680
to

01:05:45.680 --> 01:05:46.020
support

01:05:46.020 --> 01:05:46.660
more

01:05:46.660 --> 01:05:47.140
complex

01:05:47.140 --> 01:05:47.360
use

01:05:47.360 --> 01:05:47.660
cases

01:05:47.660 --> 01:05:48.020
like

01:05:48.020 --> 01:05:48.920
C

01:05:48.920 --> 01:05:49.380
dependencies

01:05:49.380 --> 01:05:49.620
you

01:05:49.620 --> 01:05:49.720
are

01:05:49.720 --> 01:05:49.880
too

01:05:49.880 --> 01:05:50.140
far

01:05:50.140 --> 01:05:50.260
in

01:05:50.260 --> 01:05:50.360
the

01:05:50.360 --> 01:05:50.640
process

01:05:50.640 --> 01:05:50.920
of

01:05:50.920 --> 01:05:51.360
your

01:05:51.360 --> 01:05:51.760
implementation

01:05:51.760 --> 01:05:52.200
and

01:05:52.200 --> 01:05:52.340
then

01:05:52.340 --> 01:05:52.440
you

01:05:52.440 --> 01:05:52.500
are

01:05:52.500 --> 01:05:52.660
like

01:05:52.660 --> 01:05:52.960
oh

01:05:52.960 --> 01:05:53.600
now

01:05:53.600 --> 01:05:53.720
we

01:05:53.720 --> 01:05:53.880
have

01:05:53.880 --> 01:05:54.000
to

01:05:54.000 --> 01:05:54.340
rewrite

01:05:54.340 --> 01:05:54.700
half

01:05:54.700 --> 01:05:54.840
of

01:05:54.840 --> 01:05:54.980
the

01:05:54.980 --> 01:05:55.200
code

01:05:55.200 --> 01:05:55.320
to

01:05:55.320 --> 01:05:55.800
refactor

01:05:55.800 --> 01:05:56.180
to

01:05:56.180 --> 01:05:56.480
account

01:05:56.480 --> 01:05:56.940
for

01:05:56.940 --> 01:05:57.760
a lot

01:05:57.760 --> 01:05:57.860
of

01:05:57.860 --> 01:05:57.980
the

01:05:57.980 --> 01:05:58.420
complexities

01:05:58.420 --> 01:05:58.880
yeah

01:05:58.880 --> 01:05:59.020
we

01:05:59.020 --> 01:05:59.340
got to

01:05:59.340 --> 01:06:00.020
backfill

01:06:00.020 --> 01:06:00.140
it

01:06:00.140 --> 01:06:00.260
so

01:06:00.260 --> 01:06:00.380
we

01:06:00.380 --> 01:06:00.540
have

01:06:00.540 --> 01:06:00.880
support

01:06:00.880 --> 01:06:01.040
for

01:06:01.040 --> 01:06:01.220
all

01:06:01.220 --> 01:06:01.440
these

01:06:01.440 --> 01:06:01.680
things

01:06:01.680 --> 01:06:01.880
how

01:06:01.880 --> 01:06:02.000
are

01:06:02.000 --> 01:06:02.080
we

01:06:02.080 --> 01:06:02.180
going

01:06:02.180 --> 01:06:02.260
to

01:06:02.260 --> 01:06:02.420
write

01:06:02.420 --> 01:06:02.540
our

01:06:02.540 --> 01:06:02.640
own

01:06:02.640 --> 01:06:02.980
numpy

01:06:02.980 --> 01:06:03.260
now

01:06:03.260 --> 01:06:03.400
or

01:06:03.400 --> 01:06:03.660
something

01:06:03.660 --> 01:06:04.140
right

01:06:04.140 --> 01:06:04.540
yeah

01:06:04.540 --> 01:06:04.900
and

01:06:04.900 --> 01:06:05.080
C

01:06:05.080 --> 01:06:05.400
extensions

01:06:05.400 --> 01:06:05.700
are

01:06:05.700 --> 01:06:06.100
always

01:06:06.100 --> 01:06:06.640
the

01:06:06.640 --> 01:06:07.000
place

01:06:07.000 --> 01:06:07.260
where

01:06:07.260 --> 01:06:07.620
most

01:06:07.620 --> 01:06:08.100
projects

01:06:08.100 --> 01:06:08.360
have

01:06:08.360 --> 01:06:08.480
a

01:06:08.480 --> 01:06:08.660
hard

01:06:08.660 --> 01:06:09.240
time

01:06:09.240 --> 01:06:09.460
right

01:06:09.460 --> 01:06:09.660
like

01:06:09.660 --> 01:06:10.220
historically

01:06:10.220 --> 01:06:11.000
the

01:06:11.000 --> 01:06:11.280
different

01:06:11.280 --> 01:06:11.940
implementations

01:06:11.940 --> 01:06:12.280
of

01:06:12.280 --> 01:06:12.880
python

01:06:12.880 --> 01:06:13.560
and

01:06:13.560 --> 01:06:14.280
dotnet

01:06:14.280 --> 01:06:14.680
or

01:06:14.680 --> 01:06:15.340
pipi

01:06:15.340 --> 01:06:15.820
or

01:06:15.820 --> 01:06:16.500
others

01:06:16.500 --> 01:06:17.340
C

01:06:17.340 --> 01:06:17.980
extensions

01:06:17.980 --> 01:06:18.400
has always

01:06:18.400 --> 01:06:18.600
been

01:06:18.600 --> 01:06:18.800
like

01:06:18.800 --> 01:06:18.960
the

01:06:18.960 --> 01:06:19.280
trouble

01:06:19.280 --> 01:06:19.920
kid

01:06:19.920 --> 01:06:20.260
it

01:06:20.260 --> 01:06:20.740
definitely

01:06:20.740 --> 01:06:21.020
is

01:06:21.020 --> 01:06:21.260
it's

01:06:21.260 --> 01:06:21.580
also

01:06:21.580 --> 01:06:22.040
tricky

01:06:22.040 --> 01:06:22.240
for

01:06:22.240 --> 01:06:24.120
thinking

01:06:24.120 --> 01:06:24.380
about

01:06:24.380 --> 01:06:24.740
reference

01:06:24.740 --> 01:06:25.040
counting

01:06:25.040 --> 01:06:25.340
versus

01:06:25.340 --> 01:06:25.760
other

01:06:25.760 --> 01:06:26.500
collection

01:06:26.500 --> 01:06:27.200
cleanup

01:06:27.200 --> 01:06:27.440
tie

01:06:27.440 --> 01:06:27.880
yeah

01:06:27.880 --> 01:06:28.260
it's

01:06:28.260 --> 01:06:28.400
an

01:06:28.400 --> 01:06:28.740
important

01:06:28.740 --> 01:06:29.160
boundary

01:06:29.160 --> 01:06:29.500
to be

01:06:29.500 --> 01:06:29.720
aware

01:06:29.720 --> 01:06:29.920
of

01:06:29.920 --> 01:06:30.080
but

01:06:30.080 --> 01:06:30.240
it's

01:06:30.240 --> 01:06:30.420
also

01:06:30.420 --> 01:06:30.800
really

01:06:30.800 --> 01:06:31.220
been

01:06:31.220 --> 01:06:31.400
a lot

01:06:31.400 --> 01:06:31.640
all right

01:06:31.640 --> 01:06:32.080
final

01:06:32.080 --> 01:06:32.600
final thing

01:06:32.600 --> 01:06:32.800
let's

01:06:32.800 --> 01:06:33.180
just wrap

01:06:33.180 --> 01:06:33.500
this up

01:06:33.500 --> 01:06:33.700
with

01:06:33.700 --> 01:06:34.680
what's

01:06:34.680 --> 01:06:34.940
next

01:06:34.940 --> 01:06:35.160
where

01:06:35.160 --> 01:06:35.240
you

01:06:35.240 --> 01:06:35.500
going

01:06:35.500 --> 01:06:35.820
so

01:06:35.820 --> 01:06:36.420
I

01:06:36.420 --> 01:06:36.720
think

01:06:36.720 --> 01:06:37.260
I

01:06:37.260 --> 01:06:37.840
hinted

01:06:37.840 --> 01:06:38.040
at

01:06:38.040 --> 01:06:38.340
a lot

01:06:38.340 --> 01:06:38.880
of

01:06:38.880 --> 01:06:39.340
those

01:06:39.340 --> 01:06:40.300
I

01:06:40.300 --> 01:06:40.540
think

01:06:40.540 --> 01:06:40.740
the

01:06:40.740 --> 01:06:40.980
main

01:06:40.980 --> 01:06:41.220
thing

01:06:41.220 --> 01:06:41.460
for

01:06:41.460 --> 01:06:41.680
us

01:06:41.680 --> 01:06:41.920
in

01:06:41.920 --> 01:06:42.040
the

01:06:42.040 --> 01:06:42.280
immediate

01:06:42.280 --> 01:06:42.720
future

01:06:42.720 --> 01:06:43.060
is

01:06:43.060 --> 01:06:43.340
really

01:06:43.340 --> 01:06:43.760
to

01:06:43.760 --> 01:06:44.480
work

01:06:44.480 --> 01:06:44.660
with

01:06:44.660 --> 01:06:44.780
the

01:06:44.780 --> 01:06:45.160
community

01:06:45.160 --> 01:06:46.040
and

01:06:46.040 --> 01:06:46.760
build up

01:06:46.760 --> 01:06:47.000
more

01:06:47.000 --> 01:06:47.480
of that

01:06:47.480 --> 01:06:48.320
side

01:06:48.320 --> 01:06:48.480
of

01:06:48.480 --> 01:06:48.820
things

01:06:48.820 --> 01:06:49.380
and

01:06:49.380 --> 01:06:49.780
then

01:06:49.780 --> 01:06:50.600
also

01:06:50.600 --> 01:06:51.080
work

01:06:51.080 --> 01:06:51.260
on

01:06:51.260 --> 01:06:51.680
documentation

01:06:51.680 --> 01:06:52.220
to

01:06:52.220 --> 01:06:52.540
put

01:06:52.540 --> 01:06:52.800
out

01:06:52.800 --> 01:06:53.280
the

01:06:53.280 --> 01:06:53.660
vision

01:06:53.660 --> 01:06:54.260
and

01:06:54.260 --> 01:06:54.920
what's

01:06:54.920 --> 01:06:55.300
next

01:06:55.300 --> 01:06:55.780
there

01:06:55.780 --> 01:06:55.940
are

01:06:55.940 --> 01:06:56.400
a bunch

01:06:56.400 --> 01:06:56.540
of

01:06:56.540 --> 01:06:56.760
things

01:06:56.760 --> 01:06:56.900
that

01:06:56.900 --> 01:06:57.040
are

01:06:57.040 --> 01:06:57.300
really

01:06:57.300 --> 01:06:57.640
interesting

01:06:57.640 --> 01:06:57.840
that

01:06:57.840 --> 01:06:58.020
we

01:06:58.020 --> 01:06:58.360
will

01:06:58.360 --> 01:06:58.500
be

01:06:58.500 --> 01:06:58.740
looking

01:06:58.740 --> 01:06:59.140
at

01:06:59.140 --> 01:06:59.740
a

01:06:59.740 --> 01:07:00.440
reactive

01:07:00.440 --> 01:07:01.500
layer

01:07:01.500 --> 01:07:01.940
or

01:07:01.940 --> 01:07:02.420
components

01:07:02.420 --> 01:07:02.660
to

01:07:02.660 --> 01:07:03.060
interact

01:07:03.060 --> 01:07:03.280
with

01:07:03.280 --> 01:07:03.460
each

01:07:03.460 --> 01:07:03.740
other

01:07:03.740 --> 01:07:04.020
and

01:07:04.020 --> 01:07:04.460
notify

01:07:04.460 --> 01:07:05.120
each

01:07:05.120 --> 01:07:05.440
other

01:07:05.440 --> 01:07:06.000
the

01:07:06.000 --> 01:07:06.440
story

01:07:06.440 --> 01:07:06.820
around

01:07:06.820 --> 01:07:07.200
data

01:07:07.200 --> 01:07:07.920
and

01:07:07.920 --> 01:07:08.800
how

01:07:08.800 --> 01:07:09.060
does

01:07:09.060 --> 01:07:09.580
working

01:07:09.580 --> 01:07:09.900
with

01:07:09.900 --> 01:07:10.220
data

01:07:10.220 --> 01:07:10.480
look

01:07:10.480 --> 01:07:10.800
like

01:07:10.800 --> 01:07:11.100
in

01:07:11.100 --> 01:07:11.920
PyScript

01:07:11.920 --> 01:07:12.780
a lot

01:07:12.780 --> 01:07:12.920
of

01:07:12.920 --> 01:07:13.300
development

01:07:13.300 --> 01:07:13.820
around

01:07:13.820 --> 01:07:14.400
the

01:07:14.400 --> 01:07:14.860
possibilities

01:07:14.860 --> 01:07:15.220
of

01:07:15.220 --> 01:07:15.780
using

01:07:15.780 --> 01:07:16.240
PyScript

01:07:16.240 --> 01:07:17.200
in

01:07:17.200 --> 01:07:17.740
a

01:07:17.740 --> 01:07:18.960
peer-to-peer

01:07:18.960 --> 01:07:19.240
or

01:07:19.240 --> 01:07:19.500
web

01:07:19.500 --> 01:07:19.820
three

01:07:19.820 --> 01:07:20.260
sort

01:07:20.260 --> 01:07:20.340
of

01:07:20.340 --> 01:07:20.740
scenario

01:07:20.740 --> 01:07:21.320
right

01:07:21.320 --> 01:07:21.960
what

01:07:21.960 --> 01:07:22.160
can

01:07:22.160 --> 01:07:22.300
we

01:07:22.300 --> 01:07:22.500
make

01:07:22.500 --> 01:07:22.840
to

01:07:22.840 --> 01:07:23.660
support

01:07:23.660 --> 01:07:24.380
applications

01:07:24.380 --> 01:07:25.060
talking

01:07:25.060 --> 01:07:25.220
to

01:07:25.220 --> 01:07:25.360
each

01:07:25.360 --> 01:07:25.520
other

01:07:25.520 --> 01:07:26.000
directly

01:07:26.000 --> 01:07:26.580
or

01:07:26.580 --> 01:07:27.120
you

01:07:27.120 --> 01:07:27.260
know

01:07:27.260 --> 01:07:27.800
using

01:07:27.800 --> 01:07:28.100
a

01:07:28.100 --> 01:07:28.320
mode

01:07:28.320 --> 01:07:28.520
where

01:07:28.520 --> 01:07:28.720
you

01:07:28.720 --> 01:07:28.960
work

01:07:28.960 --> 01:07:29.440
offline

01:07:29.440 --> 01:07:29.620
and

01:07:29.620 --> 01:07:30.100
online

01:07:30.100 --> 01:07:30.500
and

01:07:30.500 --> 01:07:30.620
you

01:07:30.620 --> 01:07:30.920
can

01:07:30.920 --> 01:07:31.420
you

01:07:31.420 --> 01:07:31.560
know

01:07:31.560 --> 01:07:31.880
make

01:07:31.880 --> 01:07:32.080
the

01:07:32.080 --> 01:07:32.540
experience

01:07:32.540 --> 01:07:33.000
better

01:07:33.000 --> 01:07:33.340
right

01:07:33.340 --> 01:07:33.500
like

01:07:33.500 --> 01:07:33.680
a

01:07:33.680 --> 01:07:33.800
little

01:07:33.800 --> 01:07:33.940
bit

01:07:33.940 --> 01:07:34.040
of

01:07:34.040 --> 01:07:34.140
a

01:07:34.140 --> 01:07:34.500
progressive

01:07:34.500 --> 01:07:34.780
web

01:07:34.780 --> 01:07:35.280
type

01:07:35.280 --> 01:07:35.800
of

01:07:35.800 --> 01:07:36.260
thing

01:07:36.260 --> 01:07:36.800
yeah

01:07:36.800 --> 01:07:37.100
yeah

01:07:37.100 --> 01:07:37.420
yeah

01:07:37.420 --> 01:07:38.200
I'd be

01:07:38.200 --> 01:07:38.460
super

01:07:38.460 --> 01:07:38.720
excited

01:07:38.720 --> 01:07:38.960
to see

01:07:38.960 --> 01:07:39.120
that

01:07:39.120 --> 01:07:39.300
come

01:07:39.300 --> 01:07:39.500
along

01:07:39.500 --> 01:07:39.800
yeah

01:07:39.800 --> 01:07:40.480
honestly

01:07:40.480 --> 01:07:41.440
one of

01:07:41.440 --> 01:07:41.680
the

01:07:41.680 --> 01:07:42.380
difficulties

01:07:42.380 --> 01:07:42.780
with

01:07:42.780 --> 01:07:43.160
this

01:07:43.160 --> 01:07:43.500
project

01:07:43.500 --> 01:07:44.020
is that

01:07:44.020 --> 01:07:45.000
it breaks

01:07:45.000 --> 01:07:45.780
so many

01:07:45.780 --> 01:07:46.220
patterns

01:07:46.220 --> 01:07:46.900
that we

01:07:46.900 --> 01:07:47.280
are used

01:07:47.280 --> 01:07:47.560
to

01:07:47.560 --> 01:07:48.000
you know

01:07:48.000 --> 01:07:48.560
both like

01:07:48.560 --> 01:07:48.860
oh I'm

01:07:48.860 --> 01:07:49.280
running my

01:07:49.280 --> 01:07:49.660
thing on

01:07:49.660 --> 01:07:50.140
my machine

01:07:50.140 --> 01:07:50.800
or in a

01:07:50.800 --> 01:07:51.040
server

01:07:51.040 --> 01:07:52.040
or I'm

01:07:52.040 --> 01:07:52.380
doing a

01:07:52.380 --> 01:07:52.660
web

01:07:52.660 --> 01:07:53.500
it means

01:07:53.500 --> 01:07:53.820
okay

01:07:53.820 --> 01:07:54.320
it means

01:07:54.320 --> 01:07:54.800
that I always

01:07:54.800 --> 01:07:55.160
have a

01:07:55.160 --> 01:07:55.480
server

01:07:55.480 --> 01:07:55.800
and a

01:07:55.800 --> 01:07:56.520
client side

01:07:56.520 --> 01:07:57.280
they have

01:07:57.280 --> 01:07:57.820
the network

01:07:57.820 --> 01:07:58.280
in between

01:07:58.280 --> 01:07:59.480
now

01:07:59.480 --> 01:08:00.160
we're

01:08:00.160 --> 01:08:00.520
shifting

01:08:00.520 --> 01:08:01.180
the

01:08:01.180 --> 01:08:01.720
paradigms

01:08:01.720 --> 01:08:02.460
and a

01:08:02.460 --> 01:08:02.860
lot of

01:08:02.860 --> 01:08:03.440
things are

01:08:03.440 --> 01:08:03.720
new

01:08:03.720 --> 01:08:04.240
so we

01:08:04.240 --> 01:08:04.380
can

01:08:04.380 --> 01:08:04.880
explore

01:08:04.880 --> 01:08:05.540
right

01:08:05.540 --> 01:08:06.160
the other

01:08:06.160 --> 01:08:06.500
thing

01:08:06.500 --> 01:08:07.420
that we're

01:08:07.420 --> 01:08:07.940
looking at

01:08:07.940 --> 01:08:08.220
well

01:08:08.220 --> 01:08:09.420
better support

01:08:09.420 --> 01:08:10.460
for the

01:08:10.460 --> 01:08:11.160
optimization

01:08:11.160 --> 01:08:12.480
loading times

01:08:12.480 --> 01:08:13.020
all of

01:08:13.020 --> 01:08:13.540
those things

01:08:13.540 --> 01:08:14.420
how can

01:08:14.420 --> 01:08:14.640
you

01:08:14.640 --> 01:08:15.180
can you

01:08:15.180 --> 01:08:15.360
hold

01:08:15.360 --> 01:08:15.880
state

01:08:15.880 --> 01:08:16.300
of your

01:08:16.300 --> 01:08:16.780
application

01:08:16.780 --> 01:08:17.920
so basically

01:08:17.920 --> 01:08:18.940
as it's

01:08:18.940 --> 01:08:19.280
it's

01:08:19.280 --> 01:08:19.560
it's

01:08:19.560 --> 01:08:19.920
running

01:08:19.920 --> 01:08:20.360
etc

01:08:20.360 --> 01:08:20.940
or if

01:08:20.940 --> 01:08:21.060
you

01:08:21.060 --> 01:08:21.660
just have

01:08:21.660 --> 01:08:21.900
a

01:08:21.900 --> 01:08:22.340
notebook

01:08:22.340 --> 01:08:22.900
like

01:08:22.900 --> 01:08:23.320
sort

01:08:23.320 --> 01:08:23.660
of

01:08:23.660 --> 01:08:24.260
workflow

01:08:24.260 --> 01:08:25.060
how can

01:08:25.060 --> 01:08:25.540
you save

01:08:25.540 --> 01:08:25.980
the state

01:08:25.980 --> 01:08:26.380
of your

01:08:26.380 --> 01:08:26.740
PyScript

01:08:26.740 --> 01:08:27.200
app

01:08:27.200 --> 01:08:27.680
and share

01:08:27.680 --> 01:08:28.280
with others

01:08:28.280 --> 01:08:28.980
and they

01:08:28.980 --> 01:08:29.860
can start

01:08:29.860 --> 01:08:30.500
from the

01:08:30.500 --> 01:08:30.840
same point

01:08:30.840 --> 01:08:31.200
you were

01:08:31.200 --> 01:08:31.840
okay

01:08:31.840 --> 01:08:32.380
those are

01:08:32.380 --> 01:08:32.980
all great

01:08:32.980 --> 01:08:33.760
things to be

01:08:33.760 --> 01:08:34.420
working towards

01:08:34.420 --> 01:08:35.200
is this

01:08:35.200 --> 01:08:35.960
tying in

01:08:35.960 --> 01:08:36.420
any way

01:08:36.420 --> 01:08:36.740
to

01:08:36.740 --> 01:08:37.520
Jupyter

01:08:37.520 --> 01:08:37.840
Lite

01:08:37.840 --> 01:08:38.780
and it's

01:08:38.780 --> 01:08:39.580
got similar

01:08:39.580 --> 01:08:40.180
goals

01:08:40.180 --> 01:08:40.960
I'm not sure

01:08:40.960 --> 01:08:41.260
if it has

01:08:41.260 --> 01:08:41.800
any similar

01:08:41.800 --> 01:08:42.340
foundations

01:08:42.340 --> 01:08:42.880
or anything

01:08:42.880 --> 01:08:43.300
maybe

01:08:43.300 --> 01:08:44.240
I'm very

01:08:44.240 --> 01:08:44.860
familiar with

01:08:44.860 --> 01:08:45.800
the Jupyter

01:08:45.800 --> 01:08:46.700
folks

01:08:46.700 --> 01:08:47.300
I work

01:08:47.300 --> 01:08:48.120
together

01:08:48.120 --> 01:08:48.700
with many

01:08:48.700 --> 01:08:49.020
of the

01:08:49.020 --> 01:08:49.200
core

01:08:49.200 --> 01:08:49.620
developers

01:08:49.620 --> 01:08:50.240
and

01:08:50.240 --> 01:08:51.000
historically

01:08:51.000 --> 01:08:51.920
Jupyter

01:08:51.920 --> 01:08:52.100
Lite

01:08:52.100 --> 01:08:52.480
is a

01:08:52.480 --> 01:08:52.740
great

01:08:52.740 --> 01:08:53.420
project

01:08:53.420 --> 01:08:53.880
that

01:08:53.880 --> 01:08:54.360
basically

01:08:54.360 --> 01:08:55.520
implements

01:08:55.520 --> 01:08:56.000
the

01:08:56.000 --> 01:08:56.400
Jupyter

01:08:56.400 --> 01:08:56.980
notebooks

01:08:56.980 --> 01:08:57.940
using

01:08:57.940 --> 01:08:58.780
Pyodide

01:08:58.780 --> 01:08:59.280
as a

01:08:59.280 --> 01:08:59.660
runtime

01:08:59.660 --> 01:09:00.280
or

01:09:00.280 --> 01:09:01.300
a

01:09:01.300 --> 01:09:01.680
shell

01:09:01.680 --> 01:09:02.080
yeah

01:09:02.080 --> 01:09:02.420
so

01:09:02.420 --> 01:09:02.620
it's

01:09:02.620 --> 01:09:02.800
not

01:09:02.800 --> 01:09:03.180
that

01:09:03.180 --> 01:09:03.560
far

01:09:03.560 --> 01:09:03.940
out

01:09:03.940 --> 01:09:04.200
of

01:09:04.200 --> 01:09:04.420
being

01:09:04.420 --> 01:09:04.620
maybe

01:09:04.620 --> 01:09:04.720
in

01:09:04.720 --> 01:09:04.840
a

01:09:04.840 --> 01:09:05.360
similar

01:09:05.360 --> 01:09:05.980
space

01:09:05.980 --> 01:09:06.260
but

01:09:06.260 --> 01:09:06.740
right

01:09:06.740 --> 01:09:07.000
yeah

01:09:07.000 --> 01:09:07.600
it's

01:09:07.600 --> 01:09:08.080
similar in

01:09:08.080 --> 01:09:08.240
that

01:09:08.240 --> 01:09:08.880
sense

01:09:08.880 --> 01:09:09.440
that

01:09:09.440 --> 01:09:10.380
it ties

01:09:10.380 --> 01:09:11.760
right into

01:09:11.760 --> 01:09:12.440
the Jupyter

01:09:12.440 --> 01:09:13.080
experience

01:09:13.080 --> 01:09:13.720
so it

01:09:13.720 --> 01:09:14.000
has

01:09:14.000 --> 01:09:14.360
it's

01:09:14.360 --> 01:09:14.840
locked

01:09:14.840 --> 01:09:15.240
into

01:09:15.240 --> 01:09:15.480
the

01:09:15.480 --> 01:09:15.780
notebook

01:09:15.780 --> 01:09:16.340
flow

01:09:16.340 --> 01:09:17.260
and

01:09:17.260 --> 01:09:17.860
altering

01:09:17.860 --> 01:09:18.500
notebooks

01:09:18.500 --> 01:09:18.920
and stuff

01:09:18.920 --> 01:09:19.660
like that

01:09:19.660 --> 01:09:20.240
where

01:09:20.240 --> 01:09:20.940
PyScript

01:09:20.940 --> 01:09:21.620
is more

01:09:21.620 --> 01:09:22.500
has a

01:09:22.500 --> 01:09:23.140
larger scope

01:09:23.140 --> 01:09:24.020
and it's

01:09:24.020 --> 01:09:24.480
really to

01:09:24.480 --> 01:09:25.060
author

01:09:25.060 --> 01:09:25.780
applications

01:09:25.780 --> 01:09:26.320
sure

01:09:26.320 --> 01:09:26.840
a little

01:09:26.840 --> 01:09:27.140
different

01:09:27.140 --> 01:09:27.480
okay

01:09:27.480 --> 01:09:28.080
very

01:09:28.080 --> 01:09:28.460
interesting

01:09:28.460 --> 01:09:29.240
all right

01:09:29.240 --> 01:09:29.580
well

01:09:29.580 --> 01:09:30.400
congratulations

01:09:30.400 --> 01:09:30.840
this seems

01:09:30.840 --> 01:09:31.260
like a pretty

01:09:31.260 --> 01:09:32.020
promising project

01:09:32.020 --> 01:09:32.640
and I know

01:09:32.640 --> 01:09:33.160
there's a lot of

01:09:33.160 --> 01:09:34.000
interest in it

01:09:34.000 --> 01:09:34.520
let me close it

01:09:34.520 --> 01:09:34.980
out with a

01:09:34.980 --> 01:09:35.640
comment from the

01:09:35.640 --> 01:09:36.020
audience

01:09:36.020 --> 01:09:36.760
Andre

01:09:36.760 --> 01:09:37.240
Muller

01:09:37.240 --> 01:09:37.760
said

01:09:37.760 --> 01:09:38.760
I tried

01:09:38.760 --> 01:09:39.180
Jinja

01:09:39.180 --> 01:09:40.360
the Jinja

01:09:40.360 --> 01:09:40.680
wheel

01:09:40.680 --> 01:09:41.180
just

01:09:41.180 --> 01:09:42.080
straight up

01:09:42.080 --> 01:09:42.660
with PyScript

01:09:42.660 --> 01:09:43.600
and it works

01:09:43.600 --> 01:09:44.380
straight away

01:09:44.380 --> 01:09:44.920
like no

01:09:44.920 --> 01:09:45.360
changes

01:09:45.360 --> 01:09:46.640
so that's

01:09:46.640 --> 01:09:47.340
that's kind

01:09:47.340 --> 01:09:47.680
of meta

01:09:47.680 --> 01:09:48.140
actually

01:09:48.140 --> 01:09:48.460
that's

01:09:48.460 --> 01:09:48.940
Jinja

01:09:48.940 --> 01:09:50.000
within PyScript

01:09:50.000 --> 01:09:51.080
within HTML

01:09:51.080 --> 01:09:52.160
love it

01:09:52.160 --> 01:09:52.460
yeah

01:09:52.460 --> 01:09:52.980
awesome

01:09:52.980 --> 01:09:53.500
all right

01:09:53.500 --> 01:09:54.180
well let me ask you

01:09:54.180 --> 01:09:54.560
the final two

01:09:54.560 --> 01:09:55.280
questions before

01:09:55.280 --> 01:09:55.800
we get out

01:09:55.800 --> 01:09:56.180
of here

01:09:56.180 --> 01:09:56.820
if you're

01:09:56.820 --> 01:09:57.260
gonna write

01:09:57.260 --> 01:09:57.840
some Python

01:09:57.840 --> 01:09:58.140
code

01:09:58.140 --> 01:09:58.640
what editor

01:09:58.640 --> 01:09:59.360
are you doing

01:09:59.360 --> 01:10:00.020
using these

01:10:00.020 --> 01:10:00.240
days

01:10:00.240 --> 01:10:01.720
I'm usually

01:10:01.720 --> 01:10:02.080
a mix

01:10:02.080 --> 01:10:02.620
between

01:10:02.620 --> 01:10:03.440
VS Code

01:10:03.440 --> 01:10:04.200
or PyCharm

01:10:04.200 --> 01:10:04.660
all right

01:10:04.660 --> 01:10:04.880
cool

01:10:04.880 --> 01:10:05.440
yeah

01:10:05.440 --> 01:10:06.260
both good

01:10:06.260 --> 01:10:06.900
and

01:10:06.900 --> 01:10:08.220
notable

01:10:08.220 --> 01:10:09.440
PyPI package

01:10:09.440 --> 01:10:10.300
or you know

01:10:10.300 --> 01:10:10.820
some other

01:10:10.820 --> 01:10:11.440
kind of maybe

01:10:11.440 --> 01:10:11.960
it doesn't come

01:10:11.960 --> 01:10:12.300
quite off

01:10:12.300 --> 01:10:12.680
PyPI

01:10:12.680 --> 01:10:13.240
maybe it comes

01:10:13.240 --> 01:10:13.900
off a CDN

01:10:13.900 --> 01:10:14.380
these days

01:10:14.380 --> 01:10:15.140
PyScript

01:10:15.140 --> 01:10:15.780
obviously

01:10:15.780 --> 01:10:16.580
what do you

01:10:16.580 --> 01:10:16.900
want to give a

01:10:16.900 --> 01:10:17.320
shout out to

01:10:17.320 --> 01:10:18.100
gave a lot

01:10:18.100 --> 01:10:18.740
of shout outs

01:10:18.740 --> 01:10:19.300
to Pyodide

01:10:19.300 --> 01:10:20.300
once again

01:10:20.300 --> 01:10:21.160
it's a great

01:10:21.160 --> 01:10:21.700
project

01:10:21.700 --> 01:10:22.440
I think

01:10:22.440 --> 01:10:24.280
I use

01:10:24.280 --> 01:10:25.060
notebooks

01:10:25.060 --> 01:10:26.160
and the whole

01:10:26.160 --> 01:10:26.600
Jupyter

01:10:26.600 --> 01:10:27.320
ecosystem

01:10:27.320 --> 01:10:27.880
a lot

01:10:27.880 --> 01:10:28.400
as well

01:10:28.400 --> 01:10:29.000
the whole

01:10:29.000 --> 01:10:29.460
scientific

01:10:29.460 --> 01:10:29.980
stack

01:10:29.980 --> 01:10:30.640
and a lot

01:10:30.640 --> 01:10:30.980
of the things

01:10:30.980 --> 01:10:31.880
that are

01:10:31.880 --> 01:10:32.440
around

01:10:32.440 --> 01:10:33.060
you know

01:10:33.060 --> 01:10:33.600
the many

01:10:33.600 --> 01:10:34.380
interesting

01:10:34.380 --> 01:10:34.860
projects

01:10:34.860 --> 01:10:35.340
like

01:10:35.340 --> 01:10:35.880
you know

01:10:35.880 --> 01:10:36.440
NumPy

01:10:36.440 --> 01:10:37.260
Pandas

01:10:37.260 --> 01:10:38.420
Dask

01:10:38.420 --> 01:10:39.540
the Bokeh

01:10:39.540 --> 01:10:39.940
Numba

01:10:39.940 --> 01:10:41.020
a lot of

01:10:41.020 --> 01:10:41.840
that ecosystem

01:10:41.840 --> 01:10:42.700
is really

01:10:42.700 --> 01:10:43.900
in my day-to-day

01:10:43.900 --> 01:10:44.460
kind of

01:10:44.460 --> 01:10:44.920
workflow

01:10:44.920 --> 01:10:45.240
yeah

01:10:45.240 --> 01:10:45.700
fantastic

01:10:45.700 --> 01:10:46.020
yeah

01:10:46.020 --> 01:10:46.440
well cool

01:10:46.440 --> 01:10:47.260
all right

01:10:47.260 --> 01:10:47.860
well

01:10:47.860 --> 01:10:48.480
once again

01:10:48.480 --> 01:10:49.060
congratulations

01:10:49.060 --> 01:10:50.460
on all the

01:10:50.460 --> 01:10:51.300
interest

01:10:51.300 --> 01:10:51.860
and excitement

01:10:51.860 --> 01:10:52.900
it's

01:10:52.900 --> 01:10:53.600
it's really

01:10:53.600 --> 01:10:54.060
taken off

01:10:54.060 --> 01:10:54.440
the last couple

01:10:54.440 --> 01:10:54.660
weeks

01:10:54.660 --> 01:10:54.900
so

01:10:54.900 --> 01:10:55.780
thanks for

01:10:55.780 --> 01:10:56.180
coming on

01:10:56.180 --> 01:10:56.460
the show

01:10:56.460 --> 01:10:56.880
and talking

01:10:56.880 --> 01:10:57.200
about it

01:10:57.200 --> 01:10:57.500
thank you

01:10:57.500 --> 01:10:57.780
so much

01:10:57.780 --> 01:10:58.020
for the

01:10:58.020 --> 01:10:58.400
opportunity

01:10:58.400 --> 01:10:59.340
I had a

01:10:59.340 --> 01:10:59.780
great time

01:10:59.780 --> 01:11:00.300
chatting

01:11:00.300 --> 01:11:00.680
about it

01:11:00.680 --> 01:11:00.820
yeah

01:11:00.820 --> 01:11:01.060
you bet

01:11:01.060 --> 01:11:01.260
and

01:11:01.260 --> 01:11:01.900
final call

01:11:01.900 --> 01:11:02.140
action

01:11:02.140 --> 01:11:02.540
people want

01:11:02.540 --> 01:11:02.680
to get

01:11:02.680 --> 01:11:02.920
started

01:11:02.920 --> 01:11:03.220
what do

01:11:03.220 --> 01:11:03.520
they do

01:11:03.520 --> 01:11:03.920
great

01:11:03.920 --> 01:11:04.280
question

01:11:04.280 --> 01:11:04.740
go to

01:11:04.740 --> 01:11:05.560
pyscript.net

01:11:05.560 --> 01:11:06.280
check the

01:11:06.280 --> 01:11:06.660
website

01:11:06.660 --> 01:11:07.460
we have links

01:11:07.460 --> 01:11:07.920
to the

01:11:07.920 --> 01:11:08.340
repo

01:11:08.340 --> 01:11:09.160
and

01:11:09.160 --> 01:11:09.940
to the

01:11:09.940 --> 01:11:10.220
you have

01:11:10.220 --> 01:11:10.500
very

01:11:10.500 --> 01:11:11.160
interesting

01:11:11.160 --> 01:11:11.720
install

01:11:11.720 --> 01:11:12.380
steps

01:11:12.380 --> 01:11:12.760
here

01:11:12.760 --> 01:11:13.520
right

01:11:13.520 --> 01:11:13.780
and it

01:11:13.780 --> 01:11:14.080
says

01:11:14.080 --> 01:11:15.140
no you don't

01:11:15.140 --> 01:11:15.380
install

01:11:15.380 --> 01:11:16.320
yes

01:11:16.320 --> 01:11:17.380
we hope

01:11:17.380 --> 01:11:17.920
people would

01:11:17.920 --> 01:11:18.280
click

01:11:18.280 --> 01:11:18.680
and actually

01:11:18.680 --> 01:11:19.140
see the

01:11:19.140 --> 01:11:20.220
easter egg

01:11:20.220 --> 01:11:20.920
which was

01:11:20.920 --> 01:11:21.120
good

01:11:21.120 --> 01:11:22.260
and yeah

01:11:22.260 --> 01:11:22.740
you know

01:11:22.740 --> 01:11:23.340
we want to

01:11:23.340 --> 01:11:24.080
really want to be

01:11:24.080 --> 01:11:24.500
inclusive

01:11:24.500 --> 01:11:25.200
community

01:11:25.200 --> 01:11:25.760
so if you have

01:11:25.760 --> 01:11:26.240
questions

01:11:26.240 --> 01:11:27.000
or have

01:11:27.000 --> 01:11:27.540
you want to

01:11:27.540 --> 01:11:28.160
report bugs

01:11:28.160 --> 01:11:28.640
or just

01:11:28.640 --> 01:11:29.340
ask where

01:11:29.340 --> 01:11:30.080
you can help

01:11:30.080 --> 01:11:31.320
just reach out

01:11:31.320 --> 01:11:32.160
either on

01:11:32.160 --> 01:11:32.880
on twitter

01:11:32.880 --> 01:11:33.640
or reach out

01:11:33.640 --> 01:11:34.160
on the repo

01:11:34.160 --> 01:11:34.860
open bugs

01:11:34.860 --> 01:11:35.200
there

01:11:35.200 --> 01:11:35.980
we are

01:11:35.980 --> 01:11:36.660
in the next

01:11:36.660 --> 01:11:37.580
you should expect

01:11:37.580 --> 01:11:38.920
more documentation

01:11:38.920 --> 01:11:40.660
on community

01:11:40.660 --> 01:11:41.100
engagement

01:11:41.100 --> 01:11:42.140
having a

01:11:42.140 --> 01:11:42.820
discussions

01:11:42.820 --> 01:11:43.340
group

01:11:43.340 --> 01:11:44.100
where people

01:11:44.100 --> 01:11:44.520
can actually

01:11:44.520 --> 01:11:45.420
ask questions

01:11:45.420 --> 01:11:46.300
more easily

01:11:46.300 --> 01:11:47.340
we're evaluating

01:11:47.340 --> 01:11:47.980
starting

01:11:47.980 --> 01:11:48.740
bi-weekly

01:11:48.740 --> 01:11:49.080
or something

01:11:49.080 --> 01:11:49.520
like that

01:11:49.520 --> 01:11:49.900
community

01:11:49.900 --> 01:11:50.320
call

01:11:50.320 --> 01:11:50.760
where we

01:11:50.760 --> 01:11:50.960
just

01:11:50.960 --> 01:11:51.740
are there

01:11:51.740 --> 01:11:52.120
for the

01:11:52.120 --> 01:11:52.440
community

01:11:52.440 --> 01:11:52.720
to ask

01:11:52.720 --> 01:11:53.060
questions

01:11:53.060 --> 01:11:53.480
live

01:11:53.480 --> 01:11:53.900
on a

01:11:53.900 --> 01:11:54.100
zoom

01:11:54.100 --> 01:11:54.420
or something

01:11:54.420 --> 01:11:54.900
like this

01:11:54.900 --> 01:11:55.720
so be

01:11:55.720 --> 01:11:56.100
patient

01:11:56.100 --> 01:11:56.900
we're

01:11:56.900 --> 01:11:57.800
getting there

01:11:57.800 --> 01:11:58.620
to support

01:11:58.620 --> 01:11:59.240
our community

01:11:59.240 --> 01:12:00.740
and allow

01:12:00.740 --> 01:12:01.220
people to

01:12:01.220 --> 01:12:01.880
actually contribute

01:12:01.880 --> 01:12:02.160
back

01:12:02.160 --> 01:12:02.360
well

01:12:02.360 --> 01:12:03.340
very exciting

01:12:03.340 --> 01:12:04.240
thanks for

01:12:04.240 --> 01:12:04.580
doing it

01:12:04.580 --> 01:12:04.880
thanks for

01:12:04.880 --> 01:12:05.180
being here

01:12:05.180 --> 01:12:05.600
thank you

01:12:05.600 --> 01:12:08.340
this has

01:12:08.340 --> 01:12:08.720
been another

01:12:08.720 --> 01:12:09.400
episode of

01:12:09.400 --> 01:12:10.060
talk python

01:12:10.060 --> 01:12:10.460
to me

01:12:10.460 --> 01:12:11.480
thank you

01:12:11.480 --> 01:12:11.780
to our

01:12:11.780 --> 01:12:12.260
sponsors

01:12:12.260 --> 01:12:13.060
be sure to

01:12:13.060 --> 01:12:13.320
check out

01:12:13.320 --> 01:12:13.560
what they're

01:12:13.560 --> 01:12:13.880
offering

01:12:13.880 --> 01:12:14.380
it really

01:12:14.380 --> 01:12:14.940
helps support

01:12:14.940 --> 01:12:15.320
the show

01:12:15.320 --> 01:12:16.620
starting a

01:12:16.620 --> 01:12:17.140
business is

01:12:17.140 --> 01:12:17.460
hard

01:12:17.460 --> 01:12:18.460
Microsoft for

01:12:18.460 --> 01:12:18.880
startups

01:12:18.880 --> 01:12:20.060
founders hub

01:12:20.060 --> 01:12:21.020
provides all

01:12:21.020 --> 01:12:21.680
founders at

01:12:21.680 --> 01:12:22.560
any stage with

01:12:22.560 --> 01:12:23.540
free resources

01:12:23.540 --> 01:12:24.360
and connections

01:12:24.360 --> 01:12:25.160
to solve

01:12:25.160 --> 01:12:26.100
startup challenges

01:12:26.100 --> 01:12:27.340
apply for free

01:12:27.340 --> 01:12:28.040
today at

01:12:28.040 --> 01:12:29.240
talk python.fm

01:12:29.240 --> 01:12:30.600
slash founders hub

01:12:30.600 --> 01:12:32.120
want to level up

01:12:32.120 --> 01:12:32.560
your python

01:12:32.560 --> 01:12:33.460
we have one of

01:12:33.460 --> 01:12:33.960
the largest

01:12:33.960 --> 01:12:34.820
catalogs of

01:12:34.820 --> 01:12:35.400
python video

01:12:35.400 --> 01:12:36.000
courses over

01:12:36.000 --> 01:12:36.580
at talk python

01:12:36.580 --> 01:12:37.500
our content

01:12:37.500 --> 01:12:38.280
ranges from

01:12:38.280 --> 01:12:38.880
true beginners

01:12:38.880 --> 01:12:39.620
to deeply

01:12:39.620 --> 01:12:40.380
advanced topics

01:12:40.380 --> 01:12:41.000
like memory

01:12:41.000 --> 01:12:41.740
and async

01:12:41.740 --> 01:12:42.560
and best of

01:12:42.560 --> 01:12:43.160
all there's

01:12:43.160 --> 01:12:43.900
not a subscription

01:12:43.900 --> 01:12:44.420
in sight

01:12:44.420 --> 01:12:45.120
check it out

01:12:45.120 --> 01:12:45.520
for yourself

01:12:45.520 --> 01:12:47.320
at training.talkpython.fm

01:12:47.320 --> 01:12:48.240
be sure to

01:12:48.240 --> 01:12:49.000
subscribe to the

01:12:49.000 --> 01:12:49.800
show open your

01:12:49.800 --> 01:12:50.620
favorite podcast

01:12:50.620 --> 01:12:51.520
app and search

01:12:51.520 --> 01:12:52.000
for python

01:12:52.000 --> 01:12:52.760
we should be

01:12:52.760 --> 01:12:53.100
right at the

01:12:53.100 --> 01:12:54.000
top you can

01:12:54.000 --> 01:12:54.740
also find the

01:12:54.740 --> 01:12:55.380
iTunes feed

01:12:55.380 --> 01:12:55.840
at slash

01:12:55.840 --> 01:12:56.780
iTunes the

01:12:56.780 --> 01:12:57.280
Google Play

01:12:57.280 --> 01:12:57.720
feed at

01:12:57.720 --> 01:12:58.460
/play

01:12:58.460 --> 01:12:59.100
and the

01:12:59.100 --> 01:12:59.800
direct RSS

01:12:59.800 --> 01:13:00.300
feed at

01:13:00.300 --> 01:13:01.200
/rss

01:13:01.200 --> 01:13:02.680
on talkpython.fm

01:13:02.680 --> 01:13:04.280
we're live

01:13:04.280 --> 01:13:05.060
streaming most of

01:13:05.060 --> 01:13:05.560
our recordings

01:13:05.560 --> 01:13:06.100
these days

01:13:06.100 --> 01:13:06.660
if you want

01:13:06.660 --> 01:13:07.020
to be part

01:13:07.020 --> 01:13:07.460
of the show

01:13:07.460 --> 01:13:07.980
and have your

01:13:07.980 --> 01:13:08.720
comments featured

01:13:08.720 --> 01:13:09.500
on the air

01:13:09.500 --> 01:13:10.220
be sure to

01:13:10.220 --> 01:13:10.860
subscribe to

01:13:10.860 --> 01:13:11.260
our YouTube

01:13:11.260 --> 01:13:11.860
channel at

01:13:11.860 --> 01:13:12.960
talkpython.fm

01:13:12.960 --> 01:13:13.880
slash YouTube

01:13:13.880 --> 01:13:15.040
this is your

01:13:15.040 --> 01:13:15.480
host Michael

01:13:15.480 --> 01:13:15.780
Kennedy

01:13:15.780 --> 01:13:16.660
thanks so much

01:13:16.660 --> 01:13:17.060
for listening

01:13:17.060 --> 01:13:17.640
I really

01:13:17.640 --> 01:13:18.260
appreciate it

01:13:18.260 --> 01:13:18.940
now get out

01:13:18.940 --> 01:13:19.400
there and write

01:13:19.400 --> 01:13:19.560
and write some

01:13:19.560 --> 01:13:20.180
Python code

01:13:20.180 --> 01:13:21.180
and write some

01:13:21.180 --> 01:13:21.980
and write some

01:13:21.980 --> 01:13:22.180
things like that.

01:13:22.180 --> 01:13:24.040
and write some

01:13:24.040 --> 01:13:25.160
and write some

01:13:25.160 --> 01:13:26.180
and write some

01:13:26.180 --> 01:13:26.980
things like that.

01:13:26.980 --> 01:13:27.780
And I'll see you next time.

01:13:27.780 --> 01:13:28.100
I'll see you next time.

01:13:28.100 --> 01:13:28.380
Bye.

01:13:28.380 --> 01:13:28.880
Bye.

01:13:28.880 --> 01:13:29.380
Bye.

01:13:29.380 --> 01:13:29.880
Bye.

01:13:29.880 --> 01:13:30.380
Bye.

01:13:30.380 --> 01:13:30.880
Bye.

01:13:30.880 --> 01:13:31.380
Bye.

01:13:31.380 --> 01:13:31.880
Bye.

01:13:31.880 --> 01:13:32.380
Bye.

01:13:32.380 --> 01:13:32.880
Bye.

01:13:32.880 --> 01:13:33.380
Bye.

01:13:33.380 --> 01:13:33.880
Bye.

01:13:33.880 --> 01:13:33.880
Bye.

01:13:33.880 --> 01:13:33.880
Bye.

01:13:33.880 --> 01:13:33.880
Bye.

01:13:33.880 --> 01:13:33.880
Bye.

01:13:33.880 --> 01:13:34.380
Bye.

01:13:34.380 --> 01:13:34.880
Bye.

01:13:34.880 --> 01:13:35.380
Bye.

01:13:35.380 --> 01:13:35.880
Bye.

01:13:35.880 --> 01:13:36.380
Bye.

01:13:36.380 --> 01:13:36.880
Bye.

01:13:36.880 --> 01:13:37.380
you

01:13:37.380 --> 01:13:37.880
you

01:13:37.880 --> 01:13:39.880
Thank you.

01:13:39.880 --> 01:14:09.860
Thank you.

