00:00:00 How well do you know your Python packaging tools?

00:00:02 There are things like pip, which install a project's dependencies and their dependencies and so on.

00:00:07 But in this mix, we also have more modern tools such as Poetry, Flit, Hatch, and others,

00:00:13 and even tools outside of Python itself, which may attempt to manage Python in addition to the libraries.

00:00:20 To make sense of all this, we welcome back Annalena Popkas for an unbiased evaluation of environment and packaging tools in Python.

00:00:29 This is Talk Python to Me, episode 436, recorded September 21st, 2023.

00:00:34 Welcome to Talk Python to Me, a weekly podcast on Python.

00:00:52 This is your host, Michael Kennedy.

00:00:54 Follow me on Mastodon, where I'm @mkennedy and follow the podcast using @talkpython, both on fosstodon.org.

00:01:01 Keep up with the show and listen to over seven years of past episodes at talkpython.fm.

00:01:06 We've started streaming most of our episodes live on YouTube.

00:01:10 Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:18 This episode is brought to you by IRL, an original podcast from Mozilla.

00:01:23 When it comes to artificial intelligence, AI, what's good for trillion dollar companies,

00:01:28 isn't necessarily good for people.

00:01:30 That's the theme of season seven of IRL, Mozilla's multi-award winning podcast hosted by Bridget Todd.

00:01:36 Season seven is all about putting people over profit in AI.

00:01:40 Check them out and listen to an episode at talkpython.fm/IRL.

00:01:44 And it's brought to you by Sentry.

00:01:46 They have a special live event, like a mini online conference, where you can connect with the team

00:01:51 and take a deep dive into different products and services every day for a week.

00:01:56 Join them for launch week, new product releases, exclusive demos, and discussions with experts

00:02:01 from their community on the latest with Sentry.

00:02:04 You'll see how Sentry's latest product updates can make your work life easier.

00:02:08 Visit talkpython.fm/sentry dash launch dash week to register for free.

00:02:14 Hey folks, before we jump into the interview, I want to tell you about a new course we just launched,

00:02:20 Data Science Jumpstart with 10 Projects.

00:02:22 This is written by Matt Harrison, who has years of data science and Python teaching experience.

00:02:27 And he brings his tips and guidance to you across 10 different data sets and projects

00:02:32 in this new three-hour course.

00:02:34 If you want to up your data science game, I encourage you to check it out at talkpython.fm

00:02:38 slash data dash sci dash jumpstart.

00:02:41 I learned a lot from this course, and I'm sure that you will too.

00:02:44 The link is in your podcast player's show notes, so be sure to check it out.

00:02:47 Now, on to that interview.

00:02:49 Anna Lena, welcome back to Talk Python To Me.

00:02:54 It's awesome to have you here.

00:02:55 Thanks for having me again.

00:02:57 It's always good to have you on the show.

00:03:00 We had you on several times before.

00:03:03 We talked about testing and mocking out dependencies in Python.

00:03:08 And the very first time, this is quite a while ago.

00:03:11 Yeah, it was.

00:03:12 Way back in 2018, we talked about the magical universe, 100 days of Python by learning through

00:03:20 Harry Potter themed problems, which is very fun.

00:03:22 I learned so much in that project.

00:03:24 It was really nice.

00:03:25 I can still recommend it to anyone to do this 100 days of code.

00:03:29 It's super fun and super fun.

00:03:30 Let's maybe do a quick catch up before we dive into Python packaging comparisons and positioning.

00:03:38 What have you been up to?

00:03:39 I'm still a machine learning engineer.

00:03:41 I'm in a German company.

00:03:43 I think I was there the last time as well.

00:03:45 It's called InnoVex.

00:03:46 And we do all kinds of machine learning projects with customers.

00:03:51 So I rotate from project to project.

00:03:54 Right now, I'm working at a company called Babbel.

00:03:56 Not sure if you heard of that.

00:03:58 Oh, yeah.

00:03:58 It's really a fantastic company since they enable users to learn new languages.

00:04:02 And I'm working in the speech recognition team, which I like a lot since talking is such an

00:04:07 important part of learning a new language.

00:04:09 And yeah, I'm there as a senior machine learning engineer and helping them build their product,

00:04:15 develop it further.

00:04:16 And I really love it there.

00:04:17 Yeah, that sounds like such a fun problem to be working on.

00:04:20 And machine learning is evolving so quickly, right?

00:04:24 Yeah, especially now with the generative AI.

00:04:27 There's so much going on, so much you can do that it's hard to keep track of what's happening

00:04:32 sometimes.

00:04:32 Yeah, it seems like as soon as you have it figured out, something new comes along.

00:04:36 Are you able to talk about what libraries you're using for that project?

00:04:39 No, I don't think so.

00:04:41 No worries.

00:04:41 I checked before that I'm allowed to say that I work on speech recognition, but that's basically it.

00:04:47 But that's, I'm going to guess it probably has something to do with Python, but we'll

00:04:50 leave it there.

00:04:51 I won't put you on the spot.

00:04:52 Awesome.

00:04:52 So, and that's not a surprise, right?

00:04:54 To say people are doing machine learning with Python.

00:04:56 That's by far the most popular way to do it these days.

00:04:59 Yeah.

00:05:00 Cool.

00:05:01 Well, again, that sounds like a super fun thing to be working on right on the cutting edge.

00:05:06 And understanding spoken word is especially tricky, right?

00:05:10 For me, it's also so nice since I use the software myself to learn a language and working on something

00:05:16 that is useful, not only for you, but for so many people, since it can be so hard to learn

00:05:22 a different language.

00:05:23 That's really nice.

00:05:23 Yeah.

00:05:24 It's really fun to work on software.

00:05:25 It's more fun to work on software that, you know, other people, many other people are using

00:05:29 it.

00:05:30 It's a special kind of joy, I think.

00:05:32 Absolutely.

00:05:32 Would you say that projects that you work on have to use Python dependencies and virtual

00:05:37 environments and stuff?

00:05:38 Yes, so much.

00:05:39 That's actually also why I did this talk in the beginning or why I started working on

00:05:44 the talk on this topic since I was in a different project.

00:05:47 And the people there asked me, okay, which packaging tool should we use?

00:05:51 And I was like, wow, this is so difficult.

00:05:53 I cannot even answer it.

00:05:54 Since I know that there are so many tools out there, I didn't have a good overview of them

00:06:00 and also especially not of the differences and what they are good for, what they can

00:06:05 do, what they are not good for.

00:06:07 And then I started digging into the topic and I was like, wow, this is just so complex and

00:06:13 so many different tools.

00:06:14 And yeah, it was really time for a good overview.

00:06:18 And I think you did a really fantastic job writing this up and you did it in two varieties,

00:06:23 right?

00:06:23 You have the article on your blog and then you also have, you gave a talk at PyCon DE,

00:06:30 right?

00:06:30 So depending how people want to experience it.

00:06:33 I also gave one at EuroPython, which is a more updated version, I guess, since Rai came

00:06:38 out after I gave the talk at the German PyCon.

00:06:41 So the new video from EuroPython, which is not on YouTube yet, it also features Rai.

00:06:48 Yeah, we'll talk about Rai.

00:06:49 It's crazy since it already shows that in a few months, there was another change and

00:06:54 another tool came up, which is so popular now.

00:06:56 It's only a few months old, you're like, Kondi talking.

00:07:00 It's already a little outdated, right?

00:07:01 That highlights what you're talking about, doesn't it?

00:07:03 Yes.

00:07:04 Let's start by thinking about Python from a beginner's perspective, because one of the first

00:07:09 things that people are like, okay, Python is awesome.

00:07:12 Whether they're a machine learning engineer who wants to use PyTorch, they're a web developer

00:07:17 who is all excited about FastAPI or whatever.

00:07:21 One of the huge powers of Python is that you have almost half a million libraries on PyPI.org

00:07:29 to work with, right?

00:07:30 And so if you pick one of them, it's awesome.

00:07:33 It says, okay, this somewhere requires like, for example, FastAPI requires Python 3.7 or above.

00:07:39 That's a pretty low bar these days.

00:07:41 But there's already two things you have to deal with.

00:07:44 FastAPI, the package, the version of it so it can't clash, and the version of Python that

00:07:49 it runs on.

00:07:50 And somehow as a beginner, you have to figure out, okay, how do I put all these things together,

00:07:55 right?

00:07:56 And how do you get started with these environments?

00:07:58 So maybe speak to that just a little bit.

00:07:59 I think that's a good starting point, since especially when you begin, I remember that

00:08:04 for me, the concept of a virtual environment already was really confusing, although it's

00:08:09 such a simple thing to understand.

00:08:11 And then to go from there, maybe how you install packages in the best way, since I think it's

00:08:17 always a good idea to start with a virtual environment.

00:08:20 Since then, you have your dependencies in this nice little box or environment where it's isolated

00:08:27 from the rest, and you do not have these dependency issues between different projects you might

00:08:31 have or might work on that require the same package, but in a different version.

00:08:36 So you can create this virtual environment or maybe a local environment.

00:08:41 There's also this new variant.

00:08:43 And then you can install packages there.

00:08:45 So for example, with the FastAPI you just showed, you could use pip to install it.

00:08:50 given that you have the right Python version.

00:08:52 Yeah, wow, this already shows right now, since this is already the next category, right?

00:08:57 Python version management.

00:08:59 Yeah, it can be quite confusing.

00:09:01 So you need the right Python version, which you can handle using a tool or different tools

00:09:07 are available for that.

00:09:08 Then you need to be able to install the package with pip, for example, or another tool.

00:09:13 And it would be nice, or it's always nice to have a virtual environment for your different

00:09:18 projects, which you will also need a tool for.

00:09:20 Yeah, of course.

00:09:22 So I guess it's already three things just if you want to get started installing a package.

00:09:26 So in your article, in your talk, you broke it down into five different categories.

00:09:31 Yes.

00:09:31 These tools might work in, right?

00:09:32 And depending on the tool chain you choose, you might need to use two or three different

00:09:36 tools just to get started, right?

00:09:38 Or you use one tool that can do it all.

00:09:40 I think that for most would be the ultimate goal, I guess, that we have this single one

00:09:46 tool.

00:09:46 And I remember that you had this panel on packaging, right?

00:09:50 Where you also talked about the difficulties of creating this tool and why it is so hard

00:09:55 to do that in Python.

00:09:56 And yeah, so I identified five main categories.

00:10:00 One is Python version management, which we just mentioned already.

00:10:04 Then you have environment management, where you can create, manage your virtual environments.

00:10:09 We have package management, which is basically about installing packages and upgrading them

00:10:17 when you need a new version.

00:10:18 And then when it comes to packaging, I first thought, okay, there's just packaging, but there's

00:10:24 actually also tools that can just do the package build step.

00:10:29 And then there are tools that just do the publishing.

00:10:32 So I split it up into two categories, one for building and one for publishing.

00:10:36 I think that makes sense.

00:10:37 Yeah.

00:10:37 The publishing stuff people have less exposure to, right?

00:10:41 That's farther down the line.

00:10:43 You're not really a beginner at that point.

00:10:45 Not usually anyway.

00:10:46 Absolutely.

00:10:46 But I think since many of the tools that do the building step also do the publishing step,

00:10:52 you most of the time are going to use a tool that could do it anyway.

00:10:57 Sure.

00:10:58 Yeah.

00:10:58 A bit of real-time follow-up from the audience here.

00:11:00 Tushar says, actually, the Europython videos came out just yesterday.

00:11:06 So how about that?

00:11:07 People can check that.

00:11:08 Oh, that's so nice.

00:11:09 Yeah.

00:11:09 Great.

00:11:09 Yeah.

00:11:10 We can link it in the show notes.

00:11:11 Yeah.

00:11:12 We absolutely can.

00:11:12 Cool.

00:11:13 Thanks for letting us know.

00:11:14 So we've already started in kind of talking about the categorization here.

00:11:18 And I'll give a quick shout out to some of the tools.

00:11:21 You know, obviously, pip is involved, virtual VNV, but also virtual ENV.

00:11:27 Then you might start talking about, well, some of the tools that do more like you talked about.

00:11:32 So maybe poetry, PDM, Hatch, Rye, but stuff people might not know about too much is Maturion or Ensconce.

00:11:40 There's a wide ranging set of tools.

00:11:42 And what you did really nicely in your article and talk is you said, these five categories, let's create Venn diagrams and put into the overlaps the various tools.

00:11:53 Like PDM can do package publishing and building and environment management and package management, not Python version management.

00:12:01 So that's kind of the way that you evaluated.

00:12:04 That's the unbiased aspect, right?

00:12:07 Is that you're like, okay, let's just create some categories and create some ways to evaluate how full featured or how good is this.

00:12:13 And then you go through it, right?

00:12:15 There's actually one step further for the packaging tools like Hatch and PDM Poetry and so on.

00:12:21 I also thought about features.

00:12:23 And if you scroll down, there's like a feature list and things I thought about what should these tools be able to do or how do they differ?

00:12:33 For example, yeah, that's the one.

00:12:36 So one is if it allows you to manage your dependencies and if it resolves and locks dependencies.

00:12:42 Since there are some tools like Hatch, which cannot do that at the moment.

00:12:47 I know that it's supposed to do it in the future.

00:12:49 But if you want that functionality, then for example, you might not want to use Hatch at the moment.

00:12:55 And then there's also there's a large number of peps on packaging.

00:12:59 But I picked out two specific ones.

00:13:02 One on editable installs, which I think can be quite useful, especially if you develop your package yourself and you want to install it in editable mode.

00:13:12 Yeah, maybe it's good to mention what this is.

00:13:14 Yeah, yeah.

00:13:15 Tell people why you care about that.

00:13:17 Yeah, exactly.

00:13:17 So if you develop your project yourself and you want to make sure that during development, the changes to your package are directly reflected in your environment.

00:13:29 You would install the package with pip install minus E for the editable flag and the name of the package.

00:13:36 And then you do not have to reinstall it every time you make a change.

00:13:39 This is very useful.

00:13:41 And then there's one PEP on how to specify your project metadata in the piproject.toml file, which is like the basic file you need when you specify or create a package where you put all your general information, the name of the package, the website, your author name and so on.

00:14:01 So you can define the code, the dependencies, the dependencies, the dependencies, the dependencies, you can define scripts there.

00:14:04 And there's one tool, namely Poetry, which has its own way of defining the metadata, I think because it was developed before this PEP was accepted.

00:14:15 And they also promised to change it at some point, but they still haven't done that.

00:14:20 So I guess that's also something at least you should be aware of when you choose a tool like Poetry that it might have like a few differences in how to specify it in the piproject.toml file.

00:14:32 I'd like to hear your thoughts.

00:14:33 This portion of Talk Python to Me is brought to you by IRL, an original podcast from Mozilla.

00:14:40 When it comes to artificial intelligence, AI, what's good for trillion dollar companies, isn't necessarily good for people.

00:14:47 Can the risk and rewards be balanced?

00:14:49 That's the theme of Season 7 of IRL, Mozilla's multi-award winning podcast, hosted by Bridget Todd.

00:14:55 Season 7 is all about putting people over profit in AI.

00:14:59 I think you'll find Episode 2 pretty interesting.

00:15:02 As you surely know, LLMs like ChatGPT are all the rage these days.

00:15:07 Do they seem like magic?

00:15:08 Well, it turns out that much of their power comes from millions of people entering and correcting data in these LLMs.

00:15:14 Episode 2, The Humans and the Machine, gives us a glimpse into the world of these people behind the AIs.

00:15:20 For policy junkies, IRL looks at the idea that we're all just guinea pigs in a big AI experiment,

00:15:27 like the meal planning app that suggests bizarre recipes such as Oreo vegetable stir fries

00:15:32 and flawed technologies that compose more deadly risks when it comes to something going wrong,

00:15:37 like self-driving cars blocking emergency responders.

00:15:40 You'll also hear from people building more responsible ways to test new AI technology.

00:15:45 And we find out why it's taking so long to regulate this massive industry.

00:15:49 That's IRL, Season 7 from Mozilla.

00:15:52 Check them out and listen to an episode at talkpython.fm/IRL.

00:15:56 The link is in your podcast player show notes.

00:15:59 Thank you to IRL and Mozilla for sponsoring the show.

00:16:04 To me, it seems like a lot of these tools like Poetry or Flit or others, as their own thing, they're pretty self-contained.

00:16:12 And they kind of do the job for most things you need to do for your package management, project management, installing.

00:16:19 The hash doesn't lock.

00:16:21 But as long as you kind of stick to them, you're more or less, you can solve all the problems you need with one.

00:16:26 But choosing, figure out how to choose which one is really hard and kind of like with your Rai example is the reason you chose one six months ago might not.

00:16:36 There might be a better choice now.

00:16:38 So it's good to see them side by side, don't you think?

00:16:40 Yes, absolutely.

00:16:41 And also, that's why I wanted to do the unbiased evaluation.

00:16:45 There's often personal preference that comes in with packaging tools.

00:16:50 For example, one of my colleagues, like, hates might be a strong word, but he very strongly dislikes poetry.

00:16:57 Since in the past, they once did an update or a new version, and it broke something in the older versions, but they did not tell the users beforehand.

00:17:06 And several people got very upset.

00:17:09 And they just said, okay, I'm not using poetry anymore.

00:17:12 Now, if you were then in a team with people, and you choose a tool, and one of them says, like, no, we are not going to use poetry, then, yeah, this has also an influence on people.

00:17:23 So I think having an unbiased view of these tools can be very difficult, since it's often also a team decision that if you're already used to using a tool, it might be easier to just use that in your team.

00:17:35 Or if something is already working for you, then it might not be worth putting in effort to learn or, yeah, get caught up with a new tool.

00:17:43 Yeah, you don't have to necessarily keep switching to the newest, shiniest one of these, right?

00:17:49 Like, if it's working for you, whatever you're doing, then maybe that's fine, right?

00:17:52 Definitely.

00:17:52 So before we get into this, many of these things we're going to talk about don't come with Python itself.

00:17:59 We have pip, we have venv, and setup tools, and I think that that's it out of this big, long list of things.

00:18:06 Do you have a preference or a tendency to stick with what comes with Python so you don't have to install other things?

00:18:13 Or do you see the advantages of these external tools to be greater and worth it?

00:18:18 I do see the use, and sometimes for me, although I've created so many virtual environments, I sometimes cannot remember how I need to call venv correctly to create a new virtual environment.

00:18:28 And with virtualenv, it's just virtualenv and then the name of the environment, and it's just simpler.

00:18:35 And I can remember that.

00:18:37 So sometimes it can be that easy that it makes it more useful.

00:18:41 Other tools, they solve a different problem that's not really related, like pipX and pyenv.

00:18:49 There's no real Python equivalent.

00:18:51 That's true.

00:18:51 Well, let's go through and I guess talk about probably one that people do less, but is also really important.

00:18:58 Not package management, but Python management.

00:19:02 Want to tell us about that one?

00:19:04 Okay, so Python version management, I always included a short definition since there are no proper definitions of these categories.

00:19:11 It's just what I thought would be useful.

00:19:13 So for me, Python version management means that the tool is able to install Python versions and lets you switch between them easily.

00:19:22 And yeah, most popular for that is pyenv.

00:19:25 And it's also one of the few tools actually that can do that.

00:19:29 You can also do Python version management with Conda and then there's Rhino, which can do it and also pyflow.

00:19:35 But pyflows, I excluded it from my list since it's not actively developed anymore.

00:19:41 It's still in the Venn diagram, but yeah, I'm not sure if it's that up to date anymore.

00:19:45 But yeah, you can just with pyenv, for example, you can say pyenv install and then like 3.10.4

00:19:53 and we'll get the version of Python and install it on your system.

00:19:57 And then you can just switch between the different versions you have installed.

00:20:01 And yeah, this can be useful in many different ways.

00:20:04 For example, if you have projects that support multiple Python versions, or maybe you just want to install the newest one and check out a few of the features it has to offer.

00:20:15 Yeah, it can just be nice to be able to switch between the versions yourself or set them for your current shell session and so on.

00:20:23 Yeah, and this starts to get us into an interesting philosophy here.

00:20:27 Many of these tools kind of take over your day-to-day flow of working with your code and the tools, right?

00:20:35 So for example, pyenv, you do pyenv local, pyenv global.

00:20:40 I guess maybe even more with things like hatch and flitch and so on.

00:20:44 Instead of just saying Python my code or Python, you know, dash M something, you would say like flit run something.

00:20:54 Sort of, you've got to adopt its way of working on the terminal a little bit to get the most value out of it, right?

00:21:00 And that's also something I found confusing in the beginning.

00:21:03 I remember that when I used poetry for the first time, I didn't really understand why I couldn't run my package or my code anymore with Python.

00:21:12 But I always had to put poetry run Python, my script.py.

00:21:18 Once you understand that this enables the tool to run your code within a virtual environment for you with all the dependencies installed, and you do not have to do anything, then it made click for me.

00:21:30 And it made sense, but in the beginning, I was thinking that it was just more complicated, and I didn't really see the point.

00:21:36 Yeah, and going back to the beginner type of thing, it helps you in a lot of ways, but it's also a new thing that you have to learn in order to get started.

00:21:45 It alleviates the need to say, well, now you know the venv command.

00:21:50 You don't just run it.

00:21:51 You say Python dash M, and then you activate it, and it's different on Windows.

00:21:54 I don't know why it's different on Windows, but it just is, so you just do that.

00:21:57 But at the same time, you now have to learn a slightly different way to run it.

00:22:01 So I think that that's an interesting tradeoff that a lot of these tools make.

00:22:05 Another thing that I think about when I think about these tools is like you were saying you can't just run your Python code,

00:22:12 because a lot of times this management of the dependencies and the environment that often lives in some kind of hidden place in your user profile or somewhere, right?

00:22:24 Whereas if I say Python dash MVNV, it makes a folder wherever I run that.

00:22:29 And so I can activate it.

00:22:31 So, for example, if one of these tools were to make the environment locally instead of in some kind of obscure location it finds,

00:22:39 then I could still just activate it and do regular Python things.

00:22:43 But if it hides it from me, then I'm required basically for any practical reason to go through its terminal commands, its shell, CLI, right?

00:22:53 Is that something you considered?

00:22:55 Like which ones have overrides to put them locally or do it by default?

00:22:58 Or is that anything you considered here?

00:23:00 No, actually, I did not.

00:23:01 But that's a very good point for an extension of the post to consider that.

00:23:06 I just got used to just calling, for example, with poetry, you can just say poetry shell.

00:23:12 And then it will activate the virtual environment for you, right?

00:23:16 So it's just, I guess, getting used to a different way of activating your virtual environment.

00:23:22 So that worked well for me.

00:23:24 But I think it just depends on how much you have used the other virtual environment functionalities before.

00:23:31 For me, it wasn't that hard to switch, I guess, since I work a lot with packages.

00:23:36 And then it can be very convenient.

00:23:38 I totally agree.

00:23:39 I guess what I didn't really say before, and I was talking about like using the new CLI stuff is when you're doing this for yourself, you kind of adopt one and you get used to it.

00:23:48 And you're like, all right, this is great.

00:23:49 But if I'm following, say, a tutorial on some docs, it'll say, you know, okay, activate the virtual environment this way.

00:23:57 You're like, wait, that's not how I do it.

00:23:58 You know, now run Python.

00:23:59 Wait, that's not how I run it.

00:24:01 And so this putting it together of like, I know what I'm doing and I see what the thing tells me to do.

00:24:06 But how do you make sure that those are lining up?

00:24:08 And if there's a local environment that's kind of equivalent, like you could sort of follow the steps and it might still work.

00:24:15 It's kind of what I was thinking.

00:24:16 That's a very useful idea.

00:24:18 I will put that on my list of things to look at.

00:24:21 This could be your PyCon US talk.

00:24:23 Yeah.

00:24:24 Yeah.

00:24:25 I actually have an idea for PyCon US next year already, which I want to work on.

00:24:29 I did a lot of packaging work for the last months.

00:24:33 But I'm really, I really want to keep this post updated, since I find it useful myself.

00:24:38 And I was asked by so many people after the talks and also at my company.

00:24:42 Now, many people ask me, which tool am I supposed to use now?

00:24:45 And we have these requirements and so on.

00:24:48 And running, like having the virtual environments somewhere where you can activate them also yourself.

00:24:53 I think that's a very useful thing to do.

00:24:56 I never thought about this following a tutorial point of view, but it is very important for learners, I guess.

00:25:02 Yeah.

00:25:02 Especially when you're a beginner.

00:25:03 Yeah, absolutely.

00:25:04 Absolutely.

00:25:05 It's also worth pointing out there are some tools that you just didn't really evaluate because you didn't quite necessarily see that they fit totally in the picture, like pip-tools, which I'm a big fan of, actually.

00:25:15 But also, Mike Fiedler out there asked, was PyEV-VirtualEV evaluated as well?

00:25:21 No, it wasn't.

00:25:23 I should write that down.

00:25:24 I will do that right now.

00:25:25 I can guess, but I have no experience with PyEV-VirtualEV.

00:25:29 Me neither.

00:25:30 The speaking of it is tricky.

00:25:31 Okay.

00:25:33 But I think I put pip-tools in the very end of the post into the categories of tools which don't really fit in.

00:25:39 Yeah.

00:25:39 Also, Tox is there and the author of Tox, which can be used or which I only knew from testing, where it allows you during testing to specify different Python versions, which you want to run your tests with.

00:25:53 But Tox also can be used to handle virtual environments.

00:25:58 And I was completely unaware of that.

00:26:00 But it's still not complete the picture with the five categories, but it's already complicated enough, I guess.

00:26:07 Yeah, I don't know how much value it adds to really say, we're going to completely cover everything because part of the value is making a few recommendations as well, I think.

00:26:17 Yes.

00:26:18 Not just going, here's a complete list.

00:26:19 That sounds more like an awesome list of packaging, which maybe that exists.

00:26:23 I don't know.

00:26:23 Maybe that's also a good point to add for everyone that wants the solution now.

00:26:29 I do not have the solution.

00:26:31 I cannot give you the best tool.

00:26:34 It really depends on what you want to do, what your team is doing, what your personal preferences are.

00:26:39 Hopefully, at some point, we might have the one tool which can do everything and is adopted by most people.

00:26:45 But at the moment, lots of these tools are really used and also can be useful.

00:26:51 And there's more variations, not fewer.

00:26:53 So I would like to see that too, but it is tricky.

00:26:56 There's so many, I think another one of the challenges to think about that I know I've seen previously around, say, for example, pipenv versus some of the other tools where are you building a library that you want others to use?

00:27:09 Or are you building an application?

00:27:10 Yes.

00:27:11 Because if you over-constrained, say, like your lock file, no one can use your library.

00:27:16 But that's exactly what you want for your application.

00:27:18 So it's totally stable, right?

00:27:20 These kinds of tensions are in there.

00:27:22 And so it could also be pick the right tool for the right situation.

00:27:26 In the beginning, when I first worked on the talk, like it is 45 minutes long, which is the longest time slot you can get at PyCon.

00:27:34 And I had this point with applications versus library in it, but I really had to get rid of stuff since it was way too long.

00:27:43 And it was really hard to decide what to talk about and whatnot, since there are so many points to consider that it can be hard to boil down to the most important facts.

00:27:53 I also had live demos in the talk in the beginning for the different tools, but that also took up way too much time.

00:28:00 But it can be fun to play around with them to get to know them better.

00:28:04 It's super fun.

00:28:05 The live demos that involve downloading stuff from the internet are scary, though, because at conferences, the internet can be pretty sketchy sometimes.

00:28:12 That's true.

00:28:12 All right.

00:28:13 So the first area was virtual environment management, and that's tools like VNV, so virtual ENV, pip ENV, which we just talked about, Conda,

00:28:22 and then even Raya.

00:28:23 So let's maybe talk about some of these.

00:28:27 You sort of compare.

00:28:28 We talked a bit about using VNV versus virtual ENV.

00:28:31 I've always just stuck with the built-in one for the reason that it's built-in, but, you know, it sounds like you use virtual ENV more.

00:28:39 What do you find better about it?

00:28:41 I use both, actually.

00:28:42 Sometimes I use one and sometimes the other.

00:28:45 My understanding is virtual ENV is faster, but it's not something I'm doing a ton of.

00:28:50 So it's like I'll set one up for a project and then I'm good to go.

00:28:52 So I don't, it doesn't really motivate me.

00:28:55 One area that I think is important to cover is maybe the files that specify your project and your dependencies.

00:29:02 Yes, maybe let's do that.

00:29:04 Yeah, yeah.

00:29:04 So traditionally there's been this requirements.txt, which is just lines in a text file, but there's been a, in almost all of these tools, a move towards pyproject.toml.

00:29:14 I think that's a very important point to know about if you talk about packaging in general, that you have one file, which is pyproject.toml.

00:29:23 For me, toml was in the beginning of a new config language or format I didn't know about.

00:29:29 So it's like you have YAML files and JSON files and toml is this other format, which is quite simple.

00:29:36 And it was decided to use the toml format and in the PEP for pyproject.toml, where it was introduced, they also discussed the different formats.

00:29:45 So it's quite an interesting read.

00:29:47 This central file in your package, I already mentioned that you put like general information there, like the name of the package, the author names, where the readme is and so on.

00:29:59 But it allows you to do very complex things as well.

00:30:02 Now you can configure tools there, like if you want to do formatting with black or style checks and so on, you can define that there.

00:30:11 Yeah.

00:30:12 And you can put your dependencies when what you mentioned there, then some tools allow you even to specify different virtual environments and how they should look like.

00:30:24 You can define scripts that you want to run.

00:30:26 And then, for example, if you always run your pytest tests, you can have like a command, hatch run test or poetry run test and it would run the test for you and maybe also do the coverage report and so on.

00:30:43 This portion of Talk Python To Me is brought to you by Sentry.

00:30:45 You've heard me sing the praises of Sentry for their error tracking and performance monitoring plenty of times on the show.

00:30:52 But this time is different.

00:30:53 They have a special live event, like a mini online conference, where you can connect with the team and take a deep dive into different products and services every day for a week.

00:31:04 Join them for launch week, new product releases, exclusive demos, and discussions with experts from their community on the latest with Sentry.

00:31:10 You'll see how Sentry's latest product updates can make your work life easier.

00:31:15 New announcements will be released every day on YouTube at exactly 9 a.m. Pacific time.

00:31:21 On Monday, November 13th, performance.

00:31:23 Tuesday, user feedback and session replay.

00:31:26 Wednesday, data resiliency and platform.

00:31:29 Thursday, frameworks, community, and integrations.

00:31:32 And finally, Friday, November 17th, open source sustainability.

00:31:35 I'm already signed up.

00:31:37 Join me at talkpython.fm/sentry dash launch dash week.

00:31:42 The link is in your podcast player show notes.

00:31:44 I'll see you there.

00:31:45 Thank you to Sentry for their continued support of Talk Python to Me.

00:31:49 In your article, you'll link over to the pandas, pyproject.toml.

00:31:55 And that thing has a lot of stuff going on, as you would imagine from such a project as pandas, right?

00:32:00 But you can even specify like project URLs, entry points for just running a command on the terminal.

00:32:09 Things like if you want to use AWS, you could pip install bracket AWS, and it'll, that actually brings in a whole list of potential dependencies or GCP.

00:32:18 Pretty comprehensive.

00:32:19 Way more than just the list of dependencies.

00:32:21 If you stay there, that is also an important point that in the pyproject.toml file, you define which build backend you use.

00:32:28 Yeah.

00:32:28 This would then be where you, for example, maybe have poetry or hatchling or setup tools and so on.

00:32:36 So which tool you want to use to really do the building step in the, like behind the curtain?

00:32:42 How do you say that?

00:32:44 Yeah.

00:32:44 You know what I mean.

00:32:45 Yeah.

00:32:45 Yeah.

00:32:46 Here's the build system that it's got here.

00:32:49 Build backend is mesonpy for this particular one.

00:32:53 Interesting.

00:32:53 It's less important if you have a pure Python thing, right?

00:32:58 Although it's still potentially relevant for building the wheel.

00:33:01 But if you've got a really complex, like a Rust integration or a C++ integration, then how that all happens when you say build, you want to have a lot of control over that, right?

00:33:11 And also, if you use a tool like poetry, it will set the build backend to poetry, I guess, automatically, which most of the tools do.

00:33:20 Most of the tools decide which build backend to use.

00:33:22 Only PDM is a tool which allows the user to choose the build backend freely.

00:33:27 I think Hedge uses Hedgeling.

00:33:29 Poetry uses poetry, I guess.

00:33:31 I don't know about the others, actually.

00:33:33 Sure.

00:33:34 We've been talking for a little while.

00:33:35 Now we've finally come to the thing the person wants to do, pip install a package, right?

00:33:40 Exactly.

00:33:41 So that is package management.

00:33:43 There are several tools that allow you to download and install libraries and their dependencies.

00:33:48 And the major one, which everyone knows, I guess, is pip.

00:33:51 But there's also pipx.

00:33:53 Or you could use Conda to install packages.

00:33:56 But also poetry, for example, like one of these packaging tools.

00:33:59 And yeah, it will download the library for you and install all the dependencies automatically.

00:34:04 Yeah, I guess that's the most important thing to know about it.

00:34:08 Yeah.

00:34:08 So a lot of these will make the virtual environment for you.

00:34:11 And then you just, instead of pip install, you, their name install, right?

00:34:16 Like poetry install.

00:34:17 Or sometimes they have add, right?

00:34:19 Something along those lines.

00:34:21 But then they'll figure out where their virtual environment is and install the thing the way you've asked.

00:34:25 And also, if you use one of the packaging tools, it will do the dependency resolutions for you, which sometimes works, sometimes not so well.

00:34:34 But I guess this is something that pip is not doing.

00:34:37 I think it just tells you about conflict.

00:34:40 Another important thing that it helps you, that many of these tools help you with that pip will not help you with is dependency recording or accounting, I guess, is the right way to maybe think about that.

00:34:52 As well as restricting it to a particular version.

00:34:55 So if you add one of these things, it might put the dependency into the piproject.toml and then also create a lock file, right?

00:35:02 Yeah.

00:35:03 Should we shortly say what lock files are about?

00:35:05 Yeah.

00:35:06 Tell people about it.

00:35:06 Okay.

00:35:07 So this is the second recap I had in the talk or which is also in the blog post.

00:35:11 First one was piproject.toml.

00:35:13 And the second one is a lock file.

00:35:16 So in the piproject.toml file, you would usually have your dependencies, but in an abstract fashion.

00:35:22 So you would not pin them to exact versions.

00:35:25 So you would not say I need pandas 2.0.3, but you would set a range or not give restriction at all.

00:35:34 And then you have the lock file, which really records the exact versions of all the dependencies that you have installed for a project.

00:35:41 And if you commit or have that lock file within your repository, it allows to really reproduce the exactly same setup that you have on your machine.

00:35:53 So you can reproduce it on multiple platforms.

00:35:56 And I also linked one, I think the one from Poetry.

00:35:59 So if you look at a lock file, it can become huge.

00:36:02 So it really has the exact versions of all dependencies and sub dependencies and so on recorded.

00:36:08 Yeah.

00:36:08 Here we go.

00:36:09 This one from Poetry.

00:36:11 Yeah, that is, let's see, that's 1,685 lines.

00:36:15 That is, that's a big lock file.

00:36:17 It is.

00:36:17 It also, though, it does follow some of the best practices, right?

00:36:21 So it says the package mypy in the version of it, rather than just mypy equal equal one five one, it'll have things like, and here's the hash of that, which is, you know, a recommendation to store that.

00:36:34 But in addition to just saying, here's the hash for my particular install, it has it, here it is for macOS, here it is for this other version of Mac, here it is for Linux, here it is for the ARM version of Windows, or the AMD version of Windows, right?

00:36:47 And on and on and on.

00:36:48 So it does record a lot of information there.

00:36:51 But the main goal of just saying, in a year, if I go pip install or poetry update or what, I don't remember the poetry command.

00:37:00 There's so many, I've read all of the different CLIs for all of them.

00:37:04 So the equivalent of pip install, it'll look at that and go exactly the same thing.

00:37:08 Because I see one of the guys in the audience here, I was just speaking with him.

00:37:14 One of my courses, I didn't pin the dependencies, and it uses SQLAlchemy.

00:37:19 And SQLAlchemy 2 is now out, which is awesome.

00:37:22 But SQLAlchemy 2 has a breaking change from SQLAlchemy 1, so some code sample wouldn't run.

00:37:28 It's like, oh, what's going on?

00:37:29 I'm like, oh, no, just for now, pin the dependency yourself, and I'll fix it later today.

00:37:33 But it's not a theoretical problem.

00:37:35 I literally ran into it yesterday, today, by way of one of the students.

00:37:40 I agree.

00:37:40 It can be very useful.

00:37:41 Also, if you work on a project with several people, then having the same setup everywhere can keep you from having a headache.

00:37:50 Yeah.

00:37:50 How much isolation do you do, personally, for your work?

00:37:53 Do you do Docker containers, or is it enough to just have a lock file and an agreed-upon version of Python?

00:38:00 We often use Docker containers, since I work a lot with production environments.

00:38:04 But for personal projects, I usually only use lock file.

00:38:08 Same here.

00:38:09 I don't really use Docker all that much.

00:38:10 I find that it's enough with just a lock file.

00:38:14 Yeah.

00:38:14 Lock file is super important.

00:38:16 Maybe, you know, instead of going through all of these, maybe just give your thoughts on some of the, with regard to package management, just some of the things in here.

00:38:24 For me, especially one important point was there is Conda also, which you can use for lots of things.

00:38:29 But the post and also the talk does not go into detail on Conda, since it's this huge, like, huge own environment or universe with Conda.

00:38:41 Also, packaging works a little differently.

00:38:43 And the resulting packages will be on the, not on PyPI, but they have their own index.

00:38:49 Yeah.

00:38:49 There is not a lot of detail there.

00:38:50 And there's also pipenv.

00:38:52 I've never used pipenv myself, actually.

00:38:54 I never really had the use case for it, but it has been around for a long time.

00:38:59 And what I found interesting is that pipenv uses also the lock file functionality and also introduces a TOML file, but it's pipfile.toml, which I found interesting since it shows that also some tools before the standard was introduced used something similar, which I found interesting.

00:39:21 But for me now, I'm not using pipenv since I like having only the PyProject TOML file.

00:39:28 Having this additional pipfile just confuses me.

00:39:31 Yeah, because a lot of the packaging and stuff you can already do through pyproject.toml.

00:39:35 So why have more files?

00:39:36 Yeah.

00:39:37 And I often also have to do package building.

00:39:39 So to get a real file or just be able to install the packages on different environments.

00:39:45 And then it's nice to use one of the other tools since pipenv can do package management and environment management, but not the packaging itself, like building a real file or publishing the package.

00:39:57 What one are you using these days for building packages or publishing them?

00:40:02 I'm currently using Hatch.

00:40:03 I like it a lot since it allows you to declare your environments within the PyProject TOML file.

00:40:10 And I like to have everything organized.

00:40:13 So having a single place where you can also say, okay, this is my environment for creating the documentation.

00:40:20 And I only need material like MKDocs material for this or having one environment for all the style issues like running black and eyesword and the type checkers.

00:40:32 I like that a lot.

00:40:34 But a lot of people from my company are now using Rai.

00:40:38 So I have to check that out, I guess, very soon for some proper project.

00:40:43 Yeah.

00:40:43 I want to save Rai until the end because it's a very different philosophy, not putting a judgment on it, but just it really lives in a different style and philosophy than many of these other tools.

00:40:53 So absolutely.

00:40:54 Yeah.

00:40:54 You hinted towards this with the packaging panel discussion I had with some folks there.

00:40:59 And it's I think we're going to see stuff going that way.

00:41:01 Maybe not exactly with Rai, but in that general, general vibe.

00:41:05 Yeah.

00:41:05 This idea of having multiple environments for certain different parts of your program or of

00:41:12 your project is really interesting because for small projects, it doesn't matter.

00:41:16 Right.

00:41:16 But as they get bigger and bigger, I was just talking to Brian Okken yesterday on Python Bytes about this.

00:41:22 He'd brought this up.

00:41:23 On Talk Python training, I have maybe where the courses are.

00:41:26 I have maybe 48 dependencies that I list in the main top level.

00:41:31 These are the things I'm using.

00:41:32 But there's 250 different packages.

00:41:36 If you pip install dash R, you know, like build out that whole thing, right?

00:41:39 The transitive dependencies.

00:41:41 Most of the time, it will not install everything.

00:41:45 I can get the stuff to run the site all the time.

00:41:47 But also the data science analysis stuff and the notebook tools and other things like this MKDoc stuff.

00:41:54 One of those has a restriction that is something, you know, something less than X.

00:41:59 And another part has something greater than X.

00:42:01 And they just they can't go together.

00:42:03 And they don't necessarily need to live together.

00:42:05 But in order, just without having a separation of the where the dev tools go and where the counting tools go and where the runtime tools go, they get too mixed together.

00:42:17 You know, actually not sure if any of the other tools do the same already since it all changes so quickly.

00:42:23 I haven't checked the other tools in the past four weeks.

00:42:26 So I just got started with Hatch.

00:42:28 And that's also what I mentioned in the beginning.

00:42:31 Sometimes when you got used to using a tool and it works well for you, you do not get weird errors when you install it or do things.

00:42:39 And you find when you have a problem, you find the error messages useful and how it works.

00:42:43 And I also like the podcast episode you had with the author.

00:42:47 It was very...

00:42:49 Yeah, with effect.

00:42:49 Yeah, I really liked listening to it and that he's working on it.

00:42:53 And I find it really impressive what he's doing with just...

00:42:57 He's not even able to type, right?

00:42:59 I believe he can.

00:43:00 And I think it's just limited.

00:43:01 So yeah, it's really impressive what he's doing.

00:43:04 I think it's great.

00:43:05 I think Hatch is cool.

00:43:06 I have to say I also used poetry in the past, which also worked well for me.

00:43:09 I have nothing against poetry.

00:43:11 Just your teammate does.

00:43:13 Awesome.

00:43:14 Okay, let's see.

00:43:15 We talked about Conda.

00:43:16 I think PDMs may be interesting.

00:43:18 Yes.

00:43:19 It's one of the newer ones.

00:43:20 So people might know less about it.

00:43:22 Do you want to tell people about PDM?

00:43:23 Also, I sometimes forget about it since I've never used it.

00:43:26 But I know several people which like it a lot.

00:43:28 PDM for me was quite new since most of the tools are based on using virtual environments.

00:43:34 And PDM is one of the only tools, I think, that implements a PEP, which is PEP 582 on local packages, which is an alternative way of implementing environment management.

00:43:47 And the PEP was recently rejected.

00:43:50 So beforehand, it was open of whether that might be the new way to do environment management.

00:43:57 But I think it's still an interesting approach.

00:43:59 And yeah, PDM is also, I guess, used by many people.

00:44:03 It can do everything except for managing Python versions.

00:44:07 But it allows you to choose your build backend freely.

00:44:11 So you have quite a lot of flexibility.

00:44:13 And it's also developed very quickly.

00:44:17 So like new features are added.

00:44:19 And it's a very active project.

00:44:22 Earlier, Mike Fielder said, pour one out for easy install.

00:44:26 Indeed.

00:44:26 I would say, I would add to that, that, you know, pour one out for PEP 582.

00:44:32 Because I really like that idea.

00:44:34 You know, it was a little bit like the way that Node modules and the project.json stuff works for Node, where it's just like, if you try to do something, it's just going to go up in the directories until it finds the directory that contains the thing.

00:44:48 You know, like, find where the virtual environment is at the top and just use that without you have to activate it and do all sorts of stuff.

00:44:54 And I thought that was a cool idea.

00:44:55 But it's not a thing, unfortunately.

00:44:57 So I guess it's still a thing for PDM, right?

00:45:00 Yes, it is.

00:45:01 Also, I didn't read about the rejection.

00:45:04 So I have no idea why it was rejected.

00:45:07 But I know that they always put a lot of thought on or into the rejection.

00:45:12 So why they do that?

00:45:13 I have to check that out.

00:45:14 You know, you look at other ecosystems, other programming languages.

00:45:18 They've got like five ways to do one thing.

00:45:20 And they're just, it seems like it's just constantly being changed to just chase trends.

00:45:25 And over the years, that becomes a real messy language and way to do things.

00:45:29 So I really appreciate that Python says no often, but I will miss this feature, you know?

00:45:36 I think it's also impressive how much work is put into these peps, how much work they do on like formulating their ideas and discussing it very thoroughly to get to a good result.

00:45:47 Yeah.

00:45:48 I'm very happy that they do that for Python.

00:45:50 Me too.

00:45:50 And I think another really interesting aspect is just so many people use it, right?

00:45:55 There's so many edge cases or scenarios that don't necessarily, maybe this breaks that I don't know about.

00:46:00 Let me pose a question from the audience here from demystifying dev says, newbie question.

00:46:06 If pip freeze outputs a perfectly usable requirements.txt file, if you want, can't that be used?

00:46:11 What's lacking?

00:46:11 Why are these other tools?

00:46:12 I think honestly, the reason I bring this up is this kind of like, is it almost like, why do all these tools exist, right?

00:46:18 It really is at the heart of your whole article or talk.

00:46:20 Especially now, this is just one of the use cases, right?

00:46:24 Many of the tools do lots of other things as well.

00:46:26 I think that's why a lot of them exist, especially on packaging, such that you do not have to use a one tool or several tools for all the different steps.

00:46:35 I still know people which use requirements.txt files.

00:46:40 So I do think it can be useful, especially if you do not work with packaging.

00:46:46 So if you don't want to create a package and piproject.toml puts or adds another level of complexity, which you don't use, then I don't think you have to use it.

00:46:59 I guess that's really specific for your use case.

00:47:02 But if you have a package and you have all this other information that you need to publish with it, then it's nice to have this one single file with everything.

00:47:12 Also with the dependencies and not have many different files for different things.

00:47:16 I agree.

00:47:17 I think another aspect of this is this totally works well, but a lot of it's manual, right?

00:47:23 So I could pip install a thing and it works.

00:47:26 But then if I forget to go and put it into the requirements.txt, well, that was a manual step that I needed to remember.

00:47:32 Or I put it in there, but I forgot to pin it.

00:47:35 You run into the problem that I ran into earlier, right?

00:47:38 With SQLAlchemy changing.

00:47:39 And with the other tools, they just, that's their flow, right?

00:47:42 You say poetry, add, whatever.

00:47:45 It puts it into the requirements file.

00:47:48 It puts it into the lock file, right?

00:47:50 It installs it.

00:47:51 All of those things are kind of taken care of for you.

00:47:54 So I think part of it is that they, the tools kind of do the recommended workflow for you rather than you having to remember to do it.

00:48:02 That's a very good point.

00:48:03 And it also allows you to make less mistakes with your project.

00:48:08 Yeah.

00:48:08 You don't even have to really be aware of that.

00:48:10 As a newbie, you just say, well, I know I say, hatch, add a thing.

00:48:14 And then it works, right?

00:48:16 I don't have to know, well, here's why you use the hash and here's why you pin the dependency.

00:48:21 It just, it just does.

00:48:22 You do give a mention to pip-tools here at the end.

00:48:25 If you go the requirements.txt file way, which actually, honestly, the thing I'm using these days is pip-tools.

00:48:32 It lets you create a file and then it creates this requirement, kind of like pip freeze.

00:48:37 It creates this requirements.txt, but it also lets you evolve that over time.

00:48:41 Like you can say, I want to upgrade my thing.

00:48:44 So if I'm using FastAPI and I say pip install --upgrade FastAPI, it'll upgrade FastAPI, but not the things like Starlette that FastAPI uses.

00:48:54 Right.

00:48:54 And that's another reason to not do that more manual process that we were just talking about.

00:48:59 Cause it, how do you make sure you update all of the things in a coherent way?

00:49:03 Right.

00:49:04 That's very, very tricky.

00:49:05 So you can still do it, but you, I, even if you do that, I think you got to use something like pip-tools or some other higher order, higher order.

00:49:11 thing there.

00:49:12 Yeah.

00:49:12 I can also understand that it's sometimes it can be frustrating in the beginning.

00:49:17 If you have to look into another tool to do what you want to do, if there's the simple hacky way to do it.

00:49:23 But if you think in the long run, and also if you work on bigger projects, it's always a good idea to get used to these tools in the beginning, since they save you a lot of work and also save you from doing mistakes that you then have to debug, which is annoying.

00:49:40 When you're working by yourself.

00:49:41 When you're working by yourself, you know, YOLO, you get to do whatever you want.

00:49:44 But like you working in a team, using something like Hatch means everybody does the same thing.

00:49:49 And that's actually really important too.

00:49:51 Rai uses pip-tools as well.

00:49:53 Let's close out our conversation here with Rai because it's different in the way that it's philosophy on how it works for package management, right?

00:50:02 If you want to understand Rai, you have to know about Rust, which is a very popular programming language at the moment.

00:50:08 And Rust has a very nice setup of how packaging works, since you have two tools, namely RustUp and Cargo, which do everything.

00:50:17 You do not have these different tools for different steps and everyone can contribute their own tool and gets really messy and hard to understand as it is for Python.

00:50:27 But it is very simple and easy to use.

00:50:30 And the author of Rai wrote Rai completely in Rust and was inspired by RustUp and Cargo.

00:50:37 And Rai is also a tool that can do everything.

00:50:40 It also is doing Python version management for you, which I guess is easier since it is not written in Python.

00:50:46 And yeah, it's a tool that can do it all.

00:50:50 It was started as a personal project, but there are new versions released, I guess, weekly.

00:50:57 Like when I last checked it, it was moving really, really fast.

00:51:01 And the author is also the creator of Flask.

00:51:03 So he's, I guess, very well known.

00:51:06 And that's also why people are adopting Rai very quickly.

00:51:09 Yeah.

00:51:10 So I think it's a very nice or interesting addition to the whole mix.

00:51:14 I think it is as well.

00:51:16 The most unusual thing, the reason I said it's unlike all of the others, the way that I use PipX is I somehow say Python or I say somehow pip install PipX and then I can use PipX.

00:51:30 Or I somehow Python-M pip install Hatch and then I can use Hatch for more Python stuff.

00:51:37 But all of those things start with Python, some version of Python, and then I can do more Python things with them.

00:51:44 Whereas Rust up in that world and Rai in the Python world, it says you have nothing.

00:51:51 You don't even have Python.

00:51:52 You ask for a version of Python and then you ask for environments, then you ask for dependencies.

00:51:57 And so it has all the flexibility.

00:52:00 It wants to do whatever it needs because it doesn't actually depend on you even having Python, much less the right version of Python.

00:52:06 Yeah.

00:52:06 Exactly.

00:52:07 You think that's going to be a trend?

00:52:08 Do you think we're headed that way?

00:52:09 Wow, that's hard to answer.

00:52:11 I'm actually not sure.

00:52:12 I think it would be nice.

00:52:14 I would really like having a tool that can do everything and get rid of this clutter.

00:52:19 Also, since I like everything to be organized and it can be really confusing.

00:52:24 And I know that most people are just complaining about packaging in Python.

00:52:28 But I know that also it's just difficult to get to the state where you have this one tool.

00:52:35 I remember that discussion from your podcast with the packaging panel.

00:52:38 It's not that people do not want to have this tool.

00:52:41 There are reasons that it's so hard to do it.

00:52:45 It's hard to get everybody to agree, switch over to this thing.

00:52:48 Whereas I think Rust was more built from scratch or designed from scratch to have it.

00:52:54 And that's an advantage Rust has existing, getting created when it did more recently.

00:52:59 Python came out when we had Usenet, maybe, right?

00:53:03 Like certainly the ubiquity of the internet wasn't there.

00:53:07 And we just didn't.

00:53:07 Downloading stuff off the internet everywhere, just on your command prompt or whatever it was

00:53:12 at the time.

00:53:13 It's just not a thing.

00:53:14 So it's timing.

00:53:15 And it's good that newer languages learn from the mistakes of previous ones.

00:53:20 We probably will end up with something like Rye, but maybe people got to agree on it.

00:53:24 That's tough.

00:53:25 I guess one really quick thing to close out this whole section, a main topic is Tony out

00:53:30 in the audience asks, I'm working on a large Python monorepo.

00:53:33 So we have all kinds of dependency conflicts and resolutions we have to deal with.

00:53:38 Maybe just worth pointing out that the multiple environments that Hatch has might address that.

00:53:44 What do you think?

00:53:45 Also in my project right now, we have a huge monorepo, but the different folders also correspond

00:53:52 often to different packages.

00:53:53 So they have their own PyProject.toml file.

00:53:56 So you can keep the dependencies like organized.

00:54:00 But if you have lots of dependencies that are for specific things and they are not necessarily

00:54:07 related to what you're doing in a different step, then that can be very useful.

00:54:12 The Hatch functionality where you can define virtual environments with only the dependencies

00:54:18 that you need for the specific task, like creating the documentation or checking style things.

00:54:25 Excellent.

00:54:25 All right.

00:54:26 Well, you can see there are many more tabs on my web browser of things I would like to

00:54:30 bring up and chat with you about on this topic.

00:54:32 But at the same time, we are out of time and it's getting late for there in Germany.

00:54:37 So maybe we'll call it a wrap here.

00:54:41 But before we get out of here, how about a recommendation for a Python package or project

00:54:46 that you think is cool?

00:54:47 I thought about this since there are lots of people who always suggest so many nice packages.

00:54:52 But what I'm really using a lot is MKDocs material for building documentation without a lot of work.

00:54:59 I've just did that today since especially if you work on a project with like, which is difficult

00:55:06 to explain to other people and you want to have one place and not use Confluence or other tools

00:55:13 for documentation.

00:55:14 This is a very nice tool to use.

00:55:16 Yeah, it looks great.

00:55:17 And more than a static site, it says, sets up search and all kinds of cool things for it.

00:55:22 And it's very easy to use.

00:55:24 I think even for beginners, that is a very easy way to set up a nice documentation for your package,

00:55:30 which you can build now with one of the tools we discussed.

00:55:34 Yeah, absolutely.

00:55:35 It is.

00:55:36 Okay.

00:55:36 Excellent presentation.

00:55:38 I really like the way you put this all together.

00:55:40 It's going to be super helpful for folks.

00:55:42 So yeah, thanks.

00:55:44 Final call action.

00:55:45 People are interested in this.

00:55:46 They want to learn more.

00:55:47 Maybe they should check out your article, which we'll link to the two conference talks you gave.

00:55:52 What else do you tell them?

00:55:53 Actually, that's the best way to go.

00:55:55 The other projects that we discussed on previous podcasts are also on my blog.

00:55:59 And definitely check out my GitHub profile, I think.

00:56:02 I have, for example, a repository on machine learning with machine learning tutorials, which is really popular.

00:56:09 So if you like machine learning, that might be useful as well.

00:56:12 We can link the GitHub repo, I guess.

00:56:14 Yeah, absolutely.

00:56:15 I'll put it in the show notes.

00:56:16 Anna Lena, thank you for being here.

00:56:18 It's always nice to have you on the show.

00:56:19 Thank you.

00:56:20 Have a good day.

00:56:21 This has been another episode of Talk Python to Me.

00:56:24 Thank you to our sponsors.

00:56:26 Be sure to check out what they're offering.

00:56:28 It really helps support the show.

00:56:29 When it comes to artificial intelligence, AI, what's good for trillion-dollar companies, isn't necessarily good for people.

00:56:37 That's the theme of Season 7 of IRL, Mozilla's multi-award-winning podcast, hosted by Bridget Todd.

00:56:43 Season 7 is all about putting people over profit in AI.

00:56:46 Check them out and listen to an episode at talkpython.fm/IRL.

00:56:51 Sentry.

00:56:53 They have a special live event, like a mini-online conference, where you can connect with the team and take a deep dive into different products and services every day for a week.

00:57:02 Join them for launch week, new product releases, exclusive demos, and discussions with experts from their community on the latest with Sentry.

00:57:10 You'll see how Sentry's latest product updates can make your work life easier.

00:57:15 Visit talkpython.fm/sentry-launch-week to register for free.

00:57:20 Want to level up your Python?

00:57:22 We have one of the largest catalogs of Python video courses over at Talk Python.

00:57:26 Our content ranges from true beginners to deeply advanced topics like memory and async.

00:57:31 And best of all, there's not a subscription in sight.

00:57:34 Check it out for yourself at training.talkpython.fm.

00:57:37 Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

00:57:42 We should be right at the top.

00:57:43 You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

00:57:53 We're live streaming most of our recordings these days.

00:57:56 If you want to be part of the show and have your comments featured on the air, be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

00:58:04 This is your host, Michael Kennedy.

00:58:05 Thanks so much for listening.

00:58:07 I really appreciate it.

00:58:08 Now get out there and write some Python code.

00:58:10 I'll see you next time.

00:58:10 Bye.

00:58:11 Bye.

00:58:12 Bye.

00:58:13 Bye.

00:58:14 Bye.

00:58:14 Bye.

00:58:14 Bye.

00:58:15 Bye.

00:58:15 Bye.

00:58:15 Bye.

00:58:15 Bye.

00:58:15 Bye.

00:58:15 Bye.

00:58:15 Bye.

00:58:16 Bye.

00:58:17 Bye.

00:58:17 Bye.

00:58:17 Bye.

00:58:17 Bye.

00:58:17 Bye.

00:58:17 Bye.

00:58:18 Bye.

00:58:18 Bye.

00:58:19 Bye.

00:58:19 Bye.

00:58:20 Bye.

00:58:21 Bye.

00:58:21 Bye.

00:58:22 Bye.

00:58:23 Bye.

00:58:23 Bye.

00:58:24 Bye.

00:58:25 Bye.

00:58:26 you you you you Thank you.

