00:00:00 You know the two questions I ask at the end of each episode?

00:00:02 What's your favorite editor for writing Python code?

00:00:05 And what less well-known PyPI package do you recommend?

00:00:08 Well, this time, we're going to make an entire episode out of what's your favorite editor.

00:00:13 You'll meet Don Jayamane, who created the wildly popular and open-source Python add-in for Visual Studio Code.

00:00:19 That's not the Windows-only Visual Studio, but Microsoft's free cross-platform editor.

00:00:25 This is Talk Python To Me, episode 101, recorded January 23, 2017.

00:00:31 Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:01:02 This is your host, Michael Kennedy.

00:01:04 Follow me on Twitter, where I'm @mkennedy.

00:01:06 Keep up with the show and listen to past episodes at talkpython.fm and follow the show on Twitter via at Talk Python.

00:01:12 This episode is brought to you by Talk Python Training and Hired.

00:01:17 Be sure to check out what we both have to offer during our segments.

00:01:20 It helps support the show.

00:01:21 Don, welcome to Talk Python.

00:01:24 Hi, Michael. It's a pleasure to be here.

00:01:25 It's great to have you here.

00:01:26 You know, we're going to talk about Visual Studio Code.

00:01:29 And I know Visual Studio and Python, while they do have the Python tools for Visual Studio,

00:01:35 that's not what we're talking about.

00:01:36 Typically, people think of Visual Studio as this thing being a Windows thing,

00:01:40 and mostly for like .NET and Windows C developers and so on.

00:01:45 But what we're going to talk about is a really amazing plug-in or extension

00:01:50 that you've created for Visual Studio Code, which is actually a cross-platform editor based on JavaScript,

00:01:56 that Microsoft has released.

00:01:57 So we're going to talk about a pretty excellent Python editor that you've had a lot of influence in creating.

00:02:04 Yes.

00:02:04 This is a little project that I've worked on.

00:02:08 And as you mentioned, Visual Studio Code is not Visual Studio IDE that's been developed for Windows.

00:02:15 Most people think it is, but it's more of a cross-platform editor.

00:02:19 Yeah, it's really, really nice.

00:02:20 And it's gaining so much traction.

00:02:22 And the Python tools you built were really cool.

00:02:24 So I want to talk about those.

00:02:25 But let's do first things first.

00:02:26 Let's hear about your background.

00:02:27 How did you get into programming in the first place?

00:02:29 Back in 2000, that's when I started a course in computer science.

00:02:33 And I was looking for a permanent role in permanent part-time role in information technology.

00:02:38 And that's when I joined a company named EDMS.

00:02:42 It's basically a branch of a company in Australia named QA Software.

00:02:47 The way they hired people was they just took kids just after year 12.

00:02:52 And you were given an IQ test.

00:02:54 If you did well, you were hired.

00:02:56 So they hired me.

00:02:58 That's a really interesting way to get a job.

00:03:00 They're just like, look, we know you're smart.

00:03:02 You're driven.

00:03:03 And we think we could teach you programming.

00:03:05 Yes.

00:03:06 So it was a really great place.

00:03:08 And as the name says, QA Software, it stands for Quality Assured Software.

00:03:15 So they were really keen on ensuring the programmers were thought the very basics on programming.

00:03:22 That was writing unit tests, writing technical specifications, and writing quality-issued code.

00:03:29 So it was really great.

00:03:31 It had a very great foundation.

00:03:33 And I started learning.

00:03:34 I started programming with Visual Fox Pro.

00:03:37 Again, I don't know if many people know about that language.

00:03:41 It was...

00:03:41 Yeah.

00:03:41 You know, actually, I don't know if they do.

00:03:43 So it's kind of like an access sort of language for databases, right?

00:03:47 Can you maybe tell people what that is?

00:03:48 Yes, that's exactly right.

00:03:49 It started out as Fox Pro.

00:03:51 And then, if I'm not mistaken, Microsoft bought it over and turned it into Visual Fox Pro.

00:03:57 So initially, they had Visual...

00:04:00 I think it was Visual Studio 5.

00:04:03 And then they added Fox Pro onto it.

00:04:05 And then it became Visual Studio 6 because it became one of the six little components to Visual Studio.

00:04:11 Eventually, they killed it off.

00:04:12 Yeah, it's not a thing anymore.

00:04:16 But yeah, it was a big language.

00:04:18 Oh, yes.

00:04:18 For sort of rapid development, right?

00:04:20 Oh, yes.

00:04:21 Personally, I thought it was better than Visual Basic.

00:04:23 So...

00:04:24 Okay.

00:04:24 Yeah, yeah.

00:04:25 Very interesting.

00:04:26 So where'd you go from there?

00:04:28 From there?

00:04:29 So I stayed there for a couple of years.

00:04:31 And eventually migrated to Australia in 2004.

00:04:36 And so while I was at that place that we were using .NET as well.

00:04:41 So once I migrated to Australia, then I was just using .NET primarily.

00:04:47 And .NET and SQL.

00:04:50 Yeah.

00:04:51 All right.

00:04:51 Interesting.

00:04:51 Those are a long ways away from Python.

00:04:54 So what got you into Python?

00:04:56 Simple.

00:04:57 It was the Raspberry Pi microcontroller.

00:04:59 Or I don't know what it's called exactly.

00:05:01 Or microcomputer.

00:05:04 Once I heard about the Raspberry Pi, I just wanted to get my hands on one of those.

00:05:09 And I learned that the best language to work on Raspberry Pi was Python.

00:05:16 And I figured that was a really great excuse or great reason to learn another programming language.

00:05:23 And yes, that's how I learned it.

00:05:24 Yeah, that's really nice.

00:05:25 Did you end up building anything interesting or just sort of play around with Raspberry Pis?

00:05:29 Initially, I just started playing around with it.

00:05:32 But my first project was building a little timer slash remote for my pool motor.

00:05:39 Because I had just moved in.

00:05:40 And the pool pump wasn't...

00:05:44 It had to be turned on manually.

00:05:45 The timer wasn't working.

00:05:46 So I had to hook in the Raspberry Pi with a timer.

00:05:51 And that would turn the pump on and off late in the night.

00:05:55 Nice.

00:05:56 Did you internet enable it so you could see the status of it or anything?

00:05:59 Oh, no, no, no.

00:06:00 It was just a timer and then just turned the pump on and off.

00:06:03 And I was just happy with that.

00:06:05 That's really cool.

00:06:06 I love how you used it to solve a real world problem.

00:06:09 You're like, you know what?

00:06:10 I can program this silly pump.

00:06:14 And so there were times when it would...

00:06:16 There's a little thing called a creepy crawly as well.

00:06:20 It would get stuck or tangled up at night.

00:06:23 So this was just the early days.

00:06:24 I didn't know how to look after a pool or maintain a pool.

00:06:27 So I'd even hooked up a camera to this so I could see in the middle of the night whether it's functional or whether it's stuck somewhere.

00:06:34 And yes, that's what I did.

00:06:37 I don't have any of those things anymore, but it was just in the first couple of months.

00:06:42 Oh, that sounds really cool.

00:06:43 How did you find learning Python to be?

00:06:45 Did you pick it up pretty easily?

00:06:47 Yes.

00:06:47 Amazingly really simple language.

00:06:50 Initially, the only thing that I found annoying was the indentation.

00:06:55 So blocks of code had to be intended.

00:06:58 So coming from other languages, I just felt that was a little weird and took me, I guess, a week or two to get used to that.

00:07:05 I just felt it was...

00:07:08 Initially, I thought it was a poor language having to do that.

00:07:10 But over time, I realized it was a really very powerful and very, I would say, a very cool language.

00:07:16 Yeah, that's really cool.

00:07:17 I had a similar experience.

00:07:19 I think a lot of people who come from C-based languages where blocks are curly braces and parentheses and things like that.

00:07:26 I just...

00:07:27 You're so used to white space not mattering.

00:07:29 That it's really...

00:07:30 It catches you off guard and you're like, wait, that's crazy.

00:07:33 But once you realize that editors really, really help you, they kind of make that almost transparent or invisible and they manage it and you don't have to.

00:07:41 Well, then all of a sudden, it's pretty sweet once you get your mind around it.

00:07:45 I absolutely prefer that kind of programming now.

00:07:49 But I remember it being a bit of a mind shift the first time I saw it, too.

00:07:52 Interesting.

00:07:53 Okay, cool.

00:07:55 So let's talk about Visual Studio Code and your plugin.

00:07:59 We mentioned a little bit about Visual Studio Code.

00:08:03 It's built on something that I actually am a fan of.

00:08:06 It's this thing called Electron.

00:08:07 So can you maybe give us the history of Electron and its maybe weird intersection with Microsoft?

00:08:12 Electron started out as a project that...

00:08:15 What's this GitHub word called?

00:08:17 Yeah, GitHub, I think, yeah.

00:08:18 They started out...

00:08:19 It didn't start out as a standalone project.

00:08:21 Initially, they built...

00:08:22 To my knowledge, they built Atom.

00:08:24 And then they realized, hey, wait a minute.

00:08:25 We've got this really cool framework that can build desktop applications.

00:08:29 And from there, they took out parts of Atom and built Electron.

00:08:33 So basically, if you would look at it, Atom is built on top of Electron.

00:08:40 And so for some time, people had been using Atom to build extensions.

00:08:44 And basically, that turned into an editor.

00:08:46 Microsoft came along and they realized, oh, we could do the same thing because we need to provide an editor for C# and a couple of other languages as well.

00:08:57 So they came in and took Electron as the basis for Visual Studio Code.

00:09:02 Yeah, that's interesting.

00:09:03 I mean, it used to be called even Atom Shell, right?

00:09:05 Before they were like, okay, it needs its own name, right?

00:09:08 Which is really interesting.

00:09:11 You know, I guess the origins...

00:09:13 It just seemed really weird to me that Microsoft, the company, is coming along and shipping one of their major new projects on Chrome and Node.js.

00:09:23 It does not think like where...

00:09:27 It's not where I thought they would be focusing, but it's a cool thing.

00:09:30 Yes.

00:09:31 It's interesting that you mentioned Chrome and Node.js.

00:09:33 For people who don't really know what Electron is, the best way to describe it is it's a desktop application built using Chrome and Node.js.

00:09:42 So again, if people don't know what Node.js is, it's just JavaScript.

00:09:46 That's pretty much it.

00:09:47 Yeah, it's interesting.

00:09:49 And it packages it up and you just get like a .app on your Mac or whatever and you could care less or you don't really know that it is unless like you actually know the internals.

00:09:59 And one of the things you said was interesting was how it makes like heavy use of extensions to give it any functionality.

00:10:07 Yes, that's Atom.

00:10:09 Atom uses a lot of extensions.

00:10:11 Basically, there's not much built or baked into the extension apart from the editors.

00:10:18 This is where Visual Studio Code differs significantly.

00:10:21 Microsoft came in and they had the benefit of hindsight.

00:10:25 So they could see where Atom and Sublime had their drawbacks and they built Visual Studio Code to resolve those issues.

00:10:33 For instance, Atom had some serious problems with editing or loading of large files and Visual Studio Code did not.

00:10:40 One of the major reasons for people adopting Visual Studio Code was because of its efficiency in dealing with large files.

00:10:46 Yeah, and if you had to categorize it in sort of its size on one hand and sort of the, I just run it in the terminal, very lightweight.

00:10:54 We've got things like Vim.

00:10:56 We've got sort of middle-sized, I guess, tooling like Sublime Text.

00:11:01 I guess maybe throw Atom in there.

00:11:04 And we've got heavier weight things that do many, many things but are quite large applications like PyCharm or Wing IDE or Visual Studio even itself.

00:11:15 Where do you think Visual Studio Code falls in this category?

00:11:19 Somewhere halfway there.

00:11:21 I would say in the middle because of its debugging capabilities and integration with the Git and a couple of other capabilities.

00:11:30 So it's a very mature and very capable editor.

00:11:34 So I would have to say it's definitely halfway there.

00:11:37 Sure.

00:11:37 Okay.

00:11:38 Yeah, I mean, it seems like Sublime Text but a little bit larger in terms of size but not a full-blown IDE and maybe in like how it feels when you work with it.

00:11:46 That's correct.

00:11:47 Yes.

00:11:47 Okay.

00:11:48 So people may be wondering, what's all this about on this Python show?

00:11:53 But let's talk about your Python plugin for Visual Studio.

00:11:56 And it's just called Python for Visual Studio Code, right?

00:11:59 Yes, it is.

00:12:00 Yeah.

00:12:00 And when I first saw that, oh, cool.

00:12:02 Because, you know, when I first started playing Visual Studio Code, it didn't support Python.

00:12:06 And so, like, the white space indentation was not working right.

00:12:09 And I'm like, oh, this is not going to work.

00:12:10 Put that away.

00:12:11 And then I checked back.

00:12:12 I talked to some of the guys that mentioned it.

00:12:16 And I'm like, oh, let me have a look at this.

00:12:17 And then I found your plugin.

00:12:19 I'm like, wow, this thing is actually really rich and nice.

00:12:22 So, first of all, let's start by how many downloads does it currently have?

00:12:26 Before that, how old is it?

00:12:28 It's a little over a year old.

00:12:29 If I remember correctly, I started work on this sometime in late 2015, somewhere around November or December 2015, late night to early mornings of December 2015.

00:12:42 So, it's just over a year old now.

00:12:47 Okay, cool.

00:12:48 So, now, with that in mind, how many downloads does it have?

00:12:50 It's got over a million downloads.

00:12:52 So, if I were to be a bit more accurate, maybe 1,150,000 downloads.

00:12:58 So, yeah.

00:12:59 Yeah.

00:13:00 That probably, that number is climbing.

00:13:01 And that's just, you know, that really got my attention because I'm like, wow, you know, how many people really use Python and Visual Studio Code?

00:13:07 Come on.

00:13:07 And then I realized this is like the second most popular extension or something.

00:13:12 And it's really, really used.

00:13:14 And as I looked into it, there's a lot of features there.

00:13:17 Yes.

00:13:18 As you mentioned, it is really surprising.

00:13:20 Surprising because, one, it's, this is a Microsoft product, Visual Studio Code.

00:13:26 And the most popular extension is the C# extension.

00:13:31 So, one would have expected the next most popular one to be something to do with, I don't know, maybe TypeScript or something else.

00:13:38 However, it's Python.

00:13:40 So, it just shows that Python is really up there in terms of popularity with language.

00:13:45 To me, it was something very new.

00:13:48 That's not what I was expecting at all.

00:13:50 Yeah.

00:13:50 That's really surprising.

00:13:51 Yeah.

00:13:52 Yeah.

00:13:52 And there were others in the community, too, who were really surprised to see, hey, Python's really doing very well.

00:13:57 It's really interesting.

00:13:59 Yeah.

00:13:59 That's, it must have felt really good to put out something that got over a million downloads.

00:14:04 And you have over a million people using it.

00:14:06 That's amazing.

00:14:07 Yes, indeed.

00:14:08 So, what got you, you said back in late 2005, you started working evenings and, you know, skipping sleep and stuff.

00:14:15 What got you started?

00:14:17 Like, why are you like, ah, this thing must exist.

00:14:19 I have to create it.

00:14:20 Were you like me?

00:14:21 You're like, I wish this would, like, indent my code correctly.

00:14:23 But you actually took some action and made something happen?

00:14:25 This is, I would say, I was primarily looking for a really cross-platform editor.

00:14:31 Where is it?

00:14:32 Cross-platform.

00:14:33 I was working, I was using a Mac at that time.

00:14:35 I was learning to do some development on a Mac.

00:14:37 And Windows as well.

00:14:39 So, I was still working on Raspberry Pi.

00:14:42 As I was jumping between the two platforms, I wanted a consistent look and feel for the editor.

00:14:49 So, PyCharm was the only one that fit the box.

00:14:51 However, as a Visual Studio developer, someone who's been using Visual Studio all my life, I just preferred that look and feel.

00:15:00 So, though PyCharm was great.

00:15:02 I still preferred something else.

00:15:04 I guess, in the back of my mind, I was still hoping for something from Microsoft.

00:15:08 And when Microsoft released Visual Studio Code, I was using that as a replacement for Notepad++.

00:15:16 When they released that, I was really looking forward to them providing the API for developers to build extensions.

00:15:24 As soon as they did that, I thought to myself, oh, this is a great opportunity.

00:15:29 Let's just provide an extension for developers, at least myself, who can use it to edit Python files on both a Mac and Windows.

00:15:38 And I was also looking for a really simple project to work on while I was at home using Node.js because I wanted to play around with Node.js.

00:15:48 So, I was looking for a project to work on.

00:15:52 Right.

00:15:52 So, obviously, the tooling is for Python developers, but what type of code did you write to create this thing?

00:15:59 I'd say primarily Node.js.

00:16:01 So, it was really like writing almost like an Electron app, right?

00:16:07 Yes.

00:16:07 Yeah, okay.

00:16:08 That is correct.

00:16:08 So, if you want to write any extensions for Visual Studio Code, you've got to do it in Node.js.

00:16:16 So, Node.js is the framework.

00:16:18 The language is TypeScript.

00:16:21 So, TypeScript is a language that Microsoft have developed.

00:16:25 It's basically a superset of JavaScript.

00:16:28 So, those who don't know what TypeScript is.

00:16:30 Right, like adding static typing to JavaScript in a sense.

00:16:33 A little bit more, too.

00:16:34 Precisely.

00:16:34 Yeah.

00:16:35 Yes.

00:16:35 That's right.

00:16:36 Okay.

00:16:36 Yeah, interesting.

00:16:37 Interesting.

00:16:37 So, you talked about PyCharm.

00:16:40 You said there was Sublime.

00:16:41 Like, what...

00:16:42 Why didn't you pick and just go like, oh, let's use Sublime over here.

00:16:45 Like, that works on both platforms as well.

00:16:47 For some reason, I never did like Sublime.

00:16:49 I don't know.

00:16:50 I guess it's just the font and the way the IntelliSense was displayed.

00:16:54 I don't know.

00:16:55 As I mentioned, as a Visual Studio developer, the look and feel was completely different.

00:17:00 So, I preferred the way Visual Studio laid things out.

00:17:04 Whereas Sublime, I was still getting used to using editors.

00:17:08 PyCharm was an IDE.

00:17:10 Sublime was an editor and it just didn't feel rich and powerful enough to me.

00:17:15 So, it was just preference.

00:17:17 All right.

00:17:17 Sounds good.

00:17:18 So, your project, when I first talked to you, it had over 600 stars on GitHub.

00:17:23 That's a pretty serious project.

00:17:26 Yeah.

00:17:26 635.

00:17:27 So, what's it been like to...

00:17:30 And all the code for this is on GitHub, right?

00:17:32 Yes, it is.

00:17:33 Yeah.

00:17:33 Okay.

00:17:33 Cool.

00:17:34 What's it been like to run a project with that much popularity?

00:17:38 Have you been getting a lot of feedback from the community or people helping out?

00:17:42 Oh, yes.

00:17:43 I've been getting quite a lot of feedback.

00:17:44 And, like, for instance, plenty of people provide the feedback while submitting issues on GitHub or maybe on the extensions page.

00:17:54 And it's very humbling to know that this little pet project of mine has made a big difference in the development experience of people in the professional workspace.

00:18:03 So, for instance, when people say that they've switched over from Sublime or some other IDE because of Feature X, Y, Z, it feels really great.

00:18:13 And there are others who talk about the efficiency of the extension or they say that they love Visual Studio Code.

00:18:19 And for me, it's a person who just loves Microsoft products.

00:18:22 I'm like, oh, wow, this is really good.

00:18:24 Something Microsoft has done really well and is finally doing well.

00:18:28 Yeah, it's definitely interesting in that they seem to have given up on the idea of, like, the answer is always a Windows.

00:18:36 Now, what's the question?

00:18:37 You know?

00:18:38 And just trying to be more part of the community.

00:18:41 And I think this is one of the places where we're starting to see some cool things out of that.

00:18:48 This portion of Talk Python is brought to you by us.

00:18:50 As many of you know, I have a growing set of courses to help you go from Python beginner to novice to Python expert.

00:18:56 And there are many more courses in the works.

00:18:58 So please consider Talk Python training for you and your team's training needs.

00:19:03 If you're just getting started, I've built a course to teach you Python the way professional developers learn by building applications.

00:19:09 Check out my Python jumpstart by building 10 apps at talkpython.fm/course.

00:19:14 Are you looking to start adding services to your app?

00:19:17 Try my brand new consuming HTTP services in Python.

00:19:20 You'll learn to work with RESTful HTTP services as well as SOAP, JSON, and XML data formats.

00:19:26 Do you want to launch an online business?

00:19:28 Well, Matt McKay and I built an entrepreneur's playbook with Python for Entrepreneurs.

00:19:32 This 16-hour course will teach you everything you need to launch your web-based business with Python.

00:19:37 And finally, there's a couple of new course announcements coming really soon.

00:19:41 So if you don't already have an account, be sure to create one at training.talkpython.fm to get notified.

00:19:46 And for all of you who have bought my courses, thank you so much.

00:19:50 It really, really helps support the show.

00:19:52 So how many contributors are working on the project?

00:19:55 If you were to look at the total number of contributors, I believe there are around 200, sorry, 29 contributors.

00:20:01 Okay, cool.

00:20:01 And do you have the concept of a core development team?

00:20:06 Or are you just managing it yourself among all these people?

00:20:08 Or how does it work?

00:20:09 Unfortunately, it's just myself.

00:20:11 So the other contributors just contribute maybe some of them just fixes or typos here and there.

00:20:17 And I would say the major contribution has been something like adding a new linter, for instance, adding prospector to the extension.

00:20:27 So it's just here and there.

00:20:30 But I have to acknowledge the fact that they are significant contributions.

00:20:33 Yeah, I'm sure it's great to have all the help.

00:20:35 So, yeah, you brought up some of the features.

00:20:38 Let's go ahead and talk about them.

00:20:39 Like one of the things that you have in there is linting.

00:20:42 And you said like somebody added just prospector.

00:20:45 So what's the story?

00:20:46 And maybe just for people who don't know, like what is linting?

00:20:48 And then tell people about some of the options there.

00:20:51 Yes.

00:20:51 Linting is basically just the ability to see what all of the error messages are, the errors that you could have in your program.

00:21:00 For instance, if you've written a Python code, block of code, if something isn't indented properly, or if you've got some typos, some keywords are misspelled.

00:21:09 So this is where the linters would come in and tell you before the program is run, hey, these are potential issues.

00:21:16 Here are some warnings or these are some definite errors.

00:21:20 So you've got different sorts of categories.

00:21:22 So basically a linter is kind of like a pre-compiled time error checker.

00:21:28 There's a number of tools in the Python space.

00:21:31 Which ones are built in or do you have support for?

00:21:33 In the Python space, there are plenty of packages that provide linting capabilities.

00:21:37 So for instance, if I'm not mistaken, the most popular ones are PyLint, Prospector, PyDocStyle, Flake8, and so on and so forth.

00:21:46 So if I were to look at these linters, there are two categories.

00:21:49 One is that checks for formatting.

00:21:51 And the other one is that looks at your code itself to check whether there are errors within the code.

00:21:56 Yeah.

00:21:57 So on one hand, you might have like PEP 8 checks, right?

00:22:00 For like there should be no space after this comma.

00:22:03 There should be no extra parentheses or whatever.

00:22:05 And the others might be like, here's an unused variable.

00:22:08 Is that a problem, right?

00:22:10 Those are maybe the two categories if you put some examples on it, right?

00:22:13 That's correct.

00:22:14 So what's really great is I don't really have to write much code because people or communities out there have built these tools.

00:22:22 All I'm doing is utilizing those and displaying those results through Visual Studio Code, just surfacing it through Visual Studio Code in a consistent manner.

00:22:32 So this is where, again, Visual Studio Code really excels because it provides a consistent look and feel across all languages.

00:22:39 So whether you're using C#, TypeScript, or any other language, the error messages would be displayed in the same way.

00:22:46 I see.

00:22:46 And you just, your extension plugs into that error message notification system or whatever, right?

00:22:51 Yes.

00:22:52 Yes, it does.

00:22:53 Nice.

00:22:54 Okay.

00:22:54 So linting, built-in, that's pretty awesome.

00:22:56 And lots of support for different linters.

00:22:58 Cool.

00:22:58 And then we have IntelliSense or autocompletion, including support for type-ins, right?

00:23:04 Yes.

00:23:04 So, yeah, let's talk about that a bit.

00:23:06 This one's supported, again, through a Python package that's been developed by David Halter.

00:23:12 Is it David Halter?

00:23:13 Sorry if I'm not pronouncing his name correctly.

00:23:16 But, yes, it's a great little package because all of the hard work has been done by this particular package.

00:23:24 Oh, nice.

00:23:25 And it's called JEDI, right?

00:23:26 Yes, it's called JEDI.

00:23:27 Okay.

00:23:27 So it was developed by this individual.

00:23:30 And this particular package is used today in a couple of other editors as well.

00:23:36 I know Atom uses it.

00:23:37 Sublime uses it.

00:23:38 Including, if I'm not mistaken, PyCharm 2 uses it to provide IntelliSense when you're debugging Python code.

00:23:46 It's a serious package that's used by some major players out there.

00:23:50 So, and I've made use of it as well to provide the IntelliSense capabilities for the extension.

00:23:57 It's not just IntelliSense.

00:23:58 It gives you the ability to inspect your code and understand the structure of your code as well.

00:24:04 Yeah, I was pretty impressed, like, how much of the structure of, like, if I'm working on a package, it understands my code, not just the standard library and things like that.

00:24:12 Yes.

00:24:13 So as mentioned, it's a really great, great little package.

00:24:16 So kudos to David.

00:24:19 Yeah, and that's awesome that you're not necessarily starting from scratch, but you're able to build on this really mature thing.

00:24:24 And benefits to or improvements to Jedi are improvements to your tooling as well, right?

00:24:30 Yes.

00:24:30 I think it was sometime mid to late last year that's when he added support for PEP 484 in a new version.

00:24:39 And yes, so I got the benefit of supporting PEP 484 in the extension.

00:24:46 So people don't really realize that the support comes through another Python package.

00:24:51 They just assume, oh, wow, the extension now supports this.

00:24:54 Well, in fact, yes, it does.

00:24:56 But again, thanks to the Jedi plugin.

00:24:58 Yeah, that's really, really cool.

00:25:00 You can look good just building on the shoulders of giants, as they say, right?

00:25:04 Yes, yes.

00:25:05 Cool.

00:25:05 And then you have support for PySpark and things like Jupyter and IPython notebooks, too.

00:25:10 Yes.

00:25:11 What's that look like?

00:25:12 Support for PySpark and Jupyter is really very basic at this stage.

00:25:17 So what we do is we can execute certain code against one of these engines and the results,

00:25:25 whether they are just raw output or whether you've got graphical output can be displayed.

00:25:29 So you could have two forms of graphical output.

00:25:32 One is just a static graph or the other one is a graph that you can interact with or interactive graphs.

00:25:39 So those are supported as well.

00:25:41 And the reason this was added is because sometime around mid to late last year, I noticed,

00:25:46 oh, we, when I say we, it's back then I was working at Microsoft.

00:25:50 We noticed that there was quite a lot of interest in the data science community for Python developers.

00:25:57 And that's when we felt, okay, we need to add some tooling around that space so that we could draw the data science community into the Visual Studio editor.

00:26:08 And also the Azure team, the Azure data science team does a lot of stuff with Python as well, right?

00:26:14 That's correct.

00:26:14 They use the PySpark.

00:26:16 They use PySpark for some of their work.

00:26:18 In fact, they had made some contributions to the extension to resolve some issues to ensure it worked properly with PySpark.

00:26:25 All right.

00:26:25 So another thing you have, obviously, is auto-indenting.

00:26:28 Like how much work was that?

00:26:30 How did you pull that off?

00:26:31 That's the one thing where I'm like, oh, I can't use Visual Studio Code for Python,

00:26:35 even though I thought it was cool because it just didn't understand how to work with the structure, right?

00:26:40 It's interesting that you ask how much work went into that.

00:26:42 In fact, very little work went in there.

00:26:44 But if I'm not mistaken, maybe half a page of code or even less.

00:26:48 Again, this is where Visual Studio Code excels.

00:26:51 It just provides the capability for me to give it the rules for indentation with the use of regular expressions.

00:26:59 And that's exactly what I did.

00:27:01 And Visual Studio Code just handles the rest.

00:27:04 So it was a really simple bit of a simple block of code.

00:27:09 And Visual Studio Code does everything.

00:27:11 Okay.

00:27:11 Yeah.

00:27:12 Very, very cool.

00:27:13 It's nice that that's built in, right?

00:27:15 That makes adding these extensions to be cool.

00:27:17 Oh, yes.

00:27:18 It made my life easy as well.

00:27:19 So I wouldn't have to just tab, tab.

00:27:21 And it was just awesome.

00:27:22 Cool.

00:27:23 And you also have like code formatting, like code cleanup, kind of almost like linting.

00:27:28 Yes.

00:27:28 Code formatting, just like linting, as you mentioned.

00:27:31 We've got two popular linters out there, Autopef8 and YapF.

00:27:35 So once again, I'm not doing much of the work, if at all any.

00:27:39 I'm just making use of some pre-built packages.

00:27:42 So take the packages that someone out there has built and provide the capabilities in Visual Studio Code.

00:27:51 So the developer using Visual Studio Code can choose the format of choice, either Autopef8 or YapF.

00:27:57 And they could configure it as well.

00:27:59 They could configure Autopef8 or YapF by using the corresponding configuration files and adding it into the project directory.

00:28:06 Oh, great.

00:28:07 Yeah.

00:28:07 I just put like a config file right there and it just works.

00:28:09 It just works.

00:28:10 That's correct.

00:28:10 That is the intention.

00:28:11 Yes.

00:28:12 That's nice.

00:28:12 And it integrates with the command line that way as well.

00:28:14 So like if you do it in Visual Studio Code, it'll pick up the config files, but also like automated builds or something, huh?

00:28:21 Yes.

00:28:21 So when developing this extension, one of the main requirements was people should be able to use either PyCharm or Sublime or whatever editor they prefer.

00:28:33 We're not trying to restrict users to keep using Visual Studio Code.

00:28:38 There are a few places where you'd have to add custom settings into Visual Studio Code, but as much as possible, you're not tied to Visual Studio Code.

00:28:47 Yeah, that's a really great goal or thing to keep in mind.

00:28:50 Nice.

00:28:51 And you have pretty decent refactoring support as well.

00:28:55 Not all the refactorings maybe, but the most popular ones, right?

00:28:58 Yes.

00:28:58 What does it support?

00:28:59 The most popular ones that we felt was necessary was renaming a method name or function or variable.

00:29:08 So it's rename and extracting variables and extracting methods.

00:29:11 So those are the three main or two main refactoring capabilities that we wanted to add.

00:29:16 And once again, I didn't have to do much in there.

00:29:21 I just made use of a popular package named Rope.

00:29:25 So this is Rope for Python.

00:29:26 And that provides all of the refactoring capabilities.

00:29:30 Apart from the rename and extract refactoring capabilities, there's also the sorting of imports.

00:29:39 So again, I just made use of iSort package, which does the sorting of the imports.

00:29:44 So yes.

00:29:45 Oh, that's excellent.

00:29:46 You said that there was something about the maintainer with Rope that it's a great package, but it was like it had gone dormant or something?

00:29:52 Yes.

00:29:53 When I started using Rope, I came across a couple of issues.

00:29:56 And then what I did was, as any other developer was, just raise those issues on GitHub and then notice that it wasn't getting looked at.

00:30:04 That's when I learned that it had gone fairly dormant.

00:30:06 And after getting in touch with the contributor, I learned that he was unable to maintain it.

00:30:14 And that's when they were looking for, he was looking for another contributor.

00:30:17 So it was, I've got to bring this out because it's really sad that you've got such popular tools that's in the public space that are used by, well, hundreds of users and plenty of people rely on them.

00:30:28 And you only have just one contributor.

00:30:33 So it's really important that we all pitch in and try to pitch in as contributors.

00:30:38 And it can be hard, too.

00:30:40 You know, like there have been a few things where I'm like, oh, this just needs a little tweak and it would be nicer.

00:30:45 And I'll do like, I'll raise an issue on GitHub or I'll do a pull request.

00:30:48 It feels the worst when you like, you go fork the repo, you'd make the fix.

00:30:53 You're like, yeah, this is like really good now.

00:30:54 And you do a PR and like people aren't even bothered to even like merge it, you know, you're like, oh, but it's like so close.

00:31:02 Just press merge.

00:31:03 It won't even conflict, you know.

00:31:04 And yes.

00:31:05 And what do you do?

00:31:06 I mean, it's tough.

00:31:07 But on the flip side, right?

00:31:09 Like these people have lives beyond the projects that they create.

00:31:13 And so you can't really be too upset with somebody for not maintaining a thing for free.

00:31:18 Yes.

00:31:19 Yes.

00:31:19 It's just the challenge of open source.

00:31:23 Do you think that's going to grow?

00:31:24 I sort of feel like as open source grows and more people come into this community and this way of working, that it's going to actually be a bigger problem.

00:31:32 I wouldn't say it's a problem.

00:31:33 It's just the responsibility falls on us, on us developers who are using it.

00:31:38 So we've got to pitch back.

00:31:40 We've got to pitch in as well.

00:31:43 So it's a little bit of give and take.

00:31:45 So if we're going to take something from the community, we need to give something back as well.

00:31:48 So we need to be, we need to take the time to contribute, to help the contributors, to resolve issues or, you know, look at some of the questions.

00:31:58 Because I can see quite a lot of that happening in my project.

00:32:02 Plenty of people just come in and they answer questions that other people have.

00:32:06 And it's really great.

00:32:07 It's really great.

00:32:08 I guess that's what we need a lot more of.

00:32:10 Yeah.

00:32:10 Nice.

00:32:11 Okay.

00:32:12 Another thing that you have built in is viewing references and code navigation and viewing signatures and stuff.

00:32:18 And that's, you see, that also is basically just standing on the shoulders of Jedi, right?

00:32:23 That's correct.

00:32:24 Again, Jedi is one package that's developed by David.

00:32:27 So it provides the ability to look at your code.

00:32:31 So when you say look at your code, it gives you the structure of your code.

00:32:34 And that's where you have the ability to look at the references, code navigation, or signatures.

00:32:39 Nice.

00:32:40 So code navigation and signatures.

00:32:41 That's pretty explanatory.

00:32:43 Viewing references.

00:32:44 You mean if I write a function or a class or something showing all the places in which it's used in the rest of the code across my other files.

00:32:52 That's correct.

00:32:52 Okay.

00:32:53 Yeah.

00:32:53 Pretty excellent.

00:32:54 Yes.

00:32:54 So this is where, again, Visual Studio Code is really great because it provides a very consistent way of navigating or viewing references.

00:33:03 So whatever, irrespective of your language, the UX is consistent.

00:33:07 Whereas if you were to go to something, if I'm not mistaken, in Atom, there is no consistent UX for viewing references.

00:33:15 Because each developer, each author of extensions, they've got to build their own UI around these things.

00:33:21 So if I'm not mistaken, that's how it is.

00:33:24 It is pretty cool that I could be there working on, like, a Python web app, and the CSS support and the JavaScript support and the Python support and the HTML support all have the same basic gestures and UIs and way of doing things.

00:33:38 That's a cool extension system they've built in.

00:33:41 Very nice.

00:33:42 Yes.

00:33:42 So you have some pretty serious debugging support.

00:33:44 When I read that, I thought, wow, you guys are really adding a lot of interesting things.

00:33:49 So on your page, it says you have excellent debugging support, including remote debugging over SSH, multiple threads, Django, Flask, and so on.

00:33:57 How did you pull that off?

00:33:58 I have to say this is one of my favorite features.

00:34:00 I say it's one of my favorites simply because it's something that I use quite a lot of.

00:34:04 And it made my life a lot easier as well.

00:34:07 Initially, I have to say, just add a little bit of history.

00:34:10 The debugger was built on PDD.

00:34:13 And then once I added the debugger, I noticed that plenty of people were using it and commenting on some of the issues.

00:34:19 And then I realized, oh, wow, plenty of people are using this.

00:34:22 And back then, I was looking for a way to improve the debugging capabilities.

00:34:26 And at that time, I was using both PyCharm and PTVS.

00:34:31 So that's Python tools for Visual Studio.

00:34:33 When I looked at the source code for PTVS, I realized that their debugger was built completely in Python.

00:34:40 And that's when, you know, a light bulb went ding.

00:34:44 And I was like, oh, since I've used all of these packages for IntelliSense and Linting, I could do the same here as well.

00:34:51 So all I did was took this Python package, Python code, and built a debugger around that.

00:34:58 So again, thanks to Microsoft and the PTVS team, the support for debugging is awesome in this, simply because of the awesome work that they've done in PTVS.

00:35:09 Yeah, that's really cool.

00:35:10 You're able to pull it out of there.

00:35:11 And the Python tools for Visual Studio, that's like the big, more heavyweight IDE that runs on Windows.

00:35:16 That's also open source, isn't it?

00:35:18 Yes, it is.

00:35:19 Yeah, okay, so that was pretty easy for you to kind of merge those things together.

00:35:23 Yes.

00:35:23 This portion of Talk Python To Me is brought to you by Hired.

00:35:38 Hired is the platform for top Python developer jobs.

00:35:41 Create your profile and instantly get access to 3,500 companies who will work to compete with you.

00:35:46 Take it from one of Hired's users who recently got a job and said, I had my first offer on Thursday after going live on Monday, and I ended up getting eight offers in total.

00:35:54 I've worked with recruiters in the past, but they've always been pretty hit and miss.

00:35:57 I tried LinkedIn, but I found Hired to be the best.

00:36:00 I really liked knowing the salary up front.

00:36:02 Privacy was also a huge seller for me.

00:36:05 Sounds awesome, doesn't it?

00:36:06 Well, wait until you hear about the sign-in bonus.

00:36:08 Everyone who accepts a job from Hired gets $1,000 sign-in bonus.

00:36:12 And as Talk Python listeners, it gets way sweeter.

00:36:14 Use the link Hired.com slash Talk Python To Me, and Hired will double the signing bonus to $2,000.

00:36:20 Opportunities knocking.

00:36:21 Visit Hired.com slash Talk Python To Me and answer the door.

00:36:32 And of course, unit testing with all the frameworks.

00:36:35 Yes, unit testing.

00:36:36 It supports the three major frameworks.

00:36:39 Unit tests, built into Python.

00:36:42 There's pytest and NoseTest.

00:36:44 So initially, I started out with just adding support for unit tests, and then found that adding support for pytest and NoseTest was very easy as well.

00:36:53 So just as the linters and formaters, these are just treated as separate packages.

00:37:00 So all we do is we just need, if one were to run unit tests as a Python developer,

00:37:05 you could just go into the command prompt and run these tests.

00:37:08 So that's pretty much what I am doing.

00:37:10 I'm just running these things in a shell and capturing the output and surfacing it to the user.

00:37:17 Does it appear in like a console, or does it do more like highlight some of the code with coverage,

00:37:23 or like does it affect the UI in the editor, or is it more like here's the console and the outcome?

00:37:28 At this stage, it's primarily in a little console, because there is Microsoft, if I'm not mistaken,

00:37:34 they do not have a consistent, they do not have a UI for unit tests.

00:37:40 So back when I was working on this extension, which was last year, they did not have anything.

00:37:44 So they were looking at adding support for some UI, because this is something they need across other languages as well.

00:37:51 So just as, you know, viewing references or debugging, where you've got consistent look and feel for these capabilities,

00:37:58 it's something that they didn't have for unit tests.

00:38:00 So at this stage, it's just console window.

00:38:03 Okay, yeah, that makes sense.

00:38:04 And there's like a little console that can be in the bottom of the editor, a little like PyCharm, right?

00:38:08 Yes.

00:38:09 However, what we have added is for each class of method, there is something new.

00:38:15 What we've got is we've got something called code lenses.

00:38:18 Basically, it's just this floating link or floating text that you can click on to run or debug a unit test.

00:38:26 It's fairly easy.

00:38:28 Once you've got a block of code, and if it's a unit test, you've got some link within the code that you can click on.

00:38:33 Oh, that's cool.

00:38:34 There's like a little button next to the test method in your unit test itself.

00:38:38 And you can just click that and run the one?

00:38:40 Yes, that's correct.

00:38:41 Oh, sweet.

00:38:42 Do you have any support for profiling?

00:38:44 At this stage?

00:38:45 No, it's been it's something that's been requested by a number of people.

00:38:48 So it's something that I'm looking at adding.

00:38:50 So no, it isn't supported at this stage.

00:38:53 Sure.

00:38:53 Okay.

00:38:54 One thing I thought was cool that seems like you support pretty well is virtual environments and Python versions and things like that.

00:39:02 Do you want to talk about how whether you've got that or how it works?

00:39:05 Yes.

00:39:05 Virtual environments are supported.

00:39:07 Now, initially, it took me a while to get this working because I would say it took a couple of iterations to get this working.

00:39:14 The way virtual environments are supported is we and the extension.

00:39:19 All I do is it's up to the developer to define the location of the virtual environment.

00:39:25 So you could have virtual environments within the project directory or somewhere else.

00:39:29 So I have no idea.

00:39:31 I'm not going to try looking for it.

00:39:32 It's up to the developer to define it in the settings file.

00:39:36 So this is one of those places where you have custom Visual Studio code-specific settings.

00:39:41 It's a file named settings.json.

00:39:44 You define the path and the name of the setting is Python path.

00:39:48 So you define the name, the path to the Python interpreter.

00:39:52 To make lives easier, what we've got is we've got a little shortcut.

00:39:57 So you could go into this particular menu item and launch a particular command palette which says select the Python interpreter.

00:40:06 So what we do is, in the extension, try to look for the common locations where you could have your Python interpreters or your virtual environments, whether it's in the current directory or some other known locations.

00:40:18 We look through those directories and list it out to you.

00:40:22 So all you have to do is, from that list box, you just select it and done.

00:40:25 If it's not there, you'd have to just manually type it.

00:40:28 And yeah, that's it.

00:40:30 Yeah, that's pretty nice because I do almost all of my, at least my web projects, almost all of them from, you know, each website gets its own virtual directory.

00:40:38 And having that there, I'm like, oh, I don't know if I can edit this thing because of Visual Studio code because it's all the stuff that's installed over here.

00:40:45 I'm like, oh, wait.

00:40:45 Yeah, I totally have support for that.

00:40:47 It's very cool.

00:40:48 Yeah, and you also have like little Python terminals and local help.

00:40:51 Those are all great.

00:40:52 And then I guess the last major feature is our snippets.

00:40:55 What are snippets and what are the nice ones you got?

00:40:59 Snippets, well, I wouldn't say they're nice ones, but it's basically certain snippets like having a try snippet or just for a class.

00:41:09 So those are the kind of snippets that I have in there.

00:41:12 I wouldn't say there are some really great snippets, but it's something that just makes life a little bit easier.

00:41:17 I see.

00:41:17 So I can type like try and hit tab and we'll expand out to try colon pass, accept expression as a dinner vehicle.

00:41:24 All right.

00:41:24 Or I could do, can I do like width?

00:41:27 Yeah, like width blocks.

00:41:28 And yeah.

00:41:30 So just the common structures probably of if and whatnot.

00:41:34 That's correct.

00:41:35 Okay.

00:41:36 Yeah, very nice.

00:41:37 Can we add our own?

00:41:39 If we're like, oh, this is cool.

00:41:40 I'd like to have it do this when I hit tab and it doesn't.

00:41:43 Good question.

00:41:43 I have no idea.

00:41:45 I haven't had this question been asked by anyone on GitHub.

00:41:49 So I wouldn't be surprised if it were possible.

00:41:53 However, I'm not sure.

00:41:54 I have no idea to answer the question.

00:41:56 I don't know.

00:41:57 Yeah.

00:41:57 That's a good question, though.

00:41:58 All right.

00:41:59 Well, maybe I'll file a GitHub issue and you can say yes here or no.

00:42:02 We'll add it.

00:42:03 Awesome.

00:42:04 So it sounds to me like to some degree you've done, obviously, a large amount of work.

00:42:09 But the really what makes it look like it would be extreme work, like the remote debugging, multi-threading over SSH shells and things like that come from other packages, actually.

00:42:21 And so how much of this is like pulling other packages together?

00:42:24 I would say majority of it, if not all of it, has been done by the other packages.

00:42:28 Because as I mentioned earlier, the code is primarily written in Node.js or TypeScript because that's what Visual Studio Code is built on top of.

00:42:37 And to provide the capabilities for individual language features like IntelliSense, debugging, linting, all of that is done through individual Python packages.

00:42:48 So all I'm doing is just making use of them.

00:42:51 That's really cool.

00:42:51 How do you do the interprocess communication between like Python, the Python packages, and the Node.js stuff that is really running Visual Studio Code?

00:43:01 So that's fairly simple for something such as linting or code formatting.

00:43:05 All I'm doing is in the background, I'm just launching a particular process, a Python process, and running the corresponding Python package against a particular file or particular block of code.

00:43:17 And I just capture the output and display it.

00:43:20 For some of them, it's not as straightforward as that.

00:43:23 For instance, with the debugger, what I've got to do is I start the Python package, which is the debugging package, and communicate with that process using sockets.

00:43:33 Okay.

00:43:34 So, for instance, it's different.

00:43:35 Like, for instance, debugging and running unit tests, I'd use sockets.

00:43:39 And the others, it's just basically simple communications, just reading the output from the…

00:43:45 Just shell out and capture it, yeah.

00:43:47 Yes.

00:43:47 Okay.

00:43:48 How much time did you spend on this, getting this all up and running, do you think?

00:43:53 Like, how long from December until it's more or less looking like what it is now?

00:43:56 Around May, it was… We had quite a lot of the capabilities built in, apart from running unit tests and adding support for PySpark and Jupyter.

00:44:07 So, until then, there was plenty of support for linters, debugging, and code formatting.

00:44:14 So, I would say half of it around May, and then the remainder was completed around November of last year.

00:44:24 So, just under a year.

00:44:26 It took just under a year to complete everything.

00:44:28 That's… Yeah.

00:44:29 And how many… That was mostly you, right?

00:44:31 Yes.

00:44:32 That's correct.

00:44:32 So, yeah.

00:44:33 That's a lot of cool stuff that you got out in that short amount of time.

00:44:37 Nice.

00:44:37 It was really interesting working on this.

00:44:39 So, as I mentioned, when I started out this pet project of mine, it was just early.

00:44:44 I was in the morning, and then over time, I learned, oh, it was getting really popular.

00:44:49 And then that kept motivating me because there are plenty of people using it.

00:44:53 Like, oh, well, this is really doing well.

00:44:55 Let's just keep churning more code, putting more features in there.

00:44:58 Yeah.

00:44:59 That's awesome.

00:45:00 I think two really motivating things about writing software are one of them is you get to either work with a really cool technology

00:45:07 or the thing that you're actually building is a cool technology or some combination thereof.

00:45:12 And the other is that lots of people use and appreciate whatever it is you build, right?

00:45:17 Yes.

00:45:18 I think the most important thing was the appreciation because even though there was plenty of people downloading it,

00:45:25 I mean, getting to know that people appreciate the work that you've done, it makes a big difference.

00:45:30 Yeah.

00:45:30 I'm sure.

00:45:31 And so, what other, you know, if you get something with a million downloads, what other opportunities come with that?

00:45:36 Like, have people reached out to you to do cool stuff?

00:45:40 I did get one opportunity and that was Microsoft.

00:45:43 They approached me around early May last year.

00:45:47 They approached me and they asked me if I would like to join the Visual Studio Code team and work full time on this extension

00:45:53 because they saw that it was a great extension and they wanted me to spend full time on it so that it could be polished and it would be feature complete.

00:46:02 When I say feature complete, we could take the time out to iron out some wrinkles and ensure it integrates well with Visual Studio Code.

00:46:09 And also, if there was something that I wanted added into the co-product, I could, you know, do that myself as well.

00:46:16 That's pretty awesome.

00:46:17 So, that was, yeah, it was really great.

00:46:19 So, that's when I gave up my 10-year role at a previous place and I was like, oh, yes, I will jump ship.

00:46:26 Yeah, you get to just get paid to work on such a cool project.

00:46:29 I've seen them do that before, hire people to basically continue to work on something they saw really valuable that was integrating kind of in the style.

00:46:37 That's great.

00:46:38 Yes.

00:46:38 Are you still working there on it or are you kind of got it where it used to be?

00:46:42 Oh, so, my contract ended last year.

00:46:45 So, it was just a six-month contract, but no regrets there.

00:46:48 So, enjoyed the time while working there, working for Microsoft.

00:46:52 And so, I've moved on since then.

00:46:54 Okay, cool.

00:46:54 Now, I want to ask you about the other extensions you've written because you have a habit of writing Visual Studio Code extensions, apparently.

00:47:02 There's some cool ones.

00:47:03 Yes.

00:47:03 But before I do, before I do, I want to ask you, is there a way to write extensions for your Python thing?

00:47:08 Like, if I had something I wanted to add, is there a way, like, how can I change or extend what you've done?

00:47:15 Do I have to go into a PR directly against it or is there some other way to get in there?

00:47:19 It's just a PR.

00:47:20 So, pull the report down to your local machine and then make the changes.

00:47:25 So, as I mentioned, it's all done in Node.js.

00:47:28 So, you've got to use TypeScript to make the changes.

00:47:30 Nice.

00:47:31 Okay.

00:47:31 Very cool.

00:47:32 So, all right.

00:47:32 Let's just really briefly touch on some of the others that you've written.

00:47:36 I'll just go through the major extensions that I've developed.

00:47:39 One is the Java debugger.

00:47:42 Back then, I was playing around a little bit with Java as well.

00:47:45 And I was looking around for the ability to debug Java code.

00:47:53 And I really hated Eclipse or the others because it was just too bulky and it took a long time to load up.

00:47:59 By then, I had some experience with PDB and I figured I could build a Java debugger as well using the similar capability, similar concepts.

00:48:08 And that's exactly what I did.

00:48:10 So, I built a Java debugger.

00:48:12 It's not as popular, but there are plenty of people using that.

00:48:15 And the other extension is create unique IDs.

00:48:19 Basically, it's just the ability to create unique IDs like GUIDs or random numbers and it inserts it into the text.

00:48:25 Then there's BOA or Bauer.

00:48:28 It's just a little tool to restore BOA packages.

00:48:34 It was popular in the early days when Visual Studio Code didn't have an integrated terminal, but now it does.

00:48:40 So, for Python developers, basically, it's a tool to restore dependencies from your requirements of TXT file.

00:48:47 That's pretty much it.

00:48:48 So, if you've got your terminal, you can do it using your terminal.

00:48:51 That's why it's no longer popular.

00:48:54 The next most popular extension that I have is GitHistory.

00:48:58 So, I built this again for personal use.

00:49:03 I was after an extension that I could use to look at the GitHistory log.

00:49:08 So, I built this one again using TypeScript and it's just a wrapper around the Git.

00:49:13 And at this stage, it's quite popular.

00:49:17 If I were to bring numbers, it's the 12th most popular extension out there with around 350,000 downloads.

00:49:25 And I have to say that currently it's being maintained primarily by Mike Surkopf.

00:49:32 I'm not sure how it's pronounced.

00:49:34 He's the one who's looking at all of the contributions at this stage while I focus on Python and the others.

00:49:39 Yeah, that's cool.

00:49:40 Lastly, the other extension is jQuery code snippets.

00:49:43 That's a simple extension that gives you a lot of code snippets for jQuery.

00:49:48 Okay, yeah, that'd be really nice.

00:49:49 Are you working on any new ones?

00:49:51 There is one that I'm trying to work on.

00:49:54 I just haven't been doing much work on that for the past couple of weeks.

00:49:59 It's pulling the code which supports Jupyter out of the Python extension because there are other languages that could use the Jupyter kernel.

00:50:08 It's not just Python.

00:50:09 So, I'm just trying to pull that out so others could use that or other languages could make use of it.

00:50:16 Okay, yeah.

00:50:16 That'll be really nice to separate those if people want to use them in R or whatever.

00:50:21 Yes.

00:50:21 Okay, nice.

00:50:23 Well, I think people have a pretty good idea of this extension.

00:50:26 And it's all open source.

00:50:28 It's all free.

00:50:28 So, if you're looking to try a pretty seriously rich Python editor cross-platform Linux, OS X or macOS and Windows, then, you know, check out Visual Studio Code and go check out the extensions and pick.

00:50:43 Basically, you don't just pull up the extensions and you're like number two, right?

00:50:48 I guess search for Python if it doesn't show up.

00:50:49 There's more than just your extension for Python.

00:50:53 So, yours is – what's the exact name?

00:50:55 Is it – It's just Python.

00:50:57 Just Python.

00:50:58 Yeah.

00:50:58 So, you got the straight up name all by itself.

00:51:03 Awesome.

00:51:04 Okay.

00:51:04 So, let me ask you two questions before we go and then give you a chance to sort of let people know what they can do to get started or help out.

00:51:11 I'm not really expecting a surprise here, but what's your favorite editor when you write some Python code?

00:51:17 I would say it is Visual Studio Code simple.

00:51:20 It's something I can use across both the Mac and Windows, and it's very lightweight.

00:51:26 I can go to a different PC, just download it, install, done.

00:51:30 So, it's just super lightweight and easy to use.

00:51:33 Okay.

00:51:33 Yeah, very nice.

00:51:34 And favorite PyPI package?

00:51:36 I would say there are two.

00:51:37 One is the Jedi.

00:51:39 Well, it's not something that I use on a day-to-day basis on every project, but it's something that I've used in the Python.

00:51:47 And I really value that.

00:51:49 And as a developer, the favorite package would be requests.

00:51:54 Yeah.

00:51:55 That's definitely a popular one.

00:51:56 That's a really, really great package.

00:51:58 All right, Don.

00:51:59 So, final call to action.

00:52:01 Like, you're looking for people to work on this project, help out, give you feedback.

00:52:04 What can the listeners do?

00:52:06 Oh, yes.

00:52:06 Any contribution is really welcome.

00:52:08 At this stage, there are two major items that I need to work on.

00:52:12 One is profiling, and that doesn't look too complicated.

00:52:15 The other one is adding support for remote interpreters.

00:52:19 So, this is where you do not have Python installed locally, but it's running on a different machine, maybe on a Docker container or something.

00:52:28 And you're editing your Python files locally.

00:52:31 So, that's something that plenty of people have requested.

00:52:34 So, it's not just that.

00:52:35 So, any contribution, really welcome.

00:52:37 I'd really appreciate that.

00:52:38 All right.

00:52:39 And, yeah, the future for the extension, where are you going with this thing?

00:52:43 I'd just keep trying to extend it and adding more capabilities.

00:52:47 So, the way I do this is by looking at other IDEs and adding capabilities from there, for instance.

00:52:53 Looking at what Visual Studio or PDVS or PyCharm support, and I'd say, oh, maybe I could add that and try to plug it in here.

00:53:03 All right.

00:53:03 Very cool.

00:53:04 So, thank you for contributing this, Editor.

00:53:07 It's definitely got a lot of features, and it's pretty unique.

00:53:10 So, thanks for creating it, and thanks for sharing your story with everyone.

00:53:13 Thank you very much for having me, and thank you for sharing this with everyone else.

00:53:18 So, yes.

00:53:19 Absolutely.

00:53:19 Happy to.

00:53:20 It's a cool project.

00:53:21 Talk to you later.

00:53:21 This has been another episode of Talk Python To Me.

00:53:25 Today's guest has been Don Jayamane, and this episode has been sponsored by Talk Python Training and Hired.

00:53:32 Thank you both for supporting the show.

00:53:34 Are you or a colleague trying to learn Python?

00:53:37 Have you tried books and videos that just left you bored by covering topics point by point?

00:53:41 Well, check out my online course, Python Jumpstart, by building 10 apps at talkpython.fm/course to experience a more engaging way to learn Python.

00:53:50 And if you're looking for something a little more advanced, try my Write Pythonic Code course at talkpython.fm/pythonic.

00:53:57 Hired wants to help you find your next big thing.

00:54:00 Visit Hired.com slash talkpythontome to get five or more offers with salary and equity presented right up front and a special listener signing bonus of $2,000.

00:54:09 Be sure to subscribe to the show.

00:54:11 Open your favorite podcatcher and search for Python.

00:54:14 We should be right at the top.

00:54:15 Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

00:54:29 Corey just recently started selling his tracks on iTunes, so I recommend you check it out at talkpython.fm/music.

00:54:36 You can browse his tracks he has for sale on iTunes and listen to the full-length version of the theme song.

00:54:41 This is your host, Michael Kennedy.

00:54:43 Thanks so much for listening.

00:54:45 I really appreciate it.

00:54:46 Smix, let's get out of here.

00:54:48 Outro Music.

00:55:10 Thank you.

