WEBVTT

00:00:00.001 --> 00:00:03.200
Do you worry about your developer data science supply chain safety?

00:00:03.200 --> 00:00:08.420
All the packages for the Python ecosystem are much of what makes Python awesome,

00:00:08.420 --> 00:00:13.000
but they are also a bit of an open door to your code and machine.

00:00:13.000 --> 00:00:16.640
Luckily, the PSF is taking this seriously and hired Mike Fiedler

00:00:16.640 --> 00:00:20.160
as the full-time PyPI safety and security engineer,

00:00:20.160 --> 00:00:23.740
not to be confused with a security developer in residence,

00:00:23.740 --> 00:00:25.060
tapped by Seth Michael Larson.

00:00:25.060 --> 00:00:29.800
Mike Fiedler is here to give us the state of PyPI security

00:00:29.800 --> 00:00:31.660
and their plans for the future.

00:00:31.660 --> 00:00:36.880
This is Talk Python to Me, episode 435, recorded September 18th, 2023.

00:00:36.880 --> 00:00:54.460
Welcome to Talk Python to Me, a weekly podcast on Python.

00:00:54.460 --> 00:00:56.200
This is your host, Michael Kennedy.

00:00:56.200 --> 00:00:58.840
Follow me on Mastodon, where I'm @mkennedy,

00:00:58.960 --> 00:01:03.680
and follow the podcast using @talkpython, both on fosstodon.org.

00:01:03.680 --> 00:01:08.780
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.

00:01:09.240 --> 00:01:12.580
We've started streaming most of our episodes live on YouTube.

00:01:12.580 --> 00:01:20.120
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:20.860 --> 00:01:22.680
This episode is sponsored by Sentry.

00:01:22.680 --> 00:01:23.080
Sentry.

00:01:23.080 --> 00:01:25.020
Don't let those errors go unnoticed.

00:01:25.020 --> 00:01:25.920
Use Sentry.

00:01:25.920 --> 00:01:28.980
Get started at talkpython.fm/sentry.

00:01:28.980 --> 00:01:33.600
And it's also brought to you by us over at Talk Python Training.

00:01:33.600 --> 00:01:38.220
Did you know that we have over 250 hours of Python courses?

00:01:38.220 --> 00:01:39.400
Yeah, that's right.

00:01:39.480 --> 00:01:41.980
Check him out at talkpython.fm/courses.

00:01:43.360 --> 00:01:43.960
Hey, Mike.

00:01:43.960 --> 00:01:44.580
Hey, Michael.

00:01:44.580 --> 00:01:45.980
Welcome to Talk Python.

00:01:45.980 --> 00:01:46.960
I mean, it's awesome to have you here.

00:01:46.960 --> 00:01:48.240
Oh, thanks for having me.

00:01:48.240 --> 00:01:49.640
I'm really excited to be here.

00:01:49.640 --> 00:01:51.340
Yeah, I'm excited to have you.

00:01:51.340 --> 00:01:53.820
Always interesting to talk about security.

00:01:53.820 --> 00:01:56.580
I got to tell you, talking about security just makes me nervous.

00:01:57.240 --> 00:01:58.760
Oh, why is that?

00:01:58.760 --> 00:02:00.120
Well, two reasons.

00:02:00.120 --> 00:02:03.880
I feel like when you talk about security, you're kind of sticking your head up and people are like,

00:02:03.880 --> 00:02:05.160
let me see if I could whack that.

00:02:05.160 --> 00:02:07.860
You know, not everybody, but a few people in the world, right?

00:02:07.860 --> 00:02:09.020
But it is the internet.

00:02:09.020 --> 00:02:15.360
So if you take a very, very small percentage and multiply it by billions, it becomes non-zero.

00:02:15.360 --> 00:02:18.460
And then, you know, it's just one of those things.

00:02:18.460 --> 00:02:22.220
It's like trying to prove the absence of something.

00:02:22.220 --> 00:02:27.160
It's very hard to prove that you're not missing stuff some step.

00:02:27.160 --> 00:02:30.760
It's very hard to prove that you haven't, that there's not a, you know, you've got all the

00:02:30.760 --> 00:02:33.020
controls and there's not one control you forgot, right?

00:02:33.020 --> 00:02:35.740
In that regard, probably more so.

00:02:35.740 --> 00:02:36.860
It's pretty tricky.

00:02:36.860 --> 00:02:40.740
The way I've often thought about security is it's a spectrum, right?

00:02:40.740 --> 00:02:42.820
I used this quote a million years ago.

00:02:42.820 --> 00:02:47.620
I don't know who said it first, but the most secure computer is powered off and buried in

00:02:47.620 --> 00:02:50.440
six feet of under concrete, right?

00:02:50.440 --> 00:02:52.340
Like, but it's useless, right?

00:02:52.340 --> 00:02:55.480
Like it's very secure, but nothing in there is useful.

00:02:55.800 --> 00:03:01.340
So if we take that as like a crazy extreme of secure and say the most insecure computer

00:03:01.340 --> 00:03:06.440
is, you know, powered on, has zero password control connected to the internet and auto

00:03:06.440 --> 00:03:08.460
publishing IP data.

00:03:08.460 --> 00:03:10.540
So that way anyone can come and do whatever they want.

00:03:10.540 --> 00:03:11.440
All right.

00:03:11.440 --> 00:03:12.980
So that's the other end of the spectrum.

00:03:12.980 --> 00:03:14.620
That's a really bad situation.

00:03:14.620 --> 00:03:22.120
There's a fine balance that every software application system company has to kind of navigate

00:03:22.120 --> 00:03:28.240
to figure out where along those two crazy extremes, where do they fall and where are their kind

00:03:28.240 --> 00:03:31.420
of risk thresholds of tolerance are?

00:03:31.420 --> 00:03:34.940
Like, what would it cost me to add more security?

00:03:34.940 --> 00:03:39.940
Well, I could, you know, lock down all of my users and not allow them in unless they come

00:03:39.940 --> 00:03:43.440
to the front door and show a picture ID, right?

00:03:43.540 --> 00:03:48.000
Like, okay, if that's how we want to secure our building, that's one way to do it, but

00:03:48.000 --> 00:03:51.060
that'll slow down the ingress to our building.

00:03:51.060 --> 00:03:56.040
So we issue our employees badge cards and we assume that they act in good faith and they

00:03:56.040 --> 00:03:58.820
don't kind of lose them and report if they lose them.

00:03:58.900 --> 00:03:59.360
Oh, great.

00:03:59.360 --> 00:04:05.580
So that's kind of a middle ground where you kind of delegate some of the security to the

00:04:05.580 --> 00:04:10.400
individuals and, and just kind of, you have to figure out where, where your security

00:04:10.400 --> 00:04:15.560
is and what you're willing to do and sacrifice in order to get it.

00:04:15.560 --> 00:04:15.840
Yeah.

00:04:15.840 --> 00:04:17.060
I totally agree.

00:04:17.060 --> 00:04:18.380
Wild sidebar.

00:04:18.380 --> 00:04:24.880
I can't believe the internet in its early days was like you described, like no NAT firewalls

00:04:24.880 --> 00:04:30.440
that stopped direct access, no passwords, just, we might want to know who you are just

00:04:30.440 --> 00:04:34.120
so we can assign the files more conveniently to you, you know?

00:04:34.120 --> 00:04:34.620
Yeah.

00:04:34.620 --> 00:04:39.380
I hearken back to like the bulletin board days where you would dial up into somebody's random

00:04:39.380 --> 00:04:41.720
computer and you would do stuff in there.

00:04:41.720 --> 00:04:48.040
And I hosted a BBS and I interacted with others and it was like, we were all generally operating

00:04:48.040 --> 00:04:51.180
in good faith because we wanted to kind of play together.

00:04:51.180 --> 00:04:56.080
And not until much later did, you know, bad actors saying, you know what?

00:04:56.080 --> 00:05:01.220
I see how I could take advantage of this in a way that suits me and not you.

00:05:01.220 --> 00:05:01.540
Yeah.

00:05:01.540 --> 00:05:06.000
To which we started to say, all right, well then how do we control for these things today?

00:05:06.000 --> 00:05:11.660
That conversation comes into, you know, modern systems development of secure by design, right?

00:05:11.660 --> 00:05:14.500
Or, you know, a lot of folks will say shift left, right?

00:05:14.700 --> 00:05:20.660
Take security into account much earlier into the life cycle as opposed to, oh, we have

00:05:20.660 --> 00:05:22.140
to tack this on at the end.

00:05:22.140 --> 00:05:28.720
So I think, you know, the evolution of the internet was necessary for us to get to here.

00:05:28.720 --> 00:05:35.400
But as we're seeing newer protocols develop, those are taking this more secure by design approach.

00:05:35.400 --> 00:05:35.800
Yeah.

00:05:35.800 --> 00:05:37.620
In depth with layers.

00:05:37.620 --> 00:05:39.040
Were you a trade wars fan?

00:05:39.040 --> 00:05:39.940
Oh man.

00:05:40.160 --> 00:05:43.320
That's a name I have not heard in a very long time.

00:05:43.320 --> 00:05:44.240
That was a good one though.

00:05:44.240 --> 00:05:44.660
Yeah.

00:05:44.660 --> 00:05:48.980
I was very much a news and mail kind of relay kind of kid.

00:05:48.980 --> 00:05:50.500
Just wanted to see what was going on.

00:05:50.500 --> 00:05:57.520
Got very much involved in like understanding how the pretty good privacy would allow you to

00:05:57.520 --> 00:05:59.140
sign your messages.

00:05:59.140 --> 00:06:02.140
So that way other folks could believe that those were you.

00:06:02.140 --> 00:06:02.420
Right.

00:06:02.420 --> 00:06:04.500
And kind of like attest to truth.

00:06:04.500 --> 00:06:08.100
And that kind of fell apart because again, these are all imperfect systems.

00:06:08.840 --> 00:06:13.460
They were, but it was such a world full of possibilities back in those days.

00:06:13.460 --> 00:06:18.220
I remember even just sending a mail and getting it back through that whole systems of relays

00:06:18.220 --> 00:06:19.800
was, was mind boggling.

00:06:19.800 --> 00:06:25.940
At the time I was living on top of a mountain in, you know, in the middle of, of Israel and

00:06:25.940 --> 00:06:33.100
having that ability to connect with other people who there's no way I was ever going to see

00:06:33.100 --> 00:06:37.420
this variety of people back then, like, Oh, this opened the world.

00:06:37.420 --> 00:06:37.980
Right.

00:06:37.980 --> 00:06:38.280
Yeah.

00:06:38.280 --> 00:06:43.180
And that kind of fueled my, my desire to like, okay, what else can I do with these computers,

00:06:43.180 --> 00:06:43.980
with these systems?

00:06:43.980 --> 00:06:46.500
And Oh wait, there's this internet thing.

00:06:46.500 --> 00:06:46.940
All right.

00:06:46.940 --> 00:06:52.860
Well, my mom's going to be ticked off because I'm tying up the phone line for hours and like,

00:06:52.900 --> 00:06:54.440
all right, well, let's just have some fun.

00:06:54.440 --> 00:06:54.740
Yeah.

00:06:54.740 --> 00:06:56.640
That's when call waiting was the nemesis.

00:06:57.420 --> 00:07:03.080
So I bring, I kind of focus on that a little bit because while we're going to talk about

00:07:03.080 --> 00:07:08.880
things that are not necessarily positive or people trying to do negative things to something

00:07:08.880 --> 00:07:12.320
that we all love and has been a very positive thing for the Python ecosystem.

00:07:12.320 --> 00:07:16.640
I do want to point out mostly technology is doing really awesome things for people like

00:07:16.640 --> 00:07:19.620
opening these doors and educating and connecting.

00:07:19.620 --> 00:07:23.460
It's just some of the bad people, they like to connect and bad ways.

00:07:23.460 --> 00:07:27.280
So before we get too far down that let's, let's just have you give people a quick introduction

00:07:27.280 --> 00:07:28.040
about yourself.

00:07:28.040 --> 00:07:29.140
So, so they all know you.

00:07:29.140 --> 00:07:29.720
Hey everyone.

00:07:29.720 --> 00:07:30.540
I'm Mike Fiedler.

00:07:30.540 --> 00:07:36.080
I'm in New York city and that's where I've been living for the last 15 years, I say, I

00:07:36.080 --> 00:07:36.240
think.

00:07:36.240 --> 00:07:42.100
And I've been working in software development systems engineering for over 30 years across

00:07:42.100 --> 00:07:45.000
a couple of continents, variety of different companies.

00:07:45.000 --> 00:07:53.400
And for the past two years, I think, or three, I've been an active contributor to pypi.org.

00:07:53.400 --> 00:07:59.960
Prior to that, I was contributing to a lot of Ruby projects, the chef ecosystem, and I've

00:07:59.960 --> 00:08:04.300
worked at a variety of different companies, both startups and enterprises.

00:08:04.300 --> 00:08:10.580
You may have heard of some like Datadog, Warby Parker, MongoDB, Capital One, just kind of like

00:08:10.580 --> 00:08:14.760
working through different scenarios and learning different industries along the way.

00:08:14.760 --> 00:08:20.720
For the past year, I've been, well, since January, I've been focusing pretty much purely

00:08:20.720 --> 00:08:22.000
on pypi.org.

00:08:22.000 --> 00:08:25.140
You work for the PSF officially or what's the story?

00:08:25.140 --> 00:08:25.400
Yeah.

00:08:25.400 --> 00:08:28.400
As of August, I was hired to come on full-time.

00:08:28.400 --> 00:08:33.820
We thank you to our grants from Amazon Web Services, AWS, and some other folks that are

00:08:33.820 --> 00:08:37.640
chipping in to fund this PyPI safety and security role.

00:08:37.640 --> 00:08:46.380
But the PSF got some funding and I am the first full-time engineer to focus on pypi.org as a

00:08:46.380 --> 00:08:46.900
full-time.

00:08:46.900 --> 00:08:52.640
In the past, you've spoken to some other folks who were contracted out to build out different

00:08:52.640 --> 00:08:53.780
aspects or features.

00:08:53.780 --> 00:08:56.780
But now I'm a full-time maintainer.

00:08:56.780 --> 00:08:57.120
Yeah.

00:08:57.120 --> 00:08:58.000
That's really cool.

00:08:58.000 --> 00:09:03.820
You know, the developer in residence that Lucas Lange is playing, working in that role now.

00:09:03.820 --> 00:09:07.800
I feel like that was the first one of these types of roles, but now there's a couple, right?

00:09:07.900 --> 00:09:08.120
Yeah.

00:09:08.120 --> 00:09:13.320
I mean, the PSF is a nonprofit organization, very small staff.

00:09:13.320 --> 00:09:16.040
I think we number a total of 12.

00:09:16.040 --> 00:09:20.080
And of those 12, I think only about five of us are engineers.

00:09:20.840 --> 00:09:22.660
And everything else is volunteer-based.

00:09:22.660 --> 00:09:28.700
The first developer in residence program, which is Lukash, has been successful enough that we got

00:09:28.700 --> 00:09:35.920
another organization and grants to fund the security developer in residence, which Seth Larson is doing.

00:09:35.920 --> 00:09:40.800
And he's kind of focusing on the wider Python ecosystem as a whole.

00:09:40.960 --> 00:09:48.580
Whereas my role is very much more narrowly focused on PyPI.org and the ecosystem surrounding that.

00:09:48.580 --> 00:09:59.260
So that way, you know, we can focus on specific targets around security for the packaging world, as opposed to the Python core.

00:09:59.260 --> 00:09:59.660
Okay.

00:09:59.660 --> 00:10:07.460
Well, I do believe if you talk to people about why they like Python and especially why they stick with Python, the language is good.

00:10:07.860 --> 00:10:12.280
You can do cool stuff with it, but it's pip install, say your name.

00:10:12.280 --> 00:10:21.220
Say the name of your useful library that just brings so much and makes it so sticky and useful and productive.

00:10:21.220 --> 00:10:26.340
And so making sure that we have trust and pip install is really important.

00:10:26.340 --> 00:10:37.720
Last year, I think Dustin Ingram came on and talked about some of the stats that he had pulled together that speak about, like how much PyPI.org is used.

00:10:37.720 --> 00:10:44.020
That doesn't even count for the countless folk out there who are mirroring PyPI packages.

00:10:44.020 --> 00:10:50.200
So that way they can have a local cache, you know, deal with corporate firewalls or whatever need, right?

00:10:50.200 --> 00:10:51.540
But it's true.

00:10:51.540 --> 00:10:56.180
There's the very popular request library or the Django project.

00:10:56.180 --> 00:11:01.640
Pip install Django and you have all the things that you need to start a Django project, right?

00:11:02.280 --> 00:11:17.280
And the speed at which the folks who are kind of working on the tooling like pip or some of the other alternatives out there to enable users to get those packages is such a wonderful tool in anyone's toolbox.

00:11:17.540 --> 00:11:27.260
But then very often folks forget that there is an entire kind of package universe behind what they just did as a consumer, right?

00:11:27.260 --> 00:11:30.980
So pip install Django is, yeah, I got this thing.

00:11:30.980 --> 00:11:31.800
It installed it.

00:11:31.800 --> 00:11:32.840
Where did it install it from?

00:11:32.840 --> 00:11:33.900
How did it get there?

00:11:33.900 --> 00:11:35.080
Who put it up there?

00:11:35.080 --> 00:11:36.040
Why is it there?

00:11:36.040 --> 00:11:41.480
All of those questions, most people go their entire career with not even having to worry about or think about.

00:11:41.480 --> 00:11:43.240
They're just like on the consumer side.

00:11:43.240 --> 00:11:52.740
But then on the producer side or the package maintainer or project maintainer, there's a whole other slew of things that one has to worry about.

00:11:52.740 --> 00:11:55.780
Yeah, there's some stuff we'll talk about in there, which will be really fun.

00:11:55.780 --> 00:12:02.880
I think also there's the third level of just the people who run PyPI and the infrastructure and the stats behind it.

00:12:02.880 --> 00:12:06.260
I mean, maybe give us a quick, I kind of started us off down this path.

00:12:06.260 --> 00:12:15.240
Maybe give us a quick statement for those who don't necessarily know what PyPI is, but I think more interestingly, maybe try to give us some of the stats about the scale of things behind that.

00:12:15.240 --> 00:12:15.760
Sure.

00:12:15.760 --> 00:12:23.120
I mean, I haven't I haven't computed the runtime stats in a little bit, but PyPI.org stands for the Python package index.

00:12:23.120 --> 00:12:30.540
And it's distinct from other things that have PYPY in their name, which is a different runtime.

00:12:30.540 --> 00:12:41.700
But PyPI.org is a package index, very much kind of a grocery or a store where you would pick up ingredients for the thing that you want to bake.

00:12:41.700 --> 00:12:42.240
Right.

00:12:42.240 --> 00:12:44.020
If you wanted to bake a cake, you need your ingredients.

00:12:44.020 --> 00:12:46.360
What kind of flour are you going to use?

00:12:46.360 --> 00:12:47.100
What kind of sugar?

00:12:47.100 --> 00:12:47.880
Sure.

00:12:47.880 --> 00:12:49.420
There's different kinds of flour and sugar.

00:12:49.420 --> 00:12:50.500
Which one do you want?

00:12:50.500 --> 00:12:51.260
How do you know?

00:12:51.260 --> 00:13:03.860
You go and find one and where the package index helps is we store and publish all the different kinds of flour and sugar that you might want that other people have spent time developing.

00:13:03.860 --> 00:13:08.300
That doesn't mean that there is only one type of flour, but there is a variety.

00:13:08.300 --> 00:13:13.000
And we just make it easy for people to publish their projects.

00:13:13.000 --> 00:13:24.300
And as you've highlighted, there's over 480,000 projects live on PyPI right now and over 4.8 or almost 4.9 million releases.

00:13:24.740 --> 00:13:27.620
And a release is not a one-to-one to a project.

00:13:27.620 --> 00:13:29.180
A project may have many releases.

00:13:29.180 --> 00:13:36.440
So, for instance, if there is the requests library and they publish a new version, that comes as a release.

00:13:36.440 --> 00:13:39.140
And then beyond that, we have files.

00:13:39.140 --> 00:13:42.780
And files map to releases as you could have a source distribution.

00:13:43.120 --> 00:13:47.200
So, there's like literally the source code of a given release.

00:13:47.200 --> 00:13:51.060
Or you could have compiled wheels for different platforms.

00:13:51.060 --> 00:13:54.820
So, there's a lot more files than there are releases.

00:13:54.820 --> 00:13:57.120
And there's a lot more releases than there are projects.

00:13:57.120 --> 00:13:57.660
Yeah.

00:13:57.780 --> 00:14:01.700
And then on the last stat that we show on the front page is the users.

00:14:01.700 --> 00:14:06.840
We do have over 740,000 users on PyPI.org.

00:14:06.840 --> 00:14:13.140
That doesn't mean that these are active users, but they have at some point signed up for an account on PyPI.org.

00:14:13.140 --> 00:14:14.120
That's a huge number.

00:14:14.120 --> 00:14:16.660
And these are not people who might pip install a thing.

00:14:16.660 --> 00:14:22.940
These are people who, for some reason or other, are interested in potentially creating content for others to use.

00:14:22.940 --> 00:14:23.480
Exactly.

00:14:24.080 --> 00:14:29.360
Today, the only way you can publish a project on PyPI is by having a user.

00:14:29.360 --> 00:14:31.600
Or, you know, it starts with a user.

00:14:31.600 --> 00:14:32.700
There's other ways to publish.

00:14:32.700 --> 00:14:35.740
But you have to have a user to kind of start the process.

00:14:35.740 --> 00:14:46.640
And a lot of folks have started to kind of get the idea that if this project needs long-term maintainership, right, it's not just me.

00:14:46.640 --> 00:14:50.140
Maybe I should ask somebody else to help co-maintain this.

00:14:50.360 --> 00:14:55.160
So it's also not a one-to-one mapping of users to projects or releases or something like that.

00:14:55.160 --> 00:14:55.640
For sure.

00:14:57.900 --> 00:15:00.760
This portion of Talk Python to Me is brought to you by Sentry.

00:15:00.760 --> 00:15:03.400
You know Sentry for their error tracking service.

00:15:03.400 --> 00:15:09.640
But did you know you can take that all the way through your multi-tiered and distributed app with their distributed tracing feature?

00:15:09.640 --> 00:15:21.020
Distributed tracing is a debugging technique that involves tracking requests of your system, starting from the very beginning, like a user action, all the way to the back-end, database, and third-party services.

00:15:21.360 --> 00:15:26.400
This can help you identify if the cause of an error in one project is due to the error in another.

00:15:26.400 --> 00:15:31.300
Every system can benefit from distributed tracing, but they are especially useful for microservices.

00:15:31.300 --> 00:15:38.100
In this architecture, logs won't give you the full picture, so you can't debug every request in full just by reading the logs.

00:15:38.100 --> 00:15:46.300
Distributed tracing with a platform like Sentry gives you a visual overview about which services were called during the execution of certain requests.

00:15:47.040 --> 00:15:53.460
Aside from debugging and visualizing architecture, distributed tracing also helps you identify performance bottlenecks.

00:15:53.460 --> 00:16:02.340
Through a visual like a Gantt chart, you can see if a particular span in your stack took longer than expected and how it could be causing slowdowns in other parts of your app.

00:16:02.340 --> 00:16:07.340
Learn more and see some examples in the tracing section at docs.sentry.io.

00:16:07.340 --> 00:16:12.040
To take advantage of all the features of the Sentry platform, just create your free account.

00:16:12.500 --> 00:16:20.500
And for all of you Talk Python listeners, use the code TALKPYTHON, all one word, and you'll activate a free month of their premium paid features.

00:16:20.500 --> 00:16:25.140
Get started today at talkpython.fm/sentry-trace.

00:16:25.140 --> 00:16:28.220
That link is in your podcast player show notes and the episode page.

00:16:28.220 --> 00:16:31.520
Thank you to Sentry for supporting Talk Python To Me.

00:16:33.580 --> 00:16:40.520
Some of the changes coming, I think, allow for almost like a GitHub organization within PyPI, right?

00:16:40.520 --> 00:16:45.760
Rather than, well, we're going to create an account and that one account is for all of AWS, for example.

00:16:45.760 --> 00:16:48.820
Which is not really the right granularity, probably.

00:16:48.820 --> 00:16:51.520
It definitely isn't, but it historically has been, right?

00:16:51.580 --> 00:16:54.220
Like, that is just a feature we had never built.

00:16:54.220 --> 00:16:55.620
It was never a focus.

00:16:55.620 --> 00:17:04.180
But over the past year or so, I think we got funded to build out some of the organization's aspect.

00:17:04.180 --> 00:17:08.080
We have launched the community organizations.

00:17:08.340 --> 00:17:16.860
So that way, if you're running an open source project or an ecosystem there, you can sign up today and get an organization name.

00:17:16.860 --> 00:17:21.620
We are still working through a long backlog of organizations in order to approve them.

00:17:21.620 --> 00:17:24.440
It still requires an admin to do so.

00:17:24.440 --> 00:17:32.020
But we are still working through some of the complexities around corporate organizations when it comes to just as a nonprofit,

00:17:32.020 --> 00:17:36.700
how can we kind of figure out how to support corporations properly?

00:17:36.700 --> 00:17:47.140
Yeah, I've always thought that that was something of an opportunity to work with corporations more closely on PyPI and indirectly through the PSF.

00:17:47.140 --> 00:17:54.740
Your role exists because of these grants, because connections with certain high profile and high consumers of Python tech companies, right?

00:17:54.740 --> 00:17:56.220
Like AWS and others.

00:17:56.220 --> 00:18:04.380
But there's tons of companies that have things that support their product and at least their developers work with.

00:18:04.380 --> 00:18:09.540
And having a way to make them feel more at home on PyPI, I think is a good idea.

00:18:09.540 --> 00:18:19.160
Beyond what lots of organizations may do is, you know, have some of their in-house engineers contribute to PyPI.org, to the warehouse code base.

00:18:19.160 --> 00:18:20.240
It's open source.

00:18:20.240 --> 00:18:22.300
Everything you're looking at is open source.

00:18:22.300 --> 00:18:23.560
That's where I started.

00:18:24.080 --> 00:18:27.500
And that's the easiest way of like, oh, you want this thing?

00:18:27.500 --> 00:18:28.520
Open an issue.

00:18:28.520 --> 00:18:29.760
Talk about it with us.

00:18:29.760 --> 00:18:34.080
You know, if you want to go ahead and put some effort behind it, we'll welcome that too.

00:18:34.080 --> 00:18:45.040
But there is a wiki page out there of like packaging fundable improvement projects of like, all right, if you're considering throwing some money at the problem,

00:18:45.180 --> 00:18:48.960
here are some things we've thought about and would love your assistance with beyond that.

00:18:48.960 --> 00:18:54.740
Like there's other ways of just like straight up funding a role that can focus on a particular thing.

00:18:54.740 --> 00:18:55.160
Excellent.

00:18:55.160 --> 00:18:55.640
All right.

00:18:55.640 --> 00:18:58.540
Let's talk about supply chain issues.

00:18:58.700 --> 00:19:07.400
We were talking before we went live here that probably the biggest side of security or the biggest, at least from my perspective,

00:19:07.400 --> 00:19:15.780
what seems like a very huge opportunity for people to do bad things is to just upload malware basically of different ways, right?

00:19:15.780 --> 00:19:22.220
Sure, you could talk about hacking PyPI.org itself or other stuff, but I think that that's probably quite well covered.

00:19:22.220 --> 00:19:29.820
And it's more about, can I get tricked somebody and through various ways of installing something that they didn't.

00:19:29.820 --> 00:19:33.840
And that generally falls under the supply chain security sort of thing.

00:19:33.840 --> 00:19:43.880
So I wanted to just point out three examples that just show this is a industry wide problem, not necessarily a PyPI problem, but there is a PyPI manifestation of it, right?

00:19:43.880 --> 00:19:44.300
Yeah.

00:19:44.580 --> 00:19:55.780
And just to kind of lay the groundwork for folks who aren't familiar with supply chain attacks, the notion is that instead of an attacker trying to get onto your computer,

00:19:55.780 --> 00:20:07.060
they're going to go after something that they have a high probability of knowing is going to be on your computer through for the SolarWinds as kind of an administrative action.

00:20:07.060 --> 00:20:12.180
Well, you know, many, many SolarWinds were installed on servers, on computers.

00:20:12.180 --> 00:20:16.940
That's part of the supply chain that it's not, I'm not going directly after you.

00:20:16.940 --> 00:20:19.520
I'm going after something you consume, right?

00:20:19.520 --> 00:20:19.880
Right.

00:20:19.880 --> 00:20:22.440
And it can be very, very meta, right?

00:20:22.440 --> 00:20:27.560
So one of the examples that I would say that that falls under is this thing called Xcode Ghost.

00:20:27.560 --> 00:20:30.420
And so I believe this was primarily a Chinese problem,

00:20:30.800 --> 00:20:35.620
basically because in China there were a lot of App Store developers who weren't,

00:20:35.620 --> 00:20:39.200
either weren't registered as Apple developers or for whatever reason didn't go,

00:20:39.200 --> 00:20:44.760
maybe it's just a latency thing, didn't go through the App Store to get their Xcode or go through the developer portal.

00:20:44.760 --> 00:20:46.760
They just found like a local mirror.

00:20:46.760 --> 00:20:48.340
And what are those local mirrors?

00:20:48.340 --> 00:20:50.100
What could go wrong?

00:20:50.100 --> 00:20:54.200
I'll just get it from, you know, this IP address instead of apple.com.

00:20:54.200 --> 00:20:54.480
Right.

00:20:54.480 --> 00:20:54.840
Yeah.

00:20:55.080 --> 00:20:59.800
So what it did was it was a backdoored version of Xcode.

00:20:59.800 --> 00:21:03.740
So they weren't attacking even the things that people were using.

00:21:03.740 --> 00:21:06.960
They said, let's take over the developer's tool chain.

00:21:06.960 --> 00:21:09.640
So whatever they happen to be building, we don't know what that is,

00:21:09.640 --> 00:21:11.580
but we'll install a virus into their app.

00:21:11.580 --> 00:21:12.720
That app will go in the App Store.

00:21:12.720 --> 00:21:14.960
Then whoever installs that app will have it, right?

00:21:14.960 --> 00:21:16.680
These things get very indirect.

00:21:16.680 --> 00:21:23.200
This is kind of the challenge is like nobody until somebody surfaced this as an attack, right?

00:21:23.200 --> 00:21:25.340
Nobody thought this was a problem.

00:21:25.340 --> 00:21:32.480
This is kind of earlier to your comment of like, how do you disprove the existence of a problem?

00:21:32.480 --> 00:21:41.600
And a lot of it is just like, all right, we got to think about every aspect that goes into producing a given piece of software.

00:21:41.600 --> 00:21:47.900
But like the strongest answer here is don't download random stuff from people on the internet, right?

00:21:47.900 --> 00:21:52.360
Like I'm sure that this one in particular had a good reason for having a local mirror.

00:21:52.360 --> 00:21:57.020
But if you're going to local mirror it, then who is the local mirror and what is there?

00:21:57.020 --> 00:21:58.640
What are they doing, right?

00:21:58.640 --> 00:22:05.060
What kind of attestation or assurances do you have that they haven't modified anything in the process?

00:22:05.060 --> 00:22:10.680
It's very tricky because I might absolutely trust some company out there that's building a very popular.

00:22:10.680 --> 00:22:12.920
They have 10 million downloads like that.

00:22:12.920 --> 00:22:14.000
Surely that's fine.

00:22:14.000 --> 00:22:21.960
But one of their developers or one of their consultants to one of their developers may have, you know, misappropriately gotten their tools.

00:22:21.960 --> 00:22:26.520
And it's very hard from the outside to even know that that could be a problem.

00:22:26.520 --> 00:22:27.440
So these things are tricky.

00:22:27.440 --> 00:22:27.920
Yeah.

00:22:27.920 --> 00:22:39.320
I mean, the good news is that there's a large volume of security companies out there who, you know, make their bread and butter by scanning and looking for patterns that looks, you know, sneaky, tricky.

00:22:39.320 --> 00:22:43.240
And they spend a lot of investigative time digging into these.

00:22:43.480 --> 00:22:49.420
We get lots of reports from those types of folk of like, here, this is a new package.

00:22:49.420 --> 00:22:51.560
It looks, you know, fishy and here's why.

00:22:51.560 --> 00:22:53.880
And then we take action on those.

00:22:53.880 --> 00:22:54.480
I hear you.

00:22:54.480 --> 00:22:58.280
Hypo squatting was a big issue for a while.

00:22:58.280 --> 00:23:01.000
That's a form of supply chain attack.

00:23:01.000 --> 00:23:10.380
Like here, this Xcode ghost is we're going to get people to use a fake Xcode or a broken bad Xcode that they think is fine.

00:23:10.480 --> 00:23:19.500
Right. Instead of trying to say, take over Django, the package and do some malicious to it, try to take over Django or, you know, whatever.

00:23:19.500 --> 00:23:24.240
Right. Some common misspelling of that and upload that package.

00:23:24.240 --> 00:23:26.020
And you could even embed Django.

00:23:26.020 --> 00:23:26.760
Right.

00:23:26.760 --> 00:23:28.800
And so it still functions.

00:23:28.800 --> 00:23:32.080
It's like, I don't remember it being spelled this way, but it's working.

00:23:32.080 --> 00:23:33.200
So it got to be fine.

00:23:33.200 --> 00:23:33.600
Yeah.

00:23:33.600 --> 00:23:36.820
Typo squatting is, is, is very much a prevalent problem.

00:23:36.820 --> 00:23:37.240
Right.

00:23:37.240 --> 00:23:40.380
Because like, I can't prevent you from making a typo.

00:23:40.380 --> 00:23:41.800
Like I literally can't.

00:23:41.800 --> 00:23:43.820
If you type in Django, that's it.

00:23:43.820 --> 00:23:44.380
Game over.

00:23:44.380 --> 00:23:44.740
Right.

00:23:44.740 --> 00:23:50.080
What I can do is look or receive reports that Django exists.

00:23:50.080 --> 00:23:50.840
It looks malware.

00:23:50.840 --> 00:23:52.340
And let's just take that down.

00:23:52.340 --> 00:23:53.200
Let's not do that.

00:23:53.200 --> 00:23:53.460
Right.

00:23:53.460 --> 00:23:53.760
Yeah.

00:23:53.840 --> 00:23:59.560
The other sides we can do when it comes to type of, oh, well, you talked about typoscutting.

00:23:59.560 --> 00:24:16.440
And I was reminded of a, of, of an article I remember reading around DNS record bit flipping, where some computers, some browsers would not properly process a given bit in a memory register for a DNS record.

00:24:16.500 --> 00:24:28.720
So this author figured out what those bit flips would be for popular DNS names, registered those DNS names and started just harvesting traffic and said, you know what, this is not anything you can do.

00:24:28.720 --> 00:24:30.700
This is just how browsers and memory work.

00:24:30.820 --> 00:24:33.160
And that was, I don't know, about six, seven years ago.

00:24:33.160 --> 00:24:39.340
And I believe it's been fixed since, but it was like, yeah, there's sometimes there's just not anything that you did wrong.

00:24:39.560 --> 00:24:49.280
It's the ecosystem you're in is doing things in a way that you don't expect for something as nefarious as, as like DNS bit flipping.

00:24:49.280 --> 00:24:58.860
Like this is where like having outbound firewalls can help a whole lot to say, don't allow traffic that I didn't initiate in some manner.

00:24:58.860 --> 00:25:03.320
And if I did, have I, have I initiated the traffic to this address before?

00:25:03.320 --> 00:25:07.400
Do you remember zone alarm from the early two thousands?

00:25:07.400 --> 00:25:08.140
Yes.

00:25:08.420 --> 00:25:17.600
So this is before, this is, this harkens back to a slightly less naive version of, I can't believe there was no passwords on the accounts, just on the open internet.

00:25:17.600 --> 00:25:22.060
But windows 95, 98, there were no firewalls.

00:25:22.060 --> 00:25:34.040
And I, I was at a company that was based inside of a university where we all got ethernet and every computer that plugged in got its own IP address and all sorts of crazy stuff.

00:25:34.220 --> 00:25:35.800
But there were no firewalls.

00:25:35.800 --> 00:25:41.740
And I remember when that thing came out, I thought, you know what, maybe I'm just gonna go around and put this on all the dev machines.

00:25:41.740 --> 00:25:47.280
Like it's kind of insane that we have this incredibly insecure software just on the open internet.

00:25:47.280 --> 00:25:47.780
Yeah.

00:25:47.940 --> 00:25:53.680
And so I did in all the, when I started, it used to say, do you want to let such and such thing act as a server?

00:25:53.680 --> 00:25:57.740
Do you want to let IIS or, you know, engine X or this type of thing?

00:25:57.740 --> 00:25:58.600
Act sure.

00:25:58.600 --> 00:25:59.360
That can be a server.

00:25:59.360 --> 00:26:03.420
Then the next pop-up was, do you want to let notepad.exe be a server?

00:26:03.420 --> 00:26:06.740
I'm like, huh, that's not probably what it should be doing.

00:26:06.740 --> 00:26:07.000
Yeah.

00:26:07.000 --> 00:26:08.060
That doesn't sound right.

00:26:08.060 --> 00:26:09.380
That doesn't sound right.

00:26:09.620 --> 00:26:10.500
I said no.

00:26:10.500 --> 00:26:15.780
And then the next one and the next one, the whole company's notepad.exe were being servers.

00:26:15.780 --> 00:26:17.520
And I'm like, this can't be good.

00:26:17.520 --> 00:26:20.380
And it turned out they had something had infected it.

00:26:20.380 --> 00:26:23.580
And until I put on one of those outbound firewalls, how do you know?

00:26:23.580 --> 00:26:24.060
Right.

00:26:24.060 --> 00:26:25.580
No one knew there was no indication.

00:26:25.580 --> 00:26:27.500
We had, you know, super fast internet.

00:26:27.500 --> 00:26:29.160
It wasn't like it was dragging it down.

00:26:29.160 --> 00:26:31.000
I don't even remember what it was doing, but it was bad.

00:26:31.000 --> 00:26:38.700
The number one thing that I think we can learn from all of those things is that awareness is the biggest part of security.

00:26:38.700 --> 00:26:46.020
Because if folks aren't aware that downloading something from the internet could be a danger, then they're just going to download it and run it.

00:26:46.020 --> 00:26:56.180
If somebody who had a previously version of, you know, software working on their machine suddenly pop up and say, this has been modified.

00:26:56.180 --> 00:26:57.980
Are you sure you want to open it?

00:26:58.200 --> 00:27:01.160
So many of us just click OK without reading the dialogue.

00:27:01.160 --> 00:27:04.000
It's like, well, wait, think about that for just a second.

00:27:04.000 --> 00:27:11.480
Because you are the biggest kind of enabler and disabler of security, the human behind the keyboard.

00:27:11.480 --> 00:27:16.900
Because you probably have some administrative rights on your computer that allows you to do some stuff.

00:27:16.900 --> 00:27:26.640
And in the example with Notepad.exe, I think today, if we were to try to do that on some popular developer environment like VS Code,

00:27:27.160 --> 00:27:30.120
VS Code does act as a server in a lot of cases.

00:27:30.120 --> 00:27:34.780
So it's like, I don't know, should this work as an inbound server or not?

00:27:34.780 --> 00:27:35.220
I don't know.

00:27:35.220 --> 00:27:39.360
Maybe this is just part of the local language server that I need for autocomplete.

00:27:39.360 --> 00:27:39.920
Yeah.

00:27:39.920 --> 00:27:41.360
Or maybe it's not.

00:27:41.360 --> 00:27:43.600
It's getting more subtle every day.

00:27:43.600 --> 00:27:45.020
It is absolutely getting more subtle.

00:27:45.180 --> 00:27:48.980
Even Zoom had like a local loopback web server thing, I think, for a while.

00:27:48.980 --> 00:27:49.580
All right.

00:27:49.580 --> 00:27:55.400
So before we move off of this typo squatting part of the conversation, out in the audience, we have a pretty decent question here.

00:27:55.400 --> 00:27:59.800
What's the possibility of something like a verified badge for popular packages?

00:27:59.800 --> 00:28:02.200
I mean, if Twitter can charge $8 a month.

00:28:02.200 --> 00:28:02.880
No, I'm just kidding.

00:28:04.460 --> 00:28:06.520
I don't think they're called Twitter anymore.

00:28:06.520 --> 00:28:08.300
But...

00:28:08.300 --> 00:28:09.700
The artist formerly known as Twitter.

00:28:09.700 --> 00:28:10.140
Yeah.

00:28:10.700 --> 00:28:14.220
The challenge there is, what does verified mean, right?

00:28:14.220 --> 00:28:18.960
This is something that we kind of introduce some features later on that we'll talk about.

00:28:18.960 --> 00:28:22.340
But this notion of verified is like, well, verified by whom?

00:28:22.340 --> 00:28:23.780
Where does the level of trust?

00:28:23.780 --> 00:28:35.640
Because if a supply chain attack happens for Django, so if you were to like search Django here in PyPI.org, and we get Django, all right, we've got Django, the second line, Django 425.

00:28:35.640 --> 00:28:38.520
And if we were to enter there, like, how do we know?

00:28:38.520 --> 00:28:38.780
Yeah.

00:28:38.780 --> 00:28:40.000
This is a thing, right?

00:28:40.080 --> 00:28:50.680
So I could add a badge here, but that doesn't give me any confidence that any of the Django folk, which are, you know, great people, that one of them didn't get compromised and suddenly a new version was pushed.

00:28:50.680 --> 00:28:56.020
So verified, I guess, it's what does that mean to whom and why?

00:28:56.020 --> 00:29:04.780
Because the last thing I want to do is tell people, give them a false sense of security when, honestly, you're downloading software from the internet.

00:29:04.960 --> 00:29:15.560
If you don't have a process to vet what it is you're doing is doing the thing, then you should probably look at that aspect of a, we vetted this version of Django.

00:29:15.560 --> 00:29:16.560
We got these hashes.

00:29:16.560 --> 00:29:16.860
We got these hashes.

00:29:16.860 --> 00:29:17.740
We got these releases.

00:29:17.740 --> 00:29:19.140
We pin this dependency.

00:29:19.140 --> 00:29:20.900
We're happy with this.

00:29:20.900 --> 00:29:24.960
And then when you upgrade, you kind of do a similar evaluation.

00:29:25.160 --> 00:29:32.640
There's a bunch of projects out there like PiUp and safety and others that will publish, you know, and scan for advisories.

00:29:32.640 --> 00:29:40.300
There's also the PiPA advisory database for packages that we know have some problems with them.

00:29:40.300 --> 00:29:46.420
So that way you can use other tools to audit what you have installed to see if you have something smelly.

00:29:46.420 --> 00:29:59.820
But we are thinking about what it would look like to add a, this release and these files of a given project have been published under, you know, stringent, you know, more secure methods.

00:30:00.240 --> 00:30:17.200
Yeah, I certainly see that a verified wouldn't prove that the Django devs hadn't, you know, somebody could have taken over their computer and swapped out like twine or poetry or whatever they're using to upload the package and do exactly what they did with Xcode ghost, basically.

00:30:17.200 --> 00:30:17.620
Right.

00:30:17.620 --> 00:30:17.900
Right.

00:30:17.900 --> 00:30:19.360
Something equivalent to that.

00:30:19.360 --> 00:30:26.760
So the last part we want to do is like, we don't want to give people a false sense of security and say, well, PiPI told me this was okay.

00:30:26.760 --> 00:30:31.360
And then they find out it wasn't because then that looks really bad for us.

00:30:31.360 --> 00:30:43.900
But on the flip side, we are looking at how do we provide mechanisms and measures to publishers to reduce the potential for the situations that you described to happen.

00:30:46.480 --> 00:30:51.500
This portion of Talk Python to Me is brought to you by us over at Talk Python Training.

00:30:51.500 --> 00:30:55.180
Let me tell you about one of our really popular courses.

00:30:55.180 --> 00:30:59.560
HTMX plus Flask, modern Python web apps hold the JavaScript.

00:30:59.560 --> 00:31:03.780
HTMX is one of the hottest properties in web development today.

00:31:03.780 --> 00:31:04.740
And for good reason.

00:31:04.740 --> 00:31:09.860
You might even remember all the stuff we talked about with Carson Gross back on episode 321.

00:31:10.460 --> 00:31:17.340
HTMX, along with the libraries and techniques we introduced in our new course, will have you writing the best Python web apps you've ever written.

00:31:17.340 --> 00:31:19.120
Clean, fast, and interactive.

00:31:19.120 --> 00:31:20.900
All without that front-end overhead.

00:31:20.900 --> 00:31:30.960
If you're a Python web developer that has wanted to build more dynamic, interactive apps, but don't want to or can't write a significant portion of your app in rich front-end JavaScript frameworks,

00:31:30.960 --> 00:31:33.500
you'll absolutely love HTMX.

00:31:33.500 --> 00:31:39.500
Check it out over at talkpython.fm/HTMX or just click the link in your podcast player show notes.

00:31:39.500 --> 00:31:46.300
All right, let me throw some ideas out to you and tell me what I think.

00:31:46.300 --> 00:31:55.560
So as I think about this, especially when the very first news a couple years ago, I can't remember exactly the time frame, but not very long ago, the first malicious PyPI package.

00:31:55.560 --> 00:32:00.440
You know, NPM had been getting whacked on for a while because JavaScript, YOLO.

00:32:01.080 --> 00:32:06.400
But, you know, when it came to PyPI, I was like, okay, this seems to be a little more serious, a little more pervasive.

00:32:06.400 --> 00:32:10.820
And they were often typo-squatting type of issues.

00:32:10.820 --> 00:32:16.500
Or people would introduce some package and say, here's a cool thing, you should check it out, and it's really a virus.

00:32:16.500 --> 00:32:17.640
Or one of those types of things.

00:32:17.720 --> 00:32:27.100
So one of my thoughts, one of the metrics I would have liked, or maybe in the future will like to apply to my local Python environment is,

00:32:27.100 --> 00:32:31.680
don't let me install packages that are too new.

00:32:31.680 --> 00:32:35.900
Or don't let me install packages that have too few downloads.

00:32:35.900 --> 00:32:37.820
And give me a mechanism to say that.

00:32:37.820 --> 00:32:43.900
Like, I don't want to ever say pip install something and that something has not existed on PyPI for less than a week.

00:32:43.900 --> 00:32:51.180
I don't ever want to be able to say pip install something and that thing has less than a thousand or ten thousand, whatever, downloads.

00:32:51.180 --> 00:32:53.560
Unless, and they could say, nope, you can't install that.

00:32:53.560 --> 00:32:54.460
It breaks your rules.

00:32:54.460 --> 00:32:56.760
You could say, okay, no, I actually uploaded this.

00:32:56.760 --> 00:33:01.020
I really need to, you know, you could do like a pip install of force, --force.

00:33:01.020 --> 00:33:02.400
You know, some kind of override.

00:33:02.400 --> 00:33:06.420
But by default, if I could just say, you know, it has to have at least 5,000 downloads.

00:33:06.420 --> 00:33:07.220
Or I just don't want it.

00:33:07.220 --> 00:33:10.520
I feel like at that point, somebody would have discovered, oh, you know what?

00:33:10.560 --> 00:33:15.180
Is actually using 100% CPU usage and crypto mining or whatever it happens to be doing.

00:33:15.180 --> 00:33:18.260
I don't want to be the first guinea pig in the world to discover this.

00:33:18.260 --> 00:33:19.600
What do you think about this idea?

00:33:19.600 --> 00:33:22.340
The download count one is always an interesting one, right?

00:33:22.340 --> 00:33:23.940
It's a topic that comes up a lot.

00:33:23.940 --> 00:33:32.280
And like, I can tell you personally from experience that writing a little loop to increase download counts is super easy.

00:33:32.280 --> 00:33:32.780
Interesting.

00:33:32.900 --> 00:33:39.500
Like, write a wild true pip install something and like, you'll drive up download counts.

00:33:39.500 --> 00:33:41.940
It will be meaningless in the grand scheme of things.

00:33:41.940 --> 00:33:46.320
So you could say, well, maybe make it like, it's got to have, you know, a thousand distinct IP addresses.

00:33:46.320 --> 00:33:48.840
But then, you know, if you own a botnet, then you're good to go.

00:33:48.840 --> 00:33:49.340
Okay.

00:33:49.340 --> 00:33:49.840
Fair.

00:33:49.940 --> 00:33:55.140
This becomes like the cat and mouse game of like, all right, well, what is something that is good?

00:33:55.140 --> 00:34:05.460
Today, we have a mechanism where we don't advertise new packages that have been there for, I think, under a week to any kind of crawlers.

00:34:05.460 --> 00:34:07.160
So any search engine crawlers.

00:34:07.320 --> 00:34:18.440
So if you were going to like Google for Python Jangu and it was a brand new package, you wouldn't find it via Google because we wouldn't advertise that for indexing yet.

00:34:18.440 --> 00:34:19.060
Right.

00:34:19.060 --> 00:34:20.960
But after a week, like we do.

00:34:20.960 --> 00:34:32.340
So that's one method that we have for preventing some of these like newer packages from getting widespread visibility because they, you know, everything is a webpage.

00:34:32.340 --> 00:34:34.180
They are all subject to search engine optimization.

00:34:34.180 --> 00:34:41.780
Somebody could craft their readme to, you know, be the best hit on Google and therefore they'll show up first.

00:34:41.780 --> 00:34:44.220
And with all this crazy AI stuff, it's only getting easier.

00:34:44.220 --> 00:34:45.380
Hey, ChatGPT.

00:34:45.380 --> 00:34:51.940
I would like to create a page that is like the Jango pypy page, but I wanted to rank highly for this.

00:34:51.940 --> 00:35:19.200
Something that we are talking about internally of like, how do we put packages that are brand new, either from some heuristic of a brand new user or a brand new version or differs enough from the previous versions and kind of put those in kind of a holding or a timeout zone to let our security research partners who are really excellent at like just listening to the package feeds and going after and just running all their analysis on them.

00:35:19.200 --> 00:35:49.180
To give them first crack, right?

00:35:49.180 --> 00:35:51.640
What was the kind of reference there just a moment ago?

00:35:51.640 --> 00:35:54.100
Having like published allow lists, right?

00:35:54.100 --> 00:36:04.780
These are very prevalent in large corporations that have very strong security policies and they have teams of folks that will maintain internal mirrors of a package index.

00:36:04.780 --> 00:36:11.080
So they will disallow any pip install of anything unless you're using their package index.

00:36:11.240 --> 00:36:25.360
And I think that is another tool in the security toolbox to have people who are that like security focused to say we will only allow in the things that we have already tested to be true.

00:36:25.360 --> 00:36:26.320
We vetted them.

00:36:26.940 --> 00:36:29.400
And those kind of match our heuristic.

00:36:29.400 --> 00:36:37.360
If you scroll down a little bit on the Django page, almost every sidebar to every one of these has these statistics.

00:36:37.400 --> 00:36:41.860
This particular one shows GitHub statistics because this package has a GitHub URL.

00:36:41.860 --> 00:36:47.460
But there's also libraries.io, which is not affiliated with PyPI.org.

00:36:47.460 --> 00:36:48.740
They're just a really great service.

00:36:49.240 --> 00:36:53.760
And you can search for packages of any shape, kind of any ecosystem.

00:36:53.760 --> 00:36:57.020
But they have a really good kind of ranking system.

00:36:57.020 --> 00:37:01.600
Again, if it works for you, the crux of it, don't install garbage off the internet, right?

00:37:01.600 --> 00:37:02.640
Check out what you're doing.

00:37:02.640 --> 00:37:07.140
But by using something like libraries, which I don't know why that didn't load.

00:37:07.140 --> 00:37:08.400
Probably was just getting a virus.

00:37:08.400 --> 00:37:09.300
I probably misspelled it.

00:37:09.300 --> 00:37:09.860
Oh, yeah.

00:37:09.860 --> 00:37:10.280
It's good.

00:37:11.280 --> 00:37:21.100
But they offer a nice set of stats around a given package so you can try and be a little bit more informed on your own.

00:37:21.100 --> 00:37:32.760
The challenge there remains that nothing is going to tell you on libraries.io or PyPI if somebody has uploaded malicious software and this is a bad one.

00:37:32.760 --> 00:37:35.720
The best we can do is once we know about it, we handle it.

00:37:35.720 --> 00:37:39.360
Yeah, I feel like PyPI has been pretty on top of it.

00:37:39.360 --> 00:37:39.920
We try.

00:37:39.920 --> 00:37:47.380
I published a blog earlier today where I pulled together a lot of analytics and stats from our inbound malware reporters.

00:37:47.380 --> 00:37:50.040
And it's looking pretty good.

00:37:50.040 --> 00:37:54.840
We handle over 80% of inbound reports in under 60 minutes.

00:37:54.840 --> 00:38:00.940
You know, I go into the article about like the whys and wherefores, the timeliness matters and the response time.

00:38:00.940 --> 00:38:07.600
Because the longer something is out there, the worse it can contagion to other, you know, other folks.

00:38:07.600 --> 00:38:07.900
Yeah.

00:38:07.900 --> 00:38:12.160
So we try and do as quick as possible, often under like five to 10 minutes.

00:38:12.160 --> 00:38:17.680
But we also have to do some investigation and kind of like confirm that the report is accurate.

00:38:17.680 --> 00:38:19.140
We don't want false positives.

00:38:19.140 --> 00:38:22.760
Most of our research researchers don't give us false positives.

00:38:22.760 --> 00:38:24.720
So shout out to all those folk.

00:38:24.720 --> 00:38:27.320
But it's hard and time consuming.

00:38:27.320 --> 00:38:43.360
I remember one of the more recent PyPI supply chain issues where somebody uploaded something bad was attributed to all these different ATP and hacking groups have cutesy names like the SolarWinds was by something bear.

00:38:43.600 --> 00:38:44.520
Which bear?

00:38:44.520 --> 00:38:44.620
Which bear?

00:38:44.620 --> 00:38:45.520
Cozy bear.

00:38:45.520 --> 00:38:46.480
That's the kind of bear it was.

00:38:46.480 --> 00:38:50.200
Which is really Russia state actor hacking, right?

00:38:50.200 --> 00:38:53.480
And one of the PyPI ones was North Korea.

00:38:53.480 --> 00:39:01.020
And I think they were doing crypto mining on computers, which seems like a real big waste of I have access to the server in a bank.

00:39:01.220 --> 00:39:03.000
But anyway, it works for them.

00:39:03.000 --> 00:39:04.020
It works for them, you know?

00:39:04.020 --> 00:39:21.640
But the reason I bring this up is like, it's you all have a serious challenge in that if you're up against state actors from a security perspective, like that's not just script kitties or some weird automation or, you know, like those are you guys got to be on top of top of your game, right?

00:39:21.640 --> 00:39:37.600
This is, again, where I think relying on our ecosystem of security partners is so important because they will corroborate intelligence that they've garnered from other ecosystems that are beyond PyPI and be able to identify these kinds of actors.

00:39:37.600 --> 00:39:41.640
Me, I see kind of just a slice of what the universe has.

00:39:41.640 --> 00:39:49.660
They're going to see a different slice, but broader in spectrum and not necessarily as focused on one particular ecosystem.

00:39:50.280 --> 00:39:56.140
So working together, we can kind of do the best that we can for all the users out there.

00:39:56.140 --> 00:39:56.460
Excellent.

00:39:56.460 --> 00:40:14.440
So we talked about hyposquatting, which is serious, but also kind of the silliest, kind of not that big of a deal because recommendations could be like, you know, actually use a requirements management system rather than just every time you create a new environment, just type pip install X, Y, and Z.

00:40:14.440 --> 00:40:22.360
Like the chances you might fat finger that versus pip install dash R requirements.txt or, you know, poet, something with poetry or whatever.

00:40:22.360 --> 00:40:22.640
Right.

00:40:22.640 --> 00:40:25.320
So that helps a lot, although it's not perfect.

00:40:25.320 --> 00:40:28.680
The other one is more the Xcode go style.

00:40:28.680 --> 00:40:39.380
Like what if somebody were to take over one of the other systems and you all had over here, you have a new two factor requirement for PyPI.

00:40:39.580 --> 00:40:40.320
Do you want to talk about that?

00:40:40.320 --> 00:40:41.120
Yeah, absolutely.

00:40:41.120 --> 00:40:55.720
This also was covered on an earlier podcast of Talk Python where I think in 2022, we had announced that we were starting to ratchet down the amount of potential.

00:40:55.720 --> 00:40:57.140
I think you got the wrong link there.

00:40:57.220 --> 00:40:58.220
I do have the wrong link.

00:40:58.220 --> 00:40:59.260
Keep going.

00:40:59.260 --> 00:41:00.940
It's Dustin.

00:41:00.940 --> 00:41:02.480
Dustin Ingrams.

00:41:02.480 --> 00:41:03.260
Yes, exactly.

00:41:03.260 --> 00:41:04.180
I thought I pulled it up.

00:41:04.180 --> 00:41:05.320
I put the other one twice.

00:41:05.320 --> 00:41:05.720
There we go.

00:41:05.720 --> 00:41:11.560
The 2FA story is largely, again, we talked about there's about 740,000 users, right?

00:41:11.560 --> 00:41:14.780
These are the publishers of packages, right?

00:41:14.900 --> 00:41:18.860
So if in our use case, we talked about Django devs, right?

00:41:18.860 --> 00:41:20.140
And I'm sorry to pick on Django.

00:41:20.140 --> 00:41:21.680
They're just the one that's up there.

00:41:21.680 --> 00:41:29.100
But if one of the Django devs was using a classic problem, which is an email expiry or a domain expiry attack.

00:41:29.400 --> 00:41:36.300
So let's say I'm a Django admin maintainer and I use MikeTheMan.com as my email address, right?

00:41:36.300 --> 00:41:37.320
And that's great.

00:41:37.320 --> 00:41:39.180
Because we don't want to use Gmail.

00:41:39.180 --> 00:41:43.240
We don't want to use or, you know, the .me or Outlook.

00:41:43.240 --> 00:41:46.480
I'm a good citizen of the internet, so I got my own domain.

00:41:46.480 --> 00:41:46.960
Yeah.

00:41:46.960 --> 00:41:48.520
I just haven't been paying attention, right?

00:41:48.520 --> 00:41:49.840
I haven't been paying attention this year.

00:41:49.840 --> 00:41:50.260
Right.

00:41:50.260 --> 00:41:52.380
And then let's say I let it expire.

00:41:52.380 --> 00:41:53.160
Whoops.

00:41:53.160 --> 00:41:54.600
You know, like that happens.

00:41:54.600 --> 00:41:56.080
People forget to pay their bills.

00:41:56.080 --> 00:41:58.100
Or your credit card gets stolen and canceled.

00:41:58.240 --> 00:41:59.840
You forget to renew it there.

00:41:59.840 --> 00:42:01.520
And then the other thing goes to spam.

00:42:01.520 --> 00:42:04.340
Like it could actually be super easy that that happens.

00:42:04.340 --> 00:42:05.700
And it happens all the time, right?

00:42:05.700 --> 00:42:10.540
Like people, there are numerous domains that I've registered over the year that I was like, yeah, I don't need that anymore.

00:42:10.540 --> 00:42:16.060
Hopefully I have never used anything from that domain to sign up for anything securely that's there.

00:42:16.060 --> 00:42:24.680
But then someone else can come along and register, MikeTheMan.com, set up an email server, request a password reset, get that email.

00:42:24.680 --> 00:42:28.160
And now they can do anything I could have done before.

00:42:28.160 --> 00:42:32.360
With 2FA, that entire set of problems goes away.

00:42:32.360 --> 00:42:34.340
And we're not even talking about like phishing.

00:42:34.340 --> 00:42:45.300
If somebody phishes my password or if they use the same, if I made the mistake and use the same password on two websites and one website stored it in securely and they pop that in a breach.

00:42:45.300 --> 00:42:47.700
And, you know, now they have my username and password.

00:42:47.700 --> 00:42:49.300
2FA just solves.

00:42:49.300 --> 00:42:51.680
Do you discourage that using the same username and password?

00:42:51.680 --> 00:42:53.300
I absolutely discourage that.

00:42:53.400 --> 00:42:55.420
I find it very inconvenient to have a separate password.

00:42:55.420 --> 00:42:56.360
I just use the letter A.

00:42:56.360 --> 00:42:56.820
Yeah.

00:42:56.820 --> 00:42:58.980
That's a choice, right?

00:42:58.980 --> 00:43:00.340
It's a bad choice.

00:43:00.340 --> 00:43:09.860
No, like the amount of tooling out there today, both free and paid for password management is just so pervasive.

00:43:09.860 --> 00:43:12.680
It's almost like irresponsible to not use one.

00:43:12.680 --> 00:43:13.800
I 100% agree.

00:43:13.800 --> 00:43:14.140
Yeah.

00:43:14.140 --> 00:43:15.140
I always use one password.

00:43:15.140 --> 00:43:27.720
I think, I don't know if it'll tell me how many I have in here, but I think it's coming up on like 1,500 and not quite, just under a thousand different distinct passwords and accounts.

00:43:28.220 --> 00:43:30.420
You know, a lot of people don't want to pay for it.

00:43:30.420 --> 00:43:30.920
Bitwarden.

00:43:30.920 --> 00:43:32.020
Bitwarden is fantastic.

00:43:32.020 --> 00:43:32.820
It's open source.

00:43:32.820 --> 00:43:35.520
I don't know if you got a recommendation, but you're right.

00:43:35.520 --> 00:43:36.180
It's irresponsible.

00:43:36.180 --> 00:43:37.720
I mean, I'm a 1Password fan.

00:43:37.720 --> 00:43:39.120
It's just a great tool.

00:43:39.120 --> 00:43:42.580
I used it back when, when it was like a single thing.

00:43:42.580 --> 00:43:46.460
Then, you know, I used it as a, as a organization account, right?

00:43:46.460 --> 00:43:51.560
Like the, I was an admin for our org and like managing that life cycle was pretty sweet.

00:43:51.800 --> 00:43:54.080
And then it's like, okay, we have this as an organization.

00:43:54.080 --> 00:43:55.500
We have over 400 employees.

00:43:55.500 --> 00:43:57.320
Why doesn't everyone have this right now?

00:43:57.320 --> 00:44:10.220
So, you know, it became a good rollout, but, but having a second factor, a 2FA or multi-factor MFA, I think is this notion of something you have versus something, you know.

00:44:10.220 --> 00:44:15.840
So let's say that even by using a password manager, you don't know that password anymore, right?

00:44:15.840 --> 00:44:18.360
Like you don't remember it, but let's say you do, right?

00:44:18.360 --> 00:44:20.900
Like, let's say somebody gets your entire vault of passwords.

00:44:21.100 --> 00:44:34.700
They still don't have this second factor, which is often a time-based one-time password or web authentication device, which could be a hardware device or a browser fingerprint.

00:44:34.700 --> 00:44:36.880
Like they don't have that, right?

00:44:36.880 --> 00:44:45.260
It's a defense in depth kind of problem that is solving where it's like, you need, you need to have two things in order to get through this door.

00:44:45.260 --> 00:44:48.560
And if you only have one, that's not good enough.

00:44:49.400 --> 00:45:13.940
Using that capability and having that ability on PyPI user management has enabled us to roll out a higher grade of security for the packages and maintainers of those packages by attesting that, well, we know that this maintainer or this publisher of this package has already secured themselves.

00:45:14.140 --> 00:45:17.440
So against these kinds of attacks.

00:45:17.440 --> 00:45:17.900
Yeah.

00:45:18.400 --> 00:45:20.100
I can just hear the voices.

00:45:20.100 --> 00:45:22.740
In fact, they don't come through an audio form.

00:45:22.740 --> 00:45:23.600
They come in email.

00:45:23.600 --> 00:45:28.760
Like, you know, on that last episode, sometimes they come through on the artists formerly known as Twitter.

00:45:28.760 --> 00:45:33.920
Sometimes they come through an email, but like, you know, Michael, you said that two factor will help.

00:45:33.920 --> 00:45:38.500
You realize, you don't seem to realize, I'm saying I realize, so I don't get this email.

00:45:38.500 --> 00:45:39.480
Please don't email me.

00:45:39.480 --> 00:45:40.760
That this doesn't stop phishing.

00:45:40.920 --> 00:45:42.180
Like people could still phish you.

00:45:42.180 --> 00:45:47.000
You could go in, they could ask for your username and password, then they'll ask for your time-based authentication.

00:45:47.000 --> 00:45:48.300
And then they're in.

00:45:48.300 --> 00:45:49.380
Yes, that's true.

00:45:49.380 --> 00:45:51.660
But it stops some things.

00:45:52.000 --> 00:46:00.820
And stopping some things rather than going, well, it's not good enough, so I'll do nothing is certainly not a responsible way to go, I think.

00:46:00.820 --> 00:46:05.240
It's kind of like making the argument that if nothing is perfect, don't do anything at all.

00:46:05.240 --> 00:46:05.540
Yes, exactly.

00:46:05.540 --> 00:46:06.120
Right.

00:46:06.120 --> 00:46:07.020
That's a fallacy.

00:46:07.020 --> 00:46:09.420
If you're going to die, don't get out of bed.

00:46:09.420 --> 00:46:09.900
Right?

00:46:10.000 --> 00:46:13.380
Like, no, like, we get out of bed, we go to work, we do our things, right?

00:46:13.380 --> 00:46:17.560
We ultimately, as sad as it is, right, we have an end date.

00:46:17.560 --> 00:46:19.160
We hopefully don't know what that is.

00:46:19.160 --> 00:46:21.780
But like, do the best you can while you can.

00:46:21.780 --> 00:46:23.660
That's where I come to from.

00:46:23.660 --> 00:46:25.820
Like, this is the best we know.

00:46:25.820 --> 00:46:26.300
Yes.

00:46:26.300 --> 00:46:29.560
Will there be something new and exciting tomorrow that is even better?

00:46:29.560 --> 00:46:30.200
Maybe.

00:46:30.200 --> 00:46:35.600
But until then, let's do the thing that we know to be the best that we can do right now.

00:46:35.600 --> 00:46:35.900
Right.

00:46:35.900 --> 00:46:37.200
Maybe Pasky's will be awesome.

00:46:37.200 --> 00:46:38.360
I don't know about that.

00:46:38.360 --> 00:46:49.060
But for example, you know, from a phishing perspective, things like 1Password and Bitwarden have plugins for your browsers, and they will suggest to autofill on the right domains.

00:46:49.060 --> 00:46:56.020
But if you're on pypi.io, is it a pypi.org or, you know, whatever, right?

00:46:56.020 --> 00:47:00.480
If they're on some kind of phishing domain, they will not suggest to autofill.

00:47:00.480 --> 00:47:00.940
Right.

00:47:00.940 --> 00:47:04.680
If you find yourself going to your password manager and going, God, why does this not work?

00:47:04.680 --> 00:47:06.100
Like, let me just copy this over.

00:47:06.100 --> 00:47:07.120
Stop.

00:47:07.440 --> 00:47:15.460
Figure out why it's not working really, really, really well before you somehow subvert this broken extension that won't autofill.

00:47:15.460 --> 00:47:15.700
Right.

00:47:15.700 --> 00:47:21.400
So there are ways to limit phishing through these mechanisms, even if they're not perfect.

00:47:21.400 --> 00:47:22.160
Exactly.

00:47:22.160 --> 00:47:25.760
I think I said this before, but like, I'll reiterate it.

00:47:25.760 --> 00:47:29.160
You, the human, are the best defender.

00:47:29.160 --> 00:47:30.300
Use your logic.

00:47:30.300 --> 00:47:31.080
Use your sense.

00:47:31.220 --> 00:47:33.540
Like, don't just click at things mindlessly.

00:47:33.540 --> 00:47:34.780
Take a moment.

00:47:34.780 --> 00:47:35.700
Take a look.

00:47:35.700 --> 00:47:38.400
See, that error message, that looks weird.

00:47:38.400 --> 00:47:39.620
Why does that look weird?

00:47:39.620 --> 00:47:42.060
The domain I'm on looks a little odd.

00:47:42.060 --> 00:47:45.560
The little browser lock symbol isn't locked.

00:47:45.560 --> 00:47:46.560
Why is that?

00:47:46.560 --> 00:47:47.140
Hmm.

00:47:47.140 --> 00:47:48.060
Take a moment.

00:47:48.060 --> 00:47:48.780
Nope.

00:47:48.780 --> 00:47:50.520
Had not exe once stacked at the server.

00:47:50.520 --> 00:47:51.400
Yes, I want to load it.

00:47:51.400 --> 00:47:51.680
Come on.

00:47:51.680 --> 00:47:52.160
Yes, let it.

00:47:52.160 --> 00:47:52.680
Just, I got it.

00:47:54.040 --> 00:47:54.440
Yeah.

00:47:54.440 --> 00:48:03.000
The reason, I think the news around the 2FA for PyPI.org is not that it exists, but that it's required now.

00:48:03.000 --> 00:48:05.160
I think that's what's different since I spoke with Dustin.

00:48:05.160 --> 00:48:12.120
We've been on a path, and as you've got this blog post open, we've been on a path of like, starting with the carrot.

00:48:12.120 --> 00:48:24.660
We want to like, provide as many people in the packaging ecosystem, all the incentive, all the time, all the kind of expectation that they could have in order to set this up voluntarily, right?

00:48:24.660 --> 00:48:32.960
Like, there was even a wonderful giveaway of hardware security keys that like Google sponsored, which is excellent.

00:48:32.960 --> 00:48:35.380
That doesn't mean you need a physical security key.

00:48:35.380 --> 00:48:36.260
You can use them.

00:48:36.260 --> 00:48:38.160
You can use software security keys.

00:48:38.160 --> 00:48:40.180
Google Authenticator or any other tool.

00:48:40.380 --> 00:48:42.480
Duo Labs has a nice one.

00:48:42.480 --> 00:48:48.960
But like, anything in order to kind of move the bar on this 2FA engagement.

00:48:48.960 --> 00:48:52.320
And we've seen some decent adoption.

00:48:52.320 --> 00:48:55.220
And it's like, okay, well, now let's set a timeline.

00:48:55.220 --> 00:48:59.520
This post by Donald kind of starts the clock on that.

00:48:59.520 --> 00:49:08.360
And we are basically drawing a line in the sand that's saying at the end of 2023, if you want to publish a new package, like, that's it.

00:49:08.360 --> 00:49:09.860
You need to have 2FA.

00:49:09.860 --> 00:49:17.120
We've started on that process by requiring 2FA for new users.

00:49:17.120 --> 00:49:20.880
So if you registered today, you need to set up 2FA.

00:49:20.880 --> 00:49:30.220
Like, if you've been around for a while and you don't have it yet, we'll still allow you to upload, but we'll send you a notice that's saying, here's what's going to happen at the end of this year.

00:49:30.380 --> 00:49:46.380
And we've slowly been kind of ratcheting down the areas at which 2FA is not required with the intent on basically January, December 31st, January 1st, 2024, enabling the requirement on all accounts.

00:49:46.600 --> 00:49:54.800
So that way we can kind of walk away from the problem of, well, I guess one of the Django maintainers got fished.

00:49:54.800 --> 00:49:57.280
And that's why we had a big issue in the ecosystem.

00:49:57.280 --> 00:49:59.280
Like, I don't want that to be the problem.

00:49:59.280 --> 00:50:00.700
And again, apologies to Django.

00:50:00.700 --> 00:50:01.760
Y'all are awesome.

00:50:01.980 --> 00:50:04.980
It's because they're so popular and loved that you pick on them, I can tell.

00:50:04.980 --> 00:50:05.600
Yes, yes.

00:50:05.600 --> 00:50:13.280
Again, this doesn't completely solve all fishing attempts, but it certainly is another layer of defense.

00:50:13.280 --> 00:50:15.160
So I think it's certainly worth doing.

00:50:15.680 --> 00:50:18.780
Now, there was a bit of a pushback.

00:50:18.780 --> 00:50:26.560
I think somebody even like rage quit their package temporarily and then said, oh, no, I want it back on PyPI when this came out as if it was a big deal.

00:50:26.560 --> 00:50:30.500
And this is, you know, this blog post was from May.

00:50:30.500 --> 00:50:33.020
The deadline is end of 2023.

00:50:33.020 --> 00:50:37.400
In between those two times, GitHub just comes out and goes, everyone gets 2FA right now.

00:50:37.400 --> 00:50:37.820
I don't care.

00:50:37.820 --> 00:50:38.340
Right.

00:50:38.340 --> 00:50:46.080
And this is such a broader, broader, more impactful thing in terms of the many people use Python who are not creating packages.

00:50:46.080 --> 00:50:49.920
But almost everyone who uses Python is also in some way using GitHub.

00:50:49.920 --> 00:50:56.460
And so it just touches so much more of the ecosystem and people are like, oh, OK, I don't know why there was so much blowback in one and not the other.

00:50:56.460 --> 00:50:59.260
But it's an odd thing.

00:50:59.260 --> 00:50:59.640
Right.

00:50:59.640 --> 00:51:05.640
Because on the one hand, PyPI or the index itself, right, has been around for about 20 years.

00:51:06.340 --> 00:51:19.640
This is a long lived concept in the Python ecosystem of having a place where people can publish software freely, no charge, and others can install that software.

00:51:19.640 --> 00:51:23.520
This requirement is a shift.

00:51:23.520 --> 00:51:24.120
Right.

00:51:24.120 --> 00:51:24.520
Yeah.

00:51:24.520 --> 00:51:27.860
And a lot of folks are like, well, what else is going to happen?

00:51:27.860 --> 00:51:29.280
It's like, well, probably nothing.

00:51:29.280 --> 00:51:29.640
Right.

00:51:29.640 --> 00:51:35.960
I don't see us talking about other requirements or enforcements unless they're necessary.

00:51:36.240 --> 00:51:37.720
Again, I can't predict the future.

00:51:37.720 --> 00:51:49.440
And if somebody says that pass keys are the best way and TOTP is broken and proves it and the industry-wide decides, oh, wow, this is not a good idea.

00:51:49.440 --> 00:51:51.220
Let's do this other thing.

00:51:51.220 --> 00:51:52.520
Then maybe we'll do that.

00:51:52.520 --> 00:51:56.300
But until then, this is the best we've got.

00:51:56.300 --> 00:52:05.060
The requirement for 2FA is even on the OWASP top 10 list of why you should be doing this.

00:52:05.060 --> 00:52:12.920
And it's like, this is what governments use, companies use, and auditors use to say, we are adhering to the best practices.

00:52:13.280 --> 00:52:21.360
Because if you had a security vulnerability reported to your company because you weren't using 2FA, you know, auditors will say, well, why not?

00:52:21.360 --> 00:52:22.900
It's in the, like, top 10 list.

00:52:22.900 --> 00:52:26.060
It's like the SQL injection of yesteryear.

00:52:26.060 --> 00:52:26.420
Yeah.

00:52:26.420 --> 00:52:28.100
Just like, just do this.

00:52:28.100 --> 00:52:28.500
Right.

00:52:29.540 --> 00:52:31.600
Just solve this class of problem.

00:52:31.600 --> 00:52:32.920
You will have other problems.

00:52:32.920 --> 00:52:33.940
We all have problems.

00:52:33.940 --> 00:52:37.960
But solve the ones that we know are relatively easy to solve.

00:52:37.960 --> 00:52:38.740
Good advice.

00:52:38.740 --> 00:52:44.780
I feel like, you know, when the two-factor software problem, like, that's not good enough.

00:52:44.780 --> 00:52:47.320
You know, these YubiKeys and stuff are too tricky.

00:52:47.320 --> 00:52:49.200
We're just going to go back to SMS.

00:52:49.200 --> 00:52:51.320
Like, that's, that's where it's, what?

00:52:51.320 --> 00:52:54.040
I cannot believe that my bank will let me use 2FA.

00:52:54.040 --> 00:52:55.260
They forced me to use.

00:52:55.260 --> 00:52:55.800
SMS.

00:52:55.800 --> 00:52:56.520
SMS.

00:52:56.520 --> 00:52:58.360
You might want to check out for different banks.

00:52:58.360 --> 00:53:01.260
Well, it's like one of the top four banks in the US.

00:53:01.260 --> 00:53:01.880
It's nuts.

00:53:01.880 --> 00:53:07.540
They also have limits on the length, not lower bounds, upper bounds on the length of the password.

00:53:07.540 --> 00:53:09.060
My, ooh, that.

00:53:09.060 --> 00:53:11.680
That, that, I understand why.

00:53:11.680 --> 00:53:13.040
Right.

00:53:13.040 --> 00:53:14.700
Upper bounds, I understand why.

00:53:14.700 --> 00:53:19.380
But it usually boils down to, like, database design and, like, the cost of doing a database migration.

00:53:19.380 --> 00:53:20.080
I hear you.

00:53:20.080 --> 00:53:21.860
Like, I think it's like 12 or something.

00:53:21.860 --> 00:53:22.440
It's very short.

00:53:22.440 --> 00:53:23.180
Oh, that's short.

00:53:23.180 --> 00:53:23.980
That's way too short.

00:53:23.980 --> 00:53:24.920
But here's the thing.

00:53:25.060 --> 00:53:27.720
Do you know, it doesn't matter if you have one letter or a hundred letters.

00:53:27.720 --> 00:53:29.080
The hash is still the same length.

00:53:29.080 --> 00:53:30.620
Depending on how you're hashing it.

00:53:30.620 --> 00:53:30.940
Yeah.

00:53:30.940 --> 00:53:31.220
Yeah.

00:53:31.220 --> 00:53:32.540
But they will not be stored.

00:53:32.540 --> 00:53:35.480
Like, if they're not storing the hash, it makes me extra nervous.

00:53:35.480 --> 00:53:36.100
Yeah.

00:53:36.100 --> 00:53:36.420
Anyway.

00:53:36.420 --> 00:53:37.440
Onward.

00:53:37.440 --> 00:53:41.100
I'm glad they got the SMS 2FA backing it up.

00:53:41.100 --> 00:53:41.540
Yeah.

00:53:42.100 --> 00:53:54.720
Another thing that I, that I, that I, that I do want to kind of plug on the, the, like, the security spectrum and kind of to address the question around, like, verifiable releases is something that we launched earlier this year, which is called trusted publishers.

00:53:54.720 --> 00:53:55.320
That's right.

00:53:55.320 --> 00:54:02.400
That's alluded to, or linked to in the, there we go on, on our docs.pypi.org of what it is.

00:54:02.400 --> 00:54:03.220
Links in the show notes.

00:54:03.220 --> 00:54:04.020
People can check it out.

00:54:04.020 --> 00:54:04.280
Yeah.

00:54:04.280 --> 00:54:08.180
So, you know, it's a great thing where we leverage an open standard called OpenID Connect.

00:54:08.180 --> 00:54:22.820
And today we only implement this with one publishing tool called, you know, GitHub Actions, where the service GitHub Actions is now delegated to be a trusted publisher for your project.

00:54:22.820 --> 00:54:25.140
When you set this up, you have to opt into this completely.

00:54:25.140 --> 00:54:31.980
We didn't do this for you, but you can now opt in to say GitHub Actions is allowed to publish my project.

00:54:31.980 --> 00:54:34.640
And then you can say, you know what?

00:54:34.640 --> 00:54:37.140
None of my humans are allowed to publish the project.

00:54:37.140 --> 00:54:46.420
The computer that is getting a short lived token for like five minutes or 10 minutes, whatever it is, is allowed to publish this package and no one else is.

00:54:46.420 --> 00:54:57.700
And that's how we can start to build the levels of attestation and kind of the software supply chain security to say, I know where the source code is.

00:54:57.700 --> 00:55:00.340
I know the source code that built it.

00:55:00.340 --> 00:55:01.980
I know the builder who built it.

00:55:01.980 --> 00:55:07.700
I know the builder who published it and no one else tampered with it in the, in the interim.

00:55:07.700 --> 00:55:25.700
We're not there to like prove that nobody else tampered, but we are there to say, I can now delegate authority to GitHub, GitHub Actions to perform this release for me, as opposed to me creating a token in PyPI and giving that token to GitHub Actions.

00:55:25.860 --> 00:55:26.860
That's how we did it before.

00:55:26.860 --> 00:55:27.220
Right.

00:55:27.220 --> 00:55:32.720
A long lived permanent token that you put in plain text somewhere, right?

00:55:32.720 --> 00:55:33.600
What could go wrong?

00:55:33.600 --> 00:55:39.840
I mean, usually like an environment variable or secrets and GitHub Actions, they have pretty good ways of securing data.

00:55:40.000 --> 00:55:41.640
But again, it's long lived.

00:55:41.640 --> 00:55:48.500
So if anything ever happened over there, if anybody dumped a debug log that they shouldn't have, that token could be there.

00:55:48.640 --> 00:56:03.040
So by using a trusted publisher flow, you can now have your GitHub Actions deployed directly to PyPI.org once the artifact is complete and not have to do that token management.

00:56:03.280 --> 00:56:04.920
So we're getting short on time, Mike.

00:56:04.920 --> 00:56:14.200
What else do you want people to know about what you all, in particular, what you're doing at PyPI and some of the initiatives and maybe how they can help?

00:56:14.200 --> 00:56:19.520
The top of mind for me right now is the malware reporting project that we're engaged in.

00:56:19.520 --> 00:56:33.500
And that's kind of linked to at the very bottom of my blog from today, the Inbound Malware Reporting Blog, where we are looking to establish what a kind of machine readable protocol would be to interact with security researchers.

00:56:33.900 --> 00:56:42.320
A few of them have chimed in already on what they think of, and we're just kind of building the conversation around what it would look like to report, how do you like to report?

00:56:42.320 --> 00:56:53.620
And then we'll proceed with whatever guidance we get there and kind of build out the payloads and stuff like that all the way at the bottom, very bottom, all the way at the bottom.

00:56:53.620 --> 00:56:54.280
There we go.

00:56:54.740 --> 00:57:08.320
And once we have this format in place, we're going to be building out like the infrastructure and ecosystem in order to submit those payloads and then figure out how to kind of put packages in timeout while these payloads are being investigated.

00:57:08.320 --> 00:57:15.760
So that way we can continue to provide a secure ecosystem for all users of PyPI.org.

00:57:15.760 --> 00:57:16.580
I think that's great.

00:57:16.580 --> 00:57:24.720
Certainly, you know, these companies that are checking out and just monitoring the flow of packages and scanning them, that's a huge service.

00:57:24.720 --> 00:57:30.000
Is there, there probably is, never will be like a bug bounty equivalent?

00:57:30.000 --> 00:57:30.860
Is there?

00:57:30.860 --> 00:57:32.040
I mean, never say never, but.

00:57:32.040 --> 00:57:32.980
Never say never.

00:57:32.980 --> 00:57:44.440
From that perspective, it becomes a bit of a challenge because then you could start funneling money through a bug bounty program because we are offering an ability for people to create packages.

00:57:44.760 --> 00:57:49.580
And then saying, we're giving you a monetary incentive to report them to us.

00:57:49.580 --> 00:57:53.600
So it's like, well, now we've given you a pipeline for money.

00:57:53.600 --> 00:57:58.500
There's a whole shadow industry of like, you first create it, then you get it popular, then you report it.

00:57:58.500 --> 00:57:58.880
Yeah.

00:57:58.880 --> 00:57:59.200
Yeah.

00:57:59.200 --> 00:57:59.400
Yeah.

00:57:59.400 --> 00:58:00.140
No, I hear you.

00:58:00.140 --> 00:58:00.380
Yeah.

00:58:00.380 --> 00:58:04.500
But, you know, no, no idea is too far fetched.

00:58:04.500 --> 00:58:07.680
We like talking about ideas and figuring out what, what makes sense.

00:58:07.940 --> 00:58:12.800
And kind of, again, with, with a lot of security work is like, okay, well, how can this go wrong?

00:58:12.800 --> 00:58:14.740
How can this fail?

00:58:14.740 --> 00:58:15.280
Right.

00:58:15.280 --> 00:58:16.440
How can it be gamed?

00:58:16.440 --> 00:58:17.640
Yeah, absolutely.

00:58:18.020 --> 00:58:26.760
Well, I, for one, feel better that you're putting all your time and energy into focusing on these problems and seeing how we can make PyPI better for everyone.

00:58:26.760 --> 00:58:27.680
Almost everyone.

00:58:27.680 --> 00:58:28.400
Not for everyone.

00:58:28.400 --> 00:58:30.500
For the 99.9% of us.

00:58:30.500 --> 00:58:31.220
For most people.

00:58:31.220 --> 00:58:34.380
Just wanting to use it in a solid way to build Python software.

00:58:34.580 --> 00:58:36.980
That's kind of why I was drawn to it, right?

00:58:36.980 --> 00:58:50.100
Like, to contributing to it is such a foundational piece of modern day infrastructure that it's important that it be safe, secure, convenient, useful to anybody who wants to use it.

00:58:50.100 --> 00:58:58.920
Because Python itself is such a ubiquitous language across the planet and beyond that, you know, we want to make it the right thing.

00:58:58.920 --> 00:58:59.240
Yeah.

00:58:59.240 --> 00:59:01.800
Surprisingly, every time you say that statement, it's more true.

00:59:02.020 --> 00:59:06.240
Like, that graph continues to go up in surprising ways.

00:59:06.240 --> 00:59:07.300
All right.

00:59:07.300 --> 00:59:09.880
Before we get out of here, I'll ask you one of the final questions.

00:59:09.880 --> 00:59:15.540
Notable PyPI package, not malware-ridden, but a good, useful one.

00:59:15.540 --> 00:59:16.660
What do you recommend?

00:59:16.660 --> 00:59:18.220
Anything you come across that's awesome lately?

00:59:18.220 --> 00:59:19.620
A huge fan of pytest.

00:59:19.620 --> 00:59:22.720
And I know that, you know, you're big pals with Brian Okken.

00:59:22.720 --> 00:59:23.140
Hey, Brian.

00:59:23.140 --> 00:59:24.860
Who talks a lot about testing.

00:59:24.860 --> 00:59:29.900
And pytest plugins are a wonderful extension to pytest.

00:59:29.900 --> 00:59:30.340
Yes.

00:59:30.440 --> 00:59:32.980
And there's so many of them out there.

00:59:32.980 --> 00:59:37.060
And there's even like an awesome pytest aggregator of these.

00:59:37.060 --> 00:59:41.080
And I think I have one on here, which is called pytest Socket.

00:59:41.080 --> 00:59:41.600
Nice.

00:59:41.600 --> 00:59:43.660
Which I maintain till today.

00:59:43.660 --> 00:59:49.420
But the one that I want to point out is one that I recently learned about, which is called ICDiff.

00:59:49.420 --> 00:59:51.860
I, the letter C, diff.

00:59:51.860 --> 00:59:53.240
I don't even know if it's on this.

00:59:53.240 --> 00:59:54.540
It's the letter C.

00:59:54.540 --> 00:59:55.460
I gotcha.

00:59:55.460 --> 00:59:55.820
Yeah.

00:59:55.880 --> 00:59:56.340
There it is.

00:59:56.340 --> 01:00:02.000
So that's not the pytest package, but there's an extension pytest ICDiff.

01:00:02.000 --> 01:00:03.020
We'll get there.

01:00:03.140 --> 01:00:04.380
So this uses that other one.

01:00:04.380 --> 01:00:13.740
But the notion here is a lot of times you get big pytest output if you're comparing, you know, dictionaries, lists, or stuff that has lots of data.

01:00:13.740 --> 01:00:18.720
Sometimes detecting the difference is very hard in the terminal.

01:00:18.960 --> 01:00:28.200
And the pytest ICDiff extension will help highlight a lot of these with colors, with spacing, which makes finding the problem much easier.

01:00:28.200 --> 01:00:28.580
Yeah.

01:00:28.580 --> 01:00:30.400
That seems super helpful right there.

01:00:30.400 --> 01:00:35.660
And it does a partial character by character diff and line by line diff with different colors.

01:00:35.660 --> 01:00:36.140
Yeah.

01:00:36.140 --> 01:00:37.980
And here's what we expected.

01:00:37.980 --> 01:00:38.840
Here's what you got.

01:00:38.840 --> 01:00:39.160
Yeah.

01:00:39.160 --> 01:00:39.460
Yeah.

01:00:39.620 --> 01:00:44.280
Also, I'm learning that there's even more madness to the pretty print.

01:00:44.280 --> 01:00:47.340
So it could say from Pprint, import Pprint.

01:00:47.340 --> 01:00:51.940
But there's also apparently a Pprint PP with PPI.

01:00:51.940 --> 01:00:52.740
Okay.

01:00:52.740 --> 01:00:53.400
Yeah.

01:00:53.400 --> 01:00:54.040
I don't know.

01:00:54.040 --> 01:00:55.180
It's more things to explain.

01:00:55.180 --> 01:00:59.060
It's always, it's going to be in one of those 400,000 packages on PyPI.

01:00:59.060 --> 01:00:59.720
Right.

01:00:59.720 --> 01:01:00.320
It's got to be there.

01:01:00.320 --> 01:01:01.160
It's got to be there.

01:01:01.160 --> 01:01:03.020
And it might be a little different.

01:01:03.020 --> 01:01:08.740
It might be just enough different to meet this use case that is, you know, perfect.

01:01:09.040 --> 01:01:09.160
Yeah.

01:01:09.160 --> 01:01:09.400
Yeah.

01:01:09.400 --> 01:01:10.880
This is Pprint++.

01:01:10.880 --> 01:01:13.220
That's what the PP is like.

01:01:13.220 --> 01:01:14.200
CPP at the end.

01:01:14.200 --> 01:01:14.580
Okay.

01:01:14.580 --> 01:01:14.840
Got it.

01:01:14.840 --> 01:01:16.800
Notepad++.exe.

01:01:16.800 --> 01:01:18.760
It wants to access the server.

01:01:18.760 --> 01:01:19.120
All right.

01:01:19.120 --> 01:01:19.960
Let's leave with that.

01:01:19.960 --> 01:01:21.160
I guess a final thing.

01:01:21.160 --> 01:01:23.780
People are excited to hear about this.

01:01:23.780 --> 01:01:25.160
They want to get engaged.

01:01:25.160 --> 01:01:26.820
You know, they have ideas.

01:01:26.820 --> 01:01:27.640
They want to reach out to you.

01:01:27.640 --> 01:01:28.060
What do you say?

01:01:28.060 --> 01:01:31.840
Open an issue for us on, you know, the warehouse repository.

01:01:31.840 --> 01:01:34.300
If it's relevant to the warehouse code base.

01:01:34.300 --> 01:01:37.900
If you need to reach me directly, I'm on GitHub as Mike, the man.

01:01:38.080 --> 01:01:41.980
I'm on Mastodon as Mike, the man at hackyderm.io.

01:01:41.980 --> 01:01:47.800
Or if all of that fails, go ahead and email me at mike at python.org.

01:01:47.800 --> 01:01:48.300
Awesome.

01:01:48.300 --> 01:01:49.160
Thank you so much.

01:01:49.160 --> 01:01:52.020
Thanks for being on the show and giving us a status report here.

01:01:52.020 --> 01:01:52.540
Absolutely.

01:01:52.540 --> 01:01:53.500
Thanks for having me, Michael.

01:01:54.920 --> 01:01:57.560
This has been another episode of Talk Python to Me.

01:01:57.560 --> 01:01:59.380
Thank you to our sponsors.

01:01:59.380 --> 01:02:00.980
Be sure to check out what they're offering.

01:02:00.980 --> 01:02:02.400
It really helps support the show.

01:02:02.400 --> 01:02:05.080
Take some stress out of your life.

01:02:05.080 --> 01:02:10.560
Get notified immediately about errors and performance issues in your web or mobile applications with

01:02:10.560 --> 01:02:10.860
Sentry.

01:02:10.860 --> 01:02:15.860
Just visit talkpython.fm/sentry and get started for free.

01:02:16.320 --> 01:02:19.460
And be sure to use the promo code talkpython, all one word.

01:02:19.460 --> 01:02:21.580
Want to level up your Python?

01:02:21.580 --> 01:02:25.640
We have one of the largest catalogs of Python video courses over at Talk Python.

01:02:25.640 --> 01:02:30.820
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:02:30.820 --> 01:02:33.480
And best of all, there's not a subscription in sight.

01:02:33.480 --> 01:02:36.380
Check it out for yourself at training.talkpython.fm.

01:02:36.780 --> 01:02:41.240
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:02:41.240 --> 01:02:42.560
We should be right at the top.

01:02:42.560 --> 01:02:47.700
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:02:47.700 --> 01:02:51.900
and the direct RSS feed at /rss on talkpython.fm.

01:02:51.900 --> 01:02:54.860
We're live streaming most of our recordings these days.

01:02:54.860 --> 01:02:58.260
If you want to be part of the show and have your comments featured on the air,

01:02:58.260 --> 01:03:02.700
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:03:02.700 --> 01:03:04.760
This is your host, Michael Kennedy.

01:03:04.760 --> 01:03:06.040
Thanks so much for listening.

01:03:06.220 --> 01:03:07.220
I really appreciate it.

01:03:07.220 --> 01:03:09.120
Now get out there and write some Python code.

01:03:09.120 --> 01:03:09.960
Bye.

01:03:09.960 --> 01:03:10.960
Bye.

01:03:10.960 --> 01:03:11.960
Bye.

01:03:11.960 --> 01:03:12.960
Bye.

01:03:12.960 --> 01:03:13.960
Bye.

01:03:13.960 --> 01:03:14.960
Bye.

01:03:14.960 --> 01:03:15.960
Bye.

01:03:15.960 --> 01:03:16.960
Bye.

01:03:16.960 --> 01:03:17.960
Bye.

01:03:17.960 --> 01:03:18.960
Bye.

01:03:18.960 --> 01:03:19.960
Bye.

01:03:19.960 --> 01:03:20.960
Bye.

01:03:20.960 --> 01:03:21.960
Bye.

01:03:21.960 --> 01:03:22.960
Bye.

01:03:22.960 --> 01:03:23.960
Bye.

01:03:23.960 --> 01:03:24.960
Bye.

01:03:24.960 --> 01:03:25.960
Bye.

01:03:25.960 --> 01:03:26.960
Bye.

01:03:26.960 --> 01:03:27.460
you

01:03:27.460 --> 01:03:29.460
Thank you.

01:03:29.460 --> 01:03:59.440
Thank you.

