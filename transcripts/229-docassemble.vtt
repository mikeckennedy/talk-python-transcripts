WEBVTT

00:00:00.001 --> 00:00:04.420
On this episode, we dive into Python for Lawyers and a special tool for conducting

00:00:04.420 --> 00:00:09.680
legal interviews. Imagine you have to collect details for 20,000 participants in a class

00:00:09.680 --> 00:00:14.640
action lawsuit. DocAssemble, a sweet Python web app, can do it for you with ease. Now,

00:00:14.640 --> 00:00:17.960
you may be thinking, I'm not a lawyer, so this isn't for me. Hang on for a sec.

00:00:17.960 --> 00:00:24.620
DocAssemble is actually a general purpose tool. If you ever have done anything like run a survey

00:00:24.620 --> 00:00:29.220
on somewhere like SurveyMonkey or created a Google Forms to gather a bunch of information,

00:00:29.220 --> 00:00:34.640
you could do something way more advanced with DocAssemble and control the workflow with Python

00:00:34.640 --> 00:00:39.940
in a really creative and unique way. Join me as I talk with Jonathan Pyle, creator and maintainer

00:00:39.940 --> 00:00:45.620
of DocAssemble. This is Talk Python To Me, episode 229, recorded August 27, 2019.

00:00:58.440 --> 00:01:03.760
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the

00:01:03.860 --> 00:01:08.360
ecosystem and the personalities. This is your host, Michael Kennedy. Follow me on Twitter

00:01:08.360 --> 00:01:13.040
where I'm @mkennedy. Keep up with the show and listen to past episodes at talkpython.fm

00:01:13.040 --> 00:01:18.860
and follow the show on Twitter via at Talk Python. This episode is brought to you by Linode and

00:01:18.860 --> 00:01:23.100
Datadog. Be sure to check out their offers during their segments. It really helps support the show.

00:01:23.740 --> 00:01:28.260
Hey folks, before we get to the interview, I have some exciting news. We've teamed up with

00:01:28.260 --> 00:01:34.100
Humble Bundle to launch a great bundle of Python educational goodness. For a couple weeks, you can

00:01:34.100 --> 00:01:39.860
get three of our courses along with great content from RealPython, PyBytes and many others for as

00:01:39.860 --> 00:01:44.840
little as just $1. If you've been on the fence about trying one of our courses, here's a chance to get

00:01:44.840 --> 00:01:51.440
three of them along with a bunch of other great stuff. Just visit talkpython.fm/HB2019.

00:01:51.440 --> 00:01:57.740
That's HB2019. And be sure to check it out before time runs out. Now let's get to that interview.

00:01:57.740 --> 00:02:00.060
Jonathan, welcome to Talk Python To Me.

00:02:00.060 --> 00:02:01.200
Thanks for having me.

00:02:01.200 --> 00:02:06.500
Yeah, it's great to have you here. We're going to cover a topic that we have, I believe, yet to cover

00:02:06.500 --> 00:02:14.080
really at all. And that is Python for lawyers or writing code that helps practicing lawyers do their

00:02:14.080 --> 00:02:15.440
work. That should be a lot of fun to talk about.

00:02:15.440 --> 00:02:20.920
Yeah, the intersection of law and coding is not very big, but there actually are a fair number of

00:02:20.920 --> 00:02:21.480
people doing it.

00:02:21.480 --> 00:02:25.720
Yeah, there are definitely some people doing it. And it's like I was saying before we hit record,

00:02:25.720 --> 00:02:31.460
that a good friend of mine is a lawyer who does a lot of Python. And so I know that there's some

00:02:31.460 --> 00:02:37.580
areas where there's really interesting stuff happening, but it's maybe not as easy to apply

00:02:37.580 --> 00:02:43.040
programming to the problems as say, like chemistry or something like that, right? But it's, I think

00:02:43.040 --> 00:02:45.980
there's still a lot of really interesting things going on there. And I'm looking forward to diving

00:02:45.980 --> 00:02:50.360
into them with you. But before we get to those, let's start with your story. How'd you get into

00:02:50.360 --> 00:02:51.120
programming in Python?

00:02:51.120 --> 00:02:58.580
I got into programming longer than I can even remember. My dad had an IBM PC with a monochrome

00:02:58.580 --> 00:03:04.780
monitor green screen and I was just magnetically attracted to the thing. It had like basic in

00:03:04.780 --> 00:03:11.160
ROM BIOS. And so I would just go over and type programs into it, which I found by reading like

00:03:11.160 --> 00:03:15.940
compute magazine and byte magazine, which in the eighties you could buy in the supermarket and they

00:03:15.940 --> 00:03:17.840
had source code listings and you could type them in.

00:03:17.840 --> 00:03:21.200
Do you remember when you would go to like bookstores and stuff and there was a whole

00:03:21.200 --> 00:03:26.600
computer section of these magazines and these books and like computer shopper for building

00:03:26.700 --> 00:03:29.760
computers out of parts and yeah, it was a different time, right?

00:03:29.760 --> 00:03:32.680
Yeah. I think the books were just kind of more interesting back then.

00:03:32.680 --> 00:03:35.920
And a lot of real do-it-yourself stuff.

00:03:35.920 --> 00:03:41.380
Yeah, for sure. Okay. So you started typing these in like a fair number of folks have to kind of

00:03:41.380 --> 00:03:46.000
get started programming. Like, okay, well, it says if I type this, like I get a little game or a little

00:03:46.000 --> 00:03:49.060
something on my program, on my computer, because there was no internet, right? Like

00:03:49.060 --> 00:03:53.540
this human transcription was how programs got transferred.

00:03:53.540 --> 00:03:57.520
And it was great in basic because you could do interactive stuff very easily. There's this

00:03:57.520 --> 00:04:02.040
command called input, which got you a line of input. And that's kind of hard to do in a lot

00:04:02.040 --> 00:04:06.980
of languages these days because the interfaces are more complicated. So I started with basic,

00:04:06.980 --> 00:04:13.420
but then as I got older, I taught myself C and assembly language and tried to do some real low-level

00:04:13.420 --> 00:04:18.460
stuff on the, on the IBM PC. But then I went off to college, majored in physics, and then went to law

00:04:18.460 --> 00:04:23.800
school and became a lawyer. But I never really got away from computer programming because wherever I

00:04:23.800 --> 00:04:28.620
went, I just found applications for it because people were doing stupid things. And I thought,

00:04:28.620 --> 00:04:35.480
hey, just write some code that gets around this problem. So I was like using OCR text and converting

00:04:35.480 --> 00:04:42.380
it into spreadsheets using regular expressions in Perl and saved a client like $500,000 by doing that.

00:04:42.660 --> 00:04:48.060
It's kind of weird. So, so I just sort of randomly found myself coding, you know, a good percentage

00:04:48.060 --> 00:04:54.040
of my time as a lawyer just because I could do it. And so I've been using Linux and Perl and like

00:04:54.040 --> 00:04:59.980
just random scripts for about 20 years, but I didn't start learning Python until I decided to start with

00:04:59.980 --> 00:05:02.220
Doc Assemble, which was about four years ago.

00:05:02.220 --> 00:05:07.040
Yeah. Doc Assemble is a really cool project, but before we get into any of that, you know, you talked

00:05:07.040 --> 00:05:12.560
about converting OCR text into spreadsheets using regular expressions. You know, that's not

00:05:12.560 --> 00:05:16.300
super easy to do, but it feels like you can kind of piece together some of these libraries and these

00:05:16.300 --> 00:05:21.220
tools to make it happen. And it's one of these examples of, you know, this rant that I'm always

00:05:21.220 --> 00:05:27.020
on is that we don't necessarily need 10 times more programmers, but all the people out there with

00:05:27.020 --> 00:05:32.220
their specialty, they could have a little bit of programming skill. They could solve like major

00:05:32.220 --> 00:05:38.080
problems in their area like law or biology or whatever. If you just say, you know what, this problem

00:05:38.080 --> 00:05:43.180
actually is really easily solved or pretty easily solved with a little programming if you just knew

00:05:43.180 --> 00:05:45.180
what to do, right? It sounds like that's a great example of it.

00:05:45.180 --> 00:05:51.060
Yeah. And I think just because of my background, I was the only person in the entire firm who knew what

00:05:51.060 --> 00:05:56.120
a regular expression was and even knew that there was a solution to this problem because everybody else

00:05:56.120 --> 00:06:02.220
would just be like, oh, we need to hire some low cost labor in Vietnam to just type everything in

00:06:02.220 --> 00:06:06.600
manually. And I was like, seriously, there's got to be a cheaper way.

00:06:06.600 --> 00:06:11.020
Well, and more reliable and faster, right? Like, so suppose like you're like, you know,

00:06:11.020 --> 00:06:16.420
we actually have this firm in Vietnam and these folks are really good. We can get this done. If it's that

00:06:16.420 --> 00:06:21.900
much text that you're talking about, does it really make sense to wait the month for them to type it in?

00:06:21.900 --> 00:06:25.860
And then you're always a little worried maybe about like a mistake slipping in, right?

00:06:25.860 --> 00:06:31.180
Yeah. But I think the way that the legal field has adapted is that they kind of are not so

00:06:31.180 --> 00:06:38.420
worried about mistakes. They kind of understand that they are to be expected. But yeah, there are a lot

00:06:38.420 --> 00:06:43.620
of people who want to hold you accountable for every single OCR being absolutely 100% correct. And that

00:06:43.620 --> 00:06:45.700
results in a lot of waste of money.

00:06:45.700 --> 00:06:51.740
Yeah, I can imagine. All right. So that's the background and whatnot. How about day to day? What

00:06:51.740 --> 00:06:53.680
do you do? Are you still working as a lawyer now?

00:06:53.680 --> 00:06:59.460
I'm still working as a lawyer. I don't work at law firms anymore. I've been in the nonprofit legal

00:06:59.460 --> 00:07:05.240
services world for about 10 years. So I work at this nonprofit called Philadelphia Legal Assistance,

00:07:05.240 --> 00:07:10.880
which provides free legal services to low income people in civil matters. So nothing criminal,

00:07:10.880 --> 00:07:15.440
but things like child custody, how to get welfare benefits, how to get out of mortgage foreclosure.

00:07:15.440 --> 00:07:20.780
And I have a job there in management and administration. I'm responsible for compliance with

00:07:20.780 --> 00:07:27.040
government regulations. But because of my computer background, I actually have sort of changed the

00:07:27.040 --> 00:07:31.460
way that we do business here. And so I automate a lot of the stuff that would otherwise be done manually.

00:07:31.460 --> 00:07:38.460
And there are a lot of grants available for tech work in the legal aid space to help low income people.

00:07:38.460 --> 00:07:44.600
And so I've worked on a number of grants trying to bring computer programming and data analysis into

00:07:44.600 --> 00:07:49.800
the legal aid world so that we can better advocate for low income people as a whole.

00:07:49.800 --> 00:07:56.060
That sounds like a really good use of programming and legal skills. Now, I don't know very much about

00:07:56.060 --> 00:08:04.460
nonprofit legal services. I certainly understand how for-profit legal agencies work, right?

00:08:05.240 --> 00:08:12.800
But just give me a real quick sense of, you know, like how do businesses like that even run for folks who are not in the legal field and know about it?

00:08:12.800 --> 00:08:18.280
The biggest thing is government funding. And in the United States, the Legal Services Corporation is a

00:08:18.280 --> 00:08:26.000
federal government agency that hands out money to every county in the country. So the low income people have some

00:08:26.000 --> 00:08:28.780
law firm that they can go to and get help for free.

00:08:29.240 --> 00:08:35.560
And they've been a big supporter of technology. In fact, they, I think the legal aid nonprofit world is more

00:08:35.560 --> 00:08:40.440
technologically forward thinking than the big law firms that have all the money in the world,

00:08:40.440 --> 00:08:47.300
because we understand that it has benefits to helping low income people get answers to their legal questions.

00:08:47.300 --> 00:08:47.780
Yeah.

00:08:47.780 --> 00:08:51.600
So we've been pretty innovative in the, in the legal aid nonprofit world.

00:08:51.600 --> 00:08:56.220
That's cool. Of course, you know, thinking about it, right? The, the large legal firms,

00:08:56.920 --> 00:09:05.200
their incentives are not necessarily aligned with automating and massively speeding up some of these

00:09:05.200 --> 00:09:10.900
actions, right? Like if I can push a button and get an answer in a couple of milliseconds,

00:09:10.900 --> 00:09:12.880
they can't bill for that. Right.

00:09:12.880 --> 00:09:18.380
I mean, I think they're very slowly. There are some price pressures on those, on the big firms.

00:09:18.380 --> 00:09:24.520
And clients say, I'm not willing to pay for legal research because I know that this can be done with

00:09:24.520 --> 00:09:28.400
computers and AI. And so I think they're eventually going to come along, but yeah,

00:09:28.400 --> 00:09:31.720
they don't have any big incentive to save the clients much money.

00:09:31.720 --> 00:09:35.080
Once they get the job, right? Like I can definitely see that in the competition. Like,

00:09:35.080 --> 00:09:38.560
Hey, we could do this for half price of those guys because we're not going to charge you for this

00:09:38.560 --> 00:09:44.460
thing. We automated, but yeah, it's, I guess it's a mixed bag. Interesting. So let's talk about

00:09:44.460 --> 00:09:53.240
this project that you created called doc assemble, which it's a really nice project. What is it? And

00:09:53.240 --> 00:09:54.780
what is it used for? Let's start there.

00:09:54.780 --> 00:10:00.640
So it's a free and open source platform for developing guided interviews. And if you don't

00:10:00.640 --> 00:10:05.520
know what a guided interview is, think about turbo tax. It's something that asks you one question at a

00:10:05.520 --> 00:10:12.040
time. It can get very detailed. It can be very long, but at the end of it, you get say a tax return,

00:10:12.340 --> 00:10:16.040
or in other contexts, you might get a legal document that you can file in court,

00:10:16.040 --> 00:10:21.320
or you could even get just like legal advice at the end, like legal information or be directed to

00:10:21.320 --> 00:10:27.640
a resource or do an application. There are a variety of guided interview software packages out there,

00:10:27.640 --> 00:10:32.720
but none of them were free and open source or did what I want. So, so I created doc assemble because

00:10:32.720 --> 00:10:39.340
it would serve my purposes and it'd be something that we could develop and crowdsource through the free

00:10:39.340 --> 00:10:43.760
open source software movement. Yeah. It's, it's really nice. And it's a beautiful looking site.

00:10:43.760 --> 00:10:51.320
I don't know too much about the legal websites, but I know like some of these gather your signature

00:10:51.320 --> 00:10:58.300
sites and stuff, you go to them and they just look so bad and so old school and sketchy. You're like,

00:10:58.300 --> 00:11:02.840
I really don't know if I want to put personal information into this thing. So it's nice that

00:11:02.840 --> 00:11:06.660
this is a good looking web app that, you know, inspires confidence, I guess.

00:11:06.660 --> 00:11:12.740
Yeah. I don't quite understand why people pay $30 a month for some service that gathers the

00:11:12.740 --> 00:11:19.020
signature. Cause I figured out how to do that with a canvas element in JavaScript. It was really easy.

00:11:19.020 --> 00:11:21.620
I don't really, I don't really know what the big deal is.

00:11:21.680 --> 00:11:24.160
Well, see that's part of that programmer skill, right? Like, yeah.

00:11:24.160 --> 00:11:30.120
Yeah. So if people want to experience this and get a sense for what it's about, I guess the first

00:11:30.120 --> 00:11:35.460
thing is you can drop over at docassemble.org, right? And then there's a, at the very bottom,

00:11:35.460 --> 00:11:39.780
you can run a demo and then it just goes through and ask you questions. Like, what is your name?

00:11:39.780 --> 00:11:45.020
And then you hit it in you, what is your location? And then possibly based on what state you're in,

00:11:45.020 --> 00:11:49.760
it might ask you different questions, right? It can kind of flow different questions together

00:11:49.760 --> 00:11:55.100
based on your answers, right? Yeah. And while you can do some of that stuff in like SurveyMonkey

00:11:55.100 --> 00:12:01.820
or Google Forms, this is kind of like the very advanced version of that, where you might have

00:12:01.820 --> 00:12:06.600
incredibly complicated logic that would be so very difficult to manage if you were trying to

00:12:06.600 --> 00:12:13.400
like hand code endpoints in a Flask app, for example, you'd just have so many endpoints and be

00:12:13.400 --> 00:12:19.500
hard to keep track of them. But it's sort of a system for abstracting away that the logic and making

00:12:19.500 --> 00:12:26.800
it easy and maintainable to go from what the law is or what the domain knowledge is to an interview

00:12:26.800 --> 00:12:31.320
that gathers information. Yeah. And I guess it's worth pointing out and you do on your website or

00:12:31.320 --> 00:12:36.620
the GitHub repo, I can't remember about, I read somewhere from your documentation that this is

00:12:36.620 --> 00:12:42.700
developed in the context of a practicing lawyer, but it is not specific to law, right?

00:12:42.840 --> 00:12:50.180
Yeah. I think one of my first users who found it on GitHub was in France and they were using it to

00:12:50.180 --> 00:12:56.440
diagnose problems and mechanical equipment. So, you know, anything that's amenable to asking one

00:12:56.440 --> 00:13:02.140
question at a time where you don't want to have to like hand code all of those screens, you could use

00:13:02.140 --> 00:13:07.400
this system for. Yeah. I can see this almost like tech support even, right? Like in that context,

00:13:07.600 --> 00:13:12.700
does the machine turn on? Yes or no? Yeah. Does it, does smoke come from it? Yes or no?

00:13:12.700 --> 00:13:16.800
First turn it off. Okay. Now what's the next question? Yeah. That's, that's pretty interesting

00:13:16.800 --> 00:13:21.900
actually. And it definitely seems more flexible than SurveyMonkey and you know, all those things are

00:13:21.900 --> 00:13:27.840
commercial services that are SaaS and you can just take it the way it is or leave, right? And this is

00:13:27.840 --> 00:13:32.380
obviously written in Python, something you can download from GitHub and customize.

00:13:32.780 --> 00:13:38.760
And people do like to customize. So a lot of people don't like my standard bootstrap front end. And so

00:13:38.760 --> 00:13:45.020
they, they write their own CSS. So there's really no limit to your ability to customize if you know

00:13:45.020 --> 00:13:50.500
how to write JavaScript or know how to write Python. That's one of the nice things about open source

00:13:50.500 --> 00:13:55.280
software is that like, I have no problem with ultimate extensibility. Yeah. That's super cool.

00:13:55.660 --> 00:14:01.300
And it's, you know, a Python web app based on bootstrap. So that probably means that all the

00:14:01.300 --> 00:14:06.680
fancy, nice bootstrap themes that you can find over at like wrap bootstrap or start bootstrap, or,

00:14:06.680 --> 00:14:10.160
you know, probably a bunch of others that you don't know about. You can go find all these either

00:14:10.160 --> 00:14:16.460
super cheap, like 10, $20 themes, or even free and open source ones. You can probably plug those in

00:14:16.460 --> 00:14:20.840
and get the look and feel you want, right? Yeah. And that's kind of why I picked bootstrap

00:14:20.840 --> 00:14:26.720
because it's widely used and it's themable. And there are a lot of different options if you don't

00:14:26.720 --> 00:14:30.920
like the standard look and feel. Cool. So I definitely want to dig into the technical side

00:14:30.920 --> 00:14:35.540
of things, but maybe just another quick question or two of the high level to set the stages. So

00:14:35.540 --> 00:14:42.340
you're working, helping out these folks at the legal nonprofit. How do you use this in your day-to-day

00:14:42.340 --> 00:14:48.060
job? Well, I'm so busy maintaining the platform and working my day job that I don't really have that

00:14:48.060 --> 00:14:54.360
much time to deploy stuff, but I have been working on a very complicated interview that asks all the

00:14:54.360 --> 00:14:59.800
questions necessary to help somebody file for bankruptcy. And that's primarily being done by

00:14:59.800 --> 00:15:06.380
a nonprofit called Upsolve, but they're one of our sub grantees. So if you check out Upsolve.org and see

00:15:06.380 --> 00:15:13.180
what they've done, they've kind of democratized chapter seven bankruptcy for the nation. Whereas before you

00:15:13.180 --> 00:15:18.800
would have to hire a lawyer for $2,000 or try to find a pro bono lawyer to do it for free,

00:15:18.800 --> 00:15:19.480
which is very difficult.

00:15:19.480 --> 00:15:24.920
Which sounds horrible when you're literally filing for bankruptcy. You're in a financially bad place and

00:15:24.920 --> 00:15:29.140
then you got to go pay to dig out from the hole, right? Which is rough.

00:15:29.140 --> 00:15:35.400
Yeah. It costs a lot of money to be poor. You can go on Upsolve site and you can go through a very long

00:15:35.400 --> 00:15:41.400
guided interview that's using Doc Assemble and it gathers all the information necessary for an 80 page

00:15:41.400 --> 00:15:46.600
bankruptcy petition. And then they have a lot of other custom code after that, but the questionnaire

00:15:46.600 --> 00:15:51.040
that they do is based on Doc Assemble. So I do get to work on some of that during the day,

00:15:51.140 --> 00:15:57.840
but I also use the system in legal aid to do things like gather retainer agreements from clients. I can

00:15:57.840 --> 00:16:02.860
send them a link. They can click on it with their smartphone, sign their name with their finger and

00:16:02.860 --> 00:16:06.760
the signature goes into the document. So stuff like that is pretty useful.

00:16:06.760 --> 00:16:11.300
That's really cool. And I'm, it seems like it really should be used a little bit more even

00:16:11.300 --> 00:16:17.080
outside of the legal space. Cause it seems, seems quite interesting. So maybe one of the things that

00:16:17.080 --> 00:16:23.800
we could talk about is just why Python is not like you were afraid of other languages, right? You

00:16:23.800 --> 00:16:29.300
obviously did a bunch of C in assembly language, right? Like that's a pretty hardcore language.

00:16:29.300 --> 00:16:31.920
So why do you choose Python for it?

00:16:31.920 --> 00:16:38.580
Well, when I started the system, I was sort of a Perl hacker and I loved Perl, but my idea for the

00:16:38.580 --> 00:16:46.040
system was I want to make this into this high level language so that you can basically code the law and

00:16:46.040 --> 00:16:52.040
that a lawyer could sit down with minimal knowledge of computer programming, like just to do if else

00:16:52.040 --> 00:16:57.360
statements that set true false variables, for example. I mean, that is not rocket science. And I wanted them

00:16:57.360 --> 00:17:03.540
to be able to understand code and read it and work with it. Maybe they would get help from somebody to

00:17:03.540 --> 00:17:08.980
clean up the syntax. But, so I was looking around for something that was very clean and readable.

00:17:08.980 --> 00:17:15.300
Perl is great, but it has so many punctuation marks, whereas Python is like so neat and clean.

00:17:15.720 --> 00:17:21.820
And also, I saw these books in the bookstore where it was like teach Python to your kid and

00:17:21.820 --> 00:17:25.740
like integrate Python with Minecraft if you're, you know, 12 years old.

00:17:25.740 --> 00:17:25.960
Yeah.

00:17:25.960 --> 00:17:30.480
So I thought, well, if this language is good enough for six year olds, then, you know,

00:17:30.480 --> 00:17:35.600
it's good enough for a lawyer who has an advanced degree. so I thought that would be a good

00:17:35.600 --> 00:17:40.420
general purpose programming language to base this on. And I definitely wanted a general purpose

00:17:40.420 --> 00:17:45.940
programming language. A lot of people argue with me and they say, oh, if you're encoding legal rules,

00:17:45.940 --> 00:17:50.700
you really should have a declarative programming language. But the problem is that all those

00:17:50.700 --> 00:17:55.260
declarative programming languages were developed in academia. They don't really get used much

00:17:55.260 --> 00:18:00.800
in the real world and they don't have loads and loads of packages that you can just install if you

00:18:00.800 --> 00:18:02.940
want to integrate it with Slack, for example.

00:18:02.940 --> 00:18:07.020
Give us some examples of the declarative languages you're considering or people were suggesting.

00:18:07.280 --> 00:18:12.800
Oh, I don't even remember them because I didn't give them too much of a thought, but everyone

00:18:12.800 --> 00:18:18.380
that I found it, like, first of all, it was not that easy to read because it would use like weird

00:18:18.380 --> 00:18:20.100
Greek notation or whatever.

00:18:20.100 --> 00:18:20.660
Yeah.

00:18:20.660 --> 00:18:25.640
I also read a article where they had tried to do some of the stuff in the eighties using one

00:18:25.640 --> 00:18:31.000
of these declarative languages. And they found that the attorneys just like first wrote out procedural

00:18:31.000 --> 00:18:37.260
code and then converted their procedural ideas into this declarative syntax. So I thought,

00:18:37.260 --> 00:18:42.460
well, maybe this whole declarative stuff is really just something that's academically

00:18:42.460 --> 00:18:46.700
interesting, but the way that people think is more aligned with the way the general purpose

00:18:46.700 --> 00:18:49.420
programming languages that are procedural actually work.

00:18:49.420 --> 00:18:49.520
Yeah.

00:18:49.520 --> 00:18:49.840
Yeah.

00:18:49.840 --> 00:18:51.360
And Python has a really...

00:18:51.360 --> 00:18:51.400
But there's a big debate.

00:18:51.400 --> 00:18:52.420
Yeah.

00:18:52.420 --> 00:18:59.100
I can imagine. So Python has that joke, I guess. I don't know if you've seen it. It says it has

00:18:59.100 --> 00:19:04.140
like a little paper or file or something with some, a pseudocode. It says, how do you convert

00:19:04.140 --> 00:19:08.620
the pseudocode into Python? Like they put dot PY on the end of the file.

00:19:08.620 --> 00:19:09.020
Yeah.

00:19:09.020 --> 00:19:14.500
Python is one of the languages that's closer to the pseudocode in the way that people might

00:19:14.500 --> 00:19:19.100
like sketch it out in words, not flow charts, but like little words, right? Or statements.

00:19:19.620 --> 00:19:24.260
So it's pretty nice as opposed to, I don't know, Java or C# where you've like, well,

00:19:24.260 --> 00:19:28.080
now we go create a class and you put the public static main void in here to get started. Like,

00:19:28.080 --> 00:19:29.060
whoa, what is all this?

00:19:29.060 --> 00:19:33.940
Yeah. And I remember when I was a teenager, I was reading a lot of Donald Knuth who did

00:19:33.940 --> 00:19:38.440
LaTeX and stuff. And he had a whole book on literate programming. And I was really inspired

00:19:38.440 --> 00:19:43.460
by that. Like, can we make programming as much like English as possible? And I think Python

00:19:43.460 --> 00:19:44.940
really does that to a big extent.

00:19:44.940 --> 00:19:45.640
Yeah, for sure.

00:19:45.640 --> 00:19:51.060
Some people want me to use JavaScript and JavaScript is very nice, but like iterating

00:19:51.060 --> 00:19:57.240
through an object or a dictionary, it takes like all this nonsense in JavaScript.

00:19:57.240 --> 00:19:58.500
Definitely takes nonsense.

00:19:58.500 --> 00:19:59.660
Whereas in Python, it's so simple.

00:19:59.660 --> 00:20:06.340
I think JavaScript is nice in that it is super executable in lots of places, right? Like

00:20:06.340 --> 00:20:10.980
we all have browsers, you can run it, but that doesn't necessarily mean it's a nice language.

00:20:10.980 --> 00:20:14.560
If you take away its execution story, right?

00:20:14.560 --> 00:20:16.880
Yeah. It's not horrible, but...

00:20:16.880 --> 00:20:17.320
No, no, no.

00:20:17.320 --> 00:20:18.620
There's certainly things that are worse.

00:20:18.620 --> 00:20:19.840
But Python just has so many advantages.

00:20:19.840 --> 00:20:25.420
Yeah. Especially when your goal is to write, create a way for folks who are not programmers

00:20:25.420 --> 00:20:27.960
to write simple logic into it, right?

00:20:29.840 --> 00:20:34.220
This portion of Talk Python To Me is brought to you by Linode. Are you looking for hosting

00:20:34.220 --> 00:20:39.020
that's fast, simple, and incredibly affordable? Well, look past that bookstore and check out

00:20:39.020 --> 00:20:45.900
Linode at talkpython.fm/Linode. That's L-I-N-O-D-E. Plans start at just $5 a month for

00:20:45.900 --> 00:20:50.700
a dedicated server with a gig of RAM. They have 10 data centers across the globe. So no matter

00:20:50.700 --> 00:20:54.900
where you are or where your users are, there's a data center for you. Whether you want to run

00:20:54.900 --> 00:21:00.040
a Python web app, host a private Git server, or just a file server, you'll get native SSDs

00:21:00.040 --> 00:21:06.380
on all the machines, a newly upgraded 200 gigabit network, 24-7 friendly support, even on holidays,

00:21:06.380 --> 00:21:09.960
and a seven-day money-back guarantee. Need a little help with your infrastructure?

00:21:09.960 --> 00:21:14.700
They even offer professional services to help you with architecture, migrations, and more.

00:21:14.940 --> 00:21:20.700
Do you want a dedicated server for free for the next four months? Just visit talkpython.fm/Linode.

00:21:20.700 --> 00:21:28.760
One of the things that I thought was interesting was your use of YAML and Markdown. Now, Markdown,

00:21:28.760 --> 00:21:33.220
I kind of expected, like that's not super surprising. But if you want to create one of these interviews,

00:21:33.220 --> 00:21:38.840
you might want to ask the question like, what is your name and what is your age? Oh, and the age has

00:21:38.840 --> 00:21:43.040
to be an integer and things like that. It has to be a number. So maybe talk a little bit about how you're

00:21:43.040 --> 00:21:49.220
using YAML to let people create these interview flows. Well, I picked YAML in part for the same

00:21:49.220 --> 00:21:55.040
reasons I picked Python, because it was machine-readable and human-readable at the same time.

00:21:55.040 --> 00:22:01.660
Like rather than use JSON as a way to structure things like lists and dictionaries, I thought it

00:22:01.660 --> 00:22:07.880
made sense to use YAML just because it had the minimum of punctuation. And also attorneys are used

00:22:07.880 --> 00:22:13.020
to doing outlines because when they go to law school, that's how you study is by creating an outline

00:22:13.020 --> 00:22:18.620
of the subject. And I just thought YAML looks so friendly because it's just like bullet points

00:22:18.620 --> 00:22:23.720
made of hyphens. So that's why I settled upon that. I needed something that wasn't just code. It was more

00:22:23.720 --> 00:22:29.320
of a data structure. Yeah, it looks really nice and clean. And I can certainly see if you give like a

00:22:29.320 --> 00:22:33.260
little template example to somebody, they're like, oh yeah. Yeah, I try to teach by example.

00:22:33.260 --> 00:22:38.140
Yeah, that's definitely a good way to do it. Yeah. So you can have like a dropdown with the list and

00:22:38.140 --> 00:22:42.020
really, because that's pretty easy, right? And it's actually not that different than markdown,

00:22:42.020 --> 00:22:47.200
like the dash, dash, dash item. And YAML is also would work in markdown as well. That's pretty

00:22:47.200 --> 00:22:52.120
interesting that they're kind of similar. Yeah. And I chose markdown just because I didn't want a lot

00:22:52.120 --> 00:22:59.520
of HTML characters. And also it can convert into so many different forms. So markdown is used sometimes

00:22:59.520 --> 00:23:04.200
for documents that get turned into PDF, but it's also used for stuff that appears on the screen.

00:23:04.540 --> 00:23:09.060
So it's a very flexible way to format stuff. Yeah. And the thing that I like about markdown,

00:23:09.060 --> 00:23:13.640
like the reason I use it a lot is you can use other formats that are maybe richer, like

00:23:13.640 --> 00:23:20.720
HTML fragments and stuff. But if the slightest thing goes wrong with it, everything is wrecked,

00:23:20.720 --> 00:23:27.040
right? Yeah. It's so bad. And you've also got the potential problem of user input that could be

00:23:27.040 --> 00:23:32.320
malicious, right? If you're accepting this like definition from someone else, right? But if it's

00:23:32.320 --> 00:23:37.900
markdown, it's pretty safe. Yeah. Now, another thing that you do that I think is pretty interesting is

00:23:37.900 --> 00:23:44.280
you can define these questions like, what is your favorite number? And it defines a variable like

00:23:44.280 --> 00:23:50.420
best underscore number potentially. And it has a data type and so on. But then you can write Python code

00:23:50.420 --> 00:23:56.440
that has conditionals, right? We talked about, so if I said I was in Oregon versus a different state,

00:23:56.440 --> 00:24:00.520
it might ask me a different question because the rules in Oregon are different than they are in

00:24:00.520 --> 00:24:06.320
Pennsylvania, for example, right? Right. And so you've got this little example here that says

00:24:06.320 --> 00:24:12.560
something like, if user.iscitizen or user.islegalpermanentresident, user.islegible equals

00:24:12.560 --> 00:24:20.740
true.else, user.islegible equals false. Now, that alone will actually sort of trigger some of the

00:24:20.740 --> 00:24:27.280
questions that get shown or a flow in which the questions are asked. And so that sounds like magic.

00:24:27.280 --> 00:24:33.980
How is this simple Python conditional and little tests like that that I'm writing actually controlling

00:24:33.980 --> 00:24:40.820
the flow and the questions? Yeah. So the core logic engine of Doc Assemble is that it tries to evaluate

00:24:40.820 --> 00:24:48.920
some Python code and then it traps any name errors. So if you go along and you write some Python code and

00:24:48.920 --> 00:24:55.700
you refer to a variable that hasn't been defined yet in the namespace of the interview answers,

00:24:55.700 --> 00:25:00.500
then it triggers a name error, which is just like core Python stuff.

00:25:00.500 --> 00:25:05.380
Right. If I say user.iscitizen and that the user doesn't have a .iscitizen, obviously,

00:25:05.380 --> 00:25:07.240
like you might get an error or something like that, right?

00:25:07.240 --> 00:25:11.740
Yeah. That would be an attribute error. But if you refer to just a name that's not defined,

00:25:11.840 --> 00:25:15.380
like I trap that. If user itself is not defined, for example.

00:25:15.380 --> 00:25:21.320
Yeah. If user is not defined. Then I wrote code that then takes that variable name and then goes

00:25:21.320 --> 00:25:28.620
and looks for a question in that YAML file that offers to define that variable. So it's sort of like,

00:25:28.620 --> 00:25:33.980
and then it goes in, once it sets that variable, which might take a question to the user,

00:25:33.980 --> 00:25:36.080
then it evaluates it again from the start.

00:25:36.080 --> 00:25:40.420
That's funny. So it like runs it and it goes, oh, we stopped, we crashed on users. Do we,

00:25:40.420 --> 00:25:45.920
we bet we have to ask the user question. Then you have the data value set for the user and you ask it,

00:25:45.920 --> 00:25:49.240
you like rerun the Python code again, you get a little farther, you're like, oh,

00:25:49.240 --> 00:25:53.940
yeah, is eligible as a attribute error. We got to figure out if we got an, is eligible or whatever,

00:25:53.940 --> 00:25:54.180
right?

00:25:54.180 --> 00:25:58.780
Yeah. So it's like every time the screen loads, it reevaluates everything from the top,

00:25:58.780 --> 00:26:03.240
you know, which is moderately inefficient, but with computers, you know, it's very fast.

00:26:03.240 --> 00:26:07.980
It's yeah. Yeah. Yeah. And so at the end of it, like it, once, if it gets all the way through,

00:26:07.980 --> 00:26:11.220
then you're done with the interview. You have all the information you need. You've,

00:26:11.220 --> 00:26:16.960
you've gone through the logical paths that you need to go through. And the nice thing about Python is

00:26:16.960 --> 00:26:27.740
that if a user is citizen or user is an eligible alien, you know, it'll stop at a user is citizen

00:26:27.740 --> 00:26:35.000
and it won't even try to evaluate the second part. So it won't trigger any name errors or any other

00:26:35.000 --> 00:26:41.820
errors on the part after the or. So therefore the interview can be parsimonious about what it asks,

00:26:41.820 --> 00:26:46.240
what questions it asks of the user. So the user is only asked for information that is logically

00:26:46.240 --> 00:26:52.860
necessary. And that's all done sort of by tapping into the way that Python is parsed and evaluated.

00:26:52.860 --> 00:26:58.860
Yeah. Interesting. Because Python short circuits the or, you might not have to ask them both,

00:26:58.860 --> 00:27:04.240
are you a citizen and are you a legal resident? And it's two separate questions. Like only if they say,

00:27:04.240 --> 00:27:06.520
no, I'm not a citizen, do you ask them about the residency?

00:27:06.520 --> 00:27:07.220
Yeah, exactly.

00:27:07.220 --> 00:27:12.260
Huh. All right. So this is pretty interesting. Like this is not how normal Python works,

00:27:12.260 --> 00:27:19.040
but this is a pretty creative. And I would say in this context, really a positive way to build like

00:27:19.040 --> 00:27:24.660
an extensible way to script out this flow. Like that's definitely better than, you know, flowchart,

00:27:24.660 --> 00:27:26.880
draggy droppy backend or something.

00:27:26.880 --> 00:27:32.740
I still have a lot of people who would prefer that I created a flowchart GUI interface for them. But

00:27:32.740 --> 00:27:40.160
I just find with any service that offers a no code solution, what that means is the easy stuff is easy

00:27:40.160 --> 00:27:46.760
and the moderately difficult stuff is nearly impossible. Whereas with code, the easy stuff is

00:27:46.760 --> 00:27:52.700
kind of hard and the moderately difficult stuff is a little bit harder and really, really complex stuff

00:27:52.700 --> 00:27:55.240
is doable. And so I'd rather have the latter.

00:27:55.240 --> 00:27:59.020
Yeah, of course. And that makes a lot of sense because if you just want to ask like three questions

00:27:59.020 --> 00:28:02.120
and whatever, it's like SurveyMonkey or something like that, right?

00:28:02.120 --> 00:28:05.680
Or a Google form or, you know, you name it, right?

00:28:05.680 --> 00:28:13.600
I like the idea of attorneys just being able to concentrate on specifying the law in if-then-else

00:28:13.600 --> 00:28:20.280
statements and not having to worry about interview flow. Like they don't need to really think about

00:28:20.280 --> 00:28:25.040
like what question is asked when. They can just concentrate on what they're good at, which is

00:28:25.040 --> 00:28:30.040
envisioning the law and just writing it out and let the computer do the work of figuring out what

00:28:30.040 --> 00:28:31.620
questions to ask in the order.

00:28:31.620 --> 00:28:36.260
Yeah, it's really creative. You just rerun it over and over until it stops crashing.

00:28:36.260 --> 00:28:36.840
Yeah.

00:28:36.840 --> 00:28:40.700
You just like work your way through. I think that's pretty creative and I've not seen anything like

00:28:40.700 --> 00:28:41.180
that before.

00:28:41.180 --> 00:28:45.660
And I was giving the example of a name error where you refer to a name that doesn't exist,

00:28:45.660 --> 00:28:53.220
but then in order to do attributes and indexes, indices, I had to create a new object that would

00:28:53.220 --> 00:28:58.660
raise special exceptions because Python variables, and this is one of the limitations of Python,

00:28:58.660 --> 00:29:03.880
like Python objects are not self-aware. Like they don't know their own name. They're just kind of

00:29:03.880 --> 00:29:11.440
like a value that has pointers to them somewhere in the core. So I had to sort of give each object

00:29:11.440 --> 00:29:16.060
an inherent identity. And so that confuses things, but it all works.

00:29:16.060 --> 00:29:19.060
Yeah. Yeah, I know. It sounds like it works pretty well.

00:29:19.060 --> 00:29:25.700
So you define these interviews in YAML files and then you define the flow by like stating the law or

00:29:25.700 --> 00:29:31.680
your desired sort of flow of the interview in Python. And then it just doc assemble just pieces it all

00:29:31.680 --> 00:29:32.580
together and makes it real.

00:29:32.580 --> 00:29:39.000
Yeah. And at the end, you just write some logic that where the endpoint is presenting some final

00:29:39.000 --> 00:29:45.760
screen to the user. And doc assemble just kind of uses dependency satisfaction to ask all the

00:29:45.760 --> 00:29:47.380
appropriate questions in order to get there.

00:29:47.380 --> 00:29:52.860
Yeah. And of course this wouldn't work with some kind of compiled language, right? Like a compiled

00:29:52.860 --> 00:29:56.720
language would have to try to compile and then run it. And it would have to have all the elements

00:29:56.720 --> 00:30:02.040
available at compilation time, not just the ones that it's trying to crash into as it makes its way

00:30:02.040 --> 00:30:02.640
on the branches.

00:30:02.640 --> 00:30:07.260
Well, there are people smarter than me who've built things like the, I don't know how to pronounce

00:30:07.260 --> 00:30:13.600
it, the Jinja 2 templating system. I think what they do is they actually like parse out all of the

00:30:13.600 --> 00:30:20.040
variables that are used and then creates these like stand-in objects for them. I think there are some

00:30:20.040 --> 00:30:25.860
ways to sort of compile everything and then do the logic on it later. But I've just used the sort of

00:30:25.860 --> 00:30:27.200
exception trapping system.

00:30:27.200 --> 00:30:33.280
Yeah. Yeah. It's interesting. So on the website, which I said, it really presents things pretty

00:30:33.280 --> 00:30:38.140
nicely for this open source project. You have a bunch of features and I think it might be worth going

00:30:38.140 --> 00:30:42.700
through those features and then like digging into the technology behind it as a way to see more

00:30:42.700 --> 00:30:47.520
of the various libraries and technologies that are at work here.

00:30:47.520 --> 00:30:48.220
Sure.

00:30:48.220 --> 00:30:48.540
Sound good?

00:30:48.540 --> 00:30:53.240
Yeah. So let's just like start at the top one. It says you have a whizzy wig, what you see,

00:30:53.240 --> 00:30:59.960
what you get at her and you can compose your templates as a Word document using a Word add-in

00:30:59.960 --> 00:31:05.300
to get started. So how does that work? Like what do you, we talked about YAML being the definition

00:31:05.300 --> 00:31:07.780
of these things, but then what's happening here?

00:31:07.780 --> 00:31:14.040
Yeah. A lot of lawyers like to create Microsoft Word documents and very helpfully, there is a Python

00:31:14.040 --> 00:31:21.360
package called Python doc X template that somebody developed. It uses two other packages. One is doc X,

00:31:21.360 --> 00:31:25.920
which is kind of a utility for writing Microsoft Word files. And the other is Jinja 2, which I was

00:31:25.920 --> 00:31:33.280
just talking about and just kind of mash them together by using Jinja 2 on XML because Microsoft

00:31:33.280 --> 00:31:39.460
Word files are actually XML inside of a zip file. And so it created a system where you could do Jinja 2

00:31:39.460 --> 00:31:47.140
on a Microsoft Word file. And so I also figured out that Microsoft had a pretty neat tool for putting an

00:31:47.140 --> 00:31:54.960
add-in into Microsoft Word, both the online version and the desktop version that ran in a little sidebar.

00:31:54.960 --> 00:32:00.900
So I was able to create a sidebar for Microsoft Word that had the variables in your interview and you

00:32:00.900 --> 00:32:06.020
could just click them to insert them into your Word document. So that's how I was able to do some nice

00:32:06.020 --> 00:32:12.740
Microsoft Word templating and to make it as WYSIWYG as possible. I'm actually not a fan of WYSIWYG. I put

00:32:12.740 --> 00:32:17.460
that on the website because other people are. I would prefer that everybody used Markdown. I have another

00:32:17.460 --> 00:32:22.800
document assembly tool that doesn't use Microsoft Word files that just converts Markdown to PDF.

00:32:22.800 --> 00:32:27.980
And that's what I like better because it uses Pandoc on the backend, which in turn uses LaTeX.

00:32:28.500 --> 00:32:34.160
I'm a big LaTeX fan. So yeah. Okay. Yeah. Sounds, sounds very interesting. We talked already about

00:32:34.160 --> 00:32:38.320
gathering signatures. That's one of the things that it does. And it sounds like you're gathering those

00:32:38.320 --> 00:32:44.660
with an HTML5 canvas in JavaScript. And then what you convert those to images or something like that?

00:32:44.660 --> 00:32:54.280
Yeah. The canvas, I think it's transmitted as a PNG file encoded in a URL. It's like a base64

00:32:54.280 --> 00:33:00.020
conversion and it turns, it's like a data URL. And so you just transmit that in a post request

00:33:00.020 --> 00:33:02.700
up to the server. It's a, it's really pretty simple.

00:33:02.700 --> 00:33:09.600
Yeah. I've never tried that, but that sounds totally simple. You also have live chat. So if you're hosting

00:33:09.600 --> 00:33:16.000
an interview, like you're person receiving all the answers, right? You can assist users in real time

00:33:16.000 --> 00:33:20.760
with even screen sharing and remote screen control. What's up with this one?

00:33:20.760 --> 00:33:27.280
That was a lot of work. I figured out how to use WebSockets technology. There's a great package

00:33:27.280 --> 00:33:35.360
called FlaskSocketIO that enables you to use this sort of WebSocket event-driven communications

00:33:35.360 --> 00:33:46.540
protocol within sort of the Flask paradigm. And so I created this very responsive, quick chat system

00:33:46.540 --> 00:33:51.440
where you can chat back and forth with somebody who's like works for your company, who helps out

00:33:51.440 --> 00:33:58.240
users. And so you can get chat messages from users in real time facilitated by like Redis and this

00:33:58.240 --> 00:34:03.940
socket IO system. And one of the cool things I figured out I was able to do with that is to have this

00:34:03.940 --> 00:34:13.680
sort of pseudo screen share where I would store the HTML in Redis and then pull it down and let the

00:34:13.680 --> 00:34:19.440
operator look at it. And it would be refreshed like on triggers in JavaScript. And so,

00:34:19.440 --> 00:34:23.840
so you can just sit there as the operator and you can watch your users using the system

00:34:23.840 --> 00:34:27.660
and it's not transmitting pixels. It's just transmitting HTML.

00:34:27.660 --> 00:34:32.360
I see. So you're like, this is literally the DOM that they are looking at, right?

00:34:32.360 --> 00:34:37.100
Yeah, basically it's inside of a little iframe. Yeah. I also figured out it was fairly easy for then

00:34:37.100 --> 00:34:45.000
the, the operator to seize control of the user's browser just by sending over some events over the

00:34:45.000 --> 00:34:50.680
WebSockets. So as the operator, you can click a button and control the other user's interview and

00:34:50.680 --> 00:34:56.420
type stuff into their text boxes or click on their buttons. They can see you doing this in real time.

00:34:56.420 --> 00:34:59.760
Yeah. It sounds pretty advanced, but it was actually pretty simple to implement.

00:34:59.760 --> 00:35:04.460
No, it sounds really cool. And I haven't heard of too many things that are like at this level,

00:35:04.460 --> 00:35:07.400
you know, I've definitely seen those little chat programs and stuff.

00:35:07.400 --> 00:35:07.820
Yeah.

00:35:07.820 --> 00:35:12.200
With the operators and whatnot, have some experience with that, but that sounds like a really cool

00:35:12.200 --> 00:35:14.660
feature. I honestly didn't expect that to be in here.

00:35:14.660 --> 00:35:18.260
Yeah. I thought it was a cool feature too, but like nobody is using it. I have no idea why.

00:35:18.260 --> 00:35:20.540
Sometimes you create something and you think you're,

00:35:20.540 --> 00:35:23.680
you're going to get massive use and then nobody actually cares.

00:35:23.680 --> 00:35:27.980
Well, yeah, that is always the challenges. And I suspect, you know, if I had to guess,

00:35:27.980 --> 00:35:32.560
right, like this is super cool that you can help people this way, but you know, it's also

00:35:32.560 --> 00:35:36.740
challenging to have a person sitting there that can always help. And I don't know, it's,

00:35:36.740 --> 00:35:41.080
it's not a lot of fun to be a chat operator, to be honest. I've been one temporarily.

00:35:41.460 --> 00:35:46.840
But I do think we need to get out of the paradigm of like, either it's a hundred percent,

00:35:46.840 --> 00:35:52.900
a robotic service, or it's a hundred percent human service with the human touch. Like there has to be

00:35:52.900 --> 00:35:59.440
some middle ground where a human gets involved when necessary, but otherwise they're using a web app.

00:35:59.440 --> 00:36:05.000
So I think it's, it's good to have close contact with your users, at least for part of the time of

00:36:05.000 --> 00:36:09.480
your app development, because then you, you really see what their pain points are in the real world.

00:36:09.480 --> 00:36:12.140
Yeah, that's for sure. And you know, some of the stuff that you're doing is,

00:36:12.140 --> 00:36:17.560
it's super important what the right answer is, right? It's not like, well, I clicked this thing

00:36:17.560 --> 00:36:21.420
in this like spreadsheet app that you built and it didn't quite do what I wanted, right? This is,

00:36:21.420 --> 00:36:25.000
you know, are you eligible for bankruptcy or something, right?

00:36:25.000 --> 00:36:28.780
Yeah. And you know, you don't want your users to commit perjury when they're

00:36:28.780 --> 00:36:33.000
talking to a court about what their property is, for example. So yeah,

00:36:33.000 --> 00:36:34.700
it's important to get the stuff right.

00:36:35.120 --> 00:36:38.940
Yeah, exactly. And so I think the stakes are pretty high here. So that's pretty awesome.

00:36:38.940 --> 00:36:40.020
This is a feature.

00:36:41.860 --> 00:36:47.080
This portion of Talk Python To Me was brought to you by Datadog. Get insights into your Python

00:36:47.080 --> 00:36:52.360
applications and infrastructures with Datadog's fully integrated platform. Debug and optimize your

00:36:52.360 --> 00:36:57.820
code by tracing requests across web servers, databases and services in your environment. Then

00:36:57.820 --> 00:37:03.160
correlate and pivot between distributed request traces, metrics and logs to troubleshoot issues

00:37:03.160 --> 00:37:08.680
without switching tools or contexts. Get started today with a 14 day trial and Datadog will send you

00:37:08.680 --> 00:37:13.260
a free t-shirt. Visit talkpython.fm/Datadog for more details.

00:37:13.260 --> 00:37:20.680
Kind of along those lines, you also have SMS and email, which I guess that's pretty much to be

00:37:20.680 --> 00:37:22.260
expected, but maybe tell us about that real quick.

00:37:22.260 --> 00:37:28.260
Yeah. Isn't there some adage that every piece of software bloats until it can send and receive email?

00:37:28.880 --> 00:37:29.720
Pretty much.

00:37:29.720 --> 00:37:29.760
Pretty much.

00:37:29.760 --> 00:37:34.720
So yeah, so my software does, you know, sending email is not that difficult, although I

00:37:34.720 --> 00:37:43.160
found a way to do it with Mailgun, which uses HTTP because SMTP is just so slow. And then the text

00:37:43.160 --> 00:37:49.440
messaging was also super easy. You know, you just get a Twilio API key and it's sending messages is very

00:37:49.440 --> 00:37:56.740
easy. And then I have another feature using email that nobody uses where you can actually run a mail

00:37:56.740 --> 00:38:02.600
server on your server and you can sort of email into your interview. So if you have an interview

00:38:02.600 --> 00:38:08.540
session, you can, if you want, you can mail documents to it. And so I programmed the mail server to intercept

00:38:08.540 --> 00:38:13.560
those messages and then sort of make changes in the appropriate interview session.

00:38:13.560 --> 00:38:18.460
Yeah, that's cool. I've done that before as well. Like you can either go to the site and log in and

00:38:18.460 --> 00:38:22.440
answer this or type it in or whatever, or you just reply to this email, right? And then it just folds

00:38:22.440 --> 00:38:27.900
it back into the database as if you had done that. Yeah, that's a different level than just sending an

00:38:27.900 --> 00:38:29.460
email, but it is cool and it works.

00:38:29.460 --> 00:38:29.760
Yep.

00:38:29.760 --> 00:38:35.180
Now you talked earlier about the web sockets and the live share and Flask and all that. Let's talk a

00:38:35.180 --> 00:38:39.700
little bit about the hosting. We have Redis, we have Flask, we have some kind of database,

00:38:39.700 --> 00:38:47.820
I suspect. This sounds kind of out of the realm of standard lawyer, technical Linux capabilities.

00:38:47.820 --> 00:38:53.680
Yeah. And unfortunately it's, it's like not a pure Python package. The way I distribute it is

00:38:53.680 --> 00:38:59.940
through Docker because it has so many, it has so many non-Python dependencies and services that need to

00:38:59.940 --> 00:39:05.580
be running. And it's just, you can script the orchestration of that with Docker instead of giving

00:39:05.580 --> 00:39:11.780
people complicated instructions to run and you can get it nicely containerized. So there isn't much

00:39:11.780 --> 00:39:16.720
you can do with it as a pure Python package. Although I tried to abstract it away so that you could sort

00:39:16.720 --> 00:39:22.700
of use the core logic engine and Python by itself. But yeah, that's Docker has been extremely useful

00:39:22.700 --> 00:39:28.640
because I don't think I could have gotten anybody to use it unless installation was, you know, one line

00:39:28.640 --> 00:39:30.420
of bash command or something.

00:39:30.420 --> 00:39:35.320
Yeah. That's cool. You know, Docker is really interesting in this regard. Like a lot of times it solves these

00:39:35.320 --> 00:39:42.260
problems, but it also, it has its kind of its own complexity. Like Docker never feels super simple to me.

00:39:42.260 --> 00:39:47.540
Like, okay, well I can start this, but then how do I make sure it's running or how do I like update a new

00:39:47.540 --> 00:39:51.640
version as a beginner? You know, there's those things always feel pretty challenging.

00:39:51.640 --> 00:39:56.380
Yeah. That's one of the big challenges of distributing software that gets updated is,

00:39:56.560 --> 00:40:01.800
as you have to take into account all the existing users. And so like with something like the SQL

00:40:01.800 --> 00:40:07.240
backend, it was really helpful that I used SQLAlchemy. I don't know how to pronounce it.

00:40:07.240 --> 00:40:07.980
Yeah, that's right.

00:40:07.980 --> 00:40:14.920
And it also has this sort of add-on feature called Alembic, which gives you this method for upgrading

00:40:14.920 --> 00:40:18.000
your SQL. If you wanted to add a column, for example.

00:40:18.000 --> 00:40:22.640
Right. Yeah. SQLAlchemy is awesome in that it lets you write simple Python classes that map to your

00:40:22.640 --> 00:40:26.900
database. It'll even create the tables and the indexes and the relationships. But boy,

00:40:26.900 --> 00:40:30.060
if you change anything, it hates it. Right.

00:40:30.060 --> 00:40:35.680
Well, I think with Alembic, it's kind of adjusts for that in a pretty elegant way. So I haven't had

00:40:35.680 --> 00:40:36.160
problems.

00:40:36.160 --> 00:40:40.460
Right. But if you don't have Alembic, right, your app crashes as soon as you make the changes. So you

00:40:40.460 --> 00:40:44.260
need to go and create the migrations and then automatically apply them like the next time you

00:40:44.260 --> 00:40:46.100
start the app and all that kind of stuff. Right.

00:40:46.200 --> 00:40:52.820
Yeah. So I actually spent the whole last week taking a vacation and working on upgrading from

00:40:52.820 --> 00:41:01.580
Debian stretch to Debian buster and Python 3.5 to 3.6 and migrating the web server from Apache to

00:41:01.580 --> 00:41:03.520
Nginx or however you pronounce it. Yeah.

00:41:03.520 --> 00:41:08.820
And all that Docker stuff does take a lot of time because you have to get it just right because you

00:41:08.820 --> 00:41:13.000
don't want some user to be like, oh, my system crashed. What do I do?

00:41:13.000 --> 00:41:16.640
Yeah. Well, what's nice, though, about Docker is you build the base images like you figure out how

00:41:16.640 --> 00:41:21.860
to create a Debian server with Nginx set up correctly. It's good. Right. You don't have to

00:41:21.860 --> 00:41:25.660
think about it. It's now it's good. It's all set up. Right. And so you just kind of build it later

00:41:25.660 --> 00:41:32.180
at a time. But yeah, it's the real challenge I see is migrating that over over time. So what do

00:41:32.180 --> 00:41:37.580
you tell folks if you say, well, we're going to give them a new version? What do you say that they

00:41:37.580 --> 00:41:42.700
should do? There's two ways that you can upgrade. One is by just clicking a button.

00:41:42.700 --> 00:41:50.720
that does a Python upgrade that just runs pip and gives you Python packages and installs in a virtual

00:41:50.720 --> 00:41:56.600
environment and restarts the services that use Python. So that is pretty painless and doesn't

00:41:56.600 --> 00:42:00.680
have a lot of errors associated with it. But sometimes you need to upgrade all of the

00:42:00.680 --> 00:42:08.640
backend stuff. And the way that you would do that is by basically stopping and removing your Docker

00:42:09.640 --> 00:42:15.160
container entirely and then running a new one with the new Docker image. But then the problem is, well,

00:42:15.160 --> 00:42:21.460
what about all your users data? And so you have to have systems for using Docker volumes or the

00:42:21.460 --> 00:42:27.940
recommended thing is using cloud services like S3 or Azure blob storage. And so I have these complicated

00:42:27.940 --> 00:42:33.120
systems where every time you shut down the server, it backs up all the information to the cloud. And then

00:42:33.120 --> 00:42:35.940
when you start it up again, it restores from the cloud.

00:42:35.940 --> 00:42:36.560
Oh, that's nice.

00:42:36.560 --> 00:42:40.960
And so that automatic backup, which is probably something that's also challenging for folks.

00:42:40.960 --> 00:42:46.160
Oh, yeah. Yeah. And so I've got like cron job running on this Docker machine that does backups.

00:42:46.640 --> 00:42:51.060
So people have run into problems. They tend to do crazy things that you would never anticipate.

00:42:51.060 --> 00:42:57.160
But yeah, it does work pretty reliably to back up to the cloud that way. And the nice thing about

00:42:57.160 --> 00:43:03.240
having everything sort of cloud-based is that it was very simple to make it scalable. Like it's

00:43:03.240 --> 00:43:08.200
not a big deal to add another web application to your cluster.

00:43:08.680 --> 00:43:15.960
And, you know, you can bombard your DocAssemble system with loads and loads of requests. And you're really

00:43:15.960 --> 00:43:19.360
only limited by the speed of your SQL server or your Redis server.

00:43:19.360 --> 00:43:24.940
Yeah. So do you have like one Docker container for Redis, one for SQL, and then like separate web front

00:43:24.940 --> 00:43:27.300
ends, you can fire up more of them or something like this?

00:43:27.300 --> 00:43:34.780
Yeah, you can do it that way. Or you can use like a hosted solution from your cloud provider for your

00:43:34.780 --> 00:43:40.280
Redis or your SQL, which I actually recommend because they have nice backup systems built in.

00:43:40.280 --> 00:43:44.980
Yeah, that's good. Just point into that thing. And they already know how to make sure it's safe and

00:43:44.980 --> 00:43:46.420
fails over and whatnot.

00:43:46.420 --> 00:43:50.140
Yeah. But the problem I have is that people who really have no experience with system

00:43:50.140 --> 00:43:56.700
administration are trying to teach themselves Amazon web services and like multi-server systems.

00:43:56.700 --> 00:44:02.580
They just get confused. The problem with making things easy for people is that you get all these

00:44:02.580 --> 00:44:08.840
curious people who don't have enough experience to sort out problems. So like they run into an error

00:44:08.840 --> 00:44:11.960
and I say, well, get yourself a command line. And they're like, how do I do that?

00:44:11.960 --> 00:44:12.740
Yeah.

00:44:12.740 --> 00:44:14.440
SSH to your machine. How do I do that?

00:44:14.440 --> 00:44:16.840
I typed SSH. It doesn't work.

00:44:16.840 --> 00:44:25.100
Yeah. Then you go down a very long and windy path.

00:44:25.100 --> 00:44:32.000
I'm like, can you teach me how to do this? And I'm like, I learned how to do this over a period of 20 years.

00:44:32.300 --> 00:44:33.540
How am I going to teach you?

00:44:33.540 --> 00:44:37.780
Yeah. Well, I mean, that's part of the trick of like being a programmer or in technologies.

00:44:37.780 --> 00:44:41.760
People look at you and they're like, you know, all these things. I think that means you're

00:44:41.760 --> 00:44:45.500
either super smart or you have some super amazing way to learn them. Like, no, you went through the

00:44:45.500 --> 00:44:49.800
same painful steps, but you just like layered on these skills one at a time. You're like,

00:44:49.800 --> 00:44:54.020
yeah, SSH used to be hard, but I figured out how to get the keys registered and like everything.

00:44:54.020 --> 00:44:57.780
That's not a problem. It's gone on to autopilot. Now I'm on to the next problem,

00:44:57.780 --> 00:45:02.380
like database migrations or whatever. Exactly. Yeah. Yeah. It's tough to communicate all that.

00:45:02.380 --> 00:45:05.160
I don't even really know how to do that all at once.

00:45:05.160 --> 00:45:09.640
Yeah. And they expect it to work so perfectly. And I'm just like, don't you understand what

00:45:09.640 --> 00:45:14.460
benefit you're getting from Docker? It's amazing. We didn't have this 20 years ago.

00:45:15.020 --> 00:45:19.760
We used to do it the hard way. Yeah. So let's go, let's keep going down the thing. I think that's

00:45:19.760 --> 00:45:25.120
interesting here. So you have multiple language support. So like I could conduct the interview

00:45:25.120 --> 00:45:29.980
so the person could say, I prefer Spanish or I prefer English. And then they may get their

00:45:29.980 --> 00:45:36.980
questions in different languages. Right. Yeah. I had a lot of features to help with translations and

00:45:36.980 --> 00:45:42.000
multiple languages. You can have like multiple YAML files, one for Spanish questions and one for

00:45:42.000 --> 00:45:47.540
English questions and use them all in the same sort of logical interview. You can also write

00:45:47.540 --> 00:45:53.100
everything in English and then generate an Excel spreadsheet that has all the text in it and then

00:45:53.100 --> 00:45:58.380
send that spreadsheet to a translator and they translate the English into some other language.

00:45:58.380 --> 00:46:04.820
And then you load that spreadsheet into the system and it will substitute the English with the other

00:46:04.820 --> 00:46:06.180
language. Yeah. That's cool.

00:46:06.340 --> 00:46:11.740
So people are using it for some, for like five language interviews. And I think using the Excel

00:46:11.740 --> 00:46:16.180
spreadsheet is a nice medium because that's what translators are comfortable with.

00:46:16.180 --> 00:46:21.320
Yeah, sure. So another one that's interesting is extensibility. Obviously this is where it gets to

00:46:21.320 --> 00:46:25.740
more of the developer side of things, right? You can use the power of Python to extend the capabilities.

00:46:25.740 --> 00:46:31.440
Maybe give us some examples so we know what's going on here. Cause you also have APIs and

00:46:31.440 --> 00:46:36.860
integrating with third party apps. Maybe talk about those two at the same time. Cause they kind of seem

00:46:36.860 --> 00:46:42.840
the same, but not exactly. Yeah. I tout the extensibility just because everybody wants to do their own

00:46:42.840 --> 00:46:49.400
idea and I can't anticipate all the features that they're going to need. So I just give them the power of

00:46:49.400 --> 00:46:54.540
Python and then they can install a package to do whatever they want. So some people wanted to do

00:46:54.540 --> 00:47:00.860
integrations with Google sheets. So I looked up and found that there is, you know, a package for that

00:47:00.860 --> 00:47:07.360
on PyPy and I can show them how to do that and how to set it up. And so, so people have integrated all

00:47:07.360 --> 00:47:13.060
sorts of things just by importing the package into their system. Yeah. Really nice. And then APIs for

00:47:13.060 --> 00:47:16.800
integrate with third party stuff. There are a number of things that I have like a GitHub integration.

00:47:16.800 --> 00:47:21.340
There's this authoring system where you can write your own YAML right in the web browser.

00:47:22.040 --> 00:47:30.680
And I have a GitHub button that then runs get on the backend and does pushes and commits and stuff like that.

00:47:30.680 --> 00:47:36.400
Yeah. Cool. And for the login system, I'm using the built-in Flask username and password system,

00:47:36.400 --> 00:47:44.000
but a lot of people want to have social logins or Auth0. So I have some APIs that integrate with that.

00:47:44.000 --> 00:47:48.820
People also want to, they like writing the stuff in the web browser, but they also want it

00:47:49.020 --> 00:47:55.340
saved to their desktop. And so I have an integration with a Google drive so that you can press a button

00:47:55.340 --> 00:48:00.460
and sync to your Google drive and then run your interview files that you just synced.

00:48:00.460 --> 00:48:06.100
So there are a lot of different ways that DocAssemble talks to other applications that people like to use.

00:48:06.100 --> 00:48:11.160
Yeah. Cool. Another one kind of related to that is you say you can package your interviews and use

00:48:11.160 --> 00:48:15.100
GitHub and PyPI to share your work with the DocAssemble user community.

00:48:15.500 --> 00:48:21.060
So can you create like extension packages or something like that? And then people can add

00:48:21.060 --> 00:48:22.260
them as a dependency of the app?

00:48:22.260 --> 00:48:30.240
Yeah. So the way that I have structured the system is you write your YAML, but you can also write

00:48:30.240 --> 00:48:37.760
modules like .py files. And the way you package and distribute things is using just the plain old

00:48:37.760 --> 00:48:43.500
Python packaging system. And it will create the Python package for you. And there's a button to upload it

00:48:43.500 --> 00:48:51.100
to PyPI as well as one for GitHub. I'm just sort of using the exact same software distribution system

00:48:51.100 --> 00:48:58.520
that already exists. But the YAML files and other files are just under a data folder in your Python

00:48:58.520 --> 00:49:00.360
package folder system.

00:49:00.360 --> 00:49:00.880
Yeah. Okay.

00:49:00.960 --> 00:49:06.160
So it's great. I didn't have to invent my own package distribution system. I'm just like, do what

00:49:06.160 --> 00:49:08.340
everybody else does on GitHub and PyPI.

00:49:08.340 --> 00:49:13.860
Yeah. Awesome. It also has support for background tasks. Like even when people are not interacting with

00:49:13.860 --> 00:49:19.140
the website, it could be running stuff in the background. Is that using Redis or how's that

00:49:19.140 --> 00:49:19.360
happening?

00:49:19.560 --> 00:49:28.320
That mostly refers to Celery. So Celery is a distributed task queue system in Python, which is

00:49:28.320 --> 00:49:33.840
amazing because the problem with web applications is you have to do everything quickly or else the

00:49:33.840 --> 00:49:38.740
browser is going to time out. The user is going to be sick of looking at a spinner and stop the

00:49:38.740 --> 00:49:45.260
connection or something. But if you use Celery, you can have long running code execute in a separate

00:49:45.260 --> 00:49:51.180
process and then save its results to the place where you have your interview answer stored.

00:49:51.180 --> 00:49:57.040
And the other great thing is they queue up in there. So I have some cool Celery stuff like where if you

00:49:57.040 --> 00:50:03.640
upload a PDF file, it makes a PNG image out of every single page and then sort of in parallel,

00:50:03.640 --> 00:50:09.420
OCRs them for you using Celery and all of its queuing magic.

00:50:09.420 --> 00:50:13.080
Yeah. That's cool. Just grab a PNG of the page and throw it up there and say,

00:50:13.140 --> 00:50:15.780
I mean, you get a chance OCR this and store it here or something like that, right?

00:50:15.780 --> 00:50:20.680
It's really useful because sometimes people have really long documents that they need to

00:50:20.680 --> 00:50:27.100
assemble. And if it takes 30 seconds to do that, you want to be entertaining the user while that

00:50:27.100 --> 00:50:32.060
happens. And so you put it into a background task and maybe have the user answer some other questions.

00:50:32.060 --> 00:50:37.700
And then you just check, oh, is the task ready? And then if it's ready, then you get the document.

00:50:37.700 --> 00:50:38.260
Yeah.

00:50:38.480 --> 00:50:40.800
So yeah, that's been a real lifesaver.

00:50:40.800 --> 00:50:45.880
Nice. I guess maybe the last one to touch on here is the secure bit with server-side

00:50:45.880 --> 00:50:51.500
encryption and document redaction and things like that. Maybe you're using Let's Encrypt or

00:50:51.500 --> 00:50:54.820
something else along those lines. I want to talk about those things.

00:50:54.820 --> 00:51:00.260
Yeah. A big concern of lawyers is that they're getting client information. They're getting personally

00:51:00.260 --> 00:51:06.540
unidentifiable information and they want some reassurance that whatever software they're using

00:51:06.540 --> 00:51:13.640
is not going to reveal those personal details to the world. So there are a number of features that I

00:51:13.640 --> 00:51:19.040
use to try to increase security. One of which is I have Let's Encrypt built into the deployment system.

00:51:19.040 --> 00:51:24.720
So all you need to do is give it your email address and set up your DNS properly and it'll do Let's Encrypt

00:51:24.720 --> 00:51:30.180
for you and it'll renew your Let's Encrypt certificates. It also does server-side encryption.

00:51:30.180 --> 00:51:36.820
And the way that interview answers are stored, I'm letting the interview answers just be a Python

00:51:36.820 --> 00:51:43.980
namespace, which is just a dictionary. And I pickle that using the pickle package. And then I encrypt it

00:51:43.980 --> 00:51:49.940
with the user's password. Every time they contact the server, they send this sort of secret password and

00:51:49.940 --> 00:51:55.340
I use that to encrypt and decrypt. So that password is never stored on the server. And so I can have

00:51:55.340 --> 00:52:02.260
encryption in the, of the pickled, a serialized data structure or right there in the SQL database.

00:52:02.260 --> 00:52:08.600
And then other features too, like a multi-factor authentication for login. That was very easy to

00:52:08.600 --> 00:52:16.020
implement with the various apps and SMS messaging. And a redaction, like I figured out a way to put,

00:52:16.020 --> 00:52:22.260
replace text with like blocks of black ink or whatever. So there are a lot of different ways

00:52:22.260 --> 00:52:27.780
that people can feel secure. I haven't figured out the whole encryption of files on the file system

00:52:27.780 --> 00:52:34.060
problem yet. So if you upload a file, that's not encrypted server side, but everything else is.

00:52:34.060 --> 00:52:39.440
You know, the project is open source and you probably would accept a pull request that would

00:52:39.440 --> 00:52:41.340
add that feature or something like that, right?

00:52:41.460 --> 00:52:42.100
Oh, absolutely.

00:52:42.100 --> 00:52:46.340
Speaking of which, are people, are you looking for contributors to this project? Are other people

00:52:46.340 --> 00:52:49.020
already working on it with you? What's the story there?

00:52:49.020 --> 00:52:55.500
Well, what I've found is that there's no magic to open source and crowdsourcing. Maybe there is in

00:52:55.500 --> 00:53:01.940
other areas, but there are a lot of people who are using the system, some of which are programmers

00:53:01.940 --> 00:53:08.540
themselves. But it's pretty rare that people contribute something substantive to the code.

00:53:08.540 --> 00:53:14.480
So I've still found that even though like I never took any CS classes and I just do this on the nights

00:53:14.480 --> 00:53:21.340
and weekends, I'm still doing 99.9% of the coding. It just hasn't magically happened that other people

00:53:21.340 --> 00:53:26.320
contribute. So if there is somebody who wants to really dig into this and contribute, I would totally

00:53:26.320 --> 00:53:32.220
welcome that. Although I think because I've had 99% control, I kind of have a strong feeling of

00:53:32.220 --> 00:53:37.160
authorship. And so I might have strong opinions about what gets brought into the system.

00:53:37.160 --> 00:53:40.960
Yeah, sure. I mean, one of the things that people do sometimes that can be frustrating is they see

00:53:40.960 --> 00:53:44.240
something, they're like, oh, I should add this feature or fix this thing. And they'll create a

00:53:44.240 --> 00:53:48.940
pull request and do all the work and then submit it. And the maintainer will say, well, that doesn't fit

00:53:48.940 --> 00:53:52.960
with my view of this or whatever. And you're like, but I did all this work.

00:53:52.960 --> 00:53:57.700
All right. So, you know, maybe people could open like an issue in GitHub, say, hey, I'm considering

00:53:57.700 --> 00:54:03.460
this feature. Here's what I'm thinking about doing to add it for you. Would you be interested or would

00:54:03.460 --> 00:54:06.460
you hate this idea of having it in this project?

00:54:06.460 --> 00:54:12.000
I love that. Like if people talk about it, we also have a very active Slack channel where we discuss

00:54:12.000 --> 00:54:12.460
these things.

00:54:12.460 --> 00:54:16.840
Yeah, that might be also a decent place. But, you know, GitHub is nice because Slack is super transient,

00:54:16.840 --> 00:54:20.880
right? Like there might be five people that all have this idea that would say, yeah, that's great.

00:54:20.880 --> 00:54:25.180
Or actually I see it this way or right. But if it was in Slack, it's gone if you weren't there.

00:54:25.180 --> 00:54:29.220
Yeah. And so I use both Slack and GitHub for that sort of stuff.

00:54:29.220 --> 00:54:29.440
Yeah.

00:54:29.440 --> 00:54:34.140
But I would be grateful if there were more Python programmers out there who wanted to

00:54:34.140 --> 00:54:40.680
try their hand at adding something to the system or just using it and contributing bug reports is also

00:54:40.680 --> 00:54:41.220
really helpful.

00:54:41.220 --> 00:54:46.100
Right. For sure. So one of the things that I noticed that jumped out to me when I was going through

00:54:46.100 --> 00:54:52.380
the demo example, right? I was going through and answering the various questions and there's a

00:54:52.380 --> 00:54:56.580
button up at the top. I suspect this is not in the real one, but in the demo one it is where you can

00:54:56.580 --> 00:55:02.500
press and say, show me the source. And it'll actually pull up and like show you the YAML file

00:55:02.500 --> 00:55:09.600
and the various other pieces and like some of the performance analysis stuff, which is pretty cool.

00:55:09.600 --> 00:55:11.800
People can go check that out if they are looking for help.

00:55:11.800 --> 00:55:18.580
But another thing that I think is nice is you have this readability score, I guess.

00:55:18.580 --> 00:55:25.820
Not readability, the app, but like how easy is this to read? Like the Flesh Reading Ease or the Flesh

00:55:25.820 --> 00:55:30.380
Kinkade Grade Level, things like that. That sounds pretty helpful if you're trying to have

00:55:30.380 --> 00:55:35.160
questions that people want to answer correctly. You want to keep that probably as simple as possible,

00:55:35.160 --> 00:55:35.380
right?

00:55:35.520 --> 00:55:39.660
Yeah. I think that's what a lot of people don't understand is that really the hard part about

00:55:39.660 --> 00:55:45.560
developing guided interviews is getting the language right and being able to be precise,

00:55:45.560 --> 00:55:52.520
but also use plain English. And lawyers have a tendency to just go on for too long and use big

00:55:52.520 --> 00:55:59.180
words. But if you, so I added that tool to sort of tell you what the grade level of the language you're

00:55:59.180 --> 00:56:03.820
using on that question was in the hopes that people would go for a sixth grade reading level

00:56:03.820 --> 00:56:07.960
and keep working on their language until it got to that level.

00:56:07.960 --> 00:56:09.000
Yeah. That's cool.

00:56:09.000 --> 00:56:14.780
That's thanks to this great package called TextStat. So it was one of the things that because of the

00:56:14.780 --> 00:56:18.540
magic of the community, I was able to integrate it very quickly.

00:56:18.540 --> 00:56:22.360
Yeah. That's cool. And that's what the main reason I wanted to prompt you to ask about it is like

00:56:22.360 --> 00:56:23.800
how you're generating that in Python.

00:56:23.800 --> 00:56:25.640
Yeah. It's that TextStat package.

00:56:25.760 --> 00:56:29.740
Okay. That's really cool. I can see lots of uses. Maybe you don't show that to the user,

00:56:29.740 --> 00:56:34.140
but in your app, you're like, actually, you know, the CMS or whatever you're building,

00:56:34.140 --> 00:56:39.440
maybe it wants to have that kind of analysis in it. That's cool. Yeah. Awesome. Well,

00:56:39.440 --> 00:56:45.400
Jonathan, I think that pretty much covers it. I think this is a nice project. And if you're out

00:56:45.400 --> 00:56:49.980
there listening and you need to conduct surveys or interviews that are slightly better and more

00:56:49.980 --> 00:56:53.720
controllable than like the standard SAS products, this seems like a pretty good option.

00:56:53.720 --> 00:56:54.660
Well, thanks for having me.

00:56:54.780 --> 00:56:58.320
Yeah. You bet. Now, before we get out of here, though, I've got the two questions at the end

00:56:58.320 --> 00:57:01.120
of the show that I always ask you. So let me ask those to you now.

00:57:01.120 --> 00:57:05.440
Oh, good. If you work on Doc Assemble, you can write some Python code. What editor do you use?

00:57:05.440 --> 00:57:09.500
Emacs. I've always used Emacs. Yeah. And I don't think I'm ever going to do anything else. I

00:57:09.500 --> 00:57:13.580
basically live in Emacs. I also use org mode to manage my life and track my time.

00:57:13.580 --> 00:57:17.060
Okay. So yeah. So you run the Emacs operating system, basically.

00:57:17.060 --> 00:57:23.860
Yeah, somewhat. Yeah. Cool. And then you've talked a lot about cool and interesting and unique

00:57:23.860 --> 00:57:29.900
Python packages here. But maybe if you want to give a shout out to any additional packages that

00:57:29.900 --> 00:57:31.760
you think are great for people to know about.

00:57:31.860 --> 00:57:38.480
Well, one that I really encourage people to use is software called Lettuce, which is a Python

00:57:38.480 --> 00:57:44.320
version of another package called Cucumber. So the idea of Lettuce is it's a testing platform

00:57:44.320 --> 00:57:50.820
that uses behavior driven design, I think it's called, where you can express your tests in plain

00:57:50.820 --> 00:57:57.500
English. And then it uses the Selenium package to do web browser automation, or some other type of

00:57:57.500 --> 00:58:03.960
automation to then carry out those tests. So when I read a guided interview, I also in tandem write a

00:58:03.960 --> 00:58:10.320
test script, which is human readable using this Lettuce package. And the Selenium package for web

00:58:10.320 --> 00:58:15.040
browser automation is the best thing ever. I've done web browser automation with lots of other tools,

00:58:15.040 --> 00:58:16.180
but Selenium is amazing.

00:58:16.180 --> 00:58:18.860
Yeah. Oh, those are both really interesting. I love them.

00:58:18.860 --> 00:58:20.940
Yeah. That's all the packages I can think of. Yeah.

00:58:20.940 --> 00:58:25.920
Yeah. Great. So final call to action. People want to get involved with conducting these interviews

00:58:25.920 --> 00:58:27.520
using DocAssemble. What do you tell them?

00:58:27.520 --> 00:58:33.520
I think they can check out the website and join our Slack channel and get involved in the DocAssemble

00:58:33.520 --> 00:58:39.920
community. We also have annual conferences now called Docacon, which take place in the summer every year.

00:58:39.920 --> 00:58:40.240
Yeah.

00:58:40.240 --> 00:58:47.180
And the other thing I just think people, what I would like Python developers to do is get jobs at law firms

00:58:47.180 --> 00:58:52.840
and then sort of infiltrate and then find ways to automate what they're doing. Because there aren't

00:58:52.840 --> 00:58:58.520
enough people with programming skills in the legal field as a whole. And so I think as a result,

00:58:58.520 --> 00:58:59.700
we're kind of behind the times.

00:58:59.700 --> 00:59:04.920
That's good advice. And it sounds like DocAssemble is coming along strong. It's pretty wild that you

00:59:04.920 --> 00:59:09.380
already have a conference about it. So very cool. Well, congrats on the project and thanks for being on

00:59:09.380 --> 00:59:09.620
the show.

00:59:09.620 --> 00:59:10.060
Thank you.

00:59:10.200 --> 00:59:10.700
You bet. Bye.

00:59:10.700 --> 00:59:17.260
This has been another episode of Talk Python To Me. Our guest on this episode was Jonathan Pyle,

00:59:17.260 --> 00:59:23.440
and it's been brought to you by Linode and Datadog. Linode is your go-to hosting for whatever you're

00:59:23.440 --> 00:59:29.620
building with Python. Get four months free at talkpython.fm/Linode. That's L-I-N-O-D-E.

00:59:29.620 --> 00:59:35.580
Datadog gives you visibility into the whole system running your code. Visit talkpython.fm slash

00:59:35.580 --> 00:59:38.820
datadog and see what you've been missing. They'll throw in a free t-shirt.

00:59:38.820 --> 00:59:44.600
Want to level up your Python? If you're just getting started, try my Python Jumpstart by Building

00:59:44.600 --> 00:59:50.400
10 Apps course. Or if you're looking for something more advanced, check out our new async course that

00:59:50.400 --> 00:59:54.800
digs into all the different types of async programming you can do in Python. And of course,

00:59:54.800 --> 00:59:59.120
if you're interested in more than one of these, be sure to check out our Everything Bundle. It's like

00:59:59.120 --> 01:00:04.240
a subscription that never expires. Be sure to subscribe to the show. Open your favorite podcatcher

01:00:04.240 --> 01:00:09.420
and search for Python. We should be right at the top. You can also find the iTunes feed at /itunes,

01:00:09.420 --> 01:00:15.480
the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

01:00:15.480 --> 01:00:20.140
This is your host, Michael Kennedy. Thanks so much for listening. I really appreciate it.

01:00:20.140 --> 01:00:21.900
Now get out there and write some Python code.

01:00:21.900 --> 01:00:42.920
I'll see you next time.

