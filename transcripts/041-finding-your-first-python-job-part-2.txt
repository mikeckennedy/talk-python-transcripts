00:00:00 This episode of Talk Python To Me is the second in a two-part series about getting your first Python job

00:00:05 in an attempt to bring a wide spectrum of thoughts on this discussion.

00:00:09 It's Getting Your First Python Job as a Python Developer Part 2.

00:00:13 This time, we hear from the experts on episode number 41, recorded December 10th, 2015.

00:00:20 Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:52 This is your host, Michael Kennedy. Follow me on Twitter, where I'm @mkennedy.

00:00:56 Keep up with the show and listen to past episodes at talkpython.fm, and follow the show on Twitter via at Talk Python.

00:01:02 This episode is brought to you by Hired and SnapCI.

00:01:06 Thank them for supporting the show on Twitter, where they're at Hired underscore HQ and Snap underscore CI.

00:01:12 That's right. ThoughtWorks and the SnapCI team have joined the show to keep the episodes coming.

00:01:18 Be sure to find them on Twitter and tell them thanks.

00:01:20 Welcome, everybody.

00:01:22 This is part two in our Getting Your First Job as a Python Developer.

00:01:27 I hope you've listened to episode 39, where we introduce the topic and we talk to new developers

00:01:34 who just got their first job in Python.

00:01:37 Now we're turning the tables and we're going to talk to the experts, the people that do the evaluating and hiring and finally make the decision on who get these jobs.

00:01:46 We have experts from a bunch of great companies, including Netflix and PayPal.

00:01:51 The format will be the same as part one.

00:01:54 We have a bunch of guests who are experts and we're going to ask them questions and we'll kind of do a panel type discussion.

00:02:00 We'll hear from each of them in turn.

00:02:02 So let me introduce the panelists.

00:02:04 Last time I made a couple of book recommendations.

00:02:16 I'll just repeat them here really briefly because I think the way that people should look at their career and jobs is undergoing a pretty dramatic shift.

00:02:25 And on one hand, we all have to individually take responsibility for promoting ourselves and building our skills.

00:02:33 And the other, the landscape of employment is changing somewhat.

00:02:36 So if you want to explore these ideas, be sure to check out Soft Skills by John Sonmez and The End of Jobs by Taylor Pearson.

00:02:44 Okay, with that, let's get on to the questions.

00:02:47 So you can hear a lot of advice from our experts.

00:02:52 And I want to make sure that you know where they're coming from, the type of people that they expect to be working with when they give this advice.

00:02:59 So my first question to the group was, what kind of Python developers do you work with and do you interview?

00:03:05 Our first two panelists should sound familiar to you.

00:03:09 First up, we're going to hear from Roy Rappaport from Netflix.

00:03:13 He was the guest on show 16 when we talked about how Netflix is using Python to do amazing things.

00:03:21 And following Roy, we have Mahmoud Hashemi from PayPal.

00:03:25 He was on show 4 talking about Enterprise Python.

00:03:29 So let's hear from these guys.

00:03:32 Roy's up first.

00:03:33 What kind of developers do I get to hire and interview?

00:03:37 Typically, I work with and interview two kinds of Python people.

00:03:41 Devopsy people focusing on orchestration and operations in an AWS environment of a large ecosystem.

00:03:47 And people who can use Python to build solutions to some of the problems that arise in operating in these sort of large ecosystems.

00:03:54 So that's both ad hoc Python use to solve the sort of 5 to 10 minute sort of problem and architecting a Python based system to, for example, auto discover SSL certificates in a large distributed environment like Netflix's, for example, and alert us when some would expire.

00:04:10 Which was actually the first project that I got to be responsible for when I became part of the engineering organization here at Netflix.

00:04:19 Hi, my name is Mahmoud Hashemi.

00:04:21 I'm lead developer of Python infrastructure at PayPal.

00:04:24 And I'm also the presenter of Enterprise Software with Python coming soon from O'Reilly.

00:04:30 My code is at github.com forward slash M-A-H-M-O-U-D.

00:04:37 Dedicated listeners may recognize my voice from episode number four of Talk Python To Me.

00:04:42 And it's great to be back on the show.

00:04:44 Question number one.

00:04:46 What kind of Python devs do I work with and interview?

00:04:51 So I work with Python infrastructure engineers.

00:04:56 Now, software infrastructure is the foundation of all sorts of other software development, from web to backend to batch to automation and tools.

00:05:04 To do it well, you have to have personal experience developing in two or more of those categories.

00:05:09 For the past year or so, my team has been adjunct to the PayPal application security team.

00:05:15 And that's actually who I'm hiring for right now.

00:05:17 So a little plug.

00:05:19 If you have at least five years of industry experience and want to get into some ultra high performance Python security work, shoot me an email at M-A-H-M-O-U-D at PayPal.com.

00:05:30 All that said, one of my services on the Python infrastructure team is also performing phone and in-person interviews for PayPal teams looking to expand their Python talent through hiring.

00:05:44 So I hire for a lot of teams, in other words.

00:05:46 So just check out the PayPal careers page.

00:05:49 And if you see Python mentioned in the job description, then there's a good chance I'll be doing one of the interviews.

00:05:55 Okay.

00:05:57 Hi, Michael.

00:05:58 So quick intro to me and why I'm going to be answering the questions I'm answering.

00:06:02 Hi, my name is Lorena Messa.

00:06:04 I am a junior on the platform team at Sprouch Social here in Chicago.

00:06:09 I'm going to be addressing the questions that are geared towards the quote unquote expert or rather the person who's participating in doing interviews for candidates on our team.

00:06:21 So as a junior, I was I've recently been added into the shuffle for interviewing at Sprout.

00:06:27 And I think one of the things that's kind of interesting is that we'll come to talk about is what does it mean to use Python at Sprout and really who are the types of candidates we have come in.

00:06:38 I myself came into programming being a first I first started programming in grad school using R to data on structure my data and do what I needed to for my grad research.

00:06:48 And I then went on to explore it more on my own, did an immersion program.

00:06:52 And now I'm with my first software engineering position.

00:06:56 So the way we use Python at Sprout Social, we use Python in a few ways.

00:07:01 The biggest the biggest way we use Python is we use it for our API.

00:07:07 We have a Django API that really glues all the data together.

00:07:11 And we take all the data that that's been stored, that's been shaped into the formats that it needs to be from our Java services and is then repurposed into whatever format we need and return it to our web client.

00:07:23 So the predominant use for Python is going to be more in tune with web development.

00:07:28 We do have some backend services that are written in Python, but the bulk of that of our backend services are going to be Java.

00:07:36 So any heavy data lifting is going to be predominantly there.

00:07:40 That being said, we do have a lot of internal tooling that is written in Python.

00:07:46 So, you know, we obviously use Python to glue together some processes that need to be automated.

00:07:52 So be it tools that help developers make their lives easier.

00:07:56 If you're just exploring some data, you know, I think people opt to use Python as their first language just for scripting and getting things done or getting their toes wet, writing an initial prototype for something.

00:08:07 And then also we do have Python.

00:08:10 We do use Fab, which is for Python to do some operations work.

00:08:15 So the type of people that we, that I work with include web development, backend, backend service folks.

00:08:23 And then we do have an in-house data scientist.

00:08:25 Next up is Adelzan Kastamav.

00:08:30 Hello, Mike.

00:08:31 Thank you very much for your wonderful podcast and for letting me be a part of your cool project.

00:08:39 So the first question is, what kind of Python devs do you work with and interview?

00:08:45 So currently we are the biggest online travel agency in Kazakhstan.

00:08:49 And our system is completely risen in Python.

00:08:53 Consequently, it means that we are looking for web developers in Python.

00:08:59 But also because of the amount of data generated from our users is enormous, is huge.

00:09:06 We also should hire people who can work with this data, organize and make sense from these datasets.

00:09:14 Fortunately, Python is also the first class citizen in this area as well.

00:09:21 So we are looking for web developers and we are looking for people with a knowledge of statistics and with a working knowledge of Python.

00:09:30 How to connect statistics in Python and make something cool.

00:09:34 Now let's hear from Greg Langston from Connectria Hosting in St. Louis, Missouri.

00:09:39 At Connectria, we've engaged with many different types of developers.

00:09:43 We've engaged with small mom-and-pop style shops and also Fortune 500 companies.

00:09:50 Our customers often have development teams already built into their existing processes.

00:09:55 So with most of the UI built on their side, most of our work has been in developing back-end services, API integrations, and workflow automation.

00:10:04 That's because our customers typically are partnering with us to increase efficiencies in their existing deployment pipelines,

00:10:12 to introduce some new efficiencies in their DevOps continuous integration or deployment models.

00:10:19 That being said, we also have several projects mostly written in Flask or Pyramid that integrate with our inventory and monitoring systems.

00:10:28 With some UI components built into microservice architecture using Docker.

00:10:34 We often look for candidates who may have experience with infrastructure as code, cloud platform modules such as AWS.

00:10:42 This requires experience with Bodo, the AWS client package for Python, or some other cloud platform SDKs.

00:10:52 We often take a cloud infrastructure orchestration approach to our development, which involves understanding infrastructure components such as load balancers and databases.

00:11:03 So for us, having the ability to build and develop those backend services and APIs towards that orchestrational goal is absolutely critical.

00:11:14 And finally, let's hear from Sean Milochik.

00:11:17 For about six years, I hired web application developers for a startup that provides payment solutions for clinical trials.

00:11:24 We use a lot of Python and Django, use a lot of third-party APIs, and our work was directly customer-facing.

00:11:34 The second question I asked everybody was, what is the most important piece of experience that you look for in a candidate?

00:11:42 If I had to narrow down the most important piece of experience I'd look for, it'd be real production experience at some reasonable scale.

00:11:49 Not so much in terms of size, you know, in terms of number of machines or all of that, but more in terms of mindset and orientation.

00:11:55 I want to see a focus on building things well, automating where possible, and having a long-term view of the systems you put in place.

00:12:03 And I look for a time that you've applied productive laziness to solve a problem.

00:12:10 So, the most important fundamental skills I look for are closely related to experience, environmental fluidity, and personal learning ability.

00:12:20 Now, what do those mean?

00:12:21 So, as for environmental fluidity, well, specifically, PayPal uses a lot of Linux.

00:12:27 So, I look for candidates that can demonstrate familiarity at the console, interacting with the operating system.

00:12:34 While I don't usually give candidates complex, algorithmic questions on the spot during interviews,

00:12:40 I do log them into PayPal's test servers and have them do a little bit of basic debugging.

00:12:46 For the experienced people, you can almost feel them relaxing into a familiar environment.

00:12:51 For the inexperienced, the terminal can be an aptly named dark and scary place.

00:12:57 Either way, the command line is a foundational technology critical to enterprise work,

00:13:02 and I really feel like it's not going away anytime soon.

00:13:05 So, lack of command line comfort is a big yellow flag, especially when Linux is so widespread and easy to experiment with on your own.

00:13:13 The other characteristic I look for is learning ability.

00:13:17 The skills to read and research naturally, absorbing and arranging information automatically,

00:13:23 because I've been burned once or twice by talented people who were honestly just too lazy to read the docs,

00:13:29 or too intimidated to read the source code.

00:13:31 You don't have to do it in big gulps, but you do need to do it consistently.

00:13:36 So, I usually look at what candidates have done to learn lately, like the sources they've been consulting and so forth.

00:13:43 So, for instance, I'll say, show me some source code you've written and what you learned during that process.

00:13:48 Or, tell me about a project that sounds much simpler than it actually was.

00:13:54 You know, I might ask, what sites taught you the web?

00:13:57 Or, have you seen any noteworthy source code lately?

00:14:00 Have you read any good books?

00:14:03 On the other hand, I watch out for Hacker News-y types.

00:14:07 My projects have topped HN several times in the last couple years, and some lurking is fine,

00:14:12 but I want someone ready to outgrow that consumption and commodification of the creative work that is software

00:14:19 that gets interleaved with the press releases on Hacker News.

00:14:23 Someone who's ready to dedicate time to actually create the sorts of things that others will upvote.

00:14:31 I think the most important piece of experience is how they approach problems and break it down

00:14:38 and turn something that may have seemed otherwise impossible or very difficult,

00:14:43 how they broke that down to smaller, more manageable pieces.

00:14:46 After all, coding is about problem solving, and we are building recipes to automate tasks,

00:14:53 to automate things, to make an ecosystem that can work in harmony.

00:14:57 So when a candidate comes in and they talk about problems that they've solved and how they went about doing it,

00:15:03 really I'm trying to see what was the original problem, what were the ways they went about trying to solve the problem, what worked and what didn't,

00:15:12 and also, you know, where's the passion?

00:15:14 What really drives them?

00:15:15 I think it's really important to have people who are excited about what they do

00:15:20 and are okay to, they're okay with things failing because at the end of the day,

00:15:25 you're going to try things and it might not work, but you need to have the ability to then sit down, reflect, understand what went wrong,

00:15:33 and move forward to iterate and try something else.

00:15:36 Demonstrate problem solving, I definitely think is the most important piece of experience.

00:15:42 I think there are two pieces, important pieces.

00:15:45 The first one is responsibility and the second one is maturity.

00:15:50 Why?

00:15:51 From my point of view and from my experience, usually people who actually have never worked before,

00:15:58 for example, students, they don't lack technical skills, they lack social skills.

00:16:05 And social skills are crucial.

00:16:07 They lack of communicability.

00:16:10 They lack of responsibility, maturity.

00:16:13 Because majority of people think that programmers and programming in particular isn't antisocial.

00:16:21 And programmers are people who actually are staring at the screens all day long

00:16:27 and writing some magical code and doing something magical.

00:16:33 But I think that programming is a social skill as well.

00:16:37 Because in order to create something, in order to create something valuable,

00:16:42 you have to communicate with many people.

00:16:45 You have to communicate with managers.

00:16:47 You have to communicate with your team members.

00:16:51 You should be a good team player.

00:16:53 You should communicate with customers.

00:16:56 Also, you should communicate with the end users of your products in order to get feedback.

00:17:03 You should be responsible for everything.

00:17:05 You should write effectively.

00:17:07 You should express your thoughts concisely in a written form.

00:17:12 I think writing is also a very crucial skill for programmers.

00:17:16 I mean, not writing code, but writing articles, express your thoughts and stuff like that.

00:17:22 And if a person is responsible and mature, it is a great pleasure to work with him.

00:17:28 We particularly look for experiences where a developer has taken a task and researched community packages that can be imported

00:17:40 in order to complete the objective faster than if they were to write vanilla code

00:17:46 in place of that.

00:17:47 The reality of today's code economy with open source technologies is that codes and packages

00:17:54 likely have already been written to assist in completing particular tasks.

00:18:00 And that means mostly the challenge becomes then kind of assembling those components together

00:18:04 with some of your own custom development to solve the particular problem.

00:18:10 I don't often encourage writing code without consulting existing packages.

00:18:15 We use packages such as requests and Flask, for instance, quite heavily.

00:18:23 It's just less necessary than when Python was first developed.

00:18:28 We also require that developers know how to set up a virtual environment, virtually in V, for instance,

00:18:35 in order to create isolation of their package needs, which can then further be built onto continuous deployment practices.

00:18:43 From a code centric perspective, we look for things such as good practices around exception handling,

00:18:50 logging, security best practices in your code, those types of things.

00:18:56 Any code written must follow good standards around those types of things.

00:19:02 Unexpected data formats, bad JSON structures, all those types of things.

00:19:08 So those are critical to what we review.

00:19:10 The most important experience I always look for in a candidate is not knowledge with a particular piece of technology,

00:19:21 but curiosity and demonstrating that they are actually interested in programming.

00:19:28 Anything they have not done for school or work.

00:19:32 Someone that even if they didn't get a job as a programmer, they would have to write code because they're compelled to do it.

00:19:38 It's just part of who they are.

00:19:40 This episode is brought to you by Hired.

00:19:53 Hired is a two-sided, curated marketplace that connects the world's knowledge workers to the best opportunities.

00:20:00 Each offer you receive has salary and equity presented right up front, and you can view the offers to accept or reject them before you even talk to the company.

00:20:09 Typically, candidates receive five or more offers in just the first week,

00:20:13 and there are no obligations, ever.

00:20:15 Sounds pretty awesome, doesn't it?

00:20:18 Well, did I mention there's a signing bonus?

00:20:20 Everyone who accepts a job from Hired gets a $2,000 signing bonus, and as Talk Python listeners, it gets way sweeter.

00:20:28 Use the link Hired.com slash Talk Python To Me, and Hired will double the signing bonus to $4,000.

00:20:36 Opportunity's knocking.

00:20:37 Visit Hired.com slash Talk Python To Me and answer the call.

00:20:41 The third question I put to our panelists is really trying to dig into what you can bring

00:20:57 and what you can work on when you don't yet have your first job, or at least your first job in Python.

00:21:03 So if I'm in school or I'm moving into programming, but I don't yet have a developer job,

00:21:11 what can I work on to show that I have some reasonable experience?

00:21:15 Maybe something like an open source project.

00:21:18 Maybe you could create a little side project or a mobile phone app or a website

00:21:23 or even participate in some of these code competitions.

00:21:26 I'm thinking of things like Kaggle data science competitions and so on.

00:21:31 So let's hear what they have to say.

00:21:32 Roy's up first.

00:21:33 If someone is applying for their first job, what can they present to show that they have the right skill set or education?

00:21:38 Well, first of all, we don't care that much about education necessarily.

00:21:42 We'll talk about that in a moment.

00:21:43 But it's also worth noting that it depends on your definition of what first job is.

00:21:48 Netflix is pretty public about not hiring people straight out of college.

00:21:52 Typically, we don't hire interns.

00:21:54 And so this may be something of a moot point.

00:21:57 But if you're talking about someone's first interaction with us, we love to see open source contributions and side projects, obviously.

00:22:04 I think looking at mobile phone apps is an interesting example of what you might be passionate about,

00:22:09 which is interesting.

00:22:10 Even if the actual skills related to that are not particularly relevant to us,

00:22:14 we tend to think of skills as something you can pick up pretty easily anyway.

00:22:18 I haven't seen much by way of code competitions, so I don't know how relevant they would be.

00:22:23 What we tend to go for really is take-home exercises as part of the recruiting process,

00:22:27 which let people solve some sort of problem we've had run into in the comfort of their own home,

00:22:34 on their own equipment, using their own time.

00:22:36 That's actually worked really, really well for us.

00:22:40 When it comes to first jobs and concrete projects, I'll look at anything and everything.

00:22:50 With new developers, it's just so rare to get someone with anything interesting in their GitHub or Bitbucket account.

00:22:57 And so that's definitely my first stop.

00:23:00 Software is increasingly portfolio-driven these days, and so I do get a bit discouraged when I see a developer that doesn't have a GitHub or a site or even a blog.

00:23:09 Because you can cram for an interview and you can exaggerate on the resume,

00:23:12 but you can't really fake a meaningful commit timeline going back a year or two.

00:23:16 Even if it's just some school projects, I at least could see that you've tried and you have some basic Git skills.

00:23:23 Contributions to other projects tell a good story too.

00:23:26 You were probably using the project for something, being productive.

00:23:30 You took the time to understand how it worked.

00:23:32 You were able to communicate and lived up to someone else's standards.

00:23:36 That's stressful for a lot of people for sure, but that's got a lot in common with enterprise development too.

00:23:41 Side projects and apps that run an environment similar to our own are very interesting.

00:23:46 Mobile phone apps?

00:23:48 Not as much.

00:23:49 Side note here, code competitions and scores from Reddit, Stack Overflow,

00:23:54 and Hacker News are okay, but honestly those skills don't really apply that well internally at a big company.

00:24:00 In my experience, it can be sort of hit or miss.

00:24:04 This may make me kind of unpopular, but some people who have high scores, high karma on those sites can tend to be a little bit impatient and unhelpful with people inside the company,

00:24:15 and not to mention the internal processes.

00:24:18 That said, if you're someone who helps out with mentorship or gets on IRC and answers beginner questions, that could be great.

00:24:24 Definitely mention that sort of thing in your interview.

00:24:28 So when a candidate comes in, ways that they can try to showcase their skill set.

00:24:32 I mean, we have it in college.

00:24:34 We have different types of learning, be it formal or non.

00:24:37 But what I think I get most excited about is more side projects.

00:24:41 Maybe someone started on something that isn't within their day-to-day role,

00:24:45 and they got really excited about it.

00:24:46 And then they went out there and they wanted to learn more.

00:24:48 So does someone have a side project like they were curious perhaps about how they could take a problem that maybe perhaps all developers have,

00:24:58 which is, you know, writing good documentation.

00:24:59 You know, do they recognize a need that it's somewhat painful and or an afterthought to write documentation?

00:25:05 And then they're like, okay, how can I write a tool that will make this better?

00:25:08 And then they turn that into a side project.

00:25:11 Or maybe they're curious about machine learning and they've started taking a Coursera class and they're taking a project or a algorithm into their own and applying it to a project.

00:25:23 I think ways that we learn, you know, you are passionate about exploring and learning outside and creating your own projects,

00:25:31 that really demonstrates initiative and really demonstrates a curiosity that I think is fundamental for coding.

00:25:37 So side projects are really exciting to me.

00:25:40 And also show the creativity of a developer.

00:25:43 And then also open source contributions are pretty exciting as well.

00:25:47 Particularly if someone has used a tool a lot and they start recognizing the holes or problems.

00:25:53 Or even if they're saying, the way I learned how to use a project is I went through and started following bugs and started adding documentation to an open source project.

00:26:02 Adding documentation to a project might seem like a small and insignificant thing, but actually can be quite useful and important.

00:26:11 So really, you know, side projects, they may seem to be terribly overwhelming or large, but there's other ways you can go about doing it, finding a favorite tool and finding ways to contribute.

00:26:21 So I think those are two ways that people can demonstrate things that they've worked on.

00:26:27 Another thing that is definitely not required, but I am intrigued by, is seeing how people give back to the community at large.

00:26:36 For example, are they participating as men?

00:26:39 Are they doing a mentoring program?

00:26:41 Do they act as a mentor?

00:26:42 The Chicago Python user group has a mentoring program, which I've really not heard many user groups doing.

00:26:49 So it's exciting to see someone say they have a love for something and they're ready to give back, be it as a mentor or maybe even as a mentee, are they participating in one?

00:26:57 Giving talks at local user groups, giving talks at conferences.

00:27:01 I think all those things are very interesting as well because it's going to show how they'll create community within your work environment and how they'll be contributing to the procurement of knowledge in days to come.

00:27:13 It's important to have people who are looking to add to the conversation rather than just participating in the conversation as it exists.

00:27:21 I think that everything matters.

00:27:25 The more, the better.

00:27:27 Because from my point of view and my experience hiring developers in Kazakhstan, usually people who are applying for their first job don't have anything to present.

00:27:40 That's why it is very, very difficult to make right decision based on this.

00:27:45 It starts looks like a Russian roulette.

00:27:47 You start to rely on your intuition, which is not the good decision-making technique.

00:27:53 And I would say that it is better to make mistake and not hire a good person rather than hire a wrong person.

00:28:01 And that's why if a no previous job experience candidate shows his interest in terms of open source contributions, site projects, etc.

00:28:10 It is definitely a big plus for him.

00:28:13 And I would highly recommend to explore a wide range of open source projects.

00:28:19 It is not the only best way to explore other programming code, but also opportunity to share your code and get feedback from more experienced developers, which is very important in real projects, where the majority of your time you spend with working with other experienced developers and working with the legacy code.

00:28:40 So take a look at Django, take a look at Flask, requests, SQLAlchemy, and tons of excellent open source projects and start exploring and contributing to them.

00:28:52 Practical experience with the language is critical, but we do desire candidates to have some formal education in software development, typically one to two years.

00:29:02 That training can often establish good development habits, such as setting up good unit tests, exception handling, logging practices, and commenting standards.

00:29:13 We like when candidates can present examples of that practical experience with the language, sample code, snippets, those types of things.

00:29:22 We want to see what the packages they've imported, how they interact with those, and just to see what the forethought was for choosing those packages over other options, because there are many in the pip space.

00:29:37 We want to see how the developer thinks about their code just as much as the code itself.

00:29:43 We also require submission of unit tests as part of review in the process.

00:29:49 Test-driven development is a critical part of our current development workflow, and it greatly improves our ability to resolve bugs quickly and discover as many of those as possible earlier in the sprints.

00:30:01 Given that we support cloud platforms for our customers and those platforms are constantly evolving, we look for individuals who are capable of being flexible and dynamic as the languages and framework needs evolve.

00:30:14 The reality is that tomorrow we may need different skill sets for another language entirely.

00:30:20 So we look for individuals who love to learn and pick up new skills and are energetic and work well with others.

00:30:30 What I'm looking for in general is anything that they did for themselves for fun.

00:30:36 So, sure, code competitions, personal websites, little things they did like Project Euler type things.

00:30:43 Open source contributions are always good, especially if it's related to the types of things we're doing, or even if it's not, because anyone, even an entry-level person, could have fooled around with something that no one else on the team knows and can enhance the team.

00:30:58 Everyone can learn from everyone else.

00:30:59 Everyone can learn from everyone else.

00:30:59 This episode is brought to you by SnapCI, the only hosted cloud-based continuous integration and delivery solution that offers multi-stage pipelines as a built-in feature.

00:31:26 SnapCI is built to follow best practices like automated builds, testing before integration, and provides high visibility into who's doing what.

00:31:34 Just connect Snap to your GitHub repo and it automatically builds the first pipeline for you.

00:31:39 It's simple enough for those who are new to continuous integration, yet powerful enough to run dozens of parallel pipelines.

00:31:46 More reliable and frequent releases.

00:31:48 That's Snap.

00:31:49 For a free, no obligation, 30-day trial, just go to snap.ci slash talkpython.

00:32:05 This fourth question is really about trying to compare and contrast the value of long-term education like four-year college degrees with hands-on experience.

00:32:19 I hear from a lot of people that it's hard to get your first job out of college because people say you don't have any experience.

00:32:25 But at the same time, if you don't have a college degree, maybe that's a stumbling block.

00:32:31 So I ask everyone if they were presented with two candidates.

00:32:34 One who has a really solid computer science degree but not a lot of experience because they've still been in school.

00:32:41 And another with little formal education but a couple of years' experience working with the technology they're looking for.

00:32:48 Like maybe you're hiring for a Python web job and this person has experience working with Flask and SQLAlchemy, talking to MySQL, and it's all running through Nginx and load balancing, all that kind of stuff.

00:33:02 They've been doing that for two years, but they only graduated high school.

00:33:05 How would you balance these two candidates?

00:33:07 Well, you know, I'm never going to decline solid formal education, of course.

00:33:13 Solid formal education is great, and especially as you solve bigger and bigger problems, it can become more and more relevant.

00:33:19 Big O notation, for example, is maybe not that relevant to you as you try to figure out how to search for a given IP address in a file with a thousand lines.

00:33:27 But around the time that you try to generalize this to Netflix scale, you're probably really going to want to care about the difference between, say, ON and ON log N and cubed, for example.

00:33:39 That said, we really are interested in problem solvers, and really what we're talking about there is practical problem solvers.

00:33:45 And I'd rather see you having solved real-world problems rather than gotten good grades if I'm in the position of having to pick just one of these two options.

00:33:56 And again, since we don't look at people's first job necessarily, the educational background for us is not particularly relevant in our both recruiting process, but also in terms of deciding who we're going to give offers to.

00:34:09 I have people on my team who don't have degrees.

00:34:12 I have people on my team with PhDs, and I have no idea where the people with PhDs got their degrees from.

00:34:18 It's never been relevant.

00:34:21 Question number four, degrees.

00:34:24 So this is an interesting question.

00:34:26 Which one do I value more, or which one does the company value more?

00:34:31 Because management marketability really comes into it with large companies.

00:34:35 Of the three hires I truly consider my star hires, none of them had a CS degree.

00:34:41 One was electrical engineering, the other was math, and the final one was comparative literature.

00:34:47 The things they all had in common, though, was just a voracious reading habit and extensive hours spent in some Python or POSIX environment.

00:34:56 Computer science degrees aren't really necessary for the majority of enterprise work.

00:35:00 Like I said before, environmental fluidity and willingness to read docs are far more important.

00:35:06 A couple of CS classes will get you some useful vocabulary and teach you time complexity, though.

00:35:13 As for the concept of a degree in general, if you want to work at a big company, it's a lot easier to get in with a bachelor's.

00:35:19 You don't need much more than that.

00:35:22 The right two years of experience can go a long way in terms of skills development, but in terms of management marketability, no degree raises a lot of eyebrows in those cases.

00:35:31 So, in short, for enterprise software, my observation is that a computer science degree is about as good as a non-CS degree plus two years of experience,

00:35:41 which is about as good as no degree plus four to five years of experience at least.

00:35:46 Most professors and academic programs don't give you all that much pragmatic knowledge, even if it's pretty old stuff like Emacs and terminal usage.

00:35:55 Basically, everything is about how you approach your assignments in free time.

00:35:59 If you push beyond the requirements, you will learn much more.

00:36:03 So, if you're in school, take an operating systems class.

00:36:07 Take a networking class.

00:36:09 Maybe take a crypto class.

00:36:10 You'll learn almost as much running a shared server in your dorm.

00:36:13 Now, both of those are different types of knowledge, so consider doing both.

00:36:19 If you're not in school, Coursera and other options are far better than nothing, and I'd like to hear about those experiences in interviews.

00:36:26 So, for candidates that have computer science degrees and those who don't, I don't actually have a preference of one over the other.

00:36:35 I think that something that's unique or maybe interesting about Sprout, we are a startup.

00:36:41 We're about five years.

00:36:42 We're in our fifth year here in Chicago.

00:36:44 I think startups are interesting spaces because you get people with a broader background.

00:36:49 At least that's been my experience.

00:36:51 And when you have people who come from different backgrounds, you know, maybe someone who was both technical and was a lawyer.

00:36:57 Or maybe someone came from a PhD that wasn't in computer science and went into programming.

00:37:03 Or maybe someone who was a musician and came into that.

00:37:06 Speaking of which, these are all examples of people I know and work with that have these types of backgrounds.

00:37:11 These are some of the most exciting people to work with because their ways of breaking and approaching problems, they come from different vantage points.

00:37:18 So, definitely, I think having the ability to speak about fundamentals is somewhat non-negotiable.

00:37:25 You need to understand how to talk about the complexity of an algorithm and understand its performance.

00:37:31 So, big O is important.

00:37:33 You need to understand different types of data structures and what is applicable in an appropriate situation.

00:37:38 And I think for people who don't have formal education, these are the type of things that you can learn over time or you can take the initiative to learn on your own.

00:37:48 So, while a computer science degree is definitely a good indicator of someone's skill set, it's not the end all.

00:37:56 You're looking for a nice combination of things.

00:38:00 So, for people who don't have formal education, I think what's important is that they're continuing in their learning and how is it they're doing it.

00:38:06 Are they participating in online learning?

00:38:09 Are they in different user groups looking for mentors?

00:38:12 Are they reading textbooks at home?

00:38:15 I think all that's really important.

00:38:16 And really, for people who don't have the formal education, you can see people who are doing this when they get to the technical interview and they're breaking down problems.

00:38:26 And you get to see how they think and how they evaluate the code that they would intend to write or whatever the problem is they're trying to solve.

00:38:32 So, in a nutshell, both are great backgrounds.

00:38:36 But I think it's how you continue that learning for people who don't have formal education that's going to help compensate for some of the knowledge you're missing.

00:38:44 Yeah.

00:38:44 So, the answer is, it depends.

00:38:49 For example, a person with a solid computer science degree could also have a solid knowledge in a particular technology stack or domain and vice versa.

00:38:58 And definitely, I would prefer that person.

00:39:02 But the real world situation is a little bit harder than this.

00:39:06 And I think that currently formal education is not the number one priority in terms of making decision to hire a candidate or not.

00:39:15 But what really matters is the experience.

00:39:20 Experience person reduces costs for businesses.

00:39:23 Experience lowers entry barriers.

00:39:27 Experience also reduces the likelihood of technical debt which this person could introduce, thereby decreasing the productivity of other developers.

00:39:40 And nowadays, the gap between people who have a formal computer science education and those people who don't have is decreasing with the introduction of MOOCs.

00:39:51 What is MOOC?

00:39:52 MOOC is a massive open online course.

00:39:56 And platforms like Coursera, like Edex, like Udacity, MIT and so on, they provide tons of high quality courses free of charge.

00:40:09 And I think that we are living a very, very special life where education is becoming cheap and affordable for everybody with the access to the internet.

00:40:19 So, you can go there and start learning something new with thousands of students.

00:40:26 That's a great opportunity.

00:40:28 You can collaborate with them and you can help each other.

00:40:34 If I had to choose between someone with a solid degree and no experience, and someone with a couple years experience but no degree, that really wouldn't give me enough information because neither one of those things tells me how a person is going to be in my group.

00:40:49 If they're going to be a culture fit.

00:40:51 If they're going to continue to learn.

00:40:53 How much they really love what they do.

00:40:56 One question I always like to ask is, if we made you an offer and you had an identical offer from another company.

00:41:03 Same money, same everything.

00:41:04 Why would you choose us?

00:41:06 I want someone who appreciates the environment of a startup and the type of people they'd be working with.

00:41:12 The people that are interviewing them.

00:41:13 Who talk about themselves during the interview to give them an idea of what we're like.

00:41:19 And the main thing is a culture fit.

00:41:22 Even if they didn't know Python.

00:41:24 And beyond that, someone who really loves what they do, is willing to always learn, is always curious, is going to bring their ideas and things they discover out in the open source world into our company and make everyone better and make our product better.

00:41:42 That is what I'm looking for.

00:41:43 And the education and experience just don't matter.

00:41:49 This last question was an optional one.

00:41:51 I didn't want to put anybody on the spot.

00:41:53 So I said, answer it if you want.

00:41:55 Otherwise, just skip it.

00:41:56 And a couple of our panelists answered it.

00:41:58 And that question was, why did you hire the last person you hired?

00:42:03 And I ask this because it's great to talk in theory about comparing formal education versus experience versus side projects.

00:42:12 But actions often speak louder than words.

00:42:15 And in this case, I thought maybe we'd find something interesting.

00:42:19 Well, you know, that's actually kind of funny.

00:42:22 The last person I hired was someone who was interviewing for a manager position with us.

00:42:26 Actually, but we hired him for a position as an engineer.

00:42:30 Because as we looked at what he was really interested in doing, he was passionate about technical innovation and was very, very strong in that area.

00:42:36 He was interviewing for a manager position because he had been a manager before and was used to working in environments where the way you got to be technically innovative was to be a manager.

00:42:44 Because as an IC, individual contributor, all you got to do was implement the technical decisions of your management chain.

00:42:51 In our environment, it's actually exactly the opposite of that.

00:42:54 So the IC position was a great fit for us and was a great fit for him and his passion and what he was actually interested in doing.

00:43:01 And that's worked out really well for us and him so far.

00:43:06 So I gave my most recent thumbs up to a developer who knew Django and was willing to continue working with it.

00:43:12 But most importantly, he could start on site before the wreck closed.

00:43:17 You see, in large companies, empty seats have expiration dates.

00:43:21 And everyone is willing to gamble.

00:43:24 Because somebody is better than nobody.

00:43:27 And even if they're worse than nobody, then you still get a backfill when they leave or are pushed out.

00:43:31 But this developer seems to be working out.

00:43:34 And I only helped hire him for another team.

00:43:37 So let me talk about one other one.

00:43:38 The last engineer I hired onto my team was recruited over the course of two years.

00:43:43 I met him at PyCon 2012.

00:43:45 And we collaborated on a few open source projects.

00:43:48 And, you know, eventually the planets aligned and he was able to join my team.

00:43:53 Real recruiting can be a really long process, not the least of which is due to weird budgeting and bureaucracy.

00:43:59 So don't get frustrated if you're still waiting on an email reply from me.

00:44:02 And do network and meet people and go to conferences and play that long game.

00:44:08 One last piece of advice I usually give people as well is to, if you're really just looking for a job,

00:44:15 you want to get into the mix with the industry, Just make sure that your LinkedIn profile exists and says that you are a software engineer.

00:44:23 And then just change your location to the Bay Area or Seattle or some other tech hub.

00:44:31 Actually, I hired a person just recently for about two or two and a half weeks ago.

00:44:38 This person is a young, smart guy without actually strong computer science formal education,

00:44:46 but with some little bit of working experience.

00:44:52 Previously, he only worked in one place as a web developer.

00:44:56 But the thing which makes him different from others is his passion for knowledge.

00:45:03 I was amazed by his habit of reading books on a regular basis.

00:45:10 He explores and learns different MOOCs.

00:45:14 We just recently took the MOOC from Coursera, which is called Learning How to Learn.

00:45:21 I highly recommend this course to listeners.

00:45:24 Take a look.

00:45:26 This course is very, very good.

00:45:28 Learning How to Learn.

00:45:29 And he's interested not only in computer-related subjects, but, you know, other stuff like scientific, non-fiction, and so on.

00:45:40 And also, he reads tons of code from different open source projects and making some contributions to them.

00:45:47 Because I think that because of technology is a rapidly growing area, everybody should stay hungry and be curious.

00:45:56 Because we are lucky enough to be a part of something which can change people's lives in a better way.

00:46:03 And the idea of creating something that can be used by millions of people is fascinating.

00:46:09 And people who are fascinated are willing to continuously improve themselves.

00:46:14 And I wish everybody to be fascinated and improve their life and themselves in a better way.

00:46:21 Thank you very much.

00:46:24 Rather than discuss why I hired any individual, I'd rather talk about why I've hired my favorite people that I've hired.

00:46:32 And there are many recurring reasons.

00:46:36 And among them are they're interested in open source.

00:46:39 They're interested in the community that brings us the tools that we use every day.

00:46:44 They keep themselves up to date.

00:46:47 They follow key people on Twitter.

00:46:49 They're on mailing lists.

00:46:50 They go to conferences.

00:46:51 They follow blogs.

00:46:52 They're interested in doing things the right way.

00:46:56 They follow the community's best practices.

00:46:58 They use linters.

00:46:59 They pay attention to style because it doesn't matter to a certain extent.

00:47:04 If the code works, it matters that I have to be able to read it.

00:47:08 I have to be able to maintain it.

00:47:09 Maintainability is by far the number one most important thing in programming, in my opinion.

00:47:17 And someone who's not satisfied with meeting the requirements, someone who wants to make it better, they want to do it the right way.

00:47:25 And I don't mean an ivory tower, unattainable perfection that it has to be done exactly textbook perfectly.

00:47:36 Just it's done well enough that it's easy to maintain.

00:47:41 It's easy for other people to understand.

00:47:43 They're not taking egregious shortcuts.

00:47:46 They leave the code better than they found it.

00:47:48 And they're someone whose code review you want to do and someone you want to talk to at lunch about code and just generally hang out with.

00:47:57 Well, that's it for the questions.

00:48:00 I really learned a lot, and I think I got a better picture of what it takes to be successful getting a developer job these days in general and getting a Python job in particular.

00:48:12 So thanks so much to the panelists who contributed to this show.

00:48:16 Before we wrap things up, Lorena and Mahmood had a few parting thoughts for us.

00:48:23 Okay, that is my questions.

00:48:25 And I guess just kind of as a last bit, I did like this question about advice for other new developers looking for their first job.

00:48:33 So I'm going to be devil's advocate and add another response here.

00:48:37 So for that in particular.

00:48:39 So my advice to anyone who's a new developer looking for their first job, especially if you're someone who feels perhaps like maybe you shouldn't be in the field.

00:48:49 Imposter syndrome is rampant.

00:48:50 And I think many people feel like imposters, even if you've been coding since you were eight.

00:48:55 I think what's really important is to understand the work environment you're going to be going into.

00:49:00 First of all, you know, knowing the problem space that you'll be working in.

00:49:04 Is that interesting to you?

00:49:05 If you're a bit indifferent and are looking for just that first job in general, understand how you are as a person who codes.

00:49:14 How do you learn best as a new developer?

00:49:16 If you're a junior and this is your first time looking for a development job, it's going to be important that you have good support.

00:49:23 So are there are there seniors that you compare with?

00:49:26 Are there seniors who will mentor you?

00:49:28 Is the place you're working?

00:49:29 Do they participate with lunch talks?

00:49:32 Do they do they care about hosting meetups?

00:49:35 There's a few ways you can gauge this.

00:49:37 Or, you know, you can even ask to do a coffee with the company that you're possibly going to be interviewing at.

00:49:43 All of these things are really good ways to if you able if you can if you can do a coffee with a developer on the team, if you can go to their space when they have a meetup.

00:49:51 All these are great ways to learn more about the team and the environment at large there.

00:49:55 So really best advice.

00:49:57 Be true to who you are.

00:49:58 Know what you need in order to succeed.

00:50:01 So set yourself up for success.

00:50:02 Find a team that matches your style of learning.

00:50:05 OK, I hope that helps.

00:50:07 Thank you so much.

00:50:08 Thanks for doing this, Michael.

00:50:11 I really can't thank you enough.

00:50:13 You know, I'm so psyched to just start sending people links to this, you know, instead of having to, like, you know, go through this whole rant every single time.

00:50:23 It varies a lot from person to person.

00:50:25 But really, everything that I put in here is, you know, pretty generalizable stuff.

00:50:29 And it's what I say to, you know, basically everyone who asks me this question.

00:50:34 So really good work.

00:50:36 Really good idea for a show.

00:50:37 Really looking forward to hearing what the other people have to say.

00:50:40 All right.

00:50:40 Have a good day slash night.

00:50:42 Bye-bye.

00:50:44 This has been another episode of Talk Python To Me.

00:50:46 Thank you to all the panelists who participated in today's show, which has been sponsored by Hired and SnapCI.

00:50:53 Are you looking for a new job or considering a job change?

00:50:57 As always, Hired wants to help you find your next big thing.

00:51:00 Visit Hired.com slash Talk Python To Me to get five or more offers with salary and equity presented right up front and a special listener signing bonus of $4,000.

00:51:11 SnapCI is modern, continuous integration and delivery.

00:51:14 Build, test, and deploy your code directly from GitHub, all in your browser with debugging, Docker, and parallelism included.

00:51:21 Try them for free at snap.ci slash Talk Python.

00:51:25 You can find the links from today's show at talkpython.fm/episodes slash show slash 41.

00:51:31 And be sure to subscribe to the show.

00:51:33 Open your favorite podcatcher and search for Python, which should be right at the top.

00:51:37 You'll also find the iTunes and direct RSS feeds in the footer of the website.

00:51:41 Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

00:51:45 You can hear the entire song on talkpython.fm.

00:51:49 This is your host, Michael Kennedy.

00:51:51 As always, thank you for listening.

00:51:53 Smix takes us out of here.

00:51:54 Stay tuned.

