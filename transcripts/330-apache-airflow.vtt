WEBVTT

00:00:00.001 --> 00:00:03.880
If you're working with data pipelines, you definitely need to give Apache Airflow a look.

00:00:03.880 --> 00:00:08.020
This pure Python workflow framework is one of the most popular and capable out there.

00:00:08.020 --> 00:00:12.300
You create your workflows by writing Python code using clever language operators,

00:00:12.300 --> 00:00:16.400
and then you can monitor them and even debug them visually once you get them started.

00:00:16.400 --> 00:00:21.800
So stop writing manual code or Cronjaw-based code to create data pipelines and check out Airflow.

00:00:21.800 --> 00:00:25.700
And to do that, we have three great guests from the Airflow community.

00:00:25.700 --> 00:00:28.540
Yarek Potik, Taxil Naik, and Leah Cole.

00:00:28.900 --> 00:00:33.840
This is Talk Python To Me, episode 330, recorded August 5th, 2021.

00:00:33.840 --> 00:00:53.360
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:53.360 --> 00:00:55.160
This is your host, Michael Kennedy.

00:00:55.160 --> 00:00:57.360
Follow me on Twitter where I'm @mkennedy.

00:00:57.800 --> 00:01:01.080
And keep up with the show and listen to past episodes at talkpython.fm.

00:01:01.080 --> 00:01:04.140
And follow the show on Twitter via at Talk Python.

00:01:04.140 --> 00:01:08.140
This episode is brought to you by us over at Talk Python Training.

00:01:08.140 --> 00:01:11.140
And the transcripts are brought to you by Assembly AI.

00:01:11.140 --> 00:01:16.060
Leah, Yarek, Axel, welcome to Talk Python To Me.

00:01:16.060 --> 00:01:16.820
It's good to have you all here.

00:01:16.820 --> 00:01:17.620
Thanks for having us.

00:01:17.620 --> 00:01:18.220
Thank you.

00:01:18.220 --> 00:01:18.440
Yeah.

00:01:18.500 --> 00:01:20.280
It's really fun to be talking about Airflow.

00:01:20.280 --> 00:01:31.460
These are the types of tools that I think they don't get that much awareness, but they're the kind of thing that can be the real backbone of a lot of teams, a lot of organizations, and so on.

00:01:31.460 --> 00:01:34.320
So I think that'll be super fun to dive into.

00:01:34.320 --> 00:01:35.620
And we'll all learn a lot.

00:01:35.620 --> 00:01:39.560
And I suspect a lot of people listening will realize, oh, here's a whole class of tools.

00:01:39.560 --> 00:01:42.280
I didn't even realize I should have considered to solve my problems.

00:01:42.280 --> 00:01:45.160
But before we get down to that, let's start with your stories.

00:01:45.160 --> 00:01:46.360
Leah, you go first.

00:01:46.360 --> 00:01:47.900
How do you get into programming Python?

00:01:47.900 --> 00:01:51.420
Python was the first language that I learned.

00:01:51.420 --> 00:01:54.280
I do have a bachelor's in computer science.

00:01:54.280 --> 00:01:59.880
And the school I went to, that is the language that Intro to CS is taught in.

00:02:00.060 --> 00:02:01.340
I am so jealous.

00:02:01.340 --> 00:02:07.700
My Intro to CS class was in Scheme, which is derivative of Lisp, which didn't seem that practical.

00:02:07.700 --> 00:02:09.560
And then I was told I had to learn Fortran.

00:02:09.560 --> 00:02:11.920
It would be the most useful language I'd ever learn.

00:02:11.920 --> 00:02:13.540
Neither of which turned out to be true.

00:02:13.540 --> 00:02:14.700
I wish I learned Python.

00:02:14.700 --> 00:02:19.740
So thanks, Carlton College, Northfield, Minnesota, for giving me Python early.

00:02:19.740 --> 00:02:22.400
And yes, I loved Python from the beginning.

00:02:22.400 --> 00:02:24.440
You asked how I got into programming.

00:02:24.440 --> 00:02:26.960
So I actually do have a parent in tech.

00:02:26.960 --> 00:02:27.880
It is my dad.

00:02:28.240 --> 00:02:30.860
And he tried to get me into programming a lot earlier.

00:02:30.860 --> 00:02:34.920
And like a true teen, I said, absolutely not.

00:02:34.920 --> 00:02:36.920
Because it was suggested by my dad.

00:02:36.920 --> 00:02:39.100
It really wasn't until I got to school.

00:02:39.100 --> 00:02:43.920
And I heard people say that Intro to CS was a fun elective.

00:02:43.920 --> 00:02:49.300
For those only listening, that's totally in quotes, as I'm saying it, that I decided to take it.

00:02:49.300 --> 00:02:51.260
And it turned out I really liked it.

00:02:51.260 --> 00:02:57.500
And I decided to pivot from being a math major, which wasn't going very well, to being a computer science major.

00:02:57.780 --> 00:02:58.540
Yeah, that's fantastic.

00:02:58.540 --> 00:02:59.940
I was also a math major.

00:02:59.940 --> 00:03:04.620
And I find the programming side, a lot of the same skill set you have to use.

00:03:04.620 --> 00:03:06.360
Like the thinking through problem solving.

00:03:06.360 --> 00:03:09.720
You have these constraints or axioms in math.

00:03:09.720 --> 00:03:11.140
And you work from them.

00:03:11.140 --> 00:03:16.760
But in math, you just come up with sort of like the next idea that is the next problem that is the next idea.

00:03:16.760 --> 00:03:19.100
And in computers, you build stuff that people use.

00:03:19.100 --> 00:03:19.740
Exactly.

00:03:19.740 --> 00:03:21.440
And it's such a difference, I find.

00:03:21.440 --> 00:03:23.560
It's puzzles is the programming.

00:03:23.560 --> 00:03:25.860
And that was always the part of math that I liked.

00:03:25.860 --> 00:03:29.980
I never liked the writing proofs or the theoretical side of things.

00:03:30.100 --> 00:03:33.220
I just wanted to solve puzzles with logic and rules.

00:03:33.220 --> 00:03:34.160
Yeah, fantastic.

00:03:34.160 --> 00:03:36.040
Well, it sounds like you've landed in the right spot.

00:03:36.040 --> 00:03:36.480
That's awesome.

00:03:36.480 --> 00:03:37.100
I'm doing okay.

00:03:37.100 --> 00:03:39.480
Jarek, how about you?

00:03:39.480 --> 00:03:41.460
Yes, you talked about your first language.

00:03:41.460 --> 00:03:48.580
So my first language in computer science during the studies was, I think, Delphi or Pascal.

00:03:48.880 --> 00:03:50.200
I can't even remember that.

00:03:50.200 --> 00:03:56.320
But actually, the first language I started programming in the real work was, listen to that, Kobol.

00:03:56.320 --> 00:04:07.280
So I tend to joke that when I'm retiring, I will be very well paid five hours a week programmer of Kobol.

00:04:07.280 --> 00:04:09.320
Because nobody else will know it.

00:04:09.320 --> 00:04:12.660
You're going to keep the trucks delivering and the warehouses open.

00:04:12.660 --> 00:04:13.800
Exactly.

00:04:13.800 --> 00:04:14.980
Beautiful.

00:04:14.980 --> 00:04:17.340
Just five hours a week.

00:04:17.800 --> 00:04:20.140
Yeah, that's super cool job, I think.

00:04:20.140 --> 00:04:24.720
But then Python is actually quite new in my portfolio, let's say, of languages.

00:04:24.720 --> 00:04:27.720
I've learned it maybe six years ago.

00:04:27.720 --> 00:04:33.380
And with my experience and years of working in CS, it's relatively late.

00:04:33.380 --> 00:04:35.020
But I loved it from the first glance.

00:04:35.020 --> 00:04:41.340
I used to work in like C, Java, C++, hundreds of other, a lot of other languages.

00:04:41.340 --> 00:04:47.160
But Python was just super easy from the start and super nice tool and super, super friendly.

00:04:47.720 --> 00:04:57.180
Like, I was, after years of programming in Java, I was like so much, oh, one line you can do what I would do in five pages of Java code.

00:04:57.180 --> 00:04:57.620
Yeah.

00:04:57.620 --> 00:04:58.080
Yeah.

00:04:58.080 --> 00:04:58.640
That's cool.

00:04:58.640 --> 00:05:00.560
And you can understand it as well.

00:05:00.560 --> 00:05:00.980
Yes.

00:05:00.980 --> 00:05:01.760
Yes.

00:05:02.460 --> 00:05:03.040
So, yeah.

00:05:03.040 --> 00:05:03.040
So, yeah.

00:05:03.040 --> 00:05:04.640
I fell in love immediately.

00:05:04.640 --> 00:05:08.760
And this is my absolutely favorite language right now.

00:05:08.760 --> 00:05:09.480
Same here.

00:05:09.480 --> 00:05:09.840
Axel?

00:05:09.840 --> 00:05:10.160
Yeah.

00:05:10.160 --> 00:05:13.100
For me, I did my bachelor's in electrical engineering.

00:05:13.100 --> 00:05:15.180
So, didn't do anything over there.

00:05:15.180 --> 00:05:21.660
But when I came in the UK to do my master's, we were taught R language and Java.

00:05:21.660 --> 00:05:25.920
One fine day, we were ending the college in just a month or two.

00:05:26.120 --> 00:05:32.960
And there was a presentation from someone in the university who was telling us how to use data science in the industry and everything.

00:05:32.960 --> 00:05:34.700
They said, you should know Python.

00:05:34.700 --> 00:05:37.120
And you're like, oh, but we were not taught Python.

00:05:37.840 --> 00:05:41.620
And we are just one or two months away from doing our internships and everything.

00:05:41.620 --> 00:05:42.640
And we don't know Python.

00:05:42.640 --> 00:05:45.600
So, that's when I started looking into Python.

00:05:45.600 --> 00:05:47.260
I got an internship.

00:05:47.260 --> 00:05:50.020
And then I actually started learning more of Python.

00:05:50.020 --> 00:05:53.200
So, this was 2016, I'm talking about.

00:05:53.200 --> 00:05:56.160
And, yeah, since then it has been a wild, wild ride.

00:05:56.160 --> 00:05:58.940
I have written a lot of Java, a lot of R.

00:05:58.940 --> 00:06:02.900
But Python seems to be very easy to write, easy to understand.

00:06:03.040 --> 00:06:09.020
Plus, the community behind it and the packages behind it are so vast that you can use it for anything.

00:06:09.020 --> 00:06:10.180
And basically, yeah.

00:06:10.180 --> 00:06:13.000
I saw a funny t-shirt once that said, I learned Python.

00:06:13.000 --> 00:06:13.900
It was a great weekend.

00:06:13.900 --> 00:06:16.340
Which I think is really funny, right?

00:06:16.340 --> 00:06:20.820
Because on one hand, yeah, sure, you can go through.

00:06:20.820 --> 00:06:24.860
And actually, the language is simple, especially if you know something else that's like Java or C++.

00:06:24.860 --> 00:06:26.580
Oh, this is a breath of fresh air, right?

00:06:26.580 --> 00:06:30.360
But on the other hand, I've been doing this for a long time, all day, every day.

00:06:30.360 --> 00:06:32.360
And I'm still learning Python every day, right?

00:06:32.360 --> 00:06:36.980
So, it's a really interesting juxtaposition of, like, you can learn the language really easily.

00:06:36.980 --> 00:06:38.600
But then there's the standard library.

00:06:38.600 --> 00:06:40.860
And then there's 300,000 PyPI packages.

00:06:40.860 --> 00:06:42.600
Like, Airflow is just one of them.

00:06:42.600 --> 00:06:44.040
And that's our whole topic today, right?

00:06:44.040 --> 00:06:45.320
So, it's kind of both, right?

00:06:45.320 --> 00:06:45.660
Yeah.

00:06:45.660 --> 00:06:47.360
And the language keeps growing.

00:06:47.360 --> 00:06:50.980
So, you've got to keep track of the cool new things that are released.

00:06:50.980 --> 00:06:57.320
And things that are true in Python 2.7 are definitely not true today with Python 3.10.

00:06:57.320 --> 00:06:58.620
It's grown a lot.

00:06:58.620 --> 00:06:59.880
It definitely has.

00:07:00.000 --> 00:07:05.600
And I saw that Airflow is not supporting the older versions of Python, basically, as they get deprecated.

00:07:05.600 --> 00:07:06.860
So, yay for that, right?

00:07:06.860 --> 00:07:12.240
Yeah, we have actually, you know, very, very strong rules following the Python release rules.

00:07:12.240 --> 00:07:16.240
So, we've learned from what Python learned on the release schedule.

00:07:16.240 --> 00:07:22.900
And we just follow it very, very closely with, like, how much we have when we support, when we stop, we support Python.

00:07:22.900 --> 00:07:23.680
That makes a lot of sense.

00:07:23.860 --> 00:07:27.460
Yeah, it's difficult to maintain compatibility between Python 2 and 3.

00:07:27.460 --> 00:07:28.880
That's a lot of overhead.

00:07:28.880 --> 00:07:30.360
Actually, we, yes.

00:07:30.440 --> 00:07:37.260
I have nightmares about it, cherry picking all the stuff from the main branch to the old release branch and adding Python to support.

00:07:37.860 --> 00:07:39.720
But Kaxil, you cannot complain.

00:07:39.720 --> 00:07:41.900
I mean, we both, but Kaxil did that a lot.

00:07:41.900 --> 00:07:48.620
And thanks to that, we've been several times top committers on Apache organization.

00:07:48.620 --> 00:07:51.860
Like, there is a, like, this week, most commits made.

00:07:51.860 --> 00:07:56.480
And that was us doing cherry picks between three version and two seven version.

00:07:56.840 --> 00:08:01.560
And once, we made it both at the same time, top committers on Apache.

00:08:01.560 --> 00:08:02.340
Fantastic.

00:08:02.340 --> 00:08:03.500
I'm mad at GitHub.

00:08:03.500 --> 00:08:07.840
The GitHub does not count commits on any other branch except main or master.

00:08:07.840 --> 00:08:10.460
Oh, not fair, not fair.

00:08:10.460 --> 00:08:13.740
We'll have to do our own visualizations.

00:08:13.740 --> 00:08:14.500
Exactly.

00:08:14.500 --> 00:08:15.020
Yeah, exactly.

00:08:15.020 --> 00:08:16.340
All right.

00:08:16.340 --> 00:08:20.300
Before we move on out of the live stream, Hawaii girl says Python is awesome, like all of us.

00:08:20.300 --> 00:08:20.820
Yes, definitely.

00:08:20.820 --> 00:08:21.820
Thanks for being here.

00:08:21.820 --> 00:08:22.320
All right.

00:08:22.400 --> 00:08:27.520
Well, let's start this at a slightly higher conversation than just Airflow.

00:08:27.520 --> 00:08:31.820
So Airflow is one of these workflow management frameworks.

00:08:31.820 --> 00:08:34.220
Whoever wants to take this, what is that?

00:08:34.220 --> 00:08:35.100
Why do I need that?

00:08:35.100 --> 00:08:36.100
When do I need that?

00:08:36.100 --> 00:08:38.540
What are these tools, as I hinted at the beginning?

00:08:38.540 --> 00:08:44.540
I want to walk through some of the history, though, like in 2014, 2015, where like data engineering

00:08:44.540 --> 00:08:51.000
was not mainstream and everyone was just using Cron for scheduling their task.

00:08:51.400 --> 00:08:58.220
And then there came Luigi, where people were using XML and those sort of languages to write

00:08:58.220 --> 00:09:02.820
their tags workflows to make sure that the task runs on schedule.

00:09:02.820 --> 00:09:03.280
Yeah.

00:09:03.280 --> 00:09:06.020
So DAGs directed acyclic graphs?

00:09:06.020 --> 00:09:06.900
Yes.

00:09:06.900 --> 00:09:07.560
Okay.

00:09:07.560 --> 00:09:08.340
Yeah.

00:09:08.340 --> 00:09:09.600
Let's be very clear.

00:09:09.600 --> 00:09:12.780
You cannot have a circle for tasks.

00:09:12.780 --> 00:09:15.060
The dependencies cannot be that.

00:09:15.060 --> 00:09:16.140
People have tried that.

00:09:16.140 --> 00:09:18.620
It takes a long time to finish those.

00:09:18.620 --> 00:09:19.080
Yes.

00:09:19.080 --> 00:09:19.880
A little bit.

00:09:19.880 --> 00:09:20.560
A long time.

00:09:20.560 --> 00:09:22.660
Some of those decks are still running.

00:09:22.660 --> 00:09:25.780
So it takes a long time for them to start sometimes, too.

00:09:27.600 --> 00:09:34.420
But yeah, I think to complete the history part, people just got bored writing the XML syntax.

00:09:34.420 --> 00:09:36.820
And it's difficult to understand.

00:09:36.820 --> 00:09:39.160
Similar to what we were talking about, Java and Python.

00:09:39.160 --> 00:09:42.080
Like Python is much easier to read, easier to understand.

00:09:42.080 --> 00:09:43.420
There came Airflow.

00:09:44.420 --> 00:09:50.040
Maxime wrote Airflow in his time at Airbnb and open sourced it to Apache Software Foundation.

00:09:50.040 --> 00:09:55.140
And that had a sigh of relief for people working on Luigi and others as well.

00:09:55.140 --> 00:10:01.860
Because then you could write your workflows in an easy to understand language that you're already very familiar with.

00:10:01.960 --> 00:10:04.740
You don't need to write those XMLs.

00:10:04.740 --> 00:10:08.260
And who loves writing XMLs, first of all?

00:10:09.620 --> 00:10:11.660
And so it's easy to understand.

00:10:11.660 --> 00:10:13.460
Just configuration as code.

00:10:13.460 --> 00:10:18.100
And there was also, I think, a slight move towards everything as code.

00:10:18.100 --> 00:10:22.240
Infrastructure as code with Terraform and Ansible and whatnot.

00:10:22.240 --> 00:10:28.200
And Airflow was just a perfect tool for workflow as code or DAGs as code.

00:10:28.720 --> 00:10:38.620
And since, I think, 2016 to 2018, Airflow's popularity has skyrocketed with the advent of, like, separate specialized data engineering field.

00:10:38.620 --> 00:10:41.520
Previously, I think software engineers used to do everything.

00:10:41.520 --> 00:10:45.520
But then people or companies also realized that it's a separate field.

00:10:45.520 --> 00:10:46.440
It's a lot of work.

00:10:46.440 --> 00:10:51.100
It's not, you can also just not include machine learning engineer and let him do everything.

00:10:51.100 --> 00:10:59.220
It's a separate data engineer's job to write a pipeline, knows how to handle the data, and everything from start to start.

00:10:59.220 --> 00:11:05.840
Let's realize that thousands of things, which, first of all, your Cron expressions or Cron alone cannot handle those.

00:11:05.840 --> 00:11:09.200
The task dependencies, the SLAs and whatnot.

00:11:09.200 --> 00:11:19.500
So I think that's when, with the advent of data engineering, people realizing the importance of data, Airflow's popularity gained massively between 2080,

00:11:19.500 --> 00:11:25.980
which also, by the way, coincided with where Airflow became the top-level project in Apache Software Foundation.

00:11:25.980 --> 00:11:29.980
Until then, Airflow was just an incubating project in ASF.

00:11:29.980 --> 00:11:32.040
And then it became a top-level project.

00:11:32.040 --> 00:11:35.000
And that was a big milestone for Airflow and the community.

00:11:35.000 --> 00:11:39.100
I think data engineering is really interesting because a lot of people, when they think of,

00:11:39.100 --> 00:11:43.960
well, what are the divisions of what you do with programming, you know, especially in Python?

00:11:43.960 --> 00:11:47.720
Well, we've got, like, web programming, to some degree, UI programming,

00:11:47.920 --> 00:11:49.420
and then we've got data science.

00:11:49.420 --> 00:11:54.320
Sort of web and data science are the two, but there's this middle ground where I feel like

00:11:54.320 --> 00:11:57.500
people kind of don't want to go there, or that's the data, right?

00:11:57.500 --> 00:12:00.460
You want to make sure if you get a bunch of data and you feed it to your model,

00:12:00.460 --> 00:12:03.760
your model is only as good as the data you get, right?

00:12:03.760 --> 00:12:08.640
If you're trying to automate some ingest of data or warehousing reporting,

00:12:08.640 --> 00:12:13.300
it's only as good as the reliability of the data coming in, the accuracy, right?

00:12:13.300 --> 00:12:18.420
We've got things, was it great expectations and stuff like that for testing, actually testing

00:12:18.420 --> 00:12:22.020
against the data, not the code that works with the data.

00:12:22.260 --> 00:12:22.760
Yes.

00:12:22.760 --> 00:12:27.460
And let me just add, because also Airflow is really an orchestrator.

00:12:27.460 --> 00:12:30.280
So, like, I used to sing in the choir for many years.

00:12:30.280 --> 00:12:35.460
And for me, this is really, like, this parallel between the conductor and the team playing.

00:12:35.460 --> 00:12:37.380
We don't do stuff in Airflow.

00:12:37.380 --> 00:12:38.700
Airflow doesn't do stuff.

00:12:38.700 --> 00:12:40.760
It just tells others what to do.

00:12:40.760 --> 00:12:42.520
And there's data processing stuff.

00:12:43.040 --> 00:12:48.620
So, like, we don't know how, basically, we as data engineers, because, like, we are actually,

00:12:48.620 --> 00:12:52.320
you know, data software engineers writing things for data engineers.

00:12:52.320 --> 00:12:56.420
So, when we think about, like, this cross of this both, like, software engineer and data

00:12:56.420 --> 00:13:00.800
engineer, so we don't know how to actually make a model, machine learning model.

00:13:00.800 --> 00:13:02.220
Or we don't know machine learning.

00:13:02.220 --> 00:13:06.580
We don't know how to, even we don't know how to do MapReduce, right?

00:13:06.580 --> 00:13:11.360
I mean, if you want to process a lot of data, but we know what to do with the data when it

00:13:11.360 --> 00:13:15.640
comes, who should do next, what, and what, how to pass it somewhere else.

00:13:15.640 --> 00:13:22.220
And we can make it super complex to define or complex in terms of composed of many, many

00:13:22.220 --> 00:13:24.240
different steps in different relations.

00:13:24.240 --> 00:13:29.700
But Airflow makes it super easy to manage the whole thing so that it runs smoothly and you

00:13:29.700 --> 00:13:34.700
can operate it and you don't, and you can deal with any problems that arise on the go.

00:13:34.700 --> 00:13:37.900
So, Jarek, at this point, I want to expand on it real quick.

00:13:38.220 --> 00:13:43.620
There's a very human aspect to the workflow orchestration that I think both you, both

00:13:43.620 --> 00:13:49.760
Kexil and Jarek have touched on, which is that having a workflow orchestrator really enables

00:13:49.760 --> 00:13:55.480
you to move from having, like, the data scientist in their silo working on this pipeline alone

00:13:55.480 --> 00:14:00.280
to having a whole team of data scientists and data engineers working together.

00:14:00.280 --> 00:14:04.480
Because you have really specialized folks who can work on building those models.

00:14:04.480 --> 00:14:08.900
And that might not be the same group of people that's figuring out how to get the data from

00:14:08.900 --> 00:14:14.980
A to B and making sure that it's healthy and is what the model and the data scientists are

00:14:14.980 --> 00:14:15.540
expecting.

00:14:15.540 --> 00:14:22.240
So I think it just enables a lot more collaboration and helps you have more specialists working together.

00:14:22.240 --> 00:14:30.580
Yeah, it becomes that well-known, well-tested way to flow data down into the specialties that people need, right?

00:14:30.580 --> 00:14:30.880
Exactly.

00:14:33.340 --> 00:14:35.900
Talk Python To Me is partially supported by our training courses.

00:14:35.900 --> 00:14:39.320
At Talk Python, we run a bunch of web apps and web APIs.

00:14:39.320 --> 00:14:43.640
These power the training courses as well as the mobile apps on iOS and Android.

00:14:43.640 --> 00:14:48.380
If I had to build these from scratch again today, there's no doubt which framework I would use.

00:14:48.380 --> 00:14:49.540
It's FastAPI.

00:14:49.540 --> 00:14:54.380
To me, FastAPI is the embodiment of modern Python and modern APIs.

00:14:54.920 --> 00:14:57.020
You have beautiful usage of type annotations.

00:14:57.020 --> 00:14:59.520
You have model binding and validation with Pydantic.

00:14:59.520 --> 00:15:02.500
And you have first class, async, and await support.

00:15:02.500 --> 00:15:06.840
If you're building or rebuilding a web app, you owe it to yourself to check out our course,

00:15:06.840 --> 00:15:10.320
Modern APIs with FastAPI over at Talk Python Training.

00:15:10.320 --> 00:15:14.260
It'll take you from curious to production with FastAPI.

00:15:14.260 --> 00:15:18.960
To learn more and get started today, just visit talkpython.fm/FastAPI

00:15:18.960 --> 00:15:21.720
or email us at sales at talkpython.fm.

00:15:21.720 --> 00:15:28.480
One of the things you do in these types of frameworks is you build these tasks, right?

00:15:28.480 --> 00:15:31.080
Give us an idea of what some of the tasks look like.

00:15:31.080 --> 00:15:35.480
And you actually have a whole bunch of, would that be the integrations in there?

00:15:35.480 --> 00:15:36.700
Or is that something different?

00:15:36.700 --> 00:15:37.540
Provisors.

00:15:37.540 --> 00:15:40.300
That's the name that we are using in Airfield too.

00:15:40.300 --> 00:15:40.880
Yes.

00:15:40.880 --> 00:15:43.440
So we have like more than 70 of those right now.

00:15:43.440 --> 00:15:50.600
We do for 70 services we talk to, external services or databases or whatnot.

00:15:50.600 --> 00:15:52.700
70 entities.

00:15:52.700 --> 00:15:58.640
But within that, we have several hundreds of these so-called operators or sensors

00:15:58.640 --> 00:16:02.360
or transfer operators, which perform the task.

00:16:02.360 --> 00:16:04.040
And they're actually super easy.

00:16:04.040 --> 00:16:05.400
It's just one method.

00:16:05.400 --> 00:16:06.300
Execute.

00:16:06.300 --> 00:16:06.880
That's it.

00:16:06.880 --> 00:16:07.420
Right.

00:16:07.420 --> 00:16:08.240
That's pretty much it.

00:16:08.240 --> 00:16:08.520
Yeah.

00:16:08.640 --> 00:16:11.480
There's the three things, the sensors, the operators, the transfers.

00:16:11.480 --> 00:16:18.680
Like an example of a sensor might be waiting to see if an object is in S3 or in Google Cloud

00:16:18.680 --> 00:16:19.360
storage.

00:16:19.360 --> 00:16:23.360
And a transfer is moving something from A to B.

00:16:23.360 --> 00:16:27.380
And an operator, those are the ones we probably have the most of, right?

00:16:27.380 --> 00:16:28.640
Yak and Kaxel.

00:16:28.640 --> 00:16:31.780
And that, it can be anything in a service.

00:16:31.780 --> 00:16:33.540
I don't know, like starting running.

00:16:33.720 --> 00:16:37.400
So I work in Google Cloud, so the operators I'm most familiar with are the Google ones.

00:16:37.400 --> 00:16:44.400
So like spinning up a data cluster and then running a Spark job on it or running something

00:16:44.400 --> 00:16:45.780
on a Kubernetes pod.

00:16:45.780 --> 00:16:46.900
There, yeah.

00:16:46.900 --> 00:16:51.720
If you can dream it, either there is an operator for it or you can write an operator for it.

00:16:51.720 --> 00:16:51.960
Yeah.

00:16:51.960 --> 00:16:52.260
Yeah.

00:16:52.420 --> 00:16:57.100
When I started with Airflow back in 2017, we used Airflow for the same reason.

00:16:57.100 --> 00:17:02.140
Like Airflow was designed for being a classic ETL tool or being an enabler of sorts.

00:17:02.140 --> 00:17:06.260
So a lot of companies were migrating from on-premises to cloud.

00:17:06.380 --> 00:17:11.980
We were doing a project in partnership with Google to move customers' data to cloud.

00:17:11.980 --> 00:17:16.640
And we were using NiFi for data to be on GCS.

00:17:16.640 --> 00:17:20.380
But from there, everything was orchestrated by Airflow.

00:17:20.380 --> 00:17:26.220
So once the data lands in Google Cloud Storage, then there's classic ETL, that extract, transform,

00:17:26.220 --> 00:17:26.880
load.

00:17:26.880 --> 00:17:29.200
From GCS, it goes to BigQuery.

00:17:29.520 --> 00:17:36.380
BigQuery does some manipulations and the data goes to like, there's a dashboard, a data studio

00:17:36.380 --> 00:17:38.600
that shows a rich dashboard behind it.

00:17:38.600 --> 00:17:41.320
And this is all managed by Airflow.

00:17:41.320 --> 00:17:46.620
And it was so easy because we separated this using task and we were using all the hooks and

00:17:46.620 --> 00:17:52.680
operators that Leah and Yarek were talking about, which was like GCS to GCS operator, move

00:17:52.680 --> 00:17:55.960
the data from the landing area to staging.

00:17:55.960 --> 00:17:57.820
So your landing area remains untouched.

00:17:57.820 --> 00:18:03.360
So you can verify with your vendor that the data is as recent, even in futures.

00:18:03.360 --> 00:18:07.280
And then there were BigQuery operator to run SQL query.

00:18:07.280 --> 00:18:11.240
And then there are other operators for different GCS services.

00:18:11.240 --> 00:18:16.420
So I think with Google, there was already a good amount of integrations back three, four

00:18:16.420 --> 00:18:16.980
years back.

00:18:16.980 --> 00:18:19.940
Similarly for Spark and other operators.

00:18:19.940 --> 00:18:20.300
Yeah.

00:18:20.300 --> 00:18:24.560
One of the things that stands out to me that might be really useful here is if something

00:18:24.560 --> 00:18:25.180
goes wrong.

00:18:25.180 --> 00:18:29.080
You know, you talked about the contrast being cron jobs or something like that.

00:18:29.080 --> 00:18:33.400
And if something goes wrong with that, or you need to scale out across different machines

00:18:33.400 --> 00:18:37.300
or whatever, and how do you get those timings right or other weird things?

00:18:37.300 --> 00:18:41.260
So what's the mechanism for dealing with, you know, I'm going to get some data.

00:18:41.260 --> 00:18:42.500
It drops in the cloud.

00:18:42.500 --> 00:18:43.540
I'm going to pull it over.

00:18:43.640 --> 00:18:45.980
But then maybe it's invalid data or something.

00:18:45.980 --> 00:18:47.100
What's that look like?

00:18:47.100 --> 00:18:53.120
So at least for Airflow, all the operators that were written previously or the idea behind

00:18:53.120 --> 00:18:56.860
them were the task, a single operator or a single task should be idempotent.

00:18:56.860 --> 00:19:00.980
So even if you run them multiple times, it should produce the same result.

00:19:00.980 --> 00:19:05.960
So if a task for whatever reason fails, you could add more retries to it.

00:19:05.960 --> 00:19:08.440
There's a retry parameter that the base class takes.

00:19:08.440 --> 00:19:13.000
And you could say retries is four, retries is five, and Airflow will handle that for you.

00:19:13.060 --> 00:19:16.200
So if a task fails, it will rerun it for that amount of time.

00:19:16.200 --> 00:19:16.560
Right.

00:19:16.560 --> 00:19:20.600
It could fail because the database server is down, or it could fail because it's never going

00:19:20.600 --> 00:19:21.080
to work, right?

00:19:21.080 --> 00:19:21.880
It could be either one.

00:19:21.880 --> 00:19:22.500
Exactly.

00:19:22.500 --> 00:19:24.760
And you want to be notified as well.

00:19:24.760 --> 00:19:30.720
So then we had all those on failure callback, on success callback, those emails get sent out

00:19:30.720 --> 00:19:34.240
saying the data didn't arrive at all or whatever the reason may be.

00:19:34.240 --> 00:19:38.940
There is even more to that because we also have the mechanism of backfilling the data.

00:19:38.940 --> 00:19:43.040
So even in this case, it's not like not a server failure, but your data has improved.

00:19:43.040 --> 00:19:48.480
Because you've got a new metadata and you want to reprocess the data you've already processed

00:19:48.480 --> 00:19:54.280
for like last week or only process part of the data because it takes a lot of time.

00:19:54.280 --> 00:19:59.980
And you know that the data up to a certain point is good, but then you have to process just part

00:19:59.980 --> 00:20:03.560
of your workflow of part of your DAG for the last week.

00:20:03.560 --> 00:20:04.960
You can do that with Airflow.

00:20:05.060 --> 00:20:10.440
So you can just tell, make a command, run a command, just reprocess me that data for

00:20:10.440 --> 00:20:16.180
this period of time, starting from this task, because this is where we know we have to reprocess

00:20:16.180 --> 00:20:18.840
the data because the data has been cleaned up, for example.

00:20:18.840 --> 00:20:19.100
Right.

00:20:19.100 --> 00:20:20.680
You don't have to detect it.

00:20:20.680 --> 00:20:21.780
You don't have to copy it down.

00:20:21.780 --> 00:20:23.880
You've changed it locally and you want it to get fixed.

00:20:23.880 --> 00:20:24.180
I see.

00:20:24.180 --> 00:20:24.480
Okay.

00:20:24.620 --> 00:20:28.660
And the super cool thing there is that this can be done by one person who doesn't know

00:20:28.660 --> 00:20:30.640
what those tasks are doing at all.

00:20:30.640 --> 00:20:34.840
Like they are just all the language of how the tasks are written.

00:20:34.840 --> 00:20:37.680
The specification is written in the way that anyone can do that.

00:20:37.680 --> 00:20:42.820
And then this person operating can very safely just rerun parts of it and be sure that what

00:20:42.820 --> 00:20:45.660
comes out at the end is just what they are expecting.

00:20:45.660 --> 00:20:50.800
And if you have like hundreds and thousands of that's written by, you know, tens and twenties

00:20:50.800 --> 00:20:55.680
or hundreds of people, just one person can sit down and operate all the whole, the whole

00:20:55.680 --> 00:20:59.540
of it without understanding a single thing, how it works inside.

00:20:59.540 --> 00:21:03.340
But knowing, with seeing what happened, this is like so powerful.

00:21:03.340 --> 00:21:03.900
Yeah.

00:21:03.900 --> 00:21:04.620
Part of Earth.

00:21:04.620 --> 00:21:08.500
It lets you focus on just the steps and not all the bit together, right?

00:21:08.500 --> 00:21:13.680
So yeah, let's focus on a couple of things on the website here that I think are maybe worth

00:21:13.680 --> 00:21:14.440
calling out.

00:21:14.440 --> 00:21:21.400
One of the things here is that the project has four principles that are really nice.

00:21:21.400 --> 00:21:22.900
Maybe you want to highlight those for people?

00:21:22.900 --> 00:21:24.220
Yeah, I think.

00:21:24.220 --> 00:21:24.620
Okay.

00:21:24.620 --> 00:21:30.160
So the four principles, it's that Airflow is dynamic, extensible, elegant, and scalable.

00:21:30.160 --> 00:21:34.440
And I am going to go ahead and pick my favorite one right here.

00:21:34.540 --> 00:21:38.440
And it's one that we've kind of touched upon without spelling out clearly, which is that

00:21:38.440 --> 00:21:39.960
Airflow is extensible.

00:21:39.960 --> 00:21:47.320
Yarek talked about how we have these 70 plus providers, these various integrations with all

00:21:47.320 --> 00:21:53.820
kinds of services from the big cloud providers to things like Slack, Snowflake, which I know

00:21:53.820 --> 00:21:56.160
are also kind of big, to much smaller ones.

00:21:56.160 --> 00:22:02.820
And if a provider doesn't exist or if an operator doesn't exist for a task that you need to perform,

00:22:02.820 --> 00:22:08.020
you can write it and you can either write it and be running it in your instance of Airflow.

00:22:08.020 --> 00:22:12.860
Or if you're being a good steward of open source, you can write it and contribute it back to the

00:22:12.860 --> 00:22:13.300
community.

00:22:13.300 --> 00:22:18.920
So other people who need to do that task can also benefit from what you've already figured out.

00:22:19.280 --> 00:22:20.160
Yeah, that's really neat.

00:22:20.240 --> 00:22:23.720
So a lot of these would be things down here,

00:22:23.720 --> 00:22:26.140
like if only one person has to write,

00:22:26.140 --> 00:22:28.160
how do I connect to Hadoop?

00:22:28.160 --> 00:22:30.580
Or if you go to airflow.apache.org,

00:22:30.580 --> 00:22:33.860
or you go to the bottom, there's all these different--

00:22:33.860 --> 00:22:35.780
are these the operators, or what are these?

00:22:35.780 --> 00:22:36.520
Or the tasks?

00:22:36.520 --> 00:22:39.140
GIL DIPERSON: Those are integrations, integrations

00:22:39.140 --> 00:22:41.260
with the different services you have.

00:22:41.260 --> 00:22:43.980
So Google, for example, is a big provider,

00:22:43.980 --> 00:22:45.920
but it consists of integration like Google Cloud,

00:22:45.920 --> 00:22:48.320
CMS, data store, machine learning.

00:22:48.320 --> 00:22:51.500
So you have a number of integrations per provider,

00:22:51.500 --> 00:22:52.460
even sometimes.

00:22:52.460 --> 00:22:53.180
GIL DIPERSON: OK, cool.

00:22:53.180 --> 00:22:55.340
And Leo, if I was going to create one of these,

00:22:55.340 --> 00:22:57.500
if I was going to be a good citizen, I'm like, oh,

00:22:57.500 --> 00:23:00.380
I want to create one with AWS Lambda.

00:23:00.380 --> 00:23:00.920
That exists.

00:23:00.920 --> 00:23:01.800
But something like that, right?

00:23:01.800 --> 00:23:02.000
GIL DIPERSON: Yeah.

00:23:02.000 --> 00:23:04.340
GIL DIPERSON: Does that get contributed back to Airflow?

00:23:04.340 --> 00:23:06.400
So when I pip install Airflow, does that come with it?

00:23:06.400 --> 00:23:09.260
Or is there some external way to bring in--

00:23:09.260 --> 00:23:10.200
GIL DIPERSON: Yes.

00:23:10.200 --> 00:23:12.380
We do actually-- well, I'll have to double check with Yarek

00:23:12.380 --> 00:23:14.660
and Caxel, because I know we've been messing around

00:23:14.660 --> 00:23:16.700
with how we do the installs lately.

00:23:16.700 --> 00:23:19.880
So it used to be that Airflow operators

00:23:19.880 --> 00:23:22.340
were packaged along with Airflow.

00:23:22.340 --> 00:23:24.320
And when you did pip install Airflow,

00:23:24.320 --> 00:23:25.880
you would get everything.

00:23:25.880 --> 00:23:31.040
And I think that you do still get a certain number of base operators

00:23:31.040 --> 00:23:34.880
that are kind of like provider agnostic that come with Airflow.

00:23:34.880 --> 00:23:42.560
GIL DIPERSON: But the way we have things now is that all of these provider-based operator sensors,

00:23:42.560 --> 00:23:45.060
all these provider task things are packaged separately.

00:23:45.060 --> 00:23:48.060
And you add them just like you would any other kind of Python package.

00:23:48.060 --> 00:23:49.240
GIL DIPERSON: Right.

00:23:49.240 --> 00:23:53.700
GIL DIPERSON: So for example, if you want to install the Google Cloud operators, you have that separately.

00:23:53.700 --> 00:23:58.240
And the advantage of that is that they're released on a separate release schedule.

00:23:58.240 --> 00:24:03.880
GIL DIPERSON: And follow versioning that ensures they're compatible with versions of Airflow.

00:24:03.880 --> 00:24:06.060
And they're very clear about that.

00:24:06.060 --> 00:24:15.060
And it's a lot easier for Airflow users to upgrade just the providers package than it is to upgrade the entirety of Airflow,

00:24:15.060 --> 00:24:19.060
which for folks running in production, that is not always feasible or practical.

00:24:19.060 --> 00:24:24.240
GIL DIPERSON: Yeah, you can actually click on documentation link on this page, Michael.

00:24:24.240 --> 00:24:26.240
And then you will see all of those providers.

00:24:26.240 --> 00:24:29.240
So you see the list of different provider packages.

00:24:29.240 --> 00:24:33.400
And you can see the documentation of that versions, the different versions.

00:24:33.400 --> 00:24:35.540
We release them very frequently.

00:24:35.540 --> 00:24:40.440
Like every month, we have a bunch of providers released, which are adding new functionality.

00:24:40.440 --> 00:24:43.760
And they are done completely separately, as Leah said.

00:24:43.760 --> 00:24:48.560
Not the same release schedule as Airflow, and you can start using them faster.

00:24:48.560 --> 00:24:54.100
And this is actually super cool that you can actually always find something there.

00:24:54.100 --> 00:24:58.440
But if you don't, we don't actually force you to go this community route.

00:24:58.440 --> 00:25:03.740
Like those are all providers which are developed by community and maintained by the community of Apache Airflow

00:25:03.740 --> 00:25:08.240
under the Apache Software Foundation rules, which is called like Apache Way.

00:25:08.240 --> 00:25:11.040
So the way how Apache releases software.

00:25:11.040 --> 00:25:14.420
But if you want, you can actually build your own custom provider.

00:25:14.420 --> 00:25:18.060
You can build your own custom operators and you can release them separately.

00:25:18.060 --> 00:25:19.320
And somebody can install that.

00:25:19.320 --> 00:25:23.600
And they even-- we even have integration points that if people are writing the custom providers,

00:25:23.600 --> 00:25:27.440
they can use exactly the same feature as the community driven ones.

00:25:27.440 --> 00:25:32.940
And you can install them as a package, as another Python package, completely independent from Airflow.

00:25:32.940 --> 00:25:39.180
And it just plugs in the UI of Airflow, plugs into the whole framework, and you can start using it.

00:25:39.180 --> 00:25:41.720
So it's both community and custom.

00:25:41.720 --> 00:25:43.720
Yeah, you can go either path, right?

00:25:43.720 --> 00:25:44.720
That's neat.

00:25:44.720 --> 00:25:54.560
I think, Leah, what you're saying about the cadence, the release frequency, and maybe even the degree of seriousness with which you have to apply to these.

00:25:54.560 --> 00:26:01.940
You might want the main Airflow to be treated differently than some edge package or integration, right?

00:26:01.940 --> 00:26:02.940
Yes, definitely.

00:26:02.940 --> 00:26:14.320
There was a proposal for requests, the very popular HTTP library, to be integrated into Python to replace Python's HTTP layer.

00:26:14.320 --> 00:26:19.700
And the decision of the core devs, I believe, was we don't want to do that to request.

00:26:19.700 --> 00:26:28.200
To request, like it will actually make requests go much slower and only get released once a year with changes rather than, you know, as quickly as it needs to go.

00:26:28.200 --> 00:26:29.380
Same thing for you all, right?

00:26:29.380 --> 00:26:41.980
That was one of the biggest reasons for us to separate the providers, because when we were releasing 1.10.2, 1.10.3, 1.10.4, it meant that all the development was happening in the main or master branch.

00:26:41.980 --> 00:26:48.260
And we were not releasing from master branch because we were just releasing the minor or pet versions right now.

00:26:48.640 --> 00:27:01.480
And because the code has to be tested thoroughly, even if there's a small bug in one of the providers, let's say a Google GCS bucket operator or something, it has to wait until the entire code has been tested and released.

00:27:01.480 --> 00:27:12.660
So the cycle can be large, whereas what everyone was thinking, at least the committers and PMC members, that providers can be released more frequently, even if it means it can be released.

00:27:12.880 --> 00:27:19.660
If we find a bug right now, we should fix it and go with the normal ESF releasing way, which is like three days of voting and release it.

00:27:19.660 --> 00:27:25.300
So it is quicker release rather than waiting for the next month to club it into the core airflow release.

00:27:25.300 --> 00:27:35.960
Plus that way, it's easier to also check the changes that happens because imagine checking the change log for 70 odd providers, including the airflow core in a single page.

00:27:36.120 --> 00:27:37.120
So it will be a nightmare.

00:27:37.120 --> 00:27:38.120
Yeah, I bet.

00:27:38.120 --> 00:27:47.440
I'm just thinking of all the coordination of, well, there's some people working on the Discord integration and someone's working on the Samba integration and we're going to do a new release.

00:27:47.440 --> 00:27:49.840
You've got to kind of feature freeze all that stuff.

00:27:49.840 --> 00:27:53.120
So yeah, it makes a ton of sense to separate these things.

00:27:53.120 --> 00:27:59.000
Actually, this is super, super cool that, you know, I'm the release manager for providers so far.

00:27:59.000 --> 00:28:03.720
So I was releasing, I don't know, maybe six, seven releases over the last year.

00:28:03.720 --> 00:28:07.000
And actually, I do it myself in like two, three hours.

00:28:07.000 --> 00:28:12.020
I'm able to bring all the changes and put the release notes for all the 70 providers.

00:28:12.020 --> 00:28:17.500
It's all fully automated and we can manage and release that without a worry that it will break something.

00:28:17.500 --> 00:28:22.360
Because if one of those releases goes wrong, providers go wrong, we can simply yank this release.

00:28:22.360 --> 00:28:26.320
This is this fantastic feature of PyPype that you can yank the release.

00:28:26.320 --> 00:28:27.920
And this actually happened yesterday.

00:28:27.920 --> 00:28:35.800
So we discovered that the PostgreSQL we released, 2.1.0 version, had an incompatibility back with previous version of Airflow.

00:28:35.800 --> 00:28:37.980
We haven't discovered that during our testing.

00:28:37.980 --> 00:28:40.320
We test a lot of things, but this one slipped through.

00:28:40.320 --> 00:28:43.040
But what we've done, just yanked this release.

00:28:43.040 --> 00:28:44.720
Anyone can use the previous one.

00:28:44.720 --> 00:28:49.320
When they install Airflow and PostgreSQL operators, they will install the latest version.

00:28:49.320 --> 00:28:53.100
And in the meantime, we can just fix the PostgreSQL and release a new version.

00:28:53.100 --> 00:29:01.200
And that's super cool, actually, for maintenance release and usability and stability of your installation.

00:29:01.200 --> 00:29:03.900
Yeah, that's really good that you can change it around.

00:29:03.900 --> 00:29:04.120
All right.

00:29:04.120 --> 00:29:08.080
So I want to talk about, first of all, let's talk about installing.

00:29:08.420 --> 00:29:11.640
So how do I get Airflow onto my computer?

00:29:11.640 --> 00:29:17.340
It depends on if you want a hosted, managed version, like Cloud Composer, which I work on.

00:29:17.340 --> 00:29:19.580
Or there is one for Amazon, MWAA.

00:29:19.580 --> 00:29:22.480
And there's also Astronomer, which is for Caxelworks.

00:29:22.480 --> 00:29:24.160
Or if you want to do it yourself.

00:29:24.160 --> 00:29:24.760
Yes.

00:29:25.000 --> 00:29:30.380
In general, though, we at least say that use the constraints file.

00:29:30.380 --> 00:29:38.760
So every time when we release an Airflow version, we also tag in GitHub the constraints file for each of the release.

00:29:38.760 --> 00:29:45.440
A constraints file contains the set of known dependencies that we have tested Airflow with on the CI.

00:29:45.760 --> 00:29:47.780
Because Airflow has a lot of dependencies.

00:29:47.780 --> 00:29:54.020
And before we started using constraints, there were a lot of instances where we just released Airflow.

00:29:54.020 --> 00:30:00.380
And one of the dependencies released a breaking change in a minor or a patch version, which means users could install Airflow.

00:30:00.820 --> 00:30:09.040
And to get over it, we came up with this idea of using constraints file because Airflow is a library as well as an application.

00:30:09.040 --> 00:30:16.320
So for library users who want the latest versions, whereas for application, you want the stable versions of everything.

00:30:16.320 --> 00:30:19.880
So we came up with this balance of using the constraints file.

00:30:19.880 --> 00:30:29.600
So if you check that Airflow version 2.1.2, we get the Python version and then we fetch that constraints file from GitHub and use that constraint file.

00:30:29.600 --> 00:30:34.900
Because that way we can guarantee that it is reproducible and it will work for sure.

00:30:34.900 --> 00:30:35.660
Yeah, very cool.

00:30:35.660 --> 00:30:39.020
So if I go to the documentation, there's a couple of options.

00:30:39.020 --> 00:30:40.240
I can run it locally.

00:30:40.240 --> 00:30:41.380
I can run it in Docker.

00:30:41.380 --> 00:30:43.740
I can run it in Astronomer.

00:30:43.740 --> 00:30:50.000
But looking through the script to set things up here, it looks like there's a couple of steps.

00:30:50.000 --> 00:30:52.540
So there's a database that does something.

00:30:52.540 --> 00:30:59.540
There's some users who execute the task or, you know, you don't want to run as root most likely.

00:30:59.540 --> 00:31:01.420
I suspect that's something you all discourage.

00:31:01.420 --> 00:31:02.660
Probably.

00:31:02.660 --> 00:31:05.740
And there's a web server and there's a scheduler.

00:31:05.740 --> 00:31:08.200
So maybe tell us about that.

00:31:08.200 --> 00:31:08.880
Whoever wants to take it.

00:31:08.880 --> 00:31:09.700
Yes, I'll take it.

00:31:09.700 --> 00:31:14.440
So Airflow is pretty complex in setup because it has multiple components.

00:31:14.440 --> 00:31:17.480
Depending on the setup, you can talk to a Kubernetes cluster.

00:31:17.480 --> 00:31:19.220
It can execute the workflow there.

00:31:19.300 --> 00:31:25.820
Or you can have a salary queue system processing your tasks and executing them on distributed workers.

00:31:25.820 --> 00:31:30.720
Because the scalability part, which was one of those features of Airflow.

00:31:30.720 --> 00:31:36.560
So you can have multiple workers, multiple machines, even several hundreds of them if you want.

00:31:36.560 --> 00:31:40.160
And Airflow can be installed using all those capacity.

00:31:40.600 --> 00:31:44.260
So we have salary workers, we have Kubernetes workers, we have scheduler, we have web server.

00:31:44.260 --> 00:31:49.040
And putting it together is not as simple as you would think.

00:31:49.040 --> 00:31:51.460
Or actually, you can think that it's complex.

00:31:51.460 --> 00:31:51.980
And it is.

00:31:51.980 --> 00:32:00.280
However, we've made, like recently especially, we've put a lot of effort to make the kind of very simple way of installing Airflow.

00:32:00.540 --> 00:32:02.900
Like, you know, like you just install it and it works.

00:32:02.900 --> 00:32:12.660
And also, if you want to scale it to like a very complex one, you can also turn on all the knobs, put as many components you want in a way that fits you best.

00:32:12.660 --> 00:32:17.000
So coming back a little bit to this installation, we have a Docker image.

00:32:17.000 --> 00:32:19.780
So that's something I also worked for quite some time.

00:32:19.780 --> 00:32:24.280
Together with Caxil and the other maintainers, we iterated and perfected it.

00:32:24.280 --> 00:32:37.980
So we have a very nice Docker image that can be used to both run Airflow as it is or build your own custom image, which contains all the new dependencies you want or all the special packages that you want to install, which are needed for you.

00:32:37.980 --> 00:32:42.160
And then from that, we have Docker Compose, which is kind of a quick start.

00:32:42.160 --> 00:32:46.780
So you can just, and this is this running Airflow in Docker, this part there.

00:32:46.780 --> 00:32:52.300
When you run in Docker, does, say, the web server run in one container and the scheduler in another or something like that?

00:32:52.300 --> 00:32:54.260
That's exactly what this Docker quick start.

00:32:54.260 --> 00:32:55.140
It's orchestrated, yeah.

00:32:55.140 --> 00:32:55.460
Okay.

00:32:55.460 --> 00:32:55.880
Yes.

00:32:55.880 --> 00:32:57.360
But it's super easy.

00:32:57.360 --> 00:32:59.200
It's a really quick start.

00:32:59.200 --> 00:33:01.480
You just download the Docker Compose file.

00:33:01.480 --> 00:33:02.980
You just run two commands.

00:33:02.980 --> 00:33:06.200
If you go a little bit down, then there's like a few commands to run.

00:33:06.200 --> 00:33:07.580
And then off you go.

00:33:07.580 --> 00:33:12.740
You have all these components talking together to each other and processing the DAGs.

00:33:12.740 --> 00:33:14.560
And you can start playing with that.

00:33:14.560 --> 00:33:16.980
It's not production ready, the Docker one.

00:33:16.980 --> 00:33:18.980
But then there is the next step.

00:33:18.980 --> 00:33:21.640
So you have a local installation.

00:33:21.640 --> 00:33:22.740
It gives you Docker Compose.

00:33:22.880 --> 00:33:26.660
And then I will transfer it to Kaxi because he was working mostly on that.

00:33:26.660 --> 00:33:26.880
Yeah.

00:33:26.880 --> 00:33:29.620
So we also have the Helm chart that we did.

00:33:29.620 --> 00:33:32.940
The first version of Helm chart we released in March of this year.

00:33:32.940 --> 00:33:35.700
So that's what we recommend for production uses.

00:33:35.700 --> 00:33:38.140
That uses the official Docker image.

00:33:38.140 --> 00:33:41.960
So we release like a lot of artifacts for Airflow.

00:33:41.960 --> 00:33:43.980
And again, the documentation for Helm chart.

00:33:43.980 --> 00:33:50.900
If you click on documentation again at the top and scroll all the way down, you will see a separate documentation for the Helm chart.

00:33:50.900 --> 00:33:51.500
All right.

00:33:51.500 --> 00:33:52.500
So go to Helm chart.

00:33:52.500 --> 00:33:52.720
Yeah.

00:33:52.720 --> 00:33:52.920
Okay.

00:33:52.920 --> 00:33:53.340
Got it.

00:33:53.740 --> 00:34:02.260
We have versioned all this documentation separately because they are different artifacts and all of them have different release cadence and are released separately.

00:34:02.480 --> 00:34:09.600
And Helm chart is what we recommend for users because it comes with all the configurations that we have tested it in production environments.

00:34:09.600 --> 00:34:16.160
Astronomer donated the Helm chart last year and we traded on it a lot of time before we released it.

00:34:16.160 --> 00:34:20.700
We also, me and Jarek, had a presentation in a recently concluded Airflow Summit.

00:34:20.820 --> 00:34:26.860
So if users are interested in it, we can probably drop a link at the end of this session, I guess.

00:34:26.860 --> 00:34:27.140
Yeah.

00:34:27.140 --> 00:34:28.760
You all just had the Airflow Summit, right?

00:34:28.760 --> 00:34:29.180
Yes.

00:34:29.180 --> 00:34:29.880
Yeah.

00:34:29.880 --> 00:34:32.040
Oh, I have a lot to say about this.

00:34:32.040 --> 00:34:32.400
All right.

00:34:32.400 --> 00:34:33.380
Well, tell us.

00:34:33.380 --> 00:34:38.320
Community is definitely where the majority of my contributions to Airflow come in.

00:34:38.320 --> 00:34:41.620
So this is our second ever Airflow Summit.

00:34:41.620 --> 00:34:45.840
So far, it's been an annual thing, but I'm always nervous to say annual.

00:34:45.840 --> 00:34:49.020
We can't, I don't want to make promises, but it's looking good.

00:34:49.020 --> 00:34:49.940
Like we'll have it again.

00:34:50.080 --> 00:34:52.320
So we had our first summit in 2020.

00:34:52.320 --> 00:34:59.740
We had originally planned to have it be this 500 person in-person event and it's going to be in Mountain View.

00:34:59.740 --> 00:35:04.400
That's how I got involved because we were looking to host it at the Computer History Museum.

00:35:04.400 --> 00:35:06.780
And I said, oh, that's really close to where I work.

00:35:06.780 --> 00:35:09.740
I can like be your liaison to the location.

00:35:09.740 --> 00:35:12.760
And then, you know, there's a whole pandemic and everything.

00:35:12.760 --> 00:35:17.900
And we ended up pivoting to a totally virtual event and it was a great success.

00:35:18.100 --> 00:35:20.880
We did it in partnership with Software Guru.

00:35:20.880 --> 00:35:23.180
They helped us run the summit last year.

00:35:23.180 --> 00:35:28.180
And we felt that it was such a good success that we did it again this year.

00:35:28.180 --> 00:35:30.840
And it just finished up in July.

00:35:30.840 --> 00:35:37.100
We had 10,000, I think more than 10,000 at this point, registered attendees from all over the world.

00:35:37.340 --> 00:35:39.460
That's really good for an online conference.

00:35:39.460 --> 00:35:41.320
And for only the second edition too.

00:35:41.320 --> 00:35:42.360
We're pretty proud.

00:35:42.360 --> 00:35:42.700
Yeah.

00:35:42.700 --> 00:35:45.980
And we had it live streamed in a bunch of different time zones.

00:35:45.980 --> 00:35:47.640
So sometimes it was more Americas friendly.

00:35:47.640 --> 00:35:49.120
Sometimes it was more EMEA friendly.

00:35:49.120 --> 00:35:51.060
Sometimes it was more APAC friendly.

00:35:51.420 --> 00:35:53.640
And we had all variations of talks.

00:35:53.640 --> 00:35:57.400
We had ones that were customer use cases.

00:35:57.400 --> 00:36:06.120
So people who are running Airflow in production or running one of the hosted managed versions of Airflow and what they're using it for.

00:36:06.120 --> 00:36:15.200
We had people who are contributors talking about their first time contribution experience and why you shouldn't be scared to contribute to Airflow because we're really nice.

00:36:15.260 --> 00:36:27.440
I promise we are, or at least we try to be, but, and we had more experienced contributors like Yarg and Kaxal talk about some of the more complex things that they've been working on over the past year and everything in between.

00:36:27.440 --> 00:36:32.680
And there are so many talks and you have the summit page up right now.

00:36:32.680 --> 00:36:40.660
Actually, all of the recordings and slides for those presentations that had slides available are up there for you to watch.

00:36:40.740 --> 00:36:45.600
If you go to airflowsummit.org, there's many, many, many hours of content.

00:36:45.600 --> 00:36:50.780
I highly encourage you to watch whatever sounds interesting for you.

00:36:50.780 --> 00:36:51.240
Yeah.

00:36:51.240 --> 00:36:52.380
I think this is great.

00:36:52.380 --> 00:36:55.480
Like I said, congratulations on having 10,000 registered.

00:36:55.480 --> 00:36:55.960
Thank you.

00:36:55.960 --> 00:36:56.680
Yeah.

00:36:56.680 --> 00:36:57.480
That's pretty amazing.

00:36:57.480 --> 00:37:03.140
I think there's obviously a big group of people who know that this is like the right tool.

00:37:03.140 --> 00:37:05.960
I think there's a lot of people who necessarily don't know for sure.

00:37:05.960 --> 00:37:11.740
Like for example, there's on the Airflow GitHub page, it's 23,000 stars.

00:37:11.740 --> 00:37:12.540
That's big time.

00:37:12.540 --> 00:37:12.780
Yeah.

00:37:12.780 --> 00:37:14.820
Jango and Flask are 50, 50 K.

00:37:14.820 --> 00:37:19.440
So, I mean, that's, that's a lot of people using this and interested in this and so on.

00:37:19.440 --> 00:37:23.060
I think that the best part about Airflow is the community.

00:37:23.060 --> 00:37:27.940
And that's like why we have those stars, but also like why we had such a summit.

00:37:27.940 --> 00:37:29.480
And Kaxal, you were going to say something.

00:37:29.740 --> 00:37:30.180
Yeah.

00:37:30.180 --> 00:37:35.480
I was just going to say that if you go by the PyPy stats, we have like 3 million downloads

00:37:35.480 --> 00:37:38.100
a month or something like that, which is insane.

00:37:38.100 --> 00:37:43.700
I know a good number of those come from CI and automated processes, but hey, all the other

00:37:43.700 --> 00:37:45.340
packages also have the same thing.

00:37:45.340 --> 00:37:47.900
So you can at least compare them between packages.

00:37:47.900 --> 00:37:48.240
Yeah.

00:37:48.240 --> 00:37:49.840
It's a relative statement at least, right?

00:37:49.840 --> 00:37:50.360
Exactly.

00:37:51.520 --> 00:37:56.840
And likely I mentioned like the biggest part about or biggest greatest thing about Airflow

00:37:56.840 --> 00:37:57.800
is its community.

00:37:57.800 --> 00:38:04.080
If you check the new contributors, I think we are to more than 1600 contributors to the Airflow

00:38:04.080 --> 00:38:05.860
project, which is great.

00:38:05.860 --> 00:38:11.120
And every day we at least get a few new contributors trying to contribute to the project with whatever

00:38:11.120 --> 00:38:12.600
they can and they must.

00:38:12.600 --> 00:38:17.480
And I, again, through your medium, I would encourage people to go to Airflow website.

00:38:17.480 --> 00:38:20.680
If you find anything, contribute it, fix it.

00:38:20.680 --> 00:38:25.180
If you have some ideas about hooks, operators, anything, contribute it.

00:38:25.180 --> 00:38:27.040
And we are there to help you.

00:38:27.040 --> 00:38:32.980
Not only three of us, there are more than 30, 40 committers and PMC members, and there are

00:38:32.980 --> 00:38:35.300
users helping users in the Airflow Slack channel.

00:38:35.300 --> 00:38:40.480
We have more than 16,000, 17,000 members in the Airflow Slack workspace as well.

00:38:40.480 --> 00:38:40.860
Wow.

00:38:40.860 --> 00:38:41.580
That's cool.

00:38:41.580 --> 00:38:46.400
So I actually want to give a quick plug for an Airflow Summit talk I gave this year that

00:38:46.400 --> 00:38:48.300
was authored by me and a colleague.

00:38:48.300 --> 00:38:51.660
It's called You Don't Have to Wait for Someone to Fix It for You.

00:38:51.660 --> 00:38:56.820
And it is about the kinds of contributions that you can make to Airflow because there's all

00:38:56.820 --> 00:38:58.200
those things that Coxell mentioned.

00:38:58.200 --> 00:39:05.040
But my personal opinion is that one of the best and easiest ways to contribute to Airflow or

00:39:05.040 --> 00:39:10.660
any open source project really is to find something that is driving you nuts and to fix it.

00:39:10.900 --> 00:39:16.940
Or at least to articulate really well what's driving you nuts and what needs to change.

00:39:16.940 --> 00:39:21.800
Because a really good issue can be just as good of a contribution as a PR.

00:39:21.800 --> 00:39:28.080
Because you may have just made the foundation for someone else to write a fabulous PR with a really

00:39:28.080 --> 00:39:28.980
detailed issue.

00:39:29.260 --> 00:39:34.440
And let me add to that as well because the community is definitely the thing that I love

00:39:34.440 --> 00:39:35.780
most about Airflow.

00:39:35.780 --> 00:39:38.020
The people are fantastic here.

00:39:38.020 --> 00:39:45.320
And we are, all of us, all the committers, we are so much into making, like inviting people

00:39:45.320 --> 00:39:50.700
to come and to join us or to give back for whatever they got from Airflow.

00:39:50.700 --> 00:39:51.800
Like it's a free software.

00:39:51.800 --> 00:39:53.160
Anyone can use it for free.

00:39:53.600 --> 00:39:55.620
Giving back is just super nice.

00:39:55.620 --> 00:39:58.600
But we don't stop talking, only talking about them.

00:39:58.600 --> 00:40:03.360
Because if you see, if you see, scroll down a little bit above, you would see that we also

00:40:03.360 --> 00:40:07.660
run a workshop during the Airflow Summit.

00:40:07.660 --> 00:40:10.680
And this workshop is about contributing to Apache Airflow.

00:40:10.680 --> 00:40:16.920
This year we had like 20 attendees coming and learning in three hours how to make your first

00:40:16.920 --> 00:40:23.300
PR, how to communicate, how to be present in the community, how to make the most of it,

00:40:23.300 --> 00:40:26.940
how to be super helpful to others as well.

00:40:26.940 --> 00:40:32.620
And then we were just, it was like part of it was about coding, but all the rest was all

00:40:32.620 --> 00:40:37.920
about communication, about speaking to people, about being able to express yourself and all

00:40:37.920 --> 00:40:38.900
the stuff that you just needed.

00:40:38.900 --> 00:40:40.580
And it is super important.

00:40:40.580 --> 00:40:42.820
Who should I ask about this and things like that?

00:40:42.820 --> 00:40:44.620
I know exactly who you should ask.

00:40:44.620 --> 00:40:49.100
So actually one of our, one of my favorite stories about this year's Airflow Summit is we

00:40:49.100 --> 00:40:50.740
had a speaker, I forget her last name.

00:40:50.800 --> 00:40:54.980
Her first name is Tatiana and she's like a principal data engineer at the BBC.

00:40:54.980 --> 00:40:57.960
And she went to the workshop last year.

00:40:57.960 --> 00:41:00.380
And this year she was a speaker at the summit.

00:41:00.380 --> 00:41:06.220
And her talk about how to basically like kind of debug when crazy stuff is going wrong in Airflow

00:41:06.220 --> 00:41:07.580
was fabulous.

00:41:08.100 --> 00:41:08.780
Oh, super.

00:41:08.780 --> 00:41:09.180
Okay.

00:41:09.180 --> 00:41:09.540
Yeah.

00:41:09.540 --> 00:41:12.960
And you can, that's, people can live stream that off the sessions.

00:41:12.960 --> 00:41:13.720
That's really cool.

00:41:13.720 --> 00:41:14.180
Yeah.

00:41:14.180 --> 00:41:15.780
Doing in Airflow, Airflow obstructions.

00:41:15.780 --> 00:41:16.760
Awesome.

00:41:16.760 --> 00:41:19.240
So that is an example of that workshop working.

00:41:19.240 --> 00:41:19.800
Yeah.

00:41:19.800 --> 00:41:20.200
Yeah.

00:41:20.200 --> 00:41:20.700
Very cool.

00:41:20.820 --> 00:41:20.980
Yeah.

00:41:20.980 --> 00:41:23.900
I was just saying Airflow Summit is also one of a kind conference.

00:41:23.900 --> 00:41:30.500
It's not like the normal conferences, mainly because we had the local meetup groups hosting

00:41:30.500 --> 00:41:31.980
that day of the event.

00:41:31.980 --> 00:41:33.960
So we had like the London meetup group.

00:41:33.960 --> 00:41:37.560
We had the Bangalore meetup group, Melbourne, Warsaw meetup group.

00:41:37.560 --> 00:41:40.600
And every, though we were bringing the community together.

00:41:40.820 --> 00:41:45.520
So let's say the first day was hosted by the London meetup group, which was me, Ash and

00:41:45.520 --> 00:41:46.240
other folks.

00:41:46.240 --> 00:41:49.640
We were hosting that event for just for the Monday slot.

00:41:49.640 --> 00:41:54.660
And then on the Tuesday, there were other PMC members, other community members from Japan

00:41:54.660 --> 00:41:57.500
hosting that, some from Melbourne hosting that.

00:41:57.500 --> 00:41:58.900
Similarly, those were the slots.

00:41:58.900 --> 00:42:04.820
And someday even we had like some sort of overlap because we were trying to cover the

00:42:04.820 --> 00:42:10.300
Pacific time zone and the Asian time zones, which was incredible because now you have tons

00:42:10.300 --> 00:42:12.820
of content for the Airflow users to watch out.

00:42:12.820 --> 00:42:15.100
Also, we had two community days.

00:42:15.100 --> 00:42:16.660
We started from Thursdays.

00:42:16.660 --> 00:42:22.880
So we had Thursday, all the talks about community, how you could make the contributions and stuff

00:42:22.880 --> 00:42:23.360
like that.

00:42:23.360 --> 00:42:24.740
Friday, we had that workshop.

00:42:24.740 --> 00:42:30.680
And then from Monday to Friday, there were more about the Airflow use cases and why Airflow

00:42:30.680 --> 00:42:36.660
2.0 was the big milestone for the project and what we are planning ahead for Airflow and

00:42:36.660 --> 00:42:37.440
stuff like that.

00:42:37.440 --> 00:42:38.800
There's a ton of stuff here.

00:42:38.900 --> 00:42:42.980
I think people could watch for the rest of the year and study this and get a lot out

00:42:42.980 --> 00:42:43.180
of it.

00:42:43.180 --> 00:42:43.400
It's true.

00:42:43.400 --> 00:42:44.840
I do think so.

00:42:44.840 --> 00:42:49.220
And we actually even had a networking event there Friday night.

00:42:49.220 --> 00:42:51.180
And that was a blast, actually.

00:42:51.180 --> 00:42:51.740
It was.

00:42:51.740 --> 00:42:55.960
The networking this year was like people learn how to use it online.

00:42:55.960 --> 00:43:00.420
And that was like, well, not maybe as good as physical conferences.

00:43:00.420 --> 00:43:05.520
So I'm looking forward to next year, which hopefully will be going to be partially at least a physical

00:43:05.520 --> 00:43:05.860
event.

00:43:05.860 --> 00:43:07.180
But it was good enough.

00:43:07.180 --> 00:43:12.500
And I think that was really cool to talk to those people about all the different things,

00:43:12.500 --> 00:43:13.280
not only Airflow.

00:43:13.680 --> 00:43:19.840
So we are not only Airflow and not only Python and not only programming, but also people.

00:43:19.840 --> 00:43:20.080
Yeah.

00:43:20.080 --> 00:43:25.680
I feel like this is a project that would be easy to contribute to in the sense that if

00:43:25.680 --> 00:43:30.620
I'm going to say contribute as a newcomer to Django, that's going to be hard because that's a highly

00:43:30.620 --> 00:43:32.900
polished single piece of software.

00:43:32.900 --> 00:43:37.100
And if you're going to make a change that affects millions of people and it's not easy.

00:43:37.180 --> 00:43:41.740
Whereas here, if you want to add some kind of integration and it didn't exist before, you're

00:43:41.740 --> 00:43:43.060
not going to break anybody's code.

00:43:43.060 --> 00:43:44.920
You don't want to work with a bunch of legacy code.

00:43:44.920 --> 00:43:49.600
There's a bunch of sort of broad but shallow places people could jump in and participate.

00:43:49.600 --> 00:43:54.400
Well, and if people, if a newcomer does want to come in and like really jump into the deep

00:43:54.400 --> 00:44:00.540
end, we do have this concept called AIP, which stands for Airflow Improvement Proposal.

00:44:00.540 --> 00:44:06.000
And it kind of sets you up to not run into heartbreak if you open this, what you think is an

00:44:06.000 --> 00:44:08.360
amazing PR and we're like, oh, no, no, no.

00:44:08.360 --> 00:44:08.840
Hold on.

00:44:08.840 --> 00:44:09.860
We're not ready for that.

00:44:09.860 --> 00:44:13.600
Because it's almost like writing the outline before you write your essay.

00:44:13.600 --> 00:44:18.400
I know it sounds kind of dry, but what it really is, is it's an opportunity to fully flesh out

00:44:18.400 --> 00:44:23.580
this amazing idea you have and share it with the community and the community will give you

00:44:23.580 --> 00:44:28.260
feedback and they will be productive about it because if they're not, they're not abiding

00:44:28.260 --> 00:44:30.180
by community code of conduct.

00:44:30.180 --> 00:44:30.660
Yeah.

00:44:30.660 --> 00:44:32.820
I find it very unfortunate.

00:44:33.020 --> 00:44:37.260
I feel really bad if people come and do a PR to some project that I have.

00:44:37.260 --> 00:44:39.360
And granted, these are all very small open source projects.

00:44:39.360 --> 00:44:43.400
But if they come and they actually do the work and the first I know about it is, boom, here's

00:44:43.400 --> 00:44:43.860
a PR.

00:44:43.860 --> 00:44:44.480
Yeah.

00:44:44.480 --> 00:44:49.300
That's just not in the same zen of what I'm trying to accomplish with this.

00:44:49.300 --> 00:44:51.680
And it's going to break the thing that makes it special.

00:44:51.680 --> 00:44:52.640
It's a bummer.

00:44:52.640 --> 00:44:53.600
So I have to reject it, right?

00:44:53.600 --> 00:44:54.380
But you don't want to.

00:44:54.380 --> 00:44:54.560
Yeah.

00:44:54.560 --> 00:44:56.520
It'd be much better to say, I have this idea.

00:44:56.520 --> 00:44:58.120
If I built this, would you want it?

00:44:58.120 --> 00:44:59.460
You know, do you want the puppy?

00:44:59.560 --> 00:45:00.780
Here's a puppy for Christmas.

00:45:00.780 --> 00:45:02.020
Yes, exactly.

00:45:02.020 --> 00:45:07.380
This is precisely what we are teaching people at those workshops because it's not obvious.

00:45:07.380 --> 00:45:09.440
If you come from outside, you don't understand that.

00:45:09.440 --> 00:45:15.320
We are not only teaching people about contributing the code, but also how to find yourself there,

00:45:15.320 --> 00:45:20.380
like how to be empathetic, how to think about, put yourself in our shoes.

00:45:20.380 --> 00:45:25.360
And on the other hand, how to tell what he wants to tell in the way that we will understand

00:45:25.360 --> 00:45:25.760
it.

00:45:25.760 --> 00:45:29.840
Because it's sometimes really different worlds, different people, different backgrounds, different

00:45:29.840 --> 00:45:31.020
expectations and assumptions.

00:45:31.020 --> 00:45:34.960
So all this is the communication is that I'm a software engineer.

00:45:34.960 --> 00:45:40.460
I love to do software engineering, but like 30, 40, 50% of my time is communication.

00:45:40.460 --> 00:45:42.540
It's not actually coding.

00:45:42.540 --> 00:45:44.200
And this is cool.

00:45:44.200 --> 00:45:49.480
I related to this, I actually want to call out a really important Apache value that I

00:45:49.480 --> 00:45:55.560
think that Airflow embodies, which is the concept of the importance of community over code.

00:45:55.560 --> 00:45:59.580
And I really feel that the Airflow project lives that value.

00:45:59.580 --> 00:46:05.660
And folks in the community really are trying to foster a positive community because they

00:46:05.660 --> 00:46:11.920
understand that if the Airflow community is not healthy, then the Airflow code will not

00:46:11.920 --> 00:46:12.800
live on.

00:46:12.800 --> 00:46:13.740
It doesn't matter.

00:46:13.740 --> 00:46:15.100
Yeah, it doesn't matter.

00:46:15.100 --> 00:46:21.100
And if folks have questions about that, I do want to acknowledge that I am the one woman

00:46:21.100 --> 00:46:21.800
in the room.

00:46:21.800 --> 00:46:26.260
I am often the one woman in the room when it comes to Airflow.

00:46:26.260 --> 00:46:32.200
And I would love to see that change and have more gender diverse folks come join.

00:46:32.200 --> 00:46:38.060
And so if you are someone who identifies with that and wants to hear Leah's unfiltered views

00:46:38.060 --> 00:46:42.660
on the community, feel free to reach out to me in the Airflow Slack or on my Twitter.

00:46:42.660 --> 00:46:46.320
And like I said, I do think this is a project that if you want to get into open source, it's

00:46:46.320 --> 00:46:49.560
one that has relatively low barriers, technically speaking.

00:46:49.560 --> 00:46:49.920
Yes.

00:46:49.920 --> 00:46:50.700
Oh, yeah.

00:46:50.700 --> 00:46:54.700
The keynote talk I gave in the Airflow Summit on Thursday, the first talk.

00:46:54.700 --> 00:47:00.900
So if you go to the Airflow Summit page, the first talk, then I talk about my journey as

00:47:00.900 --> 00:47:01.020
well.

00:47:01.020 --> 00:47:05.240
Because I was very afraid of contributing to open source because it feels intimidating at

00:47:05.240 --> 00:47:08.120
first on everything will be public.

00:47:08.120 --> 00:47:10.740
Oh, who knows if I screw something up?

00:47:10.740 --> 00:47:12.200
What would people say?

00:47:12.200 --> 00:47:14.460
On my permanent record.

00:47:14.460 --> 00:47:15.340
Yeah.

00:47:15.340 --> 00:47:20.240
And I didn't know Python or didn't know it proficiently.

00:47:20.240 --> 00:47:22.980
So I talk about my journey of how I did it.

00:47:22.980 --> 00:47:28.120
I talk about 10 minutes about that and then how a new user can start contributing to the

00:47:28.120 --> 00:47:28.640
project.

00:47:28.640 --> 00:47:32.120
Because Airflow is a relatively still a larger code base.

00:47:32.120 --> 00:47:35.980
And there are a lot of areas that people can target because if you try to learn everything

00:47:35.980 --> 00:47:37.900
at once, it is going to be very difficult.

00:47:37.900 --> 00:47:39.520
We have Helm charts.

00:47:39.520 --> 00:47:40.420
We have Docker images.

00:47:40.420 --> 00:47:43.020
We have scheduler, which is code to Airflow.

00:47:43.020 --> 00:47:44.020
We have executors.

00:47:44.020 --> 00:47:48.280
We have the CLI, REST API, and a lot of things like that.

00:47:48.280 --> 00:47:52.240
So there are a lot of room for people to get expertise in a certain area.

00:47:52.240 --> 00:47:56.480
And then if you start including all the integrations, then it's a whole piece, right?

00:47:56.480 --> 00:48:01.600
You can just add your own integration and be an expert at that and become a contributor,

00:48:01.780 --> 00:48:04.540
a PMC member just with that contributions.

00:48:04.540 --> 00:48:09.420
Well, and in the interest of empathy, I would like to share that I do not know all of these

00:48:09.420 --> 00:48:09.860
parts.

00:48:09.860 --> 00:48:13.240
I think the part I'm most familiar with is the Google provider.

00:48:13.240 --> 00:48:17.400
And I have never touched the Helm chart and it scares me because I haven't taken the time

00:48:17.400 --> 00:48:18.640
to learn what it's all about.

00:48:18.640 --> 00:48:23.680
But the good news is that other community members know and I know that I can look to them for

00:48:23.680 --> 00:48:26.240
help when I do need to mess around with it.

00:48:26.240 --> 00:48:27.120
Yeah, that's fantastic.

00:48:27.120 --> 00:48:28.780
That's the beauty of the project, right?

00:48:28.780 --> 00:48:32.020
If everyone knows everything, then why are we all here?

00:48:32.020 --> 00:48:36.020
Each one of us knows their part, then that's the community.

00:48:36.020 --> 00:48:37.700
Otherwise, it's not a community project.

00:48:37.700 --> 00:48:38.060
Yeah.

00:48:38.060 --> 00:48:38.380
Yeah.

00:48:38.380 --> 00:48:38.700
Yes.

00:48:38.700 --> 00:48:39.960
We're getting short on time.

00:48:39.960 --> 00:48:43.460
I do want to touch on a couple of things that I think we haven't got a chance to touch

00:48:43.460 --> 00:48:44.820
on that are really important.

00:48:45.300 --> 00:48:51.260
One, let's talk about the user interface because one of the ways you all position to this is

00:48:51.260 --> 00:48:55.980
you don't want to do this all with just cron jobs and like sort of little scripts that are

00:48:55.980 --> 00:48:58.960
put together and run on weird random triggers.

00:48:58.960 --> 00:49:03.980
And one of the real big benefits is you have this really beautiful UI for all sorts of visualization

00:49:03.980 --> 00:49:06.900
of like running workflows and all kinds of stuff, right?

00:49:06.900 --> 00:49:08.140
You want to tell us about that?

00:49:08.140 --> 00:49:12.640
I'll do the simple version because I think that Kaxel and Yarek know more about it than me,

00:49:12.640 --> 00:49:15.060
but I'll tell you the two things I'm most excited about.

00:49:15.060 --> 00:49:18.520
One of them is that it just got a huge makeover with Airflow 2.

00:49:18.520 --> 00:49:21.620
So if you're an Airflow user and you haven't upgraded to Airflow 2,

00:49:21.620 --> 00:49:28.340
if you need one reason alone, it is that the UI is so much prettier and it is much more responsive.

00:49:28.340 --> 00:49:35.220
And as a former cron user, I'll say that the best, easiest benefit you get from this

00:49:35.220 --> 00:49:36.660
is you can just see what's failing.

00:49:36.660 --> 00:49:39.640
If you don't have to dig around and try to figure out what's missing,

00:49:39.640 --> 00:49:41.560
like you know that something went wrong.

00:49:41.900 --> 00:49:44.320
All right, Yarek and Kaxel, that's my, I'm off my soapbox now.

00:49:44.320 --> 00:49:48.180
Yeah, basically you have all the information you need, all the historical view in front of you.

00:49:48.180 --> 00:49:52.420
Like if you want to see which task failed historically, you could just check the tree view.

00:49:52.420 --> 00:49:55.940
And then this is the graph view where you can see how your task is proceeding.

00:49:55.940 --> 00:49:59.480
Plus we now have auto refresh, like Leah mentioned from 2.0,

00:49:59.480 --> 00:50:01.780
which is like you don't need to press the refresh button,

00:50:01.780 --> 00:50:05.780
which was a bit annoying for the Airflow 1.10X version, which is very good.

00:50:05.780 --> 00:50:06.820
Your task will continue.

00:50:06.820 --> 00:50:10.380
You can see the progress that the Airflow is continuing this task.

00:50:10.380 --> 00:50:14.000
If you click on that task, it will show you the logs of that task.

00:50:14.000 --> 00:50:18.120
So everything is very intuitive and easy to monitor.

00:50:18.760 --> 00:50:21.660
For people who are listening and are not watching the live stream,

00:50:21.660 --> 00:50:27.400
you can go and for example, in the graph, it'll show you all your tasks that you would do,

00:50:27.400 --> 00:50:30.240
like download this file or run this bash script or whatever.

00:50:30.240 --> 00:50:32.340
And then it actually shows you how they're working together.

00:50:32.340 --> 00:50:36.980
And then they're colored as you progress through this DAG of tasks, right?

00:50:36.980 --> 00:50:39.520
So you can actually visually see, was this one skipped?

00:50:39.520 --> 00:50:40.840
Was this one successful?

00:50:40.840 --> 00:50:41.680
Which one failed?

00:50:41.780 --> 00:50:43.720
How far are you visually as a graph?

00:50:43.720 --> 00:50:44.620
Which I think is awesome.

00:50:44.620 --> 00:50:44.900
Yeah.

00:50:44.900 --> 00:50:48.320
And one of the interesting thing over there is to understand the dependencies,

00:50:48.320 --> 00:50:51.700
which was very interesting when I initially started with Airflow,

00:50:51.700 --> 00:50:56.820
that for a user or for a company to understand what all the tasks they are working on

00:50:56.820 --> 00:51:00.320
and in a single flow, how does that dependency graph work on?

00:51:00.320 --> 00:51:04.900
If you're depending on a data from a single client, how does that go to a dashboard?

00:51:04.900 --> 00:51:08.760
So that end-to-end view, like it's an actual pipeline of sorts that you can see.

00:51:09.140 --> 00:51:14.700
Yes. And just to add on that, so the visualization of the data flow is like super important

00:51:14.700 --> 00:51:17.820
because then you can, with a glance, you can see what's going on

00:51:17.820 --> 00:51:22.160
and you can go to any part of it and focus on that and understand what's going on.

00:51:22.160 --> 00:51:25.580
However, I will come back to kind of the roots

00:51:25.580 --> 00:51:33.020
because Airflow doesn't have a way by default to define those flows visually.

00:51:33.020 --> 00:51:37.280
You can see them visually, but they are all defined as Python code.

00:51:37.280 --> 00:51:38.620
And this is like the beauty of it.

00:51:38.720 --> 00:51:40.780
And that was a very, very deliberate choice.

00:51:40.780 --> 00:51:44.660
And this is the reason why we are at the Python talks today,

00:51:44.660 --> 00:51:46.980
because Airflow is all about Python.

00:51:46.980 --> 00:51:53.640
So this visualization that you see here are really reflection of the code that you wrote as a writer.

00:51:53.640 --> 00:51:57.800
And it means also that the common language between people using Airflow,

00:51:57.800 --> 00:51:59.520
different parts of it, is Python.

00:51:59.520 --> 00:52:01.440
This is the common language that we're using.

00:52:01.440 --> 00:52:03.780
And this makes it so powerful.

00:52:03.780 --> 00:52:07.220
And the visual part is pretty much an addition.

00:52:07.220 --> 00:52:08.220
And it's necessary.

00:52:08.220 --> 00:52:12.160
And it's more kind of result of the Python code which is being written.

00:52:12.160 --> 00:52:14.500
A lot of workflow systems try to go in reverse, right?

00:52:14.500 --> 00:52:17.840
They're like, here's your draggy, droppy set of tasks and options.

00:52:17.840 --> 00:52:18.840
You drag it all together.

00:52:18.840 --> 00:52:19.900
Then you press go.

00:52:19.900 --> 00:52:20.300
Yes.

00:52:20.300 --> 00:52:22.520
This lets you live at the code level.

00:52:22.520 --> 00:52:27.260
This all breaks at the very moment when you want to have some custom work.

00:52:27.260 --> 00:52:31.220
Because if you are used to the drag and dropping, you will not do coding.

00:52:31.220 --> 00:52:35.360
You will not code the kind of customization that you want to do.

00:52:35.360 --> 00:52:37.020
You will ask someone else to do that.

00:52:37.300 --> 00:52:38.860
In Airflow, this is quite reverse.

00:52:38.860 --> 00:52:40.020
I mean, everything is Python.

00:52:40.020 --> 00:52:40.720
Everything.

00:52:40.720 --> 00:52:42.540
Dependencies are Python.

00:52:42.540 --> 00:52:44.300
The code itself is Python.

00:52:44.300 --> 00:52:45.420
The blocks are Python.

00:52:45.420 --> 00:52:46.940
But you can also write your own.

00:52:46.940 --> 00:52:51.360
In the same place where you define your DAG, you can write your own custom operator

00:52:51.360 --> 00:52:55.580
without having to use a black box operator of sorts.

00:52:55.580 --> 00:53:00.300
And you don't have to leave the box of working on Python while doing that.

00:53:00.300 --> 00:53:02.000
And this is so powerful.

00:53:02.000 --> 00:53:07.300
I think this is the way why it is so popular between data engineers all over the world.

00:53:07.300 --> 00:53:12.700
I think this is like one of the most popular workflow orchestration engine in the world right now.

00:53:12.700 --> 00:53:13.280
That's it.

00:53:13.280 --> 00:53:14.760
I don't have hard data on that.

00:53:14.760 --> 00:53:16.180
So it's just a feeling.

00:53:16.180 --> 00:53:18.040
But I think that's the case.

00:53:18.040 --> 00:53:21.460
I mean, we did have 10,000 people at the summit, Jarek.

00:53:21.460 --> 00:53:22.080
Yes.

00:53:22.080 --> 00:53:23.460
Yeah, for sure.

00:53:23.460 --> 00:53:28.240
And while it is written in Python, you can use the bash operator to run like your Java code,

00:53:28.240 --> 00:53:30.720
for example, or Scala or whatever.

00:53:30.720 --> 00:53:36.340
So while everything is in Python, you can use it to run any other languages too.

00:53:36.340 --> 00:53:38.540
You can run Docker image, Kubernetes task.

00:53:38.540 --> 00:53:42.020
Because a lot of those workflows are also, okay, we have Kubernetes.

00:53:42.020 --> 00:53:44.180
So we run everything in Kubernetes.

00:53:44.180 --> 00:53:45.800
We run them as Docker containers.

00:53:45.800 --> 00:53:48.200
And that's the only way you can do that.

00:53:48.200 --> 00:53:49.440
Airflow can do that as well.

00:53:49.440 --> 00:53:50.460
No problem whatsoever.

00:53:50.460 --> 00:53:52.160
There is Kubernetes pod operator.

00:53:52.300 --> 00:53:55.680
You can spin off a new Kubernetes pod to run your task.

00:53:55.680 --> 00:54:07.120
But you can also have a Python code, which is very easy to put together and play with and run locally without all the overhead of building the Docker images and making them available to run you as a task.

00:54:07.120 --> 00:54:10.600
So, so much more extensible and powerful.

00:54:11.100 --> 00:54:12.600
Yeah, that's a very good point.

00:54:12.600 --> 00:54:15.540
There's a lot of escape hatches to bring in other technologies.

00:54:15.540 --> 00:54:15.920
That's cool.

00:54:15.920 --> 00:54:16.140
Yeah.

00:54:16.140 --> 00:54:21.300
Let me give people just a super quick sense of what it's like to write code for this, this Python code.

00:54:21.300 --> 00:54:25.960
So you would say with DAG, with directed acyclic graph, and you give it some details.

00:54:26.240 --> 00:54:34.540
And then you create these various tasks, like a task might be a bash operator or something like that, or like you said, a Kubernetes pod or whatever.

00:54:34.540 --> 00:54:35.980
And then you just run them.

00:54:35.980 --> 00:54:42.920
One thing I did want to ask you all about, like, what is this T1 double arrows into list of T2, T3 for the tasks?

00:54:42.920 --> 00:54:44.100
Ooh, good question.

00:54:44.100 --> 00:54:49.040
So you had those tasks matched to variables called T1, T2, and T3.

00:54:49.040 --> 00:54:54.720
And this is how that visualization is defined, using those, like the bit shift operators in Python.

00:54:55.220 --> 00:55:01.580
So this one would say that T2 and T3 run after T1, and they run in parallel.

00:55:01.580 --> 00:55:03.720
And there are different ways of setting dependencies.

00:55:03.720 --> 00:55:09.320
If you scroll down or just search for setting up dependencies on the right side of your, on the right side.

00:55:09.320 --> 00:55:10.300
Yeah, setting up dependencies.

00:55:10.300 --> 00:55:11.180
Yeah, there you go.

00:55:11.180 --> 00:55:14.820
There are different ways you can set those dependencies between tasks.

00:55:14.820 --> 00:55:19.000
You could do T1-test-do-do or T1.setupstreet.

00:55:19.000 --> 00:55:20.420
You can, like, right shift.

00:55:20.420 --> 00:55:21.380
You can left shift.

00:55:21.380 --> 00:55:24.340
You can double bit shift as a transitive type thing.

00:55:24.420 --> 00:55:25.080
It's set upstream.

00:55:25.080 --> 00:55:26.400
Okay.

00:55:26.400 --> 00:55:30.920
And the beauty of that, again, is that you can, this is all Python code.

00:55:30.920 --> 00:55:32.260
Those are custom operators.

00:55:32.260 --> 00:55:36.300
The left shift and right shift, they are just custom Python operators over with them.

00:55:36.300 --> 00:55:36.580
Right.

00:55:36.580 --> 00:55:38.700
And you can override them in the task, right?

00:55:38.700 --> 00:55:43.780
Just like pathlib overrides forward slash to mean, like, combine parts of the path, right?

00:55:43.980 --> 00:55:47.740
Wouldn't probably recommend that if you don't know about Airflow that much.

00:55:47.740 --> 00:55:54.680
But the better thing there is that you can actually programmatically build the tasks and build the relationships.

00:55:55.220 --> 00:56:00.920
So this is not something that is predefined in one file in the declarative way, like it's an XML file or JSON.

00:56:00.920 --> 00:56:02.260
This is a Python code.

00:56:02.520 --> 00:56:05.780
So you can pretty much dynamically build the DAG.

00:56:05.780 --> 00:56:07.140
So very complex.

00:56:07.140 --> 00:56:16.780
Like we saw, like, you know, the DAGs, which were like thousands, thousands of nodes built with like 200 lines of code because you could build those tasks.

00:56:16.780 --> 00:56:20.900
You know what, which relationships you want to build in what way, like in for loop.

00:56:20.940 --> 00:56:25.480
It's very hard to have a conditional in a JSON file or a XML file.

00:56:25.480 --> 00:56:25.780
Yeah.

00:56:25.780 --> 00:56:26.740
That's the thing.

00:56:26.740 --> 00:56:27.340
Or loop.

00:56:27.340 --> 00:56:30.240
Actually loop in JSON file is like, no.

00:56:30.240 --> 00:56:32.200
I mean, there is no way to do that.

00:56:32.200 --> 00:56:33.700
I mean, we do have XSLT.

00:56:33.700 --> 00:56:34.520
You could go crazy.

00:56:34.520 --> 00:56:35.000
Come on.

00:56:35.000 --> 00:56:35.960
Yeah.

00:56:35.960 --> 00:56:36.300
Yeah.

00:56:36.300 --> 00:56:37.260
Please no.

00:56:37.260 --> 00:56:48.120
And also from Airflow 2.0, this is an explicit way of setting dependencies, but from Airflow 2 and onwards, there's also an implicit way of having dependencies, which is like,

00:56:48.120 --> 00:56:59.920
if you say that your mesh operator takes an input from another task, then Airflow sets dependencies between them implicitly because you are depending on an output of another task.

00:56:59.920 --> 00:57:00.580
So it knows.

00:57:00.580 --> 00:57:01.020
Yeah.

00:57:01.020 --> 00:57:02.000
That makes a lot of sense.

00:57:02.000 --> 00:57:02.480
Cool.

00:57:02.480 --> 00:57:02.820
All right.

00:57:02.820 --> 00:57:07.200
So I think just two really quick things before we wrap it up.

00:57:07.200 --> 00:57:08.640
We are short on time here.

00:57:08.640 --> 00:57:17.620
One is we talked about the web UI for the stuff we're looking at, but there's also, you will describe a rich command line utility.

00:57:17.620 --> 00:57:20.920
To perform complex surgeries on DAGs.

00:57:20.920 --> 00:57:21.660
Okay.

00:57:21.660 --> 00:57:24.120
Why would you perform a surgery on one of these things?

00:57:24.120 --> 00:57:25.120
And what is this all about?

00:57:25.120 --> 00:57:26.720
Who wants to take that one?

00:57:26.720 --> 00:57:36.000
Oh, I don't know that I've done surgery with the CLI, but I have used the CLI to give me information about my environment to figure out when things are misbeheaving.

00:57:36.000 --> 00:57:36.580
Yeah.

00:57:36.580 --> 00:57:36.880
Okay.

00:57:36.880 --> 00:57:37.420
Cool.

00:57:37.420 --> 00:57:39.240
Like for diagnosis and stuff like that.

00:57:39.240 --> 00:57:39.540
Yeah.

00:57:39.540 --> 00:57:46.100
Like, cause we have, there's one command list DAGs and it also shows you how long the DAGs are taking to load.

00:57:46.100 --> 00:57:49.600
So you can kind of see if one of them is your problem DAG.

00:57:49.600 --> 00:57:54.820
If it's taking way longer to load than the rest, that usually means that I've made a mistake.

00:57:54.820 --> 00:57:55.260
Yeah.

00:57:55.260 --> 00:57:55.440
Yeah.

00:57:55.680 --> 00:57:58.860
That command also gives you the parsing time and everything like that.

00:57:58.860 --> 00:58:04.160
So it will tell you that it took five seconds to parse your DAG file, which means something is wrong in your DAG file.

00:58:04.160 --> 00:58:11.120
You are probably importing a lot of things or doing some database calls on the top of your file, not inside the objects.

00:58:11.120 --> 00:58:11.560
Gotcha.

00:58:11.560 --> 00:58:13.440
So you could find those sort of issues.

00:58:13.440 --> 00:58:20.200
Also, you could use Airflow backfill CLI command to run all the backfilling of data if you got the data today.

00:58:20.200 --> 00:58:22.440
And if you want to run it for last one year or so.

00:58:22.440 --> 00:58:26.000
But also it's what is not mentioned in the document.

00:58:26.000 --> 00:58:28.480
There is this, well, it is mentioned in the documentation.

00:58:28.480 --> 00:58:33.800
We have also a very, very powerful and rich and very well written API.

00:58:33.800 --> 00:58:36.540
So we have a stable Assov Airflow 2.

00:58:36.540 --> 00:58:38.200
That was one of the improvements implemented.

00:58:38.360 --> 00:58:43.420
So if you go to Apache Airflow, yeah, and scroll down on the left, yes, not this one, this stable.

00:58:43.420 --> 00:58:44.640
All the way down, yeah.

00:58:44.640 --> 00:58:48.280
Even below, there was like stable REST API.

00:58:48.280 --> 00:58:49.520
Yeah, very good.

00:58:49.520 --> 00:58:50.160
Yeah, yeah, yeah, gotcha.

00:58:50.160 --> 00:58:50.640
Okay.

00:58:50.640 --> 00:58:50.960
Yeah.

00:58:50.960 --> 00:59:08.240
This API is like written in open API standards, which means that all the tools which you can imagine for like managing access, for trying out things, for testing the API calls, all the beautiful documentation that you see here with examples, this is all automatically generated.

00:59:08.240 --> 00:59:09.120
From our API.

00:59:09.120 --> 00:59:13.360
This is super cool because you can actually, and this is surprising.

00:59:13.360 --> 00:59:15.520
You said that the UI is fantastic.

00:59:15.520 --> 00:59:16.680
And yeah, it is.

00:59:16.680 --> 00:59:21.240
But there are some companies who have their own UI, their own ways of looking at the processing pipelines.

00:59:21.240 --> 00:59:27.460
And many, many, we've learned during the Airflow Summit, many of those companies, they actually build their own UI.

00:59:27.620 --> 00:59:29.160
They don't use Airflow UI at all.

00:59:29.160 --> 00:59:31.420
They just use the engine to execute it.

00:59:31.420 --> 00:59:31.660
Right.

00:59:31.660 --> 00:59:35.420
Maybe you want to integrate it into some larger thing they already have or something, yeah.

00:59:35.420 --> 00:59:35.940
Exactly.

00:59:35.940 --> 00:59:38.040
And this API makes it possible.

00:59:38.040 --> 00:59:44.080
So you can just query which DAX you have, which are the relationships, how this all works, which is successful, which not.

00:59:44.140 --> 00:59:48.300
And then you can build beautiful UI or even ugly UI if you want.

00:59:48.300 --> 00:59:53.860
But the UI, that is something that you're used to without looking even at the Airflow UI.

00:59:53.860 --> 00:59:55.460
And this is also super powerful.

00:59:55.460 --> 00:59:55.680
Yeah.

00:59:55.680 --> 00:59:58.740
And this is straight up REST API.

00:59:58.740 --> 01:00:05.660
So while Python is awesome, if you're not a Python person, but you still want to adopt this, here's a way to integrate with it.

01:00:05.660 --> 01:00:05.820
Right.

01:00:05.820 --> 01:00:06.280
Absolutely.

01:00:06.780 --> 01:00:15.240
And we have already started creating clients in different languages, like we have a Java client for Airflow built on this API spec.

01:00:15.240 --> 01:00:20.920
Users can create their own APIs for a specific language because it, under the hood, uses OpenAPI.

01:00:20.920 --> 01:00:23.600
So you can auto-generate clients for different languages.

01:00:23.600 --> 01:00:24.180
Yeah.

01:00:24.180 --> 01:00:24.760
Fantastic.

01:00:24.760 --> 01:00:25.280
All right.

01:00:25.280 --> 01:00:27.960
I think that is about time for us.

01:00:27.960 --> 01:00:33.740
I did want to point out that Astronomer and AWS, but Astronomer, where you work, Axel, is a sponsor.

01:00:34.360 --> 01:00:40.220
So if you want to run sort of Airflow as a service, that's kind of your job, right?

01:00:40.220 --> 01:00:40.880
A hundred percent.

01:00:40.880 --> 01:00:44.060
And also we, Astronomer, has their own registry.

01:00:44.060 --> 01:00:52.720
So if you do open registry.astronomer.io, it makes it very easy to search for built-in providers that are baked inside Airflow.

01:00:52.720 --> 01:00:58.920
Or if users create and maintain their own providers, it is very easy to search that as well.

01:00:58.920 --> 01:01:01.980
I just posted a link if you want to check out.

01:01:02.200 --> 01:01:04.700
One comment on that, because we also have Google Cloud Composer.

01:01:04.700 --> 01:01:08.060
So we have Astronomer, AWS, and Cloud Composer.

01:01:08.060 --> 01:01:11.560
These are like big embrace of Airflow as a service.

01:01:11.560 --> 01:01:19.260
For us, it's like you can choose either you run it on your own, you run it using Astronomer, which have like great expertise in everything.

01:01:19.260 --> 01:01:21.760
Because we have lots of people from Astronomer or our communities.

01:01:21.760 --> 01:01:24.020
Then there are Amazon people.

01:01:24.020 --> 01:01:27.460
Then there are Google or Amazon offering and Google offering.

01:01:27.460 --> 01:01:30.380
And you are free to choose whatever you want.

01:01:30.380 --> 01:01:32.180
Like how you want to run Airflow.

01:01:32.180 --> 01:01:34.540
And you can move probably if you decide you need to move.

01:01:34.540 --> 01:01:34.740
Yeah.

01:01:34.740 --> 01:01:35.500
Absolutely.

01:01:35.500 --> 01:01:36.980
That just has to do with the infrastructure.

01:01:36.980 --> 01:01:40.420
The DAGs will be the same no matter where you take them.

01:01:40.420 --> 01:01:45.520
You might have to do a few changes when it comes to like auth and making sure your keys are up to date.

01:01:45.720 --> 01:01:46.160
Cool.

01:01:46.160 --> 01:01:47.320
All right.

01:01:47.320 --> 01:01:49.900
Let's wrap this up with a little bit of future looking.

01:01:49.900 --> 01:01:54.040
Just whoever has the right visibility in our group here.

01:01:54.040 --> 01:01:55.460
Just, you know, where are things going in the future?

01:01:55.460 --> 01:01:57.080
People are excited about Airflow.

01:01:57.080 --> 01:01:59.080
Like what can they look forward to?

01:01:59.080 --> 01:02:04.800
There's a really good talk from the Airflow Summit that's called Looking Ahead Beyond Airflow 2.0.

01:02:04.920 --> 01:02:08.580
That is with Ash from Astronomer and Ajemal from Google.

01:02:08.580 --> 01:02:16.120
And I think the thing that Ash said over and over again is, well, there is no roadmap, but we do always have things going on.

01:02:16.120 --> 01:02:17.620
So I'll turn it over to Caxon.

01:02:17.620 --> 01:02:18.180
No promises.

01:02:18.180 --> 01:02:19.440
No promises.

01:02:19.440 --> 01:02:22.120
But there are lots of that.

01:02:22.120 --> 01:02:25.700
So yeah, we pretty much know the direction we are heading to.

01:02:25.700 --> 01:02:30.820
So we want Airflow to be the orchestrator you want to use for whatever workflows you want to run.

01:02:30.820 --> 01:02:31.400
That's it.

01:02:31.680 --> 01:02:39.740
And there are lots of things like to happen in order to get there because we are so specialized on one hand on what we are opening up.

01:02:39.740 --> 01:02:54.620
But we are on the road to really make it easy to accommodate more use cases, make it easier to run, make it faster, make it serve those cases which currently cannot be served because of some reasons, historical reasons mainly.

01:02:55.020 --> 01:03:01.860
This is definitely some direction we are heading to open up to even more cases without losing the single focus.

01:03:01.860 --> 01:03:05.520
Like we want to be great at scheduling tasks and orchestration.

01:03:05.520 --> 01:03:06.100
That's it.

01:03:06.100 --> 01:03:07.400
We don't want to do processing.

01:03:07.400 --> 01:03:09.360
We don't want to go into this direction.

01:03:09.360 --> 01:03:10.680
That doesn't make sense for us.

01:03:10.680 --> 01:03:15.420
We want others to do processing and we will do orchestration the best way it's possible.

01:03:15.420 --> 01:03:15.720
Yeah.

01:03:15.720 --> 01:03:24.400
And the two immediate things that we are already working on and we are almost close to merging it on the main branches, making the Airflows schedule more powerful.

01:03:24.740 --> 01:03:30.460
That is a user who will have more power than just like expressing it in Cron.

01:03:30.460 --> 01:03:37.880
Users will also be able to say run it on the third of the third trading day of the month or something like that.

01:03:37.880 --> 01:03:42.340
Like that level of powerful timetable we want to provide to the users.

01:03:42.340 --> 01:03:43.620
We call it timetables.

01:03:43.620 --> 01:03:45.280
We will have Cron timetable.

01:03:45.280 --> 01:03:47.260
We will have time delta timetable of sorts.

01:03:47.260 --> 01:03:49.300
We are figuring that out.

01:03:49.300 --> 01:03:53.220
But we'll have that plus something called deferred operators.

01:03:53.540 --> 01:04:00.320
I mentioned about the sensors which are currently we put a book for the API call and see until it succeeds.

01:04:00.320 --> 01:04:09.800
We are going to have a new component called trigger that will use Python's async library to use resources in a more optimized manner.

01:04:10.100 --> 01:04:13.960
Instead of polling, you just wait for it to happen and then boom, off it goes.

01:04:13.960 --> 01:04:14.520
Yeah.

01:04:14.520 --> 01:04:14.920
Okay.

01:04:14.920 --> 01:04:15.760
That sounds cool.

01:04:15.760 --> 01:04:18.960
Just one comment to this scheduling because those great examples.

01:04:18.960 --> 01:04:24.540
One of the cases we want to serve, there is a real astronomer, not the company, real astronomer using Earthflow.

01:04:24.540 --> 01:04:28.520
And he wanted to start DAX when there is a sunset and sunrise.

01:04:28.660 --> 01:04:33.780
And, you know, when you are astronomer and flying around Earth, that's a little bit complex.

01:04:33.780 --> 01:04:38.700
So the whole scheduling is going to be there to implement this astronomer request.

01:04:38.700 --> 01:04:39.280
Yeah.

01:04:39.280 --> 01:04:39.960
Fantastic.

01:04:39.960 --> 01:04:40.720
It sounds really useful.

01:04:40.720 --> 01:04:41.320
All right.

01:04:41.320 --> 01:04:43.940
Well, I think that's it for covering Airflow.

01:04:44.040 --> 01:04:50.220
But let's quickly wrap up with, I guess, just one of the questions since we're a little bit over time that I usually ask at the end.

01:04:50.220 --> 01:04:51.600
So I'll ask you about your editor.

01:04:51.600 --> 01:04:55.760
Yarek, if you're going to work on Airflow and other stuff, but what editor do you use for Python?

01:04:55.760 --> 01:04:58.800
On a daily basis, I use IntelliJ, Ultimate.

01:04:58.800 --> 01:05:00.300
That's my favorite editor.

01:05:00.300 --> 01:05:04.140
However, very, very frequently, my favorite editor is VI.

01:05:04.140 --> 01:05:09.580
I mean, I'm an old type guy and VI is always when I have to do something quick.

01:05:09.580 --> 01:05:13.780
Somewhere where I don't have the editor started, VI is there.

01:05:14.220 --> 01:05:16.820
And I, you know, have it in my, you know, like fingers.

01:05:16.820 --> 01:05:17.900
I know how to quit VI.

01:05:17.900 --> 01:05:18.420
It's easy.

01:05:18.420 --> 01:05:19.980
I can learn you.

01:05:19.980 --> 01:05:21.340
I can teach you, no problem.

01:05:21.340 --> 01:05:22.500
Fantastic.

01:05:22.500 --> 01:05:24.820
Yeah, I love that joke about random strings.

01:05:24.820 --> 01:05:25.660
Kaxel?

01:05:25.660 --> 01:05:27.100
For me, it's PyCharm.

01:05:27.100 --> 01:05:28.880
I love PyCharm.

01:05:28.880 --> 01:05:29.620
It's debugging.

01:05:29.620 --> 01:05:31.600
It's going to the source code.

01:05:31.600 --> 01:05:34.740
And those intelligent habits, QSOA.

01:05:34.740 --> 01:05:36.400
Just a big fan of PyCharm.

01:05:36.400 --> 01:05:36.920
Right on.

01:05:36.920 --> 01:05:39.640
I use a combination of VS Code.

01:05:39.640 --> 01:05:41.860
And I also have Southspot for Vamble.

01:05:41.860 --> 01:05:42.620
Yeah, very cool.

01:05:42.720 --> 01:05:43.980
Vamble if it's going to be fast.

01:05:43.980 --> 01:05:45.180
VS Code if it's not.

01:05:45.180 --> 01:05:47.200
Yeah, we're going to be here for a while.

01:05:47.200 --> 01:05:48.520
Let's get down to it.

01:05:48.520 --> 01:05:48.840
Yeah.

01:05:48.840 --> 01:05:49.520
Right on.

01:05:49.520 --> 01:05:51.320
Well, thank you all for being here.

01:05:51.320 --> 01:05:52.300
It's been really great.

01:05:52.300 --> 01:05:53.480
Final call to action.

01:05:53.480 --> 01:05:57.900
People want to get started either using Airflow or contributing to Airflow.

01:05:57.900 --> 01:05:58.740
What do you tell them?

01:05:58.740 --> 01:06:02.640
Oh, I tell them to go to the community page on the Airflow website.

01:06:02.640 --> 01:06:07.320
And I tell them to sign up for the dev list and to join the Airflow Slack.

01:06:07.320 --> 01:06:07.560
Yeah.

01:06:07.560 --> 01:06:07.980
Fantastic.

01:06:07.980 --> 01:06:08.680
All right.

01:06:08.840 --> 01:06:09.700
Well, thanks again.

01:06:09.700 --> 01:06:10.500
Thanks for being here.

01:06:10.500 --> 01:06:10.800
Thank you.

01:06:10.800 --> 01:06:12.240
Thank you for inviting us.

01:06:12.240 --> 01:06:13.200
It was a great time.

01:06:13.200 --> 01:06:13.600
Yeah.

01:06:13.600 --> 01:06:14.020
Thank you.

01:06:14.020 --> 01:06:14.420
Thanks.

01:06:14.420 --> 01:06:14.940
Bye.

01:06:14.940 --> 01:06:15.200
Bye.

01:06:15.200 --> 01:06:15.260
Bye.

01:06:15.260 --> 01:06:15.300
Bye.

01:06:15.300 --> 01:06:15.320
Bye.

01:06:15.560 --> 01:06:16.520
Bye.

01:06:16.520 --> 01:06:18.960
This has been another episode of Talk Python To Me.

01:06:18.960 --> 01:06:23.820
Our guests in this episode were Yarek Potik, Kaxal Naik, and Leah Cole.

01:06:23.820 --> 01:06:28.700
And it's been brought to you by us over at Talk Python Training, as well as the transcripts

01:06:28.700 --> 01:06:30.300
have been brought to you by Assembly AI.

01:06:30.300 --> 01:06:33.780
Do you need a great automatic speech-to-text API?

01:06:33.780 --> 01:06:36.320
Get human-level accuracy in just a few lines of code.

01:06:36.320 --> 01:06:39.180
Visit talkpython.fm/assemblyai.

01:06:39.180 --> 01:06:40.960
Want to level up your Python?

01:06:41.340 --> 01:06:45.000
We have one of the largest catalogs of Python video courses over at Talk Python.

01:06:45.000 --> 01:06:50.180
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:06:50.180 --> 01:06:52.840
And best of all, there's not a subscription in sight.

01:06:52.840 --> 01:06:55.760
Check it out for yourself at training.talkpython.fm.

01:06:55.760 --> 01:07:00.440
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:07:00.440 --> 01:07:01.720
We should be right at the top.

01:07:01.720 --> 01:07:07.540
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the

01:07:07.540 --> 01:07:11.120
direct RSS feed at /rss on talkpython.fm.

01:07:11.120 --> 01:07:14.540
We're live streaming most of our recordings these days.

01:07:14.540 --> 01:07:18.660
If you want to be part of the show and have your comments featured on the air, be sure to

01:07:18.660 --> 01:07:22.380
subscribe to our YouTube channel at talkpython.fm/youtube.

01:07:22.380 --> 01:07:24.220
This is your host, Michael Kennedy.

01:07:24.220 --> 01:07:25.520
Thanks so much for listening.

01:07:25.520 --> 01:07:26.680
I really appreciate it.

01:07:26.680 --> 01:07:28.580
Now get out there and write some Python code.

01:07:28.580 --> 01:07:48.120
I'll see you next time.

01:07:48.120 --> 01:07:49.120
Bye.

01:07:49.120 --> 01:07:49.120
Bye.

01:07:49.120 --> 01:07:49.120
Bye.

01:07:49.120 --> 01:07:49.200
Bye.

01:07:49.200 --> 01:08:19.180
Thank you.

