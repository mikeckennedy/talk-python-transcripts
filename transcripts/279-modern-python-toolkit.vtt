WEBVTT

00:00:00.001 --> 00:00:05.240
Python is quick and easy to learn. And yet, there is a massive gap between knowing the

00:00:05.240 --> 00:00:10.800
common aspects of the language, loops, variables, functions, and so on, and knowing how to write

00:00:10.800 --> 00:00:15.560
a well-factored application using modern tools and libraries. That's where learning Python

00:00:15.560 --> 00:00:21.620
is a never-ending journey. Sebastian Witwoski is here to give us his take on a modern Python

00:00:21.620 --> 00:00:26.720
developer's toolkit. There are a bunch of great tips in store for us. This is Talk Python To Me,

00:00:26.720 --> 00:00:47.140
episode 279, recorded July 21st, 2020. Welcome to Talk Python To Me, a weekly podcast on Python,

00:00:47.140 --> 00:00:51.500
the language, the libraries, the ecosystem, and the personalities. This is your host,

00:00:51.500 --> 00:00:56.180
Michael Kennedy. Follow me on Twitter, where I'm @mkennedy. Keep up with the show and listen to past

00:00:56.180 --> 00:01:02.000
episodes at talkpython.fm, and follow the show on Twitter via at Talk Python. This episode is brought

00:01:02.000 --> 00:01:08.120
to you by Linode and us. Hey folks, before we jump into the interview, there's so much going on over

00:01:08.120 --> 00:01:12.540
at Talk Python Training that I want to share not one, but four exciting announcements with you.

00:01:12.540 --> 00:01:16.480
Number one, we released a new course that has been a passion project of mine,

00:01:16.480 --> 00:01:22.860
understanding how memory management works in Python. We don't have enough clear info out in the world to

00:01:22.860 --> 00:01:28.660
get a solid picture of how our code runs. So I dove in and created a five-hour course covering all the

00:01:28.660 --> 00:01:33.200
internals of Python memory. Things such as reference counting, garbage collection, and the fascinating

00:01:33.200 --> 00:01:39.260
allocation algorithms. We also touch on a bunch of simple techniques and patterns to employ, which allow

00:01:39.260 --> 00:01:45.800
our code to run much faster and use only half as much memory. Check it out at talkpython.fm/mem.

00:01:46.680 --> 00:01:53.260
Announcement number two, Chris Moffitt of Escaping Excel Hell, episode 200 fame, has written a course to

00:01:53.260 --> 00:01:59.540
help folks escape Excel and start leveraging Python's data science stack with tools like Jupyter and Pandas

00:01:59.540 --> 00:02:05.380
to solve the same type of problems and do the same type of computation. So if you're keen to use more

00:02:05.380 --> 00:02:12.500
Python and less Excel, check out that course at talkpython.fm/Excel. Announcement number three,

00:02:12.500 --> 00:02:17.880
Chris and I are putting on a free webcast pulling some of the tips and tricks out of that Excel course

00:02:17.880 --> 00:02:23.480
to help folks move from, well, Excel to Python. If you want to join us for that live event, it's going

00:02:23.480 --> 00:02:30.700
to be live on September 29th, 2020, and it'll of course be available as a recording afterwards. Just

00:02:30.700 --> 00:02:39.240
visit talkpython.fm/Excel dash webcast to be part of the webcast. And number four, we've crafted a

00:02:39.240 --> 00:02:45.340
unique learning experience for teams built on our courses over at Talk Python. We call this team

00:02:45.340 --> 00:02:50.720
cohorts. We've already tested this for individuals and we'll be announcing something for them shortly.

00:02:50.720 --> 00:02:56.860
But right now we're launching this experience for teams within companies. The idea is to put together

00:02:56.860 --> 00:03:02.600
a digitally native experience that brings your team together and keeps everyone on track and gets them

00:03:02.600 --> 00:03:09.140
ready for that big upcoming project. These experiences include a private community, weekly video calls,

00:03:09.140 --> 00:03:15.240
a clear schedule going through one or more courses of your choosing, and a lot more. Check it out at

00:03:15.240 --> 00:03:22.000
 talkpython.fm/cohorts. Wow, that's a lot for just one week, isn't it? All of these links will be in

00:03:22.000 --> 00:03:27.280
your podcast player's show notes. Please check them all out. This is truly the best way to support the show.

00:03:27.280 --> 00:03:29.600
Now let's talk about some modern Python.

00:03:29.600 --> 00:03:33.220
Sebastian, welcome to Talk Python To Me.

00:03:33.220 --> 00:03:34.980
Hi, thanks. I'm excited to be here.

00:03:34.980 --> 00:03:41.200
Oh, it's great to have you here. I'm looking forward to exploring this idea of a modern Python

00:03:41.200 --> 00:03:47.000
developers toolkit. You put together a really nice tutorial, which you, quote, presented at PyCon,

00:03:47.000 --> 00:03:51.720
like all the other folks who presented at PyCon this year. And we'll talk about that. And I think

00:03:51.720 --> 00:03:56.160
it's going to be a lot of fun to see your take on it. You do have a lot of good advice in here.

00:03:56.160 --> 00:03:59.680
Before we get to it, though, let's start with your story. How'd you get into programming and Python?

00:03:59.680 --> 00:04:04.580
So you know all those cool stories about people starting to code when they were like 10,

00:04:04.580 --> 00:04:08.040
and then they learned some ancient programming language to program a video game?

00:04:08.040 --> 00:04:15.220
Well, that's not me. My father had a computer, but as a kid, all I did was playing video games.

00:04:15.220 --> 00:04:20.300
And then I went to the university where I was studying automatic control and robotics.

00:04:20.840 --> 00:04:27.360
And I had three semesters of programming. And I think first semester was C, then was two semesters

00:04:27.360 --> 00:04:35.900
of C++. And boy, I hated C. I mean, it was so bad for me that I actually had to cheat on the exams to

00:04:35.900 --> 00:04:43.600
even pass it. And then I switched to C++. And it was slightly better. But so I eventually forced

00:04:43.600 --> 00:04:46.280
myself to learn C++ enough to pass all the exams.

00:04:46.280 --> 00:04:49.980
Yeah, C++ is better. But yeah, still, it's not Python.

00:04:49.980 --> 00:04:50.600
Exactly.

00:04:50.600 --> 00:04:51.820
Other modern languages. Yeah.

00:04:51.820 --> 00:04:58.920
And then at some point, I think I had to do a website. And that's when I really got interested

00:04:58.920 --> 00:05:05.080
into programming, let's say, because, well, it was HTML and CSS. But just the idea that you could

00:05:05.080 --> 00:05:10.540
immediately see the results in the browser was what really picked my interest. So I learned

00:05:10.540 --> 00:05:16.500
just making, I learned some basic CSS, some basic HTML and jQuery. And that's how I got into programming.

00:05:16.500 --> 00:05:19.820
Then I learned PHP and I started building websites.

00:05:19.820 --> 00:05:24.160
Cool. Well, I think building websites is one of those things that while it's pretty complicated,

00:05:24.160 --> 00:05:28.620
because there's HTML and CSS in the programming language, there's a lot of moving parts.

00:05:28.620 --> 00:05:33.740
It's definitely one of those things that's more rewarding than a lot of lower level programming,

00:05:33.740 --> 00:05:38.000
because you can see it right away. It's easy to share, right? You can put it up on

00:05:38.000 --> 00:05:42.940
some site and say, hey, everyone, check out this thing that I built. Try it. It's pretty fun.

00:05:42.940 --> 00:05:45.000
Yeah. Yeah, definitely.

00:05:45.000 --> 00:05:49.920
Speaking of learning languages that you might not want to learn, when I was in college,

00:05:49.920 --> 00:05:56.040
I started out in chemical engineering and then moved over to math. But while I was in chemical

00:05:56.040 --> 00:06:00.640
engineering for just a little bit, they said, you have to take a programming course. I'm like,

00:06:00.640 --> 00:06:04.040
excellent. I've always wanted to learn C++ or something like that. And they're like,

00:06:04.260 --> 00:06:09.360
no, you have to take Fortran. Really? I have to take Fortran. Like, yes, you have to take Fortran.

00:06:09.360 --> 00:06:14.620
If you want, you can take C++ as an elective, but Fortran is the most important programming

00:06:14.620 --> 00:06:19.280
language you're going to learn in your entire life. Don't you know? And I'm like, no, it's definitely

00:06:19.280 --> 00:06:23.060
still not true. I'm waiting for that to come true, but I don't think that was true.

00:06:23.060 --> 00:06:24.000
Anyway.

00:06:24.640 --> 00:06:27.240
Yeah. You got to start where they have you start, I guess.

00:06:27.240 --> 00:06:31.520
Yeah. It's nice to see that now it's changing and Python is more and more.

00:06:31.520 --> 00:06:32.100
Absolutely.

00:06:32.100 --> 00:06:34.100
Becoming more and more popular.

00:06:34.100 --> 00:06:38.060
Yeah. And I think it makes it way more approachable to people who are not there to be programmers.

00:06:38.060 --> 00:06:38.620
Exactly.

00:06:38.620 --> 00:06:45.980
Right. Like economists or whatever. So that's how you got into programming and found your way over to

00:06:45.980 --> 00:06:49.220
Perl. And where did Python come into this whole story?

00:06:49.220 --> 00:06:54.760
So once I know how to make some websites, I applied for an internship at CERN. CERN is this

00:06:54.760 --> 00:07:00.260
European organization for nuclear research. And so they have this large hard-run collider where they

00:07:00.260 --> 00:07:07.040
do a lot of cool stuff, but they hire not only physicists. So I applied for an internship as a web

00:07:07.040 --> 00:07:12.560
developer. And actually the first day when I started, one of my senior colleagues went to pick me up from

00:07:12.560 --> 00:07:18.640
the reception and he had this t-shirt saying, I enjoy learning Python. It was a nice afternoon.

00:07:18.640 --> 00:07:23.180
So that was my first interaction with Python. It was hilarious.

00:07:23.180 --> 00:07:24.960
That's awesome.

00:07:24.960 --> 00:07:30.400
I had to learn Python on that job, but I really enjoyed it. So I stayed at CERN for the next six years,

00:07:30.400 --> 00:07:31.920
building some really cool stuff there.

00:07:31.920 --> 00:07:38.060
Oh man, that's got to be awesome. Did you work remotely or were you in Geneva or where were you?

00:07:38.060 --> 00:07:42.940
I was working there. CERN doesn't, at least back then didn't support working remotely.

00:07:42.940 --> 00:07:45.440
Yeah. That's got to be such a cool environment to be in.

00:07:45.500 --> 00:07:51.640
It was. I mean, people from every country, it's crazy. You just go for a lunch with people from

00:07:51.640 --> 00:07:52.220
around the world.

00:07:52.220 --> 00:07:56.760
That guy has a Nobel prize, of course. So he can join us. Come on.

00:07:56.760 --> 00:08:00.440
Yeah, quite cool. And how about today? What are you doing now?

00:08:00.440 --> 00:08:06.820
So I finished working at CERN and then I moved to freelancing. So right now I'm a Python freelancer

00:08:06.820 --> 00:08:12.080
based in Poland. I still do a lot of web development because I really like it. I think that's my favorite

00:08:12.080 --> 00:08:17.880
part of programming, but I also help companies fix their workflows, set up their architecture for new

00:08:17.880 --> 00:08:20.800
projects. And I even do some custom onsite trainings.

00:08:21.160 --> 00:08:25.400
So that sounds like a lot of fun and it's a nice mix. So you get to try a bunch of different things

00:08:25.400 --> 00:08:31.060
and keep your hands in them. Nice. All right. Well, let's talk about your tutorial that you

00:08:31.060 --> 00:08:37.780
did at PyCon online, which was really, you know, people who I'm sure most people know now, but

00:08:37.780 --> 00:08:44.260
basically the way that PyCon US handled the whole shutdown lockdown thing was they said, okay,

00:08:44.260 --> 00:08:50.360
we're going to take tutorials and the talks and still give people a chance to present. But it was

00:08:50.360 --> 00:08:56.200
record this as a screencast basically, and then we'll publish it to the YouTube channel and we'll

00:08:56.200 --> 00:09:01.080
list it on the PyCon page as a list. That's what you did. And I think honestly, for yours,

00:09:01.080 --> 00:09:09.300
that might be even better because you came up with such a nice set of digital resources that people can use

00:09:09.300 --> 00:09:15.240
that I feel is going to be really valuable to everyone, not just the, you know, 50 people or

00:09:15.240 --> 00:09:19.940
however many would have taken it in person there. Yeah, I agree. I looking in the hindsight, I think

00:09:19.940 --> 00:09:26.360
that it was much better than a tutorial that I would be able to give in person because I was over two

00:09:26.360 --> 00:09:31.920
hours. So I really had to time everything. Well, I did a lot of editing to remove some stuff and still

00:09:31.920 --> 00:09:37.960
it's almost like two and a half hour of basically only meet. Yeah, but it's engaging. You did a good job

00:09:37.960 --> 00:09:43.460
with it. So when you come up with this idea, like we all think about what kind of tools we use

00:09:43.460 --> 00:09:48.960
and it's easy to get stuck in doing certain things. So, you know, I never really, I mean,

00:09:48.960 --> 00:09:55.960
I never really wrote tests. So, you know, I'm not using pytest, for example, or I've always just

00:09:55.960 --> 00:10:00.200
enjoyed using Vim. So I'm going to stick with Vim, even though there may be a more productive

00:10:00.200 --> 00:10:05.300
editors, for example, out there and so on. So how'd you come up with this idea for your,

00:10:05.300 --> 00:10:09.180
your workshop here? So I actually come up with this idea talking with people.

00:10:09.180 --> 00:10:15.960
So I noticed that people who are learning Python, they might learn how the language works. They

00:10:15.960 --> 00:10:21.640
might know the syntax, but then when they sit down to write a Python project, they just don't know how

00:10:21.640 --> 00:10:25.960
to start. I mean, you can see a lot of people asking what's the deal with virtual environments,

00:10:25.960 --> 00:10:30.560
like what they should use for testing. So I had this idea in the back of my head, like,

00:10:30.680 --> 00:10:35.920
hey, let's, let's make a tutorial how to build a simple Python project from scratch,

00:10:35.920 --> 00:10:42.440
explain what tools to use, and just show enough tools. So people can like, take this project and

00:10:42.440 --> 00:10:47.720
build something bigger on top of it. So to not overwhelm people with like, too much of different

00:10:47.720 --> 00:10:55.660
stuff. Don't toss poetry or like different styles of managing dependencies, just give them one solid

00:10:55.660 --> 00:10:59.820
approach that they can use. Yeah. And that can be one of the challenges, right? The more guidance

00:10:59.820 --> 00:11:07.440
that you give, the less generally applicable the result is, right? If you, that you have to use

00:11:07.440 --> 00:11:11.240
talks in this way, and you have to make sure you have these tests, and then you have to make sure

00:11:11.240 --> 00:11:15.720
your APIs always look like this, and so on and so on, like every layer, here's your continuous

00:11:15.720 --> 00:11:22.680
integration, how that has to be, right? Like, it just means fewer people necessarily fit that same

00:11:22.680 --> 00:11:27.180
workflow. And so I think you found a pretty good balance here. Thank you. I had to remove a lot of

00:11:27.180 --> 00:11:32.460
stuff because initially, I wanted to add even more features. But then I decided to like really narrow it

00:11:32.460 --> 00:11:37.880
down to only the essential things that you're going to need. Yeah. So you set the stage. And I think this

00:11:37.880 --> 00:11:44.540
is hard for beginners to get a lot of times to understand, sort of internalize this feeling. But

00:11:44.540 --> 00:11:51.240
you said that there's a huge gap between knowing Python, the language, like I know how to do a loop,

00:11:51.240 --> 00:11:56.420
I know how to create strings, I know how to like write a function, that kind of fluency with Python,

00:11:56.420 --> 00:12:03.420
there's a huge gap between that and knowing how to write applications or create proper projects with

00:12:03.420 --> 00:12:08.980
Python, right? Yeah, I mean, maybe huge gap is a huge word, but there is a gap. Yeah, there's definitely

00:12:08.980 --> 00:12:14.120
a gap. Yeah, let's say that. Yeah. So that's the gap that I wanted to fill with my, my workshop. Yeah. And I

00:12:14.120 --> 00:12:17.920
think it's an important one. I don't want to put words in your mouth. I'll put the huge out there for

00:12:17.920 --> 00:12:25.820
the students who are taking, say, like my beginning programming courses. I find that they all can see

00:12:25.820 --> 00:12:30.780
the syntax, they can recreate the syntax. If you say, okay, here's a thing, I want you to loop over it.

00:12:30.780 --> 00:12:35.200
Yeah, no problem really quickly. A lot of times they've been able to learn how to like do that and

00:12:35.200 --> 00:12:42.020
make Python do that thing. But if you put them in front of a blank file, just open up, you know,

00:12:42.020 --> 00:12:49.700
app.py and come up with a solution to some kind of problem, like I want to use the right data

00:12:49.700 --> 00:12:55.060
structures, and I want to have the right libraries to talk to this, you know, to APIs and stuff. I feel

00:12:55.060 --> 00:12:59.160
like there's, there's a pretty big gap where they feel like they just don't know where to start.

00:12:59.160 --> 00:13:04.960
And so putting a lot of the structure in there, I think will help people get sent down in the right

00:13:04.960 --> 00:13:11.360
direction. One thing that I thought was pretty neat about your presentation was you had a whole website,

00:13:11.360 --> 00:13:16.620
right? A whole dedicated domain for this tutorial. Do you want to tell us about that?

00:13:16.620 --> 00:13:20.000
Yeah. So the website is bycon.svitowski.com.

00:13:20.000 --> 00:13:22.260
I'll link to that in the show notes so people can just click it.

00:13:22.260 --> 00:13:29.340
I used Hugo, the static site generator with learn template. And actually I stole it from

00:13:29.340 --> 00:13:35.480
Nina Zakarenko's tutorial that I saw some years ago. She also used this template and I really like it.

00:13:35.480 --> 00:13:41.140
So then I found it, I think completely by accident. And I saw it. Oh, that's the website template that

00:13:41.140 --> 00:13:46.900
she was using. So I gave it a try and it looks really good. It has a nice sidebar with all the

00:13:46.900 --> 00:13:50.840
sections. Yeah. So you have a whole bunch, like, as you go through the tutorial,

00:13:51.360 --> 00:13:56.640
you've got the website and you've got the video on the website, which is pretty straightforward.

00:13:56.640 --> 00:14:01.640
But then, you know, you, for each major section, you've got like a write-up about that with links.

00:14:01.640 --> 00:14:05.560
So people don't have to try to type down or search for the various things you're talking about.

00:14:05.560 --> 00:14:11.000
They've, you've got the exercises that people can do walking through. So I think like, this is what,

00:14:11.000 --> 00:14:14.660
this is what I was thinking of when I said, I feel like this is almost better because it was done

00:14:14.660 --> 00:14:18.700
online because you have this, this whole resource for people here.

00:14:18.700 --> 00:14:22.800
Yeah. I was trying to make this website independent of the video. So you can just,

00:14:22.800 --> 00:14:26.660
even if you don't know the video, you should be able to go to the website and kind of follow

00:14:26.660 --> 00:14:30.900
everything. So it's complimentary to the video, but it stands on its own.

00:14:30.900 --> 00:14:36.680
Yeah. Cool. So there's a couple of exercises that you have the students do. Maybe we could talk about

00:14:36.680 --> 00:14:40.500
the exercises and then we could start going through the steps and the guidance and whatnot.

00:14:40.700 --> 00:14:48.340
Sure. So I basically have two sections of exercises. First one is done after I talk about managing Python

00:14:48.340 --> 00:14:54.280
versions and Python dependencies. So first I explain how you can install different versions of Python,

00:14:54.280 --> 00:14:59.340
how you can like install different versions of packages. And there is an exercise to make sure

00:14:59.440 --> 00:15:06.120
that people understand what's the difference between virtual environment and Python version and how they

00:15:06.120 --> 00:15:12.940
interact with each other. So I have like a set of steps, try to install, let's say this package globally,

00:15:12.940 --> 00:15:17.360
try to install, try to create a new virtual environment, create a package there,

00:15:17.360 --> 00:15:22.680
deactivate virtual environment, try to run this package and see what happened. Do you understand?

00:15:23.180 --> 00:15:28.940
And then I have the second exercise. This is a bigger one. This is basically a mini project.

00:15:28.940 --> 00:15:34.080
So at the end of the workshop, after I discuss everything, testing documentation and all this

00:15:34.080 --> 00:15:39.120
stuff, I have a mini project to create a to-do application. So basically you take everything

00:15:39.120 --> 00:15:45.860
that I showed you before and your objective is to create a to-do application. I wanted to make

00:15:45.860 --> 00:15:50.300
something more interesting, but everyone knows what a to-do app is. So I decided to go for this.

00:15:50.300 --> 00:15:55.780
That's the canonical example of a like, let's rebuild something that everyone is familiar with.

00:15:55.780 --> 00:16:00.100
That's right. It used to be blogs, but now the JavaScript people made it the to-do app that

00:16:00.100 --> 00:16:04.780
everyone builds. Yeah. I put a lot of thought into finding a more interesting project, but nothing.

00:16:04.780 --> 00:16:10.660
Yeah. The problem is the more interesting it gets, the more you get lost in the details,

00:16:10.660 --> 00:16:15.160
right? It's yeah. Anyway, it's fine. It's a cool example. All right. So there's a couple of

00:16:15.160 --> 00:16:22.320
hands-on exercises that people get to do. That's good. Now, maybe the first big piece of advice,

00:16:22.320 --> 00:16:28.620
but also advice that is challenging for people who've been doing a long time. And I guess to some

00:16:28.620 --> 00:16:34.000
degree, this is probably more focused at people who are new. So that hesitancy matters less,

00:16:34.000 --> 00:16:40.260
but is to recommend a code editor, right? People are very passionate or sticky to their code editors.

00:16:40.260 --> 00:16:45.500
Yeah. I was really hesitating if I should include this point or not. But at the end,

00:16:45.500 --> 00:16:53.020
I checked the Stack Overflow survey from last year and VS Code was used by basically every other programmer.

00:16:55.260 --> 00:17:00.140
This portion of Talk Python To Me is brought to you by Linode. Whether you're working on a personal

00:17:00.140 --> 00:17:05.620
project or managing your enterprise's infrastructure, Linode has the pricing, support, and scale that you

00:17:05.620 --> 00:17:11.000
need to take your project to the next level. With 11 data centers worldwide, including their newest data

00:17:11.000 --> 00:17:17.460
center in Sydney, Australia, enterprise-grade hardware, S3-compatible storage, and the next-generation

00:17:17.460 --> 00:17:23.260
network, Linode delivers the performance that you expect at a price that you don't. Get started on

00:17:23.260 --> 00:17:28.980
Linode today with a $20 credit, and you get access to native SSD storage, a 40 gigabit network,

00:17:28.980 --> 00:17:34.940
industry-leading processors, their revamped cloud manager at cloud.linode.com, root access to your

00:17:34.940 --> 00:17:42.140
server, along with their newest API and a Python CLI. Just visit talkpython.fm/Linode when creating

00:17:42.140 --> 00:17:47.280
a new Linode account, and you'll automatically get $20 credit for your next project. Oh, and one last

00:17:47.280 --> 00:17:52.740
thing. They're hiring. Go to linode.com slash careers to find out more. Let them know that we sent you.

00:17:52.860 --> 00:17:59.400
You actually, at the start, you said, okay, we got to pick a code editor because you got to write

00:17:59.400 --> 00:18:04.680
some code. Let's do VS Code. And yeah, you went through the stats from the Stack Overflow

00:18:04.680 --> 00:18:13.560
Developer Survey, and you're like, it's like 12% in 2017. It was 30% in 2018. In 2019, it was like 50%

00:18:13.560 --> 00:18:16.820
or something. You're like, all right, this is a pretty safe bet. A lot of people are doing this

00:18:16.820 --> 00:18:22.540
and liking it. Yeah, exactly. Yeah. So I guess first bit of advice, would you get VS Code? You

00:18:22.540 --> 00:18:28.740
don't have any Python tooling? Not really? Yeah. So when you install VS Code, it's pretty empty.

00:18:28.740 --> 00:18:33.460
But the nice thing about VS Code is that when you install it, you have this welcome window,

00:18:33.460 --> 00:18:37.240
and it says like, oh, if you're programming in Python, check out this package.

00:18:37.360 --> 00:18:43.380
So basically, first package that you install is Python package. And it's actually the most popular

00:18:43.380 --> 00:18:49.260
package on the VS Code marketplace. It's like way above...

00:18:49.260 --> 00:18:55.000
By a long ways. Yeah. It's like two or three times above even the C# and C++ one. And those are,

00:18:55.000 --> 00:18:56.700
you know, very core to Microsoft, right?

00:18:56.820 --> 00:19:02.600
Yeah, exactly. Yeah. Yeah. So when you start, you basically first install Python package. And then

00:19:02.600 --> 00:19:07.240
once you have Python package, it's going to give you some pop-ups like, hey, do you want to install

00:19:07.240 --> 00:19:12.060
a code formatter? Or like, hey, do you have some tests? Do you want to install a test tool and stuff

00:19:12.060 --> 00:19:18.880
like that? So it really takes you by hand through all the steps that you need to have the basic Python

00:19:18.880 --> 00:19:26.800
IDE. Yeah, for sure. Have you looked at PyLance, the new language extension for VS Code for Python?

00:19:26.800 --> 00:19:31.880
So actually, no, I've heard about it from Python Bytes. Yes.

00:19:31.880 --> 00:19:35.400
In the podcast. And then it fell off my radar. Yeah, Anthony Shaw brought that one. Yeah,

00:19:35.400 --> 00:19:38.840
that was cool. Yeah. I thought it's going to be like built in into Python extension,

00:19:38.840 --> 00:19:44.960
but then I saw it's a separate extension. So I kind of forgot about it. But have you been using it?

00:19:44.960 --> 00:19:49.600
Not really. I just looked at it when Anthony and Brian and I were speaking about it. And it looks like

00:19:49.600 --> 00:19:56.780
it looks deeper into the Python language and more across your project, more across

00:19:56.780 --> 00:20:01.240
the libraries, looks at the documentation that might come with like the help strings and whatnot.

00:20:01.240 --> 00:20:08.860
So you actually have to have the VS Code Python plugin. And then the PyLance plugin is like on top of that

00:20:08.860 --> 00:20:13.400
one. So it uses the new language server thing that they've got that I don't really know much about. But

00:20:13.400 --> 00:20:18.600
it looks I installed it. It looks like it'll be be nicer. We'll see. I haven't done a ton with it.

00:20:18.760 --> 00:20:23.720
Yeah, I'll definitely check it out at some point. Yeah, not to start too much of a heated debate. But what

00:20:23.720 --> 00:20:32.100
what are your thoughts on things like VS Code and PyCharm? The more GUI based helpful, trying to help

00:20:32.100 --> 00:20:38.100
anyway, editors versus some something like Emacs or Vim? I know a lot of people still use Emacs and Vim and

00:20:38.100 --> 00:20:43.280
the more terminal based editors. I think both are good. I mean, I'm still using Vim if I want to do some

00:20:43.280 --> 00:20:49.400
quick edits, and I'm in the terminal. So I don't really mind it. It's just VS Code or PyCharm are more

00:20:49.400 --> 00:20:54.200
beginner friendly. So if you're new to programming, that's you're probably gonna start with one of

00:20:54.200 --> 00:20:59.880
those. And what I really like about VS Code is that you can use it for different programming languages,

00:20:59.880 --> 00:21:06.060
you're not limited to Python. While if you start using PyCharm, then you can use it for Python. But if

00:21:06.060 --> 00:21:12.380
you want to switch to JavaScript, it's not very useful. Yeah, it's weird how to make Yeah,

00:21:12.380 --> 00:21:19.160
yeah, VS Code is more general, right? It sort of equally does Node.js as well as it does.

00:21:19.160 --> 00:21:25.040
Python. Exactly. And you can customize it with extensions. Yeah, cool. So one of the pieces of

00:21:25.040 --> 00:21:31.860
advice you gave around is choosing a linter and not choosing the default linter. So two questions,

00:21:31.860 --> 00:21:37.980
what is a linter? And then why did you want to change what VS Code wanted you to do with one?

00:21:37.980 --> 00:21:44.620
Basically, a linter is a tool that if you make some mistakes in their code, it's gonna in your code,

00:21:44.620 --> 00:21:48.860
it's gonna shout at you and tell you that you did it wrong. And some linters are more strict,

00:21:48.860 --> 00:21:55.620
some linters are less strict. For example, for me, Flake 8 is the best linter that I use all the time,

00:21:55.620 --> 00:22:02.380
because it complains about, for example, if you try to use a variable that you forgot to define,

00:22:02.380 --> 00:22:06.020
it's going to complain about it. If you define a variable that it's not used in the function,

00:22:06.020 --> 00:22:10.560
it's going to complain about it. So it gives you hints, it doesn't try to change your code,

00:22:10.560 --> 00:22:17.900
but it gives you hints as you're coding. Well, some people use PyLint. And it's also a good

00:22:17.900 --> 00:22:21.420
linter. For me, it's just more strict. And sometimes it's complaining that you have

00:22:21.420 --> 00:22:26.160
too many public methods in a class and stuff like that. So that's why I didn't like it.

00:22:26.160 --> 00:22:30.320
I see. Okay, yeah, cool. So you basically go through and show how to,

00:22:30.320 --> 00:22:34.580
you know, when you set up the Python extension in VS Code, it says, oh, you don't have a linter.

00:22:34.580 --> 00:22:38.660
Click here to install PyLint. And you're like, hold on, let's go over here and tell it that

00:22:38.660 --> 00:22:42.960
we want it to use Flake 8. And then it'll say, actually, click here to install Flake 8, right?

00:22:42.960 --> 00:22:48.860
Yeah, exactly. Because by default, VS Code tries to install everything kind of globally. And I wanted

00:22:48.860 --> 00:22:55.020
to show people how to nicely isolate everything using virtual environment. So instead of just

00:22:55.020 --> 00:23:00.940
letting VS Code to install Flake 8, I first show people how to use pipX to install Flake 8. And then

00:23:00.940 --> 00:23:06.600
I point VS Code to use it. Yeah. Well, let's talk about pipX just for a second, because it's,

00:23:06.600 --> 00:23:12.080
it is a pretty interesting way to install these kinds of tools. I'm a big fan of pipX. I think

00:23:12.080 --> 00:23:18.060
it solves this really interesting problem. And to me, the way I think about it, this only really will

00:23:18.060 --> 00:23:24.960
like maybe resonate with people on a Mac. But to me, it's like homebrew for Python utilities and library,

00:23:24.960 --> 00:23:31.360
right? Maybe chocolatey on Windows is a similar type of thing, right? Some kind of central repository

00:23:31.360 --> 00:23:37.280
where I can say install this tool. And it will just install it to my computer. That works well for

00:23:37.280 --> 00:23:41.580
some things. But there's a bunch of things you would normally pip install, but then they have commands

00:23:41.580 --> 00:23:47.660
like black or pytest or Flake 8 or whatever. And so pipX installs those. But usually those tools don't

00:23:47.660 --> 00:23:53.960
necessarily belong in your project. You just want to run them against your project. And so this will create,

00:23:53.960 --> 00:24:00.460
pipX will create a virtual environment and install that thing in isolation and sort of manage it like it's

00:24:00.460 --> 00:24:02.880
like an application, if you will, like an app store or something.

00:24:02.880 --> 00:24:07.240
Yeah. So there are basically two types of packages that you probably want to install on your computer.

00:24:07.240 --> 00:24:12.480
One is packages for the project that you're currently working with. So for that, you would use a virtual

00:24:12.480 --> 00:24:13.040
environment.

00:24:13.040 --> 00:24:14.760
Right. Like requests or something. Yeah.

00:24:14.760 --> 00:24:19.200
Yeah, exactly. Or like Django, you might be working on different versions of Django and you might be

00:24:19.200 --> 00:24:25.060
switching between projects. But then there are also some packages like Flake 8, like black, maybe cookie

00:24:25.060 --> 00:24:32.580
cutter. And for that, you probably want to have one version, preferably the most up to date version on

00:24:32.580 --> 00:24:38.420
your computer. You don't need to have five different versions of Flake 8 for each of your project. You just

00:24:38.420 --> 00:24:45.460
want to use the latest Flake 8 because you know it's going to catch up, catch most errors. So that's where you

00:24:45.460 --> 00:24:53.400
would use PipX. So it lets you install package and it will act as a global package. But at the same time,

00:24:53.400 --> 00:24:58.740
it's installed inside a virtual environment. So PipX handles all this virtual environment creation,

00:24:58.740 --> 00:25:04.000
activation. And for you, you just see this package as normal, as if you would normally install it with

00:25:04.000 --> 00:25:04.200
Pip.

00:25:04.200 --> 00:25:08.860
Yeah. Yeah. It's super cool. I really like the way that that works and it manages and lets you upgrade

00:25:08.860 --> 00:25:15.040
those things separately. So you might use that to install Flake 8 or various tools that you're going to

00:25:15.040 --> 00:25:23.520
do, set that up in VS Code. And then another thing you talked about is by default, probably code is not

00:25:23.520 --> 00:25:29.520
installed in the path. So you can run VS Code, but if you're on the terminal and you want to edit

00:25:29.520 --> 00:25:35.020
something, you might want to be able to type like code space file name or code space directory name

00:25:35.020 --> 00:25:39.420
and open those up. Right. So you've got to go and take an extra step to install that.

00:25:39.420 --> 00:25:45.080
Yep. And I think right now VS Code will even give you a pop-up saying that, hey, you can actually do

00:25:45.080 --> 00:25:52.260
this. And there is a command in the command palette to add VS Code to your shell. So it's getting even

00:25:52.260 --> 00:26:00.020
more and more beginner friendly. Yeah. VS Code is interesting in that it does so many things and yet

00:26:00.020 --> 00:26:06.440
it's not obvious what it's capable of. Right. It's, you know, if I go into PyCharm, there's a button,

00:26:06.440 --> 00:26:11.120
you're like, oh, this button, what does it say? Oh, that means it's going to do like a profiling of my

00:26:11.120 --> 00:26:15.720
code if I click that button. But there's no button for so many of these things in VS Code. Instead,

00:26:15.720 --> 00:26:19.940
it uses this idea of the command palette. Right. Yeah. As you said, that's the thing, for example,

00:26:19.940 --> 00:26:26.160
with testing, there is like no sidebar for tests. But once you set up testing tool, you have a

00:26:26.160 --> 00:26:31.260
sidebar. Yeah. You talked about some of the commands that are useful there. And unfortunately, I only have

00:26:31.260 --> 00:26:36.300
these for Mac. People have to translate probably command equals control. And that's pretty much it.

00:26:36.300 --> 00:26:41.400
Open the command palette. So you hit command shift P, and then you can type all sorts of stuff. And this

00:26:41.400 --> 00:26:44.880
is kind of how you get to all those features that we're talking about. Go to files, command P,

00:26:45.800 --> 00:26:50.700
go to a symbol, command shift P, or command shift O, or you just command click a thing.

00:26:50.700 --> 00:26:57.000
Go to symbol, control T, go to line, control G, command space, or sorry, control space to trigger

00:26:57.000 --> 00:27:00.840
the IntelliSense. But you couldn't get that to work, right? If for some reason you had to like use them

00:27:00.840 --> 00:27:05.800
alternate, like shift escape or something to make that come up. Yeah, I don't know what was the

00:27:05.800 --> 00:27:10.940
problem. Yeah, yeah, yeah. So there's a bunch of cool commands. And I think anytime people switch into

00:27:10.940 --> 00:27:15.860
an editor, that's not the one that they're used to using, it's really worthwhile to sit down and just

00:27:15.860 --> 00:27:22.740
maybe even make a list of here are the top 20 most common hotkeys. Right? Because just because you're in

00:27:22.740 --> 00:27:26.500
a GUI doesn't mean you should be using the mouse all day. Yeah. And it's interesting that you mentioned

00:27:26.500 --> 00:27:33.440
it because before VS Code, I was a heavy sublime text user. And when I switched to VS Code, my muscle

00:27:33.440 --> 00:27:39.580
memory was still with sublime. And actually for VS Code, you have those extensions that will bring the

00:27:39.580 --> 00:27:45.960
keyboard bindings from other text editors. So there is an extension that will rebind some commands to

00:27:45.960 --> 00:27:52.100
commands from sublime. There is an extension for atom and stuff like that. So for a long time, I was using

00:27:52.100 --> 00:27:58.420
the sublime key binding. And even now, I recently reinstalled everything from scratch, I still had to

00:27:58.420 --> 00:28:06.240
manually remap some commands because my muscle memory was just not fixable. Yeah, yeah. Sometimes it's like,

00:28:06.340 --> 00:28:10.100
nope, this is I'm just going to always type this. So we're just going to make it do that. And that's

00:28:10.100 --> 00:28:16.260
okay. Now, another thing that's not obvious, I think, in VS Code, especially to beginners, is how do you run

00:28:16.260 --> 00:28:22.700
your project? Right? Like running a single file, maybe it's not too hard, right? You can there's a

00:28:22.700 --> 00:28:28.180
little button for that. But if you open up a Flask app, and you want to use Flask run, rather than,

00:28:28.720 --> 00:28:34.680
you know, just running the app.py or whatever, or you want to run some tests or so on, that can be

00:28:34.680 --> 00:28:38.740
tricky. Do you want to talk people through that experience? Basically setting up a run configuration?

00:28:38.740 --> 00:28:43.020
As you mentioned, if you want to run a single file, you can use it from the command palette, or you can

00:28:43.020 --> 00:28:49.500
press this green arrow button, everything is fine. And you can actually even use it for a Flask server,

00:28:49.500 --> 00:28:56.400
you just run the file that starts the Flask server, and it's going to be fine. But actual power,

00:28:56.720 --> 00:29:02.800
better idea is to use the debug configuration, or how is it called? I don't have VS Code.

00:29:02.800 --> 00:29:07.680
Something, yeah, launch, maybe launch configuration. I'm not sure. Something like that. Anyway, yeah.

00:29:07.680 --> 00:29:12.960
Yeah, so it's under the sidebar for debugging. And if you don't have any launch configuration

00:29:12.960 --> 00:29:18.360
configured, you're going to have like a button there saying configure launch file or something

00:29:18.360 --> 00:29:24.200
like that. Once you click it, you can select one, you can select one of the popular frameworks that

00:29:24.200 --> 00:29:29.000
are there. So you can select the Django or Flask or Pyramid configuration. And that's going to create

00:29:29.000 --> 00:29:35.160
a launch file for you with some predefined commands. And for most cases, you should be good.

00:29:35.160 --> 00:29:42.600
But if you want to modify, for example, some parameter that you specify at the run server command,

00:29:42.600 --> 00:29:47.220
you can do this there. Once you have this launch file, you can actually launch a web server.

00:29:47.380 --> 00:29:53.640
And now the cool thing is that if you put some breakpoints in your code, so you can click next to

00:29:53.640 --> 00:29:58.900
the line number in the gutter, and it's going to put a breakpoint, this will trigger the breakpoint

00:29:58.900 --> 00:30:05.440
in your server. So now if you go to your website, it's actually going to stop at that breakpoint,

00:30:05.440 --> 00:30:07.420
and you can use VS Code to do debugging.

00:30:07.740 --> 00:30:13.560
Yeah, yeah, that really unlocks the power if you set up the debug, whatever configuration to launch

00:30:13.560 --> 00:30:18.000
those things. And yeah, because then you can do the breakpoints, watch the variables, the inspections,

00:30:18.000 --> 00:30:21.600
all that kind of stuff. And again, the reason I think it's valuable to talk about these kind of

00:30:21.600 --> 00:30:26.740
things is it's not obvious that this is what you should be doing to get the debugging support to work,

00:30:26.740 --> 00:30:30.800
right? There's a lot of like implicit stuff. But once you know, it's fine. Another thing that's pretty

00:30:30.800 --> 00:30:32.260
cool is code snippets.

00:30:32.260 --> 00:30:37.860
Yeah, so VS Code comes with some code snippets by default. But if you install some extensions, for example,

00:30:37.860 --> 00:30:42.260
if you install Python extensions, you're going to get even more extension, you're going to get even more

00:30:42.260 --> 00:30:48.680
snippets, like a snippet to create a class to create a main function, let's call it like that. And then for example,

00:30:48.680 --> 00:30:54.360
if you install a Django extension, you're going to get even more snippets like Django template tags and stuff like

00:30:54.360 --> 00:31:00.320
that. And on top of that, you can define your own snippets. So just you just select a command, create a

00:31:00.320 --> 00:31:05.620
snippet. And you're going to get a nice scaffolding with some information, what do you have to put in

00:31:05.620 --> 00:31:10.800
each place, basically, that's a JSON file. So you define what's the abbreviation to trigger the snippet,

00:31:10.800 --> 00:31:15.660
you define the description, and then you just define the code that you want to put there. And what's also

00:31:15.660 --> 00:31:22.940
interesting is that you will have some placeholders that if you press tab, your mouse will move there.

00:31:22.940 --> 00:31:28.140
So if you want to pre fill some values in a function, you can press tab and you will be moving between those

00:31:28.140 --> 00:31:34.840
places. And there are some special variables that will insert, for example, the current date or the

00:31:34.840 --> 00:31:39.640
current folder. So VS Code has this nicely documented in the documentation.

00:31:39.640 --> 00:31:43.920
Yeah, you can build it's almost like a little scripting language. So that's super cool. And if you find

00:31:43.920 --> 00:31:49.060
yourself just doing the same thing over and over again, maybe it should be a snippet. And then your last

00:31:49.060 --> 00:31:56.500
thing on the VS Code topic before we move on, is you talked about a bunch of interesting extensions for VS Code.

00:31:57.140 --> 00:32:02.960
And some of these I hadn't heard about are plugins. Let's maybe just talk about a couple of your

00:32:02.960 --> 00:32:07.960
favorite, because I mean, obviously, the Python and the PyLance ones are there. But there's other

00:32:07.960 --> 00:32:12.340
ones that people maybe haven't tried out, like there's a Django one, and there's a Telecode,

00:32:12.340 --> 00:32:13.860
you want to hit the highlights there?

00:32:13.860 --> 00:32:19.860
Sure. So apart from the obvious Python, then if you're working Django or in Flask, then there are some

00:32:19.860 --> 00:32:25.120
plugins that will add additional snippets. And for example, for Django, it will also add some syntax,

00:32:25.520 --> 00:32:31.080
highlighting support for Django HTML files. But apart from the obvious things, there is, for example,

00:32:31.080 --> 00:32:38.420
a plugin called IntelliCode that will try to predict, it will try to make the auto-suggestion a bit more

00:32:38.420 --> 00:32:46.300
smarter. So it will try to predict what's the item from the autocomplete list that you are most likely

00:32:46.300 --> 00:32:52.300
to choose. And it will move this item to the top of this list and add this nice star. And it actually

00:32:52.300 --> 00:32:56.240
works pretty well from what I noticed. So I can actually highly recommend it.

00:32:56.240 --> 00:33:01.200
Yeah, cool. Yeah, uses machine learning across a bunch of open source libraries to say, well,

00:33:01.200 --> 00:33:06.440
if you're using SQLAlchemy, these are the most common functions to be called in these situations.

00:33:06.440 --> 00:33:11.780
And it tries to understand the context rather than just, here's the whole list, whatever.

00:33:11.780 --> 00:33:15.400
Yeah. From other interesting stuff, there is, for example, autodoc string.

00:33:15.840 --> 00:33:22.700
So if you define your function, you can just press enter, add triple quote, then press enter again,

00:33:22.700 --> 00:33:27.400
and it will put some scaffolding for the documentation. It will also take the arguments

00:33:27.400 --> 00:33:31.320
from the function signature and put it in the documentation. So it will make your life much

00:33:31.320 --> 00:33:36.000
easier. If you're using type hints, it will also detect that it will also detect the type hints and put

00:33:36.000 --> 00:33:38.560
them in the correct place. Oh, yeah, that's cool. That's also nice.

00:33:39.060 --> 00:33:45.760
From non Python specific extensions, I really like bookmarks, because it makes my it makes moving

00:33:45.760 --> 00:33:49.760
around the code much easier. So we just put a bookmark in different files, and you can easily

00:33:49.760 --> 00:33:56.900
switch between them. And yeah, get lens is nice. Oh, yeah, get lens is a massive extension. I mean,

00:33:56.900 --> 00:34:03.580
the amount of features it has, it's incredible. And just using very small subset, but really gives you a

00:34:03.580 --> 00:34:09.580
really good overview of what's going on in your project, you can open repositories, comments,

00:34:09.580 --> 00:34:15.540
branches, merge requests, whatever you want in the GitLab, GitHub, it has everything.

00:34:15.540 --> 00:34:23.920
Yeah, I remember looking at some CPython source code with get lens installed in VS Code. And it had

00:34:23.920 --> 00:34:30.180
something like this file change from really long ago by Gito Van Rossum or something like that. I'm like,

00:34:30.180 --> 00:34:33.360
oh, okay, this is still like some of the original code right here. This is cool.

00:34:33.360 --> 00:34:40.680
Talk Python To Me is partially supported by our training courses. How does your team keep their

00:34:40.680 --> 00:34:45.800
Python skills sharp? How do you make sure new hires get started fast and learn the Pythonic way?

00:34:45.800 --> 00:34:52.340
If the answer is a series of boring videos that don't inspire, or a subscription service you pay way

00:34:52.340 --> 00:34:57.800
too much for and use way too little, listen up. At Talk Python Training, we have enterprise tiers for

00:34:57.800 --> 00:35:03.240
all of our courses. Get just the one course you need for your team with full reporting and monitoring.

00:35:03.240 --> 00:35:08.760
Or ditch that unused subscription for our course bundles, which include all the courses and you pay about the

00:35:08.760 --> 00:35:15.900
same price as a subscription once. For details, visit training. talkpython.fm/business or just

00:35:15.900 --> 00:35:18.560
email sales at talkpython.fm.

00:35:21.060 --> 00:35:48.380
Yeah, you also have error lens. Yeah, so error lens, you can use it to customize how you want to see the errors. So by default, you're going to have like a separate tab in VS Code that lists all the errors. But I like to see the squiggly brackets, the squiggly underscore, whenever an error happens. It will also let you customize if you don't want to see the info or hints, you can put the font size to zero and it will completely make them disappear.

00:35:48.580 --> 00:35:51.120
So it's a nice way to customize your errors.

00:35:51.120 --> 00:35:55.820
Yeah, yeah, very cool. Maybe the last one to just give a shout out to is Jumpy.

00:35:55.820 --> 00:36:15.520
Oh, yeah, this is a really cool one. Basically, how Jumpy works is that you define a keyboard shortcut, you press it, and then it will show like a two letter, small two letter snippets, basically at every word in your current screen. And then if you press those two letters, your cursor will jump to that place.

00:36:15.800 --> 00:36:23.240
So it's like incredibly convenient way to move around your code, as long as you remember to use it, because I always forget it.

00:36:23.740 --> 00:36:32.680
Yes. And we were talking before, like, I always forget this as well. I have Ace Jump installed on PyCharm. And I can hit Ctrl semicolon and then type a few characters.

00:36:33.460 --> 00:36:47.000
And it's kind of like find, it'll highlight all the stuff that would match that substring. But as you said, it puts one or two characters next to those things. And if you want to go to the third, like if you're doing a request.get, you could do the quick search for G.

00:36:47.400 --> 00:36:55.900
And you want to go to the third get, it would highlight that there might be like, you might press, like why or something to get there. And it'll just immediately take you there with no mouse. It's beautiful.

00:36:56.740 --> 00:37:02.920
And I never use it. I hardly ever use it, let's say. That's my new thing. I'm going to try to start using this more because it's awesome.

00:37:02.920 --> 00:37:17.060
All right. Well, that's probably enough for the editor. But this is a whole lot of stuff, a whole lot of customization and specialization to really get the editor and the tools and the stuff more than just, hey, you should use VS Code, but really just set it up the way that you like.

00:37:17.120 --> 00:37:22.120
So that's good advice. Then another problem, especially beginners are going to hit straight away.

00:37:22.120 --> 00:37:37.060
And this one is tricky because it varies on the platform is, do you have Python? What version of Python is it? Is it the right version? Can you install packages into it? Should you install packages into it? And so on and so on, right?

00:37:37.060 --> 00:37:43.880
Yeah. So that's the next topic I talk about after the VS Code, basically how to manage different Python versions and packages.

00:37:44.740 --> 00:37:52.580
And why the first point is why you should not use the system version of Python, because once you mess it up, you're going to mess a lot of things on your computer.

00:37:52.580 --> 00:38:01.080
So one of the first things that you want to do is to install some custom Python manager and switch Python version to this custom version.

00:38:01.080 --> 00:38:12.040
I think back in the days when I was still using Linux and I was still a beginner programmer, I tried to update the global Python version, my operating system, and that broke a lot of stuff.

00:38:12.040 --> 00:38:13.420
Yeah, I can imagine it does.

00:38:14.080 --> 00:38:41.040
Yeah, these days when I'm on virtual machines, I will set up a virtual environment. Usually the virtual machine is meant to run one app anyway. So I'll set up a virtual environment for that app. And then in my RC file, when I log in, I'll have it activate that virtual environment. So if I accidentally type pip install something or mess with it, it's just going to mess with that virtual environment. It's very rare. I want to log in and change the system Python. It's very common. I want to log in and change the virtual environment for that particular app that server is dedicated to.

00:38:41.040 --> 00:38:45.500
Actually, there is a setting for pip that will prevent pip running outside of the virtual environment.

00:38:45.500 --> 00:38:46.680
There is an option.

00:38:46.680 --> 00:38:46.860
Oh, really?

00:38:47.000 --> 00:38:47.480
I said, yeah.

00:38:47.480 --> 00:38:49.000
Oh, that's cool.

00:38:49.000 --> 00:38:55.440
I don't remember it by heart, but I actually have it on my blog. I discovered it some time ago and I was super happy about it.

00:38:55.440 --> 00:39:10.140
Nice. Yeah, that's really cool. A couple of suggestions that you have here. Obviously, we have VE and V, like Python 3-M VE and V type of thing, the built-in, which is nice that it's built-in. But you didn't start there. You started with PyE and V.

00:39:10.820 --> 00:39:13.040
Tell us about why you chose that and what you're doing with it.

00:39:13.040 --> 00:39:25.920
Yeah. So I wanted to show first how you can manage different Python versions and then how you can manage different Python dependencies. So basically, PyE and V is a tool that lets you install different Python versions on your computer.

00:39:26.380 --> 00:39:33.480
So let's say you're on a Mac, so your system Python is 2.7. For whatever reason, it's still there.

00:39:33.480 --> 00:39:41.580
That's crazy. And they're going to take it away in the next version. But they're not replacing it with 3. They're just going to take Python away or something to that effect. I remember them announcing.

00:39:41.580 --> 00:39:42.220
Oh, cool.

00:39:42.360 --> 00:39:46.340
So I don't know if that's better or worse. But anyway, it's not going to have Python 2 at some point.

00:39:46.340 --> 00:39:48.200
It's probably going to break a lot of stuff.

00:39:48.200 --> 00:40:01.960
Yeah, I think it probably will. That's Apple. All right. Sorry. Anyway, didn't mean to derail you. So you've got the wrong version of Python if you're on Mac. If you're on Windows, these days they have the Windows Store little pop-up thing, which is cool, but also confusing to people.

00:40:02.520 --> 00:40:05.140
And on Linux, who knows? It depends on your version, right?

00:40:05.140 --> 00:40:16.260
Yeah. For example, if you want to install a different version of Python, you can install it using, well, just some standard Python installation. But PyE is much better because it lets you easily switch between versions.

00:40:16.260 --> 00:40:30.960
So if you're using just the latest Python all the time, it might not be a big of a deal for you. But for example, I'm working on a different project. One project is using Python 3.6. One is using Python 3.8. And I want to find a way to easily switch between those two versions.

00:40:30.960 --> 00:40:52.160
That's what I would use PyEnf for. So you install PyEnf, and then you say PyEnf install 3.8.3. And that's going to install this version of Python. And then I say PyEnf install 2.7. And it's going to install 2.7 as well. It's going to be different than the system one. It's going to be managed by PyEnf.

00:40:52.400 --> 00:41:04.680
And now let's say I'm working on a project with Python 2.7. All I have to do is to say PyEnf global 2.7. And just like that, my global Python version is 2.7.

00:41:04.800 --> 00:41:22.860
Yeah, I wasn't aware of this feature of PyEnf, where you can basically shadow what Python means on your machine and cycle it. So with PyEnf, you install the different Pythons. You could have, you know, 3.7, 3.8, 3.9, maybe, if you get, if it'll pull the beta version 2.7.

00:41:22.860 --> 00:41:36.200
But then you can say PyEnf global Python 3.6, PyEnf global Python 3.8. And then if you just type the word Python, that means that version you set it to, which is pretty awesome, actually.

00:41:36.200 --> 00:41:49.260
Yeah, it is. And it's actually done in a pretty clever way. So it's using the system of shims, or how is it pronounced, that basically it prepends to your path variable, this PyEnf Python version.

00:41:49.260 --> 00:41:59.960
So whenever you type Python, your computer is going to look for Python binary, and it's going to find on your path this shimmed version, this shadowed version, and it's going to use this one.

00:41:59.960 --> 00:42:03.340
It's a pretty non-intrusive version.

00:42:03.340 --> 00:42:16.700
So that lets you get some version that, the version that you want onto your system. And then you went on, I think you were using virtual, just VNV, not the built-in virtual environment capabilities of PyEnf, right?

00:42:16.700 --> 00:42:32.140
I showed how to use the VNV module from Python, because, well, it's built in Python, so that's the easiest way. But I'm not using this in my daily work. And so I wanted to show, I think I'm using virtual fish right now, which is a wrapper over virtual environment.

00:42:32.140 --> 00:42:33.880
Right, but it works in the fish shell, yeah.

00:42:34.020 --> 00:42:46.940
Yeah, it's the same as virtual env and virtual env wrapper for non-fish shells. And what I really like about this is that it has a set of commands to list all your virtual environments, to create them, to remove them.

00:42:47.420 --> 00:42:54.900
And so it's much easier to manage those virtual environments. And I prefer it to have like one separate folder for all of those.

00:42:54.900 --> 00:42:55.280
Yeah.

00:42:55.280 --> 00:43:10.520
And I also wanted to show people that there are different tools than the built-in Python module, because I see a lot of people who are teaching Python, they show the built-in Python tools, but there are a lot of other cool tools that you can use, and maybe you'll like them more.

00:43:10.660 --> 00:43:31.900
Yeah, for sure. And then the last thing you talked about here was PipX, which we already covered, so I don't want to spend too much time on it, really. Although I do want to throw out one tip for people, because something that has been driving me crazy about PipX is I install Python through Homebrew, which I don't know if it's the best way. Maybe I should be using PyInf, but for whatever reason, that's what I've been doing. So it's that way.

00:43:31.900 --> 00:43:48.900
And when Homebrew upgrades Python, PipX virtual environments become invalid for some reason. I don't know why. But with PipX, you can just do a PipX reinstall-all, no, reinstall-all, and it'll basically tear them all down and recreate them.

00:43:48.900 --> 00:43:57.460
So that'll kind of fix when these shims get out of sync with PipX and whatnot. So maybe that'll help some folks out there. But yeah, that's a cool tool.

00:43:57.840 --> 00:44:11.080
Next up, we've got our runtime, there's Python's pick, we've got our editor all set up. Now it's time to start creating projects. And you already mentioned cookie cutter, but yeah, cookie cutter was what came to mind here, right?

00:44:11.080 --> 00:44:25.300
Yeah. So I was thinking, because people are wondering, people are often asking what's the best way to structure Python project. And pretty much there is no best way. But if you really don't know where to start, there is this tool called cookie cutter.

00:44:26.080 --> 00:44:48.320
And basically what it does is, you're provided with some template that someone created before you. And it's going to generate a scaffolding of the project for you. But it's going to actually ask you some questions on the way. So if someone was giving you the option of different databases, cookie cutter is going to ask you, do you want to use MySQL? Do you want to use Postgres? Do you want to use SQLite?

00:44:48.320 --> 00:45:00.580
And depending on what your answer is, cookie cutter will define a different config file. So all those things have to be first defined by the person who created the template. So cookie cutter doesn't do any magic.

00:45:01.120 --> 00:45:24.680
But if you're new, you can go to cookie cutter website, and you will find some very popular templates, let's say for a Django project, or for a Python package, or for a Flask project, you can take the most popular one, provide it to the cookie cutter, and it will generate base for your project that many, many people before you have used that is usually very well documented.

00:45:25.060 --> 00:45:30.800
It has some hints like, well, how to set up CI or how to deploy some stuff.

00:45:30.800 --> 00:45:50.400
Yeah, those are really, really nice. And I guess it depends on what you're building. But often, you know, say you're building a package, you want to have a setup pie, and the various other things that go along with that, right? And it'll automatically pre populate that when you just run cookie cutter, you know, create me a packet, a Python package thing that's called this.

00:45:50.740 --> 00:46:10.880
Yeah, it's really nice. I like it quite a bit. Again, those are super, they can be super opinionated. So depending on how, how much you align with what they're trying to do, it may work well or not. But there's many, many different templates. So you can even just search GitHub for them, and just point cookie cutter at a GitHub repo, long as that repo is public and has, basically is a template.

00:46:10.880 --> 00:46:29.040
Yeah, exactly. And as you said, they are very opinionated. But in my opinion, it's opinionated. It's much easier to find a cookie cutter template and actually remove stuff than to start from scratch. And when you're staring at your blank editor, trying to come up with some ideas how to set up things.

00:46:29.220 --> 00:46:38.220
Yeah, absolutely. I totally agree. Find a good cookie cutter template and roll with that as well. Maybe it even sets up things like black and pre commit hooks and so on for you.

00:46:38.220 --> 00:46:45.700
Yeah, exactly. Many templates already follow some good practices for installing some linting and formatting tools for you.

00:46:45.700 --> 00:47:02.060
Yeah. Another thing that you spoke about is the REPL, the redeveloped print loop, you know, what you get when you just type Python. And just typing Python is okay. But honestly, it's, it leaves a lot to be desired. Like even just up arrowing through your history, it repeats the line.

00:47:02.060 --> 00:47:21.860
Like if you wrote a block of three, three lines, like you've got to like re arrow through them to get to if you want to go back to that group, right? That's kind of annoying. So there's other options that you can use for your rebels that you suggest or talk about at least I noticed that a lot of people who do some tutorials or show some presentations about Python, they use the default Python REPL.

00:47:23.060 --> 00:47:43.760
And if imagine you're a new person who doesn't know there are different Python REPLs, you're gonna get stuck with Python REPL. And as you mentioned, it's not the most user friendly REPL. I mean, it's there, it's fine to use it. And it's not Python core developers job to improve it. But there's different tools that you can that are basically a drop in replacement.

00:47:44.060 --> 00:47:58.700
And for example, one of them, and my favorite one is IPython. Basically, that's the Python REPL on steroids. So you just install it. And instead of typing Python, you just type IPython. So there is like almost no change for you.

00:47:59.240 --> 00:48:18.560
And out of the box, you got like syntax highlighting, you got top auto completion, you it's much smarter about when you press enter, because when you start typing a function definition, and you press enter, it's gonna actually indent the next line and it's gonna detect that you're still typing this function, not that you just finished typing.

00:48:19.240 --> 00:48:36.160
And for example, you can append a question mark. So you will see the signature of a function or you can append two question marks, you will see the whole whole code source code of a given function. So I'm actually using IPython to read the documentation. Also the time is really cool.

00:48:36.160 --> 00:48:46.900
Yeah, I didn't know about this feature. This is really cool. So if I had a variable like x equals a string, something just quote something, right? Then I hit enter, then I can say x question mark, and I'll say this is a string.

00:48:46.900 --> 00:48:56.460
It's string form is whatever the string is, its length is what it is, and it'll list out the doc string. And yeah, that's super nice that you can just ask it questions about what it can do. Yeah, very nice.

00:48:56.460 --> 00:49:20.480
Yeah, and there's a lot of cool things that you can do. For example, you can edit a file. And for example, you can tell it to edit command or a function, and IPython will try to figure out where this function is defined. And if it's from like some package install with peep, it will actually open the file in this virtual environment that contains this given function, and it lets you edit it.

00:49:20.620 --> 00:49:38.680
Oh, wow. That's pretty awesome. Cool. So IPython is definitely there. And it's got this kind of Jupyter feel, right? It's like, basically a little bit like Jupyter in the terminal or command prompt. But you also talked about two other ones, ptpython and bpython.

00:49:38.680 --> 00:50:01.520
Yeah, so there is ptpython. I think the name stands for prompt toolkit Python, and bpython. They are both much lightweight approached in IPython. So they are between IPython and Python, they have syntax highlighting, they have some tab completion. But they don't have as many features as IPython. But for example, they have different features.

00:50:01.520 --> 00:50:27.100
I think it's bpython that lets you rewind code. So if you type something and you realize you made a mistake, and you want to actually undo the last command, because I don't know, you close the file, or you just deleted something from the array, you can actually undo this, there is a keyboard shortcut to undo the last command, and then you can continue working on the file, or whatever. So both of them are much better than the build in Python REPL.

00:50:27.100 --> 00:50:54.880
Yeah, I totally agree. And if you pull up ptpython, you can have an emacs mode, you can have it in VI mode, you can go and pull up all sorts of things like enable fuzzy completion and all sorts of cool stuff, syntax highlighting. Really, really nice. I haven't done as much with bpython, but they both seem, you know, much nicer to me, in that you get autocomplete, and you get better editing and whatnot.

00:50:54.880 --> 00:51:09.740
Yeah, so certainly good recommendations there. I guess, probably not quite as much to discuss with tests in some regard, right? Like you said, okay, well, people are using pytest, you should probably use pytest. That seems to be pretty good consensus these days.

00:51:09.740 --> 00:51:30.260
Yeah, it's a pretty solid choice. I also explained why it's better to use pytest than the build in unit test library. I mean, the unit test library is pretty good, but it also suffers from the same problem as the Python REPL. So it's kind of basic. And at the same time, I find it a bit over complicated, because you have all those different assert types.

00:51:30.640 --> 00:51:35.360
While with pytest, you just have one assert. And basically, that's all you need for most of the time.

00:51:35.360 --> 00:51:41.200
Yeah. One thing that maybe is not as obvious is how to get the test to run in VS Code.

00:51:41.200 --> 00:51:43.840
Ah, yeah. So that's a pretty cool feature of VS Code.

00:51:43.840 --> 00:51:50.980
I think when you install Python extension, it's going to ask you what test framework you want to use.

00:51:51.040 --> 00:51:54.200
So you select pytest, and then you will have the sidebar with tests.

00:51:54.200 --> 00:52:06.920
And then you can just click Discover Tests, and it will go through your project and try to find all the tests, all the files and all the functions that are matching the pytest convention.

00:52:07.820 --> 00:52:11.480
And then in the sidebar, you will see all those tests, you can run them.

00:52:11.480 --> 00:52:16.140
And you will see if it's passing or if it's failing, you can debug them.

00:52:16.140 --> 00:52:23.640
So if the test was failing, it will actually stop in the place where the assertion is failing or when there is some problem.

00:52:24.460 --> 00:52:36.880
And then actually, if you open this file in the VS Code, you will see like a small text above each test function that will tell you you can run it or you can debug it.

00:52:36.880 --> 00:52:38.640
So you don't even have to go to the sidebar.

00:52:38.640 --> 00:52:45.380
You can just click in your text in your code editor, and you can run the test directly from the test file.

00:52:45.380 --> 00:52:47.760
Yeah, that's super cool. And it just runs that one test, right?

00:52:47.760 --> 00:52:48.880
Yeah, exactly.

00:52:48.880 --> 00:52:53.080
All right. Another thing that you suggested people do is that they write documentation.

00:52:53.080 --> 00:52:57.720
And I guess this probably varies depending on what the goal of the project is.

00:52:57.720 --> 00:53:02.900
If the goal is just like a small little app for just you, maybe it doesn't need documentation.

00:53:02.900 --> 00:53:04.980
But a lot of times it will.

00:53:04.980 --> 00:53:06.680
What was your advice there?

00:53:06.680 --> 00:53:08.580
You already sort of mentioned Autodoc.

00:53:08.580 --> 00:53:15.060
I know that was a plugin for the extensions, but there's also Autodoc for APIs, right?

00:53:15.060 --> 00:53:18.920
Yeah. So for documentation, I recommend Pretty Standard Sphinx.

00:53:18.920 --> 00:53:21.600
It's a very good tool used by many projects.

00:53:21.600 --> 00:53:28.800
And even with the read the doc project, if your project is open source, then you can host your documentation for free.

00:53:28.800 --> 00:53:29.820
So this is really nice.

00:53:29.820 --> 00:53:32.680
So yeah, for documentation, I would use Sphinx.

00:53:32.680 --> 00:53:37.000
And then as you mentioned, there is this Autodoc plugin that you can add to Sphinx.

00:53:37.320 --> 00:53:45.380
And it will automatically generate the documentation for your API, which is really cool because it saves you a lot of repetitive code.

00:53:45.380 --> 00:53:52.100
Yeah, right. If you're already going to write it for the help string in your library, you might as well just get it to write, you know, copy it over there.

00:53:52.240 --> 00:53:56.520
Exactly. And there are also some other cool plugins.

00:53:56.520 --> 00:54:10.980
So if you have an example of code in your doc string, quite often it can get out of date because, I mean, documentation is often, well, outdated.

00:54:11.460 --> 00:54:21.140
So you can actually install a plugin that will try to detect code snippets inside the documentation and it will actually run those code snippets, comparing it to the next line in the documentation.

00:54:21.140 --> 00:54:24.060
And if it's not matching, it's going to report you an error.

00:54:24.220 --> 00:54:28.480
Yeah, that's cool. So if you've got an example in your doc string, like here's how it's supposed to work.

00:54:28.480 --> 00:54:31.080
And if it doesn't do that, that's a problem. Nice.

00:54:31.080 --> 00:54:39.520
So one other thing that you did talk about in this section that I thought was worth mentioning is what should you put into your documentation?

00:54:39.520 --> 00:54:48.660
And you talked about someone, Daniela, I don't remember what the last name was, who talked about four different categories you might have,

00:54:48.660 --> 00:54:56.060
like tutorials, how-to guides, explanations and references to help give you some structure to think about what you might write.

00:54:56.060 --> 00:55:02.260
Yeah. So I saw this really good talk from Daniela Procida and he splits the documentation into four parts.

00:55:02.260 --> 00:55:04.060
First is tutorials.

00:55:04.060 --> 00:55:10.400
So people who are like complete beginner can come to your project and see, OK, how I can start using it.

00:55:10.400 --> 00:55:11.940
Then you have how-to guides.

00:55:11.940 --> 00:55:14.740
So recipes for solving a specific problem.

00:55:15.160 --> 00:55:18.940
So if you have a very specific problem, you can find it probably there.

00:55:18.940 --> 00:55:20.580
Then you have explanations.

00:55:20.580 --> 00:55:27.340
So this part actually explains how your project works, how each parts interact with each other.

00:55:27.340 --> 00:55:32.020
And then finally you have reference, which is like a Wikipedia page for your project.

00:55:32.020 --> 00:55:37.640
So all the terms, all the classes, whatever they are defined there.

00:55:37.640 --> 00:55:42.060
Maybe the why, like why did we put this here or the history of it or something.

00:55:42.060 --> 00:55:42.300
Yeah.

00:55:42.300 --> 00:55:42.620
Yeah.

00:55:42.620 --> 00:55:44.040
OK, that's really helpful.

00:55:44.600 --> 00:55:50.580
And then last thing on the documentation side, you mentioned that you can get a, you know, normally you would write this in restructured text.

00:55:50.580 --> 00:55:57.000
But Markdown is the current thing that people like to use the most, I think.

00:55:57.000 --> 00:55:59.520
There's a Markdown extension you can get as well.

00:55:59.520 --> 00:56:06.000
Yeah, there is a Markdown extension for Sphinx that you can install and it will let you write documentation in Markdown.

00:56:06.000 --> 00:56:06.360
Yeah.

00:56:06.360 --> 00:56:09.140
We even have pypi.org supports Markdown these days.

00:56:09.140 --> 00:56:09.480
Yeah.

00:56:09.480 --> 00:56:09.900
Yeah.

00:56:09.900 --> 00:56:10.220
Sweet.

00:56:10.880 --> 00:56:21.240
And then I also mentioned that if you're writing some rest APIs, there are tools like Swagger or Redog that you can use and they will also generate like really nice documentation for your APIs.

00:56:21.240 --> 00:56:21.660
Yeah.

00:56:21.660 --> 00:56:27.660
If you use frameworks like FastAPI, it's like basically built in and stuff like that, which is really, really cool as well.

00:56:27.660 --> 00:56:30.920
It depends on what you've got underneath the covers there.

00:56:30.920 --> 00:56:31.300
Cool.

00:56:31.300 --> 00:56:34.000
So last thing, got everything set up.

00:56:34.000 --> 00:56:35.720
You've got your package structure.

00:56:35.720 --> 00:56:38.260
You got your documentation, presumably written subcode.

00:56:38.260 --> 00:56:40.100
The last thing, you've got to deploy your app.

00:56:40.100 --> 00:56:40.380
Yeah.

00:56:40.480 --> 00:56:47.140
So I was hesitating if I should include this section, but since it was pre-recorded, I still had some time.

00:56:47.140 --> 00:56:56.940
So I decided to give people like a very simple Docker file that they can use to take this project that we are building and to deploy it as a Docker container.

00:56:56.940 --> 00:57:00.420
So I explained like very briefly what Docker is.

00:57:00.620 --> 00:57:07.100
I started by showing how to make a Docker file, which is intentionally kind of bad Docker file.

00:57:07.100 --> 00:57:09.660
Then I explained what are problems with this Docker file.

00:57:09.660 --> 00:57:16.960
And then finally, I showed them like a much better Docker file that they can use, but it's still a very basic one.

00:57:16.960 --> 00:57:17.300
Yeah.

00:57:17.300 --> 00:57:17.780
Cool.

00:57:17.780 --> 00:57:22.180
Then you could put it in presumably in like a Kubernetes cluster or something like that if you want.

00:57:22.180 --> 00:57:22.360
Yeah.

00:57:22.360 --> 00:57:24.060
There's even this website played with Docker.

00:57:24.060 --> 00:57:29.160
So at the end of the workshop, I'm showing how to use this website to actually deploy our application.

00:57:29.660 --> 00:57:38.040
It's deployed in this like terrible URL that it's going to, and the container, it's only there for four hours, but it's there.

00:57:38.040 --> 00:57:38.420
It's online.

00:57:38.420 --> 00:57:39.320
You can share it with someone.

00:57:39.320 --> 00:57:39.720
It gets you the idea.

00:57:39.720 --> 00:57:40.620
Yeah, exactly.

00:57:40.620 --> 00:57:41.120
That's awesome.

00:57:41.120 --> 00:57:44.300
Well, that's quite a whirlwind tour.

00:57:44.300 --> 00:57:49.500
All the tools that you might use, but I think it's a lot of good advice.

00:57:49.500 --> 00:57:58.900
It exposes people who are maybe a little bit new to putting together these projects and closes that gap from, I know the language to now I know how to actually create and ship applications.

00:57:58.900 --> 00:58:00.420
In a more professional way.

00:58:00.420 --> 00:58:00.680
Yeah.

00:58:00.680 --> 00:58:01.040
Yeah.

00:58:01.040 --> 00:58:01.460
Yeah.

00:58:01.460 --> 00:58:02.100
Pretty neat.

00:58:02.100 --> 00:58:04.100
So thanks for putting that tutorial together.

00:58:04.100 --> 00:58:09.560
And because it's on PyCon online, people can go take the workshop, right?

00:58:09.560 --> 00:58:14.440
It's two and a half hours and it's easy to follow along and yeah, nicely produced.

00:58:14.440 --> 00:58:15.180
All right.

00:58:15.180 --> 00:58:20.040
Well, before we call it wraps, even though we are getting long on time here, two final questions.

00:58:20.420 --> 00:58:22.680
First, maybe this is a hint.

00:58:22.680 --> 00:58:28.000
I'm not sure how much time we spend on VS Code, but if you're going to write some Python code, what editor do you use?

00:58:28.000 --> 00:58:29.560
That's a good question.

00:58:29.560 --> 00:58:34.820
Now, so it's VS Code and for like some short edits, it's Vim.

00:58:34.940 --> 00:58:35.580
Right, right on.

00:58:35.580 --> 00:58:43.000
And then notable PyPI package, you know, something that maybe you've run across recently that's really cool that people don't know about.

00:58:43.080 --> 00:58:45.640
So I'm pretty sure you already know what I'm going to say.

00:58:45.640 --> 00:58:47.060
It's IPython.

00:58:47.060 --> 00:58:51.280
So I'm not a contributor or anything, but I really love it.

00:58:51.820 --> 00:59:00.820
And actually, I was writing a blog post a few weeks ago and I put an introduction, something along the lines, along those lines that I really like IPython.

00:59:00.820 --> 00:59:07.000
And if I ever got invited to your podcast, not that I have anything to talk about, I will mention IPython.

00:59:07.000 --> 00:59:09.400
So I'm here and I'm mentioning IPython.

00:59:09.400 --> 00:59:13.020
But no, seriously, this is a really great package and I use it all the time.

00:59:13.020 --> 00:59:14.140
Yeah, it's super cool.

00:59:14.140 --> 00:59:16.880
And I really have not used it enough as a REPL.

00:59:16.880 --> 00:59:19.080
So I should definitely be thinking more about that as well.

00:59:19.080 --> 00:59:19.660
Awesome.

00:59:19.660 --> 00:59:20.380
All right.

00:59:20.380 --> 00:59:21.360
Well, final call to action.

00:59:21.360 --> 00:59:25.340
People are excited about this, all the ideas we talked about in the tutorial.

00:59:25.340 --> 00:59:27.960
How do they, what should they do now?

00:59:27.960 --> 00:59:28.780
Well, start building.

00:59:28.780 --> 00:59:37.600
So you can just, you can follow this tutorial and this will give you a pretty solid base for any projects that you want to build on, build from it.

00:59:37.600 --> 00:59:48.100
And if you know someone who's learning Python and who's not sure how to start building stuff or who wants to build something in Python, just please tell them about this video.

00:59:48.100 --> 00:59:51.240
I mean, it's quite long, but it's free.

00:59:51.240 --> 00:59:55.440
And at the end, you'll have a very solid scaffolding of a Python project that you can use.

00:59:55.440 --> 00:59:55.680
Yeah.

00:59:55.680 --> 00:59:56.640
Good advice.

00:59:56.840 --> 00:59:58.540
Thanks for being on the show and sharing it with everyone.

00:59:58.540 --> 00:59:59.260
Thank you very much.

00:59:59.260 --> 01:00:00.720
Thank you for inviting me here.

01:00:00.720 --> 01:00:01.440
Of course.

01:00:01.440 --> 01:00:01.740
Bye-bye.

01:00:01.740 --> 01:00:05.580
This has been another episode of Talk Python To Me.

01:00:05.580 --> 01:00:12.200
Our guest on this episode was Sebastian Witwoski, and it's been brought to you by Linode and us over at Talk Python Training.

01:00:12.840 --> 01:00:16.880
Start your next Python project on Linode's state-of-the-art cloud service.

01:00:16.880 --> 01:00:21.200
Just visit talkpython.fm/Linode, L-I-N-O-D-E.

01:00:21.200 --> 01:00:24.500
You'll automatically get a $20 credit when you create a new account.

01:00:24.500 --> 01:00:26.560
Want to level up your Python?

01:00:26.560 --> 01:00:31.440
If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

01:00:31.440 --> 01:00:39.580
Or if you're looking for something more advanced, check out our new Async course that digs into all the different types of Async programming you can do in Python.

01:00:39.580 --> 01:00:44.260
And of course, if you're interested in more than one of these, be sure to check out our Everything Bundle.

01:00:44.260 --> 01:00:46.140
It's like a subscription that never expires.

01:00:46.140 --> 01:00:48.280
Be sure to subscribe to the show.

01:00:48.280 --> 01:00:50.780
Open your favorite podcatcher and search for Python.

01:00:50.780 --> 01:00:51.920
We should be right at the top.

01:00:51.920 --> 01:01:00.920
You can also find the iTunes feed at /itunes, the Google Play feed at slash Play, and the direct RSS feed at /rss on talkpython.fm.

01:01:01.320 --> 01:01:02.980
This is your host, Michael Kennedy.

01:01:02.980 --> 01:01:04.480
Thanks so much for listening.

01:01:04.480 --> 01:01:05.540
I really appreciate it.

01:01:05.540 --> 01:01:07.300
Now get out there and write some Python code.

