WEBVTT

00:00:00.001 --> 00:00:04.500
When you think of networks, you probably think of physical things, routers, switches, firewalls,

00:00:04.500 --> 00:00:09.360
and that kind of stuff. But increasingly, network engineers are managing massive networks that are

00:00:09.360 --> 00:00:14.300
better managed via software than by admin applications. On this episode, you'll meet

00:00:14.300 --> 00:00:20.100
David Barroso, who created Napalm, a vendor-neutral, cross-platform, open-source project that provides

00:00:20.100 --> 00:00:28.720
a unified API to network devices. This is Talk Python To Me, episode 128, recorded July 17, 2017.

00:00:28.720 --> 00:00:47.700
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the

00:00:47.700 --> 00:00:52.320
ecosystem, and the personalities. This is your host, Michael Kennedy. Follow me on Twitter,

00:00:52.320 --> 00:00:57.220
where I'm @mkennedy. Keep up with the show and listen to past episodes at talkpython.fm,

00:00:57.220 --> 00:01:03.500
and follow the show on Twitter via at talkpython. This episode is brought to you by Linode and

00:01:03.500 --> 00:01:09.140
Rollbar. That's right. Welcome to Linode, who has joined Talk Python To Me as a major sponsor.

00:01:09.140 --> 00:01:13.900
Be sure to check out what both of them are offering during their segments. It really helps support the

00:01:13.900 --> 00:01:19.020
show. David, welcome to Talk Python. Thank you for having me here. It's been a long time coming that

00:01:19.020 --> 00:01:24.840
we've talked about Python, all sorts of things, but no networking really, right? And so you're here to

00:01:24.840 --> 00:01:28.740
help us fix that problem and talk about Python and network programming.

00:01:28.740 --> 00:01:30.700
Yeah, here I am. Happy to follow.

00:01:30.700 --> 00:01:36.340
Yeah, it's going to be great. So we're going to talk about your project, Napalm, and you're doing a bunch of

00:01:36.340 --> 00:01:40.800
exciting stuff there. It seems like it's still going strong. It's been around for a few years. But before we get

00:01:40.800 --> 00:01:46.100
into all that, let's start with your story. How did you get into programming, networking, Python, that sort of stuff?

00:01:46.220 --> 00:02:11.620
Well, my background is network engineering, but I haven't always been a network engineer. I started like many, many years ago, more like systems engineer. So just dealing with Linux, Windows, Apache, Nginx, whatever. Then I was just doing, well, anything, Bash, Perl, Python, whatever you had to use to the job.

00:02:11.820 --> 00:02:29.660
Then at some point, I had to move some data I had on a wiki page into something I could actually query. So I was just investigating what the best tool for that would be. And I came into some page that was actually talking about Django.

00:02:29.660 --> 00:02:55.900
And I thought that was kind of like the perfect fit. And so I could actually say that Django was what really introduced me into Python and drove me to learn more about it. And then just like regular evolution, just career path, I just landed more into the networking side of things, which made me more focused on the network stuff, rather than on systems or actual Python or something.

00:02:55.900 --> 00:03:00.060
But Python has been always there just trying to help me get the job done somehow.

00:03:00.060 --> 00:03:11.680
I see. That's really cool. So you've done a lot of work with these systems engineering, with configuring services like Nginx and things like that. And just like Python has always played an important role in sort of making that work.

00:03:11.680 --> 00:03:22.880
Yeah, I remember using CFEngine like more than a decade ago and doing a lot of Perl. Like back in the day, it was mostly Perl. But likely, it's not that much Perl nowadays. It's Python.

00:03:22.900 --> 00:03:32.620
Yeah, I definitely think there's less Perl in the world than there used to be. That's good. And so what are you doing day to day? Like you're doing network stuff for your main job, right?

00:03:32.620 --> 00:03:46.180
Yeah, so I'm a network systems engineer at Fastly. I spend most of my day both automating the network and building a control plane where we can actually integrate with the application.

00:03:46.180 --> 00:03:56.140
So it's not the network is not only automated, but it's somehow directed by the application. The application can say like, oh, yeah, I want to send this packet via this path.

00:03:56.180 --> 00:04:01.140
I want to send this other packet via this other path. So I'm working on these two areas.

00:04:01.140 --> 00:04:05.780
Yeah, and that's pretty major stuff. I'm not sure everyone knows what Fastly is.

00:04:05.780 --> 00:04:07.680
So maybe give them the quick elevator pitch.

00:04:07.680 --> 00:04:16.240
Well, we are a CDN. The cool thing about Fastly is that we expose all of our services and configurations by an API.

00:04:16.460 --> 00:04:30.060
So you can actually integrate with us. So it's not like the traditional CDN where you just send your objects and they catch them until you can send a new object and then they catch that as well.

00:04:30.060 --> 00:04:44.020
So it's a matter of, yeah, I want to be able to respond in this way if the HTTP headers are like this. And you can actually do that in real time just by configuring it via the API.

00:04:44.020 --> 00:04:47.360
That's kind of cool. You're a web developer. You should check it out.

00:04:47.360 --> 00:04:51.620
Yeah, that sounds really cool. So you guys probably handle a little bit of network traffic, huh?

00:04:51.740 --> 00:05:04.540
Yeah, yeah, yeah. We do a lot. Okay, I don't recall the numbers exactly, but I think it's about 5 million requests per second and a few terabits of bandwidth.

00:05:04.540 --> 00:05:07.180
So yeah, it's quite a lot of traffic.

00:05:07.180 --> 00:05:13.600
Yeah, that's crazy. You think about like a number of requests per second for like a RESTful API or something like that.

00:05:13.600 --> 00:05:22.420
That might just be a couple of bytes response of JSON or something. But typically CDNs serve images and videos and files, right?

00:05:22.420 --> 00:05:23.980
Like that's a crazy amount of traffic.

00:05:23.980 --> 00:05:32.120
Yeah, we do all kind of traffic like video, music, images, JavaScript, even API. We have a few APIs behind us.

00:05:32.120 --> 00:05:35.000
And that's because of the integration that I was mentioning before.

00:05:35.000 --> 00:05:36.000
Yeah, yeah.

00:05:36.000 --> 00:05:37.880
But yeah, that's not really my expertise.

00:05:37.880 --> 00:05:41.760
No, no, but it's all built upon the network, which is super cool.

00:05:41.760 --> 00:05:51.960
So traditionally people maybe configured networks by logging into like a Cisco router or switch or something like that.

00:05:51.960 --> 00:05:56.020
And then, you know, maybe using the CLI there or using some tool.

00:05:56.020 --> 00:06:03.480
But working with networks these days is becoming more and more a programming type of experience, right?

00:06:03.480 --> 00:06:10.620
Yeah, I think that the network is following the same evolution that the system world experienced like 10, 15 years ago.

00:06:10.800 --> 00:06:22.120
Like before you would just like edit your Apache.com from the virtual host files and all that kind of by hand and like CF engine came along, Puppet.

00:06:22.120 --> 00:06:26.760
So the network is kind of now having that transition nowadays.

00:06:26.760 --> 00:06:36.540
Like people was used to go through the console, SSH, or maybe some tools used to use SNMP to try to configure certain things.

00:06:36.540 --> 00:06:47.300
But yeah, nowadays it's like tools like Puppet, Ansible, Solstack, Stagstock are starting to come to the network as well, which is interesting and cool.

00:06:47.300 --> 00:06:47.800
Yeah.

00:06:47.800 --> 00:06:48.280
Finally.

00:06:48.280 --> 00:06:49.020
Yeah, that's great.

00:06:49.020 --> 00:06:50.060
That sounds really exciting.

00:06:50.860 --> 00:06:55.580
How's that affecting the whole ecosystem of network engineers?

00:06:55.580 --> 00:06:57.380
Are people excited about this change?

00:06:57.380 --> 00:07:01.600
Are they like, oh, my experience is no longer relevant.

00:07:01.600 --> 00:07:02.680
It's not fun anymore.

00:07:02.680 --> 00:07:05.220
Or like what's the general feel, do you think?

00:07:05.220 --> 00:07:06.540
You will find both.

00:07:06.540 --> 00:07:11.120
Like some people is like, oh, yeah, this sounds cool, a different way of doing things.

00:07:11.120 --> 00:07:15.480
And I can just automate this and focus on more interesting stuff.

00:07:15.740 --> 00:07:25.580
While other people is a bit more scared because, I don't know, maybe they are older engineers that they don't really have the time to pick up the new tools or the new programming languages.

00:07:25.580 --> 00:07:29.700
So they might be a bit more averse to the change.

00:07:29.700 --> 00:07:35.680
I think it's, yeah, you will find all sorts of people having all sorts of opinions.

00:07:35.680 --> 00:07:37.260
Sure, of course.

00:07:37.260 --> 00:07:43.880
So one of the terms that I hear frequently around the space is software-defined networks or SDNs.

00:07:43.880 --> 00:07:44.980
What's the SDN?

00:07:44.980 --> 00:07:46.340
That's mostly marketing.

00:07:46.340 --> 00:07:52.920
Like vendors keep pitching SDN, but SDN doesn't really mean anything.

00:07:52.920 --> 00:08:06.260
Like the original term was coined by some people at Stanford that were working with OpenFlow, which was like a super low-level API to try to program the switcher.

00:08:06.260 --> 00:08:08.860
But that didn't translate well into hardware.

00:08:08.860 --> 00:08:10.660
So it never took off.

00:08:11.400 --> 00:08:15.840
OBS in the Linux stack uses OpenFlow, for example, for some things.

00:08:15.840 --> 00:08:21.240
But that's software-based, which is fine because you don't have the hardware limitations to install all those flows.

00:08:21.240 --> 00:08:27.740
But yeah, in the hardware world, like the real SDN never took off because of hardware limitation.

00:08:27.740 --> 00:08:33.260
And now it's just used as a marketing term by, yeah, by many, many vendors.

00:08:33.340 --> 00:08:36.340
Okay, of course we have software-defined networks now.

00:08:36.340 --> 00:08:40.180
So there is this whole level of automation, though.

00:08:40.180 --> 00:08:47.040
There is the ability to run scripts against like Cisco routers or various other types of routers.

00:08:47.760 --> 00:08:51.140
And that's kind of where Napalm came in, right?

00:08:51.140 --> 00:08:58.800
Previously, there was, for each vendor, each type of device you're going to work with, it was like a totally unique way of working with it, right?

00:08:58.800 --> 00:09:01.080
Yeah, like each vendor has its own API.

00:09:01.080 --> 00:09:08.140
Like if you go, you're logging into an iOS device by Cisco, for example, and you start typing commands.

00:09:08.200 --> 00:09:12.640
The commands are going to be completely different from a Juniper device, for example.

00:09:12.640 --> 00:09:16.480
And the CLIs, they're completely different.

00:09:16.480 --> 00:09:19.820
They return different things to different commands.

00:09:19.820 --> 00:09:25.240
They may have even different interfaces to actually connect to them programmatically.

00:09:25.240 --> 00:09:28.640
Like, for example, iOS until very recently didn't have anything.

00:09:28.640 --> 00:09:34.980
So you were using things like NetMiko, which is a Python library that works on top of Paramiko.

00:09:35.320 --> 00:09:39.880
So it's basically just SSH expect-based, kind of.

00:09:39.880 --> 00:09:42.920
Like Juniper used to have NetConf.

00:09:42.920 --> 00:09:48.480
Well, it still has NetConf, which is actually a network protocol to configure devices.

00:09:48.480 --> 00:09:51.220
And some other devices may have like a REST API.

00:09:51.220 --> 00:09:52.420
Like there are just many ways.

00:09:52.420 --> 00:10:02.500
So when you have to do something as simple as, I want to connect to my network and I want to retrieve the IP addresses that you have configured on the interface,

00:10:02.500 --> 00:10:05.660
you have to start just like adding a lot of boilerplate.

00:10:05.660 --> 00:10:09.540
Like, okay, if device equals to iOS, do this.

00:10:09.540 --> 00:10:14.280
If device equals to this other vendor, just do this other thing.

00:10:14.280 --> 00:10:16.860
So yeah, it used to be kind of a nightmare.

00:10:16.860 --> 00:10:22.300
That's pretty much what I tried to solve with NAPALM.

00:10:22.300 --> 00:10:22.580
Okay.

00:10:22.580 --> 00:10:24.560
So NAPALM is an acronym, right?

00:10:24.560 --> 00:10:25.280
What's it stand for?

00:10:25.280 --> 00:10:28.360
Acronym is actually, it has actually an interesting story.

00:10:28.520 --> 00:10:29.680
It was reversed, engineer.

00:10:29.680 --> 00:10:35.420
Like I first came up with the acronym and then I tried to find some meaning to it.

00:10:35.420 --> 00:10:41.900
Because, I mean, before it was all these if else statements that was mentioned, like if vendor this, if vendor that, right?

00:10:41.900 --> 00:10:44.080
And I was writing sunscreen.

00:10:44.080 --> 00:10:45.020
I was super pissed.

00:10:45.020 --> 00:10:46.380
Like, I mean, this is just stupid.

00:10:46.380 --> 00:10:47.580
This is just insane.

00:10:47.940 --> 00:10:50.920
So, I mean, I want just to leave this on fire.

00:10:51.580 --> 00:10:58.320
So the name came out of that and then I started just thinking, like, okay, now let's try to make some meaning out of it.

00:10:58.320 --> 00:11:00.140
So, yeah.

00:11:00.140 --> 00:11:06.060
So I came up with this network automation and programmability abstraction layer with multi-vendor support.

00:11:06.060 --> 00:11:08.420
But, yeah, the name was actually reversed in here.

00:11:08.420 --> 00:11:10.500
Yeah, that's pretty cool.

00:11:10.500 --> 00:11:12.340
I mean, you have the important letters.

00:11:12.340 --> 00:11:17.620
You got the N, the A, the P, and then you got to get creative about the ALM, right?

00:11:18.260 --> 00:11:18.500
Yeah.

00:11:18.500 --> 00:11:24.700
But, yeah, I wanted something with fire, basically, because that's actually my thing at the moment.

00:11:24.700 --> 00:11:26.320
You're like, all right, we got to burn this down.

00:11:26.320 --> 00:11:27.720
This is, like, messed up, right?

00:11:27.720 --> 00:11:28.240
Yeah.

00:11:28.240 --> 00:11:28.860
I've heard it.

00:11:28.860 --> 00:11:32.880
Your co-creator of this library, was it, is her name Elsa?

00:11:32.880 --> 00:11:33.800
I might be remembering.

00:11:33.800 --> 00:11:35.280
Elisa Jasinska.

00:11:35.280 --> 00:11:36.440
Elisa, Elisa.

00:11:36.440 --> 00:11:36.920
That's right.

00:11:36.920 --> 00:11:37.220
Yes.

00:11:37.220 --> 00:11:39.320
You guys started this together, right?

00:11:39.320 --> 00:11:39.520
Yeah.

00:11:39.520 --> 00:11:43.220
So I started working on this when I was at Spotify.

00:11:43.220 --> 00:11:45.940
And then I was just talking with her after a conference.

00:11:45.940 --> 00:11:47.540
And she was like, oh, that's super cool.

00:11:47.600 --> 00:11:50.180
I actually have exactly the same problem.

00:11:50.180 --> 00:11:51.820
So then I just went back to my manager.

00:11:51.820 --> 00:11:53.420
Like, okay, yeah, I've been talking with people.

00:11:53.420 --> 00:11:57.420
And it turns out that there is some interest on collaborating on this.

00:11:57.420 --> 00:11:58.740
So I just open sourced it.

00:11:58.740 --> 00:12:00.900
And I started working with her.

00:12:00.900 --> 00:12:03.240
And then other people came in.

00:12:03.240 --> 00:12:06.920
And, yeah, now it's actually a pretty big community by now.

00:12:06.920 --> 00:12:08.360
Yeah, it's going really strong now.

00:12:09.320 --> 00:12:09.800
Yeah.

00:12:09.800 --> 00:12:15.340
And I had heard there was even some places where people were using more or less like screen

00:12:15.340 --> 00:12:19.700
scraping to get configuration out of some of these tools and some of these systems because

00:12:19.700 --> 00:12:21.220
it was just so hard to do, right?

00:12:21.300 --> 00:12:26.760
Yeah, there is a lot of screen scraping in devices like iOS, for example, from IA Bay Fisco.

00:12:26.760 --> 00:12:32.120
Those devices traditionally didn't have any interface to interact with them.

00:12:32.640 --> 00:12:35.100
So it was always like, yeah, SSH to the device.

00:12:35.100 --> 00:12:37.260
And then just type this command.

00:12:37.260 --> 00:12:38.700
Look for the prompt.

00:12:38.700 --> 00:12:40.780
Now let's try to parse this thing.

00:12:40.780 --> 00:12:43.060
And there is still a lot of that, to be honest.

00:12:43.060 --> 00:12:47.440
Like, we do a lot of screen scraping with Napalm because, yeah, I mean, if they don't provide

00:12:47.440 --> 00:12:49.580
the tools, we have to fix it ourselves.

00:12:49.580 --> 00:12:50.780
But at least we fix it.

00:12:50.820 --> 00:12:56.140
So when we are trying to solve the problem, like meaning what you are trying to solve at

00:12:56.140 --> 00:13:01.280
your job, you don't have to care about parsing because we already fixed that problem.

00:13:01.280 --> 00:13:01.640
Right.

00:13:01.640 --> 00:13:06.500
So maybe something like that happens deep down when you call a function for a particular device,

00:13:06.500 --> 00:13:09.060
but nobody knows and nobody cares.

00:13:09.060 --> 00:13:11.920
I hope they care so they can act their vendors.

00:13:11.920 --> 00:13:16.240
So the vendors return some JSON, XML, I don't care, just some structured data.

00:13:16.240 --> 00:13:23.700
So a lot of what you guys do with Napalm is not write these vendor-specific communications

00:13:23.700 --> 00:13:25.200
per se, right?

00:13:25.200 --> 00:13:29.620
You might find libraries that are out there and just integrate them into Napalm, right?

00:13:29.620 --> 00:13:29.940
Yeah.

00:13:29.940 --> 00:13:34.880
What we try to do is just provide an abstraction layer, which means that if there is a library

00:13:34.880 --> 00:13:38.720
already that can talk with the device, we will just use it.

00:13:38.720 --> 00:13:44.620
Like, for example, for Juniper, they maintain a library to work with those devices.

00:13:44.620 --> 00:13:46.040
So we just use that one.

00:13:46.660 --> 00:13:50.980
That means that we only have to care about transforming data, for example, and providing

00:13:50.980 --> 00:13:52.860
like common behaviors.

00:13:52.860 --> 00:13:57.700
Like this method behaves in the same way, regardless if it's Juniper or Cisco.

00:13:57.700 --> 00:14:03.880
And when you run this other method, the data that you return, it comes back normalized.

00:14:03.880 --> 00:14:04.680
Right.

00:14:04.680 --> 00:14:08.780
We don't really bother in dealing with the transport and connecting to the device.

00:14:08.780 --> 00:14:10.860
Like someone else is caring about that.

00:14:10.860 --> 00:14:12.180
We just provide the abstraction.

00:14:12.180 --> 00:14:13.180
Yeah, that's really cool.

00:14:13.180 --> 00:14:18.120
So you basically just do like an adapter to make it all look the same, the various libraries

00:14:18.120 --> 00:14:18.800
that are out there.

00:14:18.800 --> 00:14:22.860
What are some of the major libraries, Python libraries that people or that are maybe that

00:14:22.860 --> 00:14:23.440
you're built upon?

00:14:23.660 --> 00:14:29.300
So the two major ones, I would say that it's the Juniper library I mentioned, which is called

00:14:29.300 --> 00:14:31.920
Pi EC, as Pi EZ.

00:14:31.920 --> 00:14:35.080
And the other one is NetMiko.

00:14:35.080 --> 00:14:36.980
That's quite popular, actually.

00:14:37.140 --> 00:14:38.720
It's built on Paramiko.

00:14:38.720 --> 00:14:46.680
And it's specifically to be able to interact with network devices because each one has different

00:14:46.680 --> 00:14:47.960
idiosyncrasies.

00:14:47.960 --> 00:14:51.440
Like one has this, I don't know, like the new line.

00:14:51.440 --> 00:14:56.600
It's using this code, which is super old from the early Unix days.

00:14:56.600 --> 00:14:58.420
This other one changes the prompt.

00:14:58.420 --> 00:14:59.680
So you have to take into account.

00:15:00.000 --> 00:15:05.680
So yeah, it builds on top of Paramiko, but it knows how to the tiny, gritty details of

00:15:05.680 --> 00:15:06.400
each platform.

00:15:06.400 --> 00:15:07.100
Yeah, yeah.

00:15:07.100 --> 00:15:10.760
That sounds like something you don't want to write yourself that you would just like to

00:15:10.760 --> 00:15:11.040
use.

00:15:11.040 --> 00:15:11.880
Yeah, yeah.

00:15:11.880 --> 00:15:12.820
Yeah, yeah.

00:15:12.820 --> 00:15:17.160
So before we get into how it works, what hardware vendors do you support?

00:15:17.160 --> 00:15:19.020
The list is getting long, right?

00:15:19.020 --> 00:15:20.540
It used to be pretty short at the beginning.

00:15:20.540 --> 00:15:25.660
Yeah, the original one was just four vendors because that's actually the ones that I and

00:15:25.660 --> 00:15:27.620
Elisa had in our networks.

00:15:27.620 --> 00:15:37.400
But nowadays it's, so from Fisco, it's iOS, iOS XR, and NXOS because if I have only one operating

00:15:37.400 --> 00:15:38.480
system, you're going to have three.

00:15:38.480 --> 00:15:39.420
Right, of course.

00:15:39.420 --> 00:15:39.860
Why not?

00:15:39.860 --> 00:15:42.920
It's Juniper.

00:15:42.920 --> 00:15:44.040
It's Arista.

00:15:44.040 --> 00:15:46.080
It's Fortinet.

00:15:46.080 --> 00:15:48.080
It's, who else?

00:15:48.080 --> 00:15:49.040
Microtech.

00:15:49.760 --> 00:15:52.640
There's people working on Brocade as well.

00:15:52.640 --> 00:15:55.000
Oh, there's Palo Alto as well.

00:15:55.000 --> 00:15:58.260
There are probably a few more, but yeah, I don't recall them right now.

00:15:58.260 --> 00:15:58.860
Yeah, of course.

00:15:58.860 --> 00:16:01.340
No, but it's pretty comprehensive these days, huh?

00:16:01.340 --> 00:16:02.920
Yeah, it's quite extensive.

00:16:02.920 --> 00:16:05.000
And people keep working on adding more and more.

00:16:05.000 --> 00:16:10.400
So one of the really important building blocks was these libraries that we talked about, the

00:16:10.400 --> 00:16:12.580
actual communication with the various devices.

00:16:12.580 --> 00:16:14.200
The other one is Ansible.

00:16:14.200 --> 00:16:19.180
And you actually added SaltStack and StackStorm as well, right?

00:16:19.180 --> 00:16:21.520
Yeah, I mean, we try to provide just a library.

00:16:21.520 --> 00:16:25.880
We try not to have opinions on how people should be doing things.

00:16:25.880 --> 00:16:31.800
So we try to just provide the basic Python library so people can either integrate with their own

00:16:31.800 --> 00:16:34.980
framework or just write their own script.

00:16:35.140 --> 00:16:42.800
So the three major tools that we integrate with are Ansible, SaltStack, and StackStorm.

00:16:42.800 --> 00:16:44.140
Okay, that's really cool.

00:16:44.320 --> 00:16:48.900
So let's just pick Ansible, for example, but it would be similar to others.

00:16:48.900 --> 00:16:54.520
Can you maybe describe to me how we would use Napalm and Ansible?

00:16:54.520 --> 00:16:56.980
And let's have some kind of goal, right?

00:16:56.980 --> 00:17:04.720
Let's suppose you want to set up a load balancer, a couple of web front ends, and maybe a database server,

00:17:05.080 --> 00:17:09.720
and some caching tiers, and try to build that network all together so that, you know,

00:17:09.720 --> 00:17:14.100
only the right pieces can see each other and things like that.

00:17:14.100 --> 00:17:14.780
How would that work?

00:17:14.780 --> 00:17:18.720
So the way it would work is that you would have templates for your services, right?

00:17:19.000 --> 00:17:25.220
But now with Ansible, you would have another template to map how this new service maps into

00:17:25.220 --> 00:17:26.100
the network as well.

00:17:26.100 --> 00:17:29.860
That might be like a new VLAN, a new IP address, somewhere else.

00:17:29.860 --> 00:17:36.620
So you would just write another template as you did for Nginx and, I don't know, MySQL

00:17:36.620 --> 00:17:39.260
or whatever you're using in your network.

00:17:39.260 --> 00:17:45.200
And then you just have to, when you just compile this template with the data and you get like

00:17:45.200 --> 00:17:48.940
an actual output, the only thing you have to do is tell Napalm to use that configuration.

00:17:48.940 --> 00:17:51.200
file and apply it into the device.

00:17:51.200 --> 00:17:52.840
And then you can do two things.

00:17:52.840 --> 00:17:58.480
Either you apply it straight into the device or you just get a diff that you can actually

00:17:58.480 --> 00:18:01.300
peer review or, you know, or something of the like.

00:18:01.300 --> 00:18:06.460
That's a pretty nice experience that you can go to your network and reach out to all the

00:18:06.460 --> 00:18:07.300
devices, right?

00:18:07.300 --> 00:18:11.220
You'd set up your Ansible scripts and, you know, one for the load balancer, one for the

00:18:11.220 --> 00:18:12.600
web tier, maybe things like that.

00:18:12.600 --> 00:18:17.520
And you'd set them up and you could say, go query them the way they are now.

00:18:17.980 --> 00:18:23.900
Figure out the changes that you would push to them and then generate a text diff of what

00:18:23.900 --> 00:18:25.100
we're about to do to it, right?

00:18:25.100 --> 00:18:25.360
Yeah.

00:18:25.360 --> 00:18:30.700
I mean, the only difference between managing like your web server and your network with

00:18:30.700 --> 00:18:36.000
Ansible and Napalm is going to be that instead of reloading the service, you're going to be

00:18:36.000 --> 00:18:38.840
applying the configuration with Napalm into the device.

00:18:38.840 --> 00:18:41.640
But the rest should be exactly the same workflow.

00:18:41.740 --> 00:18:46.620
Just the template model, the data coming from your backend or YAML file.

00:18:46.620 --> 00:18:47.360
And yeah.

00:18:47.360 --> 00:18:47.600
Yeah.

00:18:47.600 --> 00:18:47.740
Yeah.

00:18:47.740 --> 00:18:48.840
It's really nice.

00:18:48.840 --> 00:18:53.700
So that probably makes it pretty easy to store these in like GitHub or somewhere like that

00:18:53.700 --> 00:18:56.720
and have like a history of the changes you've applied to your devices.

00:18:56.720 --> 00:18:57.300
Yeah.

00:18:57.300 --> 00:18:59.500
That's pretty much what everybody is doing.

00:18:59.500 --> 00:19:00.440
Just like, yeah.

00:19:00.520 --> 00:19:05.120
Just have it as any other template on your GitHub or whatever you're using.

00:19:05.120 --> 00:19:05.400
Yeah.

00:19:05.400 --> 00:19:11.440
And one thing you guys talked about is you push the entire configuration for the device over

00:19:11.440 --> 00:19:11.860
to it.

00:19:11.940 --> 00:19:15.480
But somehow the device knows to actually only apply the delta.

00:19:15.480 --> 00:19:16.680
How does that work?

00:19:16.680 --> 00:19:17.840
So, yeah.

00:19:17.840 --> 00:19:18.940
So you can do both things.

00:19:18.940 --> 00:19:21.940
You can either apply just a snippet of configuration.

00:19:21.940 --> 00:19:27.660
Like if you just want to configure a VLAN, you can choose to configure that single VLAN.

00:19:27.660 --> 00:19:31.100
Or you can apply the entire configuration.

00:19:31.280 --> 00:19:37.980
The problem with applying snippets of configuration is that the way that devices work, you don't

00:19:37.980 --> 00:19:42.320
have a single configuration file where you just like apply it on the device and then reload

00:19:42.320 --> 00:19:42.880
the service.

00:19:42.880 --> 00:19:46.660
And only what's on that file is what's going to be applied.

00:19:46.660 --> 00:19:51.160
Actually, on a network device, you actually tell the network device how to do things.

00:19:51.160 --> 00:19:57.560
Would be like going to a Linux box and start configuring the network using IP route commands.

00:19:57.740 --> 00:20:02.280
IP route at this interface or IP route at this routing here.

00:20:02.280 --> 00:20:05.800
So you're actually telling the device what to do and how to do it.

00:20:05.800 --> 00:20:10.900
So if you're merging snippets of configuration, you have to be aware that if you want to remove

00:20:10.900 --> 00:20:13.840
a VLAN, for example, you have to tell it remove this VLAN.

00:20:13.840 --> 00:20:18.260
It's not good enough to just send the list of VLANs that you want.

00:20:18.260 --> 00:20:20.740
That's why I'm trying to...

00:20:20.740 --> 00:20:23.360
This is my kind of like a personal opinion.

00:20:23.500 --> 00:20:28.960
I like instead just somehow compiling the entire configuration of the device, send it

00:20:28.960 --> 00:20:33.280
to the device and tell the device, now reload the service, which is exactly how I would manage

00:20:33.280 --> 00:20:35.360
Nginx and my SQL or something.

00:20:35.360 --> 00:20:36.900
And just like, here's my config file.

00:20:36.900 --> 00:20:37.680
Now reload.

00:20:37.680 --> 00:20:39.120
I don't care what you had before.

00:20:39.120 --> 00:20:40.120
Just do this.

00:20:40.120 --> 00:20:40.800
All right.

00:20:40.800 --> 00:20:41.220
This...

00:20:41.220 --> 00:20:42.160
I want you to be like this.

00:20:42.160 --> 00:20:42.920
Now be that way.

00:20:42.920 --> 00:20:43.200
Yeah.

00:20:43.200 --> 00:20:50.140
So that works well with most devices, but this feature for Napalm to use it has to be supported

00:20:50.140 --> 00:20:50.800
natively.

00:20:50.800 --> 00:20:57.820
And most of the devices nowadays, like iOS supports it, Arista supports it, Juniper, like the major

00:20:57.820 --> 00:21:00.760
vendors support this, these features.

00:21:00.760 --> 00:21:04.320
You're going to actually send a entire config file and reload the service.

00:21:04.320 --> 00:21:07.800
It's a great quote, quote on the reload the service.

00:21:07.800 --> 00:21:08.400
Yeah.

00:21:08.560 --> 00:21:13.300
This portion of Talk Python To Me is brought to you by Linode.

00:21:13.300 --> 00:21:17.340
Are you looking for bulletproof hosting that is fast, simple, and incredibly affordable?

00:21:17.340 --> 00:21:22.520
Look past that bookstore and check out Linode at talkpython.fm/Linode.

00:21:22.520 --> 00:21:24.520
That's L-I-N-O-D-E.

00:21:24.520 --> 00:21:28.460
Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:21:28.460 --> 00:21:31.040
They have 10 data centers across the globe.

00:21:31.040 --> 00:21:33.660
So no matter where you are, there's a data center near you.

00:21:34.180 --> 00:21:38.800
Whether you want to run your Python web app, host a private Git server, or even a file server,

00:21:38.800 --> 00:21:45.080
you'll get native SSDs on all the machines, a 40 gigabit network, 24-7 friendly support,

00:21:45.080 --> 00:21:48.040
even on holidays, and a seven-day money-back guarantee.

00:21:48.040 --> 00:21:51.380
Want a dedicated server for free for the next four months?

00:21:51.380 --> 00:21:56.880
Use the coupon code python17 at talkpython.fm/Linode.

00:21:58.200 --> 00:22:07.740
One of the consequences of the way Napalm works is that if somebody goes and manually starts changing the network settings or something, right?

00:22:07.740 --> 00:22:13.280
They SSH in there and they make a few changes and then just log out.

00:22:13.280 --> 00:22:15.640
And they don't save that anywhere, right?

00:22:15.640 --> 00:22:17.800
Napalm will basically wipe that away, won't it?

00:22:17.880 --> 00:22:24.620
If you're using this replace operation that I just described, yeah, that's exactly how it would work.

00:22:24.620 --> 00:22:31.940
It's just like, yeah, I just created this VLAN by hand and you didn't save it in your template or in your database or something.

00:22:31.940 --> 00:22:34.240
Yeah, it's going to be completely wiped out.

00:22:34.240 --> 00:22:38.920
If you're using the other method where you're just applying snippets of configuration,

00:22:39.560 --> 00:22:44.800
then unless you're explicitly removing the configuration, Napalm won't remove it.

00:22:44.800 --> 00:22:47.960
Because Napalm won't even know that the configuration is in there.

00:22:47.960 --> 00:22:48.360
Right.

00:22:48.360 --> 00:22:53.420
Unless that snippet has exactly to do with that part that was changed, they might not never interact, right?

00:22:53.420 --> 00:22:53.860
Yeah.

00:22:53.860 --> 00:22:57.800
So some people are combining both manual with automated operations.

00:22:57.800 --> 00:23:03.540
So they prefer to use this method where you just tell the device, apply this snippet of configuration.

00:23:04.060 --> 00:23:09.800
So it depends a bit on what you are trying to accomplish and what your network looks like.

00:23:09.800 --> 00:23:18.960
For some people, the network is so full of snowflakes that actual automating every tiny detail is literally impossible.

00:23:18.960 --> 00:23:19.440
Yeah.

00:23:19.440 --> 00:23:20.360
Yeah, of course.

00:23:20.360 --> 00:23:22.360
I can imagine places like that.

00:23:22.360 --> 00:23:25.200
It never was really built all at once.

00:23:25.200 --> 00:23:26.620
It just kind of grew this way.

00:23:26.620 --> 00:23:27.800
Oh, yeah.

00:23:27.800 --> 00:23:29.260
Organic design.

00:23:29.260 --> 00:23:30.200
Yes, of course.

00:23:30.200 --> 00:23:32.160
Is there a way to go in reverse?

00:23:32.160 --> 00:23:38.020
Like, I know I could come up with a bunch of Ansible scripts and I could generate a network out of it.

00:23:38.020 --> 00:23:47.340
But is there a way to go to a network and say, now generate me the set of Ansible scripts that would reverse engineer it?

00:23:47.340 --> 00:23:54.840
So that you could sort of start from an existing network, come up with these scripts, and then going forward, go in reverse, use Napalm to work with it.

00:23:54.840 --> 00:24:05.260
So what I have done to migrate from this snowflake environment to a fully automated environment is I just copy the configuration file.

00:24:05.260 --> 00:24:09.680
I mean, I just copy the configuration of the device and just put it into a static file.

00:24:09.680 --> 00:24:12.980
And I just deploy that static file with Napalm.

00:24:13.400 --> 00:24:16.680
And the only thing I'm doing is just override the configuration that it's already there.

00:24:16.680 --> 00:24:18.260
The configuration is just completely static.

00:24:18.260 --> 00:24:26.160
And then I start just taking bits of the configuration that is just defined statically into templates.

00:24:26.160 --> 00:24:29.460
So that way I can just start migrating bit by bit.

00:24:29.460 --> 00:24:31.320
Like, okay, now I have automated the VLANs.

00:24:31.320 --> 00:24:36.620
So I can just remove the VLANs from the static configuration file and use a template for that.

00:24:37.040 --> 00:24:41.720
The only thing I have to do is append one file into the other with Ansible.

00:24:41.720 --> 00:24:45.680
And now I'm going to automate, like, the interface generation.

00:24:45.680 --> 00:24:48.080
So I just take that away and automate that bit.

00:24:48.080 --> 00:24:54.120
So you can start doing this step by step and just keeping your configuration statically defined somewhere else.

00:24:54.120 --> 00:24:55.020
Yeah, that's a pretty good idea.

00:24:55.020 --> 00:24:57.060
Just copy it over and go, this is how it is.

00:24:57.060 --> 00:25:02.100
And then we're going to pull out the little pieces that change every now and then that we want to automate.

00:25:02.100 --> 00:25:04.180
And everything else, we can just forget it, just leave it.

00:25:04.180 --> 00:25:04.600
Okay.

00:25:04.600 --> 00:25:06.120
Yeah, yeah, it makes a lot of sense.

00:25:06.120 --> 00:25:10.120
So Napalm is written entirely in Python, right?

00:25:10.120 --> 00:25:16.900
If I can trust GitHub's little measure of what languages are involved in this project, it's like all Python.

00:25:16.900 --> 00:25:17.860
Yeah, it's all Python.

00:25:17.860 --> 00:25:18.360
Yeah, yeah.

00:25:18.360 --> 00:25:18.960
That's really cool.

00:25:18.960 --> 00:25:25.420
You don't have too many performance considerations or anything where you might bring in Cython or other types of things, right?

00:25:25.420 --> 00:25:31.320
It's more just quick communicate over the network to the device and the device has to do the heavy lifting.

00:25:31.320 --> 00:25:35.160
Yeah, I mean, we are talking about something that you're interacting with.

00:25:35.160 --> 00:25:46.300
I mean, you're interacting with the device over the network and you're probably using some API or method to interact with the device, which is not extremely fast.

00:25:46.300 --> 00:25:50.720
So it's not like you're doing mathematical computation.

00:25:51.000 --> 00:25:56.120
So I don't think that, yeah, that performance is a concern.

00:25:56.120 --> 00:25:58.580
No one has brought that up at least.

00:25:58.580 --> 00:25:59.400
Yeah.

00:25:59.660 --> 00:26:04.120
And if it is, it's probably not your performance issue that you can work with, right?

00:26:04.120 --> 00:26:06.520
It's like, well, this device is just slow when I do this to it.

00:26:06.520 --> 00:26:06.720
Yeah.

00:26:06.720 --> 00:26:10.180
I mean, most of the devices, like you type, like, I don't know, show interfaces.

00:26:10.180 --> 00:26:12.360
And maybe the device has like 100 interfaces.

00:26:12.360 --> 00:26:17.220
So the device takes like one or two seconds to actually return all the data.

00:26:17.520 --> 00:26:22.100
So it's like, yeah, we could optimize like 10 milliseconds out of two seconds.

00:26:22.100 --> 00:26:23.160
So, okay.

00:26:23.160 --> 00:26:23.700
Yeah, of course.

00:26:23.700 --> 00:26:24.780
Yeah, exactly.

00:26:24.780 --> 00:26:25.900
Don't worry about it.

00:26:25.900 --> 00:26:31.080
Yeah, I guess the real trick would be to make sure you're using the latest APIs and libraries from the various vendors.

00:26:31.080 --> 00:26:36.300
Like if you were previously doing some weird screen scraping thing and now they have a JSON API, like switch to that, right?

00:26:36.300 --> 00:26:38.580
Yeah, that's actually the main challenge we have.

00:26:38.580 --> 00:26:51.200
Like trying to use the latest APIs, it usually don't go that well because, yeah, because vendors, I'm sorry, vendors, users still have like networks running operating system from the, I don't know, early 2000.

00:26:51.200 --> 00:26:56.520
I mean, I have seen a lot of people with, yeah, my device has a 10 years uptime.

00:26:56.520 --> 00:27:01.640
Like maybe you should count that on security advisories more than instead of in years.

00:27:01.640 --> 00:27:04.980
That's really interesting.

00:27:04.980 --> 00:27:15.240
So I'm paranoid about like security issues and things like that on my servers and on things like Nginx and stuff.

00:27:15.240 --> 00:27:22.320
And if there's an update, like that thing is, even if it causes a reboot, it's getting applied because it's on the internet.

00:27:22.320 --> 00:27:23.760
That's such a bad thing.

00:27:24.560 --> 00:27:29.140
And so to think that a device is up for 10 years, that's probably needs some attention.

00:27:29.140 --> 00:27:38.500
Well, the thing is that for most legacy networks, like reloading a device is super hard because you might bring down a lot of systems.

00:27:38.500 --> 00:27:41.080
Like because everything uses the network.

00:27:41.080 --> 00:27:42.980
It's the very foundation.

00:27:42.980 --> 00:27:46.040
It's like taking away memory or the CPU or something, basically.

00:27:46.040 --> 00:27:46.660
Exactly.

00:27:46.660 --> 00:27:47.500
Exactly.

00:27:47.840 --> 00:27:51.440
And most of the networks are actually completely isolated from the internet.

00:27:51.440 --> 00:28:05.260
So the only way of actually trying to exploit like some bugs would be by first getting inside your network by just hacking the VPN or the bastion that you might have in your network.

00:28:05.260 --> 00:28:09.220
So there is like certain degree of isolation in the network as well.

00:28:09.220 --> 00:28:10.480
So upgrading is not.

00:28:10.560 --> 00:28:14.240
It's not as critical as like a front end web server that's taking traffic off the internet.

00:28:14.240 --> 00:28:14.580
Yeah.

00:28:14.580 --> 00:28:14.960
Yeah.

00:28:14.960 --> 00:28:17.220
That's one thing to pass the traffic along.

00:28:17.220 --> 00:28:21.900
It's another to be the endpoint to like send it into your executing code.

00:28:21.900 --> 00:28:23.740
Okay.

00:28:23.740 --> 00:28:24.140
Interesting.

00:28:24.780 --> 00:28:36.980
So one thing I wanted to ask you about is like there's a lot of cloud computing and other sort of programmable, automatable systems like virtual private servers, you know, things like Linode or DigitalOcean.

00:28:36.980 --> 00:28:40.520
And then we've got EC2, we've got Azure and Heroku.

00:28:40.520 --> 00:28:45.300
How does this whole network automation story fit with that?

00:28:45.460 --> 00:28:51.140
Like, is there any place for say Napalm in AWS or is this really, I have my own data center.

00:28:51.140 --> 00:28:55.320
I want to manage that or I would go do something with AWS or.

00:28:55.320 --> 00:28:55.660
Yeah.

00:28:55.660 --> 00:29:00.400
So the main focus of Napalm is actually like physical infrastructure.

00:29:00.400 --> 00:29:06.720
So we don't really have any hooks with any of the, all the cloud companies, like none of them.

00:29:06.720 --> 00:29:12.260
Like, yeah, we mostly operate on switches, routers, firewalls, all this kind of thing.

00:29:12.620 --> 00:29:12.920
Yeah.

00:29:12.920 --> 00:29:17.160
And you, you rarely have that low level of access in any of those places.

00:29:17.160 --> 00:29:17.540
Yeah.

00:29:17.540 --> 00:29:23.960
I mean, there could be like, maybe, yeah, I'm, I'm not a juicer myself of the public cloud.

00:29:23.960 --> 00:29:34.620
So I'm not sure how they work, but there might be some room for like, I don't know, maybe integrating with how, with the firewall, their firewalls and load balancers.

00:29:34.620 --> 00:29:35.740
But yeah, I don't know.

00:29:35.740 --> 00:29:39.100
I haven't heard of anyone even considering something like this.

00:29:39.100 --> 00:29:39.340
Sure.

00:29:39.340 --> 00:29:45.600
I mean, there are APIs for the load balancers and APIs for the firewalls, but yeah, I'm not sure.

00:29:45.600 --> 00:29:48.900
I'm not sure if it makes sense, but maybe, maybe it makes sense somehow.

00:29:48.900 --> 00:29:49.440
Right.

00:29:49.440 --> 00:29:51.100
But, but maybe not the same.

00:29:51.100 --> 00:29:51.360
Right.

00:29:51.360 --> 00:29:56.640
Maybe say, I want to connect these three machines and I want to have this in a virtual private network and whatnot.

00:29:56.640 --> 00:30:00.920
Like that possibly could be a thing, but I'm not sure if it really makes sense to mix these tools.

00:30:00.920 --> 00:30:04.860
I will say if someone comes up with something after hearing this podcast.

00:30:04.860 --> 00:30:06.680
Yeah, exactly.

00:30:06.680 --> 00:30:07.840
Maybe you'll get a pull request.

00:30:07.840 --> 00:30:09.740
What about like Dockers?

00:30:09.740 --> 00:30:15.540
If I'm a Docker, if I'm using Docker or like, I've got a bunch of them running together managed like by Kubernetes.

00:30:15.540 --> 00:30:17.760
But let's say that's on my own network.

00:30:17.920 --> 00:30:25.880
Well, if it's on your network, I'm pretty sure that you could somehow orchestrate configuring the network somehow with, with Napalm.

00:30:25.880 --> 00:30:32.280
I don't know the details of Kubernetes, but I know people doing exactly that with OpenStack.

00:30:32.520 --> 00:30:42.280
So their provisioning system just uses, uses Napalm to orchestrate the physical network with the rest of the, I don't know how it's called, Neutron.

00:30:42.280 --> 00:30:46.080
I think it is the network plugin for, for OpenStack.

00:30:46.080 --> 00:30:46.520
Interesting.

00:30:46.520 --> 00:30:46.800
Yeah.

00:30:46.800 --> 00:30:50.060
So what's the story between Napalm and OpenStack?

00:30:50.060 --> 00:30:51.920
So OpenStack being like.

00:30:51.920 --> 00:30:53.800
I don't know the details, to be honest.

00:30:53.800 --> 00:31:02.900
I know that someone I was working on just like they have their, they're just in OpenStack to just deploy their virtual infrastructure.

00:31:02.900 --> 00:31:07.580
And one of the pieces is actually configuring the network, right?

00:31:07.580 --> 00:31:15.160
So someone had just written up plugin, which I don't know if it was just in production, actually, to just like configuring.

00:31:15.160 --> 00:31:21.660
Like, for example, if I'm deploying this service, I need to configure this BGP station in here or this VLAN in there.

00:31:21.760 --> 00:31:24.520
So it was just a matter of doing that with Napalm.

00:31:24.520 --> 00:31:24.780
Okay.

00:31:24.780 --> 00:31:25.200
Yeah.

00:31:25.200 --> 00:31:29.280
There probably is some opportunities for some kind of integration there.

00:31:29.280 --> 00:31:31.800
But, you know, I don't do enough with OpenStack, honestly.

00:31:31.800 --> 00:31:33.380
I mean, yeah.

00:31:33.380 --> 00:31:35.060
All right.

00:31:35.060 --> 00:31:39.820
So can you maybe give us like the general workflow of working with Napalm?

00:31:39.820 --> 00:31:44.800
So we start breaking down the devices into different services, right?

00:31:44.800 --> 00:31:46.200
Like here's a firewall.

00:31:46.200 --> 00:31:48.480
Here's a web server.

00:31:48.480 --> 00:31:49.420
Things like that, right?

00:31:49.420 --> 00:31:51.160
It depends on what you're doing, actually.

00:31:51.320 --> 00:31:57.920
Because we try to just provide the API as generic as possible so you can write your own workflow.

00:31:57.920 --> 00:32:01.020
So we do a set of methods, for example.

00:32:01.020 --> 00:32:05.500
One set of methods just interact with the device configuration.

00:32:05.500 --> 00:32:08.640
So you can say like, okay, I want to deploy this configuration.

00:32:08.640 --> 00:32:13.760
Or I want to replace the existing configuration with this one.

00:32:13.760 --> 00:32:19.120
This is the method that was mentioned before where you just wipe everything out, right?

00:32:19.400 --> 00:32:19.640
Okay.

00:32:19.640 --> 00:32:21.340
Now I have this configuration loaded.

00:32:21.340 --> 00:32:26.940
I want to either discard it, commit it, or just get a diff back.

00:32:27.040 --> 00:32:31.480
So these are just basic, primitive, so you can actually build your own workflow.

00:32:31.480 --> 00:32:41.180
You can just integrate it with, I don't know, with Jenkins, for example, to stage the change and get a diff back, open a pull request and have someone validate it.

00:32:41.180 --> 00:32:43.760
Like, for example, that's a common workflow.

00:32:44.220 --> 00:32:47.500
And the other set of methods, it's getting data out of the network.

00:32:47.500 --> 00:32:50.240
Like, I want to get the interfaces of my devices.

00:32:50.240 --> 00:32:53.580
Or I want to get the BGP neighbors of my network.

00:32:53.580 --> 00:32:54.540
Stuff like that.

00:32:55.100 --> 00:33:03.280
So you can actually have into your Jenkins job, like after the change has been made.

00:33:03.280 --> 00:33:09.460
Just get the data out and verify that the interface that you configure is actually configured as you want it.

00:33:09.460 --> 00:33:19.000
So, yeah, we don't really have built-in workflow, but we try to just have the basic primitives so people can write their own workflows and just, yeah, integrate as they want.

00:33:19.000 --> 00:33:22.680
Yeah, it's pretty agnostic to the way that the vendors want you to work.

00:33:22.680 --> 00:33:30.340
You can come up with your own workflow, and because it'll talk to all the devices the same, that more or less should work, right?

00:33:30.340 --> 00:33:30.680
Yeah.

00:33:30.680 --> 00:33:36.520
Yeah, for example, I like more the workflow of just generating the entire config and send it to the device.

00:33:36.520 --> 00:33:40.980
Because that way I know that what I told the device, it's going to be in there.

00:33:40.980 --> 00:33:45.080
Rather than having to tell the device how to do things, like, yeah, I don't know how to do it.

00:33:45.080 --> 00:33:46.560
Just get this done.

00:33:46.560 --> 00:33:56.380
But other people prefer more like not all sorts of operations where they have like a self-service portal and they just click somewhere like, okay, create this, delete that.

00:33:56.380 --> 00:34:00.320
So, yeah, it depends on your preference, I guess.

00:34:00.320 --> 00:34:00.560
Yeah.

00:34:00.560 --> 00:34:04.780
And probably how you're using your network and how often it changes and whatnot.

00:34:04.780 --> 00:34:07.140
So, you mentioned Jenkins.

00:34:07.140 --> 00:34:09.260
Like, what's the story with continuous integration?

00:34:09.260 --> 00:34:12.380
Like, what are you seeing people do with Napalm and CI?

00:34:12.380 --> 00:34:18.800
I would say that the common thing that people does with CI and Napalm is mostly automated deployment.

00:34:18.800 --> 00:34:23.300
Like, for example, I just change some data on a YAML file, right?

00:34:23.500 --> 00:34:27.800
And that triggers a Jenkins job that just runs an Ansible playbook, for example.

00:34:27.800 --> 00:34:36.220
And Ansible playbook connects to the device, loads the new candidate configuration, and retrieves back a div.

00:34:36.220 --> 00:34:42.840
And the div just gets just, it's posted into some PR sort of tool.

00:34:42.840 --> 00:34:45.920
Could be Garrett or maybe another GitHub repo.

00:34:46.280 --> 00:34:47.980
So, that's a common workflow.

00:34:47.980 --> 00:34:53.660
Another workflow I have seen, it's a bit weird.

00:34:53.660 --> 00:34:55.160
I don't remember who did this.

00:34:55.160 --> 00:34:59.780
But we have a framework within Napalm where you can define certain rules.

00:34:59.780 --> 00:35:05.720
Like, for example, I want to verify that all my BGP neighbors are sending me at least five prefixes.

00:35:05.720 --> 00:35:09.060
We have a framework to describe things like that, for example.

00:35:09.060 --> 00:35:11.560
Or I want to check that my interfaces have no errors.

00:35:11.560 --> 00:35:16.420
It's just a YAML file where you can just describe certain data and validate it.

00:35:16.420 --> 00:35:27.500
So, I've seen some people that when they deploy something on the application, they run this sort of validation tool to verify that the network is working fine.

00:35:27.500 --> 00:35:29.940
Like, for example, we start this backup.

00:35:29.940 --> 00:35:33.480
We want to check that we are not having interface errors at the same time.

00:35:33.480 --> 00:35:40.240
So, I've seen people not connecting completely unrelated pieces and verifying stuff with CI as well.

00:35:40.400 --> 00:35:47.200
Okay. And things like, I made a change to the network, but I don't expect the number of endpoints to change.

00:35:47.200 --> 00:35:51.640
So, let's make sure that that is still a constant number or something like that, right?

00:35:51.640 --> 00:35:53.940
Yeah, it was a kind of weird workflow.

00:35:53.940 --> 00:35:58.860
They were trying to explain to me, I was like, okay, that sounds all confusing and cool.

00:35:58.860 --> 00:36:03.060
So, I didn't really understand it very well.

00:36:03.500 --> 00:36:04.120
Yeah, interesting.

00:36:04.120 --> 00:36:08.160
This portion of Talk Python To Me has been brought to you by Rollbar.

00:36:08.160 --> 00:36:11.820
One of the frustrating things about being a developer is dealing with errors.

00:36:11.820 --> 00:36:20.820
Relying on users to report errors, digging through log files, trying to debug issues, or getting millions of alerts just flooding your inbox and ruining your day.

00:36:20.960 --> 00:36:27.600
With Rollbar's full-stack error monitoring, you get the context, insight, and control you need to find and fix bugs faster.

00:36:27.600 --> 00:36:31.560
Adding Rollbar to your Python app is as easy as pip install Rollbar.

00:36:31.560 --> 00:36:35.820
You can start tracking production errors and deployments in eight minutes or less.

00:36:36.460 --> 00:36:39.980
Are you considering self-hosting tools for security or compliance reasons?

00:36:39.980 --> 00:36:43.580
Then you should really check out Rollbar's compliant SaaS option.

00:36:43.580 --> 00:36:52.940
Get advanced security features and meet compliance without the hassle of self-hosting, including HIPAA, ISO 27001, Privacy Shield, and more.

00:36:52.940 --> 00:36:54.320
They'd love to give you a demo.

00:36:54.320 --> 00:36:56.020
Give Rollbar a try today.

00:36:56.020 --> 00:36:59.720
Go to talkpython.fm/Rollbar and check them out.

00:37:00.200 --> 00:37:06.360
So to test this out, do you actually have to have the devices like a Juniper device or a Cisco device?

00:37:06.360 --> 00:37:10.820
Or is there like the equivalent of virtual machines for these network devices?

00:37:10.820 --> 00:37:15.580
Most platforms nowadays have a VM equivalent.

00:37:15.580 --> 00:37:19.160
So we can use that for testing.

00:37:19.160 --> 00:37:22.360
But we rely a lot on mocks.

00:37:22.360 --> 00:37:28.020
Like for example, most of the time we, like most of the code is actually just normalizing data.

00:37:28.260 --> 00:37:35.140
But just connecting to a device, retrieving the interface information and normalizing it into a common model.

00:37:35.140 --> 00:37:38.420
So for those things, that's easy to mock.

00:37:38.420 --> 00:37:47.200
You just need the original data, a few use cases, and just test that the parser, normalizer works fine.

00:37:47.200 --> 00:37:50.600
So yeah, we can get away a lot with just mocks.

00:37:50.600 --> 00:37:53.920
But yeah, there are certain things that you need, a VM or something.

00:37:53.920 --> 00:37:54.880
Yeah, that makes sense.

00:37:54.880 --> 00:38:03.020
It's like, so run some particular command on some test lab setup and just capture that text and go, now tell it that it gave you this.

00:38:03.020 --> 00:38:03.940
Yeah.

00:38:03.940 --> 00:38:06.880
With the mock layer in your CI.

00:38:06.880 --> 00:38:07.160
Yeah.

00:38:07.160 --> 00:38:12.120
The thing that you don't want to mock is the configuration management bit.

00:38:12.120 --> 00:38:13.760
Because that's so critical.

00:38:13.760 --> 00:38:18.660
If you miss something up in there, like you might be costing an outage.

00:38:18.660 --> 00:38:22.940
So that we try to always, always test with VMs.

00:38:22.940 --> 00:38:24.140
I want to play it safe there.

00:38:24.140 --> 00:38:26.300
Is it stressful to work on this project?

00:38:26.300 --> 00:38:36.940
About just to think like people might be running this against huge networks, either your own at Fastly or someone else's and just like, okay, I really have to get this right.

00:38:36.940 --> 00:38:40.560
Because it could have real consequences if I mess it up.

00:38:40.720 --> 00:38:42.620
No, I don't think it's stressful.

00:38:42.620 --> 00:38:44.320
No, I don't think so.

00:38:44.320 --> 00:38:52.380
Like the primitives that we provide with Napon to configure the network, it's actually five or six methods.

00:38:52.380 --> 00:38:55.320
And those ones, they're written, they're written.

00:38:55.320 --> 00:38:57.580
Like you don't really have to deal with them.

00:38:57.580 --> 00:39:02.200
So yeah, I mean, it's a bit delicate when you're writing them for the first time.

00:39:02.280 --> 00:39:07.160
But then once that's written, it's just a matter of, yeah, just keep testing.

00:39:07.160 --> 00:39:08.240
I see what you're saying.

00:39:08.240 --> 00:39:18.240
It's kind of low enough that the parts where it may get tricky or not quite right is actually at the person using Napalm, not Napalm itself.

00:39:18.240 --> 00:39:23.800
And I mean, obviously, you're integrating into something as low level as your infrastructure.

00:39:23.800 --> 00:39:27.860
You have to do your homework and actually do some integration testing yourself.

00:39:28.000 --> 00:39:33.740
And make sure that, yeah, the exact version that you're running on the network, it actually works well with Napalm.

00:39:33.740 --> 00:39:40.960
Like maybe you have like this super tiny bug that we have on the operating system of the network, I mean, that we haven't encountered before.

00:39:40.960 --> 00:39:44.260
So that's just, yeah, basic integration testing, I guess.

00:39:44.260 --> 00:39:44.660
Yeah, yeah.

00:39:44.660 --> 00:39:51.280
Do you get requests for people to add support for particular devices that you don't have access to?

00:39:51.280 --> 00:39:52.260
Oh, yeah, all the time.

00:39:52.260 --> 00:39:55.380
And so how do you deal with evaluating those PRs?

00:39:55.380 --> 00:40:00.140
For the configuration management part, we always ask to have proof that it's working.

00:40:00.140 --> 00:40:10.640
And that could be as simple as he just creates a necessary user for me so I can actually validate the testing person while he's running the test on his machine.

00:40:10.640 --> 00:40:12.880
Or I might be running the test on my machine.

00:40:12.880 --> 00:40:20.260
But the thing is that if I don't have access to the device, at least the configuration bit, I need to be able to test it the first time myself.

00:40:20.500 --> 00:40:26.680
Because then once it's tested and it's working in there, it will probably barely change.

00:40:26.680 --> 00:40:31.100
And yeah, and what retrieves data from the device, that's easy.

00:40:31.100 --> 00:40:33.980
That's just a matter of mocking the output.

00:40:33.980 --> 00:40:36.320
So yeah, that's not really a worry.

00:40:36.320 --> 00:40:43.180
Yeah, it just seems like when you work with all these different devices, it's tricky because you probably don't have access to every single variation of them, right?

00:40:43.260 --> 00:40:44.000
Yeah, yeah, correct.

00:40:44.000 --> 00:40:51.280
Yeah, so we just try to at least, at least the first time to validate, not take only the word of the contributor.

00:40:51.280 --> 00:40:54.260
Could you do like screen sharing and just like watch them?

00:40:54.260 --> 00:40:56.180
Yeah, I mean, anything that works for them.

00:40:56.180 --> 00:41:03.660
I mean, if they don't want to share the screen, I mean, and they can just give me access to the device, I can just pull their branch and test it myself.

00:41:03.780 --> 00:41:04.900
I mean, that's fine.

00:41:04.900 --> 00:41:05.800
Yeah, cool.

00:41:06.800 --> 00:41:12.220
So I just wanted to highlight a video presentation that you did at Nanog.

00:41:12.220 --> 00:41:13.600
What was the first?

00:41:13.600 --> 00:41:15.180
I might be getting it wrong.

00:41:15.180 --> 00:41:15.700
Yeah, Nanog.

00:41:15.700 --> 00:41:16.320
Yeah, Nanog.

00:41:16.320 --> 00:41:17.740
I thought that was really helpful.

00:41:17.740 --> 00:41:18.960
It's a little bit dated, right?

00:41:18.960 --> 00:41:24.840
That was, I think, from 2015, but it still shows a lot of the workflow and how people might do it.

00:41:24.840 --> 00:41:28.300
So if they're really interested, I'll be sure to put that video in the show notes.

00:41:28.300 --> 00:41:29.260
People can check it out.

00:41:29.260 --> 00:41:34.040
Yeah, that's actually the video that we recorded when we went live with the project.

00:41:34.040 --> 00:41:35.080
Like, here we are.

00:41:35.480 --> 00:41:41.940
Yeah, here you are a couple years later, and I remember there was just the few devices you guys supported, and now there's a whole bunch.

00:41:41.940 --> 00:41:42.280
Yeah.

00:41:42.280 --> 00:41:47.760
Yeah, so do you want to tell us about some of the major deployments or users of Napalm?

00:41:47.760 --> 00:41:50.600
So I don't really have an official list.

00:41:50.600 --> 00:41:52.160
I never thought about that.

00:41:52.160 --> 00:41:57.160
But I was actually going through the contributors and just trying to see where they work.

00:41:57.160 --> 00:42:03.280
So this list I'm going to mention now is based on trying to check on where people work.

00:42:03.280 --> 00:42:06.120
I don't know if they're actually using it on their networks.

00:42:06.120 --> 00:42:13.140
It might be that the contributor is just, I don't know, doing it on its own spare time.

00:42:13.140 --> 00:42:13.640
I don't know.

00:42:13.640 --> 00:42:15.080
Just disclaimer here.

00:42:15.080 --> 00:42:15.940
But I don't know.

00:42:15.940 --> 00:42:22.580
I've seen contributions from people working at places like some trading firm that, I don't know,

00:42:22.620 --> 00:42:29.620
friendly is called IMC, Nike, Netflix, obviously Spotify, which is where everything started, like eBay.

00:42:29.620 --> 00:42:32.900
Yeah, you were at Spotify when you started working on this, right?

00:42:32.900 --> 00:42:33.640
Yeah, right, right.

00:42:33.640 --> 00:42:35.940
Yeah, I was working at Spotify when I started the project.

00:42:36.160 --> 00:42:38.900
eBay is a big user of Python, so that makes a lot of sense.

00:42:38.900 --> 00:42:39.800
Yeah, I know.

00:42:39.800 --> 00:42:42.400
I have seen some contributions from people working there.

00:42:42.400 --> 00:42:46.280
Again, I'm talking based on where I have seen they work.

00:42:46.280 --> 00:42:48.460
I don't really know what they're doing.

00:42:48.460 --> 00:42:54.000
There are a few IXPs like Lynx and Linux, which if you're a network engineer, you probably know who they are.

00:42:55.000 --> 00:42:56.920
And Fastly, we use it as well.

00:42:56.920 --> 00:43:01.920
And another big contributor is also Cloudflare, which is another CDN.

00:43:01.920 --> 00:43:05.200
But yeah, there are a few contributors.

00:43:05.200 --> 00:43:07.900
They seem to be working in interesting places.

00:43:07.900 --> 00:43:08.540
Yeah, that's great.

00:43:08.540 --> 00:43:10.400
Are you looking for more contributors?

00:43:10.400 --> 00:43:15.300
People always ask me if there are good places to get started in open source that are kind of new.

00:43:15.300 --> 00:43:16.180
They want to check this out.

00:43:16.180 --> 00:43:19.260
So are you looking for competitors and what kind, I guess?

00:43:19.260 --> 00:43:20.420
Anyone could help, actually.

00:43:20.420 --> 00:43:23.460
There is a lot of work to do, both in, I don't know,

00:43:23.520 --> 00:43:25.660
like something as basic as documentation.

00:43:25.660 --> 00:43:31.500
That's kind of like even if you don't know Python or you're starting with Python, you can always help there.

00:43:31.500 --> 00:43:39.660
And then also something you have to bear in mind is that this is mostly built by network engineers,

00:43:39.660 --> 00:43:43.060
which means that it might not be the best Python.

00:43:43.060 --> 00:43:49.580
So even if you don't know anything about networking, but you just want to help a project by just reviewing the code

00:43:49.580 --> 00:43:53.440
and proposing improvements or something like that,

00:43:53.440 --> 00:43:58.040
like, yeah, Napalm would be a great fit for that because, yeah, we are mostly network engineers.

00:43:58.040 --> 00:44:00.780
But, yeah, we don't know what we are doing.

00:44:00.780 --> 00:44:03.000
We're just trying to solve problems.

00:44:03.000 --> 00:44:04.060
Hey, we made it work.

00:44:04.060 --> 00:44:04.440
It's great.

00:44:04.440 --> 00:44:08.800
So I asked you earlier about how you deal with the hardware that you don't know about.

00:44:08.840 --> 00:44:13.260
But if somebody's got some new piece of hardware and they want to integrate it into Napalm,

00:44:13.260 --> 00:44:16.360
what are all the steps that they got to go through for that to work?

00:44:16.400 --> 00:44:23.540
So if you're a vendor, which actually has happened already, it's the same workflow as if you were just a regular contributor.

00:44:23.540 --> 00:44:27.100
Like you just come to us proposing the idea.

00:44:27.100 --> 00:44:31.900
That's just so we know that you're working on that because someone might already be working on us.

00:44:31.900 --> 00:44:35.660
It's trying to avoid duplicating effort.

00:44:35.880 --> 00:44:36.660
But I don't know.

00:44:36.660 --> 00:44:38.920
We don't really have a formal structure.

00:44:38.920 --> 00:44:42.780
Like there are certain ways that you have to integrate with the project.

00:44:42.780 --> 00:44:48.460
But that's just part of how the project is kind of designed.

00:44:48.460 --> 00:44:50.080
It's not really like formalities.

00:44:50.080 --> 00:44:53.760
Like, oh, yeah, you have to support at least these three methods.

00:44:53.760 --> 00:44:56.280
And if they're not supported, like it's a completely no-go.

00:44:56.280 --> 00:44:58.800
Like, no, we don't really have strict rules like that.

00:44:58.800 --> 00:45:00.800
I mean, if it's useful, it's useful.

00:45:00.800 --> 00:45:06.120
Even if it's just like a couple of methods, someone else might just pick it up and improve it.

00:45:06.120 --> 00:45:06.400
Right.

00:45:06.400 --> 00:45:08.360
Just getting it started might be a big deal.

00:45:08.360 --> 00:45:08.880
Nice.

00:45:08.880 --> 00:45:09.120
Okay.

00:45:09.120 --> 00:45:09.660
That's great.

00:45:09.660 --> 00:45:12.700
So what's the feature, Nepal?

00:45:12.700 --> 00:45:14.880
Like, what are you guys planning to add?

00:45:14.880 --> 00:45:16.300
Or where is it going?

00:45:16.300 --> 00:45:24.120
Now we just launched a new library where we tried to normalize syslog events, for example.

00:45:24.120 --> 00:45:25.320
This is completely new.

00:45:25.320 --> 00:45:30.620
The first release was launched like maybe a couple of weeks ago.

00:45:31.580 --> 00:45:40.280
So because this, yeah, in the same way that every device has its own CLI and output from different calls.

00:45:40.280 --> 00:45:41.040
Yeah.

00:45:41.040 --> 00:45:47.220
In the same way that that happens, they also send like different syslog events with different data and everything.

00:45:47.220 --> 00:45:50.800
So now we are trying to be able to normalize that.

00:45:50.800 --> 00:46:01.760
So you can just start this service, use it as a syslog endpoint and just normalize the data and send it somewhere else, like whatever, log stash or whatever you're doing.

00:46:01.760 --> 00:46:03.380
And I don't know.

00:46:03.380 --> 00:46:06.560
We're trying now to integrate as well with OpenConfig.

00:46:06.760 --> 00:46:14.980
OpenConfig is an industry effort to normalize the data that devices return, for example.

00:46:14.980 --> 00:46:20.000
So when we started, OpenConfig didn't exist yet.

00:46:20.220 --> 00:46:24.640
So we designed our own data models, to call them in some way.

00:46:24.640 --> 00:46:29.000
And now we are trying to start integrating with this data models.

00:46:29.000 --> 00:46:29.340
Yeah.

00:46:29.340 --> 00:46:34.440
So if there's going to be a standard around all the data, then you guys definitely want to be part of it.

00:46:34.440 --> 00:46:34.640
Yeah.

00:46:34.720 --> 00:46:39.900
So now we're trying to integrate with that instead of just completely designing everything ourselves.

00:46:39.900 --> 00:46:42.000
Like, yeah, if someone is solving that problem for me, why not?

00:46:42.000 --> 00:46:42.420
Yeah.

00:46:42.420 --> 00:46:46.500
And if people want to get in touch, you have both a Slack channel and a mailing list, right?

00:46:46.500 --> 00:46:46.960
Yeah.

00:46:46.960 --> 00:46:48.520
We're in Slack.

00:46:48.520 --> 00:46:51.360
The Slack organization is called Network2Code.

00:46:51.360 --> 00:46:55.120
We can probably add a link on the show notes to the page to register.

00:46:55.120 --> 00:46:59.560
And there is also a mailing list, although it's not very active, to be honest.

00:46:59.560 --> 00:47:01.600
Most people prefer Slack nowadays.

00:47:01.600 --> 00:47:04.200
Looks like email is slowly dying.

00:47:04.200 --> 00:47:12.680
And we actually launched today a webpage to keep all the news posted there and links to the Slack channel and everything.

00:47:12.680 --> 00:47:15.440
So that's actually a good...

00:47:15.440 --> 00:47:15.960
Wow, that's great.

00:47:15.960 --> 00:47:16.560
Just today, huh?

00:47:16.560 --> 00:47:17.180
Yeah, yeah.

00:47:17.180 --> 00:47:18.800
Just like a couple of hours ago.

00:47:18.800 --> 00:47:19.580
Nice.

00:47:19.580 --> 00:47:24.700
Be sure to put that in the show notes that we're sharing so we can make sure everyone has that.

00:47:24.700 --> 00:47:27.460
Yeah, because before we had just the GitHub.

00:47:27.460 --> 00:47:33.740
But GitHub is not great if you want to keep people up to date into like, oh, yeah, we just launched this.

00:47:33.940 --> 00:47:35.500
Or we have fixed this.

00:47:35.500 --> 00:47:39.540
So make sure that you are updating your requirements and stuff like that.

00:47:39.540 --> 00:47:41.720
So, yeah, we built this web too.

00:47:41.720 --> 00:47:42.260
Yeah, nice.

00:47:42.260 --> 00:47:42.420
Yeah.

00:47:42.420 --> 00:47:45.860
And what's the Python 3 versus Python 2 story?

00:47:45.860 --> 00:47:48.960
Do you support both or one or the other?

00:47:48.960 --> 00:47:50.320
Yeah, we actually support both.

00:47:50.320 --> 00:47:58.000
Kirk, which is one of the main contributors and happens to be also the creator of NetMiko, the tool that I mentioned before.

00:47:58.200 --> 00:47:59.980
He really likes Python 3.

00:47:59.980 --> 00:48:01.560
So he worked very, very hard.

00:48:01.560 --> 00:48:04.620
And he got all the code working there.

00:48:04.620 --> 00:48:05.260
That's great.

00:48:05.260 --> 00:48:06.720
Very nice.

00:48:06.720 --> 00:48:11.280
So you don't have to worry in a couple of years when Python 2 gets phased out.

00:48:11.980 --> 00:48:12.660
That's good.

00:48:12.660 --> 00:48:13.080
All right.

00:48:13.080 --> 00:48:15.380
So Napalm seems like a really cool project.

00:48:15.380 --> 00:48:19.040
If you're doing network automation, it seems really excellent.

00:48:19.040 --> 00:48:21.040
So I wanted to ask you why I had you here.

00:48:21.040 --> 00:48:25.100
A few more general questions just about networking type of things.

00:48:25.960 --> 00:48:28.920
So what is the future for network?

00:48:28.920 --> 00:48:30.960
What does it look like for network engineers, do you think?

00:48:30.960 --> 00:48:35.280
More stuff like what you're doing with Napalm or is it changing or what do you think?

00:48:35.280 --> 00:48:36.580
Million dollar question, I guess.

00:48:36.580 --> 00:48:37.840
Everybody keeps asking that.

00:48:37.840 --> 00:48:39.080
I don't know.

00:48:39.080 --> 00:48:46.840
I mean, the way I see it is somehow the network engineer will transition into an SRE type of role.

00:48:46.960 --> 00:48:54.640
Where you're not this CLI jockey that knows all in and outs of a network device, all the knobs.

00:48:54.640 --> 00:49:00.620
Networks are becoming simpler and simpler because people keep just building bigger and bigger.

00:49:00.620 --> 00:49:03.120
So there is less room for snowflakes.

00:49:03.120 --> 00:49:08.260
So I see more like network engineers transitioning into an SRE type of role.

00:49:08.260 --> 00:49:08.560
Okay.

00:49:08.560 --> 00:49:14.520
And do you think things like this data standard you talked about and Napalm itself,

00:49:14.740 --> 00:49:19.440
where you don't actually have to know the details as specifically about the devices?

00:49:19.440 --> 00:49:25.600
Do you think it's more automation programmability, less specific knowledge about the individual devices?

00:49:25.600 --> 00:49:29.760
Well, the thing is that networks traditionally were full of knobs.

00:49:29.760 --> 00:49:36.660
Like you go and you configure OSPF and then you enable this super obscure option in here.

00:49:36.660 --> 00:49:41.160
Then this other knob in that other place.

00:49:41.960 --> 00:49:47.480
Like, yeah, when your network is not so small, you keep just trying to optimize like everything.

00:49:47.480 --> 00:49:53.400
But now when you start building things at a bigger scale, like there is not that much room for those kind of thing.

00:49:53.400 --> 00:49:55.140
Like you need to build something fast.

00:49:55.140 --> 00:50:01.480
Regardless of if you're doing it manually or in an automated way, you need to start standardizing things.

00:50:01.740 --> 00:50:05.320
So my guess is that eventually things will happen.

00:50:05.320 --> 00:50:07.080
I mean, it's the same that happened with other services.

00:50:07.080 --> 00:50:14.500
Like before you had like, I don't know, 20 instances of MySQL and each one was configured differently, trying to optimize every detail.

00:50:14.500 --> 00:50:17.940
Now that you have like 100 MySQL, I don't look the same.

00:50:17.940 --> 00:50:20.480
I didn't really care about anything.

00:50:20.480 --> 00:50:21.260
Yeah, whatever.

00:50:22.060 --> 00:50:26.220
Yeah, it's more about trying to manage 100 things than it is about tweaking little bits.

00:50:26.220 --> 00:50:30.040
Because if you can manage 100, you can just add a few more and get better performance or whatever, right?

00:50:30.040 --> 00:50:31.440
Yeah, the cloud is cheap, right?

00:50:31.440 --> 00:50:32.880
So you just have more compute.

00:50:32.880 --> 00:50:34.000
That's right.

00:50:34.000 --> 00:50:37.900
The other thing I wanted to ask you about was IoT devices, right?

00:50:37.900 --> 00:50:42.200
So we saw recently one of the, it was the biggest denial of service attack.

00:50:42.200 --> 00:50:51.160
And the denial of service attack actually came from a bunch of hacked webcams or something like this, a bunch of these IoT things.

00:50:51.160 --> 00:51:00.100
So it seems to me like having all these little crappy, unsecured, non-updated devices on networks is a problem.

00:51:00.100 --> 00:51:02.460
It's going to be more and more of a problem as things go.

00:51:02.460 --> 00:51:06.340
Like from a network perspective, like what can be done about these things?

00:51:06.340 --> 00:51:09.800
The problem is where are those IoT devices located?

00:51:09.800 --> 00:51:16.080
Are they located like behind a corporate network or are they located behind like someone's home?

00:51:16.080 --> 00:51:22.420
Probably someone's home connected to a crappy firewall, a crappy NAT router that is like hasn't been updated in five years.

00:51:22.420 --> 00:51:33.760
Yeah, I mean, then you have a problem because there is no actual way of automating that box that your provider gave you and didn't even provide you the user and passwords, right?

00:51:33.760 --> 00:51:36.160
Yeah, I guess there is a little hope in there.

00:51:36.160 --> 00:51:37.900
Not a whole lot of hope.

00:51:37.900 --> 00:51:39.920
Do you have any hope for it?

00:51:39.920 --> 00:51:42.840
Do you think like, what do you think is going to happen?

00:51:42.840 --> 00:51:43.500
I don't know.

00:51:43.500 --> 00:51:52.620
I hope that at some point, like the people building those devices actually take some responsibility and pride, I guess, on what they are building.

00:51:52.620 --> 00:51:55.300
And they start building them properly.

00:51:55.300 --> 00:51:59.040
I mean, that's actually the only thing we can hope for because you don't know where they are going to be.

00:51:59.040 --> 00:52:03.180
Like if they're behind a corporate network, you can always secure the perimeter somehow.

00:52:03.180 --> 00:52:07.220
But I mean, yeah, I mean, if it's at your, I mean, at home, like, I don't know.

00:52:07.220 --> 00:52:08.880
Yeah, it's kind of kind of tough.

00:52:08.940 --> 00:52:17.280
Even if you put them on like isolated networks, like my router will let me create multiple, like a guest network and another one, I could put it on there and it won't get to my stuff.

00:52:17.280 --> 00:52:20.460
But still, it becomes a denial of service thing on the internet, right?

00:52:20.460 --> 00:52:21.140
Which is not great.

00:52:21.220 --> 00:52:23.200
Yeah, and you're tech savvy, right?

00:52:23.200 --> 00:52:30.060
Like, I mean, if my parents try to, like, they buy like this Philips bulb that can do like a million things.

00:52:30.060 --> 00:52:31.880
Like, I mean, they have no idea about computers.

00:52:31.880 --> 00:52:35.980
They just bought it with the remote control that it comes and it just works.

00:52:35.980 --> 00:52:42.560
Yeah, it seems to me that the silly cheap light bulbs and other things like this are going to have an interesting fix in the future.

00:52:42.560 --> 00:52:45.820
And networking will probably somehow be part of it, but I don't know what it is yet.

00:52:45.820 --> 00:52:47.880
All right, well, thanks for those questions.

00:52:47.880 --> 00:52:49.600
So, I mean, we should wrap it up.

00:52:49.600 --> 00:52:50.800
We're getting kind of into the show.

00:52:50.800 --> 00:52:53.460
So, a couple of questions for you.

00:52:53.460 --> 00:52:56.460
If you're going to write some Python code, what editor do you use?

00:52:56.460 --> 00:52:57.480
BI, always.

00:52:57.480 --> 00:52:59.020
BI, awesome.

00:52:59.020 --> 00:53:01.120
Yeah, I saw you use it on your demo there in the video.

00:53:01.120 --> 00:53:01.560
That's great.

00:53:01.560 --> 00:53:04.700
And notable PyPI packages.

00:53:04.700 --> 00:53:05.540
Aha.

00:53:05.540 --> 00:53:08.780
So, obviously, we can pip install Napalm, right?

00:53:08.780 --> 00:53:09.400
Yeah, correct.

00:53:09.400 --> 00:53:09.820
Okay.

00:53:09.820 --> 00:53:11.300
So, there's a good one.

00:53:11.300 --> 00:53:12.340
Any others?

00:53:12.340 --> 00:53:17.220
I would say Hammock, which builds on top of requests, and Enmico.

00:53:17.220 --> 00:53:19.220
Yeah, those are probably the two I would mention.

00:53:19.220 --> 00:53:19.840
Yeah, okay.

00:53:20.040 --> 00:53:21.060
I don't know about Hammock.

00:53:21.060 --> 00:53:21.640
That's cool.

00:53:21.640 --> 00:53:22.300
What does it do?

00:53:22.300 --> 00:53:25.120
It's mostly a wrapper on top of requests.

00:53:25.120 --> 00:53:33.900
So, you can start doing, like, you create your instance, and then you do, like, myapi.api.v1.host.get.

00:53:34.460 --> 00:53:36.480
And then the URL just builds itself.

00:53:36.480 --> 00:53:37.480
So, it's kind of like...

00:53:37.480 --> 00:53:38.220
Oh, interesting.

00:53:38.220 --> 00:53:38.680
I see.

00:53:38.680 --> 00:53:39.440
Nice to use.

00:53:39.440 --> 00:53:43.940
It uses, like, the dynamic nature of types themselves to express the URL.

00:53:43.940 --> 00:53:45.140
Okay, that's really cool.

00:53:45.140 --> 00:53:46.040
I got to check that out.

00:53:46.040 --> 00:53:47.300
All right.

00:53:47.300 --> 00:53:48.920
So, it was very nice.

00:53:48.920 --> 00:53:49.760
Thanks for being on the show.

00:53:49.760 --> 00:53:50.900
Any final call for action?

00:53:50.900 --> 00:53:52.740
If people want to get started, how do they do it?

00:53:52.740 --> 00:53:57.460
So, well, if people want to get started, they can always visit our new webpage where you

00:53:57.460 --> 00:54:01.700
can find links to our GitHub repo, to the documentation as well.

00:54:01.700 --> 00:54:07.920
We have instructions on how to use VMs so you can actually start poking at Napalm without

00:54:07.920 --> 00:54:09.960
having to deal with the actual infrastructure.

00:54:09.960 --> 00:54:14.420
So, yeah, our website, it's probably the best place to begin with.

00:54:14.420 --> 00:54:14.680
Okay.

00:54:14.680 --> 00:54:15.360
Excellent.

00:54:15.360 --> 00:54:17.340
Well, David, thank you so much for being on the show.

00:54:17.340 --> 00:54:19.600
It was great to talk about networks with you.

00:54:19.600 --> 00:54:20.720
Yeah, thank you for having me here.

00:54:20.720 --> 00:54:21.560
It was a lot of fun.

00:54:21.660 --> 00:54:22.260
You've got...

00:54:22.260 --> 00:54:25.860
This has been another episode of Talk Python To Me.

00:54:25.860 --> 00:54:31.520
Today's guest was David Barroso, and this episode has been brought to you by Linode and Rollbar.

00:54:31.520 --> 00:54:35.700
Linode is bulletproof hosting for whatever you're building with Python.

00:54:35.700 --> 00:54:40.060
Get your four months free at talkpython.fm/linode.

00:54:40.060 --> 00:54:42.600
Just use the code python17.

00:54:42.600 --> 00:54:45.840
Rollbar takes the pain out of errors.

00:54:45.840 --> 00:54:50.800
They give you the context and insight you need to quickly locate and fix errors that might

00:54:50.800 --> 00:54:53.540
have gone unnoticed until your users complain, of course.

00:54:53.540 --> 00:54:59.800
As Talk Python To Me listeners, track a ridiculous number of errors for free at rollbar.com slash

00:54:59.800 --> 00:55:00.600
talkpythontome.

00:55:00.600 --> 00:55:03.560
Are you or a colleague trying to learn Python?

00:55:03.560 --> 00:55:08.200
Have you tried books and videos that just left you bored by covering topics point by point?

00:55:08.200 --> 00:55:14.220
Well, check out my online course, Python Jumpstart, by building 10 apps at talkpython.fm/course

00:55:14.220 --> 00:55:16.840
to experience a more engaging way to learn Python.

00:55:16.840 --> 00:55:21.620
And if you're looking for something a little more advanced, try my Write Pythonic code course

00:55:21.620 --> 00:55:24.160
at talkpython.fm/pythonic.

00:55:24.160 --> 00:55:26.880
Be sure to subscribe to the show.

00:55:26.880 --> 00:55:29.080
Open your favorite podcatcher and search for Python.

00:55:29.080 --> 00:55:30.320
We should be right at the top.

00:55:30.700 --> 00:55:36.120
You can also find the iTunes feed at /itunes, Google Play feed at /play, and

00:55:36.120 --> 00:55:39.660
direct RSS feed at /rss on talkpython.fm.

00:55:39.660 --> 00:55:42.000
Are you looking for a way to support the show?

00:55:42.000 --> 00:55:45.060
Well, taking or recommending one of our courses is really the best way.

00:55:45.060 --> 00:55:47.360
But if that's not for you, you can become a patron.

00:55:47.360 --> 00:55:51.340
Visit patreon.com slash mkennedy for details.

00:55:51.340 --> 00:55:53.920
You can give as little as $1 an episode.

00:55:53.920 --> 00:55:55.660
This is your host, Michael Kennedy.

00:55:55.660 --> 00:55:57.020
Thanks so much for listening.

00:55:57.020 --> 00:55:58.080
I really appreciate it.

00:55:58.080 --> 00:56:00.060
Now get out there and write some Python code.

00:56:00.060 --> 00:56:01.060
Thank you.

00:56:01.060 --> 00:56:02.060
Thank you.

00:56:02.060 --> 00:56:03.060
Thank you.

00:56:03.060 --> 00:56:03.060
Thank you.

00:56:03.060 --> 00:56:04.060
Thank you.

00:56:04.060 --> 00:56:04.060
Thank you.

00:56:04.060 --> 00:56:05.060
Thank you.

00:56:05.060 --> 00:56:05.060
Thank you.

00:56:05.060 --> 00:56:06.060
Thank you.

00:56:06.060 --> 00:56:06.060
Thank you.

00:56:06.060 --> 00:56:06.060
Thank you.

00:56:06.060 --> 00:56:06.060
Thank you.

00:56:06.060 --> 00:56:07.060
Thank you.

00:56:07.060 --> 00:56:08.060
Thank you.

00:56:08.060 --> 00:56:08.060
Thank you.

00:56:08.060 --> 00:56:08.060
Thank you.

00:56:08.060 --> 00:56:08.060
Thank you.

00:56:08.060 --> 00:56:09.060
Thank you.

00:56:09.060 --> 00:56:10.060
Thank you.

00:56:10.060 --> 00:56:10.060
Thank you.

00:56:10.060 --> 00:56:10.060
Thank you.

00:56:10.060 --> 00:56:11.060
Thank you.

00:56:11.060 --> 00:56:12.060
Thank you.

00:56:12.060 --> 00:56:12.060
Thank you.

00:56:12.060 --> 00:56:13.060
Thank you.

00:56:13.060 --> 00:56:14.060
Thank you.

00:56:14.060 --> 00:56:14.060
Thank you.

00:56:14.060 --> 00:56:15.060
Thank you.

00:56:15.060 --> 00:56:16.060
Thank you.

00:56:16.060 --> 00:56:17.060
Thank you.

00:56:17.060 --> 00:56:17.560
you

00:56:17.560 --> 00:56:20.560
Thank you.

00:56:20.560 --> 00:56:50.540
Thank you.

