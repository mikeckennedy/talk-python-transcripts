WEBVTT

00:00:00.001 --> 00:00:05.100
It's been a fantastic year for Python. Literally, every year is better than the last with so much

00:00:05.100 --> 00:00:10.260
growth and excitement happening in the Python space. That's why I've asked two of my knowledgeable

00:00:10.260 --> 00:00:15.840
Python friends, Dan Bader and Brian Okken, to help pick the top 10 stories from the Python community

00:00:15.840 --> 00:00:21.640
for 2018. Join us on this episode of Talk Python to Me to Count Them Down. This episode was recorded

00:00:21.640 --> 00:00:23.740
on November 27, 2018.

00:00:23.740 --> 00:00:41.540
Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries, the

00:00:41.540 --> 00:00:46.120
ecosystem, and the personalities. This is your host, Michael Kennedy. Follow me on Twitter,

00:00:46.120 --> 00:00:50.820
where I'm @mkennedy. Keep up with the show and listen to past episodes at talkpython.fm

00:00:50.820 --> 00:00:53.260
and follow the show on Twitter via at Talk Python.

00:00:53.260 --> 00:00:56.820
Brian, Dan, both of you, welcome back to Talk Python.

00:00:56.820 --> 00:00:57.500
Thank you.

00:00:57.500 --> 00:00:58.980
Hey, thanks. Great to be back again.

00:00:58.980 --> 00:01:01.620
Yeah, it's great to have you back as always. It's going to be so much fun.

00:01:01.620 --> 00:01:08.280
And it is time to look back on 2018. Can you believe it's the end of 2018? I just remembered

00:01:08.280 --> 00:01:11.480
how to write 2018 and not 2017 on all the stuff I have to sign.

00:01:11.480 --> 00:01:14.240
Yeah, it's gone by fast.

00:01:14.240 --> 00:01:20.920
It definitely has. It definitely has. So it's good to have you back. We're going to go through

00:01:20.920 --> 00:01:28.500
what the three of us have decided are some of the top stories in the Python space for 2018. And I just

00:01:28.500 --> 00:01:33.540
want to quickly throw out there for folks listening. This mostly does not include data science stories.

00:01:33.540 --> 00:01:38.740
There's a little bit here and there, but it's mostly pure Python. And the reason is, I'm also doing a

00:01:38.740 --> 00:01:43.460
show on data science year in review. So save those big stories for that one. Don't want to overlap.

00:01:43.460 --> 00:01:51.380
All right. Well, we're, we're going to start and do a top 10 countdown. And we're going to go from

00:01:51.380 --> 00:01:58.480
really interesting to the absolute big news at the end. And you can see what story we have picked to be

00:01:58.480 --> 00:02:04.140
the number one story of 2018 for the Python space. Let's do a little warm up here. And Dan,

00:02:04.140 --> 00:02:07.140
I'll let you kick this off. What was our number 10 item?

00:02:07.140 --> 00:02:13.240
Sounds good. So our number 10 is the Python 3.7 release and more specifically the performance

00:02:13.240 --> 00:02:19.720
optimizations in there. And I know you had a really good show on the podcast here with Anthony Shaw,

00:02:19.720 --> 00:02:26.000
where you guys talked about, you know, some of the changes in 3.7. And I just thought that 3.7

00:02:26.000 --> 00:02:29.620
should be on this list because it was a really, really good release. You know, there's a lot of like

00:02:29.620 --> 00:02:35.060
free performance improvements. It's always nice to see that. And it's just been awesome to see Python 3

00:02:35.060 --> 00:02:39.960
and see Python 3 specifically gets so much love and that it's under active development and it's

00:02:39.960 --> 00:02:46.860
making this forward progress. And I think it's also the release, or I think it was either 3.6 or 3.7,

00:02:46.860 --> 00:02:54.380
where Python 3 is now faster in all of the benchmarks than legacy Python, except for startup time. So I

00:02:54.380 --> 00:02:57.880
thought, you know, that's kind of a nice milestone for Python 3.

00:02:57.880 --> 00:03:02.700
I think that's a huge milestone for Python 3. I mean, this is sort of the year that the tide has turned

00:03:02.700 --> 00:03:07.900
turned for Python 3 in a big way. I think it was starting to turn before, but really this year,

00:03:07.900 --> 00:03:14.860
I think that's, that's one of the themes. And this is a major aspect of it, right? That Python 3 is now

00:03:14.860 --> 00:03:19.640
faster. There were always these couple of reasons people say, I'm holding out to Python 2. You guys,

00:03:19.640 --> 00:03:26.440
with your fancy Python 3 and your new keywords can just go play because my code is faster and faster

00:03:26.440 --> 00:03:32.120
beats everything. Right? Well, maybe not. Yeah. Well, I mean, faster never really beats everything.

00:03:32.120 --> 00:03:36.700
It's, it's faster development time too. And when you have a better data structures, you can sometimes

00:03:36.700 --> 00:03:42.260
develop faster. However, you're right that a lot of people were holding out because of the, some of the

00:03:42.260 --> 00:03:49.380
speed and, you know, and for certain, some applications that makes sense. But yeah, I think 3.7 is definitely

00:03:49.380 --> 00:03:54.840
faster. And, and the other thing is a lot of people had already, some people for some of their projects

00:03:54.840 --> 00:04:02.380
had already switched to Python 3.6. And that was probably from 2.7 to 3.6 was not an easy switch.

00:04:02.380 --> 00:04:08.880
Having a switch from 3.6 to 3.7 be like, oh, I don't have to do anything. It's just better now.

00:04:08.880 --> 00:04:13.000
That was a nice thing to have. Yeah. That's super nice. And I think that's a really great point you

00:04:13.000 --> 00:04:18.820
raised, Brian, that, you know, careful what you're optimizing for, right? Like if it was really all about

00:04:18.820 --> 00:04:23.160
speed, wouldn't we just be writing assembly code still, you know? Yeah.

00:04:23.240 --> 00:04:30.060
I bet you, I bet somebody good at writing assembly could crush the performance of Python or a lot of

00:04:30.060 --> 00:04:36.700
C++, but you know, they would release an app, a small app every 10 years and it would be buggy,

00:04:36.700 --> 00:04:41.600
right? Like there's just, it's not the most important thing. That's, that's for sure.

00:04:41.600 --> 00:04:45.680
One of my, my favorite examples there is, what's this, it's, what's this game called?

00:04:45.680 --> 00:04:53.840
it's rollercoaster tycoon, which was written by one person in wind 32 x86 assembly. It's like a hundred

00:04:53.840 --> 00:05:00.800
percent assembly code. And it's actually an amazing, amazing game. And it's, it's just,

00:05:00.800 --> 00:05:03.940
it just blows my mind. Like everything is, was written in assembly language.

00:05:04.500 --> 00:05:09.060
Wow. And it probably runs like totally smooth on like a 286 or something, right?

00:05:09.060 --> 00:05:17.380
Yeah. No, I think you needed a Pentium or something, but, now somebody's worked on like a Python

00:05:17.380 --> 00:05:23.300
going to need, I don't know, multi-core CPUs and whatnot to run at the same performance.

00:05:23.300 --> 00:05:27.340
Yeah. Who knows? But you know, another, another interesting thing that's coming out

00:05:27.340 --> 00:05:32.200
is more and more talk about actually compiling Python, which I think, you know, didn't make

00:05:32.200 --> 00:05:37.280
the list, but it's definitely something that, that came up like my Pisces, for example, and Cython and

00:05:37.280 --> 00:05:45.200
whatnot. Yeah. Yeah. So if we're going to release a new library or an awesome game, like roll rollercoaster

00:05:45.200 --> 00:05:51.380
tycoon or something like that, and we were going to do it in open source, probably the main full release

00:05:51.380 --> 00:05:57.100
after it's like totally stable and spent out for a year, it'd be like a zero dot. Oh one or,

00:05:57.220 --> 00:06:02.740
or O three, maybe an O three, like a zero dot 12. I don't know, something really, really small,

00:06:02.740 --> 00:06:09.440
right? Like that. Right. And that's been a theme that's gone through a lot of, a lot of open source.

00:06:09.440 --> 00:06:14.220
So I think I'd like to highlight a little bit of shift in just the versioning that seems to be

00:06:14.220 --> 00:06:19.740
happening around projects. I want to kick off this part of the conversation with talking about

00:06:19.740 --> 00:06:25.000
Mahmoud Hashemi's project called zero over Brian, do you remember covering that on Python bites?

00:06:25.000 --> 00:06:30.060
Yeah. He released it like as an April fool's thing, but it actually highlighted a lot of,

00:06:30.060 --> 00:06:36.240
a lot of things about different projects that were zero over after like, you know, years.

00:06:36.240 --> 00:06:41.720
Yeah. So the idea is kind of like I was describing at the beginning, like so many projects just never

00:06:41.720 --> 00:06:47.240
even reach version one dot O. And in some sense, it doesn't matter, right? Is the version number

00:06:47.240 --> 00:06:53.000
smaller or bigger? That tells you whether you have an older or new one, right? So that's fine. But there's a lot

00:06:53.000 --> 00:06:58.480
of people, especially coming from the enterprise space or from the commercial software space that

00:06:58.480 --> 00:07:03.700
sees things like zero dot 20 and go, Oh, that thing's like a super alpha. We're going to stay

00:07:03.700 --> 00:07:09.720
away from that until that reaches one O. And I think it has a tangible effect on turning off a certain

00:07:09.720 --> 00:07:15.700
category of folks, especially people who are maybe unfamiliar with open source and things like that.

00:07:15.780 --> 00:07:20.660
Yeah, I think definitely. We, I mean, a lot of people do a commercial software development

00:07:20.660 --> 00:07:28.480
and like I do, and, the zero, zero versions always, or almost always mean

00:07:28.480 --> 00:07:34.060
the API is in flux. You can't trust it. You shouldn't program against it because it can,

00:07:34.220 --> 00:07:39.320
the developers can change their mind at any time. And it isn't until the 1.0 version where we have a,

00:07:39.320 --> 00:07:45.380
a stable, a stable API that people can count on. Yeah. And so I think a lot of people perceive it

00:07:45.380 --> 00:07:46.320
that way, right? Yeah.

00:07:46.320 --> 00:07:51.420
And it's interesting to consider the, the version number as part of the user interface,

00:07:51.420 --> 00:07:56.260
you know, for, for an open source project, which makes absolute sense because of those,

00:07:56.260 --> 00:07:59.920
those effects where people are like, yeah, you know, is this, is this really ready to go here?

00:07:59.920 --> 00:08:04.020
Is this an early release or whatever? I mean, I'm wondering if it's really going to have a big

00:08:04.020 --> 00:08:08.380
impact, you know, if people are moving to something like, like dating their releases, like just

00:08:08.380 --> 00:08:13.560
calling them 2018 dot something, something, and you sort of get the November release, but it's,

00:08:13.560 --> 00:08:17.300
it's an interesting experiment for sure. I mean, it, it definitely looks a little bit nicer than,

00:08:17.300 --> 00:08:22.240
you know, having, I don't know, like somebody put pandas, pandas here, which had like 83 releases

00:08:22.240 --> 00:08:26.500
and it's been running or it's been active for eight years and it's sitting at 0.24.

00:08:27.620 --> 00:08:29.180
0.0.dev.

00:08:29.180 --> 00:08:29.920
0.dev.

00:08:29.920 --> 00:08:30.400
0.0.

00:08:30.400 --> 00:08:36.380
Nothing wrong with that, but I can see how it turns some people off. Yeah.

00:08:36.380 --> 00:08:41.220
I don't know how dev zero means production, but you know, to me that just says like, dude,

00:08:41.220 --> 00:08:43.100
stay away from this. Don't ship this.

00:08:43.100 --> 00:08:43.900
That's really scary.

00:08:43.900 --> 00:08:49.320
Yeah. I think the, you know, maybe the grandfather of zero for it might be putty,

00:08:49.320 --> 00:08:53.160
you know, that little, SSH tool you get for windows cause it doesn't come built in.

00:08:53.760 --> 00:08:57.920
Uh, that'll trade app. it's 20 years old and it's 0.7.

00:08:57.920 --> 00:09:04.000
One concern that I have with moving to the date based or like year based version numbers is how,

00:09:04.000 --> 00:09:08.380
like if you have the semantic versions, you can do things like, okay, I want,

00:09:08.380 --> 00:09:13.840
give me all the minor patches for this package and all the security updates, but I don't want to jump

00:09:13.840 --> 00:09:18.640
to the next major version, which maybe has a breaking changes in it. And I know that's not a perfect system.

00:09:18.640 --> 00:09:22.000
in general, you want to pin your packages, but it's kind of nice to have the ability to do that.

00:09:22.000 --> 00:09:27.300
And with, you know, who knows what's going to happen in like July, 2018 or something 19.

00:09:27.300 --> 00:09:32.540
Yeah, absolutely. So if you look at some of the tools that I know you use and I use, for example,

00:09:32.540 --> 00:09:37.900
I use pyup.io and use something slightly different, but they let you go to your requirements file or

00:09:37.900 --> 00:09:44.040
your pip file and say, I want you to keep this on the latest pin version possible with this constraint

00:09:44.040 --> 00:09:47.940
where you could say like 0.1.star or something like that. Right.

00:09:47.940 --> 00:09:52.340
Right. Yeah. But like, how would that work with, you know, date based.

00:09:52.340 --> 00:09:57.500
Exactly. So let's dig into that a little bit. So what are the two options? I guess the two options

00:09:57.500 --> 00:10:03.440
are just like to start shipping like full versions, like Django is now Django two and the Django two,

00:10:03.440 --> 00:10:09.200
the main change from one to two is we're dropping Python to support, which is kind of ironic. Maybe it

00:10:09.200 --> 00:10:13.780
should be Django three, but whatever, you know, it indicates a major change, like you were saying

00:10:13.780 --> 00:10:20.920
there. Right. So one of the projects that's switching to calendar based version is Sanic,

00:10:20.920 --> 00:10:25.960
right? The async web framework. And what they're doing is they're trying to ship a version,

00:10:25.960 --> 00:10:35.000
a major release every quarter. So they might be, you know, 2018.07.0, then .1.2 to,

00:10:35.000 --> 00:10:41.320
for like incremental changes, but they're also doing LTS releases around their calendar version.

00:10:41.320 --> 00:10:50.580
So every December is an LTS version. So 2018.12.0 and so on would be supported for a year and would

00:10:50.580 --> 00:10:55.120
be the LTS equivalent, the long-term support equivalent. If you don't want to switch to

00:10:55.120 --> 00:11:00.180
something beyond that, that's how that group is handling it. Interesting. Yeah. I kind of like that.

00:11:00.280 --> 00:11:05.320
Then you can glance at a version and, I mean, if everybody sort of supports something like that,

00:11:05.320 --> 00:11:10.160
you can glance at all of your versions and go, Oh, everything's within a year or so. So it's,

00:11:10.160 --> 00:11:14.360
it's probably fine. Exactly. Like Brian, you know a lot about testing. If I told you I'm using

00:11:14.360 --> 00:11:21.600
web test.2.0.32, is that new? Is it super old? Is that a beta version? Like what is it? Like,

00:11:21.600 --> 00:11:27.340
what is that? Right. You don't know. Yeah. But if I told you I was using web test 2019.1.0,

00:11:27.340 --> 00:11:31.180
like, Oh, you must be like testing the new one that's coming or, you know, something I,

00:11:31.180 --> 00:11:36.060
it's just communicates it. So Sanic is doing this. pip is doing this. and then you threw some

00:11:36.060 --> 00:11:39.560
others in there, Brian, what are these? I'm not familiar with them. There's some descriptions of

00:11:39.560 --> 00:11:44.880
calendar version and semantic version, calver.org and semver.org. I love that those are domains.

00:11:44.880 --> 00:11:51.740
I think Mahmoud did at least one of them, maybe both. He has this knack for creating these little

00:11:51.740 --> 00:11:57.200
sites and these little projects that just pop out of nowhere. But the, the, the, one of the things I want to

00:11:57.200 --> 00:12:03.180
point out is I was talking with, somebody about calendar versioning and that versus semantic

00:12:03.180 --> 00:12:08.940
versioning. And one of the things is that the major number, whether it's two or three or it's a date

00:12:08.940 --> 00:12:16.120
based often means, you're not going to, you're not going to remove features. So you promise not to

00:12:16.120 --> 00:12:21.920
break customer code within a major version. The date base kind of says we're at least going to stay.

00:12:22.060 --> 00:12:27.680
It's safe for a year. Yeah. Whereas a semantic versioning, you know, a development team can go

00:12:27.680 --> 00:12:31.900
through major versions as fast as they want to, if they feel like breaking things fast. That's true.

00:12:31.900 --> 00:12:36.640
That's true. It's just when you get the feeling to switch the major version from two to three or

00:12:36.640 --> 00:12:42.220
three to four, you just do it, right? Yeah. But it has impact. So, yeah, I think there's some

00:12:42.220 --> 00:12:46.500
interest there. So I think another thing that was really interesting about the calendar versioning that

00:12:46.500 --> 00:12:53.340
I learned talking to Adam Hopkins from the Sanic project was that there's this sense of you need

00:12:53.340 --> 00:12:58.980
to keep shipping, right? Like if you have a calendar version and it's from last year and that's the

00:12:58.980 --> 00:13:04.100
latest version that sends a message in and of itself that this project is, is not getting a lot of

00:13:04.100 --> 00:13:09.840
activity. Whereas without it, you know, you kind of got to be more deeply familiar with the project to

00:13:09.840 --> 00:13:14.460
understand its rate of improvement. Yeah. I think even it'd be cool to have people,

00:13:14.460 --> 00:13:18.920
even if there's not really any changes needed just to release it and say, Hey, we tested it. It's,

00:13:18.920 --> 00:13:24.560
this has all been tested on the new versions and you're good to go. We updated like the readme file

00:13:24.560 --> 00:13:29.620
or something. Right. Well, there's almost always like some minor little thing that can be,

00:13:29.620 --> 00:13:36.020
can be improved and shipped. Right. Another story of 2018 and maybe slightly before,

00:13:36.020 --> 00:13:40.200
but really was coming in strong in 2018 is Python's kind of popular.

00:13:40.200 --> 00:13:48.160
Yeah. So, Python's very popular. It's taking over the world. There was a neat economist article

00:13:48.160 --> 00:13:54.040
that came out and that, I guess that's just sort of related to the, they're highlighting a trend.

00:13:54.040 --> 00:13:59.400
And the article was, Python has brought computer programming programming to a vast new audience.

00:13:59.400 --> 00:14:06.320
But some of the things they point out within there is that, right now, according to a stack

00:14:06.320 --> 00:14:13.800
overflow survey, 40% of professional developers use Python and another 25% wish they did, which is

00:14:13.800 --> 00:14:19.180
interesting. It just, just go do it, man. Also the, they interviewed, Codecademy,

00:14:19.180 --> 00:14:25.940
which is an online training site and their biggest increase in demand, for 2018 is with Python.

00:14:25.940 --> 00:14:31.940
Yeah. That doesn't surprise me. I mean, you think about a very fast growing technology that also has

00:14:31.940 --> 00:14:37.280
a lot of career possibilities. Definitely people are going to be wanting to learn that, right? So if

00:14:37.280 --> 00:14:41.380
you go to somewhere like Codecademy or any other online trading place, like there's going to be,

00:14:41.380 --> 00:14:44.780
unless they're doing something wrong, there should be a lot of demand for Python.

00:14:44.980 --> 00:14:51.120
They noted that since 2014, at least in a, from a survey in 2014, Python was the most popular

00:14:51.120 --> 00:14:57.060
language, intro language at American universities, but that was amongst, people, studying

00:14:57.060 --> 00:15:03.460
sciences or computer science or something engineering. But what we're seeing now in 2018 is the growing

00:15:03.460 --> 00:15:09.220
movement of people that are not traditionally think of themselves as programmers, primarily learning

00:15:09.220 --> 00:15:15.140
Python. And, we'll see that in data sciences, embedded development is now moving towards

00:15:15.140 --> 00:15:22.140
Python and in, in, in a lot of maker senses. And then also the article also pointed out that more

00:15:22.140 --> 00:15:27.120
and more people are just sort of worried that all jobs will be taken over by automation. So they want

00:15:27.120 --> 00:15:32.060
to be part of that. So in order to, to learn some automation on your own, Python is a good way to,

00:15:32.060 --> 00:15:32.940
to be part of that.

00:15:32.940 --> 00:15:36.540
You either control the robots or you get replaced by the robots. Take your pick, right?

00:15:37.340 --> 00:15:45.320
Yeah. Also to throw in there, I saw this on, Nina Sakarenko's Twitter feed recently. so Python

00:15:45.320 --> 00:15:50.480
is becoming, or has been nominated as the official programming language for education in France. So I

00:15:50.480 --> 00:15:55.620
think it's going to be part of the high school curriculum there, which is, that's super cool.

00:15:55.620 --> 00:15:59.360
I think it's, we're seeing the snowball effect, you know, where, where people, it's really becoming

00:15:59.360 --> 00:16:03.540
the dominating language for beginners and educational language. And I think that's super cool.

00:16:03.540 --> 00:16:09.720
That is so cool. And when I saw that on Nina's post as well, I'm like, Oh, that is amazing. And you know,

00:16:09.720 --> 00:16:14.820
I've been thinking a lot about this. Like why is, is Python both popular as a teaching language and

00:16:14.820 --> 00:16:20.360
popular as a professional programming language? Like C++ is popular as a pro professional

00:16:20.360 --> 00:16:25.100
programming language, but they don't suggest that kids start with it. Right. Things like this.

00:16:25.200 --> 00:16:30.820
I think there's this special balance that when the language was created, it has this way to get

00:16:30.820 --> 00:16:36.900
started easily and to pull in just the aspects that you want. Right. So you can start out with not

00:16:36.900 --> 00:16:40.780
even functions and then like, okay, I need some structure. I'm going to put some functions in here.

00:16:40.780 --> 00:16:47.520
Oh, let's start working with classes and things like generators, but none of that, you don't have to

00:16:47.520 --> 00:16:52.180
understand or use or care about that until you're ready. So like Python has a special ability to start

00:16:52.180 --> 00:16:56.860
easy and small, but expand into professional type of apps. Whereas a lot of them are either,

00:16:56.860 --> 00:17:02.800
you're always a beginner type of language, or you're always like, yeah, that's a void star star kids.

00:17:02.800 --> 00:17:03.760
Let's talk about that.

00:17:03.760 --> 00:17:10.400
Totally. Yeah. Actually, Mike, I think you, you called it a full spectrum language way back when,

00:17:10.400 --> 00:17:16.280
when we did an interview in my, my blog with you. And that just really stuck with me because I think

00:17:16.280 --> 00:17:19.980
that's, that's so true. You know, it's, it's not just, it's not like you're learning, you know,

00:17:19.980 --> 00:17:23.780
like the little like turtle, like logo or something like that, where it's like, you learn the basics

00:17:23.780 --> 00:17:27.100
of programming, then you're sort of stuck and you have to move on and learn something else. But no,

00:17:27.100 --> 00:17:30.960
you can, you know, all the skills you learn working with Python, they kind of scale and,

00:17:30.960 --> 00:17:33.440
and grow with you. And that's, that's just a beautiful thing.

00:17:33.440 --> 00:17:35.580
It's special. There's not many other languages like that.

00:17:35.580 --> 00:17:36.720
What a time to be alive.

00:17:36.720 --> 00:17:39.040
It really is an amazing time to be alive.

00:17:42.040 --> 00:17:44.860
This portion of Talk Python to Me is brought to you by Cloudbolt.

00:17:44.860 --> 00:17:50.060
Friends don't let friends violate PEP 8, nor do they let them spend their days in an unfulfilling

00:17:50.060 --> 00:17:54.940
work environment. Good news. Your friends at Cloudbolt want your help developing their state-of-the-art

00:17:54.940 --> 00:17:59.160
cloud management software. Built with Django and ranked as the number one product of its kind,

00:17:59.160 --> 00:18:04.160
Cloudbolt's looking for talented engineers of all kinds. Located in beautiful Portland, Oregon,

00:18:04.160 --> 00:18:09.240
Cloudbolt is an hour from the Pacific Ocean and Mount Hood. You're not in Portland? Not a problem.

00:18:09.620 --> 00:18:14.640
Cloudbolt offers a relocation stipend to the Pacific Northwest and is also hiring solution

00:18:14.640 --> 00:18:19.840
engineers everywhere. Whether you're interested in containers, hypervisors, or just writing clean

00:18:19.840 --> 00:18:24.880
performant Python code, Cloudbolt would love to hear from you. Visit talkpython.fm slash

00:18:24.880 --> 00:18:31.680
Cloudbolt for more information. Brian, you, you touched on that a lot of the growth of Python was

00:18:31.680 --> 00:18:37.640
centered around people who are using Python as a tool, maybe not as their identity, right? Like

00:18:37.640 --> 00:18:41.060
Python developers are like, oh, I'm a Python developer, but other people are just using

00:18:41.060 --> 00:18:48.260
Python, maybe for data science or things like that. And so number, number seven in our list

00:18:48.260 --> 00:18:56.280
is that I'm going to declare 2018 as the year that the number of data scientists have come to equal the

00:18:56.280 --> 00:19:01.220
number of web developers in Python for professional Python developers or users, let's say.

00:19:02.000 --> 00:19:03.860
Okay, you're going to have to back that up a little bit.

00:19:03.860 --> 00:19:11.540
All right. So there was a really cool survey done by the PSF in conjunction with JetBrains. So JetBrains

00:19:11.540 --> 00:19:17.860
did the infrastructure for sort of analyzing it and hosting it and so on, but it was promoted just

00:19:17.860 --> 00:19:23.280
through the PSF and other public sources. So it's not like tied to JetBrains, but they did this really

00:19:23.280 --> 00:19:29.240
great survey. And it's called the Python developer survey 2017, which might sound like I'm wrong in my year

00:19:29.240 --> 00:19:34.260
and sort of I am, but this is at the very end. This is like November, December or something like

00:19:34.260 --> 00:19:40.440
that of 2017. So it's pretty much there. And they did a bunch of interesting, they asked a bunch of

00:19:40.440 --> 00:19:45.180
interesting questions and they found out a lot of things like, for example, four out of five Python

00:19:45.180 --> 00:19:51.760
developers use Python as their main language. So when you see people are using Python, mostly they're using

00:19:51.760 --> 00:19:56.820
that as their main language. It's not like, well, I write and see, but I also have this script that like

00:19:56.820 --> 00:20:00.840
compiles it in Python or some weird thing like that, right? So the majority of people using Python

00:20:00.840 --> 00:20:06.520
use it as their main language. And that's, that's pretty interesting. But the thing that I want to

00:20:06.520 --> 00:20:13.940
point out is they said for, you know, what do you use Python for? And if you pick where Python is main

00:20:13.940 --> 00:20:19.980
versus where Python is secondary, you get slightly different answers. But generally it says for data

00:20:19.980 --> 00:20:27.680
analysis and data science, 50% of the people use it for that and 49% of the people use it for web development.

00:20:27.680 --> 00:20:32.500
And then there's a whole bunch of other areas that like, you know, it's a multiple answer type of thing.

00:20:32.500 --> 00:20:39.280
So they've also checked those off. But in this survey, basically they said 50% of the people said data

00:20:39.280 --> 00:20:42.220
analysis, 49 web development. Does that surprise you guys?

00:20:42.360 --> 00:20:43.140
Not really.

00:20:43.140 --> 00:20:51.200
I think it surprised me. I know there's a lot of data scientists. I feel like on a web development team,

00:20:51.200 --> 00:20:57.960
there's more participants than on a data analysis team. I feel like a data analysis is often done by

00:20:57.960 --> 00:21:01.940
a smaller group of people than like the 30 people that maintain the website or, you know, whatever,

00:21:01.940 --> 00:21:07.820
right? Like that was my conception. I don't know if that's accurate, but apparently no. Either there's

00:21:07.820 --> 00:21:13.820
even more data scientists than I guess, or the there's larger teams of data scientists and smaller

00:21:13.820 --> 00:21:18.560
teams of web developers. So this is all interesting. Another thing that I, I thought was pretty

00:21:18.560 --> 00:21:26.220
interesting around this is they asked people to guess that ratio in this survey and they gave them

00:21:26.220 --> 00:21:30.860
like a five choices, four choices, something like that. And they said, what do you think the ratio is?

00:21:30.860 --> 00:21:36.740
Five times the number of web developers to every data scientist, one to one, you know, maybe worse.

00:21:36.740 --> 00:21:41.180
I can't like 10 to one. I can't remember. But when they asked that question to the group,

00:21:41.180 --> 00:21:46.060
half of whom were data scientists and half of whom were web developers based on the original question,

00:21:46.060 --> 00:21:53.760
the responses they got was only one, only 10% of the people got it right. 20%. And,

00:21:53.760 --> 00:22:02.200
most thought that it was five to one, five times web developers to one data scientist. So I think the

00:22:02.200 --> 00:22:06.320
general perception is there's more stuff happening on the web around Python than there are data

00:22:06.320 --> 00:22:12.960
scientists. But I think also what the most surprising thing to me when I saw that result was half of the

00:22:12.960 --> 00:22:18.200
people that answered that question were data scientists, you know? And so to me, my interpretation

00:22:18.200 --> 00:22:24.120
is that means that a lot of the data scientists feel like they're not as big of a representative group of

00:22:24.120 --> 00:22:28.620
the community as they are. They feel like, Oh, we're like 20% of the community. But in fact,

00:22:28.620 --> 00:22:32.260
they're like half. And I don't know why that is, but I think it's interesting.

00:22:32.260 --> 00:22:37.920
It is interesting. Well, there's definitely like a, if you look at the hype around different packages,

00:22:37.920 --> 00:22:44.800
for instance, there's more packages that are web related than there are data science related.

00:22:44.800 --> 00:22:50.600
Mostly I think because a lot of the data science tools have been bundled into these large groups of

00:22:50.600 --> 00:22:56.580
tools, even though. Yeah. Yeah. So they have like a common set of things that they were like,

00:22:56.980 --> 00:23:01.580
data scientists like to all use sort of this, you know, a handful of different tool chains,

00:23:01.580 --> 00:23:05.960
whereas web developers like to go off and create their own asynchronous library.

00:23:05.960 --> 00:23:09.340
Yeah. Everyone's got their own library to match their new JavaScript library.

00:23:09.340 --> 00:23:14.420
Yeah. I wonder if the Anaconda distribution and things like that also play into that feeling,

00:23:14.420 --> 00:23:18.460
right? You just install it and you just have the tools, right? You don't necessarily go and hunt

00:23:18.460 --> 00:23:20.760
for every little library as much.

00:23:20.760 --> 00:23:26.260
This sort of reminds me of who coined that term? Scott Hanselman, I think the concept of the dark

00:23:26.260 --> 00:23:27.060
matter developer.

00:23:27.060 --> 00:23:28.340
Yes. I was thinking that too.

00:23:28.340 --> 00:23:32.940
Yeah. Yeah. I think, I think you actually told me about it. So I guess the idea is that there's a

00:23:32.940 --> 00:23:38.860
large segment of the programming population or, you know, people who program for even for a living

00:23:38.860 --> 00:23:45.720
sometimes that are just not visible in the community. They, you know, get their work done and it's just

00:23:45.720 --> 00:23:49.620
not, maybe they don't identify as a programmer or it's not just something, it's just not something

00:23:49.620 --> 00:23:54.280
that they do publicly or have like side projects and stuff like that. Nothing wrong with that.

00:23:54.280 --> 00:24:00.520
Yeah. And most people, they don't go to conferences or go on social media and go crazy about their job.

00:24:00.520 --> 00:24:05.060
Like, like if I was a barista, nothing wrong with that, but like, I probably wouldn't go to barista

00:24:05.060 --> 00:24:10.440
conferences and go to barista meetups and like, you know, talk about being a barista on social media

00:24:10.440 --> 00:24:15.580
very much, right? Like it just, it just, yeah, you actually write some awesome stories if you did that.

00:24:15.580 --> 00:24:17.340
Make coffee for me.

00:24:17.340 --> 00:24:22.400
Hey, anyone out there listening, go for it. That's all you.

00:24:22.400 --> 00:24:23.300
I'm going to get that.

00:24:23.300 --> 00:24:27.800
I would listen to that. I think there's a lot, a huge number of companies that have

00:24:27.800 --> 00:24:34.060
one data scientist or data analyst in their company. And so they feel outnumbered because

00:24:34.060 --> 00:24:39.540
they're the only one in their company or there's like the, the ratio is very much skewed within

00:24:39.540 --> 00:24:41.600
their company, but they're kind of all over the place.

00:24:41.600 --> 00:24:44.840
Yeah. Yeah. I totally agree. And I do think there's a little bit of this dark matter.

00:24:45.480 --> 00:24:49.360
stuff possibly happening here. Maybe you're not allowed to talk about your analysis that

00:24:49.360 --> 00:24:54.500
you're doing. So you just don't, maybe you've backed into becoming this data scientist business

00:24:54.500 --> 00:25:00.660
sort of analyst type person. You started out as like a trader and then you, you kind of were the

00:25:00.660 --> 00:25:05.400
person that had enough code to like figure out how to do the overall reporting and analysis and whatnot.

00:25:05.400 --> 00:25:10.400
And you still don't think of yourself as a developer, but you effectively are. Right. So I don't know.

00:25:10.400 --> 00:25:12.120
I think there's a lot of interesting angles here.

00:25:12.120 --> 00:25:16.180
Yeah. Yeah. Also I was just thinking like, you know, a lot more secrecy maybe in the, in those

00:25:16.180 --> 00:25:20.680
areas. Like if you're working on some state of the art, like machine learning thing, I don't know,

00:25:20.680 --> 00:25:25.140
self-driving cars or whatever, maybe you don't necessarily want to go out there and share with

00:25:25.140 --> 00:25:29.240
the world what you just did. Whereas in the web development work, I feel like we're sort of,

00:25:29.240 --> 00:25:33.980
you know, we figured most of it out. And so people are more willing, I think, to,

00:25:33.980 --> 00:25:37.580
to share what they're working on. At least that's the impression that I got.

00:25:37.580 --> 00:25:39.940
And often it's, yeah, I agree. And it's on the web already.

00:25:39.940 --> 00:25:40.300
Yeah.

00:25:40.460 --> 00:25:44.980
Whereas if you're working on the Apple self-driving car, like you can't even acknowledge its existence,

00:25:44.980 --> 00:25:50.100
right? You're like working for the CIA. Yeah. I work for the state department. Okay. So anyway,

00:25:50.100 --> 00:25:57.320
if you want to dig into more of this, I had Eva Jelowalski and, Dmitry Filipov on,

00:25:57.320 --> 00:26:02.940
they're the two folks who did the, this and they printed it in a Python. So on Talk Python 176.

00:26:02.940 --> 00:26:06.520
All right. Item number six, Brian, what do we got?

00:26:06.520 --> 00:26:09.860
We have a darkening of the community. This is a very dark topic.

00:26:10.020 --> 00:26:12.760
It is a little dark, but kind of in a good way.

00:26:12.760 --> 00:26:20.220
Black is taking over. Black is, there's not in a bad way. So the project black is a code

00:26:20.220 --> 00:26:26.240
formatter that just sort of formats all your code for you. And, and, and it like PEP 8 and

00:26:26.240 --> 00:26:31.520
some of those flake eight and stuff tools were to tell you where places where you might want to look

00:26:31.520 --> 00:26:37.340
at your code and change it. Whereas black is, yeah, I'm not, I can tell you if you want me to tell you,

00:26:37.340 --> 00:26:38.780
but I'll just go ahead and change it.

00:26:39.460 --> 00:26:42.900
It's awesome. Sort of taking, there's a lot of projects around the web

00:26:42.900 --> 00:26:49.300
or around, Python that are picking it up and, and using it as their standard. And, I think

00:26:49.300 --> 00:26:52.720
it's been definitely very interesting in 2018 watching this happen.

00:26:52.720 --> 00:26:58.640
I love that tool. So it's so good. Like, especially if you, if it's a community project, you're working

00:26:58.640 --> 00:27:03.480
on a project with several developers and it's just so easy to standardize everything and you don't have

00:27:03.480 --> 00:27:08.280
to have the back and forth conversations of defining your own code style. And I mean, assuming you like

00:27:08.280 --> 00:27:14.140
the output that black produces, which I personally really like, and, it's, it's been super helpful

00:27:14.140 --> 00:27:19.780
for real Python. We have like an, materials repository, some sample projects. So like every single

00:27:19.780 --> 00:27:24.420
folder in there was created by a different person, by different author. And so I went down that, that

00:27:24.420 --> 00:27:27.940
route of like, okay, we're going to define like a beautiful code style and then tell people how to

00:27:27.940 --> 00:27:31.960
format everything and make sure it's, it's sort of adhere to. And that's really, really hard to do.

00:27:32.340 --> 00:27:36.560
And so I just ran black on the whole thing, set it up on CI. So we'll check, it'll check the

00:27:36.560 --> 00:27:42.780
formatting problem solved. And it took 15, 20 minutes to do that. So yeah. But what a lifesaver,

00:27:42.780 --> 00:27:43.480
such a great tool.

00:27:43.480 --> 00:27:48.980
So a couple of things about it. It's taken, it's one of the things that takes things like style and

00:27:48.980 --> 00:27:53.520
format and stuff like that, and takes those out of code reviews. And so code reviews can just be

00:27:53.520 --> 00:27:59.740
focused on algorithm and design and not on whether you use single quotes or versus double quotes or

00:27:59.740 --> 00:28:06.080
something. The other thing is, black shows an example. It has part of it is a pre-commit hook

00:28:06.080 --> 00:28:11.860
so that you can add a black pre-commit hook to your code. So everybody just as they're,

00:28:11.860 --> 00:28:17.980
as they're checking it in, we'll have black run on their code. And, that highlighted the pre-commit

00:28:17.980 --> 00:28:22.580
tool for me. And I think pre-commit is being used more and more because of black using it.

00:28:22.580 --> 00:28:25.560
Yeah. I've heard that more than once. That's pretty awesome. You're like, wait,

00:28:25.560 --> 00:28:29.600
what's a pre-commit hook? That thing exists in Git? Yeah, definitely.

00:28:29.600 --> 00:28:35.460
Nice. I like it. The slogan, like you can have it in any color you like as long as you want it in

00:28:35.460 --> 00:28:39.860
black. Yeah. I didn't know that that was from Henry Ford until somebody told me about Henry Ford saying

00:28:39.860 --> 00:28:44.180
that about the Model T. Does it have like a theme song or what's going on here? Oh, well, every time I

00:28:44.180 --> 00:28:50.480
use black, I hear Black Hole Sun from Soundgarden. So, I went ahead and just mentioned that in the

00:28:50.480 --> 00:28:55.500
Black Hole Sun is Soundgarden was such a good band. They, I mean, they really came from like a special

00:28:55.500 --> 00:29:01.620
era of music. We had them, Pearl Jam, Alice in Chains, Dinosaur Jr. Like there's a lot of good stuff

00:29:01.620 --> 00:29:05.500
back there, but this is the only one that seems to be making it to a Python package. So way to go.

00:29:05.500 --> 00:29:14.460
All right, Dan, for item number five, I feel like for a really long time, it was like, well,

00:29:14.780 --> 00:29:21.900
pypi.python.org slash pypi is a little bit out of date and a little bit crummy, but we're working on it.

00:29:21.900 --> 00:29:28.340
And it just, it seemed to be in this like stasis of like half improved forever, but not anymore, right?

00:29:28.340 --> 00:29:34.400
Yeah. The new, new pypi, new Python packaging index went live this year and what an amazing

00:29:34.400 --> 00:29:38.360
improvement. I mean, like, you know, throughout the whole project and I know you had a really,

00:29:38.360 --> 00:29:42.460
really great show where you interviewed, you know, a bunch of people working on that transition and

00:29:42.460 --> 00:29:46.620
launching the new and improved pypi. And it's just crazy, you know, like throughout the whole thing,

00:29:46.620 --> 00:29:50.760
it's, it's been like rewritten from the ground up the way I understand it. It's new hosting

00:29:50.760 --> 00:29:56.200
infrastructure and it's much more friendly now for new contributors. Like beforehand, I think it was

00:29:56.200 --> 00:30:03.500
sort of like a home grown web framework because, well, it was that pypi, old pypi was created before

00:30:03.500 --> 00:30:07.200
web frameworks really were a thing in Python. Here's the socket. Let's start with that. Like,

00:30:07.200 --> 00:30:11.720
wait, wait, wait, wait, what? Yeah. And so, yeah, I just love it. You know,

00:30:11.720 --> 00:30:15.160
like every time I'm searching for a package now, it just, it just looks so much better.

00:30:15.160 --> 00:30:19.860
It looks like, it looks good. You know, it's like, it's when you compare it with JavaScript,

00:30:19.860 --> 00:30:25.720
like the, the note JS world and NPM, I felt like, yeah, that was sort of the gold standard for a while

00:30:25.720 --> 00:30:29.840
for what a online package repository should look like and the features it should have.

00:30:30.100 --> 00:30:34.820
And I feel like pypi is now playing in that league and it's super nice.

00:30:34.820 --> 00:30:40.300
I think it is super nice as well. And it's silly to say that it matters that it looks good because

00:30:40.300 --> 00:30:46.640
it's just pip install a thing. But I think it really communicates a message to people who come into Python

00:30:46.640 --> 00:30:50.460
or who are using Python, but especially people who are new and they don't, they're like, oh,

00:30:50.460 --> 00:30:53.900
what is this stuff? Oh, there's a package injection. You're like, whoa, that thing is like from the

00:30:53.900 --> 00:30:59.020
90s. What is that? Right? Like that, I mean, that communicates something about how much the

00:30:59.020 --> 00:31:03.940
community cares for, for that kind of stuff. Right. Yeah. They also rolled that over with like

00:31:03.940 --> 00:31:09.120
everybody in the world using it and very little hiccups. Yeah. It definitely is.

00:31:09.120 --> 00:31:13.800
Really impressive. Yeah. It's super impressive. So a couple of interesting notes here when they

00:31:13.800 --> 00:31:19.180
rolled it out first, it was pypi.io and I thought, oh, they're just being part of this hip new.io.

00:31:19.180 --> 00:31:28.160
You know, it's like, it's like the .ly of yesteryear, you know, it's like Libya all of a sudden became a

00:31:28.160 --> 00:31:32.620
super awesome place to have like your domain name because it had ly in the end. And so io, right,

00:31:32.620 --> 00:31:40.540
it's super popular now, but now it's pypi.org. And the story is the pypi.org was owned by somebody else

00:31:40.540 --> 00:31:46.920
and it took a long time for the PSF to get it from them. Whereas they could go and buy pypi.io. So

00:31:46.920 --> 00:31:52.540
that was like an intermediate step in the whole rollout. Yeah. Some of the nasty details of web

00:31:52.540 --> 00:31:58.080
development. Exactly. And then the other one is, this is a pretty interesting example of a popular

00:31:58.080 --> 00:32:02.840
Pyramid web app, right? They, they started out in Flask and actually said, no, we'd rather go with

00:32:02.840 --> 00:32:08.360
Pyramid, which I thought was a pretty interesting choice being a fan of Pyramid myself. And then Brian

00:32:08.360 --> 00:32:14.820
finally marked down, right? Yeah. So they, the old PyPI was, did not support readme mark.md. It

00:32:14.820 --> 00:32:23.740
would only was a readme dot, what is that? RSL or something or. Yeah. RST. Yeah. So I try to avoid

00:32:23.740 --> 00:32:28.020
restructured text as much as I can. No offense to everybody that loves it. Yeah. I don't hear you.

00:32:28.020 --> 00:32:32.700
It's like markdown, but it's broken. The stuff you put in there doesn't quite work.

00:32:33.360 --> 00:32:38.080
Just kidding. No comment. Just kidding. Just kidding. I'm just saying the markdown

00:32:38.080 --> 00:32:43.180
stuff doesn't always work in there. All right. Number four, item number four, Brian, what we got?

00:32:43.180 --> 00:32:48.520
You touched on this a little bit before. Yeah. I think it's been fun to watch. It was unexpected.

00:32:48.520 --> 00:32:53.820
The rise of Python in the embedded world. We actually did a segment on this in, on Python

00:32:53.820 --> 00:33:00.700
Python bytes, but there's so many in partly from the maker movement and, and a lot of people trying

00:33:00.700 --> 00:33:05.820
to get into controlling their, not just their computers, but their world with, internet of

00:33:05.820 --> 00:33:10.080
things. And also just playing with, you know, adding lights to your bicycle and things like that with

00:33:10.080 --> 00:33:15.780
microcontrollers and hardware hacking. Adafruit's been a big part of that, of, pushing it, but,

00:33:15.780 --> 00:33:20.820
but there's a lot of projects around Python and embedded. Micro Python is one of those.

00:33:20.820 --> 00:33:27.060
And micro Python's being used by both, by both hobbyists and, and serious, developers.

00:33:27.060 --> 00:33:32.380
Hobbyists are serious developers too, but, but I think some companies are using micro Python as well.

00:33:32.380 --> 00:33:37.920
Adafruit has its own version of this called a circuit Python. Actually, I don't know if it's

00:33:37.920 --> 00:33:43.920
related to micro Python or not, but Adafruit has circuit Python. And then micro bit is,

00:33:44.360 --> 00:33:51.220
code, Python base for, the micro bit processor. And then we even have, mu, which is a,

00:33:51.220 --> 00:33:56.020
editor that directly interacts with, microcontrollers running Python.

00:33:56.020 --> 00:33:58.320
It's been pretty fun to watch this year.

00:33:58.320 --> 00:34:04.700
I really think the rights of IOT and Python is just taking root now. And micro Python is so

00:34:04.700 --> 00:34:09.360
interesting to me. I mean, the fact that can take a Lambda expression and tie it to a hardware

00:34:09.360 --> 00:34:12.940
interrupt just like never ceases to amaze me, you know?

00:34:12.940 --> 00:34:18.060
Yeah, that's really cool. And so, and a lot of this is because somebody wants to learn electronics

00:34:18.060 --> 00:34:22.080
or something, but they also want to make it do things. So you have to learn a programming language

00:34:22.080 --> 00:34:30.320
and it used to be, we taught people C and like the barrier to entry for C is huge. Having a Python

00:34:30.320 --> 00:34:31.940
be able to do that is wonderful.

00:34:31.940 --> 00:34:37.240
Yeah, it is. So you talk of the IOT stuff. I learned something from Matt McKay, recently

00:34:37.240 --> 00:34:41.520
on an episode, and I want to share this with you and just see what you think. So you guys click on this,

00:34:41.520 --> 00:34:49.780
this link here. So here's an IOT device using a Python. And the idea is the title of the article,

00:34:49.780 --> 00:34:55.080
this is on the Twilio blog. It's how I potty trained my kids using Twilio and an AWS IOT button.

00:34:55.080 --> 00:35:02.620
So, so it's a little button like those Amazon dash buttons. And he put it near his son's bed.

00:35:02.620 --> 00:35:07.200
And apparently there are kids sharing the room and wanting to make sure he didn't wake up and make a

00:35:07.200 --> 00:35:10.540
lot of noise and wake up with the other kids. So he put this button that basically has like a poop

00:35:10.540 --> 00:35:15.480
emoji and you click it and it says, I got to go. And the, the, the parents would come in and like

00:35:15.480 --> 00:35:20.920
help out the kid while he was learning. And this is written using like the Python API on like AWS

00:35:20.920 --> 00:35:24.280
Lambda and stuff like that. So yeah, the rise of Python and IOT.

00:35:24.280 --> 00:35:29.460
So Q4, 10 years. And his kids are like, dad, did you have to put that on the internet?

00:35:29.460 --> 00:35:32.480
This is awesome. I love this.

00:35:32.480 --> 00:35:32.800
Exactly.

00:35:32.800 --> 00:35:34.000
Yeah.

00:35:34.000 --> 00:35:34.820
This is great.

00:35:35.040 --> 00:35:39.520
Isn't this funny. So yeah, I mean, funny and like an amusing, but also like, actually

00:35:39.520 --> 00:35:44.440
that's kind of helpful. Like I can see how that would be helpful as a parent. Cause you definitely

00:35:44.440 --> 00:35:47.760
don't want your kids waking up and you have to be up for a few hours in the middle of the night.

00:35:47.760 --> 00:35:53.240
So if an IOT button can help that, then get the IOT button. All right. Item number three

00:35:53.240 --> 00:35:59.840
and it's packed full of goodness here, you guys. So legacy Python's days are fading. What do you

00:35:59.840 --> 00:36:07.800
think? Well, I haven't used it for ages. So yeah, I haven't either. Dan is real Python

00:36:07.800 --> 00:36:09.340
running on like what? Two, six.

00:36:09.340 --> 00:36:13.040
Yeah. Not a lot of legacy Python for me anymore. Thankfully.

00:36:13.040 --> 00:36:13.920
That's awesome.

00:36:13.920 --> 00:36:17.400
And yeah, it's, I mean, it's, it's kind of crazy that it's, you know, it's a sort of crap

00:36:17.400 --> 00:36:22.940
on us, the Python two end of life. And now we're not that far away anymore from it. So

00:36:22.940 --> 00:36:29.600
yeah, we're actually super close. And the official item that I'm linking to as this piece of news is

00:36:29.600 --> 00:36:35.540
Guido von Rossum's official statement. So I don't know, four years ago or something, it said, yeah,

00:36:35.540 --> 00:36:42.900
Python two, it'll be done in 2020, whatever. Right? Like that's like a broad range for a period where

00:36:42.900 --> 00:36:48.680
things stops a whole year. So we needed a more clear date. People are speculating. Maybe the date

00:36:48.680 --> 00:36:53.520
of PyCon might be a cool one. Maybe the end, maybe the beginning. So he came out and said, let's not

00:36:53.520 --> 00:36:59.140
play games with semantics. The way I see it for the situation for Python two seven is that end of life

00:36:59.140 --> 00:37:04.520
is January 1st, 2020. And there will be no updates, not even source only security patches after that date

00:37:04.520 --> 00:37:06.280
period. That sounds like the end.

00:37:06.280 --> 00:37:10.920
Yeah. It's a good end though, because the, and some people might complain about the whole security

00:37:10.920 --> 00:37:16.860
patches, but this is volunteer driven. So it's volunteers time. And I think that to let them work on new

00:37:16.860 --> 00:37:24.100
things is good. Yeah, absolutely. And it's not like people are surprised, right? It's not like,

00:37:24.100 --> 00:37:29.340
wait, last month they didn't, nobody told us there's going to be a new Python. Like it's been going on for

00:37:29.340 --> 00:37:35.180
10 years. This will make it 12. It's time. Yeah. And there's a couple of loudmouths that two podcasts

00:37:35.180 --> 00:37:39.540
that have been talking about it for a couple of years. So yeah, I think we're actually making a dent

00:37:39.540 --> 00:37:44.640
with this referring to Python two as legacy Python. I think it's, it's making a difference and not everybody

00:37:44.640 --> 00:37:47.880
loves it, but I know some people it's been working for.

00:37:47.880 --> 00:37:53.280
Do you guys know, you know, with the, no more official security patches, after the, the end of life

00:37:53.280 --> 00:37:58.140
date, I mean, obviously that this is a big like business opportunity for other companies to come in and

00:37:58.140 --> 00:38:03.760
offer, you know, long-term Python two updates and stuff. Does anybody know who's, who's doing that right now?

00:38:03.760 --> 00:38:08.140
Like some Linux distributions, I would guess, but I don't really know what's going on in that space.

00:38:08.140 --> 00:38:13.100
Yeah. Possibly the big news that I just heard. So, you know, there's red hat enterprise Linux,

00:38:13.100 --> 00:38:19.760
right? And they do a lot of that kind of stuff and the versions that they have live on for a long

00:38:19.760 --> 00:38:23.660
period of time, but they just announced that they're dropping Python two support from red hat

00:38:23.660 --> 00:38:28.400
enterprise Linux, which to me sounds like, okay, even the laggards are stepping forward.

00:38:28.400 --> 00:38:33.320
So I think that that's pretty big, but I suspect that there's still a lot of support on the backend.

00:38:33.320 --> 00:38:39.240
There's been a few people who've like talked about forking Python two and just supporting it

00:38:39.240 --> 00:38:44.120
themselves as a single individual, but it seems, I'm sure there's going to be some of that, but like

00:38:44.120 --> 00:38:49.060
as a company, like, let's say, I don't know, your bank of America, you're like, dude, we don't need

00:38:49.060 --> 00:38:53.180
to upgrade. There's this guy. He forked it. We're good. You know what I mean? Like that just doesn't

00:38:53.180 --> 00:39:01.040
seem realistic. It's also not just the C run, the CPython runtime anymore. It's like so much more

00:39:01.040 --> 00:39:07.340
than that. So Django no longer supports Python two, like the scientific stack, like NumPy and stuff are

00:39:07.340 --> 00:39:12.440
dropping support for Python two. So even if you still have the older stuff, you know, you're like,

00:39:12.440 --> 00:39:16.100
well, we can just keep running. It's not just about what's running your code. It's also what you can use

00:39:16.100 --> 00:39:20.800
in your code. And you know, that's going to start looking like it's just zooming off into the distance.

00:39:20.800 --> 00:39:22.060
So not good.

00:39:22.060 --> 00:39:27.840
Well, I mean, I think Python two will actually live on forever in some situations where like, for instance,

00:39:27.840 --> 00:39:32.180
you got something that doesn't need a security patch because it doesn't touch the internet at all.

00:39:32.180 --> 00:39:39.100
And as long as it will run on whatever CPU you're sticking it on for some people will have like a huge

00:39:39.100 --> 00:39:45.560
program that they never touch because the requirements never change. And they use it every day,

00:39:45.560 --> 00:39:50.620
but it doesn't need to be flexible. It doesn't need to be worked on that much. They'll probably upgrade

00:39:50.620 --> 00:39:56.280
when they have to change the program. So yeah, I'm wondering if that also means that Apple is

00:39:56.280 --> 00:40:02.340
finally moving to Python three and making that the default for macOS because the latest release,

00:40:02.340 --> 00:40:09.060
it's still with two, seven, 10, I think. Yeah, that would actually be really, really nice.

00:40:09.060 --> 00:40:15.440
You know, it's starting to shift in Ubuntu and just different Linux distributions, but also on macOS.

00:40:15.440 --> 00:40:17.380
So yeah, that would be, that'd be super cool.

00:40:17.380 --> 00:40:25.580
This portion of Talk Python to Me is brought to you by us. Have you heard that Python is not good

00:40:25.580 --> 00:40:30.560
for concurrent programming problems? Whoever told you that is living in the past because it's prime

00:40:30.560 --> 00:40:36.340
time for Python's asynchronous features. With the widespread adoption of async methods and the async

00:40:36.340 --> 00:40:42.320
and await keywords, Python's ecosystem has a ton of new and exciting frameworks based on async and await.

00:40:42.520 --> 00:40:47.440
That's why we created a course for anyone who wants to learn all of Python's async capabilities,

00:40:47.440 --> 00:40:54.520
async techniques and examples in Python. Just visit talkpython.fm/async and watch the intro video

00:40:54.520 --> 00:41:00.560
to see if this course is for you. It's only $49 and you own it forever. No subscriptions. And there are

00:41:00.560 --> 00:41:06.960
discounts for teams as well. Brian, you're talking about things that don't require security patches.

00:41:07.160 --> 00:41:12.980
I just saw a video from NASA talking about their trip to the moon and setting up a base there,

00:41:12.980 --> 00:41:18.860
which is just awesome. So they had like all this sort of quick, different scenes of people doing

00:41:18.860 --> 00:41:24.220
stuff. And one of the scenes was them working, they had sublime open, like editing a bunch of Python

00:41:24.220 --> 00:41:28.940
code controlling like something about the, the moon mission, which was pretty cool. But I didn't catch

00:41:28.940 --> 00:41:30.460
whether it was two or three. I couldn't tell.

00:41:32.340 --> 00:41:37.340
That's pretty cool. Yeah. Someone else on Reddit did catch that the sublime was unregistered by the

00:41:37.340 --> 00:41:48.320
way. Okay. So I guess the final thought here is we've also talked about this on Python bytes is that

00:41:48.320 --> 00:41:53.620
there's the Python clock.org, the Python to death clock. And it has been updated for this, this new

00:41:53.620 --> 00:41:58.720
end of life statement. And it reads one year, one month, two days. So if people are out there and

00:41:58.720 --> 00:42:03.400
they got to start upgrading, like the death clock is ticking. All right. I also got item number two

00:42:03.400 --> 00:42:10.500
and that I would categorize as the end of the innocence for PI PI and pip. So we've heard about

00:42:10.500 --> 00:42:17.660
a couple of issues, one, like right before 2018, like late 2017. And then another one again, this year

00:42:17.660 --> 00:42:26.800
about people posting or taking over control and posting some form of evil PI PI package.

00:42:26.800 --> 00:42:34.960
And primarily they look like they're kind of either a research project, a prank, or some kind of like

00:42:34.960 --> 00:42:42.600
Bitcoin theft. So one of them installed like a clipboard monitor that would watch for a Bitcoin

00:42:42.600 --> 00:42:47.140
addresses. And as soon as it saw one, it would like ship that off to like the mothership or something to

00:42:47.140 --> 00:42:53.720
that effect. But I don't know if anything super bad that's happened, but it, I guess until, you know,

00:42:53.720 --> 00:43:00.840
2016, 2017, PI PI as a place was just, it's incredible to me. It's a place on the internet

00:43:00.840 --> 00:43:08.760
that was entirely unprotected and yet safe. I can imagine that. Yeah. If you had like a open FTP

00:43:08.760 --> 00:43:12.140
server and you just put it on the internet, like all sorts of badness would happen to that thing

00:43:12.140 --> 00:43:16.360
in a day. It would be full of all sorts of things you don't want it to be full of.

00:43:16.620 --> 00:43:21.760
And here PI PI was going along and it was just, you know, the community sort of policed itself and

00:43:21.760 --> 00:43:26.140
took care of itself. Plus it used to be really hard to become a person that could push things to

00:43:26.140 --> 00:43:31.940
PI PI. Yeah. Maybe it correlates to the shipping of PI PI.org. Yeah. There seemed to be a lot of,

00:43:31.940 --> 00:43:37.000
like, not a lot, like I'm trying to be more specific, but I think NPM again, in the JavaScript,

00:43:37.000 --> 00:43:42.100
like Node.js world, they had a big, they actually was, it was something similar. I think it started with a

00:43:42.100 --> 00:43:46.980
typo squatting attack, but then it was actually a worm that would then go. So if you got the malicious

00:43:46.980 --> 00:43:53.340
package, nothing would really happen except that package as it was installing was looking for your,

00:43:53.340 --> 00:43:59.460
like if you were registered with the NPM package repository and it would go in and patch the packages

00:43:59.460 --> 00:44:04.080
that you owned to spread that worm further. I don't know if it was some payload, but it was,

00:44:04.080 --> 00:44:08.940
you know, really exploding quickly. And I guess the same thing could happen with PI PI. Like,

00:44:08.940 --> 00:44:13.640
I don't, I don't see why not. Yeah, it definitely could, but it hasn't. And let's,

00:44:13.640 --> 00:44:24.220
let's not give any people ideas. So the, yeah, exactly. Don't say that security by obscurity.

00:44:24.220 --> 00:44:31.220
Come on. Exactly. Right. Security by lack of creativity. Okay. So the two main problems were

00:44:31.220 --> 00:44:37.700
basically like you pointed out, Dan type of squatting, which is like, we're going to upload a

00:44:37.700 --> 00:44:47.380
package that takes a copy of Django and then slightly modifies it, set up.py and publish it under Django

00:44:47.380 --> 00:44:53.400
or Django or whatever, like how you pronounce it without the J, right? So if people pip install and

00:44:53.400 --> 00:44:57.880
they miss the spell, they get your bad thing. Right. So that's one. And the other was to take

00:44:57.880 --> 00:45:04.120
advantage of folks who didn't understand why something wasn't available to them. So like,

00:45:04.120 --> 00:45:09.060
if you tried to use regular expressions and you say re dot, and there's like, it says,

00:45:09.060 --> 00:45:12.620
well, re is not defined. You're like, well, maybe I need to pip install re. No, you just need to import

00:45:12.620 --> 00:45:16.700
it. Right. It's built in. So they were targeting the built-in libraries and I believe all the built-ins

00:45:16.700 --> 00:45:22.900
are not patched. And Brian, didn't we cover something on Python bytes that would help guard against typo

00:45:22.900 --> 00:45:28.020
squatting? It would like try to grab packages that also had misspellings around your package name.

00:45:28.140 --> 00:45:31.720
I think there was something like that. Yeah, I think so. I don't remember what it's called,

00:45:31.720 --> 00:45:35.700
but I think that exists and people could find it. Oh yeah. Yeah. I remember listening to that episode

00:45:35.700 --> 00:45:39.300
and you guys were talking, I forgot what it's called too, but like it generates different variations of

00:45:39.300 --> 00:45:44.740
your own package names and try and like register all of those. Yeah, exactly. It's very work intensive.

00:45:44.740 --> 00:45:49.800
Yeah. So it's interesting on what is the fix? And I don't know what the fix is. The PSF is trying to get

00:45:49.800 --> 00:45:55.900
more resources to support PyPI and the Python packaging infrastructure in general, but like

00:45:55.900 --> 00:46:00.200
largely that's been improve it. Do things like you talked about previously, Dan, on just shipping

00:46:00.200 --> 00:46:06.240
pypi.org. Right. But this validation, if you have so many releases of so many packages, how do you even

00:46:06.240 --> 00:46:10.880
verify it? I don't know. It's tricky. It's not necessarily something that could be, that can be solved

00:46:10.880 --> 00:46:15.980
with a straightforward technology fix, right? Like essentially you're, it's a problem that all of

00:46:15.980 --> 00:46:20.880
these, let's call them online marketplaces for code repositories or whatever you want to call them.

00:46:20.880 --> 00:46:25.700
You know, if you look at the Android app store, Apple app store, I mean the Apple app store, they have

00:46:25.700 --> 00:46:31.280
these, these like crazy intensive review processes, you know, considering that there are millions of, of, of

00:46:31.280 --> 00:46:35.280
apps in this app store and they're reviewing every single one. And I think there's even some manual steps

00:46:35.280 --> 00:46:40.620
involved there. And even there, we've had malicious apps that were trying to steal people's, you know,

00:46:40.620 --> 00:46:45.180
private information and it's a really locked down platform. So I think it's really, it's a challenge

00:46:45.180 --> 00:46:48.700
that, that we're facing now because we're all connected over the internet and, you know,

00:46:48.700 --> 00:46:54.180
people are really relying on these, on these package platforms. So, it seems like it's

00:46:54.180 --> 00:46:57.760
something we'll, we'll have to try out a bunch of solutions and see what will work there.

00:46:57.760 --> 00:47:02.920
I think we should get some of the, all of these new machine learning Python people to get involved

00:47:02.920 --> 00:47:09.080
in and take a look at it because conceptually the normal updates for a package are little tweaks

00:47:09.080 --> 00:47:15.940
on, on what it's doing. And if suddenly it starts, connecting to different servers all over the

00:47:15.940 --> 00:47:21.520
world, or even just one where it used to not connect to anything, that would be a change. It would be a

00:47:21.520 --> 00:47:26.280
different behavior than it was ever doing before that, that should be something that a machine could

00:47:26.280 --> 00:47:26.600
catch.

00:47:26.600 --> 00:47:32.280
Yeah, actually, I think you're right. I mean, there's almost no scenario where pip install a thing should

00:47:32.280 --> 00:47:35.440
create an outbound connections besides to download the package.

00:47:35.600 --> 00:47:42.220
Or, you know, even a package that doesn't normally use any connections or use requests suddenly adds,

00:47:42.220 --> 00:47:47.540
uh, you know, socket connecting or something. that's something to take, you know, at least we

00:47:47.540 --> 00:47:51.480
can filter it down to things people could take a look at and say, is something weird going on here?

00:47:51.480 --> 00:47:57.880
Well, it would actually be sweet to have like a CPython interpreter that is fully sandboxed that,

00:47:57.880 --> 00:48:03.060
you know, can't like, you could just run code that people send you and you can run it safely and it

00:48:03.060 --> 00:48:07.820
wouldn't be able to write to any folder on your disk or open sockets and whatnot. That would actually be

00:48:07.820 --> 00:48:12.160
kind of sweet. I mean, it's all interpreted. So it's seems like that should be possible. I mean,

00:48:12.160 --> 00:48:15.660
it's going to take a lot of work, I guess, but I think it's possible as well. You know, Dan,

00:48:15.660 --> 00:48:20.100
you mentioned the online app store as maybe something. I wonder if there's something like

00:48:20.100 --> 00:48:26.280
that in terms of packaging that we could add. And what I'm thinking is like, if I go build an iOS app,

00:48:26.280 --> 00:48:32.800
I have to declare the things that's going to ask for, like it has to ask for access to contacts.

00:48:32.800 --> 00:48:39.900
It has to ask for access to GPS. So, you know, you declare it needs the GPS feature. It needs these

00:48:39.900 --> 00:48:44.020
other features, right? So what about a package that declares, like I don't declare any network

00:48:44.020 --> 00:48:49.800
capabilities. So I don't talk on the network and things like, you know, I can depend upon packages

00:48:49.800 --> 00:48:50.660
that do, for example.

00:48:50.660 --> 00:48:55.080
On the flip side, none of these have caused a huge amount of damage. And I don't want to go

00:48:55.080 --> 00:48:59.300
to the point of overreacting so that everybody has to take off their shoes to travel.

00:48:59.300 --> 00:48:59.860
Yes, I know.

00:48:59.860 --> 00:49:00.380
Things like that.

00:49:00.380 --> 00:49:04.620
I know. We don't want feel good security that doesn't actually make any difference,

00:49:04.620 --> 00:49:05.800
but makes life hard for everybody.

00:49:05.800 --> 00:49:06.100
Yeah.

00:49:06.100 --> 00:49:06.740
Yeah, I agree.

00:49:06.740 --> 00:49:07.180
That's a good point.

00:49:07.180 --> 00:49:10.300
I don't know what the answer is. I don't know what the fix is or if there is a fix,

00:49:10.300 --> 00:49:15.740
but I would definitely declare the end of innocence for PyPI. That's my declaration as item two

00:49:15.740 --> 00:49:19.640
for 2018. Dan, you have the honor of kicking off.

00:49:19.640 --> 00:49:23.680
What is the number one story in the Python space for 2018? What happened?

00:49:23.680 --> 00:49:25.920
Oh, man. What a sad honor, though.

00:49:25.920 --> 00:49:30.160
Well, yeah, I know. It's not about the messenger, right?

00:49:30.160 --> 00:49:37.180
Well, yeah. I mean, Guido van Rossum stepped down as the BDFL, which is both sad and ironic

00:49:37.180 --> 00:49:44.340
because I guess BDFL stands for Benevolent Dictator for Life, which I think he still is now

00:49:44.340 --> 00:49:50.440
technically, but he's just going to be less involved with the stewardship and leadership of CPython.

00:49:50.440 --> 00:49:55.000
Yeah. He's a little more like the Queen of England now, in a sense, right?

00:49:55.000 --> 00:50:02.180
Like he's still representing Python. He's still very active in the community, but he just said,

00:50:02.560 --> 00:50:07.580
I'm going to let other people deal with the decisions around it. And basically,

00:50:07.580 --> 00:50:12.200
went so far as saying, like, I'm not going to decide for you how you decide. Like it was even

00:50:12.200 --> 00:50:16.680
a meta non-decision. So he said, all right, you all have to figure out how to govern yourselves.

00:50:17.340 --> 00:50:23.040
And it looks like he's coming back in a little bit more in terms of participating.

00:50:23.040 --> 00:50:29.920
Well, right. I mean, I think that's one of the reasons is because his involvement with Python

00:50:29.920 --> 00:50:35.240
was just the stuff that wasn't fun. And now he gets to be involved with some of the things that

00:50:35.240 --> 00:50:38.860
are fun, like speaking and mentoring and things like that.

00:50:38.860 --> 00:50:44.060
You know, I think that's a really interesting point. I'm not sure I would want his job the way

00:50:44.060 --> 00:50:49.760
it kind of looked a year ago, right? Just, you know, arguing over peps and stuff like that.

00:50:49.760 --> 00:50:58.180
And you know that if you do stuff on the internet, that it's, there's definitely a very small minority

00:50:58.180 --> 00:51:04.460
people that are, you know, abrasive, unfriendly. It just sucks. But even just a few people like that

00:51:04.460 --> 00:51:05.780
will suck your energy for sure.

00:51:05.780 --> 00:51:10.680
Yeah. And we still don't know what's going to happen. So we'll, maybe that'll be the story

00:51:10.680 --> 00:51:13.160
for 2019 is what, what happens now.

00:51:13.260 --> 00:51:18.640
I think you're right. I think 2018 is the year Keto step back. 2019 will be the year that

00:51:18.640 --> 00:51:23.420
whatever, whatever takes place going forward is going to be that year.

00:51:23.420 --> 00:51:28.560
So regarding the new governance structure for CPython, which obviously, you know, for any Python

00:51:28.560 --> 00:51:32.460
developer, that should be really dear to our heart because it's going to have such a big impact

00:51:32.460 --> 00:51:39.180
on the future of, Python and the CPython project. And so the last update that I saw,

00:51:39.960 --> 00:51:48.860
basically we have a PEP 8,000 now, which is, a PEP that discusses the, the various new proposals that

00:51:48.860 --> 00:51:53.400
have been forward, that have been put forward regarding the Python language governance. And,

00:51:53.720 --> 00:52:01.100
I just recently saw, it was like two or three days ago, Victor Stinner's post on discuss.python.org,

00:52:01.100 --> 00:52:06.600
where he's comparing the seven Python governance peps. So I guess like actually like the different

00:52:06.600 --> 00:52:10.600
proposals, they're separate peps, but they're also listed under PEP 8,000. And so there's different

00:52:10.600 --> 00:52:17.080
models that have been put forward. Like for example, leading the project with a trio of, three co-leaders.

00:52:17.560 --> 00:52:21.120
Um, there could also be a community governance model where there's no central authority. So

00:52:21.120 --> 00:52:26.800
like a total 10 80 from, you know, a dictatorship to no central authority. I don't know how it would,

00:52:26.800 --> 00:52:30.320
how that would look like, you know, in concrete terms, but there's like different models that are

00:52:30.320 --> 00:52:35.380
being discussed right now. And, I think it's going to be very interesting to see what the CPython

00:52:35.380 --> 00:52:37.100
team ends up with there.

00:52:37.280 --> 00:52:43.260
I agree. And it's, it's pretty important. Like even simple stuff like Lucas Lange, also

00:52:43.260 --> 00:52:48.440
creator black, what we spoke about earlier, he's doing the release management for CPython for the

00:52:48.440 --> 00:52:52.840
next couple of releases. And he was thinking like, Hey, it would be great to release this yearly,

00:52:52.840 --> 00:52:58.740
but we can't even discuss having it released yearly instead of every 18 months because we don't even

00:52:58.740 --> 00:53:04.400
know how to decide whether we, how would we, who decides, how do we vote? We don't know. So,

00:53:04.400 --> 00:53:09.180
so many things like that are just like on hold until this gets figured out. So there's a lot of

00:53:09.180 --> 00:53:10.080
pressure to make it happen.

00:53:10.080 --> 00:53:14.300
Definitely. Yeah. It's like, it's, it's a total bottleneck, I guess for, yeah, like you were saying,

00:53:14.300 --> 00:53:17.880
you know, just to put out a new release, you would have to, they would have to figure that out first.

00:53:17.880 --> 00:53:21.940
And so, I'm, I'm pretty sure that also means it's going to be a decision that's going to be made

00:53:21.940 --> 00:53:24.600
relatively quickly there so we can all move on.

00:53:24.600 --> 00:53:29.540
Yeah, absolutely. One thing you did note though, is that Guido starting to come back and be more

00:53:29.540 --> 00:53:34.100
active in the community again, just not in this BDFL decision maker way, right?

00:53:34.320 --> 00:53:38.800
Yeah. And I thought that was kind of cool. you know, I, I don't know, it might be coincidence,

00:53:38.800 --> 00:53:43.560
but I don't think it was. So as I was putting together, you know, the recent, PyCoders

00:53:43.560 --> 00:53:49.140
weekly issue, I saw that there were a couple of interviews with, Guido out there or articles

00:53:49.140 --> 00:53:53.480
that, you know, had like little sound bites from him. So he did, a really long,

00:53:53.480 --> 00:53:58.920
like video based interview on the MIT AI podcast. So it's actually on YouTube. It's more like a video

00:53:58.920 --> 00:54:02.360
based show, but I think it's also podcast, that I thought was really interesting.

00:54:02.360 --> 00:54:08.000
And, he also started blogging again. So he has this personal blog at, I think it's

00:54:08.000 --> 00:54:13.720
neopythonic.blogspot.com or something like that. And he put out a new post there and it's, I think

00:54:13.720 --> 00:54:18.540
it's, it's, it was kind of nice to see some activity there again, because I'm, I'm sure it's also a sign

00:54:18.540 --> 00:54:23.740
that, you know, now he maybe feels like he has more, more time to do that or feels inspired to do

00:54:23.740 --> 00:54:27.280
things like that again. And I think that's a really, really positive sign and just for his

00:54:27.280 --> 00:54:28.860
personal wellbeing, I think.

00:54:28.860 --> 00:54:32.260
I think it's a positive sign as well. And just like Brian and I were talking about earlier,

00:54:32.260 --> 00:54:39.860
a lot of his energy had previously gone into like debating PEP 572 and just dealing with all the,

00:54:39.860 --> 00:54:46.460
the decision-making and now he can focus back on, you know, what most people would want to focus on

00:54:46.460 --> 00:54:51.480
coding software, cool stuff like that. And it sounds like he's getting back into it. So that's awesome.

00:54:51.480 --> 00:54:57.020
Yeah. Yeah. And I mean, you know, what a, what a crazy responsibility to be at the center,

00:54:57.020 --> 00:55:02.340
like at the focus of it all, you know, and, and to be, to be the one person that needs to make all of

00:55:02.340 --> 00:55:06.660
these decisions. And sure, you know, like he was delegating a lot of these decisions and everything,

00:55:06.660 --> 00:55:13.880
but the way the CPython governance was set up before it was like all focused on one person. And,

00:55:13.880 --> 00:55:17.320
um, yeah, I mean, it's tough to do that for several decades, right?

00:55:17.320 --> 00:55:22.700
Yeah. I honestly, I was surprised that he had kept going in that role for that long. I mean,

00:55:22.700 --> 00:55:28.240
it's sad to see him step down, but at the same time that was 25 years. Like how many other people

00:55:28.240 --> 00:55:31.060
have a job that goes 25 years? That's high pressure, right?

00:55:31.060 --> 00:55:33.600
Yeah. It's incredible. I mean, thank you so much, Guido.

00:55:33.600 --> 00:55:39.420
Yeah, absolutely. It's Python's a special place and it has a lot to do with him. All right, guys,

00:55:39.420 --> 00:55:43.560
that's it. Those are our top 10 for 2018. It's been a fun year, hasn't it?

00:55:43.560 --> 00:55:44.060
Absolutely.

00:55:44.060 --> 00:55:44.880
Yeah.

00:55:44.880 --> 00:55:50.180
Yeah. I think 2018 just has a more, more good stuff to come. So it doesn't seem like anything

00:55:50.180 --> 00:55:56.060
is slowing down then. And that's pretty awesome. Now, before we round out the show, you have to

00:55:56.060 --> 00:56:00.200
answer the two questions, both of you. So Brian, let's start with you. If you're going to write some

00:56:00.200 --> 00:56:04.380
Python code, maybe test a little something or other, what editor would you use?

00:56:04.500 --> 00:56:04.920
My turn.

00:56:04.920 --> 00:56:05.360
Right on.

00:56:05.360 --> 00:56:06.320
And Stan.

00:56:06.320 --> 00:56:07.880
Yeah. Good one. Dan?

00:56:07.880 --> 00:56:12.680
I'm still a Sublime guy, although I have been experimenting with Visual Studio Code and it's

00:56:12.680 --> 00:56:13.380
pretty sweet actually.

00:56:13.380 --> 00:56:18.400
Yeah. I would say like the Sublime Visual Studio Code, there's probably a lot of bleed over between

00:56:18.400 --> 00:56:22.740
those and with all the activity around Visual Studio Code, it's got to be eating into the

00:56:22.740 --> 00:56:23.560
Sublime world.

00:56:23.560 --> 00:56:28.860
Yeah, definitely. Probably. I like what VS Code is. I like watching what VS Code is doing.

00:56:28.860 --> 00:56:33.660
They're just not quite there with the testing yet. I'll take a look again when they get that

00:56:33.660 --> 00:56:34.240
up to speed.

00:56:34.240 --> 00:56:39.280
Yeah, I agree. I think they're doing really sweet stuff. Okay. Brian, notable PyPI package?

00:56:39.280 --> 00:56:41.800
One preferably that doesn't have any badness in it?

00:56:41.800 --> 00:56:42.360
pytest.

00:56:42.360 --> 00:56:43.620
pytest. Right on. Dan?

00:56:43.620 --> 00:56:49.600
Sweet. So I was going to say black again, but we talked about this at length. So I'm going to say

00:56:49.600 --> 00:56:58.160
pytest-ICDIF. So it's a pytest plugin that gives you better error messages for your pytest

00:56:58.160 --> 00:57:04.160
assertions in some cases. So it'll basically do like a more extensive like diff on, let's say,

00:57:04.160 --> 00:57:08.180
when it's comparing two dictionaries and it'll tell, you know, those keys were added, those keys

00:57:08.180 --> 00:57:13.060
were removed, and it has like color highlighting. And I just found that this is like a really,

00:57:13.060 --> 00:57:16.780
really sweet little tool. And I started installing it in all of my projects that have tests.

00:57:17.240 --> 00:57:18.640
And I highly recommend it.

00:57:18.640 --> 00:57:20.660
That sounds great. I may have to go check this out.

00:57:20.660 --> 00:57:21.020
Cool.

00:57:21.020 --> 00:57:25.860
All right. So a straight sweep for pytest there. That's great. All right, guys. Thanks so much

00:57:25.860 --> 00:57:30.140
for being on the show and being part of this. It's so many cool things to talk about. And I

00:57:30.140 --> 00:57:30.760
really appreciate it.

00:57:30.820 --> 00:57:32.000
Thanks for having us. Thanks.

00:57:32.000 --> 00:57:32.700
Yep. Bye.

00:57:32.700 --> 00:57:33.140
Bye-bye.

00:57:33.140 --> 00:57:39.280
This has been another episode of Talk Python to Me. Our guests in this episode were Brian

00:57:39.280 --> 00:57:44.380
Aukin and Dan Bader. And it's been brought to you by CloudBolt and us at Talk Python Training.

00:57:44.380 --> 00:57:50.840
Spend your work time fulfilled. Write Python and Django code at CloudBolt, developing their state-of-the-art

00:57:50.840 --> 00:57:57.840
cloud management software in beautiful Portland, Oregon. Visit talkpython.fm/CloudBolt to join

00:57:57.840 --> 00:58:04.080
the team. Want to level up your Python? If you're just getting started, try my Python Jumpstart by

00:58:04.080 --> 00:58:08.860
building 10 apps course. Or if you're looking for something more advanced, check out our new

00:58:08.860 --> 00:58:14.320
async course that digs into all the different types of async programming you can do in Python. And of

00:58:14.320 --> 00:58:18.400
course, if you're interested in more than one of these, be sure to check out our everything bundle.

00:58:18.400 --> 00:58:23.500
It's like a subscription that never expires. Be sure to subscribe to the show. Open your favorite

00:58:23.500 --> 00:58:27.640
podcatcher and search for Python. We should be right at the top. You can also find the

00:58:27.640 --> 00:58:33.880
iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss

00:58:33.880 --> 00:58:39.920
on talkpython.com. This is your host, Michael Kennedy. Thanks so much for listening. I really appreciate it.

00:58:39.920 --> 00:58:41.680
Now get out there and write some Python code.

00:58:41.680 --> 00:59:11.660
We'll see you next time.

