WEBVTT

00:00:00.001 --> 00:00:03.420
When we think about accounts and security, we often think about identity,

00:00:03.420 --> 00:00:07.840
logging in and proving who we are. But for many applications, especially internal apps at large

00:00:07.840 --> 00:00:13.320
organizations, that's just step one. The next step is what can we do and what can we not do?

00:00:13.320 --> 00:00:18.200
On this episode, you'll learn about a new library called Oso. It's a declarative way to create

00:00:18.200 --> 00:00:22.280
policy code that maps your mental model for who is allowed to do what in your system.

00:00:22.280 --> 00:00:27.200
We have two guests, Graham Neary and Sam Scott from the Oso Project to tell us all about it.

00:00:27.440 --> 00:00:32.660
This is Talk Python to Me, episode 294, recorded October 23rd, 2020.

00:00:32.660 --> 00:00:50.920
Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries, the ecosystem

00:00:50.920 --> 00:00:55.400
and the personalities. This is your host, Michael Kennedy. Follow me on Twitter where I'm at

00:00:55.400 --> 00:01:00.780
M. Kennedy and keep up with the show and listen to past episodes at talkpython.fm and follow the

00:01:00.780 --> 00:01:06.060
show on Twitter via at Talk Python. Before we get to the interview, let me tell you about a brand new

00:01:06.060 --> 00:01:11.880
course that we just launched. At Talk Python, we run a bunch of web apps and web APIs. These power

00:01:11.880 --> 00:01:17.720
the training courses as well as the mobile apps on iOS and Android. If I had to build these from scratch

00:01:17.720 --> 00:01:23.720
again today, there's no doubt which framework I would use. It's FastAPI. To me, FastAPI is the

00:01:23.720 --> 00:01:29.460
embodiment of modern Python and modern APIs. You have beautiful usage of type annotations. You have

00:01:29.460 --> 00:01:34.340
model binding and validation with Pydantic, and you have first class async and await support.

00:01:34.340 --> 00:01:40.000
If you're building or rebuilding a web app, you owe it to yourself to check out our newest course,

00:01:40.000 --> 00:01:45.600
Modern APIs with FastAPI over at Talk Python Training. This is the first course in a series

00:01:45.600 --> 00:01:51.280
we're building on FastAPI. And for just $39, it'll take you from interested to production with Fast

00:01:51.280 --> 00:01:58.560
API. To learn more and get started today, just visit talkpython.fm/FastAPI or click the link in

00:01:58.560 --> 00:02:03.160
your podcast player show notes. Sam, Graham, welcome to Talk Python To Me.

00:02:03.160 --> 00:02:04.120
Thanks for having us.

00:02:04.340 --> 00:02:04.580
Thanks.

00:02:04.580 --> 00:02:11.560
Yeah, it's great to have you guys here. I'm excited to talk about this whole managing what

00:02:11.560 --> 00:02:16.540
people can do on computers from a slightly different perspective from the authorization

00:02:16.540 --> 00:02:21.760
side of things, which I think gets underserved in programming in general. So that's going to be a lot

00:02:21.760 --> 00:02:25.780
of fun. But before we get to all that stuff, let's start with your stories. How'd you get into

00:02:25.780 --> 00:02:27.900
programming in Python? Sam, you want to go first?

00:02:27.900 --> 00:02:34.340
Yeah, sure. So I think for me, it was probably the kind of typical programmer entry, which was

00:02:34.340 --> 00:02:40.700
I had a very monotonous data entry job, which I was like, surely there's a better way. I was

00:02:40.700 --> 00:02:46.980
young enough that I reached for BB macros. A few years later, though, I actually ended up picking up

00:02:46.980 --> 00:02:52.500
Python, primarily through my math degree. I had a professor who was very into number theory and

00:02:52.500 --> 00:02:54.280
worked on the SageMath package.

00:02:54.280 --> 00:02:57.540
Oh, yeah. SageMath is fantastic. Yeah, I've had William Stein on.

00:02:57.540 --> 00:02:59.560
It is incredible. Oh, nice.

00:02:59.560 --> 00:03:00.900
Yeah, it's cool what they're doing.

00:03:00.900 --> 00:03:05.360
Yeah. I actually dug up, that was my first open source contribution. There's a SageMath ticket

00:03:05.360 --> 00:03:06.540
from a good nine years ago.

00:03:06.540 --> 00:03:07.620
Okay, cool.

00:03:07.620 --> 00:03:08.740
Yeah.

00:03:08.740 --> 00:03:10.220
What kind of math were you studying?

00:03:10.220 --> 00:03:14.400
So that was during undergrad maths. And so that stuff was, yeah, that was kind of the number

00:03:14.400 --> 00:03:18.300
theoretical side of things. After that, I actually went on to do a master's in cryptography

00:03:18.300 --> 00:03:21.680
and a PhD in cryptography and security, which is...

00:03:21.680 --> 00:03:22.200
Oh, nice.

00:03:22.200 --> 00:03:23.420
...how I got here, basically.

00:03:24.440 --> 00:03:26.360
Yeah, yeah. It's sort of indirectly.

00:03:26.360 --> 00:03:28.340
Roundabout leads you here.

00:03:28.340 --> 00:03:28.740
Yep.

00:03:28.740 --> 00:03:29.840
Graham, how about yourself?

00:03:29.840 --> 00:03:35.780
I actually, I took an entry-level CS course when I was an undergrad. And actually, at the

00:03:35.780 --> 00:03:40.440
end of my undergraduate experience, which took me way farther than I ever would have expected

00:03:40.440 --> 00:03:45.420
it to. And I don't get to do that much programming on a day-to-day basis, but I try to whenever I

00:03:45.420 --> 00:03:50.700
can, including at a recent company hackathon. So I still like to dabble when I can.

00:03:51.040 --> 00:03:54.080
Yeah, yeah. Super. These days, you both work at Oso?

00:03:54.080 --> 00:03:54.720
Yeah.

00:03:54.720 --> 00:03:59.760
Give us the rundown on, well, I guess, maybe introduce what Oso is, your company, since you

00:03:59.760 --> 00:04:01.920
both work there. And then what do you guys do day-to-day?

00:04:01.920 --> 00:04:08.680
Yeah. So Oso is a company. What we're all about is putting security in the hands of developers.

00:04:08.680 --> 00:04:13.960
That's how Sam and I got to know each other. That's the thing that we really connected on

00:04:13.960 --> 00:04:19.220
as the thing that we want to do. And the way that we think about doing that is by building

00:04:19.220 --> 00:04:24.840
consumer quality developer tools for security. And so the area that we're starting, which is the area

00:04:24.840 --> 00:04:29.080
that we'll talk to you about today, is authorization. But that's really sort of the ethos of the company.

00:04:29.080 --> 00:04:35.480
And what's nice for Sam and me, I think for a lot of founders, it's not always clear how to think

00:04:35.480 --> 00:04:39.180
about division of responsibility. But for Sam and me, it tends to be pretty clear.

00:04:39.620 --> 00:04:45.920
I take responsibility for the business side of the company. So sales, marketing,

00:04:45.920 --> 00:04:53.160
financing, everything on the operational side. Sam is responsible for everything on the technical

00:04:53.160 --> 00:04:57.960
side of the business. So running the engineering team, Sam built the first versions of the product

00:04:57.960 --> 00:05:01.140
by himself, and we share responsibility for the product roadmap.

00:05:01.140 --> 00:05:06.600
Yeah. Sounds pretty clear. And I think it's a cool project. How long has the company been around for?

00:05:06.600 --> 00:05:07.900
It's not super old, right?

00:05:07.900 --> 00:05:10.720
So we've been working together for a little over two years,

00:05:10.720 --> 00:05:15.120
but we only open sourced the project about 10 weeks ago.

00:05:15.120 --> 00:05:19.900
Okay. So in the open source side, it's quite new, but yeah, still two years is pretty young for

00:05:19.900 --> 00:05:25.740
a company. And it's easy to think of the stuff that you're building just as technology. And it's clearly

00:05:25.740 --> 00:05:30.920
like developer tools and APIs and things like that. But man, that marketing stuff and getting the word

00:05:30.920 --> 00:05:34.580
out and sales, without that, you just can't go, man.

00:05:34.580 --> 00:05:35.840
Yeah, that's the hard stuff.

00:05:36.940 --> 00:05:43.840
Exactly. Give me some cryptography and some compiling and language interop, but don't make me write a landing page.

00:05:43.840 --> 00:05:51.000
Now, I'm serious, though, that is a super hard part of, such a critical part of technical companies,

00:05:51.000 --> 00:05:55.020
open source companies, and so on. And it's easy to overlook that side.

00:05:55.020 --> 00:05:57.040
Yeah, absolutely. But it's fun.

00:05:57.040 --> 00:05:58.300
Yeah, for sure.

00:05:58.660 --> 00:06:04.580
So we're going to talk about one of the three A's. I was recently told there might be four A's in this

00:06:04.580 --> 00:06:09.100
whole identity authorization sort of story, but I don't remember what the fourth one is. So I'm going

00:06:09.100 --> 00:06:15.920
to go with the three A's. We've got authentication. We've got authorization. So authentication, who are

00:06:15.920 --> 00:06:21.180
you? Authorization. Okay, now I know who you are. What can you do? And then auditing, what have you

00:06:21.180 --> 00:06:24.780
done? Right? You guys, you're a fan of the middle A.

00:06:24.780 --> 00:06:29.360
Yeah, that's right. Yeah. And I think you just about nailed it. And a lot of the products out

00:06:29.360 --> 00:06:35.860
there really focus a lot on authentication, which is, I think, the thing that most, for instance,

00:06:35.940 --> 00:06:41.600
consumer users would be most familiar with, like logging into it, getting a login page, having

00:06:41.600 --> 00:06:46.720
your username and password, doing things like password reset, or more recently, things like

00:06:46.720 --> 00:06:51.280
two-factor authentication, how all that stuff is managed. That's the authentication bit, just making

00:06:51.280 --> 00:06:52.680
sure that you can get in the door.

00:06:52.680 --> 00:06:59.280
Even the sign-in with Google, sign-in with GitHub is really primarily about just, usually that's about

00:06:59.280 --> 00:07:05.000
two things. One, who are you? And then sometimes it's about what part of GitHub do you want to let

00:07:05.000 --> 00:07:10.600
this app access, or what part of this app do you want to let access your Google data? But it's not,

00:07:10.600 --> 00:07:14.600
it doesn't work in the reverse way. It doesn't tell you what the user's allowed to do on that

00:07:14.600 --> 00:07:20.100
application. It's just connecting those two apps together from a data side. So even the social

00:07:20.100 --> 00:07:24.620
auth stuff is really just authentication. Yeah, those lines get pretty blurry, right? Because you're

00:07:24.620 --> 00:07:28.880
allowing some other website to access information about yourself so they can check who you are.

00:07:28.880 --> 00:07:33.380
So there is an element of authorization going on between those two services. But you're right,

00:07:33.380 --> 00:07:34.980
like the result of that is authentication.

00:07:34.980 --> 00:07:39.220
Yeah, I guess when I say that there's not any really authorization, I'm thinking that

00:07:39.220 --> 00:07:44.960
that doesn't tell the app what you're allowed to do, but it does tell, like say Twitter,

00:07:44.960 --> 00:07:49.480
what, like, are you allowed, is this app allowed to tweet on your behalf according to Twitter?

00:07:49.480 --> 00:07:50.880
Yes, exactly.

00:07:50.880 --> 00:07:55.040
Right. But it doesn't help within your app. Like if I want an app, I want to know like, okay,

00:07:55.040 --> 00:07:59.280
this user, they can view invoices, but they can't create invoices.

00:07:59.280 --> 00:08:00.120
Precisely.

00:08:00.120 --> 00:08:03.480
But they can't ever see the bank details of anyone like that.

00:08:03.480 --> 00:08:03.860
Right.

00:08:03.860 --> 00:08:07.360
There's no social auth that's going to help you with that side of the story is what I was thinking.

00:08:07.360 --> 00:08:08.300
That's exactly right.

00:08:08.300 --> 00:08:12.100
Right. That's fundamentally an authorization question, what you just asked.

00:08:12.100 --> 00:08:13.120
Yeah. Okay.

00:08:13.380 --> 00:08:13.780
Exactly.

00:08:13.780 --> 00:08:18.620
Cool. And so this is the core problem that you guys are trying to solve. And we're going to talk

00:08:18.620 --> 00:08:24.480
about some of the open source stuff that you've done and the Python APIs and all that. But maybe

00:08:24.480 --> 00:08:29.620
let's just continue this part of the conversation by talking about some common access patterns.

00:08:29.620 --> 00:08:33.980
And what is out there? Like we talked about the social auth and what that means. We talked about

00:08:33.980 --> 00:08:38.040
creating users with usernames and passwords. And what are some of the patterns you all are seeing

00:08:38.040 --> 00:08:38.380
out there?

00:08:38.380 --> 00:08:44.820
Yeah. So basically every application out there needs to let its users in some way,

00:08:44.820 --> 00:08:49.980
shape or form, see their data and do something to their data. And so fundamentally that's doing

00:08:49.980 --> 00:08:54.900
some kind of authorization. And then you'll have, so in a basic like social app, that might be like,

00:08:54.900 --> 00:08:59.260
what posts can you see and what posts can you edit or something like that? And then you'll have.

00:08:59.260 --> 00:09:04.340
Yeah. So in some sense, I guess there's like an implicit or default authorization that every

00:09:04.340 --> 00:09:10.680
application has. And it's usually I can see my stuff in public stuff and that's it, right? Like,

00:09:10.680 --> 00:09:16.560
right. There's no rules like, okay, when I go to Twitter, I just see my stuff in public stuff,

00:09:16.560 --> 00:09:21.240
right? I could go to my profile, but there's no expectation I would ever be able to see someone

00:09:21.240 --> 00:09:26.600
else's profile and those sorts of things. So I guess if you don't do anything, that's generally the

00:09:26.600 --> 00:09:30.560
access pattern people have is I create an account and that account can see its stuff.

00:09:30.940 --> 00:09:36.640
Yes, absolutely. And I think that's kind of like the common paradigm in particular in like a consumer

00:09:36.640 --> 00:09:41.800
application context, particularly when you start to look at like business to business applications,

00:09:41.800 --> 00:09:49.540
you end up with like very quickly, the patterns get a lot more complex. So could be an HR application

00:09:49.540 --> 00:09:57.540
or a CRM application or a medical records application. And very quickly, what people will do in building

00:09:57.540 --> 00:10:02.800
these types of apps is they'll reach for a pattern called roles. Well, they'll group a set of

00:10:02.800 --> 00:10:06.740
permissions or capabilities together, they'll lump them together into something called a role.

00:10:06.740 --> 00:10:13.460
They'll say anyone that has this role, like admin or billing or nurse or whatever it may be can do

00:10:13.460 --> 00:10:17.600
these sets of things. And then if you want to be able to do those things, you got to get assigned that

00:10:17.600 --> 00:10:21.860
role. And that's kind of like a handy thing, because it means that every time you want to make sure that

00:10:21.860 --> 00:10:26.420
someone can do those things, you don't have to repeat that work, which is kind of nice, right?

00:10:26.420 --> 00:10:32.400
But also kind of limited, because effectively, what that's doing is it's creating is sort of

00:10:32.400 --> 00:10:37.080
representing all your permissions as like a two by two, you basically have a bunch of roles on one axis,

00:10:37.080 --> 00:10:42.600
and you've got a bunch of capabilities on another axis. And the truth is that most apps don't,

00:10:42.600 --> 00:10:47.340
they're sort of like underlying like data model isn't a two by two, they may be,

00:10:47.540 --> 00:10:51.960
they may have all kinds of other things going on. They may have, they may want to represent

00:10:51.960 --> 00:10:56.740
hierarchical patterns, like to represent an organization, they may want to represent inheritance,

00:10:56.740 --> 00:11:03.100
they may want to represent some kind of graph. And so like, oftentimes, after you adopt a role model,

00:11:03.100 --> 00:11:06.540
Let me throw an idea out here, and you can tell me what you think of that. Like, so for example,

00:11:06.540 --> 00:11:12.580
if I'm a manager at a company, I can see my work, right, plus my team's work.

00:11:12.580 --> 00:11:13.280
Exactly.

00:11:13.700 --> 00:11:17.040
Right. But I don't want to see another team's work. I don't want that person to be able to see

00:11:17.040 --> 00:11:21.880
everyone's work, just the people for whom they are the manager like that scene. And then you know,

00:11:21.880 --> 00:11:25.500
how do you, you can't really easily manage that setup, right?

00:11:25.500 --> 00:11:31.260
That's a perfect example, because that's not a role. That's like a manager in that context isn't a

00:11:31.260 --> 00:11:36.900
static thing that you just assigned to someone that's kind of dynamic, based on where you sit in the org,

00:11:36.900 --> 00:11:41.960
you might be a manager of one team, you might be a VP, in which case you're a manager of like five teams.

00:11:42.800 --> 00:11:47.640
And so it's not this thing that's assigned to you. It's more like a function of maybe some other data

00:11:47.640 --> 00:11:49.820
that sits elsewhere in your application. Yeah.

00:11:49.820 --> 00:11:54.520
So you end up having to do all kinds of crazy things to hack around the role model and make

00:11:54.520 --> 00:11:59.040
that work for your application, which is all the kinds of stuff that we see. That's where it starts

00:11:59.040 --> 00:11:59.500
to get fun.

00:11:59.500 --> 00:12:05.580
Yeah, exactly. So that's probably means like, instead of just having say, a decorator or some

00:12:05.580 --> 00:12:10.660
simple if statement that says, if they are a manager, there's usually like some custom logic

00:12:11.140 --> 00:12:14.600
checking in that section, right? There's like code that's been written somewhere,

00:12:14.600 --> 00:12:19.140
the checks, you know, like basically does those things and looks like I'm a manager,

00:12:19.140 --> 00:12:24.480
but who do they manage and so on. Then all of a sudden, this roles idea sort of,

00:12:24.480 --> 00:12:28.700
it somewhat falls down and you're coding in the logic into your app, right?

00:12:28.700 --> 00:12:34.940
Right. And there's like, you know, other examples of where the sort of roles model stops and other

00:12:34.940 --> 00:12:40.220
things begin. And you sort of have to start just adding more, whatever it is, if statements,

00:12:40.220 --> 00:12:43.860
or maybe you bring the logic to some other part of the application, because that's where it makes

00:12:43.860 --> 00:12:47.120
more sense to you. But yeah, the example you gave is a perfect one.

00:12:47.120 --> 00:12:53.560
The thing about that kind of stuff that scares me is what if I forgot, right? I've got a web app

00:12:53.560 --> 00:13:00.780
with hundreds of endpoints. One of the one section is like an admin section. And if that

00:13:00.780 --> 00:13:04.900
doesn't do the proper checks, all sorts of badness is going to happen, right?

00:13:04.900 --> 00:13:05.420
Absolutely.

00:13:05.420 --> 00:13:09.460
So you put your code in there. I mean, I don't know. How do you guys feel about that? Because

00:13:09.460 --> 00:13:13.480
I'm always like, I'm triple checking it. And then I'm like, I got to go back and check this again.

00:13:13.480 --> 00:13:15.460
Like this is, this could be bad.

00:13:15.460 --> 00:13:20.220
It's super, super common. And that's where we see, we see a lot, you know, at larger organizations,

00:13:20.220 --> 00:13:25.200
that's where often like a security team will spend a large portion of that time. I've heard

00:13:25.200 --> 00:13:29.100
security teams who have like their own little regex that they use to go and find like every method and see if

00:13:29.100 --> 00:13:33.620
it has the piece of code they're expecting to see, or they sit on every code review so they can make

00:13:33.620 --> 00:13:37.960
sure that one's not missed. That for people without that kind of security team though, then yeah, it's

00:13:37.960 --> 00:13:39.600
just a case of hoping you don't forget it.

00:13:39.600 --> 00:13:40.100
Yeah.

00:13:40.100 --> 00:13:44.300
Oh, you might also even do the, it might also be kind of the opposite of that, which is that like,

00:13:44.300 --> 00:13:48.780
you might be good enough to include the logic everywhere, but rather than trying to

00:13:48.780 --> 00:13:54.760
sufficiently extend your like roles model to account for all the different like intricate scenarios

00:13:54.760 --> 00:13:59.720
that you're trying to properly represent, you might just say, ah, we'll just like, let this person be

00:13:59.720 --> 00:14:04.060
an admin or something like that, just so that they can do the thing that they need to do inside your

00:14:04.060 --> 00:14:08.640
application. And then all of a sudden what you end up with is all these scenarios where people, or

00:14:08.640 --> 00:14:13.840
for instance, like internal services are over-provisioned because that was the fastest way to make it

00:14:13.840 --> 00:14:16.460
possible for them to get done the thing that they needed to get done.

00:14:16.460 --> 00:14:16.960
Yeah.

00:14:16.960 --> 00:14:20.100
Which can be equally painful to undo later on or risky.

00:14:21.380 --> 00:14:26.140
Yeah. It definitely sounds risky. Like it's, it's easy to have the admin, non-admin flag and just

00:14:26.140 --> 00:14:32.060
go with that. But that's probably fine for like a small team, but as you grow, it's no longer going

00:14:32.060 --> 00:14:32.460
to work.

00:14:32.460 --> 00:14:39.280
Talk Python To Me is partially supported by our training courses. Do you want to learn Python,

00:14:39.280 --> 00:14:45.000
but you can't bear to subscribe to yet another service at Talk Python Training? We hate subscriptions

00:14:45.000 --> 00:14:49.420
too. That's where our course bundle gives you full access to the entire library of courses

00:14:49.420 --> 00:14:55.400
for one fair price. That's right. With a course bundle, you save 70% off the full price of our

00:14:55.400 --> 00:15:01.220
courses and you own them all forever. That includes courses published at the time of the purchase,

00:15:01.220 --> 00:15:06.940
as well as courses released within about a year of the bundle. So stop subscribing and start learning

00:15:06.940 --> 00:15:12.920
at talk python.com.

00:15:12.920 --> 00:15:19.620
talk about some of the coding approaches in like current Python projects. And I guess I talked about

00:15:19.620 --> 00:15:26.540
one, Sam, you put down as like a DIY, do it yourself. And that's the, well, if we got to have managers and

00:15:26.540 --> 00:15:32.560
people for whom they manage, we've got to, we just write some code and sort of put that logic in there.

00:15:32.560 --> 00:15:37.820
And maybe you've got that overlaid on some groups. Maybe give us some of the common approaches

00:15:37.820 --> 00:15:39.960
you might see in like common Python web apps.

00:15:39.960 --> 00:15:46.760
Yeah. So overwhelmingly common is that this is kind of seen as just the regular code in applications,

00:15:46.760 --> 00:15:51.260
just the things you have to do in an app to build it. So, you know, in that case, it just ends up

00:15:51.260 --> 00:15:54.280
baked into, you know, every method you have is going to have a certain amount of this logic.

00:15:54.280 --> 00:15:59.560
Like I think either you're going to see people who are just sprinkling this throughout the code base,

00:15:59.560 --> 00:16:04.140
adding them where it's necessary. And that's just kind of like handles or like considered something

00:16:04.140 --> 00:16:08.400
they just deal with. Or sometimes people will try and go the approach of like stretching that out,

00:16:08.400 --> 00:16:11.820
pulling it out through into, you know, maybe something like a decorator, like you said.

00:16:11.820 --> 00:16:17.440
And that ends up becoming this like 500 line decorator, which has, you know,

00:16:17.440 --> 00:16:20.340
10 levels of nesting and if statements and things like that.

00:16:20.340 --> 00:16:25.360
Yeah. Decorators are already hard to put your mind around. Although that's what I do on my stuff.

00:16:25.360 --> 00:16:30.820
I'll have like a, I'm like a permissions decorator. At least the thing that I like about that,

00:16:30.900 --> 00:16:35.060
even though it has some disadvantages. The thing that I like is I can go to the functions and I

00:16:35.060 --> 00:16:38.000
don't have to read the function and know, is this thing being dealt with? Like,

00:16:38.000 --> 00:16:41.400
does it have the decorator? Then the function is okay. You know what I mean?

00:16:41.400 --> 00:16:46.480
Yep. Yep, exactly. And there's, so I mean that, you know, that is like one set of things and it's

00:16:46.480 --> 00:16:50.800
not like nothing exists to do these things we're talking about, like depending on the application,

00:16:50.800 --> 00:16:55.240
right? So a lot of the kind of stuff we've been describing doesn't have to happen in the codes.

00:16:55.560 --> 00:17:00.440
It might be stored in a, like I didn't see management system or something like, you know,

00:17:00.440 --> 00:17:04.420
active directory. It's typically, this is a place where you can store all the information about

00:17:04.420 --> 00:17:08.740
users and you can add them to groups and assign them permissions to different things.

00:17:08.740 --> 00:17:12.640
That is sort of like the manual admin approach, which probably a lot of people might be familiar

00:17:12.640 --> 00:17:17.420
with as a way to maybe like manage permissions inside an organization, but it's not kind of suitable

00:17:17.420 --> 00:17:21.020
for the kinds of things we've been talking about for like a, an application,

00:17:21.580 --> 00:17:26.300
B2B application or a consumer application where you don't want to have someone manually going into

00:17:26.300 --> 00:17:28.940
like an active directory thing and like assigning people roles and permissions.

00:17:28.940 --> 00:17:29.640
Right.

00:17:29.640 --> 00:17:33.680
So that's kind of like one set. And then I think similarly, some of the Python frameworks out there,

00:17:33.680 --> 00:17:38.400
for example, have built-in things for similar patterns. There's Django has things like Django admin,

00:17:38.400 --> 00:17:43.700
which again is sort of baked in UI and system to manage like users and permissions,

00:17:43.700 --> 00:17:48.660
but it's kind of more of like the AD flavor. It's like a UI where someone might manually go in

00:17:48.660 --> 00:17:52.840
and configure, you know, all right, Sam is in this group and this group can do these things or Sam

00:17:52.840 --> 00:17:58.740
can do these permissions, not for the sort of like, how am I going to provide a consistent interface to

00:17:58.740 --> 00:18:02.520
all of my end users? Like how do I do that sort of dynamic automatic configuration?

00:18:02.520 --> 00:18:09.940
How do you feel about multi-tenant apps? So I've got a cloud service and maybe I've got one company

00:18:09.940 --> 00:18:14.700
and within that company, they have certain roles, but then other customers come along,

00:18:14.780 --> 00:18:21.140
they buy a setup for their system. You know, think like Slack or GitHub with organizations or

00:18:21.140 --> 00:18:21.860
something like that.

00:18:21.860 --> 00:18:27.480
So you just gave two very interesting examples. I think GitHub is a pretty good example of doing

00:18:27.480 --> 00:18:32.580
multi-tenancy and in a reasonable way in that you have your single user account and you can belong to

00:18:32.580 --> 00:18:37.100
many organizations. You can have different roles inside the organizations. You can have,

00:18:37.100 --> 00:18:41.560
you can even have roles inside repositories, although it's not that obvious, but you can be a,

00:18:41.560 --> 00:18:45.880
you know, owner or a collaborator of a repository. Right. And it sort of kind of like handles all of

00:18:45.880 --> 00:18:50.840
those in the sort of reasonably consistent way that if you don't dig too deep, it kind of makes sense.

00:18:50.840 --> 00:18:55.360
But you can imagine you're on the backend to support that. What are they having to do is have a reasonably

00:18:55.360 --> 00:19:02.020
complex data relationship model between users, organizations, repositories. If you go deeper,

00:19:02.020 --> 00:19:06.340
right, there's like teams, sub-teams, infinitely recursive sub-teams, things like that.

00:19:06.340 --> 00:19:12.200
Yeah. Yeah. Slack, I feel like they did the, at least initially, they kind of forced you to create

00:19:12.200 --> 00:19:16.200
an account for every workspace. So presumably on the backend, this looks like somewhat different

00:19:16.200 --> 00:19:20.540
where they didn't try and make it so that like you could map a user to multiple organizations with roles.

00:19:20.540 --> 00:19:24.460
It's like you have a user inside an organization and they have a role.

00:19:24.460 --> 00:19:24.680
Yeah.

00:19:24.680 --> 00:19:29.280
And this, I think this is probably, I can imagine this might be something based on how they originally

00:19:29.280 --> 00:19:33.100
did authorization. It sort of might've even painted them into a corner where they are now sort of stuck

00:19:33.100 --> 00:19:34.360
with a model. It's hard to get away from.

00:19:34.360 --> 00:19:39.460
Yeah. Side note or sidebar. I, I, the Slack authentication model drives me crazy,

00:19:39.460 --> 00:19:42.740
but I can't just log in and see what groups I'm like.

00:19:42.740 --> 00:19:43.460
I'm with you.

00:19:43.460 --> 00:19:46.440
I got to remember the pre, the pre, the, the, the.

00:19:46.440 --> 00:19:47.060
It's brutal.

00:19:47.060 --> 00:19:52.580
First part of the domain that belongs to it. And then the password may or may not be the same.

00:19:52.580 --> 00:19:55.960
And it's like, what am I, why am I doing this? It's so brutal, man.

00:19:55.960 --> 00:19:59.720
Yeah. I'm not saying it's because the authorization approach was wrong, but maybe it was.

00:20:00.600 --> 00:20:04.540
Well, but I mean, it just, it shows that you need to be careful about this, like how you

00:20:04.540 --> 00:20:10.460
think about this. And yeah, the fact that we are talking about it at all means that it's

00:20:10.460 --> 00:20:15.580
like an issue for users and people experience in an ideal world. You shouldn't even think

00:20:15.580 --> 00:20:17.840
about it. You're just like, well, oh yeah, I guess I didn't really think about it, but

00:20:17.840 --> 00:20:22.100
yeah, that it is restricting to me what I should be doing and it just works. Right.

00:20:22.100 --> 00:20:23.000
Yep. Yep.

00:20:23.000 --> 00:20:24.500
Yeah. And you bring up an interesting point.

00:20:24.500 --> 00:20:27.800
It's why people say architecture is like wet cement.

00:20:30.400 --> 00:20:33.160
That's right. For a while. Yeah.

00:20:33.160 --> 00:20:34.800
Yeah, absolutely.

00:20:34.800 --> 00:20:38.920
Yeah. I was just going to say the idea about it being exposed to users as well. This is a

00:20:38.920 --> 00:20:43.020
really interesting one. It's, I think a lot of the struggles or frustrations people have

00:20:43.020 --> 00:20:46.500
with security, but it's done similar things as well, where you end up, you're trying to

00:20:46.500 --> 00:20:50.400
use a website or something and have these like crazy complicated permission role systems

00:20:50.400 --> 00:20:54.320
where you're trying to like decide what you can do within the app. And when you talk to

00:20:54.320 --> 00:20:57.960
teams like that, you realize it's because they've like influenced an authorization

00:20:57.960 --> 00:21:02.660
system and they're basically just like exposing the internals of that to the end users. So

00:21:02.660 --> 00:21:06.220
you kind of almost need to understand how the app works in order to decide what you can

00:21:06.220 --> 00:21:08.040
do inside it. And that is just kind of crazy.

00:21:08.040 --> 00:21:14.300
Yeah, for sure. So you all saw a problem out there and Sam, you built this policy system,

00:21:14.300 --> 00:21:19.900
this authorization system. And I guess one of the things we want to be clear about is I see this as

00:21:19.900 --> 00:21:26.620
an advantage. Is it is not as specifically not about logging in users, managing their passwords or

00:21:26.620 --> 00:21:31.740
their party off stuff. It's about once you know who someone is, regardless, like you can have using

00:21:31.740 --> 00:21:36.500
password, you can have Google login, whatever you feel like once you've got that now, what can they do?

00:21:36.560 --> 00:21:41.840
Right. That's exactly right. And in addition to that, it can be can have them multiple different

00:21:41.840 --> 00:21:45.100
ways that people authenticate or have identities, right? They might log in the web app, they might

00:21:45.100 --> 00:21:50.420
have an API key. And authorization might depend on that. That was like a main input to these decisions.

00:21:50.420 --> 00:21:55.740
Yeah, interesting. Like so for our mobile apps, for the training courses, we have you log in with

00:21:55.740 --> 00:22:01.880
using password, but then it actually exchanges an API key, basically, the login gets your API key. And

00:22:01.880 --> 00:22:06.180
then from there on, it's exchanged with all the calls. So yeah, I hadn't even really thought about

00:22:06.180 --> 00:22:10.780
the API side of things as well. But that makes a lot of sense that you'd want to separate those.

00:22:10.780 --> 00:22:11.220
Yep.

00:22:11.220 --> 00:22:15.640
Yeah, it doesn't matter how you log in, if it's API key, or you do with the username passwords,

00:22:15.640 --> 00:22:19.980
like, all right, well, now we're going to figure out what they can do. So I guess tell me what problems

00:22:19.980 --> 00:22:24.900
it was that you saw, you're like, well, we got to do this differently. And then tell us about

00:22:24.900 --> 00:22:28.420
Oso, and like how we can use it in Python and so on.

00:22:28.420 --> 00:22:34.180
Yeah, absolutely. So the, I think the biggest problem that we saw out there is that pretty

00:22:34.180 --> 00:22:38.320
much every single engineering team we've seen out there that we've spoken to has repeated this work

00:22:38.320 --> 00:22:43.100
themselves from scratch. In all the ways we just discussed, right, whether it's through their code,

00:22:43.100 --> 00:22:48.700
as a decorator, whatever it is, like everybody's repeating the same work. And nobody's going to get

00:22:48.700 --> 00:22:51.860
it like perfect on the first attempt. And so they end up, you know, having to iterate and refactor

00:22:51.860 --> 00:22:54.960
over time and add things. So they don't quite get it right.

00:22:54.960 --> 00:22:59.620
Well, and another thing, the way I think about this stuff is this adds no value to your application

00:22:59.620 --> 00:23:05.520
in a like sort of unique feature aspect. It's like one of those things that it has to exist.

00:23:05.520 --> 00:23:10.600
It's table stakes for being in the game, but it's not like somebody's like, I love that app because

00:23:10.600 --> 00:23:17.620
the author is so, or the author is so, like, it's only like drag and molasses if you have to do it

00:23:17.620 --> 00:23:23.240
yourself and you get it wrong, but it's not a bonus. So it's the reason I say it's not something

00:23:23.240 --> 00:23:27.740
you want to like try to invent in or whatever, right? You just want it to work really well and

00:23:27.740 --> 00:23:28.360
get out of your way.

00:23:28.360 --> 00:23:28.920
Absolutely.

00:23:28.920 --> 00:23:32.760
Exactly. It's one of those, if you do it right, they won't even know it's there kind of thing.

00:23:32.760 --> 00:23:33.800
Yeah, exactly.

00:23:33.800 --> 00:23:37.560
So yeah, so that's basically what we're out there to solve is to make that experience

00:23:37.560 --> 00:23:41.080
for everyone involved, like that much better for the developers who are building this and spending

00:23:41.080 --> 00:23:45.780
time on it and hopefully not getting it wrong to the end users who are like dealing with these

00:23:45.780 --> 00:23:50.180
crazy two by two matrices of permissions to navigate. So basically the way we solve this

00:23:50.180 --> 00:23:54.340
is through open source policy engine called Oso. And it's kind of two main pieces of this.

00:23:54.340 --> 00:23:59.560
There is the policy language called Polar. This is what you write your authorization logic in.

00:23:59.560 --> 00:24:01.640
I can speak about that in a bit more in a sec.

00:24:01.640 --> 00:24:02.120
Yeah.

00:24:02.120 --> 00:24:06.200
But that's sort of piece one. And then piece two is the library, which is the policy engine

00:24:06.200 --> 00:24:11.660
itself reads in those policy files and basically has a very, very simple API, a single method

00:24:11.660 --> 00:24:14.120
effectively to make an authorization decision.

00:24:14.320 --> 00:24:18.760
Right. And forward, like I was looking through some of your docs and say for Flask, you have

00:24:18.760 --> 00:24:20.040
some built in integration.

00:24:20.040 --> 00:24:21.080
Yeah, that's right.

00:24:21.080 --> 00:24:25.640
Right. You create a Flask Oso thing and you just say initialize the app, you give it the

00:24:25.640 --> 00:24:29.300
Flask app and then you tell it what routes to authorize basically.

00:24:29.300 --> 00:24:32.980
Exactly. Yeah. So the library itself is actually available for multiple languages.

00:24:32.980 --> 00:24:39.740
So currently we support Python, Ruby, Node.js, Java and Rust. So that's kind of like the core

00:24:39.740 --> 00:24:43.200
of this. And then we build additional framework integration. So you're exactly right.

00:24:43.200 --> 00:24:47.540
You know, we have one for Flask and one for Django. And for each of those, we try and provide

00:24:47.540 --> 00:24:52.140
sort of framework idiomatic approaches to authorization. So, you know, I think, you know,

00:24:52.140 --> 00:24:57.500
Flask is pretty keen with things like decorators. With Django, it's more about malware and automatically

00:24:57.500 --> 00:25:00.420
registering and making available like the underlying data models.

00:25:00.900 --> 00:25:05.720
How hard would it be to add it to a new shiny framework that didn't make your list? Like,

00:25:05.720 --> 00:25:08.100
I'm super excited about FastAPI right now.

00:25:08.100 --> 00:25:08.300
Yeah.

00:25:08.300 --> 00:25:08.560
Yeah.

00:25:08.560 --> 00:25:13.960
Right. Looking really nice, but probably you don't have integration with that yet. It seems

00:25:13.960 --> 00:25:17.980
like it probably wouldn't be that hard to replicate what you've done with Flask or something along

00:25:17.980 --> 00:25:18.400
those lines.

00:25:19.340 --> 00:25:22.820
Each framework integration is effectively equivalent to how hard it is to add Oso to

00:25:22.820 --> 00:25:28.860
your application in general. And we're talking about pip install Oso, then creating new Oso

00:25:28.860 --> 00:25:31.180
objects, loading a policy file, and you're good to go.

00:25:31.680 --> 00:25:36.180
And so, you know, in the case of Django, for example, we'll register automatically like the

00:25:36.180 --> 00:25:41.220
Django models because the policy file can actually access objects and classes from your application.

00:25:41.220 --> 00:25:44.480
So, you know, there's a little bit of work there where we just like automatically register those

00:25:44.480 --> 00:25:44.940
for you.

00:25:44.940 --> 00:25:47.320
Right. Yeah. It's very Django-like to do that.

00:25:47.320 --> 00:25:47.860
Exactly.

00:25:47.860 --> 00:25:54.840
Nice. Okay. So I talked about this complicated story of I want to be the manager, but there's

00:25:54.840 --> 00:26:00.600
only some people where I am the manager of, and I could be managed myself and so on.

00:26:01.100 --> 00:26:05.340
There's other people who I have no relationship with other than co-employee and so on.

00:26:05.340 --> 00:26:08.840
One of the options was we could write code in the application to do that.

00:26:08.840 --> 00:26:09.260
Yep.

00:26:09.260 --> 00:26:15.200
It sounds like this Polar Language policy file is where that would go here. Is that right?

00:26:15.200 --> 00:26:19.280
Yeah, that's right. So the Polar Language is a declarative language. It actually takes

00:26:19.280 --> 00:26:23.960
inspiration from a logic programming language called Prolog. It's sort of this decades-old,

00:26:23.960 --> 00:26:28.800
pretty well-established logic programming language. But Prolog itself typically is,

00:26:28.800 --> 00:26:32.280
it's kind of been known to have a pretty high, like, barriers to entry, kind of hard to learn.

00:26:32.280 --> 00:26:32.680
Yeah.

00:26:32.680 --> 00:26:35.280
So we sort of, you know, that's what we started with, though, but then we basically pushed

00:26:35.280 --> 00:26:39.560
ourselves to make it as easy to use as something like Python. And so, like, along the way, you

00:26:39.560 --> 00:26:44.380
know, we've added stuff that you would expect to find in Python. You can look up attributes on

00:26:44.380 --> 00:26:49.180
your Python objects. You can call methods. You can use variable and keyword arguments. The logic

00:26:49.180 --> 00:26:53.340
is written and the letters as opposed to, you know, some arcane glyph, things like that.

00:26:53.340 --> 00:26:53.780
Yeah.

00:26:53.780 --> 00:26:57.560
So that's the language. So that's Polar. And then so, but basically, you know, by building

00:26:57.560 --> 00:27:01.880
on something like Prolog, it actually makes writing, expressing logic, like you just, like you said,

00:27:01.880 --> 00:27:06.180
around representing complex hierarchies or things like that, it's actually a very, very powerful way

00:27:06.180 --> 00:27:10.500
to represent those. You can write a recursive rule like that, which says you're a manager of an

00:27:10.500 --> 00:27:14.760
employee if you are the employee's manager or you're the employee's manager's manager or something

00:27:14.760 --> 00:27:19.260
like that. You can write like a little recursive rule in a couple of lines. You can now use that

00:27:19.260 --> 00:27:23.340
like throughout your policy. So you could write another rule, which would say managers can read,

00:27:23.340 --> 00:27:29.040
or like a user can read some employee, some personnel data if they're the target employee's

00:27:29.040 --> 00:27:29.420
manager.

00:27:29.420 --> 00:27:29.880
Right.

00:27:29.880 --> 00:27:33.600
And, you know, those two rules now combine together. You have, you've just written those

00:27:33.600 --> 00:27:37.560
like kind of in your flat policy. And the underlying engine is basically the one that kind of navigates

00:27:37.560 --> 00:27:40.020
through those searches through and tries to find if that's true or not.

00:27:40.020 --> 00:27:45.520
Cool. And I'm looking through those syntax here. It's clearly not Python, but it's not that far

00:27:45.520 --> 00:27:50.260
from Python. You know what I mean? It's like a Python person could jump in here and go,

00:27:50.260 --> 00:27:53.860
okay, well, I'm creating an object. Yeah. I got to put the new keyword, but new person

00:27:53.860 --> 00:27:56.520
and such and such. That seems pretty straightforward.

00:27:56.520 --> 00:27:57.140
Yeah.

00:27:57.140 --> 00:27:57.580
Yeah.

00:27:57.580 --> 00:28:01.980
Yeah. The rules look like methods. They have type specializers, which look exactly the same

00:28:01.980 --> 00:28:05.180
like Python type ones do, but they're actually enforced at runtime.

00:28:05.180 --> 00:28:05.780
Okay.

00:28:05.780 --> 00:28:06.580
Things like that.

00:28:06.580 --> 00:28:13.940
So how's data get from like my application over into one of these policy execution instances,

00:28:13.940 --> 00:28:19.880
like calling and running the policy. Basically I've got like a user in my, I don't know,

00:28:19.880 --> 00:28:22.220
request session or something like that.

00:28:22.220 --> 00:28:26.380
Yeah. So they just get, they get passed straight in, right? So the also library in the Python

00:28:26.380 --> 00:28:31.060
app, you just pass it in regular objects from Python. You pass in the request user, you pass

00:28:31.060 --> 00:28:36.300
in the thing they're trying to access. And basically we sort of the policy engine, there

00:28:36.300 --> 00:28:41.060
is a sort of a, an interface between the sort of Python specific library and the internal policy

00:28:41.060 --> 00:28:45.980
engine that it lets Python deal with the objects, but it can do the sort of policy evaluation

00:28:45.980 --> 00:28:50.600
over those objects. And it doesn't need to know what they are. It's just like, if you say user

00:28:50.600 --> 00:28:55.240
dot username, once the policy evaluator gets there, it'll be like, Hey, Python, what's the,

00:28:55.240 --> 00:28:59.360
what's the user's username? And it just says, Oh, it's this, it's Sam. And it continues

00:28:59.360 --> 00:29:04.300
on. It's like, cool. Now I know it's the string. Yeah. Nice. Super cool. So one of the things

00:29:04.300 --> 00:29:07.740
that's interesting about Python and some of the other languages you mentioned with the

00:29:07.740 --> 00:29:12.720
integration, right? Like Ruby, for example, is that we have a REPL read eval print loop,

00:29:12.720 --> 00:29:17.400
right? If you just type Python, hopefully that runs Python three, not type Python three. And

00:29:17.400 --> 00:29:22.620
you just get your triple, triple greater than REPL. And you can start typing in Python commands

00:29:22.620 --> 00:29:27.440
and going from there. And I do feel sometimes people are learning Python. They lean too heavily

00:29:27.440 --> 00:29:30.960
on that. Like they don't just go create a file because it's like a pain to make any corrections

00:29:30.960 --> 00:29:37.740
and stuff, but it is really nice as an exploratory mode. And what surprised me when we spoke first

00:29:37.740 --> 00:29:41.720
about this is you guys have a REPL for this polar policy thing, right?

00:29:41.720 --> 00:29:46.860
We do. We have, we exactly, we have a REPL and we have a debugger and the debugger as well.

00:29:46.860 --> 00:29:51.620
And a debugger. That's right. Because like, okay, as you said, right, it's clearly not Python,

00:29:51.620 --> 00:29:55.120
but it kind of looks like Python, but the underlying model is different to what we're expecting.

00:29:55.120 --> 00:29:59.260
It's not imperative. It's logic based, it's declarative. And so we appreciate there is

00:29:59.260 --> 00:30:02.620
a degree of like having to learn how the language works. And so for us though,

00:30:02.620 --> 00:30:05.060
if you're going to build a language, you want the power of a language.

00:30:05.060 --> 00:30:08.600
You want to have a REPL that you can dive into and like test things out and check

00:30:08.600 --> 00:30:13.800
something as simple as syntax or just to sense check that you got the expector result back.

00:30:13.800 --> 00:30:17.840
And so we have a REPL, you can load in your policy files and it allows you to sort of

00:30:17.840 --> 00:30:21.320
interactively query them. So, you know, you can just like dive in and make sure things are

00:30:21.320 --> 00:30:22.220
working as you'd expect.

00:30:22.220 --> 00:30:26.940
Yeah. I suspect that that would be hugely valuable. I mean, I haven't actually tried it,

00:30:26.940 --> 00:30:31.380
but you know, I think of things like YAML configuration files and stuff and you're just

00:30:31.380 --> 00:30:36.620
like, it's not working. Why does it not work? You know, it's like, it's those times you just

00:30:36.620 --> 00:30:40.320
want to yell at your computer. You're like, why don't you work? It looks right.

00:30:40.320 --> 00:30:42.320
You know, like, ah, indentation.

00:30:43.680 --> 00:30:48.320
Yeah. Or something, right? Oh man. It's like, oh, it's coming back as a single key,

00:30:48.320 --> 00:30:52.940
not a list in the way you put it in YAML or whatever it is, right? Like having the ability

00:30:52.940 --> 00:30:55.260
to like step through it is really interesting.

00:30:55.260 --> 00:30:58.960
Yeah. The debugger is great fun for exactly that. You just drop into the debugger and just

00:30:58.960 --> 00:31:01.440
kind of like hammer next and just like watch it doing its thing.

00:31:01.440 --> 00:31:08.980
Yeah. Do you have, or have you dreamed of any like IDE integrations like VS Code or PyCharm

00:31:08.980 --> 00:31:13.420
or more broadly IntelliJ? Yeah. So I think dream is partially the right,

00:31:13.420 --> 00:31:17.700
the right word for it. You know, we currently do have syntax highlighting available for VS Codes.

00:31:17.700 --> 00:31:21.620
I think there's actually a Vim config out there as well. There is so much stuff we want to do with

00:31:21.620 --> 00:31:26.400
like the, you know, language server protocol and hooking up the debugger to IDs like VS Codes that

00:31:26.400 --> 00:31:31.100
you get that experience like in your, in your IDE. Yeah. There's a ton of other stuff we want to do.

00:31:31.100 --> 00:31:35.060
Cool. All right. Well, I've been beating my example of manager,

00:31:35.600 --> 00:31:41.340
employee to death. Give us some more use cases or you might see people using this kind of stuff.

00:31:41.340 --> 00:31:46.880
Yeah. So I think one of the, one of the kind of initial users we have for this is,

00:31:46.880 --> 00:31:53.400
is kind of your prototypical authorization use case. They are building electronic health record software

00:31:53.400 --> 00:31:59.640
deployed currently in hospitals and the stuff they come up with like every day just astonishes me.

00:31:59.980 --> 00:32:04.260
Some of the authorization, but you know, there you get like, can imagine the really classical stuff,

00:32:04.260 --> 00:32:08.860
which is like, you can doctor can see your patient's records if they saw them in the last seven days,

00:32:08.860 --> 00:32:11.840
or if they have an upcoming visit, like that's the kind of level of granularity,

00:32:11.840 --> 00:32:15.820
like a hospital might want to go down to. Yeah. Yeah. That sounds like a perfect use case.

00:32:15.820 --> 00:32:21.680
You know, just here's a general heuristic for deciding whether some company or organization

00:32:21.680 --> 00:32:25.100
might have a good use for this. If they use SharePoint, what do you think about that?

00:32:27.580 --> 00:32:31.600
That's a pretty good one. I feel like SharePoint is like, it's just like all these weird permissions

00:32:31.600 --> 00:32:35.480
and it's all about like, well, we can't really, I don't know. Just, I always feel like, all right,

00:32:35.480 --> 00:32:38.220
this is like messed up enough that you really need some help here.

00:32:38.220 --> 00:32:42.220
So I thought you're going to go maybe a different direction with that, which is if you would be

00:32:42.220 --> 00:32:47.220
sort of embarrassed or out of business, if some of your data was exposed, then you probably need this.

00:32:47.220 --> 00:32:52.020
Also. Yeah. Yeah, for sure. For sure. All right. So give us some more examples.

00:32:52.020 --> 00:32:55.200
So we, I mean, you spoke about like the social media one at the beginning, which is

00:32:55.200 --> 00:32:58.700
kind of an interesting one because there's a, there's a few slides of that. And actually we

00:32:58.700 --> 00:33:02.740
recently did a bunch of like blog posts on a little social media feed app that we're putting together.

00:33:02.740 --> 00:33:06.720
But even some of the simple ones that, you know, that you mentioned can be reasonably complex.

00:33:06.720 --> 00:33:11.320
Users can see posts they posted or they can see their friends posts. They can see them,

00:33:11.320 --> 00:33:15.200
you know, if maybe if they were like tagged in a post, things like that, they can be pretty involved

00:33:15.200 --> 00:33:18.920
in like having to really look at like the post and where it was put and like who was referenced in it,

00:33:18.920 --> 00:33:22.980
things like that. There's kind of the two sides of that as well, you know, there's like the users of that.

00:33:22.980 --> 00:33:28.060
And then internally how a company like Twitter manages how employees can access things.

00:33:28.060 --> 00:33:31.180
And obviously this was a pretty hot topic not too long ago.

00:33:31.180 --> 00:33:37.000
It was super hot. Yeah. There was a, gosh, I I'm blanking on the details. Maybe you remember

00:33:37.000 --> 00:33:40.580
I didn't tell people, but yeah, there was, it had to do with celebrities, right?

00:33:40.580 --> 00:33:45.460
Right. It was, I think it was effectively the internal employees of Twitter were able to do way

00:33:45.460 --> 00:33:49.600
more than they should be, such as post on behalf of anybody. Exactly.

00:33:49.940 --> 00:33:53.780
Yeah. Which no one should ever really need to have, but I imagine it's a pretty convenient way to build

00:33:53.780 --> 00:33:55.300
it. Well, you want to test how it looks.

00:33:55.300 --> 00:33:59.200
You see that a lot and you see a lot for legitimate reasons, right? Like your customer is having a

00:33:59.200 --> 00:34:02.760
problem. They're like, Hey, I'm unable to, maybe it's not tweet, you know, but I'm, you know,

00:34:02.760 --> 00:34:06.720
I'm unable to do this in my account. You want your support to be able to like step in and help them

00:34:06.720 --> 00:34:10.500
out and be like, Oh yeah, like I can see your permissions aren't quite right. Let me try this.

00:34:11.020 --> 00:34:13.880
So like, you know, there are very legitimate reasons that you'd have that much power, but

00:34:13.880 --> 00:34:18.600
it just like overlays this like entire extra dimension. It's like your user submissions and

00:34:18.600 --> 00:34:23.200
then like your customer support reps behaving as if they're a user, but we're different and so on.

00:34:23.200 --> 00:34:27.640
And it's one thing if that's like internal data and okay, so they probably shouldn't be able to do

00:34:27.640 --> 00:34:32.500
this, but if you log in as them, they can like in the app, you could maybe do a little more within it,

00:34:32.740 --> 00:34:39.360
but it's another to have that on production in a live broadcast of the world. Like I can make

00:34:39.360 --> 00:34:46.780
this random politician or celebrity say this, do this thing. And to a varying degree, it'll be

00:34:46.780 --> 00:34:51.360
believed, right? Yep. Yep. And then, yeah, so that's, so those are good ones. And you know,

00:34:51.360 --> 00:34:56.420
then beyond that, all of the kind of typical cases you can imagine very common inside like an HR thing

00:34:56.420 --> 00:35:00.680
because of like the manager employee relationship you mentioned, right? Very organizationally driven up

00:35:00.680 --> 00:35:04.600
in access control. So in HR or payroll, things like that, you'll see this a lot.

00:35:04.600 --> 00:35:09.520
Similarly in like banking and finance, like any of those cases where you imagine that the data is

00:35:09.520 --> 00:35:14.440
sensitive and you have some concept of groups or hierarchies, organizations is where this like comes

00:35:14.440 --> 00:35:21.340
up a lot. Yeah. Yeah. Cool. So you said the language is available or the API is available for a lot of

00:35:21.340 --> 00:35:26.400
different languages. And one of the things that's interesting here is you all decided to build it

00:35:26.400 --> 00:35:32.120
with Rust. That's right. Which is a pretty hot, neat language. And at some point though,

00:35:32.120 --> 00:35:38.860
Rust has to talk to Python. So I've seen a few examples of people creating the traditional example

00:35:38.860 --> 00:35:43.820
is I'm going to create some lower level thing for Python. So I'm going to use C. Maybe I'll go crazy

00:35:43.820 --> 00:35:51.260
and use C++, but expose it as C. But I think I'd rather write Rust. How did you, how did you pull that

00:35:51.260 --> 00:35:56.220
off? How did you do that integration? Yeah. So the ecosystem for sort of embedding Rust in Python

00:35:56.220 --> 00:36:00.140
or actually, or even vice versa, you know, embedding Python and Rust or calling into Python from Rust.

00:36:00.140 --> 00:36:03.280
There's actually, there's a few tools out there which solve that kind of specific problem

00:36:03.280 --> 00:36:09.260
that they have interfaces specifically for exposing a Rust struct as a Python class, things like that.

00:36:09.260 --> 00:36:12.920
We didn't really have that option available to us because we wanted to support multiple languages.

00:36:12.920 --> 00:36:18.080
We sort of needed some of an API that was simple enough that it wouldn't matter the language or the

00:36:18.080 --> 00:36:23.820
runtime. You can bind the Python and Rust tightly together as an option. And probably if your goal

00:36:23.820 --> 00:36:27.940
is only to write it as a base for some Python thing, it might make sense. But exactly. That

00:36:27.940 --> 00:36:34.000
wasn't your goal, right? No, exactly. So instead we sort of, okay, one of the engineers on the team

00:36:34.000 --> 00:36:39.300
had this pretty great vision of how this would look, which is sort of like a kind of an event driven API.

00:36:39.300 --> 00:36:44.980
So like all of the Rust code is driven through like a very, very simple API from like the host language

00:36:44.980 --> 00:36:49.900
side. So from like Python or Ruby, it's like a simple API, just kind of like do the next thing.

00:36:49.900 --> 00:36:54.940
Like the internal polar evaluation is done through virtual machines. It's like virtual machine, go do

00:36:54.940 --> 00:36:59.920
your next instruction, go do your next instruction. And it kind of returns a JSON blob of data back to say,

00:36:59.920 --> 00:37:05.720
like I said earlier, Hey, what's the username field on the objects number one, which maybe is the user

00:37:05.720 --> 00:37:09.280
type samples. So there's kind of this, this really nice like conversation between the Python and Rust

00:37:09.280 --> 00:37:13.460
where Python is like, Hey, do more work, do more work, do more work until Rust comes back and says like,

00:37:13.460 --> 00:37:18.460
I need more information, which means that like, there is no, when, when the policy is not running,

00:37:18.460 --> 00:37:23.100
there's no like background thread. There's no, there's nothing like running there. It's Python

00:37:23.100 --> 00:37:27.820
is free to kind of pause that virtual machine for as long as it needs. In the case of things like node,

00:37:27.820 --> 00:37:31.860
we haven't done this for Python yet, but in the case of nodes, if you have asynchronous codes,

00:37:31.860 --> 00:37:34.080
that all just works. It's like super nice.

00:37:34.080 --> 00:37:39.100
Yeah. Oh yeah. That's cool. That would be nice in Python. Also my mention of FastAPI earlier.

00:37:39.100 --> 00:37:44.060
Yeah. Yeah. That one's all about the async and await. So it's not quite yet a big deal,

00:37:44.060 --> 00:37:48.060
but it's like some of the new frameworks are going down that path. At the same time,

00:37:48.060 --> 00:37:51.620
you could still use it. It just won't benefit from the async and await, I would suspect.

00:37:51.620 --> 00:37:55.760
Right. Exactly. So where this would matter, and this, and I mean, this would be essentially a pretty

00:37:55.760 --> 00:38:00.720
important thing to do for something like FastAPIs. If, you know, as I said, the, because the policy

00:38:00.720 --> 00:38:05.340
language can call into the application to fetch data, that called might itself resolving like a

00:38:05.340 --> 00:38:08.320
database query. Yeah. And so maybe if you're running multiple threads, you're trying to

00:38:08.320 --> 00:38:12.060
serve multiple requests, like you're going to want that async so that the policy is asynchronously

00:38:12.060 --> 00:38:17.460
getting that data back. Yeah, for sure. Every time you can await some other external resource,

00:38:17.460 --> 00:38:20.260
you're just better off for doing it. Yeah. Exactly.

00:38:20.260 --> 00:38:26.180
Okay. Very cool. Well, it sounds like a neat integration and I guess it's a challenge I didn't

00:38:26.180 --> 00:38:30.280
really expect. Like I figured you would have to integrate it with Rust, but I didn't expect like the,

00:38:30.660 --> 00:38:36.000
we needed to be sort of bi-directional communication and work across the different languages. That's a

00:38:36.000 --> 00:38:37.000
pretty good accomplishment. Yeah.

00:38:37.000 --> 00:38:41.880
Yeah. It was, I mean, it was a lot of fun to build. I have to say though, the hardest part of it all was

00:38:41.880 --> 00:38:48.260
the, the packaging and CI, funnily enough, because now we have this Rust library we're trying to add to

00:38:48.260 --> 00:38:53.780
a, add to the Python package. We, I can't remember what number we're up to at this point, but we have

00:38:53.780 --> 00:39:01.560
maybe like 300 CI jobs for every operating system, Python version to test like every combination.

00:39:01.560 --> 00:39:09.660
So you want to do like build a wheel for like macOS on Python 3.8, macOS on Python 3.9 and so on. Yeah.

00:39:09.660 --> 00:39:14.780
Exactly. So you have the, there's like the many Linux, I think it's a format would be it or a spec or

00:39:14.780 --> 00:39:18.960
something that we use the kind of the many Linux Python approach so that we can build all these,

00:39:18.960 --> 00:39:22.340
pre-build all these wheels, including the Rust code. But once you get them out,

00:39:22.420 --> 00:39:25.580
you want to make sure that those 50 different wheels you built are all work still.

00:39:25.580 --> 00:39:32.960
Yeah, exactly. Exactly. Is this interaction, this Rust Python interaction layer,

00:39:32.960 --> 00:39:34.780
part of the open source stuff that you have out there?

00:39:34.780 --> 00:39:37.120
Absolutely. Everything is open source. Yeah.

00:39:37.120 --> 00:39:40.400
Yeah. Actually, we'll probably see a blog post coming fairly soon on how we built that. Cause I

00:39:40.400 --> 00:39:45.020
think it is, it's like a really nice, simple approach to doing this kind of thing. And

00:39:45.020 --> 00:39:49.500
I'm personally a huge, huge Rust fan. That's kind of a big reason why we're using it. And so I'd love to

00:39:49.500 --> 00:39:53.600
see people taking this approach to building this like cross platform, cross language,

00:39:53.600 --> 00:39:55.600
you know, Rust cores. I think that'd be awesome.

00:39:55.600 --> 00:39:59.660
Yeah. Neat. All right, Graham, let me throw it back to you with a business question.

00:39:59.660 --> 00:40:00.120
Sure.

00:40:00.540 --> 00:40:05.540
Yeah. So we've been talking about how cool it is that this is open source. And yet we started off a

00:40:05.540 --> 00:40:10.800
conversation saying you guys started the business two years ago. I'm really fascinated and admire

00:40:10.800 --> 00:40:16.680
companies that are able to make legitimate, meaningful open source things, and then use

00:40:16.680 --> 00:40:23.980
some interesting extra, the thing that you get more if you support them or if you buy some product or

00:40:23.980 --> 00:40:28.240
service from them. And it sounds like that that is the kind of thing you all are building as well,

00:40:28.240 --> 00:40:32.660
right? Because the library and the debugger and the REPL and all that stuff is open source on GitHub,

00:40:32.660 --> 00:40:35.060
people can fork it today. And that's that, right?

00:40:35.060 --> 00:40:35.800
Absolutely.

00:40:35.800 --> 00:40:38.940
Okay. So what's the story? What is your specific plan here?

00:40:38.940 --> 00:40:47.000
Yeah. So in the near term, we're focused on open source. And the reason for that is we believe that

00:40:47.000 --> 00:40:53.620
the right way to build this company and the right way to build this community is to put enough weight

00:40:53.620 --> 00:41:02.240
behind the body of people who are actually writing code in Polar and giving them everything that they

00:41:02.240 --> 00:41:07.560
need to be successful. And so that's like the focus for us for the next year, two years plus.

00:41:07.560 --> 00:41:11.880
When we think about, obviously, we're a company and we have every intention of being around for the

00:41:11.880 --> 00:41:15.940
long term. And so the way that we need to do that is to create a sustainable business. So the way that

00:41:15.940 --> 00:41:22.820
we think about doing that is by offering a path for teams that want to run and secure Oso in production

00:41:22.820 --> 00:41:27.660
and giving them things that make that really viable and easy. So I'll give you some examples.

00:41:27.660 --> 00:41:33.120
You know, right now, Oso is packaged as a library. Imagine a scenario where you want to run a bunch of

00:41:33.120 --> 00:41:39.200
Oso libraries in a microservices context. And we've had folks already ask us for this today. So now

00:41:39.200 --> 00:41:44.100
you've got a bunch of libraries with different policies running across a bunch of different

00:41:44.100 --> 00:41:49.320
services. And you want a way to ensure that those always have the most up-to-date policy, the most

00:41:49.320 --> 00:41:54.000
up-to-date version of the library. And you're doing that and they're all properly versioned and so on and

00:41:54.000 --> 00:41:59.020
so forth. So an Oso service that would handle something like that is one way you could imagine

00:41:59.020 --> 00:41:59.740
monetizing.

00:42:00.200 --> 00:42:05.280
Right. Because if you're one of these complicated SharePoint sort of organizations, there's stuff

00:42:05.280 --> 00:42:10.840
everywhere, like everywhere. And it's so easy for like one app to get its policy out of sync with the

00:42:10.840 --> 00:42:13.500
other. And how do you know you've got them all? Like, it just sounds like a nightmare.

00:42:13.500 --> 00:42:19.140
Yeah. Or security teams equally have asked us, I mean, Oso being a library on the critical path

00:42:19.140 --> 00:42:26.260
of every request puts it in a unique position to be auditing requests, which is something that you

00:42:26.260 --> 00:42:30.180
talked about back at the beginning. And this is something that a lot of security teams,

00:42:30.180 --> 00:42:36.120
surprisingly, really struggle with. It's not an easy problem to solve. And but it's something that

00:42:36.120 --> 00:42:41.520
this particular piece of software is in a unique position to do. And so you could easily imagine

00:42:41.520 --> 00:42:46.700
Oso providing auditing capabilities to security teams in the future, showing them who was authorized

00:42:46.700 --> 00:42:51.520
to do what at what point. And because we're making the authorization decision or so, we can actually tell

00:42:51.520 --> 00:42:55.900
them why they were authorized. Oh, because they were in this role, because they sit in this department,

00:42:55.900 --> 00:42:58.820
and they report up to this person, stuff like that.

00:42:58.820 --> 00:43:03.480
Yeah, that's super interesting. Because you're right, you are already in the middle of all those

00:43:03.480 --> 00:43:06.860
exchanges. So it's easy for you to add that visibility.

00:43:07.360 --> 00:43:12.120
Yeah. So I mean, for us, as I said, like the philosophy is relatively clear, we want to give

00:43:12.120 --> 00:43:17.560
developers the tools that they need to be successful with Oso period, and that technology will always be

00:43:17.560 --> 00:43:23.220
open source. The way that we think about the technology that we'll use to sustain the commercial

00:43:23.220 --> 00:43:30.720
side of the business will be the sort of organizational pieces that larger businesses rely on in order to

00:43:30.720 --> 00:43:36.940
be secure, be compliant, run large operational teams and applications in production.

00:43:36.940 --> 00:43:43.200
Yeah, cool. Well, I think that's a it sounds like a pretty solid idea, right? You've got this legitimate

00:43:43.200 --> 00:43:49.080
open source thing that's meaningful and useful, and grow that and get the companies that got the deep

00:43:49.080 --> 00:43:55.280
pockets who are often unlikely or unwilling or incapable of contributing back to open source,

00:43:55.280 --> 00:44:00.020
give them a thing that they'll pay for that it will indirectly basically give back to open source.

00:44:00.340 --> 00:44:06.800
Absolutely. I mean, as an example, before this, I worked at an open source company called MongoDB,

00:44:06.800 --> 00:44:13.120
and over for many, many years, and over that period of time, we invested several hundred million

00:44:13.120 --> 00:44:19.540
dollars worth of R&D into the database product, which is directly straight from the companies that

00:44:19.540 --> 00:44:25.020
were providing revenue to the business through the paid products. So it's a very clear tie between,

00:44:25.020 --> 00:44:28.400
you know, the companies paying money to the company building the product itself.

00:44:28.840 --> 00:44:32.780
Yeah, I was going to ask you about MongoDB as well, like what inspiration you got there. Because

00:44:32.780 --> 00:44:37.860
I think one of the things that were started, at least me and the folks who I've spoken to are

00:44:37.860 --> 00:44:43.460
starting to realize is that it doesn't matter how much money a company has, they won't donate.

00:44:43.460 --> 00:44:49.220
The idea of a donation is like, I don't know where that goes into the accounting spreadsheet. It doesn't

00:44:49.220 --> 00:44:56.180
make sense. I can't tell my shareholders that we donate a million dollars to Django. Because I don't know,

00:44:56.180 --> 00:45:02.540
it just doesn't make they just can't put that into their structure, right. But we pay for service level

00:45:02.540 --> 00:45:09.340
agreements, we pay for additional services, we pay for better support, like that fits into their

00:45:09.340 --> 00:45:14.420
accounting software. And I think that's the story that's going to work. And so if you can offer them

00:45:14.420 --> 00:45:18.000
something more, they're very likely to pay for it to get that like you are.

00:45:18.200 --> 00:45:22.940
Yeah, absolutely. And I think for us, again, like whatever, there's books upon books upon books

00:45:22.940 --> 00:45:27.220
written about this topic, not in the context of open source software, but like in the context of like

00:45:27.220 --> 00:45:32.200
philosophy over like, in the like, you know, 16th, 17th, 18th century, you know, people writing about

00:45:32.200 --> 00:45:36.480
tragic of the commons, this is not a new topic, like in the world. Yeah.

00:45:36.740 --> 00:45:41.200
But in the context of like, open source, our philosophy is we need to give something that's

00:45:41.200 --> 00:45:45.240
good enough for someone to be able to use on their own, where they wouldn't feel like they're going to

00:45:45.240 --> 00:45:49.780
be held hostage if they're not going to pay money. That's just not a sensible thing for anyone to do.

00:45:49.780 --> 00:45:54.600
We try to put ourselves in the shoes of our users, we would never adopt a product where we felt we'd be

00:45:54.600 --> 00:45:59.440
at risk of being held hostage. But yeah, but instead, give them an opportunity where, hey,

00:45:59.440 --> 00:46:03.440
here's something that you can, that you can take advantage of, and that you can get value from.

00:46:03.440 --> 00:46:08.340
And then if you find yourself in this other scenario where you think you want to, you want to get

00:46:08.340 --> 00:46:12.240
something like auditing, you want to get additional visibility, you want this way to run something at

00:46:12.240 --> 00:46:16.240
scale, then we're going to be there for you. And we're going to provide a commercial product for you in

00:46:16.240 --> 00:46:21.220
that situation. Yeah, that's fantastic. And I'm a huge fan of MongoDB. I told you this earlier,

00:46:21.220 --> 00:46:26.940
before we hit record, but all of our stuff runs on Mongo, and it's has for five, six years. It's been

00:46:26.940 --> 00:46:32.420
beautiful. I actually just looked at the Stack Overflow developer survey from 2020.

00:46:33.080 --> 00:46:39.420
And under the most wanted database, MongoDB is out by like 5% above Postgres. And then it's like,

00:46:39.420 --> 00:46:43.380
those are the two that are way out front. So pretty neat. What lessons did you take from that,

00:46:43.380 --> 00:46:48.740
your time at MongoDB that maybe you wouldn't have otherwise brought to this venture?

00:46:48.740 --> 00:46:55.000
By far, the number one thing that I learned there is focus on the developer. And I mean, if you look at

00:46:55.000 --> 00:46:59.760
the mission and vision of our company, it's we put security in the hands of the makers. That is

00:46:59.760 --> 00:47:07.200
all we care about. We have a singular focus on developers. If you woke up anyone on the team and

00:47:07.200 --> 00:47:11.320
shook them at night and you ask them, who is the number one focus of this company, I guarantee you that

00:47:11.320 --> 00:47:16.040
anyone would say developers. And that has been clear from the beginning and will continue to be

00:47:16.040 --> 00:47:20.100
clear for us. And that was definitely the main thing I took away from my time at MongoDB.

00:47:20.600 --> 00:47:24.740
Yeah. Yeah. Super cool. All right. Awesome. Well, I think we're about out of time,

00:47:24.740 --> 00:47:30.180
but what a neat project and I wish you guys good luck with it. Let me ask you the final two questions

00:47:30.180 --> 00:47:33.760
though, before you get out of here. Graham, I'll start with you first. If you're going to write

00:47:33.760 --> 00:47:38.220
some code, what editor do you use these days? So you do some, not a ton, but if you are, what are you

00:47:38.220 --> 00:47:38.380
using?

00:47:38.660 --> 00:47:40.180
It was definitely VS Code.

00:47:40.180 --> 00:47:42.940
All right. Right on. That's a popular one. Sam?

00:47:42.940 --> 00:47:48.460
Yeah. I think that's probably because of my love of VS Code and I've forced it on Graham.

00:47:48.460 --> 00:47:51.340
Yes. Influenced by Sam for sure.

00:47:51.340 --> 00:47:55.320
He went through his computer, uninstalled all the stuff that wasn't VS Code. Well,

00:47:55.320 --> 00:47:56.600
you got to edit something. Here you go.

00:47:56.600 --> 00:48:00.820
Text edit is gone. Sorry.

00:48:01.620 --> 00:48:06.000
Yeah. It's kind of stunned me how VS Code's like gradually seems to be taken over the world,

00:48:06.000 --> 00:48:07.440
but yeah.

00:48:07.440 --> 00:48:11.960
It's interesting. I find it surprises me a little bit because it came out of the whole Microsoft

00:48:11.960 --> 00:48:15.960
side of things. I thought that there would be a lot of communities that would go, just no.

00:48:15.960 --> 00:48:16.480
Yeah.

00:48:16.480 --> 00:48:22.180
But it's somehow it's hit the right notes and people really love it. So yeah, it's definitely

00:48:22.180 --> 00:48:27.900
successful these days. And then a notable PI PI package, anything, Sam, you've come across maybe

00:48:27.900 --> 00:48:32.480
that like cool libraries like, oh man, you should really know about this. Or maybe we did our Rust

00:48:32.480 --> 00:48:34.060
integration with that or so on.

00:48:34.060 --> 00:48:39.500
So funnily enough. So one of the things I find always hilarious about Python is sometimes I'm not

00:48:39.500 --> 00:48:44.560
even aware if I'm using package or it's just built into the standard library. Yeah. So like,

00:48:44.560 --> 00:48:48.020
I'm a big fan of like all the typing stuff that Python has been like gradually adding in.

00:48:48.020 --> 00:48:52.760
I think partially that's because I went through my like Rust phase and now I'm back and running all

00:48:52.760 --> 00:48:54.900
the types. So definitely all the typing extensions.

00:48:55.360 --> 00:48:59.500
I love the type stuff. I put it all like all the Python code that I write on the boundaries,

00:48:59.500 --> 00:49:04.800
like say not every bit of code, but where like some part of code is written and some other part

00:49:04.800 --> 00:49:08.340
is going to be sort of externally consuming it. Types go on that straight away.

00:49:08.340 --> 00:49:12.840
And yeah, I think it's another standard library stuff, but I love all the metaprogramming stuff

00:49:12.840 --> 00:49:18.300
you can do with Python. It's, you can really do some crazy stuff with it, but it's, it's kind of fun.

00:49:18.800 --> 00:49:24.680
Yeah. Awesome. I'll throw two things out there for people that are like really related there. So my

00:49:24.680 --> 00:49:30.520
py is a static type checker that will verify all the types you put in are consistent. And then there's

00:49:30.520 --> 00:49:36.040
my pyc, which will actually compile the native code. Some of your Python based on those types.

00:49:36.040 --> 00:49:40.380
I understand. I haven't done anything meaningful with it, but anyway, a bunch of fun stuff around the

00:49:40.380 --> 00:49:45.900
types out there. Indeed. Yep. Yep. All right. Final call to action. People are interested in

00:49:45.900 --> 00:49:50.980
letting someone else handle their authorization and some library, maybe putting that into one of these

00:49:50.980 --> 00:49:54.480
polar files. How do they get started? What do they do if they want to get started with your projects?

00:49:54.480 --> 00:50:00.220
You guys go to a oso HQ.com probably the fastest way. There's a big button on the front that'll take

00:50:00.220 --> 00:50:03.940
you to the quick start. I would check that out. Awesome. All right. Well, thank you both for being

00:50:03.940 --> 00:50:07.720
on the show and for working on this project for the last couple of years. It looks really helpful.

00:50:07.720 --> 00:50:12.020
Thanks for having us. Awesome. It was great to be here. Thank you. Yep. You bet. Bye-bye guys.

00:50:12.020 --> 00:50:13.220
See you. Bye.

00:50:14.220 --> 00:50:19.120
This has been another episode of Talk Python to Me. Our guests in this episode were Graham Neary

00:50:19.120 --> 00:50:22.660
and Sam Scott. It's been brought to you by us over at Talk Python Training.

00:50:22.660 --> 00:50:29.340
Want to level up your Python? If you're just getting started, try my Python Jumpstart by Building 10 Apps

00:50:29.340 --> 00:50:34.760
course. Or if you're looking for something more advanced, check out our new async course that digs

00:50:34.760 --> 00:50:39.560
into all the different types of async programming you can do in Python. And of course, if you're interested

00:50:39.560 --> 00:50:43.640
in more than one of these, be sure to check out our everything bundle. It's like a subscription

00:50:43.640 --> 00:50:48.820
that never expires. Be sure to subscribe to the show. Open your favorite podcatcher and search for

00:50:48.820 --> 00:50:54.140
Python. We should be right at the top. You can also find the iTunes feed at /itunes, the Google Play

00:50:54.140 --> 00:51:00.820
feed at /play, and the direct RSS feed at /rss on talkpython.fm. This is your host,

00:51:00.820 --> 00:51:05.740
Michael Kennedy. Thanks so much for listening. I really appreciate it. Now get out there and write some Python code.

00:51:05.740 --> 00:51:35.720
We'll see you next time.

