00:00:00 How do you learn libraries or even parts of Python itself that you don't have actual work projects to try them out on?

00:00:05 Whether that's SQLAlchemy, Slack bots, or Map APIs, actually building projects, small and large, with them is really the only way to gain true competency.

00:00:14 Well, you might try one of the 100 days of Python code challenges that have been going around.

00:00:21 This week, you'll meet Bob Belderbos and Julian Saccaria, who created PyBytes.

00:00:26 They've done a few 100 days of code challenges and are here to share their experience and even some concrete examples.

00:00:33 This is Talk Python To Me, episode 140, recorded November 28, 2017.

00:00:52 Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:59 This is your host, Michael Kennedy. Follow me on Twitter, where I'm @mkennedy.

00:01:03 Keep up with the show and listen to past episodes at talkpython.fm, and follow the show on Twitter via at Talk Python.

00:01:10 Talk Python To Me is partially supported by our training courses.

00:01:14 Have you heard about the 100 days of code challenge?

00:01:16 It's a challenge where you write code for an hour a day for 100 days.

00:01:20 It's helped many developers finally master programming.

00:01:24 But it can be hard to know what to study or have resources to focus on.

00:01:28 That's why we wrote not one, but two 100 days of code courses.

00:01:33 100 days of code in Python, which covers mostly pure Python.

00:01:37 And 100 days of web in Python, which covers a whole spectrum of web frameworks and concepts.

00:01:43 If you've been thinking about taking the 100 days of code challenge, be sure to visit training.talkpython.fm and check out our courses.

00:01:50 They are the 100 days of projects and lessons with a tidy bow on top just for you.

00:01:55 Bob, Julian, welcome to Talk Python.

00:01:58 Hey, Mike. Thanks for having us.

00:02:00 An honor.

00:02:01 It's great to have you here and see you at least on Skype.

00:02:03 Bob, we had such a great time at PyCon.

00:02:06 Indeed. It was very nice meeting you.

00:02:08 Yeah, it was great to hang out.

00:02:09 And I think that was really my favorite part of PyCon is just meeting all the people and the experiences outside the talks in the conference rooms.

00:02:16 But it was a good time.

00:02:18 And Julian, next year maybe you can make it.

00:02:20 Who knows?

00:02:20 Oh, man. Totally jealous.

00:02:22 It is a very long way from Australia.

00:02:24 I'm going to try for 2018.

00:02:26 Oh, that's awesome.

00:02:27 Yeah, I've done that flight from Sydney.

00:02:28 It's a commitment.

00:02:29 It's not pleasant.

00:02:30 Let's just say that.

00:02:31 No, but look, if you're going to Australia, you come from my direction to yours.

00:02:36 It's a wonderful place to visit.

00:02:37 So maybe I'll get down there someday.

00:02:39 So we're going to talk about code challenges.

00:02:42 You know, Twitter has been afire with this concept of 100 days of code.

00:02:47 Basically, people who are learning something new or pushing their boundaries in some way.

00:02:52 Like, I'm going to do this for 100 days.

00:02:55 And I'm going to commit publicly to doing it.

00:02:57 And, you know, sort of testify to social media, if that is a thing that I've done my days at work.

00:03:02 Right.

00:03:03 And so we're going to have a good sort of retrospective on this one that you did and maybe talk about another one that you guys are doing as well.

00:03:11 Before we get there, though, let's start with your story.

00:03:15 How did you get into programming in Python?

00:03:16 Julian, go first.

00:03:17 All right.

00:03:18 So it's actually kind of funny.

00:03:20 I'm really, if you're familiar with PyBytes, I'm the relative newbie compared to Bob.

00:03:25 So I actually started with C++ in high school.

00:03:29 But Python-wise, I don't actually work with Python every day.

00:03:32 It's not what I do for a job, which has made it incredibly difficult.

00:03:36 Right.

00:03:37 It was actually Bob who pushed me.

00:03:38 So I was trying to calculate some overtime when I worked in the field for Oracle.

00:03:44 And, yeah, he said, why don't you create a Python app to track that?

00:03:48 And that was it.

00:03:49 As soon as I started doing it, bang, I was like, this is so cool.

00:03:53 This is so much easier than smart pointers in C++ or, you know, whatever.

00:03:58 Exactly.

00:03:59 I'm like, well, now I don't have to log in and use the Oracle tool.

00:04:02 I can use my own.

00:04:02 Beautiful.

00:04:03 Yeah, it was great.

00:04:04 And then from that, it's just one thing after another and then PyBytes.

00:04:08 Yeah, awesome.

00:04:08 And what do you do day to day for work?

00:04:11 Do you work at Oracle still?

00:04:12 No, no.

00:04:13 So I resigned about a year and a half ago and I now work for Amazon Web Services.

00:04:18 Oh, exciting.

00:04:19 What do you do there?

00:04:20 It's a bit hush-hush, but I work in one of the data centers.

00:04:23 So it's a lot of fun.

00:04:25 So if anything goes down, it's probably me.

00:04:28 No, I'm just kidding.

00:04:28 We'll put your Twitter account on this page.

00:04:33 And as soon as AWS, like Asia goes down, you're going to just hear about it.

00:04:37 Yeah, sure.

00:04:38 I'll get an email from you as well.

00:04:39 Yeah, that's right.

00:04:40 Nice.

00:04:42 All right, Bob, how about yourself?

00:04:43 I started programming about 10 years ago.

00:04:46 I was working in a financial department and we had to close the month every month.

00:04:53 And tasks got a bit boring.

00:04:54 So I started to use Excel and macros to automate the stuff.

00:04:58 At the same time, I discovered web design and making web pages, which I was very passionate about.

00:05:04 So I self-taught programming, went back into Sun and later Oracle as a support engineer,

00:05:10 started to build web tools for the engineers to solve their cases more rapidly.

00:05:17 Well, I was doing that in Bash.

00:05:18 Give us an example of like a tool you might make and the problem that it solves.

00:05:22 An example of a tool?

00:05:23 Yeah, yeah.

00:05:23 Like what kind of tools would you make?

00:05:25 Like what kind of problems and how would you help people solve them?

00:05:27 Yeah, that was cool because there was one day in the chat room, somebody said like,

00:05:32 well, we're getting all these diagnostic bundles from servers and we don't have any tool to do diagnostic on them.

00:05:38 It's like these lucky moments when you see an opportunity and you can build something big.

00:05:43 So I started to develop a tool to diagnose these bundles and have a web GUI for engineers to help solve the issues.

00:05:53 And that tool became pretty big with hundreds of engineers using it.

00:05:57 And that got me into it.

00:05:59 And it's still in Python?

00:06:00 No, that wasn't PHP.

00:06:02 And later work then was in Perl.

00:06:05 And that got a bit of a mess.

00:06:07 So in 2012, I looked at other options, stumbled upon Python, found it very clean and nice.

00:06:16 And I never looked back.

00:06:18 So I've been using it for five years now.

00:06:21 If you look at the graphs of the popularity of Python and the growth of Python,

00:06:25 there's an amazing article from Stack Overflow called The Incredible Growth of Python.

00:06:30 And that's super amazing.

00:06:31 But if you look at where the graph turns sharply up, that's in 2012.

00:06:35 So you're partly to blame or to credit for that.

00:06:38 That's awesome.

00:06:39 Yeah, man.

00:06:41 So you just like languages with Ps, right?

00:06:43 PHP, Perl, Python?

00:06:45 I do like JavaScript a little bit as well.

00:06:48 Maybe we can put a silent P in there.

00:06:50 Speaking of Ps, let's talk about PyBytes.

00:06:53 This is so similar to the name of my other podcast.

00:06:57 That was so funny.

00:06:59 There's all these weird coincidences, right?

00:07:00 There were no Python podcasts.

00:07:01 And then I released this one like days before podcast init comes out.

00:07:05 And they're like, we're the first one.

00:07:07 Wait, no, we're not.

00:07:08 Why?

00:07:08 And then, you know, we both released like a similar thing.

00:07:11 I feel like it was just about the same time, right?

00:07:13 It was around December last year, I think, right?

00:07:16 Exactly.

00:07:17 I think we were in November.

00:07:18 It was just like crazy.

00:07:20 So P-Y-B-I-T dot E-S, right?

00:07:23 Yep.

00:07:24 It reveals one of the locations, Spain.

00:07:28 Exactly.

00:07:28 That's where you are.

00:07:29 Yeah.

00:07:30 So you guys tell everyone about it.

00:07:32 It's a pretty cool resource.

00:07:33 So PyBytes is a blog where pretty much the bare minimum, we share our passion and love for Python.

00:07:39 That's it.

00:07:40 It started because of that.

00:07:42 Bob and I, we always struggled to work on projects together because of the sheer time difference, time zones, different jobs now.

00:07:49 And it was just ridiculous.

00:07:51 So we eventually just bit the bullet and said, you know what?

00:07:53 Why don't we start a blog together on Python?

00:07:55 So he knew a lot.

00:07:57 I didn't know a huge amount.

00:07:58 And we felt that that gap between our knowledge levels would be an awesome concept for a blog.

00:08:05 He could do the more complex stuff and I could do the really beginner stuff as I'm learning it.

00:08:10 So as Bob would be learning some crazy complex concept, he would write these amazing articles on it and I'd be scratching my head going, what the hell are you talking about?

00:08:21 And then I'd take something that was quite simple to Bob and I would write that in super layman's terms so that anyone could read it and understand it.

00:08:31 And we had this sort of double whammy approach.

00:08:33 I think that's really, yeah, that's a super cool idea because I think there's huge value in people who are new to a particular technology like you described yourself, talking about their experiences, explaining what they're learning.

00:08:45 And there's so many people who are learning what you're learning that they're not necessarily looking for the high end expert analysis of meta classes.

00:08:53 They want to know how to write a function with default values or, you know, something like this, right?

00:08:57 And so that's super helpful.

00:08:58 But then on the other hand, a lot of times that comes up a little bit short and not actually having the right depth, the really the best answer.

00:09:07 And it feels like you guys could team up on that.

00:09:10 Did it work that way, Bob?

00:09:11 Yes.

00:09:11 And I think it's a nice dynamic between beginner level and Julian making stuff really accessible.

00:09:19 And me sometimes tackle maybe a bit more advanced topic.

00:09:23 So, yeah, I think it's a great combination.

00:09:25 And, yeah, funnily, yesterday we did a code challenge and we made a new one.

00:09:31 And Julian sent me the beginning and I then tweaked it.

00:09:35 And he said, well, that's way advanced.

00:09:37 You do like sort with lambda.

00:09:39 And that's cool because for some folks, some of the audience do need that more advanced level.

00:09:45 But some of the folks are still with for loops and variables.

00:09:48 And, yeah, you really have to take a step back.

00:09:52 And I think Julian is great at that.

00:09:53 He made some very accessible articles like on what is a class or how to write a for loop.

00:09:59 And you notice that a lot of beginning Pythonistas need that.

00:10:03 That's for sure.

00:10:04 It's really easy to sort of zoom past the introductory stuff and get to like the excited internals.

00:10:10 Like, here, let's disassemble this and look at the bytecode and see what it's doing.

00:10:14 It's like, no, maybe not so much.

00:10:17 And we got to take a step back.

00:10:19 Cool.

00:10:20 So how did you guys meet up?

00:10:22 You guys are let's talk about some crazy time zone shifting.

00:10:25 Like the world we live in is so amazing.

00:10:27 So, Bob, what time is it?

00:10:28 11 p.m.

00:10:29 11.15 almost.

00:10:31 Yeah.

00:10:31 Julian, what time is it?

00:10:33 It's 9.15 a.m. on Wednesday.

00:10:35 Oh, you guys are all wrong.

00:10:36 It's 2 in the afternoon on Tuesday.

00:10:38 And you are in the future.

00:10:39 We made it.

00:10:40 So that's pretty.

00:10:41 Yeah, exactly.

00:10:42 Yes, we got at least 12 more hours.

00:10:44 So how did you guys meet up across all this time and space?

00:10:47 So we actually haven't met, believe it or not.

00:10:51 Probably think I'm lying, but we haven't met in person.

00:10:53 Back in Sun Microsystems where we both worked, Bob actually, out of the blue,

00:10:58 randomly wanted to use some machines that I was looking after.

00:11:02 And we had this conversation and we just, I guess, ended up emailing back and forth.

00:11:07 And now we're practically married.

00:11:10 It's crazy.

00:11:11 Yeah.

00:11:12 You guys have like deadlines every single day.

00:11:15 You have to agree on code and whatnot, right?

00:11:17 Yeah.

00:11:18 Daily on the phone.

00:11:19 That's awesome.

00:11:19 So a lot of Skype or other VoIP stuff and GitHub and things like that.

00:11:25 Yeah.

00:11:25 WhatsApp works well for talking.

00:11:28 And we use Slack also with some more folks of our community.

00:11:33 And yeah, GitHub for coding.

00:11:36 Yeah.

00:11:36 We use a lot of tools.

00:11:37 It's a great time to live in.

00:11:39 It totally is.

00:11:39 For Slack, do you guys have like a PyBytes community?

00:11:43 Yes.

00:11:43 That people can join?

00:11:44 Yes.

00:11:45 All right.

00:11:45 Tell us about that.

00:11:46 So that came around code challenges, which we will discuss in a bit.

00:11:51 We started to ask people to join Slack to ask questions and share their experiences on the code challenges.

00:11:58 And yeah, it's a great asset to build a community and get inputs and help people.

00:12:06 Yeah.

00:12:07 I think that's really nice.

00:12:08 So we can put a link to that in the show notes if people want to join up.

00:12:11 Yeah.

00:12:11 It'd be cool.

00:12:12 It's actually really cool because we invited people as they were doing pull requests and the challenges.

00:12:18 And they're the most dedicated people, right?

00:12:20 And so we're bringing them in and you get one or two people every few days.

00:12:24 And now we have this community in there where we sort of back away sometimes.

00:12:28 And these guys and girls, they just, they help each other.

00:12:31 They answer their own questions and they have these conversations.

00:12:33 We'll come back.

00:12:34 I'll be at work all day and my watch is going nuts with hundreds of messages coming through.

00:12:38 And I'm thinking, what am I missing out on?

00:12:40 What's happening?

00:12:41 Yeah.

00:12:41 I got to take a lunch break and go see what's going on.

00:12:43 Nice.

00:12:44 That's really awesome.

00:12:45 I mean, I have a Gitter channel for the podcast and a lot of people drop in there and it's similar.

00:12:51 There's probably more people in your channel because I don't talk about it very much, but

00:12:54 still it's great when people get in there and share ideas and help each other.

00:12:57 Yeah, totally.

00:12:58 All right.

00:12:58 It's code challenge.

00:12:59 So a hundred days of code.

00:13:00 Bob, tell us what the general idea of this is.

00:13:04 I have to get his name right.

00:13:05 I think it was Alex Calloway who invented the challenge for JavaScript and promoting coding

00:13:11 in general.

00:13:12 It's about a hundred days in a row.

00:13:15 Share your coding, share what you're doing, whatever it is.

00:13:18 Do an hour a day and be responsible.

00:13:21 Do a tweet out what you did.

00:13:23 So you see a lot of tweets with a hashtag, a hundred days of code, and people share scripts

00:13:28 or if they did a tutorial or whatever they did, but it's one hour a day.

00:13:32 And we gave it a little twist of do actually a script a day, which we shot ourselves a little

00:13:37 bit in the foot there.

00:13:38 Tell us what happened.

00:13:41 Is it like a little more than an hour or what happened?

00:13:43 A lot of scripts were pretty basic and yeah, can use some refactoring and were within the

00:13:47 hour, but sometimes it does not because typically happens.

00:13:50 You start to build something cool and you really want to tweak it.

00:13:53 And yeah, it can be more.

00:13:55 But on the flip side, and we will go into a couple of scripts shortly.

00:13:59 Yeah, we were picking our favorites for the show and we went through the logs and it's like

00:14:06 a couple of months ago now.

00:14:07 And we were like, did we do all this coding?

00:14:09 It was like 5,000 lines of code in a hundred days.

00:14:12 Well, between the two of us.

00:14:14 So yeah, even and uneven days, but still we did so much.

00:14:18 That was really cool.

00:14:19 Julian, do you feel like you said you were a little newer at Python?

00:14:22 Do you feel like this gave you some experience with Python in ways that maybe projects you're

00:14:27 working on wouldn't?

00:14:28 Oh, totally.

00:14:28 Well, first of all, it absolutely destroyed me in a good way.

00:14:32 It was just insane, right?

00:14:34 We were coding every day as it was for PyBytes.

00:14:36 So to suddenly say, well, we can do a hundred days.

00:14:40 It was almost, well, we're already doing it.

00:14:43 So what's the point?

00:14:44 So that's when we started, said, well, what if we made a script?

00:14:47 And that just took me from one level to maybe five levels above, you know, because I was

00:14:54 forced to not only learn something.

00:14:56 So it's not just watching a video or reading a doc or something.

00:14:59 It was learn it, apply it, make it functional and have it actually do something that you

00:15:04 can then share out.

00:15:05 And someone can, you know, clone that from GitHub and have a running script that does something.

00:15:11 That's really awesome.

00:15:11 So you kind of put a little twist on it and just not just, I wrote some code.

00:15:16 I have a code streak for a hundred days or whatever you want to call it.

00:15:20 It's, I created 100 working little baby applications in a hundred days, right?

00:15:25 And that was nuts.

00:15:26 So we'll talk about the details of them in a minute.

00:15:29 But Bob, can you just touch on like some of the things you got to play with?

00:15:32 Like, did you get to play with a SQLAlchemy or TinyDB or, you know, things like this?

00:15:37 Yeah.

00:15:38 Oh, goodness.

00:15:38 Yeah.

00:15:39 SQLAlchemy was there.

00:15:40 We will have some examples shortly.

00:15:44 But we did some stats and I think we actually used exactly 100 modules, which was like a

00:15:49 weird coincidence, 100 days, 100 modules.

00:15:52 And I think like 40% or so was from PyPI.

00:15:55 So it was a lot of external stuff as well.

00:15:57 We discovered maps, plot cities on maps and a lot of APIs, web development, all kinds of

00:16:04 stuff.

00:16:05 And, you know, we have a lot of snippets there now, so we can go back and there's tools we

00:16:09 use till this day.

00:16:11 There were foundations in there with Twilio API that led to a guest post for the Twilio

00:16:15 blog.

00:16:15 There are Slack bots in there we use on our Slack today.

00:16:19 Twitter automation we run today.

00:16:21 It's pretty cool.

00:16:23 Yeah, that's really, really awesome, actually.

00:16:25 I feel like you could get a bunch of ideas of like almost products or things that you could

00:16:31 create if you were willing to like put a few months into one of them, right?

00:16:34 Totally.

00:16:35 Exactly.

00:16:36 And it's not about perfectionism.

00:16:38 It's about doing these quick prototypes.

00:16:41 Just get coding.

00:16:42 You know, I mean, if you think about having the perfect script, you don't get it.

00:16:47 You're not getting to do it.

00:16:49 Yeah.

00:16:49 I've known a lot of people who are in some people who are in programming who spend too much

00:16:54 time worrying about getting things just right and not just going, I'm going to write this.

00:16:58 And if I have to, I'll refactor it.

00:17:00 And if like it's the worst case scenario, I'll just rewrite it knowing a lot more than I did

00:17:03 the first time.

00:17:04 You know, I feel like some people kind of get frozen during the headlights for big projects

00:17:09 and just not really wanting to start being afraid of going the wrong direction.

00:17:14 This portion of Talk Python To Me has been brought to you by Rollbar.

00:17:17 One of the frustrating things about being a developer is dealing with errors.

00:17:21 Ugh.

00:17:22 Relying on users to report errors, digging through log files, trying to debug issues, or getting

00:17:27 millions of alerts just flooding your inbox and ruining your day.

00:17:30 With Rollbar's full stack error monitoring, you get the context, insight, and control you

00:17:35 need to find and fix bugs faster.

00:17:37 Adding Rollbar to your Python app is as easy as pip install Rollbar.

00:17:41 You can start tracking production errors and deployments in eight minutes or less.

00:17:45 Are you considering self-hosting tools for security or compliance reasons?

00:17:49 Then you should really check out Rollbar's compliant SaaS option.

00:17:53 Get advanced security features and meet compliance without the hassle of self-hosting, including

00:17:58 HIPAA, ISO 27001, Privacy Shield, and more.

00:18:02 They'd love to give you a demo.

00:18:04 Give Rollbar a try today.

00:18:05 Go to talkpython.fm/Rollbar and check them out.

00:18:10 Julian, I guess this probably helps you just learn to just like, okay, you have to write.

00:18:14 It is 11 o'clock at night.

00:18:15 I have one hour left.

00:18:17 I have to write, yeah?

00:18:18 Yeah, that was it.

00:18:19 It wasn't sit there and plan it and storyboard it or something.

00:18:22 It was just, okay, what's the first thing we need for this app?

00:18:25 Okay, it needs to output this data.

00:18:26 Just write your prints.

00:18:28 Write your for loops.

00:18:29 Create your databases.

00:18:31 And it wasn't perfect.

00:18:32 It was tough.

00:18:33 You know, there were some nights we'd be up till, you know, one in the morning with waking

00:18:37 up at 530 because I have kids.

00:18:39 And you'd be a wreck.

00:18:41 And the only positive, the light at the end of the tunnel was seeing that countdown to the

00:18:45 end.

00:18:45 And knowing that you had a gap in between.

00:18:49 So you could, you almost had two days to write the script, but you were writing across both

00:18:53 days.

00:18:53 And it was just...

00:18:56 The other good thing is we probably spent, not spent, we probably save a couple of months

00:19:01 of Netflix because I probably canceled it.

00:19:03 Yeah, I was behind on all my Marvel TV.

00:19:07 Yeah.

00:19:08 Yeah, I sort of view programming as my gaming.

00:19:10 Like I used to play things like Counter-Strike and games and whatnot.

00:19:13 And now if I have an extra two hours, I'm like, oh, what feature can I add to my like

00:19:18 training website?

00:19:19 Or what other kind of thing could I create?

00:19:21 Like, I bet I can do that in two hours, you know, and it becomes kind of a game as well.

00:19:24 It's becoming like watching series.

00:19:27 It's kind of relaxing.

00:19:28 And yeah, the more you build, the more projects you have and the more features or stuff you

00:19:33 want to add or fix.

00:19:34 So yeah, it's kind of a lost game.

00:19:37 For sure.

00:19:39 All right.

00:19:39 So let's talk about some of these particular challenges.

00:19:43 You guys did 100 days of code.

00:19:45 So 100 scripts, as you described it.

00:19:47 And I asked you to pick 10 that you thought would be fun to talk about.

00:19:50 So this is just a 10% sampling, right?

00:19:53 This is not exhaustive by any measure.

00:19:55 So Julian, want to start on day 51?

00:19:58 Okay.

00:19:59 So day 51, I chose this one because it had to do with the request module, which was one

00:20:04 of the first modules I dealt with when I started learning.

00:20:07 Because I wanted to scrape websites, right?

00:20:09 And that was the way to get into it.

00:20:11 One thing I remember back in the day that I was struggling with was how to deal with a

00:20:16 website that had a login prompt.

00:20:17 I was like, well, this is impossible.

00:20:19 You can't do it.

00:20:20 There's no way.

00:20:20 Yeah.

00:20:20 You can't do a get against that because it redirects you 301 over to this login page.

00:20:25 Forget it.

00:20:25 Exactly.

00:20:26 Screw that.

00:20:26 I don't need that data.

00:20:28 Who needs it?

00:20:29 So I was struggling.

00:20:31 And again, for this 100 days, probably one of the complex things was coming up with ideas.

00:20:36 And just I remembered that pain point and I Googled it and I found out, oh, you can actually

00:20:41 log in with requests.

00:20:42 What the hell is this?

00:20:43 You know, so I can't believe it.

00:20:45 So then I started playing with it.

00:20:46 And next thing you know, I was writing a script to log into my freecycle.org account, which

00:20:52 is like an eBay thing, but everything's free.

00:20:56 And I was able to log into it, scrape my current ads and then save them, you know, report that

00:21:02 data and save it back to a database, you know, and it was just a simple script.

00:21:07 But the challenge of logging into something using a script was just mind blowing for me.

00:21:12 That's really cool.

00:21:13 So I, you know, I know that you can do that with requests.

00:21:16 I know you can do posts and puts and deletes and all those kinds of things and headers, but

00:21:21 maybe walk us through what is the process of like carrying over the session, right?

00:21:25 So you go find the logging page, you put the body of like username, password, you do a

00:21:30 post.

00:21:31 Would you get back a cookie and have to carry that over to the next request?

00:21:36 Do you remember how that went?

00:21:37 Yeah.

00:21:37 Essentially you have this payload as it's called, and you have to input your username and password

00:21:42 into it and you do a post.

00:21:44 The crazy thing here was that you had to investigate the URLs that you need to send this data to because

00:21:51 you can't just send it to the page.

00:21:53 You have to go into the background and look for their, I guess their login post request

00:21:58 URL.

00:21:58 And then I was able to send that data, that payload data to that using requests.

00:22:06 And then you get back your session so you can log in.

00:22:09 And it was, it's just crazy.

00:22:11 That's pretty awesome.

00:22:12 Nice.

00:22:13 Okay.

00:22:13 That one sounds like a really fun one.

00:22:15 And it's like, you took this idea that you kind of already had more or less down like request,

00:22:19 beautiful soup, CSS selectors.

00:22:21 We're going to do this.

00:22:22 Oh, wait, here's this next level that I need to like jump over.

00:22:26 And, you know, it's really cool.

00:22:27 He took one of these challenges and opportunity to do that.

00:22:30 Yeah.

00:22:31 Yeah.

00:22:31 It was, it was awesome.

00:22:32 And then, you know, you, you learn stuff along the way.

00:22:35 So then it was quite simple to take that data and chuck it into a SQL light database, you

00:22:40 know, nice and easy.

00:22:41 Yeah, definitely.

00:22:42 That's nice and easy for sure.

00:22:44 Bob, how about yours?

00:22:46 What one do you want to talk about?

00:22:48 The very first script I did and day number one, and we were still full of ideas.

00:22:52 So there's a handle at Python underscore tip.

00:22:56 You might have heard of them.

00:22:58 They do a daily tweet of a trick or tip in Python, pretty scientific, but they have some very good

00:23:05 tips and get a great following.

00:23:07 The way you submit tips to them is via a Google doc, which goes into a spreadsheet or CSV downloadable.

00:23:16 But there was not really a way to see if, if a tip was already submitted.

00:23:20 So you don't want to clutter their database or spreadsheet with duplicate tips.

00:23:25 So I made a little script to just probably request, get the CSV, which is just a public URL, parse

00:23:34 it in some data structure and just from the command line, you give it one or more strings.

00:23:38 And then it's just a little CLI script.

00:23:43 And it then tells you if the string you're looking for, it shows you the tips that has that string in them.

00:23:49 So you can just say, oh, OK, they have like already five Ether tools tips.

00:23:53 The one I'm about to submit is pretty similar, so I don't do it.

00:23:56 And the fun thing is, right, exactly.

00:23:59 That was also a nice example of like meeting other developers because then we reached out

00:24:04 to them, hey, make this script.

00:24:05 This can be helpful for you.

00:24:07 And then they, at the submit form, they then linked to the script that people could download

00:24:12 that script.

00:24:12 I even made a one-liner wrapper that you can do it with a bash, Wget or whatever.

00:24:17 Just do one command, even if you don't have the script locally.

00:24:20 And yeah, they linked to it.

00:24:22 So it was a little bit also for the community if somebody wanted to use that.

00:24:27 Yeah.

00:24:28 And then we stayed in touch.

00:24:29 And later we reached out to Python tip again to do more, to actually associate two code challenges

00:24:36 to the great collection of tips they have.

00:24:39 So that was kind of a nice script, but also like meeting other developers.

00:24:44 Yeah.

00:24:44 I think the ability to reach out to people and form these connections is really powerful.

00:24:50 You know, that's sort of because GitHub makes it so easy, right?

00:24:55 Like it's super easy to connect with people and things like Twitter and so on.

00:24:59 It's always been there, but it's really great.

00:25:01 And it's like one afternoon of work or something.

00:25:05 You've got this little script and now you've got this connection with someone else doing cool,

00:25:10 similar stuff, right?

00:25:11 Yeah.

00:25:11 Yeah, that's awesome.

00:25:12 Yeah, for sure.

00:25:13 Julian, take us back to day 25.

00:25:15 All right.

00:25:16 So we're going backwards.

00:25:16 You're talking about SQLite before, yeah?

00:25:18 Yeah, yeah.

00:25:20 So this one, one of the first things I learned with the whole 100 days thing was to use SQLite.

00:25:25 So over the years, I remember seeing people using SQL databases.

00:25:29 I'm going, I have no idea what I'm looking at here.

00:25:32 You guys must be.

00:25:34 Yeah, it's so painful to set up and I need a server and the credentials and come on.

00:25:38 Yeah, exactly.

00:25:40 I don't have time for that.

00:25:41 No.

00:25:41 It was always one thing that I wanted to do.

00:25:44 You know, I saw it and I thought this must be such an amazing skill to have.

00:25:47 These people are wizards.

00:25:48 I don't know how they do it, you know?

00:25:49 And so I learned SQLite 3 using Python and just starting off nice and simple database and

00:25:56 names, you know, the usual stuff you might start off with.

00:25:59 But then as I was making more things where I wanted to store that data, I was getting really

00:26:04 annoyed that I had to keep setting up this database manually.

00:26:08 And this is one of my favorite things about the 100 days is that I ended up creating a whole

00:26:13 bunch of little scripts that automate these tiny little repetitive processes.

00:26:18 And this is one of them.

00:26:19 So day 25, I created a script that generates a test SQLite database.

00:26:27 So the sort of Python code.

00:26:29 See, I've prepared now.

00:26:30 I've got it up here on the screen.

00:26:31 The Python for the sort of generic database format that I might like with, say, three text

00:26:38 columns and one integer column.

00:26:40 That was just a very generic test one that I was creating.

00:26:43 And this will create that.

00:26:45 You just run this command and it prompts you to ask for the name of your database.

00:26:49 And that's it.

00:26:50 Just creates it.

00:26:51 Oh, nice.

00:26:52 Yeah, that's how I started it.

00:26:53 So I have expanded it.

00:26:55 I haven't updated the code on GitHub.

00:26:56 Shame on me.

00:26:57 Where it asks you then to name your columns and the name of your table.

00:27:01 So it walks you through a little almost wizard to set it up.

00:27:05 So that was that one.

00:27:07 It was actually a lot of fun because then after that, I could just use that every time.

00:27:11 Yeah, this is one of the harder things to work in with SQLite is if you map something

00:27:15 like SQLAlchemy to it, then you can just say, you know, create all tables right on the

00:27:21 models you're mapping and it just does it.

00:27:23 But if you don't want to use that, you're like, oh, well, I got to do all the DDL like

00:27:27 creation syntax and all that kind of stuff.

00:27:30 So this is a nice little thing to have.

00:27:32 Yeah, it was very useful.

00:27:33 The SQLAlchemy that's coming next.

00:27:36 That's a good one.

00:27:38 And by the way, if you're listening and you want to follow along, I'll have the link to

00:27:42 your GitHub repository.

00:27:45 That's the 100 days of code.

00:27:47 So every one of these is just numbered by day.

00:27:50 So it's github.com/pybytes, P-Y-B-I-T-S, 100 days of slash 100 days of code.

00:27:56 So you guys can follow along.

00:27:58 It has the numbers right there.

00:27:59 All right, Bob.

00:28:00 One of the challenges, if you want to do any sort of testing is external dependencies, right?

00:28:05 Especially APIs.

00:28:06 And if they're like rate limited or something, it's even worse.

00:28:09 Or if they're going to make modifying changes like post something.

00:28:12 So your number 81 has some cool examples of how to get around this, right?

00:28:16 Exactly.

00:28:17 That's the problem with external APIs.

00:28:19 You don't want to call them over and over again when you run your test.

00:28:23 So I spent one day looking at unit test mock patch to mock test the T-PY API.

00:28:32 And yeah, I managed to do a little script to populate some fake data and do the patch object

00:28:40 decorator.

00:28:41 Kind of fake the call to the T-PY API.

00:28:45 And yeah, that worked out pretty well.

00:28:47 It was not a critical script, but that's really where you do the coding just for the sake of

00:28:52 practice.

00:28:53 Because the original script was just a funny who tweeted what.

00:28:57 Because somebody on Twitter asked like, okay, so whom I'm talking to?

00:29:02 It's PyBites.

00:29:03 Is this Julian or Bob?

00:29:04 So we made a little script that based on the location of the tweet, it would then return

00:29:09 Bob or Julian because Julian is in Australia and Spain.

00:29:12 Oh, yeah, that's awesome.

00:29:14 So you can just test by the geolocation.

00:29:16 Nice.

00:29:17 Exactly.

00:29:17 So I took this example to show that you can just go like random stuff.

00:29:22 It can be funny and just get practice.

00:29:25 But then who tweeted script then actually raised this second need to practice mocking and how

00:29:33 to test an external API.

00:29:34 So that was then a second script.

00:29:35 So one script follows the other.

00:29:37 So that's the nice thing.

00:29:38 Just get started.

00:29:39 And yeah, you might be afraid that you don't get to the 100, but you will.

00:29:44 Yeah, that's awesome.

00:29:46 This portion of Talk Python To Me was brought to you by GoCD.

00:29:49 GoCD is an on-premise, open source, continuous delivery tool to help you get better visibility

00:29:55 into and control of your team's deployments.

00:29:58 With GoCD's comprehensive pipeline modeling, you can model complex workflows for multiple

00:30:03 teams with ease.

00:30:05 And GoCD's value stream map lets you track changes from commit to deploy at a glance.

00:30:10 Say goodbye to deployment panic and hello to consistent, predictable deliveries.

00:30:14 We all know that continuous integration is super important to the code quality of your applications.

00:30:19 Choose the open source local CI server, GoCD.

00:30:23 Learn more at talkpython.fm/GoCD.

00:30:26 That's talkpython.fm/GoCD.

00:30:29 So maybe really quickly tell people about the patch.object decorator.

00:30:34 So this is a decorator that you can put on any block of code, but typically maybe write

00:30:40 on a particular unit test method.

00:30:42 Yes.

00:30:43 And it will reach deep down inside and change the implementation of some part of probably

00:30:49 that API or really whatever you pointed out, right?

00:30:51 Like time, for example.

00:30:52 Yes.

00:30:53 So it has been a while this script, but the decorator wraps a unit test method and it calls

00:31:00 the CPI API, so the original method.

00:31:02 But you're kind of replacing the original get status method of that API with, you give it a

00:31:09 return value, which is then the fake data defined in the main body of the script.

00:31:13 So it's like I'm faking calling that API, returning my own data, and I'm not making the network

00:31:20 call.

00:31:20 That's basically what it's doing.

00:31:22 Yeah, that's super cool.

00:31:23 Yeah.

00:31:24 Yeah.

00:31:24 Very nice.

00:31:24 Let's see.

00:31:25 Next up, Julian, Word Scramble.

00:31:27 Tell us about the Word Scramble one.

00:31:29 All right.

00:31:29 So let me just say a quick disclaimer.

00:31:31 I'm not a cheater at Words with Friends, but I may have used this one.

00:31:36 But if one were to.

00:31:38 But if someone was to play Words with Friends, this might be helpful.

00:31:42 So I remember, you know, back in the day, playing Words with Friends a lot.

00:31:46 There were people who would use these little apps on their iPhone to put the letters in

00:31:52 and it would unscramble that into a whole dictionary list of possibilities.

00:31:57 Right.

00:31:58 And that was the inspiration for this.

00:32:00 Not that I ever used one of those.

00:32:02 Right.

00:32:02 That would be wrong.

00:32:03 You shouldn't do that.

00:32:04 So if I've ever beaten anyone with Words with Friends, I wasn't using this.

00:32:08 So the idea is that it's exactly just that.

00:32:11 I just Googled a standard dictionary.txt, just the whole dictionary and text file.

00:32:17 And yeah, I used itatools permutations to then read in the words that you will enter into this app and compare it to the dictionary and then come up with whatever valid words you could make out of that series of letters that you enter.

00:32:36 And that was it.

00:32:36 It's simple in concept.

00:32:38 It actually took me a while.

00:32:40 I ended up calling Bob on this one and saying, oh, man, what am I doing wrong?

00:32:44 You know, and I showed him the code.

00:32:46 And this is the beauty of the whole PyBytes relationship, right?

00:32:49 And I told you, like, AetherTools, permutations.

00:32:51 Dude, you're growing.

00:32:53 I mean, look where you are.

00:32:56 This is awesome.

00:32:56 Yeah, this is super cool.

00:32:59 It would have been an ugly for loop, I think, when I started.

00:33:02 Yeah, I think that's one of the things that you have to learn as you get better in Python is I probably could implement this algorithm or I could probably pip install this algorithm.

00:33:13 So let's do that instead.

00:33:15 I mean, I know AetherTools is built in.

00:33:16 But yeah, just knowing the stuff that you can use, like the pre-built things like AetherTools permutations, rather than going, well, how do I implement a permutation?

00:33:25 Well, let me think about like a nested loop, right?

00:33:27 Yeah, well, on that, one of the worst things is you'll spend time on something.

00:33:31 And then 10 minutes later or even 10 days later, someone like Bob goes, why don't you just use permutations?

00:33:37 And you'll be like, oh, there's a permutations.

00:33:41 This existed?

00:33:42 Damn it.

00:33:43 Yeah, exactly.

00:33:46 That's never ending because even if you think you have some Pythonic tricks up your sleeves, there's always more.

00:33:53 There's so many constructs still learning.

00:33:56 Sure, there's a bunch built in.

00:33:57 I feel like a lot of them live in AetherTools and Functools and those sorts of things.

00:34:01 But just also, there's 120,000 plus on PyPI, right?

00:34:06 Like if you run out of standard library tricks, there's a few more out there.

00:34:09 Indeed.

00:34:09 Yeah.

00:34:10 That's awesome.

00:34:10 All right.

00:34:11 So the next one up is using a pillow to create images in Python.

00:34:16 Bob, tell us about that.

00:34:18 Yeah, I picked this one because it's a tool that we still use today.

00:34:22 Just, again, a simple prototype.

00:34:24 Just give it a URL and some text.

00:34:27 Downloads the URL image.

00:34:28 It puts it on a canvas.

00:34:29 And it puts your text on top of it, which makes a reasonable banner.

00:34:34 It's not like Photoshop art, but it's good enough.

00:34:38 And, yeah, I think, or this script or some code channels morphed into it.

00:34:44 But we start, we're still using this to make PyBytes banners for new code challenges articles.

00:34:50 Oh, nice.

00:34:51 So you can like auto generate like day 31, day 32, day 33 for each one.

00:34:57 That's the thing.

00:34:58 I think later we wrapped it in some Flask GUI.

00:35:00 So we just have a form.

00:35:02 And we give it the text and the background image URL there.

00:35:07 And it makes the banner there.

00:35:09 And you can just click download or even download it directly to your.

00:35:13 So I make a banner in 10 seconds now or less.

00:35:16 That's awesome.

00:35:16 That's way better than like living in Photoshop all the time.

00:35:19 Yeah, we don't want that.

00:35:20 We want to go.

00:35:21 Yeah, yeah, for sure.

00:35:22 Yeah, I think that's really cool.

00:35:24 I mean, I had a similar experience recently when I wanted to make all the, I wanted to

00:35:29 create audio versions of my online courses.

00:35:32 So how do you take MP4s, convert them to MP3s?

00:35:36 Then how do you go and put like, this is the title.

00:35:39 This is the album.

00:35:40 This is this track in this album.

00:35:42 And, you know, you find something cool like Pillow or, you know, it's not actually Pillow,

00:35:47 but like there's just these like little libraries that you wouldn't necessarily think is easy

00:35:51 to work with.

00:35:52 Like it doesn't seem like it'd be that easy to work with images, but you know, here

00:35:55 it is.

00:35:56 Right.

00:35:56 Same thing for like IDX tags and MP3s.

00:35:58 Very cool.

00:35:59 Yeah.

00:36:00 So Julian, what about this steam scraper?

00:36:03 Okay.

00:36:03 So I love games.

00:36:05 And that's probably one of the worst things about PyBytes is that I have less gaming time

00:36:09 than ever.

00:36:10 This was actually a fun project for me.

00:36:13 It actually spanned a few days and it was made up of a few scripts that I made throughout

00:36:17 this entire series.

00:36:20 This one I still use.

00:36:21 What it does is, and I know someone out there is going to be listening and say, why don't

00:36:25 you just use the RSS feed?

00:36:27 Well, who cares about the RSS?

00:36:29 The whole point is to make this, right?

00:36:31 What I did was I scraped the RSS feed using this scraper.

00:36:37 And this is Steam.com, store.steampad, you know, the Valve game service.

00:36:41 And I scraped the RSS feed for all the latest games.

00:36:45 Either way, I was scraping that file.

00:36:47 I was passing that file, sorry, using a feed parser as well to then get all of the games,

00:36:54 just the titles and the URLs, dump that into a database.

00:36:59 Okay, so that was like one section that took me a day or two to wrap my head around because

00:37:03 I'd never used feed parser at this point.

00:37:05 Then there was the whole emailing myself the notification that these games were released,

00:37:11 you know.

00:37:12 So I'd written an email script at the start of this entire series.

00:37:15 And then the catch was I was spamming myself with every new game multiple times.

00:37:22 So I'm going, well, I already know that game's released.

00:37:25 I've already bought that game.

00:37:27 I don't want to be told again.

00:37:28 So then I spoke with Bob and he said, oh, you know, I've conquered this problem before.

00:37:32 I've encountered it just at a zero one flag.

00:37:35 And that was it.

00:37:37 I just mind blown, you know, just I was like, oh, sweet.

00:37:40 So then I, in the database, added a new column.

00:37:43 Every existing game, every time something's added, it's given a flag of zero.

00:37:47 And then once it's been emailed out, it then gets a flag of one.

00:37:51 And then you only email out the zeros.

00:37:53 Yeah, that's actually really, really cool.

00:37:55 So tell me about feed parser.

00:37:57 That was actually complex for me because I'd never had to pass XML before.

00:38:03 And so trying to drill your way down through these nested XML tags just did my head in.

00:38:10 And I remember crying one night, huddled in a corner, you know, with a blanket over me.

00:38:16 The namespaces.

00:38:18 The namespaces.

00:38:20 Exactly.

00:38:20 And, you know, Bob called me and he said, what's wrong, my son?

00:38:24 How can I help you?

00:38:26 You know, and I talked to him about it.

00:38:29 And he showed me the name Tuple.

00:38:32 And at that point, I'd never used the name Tuple.

00:38:35 So this is what I mean.

00:38:36 You know, Bob knows these things and I'm still grasping at straws sometimes.

00:38:40 So I was like, what's the name Tuple?

00:38:43 And he walked me through it.

00:38:44 You know, I remember this phone call was about half an hour as he's telling me all these things.

00:38:48 And I'm like, this is amazing.

00:38:49 And he'd already had a script that used name Tuple.

00:38:51 So he used that as an example.

00:38:53 And then I was able to use that, find the correct names and links and then save the data.

00:39:00 And, you know, my code, I was hacking my way down.

00:39:03 And it just became like five lines as opposed to, you know, 20 or 30.

00:39:08 Yeah.

00:39:08 And you don't need to know all the XPath expressions to search through it.

00:39:11 This is really awesome.

00:39:12 So FeedParser just understands RSS1, RSS2, Atom, all that.

00:39:18 And you could just ask it questions after it loads up an XML feed.

00:39:21 Yeah, pretty much.

00:39:22 Exactly right.

00:39:23 I was just looking for those tag names and it just knew it.

00:39:27 It just found it.

00:39:28 It was able to search that stuff for me.

00:39:30 So I loved it.

00:39:31 Oh, that's sweet.

00:39:31 All right.

00:39:32 So the next one, you know what I enjoyed talking?

00:39:35 I mean, I enjoy a lot of things about talking to you guys.

00:39:37 But one of the things that's really cool about going through this is like, I didn't know about FeastParser.

00:39:40 I just, you know, import elementary and just go after with XPath.

00:39:43 Like, apparently I don't need to do that anymore.

00:39:46 That's really, really cool.

00:39:47 And so, I mean, it's not a huge deal for me, but it could, if it was just automatic, that would be better.

00:39:52 And I think for the next one as well, I've never played with PyGitHub, but apparently on day 84, you did, right, Bob?

00:39:59 Yeah.

00:40:00 All right.

00:40:00 What is this one?

00:40:01 Simple prototype again, just a little script to functions to get a user object from the GitHub API and show stats, all the stats for all his or her repos.

00:40:13 So the stars and the forks.

00:40:15 Yeah.

00:40:16 The funny thing is, as you say, you raise awareness to yourself that that library exists.

00:40:22 And the funny thing is, now that developing something bigger for our code challenges, where I do use a lot of GitHub integration, I went back to that library again.

00:40:34 Yeah, that's really cool.

00:40:35 I mean, GitHub does have like a straight up HTTP JSON API, but having a wrapper over top of it.

00:40:41 So you just say get user or, you know, repo.fork.

00:40:45 That is so much nicer than actually parsing the dictionaries.

00:40:50 I do have to say that recent acquire PDB skills helped me because there was, now that I'm digging deeper into the GitHub API, the PyGitHub, there was not, documentation was a bit limited.

00:41:03 But that was actually also a blessing to inspect objects with PDB set trace and really look into it.

00:41:10 I mean, GitHub APIs is huge.

00:41:12 Yeah, that's pretty massive.

00:41:13 And you can do a lot of fun stuff with it.

00:41:15 So highly recommend it.

00:41:17 Yeah, very cool.

00:41:17 All right, let's talk about some Flask apps that you worked on, Julian.

00:41:23 All right, so you probably know by now, Mike, I'm a bit of a Flask addict.

00:41:27 I can't get over it.

00:41:28 So this was something, so for a long time, I wanted to be able to make web apps.

00:41:33 And I had no idea.

00:41:34 And I thought it was magic how people were able to have this script turn into a web page.

00:41:38 And I never understood how they did it.

00:41:40 It scared me approaching it.

00:41:43 And Bob pointed me at Flask and he said, try this.

00:41:47 And first of all, I went through the Flask documentation and I just melted.

00:41:51 I was like, what is this?

00:41:52 This is so detailed and complex.

00:41:54 This is crazy.

00:41:55 This is sort of route maps and methods and views and templates and template language and models.

00:42:01 And ah.

00:42:01 Exactly.

00:42:02 Exactly.

00:42:03 This whole new language.

00:42:04 It's like learning a whole new programming language.

00:42:06 And I ended up going through 20 different sources.

00:42:09 You know, I was checking YouTube.

00:42:11 I was Googling.

00:42:12 Like three or four new languages, right?

00:42:13 It was just crazy.

00:42:15 So I said, this is something I have to learn.

00:42:17 And I ended up writing, I think, three or four Flask apps as part of this hundred days.

00:42:23 So I won't go into each one in too much detail.

00:42:26 But every one of them was something different.

00:42:29 It was like a new sort of Flask skill that I hadn't dealt with before.

00:42:32 So my three favorite that I wrote, I wrote a BMI calculator.

00:42:36 So that's body mass index.

00:42:37 Just a simple calculation, right?

00:42:39 On the command line.

00:42:41 But to turn that into a workable form on a website that someone can enter in the data.

00:42:47 And then it actually shows that result, your BMI, on the same page.

00:42:53 Like that, that was difficult for me.

00:42:55 You know, I was just thinking, how do I do this?

00:42:58 So that was pretty cool.

00:43:00 So that involved having to have a div below the form.

00:43:05 So the form entry field is quite simple.

00:43:07 But there's a hidden div that doesn't appear unless a certain variable exists.

00:43:13 And it was actually really cool.

00:43:15 I felt like I was a magician.

00:43:17 I felt like a hacker.

00:43:18 I was like, man, this is cool.

00:43:19 I love building web apps like that.

00:43:21 It takes a while to put the pieces together.

00:43:23 But once you have them, you're like, whoa, look at it work.

00:43:25 Exactly.

00:43:26 It's mesmerizing.

00:43:26 I still use it, even though I don't care about my BMI.

00:43:29 I just do it every now and then.

00:43:31 Another one was a pay calculator.

00:43:34 You can tell I care about my pay, right?

00:43:36 No, just that the whole overtime thing that Bob helped me with a year and a half ago.

00:43:40 I wanted to calculate how much money, if you work X many hours at this rate, how much it makes.

00:43:46 I thought that's a simple use case.

00:43:48 The cool part is that it uses Flask sessions.

00:43:51 So it saves your hourly rate as a session object.

00:43:56 And then you can keep using that session object to calculate different hours.

00:44:01 You don't have to enter it in every time.

00:44:03 And yeah, and to test it out, I had the first page as a way you enter it in and it's saved as a session object.

00:44:10 And the second page.

00:44:12 So when you browse to the second page, the session object carries over.

00:44:17 And that was the challenge for this specific app.

00:44:20 So that was really cool.

00:44:21 And the last one was one of my favorites because it was the first Flask app that I wrote that uses an external API.

00:44:28 Actually, was it an external API?

00:44:30 No, I think it was a time zone list.

00:44:33 Either way, it was it imports every time zone on the planet and then populates a pull down menu with it.

00:44:41 So then you choose that time zone and it tells you what the current time is in that country or in that space compared to your current time.

00:44:48 So, yeah, it was actually really, really cool.

00:44:51 I enjoyed that.

00:44:52 That was difficult populating that list with data from some other function.

00:44:57 So that was the challenge for this one.

00:44:59 Yeah, yeah.

00:44:59 That sounds really cool.

00:45:00 Very, very nice.

00:45:01 And obviously that love of Flask carried on over after this finished and that's how I got started with the Flask course.

00:45:09 Yeah, exactly.

00:45:09 We'll definitely talk a little more about that at the end.

00:45:12 That's awesome.

00:45:12 So last one, Bob.

00:45:14 Let's talk about some automation.

00:45:16 Autogen, I don't know.

00:45:17 Pelican, I know.

00:45:18 Slack, I know, but I've never done anything with it.

00:45:20 Tell us about all these things.

00:45:21 Yeah, I couldn't choose.

00:45:22 So I put them all under the automation.

00:45:24 I'm going to automate all the things, just all of them.

00:45:26 Automation buckets.

00:45:28 So to start with, so it was funny because with the 100 days, you do a tweet of your progress every day.

00:45:36 So that was the first common thing to automate, to have it reach out to our log file on the GitHub repo, read in a day, and automatically tweet what's in there.

00:45:47 Which also put a bit of pressure on us because we had a bit of pressure on us because we had this daily deadline at 22.43 p.m.

00:45:53 The bot's going to get there.

00:45:54 The bot's going to get there.

00:45:55 The bot's going to get there quick.

00:45:56 The bot is going to get us.

00:45:57 It's going to get the text.

00:45:58 If it's blank, I have to delete the tweet.

00:46:00 It's not a shame, but it's a shame.

00:46:03 So it put actually pressure on us.

00:46:06 But yeah, we saved a lot of time with that.

00:46:08 There were Slack bots.

00:46:09 So for example, a neat tool that could actually help people in marketing.

00:46:14 When your domain gets mentioned on Twitter, it gets posted to a Slack channel.

00:46:19 So I mean, if you get retweeted or stuff, you notice it in notification.

00:46:23 But if somebody just tweets your URL or mentions your URL in any sense, you don't.

00:46:28 Right.

00:46:28 And that happens a lot if somebody just discovers like a page or something you've done that's cool.

00:46:33 And they just shared on Twitter.

00:46:34 They might not even know about your Twitter account or forget to put it in there.

00:46:37 So yeah, you'll find a lot of stuff if you search for your domain outside of your Twitter name.

00:46:42 Yeah.

00:46:43 So we see that all on Slack now.

00:46:44 Pelican.

00:46:45 Yeah, we write some articles and we have quite some entries.

00:46:49 So I made a little command line tool to just do some inputs and ask some questions about topic and tags.

00:46:57 And then generates a markdown file with the right formatting, which again,

00:47:02 saves some time off every time we have to write a post.

00:47:04 Yeah, Slack is really cool.

00:47:06 We have a challenge going on now to build a chatbot.

00:47:10 And the most original submission we'll get.

00:47:12 Actually, we buy them a book.

00:47:14 We're really fond of chatbots.

00:47:17 And one I wanted to mention, that idea that grew from the 100 days was a karma bot.

00:47:22 So when you're in Slack, you do like, HipChat uses it.

00:47:26 When you do like user or subject plus plus or minus minus, a karma bot just keeps track of the score.

00:47:33 And that was all kind of stuff, prototypes that were born out of the 100 days.

00:47:38 Wow.

00:47:38 That's really cool.

00:47:39 Yeah.

00:47:39 A lot of stuff came out of there.

00:47:40 All right.

00:47:41 So that's one tenth of what you guys learned.

00:47:43 And I feel like that was super valuable just talking through that with you.

00:47:46 So that's pretty awesome.

00:47:48 Julian, do you recommend people try this 100 day code challenge?

00:47:51 Or is it like too intense?

00:47:53 Is it like a P90X or whatever?

00:47:56 No, no.

00:47:56 I totally think you need to do this.

00:47:59 If you're interested in programming at any way, shape, or form, you should totally do it.

00:48:04 The only advice I'll give is that it's tough.

00:48:08 There are days where you're going to want to go out with your mates.

00:48:11 And you're going to come home at 11 p.m.

00:48:13 And you'll be probably drunk.

00:48:15 And you'll be like, I have to write some code.

00:48:17 And you'll have to prep.

00:48:20 Maybe do more the day before.

00:48:23 This whole script a day thing was over the top.

00:48:26 So it was something I think we may do one day, again, if we're crazy.

00:48:31 But the whole just building a pattern and the repetition to make you learn something every day.

00:48:39 So this we apply to other things as well.

00:48:41 It's not just 100 days of code now for us.

00:48:43 But the main thing is if you are married and you have kids, please take that into account.

00:48:50 Because that was one of the biggest hurdles with us is that it's like you'll have family time and then you'll have to go, I've got to go write a script.

00:48:58 They don't understand.

00:48:59 It's not their thing, right?

00:49:00 So you have to run away.

00:49:01 You have to.

00:49:02 That was the hardest thing to balance, to be honest.

00:49:04 So if you can plan, tell your better half, look, here's what I'm doing.

00:49:08 Work it out.

00:49:08 Even plan a time of the year where work isn't too crazy.

00:49:12 But plan it in advance.

00:49:13 Don't just jump on it because it can be pretty taxing.

00:49:16 Yeah, of course.

00:49:17 You know, one thing that comes to mind while you're speaking is maybe this doesn't have to be outside work, right?

00:49:22 Maybe you could get an hour of work at your job saying, hey, dear manager, I'm trying to learn this thing.

00:49:29 And, you know, I have this training budget.

00:49:30 Could you just give me time instead of, you know, a class with a bunch of boring slides anyway?

00:49:35 Like, I'll just do this.

00:49:36 That's an amazing.

00:49:37 Or something along those lines, right?

00:49:39 That's a really good idea.

00:49:40 I'm going to take that to work and try that.

00:49:43 Nice.

00:49:43 Yeah.

00:49:43 That's a good.

00:49:44 Thanks, man.

00:49:45 You should.

00:49:45 Let us know how it goes.

00:49:46 Yeah.

00:49:47 It's a good return on investment because you're really practicing.

00:49:51 And to really to learn the program, it requires a lot of hours of deliberate practice.

00:49:57 And 100 Days of Code does that.

00:49:59 Yeah.

00:50:00 I feel like you guys must have got a lot of confidence and, like, capability with other libraries that you otherwise wouldn't have touched.

00:50:07 Exactly.

00:50:07 Two, right?

00:50:09 Yeah.

00:50:09 Very cool.

00:50:09 Okay.

00:50:10 So, you also have another one.

00:50:11 And I don't even know where you are in the timing of it.

00:50:14 But it went around Django specifically, not just Python in general.

00:50:19 Tell us about that.

00:50:19 Yeah.

00:50:20 So, after 100 Days of Code, we were kind of a bit tired.

00:50:24 But, nevertheless, we started a new 100 Days.

00:50:26 It was a bit looser.

00:50:28 So, we didn't do, like, a daily tweet anymore because, I mean, Django apps are typically, like, long, stretched projects.

00:50:36 You have to do something like Django page view per day or an API endpoint per day or something.

00:50:42 We weren't, like, that strict on it.

00:50:45 But, yeah, we did manage to do two or three apps.

00:50:48 For example, we made a lot of things like that.

00:50:49 So, we made a lot of things like that.

00:50:49 So, we made a lot of things like that.

00:50:49 So, we made a lot of things like that.

00:50:49 So, we made a lot of things like that.

00:50:49 So, we made a lot of things like that.

00:50:49 So, we made a lot of things like that.

00:50:49 So, we made a lot of things like that.

00:50:50 So, we made a lot of things like that.

00:50:50 So, we made a lot of things like that.

00:50:51 So, we made a lot of things like that.

00:50:52 So, we made a lot of things like that.

00:50:52 So, we made a lot of things like that.

00:50:53 So, we made a lot of things like that.

00:50:54 So, we made a lot of things like that.

00:50:55 So, we made a lot of things like that.

00:50:56 So, we made a lot of things like that.

00:50:57 So, we made a lot of things like that.

00:50:58 So, we made a lot of things like that.

00:50:59 So, we made a lot of things like that.

00:51:00 So, we made a lot of things like that.

00:51:01 So, we made a lot of things like that.

00:51:02 So, we made a lot of things like that.

00:51:03 So, we made a lot of things like that.

00:51:04 So, we made a lot of things like that.

00:51:05 So, we made a lot of things like that.

00:51:06 So, we made a lot of things like that.

00:51:07 So, we made a lot of things like that.

00:51:08 So, we made a lot of things like that.

00:51:09 So, we made a lot of things like that.

00:51:10 So, we made a lot of things like that.

00:51:11 So, we made a lot of things like that.

00:51:12 So, we made a lot of things like that.

00:51:13 We made a lot of things like that.

00:51:14 So, we made a lot of things like that.

00:51:15 So, we made a lot of things like that.

00:51:16 So, we made a lot of things like that.

00:51:17 So, we made a lot of things like that.

00:51:18 So, we made a lot of things like that.

00:51:19 So, we made a lot of things like that.

00:51:20 So, we made a lot of things like that.

00:51:21 So, we made a lot of things like that.

00:51:22 So, we made a lot of things like that.

00:51:23 So, we made a lot of things like that.

00:51:24 So, we made a lot of things like that.

00:51:25 So, we made a lot of things like that.

00:51:26 So, we made a lot of things like that.

00:51:27 So, we made a lot of things like that.

00:51:28 So, we made a lot of things like that.

00:51:29 So, we made a lot of things like that.

00:51:30 Yeah.

00:51:31 Still, we got quite some stuff done.

00:51:33 Yeah.

00:51:33 That's awesome.

00:51:34 And so, this one is also done?

00:51:35 Yeah.

00:51:36 It's done.

00:51:37 Yeah.

00:51:38 I mean, the deadline is over.

00:51:39 And now, we take a little bit of rest to prepare for another.

00:51:41 Rest.

00:51:42 Come on.

00:51:43 You got time for one and a half more this year.

00:51:45 Right.

00:51:46 Basically, we're focusing on our project.

00:51:47 Yeah.

00:51:48 He meant the rest framework.

00:51:49 That's what he meant.

00:51:50 That's right.

00:51:51 Right.

00:51:52 Django rest framework.

00:51:53 100 days of it.

00:51:54 Perfect.

00:51:55 Awesome framework.

00:51:56 Nice.

00:51:57 So, I think, you know, get a look at the time.

00:51:58 We'll probably just leave it here for this topic.

00:52:00 But I feel like this was super valuable.

00:52:02 Looking at the 10 you chose and talking about them, I can definitely see the value of doing

00:52:06 them.

00:52:07 And I've learned a few things myself.

00:52:08 So, you know, thanks for walking us through this.

00:52:10 Nice.

00:52:11 No worries.

00:52:12 Yeah.

00:52:13 Awesome.

00:52:14 So, before you guys get out of here, though, you have to face the two questions.

00:52:15 So, first of all, we'll start with you, Bob, I guess.

00:52:18 If you're going to write some Python code, what editor do you use?

00:52:21 Vim.

00:52:22 Vim.

00:52:23 All right.

00:52:24 On.

00:52:25 And notable PyPI package.

00:52:26 Play with 100 packages or modules in this whole thing.

00:52:29 So, probably found some cool ones.

00:52:30 Can we still say request?

00:52:31 You can still say request.

00:52:32 That's awesome.

00:52:33 Maybe for data analysis, I would say pandas.

00:52:35 We didn't really use it in 100 days, but it's an excellent tool to do any kind of data

00:52:41 analysis.

00:52:42 Yeah, absolutely.

00:52:43 All right, Julian.

00:52:44 Obviously, on the command line, it's going to be Vim.

00:52:46 And Bob, don't hate me, okay?

00:52:47 Please don't hate me.

00:52:48 On Windows, I actually use Notepad++.

00:52:51 And I love it.

00:52:52 I know.

00:52:53 It's crazy.

00:52:54 I've known some people that love Notepad++ as well.

00:52:56 Very cool.

00:52:57 And notable PyPI package.

00:52:58 Okay, so I'm going to just say two.

00:53:00 Obviously, Flask.

00:53:01 Well, okay, that's not PyPI.

00:53:02 All right.

00:53:03 Yeah, yeah, it's on there.

00:53:04 It's on there.

00:53:05 Is it?

00:53:06 Oh, okay.

00:53:07 Sorry, I thought you meant like a part of standard lib.

00:53:08 No, no.

00:53:09 Outside the standard lib.

00:53:10 External stuff.

00:53:11 There are probably two.

00:53:12 I won't go into that.

00:53:13 But actually, this is an interesting one because I'm pretty terrible at it.

00:53:17 pytest.

00:53:18 It was only in the past month that Bob was pushing me on this one, going, "You've got

00:53:21 to try this," you know?

00:53:22 And it just worked.

00:53:24 It's so easy to just get like boring and go, "Ah, just import, you know, unit test and just

00:53:30 use that it's right there.

00:53:31 Like, there's nothing to it, right?" And I was not very good at testing my own code and I'm still terrible at it.

00:53:36 But it was just this whole different way of looking at it.

00:53:39 So definitely pytest.

00:53:40 All right.

00:53:41 Oh, yeah.

00:53:42 Those are both very, very good ones.

00:53:43 Awesome.

00:53:44 All right, guys.

00:53:45 People are interested in this.

00:53:46 Like, how can they participate?

00:53:47 Maybe can they join like your community somehow to like sort of have some support while they

00:53:52 go through?

00:53:53 Or what do you think?

00:53:54 Bob, go first.

00:53:55 Yeah.

00:53:56 So PyBytes, video articles, co-channels, news, and projects.

00:53:59 If you really want to practice, I really recommend to go through the list of code challenges

00:54:05 we have.

00:54:06 We have 44 now, up until now.

00:54:08 And pick whatever you like and clone the repo or fork the repo and make your branch and start

00:54:15 trying to do these challenges.

00:54:16 We have seen people growing a lot.

00:54:18 They thought like, "Ah, I cannot do it." Then they did it.

00:54:21 Then they thought they would have some lame submission and they actually came up with solutions.

00:54:26 We were like, "Wow." First off, we were like, "Wow, I'm not even sure what it is."

00:54:32 You know?

00:54:33 So we were learning from them as well.

00:54:34 But it works.

00:54:35 It's incredible.

00:54:36 So really, people and ourselves too, we're really stretching ourselves through these code

00:54:40 challenges.

00:54:41 So that's really what I would recommend from our site.

00:54:45 Yeah, that's awesome.

00:54:46 Julian, how about you?

00:54:47 Yeah, so from a, I guess, from the beginner standpoint, for anyone listening, just stop

00:54:52 procrastinating and start coding.

00:54:54 It's literally learn by doing.

00:54:56 That's just the greatest way to do it.

00:54:58 And again, obviously a plug, you've got to try the code challenges.

00:55:01 They will force you to just to learn new things.

00:55:04 And because you're getting told in the challenges what you have to do and what you have to learn,

00:55:08 that's an even better way.

00:55:10 So do the 100 days of code challenge.

00:55:12 But the most important thing is to just start writing code.

00:55:16 That's it.

00:55:17 Awesome.

00:55:18 And speaking of writing some code, you started working with Flask.

00:55:22 You talked about how you fell in love with it.

00:55:23 You have a course on Udemy for Flask, right?

00:55:27 That's right.

00:55:28 Yeah, quickly tell people about it before we get out of here.

00:55:30 Yeah, just super quick.

00:55:31 It's a beginner's Flask course.

00:55:32 It is totally intended for beginners because, as I mentioned before, the Flask documentation,

00:55:37 trying to find and understand everything was quite difficult to piece it all together.

00:55:41 So I've made this course.

00:55:43 Bob and I have worked on it.

00:55:45 And it's just designed to really sell it in layman terms.

00:55:48 So if you don't understand, we walk you through all the steps to write your first Flask app,

00:55:53 get the basics down.

00:55:54 And we will expand this later as we go.

00:55:56 And we are working on more courses.

00:55:58 But this one is the way to get into it.

00:56:00 And it's actually really fun.

00:56:01 Feedback's been great.

00:56:02 And we've got a link for you, Mike, with a discount code for anyone listening.

00:56:07 Yeah, I see.

00:56:08 Right.

00:56:09 It's got the coupon code in there.

00:56:10 So I'll put that in the show notes and people just click it there and they get a discount

00:56:12 and you'll know it came from the podcast, which is awesome.

00:56:15 Cool.

00:56:16 All right, guys.

00:56:17 Well, thank you for doing this project and sharing all the stuff you do at PyBytes with

00:56:20 the community and now sharing it with everyone listening to the podcast.

00:56:23 No worries.

00:56:24 Thanks for having us, Mike.

00:56:25 You bet.

00:56:26 Bye.

00:56:27 Bye.

00:56:28 This has been another episode of Talk Python To Me.

00:56:31 Today's guests have been Bob Beldrbos and Julian Securia.

00:56:35 And this episode has been brought to you by Rollbar and GoCD.

00:56:39 Rollbar takes the pain out of errors.

00:56:41 They give you the context and insight you need to quickly locate and fix errors that might

00:56:46 have gone unnoticed until your users complain, of course.

00:56:49 As Talk Python To Me listeners, track a ridiculous number of errors for free at rollbar.com/talkpythontome.

00:56:56 GoCD is the on-premise open source continuous delivery server.

00:57:01 Want to improve your deployment workflow, but keep your code and builds in house?

00:57:05 Check out GoCD at talkpython.fm/gocd and take control over your process.

00:57:11 Are you or a colleague trying to learn Python?

00:57:13 Have you tried books and videos that just left you bored by covering topics point by point?

00:57:18 Well, check out my online course Python Jumpstart by Building 10 Apps at talkpython.fm/course

00:57:24 to experience a more engaging way to learn Python.

00:57:27 And if you're looking for something a little more advanced, try my Write Pythonic Code course

00:57:31 at talkpython.fm/pythonic.

00:57:33 Be sure to subscribe to the show.

00:57:36 Open your favorite podcatcher and search for Python.

00:57:39 We should be right at the top.

00:57:40 You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct RSS feed

00:57:47 at /rss on talkpython.fm.

00:57:49 This is your host, Michael Kennedy.

00:57:51 Thanks so much for listening.

00:57:52 I really appreciate it.

00:57:53 Now get out there and write some Python code.

00:57:56 Thank you.

00:58:04 Thank you.

