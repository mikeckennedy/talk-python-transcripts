WEBVTT

00:00:00.001 --> 00:00:04.260
What does it take to build a Python library that will be used by a large number of developers?

00:00:04.260 --> 00:00:06.680
This happens all the time in open source.

00:00:06.680 --> 00:00:09.280
Projects take off and become wildly successful.

00:00:09.280 --> 00:00:14.400
What if you could sit down with the developers using your library and see how they take to it?

00:00:14.400 --> 00:00:22.420
Well, over on the Azure team, Kate Olsewska and Johan Stenberg do incredible user testing for Azure's Python SDK.

00:00:22.420 --> 00:00:28.520
Just to give you a taste, imagine a room with a computer, a couple of developers unfamiliar with the API,

00:00:28.520 --> 00:00:31.060
a one-way mirror, and lots of feedback.

00:00:31.060 --> 00:00:38.940
This is Talk Python To Me, episode 251, recorded Monday, January 27th, 2020.

00:00:38.940 --> 00:00:57.560
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:00:57.560 --> 00:00:58.580
and the personalities.

00:00:58.580 --> 00:01:00.500
This is your host, Michael Kennedy.

00:01:00.500 --> 00:01:02.640
Follow me on Twitter, where I'm @mkennedy.

00:01:02.640 --> 00:01:06.400
Keep up with the show and listen to past episodes at talkpython.fm.

00:01:06.400 --> 00:01:08.820
And follow the show on Twitter via at Talk Python.

00:01:08.820 --> 00:01:12.460
This episode is brought to you by Springboard and Clubhouse.

00:01:12.460 --> 00:01:14.680
Please check out what they're offering during their segments.

00:01:14.680 --> 00:01:16.200
It really helps support the show.

00:01:16.200 --> 00:01:18.880
Kate, Johan, welcome to Talk Python To Me.

00:01:18.880 --> 00:01:19.240
Hi.

00:01:19.940 --> 00:01:20.500
Thank you.

00:01:20.500 --> 00:01:21.560
It's great to be here.

00:01:21.560 --> 00:01:23.200
Yeah, it's great to have you both on the show.

00:01:23.200 --> 00:01:30.280
I'm really excited to talk about creating Python APIs and how you communicate those and document

00:01:30.280 --> 00:01:31.420
them for Azure.

00:01:31.420 --> 00:01:34.800
Azure is so huge.

00:01:35.060 --> 00:01:38.320
And I haven't even done anything with Azure for a couple of weeks, probably.

00:01:38.320 --> 00:01:41.660
Maybe even a couple of months, counting some vacation time in there.

00:01:41.660 --> 00:01:44.040
And there's just so many things.

00:01:44.040 --> 00:01:45.880
So these libraries are super far reaching.

00:01:45.880 --> 00:01:48.540
So it's going to be fun to dig into all those, I think.

00:01:48.540 --> 00:01:51.480
Now, before we do, though, let's start with your stories.

00:01:51.480 --> 00:01:53.360
How do you all get into programming in Python?

00:01:53.360 --> 00:01:54.460
Kate, let's start with you first.

00:01:54.460 --> 00:01:55.040
Me first.

00:01:55.040 --> 00:01:55.720
Okay, sure.

00:01:56.080 --> 00:01:57.900
So my story is relatively short.

00:01:57.900 --> 00:02:04.080
I started with Python as the first language that I picked up in my first intro to programming

00:02:04.080 --> 00:02:04.540
class.

00:02:04.540 --> 00:02:06.600
And it kind of stuck with me throughout.

00:02:06.600 --> 00:02:07.200
Yeah, cool.

00:02:07.200 --> 00:02:10.780
And did you start out in computer science just planning to go down that path?

00:02:10.780 --> 00:02:11.920
Or did you study something else?

00:02:11.920 --> 00:02:13.580
I was initially studying economics.

00:02:13.580 --> 00:02:18.580
And kind of in a lot of data science that economists do, you know, there's a lot of existing

00:02:18.580 --> 00:02:19.140
software.

00:02:19.140 --> 00:02:23.760
But at some point, I figured there's more flexibility if you do some things on your own.

00:02:24.360 --> 00:02:27.640
And that's when I started to pick up more of data science through Python.

00:02:27.640 --> 00:02:28.860
And that's what led me into it.

00:02:28.860 --> 00:02:34.500
Yeah, I never really thought of economics as having this super strong data science side

00:02:34.500 --> 00:02:34.840
to it.

00:02:34.840 --> 00:02:39.640
But the more that I talk to data scientists, a lot of them come from economics background.

00:02:39.640 --> 00:02:40.360
It's pretty interesting.

00:02:40.360 --> 00:02:44.700
Yeah, there's a lot of analysis that's done on like really large scale.

00:02:44.700 --> 00:02:46.820
And there is a huge need.

00:02:46.820 --> 00:02:52.820
And mostly what happens is that a lot of economists just work with data scientists to help them provide

00:02:52.820 --> 00:02:58.440
the data and the analysis, while they just provide kind of contextual information.

00:02:58.440 --> 00:03:02.320
But in the end, it's most efficient if you can do some stuff on your own.

00:03:02.320 --> 00:03:03.040
Yeah, absolutely.

00:03:03.040 --> 00:03:07.320
It's definitely great if you can solve your own problems and not go asking for help, right?

00:03:07.320 --> 00:03:07.600
Yep.

00:03:07.600 --> 00:03:08.340
Johan, how about you?

00:03:08.340 --> 00:03:09.760
How do you get in programming in Python?

00:03:10.160 --> 00:03:14.540
Actually, I did not start until five years ago in Python specifically.

00:03:14.540 --> 00:03:18.900
At the time, we were looking at rebuilding the client libraries.

00:03:18.900 --> 00:03:24.580
And specifically in that case, the command line interface for communicating with Azure.

00:03:24.580 --> 00:03:27.320
We had one that was written in JavaScript.

00:03:27.320 --> 00:03:31.180
And we decided that that needed some overhaul.

00:03:31.180 --> 00:03:32.980
So we looked into doing that in Python.

00:03:33.560 --> 00:03:35.080
So that's how I got started with Python.

00:03:35.080 --> 00:03:35.420
Right.

00:03:35.420 --> 00:03:39.680
And what you're talking about, this is not just the libraries that maybe Python people

00:03:39.680 --> 00:03:40.120
might use.

00:03:40.120 --> 00:03:45.840
This is the command line interface for working with Azure as a Java developer or as whatever,

00:03:45.840 --> 00:03:46.080
right?

00:03:46.080 --> 00:03:47.360
It doesn't matter what language you are.

00:03:47.360 --> 00:03:51.900
Like, this is the language you guys decided to implement it in or move to, at least.

00:03:52.040 --> 00:03:52.320
Correct.

00:03:52.320 --> 00:03:57.780
So it gave me my first introduction to both Python, the language, but also the client libraries

00:03:57.780 --> 00:04:00.460
that we had to use in order to implement the CLI.

00:04:00.460 --> 00:04:01.500
But you're absolutely correct.

00:04:01.500 --> 00:04:04.780
That was an application that we wrote in Python.

00:04:04.780 --> 00:04:05.520
Right, right.

00:04:05.520 --> 00:04:07.700
Where were you coming from before then?

00:04:07.700 --> 00:04:08.400
What language?

00:04:08.400 --> 00:04:10.540
Not surprising.

00:04:10.540 --> 00:04:17.080
A lot of people at Microsoft write code in C#, in C++, although I haven't done much

00:04:17.080 --> 00:04:19.300
C++ in the last decade or so.

00:04:19.300 --> 00:04:21.800
But I've also written code in Visual Basic.

00:04:21.800 --> 00:04:27.160
I'm probably one of the few people that have written Visual Basic.net code that ships as

00:04:27.160 --> 00:04:28.040
part of Visual Studio.

00:04:28.040 --> 00:04:30.320
So, but C# primarily.

00:04:30.320 --> 00:04:31.040
Yeah, yeah.

00:04:31.040 --> 00:04:33.560
What's the story of Visual Basic.net these days?

00:04:33.560 --> 00:04:34.360
Is that still a thing?

00:04:34.360 --> 00:04:39.420
I mean, I know technically it's supported, but it feels like the main story that Microsoft's

00:04:39.420 --> 00:04:41.800
telling around their own internal languages is C#.

00:04:41.800 --> 00:04:45.080
Most users, I'm actually not up to speed.

00:04:45.080 --> 00:04:47.600
I haven't been on the Visual Basic.net team.

00:04:47.800 --> 00:04:50.980
I left that in 2005 or something like that.

00:04:50.980 --> 00:04:54.640
So I've kind of lost contact with my friends over in VB.net land.

00:04:54.640 --> 00:04:55.200
Sure.

00:04:55.200 --> 00:04:56.320
No, no worries.

00:04:56.320 --> 00:04:58.180
How'd you get into programming in the first place?

00:04:58.180 --> 00:04:59.240
I'm from Sweden originally.

00:04:59.240 --> 00:05:06.160
We had a toy store in Stockholm, the capital of Sweden, and they had a wall full of home

00:05:06.160 --> 00:05:08.200
computers is what they were called at the time.

00:05:08.200 --> 00:05:09.700
Commodore 64, Svick 20.

00:05:09.700 --> 00:05:11.880
As opposed to the machine sized ones?

00:05:12.740 --> 00:05:17.580
As opposed to the PCs that became popular later on and all of that.

00:05:17.580 --> 00:05:23.060
And there was always something fascinating about being able to tell a machine what to do.

00:05:23.060 --> 00:05:28.000
Although a kind of archaic way that you have to tell it what to do would wrote things in

00:05:28.000 --> 00:05:28.800
basic at the time.

00:05:28.800 --> 00:05:33.420
But just having playing with it and getting it to print your name over and over again.

00:05:33.580 --> 00:05:37.260
I think that was my first program as it wasn't Hello World at the time.

00:05:37.260 --> 00:05:39.320
It was your one was here.

00:05:39.320 --> 00:05:40.600
It was Hello, Johan.

00:05:40.600 --> 00:05:42.060
But yes.

00:05:42.060 --> 00:05:43.520
I don't know.

00:05:43.520 --> 00:05:46.360
From that point on, I realized that that's what I'm going to do when I grow up.

00:05:46.360 --> 00:05:47.820
That's what I did when I grew up.

00:05:47.920 --> 00:05:49.040
Yeah, that's super cool.

00:05:49.040 --> 00:05:53.580
Well, both of those are really great ways to get into programming and cool stories.

00:05:53.580 --> 00:05:58.340
I guess another follow up question before we move off this intro bit here.

00:05:58.340 --> 00:06:06.380
So Johan, you had said that your first exposure to Python was when you guys rewrote the CLI

00:06:06.380 --> 00:06:08.480
in Python, which is good.

00:06:08.840 --> 00:06:16.240
But then you also, to implement that, had to use all the Python libraries that other people

00:06:16.240 --> 00:06:20.700
who wanted to automate Azure or talk to parts of Azure with Python had to use as well.

00:06:20.700 --> 00:06:21.940
What was that experience like?

00:06:21.940 --> 00:06:23.780
Was it like, oh, these are great libraries.

00:06:23.780 --> 00:06:25.520
They're really well put together.

00:06:25.520 --> 00:06:26.400
It was like, wait a minute.

00:06:26.400 --> 00:06:29.220
This seems different than all the other stuff I see online.

00:06:29.220 --> 00:06:33.060
It looks more like C# in Python.py files.

00:06:33.060 --> 00:06:34.620
I have no idea.

00:06:34.620 --> 00:06:35.700
I'm asking.

00:06:35.700 --> 00:06:36.520
What was it like?

00:06:36.520 --> 00:06:39.200
It was a little bit all over the place.

00:06:39.200 --> 00:06:45.140
One thing that we do here at Microsoft is quite a few of what we consider to be the control

00:06:45.140 --> 00:06:45.480
plane.

00:06:45.480 --> 00:06:48.140
That is how you create resources in Azure.

00:06:48.140 --> 00:06:54.740
Those are auto-generated from Swagger or OpenAPI, which means that they are auto-generated libraries

00:06:54.740 --> 00:06:57.840
with all of the good and bad that comes with that.

00:06:57.840 --> 00:07:03.120
Other libraries were what we consider to be the data plane that is actually using the service

00:07:03.120 --> 00:07:06.520
software provision that, uploading blobs, things like that.

00:07:06.520 --> 00:07:07.520
They were hand-authored.

00:07:07.520 --> 00:07:14.280
So there was a wide variety of how, what the client libraries looked like, what patterns

00:07:14.280 --> 00:07:16.020
they used in there.

00:07:16.020 --> 00:07:18.040
So it was a little bit all over the place.

00:07:18.040 --> 00:07:18.300
Yeah.

00:07:18.380 --> 00:07:21.960
So maybe just define Swagger and OpenAPI for folks listening.

00:07:21.960 --> 00:07:23.800
Not everyone's API developer.

00:07:23.800 --> 00:07:24.640
Ah, sorry.

00:07:24.640 --> 00:07:25.520
Sometimes I forget.

00:07:25.520 --> 00:07:28.340
That's part of my life as well is reviewing REST APIs.

00:07:28.340 --> 00:07:29.160
So...

00:07:29.160 --> 00:07:29.780
Yeah, no worries.

00:07:29.780 --> 00:07:30.560
You're deep in it.

00:07:30.560 --> 00:07:31.280
Yes.

00:07:31.280 --> 00:07:32.040
Deep in it.

00:07:32.040 --> 00:07:34.860
It's a way of describing a REST API.

00:07:34.860 --> 00:07:42.140
So basically, OpenAPI is an open standard that allows you to describe your endpoints, what

00:07:42.140 --> 00:07:47.040
kind of data that they can accept and what kind of data that they will return if you call

00:07:47.040 --> 00:07:47.180
them.

00:07:47.180 --> 00:07:52.380
So it's something like you guys have maybe implemented your endpoints, your REST endpoints

00:07:52.380 --> 00:07:56.020
and, I don't know, ASP.NET Web API or whatever you guys chose.

00:07:56.160 --> 00:07:58.140
And then you added Swagger to it.

00:07:58.140 --> 00:08:00.840
And then everyone else is like, hey, we need libraries for these.

00:08:00.840 --> 00:08:06.940
We can auto-generate some Python libraries or JavaScript libraries or whatever it is you

00:08:06.940 --> 00:08:08.140
can auto-generate off of Swagger.

00:08:08.140 --> 00:08:09.380
Is that sort of how it went?

00:08:09.380 --> 00:08:09.620
Yes.

00:08:09.620 --> 00:08:10.640
So it's both that.

00:08:10.640 --> 00:08:11.580
And we still do that.

00:08:11.580 --> 00:08:17.200
We have, there's a requirement for all Azure services to describe their REST APIs using

00:08:17.200 --> 00:08:18.140
OpenAPI.

00:08:18.140 --> 00:08:24.060
And it has a tool chain both to generate libraries as well as documentation, reference documentation

00:08:24.060 --> 00:08:28.660
and tooling for trying to ensure consistency among the REST APIs.

00:08:28.660 --> 00:08:29.120
Yeah.

00:08:29.120 --> 00:08:30.300
Oh, that sounds really fun.

00:08:30.300 --> 00:08:35.720
Now, next thing related to this, I want to ask you what you do day to day.

00:08:35.720 --> 00:08:39.620
And we got a sense of what you do quite a bit there, Johan.

00:08:39.620 --> 00:08:44.980
But maybe give us the quick flyover and then Kate can tell us what she's up to as well.

00:08:44.980 --> 00:08:45.340
Yeah.

00:08:45.340 --> 00:08:52.540
So the two main areas of responsibility that I have is I'm the architect for the Azure client

00:08:52.540 --> 00:08:53.380
libraries for Python.

00:08:53.700 --> 00:08:58.680
So I'm responsible for the overall design guidelines that we have that are publicly available.

00:08:58.680 --> 00:09:04.960
I'm trying to help the people on my team figure out what the common patterns should be, what

00:09:04.960 --> 00:09:07.980
their handling should look like, what authentication should look like.

00:09:07.980 --> 00:09:09.460
So that's one half of my job.

00:09:09.460 --> 00:09:15.720
The other half of the job is to look at Azure's service APIs and try and ensure that we have

00:09:15.720 --> 00:09:18.620
as much consistency as we can on that side as well.

00:09:18.620 --> 00:09:23.020
Is it across different services or across different languages for a given service?

00:09:23.120 --> 00:09:27.260
It's across different services for on the service API side of things.

00:09:27.260 --> 00:09:32.740
The cross languages is a really interesting question because we have, I'm the architect

00:09:32.740 --> 00:09:33.240
for Python.

00:09:33.240 --> 00:09:39.160
We have, I have counterparts for JavaScript, TypeScript, Java for C#.net, obviously.

00:09:39.360 --> 00:09:42.240
So what we are looking at is we're looking at these guidelines.

00:09:42.240 --> 00:09:45.820
The capabilities have to be roughly the same for all languages.

00:09:45.820 --> 00:09:50.460
If a service exposes a feature, all languages need to be able to expose that feature.

00:09:50.460 --> 00:09:56.080
If a service has some specific failure modes or some quirks to it, everybody has to deal

00:09:56.080 --> 00:09:56.380
with that.

00:09:56.440 --> 00:10:00.880
So we're having discussions both how to best implement it in Python, but also making sure

00:10:00.880 --> 00:10:05.680
that for all languages that we provide client libraries, that they all have the same capabilities

00:10:05.680 --> 00:10:06.140
as well.

00:10:06.140 --> 00:10:06.780
Right, right.

00:10:06.780 --> 00:10:07.120
Yeah.

00:10:07.120 --> 00:10:08.720
That's got to be an interesting intention.

00:10:08.720 --> 00:10:10.360
Kate, how about you?

00:10:10.360 --> 00:10:11.320
What do you do today?

00:10:11.720 --> 00:10:17.020
I'm a program manager on the same team, but on my side of things, we like to call ourselves

00:10:17.020 --> 00:10:22.980
just Azure developer experience, because one aspect of having that great experience with

00:10:22.980 --> 00:10:25.220
the libraries is having great libraries.

00:10:25.220 --> 00:10:31.100
But another is also making sure that the experience you get when you come to Azure as a developer

00:10:31.100 --> 00:10:32.740
is that everything is straightforward.

00:10:32.740 --> 00:10:37.640
If you go to the portal, we find the information that you need to get started and everything else.

00:10:37.640 --> 00:10:43.880
So we like to work with other teams across Microsoft and across Azure to ensure that we bring that

00:10:43.880 --> 00:10:45.760
consistency in other places as well.

00:10:45.760 --> 00:10:52.420
My main job is to bring the voice of the developers using Azure into the designs that we have in

00:10:52.420 --> 00:10:53.140
all of these places.

00:10:53.140 --> 00:10:53.480
Cool.

00:10:53.480 --> 00:10:54.500
That sounds really fun.

00:10:54.500 --> 00:11:00.520
And you guys have some really neat stuff that we're going to dig into that you're using over

00:11:00.520 --> 00:11:00.820
there.

00:11:00.820 --> 00:11:06.240
The scale of Azure, kind of like I was saying before, it's a little bit, I mean, I guess if

00:11:06.240 --> 00:11:08.680
people use AWS, they probably have a similar feeling.

00:11:08.680 --> 00:11:11.200
Although I feel like Azure is even more so these days.

00:11:11.200 --> 00:11:17.820
You just go there and it's like, you know, this huge menu of so many different choices.

00:11:17.820 --> 00:11:21.500
It's a lot to keep track of and help people discover, right?

00:11:21.500 --> 00:11:21.820
Yeah.

00:11:21.820 --> 00:11:25.500
That's actually one of the main issues that we see for people who are just trying to, you

00:11:25.500 --> 00:11:27.580
know, play around with these platforms.

00:11:27.580 --> 00:11:31.680
And I think that applies across, you know, both Azure and AWS and everywhere else.

00:11:32.020 --> 00:11:36.600
There's just so many different services to begin with that it might be kind of overwhelming

00:11:36.600 --> 00:11:38.960
to know where you need to go.

00:11:38.960 --> 00:11:43.920
So I think eventually our goal is to make sure that that choice becomes easier over time.

00:11:43.920 --> 00:11:50.380
Have you guys thought of things like a beginner view or something, you know, for lack of a

00:11:50.380 --> 00:11:55.120
better word, something that hides a lot of the stuff and just says, I'm a web developer

00:11:55.120 --> 00:11:55.760
in this language.

00:11:55.940 --> 00:11:59.180
Just show me the 10 things that I might care about.

00:11:59.180 --> 00:11:59.460
Yeah.

00:11:59.460 --> 00:12:03.620
I think we're trying to create some sort of tracks based on what we believe people might

00:12:03.620 --> 00:12:07.140
be developing in our documentation so that it's easier to consume.

00:12:07.140 --> 00:12:09.300
But I think, you know, maybe that's a good idea.

00:12:09.300 --> 00:12:11.740
Just have a very simple beginner view.

00:12:11.740 --> 00:12:12.140
Yeah.

00:12:12.140 --> 00:12:13.020
Like show me everything.

00:12:13.020 --> 00:12:13.480
I don't know.

00:12:13.480 --> 00:12:19.060
It just, my experiences there has been, it's like, wow, I'm on a bit of a treasure hunt,

00:12:19.060 --> 00:12:21.080
you know, to go through things here.

00:12:21.080 --> 00:12:21.740
Yeah.

00:12:21.740 --> 00:12:22.120
Very cool.

00:12:22.340 --> 00:12:26.880
Now, you guys are also, Kate, you're also involved in some of the documentation and

00:12:26.880 --> 00:12:28.120
tutorials and things like that.

00:12:28.120 --> 00:12:29.640
Johan, are you as well?

00:12:29.640 --> 00:12:30.540
Yes.

00:12:30.540 --> 00:12:31.280
Yes, I am.

00:12:31.280 --> 00:12:31.700
Yeah.

00:12:31.700 --> 00:12:38.720
Actually, in our team, we were trying hard to have a greater push for creating better documentation

00:12:38.720 --> 00:12:39.200
overall.

00:12:39.200 --> 00:12:44.080
I think one of the problems with the auto-generated libraries is that that sometimes ends up being

00:12:44.080 --> 00:12:46.800
not the best documented library in the end.

00:12:46.800 --> 00:12:53.200
And that's why all of our developers really focus and spend time on writing better comments

00:12:53.200 --> 00:12:56.200
and including more instructions for people to get started with.

00:12:56.200 --> 00:12:56.500
Yeah.

00:12:56.500 --> 00:13:01.260
Some of those auto-generated documentation things, it can be really tricky because it could

00:13:01.260 --> 00:13:03.980
say like, you know, the function could be log in.

00:13:04.200 --> 00:13:10.860
The documentation might be logs in user or upload uploads file, right?

00:13:10.860 --> 00:13:14.180
It's just like one or two words or it just takes the name with a function and breaks it

00:13:14.180 --> 00:13:17.660
out into like English-like words instead of compound words or whatever.

00:13:17.660 --> 00:13:21.940
And it's just like, yeah, you can tell that, okay, this documentation, this is not going to

00:13:21.940 --> 00:13:23.040
be helpful for me, right?

00:13:23.040 --> 00:13:26.800
So it's good to have something really, you know, custom there, right?

00:13:26.800 --> 00:13:27.380
Yeah, exactly.

00:13:27.660 --> 00:13:27.900
Yeah.

00:13:27.900 --> 00:13:32.580
One of the challenges, I guess, let me ask you, Kate, how much are you focused on Python

00:13:32.580 --> 00:13:36.920
specifically and how much are you focused sort of cross-language working on this stuff?

00:13:36.920 --> 00:13:41.120
I am focused on all languages to an extent because, you know, if we're creating some standards

00:13:41.120 --> 00:13:45.780
for documentation that should apply across all of them, Python shouldn't be getting some

00:13:45.780 --> 00:13:47.820
extra treatment just because it's Python.

00:13:47.820 --> 00:13:49.340
I don't see why not.

00:13:49.340 --> 00:13:51.580
Maybe that's just me.

00:13:51.580 --> 00:13:52.240
Sure.

00:13:52.240 --> 00:13:54.260
Let's document just Python, nothing else.

00:13:54.260 --> 00:13:58.440
I was more asking, like, are you specifically on like the team that does the Python parts

00:13:58.440 --> 00:14:03.020
and there's other people doing the same thing for JavaScript or are you like overseeing it

00:14:03.020 --> 00:14:03.800
for all the languages?

00:14:03.800 --> 00:14:09.120
Our split in terms of who cares about what is pretty complex on the PM team.

00:14:09.120 --> 00:14:15.520
My focus was for Python in a sense of helping with user studies and helping with some telemetry

00:14:15.520 --> 00:14:16.140
searches.

00:14:16.140 --> 00:14:21.320
But in terms of all of these kind of overarching themes, I work with all of the languages.

00:14:21.320 --> 00:14:21.760
Okay.

00:14:21.760 --> 00:14:22.200
Yeah.

00:14:22.200 --> 00:14:22.620
Yeah.

00:14:22.620 --> 00:14:22.940
Cool.

00:14:22.940 --> 00:14:28.460
This portion of Talk Python To Me is brought to you by Springboard.

00:14:28.460 --> 00:14:33.120
Springboard offers online data science and machine learning education through their Machine

00:14:33.120 --> 00:14:35.600
Learning Education Career Track program.

00:14:35.600 --> 00:14:40.360
This is similar to an online machine learning boot camp with the difference that this career

00:14:40.360 --> 00:14:45.000
track follows a project-based learning methodology where students work towards creating their own

00:14:45.000 --> 00:14:47.100
portfolio of machine learning models.

00:14:47.380 --> 00:14:52.980
And every student is paired with a machine learning expert who provides unlimited one-on-one mentorship

00:14:52.980 --> 00:14:55.500
throughout the program via video conferencing.

00:14:55.500 --> 00:14:58.240
This program was built for software engineers.

00:14:58.240 --> 00:15:01.920
So to be eligible, you must have at least one year of experience.

00:15:01.920 --> 00:15:03.900
You'll get a machine learning job guaranteed.

00:15:03.900 --> 00:15:09.560
Springboard is the first company and still the only company in the U.S. to offer a machine learning

00:15:09.560 --> 00:15:13.100
engineer career guarantee for students interested in changing careers.

00:15:13.100 --> 00:15:17.240
That means either you get a job in the industry or your tuition is reimbursed.

00:15:17.240 --> 00:15:23.080
So to get started today, just visit talkpython.fm/springboard or click the link in your

00:15:23.080 --> 00:15:23.700
podcast player.

00:15:26.080 --> 00:15:33.100
One of the challenges I can see here right away and your joke, Johan, sort of touches on it a little

00:15:33.100 --> 00:15:33.400
bit.

00:15:33.400 --> 00:15:39.440
I mean, I know you're joking, but you've got some endpoints, some cloud stuff that you want

00:15:39.440 --> 00:15:41.220
to control and do things.

00:15:41.220 --> 00:15:47.680
And every language has its own idiomatic way of working, right?

00:15:47.680 --> 00:15:49.980
You know, Python has Pythonic code.

00:15:49.980 --> 00:15:53.540
Other languages have, you know, whatever, whatever they call it.

00:15:54.000 --> 00:15:54.260
Right.

00:15:54.260 --> 00:15:56.600
But there's always an idiomatic way of doing things.

00:15:56.600 --> 00:16:02.420
And sometimes that really lends itself to doing something quite different than other languages.

00:16:02.420 --> 00:16:08.600
How do you trade off trying to make it so that somebody who's a C# developer working

00:16:08.600 --> 00:16:13.720
with a Python developer, it's not like two different worlds, but also it doesn't feel like somebody

00:16:13.720 --> 00:16:17.080
put C# or JavaScript into a .py file.

00:16:17.080 --> 00:16:18.840
Yeah, you're absolutely right.

00:16:18.900 --> 00:16:20.460
that's a constant tension.

00:16:20.460 --> 00:16:24.880
And we've had plenty of discussions among the architects for the various languages here

00:16:24.880 --> 00:16:27.760
on how to accomplish exactly that.

00:16:27.760 --> 00:16:33.900
And the way that you iterate through things is different a little bit in Python than it

00:16:33.900 --> 00:16:35.420
is in C#.

00:16:35.420 --> 00:16:38.360
For Java, we have builder patterns for things.

00:16:38.360 --> 00:16:42.220
A lot of interfaces, a lot of builders, a lot of patterns over in the Java world, for sure.

00:16:42.460 --> 00:16:42.760
Yes.

00:16:42.760 --> 00:16:44.260
So it is a challenge.

00:16:44.260 --> 00:16:49.580
We're trying to make sure that we can talk when we talk about the abstract concepts, for

00:16:49.580 --> 00:16:51.180
the most part that you can understand.

00:16:51.180 --> 00:16:56.780
You can basically say if you talk about a specific thing, a specific noun, be that the blob or something

00:16:56.780 --> 00:17:00.260
like that in one language, that you can map it down to what that means.

00:17:00.480 --> 00:17:04.600
If I look at code in a different language, exactly what it looks like is going to be slightly

00:17:04.600 --> 00:17:09.840
different because otherwise you're stuck with something that is going to be looking like

00:17:09.840 --> 00:17:11.680
a specific programming language.

00:17:11.680 --> 00:17:15.900
We certainly had that problem when I started here that we had some jokes.

00:17:15.900 --> 00:17:20.880
Some of the usability studies that we had, the participants were arguing about what language

00:17:20.880 --> 00:17:25.680
the original library was written in or the developer, what language they preferred.

00:17:25.680 --> 00:17:29.900
Could they see the abstraction leaking through and go, I know, I think I know what this is.

00:17:30.180 --> 00:17:30.620
Yes.

00:17:30.620 --> 00:17:35.780
There was one of the early Python library usability studies that we had where they argued whether

00:17:35.780 --> 00:17:39.600
or not it was a C# or Java developer that had written the Python library.

00:17:39.600 --> 00:17:41.680
And it made me feel sad.

00:17:41.680 --> 00:17:44.780
Neither of those are the right answer.

00:17:44.780 --> 00:17:46.600
I don't know what the answer is, but that's not right.

00:17:46.600 --> 00:17:47.140
Right.

00:17:47.140 --> 00:17:48.000
Right.

00:17:48.000 --> 00:17:49.600
Yeah.

00:17:49.600 --> 00:17:51.380
Kate, you're back there laughing.

00:17:51.380 --> 00:17:54.300
Do you have some stories like that that you experienced as well?

00:17:54.300 --> 00:17:54.880
Yeah.

00:17:54.880 --> 00:18:00.640
I mean, as Johan mentioned, being kind of blamed of over C#ying all of our libraries

00:18:00.640 --> 00:18:06.760
was one of the, I think, initial kind of triggers that also made us want to explore the space

00:18:06.760 --> 00:18:11.820
we're in and launch our team to begin with to make sure, you know, people no longer have

00:18:11.820 --> 00:18:12.940
these doubts anymore.

00:18:12.940 --> 00:18:14.660
You know, it's interesting, right?

00:18:14.660 --> 00:18:19.660
Like, I'd like to hear what the user testing sort of uncovered for this.

00:18:19.660 --> 00:18:24.540
But to me, when I use a library, I'm trying to write some program and then I'm like, oh,

00:18:24.540 --> 00:18:26.100
I'm going to bring this library into the program.

00:18:26.100 --> 00:18:29.320
And it's clearly not following the idioms of the language.

00:18:29.320 --> 00:18:30.860
You can just tell.

00:18:30.860 --> 00:18:32.100
You're just like, ah, there is something.

00:18:32.100 --> 00:18:36.600
This, you just get this feeling like this wasn't really made for me.

00:18:36.600 --> 00:18:40.400
It was kind of thrown together so I could still work with it.

00:18:40.400 --> 00:18:41.820
But it's not for me.

00:18:41.820 --> 00:18:42.540
You know what I mean?

00:18:42.540 --> 00:18:44.600
As a whatever developer, right?

00:18:44.600 --> 00:18:50.200
If you're Python and you're consuming something that looks like C# or you're a C#

00:18:50.200 --> 00:18:53.620
developer, you're consuming something that looks like C++ or whatever it is.

00:18:53.920 --> 00:18:58.460
It's not a great feeling like, oh, this is a this is the place they want me to be, right?

00:18:58.460 --> 00:19:00.120
Yeah, no, absolutely.

00:19:00.120 --> 00:19:01.700
I do think so.

00:19:01.700 --> 00:19:05.480
Something that I've learned working with the other architects for the different languages

00:19:05.480 --> 00:19:09.740
that each programming language community has its own personality as well.

00:19:09.740 --> 00:19:16.860
And I found the Python users are generally extremely pragmatic, which is something that I very much

00:19:16.860 --> 00:19:17.440
appreciate.

00:19:17.440 --> 00:19:21.220
Yeah, I would say that's a pretty good classification, right?

00:19:21.480 --> 00:19:26.540
They don't bring all these design patterns and these extra structures and whatnot in just

00:19:26.540 --> 00:19:28.920
for the sake of saying it's well designed or well factored.

00:19:28.920 --> 00:19:30.480
It's like, we'll do that if we need to.

00:19:30.480 --> 00:19:33.860
But let's just put a function in a file and try that first.

00:19:33.860 --> 00:19:34.780
Something like that, right?

00:19:34.780 --> 00:19:35.140
Yep.

00:19:35.140 --> 00:19:42.600
So, yeah, there are lots of other other discussions on what is the best way of doing React in some

00:19:42.600 --> 00:19:43.660
of the other language communities.

00:19:43.660 --> 00:19:48.260
I have not seen too many of those things show up in Python discussions.

00:19:48.260 --> 00:19:49.620
Yeah, that's a tough challenge.

00:19:49.620 --> 00:19:53.160
How do you guys, either of you or both of you handle this?

00:19:53.160 --> 00:19:58.560
Because, yeah, every language has its culture and its community, but you can only immerse yourself

00:19:58.560 --> 00:20:01.420
so deeply in so many different cultures, right?

00:20:01.420 --> 00:20:03.620
And really get the zen of it.

00:20:04.060 --> 00:20:06.220
So, how do you keep track of the other ones?

00:20:06.220 --> 00:20:11.060
Or is that just you work with the other folks that are more those language experts or whatever?

00:20:11.060 --> 00:20:16.520
The way our team is structured is that we have four separate teams with each of them has an

00:20:16.520 --> 00:20:22.580
assigned PM, an assigned architect, and an engineering lead in the entire engineering kind of team.

00:20:22.580 --> 00:20:26.300
We're really trying to become experts in that particular language.

00:20:26.300 --> 00:20:33.340
So, it becomes easier to track this as, you know, we have kind of separate entities that are caring about each language.

00:20:33.340 --> 00:20:35.860
Yeah, they have that expertise or whatever, right?

00:20:35.860 --> 00:20:40.420
And they can just express that, sort of speak for their community at the meetings.

00:20:40.420 --> 00:20:40.820
Yep.

00:20:40.820 --> 00:20:45.820
That is my role on the architect board that we have for the Azure SDKs.

00:20:45.820 --> 00:20:52.600
I try to bring the Python voice into the discussion and telling them where we are going to do something different

00:20:52.600 --> 00:20:54.400
and what the reason for that is.

00:20:54.400 --> 00:21:03.240
Yeah, for example, not from the Python universe of things, but from JavaScript, we were wondering what would be the best way to present, you know, JavaScript documentation.

00:21:03.240 --> 00:21:04.240
Should it be Node?

00:21:04.240 --> 00:21:06.100
Should it be JavaScript?

00:21:06.100 --> 00:21:08.000
So, we just brought in.

00:21:08.000 --> 00:21:10.420
I have no idea about anything JavaScript related.

00:21:10.420 --> 00:21:19.300
So, I just brought in our engineering lead and our architect and kind of let them let me know better about what the community thinks about that particular space.

00:21:19.300 --> 00:21:20.460
Yeah, interesting.

00:21:20.860 --> 00:21:30.540
Well, there's just, you know, so many APIs and then you have to, you know, sort of cross product that with how many different languages are consuming those APIs.

00:21:30.540 --> 00:21:31.780
It's really interesting.

00:21:32.020 --> 00:21:40.860
So, one of the things I think would be fun to talk about is the test setup that you guys have, Kate, for user studies and observations.

00:21:41.100 --> 00:21:49.260
Basically, the way we just approach trying to create a library to begin with is, you know, we have to learn better about the service itself.

00:21:49.260 --> 00:21:58.960
And we start out by, you know, writing initial preview versions of the library with guidance from the architects, as well as closer work with the service team.

00:21:58.960 --> 00:22:04.960
Once we have some sort of preview to work off, we set up some user studies.

00:22:04.960 --> 00:22:15.680
We have a couple of labs in our building where we invite a lot of developers to come for, I think, two hours at a time.

00:22:16.220 --> 00:22:21.400
Where we set up some basic tasks for them to complete using the preview library that we have.

00:22:21.400 --> 00:22:28.480
You might give them the library to, like, blob storage and say, okay, use Python to upload this file to Azure blob storage.

00:22:28.480 --> 00:22:30.580
So, or something like that, right?

00:22:30.580 --> 00:22:31.900
And then just let them go?

00:22:31.900 --> 00:22:32.680
Yeah, exactly.

00:22:33.000 --> 00:22:43.380
So, we try to, you know, start with some simple tasks to see how these, you know, initial steps are going and then try to proceed to more complicated tasks later on.

00:22:43.380 --> 00:22:47.160
And then basically see how they proceed with that.

00:22:47.160 --> 00:22:50.220
We have kind of two different separate types of studies that we do.

00:22:50.220 --> 00:23:02.280
One is focusing on the design of the API itself, where we often do not provide much documentation and see kind of intuitively if the naming makes sense and where do people end up searching for them.

00:23:02.460 --> 00:23:04.780
Yeah, just auto-complete driven discovery.

00:23:04.780 --> 00:23:06.820
Go with that and see what they do.

00:23:06.820 --> 00:23:07.380
Right.

00:23:07.380 --> 00:23:19.300
So, in that case, it kind of helps us to better understand what are, if, you know, our conventions of naming are discoverable and easy versus the other type of studies we have is to go more end-to-end.

00:23:19.300 --> 00:23:27.740
And once we have some sort of set of docs to go off, see how people actually go about discovering it and seeing if there are any gaps that we have.

00:23:27.740 --> 00:23:28.700
Yeah, quite interesting.

00:23:29.000 --> 00:23:37.000
So, you're both checking the libraries and the API, but you're also checking maybe the documentation and the tutorials in that second case.

00:23:37.000 --> 00:23:37.900
Yeah, exactly.

00:23:37.900 --> 00:23:42.080
Because there is a lot of existing documentation for things that existed before us.

00:23:42.760 --> 00:23:50.540
And making sure that, you know, all the places where people actually go to find it are updated and are not misleading is a big challenge overall.

00:23:50.540 --> 00:23:51.880
Yeah, yeah, for sure.

00:23:51.880 --> 00:23:54.300
I mean, I can't speak for Azure in general.

00:23:54.300 --> 00:23:55.800
I know Azure's changed a lot.

00:23:55.900 --> 00:23:59.220
So, that old tutorials don't make any sense anymore.

00:23:59.220 --> 00:24:02.220
But in the Python space, that is a challenge.

00:24:02.220 --> 00:24:10.900
You'll see tutorials written for Python 2 that'll tell people, like, well, go pip install virtual ENV so that you can create a virtual environment.

00:24:10.900 --> 00:24:13.200
And it's like, no, no, no, that's already built into Python.

00:24:13.200 --> 00:24:14.460
It's a module, VNV.

00:24:14.460 --> 00:24:14.960
Yeah.

00:24:15.040 --> 00:24:15.860
We don't need these things.

00:24:15.860 --> 00:24:17.380
Like, there's these other steps.

00:24:17.380 --> 00:24:21.180
Or even there's new ways to install Python into Windows, right?

00:24:21.180 --> 00:24:22.480
Like, from the Windows Store and whatnot.

00:24:22.480 --> 00:24:28.040
So, it's got to be a constant challenge of, like, that stuff was put there to help people.

00:24:28.040 --> 00:24:31.200
And yet, it's kind of in the way now.

00:24:31.200 --> 00:24:32.520
It'd be better if you didn't put anything.

00:24:32.520 --> 00:24:36.540
And they might just have to go search for it and maybe discover the right way.

00:24:36.540 --> 00:24:51.400
Yeah, I think for Python specifically, there has been an effort on our side to also try to consolidate all sorts of guidance, exactly like you mentioned, with a virtual environment that is consolidated into guidelines on how we are supposed to write tutorials.

00:24:51.400 --> 00:25:04.780
I think it's still at a draft stage, but it's something we're definitely looking more into to make sure that, you know, the guidance we provide for the tutorials and similar texts also makes sense for the set of developers and for the language.

00:25:04.780 --> 00:25:06.340
Yeah, this question for either of you.

00:25:06.340 --> 00:25:09.740
How do you all deal with telling people to get started in Python?

00:25:09.740 --> 00:25:15.200
Because on Windows, until recently, they didn't have the Python 3 command, right?

00:25:15.200 --> 00:25:20.280
Steve Dower got the new version of Python into the Windows Store, and it comes with Python 3.

00:25:20.280 --> 00:25:23.600
So, that's one thing that you can just say, always type Python 3 to get started.

00:25:23.600 --> 00:25:28.300
But I've always found it very tricky to say, if you're on Windows, you do this.

00:25:28.300 --> 00:25:29.980
If you're on Mac or Linux, you do that.

00:25:29.980 --> 00:25:34.060
And, like, you kind of have to replicate that either-or bit through everything.

00:25:34.060 --> 00:25:35.040
How do you all deal with that?

00:25:35.040 --> 00:25:40.340
Today, it is either-or kind of for your operating system go here kind of thing.

00:25:40.340 --> 00:25:50.380
We're doing less of now, and I think what it used to do more of in the past was that every getting started document had all of the instructions on how to set up Python first,

00:25:50.380 --> 00:25:56.600
which meant it was not until page 3 or something like that that you got to what we're actually trying to tell you.

00:25:56.660 --> 00:26:02.820
So, now, most of the getting started documents are that, assuming that you have Python installed.

00:26:02.820 --> 00:26:05.240
And, by the way, if you don't know how to do that, go here.

00:26:05.240 --> 00:26:05.620
Right.

00:26:05.740 --> 00:26:08.620
So, you just have that one little blurb at the top of the document.

00:26:08.620 --> 00:26:09.840
Yeah, that makes a lot of sense.

00:26:09.840 --> 00:26:16.380
Now, I do want to come back to this lab that you have, Kate, because I think it's really interesting from a couple of angles.

00:26:16.380 --> 00:26:24.100
But let me try to describe what I think the lab looks like, because I've seen some pictures and whatnot of it in action.

00:26:24.580 --> 00:26:25.840
But this might not be the same thing.

00:26:25.840 --> 00:26:31.960
So, the one that I saw, there was basically a room with some computers.

00:26:31.960 --> 00:26:36.800
Some developers can go sit down there and either, like, group program or do separate programming.

00:26:36.800 --> 00:26:40.840
But then there's also a one-way mirror, and you could sort of screen share.

00:26:40.840 --> 00:26:46.540
You could watch what they're doing on the screen from behind the mirror or somewhere else

00:26:46.540 --> 00:26:52.040
and sort of critique, you know, how well your library is holding up to them, poking at it, and things like that.

00:26:52.040 --> 00:26:53.140
Is that basically what it is?

00:26:53.140 --> 00:26:54.260
It is pretty much how it is.

00:26:54.260 --> 00:26:58.660
So, we do try to bring two developers at a time to do pair programming.

00:26:58.660 --> 00:27:07.900
We've kind of noticed that it's much easier for people to be more open about what they feel about the libraries and the experience overall.

00:27:07.900 --> 00:27:12.740
It's kind of more natural to speak out and comment and see how it feels.

00:27:12.740 --> 00:27:19.420
It's also usually easier to unblock the other person if one of them doesn't have experience in something.

00:27:19.420 --> 00:27:23.900
Yeah, I can imagine from a user testing angle that if there's more than one person,

00:27:23.940 --> 00:27:32.280
person that are working on it, they're going to just communicate verbally with each other because it's weird to just sit there and work with not, like, sharing what you're up to.

00:27:32.280 --> 00:27:36.980
But that's exactly, like, what you would like them to do for you to understand what they're doing, right?

00:27:37.080 --> 00:27:38.000
Exactly, exactly.

00:27:38.000 --> 00:27:41.460
So, even some, you know, more random comments are always great.

00:27:41.540 --> 00:27:48.540
And we've had some people be very open about what they thought at the time of, like, oh, you know, this is crap.

00:27:48.540 --> 00:27:49.700
Like, this needs to change.

00:27:49.700 --> 00:27:52.480
I don't understand why I'm even looking at this.

00:27:52.480 --> 00:27:56.240
And kind of having another person there, I think, makes it less awkward for them.

00:27:56.480 --> 00:28:05.240
Because you can imagine sitting in a tiny, tiny room, you know, just you and a computer in front of you, knowing that you're being observed by X amount of eyes.

00:28:05.240 --> 00:28:08.580
It's a pretty stressful situation if you're on your own.

00:28:08.580 --> 00:28:13.520
Yeah, the other person will help you forget that there's all those eyes or thoughts thinking about what you're doing.

00:28:13.520 --> 00:28:14.460
Pretty interesting.

00:28:14.460 --> 00:28:17.660
On our side of things, we also try to bring in, you know, a lot of people.

00:28:17.660 --> 00:28:25.440
So, all of the devs that are actually working on the library try to always come to the study to see how their libraries are performing.

00:28:25.440 --> 00:28:31.700
So that it's also easier for them to kind of understand how, you know, how users interact with the libraries.

00:28:31.700 --> 00:28:34.040
And to understand where the struggles are.

00:28:34.040 --> 00:28:40.600
And makes it kind of easier for them to understand how important it is to make it really good.

00:28:40.600 --> 00:28:41.120
Yeah, yeah.

00:28:41.120 --> 00:28:42.700
You think, oh, that's no big deal.

00:28:42.700 --> 00:28:43.580
People will figure that out.

00:28:43.620 --> 00:28:44.460
We don't need to do this.

00:28:44.460 --> 00:28:47.920
And then you see four people stuck for 15 minutes trying to do it.

00:28:47.920 --> 00:28:49.220
You're like, oh, actually, okay.

00:28:49.220 --> 00:28:49.920
I see.

00:28:49.920 --> 00:28:50.380
Exactly.

00:28:50.380 --> 00:28:53.520
How often do you run these studies and how many people go through them?

00:28:53.520 --> 00:28:56.540
We are pretty much booked all the time.

00:28:56.540 --> 00:29:02.460
I think we have user studies, if not every week, then every other week, depending on what we're currently working on.

00:29:02.460 --> 00:29:12.120
So we have usually, we manage to do, I think, two groups of studies per day, which is four people then per day.

00:29:12.460 --> 00:29:16.940
Sometimes if there is something in particular that we're trying to test out, we can use two.

00:29:17.280 --> 00:29:19.940
So that would mean most eight people a day.

00:29:19.940 --> 00:29:20.300
Yeah.

00:29:20.300 --> 00:29:20.820
Okay.

00:29:20.820 --> 00:29:28.860
Well, the reason I think this is so interesting is because there are so many people creating packages and libraries and Python for others to use.

00:29:28.860 --> 00:29:32.100
And many of them are extremely, extremely popular, right?

00:29:32.100 --> 00:29:36.840
You know, over on PyPI, we have 215,000 libraries at the time of the recording.

00:29:37.200 --> 00:29:41.040
You can go over to place up PyPI stats, I think.

00:29:41.040 --> 00:29:41.420
Mm-hmm.

00:29:41.480 --> 00:29:42.360
And you can check that out.

00:29:42.360 --> 00:29:44.280
You can see the most downloaded libraries, right?

00:29:44.280 --> 00:29:45.020
It's pretty cool.

00:29:45.020 --> 00:29:50.300
There's a bunch that are like over, you know, well over a million downloads a day.

00:29:50.300 --> 00:29:56.040
So there's these libraries and they're just being used in so many, by so many people in so many places.

00:29:56.040 --> 00:30:10.980
And yet my feeling is that most people who build these libraries have very little visibility into how people feel about them until they raise to the level of like a GitHub request or a bug sort of complaint or something like that.

00:30:11.200 --> 00:30:11.800
Right.

00:30:11.800 --> 00:30:19.440
And having this discoverability and ability to observe people working on your libraries, it must be really interesting.

00:30:19.440 --> 00:30:20.800
Yes, absolutely.

00:30:20.800 --> 00:30:26.460
I mean, it's very gratifying when you hear someone talking about the library that you built in a positive way.

00:30:26.460 --> 00:30:26.940
Yeah.

00:30:26.940 --> 00:30:40.420
It can be very humbling if you thought that you had a great idea that turns out that no one understands how to use or may even have other choice words for the experience that they feel like they were exposed to.

00:30:40.420 --> 00:30:41.240
Yeah, yeah, sure.

00:30:41.240 --> 00:30:42.040
I had a rough day at work.

00:30:42.040 --> 00:30:43.200
People hated what I built.

00:30:43.200 --> 00:30:44.060
I thought it was great.

00:30:44.060 --> 00:30:48.860
That's pretty harsh, but it does allow things to get pretty polished, I suspect.

00:30:48.860 --> 00:30:56.700
So, Johan, do you have some examples of things that you've changed or realizations you've had through some of Kate's studies?

00:30:56.700 --> 00:31:09.820
One of the experiences is you touched on the tab completion kind of discovery of things, but the Python community is extremely diverse in how they use things.

00:31:10.000 --> 00:31:18.240
I think about half of the people that we've had in the usability study did not use any form of IDE at all.

00:31:18.240 --> 00:31:18.520
Yeah.

00:31:18.520 --> 00:31:19.440
When they did things.

00:31:19.440 --> 00:31:19.660
Yeah.

00:31:19.660 --> 00:31:21.160
So you let them pick their IDE.

00:31:21.160 --> 00:31:26.340
It's not like, hey, we're all using Visual Studio Code because it'll work with all the languages and it's consistent or whatever.

00:31:26.340 --> 00:31:29.240
You said, if you want to use Emacs, knock yourself out.

00:31:29.240 --> 00:31:31.520
If you want to use PyCharm, go for that.

00:31:31.520 --> 00:31:32.780
Is that how it went?

00:31:32.880 --> 00:31:37.660
The last couple of studies, I think we set it up using VS Code, but we've certainly had PyCharm.

00:31:37.660 --> 00:31:44.480
We've had people that even if you have VS Code in there, they only use the, well, they use VS Code as an editor at most.

00:31:44.480 --> 00:31:51.800
And then they dropped into the terminal window and run everything interactively or run things through REPL immediately.

00:31:51.800 --> 00:31:55.020
The use of a debugger, similar thing there.

00:31:55.020 --> 00:32:05.480
I think there was one quote that one of the participants had that, yeah, I use a debugger for simple things, but if things get complicated, then it's pretty print all the way.

00:32:06.220 --> 00:32:06.900
It's so funny.

00:32:06.900 --> 00:32:09.500
I'm laughing because to me, it's like the opposite, right?

00:32:09.500 --> 00:32:11.520
I'll print out something like, oh, this is getting hard, man.

00:32:11.520 --> 00:32:13.740
I'm going to have to use a debugger and go figure this thing out.

00:32:13.740 --> 00:32:29.440
Yeah, but it's an insight into how people feel and what people use and how important it is to make sure that things work well, that you have a good, that you implement Dunderstir and REPR so you can print out an object and you get some useful information.

00:32:29.440 --> 00:32:30.240
Right, right.

00:32:30.240 --> 00:32:31.660
In fact, people use it that way.

00:32:32.060 --> 00:32:36.400
So understanding the importance of that is something that I've come to appreciate more.

00:32:36.400 --> 00:32:36.840
Right, right.

00:32:36.840 --> 00:32:51.020
Because if you just print it out, especially if you're in the non-IDE situation and you don't know what the properties are, and maybe you got something like a blob response object, it would just say blob response, add memory address, such and such, right?

00:32:51.020 --> 00:32:55.180
As opposed to here's the URL or the bucket and whatever, right?

00:32:55.180 --> 00:33:07.960
Like, I think that actually is a good point in general for libraries to consider the Dunderrepper and Sturr stuff so that not just if you actually just want to print it out, but those appear all over the place, right?

00:33:07.960 --> 00:33:09.340
Those appear in debuggers.

00:33:09.340 --> 00:33:11.720
They appear potentially in log files.

00:33:11.920 --> 00:33:16.160
There's all kinds of stuff where having that is just like, it's just delightful.

00:33:16.160 --> 00:33:19.240
You're like, oh, I can just see what this is right here.

00:33:19.240 --> 00:33:25.460
I don't have to do extra work because somebody put in like a nice little repper that's good enough to know what's happening.

00:33:25.460 --> 00:33:25.840
Right.

00:33:26.040 --> 00:33:30.500
So there are many of those small things that are there.

00:33:30.500 --> 00:33:40.180
I'm trying to reduce the number of types that we have in our libraries now because in order to call an API, if you want to call that from the REPL window, it's much easier to just use scalar types, for example.

00:33:40.180 --> 00:33:49.720
And we have the wonderful keyword-only arguments in Python that makes life easier, whereas in JavaScript, I would create option objects with lots of properties on it.

00:33:49.720 --> 00:33:54.900
Right, because in the option object, you could have the default value, but in Python, that's just part of the function.

00:33:54.900 --> 00:33:55.400
Right.

00:33:55.940 --> 00:34:02.320
So these kind of things that have changed a little bit in how I look at libraries.

00:34:02.320 --> 00:34:09.400
This is interesting about these sort of compare and contrast libraries, trying to do exactly the same thing with people that know the system really well.

00:34:09.400 --> 00:34:10.440
I think that's super interesting.

00:34:10.440 --> 00:34:19.860
And I feel like a lot of that pragmatism that Python has is because there's a lot of flexibility in the lower-level stuff, right?

00:34:19.980 --> 00:34:30.120
Like keyword-only arguments with default values and stuff allow you to avoid certain patterns or a global variable in a module is kind of like a singleton.

00:34:30.120 --> 00:34:31.500
That's what you need.

00:34:31.500 --> 00:34:33.620
You don't need a whole class for that and so on.

00:34:33.620 --> 00:34:38.060
What was your experience coming from these different languages and seeing that across teams?

00:34:38.060 --> 00:34:40.260
Is that about right or how has it been?

00:34:40.440 --> 00:34:41.060
Absolutely right.

00:34:41.060 --> 00:34:50.520
I still review Python code from other teams that come in and you can see where they're coming from, where they have extremely deep class hierarchies and things like that.

00:34:50.820 --> 00:35:02.340
It makes sense if you wrote code in C# or Java, but type safety is not the same thing in Python as it is in C# where you will get the compiler error if you try to call something that doesn't exist.

00:35:02.340 --> 00:35:07.420
There are other patterns that you can introspect things in Python that makes it more powerful.

00:35:09.720 --> 00:35:12.660
This portion of Talk Python To Me is sponsored by Clubhouse.

00:35:12.660 --> 00:35:19.700
Clubhouse is a fast and enjoyable project management platform that breaks down silos and brings teams together to ship value, not features.

00:35:19.700 --> 00:35:22.000
Great teams choose Clubhouse because they get

00:35:22.000 --> 00:35:27.520
flexible workflows where they can easily customize workflow state for teams or projects of any size,

00:35:27.520 --> 00:35:32.740
advanced filtering, quickly filtering by project or team to see how everything is progressing,

00:35:32.740 --> 00:35:39.120
and effective sprint planning, setting their weekly priorities with iterations and then letting Clubhouse run the schedule.

00:35:39.700 --> 00:35:43.600
All of the core features are completely free for teams with up to 10 users.

00:35:43.600 --> 00:35:50.640
And as Talk Python listeners, you'll get two free months on any paid plan with unlimited users and access to the premium features.

00:35:50.640 --> 00:35:51.800
So get started today.

00:35:51.800 --> 00:35:56.040
Just click the Clubhouse link in your podcast player show notes or on the episode page.

00:35:56.040 --> 00:36:09.680
Kate, one thing I want to come back to because I do think it's really interesting and it's a challenge to this testing that you talked about is this not using an IDE or something that has some kind of

00:36:09.680 --> 00:36:14.140
completion story for working with the code that Johan talked about.

00:36:14.140 --> 00:36:32.080
What do you do if somebody wants to use one of those non-assisting editors or you're working with a language that doesn't provide enough information to actually get that even in tooling that would otherwise show it,

00:36:32.080 --> 00:36:34.280
like some parts of JavaScript or something like that?

00:36:34.420 --> 00:36:39.060
So as I mentioned before, we have a couple of different types of studies that we have.

00:36:39.060 --> 00:36:45.980
So in cases where we can't rely on people discovering things on their own, we provide them with documentation.

00:36:45.980 --> 00:36:57.540
We set up a couple of experimental documentation sites, which we can iterate on pretty quickly where we just direct people to a site and they can look at reference documentation.

00:36:57.540 --> 00:36:58.160
I see.

00:36:58.160 --> 00:37:01.920
So here's the SDK functions and types and whatnot.

00:37:01.920 --> 00:37:06.820
Go look at that if you don't actually want to say dot and see the list or maybe an addition.

00:37:07.040 --> 00:37:07.480
Yeah.

00:37:07.480 --> 00:37:11.920
What about code that you all put into documentation?

00:37:11.920 --> 00:37:12.900
Right.

00:37:12.900 --> 00:37:14.960
You've got documentation for Python.

00:37:14.960 --> 00:37:16.560
You've got documentation for JavaScript.

00:37:16.560 --> 00:37:17.860
You both have these examples.

00:37:17.860 --> 00:37:20.140
These libraries are changing over time.

00:37:20.140 --> 00:37:25.040
The endpoints are changing potentially and, you know, extending or having better ways to do things.

00:37:25.040 --> 00:37:27.460
How do you deal with that kind of stuff?

00:37:27.460 --> 00:37:32.220
And do you have somebody go through and just go, all right, time to retry all the tutorials?

00:37:32.220 --> 00:37:33.380
Or what do you do there?

00:37:33.380 --> 00:37:33.780
Okay.

00:37:33.780 --> 00:37:37.320
So there is a couple of different things we were trying to do.

00:37:37.320 --> 00:37:41.300
So all of our packages live on our GitHub.

00:37:41.300 --> 00:37:49.120
And one thing that we have already implemented for a couple of languages, but not all, is exactly as you mentioned.

00:37:49.120 --> 00:37:58.520
It's kind of challenging to keep control of all of the code snippets and samples we have all across docs, all across all of other places.

00:37:59.280 --> 00:38:14.840
So one thing that we are trying to do is to write tests that, you know, we test all the time on an ongoing basis and basically be able to pull out snippets from these sources into our readmes and then eventually into docs.

00:38:14.840 --> 00:38:18.300
So that's something we have been putting a lot of work in.

00:38:18.560 --> 00:38:23.200
Already, most of our stuff in our GitHub should be fresh because of this.

00:38:23.200 --> 00:38:30.420
And we're now trying to ensure that the same thing happens when you're going to docs as we cross kind of reference our repositories.

00:38:30.420 --> 00:38:31.780
Yeah, that's really cool.

00:38:31.780 --> 00:38:37.140
You know, the challenge is that the little code snippet might need other stuff set up all around it, right?

00:38:37.140 --> 00:38:37.680
Right.

00:38:37.680 --> 00:38:50.780
The good thing is that usually in terms of the setup that's around it, that doesn't change as often because it's most, you know, having an instance of a service running or some sort of setting up the environment, which shouldn't change that often.

00:38:50.780 --> 00:38:53.700
Yeah, I'm thinking of like a tutorial that says, first, import this thing.

00:38:54.100 --> 00:38:56.980
Then a little bit later, it says, oh, make sure you set this connection string.

00:38:56.980 --> 00:39:01.000
And then a little bit later, it says, here's how you download a file or whatever, right?

00:39:01.000 --> 00:39:03.760
And you want to test the, here's how you download the file bit.

00:39:03.760 --> 00:39:08.500
Like the stuff that comes before it still has to happen, but it's not part of that snippet.

00:39:08.500 --> 00:39:10.740
Do you guys have examples like that you run into?

00:39:10.740 --> 00:39:11.120
Yeah.

00:39:11.120 --> 00:39:11.680
Yes.

00:39:11.680 --> 00:39:12.720
So we do have that.

00:39:12.720 --> 00:39:16.620
We have the, we're using things for generating a lot of this.

00:39:16.620 --> 00:39:18.120
So using the literal includes.

00:39:18.480 --> 00:39:27.420
So you can basically have a comment in the code that says this, this snippet or this part of my function or method corresponds to this example in there.

00:39:27.420 --> 00:39:31.420
So when you run through the whole thing, it will do the setup and you can spread.

00:39:31.420 --> 00:39:31.760
I see.

00:39:31.760 --> 00:39:34.100
It'll like chain them together or something like that.

00:39:34.100 --> 00:39:34.360
Yeah.

00:39:34.360 --> 00:39:34.620
Yeah.

00:39:34.620 --> 00:39:35.000
Okay.

00:39:35.000 --> 00:39:35.320
Yeah.

00:39:35.320 --> 00:39:38.960
The challenge is to keep everything up to date, as you alluded to.

00:39:38.960 --> 00:39:49.660
If there's new functionality, we can, it's relatively easy or not impossible to make sure that things continue to work, to make sure that things are using the best practices.

00:39:49.660 --> 00:39:53.860
If new best practices have come to light is much more challenging.

00:39:53.860 --> 00:39:54.300
Right.

00:39:54.300 --> 00:39:55.880
There's an old way of doing things.

00:39:55.880 --> 00:40:01.140
Of course, it still works because you wouldn't break it for old software, but you don't want them to do that anymore.

00:40:01.140 --> 00:40:01.420
Right.

00:40:01.420 --> 00:40:01.760
Right.

00:40:01.760 --> 00:40:06.300
So writing these examples, it's a little bit like giving someone a puppy.

00:40:06.300 --> 00:40:07.700
It's going to be work forever.

00:40:08.420 --> 00:40:09.180
That is true.

00:40:09.180 --> 00:40:10.020
Yeah.

00:40:10.020 --> 00:40:12.320
You got to walk it every day, even in the rain.

00:40:12.320 --> 00:40:13.620
Yeah.

00:40:13.620 --> 00:40:15.860
How about testing these libraries?

00:40:15.860 --> 00:40:24.800
What do you all do for making sure that your library up to Azure or whatever service it's talking to is still good?

00:40:24.800 --> 00:40:25.660
That's challenging.

00:40:25.660 --> 00:40:30.060
We were talking at the Python meetup here in Portland about this.

00:40:30.060 --> 00:40:34.540
And it's like, what if I wasn't connected and I wanted to run my test?

00:40:34.540 --> 00:40:36.020
How do I even get that to work?

00:40:36.320 --> 00:40:43.300
Or how do you test against real cloud environments, but you don't actually want to create a whole bunch of cloud environments?

00:40:43.300 --> 00:40:46.540
You just want to see if the API is still hanging together or something like that.

00:40:46.600 --> 00:40:50.420
It seems like a challenging thing to mock out all of Azure.

00:40:50.420 --> 00:40:51.060
Yes.

00:40:51.060 --> 00:40:55.980
So for what we're using is that we're using a recording framework.

00:40:55.980 --> 00:40:58.620
So basically record all of the requests and responses.

00:40:58.620 --> 00:40:59.660
Oh, interesting.

00:40:59.660 --> 00:41:00.000
Okay.

00:41:00.000 --> 00:41:02.580
Because it's very challenging.

00:41:02.580 --> 00:41:10.580
And I, especially since we want to be able to take contributions from the public, we want them to be able to write tests and run tests, obviously.

00:41:11.280 --> 00:41:15.720
But as with all clouds, it costs money to run things in the cloud.

00:41:15.720 --> 00:41:17.080
And we don't want to charge.

00:41:17.080 --> 00:41:17.620
Yeah.

00:41:17.620 --> 00:41:21.960
Some are cheap, but some of them are really quite expensive to just do a little bit with.

00:41:21.960 --> 00:41:22.180
Right.

00:41:22.180 --> 00:41:27.120
If you're going to provision, I don't know, a certain type of VM with a GPU because you need to test the GPU a bit.

00:41:27.120 --> 00:41:27.680
I don't know.

00:41:27.680 --> 00:41:27.920
All right.

00:41:27.920 --> 00:41:28.840
That could be expensive.

00:41:28.840 --> 00:41:29.320
Yeah.

00:41:29.360 --> 00:41:35.480
So what we have is that we make these recordings available so that you can run tests against these recordings.

00:41:35.480 --> 00:41:39.400
It's still challenging to come up with new tests if you want to contribute to new tests.

00:41:39.400 --> 00:41:42.220
Honestly, we don't have a good solution for that today.

00:41:42.220 --> 00:41:45.360
But that's, we're using these recordings as much as we can.

00:41:45.360 --> 00:41:53.120
And then we run, we call live tests on a nightly basis to make sure that things still work when actually using the services.

00:41:53.120 --> 00:41:54.920
The recording is not lying.

00:41:54.920 --> 00:41:56.740
The recording is not out of date, right?

00:41:56.740 --> 00:41:58.600
What library are you using for this?

00:41:58.680 --> 00:41:59.620
Is this a Python library?

00:41:59.620 --> 00:42:00.720
Yes.

00:42:00.720 --> 00:42:02.600
It's VCRPy that we're using now.

00:42:02.600 --> 00:42:03.380
VCRPy.

00:42:03.380 --> 00:42:04.180
That sounds very cool.

00:42:04.180 --> 00:42:04.900
Or PyVCR.

00:42:04.900 --> 00:42:05.640
Yeah.

00:42:05.640 --> 00:42:15.040
If you go to our GitHub repository, github.com/Azure slash Azure dash SDK dash for dash Python.

00:42:15.040 --> 00:42:15.980
Short name, I know.

00:42:15.980 --> 00:42:17.280
But you can see that.

00:42:17.280 --> 00:42:18.120
It rolls off the tongue, doesn't it?

00:42:18.120 --> 00:42:19.860
Yes, it does.

00:42:19.860 --> 00:42:20.680
Yeah, that's cool.

00:42:20.680 --> 00:42:22.180
You can see how you guys are using it there.

00:42:22.180 --> 00:42:23.420
Yeah, this is really cool.

00:42:23.420 --> 00:42:27.320
I hadn't heard about this, but I'm sure that'll be useful for people out there in general, right?

00:42:27.320 --> 00:42:29.800
Not just for people working with Azure tests.

00:42:29.800 --> 00:42:30.180
Yes.

00:42:30.180 --> 00:42:30.940
Yes.

00:42:30.940 --> 00:42:33.080
And this is not the library that we have produced.

00:42:33.080 --> 00:42:35.840
This is an open source component.

00:42:35.840 --> 00:42:36.960
Yeah, absolutely.

00:42:37.780 --> 00:42:40.660
So how do you deal with...

00:42:40.660 --> 00:42:45.260
It's still hard for me to get my mind around how many challenges you have for trying to keep all this stuff consistent.

00:42:45.260 --> 00:42:47.740
So you've got all these different endpoints.

00:42:47.740 --> 00:42:49.080
You've got these different languages.

00:42:49.580 --> 00:42:56.460
How do you collaborate at the documentation level for, okay, we're going to create this new thing that helps people use this.

00:42:56.460 --> 00:42:58.980
The JavaScript team's got to do it.

00:42:58.980 --> 00:43:00.260
Other teams got to do it.

00:43:00.260 --> 00:43:01.100
And they got to be consistent.

00:43:01.100 --> 00:43:03.740
What guidelines and advice do you have for that?

00:43:03.740 --> 00:43:06.620
For the documentation specifically or for the designs?

00:43:06.860 --> 00:43:09.660
More for the documentation, I guess, is what I was asking.

00:43:09.660 --> 00:43:10.660
Although both are interesting.

00:43:10.660 --> 00:43:16.840
But there's a lot of people or companies out there that have multiple technology stacks talking to their same thing.

00:43:16.840 --> 00:43:21.740
What advice do you have for them to help all the different consumers evenly?

00:43:21.740 --> 00:43:30.400
One thing that we are trying to do is to, first of all, better understand in terms of these different technology stacks, what are the most kind of often used patterns?

00:43:30.400 --> 00:43:34.820
And that kind of informs how we write the quick starts and the tutorials.

00:43:34.820 --> 00:43:48.800
On our side, the process, the way it looks is that our developers writing the libraries provide the reference documentation and then include some sort of basic guidance of what they see fit for the readmes that we have on our GitHub.

00:43:49.080 --> 00:44:04.260
And then for each service, we have a content development team that kind of tries to take it and write a more, some sort of a tutorial that's more digestible by all sorts of different audiences.

00:44:04.260 --> 00:44:10.660
And they have a better understanding of what exactly they need to provide for these particular use cases in these different scenarios.

00:44:10.660 --> 00:44:11.160
Okay.

00:44:11.160 --> 00:44:13.580
So there's like a canonical example.

00:44:13.580 --> 00:44:15.320
And this is what we wanted for here.

00:44:15.320 --> 00:44:18.960
And then make a JavaScript version, a Python version, and so on.

00:44:18.960 --> 00:44:19.240
Right.

00:44:19.240 --> 00:44:20.040
Exactly.

00:44:20.040 --> 00:44:20.560
Okay.

00:44:20.560 --> 00:44:21.520
That's quite cool.

00:44:21.520 --> 00:44:26.520
So this whole user testing of people consuming libraries, it's really interesting.

00:44:26.520 --> 00:44:33.320
And like I said, with the PyPI examples and those popular libraries, no, I suspect very few people are doing that.

00:44:33.320 --> 00:44:37.880
A few exclude like the Azure libraries and other big companies.

00:44:38.080 --> 00:44:43.020
But Opus Horse teams, they have these sprints and they have other feedback mechanisms.

00:44:43.020 --> 00:44:44.200
All the stuff we talked about.

00:44:44.200 --> 00:44:49.980
Do you have any advice where people might be able to recreate a little bit of this?

00:44:49.980 --> 00:45:01.840
You know, maybe at the end of PyCon, have a sprint where instead of trying to add new features, it's like, let's do some user testing for people who are attending the conference and are very passionate about our library.

00:45:01.840 --> 00:45:10.940
Or maybe try to grab somebody who's used the other library that's, you know, like Django versus Flask or something and have them come over and, you know, work in our world for a little bit.

00:45:10.940 --> 00:45:17.900
You know, without having one of these labs and whatnot, but maybe using things like LiveShare or something.

00:45:18.340 --> 00:45:29.840
What advice do you have for bringing some of these cool practices that you guys are doing and applying to your libraries to, you know, maybe much smaller groups or open source projects?

00:45:29.840 --> 00:45:31.760
I can start and Johan can nod in.

00:45:31.760 --> 00:45:34.580
But in terms of the conferences, I think that's an amazing idea.

00:45:34.580 --> 00:45:36.000
And that's exactly what we're doing.

00:45:36.000 --> 00:45:40.400
In November, we're attending a Microsoft conference, Microsoft Ignite.

00:45:40.400 --> 00:45:42.240
And that's exactly what we're doing.

00:45:42.240 --> 00:45:57.800
We had a couple, you know, stands set up, allowing people to kind of try things out on their own, as well as take surveys based on the feedback that they would have gotten by completing some basic tasks and kind of taking that down and kind of informing for their designs.

00:45:57.800 --> 00:46:06.420
So, yeah, I think it's absolutely a great way to easily be able to work with people directly if you don't usually have that in person.

00:46:06.420 --> 00:46:09.880
Yeah, it seems like it would be a cool thing for conferences to set up, right?

00:46:09.880 --> 00:46:13.960
I mean, at Ignite, you guys set that up and that's really cool because you're doing that sort of stuff.

00:46:13.960 --> 00:46:20.360
But I'm thinking at PyCon or some other, you know, major JavaScript conference or something, right?

00:46:20.360 --> 00:46:24.980
The conference organizers could have a section where, you know, you could sign up.

00:46:24.980 --> 00:46:26.540
Hey, I'm this library developer.

00:46:26.540 --> 00:46:27.280
I'm on this team.

00:46:27.280 --> 00:46:29.180
I want to have people go through my stuff.

00:46:29.180 --> 00:46:30.300
And I just think it would be great.

00:46:30.300 --> 00:46:32.640
I mean, I have no ability to set that up or anything.

00:46:32.640 --> 00:46:35.320
I can throw ideas out there and maybe people run with it.

00:46:35.320 --> 00:46:36.700
But it seems like it'd be really cool.

00:46:36.700 --> 00:46:38.660
Yeah, that seems like a really good idea.

00:46:39.020 --> 00:46:45.900
One challenge I think that we've seen with that is that very often people are happy to provide some feedback if this is something they really care about.

00:46:45.900 --> 00:46:54.160
But if that's not the case, then usually they would expect some sort of swag or something in return, which is fair.

00:46:54.160 --> 00:46:54.920
It's fair.

00:46:54.920 --> 00:46:56.660
And as companies, it's fine, right?

00:46:56.660 --> 00:46:59.120
It's easy for Microsoft to put together a certain amount.

00:46:59.200 --> 00:47:03.360
But as a solo developer on an open source project, it's much harder.

00:47:03.360 --> 00:47:12.500
But, you know, maybe like a cool little badge that's got the picture, like a little logo and like, you know, I helped improve this at PyCon or something.

00:47:12.500 --> 00:47:14.300
Or I helped improve Flask or whatever.

00:47:14.760 --> 00:47:17.940
I think people can make it work without too much involved.

00:47:17.940 --> 00:47:19.040
Yeah, that sounds like a good idea.

00:47:19.040 --> 00:47:19.340
Yeah.

00:47:19.340 --> 00:47:20.100
Johan, what do you think?

00:47:20.100 --> 00:47:21.640
You can look at it as a contribution.

00:47:21.640 --> 00:47:24.080
It may not be in the form of source code as well.

00:47:24.080 --> 00:47:24.300
All right.

00:47:24.300 --> 00:47:31.060
So having the contribution somewhere in and who contributed to the last release, you know, use relative feedback from people.

00:47:31.060 --> 00:47:36.360
That's a pretty good piece of currency to work with that they do have something that they could hand out easily, right?

00:47:36.800 --> 00:47:41.740
You don't have, you know, little robots that you can hand out for everyone who helps as an open source developer.

00:47:41.740 --> 00:47:43.900
But you do have, like you said, credit.

00:47:43.900 --> 00:47:44.520
That's cool.

00:47:44.520 --> 00:47:44.800
Yeah.

00:47:44.800 --> 00:47:53.940
And it's important as well to be clear on the fact that we have seen a little bit of bias that people want to be nice to you when they give feedback.

00:47:53.940 --> 00:47:57.260
But what you really need is the harsh feedback as well.

00:47:57.680 --> 00:48:06.900
So that's one thing that I think we're getting better at making clear that the participants that we want to hear the good and the bad and not just the good.

00:48:06.900 --> 00:48:07.180
Right.

00:48:07.180 --> 00:48:13.280
Tell us the truth, not just what you think we want to hear, even though it won't make your day not as good, I guess.

00:48:13.280 --> 00:48:13.540
Right.

00:48:13.540 --> 00:48:14.900
Yeah.

00:48:14.900 --> 00:48:15.820
So nice.

00:48:15.820 --> 00:48:18.420
All right, you guys, we're getting short on time here.

00:48:18.420 --> 00:48:23.160
So let me just ask you the final two questions and wrap it up.

00:48:23.160 --> 00:48:25.600
So Kate, we'll go with you first.

00:48:25.720 --> 00:48:28.640
If you're going to write some Python code, what editor do you use?

00:48:28.640 --> 00:48:32.040
I recently started using VS Code and have been enjoying it.

00:48:32.040 --> 00:48:32.280
Yeah.

00:48:32.280 --> 00:48:32.620
Yeah.

00:48:32.620 --> 00:48:34.540
You guys are doing a lot of cool stuff with VS Code.

00:48:34.540 --> 00:48:36.180
It's definitely growing quickly.

00:48:36.180 --> 00:48:36.720
Johan?

00:48:36.720 --> 00:48:36.920
Yeah.

00:48:36.920 --> 00:48:47.840
VS Code is probably my go-to editor right now, but I try to switch between them just to get a feel for what the experience is for using our libraries and the different editors.

00:48:47.840 --> 00:48:48.380
Yeah, sure.

00:48:48.380 --> 00:48:53.100
You definitely want to know, like, well, what's the experience in Sublime or what's it like in VI or whatever, right?

00:48:53.100 --> 00:48:53.380
Right.

00:48:53.380 --> 00:48:53.680
Sure.

00:48:53.840 --> 00:48:55.820
I switch between them basically every week.

00:48:55.820 --> 00:48:57.160
I use a new editor.

00:48:57.160 --> 00:48:59.060
That's got to be a little hard.

00:48:59.060 --> 00:49:00.680
I mean, I know you get used to it and all, but.

00:49:00.680 --> 00:49:03.260
Plenty of mistakes.

00:49:03.260 --> 00:49:04.220
Just, yes.

00:49:04.220 --> 00:49:06.200
Yeah, I bet.

00:49:06.200 --> 00:49:08.780
And then I'll throw this out to both of you.

00:49:08.780 --> 00:49:12.800
Either you can throw something in a notable PyPI package.

00:49:12.800 --> 00:49:15.220
Some library out there that you're like, oh, this thing is super cool.

00:49:15.220 --> 00:49:15.660
We'll use this.

00:49:15.660 --> 00:49:16.840
Maybe people haven't heard of it.

00:49:17.300 --> 00:49:20.800
And if you want, you're welcome to use VCRPy.

00:49:20.800 --> 00:49:22.540
Have you got another one?

00:49:22.540 --> 00:49:23.120
Throw it out there.

00:49:23.120 --> 00:49:24.260
That's a good question.

00:49:24.260 --> 00:49:26.640
That one I would have to think about a little bit.

00:49:26.640 --> 00:49:27.080
All right.

00:49:27.080 --> 00:49:28.560
How about VCRPy?

00:49:28.560 --> 00:49:29.320
That's a good one.

00:49:29.320 --> 00:49:31.280
Is it PyVCR or VCRPy?

00:49:31.280 --> 00:49:31.800
Yeah.

00:49:31.800 --> 00:49:40.780
There is a VCRPy and it sounds like it's the right one, but I don't want to recommend swapping it to the wrong one to people.

00:49:40.780 --> 00:49:41.060
Yeah.

00:49:41.060 --> 00:49:41.660
Yes.

00:49:41.660 --> 00:49:42.380
VCRPy.

00:49:42.380 --> 00:49:42.980
VCRPy.

00:49:42.980 --> 00:49:43.440
Okay, cool.

00:49:43.440 --> 00:49:43.640
Yeah.

00:49:43.640 --> 00:49:51.120
That's if you have things that are really hard to mock out and there's a complicated exchange, that seems like that's a pretty cool way to do it.

00:49:51.120 --> 00:49:51.400
Yep.

00:49:51.400 --> 00:49:51.780
Nice.

00:49:51.780 --> 00:49:52.080
All right.

00:49:52.080 --> 00:49:53.320
Final call to action.

00:49:53.320 --> 00:49:54.560
People are out there.

00:49:54.560 --> 00:49:56.320
Maybe they work at a big company.

00:49:56.320 --> 00:50:05.740
They've got a set of APIs they've got to document across languages or they work at some other company that exposes their API to the world and they've got a document.

00:50:05.740 --> 00:50:07.340
What advice do you have for them?

00:50:07.340 --> 00:50:10.640
Take some of these things you've learned and apply it in their world.

00:50:10.640 --> 00:50:14.260
It's not free to provide a good developer experience for people.

00:50:14.260 --> 00:50:22.720
So understand that you need to, if you want to have a good developer experience, you need to invest time and effort into doing it.

00:50:22.720 --> 00:50:33.600
So if you think that you can get away with having the same documentation for every language, auto-generate things, you will get part of the way, but it will not be great.

00:50:33.600 --> 00:50:34.340
Yeah, absolutely.

00:50:34.340 --> 00:50:35.320
I'll definitely show.

00:50:35.320 --> 00:50:36.480
Kate, what do you think?

00:50:36.480 --> 00:50:43.940
I think another important aspect is how, you know, ensuring that whatever you provide is really well documented.

00:50:43.940 --> 00:50:49.520
It doesn't matter, you know, how much work we put into making sure that things are consistent and idiomatic.

00:50:49.520 --> 00:50:53.300
In the end, people rely heavily on using documentation.

00:50:53.300 --> 00:50:57.960
So making sure you create an easy and kind of consistent story around that is super important.

00:50:57.960 --> 00:50:58.420
Awesome.

00:50:58.420 --> 00:50:59.320
Good advice.

00:50:59.320 --> 00:51:02.200
And thank you both for being here and sharing what you're up to.

00:51:02.200 --> 00:51:03.180
It's really cool.

00:51:03.180 --> 00:51:04.220
Thanks for having us.

00:51:04.220 --> 00:51:04.780
Thank you.

00:51:04.780 --> 00:51:05.120
Yep.

00:51:05.120 --> 00:51:05.340
Bye.

00:51:05.340 --> 00:51:09.180
This has been another episode of Talk Python To Me.

00:51:09.180 --> 00:51:16.600
Our guests on this episode were Kate Olasueska and Johan Stenberg, and it's been brought to you by Springboard and Clubhouse.

00:51:16.600 --> 00:51:22.060
Become a machine learning professional with Springboard's online bootcamp and get a job, guaranteed.

00:51:22.060 --> 00:51:26.220
Visit talkpython.fm/springboard to apply today.

00:51:26.220 --> 00:51:34.220
Clubhouse is a fast and enjoyable project management platform that breaks down silos and brings teams together to ship value, not features.

00:51:34.740 --> 00:51:35.960
Fall in love with project planning.

00:51:35.960 --> 00:51:39.040
Visit talkpython.fm/clubhouse.

00:51:39.040 --> 00:51:41.500
Want to level up your Python?

00:51:41.500 --> 00:51:46.360
If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

00:51:46.360 --> 00:51:54.520
Or if you're looking for something more advanced, check out our new async course that digs into all the different types of async programming you can do in Python.

00:51:54.520 --> 00:51:59.180
And of course, if you're interested in more than one of these, be sure to check out our Everything Bundle.

00:51:59.180 --> 00:52:01.060
It's like a subscription that never expires.

00:52:01.060 --> 00:52:03.200
Be sure to subscribe to the show.

00:52:03.520 --> 00:52:05.720
Open your favorite podcatcher and search for Python.

00:52:05.720 --> 00:52:06.860
We should be right at the top.

00:52:06.860 --> 00:52:15.840
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

00:52:15.840 --> 00:52:17.920
This is your host, Michael Kennedy.

00:52:17.920 --> 00:52:19.420
Thanks so much for listening.

00:52:19.420 --> 00:52:20.460
I really appreciate it.

00:52:20.740 --> 00:52:22.240
Now get out there and write some Python code.

00:52:22.240 --> 00:52:24.060
I'll see you next time.

00:52:24.060 --> 00:52:24.140
Bye.

00:52:24.140 --> 00:52:24.220
Bye.

00:52:24.220 --> 00:52:24.240
Bye.

00:52:24.240 --> 00:52:54.220
Transcription by CastingWords

