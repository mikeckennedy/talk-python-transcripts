00:00:00 Are you going to PyCon or a similar conference this year?

00:00:02 Join me and Kenneth Wright as we discuss how to make the most of PyCon and what makes it special for each of us.

00:00:08 We also cover a buffet of other topics, packaging, pip, nth, developing Python on Windows, async and await, and more.

00:00:15 This is Talk Python To Me, episode 208, recorded April 3rd, 2019.

00:00:21 Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:41 This is your host, Michael Kennedy.

00:00:43 Follow me on Twitter, where I'm @mkennedy.

00:00:45 Keep up with the show and listen to past episodes at talkpython.fm and follow the show on Twitter via at Talk Python.

00:00:51 Hey, folks, a quick announcement.

00:00:53 The Talk Python training application has been out for a week or so, and the reception has been great.

00:00:58 Many people have let us know that the offline access and native mobile device experience has been a big boost for them.

00:01:04 It's also rewarding to see so many people joining the free Python courses

00:01:08 that we offer right in the app.

00:01:09 Just create an account, log in, and tap the free courses you want, or access the ones that you purchased.

00:01:14 Check it out at training. talkpython.fm/apps.

00:01:18 It's 100% free.

00:01:19 The Android app is out right now, and we're publishing the iOS version to the App Store tomorrow.

00:01:24 Now, let's chat with Kenneth.

00:01:26 Kenneth, welcome to Talk Bython.

00:01:28 Hi, Michael.

00:01:28 Yeah, it's great to have you back.

00:01:30 I know we're going to have such a fun time talking about a whole bunch of things.

00:01:33 How have you been?

00:01:34 I've been well.

00:01:34 I've also been unaware, but, you know, things ebb and flow.

00:01:37 Yeah, that's certainly the way of things, isn't it?

00:01:40 Well, I'm glad you're doing well now.

00:01:41 It sounds to me like you're coming to us kind of like from some radio past here.

00:01:46 Yes, I'm coming to you from the transatlantic accent of the 1950s.

00:01:49 You might not know that the old radio voice that you hear, it is the responsibility of two different factors.

00:01:55 One of them is this microphone.

00:01:57 I'm using an astatic microphone.

00:01:59 This is model number D-104.

00:02:01 I found it in an antique shop.

00:02:03 It doesn't use XLR, but I made my own XLR connection for it.

00:02:07 And it is a crystal microphone, and it sounds absolutely wonderful.

00:02:11 That is responsible for the 50s sound.

00:02:13 The other component is they actually trained people to speak in something called the transatlantic accents.

00:02:19 It was supposed to be something that old style of speaking you would hear in movies.

00:02:23 It wasn't the way people talked.

00:02:25 It was actually you would go to school, and you would learn how to speak this accent

00:02:29 if you wanted to be an actor or an actress or work in media.

00:02:31 So just a useful piece of information there.

00:02:34 That's so interesting.

00:02:35 I had no idea.

00:02:35 Well, it's fun to have a bit of a blast from the past, and I'm pretty impressed you made your own XLR cable.

00:02:41 That's cool.

00:02:42 You know, people know you from many of the popular projects, probably the biggest being requests,

00:02:47 but a bunch of others, pip, EMP, and Responder, and some other things.

00:02:51 So maybe we won't go too much.

00:02:55 That's a whole bunch of other stuff.

00:02:56 Don't want to make it a catalog.

00:02:58 But maybe we won't go into so much to how you got into programming because you've been doing it for a whole long while.

00:03:04 I think we mentioned it on the other show, how I got into it, right?

00:03:07 Yeah, exactly.

00:03:07 The story is in a previous episode that we already talked about.

00:03:10 That's right.

00:03:10 So maybe let's just catch up with you on what you're up to today.

00:03:14 I believe when I spoke to you previously, you were at Heroku, and now you're hanging out over in the DigitalOcean space.

00:03:22 What are you doing?

00:03:22 Yeah, I'm deep in the sea at DigitalOcean.

00:03:24 I'm a developer evangelist advocate, actually.

00:03:27 That's my title.

00:03:28 I'm a senior developer relations advocate over at DigitalOcean.

00:03:31 And I spend my day-to-day interacting with developers and helping understand them and their needs

00:03:37 and helping communicate that to the brand and helping communicate the brand to the developers.

00:03:42 So it's a good thing.

00:03:43 Yeah, that sounds super fun.

00:03:45 How much of that is Python?

00:03:46 How much of that is Linux?

00:03:47 How much of that is DevOps?

00:03:49 What's that look like?

00:03:51 It's really to be determined.

00:03:52 I'm still figuring that out.

00:03:53 At first, it seems like it's going to be more Python than I thought, just because my audience is Python, and it's what I'm really good at.

00:03:59 Python is part of the Linux standard base, and that's really important.

00:04:04 Python, as part of the Linux standard base, and what that means is you don't have Linux without Python.

00:04:10 If you remove Linux from Python or Python from Linux, you don't have Linux anymore.

00:04:15 It's not Linux.

00:04:16 Linux is not Linux without Python installed in it.

00:04:20 So that is an important distinction that a lot of people don't realize.

00:04:24 And that's why a lot of these key distinctions about what decisions we're making in Python community versus 2 and 3

00:04:29 and what are we going to call the binary in these different distributions is really important

00:04:35 because Linux depends on Python to function.

00:04:39 It's like Bash except for way more powerful and more expressive.

00:04:43 And I love Bash.

00:04:44 Bash is one of my favorite languages because if you're operating with subprocesses inherently,

00:04:50 then you use Bash.

00:04:52 But if you're doing anything else, then you use Python, basically.

00:04:56 That's my policy.

00:04:57 All right.

00:04:57 That's a cool idea.

00:04:58 Yeah.

00:04:59 And so as far as my job is concerned, I want to work with developers.

00:05:03 And I have this coworker named Eddie Zaneski, who's a great guy who goes to a lot of conferences,

00:05:08 and he's managing the developer relations team.

00:05:11 And I don't report to him, but he kind of oversees some of the strategies of what we're doing,

00:05:17 kind of lower-level strategies.

00:05:19 And he is focused on Kubernetes.

00:05:23 So he's really in-depth in Kubernetes.

00:05:25 So I tried to get into that world, and I focused a lot.

00:05:28 I tried to write an operator, and I kind of got beat up.

00:05:31 I got really far, actually.

00:05:32 I learned a lot, and I got really advanced in some advanced Kubernetes stuff.

00:05:37 But I learned where my place is.

00:05:39 And my place is, I want to focus on the deployment experience of a droplet

00:05:44 and this accessibility of the people using droplets and just enabling the developers of people who are using Linux

00:05:52 to have a great experience.

00:05:53 And that's people who are using Python, too.

00:05:55 So I think that it all kind of fits together into the big picture.

00:05:58 So I'm supporting Python people as much as I always have.

00:06:01 I also want to support general Linux usage and their education, because that's a lot of things.

00:06:07 Another big thing my community team does is write those great tutorials that everyone knows and loves.

00:06:12 Yeah, the tutorials there really are fantastic.

00:06:14 Often, I'll be just randomly searching the internet for like, how do I do this with Ubuntu?

00:06:19 And I end up like right there with you guys.

00:06:21 Well, thank you very much.

00:06:21 My team is responsible for that.

00:06:23 Right on.

00:06:24 I'm not claiming anything.

00:06:25 It's a different part of my team.

00:06:26 But it takes a significant effort to maintain that.

00:06:29 So some of them will be at PyCon, some of the editorial team.

00:06:32 So feel free to reach out to me, and I'll point you in the right direction

00:06:36 to talk to some of the people that help maintain those articles.

00:06:38 Because writing them is one thing, but keeping them up to date is another thing.

00:06:42 So it's interesting to solve and solve.

00:06:44 Yeah, some of them even have dropdowns, right?

00:06:48 Like this version of Linux, like 1804, 1604, 1610, or whatever.

00:06:54 And that's a whole nother level.

00:06:55 That's pretty impressive.

00:06:56 I've never seen that on any other knowledge base.

00:06:59 No, I haven't either.

00:07:00 Maybe under documentation, right?

00:07:03 Versions for doc, but not for just random tutorials.

00:07:05 It's really cool.

00:07:06 Yeah, knowledge base is never.

00:07:08 Oh, maybe for a project, right?

00:07:11 Yeah, exactly, exactly.

00:07:12 Yeah, I also, I could do other things.

00:07:14 Do you want me to talk about that?

00:07:15 Yeah, absolutely.

00:07:15 I mean, let's talk about some of your open source stuff that you've been up to lately.

00:07:18 Not much.

00:07:19 I might, like, cool.

00:07:21 I want to focus on the things that are unrelated to that.

00:07:24 So I'll talk about the open source project that I'm excited about, which is called Py Theory.

00:07:28 I basically wrote a system that is capable of representing any music system, musical system.

00:07:35 Nice.

00:07:36 So it has one built in called Western, which is a diatonic system, which means it uses 12 notes

00:07:42 per octave.

00:07:43 It does make an assumption that you're using octaves, but that's kind of a base assumption.

00:07:49 I'm not aware of any musical systems that have, like, double octaves or anything like that.

00:07:54 I'm sure they exist or could exist, but, you know, one thing at a time.

00:07:57 So you could have another system that has, say, eight per octave or seven or two.

00:08:03 And so those could be put in very easily.

00:08:06 It's strings.

00:08:07 You define a system.

00:08:09 And then you have notes.

00:08:11 And the notes represent tones.

00:08:13 And the tones represent frequencies.

00:08:15 And the frequencies represent symbols.

00:08:17 The frequency, actually, the tones represent math formulas, actually.

00:08:22 And the math formulas can be represented by pitches.

00:08:25 And the pitches can be represented by decimals or symbolic.

00:08:29 It's just very accurate math and music theory stuff.

00:08:33 iPython Notebook is linked to in the ReadMe, where I use it to find correlative musical keys.

00:08:41 So if you have A minor, it's the same.

00:08:44 It contains all the same notes.

00:08:46 C major, right?

00:08:47 It's all the keys on the keyboard.

00:08:49 So, like, how do you find that out?

00:08:51 I don't know how to find that out.

00:08:52 So I told my computer to find out for me.

00:08:55 So I can put in, like, F sharp, F minor.

00:08:57 And it'll tell me what other keys use the same notes, which is really useful if you're sampling, for example.

00:09:04 If you have, like, a sample that's in G minor, and you're like, can I use this in my song?

00:09:08 Does it fit?

00:09:09 Then you can plug it into my little iPython Notebook.

00:09:12 And it'll tell you.

00:09:12 Interesting.

00:09:13 It's kind of like the design color wheel of music, where you pick, like, one spot,

00:09:18 and it'll say, these are, like, the complementary colors.

00:09:20 This is, like, the complementary sounds and notes and so on.

00:09:23 It's just one application of it.

00:09:24 It has infinite applications, but no one's really using it because no one understands it.

00:09:28 But it's a really cool library.

00:09:31 Yeah, it's cool.

00:09:32 There's a bunch of people doing, like, theoretical musical analysis with Python these days, actually.

00:09:38 I think they would find my library useful if they knew it existed.

00:09:41 So I wanted to talk about it.

00:09:44 Yeah, that's awesome.

00:09:44 So PyTheory, that's cool.

00:09:45 I'll put a link in the show notes as well.

00:09:47 Have you seen the FoxDot live coding musical performance stuff?

00:09:51 Yeah, I've played a lot with a few of those.

00:09:53 There's the one that uses, like, Erlang.

00:09:55 No, what's the Java?

00:09:57 Scala?

00:09:58 No.

00:09:58 There's the JVM language that looks like Scheme.

00:10:04 What's that called?

00:10:04 Yeah, I don't know.

00:10:05 I've done Scheme.

00:10:06 I'm sorry.

00:10:07 Yeah, yeah, it's all right.

00:10:08 There's a live performance thing that's like that.

00:10:10 I think the Fox one might be that.

00:10:13 Nice.

00:10:13 I'm trying to be too accurate.

00:10:14 I'll be more casual.

00:10:17 No, those are really fun, watching those.

00:10:20 But this sounds more like formal analysis, not just like, let's make some noise.

00:10:23 And then also, you've been probably doing a lot of photography.

00:10:26 I know you're a big into photography.

00:10:28 Yeah, I'm doing a lot of photography, and I'm doing a lot of videography.

00:10:31 Lately, I have a GoPro, and it's my new favorite device.

00:10:33 The GoPro Hero 7 is fantastic.

00:10:35 And that company does not get enough credit.

00:10:38 I have not done any research at all.

00:10:40 I just use the damn thing, and I love it.

00:10:42 And it is so seamless, and they have put so much thought into the hardware as well as the software,

00:10:48 that I am making a claim that they must, the only company who's put that much thought into things is Apple,

00:10:54 and potentially Olympus, and Leica, and a few other, Fuji, potentially.

00:11:00 Those are the companies I'm aware of who puts that much thought into things.

00:11:03 So I think they have engineers that used to work at Apple, or Nest, or stuff like that.

00:11:09 Sure.

00:11:09 Yeah, it's cool.

00:11:10 Those are incredible devices.

00:11:11 I mean, just the quality and stuff.

00:11:13 It doesn't need a gimbal.

00:11:14 It's amazing.

00:11:15 That's how they sell it, is that it doesn't need a gimbal.

00:11:18 You can violently shake it in your hand, and it doesn't need a gimbal.

00:11:22 But that's not the cool part.

00:11:24 The cool part is the workflow is so seamless.

00:11:27 I don't have to plug it in.

00:11:28 It just syncs over Wi-Fi, and I can just share the videos.

00:11:30 I don't have to edit them.

00:11:31 You can change the thing that it makes, but it just makes this amazing montage video

00:11:35 that's exactly what I wish I could do out of the box.

00:11:38 So I upload a vlog every day, and it takes me like, it takes about half an hour to wait

00:11:42 for it to sync and to make sure that there's nothing that I don't want uploaded, uploaded.

00:11:47 But it's just a great workflow experience.

00:11:49 They know what they're doing, and they don't get enough credit for that.

00:11:51 Yeah, cool.

00:11:52 Well, I've definitely considered using them, not in the technical space, but definitely

00:11:57 consider using them for some things.

00:11:58 And it seems great.

00:12:00 So if you see me at PyCon, I will have a GoPro, and I will be filming you.

00:12:02 Right on.

00:12:04 Are you going to do like a live walk around V-blog type thing?

00:12:08 I'm going to be vlogging, and I'm going to be heavily documenting PyCon, yes.

00:12:11 Right on.

00:12:11 That'll be cool.

00:12:12 Definitely.

00:12:12 I'm going to be wearing bright colors, so it'll be very evident that I'm making an appearance.

00:12:16 And I want to not disturb anyone who doesn't want to be filmed, obviously.

00:12:20 So it'll be an interesting balance between those two things.

00:12:23 Nice.

00:12:24 You have to put some big bright lights on you, so it's obvious you're a camera person.

00:12:27 Yeah, well, I'm practicing wearing bright colors and bright shoes, and I painted it orange.

00:12:31 So, you know, it'll be pretty bright.

00:12:34 So we'll see.

00:12:35 No, it sounds super cool, and I'm looking forward to checking out the video.

00:12:37 That's going to be great.

00:12:38 Thank you.

00:12:38 Yeah, another thing that we were talking about right before we hit record that you've been

00:12:42 up to that is, you know, maybe a little bit different for folks is you've been doing

00:12:46 a lot of C colon backslash, not so much dollar sign these days, right?

00:12:50 I have.

00:12:50 I'm using PowerShell because I'm running Windows 10 as my main and only operating system.

00:12:55 Well, no, I use all operating systems every day, but including Android and iOS.

00:12:59 My primary operating system is Windows.

00:13:02 That's super interesting.

00:13:04 You know, I used Windows as my primary operating system for a long time.

00:13:07 These days, I'm on my Mac for development and Linux for production.

00:13:11 But, you know, what's the story there?

00:13:13 Like, how do you get onto Windows?

00:13:14 I'm not sure why I did it.

00:13:15 I did it because I was bored mostly.

00:13:17 Yeah.

00:13:18 And it was a challenge.

00:13:19 And a part of reasons I could give, like playing games is one, but I don't really do that.

00:13:26 It's just an excuse.

00:13:27 It is an excuse.

00:13:28 Yeah.

00:13:29 I really enjoy it.

00:13:30 And I'm really hyper-efficient Windows.

00:13:31 And Windows is not what it used to be.

00:13:33 It's actually a better operating system than macOS, I'll say.

00:13:36 It's not as well designed when it comes to some of the polish, but it's so much more powerful.

00:13:42 And I'm going to make some assertions in that way.

00:13:44 Very simple.

00:13:45 And I won't explain them.

00:13:46 All right.

00:13:47 But WSL is a very powerful system that is better than having the system built on Unix.

00:13:56 It's better to have an operating system built on itself and that you can dip into Unix at any time.

00:14:02 Right.

00:14:02 So just for folks listening, just to set the context, WSL is Windows.

00:14:06 Subsystem for Linux.

00:14:07 Subsystem for Linux.

00:14:09 Yeah.

00:14:09 So this is like, basically, you go to the Windows 10 store and you say, I want Linux.

00:14:12 Here's a couple of distributions.

00:14:13 You say, yes, Ubuntu or whatever.

00:14:15 You're good to go.

00:14:16 Basically, if you're saying you click, I want Ubuntu, you click install.

00:14:20 After you exchange a few settings, and then you have Ubuntu available.

00:14:24 And then on the command line, whenever you're in the command line, which you set up to look pretty,

00:14:28 I have a pretty shell just like all of you do.

00:14:30 And it has git status just like all of you do.

00:14:32 It's very easy to set up.

00:14:34 And I type WSL space and any command I run runs in Linux.

00:14:39 And it just runs in line.

00:14:40 And I can, so if I want to type WSL space LS, it runs it in Linux and just returns.

00:14:46 And I just ran that in Linux.

00:14:48 And if I don't, if I want to run a regular LS that's in my Windows system, I run LS.

00:14:52 And if I want all the Linux command utilities, I get them from installing git bash.

00:14:56 And I just tell it to install it.

00:14:57 There's like the third option when you're installing it is right from this, the command line prompt

00:15:02 instead of from MSys or whatever.

00:15:04 And it gives you all the Linux command line tools in Windows.

00:15:09 So it just like gives you the perfect setup really easily.

00:15:11 And you type WSL space.

00:15:13 And then I could type, if you don't have WGET installed, like for example, on Windows,

00:15:17 you just do WSL space WGET.

00:15:19 Yeah.

00:15:19 Or you just type WSL enter and it drops you into your shell.

00:15:23 You know, so it's just perfect.

00:15:25 Right.

00:15:25 That's super cool.

00:15:26 Current directory gets passed along and all that stuff.

00:15:29 I think that's great.

00:15:30 I've heard about it.

00:15:31 I haven't done a ton with WSL, but it sounds, sounds pretty neat.

00:15:35 This portion of Talk Python To Me is brought to you by Linode.

00:15:40 Are you looking for hosting that's fast, simple, and incredibly affordable?

00:15:44 Well, look past that bookstore and check out Linode at talkpython.fm/Linode.

00:15:49 That's L-I-N-O-D-E.

00:15:50 Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:15:55 They have 10 data centers across the globe.

00:15:57 So no matter where you are or where your users are, there's a data center for you.

00:16:01 Whether you want to run a Python web app, host a private Git server, or just a file server,

00:16:05 you'll get native SSDs on all the machines, a newly upgraded 200 gigabit network, 24-7 friendly

00:16:12 support, even on holidays, and a seven-day money-back guarantee.

00:16:15 Need a little help with your infrastructure?

00:16:17 They even offer professional services to help you with architecture, migrations, and more.

00:16:22 Do you want a dedicated server for free for the next four months?

00:16:25 Just visit talkpython.fm/Linode.

00:16:30 I think it is great that you're working in Windows.

00:16:32 So many people use Python on Windows, right?

00:16:36 We need developers working there as well.

00:16:38 The problem that this really solves for me is I never have to add Python or Windows compatibility

00:16:43 to any Python software I'm building now.

00:16:45 Because it's built in from day one.

00:16:48 You do that as you develop it, right?

00:16:50 Exactly.

00:16:50 Responder is built completely in Windows, so I don't have to add Windows compatibility.

00:16:54 Yeah.

00:16:54 And that's exactly why I was excited to hear you doing this, right?

00:16:58 Because so many folks only work in Linux, or they only work in some variation of macOS

00:17:03 and Linux.

00:17:04 And then poor sucker that comes along and wants to use this project on Windows, and then they

00:17:09 hit some corner case that doesn't work, and it's frustrating, right?

00:17:12 I will add a quick asterisk.

00:17:13 It is very, very painful if you want to do low-level programming.

00:17:17 Because I want to build a, there's the Love 2D library that is for building games, and

00:17:23 I want to port that to Python.

00:17:24 I can't do it myself.

00:17:26 I think I might approach the PSF to see if they will fund this happening, and I can organize

00:17:31 it.

00:17:31 And I cannot figure out an easy way to do this on Windows.

00:17:35 I think I need a Linux or macOS system in order to easily just build the binary.

00:17:40 Because the binaries are too tightly tied to that OS, that kernel.

00:17:44 Unless I drop completely into WSL, which I want to avoid.

00:17:48 Right, right.

00:17:49 That's not really building it for Windows, right?

00:17:51 That's like making it run on Windows.

00:17:53 Yeah, unless I use Visual Studio, which I don't want to do.

00:17:55 So I, because I use Visual Studio code, not Visual Studio.

00:18:00 And I don't want to install, you know, a 14 gig IDE to run my little game.

00:18:06 So I don't know.

00:18:07 Well, I'm figuring it out.

00:18:09 Anyway, we can move on.

00:18:10 Yeah, yeah.

00:18:10 Sounds good.

00:18:11 No, but I think it's pretty cool.

00:18:13 And I'm sure there's a lot of benefits that are coming out into the various projects that

00:18:18 you're working on and giving feedback to running over there.

00:18:21 So super.

00:18:21 Speaking of projects, I did talk about your most well-known one, Requests.

00:18:26 So pretty interesting stuff you got going on there.

00:18:29 You know, one thing that I've been super excited about lately is async and await.

00:18:33 Yeah.

00:18:34 It's not perfect.

00:18:34 I think it's a bit of a letdown.

00:18:36 You think so?

00:18:36 All right.

00:18:37 I think it's pretty nice when you're doing stuff with other systems.

00:18:42 I mean, computationally, let's hear the counter-arguing.

00:18:45 Async and await is a fantastic primitive that allows you, it gives you the, it gives Python

00:18:49 the inherent ability to give you async and await programming just like JavaScript has, right?

00:18:55 Because they have async and await and it works.

00:18:57 And it gives you, but the community hasn't caught up yet to that.

00:19:02 Yes.

00:19:03 Requests, for example, doesn't support async and await.

00:19:06 So if you want to do HTTP, you have to use some crappy HTTP library.

00:19:09 AIO, HTTP, client session, et cetera, et cetera.

00:19:12 Yeah.

00:19:12 I'm not saying those are bad, but they're not, they're not the thing you want.

00:19:16 Yeah.

00:19:16 You're probably converting your HTTP layer to use a different thing, right?

00:19:22 Probably it was built in requests and now it's not.

00:19:23 And that's not a problem with async and await.

00:19:25 Async and await are perfect primitive.

00:19:26 It's just a community thing.

00:19:29 It's a trade-off of effort and reward and the effort and reward ratio is the reward of putting

00:19:37 async into requests is very low.

00:19:41 The effort is very high.

00:19:43 I'm doing it anyway.

00:19:45 Yeah.

00:19:47 Because I like you guys.

00:19:49 I like you all.

00:19:50 I'm very excited about this, actually.

00:19:52 I'm doing it with the help of Tom Christie, thankfully.

00:19:54 Yeah, cool.

00:19:55 He's helping me out.

00:19:56 And what we're doing is we're going to introduce request3, which is, it'll be a new package

00:20:01 called request3.

00:20:03 You'll pip install request3.

00:20:04 And it will have a dependency called requestcore.

00:20:07 And requestcore will be a low-level library that has two functions.

00:20:10 It'll have request and it'll have blocking request.

00:20:13 And they both will optionally accept the pool manager, which can accept the, in the pool manager,

00:20:19 you provide an event loop if you have one.

00:20:21 And in your arguments for how many pools you want and stuff like that.

00:20:26 You also always must provide a timeout.

00:20:28 That's the new thing.

00:20:29 So historically in requests, you don't provide a timeout.

00:20:34 It can block forever.

00:20:35 And I'm making the assertion that, no, you must always provide a timeout because that is proper.

00:20:40 Yeah.

00:20:40 And so that's the new thing in request3.

00:20:42 And so Tom Christie is working on requestasync.

00:20:45 And that's coming together.

00:20:46 And it looks like in the next probably year and a half, we'll have it out.

00:20:50 That's cool.

00:20:50 I'm looking forward to it.

00:20:51 I think it'll be great to have that out there, right?

00:20:53 Like it's just one more advantage, one more feature people can take advantage of by moving to modern Python, right?

00:21:01 And if all this stuff's built on requests, you know, they're like, oh, great.

00:21:04 There's this async stuff, but I can't really use it because I don't want to rewrite that layer.

00:21:07 But now, right, you more or less can.

00:21:09 I mean, minor changes to slightly alter the imports and stuff.

00:21:13 I have to make great changes.

00:21:14 Ideally, you have to make very little changes.

00:21:16 That's the goal.

00:21:17 Yes, exactly.

00:21:18 That's a good breath, right?

00:21:20 And you can try this method out now because I wrote something called request threads.

00:21:24 It just spawns a bunch of threads, but it gives you the API feel of using async and await today.

00:21:31 And it uses a twisted to do that.

00:21:34 And it works on Python as well, so you can do that if you'd like.

00:21:38 Cool.

00:21:38 But I did all that work and no one cared.

00:21:40 So that's the thing.

00:21:41 No one cares, except for the people that do care.

00:21:43 And the people that do care are like, it's threads.

00:21:45 Why do I care?

00:21:46 I want real async.

00:21:47 And so the people that want real async are a very quiet audience that care a lot.

00:21:52 And they don't mind doing the work of doing it by hand.

00:21:56 But I want to make their lives better anyway.

00:21:58 So that's what I'm trying to do.

00:21:59 Yeah, I think that's great.

00:22:00 You know, certainly those sorts of changes can dramatically improve the concurrency, parallelism stuff.

00:22:07 The problem I'm trying to figure out is the async stuff, all it's really going to do is help people who are doing evil things.

00:22:13 Yeah, hitting a bunch of servers.

00:22:16 That concurrently, probably up to no good.

00:22:19 I'm just kidding.

00:22:20 It's a joke.

00:22:20 Yeah, yeah.

00:22:21 I'm sure there will be some fraction of that, which is true.

00:22:26 But there's also all the microservices and other API stuff, right?

00:22:29 Oh, absolutely.

00:22:30 I just guarantee requests is used for evil.

00:22:32 There's no doubt in my mind.

00:22:34 Well, that's an interesting point, right?

00:22:35 Like, you make a ton of these libraries, right?

00:22:38 I sometimes have these thoughts with my courses, right?

00:22:41 Am I teaching somebody who is going to take this knowledge that I'm putting out there and turn around and go do something I would rather not help them do?

00:22:50 You are.

00:22:50 You're equipping people with knowledge.

00:22:52 That's why you have to teach them ethics, too.

00:22:53 Yeah.

00:22:54 You should add an ethics section to your courses.

00:22:56 I should.

00:22:57 It's not a joke.

00:22:58 I'm serious.

00:22:58 That was the first thing they taught me in computer science when I dropped out.

00:23:02 But it was ethics, computer science, and it was so helpful.

00:23:05 I think there's something to that.

00:23:06 I mean, certainly in, like, a screen scraping section I had, you know, I talked about terms of services and how you work with that.

00:23:14 And so a little bit.

00:23:15 But, like, you know, it's like saying, yeah, if you're going to rob a bank, you know, don't use my gun.

00:23:20 I don't know.

00:23:21 Like, it feels like the people who really just don't are not going to do great stuff are not really going to care.

00:23:26 If you're going to try to write some virus or hack some system, yeah.

00:23:29 Well, it's like locks.

00:23:30 Locks are to prevent innocent people from stealing.

00:23:32 That's all they are.

00:23:33 Yeah.

00:23:34 Right?

00:23:34 Cryptography is different because it can actually keep things safe.

00:23:38 But regular locks are to keep innocent people from stealing.

00:23:42 So that's what ethics are.

00:23:44 When you're teaching ethics and introducing them to people in your courses, you can just introduce them as you're teaching, like, remind people of ethics.

00:23:52 As you equip them with information and power, you have to guide them because they are being given tools that they weren't aware of before.

00:23:59 And they're like, oh, now I could do this bad thing.

00:24:01 And they are innocent people.

00:24:03 And you have to kind of guide them towards the light.

00:24:06 You know what I mean?

00:24:06 Yeah.

00:24:07 I suspect that you're right, that there's a lot of folks who, you know, with a little guidance wouldn't do anything.

00:24:12 But, yeah, I guess it is true that...

00:24:14 I've experienced that a lot as mentoring people.

00:24:16 I start...

00:24:17 As they gain power, they're like...

00:24:20 They start talking about all the things they could do.

00:24:22 And then I have to correct them immediately.

00:24:24 You know?

00:24:25 Yeah.

00:24:25 I've seen that multiple times.

00:24:26 The light comes on.

00:24:28 You're like, wait a minute.

00:24:29 I could what?

00:24:30 And I did that myself when I was young.

00:24:31 So I think it happens with every developer.

00:24:33 That's an interesting point.

00:24:34 So, you know, on this async and await thing, it sounds to me like what you're saying is the constructs are sound.

00:24:41 The programming API is super sound.

00:24:44 But what we really need for it to not be a letdown and be really amazing is for more of the libraries to take advantage of it and have it sort of more pervasive if we want to use it.

00:24:55 I know Request needs to use it more.

00:24:57 I'm not aware of any other shortcomings.

00:24:59 I don't know of any other application where it's really required.

00:25:02 Do you?

00:25:03 Sequel Alchemy.

00:25:03 Okay.

00:25:04 Yes.

00:25:04 It would be very...

00:25:06 I mean, if you're running a website and it can take, you know, synchronously...

00:25:10 It could take...

00:25:11 Yeah.

00:25:11 Sequel Alchemy is exactly the same as Request, basically.

00:25:14 It's just making outbound calls.

00:25:15 Yeah.

00:25:16 I mean, it's a network call.

00:25:17 Yeah.

00:25:18 Exactly.

00:25:18 It's a network call.

00:25:19 Anywhere where you're making a network call.

00:25:20 Right.

00:25:21 Redis.

00:25:21 All those network.

00:25:23 That's exactly the thing.

00:25:24 Anytime you're talking to something else, right?

00:25:27 Typically, that's HTTP through requests or it's some other thing.

00:25:32 You know, Mongo Engine talking to MongoDB.

00:25:34 Sequel Alchemy talking to Postgres.

00:25:36 The Redis API talking to the Redis endpoints, right?

00:25:40 These types of things.

00:25:41 You know, you could massively scale.

00:25:44 So...

00:25:44 Someone's going to go out and build those things.

00:25:46 They're going to listen to this podcast or they're going to notice on their own.

00:25:49 And they're going to go out and build their own library.

00:25:51 And it's going to be called like Redis Async.

00:25:52 And that's the problem.

00:25:53 Exactly.

00:25:54 There is a Redis Async.

00:25:55 There's like a...

00:25:55 And that's good.

00:25:56 Maybe it's called Async Redis.

00:25:58 I'm not entirely sure.

00:25:59 But yeah, there certainly are.

00:26:01 No, it's not inherently bad.

00:26:02 I think that's good that people are doing that.

00:26:04 Some people shame people for doing that.

00:26:06 And it's not bad.

00:26:07 Yeah.

00:26:07 It's good that they're doing that.

00:26:08 But that effort does need to be concentrated on the original library.

00:26:11 And if the original library is hesitant to accept those changes, then a fork should take place or a new library should be built that is intended to supplant it.

00:26:21 Yeah, for sure.

00:26:22 You know, another one is Open.

00:26:23 Like the built-in Open.

00:26:24 All the file IO stuff.

00:26:26 Codex.open?

00:26:27 No, just like...

00:26:28 Open.

00:26:28 I want to open a text file and read it.

00:26:30 With Open, you know, text file as stream.

00:26:33 Right?

00:26:34 Because file IO is perfect for this kind of stuff.

00:26:37 You use an iterator when you're...

00:26:38 I iterate over Open, don't I?

00:26:40 Yes.

00:26:41 Because it's not...

00:26:42 It doesn't block.

00:26:42 Open is immediate, isn't it?

00:26:44 I mean, it's waiting on external...

00:26:45 It's like waiting on disk, right?

00:26:47 Especially if the disk is network.

00:26:48 Well, it's waiting on a system...

00:26:50 It's waiting on a system call.

00:26:51 Yeah, yeah.

00:26:52 I don't think you can await a system call.

00:26:54 They have...

00:26:55 So there's a...

00:26:56 Oh, gosh.

00:26:57 What is it called?

00:26:57 I forgot the name.

00:26:59 So there's an async and await enabled version.

00:27:02 I think it's AIO files.

00:27:04 I'm pretty sure what it is.

00:27:06 Okay.

00:27:06 Okay.

00:27:07 So, I mean, there's just like...

00:27:08 There's all these layers.

00:27:09 Yeah.

00:27:09 AIO files is what it's called.

00:27:12 Gotcha.

00:27:12 Gotcha.

00:27:13 Right.

00:27:13 There's just like all these little parts where if that was with Open, if there was like some mechanism,

00:27:21 I don't know.

00:27:21 Like, I'm not really sure how it would distinguish.

00:27:23 It's okay to block.

00:27:24 You don't need to async all the things.

00:27:26 I know.

00:27:27 It's okay to block in your async loop too.

00:27:29 Like, it's like...

00:27:31 You have to decide.

00:27:33 And that's why I think it's okay for that files thing to be there.

00:27:36 I almost propose that someone outside of the LUT community, outside of the standard library

00:27:42 community, make their own async standard library and just make it a PyPI package and just curate

00:27:48 all the little ones.

00:27:49 And it just has Redis.

00:27:50 It has Postgres.

00:27:53 It has files.

00:27:55 And it's just all namespaced properly.

00:27:57 And you just install it as one package and you're good to go.

00:27:59 I think that'd be really a good effort for someone to make that.

00:28:02 That sounds like a great, great effort.

00:28:03 I love it.

00:28:04 So one thing that somebody did, Bill, that I am a huge fan of is called unsync.

00:28:09 You in sync.

00:28:11 Familiar with this?

00:28:12 No.

00:28:13 What does it do?

00:28:13 So unsync is great.

00:28:14 So what it does is like, you already talked about request threads and all these things,

00:28:18 like using threads.

00:28:18 So you can do threads.

00:28:20 You can do multi-processing.

00:28:22 And you can do IO bound async and await programming, right?

00:28:26 And all three of those have different APIs.

00:28:28 So what unsync does is it's a decorator you can put onto your functions.

00:28:32 And if you put it onto a async function, it'll run it in an async event loop, an asyncio

00:28:38 event loop.

00:28:39 If you put it on a function that's not async, it'll run it on a thread.

00:28:45 And you can also put on a function and say it's CPU bound and it'll run it in a separate

00:28:49 process.

00:28:49 But the way you program it is all with async and await and all those become like a unified

00:28:54 API.

00:28:54 I love it.

00:28:55 I might be able to use that for request three.

00:28:56 Yeah, you could.

00:28:57 It's implemented in 126 lines in one file, Python.

00:29:01 Thank you.

00:29:02 That sounds inherently useful.

00:29:04 It's super cool.

00:29:06 I really like the way it works.

00:29:07 It's on PyPI?

00:29:09 Yeah, it's unsync on PyPI.

00:29:10 Cool.

00:29:11 I'm going to highlight that.

00:29:12 I think efforts like that are good bridges, right?

00:29:15 Like if some part doesn't accept it, like maybe it just automatically goes to threads, but that

00:29:20 doesn't mean you start programming in threads.

00:29:21 That's great.

00:29:22 So it's an abstraction upon all the abstractions.

00:29:24 Yes, but you still program with async and await and it like manages its own asyncio

00:29:29 event loop on a background thread and things like that.

00:29:30 I love it.

00:29:31 I love it.

00:29:31 I love it.

00:29:32 Yeah, it's pretty slick.

00:29:33 It might not be appropriate for what I'm doing, but I'll check it out for sure.

00:29:35 It could be inspirational to what you're doing.

00:29:37 Absolutely.

00:29:38 Without question.

00:29:38 Yeah.

00:29:39 Yeah, yeah.

00:29:39 All right.

00:29:39 Moving on.

00:29:40 Next thing on our notes is pipm versus poetry.

00:29:42 Yeah.

00:29:43 I want to reframe that to not pipm versus poetry because I don't want it to be adversarial.

00:29:47 How about pip and pipm and poetry as a thing?

00:29:53 No, I'll just talk.

00:29:54 So yeah.

00:29:55 So shed some light on this whole world.

00:29:57 Like pipm is-

00:29:58 A tool.

00:29:59 It's got a lot of attention lately.

00:30:00 It's a tool for installing dependencies and managing them using the pip lock file and so

00:30:05 on.

00:30:06 Poetry is also in that space.

00:30:08 Pip, we all know pip.

00:30:09 That just installs stuff straight up.

00:30:11 All right.

00:30:12 So what's the story with all these?

00:30:13 pip installs and uninstalls things.

00:30:15 That's all it does.

00:30:16 Pipenv installs, uninstalls things, and it manages a toml file for you that other people can reproduce

00:30:22 your build with an analog file.

00:30:24 It gives you deterministic builds.

00:30:26 It also gives you the ability to write that file as you're going.

00:30:30 So it enables an efficient workflow for building applications.

00:30:36 It's intended for, it's called Python development workflow for humans.

00:30:41 So it's a workflow tool.

00:30:42 Right.

00:30:43 Because the alternative is maybe I decide I'm going to use SQLAlchemy.

00:30:46 So then I drop to the command prompt and I go with my activated virtual environment and

00:30:51 I pip install SQLAlchemy.

00:30:53 And I go back and I start using it.

00:30:54 And maybe I forget to put that into a request.

00:30:56 Sorry, requirements.txt file.

00:30:58 Yeah.

00:30:59 Yeah, yeah.

00:30:59 Or something like this.

00:31:00 And then I get doesn't work.

00:31:02 And then, but pip.inf, along with Poetry, right?

00:31:04 When I pip.inf install a thing, it actually updates the requirements pip block, right?

00:31:10 It will update the toml for you.

00:31:12 And the nice thing about, I want to mention that, you know, it's just managing a virtual

00:31:16 environment for you.

00:31:17 So you can still pip install stuff one off if you don't want it to go into the toml file.

00:31:21 People don't realize that.

00:31:22 So if you just want to one off install SQLAlchemy for a few minutes and see if it works

00:31:26 before you have it go into the toml file, you can just pip.

00:31:29 Right.

00:31:29 Before I commit to it, for sure.

00:31:30 Yeah.

00:31:31 Just pip install.

00:31:31 And it's just, it works.

00:31:33 It's just a layer.

00:31:35 So, but Poetry is, and pip.inf adheres to the standards that we have set.

00:31:40 Poetry is a different tool that solves different problems.

00:31:43 It intends to solve the packaging problem.

00:31:46 And it considers pip.inf to not be a packaging tool.

00:31:49 I consider pip.inf to be a packaging tool because it deals with packages.

00:31:52 That's what it does.

00:31:53 Poetry does not consider pip.inf to be a packaging tool because what Poetry does is it packages

00:31:58 tools.

00:31:59 So it takes the, I can't remember the exact name of the file, the pyproject.toml file,

00:32:05 which is another standard for replacing setup.py, which is not the goal of pip.inf.

00:32:11 The goal of pip.inf is to replace requirements.txt, which has its uses case.

00:32:16 Requirements.txt is for applications.

00:32:19 And pyproject.toml slash setup.py is for applications.

00:32:23 I'm sorry, it's for libraries.

00:32:25 Libraries, yes.

00:32:26 A library can be an application.

00:32:28 I have a workflow for this.

00:32:30 If you're using pip.inf and you're building a library, you do pip.inf install dash e period.

00:32:36 And that's all you need to do.

00:32:38 It'll automatically go in and it'll grab all of your setup.py defined requirements and stick

00:32:45 them into your lock file for you.

00:32:47 This is a null issue.

00:32:48 But anyway, Poetry, what it does that it adds is it adds a caret operator to the definitions

00:32:56 of the different version specifiers because they found that to be necessary from the Node.js

00:33:01 community.

00:33:01 That is out of spec.

00:33:03 It's like this version or higher, something to this effect, right?

00:33:06 Yeah.

00:33:07 And that's not to spec with what we have documented in the Python packaging community.

00:33:13 So they haven't done the due diligence to add that to that, which is fine.

00:33:17 I think it's fine for people to do stuff on their own and then catch up later.

00:33:19 So they might add that later.

00:33:21 You know, maybe we can get a caret operator and a pip, but we don't have it in pip.

00:33:25 So it's not valid for us.

00:33:26 So that's why I don't like the approach that Poetry is taken, mostly because of the caret operator.

00:33:31 But the thing that Poetry does is that Pipem doesn't.

00:33:34 And that makes it really nice is it lets you upload your packages.

00:33:36 Right.

00:33:37 I can say Poetry Build and Poetry, was it Publish?

00:33:40 Yeah.

00:33:40 Yeah, Publish.

00:33:41 Exactly.

00:33:42 It has a beautiful website and it's a good effort.

00:33:44 It really is.

00:33:45 But it's not comparable to Pipem.

00:33:47 It does some of the same things, but it's a different tool that does different things.

00:33:51 And trying to shoehorn it into saying that they're the same and this versus that is not a healthy discussion.

00:33:58 And that's why I got really upset originally when it started happening and it escalated quite quickly.

00:34:02 Yeah, I remember it was kind of like a blow up on Reddit or something like this, right?

00:34:07 Yeah, I didn't realize that the people on Reddit in the Python room are not the Python community, but Redditors that use Python.

00:34:13 That's a big distinction.

00:34:15 And these are not exactly necessarily the same openness or considerateness or whatever, right?

00:34:21 General Python rules do not apply.

00:34:22 I got pretty thrown under the bus and attacked.

00:34:25 And people said a lot of things about me that weren't true.

00:34:28 But it was like a hyperbolic thing where they would take a little thing and blow it up.

00:34:33 And they said things that were slightly true, but they escalated it to a point where it was no longer true.

00:34:40 Does that make sense?

00:34:41 Yeah, for sure.

00:34:42 I definitely have an ego of some sort.

00:34:45 But they said I was a narcissist and a flagrant liar and all this other stuff.

00:34:50 It's just not true.

00:34:51 That's pretty outrageous.

00:34:52 It was right after PiCon last year.

00:34:54 So I've recovered from that thing.

00:34:56 It was like a whiplash of the good and the bad, right?

00:34:59 It was horrible.

00:35:00 Because PiCon is so great.

00:35:01 I mean, you come home from that and you're just like, ah, I wish I was still there.

00:35:04 I don't think that'll ever happen again.

00:35:06 And I learned a lot about PR from that too.

00:35:08 So it was a good experience.

00:35:09 And I don't blame poetry.

00:35:10 The poetry person, I can't remember his name, Sebastian.

00:35:15 He was kind of involved with the thing that happened, but he was just defending himself because they were involving him and I was involving him.

00:35:22 And we have a good relationship, I think.

00:35:24 And the projects don't hate each other.

00:35:28 It's just the people that love poetry hate PipEnv.

00:35:31 And that's the problem.

00:35:32 Because PipEnv is more popular and it's recommended.

00:35:36 And it's recommended for a reason.

00:35:38 It's because we did the due diligence to get recommended, to become part of the PiPA, to work with those people.

00:35:44 And it is a political sphere and politics are involved.

00:35:49 So you can't just be mad and yell at the man when there is no man.

00:35:55 It's just a community.

00:35:56 They were making it an us versus them when it's just an us.

00:36:01 And that's the issue at hand.

00:36:03 That's not great.

00:36:04 This portion of Talk Python To Me is sponsored by Backlog from NewLab.

00:36:10 Developers know the importance of organization and efficiency when it comes to collaborating on a team.

00:36:15 And Backlog is the perfect collaborative task management software for your team.

00:36:20 With Backlog, you can create tasks, track bugs, make changes, give feedback, and have team conversations right next to your code.

00:36:26 You track progress with features like Gantt and burndown charts.

00:36:29 You document your processes right alongside your wikis.

00:36:33 You can integrate with the tools you use every day like Slack, JIRA, and Google Sheets.

00:36:37 You can automatically register issues from email or web form submissions.

00:36:40 Take your work on the go using their top rated mobile apps available on Android and iOS.

00:36:44 Try Backlog for your team for free for 30 days using our special URL at talkpython.fm/backlog.

00:36:52 That's talkpython.fm/backlog.

00:36:56 So one of the interesting distinctions I think around pipenv.

00:36:59 Like let's just focus on pipenv for the moment.

00:37:02 Maybe pipenv versus pip or versus requirements.txt or whatever is when I go and I create a pip block file and I install stuff, it like hashes it to specific versions and dependencies.

00:37:13 A pipenv lock file.

00:37:15 Yeah, yeah.

00:37:16 Just the pip block file, right?

00:37:17 pip file.lock.

00:37:19 Yes, exactly.

00:37:20 Yes.

00:37:20 So it feels like that ties everything down to a certain version and basically freezes the requirements, which is good for applications, right?

00:37:28 I want to be able to ship my website and have it like behave exactly.

00:37:31 It's good for builds.

00:37:33 Yeah.

00:37:33 And for builds and whatnot, but not necessarily for libraries, right?

00:37:36 Like if I want to ship Flask.

00:37:38 When you're shipping a library, you're not shipping a build.

00:37:42 You're shipping.

00:37:42 Yeah, exactly.

00:37:43 Well, you are shipping a build when you're shipping wheels, actually.

00:37:46 You're shipping a wheel, yeah.

00:37:47 You're not shipping your dependencies when you're shipping.

00:37:49 Exactly.

00:37:49 Yes.

00:37:50 You're shipping only your built version and the dependencies are.

00:37:54 You're only your single component of your build.

00:37:56 Right.

00:37:57 So it seems to me like a lot of the guidance, and you maybe put the right light on this, that pip.emf is more focused on helping you build applications reliably than it is for building libraries.

00:38:09 Is that the right frame of mind or have I got it a little bit off?

00:38:12 No, I think that's overplayed because you can do dashy, period, install dashy, period, and the workflow is perfect and it works fine.

00:38:22 And you can use Twine to upload.

00:38:25 And then it gives your developers a synchronous, everyone's using the same exact version of all the developers using the same version of all the libraries.

00:38:32 And that gives you a reproducible build of your development environment.

00:38:35 So for your development environment, for your developers, that's really important.

00:38:39 So I think it is good for building.

00:38:41 I use it for all my libraries.

00:38:43 For libraries as well.

00:38:44 I think it's good for libraries.

00:38:45 The community is kind of, it's easier for them to understand that little phrase, but I think it's false.

00:38:50 Okay.

00:38:51 Nick Coughlin says it because it's easier to understand.

00:38:54 And we do focus on applications.

00:38:56 Yes.

00:38:56 That's our target market, if that makes sense.

00:38:59 I think it's our target market, but we work fine for either workflow.

00:39:04 It's just our market.

00:39:06 We're more marketable to applications than to libraries.

00:39:09 Interesting.

00:39:10 So have you thought of just taking a dependency on Twine and just passing through the arguments so that you have a pip-inf publish?

00:39:18 I want to reduce the number of commands.

00:39:21 And that would require you to have a setup.py, which would complicate your, that would be a new file that we'd have to track.

00:39:30 Yeah.

00:39:30 So we could do that.

00:39:32 Let me write that down, actually.

00:39:34 It seems like if the recommendation is to use Twine, I know that obviously you could just tell people that, right?

00:39:40 But if you had a pip-inf publish and all it really did was just delegate, maybe it would be a cool new aspect without a lot of work.

00:39:49 That's all pip-inf does is a lot of delegation.

00:39:51 It has like five dependencies, but if you look at, we vendor quite a lot just to reduce the installation ease.

00:39:58 And we patch quite a lot of things, too, because there's a lot of broken things out there.

00:40:02 And we don't have time to upstream at all, unfortunately.

00:40:06 But there's, we have about, I'd guess, 65 dependencies.

00:40:09 Wow.

00:40:10 But a lot of them are vendored.

00:40:11 Maybe just to find that term real quick for folks or maybe like somewhat new.

00:40:15 What do you mean you vendor it?

00:40:17 Oh, yeah.

00:40:17 So to vendor something means to take its source and to copy it into your source.

00:40:21 As opposed to this is in my requirements file and you've got to pip install their thing.

00:40:25 You're just like, we're just going to take a copy of yours and if we've got to tweak it, we've got to tweak it.

00:40:28 That is one use case.

00:40:29 That's a good use case.

00:40:31 But sometimes you do it just to, if you're building a command line tool especially, it's really good to reduce some dependencies because someone else might have a conflicting dependency on their machine, a different version, you know?

00:40:43 Or if you have a really big tool like requests, you need to make sure that your versions are within a very small set of constraints.

00:40:50 We're very picky about what version of your lib3 you have installed in requests.

00:40:54 Like very picky.

00:40:55 And so, because we need to be very picky about it.

00:40:58 And it used to be vendored.

00:41:01 I removed that.

00:41:02 And I removed certify from requests too because of security concerns.

00:41:05 Because if anyone was to get access to the request code base, which someone tried to do once by hacking my DNS for five minutes to intercept the GitHub reset email.

00:41:15 It's a crazy story.

00:41:17 I blog about it if you want to see it.

00:41:20 They could insert something into your trusted CAs.

00:41:24 And then every major corporation in the world who uses requests would have a trusted CA that is trusted.

00:41:31 And then they would get their SSL chain would be vulnerable.

00:41:35 And the problem, the only reason that's happening is because we can't trust system search in Python properly, which is a problem that someone's working on.

00:41:42 They'll volunteer time though.

00:41:44 So you got to be patient.

00:41:45 For sure.

00:41:45 So, man, does that just like scare you to death?

00:41:48 Like do you lose sleep that maybe somebody gets into like the code?

00:41:53 I don't have access to requests.

00:41:55 I removed myself from requests on PyPI.

00:41:57 So for that reason.

00:41:59 Because if anyone's going to try to get it, I'm the target.

00:42:01 Yeah, yeah, yeah.

00:42:02 That's true.

00:42:02 You're going to get the spear phishing email or whatever.

00:42:05 I shouldn't say that I removed myself because that reduces the thing.

00:42:09 But it's just a fun game I'm playing.

00:42:11 Yeah.

00:42:12 If that makes sense.

00:42:14 There's no actual enemy.

00:42:16 It's just a theoretical enemy.

00:42:17 But someone did try to compromise me and they did it targeted.

00:42:20 Yeah, but it's so, so incredibly target rich, right?

00:42:25 Like if this is a open source problem in general, this whole supply chain sort of security, right?

00:42:32 Like if you can get into maybe not the main thing, maybe the build tools that build the main thing, right?

00:42:38 Like if they knew, like, I don't know, let's say you built yourself with Travis CI and then publish that, right?

00:42:43 Maybe they try to hack Travis and only do something if they see request.

00:42:46 Like it could be a long indirect chain.

00:42:49 Absolutely.

00:42:49 It's super scary.

00:42:51 Any link in the chain has, any weak link is, the whole chain is as strong as the weakest link.

00:42:55 Yes.

00:42:56 Right?

00:42:56 It's almost too much to think about, to be honest, right?

00:42:58 Like the thing is, request is at the center of so much data exchange that it's, it's more scary than say, I don't know, OS.path getting like rewritten or something.

00:43:11 We call it the keeper of the crystals and the crystals are the sacred trust of, because we know how important request really is for the world.

00:43:18 It really does power everything around you secretly.

00:43:21 Like AWS uses requests to run AWS.

00:43:25 Like, because they use Bodo to run, like actually run AWS.

00:43:32 You know, Netflix does as well.

00:43:34 I mean, like all these different places, like so many places.

00:43:36 I think it's beautiful.

00:43:37 I'm not doing it to tap myself at all.

00:43:39 It's a community.

00:43:40 You know, we built this thing together and I just was the person who orchestrated it, you know, and came up with the design.

00:43:47 I'm the designer.

00:43:48 Cool.

00:43:48 It's humbling.

00:43:49 That's all I have to say.

00:43:50 Yeah, I'm sure that it is.

00:43:51 It's awesome.

00:43:51 Well, speaking of community and all that stuff, like maybe let's, let's talk a little, a little bit about PyCon.

00:43:58 I was pretty interesting that you said you're going to bring your GoPro.

00:44:00 And to me, PyCon is kind of like my geek holiday, right?

00:44:05 It's my chance to get away, be with my people.

00:44:08 And I have good friends who I only see at these conferences a lot of times.

00:44:12 I feel the opposite way about PyCon.

00:44:14 Tell me about how you feel about it.

00:44:15 I mean, it's definitely that, but it's not a holiday.

00:44:17 It's my geek work week where like my whole year revolves around prepping for PyCon and making sure that I am on my game for PyCon and that everyone else measures their years by like New Year's and Christmas.

00:44:32 Like that time of year is where they like reset and they reflect on the past year.

00:44:36 But for me, I do that at PyCon because that's where I learn the most about myself and everybody else.

00:44:41 And I, yeah.

00:44:42 Yeah.

00:44:43 How interesting.

00:44:43 Yeah.

00:44:44 It's like the Python new year.

00:44:46 It's the week where I get to really, my, my online self is a real thing in real life.

00:44:50 Somewhat for me as well.

00:44:51 Right.

00:44:52 Like I sit here in this like padded foamy room.

00:44:54 Yeah.

00:44:55 That's not that you could see.

00:44:56 And I talk to a handful of people, but then I realized actually there's all these people who finally get to talk back to me, which I really appreciate it.

00:45:05 You know?

00:45:06 All these like imaginary relationships that you have are actually real and you get to, they manifest in front of you at PyCon and it's amazing.

00:45:13 It's amazing for me because like, I can't get a drink of water without five people stopping me, you know?

00:45:18 Yeah.

00:45:19 And I love that.

00:45:20 You're always at the podcaster's booth.

00:45:23 And so like you're always accessible and it's great.

00:45:25 Are you going to do that this year?

00:45:26 You know, we're going to have a booth.

00:45:28 I haven't talked too much about the details that we're definitely having another booth, but we've teamed up with.

00:45:33 Can I like swing by at that booth?

00:45:36 Because I have a podcast too, even though it's small.

00:45:37 Yes, absolutely.

00:45:39 Well, you can definitely come hang out at the booth, but this time.

00:45:43 So I don't have a booth this year at all.

00:45:44 So that's why I'm asking.

00:45:45 No, I know.

00:45:46 I would totally have you if we were still doing exactly the same thing.

00:45:49 But what we're doing is JetBrains is doing like a Python creators type of partnership thing.

00:45:57 So they've got like a mega booth, like a 20 foot by 20 foot booth with a theater and like a little table area and other stuff.

00:46:03 I should talk to them about that.

00:46:05 Yeah, you should.

00:46:06 And they're having like us drop in part of the time.

00:46:10 So instead of being at the booth like eight to nine hours a day, which is awesome because I get to meet people,

00:46:15 it means I miss out on stuff like open spaces and other types of events that I want to participate in.

00:46:19 So now we're going to be like at this booth for, you know, two or three hours each day with little presentations and whatnot.

00:46:25 But then after that, I'm going to be out in the community more.

00:46:28 So that's what I'm doing this year.

00:46:29 Awesome.

00:46:29 If there's anything I can do to support you.

00:46:31 Yeah, thanks.

00:46:32 I mean, I would definitely invite you, but I can certainly put you in touch with the JetBrains.

00:46:36 It'd be cool.

00:46:37 Yeah, I'm going to invite myself.

00:46:38 Yeah, you should.

00:46:39 Because I don't have a booth and I'm definitely a Python creator.

00:46:41 Yes, I agree.

00:46:42 For sure.

00:46:42 I'll try to play my guitar or something there and see what they say.

00:46:45 That's right.

00:46:47 Cool.

00:46:48 Yeah.

00:46:48 So remind me to connect you after the show.

00:46:50 Yeah, but I'm super excited.

00:46:52 One of my favorite things really happens to be, you know, besides being on the floor and these experiences, I guess like what you might call the hallway track.

00:47:00 It's like some sort of the hallway track, right?

00:47:02 Even though if I'm stuck at a booth.

00:47:04 I'm more of like the expo hall track.

00:47:05 I really like the expo hall.

00:47:07 I do too.

00:47:07 I spend a lot of time in there.

00:47:09 I really love all the meetings.

00:47:10 And as soon as I think, all right, this hour I'm going to go see a presentation, I'll bump into somebody like, no, let's just sit down over here while it's quiet and talk, you know?

00:47:17 Exactly.

00:47:17 I go to usually one talk per PyCon.

00:47:20 Yeah.

00:47:21 I pick one out and it's like, I have to see this just usually to support the speaker or it's like my good friend of mine.

00:47:26 It's their first talk or something like that.

00:47:27 Right.

00:47:28 Something like that.

00:47:28 That's awesome.

00:47:29 Yeah.

00:47:29 Yeah.

00:47:29 I do enjoy the talks, but I enjoy the connections more.

00:47:32 Also the open spaces.

00:47:33 I'm definitely planning on doing a couple of open spaces.

00:47:36 How about you?

00:47:36 Yeah.

00:47:36 I'll be hosting one for DigitalOcean, which will be really wonderful.

00:47:39 I'll use this opportunity to say if anyone wants to sign up for DigitalOcean, my employer, you can go to do.co slash 42.

00:47:46 The holy number.

00:47:48 That is the answer to life.

00:47:49 The holy number.

00:47:50 The answer to life, the universe, and everything.

00:47:52 And it will give you a $100 credit.

00:47:55 So you can use that to spin up some servers and prep for PyCon.

00:47:58 And reach out to me if you are a speaker and you need some credit for your talk.

00:48:04 We can give you some of that too.

00:48:05 You hit me up on Twitter.

00:48:07 I'm at KennethWrites.

00:48:08 But I'm doing an open space for that.

00:48:11 I also want to do something with my guitar at PyCon.

00:48:13 So I might do an open space for it or I might do probably do an open space where I just play the guitar a little bit.

00:48:20 Or I have a new mobile setup for my electronic music setup that I can play out of my backpack.

00:48:23 So I'm probably going to do an electronic music by Kenneth Wright's open space probably.

00:48:29 Yeah, that sounds fun.

00:48:30 Definitely looking forward to attending.

00:48:32 It's more than fun.

00:48:33 I'm like super excited about that one.

00:48:35 Yeah.

00:48:36 Super cool.

00:48:36 That's awesome.

00:48:38 What else?

00:48:38 Do you go to the official dinners?

00:48:40 Like the dinner, there's going to be one at the Space and Science Center.

00:48:43 There's going to be one at the Rock and Roll Museum, Hall of Fame, I guess.

00:48:46 They're wonderful and I highly recommend them.

00:48:48 But I don't have time to go to those, unfortunately.

00:48:50 I'm usually pretty busy.

00:48:51 Yeah.

00:48:51 It's pretty easy to get booked out, isn't it?

00:48:53 And I also, they cost money.

00:48:55 And I don't have money to go to those.

00:48:57 I spend all my money on stupid things like this microphone.

00:49:00 Well, you know what I end up doing is I end up signing up for these things and then I want to go.

00:49:06 But often like one out of two, it'll be like, oh, but there's this other opportunity I didn't know because it wasn't announced.

00:49:13 Yeah.

00:49:14 Right.

00:49:15 So like.

00:49:16 I don't want any commitments beforehand.

00:49:18 Right.

00:49:19 Like, I don't know what's going to be happening that night.

00:49:21 I know, but they sell out.

00:49:22 And I don't want to miss anything.

00:49:24 Oh, I know, but I don't want to sign up for anything ahead of time because I don't know what else is going to be happening.

00:49:30 Right.

00:49:30 Yeah, I know.

00:49:30 What if Gliffin had to be hosting like a brain dump hour that night?

00:49:35 I can't miss that for the world.

00:49:36 I know.

00:49:36 You know, so that'd be a waste of money.

00:49:38 So I keep my schedule open as much as I can.

00:49:40 That's cool.

00:49:41 What do you think about Cleveland and the venue there?

00:49:43 Did you enjoy it last year?

00:49:44 I did.

00:49:45 It's not as good as the other places I've been.

00:49:47 Cleveland is great.

00:49:47 The reason I say that though is because I was in an Airbnb and I had to drive in every day last year.

00:49:52 So this year I'm in the Hilton, which is right next door.

00:49:54 So I think I'll enjoy it a lot more.

00:49:55 Yeah, I'm in the same hotel.

00:49:57 It's literally attached with the tunnel.

00:49:58 So it's nice.

00:49:59 Oh, really?

00:50:00 Yeah.

00:50:01 And there's a cool like rooftop bar up there that overlooks the Great Lakes.

00:50:05 It's pretty nice there.

00:50:06 One of the hotels like five times last year.

00:50:08 I think it was the other hotel that's attached.

00:50:10 I'm not sure.

00:50:11 I don't remember.

00:50:11 I must have eaten at the Hilton.

00:50:12 It was not cheap, but it was delicious.

00:50:15 I really enjoyed the venue.

00:50:17 Like I'd never been to Cleveland before and I thought, you know, the city was friendly and I thought the place.

00:50:22 Oh, yeah.

00:50:23 Convention Center is great.

00:50:24 Convention Center was great.

00:50:25 The extra outings were good.

00:50:27 So I'm looking forward to going back there.

00:50:29 I like Montreal a little better.

00:50:30 The Convention Center in Montreal was worse, but the city of Montreal was great.

00:50:34 But I like the centralism of Cleveland.

00:50:37 I feel like you bump into people more when you're out.

00:50:39 So that's good.

00:50:41 Yeah, for sure.

00:50:41 Portland is my favorite.

00:50:43 Not mind it being in Portland, man.

00:50:44 It was like a 12-minute drive from my house to go there.

00:50:48 That was the right amount of travel.

00:50:49 Oh, that's ideal.

00:50:51 I remember that.

00:50:52 We did a podcast, I think.

00:50:54 Yeah, we sure did.

00:50:55 Yeah, we definitely did.

00:50:56 Yeah.

00:50:56 You know, I got to do things like I set up like a PyCon hike through the like little mountains next to the city and stuff.

00:51:02 Oh, you got to host stuff because it's your place.

00:51:05 Yeah.

00:51:05 I mean, I don't know anything about Cleveland.

00:51:07 Like, what am I going to do there, right?

00:51:09 I think when I was there, was there like a Zen garden in Portland?

00:51:13 There's two things you might call that.

00:51:15 There's one called the Chinese garden and one called the Japanese garden.

00:51:17 And they were quite different, but they're both sort of in that.

00:51:19 I went to the Japanese one one morning.

00:51:21 It's amazing, isn't it?

00:51:23 With some people.

00:51:23 I don't know what the group was called, but we went over there and it was so, so peaceful.

00:51:29 I definitely enjoy going there.

00:51:30 I was there about a month ago.

00:51:32 I'm like, I could really spend a few hours by myself here.

00:51:35 That's great.

00:51:35 Yeah.

00:51:36 I was there with Jack G.

00:51:37 Drick and I had a great time.

00:51:38 He's a great man.

00:51:39 Yeah.

00:51:39 Awesome.

00:51:40 What else, like what else you do that maybe people don't know about a PyCon that maybe would make their experience better?

00:51:46 The hallway track is great.

00:51:47 Do the boffs.

00:51:49 If you hear someone say boff, it means open space.

00:51:51 It means birds of a feather.

00:51:53 So that's a key word that you might, a key phrase that you need to know.

00:51:56 Let's see.

00:51:57 Other things that are hidden at PyCon.

00:51:59 Sprints.

00:51:59 There's the scotch boff, which is a hidden event that no one knows about.

00:52:03 Oh, nice.

00:52:04 There's actually two of them last year.

00:52:06 So there's even more hidden.

00:52:08 There's the original scotch boff.

00:52:10 There was the fake one to like blast the people.

00:52:12 And then there was the legit one that was even behind the fake hidden facade.

00:52:16 I see.

00:52:16 Yeah.

00:52:17 And it's a storytelling event that involves lots of very high-end scotch.

00:52:21 So I actually went one year and I didn't drink at all.

00:52:23 I just drank water because I wasn't drinking.

00:52:25 I don't drink anymore.

00:52:26 I don't like alcohol at all.

00:52:28 So, but I was very welcome.

00:52:30 It's an open space.

00:52:32 So, but it's kind of outside the PyCon sanctions.

00:52:35 So the stories are a little, no, they're not.

00:52:37 It's still inside of PyCon sanctions, but it's, you know, it's drinking.

00:52:41 So, you know, you expect what you expect.

00:52:43 Yeah.

00:52:44 What are you going to get if you go drink a bunch of whiskey?

00:52:47 Yeah, exactly.

00:52:47 It's one of those kind of things.

00:52:49 Come prepared for that experience.

00:52:49 Come prepared for that.

00:52:50 Exactly.

00:52:50 Everyone's very kind and respectful though.

00:52:53 Yeah.

00:52:53 Yeah.

00:52:53 And sprints, are you doing a sprint?

00:52:54 Are you participating in sprints?

00:52:56 DigitalOcean is actually sponsoring the sprints and I'll be there.

00:52:59 I'll have my media laptop with me or my iPad.

00:53:01 And I'm going to be probably working on video stuff.

00:53:03 I usually at the sprints to support everyone else and just be an interruptive force.

00:53:08 Or not interruptive force, ideally, but people, you know, I usually kind of sit in your flask if I can.

00:53:16 And those groups.

00:53:17 And I'm going to be potentially doing a photo booth during the sprints where I have my camera and I have a little two by three printer that I can print things on the spot from.

00:53:28 So I want to do headshots of people and sign them or something like that.

00:53:31 Yeah.

00:53:32 Nice.

00:53:32 Yeah.

00:53:33 I thought that'd be kind of cool.

00:53:34 Yeah.

00:53:34 It sounds super cool.

00:53:35 I was planning on spending a couple of days at the sprints, but I think I'm only going to be able to spend one now.

00:53:39 It turns out I'm going straight from PyCon to Microsoft Build.

00:53:42 Oh, cool.

00:53:44 There's like a podcast row there.

00:53:46 And they invited me to go out there.

00:53:48 So it just so happens to be it's all at the same time.

00:53:50 That sounds like a great event.

00:53:52 Yeah.

00:53:52 It'll be.

00:53:53 It's super different than PyCon.

00:53:54 I'm a big Microsoft fan.

00:53:56 You have to wear it.

00:53:56 That's a breakfast event, not a dinner event.

00:53:59 Yes.

00:53:59 .NET developers are very breakfast type people.

00:54:02 Yeah, exactly.

00:54:03 They get up early and so stay up late.

00:54:05 Yeah, I can imagine.

00:54:06 So it's going to be fun.

00:54:07 I mean, basically, I'm going to go there to talk Python with all those folks, see what they're up to.

00:54:11 And then they have great stuff happening with Python over there.

00:54:13 You got Steve Dower, Brett Cannon, you know, Nina Zakarenko.

00:54:17 Yeah.

00:54:18 We're good friends with Nina.

00:54:19 I've known her for years.

00:54:21 She's a, I think she's doing good.

00:54:23 That's a cool team.

00:54:24 She's on the Cloud Developer Advocates.

00:54:26 Yeah, it definitely is cool.

00:54:27 They sponsored requests, actually.

00:54:29 Oh, really?

00:54:29 They're responsible for, they're one of the biggest sponsors for the request three development.

00:54:33 Wow.

00:54:34 That's cool.

00:54:34 You know, to say thank you to them for that.

00:54:36 That's great.

00:54:37 Yeah.

00:54:37 Pass my message along.

00:54:38 Yeah, absolutely.

00:54:39 So, yeah, I'm definitely looking forward to PyCon and looking forward to seeing you there as well.

00:54:43 Another thing I did want to ask you about while we have a little time together is, you know, since we spoke, there was the whole Guido stepping down, the steering council being formed and all of that.

00:54:54 Like, maybe just give us your thoughts on what happened there.

00:54:57 Did you see that as just like a natural evolution?

00:54:59 Or did you see that as like, oh, crap, what's up with our community?

00:55:02 Is this going to be really bad?

00:55:03 Or what were you thinking?

00:55:04 Well, I thought it could have gone really badly.

00:55:06 It didn't.

00:55:07 It was really beautiful what occurred.

00:55:09 And I think it was a really interesting sociology thing if you actually look at it objectively.

00:55:13 Because what occurred was there was a community that had a leader that it trusted who stepped down and gave the community an opportunity to evolve into a self-organized community, into a democracy, effectively.

00:55:26 But he did not give it any direction on how to do so.

00:55:30 He did not say, this is how you determine the vote.

00:55:32 This is how – that type of thing.

00:55:34 Yeah.

00:55:34 That's the best practice that should have occurred.

00:55:36 But he was stressed.

00:55:37 He was dealing with his own stuff.

00:55:38 I'm not falling – or I'm not accusing Guido of anything for not doing that.

00:55:43 It would have been very helpful if he did.

00:55:45 Because he didn't, though, we had to self-organize and determine without direction a voting process, a decision process, how to decide, how to decide.

00:55:55 Yeah, it was a meta – a very meta type of thing.

00:55:57 Like, first we have to decide how we're going to even decide stuff.

00:56:00 Then we've got to elect people to make the decisions.

00:56:02 And there was a lot of layers to unpack there.

00:56:04 And we had to scope it.

00:56:06 Who's qualified to make the decisions on who's qualified to make the decisions.

00:56:09 Yes.

00:56:10 Exactly.

00:56:10 So – Exactly.

00:56:12 That was really beautiful.

00:56:13 And I think it went really, really smoothly.

00:56:15 And I think it went great.

00:56:16 And I think we're in really good hands.

00:56:17 I do, too.

00:56:18 I'm really happy to see who's on the steering council.

00:56:20 I think it's going to go well.

00:56:21 And I'm also happy that Guido is still core developer and part of it and stuff, right?

00:56:26 Like, that he's participating.

00:56:27 He's on the steering council, isn't he?

00:56:29 Yeah, yeah, he is.

00:56:30 Yeah.

00:56:30 Yeah, that's perfect.

00:56:31 That's perfect.

00:56:31 I wasn't expecting that.

00:56:33 And that was a surprise to me.

00:56:34 That was a surprise to me as well.

00:56:35 But I felt like – It's appropriate.

00:56:37 He's certainly appropriate, right?

00:56:38 Like, if he – you talked about this Reddit.

00:56:40 He just wanted to – I did the same thing for PipBand.

00:56:42 I did a relinquishment of BDFL power recently.

00:56:45 Where I don't have BDFL power anymore.

00:56:48 And it's just a logical next step, I think, when you have a BDFL is to let go of it eventually.

00:56:53 Right.

00:56:54 Once the community is strong enough and whatnot.

00:56:56 I mean – There's too much political weight on the BDFL.

00:56:59 And so all of the good things that happen in Python can be assigned to you, which is good.

00:57:04 Or in the project, like PitBand or Python.

00:57:06 But all the bad things that can happen also can be assigned to you.

00:57:10 And all the negative connotations.

00:57:11 And so, like, a new thing like a walrus operator being added can cause a flame war.

00:57:16 And everyone's like, you suck.

00:57:17 You suck.

00:57:18 You suck.

00:57:18 Yeah.

00:57:19 And so that is why he wanted to step down probably.

00:57:22 This is just my opinion.

00:57:23 Because that's why I wanted to step down.

00:57:24 This PipBand stuff is like – it's not just me.

00:57:28 I'm not the one who's maintaining it anymore on day-to-day.

00:57:32 You know, I just want the ability to say I want the thing you suggested, like Twine upload to be built in.

00:57:38 But I can do that without being the BDFL.

00:57:40 I'm just like a senior project manager of the project, right?

00:57:44 Exactly.

00:57:44 So I just stepped down as the BDFL.

00:57:46 And now it's no longer a Kenneth Wright's project.

00:57:49 It's just a PyPA project.

00:57:50 That's cool.

00:57:51 And so that's what Guido did too.

00:57:52 Now it's a Python problem, not a Guido problem.

00:57:54 I don't know how you feel about it.

00:57:56 But to me, it is tough to take some of that criticism and that negativity.

00:58:01 I'm an INFP.

00:58:02 Every time that somebody tells you, good job, Michael.

00:58:05 Your podcast is great.

00:58:06 Or good job.

00:58:07 Your course helped me so much.

00:58:08 Like you need, I don't know, 10 or 20 of those for every person who's like, you suck.

00:58:12 I hate that.

00:58:13 Absolutely.

00:58:14 As the BDFL, like you are the – you know, are at the tip of the spear of that.

00:58:18 You receive all of that, right?

00:58:20 It's got to be tough, right?

00:58:22 When the negative people – I've learned in open source that most of your users are silent.

00:58:27 I've learned that the people that are upset are much, much more vocal than the people that are happy.

00:58:32 And then when people are upset, they pile on to each other.

00:58:35 It's a feedback loop.

00:58:36 And same thing when people are happy.

00:58:38 Sometimes they pile on each other and they pile on happiness.

00:58:40 But it's pretty rare.

00:58:42 Well, and even when it is, like human psychology, we receive negativity stronger than we receive positivity.

00:58:48 Absolutely.

00:58:48 It's a bad dynamic between those two things.

00:58:52 And it's – so I think there's no takeaway.

00:58:55 Yeah, no takeaway.

00:58:58 But yeah, I guess it's – I guess the takeaway really for Gido Stepping Down is like we went through that.

00:59:06 We're in a pretty solid place.

00:59:08 And I think things are going well going forward.

00:59:11 Yeah, I think we're equipped to move to Python 4 successfully.

00:59:14 Not that we need to.

00:59:15 I don't know what that would even look like.

00:59:17 Yeah, I don't know what it would look like either.

00:59:18 I mean, do we need a name like that?

00:59:21 I think – so this is interesting to think about.

00:59:23 Like on one hand, it would be cool to move to Python 4 because we've had this two versus three debate for so long.

00:59:29 And it's just like, oh, it's over.

00:59:30 We're already past – we're even past two.

00:59:32 We're past three.

00:59:33 Like we're on to four.

00:59:33 Like that would be an interesting psychology.

00:59:35 I would much rather see a 3.12.

00:59:37 Yeah, but at the same time, like, you know, what would happen that would be such a major version change that it needs to, right?

00:59:44 Well, there should be no pressing need for that.

00:59:47 Yeah, but, you know, Java goes through these major version changes.

00:59:50 .NET goes through them.

00:59:51 Like it's not – But that doesn't mean that we should.

00:59:54 No, I agree.

00:59:55 I agree.

00:59:55 Just because they do it doesn't mean we should be better than them.

00:59:58 Our stuff should last longer.

00:59:59 Our version should last longer.

01:00:01 We are more resilient than they are.

01:00:02 That's what makes us better than them.

01:00:04 Not that we're better than them.

01:00:06 I'm just – that's what sets us apart.

01:00:07 That's why we're distinct from them is that Python is a slow, steady, moving rock of a language.

01:00:12 And if we get – if when we hit 3.9, we move to 4 and we make another breaking change, that will erode that trust that people have in Python.

01:00:20 Yeah, yeah, yeah.

01:00:21 I certainly would not support like more breaking changes.

01:00:24 Not really.

01:00:25 Not now.

01:00:26 It's too fast.

01:00:27 It's too fast.

01:00:28 Yeah.

01:00:28 We're just kind of getting over the scars, right?

01:00:31 I mean, we could do it, but it would change the inherent property of the language that people like the most, I think.

01:00:37 Yeah.

01:00:37 And it would destroy all of our careers eventually.

01:00:40 It really would.

01:00:41 I think additive stuff is fine, right?

01:00:43 Like it needs to be – And subtractive is okay too, but not replacive, if that makes sense.

01:00:48 Yeah, exactly.

01:00:48 Yeah.

01:00:49 Because that's what the string thing was.

01:00:51 The string thing was replacive.

01:00:52 It was like you have to rip out and replace code.

01:00:55 It's okay if you need to remove code or if you have to add code, but not if you have to replace code.

01:01:02 Then that's different.

01:01:03 Yeah, that's probably the biggest one.

01:01:04 That's quite tricky.

01:01:06 So I guess, you know, while we're talking about this, we don't have a whole lot of time left.

01:01:09 I do have just two questions.

01:01:10 Yes.

01:01:11 Two main questions left for you.

01:01:12 One is like, you know, what's your prediction of the end of life of Python 2?

01:01:17 Like, do you feel like we're kind of there?

01:01:19 Yes, I do.

01:01:20 It's not an issue.

01:01:21 People that need to use 2 for business reasons will continue to be able to do so because Red Hat will continue to maintain it for many years.

01:01:28 I feel like a dramatic number of people recently have switched at least their new projects to Python 3.

01:01:34 I'm just letting people know if they don't.

01:01:35 If you're on 2.7 for a business reason and that means you have money, you can pay Red Hat money and we'll give you 2.7 up to date after 2020.

01:01:44 So do that.

01:01:45 That's the solution to your problem.

01:01:49 You know, one of my predictions that is around this time, like Q1 2020, there's going to be a lot of opportunity for people who are consultants and specialize in converting from 2 to 3.

01:02:01 Yeah.

01:02:01 Because a lot of people are going to realize like, hey, we wanted to do this.

01:02:05 Yeah, consultants maybe, not professionals because those people ideally should have been doing this a long time ago.

01:02:09 Yeah, I know.

01:02:10 When I said professionals, I mean people working in organizations.

01:02:12 Yeah, but I do think there's going to be folks.

01:02:15 The time is past for you to be on 3 is what I'm saying.

01:02:18 Yeah, I agree.

01:02:19 And I think that conversation is long over.

01:02:21 But yeah, consultants, like I can see oversight having occurred and you need to migrate immediately.

01:02:27 Right.

01:02:28 And you need to hire a specialist to come in and do it.

01:02:31 So that makes sense.

01:02:32 So yeah, there might be room for that.

01:02:33 That's going to be a sweet six months.

01:02:34 Yeah, yeah.

01:02:35 Okay, so another thing that is good news and is going strong.

01:02:41 It's ending, not in January, but it's actually ending at PyCon 2020 is what I've heard.

01:02:45 Can you put out something that said January 1st?

01:02:47 Okay, never mind.

01:02:48 I restructured.

01:02:49 There was some debate that it should be there, but it was a little while ago.

01:02:52 Guido said something to the effect of-

01:02:54 Yeah, he advanced it.

01:02:55 Let's not mince words.

01:02:56 It's January 1st, 2020.

01:02:58 This is, we're getting it over with.

01:02:59 All right, thank you for correcting me.

01:03:00 Yeah.

01:03:01 I mean, maybe it's been changed since he said that, but that-

01:03:04 No, that was newer information than I had.

01:03:06 Yeah, yeah, cool.

01:03:07 So I think it's, let me check it out.

01:03:09 Let's just say Python death clock.

01:03:12 Let's see where we are as we record.

01:03:13 Yeah, that's my trusted source as well.

01:03:15 Are you familiar with Python death clock?

01:03:17 I thought Python death clock always said January, and then my trusted source told me PyCon is when it was supposed to be, surprisingly.

01:03:27 January.

01:03:27 Recently, the date has been updated to January 1st, 2020.

01:03:30 Gotcha.

01:03:31 The death clock has been updated accordingly.

01:03:33 So we lost six months.

01:03:34 That's great.

01:03:34 Yeah, it's like daylight savings, but extremely big.

01:03:37 Nice.

01:03:40 All right.

01:03:40 So the other thing I want to talk about, though, is just, you know, give you a chance to talk a bit about your podcast, let people know it's out there.

01:03:46 You know, I think it's good that you're doing it.

01:03:48 It sounds like you're doing interesting stuff there.

01:03:50 Thanks.

01:03:51 How's it going?

01:03:51 I have a non-traditional podcast called Import This.

01:03:53 It is for humans, by humans, and it is not specific to Python, but it's mostly oriented around Python.

01:04:01 I interviewed my stylist the other day who works at the high-end fashion store downtown.

01:04:06 I don't really shop there too often, but I like to talk to him a lot.

01:04:09 So he's a nice guy.

01:04:11 But I interview a lot of Python developers and a lot of people who use DigitalOcean.

01:04:14 And they're short episodes, and they're bursty.

01:04:17 So sometimes I do three in a week.

01:04:19 Sometimes I do none.

01:04:20 It's called Import This.

01:04:21 If you look on iTunes or anywhere else where you can find a podcast, you will see it.

01:04:24 Check it out.

01:04:25 Nice.

01:04:25 Yeah, I'll put a link in the show notes.

01:04:27 Yeah.

01:04:27 Thanks.

01:04:28 Yeah, yeah.

01:04:28 It's definitely a good one.

01:04:30 So definitely worth checking out.

01:04:31 You know, you're talking about interviewing people outside the Python space.

01:04:34 When I was at PyCon, I was having this weird deja vu type of experience.

01:04:39 Like our Uber driver, we started talking.

01:04:42 He's like, oh, you're for a conference.

01:04:43 Yeah, yeah.

01:04:44 We're here for this Python conference.

01:04:46 Like, oh, Python.

01:04:46 Yeah, I'm learning this.

01:04:48 I'm learning Python.

01:04:48 It's so amazing.

01:04:49 And then like another Uber driver and then a waitress was also learning Python.

01:04:53 It was just like all these people from outside the community were like learning Python.

01:04:57 It was very, very interesting.

01:04:58 I've had a San Francisco Uber driver recognize me once from watching my talks on YouTube.

01:05:04 Oh, yeah.

01:05:04 That's so awesome.

01:05:09 Yeah, yeah.

01:05:09 How cool.

01:05:09 Great.

01:05:10 Oh, man.

01:05:11 All right.

01:05:11 Well, I guess we're probably over time a little bit, but that was to be expected.

01:05:15 So maybe I'll just ask you the two questions.

01:05:18 One of which I'm pretty sure I know the answer now, given our conversation.

01:05:22 But first of all, if you're going to write some Python code, work on one of your projects,

01:05:26 what editor do you use?

01:05:27 VS Code.

01:05:28 VS Code, right on.

01:05:29 It's got to be the editor with the highest rate of adoption in the last year.

01:05:33 It's really going strong.

01:05:34 Yeah.

01:05:35 So the other question is, what notable PyPI package would you like to recommend?

01:05:40 And I just want to throw out there really quick.

01:05:42 Like when I ask this of other guests, very often they say requests.

01:05:46 Oh, that's so kind of them.

01:05:47 Thank you.

01:05:48 Yeah, absolutely.

01:05:48 I can't say requests.

01:05:49 No, I'm kidding.

01:05:51 Request core.

01:05:52 Don't request.

01:05:53 I'll say in the future, request core should be the answer because I think that'll be a really

01:05:57 cool package that will really impact some lives of a lot of developers.

01:06:00 But that's not built yet.

01:06:02 So now I usually say doc opt.

01:06:05 I've given you the answer before.

01:06:07 So I need to think for a moment.

01:06:08 Let me think.

01:06:09 I like PyTheory a lot, but that's not useful for people at the moment.

01:06:14 A cool one that I found recently is SimPy.

01:06:18 Okay, SimPy is cool.

01:06:19 That's really interesting to me.

01:06:21 And if you're not from the scientific community, you might not know about it.

01:06:24 It gives you a solving algebraic system in Python, which is really useful.

01:06:30 It gives you, lets you do algebra in Python, which is like something that you need to do

01:06:34 sometimes.

01:06:34 So if you are in, say, high school or early college.

01:06:37 Or you just need to solve problems with math in your code, which is honestly pretty rare.

01:06:44 But like sometimes you should do it if you're doing business logic, right?

01:06:48 Right.

01:06:48 Or yeah, you're doing some kind of research or something and you just want to bust it out

01:06:52 in a Jupyter notebook or you're in simulations.

01:06:54 Yeah, absolutely.

01:06:54 It's very cool.

01:06:55 If you're building even a web application and you just need to have some business logic in

01:06:58 there, I think it's appropriate.

01:06:59 Yeah.

01:07:00 Right on.

01:07:00 Do like a threshold of a log function or something.

01:07:04 I don't know.

01:07:05 for like determining if someone's a biz high or a biz low.

01:07:08 I don't know.

01:07:09 I think you could do some pretty advanced stuff with it if you wanted to.

01:07:12 Yeah.

01:07:12 Sounds pretty cool.

01:07:13 Well, thanks.

01:07:14 Now, I guess, you know, final call to action here.

01:07:17 People, maybe they're excited about PyCon or they are interested in the async stuff.

01:07:23 I don't know.

01:07:24 What do you want to leave people with?

01:07:25 I like to listen to listeners with this recording that I have made.

01:07:29 It's Creative Commons and it is beautiful.

01:07:32 Thank you.

01:07:32 Beautiful is better than ugly.

01:07:35 Explicit is better than implicit.

01:07:38 Simple is better than complex.

01:07:41 Complex is better than complicated.

01:07:44 Flat is better than nested.

01:07:46 Sparse is better than dense.

01:07:49 Readability counts.

01:07:51 Special cases aren't special enough to break the rules.

01:07:55 Although practicality beats purity.

01:07:58 Errors should never pass silently unless explicitly silenced.

01:08:03 In the face of ambiguity, refuse the temptation to guess.

01:08:07 There should be one, and preferably only one, obvious way to do it.

01:08:12 Although that way may not be obvious at first unless you're Dutch.

01:08:17 Now is better than never.

01:08:19 Although never is often better than right now.

01:08:23 If the implementation is hard to explain, it's a bad idea.

01:08:28 If the implementation is easy to explain, it may be a good idea.

01:08:33 Namespaces are one honking great idea.

01:08:37 Let's do more of those.

01:08:41 This has been another episode of Talk Python To Me.

01:08:43 Our guest on this episode was Kenneth Wright, and it's been brought to you by Linode and Backlog.

01:08:48 Linode is your go-to hosting for whatever you're building with Python.

01:08:53 Get four months free at talkpython.fm/linode.

01:08:56 That's L-I-N-O-D-E.

01:08:59 With Backlog, you can create tasks, track bugs, make changes, give feedback, and have team conversations right next to your code.

01:09:06 Try Backlog for your team for free for 30 days using the special URL talkpython.fm/backlog.

01:09:14 Want to level up your Python?

01:09:15 If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

01:09:20 Or if you're looking for something more advanced, check out our new async course that digs into all the different types of async programming you can do in Python.

01:09:28 And of course, if you're interested in more than one of these, be sure to check out our Everything Bundle.

01:09:33 It's like a subscription that never expires.

01:09:35 Be sure to subscribe to the show.

01:09:37 Open your favorite podcatcher and search for Python.

01:09:39 We should be right at the top.

01:09:41 You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

01:09:50 This is your host, Michael Kennedy.

01:09:52 Thanks so much for listening.

01:09:53 I really appreciate it.

01:09:54 Now get out there and write some Python code.

01:09:56 I'll see you next time.

