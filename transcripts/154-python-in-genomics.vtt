WEBVTT

00:00:00.001 --> 00:00:06.160
Python is often used in big data situations. One of the more personal sources of large data sets

00:00:06.160 --> 00:00:10.320
is our very own genetic code. Of course, as Python grows stronger in data science,

00:00:10.320 --> 00:00:15.920
it's finding its way into biology and genetics. In this episode, you'll meet Ian Marr. He's working

00:00:15.920 --> 00:00:20.620
to help make cancer a thing of the past. We'll dig into how Python is part of that journey.

00:00:20.620 --> 00:00:26.240
This is Talk Python To Me, episode 154, recorded February 9th, 2018.

00:00:26.240 --> 00:00:45.100
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:00:45.100 --> 00:00:50.320
and the personalities. This is your host, Michael Kennedy. Follow me on Twitter, where I'm @mkennedy.

00:00:50.320 --> 00:00:55.620
Keep up with the show and listen to past episodes at talkpython.fm, and follow the show on Twitter

00:00:55.620 --> 00:01:02.040
via at Talk Python. This episode is brought to you by Codacy. Learn how they make code reviews better

00:01:02.040 --> 00:01:06.080
by checking out what they're offering during their segment. Ian, welcome to Talk Python.

00:01:06.080 --> 00:01:07.500
Hi, Michael. Thanks for having me on.

00:01:07.500 --> 00:01:13.320
Yeah, I'm really glad to have you on to talk about Python and biology and genomics. These are two areas

00:01:13.320 --> 00:01:19.940
where I've wanted to do a show on for a long time, but just haven't managed to get the right stuff all

00:01:19.940 --> 00:01:26.280
lined up. So really excited to see how Python is playing a role here. And I think it's just another

00:01:26.280 --> 00:01:32.660
cool example of how Python is being used in all these really varied ways.

00:01:32.660 --> 00:01:38.480
Great. Yeah, it's really been taken off the last few years, and it's gone really well with

00:01:38.480 --> 00:01:40.140
what we're trying to get done at our company.

00:01:40.140 --> 00:01:44.620
Awesome. So let's dig into that. But first, let's hear your story. How'd you get into programming in

00:01:44.620 --> 00:01:44.840
Python?

00:01:44.840 --> 00:01:49.640
Yeah, so I started programming when I was 13. My parents got me a Commodore 64. I started learning

00:01:49.640 --> 00:01:55.340
basic and trying to make my own games and things like that. I went to school for programming,

00:01:55.340 --> 00:02:00.880
computer engineering, learned a lot of C and Pascal even at the time to date myself a little.

00:02:00.880 --> 00:02:09.260
And after graduating, I worked at a defense contractor in their logistics department where

00:02:09.260 --> 00:02:16.240
we did some SGML and XML based tools for documentation of these complex systems that they

00:02:16.240 --> 00:02:22.100
have. And part of that was, you know, parsing of those files. And we actually were using this library

00:02:22.100 --> 00:02:27.320
that was built in Python. And I kind of fell in love because of the REPL, right? So being able to kind

00:02:27.320 --> 00:02:33.540
of open up the REPL and explore and play with the information right there was what hooked me. And ever

00:02:33.540 --> 00:02:37.620
since then, I've kind of been doing it as a hobby, hoping that it would kind of take off in the web space.

00:02:37.620 --> 00:02:43.860
And it did with, you know, Django and following on after Rails, but it just never worked out for me. I

00:02:43.860 --> 00:02:48.900
was always doing Java based development for, you know, e-commerce sites and other stuff that I've done.

00:02:48.900 --> 00:02:49.920
Java again?

00:02:49.920 --> 00:02:50.500
No.

00:02:50.500 --> 00:02:55.560
Yeah, always Java. So I was doing Java. I still like Java, still a good, still consider myself a good

00:02:55.560 --> 00:03:01.600
Java developer. When I joined my current company, we did a couple of small things in Python and,

00:03:01.600 --> 00:03:06.600
and then those kind of hooked, took off a little bit and we were able to, you know, kind of just double

00:03:06.600 --> 00:03:12.840
down and, and add some more features. And, and really since that time with bioinformatics and other stuff,

00:03:12.840 --> 00:03:18.040
we'll talk about, you know, Python's really taken off and actually made sense to, to really use it as, as one of our

00:03:18.040 --> 00:03:19.680
core languages for some of our products.

00:03:19.680 --> 00:03:26.520
Yeah, that's cool. So it's, it's finally like grown into this place where it's not just, oh, I'd like an excuse to use it, but it

00:03:26.520 --> 00:03:27.560
really makes sense, right?

00:03:27.560 --> 00:03:33.860
Yep. Exactly right. It actually solves the niche and it's really taken over actually for Perl in a lot of ways in,

00:03:33.860 --> 00:03:39.000
in the bioinformatics space. And, it kind of sits along with R and has really got a lot of mind

00:03:39.000 --> 00:03:41.360
share in the, you know, in this bioinformatics world.

00:03:41.360 --> 00:03:47.460
Yeah. There's probably some cool infographic of Perl, I'm sorry, R in Python, like duking it out over,

00:03:47.560 --> 00:03:52.900
you know, some sort of data science crown. I don't know what we'll see where that goes, but they're both doing

00:03:52.900 --> 00:03:57.660
really well. And it's, it's nice to see Python growing so quickly. I really think, you know,

00:03:57.660 --> 00:04:03.840
you look at the growth of Python, there's like this huge jump in its popularity. Like it's always been

00:04:03.840 --> 00:04:08.800
growing, which is kind of amazing, but it has this sort of inflection point where it grows faster around

00:04:08.800 --> 00:04:13.040
2012, which I feel like is where the data science stuff really started to kick in for Python.

00:04:13.040 --> 00:04:18.740
Yeah. NumPy and scikit-learn and Jupyter, pandas, you know, some of these core, a lot,

00:04:18.740 --> 00:04:19.640
all the machine learning.

00:04:19.640 --> 00:04:23.440
Yeah. All the machine learning stuff, all those things really have just kind of gotten some mind

00:04:23.440 --> 00:04:27.600
share altogether. And it's really just, we're kind of riding that wave and it's, it's really great.

00:04:27.600 --> 00:04:31.340
And, and I, and I think you might've said this in one of your previous podcasts, but the fact that

00:04:31.340 --> 00:04:34.920
people who are in data science want to learn something that is a general purpose language too,

00:04:34.920 --> 00:04:38.060
that they could use to make themselves a little bit more marketable is,

00:04:38.220 --> 00:04:41.940
I think another, another kind of feather in the cap for Python over some of the other languages.

00:04:41.940 --> 00:04:46.460
Yeah, it definitely is. Awesome. So this, you know, sounds like a really interesting

00:04:46.460 --> 00:04:52.880
way of getting into it. So you went through the computer engineering perspective. Very nice. And

00:04:52.880 --> 00:04:59.820
I think maybe the first place to start this discussion really is to talk about the biology

00:04:59.820 --> 00:05:05.520
and, you know, your company and kind of the problem space that you guys are working in. So then we talk

00:05:05.520 --> 00:05:09.940
about all the tools and the way Python solving the problems people know. So maybe tell us a bit about

00:05:09.940 --> 00:05:15.260
what you do day to day. Yep. So I lead development for a company called genome oncology out in Cleveland.

00:05:15.260 --> 00:05:19.960
We'll talk more about Cleveland later, but so I lead our, you know, software design development,

00:05:19.960 --> 00:05:25.540
testing, and deployments were founded in 2012. And really that timing is important because really

00:05:25.540 --> 00:05:32.140
around 2011, some of the big NGS platforms, next generation sequencing platforms were, came out around

00:05:32.140 --> 00:05:37.520
there. So these are, these include things like the aluminum my seek and ion torrent. And why those are

00:05:37.520 --> 00:05:41.840
important is because the human genome project, which you might've heard of kind of wrapped up between

00:05:41.840 --> 00:05:47.120
2000, 2003. When did that start? Like late nineties, mid nineties, late nineties. It took, it took a few

00:05:47.120 --> 00:05:51.900
years for sure. And, you know, it took about $3 billion to complete it. And that was basically just

00:05:51.900 --> 00:05:58.100
mapping a first draft kind of, of the, of the human genome. And, you know, that's really, it basically says,

00:05:58.140 --> 00:06:03.180
these are all the variants that, you know, quote unquote, a typical human is made up of. And that

00:06:03.180 --> 00:06:07.820
took about $3 billion to do. And now we're talking about, you know, less than a thousand dollars.

00:06:07.820 --> 00:06:13.620
And as that, you know, as the, you know, Moore's law applies to computer chips, right? There's kind

00:06:13.620 --> 00:06:18.220
of a Moore's law effect, but even I've read some, some analyses where it's like, it's even greater

00:06:18.220 --> 00:06:23.900
exponentially than Moore's law with these costs of genomics. It really is just driving the price down,

00:06:23.900 --> 00:06:27.980
which makes it a lot, allows us to apply these technologies for lots of different reasons.

00:06:27.980 --> 00:06:32.680
And the, you know, my favorite part obviously is the work that we're doing around helping people

00:06:32.680 --> 00:06:37.400
with cancer and helping use genomics to help people find clinical trials, find therapies,

00:06:37.400 --> 00:06:40.860
and hopefully improve their, their odds at, at fighting that disease.

00:06:40.860 --> 00:06:46.820
It's definitely one of the great challenges of our time. You know, it's, we've sort of solved

00:06:46.820 --> 00:06:53.740
the problems that, that were really bad for humanity to a large degree that, and now cancer is like,

00:06:53.740 --> 00:06:58.520
one of the major, major things that people have to, to deal with, right? It used to be,

00:06:58.520 --> 00:07:03.420
you might be hungry, you might be getting eaten by a wolf. Now, you know, you live, you live a long,

00:07:03.420 --> 00:07:08.860
healthy life until something, you know, you get some kind of bad news, right? And so how much is cancer

00:07:08.860 --> 00:07:15.540
a genetic problem versus other types of problems, right? You guys are building genetic tools. How's

00:07:15.540 --> 00:07:16.220
this all fit together?

00:07:16.220 --> 00:07:21.540
Caveat this by saying, I'm not, you know, a molecular pathologist. I'm not, you know, a bioinformatics person,

00:07:21.540 --> 00:07:27.800
but cancer is a, is a disease of the genome, right? So you have your genome, you know, 23 chromosomes,

00:07:27.800 --> 00:07:33.540
23 pairs of chromosomes, you know, you're talking about, you know, chromosome one is got 2000 genes,

00:07:33.540 --> 00:07:38.160
you know, 250 million base pairs, right? That's the kind of the scope of the data that we have.

00:07:38.520 --> 00:07:45.320
And cancer is really mutations within that genome causing things to break down in a certain way,

00:07:45.320 --> 00:07:49.880
right? So, you know, one of the analogies, and there's a book called One Renegade Cell that we kind of make

00:07:49.880 --> 00:07:57.340
all of our new employees read, really walks you through, you know, the gas pedal, the sticky gas pedal and the cut

00:07:57.340 --> 00:08:04.120
break line. And basically what ends up happening is your cell, you know, if you were to cut, have a little cut on your

00:08:04.120 --> 00:08:10.640
finger, the cells around that cut would know to kind of multiply and grow and then cover over that cut.

00:08:10.640 --> 00:08:14.200
And then they know how to stop, which is really an amazing feat.

00:08:14.200 --> 00:08:20.140
It's actually unbelievable that the machine that is humans works or any form of animal, really. It's

00:08:20.140 --> 00:08:20.600
incredible.

00:08:20.600 --> 00:08:25.260
And it's all these individual cells and there's different signals throughout the cell and those

00:08:25.260 --> 00:08:30.320
signals are called pathways. And what ends up happening is those pathways stop working in some

00:08:30.320 --> 00:08:35.380
fundamental way. And the way that they're stop working is through mutations. And those mutations can

00:08:35.380 --> 00:08:42.800
occur due to, you know, some environmental factor like smoking or uv light or some other mechanism that

00:08:42.800 --> 00:08:49.920
causes that mutation to happen. And then from there, it ends up that one cell ends up growing and taking

00:08:49.920 --> 00:08:56.380
over the space of the other cells. So a lot of these drugs and therapies that are out there are looking,

00:08:56.660 --> 00:09:02.120
you know, some of these targeted personalized therapies are targeting those individual cells

00:09:02.120 --> 00:09:07.600
that are kind of going off, going rogue and bringing them back and, you know, getting rid of them so that

00:09:07.600 --> 00:09:14.300
the healthy cells can, can do their thing. And so, you know, our, our software, our company basically is in

00:09:14.300 --> 00:09:20.180
the business of helping people, helping oncologists, helping pathologists and other folks in the healthcare

00:09:20.180 --> 00:09:26.400
industry identify what these mutations are, figure out what they mean, and then help their patients get them on a

00:09:26.400 --> 00:09:28.380
clinical trial or prescribe them a therapy.

00:09:28.380 --> 00:09:33.680
Right. If you understand the actual genetics that's causing the problem, maybe there's a better,

00:09:33.680 --> 00:09:36.780
more focused sort of treatment, right?

00:09:36.780 --> 00:09:37.460
Exactly right.

00:09:37.460 --> 00:09:42.340
Yeah. So if you look at chromosomes, like we talk about big data all the time, right?

00:09:42.340 --> 00:09:48.120
But I mean, there's only 23 pairs, so that's no big deal, but they're actually made up of a lot of stuff,

00:09:48.120 --> 00:09:53.660
right? So maybe like take us through the sort of big data store, just sort of the scale of the data,

00:09:53.840 --> 00:09:56.580
I guess a better way to put it around chromosomes and genetics.

00:09:56.580 --> 00:10:02.260
Yep. So there's, you know, 23 pairs of chromosomes and a quote unquote normal human being, right? And

00:10:02.260 --> 00:10:08.160
you have about 3 billion base pairs across all those chromosomes. So they, and they get labeled one to 22

00:10:08.160 --> 00:10:16.500
and then X and Y for the sex chromosomes. But the 3 billion base pairs in the human genome, there's about 21,000,

00:10:16.500 --> 00:10:25.080
24,000 of those are what we call genes. And genes are what are the actual thing that code to proteins. And proteins are the thing that actually make the whole system work.

00:10:25.220 --> 00:10:34.640
So the genes, the actual DNA part of it is the base pairs. And there's three base pairs, ACs, Gs, and Ts. Those go in pairs of three, you know, sets of three.

00:10:34.780 --> 00:10:49.840
If you remember from biology, those build out to become amino acids. And then the average person has about 30 million or so variants, 10%. So in one of the tricks that we do, obviously, in the space is we don't actually record all three, 3 billion base pairs.

00:10:49.840 --> 00:11:07.080
We just record, we just record the delta, just to make it, you know, a lot less data. And then the other part of making it a lot less data is, you know, focusing on specific genes, right? In cancer, you know, there's, depending on the disease type, there only might be three or four genes that matter, or maybe there's only 50 genes that matter.

00:11:07.240 --> 00:11:22.720
But in this pan cancer, across all the different types of cancers, there might be about 800 or 900 genes that matter. So, you know, our types of tests and sequencing that we do really focus in on those, those smaller regions to just kind of manage the data in a faster way.

00:11:22.720 --> 00:11:33.460
That collection of, you know, 3 billion base pairs, ACs, Gs, and Ts, those are, those are what are called the reference genome. And the reference genome is what everybody gets compared against, right?

00:11:33.480 --> 00:11:53.200
So when you're, do your, when sequencing is done on a tumor or on a, you know, a normal cell, the deltas, the variants are what it's actually captured and recorded. And we're actually recording it also in the context of what genes are there. So genes actually don't make up a huge amount of the genome. It's a very small portion of the genome that actually codes the proteins.

00:11:53.200 --> 00:12:01.740
Interesting. So is there like a bunch of basically instructions that are just off? They just don't go, they don't do anything?

00:12:01.740 --> 00:12:10.720
They call it junk DNA. Now they don't necessarily, it doesn't necessarily mean it is junk. It's just not necessarily known at this time, or it doesn't, it doesn't code to protein, but maybe it does other things.

00:12:10.720 --> 00:12:25.600
Like there's things called methylation and these other factors that affect the coding parts of it. And there's lots of theories of, of how that happens. Some of it's through evolution and, and pieces just kind of fall out and don't actually matter anymore in the human species.

00:12:25.740 --> 00:12:34.160
But there's other, other theories that maybe some of it isn't junk as well. And then even within the exon, even within the genes themselves, there's exons and introns.

00:12:34.640 --> 00:12:44.620
So the exons are these, these strings within the gene that actually get, you know, sliced out and turned into the RNA. And then that goes and codes the protein.

00:12:44.620 --> 00:12:58.580
And then the other part's called introns. The introns are the parts in between each of the exons. So understanding how the whole map works, understanding how to sequence the data, get the data off the sequencer and, and then keeping track of all that data is, is interesting.

00:12:58.580 --> 00:13:07.580
And, and one of the things that might be interesting to your, to your listeners, just because of the whole Python two, Python three thing is these reference transcripts get released over time.

00:13:07.580 --> 00:13:15.300
Right. So, and the one that's currently, you know, the main one that people use in the clinical setting is called GRCH 37.

00:13:15.300 --> 00:13:22.000
And that was released in February of 2009 and lots of tools and things were built off of this version of the reference genome.

00:13:22.100 --> 00:13:27.680
Well, over time they learn new things, they apply new regions. They, you know, it's, it's a very dynamic map.

00:13:27.680 --> 00:13:33.080
And then in 2013, right, eight, five years ago now, almost they released GRCH 38.

00:13:33.080 --> 00:13:37.740
The whole industry hasn't moved over to this new, this new version of the reference genome.

00:13:37.740 --> 00:13:41.020
So it's just the, because you got to update all your tools, update all your databases.

00:13:41.020 --> 00:13:44.320
And it's a, and it's a, it's a tricky thing to do.

00:13:44.320 --> 00:13:46.380
This major incompatibility. How interesting.

00:13:46.740 --> 00:13:53.540
So you talk about this reference genome and there's about 3 billion base pairs and make up a person.

00:13:53.540 --> 00:14:00.380
How much of that is consistent across every single person and how much of there's difference?

00:14:00.380 --> 00:14:10.280
Because, you know, I feel like we look at people, we all look quite varied, but then you also hear things like, well, your DNA is 1.5% different than say a chimpanzee or something like that.

00:14:10.280 --> 00:14:15.600
Right. So give me a sense for, you know, when you say I'm going to save the Delta, what does that look like?

00:14:15.600 --> 00:14:20.840
Usually an average person has, you know, about 10% variation from the 3 billion.

00:14:20.840 --> 00:14:25.560
So about 30 million base pairs will be different across different, different people.

00:14:25.560 --> 00:14:30.440
And, you know, it's obviously the numbers go up and down and there's prevalency frequencies, right?

00:14:30.440 --> 00:14:38.800
So a lot of these databases that are out there and available for, for people to consume as part of their process, they actually say, you know, we sampled a thousand people.

00:14:38.800 --> 00:14:44.900
And, you know, 20% of folks had a G in this spot and, you know, another percent had an A in that spot.

00:14:44.900 --> 00:14:49.140
So that's, that's a big part of just understanding what some of these variants are.

00:14:49.140 --> 00:14:56.760
And one of the things we do in our tools for cancer is that we'll, doctors are interested in that, that, that prevalency, that's that allele frequency.

00:14:56.760 --> 00:15:04.860
Because if the frequency is 50%, well, there's no way that that's actually a cancer causing variant because people would be born with cancer.

00:15:04.940 --> 00:15:06.780
And that just, it just doesn't really work that way.

00:15:06.780 --> 00:15:08.500
It wouldn't be a viable situation.

00:15:08.500 --> 00:15:16.800
So one of the data points they like to look at is how often does this variant actually happen in the, in the wild and, and actually in the human population.

00:15:16.800 --> 00:15:18.920
So it's a very interesting stat.

00:15:18.920 --> 00:15:19.640
Yeah, for sure.

00:15:19.640 --> 00:15:20.080
Okay.

00:15:20.080 --> 00:15:20.880
Interesting.

00:15:20.880 --> 00:15:31.860
So maybe let's talk about how do you actually do the sequencing at a high level that won't get into the tools and the Python code that you actually make, how that's working in there.

00:15:31.940 --> 00:15:34.500
But give us the sort of overall pipe.

00:15:34.500 --> 00:15:34.980
Yeah.

00:15:34.980 --> 00:15:36.420
Give us the general pipeline.

00:15:36.420 --> 00:15:43.440
Like how do you go from, you know, a swab on the cheek or whatever it is to, here's your printout.

00:15:43.440 --> 00:15:46.160
You ACCGTAC is, is you.

00:15:46.160 --> 00:15:51.720
There's been older technologies that, you know, work in smaller regions and, and can do things like that.

00:15:51.720 --> 00:15:53.360
There's a thing called Sanger sequencing.

00:15:53.360 --> 00:15:58.880
But as I said earlier, one of the major changes is in 2011, they did this next generation sequencing.

00:15:59.300 --> 00:16:05.220
That basically takes raw data right from, from a blood sample or a tumor sample.

00:16:05.220 --> 00:16:07.400
They put it in this, this machine called the sequencer.

00:16:07.400 --> 00:16:12.540
And then through the, you know, either chemicals or, or, or lights of, of that actual machine.

00:16:12.540 --> 00:16:14.640
And once again, this is in my area of expertise.

00:16:15.040 --> 00:16:18.620
They're able to analyze it and basically do what are called reads.

00:16:18.620 --> 00:16:25.840
So they're doing, you know, 65 base pairs across or, or what have you and read out ACs, Gs and Ts and write that to a file.

00:16:25.840 --> 00:16:32.000
And that's written to a file called, you know, either a fast day file or a fast Q file, which has quality associated with it.

00:16:32.100 --> 00:16:36.600
So all these raw reads are happening and it's basically like little snippets of a book.

00:16:36.600 --> 00:16:44.140
And, but it's like a book that they, someone's cut up into little fragments and then kind of thrown it up in the air and then try to figure out how to reassemble it.

00:16:44.400 --> 00:16:46.800
So that process, yeah.

00:16:46.800 --> 00:16:52.260
So that process is not something we do at my company, but that process is what we call alignment.

00:16:52.260 --> 00:16:55.380
And we take that book and try to basically tape it together.

00:16:55.380 --> 00:17:04.680
And the way they do that is by trying to compare regions against the reference genome itself and through math and algorithms and, and some machine learning.

00:17:04.680 --> 00:17:09.580
Now they're able to kind of align the whole readout of the, of the reference genome.

00:17:09.580 --> 00:17:12.380
And those get stored into a file called a SAM file.

00:17:12.380 --> 00:17:16.960
And really it's just a, just a listing of all these different variants, but in a line format.

00:17:16.960 --> 00:17:20.300
And then those files can get compressed into what's called a BAM file.

00:17:20.300 --> 00:17:30.840
And then we, you know, there are tools that are open source and, and tools like ours that actually allow you to do visualization of that alignment and really get a good understanding of do the reads line up?

00:17:30.840 --> 00:17:32.500
Do the variants look right?

00:17:32.500 --> 00:17:33.960
Is the quality there?

00:17:33.960 --> 00:17:38.400
And do you believe the actual calls that are being done?

00:17:38.520 --> 00:17:41.920
And then the next step after aligning it is actually what's called variant calling.

00:17:41.920 --> 00:17:46.620
So the, you know, some additional software, once again, stuff we don't actually do.

00:17:46.620 --> 00:17:53.400
It goes through the, these alignment files and makes decision and say, yep, I've, I've read through this, this BAM file or SAM file.

00:17:53.400 --> 00:17:59.480
And, you know, I believe at this position on this chromosome that it's an A and not a T.

00:17:59.740 --> 00:18:06.700
And obviously with two pairs of chromosomes, you might have, you know, half of them being A's and half of them being T's and things like that.

00:18:06.700 --> 00:18:08.460
And cancer is a little bit different, right?

00:18:08.460 --> 00:18:14.580
Because you then have a mixture of, of tumor cells that are kind of commingled with normal cells.

00:18:14.700 --> 00:18:22.740
So you might actually get allele frequencies, what we call variant allele frequencies or VAPs that are not 0.5 or 1, but something in between.

00:18:22.740 --> 00:18:26.440
Because it could be that actual mutation that is causing the cancer.

00:18:26.440 --> 00:18:30.280
So like half of them have some values there, others have another, right?

00:18:30.340 --> 00:18:39.060
The original normal cell and then you have these clones of tumor cells that actually, the actual cancer causing cell that is now growing and spreading in that region.

00:18:39.060 --> 00:18:39.300
Right.

00:18:39.300 --> 00:18:43.640
So that gives you more or less, here's what we think the genetics is.

00:18:43.640 --> 00:18:44.840
And then you have to analyze it, right?

00:18:44.840 --> 00:18:45.220
Right.

00:18:45.220 --> 00:18:46.920
And this is really where we come into play, right?

00:18:46.920 --> 00:18:56.980
So our company started in 2012 just because of this NGS data, you know, was starting to overwhelm pathologists and physicians with lots of genomic and molecular data.

00:18:57.200 --> 00:19:00.960
And the belief of our company is that, you know, all medicine is going to be molecular in the future.

00:19:00.960 --> 00:19:09.520
And really understanding how that, those, what those variants mean in the context of cancer, especially, is where we really focus our energies.

00:19:09.520 --> 00:19:16.300
And that includes things like annotating the variants and trying to help people understand, you know, how often do they happen in the population?

00:19:16.300 --> 00:19:20.940
Has there been papers out there that said this variant's pathogenic or benign?

00:19:21.460 --> 00:19:28.840
There are some prediction models that people have written that say, you know, this variant will cause the protein to degrade in some known way, right?

00:19:28.840 --> 00:19:34.500
In the stuck gas pedal or the broken brake line analogy.

00:19:34.500 --> 00:19:38.640
And then from there, we're able to do decision support, right?

00:19:38.640 --> 00:19:41.020
So there are FDA drugs that are available.

00:19:41.020 --> 00:19:42.700
There are clinical trials that are available.

00:19:43.140 --> 00:19:45.900
These things have very complicated eligibility criteria.

00:19:45.900 --> 00:20:02.100
And our software helps you, helps doctors, you know, make sense of all this disparate data, bring it all together and say, oh, yeah, for this patient, given these mutations and maybe some other tests and some other data about the person themselves, we can say that, you know, this clinical trial is best for you.

00:20:02.160 --> 00:20:04.080
Or, you know, this therapy would work for you.

00:20:04.080 --> 00:20:05.400
The FDA has approved it for you.

00:20:05.400 --> 00:20:24.560
And one of the interesting things that's happening is to prove the whole idea of cancer is a disease of genetics and not a cancer of, you know, something else, is that these drugs that are getting approved for, you know, lung cancer with a specific variant, well, that drug might work for, you know, a melanoma patient with a specific variant or vice versa.

00:20:24.560 --> 00:20:26.900
I might be getting the analogy wrong, but you get the point.

00:20:27.020 --> 00:20:30.040
Basically, it's the specific mutation that matters.

00:20:30.040 --> 00:20:36.740
The fact that you have a V600E on BRAF is the most important part, not the fact that it was on your skin.

00:20:36.740 --> 00:20:37.600
That's pretty interesting.

00:20:37.600 --> 00:20:39.980
Understanding at this level is really powerful.

00:20:39.980 --> 00:20:45.680
So let's talk about the software stack, maybe at a high level first, then we can dig into some of the tools.

00:20:45.680 --> 00:20:50.160
Like, what kind of software are you guys writing to solve these problems and where's Python fit in?

00:20:50.160 --> 00:20:54.440
We started off with, you know, a research application that we used to, you know, get the company started.

00:20:54.440 --> 00:20:57.440
And then we built our first clinical app for pathologists.

00:20:57.440 --> 00:21:01.340
And that was all built using Java and a language and GWT.

00:21:01.340 --> 00:21:05.740
So Google Web Toolkit is a Java-based JavaScript tool, right?

00:21:05.740 --> 00:21:08.040
So we don't really have any JavaScript wizards in-house.

00:21:08.040 --> 00:21:10.200
And we've always been, you know, Java-based.

00:21:10.360 --> 00:21:16.960
And so while that was getting built, we actually partnered up with a team at Vanderbilt University called My Cancer Genome.

00:21:16.960 --> 00:21:22.500
And they have a website for people that are, you know, looking for information about genetics and cancer.

00:21:22.500 --> 00:21:28.520
While the rest of my team was kind of building this, our first couple of products, I actually built a curation tool for them.

00:21:28.520 --> 00:21:30.500
And I built that with the Django admin tool, right?

00:21:30.500 --> 00:21:32.140
So Django has this great admin tool.

00:21:32.300 --> 00:21:40.940
So we started, so I was able to kind of whip together a nice content management tool for them so they could get rid of their SharePoint solution that they were running at the time.

00:21:40.940 --> 00:21:43.080
Anything that gets rid of SharePoint, that's a good thing.

00:21:43.080 --> 00:21:44.480
That was the thinking there.

00:21:44.480 --> 00:21:46.060
You can hold your head high that day.

00:21:46.060 --> 00:21:47.420
We turned off SharePoint.

00:21:47.420 --> 00:21:48.260
Right.

00:21:48.260 --> 00:21:48.860
So, yeah.

00:21:48.860 --> 00:21:51.240
And having a, you know, quick user interface for that.

00:21:51.240 --> 00:21:52.620
And then we've since evolved that tool.

00:21:52.620 --> 00:21:57.440
And now that tool is managing not just, you know, some basic content management stuff for the My Cancer Genome site.

00:21:57.440 --> 00:22:02.480
But it's basically managing all of our knowledge and what we call our knowledge management system.

00:22:02.480 --> 00:22:07.080
And then what we did was built on top of that Django REST framework API.

00:22:07.080 --> 00:22:11.680
So using, you know, Tom Christie's tool to build out an API using, you know, REST.

00:22:11.680 --> 00:22:19.120
And now you can, you know, hit the API and get back specific information running a thing called Match in our software.

00:22:19.620 --> 00:22:30.440
So you can, you know, given a patient's information, their demographic and whatever biomarkers they might have, you hit our API and we'll give you back, you know, hey, this is a good clinical trial for you.

00:22:30.440 --> 00:22:37.580
You know, within, you know, 50 miles of the patient, here's a good trial for you to maybe put them on or here's a therapy that's approved by the FDA.

00:22:37.580 --> 00:22:39.420
That sounds really, really powerful.

00:22:39.420 --> 00:22:41.880
And some cool tools that are involved in there.

00:22:41.880 --> 00:22:44.140
You talked a little bit about user interfaces.

00:22:44.140 --> 00:22:47.220
Is that all Java or are you doing some UI in Python?

00:22:47.640 --> 00:22:50.060
I've heard your recent stuff about UIs.

00:22:50.060 --> 00:22:53.320
All our UIs are in Google Web Toolkit right now.

00:22:53.320 --> 00:22:56.580
We are doing the new version of the My Cancer Genome website using React.

00:22:56.580 --> 00:23:00.160
So that's one piece of JavaScript that we've started to use.

00:23:00.160 --> 00:23:09.360
But for the most part, you know, we're building out strong APIs with Python and then our UIs and things are still with Java and GWT.

00:23:09.360 --> 00:23:10.040
Yeah, that sounds good.

00:23:10.040 --> 00:23:15.280
I've heard a lot of good things about React, but I haven't done anything with React, so I can't speak too much to it.

00:23:15.280 --> 00:23:16.060
Yeah, cool.

00:23:16.060 --> 00:23:20.620
This portion of Talk Python is brought to you by Codacy.

00:23:20.620 --> 00:23:31.440
If you want to improve code quality, prevent bugs and security issues from making it into production, and at the same time speed up your code review process by 20%, then you need to try Codacy.

00:23:31.440 --> 00:23:33.940
That's C-O-D-A-C-Y.

00:23:34.180 --> 00:23:44.720
Codacy makes it easy to track code quality and identify and fix issues by automatically analyzing your commits and pull requests with all the most widely used static analysis tools.

00:23:44.720 --> 00:23:48.100
Codacy helps great teams build great software.

00:23:48.100 --> 00:23:52.000
Join companies like DeliverHero, PayPal, Samsung, and more.

00:23:52.560 --> 00:23:58.680
Try your first code review by visiting talkpython.fm/Codacy and linking your GitHub or Bitbucket account.

00:23:58.680 --> 00:24:01.360
You can also just click on the Codacy link in the show notes.

00:24:01.360 --> 00:24:04.840
All right, so let's talk about some of the tools that you're using.

00:24:04.840 --> 00:24:07.140
So you talked about Django REST framework.

00:24:07.140 --> 00:24:08.840
That's Tom Christie's tool.

00:24:08.840 --> 00:24:10.240
I had him on, or framework.

00:24:10.320 --> 00:24:12.880
I had him on the show a while ago as well.

00:24:12.880 --> 00:24:17.660
So it's basically layers on REST API on top of Django, right?

00:24:17.660 --> 00:24:22.020
So maybe tell people how you're using that, like what it's doing for you.

00:24:22.020 --> 00:24:24.460
One of the key things that we do is annotations.

00:24:24.460 --> 00:24:28.360
And one of the annotations people want to know is, okay, where is this variant?

00:24:28.360 --> 00:24:30.920
And where is it in the context of the whole genome?

00:24:30.920 --> 00:24:32.160
And that's called the G-dot.

00:24:32.160 --> 00:24:36.120
Or where is it in the context of the coding region of a gene?

00:24:36.160 --> 00:24:37.080
And that's called the C-dot.

00:24:37.080 --> 00:24:43.340
Or where does it end up land, you know, once it goes from a C-dot to a P-dot, which is the protein, right?

00:24:43.340 --> 00:24:44.720
So the actual amino acids.

00:24:44.720 --> 00:24:46.220
So G-dot, C-dot, P-dot.

00:24:46.220 --> 00:24:49.100
So that is a nomenclature called HGVS.

00:24:49.100 --> 00:24:50.300
There's actually a lot.

00:24:50.300 --> 00:24:54.300
And so our API actually houses, you know, all of our knowledge.

00:24:54.300 --> 00:24:57.080
But it also calculates annotations for people.

00:24:57.080 --> 00:25:03.680
And one of the great libraries we use is the BioCommons and HGVS.

00:25:04.000 --> 00:25:07.220
And those two libraries are open source, open on GitHub.

00:25:07.220 --> 00:25:10.280
And they do a really good job of doing those calculations.

00:25:10.280 --> 00:25:15.220
So if you're trying to understand, you know, how to get into genetics, I'd look at those libraries.

00:25:15.220 --> 00:25:17.460
There's also a library called Biopython.

00:25:17.460 --> 00:25:20.580
We don't use that, but it's also really good.

00:25:20.580 --> 00:25:23.980
And then from a bioinformatics perspective, you know, we use that full stack.

00:25:24.120 --> 00:25:32.860
So we have on top of our API, we've built out some user interfaces that use actually Jupyter and Bokeh and Pandas and NumPy.

00:25:32.860 --> 00:25:34.440
So I actually take that back.

00:25:34.440 --> 00:25:40.800
Our genome analytics platform, you know, the major part of it, the container part of it is written in GWT.

00:25:40.800 --> 00:25:44.400
But it's actually calling in and bringing in Bokeh plots as well.

00:25:44.580 --> 00:25:49.100
So Bokeh is being used on the back end using Pandas to calculate these great plots.

00:25:49.100 --> 00:25:51.080
And then we're rendering them in our front end.

00:25:51.080 --> 00:25:51.940
Yeah, that's really cool.

00:25:51.940 --> 00:25:53.880
I've never had a chance to use anything with Bokeh.

00:25:54.000 --> 00:26:00.980
But that's where you basically do the sciencey visualization stuff on the server in Python.

00:26:00.980 --> 00:26:03.380
And it just transfers over to the web front end.

00:26:03.380 --> 00:26:03.840
Is that right?

00:26:03.840 --> 00:26:04.180
Yeah.

00:26:04.180 --> 00:26:06.980
So it's calculating the JavaScript for you.

00:26:06.980 --> 00:26:10.820
Because once again, we don't have the JavaScript chops in house.

00:26:10.820 --> 00:26:14.640
But you're basically running pure Python using Pandas data frames.

00:26:14.640 --> 00:26:18.860
And then you basically configure your Bokeh plot using this Python library.

00:26:19.420 --> 00:26:20.620
And then it renders it.

00:26:20.620 --> 00:26:23.620
And then it basically streams out HTML and JavaScript.

00:26:23.620 --> 00:26:27.500
And you can just kind of embed it in an iframe or what have you in your UI.

00:26:27.500 --> 00:26:28.760
And it works great.

00:26:28.760 --> 00:26:29.700
And it sounds really great.

00:26:29.700 --> 00:26:32.240
Like you don't have to be in the charting business.

00:26:32.240 --> 00:26:32.900
Exactly right.

00:26:32.900 --> 00:26:33.980
Those are live, right?

00:26:33.980 --> 00:26:35.940
They're not just like PNGs or something.

00:26:35.940 --> 00:26:39.020
You can definitely work with them dynamically right there.

00:26:39.020 --> 00:26:41.820
You can use them to generate PNGs if that's what you need.

00:26:41.820 --> 00:26:48.100
And some of our clients do need that to include it in their research papers if that's what they're using our tools for.

00:26:48.380 --> 00:26:50.660
But yeah, it's got lots of different use cases.

00:26:50.660 --> 00:26:55.760
And Python keeps coming up with great libraries for visualizations.

00:26:55.760 --> 00:26:57.760
And there's lots of different options too.

00:26:57.760 --> 00:26:59.180
But Bokeh has worked out well for us.

00:26:59.180 --> 00:26:59.400
Yeah.

00:26:59.400 --> 00:27:01.820
It's kind of becoming a paradox of choice, right?

00:27:01.820 --> 00:27:06.860
Like there's a little – as soon as you learn something – yeah, as soon as you learn something, you're happy with it.

00:27:06.860 --> 00:27:07.900
You're like, but that looks better.

00:27:07.900 --> 00:27:08.800
Maybe I should do that.

00:27:08.800 --> 00:27:12.040
And of course, it's a constant treadmill sort of thing.

00:27:12.500 --> 00:27:17.060
So one of the tools that you're using that didn't surprise me but I think is interesting and I want to hear more about is spaCy.

00:27:17.060 --> 00:27:20.260
So I don't even think I've mentioned spaCy on the podcast before.

00:27:20.260 --> 00:27:21.300
Tell us about that.

00:27:21.300 --> 00:27:22.000
What's spaCy?

00:27:22.000 --> 00:27:22.280
Yeah.

00:27:22.340 --> 00:27:27.160
So we've done really a proof of concept at this point using natural language processing.

00:27:27.360 --> 00:27:35.500
So one of the major challenges in our space and IBM and a few other big companies are spending lots of money to try to tackle this problem.

00:27:35.500 --> 00:27:43.180
But basically the problem is a lot of these EHRs, EMRs, people are recording their notes about patients in kind of free text.

00:27:43.180 --> 00:27:48.300
And one of the challenges with that obviously is it's unstructured and it's hard to do anything with it.

00:27:48.300 --> 00:27:51.640
We're not really in the business of major machine learning.

00:27:51.640 --> 00:27:53.900
We're kind of in the workflow and tools business.

00:27:53.900 --> 00:27:57.240
We help people solve problems in kind of a more pragmatic way.

00:27:57.240 --> 00:27:58.360
We're a small company.

00:27:58.360 --> 00:27:59.920
We can't spend billions of dollars.

00:27:59.920 --> 00:28:09.520
But what we're doing is we're taking spaCy and using that to parse some of these free text files and basically make recommendations to people.

00:28:09.520 --> 00:28:13.620
So doing things like what are called entity recognition.

00:28:13.620 --> 00:28:18.860
So entity recognition means I'm reading this Wikipedia article and finding all the proper nouns in it.

00:28:18.860 --> 00:28:22.360
Barack Obama did this in Detroit, Michigan or whatever.

00:28:22.480 --> 00:28:23.660
Those would all be proper nouns.

00:28:23.660 --> 00:28:27.880
And this is a great tool for extracting out named entities like that.

00:28:27.880 --> 00:28:35.580
We've trained spaCy to find named entities based on our ontologies, our data within our KMS.

00:28:35.580 --> 00:28:35.900
Right.

00:28:35.900 --> 00:28:37.340
These are our important words.

00:28:37.340 --> 00:28:38.540
Go see if they say this.

00:28:38.540 --> 00:28:39.220
Something like that.

00:28:39.220 --> 00:28:39.960
Exactly right.

00:28:40.040 --> 00:28:44.300
So there's a pattern matching framework that's within spaCy that's really very easy to use.

00:28:44.300 --> 00:28:47.140
And then the other thing we'd use it for is for classification.

00:28:47.140 --> 00:28:55.660
So basically we've trained some models to say, OK, when you read this sentence and it says, you know, estrogen receptor strongly expressed.

00:28:55.660 --> 00:28:58.080
Well, we want that to actually mean something.

00:28:58.080 --> 00:29:01.600
We want that to mean ER positive in our in our use case, in our vernacular.

00:29:01.880 --> 00:29:04.220
And that means something to our our end customers.

00:29:04.400 --> 00:29:11.420
And what it really does is what we then do is present it to them and say, hey, we saw this sentence and we're you know, we think it says this.

00:29:11.420 --> 00:29:11.920
Do you agree?

00:29:11.920 --> 00:29:12.480
Yes or no.

00:29:12.480 --> 00:29:19.600
And if they say yes, then we kind of keep that that piece of information and use it to further train our model to make it better over time.

00:29:20.060 --> 00:29:29.620
We're not really trying to we don't really think we can get rid of the human in the loop at this point just because, you know, we're just just at the start of this thing and we want to make sure we get the right answer 100 percent of the time.

00:29:29.620 --> 00:29:38.380
But what we want to do is make it so they don't have to read, spend a half an hour reading through a document where we can just scan it for them and say, here are the interesting parts.

00:29:38.380 --> 00:29:40.420
Please go ahead and just confirm it.

00:29:40.420 --> 00:29:41.320
That's pretty wild.

00:29:41.320 --> 00:29:49.740
I feel like this whole machine learning AI business is deeply reaching into medicine and things like that.

00:29:49.820 --> 00:29:49.940
Right.

00:29:49.940 --> 00:29:52.660
This is just another super interesting example I hadn't even thought of.

00:29:52.660 --> 00:30:02.220
But, you know, in terms of oncology, like the analyzing, say, scans like pictures to see, you know, have the machine say, no, that looks like cancer to me.

00:30:02.220 --> 00:30:04.680
Like kind of doing what radiologists might do or something.

00:30:04.680 --> 00:30:04.940
Right.

00:30:04.940 --> 00:30:05.340
Exactly.

00:30:05.340 --> 00:30:05.700
Yeah.

00:30:05.700 --> 00:30:06.320
It's pretty amazing.

00:30:06.320 --> 00:30:07.620
We like spaCy a lot.

00:30:07.620 --> 00:30:11.740
I originally tried playing with NLTK a few years ago and actually kind of ran into some barriers.

00:30:11.740 --> 00:30:13.380
It's an old that's an older project.

00:30:13.380 --> 00:30:18.200
spaCy is really modern and that it's, you know, kind of does some of the best practices with Python.

00:30:18.200 --> 00:30:19.500
I highly recommend it.

00:30:19.580 --> 00:30:20.960
The documentation is really good.

00:30:20.960 --> 00:30:22.840
Performs really well out of the box.

00:30:22.840 --> 00:30:26.660
And I was able to pull together a really good demonstration in just a few weeks.

00:30:26.660 --> 00:30:28.580
So I highly recommend it.

00:30:28.580 --> 00:30:29.300
Looks really cool.

00:30:29.300 --> 00:30:37.160
It definitely, they have it lined up to, when you go to visit spacey.io, it really looks appealing and polished.

00:30:37.160 --> 00:30:42.440
I was wondering why you didn't choose, what the difference or what made you choose spaCy over NLTK?

00:30:42.560 --> 00:30:44.880
It's actually pretty obvious straight away, isn't it?

00:30:44.880 --> 00:30:48.960
They're doing a really good job with, you know, as a small open source, you know, company.

00:30:48.960 --> 00:30:51.900
I think there's like maybe two people working there from what I can tell.

00:30:51.900 --> 00:30:58.480
And they've, you know, they've basically open sourced their core product and they're selling, you know, ancillary products on top of it.

00:30:58.540 --> 00:31:00.680
And they're consulting services too.

00:31:00.680 --> 00:31:02.460
And, you know, it seems like a great project.

00:31:02.580 --> 00:31:03.300
Yeah, that's really cool.

00:31:03.300 --> 00:31:13.560
And I definitely look at it more because I'm always fascinated how these people are building really interesting business models on top of some kind of successful open source thing.

00:31:13.560 --> 00:31:15.960
So, yeah, another cool example.

00:31:15.960 --> 00:31:23.200
So you're building some interesting CLI tools and you guys are using Click, which is pretty common.

00:31:23.200 --> 00:31:26.180
That's from Armin Roenker who made Flask.

00:31:26.180 --> 00:31:27.520
You're also using Pex.

00:31:27.520 --> 00:31:30.800
That, I think, gets less, a little bit less awareness.

00:31:30.800 --> 00:31:31.640
Tell us about Pex.

00:31:31.640 --> 00:31:32.340
It's really interesting.

00:31:32.340 --> 00:31:32.960
Click's great.

00:31:32.960 --> 00:31:36.420
There's obviously lots of great ways of building, you know, command line tools in Python.

00:31:36.420 --> 00:31:38.160
They've been doing that for a long time.

00:31:38.160 --> 00:31:40.820
But Click's really, really easy to use.

00:31:40.820 --> 00:31:44.260
And then what we find is, you know, how do we get this to our clients?

00:31:44.260 --> 00:31:46.040
We do a lot of things with Docker.

00:31:46.040 --> 00:31:49.820
And when we're setting up servers, using Docker to set up a server is great.

00:31:49.820 --> 00:31:54.080
But we actually also have now command line tools that we're trying to distribute to people.

00:31:54.080 --> 00:32:00.620
And, you know, pushing things up to PyPI and having them pull things down using pip and having them set up virtual environments.

00:32:00.620 --> 00:32:07.860
It just sometimes gets a little bit difficult for some of our end users who, you know, might not be Python, day-to-day Python developers.

00:32:08.440 --> 00:32:15.720
So using Pex, you're able to actually just build the whole module together with the virtual environment baked in.

00:32:15.720 --> 00:32:18.920
And when you deliver it to them, it just kind of, it just runs.

00:32:18.920 --> 00:32:20.800
And you can build it to different platforms.

00:32:20.800 --> 00:32:27.960
You can, you know, on my, on my, for one of my projects, we have a little docking container that actually builds it to Linux and then builds it to macOS.

00:32:28.440 --> 00:32:33.840
And we're able to share it out to people and, and use the tools without having to go through the whole virtual environment setup stuff.

00:32:33.840 --> 00:32:34.560
That's really cool.

00:32:34.560 --> 00:32:43.380
So I think Pex is the one that actually takes everything, zips it up, and then it turns out Python can execute zip files and run from there, right?

00:32:43.380 --> 00:32:44.240
Which is pretty wild.

00:32:44.900 --> 00:32:48.780
Do you know if that entirely eliminates the dependency on Python?

00:32:48.780 --> 00:32:54.900
Like if I had a blank machine or is it just sort of the packaging, but they got to have the base Python there?

00:32:54.900 --> 00:32:56.160
Someone asked me that just the other day.

00:32:56.160 --> 00:33:00.140
I don't think, I actually, this thing, it's just the libraries because it doesn't seem that big of a file.

00:33:00.140 --> 00:33:03.660
It's not like, it's not like when you download a clips and you get the whole jar with it.

00:33:03.900 --> 00:33:04.720
Yeah, yeah, yeah.

00:33:04.720 --> 00:33:06.380
I get the whole Java JDK with it.

00:33:06.380 --> 00:33:08.540
I, you know, I actually don't think, I don't think so.

00:33:08.540 --> 00:33:09.120
It's pretty cool.

00:33:09.120 --> 00:33:13.060
Yeah, I've been playing with Pi Installer and it's pretty nice as well.

00:33:13.060 --> 00:33:15.660
And it kind of, it'll do it so there's no dependency.

00:33:15.660 --> 00:33:20.900
It's also more problematic because it's trying to solve the problem bigger, I think.

00:33:20.900 --> 00:33:23.080
So I was just thinking, oh, maybe Pex is going to be nice.

00:33:23.080 --> 00:33:30.080
Another thing that I think is really cool around this stuff, just as a shout out, is that I've been playing with a lot lately is this thing called GUI.

00:33:30.080 --> 00:33:31.460
G-O-O-E-Y.

00:33:31.460 --> 00:33:32.140
Have you heard of this?

00:33:32.240 --> 00:33:34.780
I did see your little prototype up on GitHub, I think.

00:33:34.780 --> 00:33:41.180
Yeah, so you can take something like this and then just throw like a little UI with dropdowns instead of command line arguments on top of it.

00:33:41.180 --> 00:33:41.940
It's pretty cool.

00:33:41.940 --> 00:33:42.240
Right.

00:33:42.240 --> 00:33:45.720
So another thing that you are doing is AIoHCP.

00:33:45.720 --> 00:33:49.360
Tell us, are you using the server or the client component of that?

00:33:49.360 --> 00:33:50.120
All client.

00:33:50.120 --> 00:33:52.660
So for us, it's high throughput annotations, right?

00:33:52.660 --> 00:34:01.780
So one of our clients, you know, basically paid millions of dollars for this high throughput system to generate, to go through the whole alignment and variant calling situation, right?

00:34:01.800 --> 00:34:07.520
So they're trying to do high throughput, you know, lots of thousands of cases per week or whatever they're doing.

00:34:07.520 --> 00:34:09.680
And they're trying to keep up with that.

00:34:09.680 --> 00:34:13.680
But they need annotations from our KMS, our knowledge management system.

00:34:13.680 --> 00:34:16.740
And so the challenge was, okay, how do I keep up with them?

00:34:16.940 --> 00:34:20.560
And the first version of my software had trouble, right?

00:34:20.560 --> 00:34:25.060
So we were, you know, trying to parallelize things with multiprocessors and it worked.

00:34:25.060 --> 00:34:44.300
But, you know, once I've actually played with AIoHTP and AsyncIO and really understanding how to program in that paradigm and really look for the IO bottlenecks and work around them, it made my redesign of that tool we called our annotator that actually does that annotation much easier.

00:34:44.300 --> 00:34:55.640
Right. So now, you know, I have basically have these five stages in my little program with queues in between them, you know, where basically what an annotator does is really just reading a file, making a call to an API.

00:34:55.640 --> 00:34:57.540
A remote API of our service, right?

00:34:57.600 --> 00:35:02.020
Exactly right. And then injecting that data into the stream and then writing it out to disk, right?

00:35:02.020 --> 00:35:06.600
So you got basically, let's just say, three spots where you can leverage the AsyncIO.

00:35:06.600 --> 00:35:11.760
So reading from the original file, making the call to the HTTP server, and then writing out to disk.

00:35:11.760 --> 00:35:16.960
And, you know, this whole framework allows me to do all three of those things.

00:35:16.960 --> 00:35:23.480
It kind of just magically balances itself with regards to how much it's reading from the disk, how much it's writing to the disk, and how much it's calling the API.

00:35:24.080 --> 00:35:28.480
The only thing you have to do is make sure you don't call your API too much unless you want to take down your server.

00:35:28.480 --> 00:35:35.660
And then our server on the other end is, you know, highly parallelized through using Celery and Redis and handling.

00:35:35.660 --> 00:35:39.460
It can scale up because we've thrown lots of hardware at that.

00:35:39.460 --> 00:35:47.100
And so what we're able to do is we're able to keep up with that, you know, multi-million dollar hardware solution with Python 3 and AsyncIO.

00:35:47.100 --> 00:35:48.380
And it's been great.

00:35:48.380 --> 00:35:49.880
And probably like, what, one thread?

00:35:49.880 --> 00:35:53.120
So basically, yeah, one process running and it's doing the job.

00:35:53.280 --> 00:35:58.780
So we do process, we can then, we can then scale out that one program across multiple processes if we want.

00:35:58.780 --> 00:36:02.180
But it's, it's really pretty high performance and, and our client's pretty happy with it.

00:36:02.180 --> 00:36:02.900
That's really awesome.

00:36:02.900 --> 00:36:08.780
Yeah, because so much of the time, programs that are slow, they're actually just waiting on some other part of the system.

00:36:08.780 --> 00:36:09.820
They're waiting on the web service.

00:36:09.820 --> 00:36:10.740
They're waiting on disk.

00:36:10.740 --> 00:36:12.840
They're waiting on, you know, whatever, right?

00:36:12.840 --> 00:36:15.760
And so this lets them be productively waiting, basically.

00:36:15.760 --> 00:36:17.280
It's definitely a paradigm shift.

00:36:17.280 --> 00:36:25.540
And you have to, you have to think through the whole, this Async method is calling this other Async method and, and really understanding how that all fits together.

00:36:25.540 --> 00:36:28.320
And it can definitely bend your brain a little bit if you're not used to it.

00:36:28.320 --> 00:36:31.420
But once you actually do figure it out, it's kind of a superpower and it's really great.

00:36:31.420 --> 00:36:31.700
Yeah.

00:36:31.740 --> 00:36:37.900
And as far as superpowers go, like the actual change in the programming model is pretty mellow, right?

00:36:37.900 --> 00:36:41.320
There's like not, it's not that different from serial requests.

00:36:41.320 --> 00:36:41.620
Yeah.

00:36:41.620 --> 00:36:44.260
You just got those couple of keywords with Async and await.

00:36:44.260 --> 00:36:47.640
And once you figure that out, then it's kind of easy from there.

00:36:47.640 --> 00:36:49.820
And then it's just really about using cues.

00:36:49.820 --> 00:37:00.400
And then you get into the whole queuing theory and, you know, lean manufacturing and that kind of stuff and try to understand, like, how do you, how do you remove the bottlenecks from your system so that, so that things go as fast as they possibly can go.

00:37:00.400 --> 00:37:04.360
And if you, if you kind of have that background and mentality with it, it's, it's really cool.

00:37:04.360 --> 00:37:04.980
Yeah, that's cool.

00:37:04.980 --> 00:37:09.360
But of course, anytime you're thinking about concurrency, it can definitely sort of bend your mind, like you said.

00:37:09.360 --> 00:37:10.160
Yeah, exactly.

00:37:10.160 --> 00:37:16.600
So speaking about concurrency, another thing that you guys are using that's really cool is channels and celery and Redis.

00:37:16.600 --> 00:37:18.320
Channels, is that like Django channels?

00:37:18.320 --> 00:37:19.060
Yeah, Django channels.

00:37:19.060 --> 00:37:21.820
So one of our tools, there's actually async mode to it.

00:37:21.820 --> 00:37:29.020
So in the oncology space, one of the big things that happens is for challenging cases, they go to what's called a tumor board.

00:37:29.500 --> 00:37:42.380
So some of your bigger hospitals will have a tumor board where basically all of the experts at that hospital, or even they could even, you know, WebEx other people in from other hospitals to get to the experts to help people with, you know, rare cases, right?

00:37:42.380 --> 00:37:45.340
There's a case, there's a variant, they don't know what it means.

00:37:45.340 --> 00:37:47.080
What do they do about it?

00:37:47.120 --> 00:37:48.660
And that's what they call a tumor board.

00:37:48.660 --> 00:37:50.340
And we build software for that.

00:37:50.340 --> 00:37:56.880
And one of our modes is actually async mode where people can kind of, so they don't actually have to have a WebEx, they can just kind of go to our app.

00:37:56.880 --> 00:37:59.860
And everybody's in the app at the same time.

00:37:59.860 --> 00:38:05.000
And if there's a leader, the person's moving around from one page of the app to the other, that's sync mode.

00:38:05.020 --> 00:38:06.580
And that's actually done using WebSockets.

00:38:06.580 --> 00:38:15.840
And so if you know anything about Django and, you know, its history, so Django started off, it was built on WSGI, and that's a synchronous protocol.

00:38:15.840 --> 00:38:17.560
Yeah, all the popular ones are.

00:38:17.560 --> 00:38:19.540
They still haven't found a way really around it.

00:38:19.540 --> 00:38:21.120
Godwin, Andrew Godwin?

00:38:21.120 --> 00:38:22.320
Yeah, Andrew Godwin, yeah.

00:38:22.320 --> 00:38:28.800
He added this capability to Django, which is basically kind of like this little side thing to Django called Channels.

00:38:28.800 --> 00:38:39.020
He invented another framework for interfacing in with Django from your web server, right, from Apache or Nginx, and using ASGI, I think is what he called it.

00:38:39.020 --> 00:38:40.420
And it's an asynchronous platform.

00:38:40.420 --> 00:38:43.000
And so that enables us to do WebSockets.

00:38:43.000 --> 00:38:48.520
And the WebSockets is the thing that allows us to do this synchronous movement between different people on our application.

00:38:48.700 --> 00:38:54.960
So if, you know, one person clicks a link and jumps to another page, all the other people that are on the app jump along with them.

00:38:54.960 --> 00:39:05.620
And really, the main goal of this is to allow people to kind of dynamically work with the genomic information at their fingertips rather than having, you know, a bunch of people on their phones Googling.

00:39:05.620 --> 00:39:07.580
What do these variants mean, right?

00:39:07.580 --> 00:39:10.340
So they're all kind of working together on a single call.

00:39:10.340 --> 00:39:13.540
So you guys sort of built, like, the Google Docs.

00:39:14.220 --> 00:39:19.220
You kind of added a Google Docs equivalent type of experience to your app, right?

00:39:19.220 --> 00:39:23.700
So everybody fires up your app and they have this local sort of guided experience.

00:39:23.700 --> 00:39:25.060
Yeah, that's a really good analogy.

00:39:25.060 --> 00:39:25.360
Yeah.

00:39:25.360 --> 00:39:26.700
Yeah, I think more apps need that.

00:39:26.700 --> 00:39:27.660
I think that's really awesome.

00:39:27.660 --> 00:39:32.980
How hard was it to add this channels, to do the channels code and to add this stuff together?

00:39:32.980 --> 00:39:34.540
Well, the channels part was easy.

00:39:34.540 --> 00:39:39.340
I mean, it basically just kind of worked out of the box where, you know, we're able to send messages from one thing to the other.

00:39:39.340 --> 00:39:46.240
But once again, you know, getting the actual communication going from one instance to the other is tricky and it's managing state.

00:39:46.240 --> 00:39:51.160
And how do you change, you know, from one user to another and make sure that the experience is smooth?

00:39:51.160 --> 00:39:52.580
That's always tough.

00:39:52.580 --> 00:39:57.080
And then as you add new features, you need to make sure that the sync thing works across those new features, right?

00:39:57.080 --> 00:39:57.540
That's right.

00:39:57.540 --> 00:40:00.800
We've got this new visualization, but it only shows up for the leader, not for you.

00:40:00.800 --> 00:40:01.700
Those are always fun.

00:40:01.700 --> 00:40:09.280
But the actual channels plumbing and things like that, even though it's kind of cutting edge code for, you know, in beta or what have you, works really well.

00:40:09.280 --> 00:40:15.460
And adding the Redis channel in between is what ends up happening when you actually set this up.

00:40:15.460 --> 00:40:18.040
You end up having, you know, your web server, Nginx.

00:40:18.040 --> 00:40:22.260
You have what's called an interface server, which is basically an instance of your Django app.

00:40:22.260 --> 00:40:25.200
You have the Redis channel and then you have workers.

00:40:25.200 --> 00:40:36.080
So the workers are basically other instances of your Django app, but they're actually doing the actual work of responding to either a plain old HTTP request or to one of these WebSocket requests.

00:40:36.080 --> 00:40:38.320
And, you know, all that plumbing just worked great.

00:40:38.320 --> 00:40:39.020
How cool.

00:40:39.020 --> 00:40:40.120
Yeah, it sounds really fun.

00:40:40.120 --> 00:40:44.400
I had no chance to use it, but it definitely looks really cool.

00:40:44.400 --> 00:40:44.820
Yeah.

00:40:44.820 --> 00:40:45.320
All right.

00:40:45.320 --> 00:40:50.800
Well, that sounds like quite the list of cool projects and technologies you're getting to put together there.

00:40:50.800 --> 00:40:51.940
It must be fun to work on.

00:40:51.940 --> 00:40:52.540
It's great.

00:40:52.540 --> 00:41:00.300
And, you know, having a purpose and, you know, working for something that's not online marketing or e-commerce or whatever I was doing in my past life is great.

00:41:00.300 --> 00:41:03.540
So it's great, you know, working on something that I think is going to make a difference.

00:41:03.540 --> 00:41:14.440
Yeah, definitely trying to make people healthier and live more full lives is way better than trying to optimize that click rate or, you know, convert one more piece of data to try to piece together.

00:41:14.440 --> 00:41:18.180
No, this person is actually that other person and they're in this demographic, right?

00:41:18.180 --> 00:41:19.000
Right.

00:41:19.000 --> 00:41:19.460
Yeah, exactly.

00:41:19.460 --> 00:41:22.080
So, you know, some other thing that nobody needs.

00:41:22.200 --> 00:41:24.280
Online stocking is not something I'm interested in now.

00:41:24.280 --> 00:41:25.000
No, for sure.

00:41:25.000 --> 00:41:26.160
Cool.

00:41:26.160 --> 00:41:30.260
So you actually have a couple of somewhat related open source libraries.

00:41:30.260 --> 00:41:31.340
You want to talk about those a bit?

00:41:31.340 --> 00:41:33.200
One of the libraries that's out there is called Adders.

00:41:33.200 --> 00:41:38.920
And it's actually, I think, the basis of the new data classes that's in Python 3.7, right?

00:41:38.920 --> 00:41:40.920
So the new PEP that does data classes.

00:41:41.240 --> 00:41:45.300
So there was actually an original project called Adders, which is a really great project.

00:41:45.300 --> 00:41:55.080
And it lets you define your classes and you get a bunch of, you know, kind of boilerplate Python stuff for free for comparisons and, you know, string representations and things like that.

00:41:55.080 --> 00:41:55.360
Right.

00:41:55.360 --> 00:42:00.220
It implements like, say, hashing correctly and all that kind of weirdness that you can overlook.

00:42:00.220 --> 00:42:00.460
Yeah.

00:42:00.540 --> 00:42:12.820
The problem I was trying to solve at the time was I wanted an immutable way of reading a YAML file, getting a nested Python object, and not having to, like, munch dictionaries, right?

00:42:12.860 --> 00:42:20.420
Because you start writing code to dictionaries and quickly things get kind of nasty with some nested dictionary references and things like that.

00:42:20.420 --> 00:42:27.280
So that's what I was looking for was a way to round trip to YAML, kind of like in Java, there's a library called Jackson that'll do that.

00:42:27.280 --> 00:42:29.880
It'll round trip to JSON or to what have you.

00:42:29.880 --> 00:42:33.680
And Python does a good job of, obviously, round tripping from dictionaries to YAML.

00:42:33.680 --> 00:42:37.920
So what I wanted was an actual object model and patterns, which is really good.

00:42:37.920 --> 00:42:41.920
But I kind of had just a different mental model, and I wanted something more like the Django ORM.

00:42:42.320 --> 00:42:50.620
And I had a lot of use cases where I wanted to basically say, yeah, I want to call this a string field, and I want it to always have this validator and this converter.

00:42:50.620 --> 00:42:55.980
So what adders will let you do is when you define your fields, you can say it's got this converter and this validator.

00:42:55.980 --> 00:43:01.100
And I kind of just wanted some templatized versions so I didn't have to keep saying the same thing over and over again.

00:43:01.100 --> 00:43:03.880
And I also wanted this, you know, this magical transformation.

00:43:03.880 --> 00:43:06.120
And that's what the related project does.

00:43:06.120 --> 00:43:06.520
Related.

00:43:06.520 --> 00:43:07.560
It looks really cool.

00:43:07.700 --> 00:43:19.820
And it does look like you're working either in the Django ORM or Mongo Engine or, you know, one of these types of things where you define what the object actually is.

00:43:19.820 --> 00:43:22.460
Can you have, like, nested objects?

00:43:22.460 --> 00:43:29.600
You basically can have, if you declared a class A, it can then relate to class B either as a, have a child object B,

00:43:29.960 --> 00:43:33.760
or it can have a list of Bs or it could have a map of Bs, right?

00:43:33.760 --> 00:43:40.360
So those, that object model, and it fully knows how to kind of render it to and from a dictionary.

00:43:40.360 --> 00:43:43.820
And it does the whole serialization and deserialization for you.

00:43:43.820 --> 00:43:44.320
That's sweet.

00:43:44.320 --> 00:43:49.360
So, yeah, definitely people should check this out if they're working on Python and YAML.

00:43:49.360 --> 00:43:50.920
It definitely looks like a cool project.

00:43:50.920 --> 00:43:53.480
So the other one's called Rigger.

00:43:53.480 --> 00:43:58.280
You know, obviously we're in a very, very, it's very important to us to have the right answers for people.

00:43:58.380 --> 00:43:59.960
Yeah, the answers have consequences.

00:43:59.960 --> 00:44:06.460
The most important thing about my job, I want to make sure we give people the best data, the most relevant data, the most up-to-date data.

00:44:06.460 --> 00:44:08.780
And one of the key things we got to do is testing.

00:44:08.780 --> 00:44:11.760
And we spend a lot of time testing, you know, by hand.

00:44:11.760 --> 00:44:13.280
We do a lot of unit testing.

00:44:13.280 --> 00:44:16.560
You know, we believe in the testing pyramid at my company.

00:44:16.560 --> 00:44:23.960
But one of the things I like to make sure we have is kind of an end-to-end test or an integration test or a functional test, however you want to describe it.

00:44:23.960 --> 00:44:27.180
And we, in our Java space, we actually use the tool called Cucumber.

00:44:27.460 --> 00:44:35.080
And what Cucumber lets you do is basically, you know, declare your tests in a given-when-then kind of English-style DSL.

00:44:35.080 --> 00:44:47.620
And that allowed our product team, you know, our product specialist team, which are basically non-developers, but they understand the science and they understand how to use the software and test the software, to describe how a function should work, right?

00:44:47.700 --> 00:44:51.500
And given some state, when I do some function, then I should get some result.

00:44:51.500 --> 00:44:55.080
But what I wanted was something like that on our API side.

00:44:55.320 --> 00:45:02.500
You know, I didn't want to go through the whole pain of having glue, where people actually had the right code that runs behind this DSL.

00:45:02.500 --> 00:45:11.680
And since HTTP is kind of its own language in itself, I decided to kind of shortcut it and just basically build out a simple YAML-based approach.

00:45:11.680 --> 00:45:13.660
And that's kind of where this related project came from.

00:45:14.020 --> 00:45:16.820
So you write out a YAML file that actually describes your steps.

00:45:16.820 --> 00:45:21.380
And the steps describe what you make requests to and then get the response back.

00:45:21.900 --> 00:45:32.720
And, you know, basically it allows us to build out a suite of hundreds and thousands of tests, testing out the software to make sure it gives the same answer every time so that people know when they make changes, they're not breaking anything.

00:45:32.720 --> 00:45:36.620
And it does it using AsyncIO because I wanted it to run fast.

00:45:36.620 --> 00:45:40.900
And then we use a thing called JamesPath to actually transform the response that comes back.

00:45:40.900 --> 00:45:45.640
So the transformation, that allows for the test to not be fragile, right?

00:45:45.640 --> 00:45:53.920
So one of our rules for APIs is we don't let you change a field or remove a field without, you know, some major consequences.

00:45:53.920 --> 00:45:57.460
But if you add a field, if you add a field, it's usually not a problem.

00:45:57.460 --> 00:46:03.140
But it can break your tests if you have very, very specific tests that have all the fields listed.

00:46:03.140 --> 00:46:06.140
If it doesn't match exactly like a string test, then it's going to break.

00:46:06.140 --> 00:46:09.020
I'm just expecting this string back or this JSON document back.

00:46:09.020 --> 00:46:09.660
Are they the same?

00:46:09.660 --> 00:46:10.880
No, crash, right?

00:46:10.880 --> 00:46:11.600
Like that's right.

00:46:11.600 --> 00:46:12.380
Yeah, that's too much.

00:46:12.380 --> 00:46:12.900
Yeah.

00:46:12.900 --> 00:46:17.040
So with JamesPath, we're able to kind of filter it down and say, yep, I only care about these three fields.

00:46:17.040 --> 00:46:19.320
These three fields match exactly as I expect.

00:46:19.320 --> 00:46:20.520
And if so, it's correct.

00:46:20.520 --> 00:46:23.340
And so I was going to open source this thing a few months ago.

00:46:23.340 --> 00:46:28.020
And then I heard on one of your other programs, I think the Tavern CI project was released.

00:46:28.020 --> 00:46:28.880
And it's very similar.

00:46:28.880 --> 00:46:30.760
So people should definitely check that one out.

00:46:30.760 --> 00:46:38.580
And both our project and that project were built kind of based off the idea of PyRest test, which seems to have been abandoned, which was a nice project.

00:46:38.580 --> 00:46:42.080
It just had a few things that we needed that it didn't have.

00:46:42.580 --> 00:46:48.480
And, you know, I would say that the reason to choose our project over maybe Tavern CI would be this JamesPath thing.

00:46:48.480 --> 00:46:52.100
We also have API coverage for Swagger.

00:46:52.100 --> 00:46:58.640
So we define all of our APIs with the open specification, otherwise known as Swagger, which we still call it Swagger.

00:46:59.100 --> 00:47:04.040
And so we can tell you, oh, you've got 100% coverage of all your API endpoints and their variables.

00:47:04.040 --> 00:47:17.040
And then we also actually included the Cucumber reporting HTML reporting tool called Cucumber Sandwich, which brings up a nice pretty, you know, HTML view of your test and shows you how all your steps ran and things like that.

00:47:17.040 --> 00:47:19.680
Yeah, the graphical output really is nice and colorful.

00:47:19.680 --> 00:47:22.140
It's you could tell you can get info out of it right away.

00:47:22.140 --> 00:47:22.840
Yep, it's great.

00:47:22.840 --> 00:47:23.280
Very cool.

00:47:23.280 --> 00:47:25.320
And you can see how related fits in there perfectly.

00:47:25.320 --> 00:47:26.360
Yes, exactly right.

00:47:26.360 --> 00:47:28.000
Also saw you using AIoHTP.

00:47:28.000 --> 00:47:30.440
So it's all like async nice and quick.

00:47:30.580 --> 00:47:43.280
Yeah, so I wrote AIoHTP to do this little rigor testing so I could do parallel testing to kind of speed up our test suite because I didn't want them to, you know, if you have to run them sequentially, it's going to take a lot longer than if I run them all in parallel.

00:47:43.280 --> 00:47:50.660
So it takes three to five times less time when you turn the concurrency on with our test suite for all of our API endpoints.

00:47:50.660 --> 00:47:51.560
Very, very nice.

00:47:51.800 --> 00:48:01.820
All right, so I think that's maybe we'll leave it there for the genomics stuff, but that was a really interesting look at how you're using Python to address these major problems.

00:48:01.820 --> 00:48:03.640
And I got to commend you.

00:48:03.640 --> 00:48:07.080
You've got a bunch of really cool tools and systems put together, it sounds like.

00:48:07.080 --> 00:48:07.920
So nice work.

00:48:07.920 --> 00:48:08.280
Thank you.

00:48:08.280 --> 00:48:12.560
I mean, Python's got a great ecosystem, great community, so many great tools.

00:48:12.560 --> 00:48:16.600
So it makes getting stuff done really fast easy.

00:48:16.600 --> 00:48:22.000
The paradox of choice is a real thing that continues to vex people building stuff like this, right?

00:48:22.000 --> 00:48:27.040
Because you build it all out and you're like, oh, but there's some other REST calling API thing.

00:48:27.040 --> 00:48:32.800
You know, there's maybe I should use API star instead of Django REST framework because Tom Christie's not working on that, right?

00:48:32.800 --> 00:48:36.160
But you've got to just put a stake in the ground and say we're building something productive here.

00:48:36.160 --> 00:48:39.300
Always lots of new toys to play with and it can get distracting.

00:48:39.300 --> 00:48:44.140
Another thing that we want to touch on is there's some kind of event going on in your city.

00:48:44.140 --> 00:48:44.620
Is that right?

00:48:44.620 --> 00:48:46.580
Yeah, PyCon is coming here.

00:48:46.740 --> 00:48:47.760
Yeah, in May.

00:48:47.760 --> 00:48:49.880
Is that May 7th, I think?

00:48:49.880 --> 00:48:51.240
Yeah, so beginning of May.

00:48:51.240 --> 00:48:55.320
Yeah, it'll be here and be right down downtown Cleveland, which is a great city.

00:48:55.320 --> 00:48:56.340
Been here 18 years.

00:48:56.340 --> 00:49:01.240
It's about two blocks away from my office, so I'm just going to be able to stroll right over there at the end of the day.

00:49:01.240 --> 00:49:02.700
And it's great.

00:49:02.700 --> 00:49:06.760
Cleveland's awesome, so people should definitely take advantage of some of the sites when they're here.

00:49:06.760 --> 00:49:08.120
I absolutely think so as well.

00:49:08.120 --> 00:49:14.880
A quick correction, it's May 9th, not May 7th, but basically the same, more or less that time frame, right?

00:49:15.020 --> 00:49:15.800
And I'm looking.

00:49:15.800 --> 00:49:17.140
Can I still register?

00:49:17.140 --> 00:49:18.620
I think I can.

00:49:18.620 --> 00:49:20.000
I don't think it's sold out yet.

00:49:20.000 --> 00:49:21.040
It's not sold out yet.

00:49:21.040 --> 00:49:24.980
So maybe it will be by the time people hear this.

00:49:25.420 --> 00:49:30.320
So one of the things I wanted to touch on with you, maybe two parts.

00:49:30.320 --> 00:49:38.220
One is, what advice do you have for getting the most out of the conference itself by, like, I'm within the walls of the convention center, you know?

00:49:38.640 --> 00:49:45.380
And then people are going to be in your town, a bunch of folks together traveling here for the conference.

00:49:45.380 --> 00:49:48.440
Like, what would you recommend they do to get the most out of Cleveland?

00:49:48.440 --> 00:49:53.480
I haven't been to a PyCon since 2005, I think, was when I figured it out.

00:49:53.480 --> 00:49:55.000
So I think maybe Dallas or something like that.

00:49:55.060 --> 00:49:58.160
I bet it's a really big difference of an experience.

00:49:58.160 --> 00:50:00.020
I'm excited to check it out.

00:50:00.020 --> 00:50:01.400
So it's going to be great to go.

00:50:01.400 --> 00:50:03.320
You know, obviously, everything's online.

00:50:03.320 --> 00:50:08.320
So if you've never been and you never noticed the PyCon on YouTube, definitely check that out.

00:50:08.440 --> 00:50:19.940
So what that should do is give you confidence that you can miss, you know, some of the speaker, some of the talks that maybe you're not super interested in and spend more time in the hallway track and talk and meet some folks in the community.

00:50:19.940 --> 00:50:23.560
Because the PyCon group does a great job of getting all those videos online.

00:50:23.560 --> 00:50:24.520
Within like a day.

00:50:24.520 --> 00:50:28.700
So you almost could watch it while you're at the conference if you really felt like, oh, geez, I wish I saw that.

00:50:28.700 --> 00:50:30.040
That's my recommendation there.

00:50:30.040 --> 00:50:35.120
And as far as if you're downtown and you're staying downtown, you know, there's some great restaurants over on East 4th Street.

00:50:35.120 --> 00:50:37.760
There's, you know, Lola by Michael Simon, the Iron Chef.

00:50:38.320 --> 00:50:39.920
There's another one called Greenhouse Tavern.

00:50:39.920 --> 00:50:42.120
There's the House of Blues, which might have a concert that night.

00:50:42.120 --> 00:50:45.680
There's the Rock Hall, which has some special events sometimes.

00:50:45.680 --> 00:50:49.040
And if you're, you know, a rock and roll fan, that's definitely a place to check out.

00:50:49.040 --> 00:50:50.840
The Indians are in town.

00:50:50.840 --> 00:50:51.260
I checked.

00:50:51.260 --> 00:50:52.540
The Indians are in town that weekend.

00:50:52.540 --> 00:50:53.340
They're playing the Royals.

00:50:53.340 --> 00:50:56.100
So if you're a baseball fan, that's a few blocks away.

00:50:56.100 --> 00:50:57.000
Yeah, that's really cool.

00:50:57.000 --> 00:51:00.000
So if people are in town, they could obviously drop in and see that.

00:51:00.000 --> 00:51:03.400
But if they're traveling from, say, outside the country, right?

00:51:03.400 --> 00:51:05.380
I know tons of people come from all over the world.

00:51:05.380 --> 00:51:08.260
Like, when do you get to see a professional baseball game?

00:51:08.260 --> 00:51:08.560
Right?

00:51:08.560 --> 00:51:10.020
Like, this might be a chance.

00:51:10.020 --> 00:51:12.500
Take a couple hours, skip the conference, and go watch it, right?

00:51:12.500 --> 00:51:14.260
Yeah, the Indians have been good the last few years.

00:51:14.260 --> 00:51:15.660
So it should be a good team.

00:51:15.660 --> 00:51:19.000
And then, you know, there's some other areas, too, to check out, right?

00:51:19.000 --> 00:51:24.280
So there's, on the west side, there are Ohio City, the west side market.

00:51:24.280 --> 00:51:25.800
You know, lots of breweries.

00:51:25.800 --> 00:51:27.740
You know, micro pub type of things.

00:51:27.740 --> 00:51:29.260
Definitely check those out.

00:51:29.600 --> 00:51:33.820
Playhouse Square, which is, you know, maybe another six or seven blocks away.

00:51:33.820 --> 00:51:38.160
That's actually the largest performing arts center in the United States, other than New

00:51:38.160 --> 00:51:38.520
York City.

00:51:38.520 --> 00:51:41.460
And then University Circle, which is a few miles away.

00:51:41.460 --> 00:51:43.380
That's not as easy to get to.

00:51:43.380 --> 00:51:44.780
There's Lyft or Uber.

00:51:44.780 --> 00:51:45.660
Like, you could get there.

00:51:45.660 --> 00:51:47.120
Yeah, you could get there pretty easy, right?

00:51:47.120 --> 00:51:47.980
Exactly right.

00:51:48.200 --> 00:51:51.440
So, yeah, Cleveland's a pretty easy town to get in and out of, and lots of great restaurants

00:51:51.440 --> 00:51:52.460
and lots of great things to do.

00:51:52.460 --> 00:51:53.700
Oh, that sounds really fun.

00:51:53.700 --> 00:51:58.200
I definitely want to second, first of all, what you said about the hallway track.

00:51:58.200 --> 00:52:03.180
I may take that track too much when I go to conferences, but I find I skip a lot of the

00:52:03.180 --> 00:52:07.300
talks and actually just really try to experience being with people.

00:52:07.300 --> 00:52:11.540
Because when you go to the talk, it's great, but it's really, you sit quietly and you watch

00:52:11.540 --> 00:52:14.660
a great presentation and you experience it there, right?

00:52:14.700 --> 00:52:20.500
But you don't interact really with anyone near you or anyone presenting so much at all.

00:52:20.500 --> 00:52:23.660
And so there's the hallway track, which is just hanging out, talking to people.

00:52:23.660 --> 00:52:28.560
And if you find yourself in an interesting situation, just take advantage of that because

00:52:28.560 --> 00:52:32.280
you can always, like you said, go watch on YouTube the thing that you would have gone

00:52:32.280 --> 00:52:32.660
to see.

00:52:32.660 --> 00:52:37.240
The other thing that they're doing really well there are open spaces.

00:52:37.240 --> 00:52:44.120
So I find that open spaces are more participation and engagement than the main talks, and they're

00:52:44.120 --> 00:52:44.760
not recorded.

00:52:44.760 --> 00:52:46.080
So there'll be a board.

00:52:46.080 --> 00:52:49.100
If it's like the last two years, there'll be a big board where people put up index cards

00:52:49.100 --> 00:52:53.460
saying, in this room at this time, we're going to just meet and it's kind of undirected group

00:52:53.460 --> 00:52:55.800
conversation about something amazing, right?

00:52:55.800 --> 00:52:58.680
And so definitely take advantage of those as well.

00:52:58.680 --> 00:52:59.180
That's great.

00:52:59.180 --> 00:52:59.560
Yeah.

00:52:59.560 --> 00:53:03.980
And if you want to connect at PyCon, just send me an email and I'll look for you there.

00:53:03.980 --> 00:53:04.320
Yeah.

00:53:04.320 --> 00:53:04.820
Very cool.

00:53:05.240 --> 00:53:09.240
And do take advantage of some of these fun things that Ian pointed out.

00:53:09.240 --> 00:53:16.880
Like the worst thing about traveling is if you just get on a taxi to a plane to another

00:53:16.880 --> 00:53:23.100
taxi to a hotel to a conference center, and then you pop those off the stack again and you

00:53:23.100 --> 00:53:24.040
do them in reverse, right?

00:53:24.040 --> 00:53:28.760
Like you want to go like, I was in Cleveland and I saw this amazing thing, right?

00:53:28.760 --> 00:53:32.000
You know, like same thing, like wherever you go, try to take advantage of that.

00:53:32.100 --> 00:53:32.900
So that's great.

00:53:32.900 --> 00:53:33.340
That's great.

00:53:33.340 --> 00:53:33.760
Yep.

00:53:33.760 --> 00:53:34.100
Yeah.

00:53:34.100 --> 00:53:34.660
Awesome.

00:53:34.660 --> 00:53:35.440
All right.

00:53:35.440 --> 00:53:37.640
Well, it's down to the two questions.

00:53:37.640 --> 00:53:38.720
So let me hit you with those.

00:53:38.720 --> 00:53:42.660
First of all, if you're going to write some Python code, what editor do you run?

00:53:42.660 --> 00:53:43.840
Converted to PyCharm.

00:53:43.840 --> 00:53:44.520
It's great.

00:53:44.520 --> 00:53:50.300
I use the Vim editor mode and it's a great environment and love using it every day.

00:53:50.300 --> 00:53:50.540
Yeah.

00:53:50.540 --> 00:53:50.760
Awesome.

00:53:50.760 --> 00:53:53.040
It's definitely kind of overwhelming when you get started, right?

00:53:53.040 --> 00:53:53.420
Yep.

00:53:53.420 --> 00:53:58.480
A lot of great tools and the integration with pytest and the integration with the Vim and Markdown

00:53:58.480 --> 00:53:58.860
editors.

00:53:58.860 --> 00:54:00.180
It's a really good tool though.

00:54:00.180 --> 00:54:00.640
Yeah, it is.

00:54:00.700 --> 00:54:04.940
Once you get used to using the feature, it's hard to not, it's hard to imagine not using

00:54:04.940 --> 00:54:05.160
it.

00:54:05.160 --> 00:54:05.960
Awesome.

00:54:05.960 --> 00:54:06.220
Okay.

00:54:06.220 --> 00:54:07.820
And then a notable PyPI package.

00:54:07.820 --> 00:54:08.040
All right.

00:54:08.040 --> 00:54:09.860
I'm going to go with deep variant by Google.

00:54:09.860 --> 00:54:11.720
So I haven't used this.

00:54:11.720 --> 00:54:15.300
I probably won't ever use this, but it's just such an interesting use of AI.

00:54:15.300 --> 00:54:21.120
They are actually, you know, taking those BAM pileups that I described and basically using

00:54:21.120 --> 00:54:25.580
image recognition type AI to actually determine and make variant calls.

00:54:25.580 --> 00:54:31.820
So what used to be, you know, somebody with a way bigger brain than me doing these calculations

00:54:31.820 --> 00:54:37.120
with math and trying to figure out the right determination of what a variant is, is kind

00:54:37.120 --> 00:54:40.060
of being superseded now by this really interesting Google project.

00:54:40.060 --> 00:54:41.940
So deep variant is the name of it.

00:54:41.940 --> 00:54:42.200
Okay.

00:54:42.200 --> 00:54:43.220
That sounds really cool.

00:54:43.220 --> 00:54:47.420
And just another one of those AIs creeping in to solve these tricky problems.

00:54:47.700 --> 00:54:48.340
Exactly right.

00:54:48.340 --> 00:54:48.760
Yeah.

00:54:48.760 --> 00:54:49.440
Very cool.

00:54:49.440 --> 00:54:50.700
All right.

00:54:50.700 --> 00:54:52.680
Well, definitely interesting choices.

00:54:52.680 --> 00:54:54.440
And thanks for sharing everything.

00:54:54.440 --> 00:54:55.560
Any final call to action?

00:54:55.560 --> 00:54:59.460
People want to get involved in biology, genomics, Python?

00:54:59.460 --> 00:55:00.700
Like, how do they get started?

00:55:00.700 --> 00:55:02.440
There's a website called BioStars.

00:55:02.440 --> 00:55:05.080
There's lots of interesting topics up there.

00:55:05.080 --> 00:55:08.200
It's a stack overflow type clone, I would say.

00:55:08.200 --> 00:55:10.040
And then there's stack overflow itself.

00:55:10.040 --> 00:55:11.620
There's, you know, lots of conversation there.

00:55:11.620 --> 00:55:14.180
Feel free to reach out to me if you're interested in learning more.

00:55:14.540 --> 00:55:19.180
And, you know, Python is just a great, great ecosystem.

00:55:19.180 --> 00:55:21.720
And there's so many cool tools to play with.

00:55:21.720 --> 00:55:22.720
Yeah, I totally agree.

00:55:22.720 --> 00:55:27.540
So one of the challenges I see for people getting started in this space is they're not researchers

00:55:27.540 --> 00:55:28.160
or doctors.

00:55:28.160 --> 00:55:29.400
Like, where do they get the data?

00:55:29.400 --> 00:55:33.200
Do you know of any, like, good open places to get some data to work with?

00:55:33.200 --> 00:55:37.580
Lots of the research that's out there is funded by the U.S. government or European governments.

00:55:37.580 --> 00:55:39.640
You know, NCBI is a website.

00:55:39.640 --> 00:55:41.600
I can't tell you what the acronym stands for right now.

00:55:41.600 --> 00:55:42.860
They've got tools.

00:55:43.060 --> 00:55:48.780
There's data sets out there such as TCGA, which is called, which is the cancer genome

00:55:48.780 --> 00:55:49.400
atlas.

00:55:49.400 --> 00:55:55.520
There's a project called Genie, which we were involved with helping them analyze their data.

00:55:55.520 --> 00:55:57.740
And they've got lots of cancer data that's out there.

00:55:57.740 --> 00:55:59.160
But lots of tools.

00:55:59.160 --> 00:56:04.440
So search for keywords like VCF and BAM and SAM tools.

00:56:04.440 --> 00:56:07.020
And there's lots of different keywords to search for.

00:56:07.020 --> 00:56:09.100
And, you know, you'll find lots of different data sets.

00:56:09.100 --> 00:56:12.860
It really just kind of depends on, you know, what kind of analysis are you looking to do?

00:56:12.940 --> 00:56:15.340
And you also find a bunch of Jupyter notebooks out there, right?

00:56:15.340 --> 00:56:19.100
People are people doing their analyses in Jupyter notebooks and then posting them to the web

00:56:19.100 --> 00:56:20.500
for people to follow along with.

00:56:20.500 --> 00:56:23.460
And really, it's I've learned all this stuff in the last five years.

00:56:23.460 --> 00:56:25.140
It's not insurmountable.

00:56:25.140 --> 00:56:31.040
It's just a matter of, you know, having a goal and trying to reach that goal and solve a problem.

00:56:31.040 --> 00:56:31.540
That's cool.

00:56:31.540 --> 00:56:32.340
And it's great.

00:56:32.460 --> 00:56:32.620
Yeah.

00:56:32.620 --> 00:56:36.540
Solve problems one at a time and eventually have this big tool chest, right?

00:56:36.540 --> 00:56:37.300
Exactly right.

00:56:37.300 --> 00:56:38.240
All right.

00:56:38.240 --> 00:56:39.400
Well, Ian, thanks for being on the show.

00:56:39.400 --> 00:56:41.800
It was great to talk with you and learn all about this stuff.

00:56:41.800 --> 00:56:42.380
That's great.

00:56:42.380 --> 00:56:42.880
Thanks, Michael.

00:56:42.880 --> 00:56:43.780
Really glad to be here.

00:56:44.980 --> 00:56:47.420
This has been another episode of Talk Python To Me.

00:56:47.420 --> 00:56:51.900
Today's guest was Ian Marr, and this episode has been brought to you by Codacy.

00:56:51.900 --> 00:56:56.120
Review less, merge faster with Codacy.

00:56:56.120 --> 00:57:02.540
Check code style, security, duplication, complexity, and coverage on every change while tracking code

00:57:02.540 --> 00:57:03.920
quality throughout your sprints.

00:57:04.440 --> 00:57:09.460
Try them at talkpython.fm/codacy, C-O-D-A-C-Y.

00:57:09.460 --> 00:57:12.360
Are you or a colleague trying to learn Python?

00:57:12.360 --> 00:57:17.040
Have you tried books and videos that just left you bored by covering topics point by point?

00:57:17.040 --> 00:57:23.060
Well, check out my online course, Python Jumpstart by Building 10 Apps at talkpython.fm/course

00:57:23.060 --> 00:57:25.660
to experience a more engaging way to learn Python.

00:57:25.660 --> 00:57:30.440
And if you're looking for something a little more advanced, try my Write Pythonic Code course

00:57:30.440 --> 00:57:33.000
at talkpython.fm/pythonic.

00:57:34.000 --> 00:57:35.720
Be sure to subscribe to the show.

00:57:35.720 --> 00:57:37.920
Open your favorite podcatcher and search for Python.

00:57:37.920 --> 00:57:39.160
We should be right at the top.

00:57:39.160 --> 00:57:44.960
You can also find the iTunes feed at /itunes, Google Play feed at /play, and

00:57:44.960 --> 00:57:48.480
direct RSS feed at /rss on talkpython.fm.

00:57:48.480 --> 00:57:50.340
This is your host, Michael Kennedy.

00:57:50.340 --> 00:57:51.700
Thanks so much for listening.

00:57:51.700 --> 00:57:52.780
I really appreciate it.

00:57:52.780 --> 00:57:54.720
Now get out there and write some Python code.

00:58:03.560 --> 00:58:15.440
I really appreciate it.

