00:00:00 A couple of weeks ago, Charlie Marsh and the folks at Astral made another big splash with

00:00:04 a major release of uv called UV, Unified Python Packaging, which has many far-reaching features.

00:00:10 We had to have Charlie on the show to give us an inside look into this development.

00:00:14 Let's get to it.

00:00:16 This is Talk Python to Me, episode 476, recorded September 3rd, 2024.

00:00:21 Are you ready for your host, please?

00:00:24 You're listening to Michael Kennedy on Talk Python to Me.

00:00:28 Live from Portland, Oregon, and this segment was made with Python.

00:00:31 Welcome to Talk Python to Me, a weekly podcast on Python.

00:00:37 This is your host, Michael Kennedy.

00:00:39 Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython,

00:00:45 both accounts over at fosstodon.org, and keep up with the show and listen to over nine years

00:00:50 of episodes at talkpython.fm.

00:00:53 If you want to be part of our live episodes, you can find the live streams over on YouTube,

00:00:57 subscribe to our YouTube channel over at talkpython.fm/youtube, and get notified about upcoming

00:01:03 shows.

00:01:04 This episode is sponsored by Posit Connect from the makers of Shiny.

00:01:08 Publish, share, and deploy all of your data projects that you're creating using Python.

00:01:13 Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quattro, Reports, Dashboards, and APIs.

00:01:19 Posit Connect supports all of them.

00:01:21 Try Posit Connect for free by going to talkpython.fm/posit, P-O-S-I-T.

00:01:28 And it's also brought to you by us over at Talk Python Training.

00:01:32 Did you know that we have over 250 hours of Python courses?

00:01:36 Yeah, that's right.

00:01:37 Check them out at talkpython.fm/courses.

00:01:40 Charlie, welcome back to Talk Python To Me.

00:01:43 How are you doing?

00:01:43 I'm good.

00:01:44 Thanks so much for having me back.

00:01:45 It's always a pleasure to be on here.

00:01:47 Well, you are certainly making waves in the Python space these days with all of your projects

00:01:53 and their fastness.

00:01:54 I think you're known as the fast Python guy these days.

00:01:58 Oh, that's not fast enough.

00:01:59 We got to use something from Astral.

00:02:01 The fast Python tooling guy, maybe.

00:02:04 Yeah.

00:02:04 Yeah, exactly.

00:02:06 Exactly.

00:02:06 So interesting.

00:02:07 You know, we spoke, I think you've been on twice before.

00:02:10 Is that right?

00:02:11 We talked about Ruff once.

00:02:12 Came on once to talk about Ruff.

00:02:14 And then I came on in March, shortly after we did the first public release of uv.

00:02:19 Right, right.

00:02:20 And uv at that time, I'll let you tell people what uv is.

00:02:24 But for those who know, it was kind of in the, it has pip-like features.

00:02:29 And now it's got another layer to the onion or another shell to it.

00:02:34 And that's actually why I invited you back, because there's a lot of interesting things

00:02:38 to talk about there.

00:02:39 Yeah.

00:02:39 Maybe like several more layers too.

00:02:41 Okay, well.

00:02:42 All right.

00:02:43 So let's, yeah.

00:02:44 Yeah.

00:02:45 Let's hear about them.

00:02:46 So first of all, I guess, you know, not everyone, believe it or not, not everyone listened to

00:02:52 that first Ruff interview.

00:02:54 Things, Ruff interview and those kinds of things.

00:02:58 So I suppose maybe quick introductions to you, Astral.

00:03:04 How'd you get to where you are?

00:03:05 Yeah, yeah, yeah.

00:03:06 So I've been working on Python tooling full-time for a little under two years at this point.

00:03:15 And my journey, I've been writing Python professionally for a long time.

00:03:20 But my journey with Python tooling started with Ruff, which is a very fast Python linter code formatter

00:03:28 and code transformation tool.

00:03:30 And what's the sort of foundational idea of Ruff was, can we make really fast Python tooling?

00:03:37 And so Ruff is written in Rust, but you don't need to have Rust installed or know anything about Rust to use it.

00:03:44 You can just install it with pip or with whatever you're using.

00:03:48 And that whole sort of story for me started from just working with Python a lot and asking if we could build

00:03:55 sort of different Python tooling by using languages like Rust.

00:04:00 So, you know, the first version of Ruff was very minimal, but it's grown from then to have, I don't know,

00:04:06 if something like 800 plus rules.

00:04:08 If you've used tools like Playgate or PyLint in the past, Ruff can do similar things.

00:04:14 So discover issues with your code without running it.

00:04:17 It can also fix them automatically.

00:04:19 And then if you've used tools like Black in the past for code formatting, Ruff can do a similar thing too,

00:04:25 where it automatically formats your code.

00:04:27 So that was how I first got started in Python tooling and also how I first ended up on Talk Python

00:04:32 was people were very interested in this when it came out.

00:04:34 And I think it broke a lot of people's minds in the sense that it really changed what was possible.

00:04:42 You know, maybe an analogy.

00:04:44 So if you have unit tests, but to run the unit test takes 30 minutes, there's no one who doesn't just want to kill time.

00:04:51 Who's going to say, I made a small change.

00:04:53 Well, let me run the test and see how that change did.

00:04:55 But if the tests run in 50 milliseconds, you could just set up a thing to just run the test every time code changes

00:05:03 and just have a green, red, white.

00:05:05 And I feel like Ruff did that for linting and formatting.

00:05:09 Like for me, for example, I have it just run Ruff on.

00:05:14 If I use PyCharm, I ask PyCharm to reformat the code.

00:05:17 It just uses Ruff to do that.

00:05:19 And you can check the box to just say, run it when I hit save because you won't notice a difference.

00:05:22 You know what I mean?

00:05:24 Yeah, yeah.

00:05:24 I think that's been one of the really interesting things about working on tooling with the focus on performance has been like,

00:05:31 if you build things that are way, way faster than what currently exists, like not just like a little bit, but like significantly faster.

00:05:37 The ergonomics of the tool just change a lot.

00:05:39 So maybe things that you only ran in CI before, you can now run locally.

00:05:44 And maybe things that you now run locally, you can run on save as opposed to on commit or on explicit command.

00:05:51 So that's been a big part of what we've seen with Ruff.

00:05:55 And the other big piece, apart from performance that I think we sort of accidentally made a lot of progress on with Ruff,

00:06:03 was just trying to make things simpler by bundling more stuff together.

00:06:08 So Ruff can do like a lot of different things.

00:06:11 And so you don't need to chain together as many tools to get the kind of setup that you might want to have in your Python projects.

00:06:17 And so a lot of the things we've built with Ruff and with UV, they've had these kind of dual goals of being much faster,

00:06:25 hopefully bringing in some interesting new features and functionality, but also trying to reduce a little bit of the fragmentation and tooling and make it easier for people,

00:06:36 especially, you know, for newcomers who are writing Python for the first time to kind of get started.

00:06:41 And we have, well, you have announcements.

00:06:43 I have things to discuss with you about them, about making that even easier.

00:06:47 So that's why some of the big features of UV, right?

00:06:50 For example, what if I don't have Python?

00:06:52 Not a problem.

00:06:53 So that's pretty, that's pretty exciting, I think.

00:06:55 Yep.

00:06:56 Yeah.

00:06:56 And we'll get into that.

00:06:57 But I do want to just take a, not get too far past it, because even though this episode is not about Ruff, two things.

00:07:05 One, a theme of Astral's is we're going to take some tools or some kind of concept that's been around for a long time,

00:07:12 redo it in Rust, but also not just, well, we ported over the code, but you know, rethink some of the algorithms and some of the assumptions.

00:07:19 And I think that's also a lot of what makes it faster, like the way uv works with caching and things like that.

00:07:25 Yep.

00:07:26 And there's been a lot of excitement and positivity about that.

00:07:30 But I think there's also been a little suspicion of, wait a minute, if we write this in Rust,

00:07:36 is it really for Python people, by Python people?

00:07:39 Like what's, what's your take?

00:07:41 I don't, I have, I have some thoughts that are, I don't see it as a negative, but I think,

00:07:45 I think it's interesting just to discuss, you know, where does Rust actually belong here?

00:07:50 Yeah.

00:07:50 I mean, I think like the way I view it is that, you know, just like Python itself is,

00:07:57 is implemented in C, like it makes some sense for like the underlying tooling that people are using

00:08:03 to be written in a different language.

00:08:05 If it means that you can ultimately build, you know, tools that are better, you know,

00:08:10 at least on, on some metrics that people care about.

00:08:13 So like, for me, I sometimes view what we're doing as, you know, like we put all this investment

00:08:18 into this tooling.

00:08:19 We write all this stuff in Rust, which, you know, in theory, incurs some cost for us.

00:08:24 It's maybe, you know, maybe we move a little bit more slowly, maybe it's harder.

00:08:28 And in doing so, we kind of like give all these people who are running these commands,

00:08:33 you know, hundreds of times a day, a big boost in how they work.

00:08:37 And they can keep writing Python, but have a better and better experience writing Python.

00:08:41 So, you know, I don't think it actually really says anything personally.

00:08:46 I don't really think it says anything about Python that we write the tooling in Rust.

00:08:49 Because, you know, we get, sometimes people will criticize Python for that, but like,

00:08:54 you know, different languages are useful and good for different things.

00:08:57 And Python is an incredibly productive language.

00:09:00 It's like growing more and more every year.

00:09:02 People love writing it.

00:09:03 But maybe it's not the best language to write, you know, a super high performance package manager.

00:09:08 And that's totally fine.

00:09:09 Because like, we're going to do that.

00:09:11 And then everyone who's writing Python can benefit from it and can leverage it.

00:09:15 Yeah.

00:09:15 I do think that one interesting piece here that I got, you know, we got a lot of skepticism

00:09:21 around early on was like, you know, how can people in the Python community like contribute

00:09:26 to this if it's not written in Python?

00:09:27 You know, how do you like have a sustainable contributor base?

00:09:31 And the interesting thing for me is like, I actually think we've had a really strong contributor

00:09:36 base over time.

00:09:37 Like we have, I don't know, like somewhere between four and 500 contributors total, maybe

00:09:42 in Ruff.

00:09:42 You know, most of those are like one or two small, you know, one or two commits, maybe

00:09:46 just one or two time committers.

00:09:48 You know, but a lot of people have come to Ruff and said, you know, I want to learn Rust.

00:09:52 I come from the Python ecosystem.

00:09:53 There's a part of this that's sort of native to what I know, which is the Python language,

00:09:57 the Python semantics.

00:09:58 And it's an entry point for me to learn Rust, you know, from other people who come from Python.

00:10:02 So, you know, I think there is certainly a cost to engaging and a cost for contributors

00:10:07 because most, you know, most of our users don't know Rust.

00:10:10 But I don't think it's as steep as people would expect.

00:10:15 And I think, you know, over time we have been able to grow a pretty, a pretty healthy contributor

00:10:21 base, like many people who have never written Rust before.

00:10:23 Yeah, I agree.

00:10:25 And I was thinking the same thing that you pointed out that Python itself is written in

00:10:29 C.

00:10:29 Yeah.

00:10:30 Right.

00:10:31 Generally speaking, of course, there's multiple runtimes and so on and so on.

00:10:34 But CPython, the one that we generally use is written in C.

00:10:38 And I mean, I don't see why there should be an allegiance to C over Rust or anything.

00:10:43 And a lot of the data science tools are written in C or Orttran even, you know, something really

00:10:49 wild like that.

00:10:50 And Python is a way to kind of expose them and make them more accessible, more useful, make

00:10:54 people more productive on top of those, that's that native code.

00:10:58 Yeah.

00:10:59 Yeah.

00:10:59 A third example would be Jupyter, JupyterLab, Jupyter Notebook, all those things.

00:11:03 When you talk to the contributors of those projects, they're down in TypeScript and JavaScript

00:11:08 most of their day.

00:11:09 So the data science folks don't have to write TypeScript and JavaScript.

00:11:13 They just work in the tooling that's on the front end.

00:11:16 And so it's, you know, it's kind of like, to me, it's kind of like, let's take one for

00:11:20 the team.

00:11:20 Yeah.

00:11:21 We'll do this.

00:11:22 So we all benefit, but you don't have to.

00:11:23 You don't have to do it.

00:11:24 I actually think it's one of the kind of, one of the real strengths of Python is the interoperability

00:11:31 around like native code and extension modules.

00:11:34 It's like a big, it's actually like a big part of Python and it's a big part of why Python

00:11:39 has succeeded.

00:11:41 And I think that will actually become more, I mean, this is sort of like going off on a

00:11:45 tangent a little bit, but I think that will become a bigger and bigger part of like what

00:11:49 Python looks like and what it looks like to work with Python.

00:11:53 Because, you know, and I think Rust can actually play an interesting role here because at least

00:11:58 from my perspective, like I do not have a systems programming background.

00:12:01 Like I've not, I've definitely not written any C professionally.

00:12:05 I don't think I've ever really written any C++ and Rust was my first sort of foray into

00:12:13 that kind of programming.

00:12:14 And I think at least me, you know, for me personally, I found it much more accessible.

00:12:20 And so I think Rust and Python actually have this interesting story where Rust to some

00:12:24 degree is this kind of like superpower, low level layer that you can drop into and then

00:12:29 expose with a Python CLI for everyone to consume.

00:12:32 So anyway, my prediction is I think that will only become more and more of a part of what

00:12:37 Python looks like.

00:12:38 And that's actually, I think it's actually a good thing.

00:12:40 Yeah.

00:12:40 I do too.

00:12:41 I do too.

00:12:42 Jake out in the audience, Jake Collahan, who says in another comment, great timing.

00:12:47 I just released a video on these changes yesterday, so that's awesome.

00:12:50 But the progress made in Ruff and uv sensor introductions clearly demonstrates that there's

00:12:55 a strong contributor base, even when it's based on Rust, right?

00:12:59 Yeah.

00:12:59 Yeah.

00:12:59 I'm not trying to dismiss that it's hard to learn Rust because I actually think it is pretty

00:13:04 hard to learn Rust.

00:13:05 And I think the learning curve is pretty steep.

00:13:07 But yeah, I think the thing we found is there are people who are interested and who want to

00:13:10 do it.

00:13:11 Sure.

00:13:11 Sure.

00:13:12 I agree.

00:13:13 I think another thing that it shows regardless of Rust or not is if it's your full-time job

00:13:19 and there's funding and a team rather than part-time work, it can go many times faster

00:13:25 towards a goal than before.

00:13:27 I'm sure you've felt that way.

00:13:29 Yeah.

00:13:29 I mean, we're in a very unique, I mean, not completely unique, but fairly unique position

00:13:34 whereby we can fund people full-time to work on this stuff.

00:13:39 And it's actually just kind of wild to look at how much, not to sort of talk up our own

00:13:45 work, but just how much you can accomplish in a relatively short period of time with that

00:13:49 level of when people are kind of unlocked to work in that way and work on those kinds

00:13:54 of problems.

00:13:56 So, you know, just thinking it's like the amount of time we've been able to put into

00:14:00 rough and uv is like sort of hard to fathom for some open source projects.

00:14:05 It's like, wow, that's incredible.

00:14:06 You know, but from the perspective of a company, it's actually like quite reasonable.

00:14:10 And in fact, not even like that much.

00:14:13 So, you know, I think it's pretty like the leverage that you have with open source, like

00:14:17 when people are able to invest in it and really focus on it is pretty amazing because, you

00:14:23 know, we work on these things, we improve these things and they ship out to,

00:14:25 you know, I don't know, millions of users or whatever it is and really can provide a huge

00:14:31 boost to the ecosystem.

00:14:32 So, yeah, I mean, being able to work on this stuff full time, that was actually something

00:14:35 that I decided pretty early on with rough was the project was growing more and more popular.

00:14:40 And I was like, I don't know if I can keep up with this if I don't work on it full time.

00:14:45 And so I'm at least going to see where that where that goes.

00:14:48 And it's possible, right?

00:14:51 And here you are.

00:14:52 I mean, it is.

00:14:53 But yeah, it's I mean, I just feel like, I just have a lot of respect for people who, you know, commit significant amounts of their

00:15:00 time to open source alongside everything else.

00:15:03 Because, yeah, it's I mean, it's an amazing thing, but it's also very challenging.

00:15:07 And it's definitely is.

00:15:08 It's 24 seven.

00:15:10 Well, I think it's really positive that there's a group of people putting their full effort into

00:15:17 especially the uv side of things.

00:15:20 That's going to that's going to make a dent.

00:15:23 Yeah, I mean, I think the other thing that's been cool about, you know, building this as a as a company is that we've been able to bring in a lot of people from like outside of Python to come and work on Python tooling.

00:15:36 And I think that's like a really healthy thing for the ecosystem, because not only are these people, you know, I think, like really talented and really great, but they also bring like very different ideas and experiences.

00:15:46 And so we have a lot of cross pollination on the team.

00:15:49 The team's kind of a mix of people who have who fall everywhere on the spectrum of like or axes, I guess, probably not the spectrum of like how much rust experience, how much Python experience they have.

00:15:58 You know, some of them have mostly worked in like TypeScript and the JavaScript ecosystem.

00:16:02 So that was sort of an intentional thing for me when thinking about like building a team to work on this stuff was I want to have like some people on the team who are like super deep Python experts.

00:16:11 And I want to have some people who like bring a totally different perspective to the problems.

00:16:15 So that's been another like very cool piece of putting together a team to work on this stuff.

00:16:21 I think that's a great perspective.

00:16:22 This portion of Talk Python to Me is brought to you by Posit, the makers of Shiny, formerly RStudio and especially Shiny for Python.

00:16:31 Let me ask you a question.

00:16:33 Are you building awesome things?

00:16:35 Of course you are.

00:16:36 You're a developer or data scientist.

00:16:37 That's what we do.

00:16:38 And you should check out Posit Connect.

00:16:40 Posit Connect is a way for you to publish, share and deploy all the data products that you're building using Python.

00:16:47 People ask me the same question all the time.

00:16:51 Michael, I have some cool data science project or notebook that I built.

00:16:54 How do I share it with my users, stakeholders, teammates?

00:16:57 Do I need to learn FastAPI or Flask or maybe Vue or React.js?

00:17:02 Hold on now.

00:17:03 Those are cool technologies and I'm sure you'd benefit from them, but maybe stay focused on the data project.

00:17:08 Let Posit Connect handle that side of things.

00:17:10 With Posit Connect, you can rapidly and securely deploy the things you build in Python.

00:17:15 Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto, Ports, Dashboards.

00:17:21 And APIs.

00:17:21 Posit Connect supports all of them.

00:17:24 And Posit Connect comes with all the bells and whistles to satisfy IT and other enterprise requirements.

00:17:30 Make deployment the easiest step in your workflow with Posit Connect.

00:17:34 For a limited time, you can try Posit Connect for free for three months by going to talkpython.fm/posit.

00:17:40 That's talkpython.fm/P-O-S-I-T.

00:17:44 The link is in your podcast player show notes.

00:17:46 Thank you to the team at Posit for supporting Talk Python.

00:17:51 One thing before we move on to talk about uv proper, closing the loop here.

00:17:55 You mentioned those rules, those 800 Lint rules.

00:17:58 And this resource you have over at docs.astral.sh slash rough slash rules is awesome.

00:18:04 So even if you don't use rough, you know, you care about say PEP 8 naming or something, you get a warning from Flake8 or whatever.

00:18:13 And it says Dunder function name.

00:18:15 Like what is this error, right?

00:18:17 What is this thing?

00:18:18 And then you've got each one of these rules has a, what is this?

00:18:22 Why is it bad?

00:18:23 How should you change it?

00:18:25 Here's the bad version.

00:18:26 Here's the good version.

00:18:27 And so on.

00:18:28 And I think this is just a really good resource.

00:18:29 I know you all put a ton of time and energy into it.

00:18:32 I appreciate you calling that out.

00:18:32 Yeah, it takes a lot of time.

00:18:33 I mean, once you cover all the rules, maintaining it incrementally is slightly easier.

00:18:38 But, you know, when we started this, we definitely had a few hundred rules.

00:18:41 And so, you know, it was a lot of contributors who contributed us getting to full coverage here.

00:18:46 It's almost like the Wikipedia of Lint rules or something.

00:18:50 How to Python.

00:18:50 Yeah.

00:18:51 Yeah.

00:18:52 I guess maybe one thing I'll say is like, we have a lot of rules, but you don't have to use them all.

00:18:57 And like the default rule set is actually pretty small.

00:18:59 So even when I work on projects, I don't necessarily enable all of the rules.

00:19:03 I typically enable like a couple subsets.

00:19:05 So I just think sometimes it can be intimidating to imagine 800 rules being applied over your code face.

00:19:09 So, you know, the default rule set is pretty small.

00:19:12 It covers things like unused imports, you know, things that are pretty common.

00:19:16 Pretty common and relatively unobjectionable.

00:19:17 And then we have all these different categories for ways that you kind of level up the level of coverage.

00:19:22 Yeah.

00:19:23 I take pretty much the defaults as well on all my projects, except for wider lines of code, more columns.

00:19:30 Yeah.

00:19:31 Yeah.

00:19:32 On a 32-inch monitor, 80 columns is just down the little corner.

00:19:37 We actually took that out of the defaults.

00:19:38 Did you?

00:19:39 Oh, beautiful.

00:19:40 Yeah.

00:19:40 I don't need a rough.toml or whatever it was I was putting in there for a configuration.

00:19:45 Yeah.

00:19:45 We got rid of that.

00:19:46 Because the thinking there is like, if you have long lines, they should generally be handled by a format or not a linter.

00:19:52 So by default, we don't enforce that.

00:19:54 Yeah.

00:19:54 Okay.

00:19:55 Interesting.

00:19:56 And then the single quotes versus double quotes, which we discussed on GitHub.

00:20:00 I remember, I think we talked about it last time.

00:20:02 Yeah, probably.

00:20:02 Maybe as well.

00:20:03 Yeah.

00:20:04 I talked about that with everyone.

00:20:05 Yeah.

00:20:07 And Miguel also agrees here.

00:20:10 Amazing docs.

00:20:10 The rules are top notch.

00:20:11 Nice work.

00:20:12 I appreciate that.

00:20:13 Okay.

00:20:13 So I know we're going to talk to you, V, but Tushar does have a good question out there.

00:20:17 And I don't know if speak to it or don't speak to it.

00:20:20 Are there plans for rough to become a PyLance alternative?

00:20:24 So a language server of some sort.

00:20:27 Is this anything that you're willing to talk about?

00:20:29 I would say, I mean, yeah, I think that's like an interesting thing that we'll consider.

00:20:33 It's not something that we are committed to doing or committed not to doing, like building a language server.

00:20:41 I would say that's probably like a few steps away from where we are today, because before we would build a language server, we would probably build, you know, something that could something like a type checker, like something that could deal with type inference and like better understand the relationships between different parts of your code.

00:20:57 I view that as like, it's not strictly a prerequisite to building a language server, but I view that as like a little bit more of a path.

00:21:03 More mypy.

00:21:05 Yeah, more mypy.

00:21:07 I think there's like a lot of interesting stuff around building a, well, first of all, of course, there's like building a type checker, but there's also building what I would call like a type aware linter.

00:21:17 Like you could imagine that rough itself could actually get a lot more powerful if it could do all sorts of type inference.

00:21:23 Like we have some rules that are only supposed to activate on dictionaries and we do some sort of bad local type inference and heuristics to figure out if we think a variable is a dictionary.

00:21:33 Like if you call it on it, it might be a dictionary, right?

00:21:36 So if we knew there's just a lot of interesting things we could do, we could build a much better tool.

00:21:41 So it's not just about building a type checker.

00:21:43 It's also about how can we build a much better linter and sort of like set of tools.

00:21:47 But yeah, we're thinking about that a lot.

00:21:49 There's a lot of discussion happening about that, both internally and publicly on the repo and the discord.

00:21:56 We're thinking a lot about sort of type inference and how to evolve rough in that direction.

00:22:00 So yeah, language server may be something we can do eventually.

00:22:03 It's obviously a huge undertaking.

00:22:05 And we want to make sure that like anything we decide to build, we feel a lot of conviction, you know, that it can be great because it's not, doesn't necessarily make sense for us to try and build something that we think is like 5% better than what's out there.

00:22:19 It's very hard to get users to switch to something that's 5% better.

00:22:21 So, you know, when we look at the opportunity set, we're kind of thinking about where can we have a big impact?

00:22:26 What do users really want, you know, cross-referenced against?

00:22:29 Where do we think there's opportunity to build something that would be an improvement in ways that users care about?

00:22:34 So yeah, very interesting, not something we're focused on right now, the language server piece at least.

00:22:38 Yeah.

00:22:39 You guys are going to need at least a few weeks to get to that, huh?

00:22:41 We're going to need a few weeks to get to language server.

00:22:43 All right.

00:22:45 I've been out there in the audience.

00:22:46 It says, excellent tool.

00:22:48 Ruff and uv have changed my life.

00:22:49 I've talked about Ruff.

00:22:50 That's very nice.

00:22:51 Yeah.

00:22:52 UV, maybe a quick summary for what it is.

00:22:55 And then we could talk about your post, which adds layers of features and capabilities as we start.

00:23:01 Yeah, totally.

00:23:01 So I came on the show back in March and we talked a bit about what uv was at the time.

00:23:08 We released uv in like mid-February.

00:23:10 So that was a couple of weeks after.

00:23:11 And uv is our Python packaging tool.

00:23:16 And it's built in, you know, under a lot of the same sort of design goals as we had for Ruff.

00:23:24 So we wanted it to be extremely fast.

00:23:27 We wanted it to try and bundle a few more things together so that you could use fewer tools to work with Python and be productive with Python.

00:23:36 And we wanted it to be really easy to adopt.

00:23:38 That was another principle that we thought about a lot.

00:23:41 So when we released uv in February, it was framed as a pip alternative.

00:23:49 So the idea was if you've used pip before, you know, pip install, pip uninstall, or tools like pip compile or pip sync, it should be really familiar to you.

00:23:59 So the API that we started with was like uv pip install, uv pip uninstall, uv pip compile.

00:24:04 And it was meant to kind of mirror the pip API.

00:24:07 And the idea there was we wanted it to hopefully be immediately obvious to people like how this tool works and what it does.

00:24:14 And also, I guess, to some degree what it doesn't do.

00:24:17 So we released that in February and it grew extremely fast.

00:24:22 It's yeah, it's just the adoption both in terms of like raw numbers and just like the companies that we talk to that are using it like very quickly.

00:24:31 A lot of people were using it.

00:24:32 I consider it a big success.

00:24:35 I'm really happy with how that went.

00:24:36 But it was also like, I think, a pretty small.

00:24:39 It was sort of a small portion of like what we wanted to build for packaging.

00:24:42 You know, ultimately, we weren't trying to build just a faster pip.

00:24:46 I think that's like a really I think it's a really good starting point for a couple of reasons.

00:24:52 One, much easier for people to adopt.

00:24:54 Two, it required us to build a lot of the like fundamental pieces that you need for Python packaging.

00:25:01 Like in order to build a pip alternative, we had to be able to resolve Python dependencies, like install Python packages, understand virtual environments, right?

00:25:10 Manipulate all those things.

00:25:11 We had to implement a bunch of standards around introspecting built distributions and source distributions and virtual environments.

00:25:18 So we had to invest in all these things that I view as kind of like fundamental primitives of working with Python packaging.

00:25:25 But the ultimate goal for us was always we want to build something that's, you know, like a single static binary that you download install that just that just gives you everything you need to be productive with Python.

00:25:36 And from that perspective, like a pip alternative is pretty low level.

00:25:40 And we wanted to build something that was a little bit more high level, something that can install Python for you, something that can manage the virtual environment for you, something where you just do run this file and it figures out the dependencies, installs them.

00:25:53 It creates the environments and it runs this file in the environment.

00:25:55 Like that is what we wanted to build.

00:25:56 So that's what we've been building up to over the past couple of months.

00:26:00 Yeah.

00:26:00 Amazing.

00:26:01 Of course, you've got to have the uv pip features as a foundation, right?

00:26:05 Because even if you don't kind of like we talked earlier, even if you don't expose it directly as a CLI thing that from a project management perspective, it's needed, right?

00:26:16 Yeah.

00:26:17 And like, it's part of kind of like meeting people where they are to a certain degree.

00:26:22 Like everyone has workflows that are built around pip, like even people that do other package that have other packaging workflows.

00:26:28 Often those workflows are actually built around pip commands.

00:26:31 And like I said, I view those as a little bit low level, like with pip, the operations are kind of like install this package into this environment, as opposed to here are my dependencies, make sure the world is like in sync with my dependencies.

00:26:42 That's what I would consider to be like a little bit more high level.

00:26:45 So, you know, we built and released that pip interface in February.

00:26:49 And since then we've, you know, it's basically been like hammered, right?

00:26:53 By users.

00:26:54 So it's just gotten like better and better, right?

00:26:56 Because they find problems with it and then report them and it just gets, you know, it gets better.

00:27:00 It gets faster.

00:27:01 It's like more feature complete.

00:27:02 So we've had a few months to kind of improve and build on top of it too.

00:27:05 Yeah.

00:27:06 That's one of the benefits of such it taking, they can hold so much and people using it so much as they hit the little edge cases all the time.

00:27:14 Yeah.

00:27:15 A lot of edge cases.

00:27:16 It gets smoothed out quick.

00:27:16 I bet.

00:27:18 I bet.

00:27:18 Yeah.

00:27:19 Yeah.

00:27:19 Yeah.

00:27:19 Yeah.

00:27:19 But it's, it's, it's, yeah, it's super fun, like set of problems to work on by the way.

00:27:24 And like really different from rough too.

00:27:27 Like, yeah, rough is rough is more like a, it's more like a compiler.

00:27:33 I would say like, we have like a parser and a Lexer, you know, all that kind of stuff.

00:27:38 And with UV, it's a lot more, how do we do IO really fast?

00:27:42 Like we have a lot of networking.

00:27:43 We're like reading and writing from disc a lot.

00:27:45 There's a lot of interfacing with standards.

00:27:48 A lot of interfacing with the registry.

00:27:50 Everything's async.

00:27:52 So it's just like a very different set of problems.

00:27:55 And it's, it's fun to get to kind of work on both of them.

00:27:57 Cause you know, they're just really different.

00:27:58 Yeah.

00:27:59 I'm sure they're both fun projects.

00:28:00 And there's some really good ideas and questions in the audience, but we're not ready for them.

00:28:05 So I think when we spoke back in March, one of the things we discussed is how you structured the CLI API in a way to leave space.

00:28:16 So for example, it's not uv install package.

00:28:20 It's uv pip install package.

00:28:22 And it's not uv compile --update for dependence.

00:28:26 It's uv pip file or whatever the command is, right?

00:28:29 I have it alias to a couple of letters and I never think about it again, but something, you know, that's,

00:28:34 you've left space in the CLI with these sub commands.

00:28:37 And I think now we're starting to see why you left space.

00:28:41 Is that right?

00:28:42 Yeah.

00:28:42 Yeah.

00:28:43 That was like pretty controversial at the time and users really hated it.

00:28:46 I mean, they still used it, but it's so much better.

00:28:51 I'll use it.

00:28:51 A lot of people complained about it.

00:28:53 I even found it, you know, I even found myself saying like, maybe we should, maybe we should stop doing this.

00:28:58 Like maybe we should just give up because like people, people were complaining and like I was annoyed by it and stuff.

00:29:03 But yeah, it's either like a huge, obviously like it's either like a terrible mistake or it was genius.

00:29:08 I don't, I don't actually know, but, but what it did was right.

00:29:12 Like one effect, which I said before was it immediately conveyed the sort of rough shape of the commands like uv pip install.

00:29:18 And then if you've used pip install, you know, that the next argument is like a package name or a requirements file.

00:29:24 But the other thing it did is it left space in the CLI for these new APIs that are sort of first class uv APIs.

00:29:31 So instead of, yeah, instead of doing uv install, when we released in February, it was uv pip install, which meant that today this new set of APIs that we, that we launched, let's see, two weeks ago, I think today.

00:29:42 Scroll up.

00:29:44 Is there a date there?

00:29:44 August 20th.

00:29:46 So this new set of APIs that we released are, you know, uv lock, uv sink, uv run.

00:29:53 They're all, they can all be top level because they're really like the first class uv workflows.

00:29:58 The pip API, by the way, still a hundred percent there.

00:30:02 And like, we're going to invest in it a lot and like continue maintaining it.

00:30:06 Cause like that is how most people use uv.

00:30:08 And maybe eventually we want that to be less true.

00:30:11 Right.

00:30:11 Like, right.

00:30:12 Like we hope more and more people use the new stuff.

00:30:14 But like, we're going to keep building that.

00:30:16 But for, for projects that can, we now have this new interface that if you can fit into it, it's just sort of more powerful and does more for you.

00:30:24 So we saved space in the CLI exactly for this reason, which is we had a bunch of stuff we knew we wanted to build.

00:30:30 And if we polluted, well, not polluted, it's the wrong word, but if we polluted, you know, the interface with uv install.

00:30:37 Clogged.

00:30:37 If you clogged it.

00:30:38 Yeah.

00:30:39 Yeah.

00:30:39 If we, if we lost all that space to those existing commands, it would make things harder.

00:30:43 So I think it's worked.

00:30:45 It's done.

00:30:45 It's had the intended effect for us of it kept the space open.

00:30:50 It let people use it.

00:30:51 It conveyed how it works.

00:30:53 And now they kind of exist alongside each other and the pip API, you know, you can kind of use them together in certain ways.

00:30:58 And when you use them together, you sort of realize that the pip API is more low level.

00:31:02 It's like the new APIs, you know, you have a PI project tomo file with your requirements in it and you just run uv sync and it will resolve them, create a lock file, install them in a virtual environment.

00:31:11 It's like one command.

00:31:12 You could then like modify the virtual environment.

00:31:15 Like you could do like uv pip install, blah, blah, blah, and like start making edits to it.

00:31:19 But that kind of illustrates what I mean by it's like a low level pip API is where you're kind of manually manipulating things versus these higher level APIs where you, you tell us what your dependencies are.

00:31:29 And then we figure everything out for you.

00:31:31 Yeah, that's excellent.

00:31:31 Just one comment on the, it's too many words or it's too long or whatever.

00:31:37 Like I hinted at before, I just have aliases for these.

00:31:40 So for example, I just type PIR and that means uv pip install -r requirements.txt.

00:31:46 And like, I don't care if it's uv pip that or it's pip install dash, like whatever.

00:31:51 I don't want to type any of those.

00:31:52 So it's just three that PIR, let's go, you know?

00:31:54 Yeah.

00:31:55 And I've got three or four of those, you know, one to make virtual environments with uv and a couple of things like that.

00:32:00 And one to compile the changes and, you know, you, you look up for me, I look up the docs.

00:32:04 I go, okay, well, here's, here's how I'm going to shorten that to something I never think about again.

00:32:08 So it doesn't matter.

00:32:10 That's totally fine.

00:32:11 Right.

00:32:11 That's totally fine.

00:32:12 But you do got to consider, I guess, the workflow for new people.

00:32:16 Yeah.

00:32:17 Maybe that's a good place to talk about the features here.

00:32:18 So one of the things that really, there's a lot here.

00:32:22 One of the things that even though it's number three on the list of four things is the Python command.

00:32:28 So uv Python install, uv Python list, all of those kinds of things.

00:32:33 I mean, maybe we should start there because without that, we don't have any Python.

00:32:38 Although, yeah.

00:32:39 So that runs sort of implicitly under some circumstances, right?

00:32:42 Correct.

00:32:43 Yeah.

00:32:44 Okay.

00:32:44 So part of what we wanted to do with this release was make uv sort of self-bootstrapping,

00:32:50 which sounds complicated.

00:32:51 But the idea there is if you don't have Python installed, uv doesn't depend on Python.

00:32:56 It's just a binary.

00:32:58 So you download it.

00:32:59 And then when you run a command like UVVM and you give us a Python version, if you don't

00:33:04 have any Python installed, if you don't have that version installed, we will download and

00:33:07 install it for you.

00:33:08 So you can sort of seamlessly run these commands without worrying about how do I install Python?

00:33:13 Where is my Python, et cetera, et cetera.

00:33:14 Which means that we can achieve this really cool experience where the whole set of commands

00:33:21 you need to create a Python application are like, you curl install UV, and then you just

00:33:26 run like uv init --Python.

00:33:28 And we create a project for you.

00:33:30 We download and install that version of Python.

00:33:31 You can just start running things.

00:33:32 You don't have to think about how do I install Python?

00:33:34 How do I get it on my machine?

00:33:36 Do I have the versions I need?

00:33:37 Anything like that.

00:33:37 So you can obviously turn this stuff off, right?

00:33:40 And you can use your own.

00:33:41 It also respect pythons that you have on your machine already.

00:33:44 But part of the goal was we wanted to get to this, I won't call it the holy grail, but this

00:33:49 experience of you just download the binary, you do uv run, and everything just works.

00:33:54 So that was a big part of it.

00:33:56 And if you look at the full list of things that we put in this release, there's kind of

00:34:02 a lot of stuff, right?

00:34:04 There's like four bullets of things that each of those could be a big release.

00:34:09 You know, one is like the Python installation.

00:34:10 One is we have this sort of like tool install, kind of like pipX.

00:34:14 So if you want to install rough globally, you can do uv tool install rough and we'll install

00:34:20 it for you.

00:34:20 It'll get put in your path, everything like that.

00:34:22 We have these project management APIs that I've hinted at a little bit throughout this conversation,

00:34:26 like uv run, uv lock, uv sink.

00:34:28 Yeah, we'll get into it.

00:34:29 And we have, yeah, we have this thing around script execution.

00:34:31 So, you know, I thought for a long time, I thought that these would actually all be separate releases,

00:34:36 that we would do like a staggered series of releases.

00:34:40 And I was excited about that because, well, first of all, that's always fun.

00:34:43 Like you kind of like have a bunch of things and you're like shipping like one week, one

00:34:47 week, one week, and everyone's like, oh my gosh, we're shipping so much stuff.

00:34:49 But the thing we found was like, they're all kind of interconnected in subtle ways.

00:34:53 And like the project management and the tool API, they're just not as interesting if you

00:34:57 don't have like the Python.

00:34:58 Like they are interesting, but the fact that we have the complete story of like you do uv run

00:35:03 and we install Python, we've resolved your dependencies, we install your dependencies, we run the command

00:35:07 in the environment, like that whole picture, like everything's a little bit interconnected.

00:35:10 So that's how this release came to be so much stuff is we had this vision for what we wanted

00:35:15 the full stories to be, and they all became somewhat interconnected.

00:35:18 And, you know, in the end, they're all like individually, I think really powerful things,

00:35:22 but they kind of come together to give this, what we want this Python experience to be.

00:35:27 And we're not like totally there yet.

00:35:28 You know, we're missing stuff for sure.

00:35:30 But this was our attempt to capture kind of a couple of different workflows that are intertwined

00:35:35 in different ways.

00:35:36 Yeah.

00:35:37 I see how they all interconnect, but they are also interesting on their own, right?

00:35:43 Yes.

00:35:43 The Python installation thing is interesting.

00:35:45 And usable on their own, by the way.

00:35:47 Yeah.

00:35:48 Yeah, exactly.

00:35:48 They're all independently.

00:35:50 If you just had one of those, you'd be like, that's pretty cool.

00:35:53 Okay.

00:35:54 I like that.

00:35:54 That's pretty cool.

00:35:55 So let's talk just a bit more about the Python one.

00:35:59 So there's analogies here to other tools that people may know.

00:36:03 And the closest one for this would be PyE and V, do you think?

00:36:07 Yeah, probably.

00:36:08 It's like, there are obviously differences, but that's a very popular one that most, you

00:36:14 know, a lot of people know.

00:36:14 Yeah.

00:36:15 Yeah.

00:36:15 I'm not saying that they're identical, but it's, it fulfills a role that a lot of people

00:36:19 were, were solving with it.

00:36:20 Now, when I tried to do INV, I don't remember what I was doing wrong, but this was the early

00:36:26 days of Apple Silicon and maybe I had the Intel X64 version of Homebrew, but I had the build

00:36:34 tools for ARM.

00:36:35 I can't remember, but I could not get it.

00:36:37 Yeah.

00:36:37 Trying to do something under Rosetta or something.

00:36:39 Again, I couldn't get it to install anything with PyE and V because it would, it would download

00:36:45 it and would try to compile it.

00:36:46 Then there'd be some weird compiler bug.

00:36:48 And I'm like, you know what?

00:36:49 I'm not debugging the source of, I'm just not debugging this.

00:36:52 I'm out.

00:36:53 I'm just going to go download it.

00:36:54 And also that's a real, I compiled Python for some of the server stuff I'm doing and it

00:36:59 takes a while.

00:37:00 It's not that fast.

00:37:01 And when I get it from you guys, if I say uv Python install 3.12 or something, boom,

00:37:09 I get it.

00:37:09 Like in your standard style, it's fast.

00:37:12 How is it fast?

00:37:13 Yeah.

00:37:14 So that comes down to like sort of a fundamental difference between what we're doing and what

00:37:17 PyE.

00:37:18 I don't know if it's PyE or PyE by the way.

00:37:20 I think it's PyE by the way.

00:37:22 Okay.

00:37:22 So I'm just going to say that.

00:37:23 Let's go with that.

00:37:25 If I try to do the other, I will mess up.

00:37:27 So like the way that PyE typically works is, you know, it's a great tool.

00:37:31 A lot of people use it.

00:37:32 It's building Python from source and there are trade-offs around this, but the idea is it

00:37:36 will build the version of Python that you need.

00:37:38 What we're doing is we're building a top of project called Python build standalone by originally

00:37:46 created by Greg Sork.

00:37:47 And that's a project that we've started contributing to.

00:37:49 So I think I did the last two releases maybe.

00:37:52 But the idea here is we have these standalone, easily redistributable Python builds.

00:37:58 And when we do a release, it will create Python builds for, you know, for a bunch of Linux

00:38:03 architectures for macOS, for Windows on all the different Python versions.

00:38:08 And it will also run a bunch of optimizations over there.

00:38:11 So it'll do, you know, it's not these acronyms.

00:38:14 It's not important that you understand them, but, you know, it can do like link time optimization

00:38:17 or LTO and profile guided optimization, PGO.

00:38:20 So we build all the binaries in advance.

00:38:23 That's pretty impressive.

00:38:23 Yeah, that's impressive.

00:38:24 That all happens in advance.

00:38:26 So if you go to like the releases page here, like scroll up a little bit and just go to,

00:38:32 just click their latest release.

00:38:33 Yeah.

00:38:33 Right.

00:38:33 Yeah.

00:38:34 You'll see like all the, yeah, like 773 artifacts.

00:38:38 That's like 773 Python builds.

00:38:40 So it's a lot of different Pythons.

00:38:43 Yeah.

00:38:43 Yeah.

00:38:43 It's a lot of different Pythons.

00:38:44 Yeah.

00:38:44 773 different.

00:38:46 So like, you know, we build all this stuff.

00:38:48 And then when you run Python install, we figure out the correct, see, we have like arm, we

00:38:52 have like all this stuff.

00:38:53 So then we figure out the correct Python for your machine.

00:38:55 We just download and unzip it.

00:38:56 I see.

00:38:57 The same way you get a wheel is the way you get this.

00:38:59 Yeah.

00:39:00 I mean, it's actually the same code pretty much like under the hood for us.

00:39:02 Right.

00:39:03 It's like we stream and unzip it down into disk.

00:39:05 And that's great.

00:39:07 It's like super fast.

00:39:08 It's also, they're already optimized.

00:39:11 Like Pythons by default does not compile with optimizations.

00:39:14 You can compile with optimizations, but it's not what it does by default.

00:39:18 So these will be, you know, noticeably faster than, than what you would get by default with Pythons.

00:39:24 There are some downsides, like some people like to build from source, right?

00:39:27 They like to have like effectively the full chain of like reproducibility in the build.

00:39:31 And now you're kind of trusting us to give you your Pythons.

00:39:34 So that's, that is a downside to some people.

00:39:36 Yeah.

00:39:36 But then the next thing you do is you pip install something that has a binary wheel anyway.

00:39:41 So yeah, yeah, no, that is true.

00:39:43 There are also like a couple of quirks with these builds that we're, we're working on a little bit.

00:39:50 Some of it has to do with like licensing the fact that you want to have kind of

00:39:54 a statically, you want to have a self-contained Python.

00:39:56 And there are some things in the, in, you know, in there that, that require licensing changes.

00:40:00 So, you know, it uses all terms.

00:40:02 Some, there are some slight deviations from what you would get with building from source

00:40:05 from CPython.

00:40:06 And those are documented in Python build standalone.

00:40:09 But, you know, the general idea is we pre-build and pre-optimize these Pythons.

00:40:13 And then we, you know, we download them on demand and it makes it really fast.

00:40:17 Awesome.

00:40:18 When I go to python.org and download a DMG package or and MSI for windows or whatever, it runs this installer process that takes a good long while.

00:40:28 And, you know, Jake just pointed out a similar experience I had.

00:40:31 It says it took me less than two seconds to install 3.10.

00:40:34 Yeah.

00:40:34 Same thing for 3.12.

00:40:35 So what is, are we missing anything compared to running a proper installer that seems to

00:40:42 take 20 seconds, even on a fast computer?

00:40:44 I think those installers also have to do some operations from source, most likely because

00:40:49 they're not shipping.

00:40:51 Okay.

00:40:51 I could be wrong about that.

00:40:54 I haven't looked at them closely.

00:40:56 But Python in general, like, you know, Python.org does not distribute these kind of pre-built

00:41:04 binary distributions for all these different architectures.

00:41:06 And we, there's interest in doing that.

00:41:10 And I'm also interested in doing that.

00:41:12 And, but, you know, it needs to be, you know, there are some things that need to be decided,

00:41:17 standards that potentially need to be set.

00:41:20 So, you know, it's possible that eventually we can just read, you know, grab these basically

00:41:24 from, from python.org.

00:41:27 I think our PyPy downloads come from python.org, if I'm not mistaken.

00:41:32 PYPy, that is.

00:41:33 Yeah.

00:41:33 Or it actually might come from PYPy.org.

00:41:36 Now I can't remember.

00:41:37 Okay.

00:41:38 Anyway, those come from some sort of official source.

00:41:41 Yeah.

00:41:41 Yeah.

00:41:41 Yeah.

00:41:42 Yeah.

00:41:42 So, okay.

00:41:43 Yeah.

00:41:44 Yeah.

00:41:44 Maybe eventually.

00:41:45 But, but for now, yeah, we're using Python built standalone and we've just been trying

00:41:49 to grow our familiarity with the project too.

00:41:51 Right.

00:41:52 Okay.

00:41:52 So let's give people a sense here, like they do not have Python at all, or they can't count

00:41:57 on having Python or the right version of Python.

00:41:59 They can run a single shell command to get UV, which uv can then manage itself.

00:42:05 They could pip X install the uv.

00:42:07 Can you homebrew?

00:42:08 Yeah.

00:42:09 What other ways, how, what other ways can I get?

00:42:10 Yeah, you can get uv on your machine however you want.

00:42:12 Like uv doesn't need to be in the virtual environment that it's manipulating.

00:42:17 Yeah.

00:42:17 It can just be anywhere on your machine and it can operate on any environment.

00:42:20 External tool sort of deal.

00:42:22 Yeah.

00:42:22 Yeah.

00:42:22 Yeah.

00:42:23 So once you have that.

00:42:24 You can install it with pip.

00:42:25 We have our own standalone installers that you can, you know, curl.

00:42:28 It's on homebrew, right?

00:42:30 It's on, you can, you can install with pip X, you can install it however you want.

00:42:33 And then ultimately it can operate on any environment on your machine.

00:42:37 So I actually don't recommend installing it in a virtual environment.

00:42:40 I recommend installing it globally.

00:42:41 Yeah.

00:42:42 That's how I have it as well.

00:42:43 Kind of working from there.

00:42:44 Yeah.

00:42:44 I believe I've pip X installed it.

00:42:46 Cause anything that falls into that category for me, it goes under pip X, at least for now.

00:42:50 Yeah.

00:42:50 Well, we'll talk about that in a minute.

00:42:51 Yeah.

00:42:52 I mean, one interesting thing is if you use our installers like the curl installers, then

00:42:57 you get access to self updates.

00:42:59 So you can run uv self update and we will update to the latest version.

00:43:05 That's right.

00:43:06 Cause I tried to really try that.

00:43:07 If you, yeah, you can't do that.

00:43:09 If you installed through a different package manager, because we don't really like know how

00:43:13 it was installed.

00:43:15 So if you install it through the installer, right.

00:43:17 We write a receipt that, that we understand like where we installed it and all that kind

00:43:20 of stuff.

00:43:20 Yeah.

00:43:21 So that's, that's one benefit.

00:43:23 But it's not, you're not required to do that.

00:43:26 Sure.

00:43:27 I ran into that when I, I just wanted to see what it would do.

00:43:30 Yeah.

00:43:31 And it's, it's a, you installed this from a package manager type thing.

00:43:35 So go do that thing.

00:43:36 But that's fine.

00:43:36 But that's fine.

00:43:36 I have automation for like all those things.

00:43:38 So it's not a big deal.

00:43:39 And so on.

00:43:39 So to give people a sense, like once uv is on your system and in the path, you can say

00:43:44 UV, V and V --Python, and put up some variation of a Python version.

00:43:50 And if you have it great, it'll use it right to create the virtual environment.

00:43:54 If you don't have it, it will then do this two second download install deal.

00:43:58 Assuming you have fiber and then create a virtual environment based on it.

00:44:01 Right.

00:44:01 Yep.

00:44:02 That's right.

00:44:03 And you can turn that off, but that is the default behavior.

00:44:05 Yeah.

00:44:05 That's awesome.

00:44:06 And then you can also pass commands like managed only, I think it is, or something like that,

00:44:11 where you say, don't use the system Python even.

00:44:14 Yeah.

00:44:15 Yeah.

00:44:15 Only use the pythons that uv will install or like only use the pythons that are out my machine.

00:44:20 Ignore UV's pythons.

00:44:21 There's some customizations around that.

00:44:22 Right.

00:44:23 Like you could do the opposite.

00:44:24 I will also say this version, by the way, this version format request thing is like so hard.

00:44:32 Yeah.

00:44:33 It's just like, you'd just be shocked.

00:44:35 Like how much engineering work has gone into like understanding those requests and then discovering all the pythons on your machine.

00:44:41 Yeah.

00:44:41 And the discovering all the pythons on your machine part problem, by the way, is a problem that like a bunch of tools have had to solve.

00:44:48 And we've talked with the pythons on your machine.

00:44:56 And we've talked about it in different places that they could be.

00:44:57 And like on windows, it's also like totally different than on Unix.

00:45:01 So anyway, a lot of work has gone into that.

00:45:08 Like you can say, yeah, you can say cpython greater than or equal to 3.12.

00:45:13 Right.

00:45:13 And then we'll look for cpython rather than pypy rather than grailpy.

00:45:16 Yeah.

00:45:17 Yeah.

00:45:17 So anyway, a lot of work has gone into that.

00:45:18 What if I just say uvvv and I have no python whatsoever?

00:45:24 I think we would install the latest python.

00:45:26 Would you just go, yeah, just do a latest like maybe a implicit --python space 3.

00:45:32 Yeah.

00:45:33 I think that would kind of give me any python from the list of downloads.

00:45:37 And then we sort by version.

00:45:39 So I think you would effectively get the latest compatible version.

00:45:42 But now you're kind of quizzing me a little bit.

00:45:44 No, I don't mean to be quizzing you.

00:45:45 I'm just kidding.

00:45:47 All right.

00:45:48 So we'll move on.

00:45:50 I know there's so much more and we don't have a ton of time to get it.

00:45:54 But I just pulled up my my warp terminal and I typed uv python list and it shows me a bunch of options for arm 64 for macOS 312.5 312.0 311.9 310.3.8 and so on that I could pick.

00:46:10 However, I'm just wondering where your cutting edge needle or setting is going to go here.

00:46:17 I don't see a 3 of 13.

00:46:19 Yeah, we're working on it.

00:46:21 We're working on it.

00:46:22 We're working on it.

00:46:24 And one of the things that is tricky about any of these package manager stories is if I homebrew it, I'll see that there's a new python, especially a major release, but I might have to wait a week before it's available on homebrew.

00:46:36 And but homebrew auto updated.

00:46:38 But if I install it for the installer from python.org, it won't auto update it.

00:46:41 And you know, there's just there's always a little drawback of it.

00:46:44 Yeah.

00:46:44 Yeah.

00:46:44 Yeah.

00:46:44 Yeah.

00:46:45 And so when I saw this feature, I'm like, well, if this thing could just really soon have the newest one that would just be icing on the cake.

00:46:52 And so what is your what is your policy on how quickly to adopt new things?

00:46:57 I'll go get it.

00:46:58 Yeah.

00:46:58 Yeah.

00:46:59 Yeah.

00:46:59 Yeah.

00:46:59 At least candidates and betas and things like that.

00:47:01 Yeah.

00:47:01 Like with 3.13, I mean, I would like to have it out as soon as there's an RC.

00:47:06 That's what I would like to do.

00:47:08 Okay.

00:47:08 our policy or our, our goal is to make sure that it's out before the stable release.

00:47:16 Okay.

00:47:17 So we would like to not be lagging on the stable release.

00:47:20 And, you know, we view like the, the minor releases in Python, similarly in rough historically,

00:47:27 like we'll be like, okay, we want to make sure that we support all the 3.12 language features before 3.12 is stable.

00:47:33 and there were like a bunch of language features in 3.12.

00:47:35 There was like some new grammar, there were new typing features.

00:47:38 And so the goal there again was like, the goal is to have it out by time.

00:47:41 It's stable.

00:47:42 So that's typically like the contract we try and uphold and that's still our plan for 3.13.

00:47:46 Okay.

00:47:46 Awesome.

00:47:47 Yeah.

00:47:47 Good to know.

00:47:48 Yeah.

00:47:48 Jay Geller says, it would be, it would be nice to have an option to install pre-release build.

00:47:54 And, Tushar says, the thing is Python build standalone builds 600 releases per version number.

00:48:00 Having that run daily is too much.

00:48:01 But if anyone could do some interesting caching, surely the astral folks.

00:48:05 You know, it's kind of amazing though.

00:48:08 That project runs, it's not, we like, we don't, we don't own it.

00:48:11 It's not under our org.

00:48:12 Yeah.

00:48:12 Yeah.

00:48:12 Yeah.

00:48:12 Yeah.

00:48:12 That project runs completely for free on GitHub action.

00:48:15 Wow.

00:48:15 Isn't that remarkable?

00:48:16 It's kind of crazy, isn't it?

00:48:17 Yeah.

00:48:18 GitHub is ridiculous.

00:48:19 Yeah.

00:48:20 So anyway, that's kind of.

00:48:21 How much traffic it handles and yeah.

00:48:24 Yeah.

00:48:24 How much data.

00:48:25 Yeah.

00:48:25 They're, they're pretty awesome.

00:48:26 Okay.

00:48:27 Yep.

00:48:27 So if you don't have Python, you can also, you don't have to do a V and V, you can just say,

00:48:31 uv Python install, give it a version.

00:48:34 And then you'll just have that.

00:48:35 Like that's what Jake and I were referring to earlier, but you can also create a V and V.

00:48:40 And this is sort of a philosophy that I'm, I'm getting.

00:48:43 And sorry, someone said this earlier, but it's scrolled off the live stream comments that this

00:48:48 prefer or require virtual environments by default, rather than prefer to try to jam stuff into system

00:48:55 Python or the core Python.

00:48:57 And then it could be a virtual environment if you really know the incantations.

00:49:00 Yeah.

00:49:01 Yeah.

00:49:02 That's probably like, you know, we did the release in February.

00:49:05 We tried to steer pretty closely to the way pit behaves to make it easy for people.

00:49:11 But we did pick a few battles where we wanted to intentionally diverge.

00:49:16 And this was, this was one of the bigger ones, which is uv by default requires a virtual environment.

00:49:22 So if you try and uv pip install and there's no, we can't find a virtual environment in the current

00:49:25 directory or an active virtual environment, we'll throw an error.

00:49:28 And you can opt out of that by passing a system flag, but unlike pip, right, it's opt out.

00:49:34 So you have to, by default, use a virtual environment and you can escape from that if you want to

00:49:39 intentionally.

00:49:40 So we're trying to, like with these APIs too, like these are all virtual environment.

00:49:47 Well, the tool stuff, it is, but in a different way, like uv run, uv lock, uv sync, these all create

00:49:54 a virtual environment in the project directory where the project is defined by a PI project tunnel.

00:49:58 So if you run uv run in that directory, it will look at the dependencies, resolve them, create a lock file,

00:50:04 create a virtual environment, install their locked versions into the virtual environment, run the

00:50:08 command.

00:50:08 And it does that every time, but it's so fast that we will hopefully so fast that we can do it.

00:50:14 So like if the dependencies haven't changed, it will still make sure that everything's up to date.

00:50:18 So if you just use uv run, we try and keep the whole environment in sync for you.

00:50:22 And you don't have to think about how do I manage my environment?

00:50:25 How do I activate it?

00:50:26 How do I install stuff?

00:50:27 But we're pretty like, we're pretty pro virtual environment.

00:50:32 And one thing I want to do, and it's sometimes hard to hold these lines because you have users

00:50:38 who come to you and want something really different.

00:50:40 And it can be hard not to say yes to a lot of the things that users want.

00:50:46 But some lines, I think we have to hold because if we can see it on them, sorry, I may sound like a

00:50:53 battle, but if we can see it on them, it just limits the things we can do in the future.

00:50:58 Like if we make things too flexible, it limits some of the things, some of the possibilities

00:51:02 of what we can do in the future.

00:51:03 And like one thing that I kind of want to change the perception around is like, I think virtual

00:51:08 environments are like, they're here to stay really.

00:51:11 And I am, so we like embrace them, but I want to change some of how people like think about virtual

00:51:18 environments.

00:51:19 In particular, I want to change this whole idea of like activating a virtual environment.

00:51:22 Like I want it to feel more like node modules, which people don't necessarily think, you know,

00:51:27 highly of node modules.

00:51:28 Like I think when people think of node modules, they think of a huge node modules folder with

00:51:31 like a ton of bloat.

00:51:33 But the idea there is like when you're in a project, you just sort of run commands and all the packages

00:51:39 just get installed there.

00:51:40 And it just runs in the correct environment with the correct dependencies.

00:51:42 And that's actually what I kind of want.

00:51:44 That's actually what I want Python to feel like is, yeah, there's a virtual environment,

00:51:47 but it's actually just kind of like the directories of, you know, it's kind of just like full

00:51:50 of packages, full of your dependencies.

00:51:51 And it just, you just use the right one at the right points in time.

00:51:55 So that's, that's part of the shift that I want us to move towards a little bit.

00:51:59 And it's part of why we're very virtual environment first and why we put the virtual environment

00:52:03 right in the project in a specific known place, because we want to get away a little bit from

00:52:09 this idea of where's the environment, how do I activate it?

00:52:11 Do I have the wrong one activated?

00:52:13 I want it to feel a little bit more like it is just sort of native to how the project works.

00:52:18 Okay. If you're in the context of that thing, then it just uses the right one.

00:52:21 Yeah.

00:52:22 Is it, do you have intentions to do something?

00:52:24 I can't remember the path, but something to the effect where if you're in a directory and

00:52:28 there's no PyProject, Toml or virtual environment, but if you went up one or two, if we're both,

00:52:32 would it fall to that one or would it just go, oh, we don't know?

00:52:35 We do do that with uv run.

00:52:37 So with uv run, we sort of find the root of the project.

00:52:41 Yes, exactly.

00:52:41 And we'll look up at parent directories.

00:52:43 But we don't, but if you just run Python, you know, blah, blah, blah, obviously we don't hook

00:52:49 into anything there.

00:52:50 And so, you know, like with a lot of other things, like with uv run, uv lock, uv sync,

00:52:54 like we, we create a virtual environment.

00:52:56 If you use our commands, it's kind of just like everything just works, but you can also just like

00:53:00 activate the virtual environment and like do whatever you want, because we're kind of trying to

00:53:03 embrace the fact that virtual environments are like, everyone knows, not, you know, not everyone

00:53:08 knows how to use them, but like people are familiar with them, editors and tooling like revolve around

00:53:13 them.

00:53:13 Right.

00:53:14 Yeah.

00:53:14 So things that try to eject from virtual environments tend to cause a lot of problems for editors and

00:53:20 workflows.

00:53:21 So part of embracing virtual environments, I think again, is like meeting the ecosystem where it is a

00:53:25 little bit and being like, okay, the fact that we use virtual environments and they're just like in

00:53:29 your project means that you don't need like a special, like editor integration to

00:53:33 use UV, like, you know, like PyCharm.

00:53:35 We'll just like let you use that virtual environment, which is a virtual normal virtual

00:53:38 environment.

00:53:39 Yeah.

00:53:39 That's perspective.

00:53:40 So that's, that's part, again, part of what we're trying to do is like build things that just

00:53:43 work for people, and try and embrace, you know, the standards and the conventions while also,

00:53:49 you know, maybe influencing or changing parts of them that we think could be, could be improved

00:53:55 or could be made more user-friendly.

00:53:57 Yeah.

00:53:57 I don't know why I didn't book you for two and a half hour podcast, because that's what we're going to need.

00:54:01 So Vincent from Comcode says, uv run is such a game changer may work on.

00:54:05 He may work on a Jupyter runner for that this week.

00:54:08 Feels like such a game changer, which is awesome.

00:54:10 Cool.

00:54:10 Yeah.

00:54:11 Yeah.

00:54:11 There's a lot of cool ideas too, around this sort of, sorry, good.

00:54:14 Well, I was going to say with, with that in mind, let's dive into this whole project

00:54:18 management stuff here.

00:54:20 Right.

00:54:20 Like this is, I think this is one of the, this is one of the three big pieces of functionality

00:54:25 that comes.

00:54:25 So, and you've been talking about this sort of, some of the features like uv run and so on,

00:54:30 but let's, let's talk through, let's talk through like, yeah.

00:54:33 I want to create a new project.

00:54:35 Yeah.

00:54:35 Yeah.

00:54:35 Yeah.

00:54:36 I want to create a project.

00:54:37 I don't have the Python installed.

00:54:39 It's a new project.

00:54:40 I want to create a pyproject.toml, but I don't even remember the format for that.

00:54:44 Yep.

00:54:44 Let's go.

00:54:45 How's that work?

00:54:45 Yeah.

00:54:46 So, so we have like a series of commands that kind of manage the project life cycle

00:54:51 for you.

00:54:51 So you can run uv init to create a new project.

00:54:54 And it has a couple of flags based on whether you want to build like a library or command line

00:54:59 application, whether you want it to be structured as like a Python package, or just kind of, maybe

00:55:04 it's just an application that you're running on your machine.

00:55:06 But uv init will create the project.

00:55:09 You can then run uv add flask, uv add FastAPI, whatever to add dependencies.

00:55:14 And when you run uv add, we'll automatically generate the lock file and sync the, sync the

00:55:18 dependencies to your system.

00:55:19 So we do have commands like uv lock to generate the lock file and uv sync to download the correct

00:55:27 dependencies into your environment.

00:55:28 But you can also just kind of use these life cycle commands and uv will make sure that everything's in

00:55:32 the right state as you go.

00:55:33 So you can run uv add, uv run.

00:55:36 If you do uv run and then Python, blah, blah, blah, it's, it's, you know, what happens behind the

00:55:41 scenes is we resolve the dependencies.

00:55:43 We make sure the environment's up to date, and then we run that command in the environment.

00:55:46 So the whole life cycle of working with your project can be managed through uv init, uv add,

00:55:51 uv remove, uv run.

00:55:53 There's a lot that goes into that.

00:55:56 And there's also a lot of kind of powerful features built in here too.

00:56:00 Like when you run uv run, it accepts a flag --with, so you can do uv run dash dash

00:56:06 with and put a dependency there.

00:56:08 And it will basically just download that, put it in an ephemeral virtual environment and make

00:56:14 it available for the command.

00:56:15 So you can just pull in one off dependencies as you need to run things.

00:56:19 Like I, I, I never actually think about activating environments anymore.

00:56:23 Like most of the time when I'm running Python commands to run one off tooling, I'm running,

00:56:28 you know, uv run --with requirements.

00:56:30 And I give it a requirements file.

00:56:32 And then, you know, I pass the name of the file I want to run.

00:56:34 And like, it, it just like builds the thing you need and runs the command and then throws it away.

00:56:39 And because you have, again, we were talking at the beginning of this episode about how like

00:56:43 really fast tools change the ergonomics.

00:56:45 Like part of what we're trying to build here is like, if we have this packaging system, that's

00:56:49 really fast, especially for like repeated operations.

00:56:52 Like I need to keep pulling in, you know, I've downloaded this package before.

00:56:57 I need to download it again, use it for this one command.

00:56:59 Like we can just like throw away virtual environments and create new virtual environments,

00:57:02 you know, in like in milliseconds.

00:57:03 Yeah.

00:57:04 So if this was a Python dash M V and V sort of, it would be way too much overhead.

00:57:11 Yeah.

00:57:11 Yeah.

00:57:12 Yeah.

00:57:12 Yeah.

00:57:12 And so, you know, we can, we can just like, even like a bunch of dependencies,

00:57:16 like they've been installed on your machine already.

00:57:18 It's really, really fast just to pull these things together, use them and throw them away.

00:57:22 So there's just a lot, there's a lot of things that we can do.

00:57:28 And I think even like looking forward to the future, there's a lot of things we can do because

00:57:31 we have this like performance foundation.

00:57:33 Like, you know, I'm thinking about what if you want to test code on like a bunch of different

00:57:38 Python versions.

00:57:38 Yeah.

00:57:39 Yeah.

00:57:39 And maybe you don't want to like have to keep destroying and recreating your virtual

00:57:44 environment or something like that.

00:57:45 Like there's just, there's just a whole lot of stuff that we can build that would be really

00:57:48 hard to imagine if you didn't have a really fast tool.

00:57:51 Yeah.

00:57:51 It's, it changed.

00:57:53 It definitely changes what's possible.

00:57:54 It's too sure.

00:57:55 I'll put out an example that it's very near and dear to my heart.

00:57:58 You know what would be great?

00:57:59 If uv could build standalone binaries and embed Python into them.

00:58:04 Yeah.

00:58:04 Yeah.

00:58:05 Yeah.

00:58:05 That's an interesting space.

00:58:06 It's not something we've built anything around, but yeah, I know it's being described there.

00:58:10 Yeah.

00:58:11 Yeah.

00:58:11 I think one of the, what I've seen most of the things do is we'll do something like zip

00:58:16 up a virtual environment or site packages or something and, and then put that in a binary.

00:58:22 And then when you run it, it'll spit that out or maybe do a memory mapped sort of magic to try

00:58:27 to map into that and unzip it into memory or all sorts of weirdness.

00:58:31 And I think really for this to be easy, some somewhere along the way, I could be wrong, not

00:58:37 a core developer, but I feel like Python's import behavior needs to be able to import from an embedded

00:58:44 resource in a compiled binary rather than stick in a binary and have the binary do like weird things

00:58:51 where it fakes out the path.

00:58:52 Cause there's always like something that falls apart.

00:58:54 But if the pip itself like say, okay, we can import from a memory stream and not just

00:58:59 from file system, then these things would be like, oh, well, if that's the case, here's how you just

00:59:03 embed those and off it goes, you know, it'd be more like go or so here's your one thing you run it.

00:59:08 You know what I mean?

00:59:08 Yeah.

00:59:09 Yeah.

00:59:09 There's definitely interesting stuff to explore there.

00:59:11 And there's some interesting tools that exist already to try to facilitate some of those things.

00:59:17 Yeah.

00:59:18 It's also we've invested time in yet though.

00:59:20 Yep.

00:59:21 All right.

00:59:21 Well, yeah, I was thinking in high app is similar.

00:59:23 Yeah.

00:59:24 Yeah.

00:59:24 Py app is definitely, I've used py app before.

00:59:26 Actually I have an app running in my system right now.

00:59:28 It's in a little menu bar thing.

00:59:29 That's a py app app and it works well.

00:59:31 It does work well.

00:59:32 Yep.

00:59:32 Okay.

00:59:33 so the project API is kind of like, you know, if you use you, if you've used like poetry or

00:59:39 PDM, like these tools that are oriented around working on a project, and you have a py project

00:59:45 toml that defines your dependencies and you might have some sort of structure.

00:59:48 it's based around that kind of workflow of working on a project.

00:59:52 which, you know, is that's like one way that people work with Python, but there's a

00:59:56 lot of ways.

00:59:57 There's a lot of things that people do with Python, which is why we have a couple of different APIs.

01:00:00 Right.

01:00:00 So we also have this tool API, like uv tool install, uv tool run, which we've alias to UVX.

01:00:09 These are for running.

01:00:10 This is interesting.

01:00:11 Yeah.

01:00:12 Yeah.

01:00:12 These are for running like one-off, not one-off commands, but like things that you want installed globally.

01:00:17 So like you might want rough installed globally on your machine so you can run it on a bunch of different projects.

01:00:22 We call those like tools, and you install them, you know, similar if you've used pipX before we install them into dedicated environments, and put them on your path.

01:00:32 and there's a lot of really cool stuff here.

01:00:35 Like I now use UVX all the time when I want to run things.

01:00:38 So I'll do like UVX rough check and that translates to uv tool run rough, you know, run the check command behind the scenes.

01:00:46 What it does is it finds latest version of rough.

01:00:48 It creates an environment with that version, and then it runs the command using, using the rough binary in there.

01:00:53 and there's very, there's really no overhead to that.

01:00:57 if you're kind of running it repeatedly.

01:00:59 So, you know, this, this is oriented around like a different way of working with Python, where you have these tools that you need to run on your machine.

01:01:08 And you use them for different things.

01:01:10 so we have like the project interface for working on a project, and then we have the tool interface for running Python, you know, command line tools.

01:01:17 Yeah.

01:01:18 So UVX run, well, UVX is the run version.

01:01:22 Yeah.

01:01:22 And you've also got the install.

01:01:24 I have some thoughts on when I might do one or the other, but the uv tool install seems like something you might want to run and have around and have auto complete in your shell.

01:01:34 So I could type R U tab and get rough, or I could.

01:01:37 Yep.

01:01:37 Yeah.

01:01:37 uv tool.

01:01:38 I think for things you're going to run it repeatedly, it makes a lot of sense to install them.

01:01:42 also if you have, like, if you ran uv tool install rough, and then you ran like UVX rough, we would use the installed version.

01:01:51 So if you already have the tool installed, we'll still pull the installed version, assuming it's compatible with the version request that you made.

01:01:58 Yeah.

01:01:59 Yeah.

01:01:59 So like, yeah, I generally like uv tool install things that I'm going to run, you know, multiple times.

01:02:05 the other really nice thing about uv tool install is we have uv tool upgrade.

01:02:10 So you can do like uv tool upgrade --all and we'll upgrade all the installed tools.

01:02:14 so you don't have to think about like, which tools do I have installed?

01:02:18 Like what versions are they at?

01:02:19 Are they out of date?

01:02:19 so, you know, it kind of gives you a way to manage all the Python tools that you're using,

01:02:24 at a, at a kind of global level.

01:02:26 so, you know, we have a lot of commands, like in our docs, we have a lot of like automation tooling

01:02:32 built around Python, like, you know, rough and uv are written in rust, but a lot of our like

01:02:35 documentation tooling, like we have a lot of scripting in Python.

01:02:38 and all of our docs now in the doc string at the top have like the UVX command that you run to

01:02:44 like run the script.

01:02:45 Nice.

01:02:46 And so I just like copy that and paste that.

01:02:48 And then the script just runs with all of its dependencies.

01:02:50 So, so it's like, it's just super, it's just very, very convenient.

01:02:57 I think, like all these are APIs and the way they come together.

01:03:00 and, there's a lot, I know it's a lot of different stuff.

01:03:04 And that was actually my biggest fear with this release was it's hard to succinctly explain

01:03:09 what this release is, because it's a lot of different things.

01:03:13 And it's not like when we released uv or in February, when we released uv in February,

01:03:17 it's like, this is a new tool.

01:03:19 It, if you know, Pip, you understand what this is, right?

01:03:21 It was much easier to explain, I think in a succinct way, like what we're doing.

01:03:25 and in this release, it's like, it's actually like a lot of different stuff that comes together

01:03:30 to tell what I think is a very coherent story, but it's hard to succinctly explain exactly what,

01:03:36 what, you know, what we did.

01:03:38 and I was very like the response to it.

01:03:42 I was really heartened, you know, to see that people were, people were like getting

01:03:48 it and they were getting different parts of it.

01:03:50 Like different parts of it were speaking to different people.

01:03:52 because I actually think different parts of it are like relevant to different ways that

01:03:55 people work with Python.

01:03:56 So a lot of people were excited about, you know, the lock files, the uv run.

01:04:00 A lot of people were excited about the fact that we have this like scripting API.

01:04:04 So you can like have these standalone scripts where the dependencies are embedded in them.

01:04:08 And if you do uv run that script, you know, we just resolve the dependencies, download,

01:04:13 download them and run the command with those dependencies available, run the script with

01:04:16 those dependencies available.

01:04:17 So you can have these like hermetic Python scripts.

01:04:19 you know, we had the Python install API.

01:04:22 So there were just different things that were resonating with people, which I think is what

01:04:24 made me happiest in the response to it.

01:04:27 Did you read, I'm sure you read Armin's Ryan uv August is harvest season of Python packaging.

01:04:33 Yeah.

01:04:33 Yeah.

01:04:33 That's a pretty positive take and a pretty wide ranging recommendation there.

01:04:39 It's, it's pretty interesting.

01:04:40 Yeah.

01:04:40 The relationship with Rye is something we get a lot of questions about.

01:04:43 and you know, I think like, when we, you know, when we took over Rye, the goal was always like, we want to build

01:04:52 uv up until to be a suitable replacement that people can migrate from ride to uv.

01:04:57 but, and we're getting further along that path, but there's still like things we're

01:05:03 missing.

01:05:03 we don't plan on like deprecating Rye any, you know, anytime soon, but all of our

01:05:07 like new feature development is really happening in uv and riots mostly like bug fixes, like keeping

01:05:12 things up to date.

01:05:12 so, you know, Rye has actually benefited a lot from uv.

01:05:16 Cause it uses uv under the hood.

01:05:18 So like Rye has just gotten like, there's new features or there's, you know, it's gotten

01:05:22 faster.

01:05:23 but you know, our goal is really to like find the things that are missing from Rye and

01:05:27 make sure we can support them in uv.

01:05:29 Yeah.

01:05:29 Last one we've got to cover here is you have any, points out single file scripts with dependencies.

01:05:36 That's the last one, the script execution.

01:05:38 So yeah, one of the huge problems is I, one of the reasons I think, Tushar was suggesting

01:05:44 it and I'm also really excited about it is if you could bundle your code into an application,

01:05:49 one of the benefits is you don't have to have a conversation with everyone that runs it.

01:05:53 Yeah.

01:05:54 How to do virtual environments, how to do package management, all this kind of stuff.

01:05:57 You just say, run, click it or, or whatever.

01:05:59 And somewhat short of that is I want to give you just a script of some sort, but, and just say,

01:06:06 run this, right?

01:06:08 Here's the script app.

01:06:09 You have an example.py to run that.

01:06:11 But if you put some sort of magical incantation, which it's backed by a PEP to say what it actually

01:06:17 requires then uv --script, something, it'll just see that and go, okay, or uv run rather.

01:06:23 It'll see that install the pieces ephemerally, right?

01:06:26 And run.

01:06:27 That's, that's pretty cool.

01:06:28 Yeah, exactly.

01:06:28 So as our kind of our last thing before we run out of time.

01:06:31 It's really cool.

01:06:31 This is, this is backed by a pep.

01:06:33 I think it's seven, two, three, if I recall correctly.

01:06:36 So this is like a standardized, this syntax at the top of the file is standardized.

01:06:40 might not be mentioned somewhere.

01:06:42 Yeah.

01:06:43 There's a bunch of PEP conversations, but not the one.

01:06:46 Not a real.

01:06:47 Yeah.

01:06:47 We sometimes try and like shy away from talking about user facing features in terms of peps.

01:06:52 yeah.

01:06:52 It's because.

01:06:53 There you go.

01:06:54 It's not.

01:06:54 It's not.

01:06:54 It's not.

01:06:55 Three.

01:06:55 That's it.

01:06:55 Yeah.

01:06:55 Okay.

01:06:55 Well, there it is.

01:06:56 but anyway, the, so the idea here is like, you can declare the dependencies for the

01:07:02 script, right in the script.

01:07:04 And then when you do uv run that script, we read that dependency data and we've run the script

01:07:09 in an environment with those dependencies.

01:07:10 so, the other, I think really cool piece here is I talked before about uv ad.

01:07:19 So if you're in a project with a PI project, you can do like uv ad, FastAPI or whatever,

01:07:24 but you can also do that for scripts.

01:07:27 So if you scroll, if you look for like uv ad --script.

01:07:31 So you referred to this like magical incantation at the top.

01:07:33 We will actually like create that for you.

01:07:35 So if you do uv ad --dash script, and then the script name and the dependencies, like we'll actually just like put that stuff in there for you.

01:07:42 So you don't actually have to like remember how to do that.

01:07:44 Like you can just do uv run ----script, and we will actually like populate that field.

01:07:50 So you can create a script.

01:07:52 You can manage the dependencies in it with uv.

01:07:54 You can run it.

01:07:54 This is like super useful.

01:07:57 There's some interesting conversations happening now too around like, what if we want to have a lock file for these?

01:08:02 Because it's a little bit different, right?

01:08:05 This is a, this is the list of dependencies.

01:08:07 It's not the list of resolved versions.

01:08:08 So if you wanted to have like full reproducibility, you probably want a lock file.

01:08:12 And the, not just these things versions, but they're the transitive closure of all the dependencies.

01:08:19 Correct.

01:08:19 You know, everything they depend on.

01:08:22 Yeah.

01:08:22 Yeah.

01:08:23 So, you know, we do that for projects.

01:08:25 Like if you do uv lock in a project, we create this lock file.

01:08:28 That's all the transitive dependencies.

01:08:30 It locks the exact URLs, the hashes, the versions, everything.

01:08:34 We don't do that right now for scripts, just because there's no, there isn't really a place to put it.

01:08:38 Yeah.

01:08:38 But we're kind of thinking about, like you could go on scripts.

01:08:40 Have you considered the Windows registry?

01:08:42 I mean, you could always just like integrate that and import that over to Mac and Linux.

01:08:46 That'd be fine.

01:08:46 Yeah.

01:08:47 Just put everything in the Windows registry.

01:08:48 Yeah.

01:08:49 That's a, that's a winning idea.

01:08:51 Yeah.

01:08:51 No, I totally get it.

01:08:53 Yeah.

01:08:54 I mean, the other thing that's interesting too, is like the notebooks, like people are thinking about

01:08:57 how can we add this kind of functionality to notebooks and, you know, being able to declare

01:09:02 the dependencies for a notebook right in the notebook, being able to lock them too.

01:09:06 There's a lot of cool stuff that we can build now that we have all these primitives connected.

01:09:10 Yeah, for sure.

01:09:11 I mean, you could do something like take a hash of the file and then use that hash as the name

01:09:15 and as long as the file doesn't change, it'll run the same.

01:09:18 I don't know.

01:09:18 Yeah.

01:09:18 Yeah.

01:09:19 There's, I'll leave that to y'all.

01:09:21 So I think, I mean, we didn't even talk about the speed for some of these things and there's,

01:09:26 there's a whole lot of stuff here, but.

01:09:28 There's a lot of good stories to tell about how we made some of these things,

01:09:31 the problems we had to solve to like really some of this stuff, but they'll make for,

01:09:37 you know, if I dream they'll make for good blog posts.

01:09:40 In reality, they'll probably make for good Twitter threads.

01:09:42 Yeah.

01:09:43 Yeah.

01:09:44 Absolutely.

01:09:44 All right.

01:09:45 Well, Charlie, thanks for being here.

01:09:47 Maybe give us a final thoughts and words for folks who are interested in this, this new layer of uv.

01:09:53 Yeah.

01:09:53 I mean, I think like this is, this release is really different from the previous release in

01:09:59 part, because we designed and built a lot of stuff that's pretty new for people and also requires

01:10:05 people to, to change their workflows in a lot of cases.

01:10:07 Like the previous release, it was like, this is a lot like pip.

01:10:10 So kind of just drop it in.

01:10:12 And now it's like, here's a bunch of ways to use this tools.

01:10:14 If you work, you, it does require you to work a certain way and kind of think a certain way,

01:10:18 but we think it's really powerful.

01:10:19 And that's all stuff we're like kind of trying to figure out.

01:10:23 Right.

01:10:23 So we're very eager for, you know, I'm sure, I'm sure all this stuff will change and I'm just

01:10:28 eager for like, like every release.

01:10:30 I'm just excited to have it out, have people testing it, have people using it so we can get feedback.

01:10:34 And so, you know, I, I would love for you to try it out.

01:10:38 I'd love you even more for you to come file issues about the things that don't work so we can make

01:10:42 it better and better.

01:10:42 But I think we have a really cool foundation here.

01:10:47 We can build a lot of things that hopefully make working with Python a lot, you know,

01:10:52 a lot easier in the sense that the tools kind of get out of your way rather than getting in your way.

01:10:58 So yeah, that'll be our focus for the next, for the next while is, is seeing how people are using

01:11:03 this stuff and seeing where we can make it better.

01:11:04 Well, I think it's pretty awesome what you're up to.

01:11:07 Big fan of uv.

01:11:08 So happy to see the project.

01:11:10 Thank you.

01:11:11 I appreciate it.

01:11:11 And always happy to have you on.

01:11:13 So thanks.

01:11:13 Thank you.

01:11:14 Yeah.

01:11:14 See you later.

01:11:15 Bye.

01:11:15 Bye.

01:11:16 Bye.

01:11:16 Bye.

01:11:17 This has been another episode of Talk Python to Me.

01:11:19 Thank you to our sponsors.

01:11:21 Be sure to check out what they're offering.

01:11:23 It really helps support the show.

01:11:24 This episode is sponsored by Posit Connect from the makers of Shiny.

01:11:28 Publish, share, and deploy all of your data projects that you're creating using Python.

01:11:33 Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto, Reports, Dashboards, and APIs.

01:11:39 Posit Connect supports all of them.

01:11:42 Try Posit Connect for free by going to talkpython.fm/posit.

01:11:46 Want to level up your Python?

01:11:49 We have one of the largest catalogs of Python video courses over at Talk Python.

01:11:54 Our content ranges from true beginners to deeply advanced topics like memory and async.

01:11:59 And best of all, there's not a subscription in sight.

01:12:01 Check it out for yourself at training.talkpython.fm.

01:12:04 Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:12:09 We should be right at the top.

01:12:10 You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:12:16 and the direct RSS feed at /rss on talkpython.fm.

01:12:19 We're live streaming most of our recordings these days.

01:12:23 If you want to be part of the show and have your comments featured on the air,

01:12:26 be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:12:30 This is your host, Michael Kennedy.

01:12:33 Thanks so much for listening.

01:12:34 I really appreciate it.

01:12:35 Now get out there and write some Python code.

01:12:45 I'll see you next time.

01:12:46 I'll see you next time.

01:12:47 Bye.

01:12:47 Bye.

01:12:48 Bye.

01:12:49 Bye.

01:12:50 Bye.

01:12:51 Bye.

01:12:52 Bye.

01:12:53 Bye.

01:12:54 you you you Thank you.

