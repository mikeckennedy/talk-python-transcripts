WEBVTT

00:00:00.001 --> 00:00:04.960
Peter Wang has been pushing Python forward since the early days of its data science roots.

00:00:04.960 --> 00:00:07.320
We're lucky to have him back on the show.

00:00:07.320 --> 00:00:10.520
We're going to talk about the Anaconda toolbox for Excel,

00:00:10.520 --> 00:00:14.760
as well as many other trends and topics that are hot in the Python space right now.

00:00:14.760 --> 00:00:16.960
I'm sure you're going to enjoy listening to the two of us

00:00:16.960 --> 00:00:19.080
exchange our takes on the topics and trends.

00:00:19.080 --> 00:00:24.340
This is Talk Python to Me, episode 489, recorded November 26, 2024.

00:00:24.340 --> 00:00:26.960
Are you ready for your host, please?

00:00:27.300 --> 00:00:30.600
You're listening to Michael Kennedy on Talk Python to Me.

00:00:30.600 --> 00:00:34.280
Live from Portland, Oregon, and this segment was made with Python.

00:00:34.280 --> 00:00:40.380
Welcome to Talk Python to Me, a weekly podcast on Python.

00:00:40.380 --> 00:00:42.600
This is your host, Michael Kennedy.

00:00:42.600 --> 00:00:45.440
Follow me on Mastodon, where I'm @mkennedy,

00:00:45.440 --> 00:00:50.940
and follow the podcast using @talkpython, both accounts over at fosstodon.org,

00:00:50.940 --> 00:00:55.860
and keep up with the show and listen to over nine years of episodes at talkpython.fm.

00:00:56.120 --> 00:01:00.440
If you want to be part of our live episodes, you can find the live streams over on YouTube.

00:01:00.440 --> 00:01:06.680
Subscribe to our YouTube channel over at talkpython.fm/youtube and get notified about upcoming shows.

00:01:06.680 --> 00:01:08.560
This episode is brought to you by Sentry.

00:01:08.560 --> 00:01:10.340
Don't let those errors go unnoticed.

00:01:10.340 --> 00:01:12.100
Use Sentry like we do here at Talk Python.

00:01:12.100 --> 00:01:15.540
Sign up at talkpython.fm/sentry.

00:01:15.960 --> 00:01:18.300
And this episode is brought to you by Bluehost.

00:01:18.300 --> 00:01:19.920
Do you need a website fast?

00:01:19.920 --> 00:01:20.800
Get Bluehost.

00:01:20.800 --> 00:01:26.160
Their AI builds your WordPress site in minutes, and their built-in tools optimize your growth.

00:01:26.160 --> 00:01:27.120
Don't wait.

00:01:27.120 --> 00:01:30.720
Visit talkpython.fm/bluehost to get started.

00:01:30.720 --> 00:01:32.640
Peter, welcome back to Talk Python to Me.

00:01:32.640 --> 00:01:34.180
Well, thank you so much for having me.

00:01:34.180 --> 00:01:34.940
It's great to be here.

00:01:35.360 --> 00:01:36.560
It's always good to have you.

00:01:36.560 --> 00:01:38.180
I love your perspective on things.

00:01:38.180 --> 00:01:42.640
It's always very thoughtful and fun, and I don't see why this would be any different.

00:01:42.640 --> 00:01:43.340
We're going to have a great time.

00:01:43.340 --> 00:01:45.060
I'm looking forward to the conversation very much.

00:01:45.060 --> 00:01:46.460
I am as well.

00:01:46.460 --> 00:01:53.300
So let's, you know, you've been on the show a number of times, but let's maybe just have you do a quick introduction for yourself.

00:01:53.300 --> 00:01:54.440
Just for people who don't know you.

00:01:54.440 --> 00:01:55.180
Who are you?

00:01:55.440 --> 00:01:56.440
I am, yes.

00:01:56.440 --> 00:01:58.560
So I am the co-founder at Anaconda.

00:01:58.560 --> 00:02:02.460
I also helped create the PyData movement.

00:02:02.460 --> 00:02:09.860
So really taking the Python, scientific Python numerical ecosystem into the world of data analysis and open source data science.

00:02:09.860 --> 00:02:11.580
I guess 12 years ago we started.

00:02:11.580 --> 00:02:16.700
And I've created a number of open source tools, some more popular than others.

00:02:17.060 --> 00:02:35.160
But really, I think maybe my biggest role and contribution to the ecosystem has been as sort of a community steward or as someone who's been, you know, really trying to help drive commercial adoption and really trying to make sure that there are on ramps for businesses, large scale and small scale, to adopt Python and continue using Python.

00:02:35.380 --> 00:02:48.500
And that really, a lot of my perspective there, even though, of course, many of my colleagues in the open source Python community have spent a lot of time as developers in startups and, you know, big high tech companies.

00:02:48.500 --> 00:02:59.580
One of the things that I learned early on as a consultant was that enterprises have a very, very different approach to adopting technology and open source even now can still be challenging to them.

00:02:59.580 --> 00:03:05.040
So there's a role for some of us to play in that commercialization and advocacy for open source.

00:03:05.040 --> 00:03:13.300
And, you know, 15 years ago, I was advocating for Python in, you know, rooms full of Java and .NET, very, very stodgy and angry Java and .NET architects.

00:03:13.300 --> 00:03:15.360
And now, you know, it's sort of.

00:03:15.360 --> 00:03:21.440
How could you possibly come and recommend a dynamic language for our professional software?

00:03:21.440 --> 00:03:21.820
It doesn't even have types.

00:03:21.820 --> 00:03:24.220
It's got this white space stuff.

00:03:24.220 --> 00:03:24.680
It doesn't.

00:03:24.680 --> 00:03:25.480
Do you have tabs or space?

00:03:25.480 --> 00:03:26.640
I mean, yeah, I lived.

00:03:26.640 --> 00:03:30.220
I mean, I have, you know, a thousand yard stare thinking about some of those meetings sometimes.

00:03:30.220 --> 00:03:31.940
But we prevailed.

00:03:31.940 --> 00:03:33.340
And now we have the other side.

00:03:33.340 --> 00:03:37.480
We have the flip side of the coin, which is that our little technology ecosystem has now grown up.

00:03:37.480 --> 00:03:38.400
It's crossed the chasm.

00:03:38.400 --> 00:03:41.640
And now everyone's using it, even if they don't like it.

00:03:41.640 --> 00:03:43.100
Even if they kind of hate it.

00:03:43.100 --> 00:03:46.060
They have to use it because now it's a thing everyone does use.

00:03:46.400 --> 00:03:52.200
And so conversely, so the flip side of the coin is defending Python, even when it is ubiquitous.

00:03:52.280 --> 00:04:04.700
So it's really interesting having to engage in these different dynamics of the conversation and then also trying to bring my perspective into conversations as the ecosystem matures and the cast of players is different.

00:04:05.260 --> 00:04:12.380
So it's just been, you know, honestly, I just feel a great deal of gratitude towards the community, towards many of the great people I've met.

00:04:12.380 --> 00:04:20.240
People like you, you know, I mean, how the energy it takes to run a series like you've done for as many years as you've done it.

00:04:20.240 --> 00:04:21.920
It is almost 10 years now.

00:04:21.920 --> 00:04:22.760
It's unbelievable.

00:04:22.760 --> 00:04:33.000
It's just such, it's really oftentimes very, very, it's under-recognized work, I would say, as, you know, a community advocate and as someone who elevates so many great voices in the community.

00:04:33.000 --> 00:04:44.040
And so all of us kind of in the Python tribe ecosystem, you know, we're all trying to do our best to kind of make things go, but it's just been really wonderful to see the impact that we've had.

00:04:44.040 --> 00:04:51.080
And I think a lot of the work that we did did lay the groundwork for modern machine learning and then, you know, making GPUs accessible and usable.

00:04:51.080 --> 00:05:00.440
And now Python is the language that everyone is doing AI in, you know, whether they're deep into the innards of it or not, they're writing mostly Python code to build these AI tools.

00:05:00.440 --> 00:05:02.760
And that's really been a wonderful and interesting thing to see.

00:05:02.760 --> 00:05:07.280
So anyway, that was a long-winded thing about who am I, but yes, so I am the founder.

00:05:07.280 --> 00:05:10.700
I was a CTO here at Anaconda for a while, sort of founding CTO.

00:05:10.700 --> 00:05:12.340
And then I was CEO for four years.

00:05:12.340 --> 00:05:23.120
And this year I stepped into the chief AI officer role really to try to help us explore and define what is the future of a company that's really been focused on Python coding for data science.

00:05:23.120 --> 00:05:27.020
What does that future look like in a world that is obviously being rapidly transformed by AI?

00:05:27.020 --> 00:05:27.380
Yeah.

00:05:27.380 --> 00:05:34.260
Well, you're leading one of the main data science companies for the primary language for AI in the world.

00:05:34.260 --> 00:05:36.560
So, yeah, it makes a lot of sense.

00:05:36.560 --> 00:05:37.080
That's awesome.

00:05:37.080 --> 00:05:49.840
You know, when we talked, I can't remember how many times ago, but one of the times ago we talked about bringing Python into the enterprise and sort of making it more acceptable for large companies and so on.

00:05:49.980 --> 00:05:52.080
I want to show you a graph here.

00:05:52.080 --> 00:05:54.480
I'm sure you're familiar with the TOB index.

00:05:54.480 --> 00:05:55.300
Yeah, yeah, yeah.

00:05:55.300 --> 00:05:55.740
Many people are.

00:05:55.740 --> 00:05:58.880
But I think there's something interesting here that I noticed.

00:05:58.880 --> 00:06:00.220
It just blew my mind.

00:06:00.220 --> 00:06:01.680
And I just like to get your thoughts on it.

00:06:01.680 --> 00:06:07.240
So a while ago, a couple of years ago, Python became the number one language on the TOB index, right?

00:06:07.400 --> 00:06:18.060
But what's interesting is not just that, but it is more than double the second most popular language, more than double.

00:06:18.060 --> 00:06:24.080
And so it's more than double as popular as C++ was number two, then Java, then C, then C#, then JavaScript.

00:06:24.080 --> 00:06:26.280
The most popular one of those is more than double.

00:06:26.400 --> 00:06:29.140
But here's, that's not the number that's actually most interesting to me.

00:06:29.140 --> 00:06:33.920
The more interesting number is the derivative of that, which is the rate of change.

00:06:33.920 --> 00:06:43.860
Python is growing at almost 9% year over year, where the others are like half a percent, a third of a percent, 1%, negative 3%, you know?

00:06:43.860 --> 00:06:45.200
What do you think about this?

00:06:45.200 --> 00:06:46.020
How's that sound with you?

00:06:46.020 --> 00:06:46.560
Wild, right?

00:06:47.240 --> 00:06:51.760
Well, I mean, you know, I guess, you know, congratulations, I'm sorry.

00:06:51.760 --> 00:06:57.000
Because Python, we haven't decreased the number of warts by 10% year over year, right?

00:06:57.000 --> 00:07:02.240
I mean, more and more people are learning this language, and there are some idiosyncrasies, and there is a complex ecosystem.

00:07:02.240 --> 00:07:08.340
But, you know, the real story behind this is what they're not showing is the denominator.

00:07:08.340 --> 00:07:11.340
And as I recall, TOB is based on a number of things.

00:07:11.340 --> 00:07:22.980
It's a sort of a mixed model, right, of web searches, stack overflow, which I don't know how they adjust that given, you know, modern usage of LLMs and ChatGPT and copilot and things like that.

00:07:22.980 --> 00:07:25.720
But it's a combination of all these different kinds of metrics.

00:07:25.720 --> 00:07:31.240
And I know one of the criticisms of TOB has been that, oh, it doesn't tell the whole story, right?

00:07:31.240 --> 00:07:33.020
But it certainly is a swag.

00:07:33.020 --> 00:07:37.120
And the swag has been Python's been on the uptick, on the rise.

00:07:37.120 --> 00:07:44.260
I think with the advent of, I guess, November, this month marks the two-year anniversary of ChatGPT.

00:07:44.260 --> 00:07:52.380
The number of new people coming in to making software or doing deeper things with code than they could have done before is growing.

00:07:52.380 --> 00:07:57.100
And so I think when we look at a thing like this, you know, this is the fun number.

00:07:57.100 --> 00:08:01.700
So I actually, in my PyCon keynote when I announced PyScript, I sort of asked people this question.

00:08:01.700 --> 00:08:03.720
How many software developers are there in the world?

00:08:03.720 --> 00:08:06.660
What is actually anyone who knows anything about IT in the world?

00:08:06.660 --> 00:08:16.560
Anyone who can, you know, plug in a server, knows how to boot, you know, boot disk, can write a line of SQL code, can, you know, fudge some Python or JavaScript or HTML together.

00:08:16.560 --> 00:08:20.940
Anybody who can do anything related to computers, not stare at the screen dumbfounded.

00:08:20.940 --> 00:08:23.040
What percentage of the population is that?

00:08:23.040 --> 00:08:26.620
And the swag is something like 4% of the population, right?

00:08:26.620 --> 00:08:29.280
Which in a world of 8 billion people, that's a lot of people.

00:08:29.560 --> 00:08:31.200
But that's not a lot of people.

00:08:31.200 --> 00:08:36.860
Imagine a room of 100 people, four of them know how to do anything with computers out of 100, right?

00:08:36.860 --> 00:08:39.200
Maybe one and a half know about farming.

00:08:39.200 --> 00:08:40.180
So that's even more terrifying.

00:08:40.180 --> 00:08:45.860
But we live in a computational world and about 4% of the people of the world's population are involved in IT.

00:08:46.600 --> 00:08:51.880
Now that's not, you know, normalized against developed countries versus developing countries and all this other kind of stuff.

00:08:51.880 --> 00:08:56.960
But at the end of the day, you know, we would admit that there are something on the order of tens of millions of software developers.

00:08:56.960 --> 00:09:12.760
But if we say we're going to open the doors to allow anyone to be asking a question of an interactive coding assistant to then be able to produce software, to maybe write a Kubernetes, configure a Docker file, Kubernetes YAML thing, whatever it is.

00:09:12.760 --> 00:09:19.380
You are now opening the floodgates to a 25X number of people that can do code.

00:09:19.380 --> 00:09:20.460
It won't be great code.

00:09:20.460 --> 00:09:23.260
Actually, sometimes might be better code than a junior dev could do.

00:09:23.340 --> 00:09:26.600
But nonetheless, the point is there was a lot of headroom that we're ignoring.

00:09:26.600 --> 00:09:29.280
And I think a lot of Python's growth can be attributed to that.

00:09:29.280 --> 00:09:43.760
And one of the biggest things that we found going to businesses and talking about using Python, especially for data science, was how many of them did not understand this concept of a data person who would use Python or R to do a data analysis.

00:09:43.760 --> 00:09:46.820
For them, an analyst is someone who used Excel or Tableau.

00:09:47.240 --> 00:09:50.000
And then coders are people who wrote code.

00:09:50.000 --> 00:09:56.300
And they would lump the Python data science Jupyter notebook person in with the Java nerds.

00:09:56.300 --> 00:09:58.300
And those are two very different kinds of people, right?

00:09:58.300 --> 00:10:09.440
So I think this expansion and growth of these people who code Python as a way of getting some stuff done but are not software developers, that's going to push those TOE numbers even higher.

00:10:09.800 --> 00:10:11.320
Yeah, I think so as well.

00:10:11.320 --> 00:10:12.520
It's a great observation.

00:10:12.520 --> 00:10:18.960
And there's been all these learn to code movements, trying to get kids to learn coding and stuff.

00:10:18.960 --> 00:10:20.420
And I do think those are valuable.

00:10:20.420 --> 00:10:23.520
I don't think it means we need 10x the number of software developers.

00:10:23.520 --> 00:10:25.720
But I think having programming skills is awesome.

00:10:25.720 --> 00:10:34.980
But I feel like LLMs and ChatGPT and so on, they're going to make a way bigger impact than if you took a scratch class in fifth grade, you know?

00:10:34.980 --> 00:10:35.540
Yeah.

00:10:35.540 --> 00:10:35.880
Yeah.

00:10:35.880 --> 00:10:39.060
And I, you know, there's a, well, not to get too philosophical on it, I suppose.

00:10:39.060 --> 00:10:41.840
But one of the, oh, can you hear me okay?

00:10:41.840 --> 00:10:43.640
I thought my, how did my, yeah.

00:10:44.840 --> 00:10:48.060
I don't think we need 25x more software engineers, right?

00:10:48.060 --> 00:10:51.480
Just like we teach people math, we don't need 25x more mathematicians.

00:10:51.480 --> 00:10:54.920
And we teach people English, we don't need 25x more authors.

00:10:54.920 --> 00:11:00.140
But everyone should be able to author, to do some math, to think quantitatively about the world.

00:11:00.140 --> 00:11:04.320
And with code, I think the important thing isn't, are you a scratch coder?

00:11:04.320 --> 00:11:07.260
It's do you understand how computers process information?

00:11:07.260 --> 00:11:09.800
And what is happening to your stuff, right?

00:11:09.800 --> 00:11:11.480
And how you're interacting with these things.

00:11:11.480 --> 00:11:25.280
It's really, I think that's kind of the weird moment we're going through where people really have to look at these kind of programming-like skills or knowledge of computers as a literacy or a life skill.

00:11:25.280 --> 00:11:26.680
Again, it's like learning to drive.

00:11:26.680 --> 00:11:28.460
Doesn't mean you're going to be an F1 race car driver.

00:11:28.460 --> 00:11:30.860
There's only a few dozen of those in the world.

00:11:30.860 --> 00:11:33.940
But everyone needs to know how to drive, right?

00:11:33.940 --> 00:11:37.640
So there's something about this that I think is lost when we're teaching.

00:11:37.640 --> 00:11:42.680
I think what happened is in the last 20 years, software development was in such demand.

00:11:42.680 --> 00:11:46.960
And all of those software businesses took off so much that they made so much money.

00:11:46.960 --> 00:11:48.640
So software engineers made so much money.

00:11:48.640 --> 00:11:50.540
So everyone's like, I'm going to learn how to code.

00:11:50.540 --> 00:11:52.720
So I'm going to these really sweet coding jobs.

00:11:52.720 --> 00:11:56.260
And it turns out that's not actually the thing, right?

00:11:56.260 --> 00:11:57.940
It looked like a gold rush, sort of.

00:11:58.160 --> 00:11:59.540
It was absolutely a gold rush.

00:11:59.540 --> 00:12:00.080
Yeah, absolutely.

00:12:00.080 --> 00:12:00.580
Yeah.

00:12:00.580 --> 00:12:01.100
Awesome.

00:12:01.100 --> 00:12:04.880
Well, let's talk a bit about Anaconda.

00:12:04.880 --> 00:12:11.700
First, Justin, maybe, I mean, you talked about your roles changing there, but just give us a sense of what is Anaconda.

00:12:11.700 --> 00:12:13.280
I know there's a lot of people out there listening.

00:12:13.280 --> 00:12:15.840
I'll throw it with another stat that blew me away.

00:12:16.000 --> 00:12:27.360
The PSF JetBrains Python developer survey asks all the respondents, how long have you been programming as a professional software developer in any language, not just Python?

00:12:27.360 --> 00:12:30.600
And the 50% of the respondents said less than two years.

00:12:30.600 --> 00:12:31.120
Right.

00:12:31.120 --> 00:12:31.560
Right.

00:12:31.560 --> 00:12:38.300
So a lot of the people out there listening maybe don't even know what Anaconda is, even though it's very well known within the Python space.

00:12:38.300 --> 00:12:40.700
Give us a bit about what you guys are up to these days.

00:12:40.940 --> 00:12:41.180
Yeah.

00:12:41.180 --> 00:12:49.800
So we started, I think, probably best known as the providers of the eponymous Anaconda distribution and the installers for the various packages.

00:12:50.460 --> 00:13:07.040
And really our bread and butter is building out, you know, the Python packages, maintaining a kind of a curated repository and really selling access to that to commercial businesses that want to actually have a vendor back, vendor supported source of Python packages.

00:13:07.040 --> 00:13:12.280
And for most Python packages, I mean, there's many people in the world who are very happy pip installing off PyPI.

00:13:12.280 --> 00:13:13.400
Things work great.

00:13:13.640 --> 00:13:22.620
But when you get into some of the more numerical or maybe GPU intensive packages, the way it gets built is enormously important and can sometimes be very, very challenging.

00:13:22.620 --> 00:13:29.980
So when we started Anaconda over 10 years ago, it was actually very, very hard to get those pre-built binaries installed.

00:13:29.980 --> 00:13:31.120
Now it's a little bit easier.

00:13:31.120 --> 00:13:35.800
People are rolling a lot of libraries into, you know, these big fat wheels from PyPI.

00:13:35.800 --> 00:13:38.140
And that can work pretty well in some cases.

00:13:38.140 --> 00:13:39.920
In some cases, it fails catastrophically.

00:13:39.920 --> 00:13:40.180
Right.

00:13:40.180 --> 00:13:42.640
But what we do is we provide enterprise support.

00:13:42.640 --> 00:13:58.940
We provide also just a validated and secure open source supply chain around these really important binary artifacts that then become deployed into Docker containers that become then the runtime for machine learning and data processing for, you know, very sensitive customer data and things like that.

00:13:58.940 --> 00:14:04.380
So we have a model that's very similar to what Red Hat did for Linux, right, where you can get Linux for free.

00:14:04.380 --> 00:14:05.300
You can run the free stuff.

00:14:05.300 --> 00:14:07.880
You can go and pick up packages from the free community repositories.

00:14:07.880 --> 00:14:17.700
But if you're really serious about a business runtime environment and you really want to have like, you know, a throat to throttle, so to speak, if something is not quite right, then you go and you go pay Red Hat for the annual subscription.

00:14:17.700 --> 00:14:19.640
And so we have very similar business model around that.

00:14:19.640 --> 00:14:22.280
We made the Conda package manager.

00:14:22.280 --> 00:14:25.540
But to be very clear, the Conda package manager is an open source project.

00:14:25.540 --> 00:14:29.560
So we put that into the open source and have a community around that.

00:14:29.560 --> 00:14:32.800
The Conda Forge community is the package build community around that.

00:14:33.020 --> 00:14:35.680
We host the repositories there, but those are free for everyone to use.

00:14:35.680 --> 00:14:49.080
So we really have been, you know, from a business standpoint, that's a bread and butter working with things like Microsoft Excel and working with things like Snowflake to really embed polished Python runtimes inside those computational environments.

00:14:49.080 --> 00:14:50.980
That's something we started doing a few years back.

00:14:50.980 --> 00:14:57.560
This year, I think for the most part, people's experiences of Anaconda have not changed too much, just Conda packaging, whatever.

00:14:57.900 --> 00:15:00.080
But there are a lot of things kind of happening behind the scenes, right?

00:15:00.080 --> 00:15:05.360
So we did, for instance, the Python Excel stuff, which we'll be talking about later, is a huge thing that we're very excited about.

00:15:05.360 --> 00:15:08.680
But then we've also been pushing forward on our perspectives on AI.

00:15:08.680 --> 00:15:12.100
So we know that a lot of, like I said earlier, a lot of AI is built on Python.

00:15:12.100 --> 00:15:17.720
A lot of AI relies on having the right packages and software alongside the models and whatnot.

00:15:17.720 --> 00:15:26.320
And we have a particular belief that the models will get smaller and more people want to run these models locally or close to their sensors and their data.

00:15:26.320 --> 00:15:31.820
They're not going to want to upload these into the cloud, or it's not going to be feasible because there's a lot of video streams from many different kinds of sensors.

00:15:31.820 --> 00:15:38.200
And they're going to want to have a solid software stack to run these models that they need to update and fine tune.

00:15:38.200 --> 00:15:47.000
And so really looking at ourselves as a provider of that level of the software stack for people, that's kind of what we're orienting towards.

00:15:47.000 --> 00:15:52.200
So we released a product called AI Navigator, which people can go and use to download models.

00:15:52.200 --> 00:15:54.420
We host the model repository.

00:15:54.420 --> 00:15:57.200
So we have a curated set of quantized models that we're hosting.

00:15:57.200 --> 00:16:04.920
And so people who, you know, one of the things that we got from our enterprise customers quite a bit was, hey, we like using your enterprise software package repository.

00:16:04.920 --> 00:16:08.320
We love that it's, you know, has your stamp of security approval on it.

00:16:08.320 --> 00:16:10.580
But do you have anything like that for models?

00:16:10.580 --> 00:16:14.260
Because we just right now download stuff off Hugging Face, and that's kind of okay.

00:16:14.260 --> 00:16:17.680
But like, you know, like we don't really know who quantized this.

00:16:17.680 --> 00:16:19.840
That's running arbitrary code off the internet.

00:16:19.840 --> 00:16:20.640
How could it go wrong?

00:16:20.640 --> 00:16:25.420
And, you know, not to throw shade on any of that, because an open innovation is great.

00:16:25.420 --> 00:16:29.200
But people do feel like, you know, we need something in between there.

00:16:29.200 --> 00:16:31.940
So we have both our AI Navigator, which lets you run models locally.

00:16:31.940 --> 00:16:35.080
It's similar to like if you use like LM Studio or something like that.

00:16:35.080 --> 00:16:36.800
It's a nice way to sort of get all this stuff running locally.

00:16:36.800 --> 00:16:47.840
But then you also get a, we have our model repo, which is kind of right now in an alpha stage, alpha beta stage for people if they want to run that on-prem.

00:16:47.840 --> 00:16:53.380
They can then have an on-prem model repo, and IT can actually have a view on what's getting deployed in various places.

00:16:53.380 --> 00:16:55.160
So it's a very similar kind of model.

00:16:55.260 --> 00:16:56.680
We're just kind of responding to customer needs.

00:16:56.680 --> 00:16:59.240
So there's a couple of products that we're building on the AI side.

00:17:01.040 --> 00:17:03.900
This portion of Talk Python To Me is brought to you by Sentry.

00:17:03.900 --> 00:17:05.020
Code breaks.

00:17:05.020 --> 00:17:06.320
It's a fact of life.

00:17:06.320 --> 00:17:08.460
With Sentry, you can fix it faster.

00:17:08.460 --> 00:17:14.180
As I've told you all before, we use Sentry on many of our apps and APIs here at Talk Python.

00:17:14.520 --> 00:17:19.900
I recently used Sentry to help me track down one of the weirdest bugs I've run into in a long time.

00:17:19.900 --> 00:17:20.840
Here's what happened.

00:17:20.840 --> 00:17:32.600
When signing up for our mailing list, it would crash under a non-common execution pass, like situations where someone was already subscribed or entered an invalid email address or something like this.

00:17:32.800 --> 00:17:38.600
The bizarre part was that our logging of that unusual condition itself was crashing.

00:17:38.600 --> 00:17:41.800
How is it possible for our log to crash?

00:17:41.800 --> 00:17:44.360
It's basically a glorified print statement.

00:17:44.360 --> 00:17:46.080
Well, Sentry to the rescue.

00:17:46.220 --> 00:17:52.540
I'm looking at the crash report right now, and I see way more information than you'd expect to find in any log statement.

00:17:52.540 --> 00:17:55.580
And because it's production, debuggers are out of the question.

00:17:55.580 --> 00:18:07.480
I see the traceback, of course, but also the browser version, client OS, server OS, server OS version, whether it's production or Q&A, the email and name of the person signing up.

00:18:07.480 --> 00:18:09.500
That's the person who actually experienced the crash.

00:18:09.500 --> 00:18:12.340
Dictionaries of data on the call stack and so much more.

00:18:12.340 --> 00:18:13.280
What was the problem?

00:18:13.920 --> 00:18:23.000
I initialized the logger with the string info for the level rather than the enumeration dot info, which was an integer based enum.

00:18:23.000 --> 00:18:29.580
So the logging statement would crash saying that I could not use less than or equal to between strings and ints.

00:18:29.580 --> 00:18:30.980
Crazy town.

00:18:30.980 --> 00:18:37.160
But with Sentry, I captured it, fixed it, and I even helped the user who experienced that crash.

00:18:37.160 --> 00:18:38.600
Don't fly blind.

00:18:38.600 --> 00:18:40.280
Fix code faster with Sentry.

00:18:40.280 --> 00:18:43.340
Create your Sentry account now at talkpython.fm.

00:18:43.340 --> 00:18:44.300
slash Sentry.

00:18:44.300 --> 00:18:56.660
And if you sign up with the code, TALKPYTHON, all capital, no spaces, it's good for two free months of Sentry's business plan, which will give you up to 20 times as many monthly events as well as other features.

00:18:58.260 --> 00:19:00.760
And there's a lot of other exploratory bits of AI.

00:19:00.760 --> 00:19:08.040
So we've added an AI assistant into our hosted cloud notebooks, and we've just actually added GPU support to cloud notebooks.

00:19:08.040 --> 00:19:17.040
So if you go to amicom.com and you go create an account, you have actually access to a hosted cloud notebook solution that also has access to GPUs and has a chat assistant.

00:19:17.380 --> 00:19:20.860
But the thing is that that's not, that can be a local experience as well.

00:19:20.860 --> 00:19:25.320
So if you're running Jupyter locally, you have an in-situ, you know, chat assistant right there.

00:19:25.320 --> 00:19:33.880
And that's been trained, that's our own fine tunes based on how people use Jupyter interactively, which is different than training Jupyter on a corpus of uploaded notebooks.

00:19:34.020 --> 00:19:35.520
Those are actually very different kinds of things.

00:19:35.520 --> 00:19:37.860
So those are kind of the new things we've been working on.

00:19:37.860 --> 00:19:40.020
And then, of course, there's updates to various kinds of technologies.

00:19:40.020 --> 00:19:42.600
Panel, we're doing, you know, dashboard building.

00:19:42.600 --> 00:19:44.260
PyScript continues to get better.

00:19:44.260 --> 00:19:47.960
And so, yeah, I'm probably forgetting a dozen other things.

00:19:47.960 --> 00:19:50.360
But those are kind of the highlights of the things that we've been pushing on.

00:19:50.360 --> 00:19:51.000
Yeah, yeah.

00:19:51.000 --> 00:19:56.460
And you guys also did PyScript, which we'll talk a little bit about later, potentially, if we have some time for it.

00:19:56.460 --> 00:20:00.820
What are your thoughts on this PEP 759 external wheel hosting?

00:20:01.720 --> 00:20:05.800
You refer to wheels as big, heavy, binary things.

00:20:05.800 --> 00:20:06.220
Oh, no, no.

00:20:06.220 --> 00:20:11.200
So to be very clear, wheels can be very lightweight, but they can also be very heavy.

00:20:11.200 --> 00:20:17.020
And in fact, what a lot of people who are not package maintainers, you know, I think most Python users are like,

00:20:17.020 --> 00:20:22.500
the package install part of my workflow is the least interesting and oftentimes the most painful part of my workflow.

00:20:22.500 --> 00:20:23.520
I really don't care.

00:20:23.520 --> 00:20:24.840
I just want it to work, right?

00:20:24.840 --> 00:20:30.360
And unfortunately, you know, that doesn't always go well because you end up having to get dragged into complexity.

00:20:30.920 --> 00:20:33.160
And so we're going to get into some of the complexity here.

00:20:33.160 --> 00:20:37.600
But for those who are interested, I did give a talk at PyBay just a month ago, I think.

00:20:37.600 --> 00:20:39.180
And it's up on YouTube now.

00:20:39.180 --> 00:20:41.040
It's called The Five Demons of Python Packaging.

00:20:41.040 --> 00:20:48.140
And I try to lay out for people why it is that the why is Python so screwed up in terms of the Python packaging environment?

00:20:48.140 --> 00:20:50.040
Can we just do what cargo does?

00:20:50.040 --> 00:20:51.900
Or can we just do what NPM does?

00:20:51.900 --> 00:20:53.760
Or why doesn't Go have this problem?

00:20:53.880 --> 00:20:55.000
Or what, you know, like yada, yada.

00:20:55.000 --> 00:21:02.700
And so I think there's a, I don't want to argue with people, but I want to share my context, right?

00:21:02.700 --> 00:21:03.220
In that context.

00:21:03.220 --> 00:21:03.960
Oh, this is it, right?

00:21:03.960 --> 00:21:06.160
I'll put it in the show notes for people.

00:21:06.160 --> 00:21:06.500
Yeah.

00:21:06.500 --> 00:21:06.860
Great.

00:21:06.860 --> 00:21:07.120
Yeah.

00:21:07.120 --> 00:21:13.160
My context is that there are, if you go to the very beginning of the slide, I have a picture from Gödel Escher Bach, right?

00:21:13.160 --> 00:21:15.320
The cover of the book, Gödel Escher Bach.

00:21:15.320 --> 00:21:21.820
And it shows that this block in the middle looks like the letter G, E, or B, depending on which direction you're shining the light.

00:21:21.820 --> 00:21:23.720
Many people may be familiar with this book and its cover.

00:21:23.720 --> 00:21:25.580
And that's how I think of Python packaging.

00:21:25.720 --> 00:21:29.500
I have the great misfortune of having wandered all five or six dimensions in my career.

00:21:29.500 --> 00:21:32.180
But most people experience only two or three of those dimensions.

00:21:32.180 --> 00:21:34.700
So for their perspective, it could just be this simple.

00:21:34.700 --> 00:21:35.880
Or why don't I just do that?

00:21:35.880 --> 00:21:37.660
I just homebrew my dependencies.

00:21:37.660 --> 00:21:40.520
Or I just use RPM to install these base libraries.

00:21:40.520 --> 00:21:42.200
And then I pip install these other things in a Docker.

00:21:42.200 --> 00:21:43.840
And I'm done, right?

00:21:43.840 --> 00:21:53.540
But what we have to do as maintainers and also as people who kind of cater to a broad tens of millions large user land is we have to account for all six of those dimensions.

00:21:53.980 --> 00:21:55.780
And sometimes they're not obvious to people, right?

00:21:55.780 --> 00:22:14.020
So in the case of wheels, to come back to the discussion about wheels and Barry's proposal there, the issue that many maintainers have with wheels, especially if they're maintainers of libraries that have a lot of C dependencies, is that you're stuck between a devil and a rock and a hard place.

00:22:14.020 --> 00:22:17.760
And so you have to decide, do I bundle all these dependencies in?

00:22:17.860 --> 00:22:27.820
In which case, I own the compatibility issues and I own the security issues that come with having bundled in a bunch of C libraries or C++ libraries.

00:22:27.820 --> 00:22:32.160
If I don't bundle them in, then users are kind of stuck trying to install this thing, right?

00:22:32.400 --> 00:22:36.980
And so what we find is that for some libraries, it's okay.

00:22:36.980 --> 00:22:39.040
For other libraries, it's very difficult.

00:22:39.040 --> 00:22:43.880
And the Python ecosystem, I think, ultimately still does not have a great solution to this.

00:22:43.880 --> 00:22:55.340
And wheels, as you know, the way that the PyPA and the pip maintainers and other people we've talked to over the years, they really want to think of the packaging problem as a Python packaging problem.

00:22:55.340 --> 00:23:03.640
And with Conda, because it was built, it was purpose built for the scientific Python ecosystem, we knew from the outset that our problem was bigger than Python.

00:23:03.640 --> 00:23:06.960
In fact, most of our problem was packaging stuff that wasn't Python.

00:23:06.960 --> 00:23:09.100
The Python bits were trivial almost, right?

00:23:09.100 --> 00:23:11.840
But it's the, you know, what version of Clang?

00:23:11.840 --> 00:23:13.560
What C++ ABI do you use?

00:23:13.560 --> 00:23:15.660
What version of this do you link?

00:23:15.660 --> 00:23:17.960
And what flags do you turn on when you invoke GCC here?

00:23:17.960 --> 00:23:22.940
When you go and you compile something and all of that, not only are you including all the C libraries,

00:23:22.940 --> 00:23:30.940
you're also inheriting all of the design, sorry, the configuration options of the build tool chain at compile time.

00:23:30.940 --> 00:23:35.160
It's an enormously complex thing that ends up getting wrapped up into a single wheel, right?

00:23:35.160 --> 00:23:39.280
So with Conda, these are represented explicit dependencies with feature flags.

00:23:39.280 --> 00:23:44.800
And you can then sort of do this package sort of dependency solver, which of course is, you know, good and bad.

00:23:44.800 --> 00:23:47.760
If it's, you know, the ecosystem is too big, the solve takes too long.

00:23:47.760 --> 00:23:52.520
But then if you don't do that solve, then you just run into stochastic and irreproducible installations.

00:23:53.040 --> 00:23:53.820
So what do you do, right?

00:23:53.820 --> 00:24:00.200
So this proposal, but specifically about this proposal that Barry's put out there, this is, I think, meant to address,

00:24:00.200 --> 00:24:02.180
and he works now at NVIDIA.

00:24:02.180 --> 00:24:07.620
And people who've had to deal with GPU packages know that the CUDA libraries can be quite large.

00:24:07.620 --> 00:24:08.940
They get pretty big.

00:24:08.940 --> 00:24:13.520
And they are somewhat of a tax on the hosting infrastructure, on the CDN there for PyPI.

00:24:13.520 --> 00:24:22.560
And so the limits that PyPI has imposed makes it difficult for them to kind of have increasingly larger packages and all these like nightly bills that they want to upload.

00:24:22.560 --> 00:24:25.300
So this proposal is, can we split this out?

00:24:25.300 --> 00:24:26.460
These RIM files.

00:24:26.460 --> 00:24:30.760
And so we put a placeholder in place on PyPI, and then put the actual package over here, right?

00:24:30.760 --> 00:24:31.200
Right.

00:24:31.200 --> 00:24:36.280
If NVIDIA wants to ship a 400 meg pip installable package, let them host it.

00:24:36.280 --> 00:24:37.040
Right.

00:24:37.040 --> 00:24:37.800
Something like that, right?

00:24:38.040 --> 00:24:38.480
That's right.

00:24:38.480 --> 00:24:45.960
And so this gets to one of the demons I mentioned, which is that a repository is not the same as a distribution,

00:24:45.960 --> 00:24:48.360
and it's not the same as an FTP site or a Dropbox.

00:24:48.360 --> 00:24:50.040
These are actually very different things.

00:24:50.040 --> 00:24:55.680
And I have not actually commented officially on this on the discourse at all.

00:24:55.680 --> 00:24:59.520
I've had some private conversations with people, but I might as well, since you asked.

00:24:59.520 --> 00:25:07.680
My thought is that this is not a bad idea, but the challenge is we are going to go down a path, essentially,

00:25:07.680 --> 00:25:09.960
of having to solve the cap theorem.

00:25:09.960 --> 00:25:10.380
Okay.

00:25:10.380 --> 00:25:13.980
What I mean by that is if you view PyPI, like what is PyPI?

00:25:13.980 --> 00:25:16.500
Is it a Dropbox where anyone could just upload whatever?

00:25:16.500 --> 00:25:17.200
Okay.

00:25:17.200 --> 00:25:23.440
But the problem there is if someone installs something today and they try to install again tomorrow or two weeks from now,

00:25:23.440 --> 00:25:25.920
they're going to generally want the same kinds of things.

00:25:25.920 --> 00:25:32.800
And if it's just a Dropbox, then no one is responsible for providing a stable snapshot of what points to what

00:25:32.800 --> 00:25:34.480
and what is what even.

00:25:34.480 --> 00:25:40.100
Because in the space of even an hour or two on something as large as PyPI, you can have updates.

00:25:40.100 --> 00:25:42.360
You can have updates of versions of the different build strings.

00:25:42.360 --> 00:25:47.260
All people can yank a file because, oh my God, I bought the build on that and so on and so forth.

00:25:47.260 --> 00:25:49.760
So if you view it just as a Dropbox, that's okay.

00:25:49.920 --> 00:25:56.720
But then all the work of consistency and reproducibility gets foisted onto the install tools, the client-side tools.

00:25:56.720 --> 00:26:01.120
Whether it's UV, whether it's pip, whether it's Poetry, PyM, you name it.

00:26:01.120 --> 00:26:03.920
Hatch, PDM, Poetry, all these wonderful tools.

00:26:03.920 --> 00:26:04.580
Anaconda, too.

00:26:04.580 --> 00:26:05.440
I should put that out there, right?

00:26:05.440 --> 00:26:07.440
Everyone is trying to solve this problem.

00:26:07.440 --> 00:26:13.300
And the question is, is the repository host going to solve the atomic sort of state view?

00:26:13.300 --> 00:26:15.680
Or is the client going to have to piece it together somehow?

00:26:15.840 --> 00:26:23.540
And then the reason I mentioned the cap theorem is if you say, okay, we should pretend that it's somewhat of a stable repository, not just a Dropbox.

00:26:23.540 --> 00:26:28.940
But as a repository, that means that there's a snapshot of things at a state in time, the metadata.

00:26:28.940 --> 00:26:29.900
Well, okay.

00:26:29.900 --> 00:26:34.740
But if you allow for some of these packages to be hosted over here, now you have a distributed database.

00:26:34.740 --> 00:26:36.340
You have a distributed object database.

00:26:36.340 --> 00:26:37.920
Massively distributed.

00:26:37.920 --> 00:26:39.180
Massively distributed.

00:26:39.180 --> 00:26:44.040
And NVIDIA, obviously, as a trillion-dollar company, can keep up a CDN.

00:26:44.040 --> 00:26:44.300
Okay?

00:26:44.500 --> 00:26:46.680
But they cannot avoid net splits.

00:26:46.680 --> 00:26:50.860
They cannot avoid a backhoe in Reston nuking a fiber line somewhere, right?

00:26:50.860 --> 00:26:59.060
You cannot avoid the kinds of things that happen that cause a distributed network database to suffer consistency problems.

00:26:59.060 --> 00:27:01.360
So now someone building a Docker.

00:27:01.360 --> 00:27:12.480
And when you're looking at something as important as the CUDA-oriented libraries, the RAPID libraries, these, like, really important foundational GPU libraries, people are pulling these to the tune of thousands and thousands per second.

00:27:12.700 --> 00:27:14.980
So you have got to make sure you're consistent all the time.

00:27:14.980 --> 00:27:20.200
Otherwise, someone's production Docker build falls back on an old version because they couldn't get the most recent one.

00:27:20.200 --> 00:27:22.180
Or a time, I mean, in the best case, it times out.

00:27:22.180 --> 00:27:22.980
It complains loudly.

00:27:22.980 --> 00:27:25.800
The worst case, it fails silently and falls back.

00:27:25.800 --> 00:27:29.600
And whatever client-side tool they're using then says, well, I can't get that, so I'm going to solve this way.

00:27:29.600 --> 00:27:30.880
I'm going to solve this other thing over here.

00:27:30.880 --> 00:27:36.300
They pick up an old version, and now you have, whatever reason, your model build deployment doesn't work, right?

00:27:36.300 --> 00:27:36.580
Right.

00:27:36.580 --> 00:27:41.060
Maybe you picked up a regression equivalent of a bug that you know is fixed in the new one.

00:27:41.060 --> 00:27:43.020
You asked for the new one, but you didn't get the new one.

00:27:43.020 --> 00:27:43.880
You didn't get the new one.

00:27:43.880 --> 00:27:52.160
And so the point is, the reason I cite the cap theorem is at some point, a package hosting site like this has to decide, is it just a Dropbox?

00:27:52.160 --> 00:27:53.260
Is it a repository?

00:27:53.260 --> 00:27:53.920
Right.

00:27:53.920 --> 00:28:01.580
And if it's the latter, then it has to offer an atomic and consistent, verifiable view of the metadata.

00:28:01.880 --> 00:28:10.520
That's what with Conda, we have a thing called RepoData.json, and it is a big fat file, and it is basically the snapshot of the repository, and it is transactional.

00:28:10.520 --> 00:28:15.500
So you get the whole thing, and then you can do the solve and say, I want these pieces, and then you go get those pieces.

00:28:15.500 --> 00:28:21.640
So from a design standpoint, architect standpoint, it's not that complicated, but it is a different, it's a design difference.

00:28:21.640 --> 00:28:27.960
Then when you think about pip installing off PyPI, it is eager and opportunistic, let's say, right?

00:28:27.960 --> 00:28:31.740
So it goes, tries to install a thing, it grabs that, looks through it and says, oh, I need these things.

00:28:31.740 --> 00:28:32.560
It goes and grabs those things.

00:28:32.560 --> 00:28:40.940
And so over the course of a multi-second long or maybe in a multi-minute long install, you don't actually get a consistent view of the repository.

00:28:40.940 --> 00:28:46.480
And so with this, this now says, really stresses the question.

00:28:46.480 --> 00:28:54.400
I think what the RIM proposal does, it really forces the question of, is PyPI a repository or is it a hosting site?

00:28:54.400 --> 00:28:59.540
Like Sunsite thought, yeah, FTP at Sunsite.edu back in the day, and you just go grab whatever and good luck.

00:28:59.540 --> 00:29:04.640
And all of that complexity of consistency is then the responsibility of the client side tools to manage.

00:29:04.640 --> 00:29:06.600
That is the design decision you can make, right?

00:29:06.600 --> 00:29:12.960
Yeah, I hadn't even thought about it from a reproducibility science or even just old applications perspective.

00:29:12.960 --> 00:29:14.340
That's pretty interesting to think about.

00:29:14.340 --> 00:29:28.400
If I read this, Pep, I don't recall if it talked about a backup that would allow the PyPA to create some kind of snapshot that says, even if those mirrors went away, this is the reality of things, right?

00:29:28.400 --> 00:29:34.940
I mean, it's one thing to say, well, let's let NVIDIA handle the 100 megabyte download request a thousand times a second.

00:29:34.940 --> 00:29:42.340
But we got a copy of it, and if that fails, we can switch over to our version versus let's let them hold that part.

00:29:42.340 --> 00:29:44.240
And if it fails, it's just gone.

00:29:44.240 --> 00:29:46.260
And there's nothing but an empty RIM.

00:29:46.260 --> 00:29:46.900
There's no wheel.

00:29:46.900 --> 00:29:47.720
Right.

00:29:47.720 --> 00:29:49.040
But consider this.

00:29:49.400 --> 00:30:00.220
If I discover a zero day in one of those things, and by the way, these things are low-level libraries that touch kernel space things and things in the driver, and they touch memory, and there's all these things.

00:30:00.220 --> 00:30:05.000
And there are real implications on this kind of stuff.

00:30:05.000 --> 00:30:10.380
So let's say there's a zero day where I have some hack, and NVIDIA, because they were notified of it, they patched it.

00:30:10.380 --> 00:30:11.620
But you have a fallback.

00:30:11.760 --> 00:30:18.260
And if I somehow managed to block your ability to resolve or to access that, now you're still picking up the old stuff.

00:30:18.260 --> 00:30:20.600
And you're building those into your Docker, right?

00:30:20.600 --> 00:30:22.040
So it's not just availability.

00:30:22.040 --> 00:30:25.420
This is why it's not just availability and fallback.

00:30:25.420 --> 00:30:26.580
It is consistency.

00:30:26.580 --> 00:30:29.520
So that when you push an update, it forces an update, right?

00:30:29.520 --> 00:30:29.980
Right.

00:30:29.980 --> 00:30:37.120
So when I said I thought there'd be some kind of backup fallback, in my mind, I don't even know that this isn't the pepper that it's addressed at all.

00:30:37.120 --> 00:30:45.920
It maybe, I don't recall that it is, is before PyPI allows it to be listed as a new version, they've downloaded a local copy, and they've got the new one.

00:30:45.920 --> 00:30:47.960
They're not going to serve it to you, but they have it.

00:30:47.960 --> 00:30:48.440
You know what I mean?

00:30:48.440 --> 00:30:48.940
Yeah.

00:30:48.940 --> 00:30:53.200
It's going to be interesting to see if this gets accepted and what implications there are.

00:30:53.200 --> 00:31:01.820
But on the other hand, the flip side is it's also scary that pip and PyPI have over $100,000 of donated bandwidth.

00:31:01.820 --> 00:31:06.460
And if that donation ever stops, all of a sudden, out of the blue, we'd also be in a world of hurt, right?

00:31:06.540 --> 00:31:12.300
And so if we could distribute that risk a little, which I think is the purpose of this, Pep, that's helpful.

00:31:12.300 --> 00:31:12.640
Yeah.

00:31:12.640 --> 00:31:13.160
Yeah.

00:31:13.160 --> 00:31:15.640
I think it would be interesting to solve that problem.

00:31:15.640 --> 00:31:22.100
I like to solve technical problems at the technical level and economic problems at the economic level, right?

00:31:22.100 --> 00:31:28.400
And so conflating these two can lead to, I think, it muddles things a bit.

00:31:28.620 --> 00:31:37.720
So the question is, what is a good design for a distributed, high-performance, but consistent and secure repository?

00:31:37.720 --> 00:31:41.260
Well, that is traditional CDN.

00:31:41.260 --> 00:31:42.820
I mean, it's not really that hard of a problem.

00:31:42.820 --> 00:31:45.320
It's been solved many times by many different kinds of people, right?

00:31:45.320 --> 00:31:48.480
Whether it's Windows update, Apple update, whether it's like what we do with Conda.

00:31:48.520 --> 00:31:56.360
You put a CDN in front of a consistent sort of index, and you force that kind of consistent index, and you do that.

00:31:56.360 --> 00:31:56.920
And that's okay.

00:31:56.920 --> 00:31:57.600
That's what you do.

00:31:57.600 --> 00:32:00.540
Now, how you fund that is a different question, right?

00:32:00.540 --> 00:32:01.900
And so it could be we fund.

00:32:02.040 --> 00:32:12.880
We just put all the money into the PyPA or some PSF delegate organization that goes and just runs a packaging thing, some consortium that people donate into.

00:32:12.880 --> 00:32:14.880
I mean, $100,000 a month.

00:32:14.880 --> 00:32:18.500
Yeah, I mean, look, the Conda repos cost more than that.

00:32:18.500 --> 00:32:20.280
We ship a lot of binaries, right?

00:32:20.280 --> 00:32:26.540
So I think the bandwidth costs maybe more than what you're citing, actually, for PyPI because it's much more popular in Conda.

00:32:26.820 --> 00:32:33.040
But at the end of the day, it is something on the order of a few million dollars a year, I think, in CDN equivalent costs.

00:32:33.040 --> 00:32:39.360
And when you look at how many people use it in the world and depend on it, there is that budget available in the world.

00:32:39.360 --> 00:32:47.320
So the fact that we as a community don't know how to talk to the businesses that depend on it to get those dollars, that's our problem.

00:32:47.320 --> 00:32:53.660
That's not really because businesses spend more than that on marketing parties, launch parties for random crap, right?

00:32:53.660 --> 00:32:54.060
Yeah.

00:32:54.160 --> 00:33:02.700
We have infrastructure that powers the world, and we as a volunteer kind of community of people who love Python can't figure out how to have a conversation with them to get a few more million dollars out of them.

00:33:02.700 --> 00:33:03.780
That's our problem.

00:33:03.780 --> 00:33:04.900
How do we get better at that?

00:33:04.900 --> 00:33:05.500
Yeah.

00:33:05.500 --> 00:33:06.260
Yeah, for sure.

00:33:06.260 --> 00:33:07.800
Well, let's just go back to BitTorrent.

00:33:07.800 --> 00:33:10.100
All right.

00:33:10.100 --> 00:33:14.900
Speaking of companies that have some money to work with, let's talk Excel.

00:33:14.900 --> 00:33:16.800
Let's talk about Excel.

00:33:16.800 --> 00:33:17.040
Yeah.

00:33:17.040 --> 00:33:22.100
Literally, it's the tool that probably processes the most financial numbers in the world, you know?

00:33:22.300 --> 00:33:30.120
You know, it is ironic that you mentioned this now because you brought up TOB, and I would say Excel is the dominant programming environment in the world.

00:33:30.120 --> 00:33:30.620
Yeah.

00:33:30.620 --> 00:33:31.820
And Excel didn't make the list.

00:33:31.820 --> 00:33:33.120
Didn't make the list.

00:33:33.120 --> 00:33:34.060
Didn't make the list.

00:33:34.060 --> 00:33:34.860
Maybe it should.

00:33:34.860 --> 00:33:36.520
I should go talk to the TOB editors.

00:33:36.520 --> 00:33:43.080
If it's not the most popular programming thing, it probably is the most widely deployed database.

00:33:43.080 --> 00:33:44.000
Yes.

00:33:44.000 --> 00:33:49.480
It is the world's most popular database, the world's most popular computational environment, the world's most popular programming environment.

00:33:49.480 --> 00:33:49.740
Yeah.

00:33:49.740 --> 00:33:58.620
Because it actually was the last one of the things from the 70s and 80s with, like, end user computing and programming for everyone.

00:33:58.620 --> 00:34:02.220
This was one of the last great tools, you know, the spreadsheet.

00:34:02.620 --> 00:34:06.860
So normal people, muggles, could approach this and put computational things together.

00:34:08.720 --> 00:34:11.740
This portion of Talk Python to Me is brought to you by Bluehost.

00:34:11.740 --> 00:34:15.020
Got ideas, but no idea how to build a website?

00:34:15.020 --> 00:34:16.140
Get Bluehost.

00:34:16.140 --> 00:34:22.640
With their AI design tool, you can quickly generate a high-quality, fast-loading WordPress site instantly.

00:34:22.640 --> 00:34:26.320
Once you've nailed the look, just hit enter and your site goes live.

00:34:26.320 --> 00:34:27.340
It's really that simple.

00:34:27.720 --> 00:34:31.900
And it doesn't matter whether you're a hobbyist, entrepreneur, or just starting your side hustle.

00:34:31.900 --> 00:34:38.980
Bluehost has you covered with built-in marketing and e-commerce tools to help you grow and scale your website for the long haul.

00:34:38.980 --> 00:34:41.420
Since you're listening to my show, you probably know Python.

00:34:41.420 --> 00:34:48.920
But sometimes it's better to focus on what you're creating rather than a custom-built website and add another month until you launch your idea.

00:34:48.920 --> 00:34:57.480
When you upgrade to Bluehost Cloud, you get 100% uptime and 24-7 support to ensure your site stays online through heavy traffic.

00:34:58.340 --> 00:35:01.340
Bluehost really makes building your dream website easier than ever.

00:35:01.340 --> 00:35:02.600
So what's stopping you?

00:35:02.600 --> 00:35:03.900
You've already got the vision.

00:35:03.900 --> 00:35:04.660
Make it real.

00:35:04.660 --> 00:35:09.600
Visit talkpython.fm/bluehost right now and get started today.

00:35:09.600 --> 00:35:12.120
And thank you to Bluehost for supporting the show.

00:35:12.120 --> 00:35:15.600
But it has limited expressiveness.

00:35:15.600 --> 00:35:22.020
Well, I don't mean that in a mean way, but just to say that people, you know, you don't really want to see hundreds of lines of Excel.

00:35:22.020 --> 00:35:23.620
Like, that's kind of a terrifying thing, right?

00:35:23.700 --> 00:35:28.080
Because it is a very much an immediate mode data transformation kind of language.

00:35:28.080 --> 00:35:36.080
And so the Anaconda Toolbox for Excel is there to complement the Python support that just recently got added to Excel.

00:35:36.080 --> 00:35:37.120
And that's GA now.

00:35:37.120 --> 00:35:39.380
Yeah, I was going to say, let's start there, actually.

00:35:39.380 --> 00:35:40.220
Sure, sure.

00:35:40.220 --> 00:35:41.740
Because why does this exist?

00:35:41.740 --> 00:35:44.040
Didn't Microsoft just add Python to Excel?

00:35:44.040 --> 00:35:44.860
Yes.

00:35:45.140 --> 00:35:47.280
So that's worth talking about, right?

00:35:47.280 --> 00:35:53.880
So Excel on Windows has support for Python in the formula bar.

00:35:53.880 --> 00:36:03.240
So if you have Windows and you run Excel, you can type equals PY in the formula bar and start punching in Python code, multiple line Python code.

00:36:03.240 --> 00:36:07.800
You can refer to cell ranges, and it will spill your data frames into the grid.

00:36:07.800 --> 00:36:09.120
You can chart things.

00:36:09.520 --> 00:36:11.060
It's insane that we're here.

00:36:11.060 --> 00:36:12.680
Like, it's amazing that works, okay?

00:36:12.680 --> 00:36:16.100
Now, the way that works is it analyzes your code.

00:36:16.100 --> 00:36:27.440
It actually looks at the range references and the cell reference and everything else, pulls all that data and your code, and it sends it over the wire to Azure Confidential Compute, which is an extra secure, extra lockdown version of Azure.

00:36:27.900 --> 00:36:32.380
And it runs the code there on a customized Anaconda environment that we built for that.

00:36:32.380 --> 00:36:37.680
So you have access to a lot of the data tools that you would expect, pandas, matplotlib, things like that.

00:36:37.680 --> 00:36:41.820
So you do all that stuff, and then it comes back, and then it sort of renders in the grid.

00:36:41.820 --> 00:36:49.880
So the computational environment doesn't have access to your full spreadsheet, and it also doesn't have access to the internet.

00:36:50.180 --> 00:36:54.460
So there's no risk of data leakage and loss and things like that or tampering.

00:36:54.460 --> 00:36:55.640
So in any case...

00:36:55.640 --> 00:37:02.460
It probably also doesn't have access to your local file system if you've got other things to pull in or you want to write a Python file and import it as a module.

00:37:02.460 --> 00:37:03.140
None of that, right?

00:37:03.140 --> 00:37:03.940
Exactly.

00:37:03.940 --> 00:37:04.540
Exactly.

00:37:04.540 --> 00:37:09.180
And you've served as a wonderful straight man for me here because that is a bit of a limitation.

00:37:09.180 --> 00:37:19.440
So the pluses are, number one, it's built in, and it runs the full-on Anaconda install on the Azure Confidential Compute.

00:37:19.840 --> 00:37:23.520
So you have access to the bona fide packages and whatnot for doing data analysis.

00:37:23.520 --> 00:37:25.620
The downside is there's no access to the internet.

00:37:25.620 --> 00:37:27.780
There's no access to your local file system, things like that.

00:37:27.780 --> 00:37:30.580
You have to sort of load those into Excel and then punch that data over.

00:37:30.580 --> 00:37:34.980
So to complement that, we created this thing that we call the Anaconda Toolbox.

00:37:34.980 --> 00:37:48.380
And so that is actually a WebAssembly-based plugin for Microsoft Excel, and it runs on the Mac version of Excel as well, and it runs locally.

00:37:48.600 --> 00:37:55.820
So it is an Anaconda WebAssembly sort of environment hosted inside a plugin for Excel.

00:37:55.820 --> 00:38:06.520
So that then has sort of richer access to things, but it is limited in that only those libraries that we cross-compiled into WebAssembly can work in there.

00:38:06.520 --> 00:38:12.500
That being said, you can use sort of a pip install, install pure Python packages into that environment.

00:38:13.060 --> 00:38:22.460
And you can also then, you know, one of the interesting things that we heard from people was that they, look, they could be a Microsoft shop.

00:38:22.460 --> 00:38:23.900
They trust, of course, they trust Azure.

00:38:23.900 --> 00:38:25.020
They trust Microsoft.

00:38:25.240 --> 00:38:31.440
But they just have an IT policy where they're not allowed to sort of, they don't want the risk at all of the data leaving their local machine.

00:38:31.440 --> 00:38:33.560
And this would run everything local.

00:38:33.560 --> 00:38:38.580
It's just running everything local on your laptop or on your workstation directly inside the grid.

00:38:38.580 --> 00:38:42.180
And we're working, I mean, the Excel team knows we're doing this.

00:38:42.180 --> 00:38:44.020
They like seeing some things we're doing here.

00:38:44.460 --> 00:38:51.900
And the scope here is that actually with this, we can explore features and run a little bit ahead of where the built-in Excel capability is.

00:38:51.900 --> 00:38:59.560
So they have, they sort of have a way to sort of almost not quite A-B test, but see what kind of features are good and what features are not as interesting.

00:38:59.560 --> 00:39:03.300
And they can then eventually over time, I think, roll those into the mainline Excel support.

00:39:03.300 --> 00:39:10.700
Because when you have a product like Excel that's relied upon by so many people, you actually are limited in how fast you can move and in what things you can roll in.

00:39:10.700 --> 00:39:13.640
Because once you put a thing in, you really can't take it out, right?

00:39:13.800 --> 00:39:15.520
It's almost like a programming language, yeah.

00:39:15.520 --> 00:39:19.960
It's a really important thing that people make billion-dollar decisions based on the values popping out of those cells.

00:39:19.960 --> 00:39:26.680
So it's really important that that team is able to focus on the stability and have a very refined user experience.

00:39:26.680 --> 00:39:29.560
For us, we can move a little faster, try different kinds of things.

00:39:29.560 --> 00:39:42.460
So one of the things that we're really exploring and one of the things I'm hoping will come out of this Excel work is that we will see much more cross-team collaboration between data science kind of folks and business analysts and other kind of stakeholders.

00:39:43.140 --> 00:39:46.920
who may themselves not be writing Python or not be very familiar with Python.

00:39:46.920 --> 00:39:56.140
But using our toolbox, one of the things we have in there are simple ways to share code snippets and simple ways to share new kinds of data sources.

00:39:56.140 --> 00:40:11.920
And to have really a lot of ways to make simple dashboards and visualizations that then essentially turn your Excel spreadsheet from not just a database and a computational environment, but into a full-on application deployment environment.

00:40:11.920 --> 00:40:24.200
So for data scientists, you know, one thing I've heard a lot over the years from data science folks is that they turn into service providers for their teams where they're just being asked for new Excel outputs every single week.

00:40:24.440 --> 00:40:29.540
Or every couple of weeks, they come back around and say, hey, that was great what you did with all your magic code stuff.

00:40:29.540 --> 00:40:31.600
But can you rerun that analysis?

00:40:31.600 --> 00:40:36.060
But this way and email me the, you know, email me the CSV of the spreadsheet.

00:40:36.060 --> 00:40:41.040
And so with this, you can now deploy your code forward into a spreadsheet.

00:40:41.040 --> 00:40:43.180
That's then the live forward deployed thing.

00:40:43.180 --> 00:40:47.160
It can pull from a Jupyter notebook that you have running and hosted.

00:40:47.160 --> 00:40:56.180
And then you actually are using this to deploy a live version of a self-service data environment analysis environment for your business stakeholders.

00:40:56.180 --> 00:41:00.820
So create almost an API for your data that Excel is the front end.

00:41:00.820 --> 00:41:10.300
You turn your notebooks into APIs and then your end users are using Excel, which is their native environment, as a way to hit that API to generate really quick visualizations.

00:41:10.300 --> 00:41:12.500
We have a built-in, you know, LLM chat.

00:41:12.500 --> 00:41:15.520
So you can ask for new kinds of this and tweak plots this way and that way.

00:41:15.520 --> 00:41:18.280
And when you like what you've got, you can share it as a snippet to other people.

00:41:18.280 --> 00:41:20.640
So that's a really powerful modality.

00:41:20.640 --> 00:41:22.280
We believe that's a very powerful modality.

00:41:22.280 --> 00:41:25.900
But this is the kind of feature which we want to get out there.

00:41:25.900 --> 00:41:27.280
A lot of people play with it.

00:41:27.280 --> 00:41:28.060
We'll tweak it.

00:41:28.060 --> 00:41:34.500
And then once it gets really dialed in, then that's something which the Excel team might look at and say, oh, yeah, that's kind of what it should look like.

00:41:34.500 --> 00:41:36.700
Now let's go and build this into Excel itself.

00:41:36.700 --> 00:41:41.640
Let's go build this into native SharePoint and Outlook and other kinds of, you know, things.

00:41:41.640 --> 00:41:44.420
So anyway, that's kind of the point of it.

00:41:44.420 --> 00:41:49.440
But we're really super excited about all the kinds of innovation that can happen in this toolbox.

00:41:49.440 --> 00:41:53.200
But we really rely on end users, right, to give us that kind of feedback.

00:41:53.660 --> 00:41:58.900
What do you do at the notebook level to make it hosted and accessible as an API?

00:41:58.900 --> 00:42:01.160
Is that just straight Jupyter or is there something more interesting?

00:42:01.160 --> 00:42:02.240
Yeah, no, it's straight Jupyter.

00:42:02.240 --> 00:42:07.160
But if you hosted that, and so all of this sort of to get access to the toolbox, you need to just create an Anaconda.

00:42:07.160 --> 00:42:08.980
It's a free Anaconda cloud account.

00:42:08.980 --> 00:42:14.240
And then the notebooks are going to be the ones hosted in your Anaconda cloud account.

00:42:14.340 --> 00:42:16.100
And then the snippets are also there.

00:42:16.100 --> 00:42:19.260
So everything is sort of shared through your Anaconda account, right?

00:42:19.260 --> 00:42:23.480
And so then your friends who are using this can just reference that and drop that in.

00:42:23.480 --> 00:42:25.140
And then they're able to use the code.

00:42:25.140 --> 00:42:26.680
Yeah, that sounds pretty awesome.

00:42:26.680 --> 00:42:29.280
Are you able to, you know, you said it's based on WebAssembly.

00:42:29.280 --> 00:42:35.620
Are you able to create your own packages as WebAssembly things or pip install things?

00:42:35.620 --> 00:42:37.520
You can pip install things.

00:42:37.520 --> 00:42:38.980
Yes, you can pip install things.

00:42:38.980 --> 00:42:39.380
Absolutely.

00:42:39.380 --> 00:42:42.580
That's the, that's also the power of this is that you can kind of go a little nuts.

00:42:42.580 --> 00:42:43.580
It is a little bit Wild West.

00:42:43.580 --> 00:42:45.380
So definitely use with caution.

00:42:45.380 --> 00:42:49.980
There are a lot of foot guns, but, but again, as a plugin, we can do more of that exploration

00:42:49.980 --> 00:42:54.320
and find out where, where people, where the comfort level is, both for individual users,

00:42:54.320 --> 00:42:55.680
as well as for organizations.

00:42:55.680 --> 00:42:56.260
Right.

00:42:56.260 --> 00:43:01.340
And, and we do have, I do want to plug that we have a webinar coming up.

00:43:01.340 --> 00:43:05.500
It'll be exactly when it is, but we have a webinar coming up.

00:43:05.500 --> 00:43:10.940
around using, using the assistant and all that.

00:43:10.940 --> 00:43:15.140
And I should have been prepared with that information before mentioning it.

00:43:15.140 --> 00:43:15.980
No worries.

00:43:15.980 --> 00:43:17.760
I'll tell you what, let's put it in the show notes.

00:43:17.760 --> 00:43:18.400
Send it to me.

00:43:18.400 --> 00:43:19.140
Put the show notes.

00:43:19.140 --> 00:43:19.380
Yeah.

00:43:19.380 --> 00:43:19.740
Yeah.

00:43:19.740 --> 00:43:19.860
Yeah.

00:43:19.860 --> 00:43:20.480
Yeah.

00:43:20.480 --> 00:43:20.960
Awesome.

00:43:20.960 --> 00:43:26.740
So a question from Dennis in the audience, someone who it sounds like is really in the

00:43:26.740 --> 00:43:28.580
know for these things, asking this sort of question.

00:43:28.580 --> 00:43:28.980
Yes.

00:43:28.980 --> 00:43:29.260
Okay.

00:43:29.260 --> 00:43:30.580
So Anaconda Toolbox.

00:43:30.580 --> 00:43:32.200
Let me read it for the people who are not watching.

00:43:32.200 --> 00:43:35.100
Anaconda Toolbox for Excel, which kind of licenses?

00:43:35.300 --> 00:43:39.220
That are needed to make use of this combination in an O365 environment.

00:43:39.220 --> 00:43:39.660
Right.

00:43:39.660 --> 00:43:41.780
So Office 365 right now, right?

00:43:41.780 --> 00:43:44.320
Doesn't support the, the built-in Excel stuff.

00:43:44.320 --> 00:43:46.840
Cause that's again, just for Excel on windows.

00:43:46.840 --> 00:43:51.320
And so you can use Anaconda Toolbox inside there and the toolbox.

00:43:51.320 --> 00:43:53.400
It is it's free, free to use.

00:43:53.560 --> 00:43:57.120
We will have sort of some upgraded and premium features built into that, but you just need

00:43:57.120 --> 00:44:00.680
to create an Anaconda cloud login or create a cloud account.

00:44:00.680 --> 00:44:01.980
And then you should be able to use that.

00:44:01.980 --> 00:44:05.300
So if you just have any version of Excel, you don't need things special.

00:44:05.300 --> 00:44:07.300
The Office 365 version of Excel, right?

00:44:07.300 --> 00:44:07.980
That's like the web.

00:44:07.980 --> 00:44:09.840
That's the, the web hosted.

00:44:09.840 --> 00:44:10.380
I see.

00:44:10.380 --> 00:44:10.800
Got it.

00:44:10.800 --> 00:44:11.220
Got it.

00:44:11.220 --> 00:44:11.320
Got it.

00:44:11.320 --> 00:44:11.400
Got it.

00:44:11.400 --> 00:44:12.020
And that's why it's.

00:44:12.020 --> 00:44:14.480
I'm assuming, I'm assuming that's, that's what that's referring to.

00:44:14.480 --> 00:44:17.500
I may be misunderstanding the question, but hopefully that made sense for Dennis.

00:44:17.500 --> 00:44:18.020
Yeah.

00:44:18.020 --> 00:44:19.180
I'm not, I'm not sure.

00:44:19.180 --> 00:44:22.580
There's a lot going on with licensing and 365 for sure.

00:44:22.800 --> 00:44:26.900
I bet there's people, I'm sure there are people whose job it is to just know the licensing.

00:44:26.900 --> 00:44:27.640
Oh, sure.

00:44:27.640 --> 00:44:27.860
Yeah.

00:44:27.860 --> 00:44:30.480
And large organizations of a hundred thousand, you know, Windows users.

00:44:30.480 --> 00:44:35.740
One thing to be clear is that for people who are in a corporate environment, your administrators,

00:44:35.740 --> 00:44:40.680
your IT administrators will have to, it depends on what update cycle they're on, that they take

00:44:40.680 --> 00:44:42.740
updates to Office and Excel.

00:44:42.740 --> 00:44:48.260
So even though the, the Excel for Python or Python for in Excel feature is generally available.

00:44:48.260 --> 00:44:52.940
Now your internal corporate environment may not be picking up that feature until the next

00:44:52.940 --> 00:44:56.140
kind of iteration cycle when they, you know, the refresh cycle they do internally.

00:44:56.140 --> 00:44:58.000
So that's just a caveat that I will put up there.

00:44:58.000 --> 00:44:58.260
Okay.

00:44:58.260 --> 00:45:03.040
And I may have missed this when you're talking about it, but do people need to have the Microsoft

00:45:03.040 --> 00:45:06.560
Python Excel support to work with your toolbox?

00:45:06.560 --> 00:45:09.860
You know, I, that's a question I should know the answer for.

00:45:09.860 --> 00:45:14.280
I'm assuming I'm going to say yes, because you should have that support anyway, because

00:45:14.280 --> 00:45:15.560
you should be using that.

00:45:15.560 --> 00:45:16.740
But, oh, no, no.

00:45:16.740 --> 00:45:20.080
I mean, actually, if you're on Windows, you should do it, but you don't have to have it

00:45:20.080 --> 00:45:24.760
because it is a plugin that works on Mac and it works on the web as well, on, on Excel,

00:45:24.760 --> 00:45:26.800
Office 365 on the web.

00:45:26.800 --> 00:45:31.120
So it runs kind of independently, but we tried to make it as compatible as possible.

00:45:31.120 --> 00:45:35.900
And one, one thing I forgot to mention really huge feature is that you can build your own

00:45:35.900 --> 00:45:37.340
UDFs, right?

00:45:37.340 --> 00:45:43.740
Like your ability to write a new function and then have that be available.

00:45:43.740 --> 00:45:48.580
You can publish that as a function that isn't available in the, in, in the built-in list

00:45:48.580 --> 00:45:49.320
of Excel functions.

00:45:49.320 --> 00:45:53.440
And you can run that on a row and just drag and applies to everything in a row.

00:45:53.440 --> 00:45:55.980
Like it's a very nice way to do some custom functions.

00:45:55.980 --> 00:45:56.460
Yeah.

00:45:56.460 --> 00:45:56.940
Okay.

00:45:56.940 --> 00:45:58.000
It sounds really neat.

00:45:58.000 --> 00:46:02.740
And I think WebAssembly gives you a lot of flexibility, especially since there's, as you

00:46:02.740 --> 00:46:04.020
said, the web version.

00:46:04.020 --> 00:46:08.020
Is that WebAssembly version based on PyOxid?

00:46:08.020 --> 00:46:09.040
PyOxid?

00:46:09.040 --> 00:46:09.520
PyOxid?

00:46:09.520 --> 00:46:10.200
Yep.

00:46:10.200 --> 00:46:10.960
PyOxid.

00:46:10.960 --> 00:46:12.020
Sorry, I'm mixing these together.

00:46:12.020 --> 00:46:15.180
PyOxid or PyScript or like you're, I know you did a lot of work.

00:46:15.180 --> 00:46:15.500
Yes.

00:46:15.500 --> 00:46:17.720
It's PyScript and PyOxid, I believe.

00:46:17.720 --> 00:46:20.360
I don't know exactly which portions are which.

00:46:20.360 --> 00:46:25.160
It definitely relies on PyOxid for the WebAssembly runtime because we're using some of those

00:46:25.160 --> 00:46:27.560
data packages, which are built against PyOxid.

00:46:27.560 --> 00:46:28.040
Okay.

00:46:28.040 --> 00:46:28.480
Yeah.

00:46:28.480 --> 00:46:29.060
That's really great.

00:46:29.060 --> 00:46:30.320
So what do you see people doing?

00:46:30.320 --> 00:46:34.600
I mean, you described some scenarios, but you got any interesting stories of what some things

00:46:34.600 --> 00:46:35.960
people are able to accomplish with this?

00:46:35.960 --> 00:46:43.380
Oh, well, so not the toolbox specifically, but with the Python for Excel support.

00:46:43.380 --> 00:46:49.740
Last week, we were in Chicago, Microsoft Ignite, and a gentleman from KPMG was talking about

00:46:49.740 --> 00:46:58.080
how he turned hundreds of lines of very involved VBA for doing this tax preparation analysis.

00:46:58.080 --> 00:47:02.480
He turned it into just a few dozen lines of Python code.

00:47:02.480 --> 00:47:04.720
Right.

00:47:04.720 --> 00:47:14.780
And so I think that speaks to the power of this in that what I hope to see is that many

00:47:14.780 --> 00:47:20.200
more people in the Excel environment are able to use the great tools we have for data transformation

00:47:20.200 --> 00:47:20.680
in Python.

00:47:20.680 --> 00:47:27.080
But more importantly, that it lowers and reduces the friction between the data science

00:47:27.080 --> 00:47:28.500
teams and their business stakeholders.

00:47:28.500 --> 00:47:33.340
I think data scientists get trapped a lot in becoming kind of the data monkeys for folks.

00:47:33.340 --> 00:47:33.580
Right.

00:47:33.580 --> 00:47:35.080
This Excel spreadsheet is awesome.

00:47:35.080 --> 00:47:37.460
Could you generate me one with the new data from today?

00:47:37.460 --> 00:47:38.500
Because now we've got more traffic.

00:47:38.500 --> 00:47:38.500
Right.

00:47:38.500 --> 00:47:40.260
Or we run the thing or whatever else.

00:47:40.700 --> 00:47:47.720
And what I hope actually that maybe the deeper, more transformational thing is I hope it creates

00:47:47.720 --> 00:47:53.300
more interesting spreadsheets that causes all of these business users to be thinking, to have

00:47:53.300 --> 00:47:58.560
their eyes open about how much more interesting ways there are to think about their quantifiable

00:47:58.560 --> 00:48:05.680
problems, to run what if analyses, to slide a slider bar and say, okay, I want to see this

00:48:05.680 --> 00:48:06.720
weekly, monthly, yearly.

00:48:06.720 --> 00:48:11.180
I want to align to, you know, week starts or I want to start to calendar years or whatever

00:48:11.180 --> 00:48:11.480
else.

00:48:11.480 --> 00:48:16.320
Simple snapshotting kinds of things, which when you are, I think, a very, very experienced

00:48:16.320 --> 00:48:20.840
Excel person, you know you can do it, but it is a very involved process.

00:48:20.840 --> 00:48:22.440
It's like writing machine code.

00:48:22.440 --> 00:48:22.900
Right.

00:48:22.900 --> 00:48:23.940
It's very involved.

00:48:23.940 --> 00:48:29.400
And so with this, you can just say, oh, with three lines of Python, I've now transformed

00:48:29.400 --> 00:48:30.280
my data in bulk.

00:48:30.280 --> 00:48:33.660
It's vector oriented and array oriented, data frame oriented.

00:48:33.660 --> 00:48:37.200
And I think the more people think about that and the more they realize how easy it is to

00:48:37.200 --> 00:48:42.000
do pivot tables with just switching two or three parameters in a couple of lines of pandas

00:48:42.000 --> 00:48:44.460
or polar's code, like mind blown.

00:48:44.460 --> 00:48:45.160
Right.

00:48:45.160 --> 00:48:47.440
As opposed to clicking around on UIs all the time.

00:48:47.440 --> 00:48:48.620
So I'm really.

00:48:48.620 --> 00:48:49.300
I think it's going to be a gateway.

00:48:49.300 --> 00:48:49.960
Yeah.

00:48:49.960 --> 00:48:50.760
I'm really hoping.

00:48:50.760 --> 00:48:51.260
Yeah.

00:48:51.260 --> 00:48:51.660
Yeah.

00:48:51.660 --> 00:48:55.720
I think the way that Python has kind of brought people who didn't see themselves as data

00:48:55.720 --> 00:48:59.440
scientists into the data science realm and eventually they're like, but I'm just going

00:48:59.440 --> 00:49:02.000
to work in notebooks instead of my other tools or whatever.

00:49:02.000 --> 00:49:05.740
I feel like this could have a similar effect.

00:49:05.740 --> 00:49:07.420
You're like, this is really cool.

00:49:07.420 --> 00:49:08.960
I didn't know we could do this.

00:49:08.960 --> 00:49:10.500
And then, so this is all Python.

00:49:10.500 --> 00:49:10.740
Yeah.

00:49:10.740 --> 00:49:11.660
That's all Python in the back end.

00:49:11.660 --> 00:49:14.080
Well, maybe we should just do that directly.

00:49:14.080 --> 00:49:14.620
You know what I mean?

00:49:14.620 --> 00:49:18.380
Sort of work, get their feet wet and move, move into that direction.

00:49:18.380 --> 00:49:24.020
So, yeah, yeah, I'm trying to get my folks here to get those links across to you.

00:49:24.020 --> 00:49:25.100
So you can put those in the show notes.

00:49:25.100 --> 00:49:25.700
Oh, perfect.

00:49:25.700 --> 00:49:25.900
Yeah.

00:49:25.900 --> 00:49:29.520
So I think it's going to have that kind of interesting effect.

00:49:29.520 --> 00:49:33.540
The reason I brought up, I brought up this eight of the biggest Excel mistakes of all time.

00:49:33.540 --> 00:49:36.140
There's all these different articles of, right.

00:49:36.140 --> 00:49:41.480
You know, weird, weird things because, you know, for example, in my five bugged the wrong

00:49:41.480 --> 00:49:46.420
phones because there was some formatting error that auto filled or, you know, we had to change

00:49:46.420 --> 00:49:51.560
the name of a gene because it kept getting marked and all this random craziness, right?

00:49:51.560 --> 00:49:52.320
Right, right, right, right.

00:49:52.320 --> 00:49:59.500
So I think having Python available, because to me, Excel feels like the world's most insane

00:49:59.500 --> 00:50:01.580
non-visible set of go-to statements.

00:50:01.580 --> 00:50:05.360
I go here, then I go to that cell, then I go to here, then I go over there, and then we do

00:50:05.360 --> 00:50:05.680
this.

00:50:05.680 --> 00:50:10.000
And then, but you can't look at the spreadsheet and know that that's what it's doing.

00:50:10.000 --> 00:50:10.600
Right.

00:50:10.600 --> 00:50:16.100
But with Python in there, you have a much more structured way of thinking about your

00:50:16.100 --> 00:50:16.320
data.

00:50:16.320 --> 00:50:20.100
You're not forced into 17 interconnected go-to statements.

00:50:20.100 --> 00:50:20.560
Yeah.

00:50:20.560 --> 00:50:24.720
And you reminded me of the thing, which I, yeah, I said before, I just forgot to mention that

00:50:24.720 --> 00:50:28.720
if you put more of the business logic into the Python code, well, guess what?

00:50:28.720 --> 00:50:30.320
You can check in Python code.

00:50:30.320 --> 00:50:30.600
Yeah.

00:50:30.600 --> 00:50:34.600
You can diff Python code, and it uses variable names and variable references.

00:50:34.600 --> 00:50:39.540
And if you do a little bit of hygienic approach to this, you set your variable references to

00:50:39.540 --> 00:50:42.940
cell range to the top, then you manipulate the variables, and then you put the outputs down

00:50:42.940 --> 00:50:43.220
there.

00:50:43.220 --> 00:50:47.260
And now you really have very clean business logic you can follow.

00:50:47.260 --> 00:50:50.140
Not to say that Python doesn't have its warts, of course.

00:50:50.140 --> 00:50:51.640
I'm not some like, you know, whatever.

00:50:51.640 --> 00:50:55.400
I see, I know how complex a Jupyter Notebook can get, for instance.

00:50:55.400 --> 00:51:00.520
But at the end of the day, you're absolutely right that Excel is at the same time, both

00:51:00.520 --> 00:51:01.680
so functional, right?

00:51:01.680 --> 00:51:02.880
It is a data flow language.

00:51:02.880 --> 00:51:07.460
It is immediate mode, dependency graph oriented, you know, in the grid.

00:51:07.460 --> 00:51:08.860
A lot of good things about it.

00:51:08.860 --> 00:51:14.140
Reactive, live, a lot of great things about that model for normals, for normies, for muggles,

00:51:14.140 --> 00:51:14.820
whatever you want to call them.

00:51:14.820 --> 00:51:19.160
People who are not imperative iterated state machine coders like we are, right?

00:51:19.160 --> 00:51:22.360
But there's a place for that too, right?

00:51:22.360 --> 00:51:23.280
Because you're absolutely right.

00:51:23.280 --> 00:51:27.780
People will have these like weird linkages between different bits and pieces when what

00:51:27.780 --> 00:51:33.560
they really wanted was a couple of named references and then some iterative logic or imperative

00:51:33.560 --> 00:51:35.880
logic on those things with a branch statement somewhere.

00:51:35.880 --> 00:51:41.580
You know, a couple of for loops, nif then statement can go a long way to simplifying very complicated

00:51:41.580 --> 00:51:42.260
data flows.

00:51:42.260 --> 00:51:42.720
Yeah.

00:51:42.720 --> 00:51:48.580
That and vector math rather than copy the formula, drag it down 20,000 rows.

00:51:48.580 --> 00:51:49.120
Right.

00:51:49.120 --> 00:51:49.680
Why is this?

00:51:49.680 --> 00:51:50.460
They warn you now.

00:51:50.460 --> 00:51:54.340
At least they warn you again when like you're off by one and you forgot your minute of value.

00:51:54.340 --> 00:51:55.380
There's like a little yellow triangle.

00:51:55.380 --> 00:51:55.760
Okay.

00:51:55.760 --> 00:51:56.120
That's good.

00:51:56.120 --> 00:51:56.720
That's good.

00:51:56.720 --> 00:51:57.200
Yeah.

00:51:57.200 --> 00:51:59.840
Nice.

00:51:59.840 --> 00:52:00.200
All right.

00:52:00.200 --> 00:52:04.520
Well, let's, you know, let's talk about a couple other things while you hear that you

00:52:04.520 --> 00:52:05.200
all are into.

00:52:06.020 --> 00:52:08.420
We just, there we go.

00:52:08.420 --> 00:52:14.420
We just had Fabio drop in and he did a lot of the work.

00:52:14.420 --> 00:52:18.220
I've had him on the show at least once, maybe twice to talk about PyScript.

00:52:18.220 --> 00:52:19.840
Do you want to give us a PyScript update?

00:52:19.840 --> 00:52:21.020
What is it for people who don't know?

00:52:21.020 --> 00:52:21.880
I mean, they've been just, yeah.

00:52:21.880 --> 00:52:22.220
They've been.

00:52:22.220 --> 00:52:25.200
Micro Python, by the way, this is, this is huge right here.

00:52:25.200 --> 00:52:25.680
Yeah.

00:52:25.680 --> 00:52:26.600
Like it just works.

00:52:26.600 --> 00:52:27.060
Right.

00:52:27.060 --> 00:52:27.440
Yeah.

00:52:27.440 --> 00:52:27.920
Tell us about it.

00:52:28.080 --> 00:52:33.700
Well, so when we first released PyScript, it was, it was a sort of proof of concept.

00:52:33.700 --> 00:52:37.700
Like, oh my God, you can, with doing some like interesting things, you can now just be writing

00:52:37.700 --> 00:52:41.920
bracket, Py dash script inside HTML and be executing first class.

00:52:41.920 --> 00:52:46.260
But we were running on Pyodide, which is a full on CPython build.

00:52:46.260 --> 00:52:49.900
And it can then import things like NumPy and Matplotlib.

00:52:49.900 --> 00:52:52.600
But, but it was kind of heavy to load.

00:52:52.600 --> 00:52:53.140
It was a lot.

00:52:53.140 --> 00:52:53.560
Right.

00:52:53.560 --> 00:52:56.660
It was more designed for things like Jupyter light.

00:52:57.120 --> 00:53:00.740
These were like, we're going to load up a big notebook and we're going to do awesome.

00:53:00.740 --> 00:53:01.320
Awesome.

00:53:01.320 --> 00:53:02.080
It's zero install.

00:53:02.080 --> 00:53:02.560
Right.

00:53:02.560 --> 00:53:06.060
It's, it's like you literally can just run everything in the browser without installing

00:53:06.060 --> 00:53:08.800
anything because it's really downloading everything into the browser.

00:53:08.800 --> 00:53:09.100
Right.

00:53:09.100 --> 00:53:09.300
Yeah.

00:53:09.300 --> 00:53:14.000
But it's, which is fine if you just start up once, but if you're trying to build a consumer

00:53:14.000 --> 00:53:16.460
facing web app, it might be way too heavy.

00:53:16.460 --> 00:53:16.900
Exactly.

00:53:16.900 --> 00:53:18.480
It's not really a replacement for that.

00:53:18.480 --> 00:53:22.560
So what we did most recently, number one, we added MicroPython support.

00:53:22.560 --> 00:53:26.920
MicroPython is less than 80 kilobytes or so, no, maybe 300 kilobytes.

00:53:26.920 --> 00:53:31.980
Now PyScript and MicroPython together is like 300 kilobytes and it starts in under a second.

00:53:31.980 --> 00:53:36.920
So now you really can use Python instead of JavaScript to go and do things in the DOM.

00:53:36.920 --> 00:53:38.240
So we have full DOM support.

00:53:38.240 --> 00:53:44.460
You know, there's a native web API to manipulate the DOM and it supports web workers and async and

00:53:44.460 --> 00:53:46.040
blocking calls and native storage.

00:53:46.160 --> 00:53:53.260
So you can actually use the MicroPython bit and that's where the bracket MPY dash script and

00:53:53.260 --> 00:53:58.420
that loads at the MicroPython environment and you can now be then loading the full Pyodide

00:53:58.420 --> 00:54:02.080
PyScript in the backend and as an asynchronous sort of web worker.

00:54:02.540 --> 00:54:07.920
So it's really an interesting thing that is, you can do a lot of interesting things with

00:54:07.920 --> 00:54:08.580
it now, I think.

00:54:08.580 --> 00:54:13.560
And we have experimental support for R. So we've not left our friends in the data science community

00:54:13.560 --> 00:54:13.960
behind.

00:54:14.660 --> 00:54:15.760
So that'll be great.

00:54:15.760 --> 00:54:21.560
And, you know, we have some basic LLM and AI demos and there's people working on running

00:54:21.560 --> 00:54:23.360
this on microcontrollers.

00:54:23.360 --> 00:54:27.600
And so you can go manipulate, you know, embedded devices and everything.

00:54:28.000 --> 00:54:29.580
So it's just a fun, fun thing.

00:54:29.580 --> 00:54:31.700
Community is building interesting things at PyCon.

00:54:31.700 --> 00:54:36.480
Lukash gave a really interesting talk, show how to do like 3D, like WebGL kind of stuff

00:54:36.480 --> 00:54:39.600
with micro or with PyScript.

00:54:39.600 --> 00:54:44.600
So I would say just, yeah, we're, we're sort of right now, you know, we have PyScript.com

00:54:44.600 --> 00:54:46.680
where if you want to build things and share them more easily, that's great.

00:54:46.680 --> 00:54:50.840
But if you are just want to use this as a technology, you totally should.

00:54:50.840 --> 00:54:53.140
He's like, just take it and play with it and make little things with it.

00:54:53.140 --> 00:54:57.900
Now there's a weekly calls, I think community calls that we do just join

00:54:57.900 --> 00:54:59.500
and hop in on the discord and just get involved.

00:54:59.500 --> 00:55:00.620
I think it's a really fun thing.

00:55:00.620 --> 00:55:01.000
Yeah.

00:55:01.000 --> 00:55:02.820
I really, I'm very excited about it.

00:55:02.820 --> 00:55:08.640
I would love to see something like a view or a react just where just here's your front

00:55:08.640 --> 00:55:11.880
end and you get to write it in this language you all love and already know.

00:55:11.880 --> 00:55:14.680
I'm not necessarily hating on JavaScript, but it's not.

00:55:14.680 --> 00:55:15.400
It's okay to hate on JavaScript.

00:55:15.400 --> 00:55:16.080
Yeah.

00:55:16.080 --> 00:55:17.860
I'm not intent.

00:55:17.860 --> 00:55:21.020
My thought more is you're already working in one language.

00:55:21.020 --> 00:55:25.740
Why do I need to do a second language just because of the place in which that language

00:55:25.740 --> 00:55:28.880
executes is so dramatically limited, right?

00:55:28.880 --> 00:55:32.280
It's the whole reason that node became a thing is we're already doing JavaScript.

00:55:32.280 --> 00:55:33.460
Can we just keep doing JavaScript?

00:55:33.460 --> 00:55:34.100
That's right.

00:55:34.100 --> 00:55:37.000
Well, for Python people, it's just reverse that, right?

00:55:37.000 --> 00:55:37.500
Right.

00:55:37.500 --> 00:55:37.960
Right.

00:55:37.960 --> 00:55:41.480
And there's a lot of really nice frameworks for front end stuff.

00:55:41.480 --> 00:55:45.080
And the nice thing about PyScript is that it is pretty easy to use the JavaScript bridge

00:55:45.080 --> 00:55:46.660
to call to all of those things, right?

00:55:46.660 --> 00:55:49.200
What we don't have is a Python wrapper around those things.

00:55:49.200 --> 00:55:51.220
So you can keep staying in the Python language.

00:55:51.340 --> 00:55:51.780
Yes, exactly.

00:55:51.780 --> 00:55:52.780
You have to use little proxy objects.

00:55:52.780 --> 00:55:58.140
But for the most part, it's pretty nice to, like some on the examples, the 3JS examples,

00:55:58.140 --> 00:56:02.000
some of these other things show how you can manipulate the JavaScript objects directly.

00:56:02.000 --> 00:56:06.160
And we're just looking for more people to add interesting things to it.

00:56:06.160 --> 00:56:07.580
But I agree with you.

00:56:07.580 --> 00:56:14.720
Something that is like a Vue.js or React kind of thing that's natively PyScript would be,

00:56:14.980 --> 00:56:19.300
I think, really unlock kind of that next phase of community growth and developer excitement.

00:56:19.300 --> 00:56:20.000
Yeah, yeah, yeah.

00:56:20.000 --> 00:56:25.020
It feels like the notebook in the browser deal is almost nailed.

00:56:25.020 --> 00:56:25.920
Right.

00:56:25.920 --> 00:56:31.320
But the, I'm going to replace my React front end with a Python front end, that's probably

00:56:31.320 --> 00:56:32.120
the next frontier.

00:56:32.120 --> 00:56:32.800
Yeah.

00:56:32.800 --> 00:56:38.340
Maybe what I ought to do is I ought to put a bounty up there for someone to build a PyScript,

00:56:38.420 --> 00:56:45.520
PyScript React thing embedded inside a Wasm object or Wasm container on the app protocol

00:56:45.520 --> 00:56:49.240
and just put like a $20,000 bounty out there and see who gets there first.

00:56:49.240 --> 00:56:51.720
Because I think that would show us how it could get done.

00:56:51.720 --> 00:56:55.900
There are some things in decentralized web, these frame objects and whatnot that are there

00:56:55.900 --> 00:56:59.020
to put little applets in the, on chain.

00:56:59.020 --> 00:57:03.000
And I think we're, maybe we just, people just need a little kick like that.

00:57:03.320 --> 00:57:05.420
Yeah, that would be amazing.

00:57:05.420 --> 00:57:06.080
Right.

00:57:06.080 --> 00:57:07.280
Yeah.

00:57:07.280 --> 00:57:08.740
There was the whole keynote.

00:57:08.740 --> 00:57:12.160
There's been several versions, you know, Carol Willing gave one of them.

00:57:12.160 --> 00:57:16.680
Russell Keith McGee gave one sort of about, there's the few places that are really important

00:57:16.680 --> 00:57:18.380
in computing that Python doesn't really touch.

00:57:18.380 --> 00:57:20.280
And it was kind of mobile and web front end.

00:57:20.280 --> 00:57:20.500
Right.

00:57:20.500 --> 00:57:23.560
And so that would take down one of those two, which would be pretty amazing.

00:57:23.560 --> 00:57:27.600
And maybe indirectly somehow find its way to mobile if it could be on the web, you know?

00:57:27.600 --> 00:57:27.860
Yeah.

00:57:27.860 --> 00:57:30.260
React Native is how a lot of people are doing the mobile development.

00:57:30.660 --> 00:57:33.620
So if you have a wrapper for React, like that should, that should be there.

00:57:33.620 --> 00:57:33.900
Right.

00:57:33.900 --> 00:57:34.800
Yeah, exactly.

00:57:34.800 --> 00:57:35.460
That'd be wild.

00:57:35.460 --> 00:57:35.820
Yeah.

00:57:35.820 --> 00:57:36.160
Awesome.

00:57:36.160 --> 00:57:36.700
Okay.

00:57:36.700 --> 00:57:37.740
Let's talk.

00:57:37.740 --> 00:57:40.100
You got a few minutes to talk to Blue Sky real quick before we wrap things up?

00:57:40.100 --> 00:57:41.300
Yeah, I do.

00:57:41.300 --> 00:57:41.700
Yep.

00:57:41.700 --> 00:57:47.700
You have a really interesting profile here on, I'll certainly put that into the show notes.

00:57:47.700 --> 00:57:50.380
I am a new Blue Sky.

00:57:50.380 --> 00:57:52.540
I just created an account last week.

00:57:52.540 --> 00:57:56.740
Finally, I was thinking, you know, already I'm on Mastodon and I'm kind of on Twitter and

00:57:56.740 --> 00:57:59.100
I've just got a lot to, I've got a lot of email addresses.

00:57:59.300 --> 00:58:00.300
I kind of got enough, right?

00:58:00.300 --> 00:58:05.480
But really recently, a lot of people have been moving from the tech space to Blue Sky.

00:58:05.480 --> 00:58:06.360
And I'm like, you know what?

00:58:06.360 --> 00:58:07.340
I had two thoughts.

00:58:07.340 --> 00:58:09.400
One, like, I'll just create an account and see what it's like over there.

00:58:09.400 --> 00:58:09.740
Why not?

00:58:09.740 --> 00:58:10.680
That was thought one.

00:58:10.680 --> 00:58:16.420
Thought two is, I better go there before somebody steals like the podcast handle on my name and

00:58:16.420 --> 00:58:17.440
stuff, you know, like that.

00:58:17.440 --> 00:58:19.800
Because that happened on Mastodon before I got there.

00:58:19.800 --> 00:58:20.900
I'm like, oh, maybe not.

00:58:21.380 --> 00:58:22.360
So, yeah.

00:58:22.360 --> 00:58:28.340
So, I now have, I now have at mkennedy.codes as I'm here officially, right?

00:58:28.340 --> 00:58:28.880
Right.

00:58:28.880 --> 00:58:29.680
But yeah.

00:58:29.680 --> 00:58:33.000
So, I'm really, I'm surprisingly delighted by it.

00:58:33.000 --> 00:58:33.500
So, maybe.

00:58:33.500 --> 00:58:33.920
Good.

00:58:33.920 --> 00:58:34.340
Good.

00:58:34.400 --> 00:58:36.960
I've seen you talking about a couple of projects and different things.

00:58:36.960 --> 00:58:37.680
So, yeah.

00:58:37.680 --> 00:58:38.760
You want to riff on that for a minute?

00:58:38.760 --> 00:58:39.260
Yeah.

00:58:39.260 --> 00:58:41.900
So, I know you're writing a lot about it, right?

00:58:41.900 --> 00:58:43.100
You just did an article or something on it.

00:58:43.100 --> 00:58:44.700
Oh, no, I haven't yet.

00:58:44.920 --> 00:58:45.820
I've been meaning to.

00:58:45.820 --> 00:58:49.040
This is the Thanksgiving post-tryptophan induced haze.

00:58:49.040 --> 00:58:51.480
I might go and just bang something out.

00:58:51.480 --> 00:58:52.000
Okay.

00:58:52.000 --> 00:58:57.440
But I should tell my story, I guess, and my interaction with this ecosystem that, you know,

00:58:57.440 --> 00:59:01.760
obviously, I think most people know me for my engagement in Python and Python, PyData,

00:59:01.760 --> 00:59:03.100
Anaconda, all these kinds of things.

00:59:03.100 --> 00:59:10.180
But for about eight years now, I've been involved in the decentralized web community in one form

00:59:10.180 --> 00:59:10.580
or another.

00:59:10.580 --> 00:59:12.700
I go to some of the camps that the Internet Archive puts together.

00:59:12.700 --> 00:59:14.680
And I funded some projects around this area.

00:59:14.680 --> 00:59:18.960
And years ago, I started funding a project called Beaker Browser, which is a decentralized

00:59:18.960 --> 00:59:26.440
web browser for looking at local, it's a local first web browser that was imminently modifiable.

00:59:26.440 --> 00:59:33.960
And then you would then use some kind of backend data transport like IPFS or HyperCore, DAT,

00:59:33.960 --> 00:59:35.500
whatever kinds of things.

00:59:35.500 --> 00:59:40.200
And so you have a very different approach to building websites, building web apps when you

00:59:40.200 --> 00:59:44.140
have this data decoupled from the view, right?

00:59:44.320 --> 00:59:52.340
Ultimately, I had surmised that a lot of the crappiness of the current internet and social

00:59:52.340 --> 00:59:59.120
media apps and all these kinds of things was due ultimately to a flaw in the web itself,

00:59:59.120 --> 01:00:00.520
which is the client server model.

01:00:00.520 --> 01:00:02.320
Intrinsically dumps user data.

01:00:02.600 --> 01:00:07.500
And from a software architecture perspective, what we might say is that we take an MVC architecture

01:00:07.500 --> 01:00:11.860
and we split the view model and we put the view model out here, but we put the business

01:00:11.860 --> 01:00:15.760
logic in the model over here and it's all owned by a trillion dollar tech company, right?

01:00:15.760 --> 01:00:17.100
And so all of us that have to pay...

01:00:17.100 --> 01:00:18.740
They observe the heck out of it as the data flows.

01:00:18.740 --> 01:00:22.940
They observe the heck out of that and they sell those observations and they profit handsomely

01:00:22.940 --> 01:00:23.320
from it.

01:00:23.320 --> 01:00:27.160
But then it also leads to all sorts of...

01:00:27.160 --> 01:00:30.360
There's a dark shadow to all of that, right?

01:00:30.360 --> 01:00:31.120
Which is not good.

01:00:31.120 --> 01:00:34.920
From a civil libertarian as well as from an entrepreneur, from a tech innovator perspective,

01:00:34.920 --> 01:00:36.340
I don't like any of that.

01:00:36.340 --> 01:00:42.840
So my investment into these decentralized web technologies were fueled by this realization

01:00:42.840 --> 01:00:43.240
that I had.

01:00:43.240 --> 01:00:47.260
That we had to really rebuild internet architecture from the bottom up and how we build applications,

01:00:47.260 --> 01:00:47.560
period.

01:00:47.560 --> 01:00:51.340
So that you can actually draw a thematic line from where my investments and things like

01:00:51.340 --> 01:00:57.180
Beaker Browser to us supporting at Anaconda development of tools like PyScript and Beware,

01:00:57.180 --> 01:00:58.280
Russell and Keith McGee, right?

01:00:58.280 --> 01:01:03.160
Empowering end users to build applications and permissionlessly and as easily as possible,

01:01:03.160 --> 01:01:04.340
share them with other users.

01:01:04.340 --> 01:01:08.960
So we have a lot of innovation and creativity and joy ultimately in this creative space that

01:01:08.960 --> 01:01:10.100
computing actually should be.

01:01:10.100 --> 01:01:17.440
So ultimately Beaker Browser didn't work out as a company, but the guy who was behind it spent

01:01:17.440 --> 01:01:21.080
four years, I mean, I funded him for those four years, doing a lot of experiments.

01:01:21.080 --> 01:01:25.140
And what does decentralized Twitter, decentralized Reddit, decentralized Facebook, what do these

01:01:25.140 --> 01:01:26.840
kinds of like local first experiences look like?

01:01:26.840 --> 01:01:29.160
What is the right design for a protocol to do?

01:01:29.160 --> 01:01:32.260
Like, you know, because he worked on secure scuttlebutt and these gossip networks, like

01:01:32.260 --> 01:01:33.800
Nostra, like what Nostra sort of has.

01:01:33.800 --> 01:01:36.560
And then like, what are the things where we have to centralize?

01:01:36.560 --> 01:01:41.520
All of those learnings kind of got wrapped up into then what is now app protocol and Blue

01:01:41.520 --> 01:01:41.680
Sky.

01:01:41.680 --> 01:01:46.860
So he got hired in by Jay, who's the CEO of Blue Sky to go and build the, what is now the Blue

01:01:46.860 --> 01:01:47.360
Sky app?

01:01:47.360 --> 01:01:53.620
And the app protocol is the result of the Beaker Browser guy, Paul Frazee, working closely

01:01:53.620 --> 01:01:58.260
with, you know, people like Jeremy and others that are the core devs at Blue Sky.

01:01:58.260 --> 01:02:01.580
And so that's kind of my connection to this ecosystem.

01:02:01.580 --> 01:02:06.600
So I'm user number six or seven, I think user number six on the network.

01:02:06.600 --> 01:02:08.700
And I'm a big, huge proponent of this stuff.

01:02:08.700 --> 01:02:14.020
So that has like no formal intersection with my work in the Python space.

01:02:14.020 --> 01:02:16.680
It's just another aspect of technology that I'm very passionate about.

01:02:16.680 --> 01:02:21.340
But both are actually connected thematically in the sense of empowering end users.

01:02:21.340 --> 01:02:27.660
Actually, the Python bit, PyData, the Excel bit, and then the Blue Sky bit all connect in the sense of

01:02:27.660 --> 01:02:35.300
empowering people, regular humans to use computers to the best, to making their lives better.

01:02:35.300 --> 01:02:40.960
Whether it's asking more interesting questions of the world, whether it's being able to then share

01:02:40.960 --> 01:02:45.980
and deploy the things they build with other people, whether it's, you know, reaching out to more and more

01:02:45.980 --> 01:02:49.460
people, Excel has a billion users or something like that, 700 million users.

01:02:49.460 --> 01:02:49.840
Right.

01:02:49.840 --> 01:02:50.860
Meet them where they are.

01:02:50.860 --> 01:02:52.180
Meet them where they are.

01:02:52.180 --> 01:02:52.620
Yeah.

01:02:52.620 --> 01:02:53.060
Yeah.

01:02:53.060 --> 01:02:53.400
Right.

01:02:53.400 --> 01:03:00.300
And then with Blue Sky, it's how do we kind of go and like just have a different way of people

01:03:00.300 --> 01:03:03.080
connecting to each other on the internet, being able to make interesting things

01:03:03.080 --> 01:03:06.480
and really share in a spirit of collaboration.

01:03:06.480 --> 01:03:11.760
And so one of the really important things about Blue Sky is that the way the moderation system works,

01:03:11.760 --> 01:03:14.520
all those block lists and all those kinds of things that people have.

01:03:14.520 --> 01:03:17.280
You know, I'm an old school internet guy.

01:03:17.280 --> 01:03:20.460
And I remember if you were on Usenet, you would have a thing called a K-file.

01:03:20.460 --> 01:03:21.840
It's your local kill file.

01:03:21.840 --> 01:03:22.120
Right.

01:03:22.120 --> 01:03:25.440
Which is people I just don't effing want to hear from because they're obviously idiots.

01:03:25.440 --> 01:03:29.720
And your readers, news readers would respect that.

01:03:29.920 --> 01:03:30.060
Right.

01:03:30.060 --> 01:03:35.040
And so something that Paul and I talked about years ago was a social K-file would be a way

01:03:35.040 --> 01:03:42.240
to have a social group be able to really just disincentivize and lock out the bad faith interactions.

01:03:42.240 --> 01:03:42.920
Right.

01:03:42.920 --> 01:03:47.060
Now, of course, you could go too far with that and just create a little echo chamber for yourself.

01:03:47.060 --> 01:03:52.500
But there is a lot of space between spammers, trolls everywhere, spamming us with like crypto

01:03:52.500 --> 01:03:55.520
spam and just like total echo chamber.

01:03:55.520 --> 01:03:56.960
There's space in the middle.

01:03:56.960 --> 01:03:57.240
Right.

01:03:57.340 --> 01:04:00.980
So I think what Blue Sky is demonstrating with the shared block lists and things like

01:04:00.980 --> 01:04:03.500
that and people just being able to mute things built in the UI.

01:04:03.500 --> 01:04:09.100
Those are the kinds of tools we can make available when the company and the technology isn't incentivized

01:04:09.100 --> 01:04:13.200
to create more angry bullshit sort of interactions and engagement.

01:04:13.200 --> 01:04:17.420
So the algorithms don't promote that and push the heck out of it to get engagement.

01:04:17.420 --> 01:04:21.380
No, the default Blue Sky algorithm is just chronological feed of following.

01:04:21.380 --> 01:04:24.180
So if you don't want to see somebody's stuff, don't follow them.

01:04:24.840 --> 01:04:28.720
You know, if you go to some of the other feeds, there's more algorithmic stuff there if you want to have it.

01:04:28.720 --> 01:04:31.020
But by default, it's just whoever you chose to follow.

01:04:31.020 --> 01:04:35.260
And if you don't like what they say and you know them, you should engage with them and say, hey, man, I don't agree with that.

01:04:35.260 --> 01:04:36.280
Like, let's talk about that.

01:04:36.280 --> 01:04:36.640
Right.

01:04:37.000 --> 01:04:38.000
So I think this is...

01:04:38.000 --> 01:04:38.800
Or unfollow them and just...

01:04:38.800 --> 01:04:39.580
Or just unfollow them.

01:04:39.580 --> 01:04:40.180
It's like, you know what?

01:04:40.180 --> 01:04:42.300
They talk too much about politician XYZ.

01:04:42.300 --> 01:04:43.160
I don't want to hear about that.

01:04:43.160 --> 01:04:43.400
Right?

01:04:43.400 --> 01:04:45.200
It's a very simple approach.

01:04:45.200 --> 01:04:47.120
I need a space where I don't want to hear about that.

01:04:47.120 --> 01:04:47.480
Yeah.

01:04:47.480 --> 01:04:53.140
One thing I'll give a shout out to help people get started if they're interested in is they have this cool idea called starter packs.

01:04:53.140 --> 01:04:53.740
Right.

01:04:53.740 --> 01:04:56.480
And I created one called Python Personalities.

01:04:56.480 --> 01:04:57.880
And you're on here, Peter.

01:04:57.880 --> 01:05:01.420
So if they follow the starter pack, they'll automatically follow you.

01:05:01.420 --> 01:05:09.120
But there's click follow and you get 60, 70 Python, nice, engaged people to follow.

01:05:09.540 --> 01:05:13.720
And if you want to find other starter packs, there's blueskydirectory.com.

01:05:13.720 --> 01:05:14.140
That's right.

01:05:14.140 --> 01:05:15.960
Blueskydirectory.com.

01:05:15.960 --> 01:05:19.380
There's 60,000 or so of these directories.

01:05:19.380 --> 01:05:20.140
Yeah.

01:05:20.140 --> 01:05:20.920
And you can search here.

01:05:20.920 --> 01:05:25.760
You can say, I'm interested in Python or I'm interested in motorcycle or whatever it is you're interested in.

01:05:25.760 --> 01:05:26.180
Right.

01:05:26.180 --> 01:05:27.120
And there's AI.

01:05:27.120 --> 01:05:27.800
Yeah.

01:05:27.800 --> 01:05:34.760
I saw somebody have a starter pack called Friendly Weather Scientist Using AI.

01:05:34.760 --> 01:05:37.300
It's very specific.

01:05:37.300 --> 01:05:39.720
But if you want that group, there you are.

01:05:39.720 --> 01:05:40.240
All right.

01:05:40.240 --> 01:05:44.500
Let's close this out with a real quick bit of real-time feedback from Fabio from PyScript.

01:05:44.500 --> 01:05:45.520
Oh, OK.

01:05:45.520 --> 01:05:45.960
Yep.

01:05:45.960 --> 01:05:50.080
There's a framework called PuePy on top of PyScript that is native and reactive.

01:05:50.080 --> 01:05:51.020
Very early, though.

01:05:51.020 --> 01:05:52.880
Yes, I had the guy on.

01:05:52.880 --> 01:05:53.500
I'm sorry.

01:05:53.500 --> 01:05:55.040
I don't remember the first name of the guy.

01:05:55.040 --> 01:05:57.120
But I had the guy behind PuePy on.

01:05:57.120 --> 01:05:58.240
And it looks really interesting.

01:05:58.240 --> 01:05:59.720
I'm hopeful for it.

01:05:59.720 --> 01:06:01.940
But I'm not necessarily sure yet that it's the answer.

01:06:01.940 --> 01:06:06.620
And then Fabio also says, we're also working on the invent framework.

01:06:06.620 --> 01:06:09.440
That is not really comparable to React for you, but in that direction.

01:06:09.440 --> 01:06:12.380
I just love his YouTube avatar.

01:06:12.380 --> 01:06:13.100
You said, well, hold on.

01:06:13.100 --> 01:06:14.820
We should go to his YouTube.

01:06:14.820 --> 01:06:16.560
Look at that.

01:06:16.560 --> 01:06:17.500
Look at that.

01:06:17.500 --> 01:06:19.620
This looks like an amazing picture from Halloween.

01:06:19.620 --> 01:06:21.220
It's a very serious business profile.

01:06:21.220 --> 01:06:21.560
Right.

01:06:22.120 --> 01:06:28.180
Yes, Fabio's Fabio's partner is a world championship winning sort of body painter.

01:06:28.180 --> 01:06:29.680
And so he has those.

01:06:29.680 --> 01:06:30.580
He does the photography.

01:06:30.580 --> 01:06:32.420
So that's why that's not just a random thing.

01:06:32.420 --> 01:06:36.420
It's kind of related to his family stuff.

01:06:36.420 --> 01:06:36.740
Yeah.

01:06:36.740 --> 01:06:37.840
But it's kind of hilarious.

01:06:37.840 --> 01:06:38.800
Awesome.

01:06:38.800 --> 01:06:39.320
All right.

01:06:39.320 --> 01:06:42.000
Well, I suppose we're probably out of time, Peter.

01:06:42.000 --> 01:06:44.900
But it's always delightful to talk to you and so many things.

01:06:44.900 --> 01:06:45.380
Yeah.

01:06:45.380 --> 01:06:47.220
Well, thank you so much for having me on.

01:06:47.220 --> 01:06:48.060
This is a lot of fun.

01:06:48.060 --> 01:06:48.500
Thank you.

01:06:48.720 --> 01:06:49.460
Yeah, you bet.

01:06:49.460 --> 01:06:53.140
And I'll put the links for all the things we talked about in the share notes.

01:06:53.140 --> 01:06:55.360
Let's leave it with a closeout for the Excel thing.

01:06:55.360 --> 01:06:56.340
People want to get started with that.

01:06:56.340 --> 01:06:56.820
What do they do?

01:06:56.820 --> 01:07:00.020
Go to anaconda.com slash Excel or just go to your Excel.

01:07:00.020 --> 01:07:01.340
Again, Excel for Windows.

01:07:01.340 --> 01:07:02.940
Just type in equals PY.

01:07:02.940 --> 01:07:03.660
See if that works.

01:07:03.660 --> 01:07:10.080
And then for the Anaconda Toolbox, you can just also go into Excel plugin finder and you

01:07:10.080 --> 01:07:10.600
can find it there.

01:07:10.600 --> 01:07:13.800
Or you just Google Anaconda Toolbox and you'll find the install instructions there.

01:07:13.800 --> 01:07:15.760
So definitely check it out and give us feedback on it.

01:07:15.760 --> 01:07:16.060
Awesome.

01:07:16.060 --> 01:07:16.520
Thanks.

01:07:16.520 --> 01:07:17.160
See you later.

01:07:17.160 --> 01:07:17.800
Thank you.

01:07:17.800 --> 01:07:21.700
This has been another episode of Talk Python to Me.

01:07:21.700 --> 01:07:23.520
Thank you to our sponsors.

01:07:23.520 --> 01:07:25.120
Be sure to check out what they're offering.

01:07:25.120 --> 01:07:26.540
It really helps support the show.

01:07:26.540 --> 01:07:28.540
Take some stress out of your life.

01:07:28.540 --> 01:07:34.040
Get notified immediately about errors and performance issues in your web or mobile applications with

01:07:34.040 --> 01:07:34.340
Sentry.

01:07:34.340 --> 01:07:39.320
Just visit talkpython.fm/sentry and get started for free.

01:07:39.320 --> 01:07:42.920
And be sure to use the promo code talkpython, all one word.

01:07:42.920 --> 01:07:45.680
And this episode is brought to you by Bluehost.

01:07:45.680 --> 01:07:47.260
Do you need a website fast?

01:07:47.560 --> 01:07:48.180
Get Bluehost.

01:07:48.180 --> 01:07:53.540
Their AI builds your WordPress site in minutes and their built-in tools optimize your growth.

01:07:53.540 --> 01:07:54.500
Don't wait.

01:07:54.500 --> 01:07:58.100
Visit talkpython.fm/bluehost to get started.

01:07:58.100 --> 01:07:59.420
Want to level up your Python?

01:07:59.820 --> 01:08:03.480
We have one of the largest catalogs of Python video courses over at Talk Python.

01:08:03.480 --> 01:08:08.660
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:08:08.660 --> 01:08:11.320
And best of all, there's not a subscription in sight.

01:08:11.320 --> 01:08:14.220
Check it out for yourself at training.talkpython.fm.

01:08:14.600 --> 01:08:16.320
Be sure to subscribe to the show.

01:08:16.320 --> 01:08:19.120
Open your favorite podcast app and search for Python.

01:08:19.120 --> 01:08:20.440
We should be right at the top.

01:08:20.580 --> 01:08:26.220
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the

01:08:26.220 --> 01:08:29.780
direct RSS feed at /rss on talkpython.fm.

01:08:30.200 --> 01:08:32.760
We're live streaming most of our recordings these days.

01:08:32.760 --> 01:08:36.880
If you want to be part of the show and have your comments featured on the air, be sure to

01:08:36.880 --> 01:08:40.600
subscribe to our YouTube channel at talkpython.fm/youtube.

01:08:41.260 --> 01:08:42.640
This is your host, Michael Kennedy.

01:08:42.640 --> 01:08:43.940
Thanks so much for listening.

01:08:43.940 --> 01:08:45.100
I really appreciate it.

01:08:45.100 --> 01:08:47.000
Now get out there and write some Python code.

01:08:47.000 --> 01:08:48.000
Bye.

01:08:48.000 --> 01:08:49.000
Bye.

01:08:49.000 --> 01:08:50.000
Bye.

01:08:50.000 --> 01:08:51.000
Bye.

01:08:51.000 --> 01:08:52.000
Bye.

01:08:52.000 --> 01:08:53.000
Bye.

01:08:53.000 --> 01:08:54.000
Bye.

01:08:54.000 --> 01:08:55.000
Bye.

01:08:55.000 --> 01:08:56.000
Bye.

01:08:56.000 --> 01:08:57.000
Bye.

01:08:57.000 --> 01:08:58.000
Bye.

01:08:58.000 --> 01:08:59.000
Bye.

01:08:59.000 --> 01:09:00.000
Bye.

01:09:00.000 --> 01:09:01.000
Bye.

01:09:01.000 --> 01:09:02.000
Bye.

01:09:02.000 --> 01:09:03.000
Bye.

01:09:03.000 --> 01:09:04.000
Bye.

01:09:04.000 --> 01:09:04.500
you

01:09:04.500 --> 01:09:06.500
Thank you.

01:09:06.500 --> 01:09:36.480
Thank you.

