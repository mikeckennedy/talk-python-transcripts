WEBVTT

00:00:00.001 --> 00:00:06.480
In recent years, there's been a lot of experimenting with how we work with dependencies and external libraries for our Python code.

00:00:06.480 --> 00:00:13.660
There's pip, pip-tools, poetry, PDM, pyenv, pipenv, Hatch, and other workflows.

00:00:13.660 --> 00:00:22.840
We dove into this deeply back on episode 406, reimagining Python's packaging workflow with a panel.

00:00:22.840 --> 00:00:26.640
And this time, we're back with Ofek Lev to take a deeper look at Hatch.

00:00:26.880 --> 00:00:32.060
This is Talk Python To Me, episode 408, recorded March 1st, 2023.

00:00:32.060 --> 00:00:49.180
Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:49.180 --> 00:00:50.920
This is your host, Michael Kennedy.

00:00:50.920 --> 00:00:56.040
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython.

00:00:56.040 --> 00:00:58.420
Both on fosstodon.org.

00:00:58.420 --> 00:01:01.020
Be careful with impersonating accounts on other instances.

00:01:01.020 --> 00:01:01.980
There are many.

00:01:01.980 --> 00:01:07.040
Keep up with the show and listen to over seven years of past episodes at talkpython.fm.

00:01:07.040 --> 00:01:11.020
We've started streaming most of our episodes live on YouTube.

00:01:11.020 --> 00:01:18.620
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:19.720 --> 00:01:23.420
This episode is sponsored by Microsoft for Startups Founders Hub.

00:01:23.420 --> 00:01:29.180
Check them out at talkpython.fm/foundershub to get early support for your startup.

00:01:29.180 --> 00:01:31.440
And it's brought to you by Sentry.

00:01:31.440 --> 00:01:33.680
Don't let those errors go unnoticed.

00:01:33.680 --> 00:01:34.700
Use Sentry.

00:01:34.700 --> 00:01:37.540
Get started at talkpython.fm/sentry.

00:01:37.540 --> 00:01:40.320
OFEC, welcome to Talk Python To Me.

00:01:40.320 --> 00:01:41.180
Thank you.

00:01:41.180 --> 00:01:41.900
Good to be here.

00:01:41.980 --> 00:01:44.740
It's been a long time, at least a week since you've been on the show.

00:01:44.740 --> 00:01:47.340
Yep, just about a week.

00:01:47.340 --> 00:01:48.080
Welcome back.

00:01:48.080 --> 00:01:53.760
In that appearance, it was a big panel of many of us talking about Python packaging.

00:01:53.760 --> 00:01:54.200
Yeah.

00:01:54.260 --> 00:02:01.660
And you're the author of Hatch and Hatchling and a really interesting take on that tooling story.

00:02:01.660 --> 00:02:07.820
So I thought it'd be fun to go ahead and just dive into that in particular for this episode and get your thoughts on it.

00:02:07.820 --> 00:02:09.360
So I'm looking forward to talking about Hatch.

00:02:09.360 --> 00:02:10.280
Yeah, sounds fun.

00:02:10.280 --> 00:02:11.220
Yeah, it will be fun.

00:02:11.220 --> 00:02:14.820
Before we get into it, though, a lot of people maybe don't know you out there.

00:02:14.820 --> 00:02:15.900
What's your background?

00:02:15.900 --> 00:02:17.720
How did you get into programming in Python?

00:02:17.720 --> 00:02:18.780
Those sorts of things.

00:02:18.780 --> 00:02:19.740
Let us know.

00:02:19.740 --> 00:02:27.140
I guess originally, this was like maybe 15 years ago now, I was just automating stuff that I was doing every day.

00:02:27.140 --> 00:02:31.560
So for me personally, I have a condition that makes me kind of weak.

00:02:31.560 --> 00:02:33.660
So all I can use is like a mouse.

00:02:33.660 --> 00:02:35.680
Therefore, I type pretty slow.

00:02:35.680 --> 00:02:45.120
So I was automating like sentences, templating for like sending emails, basically like the traditional developer mindset.

00:02:45.120 --> 00:02:49.500
If you do anything more than once or twice, just write a script for it.

00:02:49.500 --> 00:02:55.540
So I had like dozens or maybe even a hundred scripts just to automate like boring stuff.

00:02:55.540 --> 00:02:58.120
Kind of like the book, which I've never read the book.

00:02:58.120 --> 00:03:01.340
Automate the boring stuff, but I imagine it's what I was doing.

00:03:01.340 --> 00:03:03.340
That's how I originally got into Python.

00:03:03.340 --> 00:03:03.860
Excellent.

00:03:03.860 --> 00:03:06.480
You were doing the traditional developer thing.

00:03:06.480 --> 00:03:10.080
Why spend 20 minutes doing something where you can spend two weeks automating it?

00:03:10.080 --> 00:03:10.500
Yeah.

00:03:10.500 --> 00:03:11.600
Just kidding.

00:03:11.600 --> 00:03:15.880
I mean, like, I honestly, I really think that that's a huge value.

00:03:15.880 --> 00:03:23.240
There's so many people out there, probably many people even listen to this podcast where they don't consider themselves developers,

00:03:23.240 --> 00:03:28.800
but there's like little things that could be automated that are super annoying.

00:03:28.800 --> 00:03:31.120
You don't look forward to it.

00:03:31.220 --> 00:03:36.280
Just a little bit of programming skill will let you really blaze through those things.

00:03:36.280 --> 00:03:43.280
Plus it also gets you further into Python where, you know, maybe one day you're releasing tools to manage everyone else's Python projects.

00:03:43.280 --> 00:03:44.900
Yeah, for sure.

00:03:44.900 --> 00:03:46.420
You don't know where it's going to go, right?

00:03:46.420 --> 00:03:46.740
Yeah.

00:03:46.740 --> 00:03:50.900
Now I work at Datadog working on agent integrations.

00:03:51.380 --> 00:03:59.860
So it's like being that you physically install on your server host, it ships out of the box with like almost 200 integrations,

00:03:59.860 --> 00:04:09.260
like connecting to databases like Postgres or monitoring like Windows APIs or hypervisors like vSphere,

00:04:09.260 --> 00:04:12.700
pretty much whatever our customers want to monitor.

00:04:12.700 --> 00:04:18.660
It's our job to like find a way to connect to it and provide useful data.

00:04:18.660 --> 00:04:19.720
Yeah, excellent.

00:04:19.720 --> 00:04:22.960
A lot of research into every product that we integrate with.

00:04:22.960 --> 00:04:26.540
Sometimes the documentation is kind of sparse.

00:04:26.540 --> 00:04:29.520
So it's lots of investigative work.

00:04:29.520 --> 00:04:30.620
Yeah, I can imagine.

00:04:30.620 --> 00:04:32.220
That sounds really fun.

00:04:32.220 --> 00:04:37.400
And I can see that as a follow on from the way you got started as well, right?

00:04:37.400 --> 00:04:43.980
Automating a bunch of tasks is not that different from kind of automating integration with 100 different apps

00:04:43.980 --> 00:04:48.320
and performance counters and logs and different things, right?

00:04:48.320 --> 00:04:48.640
Definitely.

00:04:48.640 --> 00:04:49.000
Cool.

00:04:49.520 --> 00:04:52.580
Is that part of the application performance monitoring type thing?

00:04:52.580 --> 00:04:53.060
Are there?

00:04:53.060 --> 00:04:54.300
We do that as well.

00:04:54.300 --> 00:04:56.040
That's not my team, but yeah.

00:04:56.040 --> 00:04:56.360
Okay.

00:04:56.360 --> 00:04:57.320
That's part of what we do.

00:04:57.320 --> 00:04:57.700
All right.

00:04:57.700 --> 00:05:01.100
Well, let's go ahead and dive in.

00:05:01.100 --> 00:05:01.460
Sure.

00:05:01.580 --> 00:05:02.820
So as I said, if people want to check it out.

00:05:02.820 --> 00:05:07.600
So as I said, if people want to check it out, you are on the Python packaging discussion.

00:05:07.600 --> 00:05:13.600
And over there was a broad conversation with a bunch of core developers and other interested

00:05:13.600 --> 00:05:19.640
folks building tools like Hatch and so on about where are we with packaging?

00:05:19.640 --> 00:05:27.260
Because a little while ago, I remember packaging mostly felt like pip and set of tools, maybe

00:05:27.260 --> 00:05:29.160
just just util, something like that.

00:05:29.160 --> 00:05:35.420
And then it kind of got unlocked the separation of like the build back ends and stuff.

00:05:35.420 --> 00:05:37.280
And then many people started creating things.

00:05:37.280 --> 00:05:38.660
We had pip, ENV.

00:05:38.660 --> 00:05:40.180
We have poetry.

00:05:40.180 --> 00:05:41.900
We have PDM.

00:05:41.900 --> 00:05:45.100
There's a bunch of different ones and Hatch is amongst them, right?

00:05:45.100 --> 00:05:45.400
Yeah.

00:05:45.480 --> 00:05:50.680
Let's set the stage by just talking about, first of all, what do we mean when we're talking

00:05:50.680 --> 00:05:51.820
about Python packaging?

00:05:51.820 --> 00:05:54.160
And I'll ask you for you, right?

00:05:54.160 --> 00:05:58.500
Like it might mean something different for me than it might mean for you.

00:05:58.500 --> 00:06:00.640
And it might be different for someone else as well.

00:06:00.640 --> 00:06:04.960
But let's just start with, you know, when we talk packaging, is that getting libraries

00:06:04.960 --> 00:06:05.700
to devs?

00:06:05.700 --> 00:06:08.700
Is that developers deploying their apps to servers?

00:06:08.700 --> 00:06:13.300
Or is that me sending an executable end product to a desktop?

00:06:13.300 --> 00:06:15.040
Like, what does it mean?

00:06:15.040 --> 00:06:15.300
Yeah.

00:06:15.300 --> 00:06:16.260
That's a good question.

00:06:16.260 --> 00:06:19.460
I would say all of those are packaging.

00:06:19.460 --> 00:06:25.160
Historically, though, we've mostly put our efforts toward the first one, which is basically

00:06:25.160 --> 00:06:32.160
like a developer making a library and making that really simple for other developers to use

00:06:32.160 --> 00:06:32.740
that library.

00:06:32.740 --> 00:06:39.380
So in the form of wheels being hosted on PyPI in particular, that's what we put our efforts

00:06:39.380 --> 00:06:44.740
on, which I think either way you look at it was the right choice to focus on in the

00:06:44.740 --> 00:06:45.600
beginning.

00:06:45.600 --> 00:06:50.700
Because like either way, like from either first principles or even hindsight, looking

00:06:50.700 --> 00:06:57.940
back, you can't build a community without packages and being able to get packages and distribute

00:06:57.940 --> 00:06:58.340
packages.

00:06:58.700 --> 00:07:00.840
So I think that was the right choice.

00:07:00.840 --> 00:07:04.740
And I think now we're trying to satisfy other use cases.

00:07:04.740 --> 00:07:07.180
Notably applications, I guess.

00:07:07.180 --> 00:07:07.620
Yeah.

00:07:07.620 --> 00:07:07.660
Yeah.

00:07:07.660 --> 00:07:10.140
I mean, we even have an XKCD for it, right?

00:07:10.140 --> 00:07:11.280
True.

00:07:11.280 --> 00:07:13.700
And I don't know how many people know this.

00:07:13.700 --> 00:07:17.520
If you're in the Python REPL, you can type import anti-gravity.

00:07:17.520 --> 00:07:20.280
And actually, it does something.

00:07:20.880 --> 00:07:25.520
So the old XKCD is there's a person flying and the person on the ground looks at us.

00:07:25.520 --> 00:07:26.440
How are you flying?

00:07:26.440 --> 00:07:29.300
Python just learned it last night.

00:07:29.300 --> 00:07:30.320
Everything's so simple.

00:07:30.320 --> 00:07:32.040
Hello world is just print.

00:07:32.040 --> 00:07:32.860
Hello world.

00:07:32.860 --> 00:07:34.700
The person on the ground says, I don't know.

00:07:34.700 --> 00:07:36.640
Dynamics typing white space.

00:07:36.640 --> 00:07:38.420
Come on, join us.

00:07:38.420 --> 00:07:39.480
Programming's fun again.

00:07:39.680 --> 00:07:39.960
Okay.

00:07:39.960 --> 00:07:40.800
But how are you flying?

00:07:40.800 --> 00:07:42.580
I just typed import anti-gravity.

00:07:42.580 --> 00:07:43.400
Right.

00:07:43.400 --> 00:07:45.240
And it's a great joke.

00:07:45.240 --> 00:07:49.180
But honestly, that is one of those superpowers of Python.

00:07:49.180 --> 00:07:52.200
Is that how many things do we have right now?

00:07:52.200 --> 00:07:52.940
How many packages?

00:07:52.940 --> 00:07:55.600
436,000 packages.

00:07:55.600 --> 00:07:57.140
Like insane.

00:07:57.140 --> 00:07:58.500
It's just insane.

00:07:58.500 --> 00:07:58.840
Yeah.

00:07:58.840 --> 00:08:04.740
No, it's a massive community and really all kinds of domains from doing, you know,

00:08:04.740 --> 00:08:09.520
as we talked about automating scripts, you know, different tasks to doing like

00:08:09.520 --> 00:08:17.100
computing for, whether, you know, biomedical stuff, you know, even embedded devices now

00:08:17.100 --> 00:08:20.560
with like, micro Python, stuff like that.

00:08:20.560 --> 00:08:21.660
So it's, yeah.

00:08:21.660 --> 00:08:24.680
Users of Python do everything pretty much.

00:08:24.680 --> 00:08:25.040
Yeah.

00:08:25.040 --> 00:08:30.740
I think in the near term, we're going to be talking about front end web as well with

00:08:30.740 --> 00:08:39.120
PyScript and PyScript showed the possibilities, but I recently had a show on PyScript intersection

00:08:39.360 --> 00:08:40.700
with micro Python.

00:08:40.700 --> 00:08:44.160
And that starts to be like, well, here's a couple hundred K download.

00:08:44.160 --> 00:08:46.040
And now you've got Python in the front end.

00:08:46.040 --> 00:08:47.020
What do you think about it now?

00:08:47.020 --> 00:08:52.140
But of course that has its own packaging and distribution story that we're going to have

00:08:52.140 --> 00:08:53.020
to think about as well.

00:08:53.020 --> 00:08:55.240
Like, well, kind of like node modules.

00:08:55.240 --> 00:08:57.660
Now, what do you do with packages that got to run on the front end?

00:08:57.660 --> 00:08:58.600
This is getting weird.

00:08:58.940 --> 00:09:04.860
That kind of goes to, you know, talking about like how hard it is to do packaging when you

00:09:04.860 --> 00:09:08.500
have, you know, dozens of use cases that we have to satisfy.

00:09:08.820 --> 00:09:14.140
And with us being mostly just volunteers in our free time trying to do everything.

00:09:14.140 --> 00:09:14.840
So, yeah.

00:09:14.840 --> 00:09:15.180
Yeah.

00:09:15.180 --> 00:09:17.440
It's fun and also challenging.

00:09:17.440 --> 00:09:18.080
Yeah.

00:09:18.080 --> 00:09:18.360
Yeah.

00:09:18.360 --> 00:09:18.720
Absolutely.

00:09:18.720 --> 00:09:23.840
Another area, another thing we could consider could be Conda, right?

00:09:23.900 --> 00:09:25.440
Actually, I got that pulled over here.

00:09:25.440 --> 00:09:26.800
Could be Conda, right?

00:09:26.800 --> 00:09:30.000
This is a completely different take on pip and Wheels.

00:09:30.000 --> 00:09:30.440
Yeah.

00:09:30.440 --> 00:09:31.540
Conda is pretty cool.

00:09:31.540 --> 00:09:37.960
I think Conda, if I have my history right, it came about because there really was no packaging

00:09:37.960 --> 00:09:38.500
story.

00:09:38.500 --> 00:09:38.780
Yeah.

00:09:38.780 --> 00:09:39.580
Some time ago.

00:09:40.000 --> 00:09:44.640
So, Conda, I think was made by Peter Yang, if I remember correctly.

00:09:44.640 --> 00:09:48.860
And he has a whole company now around it supporting Conda.

00:09:48.860 --> 00:09:53.820
And yeah, it just makes it easy to install, very complex stuff.

00:09:53.820 --> 00:10:00.500
So, if your package depends on, yeah, you can put in Fortran and Rust and all kinds of stuff

00:10:00.500 --> 00:10:05.180
and it just magically builds it and you can install it pretty easily.

00:10:05.180 --> 00:10:06.100
Yeah.

00:10:06.100 --> 00:10:07.260
It's pretty impressive.

00:10:07.260 --> 00:10:08.420
It is pretty impressive.

00:10:08.420 --> 00:10:12.380
And, you know, with Wheels now, it's closer, what we do with Pip.

00:10:12.380 --> 00:10:17.340
It used to be setup.py would run and whatever it needed to do, it would do.

00:10:17.340 --> 00:10:19.540
But often that would require, well, compile this.

00:10:19.540 --> 00:10:26.100
Usually it was C back then, but for the scientific libraries, it says, well, compile this thing

00:10:26.100 --> 00:10:29.720
with Fortran and then compile this thing with Scala.

00:10:29.720 --> 00:10:33.520
You're like, I have neither of those things set up as dev tools on my environment.

00:10:33.520 --> 00:10:35.260
I'm a science student.

00:10:35.260 --> 00:10:36.180
What am I doing here?

00:10:36.180 --> 00:10:37.300
Right.

00:10:37.300 --> 00:10:39.100
And so, that was the angle they were solving.

00:10:39.100 --> 00:10:42.940
And I think pip and Conda are coming a little bit closer together.

00:10:42.940 --> 00:10:47.180
I think they're not necessarily converging, but they're more similar now than they used to be.

00:10:47.180 --> 00:10:47.820
Yeah, definitely.

00:10:47.820 --> 00:10:48.700
That is true.

00:10:48.700 --> 00:10:50.420
And yeah, there was talk.

00:10:50.420 --> 00:10:56.260
I don't know how many people are aware, but the Python forums has a subsection on discourse

00:10:56.260 --> 00:10:57.400
for packaging.

00:10:57.400 --> 00:11:03.440
So, yeah, right now there's actually talks from people at Conda trying to decide how we

00:11:03.440 --> 00:11:07.500
can kind of provide a more unified experience.

00:11:07.500 --> 00:11:08.440
Oh, that's interesting.

00:11:08.440 --> 00:11:12.660
Because right now, Conda has their own repo for all their packages.

00:11:12.660 --> 00:11:16.800
And PyPI is its own thing outside of Conda.

00:11:17.180 --> 00:11:23.100
So, yeah, there's talk about possibly making that interoperable.

00:11:23.100 --> 00:11:23.600
Oh, yeah.

00:11:23.600 --> 00:11:23.900
Okay.

00:11:23.900 --> 00:11:24.820
That'd be really interesting.

00:11:24.820 --> 00:11:25.800
Let's see.

00:11:25.800 --> 00:11:28.780
There was a question out here from Copa.

00:11:28.780 --> 00:11:30.380
It says, we're in this realm.

00:11:30.380 --> 00:11:33.480
Like, what do you think about Docker as a way of shipping things?

00:11:33.480 --> 00:11:40.280
You know, a lot of times we'll get checkout, get clone some code on a server, maybe some production

00:11:40.280 --> 00:11:43.560
branch, and then go through these steps, right?

00:11:43.560 --> 00:11:50.420
Pip install requirements or a hatch run type of initialization, or you just get that done

00:11:50.420 --> 00:11:52.300
in a Docker container and you just hand that out.

00:11:52.300 --> 00:11:54.720
What are your thoughts on Docker as part of this?

00:11:54.720 --> 00:11:57.260
Yeah, Docker definitely has its use cases.

00:11:57.260 --> 00:12:03.260
Like, I guess in lieu of the block file, you could kind of use Docker as a reproducible,

00:12:03.260 --> 00:12:04.480
you know, environment.

00:12:05.140 --> 00:12:11.480
But I still think there's a place for a way to actually build applications and, you know,

00:12:11.480 --> 00:12:15.720
outside of Docker, outside of containers in a reproducible fashion.

00:12:15.720 --> 00:12:17.400
I think that's still necessary.

00:12:17.400 --> 00:12:18.420
I do as well.

00:12:18.420 --> 00:12:25.900
And so Docker really, it addresses some of the types of packaging that we discussed really,

00:12:25.900 --> 00:12:26.420
really well.

00:12:26.420 --> 00:12:32.400
For example, I need to get my running code onto a server, but Docker is less good.

00:12:32.480 --> 00:12:37.920
It's not completely irrelevant, but it's less good at giving a developer a library, right?

00:12:37.920 --> 00:12:44.680
If people that make HTTPX and the people that make FastAPI, they're not going to build a

00:12:44.680 --> 00:12:46.700
combo Docker, right?

00:12:46.700 --> 00:12:49.080
There's still a place where you've just got to get the things.

00:12:49.080 --> 00:12:52.220
And that's like a base level closer to where a hatch might be working.

00:12:52.220 --> 00:12:56.000
And also Docker is not fantastic at sending to an end user.

00:12:56.520 --> 00:13:02.240
If I want to build an app that a non-technical, non-developer person can use, Docker is the

00:13:02.240 --> 00:13:03.180
opposite of what they want.

00:13:03.180 --> 00:13:04.260
You know what I mean?

00:13:04.260 --> 00:13:04.800
Yeah, true.

00:13:04.800 --> 00:13:05.400
Yeah.

00:13:05.400 --> 00:13:11.780
I will say there's another use case, which is like, if your machine is like messed up somehow

00:13:11.780 --> 00:13:14.800
and some library package isn't working.

00:13:14.800 --> 00:13:18.040
I've had this happen with my coworkers on their Macs.

00:13:18.400 --> 00:13:22.340
It is nice to be able to just go into a container and start fresh.

00:13:22.340 --> 00:13:24.160
So I've had that happen a few times.

00:13:24.160 --> 00:13:26.160
It is isolated in quite a good way.

00:13:26.160 --> 00:13:28.000
And that's pretty excellent.

00:13:28.800 --> 00:13:36.340
So on that packaging panel that we were on, there was a really interesting focus for a little

00:13:36.340 --> 00:13:41.200
bit talking about, well, what is responsible for what?

00:13:41.200 --> 00:13:49.500
So right now, for example, I might use pip as a way to add tools to Python, to a Python project,

00:13:49.500 --> 00:13:51.900
but I'll have to already have Python there.

00:13:52.360 --> 00:13:58.740
And in other communities, and even a little bit like Honda in this as well, there's tools

00:13:58.740 --> 00:14:03.320
that will say, what you do is use a tool kind of like pip, but it gets you the runtime.

00:14:03.320 --> 00:14:07.480
It would get you a version of Python you asked for plus the libraries.

00:14:07.480 --> 00:14:14.360
You know, I think RustUp was one of the things that was brought up there, right?

00:14:14.360 --> 00:14:21.560
So for people who don't know RustUp, it's an installer for basically setting up a Rust environment

00:14:21.560 --> 00:14:22.280
for doing Rust.

00:14:22.280 --> 00:14:25.340
So pip up, Python up, I don't know.

00:14:25.340 --> 00:14:26.800
I don't know what we would call it.

00:14:26.800 --> 00:14:29.440
But do you want to just, you know, maybe give your thoughts on that?

00:14:29.440 --> 00:14:34.380
Because I think you had some comments on that, like inside out, outside in, where, if you

00:14:34.380 --> 00:14:36.000
could start fresh, where were the tools?

00:14:36.000 --> 00:14:37.020
How would that work?

00:14:37.020 --> 00:14:41.760
Yeah, I think if we were to start fresh, I think the way Rust does it is like now the

00:14:41.760 --> 00:14:42.860
gold standard.

00:14:42.860 --> 00:14:49.240
It's probably the best way to do it, which is how, as you mentioned, Conda, a similar thing,

00:14:49.760 --> 00:14:51.480
where you have a tool that you download.

00:14:51.480 --> 00:14:59.480
And that one tool is in charge of managing the various Python or programming language versions.

00:14:59.480 --> 00:15:05.200
So if I were to start fresh, you would have a tool like catch that you would download, you

00:15:05.200 --> 00:15:10.200
know, as an MSI or EXE or some kind of installer similar to RustUp.

00:15:10.200 --> 00:15:17.920
And then that tool would manage the various Python versions and environments and packaging.

00:15:17.920 --> 00:15:23.920
So for RustUp, when you download this, it gives you RustUp, which manages Rust.

00:15:23.920 --> 00:15:27.520
But then it gives you Cargo, which is a separate command.

00:15:27.520 --> 00:15:29.360
And that's their package manager.

00:15:29.800 --> 00:15:32.100
But in both cases, they live outside of the Python.

00:15:32.100 --> 00:15:32.680
Interesting.

00:15:32.680 --> 00:15:32.920
Yeah.

00:15:32.920 --> 00:15:35.780
Cargo is to Rust as pip is to Python, right?

00:15:35.780 --> 00:15:36.600
That kind of thing.

00:15:36.600 --> 00:15:40.020
Hey, folks, let's pause for an ad.

00:15:40.020 --> 00:15:43.780
Remember last time I had this advertisement for Microsoft for startups?

00:15:43.780 --> 00:15:48.920
Well, I asked the AI to have some fun with it just to show you how powerful what they have

00:15:48.920 --> 00:15:50.100
on offer really is.

00:15:50.100 --> 00:15:50.940
Here we go.

00:15:50.940 --> 00:15:52.020
Me.

00:15:52.020 --> 00:15:55.860
Can you rephrase that Microsoft Founders Hub ad as a hipster?

00:15:55.860 --> 00:15:56.880
AI.

00:15:56.880 --> 00:15:57.720
Sure.

00:15:57.720 --> 00:16:00.800
Here's a rephrased version of the ad in hipster style.

00:16:00.800 --> 00:16:02.600
Yo, Talk Python fam.

00:16:02.600 --> 00:16:06.980
This segment is brought to you by the sickest program out there for startup founders, Microsoft

00:16:06.980 --> 00:16:08.040
for startups Founders Hub.

00:16:08.040 --> 00:16:12.220
If you're a boss running a startup, you're going to want to listen up because this is the

00:16:12.220 --> 00:16:13.000
deal of a lifetime.

00:16:13.000 --> 00:16:17.720
Microsoft for Founders Hub is your ticket to scaling efficiently and preserving your runway

00:16:17.720 --> 00:16:20.160
all the while keeping your cool factor intact.

00:16:20.460 --> 00:16:24.260
With over six figures worth of benefits, this program is seriously next level.

00:16:24.260 --> 00:16:29.360
You'll get $150,000 in Azure credits, the richest cloud credit offering on the market,

00:16:29.360 --> 00:16:35.780
access to the OpenAI APIs in the new Azure OpenAI service, where you can infuse some serious

00:16:35.780 --> 00:16:41.620
generative AI into your apps, and a one-on-one technical advisory from the Microsoft squad, who

00:16:41.620 --> 00:16:44.300
will help you with your tech stack and architectural plans.

00:16:44.300 --> 00:16:47.760
This program is open all, whether you're just starting or you're already killing it.

00:16:47.760 --> 00:16:50.200
And the best part, there's no funding requirement.

00:16:50.200 --> 00:16:54.220
All it takes is five minutes to apply, and you'll be reaping the benefits in no time.

00:16:54.220 --> 00:16:58.940
Check it out and sign up for Microsoft for Startup Founders Hub at talkpython.fm slash

00:16:58.940 --> 00:16:59.520
foundershub.

00:16:59.520 --> 00:17:01.020
Peace out and keep listening.

00:17:01.020 --> 00:17:02.340
Thank you, Hipster Michael.

00:17:02.340 --> 00:17:06.060
And thank you, Microsoft for Startups Founders Hub, for sponsoring the show.

00:17:08.880 --> 00:17:13.560
I think that's pretty helpful because one of the problems is, well, you need to pip install this

00:17:13.560 --> 00:17:13.760
thing.

00:17:13.760 --> 00:17:15.420
Oh, do you have the wrong version of Python?

00:17:15.420 --> 00:17:20.880
Well, you got to, you know, there's a lot of steps back, and there's no immediately obvious

00:17:20.880 --> 00:17:24.660
command other than completely from scratch install a new Python.

00:17:24.660 --> 00:17:25.180
Yeah.

00:17:25.180 --> 00:17:26.680
There's the tools that manage that, right?

00:17:26.740 --> 00:17:30.420
Like, PyEnv can work, although I've had trouble with it.

00:17:30.420 --> 00:17:31.740
Yeah, I've had issues with that.

00:17:31.740 --> 00:17:37.900
Yeah, I think it would be less error-prone in this hypothetical way, where the tool doesn't

00:17:37.900 --> 00:17:41.260
mess with your shell in a global manner.

00:17:41.260 --> 00:17:47.640
It just has its own paths to Python and just does everything by itself.

00:17:47.780 --> 00:17:52.540
That's interesting, and that starts to maybe make it easier to solve the, I want to ship

00:17:52.540 --> 00:17:58.980
you an executable binary, is if the tool were in charge of, I create this working directory

00:17:58.980 --> 00:18:04.700
where part of the things I've installed is all of Python and all the packages you've asked

00:18:04.700 --> 00:18:07.840
me for, I can see how that pretty quickly becomes something.

00:18:07.840 --> 00:18:11.620
I'll bundle that up and hand it to somebody and, you know, give them an entry point.

00:18:11.620 --> 00:18:13.500
Definitely, I could help that situation.

00:18:13.980 --> 00:18:20.500
I think there's not really a standard way to build an AXE from like a Python package.

00:18:20.500 --> 00:18:25.100
There are a few tools, like PyOxidizer is one newer option.

00:18:25.100 --> 00:18:30.540
PyInstaller, CX Freeze, I think was the thing that I've used before.

00:18:30.540 --> 00:18:32.240
So there's a few options.

00:18:32.240 --> 00:18:34.840
Yeah, I've used PyToApp, and that's actually worked really well.

00:18:34.840 --> 00:18:39.900
I've used PyInstaller, and it's worked mostly well, except for I've had weird situations

00:18:39.900 --> 00:18:44.480
where on Windows it's great, but on Mac it has a dangling terminal.

00:18:44.480 --> 00:18:47.960
In addition to the GUI, I'm like, what are we supposed to do that?

00:18:47.960 --> 00:18:48.840
How do we make it go away?

00:18:48.840 --> 00:18:50.460
Like, you know, here's the command.

00:18:50.460 --> 00:18:51.540
Like, no, it's not going away.

00:18:51.540 --> 00:18:52.240
I don't know why.

00:18:52.240 --> 00:18:58.940
And if there was a more official sort of core dev organized way, that would make me super happy.

00:18:58.940 --> 00:19:01.940
I'm not supposed to say for official or unofficial.

00:19:01.940 --> 00:19:05.360
Like, my view is like, if it works, it works.

00:19:05.360 --> 00:19:10.220
So as long as it's satisfying, you know, all the use cases, that's what I would push for.

00:19:10.220 --> 00:19:16.200
So I think right now, based on what I've used personally, I think PyOxidizer would be the

00:19:16.200 --> 00:19:19.620
best choice for distributing standalone apps.

00:19:19.620 --> 00:19:20.200
Interesting.

00:19:20.200 --> 00:19:20.700
Okay.

00:19:20.700 --> 00:19:21.680
All right, cool.

00:19:21.680 --> 00:19:26.160
Well, let's move on and start talking about Hatch.

00:19:26.160 --> 00:19:29.760
So first off, why'd you build it?

00:19:29.760 --> 00:19:30.280
Right?

00:19:30.280 --> 00:19:31.300
We had Pip.

00:19:31.300 --> 00:19:33.660
Why do we need Hatch?

00:19:33.660 --> 00:19:36.540
And, you know, I don't know exactly the timeframe of when it came out.

00:19:36.540 --> 00:19:40.960
So maybe we had other things like poetry or, you know, why'd you go and create this?

00:19:40.960 --> 00:19:48.560
So Hatch, I did, it was kind of an older project back in the end of 2016 or early 2017.

00:19:48.560 --> 00:19:53.280
I wasn't pleased with like the tooling in Python.

00:19:53.620 --> 00:19:56.740
I think very similar to the author of poetry.

00:19:56.740 --> 00:19:58.600
That's kind of why he made poetry.

00:19:58.600 --> 00:20:05.300
So I wanted something that kind of matched my mental model of how development would go

00:20:05.300 --> 00:20:10.620
with building packages and managing environments automatically, stuff like that.

00:20:10.620 --> 00:20:15.120
When I made it though, there weren't very many standards for packaging.

00:20:15.660 --> 00:20:21.840
And everything was kind of in limbo at that point, which kind of discouraged me from continuing.

00:20:21.840 --> 00:20:27.800
Because then I was like, okay, in a six months or a year or two, I'm going to have to rewrite

00:20:27.800 --> 00:20:29.280
to follow standards.

00:20:29.280 --> 00:20:35.200
So I kind of just stopped development for a few years until everything was standardized.

00:20:35.780 --> 00:20:42.580
And then I rewrote it about a year and a half ago with this new version and new docs.

00:20:42.580 --> 00:20:45.460
So that's kind of the history of it.

00:20:45.460 --> 00:20:45.760
Yeah.

00:20:45.760 --> 00:20:51.880
I saw that there's a hatch.toml and a pyproject.toml and you can use either of them.

00:20:51.880 --> 00:20:56.040
Was your hatch.toml the original and then pyproject.toml gained traction?

00:20:56.040 --> 00:20:58.320
You're like, all right, well, we'll integrate with that as well.

00:20:58.420 --> 00:21:01.380
No, hatch.toml came with the rewrite.

00:21:01.380 --> 00:21:03.220
It's mostly for environments.

00:21:03.220 --> 00:21:07.840
Sometimes when you define lots of environments, it's very verbose.

00:21:07.840 --> 00:21:13.240
Like at my workplace, I saw a tox file that was like over a thousand lines.

00:21:13.240 --> 00:21:17.040
So putting that in pyproject wouldn't be very nice.

00:21:17.040 --> 00:21:20.260
So that's why I have a second file to isolate certain features.

00:21:20.260 --> 00:21:21.500
Yeah, that makes sense.

00:21:21.500 --> 00:21:24.980
Just like maybe you don't want to write your entire application in an app.py,

00:21:24.980 --> 00:21:27.140
but maybe have multiple files.

00:21:27.140 --> 00:21:27.960
Yeah, something like that.

00:21:28.220 --> 00:21:28.500
All right.

00:21:28.500 --> 00:21:31.200
Well, out in the audience, we've got some kind words.

00:21:31.200 --> 00:21:34.700
Like I switched to hatch and pip-tools from poetry and love it.

00:21:34.700 --> 00:21:35.740
That's pretty awesome.

00:21:35.740 --> 00:21:36.180
Yeah.

00:21:36.180 --> 00:21:40.960
And then probably before I'll forget, because it was right at the top of the conversation,

00:21:40.960 --> 00:21:47.420
Marwan asks, is there a time estimate for when a hatch might support things like lock files?

00:21:47.420 --> 00:21:48.580
That's a good question.

00:21:48.580 --> 00:21:57.320
So my goal is by PyCon to write the plugin interface for locking.

00:21:58.020 --> 00:22:01.640
So the first version will use pip-tools, actually.

00:22:01.640 --> 00:22:04.180
That would be the first plugin for lock files.

00:22:04.380 --> 00:22:08.720
But I won't be writing like an actual lock file spec.

00:22:08.940 --> 00:22:12.560
I'll just be using an existing tool.

00:22:12.560 --> 00:22:18.500
It's kind of blocked on Brett because he has most context and knowledge about that.

00:22:18.500 --> 00:22:21.460
So yeah, I'm waiting on Brett, basically.

00:22:21.460 --> 00:22:21.940
Got it.

00:22:21.940 --> 00:22:22.440
Brett Cannon.

00:22:22.440 --> 00:22:23.620
That being Brett Cannon.

00:22:23.620 --> 00:22:24.140
Yes.

00:22:24.140 --> 00:22:25.900
Python developer extraordinaire.

00:22:25.900 --> 00:22:26.540
We all know.

00:22:26.540 --> 00:22:27.140
Okay.

00:22:27.140 --> 00:22:27.740
Very cool.

00:22:28.180 --> 00:22:29.740
Other thing before we dive into it here.

00:22:29.740 --> 00:22:33.700
I see that you have some rough action going there.

00:22:33.700 --> 00:22:37.940
I just had Charlie on the show not too long ago to talk about rough.

00:22:37.940 --> 00:22:38.980
It's pretty impressive.

00:22:38.980 --> 00:22:40.240
When did you adopt that?

00:22:40.240 --> 00:22:41.400
I was an early adopter.

00:22:41.400 --> 00:22:43.020
I guess a few months ago now.

00:22:43.020 --> 00:22:43.340
Yeah.

00:22:43.340 --> 00:22:44.120
What's your experience?

00:22:44.120 --> 00:22:44.820
It's fantastic.

00:22:45.240 --> 00:22:48.480
It's kind of like a meme to say it now, but it's true.

00:22:48.480 --> 00:22:49.680
Like, it's so fast.

00:22:49.680 --> 00:22:52.880
It's almost like you wonder if it's doing anything.

00:22:52.880 --> 00:22:54.240
Like, it's...

00:22:54.240 --> 00:22:55.120
That was my first thought.

00:22:55.120 --> 00:22:56.360
When I ran it, I'm like, wait a minute.

00:22:56.360 --> 00:22:57.920
Maybe I didn't give it any files or something.

00:22:57.920 --> 00:23:02.360
Because I ran it on Talk Python training, which is like 20,000 lines of Python code.

00:23:02.360 --> 00:23:04.360
And it just went, bam, like that.

00:23:04.360 --> 00:23:05.940
And I'm like, maybe it didn't take that.

00:23:05.940 --> 00:23:09.580
Because that seems like that should take a moment at least somehow.

00:23:09.580 --> 00:23:10.040
Yeah.

00:23:10.040 --> 00:23:10.840
Okay.

00:23:10.840 --> 00:23:11.740
So you recommend it?

00:23:11.740 --> 00:23:12.080
Yeah.

00:23:12.120 --> 00:23:13.980
All around kind of one location.

00:23:13.980 --> 00:23:19.060
And it supports, like, so many options as well, which is nice.

00:23:19.060 --> 00:23:19.480
Yeah.

00:23:19.480 --> 00:23:19.900
Indeed.

00:23:19.900 --> 00:23:20.500
Cool, cool.

00:23:20.500 --> 00:23:21.180
All right.

00:23:21.180 --> 00:23:24.060
Well, let's start with a high-level overview.

00:23:24.060 --> 00:23:28.100
And then what I want to do is I want to walk through creating a project with this.

00:23:28.100 --> 00:23:32.720
And I've got questions and thoughts as I kind of experience Hatch.

00:23:32.720 --> 00:23:36.340
Not for the first time, but for somewhat of a newbie perspective.

00:23:36.340 --> 00:23:37.780
So I think we'll do that.

00:23:37.780 --> 00:23:39.960
But let's start with the high-level features.

00:23:40.280 --> 00:23:44.600
So the Hatch project is, I guess, conceptually two different projects.

00:23:44.600 --> 00:23:47.860
Hatch itself is the command line.

00:23:47.860 --> 00:23:53.880
So doing publishing and environment management, versioning, stuff like that.

00:23:53.880 --> 00:24:00.400
Then Hatch thing is the build system, similar to a flip or set tools.

00:24:00.400 --> 00:24:02.320
So that's where the build system is.

00:24:03.540 --> 00:24:05.980
And you can use it independently, right?

00:24:05.980 --> 00:24:09.900
You don't have to be doing anything with Hatch to use HatchLeen.

00:24:09.900 --> 00:24:13.500
Basically to replace setup.py, right?

00:24:13.500 --> 00:24:13.780
Yeah.

00:24:13.780 --> 00:24:16.940
You can replace it with the pyproject.toml.

00:24:16.940 --> 00:24:17.480
Yeah.

00:24:17.480 --> 00:24:21.560
And most people do use HatchLeen and not use Hatch.

00:24:21.560 --> 00:24:22.300
So yeah.

00:24:22.300 --> 00:24:25.620
HatchLeen is much more popular than Hatch itself.

00:24:25.840 --> 00:24:26.080
Okay.

00:24:26.080 --> 00:24:30.600
So for a config, it's a bit more simple than setup tools.

00:24:30.600 --> 00:24:37.280
The default logic makes more sense for new users, especially.

00:24:37.280 --> 00:24:41.220
It's hard to mess up packaging with HatchLeen.

00:24:41.220 --> 00:24:41.480
Yeah.

00:24:41.480 --> 00:24:41.800
Excellent.

00:24:41.800 --> 00:24:47.060
So I could have just some random Python project that I've put together with a PyProject.tomal

00:24:47.060 --> 00:24:53.120
I wrote by hand and I could just put HatchLeen in as the build subsystem to make the wheels

00:24:53.120 --> 00:24:54.180
and whatnot, right?

00:24:54.180 --> 00:24:56.640
One benefit of HatchLeen, I hatched too.

00:24:56.640 --> 00:24:58.460
Basically everything is a plugin.

00:24:58.460 --> 00:25:04.280
So you can have like a build hook that does like the mypyC, which we have.

00:25:04.280 --> 00:25:12.240
You can have a metadata hook where you insert like project URLs from some arbitrary location.

00:25:12.240 --> 00:25:16.400
Pretty much everything you can plug into and modify.

00:25:16.400 --> 00:25:16.960
Yeah.

00:25:16.960 --> 00:25:17.340
Excellent.

00:25:17.340 --> 00:25:18.220
All right.

00:25:18.220 --> 00:25:20.780
And then a robust environment management.

00:25:20.780 --> 00:25:21.120
Yeah.

00:25:21.120 --> 00:25:28.480
So for this, this you can think of as a, as talks or knocks, similar in spirit to that.

00:25:28.480 --> 00:25:36.240
The difference is knocks and talks kind of treat environments as applications where an environment

00:25:36.240 --> 00:25:39.700
is tied to a command and you run an environment.

00:25:39.700 --> 00:25:43.840
Whereas in Hatch, you have environments that you define.

00:25:43.840 --> 00:25:47.260
And then within that, you have scripts that you can run.

00:25:47.260 --> 00:25:55.560
So you can have a style environment that might be able to rent with one script or run the

00:25:55.560 --> 00:25:58.740
formatter to change the code with another script.

00:25:58.740 --> 00:26:03.100
An environment itself isn't actually like, like an app.

00:26:03.100 --> 00:26:05.620
You can run arbitrary commands.

00:26:05.620 --> 00:26:05.980
Right.

00:26:06.080 --> 00:26:10.880
Like I could run Hatch test or something like that.

00:26:10.880 --> 00:26:11.040
Yeah.

00:26:11.040 --> 00:26:12.160
And passing flags.

00:26:12.160 --> 00:26:12.920
Yeah.

00:26:12.920 --> 00:26:13.260
Okay.

00:26:13.260 --> 00:26:21.000
And then often people who published packages to PyPI, they've done this with Twine or some

00:26:21.000 --> 00:26:21.740
tool like that.

00:26:21.860 --> 00:26:24.080
And Hatch has that capability as well, right?

00:26:24.080 --> 00:26:24.460
Right.

00:26:24.460 --> 00:26:24.700
Yeah.

00:26:24.700 --> 00:26:25.740
To, yeah.

00:26:25.740 --> 00:26:31.260
PyPI or some private, you know, corporate owned index.

00:26:31.260 --> 00:26:36.540
I think those are probably going to be more popular than they used to be with all the supply

00:26:36.540 --> 00:26:37.980
chain silliness.

00:26:37.980 --> 00:26:38.680
Yeah, that's true.

00:26:38.680 --> 00:26:39.060
Yeah.

00:26:39.060 --> 00:26:43.940
Do you have any visibility into how people are using it, whether it's public or private or

00:26:43.940 --> 00:26:44.840
As far as Hatch?

00:26:45.200 --> 00:26:45.440
Yeah.

00:26:45.440 --> 00:26:49.520
Well, how they're using Hatch to publish, do you have any visibility whether they're

00:26:49.520 --> 00:26:52.380
publishing to PyPI or to some kind of private index?

00:26:52.380 --> 00:26:58.120
Based on the issues I have open, like future requests, most are talking about private indices,

00:26:58.120 --> 00:26:59.060
actually.

00:26:59.060 --> 00:26:59.660
Interesting.

00:26:59.660 --> 00:27:00.060
Yeah.

00:27:00.060 --> 00:27:02.460
It's probably those are the ones where the edge cases live.

00:27:02.460 --> 00:27:05.620
You know, the standard one place is dialed in.

00:27:05.620 --> 00:27:10.660
And what if mine's using Active Directory for authentication as I publish it?

00:27:10.660 --> 00:27:11.480
Like, it's doing what?

00:27:11.480 --> 00:27:15.180
Artifactory is quite popular as well.

00:27:15.180 --> 00:27:15.620
Yeah.

00:27:15.620 --> 00:27:15.960
Yeah.

00:27:15.960 --> 00:27:17.020
That absolutely is.

00:27:17.020 --> 00:27:21.040
Another thing that was interesting is you have the ability to do version management,

00:27:21.040 --> 00:27:22.300
as we'll see in just a minute.

00:27:22.300 --> 00:27:24.800
You can say, like, what version is my package?

00:27:24.800 --> 00:27:30.860
Increment the build or do a major version increment or put it into a release candidate mode.

00:27:30.860 --> 00:27:31.220
Yeah.

00:27:31.220 --> 00:27:33.780
And this is plugable as well.

00:27:33.780 --> 00:27:39.740
So there's one plugin that's popular that wraps setup tools SCM, which doesn't actually

00:27:39.740 --> 00:27:41.700
depend on setup tools anymore.

00:27:41.700 --> 00:27:42.880
It's just in name.

00:27:42.880 --> 00:27:44.160
It's still called that.

00:27:44.160 --> 00:27:49.940
So that pulls your version from Git or Mercurial or Subversion.

00:27:49.940 --> 00:27:53.120
And you can source the versions that way as well.

00:27:53.120 --> 00:27:53.580
Interesting.

00:27:53.580 --> 00:27:53.960
Yeah.

00:27:53.960 --> 00:27:54.680
I really like that.

00:27:54.680 --> 00:27:56.320
I think that's a neat aspect.

00:27:56.980 --> 00:28:01.200
And then configurable project generation with same defaults.

00:28:01.200 --> 00:28:01.520
Yeah.

00:28:01.520 --> 00:28:08.640
I don't have too many options with this yet, but you can make it a flat layout or like a source

00:28:08.640 --> 00:28:09.140
directory.

00:28:09.140 --> 00:28:16.220
There's an option to add tests, which puts more stuff in your PyProject.com.

00:28:16.760 --> 00:28:22.680
You can add a CLI, which has a very simple template for GitHub actions.

00:28:22.680 --> 00:28:30.860
And then there's a flag for your CLI that would give you a click and set up a command line for

00:28:30.860 --> 00:28:31.940
your package.

00:28:31.940 --> 00:28:35.440
I don't know how directly related this is to anything that Hatch does.

00:28:35.440 --> 00:28:40.940
But the usage of the PyProject.toml and then building it as a package, something you could

00:28:40.940 --> 00:28:45.920
install, gives you a really nice way to create a global CLI, right?

00:28:45.920 --> 00:28:48.180
With just the entry points in the PyProject.toml.

00:28:48.180 --> 00:28:48.500
Yeah.

00:28:48.500 --> 00:28:49.960
That's what that CLI flag does.

00:28:49.960 --> 00:28:50.500
Yeah.

00:28:50.500 --> 00:28:51.140
It's very nice.

00:28:51.140 --> 00:28:51.560
Okay.

00:28:51.560 --> 00:28:51.960
Yeah.

00:28:52.220 --> 00:28:55.820
Then also you say it's two to three times faster than equivalent tools.

00:28:55.820 --> 00:28:56.420
That's great.

00:28:56.420 --> 00:28:57.980
It really is just one trick.

00:28:57.980 --> 00:29:04.340
It's just I make the code not as readable by using lazy imports everywhere.

00:29:04.340 --> 00:29:08.860
I just put lazy imports and that's why it's faster, essentially.

00:29:08.860 --> 00:29:09.140
Yeah.

00:29:09.140 --> 00:29:12.920
Because there's a lot of execution paths that only use some of the imports in effect, right?

00:29:12.920 --> 00:29:13.220
Yeah.

00:29:13.220 --> 00:29:17.700
Going back to the scripts, Jonathan points out, I love the custom scripts within Hatch.

00:29:17.700 --> 00:29:22.020
It makes creating build pipelines way easier and moves most of the logic within the Hatch

00:29:22.020 --> 00:29:25.300
configure rather than spreading them around multiple files, which is, that's pretty cool.

00:29:25.300 --> 00:29:25.600
Yeah.

00:29:25.600 --> 00:29:26.480
That's what I do as well.

00:29:26.480 --> 00:29:26.740
Cool.

00:29:26.740 --> 00:29:31.840
I even use Hatch for non-Python projects just for the scripting.

00:29:31.840 --> 00:29:32.480
Yeah.

00:29:32.480 --> 00:29:32.860
Cool.

00:29:32.860 --> 00:29:38.020
Well, I mean, Python traditionally had been used for a lot of that, you know, called it glue

00:29:38.020 --> 00:29:38.500
code, right?

00:29:38.500 --> 00:29:42.300
A lot of, well, I really want to do these other things with these other systems and scripts,

00:29:42.300 --> 00:29:44.220
but let me kind of orchestrate that in Python.

00:29:44.220 --> 00:29:46.860
And that sounds a bit, a bit like that.

00:29:46.860 --> 00:29:47.020
Yeah.

00:29:47.100 --> 00:29:48.940
Let's do a little walkthrough, I think.

00:29:48.940 --> 00:29:49.800
I think that'll be fun.

00:29:49.800 --> 00:29:55.540
But first of all, I think this is just MKDocs, but thank you for pointing it out that your

00:29:55.540 --> 00:29:59.340
documentation and your website here have hotkeys.

00:29:59.340 --> 00:29:59.660
Yeah.

00:29:59.660 --> 00:30:03.380
MKDocs with the material theme, which is very nice.

00:30:03.380 --> 00:30:03.720
Yeah.

00:30:03.720 --> 00:30:06.480
So it turns out if I just press a dot, it goes to the next page.

00:30:06.480 --> 00:30:08.320
And if I comment, it goes to the previous page.

00:30:08.320 --> 00:30:11.280
And it doesn't sound like much, but actually it's really nice.

00:30:11.280 --> 00:30:12.300
It is really nice.

00:30:12.300 --> 00:30:17.320
Before we leave this front page, one other thing to note to go back to the top, just because

00:30:17.320 --> 00:30:18.340
I'm very happy with it.

00:30:18.340 --> 00:30:22.000
The logo was actually generated by Dolly, the AI.

00:30:22.000 --> 00:30:22.720
Okay.

00:30:22.720 --> 00:30:23.540
Yeah.

00:30:23.540 --> 00:30:24.200
Fantastic.

00:30:24.420 --> 00:30:24.520
Yeah.

00:30:24.520 --> 00:30:25.320
I generated the logo.

00:30:25.320 --> 00:30:30.040
And then I had a brother of a friend from work, I like actually touch it up.

00:30:30.040 --> 00:30:30.520
So.

00:30:30.520 --> 00:30:31.840
Oh, it's a really cool logo.

00:30:31.840 --> 00:30:32.480
I like it.

00:30:32.480 --> 00:30:35.760
I didn't catch on that it was made by Dolly, but now I see that.

00:30:35.760 --> 00:30:38.200
I've been doing a lot with mid-journey.

00:30:38.340 --> 00:30:43.340
And I think these AI tools are, I think they're a little bit fraught with maybe a few moral

00:30:43.340 --> 00:30:47.200
issues about like, well, did you really train it on stuff that you were allowed to train on?

00:30:47.200 --> 00:30:51.560
But putting that aside, if they exist, you know, assuming just they exist, they're really

00:30:51.560 --> 00:30:51.800
neat.

00:30:51.800 --> 00:30:53.860
And there's really amazing stuff you can do with them.

00:30:53.860 --> 00:30:54.160
Yeah.

00:30:54.160 --> 00:30:54.460
Yeah.

00:30:54.460 --> 00:30:55.040
Cool.

00:30:55.040 --> 00:31:00.520
I guess maybe a quick sidebar there is if you were a project maintainer out there and you

00:31:00.520 --> 00:31:06.260
don't really have a logo, drop in on Dolly or Mid Journey and spend half an hour and

00:31:06.260 --> 00:31:06.780
you probably will.

00:31:07.900 --> 00:31:12.700
But I just think there are so many people that build web apps out there that don't put

00:31:12.700 --> 00:31:13.500
hotkeys into them.

00:31:13.500 --> 00:31:15.800
And it's, it is not that hard.

00:31:15.800 --> 00:31:17.360
And it is such a nice experience.

00:31:17.360 --> 00:31:20.540
And it brings you so much closer to a native app type of experience.

00:31:20.540 --> 00:31:22.960
So please put, put some hotkeys out there for us.

00:31:22.960 --> 00:31:23.200
All right.

00:31:23.200 --> 00:31:25.000
So pressing dot takes to the first one.

00:31:25.000 --> 00:31:28.660
So installing hatch, obviously you can pip install it.

00:31:28.660 --> 00:31:32.860
However, you offer some interesting other areas I want to talk about.

00:31:32.860 --> 00:31:35.000
First of all, my favorite pipX.

00:31:35.000 --> 00:31:36.120
I love pipX.

00:31:36.460 --> 00:31:42.800
If you've got a tool that you don't directly import into your code that does stuff against

00:31:42.800 --> 00:31:43.560
your Python apps.

00:31:43.560 --> 00:31:46.900
Boy, pipX is almost always a good choice.

00:31:46.900 --> 00:31:47.560
What do you think?

00:31:47.560 --> 00:31:47.920
Oh yeah.

00:31:47.920 --> 00:31:48.760
PipX is awesome.

00:31:48.760 --> 00:31:49.120
Yeah.

00:31:49.120 --> 00:31:49.420
Yeah.

00:31:49.420 --> 00:31:55.040
It just allows you to, you know, provide isolated apps for command line apps.

00:31:55.040 --> 00:31:55.360
Yeah.

00:31:55.460 --> 00:31:58.520
It manages everything and you don't even have to think about it.

00:31:58.520 --> 00:31:59.080
So yeah.

00:31:59.080 --> 00:32:00.640
It just creates its own little environment.

00:32:00.640 --> 00:32:03.940
And you can say upgrade all my installed CLI tools.

00:32:03.940 --> 00:32:05.700
It's like package manager.

00:32:05.700 --> 00:32:08.700
If the thing that it's managing is built with Python is great.

00:32:08.700 --> 00:32:11.320
I had chat on the creator of pipX a while ago.

00:32:11.320 --> 00:32:13.260
So people, if they want to hear more about it, they can listen to that show.

00:32:13.260 --> 00:32:14.120
Homebrew.

00:32:14.120 --> 00:32:14.600
Good.

00:32:14.720 --> 00:32:17.420
MacPort is interesting.

00:32:17.420 --> 00:32:19.760
But the one that stood out to me was Mamba.

00:32:19.760 --> 00:32:21.240
I'm like, wait, what's Mamba?

00:32:23.740 --> 00:32:24.340
It's interesting.

00:32:24.340 --> 00:32:25.600
I hadn't heard of that, but yeah.

00:32:25.600 --> 00:32:25.900
Yeah.

00:32:25.900 --> 00:32:30.560
I don't use Konda that much, but as far as I know, there's a few different distributions

00:32:30.560 --> 00:32:31.880
of Konda.

00:32:31.880 --> 00:32:39.200
So there's Anaconda, which gives you like over a gigabyte installed, like massive scientific

00:32:39.200 --> 00:32:39.700
computing.

00:32:39.700 --> 00:32:47.640
There's Miniconda and Miniconda gives you just the bare minimum Konda CLI with like package

00:32:47.640 --> 00:32:48.060
management.

00:32:48.060 --> 00:32:50.160
And that's what most people use, I think.

00:32:50.160 --> 00:32:53.460
But now there's Mamba, which is like Miniconda.

00:32:53.460 --> 00:32:57.620
But it pulls from Konda Forge by default.

00:32:57.620 --> 00:33:05.440
And Konda Forge is sort of like our PyPI, where anybody can contribute their own packages.

00:33:05.440 --> 00:33:07.720
So I think that's the main difference.

00:33:07.720 --> 00:33:11.280
And yeah, it is faster and it was rewritten.

00:33:11.280 --> 00:33:13.260
And that's what Mamba is.

00:33:13.260 --> 00:33:20.120
It's a re-implementation of Konda, the Konda package manager in C++, doing parallel downloading

00:33:20.120 --> 00:33:23.680
and other bits of that, which is interesting.

00:33:23.680 --> 00:33:24.000
Cool.

00:33:24.000 --> 00:33:29.260
Well, I don't use either all that much, but it's still kind of cool to see there.

00:33:29.260 --> 00:33:33.460
So you could Mamba install Hatch if that was your workflow as well, right?

00:33:33.460 --> 00:33:34.420
Okay.

00:33:34.420 --> 00:33:36.100
So installing it pretty easy.

00:33:36.420 --> 00:33:40.660
If you were to do it, if somebody gave you a blank machine and said, set this up to use

00:33:40.660 --> 00:33:42.340
Hatch, what would you do?

00:33:42.340 --> 00:33:44.700
For now, I would do PIPX.

00:33:44.700 --> 00:33:45.080
Okay.

00:33:45.080 --> 00:33:51.320
In the future, like we talked about in the beginning, I plan to have like an actual executable that

00:33:51.320 --> 00:33:53.080
does the work, like Python does.

00:33:53.080 --> 00:33:56.020
But until then, then probably PIPX.

00:33:56.200 --> 00:33:56.420
Okay.

00:33:56.420 --> 00:34:03.440
So maybe then it would be Homebrew and Winget and apps, things like the higher level OS ones.

00:34:03.440 --> 00:34:03.640
Okay.

00:34:03.640 --> 00:34:08.840
This portion of Talk Python To Me is brought to you by Sentry.

00:34:08.840 --> 00:34:11.540
Is your Python application fast?

00:34:11.540 --> 00:34:15.540
Or does it sometimes suffer from slowdowns and unexpected latency?

00:34:15.540 --> 00:34:18.160
Does this usually only happen in production?

00:34:18.160 --> 00:34:21.320
It's really tough to track down the problems at that point, isn't it?

00:34:21.880 --> 00:34:26.640
If you've looked at APM, application performance monitoring products before, they may have felt

00:34:26.640 --> 00:34:28.200
out of place for software teams.

00:34:28.200 --> 00:34:33.460
Many of them are more focused on legacy problems made for ops and infrastructure teams to keep

00:34:33.460 --> 00:34:36.080
their infrastructure and services up and running.

00:34:36.080 --> 00:34:40.240
Sentry has just launched their new APM service.

00:34:40.240 --> 00:34:45.720
And Sentry's approach to application monitoring is focused on being actionable, affordable, and

00:34:45.720 --> 00:34:47.280
actually built for developers.

00:34:47.280 --> 00:34:51.860
Whether it's a slow running query or latent payment endpoint that's at risk of timing out

00:34:51.860 --> 00:34:57.080
and causing sales to tank, Sentry removes the complexity and does the analysis for you,

00:34:57.080 --> 00:35:01.020
surfacing the most critical performance issues so you can address them immediately.

00:35:01.020 --> 00:35:07.560
Most legacy APM tools focus on an ingest-everything approach, resulting in high storage costs,

00:35:07.560 --> 00:35:12.880
noisy environments, and an enormous amount of telemetry data most developers will never need

00:35:12.880 --> 00:35:13.360
to analyze.

00:35:13.360 --> 00:35:18.580
Sentry has taken a different approach, building the most affordable APM solution in the market.

00:35:19.280 --> 00:35:23.740
They've removed the noise and extracted the maximum value out of your performance data while passing

00:35:23.740 --> 00:35:29.240
the savings directly onto you, especially for Talk Python listeners who use the code Talk Python.

00:35:29.240 --> 00:35:36.880
So get started at talkpython.fm/sentry and be sure to use their code Talk Python all lowercase

00:35:36.880 --> 00:35:39.380
so you let them know that you heard about them from us.

00:35:39.960 --> 00:35:43.800
My thanks to Sentry for keeping this podcast going strong.

00:35:43.800 --> 00:35:50.620
All right, so the way we get started is we just say Hatch New.

00:35:50.620 --> 00:35:54.980
And I thought one of the things I don't normally do here on the podcast, but I think it might be fun,

00:35:54.980 --> 00:36:00.800
is just to kind of go through these steps here to see what it's like to get a sense,

00:36:00.800 --> 00:36:02.740
because then I can ask questions.

00:36:02.940 --> 00:36:05.500
So I'll say Hatch New Calci.

00:36:05.500 --> 00:36:06.780
I'll call my little app Calci.

00:36:06.780 --> 00:36:08.940
And tell us about what we get when we run that.

00:36:08.940 --> 00:36:09.340
Sure.

00:36:09.340 --> 00:36:16.380
So it makes your package as you named it with About.py and Init.py.

00:36:16.380 --> 00:36:21.700
The Init.py obviously makes it, turns that directory into a Python package.

00:36:21.700 --> 00:36:25.520
The About.py stores the version by default.

00:36:25.740 --> 00:36:28.400
And that's where it reads it by default.

00:36:28.400 --> 00:36:30.500
It gives you, oh yeah, go ahead.

00:36:30.500 --> 00:36:33.540
Well, I was just going to say, one of the things I can type now is Hatch version.

00:36:33.540 --> 00:36:38.400
And it gives me, basically pulls out the version of About.py, right?

00:36:38.400 --> 00:36:44.640
Yeah, and you can, if you do the same command again, but pass in R like minor,

00:36:44.640 --> 00:36:46.360
then you can bump it as well.

00:36:46.360 --> 00:36:49.600
Yeah, so the old version is what it says, is 001.

00:36:49.600 --> 00:36:51.020
The new version is 010.

00:36:51.020 --> 00:36:53.160
Could I say build and get 11?

00:36:53.160 --> 00:36:54.460
Something like that?

00:36:54.460 --> 00:36:56.320
No, what would I type to change the last one?

00:36:56.320 --> 00:36:56.760
RC.

00:36:56.760 --> 00:36:57.840
You should do RC.

00:36:57.840 --> 00:36:58.260
Okay.

00:36:58.260 --> 00:37:01.280
It's documented the allowed arguments as well.

00:37:01.280 --> 00:37:01.980
Got it, yeah, sure.

00:37:01.980 --> 00:37:07.680
So yeah, then it also gives you a test directory that doesn't have any predefined tests,

00:37:07.680 --> 00:37:09.100
but you can add tests to it.

00:37:09.100 --> 00:37:13.740
And then the most important part is the PyProject.tomla,

00:37:13.740 --> 00:37:17.100
which has your metadata and your other config.

00:37:17.100 --> 00:37:20.260
So it's got the build system set to be Hatchling.

00:37:20.260 --> 00:37:23.300
And then it's got all the project settings, like who is the author?

00:37:23.300 --> 00:37:25.000
What are the requirements?

00:37:25.000 --> 00:37:26.740
And all that stuff, right?

00:37:26.740 --> 00:37:29.620
And from the author, it would have gotten that from Git.

00:37:29.620 --> 00:37:31.500
The default comes from Git.

00:37:31.500 --> 00:37:33.920
So that's why it has the right stuff for you.

00:37:33.920 --> 00:37:36.520
And then down here is testing.

00:37:36.520 --> 00:37:40.120
So some coverage stuff and environments.

00:37:40.460 --> 00:37:44.760
When I typed Hatchinew, could I have made it ask me those questions, like who are you and stuff?

00:37:44.760 --> 00:37:46.380
There is an interactive mode, yeah.

00:37:46.380 --> 00:37:47.140
Okay, yeah.

00:37:47.140 --> 00:37:54.320
Yeah, so you also, as part of this PyProject.tomla, you create some of these commands.

00:37:54.320 --> 00:37:56.720
These are the scripts you were talking about a little bit, right?

00:37:56.800 --> 00:37:59.600
Like you've got the test and other options you can run.

00:37:59.720 --> 00:38:06.220
This default example down there has environment, which is just default, which is a little bit special.

00:38:06.220 --> 00:38:09.500
It just means you don't have to add a prefix on the command line.

00:38:09.500 --> 00:38:11.480
And so there's two scripts by default.

00:38:11.480 --> 00:38:12.620
A cove.

00:38:13.020 --> 00:38:18.400
So you could do like a hatch run cove, and it would run pytest with coverage.

00:38:18.400 --> 00:38:21.460
And then another command is no cove.

00:38:21.460 --> 00:38:21.760
Yeah.

00:38:21.760 --> 00:38:24.400
And I can do hatch test, hatch run test.

00:38:24.400 --> 00:38:25.800
Is that a thing as well?

00:38:25.800 --> 00:38:26.980
There is no test command.

00:38:26.980 --> 00:38:28.340
You could do pytest.

00:38:28.340 --> 00:38:31.540
So if you do hatch run pytest, it could, yeah.

00:38:31.540 --> 00:38:32.080
Yeah, excellent.

00:38:32.080 --> 00:38:32.780
That's really cool.

00:38:32.780 --> 00:38:36.160
Yeah, so it basically creates the structure for you.

00:38:36.160 --> 00:38:43.560
And the workflow that we just discussed would be if I've got a folder and I want to start from absolute scratch.

00:38:43.560 --> 00:38:48.620
I want to create the entire directory structure through hatch.

00:38:48.620 --> 00:38:55.840
But there's also a way I can go to an existing one and kind of convert it to hatch or upgrade it to hatch, right?

00:38:55.840 --> 00:39:01.400
Me and other contributors have done it so much that most of the edge cases are gone.

00:39:01.400 --> 00:39:09.180
So it can take pretty much any setup.py and turn it into hatch pyproject.tomalot.

00:39:09.180 --> 00:39:11.000
It's pretty good now.

00:39:11.000 --> 00:39:11.340
Okay.

00:39:11.340 --> 00:39:20.980
And because it doesn't actually need hatch the CLI, the environment tool to do that, to run and build,

00:39:20.980 --> 00:39:27.440
you could just use that to get your pyproject.tomalot and use hatchling as a build engine, right?

00:39:27.440 --> 00:39:28.540
But still just keep going.

00:39:28.540 --> 00:39:29.020
Yeah, exactly.

00:39:29.020 --> 00:39:29.320
Okay.

00:39:29.320 --> 00:39:36.720
So people are sitting out there like, I really should be using pyproject.tomal, but, you know, inertia, I don't really want to do it.

00:39:36.720 --> 00:39:39.660
Like, hatch new init might do it, right?

00:39:39.660 --> 00:39:40.300
Yeah, yeah.

00:39:40.300 --> 00:39:41.020
That's an option.

00:39:41.020 --> 00:39:46.160
Before you time out, if you do which Python, maybe I can just illustrate.

00:39:46.160 --> 00:39:53.780
And if you do hatch run which Python 3, it will show you that it's actually in a managed virtual environment.

00:39:53.780 --> 00:39:54.360
Okay.

00:39:55.080 --> 00:40:03.220
So it's created a virtual environment over in, at least for me, library application support, hatch environments, and so on, so on, based on the project name.

00:40:03.220 --> 00:40:05.740
And then it has some big long deal on the end?

00:40:05.740 --> 00:40:06.960
It's just a hat, yeah.

00:40:06.960 --> 00:40:08.420
It's just a checksum.

00:40:08.580 --> 00:40:08.780
Okay.

00:40:08.780 --> 00:40:10.440
What is that a checksum based on?

00:40:10.440 --> 00:40:14.220
The reason I ask is, what do I change to make this no longer work?

00:40:16.360 --> 00:40:25.820
So I do that because it's possible that somewhere else on your machine, you might have another project, maybe a fork of calci with the same name.

00:40:25.820 --> 00:40:26.480
So I have to have a hash.

00:40:26.480 --> 00:40:26.820
Likely.

00:40:26.820 --> 00:40:29.660
It's a very popular library, so it's likely.

00:40:29.660 --> 00:40:31.100
That's why I do that, yeah.

00:40:31.100 --> 00:40:31.500
I see.

00:40:31.500 --> 00:40:31.720
Okay.

00:40:31.720 --> 00:40:35.160
That's like a hash of the path to where the project is or something.

00:40:35.160 --> 00:40:35.560
Okay.

00:40:35.560 --> 00:40:35.920
Yep.

00:40:35.920 --> 00:40:38.620
A lot of projects, a lot of management tools work this way.

00:40:38.620 --> 00:40:44.140
Conda works this way, for example, where there's some other place where the virtual environments live.

00:40:44.140 --> 00:40:51.840
Is there a way, another workflow that's pretty common is to have the virtual environment in a VNV folder at the root of the project.

00:40:51.840 --> 00:40:56.920
Is there a way when I create my project to say, I want a local ENV?

00:40:56.920 --> 00:41:04.120
Not at project creation time, but there is a way in either hatch config or in pyproject.tomo.

00:41:04.380 --> 00:41:05.920
They're able to change that.

00:41:05.920 --> 00:41:06.440
Yeah.

00:41:06.440 --> 00:41:08.620
Which is documented on the site.

00:41:08.620 --> 00:41:08.880
Yeah.

00:41:08.880 --> 00:41:13.120
The hatch config is one of the things I would do.

00:41:13.120 --> 00:41:18.420
There's a lot of cool CLI tools where you can ask it to show me the details of whatever it is.

00:41:18.420 --> 00:41:27.460
So what would I put, say, into the config to say, create my VNV locally and call it what?

00:41:27.460 --> 00:41:28.860
Is it this DERS VNV?

00:41:28.860 --> 00:41:30.280
Yeah, DERS and ENV.

00:41:30.280 --> 00:41:30.920
Yeah.

00:41:30.920 --> 00:41:32.400
What would I put in there?

00:41:32.580 --> 00:41:40.280
You would have a subtable for virtual and then have the path be just .vend, basically.

00:41:40.280 --> 00:41:40.860
Right.

00:41:40.860 --> 00:41:41.060
Okay.

00:41:41.060 --> 00:41:43.640
So like a .slash, whatever you want to call it locally.

00:41:43.640 --> 00:41:44.140
Yeah.

00:41:44.140 --> 00:41:50.920
Is this, I guess I could do hatch find config or config find, I guess?

00:41:50.920 --> 00:41:51.540
Config find.

00:41:51.540 --> 00:41:51.740
Config find.

00:41:51.740 --> 00:41:51.960
Yeah.

00:41:52.120 --> 00:41:52.380
Right.

00:41:52.380 --> 00:42:00.480
And that will, so this is a global, like, how do my projects get started using hatch for my machine, not a per project deal, right?

00:42:00.480 --> 00:42:00.800
Yeah.

00:42:00.900 --> 00:42:01.260
That's cool.

00:42:01.260 --> 00:42:03.000
So kind of like git config.

00:42:03.000 --> 00:42:09.500
Once I set up my machine, if I say, well, I like my virtual environments like this, then I'll be okay.

00:42:09.500 --> 00:42:09.720
Right?

00:42:09.720 --> 00:42:10.080
Yeah.

00:42:10.080 --> 00:42:12.660
It makes it easier to distribute tooling.

00:42:12.660 --> 00:42:22.420
Like for, if you're managing like some corporate environment where you're using hatch for everything, then it's nice to have a config that you can modify.

00:42:22.420 --> 00:42:27.100
Just as a machine level, then every project will do the same.

00:42:27.100 --> 00:42:30.360
Just as a team to say, look, we always want tests.

00:42:30.360 --> 00:42:34.720
We always want this other thing that we call it that we always want this default library.

00:42:34.720 --> 00:42:35.260
Sorry.

00:42:35.260 --> 00:42:37.300
We want this default license, right?

00:42:37.300 --> 00:42:39.060
We don't want MIT.

00:42:39.060 --> 00:42:43.580
We want, you know, corp.inc or whatever license that we use.

00:42:43.580 --> 00:42:46.640
So quick question from ZL out there that I think is relevant.

00:42:46.640 --> 00:42:49.740
Is this useful for application development, not libraries?

00:42:50.060 --> 00:42:55.160
Say if I'm building like a Flask app or a FastAPI app, like would, would this be relevant?

00:42:55.160 --> 00:42:55.500
Yeah.

00:42:55.500 --> 00:43:00.780
So especially with the environment management, that's kind of what applications will use anyway.

00:43:00.780 --> 00:43:06.540
The missing feature, of course, like the other person asked is the lock files.

00:43:06.540 --> 00:43:11.360
For any app you're going to want to be able to reproducibly build the app.

00:43:11.360 --> 00:43:18.240
So right now there's not a way built in other than using an environment with like pip-tools or something.

00:43:18.760 --> 00:43:21.560
So I'm going to add that plugin interface soon.

00:43:21.560 --> 00:43:22.060
Interesting.

00:43:22.060 --> 00:43:24.160
Does pip-tools work with piproject.toml?

00:43:24.160 --> 00:43:24.940
It does now.

00:43:24.940 --> 00:43:25.860
Yeah, it does.

00:43:25.860 --> 00:43:26.200
Yeah.

00:43:26.200 --> 00:43:30.880
I've only used it with requirements.in and then generate the requirements.txt of it.

00:43:30.880 --> 00:43:31.060
Yeah.

00:43:31.060 --> 00:43:33.240
They added that last summer, I think.

00:43:33.240 --> 00:43:34.780
I'm so behind the times on this.

00:43:34.780 --> 00:43:38.300
You know, these workflows, I'm sort of joking, but also not.

00:43:38.300 --> 00:43:41.960
These workflows, you kind of get into like, well, here's how I build these apps.

00:43:41.960 --> 00:43:43.380
Here's how I manage my requirements.

00:43:43.380 --> 00:43:47.080
And then you just tunnel, I think a lot of people just go, okay, well, that's working

00:43:47.080 --> 00:43:47.380
for me.

00:43:47.380 --> 00:43:48.000
I'm doing that.

00:43:48.000 --> 00:43:48.500
You know?

00:43:48.500 --> 00:43:49.320
Yeah, me too.

00:43:49.320 --> 00:43:49.720
Me too.

00:43:49.720 --> 00:43:50.200
Yeah.

00:43:50.200 --> 00:43:50.460
Yeah.

00:43:50.460 --> 00:43:50.960
Yeah.

00:43:50.960 --> 00:43:58.660
And then, so if I want to, like, so for example, when I asked which Python, it said the one from

00:43:58.660 --> 00:43:59.840
Homebrew you've installed, silly.

00:43:59.960 --> 00:44:01.160
Of course, that's your global Python.

00:44:01.160 --> 00:44:06.960
If I want to activate a virtual environment, if I want to get into like this application

00:44:06.960 --> 00:44:09.180
mode, I would do hatch shell, right?

00:44:09.180 --> 00:44:09.760
Yes.

00:44:09.760 --> 00:44:10.080
Uh-huh.

00:44:10.080 --> 00:44:14.680
And because I have an awesome, oh my posh, you can see my prompt here's now taking on

00:44:14.680 --> 00:44:18.080
the calci 3.11.2 environment as part of my prompt.

00:44:18.080 --> 00:44:18.660
So.

00:44:18.660 --> 00:44:19.540
That's very cool.

00:44:19.540 --> 00:44:19.840
Yeah.

00:44:19.840 --> 00:44:20.400
That's the one.

00:44:20.400 --> 00:44:21.820
So it's working.

00:44:21.820 --> 00:44:25.700
Now, if I ask just straight up, which Python is that virtual environment one, right?

00:44:25.700 --> 00:44:26.080
Yeah.

00:44:26.140 --> 00:44:32.040
And I can do pip list and so on, but there's also ways, I think I recall, in hatch to like

00:44:32.040 --> 00:44:34.200
show me my dependencies and get a list of.

00:44:34.200 --> 00:44:34.520
Yeah.

00:44:34.520 --> 00:44:36.360
Hatch, dep, show.

00:44:36.360 --> 00:44:37.420
Dep, show.

00:44:37.420 --> 00:44:37.860
Yeah.

00:44:37.860 --> 00:44:38.520
Is it show dep?

00:44:38.520 --> 00:44:38.940
Table.

00:44:38.940 --> 00:44:39.600
Ah, table.

00:44:39.600 --> 00:44:40.520
It's just a few options.

00:44:40.520 --> 00:44:40.980
Yeah.

00:44:40.980 --> 00:44:41.380
Okay.

00:44:41.380 --> 00:44:42.440
That's your environment.

00:44:42.440 --> 00:44:45.960
I only have right now two dependencies, pytest and pytest cov.

00:44:45.960 --> 00:44:46.260
Yeah.

00:44:46.260 --> 00:44:46.580
Interesting.

00:44:46.580 --> 00:44:49.240
Or I could do requirements.

00:44:49.240 --> 00:44:49.820
Yep.

00:44:49.820 --> 00:44:50.980
And I would split out the.

00:44:50.980 --> 00:44:52.500
The same, but it's not as a table, right?

00:44:52.500 --> 00:44:53.160
Just plain text.

00:44:53.160 --> 00:44:53.380
Yeah.

00:44:53.380 --> 00:44:54.720
Just like requirements.txt.

00:44:54.720 --> 00:44:55.220
Got it.

00:44:55.220 --> 00:44:55.640
Okay.

00:44:56.380 --> 00:44:56.660
Yeah.

00:44:56.660 --> 00:44:57.060
Excellent.

00:44:57.060 --> 00:44:58.340
What do you recommend?

00:44:58.340 --> 00:45:02.660
So there's the hatch run commands, which we'll use the environment, or you can just go into

00:45:02.660 --> 00:45:03.920
the shell and run it.

00:45:03.920 --> 00:45:11.220
Or if I'm sneaky and I put my virtual environment in there, I might have something that automatically

00:45:11.220 --> 00:45:13.940
detects that environment and picks it up.

00:45:13.940 --> 00:45:16.260
So for example, PyCharm might go, you know what?

00:45:16.260 --> 00:45:17.740
I see a VE and V folder.

00:45:17.740 --> 00:45:22.480
We'll use that and, and just grab it and not care about hatch directly.

00:45:22.480 --> 00:45:23.140
Right.

00:45:23.200 --> 00:45:27.200
That's actually one of the reasons I was asking about putting it locally is it's kind

00:45:27.200 --> 00:45:31.880
of a hassle to find that thing and tell your editor, go find it over here.

00:45:31.880 --> 00:45:37.160
Whereas it automatically finds the top level of project variant, you know?

00:45:37.160 --> 00:45:37.480
Yeah.

00:45:37.480 --> 00:45:43.100
So you can do, as we talked about, sitting in the current directory, like a .vnv.

00:45:43.100 --> 00:45:49.680
And yeah, PyCharm VS Code, they'll pick it up because it is just a virtual environment at

00:45:49.680 --> 00:45:50.220
the end of the day.

00:45:50.220 --> 00:45:51.740
Nothing too special.

00:45:51.740 --> 00:45:53.960
So yeah, it will work out of the box.

00:45:54.180 --> 00:45:54.300
Yeah.

00:45:54.300 --> 00:45:56.520
And Colette's out there in the audience has got us covered.

00:45:56.520 --> 00:46:02.820
pip-tools command is pip tool, pip compile, rebuild, output file, such and such, pyproject.txt

00:46:02.820 --> 00:46:04.420
from pyproject.toml.

00:46:04.420 --> 00:46:05.280
Yeah.

00:46:05.280 --> 00:46:05.600
Cool.

00:46:05.600 --> 00:46:06.040
Nice.

00:46:06.040 --> 00:46:06.360
Yeah.

00:46:06.360 --> 00:46:08.200
And variations on that, I suspect.

00:46:08.200 --> 00:46:14.500
So one thing that I was thinking about this that I expected hatch to do, and maybe it does

00:46:14.500 --> 00:46:19.400
and maybe it doesn't, I just don't know, is suppose I want to use requests for calci.

00:46:19.400 --> 00:46:21.920
Like calci can't run locally.

00:46:21.920 --> 00:46:25.180
It needs its calculator API service that it's going to connect to.

00:46:25.180 --> 00:46:27.720
So it needs a request or HTTPX or something.

00:46:27.720 --> 00:46:28.040
Yeah.

00:46:28.040 --> 00:46:33.840
Is there a way with hatch to say, I have a new requirement, set that up, put it in the pyproject.toml, install it.

00:46:33.840 --> 00:46:36.280
That's going to come with the lock file plugin.

00:46:36.280 --> 00:46:42.800
I figured it wouldn't make sense to add those commands until I knew how locking would work.

00:46:43.360 --> 00:46:48.580
Because adding and removing always hits the locking logic.

00:46:48.580 --> 00:46:53.180
And since there wasn't locking, it didn't make sense to me to add those commands.

00:46:53.180 --> 00:46:54.160
All right.

00:46:54.160 --> 00:46:54.320
Yeah.

00:46:54.320 --> 00:46:54.760
That makes sense.

00:46:54.760 --> 00:46:55.420
It's going to come soon.

00:46:55.420 --> 00:47:00.400
So right now, you would just modify your pyproject.toml until those are added.

00:47:00.400 --> 00:47:05.900
And then I think there's a way where hatch looked at your pyproject.toml and said, okay, you're

00:47:05.900 --> 00:47:09.400
going to need these dependencies, right, when you run it.

00:47:09.400 --> 00:47:10.060
In what sense?

00:47:10.060 --> 00:47:13.840
I thought it installed the dependencies that were in the pyproject.toml.

00:47:13.840 --> 00:47:17.860
Even if it won't edit it, like if I put something in there and I try to run it, it'll say, oh,

00:47:17.860 --> 00:47:18.480
you need this.

00:47:18.480 --> 00:47:18.720
Yeah.

00:47:18.720 --> 00:47:19.820
It'll sync automatically.

00:47:19.820 --> 00:47:21.620
What command do I use to do that one?

00:47:21.620 --> 00:47:25.040
Either a run command or the shell command.

00:47:25.040 --> 00:47:25.500
I see.

00:47:25.500 --> 00:47:27.040
Oh, even the shell will do it, huh?

00:47:27.040 --> 00:47:30.020
Do you hatch run pip list, for example?

00:47:30.020 --> 00:47:30.400
Yeah.

00:47:30.480 --> 00:47:30.640
Okay.

00:47:30.640 --> 00:47:35.660
Now in pyproject.toml, add requests maybe to.

00:47:35.660 --> 00:47:36.020
Yeah.

00:47:36.020 --> 00:47:36.220
All right.

00:47:36.220 --> 00:47:38.840
Now I have requests and friends of requests.

00:47:38.840 --> 00:47:39.280
Yeah.

00:47:39.280 --> 00:47:39.620
Yeah.

00:47:39.620 --> 00:47:39.980
Yeah.

00:47:39.980 --> 00:47:40.880
Okay.

00:47:40.880 --> 00:47:41.740
That's pretty cool.

00:47:41.740 --> 00:47:42.380
Nice.

00:47:42.380 --> 00:47:46.120
And then I'm looking forward to the lock stuff because I absolutely love pip-tools.

00:47:46.120 --> 00:47:49.280
I think it is a glorious way.

00:47:49.700 --> 00:47:54.020
I used, for a while, I used PendaBot at GitHub and it drives me crazy.

00:47:54.020 --> 00:47:55.180
It's like so noisy.

00:47:55.180 --> 00:47:58.100
I'll get like 30 PRs a week.

00:47:58.100 --> 00:48:01.520
I'm like, you know, could you just package this up?

00:48:01.520 --> 00:48:04.580
And so now I just start periodically.

00:48:04.580 --> 00:48:07.680
I just go, okay, I'm going to use pip-tools and just ask like, how has the world changed?

00:48:07.680 --> 00:48:10.740
And then update my stuff in a more sane way.

00:48:10.740 --> 00:48:12.920
It was a bit noisy for us too at work.

00:48:12.920 --> 00:48:16.840
So we had like a custom dependency update logic as well.

00:48:17.280 --> 00:48:22.900
I think there is an open page request for a dependent bot to chunk the updates, but I

00:48:22.900 --> 00:48:24.120
don't know if it has happened yet.

00:48:24.120 --> 00:48:24.200
Yeah.

00:48:24.200 --> 00:48:28.120
I think I've seen one of those for a couple of years and there was like a hundred plus

00:48:28.120 --> 00:48:28.380
one.

00:48:28.380 --> 00:48:28.820
Me too.

00:48:28.820 --> 00:48:29.280
Me too.

00:48:29.280 --> 00:48:31.060
Like I got to review these things.

00:48:31.060 --> 00:48:32.600
You know what I mean?

00:48:32.600 --> 00:48:34.340
And I don't know if it's there.

00:48:34.340 --> 00:48:35.780
It's not there on my projects.

00:48:35.780 --> 00:48:36.380
It's still.

00:48:36.380 --> 00:48:36.720
Yeah.

00:48:36.720 --> 00:48:37.360
I'll get 20.

00:48:37.360 --> 00:48:42.300
I'll do a pip compile update and I'll push that and I'll get like 20 messages.

00:48:42.300 --> 00:48:43.500
These are no longer required.

00:48:43.500 --> 00:48:44.660
I'm like, okay, thanks.

00:48:44.660 --> 00:48:47.220
Could you just batch them?

00:48:47.460 --> 00:48:47.580
Yeah.

00:48:47.580 --> 00:48:47.900
Anyway.

00:48:47.900 --> 00:48:48.280
Yeah.

00:48:48.280 --> 00:48:48.600
Okay.

00:48:48.600 --> 00:48:50.140
So calci is coming along here.

00:48:50.140 --> 00:48:51.920
Let's just imagine that it does good stuff.

00:48:51.920 --> 00:48:55.000
I haven't even written any code for it, but it depends upon requests.

00:48:55.000 --> 00:48:55.720
So that's a start.

00:48:55.720 --> 00:49:01.100
The next step going kind of forking on the various possible definitions of what packaging

00:49:01.100 --> 00:49:01.440
is.

00:49:01.440 --> 00:49:06.100
A next step for this thing might be, I want to put it onto PyPI or create a wheel I can share.

00:49:06.100 --> 00:49:08.620
So hatch also supports that, right?

00:49:08.720 --> 00:49:08.900
Yeah.

00:49:08.900 --> 00:49:12.020
So first you have to create the artifacts.

00:49:12.020 --> 00:49:17.940
So you would do hatch build and that would build Metafault, both the source distribution

00:49:17.940 --> 00:49:19.160
and the wheel.

00:49:19.160 --> 00:49:19.540
Okay.

00:49:19.640 --> 00:49:24.160
Now in your current directory, just like the other tools, there's going to be a dist,

00:49:24.160 --> 00:49:27.520
D-I-S-T that now has those.

00:49:27.520 --> 00:49:33.160
And if you run a hatch publish, that would put it on PyPI by default.

00:49:33.600 --> 00:49:37.440
And it would prompt you for your username.

00:49:37.440 --> 00:49:38.800
I'm not entering that.

00:49:38.800 --> 00:49:41.100
I don't want to own calci on PyPI.

00:49:41.100 --> 00:49:41.980
No, just kidding.

00:49:41.980 --> 00:49:44.800
But yeah, I don't think I have it configured, so it wouldn't really do anything.

00:49:44.800 --> 00:49:45.360
But it would.

00:49:45.360 --> 00:49:47.380
It would go and put it on PyPI, right?

00:49:47.380 --> 00:49:47.720
Yeah.

00:49:47.720 --> 00:49:48.180
Potentially.

00:49:48.180 --> 00:49:48.800
Yeah.

00:49:48.800 --> 00:49:49.880
That's pretty straightforward.

00:49:49.880 --> 00:49:58.480
You also point out in the docs that CI build wheel and things like TOX, you could be

00:49:58.480 --> 00:50:01.180
the build, just hatchling could be the build system for that, right?

00:50:01.180 --> 00:50:02.400
Hatch does a lot.

00:50:02.580 --> 00:50:04.620
So you can use parts.

00:50:04.620 --> 00:50:11.040
Say you wanted to only use environment management to replace like TOX and NOX, you could do that.

00:50:11.040 --> 00:50:17.000
If you wanted to only use hatchling with like CI build wheel or other tools, you could do

00:50:17.000 --> 00:50:17.320
that.

00:50:17.320 --> 00:50:21.660
If you wanted to only use the version management, you could do that.

00:50:21.660 --> 00:50:24.080
It's kind of choose whatever you want.

00:50:24.080 --> 00:50:24.740
Yeah.

00:50:24.740 --> 00:50:25.860
You're not locked in.

00:50:25.860 --> 00:50:26.080
Yeah.

00:50:26.080 --> 00:50:29.220
So the last thing I could do is publish, but I'm not really going to go.

00:50:29.220 --> 00:50:30.440
Yeah.

00:50:30.440 --> 00:50:33.020
There's also a way to set in the config file.

00:50:33.020 --> 00:50:39.740
You said that if I set into the config file under the publish index, disable true, where

00:50:39.740 --> 00:50:42.820
you can make it confirm rather than just straight up publishing it, right?

00:50:42.820 --> 00:50:43.280
Yeah.

00:50:43.280 --> 00:50:44.360
That was a feature request.

00:50:44.360 --> 00:50:45.020
Yep.

00:50:45.100 --> 00:50:45.780
So yeah, cool.

00:50:45.780 --> 00:50:53.060
Another thing that is always, I've always stumbled on when I do this, at least with Twine is I'll

00:50:53.060 --> 00:50:54.320
have some project.

00:50:54.320 --> 00:50:55.040
I've done this.

00:50:55.040 --> 00:50:56.360
I published a version later.

00:50:56.360 --> 00:50:57.260
I'll come back to it.

00:50:57.260 --> 00:50:58.520
I'll make some changes.

00:50:58.520 --> 00:50:59.660
I'll increment the version.

00:50:59.800 --> 00:51:05.720
I used to have to do that manually, but now I can just do a hatch version and then something

00:51:05.720 --> 00:51:07.560
like, I could build one again.

00:51:07.560 --> 00:51:08.340
Minor.

00:51:08.340 --> 00:51:09.500
There you go.

00:51:09.500 --> 00:51:10.260
There we go.

00:51:10.260 --> 00:51:12.060
It'll automatically change it.

00:51:12.060 --> 00:51:13.760
And that changes the code, which is great.

00:51:13.760 --> 00:51:18.400
So now if I do a hatch build, which is really nice, it'll create a new one.

00:51:18.400 --> 00:51:22.360
But if I look in my project, I've got the old one and the new one.

00:51:22.360 --> 00:51:24.240
And you can't republish the old one, I don't think.

00:51:24.240 --> 00:51:29.200
So what happens if I just say publish now and I've already got 0.1.0 out there?

00:51:29.200 --> 00:51:29.520
Yeah.

00:51:29.520 --> 00:51:35.760
So you can do hatch build dash C for a clean and it should clean it first.

00:51:35.760 --> 00:51:36.300
Okay.

00:51:36.300 --> 00:51:36.840
That's cool.

00:51:36.840 --> 00:51:40.340
Because then I can just say hatch publish and not worry about conflicts.

00:51:40.340 --> 00:51:44.660
Anything that exists already on PyPI, it will ignore us.

00:51:44.660 --> 00:51:47.580
It'll put a warning, but it won't fail the command.

00:51:47.580 --> 00:51:50.600
I think Twine by default does fail.

00:51:50.600 --> 00:51:51.780
I think it does as well.

00:51:52.280 --> 00:51:55.820
So I do the inverse because that was frustrating to me too.

00:51:55.820 --> 00:51:57.960
So I do the opposite.

00:51:57.960 --> 00:51:58.440
Yeah.

00:51:58.440 --> 00:51:59.180
Perfect.

00:51:59.180 --> 00:51:59.780
I love it.

00:51:59.780 --> 00:52:00.780
Okay.

00:52:00.780 --> 00:52:01.000
Yeah.

00:52:01.000 --> 00:52:02.940
That's a really cool aspect.

00:52:02.940 --> 00:52:07.700
And so, yeah, that was, I guess, walking through that.

00:52:07.700 --> 00:52:09.800
I think it was neat to just kind of explore it together.

00:52:09.800 --> 00:52:11.720
So thanks for talking me through that.

00:52:11.720 --> 00:52:12.080
Yeah.

00:52:12.080 --> 00:52:17.220
The past month I've been pretty busy at work, but I'm going to pick up development again next

00:52:17.220 --> 00:52:18.100
week for hatch.

00:52:18.100 --> 00:52:21.340
There's a bunch of open feature requests.

00:52:21.660 --> 00:52:23.320
I have to crank out.

00:52:23.320 --> 00:52:23.760
Yeah.

00:52:23.760 --> 00:52:27.380
This is a pretty popular project on GitHub with 3.7,000 stars.

00:52:27.380 --> 00:52:29.940
So I suspect there's some user feedback.

00:52:29.940 --> 00:52:30.480
Yeah.

00:52:30.680 --> 00:52:37.040
And so it's the main next features are the lock file plugin mechanism.

00:52:37.040 --> 00:52:44.640
And also people are asking about workspaces, which is basically like kind of like editable

00:52:44.640 --> 00:52:47.160
and stuff, but more built in and fundamental.

00:52:47.160 --> 00:52:51.440
So I'm going to add that especially useful for monorepos.

00:52:51.440 --> 00:52:52.580
Oh, right.

00:52:52.580 --> 00:52:52.940
Okay.

00:52:53.500 --> 00:52:58.860
Because you don't necessarily want to hatch build all of Google or whatever, right?

00:52:58.860 --> 00:52:59.300
Right.

00:52:59.300 --> 00:53:00.640
Right, right.

00:53:01.140 --> 00:53:06.860
So a workspace is like a view into the monorepo that I said, I know there's like 500 projects

00:53:06.860 --> 00:53:11.200
here and they all have their things, but I want the web app and the data layer.

00:53:11.200 --> 00:53:12.560
That's it.

00:53:12.560 --> 00:53:13.500
Something like that.

00:53:13.500 --> 00:53:13.640
Right.

00:53:13.640 --> 00:53:14.000
Exactly.

00:53:14.000 --> 00:53:14.400
Yeah.

00:53:14.520 --> 00:53:14.760
Okay.

00:53:14.760 --> 00:53:16.160
That sounds useful.

00:53:16.160 --> 00:53:16.560
Yeah.

00:53:16.560 --> 00:53:20.940
And I'm modeling it after cargo workspaces in Rust.

00:53:20.940 --> 00:53:26.720
I worked with that recently and I think they have pretty good config and like a model of

00:53:26.720 --> 00:53:28.860
how local development works.

00:53:28.860 --> 00:53:29.460
Okay.

00:53:29.460 --> 00:53:29.920
Yeah.

00:53:29.920 --> 00:53:30.560
That sounds really great.

00:53:30.560 --> 00:53:30.700
Yeah.

00:53:30.700 --> 00:53:35.420
I do my preview of what hatch will look like at basically cargo workspaces.

00:53:35.420 --> 00:53:37.140
Nice.

00:53:37.140 --> 00:53:41.220
Jonathan out there says, that sounds like music to his ears.

00:53:41.340 --> 00:53:44.760
Definitely waiting on the workspaces feature for our monorepo work.

00:53:44.760 --> 00:53:45.260
Nice.

00:53:45.260 --> 00:53:50.980
And then also Ryan is asking you, any chance there could be a package build target?

00:53:50.980 --> 00:53:54.380
I'm using PECs via TOCs currently.

00:53:54.380 --> 00:53:55.500
Yes, that's possible.

00:53:55.500 --> 00:54:00.060
One thing that's great about plugins is I don't have to do every feature.

00:54:00.060 --> 00:54:02.060
Anybody can do that.

00:54:02.060 --> 00:54:07.020
So we do have, if you go to the docs and go to the top, plugins.

00:54:07.020 --> 00:54:08.380
Plugins, where are you?

00:54:08.380 --> 00:54:09.060
You're home.

00:54:09.060 --> 00:54:09.440
Yeah.

00:54:09.440 --> 00:54:10.080
Plugins.

00:54:10.080 --> 00:54:11.080
Builder.

00:54:11.180 --> 00:54:11.540
Builder.

00:54:11.540 --> 00:54:11.740
Yeah.

00:54:11.740 --> 00:54:12.740
And then reference.

00:54:12.740 --> 00:54:13.440
Yep.

00:54:13.440 --> 00:54:14.360
And then, yeah.

00:54:14.360 --> 00:54:15.320
So known third party.

00:54:15.320 --> 00:54:19.360
So here's some examples of third party builder plugins.

00:54:19.360 --> 00:54:25.400
So the build command that you ran, it has an option to output a target.

00:54:25.400 --> 00:54:26.020
Okay.

00:54:26.020 --> 00:54:26.860
Named target.

00:54:26.860 --> 00:54:29.200
Other than wheel and sdst.

00:54:29.200 --> 00:54:34.000
So you can write an arbitrary builder and build those targets.

00:54:34.000 --> 00:54:34.740
So yeah.

00:54:34.740 --> 00:54:35.100
Okay.

00:54:35.100 --> 00:54:40.180
It's probably not super hard to do, I'm guessing, to just like basically bundle up the commands

00:54:40.180 --> 00:54:41.120
to build the PECs.

00:54:41.120 --> 00:54:41.440
Yeah.

00:54:41.440 --> 00:54:44.180
And just implement the interface and that's all I gotta do.

00:54:44.180 --> 00:54:44.460
Yeah.

00:54:44.460 --> 00:54:44.800
Excellent.

00:54:44.800 --> 00:54:45.760
Good to hear.

00:54:45.760 --> 00:54:50.740
I vote for the lock file management, the dependency management.

00:54:50.740 --> 00:54:52.520
I'm excited to hear that that's coming.

00:54:52.520 --> 00:54:53.000
Yep.

00:54:53.000 --> 00:54:53.900
That's coming next.

00:54:53.900 --> 00:54:58.400
Are you thinking of building on something like pip-tools or doing your own?

00:54:58.400 --> 00:55:06.900
I wouldn't feel confident doing my own without feedback from like other folks that have been in this for longer.

00:55:06.900 --> 00:55:08.020
Like Brett Cannon.

00:55:08.020 --> 00:55:12.660
I think he wrote the first lock file PEP attempt last year.

00:55:12.660 --> 00:55:15.340
For various reasons, it kind of got rejected.

00:55:15.340 --> 00:55:18.660
But I think his next attempt will happen.

00:55:18.660 --> 00:55:19.840
I just don't know when.

00:55:19.840 --> 00:55:20.200
Excellent.

00:55:20.300 --> 00:55:23.640
There's also a suggestion, a Cython builder would be cool.

00:55:23.640 --> 00:55:25.060
Maybe a mypyC.

00:55:25.060 --> 00:55:26.200
I don't know.

00:55:26.200 --> 00:55:26.720
There's a lot of options.

00:55:26.720 --> 00:55:27.820
That one exists actually.

00:55:27.820 --> 00:55:29.180
Oh, the mypyC one does?

00:55:29.180 --> 00:55:29.480
Okay.

00:55:29.480 --> 00:55:30.440
I do remember seeing.

00:55:30.440 --> 00:55:30.720
Yeah.

00:55:30.720 --> 00:55:32.600
If you go back to the plugins.

00:55:32.600 --> 00:55:34.680
I know the docs are a lot.

00:55:34.680 --> 00:55:34.940
Sorry.

00:55:34.940 --> 00:55:35.700
Back one.

00:55:35.700 --> 00:55:36.640
Build hook.

00:55:36.640 --> 00:55:37.040
Okay.

00:55:37.180 --> 00:55:38.260
And then reference.

00:55:38.260 --> 00:55:40.200
And it's listed under a third party.

00:55:40.200 --> 00:55:41.560
Hatch mypyC.

00:55:41.560 --> 00:55:43.480
I maintain that one actually.

00:55:43.480 --> 00:55:43.980
Okay.

00:55:43.980 --> 00:55:44.420
Nice.

00:55:44.420 --> 00:55:47.080
Actually, Black builds with that now.

00:55:47.080 --> 00:55:47.500
Nice.

00:55:47.500 --> 00:55:50.600
What about the Jupyter builder?

00:55:50.600 --> 00:55:51.340
What does that do?

00:55:51.340 --> 00:55:59.320
So recently, Jupyter switched their entire extension ecosystem to Hatchlang actually.

00:55:59.320 --> 00:56:04.000
So now the standard way to do Jupyter stuff is with Hatchlang.

00:56:04.000 --> 00:56:07.000
And that's the plugin that everything happens with.

00:56:07.000 --> 00:56:07.480
Nice.

00:56:07.480 --> 00:56:07.820
Okay.

00:56:07.820 --> 00:56:08.140
Cool.

00:56:08.140 --> 00:56:12.460
Probably makes you feel good to see major projects like that using your tools.

00:56:12.460 --> 00:56:15.740
I'm happy with people who are finding a value in it.

00:56:15.740 --> 00:56:20.740
And every time someone says, oh, it's so easy to use, it makes me happy.

00:56:20.740 --> 00:56:21.120
Yeah.

00:56:21.120 --> 00:56:21.660
Indeed.

00:56:21.660 --> 00:56:24.800
I like stuff that I can do a lot, but it's very simple.

00:56:24.800 --> 00:56:26.460
That's my purpose.

00:56:26.460 --> 00:56:26.880
Yeah.

00:56:26.880 --> 00:56:31.620
I think I might play with the config, the global config, to see how close I can make it match

00:56:31.620 --> 00:56:34.740
my current workflow and make it kind of coexist what I'm doing.

00:56:34.740 --> 00:56:35.620
So that'd be fun.

00:56:35.620 --> 00:56:36.120
Awesome.

00:56:36.120 --> 00:56:37.320
All right.

00:56:37.320 --> 00:56:40.460
Well, I think we're about out of time.

00:56:40.460 --> 00:56:43.960
Anything else you want to throw out there while we're talking about your project?

00:56:43.960 --> 00:56:48.400
If anybody wants to contribute, there's lots of open issues.

00:56:48.400 --> 00:56:51.760
I have had lots of really nice contributors.

00:56:51.760 --> 00:56:55.280
They almost finished adding type hinting everywhere.

00:56:56.140 --> 00:56:58.320
In the beginning, I had zero type hinting.

00:56:58.320 --> 00:57:01.260
And then a bunch of contributors helped out with that.

00:57:01.260 --> 00:57:03.940
And that was almost fully my pie.

00:57:03.940 --> 00:57:04.900
So.

00:57:04.900 --> 00:57:05.280
Cool.

00:57:05.280 --> 00:57:05.500
Yeah.

00:57:05.500 --> 00:57:07.040
I saw you had 40 contributors.

00:57:07.040 --> 00:57:07.840
So that's really cool.

00:57:07.840 --> 00:57:08.260
Yeah.

00:57:08.380 --> 00:57:14.500
Maybe one other quick comment that I'd like to ask you about here is I see the domain this

00:57:14.500 --> 00:57:18.500
is on is hatch.pypa as in Python Packaging Authority dot IO.

00:57:18.500 --> 00:57:19.020
Mm-hmm.

00:57:19.020 --> 00:57:25.320
How'd it end up on pypa dot IO versus, you know, hatch dot dev or whatever?

00:57:25.520 --> 00:57:28.840
This is just the standard domain for all the packages.

00:57:28.840 --> 00:57:35.060
So if you type in pip rather than hatch and get rid of the latest part, it'll go right

00:57:35.060 --> 00:57:35.960
to the pip docs.

00:57:35.960 --> 00:57:36.940
Right, right, right.

00:57:36.940 --> 00:57:40.640
Well, I was thinking more about like how did it become sort of official?

00:57:40.860 --> 00:57:46.240
I announced hatch 1.0, like the rewrite that happened last year sometime.

00:57:46.240 --> 00:57:52.440
And then the same day, maybe the next day, I forget who, but somebody in the discord was

00:57:52.440 --> 00:57:55.140
asking if I wanted to join the pipa.

00:57:55.140 --> 00:57:58.200
And I was like, well, sure, that makes sense.

00:57:58.200 --> 00:58:03.660
So then there was a vote on the mailing list and it was unanimous that they agreed.

00:58:03.660 --> 00:58:10.420
And then after I think seven or 10 days, then we transferred the repo and it was hosted

00:58:10.420 --> 00:58:12.120
on the new domain.

00:58:12.120 --> 00:58:12.700
Oh, yeah.

00:58:12.700 --> 00:58:14.920
And it's also under the GitHub organization of pypa.

00:58:14.920 --> 00:58:15.360
That's right.

00:58:15.360 --> 00:58:15.640
Yeah.

00:58:15.640 --> 00:58:16.000
Excellent.

00:58:16.000 --> 00:58:17.040
All right.

00:58:17.040 --> 00:58:18.980
Well, really nice project.

00:58:18.980 --> 00:58:21.180
Congrats on all the uptake and.

00:58:21.180 --> 00:58:21.860
Thanks.

00:58:21.860 --> 00:58:22.200
Yeah.

00:58:22.200 --> 00:58:23.280
It looks like people are enjoying it.

00:58:23.280 --> 00:58:26.640
So two quick questions before you get out of here.

00:58:26.640 --> 00:58:30.600
I didn't get to ask you this on the panel one because one, we were over time and two,

00:58:30.600 --> 00:58:33.360
there was a bunch of people in order just another 10 minute debate.

00:58:33.360 --> 00:58:33.660
Yeah.

00:58:33.660 --> 00:58:36.900
First of all, notable pypi package, something that you've come across.

00:58:36.900 --> 00:58:37.880
Oh, this is super cool.

00:58:37.880 --> 00:58:39.820
People should know about package X.

00:58:39.980 --> 00:58:40.800
Anything come to mind?

00:58:40.800 --> 00:58:45.600
I guess it's a bit cliche because right now it's actually pretty popular, but I would

00:58:45.600 --> 00:58:47.800
still evangelize textual.

00:58:47.800 --> 00:58:55.600
Textual is like a new application for booting T-UIs, which is like textual user interfaces.

00:58:56.600 --> 00:59:02.340
I've actually been doing a project at work that uses this and it's very nice.

00:59:02.340 --> 00:59:03.600
It's pretty awesome.

00:59:03.600 --> 00:59:05.540
It's kind of nuts what this thing does.

00:59:05.540 --> 00:59:06.100
Yeah.

00:59:06.100 --> 00:59:11.780
This is like the higher order UI framework built on Rich by Wilma Guggen and team.

00:59:11.920 --> 00:59:17.240
You get like fly out docking panels and scrolling within.

00:59:17.240 --> 00:59:17.540
It's crazy.

00:59:17.540 --> 00:59:17.940
Yeah.

00:59:17.940 --> 00:59:21.820
It's kind of like if the web could be in a terminal.

00:59:21.820 --> 00:59:23.780
Something like that.

00:59:23.780 --> 00:59:24.240
It's true.

00:59:24.240 --> 00:59:27.980
I plan to actually use this for a hatch when I have time.

00:59:27.980 --> 00:59:35.980
On the interactive creation of a new project, on the left-hand side, you would have inputs,

00:59:36.540 --> 00:59:41.060
and then it would render the pyproject.tama on the right-hand side and markdown.

00:59:41.060 --> 00:59:41.940
Oh, that's super cool.

00:59:41.940 --> 00:59:42.620
In a few months.

00:59:42.620 --> 00:59:43.020
Yeah.

00:59:43.020 --> 00:59:43.600
Fun.

00:59:43.600 --> 00:59:48.140
And then if you're going to work on hatch, what editor are you using these days?

00:59:48.140 --> 00:59:51.200
I price time for large projects.

00:59:51.200 --> 00:59:55.680
When I'm doing like one-off scripts, then VS Code.

00:59:55.880 --> 00:59:56.180
Mm-hmm.

00:59:56.180 --> 00:59:56.700
Okay.

00:59:56.700 --> 00:59:57.060
Cool.

00:59:57.060 --> 00:59:57.720
All right.

00:59:57.720 --> 00:59:59.920
This may be a question I got to start asking people.

00:59:59.920 --> 01:00:00.760
I don't know.

01:00:00.760 --> 01:00:07.360
PyCharm and all the JetBrains IDs, I believe, are starting to promote what they call the new UI,

01:00:07.360 --> 01:00:10.640
which I think is much more like VS Code.

01:00:10.640 --> 01:00:15.220
Are you the old school style or are you the new UI style?

01:00:15.220 --> 01:00:17.000
I've not seen that yet, actually.

01:00:17.000 --> 01:00:18.560
There's a gear in the upper right.

01:00:18.560 --> 01:00:20.360
If you click on it, it'll say new UI.

01:00:20.360 --> 01:00:21.780
To me, I'm old school.

01:00:21.780 --> 01:00:22.700
I love the old one.

01:00:22.700 --> 01:00:25.660
I mean, I'm using PyCharm, not VS Code for a reason.

01:00:25.660 --> 01:00:29.200
So I don't want it to look more like VS Code for my style, right?

01:00:29.200 --> 01:00:30.940
But I know other people prefer the opposite.

01:00:30.940 --> 01:00:32.880
I wouldn't mind using VS Code.

01:00:32.880 --> 01:00:38.540
There's one missing feature that is like a blocker where I just won't use VS Code full time,

01:00:38.540 --> 01:00:41.900
which is it can't yet do vertical tabs.

01:00:41.900 --> 01:00:44.900
There's an open feature for years.

01:00:44.900 --> 01:00:49.100
And I guess technically, there's some kind of challenge to implementing that.

01:00:49.100 --> 01:00:53.560
So right now, if you have like 100 tabs, it doesn't look very nice.

01:00:53.560 --> 01:00:54.540
It's all horizontal.

01:00:54.540 --> 01:00:55.580
It's just a bunch of Xs.

01:00:55.580 --> 01:00:57.100
Yeah.

01:00:57.100 --> 01:00:58.520
I can't select them.

01:00:58.520 --> 01:00:59.240
I just close them.

01:00:59.240 --> 01:00:59.560
Yeah.

01:00:59.560 --> 01:01:00.240
Yeah, I got it.

01:01:00.240 --> 01:01:00.480
Okay.

01:01:00.480 --> 01:01:01.280
Very cool.

01:01:01.280 --> 01:01:02.080
All right.

01:01:02.080 --> 01:01:04.780
Well, congrats with Hatch.

01:01:04.780 --> 01:01:06.600
And thanks for coming on the show.

01:01:06.600 --> 01:01:07.700
Yeah, thank you very much.

01:01:07.700 --> 01:01:08.800
Nice talking to you.

01:01:08.800 --> 01:01:09.300
Yeah, you too.

01:01:09.300 --> 01:01:09.620
Bye-bye.

01:01:09.620 --> 01:01:09.980
All right.

01:01:09.980 --> 01:01:10.540
Bye-bye.

01:01:11.700 --> 01:01:14.360
This has been another episode of Talk Python To Me.

01:01:14.360 --> 01:01:16.160
Thank you to our sponsors.

01:01:16.160 --> 01:01:17.780
Be sure to check out what they're offering.

01:01:17.780 --> 01:01:19.200
It really helps support the show.

01:01:19.200 --> 01:01:23.180
Don't miss out on the opportunity to level up your startup game with Microsoft for Startups

01:01:23.180 --> 01:01:23.700
Founders Hub.

01:01:23.700 --> 01:01:28.800
Get over six figures in benefits, including Azure credits and access to OpenAI's APIs.

01:01:28.800 --> 01:01:31.620
Apply now at talkpython.fm/founders hub.

01:01:31.620 --> 01:01:34.000
Take some stress out of your life.

01:01:34.000 --> 01:01:39.460
Get notified immediately about errors and performance issues in your web or mobile applications with

01:01:39.460 --> 01:01:39.780
Sentry.

01:01:40.260 --> 01:01:44.780
Just visit talkpython.fm/sentry and get started for free.

01:01:44.780 --> 01:01:48.380
And be sure to use the promo code talkpython, all one word.

01:01:48.380 --> 01:01:49.980
Want to level up your Python?

01:01:49.980 --> 01:01:54.040
We have one of the largest catalogs of Python video courses over at Talk Python.

01:01:54.040 --> 01:01:59.220
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:01:59.220 --> 01:02:01.880
And best of all, there's not a subscription in sight.

01:02:01.880 --> 01:02:04.780
Check it out for yourself at training.talkpython.fm.

01:02:04.780 --> 01:02:09.460
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:02:09.860 --> 01:02:10.780
We should be right at the top.

01:02:10.780 --> 01:02:15.940
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:02:15.940 --> 01:02:20.140
and the direct RSS feed at /rss on talkpython.fm.

01:02:20.140 --> 01:02:23.560
We're live streaming most of our recordings these days.

01:02:23.560 --> 01:02:27.700
If you want to be part of the show and have your comments featured on the air, be sure to

01:02:27.700 --> 01:02:31.340
subscribe to our YouTube channel at talkpython.fm/youtube.

01:02:31.900 --> 01:02:33.260
This is your host, Michael Kennedy.

01:02:33.260 --> 01:02:34.540
Thanks so much for listening.

01:02:34.540 --> 01:02:35.700
I really appreciate it.

01:02:35.700 --> 01:02:37.620
Now get out there and write some Python code.

01:02:37.620 --> 01:02:58.520
We'll see you next time.

