WEBVTT

00:00:00.001 --> 00:00:03.060
Python is one of the primary languages for IoT devices.

00:00:03.060 --> 00:00:06.140
With runtimes such as CircuitPython and MicroPython,

00:00:06.140 --> 00:00:08.560
they're ideal for really small IoT chips.

00:00:08.560 --> 00:00:10.840
Maybe you've heard of the Circuit Playground Express,

00:00:10.840 --> 00:00:14.280
BBC Microbit, or the fancy Adafruit Clue.

00:00:14.280 --> 00:00:18.360
They aren't too expensive, ranging from $25 to $50 each.

00:00:18.360 --> 00:00:20.460
But for large groups such as classrooms,

00:00:20.460 --> 00:00:21.760
this can still be a lot of money.

00:00:21.760 --> 00:00:24.220
Moreover, getting your hands on these devices

00:00:24.220 --> 00:00:26.040
can sometimes be tricky as well,

00:00:26.040 --> 00:00:27.680
as they often go out of stock.

00:00:27.680 --> 00:00:31.200
With an extension for VS Code called Device Simulator Express,

00:00:31.200 --> 00:00:33.860
you can have instant access to all three.

00:00:33.860 --> 00:00:35.020
Virtually, of course.

00:00:35.020 --> 00:00:37.780
This cool extension adds a visual emulator,

00:00:37.780 --> 00:00:39.140
as well as the native interactions,

00:00:39.140 --> 00:00:41.200
such as buttons and temperature sensors.

00:00:41.200 --> 00:00:45.100
Get your IoT on without a real device using VS Code today.

00:00:45.100 --> 00:00:47.800
Let's meet the most recent team behind this project.

00:00:47.800 --> 00:00:51.380
Andrea Ma, Syed Amusa, Vandy Lee, and Kevin Nguyen.

00:00:51.380 --> 00:00:54.280
This is Talk Python To Me, episode 272,

00:00:54.280 --> 00:00:56.520
recorded July 2nd, 2020.

00:00:56.520 --> 00:01:11.380
Welcome to Talk Python To Me,

00:01:11.380 --> 00:01:13.240
a weekly podcast on Python,

00:01:13.240 --> 00:01:15.180
the language, the libraries, the ecosystem,

00:01:15.180 --> 00:01:16.180
and the personalities.

00:01:16.180 --> 00:01:18.120
This is your host, Michael Kennedy.

00:01:18.120 --> 00:01:20.260
Follow me on Twitter, where I'm @mkennedy.

00:01:20.260 --> 00:01:22.620
Keep up with the show and listen to past episodes

00:01:22.620 --> 00:01:24.020
at talkpython.fm,

00:01:24.020 --> 00:01:26.440
and follow the show on Twitter via at Talk Python.

00:01:26.440 --> 00:01:30.100
This episode is brought to you by Linode and Talk Python Training.

00:01:30.100 --> 00:01:33.480
Be sure to check out what the offers are for both of these segments.

00:01:33.480 --> 00:01:35.280
It really helps support the show.

00:01:35.280 --> 00:01:37.480
Speaking of Talk Python Training,

00:01:37.480 --> 00:01:39.700
have you been thinking about taking one of our courses?

00:01:39.700 --> 00:01:42.880
We're participating in the latest Humble Bundle deal

00:01:42.880 --> 00:01:43.980
for Python developers,

00:01:43.980 --> 00:01:47.160
along with a bunch of other great educators and tool developers.

00:01:47.480 --> 00:01:49.500
Until July 22nd,

00:01:49.500 --> 00:01:53.220
you can get $1,400 worth of Python goodies,

00:01:53.220 --> 00:01:55.920
including three of our popular courses,

00:01:55.920 --> 00:01:57.460
for just $25.

00:01:57.460 --> 00:01:59.740
Yeah, Humble Bundles are crazy.

00:01:59.740 --> 00:02:01.880
That's $25 for our three courses

00:02:01.880 --> 00:02:03.980
and all those other things combined.

00:02:03.980 --> 00:02:07.700
Just visit talkpython.fm/humble2020.

00:02:07.700 --> 00:02:11.300
That's talkpython.fm/humble2020 altogether,

00:02:11.300 --> 00:02:13.620
before July 22nd,

00:02:13.620 --> 00:02:14.980
to take advantage of this offer.

00:02:15.480 --> 00:02:16.840
Now, let's get to that interview.

00:02:16.840 --> 00:02:20.000
Hi, Saida, Andrea, Kevin, Vandy.

00:02:20.000 --> 00:02:21.940
Welcome all to Talk Python To Me.

00:02:21.940 --> 00:02:22.900
Thanks for having us.

00:02:22.900 --> 00:02:23.960
Thank you for having us.

00:02:23.960 --> 00:02:25.400
Yeah, it's great to have you all here.

00:02:25.400 --> 00:02:28.960
It's going to be fun with five people in this conversation.

00:02:28.960 --> 00:02:31.500
And we got a really cool topic to talk about.

00:02:31.500 --> 00:02:35.580
MicroPython and CirclePython is really big these days.

00:02:35.580 --> 00:02:37.940
And I think it's opening up a new realm of programming.

00:02:37.940 --> 00:02:39.460
And what you all have done

00:02:39.460 --> 00:02:40.940
and the project you're working on

00:02:40.940 --> 00:02:42.720
is going to be really excellent

00:02:42.720 --> 00:02:44.380
for helping people around the world

00:02:44.380 --> 00:02:46.140
take better advantage of that, I think.

00:02:46.140 --> 00:02:46.460
Awesome.

00:02:46.460 --> 00:02:47.380
Yeah.

00:02:47.380 --> 00:02:52.020
We were hoping to kind of make learning Python

00:02:52.020 --> 00:02:55.020
and learning IoT a lot more accessible

00:02:55.020 --> 00:02:57.260
and available to people around the world.

00:02:57.260 --> 00:02:59.760
So yeah, we'll get more into that a bit later.

00:02:59.760 --> 00:03:00.500
Yeah, absolutely.

00:03:00.500 --> 00:03:03.400
I mean, getting hold of these devices,

00:03:03.400 --> 00:03:04.660
they're not very expensive,

00:03:05.340 --> 00:03:07.700
but they can be hard to get a hold of.

00:03:07.700 --> 00:03:09.960
And if you're talking about a classroom

00:03:09.960 --> 00:03:11.240
with 100 kids,

00:03:11.240 --> 00:03:13.640
then all of a sudden it is expensive, right?

00:03:13.640 --> 00:03:15.840
Or a school with different classes and so on.

00:03:15.840 --> 00:03:17.340
But before we get to all that,

00:03:17.340 --> 00:03:19.120
which is going to be really fun to talk about,

00:03:19.120 --> 00:03:21.940
let's just do quick introductions around here.

00:03:21.940 --> 00:03:23.100
Andrea, do you want to start first?

00:03:23.100 --> 00:03:23.420
Yeah.

00:03:23.420 --> 00:03:25.240
So of course, my name is Andrea.

00:03:25.240 --> 00:03:26.940
I'm currently a student

00:03:26.940 --> 00:03:28.640
at the University of British Columbia.

00:03:28.640 --> 00:03:30.300
I'm studying computer engineering.

00:03:30.300 --> 00:03:32.700
I'm originally from the Canadian prairies.

00:03:32.700 --> 00:03:33.600
I'm from Saskatchewan,

00:03:33.700 --> 00:03:34.860
but I came here for school.

00:03:34.860 --> 00:03:37.740
And yeah, right now I'm still an intern at Microsoft,

00:03:37.740 --> 00:03:39.100
interning with the Coalition,

00:03:39.100 --> 00:03:40.260
which makes Gears of War.

00:03:40.260 --> 00:03:45.820
And yeah, I guess I'm currently just interning

00:03:45.820 --> 00:03:47.740
at different places to kind of get a grasp

00:03:47.740 --> 00:03:48.980
of what I want to do in the future.

00:03:48.980 --> 00:03:50.880
Well, those sound like some really fun areas

00:03:50.880 --> 00:03:52.340
to get some experience in, actually.

00:03:52.340 --> 00:03:53.980
Yeah, it's really fun

00:03:53.980 --> 00:03:55.660
to just kind of get different perspectives.

00:03:55.660 --> 00:03:57.480
I mean, every time I go to a new internship,

00:03:57.480 --> 00:03:59.440
it's just like a whole bunch of new stuff.

00:03:59.440 --> 00:04:01.200
And I learn a lot, which is awesome.

00:04:01.200 --> 00:04:01.580
Awesome.

00:04:01.580 --> 00:04:01.920
Yeah.

00:04:01.920 --> 00:04:03.200
So, how about you?

00:04:03.360 --> 00:04:03.560
Yeah.

00:04:03.560 --> 00:04:04.540
So, my name is Zayda.

00:04:04.540 --> 00:04:06.740
I'm an undergraduate student at SFU.

00:04:06.740 --> 00:04:08.680
I'm studying data science right now.

00:04:08.680 --> 00:04:11.580
And I was a PM intern at Microsoft last semester.

00:04:11.580 --> 00:04:12.220
Yeah.

00:04:12.220 --> 00:04:16.100
And mostly my coursework revolves around data analysis

00:04:16.100 --> 00:04:17.460
and data science, business.

00:04:17.460 --> 00:04:19.800
And I have a little bit of background in design as well.

00:04:19.800 --> 00:04:20.620
So, yeah.

00:04:20.620 --> 00:04:23.100
I think after my internship at Microsoft,

00:04:23.100 --> 00:04:26.500
my passion for PM has increased.

00:04:26.500 --> 00:04:28.240
And hopefully, my full-time career

00:04:28.240 --> 00:04:29.440
will be in that as well.

00:04:29.440 --> 00:04:29.800
Yeah.

00:04:29.800 --> 00:04:30.440
It's cool.

00:04:30.440 --> 00:04:30.840
Yeah.

00:04:30.840 --> 00:04:33.140
It sounds like you're studying a lot of neat technical areas as well.

00:04:33.140 --> 00:04:33.500
Yeah.

00:04:33.500 --> 00:04:34.440
Vandy, how about you?

00:04:34.440 --> 00:04:35.360
Hey, I'm Vandy.

00:04:35.360 --> 00:04:37.360
I'm a third-year computer science student

00:04:37.360 --> 00:04:39.320
at the University of British Columbia.

00:04:40.160 --> 00:04:43.820
And currently, after finishing the Microsoft Garage internship,

00:04:43.820 --> 00:04:47.880
I'm interning at Splunk on the machine learning team right now.

00:04:47.880 --> 00:04:48.440
Oh, yeah.

00:04:48.440 --> 00:04:48.740
Cool.

00:04:48.740 --> 00:04:51.940
Checking out, getting into all the logs and all that good stuff.

00:04:51.940 --> 00:04:52.620
Yeah.

00:04:52.620 --> 00:04:53.920
Right on.

00:04:53.920 --> 00:04:54.820
Kevin, how about you?

00:04:54.820 --> 00:04:55.380
Hi, everyone.

00:04:55.540 --> 00:04:56.200
My name is Kevin.

00:04:56.200 --> 00:04:57.460
I'm from Montreal.

00:04:57.460 --> 00:04:59.640
And I'm studying at Pre-Technic Montreal.

00:04:59.640 --> 00:05:03.780
So, just like the others, I'm interning at various places like Microsoft.

00:05:03.780 --> 00:05:07.740
I'm currently interning at AWS, working on cloud technologies,

00:05:07.740 --> 00:05:09.400
which I find very interesting.

00:05:09.400 --> 00:05:12.000
And, yeah, pretty much it.

00:05:12.000 --> 00:05:13.000
I love software engineering.

00:05:13.000 --> 00:05:14.140
That's why I got into the field.

00:05:14.640 --> 00:05:19.820
And I'm very excited today to share about one of our most fascinating projects.

00:05:19.820 --> 00:05:20.680
It's super fascinating.

00:05:20.680 --> 00:05:24.760
But before we go to that, so you did this internship at Microsoft

00:05:24.760 --> 00:05:27.320
and you're doing an internship at AWS?

00:05:27.320 --> 00:05:27.800
Yeah.

00:05:27.800 --> 00:05:29.360
Well, I'm not at the same time.

00:05:29.360 --> 00:05:30.260
Like, I'm doing one.

00:05:30.260 --> 00:05:30.640
No, no, no.

00:05:30.640 --> 00:05:30.920
I know.

00:05:30.920 --> 00:05:31.820
One and then the other.

00:05:31.820 --> 00:05:33.220
But that's still, like, I was just going to say,

00:05:33.220 --> 00:05:36.920
that's a really cool experience to have before you've even graduated.

00:05:36.920 --> 00:05:39.260
That's a lot of background you're picking up there.

00:05:39.260 --> 00:05:40.120
It definitely is.

00:05:40.120 --> 00:05:42.340
Like, I'm currently in quite a lot of both places.

00:05:42.340 --> 00:05:42.640
Yeah.

00:05:42.640 --> 00:05:43.780
I mean, they're both very different.

00:05:44.040 --> 00:05:45.380
But, right, those are two of the tech giants.

00:05:45.380 --> 00:05:46.060
So, quite cool.

00:05:46.060 --> 00:05:50.820
Now, you'd mentioned, several of you, the garage projects at Microsoft.

00:05:50.820 --> 00:05:55.460
And I know you all had this intern relationship with Microsoft.

00:05:55.460 --> 00:05:59.660
And who knows, maybe you'll go back and work there as well afterwards.

00:05:59.660 --> 00:06:02.060
But just what is this garage thing?

00:06:02.060 --> 00:06:02.860
I've never heard of this.

00:06:02.860 --> 00:06:04.240
So, oh, sorry.

00:06:04.240 --> 00:06:04.920
Go ahead, Asia.

00:06:04.920 --> 00:06:05.440
Go ahead.

00:06:05.440 --> 00:06:06.160
Oh, okay.

00:06:06.160 --> 00:06:06.320
Yeah.

00:06:06.320 --> 00:06:09.220
So, the garage program is pretty much.

00:06:09.220 --> 00:06:13.820
So, unlike a regular internship where you jump into an existing project,

00:06:13.820 --> 00:06:21.220
a garage internship encourages the interns to group up and start and finish a project.

00:06:21.600 --> 00:06:24.960
In our case, we continued on existing garage project.

00:06:24.960 --> 00:06:29.000
But it's just mostly focused on interns kind of leading their own projects.

00:06:29.000 --> 00:06:29.480
I see.

00:06:29.480 --> 00:06:33.500
So, instead of working on like, yeah, we're going to add that other button to Excel,

00:06:33.500 --> 00:06:38.860
you guys get to create something new and original and see what direction you could take it, right?

00:06:38.940 --> 00:06:39.140
Yeah.

00:06:39.140 --> 00:06:39.200
Yeah.

00:06:39.200 --> 00:06:42.160
I mean, the ideas itself are backed by sponsors.

00:06:42.160 --> 00:06:46.520
So, in our case, our sponsor was the VS Code Python team.

00:06:47.140 --> 00:06:52.080
So, the ideas aren't thought out by us, but like, we're given kind of the ideas and support from like,

00:06:52.080 --> 00:06:54.140
people actually from Microsoft in the industry.

00:06:54.140 --> 00:06:58.020
So, it really fosters kind of this startup mindset kind of.

00:06:58.440 --> 00:07:03.540
But I feel like we're also given like, a lot of support from the coaches that they give us and just like,

00:07:03.540 --> 00:07:05.440
overall, the people in garage.

00:07:05.440 --> 00:07:06.420
Anyone else you want to add to it?

00:07:06.440 --> 00:07:11.160
For me, looking at weighing down at the other internships I've seen, this one is more intensive.

00:07:11.160 --> 00:07:14.560
You actually see the whole product lifecycle from start to finish.

00:07:14.560 --> 00:07:19.180
There's a lot of, you know, uncertainty when we're actually dealing with what we should do next.

00:07:19.180 --> 00:07:24.840
And I think the garage program gives us that liberty to make those decisions and kind of figure it out on our own.

00:07:24.840 --> 00:07:26.560
If we have any questions, we can ask them.

00:07:26.560 --> 00:07:31.580
But it gives us a lot of space to kind of think creatively and kind of collaborate as a team

00:07:31.580 --> 00:07:33.360
and come up with the next steps of the project.

00:07:33.480 --> 00:07:37.820
And again, we have their support if we're heading up in the wrong direction.

00:07:37.820 --> 00:07:39.380
They're there to kind of push us back.

00:07:39.380 --> 00:07:41.460
But the program is very unique.

00:07:41.460 --> 00:07:46.880
It's not like where you jump into an existing major product and you just add one or two features.

00:07:46.880 --> 00:07:50.940
You're working on multiple features at the same time, conducting a lot of user testing,

00:07:50.940 --> 00:07:52.660
going back and forth with sponsors.

00:07:52.660 --> 00:07:54.260
So, it's a lot of work.

00:07:54.260 --> 00:07:57.620
It's very intensive, but we learn so much within that four-month span.

00:07:57.620 --> 00:07:58.000
Yeah.

00:07:58.000 --> 00:08:02.400
It's very, like, what makes Garage very unique and special is that it's very empowering.

00:08:02.580 --> 00:08:08.880
Like, making decisions as interns, decisions that sometimes CEOs make that are, like, data-driven,

00:08:08.880 --> 00:08:12.500
looking at the telemetry and making the right product decision.

00:08:12.500 --> 00:08:14.100
That's really empowering.

00:08:14.100 --> 00:08:16.700
That's what makes Garage completely unique.

00:08:16.700 --> 00:08:19.200
And I don't think you can find anything like that in the whole world.

00:08:19.320 --> 00:08:21.580
And sorry to add to that with the data as well.

00:08:21.580 --> 00:08:28.880
Sometimes there is no data and we have to create our own data by creating surveys or talking to others in our customer base.

00:08:28.880 --> 00:08:32.920
So, sometimes we have nothing to work with and we're put out there to, you know, figure it out,

00:08:32.920 --> 00:08:37.940
which I think for us, all four pushed us and actually showed how capable we are working in this field

00:08:37.940 --> 00:08:41.020
because we had no idea before this internship on how to do certain things.

00:08:41.120 --> 00:08:45.420
And after this internship, we learned so much that I never imagined that I would learn.

00:08:45.420 --> 00:08:45.860
Yeah.

00:08:45.860 --> 00:08:51.860
Well, and, you know, it's also worth pointing out that the thing that you guys worked on, it is now out.

00:08:51.860 --> 00:08:58.180
I can go over to Visual Studio Code and pull up the little marketplace and type device simulator and it's right there.

00:08:58.340 --> 00:09:06.260
It's not just some theoretical project you get to work on or whatever, but you actually are working on something that is shipping to people and they're using and they're trying out.

00:09:06.260 --> 00:09:06.460
Yeah.

00:09:06.460 --> 00:09:11.300
And we were really lucky in that we were picking up an existing project that was already kind of live.

00:09:11.300 --> 00:09:20.920
So, during our internship, we actually made updates to the extension and kind of got to see the user telemetry from that and kind of like user feedback.

00:09:20.920 --> 00:09:25.620
And like if we made like a mistake, then we kind of like knew pretty much immediately.

00:09:25.940 --> 00:09:33.120
So, I feel that like with other projects that weren't launched yet, they didn't really have that instant feedback, but we were able to get that, which is really cool.

00:09:33.120 --> 00:09:33.460
Right.

00:09:33.460 --> 00:09:37.520
If there was some kind of bug or whatever, you would know immediately because reports, right?

00:09:37.520 --> 00:09:38.680
Yeah.

00:09:38.680 --> 00:09:39.560
Yeah, exactly.

00:09:39.560 --> 00:09:41.720
Yeah, that's both great and stressful.

00:09:41.720 --> 00:09:43.840
You said like it's not like theory.

00:09:43.840 --> 00:09:45.880
It's very like, you know, like it's shit.

00:09:45.880 --> 00:09:54.460
And we really felt the truth of it once we got teachers and students contacting us through emails or GitHub when they wanted to fix bugs.

00:09:54.660 --> 00:09:57.440
And like we felt that we had a real impact.

00:09:57.440 --> 00:09:58.860
Yeah, absolutely.

00:09:58.860 --> 00:10:09.940
So, let's really quickly before we talk about the device simulator, you know, a lot of people who have been listening to the show for a while, they know that I've had the folks come talk about CircuitPython.

00:10:09.940 --> 00:10:13.540
I've had people come talk about MicroPython and whatnot.

00:10:13.540 --> 00:10:19.980
But there's a lot of people who maybe didn't catch those episodes or they, you know, they're newer to the show.

00:10:19.980 --> 00:10:29.740
One of you all just sort of tell people what CircuitPython is and how it's the same and different than, say, Python if I go to my Mac or Windows and type Python.

00:10:29.980 --> 00:10:38.560
So, the CircuitPython library, it's a fork of the MicroPython library made by Adafruit so that it could work on like the Adafruit microcontrollers.

00:10:38.560 --> 00:10:46.320
So, it's pretty much just like a version of the Python library that could just like work on those like microcontrollers.

00:10:46.320 --> 00:10:51.300
But the way that we did things was a lot more just kind of writing like simulation libraries.

00:10:51.300 --> 00:10:56.000
So, it didn't really work as low level as like they usually do when they make a microcontroller.

00:10:56.000 --> 00:10:59.160
But, yeah, that's kind of like the gist of CircuitPython.

00:10:59.160 --> 00:11:02.080
Yeah, it's incredibly, it runs on incredibly small devices.

00:11:02.080 --> 00:11:05.980
Like one of the things we're going to talk about is the CircuitPython Express.

00:11:05.980 --> 00:11:07.260
What's the name of that little circular?

00:11:07.260 --> 00:11:09.360
CircuitPython Express.

00:11:09.360 --> 00:11:10.560
CircuitPython Express.

00:11:10.560 --> 00:11:11.100
That's right.

00:11:11.180 --> 00:11:20.620
And so, that thing is like a $25 little device and it has buttons and it has lights and has all sorts of other stuff in addition to just the little chip on it.

00:11:20.620 --> 00:11:24.200
So, CircuitPython runs on really small things, I guess is the point.

00:11:24.200 --> 00:11:32.980
Yeah, like I think that it's like really cool how Adafruit has so many of these like microcontrollers where like all of these like LEDs, buttons, sensors are all built into it.

00:11:32.980 --> 00:11:37.020
So, you don't need to like hook it up as you would with like an Arduino, for example.

00:11:37.260 --> 00:11:53.320
So, like it gives new learners like a lot more to work with in terms of just like seeing how one thing interacts with another thing without really worrying about like, you know, damaging their products by hooking up things wrong, which is like something that was really daunting to me when I first learned microcontrollers.

00:11:53.320 --> 00:11:53.820
So, yeah.

00:11:53.820 --> 00:11:54.300
Yeah, yeah.

00:11:54.300 --> 00:11:57.560
No soldering irons necessary to get started, for example.

00:11:57.560 --> 00:11:57.880
Yeah.

00:11:57.880 --> 00:11:58.260
Yeah.

00:12:00.820 --> 00:12:03.100
This portion of Talk Python To Me is brought to you by Linode.

00:12:03.100 --> 00:12:12.040
Whether you're working on a personal project or managing your enterprise's infrastructure, Linode has the pricing, support, and scale that you need to take your project to the next level.

00:12:12.040 --> 00:12:26.700
With 11 data centers worldwide, including their newest data center in Sydney, Australia, enterprise-grade hardware, S3-compatible storage, and the next-generation network, Linode delivers the performance that you expect at a price that you don't.

00:12:27.140 --> 00:12:42.740
Get started on Linode today with a $20 credit, and you get access to native SSD storage, a 40-gigabit network, industry-leading processors, their revamped cloud manager at cloud.linode.com, root access to your server, along with their newest API, and a Python CLI.

00:12:43.200 --> 00:12:50.780
Just visit talkpython.fm/linode when creating a new Linode account, and you'll automatically get $20 credit for your next project.

00:12:50.780 --> 00:12:52.060
Oh, and one last thing.

00:12:52.060 --> 00:12:52.840
They're hiring.

00:12:52.840 --> 00:12:55.940
Go to linode.com slash careers to find out more.

00:12:55.940 --> 00:12:57.280
Let them know that we sent you.

00:12:59.660 --> 00:13:11.220
Another thing I wanted to ask you all at the beginning, I get a lot of questions from folks, how to get into programming, how to get into Python, how to get maybe a first job or an internship.

00:13:11.220 --> 00:13:12.700
Any of you guys have good advice?

00:13:12.700 --> 00:13:15.660
Sounds like you've had pretty good success finding internships.

00:13:15.660 --> 00:13:23.080
The first thing I would do is attend meetups or small little networking events that discuss any topic in technology.

00:13:23.080 --> 00:13:29.240
It can be Python, it can be public speaking, it could be anything, just to get a means of being comfortable in the tech space.

00:13:29.240 --> 00:13:37.800
It doesn't have to be super technical, but meeting like-minded people, I think once you get comfortable with that, then you can go to the next step and maybe start programming small little projects.

00:13:38.020 --> 00:13:44.780
But I think the first thing is to meet people who are in the same field, like-minded people, and you can discuss certain passions and then go from there.

00:13:44.780 --> 00:13:47.280
That's the first thing that I did, and it really helped.

00:13:47.280 --> 00:13:53.380
And I actually went to the, I think it's called the networking night before the internship applications opened in September.

00:13:53.380 --> 00:13:54.500
I'm not sure if you guys were there.

00:13:54.500 --> 00:14:00.700
I didn't see Andrew or Vandy, but I was there at Microsoft, and it was basically talking about the Garage program.

00:14:00.700 --> 00:14:05.980
And that's where I met so many people, and we talked about what school they came from, what projects they were working on,

00:14:06.040 --> 00:14:08.360
kind of getting the gist of who's out there, you know?

00:14:08.360 --> 00:14:09.960
So that's the first thing that I would do.

00:14:09.960 --> 00:14:11.760
I definitely agree with what Sayida said.

00:14:11.760 --> 00:14:18.420
My biggest advice would be to honestly get out there, get out there, meet people, program with them.

00:14:18.420 --> 00:14:21.460
How I got into it is with a hackathon.

00:14:21.460 --> 00:14:28.540
Even though I didn't know coding, people were ready to take me by the hand and teach me how to code and bring me onto their team.

00:14:28.540 --> 00:14:32.860
And yeah, I think that's a good way to start.

00:14:32.860 --> 00:14:33.540
Very cool.

00:14:33.740 --> 00:14:42.000
And to add to that as well, I think two things that as interns we've learned, and I've actually carried that on today, like in my school years and when I graduated,

00:14:42.000 --> 00:14:45.420
at Microsoft we learned to have a growth mindset and to fail fast.

00:14:45.420 --> 00:14:52.320
And one advice I would give to students who are trying to break into technology or break into this field is to adapt those two mindsets.

00:14:52.320 --> 00:14:59.660
It's okay if there's something that you're not aware of when you're in a hackathon or there's some kind of technical question you're not aware of how to solve.

00:14:59.740 --> 00:15:00.100
It's okay.

00:15:00.100 --> 00:15:00.420
It's okay.

00:15:00.420 --> 00:15:00.920
Fail fast.

00:15:00.920 --> 00:15:01.420
It's all good.

00:15:01.420 --> 00:15:04.480
Figure it out and have that growth mindset and you'll learn from there.

00:15:04.480 --> 00:15:09.420
Once you're comfortable with that uncertainty, you'll be able to progress and actually be more comfortable in the tech space.

00:15:09.620 --> 00:15:14.180
So that's another advice I would give to people who are trying to break into this field.

00:15:14.180 --> 00:15:15.200
Yeah, that's good advice.

00:15:15.200 --> 00:15:16.360
Yeah, I'd like to add to that.

00:15:16.360 --> 00:15:20.500
I think that the growth mindset and the fail fast mentality is really helpful.

00:15:22.180 --> 00:15:27.280
Personally, whenever I'm helping someone with programming and they're all like, oh, I made this mistake and this mistake and this mistake.

00:15:27.280 --> 00:15:29.280
I'm like, yeah, I made those mistakes too.

00:15:29.280 --> 00:15:31.080
I made them a thousand times.

00:15:31.080 --> 00:15:38.640
Whenever anyone's getting into programming, it's natural to totally not know what's happening and just to feel super lost.

00:15:38.980 --> 00:15:46.240
But it's kind of like making those mistakes and just kind of taking that time to learn is really necessary.

00:15:46.240 --> 00:15:53.800
And just being patient with yourself and just not being so hard on yourself when you make mistakes, I think, is a really important part.

00:15:53.800 --> 00:15:54.220
Yeah.

00:15:54.360 --> 00:15:54.860
Yeah, I agree.

00:15:54.860 --> 00:16:03.860
I think that feeling of being lost or not knowing what to do when you're new, I think it feels like, oh, I don't belong here because I'm other people seem to know and I don't.

00:16:03.860 --> 00:16:09.700
But as the more you get into it, just feeling kind of lost and unsure, like that's just part of the way it goes in technology.

00:16:09.700 --> 00:16:11.660
And you just keep going.

00:16:11.660 --> 00:16:12.180
Yeah.

00:16:12.180 --> 00:16:22.140
Like it's pretty easy to kind of find yourself in that mindset where you feel like you're as caught up as everyone else, especially when everyone throws like throws around terms like ML and AI.

00:16:22.260 --> 00:16:28.620
And it's like, oh, a database and like you don't even know anything about technology, then it feels like, oh, I'm not, I don't belong here.

00:16:28.620 --> 00:16:32.640
But it really is just like a process to learn.

00:16:32.640 --> 00:16:38.700
And it's like no one should ever really feel discouraged or ever feel like they're not the type to be in this field, you know?

00:16:38.700 --> 00:16:39.000
Yeah.

00:16:39.000 --> 00:16:40.120
Yeah, sure.

00:16:40.120 --> 00:16:41.540
All right.

00:16:41.540 --> 00:16:44.840
Let's talk about this idea, this project that you worked on.

00:16:44.840 --> 00:16:48.540
You can go to Adafruit and you can buy some of these devices.

00:16:48.540 --> 00:16:52.040
Is everything that you're simulating now, Vandy, is everything?

00:16:52.040 --> 00:16:58.040
That you're simulating available in physical form from Adafruit or are there different places and different devices?

00:16:58.040 --> 00:17:04.300
Everything you can simulate on the simulator is also doable on the actual hardware and device.

00:17:04.300 --> 00:17:09.180
And we have three devices that you can play around with on our simulator.

00:17:09.180 --> 00:17:15.640
We have the Adafruit Circuit Playground Express, the BBC Microbit, and then the Adafruit.

00:17:15.640 --> 00:17:16.200
Okay, cool.

00:17:16.280 --> 00:17:18.360
So the BBC Microbit and then the two from there.

00:17:18.360 --> 00:17:20.640
And, you know, I had gone to Adafruit.

00:17:20.640 --> 00:17:24.440
I was going to get some cool device for a project with a friend and we were going to build that.

00:17:24.440 --> 00:17:25.540
And then, you know what?

00:17:25.540 --> 00:17:28.840
This part was not available and this thing was back ordered.

00:17:28.840 --> 00:17:31.060
And who knows when this other thing is going to be available.

00:17:31.700 --> 00:17:41.540
And what I really like about what you guys have built is you can go from, hey, I want to try out this little IoT thing to I'm trying out that IoT thing almost instantly.

00:17:41.540 --> 00:17:45.400
You don't have to wait for it to be in stock, for it to be shipped, for everyone to get one, right?

00:17:46.040 --> 00:17:50.300
So tell everyone about the device simulator in VS Code.

00:17:50.300 --> 00:17:51.480
What's the main idea?

00:17:51.480 --> 00:17:52.020
What does it do?

00:17:52.020 --> 00:17:53.600
Yeah, it's pretty funny that you say that.

00:17:53.600 --> 00:17:58.360
Actually, when we were coding for the Clue, it was actually sold out as well.

00:17:58.360 --> 00:18:04.420
And we had to contact Adafruit to get some devices from them because we couldn't buy them, actually.

00:18:04.420 --> 00:18:19.300
And so the extension, what it does is it simulates the, like you write code that would normally work on the hardware, but you can run it in our VS Code extension and it will do the same thing as it would do in the hardware.

00:18:19.300 --> 00:18:27.980
So if you say, like, turn the NeoPixel to the color green, you can run it in the simulator, which is directly like embedded into VS Code.

00:18:28.440 --> 00:18:34.420
And then the simulators, the device on the simulator will also turn the NeoPixel to green.

00:18:34.420 --> 00:18:40.540
And then you can even say you have a lot of fun with the simulator and you actually want to get a device.

00:18:40.540 --> 00:18:52.380
And so like when they come back in stock and you buy one, you can also use our simulator to deploy your code to the device and see it work on both the simulator and the actual hardware.

00:18:52.380 --> 00:18:57.740
Yeah, and I was really surprised when I first saw it because it looks really good.

00:18:58.200 --> 00:19:05.700
Like you've got the code and CircuitPython, you have like code.py or main.py and it's just the one file to get everything started.

00:19:05.700 --> 00:19:16.360
But then in a split pane, you have the Circuit Playground Express and it's like this big, nicely rendered, realistic looking replica.

00:19:16.360 --> 00:19:18.180
And it's much bigger, right?

00:19:18.180 --> 00:19:24.320
It might even be better to program on the simulator than the tiny little device because you've got it like big screen right next to your code.

00:19:24.320 --> 00:19:25.020
It's beautiful.

00:19:25.020 --> 00:19:31.060
We did a lot of user testing to make sure that the UI was applicable to all our customers.

00:19:31.060 --> 00:19:40.480
And anytime we team up with an update, I would like schedule a user testing and we would ask them questions on how it's looking after they've done some programming.

00:19:40.480 --> 00:19:43.860
And they'd give us some suggestions like, oh, hey, can you make the simulator bigger?

00:19:43.860 --> 00:19:45.180
Like, can you adjust the size?

00:19:45.740 --> 00:19:49.540
So far, that feature is not there yet, but we had in our backlog and we wanted to work on it.

00:19:49.540 --> 00:19:57.200
But we made sure that we were advocating for what our users wanted to ensure that once the final product was pushed out, they would be happy with it.

00:19:57.200 --> 00:19:59.860
So I'm glad you really liked the interface.

00:19:59.860 --> 00:20:00.760
So it shows that we did it.

00:20:00.760 --> 00:20:06.740
I was really surprised when I saw it come up because it looks exactly like the Circuit Playground Express.

00:20:06.740 --> 00:20:07.940
It has the buttons.

00:20:07.940 --> 00:20:12.260
You can click on it, you know, click on the picture and it's like you're clicking on the buttons.

00:20:12.260 --> 00:20:19.380
It reminds me a little bit of like an iPhone or an Android dev experience where you've got an emulator there.

00:20:19.380 --> 00:20:22.540
Like you run it and the thing is there and it looks more or less like what you're working with.

00:20:22.640 --> 00:20:27.320
But like I said here, it's bigger and bolder and maybe even better than the real thing in some ways.

00:20:27.320 --> 00:20:33.660
Just to add to that, like it's not only visually appealing, we kind of improved it to make it very practical as well.

00:20:33.660 --> 00:20:38.400
That's why there's a lot of accessibility features that you could tab and switch between those buttons.

00:20:38.400 --> 00:20:45.760
There's also keyboard shortcuts where you can click and you can see some direct feedback, direct lights happening on the UI.

00:20:45.760 --> 00:20:46.240
Right, right.

00:20:46.240 --> 00:20:47.040
So you've got that.

00:20:47.040 --> 00:20:54.420
You can click under your mouse, but you can also assign keyboard shortcuts for like pressing the A button or the B button or both at the same time and things like that.

00:20:54.420 --> 00:20:56.380
Yeah, it's quite nice.

00:20:56.380 --> 00:20:57.140
Okay.

00:20:57.140 --> 00:21:06.680
So maybe a nice way to help people understand sort of what the flow looks like here is maybe we could just talk through like a really simple getting started demo.

00:21:06.680 --> 00:21:08.860
Like what are the steps of getting started?

00:21:08.860 --> 00:21:09.220
Yeah.

00:21:09.460 --> 00:21:17.220
First, you will obviously need VS Code, the code editor, and then you'll have to have Python installed as well.

00:21:17.220 --> 00:21:23.520
And then you can go into the extensions part of VS Code and search for Device Simulator Express and then install it.

00:21:23.520 --> 00:21:31.120
And then once you have it installed, there is a little page that like a readme that you can read through.

00:21:31.400 --> 00:21:42.680
The gist of it is that to use the extension, you have to go through the command palette, which is through Ctrl-Shift-P on Windows and Apple-Shift-P.

00:21:42.680 --> 00:21:45.700
Yeah, that's pretty common for Visual Studio Code, right?

00:21:45.700 --> 00:21:53.160
So people who are familiar with that, they're used to just hitting Command-Shift-P or Ctrl-Shift-P or whatever it is, right?

00:21:53.160 --> 00:21:56.100
And so basically it plugs into that same infrastructure, right?

00:21:56.100 --> 00:22:00.300
You pull up the command palette and there's like not quite a wizard, but there's like an onboarding flow.

00:22:00.300 --> 00:22:00.780
Yeah.

00:22:00.780 --> 00:22:08.720
And then so usually what I tell people is to check out the Getting Started page, which is like a little web page that we packed in there.

00:22:08.720 --> 00:22:12.100
And it tells you you can select the device you want to use.

00:22:12.100 --> 00:22:18.580
And it has like little code snippets that you can copy and paste into the simulator to like test things out.

00:22:18.840 --> 00:22:25.820
And then once you want to really get started, there's like a new file command that'll load up a like a very short template.

00:22:25.820 --> 00:22:30.080
And it'll open up the simulator for the device you want on the right side.

00:22:30.080 --> 00:22:40.760
And then you can at the top, there's like a comment with like, like usually a web page where you can click to also see more code snippets, which you can copy and paste as well.

00:22:41.080 --> 00:22:47.960
And then like once you have some code, you can, there's a big green play button on the right side under the simulator and you press it.

00:22:47.960 --> 00:22:52.520
And then your code starts to run on the simulator depending on what your code says.

00:22:52.920 --> 00:23:01.580
And then we also have under the simulator, there's like a toolbar and it has a bunch of icons and some, and they usually describe what it says.

00:23:01.580 --> 00:23:02.960
Like there's a temperature sensor.

00:23:02.960 --> 00:23:15.020
So you can adjust the slider to simulate different temperatures in case like your code says, if the temperature is less than 25 degrees Celsius, like change the NeoPixel to green.

00:23:15.020 --> 00:23:18.320
Yeah. Turn blue or something or red if it's above it or something like that.

00:23:18.320 --> 00:23:18.500
Right.

00:23:18.500 --> 00:23:18.960
Exactly.

00:23:18.960 --> 00:23:20.260
Or like change the text even.

00:23:20.400 --> 00:23:23.420
Yeah. Cause some things are easy, like push the button, but change the temperature.

00:23:23.420 --> 00:23:24.420
How do you do that?

00:23:24.420 --> 00:23:25.860
Right. So you've got like a little slider.

00:23:25.860 --> 00:23:29.300
Yeah. So all these inputs and stuff, they're available on that right-hand side.

00:23:29.300 --> 00:23:30.200
So you just write the code.

00:23:30.200 --> 00:23:34.680
Like if you know how to write for any of the CircuitPython stuff, it's just that, right?

00:23:34.680 --> 00:23:35.820
Yeah. And it's pretty neat.

00:23:35.820 --> 00:23:40.260
Cause like, imagine you're writing code for the actual device and you want to know if it works.

00:23:40.260 --> 00:23:45.400
Let's say like you want the micro bit to say something when it's over 30 degrees Celsius.

00:23:45.400 --> 00:23:49.760
But so what are you going to, are you going to like take the micro bit and then microwave it or something?

00:23:49.760 --> 00:23:52.140
It's a, in case it's a winter day, you know?

00:23:52.140 --> 00:23:52.420
Yeah.

00:23:52.420 --> 00:23:53.340
Yeah, exactly.

00:23:53.340 --> 00:23:54.120
Yeah.

00:23:54.120 --> 00:23:54.980
Yeah.

00:23:54.980 --> 00:23:55.600
Super cool.

00:23:55.600 --> 00:24:01.260
Andrea, where are some of the other sensors that you have in the Circuit Playground Express there or some of the other devices even?

00:24:01.420 --> 00:24:03.320
Well, I'll talk about the other devices first.

00:24:03.320 --> 00:24:09.680
So the devices that we added were like the micro bit, the BBC micro bit, and also the Adafruit clue.

00:24:09.680 --> 00:24:16.320
So initially our garage project was to work on like the micro bit for the entire term, but we were able to get that done quickly.

00:24:16.880 --> 00:24:33.180
So we were able to just take on the clue, which is a bit more daunting because it, I'm not sure if everyone knows, but the clue is pretty much just like a micro bit, but it has like a 24 pixel by, I was sorry, 240 pixel by 240 pixel screen.

00:24:33.440 --> 00:24:38.660
And it can have like slideshows, it can draw shapes, and it's just like, it's really cool.

00:24:38.660 --> 00:24:41.980
But at the same time, it's like, oh, how are we going to do this?

00:24:41.980 --> 00:24:42.740
You know, it has its own.

00:24:42.740 --> 00:24:43.040
Yeah.

00:24:43.040 --> 00:24:48.740
It's one thing to go from 12 or whatever it is, LEDs that turn on and off to like full screens with animation.

00:24:48.740 --> 00:24:49.320
Yeah.

00:24:49.320 --> 00:24:49.640
Yeah.

00:24:49.640 --> 00:24:57.140
So it's like, it even had its own like built in like kind of like console, like terminal that, or that had print statements and stuff.

00:24:57.140 --> 00:25:01.180
So we had to deal with like, like getting the text working, working and everything.

00:25:01.180 --> 00:25:12.140
So eventually we were able to use some of the drivers already like provided by Adafruit and kind of like make our own like custom base code for that to work on.

00:25:12.140 --> 00:25:14.820
And then, yeah, we're able to get that working.

00:25:14.820 --> 00:25:22.600
But like the clue has like a lot more in terms of just like sensors, like it has, like I'm just looking at it right now.

00:25:22.600 --> 00:25:29.040
It has gyro acceleration, like temperature pressure, and it has like a Neopixel right at the back too.

00:25:29.040 --> 00:25:31.580
So it really just has like a lot.

00:25:31.580 --> 00:25:36.300
It's pretty much like, as we said, as we would often say, it's like a micro bit on steroids.

00:25:36.300 --> 00:25:41.840
So yeah, that was like really cool, but also like a really daunting task to have.

00:25:41.840 --> 00:25:47.140
But yeah, going back to like the sensors on the CPX, Kevin, do you want to speak on that?

00:25:47.140 --> 00:25:47.800
All right, sure.

00:25:47.800 --> 00:25:53.860
Well, like I'm not going to remember like each of them, but there's motion sensors, which is pretty cool.

00:25:53.940 --> 00:25:57.520
Like if you shake it or all of those, we can detect it.

00:25:57.520 --> 00:26:01.540
And it's also possible to simulate it inside our extension.

00:26:01.540 --> 00:26:03.000
We have temperature.

00:26:03.000 --> 00:26:05.180
Venni, do you want to list the other?

00:26:05.180 --> 00:26:06.640
Yeah, yeah.

00:26:06.640 --> 00:26:11.380
I think there's an IR one, but I don't know all of them.

00:26:11.380 --> 00:26:12.840
Yeah, I haven't tracked them out.

00:26:13.360 --> 00:26:17.500
The light sensor temperature, the Neopixel, the motion sensor.

00:26:17.500 --> 00:26:23.240
The IR one isn't in the simulator, but it is on the actual device.

00:26:23.240 --> 00:26:23.760
Yeah.

00:26:23.760 --> 00:26:24.120
Right.

00:26:24.120 --> 00:26:24.920
Right.

00:26:24.920 --> 00:26:34.240
So what I think is cool about this is you basically expose almost all the functionality of these little devices on there in order to play with them and whatnot.

00:26:34.520 --> 00:26:34.760
Yeah.

00:26:34.760 --> 00:26:38.120
Again, apologies for like us not knowing all of them.

00:26:38.120 --> 00:26:38.720
No, no, it's fine.

00:26:38.720 --> 00:26:39.960
It's been a while since we looked at it.

00:26:39.960 --> 00:26:48.640
But yeah, it has like the different LEDs, push buttons, slider switch, 10 Neopixels, light sensor, motion sensor, acceleration, shake, temperature.

00:26:48.640 --> 00:26:52.280
And yeah, yeah, I'm just reading off of the readme right now.

00:26:52.280 --> 00:26:54.780
But yeah, that's kind of it.

00:26:54.920 --> 00:26:56.340
Yeah, so I think it's really neat.

00:26:56.340 --> 00:26:57.820
And you've got these three different devices.

00:26:57.820 --> 00:27:04.580
The clue sounds the most interesting, but maybe not the first one you would start with if you were like a true beginner and whatnot.

00:27:04.580 --> 00:27:11.700
But maybe just talk to you about how like maybe teachers or people in education might use this.

00:27:11.700 --> 00:27:21.980
I think for teachers, I think that we initially started with a micro bit and teachers who are trying to teach Python or just micro controllers in general to their students,

00:27:21.980 --> 00:27:27.880
they would use our extension to kind of get the basics of the code and then just deploy it to the simulator.

00:27:27.880 --> 00:27:32.160
And if we have the devices in the class, we'd also deploy it to the device as well, the actual device.

00:27:32.160 --> 00:27:34.660
We also have a feature called getting started.

00:27:34.860 --> 00:27:45.040
So if teachers and students are very new to this whole VS Code extension and Python in general, they can install the extension and then just go to the getting started page.

00:27:45.040 --> 00:27:50.780
And we give them step-by-step instructions on how to get started with the basic codes on like Hello World.

00:27:50.780 --> 00:27:53.380
So that's pretty much it for that.

00:27:53.380 --> 00:28:03.620
If you were a teacher and you had a class of students, instead of saying, how do I get my school to buy 20 clues or Circle Playground Expresses or whatever,

00:28:03.620 --> 00:28:06.500
you can just say, we're going to install Visual Studio Code.

00:28:06.500 --> 00:28:07.040
It's free.

00:28:07.040 --> 00:28:11.000
Install the Python extension and we're going to install the device simulator.

00:28:11.000 --> 00:28:15.420
All right, kids, now we can have class and we can play with these ideas, right?

00:28:15.420 --> 00:28:15.720
Yeah.

00:28:15.720 --> 00:28:22.360
And also like if they're not able to install VS Code itself, this is also available on VS Code online.

00:28:22.360 --> 00:28:22.940
Oh, it is.

00:28:23.040 --> 00:28:23.200
Okay.

00:28:23.200 --> 00:28:23.820
Yeah, that's cool.

00:28:23.820 --> 00:28:28.880
It was Andrea was able to, like the team was able to get it from working on the online version.

00:28:28.880 --> 00:28:29.780
So I think-

00:28:29.780 --> 00:28:30.180
Nice work, Andrea.

00:28:30.180 --> 00:28:30.660
Yeah.

00:28:30.660 --> 00:28:34.340
If I correctly remember, it was Andrea, right?

00:28:34.340 --> 00:28:35.020
I'm not really sure.

00:28:35.020 --> 00:28:36.820
I was given that task.

00:28:36.820 --> 00:28:37.040
Yeah.

00:28:37.040 --> 00:28:37.520
Yeah.

00:28:37.520 --> 00:28:38.060
Okay, cool.

00:28:38.060 --> 00:28:39.520
I don't want to-

00:28:39.520 --> 00:28:43.600
I was working, I was actually working on two projects during my internship.

00:28:43.600 --> 00:28:45.480
So I was in between two teams.

00:28:45.480 --> 00:28:52.960
So lots of information, but basically if you have an Azure subscription, then you can get the VS Code online and the extension works there.

00:28:52.960 --> 00:28:57.780
So yeah, students can just kind of log in online and start with the extension.

00:28:57.780 --> 00:29:02.300
And I think we also have, we also made step-by-step video tutorials.

00:29:02.300 --> 00:29:10.920
We gave that to our sponsors, basically on how to install the actual VS Code all the way to the extension, all the way to deploying a sample code.

00:29:11.180 --> 00:29:11.360
Yeah.

00:29:11.360 --> 00:29:13.680
Step-by-step exactly on how to do it.

00:29:13.680 --> 00:29:16.860
And so if teachers ever needed that, we do have that package ready.

00:29:16.860 --> 00:29:18.240
And I think it's for our sponsors.

00:29:18.240 --> 00:29:24.020
So depending on which project or which teachers are using it, they can always reach out and get that package.

00:29:24.020 --> 00:29:24.420
Yeah.

00:29:24.420 --> 00:29:24.860
Okay.

00:29:24.860 --> 00:29:25.760
Yeah.

00:29:25.760 --> 00:29:25.960
Yeah.

00:29:25.960 --> 00:29:26.380
Very cool.

00:29:27.780 --> 00:29:40.740
Vandy, one thing that seems interesting to me is like, on one hand, we, in this education scenario, we could have a bunch of kids with these devices, or we could have them using Visual Studio Code and the simulator.

00:29:40.740 --> 00:29:45.740
But in the end, like kids really like having the physical thing that does something.

00:29:45.740 --> 00:29:55.500
So it might make sense to have like a teacher get one clue and one Circuit Playground Express, all the kids work on the simulator, and then they each get a turn with the physical device.

00:29:55.500 --> 00:29:56.440
What do you think?

00:29:56.440 --> 00:29:56.720
Yeah.

00:29:56.720 --> 00:30:02.700
I think that's like the best way to do it because let's say you code something awesome and you have it on your screen.

00:30:02.700 --> 00:30:08.080
But like at recess or something, you want to show other kids in different classes.

00:30:08.080 --> 00:30:23.000
And so if you can deploy what you did on the simulator into the device and like walk around and show it actually light up and show it change state depending on like if you shake it or if light is shining on it, that would be super cool.

00:30:23.000 --> 00:30:28.840
And I think that's a perfect way to use our simulator and also like have the device on hand.

00:30:28.840 --> 00:30:35.820
And with our simulator, there is like a feature where you can deploy straight to the device with the click of a button.

00:30:35.820 --> 00:30:40.820
So yeah, so you connect the device to the computer and you work on a simulator and then you just push a button.

00:30:40.820 --> 00:30:41.740
Yeah.

00:30:41.740 --> 00:30:44.320
What device does this really go to?

00:30:44.320 --> 00:30:48.760
You pick it and then then it's on the device just as if you just deploys it, right?

00:30:48.760 --> 00:30:49.360
Yeah, exactly.

00:30:49.360 --> 00:30:49.700
Nice.

00:30:49.700 --> 00:30:52.900
Kevin, anything else you want to add to this whole education story?

00:30:52.900 --> 00:30:54.140
What are you seeing people doing?

00:30:54.140 --> 00:30:54.820
Yeah, definitely.

00:30:54.820 --> 00:31:01.900
Like the example you just talked about shows that our extension is not mutually exclusive of having a device.

00:31:01.900 --> 00:31:07.340
like we think is really like adding to the experience of having, let's say, a microcontroller.

00:31:07.340 --> 00:31:10.860
So you said before, like we make it easier to deploy.

00:31:10.860 --> 00:31:15.320
But in the end, especially for kids, they're very visual people.

00:31:15.320 --> 00:31:17.420
They want to see it on live.

00:31:17.420 --> 00:31:19.600
They want to hold it in their hand and show it to their friends.

00:31:19.600 --> 00:31:21.820
And that's where like it all goes in together.

00:31:21.820 --> 00:31:23.820
Our extension makes it easier to code.

00:31:23.820 --> 00:31:25.040
It's a little bit practical.

00:31:25.500 --> 00:31:27.800
And they transfer the code to the microcontroller.

00:31:27.800 --> 00:31:31.820
And then we have like a full kind of like circle going around here.

00:31:31.820 --> 00:31:32.200
Yeah.

00:31:32.200 --> 00:31:32.620
Yeah.

00:31:32.620 --> 00:31:33.200
It's quite cool.

00:31:33.200 --> 00:31:33.440
Yeah.

00:31:33.440 --> 00:31:40.980
Another thing I wanted to add is that one of the goals of our simulator was also just to be able to program microcontrollers on the go.

00:31:40.980 --> 00:31:47.100
So I could see that our extension would help if the teachers had to leave the microcontrollers at the school.

00:31:47.100 --> 00:31:51.180
But the kids wanted to work on like certain homework assignments, you know?

00:31:51.180 --> 00:31:51.680
Oh, yeah.

00:31:51.680 --> 00:31:52.580
And like, yeah, yeah.

00:31:52.580 --> 00:31:55.300
So then they could just like they could work on that at home.

00:31:55.300 --> 00:31:59.480
And then when they get to school, they could upload it onto like the onto the actual device.

00:31:59.480 --> 00:32:08.480
So, yeah, it's like it's a or even if like they just like they just have limited resources, you know, it's I feel like just having it on the go is really convenient.

00:32:08.480 --> 00:32:08.920
Yeah.

00:32:08.920 --> 00:32:09.720
Yeah.

00:32:09.720 --> 00:32:16.660
And like I said, also, it's it's not just about not having the money for the devices like they go out of stock and you can't get them anymore.

00:32:16.660 --> 00:32:16.960
Right.

00:32:16.960 --> 00:32:18.320
So this is really, really cool.

00:32:18.320 --> 00:32:18.560
Yeah.

00:32:18.560 --> 00:32:23.080
Now, one thing I want to talk about with the experience you all have here that I think is pretty cool.

00:32:23.080 --> 00:32:24.440
So we've got the simulators.

00:32:24.440 --> 00:32:32.340
You write the code and then you have the ability to interact with the sensors of the simulator through like sliders and whatnot for like say temperature.

00:32:32.340 --> 00:32:35.080
Put it on the real device, checks the real temperature, whatnot.

00:32:35.080 --> 00:32:43.480
But if you're writing some code and it's not doing what you would expect, you said turn it blue and it turns red or just does nothing.

00:32:43.480 --> 00:32:44.840
You're trying to figure out why.

00:32:45.560 --> 00:32:46.900
It'd be cool if you could debug it.

00:32:46.900 --> 00:32:47.100
Right.

00:32:47.100 --> 00:32:47.500
Definitely.

00:32:47.500 --> 00:32:50.340
It's one of the features we spent a lot of our time on.

00:32:50.340 --> 00:32:56.840
And one of the features we're the most proud of is we integrated the VS Code debugger with our extension.

00:32:56.840 --> 00:33:05.800
So it gives a real like industry experience for people wanting to learn and brings it up to the next level.

00:33:05.800 --> 00:33:09.080
You can start with it, but you can also learn and become advanced with it.

00:33:09.080 --> 00:33:16.240
As we know, a debugger is used in the industry and that's very useful for young developers and students to learn.

00:33:16.340 --> 00:33:19.260
I think debuggers are, I think they're underused most of the time.

00:33:19.260 --> 00:33:21.200
A lot of people just write code.

00:33:21.200 --> 00:33:22.360
They just do print statements.

00:33:22.360 --> 00:33:25.280
They're like, or they just spend a lot of time staring at it.

00:33:25.280 --> 00:33:26.920
You know, put a break point.

00:33:26.920 --> 00:33:28.280
See what the value of that variable is.

00:33:28.280 --> 00:33:29.140
Why is it going here?

00:33:29.140 --> 00:33:29.500
Right?

00:33:29.620 --> 00:33:31.900
No, it's a string seven, not the number seven.

00:33:31.900 --> 00:33:32.320
I get it.

00:33:32.320 --> 00:33:33.100
That's why it's not equal.

00:33:33.100 --> 00:33:35.100
Things like that are really obvious in a debugger.

00:33:35.100 --> 00:33:38.500
If you print out the string seven, it looks a lot like a regular seven.

00:33:38.500 --> 00:33:38.820
Yeah.

00:33:38.820 --> 00:33:58.500
And I think that like integrating something like a debugger for like people who are just starting to learn is like super, it's super important because like as someone who has used print statements for like a lot of debugging in the past, it's like if I was more used to using a debugger and if that was like kind of like my instinctual choice a lot of the time, then maybe I'd drift more towards it.

00:33:58.560 --> 00:34:05.560
But just because I'm so used to just like my first strategy, which was print statements, it's like I just keep going back to print statements.

00:34:05.560 --> 00:34:19.620
So yeah, having the debugger there and just like kind of just overall, like even having the extension, like having the simulation as a part of VS Code, it just really helps like young developers kind of like get a sense of what they actually use in the industry.

00:34:19.620 --> 00:34:20.000
Yeah.

00:34:20.000 --> 00:34:25.900
And you can put a lot of cool, you can like level up on a lot of the stuff of say like the Python extension, right?

00:34:26.300 --> 00:34:32.060
So if I type, you know, string dot and I get a big list of stuff that I can do, right?

00:34:32.060 --> 00:34:32.660
That's really cool.

00:34:32.660 --> 00:34:40.260
You get all the autocomplete and all the code formatting features and all the stuff that VS Code does already just for MicroPython, CircuitPython.

00:34:40.420 --> 00:34:48.460
Yeah, we spent like a considerable amount of time and like to make sure that like the autocomplete and everything was working with like our library so that like it could help out a lot.

00:34:48.460 --> 00:34:55.140
But definitely like having like the IntelliSense help from like the actual like Python people was super helpful.

00:34:55.140 --> 00:34:55.460
Yeah.

00:34:55.460 --> 00:34:56.320
Yeah, that's awesome.

00:34:56.320 --> 00:34:57.880
That's pretty complicated stuff.

00:34:58.060 --> 00:35:02.880
So what's the sort of ML story of the autocomplete on VS Code?

00:35:02.880 --> 00:35:06.460
Is that IntelliCode or something like that where it predicts?

00:35:06.460 --> 00:35:07.880
Do you guys know this, what I'm talking about?

00:35:07.880 --> 00:35:08.260
Yeah.

00:35:08.260 --> 00:35:14.560
So we actually didn't do like too, too much in terms of just like digging into the whole like IntelliSense stuff.

00:35:14.560 --> 00:35:20.280
But essentially, we just applied what the Python extension people had on our library.

00:35:20.520 --> 00:35:26.920
So essentially, the IntelliSense applies to any like it will look in any directory that you tell it to.

00:35:26.920 --> 00:35:31.420
So we just we just structured our code so that it would give the correct results.

00:35:31.420 --> 00:35:34.480
And then we pointed to our directory if I were to simplify it.

00:35:34.480 --> 00:35:34.640
Yeah.

00:35:34.640 --> 00:35:36.240
Yeah.

00:35:36.240 --> 00:35:36.640
Yeah.

00:35:36.640 --> 00:35:36.920
Yeah.

00:35:36.920 --> 00:35:37.720
Very cool.

00:35:37.720 --> 00:35:48.840
See that one thing I heard when I was looking through here was certain things like Vandy said the IR sensor is not available in a simulator, but it is in the real device.

00:35:48.980 --> 00:35:55.160
And also heard that, oh, you can go over to MakeCode and do some stuff there for some of the more advanced scenarios.

00:35:55.160 --> 00:35:58.240
What's this MakeCode thing place?

00:35:58.240 --> 00:36:00.420
So MakeCode is basically a building block software.

00:36:00.420 --> 00:36:02.100
It's basically drag and drop.

00:36:02.100 --> 00:36:10.160
You can kind of look at certain functions and then you drag it and then you put another block inside and it would kind of work with that function.

00:36:10.160 --> 00:36:14.100
So it's a very basic way of coding, but it's a very good stepping stone.

00:36:14.100 --> 00:36:14.440
Okay.

00:36:14.600 --> 00:36:19.060
My simulator express is basically the next step after MakeCode.

00:36:19.060 --> 00:36:22.040
It's more like industrial like software programming.

00:36:22.040 --> 00:36:29.900
So yeah, MakeCode is very, it's a very basic way of understanding coding, but it's a very good way of just introducing yourself into the programming world.

00:36:29.900 --> 00:36:31.900
That's how I started actually in grade 10.

00:36:31.900 --> 00:36:35.060
I started using a building block software to learn programming.

00:36:35.200 --> 00:36:35.440
Okay.

00:36:35.440 --> 00:36:35.840
Yeah.

00:36:35.840 --> 00:36:36.300
Really cool.

00:36:36.300 --> 00:36:43.000
So it's the more visual style and then like you kind of graduate to writing actual Python code.

00:36:43.000 --> 00:36:43.480
Yeah.

00:36:43.480 --> 00:36:43.920
Yeah.

00:36:43.920 --> 00:36:44.180
Okay.

00:36:44.180 --> 00:36:44.600
Yeah.

00:36:44.600 --> 00:36:44.920
Yeah.

00:36:44.920 --> 00:36:46.240
That's quite cool.

00:36:46.920 --> 00:36:51.920
Maybe we could talk a little bit about how you all built this, like digging inside some of the implementation.

00:36:51.920 --> 00:36:53.240
How did you build it?

00:36:53.240 --> 00:36:54.080
What's going on inside?

00:36:54.080 --> 00:36:55.100
Like how's this thing work?

00:36:55.420 --> 00:36:58.660
Me and also like Vandy, we worked more on like the Python side.

00:36:58.660 --> 00:37:05.600
So on the actual device, how it would usually work is the, speaking more on the Adafruit side first.

00:37:05.600 --> 00:37:10.760
So then they would have Python drivers that would work on the CircuitPython library.

00:37:10.760 --> 00:37:18.220
So the device itself would run CircuitPython and then it would have these drivers to connect to like the LEDs and just like the sensors.

00:37:18.220 --> 00:37:24.640
So that like when you say like CPX and like, and then sensor, it would actually be accessing that value.

00:37:24.640 --> 00:37:24.920
Right.

00:37:24.920 --> 00:37:33.080
So then how we essentially did it on our side is it would just run on regular Python, like Python, like 3.8.

00:37:33.080 --> 00:37:43.540
But we would kind of make our own simulated library that instead of communicating with the hardware, it communicated with a front end that was written in React.

00:37:43.540 --> 00:37:44.000
I see.

00:37:44.000 --> 00:37:54.880
So you almost write just a really simple Python layer that just when they say light up the LED, instead of going down to real hardware, you're just like, all right, how do I communicate that over to JavaScript or something like that?

00:37:54.880 --> 00:37:54.980
Yeah.

00:37:54.980 --> 00:37:55.400
Yeah.

00:37:55.400 --> 00:37:55.880
Essentially.

00:37:55.880 --> 00:38:04.480
So it just, it would send a JSON file just like with all of the new values for all of the, for like the LEDs, for example.

00:38:04.480 --> 00:38:10.760
And then like the front end would send back like a new JSON with the sensor values and stuff like that.

00:38:10.760 --> 00:38:12.920
So it would just be communicated like that.

00:38:12.920 --> 00:38:18.540
But most of the state would just be stored on the Python side within the Python object.

00:38:18.540 --> 00:38:19.080
Yeah.

00:38:19.080 --> 00:38:19.940
Okay, cool.

00:38:19.940 --> 00:38:25.280
And people who don't know, Visual Studio Code is basically a huge JavaScript application, right?

00:38:25.280 --> 00:38:26.040
Yeah.

00:38:26.040 --> 00:38:27.220
Yeah.

00:38:27.220 --> 00:38:27.900
Yeah.

00:38:27.900 --> 00:38:33.420
Like the front end, yeah, was made using like TypeScript and like the VS Code API.

00:38:33.420 --> 00:38:40.100
And I didn't really, other than like working with virtual environment stuff, I didn't really work that much on the front end.

00:38:40.100 --> 00:38:43.200
It was mostly Kevin trying to like wrangle that mess.

00:38:43.200 --> 00:38:48.260
I, yeah, every time I had to work on it, I was like, oh, how do you do this?

00:38:48.260 --> 00:38:50.480
Exactly.

00:38:50.480 --> 00:38:51.220
Yeah.

00:38:51.220 --> 00:38:54.240
It's all Electron.js and TypeScript and all that kind of stuff, right?

00:38:54.240 --> 00:38:57.040
So Kevin, you were the one who had to make it flash on the screen.

00:38:57.040 --> 00:38:57.340
Yeah.

00:38:57.340 --> 00:38:57.900
Yeah, exactly.

00:38:57.900 --> 00:39:05.600
I worked a lot on the actual UI and what you can see, but also kind of like the part that interconnects the Python side with the UI.

00:39:05.600 --> 00:39:12.100
And the central piece at the end is the VS Code API, which makes it easy to communicate between those two blocks.

00:39:12.100 --> 00:39:12.500
Yeah.

00:39:12.500 --> 00:39:13.600
Yeah, that's cool.

00:39:13.600 --> 00:39:14.280
All right.

00:39:14.320 --> 00:39:20.460
Any notable packages or libraries that you guys used out there in this thing that you thought were pretty cool?

00:39:20.460 --> 00:39:24.060
Well, like I'm going to say that like the VS Code API is pretty cool.

00:39:24.060 --> 00:39:27.400
Like it is at the end, like a package in the library that we use.

00:39:27.400 --> 00:39:31.740
And I might be a little bit biased, but that's my opinion.

00:39:31.740 --> 00:39:34.000
Yeah.

00:39:34.000 --> 00:39:40.060
On my side, like for Python, we didn't really like per se import a lot of packages.

00:39:40.060 --> 00:39:46.300
We kind of like mocked a lot of the Adafruit packages, like the slideshow one, display shapes, display text, bitmap font.

00:39:46.940 --> 00:39:59.700
Like, so just kind of adapting those for like our own use, like I found that they were like super interesting and that like, I don't know, it'd be super cool to like work for like Adafruit and actually write these because it's like, it seems so fun.

00:39:59.700 --> 00:40:11.120
But yeah, just like overall and like even the underlying libraries that are made using C, when I was trying to transcribe them into Python, it was like, oh, this is like, this is really cool, you know?

00:40:11.120 --> 00:40:13.000
Yeah.

00:40:13.000 --> 00:40:15.540
It seems like a super fun project to work on.

00:40:15.700 --> 00:40:21.840
It definitely, it has, you know, like five star ratings on the marketplace, which is really good, right?

00:40:21.840 --> 00:40:22.860
You all must be proud of that.

00:40:22.860 --> 00:40:23.660
Very proud, yeah.

00:40:23.660 --> 00:40:24.120
Yeah.

00:40:24.120 --> 00:40:24.500
Yeah.

00:40:24.500 --> 00:40:31.880
Yeah, we worked really hard and like we wanted, we're always like really keen and trying to like fix the things that like the users are having troubles with.

00:40:31.880 --> 00:40:43.740
Like, for example, when we entered like the internship, like a lot of the users were, well, like not a lot, but like some users were pointing out that it was kind of cumbersome to always have the dependencies download to like their main interpreter.

00:40:44.460 --> 00:40:50.800
And we found that, yeah, like the dependency download step would fail for a lot of people because like it was kind of complicated.

00:40:50.800 --> 00:40:57.960
Like it would download the packages to a certain like local folder and then just set the program to look at like that directory.

00:40:58.180 --> 00:41:06.460
So then we kind of repurpose that so that overall when it does a setup, it sets up its own virtual environment and then sets up our dependencies there.

00:41:06.460 --> 00:41:08.200
So it's a bit more like isolated.

00:41:08.560 --> 00:41:15.980
And also, yeah, we were able to enable users to use their own virtual environment and set up on their own virtual environment if they wanted to.

00:41:15.980 --> 00:41:20.580
So definitely iterating on like people's feedback was like an important part of the internship.

00:41:20.580 --> 00:41:20.980
Yeah.

00:41:20.980 --> 00:41:21.760
Yeah, I'm sure.

00:41:21.760 --> 00:41:22.100
Yeah.

00:41:22.100 --> 00:41:27.060
We always had that in our user testing, like at the bottom, last thing to test user flow.

00:41:27.060 --> 00:41:30.900
The way they open the extension, obviously, and how did they enjoy that experience?

00:41:30.900 --> 00:41:36.860
And we found that, again, what Anker mentioned, the dependencies, it's a bit tedious to see like sort of pop-ups and all that.

00:41:36.860 --> 00:41:40.140
So we always ensure to refine that flow to make it optimal.

00:41:40.140 --> 00:41:41.980
Yeah, it seems like a really nice experience.

00:41:41.980 --> 00:41:42.720
Super cool.

00:41:42.860 --> 00:41:45.180
So I do want to ask you all one final question.

00:41:45.180 --> 00:41:47.400
And whoever wants to jump in, just jump in.

00:41:47.400 --> 00:41:54.200
So I see you have these three devices, the Clue, the Microbit, and the Circuit Playground Express.

00:41:54.200 --> 00:42:04.760
One area that seems like it would be really cool is there's a lot of companies out there making IoT things that have an API that people might need to program.

00:42:04.760 --> 00:42:06.140
Maybe they program it in Python.

00:42:07.500 --> 00:42:14.820
And if I'm going to work with that company, let's say I make tractors and I've got a little IoT thing you could program to, I don't know, control the tractor or whatever.

00:42:14.820 --> 00:42:31.940
Is there a way that, say, that tractor manufacturer could make a virtual addition to the device simulator so that people could try it out and play with it and use it, get their API working, and then actually get a tractor or whatever, a car that self-driving, whatever they want to talk to, like that device.

00:42:31.940 --> 00:42:33.440
Could you plug other devices in?

00:42:33.440 --> 00:42:35.380
So currently, we don't have that.

00:42:35.600 --> 00:42:44.160
When we were starting the project, it was an idea that was pitched to us just by another intern, like, oh, maybe you could make it more extendable to support different microcontrollers.

00:42:44.160 --> 00:42:56.180
But in that task, there's just kind of a lot to unpack for a start, kind of see what the best UI is for these manufacturers and just kind of how they prefer to do this and that.

00:42:56.180 --> 00:43:00.800
And that in itself is like a pretty big and daunting project.

00:43:00.800 --> 00:43:03.560
And kind of since like, we're not really in the internship anymore.

00:43:03.560 --> 00:43:06.740
And we are kind of like we have our own things for now.

00:43:06.740 --> 00:43:15.740
I think it isn't on our schedule, but it would definitely be something that could help out like our extension to be more useful to like different industries.

00:43:15.920 --> 00:43:20.160
I think it would definitely take it from education to broader IoT for sure.

00:43:20.160 --> 00:43:20.680
Yeah.

00:43:20.680 --> 00:43:24.880
I think what's awesome, though, is that all the code is open source.

00:43:24.880 --> 00:43:37.040
And so like, if a company or if like people wanted to bring in like another device, they could check out the GitHub repository and make a pull request.

00:43:37.040 --> 00:43:42.720
And like, if they're really keen on it, add another device that they want to see in the simulator.

00:43:42.720 --> 00:43:43.480
Yeah, cool.

00:43:43.480 --> 00:43:44.940
I think it would be neat.

00:43:44.940 --> 00:43:46.720
But obviously, it's a lot of work, right?

00:43:46.720 --> 00:43:50.060
It's not just plug in your API here or whatever.

00:43:50.060 --> 00:43:51.380
But it still would be cool.

00:43:51.480 --> 00:43:54.520
I think that it would be really cool and really interesting to work on.

00:43:54.520 --> 00:44:05.940
But at the same time, like when I when I think about it, I think about kind of like all the user research that they want to do first in terms of like how they want it to actually work, because it could work like in multiple different ways.

00:44:05.940 --> 00:44:13.120
So just like having that plan first, like, yeah, I think that it'd be super important, like even more important than it ever was before.

00:44:13.120 --> 00:44:13.760
So, yeah.

00:44:13.760 --> 00:44:14.200
Yeah.

00:44:14.200 --> 00:44:14.680
Yeah.

00:44:14.680 --> 00:44:15.360
Cool.

00:44:15.360 --> 00:44:15.980
All right.

00:44:15.980 --> 00:44:18.500
Well, I guess maybe that's a good place to start wrapping it up.

00:44:18.760 --> 00:44:25.100
I know that you all did this as an intern project and you're on to degrees, new jobs and whatnot.

00:44:25.100 --> 00:44:27.700
But where do you see this going in the future?

00:44:27.700 --> 00:44:35.200
Either from, you know, if you guys were to contribute more or maybe the next garage intern group picks it up and runs with it.

00:44:35.200 --> 00:44:39.660
So about like next interns picking it up that we're not sure and we can't really confirm it.

00:44:39.660 --> 00:44:43.160
But since it's completely open source, anyone can contribute to it.

00:44:43.160 --> 00:44:47.320
Like myself, I still contribute even though I'm not doing internship anymore.

00:44:47.320 --> 00:44:51.780
And it would be definitely nice to have more and more support and more support from the Python community.

00:44:51.780 --> 00:44:54.460
And we could grow that extension way more.

00:44:54.920 --> 00:45:02.440
Some things like the ideas you just suggested would actually be possible on a technical side, but we would need more people working on that to make it happen.

00:45:02.440 --> 00:45:02.780
Yeah.

00:45:02.780 --> 00:45:03.520
Yeah, for sure.

00:45:03.520 --> 00:45:03.840
Yeah.

00:45:03.840 --> 00:45:07.260
Like personally, I'd contribute more if I had more time.

00:45:07.260 --> 00:45:13.420
Like on my side, I'm mostly kind of looking at bug fixes and seeing like how we can kind of just keep it like sustainable.

00:45:14.420 --> 00:45:22.820
Just because we kind of have our own things, whether it be internships or classes, it's not really easy for a lot of us to contribute as much as we used to be.

00:45:22.820 --> 00:45:29.300
Maybe you all could go on a podcast and tell other developers about it and then they could also maybe pick it up and do some contributions.

00:45:29.300 --> 00:45:30.080
Yeah.

00:45:30.080 --> 00:45:32.780
That's right.

00:45:32.780 --> 00:45:33.360
All right.

00:45:33.360 --> 00:45:36.120
Well, let me just ask you all one question.

00:45:36.120 --> 00:45:40.060
I normally ask two questions, but since there's four of you, I'll narrow it down to one each.

00:45:40.060 --> 00:45:43.520
So if you're going to write some Python code, what editor do you use?

00:45:43.660 --> 00:45:47.940
And you may all be biased given your focus here, but nonetheless, I'll ask you anyway.

00:45:47.940 --> 00:45:48.840
Andrea, you want to go first?

00:45:48.840 --> 00:45:50.360
I like VS Code.

00:45:50.360 --> 00:45:54.820
Like I'm not just saying that because I'm still at Microsoft and that we made a VS Code extension.

00:45:54.820 --> 00:46:01.980
But actually, like one of the reasons why I picked this project is because like I actually did use like VS Code a lot with Python before.

00:46:01.980 --> 00:46:05.480
And I thought it's like, wow, they can put a lot in like a pretty lightweight editor.

00:46:05.480 --> 00:46:10.920
So I was like, yeah, it's like we actually get to work with the team that does this.

00:46:10.920 --> 00:46:11.840
That's so cool.

00:46:11.840 --> 00:46:12.800
Yeah, that's pretty cool.

00:46:12.900 --> 00:46:14.600
Yeah, like mini fangirl moment.

00:46:14.600 --> 00:46:16.780
But yeah, I go VS Code.

00:46:16.780 --> 00:46:18.720
Vandy, how about you?

00:46:18.720 --> 00:46:20.920
Yeah, I'm going with VS Code as well.

00:46:20.920 --> 00:46:21.320
Okay.

00:46:21.320 --> 00:46:22.720
I just love the experience.

00:46:22.720 --> 00:46:26.400
Well, and now you have stuff built into it that like VS Code is partly your code.

00:46:26.400 --> 00:46:26.860
So that's cool.

00:46:26.860 --> 00:46:27.600
Yeah, yeah.

00:46:27.600 --> 00:46:27.940
Awesome.

00:46:27.940 --> 00:46:28.680
Ciera?

00:46:28.680 --> 00:46:30.080
I would go to VS Code as well.

00:46:30.080 --> 00:46:32.860
I think that's the first editor I used in my first university.

00:46:32.860 --> 00:46:35.380
And until today, I have good memories for it.

00:46:35.380 --> 00:46:37.180
So I think I would continue with that.

00:46:37.180 --> 00:46:37.520
All right.

00:46:37.520 --> 00:46:37.820
Awesome.

00:46:38.280 --> 00:46:38.680
Okay.

00:46:38.680 --> 00:46:39.700
Final call to action.

00:46:39.700 --> 00:46:41.760
People want to try this out.

00:46:41.760 --> 00:46:42.760
They want to play with it.

00:46:42.760 --> 00:46:43.820
Maybe use it with students.

00:46:43.820 --> 00:46:44.700
What do they do?

00:46:44.700 --> 00:46:48.220
Well, if they want to use it with their students, I guess the first thing to do would be to download

00:46:48.220 --> 00:46:48.580
it.

00:46:48.980 --> 00:46:55.400
But yeah, just like as Syeda said, there are packages that we made in order to kind of like

00:46:55.400 --> 00:47:01.600
guide learning and just kind of like going through our getting started pages and looking

00:47:01.600 --> 00:47:06.660
through even like existing code that's like on the internet for like the CPX microbit or

00:47:06.660 --> 00:47:07.040
the clue.

00:47:07.040 --> 00:47:08.780
Most of the time it'll work.

00:47:09.040 --> 00:47:15.660
Like I know that for the clue, there's code in the actual Adafruit clue GitHub repo.

00:47:15.660 --> 00:47:19.520
And you can actually put that on the put that on our simulator and it'll work.

00:47:19.520 --> 00:47:24.380
So just kind of like I'd say just to download and play around with it and kind of like get

00:47:24.380 --> 00:47:28.840
the vibe first and kind of like see where to go from that.

00:47:28.840 --> 00:47:29.120
Yeah.

00:47:29.120 --> 00:47:33.540
And I think the first the first thing when you download it, definitely don't get intimidated.

00:47:33.540 --> 00:47:38.620
Read the readme page like carefully because there's so many commands there that can help

00:47:38.620 --> 00:47:39.920
you actually get to certain pages.

00:47:39.920 --> 00:47:44.100
Because I remember when we were doing user testing, we worked with some people who didn't

00:47:44.100 --> 00:47:45.420
have any experience with VS Code.

00:47:45.420 --> 00:47:48.720
So opening like the command palette, they're like, how do we do it?

00:47:48.720 --> 00:47:50.160
I'm like, it's right in the readme.

00:47:50.160 --> 00:47:50.920
It's right there.

00:47:50.920 --> 00:47:52.900
So just maybe look at that first.

00:47:52.900 --> 00:47:57.320
But definitely don't be intimidated by it and just, yeah, have some fun and fail fast.

00:47:57.320 --> 00:47:58.460
You won't break anything.

00:47:58.460 --> 00:48:01.160
So it's okay if you write some bad code.

00:48:01.160 --> 00:48:02.100
It's no problem.

00:48:02.100 --> 00:48:05.480
But if you break something, then let us know if we have a bug.

00:48:08.200 --> 00:48:08.380
Yeah.

00:48:08.380 --> 00:48:10.280
Let us know so we can help fix that.

00:48:10.280 --> 00:48:11.000
Yeah.

00:48:11.000 --> 00:48:11.540
Awesome.

00:48:11.540 --> 00:48:12.380
All right.

00:48:12.380 --> 00:48:14.640
You guys want to add anything else or what should we call it?

00:48:14.640 --> 00:48:15.500
Call it good.

00:48:15.500 --> 00:48:16.600
I could add one more thing.

00:48:16.600 --> 00:48:20.560
Like the tech world is becoming more and more forgiving.

00:48:20.560 --> 00:48:24.240
And like we want everyone to participate.

00:48:24.240 --> 00:48:28.360
So, you know, like learning and breaking things is completely okay.

00:48:28.360 --> 00:48:30.620
And have fun.

00:48:30.620 --> 00:48:31.740
That's pretty much it.

00:48:31.740 --> 00:48:31.980
Awesome.

00:48:31.980 --> 00:48:35.300
I just, I also wanted to add something just like right at the end.

00:48:35.680 --> 00:48:39.200
Overall, like personally, my experience in Garage was like really awesome.

00:48:39.200 --> 00:48:41.340
And we were able to get like a lot done.

00:48:41.340 --> 00:48:45.220
But this was also because like us as a team had like a really good dynamic.

00:48:45.220 --> 00:48:46.960
So just like, I don't know.

00:48:46.960 --> 00:48:49.740
I just wanted to shout out just like the team for being awesome.

00:48:49.740 --> 00:48:54.920
And just like the coaches and everyone else in Garage for being, for just like making it

00:48:54.920 --> 00:48:55.800
a great experience.

00:48:55.800 --> 00:48:58.780
Because it's like definitely this is like a team effort.

00:48:58.780 --> 00:49:03.360
And I wouldn't have gotten like anywhere close near like our end product if it was like,

00:49:03.360 --> 00:49:04.540
you know, just me.

00:49:04.540 --> 00:49:05.260
I agree, Andrea.

00:49:05.260 --> 00:49:05.860
A hundred percent.

00:49:05.860 --> 00:49:10.180
I think the team dynamic that we had, the support we had from the sponsors, from the Garage team

00:49:10.180 --> 00:49:11.600
was really, really helpful.

00:49:11.600 --> 00:49:13.700
Got to learn so much in the span of four months.

00:49:13.700 --> 00:49:18.640
I'm glad that our product is so impactful that till today people are using it.

00:49:18.800 --> 00:49:20.680
And it's basically with the help of the whole team.

00:49:20.680 --> 00:49:21.420
It's a whole team effort.

00:49:21.420 --> 00:49:22.180
Yeah, very cool.

00:49:22.180 --> 00:49:25.400
So I guess final thing before we call it a wrap.

00:49:25.400 --> 00:49:28.600
If people are out there and they're like, this Garage internship sounds awesome.

00:49:28.600 --> 00:49:29.440
How do I get to it?

00:49:29.440 --> 00:49:32.780
Like, how would they find out more for next year, next time around?

00:49:32.780 --> 00:49:36.840
I would look out in the careers page for the postings for the Garage internship.

00:49:36.840 --> 00:49:41.040
There's also a page, a type in Garage internship at Microsoft.

00:49:41.040 --> 00:49:42.680
And you'll see a good explanation of what it is.

00:49:42.680 --> 00:49:46.600
There's some videos that they've made on what people have been doing in the internship.

00:49:47.140 --> 00:49:50.520
And also, I would follow Microsoft Vancouver on Facebook.

00:49:50.520 --> 00:49:52.340
And they would post like an event.

00:49:52.340 --> 00:49:56.920
Because I went to the networking event sometime, I think if I'm not mistaken, September, October.

00:49:56.920 --> 00:49:58.200
I think it was September.

00:49:58.200 --> 00:49:58.520
Okay.

00:49:58.520 --> 00:50:02.980
And you can register and you can actually go for an information night and network with other people

00:50:02.980 --> 00:50:05.320
who are applying for the same role.

00:50:05.320 --> 00:50:05.640
All right.

00:50:05.640 --> 00:50:06.120
Very cool.

00:50:06.120 --> 00:50:06.440
All right.

00:50:06.440 --> 00:50:08.320
Well, thank you all for being on the show.

00:50:08.320 --> 00:50:09.800
It was really great to have you here.

00:50:09.800 --> 00:50:11.780
A lot of fun and congratulations on the project.

00:50:11.780 --> 00:50:13.860
It really looks genuinely useful.

00:50:13.860 --> 00:50:14.660
Awesome.

00:50:14.660 --> 00:50:15.900
Thanks for having us.

00:50:15.900 --> 00:50:16.580
Thank you so much.

00:50:16.580 --> 00:50:17.120
Yeah, you bet.

00:50:17.220 --> 00:50:17.480
Bye-bye.

00:50:17.480 --> 00:50:18.020
Bye.

00:50:18.020 --> 00:50:22.100
This has been another episode of Talk Python To Me.

00:50:22.100 --> 00:50:27.220
Our guests on this episode were Andrea Ma, Syeda Musa, Vandy Lee, and Kevin Nguyen.

00:50:27.220 --> 00:50:31.020
And it's been brought to you by Linode and us at Talk Python Training.

00:50:31.020 --> 00:50:35.660
Start your next Python project on Linode's state-of-the-art cloud service.

00:50:35.660 --> 00:50:39.960
Just visit talkpython.fm/Linode, L-I-N-O-D-E.

00:50:39.960 --> 00:50:43.280
You'll automatically get a $20 credit when you create a new account.

00:50:43.280 --> 00:50:45.260
Want to level up your Python?

00:50:45.620 --> 00:50:50.120
If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

00:50:50.120 --> 00:50:55.200
Or if you're looking for something more advanced, check out our new async course that digs into

00:50:55.200 --> 00:50:58.280
all the different types of async programming you can do in Python.

00:50:58.280 --> 00:51:02.220
And of course, if you're interested in more than one of these, be sure to check out our

00:51:02.220 --> 00:51:02.900
everything bundle.

00:51:02.900 --> 00:51:04.820
It's like a subscription that never expires.

00:51:04.820 --> 00:51:06.980
Be sure to subscribe to the show.

00:51:06.980 --> 00:51:09.380
Open your favorite podcatcher and search for Python.

00:51:09.380 --> 00:51:10.600
We should be right at the top.

00:51:10.600 --> 00:51:15.440
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

00:51:15.440 --> 00:51:19.600
and the direct RSS feed at /rss on talkpython.fm.

00:51:20.180 --> 00:51:21.680
This is your host, Michael Kennedy.

00:51:21.680 --> 00:51:23.180
Thanks so much for listening.

00:51:23.180 --> 00:51:24.220
I really appreciate it.

00:51:24.220 --> 00:51:26.000
Now get out there and write some Python code.

00:51:26.000 --> 00:51:26.620
I'll see you next time.

00:51:26.620 --> 00:51:26.900
Bye.

00:51:26.900 --> 00:51:26.900
Bye.

00:51:26.900 --> 00:51:26.900
Bye.

00:51:26.900 --> 00:51:27.900
Bye.

00:51:27.900 --> 00:51:28.900
Bye.

00:51:28.900 --> 00:51:29.900
Bye.

00:51:29.900 --> 00:51:30.900
Bye.

00:51:30.900 --> 00:51:31.900
Bye.

00:51:31.900 --> 00:51:32.900
Bye.

00:51:32.900 --> 00:51:33.900
Bye.

00:51:33.900 --> 00:51:34.900
Bye.

00:51:34.900 --> 00:51:35.900
Bye.

00:51:35.900 --> 00:51:36.900
Bye.

00:51:36.900 --> 00:51:37.900
Bye.

00:51:37.900 --> 00:51:38.900
Bye.

00:51:38.900 --> 00:51:39.900
Bye.

00:51:39.900 --> 00:51:40.900
Bye.

00:51:40.900 --> 00:51:41.900
Bye.

00:51:41.900 --> 00:51:42.900
Bye.

00:51:42.900 --> 00:51:43.400
you

00:51:43.400 --> 00:51:43.900
you

00:51:43.900 --> 00:51:44.400
you

00:51:44.400 --> 00:51:46.400
Thank you.

00:51:46.400 --> 00:52:16.380
Thank you.

