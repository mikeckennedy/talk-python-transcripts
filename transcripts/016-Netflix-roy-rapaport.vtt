WEBVTT

00:00:00.001 --> 00:00:04.660
Right now, there is a chaos monkey running through AWS, knocking over Netflix servers.

00:00:04.660 --> 00:00:07.240
But don't be alarmed. It's all part of the plan.

00:00:07.240 --> 00:00:12.820
This is Talk Python To Me with Ray Rapoport, recorded Wednesday, June 10th, 2015.

00:00:12.820 --> 00:00:42.680
Welcome to Talk Python To Me, a weekly podcast on Python, the language,

00:00:42.880 --> 00:00:45.340
the libraries, the ecosystem, and the personalities.

00:00:45.340 --> 00:00:47.640
This is your host, Michael Kennedy.

00:00:47.640 --> 00:00:50.080
Follow me on Twitter where I'm @mkennedy.

00:00:50.080 --> 00:00:54.400
Keep up with the show and listen to past episodes at talkpythontimmy.com

00:00:54.400 --> 00:00:57.080
and follow us on Twitter where we're at Talk Python.

00:00:57.080 --> 00:01:01.720
This episode, we'll be talking to Roy Rapoport about Python at Netflix.

00:01:01.720 --> 00:01:06.080
This episode is brought to you by Codeship and Hired.

00:01:06.080 --> 00:01:12.540
Thank them for supporting the show on Twitter via at Codeship and at Hired underscore HQ.

00:01:13.440 --> 00:01:16.920
The topic of this show is Python and cloud computing at Netflix.

00:01:16.920 --> 00:01:21.480
A while ago, I had the amazing opportunity to teach a Python training course

00:01:21.480 --> 00:01:23.800
to some of the developers in data science there.

00:01:23.800 --> 00:01:26.540
I want to give a quick shout out to my past students.

00:01:26.540 --> 00:01:27.500
Thanks for listening, guys.

00:01:27.500 --> 00:01:30.080
Netflix is an amazing place.

00:01:30.080 --> 00:01:32.820
And after the show with Roy, I'm even more convinced of this.

00:01:32.820 --> 00:01:34.240
You're going to love this interview.

00:01:34.240 --> 00:01:36.420
And with that, let me introduce Roy.

00:01:36.880 --> 00:01:41.380
Roy Rapoport is currently managing the Insight Engineering Organization at Netflix,

00:01:41.380 --> 00:01:45.160
where they write the powerful telemetry platform and graphics,

00:01:45.160 --> 00:01:50.400
alerting, and analytics systems on top of it that allow Netflix to have complete real-time

00:01:50.400 --> 00:01:55.100
visibility into its operations and systems in the cloud, on customer devices,

00:01:55.320 --> 00:01:57.060
and anywhere else Netflix operates.

00:01:57.060 --> 00:01:59.400
Roy, welcome to the show.

00:01:59.400 --> 00:02:00.940
Oh, thank you so much.

00:02:00.940 --> 00:02:01.740
I'm happy to be here.

00:02:01.740 --> 00:02:08.480
I'm really beside myself with excitement to talk to you about some of the stuff that you guys are doing at Netflix.

00:02:09.220 --> 00:02:10.080
So thanks so much.

00:02:10.080 --> 00:02:19.720
I think when people think about software projects and deployment and managing large software at scale,

00:02:19.720 --> 00:02:26.300
there's almost no other company that comes to mind doing the kinds of things that you're doing at Netflix.

00:02:26.300 --> 00:02:30.520
I mean, there's a few, Google, and maybe someone else.

00:02:30.520 --> 00:02:31.040
I'm not sure.

00:02:31.040 --> 00:02:38.020
But what you guys are doing is really, I think, pushing the limits of what you can do with software in the cloud these days.

00:02:38.060 --> 00:02:39.420
So I'm really excited to talk about that.

00:02:39.420 --> 00:02:40.260
Yeah.

00:02:40.260 --> 00:02:42.500
I actually love talking about this stuff, too.

00:02:42.500 --> 00:02:43.640
So it works.

00:02:43.640 --> 00:02:44.620
That's great.

00:02:44.620 --> 00:02:52.140
So since this is listened to all over the world, I know Netflix is, like, absolutely a household name in America.

00:02:52.140 --> 00:02:57.340
But maybe you could just say really briefly for folks who maybe don't know what Netflix is, what you guys do.

00:02:57.340 --> 00:02:58.320
Oh, sure.

00:02:58.320 --> 00:03:02.700
I think we're becoming, to some degree, a household name in a bunch of other countries as well.

00:03:02.700 --> 00:03:07.500
We now serve somewhere between, I think, 45 and 50 countries or thereabouts.

00:03:07.900 --> 00:03:08.920
In the world.

00:03:08.920 --> 00:03:12.200
And we are a subscription video streaming service.

00:03:12.200 --> 00:03:15.480
So the idea is you pay us a relatively small amount of money.

00:03:15.480 --> 00:03:17.580
In the U.S., I think it's about $8.99 a month.

00:03:17.580 --> 00:03:24.000
And you get unlimited access to a pretty wide catalog of TV shows and movies.

00:03:24.660 --> 00:03:28.540
And, you know, you watch about as much of that as you want in any given month.

00:03:28.540 --> 00:03:29.560
That's fantastic.

00:03:29.560 --> 00:03:29.860
Yeah.

00:03:29.860 --> 00:03:31.380
You just pay $8.

00:03:31.380 --> 00:03:35.280
And basically all movies and TV shows are not all of them.

00:03:35.280 --> 00:03:38.520
Almost all the ones that matter are yours to just watch on demand.

00:03:38.520 --> 00:03:39.080
It's great.

00:03:39.080 --> 00:03:42.840
You know, at my house, I have three kids.

00:03:42.840 --> 00:03:51.580
And about six or seven years ago, we just decided television ads constantly being on television, not really helpful.

00:03:51.960 --> 00:03:53.320
We have 600 channels.

00:03:53.320 --> 00:03:54.200
Two of them are good.

00:03:54.640 --> 00:04:03.000
And we just literally canceled our cable and said, look, we're going with Netflix and, you know, a few other things here and there like YouTube and so on.

00:04:03.500 --> 00:04:08.560
And it's made an actual real difference in my kids' lives.

00:04:08.560 --> 00:04:11.720
I think, you know, you go and ask them, what do you want for Christmas?

00:04:11.720 --> 00:04:13.080
They're like, I'm not really sure.

00:04:13.080 --> 00:04:13.720
I don't know.

00:04:13.720 --> 00:04:18.160
I mean, they're just not overwhelmed with, like, all these ads and commercials.

00:04:18.160 --> 00:04:20.720
And I think Netflix is really a positive force.

00:04:20.720 --> 00:04:22.060
No, thank you.

00:04:22.060 --> 00:04:23.820
And thanks, by the way, for paying my salary.

00:04:23.820 --> 00:04:24.380
Yeah.

00:04:24.380 --> 00:04:26.740
I'm happy to do my very small part.

00:04:26.740 --> 00:04:30.360
So speaking of salary, what do they pay for at Netflix?

00:04:30.360 --> 00:04:32.320
Oh, boy.

00:04:33.320 --> 00:04:37.120
So my job at Netflix is manager of Insight Engineering.

00:04:37.120 --> 00:04:44.260
Insight Engineering at Netflix is a software development group responsible for building real-time operational insight systems.

00:04:44.260 --> 00:04:50.500
So originally we thought of it as monitoring, but really the goal is to help people figure out what's going on and what they should do about it.

00:04:50.500 --> 00:04:59.420
And in the best cases, actually automate that sort of process of analysis, discovery, decision, and then application.

00:04:59.420 --> 00:05:00.480
That's cool.

00:05:00.480 --> 00:05:03.260
So who would you consider, like, your internal client?

00:05:03.260 --> 00:05:06.320
If you will, like, are you helping the developers?

00:05:06.320 --> 00:05:07.340
Are you helping DevOps?

00:05:07.340 --> 00:05:16.380
Are you helping, like, the business folks that decide, hey, we're working with this big data and we're trying to figure out what the next data-driven movie we're going to create is?

00:05:16.380 --> 00:05:18.640
Or what are you working with there?

00:05:18.640 --> 00:05:19.580
Who, rather?

00:05:20.120 --> 00:05:20.580
Good question.

00:05:20.580 --> 00:05:20.720
Good question.

00:05:20.720 --> 00:05:23.460
Well, it's worth noting that we don't really have DevOps people.

00:05:23.460 --> 00:05:24.520
We have developers.

00:05:24.520 --> 00:05:32.140
And every developer at Netflix both writes code, tests code, and then deploys it into production is responsible for it working well.

00:05:32.140 --> 00:05:37.580
And at 2 o'clock in the morning, if it doesn't work well, that developer wakes up to deal with it.

00:05:38.140 --> 00:05:40.520
So every developer at Netflix is our customer.

00:05:40.520 --> 00:05:54.220
Now, the interesting thing that ended up happening was, while we're focused on real-time and operational domain, so we don't typically actually work to serve the business people who want longer-term insight and sort of big data queries.

00:05:54.480 --> 00:06:06.980
All of our data ends up being stored in Hive and ends up being really useful for a whole bunch of that sort of strategic view analysis that we hadn't originally expected it to be useful for.

00:06:06.980 --> 00:06:08.180
Oh, that's excellent.

00:06:08.180 --> 00:06:10.120
And I know Hive is related to Hadoop.

00:06:10.120 --> 00:06:13.440
Is Hive kind of like the front end to your Hadoop cluster?

00:06:13.440 --> 00:06:15.100
Yeah, pretty much.

00:06:15.100 --> 00:06:19.280
Yeah, that's the simple uninitiated version.

00:06:19.280 --> 00:06:21.440
Awesome.

00:06:21.440 --> 00:06:28.460
So I've been watching you guys for a while, you know, just from a software, excuse me, architecture perspective.

00:06:28.460 --> 00:06:31.180
And I think that's what you're doing is really interesting.

00:06:31.180 --> 00:06:35.140
But could you speak to a little bit of, like, the scale of how you guys are using the cloud?

00:06:35.140 --> 00:06:36.320
What cloud are you using?

00:06:36.320 --> 00:06:37.600
That kind of stuff.

00:06:37.600 --> 00:06:38.740
Sure.

00:06:38.740 --> 00:06:43.960
So Netflix is for the control plane.

00:06:43.960 --> 00:06:49.900
So in other words, when your device talks to us to figure out what movies it could watch and lets you browse our catalog,

00:06:50.220 --> 00:06:55.440
it talks to a whole bunch of systems in the AWS Amazon Web Services cloud.

00:06:55.440 --> 00:07:06.160
I think the last official public number that we've disclosed is that we run more than 50,000 servers in the AWS cloud across several production regions.

00:07:07.160 --> 00:07:19.720
When you actually stream the movie, that stream happens that comes, sorry, when you actually stream the movie, that actually comes from our in-house content distribution network.

00:07:19.720 --> 00:07:21.660
We call this the Open Connect Network.

00:07:22.240 --> 00:07:34.420
And so we've actually deployed content caches in a whole bunch of different internet peering points and, in some cases, in large ISPs to minimize the bandwidth that they need to dedicate for Netflix.

00:07:34.420 --> 00:07:37.020
So, yeah.

00:07:37.020 --> 00:07:40.080
So that's the number of servers in the cloud.

00:07:40.880 --> 00:07:42.060
And I'm not sure.

00:07:42.060 --> 00:07:45.920
We have thousands of Open Connect servers, but I'm not exactly sure about the number.

00:07:45.920 --> 00:07:47.020
Right.

00:07:47.020 --> 00:07:47.340
Okay.

00:07:47.340 --> 00:07:48.360
Yeah.

00:07:48.360 --> 00:07:56.940
You guys have kind of been at the center of the whole net neutrality thing as well because it's so critical to get that bandwidth to so many places, right?

00:07:58.620 --> 00:08:01.980
Yes, net neutrality is something that's near and dear to Netflix's heart.

00:08:01.980 --> 00:08:04.800
I'm sure you paid a little attention to it, at least as an organization.

00:08:04.800 --> 00:08:05.780
Yes.

00:08:05.780 --> 00:08:08.100
That's really cool.

00:08:08.100 --> 00:08:14.400
I heard some really interesting statistics about how much bandwidth as a percentage of the internet you guys represent.

00:08:14.400 --> 00:08:15.460
Do you know that number?

00:08:15.460 --> 00:08:16.340
Can you speak to it?

00:08:16.340 --> 00:08:24.040
I think the last Open Numbers that's – was it Widevine who reported this?

00:08:25.360 --> 00:08:34.140
The last numbers that I heard were something on the order of 33% of internet traffic, theoretically.

00:08:34.140 --> 00:08:35.520
Yeah.

00:08:35.520 --> 00:08:36.200
That's amazing.

00:08:36.200 --> 00:08:38.320
I mean, just stop and think about that.

00:08:38.320 --> 00:08:42.420
There's millions of websites, and you guys represent a third of all bandwidth.

00:08:42.420 --> 00:08:43.020
That's amazing.

00:08:43.020 --> 00:08:47.280
But like I said, you're more or less becoming the new television for the world, right?

00:08:47.280 --> 00:08:48.560
And actually, I'm sorry.

00:08:48.560 --> 00:08:50.420
That was Sandvine.

00:08:50.420 --> 00:08:53.020
And in November, they said we had topped 35%.

00:08:53.020 --> 00:08:54.080
Wow.

00:08:54.080 --> 00:08:54.860
Yeah.

00:08:55.260 --> 00:09:04.620
So all this stuff you're talking about, scaling and CDNs and all this extra work is really needed.

00:09:04.620 --> 00:09:06.480
Yeah.

00:09:06.480 --> 00:09:12.160
It's interesting how much doing things well ends up working well for you at very large scale.

00:09:12.920 --> 00:09:28.500
And how your ability to sort of take shortcuts that probably would be a pretty sane approach using a smaller scale ends up sort of not being very much the right approach when you're looking at our scale.

00:09:28.500 --> 00:09:34.120
We end up being a lot more, I think, allergic to technical debt than we would be if we were a lot smaller.

00:09:34.120 --> 00:09:53.620
So I can certainly see the more maintainable and sort of understandable the code is because it has to be, you know, at such a scale that you can't have these little hidden problems that people don't understand or don't want to go fix because you have to fix it, right?

00:09:53.620 --> 00:10:01.580
I can see how Python would really help in that space because it's a simpler language.

00:10:01.580 --> 00:10:02.480
It's easy to understand.

00:10:02.480 --> 00:10:03.540
It has these great libraries.

00:10:03.540 --> 00:10:05.600
What role does that play?

00:10:06.980 --> 00:10:12.020
Well, I think this is where we get into potentially issues of sort of personal preferences almost.

00:10:12.020 --> 00:10:14.300
I have some strong opinions about Python.

00:10:14.300 --> 00:10:17.020
It's quite literally my favorite language.

00:10:17.020 --> 00:10:26.280
It's been my favorite language since I started working in Python in, oh gosh, 04 or thereabouts, like 2004.

00:10:26.280 --> 00:10:27.760
So about, you know, 10, 11 years.

00:10:28.720 --> 00:10:37.100
I think there's a whole bunch of other people at Netflix who do great work with other languages, many of them JVM languages, whether it's Java, Clojure, or Scala.

00:10:37.100 --> 00:10:40.760
And, of course, we also do a bunch of work with JavaScript.

00:10:40.760 --> 00:10:48.520
I have been privileged to see some really wonderfully written Python code.

00:10:48.520 --> 00:10:52.840
I've been privileged to see some really nicely written Java code.

00:10:52.840 --> 00:10:56.980
And I think we've all, frankly, seen some pretty terrible code irrespective of the language.

00:10:56.980 --> 00:11:16.600
CodeShip is a hosted, continuous delivery service focused on speed, security, and customizability.

00:11:16.600 --> 00:11:22.420
You can set up continuous integration in a matter of seconds and automatically deploy when your tests have passed.

00:11:22.420 --> 00:11:25.680
CodeShip supports your GitHub and Bitbucket projects.

00:11:25.680 --> 00:11:28.460
You can get started with CodeShip's free plan today.

00:11:28.460 --> 00:11:36.980
Should you decide to go with a premium plan, Talk Python listeners can save 20% off any plan for the next three months by using the code TALKPYTHON.

00:11:36.980 --> 00:11:38.660
All caps, no spaces.

00:11:38.660 --> 00:11:46.020
Check them out at CodeShip.com and tell them thanks for sponsoring the show on Twitter where they're at CodeShip.

00:11:51.600 --> 00:11:53.500
Yeah, you can write bad code anywhere, can't you?

00:11:53.500 --> 00:11:54.960
Yes.

00:11:54.960 --> 00:11:59.520
The only thing that Python really saves you from is bad indentation, I suppose.

00:11:59.520 --> 00:12:00.160
Yeah.

00:12:00.160 --> 00:12:01.100
Yeah.

00:12:01.100 --> 00:12:01.780
It won't run.

00:12:01.780 --> 00:12:04.800
If you have bad indentation, it just won't run.

00:12:04.800 --> 00:12:05.940
Fantastic.

00:12:06.160 --> 00:12:17.900
So when I originally reached out to you, that's because you were a co-author on a really amazing blog post, just very humbly entitled Python at Netflix.

00:12:19.460 --> 00:12:23.640
And I'll put that as a link in the show notes so everyone can go check it out.

00:12:23.640 --> 00:12:32.500
But you kind of went through all the different uses of Python that you guys have throughout this great cloud system that you guys have built.

00:12:32.940 --> 00:12:38.700
You said that you use something called BOTO, B-O-T-O, and that's super central.

00:12:38.700 --> 00:12:42.460
And, of course, that's the AWS Python SDK, right?

00:12:42.460 --> 00:12:45.940
So what parts of BOTO are, like, super important?

00:12:45.940 --> 00:12:50.380
What's a really common thing that you guys do with AWS across developers?

00:12:50.380 --> 00:12:52.080
Oh, boy, howdy.

00:12:52.080 --> 00:12:54.260
Everything, huh?

00:12:54.620 --> 00:13:00.320
So for those of your listeners who don't know, BOTO is a Python interface to the AWS API.

00:13:00.320 --> 00:13:10.680
It was written by a guy named Mitch Garnott, who eventually actually ended up working for AWS for a while.

00:13:10.680 --> 00:13:18.940
And we use BOTO pretty much across the board, both to talk to various services like SQS and S3,

00:13:18.940 --> 00:13:25.520
but also, frankly, to get a bunch of information out of EC2 and almost any other part of AWS.

00:13:25.520 --> 00:13:30.640
It is the way for Python developers to talk to AWS.

00:13:30.640 --> 00:13:33.900
I'm not actually familiar with any other option that you might have.

00:13:33.900 --> 00:13:34.420
Sure.

00:13:34.420 --> 00:13:40.660
How much auto-scaling do you guys do, like, for evenings in the U.S.?

00:13:40.660 --> 00:13:46.060
I'm just trying to get a sense of, like, how many machines are coming online, going offline.

00:13:46.060 --> 00:13:47.420
What's that like?

00:13:48.220 --> 00:13:50.160
Well, I'll give you a perspective.

00:13:50.160 --> 00:13:56.240
I think we've shown some public graphs that show that the traffic we get at trough,

00:13:56.240 --> 00:14:04.680
in other words, the lowest part of our day, which is somewhere between about 1 a.m. and 5 a.m.,

00:14:04.680 --> 00:14:10.860
is either somewhere between a third and a half of the traffic we get at peak times in the day.

00:14:11.500 --> 00:14:19.520
So that means that if you've got application servers running in clusters that are, let's say, 1,000 servers at trough,

00:14:19.520 --> 00:14:22.580
they could be up to 2,000 or 3,000 servers at peak.

00:14:23.640 --> 00:14:25.920
Not all of our systems auto-scale, of course.

00:14:25.920 --> 00:14:28.640
It doesn't always make sense, depending on the kind of traffic load you've got.

00:14:28.640 --> 00:14:34.420
But we bring up thousands of servers every day to deal with traffic.

00:14:35.040 --> 00:14:48.000
And then when traffic goes away, those servers go away as well, which is why the typical sort of half-life of an AWS instance for us is measured in the two- to three-day range.

00:14:48.820 --> 00:14:49.300
That's amazing.

00:14:49.300 --> 00:14:58.500
So after two or three days, it's likely that it was the one selected when you sort of downgraded your size for that trough.

00:14:58.500 --> 00:14:59.380
Yeah.

00:14:59.380 --> 00:15:03.700
Now, there are, of course, a bunch of systems like our Cassandra systems that are more stateful.

00:15:03.700 --> 00:15:10.480
And that means that they don't auto-scale and they have a much easier time if we don't randomly sort of recycle their instances.

00:15:10.860 --> 00:15:17.460
But our front-end systems, the systems that deal with direct customer traffic, are stateless.

00:15:17.460 --> 00:15:22.540
And there's a whole bunch of them that come up all the time and a whole bunch of them that go away all the time.

00:15:22.540 --> 00:15:23.720
Yeah.

00:15:23.720 --> 00:15:24.420
That makes sense.

00:15:24.420 --> 00:15:26.460
Can you talk a little bit about the architecture?

00:15:26.460 --> 00:15:28.440
Is this something you know about?

00:15:28.440 --> 00:15:31.240
Are you using lots of microservices?

00:15:31.240 --> 00:15:33.060
Are you using containers?

00:15:33.060 --> 00:15:34.840
Can you speak to any of that?

00:15:34.840 --> 00:15:35.720
I can.

00:15:35.720 --> 00:15:36.440
I can.

00:15:36.440 --> 00:15:40.740
So we have not yet started looking.

00:15:40.740 --> 00:15:44.360
Well, we have not yet started deploying containers across our environment.

00:15:44.360 --> 00:15:50.280
We use a baked AMI approach to deal with microservice deployments.

00:15:50.280 --> 00:15:58.700
We are a classic microservice, service-oriented architecture environment without a centralized service bus.

00:15:58.700 --> 00:16:03.260
Last I looked, and unfortunately, I'm not VPN right now, so I can't confirm the number.

00:16:03.260 --> 00:16:08.420
We had more than about 1,200 or so services in our production environment.

00:16:08.420 --> 00:16:08.840
Wow.

00:16:08.840 --> 00:16:14.120
1,200 distinct services, not instances of the servers running those services, right?

00:16:14.120 --> 00:16:15.540
Exactly, yes.

00:16:15.540 --> 00:16:19.840
So obviously, some of those services might have thousands of instances running.

00:16:19.840 --> 00:16:23.740
Some of those services may only have two or three instances running.

00:16:24.080 --> 00:16:35.720
How do you guys manage, like, hey, there's this functionality that exists, so as this other service, don't go write your own, and just sort of keep people knowledgeable in discovering these things at that scale?

00:16:35.720 --> 00:16:37.540
Yeah, so that's an interesting question.

00:16:37.540 --> 00:16:39.080
It comes down to a company culture.

00:16:39.640 --> 00:16:56.260
We try to be as agile with a lowercase a as possible and decentralized as possible, which means we don't want to sort of shunt people through some sort of centralized approval or, you know, information distribution system.

00:16:56.620 --> 00:17:03.320
And that means that, in fact, it is a little harder to make sure that if you need to get something done, that you'll know if anybody else has done it.

00:17:03.320 --> 00:17:07.100
We count on a lot of informal communication between teams.

00:17:07.100 --> 00:17:11.080
We count on the fact that we're all geographically co-located.

00:17:11.080 --> 00:17:20.820
So every engineer at Netflix working on our cloud ecosystem is either working in the building I work in or the building to my left or the building to my right.

00:17:20.820 --> 00:17:21.400
Right.

00:17:21.400 --> 00:17:22.920
Is that Los Gatos, California?

00:17:22.920 --> 00:17:23.760
Yeah, yeah.

00:17:23.760 --> 00:17:38.920
And then we basically try to make it so if you know that you need something, ideally and hopefully before you start building it, you might at least know who else to ask who might know whether or not somebody else has already built it.

00:17:39.520 --> 00:17:41.800
And sometimes we will just have duplication.

00:17:41.800 --> 00:17:52.040
And, you know, we tend to hire people who are reasonable enough about this kind of stuff that they're not going to become overly invested in their own solution rather than the right solution.

00:17:52.040 --> 00:18:01.400
So when we find duplication, then the people who own the duplicating code or function can sit together and figure out, well, what do we want to do with this now?

00:18:01.400 --> 00:18:08.060
Right. Try to narrow it down to just one, maybe bring the features everybody needed into that one service, right?

00:18:08.580 --> 00:18:11.880
Potentially, or have a better understanding of why you need two.

00:18:11.880 --> 00:18:26.120
So I think, because I've been in a bunch of these conversations, when that happens, really the goal is to either understand why you should have two, and that will help you clarify what these two things do differently from each other.

00:18:26.120 --> 00:18:29.960
Or decide, no, that doesn't really make sense, so we'll just have one.

00:18:30.200 --> 00:18:37.140
That makes a lot of sense, and it seems like a wonderful place to work if you can just go out and have a lot of freedom and it's not very top-down.

00:18:37.140 --> 00:18:37.640
That's great.

00:18:37.640 --> 00:18:53.720
Yeah, and actually, I mean, that ends up being really relevant to this whole conversation about Python, because when I started using Python in the engineering side of the house at Netflix, at the time there wasn't really a lot of appetite for Python in engineering.

00:18:53.940 --> 00:18:59.360
I think it felt like I was the first one proposing to build production services with Python.

00:19:00.360 --> 00:19:02.880
And my boss, frankly, really didn't like this.

00:19:02.880 --> 00:19:11.080
I think my boss would have much preferred that I spend the two or three months to learn Java, because we had basically everything else writing in Java.

00:19:11.280 --> 00:19:18.880
And we had a whole bunch of infrastructure libraries making it really easy for Java developers to run in the Netflix cloud ecosystem.

00:19:18.880 --> 00:19:25.160
And, you know, every week or two, I'd be sitting down with my boss, giving him an update on how my project was going.

00:19:25.160 --> 00:19:31.680
And maybe about every other one of those conversations, he'd say, so you really think Python's the right way to do this?

00:19:31.680 --> 00:19:33.400
And I'd say, yes, yes, yes.

00:19:33.580 --> 00:19:49.260
And, you know, because of the way we tend to think about where the engineering decisions need to be made at Netflix, namely in engineers, he let me sort of run with it and gave me all the rope I needed to, in this case, validate that that was a good idea.

00:19:49.260 --> 00:19:55.660
It's really cool when you can bring a new idea and actually show, hey, this is not a bad idea and see how it works.

00:19:55.660 --> 00:20:03.900
And I think one of the best ways to prove that is not to have a meeting, but to just build something that works and say, look what I did.

00:20:03.900 --> 00:20:06.280
Look how great this is and how easy this is.

00:20:06.280 --> 00:20:07.600
And we can do more of this.

00:20:07.600 --> 00:20:14.760
And I think, you know, in programming, a lot of times the best way to show something works is to just do it and look back on it, you know?

00:20:14.760 --> 00:20:18.040
Yeah, the best way to show something works is to show something works.

00:20:18.040 --> 00:20:19.620
Yeah, show something working, right?

00:20:19.620 --> 00:20:20.360
Exactly.

00:20:20.360 --> 00:20:25.600
One of the things that seems like you guys are really into is open source at Netflix.

00:20:25.600 --> 00:20:27.140
You've got a lot of cool stuff you're doing.

00:20:27.140 --> 00:20:28.960
You seem to be open sourcing these libraries.

00:20:28.960 --> 00:20:31.920
Can you talk about some of the more popular ones?

00:20:31.920 --> 00:20:32.900
Sure.

00:20:32.900 --> 00:20:41.140
I think we've gotten a lot of interest out of the RxJava work that we're actually doing, which, of course, is not so much Python.

00:20:41.140 --> 00:20:49.360
But our data science side, which is a big fan of Python, has open sourced a bunch of work using Python.

00:20:50.360 --> 00:21:06.300
One thing that we haven't yet open source that we've talked about and we'd like to open source as soon as possible, actually, is something that my team has been doing over the last year or so, which is a RESTful service to do anomaly and outlier detection.

00:21:06.300 --> 00:21:17.640
And that RESTful service uses a whole bunch of scikit-learn and Panda algorithms to help us drive automated operational decisions.

00:21:18.060 --> 00:21:23.160
My real-time analytics engineers are big fans of Python in that space.

00:21:23.160 --> 00:21:25.380
One of them is, in fact, speaking about it right now.

00:21:25.380 --> 00:21:26.460
Wow.

00:21:26.460 --> 00:21:26.900
Where's that?

00:21:26.900 --> 00:21:27.880
Kukon, New York.

00:21:27.880 --> 00:21:28.500
Okay.

00:21:28.500 --> 00:21:29.140
Fantastic.

00:21:29.140 --> 00:21:29.880
Yeah.

00:21:29.880 --> 00:21:33.440
We've got another tutorial coming up in PyData in Seattle.

00:21:33.440 --> 00:21:40.940
So we'd love to actually share all of that code with the community as soon as we will have some time to breathe and get that done.

00:21:40.940 --> 00:21:41.940
Wow.

00:21:41.940 --> 00:21:42.540
Amazing.

00:21:42.540 --> 00:21:49.420
So you guys are using scikit-learn and machine learning to monitor some of these cloud instances and services.

00:21:49.420 --> 00:21:52.060
Yeah, but not just cloud instances and services, right?

00:21:52.060 --> 00:21:58.280
Cloud services and instances, to some degree, are the smallest domain of data that we have.

00:21:58.280 --> 00:22:01.540
It's, to some degree, the most public and visible one.

00:22:01.540 --> 00:22:05.100
But if you think about it, we have millions of pieces of content, right?

00:22:05.100 --> 00:22:07.220
You know, millions of TV shows and movies.

00:22:07.220 --> 00:22:13.640
And each of them is encoded into a whole bunch of different formats and a bunch of different bit rates.

00:22:13.640 --> 00:22:21.700
We can't set some sort of artificial static thresholds for what it looks like for any one of them to be successful.

00:22:21.700 --> 00:22:34.040
So you have to really learn in production what the expected sort of viewing rate for any one of these pieces of content, if you want to be able to notice when one of them is sort of going wrong.

00:22:34.040 --> 00:22:35.400
Same thing about devices.

00:22:35.400 --> 00:22:41.380
You know, there are millions of devices spread across thousands of device families, thousands of device models.

00:22:41.720 --> 00:22:46.120
So we can't monitor any one of them sort of manually.

00:22:46.120 --> 00:22:54.140
We have to sort of deduce what the right behavior is in real time so we can notice when one of them starts going wrong.

00:22:54.140 --> 00:22:55.420
That's really cool.

00:22:55.420 --> 00:23:06.680
Just the scale is so big that trying to individually test them all, you probably, by the time you got through the whole list, you'd have to start back at the beginning because they all have new versions and new settings and so on, right?

00:23:06.680 --> 00:23:09.480
So just build a system that watches it, huh?

00:23:09.480 --> 00:23:10.660
Yeah, exactly.

00:23:10.880 --> 00:23:15.200
And can deduce correctness from, you know, the historical patterns.

00:23:15.200 --> 00:23:21.480
I wonder how many organizations are actually applying machine learning to the monitoring of their software.

00:23:21.480 --> 00:23:22.960
And this thing you're going to open source?

00:23:22.960 --> 00:23:24.140
Yeah, we'd like to.

00:23:24.140 --> 00:23:25.760
Will it have a name?

00:23:25.760 --> 00:23:28.100
Well, yes.

00:23:28.100 --> 00:23:29.020
Everything has a name.

00:23:29.020 --> 00:23:29.380
Yeah.

00:23:29.380 --> 00:23:33.380
Sorry, do you know the name that you're planning to give it so people would know and to look for it?

00:23:40.040 --> 00:23:46.320
This episode is brought to you by Hired.

00:23:46.320 --> 00:23:52.800
Hired is a two-sided, curated marketplace that connects the world's knowledge workers to the best opportunities.

00:23:52.800 --> 00:24:01.960
Each offer you receive has salary and equity presented right up front, and you can view the offers to accept or reject them before you even talk to the company.

00:24:02.520 --> 00:24:08.320
Typically, candidates receive five or more offers in just the first week, and there are no obligations ever.

00:24:08.320 --> 00:24:10.420
Sounds pretty awesome, doesn't it?

00:24:10.420 --> 00:24:12.460
Well, did I mention there's a signing bonus?

00:24:13.100 --> 00:24:16.560
Everyone who accepts a job from Hired gets a $2,000 signing bonus.

00:24:16.560 --> 00:24:20.900
And as Talk Python listeners, it gets way sweeter.

00:24:20.900 --> 00:24:28.460
Use the link Hired.com slash Talk Python To Me, and Hired will double the signing bonus to $4,000.

00:24:28.460 --> 00:24:30.180
Opportunities knocking.

00:24:30.180 --> 00:24:33.780
Visit Hired.com slash Talk Python To Me and answer the call.

00:24:33.780 --> 00:24:51.980
You know, there's a time-honored tradition at Netflix that if you're a developer working on a product,

00:24:52.060 --> 00:24:55.740
you get to name that product when we open source it.

00:24:55.740 --> 00:25:03.760
And I haven't actually asked the developers whether or not they've picked a name for the open source product.

00:25:03.760 --> 00:25:09.980
We have an internal name for it, which is Kepler, but I'm not sure that it'll end up being the public name for it.

00:25:09.980 --> 00:25:10.440
Okay.

00:25:10.440 --> 00:25:11.220
Wow.

00:25:11.220 --> 00:25:11.660
Excellent.

00:25:11.660 --> 00:25:15.080
So you have some other things that are kind of related.

00:25:15.800 --> 00:25:23.360
One of the things I read about when you wrote your blog was that you have a large number of alerts that get sent for various reasons.

00:25:23.360 --> 00:25:28.380
And you have this whole central alert gateway thing that's written in Python.

00:25:28.380 --> 00:25:32.400
Well, yes and no.

00:25:32.400 --> 00:25:39.500
So this is actually, this is perhaps maybe the bad news from a Python perspective.

00:25:39.940 --> 00:25:46.180
When I came over to engineering in 2011, I wrote a bunch of really useful stuff.

00:25:46.180 --> 00:25:48.700
One of them was the central alert gateway.

00:25:48.700 --> 00:25:52.000
Another thing was Holler Monkey and Security Monkey.

00:25:52.000 --> 00:26:00.540
The interesting thing that's happened over time is back in 2013, I became a manager, which means I pretty much get paid not to code.

00:26:00.540 --> 00:26:01.820
Exactly.

00:26:02.940 --> 00:26:09.080
And so some of the stuff that I wrote that we haven't publicly talked about ended up not being kind of a bust.

00:26:09.080 --> 00:26:18.500
You know, one of the things that we try to do is we take a bunch of bets, we try to minimize the cost of the bets, and some of them will go great, some of them will not go great, and we'll just kill them quickly.

00:26:18.500 --> 00:26:22.000
Yeah, but the key to be successful is experimenting, right?

00:26:22.000 --> 00:26:22.920
Yeah, exactly.

00:26:22.920 --> 00:26:25.480
So the central alert gateway was highly successful.

00:26:25.480 --> 00:26:28.700
Incredibly useful.

00:26:28.700 --> 00:26:34.300
It is at the core of knowing that something's gone wrong in our environment, and we have a long-term commitment to it.

00:26:34.300 --> 00:26:42.100
However, it turned out that after doing maybe about two years of sort of organic iterative development on it, it really needed a refresh.

00:26:42.100 --> 00:26:48.140
And it also needed ownership by software developers who were being paid to be software developers.

00:26:48.140 --> 00:26:56.020
And so it ended up moving over to my team formally, and the developer who's responsible for it ended up reimplementing it in Scala.

00:26:56.020 --> 00:26:56.960
Okay.

00:26:57.840 --> 00:27:01.540
So the CAG these days is no longer Python-based.

00:27:01.540 --> 00:27:08.520
I think I still, in my spare time, still maintain a client in Python, so you can talk to the CAG directly.

00:27:08.520 --> 00:27:14.580
But the same thing, frankly, happened with SecurityMonkey and HowlerMonkey as they moved into other groups.

00:27:14.580 --> 00:27:19.540
Those other groups made their own decisions as to how to keep them organized.

00:27:20.800 --> 00:27:33.640
I think maybe to some degree you could argue that this is a nice example of how, personally, I was able to use Python to very rapidly iterate over what needed to be done.

00:27:33.640 --> 00:27:40.040
And then once it reached a stable point, then, I mean, frankly, I don't know that the language mattered all that much.

00:27:40.360 --> 00:27:44.980
And the developer who preferred to use Scala ended up re-implementing it in Scala.

00:27:46.060 --> 00:27:46.200
Sure.

00:27:46.200 --> 00:27:50.600
And that's part of that developer freedom that you guys talked about, which we can come back to again.

00:27:50.600 --> 00:27:57.940
I think it's easy to, well, it could be easy to look at this and go, oh, well, they tried it in Python and it failed.

00:27:57.940 --> 00:28:00.600
But I think that's exactly the wrong message to take from it.

00:28:00.660 --> 00:28:05.660
Like you were saying, it's almost the success of Python is this thing came into existence.

00:28:05.660 --> 00:28:07.560
It was written well and quickly.

00:28:07.560 --> 00:28:10.000
And then it's evolved since then.

00:28:10.000 --> 00:28:14.120
But, you know, the reason it's here is because it was easy to do this in Python to get started.

00:28:14.120 --> 00:28:14.840
Yeah.

00:28:14.840 --> 00:28:23.020
And again, it wasn't like the company made a decision that it wasn't going to be in Python, frankly, because the company doesn't make those sort of decisions.

00:28:23.260 --> 00:28:31.540
The company made a decision that it was really worth investing in and having as a prime sort of first class member of our ecosystem.

00:28:31.540 --> 00:28:42.480
And then the company knows that developers make the best sort of the best decisions when it comes to this sort of like engineering and implementation kind of decision.

00:28:42.480 --> 00:28:48.560
And so we didn't really have an investment in having it be in any in any given language.

00:28:48.820 --> 00:28:53.900
And the developer who ended up doing it decided to do it in the language that she was most comfortable with.

00:28:53.900 --> 00:28:54.740
Right.

00:28:54.740 --> 00:28:55.840
And that makes sense as well.

00:28:55.840 --> 00:29:01.840
You don't want to force somebody to write a language they're not familiar with and you're not going to end up with this good of a product.

00:29:01.840 --> 00:29:16.980
So one of the things I think Netflix is really known for, besides the 35% bandwidth story and, you know, huge AWS usage and things like that, is data driven sort of decisions and that type of stuff.

00:29:17.200 --> 00:29:21.340
Yes, especially and I would say mostly for our public product.

00:29:21.340 --> 00:29:28.860
So can you talk a little bit about how you guys are using data science there, maybe some of the tools like IPython or things like that if you're using them?

00:29:28.860 --> 00:29:29.440
Sure.

00:29:29.440 --> 00:29:31.140
We're big fans of IPython.

00:29:31.140 --> 00:29:36.480
And boy, howdy, can I tell you, I think it was two years ago that I did PyCon.

00:29:36.480 --> 00:29:41.760
Yeah, I think it was PyCon 2013 when I discovered the IPython notebook.

00:29:41.880 --> 00:29:46.580
But I feel like my life's never been the same since then because that thing is just glorious.

00:29:46.580 --> 00:29:48.160
Yeah, it really is amazing.

00:29:48.160 --> 00:29:48.820
Yeah.

00:29:48.820 --> 00:29:59.600
And in fact, we use an IPython notebook now as the format for our take-home tech assignment for candidates for the real-time analytics group under me.

00:30:00.620 --> 00:30:02.400
But that's neither here nor there.

00:30:02.400 --> 00:30:10.720
So largely, when you look at data science driving product decisions, we're big fans of A-B tests.

00:30:10.720 --> 00:30:15.760
And should I define A-B tests or is that relative?

00:30:15.760 --> 00:30:16.460
Yeah, sure.

00:30:16.460 --> 00:30:16.820
Go ahead.

00:30:16.820 --> 00:30:20.520
Not everyone's sort of front-end customer-facing folks, maybe.

00:30:20.820 --> 00:30:28.080
Yeah, so basically, if you think about it, you know, you've got a bunch of customers who use your product and you're thinking about whether or not a given feature might be useful.

00:30:28.080 --> 00:30:31.740
And first of all, you've got to define what useful means.

00:30:31.740 --> 00:30:33.400
What is it that you're trying to actually change?

00:30:33.400 --> 00:30:40.140
You need to have a good enough understanding of your product that you can basically tie everything into some sort of key performance indicator, KPI.

00:30:40.140 --> 00:30:56.700
And then you actually implement the feature and you subject part of your customer population to a test where some people see the original behavior, some people see the new behavior, and you see whether or not there's a difference in the KPI between those two groups.

00:30:56.700 --> 00:31:11.440
Now, I'm massively simplifying this because in our environment, for example, any given A-B test might have upwards of a dozen or so different potential functions or, sorry, different test cells.

00:31:11.440 --> 00:31:14.800
And, of course, we don't just run one A-B test.

00:31:14.940 --> 00:31:27.400
I could be subject to, I think the last time I looked as a Netflix customer, I was randomly allocated to something like either 12 or 15 or so different A-B tests.

00:31:27.400 --> 00:31:28.880
So, that's really cool.

00:31:28.880 --> 00:31:29.820
How might those show up?

00:31:29.820 --> 00:31:36.400
Would that be like what's in the recommendations or maybe other parts of the UI?

00:31:36.400 --> 00:31:38.520
Yeah, it can be a whole bunch of different things.

00:31:38.520 --> 00:31:41.980
So, you know, it can come down to, for example, what image do we show you for a given movie?

00:31:42.920 --> 00:31:50.460
So, for example, if you look at Orange is the New Black, there's a little, you know, picture that we show you for the Orange is the New Black movie.

00:31:50.460 --> 00:31:57.840
Well, does one picture actually get people to want to watch that more than another picture?

00:31:57.840 --> 00:32:10.260
One easy way to look at it is to, you know, basically divide your customers into a bunch of different groups and show each of them a different picture and then actually see if one of those pictures ended up resulting in more click-through rates, right?

00:32:10.600 --> 00:32:13.060
So, that's a relatively trivial, small difference.

00:32:13.060 --> 00:32:17.620
You can look at bigger things, like, for example, at what order do we show you recommendations?

00:32:17.620 --> 00:32:20.380
What language we may use?

00:32:20.380 --> 00:32:23.360
And in some cases, complete overhauls of the UI.

00:32:23.360 --> 00:32:36.200
So, I saw an article recently that suggested that sometime in June, we're going to completely overhaul the computer-based UI to make it sort of much sort of niftier and, you know, prettier.

00:32:36.200 --> 00:32:45.540
And that's a complete overhaul that obviously would have been tested on a small group first to see if it actually causes people to engage with us more or less.

00:32:46.040 --> 00:32:46.340
Right.

00:32:46.340 --> 00:32:49.440
And you only choose the ones that make them engage with you more, of course.

00:32:50.440 --> 00:32:57.740
Well, ideally, or at least, you know, assuming that that's the KPI that we wanted to actually affect, right?

00:32:57.740 --> 00:33:02.240
So, again, this all comes down to what am I actually trying to accomplish with this particular feature?

00:33:02.240 --> 00:33:02.860
Sure.

00:33:03.280 --> 00:33:10.660
I saw, I think it was an article in Wired, and I'll put the link in the show notes, that some of the guys, it was from a Hadoop conference.

00:33:10.660 --> 00:33:24.300
They were looking at the different things you can change in A-B test, and they were actually looking at the color spectrum of the image and comparing those across other movies that may be more popular or less popular.

00:33:24.300 --> 00:33:27.600
And it sounds like there's a lot of dimensions that you guys look at.

00:33:27.600 --> 00:33:28.680
Oh, my gosh, yes.

00:33:28.680 --> 00:33:39.440
But the beautiful thing is, if you've already built essentially the infrastructure to do A-B tests relatively cheaply, then that means that you open the door to doing a lot more experimentation.

00:33:39.440 --> 00:33:45.340
And you don't need to necessarily have a conjecture that you're going to significantly move the needle.

00:33:45.820 --> 00:33:49.260
So, it's all about cost-benefit analysis, right?

00:33:49.260 --> 00:34:01.240
And if you think about it, if it costs you a lot to try a test, then, boy howdy, you've got to conjecture that that test is really going to change some KPI significantly.

00:34:01.760 --> 00:34:13.500
But if implementing A-B tests is relatively inexpensive and can be thought of as almost free, then you can be a lot more experimental than you would be otherwise.

00:34:13.500 --> 00:34:24.380
Which is why, by the way, for example, the group responsible for building our A-B test infrastructure is not called the A-B test group.

00:34:24.380 --> 00:34:26.500
They're called the experimentation platform group.

00:34:26.780 --> 00:34:30.820
Because this is really how you enable cheap and easy experimentation.

00:34:30.820 --> 00:34:38.080
Yeah, and you have so many users that you get very easily statistically significant data, right?

00:34:38.080 --> 00:34:38.740
Yeah.

00:34:38.740 --> 00:34:40.560
That does make it easier.

00:34:40.560 --> 00:34:41.700
Very, very cool.

00:34:41.700 --> 00:34:48.560
One of the things that I heard that really intrigued me about the architecture and things you guys do is this thing called the Chaos Monkey.

00:34:48.560 --> 00:34:51.080
And it's been around for a while, but can you talk about that?

00:34:51.080 --> 00:34:51.960
Sure.

00:34:51.960 --> 00:34:55.580
Chaos Monkey is a relatively proven concept.

00:34:55.580 --> 00:35:00.820
We started doing this as we went into the cloud maybe about four years ago or thereabouts.

00:35:00.820 --> 00:35:07.680
And the idea is that given that servers will die, you know, this is a fact.

00:35:07.680 --> 00:35:11.660
This is true in every environment I've ever seen, whether you're in the cloud or not.

00:35:11.660 --> 00:35:13.200
Your servers will die.

00:35:13.200 --> 00:35:19.680
And trying to avoid it or deny it does not lead to, you know, happiness or more robust systems.

00:35:19.680 --> 00:35:23.840
So let's try to actually make sure that our systems are resilient to server death.

00:35:24.300 --> 00:35:33.600
And so we built this small component that we ended up calling Chaos Monkey that goes around every day and kills one of your servers for every application group that we have.

00:35:33.600 --> 00:35:35.820
So we talked about those 1,200.

00:35:35.820 --> 00:35:37.060
And this is in production, right?

00:35:37.060 --> 00:35:37.460
Oh, yeah.

00:35:37.460 --> 00:35:42.740
That's the only, that's, I would argue, the most useful way to have Chaos Monkey run.

00:35:42.740 --> 00:35:43.620
Amazing.

00:35:43.820 --> 00:35:43.960
Okay.

00:35:43.960 --> 00:35:43.980
Okay.

00:35:43.980 --> 00:35:44.420
Keep going.

00:35:44.420 --> 00:35:44.640
Sorry.

00:35:44.640 --> 00:35:45.320
Yeah.

00:35:45.320 --> 00:35:58.600
So basically, you know, if you think about those 1,200 applications running in production, we kill at least one server out of each of these applications because they're running on multiple servers every day to make sure that we don't have a problem when that happens.

00:35:59.100 --> 00:36:07.620
So when people start building their service, they have to, from the very beginning, plan for the fact that these machines are going to die, which is reality, right?

00:36:07.860 --> 00:36:11.480
But it's really neat that you've put this system together to test it.

00:36:11.480 --> 00:36:14.440
And that's pretty leading edge, I think.

00:36:14.440 --> 00:36:19.260
But what I think really takes it to the next level is you leave it running in production.

00:36:19.260 --> 00:36:20.220
That's amazing.

00:36:20.680 --> 00:36:20.840
Yeah.

00:36:20.840 --> 00:36:28.100
And, you know, the interesting thing is it feels leading edge when you're outside of this environment and it feels leading edge when you start doing it.

00:36:28.100 --> 00:36:36.060
But, you know, off the top of my head, I don't think Chaos Monkey has actually exposed a problem for us in the last, I want to say, three years.

00:36:36.340 --> 00:36:37.500
And that's perfect, right?

00:36:37.500 --> 00:36:39.460
Because that's exactly what it's there for.

00:36:39.460 --> 00:36:53.120
And it's a verification that despite the fact that we kill thousands of instances every day as part of Chaos Monkey, we've gotten to the point where it's pretty much normal for us that we can lose a server without any noticeable impact.

00:36:53.120 --> 00:36:53.540
Yeah.

00:36:53.540 --> 00:36:54.740
That's excellent.

00:36:54.740 --> 00:36:57.460
I mean, you really need to make sure the service doesn't go down.

00:36:57.460 --> 00:37:02.720
And I can't remember the last time that Netflix wasn't available and it was your fault.

00:37:02.720 --> 00:37:03.780
You may remember.

00:37:03.780 --> 00:37:05.180
Yes.

00:37:05.180 --> 00:37:18.760
So one of the fun parts about being involved in every major incident postmortem at Netflix is that I do, in fact, get to be aware of every glitch in the system and every significant outage.

00:37:18.760 --> 00:37:24.440
It's worth noting that, thankfully for us, the definition of significant outage is probably bigger than for our customers.

00:37:24.440 --> 00:37:26.840
Sorry, it's actually smaller than for our customers.

00:37:26.840 --> 00:37:34.960
We tend to think of problems being significant below the level at which they would likely be noticeable to most of our customers.

00:37:34.960 --> 00:37:35.520
Right.

00:37:35.520 --> 00:37:35.960
Exactly.

00:37:35.960 --> 00:37:40.440
Maybe these machines are using too much CPU or the latency is too high or something like that.

00:37:40.440 --> 00:37:41.240
Is that a possibility?

00:37:41.240 --> 00:37:47.400
Not so much because we tend to think about production impact purely based on whether or not customers are impacted.

00:37:47.940 --> 00:37:54.240
The threshold for us, for example, for major production incidents is whether or not 10% or more of our customers are impacted.

00:37:54.240 --> 00:37:56.540
That's a really big deal for us.

00:37:56.540 --> 00:38:00.060
It happens not that often, but it still happens every once in a while.

00:38:00.520 --> 00:38:05.680
But it does mean that, for example, if 10% of our customers are impacted, the good news is that 90% of them aren't.

00:38:05.680 --> 00:38:06.580
Yeah, sure.

00:38:06.580 --> 00:38:08.640
It's just 10% is really high.

00:38:08.640 --> 00:38:09.180
Yeah.

00:38:09.180 --> 00:38:12.100
And it's been a really long time.

00:38:12.100 --> 00:38:17.360
And in fact, I can't exactly remember off the top of my head when we've seen 100% service impact.

00:38:18.080 --> 00:38:23.560
When that graph of actual current usage of Netflix goes to zero.

00:38:23.560 --> 00:38:29.660
So I can see how you build your systems and your services so they can take this.

00:38:29.660 --> 00:38:36.620
But you're built on multiple data centers spanning AWS cloud availability zones and all that kind of stuff.

00:38:36.620 --> 00:38:40.860
So you also need to be able to deal with if AWS goes down.

00:38:42.140 --> 00:38:44.560
Yes, in theory, we need to be able to do that.

00:38:44.560 --> 00:38:48.240
And I think we've built a pretty good environment because of that.

00:38:48.240 --> 00:38:55.560
So, for example, in the US, we run out of two major regions in AWS, US West 2 and US East 1.

00:38:55.560 --> 00:38:59.980
And we can fail over between those two regions so we can evacuate a region.

00:38:59.980 --> 00:39:07.020
And we do that, I think, basically right now, at least once a month or thereabouts to validate that all that mechanism still works.

00:39:07.360 --> 00:39:16.540
The good news is that, frankly, AWS, to the best of my recollection, hasn't had a significant regional outage in a reasonably long time.

00:39:16.540 --> 00:39:19.480
Now, you know, watch them have one right now because of that.

00:39:19.480 --> 00:39:20.720
Watch what you say.

00:39:20.720 --> 00:39:21.380
No, of course.

00:39:21.380 --> 00:39:22.080
I agree.

00:39:22.080 --> 00:39:23.880
They are absolutely rock solid.

00:39:23.880 --> 00:39:29.580
And, you know, I think they're the best place in the world to be, including your own data center, right?

00:39:29.580 --> 00:39:32.000
Because those things go down, too.

00:39:32.000 --> 00:39:32.940
And then that's your problem.

00:39:32.940 --> 00:39:34.580
Yeah, I've been there before.

00:39:34.580 --> 00:39:36.160
I've spent most of my life in data centers.

00:39:36.160 --> 00:39:45.380
But, you know, going back to Chaos Monkey for a second, there's a point that's worth making, which is we didn't so much build Chaos Monkey because AWS wasn't reliable enough.

00:39:45.380 --> 00:39:49.000
We built Chaos Monkey because AWS was too reliable.

00:39:49.000 --> 00:40:02.540
What I mean by that is if AWS was causing us to lose machines, for example, on a daily basis, then they would have already given us the requirement that, you know, we needed to be resilient to that.

00:40:02.760 --> 00:40:10.840
Everybody running in our environment would have known that they need to build that way because they would have lost machines just by the natural sort of unreliability of AWS.

00:40:10.840 --> 00:40:21.080
But AWS's reliability, even down to the machine level, is actually high enough that we needed to simulate machine failures because we wanted it to happen at the rate we wanted it to happen.

00:40:21.080 --> 00:40:21.800
Right.

00:40:21.940 --> 00:40:23.160
It almost never happens.

00:40:23.160 --> 00:40:24.820
So how do you prepare for it?

00:40:24.820 --> 00:40:25.340
Right.

00:40:25.340 --> 00:40:25.820
Exactly.

00:40:25.820 --> 00:40:26.640
It's amazing.

00:40:26.640 --> 00:40:30.640
So you guys built a tool that's related to Chaos Monkey called Chaos Gorilla.

00:40:32.240 --> 00:40:33.060
Yes, exactly.

00:40:33.060 --> 00:40:36.520
We've sort of taken the Simian Army motif and we've run with it.

00:40:36.520 --> 00:40:43.660
So we actually have Chaos Monkey, Chaos Gorilla, and Chaos Kong.

00:40:43.660 --> 00:40:50.200
Believe it or not, Chaos Monkey is about simulating a single machine failure, as I mentioned.

00:40:50.200 --> 00:40:56.080
Chaos Gorilla was something we built to allow us to evacuate availability zones within a region.

00:40:56.620 --> 00:41:01.360
So should we briefly talk about regions versus availability zones within AWS?

00:41:01.360 --> 00:41:02.420
Yeah, absolutely.

00:41:02.420 --> 00:41:02.780
Sure.

00:41:02.780 --> 00:41:10.940
So an Amazon region is a geographical location that actually can contain multiple availability zones.

00:41:10.940 --> 00:41:15.200
An availability zone can be thought of as, let's say, for example, a data center.

00:41:15.200 --> 00:41:19.160
And a region might contain several data centers that are pretty close to each other.

00:41:19.160 --> 00:41:27.060
And so we wanted to be able to tolerate a single machine failure or a single availability zone failure within a region.

00:41:27.060 --> 00:41:30.260
And then we built Chaos Kong to be able to tolerate the loss of a region.

00:41:31.440 --> 00:41:41.340
Lately, I think we found that we've gotten good enough at evacuating regions that if a single AZ within a given region is going to fail,

00:41:41.340 --> 00:41:48.040
we would probably prioritize just leaving that region temporarily rather than trying to rebalance within that region.

00:41:48.040 --> 00:41:57.940
So we practice regional evacuation and regional rebalancing pretty regularly, at least once a month with no adverse effects.

00:41:57.940 --> 00:42:04.260
And every time we don't so much look at whether or not we've impacted our customers anymore because we really don't,

00:42:04.260 --> 00:42:09.760
but rather how quickly were we able to affect an impact-free evacuation.

00:42:09.760 --> 00:42:11.820
That's really amazing that you guys built that.

00:42:11.820 --> 00:42:12.260
That's great.

00:42:12.260 --> 00:42:16.420
So keeping on the monkey theme, you guys also have Security Monkey and Howler Monkey.

00:42:16.420 --> 00:42:17.400
Yeah.

00:42:17.400 --> 00:42:20.000
Because everybody loves monkeys.

00:42:20.000 --> 00:42:20.780
Yes.

00:42:21.220 --> 00:42:25.720
So Security Monkey and Howler Monkey were both written by me.

00:42:25.720 --> 00:42:32.500
Actually, I would say Howler Monkey was the first project I wrote when I moved over to engineering from IT at Netflix.

00:42:33.080 --> 00:42:42.300
And at the time, we were trying to solve a problem where basically, you know, we have dozens of SSL certificates spread around different parts of our environment.

00:42:42.300 --> 00:42:48.980
And when those certificates expire, as they are wont to do, you end up with a production event.

00:42:49.560 --> 00:42:55.800
And so we built a system to automatically discover certificates and alert us when they're getting close to expiration.

00:42:55.800 --> 00:42:58.980
That ended up being at the heart of Security Monkey.

00:42:58.980 --> 00:43:08.220
And separately from that, what we were finding at the time was that we were growing at fast enough rates that we kept running into the limits imposed on us by Amazon.

00:43:08.560 --> 00:43:11.100
Amazon, as a cloud environment, is infinitely scalable.

00:43:11.100 --> 00:43:13.200
But they need to protect themselves.

00:43:13.200 --> 00:43:16.700
So there are essentially logical limits to the resources you use.

00:43:16.700 --> 00:43:23.040
For example, the number of autoscaling groups that you might be able to provision or the number of instances you might be able to provision.

00:43:23.040 --> 00:43:28.640
At the time, we were increasing our footprint fast enough that we kept running into those limits.

00:43:28.640 --> 00:43:31.680
And then we couldn't get any more until we asked them to increase them.

00:43:32.440 --> 00:43:36.320
And traditionally, of course, that would happen on Friday at about 5 o'clock in the afternoon.

00:43:36.320 --> 00:43:38.680
And that would spoil somebody's Friday evening.

00:43:38.680 --> 00:43:43.620
And so we built something that allowed us to monitor our usage compared to limits.

00:43:43.620 --> 00:43:52.140
And allowed us to alert ourselves when we get pretty close, around 80%, so we can talk to Amazon about increasing our thresholds.

00:43:52.140 --> 00:43:55.500
You guys must have a special relationship with AWS.

00:43:55.500 --> 00:43:58.120
Yeah, you know, we're big fans of AWS.

00:43:58.120 --> 00:44:02.520
AWS seems to be big fans of us, and we talk a whole lot.

00:44:02.520 --> 00:44:07.500
Yeah, I'm sure that you guys are actually a topic of conversation in their engineering group fairly often.

00:44:07.500 --> 00:44:08.080
That's cool.

00:44:08.080 --> 00:44:09.840
Nice.

00:44:09.840 --> 00:44:18.280
So one of the phrases or quotes I saw from your blog post was you said something to the effect of,

00:44:18.280 --> 00:44:23.920
we found a formal change control system didn't work well within our culture of freedom and responsibility.

00:44:23.920 --> 00:44:25.240
That sounds really cool.

00:44:25.240 --> 00:44:26.920
And so you created this thing called Kronos.

00:44:26.920 --> 00:44:29.080
What's this culture of freedom and responsibility?

00:44:29.080 --> 00:44:35.600
Netflix has done a lot of work to formally define the kind of culture it likes to have internally.

00:44:35.600 --> 00:44:37.780
So we have a culture slide deck.

00:44:37.780 --> 00:44:40.520
It's now publicly available on SlideShare.

00:44:40.520 --> 00:44:46.020
You know, I think Googling for Netflix culture will find it within the first few links.

00:44:47.100 --> 00:44:55.140
If you look at how we think we're going to be successful as a company, it's really about decentralizing and maximizing speed of innovation.

00:44:55.740 --> 00:45:13.980
And if you want to maximize the speed of innovation, we believe that the best way to do that is to hire a bunch of people and to make it so innovation can happen to the lowest, most spread out parts of the organization without the need for coupling between somebody who wants to do something and a whole bunch of other people just for sort of approval.

00:45:15.420 --> 00:45:23.420
Which means that we have a culture that emphasizes freedom, but also means that for that you get responsibility for your actions.

00:45:24.140 --> 00:45:30.480
And examples of freedom mean, for example, that we don't have approvals on purchases.

00:45:31.860 --> 00:45:35.320
And I'll say that again, because it can kind of sound a little crazy.

00:45:35.320 --> 00:45:41.560
There are no actual approval processes for making a hardware purchase.

00:45:41.560 --> 00:45:43.180
Yeah.

00:45:43.180 --> 00:45:46.280
As another example, let's talk about expenses.

00:45:46.280 --> 00:45:50.760
Netflix's expense policy is very robustly documented.

00:45:50.760 --> 00:45:53.040
It is act in Netflix's best interests.

00:45:53.040 --> 00:45:58.920
That sentence, there you go, is the entirety of our expense policy.

00:46:00.240 --> 00:46:08.140
And what that ends up meaning in reality is that, for example, when I submit an expense, there's no approval for that expense.

00:46:08.140 --> 00:46:09.520
It'll get automatically paid.

00:46:09.520 --> 00:46:16.760
And then at the end of the month, my manager will get a list of expenses that were automatically paid within her or his organization.

00:46:16.760 --> 00:46:17.360
Sure.

00:46:17.360 --> 00:46:20.860
And long as you're behaving good for Netflix, it's all good, right?

00:46:20.860 --> 00:46:26.940
If you take some client or somebody out to dinner and you think it's good for Netflix, then it's all right, huh?

00:46:26.940 --> 00:46:27.520
Right.

00:46:27.520 --> 00:46:28.140
Exactly.

00:46:28.760 --> 00:46:40.200
So that also means that from an engineering perspective, engineers actually get to decide what's the right thing for Netflix, both in terms of how they solve problems and when, for example, they might push to production.

00:46:40.200 --> 00:47:08.120
Now, it turned out that that ended up being wrong because as soon as I built a bunch of infrastructure libraries in Python for working in the cloud, I started getting a bunch of people contacting me informally and going, hey, I heard you have this thing that would allow me to do Python more easily.

00:47:08.760 --> 00:47:13.180
So that turned out to have enabled, I think, a lot of other people in Netflix to use Python.

00:47:13.180 --> 00:47:26.200
But from the change perspective, in a typical environment, and I've worked in a bunch of them, if a developer wants to do something in production, they have to submit a change control ticket, which will then end up getting approved by somebody.

00:47:26.840 --> 00:47:29.260
It's not very consistent with our culture.

00:47:29.260 --> 00:47:33.880
And having worked in a bunch of other organizations that do that, I don't think it's particularly useful anyway.

00:47:33.880 --> 00:47:35.020
So we don't do that.

00:47:35.020 --> 00:47:35.480
Right.

00:47:35.560 --> 00:47:40.100
It makes people feel like they have control, but it doesn't really help that much.

00:47:40.100 --> 00:47:40.500
Yeah.

00:47:40.500 --> 00:47:48.260
I mean, I think what happens is basically the people who are kind of far away from that change end up having to approve it, but they don't actually know what that actually means.

00:47:48.260 --> 00:47:51.080
It's not like they're actually being any more responsible for it.

00:47:51.160 --> 00:48:01.840
And typically what happens is when a change ends up not having been the right thing, then the company will react by saying, well, now you need a director to approve this kind of change, or you need a VP to approve this kind of change.

00:48:01.840 --> 00:48:09.900
Moving the locus of control over the decision further and further away from the people who are most qualified to make the decision.

00:48:09.900 --> 00:48:11.580
Yeah, that's a really good point.

00:48:11.580 --> 00:48:18.620
The more approval it needs, the less likely that person is able to actually understand what they're approving.

00:48:18.620 --> 00:48:19.880
That's very interesting.

00:48:19.880 --> 00:48:20.500
Yeah.

00:48:20.500 --> 00:48:23.080
And the other thing is it actually takes away from your responsibility.

00:48:23.560 --> 00:48:34.500
So if you're a developer and you want to deploy at five o'clock in the afternoon on a Friday, for example, which is kind of prime time for us, and generally speaking, to be perfectly honest, you know, I don't do that.

00:48:34.500 --> 00:48:39.000
My team, generally speaking, doesn't do that unless we have a very good reason to.

00:48:39.000 --> 00:48:46.380
Then if you can basically submit a change control ticket and say, well, you know, my boss or my director approved it, so it's okay.

00:48:46.380 --> 00:48:52.360
It means you're not actually practicing a whole lot of responsible thinking as to whether or not this is a good idea right now.

00:48:52.360 --> 00:49:01.980
So putting it entirely in your hands means you have complete freedom to do what you think is right, but also means you have the responsibility to make the best decision.

00:49:01.980 --> 00:49:03.040
That's great.

00:49:03.040 --> 00:49:10.140
I think a lot of the best engineers really and developers really, you know, value that freedom and responsibility.

00:49:10.140 --> 00:49:11.040
So I think it's great.

00:49:11.040 --> 00:49:13.780
Yeah, it's worked reasonably well for us.

00:49:13.780 --> 00:49:14.800
Cool.

00:49:14.800 --> 00:49:17.980
So Python 2 or Python 3, Netflix?

00:49:20.520 --> 00:49:26.240
Right now, my impression is, and remember, we're not exactly a very standards-driven company.

00:49:26.240 --> 00:49:32.560
There's no, you know, overall board that says this is how thou shalt use Python and Netflix.

00:49:32.560 --> 00:49:36.920
My impression is that generally speaking, we seem to be using Python 2 across the board.

00:49:36.920 --> 00:49:40.440
I don't know anybody using anything older than 2.7, thankfully.

00:49:41.180 --> 00:49:46.340
And I suspect that in the next year, we'll see Python 3 increasing in its coverage.

00:49:46.340 --> 00:49:47.520
Okay, great.

00:49:47.520 --> 00:49:51.060
I also saw that you guys sponsored PyCon this year.

00:49:51.060 --> 00:49:51.800
That's great.

00:49:51.800 --> 00:49:52.540
Thanks for that.

00:49:52.540 --> 00:49:56.540
Did you do any presentations or Netflix as a group do Python presentations?

00:49:56.540 --> 00:49:57.740
Boy, how do you know?

00:49:57.740 --> 00:50:01.380
I got to tell you, I don't know off the top of my head whether or not Netflix did any presentations.

00:50:01.900 --> 00:50:15.960
This is the first year, I think, in about three years that I didn't attend PyCon, despite the fact that PyCon, I think, is one of my favorite conferences, only because Montreal was a little far to go for PyCon for me.

00:50:15.960 --> 00:50:18.620
Yeah, well, you can go a little bit north next year.

00:50:18.620 --> 00:50:20.980
Where is it next year?

00:50:21.120 --> 00:50:22.180
It's in Portland, my hometown.

00:50:22.180 --> 00:50:23.220
Oh, well, perfect.

00:50:23.220 --> 00:50:25.740
I mean, I'm going to Portland next week, so I'm a big fan.

00:50:25.740 --> 00:50:26.520
Excellent.

00:50:26.520 --> 00:50:30.400
So I'll go look through some of the older ones, see if I can pull up something.

00:50:30.400 --> 00:50:35.280
So you guys have a lot of developers and a lot of cool stuff going on.

00:50:35.280 --> 00:50:36.520
Are you hiring people right now?

00:50:36.520 --> 00:50:41.700
If people are listening, are there interesting areas that they should maybe think about?

00:50:41.700 --> 00:50:44.340
Are we hiring people right now?

00:50:44.340 --> 00:50:48.260
Maybe one day the answer to that will be no.

00:50:48.700 --> 00:50:51.720
But I don't suspect that's going to happen anytime in the next few years.

00:50:51.720 --> 00:50:54.860
We are very actively hiring people right now.

00:50:54.860 --> 00:51:03.380
The only thing I wish is when I looked at jobs.netflix.com, there was some sort of counter that allowed me to see how many open positions there are.

00:51:03.380 --> 00:51:05.140
But there's a whole bunch of them.

00:51:05.140 --> 00:51:05.680
Excellent.

00:51:05.680 --> 00:51:07.500
Okay, so jobs.netflix.com.

00:51:07.500 --> 00:51:08.900
People can check that out if they're interested.

00:51:08.900 --> 00:51:09.480
Very cool.

00:51:09.480 --> 00:51:10.260
Yeah.

00:51:10.260 --> 00:51:12.700
And I'll say this.

00:51:12.700 --> 00:51:18.060
There's a bunch of jobs that might actually call for Python experience, a bunch of jobs that might not.

00:51:18.060 --> 00:51:20.140
Two things I would say.

00:51:20.140 --> 00:51:29.100
One, I know a whole bunch of areas within Netflix where Python is heavily used, both in terms of analytics.

00:51:29.100 --> 00:51:33.400
So, for example, my real-time analytics group is big fans of Python.

00:51:33.400 --> 00:51:36.520
But also in terms of sort of infrastructure management and development.

00:51:36.520 --> 00:51:43.480
So, our Cassandra operations people are big fans of Python as well as some of our big data platform people.

00:51:43.480 --> 00:51:55.200
And the other thing is that if you're not actually married to continuing to use Python, there's a whole bunch of other positions at Netflix that want great engineers irrespective of your language.

00:51:55.740 --> 00:52:04.020
We've come to believe that hiring for the language is less valuable to us than hiring for the aptitude.

00:52:04.020 --> 00:52:09.120
That's one of the things that I like about the way we think about hiring compared to a lot of other companies.

00:52:09.120 --> 00:52:14.300
We tend to hire great engineers and then have them use the right language.

00:52:14.300 --> 00:52:15.000
Excellent.

00:52:15.000 --> 00:52:17.060
Yeah, so I'm sure a lot of people are excited to hear that.

00:52:17.060 --> 00:52:17.480
That's cool.

00:52:17.480 --> 00:52:23.660
A few questions I always ask on the way out the door is, first of all, what's your favorite editor?

00:52:23.660 --> 00:52:30.120
So, right now, after many, many, many years, I have switched.

00:52:30.120 --> 00:52:33.820
And I'm not sure if it's going to be a permanent switch, but I've switched to Atom from GitHub.

00:52:33.820 --> 00:52:34.500
Oh, yeah.

00:52:34.500 --> 00:52:35.380
Atom is pretty nice.

00:52:35.380 --> 00:52:36.100
Yeah.

00:52:36.100 --> 00:52:40.320
I tried Sublime for a while and it was okay, but it wasn't sticky.

00:52:40.320 --> 00:52:43.340
I kept coming back to Vim every once in a while.

00:52:44.200 --> 00:52:50.160
And then I haven't tried anything heavier than Sublime or Atom, like, you know, any of the sort of PyCharm or all of that stuff.

00:52:50.160 --> 00:52:50.780
Exactly.

00:52:50.780 --> 00:52:51.560
Okay, cool.

00:52:51.560 --> 00:52:56.300
I know Sublime is very popular within Netflix from my exposure that I've had.

00:52:56.300 --> 00:52:57.400
So, that's cool.

00:52:57.400 --> 00:52:58.400
Yeah, Atom is nice.

00:52:58.400 --> 00:52:59.820
It looks really good.

00:52:59.820 --> 00:53:04.980
How about some cool package on PyPI that people should know about?

00:53:04.980 --> 00:53:08.500
Well, I mean, technically, IPython Notebook is on PyPy, right?

00:53:08.500 --> 00:53:09.220
It is, yeah.

00:53:09.400 --> 00:53:20.700
And I would say, if there was one, well, actually, so for editing and for authoring and for experimentation, IPython Notebook beats everything else out there for me.

00:53:20.700 --> 00:53:24.760
For actually getting work done, oh, boy, howdy, requests.

00:53:24.760 --> 00:53:25.440
Yes.

00:53:25.440 --> 00:53:27.260
Requests, requests, requests.

00:53:27.260 --> 00:53:31.540
Yeah, requests is the most popular Python package, period.

00:53:32.060 --> 00:53:34.200
It's been downloaded an insane amount of times.

00:53:34.200 --> 00:53:37.000
And we had, on show six, we had Kenneth Wrights here to talk about it.

00:53:37.000 --> 00:53:37.580
That was very cool.

00:53:37.580 --> 00:53:44.820
Yeah, I mean, you know, at some point, I wonder why, you know, at some point, will it just go back, go into the core?

00:53:44.820 --> 00:53:46.580
You know, actually, Kenneth talked about that.

00:53:46.580 --> 00:53:55.500
He was at the language summit there at the last PyCon, and they talked a lot about that, specifically, will requests become part of the standard library?

00:53:55.500 --> 00:54:07.240
And they decided no, because they would like to release changes to requests on a more high-speed pace than the actual Python itself.

00:54:07.240 --> 00:54:10.200
So there was actually quite a bit of discussion.

00:54:10.200 --> 00:54:12.120
I think that that was what their decision was.

00:54:12.120 --> 00:54:19.720
But they said it's going to become the official recommended way to do HTTP within Python, like, instead of URL lib2 or things like that, within the documentation.

00:54:19.720 --> 00:54:22.040
All right.

00:54:22.040 --> 00:54:22.640
Very cool.

00:54:22.640 --> 00:54:24.680
So that's definitely a popular one.

00:54:24.680 --> 00:54:25.100
That's great.

00:54:25.440 --> 00:54:26.440
Yeah, IPython and requests.

00:54:26.440 --> 00:54:27.420
People should check those out.

00:54:27.420 --> 00:54:27.900
That's great.

00:54:27.900 --> 00:54:30.740
Roy, any final shout-out you want to give?

00:54:30.740 --> 00:54:32.740
Anything you want to bring the listeners' attention to?

00:54:32.740 --> 00:54:37.520
You know, Monitorama is happening in Portland next week.

00:54:37.520 --> 00:54:37.780
Okay.

00:54:37.780 --> 00:54:45.080
So anybody should check out the presentations coming out of them if they have any interest in monitoring or operational insight.

00:54:45.080 --> 00:54:47.140
I'm going to be at the conference for the first time.

00:54:47.140 --> 00:54:48.600
I'm very excited about that.

00:54:48.600 --> 00:54:53.380
There's a whole bunch of really interesting people who are much smarter than me presenting and attending.

00:54:53.380 --> 00:54:54.980
Check that out.

00:54:55.380 --> 00:54:58.400
I can't think of anything else off the top of my head.

00:54:58.400 --> 00:54:58.840
All right.

00:54:58.840 --> 00:55:00.540
This has been such a great show.

00:55:00.540 --> 00:55:03.620
I really enjoyed the conversation, and I learned a lot.

00:55:03.620 --> 00:55:04.720
Thanks for being here, Roy.

00:55:04.720 --> 00:55:06.480
It's been my pleasure.

00:55:06.480 --> 00:55:07.060
Thanks, Michael.

00:55:07.060 --> 00:55:07.800
Yeah.

00:55:07.800 --> 00:55:08.020
Bye.

00:55:09.020 --> 00:55:11.720
This has been another episode of Talk Python To Me.

00:55:12.020 --> 00:55:17.060
Today's guest was Roy Rapoport, and this episode has been sponsored by CodeChip and Hired.

00:55:17.060 --> 00:55:19.120
Thanks, guys, for supporting the show.

00:55:19.120 --> 00:55:23.820
Check out CodeChip at CodeChip.com and thank them on Twitter via at CodeChip.

00:55:24.080 --> 00:55:25.320
Don't forget the discount code for listeners.

00:55:25.320 --> 00:55:26.440
It's easy.

00:55:26.440 --> 00:55:28.600
Talk Python, all caps, no spaces.

00:55:28.600 --> 00:55:31.620
Hired wants to help you find your next big thing.

00:55:31.620 --> 00:55:41.600
Visit Hired.com slash Talk Python To Me and get five or more offers with salary and equity presented right up front and a special listener signing bonus of $4,000.

00:55:43.040 --> 00:55:45.760
Speaking of jobs, remember that Netflix is hiring.

00:55:45.760 --> 00:55:52.540
If what you heard on this show sounds amazing and you're able to work from Los Gatos, California, check out jobs.netflix.com.

00:55:52.540 --> 00:55:58.820
You can find the links from the show at talkpythoninv.com slash episodes slash show slash 16.

00:55:58.820 --> 00:56:01.520
Also, be sure to subscribe to the show.

00:56:01.520 --> 00:56:04.100
Open your favorite podcatcher and search for Python.

00:56:04.100 --> 00:56:05.740
We should be right there at the top.

00:56:05.740 --> 00:56:10.380
You'll also find the iTunes and direct RSS feeds in the footer of the website.

00:56:10.860 --> 00:56:15.560
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

00:56:15.560 --> 00:56:17.920
You can hear the entire song on our website.

00:56:17.920 --> 00:56:20.200
This is your host, Michael Kennedy.

00:56:20.200 --> 00:56:21.120
Thanks for listening.

00:56:21.120 --> 00:56:23.140
Smix, take us out of here.

00:56:40.800 --> 00:56:45.340
developers, developers, developers, developers, developers, developers, developers, developers.

