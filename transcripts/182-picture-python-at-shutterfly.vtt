WEBVTT

00:00:00.001 --> 00:00:04.780
Join Doug Farrell and me as we discuss his career and what he's up to at Shutterfly.

00:00:04.780 --> 00:00:09.080
You'll learn about the Python stack he's using to work with not just bits and bytes,

00:00:09.080 --> 00:00:14.260
but physical devices on a production line for creating all sorts of picturesque items.

00:00:14.260 --> 00:00:18.420
You'll also hear how both he and I feel it's a great time to be a developer,

00:00:18.420 --> 00:00:21.940
even if you're on the older side of, say, 30, 40, or beyond.

00:00:21.940 --> 00:00:27.180
This is Talk Python To Me, episode 182, recorded October 4th, 2018.

00:00:27.180 --> 00:00:46.540
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:46.540 --> 00:00:50.600
This is your host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy.

00:00:50.600 --> 00:00:56.840
Keep up with the show and listen to past episodes at talkpython.fm, and follow the show on Twitter via at Talk Python.

00:00:57.640 --> 00:01:00.740
This episode is brought to you by LogRocket and Rollbar.

00:01:00.740 --> 00:01:04.120
Please check out what they're offering during their segments. It really helps support the show.

00:01:04.120 --> 00:01:06.100
Doug, welcome to Talk Python.

00:01:06.100 --> 00:01:07.920
Thank you very much, Michael. I'm glad to be here.

00:01:07.920 --> 00:01:09.920
Yeah, I'm glad to have you here. It's great.

00:01:09.920 --> 00:01:13.720
We've been interacting on email and on social media and stuff.

00:01:13.720 --> 00:01:18.900
I've talked about some of the articles you've written before, and you've sent in recommendations and various things for us.

00:01:18.900 --> 00:01:20.860
So it's nice to finally have you here.

00:01:20.860 --> 00:01:29.020
Yeah, I'd like to drop notes to you and Brian on the Python Bytes podcast about articles that I've written in RealPython, the site.

00:01:29.020 --> 00:01:30.220
Yeah, there are definitely some good ones.

00:01:30.220 --> 00:01:33.960
And I want to dig into some of those, actually, as we get further into the show.

00:01:33.960 --> 00:01:37.100
But let's start with your story about how you got into programming in Python.

00:01:37.100 --> 00:01:39.860
Well, I actually got started pretty late.

00:01:39.860 --> 00:01:47.540
I was probably in my late 20s by the time I got into programming back in the early 80s, late 70s, early 80s.

00:01:47.540 --> 00:02:02.080
I had failed at Fortran years before the first time I went to college, mostly because, you know, back then it was all punch cards and having to go down to the dungeon to hand it over to somebody who would tell you three days later whether your program worked.

00:02:02.220 --> 00:02:04.080
I didn't really get excited about it until it was either.

00:02:04.080 --> 00:02:06.280
Yeah, I could see how you wouldn't be so excited about that.

00:02:06.280 --> 00:02:13.900
That's not the same as, you know, fun GUI editors and compilers and Stack Overflow and all that stuff, right?

00:02:13.900 --> 00:02:14.860
It's a different world.

00:02:14.860 --> 00:02:21.720
Well, plus, you know, I saw lots of people who actually left the program, but they'd come down the stairs with a giant stack of COBOL cards, drop it.

00:02:21.720 --> 00:02:27.640
The whole thing would be spread all over the place, and they'd leave the program crying, you know, because they just couldn't stand to sort them again.

00:02:27.640 --> 00:02:31.720
They just lost their will to be part of that anymore.

00:02:31.720 --> 00:02:32.740
That's it.

00:02:32.740 --> 00:02:33.900
They'd moved on to something else.

00:02:33.900 --> 00:02:49.920
So I got excited about it when I bought my first personal computer, which was back then I bought a Radio Shack color computer and taught myself some basic and a little bit of 6809 assembly language for some, you know, because as most young guys, I was thinking I was going to be a game programmer.

00:02:49.920 --> 00:02:50.680
How interesting.

00:02:50.680 --> 00:02:52.740
You know, you think of, like, getting started programming.

00:02:52.740 --> 00:02:55.120
People say, well, Michael, programming's kind of hard.

00:02:55.120 --> 00:02:58.260
I have a hard time wrapping my mind around, like, Python or JavaScript.

00:02:58.260 --> 00:03:00.000
Like, starting with a similar.

00:03:00.000 --> 00:03:00.940
Like, that is starting.

00:03:00.940 --> 00:03:01.700
Seriously.

00:03:01.700 --> 00:03:03.700
I still can't do similar.

00:03:03.700 --> 00:03:05.200
The color computer was so slow.

00:03:05.200 --> 00:03:07.080
It was less than a megahertz clock speed.

00:03:07.080 --> 00:03:09.820
So to do anything fast, you had to really get down and dirty.

00:03:09.820 --> 00:03:10.160
Yeah.

00:03:10.160 --> 00:03:11.420
But, okay, so you started there.

00:03:11.420 --> 00:03:15.040
So that gives you a good foundation of it's only going to get easier from here.

00:03:15.160 --> 00:03:15.640
Right, yeah.

00:03:15.640 --> 00:03:22.140
And I had my – actually, I was back in school by then going after my physics degree, BS in physics.

00:03:22.140 --> 00:03:34.440
And my senior project was building a fairly primitive CAT scan device with some high-precision translation tables and using Pascal on this wacky computer called a Terrax.

00:03:34.440 --> 00:03:37.220
And that really – I really enjoyed that.

00:03:37.220 --> 00:03:40.280
I spent most of my time doing that besides failing French.

00:03:40.860 --> 00:03:50.860
And that gave me enough buzzwords to get my first engineering job as a process control engineer doing automation systems for municipal water systems and gas pipelines.

00:03:50.860 --> 00:03:52.080
Wow, that sounds interesting.

00:03:52.080 --> 00:03:55.520
So that's a lot of, like, controlling hardware, right?

00:03:55.520 --> 00:03:55.740
Right, yeah.

00:03:55.740 --> 00:03:58.620
Which is kind of a theme, it sounds like, from all the stuff that you've been doing.

00:03:58.620 --> 00:04:05.500
Yeah, it was kind of a big scale, you know, like a macro version of hardware control where you're doing really huge systems.

00:04:05.600 --> 00:04:14.660
I think the biggest thing I did was I automated a 35-gallon-a-day, 35-million-gallon-a-day clean water system in Arizona.

00:04:14.660 --> 00:04:23.240
I think about – there were certain steps in my programming career that they were sort of, you know, take-your-breath-away moments.

00:04:23.240 --> 00:04:34.900
And I remember the first time I wrote – this is for some other company – I wrote my first e-commerce system, and it was doing, like, $4,000 transactions per transaction.

00:04:34.900 --> 00:04:38.100
I was like, wow, I had really better not mess this up.

00:04:38.100 --> 00:04:40.520
You know, if we do this wrong on scale, it's going to be a problem.

00:04:40.520 --> 00:04:45.480
Did you have that feeling when you were working on that much water and that much hardware?

00:04:45.480 --> 00:04:47.700
Yeah, because the scale of this thing is huge.

00:04:47.700 --> 00:04:53.620
I mean, this was early in its construction, so we were actually – when I was out there, I was actually myself and the other guy we were working with.

00:04:53.620 --> 00:04:59.820
We were able to ride our bikes inside of the 35-million-gallon tank because it wasn't in use yet.

00:04:59.820 --> 00:05:00.900
You had your own velodrome.

00:05:00.900 --> 00:05:02.100
Yeah.

00:05:02.440 --> 00:05:11.880
And we had one disaster, thank God it wasn't me, where we had a flood where we managed to wash away a golf course putting green down the road.

00:05:11.880 --> 00:05:13.940
Hopefully no one was putting at the time.

00:05:13.940 --> 00:05:21.720
Well, it was late at night, and we heard – the course manager was over screaming at us, and then it turned out to be not us.

00:05:21.720 --> 00:05:23.800
So that was a nice escape.

00:05:23.800 --> 00:05:25.260
Well, that's really good.

00:05:25.260 --> 00:05:25.840
That's really good.

00:05:25.840 --> 00:05:27.780
So what languages were you using to do all this?

00:05:27.780 --> 00:05:31.180
This was a proprietary language that the company had written.

00:05:31.180 --> 00:05:34.120
It was a software simulation of hardware.

00:05:34.120 --> 00:05:48.580
So when you do hardware control, there would be things like timers and PID controllers and digital switches and analog inputs and outputs, comparators, all these hardware things that you could wire together.

00:05:48.580 --> 00:05:50.100
And this simulated those.

00:05:50.100 --> 00:05:55.100
And in that language, the variables – you could think of the variables as wires.

00:05:55.100 --> 00:05:58.740
So anything you connected a variable to was like wiring those two things together.

00:05:59.300 --> 00:06:12.140
So you could string all these things like an analog input to a comparator to a set point control to a PID loop to an analog output that would control a valve that would keep a tank from overfilling or underfilling.

00:06:12.140 --> 00:06:13.340
Yeah, that's really interesting.

00:06:13.340 --> 00:06:18.420
Do you see as much of those sort of custom programming languages now?

00:06:18.460 --> 00:06:24.700
Or do you see people adopting things like Python and JavaScript and other languages for that purpose?

00:06:24.700 --> 00:06:29.200
Well, I know that that company is still big in the game and they're still around.

00:06:29.200 --> 00:06:37.880
And I think my experience with municipalities and gas pipeline companies is that they're very reluctant to change.

00:06:37.880 --> 00:06:39.520
They're always going to stick with something that works.

00:06:39.520 --> 00:06:44.280
I don't know if you've ever worked with PLC controllers, programmable logic ladder controllers.

00:06:44.500 --> 00:06:45.880
Yeah, I only have heard the term.

00:06:45.880 --> 00:06:50.360
Those are very popular because they work and people know them.

00:06:50.360 --> 00:06:52.660
So the same thing applies to municipalities.

00:06:52.660 --> 00:06:53.840
It works and they know them.

00:06:53.840 --> 00:07:06.860
I mean one of my experiences when I was there was having a realization that they had our computer stuff in the same depreciation column in their spreadsheet as manhole covers.

00:07:07.500 --> 00:07:11.760
So they expected our computer stuff to last like 50 years like a manhole cover.

00:07:11.760 --> 00:07:12.420
And I was like, really?

00:07:12.420 --> 00:07:13.700
I don't think so.

00:07:13.700 --> 00:07:18.540
This is not going to work out the way you think this is going to work out.

00:07:18.540 --> 00:07:20.080
So that was nice.

00:07:20.080 --> 00:07:21.140
Yeah.

00:07:21.140 --> 00:07:24.000
They were like, well, how are we going to get parts to replace this?

00:07:24.000 --> 00:07:26.820
I'm like, no, you're going to replace the whole thing in about 20 years, I think.

00:07:26.820 --> 00:07:27.680
Maybe even less.

00:07:27.680 --> 00:07:28.600
Yeah, how interesting.

00:07:28.600 --> 00:07:30.540
You moved on from there, right?

00:07:30.540 --> 00:07:31.680
Towards the web?

00:07:31.680 --> 00:07:37.040
Yeah, after I left that company, I worked at a high-speed pick-and-place machine.

00:07:37.040 --> 00:07:43.740
It was kind of a robot that assembled electronics boards by picking up chips, flying them over a camera, put them on the board.

00:07:43.740 --> 00:07:49.240
And about, I don't know, the fast one was like 20,000 parts an hour, which is really moving.

00:07:49.240 --> 00:07:50.920
And that was my really—

00:07:50.920 --> 00:07:52.080
Kind of stay away from it, right?

00:07:52.080 --> 00:07:53.420
Don't get too close to it, huh?

00:07:53.420 --> 00:07:58.280
Yeah, there was lots of stuff about don't open the door when it's moving because you could get really hurt.

00:07:59.200 --> 00:08:06.300
And we were kind of—that wasn't—I went to a trade show, and they really had some fast and big machines like that that would scare you to death.

00:08:06.300 --> 00:08:07.080
Yeah, I can imagine.

00:08:07.080 --> 00:08:10.480
But that was sort of like my low-level embedded programming, which I really enjoyed.

00:08:10.480 --> 00:08:20.920
And eventually, I went to work for a company that did—where my internet exposure came in, where they were trying to put reference titles like encyclopedias online.

00:08:20.920 --> 00:08:22.960
And now I worked at Shutterfly.

00:08:22.960 --> 00:08:24.800
This is probably pre-Wikipedia, right?

00:08:25.800 --> 00:08:31.220
Yeah, this was back in the Encarta days and Griller's Encyclopedia Online.

00:08:31.220 --> 00:08:35.440
And I actually worked on the CD-ROM version of that and then the web version.

00:08:35.440 --> 00:08:36.220
Yeah, cool.

00:08:36.220 --> 00:08:41.220
Yeah, and now you're at Shutterfly, and it sounds like a really interesting place to be.

00:08:41.220 --> 00:08:45.280
And it also sounds like you're getting to do some of this sort of software meets hardware thing.

00:08:45.280 --> 00:08:46.280
Yeah, it's satisfying.

00:08:46.280 --> 00:08:48.960
I really like that part where software meets the real world.

00:08:48.960 --> 00:08:51.320
It's not just all a bunch of bits moving around in the computer.

00:08:51.800 --> 00:08:54.040
It has enough of the things that I write.

00:08:54.040 --> 00:08:57.700
Everything I write is all on our production floor, not customer-facing.

00:08:57.700 --> 00:09:05.660
So it allows our production people to interact with the presses and other machinery that actually produces books.

00:09:05.660 --> 00:09:11.780
Shutterfly is a digital book publisher where customers can upload their photos and get all kinds of products.

00:09:11.780 --> 00:09:18.840
Like photo books you can send out for gifts or printed stuff or printed photos out of your digital photos, things like that.

00:09:18.900 --> 00:09:25.200
Pillows and coffee mugs and desk frames and all kinds of big canvas prints, which are all interesting products.

00:09:25.200 --> 00:09:29.040
Our motto at Shutterfly is sharing life's joy.

00:09:29.040 --> 00:09:35.400
So it's an interesting way to think about photos and how there's so many digital photos.

00:09:35.400 --> 00:09:40.620
And then people get so many and they get overwhelmed about what am I going to do with this thing, this pile of pictures.

00:09:40.840 --> 00:09:41.700
You know, I just did that.

00:09:41.700 --> 00:09:45.720
I ordered a photo book for my family because we have like 30,000 photos.

00:09:45.720 --> 00:09:47.160
And I'm like, we're not going to go through these.

00:09:47.160 --> 00:09:48.340
There's just – it's overwhelming.

00:09:48.340 --> 00:09:53.640
But if I could put it on the coffee table and friends come to visit, like we can experience them in a different way.

00:09:53.640 --> 00:09:54.180
It's pretty cool.

00:09:54.180 --> 00:09:54.460
Yeah.

00:09:54.460 --> 00:09:55.860
It makes great gifts.

00:09:55.860 --> 00:09:56.760
I mean, you know, grandparents.

00:09:56.760 --> 00:10:01.320
I know my daughter sends me books that she makes with our product.

00:10:01.320 --> 00:10:02.620
And I love that stuff.

00:10:03.140 --> 00:10:05.040
Hey, you printed this for me.

00:10:05.040 --> 00:10:05.780
You just don't know it.

00:10:05.780 --> 00:10:06.520
Yeah.

00:10:06.520 --> 00:10:10.900
Usually, hopefully, I don't find out that I printed it and made it wrong.

00:10:10.900 --> 00:10:11.320
That's right.

00:10:11.320 --> 00:10:12.280
This is messed up.

00:10:12.280 --> 00:10:13.180
Oh, I remember that, Bob.

00:10:13.180 --> 00:10:13.520
Yeah.

00:10:13.520 --> 00:10:14.140
Oh, sorry.

00:10:14.140 --> 00:10:14.700
Yeah.

00:10:14.700 --> 00:10:25.500
So that's – doing that stuff satisfies my kind of need to have the computer touch the real world because we interact with the presses and hardware directly or more – a little directly.

00:10:25.500 --> 00:10:26.300
Yeah.

00:10:26.300 --> 00:10:29.200
It's not as dangerous as like high-speed stuff where people could get hurt.

00:10:29.200 --> 00:10:30.060
Yeah.

00:10:30.060 --> 00:10:32.260
You don't want to be putting people onto a board.

00:10:32.260 --> 00:10:33.640
No.

00:10:33.640 --> 00:10:34.100
Yeah.

00:10:34.100 --> 00:10:35.420
This sounds like really fun.

00:10:35.420 --> 00:10:37.940
And it's that software meets hardware thing.

00:10:37.940 --> 00:10:40.760
And you guys use a lot of Python at Shutterfly, right?

00:10:40.760 --> 00:10:41.060
Yeah.

00:10:41.060 --> 00:10:45.820
They actually – they acquired the company I was working for and we were doing all Python stuff.

00:10:45.820 --> 00:10:48.300
We were one of their smaller competitors and they acquired us.

00:10:48.300 --> 00:10:52.180
And I came on board as a full-time Shutterfly employee, which was great.

00:10:52.180 --> 00:10:56.020
And that was their first exposure to Python.

00:10:56.020 --> 00:11:00.180
They had been a traditionally and still are a big Java shop.

00:11:00.740 --> 00:11:04.180
A lot of the work that they had done and a lot of their infrastructure is in Java.

00:11:04.520 --> 00:11:16.640
But through acquisitions, they've become a heterogeneous tech stack company because they have Java, Python, PHP, mobile app development languages, JavaScript, of course, all over the place.

00:11:16.640 --> 00:11:17.340
Yeah, of course.

00:11:17.440 --> 00:11:31.400
But having us come on board, one of the things that happened right away was that we were able to take over a section of gifting products because Shutterfly has a huge – they do a huge amount of book printing, of course.

00:11:31.780 --> 00:11:35.620
But the gifting products are becoming – is a fast-growing market for them.

00:11:36.120 --> 00:11:44.300
And my group that I'm in was able to implement a lot of the gifting products and is continuing to implement new gifting products all the time in Python.

00:11:44.300 --> 00:11:49.760
And almost that whole – almost the whole stack for that production is in Python.

00:11:49.760 --> 00:11:50.480
That's really cool.

00:11:50.480 --> 00:11:59.860
Do you guys see the agility and the ability to, you know, pip install anti-gravity to – as a real advantage for your team?

00:11:59.940 --> 00:12:03.240
Maybe even within the company, people go, oh, yeah, we know those guys can deliver quick.

00:12:03.240 --> 00:12:08.580
Yeah, that's a – there's two parts of that is that we can be extremely agile.

00:12:08.580 --> 00:12:20.300
And we first – when we first did our first pass at producing gifts products, I think it was – I think it was a real eye-opener for people to see how quickly we could actually bring a product to bear into production.

00:12:20.800 --> 00:12:30.040
And then not only get it there to where they could start producing it, but iterate quickly to improve the process because, you know, the first pass would always have issues or they'd want changes.

00:12:30.040 --> 00:12:38.020
And the ability for us to iterate very quickly I think is a huge benefit for not only us but also the company in general.

00:12:38.020 --> 00:12:38.300
Yeah.

00:12:38.300 --> 00:12:45.440
Yeah, there's an interesting story about how Google acquired YouTube and they had Google Video and a bunch of C++ guys trying to compete with them.

00:12:45.440 --> 00:12:52.060
And YouTube was a little upstart built on Python and they were just out, you know, outperforming and adding features.

00:12:52.060 --> 00:12:56.060
Maybe they needed more servers or something to make it go, but it didn't matter, right?

00:12:56.060 --> 00:13:02.640
So kind of like you, Google – or like Shutterfly, Google solved the problem by buying YouTube and that fixed it.

00:13:03.440 --> 00:13:16.420
Yeah, and it's – you know, we've been growing because they continue to – you know, they continue to sort of give us the opportunity to add new products, sort of subsume some of our products into our – the way we work in Python.

00:13:16.420 --> 00:13:19.080
And it's – we're doing a lot of infrastructure work.

00:13:19.080 --> 00:13:23.100
Any growing company has to do a ton of infrastructure work all the time.

00:13:23.100 --> 00:13:31.700
And we're doing a lot of that infrastructure work and architecting based on the experience that we've had with Python and some of the tools that we use and interface with using Python.

00:13:31.700 --> 00:13:35.900
And like you said, the pip install thing, we have our own PyPy server.

00:13:35.900 --> 00:13:36.660
Oh, nice.

00:13:36.660 --> 00:13:41.520
With modules that we have figured out are safe and to use and build against.

00:13:41.520 --> 00:13:48.220
But because we have our own, we have a sort of a vetting process to see new ones that we can add because, well, I know for myself, I'm always like, hey, there's a cool module.

00:13:48.220 --> 00:13:52.240
I'm twisting people's arms to get it into our server so I have access to it.

00:13:52.240 --> 00:13:53.240
That's really cool.

00:13:53.240 --> 00:13:56.040
So what technology are you using for your private PyPy server?

00:13:56.040 --> 00:13:59.100
Well, we have just a copy of the PyPy server code.

00:13:59.100 --> 00:14:04.480
It doesn't have the whole front end, but it just has the back end where you can just do a pip install.

00:14:04.480 --> 00:14:08.140
So long as you point at that server with a pip config file.

00:14:08.140 --> 00:14:08.480
Right.

00:14:08.480 --> 00:14:09.380
So you can configure –

00:14:09.380 --> 00:14:10.000
It will just grab files.

00:14:10.000 --> 00:14:11.800
Yeah, you can configure your user profile.

00:14:11.800 --> 00:14:14.140
So if you say pip install, it first looks there, right?

00:14:14.140 --> 00:14:14.400
Yep.

00:14:14.400 --> 00:14:14.980
That's pretty cool.

00:14:14.980 --> 00:14:15.660
My own development.

00:14:15.800 --> 00:14:22.360
We're moving from server-side development to client-side where we're using containers, Docker containers.

00:14:22.360 --> 00:14:27.160
And for that stuff, it's much – we often – this is how stuff gets started.

00:14:27.160 --> 00:14:33.340
We'll often grab a module from the regular, the public PyPy server, PyPI server.

00:14:33.520 --> 00:14:42.160
And then that – once you see some success in that and people start to review your code, that module will get vetted and checked out and moved into our private PyPy server.

00:14:42.160 --> 00:14:42.280
Yeah.

00:14:42.280 --> 00:14:45.820
Nothing is a more convincing argument than success.

00:14:45.820 --> 00:14:46.280
I know.

00:14:46.280 --> 00:14:50.000
I've been in so many places where people debate, oh, if we do it this way, it'll be better.

00:14:50.000 --> 00:14:51.000
No, that way, it'll be better.

00:14:51.000 --> 00:14:51.580
Like, you know what?

00:14:51.580 --> 00:14:53.580
We're just going to build – like, I just built it this way.

00:14:53.580 --> 00:14:55.520
I know you said it can't work, but here it is working.

00:14:55.520 --> 00:14:58.120
Can we discuss whether or not it's still working?

00:14:58.120 --> 00:14:58.460
Yeah.

00:14:58.460 --> 00:14:59.260
Okay, fine, it's working.

00:14:59.260 --> 00:14:59.860
Yeah, you're right.

00:14:59.860 --> 00:15:00.440
That would work.

00:15:00.440 --> 00:15:01.060
Delivery often wins.

00:15:01.060 --> 00:15:01.220
Let's do that.

00:15:01.220 --> 00:15:02.460
Being able to deliver wins.

00:15:02.460 --> 00:15:03.920
Yeah, it certainly does.

00:15:03.920 --> 00:15:09.000
This portion of Talk Python To Me is brought to you by LogRocket.

00:15:09.000 --> 00:15:13.380
LogRocket will help you view errors in activity from your user's perspective.

00:15:13.380 --> 00:15:15.300
Did they tell you they couldn't log in?

00:15:15.300 --> 00:15:21.640
Well, with LogRocket, you'll get a session where you can see a pixel-perfect replay of what your user saw at that moment.

00:15:21.640 --> 00:15:26.380
The ability to inspect the state of the application at any point in time.

00:15:26.720 --> 00:15:33.880
You'll view every network request and response on their session, as well as a console log of all the JavaScript messages and errors.

00:15:33.880 --> 00:15:35.400
And it goes beyond just errors.

00:15:35.400 --> 00:15:37.180
You'll learn where your users are getting stuck.

00:15:37.180 --> 00:15:43.140
LogRocket intelligently surfaces the key moments of user frustration showing you how to improve your site.

00:15:43.140 --> 00:15:46.740
And LogRocket works with your stack regardless of the language or framework you're using.

00:15:46.740 --> 00:15:51.760
And they even provide SDKs for popular front-end technologies like Vue.js, React.js, and more.

00:15:51.760 --> 00:15:54.300
Do you already use systems such as Rollbar?

00:15:54.640 --> 00:16:00.600
Well, you're in luck because they integrate seamlessly with Rollbar and others for great visibility of front-end and back-end errors.

00:16:00.600 --> 00:16:03.880
Understand the cause of every bug and customer issue today.

00:16:03.880 --> 00:16:07.920
Visit talkpython.fm/LogRocket to get started with their free tier.

00:16:09.300 --> 00:16:14.100
Let's look a little bit inside at what you guys are working with, some of the libraries and stuff.

00:16:14.100 --> 00:16:22.620
I think it's interesting for people in different industries or not in companies like Shutterfly to just see what kind of apps you're building.

00:16:22.620 --> 00:16:25.260
So could you give us just a quick flyover of some of the tools you're using?

00:16:25.260 --> 00:16:38.540
A lot of the stuff I build directly that I guess I consider myself a full-stack developer at Shutterfly where I build the back-end server and I also do the front-end code in JavaScript to build web applications.

00:16:39.120 --> 00:16:45.240
I've been doing a lot of that with just plain jQuery, but I'm slowly moving to React for my front-end framework.

00:16:45.240 --> 00:16:53.500
But for the back-end, I prefer to use Python Flask with gevent and SQLAlchemy as the database interface.

00:16:54.080 --> 00:17:03.900
And we try to make our stuff as asynchronous as possible because we have a lot of users, not only users, but we also have a lot of processes that communicate together.

00:17:03.900 --> 00:17:10.280
We also use a message bus system as our interconnection between processes.

00:17:10.280 --> 00:17:19.940
So rather than like we're rapidly getting to a point where we're decoupling from database access directly to using a message bus to talk to a data service.

00:17:20.200 --> 00:17:24.380
So all of the database access is sort of hidden away.

00:17:24.380 --> 00:17:31.180
There used to be a lot of like per max, not good, and we're moving away from that.

00:17:31.180 --> 00:17:36.140
And then we use like we use RabbitMQ as a database as a message system.

00:17:36.140 --> 00:17:42.400
We do a lot of – on the back-end, besides the like full-stack stuff that I do, there's a lot of processes that we run in Python.

00:17:42.400 --> 00:17:44.540
So we have a lot of twisted code.

00:17:44.540 --> 00:17:47.160
We use twisted code for asynchronous work.

00:17:47.160 --> 00:17:49.700
We also use a lot of gevent for the same thing.

00:17:49.700 --> 00:18:03.780
I know I'm more comfortable with gevent than I am with twisted, although I've written quite a bit of twisted code so that we can handle multiple – we don't do so much networking code as much as just there's multiple things in motion that take time.

00:18:03.780 --> 00:18:13.580
Like as in a production environment where stuff is getting printed and cut and bound and shipped, all those events, they're separated by time.

00:18:14.200 --> 00:18:16.140
So asynchronous code is really handy for that.

00:18:16.140 --> 00:18:16.960
So you can set something.

00:18:16.960 --> 00:18:24.900
You can set a state and then you get a call back, you know, who knows, 5, 10, 20, an hour later that it's actually finished or moved on to another state.

00:18:24.900 --> 00:18:32.860
So to be able to handle essentially thousands and thousands of those state-driven processes is really handy.

00:18:33.480 --> 00:18:39.140
That's really cool because if you tried to just wait for that response, that would be a problem.

00:18:39.140 --> 00:18:39.580
Oh, yeah.

00:18:39.580 --> 00:18:45.180
If you wait for an hour, this Flask server just won't scale.

00:18:45.180 --> 00:18:46.280
You know, I mean, we set the time on it.

00:18:46.280 --> 00:18:51.420
I'd have a bunch of production lead guys in my office stamping their feet in a heartbeat if that was the case.

00:18:51.420 --> 00:18:52.540
How interesting.

00:18:52.540 --> 00:18:58.980
When you talk about doing asynchronous stuff with Flask, is that using, say, gevent on Flask?

00:18:58.980 --> 00:19:02.180
Or are you doing, like, architecture that has queues?

00:19:02.180 --> 00:19:04.280
Well, we have a couple things.

00:19:04.280 --> 00:19:10.000
I use gevent in Flask to try to make that as – add asynchronous behavior to that.

00:19:10.000 --> 00:19:15.620
It's still – because of the database access, it still can get paused on a database call.

00:19:15.620 --> 00:19:21.460
That's one of the reasons why we are moving to – the data access is going to another process.

00:19:21.600 --> 00:19:26.180
So that other process now becomes – you know, it's handled – there's multiples of those.

00:19:26.180 --> 00:19:28.780
And it handles the database.

00:19:28.780 --> 00:19:33.420
But my call from my application or any other application can be asynchronous to that.

00:19:33.420 --> 00:19:36.460
It's no longer waiting because it's – now it's going to get a call back when it's done.

00:19:36.460 --> 00:19:37.720
Yeah, that's really cool.

00:19:37.720 --> 00:19:40.860
And it just queues up on that other system probably.

00:19:40.860 --> 00:19:43.180
It won't time out, for example, and things like that, right?

00:19:43.180 --> 00:19:46.000
Yeah, those other systems are all also entirely asynchronous.

00:19:46.000 --> 00:19:50.780
So it has a big queue of things that are ongoing and it's working on and, you know, it'll get back to you when they're done.

00:19:50.780 --> 00:19:54.240
And those come across the message bus as an event.

00:19:54.240 --> 00:20:01.780
I think it's so interesting to look at the different types of architecture choices people make based on, you know, what you're trying to do, right?

00:20:01.780 --> 00:20:05.960
You're here working with latencies in the minutes or hours.

00:20:05.960 --> 00:20:11.060
So you might choose a really different architecture, whereas people say, well, the database is kind of slow.

00:20:11.060 --> 00:20:13.780
It takes 30 milliseconds to get back to us and we want to go scaling.

00:20:13.780 --> 00:20:15.000
30 milliseconds, I laugh at that.

00:20:15.000 --> 00:20:21.820
I'll just use an – it'd be like an ASICIO event loop or something like that.

00:20:21.820 --> 00:20:23.060
That would be fine for that, right?

00:20:23.060 --> 00:20:26.060
So quite interesting to think about.

00:20:26.060 --> 00:20:27.900
So that's the backend stuff.

00:20:27.900 --> 00:20:37.740
I guess one thing I did want to ask you about when you talked about G-Event and Flask and all that, and I don't know that this would – I don't think that this would really necessarily be the right application for it.

00:20:37.740 --> 00:20:39.120
But have you looked at Quart?

00:20:39.120 --> 00:20:53.720
I have, and I've been following the ASIC stuff like SANIC and Quart, and I'm trying to get up to speed on the Python 3.7, the ASICIO, and ASIC Await stuff because in many ways, I'm moving away from really needing Flask.

00:20:53.820 --> 00:20:56.960
I mean it just – it provides a lot of features that I don't use.

00:20:56.960 --> 00:20:58.800
Like I don't do any web form validation.

00:20:58.800 --> 00:21:04.880
I'm doing all either WebSocket or AJAX calls, REST APIs.

00:21:05.200 --> 00:21:06.520
So I don't do a lot of form validation.

00:21:06.520 --> 00:21:08.640
I don't serve a lot of files.

00:21:08.640 --> 00:21:11.620
I'm mostly creating REST APIs.

00:21:11.620 --> 00:21:18.880
So I just want to make that part faster, and those things that you mentioned would do that.

00:21:18.880 --> 00:21:21.840
So I'm looking into that to take better advantage of the system.

00:21:21.840 --> 00:21:23.000
Yeah, that makes a lot of sense.

00:21:23.000 --> 00:21:29.300
And there is a lot of stuff in these web frameworks that you just don't need if the response is Flask.jsonify.

00:21:29.980 --> 00:21:34.220
For my case, I don't even serve up the web pages, the front end anymore myself.

00:21:34.220 --> 00:21:36.460
That's done by a dedicated web server.

00:21:36.460 --> 00:21:42.820
So my application is strictly – has turned into a REST API.

00:21:42.820 --> 00:21:48.780
That's a really interesting place for people to work who want to work on the web, but they are not designers.

00:21:48.780 --> 00:21:49.000
Yeah.

00:21:49.000 --> 00:21:49.500
Right?

00:21:49.500 --> 00:21:56.260
They don't want to try to do all the CSS and layout and make it pretty and put the hero banner on there and all that stuff.

00:21:56.260 --> 00:22:02.220
There's still some really interesting and challenging programming to be done building this back-end layer, I think.

00:22:02.220 --> 00:22:03.460
Yeah, I absolutely agree.

00:22:03.460 --> 00:22:11.340
I am currently working on this gigantic project, which is this REST API that drives a big part of our business.

00:22:11.340 --> 00:22:20.340
And I find that part – it's challenging because I'm always negotiating with the front-end guys about what the payload looks like and what the back-and-forth looks like.

00:22:20.640 --> 00:22:26.520
I also enjoy the front-end because that gives me – then I'm arguing with myself about what's the best way to get this data across.

00:22:26.520 --> 00:22:29.040
But also, I really enjoy the GUI part.

00:22:29.040 --> 00:22:32.600
I used to be a – for a short time, I was a Windows developer.

00:22:33.360 --> 00:22:41.760
And I like that user interaction and trying to figure out what's the best way to present this activity to make my user's life easier.

00:22:41.760 --> 00:22:44.100
And they often thwart me, but –

00:22:44.100 --> 00:22:44.240
Yeah.

00:22:44.240 --> 00:22:45.140
What –

00:22:45.140 --> 00:22:47.200
Hey, we'll try.

00:22:47.200 --> 00:22:49.960
What frameworks did you use to build GUI?

00:22:49.960 --> 00:22:51.380
Well, that was way back in the day.

00:22:51.380 --> 00:22:55.260
I was using Windows 32, the raw Windows 32 API.

00:22:55.260 --> 00:22:56.380
So it was a nightmare.

00:22:56.580 --> 00:23:00.620
Oh, so you were down at the Charles Petzl Win32 layer, huh?

00:23:00.620 --> 00:23:01.180
Oh, yeah.

00:23:01.180 --> 00:23:01.720
Wow.

00:23:01.720 --> 00:23:02.580
That's no VB.

00:23:02.580 --> 00:23:03.620
Yeah, you don't mess around.

00:23:03.620 --> 00:23:05.820
You go straight to a simulated learn programming.

00:23:05.820 --> 00:23:08.620
You go to, like, the Win32 API to do GUIs.

00:23:08.620 --> 00:23:09.040
That's awesome.

00:23:09.040 --> 00:23:09.980
Okay.

00:23:09.980 --> 00:23:17.520
So you said also that the front-end stuff had been jQuery and jQuery UI, but that you were all moving on to React, right?

00:23:17.520 --> 00:23:18.420
Yeah, there's a couple groups.

00:23:18.420 --> 00:23:33.860
There's, I think, another group in the company that's doing Angular, but the stuff that we're working on for the back-end applications is in React and then using an API to manage the conversation, but back and forth to the actual data representations.

00:23:33.860 --> 00:23:36.480
Right, talking to stuff like the API tree building.

00:23:36.480 --> 00:23:39.320
So how do you decide upon React?

00:23:39.320 --> 00:23:41.960
I mean, I actually am still a bit of a fan of jQuery.

00:23:41.960 --> 00:23:44.320
I just want, like, a little tiny bit of interaction.

00:23:44.320 --> 00:23:46.380
Like, jQuery actually is not too bad.

00:23:46.380 --> 00:23:47.700
It doesn't have all this setup.

00:23:47.700 --> 00:23:48.440
Set the apps.

00:23:48.440 --> 00:23:49.080
Set the models.

00:23:49.080 --> 00:23:53.620
I mean, if you're building real apps, then React and all these things are cool.

00:23:53.620 --> 00:23:55.760
But I still have some love for jQuery.

00:23:55.760 --> 00:23:57.320
But tell me about why you chose React.

00:23:57.320 --> 00:24:06.860
Well, I'll have to send you a link because I actually just gave a presentation at the last Engineering All Hands about there's still a place in the world for simple jQuery applications.

00:24:06.860 --> 00:24:11.260
And I'll have to send you a link to that because I still like that.

00:24:11.260 --> 00:24:12.220
Yeah, yeah, we'll put it in the show notes.

00:24:12.220 --> 00:24:14.320
Because it's one of the reasons I like it.

00:24:14.320 --> 00:24:14.880
It's quick.

00:24:14.880 --> 00:24:17.200
You can get a prototype up and running very fast.

00:24:17.200 --> 00:24:25.640
And it's not so costly in time that you wouldn't want to throw it away if it gets popular to rebuild it in something else, which is handy.

00:24:25.640 --> 00:24:29.420
But React was – I was actually going down the path of Angular.

00:24:29.420 --> 00:24:33.760
And then, you know, we sort of switched gears and I jumped on React.

00:24:33.760 --> 00:24:39.620
And, well, anybody who's done this kind of work probably has come from another – who's come from another world.

00:24:39.620 --> 00:24:42.860
You know, you wait five minutes in the JavaScript world and there's another framework out there.

00:24:42.860 --> 00:24:46.380
It took me a long time to actually jump on board.

00:24:46.380 --> 00:24:53.720
But I like the conceptual nature of – or the concept behind React where you have components that you can glue together.

00:24:53.720 --> 00:24:59.520
And those components can have a visual and a behavior aspect to them.

00:24:59.680 --> 00:25:04.380
Yeah, it's almost like the control programming model of, like, the older Windows systems and stuff.

00:25:04.380 --> 00:25:08.740
Where you can – you know, I'm going to buy a grid control and I drop it here and now it does grid stuff.

00:25:08.740 --> 00:25:16.760
That appealed to me because I had written – you know, writing a lot of jQuery code, you're sort of – this is a way I like to make my page look with HTML and CSS.

00:25:17.460 --> 00:25:22.120
And then I'm sort of, you know, I'm bolting behavior to it with a –

00:25:22.120 --> 00:25:24.780
It is non-obvious where that behavior comes from in jQuery.

00:25:24.780 --> 00:25:27.660
It's like I know it's hooking an event somewhere and I cannot figure that out.

00:25:27.660 --> 00:25:33.040
Well, I've written some really huge jQuery applications and they're still being used.

00:25:33.040 --> 00:25:36.240
And whenever anybody wants to add features to that, I'm, like, cringing.

00:25:36.240 --> 00:25:37.860
I'm like, oh, no, please no.

00:25:37.860 --> 00:25:42.340
Because there's so many side effects and ripples when you change things.

00:25:42.340 --> 00:25:44.520
So it gets to riddle after a while.

00:25:44.520 --> 00:25:45.920
I just reorganized it.

00:25:45.920 --> 00:25:47.680
I put inside this div and it just stopped working.

00:25:47.680 --> 00:25:48.380
Thanks.

00:25:48.380 --> 00:25:49.120
I know.

00:25:49.120 --> 00:25:49.960
I know.

00:25:49.960 --> 00:25:50.960
Thanks for that.

00:25:50.960 --> 00:25:52.660
Let's not do that.

00:25:52.660 --> 00:25:57.640
But React seems more – I mean, I like the module system so that you can actually break it.

00:25:57.640 --> 00:26:02.640
I like JavaScript.

00:26:02.640 --> 00:26:08.060
And to me, in many ways, I know people don't like JavaScript who come from other languages.

00:26:08.060 --> 00:26:15.700
But to me, it feels very complementary to Python, the whole idea of objects and arrays and the for each and all that kind of stuff.

00:26:15.700 --> 00:26:25.440
And now that things like React and Angular, React in particular, has these idea of web components that have look and feel and behavior,

00:26:25.960 --> 00:26:30.960
that feels like a real way to program a GUI, especially –

00:26:30.960 --> 00:26:31.620
Yeah.

00:26:31.620 --> 00:26:32.380
Yeah.

00:26:32.520 --> 00:26:36.160
It looks like a web platform as an application platform to deliver stuff.

00:26:36.160 --> 00:26:36.800
Yeah.

00:26:36.800 --> 00:26:37.520
That's interesting.

00:26:37.520 --> 00:26:43.420
Have you thought about writing any desktop apps with, say, Electron.js?

00:26:43.420 --> 00:26:43.980
I have.

00:26:43.980 --> 00:26:49.960
I'm looking into that using – in my case, because I'm trying to get smarter on React, I'm thinking of React Native.

00:26:50.520 --> 00:26:54.600
But I've seen some stuff written in Electron, and it's all very interesting.

00:26:54.600 --> 00:26:56.880
And I want to get there because I like that stuff.

00:26:56.880 --> 00:26:57.640
It's really interesting.

00:26:57.640 --> 00:27:00.340
I wish it had an option for a Python backend.

00:27:00.340 --> 00:27:00.980
Yeah.

00:27:00.980 --> 00:27:06.560
And I just discovered – one of the listeners from the Python Bytes podcast sent me this thing.

00:27:06.560 --> 00:27:12.980
It's more of a way to work with Electron that has a Python backend instead of Node.js.

00:27:12.980 --> 00:27:13.140
Oh, neat.

00:27:13.660 --> 00:27:16.620
And you get it – install it natively on the system.

00:27:16.620 --> 00:27:18.380
It's called Python Electron.

00:27:18.380 --> 00:27:18.920
Yeah.

00:27:18.920 --> 00:27:19.700
I'll put that in the show notes.

00:27:19.700 --> 00:27:22.680
I wish it was called Proton because Electron, Proton, Python.

00:27:22.680 --> 00:27:25.600
But a name is missed here.

00:27:25.600 --> 00:27:27.780
But it's really quite interesting.

00:27:28.040 --> 00:27:35.360
And I think you could take React and the JavaScript and HTML and pair that with this Electron Python backend.

00:27:35.360 --> 00:27:35.980
It would be very smart.

00:27:35.980 --> 00:27:43.680
Oh, I think that would be great because I've written WX Python applications, which is a lot of fun.

00:27:43.680 --> 00:27:45.920
It reminds me a lot of my Windows programming days.

00:27:45.920 --> 00:27:48.740
And they're really cool, but they're so hard to port.

00:27:48.740 --> 00:27:54.800
They're so hard to give to somebody because there's so much stuff you have to install that's very specific for the target platforms.

00:27:54.800 --> 00:27:55.720
Right.

00:27:55.720 --> 00:27:57.500
Make sure you have Python 3.4.

00:27:57.700 --> 00:27:59.140
And then you're going to need to do this.

00:27:59.140 --> 00:28:01.500
And then you've got to pip it like, whoa, this is not how I get an app.

00:28:01.500 --> 00:28:02.840
I get it from the app store or something.

00:28:02.840 --> 00:28:11.680
And then if actually somebody adopts it, any kind of update process to put changes out there is almost impossibly painful.

00:28:11.680 --> 00:28:12.720
Yeah.

00:28:12.720 --> 00:28:13.280
Yeah, yeah.

00:28:13.280 --> 00:28:16.880
So this Electron Python would have its own auto-updating system and stuff.

00:28:16.880 --> 00:28:17.660
It would be really neat.

00:28:17.660 --> 00:28:20.400
And you package it all up and it's .app or .exe.

00:28:20.400 --> 00:28:21.440
Yeah, that would be nice.

00:28:21.440 --> 00:28:22.600
I'll have to dig into that.

00:28:22.600 --> 00:28:23.860
I'm looking forward to that.

00:28:23.860 --> 00:28:24.900
Yeah, yeah.

00:28:24.900 --> 00:28:25.380
I'll put a link.

00:28:25.380 --> 00:28:25.580
Cool.

00:28:25.580 --> 00:28:25.920
Thank you.

00:28:26.200 --> 00:28:34.360
Yeah, so when I was thinking of JavaScript front-end stuff, I'm kind of thinking about Vue.js as probably where I would like to work.

00:28:34.360 --> 00:28:38.540
Although I don't have any intention to do tons of rich front-end work right now.

00:28:38.540 --> 00:28:40.820
But, yeah, there's a lot of good choices.

00:28:40.820 --> 00:28:44.740
But like you said, by the time this episode ships, there's going to be another one.

00:28:44.740 --> 00:28:48.500
Well, a lot of the stuff I wrote was a whole combination of jQuery plugins.

00:28:48.500 --> 00:28:52.120
I used jQuery, jQuery UI, data tables.

00:28:52.120 --> 00:28:57.340
I used handlebars a lot to do templates within jQuery and HTML.

00:28:57.340 --> 00:28:59.160
So it was a whole pile of stuff.

00:28:59.280 --> 00:29:05.180
But it gets to be difficult to make the apps look consistent, one app to the next.

00:29:05.180 --> 00:29:06.940
That gets to be hard to manage.

00:29:06.940 --> 00:29:07.280
Yeah.

00:29:07.280 --> 00:29:08.600
Maybe I'll have to check out React.

00:29:08.600 --> 00:29:09.520
It sounds pretty good.

00:29:09.520 --> 00:29:10.580
I think you'll like it.

00:29:10.580 --> 00:29:12.200
I know Angular.

00:29:12.340 --> 00:29:14.240
I was working with Angular, and I really liked that.

00:29:14.240 --> 00:29:20.320
One of the big concepts with Angular is it feels like they're trying to add functionality to HTML.

00:29:20.320 --> 00:29:24.220
And one of the differences I see with React is it's the exact opposite.

00:29:24.220 --> 00:29:26.480
They're trying to add HTML to functionality.

00:29:26.480 --> 00:29:28.660
So it's like embedding HTML into JavaScript.

00:29:28.660 --> 00:29:30.520
Conceptually, it's a little different.

00:29:30.520 --> 00:29:37.140
But one of the things I had trouble with was in Angular, it's sort of dependent on TypeScript, which I really like TypeScript.

00:29:37.760 --> 00:29:46.600
But if you look at the code that's generated by that when it does the transpiling, thank God there's TypeScript because I definitely would not want to write that JavaScript.

00:29:46.600 --> 00:29:48.860
Yeah.

00:29:48.860 --> 00:29:49.960
TypeScript is interesting.

00:29:49.960 --> 00:29:54.100
It has a lot of parallels back to the type annotations in Python 3.

00:29:54.100 --> 00:30:02.420
But TypeScript, one of the things I'm not a fan of with TypeScript is it's a little more serious about the types.

00:30:02.420 --> 00:30:04.760
Python is like, these types are here to help you.

00:30:05.460 --> 00:30:08.600
If they get in the way, you can kind of just pretend they're not there.

00:30:08.600 --> 00:30:13.220
Whereas TypeScript, it's like, no, you haven't declared this variable type that's in another file.

00:30:13.220 --> 00:30:14.460
You know, it really is.

00:30:14.460 --> 00:30:15.200
It can be a thing.

00:30:15.200 --> 00:30:19.920
It gets to start to feel like C or Java in that way, that it's very strict typing.

00:30:19.920 --> 00:30:21.020
Yeah, it really is.

00:30:21.020 --> 00:30:26.180
But there's a lot of potential, a lot of potential with types, especially in the Python stuff.

00:30:26.180 --> 00:30:29.040
We have Cython now understanding Python 3 types.

00:30:29.040 --> 00:30:36.140
And then Dropbox is now talking about mypyC, which will take type annotated Python and compile it to C code.

00:30:36.140 --> 00:30:41.640
I think that you guys mentioned that on either Talk Python To Me or in Python Bytes, you mentioned that at one time.

00:30:41.640 --> 00:30:42.020
Yeah.

00:30:42.020 --> 00:30:43.960
Yeah, I think in Python Bytes we did.

00:30:43.960 --> 00:30:45.180
Yeah, that's really new.

00:30:45.180 --> 00:30:46.260
And I think that's quite interesting.

00:30:46.260 --> 00:30:46.540
Yes, absolutely.

00:30:47.320 --> 00:30:55.200
So I think that leads into another area that you are passionate about is talking about whether it's Python, is it slow?

00:30:55.200 --> 00:30:56.980
Does it perform well?

00:30:56.980 --> 00:30:58.260
Is it going to solve your problems, right?

00:30:58.260 --> 00:31:00.260
Like how do you measure performance anyway?

00:31:00.260 --> 00:31:01.520
Well, that's the thing.

00:31:01.520 --> 00:31:05.780
I mean, people, you know, from my embedded days, I know I'm a speed freak.

00:31:05.780 --> 00:31:07.780
I want this thing to go as fast as possible.

00:31:07.780 --> 00:31:09.740
You started out in assembly, right?

00:31:09.740 --> 00:31:10.220
I mean, come on.

00:31:10.220 --> 00:31:10.820
Yeah, right.

00:31:10.820 --> 00:31:13.900
Every cycle counts on these little tiny machines.

00:31:14.500 --> 00:31:18.720
But I'm a big believer in there's no sense in optimizing unless you measure.

00:31:18.720 --> 00:31:21.400
And the other part of that is you have to have a target.

00:31:21.400 --> 00:31:23.360
Like what does fast mean to you?

00:31:23.360 --> 00:31:25.240
How fast does this have to be?

00:31:25.240 --> 00:31:26.640
And why?

00:31:26.640 --> 00:31:28.060
Why do you need it to be fast?

00:31:28.060 --> 00:31:41.640
I think I've proven to myself many, many times more than I care to remember that every place that I think things are slow and I spend time optimizing it, I'm completely wrong about what makes the code slow by my intuition.

00:31:41.860 --> 00:31:49.380
It's only by measuring that you find out this is where it's important to speed things up because you could spend a lot of time speeding up something that gets called once a day.

00:31:49.380 --> 00:31:50.960
I've seen that happen plenty.

00:31:51.420 --> 00:31:59.820
It's so easy to get the wrong impression because you see code that is complicated and you're like, that must be it because that looks super hard for me to understand.

00:31:59.820 --> 00:32:02.260
But it's no, no, no.

00:32:02.260 --> 00:32:04.360
You should have used a set instead of a list here.

00:32:04.960 --> 00:32:10.360
Or something entirely trivial and it's just you would know if you had looks.

00:32:10.360 --> 00:32:16.180
And if you're building a 24-7 server, that thing has a long life.

00:32:16.180 --> 00:32:20.880
So there's lots of opportunities where things don't – they get called once an hour, once a day.

00:32:20.880 --> 00:32:22.680
It's not that big a deal.

00:32:23.160 --> 00:32:27.060
And it's very important to say, okay, where is this thing spending most of its time?

00:32:27.060 --> 00:32:27.620
Is it busy?

00:32:27.620 --> 00:32:32.880
And in my world today, there's lots – like I said, there's events that are minutes, hours apart.

00:32:32.880 --> 00:32:36.540
So I need to pay attention to what matters.

00:32:36.800 --> 00:32:44.900
Right, and if the part that instantiates the hour-long process takes an extra 10 milliseconds but it's easier to understand, let's not stress, right?

00:32:44.900 --> 00:32:50.740
Because you could write – even in Python, you could write some obtuse code and I don't really want to read that again.

00:32:50.740 --> 00:32:51.060
Oh, yeah.

00:32:51.060 --> 00:32:54.400
And the other thing is that computers are so fast.

00:32:54.400 --> 00:33:03.340
I mean it's long – we long since passed the tipping point where the computer's cycle time is more expensive than mine.

00:33:03.340 --> 00:33:05.580
My cycle time is much more expensive.

00:33:05.700 --> 00:33:07.660
In fact, my cycle rate is very slow.

00:33:07.660 --> 00:33:11.740
So being able to develop code quickly is really important.

00:33:11.740 --> 00:33:12.320
It's important.

00:33:12.320 --> 00:33:13.200
You're absolutely right.

00:33:13.200 --> 00:33:15.960
I totally agree with you on what are we optimizing for.

00:33:15.960 --> 00:33:22.480
Are we optimizing for the computer or for the business or the project or the product or whatever it is, right?

00:33:22.480 --> 00:33:32.400
Like if you can add two more features to your website a month but you pay an extra $20 in hosting, who cares?

00:33:32.400 --> 00:33:32.680
Yeah, exactly.

00:33:32.680 --> 00:33:33.080
Right?

00:33:34.220 --> 00:33:47.000
Yeah, if I can get something forever that meets some target window, marketing window or product window, that's far more important than if I'm saving a millisecond here or there by thinking of some crazy way of doing things.

00:33:47.000 --> 00:33:47.380
Right.

00:33:47.380 --> 00:33:48.560
Or say, forget it.

00:33:48.560 --> 00:33:49.120
We're going to go.

00:33:49.120 --> 00:33:50.340
Or forget it.

00:33:50.340 --> 00:33:51.180
We're going to write it and see.

00:33:52.180 --> 00:33:54.580
I think there's a couple of interesting options there.

00:33:54.580 --> 00:33:56.820
One, you say you need to measure and see what's working.

00:33:56.820 --> 00:34:05.580
Like you could rewrite the two slow functions if they're, you know, computationally slow in Cython and probably make those go nearly to zero.

00:34:05.580 --> 00:34:06.040
Yeah, exactly.

00:34:06.040 --> 00:34:07.140
Something crazy like that.

00:34:07.140 --> 00:34:12.720
And just a tiny bit and not have to completely re, you know, throw the baby out with the bad boy sort of thing.

00:34:12.720 --> 00:34:22.560
Oh, I often find that idea of adding like the optimization flag to see gives you like really incremental improvements versus doing algorithmic optimization.

00:34:22.560 --> 00:34:23.820
Like I'm improving the algorithm.

00:34:23.820 --> 00:34:28.760
My data structure is better where you get orders of magnitude improvement in speed.

00:34:29.040 --> 00:34:33.640
Yeah, yeah, you choose the wrong data structure, not just the algorithm, even just the wrong data structure.

00:34:33.640 --> 00:34:37.440
And it could be a thousand times slower because you said, well, I always put stuff in a list.

00:34:37.440 --> 00:34:41.160
But really what I wanted was a dictionary because I'm randomly looking up stuff.

00:34:41.160 --> 00:34:42.360
I'm not looking it up by index.

00:34:42.360 --> 00:34:42.980
Right, exactly.

00:34:42.980 --> 00:34:44.980
Yeah, pretty interesting.

00:34:44.980 --> 00:34:50.720
This portion of Talk Python To Me is brought to you by Rollbar.

00:34:50.720 --> 00:34:52.120
Got a question for you.

00:34:52.120 --> 00:34:54.840
Have you been outsourcing your bug discovery to your users?

00:34:54.840 --> 00:34:57.480
Have you been making them send you bug reports?

00:34:57.760 --> 00:34:59.180
You know, there's two problems with that.

00:34:59.180 --> 00:35:01.160
You can't discover all the bugs this way.

00:35:01.160 --> 00:35:03.720
And some users don't bother reporting bugs at all.

00:35:03.720 --> 00:35:05.620
They just leave, sometimes forever.

00:35:05.620 --> 00:35:09.420
The best software teams practice proactive error monitoring.

00:35:09.420 --> 00:35:17.800
They detect all the errors in their production apps and services in real time and debug important errors in minutes or hours, sometimes before users even notice.

00:35:17.800 --> 00:35:22.900
Teams from companies like Twilio, Instacart, and CircleCI use Rollbar to do this.

00:35:22.900 --> 00:35:26.880
With Rollbar, you get a real-time feed of all the errors.

00:35:27.040 --> 00:35:28.980
So you know exactly what's broken in production.

00:35:28.980 --> 00:35:36.180
And Rollbar automatically collects all the relevant data and metadata you need to debug the errors so you don't have to sift through logs.

00:35:36.180 --> 00:35:40.140
If you aren't using Rollbar yet, they have a special offer for you, and it's really awesome.

00:35:40.140 --> 00:35:44.640
Sign up and install Rollbar at talkpython.fm/Rollbar.

00:35:45.200 --> 00:35:56.660
And Rollbar will send you a $100 gift card to use at the Open Collective, where you can donate to any of the 900-plus projects listed under the Open Source Collective or to the Women Who Code organization.

00:35:56.660 --> 00:36:00.300
Get notified of errors in real time and make a difference in Open Source.

00:36:00.560 --> 00:36:03.200
Visit talkpython.fm/Rollbar today.

00:36:04.960 --> 00:36:09.260
Another thing that you spoke about was that you're not the youngest programmer.

00:36:09.260 --> 00:36:11.340
You said you started out in the 80s, right?

00:36:11.340 --> 00:36:16.180
And this is something I'm passionate about because running the podcast, people reach out to me a lot and say,

00:36:16.180 --> 00:36:17.820
Michael, I'm 40.

00:36:17.820 --> 00:36:18.760
It's too late for me.

00:36:18.820 --> 00:36:20.320
I can't do any of this programming stuff.

00:36:20.320 --> 00:36:22.560
Like, programming is for young folks.

00:36:22.560 --> 00:36:25.200
I myself am, you know, not especially young.

00:36:25.200 --> 00:36:28.740
But I see the programming space as quite vibrant for people.

00:36:28.740 --> 00:36:35.300
I teach at this STEM school, STEM education place near me, and I teach programming Python to kids there.

00:36:35.300 --> 00:36:36.820
And I've written some material there.

00:36:36.820 --> 00:36:40.020
And I've been trying to – I've been twisting the guy who runs the place.

00:36:40.020 --> 00:36:46.080
I've been twisting his arm to think about that he really needs – he really should market to older adults

00:36:46.080 --> 00:36:52.580
because I think that this is – you know, like they say, like, crossword puzzles is a good way to keep your mind sharp.

00:36:52.580 --> 00:36:55.620
I think this is, like, the greatest crossword puzzle ever is kind of programming.

00:36:55.620 --> 00:36:56.320
Yes.

00:36:56.320 --> 00:36:56.840
And it's –

00:36:56.840 --> 00:36:57.960
It absolutely is.

00:36:57.960 --> 00:37:01.880
It's so engaging and you have to think deeply.

00:37:01.880 --> 00:37:04.980
It's better than video games.

00:37:04.980 --> 00:37:06.520
It's certainly better than Sudoku.

00:37:06.520 --> 00:37:08.000
Oh, yeah.

00:37:08.000 --> 00:37:09.300
Yeah, absolutely.

00:37:09.300 --> 00:37:14.520
And it's – with languages like Python and, you know, some of the other modern scripting languages, it's so accessible.

00:37:15.420 --> 00:37:19.080
There's no – there's no, you know, the whole – I would never want to.

00:37:19.080 --> 00:37:23.020
I mean, I really considered myself a very strong C++ programmer.

00:37:23.020 --> 00:37:31.580
But I would never want to start there again because the whole idea of the linker and the include files was just – would make you crazy as a novice programmer.

00:37:31.580 --> 00:37:35.380
Remember the times when the header and the .lib file would get out of sync?

00:37:35.380 --> 00:37:35.740
Yes.

00:37:35.740 --> 00:37:39.020
And it would just not – you're like, why is this just crashing randomly?

00:37:39.020 --> 00:37:40.420
Like, I don't even understand.

00:37:40.420 --> 00:37:41.860
Like, so glad that problem's gone.

00:37:41.860 --> 00:37:42.380
Oh, yeah, me too.

00:37:42.700 --> 00:37:45.720
I don't want to – I mean, I like that stuff, but I don't want to go back there.

00:37:45.720 --> 00:37:46.660
Yeah, for sure.

00:37:46.660 --> 00:37:51.420
I think this is a really interesting idea of having a programming class for older adults.

00:37:51.420 --> 00:38:00.220
You know, Philip Guo, who was at UCSD, I had him on Talk Python a while ago about programming in your golden years.

00:38:00.360 --> 00:38:08.820
And said a lot of folks who were starting to retire and were learning programming actually were doing so to connect with their grandchildren.

00:38:08.820 --> 00:38:12.840
Because their grandchildren were in Minecraft or they wanted to do, like, robots.

00:38:12.840 --> 00:38:14.520
And they're like, well, I'd like to do that with them.

00:38:14.520 --> 00:38:17.580
Apparently, that requires programming like JavaScript and Python.

00:38:17.580 --> 00:38:18.860
So I'm learning it, right?

00:38:18.860 --> 00:38:19.040
Yeah.

00:38:19.760 --> 00:38:21.920
I had taught – this is a stupid story.

00:38:21.920 --> 00:38:27.320
But years ago, I had taught a couple of adult ed classes to help people get into Windows and DOS.

00:38:27.320 --> 00:38:28.700
This is how far back it goes.

00:38:28.700 --> 00:38:29.880
And I would be up there.

00:38:29.880 --> 00:38:30.700
You know, I'd be talking.

00:38:30.700 --> 00:38:31.740
I would be talking about something.

00:38:31.740 --> 00:38:33.640
And it invariably would happen.

00:38:33.640 --> 00:38:35.920
I would say, okay, I want you to enter this command.

00:38:35.920 --> 00:38:37.960
And I'd turn to the whiteboard and I'd write on the whiteboard.

00:38:38.440 --> 00:38:44.980
And behind me, I'd hear this beep, beep, as people were restarting their computers because they had typed something wrong.

00:38:44.980 --> 00:38:47.160
Oh, my God.

00:38:47.160 --> 00:38:49.280
Because they were so afraid of getting it wrong.

00:38:49.280 --> 00:38:50.480
I'm like, no, you can't hurt it.

00:38:50.480 --> 00:38:51.580
Just go with it.

00:38:51.580 --> 00:38:52.060
Yeah.

00:38:52.060 --> 00:38:57.760
Unless you write format, you know, C colon slash Y or something, you're going to be fine.

00:38:57.760 --> 00:38:58.140
You're okay.

00:38:59.980 --> 00:39:11.740
And for me personally, you know, I committed to – as I came to it late and I committed to – I'm a self-taught programmer and was always – and I've changed languages a lot.

00:39:11.740 --> 00:39:12.840
But I had to learn new languages.

00:39:12.840 --> 00:39:16.800
So I committed to this sort of constant learning idea early.

00:39:16.800 --> 00:39:19.440
And I've stayed with it my whole career.

00:39:19.440 --> 00:39:24.040
And it's really paid off because I'm still able to learn new things.

00:39:24.040 --> 00:39:25.480
I'm learning new things all the time.

00:39:25.480 --> 00:39:27.100
It works like I'm learning React, for instance.

00:39:27.100 --> 00:39:29.800
And a little bit of Erlang, for crying out loud.

00:39:29.800 --> 00:39:30.880
Wow.

00:39:30.880 --> 00:39:42.280
But it's because of – you know, there's this habit that I have – that I learn constantly that I'm able to stay competitive and be – and contribute to a team of mostly younger guys.

00:39:42.280 --> 00:39:48.460
And, you know, mentor people based on my experience and able to learn from people.

00:39:48.460 --> 00:39:51.380
So I hope that I'm not overbearing about that.

00:39:51.380 --> 00:39:57.180
But I'm able to learn from other people because there's a lot of people who are – they have – you know, they don't even know what assembly language is.

00:39:57.260 --> 00:40:01.000
But they have a valuable skill that I want to learn and know about.

00:40:01.000 --> 00:40:01.820
Yeah, absolutely.

00:40:01.820 --> 00:40:10.800
Do you feel like being a self-taught programmer was maybe harder in the beginning but has paid off now that you sort of force yourself to be able to figure it all out?

00:40:10.800 --> 00:40:11.080
Yeah.

00:40:11.080 --> 00:40:17.780
When I moved into software development full-time from – it was the same company I was doing the process controller work.

00:40:17.780 --> 00:40:19.240
I moved to their software group.

00:40:19.240 --> 00:40:23.600
And all those guys had MSs and doctorates in computer science.

00:40:23.600 --> 00:40:28.040
And so I was playing catch-up all the time on Fortran and C programming.

00:40:28.800 --> 00:40:30.220
And so I worked really hard.

00:40:30.220 --> 00:40:32.600
One of the things I did, my boss was a very sharp guy.

00:40:32.600 --> 00:40:34.420
And I would hit a problem.

00:40:34.420 --> 00:40:40.160
You know, my goal all the time was like I would work at it, work at it, work at it before I go ask him a question.

00:40:40.160 --> 00:40:45.320
The deal was – and I would try to make it so he didn't answer the question within one minute.

00:40:45.320 --> 00:40:48.720
And I – in five years, I failed every time.

00:40:48.720 --> 00:40:54.140
He would – but at least, you know, I did the work to ask intelligent questions to get there.

00:40:54.140 --> 00:40:54.940
Yeah.

00:40:54.940 --> 00:40:56.160
That's a really good point.

00:40:56.160 --> 00:40:59.640
You know, I'm also more or less a self-taught programmer.

00:40:59.640 --> 00:41:05.560
I took, you know, a couple of programming classes, C++, Fortran in college and stuff.

00:41:05.560 --> 00:41:07.140
But for the most part, I studied math.

00:41:07.140 --> 00:41:17.440
And I feel like there was always this little bit of imposter syndrome feeling like, well, I know – are we talking about like, you know, what happens deep down in the operating system?

00:41:17.440 --> 00:41:19.000
Well, I didn't take the operating system class.

00:41:19.000 --> 00:41:20.800
I don't know maybe as well as that person, right?

00:41:20.800 --> 00:41:26.020
But I know that I taught myself all of this programming stuff.

00:41:26.020 --> 00:41:29.160
And there's basically nothing that scares me.

00:41:29.160 --> 00:41:29.420
Right.

00:41:29.420 --> 00:41:29.920
Well, not nothing.

00:41:29.920 --> 00:41:36.180
But not much that scares me because it's like, well, I've come this far by forcing myself to do it.

00:41:36.180 --> 00:41:44.000
And you just – like you said, you get into this habit of I spent the last 10 years just continuously learning these things and making these steps.

00:41:44.000 --> 00:41:47.620
And so I know to get to wherever you want to be, it's like just more steps.

00:41:47.620 --> 00:41:48.080
Absolutely.

00:41:48.080 --> 00:41:53.920
And those two things, they drive me pretty hard to constantly learn stuff that I don't know.

00:41:53.920 --> 00:41:55.700
But I also know myself.

00:41:55.700 --> 00:41:57.560
I'm an applications engineer.

00:41:57.560 --> 00:41:59.400
I need to apply this stuff.

00:41:59.640 --> 00:42:06.500
So, you know, red, black trees and that kind of, you know, AVL automatic balancing stuff is like – I mean, yeah, okay.

00:42:06.500 --> 00:42:07.980
I'm just going to throw a dictionary at that.

00:42:07.980 --> 00:42:08.680
It solves the problem.

00:42:08.680 --> 00:42:10.000
Yeah.

00:42:10.080 --> 00:42:12.420
So there's gaps in my knowledge that I don't have.

00:42:12.420 --> 00:42:17.100
But on the other hand, I haven't run into too many cases in a long career where I've really needed that stuff.

00:42:17.100 --> 00:42:21.740
So for me, I just – I need to know the stuff that is applicable to my job.

00:42:21.740 --> 00:42:22.160
Yeah.

00:42:22.160 --> 00:42:27.220
You know, a lot of people who take computer science have to do things like calculus and differential equations and stuff.

00:42:27.220 --> 00:42:30.660
I don't know many programmers who still do differential equations.

00:42:30.660 --> 00:42:31.640
I know there are some.

00:42:31.640 --> 00:42:31.820
Yeah.

00:42:31.820 --> 00:42:33.800
But not most of them, right?

00:42:33.860 --> 00:42:36.940
Most of it, it's like, well, algebra, maybe a little geometry, maybe.

00:42:36.940 --> 00:42:39.920
Well, sometimes I make this joke at work all the time.

00:42:39.920 --> 00:42:45.080
Like they often lean on math teachers to be the computer teachers at schools.

00:42:45.080 --> 00:42:47.940
And I'm like, yeah, I don't know if that's the right choice.

00:42:47.940 --> 00:42:53.280
Sometimes I think it should be English majors because most of my life is tearing apart strings all day.

00:42:53.280 --> 00:42:55.620
That's true.

00:42:55.620 --> 00:42:57.340
It is a lot of text, isn't it?

00:42:57.340 --> 00:42:58.060
It's a lot of text.

00:42:58.060 --> 00:43:03.320
So, but while we have a little bit of time left, I'd like to talk about some of the articles that you've written.

00:43:03.820 --> 00:43:05.620
Because, like I said, that's how I got to know you.

00:43:05.620 --> 00:43:10.800
You said a big part of your day-to-day work is working on these REST APIs with Flask.

00:43:10.800 --> 00:43:18.660
And you wrote a couple articles on realpython.com about connection with an X for REST APIs.

00:43:18.660 --> 00:43:23.160
Do you want to tell us about the articles and maybe give us a little overview of what connection is and how it's helpful?

00:43:23.160 --> 00:43:23.560
Yeah.

00:43:23.560 --> 00:43:32.940
I started using it because as I was moving away from all of the form validation and stuff like that and getting more into writing REST APIs,

00:43:33.780 --> 00:43:36.940
I was looking for ways to make that nicer, make that cleaner.

00:43:36.940 --> 00:43:40.440
And actually, another guy introduced me to Connexion.

00:43:40.440 --> 00:43:43.780
And that is a really nice tool.

00:43:43.780 --> 00:43:45.300
It does two things that I really like.

00:43:45.800 --> 00:43:55.680
Besides providing the automatic interactive documentation through the Swagger UI system, the configuration file that drives it is a nice way to think about the API.

00:43:55.680 --> 00:44:04.600
So, you can sort of structure what the API is going to look at, look like, and what it's going to accept long before you get into code.

00:44:04.840 --> 00:44:10.340
Because you can really go down a rabbit hole where you're like, okay, I'm focused on the code for this one endpoint, this URL endpoint.

00:44:10.340 --> 00:44:21.000
And you can get to a point where you're like, oh, you know, if you looked at the API as just a list of URLs, they could look like a real mess and not make much sense.

00:44:21.000 --> 00:44:29.840
And Swagger, or excuse me, Connexion helps you think about that in, I think, much clearer ways and structure the system.

00:44:29.840 --> 00:44:37.480
Plus, whenever I've shown off, whenever I show off my stuff and I show the Swagger UI, everybody's really impressed.

00:44:37.860 --> 00:44:49.900
It's helped the front-end guys to be able to look at the API and use it without actually having to write any code themselves and see how it behaves and what it's expecting, what it returns, that kind of thing.

00:44:49.900 --> 00:44:52.460
And that's been very powerful.

00:44:52.460 --> 00:44:54.500
Yeah, the documentation is really cool, actually.

00:44:54.500 --> 00:44:56.220
Yeah, it's fantastic.

00:44:56.220 --> 00:45:04.640
Because, you know, I definitely prefer the REST APIs over other options that have been popular, like SOAP services and stuff.

00:45:04.740 --> 00:45:11.180
But one of the things about those bad SOAP services is you could ask it what functions were there and what you're supposed to do with them, right?

00:45:11.180 --> 00:45:20.420
Whereas, like, an arbitrary HTTP API, you're just like, well, I better go figure out some URLs and then start trying to understand the JSON because that's pretty much it, right?

00:45:20.420 --> 00:45:24.400
And so Swagger gives you a nice view over top of that, right?

00:45:24.400 --> 00:45:29.100
Yeah, a really very nice, you know, a consistent standardized UI.

00:45:29.100 --> 00:45:33.640
I mean, they're constantly reproving it to interact with the API once you get it up and running.

00:45:34.240 --> 00:45:44.500
And I think if you spend time, it does take time to build a configuration file because you're defining all the parameters and what they look like and giving them documentation strings.

00:45:44.500 --> 00:46:01.900
But the payoff is the interactive UI that Swagger provides that gives you the documentation for someone who's interested of the parameters, what they mean, what this thing expects, the types of data for that JSON is going to send you or that it expects from you.

00:46:02.300 --> 00:46:03.820
And that's really powerful.

00:46:03.820 --> 00:46:04.380
Yeah, nice.

00:46:04.380 --> 00:46:08.760
So you have this Swagger YAML file that defines the API basically and generates the help.

00:46:08.760 --> 00:46:14.640
How do you get the, like, where does connection and your code all fit together?

00:46:14.640 --> 00:46:19.400
Well, I know how to write a general, like a normal Flask API.

00:46:19.400 --> 00:46:22.520
I would put at route and I would return Flask.jsonify.

00:46:22.680 --> 00:46:24.560
But what do I do in this connection on the world?

00:46:24.560 --> 00:46:33.780
Well, if you start configuration, the handshake point, the connection point between the configuration and the code, there's one specific parameter.

00:46:33.780 --> 00:46:35.100
I think it's, what is it?

00:46:35.100 --> 00:46:37.840
Object ID or something like that.

00:46:38.240 --> 00:46:48.220
It's, I can't remember off the top of my head, but that is, that specifies the path to the handler for that particular URL endpoint.

00:46:48.220 --> 00:46:50.740
So you might have, you know, it's just a string.

00:46:50.740 --> 00:46:56.600
It'd be like my code dot my app dot my method within that app.

00:46:56.760 --> 00:47:02.120
And Connection is smart enough to actually introspect your code and find that.

00:47:02.120 --> 00:47:11.460
You know, it'll navigate down that path, importing modules as it goes until it finds that handler and connect that to essentially doing the at route.

00:47:11.460 --> 00:47:16.640
It will create that within Flask to handle that URL when that gets called.

00:47:16.640 --> 00:47:18.640
So it's a very nice way.

00:47:18.640 --> 00:47:19.220
I see.

00:47:19.220 --> 00:47:26.060
You know, it auto connects that, this piece, the configuration piece with the code that's going to handle that configuration.

00:47:26.060 --> 00:47:26.780
Oh, that's cool.

00:47:26.780 --> 00:47:30.300
So it finds the Python files and implement it and sort of does the connection for you.

00:47:30.300 --> 00:47:30.640
Yeah.

00:47:30.640 --> 00:47:31.440
I guess it's the name.

00:47:31.440 --> 00:47:33.560
And it tells you, you know, it tells you if you don't have one.

00:47:33.560 --> 00:47:37.120
Like I've often misspelled things and it'll tell you, nope, that doesn't exist.

00:47:37.120 --> 00:47:38.360
No connection there.

00:47:38.360 --> 00:47:40.060
Yeah, too bad.

00:47:40.060 --> 00:47:41.880
Okay, this looks really nice.

00:47:41.880 --> 00:47:46.220
So you have a couple of nice articles on that and people can look through there.

00:47:46.220 --> 00:47:52.120
Yeah, on RealPython I've published some articles, two articles actually, on this REST, this FlaskConnection REST API.

00:47:52.320 --> 00:47:56.180
The first one was just an in-memory structure that I wanted to talk.

00:47:56.180 --> 00:48:03.040
It was a long enough article that I just wanted to talk about REST and my interpretation of REST because it's not really a spec.

00:48:03.040 --> 00:48:03.940
It's just a convention.

00:48:03.940 --> 00:48:11.900
And then the second article, which sort of was spawned by people asking me in the comments, hey, how could I make this thing persist to a database?

00:48:12.480 --> 00:48:21.400
So I took the basic API and code and then added a database connection through SQLAlchemy using SQLite as the database.

00:48:21.400 --> 00:48:22.860
Yeah, that's the way to do it.

00:48:22.860 --> 00:48:23.260
Very nice.

00:48:23.260 --> 00:48:24.080
I love SQLAlchemy.

00:48:24.080 --> 00:48:24.840
Oh, it's terrific.

00:48:24.840 --> 00:48:29.380
I'm not a big SQL guy, so I like that Pythonic way of thinking about it.

00:48:29.380 --> 00:48:31.200
Yes, I'm with you on that.

00:48:31.200 --> 00:48:34.020
So that was on RealPython.

00:48:34.020 --> 00:48:42.120
You also did some on dbader.org, which is kind of similar because Dan Bader runs both sites.

00:48:42.120 --> 00:48:43.420
Yeah, he runs both sites, right.

00:48:43.420 --> 00:48:46.280
So it's a little bit of a connection there.

00:48:46.280 --> 00:48:50.480
You did one on just sort of Python, getting started with Python.

00:48:50.480 --> 00:48:51.980
But one I thought was pretty interesting.

00:48:51.980 --> 00:48:55.040
I actually used this as a little bit of research for my recent async course.

00:48:55.040 --> 00:48:56.760
Yeah, I was very happy to see that.

00:48:56.860 --> 00:49:00.000
Yeah, the one's called Understanding Async Programming in Python.

00:49:00.000 --> 00:49:04.960
Yeah, I had maybe 10 or 15 articles I read to just see what people were doing.

00:49:04.960 --> 00:49:06.100
And this is a nice one.

00:49:06.100 --> 00:49:13.720
And this talks about very much of what you kind of hinted at the beginning with G event, with Twisted, and some of those things, right?

00:49:13.720 --> 00:49:20.620
Yeah, this was an article that actually came out of a presentation I gave at one of the Shutterfly All Hands meetings.

00:49:20.800 --> 00:49:26.780
And I had been in touch with Dan about the first article, just the Python introduction.

00:49:26.780 --> 00:49:30.280
And then he and I talked, and he was interested in this asynchronous one.

00:49:30.280 --> 00:49:31.600
And I put that together.

00:49:31.600 --> 00:49:36.600
It's a passion of mine because I like this whole asynchronous way of thinking.

00:49:36.600 --> 00:49:41.240
I've written threaded code in C and C++ and lived to regret it.

00:49:41.740 --> 00:49:56.740
And this whole asynchronous way of thinking, although at first it's hard to get your head around, it's a really interesting way to work if you have a program that's a mix of CPU and I-O bound processes or tasks.

00:49:56.740 --> 00:50:07.140
And I talked about that in my – one of the things I find interesting is people have – I've taught asynchronous programming to my coworkers and talked about it a lot.

00:50:07.340 --> 00:50:12.460
And there's just like this real hurdle to get over for people to get their heads around it.

00:50:12.460 --> 00:50:17.440
And it's interesting to me because in reality, humans are asynchronous.

00:50:17.440 --> 00:50:19.820
Our behavior is asynchronous all the time.

00:50:19.820 --> 00:50:27.860
But to think about it in this linear presentation of code, it's kind of hard to break out of that linear execution model.

00:50:28.100 --> 00:50:38.160
But as you mentioned in my article, I had these sort of thought experiments about different kinds of way that if people were synchronous or how do you handle asynchronous behavior.

00:50:38.160 --> 00:50:39.900
Exactly.

00:50:39.900 --> 00:50:49.360
You know, if as a parent, you could only cook dinner and then tell your child to, you know, get ready for bed and then serve dinner.

00:50:49.360 --> 00:50:51.660
And yeah, it doesn't make any sense, right?

00:50:51.660 --> 00:50:53.280
The real world definitely is asynchronous.

00:50:53.820 --> 00:50:54.220
Oh, yeah.

00:50:54.220 --> 00:50:59.680
I like the polling parent one where you're running back and forth checking every two minutes on everything that's going on.

00:50:59.680 --> 00:51:01.760
Is the dinner ready?

00:51:01.760 --> 00:51:03.280
Is the kid getting ready?

00:51:03.280 --> 00:51:05.440
Is the laundry – is the washing machine done?

00:51:05.440 --> 00:51:05.800
No?

00:51:05.800 --> 00:51:06.240
Yes?

00:51:06.240 --> 00:51:06.640
No, no?

00:51:06.640 --> 00:51:07.860
How interesting.

00:51:07.860 --> 00:51:09.280
Yeah, so this is a cool one.

00:51:09.280 --> 00:51:16.340
I would love to see a follow-up with some async I.O., maybe some A.I.O.H.D.P. or something like that.

00:51:16.340 --> 00:51:16.820
That'd be fun.

00:51:17.060 --> 00:51:25.960
Yeah, I'm going to talk to Dan about maybe how he feels about updating existing articles because I want to take that to the next level with async I.O.

00:51:25.960 --> 00:51:34.820
I haven't had an opportunity to do much of that in my data way of work, but I'm definitely heading that way because I'm thinking, like I said, I was thinking about Quart and Sanic.

00:51:35.700 --> 00:51:40.900
And I like it that it's native to Python now, the async stuff.

00:51:40.900 --> 00:51:46.120
Yeah, and especially the async and await keywords.

00:51:46.120 --> 00:51:55.820
Like you say people have this hard time thinking about async as code and whether it's something like G event or it's JavaScript with their callback mechanisms.

00:51:56.160 --> 00:52:00.840
I think it's hard because you have to unravel or turn your code inside out.

00:52:00.840 --> 00:52:04.280
I'm going to start this and then it's going to call this other thing to continue it and so on.

00:52:04.280 --> 00:52:10.020
But with async and await, you write your code in the serial form and then you just drop in some awaits in the various places.

00:52:10.020 --> 00:52:10.380
Yeah, it's great.

00:52:10.380 --> 00:52:11.880
And it's beautiful.

00:52:11.880 --> 00:52:12.700
I love it.

00:52:12.700 --> 00:52:13.540
It's really, really nice.

00:52:13.540 --> 00:52:18.100
I've talked to some of my friends who are like the front-end guys I work with who are friends of mine.

00:52:18.100 --> 00:52:21.100
You know, they're used to this whole asynchronous method in JavaScript.

00:52:21.600 --> 00:52:31.780
But in some ways, they're still sort of in the mind frame of like they're thinking linearly because you see this deeply indented callback hell for their handling asynchronous events.

00:52:31.780 --> 00:52:35.520
And it's one of the things I like about React is it helps you break out of that.

00:52:35.520 --> 00:52:36.780
Yeah, that is really nice.

00:52:36.780 --> 00:52:38.520
Yeah, that deeply indented callback stuff.

00:52:38.520 --> 00:52:41.380
It's just hard to deal with if something goes wrong.

00:52:41.380 --> 00:52:43.220
It's like, well, where do I unravel this to?

00:52:43.220 --> 00:52:44.140
Yeah.

00:52:44.140 --> 00:52:46.720
I'm halfway down this hole and I don't know where to go from.

00:52:46.720 --> 00:52:48.040
What am I doing now?

00:52:48.040 --> 00:52:50.200
Yeah, this is the problem.

00:52:50.200 --> 00:52:52.900
So you've got to take your step back each level out.

00:52:52.900 --> 00:52:54.680
But, yeah, I'll put that in the show notes.

00:52:54.680 --> 00:52:56.500
People will definitely enjoy that.

00:52:56.500 --> 00:52:59.640
So we're down to just a few minutes, a time left.

00:52:59.640 --> 00:53:03.020
So I suppose I'll ask you the two questions here at the end.

00:53:03.020 --> 00:53:03.500
All right.

00:53:03.500 --> 00:53:06.360
So if you're going to write some Python code, what editor do you use?

00:53:06.360 --> 00:53:12.540
Well, currently I'm an IntelliJ editor user and with the Python module plug-in.

00:53:12.680 --> 00:53:19.700
I used to use PYCharm, but now I'm covering so many languages, it's useful to work in IntelliJ so I can jump back and forth.

00:53:19.700 --> 00:53:24.660
Sometimes I have to do code reviews in Java and look at JavaScript and some other things.

00:53:24.660 --> 00:53:25.100
Right.

00:53:25.100 --> 00:53:26.840
So IntelliJ is really great.

00:53:27.060 --> 00:53:31.880
I don't understand people who don't want to use an IDE with a debugger.

00:53:31.880 --> 00:53:33.100
I just don't get it.

00:53:33.100 --> 00:53:35.500
Yeah.

00:53:35.500 --> 00:53:36.320
You and me both.

00:53:36.320 --> 00:53:38.440
I'm such a fan of it as well.

00:53:38.440 --> 00:53:39.340
I think it's really great.

00:53:39.780 --> 00:53:47.960
So if you're an IntelliJ-based person doing PYCharm or something, Brian Okken shared this with me today, this thing called Power Mode 2, which is one of the plugins.

00:53:47.960 --> 00:53:52.440
The faster you type, it will start to shoot flames and sparks from your code as you type.

00:53:52.440 --> 00:53:57.180
So if you need to do a presentation show off, you plug that in and take it to the next level.

00:53:57.180 --> 00:53:59.640
It's, of course, completely silly but fun.

00:53:59.640 --> 00:54:10.720
I might try that because one of the best things my mom ever made me do was I took a typing course in sixth grade and it's paid off because I type pretty fast.

00:54:10.720 --> 00:54:14.120
A lot of programmers don't, but I type pretty quick, so I'll definitely try that out.

00:54:14.120 --> 00:54:15.580
Yeah, all fun with that.

00:54:15.580 --> 00:54:16.940
Definitely for presentations.

00:54:16.940 --> 00:54:17.380
All right.

00:54:17.380 --> 00:54:18.840
So notable PyPI packages?

00:54:18.840 --> 00:54:22.240
Well, I really like, as I mentioned, Connexion, which is this REST API.

00:54:22.860 --> 00:54:37.380
And then the other side of that is Marshmallow, this serialization, deserialization library that lets you, because SQLAlchemy deals with Python objects, you can't just hand those off to something that wants to turn them into JSON like Connexion.

00:54:37.380 --> 00:54:38.140
Right.

00:54:38.140 --> 00:54:42.480
If you try to return it out of your method, it'll freak out and go, I cannot serialize this thing to JSON.

00:54:42.480 --> 00:54:47.760
Yeah, there's no matching thing for a Python date-time object in JSON.

00:54:48.520 --> 00:54:55.380
So this Marshmallow thing allows you to, just as you would in SQLAlchemy, build a model that matches your table structure.

00:54:55.380 --> 00:55:07.840
Marshmallow does the same thing, but it builds a model that tells us, oh, this is the data I'm expecting, this is the structure, and this is how I'm going to convert it to something that's JSON-able.

00:55:07.840 --> 00:55:09.180
That is cool.

00:55:09.180 --> 00:55:09.180
And back and forth.

00:55:09.180 --> 00:55:09.620
It does both.

00:55:09.620 --> 00:55:10.660
Yeah, that's really cool.

00:55:10.660 --> 00:55:12.780
I should definitely learn about Marshmallow.

00:55:12.780 --> 00:55:13.820
Oh, it's sweet.

00:55:13.820 --> 00:55:20.460
It has the same thing as SQLAlchemy, where you have relationships, the one-to-many, many-to-many relationships in the data table.

00:55:20.460 --> 00:55:29.960
You can also set those up in Marshmallow so that if you have a SQLAlchemy object that has, you know, you've got one record, but it's got many relationships to others.

00:55:29.960 --> 00:55:31.980
Marshmallow will take care of that as well.

00:55:31.980 --> 00:55:35.200
It'll just go down the tree and serialize them all.

00:55:35.200 --> 00:55:36.680
That just does the whole object graph.

00:55:36.680 --> 00:55:37.080
Wow.

00:55:37.080 --> 00:55:37.420
Yeah.

00:55:37.420 --> 00:55:37.680
Very nice.

00:55:37.680 --> 00:55:44.960
You take that return value and you hand it off to – you return it from your call, and Connection will then turn it into a JSON string.

00:55:44.960 --> 00:55:45.300
Okay.

00:55:45.300 --> 00:55:46.440
I'm loving this one.

00:55:46.440 --> 00:55:47.080
Good choice.

00:55:47.080 --> 00:55:49.100
All right.

00:55:49.100 --> 00:55:50.160
Well, this – yeah.

00:55:50.160 --> 00:55:51.740
This has been really interesting.

00:55:51.740 --> 00:55:53.800
I really appreciate you being on the show, Doug.

00:55:53.800 --> 00:55:55.180
Oh, I'm very glad to be here.

00:55:55.180 --> 00:55:55.520
It's great.

00:55:55.520 --> 00:55:56.600
I've really enjoyed it myself.

00:55:56.600 --> 00:55:57.300
Yeah, absolutely.

00:55:57.300 --> 00:56:02.160
You got a bunch of recommendations, and I think a really interesting way to look at that whole async programming thing.

00:56:02.160 --> 00:56:05.200
So I'm looking forward to your follow-up articles that you write about this.

00:56:05.200 --> 00:56:07.000
Yeah, definitely be fun.

00:56:07.100 --> 00:56:14.500
I love that little bit of extra complexity and then being able to do many things at once is not only important to me but fun as well.

00:56:14.500 --> 00:56:15.660
Yeah, it's definitely fun.

00:56:15.660 --> 00:56:18.640
Yeah, we don't need to do crossword puzzles or Sudoku.

00:56:18.640 --> 00:56:20.540
We can just work on our threaded code, right?

00:56:20.540 --> 00:56:21.260
Yeah, right.

00:56:21.260 --> 00:56:28.860
In my classes, I teach the kids using the turtle module because I get them right into drawing on the screen.

00:56:28.860 --> 00:56:30.340
I do the same thing with adults.

00:56:30.340 --> 00:56:31.200
It would be great, I think.

00:56:31.200 --> 00:56:31.860
Yeah, absolutely.

00:56:31.860 --> 00:56:32.340
It would.

00:56:32.340 --> 00:56:33.160
All right.

00:56:33.160 --> 00:56:34.120
Well, thanks for being here.

00:56:34.120 --> 00:56:34.920
Good to talk to you.

00:56:34.920 --> 00:56:35.540
Thank you, Michael.

00:56:35.540 --> 00:56:36.040
Bye.

00:56:36.040 --> 00:56:36.340
Bye-bye.

00:56:36.520 --> 00:56:37.520
Bye-bye.

00:56:37.520 --> 00:56:37.840
Bye-bye.

00:56:37.840 --> 00:56:40.140
This has been another episode of Talk Python To Me.

00:56:40.140 --> 00:56:46.200
Our guest on this episode has been Doug Farrell, and it's been brought to you by LogRocket and Rollbar.

00:56:46.200 --> 00:56:51.640
LogRocket will help you avoid the back and forth, helping your users with problems on your site.

00:56:51.640 --> 00:57:00.900
Visit talkpython.fm/LogRocket to get started with their free tier and get a pixel-perfect replay of what your users saw and the state of your app.

00:57:00.900 --> 00:57:03.600
Rollbar takes the pain out of errors.

00:57:03.600 --> 00:57:10.320
They give you the context and insight you need to quickly locate and fix errors that might have gone unnoticed until your users complained, of course.

00:57:10.320 --> 00:57:17.620
Track a ridiculous number of errors for free as Talk Python To Me listeners at talkpython.fm/rollbar.

00:57:18.360 --> 00:57:19.620
Want to level up your Python?

00:57:19.620 --> 00:57:26.580
If you're just getting started, try my Python jumpstart by building 10 apps or our brand new 100 days of code in Python.

00:57:26.580 --> 00:57:30.380
And if you're interested in more than one course, be sure to check out the Everything Bundle.

00:57:30.640 --> 00:57:32.620
It's like a subscription that never expires.

00:57:32.620 --> 00:57:34.820
Be sure to subscribe to the show.

00:57:34.820 --> 00:57:37.020
Open your favorite podcatcher and search for Python.

00:57:37.020 --> 00:57:38.260
We should be right at the top.

00:57:38.260 --> 00:57:47.540
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct RSS feed at /rss on talkpython.fm.

00:57:47.540 --> 00:57:49.440
This is your host, Michael Kennedy.

00:57:49.440 --> 00:57:50.800
Thanks so much for listening.

00:57:50.800 --> 00:57:51.860
I really appreciate it.

00:57:51.860 --> 00:57:53.820
Now get out there and write some Python code.

00:57:53.820 --> 00:58:14.660
I'll see you next time.

