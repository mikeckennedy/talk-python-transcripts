WEBVTT

00:00:00.001 --> 00:00:03.800
You often hear that we need to teach computer science as a foundational skill.

00:00:03.800 --> 00:00:08.900
Why? Well, I'm not actually sure many of the leaders pushing this forward have great answers

00:00:08.900 --> 00:00:13.860
other than jobs. But it is fundamentally important that we do teach programming as a core skill.

00:00:13.860 --> 00:00:18.360
The reason, I believe, is that whatever your specialty, be that biology, psychology,

00:00:18.360 --> 00:00:24.940
geo-surveys, whatever, basic programming will supercharge that skill. And that's why I'm

00:00:24.940 --> 00:00:29.840
excited to introduce you to Software Carpentry and Jonah Duckles. They are bringing these skills

00:00:29.840 --> 00:00:35.520
and more to scientists and educators throughout the globe. This is Talk Python To Me, recorded

00:00:35.520 --> 00:00:37.340
December 6, 2016.

00:00:59.680 --> 00:01:06.640
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the

00:01:06.640 --> 00:01:11.240
ecosystem, and the personalities. This is your host, Michael Kennedy. Follow me on Twitter

00:01:11.240 --> 00:01:16.160
where I'm @mkennedy. Keep up with the show and listen to past episodes at talkpython.fm

00:01:16.160 --> 00:01:22.560
and follow the show on Twitter via at talkpython. This episode has been sponsored by Rollbar and

00:01:22.560 --> 00:01:27.540
MongoDB. I want to say a special thank you to MongoDB University for joining Talk Python To Me as a

00:01:27.540 --> 00:01:32.100
sponsor. Thank both of them for supporting the show by checking out what they have to offer during their

00:01:32.100 --> 00:01:34.680
segments. Jonah, welcome to Talk Python.

00:01:35.000 --> 00:01:35.560
Thanks for having me.

00:01:35.560 --> 00:01:35.880
Thanks for having me.

00:01:35.880 --> 00:01:39.760
Yeah, it's great to have you here. I'm super excited to talk about Software Carpentry and

00:01:39.760 --> 00:01:46.900
bringing programming skills to more than just programmers, researchers, scientists, and so on.

00:01:46.900 --> 00:01:47.500
It's going to be fun.

00:01:47.500 --> 00:01:54.100
Yeah, no, I'm excited, Michael. Thank you for reaching out. And I'm excited to share what Software

00:01:54.100 --> 00:01:59.920
Carpentry is up to and how we can build new communities that support researchers all over the world.

00:02:00.560 --> 00:02:03.940
It's super cool what you're talking about and what you're doing. Before we get into that,

00:02:03.940 --> 00:02:07.180
though, let's talk about you. What's your story? How do you get into programming in Python?

00:02:07.180 --> 00:02:13.840
I've been using Linux and Unix since, I don't know, probably my freshman year of high school.

00:02:13.840 --> 00:02:21.260
And then I've always kind of dabbled in open source software and tools and did a master's in landscape

00:02:21.260 --> 00:02:28.120
ecology, really kind of learning GIS skills and learning how to apply GIS skills towards remote

00:02:28.120 --> 00:02:35.060
sensing problems. And I started using ArcGIS in grad school. And they had this sort of Python

00:02:35.060 --> 00:02:42.260
ArcGIS scripting object. And it was a really kind of powerful tool for me to use. But I

00:02:42.260 --> 00:02:47.720
quickly hit up against the limits of how that scripting object worked and really just kind

00:02:47.720 --> 00:02:53.620
of dived into Python and the open source geospatial world around Python and really developed my skills

00:02:53.620 --> 00:03:00.060
in graduate school around kind of applying Python towards geospatial analysis problems.

00:03:00.060 --> 00:03:02.260
So that was really the motivating factor.

00:03:02.260 --> 00:03:07.480
Yeah, that's really interesting. Geospatial stuff is, it's fascinating. There's so much data these

00:03:07.480 --> 00:03:07.980
days, right?

00:03:07.980 --> 00:03:13.060
Yeah, no. And I went on from graduate school, and I was actually doing agricultural intelligence work,

00:03:13.060 --> 00:03:19.620
taking imagery coming from, you know, freely available imagery coming down from satellites like Landsat and

00:03:19.620 --> 00:03:26.220
Modus, and writing Python scripts, and R scripts, and Bash scripts, whatever we could cobble together to kind

00:03:26.220 --> 00:03:34.200
of do analysis of tabular data and what we saw from remote sensing data. And really, my chops in terms of

00:03:34.200 --> 00:03:39.920
an applied programmer were developed in that job postgraduate school, where we were kind of on

00:03:39.920 --> 00:03:46.500
deadlines trying to meet reporting deadlines and things. And that's really where I became more of the

00:03:46.500 --> 00:03:52.840
language and trying to understand the nuances of Python and the power in the community around Python and the tools

00:03:52.840 --> 00:03:55.680
that were developed there. So, yeah.

00:03:55.680 --> 00:04:00.420
Oh, yeah, that's, that's really cool. Taking the satellite data. I think we're going to see a lot of that, especially

00:04:00.420 --> 00:04:07.820
with the Internet of Things stuff, right? The ability to take geospatial data, maybe some small bits of monitoring

00:04:07.820 --> 00:04:12.760
here and there, or even control systems. It's going to be fun to see how that goes in all sorts of areas.

00:04:12.760 --> 00:04:40.560
Yeah, and that's, that's really a huge area that my organization, Software Carpentry, can help people with, is to begin to understand how to kind of eat the elephant and build software tools that can take huge streams of data coming from disparate sources and start thinking about how you might build software, how you might take just enough skills as a software engineer, and apply them to your research problem.

00:04:40.560 --> 00:04:49.060
So you can start to build the tools that you need to answer the research questions that you have. And we're seeing this in so many different research communities all over the world.

00:04:49.060 --> 00:05:02.180
Yeah, so that gets us a little bit to Software Carpentry and what Software Carpentry is, right? So that, why don't we talk a little bit about what Software Carpentry is in this project that you guys have going at software-carpentry.org?

00:05:02.560 --> 00:05:16.600
Yeah. Software Carpentry was really founded way back in 1997 by Greg Wilson when he was a newly minted PhD in computer science, and he showed up at Los Alamos National Lab as a postdoctoral researcher.

00:05:17.320 --> 00:05:20.080
And researchers were lined up at Los Alamos National Lab as a postdoctoral researcher.

00:05:20.080 --> 00:05:41.160
And he was inundated and overwhelmed and realized that these researchers had really a lot of motivation and a lot of excitement to become better programmers, but really didn't have any resources or tools to help them on their way.

00:05:41.160 --> 00:05:49.200
And so Software Carpentry was born of that kind of need of these researchers kind of expressing a need for research skills.

00:05:49.200 --> 00:05:55.260
And the first iteration of it was a five-day workshop to teach you all the things.

00:05:56.000 --> 00:06:05.040
And that went well for a lot of people, but also by the end of the third day, people were kind of passing out in their chairs and unable to retain any more information.

00:06:05.040 --> 00:06:07.160
And the brain was full.

00:06:07.160 --> 00:06:10.540
It was really overwhelming for the participants.

00:06:10.920 --> 00:06:22.040
And so in about 2012, via some work from some people around the Software Carpentry community, particularly some people in Wisconsin as part of the Hacker Within project, started saying,

00:06:22.040 --> 00:06:32.800
how can we reboot this and how can we create a really compelling two-day workshop where we train instructors on good adult teaching pedagogy?

00:06:32.800 --> 00:06:40.960
And how do we take really high-quality lessons and how do we deliver them with trained instructors, impactful, engaging, and exciting workshops?

00:06:40.960 --> 00:06:44.960
And so that's really the work of what we do now is we curate these lessons.

00:06:44.960 --> 00:06:48.800
They're open source, CC by Creative Commons Attribution License.

00:06:48.800 --> 00:06:53.080
We have a community of instructors around the world that are trained.

00:06:53.080 --> 00:06:57.520
About 900 people have gone through our training so far and become certified instructors.

00:06:58.340 --> 00:07:06.640
And we're really about capacity building at research organizations to build teams of instructors who talk about how they teach

00:07:06.640 --> 00:07:13.420
and try to push the envelope to always improve how they're teaching and to develop new lessons

00:07:13.420 --> 00:07:19.280
and really push the skills that researchers are demanding in data-driven research.

00:07:19.280 --> 00:07:23.860
So a lot of this is the tools of software engineering, how to build software.

00:07:24.440 --> 00:07:34.340
But, you know, we started a very basic, basic, basic level because researchers really need that foundational explanation of how these things fit together.

00:07:34.340 --> 00:07:35.260
That's really great.

00:07:35.260 --> 00:07:42.180
I feel like certainly when you're in research, knowing some programming is really, really empowering.

00:07:42.180 --> 00:07:47.160
And, you know, I used to work at a place with a bunch of cognitive science PhDs.

00:07:48.160 --> 00:07:57.720
And not everybody there had some level of programming, but many of the people, the professors and so on, would do really advanced work.

00:07:57.720 --> 00:07:59.560
Maybe it was in MATLAB or something.

00:07:59.560 --> 00:08:03.840
And we'd have to take their MATLAB algorithms and convert them to real programming languages.

00:08:03.840 --> 00:08:07.400
But, you know, it made what they did more or less possible.

00:08:08.200 --> 00:08:11.560
So I think, you know, there's this whole learn to code.

00:08:11.560 --> 00:08:15.920
And right now we're recording during the hour of code week, which is, you know, pretty interesting.

00:08:15.920 --> 00:08:18.760
So all these people in the world are learning to code.

00:08:18.760 --> 00:08:30.240
And I think the biggest takeaway or the biggest benefit that seems to get lost is this ability to do even a little bit of programming can superpower whatever your specialty is.

00:08:30.240 --> 00:08:37.100
So, you know, if you're a psychologist, you can analyze data like nobody's business compared to, like, people who can't, right?

00:08:37.100 --> 00:08:39.620
Other PhDs or whatever who can't.

00:08:39.620 --> 00:08:42.840
Similarly in biology or agriculture, like even for farmers, right?

00:08:42.840 --> 00:08:46.100
So I think this is really great.

00:08:46.100 --> 00:08:49.360
What kind of stuff do you guys cover?

00:08:49.360 --> 00:08:53.580
I know we'll go into more detail later, but, like, what are the general areas that you teach?

00:08:53.580 --> 00:08:55.720
What do people learn when they come work with you guys?

00:08:55.720 --> 00:08:56.480
What are your classes on?

00:08:56.480 --> 00:09:00.520
We're basically – so we talk about kind of having a flagship workshop.

00:09:00.520 --> 00:09:03.780
And this is our base lessons.

00:09:03.780 --> 00:09:08.980
And the target audience originally for this was scientists who were coding, but were coding poorly.

00:09:08.980 --> 00:09:12.040
But as it turns out, there's actually a huge community.

00:09:12.040 --> 00:09:14.320
There's sort of two communities that come to our classes.

00:09:14.320 --> 00:09:16.260
It's about 60-40 split.

00:09:16.260 --> 00:09:28.000
About 60% of people coming to our workshops say they have not coded, but they know that they have a research problem that code could help them be more productive and be more efficient at what they do.

00:09:28.000 --> 00:09:38.460
And about 40% come and they say, I've been coding as a practicing scientist for a long time, but nobody stopped and taught me how I should be doing it.

00:09:38.460 --> 00:09:39.560
And that's why I'm here.

00:09:39.560 --> 00:09:45.280
And so the reality – you know, you talk about this researcher who's got this really complex MATLAB code.

00:09:45.280 --> 00:09:54.600
The reality is that there's no intentional time spent for a lot of researchers, for a lot of scientists, to say this is how you build software.

00:09:54.600 --> 00:09:56.220
This is how you build programs.

00:09:56.420 --> 00:10:02.300
They're just thrown in and told to sink or swim as part of the kind of academic process.

00:10:02.300 --> 00:10:17.940
And so our goal with our sort of flagship two-day workshop is to really kind of give you a rope to help pull yourself out of the water or to help you kind of build a mental model for – there's this ecosystem of open source tools that are out there.

00:10:17.940 --> 00:10:21.560
They can fit together in ways that you can build.

00:10:21.740 --> 00:10:24.620
It's almost like learning that here's a bucket of Legos.

00:10:24.620 --> 00:10:25.820
Let's put the things together.

00:10:25.820 --> 00:10:33.240
And so what we teach in this foundational workshop is the Unix shell and how to repeat tasks in the Unix shell.

00:10:33.240 --> 00:10:36.060
And we'll go into more depth about the specifics of these things.

00:10:36.060 --> 00:10:40.300
But basically how to be more efficient at repeating tasks in the Unix shell.

00:10:40.300 --> 00:10:47.480
And then how to abstract ad hoc shell commands into a script that you can save and then call again and again.

00:10:47.480 --> 00:10:51.080
So those are the two major goals of that lesson.

00:10:51.220 --> 00:10:52.220
It takes about a half day.

00:10:52.220 --> 00:10:57.880
The Python lesson takes about another half day, sometimes another full day, two half days.

00:10:57.880 --> 00:11:01.600
And we're not teaching you all the data types in Python.

00:11:01.600 --> 00:11:05.200
We're basically trying to teach you that Python is a nice high-level language.

00:11:05.200 --> 00:11:08.640
It's a good glue to a lot of tools that are out there.

00:11:08.640 --> 00:11:17.040
And it's a great way to start thinking about how to build software that tackles your research challenge.

00:11:17.420 --> 00:11:19.860
And so we're really trying to teach them.

00:11:19.860 --> 00:11:30.620
A lot of researchers, and I know a lot of listeners to this podcast might be surprised by this, but a lot of researchers are never told that there's these things called functions that you can wrap code with.

00:11:30.620 --> 00:11:30.900
Right?

00:11:31.040 --> 00:11:34.480
Where you can make a thing that's callable in other places.

00:11:34.480 --> 00:11:35.100
Right?

00:11:35.100 --> 00:11:37.900
So a lot of researchers write very procedural code.

00:11:38.300 --> 00:11:41.660
And we teach them about functions and that functions are callable.

00:11:41.660 --> 00:11:42.940
Functions should be small.

00:11:42.940 --> 00:11:47.180
And we teach them some of these kind of aspirational things.

00:11:47.180 --> 00:12:03.960
We kind of build an ideal for them so that they're thinking their mental model as they're building software and they're eating that elephant around their research problem allows them to think about, okay, maybe this function that's going across three pages in my editor now, maybe I could break that into four or five functions.

00:12:03.960 --> 00:12:04.380
Right?

00:12:04.380 --> 00:12:12.600
So we're trying to inspire those kinds of ways of thinking while we're also trying to translate skills to them.

00:12:12.600 --> 00:12:24.220
One of the things that seems to me that is the kind of overarching theme there is writing software that doesn't just solve a problem but becomes reusable.

00:12:24.220 --> 00:12:24.640
Right?

00:12:24.640 --> 00:12:32.760
And so like what I saw a lot of the times would be there would be some kind of code written by let's just, you know, take my cognitive science folks as an example.

00:12:32.760 --> 00:12:44.040
They'd write code that did amazing stuff but it would, you know, have all sorts of hard coded specific things for the exact problem they're trying to solve.

00:12:44.040 --> 00:12:47.340
Like you said, it wasn't typically broken into a lot of functions.

00:12:47.340 --> 00:12:50.480
There was not the concept of reusability or testability.

00:12:50.480 --> 00:12:52.960
It was like, well, we, we, this is what it needs.

00:12:52.960 --> 00:12:53.780
These are the steps.

00:12:53.780 --> 00:12:55.240
And I made it do the steps.

00:12:55.240 --> 00:12:55.520
Right?

00:12:55.520 --> 00:13:08.020
And they might be really advanced but it's just, it's like moving from, from maybe there to, oh, here's a bunch of things I could put into a package that I could then open source and a thousand people could work on it, not just me.

00:13:08.020 --> 00:13:10.860
Or here's the thing I could unit test.

00:13:10.860 --> 00:13:11.920
Like, what is that?

00:13:11.920 --> 00:13:12.900
Right, right, right.

00:13:12.900 --> 00:13:13.980
Yeah, yeah, yeah.

00:13:13.980 --> 00:13:14.220
Yeah.

00:13:14.220 --> 00:13:22.020
And we, in our Unix shell lesson, we're trying to teach the Unix small tools philosophy a bit too.

00:13:22.200 --> 00:13:30.020
And we hope that kind of rubs off in the other areas where, you know, we're teaching WC to word count lines, right?

00:13:30.020 --> 00:13:40.660
And we teach them to read the man page of this thing called WC and find what the different flags do and make these magical space delimited incantations at the bash prompt.

00:13:41.200 --> 00:13:47.040
And think about, they wrote one tool that just counts lines, words, and characters.

00:13:47.040 --> 00:13:48.500
That's all it does, right?

00:13:48.500 --> 00:13:50.200
And that's all it needs to do.

00:13:50.460 --> 00:13:51.320
And that's enough.

00:13:51.320 --> 00:14:19.900
And we can build something and we can write a script that has the abstraction layer appropriate for our research question that uses WC, that uses GRAP, that uses SORT, and plugs a few of these things together so that we can say, okay, we can now apply this to the data that's coming in from our sequencer, the data that's coming down from our satellite, the data that's coming in from our time series, from our sensor that we've put out there.

00:14:19.900 --> 00:14:38.140
And so, you know, in that way, we're kind of, by thinking about those abstractions, we're hoping and helping to give them the superpowers they need, like you were saying, to give them those kind of abilities to ask more complicated research questions of the data that's all around them and all of that.

00:14:38.140 --> 00:14:38.420
Yeah.

00:14:38.420 --> 00:14:52.280
So, speaking of the data that's around them, you've got a nice breakdown of different areas of study, right? Astronomy, particle physics, biologies, and kind of what they might need to know and so on. You want to maybe talk about that a bit?

00:14:52.380 --> 00:15:12.520
So, the astronomy community is really training their people to be prepared for this data-driven future. It's really kind of exciting and empowering to see, and we see participation in software carpentry from places like the Space Telescope Science Institute, the University of Washington, other astronomy communities at the University of Illinois.

00:15:12.520 --> 00:15:26.780
Yeah, the stuff they do in astronomy is no longer just like people going out and grabbing a little light telescope and just staring at the sky and taking notes on a notepad. It's like a serious data-driven thing, right?

00:15:26.860 --> 00:15:33.160
And there's tons of machine learning, and you almost have to be a data scientist to be an astronomer these days.

00:15:33.160 --> 00:15:52.600
Yes, you do. And we've had a collaboration with some folks in Italy that are astronomers that actually want to formally train their PhDs in astronomy with data-driven data scientist skills so that they're marketable because they realize there's only so many jobs in astronomy.

00:15:52.600 --> 00:15:54.800
That's a good point, too.

00:15:54.800 --> 00:16:14.140
And that's a theme we're seeing in a lot of disciplines is people are saying, hey, there's this huge demand for data-driven skills. How can we take, you know, we know that we're not going to be able to meet, we're not going to be able to give jobs to all these people we're training. How can we make sure that their training is relevant to other areas as well?

00:16:14.140 --> 00:16:17.180
That's a great aspect. Yeah, you were about to talk about particle physics.

00:16:17.180 --> 00:16:26.900
Yeah, so the particle physics community, you know, everybody's heard of the Large Hadron Collider, you know, at CERN, and all of these kinds of activities that have gone on.

00:16:26.900 --> 00:16:38.840
They have, for a long time, you know, I remember I did my undergraduate in physics, and I remember they were designing the sensors back when I started my bachelor's degree 20 years ago or so.

00:16:39.180 --> 00:16:46.260
And now they have these huge data streams, and they've really built a system for the tiers that they use for the processing.

00:16:46.980 --> 00:16:53.140
And that is really kind of built into their community and their training very well.

00:16:53.140 --> 00:16:54.960
It's actually a good kind of example.

00:16:54.960 --> 00:17:04.420
There aren't a tremendous amount of needs there because they've really, their data streams are so systematized and whatnot.

00:17:04.420 --> 00:17:09.200
But there's always the need for people with new skills, building new tools, new analysis software.

00:17:09.360 --> 00:17:18.360
And so we've seen some interest from the particle physics community in kind of preparing new graduate students to have those baseline skills that are necessary.

00:17:18.360 --> 00:17:28.320
Moving on to biologists, biologists have sequencing data coming out their ears, noses, wherever they can find it.

00:17:28.320 --> 00:17:37.920
And the rate at which sequencing data can be generated far surpasses, you know, what most grad labs' abilities are to process it.

00:17:37.920 --> 00:17:50.240
And this is a, you know, sort of an acute need in biology to take people who have really good experimental design and lab skills and train them on data-driven research.

00:17:50.240 --> 00:17:57.200
I thought there was a really hilarious tweet yesterday, which is that bioinformatics is just advanced bash, right?

00:17:57.280 --> 00:18:02.460
So you're actually learning really advanced bash to kind of string together.

00:18:02.460 --> 00:18:03.900
And that's one perspective, right?

00:18:03.900 --> 00:18:06.920
To string together a lot of tools that other people have written.

00:18:06.920 --> 00:18:15.960
But through Software Carpentry, what we want to do is we want to help people understand that they can build software that can meet their needs.

00:18:15.960 --> 00:18:20.440
And they can build these kind of small tools that fit into the open source ecosystem.

00:18:21.440 --> 00:18:29.980
And so about 50% of the people who attend our workshops, and there have been about 20,000 people who've attended our workshops, are biologists of some.

00:18:29.980 --> 00:18:31.240
Wow, that's really interesting.

00:18:31.240 --> 00:18:31.840
Yeah.

00:18:31.840 --> 00:18:43.060
You know, I think, I wonder if partly that's because the astronomers and the particle physicists, like, from a very early place in their study, have to basically become programmers.

00:18:43.060 --> 00:19:13.040
Or they just can't process it, right?

00:19:13.040 --> 00:19:13.820
Believe this.

00:19:13.820 --> 00:19:15.420
And then they go, what?

00:19:15.420 --> 00:19:17.760
I can't do that with the skills I have.

00:19:17.760 --> 00:19:18.220
And so they...

00:19:18.220 --> 00:19:18.880
We did 10.

00:19:18.880 --> 00:19:19.700
It took a year.

00:19:19.700 --> 00:19:29.200
Well, 10, 20 years ago was, you know, a PhD, a postdoc, and some time as a faculty member.

00:19:29.360 --> 00:19:35.920
So, and I might be exaggerating there on 10, but it's the rate at which they can get data is exponential at the moment.

00:19:35.920 --> 00:19:42.040
And they have problems, never mind the fact that their people aren't trained in programming.

00:19:42.040 --> 00:19:49.100
They just have computational limits to what they can accomplish, even if they could use the computing power available to them.

00:19:49.140 --> 00:19:51.760
So there's really interesting questions in biology.

00:19:51.760 --> 00:19:54.720
There's really interesting communities being developed.

00:19:54.720 --> 00:20:06.860
We're working with groups all over the world that are really building networks of people that have the expertise spread across the network in order to answer the big research challenges they have.

00:20:06.940 --> 00:20:14.800
One is this group in Europe, which is a group of 20 countries building infrastructure, bioinformatics infrastructure.

00:20:14.800 --> 00:20:20.000
And they really see that as the sequencing facilities, the computational facilities, and the people.

00:20:20.100 --> 00:20:32.300
And we're participating in how they build the network of people to be a support network that teaches each other the skills necessary and is agile and adaptable to those skills as they're changing.

00:20:32.300 --> 00:20:42.700
Because for your listeners who are in the bioinformatics community, every time you turn around, there's a new hot tool that you should be using, and you should drop your whole previous workflow.

00:20:42.700 --> 00:20:48.000
It's almost a joke in the community that that's how fast things are changing and moving.

00:20:48.000 --> 00:20:49.800
Yeah, that sounds familiar, actually.

00:20:49.800 --> 00:21:07.900
This portion of Talk Python To Me has been brought to you by Rollbar.

00:21:07.900 --> 00:21:11.440
One of the frustrating things about being a developer is dealing with errors.

00:21:11.440 --> 00:21:19.600
Relying on users to report errors, digging through log files trying to debug issues, or a million alerts just flooding your inbox and ruining your day.

00:21:19.600 --> 00:21:26.860
With Rollbar's full-stack error monitoring, you'll get the context, insights, and control that you need to find and fix bugs faster.

00:21:26.860 --> 00:21:28.540
It's easy to install.

00:21:28.540 --> 00:21:32.800
You can start tracking production errors and deployments in eight minutes or even less.

00:21:32.800 --> 00:21:42.160
Rollbar works with all the major languages and frameworks, including the Python ones, such as Django, Flask, Pyramid, as well as Ruby, JavaScript, Node, iOS, and Android.

00:21:42.160 --> 00:21:51.380
You can integrate Rollbar into your existing workflow, send error alerts to Slack or HipChat, or even automatically create issues in Jira, Pivotal Tracker, and a whole bunch more.

00:21:51.380 --> 00:21:54.740
Rollbar has put together a special offer for Talk Python To Me listeners.

00:21:54.740 --> 00:22:00.420
Visit rollbar.com slash Talk Python To Me, sign up, and get the bootstrap plan free for 90 days.

00:22:00.880 --> 00:22:03.480
That's 300,000 errors tracked all for free.

00:22:03.480 --> 00:22:07.180
But, hey, just between you and me, I really hope you don't encounter that many errors.

00:22:07.180 --> 00:22:13.200
Loved by developers at awesome companies like Heroku, Twilio, Kayak, Instacart, Zendesk, Twitch, and more.

00:22:13.200 --> 00:22:14.820
Give Rollbar a try today.

00:22:14.820 --> 00:22:17.400
Go to rollbar.com slash Talk Python To Me.

00:22:25.280 --> 00:22:28.600
So another area of the people that you work with a lot are ecologists.

00:22:28.600 --> 00:22:29.160
Yeah.

00:22:29.160 --> 00:22:52.440
So ecologists, if you think about field biologists and ecologists, people who go out into the ecosystem and try and make observations, they have these fantastic abilities now to buy cameras, get microphones that sit out in the field and listen for days, weeks, months to the ecosystem, measuring time series of pretty much any parameter.

00:22:52.440 --> 00:22:57.160
You can find a sensor that will measure that parameter and gather all that together.

00:22:57.160 --> 00:23:03.300
And so they're really in this data-rich era where they have no problem acquiring data.

00:23:03.300 --> 00:23:17.280
They really have a challenge when they sit down and they say, OK, I've made these observations across these different treatments over these different sites for this period of time, and I'd really like to build some insight from it.

00:23:17.280 --> 00:23:25.740
They really don't have great communities around that in ecology teaching each other how to do this kind of analysis.

00:23:25.740 --> 00:23:33.080
And so software carpentry has really been trying to help people think about how to build tools.

00:23:33.240 --> 00:23:44.200
And one of the applications area in ecologies is really, you know, how do I build software that can help me smash all this data together and get some insight from it.

00:23:44.200 --> 00:23:52.320
We don't have all the answers, but they, if you think about an ecologist or a field biologist, they're usually people who like to spend time out in the ecosystem.

00:23:52.320 --> 00:23:53.700
They do a lot of field studies.

00:23:53.700 --> 00:24:01.900
And now, same way as biologists are getting more data than they know what to do, ecologists are sitting there and they're getting data from different vendors.

00:24:02.260 --> 00:24:09.420
Each vendor wants you to buy a $5,000 license key with a dongle that plugs into your laptop so you can actually process the data.

00:24:09.420 --> 00:24:10.420
And I'm not even kidding.

00:24:10.420 --> 00:24:11.720
That's what they want you to do.

00:24:11.720 --> 00:24:12.800
No, I'm sure.

00:24:12.800 --> 00:24:24.360
And you've got seven of these vendors for one site, one observation site, and you sit down and you go, okay, how do I start even eating this elephant?

00:24:24.360 --> 00:24:32.740
And you really do need to build software that is special purpose for the experiment if you're going to do that right.

00:24:32.740 --> 00:24:33.300
Right.

00:24:33.360 --> 00:24:42.420
It sounds like an ecosystem or group that's really ripe for some solid open source stuff to come in and go, we don't need a dongle.

00:24:42.420 --> 00:24:43.060
Let's do this.

00:24:43.060 --> 00:24:43.520
Yep.

00:24:43.520 --> 00:24:44.160
Yeah.

00:24:44.160 --> 00:24:44.880
Yeah, yeah.

00:24:44.880 --> 00:24:48.420
And there's so much vendor lock-in in that space.

00:24:48.420 --> 00:24:49.860
It's completely nuts.

00:24:49.860 --> 00:24:56.760
So there are ecologists that are really owning the process, trying to own their data better.

00:24:56.760 --> 00:25:06.880
And that's really the kind of empowerment that learning software building skills gives you is you feel like you can tackle that challenge.

00:25:06.880 --> 00:25:11.120
And you feel like you can own your data and your processing of your data.

00:25:11.120 --> 00:25:15.180
You feel like you've become a creator and you can, I can change this.

00:25:15.180 --> 00:25:16.460
I don't have to just take what they give me.

00:25:16.460 --> 00:25:16.860
That's great.

00:25:16.860 --> 00:25:25.360
So one final group that you mentioned may be worth covering is archivists and scanning manuscripts and digitizing the things, all the things.

00:25:25.600 --> 00:25:28.880
You know, this is kind of broadly digital humanities.

00:25:28.880 --> 00:25:45.200
This is one particular case of digital humanities where an expert on manuscripts, and if you want to be a student of manuscripts, you literally have to travel to the places, sometimes monasteries and libraries where these manuscripts are held.

00:25:45.200 --> 00:25:53.360
And you have to petition for time to spend some number of days or hours analyzing this manuscript.

00:25:53.720 --> 00:25:57.200
You can petition to take pictures of it, all different kinds of things.

00:25:57.640 --> 00:26:10.440
This particular researcher that I did some work with back when I was working for a university said, what I'm going to do is I'm going to petition for that time, and I'm going to create a data set that everyone can benefit from.

00:26:10.440 --> 00:26:12.980
And I'm just going to create this data set.

00:26:13.060 --> 00:26:17.920
I don't have the tools to quite process it yet in every way I want to process it.

00:26:17.920 --> 00:26:33.700
But I'm going to create this data set and hope that it becomes a model of a way that we can go digitize manuscripts and create data sets that kind of build a generation of digital archivists and manuscript experts.

00:26:33.900 --> 00:26:47.660
And so he goes in with this camera rig that he's built, and he moves a point source light around, and he puts different patterns in order to see how the page is not necessarily flat.

00:26:47.660 --> 00:26:50.920
And he can see kind of all the undulations in the surface model.

00:26:50.920 --> 00:26:54.760
He can build kind of an elevation model of the manuscript itself.

00:26:54.760 --> 00:26:57.400
Is that to try to flatten it to project it back?

00:26:57.400 --> 00:26:57.880
No.

00:26:57.880 --> 00:26:59.960
Well, it's not necessarily to flatten it.

00:26:59.960 --> 00:27:03.220
It's just to understand when you're looking at it that it isn't flat.

00:27:03.220 --> 00:27:03.660
Yeah, okay.

00:27:03.760 --> 00:27:08.120
And as you're interpreting it, you know, there's all sorts of crazy things that happen on these manuscripts.

00:27:08.120 --> 00:27:11.860
Like monks would carve their initials into the vellum.

00:27:11.860 --> 00:27:13.280
So this is skin.

00:27:13.280 --> 00:27:21.880
They'd carve their initials into the vellum in hopes that they would go to heaven because their initials were on, you know, page 23 of a particular manuscript.

00:27:21.880 --> 00:27:30.780
And so finding those kind of scratchings on those inscriptions is really hard to do even when you're sitting in a room.

00:27:30.860 --> 00:27:38.280
If you imagine you just walked into, you know, a dimly lit monastery with poor lighting and you're trying to see where this stuff is.

00:27:38.280 --> 00:27:43.640
His data set he's created really makes it easier than it has ever been to look for this stuff.

00:27:43.640 --> 00:27:44.040
Okay.

00:27:44.040 --> 00:27:47.340
And so there's really interesting kind of follow-ons from this.

00:27:47.340 --> 00:27:54.900
But all of humanities is doing the same thing as all these other disciplines did and saying, you know what?

00:27:54.900 --> 00:27:59.260
We can collect data or we can gather data and put it in one place.

00:27:59.260 --> 00:28:04.220
How do we begin to ask, you know, really interesting research questions of it?

00:28:04.220 --> 00:28:14.660
And how can we build our own tools and how can we empower our next generation of researchers to be prepared to build tools that help us understand this stuff better?

00:28:14.660 --> 00:28:15.160
Yeah.

00:28:15.380 --> 00:28:22.920
That definitely gives us a good sense of, like, how the different disciplines might benefit from what you guys are teaching.

00:28:22.920 --> 00:28:27.940
And certainly the general reusable software story is super cool.

00:28:27.940 --> 00:28:30.800
So what are – you mentioned tools.

00:28:30.800 --> 00:28:32.880
What are some of the right tools to be working with?

00:28:32.880 --> 00:28:41.400
Like, people – you know, how often have there been, like, research mistakes or false results based on using the wrong tools or messing this up?

00:28:41.400 --> 00:28:41.980
Yeah.

00:28:41.980 --> 00:28:44.000
I mean, that stuff happens all the time.

00:28:44.000 --> 00:28:47.900
There's this recent – I can't remember exactly what journal it came out in.

00:28:47.900 --> 00:29:03.180
But there was this recent study that said 20% of gene expression data sets in major peer-reviewed papers had errors in them introduced by cutting and pasting gene names into Excel.

00:29:03.180 --> 00:29:08.880
And if you've ever seen gene names, they have these crazy names that have numbers and letters.

00:29:08.880 --> 00:29:10.940
And some of them look like dates.

00:29:11.120 --> 00:29:21.100
And if you've ever cut and pasted data into Excel, you know that Excel kind of just starts making up data types as it sees data.

00:29:21.100 --> 00:29:29.900
And so there have been actual problems in gene analysis based on these gene naming errors.

00:29:29.900 --> 00:29:38.540
By cutting and pasting vectors of gene names into Excel, you mangle your gene vectors, and they don't mean what you think they mean anymore.

00:29:38.540 --> 00:29:47.380
And then you draw upon those and you make conclusions from those false gene names because Excel mangled them as you pasted them.

00:29:47.380 --> 00:29:48.440
Yeah, that sounds painful.

00:29:48.440 --> 00:29:49.220
Yeah.

00:29:49.220 --> 00:29:53.560
That's kind of a model of how we're not always using the right tools, right?

00:29:53.560 --> 00:30:00.140
So the tools that we're using are the tools that we kind of grew up with in graduate school.

00:30:00.520 --> 00:30:11.280
And, you know, it's this sort of self-perpetuating system where the professors learned to do their bioinformatics analysis in Excel maybe or in other tools,

00:30:11.280 --> 00:30:14.180
and they're teaching the next generation to do it in that same way.

00:30:14.640 --> 00:30:22.760
And so our sort of approach is not to say, okay, you should never use Excel or you shouldn't use this tool or you shouldn't use that tool.

00:30:22.760 --> 00:30:34.100
But what is a set of skills and tools that we can teach you that we can really empower you to own as a part of your process so that you are a more effective and impactful researcher?

00:30:34.500 --> 00:30:38.020
And the three broad themes of that are how do you repeat tasks?

00:30:38.020 --> 00:30:42.720
And we say, you know, how do you iterate over directories full of files?

00:30:42.720 --> 00:30:49.260
That's a pretty common thing that if you have that superpower, you're able to increase your research throughput.

00:30:49.260 --> 00:30:54.100
How can you share your code and methods with other researchers?

00:30:54.100 --> 00:31:08.300
And how can you – we don't go all the way into unit testing, but how can you have some level of assertion that the function you wrote does the things you think it does, right?

00:31:08.300 --> 00:31:10.740
And that is an important concept.

00:31:10.740 --> 00:31:13.140
That's almost an ethical concept, right?

00:31:13.140 --> 00:31:22.280
So to be a responsible researcher, you have to understand that your code is doing what you think it's doing and how can you begin to ask that question of your code.

00:31:22.280 --> 00:31:22.800
Sure.

00:31:22.800 --> 00:31:29.360
And code as part of your research project, as part of your paper and your conclusions is becoming more of a thing, right?

00:31:29.360 --> 00:31:37.840
Like there's places you can submit your code to to guarantee that it hasn't changed from when you wrote the paper and all sorts of stuff like that, right?

00:31:37.840 --> 00:31:40.760
And making sure it works is just part of that, I think.

00:31:41.300 --> 00:31:43.940
Yeah, and there's huge problems there.

00:31:43.940 --> 00:31:53.900
I mean, things like containers purport to make some of this easier, things like Docker containers, where if you start thinking – and I spent some time working for an academic library.

00:31:53.900 --> 00:32:01.140
And if you start thinking about, okay, the library has to archive this project, and it's using, let's say, Python 2.7.

00:32:01.140 --> 00:32:03.160
It should be using Python 3, but it's not.

00:32:03.160 --> 00:32:04.520
It's still using Python 2.7.

00:32:04.800 --> 00:32:09.080
And a whole chain of dependencies with custom compiled Fortran, right?

00:32:09.080 --> 00:32:15.840
And you say, okay, we're going to archive this paper, and you don't archive that runtime environment in some way.

00:32:16.080 --> 00:32:23.420
And then 20 years from now, you want to run Python 2.7 with all that huge dependency tree, and you want to get the same result.

00:32:23.420 --> 00:32:25.860
How do you even do that, right?

00:32:25.860 --> 00:32:43.960
That's not a problem we're trying to solve with our workshops yet at the moment, but that's a conversation that's happening in the broader scientific community of how do we articulate what we did in the process of running this code in ways that we can reproduce it at a later date.

00:32:43.960 --> 00:32:45.480
Yeah, that's a really interesting problem.

00:32:45.480 --> 00:32:49.380
I mean, it's one thing to say reproduce it across different systems or whatever.

00:32:49.380 --> 00:32:53.060
It's another to say reproduce it 20, 50, 100 years from now.

00:32:53.060 --> 00:32:54.180
Yep, yep.

00:32:54.180 --> 00:32:56.720
And should we even be trying to do that, right?

00:32:56.720 --> 00:33:06.640
So, you know, if you think about libraries, libraries are these hard drives if you want to use kind of the computationally inclined method.

00:33:06.640 --> 00:33:11.320
And a file begins at one cover and ends at another cover, right?

00:33:11.400 --> 00:33:17.160
And they put them on shelves, which are, you know, volumes within your hard drive or whatever.

00:33:17.160 --> 00:33:20.640
So, right, it's a format they've settled upon.

00:33:20.640 --> 00:33:27.320
Some of them, when you open them up, they have really big glossy pages that spill out that you can fold out or whatever, right?

00:33:27.340 --> 00:33:34.560
But there's this sort of constraint that a library says we will archive these things called books and we will put them on shelves.

00:33:34.560 --> 00:33:41.580
We're still having that conversation of what the digital asset is that we will archive and put on the shelf, right?

00:33:41.580 --> 00:33:44.040
And it's got to be simple, like a book.

00:33:44.040 --> 00:33:45.000
It starts at this cover.

00:33:45.000 --> 00:33:45.880
It ends at that cover.

00:33:46.440 --> 00:33:55.440
And the problem is everything between the covers is so damn complicated nobody can figure out what we're going to put on the shelf.

00:33:55.440 --> 00:33:58.100
Well, it goes 001, 110, 001.

00:33:58.100 --> 00:34:00.260
But other than that, we really don't agree on that.

00:34:00.260 --> 00:34:01.140
Right.

00:34:02.000 --> 00:34:08.180
Yeah, I think, I feel like partly the problem is the world is just changing so fast digitally right now.

00:34:08.180 --> 00:34:15.260
And I feel like as we go farther in the future, there will be some stability, some underlying stability.

00:34:15.260 --> 00:34:18.200
I don't think the change will stop and the innovation will stop.

00:34:18.260 --> 00:34:22.220
But I think there will be some things like, okay, this has been around for 50 years and is continuing to work.

00:34:22.220 --> 00:34:26.080
Like, we can probably go with this for, like, things that have to be ultra stable.

00:34:26.080 --> 00:34:33.240
That's a lot about what the technical bits of these researchers need and what you teach and so on.

00:34:33.240 --> 00:34:40.020
But one of the really important parts is not just to teach classes to people, but actually to build a community, right?

00:34:40.020 --> 00:34:41.040
Do you want to talk about that a bit?

00:34:41.040 --> 00:34:41.360
Yeah.

00:34:41.360 --> 00:34:44.460
So, we train our instructors in our community.

00:34:45.000 --> 00:34:49.760
They come to a workshop and they teach our learners, the people coming to get these skills.

00:34:49.760 --> 00:34:53.200
And we collaborate on open source lessons online.

00:34:53.200 --> 00:35:14.480
And so, those kind of three constituencies, the people who work on lessons, the instructors in our community, and the learners in our community, are all really how we start to build community so that we can have, first and foremost, an impactful workshop that shows off really high-quality teaching.

00:35:14.980 --> 00:35:31.720
And then builds a support structure and community, a community of practices, as it were, at the institution, at the organization, so that you can sustain this kind of future learning, more development of the lessons that are needed, more talking about how to be an impactful instructor.

00:35:32.160 --> 00:35:43.720
And turning instructors into instructors, turning learners into instructors, and really giving people avenues to enter and contribute in many different ways.

00:35:44.120 --> 00:35:53.720
And so, the ways we do that are we invite people who have technical skills but do not have our instructor certification to become helpers at our workshops.

00:35:53.720 --> 00:35:57.740
And a helper is really just someone that helps scale the instructor.

00:35:57.740 --> 00:36:01.320
Remember, we're doing – we're really doing hands-on workshops here.

00:36:01.320 --> 00:36:03.280
We're doing type-along pedagogy.

00:36:03.280 --> 00:36:04.540
We're at the Unix shell.

00:36:04.680 --> 00:36:18.920
Everybody's got a shell prompt open, and they're typing along, and they're going through the pain that is understanding that a space-delimited bash shell environment or a Python environment that gets really picky if you don't put the tabs in the right place.

00:36:19.320 --> 00:36:31.320
It throws you the screen of error messages that are – if you've never seen them before or if you have seen them before but never stopped to kind of interpret them or look at them, you can use help and you can use guidance to this.

00:36:31.320 --> 00:36:44.640
And our helpers are really in the room to help our learners go through that process of learning about what an error message means, trying to look critically at the incantation they typed and figure out what might be wrong with it.

00:36:44.640 --> 00:36:48.560
Programming is one of those things where you basically have to do it to learn.

00:36:48.560 --> 00:36:51.880
Like, you can watch and watch and watch, and you can get more ready to try.

00:36:51.880 --> 00:36:57.320
But until you've actually tried and worked through some kind of problem, you're not there.

00:36:57.320 --> 00:36:59.540
So I think it's great that you're doing the hands-on stuff.

00:36:59.540 --> 00:37:04.400
And so these guys basically look over the shoulders of anyone and see how they're going, walk around the room, something like that.

00:37:04.400 --> 00:37:05.300
Right, exactly.

00:37:05.300 --> 00:37:07.440
And that's their role in the workshop.

00:37:07.440 --> 00:37:12.900
But what's also happening when they're in the workshop is they're seeing an instructor who's engaged and having a good time teaching.

00:37:12.900 --> 00:37:17.860
And our helpers are typically people who have a little bit of these technical skills.

00:37:17.860 --> 00:37:26.180
And we try to request that our helpers consider becoming instructors and going through our instructor training process.

00:37:26.180 --> 00:37:34.140
And so that's kind of the entry method for a lot of people to become instructors in our community is to first become a helper.

00:37:34.140 --> 00:37:44.160
A lot of our learners, too, see this as a way that they can spread these skills to their research lab or to their particular research community that they go to a national conference.

00:37:44.560 --> 00:37:47.880
And they aspire to become helpers and then instructors as well.

00:37:47.880 --> 00:38:04.440
And so we have with these kind of different avenues of onboarding into our community, we have really built a vibrant community that really gives everybody a role in making those workshops really impactful, really fun, really exciting.

00:38:04.780 --> 00:38:13.100
And we invite people to contribute, you know, via Git and GitHub to our lessons online, which are all Creative Commons Attribution.

00:38:13.100 --> 00:38:21.420
We have a course out of about 10 lessons.

00:38:21.420 --> 00:38:22.420
And we're having kind of a lot of time.

00:38:22.420 --> 00:38:30.700
And we're having kind of an ongoing community conversation about what lessons are the appropriate ones in our community to be included in our community.

00:38:30.700 --> 00:38:34.260
What should have their own sort of branding and spin off.

00:38:34.260 --> 00:38:46.260
We've had a recent group called Library Carpentry, which has really created a stack of carpentry skills that aren't programming but are appropriate for a librarian doing the work of a 21st century data-driven librarian.

00:38:46.260 --> 00:38:50.060
And they've really built a vibrant community around that set of lessons.

00:38:50.060 --> 00:38:58.340
But they share the same kind of inviting structure of offering workshops to learners, training people as instructors.

00:38:58.340 --> 00:39:01.060
And we've agreed to do that in the same way.

00:39:01.060 --> 00:39:12.680
And so that kind of gives you a sense of overall our community is really a place to share skills and how you teach and have conversations about how you teach skills workshops.

00:39:12.680 --> 00:39:14.600
Yeah, that sounds really, really great.

00:39:14.600 --> 00:39:17.540
Like not everybody from some research group can go.

00:39:17.640 --> 00:39:23.180
Maybe the principal researcher and maybe one or two other people go and they can take that skill back.

00:39:23.180 --> 00:39:30.320
And because the materials are Creative Commons, they could actually go and do like a little workshop for their people or something like that, right?

00:39:30.320 --> 00:39:30.880
Yeah, yeah.

00:39:30.880 --> 00:39:44.080
And we have professors all over the world who use our workshop lessons as the foundation for the first week or two of skills that they want their students to have in their semester-long courses

00:39:44.080 --> 00:39:49.080
before they dive into kind of a deep dive of particular application of those skills.

00:39:49.080 --> 00:39:49.660
Oh, right.

00:39:49.660 --> 00:39:50.240
Okay, sure.

00:39:50.240 --> 00:39:55.560
So if you're going to teach a class on astronomy, maybe you'll use that to like bootstrap it a little bit.

00:39:55.560 --> 00:39:56.160
Exactly.

00:39:56.160 --> 00:39:56.680
Yeah.

00:39:56.680 --> 00:39:57.760
Hey, everyone.

00:39:57.760 --> 00:40:02.600
Let me take just a quick moment and tell you about a new sponsor of the show, MongoDB University.

00:40:02.600 --> 00:40:05.800
MongoDB is one of the fastest growing job skills on the market.

00:40:05.800 --> 00:40:10.400
Long ago when I was getting into MongoDB, I took one of their free courses on Mongo University.

00:40:10.820 --> 00:40:13.300
It was a great way to get up and running with my first app.

00:40:13.300 --> 00:40:21.580
MongoDB University offers free seven-week courses on MongoDB designed to teach you everything you need to know about how to build a MongoDB-based app.

00:40:21.580 --> 00:40:29.280
This course will cover basic installation, JSON, schema design, querying, inserting data, indexing, and working with the Python driver, of course.

00:40:29.280 --> 00:40:35.640
After completing this course, you should have a good understanding how applications are built on top of MongoDB using Python.

00:40:36.020 --> 00:40:40.480
Plus, you'll have a great foundation for preparing for the MongoDB developer certification exam.

00:40:40.480 --> 00:40:43.820
I hope you can join me as a MongoDB University alumnus.

00:40:43.820 --> 00:40:48.660
Sign up for the free seven-week course at talkpython.fm/Mongo.

00:40:49.540 --> 00:40:57.140
We feel strongly that lessons that are taught by many people are much better than lessons that are taught by a single person.

00:40:57.140 --> 00:41:02.760
And there's this famous adage that no battle plan survives first contact with the enemy.

00:41:03.300 --> 00:41:09.140
The teaching sort of corollary to that is no lesson plan survives first contact with the student.

00:41:09.140 --> 00:41:25.960
And so having lessons that have been taught by many people to many students and are continuously improved through an open contribution model, an open source model, are better lessons than if you sat down and you said, I'm going to teach you Shell today.

00:41:25.960 --> 00:41:28.240
And these are the things you should know about the Shell.

00:41:28.240 --> 00:41:33.600
And so over time, we've built this set of core lessons that have been taught a lot.

00:41:33.600 --> 00:41:35.400
People have had conversations about them.

00:41:35.400 --> 00:41:38.640
They're not perfect, as anyone who's contributed to open source knows.

00:41:38.640 --> 00:41:46.260
Just because a project has a lot of excitement around it and a lot of people contributing to it doesn't mean that everything about it is perfect, right?

00:41:46.360 --> 00:41:53.200
There's always things that crop up because of the nature of multi-party contribution systems.

00:41:53.200 --> 00:42:06.940
But overall, there is a deep conversation happening about what should be there and what shouldn't be there and what the ideals are of that community and what they're trying to advance by that project.

00:42:06.940 --> 00:42:08.780
And our lessons embody that.

00:42:08.780 --> 00:42:09.540
Yeah, that's cool.

00:42:09.540 --> 00:42:15.020
And you guys have like a retrospective or something after a bunch of people teach one week or something like this, yeah?

00:42:15.200 --> 00:42:26.460
Yeah, we have these debriefing sessions where everyone in the world who's taught a workshop in the last week or so will come to an online video call and talk about what worked for them, what didn't work for them.

00:42:26.460 --> 00:42:28.540
Maybe it was their first time teaching Git.

00:42:28.540 --> 00:42:31.060
They had taught Python before, but they'd never taught Git.

00:42:31.060 --> 00:42:36.360
And they say, you know, I just failed spectacularly when I was trying to tell people how to resolve conflicts, right?

00:42:36.360 --> 00:42:39.500
I can't even resolve my own conflicts in Git very well.

00:42:39.500 --> 00:42:40.300
And it drives me.

00:42:40.300 --> 00:42:41.800
Well, I'm still confused about remaze.

00:42:41.800 --> 00:42:42.480
Right.

00:42:42.480 --> 00:42:43.600
Right.

00:42:43.600 --> 00:42:49.540
Well, our lesson doesn't get into rebase, but, you know, maybe our advanced lesson will one day.

00:42:49.540 --> 00:42:51.280
That'll come up eventually.

00:42:51.280 --> 00:42:51.940
Yeah.

00:42:51.940 --> 00:42:52.640
Nice.

00:42:52.640 --> 00:42:57.560
One thing I'd like to bring it back to you is just a concrete example of all of this.

00:42:57.560 --> 00:43:03.960
I recently had Jake Vanderplass from University of Washington and the eScience Research Institute up there.

00:43:03.960 --> 00:43:05.620
And he's the astrophysicist.

00:43:05.620 --> 00:43:06.780
That was episode 81.

00:43:07.220 --> 00:43:09.220
And you guys are actually doing a lot of work with them up there.

00:43:09.220 --> 00:43:16.560
I think they're doing some really cool stuff with merging academics and science along with real data science and programming.

00:43:16.560 --> 00:43:22.360
At the University of Washington, yeah, with the eScience Center, we've trained a ton of instructors up there.

00:43:22.360 --> 00:43:26.280
They've actually been – I've been in this job a little over a year now.

00:43:26.280 --> 00:43:40.020
And when I first arrived, they were so enthusiastic and excited to get more of their people trained as instructors because it's really great for their careers being affiliated with the eScience Center, teaching workshops to people.

00:43:40.020 --> 00:43:46.160
They've really created this buzz on their campus about eScience being for everyone in all disciplines.

00:43:46.160 --> 00:43:48.440
They're running quarterly workshops.

00:43:48.440 --> 00:43:53.860
They have something like 25 instructors on campus now so they can run workshops whenever they want to.

00:43:53.860 --> 00:44:09.400
And they've really got their postdocs and affiliated graduate students that are affiliated with the eScience Center excited about the community building and how, in the process of you teaching other people the skills that you have as a data-driven researcher,

00:44:09.400 --> 00:44:11.700
you get better at your own skills.

00:44:11.700 --> 00:44:15.960
And so that has been a really neat, evolving story.

00:44:15.960 --> 00:44:18.940
They're always pushing into new research communities.

00:44:18.940 --> 00:44:23.140
We're always hearing that they've got instructors coming from different disciplines.

00:44:23.140 --> 00:44:36.740
And they're really building kind of this neat center on campus, which is the literal place you come to to ask questions about data-driven research and skills that you need to tackle research problems.

00:44:36.740 --> 00:44:44.300
And software carpentry has become kind of the entryway into that conversation to say, hey, we've got this workshop.

00:44:44.300 --> 00:44:46.140
It's a way to begin to learn these skills.

00:44:46.140 --> 00:44:50.880
And, oh, we've got these other programs and structures as well that can support you.

00:44:50.880 --> 00:44:51.940
Yeah, that sounds really cool.

00:44:51.940 --> 00:44:54.340
I think that whole eScience Institute sounds great.

00:44:54.340 --> 00:44:58.100
Like I said, I wish that it was around when I was in grad school.

00:44:58.100 --> 00:44:59.980
But, you know, it's a different time.

00:45:01.340 --> 00:45:02.600
So this all sounds good.

00:45:02.600 --> 00:45:03.820
What do people want to get involved?

00:45:03.820 --> 00:45:05.160
Like what do they do?

00:45:05.160 --> 00:45:07.260
We have a couple of ways to get involved.

00:45:07.260 --> 00:45:21.600
Software-carpentry.org slash join is a website that has a couple of links on it about how to join our mailing list, how to get on our newsletter release, what are going on in terms of our community events and calendars.

00:45:21.600 --> 00:45:25.300
We typically have a monthly community call that people can attend.

00:45:25.300 --> 00:45:30.480
And that's a way to really become a volunteer and a contributor to the community.

00:45:30.480 --> 00:45:46.120
We also have a partnership program or a membership program where your organization, if you are at an organization that would like to bring software carpentry, instructor training, and capacity building services to your organization, you can become a member organization.

00:45:46.120 --> 00:45:48.340
What's an example of a member organization?

00:45:48.340 --> 00:45:50.420
Is that a university or what is that?

00:45:50.420 --> 00:45:54.140
Yeah, so it can be everything from a research lab to a university.

00:45:54.140 --> 00:45:58.280
For example, the eScience Institute is a member organization of Software Carpentry.

00:45:58.280 --> 00:46:04.500
And what we do with them is we make sure they get a consistent amount of instructor training every year.

00:46:04.500 --> 00:46:18.560
We give them a seat on what we call our advisory council, which is a body that helps to set the direction of where our priorities are in terms of lesson development, how we run the community, how we handle things like what our code of conduct is.

00:46:18.560 --> 00:46:23.500
And how we spread and how we spread and how we spread and how we spread and where we spread it to.

00:46:23.500 --> 00:46:29.300
So we really give people a seat at the community steering wheel through the advisory council.

00:46:29.300 --> 00:46:30.160
Oh, yeah. Excellent.

00:46:30.340 --> 00:46:55.000
Yeah. So partner organizations range everything from this pan-European collective of 20 countries trying to enhance bioinformatics infrastructure for all of Europe at that scale, like a multinational scale, all the way down to one particular researcher's graduate lab who wants every one of his graduate students or her graduate students to go through software carpentry training.

00:46:55.000 --> 00:46:59.980
Wants every one of them by the time they finish their PhD to be an instructor in our community.

00:46:59.980 --> 00:47:02.940
And so broad scale.

00:47:02.940 --> 00:47:09.860
But the really common thread is that they want to build capacity around these kind of data driven research skills.

00:47:09.860 --> 00:47:10.520
Sounds great.

00:47:10.520 --> 00:47:11.660
So where are you guys going?

00:47:11.660 --> 00:47:14.480
What's the future for software carpentry look like?

00:47:14.720 --> 00:47:20.680
Yeah. Right now we're kind of in a mode where we're trying to plant new instructional communities all over the world.

00:47:20.680 --> 00:47:24.900
We're trying to spread into developing world countries.

00:47:24.900 --> 00:47:28.800
We're trying to figure out how our business model works in those places.

00:47:28.800 --> 00:47:36.240
Right now our business model is really these paying partner organizations and helping to bring workshops to organizations.

00:47:36.240 --> 00:47:40.220
So we're in this kind of expansion of instructional community.

00:47:40.220 --> 00:47:43.240
We want to train as many instructors as we can around the world.

00:47:43.240 --> 00:47:49.600
To do that, we've got to build these memberships and partnerships in order to support our organization to do that.

00:47:49.600 --> 00:47:54.740
Long term, you know, as we have these vibrant instructional communities around the world,

00:47:54.740 --> 00:47:59.440
we really want to support the growth of the lessons that people need.

00:47:59.580 --> 00:48:07.660
So I kind of have this dream of a big chart on the wall where you walk into graduate school and you look on the wall and it's seven or eight workshops,

00:48:07.660 --> 00:48:11.780
you know, with a dotted line through them that tell you start here and over here,

00:48:11.780 --> 00:48:14.580
you'll have some machine learning and data visualization skills.

00:48:14.580 --> 00:48:18.740
Right. Or if you're, you know, you want to go into a different discipline,

00:48:18.740 --> 00:48:24.760
you really want to get into all the tooling and continuous integration and all of those kinds of things.

00:48:24.760 --> 00:48:29.640
You really want to get smart on the software engineering tools side of things, follow this dotted line.

00:48:29.640 --> 00:48:31.480
You know, that's going to take a long time.

00:48:31.480 --> 00:48:37.960
But the first thing we need to do is get more people in the community talking about these lessons that we have,

00:48:37.960 --> 00:48:41.980
creating the lessons that we don't have and creating that conversation.

00:48:41.980 --> 00:48:47.740
And then we can kind of step into this rapid expansion of the number of lessons we have.

00:48:47.740 --> 00:48:50.260
And so that's kind of the goal at the moment.

00:48:50.460 --> 00:48:54.860
Our overall goal is really to, you know, we're a nonprofit.

00:48:54.860 --> 00:48:59.820
Our success are kind of basically in our formation statement.

00:48:59.820 --> 00:49:03.520
We've said once everybody has all these skills, we should cease to exist.

00:49:03.520 --> 00:49:03.860
Right.

00:49:03.860 --> 00:49:06.460
We're a long, long way away from that.

00:49:06.460 --> 00:49:08.860
We aspire to a world where we're not needed.

00:49:08.860 --> 00:49:09.640
Exactly.

00:49:09.640 --> 00:49:10.240
Yeah.

00:49:10.240 --> 00:49:14.580
So that's our long term goal is to go out of existence.

00:49:14.760 --> 00:49:18.880
That being said, there's a lot of work to do between here and there.

00:49:18.880 --> 00:49:20.260
And yeah.

00:49:20.260 --> 00:49:21.500
That's a great, great goal.

00:49:21.500 --> 00:49:26.880
You said you guys are a nonprofit, but you still got to make money to support some of your efforts and so on.

00:49:26.880 --> 00:49:28.320
What's the business model look like?

00:49:28.320 --> 00:49:29.680
You talked about the member organizations.

00:49:29.680 --> 00:49:30.840
They're somehow involved, right?

00:49:31.000 --> 00:49:31.240
Yeah.

00:49:31.240 --> 00:49:33.840
So member organizations pay us an annual fee.

00:49:33.840 --> 00:49:37.540
And they're typically universities, national labs, research networks.

00:49:37.540 --> 00:49:45.680
And they pay this annual fee to both get instructor training and to help kind of steer the community and the resources we have as a community.

00:49:45.680 --> 00:49:51.300
So some things we do are, for example, every workshop we run has an assessment survey.

00:49:51.300 --> 00:50:00.460
And that assessment survey is a pre-workshop and post-workshop assessment that can help you understand kind of the boost that the workshop had on the workshop attendees.

00:50:00.460 --> 00:50:09.560
So these are all things that if you were someone sitting at an organization trying to build a training arm of your organization, it would be very expensive for you to build.

00:50:09.560 --> 00:50:14.560
But we try to spread that across the member organizations with a modest annual fee.

00:50:14.560 --> 00:50:21.740
And we build in those kinds of services and structures into our lessons, into the lessons that we support.

00:50:21.740 --> 00:50:24.800
And so that's one part of our revenue model.

00:50:24.800 --> 00:50:33.040
The other part is when we bring workshops to new communities, we charge a fee to help get our instructors there.

00:50:33.300 --> 00:50:39.600
We don't pay for the travel, but we do the coordination to bring instructors to your particular site.

00:50:39.600 --> 00:50:44.900
So, for example, if you, you know, so the Department of Physics and then an astronomer said,

00:50:44.900 --> 00:50:49.200
I'd really like to have a software carpentry workshop in the spring of 2017.

00:50:49.200 --> 00:50:51.040
They would contact us.

00:50:51.040 --> 00:50:58.800
We would find some instructors that were appropriate for teaching the skills that they wanted, the lessons that they wanted for that constituency.

00:50:59.480 --> 00:51:04.140
And they would pay us a finder's fee and kind of a workshop fee.

00:51:04.140 --> 00:51:06.800
And they would pay the travel for those instructors.

00:51:06.800 --> 00:51:08.900
All of our instructors volunteer.

00:51:08.900 --> 00:51:13.460
These volunteer instructors really get a tremendous benefit.

00:51:13.460 --> 00:51:19.220
We have, maybe we can link in the show notes, there's an impact of instructor report,

00:51:19.220 --> 00:51:26.720
which is 40 pages of qualitatively coded responses of our 265 respondents at the time about a year ago,

00:51:26.720 --> 00:51:33.180
telling us really how being an instructor in the community has boosted their career, has boosted their science,

00:51:33.180 --> 00:51:35.600
has boosted their technical capabilities.

00:51:35.600 --> 00:51:38.280
And it really is a virtuous cycle.

00:51:38.280 --> 00:51:39.280
Yeah, that's cool.

00:51:39.280 --> 00:51:44.220
It definitely would make you stand out from all the other graduating scientists to say,

00:51:44.320 --> 00:51:47.320
Oh, yeah, and I teach this to all around the world, all these people.

00:51:47.320 --> 00:51:52.660
Like, it's, you know, I've done a lot of training in the software developer space in person and virtual and whatnot.

00:51:52.660 --> 00:51:55.000
But it makes a huge difference.

00:51:55.000 --> 00:51:59.620
The connections you build from meeting all the students, the experience you build,

00:51:59.620 --> 00:52:05.160
the depth of knowledge you get compared to just knowing how to do something with code or the tools,

00:52:05.160 --> 00:52:07.140
but understanding them, things like that.

00:52:07.140 --> 00:52:07.780
It's great.

00:52:08.320 --> 00:52:11.960
Now, I saw on your site that you do have some videos that people can go watch.

00:52:11.960 --> 00:52:13.680
That's not the main thing you guys do.

00:52:13.680 --> 00:52:14.760
It's not like video training.

00:52:14.760 --> 00:52:15.840
These are mostly live, right?

00:52:15.840 --> 00:52:21.300
Live videos are really demonstrations of some of our senior instructors,

00:52:21.300 --> 00:52:25.060
pedagogical classroom management kinds of practices.

00:52:25.060 --> 00:52:28.360
Yes, they are teaching the topics and the skills.

00:52:28.360 --> 00:52:36.100
And yes, they are exhaustive in the sense that the videos are the full workshop or full modules of the workshop.

00:52:36.100 --> 00:52:42.060
But we really feel strongly that the live instruction and the live experience,

00:52:42.060 --> 00:52:45.980
plus having helpers available to help you in the room.

00:52:45.980 --> 00:52:50.860
We use a system of sticky notes where you put a green sticky note on your laptop screen,

00:52:50.860 --> 00:52:52.000
on the backside of your screen.

00:52:52.000 --> 00:52:56.460
If you've solved the problem we've asked you to solve and it's working,

00:52:56.460 --> 00:53:01.800
and you put a red sticky note up if you haven't been able to solve it or you have a question.

00:53:01.800 --> 00:53:06.420
And our helpers that are in the room, we have one helper for every 10 people in the room,

00:53:06.420 --> 00:53:10.680
are really going around the room and helping you with your problems as they arise.

00:53:10.680 --> 00:53:11.800
That's really clever.

00:53:11.800 --> 00:53:14.480
I've done a lot of the workshop stuff that you're talking about,

00:53:14.480 --> 00:53:15.960
but we never had sticky notes.

00:53:15.960 --> 00:53:16.900
That's a great idea.

00:53:16.900 --> 00:53:19.700
That's something that we've been doing for quite some time.

00:53:19.700 --> 00:53:24.680
And we've even had some people create a third sticky note, a blue one,

00:53:24.680 --> 00:53:26.620
which is speed up or slow down.

00:53:26.620 --> 00:53:28.180
I think it's slow down, right?

00:53:28.180 --> 00:53:30.420
So you're talking too fast or you're teaching too fast.

00:53:30.420 --> 00:53:34.660
And so if you look out in the room of 40 people and 10 people have a blue one up,

00:53:34.660 --> 00:53:38.000
you know, to kind of pace it down a little bit, kinds of things.

00:53:38.000 --> 00:53:40.140
So yeah, it's a great system.

00:53:40.140 --> 00:53:44.200
We're really trying to have a lot of fun as an instructor

00:53:44.200 --> 00:53:48.880
and share our passion for these tools, really to share our experience of how

00:53:48.880 --> 00:53:51.700
maybe we learned about me as a graduate student.

00:53:51.700 --> 00:53:55.540
I can remember having a stack of Landsat files, satellite image files,

00:53:55.540 --> 00:54:00.440
and needing to do a particular Unix command line tool applied to it.

00:54:00.440 --> 00:54:04.120
And, you know, when you write that for loop that gets you to iterate over it

00:54:04.120 --> 00:54:08.180
and you can go have a coffee and it runs for three more days

00:54:08.180 --> 00:54:09.820
and then gets all that work done, you're like,

00:54:09.860 --> 00:54:12.920
oh my God, how do people do it without this?

00:54:12.920 --> 00:54:14.320
And so we...

00:54:14.320 --> 00:54:16.840
They just can't solve those problems, basically, right?

00:54:16.840 --> 00:54:17.380
That's too much.

00:54:17.380 --> 00:54:18.260
Right, right.

00:54:18.260 --> 00:54:20.580
So when you can share that passion and enthusiasm

00:54:20.580 --> 00:54:23.200
about how you solved some particular problem,

00:54:23.200 --> 00:54:27.000
for me, that is really what's so exciting about teaching.

00:54:27.000 --> 00:54:28.980
I came up as an instructor in the community.

00:54:28.980 --> 00:54:32.300
I taught something like 11 workshops in two years

00:54:32.300 --> 00:54:34.440
as an instructor in the community.

00:54:34.440 --> 00:54:37.460
And really, it's just a lot of fun.

00:54:37.880 --> 00:54:40.420
And you give back, you build up people,

00:54:40.420 --> 00:54:44.940
you're impacting and empowering them to do really awesome research.

00:54:44.940 --> 00:54:46.020
Wow, that's awesome.

00:54:46.020 --> 00:54:49.660
Well, I think we might be getting to the end of the show.

00:54:49.660 --> 00:54:52.700
We're more or less out of time, but it sounds like such a cool project.

00:54:52.700 --> 00:54:57.140
And the fact that the content is open source, I think it's really great.

00:54:57.140 --> 00:54:58.960
So nice work.

00:54:58.960 --> 00:54:59.520
Yeah.

00:54:59.520 --> 00:55:03.380
Before we hit the road, let me ask you two final questions.

00:55:03.380 --> 00:55:05.040
Of course, I always ask my guests.

00:55:05.420 --> 00:55:05.760
Uh-huh.

00:55:05.760 --> 00:55:09.200
There are now over 90,000 PyPI packages out there.

00:55:09.200 --> 00:55:10.820
A crazy number, right?

00:55:10.820 --> 00:55:11.460
It just keeps growing.

00:55:11.460 --> 00:55:14.720
So what are some of your favorites that you think people should know about?

00:55:14.720 --> 00:55:21.100
These days, I do a lot of preparing documents, like legal agreements and things like that.

00:55:21.100 --> 00:55:26.020
So in order to do that, I use cookie cutter a whole heck of a lot,

00:55:26.020 --> 00:55:28.800
and Jinja templates to fill in documents.

00:55:28.800 --> 00:55:29.740
All right.

00:55:29.740 --> 00:55:31.180
So that's interesting.

00:55:31.280 --> 00:55:34.620
I know about cookie cutter, it's like templates for building projects,

00:55:34.620 --> 00:55:37.900
like you can build a Django project or some other type of project.

00:55:37.900 --> 00:55:40.320
You can pre-bake that in a cookie cutter.

00:55:40.320 --> 00:55:41.520
How does that work with documents?

00:55:41.520 --> 00:55:46.240
For every agreement that I create, and maybe this isn't the right way to do it,

00:55:46.240 --> 00:55:47.300
but this is the way I do it.

00:55:47.300 --> 00:55:52.280
I create a little bit of a YAML slug that is all the things I want to fill in to that document.

00:55:53.160 --> 00:56:00.200
And then cookie cutter kind of places everything in the right directory for that agreement.

00:56:00.200 --> 00:56:02.240
Every agreement is a little bit different.

00:56:02.240 --> 00:56:05.500
I have to create a new directory with the template every time,

00:56:05.500 --> 00:56:10.060
because the template isn't necessarily the same for every single agreement.

00:56:10.060 --> 00:56:11.960
The template can kind of change a little bit.

00:56:11.960 --> 00:56:17.460
But the hard part, the arduous part, if I did this manually, was to fill in all those fields.

00:56:18.000 --> 00:56:21.220
And so cookie cutter kind of drops everything in place.

00:56:21.220 --> 00:56:30.100
It drops the markdown template, which I use pandoc to walk into an ODT or a docx or a PDF,

00:56:30.100 --> 00:56:31.160
whatever people want.

00:56:31.160 --> 00:56:35.460
And so cookie cutter for me is the way that when I have a new partnership or a new membership,

00:56:35.460 --> 00:56:38.380
I'm going to sign, I say cookie cutter, the name of the organization,

00:56:38.380 --> 00:56:41.280
or cookie cutter, the name of the cookie cutter directory.

00:56:41.280 --> 00:56:44.180
And it kind of prompts me to fill in all those YAML fields.

00:56:44.180 --> 00:56:46.120
Oh, that's really, really, really cool.

00:56:46.760 --> 00:56:47.060
All right.

00:56:47.060 --> 00:56:50.860
And for editing, if you're going to write some Python code or any code, really,

00:56:50.860 --> 00:56:52.420
what editor do you open up?

00:56:52.420 --> 00:56:54.560
I'm a VI kind of guy.

00:56:54.560 --> 00:57:00.540
I've never, you know, achieved VI ninja skills with commands, you know,

00:57:00.540 --> 00:57:03.040
four or five letters long or anything like that.

00:57:03.040 --> 00:57:10.380
But things like magic, like delete inside quotations or parentheses are just like magical to me.

00:57:10.380 --> 00:57:15.060
And I've learned a couple of things that help me move around more efficiently in VI

00:57:15.060 --> 00:57:16.340
than I can anywhere else.

00:57:16.560 --> 00:57:22.240
And it's on every freaking system anywhere, no matter if your terminal emulator is working

00:57:22.240 --> 00:57:23.020
right or not.

00:57:23.020 --> 00:57:23.920
It just works.

00:57:23.920 --> 00:57:30.120
So back in the dark ages of telnetting into systems that you didn't even know what the system

00:57:30.120 --> 00:57:34.500
was, VI would be there to hold under your pillow at night.

00:57:34.500 --> 00:57:38.140
So I've just always gone for that.

00:57:38.640 --> 00:57:39.220
That's cool.

00:57:39.220 --> 00:57:44.140
And a lot of the popular editors that are not VI, many of them have VI bindings as well.

00:57:44.140 --> 00:57:47.120
So you can carry it along even if you go somewhere else.

00:57:47.120 --> 00:57:54.200
You can read your Gmail with J and K to scroll up and down, you know, just to feel like you're at home.

00:57:54.200 --> 00:57:54.880
That's right.

00:57:54.880 --> 00:57:57.520
I think I was just doing that like right before we started talking today.

00:57:57.520 --> 00:57:58.000
Awesome.

00:57:58.380 --> 00:57:58.680
All right.

00:57:58.680 --> 00:57:59.640
So final call to action.

00:57:59.640 --> 00:58:00.880
People want to get involved.

00:58:00.880 --> 00:58:01.900
Like they want to learn more.

00:58:01.900 --> 00:58:02.480
What's the story?

00:58:02.480 --> 00:58:04.120
You can subscribe to our newsletter.

00:58:04.660 --> 00:58:07.240
It's a monthly newsletter at the moment.

00:58:07.240 --> 00:58:09.660
It may be slightly more periodic in the future.

00:58:09.660 --> 00:58:16.100
You also in our join page linked to before we have a pretty active discuss mailing list for

00:58:16.100 --> 00:58:21.660
people who are interested in kind of pedagogical discussions and how to teach programming skills.

00:58:21.660 --> 00:58:27.160
You can host a workshop at your organization and you can go to our website and find how to

00:58:27.160 --> 00:58:27.840
host a workshop.

00:58:27.840 --> 00:58:33.760
And you can also take the next step, which is to really get your organization to become a

00:58:33.760 --> 00:58:37.980
member organization and build a community of instructors at your local organization.

00:58:37.980 --> 00:58:41.840
Feel free to reach out to me directly on Twitter or email.

00:58:41.840 --> 00:58:45.600
And I'll put those links in the, you know, like your contact info and stuff in the show notes.

00:58:45.600 --> 00:58:46.340
That's really cool.

00:58:46.340 --> 00:58:46.840
Okay.

00:58:46.840 --> 00:58:47.340
Excellent.

00:58:47.340 --> 00:58:47.640
Awesome.

00:58:47.640 --> 00:58:53.380
Well, I'm really glad to see what you guys are doing to create more creators, fewer consumers

00:58:53.380 --> 00:58:55.860
in the world of science and software.

00:58:55.860 --> 00:58:56.880
So nice work.

00:58:56.880 --> 00:58:57.640
Very cool stuff.

00:58:57.640 --> 00:58:59.700
Well, thank you, Michael, for the time.

00:58:59.700 --> 00:59:02.140
And I'm excited to contribute.

00:59:02.320 --> 00:59:07.700
I know this, this shows a little bit off the beaten path in terms of talking tools and

00:59:07.700 --> 00:59:12.780
Python systems, but this is an important kind of foundation that can grow the community

00:59:12.780 --> 00:59:17.300
of contributors to other Python projects and other parts of the Python ecosystem.

00:59:17.300 --> 00:59:21.780
So I'm excited to have had the time to have this conversation with you.

00:59:21.780 --> 00:59:22.260
Yeah.

00:59:22.260 --> 00:59:23.400
Well, it was great to have you here.

00:59:23.520 --> 00:59:24.920
Thank you, Jonah, and see you later.

00:59:24.920 --> 00:59:25.420
All right.

00:59:25.420 --> 00:59:25.780
Cheers.

00:59:25.780 --> 00:59:29.740
This has been another episode of Talk Python To Me.

00:59:29.740 --> 00:59:32.560
Today's guest has been Jonah Duckles.

00:59:32.560 --> 00:59:35.900
And this episode has been sponsored by Rollbar and MongoDB University.

00:59:35.900 --> 00:59:37.800
Thank you both for supporting the show.

00:59:37.800 --> 00:59:41.020
Rollbar takes the pain out of errors.

00:59:41.440 --> 00:59:45.980
They give you the context and insight you need to quickly locate and fix errors that might

00:59:45.980 --> 00:59:48.740
have gone unnoticed until your users complain, of course.

00:59:48.740 --> 00:59:54.980
As Talk Python To Me listeners, track a ridiculous number of errors for free at rollbar.com slash

00:59:54.980 --> 00:59:55.820
talkpythontome.

00:59:55.820 --> 01:00:01.820
Get the skills you need to build your Python apps on top of the most successful and in-demand

01:00:01.820 --> 01:00:04.060
document database at MongoDB University.

01:00:04.600 --> 01:00:08.140
Take a free class by visiting talkpython.fm/Mongo.

01:00:08.140 --> 01:00:11.160
Are you or a colleague trying to learn Python?

01:00:11.160 --> 01:00:15.780
Have you tried books and videos that just left you bored by covering topics point by point?

01:00:15.780 --> 01:00:21.420
Well, check out my online course, Python Jumpstart by Building 10 Apps at talkpython.fm slash

01:00:21.420 --> 01:00:24.420
course to experience a more engaging way to learn Python.

01:00:24.420 --> 01:00:29.180
And if you're looking for something a little more advanced, try my Write Pythonic Code course

01:00:29.180 --> 01:00:31.740
at talkpython.fm/pythonic.

01:00:33.080 --> 01:00:34.800
Be sure to subscribe to the show.

01:00:34.800 --> 01:00:37.000
Open your favorite podcatcher and search for Python.

01:00:37.000 --> 01:00:38.240
We should be right at the top.

01:00:38.240 --> 01:00:44.020
You can also find the iTunes feed at /itunes, Google Play feed at /play, and

01:00:44.020 --> 01:00:47.520
direct RSS feed at /rss on talkpython.fm.

01:00:47.520 --> 01:00:52.640
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

01:00:52.640 --> 01:00:57.320
Corey just recently started selling his tracks on iTunes, so I recommend you check it out at

01:00:57.320 --> 01:00:59.320
 talkpython.fm/music.

01:00:59.500 --> 01:01:03.760
You can browse his tracks he has for sale on iTunes and listen to the full-length version

01:01:03.760 --> 01:01:04.720
of the theme song.

01:01:04.720 --> 01:01:06.760
This is your host, Michael Kennedy.

01:01:06.760 --> 01:01:08.040
Thanks so much for listening.

01:01:08.040 --> 01:01:09.240
I really appreciate it.

01:01:09.240 --> 01:01:11.380
Smix, let's get out of here.

01:01:19.380 --> 01:01:20.380
Bye.

01:01:20.380 --> 01:01:21.380
Bye.

01:01:21.380 --> 01:01:22.380
Bye.

01:01:22.380 --> 01:01:23.380
Bye.

01:01:23.380 --> 01:01:25.440
I'm first.

01:01:25.440 --> 01:01:28.440
I'm first.

01:01:28.440 --> 01:01:31.440
I'm first.

01:01:31.440 --> 01:01:33.360
developers, developers, developers.

01:01:33.360 --> 01:01:33.620
.

