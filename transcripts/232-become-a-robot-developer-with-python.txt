00:00:00 When you think about the types of jobs you can get as a Python developer,

00:00:03 you probably weigh the differences between data science and web development.

00:00:07 But did you consider programming robots in Python? And not just toys, but serious productive

00:00:12 machines. It turns out there's a gap in the industry where we could use more Python developers

00:00:17 in robotics. That's why I'm happy to have Ricardo Telles here to give us an overview of the software

00:00:22 development side of robotics programming with Python. This is Talk Python To Me, episode 232,

00:00:28 recorded September 11th, 2019.

00:00:31 Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:00:49 and the personalities. This is your host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy.

00:00:54 Keep up with the show and listen to past episodes at talkpython.fm.

00:00:58 And follow the show on Twitter via at talkpython.

00:01:00 This episode is brought to you by Linode and Tidelift. Please check out what they're offering

00:01:05 during their segments. It really helps support the show.

00:01:07 Ricardo, welcome to Talk Python To Me.

00:01:09 Thank you very much. It's my pleasure.

00:01:11 Yeah, it's great to have you here. It has been way too long since we've talked about robotics

00:01:16 and Python on the podcast. We were just talking, and I think it's been at least four years since the

00:01:23 last time we've talked about this. And the world is, of course, changing so much in technology and

00:01:30 Python and robotics as well. So I'm really excited to have you on the show to talk about that.

00:01:34 Yeah, it's my pleasure. I think that is, was the time to start, to continue talking about robotics

00:01:39 in Python. Yeah.

00:01:40 Absolutely. Absolutely. Now, before we get to that, let's start with your personal story. How'd you get

00:01:45 into programming in Python?

00:01:46 Well, I started programming in Python when I was doing my PhD, but there was just kind of,

00:01:53 you know, for only for making this small experiment work. So it was actually, it was not programming

00:01:58 Python, just copy pasting.

00:02:00 And what was your PhD in?

00:02:02 It's in artificial intelligence. I was using neural networks to move robots,

00:02:06 to make them learn how to move and so on.

00:02:09 Super cool. Okay.

00:02:10 That was just the beginning. But then after that, then I started working to a company that

00:02:15 is called Power Robotics about, we were building their humanoid robots. And then there is where I

00:02:22 started to program more things in Python, especially when we started to use ROS, the robot operating

00:02:30 system. So at that point in time, because ROS provides you this interface with Python,

00:02:35 and it was quite useful. So that's when I really started to program in Python.

00:02:39 Sure. What were you programming before you started using Python significantly?

00:02:43 Oh, and C++.

00:02:44 C++.

00:02:44 Basically C++, yeah.

00:02:46 It's for the company in robotics. C++ is very important because usually you need to have

00:02:53 very fast products. So, I mean, your robot has to deliver very fast, for example, let's say,

00:03:00 face recognition, a speech recognition, control of the movement. So that requires as much as

00:03:06 possible. And for that, then it's C++.

00:03:09 Yeah, absolutely. You think about the performance of Python, and I think it's a really interesting

00:03:13 story because pure Python, the performance is not amazing. But a lot of times what you're doing

00:03:19 with Python is either you're talking to some package that has like a lot of the behaviors

00:03:25 in C or C++, or you're talking to other systems that themselves are running in C or some other

00:03:32 language like that, like a database or whatever. All right. So I do think it's really interesting.

00:03:37 Do you see people mixing Python and C++ or even things like Cython?

00:03:43 In robotics?

00:03:43 Yeah, yeah. In robotics.

00:03:44 Definitely. Especially if you are using ROS. So with ROS, that is perfectly created. This

00:03:51 integration, you can have slow nodes, for example, that are like a kind of behavior changing nodes

00:03:59 or changing the behavior of the robot based on some pattern recognition or something. So the pattern

00:04:06 recognition system will run in C++ because it needs to move very fast. But this behavior system

00:04:13 doesn't need to be to go to the millisecond, you know, it could be half a second in order to change

00:04:19 the behavior. So that could be running in Python. And then it simplifies a lot your work and your

00:04:26 maintenance of the code.

00:04:27 Absolutely. And even controlling stuff, probably, right? Like if I'm going to orchestrate,

00:04:32 hey, C++ layer, get this image, tell me whether you recognize a thing, and then let me decide in Python

00:04:39 what to do and kind of orchestrate the lower levels. I think that might also be common. Yeah,

00:04:44 exactly. That's exactly the case. That what you mentioned is exactly the case. And by using ROS,

00:04:49 you don't actually care what one program is written in another, they can talk transparently. So they don't

00:04:57 know if the other one is written, and they interchange the information transparently.

00:05:03 Yeah, that sounds really cool. We're going to dig into more of that for sure. But let's just really quickly tell folks what you do

00:05:09 day to day so they know your perspective, where you're coming from, your experience.

00:05:13 Okay, so I was working on that company, Park Robotics, for building the humanoid robots. But then I decided to build my own

00:05:20 startup. It's about developing programs for robots based on ROS. So we have a platform online

00:05:27 where you can develop those programs, create your programs in ROS, either C++ or Python,

00:05:33 and then you test on the same platform by using simulations of the actual real robots. So you've

00:05:42 already provided this, so the integration is very, very simple. You don't need to install anything in

00:05:47 your computer and you operate directly with the web browser. You create the programs there with the

00:05:53 environment that we provide and you test it on the simulation. And once you have this running,

00:05:58 then you can switch the code into, you can deploy the code into the real robot. Actually, you can test,

00:06:05 you can switch your code running from the simulation and then now let's click and switch to the real

00:06:12 robot until everything works perfectly.

00:06:14 That sounds like a really fun job actually to be working on. What's the name of the company? How

00:06:19 do people find this place?

00:06:21 Okay. Well, our company is called The Construct. So many people ask us, why is this name? So

00:06:29 basically, The Construct, we wanted to build this place where robots can learn because there is a

00:06:39 simulated world where they can play and they can try and so on. And then that's a construct concept that is

00:06:45 in the movie of The Matrix. You know, The Matrix, when they get in, the world is built by the construct.

00:06:52 And actually, our logo is one of the sofas of the chairs where Morpheus is explaining to the Neo that,

00:07:00 hey, that's the construct and so on.

00:07:02 The famous red pill, blue pill scene.

00:07:05 Yeah, that chair. Exactly.

00:07:07 Oh, cool. Yeah. I see it now. And it's the constructsim.com. I'll be sure to link to it in the show notes for

00:07:13 people. That's really cool. Yeah. So that sounds like a really fun project to be working on. And I

00:07:18 think this idea of having a simulation definitely has to democratize robotics, right?

00:07:24 It's one thing to be able to write a little code, to look at an image and do something. It's a whole

00:07:29 nother to put a humanoid creature together and do that.

00:07:33 Yes, exactly. And that's a problem for the people who want to be a developer. Most of the audience of

00:07:40 your podcast are developers. They're people that they are interested in developing programs. But what I

00:07:46 found is that they usually are not interested in hardware issues. Usually. That's why they decided to

00:07:53 become software developers in the first place. So that makes perfect sense. But there is a lack,

00:07:59 there is a huge lack of developers in robotics. So at present, it's just us, the roboticists,

00:08:05 that we are creating the programs. But I mean, the quality of that, I think it could be hugely

00:08:13 improved if we have the help of real developers. And then the problem is this hardware thing,

00:08:20 you know, and interacting. So with the simulations, we can provide this environment where the developers

00:08:29 don't have to deal with the hardware. They test the programs, the simulation in the same way as

00:08:35 developing applications for an iPhone. You can use those simulators, you know?

00:08:40 So you said I could go to my web browser and like actually code up a simulation there.

00:08:45 Is that in Python? Or is that in C++? And what's the experience like?

00:08:49 Okay, so you have a typical IDE, so an integrated development environment, and typical that you have

00:08:57 autocomplete and so on. And then you can program. So you create the control programs, the programs that

00:09:05 make the robot understand the sentences or decide which direction to move or actually move the robot.

00:09:10 Everything that could be written in Python or C++. But then there's the simulation itself,

00:09:17 the simulation itself. In case that you don't want to use the ones that we provide,

00:09:21 you can create your own. Of course, we use a program, an engine for simulation that is called

00:09:27 gazebo. That is open source. So anybody can download it also. And then you have to create a simulation for

00:09:34 that engine. And that is created by using format that is called URDF. That is basically an XML file.

00:09:41 Cool. So you can create your own little world. What kind of simulations do you provide? Like,

00:09:45 what kind of robots could I make? Could I do self-driving cars, humanoid things, delivery robots?

00:09:50 You have all types of robots. We have even humanoid robots, human-sized humanoid robots,

00:09:57 including the controllers for walking. So you don't have to make that robot work because it's already

00:10:03 provided, all the controllers. You have drones, you have cars. In order to make self-driving,

00:10:09 you have to build a program. Okay. And then we have what is called mobile manipulators. The mobile

00:10:18 manipulators are robots that are intended to be in the warehouses, for example. And let's imagine,

00:10:26 an Amazon warehouse. And then this robot has to be able to move on that warehouse to go to the

00:10:34 shelf that is where is the product and then grab the product. So that's a mobile because it moves,

00:10:40 a manipulator because it can manipulate the objects. Right. It's got an arm or something. Yeah.

00:10:45 They do exist, the robots, but the problem is the software. Again, so the problem is the software. So

00:10:53 the hardware is there. You can buy these kinds of robots, but they are not able to grab the thing.

00:10:59 And it's a problem of software.

00:11:01 Yeah. Well, it sounds like you're solving a really interesting problem. Now, before we get into the

00:11:06 topic more broadly, I just want to talk about really quickly, you also have a podcast that people might be

00:11:12 familiar with called the Ross Developers Podcast. And I'll link to that as well. You know, I just tell

00:11:16 people who maybe want to listen to a whole bunch of stuff about Ross as well after this show about your

00:11:22 podcast. Yes, yes, definitely. So in this podcast, what we do is to interview people that are experts

00:11:28 in Ross and especially about how to program robots with Ross. And then they explain to us how you can do

00:11:36 this, how they have done to create, make a robot, create a map. So they teach which packages they

00:11:42 have used, where to download the code already there. And we try to have fun also there.

00:11:48 Yeah. It sounds like a good show. I enjoyed listening to an episode or two. Now let's just talk real

00:11:54 broadly. When I think about the Python developer space, at least, maybe I have this wrong, but I see it

00:12:02 broken up into a couple of areas. I see there's a big chunk of web developers writing Flask, Django,

00:12:07 Pyramid apps, talking to databases, worrying about scalability, uptime, Docker, et cetera.

00:12:12 There's another significant group doing data science with NumPy, Pandas, Jupyter, Lab, et cetera. And

00:12:22 they're doing their thing. And then I see the world is kind of like other. And that other is super,

00:12:28 super diverse, right? It could be physicists, it could be biologists, it could be financial folk,

00:12:35 right? DevOps. There's just so many things. So I guess one of the areas that, you know,

00:12:40 seems really interesting is this area of becoming a robotics developer. So is this like a growing area

00:12:49 that people might look into? Is this a popular area for Python? It sounds like it is. What's the story

00:12:55 around there? Yes, definitely. So I think that becoming a robotics developer is now the moment

00:13:02 to start thinking about it. It's I think of robotics developers, like when we were thinking about data

00:13:09 scientists, some years ago, let's say 10 years ago. Yeah, like 2011, 2012, 2013, when they were all sort of

00:13:17 switching to into Python and more programming oriented stuff rather than say, or something that's more

00:13:23 statistical based, right? Yes, or deep learning. Also, in deep learning, 10 years ago, there were

00:13:29 just a few of them. And now it's completely full. It's feel, sorry, it's completely filled of people,

00:13:36 everybody's doing data scientists. And then now the situation for becoming a robotics developer is a very

00:13:42 good one. Because as I mentioned, there are just a few people. And also, mainly, we are roboticists,

00:13:49 mainly of the people is just roboticists, or very hardware oriented people. And then if you are a

00:13:56 developer, you have a chance there. Because you know the skills better than anyone. And that is

00:14:02 programming. And the tools sound like they're tools that people would maybe already be familiar with,

00:14:08 or very similar to stuff they've already done. And it's probably not a huge field, you know, millions and

00:14:14 millions of people building robots necessarily in terms of developers. But it's probably good jobs,

00:14:20 interesting jobs, you know, you probably get to move around and do cool stuff and not just sit in a

00:14:25 cubicle, right? And work on like optimizing marketing conversions or whatever.

00:14:29 The thing is that this robotics market is exploding. And actually, I have here some provision,

00:14:35 some forecasting for 2024, for example, is now a present, specifically only for development with Ross,

00:14:45 it's the market is about 312 millions, 312 millions, but it is expected in 2024 to be about 500

00:14:55 millions, the market. So it's almost doubling, almost doubling, yeah, yeah. And then I can tell you,

00:15:03 for example, that recently, Amazon has entered last year, Amazon entered into the game, and they have

00:15:10 the robotics division. And NVIDIA also entered into the game some years ago, and Google is going to

00:15:18 enter this year. And Microsoft also, Microsoft has entered last year, also presenting their own Ross

00:15:26 version in Windows. So very, very big players are getting into there. And you know that big players,

00:15:32 they don't go there just because they are bored, it's because they are feeling that there is

00:15:38 something there to get.

00:15:40 All right, they want to ride the wave.

00:15:41 Yes.

00:15:42 Yeah.

00:15:42 That's why I think it's a very good possibility. Also, there is a very famous conference, it's called

00:15:48 the RossCon, is the Ross Conference official. And it's actually, it's in two months, it's going to be

00:15:55 the next edition. And there, all the companies that show, we are hiring, we are hiring, we are hiring,

00:16:01 we are hiring. There is a demand for software developers in robotics.

00:16:06 This portion of Talk Python To Me is brought to you by Linode. Are you looking for hosting

00:16:11 that's fast, simple, and incredibly affordable? Well, look past that bookstore and check out

00:16:16 Linode at talkpython.fm/Linode. That's L-I-N-O-D-E. Plans start at just $5 a month for

00:16:23 a dedicated server with a gig of RAM. They have 10 data centers across the globe. So no matter

00:16:28 where you are or where your users are, there's a data center for you. Whether you want to run

00:16:32 a Python web app, host a private Git server, or just a file server, you'll get native SSDs

00:16:37 on all the machines, a newly upgraded 200 gigabit network, 24 seven friendly support, even on

00:16:43 holidays, and a seven day money back guarantee. Need a little help with your infrastructure?

00:16:47 They even offer professional services to help you with architecture, migrations and more.

00:16:52 Do you want a dedicated server for free for the next four months? Just visit talkpython.fm

00:16:57 slash Linode. I think a lot of people grew up dreaming of working with robots and all these

00:17:04 things. And then, you know, you, you realize that it's hard. The hardware is tricky. And, you know,

00:17:12 maybe the jobs aren't there, but it's, it sounds like maybe that's becoming a reality. That's cool.

00:17:16 Yes, definitely. And the main problem that they can face maybe is about dealing with the hardware.

00:17:24 But as I mentioned before, then dealing with hardware can be kind of substitute by using

00:17:30 the simulation. So you can replace a lot of work with hardware by using the simulation. And then

00:17:36 also by using ROS API. That's the combination of the both things.

00:17:40 Yeah. So tell us a little bit more about that. I mean, your company has this virtual world sort of

00:17:45 integrated online space for doing these. Does ROS itself have like capabilities for running in a

00:17:52 simulation mode or something like that? Yes. Together with ROS, when you install ROS, it's open source.

00:17:59 So anybody, listeners there, you can download right now if you want. And together with ROS,

00:18:05 you are installing the official simulator that is called Gazebo, like a Gazebo. Yeah.

00:18:12 And then this allows you to simulate your robot. Actually, there are a lot of simulations already there.

00:18:18 And then you can download also in your computer and execute. Then having said that, good luck.

00:18:26 Okay. Because well, so you download, you know what happens. You download that then it shows this effect

00:18:33 that I call it works on my machine, you know? Yeah. Have you seen the certification program?

00:18:38 There's an official, it works on my machine. Okay. No.

00:18:44 It's really hilarious. I'll definitely put a link in the show. So there's somebody made a joke about this

00:18:51 at some point and did a blog post. And so let's see, to officially become certified is you compile

00:18:58 your application, assuming it's a compile language. Getting the latest from recent code changes out of

00:19:04 source control is totally optional. You launch the application or website. You cause one code path

00:19:09 to be executed. The preferred way to do this is with ad hoc testing. admitting the step is fine.

00:19:16 If, five lines have changed and then you check in your code and now you're, you're certified to get

00:19:22 the badge. I'll open it. Certified.

00:19:24 Isn't that great. You get it, the simulation set up on your machine and then, you know, it's,

00:19:29 it's tricky to, to deploy this or share it. Is that what you're saying?

00:19:32 Yes. It's tricky because there are a lot of versions. The versions are changing constantly.

00:19:38 And also there are a lot of requirements from other libraries that they are changing also again.

00:19:45 So you get this effect, you know, that multiplies. And of course, I'm not telling that developers,

00:19:51 the listeners of the podcast, they cannot do it. No, I'm not telling this. Okay. I'm talking about

00:19:57 efficiency. So many of the people we talk to about our product, they say, no, so why would I pay you

00:20:03 if I can do it? And it's completely fair because they can do it. But most of our clients, they can

00:20:09 also do it. It's not that they cannot, but they don't want to. Yeah. That's the, yeah, it's,

00:20:14 they want to focus on the core problem they're trying to solve and not all the stuff around it.

00:20:19 Right. Exactly. Okay, cool.

00:20:20 It's another point here is about working into teams or, or for example, where system is very useful and

00:20:28 used actually by, for example, by universities, because the teacher can create a demonstration,

00:20:36 simulation with a code that makes the robot grasp something. And then it can share with the older

00:20:44 students, 200, 300, 1000, whatever. It will work in the exact, exact same way as for the teacher. So

00:20:52 the teacher knows that this is going to work for this guy and they don't have to prepare anything.

00:20:56 Yeah. It's not like, well, you've got an old version of macOS and it has the wrong dependency here.

00:21:02 So it won't work or you don't have the right permissions or all that stuff. I mean,

00:21:06 it sounds a little bit like the problem that Jupyter Notebooks solve for teaching data science and other

00:21:11 types of courses where you can just say, here's a URL. You just go use this and it's all set up just the

00:21:17 way we need it to be. Right. Exactly. Actually in our product, we use Jupyter Notebooks for the

00:21:23 documentation and demonstration. I will send you one example. When we call a ROSJ. The ROSJ is a ROS project,

00:21:31 which contains everything. It contains the simulation, the code, the documentation and

00:21:36 data sets. And so it's a simple link. And then I will send you one example to you so you can have a

00:21:42 look and maybe share with the audience. Yeah. Yeah. I'll put it in the show notes.

00:21:45 You will see that it opens the Jupyter Notebook and then it says the Jupyter Notebook, oh, do this. And

00:21:50 then the robot will do that. And then you can see that it actually works. That sounds really fun. Yeah.

00:21:54 Definitely share that with everyone. That'll be fun to play with. Now let's talk a little bit about the

00:21:59 different types of robots. So I have a robot in my house and it looks about the size of a plate and it

00:22:06 drives around and it gets stuck in my furniture. When it's not stuck in my furniture, it's trying to vacuum up

00:22:11 stuff around the house. Okay. So we have vacuums and actually those are pretty cool. Even some of

00:22:17 those like Roomba and stuff, there's some that are programmable, right? Many things to say about

00:22:21 this. You can stop me anytime, okay? Because I have a lot of things to say. So first thing I would like

00:22:28 to say is vacuums is, I would say that is the only real robotics business that has been successful.

00:22:38 I think, I don't know the numbers, okay, of all the robotics companies, but I mean in the case of

00:22:44 service robots. So the vacuum cleaner is called a service robot. Consumer level robots, right? Yeah.

00:22:51 Exactly. So those are robots that are working. They are doing their work in environments where there is

00:22:56 people around. They have to figure out how to manage changes in the environment, not industrial robots.

00:23:02 Okay. I'm not talking about those, but about service robots. I think that the vacuum cleaners,

00:23:07 the iRobot or any other brand, those are the only ones, robotic companies that have been successful and

00:23:14 made a business. The rest of the ones, they are living on investment, you know, on rounds of VCs and so on.

00:23:22 Yeah. It's all future valuation and VC money and hope.

00:23:26 Yeah. And hope. Exactly. So that's the first thing I wanted to say about the vacuum cleaners,

00:23:31 because they deserve all the respect.

00:23:34 They actually are a success story, right? In a sense.

00:23:37 Exactly. A success story. And then the other thing you mentioned about programming,

00:23:41 the version of iRobot is called Roomba. There is a version, I don't remember exactly its name,

00:23:49 but it's programmable. So you can programmable. Then some of the guys of the developers of the

00:23:57 ROS, some of the guys decided to use it as the base for creating a simple robot that all the ROS

00:24:05 students, they can use it and they can buy for a low amount of time and then start performing tests

00:24:11 with ROS and so on. It's called the Tartelbot. So the Tartelbot in the inside has a Roomba,

00:24:17 a programmable Roomba that is called, oh yeah, I remember. It's called Kabuki. Kabuki.

00:24:23 Yeah. Kabuki. Okay. That's pretty awesome. They should just leave it vacuuming just so wherever

00:24:28 the robot works, it's just super clean. I had no idea they did that. That's really interesting.

00:24:34 I knew you could program. I didn't know that it was being like repurposed for this, these other areas.

00:24:40 Another area where I think robotics, I don't even, you tell me if this is the right word,

00:24:47 but certainly machines operating autonomously in the world seems to have taken hold somewhat,

00:24:55 maybe not mainstream commercial success, but kind of crazy success for how complicated it is,

00:25:00 is cars, right? Like Tesla, even just the Teslas are unbelievable in how that they can interact with

00:25:09 their environment. And then you've got cruise automation, you've got Google, you've got NVIDIA,

00:25:14 Uber actually building truly autonomous cars. But, you know, even going for a ride in a Tesla on a city

00:25:20 street is a very weird experience.

00:25:22 It's amazing, but they still haven't reached the level five of autonomy. So it means that they can't go by the,

00:25:29 yeah, not yet, not yet. And it's going to be very difficult to reach that. They are expected to release very,

00:25:36 very soon this system. But personally, I don't believe it that it's going to be very soon because it's very,

00:25:42 very complex. It's very complex here.

00:25:45 The edge cases seem so hard, right? You get 95% perfect, but the consequence of failure is so high.

00:25:52 Yeah.

00:25:53 If you run over a person one every hundred thousand times, that's still a really big problem.

00:25:57 Exactly. That is a point. That is a point. For the main thing, it works. It works. So I have been

00:26:04 with some people from other companies that they are building this and they gave me a ride and the

00:26:10 experience is amazing. So it's in a very good condition, but for all the conditions,

00:26:15 for all the types of people, the types of clothes, the types of materials, that's not working. It's not

00:26:21 not working yet.

00:26:22 Yeah. Yeah. Yeah. Not yet. I'll share a really quick story with folks. We rented for four or five days,

00:26:30 a model three Tesla, and we were driving and my wife was, I rented it for my wife to try it out. And

00:26:35 we were driving down the street and she really wanted to try the self-driving. So she turned it

00:26:39 on and it was fine, but it got to a place where the stripes on the road were faded or it's the Tesla

00:26:46 became uncertain of the environment. And it told her to put her hands on the wheel and take control of it

00:26:51 because it needed her to be ready because it was getting into this uncertainty zone. And she puts her

00:26:56 hands near it, but not physically touching the wheel. So it didn't know she was holding on or ready to

00:27:02 hold on. And it got really mad. It told her to do it again. And then after a couple of times of saying,

00:27:07 do this now, it's just said no more self-driving for you. And it pulled over and stopped.

00:27:12 It just said, if you're not going to take the wheel, we're done self-driving, no more self-driving

00:27:16 this entire drive until you shut the car off for a while, then you can self-drive again.

00:27:20 No way.

00:27:22 Isn't that funny? She's like, it got mad to me and we won't drive anymore. I'm like, we said to hang on. She's like,

00:27:28 I was hanging on. Like you were almost hanging on. It didn't know.

00:27:31 So now we are going to have fights with a partner and with a car.

00:27:36 Exactly. The car got mad at me. So I, you know, I mean, these are the ways they can deal with it

00:27:42 now, but it's going to be real. I do think though, that cars have come surprisingly far in robotics.

00:27:48 As far as I thought, I thought this problem is just too hard for cars. They were actually quite

00:27:52 close to this level five. They're not there for the problems we already talked about, but they're way

00:27:57 farther than I would have guessed 10 years ago.

00:27:59 Yeah. Yeah. Yes. That's right. That also was a surprise for all of us. So it was like,

00:28:04 there was nothing. And then suddenly, boom, then it started the development. I think that it was,

00:28:11 everything started with the DARPA challenge. I don't remember exactly the name. That was one of the

00:28:17 first. They have to cross a desert. And then the first edition, there was nobody. And the second

00:28:24 edition, there was the team from Sebastian Thrun, who is the founder of Udacity. Sebastian Thrun.

00:28:32 And then he made it. And then on the next one, there's so many other cars. They did it. But that's when it started. Then from that point, that's it. Then they created a company. This company was bought by Google. And then when Google started to do that, then it's kind of like it explode. It explode.

00:28:51 So now there's companies, drivers, driverless cars, companies, many, many around the world.

00:28:57 It's really amazing. There's a super good documentary by Nova, which is this like public broadcasting

00:29:05 organization in the US or series called The Great Robot Race. And I'll link to it. And it takes you,

00:29:12 it's like an hour and a half deep techie dive into this DARPA challenge that you talked about. And it's really amazing.

00:29:19 Okay. Taking note to watch it.

00:29:21 It's super cool. I'll put a link in the show notes.

00:29:25 This portion of Talk Python To Me is brought to you by Tidelift. Tidelift is the first managed open source subscription,

00:29:31 giving you commercial support and maintenance for the open source dependencies you use to build your applications.

00:29:37 And with Tidelift, you not only get more dependable software, but you pay the maintainers of the exact packages you're using,

00:29:44 which means your software will keep getting better. The Tidelift subscription covers millions of open source projects

00:29:50 across Python, JavaScript, Java, PHP, Ruby, .NET, and more.

00:29:53 And the subscription includes security updates, licensing, verification, and indemnification,

00:29:58 maintenance and code improvements, package selection and version guidance, roadmap input,

00:30:03 and tooling and cloud integration. The bottom line is you get the capabilities you'd expect and require

00:30:09 from commercial software. But now for all the key open source software you depend upon,

00:30:14 just visit talkpython.fm/Tidelift to get started today.

00:30:19 So let's bring it back to Python a little bit. Now you talked earlier, about this back and forth between Python and C++. And sometimes maybe you prototype in Python and then write in C++,

00:30:31 or maybe there's an orchestration or something. I don't know, where would you get started?

00:30:35 If I wanted to get started as a developer in robotics, would I start with Python?

00:30:39 Would I be limited by doing that? What's the story there?

00:30:43 This is my personal opinion based on my experience.

00:30:49 So besides this development environment, we teach people about how to become a robotics developer.

00:30:55 In our academy, that is also an online academy, uses the same engine as the development system.

00:31:01 So it's everything online, you see simulations of robots, and then you learn.

00:31:04 So what we teach there is that if you don't know anything about C++ or Python,

00:31:12 then you should start with Python.

00:31:15 So you start learning Python, and then you start learning ROS with Python.

00:31:21 So how to program in ROS by using Python.

00:31:23 If you know Python already, then okay, then still start by learning ROS with Python.

00:31:30 And the only option for starting with C++ is because, I don't know, it's your only option for getting a job.

00:31:38 You are very, very stressed, and that's the only option that you have to leave.

00:31:42 But if you want to optimize your path, then start always by learning Python.

00:31:47 Then ROS with Python.

00:31:49 And once you know the basics of ROS with Python, then you can decide whether to go back and learn ROS with C++.

00:31:59 Again, and why is that?

00:32:02 Because ROS with Python is hiding, not many, but a bunch of details.

00:32:08 Important details, yeah.

00:32:09 Yeah, very complex to understand when you are new there.

00:32:14 So it's easier for you to understand really how ROS works and how you make a robot based on ROS to do a task, to finish a task.

00:32:24 So you can master that with Python a lot faster.

00:32:28 Then in order to go back and relearn with C++, you have to reconsider if you are going to dedicate yourself for working, programming robots for industry, for companies,

00:32:39 or you are going to dedicate to program robots for research.

00:32:42 That is also a big space where developers can dedicate.

00:32:47 It's a big space where you are going to be able to do a job.

00:32:52 So you have to learn new things or discover new things with robotics.

00:32:54 In that case, Python is a lot better because in this case, what is vital is to present the results as fast as possible.

00:33:05 And for that, I mean, Python is the winner.

00:33:07 It's always the winner in that case.

00:33:09 So even if execution is slower, it's good enough to record the video and present the paper.

00:33:17 And that's what is required in research.

00:33:19 Yeah, absolutely.

00:33:19 That's really interesting.

00:33:20 When you think about performance between Python and C++, if you're going to run some code just a couple of times or something,

00:33:27 and you factor in from the time I start working on the idea until I have the answer,

00:33:31 maybe C++ runs five times faster.

00:33:34 But it takes you a day in Python and a week in C++, right?

00:33:37 Which language is faster, right?

00:33:39 Like that's an interesting question as well.

00:33:41 Exactly.

00:33:41 Yeah.

00:33:42 Python, definitely.

00:33:43 Yeah, for sure.

00:33:44 So one of the dramas, challenges, I guess, success stories coming up, but it's been a long journey these days,

00:33:54 is legacy Python versus modern Python or Python 2 versus Python 3, right?

00:33:58 What's the Python 2, 3 story around robotics?

00:34:02 It's a pain.

00:34:03 It's a pain.

00:34:07 It's a pain.

00:34:08 I mean, so I'm talking here always about programming robots with ROS.

00:34:13 Okay, so what's the problem with ROS?

00:34:16 That ROS works with Python 2.7.

00:34:20 Up to now, the latest version of ROS still works with 2.7.

00:34:26 Then ROS has started 10 years ago.

00:34:32 And so now it has matured for 10 years.

00:34:35 But it became clear that this structure of the current ROS was not going to be sufficient for real robot applications,

00:34:45 for companies to adopt ROS into their products massively.

00:34:50 Because of that, they decided, the organizing committee of ROS decided to create a new version of ROS that is called ROS 2.

00:35:01 And then when they decided this, they started like three or four years ago to develop, to start development,

00:35:08 and they decided to do it in Python 3.7.

00:35:11 So if you are going to jump into ROS now, then if you are going to jump into ROS 2, then you are saved.

00:35:18 Okay, because you are going to learn Python.

00:35:21 You are going to use Python 3.7.

00:35:23 So it's a future.

00:35:24 It's everything.

00:35:25 Well, yeah.

00:35:26 You can use all the new libraries, TensorFlow, NumPy, whatever, the latest version of all the good things.

00:35:31 Even there are other libraries that we use in robotics, like the ones created by OpenAI.

00:35:38 OpenAI, you know about that company?

00:35:41 Yeah, tell us about it.

00:35:42 Okay.

00:35:42 It actually was founded by Elon Musk, the founder of Tesla.

00:35:48 So the CEO of Tesla.

00:35:50 And they are concentrated on creating very good reinforcement learning algorithms using Python.

00:35:56 They use Python only.

00:35:57 And they use Python 3, of course.

00:35:59 So that's very cool because we use those.

00:36:03 Then you can use it in ROS 2.

00:36:05 But if you are going to jump into ROS 1 because it's the current standard,

00:36:09 so most of the places you are going to use ROS 1 yet, then that's based on 2.7, Python 2.7.

00:36:18 And you're kind of stuck in that world, right?

00:36:20 Yes.

00:36:21 Well, the next version, the next distribution of ROS 1 that is going to appear in 2020,

00:36:28 it's going to be based on Python 3 already.

00:36:31 Okay.

00:36:32 Well, that's a pretty positive story.

00:36:33 That's going to be a festival.

00:36:35 I mean, it's going to be a big party among everyone because imagine everyone already changing their code

00:36:41 into that other version.

00:36:43 So it's going to be crazy.

00:36:45 Yeah, that'll be wild.

00:36:47 No, but that's really good.

00:36:49 Now, maybe there is some code.

00:36:51 I've prototyped in Python and it's working well, but I need to move it into production.

00:36:56 I want to put it onto a real robot.

00:36:59 Maybe that robot has limited computation power or whatever.

00:37:02 And I want to make it go faster.

00:37:04 What steps do I need to take?

00:37:05 Do I rewrite part of that code in C++?

00:37:09 Have people use Cython on parts of their Python code to make it go faster or other things like that?

00:37:16 What's the productizing my robot story?

00:37:19 I don't know about this Cy...

00:37:21 How do you call it?

00:37:22 Cython?

00:37:23 It's like CPython without the P.

00:37:24 So what you get to do is you get to take a small portion of Python, put type annotations on it,

00:37:30 and then compile it to native code as if it were C, through a C compiler.

00:37:34 And it goes many, many times faster.

00:37:37 So if you've got a Python program and there's some tight loop or some one module that's 200 lines long or something,

00:37:46 you need that to go fast.

00:37:47 You could hit that with Cython, rename it to...

00:37:51 I think it's CPY.

00:37:52 I forgot the extension.

00:37:53 But rename it.

00:37:54 I don't think that's right.

00:37:55 But anyway, you rename it to a different file and you hit it with CPython.

00:37:58 And then it just becomes like a C module that gets imported by your other Python code.

00:38:02 Okay.

00:38:03 So that's the first time that I heard about that.

00:38:06 So I cannot tell you what is the difference between that.

00:38:09 But usually what we do in those situations, in those situations is usually is first one, rewriting C++.

00:38:18 So that's the, I mean, that's a straight, rewriting C++.

00:38:22 Or another thing that is done is also to put a bigger computer.

00:38:26 So you put a more powerful computer in the robot and that's it.

00:38:30 If you cannot do that, also you can run in an external computer because ROS is how it is built.

00:38:39 It doesn't care in which computer you are running the different programs in ROS.

00:38:45 And they can communicate and transfer information transparently.

00:38:49 For them, it's like if they were in a single big computer.

00:38:53 So that's another option.

00:38:54 Like kind of a distributed computing environment type of thing.

00:38:57 Okay.

00:38:58 Is it common to have kind of microservice architecture where I've got a robot and it's doing stuff,

00:39:04 rather than it's making calls over the network to get more information or resolve information, things like this?

00:39:11 It's actually for products.

00:39:13 For robotics products, it's very, very common.

00:39:16 Because they want to ship into the hardware as less as possible.

00:39:20 And also they want to make you kind of trapped into their system.

00:39:28 So you need that.

00:39:29 But there is a very famous case.

00:39:32 Pay the $4.99 for the continuous service monthly, right?

00:39:36 Or whatever the price is.

00:39:38 Exactly.

00:39:38 There's a very famous case that just died a couple of months ago.

00:39:43 It's called Cosmo.

00:39:45 Cosmo Robot.

00:39:46 You know that robot?

00:39:47 No, I don't know this robot.

00:39:48 A small robot that you can have on your desktop.

00:39:50 It was amazing.

00:39:52 It looked like, you know, this movie about the robot of Disney.

00:39:58 Yes.

00:39:58 The kind of big, fluffy, rounded white.

00:40:01 Yeah.

00:40:01 Yeah.

00:40:02 Yeah.

00:40:02 I know.

00:40:03 Oh, man.

00:40:03 I forgot to.

00:40:04 That was a great show.

00:40:05 Hero 5 or something like this?

00:40:07 No, no.

00:40:08 No, I'm talking about that.

00:40:09 About this other movie that is a robot that stays on the planet.

00:40:13 It's cleaning all the mess.

00:40:14 Oh, yeah.

00:40:15 WALL-E.

00:40:15 WALL-E.

00:40:16 Exactly.

00:40:17 WALL-E.

00:40:17 Exactly.

00:40:18 Also a great movie.

00:40:19 That one's a sad movie, actually.

00:40:21 Yeah.

00:40:21 Yeah.

00:40:22 Anyway, sorry.

00:40:22 Go ahead.

00:40:22 So it looked like WALL-E?

00:40:24 No, like the other one.

00:40:25 The character.

00:40:26 The female robot.

00:40:28 White.

00:40:28 So the face of this Cosmo, it was engineered by using graphic designers and developers of cartoons in this sense.

00:40:37 So it was a super cool robot.

00:40:40 It was.

00:40:41 But, unfortunately, it was not a success in business terms.

00:40:46 So they have to close the company.

00:40:48 And now this robot is useless.

00:40:51 So you cannot even use it because it requires the network in order to understand your vocal commands.

00:40:58 Oh, I see.

00:40:59 That's a problem.

00:41:00 Yeah.

00:41:00 Because once the company goes out, then the services die.

00:41:04 And if they lean on the services too much, then it becomes a useless chunk.

00:41:08 Exactly.

00:41:09 Yeah.

00:41:09 Yeah.

00:41:10 That's a bummer.

00:41:10 There is a famous, even more famous example that is called Jibo.

00:41:14 Do you know Jibo?

00:41:15 Did you hear about Jibo?

00:41:17 No.

00:41:18 That was first site of the Time magazine.

00:41:22 This robot was there.

00:41:24 And it was closed last year, the company.

00:41:27 And then it was also the same problem.

00:41:30 It was the same problem because it was not successful in terms of business.

00:41:34 And so they couldn't maintain.

00:41:36 And so everybody that bought this, they can just throw it out because it's useless now.

00:41:42 Oh, no.

00:41:42 That's such a bummer.

00:41:43 Yeah.

00:41:44 I've had that happen.

00:41:45 I had a Pebble smartwatch.

00:41:47 It was beautiful.

00:41:47 But they went out of business.

00:41:49 And, you know, like almost everything about it.

00:41:51 It's still kind of cool, but it's way less than it was because the services are gone.

00:41:55 So we're talking about putting some sort of computation unit on these little robots.

00:42:03 Maybe talk about what those computers look like, what those operating systems look like.

00:42:08 Because we could have a very small little robot, you know, the size of your hand.

00:42:12 And maybe it has MicroPython on a $5 chip in it.

00:42:16 Maybe we have a robot that's like a vacuum and it's got, I don't know, a Raspberry Pi running Linux.

00:42:22 Or maybe we have a car that's got, you know, a core i9 CPU that's like, you know, the top of the line Intel CPU or something like.

00:42:32 What's the spectrum of computing you put into these robots and operating systems and all that?

00:42:39 Yeah, exactly what you mentioned.

00:42:40 So we can do a small robot that only require maybe even an Arduino.

00:42:45 Only with Arduino, you can make it work.

00:42:48 You can make the robot perform the task that you wanted.

00:42:51 Then you have a Raspberry Pi and the like.

00:42:55 Then you have also the computer, the typical PC computer.

00:43:00 For example, there was one very famous that is called the Intel NUC.

00:43:04 That is a square, like a cube is small like this.

00:43:08 Now the ones that are getting a lot of traction and a very big success are the Jetson from NVIDIA.

00:43:18 Because they include some GPUs and then they allow you to do some deep learning inside the boards already there.

00:43:25 Right.

00:43:26 So in case that you want to use the data from a point cloud device.

00:43:31 A point cloud is, for example, a Kinect device.

00:43:34 So you can recognize objects or people.

00:43:37 I hadn't heard of this Jetson thing.

00:43:39 This is really cool.

00:43:40 And it's...

00:43:40 Yeah.

00:43:41 NVIDIA Jetson.

00:43:42 They're very small and they look like they don't even have fans.

00:43:45 They just have really big heat sinks.

00:43:46 I don't know.

00:43:47 Yes.

00:43:48 How big...

00:43:48 What is it?

00:43:49 Like 10 centimeters by 10 centimeters?

00:43:51 Something like that?

00:43:52 Maybe?

00:43:52 Yeah, yeah, yeah.

00:43:53 So it's very, very small.

00:43:54 Yeah.

00:43:55 Yeah.

00:43:55 A hundred dollars for Jetson Nano.

00:43:56 That's pretty awesome.

00:43:57 Yes.

00:43:58 And the power that they have is very cool.

00:44:00 There is the Jetson Nano.

00:44:02 And then there is another version.

00:44:03 It's the Jetson whatever.

00:44:05 And then there is another one that is more powerful.

00:44:07 That is called the Xavier.

00:44:09 Yeah.

00:44:09 Xavier.

00:44:10 And...

00:44:11 And it's even more powerful.

00:44:12 These are pretty...

00:44:13 These are pretty intense.

00:44:14 They've got some really cool ones.

00:44:15 Yeah.

00:44:16 And some of you have the GPU looking things.

00:44:20 Yes.

00:44:20 So that's another thing.

00:44:22 Maybe if you need more power, if you have...

00:44:24 Maybe you want to...

00:44:26 You talked about some of the machine learning stuff.

00:44:27 And of course, your background is in this area as well.

00:44:30 GPUs probably play an important role for certain types of robots, I would guess.

00:44:34 Yes, exactly.

00:44:35 Especially, for example, it makes sense in the image recognition.

00:44:39 Whenever you need your robot to recognize where it is, the location or the people or the objects by using a camera, then that's one of the cases.

00:44:48 Also in the speech recognition.

00:44:50 Also.

00:44:51 And then also, they use a lot the GPU for training, for launching reinforcement learning algorithms that make the robot learn.

00:45:03 But those usually are used in the simulation.

00:45:05 Okay.

00:45:06 Because in the real robot, it's very difficult to train the robot.

00:45:10 Because in order to train a robot, you need to put it into certain conditions, then make them take some actions.

00:45:17 And when they fail, you say, hey, wrong.

00:45:19 And then you have to put it back.

00:45:21 Yes.

00:45:22 Yes.

00:45:23 It's like teaching a kid or something.

00:45:25 Yeah.

00:45:25 Teaching a child.

00:45:26 Yeah.

00:45:26 I see.

00:45:27 A child.

00:45:27 Exactly.

00:45:28 And then you say, yeah, very good.

00:45:30 Very good.

00:45:30 And then the robot gets excited.

00:45:31 Oh, yeah.

00:45:32 Super cool.

00:45:32 And then you have to have somebody to put it back to the original position.

00:45:37 And also, all the environment get started.

00:45:40 So, that's not a good approach to do it with a real robot.

00:45:43 And usually, this is done in the simulator.

00:45:45 And once you are in the realm of the simulator, you have the cloud computers that they have whatever you want.

00:45:52 Related to the operating systems that we use there, usually, we install Linux, Ubuntu specifically.

00:46:00 And then on top of that is where we install ROS.

00:46:03 Because ROS, even if it stands for robot operating system, it's not an operating system.

00:46:10 It's a framework for programming inside an Ubuntu system.

00:46:14 I see.

00:46:15 So, maybe it's an operating system for the robot, but it needs its own computational operating system, which is Linux.

00:46:21 Yeah?

00:46:22 Exactly.

00:46:22 That's it.

00:46:23 Okay.

00:46:23 That's it.

00:46:24 And now, Microsoft has started to create a version of ROS for Windows also.

00:46:30 So, you can install Windows instead of Ubuntu.

00:46:34 But it's still not finished.

00:46:36 So, it's still very early stage.

00:46:37 Yeah.

00:46:37 That'll probably bring in a lot more developers as well, though.

00:46:40 You know, Windows is still a big platform that people develop on in a lot of places.

00:46:45 So, having ROS there sounds like a good idea.

00:46:47 Yeah.

00:46:48 They are putting a lot of effort into that.

00:46:50 Cool.

00:46:50 Yes.

00:46:51 I see robotics as an interesting way to bring young people into programming as well, right?

00:46:57 Like, as you get older, you're willing to just plow through the things.

00:47:01 Okay.

00:47:01 I have to learn the for loop.

00:47:02 And then I learn the class.

00:47:03 And I learn the functions.

00:47:04 And eventually, I'll do something interesting.

00:47:06 But kids, they don't care.

00:47:07 They're like, this is boring.

00:47:08 I'm out of here after five minutes, right?

00:47:09 But if they could see a robot.

00:47:11 You know, my daughter is in sixth grade, my youngest one.

00:47:14 And she had one of her electives in the morning is robotics.

00:47:18 Actually, she just started this week.

00:47:19 I'm not really sure what they're doing.

00:47:20 But, you know, that's, it's really, I think, a good way to teach kids.

00:47:24 And I think that might be the Microsoft angle as well, to some degree.

00:47:27 Okay.

00:47:27 That's strange for me.

00:47:29 From my point of view of a roboticist, for me, I mean, it's very clear to use Linux.

00:47:35 I mean, I would never go to Windows to program robots.

00:47:38 For me, it's like, what?

00:47:40 Yeah, of course.

00:47:40 I mean, all this big thing that you don't need, that you don't need, because you only need to have the terminal and the commands there.

00:47:48 And then everything works.

00:47:50 You have full control of everything.

00:47:52 Well, I just, I think there's these environments where, you know, kids are already sitting in front of a Windows PC, and they're going to use it.

00:47:58 Or, you know, they're also, Microsoft's also working on, like, Edge IoT computing stuff.

00:48:02 And I think it kind of fits into that realm.

00:48:05 And I think that even they have some embedded Linux stuff that they're doing over there, which is kind of ironic and funny.

00:48:10 Okay.

00:48:11 I didn't know about that.

00:48:12 Can't remember exactly.

00:48:12 I think, I can't remember what, it's like, something sphere.

00:48:16 It's at the edge of my knowledge.

00:48:19 I should stop talking about it.

00:48:20 But I do believe they had some embedded Linux somewhere.

00:48:23 If I find it, I'll put a link in the show notes afterwards.

00:48:26 Oh, you mean Red Hat?

00:48:27 No, no, not Red Hat.

00:48:28 There's something from...

00:48:30 Red Hat?

00:48:30 They bought the Red Hat version, isn't it?

00:48:33 Didn't they?

00:48:34 It's called Azure Sphere.

00:48:36 That's what it is.

00:48:36 Yeah.

00:48:37 So it's Azure Sphere.

00:48:39 And it's basically a hardened...

00:48:42 I think it's Linux.

00:48:44 Let me see.

00:48:45 I'm not sure.

00:48:46 But it's a hardened IoT device that basically has automatic over-the-air updates and a whole bunch of various security stuff and so on.

00:48:55 But yeah, I got to look into it to make sure that it's Linux.

00:48:57 But I think so.

00:48:58 Anyway, the world is getting confusing, right?

00:49:00 Like, it didn't used to look like that.

00:49:02 Yes.

00:49:04 It's getting confused.

00:49:06 And related to what you mentioned about for the kids, yes, definitely.

00:49:10 The more graphical, the better.

00:49:12 So there is this...

00:49:14 That is called...

00:49:16 With programming for robots using blocks.

00:49:20 That is called Blockly.

00:49:21 Yeah.

00:49:22 Okay.

00:49:23 Blockly is one of them.

00:49:24 But this is based on another one made by MIT.

00:49:28 Basically, it's programming robots...

00:49:29 Scratch, maybe?

00:49:30 Blocks.

00:49:31 Scratch.

00:49:32 Scratch.

00:49:32 Yeah, that's it.

00:49:33 Scratch.

00:49:34 Okay.

00:49:34 Okay.

00:49:35 So there exists also a version of Scratch in ROS.

00:49:39 So actually, you can...

00:49:41 If you are interested, Andrin.

00:49:42 Oh, okay.

00:49:43 So you could get started really early.

00:49:45 I see.

00:49:45 Okay.

00:49:46 That's super cool.

00:49:47 Exactly.

00:49:47 So for that, in that case, for kids and for people with lower level of knowledge in terms

00:49:56 of mathematics, physics...

00:49:57 Maybe they're not typing really well yet or something like that.

00:50:00 Yeah.

00:50:00 Or programming a skill.

00:50:01 Yeah, exactly.

00:50:02 So that makes sense.

00:50:04 Yeah, very cool.

00:50:04 All right.

00:50:04 Just to wrap up this Linux thing.

00:50:06 Azure Sphere is a Linux-based operating system created by Microsoft for the Internet of Things

00:50:11 applications.

00:50:11 It's the first time Microsoft has publicly released an operating system running the Linux

00:50:15 kernel.

00:50:15 All right.

00:50:17 So very interesting.

00:50:18 The world is confusing and very mixed.

00:50:21 Yeah.

00:50:21 It's a fun time.

00:50:22 All right.

00:50:22 So let's wrap up this conversation, Ricardo, by talking about how people can learn ROS and

00:50:29 programming robots with Python.

00:50:31 We kicked it off by saying it's a good time to be a robot developer.

00:50:34 Python's a good language to do it.

00:50:36 What do people want to get into it?

00:50:37 What do they do?

00:50:37 In that case, there are several ways of learning.

00:50:40 And then that depends.

00:50:41 It's always the same.

00:50:42 You want to invest more time or more money.

00:50:46 So that's the situation.

00:50:47 So let me give you the options that I usually provide.

00:50:51 The one is going to the official wiki of ROS.

00:50:55 So ROS is a present being created and developed by now is a company.

00:51:01 It's called Open Robotics.

00:51:04 And they release it for free.

00:51:06 It's open source.

00:51:07 You can do whatever you want with it.

00:51:09 And then at the same time, they are releasing a wiki with some tutorials with a lot of information

00:51:14 there about how to learn ROS.

00:51:17 So that's the official wiki of ROS.

00:51:20 That would be the first place.

00:51:21 It's a little bit dry.

00:51:23 As a first step, it's a little bit dry.

00:51:26 But I learned by using this.

00:51:28 So I learned using this because there was nothing else at that time.

00:51:32 Then the other option, yeah, so we begin very early.

00:51:36 Coming early, you got to just go through the docs and figure it out.

00:51:39 But I have to say that for the time, those documents were amazing.

00:51:44 The documentation, they put a lot of effort into the documentation because they knew that

00:51:50 that was a very good point to attract people.

00:51:52 So at that time, that was like, wow, that's amazing.

00:51:56 I mean, it's dry, but it's amazing.

00:51:58 Now, some years afterwards, so it's a little bit more complicated.

00:52:05 But you have other options.

00:52:06 For example, books.

00:52:07 There are a lot of books.

00:52:08 In Amazon, if you go, you will see a lot of books.

00:52:11 We have our own series of books that teach the basics of ROS or how to use it for navigation.

00:52:17 But there are many, many other books already available.

00:52:20 Use the books.

00:52:21 They're very nice.

00:52:22 Then another way is to use the YouTube videos.

00:52:26 So in YouTube, you will find a lot of videos.

00:52:29 A lot of videos.

00:52:30 We also provide these videos in our channel of our company.

00:52:35 And actually, we do a ROS live class on YouTube every Tuesday at 6 CET.

00:52:44 Oh, cool.

00:52:45 Yeah, you just cover some.

00:52:47 It's like a live stream.

00:52:48 You just cover something different each time.

00:52:50 And people can just drop in.

00:52:51 Yes, it's a different subject.

00:52:53 It's a different particular, very concrete problem.

00:52:56 Something you can do in an hour, right?

00:52:58 Exactly.

00:52:59 What did you do last time?

00:52:59 Yeah.

00:53:00 So what is interesting is that the participants that connect, they are programming at the same

00:53:06 time with me.

00:53:08 So I provide to them on this live class with a ROSJECT that they get directly into the

00:53:15 class.

00:53:15 And then they start automatically into the browser with all the environment, the simulations

00:53:20 and the instructions.

00:53:21 So we are doing together.

00:53:24 So I'm explaining, do this.

00:53:25 You see here, do that.

00:53:27 Do that.

00:53:27 And then the guys, they are doing and then asking questions and so on.

00:53:31 So and then last time, what we did was about making several robots create a map of an environment.

00:53:40 So several robots, not only one robot, but several, they were moving around and creating the map.

00:53:46 That's a concept in robotics.

00:53:47 Yeah, that's super cool.

00:53:48 Well, that is another of the options using the YouTube videos.

00:53:53 And I'm telling you about those.

00:53:56 Of course, I would say, I will tell you that you go to our academy.

00:53:59 It's the Robot Ignite Academy, but that's a paying one.

00:54:03 So the previous one, the official wiki is for free.

00:54:06 The books is the price of the books.

00:54:08 The YouTube videos are for free.

00:54:09 So everything is free.

00:54:11 You've got to watch an ad maybe, but other than that, it's free.

00:54:13 Oh, yeah.

00:54:15 Because of YouTube, right?

00:54:15 Right, exactly.

00:54:16 That's just YouTube itself.

00:54:17 Yeah, yeah, exactly.

00:54:18 That is right.

00:54:19 That is right.

00:54:19 Yeah, then you have your academy.

00:54:21 Yeah, the academy is online and then it's not based on videos.

00:54:25 It's based on practice.

00:54:27 So you have to practice and do the things because whatever you read there, if you don't practice, it's not useful at all.

00:54:36 And especially in RAWs, you need to see when you do this, what the robot does.

00:54:41 And this is the system that we have implemented in our platform, in our academy.

00:54:47 It's a system that where you get the instruction.

00:54:49 So now you are learning this, then very quickly do this exercise.

00:54:53 So you practice and you do this.

00:54:55 So that's more practice focus, but it has a cost.

00:54:59 It has a cost.

00:55:01 And I think that those are the main options that they have for this.

00:55:06 Of course, you have conferences.

00:55:08 Sure.

00:55:08 Yeah.

00:55:09 Around the world.

00:55:09 Summer schools.

00:55:10 Yeah.

00:55:11 Podcasts.

00:55:11 Now, that's more awareness, I would say, not total straight on learning.

00:55:15 It sounds like you can use the simulators, either your online one or the Gazebo one or something like that.

00:55:22 And you don't necessarily have to start with hardware.

00:55:24 Is that right?

00:55:25 Exactly.

00:55:25 That is right.

00:55:26 Actually, our online simulator is Gazebo.

00:55:29 So we have created a version of Gazebo.

00:55:32 In the inside, in our server, is Gazebo running?

00:55:35 And then we have a front end in web development for that.

00:55:39 So it's exactly the same thing that you will run in your own computer.

00:55:42 And then that makes you be separated from the hardware.

00:55:47 That's a great way to learn.

00:55:47 Okay.

00:55:48 A lot of options, it sounds like, and a lot of interesting possibilities out there.

00:55:52 So cool.

00:55:53 Well, thanks for sharing that.

00:55:54 Now, before you get out of here, I have to ask you the final two questions.

00:55:57 If you're going to write some robotics code in Python, what editors do you use?

00:56:01 What I used to use before it was Sublime.

00:56:04 Sublime was very good.

00:56:05 Also, I used Qt Creator.

00:56:08 But Qt Creator was more for C++.

00:56:12 And then I was doing kind of a hack for Python.

00:56:16 But then Sublime was the best.

00:56:18 And now at present, I'm using a web editor IDE, which is called Taya or Taya.

00:56:25 I don't know how to pronounce it.

00:56:26 Yeah, something like that.

00:56:27 And that's the one that I'm using.

00:56:29 Very, very cool.

00:56:29 It has also complete.

00:56:31 You can jump into the functions.

00:56:33 You can see the documentation.

00:56:35 And so it's very cool.

00:56:37 Oh, very interesting.

00:56:38 All right.

00:56:38 I'll put that in the show notes so people can check that out.

00:56:40 That's interesting.

00:56:41 It's open source.

00:56:42 It's open source.

00:56:43 You can download, install in your computer or in your web server and program into a server.

00:56:50 It's very cool.

00:56:51 Nice.

00:56:51 And then notable PyPI packages.

00:56:53 You know, what's the important stuff that people should know in this world?

00:56:57 I mentioned already, the open AI reinforcement learning algorithms.

00:57:02 That's very cool.

00:57:03 The gym system is a gym system for learning about reinforcement learning, not only for robotics, but for making, for example, programs play Atari games.

00:57:16 That's cool.

00:57:17 Use games as their world.

00:57:18 Exactly.

00:57:19 Exactly.

00:57:19 And then they learn to play those games.

00:57:21 The Pac-Man, the Tetris.

00:57:24 So that's OpenAI gym.

00:57:27 Okay.

00:57:28 OpenAI gym.

00:57:29 Nice.

00:57:29 And then another one that I like very much is Scikit.

00:57:33 Scikit is a set of Python libraries for many, many, many different techniques of artificial intelligence, not only for reinforcement learning, but many others.

00:57:46 And supervised learning, supervised learning, and even genetic algorithm.

00:57:52 So I will recommend you those and some other two that are very commonly used in robotics are OpenCV, that probably all the people already know, and TensorFlow, of course, for deep learning.

00:58:05 Very cool.

00:58:06 Those are great.

00:58:06 OpenAI gym looks awesome.

00:58:08 I put a link to that as well.

00:58:09 That's a really nice option.

00:58:11 All right.

00:58:12 Ricardo, final call to action.

00:58:14 People want to become robotics developers.

00:58:16 What do you tell them?

00:58:17 So we need you because, I mean, we need programmers that can program really, really well.

00:58:22 And the robotics field is lacking this.

00:58:26 Actually, there is a very cool video.

00:58:30 It's a super cool video.

00:58:32 It's a video where a person is showing how a robot is an ARM-based robot is a mobile manipulator.

00:58:40 This robot is cleaning a room from all the mess.

00:58:44 So you can see that the robot is grasping all the books, putting there on the place, then taking all the clothes from the ground, putting it into a basket, taking the basket, bringing it there.

00:58:56 So you can see this speed plus 20 or something.

00:59:00 Okay.

00:59:00 Very slow.

00:59:01 But it can do everything, everything.

00:59:03 Then at the end, the guy of the video says, yeah, so I've shown you that this robot can do that.

00:59:09 But the thing that I didn't show you is that I was controlling the robot.

00:59:14 Ah.

00:59:14 So it was teleoperating the robot.

00:59:16 But what's the conclusion here?

00:59:18 The conclusion here is that the hardware is already there in order to have a robot that can clean the mess of a room.

00:59:26 The only important part that is missing is the software.

00:59:30 It's the head of the robot that makes it.

00:59:34 So that's why we need developers that can build those programs.

00:59:38 Awesome.

00:59:39 That's a problem.

00:59:39 Yeah.

00:59:40 Well, it sounds like a lot of interesting stuff to work on.

00:59:43 Thanks for sharing the story and giving us a look inside the robotics world.

00:59:47 My pleasure.

00:59:48 Really.

00:59:48 It was very fun.

00:59:49 As I mentioned to you, that's the first time that somebody has interviewed me on a podcast.

00:59:53 And it was an amazing experience.

00:59:55 Thank you very much, Michael.

00:59:56 You're welcome.

00:59:57 Thanks for being on the show.

00:59:57 This has been another episode of Talk Python To Me.

01:00:01 Our guest on this episode was Ricardo Telles.

01:00:04 And it's been brought to you by Linode and Tidelift.

01:00:07 Linode is your go-to hosting for whatever you're building with Python.

01:00:11 Get four months free at talkpython.fm/linode.

01:00:14 That's L-I-N-O-D-E.

01:00:17 If you run an open source project, Tidelift wants to help you get paid for keeping it going strong.

01:00:22 Just visit talkpython.fm/Tidelift, search for your package, and get started today.

01:00:28 Want to level up your Python?

01:00:30 If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

01:00:35 Or if you're looking for something more advanced, check out our new async course that digs into all the different types of async programming you can do in Python.

01:00:43 And of course, if you're interested in more than one of these, be sure to check out our Everything Bundle.

01:00:48 It's like a subscription that never expires.

01:00:50 Be sure to subscribe to the show.

01:00:52 Open your favorite podcatcher and search for Python.

01:00:54 We should be right at the top.

01:00:56 You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

01:01:05 This is your host, Michael Kennedy.

01:01:07 Thanks so much for listening.

01:01:08 I really appreciate it.

01:01:09 Now get out there and write some Python code.

01:01:11 I'll see you next time.

