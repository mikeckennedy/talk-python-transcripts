WEBVTT

00:00:00.001 --> 00:00:04.160
The blockchain and cryptocurrencies are some of the most disruptive technologies of the decade.

00:00:04.160 --> 00:00:09.060
On this episode, you'll meet Stuart Farmer, who is building a suite of developer tools

00:00:09.060 --> 00:00:13.500
that speed up the process of creating new and custom blockchains and apps.

00:00:13.500 --> 00:00:19.160
This is Talk Python to Me, episode 165, recorded May 15th, 2018.

00:00:19.160 --> 00:00:39.500
Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:39.500 --> 00:00:43.640
This is your host, Michael Kennedy. Follow me on Twitter, where I'm @mkennedy.

00:00:43.640 --> 00:00:47.520
Keep up with the show and listen to past episodes at talkpython.fm,

00:00:47.520 --> 00:00:50.100
and follow the show on Twitter via at Talk Python.

00:00:50.100 --> 00:00:53.920
This episode is brought to you by Linode and Nerd Lettering.

00:00:53.920 --> 00:00:57.200
Check out what they're offering during their segments. It really helps support the show.

00:00:57.200 --> 00:00:59.460
Stuart, welcome to Talk Python.

00:00:59.460 --> 00:00:59.880
Thanks.

00:00:59.880 --> 00:01:01.160
Yeah, it's great to have you here.

00:01:01.160 --> 00:01:05.340
I've wanted to do a show on the blockchain for quite a while,

00:01:05.340 --> 00:01:08.820
and some folks from your company reached out, and I thought,

00:01:08.820 --> 00:01:14.640
maybe this is just the perfect chance to kind of bring Python and cryptocurrencies in the blockchain together.

00:01:14.640 --> 00:01:17.940
Yeah, absolutely. I love Python. It's like my main language.

00:01:17.940 --> 00:01:20.820
So talk about it. It's good. It's good.

00:01:20.820 --> 00:01:24.600
Absolutely. And you guys have some really interesting and surprising things happening.

00:01:24.600 --> 00:01:28.140
Like you're not just building with Python, but you're actually going a little farther.

00:01:28.140 --> 00:01:34.280
And we're going to talk all about that, but I want to sort of set the stage with some of the background technologies.

00:01:34.280 --> 00:01:37.180
But of course, we'll start with your background yourself.

00:01:37.180 --> 00:01:38.620
How did you get into programming in Python?

00:01:38.780 --> 00:01:43.580
Programming in Python. I guess my programming experience started when I was a kid.

00:01:43.580 --> 00:01:50.360
I was lucky enough to go to a school that was experimenting with teaching kids programming through Logo,

00:01:50.360 --> 00:01:51.980
which is like Turtle Graphics.

00:01:51.980 --> 00:01:56.200
And there's actually a Turtle Graphics module in Python, which is fun.

00:01:56.200 --> 00:01:57.260
Yeah, that's pretty awesome.

00:01:57.260 --> 00:02:00.600
What computers? Give us a sense of the time frame.

00:02:00.600 --> 00:02:04.940
Were these like green monochrome computers or more modern ones?

00:02:05.160 --> 00:02:14.060
Some of them were, but we updated. I mean, like this is early 2000s when I was learning this stuff.

00:02:14.060 --> 00:02:18.400
So the school definitely had some old monochrome.

00:02:18.400 --> 00:02:21.240
They were getting their mileage out of those computers, huh?

00:02:21.240 --> 00:02:23.100
Awesome. So you started with those.

00:02:23.100 --> 00:02:29.140
I think I remember learning on Apple IIe's with the Turtle thing as well when I was pretty young.

00:02:29.140 --> 00:02:34.760
And then moving on to basic, like true basic, basic, you know, 10, do this thing, 20, do that.

00:02:34.760 --> 00:02:36.340
Yeah, so where'd you go from there?

00:02:36.340 --> 00:02:38.360
I went to basic. I did QBasic.

00:02:38.360 --> 00:02:39.540
That was really fun.

00:02:39.540 --> 00:02:46.620
And then from there, I was learning more like C++, C# types of stuff.

00:02:46.620 --> 00:02:50.240
And that's when I started getting into object-oriented programming and things like that.

00:02:50.880 --> 00:02:54.920
And, you know, I dabbled with web, but nothing crazy.

00:02:54.920 --> 00:02:59.160
I always liked how like a computer worked.

00:02:59.160 --> 00:03:03.420
Like I knew how a computer worked and web just doesn't seem like how a computer works to me.

00:03:03.420 --> 00:03:10.840
So it's actually tricky for me to kind of do a lot of front-end web development versus, you know, back-end coding.

00:03:11.020 --> 00:03:14.620
Yeah, a lot of programming you can do with one language and one technology.

00:03:14.620 --> 00:03:25.680
But when you start writing for the web, you've got like five languages, four technologies, you know, some back-end server thing, CSS, HTML, SQL, or some NoSQL query.

00:03:25.680 --> 00:03:28.440
Like it just, you're like, whoa, why do I have to know all this stuff?

00:03:28.440 --> 00:03:29.540
Yeah, yeah, yeah, yeah.

00:03:29.540 --> 00:03:32.280
And I guess the answer to that is to make everything JavaScript.

00:03:32.280 --> 00:03:33.220
That's right.

00:03:33.220 --> 00:03:37.960
So it's been the world around JavaScript instead of make JavaScript.

00:03:37.960 --> 00:03:39.160
Yeah, exactly. All right.

00:03:39.160 --> 00:03:47.320
Yeah, from there, basically, I took a hold off for a while because I was just kind of getting into music and art and things like that, my personal life.

00:03:47.320 --> 00:03:50.460
And then I started things back up again in college.

00:03:50.460 --> 00:03:53.860
I started doing iOS development because I had some app ideas.

00:03:53.860 --> 00:03:55.140
And I've always been super entrepreneurial.

00:03:55.140 --> 00:04:01.660
So I basically was poking around with Objective-C and I was like, hey, this is not that hard.

00:04:01.660 --> 00:04:04.000
I'm done programming like this before.

00:04:04.000 --> 00:04:05.780
And the opportunity was so huge.

00:04:05.780 --> 00:04:11.040
I mean, if I'm like inferring from like your high school time, that's like near early, early App Store days, right?

00:04:11.040 --> 00:04:15.940
No, actually, it was probably like four years ago I learned iOS programming.

00:04:15.940 --> 00:04:16.680
Oh, yeah, okay.

00:04:16.680 --> 00:04:17.380
It was mature.

00:04:17.380 --> 00:04:18.880
It was matured at that point.

00:04:18.880 --> 00:04:24.880
But then, you know, from there, I, you know, I get into things and I really get into them.

00:04:24.880 --> 00:04:26.560
So I was really into iOS programming.

00:04:26.840 --> 00:04:31.080
I got a job at the university I was working at, at the technology commercialization department.

00:04:31.080 --> 00:04:34.120
So I was doing like prototype apps and things like that.

00:04:34.120 --> 00:04:38.040
And then I started a software consultancy from there doing apps.

00:04:38.040 --> 00:04:39.320
And like I said, I was entrepreneurial.

00:04:39.320 --> 00:04:44.280
So it was part of it was consultancy for launching startup companies.

00:04:44.280 --> 00:04:50.000
So I worked with like accelerators and things like that to work with their clients to talk about monetization strategies.

00:04:50.620 --> 00:04:56.420
And how do you prioritize feature sets to get the maximum ROI?

00:04:56.420 --> 00:04:59.700
Because a lot of these early stage startups don't have a lot of money to burn.

00:04:59.700 --> 00:05:01.600
Yeah, they got to test it pretty quick, right?

00:05:01.600 --> 00:05:10.820
That must have been an amazing experience for you to build upon to like see all of these startups try to get going, sort of be behind the scenes and see what worked and what didn't.

00:05:10.820 --> 00:05:11.640
Yeah, yeah.

00:05:11.640 --> 00:05:12.620
It was really cool.

00:05:12.720 --> 00:05:20.240
And a lot of it was trying to, I guess, live vicariously through some of them, you know, like it was for me, the startup process is really cool.

00:05:20.240 --> 00:05:25.260
And consultancies are all right, but you're usually developing on someone else's term.

00:05:25.260 --> 00:05:28.700
So it's very exciting to work on these things.

00:05:28.700 --> 00:05:31.020
But you always do want something more.

00:05:31.020 --> 00:05:35.240
And so in my free time, that's when I was learning things like Python.

00:05:35.880 --> 00:05:48.040
And the reason why I picked up Python was I was fascinated with machine learning and deep learning and a lot of stuff like just like the neural transfer styles and things like that really caught me.

00:05:48.040 --> 00:05:51.920
And I've always really, really liked genetic algorithms.

00:05:51.920 --> 00:06:08.920
And so like creating these like life forms and these like life simulations on screen that start to evolve to like a natural, like naturally evolve to something that looks like it emulates some like Petri dish.

00:06:08.920 --> 00:06:10.900
Just it's in a digital environment.

00:06:10.900 --> 00:06:16.100
Even the behaviors that are exhibited look natural is very, very, very interesting to me.

00:06:16.380 --> 00:06:17.620
Yeah, that's super interesting.

00:06:17.620 --> 00:06:23.540
If you pair that with machine learning AI, you know, we could get to some really wild places pretty quickly, I suspect.

00:06:23.540 --> 00:06:24.440
Yeah.

00:06:24.440 --> 00:06:26.120
And that's how I picked it up.

00:06:26.120 --> 00:06:27.520
You know, it's pretty straightforward.

00:06:27.520 --> 00:06:31.280
I was coming from Objective-C, C++, C#.

00:06:31.280 --> 00:06:32.640
I did some Java too.

00:06:32.640 --> 00:06:37.760
So it was all strongly typed Objective, or not Objective, object-oriented stuff.

00:06:37.760 --> 00:06:48.540
So Python being a little looser in like their typing schemes and things like that and their class structures and being a crossroads between functional and object-oriented was pretty cool.

00:06:48.540 --> 00:06:51.680
And I've just used it ever since because it's so versatile.

00:06:51.680 --> 00:06:56.200
Like anything that I want to do, I can do it with Python.

00:06:56.700 --> 00:06:58.040
At least like my scope.

00:06:58.040 --> 00:07:05.160
I was really into like, you know, SciPy, NumPy, scikit-learn, you know, things like that.

00:07:05.160 --> 00:07:09.600
All like the newest, latest stuff was being developed on Python.

00:07:10.040 --> 00:07:12.900
And so I was just super attracted to that.

00:07:12.900 --> 00:07:13.460
That's awesome.

00:07:13.460 --> 00:07:14.680
Yeah, it's the perfect place to be.

00:07:14.680 --> 00:07:20.620
And there's lots of new things being built there, but especially in the machine learning space, like a lot of stuff is being built there.

00:07:20.620 --> 00:07:26.100
So, you know, you spend your time hanging around startups, and then I think it just starts to rub off.

00:07:26.100 --> 00:07:27.700
You're like, these people aren't that special.

00:07:27.700 --> 00:07:28.880
I could do what they're doing.

00:07:28.880 --> 00:07:29.860
Why don't I have a startup?

00:07:29.860 --> 00:07:34.220
So, you know, you kind of find yourself more or less in a place a little bit like that today, huh?

00:07:34.220 --> 00:07:34.880
What are you doing now?

00:07:34.880 --> 00:07:50.040
Now I started a company that is producing its own blockchain, and our goal is to make the adoption of blockchain very smooth for people who might not otherwise have the same domain knowledge.

00:07:50.040 --> 00:07:57.540
So like one of the things that I had to reconcile with a lot of startups was the tech gap between the client and me.

00:07:57.540 --> 00:08:01.420
And I felt pretty good at communicating that with people.

00:08:01.740 --> 00:08:05.220
As I was picking up other stuff, you start to notice these patterns, right?

00:08:05.220 --> 00:08:07.760
How do you communicate to non-technical people?

00:08:07.760 --> 00:08:10.840
How do you break something down in that communication process?

00:08:10.840 --> 00:08:19.520
Why do some open source libraries strive over others, even if they are comparable or one's better technically than the other?

00:08:19.520 --> 00:08:21.200
Like you could look at Keras.

00:08:21.200 --> 00:08:24.400
Keras is a perfect example, right?

00:08:24.400 --> 00:08:26.480
It's so simple and modular.

00:08:26.860 --> 00:08:35.460
There's plenty of other building block type machine learning libraries like Lasagna was one that just never took off.

00:08:35.460 --> 00:08:39.940
And it's really about the presentation communication, which is what I studied in college.

00:08:39.940 --> 00:08:41.900
It's all about communication and things like that.

00:08:42.460 --> 00:08:47.780
And so I realized that there's a problem with blockchain as well.

00:08:47.920 --> 00:09:10.880
And just picking up on all of these kind of lessons I've learned over time, I figured, you know, I feel like I could build a toolkit and demonstrate that to people so that when they pick it up from having web development experience or backend experience or whatever, enter this blockchain world, which in a lot of ways is arbitrarily difficult.

00:09:11.400 --> 00:09:12.860
And not have a hard time.

00:09:12.860 --> 00:09:15.180
So that's what I do now.

00:09:15.180 --> 00:09:17.920
We have a team in San Francisco.

00:09:17.920 --> 00:09:22.640
We have some other teams abroad helping us with some of the other software in our suite.

00:09:22.640 --> 00:09:28.120
Our code base for the main technology, which is the blockchain, is all written in Python.

00:09:28.700 --> 00:09:46.860
And we've pretty much advertised heavily on being a Python platform, mainly because it's super popular language behind JavaScript, yet has a lot more compared to JavaScript, a lot more safety and access to lower levels.

00:09:47.120 --> 00:09:50.520
Yeah, and often it's used in more sort of formal software space.

00:09:50.520 --> 00:09:57.620
And from what I can tell from looking at what you're doing, it's kind of like, let's take this blockchain and make it like enterprise friendly.

00:09:57.620 --> 00:10:06.620
And especially if you intersect technology space with enterprise, like JavaScript becomes much less popular than it would be sort of generally taken, right?

00:10:06.620 --> 00:10:07.160
Oh, totally.

00:10:07.160 --> 00:10:07.500
Yeah.

00:10:07.500 --> 00:10:12.500
I mean, JavaScript, that's kind of the whole point behind not using JavaScript.

00:10:12.500 --> 00:10:20.500
There's blockchain projects that do use JavaScript, but I conjecture that they're not going to or they're going to have a very hard time.

00:10:20.500 --> 00:10:24.100
It's a hobby space.

00:10:24.100 --> 00:10:24.800
Yeah.

00:10:24.800 --> 00:10:25.080
Right.

00:10:25.080 --> 00:10:25.420
Yeah.

00:10:25.420 --> 00:10:25.660
Yeah.

00:10:25.660 --> 00:10:25.840
Yeah.

00:10:25.840 --> 00:10:26.340
I hear you.

00:10:26.340 --> 00:10:37.840
So basically, we don't necessarily trust JavaScript code as much as Python code, and I don't think enterprises really do.

00:10:37.840 --> 00:10:42.760
The starting point for any software open source project is the hobbyist.

00:10:42.760 --> 00:10:49.520
If you can't make it past the people who are actually going to be using this, ultimately, it doesn't matter what the decision maker says.

00:10:49.520 --> 00:10:55.320
You're going to have a lot of resentment, and it's just not really going to work.

00:10:55.680 --> 00:11:02.640
Like, one of the examples is Scala, and what's kind of ironic is people who program Scala love Scala.

00:11:02.640 --> 00:11:14.300
I've heard stories of enterprises developing it all in Scala because it's demonstratively better than just Java, and then having to revert back because they can't find anybody to maintain the code.

00:11:14.300 --> 00:11:14.660
Right.

00:11:14.660 --> 00:11:17.280
That's a really interesting example, yeah.

00:11:17.280 --> 00:11:17.840
Yeah.

00:11:17.840 --> 00:11:19.860
You have to take, like, both sides.

00:11:19.860 --> 00:11:22.760
So what is the hobbyist going to use and really adopt?

00:11:22.760 --> 00:11:25.240
And here's another thing.

00:11:25.240 --> 00:11:28.020
Like, you look at the smart contracting languages that are out there.

00:11:28.020 --> 00:11:34.840
A lot of them, like, I've seen ones that are based off of Pascal, which is for Cardano is based off of Pascal.

00:11:34.840 --> 00:11:39.980
You have this project by these people called Kadena that's based off of Lisp.

00:11:39.980 --> 00:11:44.360
You have Ethereum is based off of C++, right?

00:11:44.480 --> 00:11:45.480
Which is, like, it's not that hard.

00:11:45.480 --> 00:11:49.260
It's hard for someone who doesn't really know anything about it.

00:11:49.260 --> 00:11:51.480
And these languages...

00:11:51.480 --> 00:11:56.480
Oh, and Tezos has their own called Mickelson, which they say why...

00:11:56.480 --> 00:11:59.660
They have a little blurb about their design choices.

00:11:59.660 --> 00:12:08.980
And one of, like, the rhetorical questions that they begin a paragraph is, why isn't this as simple as OCaml or Haskell?

00:12:08.980 --> 00:12:10.480
And that's like...

00:12:11.260 --> 00:12:15.100
Those don't sound like simple things to me, to be honest.

00:12:15.100 --> 00:12:16.200
Right.

00:12:16.340 --> 00:12:23.400
And they're like, oh, yeah, we did not purposely want to make this easy because the harder it is, the less people who develop it.

00:12:23.400 --> 00:12:26.340
It requires a much more technical skill set.

00:12:26.340 --> 00:12:34.060
Therefore, it's a security precaution because you know that technical people are going to use this, which I think is ridiculous.

00:12:34.480 --> 00:12:41.640
It's like making a car hard to use so that only people who really put a lot of time in there drive it so then there's less crashes.

00:12:41.640 --> 00:12:44.820
Yeah, it sounds like a unicycle versus a bicycle.

00:12:44.820 --> 00:12:45.380
Right.

00:12:45.380 --> 00:12:46.820
Exactly.

00:12:46.820 --> 00:12:49.900
So, it's a weird world out there.

00:12:49.900 --> 00:12:55.020
And it's a lot of personalities that have a lot of strong opinions about the way that things should be.

00:12:55.020 --> 00:12:57.640
But we're just interested in building stuff.

00:12:57.640 --> 00:13:01.600
The end goal, what is the end goal?

00:13:02.320 --> 00:13:15.800
It's really to make this cool tech available to as many people as possible and to give them a bus toolkit that isn't limiting and at the same time isn't something that's super complicated.

00:13:15.800 --> 00:13:17.780
Yeah, I think that's really great.

00:13:17.780 --> 00:13:23.200
This portion of Talk Python To Me is brought to you by Linode.

00:13:23.200 --> 00:13:27.140
Are you looking for bulletproof hosting that's fast, simple, and incredibly affordable?

00:13:27.140 --> 00:13:32.040
Look past that bookstore and check out Linode at talkpython.fm/Linode.

00:13:32.040 --> 00:13:33.980
That's L-I-N-O-D-E.

00:13:33.980 --> 00:13:38.460
Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:13:38.460 --> 00:13:43.480
They have 10 data centers across the globe, so no matter where you are, there's a data center near you.

00:13:43.480 --> 00:13:51.540
Whether you want to run your Python web app, host a private Git server, or file server, you'll get native SSDs on all the machines,

00:13:51.540 --> 00:13:58.860
a newly upgraded 200 gigabit network, 24-7 friendly support, even on holidays, and a seven-day money-back guarantee.

00:13:58.860 --> 00:14:01.180
Do you need a little help with your infrastructure?

00:14:01.180 --> 00:14:07.400
They even offer professional services to help you get started with architecture, migrations, and more.

00:14:07.400 --> 00:14:10.500
Get a dedicated server for free for the next four months.

00:14:10.680 --> 00:14:13.340
Just visit talkpython.fm/Linode.

00:14:13.340 --> 00:14:24.620
Just to be clear, the company that you started is Lambden, and you guys are doing primarily blockchain, not cryptocurrency.

00:14:24.620 --> 00:14:25.580
Is that right?

00:14:25.580 --> 00:14:31.500
In a way, we have a main deployment, so we went through a token sale and things like that to be primarily funded,

00:14:31.500 --> 00:14:43.520
which is cool because we can develop everything open source and don't have external pressures from VCs that are just looking to increase your valuation over time from explicitly on pay-per-view.

00:14:43.520 --> 00:14:43.920
Yeah.

00:14:43.920 --> 00:14:44.900
So that's cool.

00:14:45.480 --> 00:14:55.460
So some people have a hard time understanding that we are developing a blockchain suite, and out of the box, you get everything that you need to build a blockchain.

00:14:55.460 --> 00:15:03.920
However, we also provide a main deployment of our blockchain, which can either serve as a premium example of what to do,

00:15:04.420 --> 00:15:11.280
or it has a feature on it that allows you to what's called atomically swap in between cryptocurrencies,

00:15:11.280 --> 00:15:17.380
which not any cryptocurrency is really offering to a performance level that we can offer.

00:15:17.380 --> 00:15:27.200
So what this atomic swap allows people to do is create their own blockchain using our tools or to use a cryptocurrency that already exists

00:15:27.200 --> 00:15:29.440
and be able to exchange them through this.

00:15:29.440 --> 00:15:36.620
You can think of it as like a decentralized clearinghouse without trusting an exchange or an intermediary or a third party,

00:15:36.620 --> 00:15:45.480
and knowing with complete certainty that that swap is going to either be 100% successful, the funds get remitted to both sides,

00:15:45.480 --> 00:15:50.100
or when it fails, neither person has their funds lost.

00:15:50.100 --> 00:15:53.900
So we can talk about either.

00:15:53.900 --> 00:15:58.600
I think a lot of people who are looking at it from a cryptocurrency standpoint are looking at the main chain,

00:15:58.780 --> 00:16:05.040
but from a Python standpoint, it's much more about the tools and the box and the things that you get inside of it.

00:16:05.040 --> 00:16:05.820
Yeah, very interesting.

00:16:05.820 --> 00:16:17.160
So what I'd like to do is like sort of just start with a bit of a historical perspective on what are cryptocurrencies and the blockchain that came out of it.

00:16:17.160 --> 00:16:19.200
So let's just start there.

00:16:19.200 --> 00:16:20.880
Let's just start with what is a cryptocurrency?

00:16:20.880 --> 00:16:24.900
I know what a dollar or an Australian dollar or a euro is.

00:16:24.900 --> 00:16:26.780
What is a cryptocurrency?

00:16:27.360 --> 00:16:28.920
Let's go from a bottom-up approach.

00:16:28.920 --> 00:16:34.140
A cryptocurrency is a unit of something that exists on a blockchain.

00:16:34.140 --> 00:16:41.500
A blockchain is a decentralized database, essentially, or a lot of people call it distributed ledger technology.

00:16:41.500 --> 00:16:49.020
And a ledger is a subset of a database that really just maps a user to a number,

00:16:49.200 --> 00:16:52.160
and that number is how much of this cryptocurrency you have.

00:16:52.160 --> 00:17:02.920
And using certain mechanisms such as consensus and sort of this new buzzword called trustless technology,

00:17:02.920 --> 00:17:13.380
where you model interactions in between computers, assuming the other side is malevolent and looking to defraud you.

00:17:13.380 --> 00:17:20.420
You can develop these systems that are thought-tolerant, robust, and are completely open.

00:17:20.420 --> 00:17:22.880
So anyone can join and participate in the network.

00:17:22.880 --> 00:17:24.520
Anyone can send funds.

00:17:24.520 --> 00:17:28.880
Transaction fees are distributed equally among the users.

00:17:29.280 --> 00:17:35.480
The introduction of this currency is introduced in the system in an equal or as equal as possible way.

00:17:35.480 --> 00:17:42.760
And essentially what a cryptocurrency is, is some unit of that on this distributed network.

00:17:43.060 --> 00:17:43.180
Right.

00:17:43.180 --> 00:17:45.620
And there's multiple networks, right?

00:17:45.620 --> 00:17:48.560
Like Bitcoin is its own thing.

00:17:48.560 --> 00:17:50.120
Ethereum is its own thing.

00:17:50.120 --> 00:17:51.420
Yeah.

00:17:51.420 --> 00:17:55.360
So some interesting aspects, like it has no intrinsic value, right?

00:17:55.360 --> 00:17:56.960
It's like not backed by gold.

00:17:56.960 --> 00:18:00.300
You can't have a physical form of it, right?

00:18:00.300 --> 00:18:05.860
I can't get like a five Bitcoins to put in my pocket, although I wouldn't want to carry that much around.

00:18:07.340 --> 00:18:14.080
I think that sounds kind of crazy, but actually like almost all of my money is in the bank.

00:18:14.080 --> 00:18:16.320
That has no physical form, right?

00:18:16.320 --> 00:18:18.440
My house, that's a physical thing.

00:18:18.440 --> 00:18:25.120
But a good portion of that is actually owned by the bank through a mortgage, which is just more or less digital.

00:18:25.120 --> 00:18:27.700
I guess I have a paper copy that says who owns what.

00:18:27.700 --> 00:18:29.600
But so that's not that crazy.

00:18:29.600 --> 00:18:33.880
But the fact that it's not determined by a central bank is pretty interesting, right?

00:18:33.880 --> 00:18:35.980
It's not controlled by a country.

00:18:36.420 --> 00:18:45.120
One fact of Bitcoin as Bitcoin being the first cryptocurrency that was essentially hit success.

00:18:45.120 --> 00:18:55.880
There's been other like digital currencies like e-gold or the NSA actually in 96 talked about a cryptographic mint, which is an interesting divert.

00:18:55.880 --> 00:19:00.200
If you want to dive into kind of like the backbone of where this stuff comes from.

00:19:00.200 --> 00:19:04.960
They were the first experiment really of this stuff that took hold.

00:19:05.060 --> 00:19:09.100
And this was in 2008 and a direct response of the financial crisis.

00:19:09.100 --> 00:19:22.340
And what they saw was a lot of financial lending and the mechanisms to make money are essentially a bank goes and borrows it from a central bank to fill out a loan or something like that.

00:19:22.340 --> 00:19:27.820
And the rules are different.

00:19:27.820 --> 00:19:31.640
You essentially need 10% of the capital on hand to secure a loan.

00:19:31.640 --> 00:19:36.200
So what that means is if somebody pays you $10, you can go to a central bank and get $100.

00:19:36.200 --> 00:19:39.320
And then you can loan that $100 out.

00:19:39.320 --> 00:19:41.980
You can use it for your needs.

00:19:41.980 --> 00:19:43.880
And that's how money is made.

00:19:43.880 --> 00:19:45.380
And a lot of people think that.

00:19:45.380 --> 00:19:46.560
They think that, oh, it gets printed.

00:19:47.140 --> 00:19:50.900
And then, I don't know, the Federal Reserve distributes it.

00:19:50.900 --> 00:19:53.840
And everything's hunky-dory.

00:19:53.840 --> 00:20:08.400
But because a bank only needs a certain amount of money on hand, they essentially have a 10x multiplier of their working capital that they can create out of nothing, essentially.

00:20:08.400 --> 00:20:13.480
And this doesn't make sense to a lot of people because not a lot of people understand what fractional reserve banking is.

00:20:13.480 --> 00:20:18.460
In Switzerland, for example, you can borrow against the central bank.

00:20:18.460 --> 00:20:25.180
I know in the EU, you only need 3% to 5% on hand to get whatever loan you're seeking.

00:20:25.180 --> 00:20:28.420
I don't know what it is in Switzerland because they're not in the EU.

00:20:28.420 --> 00:20:34.000
But you can borrow from Switzerland's central bank for 0% interest.

00:20:34.380 --> 00:20:40.560
And so, you literally can just make money if you're in a position.

00:20:40.560 --> 00:20:47.520
And, of course, that's what sparked the entire financial crisis was these banks were creating these loans for these bad mortgages.

00:20:47.520 --> 00:20:52.120
And it was money being created from borrowing from the central banks and from the Fed.

00:20:52.120 --> 00:20:58.340
And then, all of these banks had these assets that were really, they only had 10% actually there on file.

00:20:58.480 --> 00:21:07.160
And then, when the rating agencies were essentially rating these bad loans as good, it eventually started to crumble.

00:21:07.160 --> 00:21:08.500
And that's when it fell.

00:21:08.500 --> 00:21:16.740
And so, what Bitcoin is solving is that that mechanism to print money is not as open or controlled by central authority.

00:21:16.740 --> 00:21:18.640
And that's why a lot of people are interested in it.

00:21:18.640 --> 00:21:18.920
Right.

00:21:18.980 --> 00:21:27.820
And it's not as real as people see real money, printed money, versus, say, just like kind of created digital money.

00:21:27.820 --> 00:21:28.040
Yeah.

00:21:28.040 --> 00:21:28.480
Yeah.

00:21:28.480 --> 00:21:28.900
Yeah.

00:21:28.900 --> 00:21:32.600
But I would just conjecture that to understand.

00:21:32.600 --> 00:21:40.800
A lot of people probably think they know where their money comes from and how money supply is introduced into the economy.

00:21:41.260 --> 00:21:56.280
But when you start to tell people or explain to them the true nature of who prints money, it's generally the banks who borrow money that doesn't really exist, quote unquote, in a natural state.

00:21:56.280 --> 00:21:56.840
Yeah.

00:21:56.840 --> 00:21:57.740
That's pretty wild.

00:21:57.740 --> 00:21:58.040
Yeah.

00:21:58.040 --> 00:22:06.120
And so, then it's not that crazy to think that, oh, this experiment of let's create a digital currency suddenly has so much in value.

00:22:06.120 --> 00:22:09.020
I think a lot of people say, oh, well, it's worthless.

00:22:09.680 --> 00:22:10.520
I guess.

00:22:10.520 --> 00:22:11.860
I don't really know.

00:22:11.860 --> 00:22:25.560
Because at the same point, gold and silver went through similar phases of being completely overbought for speculative value beyond their use in electronics or things like this.

00:22:25.560 --> 00:22:25.800
Yeah.

00:22:25.800 --> 00:22:26.260
They're true.

00:22:26.260 --> 00:22:27.020
Natural value.

00:22:27.020 --> 00:22:27.500
Interesting.

00:22:27.500 --> 00:22:28.100
Yeah.

00:22:28.100 --> 00:22:30.640
So, Bitcoin was invented in 2008.

00:22:30.640 --> 00:22:35.340
I didn't really, in my mind, tie that to the financial crisis, but the timing is perfect.

00:22:35.340 --> 00:22:37.060
So, why don't we do this?

00:22:37.160 --> 00:22:43.780
Why don't you walk us through the steps of what actually happens when I, say, purchase something with a Bitcoin?

00:22:43.780 --> 00:22:47.100
Like, how does that work with the blockchain and the algorithms and stuff like that?

00:22:47.100 --> 00:22:55.220
Like, if I walked down to, like, the restaurant and I wanted a slice of pizza, I would get out of my pocket, like, a dollar or three dollars and hand it to them, right?

00:22:55.220 --> 00:22:55.860
What happens here?

00:22:55.860 --> 00:22:56.140
Yeah.

00:22:56.140 --> 00:22:56.180
Yeah.

00:22:56.180 --> 00:23:03.980
So, basically, at the start, you need a wallet and the person that you're going to send Bitcoins to needs a wallet.

00:23:03.980 --> 00:23:06.980
Let's assume in this example that you already have Bitcoins.

00:23:06.980 --> 00:23:09.440
It's a lot easier to start at that point.

00:23:09.440 --> 00:23:10.040
Yeah, sure, sure.

00:23:10.180 --> 00:23:14.820
So, to create a wallet, it's really just a cryptographic public-private key pair.

00:23:14.820 --> 00:23:21.120
So, you essentially create 256 bytes or whatever the size may be.

00:23:21.500 --> 00:23:31.120
Randomly on your computer, the rate of collision is so small that you can assume, okay, it's like picking two atoms in the entire universe and them being the same atom.

00:23:31.680 --> 00:23:40.380
So, I trust that enough to make a private key out of it and then there's a mechanism by which you can convert that into a public key and then into an address and that's your wallet address.

00:23:40.380 --> 00:23:49.520
So, Mike is a string that is his public key, which he sends to individuals when they want to pay them money.

00:23:49.520 --> 00:23:56.560
So, you have this private key and this public-facing key and then the restaurant to buy a slice of pizza has the same thing.

00:23:56.760 --> 00:24:00.380
So, you would go into the restaurant, they would give you essentially your bill.

00:24:00.380 --> 00:24:01.920
I must say it's in Bitcoins.

00:24:01.920 --> 00:24:04.240
We could use the pizza example.

00:24:04.240 --> 00:24:11.840
The first real payment of Bitcoin was way back in the day and it was 10,000 Bitcoins for a pizza.

00:24:11.840 --> 00:24:15.840
That's got to be the world's most expensive pizza ever.

00:24:15.840 --> 00:24:16.560
It is.

00:24:16.560 --> 00:24:23.180
So, let's assume you're that poor soul who bought that pizza and the bill is 10,000 Bitcoins.

00:24:23.540 --> 00:24:34.820
What you essentially have to do then is sign a transaction saying, I approve the transfer of Mike's Bitcoins to Bob's Pizza Shop.

00:24:34.820 --> 00:24:40.100
These 10,000 Bitcoins are now owned by the pizza shop.

00:24:40.100 --> 00:24:55.840
And you submit that to the network, which is a decentralized network of peers, very similar to the way that BitTorrent works and the fact that each peer knows about just enough peers so that not everyone's connected to everybody.

00:24:55.840 --> 00:25:01.860
And such that messages can still get routed to anyone that they need to fast enough, right?

00:25:02.100 --> 00:25:05.700
So, this network gets propagated and it gets added essentially.

00:25:05.700 --> 00:25:11.080
Everyone gets known of it and it gets added to something called the mempool, which is just the memory pool.

00:25:11.080 --> 00:25:12.840
And it's essentially a stack.

00:25:12.840 --> 00:25:14.760
Well, technically it's a queue.

00:25:14.760 --> 00:25:15.740
So, it's a queue.

00:25:15.740 --> 00:25:17.180
Yours gets put on the top.

00:25:17.180 --> 00:25:22.940
And what happens is you can think of it like a garbage chute where you throw the transaction in.

00:25:22.940 --> 00:25:24.360
At the bottom, there's a dumpster.

00:25:24.360 --> 00:25:25.900
That dumpster is the block.

00:25:25.900 --> 00:25:30.940
So, what happens is when you've probably heard of mining, right?

00:25:30.940 --> 00:25:37.160
And so, in any point of time, a block's either being mined or it's being created.

00:25:37.160 --> 00:25:43.440
So, let's assume that before it's mined, it has to be created, which is also another strange thing.

00:25:43.440 --> 00:25:47.400
What occurs is then you pull the lever, you open the chute.

00:25:47.400 --> 00:25:50.860
The transactions fall into the block or the dumpster in this case.

00:25:50.860 --> 00:25:52.220
It fills up to a certain point.

00:25:52.220 --> 00:25:54.820
In Bitcoin, it's like one megabyte or something.

00:25:54.820 --> 00:25:56.220
And then you close the chute.

00:25:56.220 --> 00:25:58.780
That block has a block of transactions in it.

00:25:58.780 --> 00:26:00.160
And now, good to go.

00:26:00.160 --> 00:26:01.680
Become mined.

00:26:01.680 --> 00:26:04.920
So, those transactions are in the transaction.

00:26:04.920 --> 00:26:07.040
Now, maybe the mempool is super full.

00:26:07.040 --> 00:26:09.360
It hasn't been garbage day for a while.

00:26:09.360 --> 00:26:11.880
Or a lot of people are throwing garbage out.

00:26:11.880 --> 00:26:15.240
And so, you might have to wait a while for all those blocks to be minted.

00:26:15.240 --> 00:26:19.840
Because after the block is full, the miners get to work.

00:26:19.840 --> 00:26:31.320
And what a miner is essentially doing is trying to solve this puzzle where they take the entire data payload of the block and they turn that into a byte representation and hash it.

00:26:31.320 --> 00:26:32.760
And so, you hash it.

00:26:32.760 --> 00:26:37.680
You get a good, what, 32 bytes or something if you use SHA-256.

00:26:37.680 --> 00:26:54.200
And then what the challenge is, is to add an additional piece of data such that when you hash the block together with what's called a nonce, is the hash that is produced is under a certain numerical value.

00:26:54.960 --> 00:27:01.180
And what this means is that, let's say you hash something and it's 1, 2, 3.

00:27:01.180 --> 00:27:02.100
It's 123.

00:27:02.100 --> 00:27:05.780
Now, bytes can be represented as hex, and a hex is a number.

00:27:06.340 --> 00:27:10.180
So, that's generally how you get a numerical value out of the piece of data.

00:27:10.180 --> 00:27:14.440
So, let's assume in this example it's 123 is your hash.

00:27:14.440 --> 00:27:18.620
Now, the thing about cryptographic caches is you can't reverse compute them.

00:27:18.620 --> 00:27:20.060
You can only compute them forward.

00:27:20.060 --> 00:27:21.940
They're one-way cryptographic caches.

00:27:22.600 --> 00:27:26.140
So, you're never going to know what the outcome is before you hash it.

00:27:26.140 --> 00:27:28.400
And you can never undo that hash.

00:27:28.400 --> 00:27:29.680
So, you have the block.

00:27:29.680 --> 00:27:31.600
You give it, like, one byte.

00:27:31.600 --> 00:27:33.000
You try that hash.

00:27:33.000 --> 00:27:34.560
It goes forward one way.

00:27:34.560 --> 00:27:37.640
You get the thing out there, and it's 456.

00:27:37.640 --> 00:27:39.840
Okay, great.

00:27:39.840 --> 00:27:43.340
You try that, and you notice that you can get a whole bunch of different combinations.

00:27:43.340 --> 00:27:47.880
Now, the network decides what is an acceptable answer.

00:27:47.880 --> 00:27:52.460
With Bitcoin, because there's so many miners, it's a very, very,

00:27:52.460 --> 00:28:00.400
hard problem such that it may be, let's say in this example the difficulty is 10.

00:28:00.400 --> 00:28:05.560
So, only hashes that are number 10 or less are acceptable,

00:28:05.560 --> 00:28:09.080
and then that pass the mining test or challenge.

00:28:09.080 --> 00:28:13.900
So, you start hashing, and 999, that's 1,000 different variations,

00:28:13.900 --> 00:28:16.140
and only 10 of them are accurate.

00:28:16.140 --> 00:28:19.220
So, it's a 1% chance that you're going to get something

00:28:19.220 --> 00:28:22.680
are going to take about 100 hashes, right?

00:28:22.680 --> 00:28:29.320
And so, the hash rate of this network is 100 hashes per block.

00:28:29.320 --> 00:28:32.200
Now, you hash, hash, hash.

00:28:32.200 --> 00:28:34.860
You eventually find something out of 100 hashes.

00:28:34.860 --> 00:28:37.340
What happens in Bitcoin is then you submit that.

00:28:37.340 --> 00:28:39.440
Everybody agrees that's the correct answer

00:28:39.440 --> 00:28:42.320
because the difficulty increases,

00:28:42.640 --> 00:28:44.980
and it also makes sense in a second.

00:28:44.980 --> 00:28:47.460
But because the difficulty is so high in Bitcoin,

00:28:47.460 --> 00:28:49.820
it's not like two people are going to get the same answer

00:28:49.820 --> 00:28:51.700
at the exact same time.

00:28:51.700 --> 00:28:55.900
And so, if somebody does,

00:28:55.900 --> 00:28:58.280
you say, well, that's the answer.

00:28:58.280 --> 00:28:59.540
It gets propagated.

00:28:59.540 --> 00:29:00.740
It gets added onto the blockchain.

00:29:00.740 --> 00:29:02.340
And then you go back to your dumpster.

00:29:02.340 --> 00:29:03.420
You pull the lever.

00:29:03.420 --> 00:29:04.200
Shoot full.

00:29:04.200 --> 00:29:05.460
It's full.

00:29:05.560 --> 00:29:06.880
And you repeat that, right?

00:29:06.880 --> 00:29:10.960
So, the thing about Bitcoin is a block is minted every 10 minutes.

00:29:10.960 --> 00:29:15.540
And so, the answer to that difficulty or hashing question

00:29:15.540 --> 00:29:16.640
has to be,

00:29:16.640 --> 00:29:19.700
by what hash rate,

00:29:19.700 --> 00:29:23.280
given all the miners and all of their power in the network,

00:29:23.280 --> 00:29:24.720
do we have to make this puzzle

00:29:24.720 --> 00:29:27.080
so that one solution is found

00:29:27.080 --> 00:29:29.380
about once every 10 minutes?

00:29:29.880 --> 00:29:32.000
And that's why you say these things like

00:29:32.000 --> 00:29:35.320
Bitcoin's hashing power is greater than the country of Denmark

00:29:35.320 --> 00:29:39.760
because what I just explained isn't necessarily anything useful.

00:29:39.760 --> 00:29:45.620
It's just a way to introduce blocks to the network at random.

00:29:45.620 --> 00:29:48.640
And I will note that this is because

00:29:48.640 --> 00:29:52.860
the introduction of Bitcoins to the network is fair

00:29:52.860 --> 00:29:54.700
and distributed like such.

00:29:54.700 --> 00:29:57.440
So, you never know what hash you're going to get

00:29:57.440 --> 00:29:58.380
before you hash it,

00:29:58.380 --> 00:30:02.140
and you never know what your data payload is going to hash into.

00:30:02.140 --> 00:30:04.860
And so, it's a fair distribution.

00:30:04.860 --> 00:30:06.120
That's the purpose of mining.

00:30:06.120 --> 00:30:11.080
However, if you say that our hashing network is 100 hashes per second

00:30:11.080 --> 00:30:13.060
and it's us two,

00:30:13.060 --> 00:30:16.460
each of us has a graphics card that can mine 50 hashes per second,

00:30:16.460 --> 00:30:17.720
that makes sense.

00:30:17.720 --> 00:30:18.900
So, the block time is one second

00:30:18.900 --> 00:30:21.100
because you have 50 hashes, I have 50 hashes.

00:30:21.100 --> 00:30:23.760
There are 50 hashes per second that we can compute.

00:30:23.760 --> 00:30:24.720
We add them together.

00:30:24.720 --> 00:30:25.840
It's 100 hashes.

00:30:25.840 --> 00:30:27.280
Block time is one second.

00:30:27.280 --> 00:30:31.560
The difficulty is, you know, 100 hashes per second on average.

00:30:31.560 --> 00:30:34.940
Now, if somebody else comes with their card and they add another 50,

00:30:34.940 --> 00:30:38.500
suddenly there's 150 hashes per second on the network

00:30:38.500 --> 00:30:42.080
and the blocks are going to get produced faster, right?

00:30:42.080 --> 00:30:43.060
A third faster.

00:30:43.060 --> 00:30:45.440
And so, what you need to do to stop that

00:30:45.440 --> 00:30:49.660
because you don't want to over-mint the production

00:30:49.660 --> 00:30:55.100
and introduce more coins into the network than you can over time

00:30:55.100 --> 00:30:57.840
is to make that puzzle a little bit harder

00:30:57.840 --> 00:31:02.580
so that it takes about 150 hashes to solve instead of just 100.

00:31:03.300 --> 00:31:10.500
And that's what has happened with Bitcoin is that so many miners have been seeing how much money they can make with Bitcoin

00:31:10.500 --> 00:31:14.680
and seeing the price skyrocket that they're joining and doubling down

00:31:14.680 --> 00:31:18.600
and people are making basic miners that have ridiculous numbers of hashes,

00:31:18.600 --> 00:31:20.420
like trillions of hashes per second.

00:31:20.580 --> 00:31:25.180
Yeah, the computational stuff going on there is really, really intense.

00:31:25.180 --> 00:31:25.980
Exactly.

00:31:25.980 --> 00:31:31.760
Imagine this toy example multiplied by literally trillions and trillions and trillions of hashes

00:31:31.760 --> 00:31:34.960
and that's what Bitcoin has turned into now.

00:31:38.860 --> 00:31:44.600
NerdLettering makes unique swag for Python developers.

00:31:44.600 --> 00:31:48.540
Think Python-themed mugs, mouse pads, t-shirts, and more.

00:31:48.540 --> 00:31:54.040
Dan Bader, a previous guest on the show, and his wife Anya founded NerdLettering in 2016

00:31:54.040 --> 00:31:59.300
to bring you uniquely designed Python accessories that will spruce up your daily stand-up meetings.

00:31:59.300 --> 00:32:02.460
Go and check out their huge selection of Python swag.

00:32:02.460 --> 00:32:07.840
Just visit talkpython.fm/nerdlettering and get 10% off your entire order.

00:32:08.120 --> 00:32:10.580
That's talkpython.fm/nerdlettering.

00:32:10.580 --> 00:32:12.980
The discount will be applied automatically on checkout.

00:32:12.980 --> 00:32:15.580
Now it's up to you to check out all their Python swag.

00:32:15.580 --> 00:32:20.420
You talked about the mining and you talked about the purchasing.

00:32:20.420 --> 00:32:25.160
Is a mining operation necessary to do a purchase or like an exchange?

00:32:25.160 --> 00:32:25.980
No.

00:32:25.980 --> 00:32:31.880
And so what really happens is you give, miners are incentivized by Bolt,

00:32:31.880 --> 00:32:35.740
the potential that they mine a correct block and get rewarded.

00:32:37.380 --> 00:32:44.500
And a transaction fee by which you have to essentially pay a little bit of Bitcoin to the network

00:32:44.500 --> 00:32:48.280
for it to get properly propagated and people to know about it.

00:32:48.280 --> 00:32:52.680
So you as a consumer have to pay that transaction fees,

00:32:52.680 --> 00:32:54.920
but you do not have to mine your own transactions.

00:32:54.920 --> 00:32:55.600
I see.

00:32:55.600 --> 00:32:58.380
So it's a little bit like the credit card fees or something.

00:32:58.380 --> 00:32:58.980
Exactly.

00:32:58.980 --> 00:33:00.580
You talked about the computational stuff.

00:33:00.580 --> 00:33:06.240
Something that I thought was pretty interesting is just to give people a sense of what that means.

00:33:06.240 --> 00:33:06.520
Right.

00:33:06.520 --> 00:33:12.020
Like there's so much power being put into some of the cryptocurrency and more broadly,

00:33:12.020 --> 00:33:16.260
not just Bitcoin, that like it's starting to affect cities.

00:33:16.580 --> 00:33:18.800
So there's a city called Plattsburgh.

00:33:18.800 --> 00:33:20.480
I think it might be in New York.

00:33:20.480 --> 00:33:26.440
And it became the first city in the United States to ban cryptocurrency mining because it

00:33:26.440 --> 00:33:29.660
had the cheapest, some of the cheapest electricity rates in the world.

00:33:30.020 --> 00:33:36.000
So a bunch of people had moved there and it turned out that they had like some local sort of

00:33:36.000 --> 00:33:38.680
renewable, probably hydro supply or something.

00:33:38.680 --> 00:33:42.180
But once that was used up, then they had to go buy it on the open market.

00:33:42.180 --> 00:33:43.380
And that was a lot more.

00:33:43.700 --> 00:33:50.020
So it turns out that the average bill of just the people living in the city went up by $100

00:33:50.020 --> 00:33:54.540
to $200 a month because the cheap energy was used up by miners who had moved in.

00:33:54.540 --> 00:33:55.380
It's crazy, right?

00:33:55.380 --> 00:33:55.740
Yeah.

00:33:55.740 --> 00:33:56.320
Yeah.

00:33:56.320 --> 00:33:58.360
And it's not for anything.

00:33:58.360 --> 00:33:59.720
It's the fun part.

00:33:59.720 --> 00:34:04.840
So it's not like you can rest easy and say, well, all that energy went towards what supercomputers

00:34:04.840 --> 00:34:07.460
do, which is folding proteins to find new medicine.

00:34:07.460 --> 00:34:10.760
It's just seeing who gets the next piece of money.

00:34:10.760 --> 00:34:12.340
That's all for.

00:34:12.520 --> 00:34:16.700
Yeah, this probably is a little out of date, but I heard that to generate one Bitcoin is

00:34:16.700 --> 00:34:19.340
about the same energy as one U.S. household uses.

00:34:19.340 --> 00:34:20.140
Does that sound about right?

00:34:20.140 --> 00:34:20.640
For a year?

00:34:20.640 --> 00:34:21.260
Sorry.

00:34:21.260 --> 00:34:21.640
Yeah.

00:34:21.640 --> 00:34:23.280
Now, of course, you got to put a time frame on that, right?

00:34:23.280 --> 00:34:23.680
Per month.

00:34:23.680 --> 00:34:24.040
Yeah.

00:34:24.040 --> 00:34:25.100
I believe that.

00:34:25.100 --> 00:34:25.480
Yeah.

00:34:25.480 --> 00:34:26.580
That's pretty wild, right?

00:34:26.580 --> 00:34:30.060
So let's talk really quickly about some of the popular cryptocurrencies.

00:34:30.060 --> 00:34:31.520
You talked about Bitcoin.

00:34:31.520 --> 00:34:33.680
There's Ethereum and some others, right?

00:34:33.680 --> 00:34:34.320
Yeah.

00:34:34.320 --> 00:34:36.320
So what would you like to talk about specifically?

00:34:36.320 --> 00:34:37.240
Which ones are they?

00:34:37.240 --> 00:34:41.120
Just give us a couple other examples of popular cryptocurrencies.

00:34:41.660 --> 00:34:43.940
Everyone's heard of Bitcoin, but what are some of the others?

00:34:43.940 --> 00:34:44.940
So there's Bitcoin.

00:34:44.940 --> 00:34:48.380
There's Ethereum, which is architecturally different.

00:34:48.380 --> 00:34:51.360
There's also Monero, which is architecturally different.

00:34:52.040 --> 00:35:01.780
There's some what's called Bitcoin clones, like Litecoin or Dogecoin, which is based off of a meme, or even Zcash.

00:35:01.780 --> 00:35:03.920
And I'll get into these differences.

00:35:03.920 --> 00:35:12.160
Essentially, the differences between each of these blockchains can either be apparent, such as Ethereum, which is completely different,

00:35:12.280 --> 00:35:17.280
and then has these things such as called smart contracts on them, or not so, like Litecoin.

00:35:17.280 --> 00:35:25.600
Litecoin's really just a fork of the code base, and they modify the block time, so then you don't have to wait as long for a block to be mined,

00:35:25.600 --> 00:35:27.480
and it's supposed to make payments faster.

00:35:27.480 --> 00:35:29.280
I don't know about that.

00:35:29.420 --> 00:35:34.720
But Ethereum's interesting because a smart contract is a much more complex payment.

00:35:34.980 --> 00:35:44.960
So, for example, the pizza company could have a smart contract by which you pay a dress, which has a piece of code called Solidity Code,

00:35:44.960 --> 00:35:51.700
and this is what I alluded to being difficult to develop earlier, is that when you pay it,

00:35:52.160 --> 00:36:01.840
and perhaps you give it, like, a receipt ID or something, it can look up your receipt ID and see if, oh, this piece of pizza that you're buying is, in fact, how much money you're sending,

00:36:01.840 --> 00:36:08.760
and it could credit you, like, a point, and then you could redeem those points later for a free pizza or something like that.

00:36:08.760 --> 00:36:15.380
So that transaction style is a lot more complicated, and it really is use case to use case appropriate.

00:36:15.700 --> 00:36:25.720
Like, I don't think that it would be possible to model all of these natively into the blockchain and then support all the complexities that Ethereum can easily.

00:36:25.720 --> 00:36:33.540
So that mechanism is called a smart contract, and it uses code that is deployed onto the blockchain that's all open source.

00:36:33.540 --> 00:36:42.360
You can read all of it, and it acts exactly, essentially, how it's written.

00:36:42.360 --> 00:36:50.620
Every single computer that runs on the Ethereum network has something called the Ethereum virtual machine built in that has its own operation codes,

00:36:50.620 --> 00:36:59.040
like assembly, and has its own instruction set that does certain things so that if everybody has the same version of the Ethereum virtual machine,

00:36:59.040 --> 00:37:04.520
when they consume the operation code with the transactional payload that you create,

00:37:04.520 --> 00:37:07.860
it's going to spit out the same outputs or updates to the chain.

00:37:07.860 --> 00:37:18.460
And that's really powerful for a lot of cool things, especially if you're trying to make an automated task that you require some level of trust to complete.

00:37:18.460 --> 00:37:21.920
Example would be, like, identity verification.

00:37:21.920 --> 00:37:29.120
There's a service called, like, Civic that essentially hooks up with know-your-customer clients,

00:37:29.540 --> 00:37:41.240
and what they'll do is they verify for you and put a little tag in their quote-unquote database so that if other people can then say,

00:37:41.240 --> 00:37:46.400
oh, if the person who's sending me money has been verified by the Civic smart contract,

00:37:46.400 --> 00:37:53.240
I'm going to continue with my smart contract and perhaps grant them access to a certain app or things like that.

00:37:53.340 --> 00:37:58.360
Right. It's like a distributed trust verification, sort of federated identity almost on the blockchain.

00:37:58.360 --> 00:37:59.920
Yeah, it's a really cool concept.

00:37:59.920 --> 00:38:05.880
And the more that you get around it, the more you understand why people get so excited about it.

00:38:05.880 --> 00:38:06.580
Yeah, pretty interesting.

00:38:06.580 --> 00:38:12.740
So let's talk about the blockchain because I think people listening may be interested in cryptocurrency,

00:38:12.740 --> 00:38:17.180
but I think the blockchain is more broadly applicable to everyone.

00:38:17.520 --> 00:38:22.840
And, of course, that's where I started with cryptocurrencies because that's where the blockchain came from, right?

00:38:22.840 --> 00:38:23.220
Yeah.

00:38:23.220 --> 00:38:24.240
Yeah. So what is the blockchain?

00:38:24.240 --> 00:38:30.740
So blockchain is essentially, on the initial example I said, it's a distributed ledger, right?

00:38:30.740 --> 00:38:36.940
And with a ledger, you're mapping the address to how much you have, essentially.

00:38:36.940 --> 00:38:41.600
With the blockchain, maybe you don't want that restriction.

00:38:41.600 --> 00:38:54.960
Maybe you want to have really anything, supply chain proposals, ISO verification, things like that, on your network.

00:38:54.960 --> 00:39:01.360
And you don't necessarily want to work with Ethereum because Ethereum costs a lot of money to do a transaction.

00:39:01.360 --> 00:39:04.440
It costs a lot of money to put up a smart contract.

00:39:04.440 --> 00:39:09.700
You could pay easily $60 to deploy a smart contract onto the mainnet.

00:39:10.060 --> 00:39:12.080
Maybe you don't really want to do that.

00:39:12.080 --> 00:39:22.200
You want to have a little more control over what you're doing or a little more customability where you have what's called a consortium with individuals that all have a common goal.

00:39:22.200 --> 00:39:28.000
And one of those goals is to make sure that their interactions aren't completely public.

00:39:28.000 --> 00:39:32.280
In the case of industry, that's where you use the blockchain.

00:39:32.280 --> 00:39:36.720
So when everyone says that the blockchain is much more important than cryptocurrency, it's because of that.

00:39:36.960 --> 00:39:37.100
Right.

00:39:37.100 --> 00:39:41.460
Because it's the foundation of cryptocurrency, but it can also be used much more broadly.

00:39:41.460 --> 00:39:42.020
Yeah.

00:39:42.020 --> 00:39:50.600
The place I seem to hear it the most just in popular culture, popular tech culture anyway, is around like supply chain stuff.

00:39:50.600 --> 00:39:50.880
Right.

00:39:50.880 --> 00:39:55.520
Like there was recently a some kind of salmonella thing with vegetables.

00:39:55.520 --> 00:39:56.120
Right.

00:39:56.120 --> 00:39:59.780
Or if you're if you're like creating parts for cars or whatever.

00:39:59.780 --> 00:40:00.060
Right.

00:40:00.060 --> 00:40:06.560
You could theoretically tag them on the blockchain and like keep track of where they came from in some sort of variable way.

00:40:06.560 --> 00:40:06.820
Right.

00:40:06.820 --> 00:40:07.160
Yeah.

00:40:07.160 --> 00:40:07.620
Correct.

00:40:07.620 --> 00:40:08.020
Yeah.

00:40:08.020 --> 00:40:08.780
So how would that work?

00:40:08.780 --> 00:40:11.400
Like just because it has something on the blockchain.

00:40:11.400 --> 00:40:13.540
How do I know that that means anything?

00:40:13.540 --> 00:40:13.760
Right.

00:40:13.760 --> 00:40:14.760
Identify where it comes from.

00:40:14.760 --> 00:40:15.140
Yeah.

00:40:15.140 --> 00:40:15.560
Yes.

00:40:15.560 --> 00:40:18.720
I mean, like every system has to have some level of trust.

00:40:18.720 --> 00:40:21.240
So you trust the Bitcoin developers.

00:40:21.240 --> 00:40:21.980
Right.

00:40:21.980 --> 00:40:23.280
They didn't screw something up.

00:40:23.280 --> 00:40:26.940
So similarly with, let's say, supply chain.

00:40:26.940 --> 00:40:32.340
Say you put out an RFP for a bunch of potatoes and you're going to make sure those potatoes are really potatoes.

00:40:32.520 --> 00:40:38.700
You do have to trust that the sampling of people who get to see and respond to your RFP are, in fact, potato suppliers.

00:40:38.700 --> 00:40:41.100
And somebody makes that judgment call.

00:40:41.100 --> 00:40:48.220
Now, usually in systems, it's procurement department, which has a list of potato suppliers and life is good.

00:40:48.220 --> 00:40:49.860
They might have some certifications.

00:40:49.860 --> 00:40:50.320
Right.

00:40:50.320 --> 00:40:57.940
And so those certification departments are the ones that make a judgment call that they are, in fact, decent enough potatoes for you to eat.

00:40:58.480 --> 00:41:05.740
And it becomes a web of different certification agencies and certain bureaucracy and all this other stuff.

00:41:05.740 --> 00:41:08.300
You really just want to know, can the guy send me potatoes?

00:41:08.300 --> 00:41:09.380
It shouldn't be that hard.

00:41:09.380 --> 00:41:17.700
With blockchain, it's similar to the identity verification that we just covered, where you do have entities that verify these things.

00:41:17.700 --> 00:41:20.900
But that information is essentially looked up upon.

00:41:20.900 --> 00:41:22.960
Like ISO is a perfect example.

00:41:22.960 --> 00:41:27.620
We already have the people who go through and inspect for ISO standards.

00:41:27.620 --> 00:41:46.760
They should be able to publish that to a network that can easily be integrated automatically with other applications so that you can put an RFP out and you can instantly filter across the entire global world of all ISO individuals who can supply you a part that complies.

00:41:46.760 --> 00:41:49.080
You do then have to trust ISO.

00:41:49.080 --> 00:41:51.380
But most people already trust ISO.

00:41:51.380 --> 00:41:54.200
So it's generally what they mean.

00:41:54.200 --> 00:41:54.460
Yeah.

00:41:54.460 --> 00:41:55.680
So how does it work in reverse?

00:41:55.680 --> 00:42:03.160
Like, let's suppose I find, like, some lettuce in my grocery store and it's bad, but it's been tracked with a blockchain.

00:42:03.160 --> 00:42:06.140
Like, how do I go and, say, use that to unravel?

00:42:06.140 --> 00:42:09.220
Well, these are all the things that have to be recalled and nothing else.

00:42:09.220 --> 00:42:09.700
Yeah.

00:42:09.700 --> 00:42:13.180
So I guess, like, the RFP example, right?

00:42:13.280 --> 00:42:24.160
So we had this transaction occur where the lettuce supplier or potato supplier or whoever has responded to the RFP to send these heads of lettuce to this grocery store.

00:42:24.160 --> 00:42:27.120
And that is a transaction upon this ledger.

00:42:27.120 --> 00:42:29.200
Now, the ledger can never be changed.

00:42:29.200 --> 00:42:30.880
That's a very important aspect.

00:42:30.880 --> 00:42:32.720
It's a linear ledger in time.

00:42:32.820 --> 00:42:36.000
So no one can go back and erase that that didn't happen.

00:42:36.000 --> 00:42:41.000
So they're always on the hook for sending that grocery store that lettuce.

00:42:41.540 --> 00:42:42.320
And they know that.

00:42:42.320 --> 00:42:45.340
Now, you can get as low as, say, on the rubber bands.

00:42:45.340 --> 00:42:49.960
They each have a little RFID tracker that bundles all the lettuce.

00:42:50.200 --> 00:43:05.160
So then at every point from delivering that from California to New York, you have the people unloading it at different supply chain stops, scanning it, and then doing a transaction on the blockchain again to say, yeah, this lettuce came here.

00:43:05.160 --> 00:43:14.180
And that lettuce references the original transaction that says, yeah, this lettuce is in response to this RFP from this supplier to this grocery store.

00:43:14.760 --> 00:43:23.400
And so by the time it gets to the grocery store, there's been a transaction law that cannot be changed by anybody in the system.

00:43:23.400 --> 00:43:23.760
Okay.

00:43:23.760 --> 00:43:25.280
Yeah, I see how that works.

00:43:25.280 --> 00:43:26.120
That's pretty interesting.

00:43:26.120 --> 00:43:30.720
I think it's really valuable in the sense of sort of accountability.

00:43:30.720 --> 00:43:35.020
I guess maybe tying it back to our previous conversation just a tiny bit.

00:43:35.020 --> 00:43:47.780
One of the things that seems really interesting to me around the cryptocurrency stuff because of the blockchain is in some ways it gets you outside of the country's controlling currency.

00:43:47.780 --> 00:43:51.180
And in some ways it gets you outside of banks and credit card companies.

00:43:51.180 --> 00:43:57.680
And it gives you this like privacy of it's like just me and my coins and I can exchange them just like with numbers.

00:43:57.680 --> 00:43:59.140
And in some sense that's great.

00:43:59.140 --> 00:44:04.500
But then every record of every transaction I've ever made is fully public.

00:44:04.500 --> 00:44:05.000
Right.

00:44:05.000 --> 00:44:08.020
And so in some other sense, it's kind of almost like a loss of privacy.

00:44:08.020 --> 00:44:14.080
Like if you ever learn what my wallet ID is, you've learned what every purchase I've ever made is.

00:44:14.080 --> 00:44:15.220
What are your thoughts on that?

00:44:15.220 --> 00:44:15.760
Yeah.

00:44:15.760 --> 00:44:18.600
I mean, that's why I kind of poked in this.

00:44:18.600 --> 00:44:20.260
Oh, the NSA is described.

00:44:20.260 --> 00:44:23.320
We would love this.

00:44:23.320 --> 00:44:24.820
Yeah, exactly.

00:44:24.820 --> 00:44:27.000
They did subscribe to e-currency since 96.

00:44:27.000 --> 00:44:40.500
So there's a lot of speculation that like why would a security agency that has been essentially called out and it's well documented has been spying on citizens in a dark network of intelligence services.

00:44:40.500 --> 00:44:42.460
Why wouldn't they love Bitcoin?

00:44:42.460 --> 00:44:49.500
And why wouldn't they be pursuing a technology that makes all the transactions completely available in public?

00:44:49.500 --> 00:44:52.060
Because you can easily spot criminals that way.

00:44:52.060 --> 00:44:53.900
And you can easily track.

00:44:53.900 --> 00:44:55.660
And here's the fun part.

00:44:55.660 --> 00:45:06.580
If you've ever gone through an exchange like Coinbase or something, Coinbase is legally obliged to tell the NSA or the FBI or whatever what your wallet is.

00:45:06.580 --> 00:45:07.700
So it's already done.

00:45:07.700 --> 00:45:08.180
Right.

00:45:08.320 --> 00:45:13.300
So you're like you're saying your privacy is already scooped up and taken apart.

00:45:13.300 --> 00:45:24.480
Like there's no way for me to buy a Bitcoin unless you mine it, which is extremely hard to do without going through some sort of fiat gateway, as they're called, which leaves a paper trail to your address.

00:45:24.480 --> 00:45:31.200
And if there's a subpoena and there's a reason for you to have your wallet address disclosed, it will happen.

00:45:31.700 --> 00:45:36.120
So, yeah, my thoughts on that are that it's flawed to think that Bitcoin is anonymous anymore.

00:45:36.120 --> 00:45:39.740
It's anonymous until it's like extremely not anonymous.

00:45:39.740 --> 00:45:45.500
Like as soon as it like the veil is cracked, it's like fully, fully open, which is pretty, pretty wild.

00:45:45.640 --> 00:45:45.760
Okay.

00:45:45.760 --> 00:45:48.240
So back to, back to blockchains more broadly.

00:45:48.240 --> 00:45:53.360
So I did a little poking around and found some pretty interesting startups based on this.

00:45:53.360 --> 00:45:56.320
Let me just give people a little bit of a sense of some of these.

00:45:56.320 --> 00:45:58.060
So they get a sense.

00:45:58.060 --> 00:46:07.440
So there's Elastos, which is trying to create a new secure operating system to make digital assets scarce, identifiable and tradable.

00:46:07.440 --> 00:46:13.540
Like they have these things called D apps that run on a peer to peer network, which is kind of funky.

00:46:14.060 --> 00:46:17.940
Ubicoin, Ubicoin, yeah, Qoin, coin.

00:46:17.940 --> 00:46:18.380
I don't know.

00:46:18.380 --> 00:46:20.980
Decentralized global currency for everyone.

00:46:20.980 --> 00:46:27.020
That's, that's pretty wild to make it a two coin ecosystem to make it immune to volatility.

00:46:27.020 --> 00:46:29.840
There's audit chain for like decentralized auditing.

00:46:29.840 --> 00:46:36.720
There's a XSUL coin for solving refugee crisis issues.

00:46:36.720 --> 00:46:37.640
Pure gold.

00:46:37.640 --> 00:46:41.200
I was trying to make a cryptocurrency backed by gold.

00:46:41.760 --> 00:46:44.860
Pharma trust for counterfeit drugs.

00:46:44.860 --> 00:46:46.420
Just all these types of things.

00:46:46.420 --> 00:46:55.980
It seems like there's a lot of interesting stuff, but it's ultimately the theme is kind of around distributed trust or trusting things you only sort of should have limited trust of.

00:46:55.980 --> 00:46:58.220
What are some other examples that, you know?

00:46:58.220 --> 00:46:58.880
Exactly.

00:46:58.880 --> 00:47:12.380
I mean, supply chain is a perfect example or like a clearing of contracts, whether those be financial contracts, which generally are cleared through completely centralized standpoints, which like synthetics and things like that.

00:47:12.380 --> 00:47:16.720
The things that the regular people like us would not be able to get our hands on.

00:47:16.720 --> 00:47:18.640
It's a really massive issue.

00:47:18.640 --> 00:47:21.720
Same with like ACH settlements and things like that.

00:47:21.720 --> 00:47:23.820
Banks don't necessarily trust each other.

00:47:23.820 --> 00:47:24.240
Yeah.

00:47:24.660 --> 00:47:36.960
Well, and there have been like a few extremely high profile ACH transfer failures of the SWIFT network over the last couple of years, like hundreds of millions of dollars type of failure, right?

00:47:36.960 --> 00:47:37.440
Yeah.

00:47:37.440 --> 00:47:54.020
And it's actually pretty easy to commit ACH fraud because ACH is from like the 70s and you go through a process where you can obviously send ACH wires to people, but some companies have the ability to take money from you with an ACH.

00:47:54.020 --> 00:48:02.180
And you basically go through this process and you get approved and then you have a license to essentially take money from anyone in the world with an ACH account.

00:48:02.320 --> 00:48:06.740
That obviously leads to a lot of bank fraud and that's a problem.

00:48:06.740 --> 00:48:07.080
Yeah.

00:48:07.080 --> 00:48:08.140
That's, yeah.

00:48:08.140 --> 00:48:09.180
Just put it politely.

00:48:09.180 --> 00:48:09.900
That's a problem.

00:48:09.900 --> 00:48:11.500
But that's the world we live in.

00:48:11.500 --> 00:48:13.560
It's like pretty archaic around the banking stuff.

00:48:13.560 --> 00:48:15.480
Hopefully that gets fixed.

00:48:15.480 --> 00:48:26.460
And I think that's why things like cryptocurrency and stuff like are appealing because in general, the banking system is like super curmudgeon-y, rarely in the modern world, right?

00:48:26.460 --> 00:48:27.000
Oh yeah.

00:48:27.000 --> 00:48:27.760
Ironically.

00:48:28.060 --> 00:48:29.940
They have the money to get around it, right?

00:48:29.940 --> 00:48:31.040
They just don't.

00:48:31.040 --> 00:48:42.380
Now that we've talked about the blockchain, we've talked about cryptocurrency, let's talk about what you're doing at Lambden because you guys are building some amazing tools for building upon the blockchain, right?

00:48:42.380 --> 00:48:48.140
And apps that, like some of these startups I talked about, using Python or Python-like tools, right?

00:48:48.140 --> 00:48:48.540
Yeah.

00:48:48.540 --> 00:48:48.960
All right.

00:48:48.960 --> 00:48:49.580
So what is Lambden?

00:48:49.580 --> 00:48:50.600
Tell us about what that is.

00:48:50.600 --> 00:48:51.380
Let's start there.

00:48:51.520 --> 00:48:53.140
So Lambden is a suite of tools.

00:48:53.140 --> 00:48:57.960
It allows you to create as much or as little of a decentralized application that you want.

00:48:57.960 --> 00:49:00.100
So that can be your own.

00:49:00.100 --> 00:49:01.700
And I'll preface this.

00:49:01.700 --> 00:49:07.220
We expect people to be picking up this and be completely technology agnostic.

00:49:07.220 --> 00:49:08.280
They don't want to use Bitcoin.

00:49:08.540 --> 00:49:09.540
They don't want to use Ethereum.

00:49:09.540 --> 00:49:15.020
They don't want to use really anything that's a main network because they're limited.

00:49:15.020 --> 00:49:24.060
Their needs of like Ethereum's needs and features and support is tuned towards Ethereum's users, not necessarily your users.

00:49:24.480 --> 00:49:24.920
Right.

00:49:24.920 --> 00:49:29.580
So let's say, suppose I'm like, let's say I'm Chevy, okay?

00:49:29.580 --> 00:49:34.540
And I want to make a blockchain just for internally for controlling and tracking my stuff.

00:49:34.540 --> 00:49:44.020
Like we could so go to Lambden and use your APIs and your infrastructure and we wouldn't have to like deal with any of the public blockchain stuff, right?

00:49:44.020 --> 00:49:44.620
Okay.

00:49:44.620 --> 00:49:45.040
Yeah.

00:49:45.040 --> 00:49:51.200
And so like what are called main networks really focus on a main network, a single distribution.

00:49:51.420 --> 00:50:01.880
So Ethereum has abilities for you to create private networks, but there aren't really the resources to support that because they don't necessarily care or that's not their main priority.

00:50:01.880 --> 00:50:05.420
Their main priority is a world computer that's trustless.

00:50:05.420 --> 00:50:09.200
So the motivations don't align.

00:50:09.200 --> 00:50:19.020
With Lambden, we provide the tools for you to build first and then later kind of solidify that.

00:50:19.500 --> 00:50:32.080
And so what I mean is that we have an automation tool that allows you to build, it can be a Lambden-based blockchain or maybe you want a private Ethereum-based blockchain and then start installing things on that like you do with packages.

00:50:32.080 --> 00:50:40.120
So like in a Chevy example, let's say that they do want to use Lambden's blockchain, which is developed from the ground up in completely Python.

00:50:40.120 --> 00:50:52.020
They would use something like our tools to create a Docker container and then be able to install smart contracts on them like they do just regular pip install packages.

00:50:52.020 --> 00:50:55.040
And that doesn't really exist in blockchain right now.

00:50:55.040 --> 00:51:04.360
There are smart contracts, but they are kind of sprinkled across the internet on GitHub and really left you to copy and paste them in most cases.

00:51:04.360 --> 00:51:05.280
And it's very obtuse.

00:51:05.280 --> 00:51:07.480
So we're cleaning that up.

00:51:07.480 --> 00:51:12.080
And in terms of like our tech, it's performing.

00:51:12.080 --> 00:51:14.520
There's a lot of things wrong with Ethereum and Bitcoin.

00:51:14.520 --> 00:51:16.480
The transactions are slow.

00:51:16.760 --> 00:51:20.340
I've never bought anything with Bitcoin or anything like that.

00:51:20.340 --> 00:51:23.180
For a little while, there was a possibility.

00:51:23.180 --> 00:51:26.180
I use Stripe for my course site and stuff like that.

00:51:26.180 --> 00:51:33.640
There was a momentary time where I could have accepted payment for courses in Bitcoin via Stripe.

00:51:33.640 --> 00:51:37.540
But they actually canceled that because it was too volatile, the price.

00:51:37.640 --> 00:51:44.300
And they couldn't deal with getting the money back around before it was a different price, basically.

00:51:44.300 --> 00:51:47.380
So when people say, I've heard that it's slow.

00:51:47.380 --> 00:51:50.520
Does slow mean one second, five seconds, a minute, 10 minutes?

00:51:50.520 --> 00:51:51.120
What does it mean?

00:51:51.120 --> 00:51:52.400
45 minutes, about.

00:51:52.400 --> 00:51:52.860
Okay.

00:51:52.860 --> 00:51:53.540
That's pretty slow.

00:51:53.540 --> 00:51:54.280
It's pretty slow.

00:51:54.280 --> 00:51:54.660
Yeah.

00:51:54.660 --> 00:51:55.680
PayPal's fast.

00:51:55.680 --> 00:51:56.220
That's slower.

00:51:56.220 --> 00:51:56.880
Yeah.

00:51:56.880 --> 00:51:57.120
Yeah.

00:51:57.120 --> 00:51:58.140
PayPal is way faster.

00:51:58.140 --> 00:51:59.440
And credit cards are way faster.

00:51:59.440 --> 00:51:59.880
Okay.

00:51:59.880 --> 00:52:02.180
So you're trying to solve this slow problem.

00:52:02.180 --> 00:52:02.460
Yeah.

00:52:02.460 --> 00:52:03.460
Slow problem.

00:52:03.660 --> 00:52:08.600
It's that PayPal, if they charge you, they charge you a lot less than a Bitcoin transaction.

00:52:08.600 --> 00:52:13.960
Like, depending on things, it's usually about 30 bucks.

00:52:13.960 --> 00:52:18.100
And it's come to the point because Bitcoin prices are so high.

00:52:18.100 --> 00:52:21.160
I mean, two years ago, it wasn't a lot of money.

00:52:21.160 --> 00:52:25.940
But now the transaction costs, which is in Bitcoin, is about 30 bucks.

00:52:25.940 --> 00:52:27.840
So it's ridiculous.

00:52:27.840 --> 00:52:37.060
But for us, yeah, our mechanism is that instead of having mining on this enclosed end with all these miners,

00:52:37.060 --> 00:52:42.240
is that each transaction, you do that mining proof and the difficulty is much, much, much lower.

00:52:42.240 --> 00:52:47.680
And what that allows us to do is get rid of mining altogether, which is the block of all this.

00:52:48.080 --> 00:52:55.540
If difficulties were lower and we weren't necessarily worried about introducing currency at a distributed rate,

00:52:55.540 --> 00:52:57.600
we can speed it up as fast as we want.

00:52:57.600 --> 00:53:03.180
Because dumping the garbage into the garbage dumpster doesn't take that long.

00:53:03.180 --> 00:53:03.840
It's very fast.

00:53:03.840 --> 00:53:05.600
But what takes long is the mining.

00:53:05.600 --> 00:53:10.960
So if you have to mine your individual transaction, which is slow from a user-to-user standpoint,

00:53:10.960 --> 00:53:14.580
you know, like a second or two, it actually makes more sense.

00:53:14.580 --> 00:53:20.380
So myself as an individual can only send about one transaction per second on my MacBook

00:53:20.380 --> 00:53:22.460
because I have to generate that proof.

00:53:22.460 --> 00:53:27.260
What that means is that I can't send a million transactions per second and clog up the network,

00:53:27.260 --> 00:53:31.360
which is one of the reasons why mining exists, too, is an anti-spam mechanism.

00:53:31.360 --> 00:53:35.000
So we're one of the few blockchains that looks at it this way,

00:53:35.000 --> 00:53:41.300
and that allows us to have free transactions because we know that our system is performant enough

00:53:41.300 --> 00:53:44.120
to be able to process large amounts of transactions.

00:53:44.120 --> 00:53:49.120
What you really have to worry about is spamming mechanisms, like anti-spam mechanisms.

00:53:49.120 --> 00:53:52.680
And you can't really do just DDoS protection on a decentralized network.

00:53:52.680 --> 00:53:53.500
Yeah, of course.

00:53:53.500 --> 00:53:54.580
Interesting.

00:53:54.580 --> 00:54:01.320
And so one of the ways that you program these is with this thing you've created called Seneca, right?

00:54:01.320 --> 00:54:02.220
Tell us about that.

00:54:02.220 --> 00:54:08.500
So Seneca is essentially restricted AST, our abstract syntax tree of Python.

00:54:08.500 --> 00:54:15.140
So it's Python, but when we run it as Seneca, it's extremely restricted in what you can do.

00:54:15.140 --> 00:54:20.120
And the reason is that you need to lock down smart contracts so that there aren't gaping security holes.

00:54:20.120 --> 00:54:25.760
One of the classic examples is let's say you create a smart contract with a wallet true loop in it

00:54:25.760 --> 00:54:27.600
that just doesn't do anything.

00:54:27.600 --> 00:54:31.320
You submit that, and then you push a transaction out to it.

00:54:31.320 --> 00:54:38.860
Now all of the miners which are trying to figure out what the end result or output of the smart contract are,

00:54:38.860 --> 00:54:39.680
are all locked.

00:54:39.680 --> 00:54:44.960
And so that's a really, really big, glaring security hole because now nothing can go through

00:54:44.960 --> 00:54:48.340
until they figure out how this contract ends and it never ends.

00:54:48.880 --> 00:54:55.440
So we restrict things like that so that it makes sense from a programmatic standpoint

00:54:55.440 --> 00:55:00.860
because it's Python and it's simple to use, but also so that it doesn't have these security holes.

00:55:00.860 --> 00:55:05.220
When you guys described it on the GitHub page, you said it's not true.

00:55:05.220 --> 00:55:06.080
It's true.

00:55:06.080 --> 00:55:06.100
It's true.

00:55:06.100 --> 00:55:06.700
It's true.

00:55:06.700 --> 00:55:06.880
It's true.

00:55:06.880 --> 00:55:08.120
Right.

00:55:08.120 --> 00:55:12.140
And that's because you're trying, it's still restricted that you can't do things like,

00:55:12.140 --> 00:55:13.300
well, let's just go around forever.

00:55:13.300 --> 00:55:17.260
Or, you know, if you limit it enough, it's basically safe to use.

00:55:17.260 --> 00:55:17.740
Exactly.

00:55:18.460 --> 00:55:24.920
And that's because transactions are, they exist in a domain that can be turned incomplete.

00:55:24.920 --> 00:55:25.880
They're not games.

00:55:25.880 --> 00:55:32.940
They're not simulations or really anything that could have these extremely complex long-running processes.

00:55:32.940 --> 00:55:35.960
And so they're light source of transactions.

00:55:35.960 --> 00:55:41.520
One of the reasons why we chose that is because Ethereum's system is turned incomplete.

00:55:41.520 --> 00:55:47.080
And that essentially creates a ton of errors.

00:55:47.080 --> 00:55:54.460
And there's been like million-dollar hacks where people can take advantage of the security holes in Solidity and just, you know,

00:55:54.460 --> 00:56:04.180
ping a small transaction that the developers didn't think was going to happen or that's a previously undiscovered hole in the compiler.

00:56:04.540 --> 00:56:06.540
And then blow up the contract.

00:56:06.540 --> 00:56:06.580
And then blow up the contract.

00:56:06.580 --> 00:56:06.580
And then blow up the contract.

00:56:06.580 --> 00:56:07.920
Freeze everyone's funds.

00:56:07.920 --> 00:56:09.940
In some cases, steal people's money.

00:56:09.940 --> 00:56:11.760
And we don't want that to happen.

00:56:11.760 --> 00:56:13.860
And that's one of the reasons why we lock it down.

00:56:13.860 --> 00:56:14.180
Yeah.

00:56:14.240 --> 00:56:17.720
Is there any special interpreter or runtime that runs it?

00:56:17.720 --> 00:56:23.660
Or is it just that you restrict what is valid code by limiting the operations and stuff on the AST?

00:56:23.660 --> 00:56:24.120
Yeah.

00:56:24.120 --> 00:56:24.440
Yeah.

00:56:24.440 --> 00:56:29.640
So that's also an interesting point is that we don't have a virtual machine like Ethereum does.

00:56:29.780 --> 00:56:36.080
We have this interpreted subset of Python, which is just a parser of the AST.

00:56:36.160 --> 00:56:44.960
And the way that we say, okay, this is valid and this will work is because every single computer on the network has the same rules to parse the AST.

00:56:44.960 --> 00:56:51.280
And the outputs of the contract are database reads and writes.

00:56:51.280 --> 00:56:56.080
They aren't necessarily strange bytecode like it is on Ethereum.

00:56:56.080 --> 00:57:03.200
It's instructions to update your database, which is the state of the blockchain at that particular point in time.

00:57:03.200 --> 00:57:14.680
So actually, by taking a high-level approach, which is what Python does as a language as well, weed out a lot of the security problems from an obscure standpoint.

00:57:14.680 --> 00:57:18.880
Because most of the Solidity errors are user-generated.

00:57:18.880 --> 00:57:22.460
They write this code and it looks like it's going to behave one way.

00:57:22.460 --> 00:57:28.940
But then when they compile it into a machine code that they can't humanly read, it does something else.

00:57:28.940 --> 00:57:29.220
Yeah.

00:57:29.220 --> 00:57:31.780
That sounds like such an incredibly tricky problem.

00:57:31.780 --> 00:57:36.300
It's almost like let's take this super complex thing and blacklist the stuff you can't do.

00:57:36.300 --> 00:57:39.480
And then there's always creative people that are like, well, but they didn't blacklist this one.

00:57:39.480 --> 00:57:40.160
We're going to do that.

00:57:40.160 --> 00:57:44.220
Where as you're almost whitelisting and saying these are the things you can do.

00:57:44.220 --> 00:57:45.880
So go with that.

00:57:45.880 --> 00:57:46.280
Yeah.

00:57:46.280 --> 00:57:46.820
All right.

00:57:46.820 --> 00:57:48.260
So we're just about out of time.

00:57:48.260 --> 00:57:50.240
But let's just do one really quick thing.

00:57:50.240 --> 00:57:52.520
Let's suppose in just a minute or two.

00:57:52.600 --> 00:57:58.800
Suppose I want to take Seneca and build my own private blockchain to verify stuff.

00:57:58.800 --> 00:58:01.100
Maybe run with the car, for example, and parse or something.

00:58:01.100 --> 00:58:03.360
Could you just step us through the major...

00:58:03.360 --> 00:58:05.100
What do we got to do along the way?

00:58:05.100 --> 00:58:05.440
Yeah.

00:58:05.440 --> 00:58:05.660
Yeah.

00:58:05.760 --> 00:58:08.460
So, I mean, you can pip install most of our tools.

00:58:08.460 --> 00:58:12.980
What you're going to want to do is get some sort of environment that has our blockchain on it.

00:58:13.380 --> 00:58:18.300
So, Lambda comes out of the box with a setup that works for smart contracts.

00:58:18.300 --> 00:58:22.160
I will copy it that this is still a project in development.

00:58:22.160 --> 00:58:25.760
So don't expect to be able to pull all this stuff and be able to go right away.

00:58:25.760 --> 00:58:30.960
But, you know, our main goal is by Q3 or Q4, all this is ready to go.

00:58:30.960 --> 00:58:43.980
So you pull this in, you have this Docker container or this container, which you can then write Seneca contracts with in a way that feels like a database, like SQLAlchemy, right?

00:58:43.980 --> 00:58:46.680
And that the blockchain is running in your container.

00:58:46.680 --> 00:58:55.140
But really what that means is that it's a database that can be open to decentralization and consensus.

00:58:55.620 --> 00:59:04.660
So you start to write these smart contracts, you start to deploy them, and they have certain locations on the blockchain, which they accept transactions, and then they update the state in the blockchain.

00:59:04.660 --> 00:59:06.960
So let's say you start writing these contracts.

00:59:06.960 --> 00:59:09.760
You have different ways to verify different parts are coming through.

00:59:09.760 --> 00:59:12.380
Everything's working good on your single node.

00:59:12.380 --> 00:59:19.660
What you then do is want to decentralize that and start having other people spin up these blockchains, obviously copies of your blockchain.

00:59:19.660 --> 00:59:22.760
But you start to have people install it on their computers.

00:59:23.220 --> 00:59:26.140
Everyone's computers start forming a cluster together.

00:59:26.140 --> 00:59:35.720
And then suddenly when you start to change something on one computer or send a transaction, all the other computers automatically say, okay, we just ran the smart contract.

00:59:35.720 --> 00:59:37.980
It's supposed to update this record, right?

00:59:37.980 --> 00:59:42.340
And as long as the majority says, yeah, then they run that SQL query.

00:59:42.340 --> 00:59:50.940
They spit it back to a special node, a special group of nodes that holds the cold storage of the blockchain and the system continues.

00:59:51.260 --> 01:00:04.100
So you would essentially, after the point that you are ready to go and you have the functionality that you want, you would just have enough people to support the network such that it's decentralized and you could really just run from there.

01:00:04.100 --> 01:00:04.680
Yeah.

01:00:04.680 --> 01:00:05.680
That sounds really cool.

01:00:05.680 --> 01:00:08.900
And the fact that it's in Python is pretty awesome.

01:00:08.900 --> 01:00:09.640
Python and Docker.

01:00:09.640 --> 01:00:10.880
Awesome.

01:00:10.880 --> 01:00:11.160
All right.

01:00:11.160 --> 01:00:14.960
Well, Stuart, I think we got to leave it there for all the blockchain stuff.

01:00:14.960 --> 01:00:17.180
But let me ask you the final two questions before we go.

01:00:17.180 --> 01:00:20.300
So if you're going to write some Python code, what editor do you use?

01:00:20.300 --> 01:00:20.860
Yeah.

01:00:20.860 --> 01:00:25.400
So I use Sublime from if I'm trying to be more serious.

01:00:25.400 --> 01:00:37.240
My personal choice is Sublime, but I will use PyCharm in a more enterprise setting that has all the testing and coverage and all that stuff automatically in.

01:00:37.240 --> 01:00:37.640
Right on.

01:00:37.640 --> 01:00:38.560
Sounds good.

01:00:38.560 --> 01:00:40.720
And how about notable PyPI package?

01:00:40.920 --> 01:00:41.160
Yeah.

01:00:41.160 --> 01:00:44.180
I did say Karis, which I really enjoy.

01:00:44.180 --> 01:00:46.040
Requests is good.

01:00:46.040 --> 01:00:49.200
But I don't, you know, I like stuff.

01:00:49.200 --> 01:00:50.080
Yeah.

01:00:50.080 --> 01:00:54.240
So something that maybe you like ran across and people are like, you're like, wow, this is awesome.

01:00:54.240 --> 01:00:57.620
This is maybe not the most popular one, but people really should check out something.

01:00:57.620 --> 01:01:00.140
I've been looking at a lot of quantum stuff.

01:01:00.320 --> 01:01:06.640
And of course, if it's scientific, it's going to be on Python before anything else.

01:01:06.640 --> 01:01:08.000
So this is interesting.

01:01:08.000 --> 01:01:10.860
I know nothing about quantum at all.

01:01:10.860 --> 01:01:12.680
But I found this.

01:01:12.680 --> 01:01:15.440
I want to get into it and kind of try to understand it.

01:01:15.440 --> 01:01:18.260
I'm nowhere near ready to really go for it.

01:01:18.260 --> 01:01:32.340
But it's this thing called Strawberry Fields by this company called Xanadu that is looking to create hardware that works with optical quantum processors rather than right now you need to super cool it in like liquid nitrogen.

01:01:32.340 --> 01:01:36.860
And so if they can do optical, then it can be in your computer or your phone.

01:01:37.420 --> 01:01:45.680
And so I'm looking at their library called Strawberry Fields to start to make sure I'm like, got my ear to the ground about what's happening.

01:01:45.680 --> 01:01:49.640
Because I think quantum is really going to do a lot of crazy stuff in the next 10 years.

01:01:49.640 --> 01:01:50.080
Yeah.

01:01:50.080 --> 01:01:51.520
It's going to be really interesting.

01:01:51.520 --> 01:01:55.600
And the whole like, if you had a quantum computer, you could do this mining like differently.

01:01:55.600 --> 01:01:58.360
That would be that would you have your own island.

01:01:58.360 --> 01:01:58.860
Oh, yeah.

01:01:58.860 --> 01:01:59.260
Yeah.

01:01:59.260 --> 01:02:01.600
It gets into also pyro.

01:02:01.600 --> 01:02:04.600
I don't like Uber as a company for their ethical concerns.

01:02:05.320 --> 01:02:12.200
But it pains me to say this, that they have a probabilistic library called Pyro, which is very cool.

01:02:12.200 --> 01:02:21.220
And there's one called Edward as well, which is another probabilistic computing library that is very, very neat.

01:02:21.220 --> 01:02:32.400
And I think that the crossroads between quantum is a probabilistic computation and machine learning that's going to Bayesian sort of stuff and probabilities is going to be massive.

01:02:32.640 --> 01:02:34.880
Or just soft computing in general.

01:02:34.880 --> 01:02:38.040
And how do you make a distinction between hard choices and things like that?

01:02:38.040 --> 01:02:45.360
So those are the types of libraries that in my free time, you know, I'm trying to like not chill.

01:02:45.360 --> 01:02:46.820
I'm trying to do something productive.

01:02:46.820 --> 01:02:48.060
I'll poke around it.

01:02:48.060 --> 01:02:48.360
Wow.

01:02:48.360 --> 01:02:51.980
That's yeah, those are really awesome and quite interesting and out there.

01:02:51.980 --> 01:02:52.340
All right.

01:02:52.340 --> 01:02:53.360
Final call to action.

01:02:53.360 --> 01:02:54.600
People want to get started with blockchain.

01:02:54.600 --> 01:02:55.480
What do they do?

01:02:55.480 --> 01:02:56.540
I want to get started in blockchain.

01:02:56.780 --> 01:03:00.760
I mean, go over to Lambda.io or read our blog, blog.landa.io.

01:03:00.760 --> 01:03:05.260
Start to situate yourself with things and then start to start to play with it.

01:03:05.260 --> 01:03:12.660
I actually would conjecture that Solidity is a good starting point, even though I have criticized aspects of it.

01:03:12.660 --> 01:03:17.820
Does not make it a bad starting point to get into smart contract development.

01:03:17.820 --> 01:03:20.400
And that's where you really should take your first steps into things.

01:03:20.400 --> 01:03:20.900
All right.

01:03:20.900 --> 01:03:21.380
Sounds good.

01:03:21.380 --> 01:03:22.780
Well, people are interested.

01:03:22.780 --> 01:03:23.380
Go check it out.

01:03:23.440 --> 01:03:26.120
We'll put some links in the show notes and thank you for being on the show.

01:03:26.120 --> 01:03:26.480
Absolutely.

01:03:26.480 --> 01:03:27.180
Thanks for having me.

01:03:27.180 --> 01:03:27.640
Bye.

01:03:27.640 --> 01:03:32.360
This has been another episode of Talk Python to Me.

01:03:32.360 --> 01:03:35.480
Today's guest has been Stuart Farmer.

01:03:35.480 --> 01:03:38.900
And this episode has been brought to you by Linode and Nerd Lettering.

01:03:38.900 --> 01:03:43.420
Linode is bulletproof hosting for whatever you're building with Python.

01:03:43.420 --> 01:03:47.760
Get four months free at talkpython.fm/Linode.

01:03:47.760 --> 01:03:49.540
That's L-I-N-O-D-E.

01:03:50.760 --> 01:03:56.600
Make your day more Pythonic with Nerd Lettering's Python-themed mugs, t-shirts, stickers, and more.

01:03:56.600 --> 01:04:01.780
Visit talkpython.fm/nerdlettering and get a 10% discount on your entire order.

01:04:01.780 --> 01:04:03.940
Want to level up your Python?

01:04:03.940 --> 01:04:10.980
If you're just getting started, try my Python Jumpstart by building 10 apps or our brand new 100 Days of Code in Python.

01:04:10.980 --> 01:04:14.780
And if you're interested in more than one course, be sure to check out the Everything Bundle.

01:04:14.780 --> 01:04:17.020
It's like a subscription that never expires.

01:04:17.520 --> 01:04:19.220
Be sure to subscribe to the show.

01:04:19.220 --> 01:04:21.420
Open your favorite podcatcher and search for Python.

01:04:21.420 --> 01:04:22.660
We should be right at the top.

01:04:22.660 --> 01:04:31.980
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct RSS feed at /rss on talkpython.fm.

01:04:31.980 --> 01:04:33.840
This is your host, Michael Kennedy.

01:04:33.840 --> 01:04:35.220
Thanks so much for listening.

01:04:35.220 --> 01:04:36.280
I really appreciate it.

01:04:36.280 --> 01:04:38.220
Now get out there and write some Python code.

01:04:38.220 --> 01:04:58.920
I really appreciate it.

