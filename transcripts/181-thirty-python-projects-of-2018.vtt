WEBVTT

00:00:00.080 --> 00:00:08.180
Listeners often tell me one of the really valuable aspects of this podcast is the packages and libraries that they hear about and start using in their projects.

00:00:08.180 --> 00:00:14.240
On this episode, I've invited Brian Okken, my co-host over on Python Bytes, to take this idea to 11.

00:00:14.240 --> 00:00:20.700
We're going to cover the top 30 Python packages from the past year, a metric to be determined later in the show.

00:00:20.700 --> 00:00:26.420
This is Talk Python to Me, episode 181, recorded October 3rd, 2018.

00:00:26.420 --> 00:00:46.540
Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:46.540 --> 00:00:50.600
This is your host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy.

00:00:50.760 --> 00:00:56.780
Keep up with the show and listen to past episodes at talkpython.fm and follow the show on Twitter via at Talk Python.

00:00:56.780 --> 00:01:00.600
This episode is brought to you by Linode and CloudBold.

00:01:00.600 --> 00:01:04.100
Please check out what they're offering during their segments. Really helps support the show.

00:01:04.100 --> 00:01:06.460
Brian, welcome back to Talk Python.

00:01:06.460 --> 00:01:07.540
Oh, yeah, thanks.

00:01:07.540 --> 00:01:10.580
Yeah, you've been here a bunch of times on this show.

00:01:10.580 --> 00:01:14.160
And of course, we meet up quite often on Python Bytes, right?

00:01:14.160 --> 00:01:15.180
Yeah, every week.

00:01:15.180 --> 00:01:17.360
Every week. That's such a fun show.

00:01:17.360 --> 00:01:25.220
And so we get to talk, you know, this is like the sort of extended edition of Python Bytes in some sense for our topic today.

00:01:25.220 --> 00:01:29.720
Because on Python Bytes, we meet up, we talk about a couple of cool projects we found this week.

00:01:29.720 --> 00:01:34.240
This one is, hey, here's a whole bunch of cool projects found throughout the year.

00:01:34.240 --> 00:01:35.880
But this time we didn't pick it, did we?

00:01:35.880 --> 00:01:38.660
No, it came from, where did it come from?

00:01:38.660 --> 00:01:39.800
MyBridge AI.

00:01:39.800 --> 00:01:41.680
It wasn't even from a person then.

00:01:41.680 --> 00:01:47.160
No, so there's this app, this company, I guess, called MyBridge.

00:01:47.160 --> 00:01:55.180
And they kind of like Zite or Flipboard curate a list of articles and other interesting reading.

00:01:55.180 --> 00:02:01.080
But instead of just trying to do that for general population, they try to do that for professionals in various industries.

00:02:01.080 --> 00:02:07.820
So one of the things they came up with was 30 amazing Python projects, the 2018 edition.

00:02:08.420 --> 00:02:15.480
And we're just going to go through that list and just talk about these projects and sort of shine a light on some cool stuff that, well, this AI picked out for us.

00:02:15.480 --> 00:02:15.760
Yeah.

00:02:15.760 --> 00:02:30.520
And it's one of the interesting things is the, you can, I mean, like individuals can go in and do just the popularity of a, like the number of stars or the number of, maybe that number of downloads on PyPI or something.

00:02:30.520 --> 00:02:40.200
But this is also, they also used the engagement, I'm guessing, how many, how often things get added to possibly and recency.

00:02:40.200 --> 00:02:44.780
So if things haven't been edited for a long time, they're probably not going to be on the list.

00:02:44.780 --> 00:02:45.240
Right.

00:02:45.240 --> 00:02:49.560
Or stuff that maybe is new, but it has the same number of stars or something that's old, right?

00:02:49.560 --> 00:02:51.200
That would make it more valuable.

00:02:51.200 --> 00:02:51.680
Yeah.

00:02:51.780 --> 00:02:57.740
So before we get into our main topic, though, let's just do a little background on you since it's been a while since you've been on this show.

00:02:57.740 --> 00:03:00.920
Although I'm sure many people that listen to Talk Python also listen to Python Bytes.

00:03:00.920 --> 00:03:03.020
A couple of things that you're notable for.

00:03:03.020 --> 00:03:05.440
One is the pytest book, right?

00:03:05.440 --> 00:03:06.300
What's the title of your book?

00:03:06.300 --> 00:03:08.020
Python Testing with pytest.

00:03:08.020 --> 00:03:11.320
Not very creative, but is exactly what it is.

00:03:11.320 --> 00:03:12.440
Yeah, it's quite descriptive.

00:03:12.440 --> 00:03:17.200
It starts out with an introduction just to get people's feet wet with pytest.

00:03:17.720 --> 00:03:24.320
I've had a lot of people say that they didn't get lost with it, but a lot of the stuff there is stuff that they'll use down the road.

00:03:24.320 --> 00:03:27.940
Like we get into building plugins and things like that.

00:03:27.940 --> 00:03:28.260
Yeah, yeah.

00:03:28.260 --> 00:03:28.640
Very nice.

00:03:28.640 --> 00:03:29.840
And what do you do day to day?

00:03:29.840 --> 00:03:31.620
Do something testing related, right?

00:03:31.620 --> 00:03:33.840
Yeah, I make test equipment.

00:03:33.840 --> 00:03:38.800
So I work for Roden Schwartz and make electronic test equipment.

00:03:39.140 --> 00:03:48.100
And me specifically, I'm a manager for some C++ people that do embedded and a test team that does testing of the hardware.

00:03:48.100 --> 00:03:48.980
Nice.

00:03:48.980 --> 00:03:49.680
That's very cool.

00:03:49.680 --> 00:03:50.800
All right.

00:03:50.800 --> 00:03:52.340
So are you ready to get into our topics?

00:03:52.340 --> 00:03:53.360
Yeah, definitely.

00:03:53.360 --> 00:03:54.460
What's our first one?

00:03:54.460 --> 00:03:58.500
The first one is Home Assistant at homeassistant.io.

00:03:58.500 --> 00:04:05.340
And it is a open source automation, home automation that puts local control and privacy first.

00:04:05.340 --> 00:04:08.980
So I haven't actually played with this, but it looks super awesome.

00:04:08.980 --> 00:04:15.260
So there's a lot of different automated home automation things out there like Nest and others.

00:04:15.400 --> 00:04:20.900
And then some do-it-yourself stuff like with Raspberry Pi and Arduino projects.

00:04:20.900 --> 00:04:26.620
But this is sort of an overreaching one that interacts with all of these things.

00:04:26.620 --> 00:04:37.120
And you can control multiple devices with one interface, track multiple devices, and then have some cross-device automation and notifications.

00:04:37.660 --> 00:04:49.880
Like, for instance, you could monitor the soil moisture outside and then alert you, send you an email or something if it's too dry or something like that.

00:04:49.880 --> 00:04:53.540
Even better, how about have it automatically turn on your sprinklers?

00:04:53.540 --> 00:04:55.140
Because you have smart sprinklers, right?

00:04:55.140 --> 00:04:56.000
You're right.

00:04:56.000 --> 00:04:58.040
Only when it's needed because not when it rained.

00:04:58.040 --> 00:04:58.560
Yeah.

00:04:58.560 --> 00:05:08.160
One of the things I want to play with is the ability to, there's a location things where you can hook up through your, allow an app on your cell phone or something to know where you are.

00:05:08.160 --> 00:05:18.640
And you can say, hey, when I leave my work, go ahead and turn the air conditioning up or the heat up in the house so that the temperature's right when I get home, regardless of when I left work.

00:05:18.640 --> 00:05:19.700
So that'd be fun.

00:05:19.700 --> 00:05:20.000
Yeah.

00:05:20.000 --> 00:05:21.420
There's all sorts of cool stuff.

00:05:21.420 --> 00:05:25.120
Another thing I want to give a shout out to here is Haas.

00:05:25.260 --> 00:05:29.460
I guess the way you'd say it shortening would be Haas.io, H-A-S-S.io.

00:05:29.460 --> 00:05:30.920
Or maybe Haas, like the avocado.

00:05:30.920 --> 00:05:31.760
Yeah, I guess so.

00:05:31.760 --> 00:05:32.620
Okay.

00:05:32.620 --> 00:05:40.700
So this is a little thing that you can run on a Raspberry Pi that is like an embedded home assistant.

00:05:40.700 --> 00:05:46.680
So you can just have a Raspberry Pi in your house and you have a private server that controls all of your devices.

00:05:46.680 --> 00:05:52.520
And it's an iPhone app you can install that then talks to this private server and all sorts of cool stuff.

00:05:52.520 --> 00:05:53.080
That's cool.

00:05:53.200 --> 00:05:58.560
So you're not dependent on a cloud service or something for these sorts of things.

00:05:58.560 --> 00:05:58.860
Right.

00:05:58.860 --> 00:05:59.260
Exactly.

00:05:59.260 --> 00:05:59.680
Yeah.

00:05:59.680 --> 00:06:00.240
Isn't that cool?

00:06:00.240 --> 00:06:00.720
Nice.

00:06:00.720 --> 00:06:01.360
Yeah.

00:06:01.360 --> 00:06:01.660
Yeah.

00:06:01.660 --> 00:06:08.760
So Home Assistant, if you're doing anything with a smart home and you care at all about Python, there's tons of integration and it's all in Python, which is amazing.

00:06:08.760 --> 00:06:09.420
Well, what's next?

00:06:09.420 --> 00:06:15.320
Next up, we have PyTorch, which is a deep learning library, which is pretty awesome, right?

00:06:15.320 --> 00:06:15.840
Yeah.

00:06:15.840 --> 00:06:18.220
Is that from Microsoft or who's that from?

00:06:18.220 --> 00:06:19.480
I think it's its own project.

00:06:19.620 --> 00:06:19.860
Okay.

00:06:19.860 --> 00:06:23.780
It's even coming out with a new version here pretty soon or maybe already.

00:06:23.780 --> 00:06:24.140
Yeah.

00:06:24.140 --> 00:06:33.560
So what's really cool about PyTorch, it's basically lets you do a lot of GPU accelerated, like tensor deep learning type of stuff, deep neural networks and so on.

00:06:34.020 --> 00:06:45.420
But the new thing that's cool is in PyTorch 1.0 coming along, you can accelerate your Python machine learning code with native code.

00:06:45.680 --> 00:06:49.980
So they've actually created their own little mini language called TorchScript.

00:06:49.980 --> 00:06:56.880
And TorchScript is a subset of Python that can be compiled into either C++ or other high speed languages.

00:06:56.880 --> 00:06:57.480
Nice.

00:06:57.480 --> 00:06:58.760
This is very cool.

00:06:58.760 --> 00:06:59.600
Yeah, it's pretty cool.

00:06:59.700 --> 00:07:06.180
So it's already had like support for Cython to extend it, but now it even has support for its own special language coming soon.

00:07:06.180 --> 00:07:07.640
So I think that's an RC1.

00:07:07.640 --> 00:07:11.760
So if you're doing any machine learning, PyTorch, you probably already know about it, but quite cool.

00:07:11.760 --> 00:07:16.620
And this little TorchScript subset thing is quite interesting as well.

00:07:16.620 --> 00:07:17.040
Yeah.

00:07:17.120 --> 00:07:21.840
Normally, I'm pretty happy about these new libraries, but sometimes, you know, not too much, right?

00:07:21.840 --> 00:07:23.140
Yeah, I kind of get a little grumpy.

00:07:23.140 --> 00:07:25.460
You can definitely get grumpy.

00:07:25.460 --> 00:07:28.280
Well, grumpy is next on our list.

00:07:28.280 --> 00:07:32.080
And grumpy is a Python to Go or Trans compiler.

00:07:32.080 --> 00:07:33.680
Maybe it's the same thing.

00:07:33.680 --> 00:07:33.940
Yeah.

00:07:33.940 --> 00:07:34.880
And runtime.

00:07:34.880 --> 00:07:39.560
So you can write Python code and have it run on a Go runtime.

00:07:39.560 --> 00:07:40.820
Sure, why not?

00:07:40.820 --> 00:07:41.520
That's pretty interesting.

00:07:41.520 --> 00:07:42.240
Yeah, why not?

00:07:42.240 --> 00:07:46.720
I mean, one of the things you get is pretty good support for concurrency because Go is all about that, right?

00:07:46.720 --> 00:07:47.480
So that's kind of cool.

00:07:47.480 --> 00:07:54.440
One of the things that kind of makes me grumpy about grumpy is that it's a legacy Python, not modern Python.

00:07:54.440 --> 00:07:56.240
Oh, it's 2.7.

00:07:56.240 --> 00:08:02.160
Yeah, the reason is this is a super focused project from the YouTube team.

00:08:02.160 --> 00:08:07.560
And the YouTube team is running YouTube on Python 2.7.

00:08:07.560 --> 00:08:13.040
And they're trying to make it go faster because they have requirements that I suspect most people don't have.

00:08:13.140 --> 00:08:16.800
I mean, our podcast, Python Bytes, for example, gets a lot of traffic, right?

00:08:16.800 --> 00:08:17.420
Yeah.

00:08:17.420 --> 00:08:22.680
But, you know, if you look at YouTube, they get a million page views per second.

00:08:22.680 --> 00:08:23.260
Yeah.

00:08:23.260 --> 00:08:24.620
That's a lot of traffic.

00:08:24.620 --> 00:08:25.280
That's a lot.

00:08:25.280 --> 00:08:33.240
So actually, I had the grumpy guys on, well, the guy behind grumpy on Talk Python in episode 95.

00:08:33.240 --> 00:08:35.960
And a lot of these topics we've covered in one place or another.

00:08:35.960 --> 00:08:40.820
So I'll try to give a shout out to like more deep coverage on them if that's interesting to you.

00:08:40.820 --> 00:08:43.020
But yeah, grumpy is kind of interesting.

00:08:43.020 --> 00:08:44.960
I hope I would love to see this go somewhere.

00:08:44.960 --> 00:08:48.500
Actually, I would love to see alternate core implementations.

00:08:48.500 --> 00:08:53.300
Like I would love to see a Rust re-implementation of CPython, the runtime as well.

00:08:53.300 --> 00:08:54.420
So pretty cool.

00:08:54.420 --> 00:08:54.860
Yeah.

00:08:54.860 --> 00:08:57.860
So Go has asynchronous stuff and so does Python.

00:08:57.860 --> 00:09:02.020
And as of Python 3.5, we have async and await, right?

00:09:02.020 --> 00:09:08.560
And that kind of unlocks a certain type of really good concurrency, which is the kind that is based on IO.

00:09:08.560 --> 00:09:13.040
That's waiting on databases, waiting on microservices, waiting on the file system.

00:09:13.040 --> 00:09:15.820
You know what websites do a lot of?

00:09:17.620 --> 00:09:18.460
Wait on stuff.

00:09:18.460 --> 00:09:19.880
Wait on stuff, right?

00:09:19.880 --> 00:09:21.100
Wait on databases.

00:09:21.100 --> 00:09:22.560
Wait on web services, et cetera.

00:09:22.560 --> 00:09:32.660
And so Sanic is one of the big frameworks that came out pretty recently and is one of the really fast async and await based Python web frameworks.

00:09:32.660 --> 00:09:39.560
And like it seems like all the new web frameworks that are coming out, they're like, yeah, we're basically the Flask API with a different implementation.

00:09:39.560 --> 00:09:40.780
And this is no different.

00:09:40.780 --> 00:09:41.100
Yeah.

00:09:41.100 --> 00:09:46.700
One of the things that's kind of fun with Sanic is there's been a lot of like proof of concept things coming up.

00:09:46.860 --> 00:09:49.260
But this one does look like it's gaining traction.

00:09:49.260 --> 00:09:49.700
Yeah.

00:09:49.700 --> 00:09:50.500
It's pretty cool.

00:09:50.500 --> 00:09:55.780
And it's based on this thing called uv loop, which is an alternate implementation of asyncio in Python.

00:09:55.780 --> 00:09:58.120
That's about twice to four times as fast.

00:09:58.120 --> 00:10:00.240
So that's also pretty cool that it's based on that.

00:10:00.620 --> 00:10:08.480
And also Sanic just announced, we'll probably cover this over on Python Bytes at some point, but they just announced that they're a community driven organization.

00:10:08.480 --> 00:10:12.060
Used to be a project by a guy and now it's sort of its own thing.

00:10:12.060 --> 00:10:13.760
A little bit like Palette's is to Flask.

00:10:13.760 --> 00:10:15.400
There's that organization.

00:10:15.400 --> 00:10:15.800
Oh, nice.

00:10:15.800 --> 00:10:19.300
So if you're looking to contribute to projects, this is a good chance to do that.

00:10:19.300 --> 00:10:23.420
They even, I don't know how many projects do this, but I think this is a great idea.

00:10:23.420 --> 00:10:33.820
They say in there that you can go to GitHub and look through the various items and they'll put a help wanted tag on things they think would be a good thing for somebody to grab and contribute.

00:10:34.820 --> 00:10:35.660
That's cool.

00:10:35.660 --> 00:10:36.420
Yeah, it's pretty nice.

00:10:36.420 --> 00:10:36.820
Yeah.

00:10:36.820 --> 00:10:37.840
They're on fire, aren't they?

00:10:37.840 --> 00:10:38.640
Yeah.

00:10:38.640 --> 00:10:40.580
And they are on fire.

00:10:40.580 --> 00:10:42.540
And next up is Python Fire.

00:10:42.540 --> 00:10:48.120
So Python Fire is a, it's an interesting little project in, well, I don't know how little it is.

00:10:48.120 --> 00:10:51.660
I haven't looked at the source code, but it's a different take on command line.

00:10:51.660 --> 00:10:53.120
It's a little in scope though.

00:10:53.120 --> 00:10:54.260
Yeah, a little in scope.

00:10:54.260 --> 00:10:57.380
A different take on command line interface generation.

00:10:57.380 --> 00:11:04.740
I'm familiar with Click and there's quite a few others, but Python Fire does it kind of a little different.

00:11:04.740 --> 00:11:08.840
You put some boilerplate, not a whole bunch, but a little bit in one of your files.

00:11:08.840 --> 00:11:14.880
And then you can, all the functions within that module get exposed as command line arguments.

00:11:14.880 --> 00:11:18.260
And it's kind of magical how it works.

00:11:18.260 --> 00:11:19.260
And it's fun.

00:11:19.260 --> 00:11:24.180
It's a, if you're confused by generating command line interfaces, check this out.

00:11:24.180 --> 00:11:31.020
It also, they kind of push it for people that are like, you just quick and dirty just for yourself or your small team.

00:11:31.020 --> 00:11:32.380
These are, this might be a good thing.

00:11:32.380 --> 00:11:33.180
Yeah, it's pretty cool.

00:11:33.280 --> 00:11:40.460
Their little subtitle or whatever is automatically generating command line interfaces from absolutely any Python object.

00:11:40.460 --> 00:11:41.480
That's pretty cool.

00:11:41.480 --> 00:11:41.940
Yeah.

00:11:41.940 --> 00:11:44.340
And then their documentation is beefed up recently.

00:11:44.340 --> 00:11:49.020
So they, they've built a guide and there's a lot more easier ways to get into it now.

00:11:49.020 --> 00:11:49.860
So that's cool.

00:11:49.860 --> 00:11:50.820
Yeah, that's cool.

00:11:50.820 --> 00:11:51.580
And this is from Google.

00:11:51.580 --> 00:11:53.540
So, you know, you can pretty much trust.

00:11:53.540 --> 00:11:55.560
It's probably pretty good, pretty nicely put together.

00:11:55.560 --> 00:11:55.820
Yeah.

00:11:55.820 --> 00:12:00.780
So going back to machine learning, our next one is spaCy.

00:12:00.780 --> 00:12:09.080
When you think, when I think, at least when I think of machine learning and like text understanding, natural language understanding, I always thought of NLTP.

00:12:09.080 --> 00:12:11.000
That seemed like the way to go.

00:12:11.640 --> 00:12:15.160
But spaCy is the new fancy way to do that apparently.

00:12:15.160 --> 00:12:17.920
And it's written in Python and Cython.

00:12:17.920 --> 00:12:19.400
So it makes it super fast.

00:12:19.900 --> 00:12:21.760
Yeah, this looks, this looks very interesting.

00:12:21.760 --> 00:12:25.880
And natural language processing is actually, it's getting used quite a bit.

00:12:25.880 --> 00:12:26.260
Yeah.

00:12:26.260 --> 00:12:31.660
Anytime you want to take text and understand what the words mean, this is it, right?

00:12:31.660 --> 00:12:44.960
If you say wanted to, maybe you were an algorithmic trader and you were studying the live flow of data on Twitter and trying to look for sentiment analysis around a particular stock and then having automatic trading happen on that.

00:12:44.960 --> 00:12:46.820
You probably would put spaCy in there.

00:12:46.820 --> 00:12:47.080
Yeah, sure.

00:12:47.080 --> 00:12:48.420
Or do you want to?

00:12:48.420 --> 00:12:50.920
Just grabbing an example out of the scenario.

00:12:50.920 --> 00:12:57.120
Or maybe tracking the emotions of a certain chief of a country on Twitter.

00:12:57.120 --> 00:12:58.500
You can maybe use this.

00:12:58.500 --> 00:12:59.600
I'm not sure.

00:12:59.600 --> 00:13:00.960
I'm not sure we'll understand that.

00:13:01.300 --> 00:13:01.880
You can try.

00:13:01.880 --> 00:13:03.080
All right.

00:13:03.080 --> 00:13:08.080
So speaking of something I don't understand, and I want to understand it, help me understand PIP-ENV.

00:13:08.080 --> 00:13:09.180
PIP-ENV?

00:13:09.180 --> 00:13:10.820
PIP-ENV.

00:13:10.820 --> 00:13:17.040
There's so many ways to create virtual environments and work with them and dependencies and so on.

00:13:17.040 --> 00:13:22.240
And then there's this other way with PIP-ENV, which is really awesome, that applies some of the time.

00:13:22.240 --> 00:13:23.840
It's done partly by Kenneth Wright.

00:13:23.840 --> 00:13:24.760
So very cool.

00:13:24.760 --> 00:13:27.180
But I don't know where it fits in my world still.

00:13:27.180 --> 00:13:28.460
It's for applications.

00:13:28.980 --> 00:13:35.180
And it's really good for coordinating all of the dependencies for application developers.

00:13:35.760 --> 00:13:41.460
So if you've got a team of people working on an application, I think this is a good way to go.

00:13:41.460 --> 00:13:56.420
Some of the ways to get to is built in work to separate deployment environments versus development environments, because you might need you might need extra things around like pytest and document generation and stuff like that.

00:13:56.420 --> 00:14:03.960
If you're doing development that you don't need when you're just deploying, having those separated out is handled by PIP-ENV rather beautifully.

00:14:03.960 --> 00:14:05.160
Yeah, nice.

00:14:05.160 --> 00:14:07.260
So it creates and manages virtual environments.

00:14:07.260 --> 00:14:13.720
It replaces requirements.txt and friends with the pip file and the pip file.lock.

00:14:13.720 --> 00:14:16.900
And it sort of pins the versions and all of those kinds of things.

00:14:17.120 --> 00:14:18.240
So pretty interesting.

00:14:18.240 --> 00:14:22.380
I got to say, I'm still pip install -r some stuff these days.

00:14:22.380 --> 00:14:24.720
It also, it can generate your requirements file.

00:14:24.720 --> 00:14:26.060
So it can play nice.

00:14:26.060 --> 00:14:29.160
You can have a project play in both worlds at the same time.

00:14:29.160 --> 00:14:29.840
Yeah, that's cool.

00:14:29.840 --> 00:14:31.280
No, it's a good project.

00:14:31.280 --> 00:14:36.500
And I just, I need to, you know, shake myself out of my rut and learn this as well.

00:14:36.620 --> 00:14:38.900
And then I can decide better where it fits for me.

00:14:38.900 --> 00:14:48.120
So one thing I've always wanted to do is create like a product that I could sell out of little tiny, like IoT smart things.

00:14:48.120 --> 00:14:50.880
And I'm still trying to understand like what that might be.

00:14:50.880 --> 00:14:53.000
But if I were to do that, I know what project.

00:14:53.000 --> 00:14:54.040
Yeah, MicroPython.

00:14:54.040 --> 00:14:55.160
Right on, MicroPython.

00:14:55.160 --> 00:14:56.100
Tell us what that is.

00:14:56.100 --> 00:14:56.740
No, it's your turn.

00:14:56.740 --> 00:14:59.080
All right.

00:14:59.080 --> 00:15:08.000
So MicroPython is basically a Python implementation of the operating system that runs microcontrollers.

00:15:08.000 --> 00:15:15.940
So it's not like I have a Raspberry Pi, which is running some variation of Linux, and then I can install CPython on there.

00:15:15.940 --> 00:15:19.860
It's like Python itself is the operating system.

00:15:19.860 --> 00:15:21.380
And you can do insane things.

00:15:21.380 --> 00:15:24.080
Like you can hook up a Lambda expression to a hardware.

00:15:24.080 --> 00:15:24.840
Yeah, that's so cool.

00:15:24.840 --> 00:15:26.000
Like that low level.

00:15:26.000 --> 00:15:27.160
Isn't that amazing?

00:15:27.460 --> 00:15:31.480
So you could like put this on like a $5 little embedded chip.

00:15:31.480 --> 00:15:33.060
And it's got pretty good support.

00:15:33.060 --> 00:15:33.920
It's Python 3.

00:15:33.920 --> 00:15:39.400
And there's the Mu editor and other editors that can talk directly to it.

00:15:39.400 --> 00:15:42.380
So developing in this world sounds fun.

00:15:42.380 --> 00:15:43.800
It's been going for a few years.

00:15:43.800 --> 00:15:45.240
And it's still going strong.

00:15:45.240 --> 00:15:46.660
So I'm super excited for that.

00:15:46.660 --> 00:15:47.120
Yeah.

00:15:47.120 --> 00:15:48.900
A MicroPython evangelist.

00:15:48.900 --> 00:15:49.880
Or maybe a prophet.

00:15:49.880 --> 00:15:51.860
Ah, yes.

00:15:51.860 --> 00:15:54.440
It's as if a prophet for it.

00:15:54.440 --> 00:15:56.520
Indeed, prophet is the next one.

00:15:56.520 --> 00:15:56.840
What's that?

00:15:56.860 --> 00:15:57.960
I actually don't know.

00:15:57.960 --> 00:15:59.640
I should have taken the last one.

00:15:59.640 --> 00:16:08.280
It's a tool for producing high quality forecasts for time series data that has multiple seasonality with linear and nonlinear growth.

00:16:08.280 --> 00:16:10.020
I don't even know what that I just read.

00:16:11.020 --> 00:16:11.860
So, yeah.

00:16:11.860 --> 00:16:14.320
So the idea is this is a project from Facebook.

00:16:14.320 --> 00:16:21.700
So it's for predicting trends and time series data that might not be like stock prices.

00:16:21.700 --> 00:16:22.080
Yeah.

00:16:22.080 --> 00:16:27.460
Like stock prices or things that are not just completely linear, completely the same, right?

00:16:27.460 --> 00:16:30.360
Like the seasonality and the nonlinear growth and things like that.

00:16:30.420 --> 00:16:36.320
So it's just a really advanced library for predicting, given a time series of data, what's going to happen in the future.

00:16:36.320 --> 00:16:38.360
Oh, there's a lot of uses for that.

00:16:38.360 --> 00:16:39.120
That sounds neat.

00:16:39.120 --> 00:16:39.460
Yeah.

00:16:39.460 --> 00:16:40.040
Yeah.

00:16:40.040 --> 00:16:40.520
It's pretty cool.

00:16:40.520 --> 00:16:46.420
And from Facebook, I bet they do a little bit of predicting and analyzing and stuff like that with like your feed and whatnot.

00:16:46.580 --> 00:16:46.800
Yeah.

00:16:46.800 --> 00:16:50.340
And maybe for like predicting ad prices and things like that.

00:16:50.340 --> 00:16:50.900
Yeah, exactly.

00:16:50.900 --> 00:16:56.240
This portion of Talk Python To Me is brought to you by Linode.

00:16:56.240 --> 00:17:00.160
Are you looking for bulletproof hosting that's fast, simple, and incredibly affordable?

00:17:00.160 --> 00:17:05.080
Look past that bookstore and check out Linode at talkpython.fm/Linode.

00:17:05.080 --> 00:17:07.020
That's L-I-N-O-D-E.

00:17:07.020 --> 00:17:11.500
Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:17:11.500 --> 00:17:14.020
They have 10 data centers across the globe.

00:17:14.020 --> 00:17:16.520
So no matter where you are, there's a data center near you.

00:17:16.520 --> 00:17:21.760
Whether you want to run your Python web app, host a private Git server, or file server,

00:17:21.760 --> 00:17:29.240
you'll get native SSDs on all the machines, a newly upgraded 200 gigabit network, 24-7 friendly support,

00:17:29.240 --> 00:17:31.860
even on holidays, and a seven-day money-back guarantee.

00:17:31.860 --> 00:17:34.200
Do you need a little help with your infrastructure?

00:17:34.200 --> 00:17:40.440
They even offer professional services to help you get started with architecture, migrations, and more.

00:17:40.440 --> 00:17:43.540
Get a dedicated server for free for the next four months.

00:17:43.540 --> 00:17:46.380
Just visit talkpython.fm/Linode.

00:17:46.380 --> 00:17:50.660
The next one is something called Serpent AI.

00:17:50.660 --> 00:17:54.680
And we actually talked about this back on Python Bytes number 50, but this is really cool.

00:17:54.680 --> 00:17:55.440
It is cool.

00:17:55.440 --> 00:18:01.560
It's like AI with game development, or actually, you better take this one too.

00:18:01.560 --> 00:18:02.620
I'm not sure what this is.

00:18:02.880 --> 00:18:10.280
So the idea is if you have an AI and you want to train it, you could construct like a fake world for it, right?

00:18:10.280 --> 00:18:14.300
You could tell it, all right, you're in a box, you can move around, or like you're in a maze,

00:18:14.300 --> 00:18:16.040
and you'd have to build that maze, right?

00:18:16.040 --> 00:18:17.340
For your game.

00:18:17.340 --> 00:18:23.440
You'd basically have to build a miniature game and then try to teach a character in the game a thing if you want to develop AI.

00:18:23.440 --> 00:18:30.240
But we have all these real games that are super, super interesting, super nuanced, right?

00:18:30.240 --> 00:18:32.100
Like games you might play.

00:18:32.100 --> 00:18:32.500
Okay.

00:18:32.500 --> 00:18:35.040
Racing games, first-person shooter games, whatever.

00:18:35.040 --> 00:18:42.780
So Serpent AI attempts to let you control that game with Python, whatever that game is.

00:18:42.920 --> 00:18:48.020
They claim you can turn any video game into a sandbox environment for AI and bot programming.

00:18:48.020 --> 00:18:52.880
So imagine I'm trying to create a robot that can interact with the world.

00:18:52.880 --> 00:19:00.020
You could try to create your own world, or you could stick that thing in Grand Theft Auto or some other game and make it run around and go,

00:19:00.020 --> 00:19:02.180
okay, well, it's really good in this world.

00:19:02.180 --> 00:19:06.240
So it's a little bit, let's use sidestep creating the environment for testing AI.

00:19:06.240 --> 00:19:07.180
That's so cool.

00:19:07.180 --> 00:19:07.860
Yeah.

00:19:07.860 --> 00:19:08.180
Yeah.

00:19:08.180 --> 00:19:12.100
It says it even works with like games based on Steam or stuff like that.

00:19:12.140 --> 00:19:13.140
So it's pretty cool.

00:19:13.140 --> 00:19:16.420
The guy who creates it also does a Twitch programming channel.

00:19:16.420 --> 00:19:17.240
Okay.

00:19:17.240 --> 00:19:18.220
It's kind of interesting, right?

00:19:18.220 --> 00:19:18.520
Yeah.

00:19:18.520 --> 00:19:23.420
So like he'll like fire it up and say, all right, I'm going to go and take this game.

00:19:23.420 --> 00:19:25.220
I'm going to create an AI that's going to do this.

00:19:25.220 --> 00:19:26.840
And he'll just like start from scratch.

00:19:26.840 --> 00:19:32.080
So if, you know, if you got a Friday night and you don't got anything going on, you could watch that.

00:19:32.080 --> 00:19:32.580
Oh, yeah.

00:19:32.580 --> 00:19:33.300
That sounds great.

00:19:33.300 --> 00:19:36.760
Because I don't really want to do it myself, but I'd like to watch somebody else do it.

00:19:36.760 --> 00:19:37.180
Exactly.

00:19:37.180 --> 00:19:37.720
Yeah.

00:19:37.720 --> 00:19:38.080
All right.

00:19:38.080 --> 00:19:38.960
So that's a good one.

00:19:39.040 --> 00:19:42.640
If you're into like creating AIs and bots and stuff like that.

00:19:42.640 --> 00:19:43.040
Pretty awesome.

00:19:43.040 --> 00:19:43.460
Yeah.

00:19:43.460 --> 00:19:45.720
The next one is just beautiful, right?

00:19:45.720 --> 00:19:46.220
Yeah.

00:19:46.220 --> 00:19:46.900
It is nice.

00:19:46.900 --> 00:19:48.560
And this one I actually can understand.

00:19:48.560 --> 00:19:49.660
So it's good.

00:19:49.660 --> 00:19:50.720
Next one is Dash.

00:19:50.720 --> 00:19:51.340
Tell us about it.

00:19:51.400 --> 00:19:54.700
It's a framework for building analytical web applications.

00:19:54.700 --> 00:20:00.020
But so it's kind of like you need plots and, you know, Python code interactions.

00:20:00.020 --> 00:20:02.680
But you need some real-time stuff.

00:20:02.680 --> 00:20:08.320
So you like you want to zoom in and look at new data and have data go back and forth.

00:20:08.560 --> 00:20:13.540
And usually you do JavaScript or something like that and maybe React or something.

00:20:13.540 --> 00:20:18.960
And this is, it's built on top of Plotly and React and Flask.

00:20:19.280 --> 00:20:26.740
And it's just really, it's really a beautiful interface for data and for interacting with stuff on the web.

00:20:26.740 --> 00:20:28.520
So I actually tried to use this.

00:20:28.520 --> 00:20:31.260
And I think it would be fine for most applications.

00:20:31.260 --> 00:20:36.780
But you do need to have either use their server or you can set up your own server.

00:20:36.780 --> 00:20:40.620
But there needs to be a server to do a lot of the crunching.

00:20:40.620 --> 00:20:40.920
So.

00:20:40.920 --> 00:20:41.740
Right.

00:20:41.820 --> 00:20:45.200
So basically you need a server that runs Flask.

00:20:45.200 --> 00:20:46.000
Okay.

00:20:46.000 --> 00:20:49.100
Their thing that's derived on top of Flash.

00:20:49.100 --> 00:20:49.500
Yeah.

00:20:49.500 --> 00:20:50.100
Right.

00:20:50.100 --> 00:20:50.660
Yeah.

00:20:50.660 --> 00:20:50.800
Yeah.

00:20:50.800 --> 00:20:57.980
So if you go and open up the link, go to their main website, there's a part that says Dash is productive.

00:20:57.980 --> 00:21:05.200
And it shows the amount of code to create this cool graph that's totally interactable, zoomable, drop down to choose different data sources.

00:21:05.780 --> 00:21:15.360
And you basically have to say, I would like to graph these things and my data source is Google and my date range is this year.

00:21:15.360 --> 00:21:21.760
And somehow it can just go and get like stock data and other stuff like straight from Google.

00:21:21.760 --> 00:21:23.980
You don't even need to provide it the data.

00:21:23.980 --> 00:21:24.520
Wow.

00:21:24.520 --> 00:21:24.920
Yeah.

00:21:24.920 --> 00:21:25.360
That's neat.

00:21:25.360 --> 00:21:33.400
So there's a lot of, if you're trying to create visualizations on the internet and you're mostly happy writing in Python, this is a really pretty sweet thing.

00:21:33.400 --> 00:21:34.200
Yeah, it is.

00:21:34.200 --> 00:21:35.580
And it's really pretty.

00:21:35.700 --> 00:21:36.440
Yeah, it's definitely pretty.

00:21:36.440 --> 00:21:39.980
So, you know, another place where a lot of pretty stuff gets put is on Instagram.

00:21:39.980 --> 00:21:40.820
Yeah.

00:21:40.820 --> 00:21:45.420
This is actually an amusing little project called Instapy.

00:21:45.420 --> 00:21:48.880
It's for trying to make your own Instagram bots.

00:21:48.880 --> 00:21:58.620
And it's built just as if you were interacting with Instagram yourself through a webpage because it's built on Selenium and it's Python powered Selenium.

00:21:58.840 --> 00:22:12.920
It's kind of a little pet project that might be used for, you know, like automatically farming out likes and commenting on certain pictures that have something in it or something like that or comments and followers.

00:22:13.160 --> 00:22:15.620
There's a lot of stuff it's a good thing.

00:22:15.620 --> 00:22:17.400
I'm not sure it's one of those.

00:22:17.400 --> 00:22:18.940
Is this a good thing or a bad thing?

00:22:18.940 --> 00:22:19.620
Yes, I know.

00:22:19.620 --> 00:22:20.480
It was a little bit like that.

00:22:20.480 --> 00:22:21.240
It's definitely interesting.

00:22:21.240 --> 00:22:22.280
Yeah, it's definitely interesting.

00:22:22.620 --> 00:22:40.720
Like I can see if you were, say, a social media company, like you did social media as a consulting project for large companies, you could write some cool automation that maybe automatically analyzes all the ways people interacted with you, store them, generate reports, stuff like that.

00:22:40.920 --> 00:22:45.460
Yeah, so there's some good uses, but there's also, you know, bots in general.

00:22:45.460 --> 00:22:47.520
I feel the same way about Twitter bots.

00:22:47.520 --> 00:22:49.980
They kind of bug me, but what are you going to do?

00:22:49.980 --> 00:22:50.880
It's the internet.

00:22:50.880 --> 00:22:51.700
Yeah.

00:22:51.700 --> 00:22:52.360
Yep.

00:22:52.360 --> 00:22:54.880
Speaking of the internet, the internet's full of APIs.

00:22:54.880 --> 00:23:04.380
And the next project is API Star, which this is a project that fully embraces Python 3.

00:23:05.380 --> 00:23:15.680
So this is from Tom Christie, the guy who wrote Django REST Framework, but this is sort of his reimagining of what a REST Framework would look like in Python with Python 3.5 and above.

00:23:15.680 --> 00:23:24.100
And it's really cool because it does things like the arguments to your API methods use type annotations to get their values.

00:23:24.100 --> 00:23:32.760
So you can have like a variable or an argument colon and say this comes from the header and it's automatically extracted out of the header because of the type hint and things like that.

00:23:32.760 --> 00:23:33.300
It's pretty crazy.

00:23:33.300 --> 00:23:35.100
So yeah, this is a good one.

00:23:35.100 --> 00:23:35.340
Yep.

00:23:35.460 --> 00:23:35.820
Very good.

00:23:35.820 --> 00:23:39.060
And you said you talked with him about it on one of your episodes, right?

00:23:39.060 --> 00:23:41.420
I did back in episode 125.

00:23:41.420 --> 00:23:43.120
I had Tom on there to talk about that.

00:23:43.120 --> 00:23:45.520
So definitely a link to that as well.

00:23:45.520 --> 00:23:46.020
Okay.

00:23:46.020 --> 00:23:46.360
All right.

00:23:46.360 --> 00:23:50.040
This next one, I'm going to let you do this because this one sounds simple.

00:23:50.040 --> 00:23:50.940
Yeah, sure.

00:23:50.940 --> 00:23:52.100
It's very simple.

00:23:52.100 --> 00:23:54.260
I don't even know how to pronounce it.

00:23:54.260 --> 00:23:57.100
It's spelled F-A-I-S-S.

00:23:57.100 --> 00:23:58.400
Maybe F-A-I-S-S?

00:23:58.400 --> 00:23:59.020
F-A-I-S?

00:23:59.020 --> 00:23:59.340
Yeah.

00:23:59.340 --> 00:24:00.020
F-A-I-S?

00:24:00.020 --> 00:24:03.820
I'm going F-A-I-S because it has to do with similarity and stuff.

00:24:03.820 --> 00:24:04.400
Maybe F-A-I-S.

00:24:04.400 --> 00:24:05.060
I'm going F-A-I-S.

00:24:05.180 --> 00:24:06.620
Oh, okay.

00:24:06.620 --> 00:24:12.000
It's a library for efficient similarity search and clustering of dense vectors.

00:24:12.000 --> 00:24:12.980
Of course.

00:24:12.980 --> 00:24:14.280
I have to do that all the time.

00:24:14.280 --> 00:24:14.660
Of course.

00:24:14.660 --> 00:24:18.500
It's a data science-y thing for people that understand that.

00:24:18.500 --> 00:24:19.280
You probably understand.

00:24:19.280 --> 00:24:25.960
Contains algorithms that search in sets of vectors of any size, even ones that don't fit in your RAM.

00:24:26.100 --> 00:24:27.400
So that is big.

00:24:27.400 --> 00:24:29.940
It's written in C++, so it's going to be fast.

00:24:29.940 --> 00:24:31.620
And it's written by Facebook.

00:24:31.620 --> 00:24:34.060
Yeah, it's another one of the Facebook AI projects.

00:24:34.380 --> 00:24:36.380
And it also runs on GPUs.

00:24:36.380 --> 00:24:39.980
So it's another specialized AI system.

00:24:39.980 --> 00:24:45.280
I feel kind of a little, I feel a little bit like I'm not entirely keeping up with the whole world of AI.

00:24:45.280 --> 00:24:46.440
It's going so fast.

00:24:46.660 --> 00:24:47.780
No, but now I get the name.

00:24:47.780 --> 00:24:51.120
It's Facebook AI similarity search.

00:24:51.120 --> 00:24:51.800
Yeah, there you go.

00:24:51.800 --> 00:24:52.380
Right on.

00:24:52.380 --> 00:24:53.100
Okay.

00:24:53.100 --> 00:24:53.680
Yeah.

00:24:53.820 --> 00:24:57.540
And who knows, maybe even when it auto tags you.

00:24:57.540 --> 00:24:58.000
Who knows?

00:24:58.000 --> 00:24:58.740
Maybe it's using this.

00:24:58.740 --> 00:24:59.200
Maybe.

00:24:59.200 --> 00:24:59.580
All right.

00:24:59.580 --> 00:25:03.600
So another one that's interesting, sticking with the web for a little bit, is Mechanical Soup.

00:25:03.600 --> 00:25:04.100
Yeah.

00:25:04.100 --> 00:25:07.040
Actually, I hadn't heard of this before I ran across this list.

00:25:07.040 --> 00:25:07.900
So this is neat.

00:25:07.900 --> 00:25:08.560
I haven't either.

00:25:08.560 --> 00:25:09.300
Yeah.

00:25:09.300 --> 00:25:12.200
And that's why I like this little article project that we're covering.

00:25:12.200 --> 00:25:14.520
Because I would say a good five or six of these.

00:25:14.520 --> 00:25:16.140
I'm like, whoa, I'd never even heard of this.

00:25:16.140 --> 00:25:21.420
Mechanical Soup is an automation library for interacting with websites.

00:25:22.140 --> 00:25:24.340
So a little like Selenium, a little like Requests.

00:25:24.340 --> 00:25:27.300
It'll keep cookies and send them around.

00:25:27.300 --> 00:25:32.220
It'll follow redirects and interact with links and forms and all kinds of stuff, which is pretty awesome.

00:25:32.220 --> 00:25:32.740
Yeah.

00:25:32.740 --> 00:25:41.880
I want to give sort of notable mention as well to another one from Kenneth Wright's here called Requests HTML, which is somewhat similar.

00:25:41.880 --> 00:25:44.500
So this is Mechanical Soup, like Beautiful Soup.

00:25:44.500 --> 00:25:47.380
And Requests, you know, everyone knows what Requests is.

00:25:47.820 --> 00:25:53.580
Well, Kenneth Wright's created another project called Requests HTML, which kind of merges Beautiful Soup and Requests as well.

00:25:53.580 --> 00:25:55.540
So they're in the same space.

00:25:55.540 --> 00:25:55.980
Yeah.

00:25:55.980 --> 00:25:59.400
And, you know, if something goes wrong, you can get an exception.

00:25:59.400 --> 00:26:01.600
But at least you can make them better, right?

00:26:01.600 --> 00:26:02.200
Yes.

00:26:02.200 --> 00:26:03.260
With better exceptions.

00:26:03.260 --> 00:26:04.120
What's that?

00:26:04.220 --> 00:26:10.240
The better exceptions is just it's a you kind of have to modify your code a little bit to make use of these.

00:26:10.240 --> 00:26:18.940
But it intercepts the exception process so that you're the output, the tracebacks from your exceptions are easier to read and prettier.

00:26:18.940 --> 00:26:24.040
There's colors in there and it tells you what values are and it kind of points the value to the variable.

00:26:24.040 --> 00:26:26.700
And actually, it's kind of fun.

00:26:26.700 --> 00:26:28.380
It's a neat thing to check out.

00:26:28.460 --> 00:26:32.400
Yeah, it basically creates little like lines mapping parts of the code.

00:26:32.400 --> 00:26:46.200
And one of the things that's actually super cool, if you look at the GitHub screenshot there, when it shows you the error, do you see, Brian, how it actually shows you the values of the functions that the values that were passed to the function?

00:26:47.660 --> 00:26:49.440
That is so incredibly cool.

00:26:49.440 --> 00:26:51.920
So you'll say this function was called and it crashed.

00:26:51.920 --> 00:27:06.680
And not only does it just say, too bad it was on this line and color it in like indented, but like if it has a say, here's a function called deep and it takes A plus B and it'll have little visual lines going A is 2 and B is 15 in this crash.

00:27:06.680 --> 00:27:07.420
Like that is awesome.

00:27:07.420 --> 00:27:07.880
Yeah.

00:27:07.880 --> 00:27:12.060
And it's even though it'll even go back a little bit and interpret things beforehand.

00:27:12.060 --> 00:27:14.700
So I'm not sure how this is doing it, but it's pretty cool.

00:27:14.700 --> 00:27:15.560
It's definitely cool.

00:27:15.560 --> 00:27:16.680
It's definitely better, isn't it?

00:27:16.680 --> 00:27:17.100
Yeah.

00:27:17.100 --> 00:27:17.700
Yeah.

00:27:17.700 --> 00:27:24.940
For me, it's similar to most of my, a lot of time I'm in the testing world and pytest does a lot of this stuff for you also.

00:27:24.940 --> 00:27:27.420
It isn't as pretty with the colors and everything.

00:27:27.420 --> 00:27:27.800
Yeah.

00:27:27.800 --> 00:27:28.200
Quite cool.

00:27:28.200 --> 00:27:28.520
Anyway.

00:27:28.520 --> 00:27:36.280
So have you heard the saying that if you have a problem that you solve with regular expressions, then you solve it with regular expressions.

00:27:36.280 --> 00:27:37.080
Now you have two problems.

00:27:37.080 --> 00:27:38.440
Yeah.

00:27:38.440 --> 00:27:44.840
This next one is meant to kind of make that go from one to zero, not one to two.

00:27:44.840 --> 00:27:46.640
Tell us about it.

00:27:46.640 --> 00:27:47.600
One to zero.

00:27:47.600 --> 00:27:48.540
I don't get that.

00:27:48.540 --> 00:27:51.420
Well, you have a problem and it's solved rather than I had a problem.

00:27:51.420 --> 00:27:52.240
Now I have two problems.

00:27:52.240 --> 00:27:53.560
Now you have two problems.

00:27:53.560 --> 00:27:55.180
So it's flash text.

00:27:55.480 --> 00:28:07.360
And it's a very focused solution for searching and search and replace and things that you would often use regex for and finding words within sentences and grouping them into.

00:28:07.920 --> 00:28:12.100
You can have a set of phrases that all kind of phrases that all kind of mean the same thing.

00:28:12.100 --> 00:28:15.440
If you want New York and big apple to mean the same thing.

00:28:15.440 --> 00:28:16.440
You can search them together.

00:28:16.440 --> 00:28:16.780
You can search them together.

00:28:16.780 --> 00:28:19.500
And it's like really, really fast.

00:28:19.640 --> 00:28:26.820
Like if you look at the link that will conclude, it has some graphs on a search size compared to regex.

00:28:26.820 --> 00:28:28.020
And it's kind of incredible.

00:28:28.020 --> 00:28:28.300
Yeah.

00:28:28.300 --> 00:28:29.180
It's really nice.

00:28:29.180 --> 00:28:33.260
And so you can say it'll take like the sentence.

00:28:33.260 --> 00:28:38.180
I love big apple and, you know, the big apple and the Bay area or something like that.

00:28:38.280 --> 00:28:43.220
But if you've told it big apple is a stand in for New York and you ask, Hey, what keywords are here?

00:28:43.220 --> 00:28:44.500
It says New York and Bay area.

00:28:44.500 --> 00:28:46.780
Or you could also put San Francisco, right?

00:28:46.780 --> 00:28:47.880
Yeah.

00:28:47.880 --> 00:28:49.040
So, so quite cool.

00:28:49.040 --> 00:28:53.980
And it's a way to sort of normalize text data for various things people might say.

00:28:53.980 --> 00:28:54.720
I like it.

00:28:54.720 --> 00:28:55.180
Yeah.

00:28:55.180 --> 00:28:57.680
It's super simple and you don't have to write regular expressions.

00:28:57.680 --> 00:28:58.260
So that's good.

00:28:58.260 --> 00:29:00.740
Yeah.

00:29:00.740 --> 00:29:03.660
I'm not really afraid of regular expressions, but yeah.

00:29:03.660 --> 00:29:04.080
Anyway.

00:29:04.080 --> 00:29:04.340
Yeah.

00:29:04.340 --> 00:29:06.960
I'm not terribly afraid of them, but they're not the first thing I'd jump for.

00:29:06.960 --> 00:29:07.300
Okay.

00:29:07.580 --> 00:29:13.000
So I find dates in Python to be surprisingly not obvious.

00:29:13.000 --> 00:29:13.760
How about you?

00:29:13.760 --> 00:29:15.720
Well, they're really easy until they're not easy.

00:29:15.720 --> 00:29:16.300
Exactly.

00:29:16.300 --> 00:29:17.440
You're like, wait a minute.

00:29:17.440 --> 00:29:19.560
That one has a time zone in it and that one doesn't.

00:29:19.560 --> 00:29:20.000
You're done.

00:29:20.000 --> 00:29:20.860
Too bad.

00:29:20.860 --> 00:29:23.340
Good luck with that.

00:29:23.340 --> 00:29:27.480
There's a lot of projects in Python to deal with, deal with date time.

00:29:27.480 --> 00:29:32.520
And Maya is one that is, is from Kenneth Reitz.

00:29:32.520 --> 00:29:32.900
Yeah.

00:29:32.900 --> 00:29:36.540
And so, so it's a for humans application.

00:29:36.960 --> 00:29:37.200
Yeah.

00:29:37.200 --> 00:29:43.140
People feel better when whatever their project that they're using, like request HTTP for humans,

00:29:43.140 --> 00:29:43.440
right?

00:29:43.440 --> 00:29:44.640
So this is date times for humans.

00:29:44.640 --> 00:29:45.200
Quite nice.

00:29:45.960 --> 00:29:53.560
So if you're working with date times, it has a lot of, a lot of cool features and, and simplifies things around date times.

00:29:53.560 --> 00:29:55.440
Some of the slang features are kind of fun.

00:29:55.440 --> 00:30:05.400
So you can say, do things like give it a date and say a week ago or, and have it generate things like those sorts of slang versions of words.

00:30:05.400 --> 00:30:17.720
And so interacting with putting out text, you don't want to use JavaScript.

00:30:17.720 --> 00:30:19.160
You want to keep it on the Python side.

00:30:19.160 --> 00:30:20.260
Maya is a good choice.

00:30:20.260 --> 00:30:21.880
But anyway.

00:30:22.020 --> 00:30:23.020
Yeah.

00:30:23.020 --> 00:30:23.020
Yeah.

00:30:23.020 --> 00:30:24.020
It's cool.

00:30:24.020 --> 00:30:24.020
Yeah.

00:30:24.020 --> 00:30:25.020
It's cool.

00:30:25.020 --> 00:30:32.240
So you can say like slang time and it'll say that's, you know, 23 hours from now, or that's tomorrow, or it's yesterday, which is a real nice way to not be overly precise.

00:30:32.240 --> 00:30:35.540
If you want to just put that on like a forum or something to that effect.

00:30:35.540 --> 00:30:40.980
This portion of talk Python to me is brought to you by Cloudbolt.

00:30:40.980 --> 00:30:46.920
Friends don't let friends violate PEP 8, nor do they let them spend their days in an unfulfilled work environment.

00:30:46.920 --> 00:30:47.840
Good news.

00:30:47.840 --> 00:30:52.280
Your friends at Cloudbolt want your help developing their state-of-the-art cloud management software.

00:30:52.280 --> 00:30:58.600
Built with Django and ranked as the number one product of its kind, Cloudbolt is looking for talented engineers of all types.

00:30:59.020 --> 00:31:04.160
Located in beautiful Portland, Oregon, Cloudbolt is an hour from the Pacific Ocean and Mount Hood.

00:31:04.160 --> 00:31:05.280
You're not in Portland?

00:31:05.280 --> 00:31:06.380
Not a problem.

00:31:06.380 --> 00:31:13.540
Cloudbolt offers a relocation stipend to the Pacific Northwest and is also hiring solution engineers from everywhere around the globe.

00:31:13.540 --> 00:31:20.560
Whether you're interested in containers, hypervisors, or just writing clean performant Python code, Cloudbolt would love to hear from you.

00:31:20.560 --> 00:31:24.460
Visit talkpython.fm/Cloudbolt for more information.

00:31:24.460 --> 00:31:27.060
That's talkpython.fm/Cloudbolt.

00:31:27.060 --> 00:31:31.900
So I think this next one is right up your alley, Brian.

00:31:31.900 --> 00:31:32.600
Really?

00:31:32.600 --> 00:31:33.740
I do.

00:31:33.740 --> 00:31:34.520
I do.

00:31:34.520 --> 00:31:37.340
I'll take it for you, but I think it's up your alley.

00:31:37.340 --> 00:31:39.000
So I don't know how to say it.

00:31:39.000 --> 00:31:39.860
Mimesis?

00:31:39.860 --> 00:31:41.080
Mimesis?

00:31:41.080 --> 00:31:42.260
I'm going to go with mimesis.

00:31:42.260 --> 00:31:42.700
I don't know.

00:31:42.700 --> 00:31:43.960
So it's another one of these fake.

00:31:43.960 --> 00:31:45.480
It's another one of these faker libraries.

00:31:46.120 --> 00:31:50.180
So the idea is you can go and say, I would like to create a person object.

00:31:50.180 --> 00:31:51.880
And you can ask, what's their occupation?

00:31:51.880 --> 00:31:53.280
How old are they?

00:31:53.280 --> 00:31:54.320
You know, what's their name?

00:31:54.320 --> 00:31:59.180
And you can tell things like, please answer me in English or German or whatever.

00:31:59.180 --> 00:32:02.760
And it will basically generate fake test data.

00:32:02.960 --> 00:32:09.080
So you could, you know, create a fake database and put it in a SQLite file, then use that

00:32:09.080 --> 00:32:10.400
for testing or things like that.

00:32:10.400 --> 00:32:11.080
So pretty cool.

00:32:11.080 --> 00:32:11.740
Oh, yeah.

00:32:11.740 --> 00:32:13.000
That does look neat.

00:32:13.000 --> 00:32:17.500
And it looks like they have a page on like, well, why am I using this versus something else?

00:32:17.500 --> 00:32:20.260
So they have a comparison to other libraries.

00:32:20.260 --> 00:32:23.080
So it's good when people are trying to decide.

00:32:23.300 --> 00:32:25.660
Yeah, it has a cool function called identifier.

00:32:25.660 --> 00:32:29.160
And you can give it a mask, just like number, number, number, dash, dash, number, number,

00:32:29.160 --> 00:32:29.940
slash, number.

00:32:29.940 --> 00:32:32.280
And it'll like create one.

00:32:32.280 --> 00:32:37.140
So if you need, say, like social security numbers or something else like that, it'll,

00:32:37.140 --> 00:32:38.700
it's really easy to generate those.

00:32:38.700 --> 00:32:39.200
Quite nice.

00:32:39.200 --> 00:32:41.020
Yeah, I could see where that'd be useful.

00:32:41.020 --> 00:32:41.560
Neat.

00:32:41.560 --> 00:32:41.900
Yep.

00:32:41.900 --> 00:32:47.160
So this next one is called open paperless for scanning documents.

00:32:47.160 --> 00:32:48.720
I know, I don't know anything about this.

00:32:48.720 --> 00:32:49.520
Tell me about that one.

00:32:49.520 --> 00:32:53.220
Well, so this is a, I didn't know about this before reading this.

00:32:53.220 --> 00:32:58.960
So apparently there's a, a document management system called the Mayan EDMS.

00:32:58.960 --> 00:33:05.240
So I'm guessing Mayan electronic document management system, probably for some reason,

00:33:05.240 --> 00:33:12.000
there's open paperless is a, even though the Mayan EDMS is a, is an open project.

00:33:12.000 --> 00:33:15.840
Also the interface, apparently at least some people don't like the interface.

00:33:15.840 --> 00:33:22.860
So open paperless is a Python interface to this system and a simplified interface to it.

00:33:22.960 --> 00:33:28.020
So probably only have concern with, for people that interested in that, but maybe I should be.

00:33:28.020 --> 00:33:28.320
Yeah.

00:33:28.320 --> 00:33:32.880
Well, it's, it's got a lot of possibility for the automate the boring stuff type of things,

00:33:32.880 --> 00:33:33.100
right?

00:33:33.100 --> 00:33:35.380
Like I'm so tired of being in this office and doing this.

00:33:35.380 --> 00:33:37.740
Like, can I write Python to make my job better?

00:33:37.740 --> 00:33:38.720
Yeah, definitely.

00:33:38.720 --> 00:33:39.220
Right.

00:33:39.220 --> 00:33:40.940
Like I don't use paper for anything.

00:33:40.940 --> 00:33:44.440
I'm not sure it'd be any value to me, but I can see how it would be for others.

00:33:44.440 --> 00:33:44.720
Yeah.

00:33:44.720 --> 00:33:49.820
And like things like places where you have to keep signed, keep copies of signed contracts

00:33:49.820 --> 00:33:54.340
and receipts and all sorts of, there's a lot of jobs where you have to keep at least the,

00:33:54.340 --> 00:33:56.560
a scan of the physical version.

00:33:56.560 --> 00:33:57.740
So that would be good.

00:33:57.740 --> 00:33:58.000
All right.

00:33:58.000 --> 00:34:02.820
This next one is a shout out to my, one of my absolute favorite TV series.

00:34:02.820 --> 00:34:04.200
And it scares me to death.

00:34:04.200 --> 00:34:04.940
Really?

00:34:05.500 --> 00:34:06.760
So F society.

00:34:06.760 --> 00:34:07.300
Okay.

00:34:07.300 --> 00:34:10.160
That's the hacker crew from Mr. Robot.

00:34:10.160 --> 00:34:10.660
Okay.

00:34:10.660 --> 00:34:12.100
It means a couple of things.

00:34:12.100 --> 00:34:17.120
It's a play on like that little arcade where they, they all hung out where the U and the

00:34:17.120 --> 00:34:21.220
N fell off, but also, you know, the more obscene version of it as well.

00:34:21.220 --> 00:34:25.380
But so this one is a set of tools for hackers.

00:34:25.380 --> 00:34:29.340
If you're doing penetration testing or things like that.

00:34:29.340 --> 00:34:33.160
So you can check out, this is on GitHub and you can go and grab it.

00:34:33.260 --> 00:34:38.280
So if you say wanted to turn this loose against your code or your infrastructure to see what

00:34:38.280 --> 00:34:41.800
would happen if somebody else did that, you might want to give that a look.

00:34:41.800 --> 00:34:42.020
Yeah.

00:34:42.020 --> 00:34:46.600
And hopefully the people that you're trying to protect from aren't using the same tools,

00:34:46.600 --> 00:34:50.040
but you know, that's, that's one of those good thing, bad things sort of things, but yeah,

00:34:50.040 --> 00:34:50.500
for sure.

00:34:50.500 --> 00:34:51.140
Yeah.

00:34:51.140 --> 00:34:53.940
And it turns out that a Python is a big hit with hackers.

00:34:53.940 --> 00:34:59.820
It's actually an interesting article about like the growth of Python adoption amongst hackers

00:34:59.820 --> 00:35:03.160
was like 77% over the last year or something crazy.

00:35:03.160 --> 00:35:03.520
like that.

00:35:03.520 --> 00:35:07.180
Well, they're a segment of the population and Python's growing in all segments.

00:35:07.180 --> 00:35:08.200
So yeah, that's right.

00:35:08.200 --> 00:35:12.560
It's just, maybe it's because of all the opportunities to do live coding.

00:35:12.560 --> 00:35:15.700
It definitely could be.

00:35:15.700 --> 00:35:20.900
So this, you can take your program and you can hook up a debugger to it and sort of step

00:35:20.900 --> 00:35:21.320
through.

00:35:21.320 --> 00:35:25.640
That could be like PDB or that could be PyJarm or something like that.

00:35:25.640 --> 00:35:32.360
But this live Python one is a little bit more of a, I would like to sit back and watch how

00:35:32.360 --> 00:35:33.540
my program works.

00:35:33.540 --> 00:35:33.860
Right.

00:35:34.060 --> 00:35:34.440
Yeah.

00:35:34.440 --> 00:35:39.100
And I'm still kind of a little confused by this one, but it's a, it's an application that's,

00:35:39.100 --> 00:35:45.280
so you have to, it sits on your desktop and yeah, you kind of watch as your program's running

00:35:45.280 --> 00:35:46.660
to tracing sort of thing.

00:35:46.660 --> 00:35:50.200
And then you can see lots of stuff going on inside.

00:35:50.200 --> 00:35:50.680
Yeah.

00:35:50.680 --> 00:35:56.200
So it says, it lets you basically watch your program run like a movie.

00:35:56.200 --> 00:36:02.160
So you can say, go and I'll sit back and it'll show like the execution through your program,

00:36:02.160 --> 00:36:06.600
as well as like a stack of variables, like a watch window of variables just on the side

00:36:06.600 --> 00:36:08.040
there, which is, it's pretty cool.

00:36:08.040 --> 00:36:08.400
Yeah.

00:36:08.400 --> 00:36:09.800
Maybe you could just have it.

00:36:09.800 --> 00:36:14.960
You could have that just running while you're at lunch and people think you're working while

00:36:14.960 --> 00:36:15.280
you're.

00:36:16.240 --> 00:36:16.700
I'm sorry.

00:36:16.700 --> 00:36:17.640
I'm not, I'm not coming back.

00:36:17.640 --> 00:36:18.220
I'm compiling.

00:36:18.220 --> 00:36:18.720
Yeah.

00:36:18.720 --> 00:36:20.400
I don't know.

00:36:20.400 --> 00:36:21.140
It might be fun.

00:36:21.140 --> 00:36:22.260
I think it's a good idea.

00:36:22.260 --> 00:36:27.420
I saw there was some coffee cup that you can get that it'll like heat itself up at like

00:36:27.420 --> 00:36:31.220
six 30 in the morning and to like start to steam before you get into the office.

00:36:31.220 --> 00:36:33.300
So it looks like you're in early, you just stepped out.

00:36:33.300 --> 00:36:34.640
So this can go along with that.

00:36:34.640 --> 00:36:35.020
Yeah.

00:36:35.020 --> 00:36:40.620
So I told you I was confused about PIPF, right?

00:36:40.620 --> 00:36:40.980
Yeah.

00:36:40.980 --> 00:36:41.260
Yeah.

00:36:41.260 --> 00:36:42.720
Still, still confused.

00:36:42.720 --> 00:36:46.220
And Hatch is also pretty awesome, but it also makes me confused because there's a

00:36:46.220 --> 00:36:48.280
there's all these different ways of what time might work with stuff.

00:36:48.280 --> 00:36:55.040
So Hatch is another package manager, virtual environment manager for Python, which is pretty

00:36:55.040 --> 00:36:55.840
cool and on our list.

00:36:55.840 --> 00:36:56.360
Yeah.

00:36:56.360 --> 00:36:59.740
And it also like they're taking over lots of other stuff too.

00:36:59.740 --> 00:37:04.280
So it, it does things like start a project and like cookie gutter that kind of does in

00:37:04.280 --> 00:37:04.460
it.

00:37:04.460 --> 00:37:10.220
It also does things like push up to PIPI and, and a whole bunch of other things.

00:37:10.220 --> 00:37:10.500
Right.

00:37:10.500 --> 00:37:11.480
It has pytest support.

00:37:11.480 --> 00:37:12.100
Yeah.

00:37:12.100 --> 00:37:12.180
Yeah.

00:37:12.180 --> 00:37:15.040
I don't have any issues with all the tools by themselves.

00:37:15.040 --> 00:37:20.200
So I'm still, yeah, I don't, I don't think I need this, but you know, but a lot of people

00:37:20.200 --> 00:37:22.100
use it and like it over other things.

00:37:22.100 --> 00:37:22.440
Yeah.

00:37:22.440 --> 00:37:23.000
It's cool.

00:37:23.220 --> 00:37:27.380
And I think what this really means that there's all these different ways of doing this stuff.

00:37:27.380 --> 00:37:30.600
It's like, it's just not really totally nailed down.

00:37:30.600 --> 00:37:36.320
Like I recently interviewed the folks around the Python language summit, which is where the

00:37:36.320 --> 00:37:37.260
core developers get together.

00:37:37.260 --> 00:37:44.560
And one of, one of the topics at the core developers meeting in 2018 was virtual environments.

00:37:44.560 --> 00:37:47.300
Do we need them?

00:37:47.300 --> 00:37:49.000
Why are they so hard to teach?

00:37:49.000 --> 00:37:50.280
Can we make them simpler?

00:37:50.840 --> 00:37:51.020
Right.

00:37:51.020 --> 00:37:54.500
I'm telling you, this is just like the fact that there's all these different solutions,

00:37:54.500 --> 00:37:56.020
I mean, it's just not quite a solved problem.

00:37:56.020 --> 00:37:59.720
So I guess that's, you know, it's good that people are trying to solve the problem.

00:37:59.720 --> 00:38:00.580
Yeah, definitely.

00:38:00.580 --> 00:38:05.340
This next one that came up is, I guess if you're in the right space, it'll be useful.

00:38:05.340 --> 00:38:12.100
I'm not totally entirely sure, but number 24 is tangent, which is, it does source to source

00:38:12.100 --> 00:38:13.640
debuggable derivatives.

00:38:13.640 --> 00:38:14.100
Sure.

00:38:14.100 --> 00:38:14.580
In pure Python.

00:38:14.580 --> 00:38:15.160
Why not?

00:38:15.160 --> 00:38:17.800
As in, you know, DYDX.

00:38:17.800 --> 00:38:19.860
Yeah.

00:38:19.860 --> 00:38:22.100
The first derivative of a thing.

00:38:22.100 --> 00:38:27.240
So anyway, it's, if you have to do numerical differentiation, Python, it's pretty cool.

00:38:27.240 --> 00:38:29.140
I probably don't want to say more than that about this one.

00:38:29.140 --> 00:38:29.400
Sure.

00:38:29.540 --> 00:38:30.860
So previously we had profit.

00:38:30.860 --> 00:38:33.420
Did you foresee that Clairvoyant was coming?

00:38:33.420 --> 00:38:35.260
Yeah, I knew that.

00:38:35.260 --> 00:38:38.120
Because I wrote it in here, in the list.

00:38:39.840 --> 00:38:42.780
So Clairvoyant, which is like kind of an awesome name for a project.

00:38:42.780 --> 00:38:50.440
It's a software designed to identify and monitor social and historical cues for short-term stock

00:38:50.440 --> 00:38:50.860
movement.

00:38:50.860 --> 00:38:55.260
So it's, oh yeah, it's like kind of like profit, but focused on stocks.

00:38:55.260 --> 00:38:56.400
I'm guessing.

00:38:56.400 --> 00:38:56.780
Yeah.

00:38:56.780 --> 00:38:57.500
Yeah.

00:38:57.500 --> 00:38:58.140
Nice.

00:38:58.140 --> 00:38:58.480
Yeah.

00:38:58.480 --> 00:39:00.580
For all the algorithmic traders out there.

00:39:00.580 --> 00:39:01.080
Here you go.

00:39:01.080 --> 00:39:05.260
One that is pretty promising is called Monkey Type.

00:39:05.260 --> 00:39:07.320
And that will come from Instagram, I believe, right?

00:39:07.320 --> 00:39:08.780
Yeah, that's from Instagram.

00:39:09.180 --> 00:39:16.160
So we have mypy, we have Monkey Type, and a couple of these other systems that are out

00:39:16.160 --> 00:39:21.260
there trying to take code annotations and help us either evolve or better understand our code

00:39:21.260 --> 00:39:24.500
or lent them to make sure they're correct based on their typing, right?

00:39:24.500 --> 00:39:24.920
Yeah.

00:39:24.920 --> 00:39:29.600
And so this one's kind of a runtime thing that it's, so if you, if you're not sure how your

00:39:29.600 --> 00:39:34.660
code is being used, it can take a look at your, at how it's being used in runtime and

00:39:34.660 --> 00:39:36.720
tell you what the types are.

00:39:36.720 --> 00:39:39.240
What's really interesting is it'll generate a stub.

00:39:39.240 --> 00:39:46.740
You know, the stubs, like it might say def add a colon int, b colon int, goes to int, and

00:39:46.740 --> 00:39:49.040
then just dot, dot, dot instead of an implementation.

00:39:49.040 --> 00:39:55.620
And then Python itself and mypy and PyCharm and whatnot can use that to actually validate

00:39:55.620 --> 00:39:56.700
your code.

00:39:56.700 --> 00:39:58.840
So it doesn't even have to modify your code.

00:39:58.920 --> 00:40:04.780
It can generate these sort of parallel side type definition files, these stub files, and

00:40:04.780 --> 00:40:05.820
put it on a type shed.

00:40:05.820 --> 00:40:06.640
It'd be pretty cool.

00:40:06.640 --> 00:40:06.920
Yeah.

00:40:06.920 --> 00:40:11.240
And I think it might be kind of fun to use as a, just to, to go over some code to see

00:40:11.240 --> 00:40:15.160
if what you think you're doing is really actually how it's being used.

00:40:15.160 --> 00:40:15.380
Right.

00:40:15.380 --> 00:40:17.560
And it's based on how it works at runtime.

00:40:17.560 --> 00:40:20.940
So it looks at your code and says, well, every time you call this function, you pass an int.

00:40:20.940 --> 00:40:23.520
So that's getting a colon int put on it right there.

00:40:25.000 --> 00:40:25.360
Yeah.

00:40:25.360 --> 00:40:26.620
You thought it was a string.

00:40:26.620 --> 00:40:27.100
It's not.

00:40:27.100 --> 00:40:27.580
It's an int.

00:40:27.580 --> 00:40:28.500
No, it's an int.

00:40:28.500 --> 00:40:30.240
That's why it's never equal to the string.

00:40:30.240 --> 00:40:37.460
So, and you can even say, okay, do that and apply those back to my code and I'll put Python

00:40:37.460 --> 00:40:37.960
three.

00:40:37.960 --> 00:40:38.280
Yeah.

00:40:38.280 --> 00:40:38.840
Annotations.

00:40:38.840 --> 00:40:44.020
It'll rewrite your code that has no annotations with annotations guessed from runtime behavior.

00:40:44.020 --> 00:40:44.780
That's pretty awesome.

00:40:44.780 --> 00:40:45.320
Yeah.

00:40:45.320 --> 00:40:45.920
That's nice.

00:40:45.920 --> 00:40:49.240
And then you can just diff it and see what it does and whatever.

00:40:49.240 --> 00:40:50.020
Yeah.

00:40:50.020 --> 00:40:52.520
And then we have, there's so much stuff happening on the space.

00:40:52.520 --> 00:40:54.980
These are not, this next year are not really on the list.

00:40:55.160 --> 00:40:57.380
But we have mypy, which we talked about, right?

00:40:57.380 --> 00:41:02.440
And there's mypyc, which will take this code here that we're talking about and compile it

00:41:02.440 --> 00:41:06.540
to C. Standard Python with annotations compiled to C automatically.

00:41:06.540 --> 00:41:07.500
Okay.

00:41:07.500 --> 00:41:09.380
I'm not sure how that helps me.

00:41:09.380 --> 00:41:11.360
That's a new project coming from Dropbox, actually.

00:41:11.360 --> 00:41:11.800
Okay.

00:41:11.800 --> 00:41:15.420
Because compiled Python needs annotations?

00:41:15.420 --> 00:41:16.120
No.

00:41:16.120 --> 00:41:20.200
If you want to, let's say you want to write a C extension.

00:41:20.660 --> 00:41:24.060
One thing you could do is write the C code, compile it, and then import it.

00:41:24.060 --> 00:41:28.300
The other thing you could do is just say this module, I would like to run through mypyc,

00:41:28.300 --> 00:41:29.420
and now it's a C extension.

00:41:29.420 --> 00:41:30.540
Oh, okay.

00:41:30.540 --> 00:41:31.360
Now I get it.

00:41:31.360 --> 00:41:31.580
Yeah?

00:41:31.580 --> 00:41:32.800
Yeah.

00:41:32.800 --> 00:41:33.200
I'm slow.

00:41:33.720 --> 00:41:37.460
I know you work at a place where they do C and C++, but not everyone necessarily wants

00:41:37.460 --> 00:41:38.020
to write it, right?

00:41:38.020 --> 00:41:42.600
So this will let you skip that or maintain all Python, but still get this equivalent of what

00:41:42.600 --> 00:41:45.180
had happened if you had done C compilation.

00:41:45.420 --> 00:41:48.440
Why are we even writing C anymore if we could just have this?

00:41:48.440 --> 00:41:48.900
I know.

00:41:48.900 --> 00:41:53.200
And the other thing I want to throw in there is Cython will also take this code and compile

00:41:53.200 --> 00:41:56.040
it to C as well with new...

00:41:56.040 --> 00:42:00.480
Now it just does the Python 3 type annotations, and it would make that work as well.

00:42:00.480 --> 00:42:05.300
So you could take monkey type and get yourself into a place where either of those things would

00:42:05.300 --> 00:42:05.720
work on it.

00:42:05.720 --> 00:42:06.220
It'd be pretty cool.

00:42:06.220 --> 00:42:06.600
Nice.

00:42:06.600 --> 00:42:07.400
They all fit together.

00:42:07.400 --> 00:42:07.840
Yes.

00:42:07.840 --> 00:42:13.060
You know, I don't know how many people listen to Python bytes, but if they did, they have

00:42:13.060 --> 00:42:15.240
to know we've been on a GUI trip, right?

00:42:15.340 --> 00:42:15.600
Yeah.

00:42:15.600 --> 00:42:18.120
With the help of a lot of people telling us stuff.

00:42:18.120 --> 00:42:19.260
We're like, oh, there's four.

00:42:19.260 --> 00:42:19.980
They're like, no, no, no.

00:42:19.980 --> 00:42:21.040
Let me tell you.

00:42:21.040 --> 00:42:22.020
Let's count the ways.

00:42:22.020 --> 00:42:23.740
Yeah.

00:42:23.740 --> 00:42:26.440
So there's lots of ways to do user interfaces in Python.

00:42:26.440 --> 00:42:28.440
One of the interesting ones is Eel.

00:42:28.440 --> 00:42:28.920
Yeah.

00:42:28.920 --> 00:42:31.960
Which I'm amused by the name because I got to make the obvious pun.

00:42:31.960 --> 00:42:32.540
It's...

00:42:32.540 --> 00:42:33.020
Or the...

00:42:33.020 --> 00:42:34.220
Just state the obvious.

00:42:34.220 --> 00:42:35.800
It's an electric Python.

00:42:35.800 --> 00:42:38.060
Like Electron, but with Python.

00:42:38.060 --> 00:42:39.160
Get it, Eel?

00:42:39.160 --> 00:42:39.780
I love it.

00:42:39.780 --> 00:42:40.300
I love it.

00:42:40.300 --> 00:42:41.980
The name is actually really awesome.

00:42:41.980 --> 00:42:45.260
So for those who don't know, ElectronJS...

00:42:45.260 --> 00:42:50.880
A lot of apps, probably one of the more notable ones is actually Slack, I believe.

00:42:50.880 --> 00:42:54.440
I'm pretty sure Slack is certainly Visual Studio Code is an ElectronJS app.

00:42:54.440 --> 00:42:55.760
Atom is an ElectronJS app.

00:42:55.760 --> 00:43:03.040
Basically write in web stuff, HTML, JavaScript, CSS, and then run in on top of Node and embedded

00:43:03.040 --> 00:43:03.600
Chrome.

00:43:03.960 --> 00:43:08.960
So this lets you take Python and replace the Node side with it somewhat.

00:43:08.960 --> 00:43:14.780
And it says it's for simple Electron-like apps, which is pretty cool.

00:43:14.940 --> 00:43:19.780
So another one, speaking of listeners helping us out, that's pretty awesome, that I think

00:43:19.780 --> 00:43:22.820
is more full-featured, is called Python Electron.

00:43:22.820 --> 00:43:25.240
And I'm going to put a link to that in the show notes as well.

00:43:25.920 --> 00:43:33.500
And there's actually some pretty cool interaction of here's how you write your Python code and use

00:43:33.500 --> 00:43:36.840
zero MQ to communicate back and forth with the browser.

00:43:36.840 --> 00:43:38.980
So pretty cool.

00:43:38.980 --> 00:43:43.460
You can write just like standard Python and then you have an object and you just say,

00:43:43.460 --> 00:43:44.960
this object is...

00:43:44.960 --> 00:43:50.200
I would like to take this object and make it the API that my app can communicate with.

00:43:50.200 --> 00:43:50.520
It's cool.

00:43:50.520 --> 00:43:51.240
Yeah, neat.

00:43:51.240 --> 00:43:52.620
I would say that was even surprising.

00:43:52.620 --> 00:43:55.000
It was surprising.

00:43:55.000 --> 00:43:56.960
And next up is Surprise.

00:43:56.960 --> 00:44:02.880
So Surprise stands for Simple Python Recommendation System Engine.

00:44:02.880 --> 00:44:05.020
The U and the R are silent.

00:44:05.020 --> 00:44:07.300
A Python scikit...

00:44:07.300 --> 00:44:08.200
Scikit's a noun?

00:44:08.200 --> 00:44:11.780
A Python scikit for building and analyzing recommender systems.

00:44:11.780 --> 00:44:13.000
Yeah, that's pretty cool.

00:44:13.120 --> 00:44:17.740
So if you have any sort of e-commerce system or if you read this article, you might also

00:44:17.740 --> 00:44:18.500
like that article.

00:44:18.500 --> 00:44:19.600
Here you go.

00:44:19.600 --> 00:44:21.060
Surprise lib.com, right?

00:44:21.060 --> 00:44:21.340
Yeah.

00:44:21.340 --> 00:44:22.000
Nice.

00:44:22.000 --> 00:44:22.380
Nice.

00:44:22.380 --> 00:44:25.800
So we talked about mechanical soup.

00:44:25.800 --> 00:44:29.800
The other one that we have previously talked about on Python Bytes not long ago is something

00:44:29.800 --> 00:44:34.940
called Gain, which is a web crawler, much like the other ones we talked about.

00:44:34.940 --> 00:44:40.380
But this one is special because it's based on AsyncIO, which is really cool, and UVloop and

00:44:40.380 --> 00:44:42.160
AIOHTP and things like that.

00:44:42.160 --> 00:44:42.460
Yeah.

00:44:42.940 --> 00:44:44.960
It's a web crawler framework thing.

00:44:44.960 --> 00:44:45.440
Yes.

00:44:45.440 --> 00:44:49.280
You basically give it, you know, here is, let's say, a URL.

00:44:49.280 --> 00:44:50.920
Start here.

00:44:50.920 --> 00:44:54.820
And then go actually find all the other URLs and crawl them.

00:44:54.820 --> 00:44:58.000
So basically, if you wanted to create DuckDuckGo, start here.

00:44:58.000 --> 00:45:01.380
Yeah.

00:45:01.380 --> 00:45:02.680
We need another one of those.

00:45:02.680 --> 00:45:03.220
That's right.

00:45:03.320 --> 00:45:07.800
But if you want to go to a website and sort of explore all the links and start downloading

00:45:07.800 --> 00:45:12.640
and processing that stuff, Gain is pretty awesome because it does it super, super low latency

00:45:12.640 --> 00:45:14.260
and in parallel with AsyncIO.

00:45:14.260 --> 00:45:19.700
And actually, so I like projects like this, not necessarily to make commercial products out

00:45:19.700 --> 00:45:20.900
of them, but for your own thing.

00:45:20.980 --> 00:45:26.140
So if you've got a large website that you're maintaining or a company website or your own

00:45:26.140 --> 00:45:30.540
personal one or whatever, and you want to make sure things are working right, being able

00:45:30.540 --> 00:45:36.880
to crawl it and then interact with, instead of having hooks, you've got a tool for web crawling

00:45:36.880 --> 00:45:38.540
that you can hook other Python up to.

00:45:39.000 --> 00:45:44.500
There's a lot of stuff you can do with that and having it do it quickly on maybe your

00:45:44.500 --> 00:45:47.360
limited little CPU that you've got playing around.

00:45:47.360 --> 00:45:48.520
I think it's neat.

00:45:48.520 --> 00:45:49.180
Yeah, that's awesome.

00:45:49.180 --> 00:45:54.460
So yeah, that's a really good example as well is if I've got a large website, maybe it's even

00:45:54.460 --> 00:45:59.260
like a CMS or something where I don't necessarily control all the stuff that goes into it.

00:45:59.260 --> 00:46:01.020
You want to make sure there's no broken links.

00:46:01.020 --> 00:46:02.960
You can easily do that with Gain.

00:46:02.960 --> 00:46:03.500
That'd be cool.

00:46:03.500 --> 00:46:04.800
Make that part of your automated build.

00:46:04.800 --> 00:46:05.440
All right.

00:46:05.440 --> 00:46:09.240
The last one here is one of these automate the boring stuff type things.

00:46:09.240 --> 00:46:13.480
It's not interesting to many people, but if you need it, you really need it.

00:46:13.480 --> 00:46:22.400
So if you would like to interact with PDFs and get data out of them, then PDF tab extract is

00:46:22.400 --> 00:46:22.880
for you, right?

00:46:22.880 --> 00:46:23.420
Yeah.

00:46:23.420 --> 00:46:29.560
And the, I mean, the article and the, the, the, even the read me on this show some kind

00:46:29.560 --> 00:46:32.880
of amazingly horrible scans of documents.

00:46:32.880 --> 00:46:34.320
They're not straight.

00:46:34.320 --> 00:46:35.620
Oh, they are horrible.

00:46:35.620 --> 00:46:36.440
Oh my goodness.

00:46:36.440 --> 00:46:37.300
They're so bad.

00:46:37.300 --> 00:46:37.740
Yeah.

00:46:37.740 --> 00:46:39.140
And there's like, I can hardly read them.

00:46:39.140 --> 00:46:39.580
Yeah.

00:46:39.580 --> 00:46:40.460
You can hardly read them.

00:46:40.460 --> 00:46:47.860
And yet this has, this is a way to OCR and extract data and then create data sets out of,

00:46:47.860 --> 00:46:51.200
out of like scans of things with tables in them.

00:46:51.440 --> 00:46:57.240
So one of those things of, if you need to, if you need to, if this is your job, yeah, automating

00:46:57.240 --> 00:46:58.220
this is a good idea.

00:46:58.220 --> 00:47:03.640
That is so awesome because normally what you could do with some of the tools for PDFs is

00:47:03.640 --> 00:47:06.340
get the text represented in the file.

00:47:06.340 --> 00:47:12.660
But this, these examples are not that these are, here's your tabular data just scanned from

00:47:12.660 --> 00:47:13.180
an image.

00:47:13.180 --> 00:47:14.780
Now get the text out of it.

00:47:14.780 --> 00:47:15.280
Yeah.

00:47:15.520 --> 00:47:15.740
Yeah.

00:47:15.740 --> 00:47:15.980
Cool.

00:47:15.980 --> 00:47:17.560
So I'm sure that's going to make someone's day.

00:47:17.560 --> 00:47:18.740
Right.

00:47:18.740 --> 00:47:23.820
So that's our, our top 30 from 2018, which is really based a little bit on slightly older

00:47:23.820 --> 00:47:25.400
data, but it was fun to cover with you, Brian.

00:47:25.400 --> 00:47:26.540
It definitely was fun.

00:47:26.740 --> 00:47:30.800
Um, and, similar feel is, Python bytes.

00:47:30.800 --> 00:47:35.820
So if you, if you like this sort of a thing, we get to spend a little bit more time per

00:47:35.820 --> 00:47:36.940
topic on Python bytes.

00:47:36.940 --> 00:47:39.000
So head over to there and check us out there.

00:47:39.000 --> 00:47:39.600
Yeah, absolutely.

00:47:39.600 --> 00:47:41.740
That's a fun podcast for sure.

00:47:41.740 --> 00:47:43.020
So do check that one out.

00:47:43.020 --> 00:47:44.020
All right.

00:47:44.020 --> 00:47:45.820
Before you go though, there's the two questions.

00:47:45.820 --> 00:47:50.920
I always, always get to ask if you're going to write some code these days, what editor Python

00:47:50.920 --> 00:47:52.080
code specifically.

00:47:52.080 --> 00:47:56.420
PyCharm, always now has incredible pytest support.

00:47:56.660 --> 00:48:01.700
And then I also got, I'm going to get this wrong, but I got, Oliver Best Walter keyed

00:48:01.700 --> 00:48:06.460
me onto a project called like, power mode or something.

00:48:06.460 --> 00:48:12.800
And, when you, when you type it's like sparks and fire comes out and it's just a blast.

00:48:12.800 --> 00:48:14.560
So I'm using that all the time now.

00:48:14.560 --> 00:48:17.240
So you want to feel powerful.

00:48:17.240 --> 00:48:20.120
Like I'm kind of just low energy this morning.

00:48:20.120 --> 00:48:20.400
All right.

00:48:20.400 --> 00:48:20.600
Yeah.

00:48:20.600 --> 00:48:21.780
Power mode, baby.

00:48:21.780 --> 00:48:22.140
It's all.

00:48:22.140 --> 00:48:26.580
When you, when, when you copy and paste a chunk of code also, or cut a big chunk of

00:48:26.580 --> 00:48:30.660
code, it pops up like a bam, like a, on comics.

00:48:30.660 --> 00:48:31.680
Um, it's neat.

00:48:31.780 --> 00:48:32.720
Oh my gosh.

00:48:32.720 --> 00:48:33.640
I have to find this.

00:48:33.640 --> 00:48:38.800
You're going to change my, the way my, my, coding works.

00:48:38.800 --> 00:48:39.320
This is going to be bad.

00:48:39.320 --> 00:48:42.660
I had to turn off the flames and the shaking of the screen.

00:48:42.660 --> 00:48:46.920
Cause I could, it can't work like that, but the sparks, I can, I can just work with those

00:48:46.920 --> 00:48:47.300
sparks.

00:48:47.300 --> 00:48:48.980
And so that's pretty excellent.

00:48:49.240 --> 00:48:54.120
Normally I would ask you for a notable PI PI package, but we literally just covered like

00:48:54.120 --> 00:48:56.400
35 PI packages.

00:48:56.400 --> 00:48:56.980
Definitely.

00:48:56.980 --> 00:48:58.040
So I think we're good.

00:48:58.040 --> 00:49:00.980
I think we're good on that one, but let me swap that one out.

00:49:00.980 --> 00:49:04.560
Just let, why don't you tell people about testing code, your other podcast, which you didn't give

00:49:04.560 --> 00:49:05.240
a shout out to yet.

00:49:05.240 --> 00:49:05.840
Oh yeah.

00:49:05.840 --> 00:49:08.340
I also do another podcast called testing code.

00:49:08.340 --> 00:49:12.180
That's a test and code T a two.

00:49:12.180 --> 00:49:13.400
I can't spell today.

00:49:13.400 --> 00:49:16.380
T E S T A N D C O D E.F.

00:49:16.380 --> 00:49:17.600
That's not that FM.

00:49:17.600 --> 00:49:18.620
Why am I doing that?

00:49:18.620 --> 00:49:20.160
It's testing code.com.

00:49:20.160 --> 00:49:20.920
That's it.

00:49:20.920 --> 00:49:21.500
Yeah.

00:49:21.500 --> 00:49:22.600
We cover all bunch of stuff.

00:49:22.600 --> 00:49:25.000
We don't just do testing and cover a lot of other things too.

00:49:25.000 --> 00:49:30.040
I know that we already have talk Python, but I do a little bit different take on things

00:49:30.040 --> 00:49:31.580
and it's fun.

00:49:31.580 --> 00:49:32.600
And I'm ramping things up.

00:49:32.600 --> 00:49:35.500
We're doing weekly, weekly podcasts for the rest of the year.

00:49:35.500 --> 00:49:36.100
That's awesome.

00:49:36.100 --> 00:49:38.340
And you've had some pretty notable folks on there, so that's good.

00:49:38.340 --> 00:49:38.740
Keep it up.

00:49:38.740 --> 00:49:39.020
Thanks.

00:49:39.020 --> 00:49:39.400
All right.

00:49:39.400 --> 00:49:43.900
Well, hopefully people have found a couple of things that really apply to what they're

00:49:43.900 --> 00:49:45.360
doing that they maybe hadn't heard of.

00:49:45.360 --> 00:49:46.940
I know I had when I went through this.

00:49:46.940 --> 00:49:47.580
Yeah, I did too.

00:49:47.580 --> 00:49:49.000
It was a surprising.

00:49:49.000 --> 00:49:50.600
It was very surprising.

00:49:50.800 --> 00:49:52.480
My clairvoyance wasn't good.

00:49:52.480 --> 00:49:53.800
My prophecies were not.

00:49:53.800 --> 00:49:54.740
A lot to gain.

00:49:54.740 --> 00:49:55.400
We're going to stop now.

00:49:55.400 --> 00:49:56.180
Oh, sorry.

00:49:56.180 --> 00:49:58.100
Oh my gosh, there was a lot to gain.

00:49:58.100 --> 00:49:59.940
All right.

00:49:59.940 --> 00:50:01.040
Let's just leave it there, Brian.

00:50:01.040 --> 00:50:02.180
Thank you so much for coming.

00:50:02.180 --> 00:50:02.660
Bye.

00:50:02.660 --> 00:50:03.280
Thank you.

00:50:03.280 --> 00:50:03.600
Bye.

00:50:03.600 --> 00:50:07.500
This has been another episode of Talk Python to Me.

00:50:07.500 --> 00:50:12.880
Our guest on this episode was Brian Okken, and it's been brought to you by Linode and Cloudbolt.

00:50:12.880 --> 00:50:16.760
Linode is bulletproof hosting for whatever you're building with Python.

00:50:16.940 --> 00:50:21.100
Get four months free at talkpython.fm/Linode.

00:50:21.100 --> 00:50:22.900
That's L-I-N-O-D-E.

00:50:22.900 --> 00:50:25.120
Spend your work time fulfilled.

00:50:25.120 --> 00:50:29.920
Write Python and Django code at Cloudbolt, developing their state-of-the-art cloud management software

00:50:29.920 --> 00:50:31.880
in beautiful Portland, Oregon.

00:50:31.880 --> 00:50:36.100
Visit talkpython.fm/Cloudbolt to join the team.

00:50:36.100 --> 00:50:37.780
Want to level up your Python?

00:50:38.180 --> 00:50:42.700
If you're just getting started, try my Python jumpstart by building 10 apps or our brand

00:50:42.700 --> 00:50:44.820
new 100 days of code in Python.

00:50:44.820 --> 00:50:48.620
And if you're interested in more than one course, be sure to check out the Everything Bundle.

00:50:48.620 --> 00:50:50.860
It's like a subscription that never expires.

00:50:50.860 --> 00:50:53.060
Be sure to subscribe to the show.

00:50:53.060 --> 00:50:55.260
Open your favorite podcatcher and search for Python.

00:50:55.260 --> 00:50:56.500
We should be right at the top.

00:50:56.500 --> 00:51:02.620
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct

00:51:02.620 --> 00:51:05.800
rss feed at /rss on talkpython.fm.

00:51:05.800 --> 00:51:07.700
This is your host, Michael Kennedy.

00:51:07.700 --> 00:51:09.060
Thanks so much for listening.

00:51:09.060 --> 00:51:10.140
I really appreciate it.

00:51:10.140 --> 00:51:12.080
Now get out there and write some Python code.

00:51:12.080 --> 00:51:32.620
I'll see you next time.

00:51:32.620 --> 00:52:02.600
Thank you.

