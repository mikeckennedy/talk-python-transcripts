00:00:00 Learning about programming libraries and languages is useful and interesting,

00:00:03 but sometimes knowing why certain decisions were made or the history leading up to some change

00:00:08 or a package being created gives you a deeper understanding.

00:00:12 And that's what this episode is all about.

00:00:14 You'll meet Mike Driscoll, who runs PyDev of the Week.

00:00:16 He also just published a really relevant book, Python Interviews, Discussions with Python Experts.

00:00:23 This is Talk Python to Me, episode 156, recorded March 21st, 2018.

00:00:29 Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:49 This is your host, Michael Kennedy.

00:00:51 Follow me on Twitter, where I'm @mkennedy.

00:00:53 Keep up with the show and listen to past episodes at talkpython.fm and follow the show on Twitter via at Talk Python.

00:00:59 Before we get to our conversation, I want to tell you about a project I've been working on for the past three months.

00:01:04 Do you remember Bob and Julian from episode 140, where we talked about the 100 Days of Code challenges and their projects around it?

00:01:11 Well, since then, we've teamed up and created a new course, 100 Days of Code in Python.

00:01:17 This course has 18 hours of video lessons and around 80 hours of guided exercise.

00:01:23 That's 100 hours, one for each day.

00:01:26 If you're considering doing one of these 100 Days of Code challenges, please have a look at our course over at talkpython.fm/100 days.

00:01:33 Now, let's get on to the interview.

00:01:35 Mike, welcome to Talk Python.

00:01:38 Thank you for having me, Michael.

00:01:39 Yeah, it's great to have you here.

00:01:41 I've been a fan of your Python Dev of the Week project that you've had going for a long time and things like that.

00:01:47 How long has that been running?

00:01:49 I think it's been going on now for almost three years.

00:01:51 Yeah, that's pretty good.

00:01:52 That's like 156 interviews or something on that scale, right?

00:01:56 That's cool.

00:01:57 Yep, yep.

00:01:58 That's correct.

00:01:58 Yeah, nice.

00:01:59 Awesome.

00:01:59 We're going to talk about some of the interviews you did, not necessarily for that project, but somewhat in the same vein as that for this really cool book that you put together called Python Interviews,

00:02:14 which I think is a great idea.

00:02:16 But before we get to it, let's get started with your story.

00:02:19 How did you get into programming in Python?

00:02:20 Okay, so I started out with your traditional languages in school like C++ and COBOL.

00:02:26 I know COBOL isn't really that interesting anymore, but that was what I was learning back then.

00:02:31 There was a part of the time where it was really good consulting, right?

00:02:34 People really needed COBOL to help the transition, right?

00:02:38 Yeah, yeah.

00:02:38 I do know a contractor who makes really good money doing COBOL for the government.

00:02:43 So there's definitely a job still out there for you people who want to learn ancient, dead languages.

00:02:47 I guess so.

00:02:48 All right, so you started with those languages, right?

00:02:51 And you studied comp sci in college?

00:02:53 Yeah, I went for computer science, and then I transitioned to MIS.

00:02:58 Then I graduated, and the dot-com bubble burst, and there were no jobs.

00:03:02 Oh, that hurts.

00:03:03 And probably while you were in college, you were like, oh, my God, the jobs are so hot.

00:03:07 I can't wait to get out there and work with a place with volleyball and massages.

00:03:13 All the excesses of the day.

00:03:15 Yeah, it sounded like it was going to be an awesome opportunity, and then I get out, and

00:03:19 I'm like, wow, I can't get a job anywhere because everyone has to have five years' experience

00:03:22 or more.

00:03:23 Oh, that's rough.

00:03:24 So what did you do?

00:03:25 I actually worked kind of as a so-called webmaster doing front-page-based websites for an auction

00:03:34 company.

00:03:34 Front-page is a product, right?

00:03:35 Like the thing that looked a little like Word but made websites?

00:03:38 Yeah, the Microsoft product that's now dead.

00:03:41 But yeah, I had created templates, and it was kind of pathetic.

00:03:44 Yeah, it was a really interesting take on how you make the web.

00:03:47 And of course, it was pretty typical of how Microsoft thought at the time.

00:03:51 They don't do that anymore either.

00:03:53 No, they don't.

00:03:55 But anyway, I did that, and then the local county actually was hiring.

00:03:58 And for some reason, they ended up choosing me, and they said, we're transitioning away from

00:04:04 Microsoft because every time we upgrade our VBA applications, like Office, it breaks all

00:04:11 of our apps.

00:04:12 And we want to go to open source.

00:04:13 And the language that my boss had chosen at the time was Python.

00:04:16 And so he said, you can learn Python or, you know, you won't be able to work here.

00:04:22 So I picked up Python on the job, and I got really good at it, and basically fell in love

00:04:28 with the language.

00:04:28 That's really cool.

00:04:29 What was your first thought when you kind of got that news?

00:04:32 Well, I was pretty nervous because I was like, I studied all this stuff in college, and now

00:04:37 I'm going to do a completely different language, which is very different than what they were

00:04:41 teaching in college.

00:04:42 And they're just like, whoa, transition shift, you know?

00:04:46 It was a little trial by fire, but it worked out in the end.

00:04:50 Yeah, that's awesome.

00:04:51 And then after that, you pretty much have been just sold on Python?

00:04:54 Yeah, I'm definitely a Python advocate.

00:04:56 Yeah, of course.

00:04:57 That's awesome.

00:04:58 All right, so that's how you got into it.

00:05:00 How about today?

00:05:01 What do you do day to day?

00:05:02 Currently, I'm working for an aid company that creates tools to actually kind of automate

00:05:09 and track what you're doing when you're planting and when you're harvesting.

00:05:14 And they can basically plant your corn or your beans or whatever down to the centimeter,

00:05:20 depending on your GPS quality.

00:05:22 And what's cool about that, yeah, I know.

00:05:25 And when I got into this, I was like, I didn't know that tech had reached the far world.

00:05:31 That's really amazing what they are doing now in agriculture and, you know, in food produce.

00:05:36 Yeah, one of the things I think is super interesting is just how diverse the uses of Python and programming are, right?

00:05:44 Like, I suspect a lot of people, when they think of farming, they probably think of large farms.

00:05:49 They probably think of, like, John Deere tractors and stuff doing their thing.

00:05:53 But they probably don't think deep IoT and a lot of code and automation and all that kind of stuff, right?

00:06:01 Yeah, yeah.

00:06:01 Yeah, I know I didn't.

00:06:05 Yeah, I think there's actually some really cool stuff in IoT and farming, for sure.

00:06:09 Oh, yeah, yeah, definitely.

00:06:10 They're getting more and more connected so that you can track what you're doing on your iPad and the display in the cab and on your phone, too.

00:06:20 And everyone in the business or your relatives can kind of see how you're doing, basically.

00:06:24 Yeah, that's cool.

00:06:26 Yeah, there's a guy who was listening to this podcast and sent me a picture of, like, it being played or something while he was plowing a field in his John Deere tractor.

00:06:35 He's like, yeah, man, I'm studying up while I'm working on the farm.

00:06:38 I'm like, wow, that's really cool.

00:06:39 So tell us about the app that you work on.

00:06:41 What I actually work on is the testing of the applications that we work on for the agricultural company.

00:06:47 So I write Python that uses a tool called Squish that connects to the C++ embedded application that we've written.

00:06:56 And it'll actually instrument it and be able to press any buttons or grab any information out of it.

00:07:01 And it allows us to test all of our different configurations.

00:07:06 And do the buttons exist when they're supposed to or not?

00:07:08 Because we have permissions related to the type of owner or operator who's using the tool.

00:07:14 Stuff like that.

00:07:15 Basically, it gets pretty complicated.

00:07:17 We have probably, you know, 300 or 400 tests just for the UI, not counting all the unit tests and other things underneath the covers.

00:07:25 Right, yeah, that sounds pretty awesome.

00:07:27 Sounds like a fun project.

00:07:28 Yeah.

00:07:29 Yeah, so let's talk about some of your books.

00:07:32 So we talked about the Python Dev of the Week project, which is on the web.

00:07:36 But you've written a number of books, right?

00:07:38 Yeah.

00:07:39 My audience for my blog had been encouraging me for a couple of years to write a book.

00:07:43 And I finally took them up on that and wrote Python 101, which was pretty well received.

00:07:48 I did a Kickstarter for it to help get some publicity and just to see if there was any interest in it.

00:07:55 And that was by far the book that got the most interest of any of them that I've written.

00:08:01 And people are still buying it and reading it and, you know, telling me that they like it for the most part.

00:08:08 Yeah, that's really awesome.

00:08:09 So I definitely think these, like, if you look at what people are interested in, it seems like it might be most amazing to write some really advanced book.

00:08:18 But it's really the foundational stuff that actually most people are interested in, right?

00:08:23 Like, if you wrote, like, the internals of AsyncIO, even though it might sound cooler than Python 101, like, it wouldn't be the same, right?

00:08:31 Yeah.

00:08:32 I've noticed that with the more specific topics you get, the smaller the audience chunk is because there are just less people that are going to be interested in that specific topic.

00:08:41 Yeah, for sure.

00:08:43 So I think launching it on Kickstarter was a really good idea.

00:08:47 You know, I launched my training company on Kickstarter as well.

00:08:51 And it just was really surprising.

00:08:53 But it was also, it really took a lot of the edge off.

00:08:56 Like, after a week, you're like, okay, there's enough interest in this for me to pursue this project that it's not just me thinking of an idea and going, I hope it's good.

00:09:04 We'll find out in six months.

00:09:06 But, you know, you put it up there, people, like, commit to it right away and give you feedback.

00:09:10 And it actually guides a little bit of what even you might build, right?

00:09:14 Yeah.

00:09:14 That's actually why I liked Kickstarter is that I got to work with the people.

00:09:18 My early readers got to have feedback early on in the process.

00:09:22 And I was able to actually take some of their ideas and be like, this is awesome.

00:09:27 Let's add this to the book.

00:09:28 Or let's add that to the book.

00:09:29 Or this actually isn't a good idea to talk about.

00:09:32 Nobody's interested in this topic.

00:09:33 Yeah.

00:09:33 Yeah, that's really, really cool.

00:09:35 So then you also did Python 201, Intermediate Python, right?

00:09:39 Was that also on Kickstarter?

00:09:40 Yes.

00:09:40 It definitely was.

00:09:42 And it got a lot of interest as well, although maybe not as much as, of course, the first one.

00:09:49 But a lot of people thought it was really interesting, and they took it as a good stepping stone to the next level, I think.

00:09:55 One that you did that really sounds super interesting to me these days is WX Python Cookbook and Recipes.

00:10:02 Yeah.

00:10:03 So Daybreak's Python Cookbook.

00:10:04 I've been working with that community practically from the beginning of my time starting with Python.

00:10:10 And I thought, you know, I've written a lot of recipes on my blog.

00:10:14 I should clean those up and write some new ones and create a book around it.

00:10:17 And so that's kind of what I did.

00:10:19 And then A-Press came along and said, hey, we like that book.

00:10:22 We want to compete with Pact.

00:10:24 Could we, you know, license it and give it our brand and call it Recipes instead of Cookbook?

00:10:30 And so...

00:10:31 That's interesting.

00:10:32 That's kind of how that ended up happening.

00:10:34 Yeah.

00:10:34 So does this cover the WX Python Phoenix or does it predate that?

00:10:40 And how different are those?

00:10:41 Yeah.

00:10:42 It does cover Phoenix, which is now WX Python 4, actually.

00:10:46 I tried to do both 3 and 4 when I wrote the cookbook itself.

00:10:50 And then when A-Press came along, I kind of updated it.

00:10:52 So most of it is just for 4.

00:10:55 But I did leave a little bit of legacy code in there to kind of show the difference.

00:11:00 The big things that have changed is that Robin Dunn, the creator of WX Python, switched from SWIG to SIP.

00:11:07 And so the layer between Python and C++ is thinner.

00:11:12 And it makes doing Python 2 and 3 a lot easier for him.

00:11:18 But otherwise, it's just like, you know, he deprecated some certain naming conventions and just little things that have bothered him for, you know, who knows how long.

00:11:29 Probably a decade.

00:11:30 And now he's finally gotten it nicer.

00:11:32 Yeah.

00:11:33 Yeah, that's cool.

00:11:34 All right.

00:11:35 I want to talk about your main book and really dig into that one.

00:11:38 But you have one that also was on Kickstarter.

00:11:41 I know because I backed it.

00:11:42 And I don't know if the – I think the Kickstarter is done, right?

00:11:46 Called Report Lab.

00:11:47 Want to tell us about that?

00:11:48 Yes, that Kickstarter is over.

00:11:50 Okay, cool.

00:11:51 How did it go?

00:11:53 I thought it went okay.

00:11:54 I thought it might be a little bit more interest than the WX Python one.

00:11:58 Because my Report Lab articles on my blog get way more hits than my WX Python ones do.

00:12:04 So I just thought, you know, Report Lab is going to be more interesting than WX Python is, at least book-wise.

00:12:11 But, oh, well.

00:12:12 It's been really good.

00:12:14 I've gotten good feedback.

00:12:15 I've got good people telling me some good ideas.

00:12:18 And the book itself is coming together really, really well.

00:12:22 And since a lot of it's like brand new content, I feel like that – I just feel really positive about it.

00:12:27 Because usually when I'm writing everything from scratch, it takes a lot longer.

00:12:32 And it's just kind of like coming right out really smoothly for me.

00:12:36 Oh, yeah.

00:12:37 That's really great.

00:12:37 And so this basically teaches you how to do PDF processing in Python, right?

00:12:43 Yeah, yeah.

00:12:44 And Report Lab is for creating PDFs and basically laying out the page in your PDF.

00:12:51 I also have a part of the book that's going to talk about some other Python-related PDF tools like PyPDF2 and PDFMiner that will show you how to export data from your PDF or split your PDF into multiple pages or join multiple PDFs together.

00:13:07 Different things like that that Report Lab doesn't really do natively.

00:13:11 Yeah, that's really cool.

00:13:12 I definitely want to study this because I need to create some PDFs for various things on my site.

00:13:16 So I'm excited for this to come out.

00:13:18 When's it coming out?

00:13:19 It'll come out in June or maybe even May if I'm lucky.

00:13:22 Yeah, that's awesome.

00:13:23 All right.

00:13:24 So let's talk about your book that you do have out.

00:13:27 This is probably the most recent one published, right?

00:13:29 The one called Python Interviews, Discussions with Python Experts?

00:13:32 Yes.

00:13:33 That one was released earlier this month, actually.

00:13:35 Yeah, nice.

00:13:36 And this one is published through PAC, whereas your original WXPython cookbook and your other ones as well, were they self-published?

00:13:44 Yes, that's correct.

00:13:46 Interesting.

00:13:46 Okay.

00:13:47 So maybe give us the quick trade-off between self-publishing and, say, working with PACT or someone else.

00:13:54 The main thing I like about self-publishing is I know when I release, I know the name of the book.

00:14:02 I have the control over the book.

00:14:03 I have the control over the quality of the book, and I can also see how it's selling at any moment in time because Amazon and LeanPub, the two primary places I sell my book, actually have graphs.

00:14:15 And they can tell you in real time how many units have sold in a day, whereas if you work with a publisher, you have to wait quarterly for updates.

00:14:25 Right.

00:14:25 So you have no idea if the book is selling well or not.

00:14:28 And you have no idea how much of that cut you're going to get either, depending on the sales that were done during that time period.

00:14:35 Yeah.

00:14:35 So.

00:14:36 Yeah, interesting.

00:14:37 Okay.

00:14:37 So this one is with PACT, and I think it's a really interesting idea.

00:14:41 So you went through and you interviewed 20 notable experts in the field.

00:14:47 I'll just read off some.

00:14:48 Mike Bayer, Brett Cannon, Nick Cogan.

00:14:51 You had Jessica McCuller, Carol Willing, Al Swiger, Jake Vanderplast, and a bunch more.

00:14:57 All those people I named, by the way, have been on the podcast.

00:14:59 So I feel like you've done this sort of interesting book equivalent, sort of a podcast, right?

00:15:06 Like I'm going to go inside and get the stories of these people behind these major projects, right?

00:15:11 Yeah, yeah.

00:15:11 Yeah.

00:15:12 Nice.

00:15:13 So I guess maybe let's start at kind of a high level.

00:15:17 One thing I wanted to ask you is like, what's your takeaway from all the time you spent interviewing these people?

00:15:24 Like what perceptions or thoughts maybe changed about ideas that you had going in that afterwards you're like, oh, no, actually, this is totally different than what I thought it might be.

00:15:33 I think the biggest takeaway for me is how big AsyncIO has gotten in asynchronous programming in general.

00:15:43 A lot of the people I talked to were excited about it and excited to have it added to the standard library.

00:15:49 I think I had a couple people who were pretty kind of cautious about AsyncIO and they thought its implementation wasn't as good as it should be.

00:15:58 Or they just didn't think it was a good idea in general.

00:16:02 But overall, I got a kind of a positive feedback loop from that that, hey, this is really good.

00:16:07 It needs some improvement.

00:16:09 We're going to make Python use it in a way that is really easy to use.

00:16:14 Yeah, I feel like if you're in a situation or position where AsyncIO will really solve the problem, it's like such a great thing to have it.

00:16:26 But a lot of people write code that has no use for it and it just seems like confusing.

00:16:33 It adds complexity and why is this thing here?

00:16:35 But if you happen to need it, then you definitely, definitely can benefit from it.

00:16:40 Yeah, I totally agree with that.

00:16:42 Yeah, I think the one area that we could use some more help on to really jumpstart this is really the major web frameworks.

00:16:50 If they could somehow be like natively Async capable.

00:16:55 Yeah, I know Glyph was trying to do that, but he was trying to make Async native.

00:17:02 Even though it is technically the Async socket library already, he's going to start using the Python Async library in the internals of Twisted.

00:17:10 That's pretty awesome.

00:17:11 That way you can chain your Async stuff with the lower level Async stuff in a more continuous way.

00:17:18 Yeah, I thought that was a really neat idea.

00:17:21 Yeah, pretty cool.

00:17:22 Okay, other takeaways?

00:17:23 The other takeaway, and I kind of noticed this at PyCon last year, is that machine learning and data science has gotten really big with Python.

00:17:31 And so there was a lot of excitement about that and how Python is just like kicking butt in that sphere, that business area.

00:17:40 And it's bringing in a lot of new people that don't really know Python at all or programming in general.

00:17:46 And they're getting introduced to Python, which I think is really cool.

00:17:49 Yeah, I think it really has opened up a whole other aspect.

00:17:52 And you're right, it is a big theme in the book from what the people talked about.

00:17:57 So what I want to do is just go through and we'll pick out a couple of the folks you interviewed and some of the things that I found notable in your conversation with them from the book.

00:18:10 And maybe we could just touch on those a little bit.

00:18:12 So there's 20 people here, and we can't go through all 20 of them, I don't think, unfortunately.

00:18:17 So people are saying, if I don't cover your thing, it's not that I didn't like it, just like I ran out of time.

00:18:23 So time and space.

00:18:25 So let's start with one of the core developers.

00:18:28 I really like Brett Cannon.

00:18:29 So yeah, Brett, he lives sort of in my neighborhood, if you think globally and define a sufficiently large neighborhood.

00:18:36 Sort of the Pacific Northwest area anyway.

00:18:38 And so one of the things that he touched on that I thought was pretty interesting was the sort of idea of like, can you know it all, even within this Python sphere, right?

00:18:49 Like, can you know all of Python?

00:18:51 Like, should this even be a goal?

00:18:53 And of course, like, there's the Python and the runtime, but then there's also all the libraries and external stuff, right?

00:19:00 Yeah.

00:19:01 Talking about that, he said something to the effect of, Guido famously was once asked at Google, on a scale of 1 to 10, how well do you know Python?

00:19:09 He said 8.

00:19:09 Yeah, I've noticed that Google has that on one of their, and part of their interview processes.

00:19:15 You know, how well do you know something?

00:19:17 You know, one is, you don't know it at all, and one is you wrote the book on it, or you wrote the language.

00:19:22 So I find it really interesting that Guido himself is like an 8.

00:19:26 But I totally agree with that.

00:19:28 While I consider myself to be really knowledgeable in Python, there are libraries that I've never used in the standard library yet.

00:19:34 Yeah, same here.

00:19:35 Yeah.

00:19:35 I think it's really interesting, right?

00:19:38 And at first you might think, well, how is that possible?

00:19:40 He created Python.

00:19:42 But he's not the only one, right?

00:19:43 There are tons of people working on major changes and optimizations and whole new aspects of Python that maybe he just looked at the PEP and said, that's a good idea.

00:19:53 Send us a PR.

00:19:54 Yeah.

00:19:55 Yeah, I totally agree with that because there's a lot of people who did it who worked on it.

00:19:59 And I think even Brett would say he doesn't know it all, even though he did claim, I think, during the interview that he had touched pretty much everything in the Python internals at one point or another.

00:20:08 Right, but how much of that sticks, right?

00:20:09 Yeah, I know.

00:20:11 So another interesting – I just have to look up stuff.

00:20:14 Yeah, of course, like distributed cognition.

00:20:17 We have the internet.

00:20:17 So another thing that he touched on that's really important right now and is going to be increasingly important over the next year and a half is moving to Python 3.

00:20:27 He said, I hope people realize that you can transition to Python 3 gradually.

00:20:32 It doesn't have to be abrupt or painful, and he referenced the Instagram thing where I was actually at the keynote at – what was that, 2017?

00:20:41 PyCon 2017?

00:20:42 I think it was.

00:20:43 Mm-hmm.

00:20:43 Definitely in Portland.

00:20:44 Yeah.

00:20:45 I was actually doing this at work last year.

00:20:48 I was trying to transition our automated test framework from Python 2 to Python 3, and it really wasn't that bad.

00:20:56 I got the code working, but I wasn't able to get all the tooling to work because of issues with our vendor.

00:21:02 But it really isn't that painful.

00:21:04 I thought it was actually fairly easy, and we have probably 10,000 lines of code or more just in that one testing framework.

00:21:12 Yeah, I think to me, when I look at the changes, I'm like, none of these are major.

00:21:17 They're really, really not.

00:21:18 The one place where it gets really kind of tricky is at the network layer where you're trying to sort of switch to Unicode versus bytes and strings and all that.

00:21:28 But other than that boundary, it's really not that big of a deal.

00:21:32 I think part of the major challenge for people is we have this huge thing.

00:21:37 It's working.

00:21:38 Please don't touch it.

00:21:39 Yeah.

00:21:41 Yeah, I agree.

00:21:42 The issue that I think we found the most painful was writing binary files out, and we were using byte strings, and we had to convert one way or the other.

00:21:51 And that was a little bit trickier in Python 3 when I wasn't expecting that.

00:21:56 This portion of Talk Python To Me is brought to you by Linode.

00:22:00 Are you looking for bulletproof hosting that's fast, simple, and incredibly affordable?

00:22:04 Look past that bookstore and check out Linode at talkpython.fm/Linode.

00:22:09 That's L-I-N-O-D-E.

00:22:11 Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:22:15 They have 10 data centers across the globe, so no matter where you are, there's a data center near you.

00:22:20 Whether you want to run your Python web app, host a private Git server, or file server, you'll get native SSDs on all the machines,

00:22:28 a newly upgraded 200-gigabit network, 24-7 friendly support even on holidays, and a 7-day money-back guarantee.

00:22:36 Do you need a little help with your infrastructure?

00:22:38 They even offer professional services to help you get started with architecture, migrations, and more.

00:22:44 Get a dedicated server for free for the next four months.

00:22:47 Just visit talkpython.fm/Linode.

00:22:50 So another thing that Brett talked about that was pretty interesting was the mythical Python 4.

00:22:56 Like, will it be a Python 4?

00:22:57 What's going to be in Python 4?

00:22:59 Will it be as painful as 2 to 3?

00:23:01 Yeah, so he had some interesting ideas.

00:23:03 Obviously, it's not going to be any sort of thing like going from Python 2 to Python 3.

00:23:08 But he talked about some things like switching to a tracing garbage collector instead of reference counting.

00:23:14 To help with things like parallelism and stuff.

00:23:17 And this parallelism is another theme that actually came up a lot in the book.

00:23:22 Basically, taking advantage of multi-core processors.

00:23:26 Yeah, there was several people who were bringing up that topic and how Python is usually kind of given a black eye about being too slow in a lot of cases.

00:23:37 When in actuality, if you use it correctly, you can get a lot of speed out of Python.

00:23:42 Or write your stuff in Python and then switch to PyPy or some other type kind of thing like that.

00:23:48 And you can quadruple your output or your speed just by little tiny changes like that.

00:23:54 But yeah, Brett was definitely talking about that.

00:23:58 And I think Barry Warsaw was talking about removing the GIL.

00:24:01 So yeah, there was a lot of different back and forth about how we could make parallelism in Python better.

00:24:07 Yeah, absolutely.

00:24:09 So let's switch on to another one of your interviewees, Steve Holden.

00:24:13 So one of the ideas that I thought was really interesting, and I touched on it recently in another episode,

00:24:21 and I can't remember who I was talking to about it, which is really unfortunate.

00:24:24 But it's the idea that the sort of forward progress and overall maintenance of Python and the ecosystem and whatnot

00:24:33 continues with no professional organizers, right?

00:24:37 Like you've got Microsoft completely controlling something like C#.

00:24:43 And anything that happens, there might be community input, but there's this giant company whose job it is to decide what the next steps are.

00:24:52 Whereas with Python, I guess there's just none of that, right?

00:24:56 There's just us.

00:24:58 Yeah, yeah.

00:24:58 The only thing that's really behind Python is the Python Software Foundation.

00:25:02 And it just kind of guides the community into how things should work.

00:25:08 Yeah, they're more to support things than it is to specify directions, right?

00:25:15 Like the PSF doesn't go, we need these three features and this library upgraded and this thing done for Python 3.7, right?

00:25:22 Yeah.

00:25:22 Yeah, they just provide funding and protect the Python brand.

00:25:26 They don't really say, we need X, Y, and Z.

00:25:29 Exactly.

00:25:30 Yeah, they actually have a, they kind of handle the corporate details and like chasing people down if they mess up with the copyright and funky stuff like that, which is a bit of an odd job.

00:25:42 It struck me as odd when I first heard it, but it's, you know, if someone's got to do it, like they're the people to do it, right?

00:25:47 Yeah, someone's got to do it.

00:25:49 You don't want people using the Python name inappropriately.

00:25:52 Yeah, for sure.

00:25:53 So another thing that Steve Holden talked about was also the mythical Python 4, but he had a different take, which I like this idea in general.

00:26:04 So he said, basically, you hear loose talk of Python 4, but to my mind, Python is now at a stage where it's complex enough.

00:26:12 There's so many languages that just seem to like need another feature every release.

00:26:19 We're going to have four new keywords and you're going to use it in this way.

00:26:22 And it doesn't matter if you really need those keywords.

00:26:24 Like there are language designers whose job it is to design the language.

00:26:27 So when a new version of language comes out, like they have new features, needed or not.

00:26:31 All right.

00:26:32 I'm thinking like JavaScript is a little bit like that.

00:26:34 Maybe C# is definitely like that.

00:26:37 There's a number of languages where there's just this expectation that there's always new stuff.

00:26:42 What do you think about that?

00:26:43 Yeah, I kind of feel like we don't really need anything brand spinky new in Python anymore.

00:26:50 There's some controversy over adding f-strings because we already had two or three ways to do string interpolation already.

00:26:57 I think f-strings are kind of cool, but did I need them to do my job?

00:27:00 No.

00:27:01 So I can see where Steve's coming from with that.

00:27:04 Yeah, I feel the same way, actually.

00:27:05 The one language feature that comes to mind, I'm like, yeah, that really does something different is the async and await keywords.

00:27:13 Yeah, that one is definitely new.

00:27:15 And while, like I said, a little bit painful, especially with the first implementation, it is getting better.

00:27:22 And it definitely does something new and different in the language.

00:27:25 Right, right.

00:27:26 Whereas like the fifth way to format a string is certainly debatable about whether it's needed.

00:27:30 There's not a fifth way to like asynchronously work with I.O.

00:27:33 That is part of the language, right?

00:27:35 Yeah, yeah.

00:27:35 Yeah, yeah.

00:27:36 Obviously libraries.

00:27:37 Yeah.

00:27:38 I kind of wonder sometimes, though, why they didn't continue working on the futures library because it seems to be kind of just kind of died off now.

00:27:45 Oh, yeah.

00:27:45 That's a really good point.

00:27:46 Like maybe put some trial stuff.

00:27:48 Float some trial things.

00:27:50 Maybe even an external package that you can bring in and try and see what sticks.

00:27:54 Yeah, yeah.

00:27:55 That'd be pretty cool.

00:27:56 So another thing that Steve talked about was sort of the excitement of Python being the main programming language for people coming in in education.

00:28:07 And I think this touches back to his previous comment as well, which is like hopefully this will keep Python in a space where it's relatively comprehensible.

00:28:18 And these like easily accessible tools for building rich applications will be available to people for like the next 20 years at least, right?

00:28:25 So like really having a – not losing the ability of people to get into Python easily.

00:28:30 Yeah, I think that's really awesome that Python has gotten a hold in the education sphere so much.

00:28:37 I think I read earlier this year that MIT, all of its intro stuff is in Python now.

00:28:43 Oh, that's sweet.

00:28:44 And I think I was at university, which is where I did some of my studies.

00:28:47 They're starting to use Python now in some of their intro courses.

00:28:49 And I just think it's really cool that it's spreading like that.

00:28:53 People have asked me if they can use my book as kind of a trial run in their classes.

00:28:57 And I'm like, go for it.

00:28:58 See if it works.

00:28:59 If it doesn't, let me know.

00:29:00 So it's just really cool what's going on with Python in education.

00:29:04 Yeah, and I think – absolutely agree.

00:29:06 And I think part of what he was touching on, you know, I called out JavaScript in particular earlier about gaining all this complexity.

00:29:14 Like before Node.js, JavaScript was this incredibly easy place to get started.

00:29:20 Like maybe you'd go crazy and throw in some jQuery or something.

00:29:23 But you write a few functions.

00:29:24 You do some stuff.

00:29:25 And now, you know, you're requiring this.

00:29:29 You're injecting that.

00:29:30 You're transcompiling that other thing.

00:29:32 It's just like, whoa, this is like not the same space.

00:29:35 It's quite complex.

00:29:36 In a couple years.

00:29:38 Yeah, JavaScript is kind of mind-bending right now with which products do you need to know to actually produce a website that's, you know, cool and useful that isn't full of a bunch of buzzwords and broken pieces in a year or two.

00:29:54 Yeah, it just seems like this went so far off the deep end of going, oh, we're going to do all these things and bring all this stuff in.

00:30:00 And there's also not consistently one way to do things.

00:30:03 It's just, it just seems unnecessarily complicated.

00:30:07 Like I think one of the powers of Python is it starts super easy.

00:30:10 You can have a really complicated, complex architecture, but it's not required.

00:30:15 You know, where it almost is these days to use a lot of the web stuff.

00:30:19 Yeah, Python is definitely has a nice easy learning curve until you hit some of the more advanced topics.

00:30:24 Yeah.

00:30:24 Which is what you'd expect.

00:30:26 It's ideal, yeah.

00:30:27 So let's move on to another interviewee, Carol Willing.

00:30:32 So she ran the PSF for a while and she's done a bunch of cool stuff.

00:30:36 And I think the first thing that I noticed from your conversation with her was the concept of Python as a mosaic.

00:30:42 And this was really laid out super clearly by Jake Vander Plaas at PyCon 2017 at his keynote.

00:30:49 Where it's just these people are coming from all these different disciplines.

00:30:53 And you touched on this as well at the beginning.

00:30:55 That like all these different ways and types of programming and areas of programming are coming into Python.

00:31:02 And probably making it stronger for giving it these different perspectives.

00:31:06 Yeah, I've noticed, especially like I said at the last PyCon, you had data scientists, astrophysicists.

00:31:12 People, they had a course for middle school and teenagers to learn Python at PyCon.

00:31:19 And then, of course, you had the people like Glyph who does Twisted.

00:31:24 You have all these asynchronous people and people from Instagram and the business side.

00:31:28 And it's like, wow, you have all these disciplines.

00:31:31 And they're all using the same fun language to do really cool things.

00:31:34 Right, exactly.

00:31:35 You had Instagram talking about how they were running their whole thing on Python.

00:31:39 But you also had Jake Vander Plaas going, these three major telescopes that are being launched in the next couple years.

00:31:45 Here's their API.

00:31:47 It's in Python, right?

00:31:48 It's just like the juxtaposition.

00:31:51 It's amazing.

00:31:51 You can go read their code.

00:31:53 Exactly.

00:31:54 Yeah, it's really cool.

00:31:55 And you're just touching on astronomy for a minute.

00:31:57 Like what's really cool is they had another language.

00:32:00 It's still around, I'm sure, for astrophysics called IDL, I believe.

00:32:04 And that was a commercial language.

00:32:08 You wouldn't even compile your code.

00:32:09 You pay money to get the compiler and the license just to work on that.

00:32:14 And here you have, oh, yeah.

00:32:16 Now we're just going to put it on GitHub.

00:32:17 And it runs on Python.

00:32:18 And now we're talking to space.

00:32:20 Pretty cool.

00:32:21 Yeah, I think a lot of the data scientists are getting away from that because they have Mathematica and some of those other math languages of sorts.

00:32:29 And they have to pay big, big bucks to do their job.

00:32:36 And now they can use open source and share it with the world.

00:32:38 Yeah, it's super amazing.

00:32:39 Like I came from a math background.

00:32:41 I've worked at this company where we had to do wavelet decomposition of like time series stuff.

00:32:48 And that originally was in MATLAB.

00:32:50 And we were converting it over to a proper programming language.

00:32:53 But just to get the little extension to MATLAB so that we could do that, I believe, was $2,000 a person.

00:33:00 Just for the extension for the wavelet deco.

00:33:02 Not the whole thing.

00:33:03 Just that little bit, right?

00:33:05 It's like, wow.

00:33:05 That is intense.

00:33:07 Yeah, we have some tools in the agriculture field that are very similar to that where you have to spend a lot of money to compile from one language to another language or do exactly what you just said because we also use MATLAB as well.

00:33:21 Yeah.

00:33:21 Yeah, but we have things like SageMath, Jupyter.

00:33:25 There's a lot of stuff that's coming along to disrupt that.

00:33:28 I think those days are somewhat numbered except for maybe really niche stuff, which probably is for the better.

00:33:34 Yeah, totally.

00:33:36 So another thing that Carol touched on I thought was cool is what I'm going to call sort of Python for all.

00:33:41 So she has a data science background and does a lot of stuff with Jupyter.

00:33:47 And so she talked about the rise of Python in education, but also the rise of Chromebooks in education where you can't really install anything on your Chromebook.

00:33:59 And so, you know, providing every student some kind of web account into something they can do Python on and give them the same tools and the same experience, which I think is really empowering.

00:34:11 Yeah, I think if we had a couple more places where you could actually do Python in the browser, that would be really, really powerful.

00:34:17 You know, I know that a little bit and it's pretty limited right now.

00:34:22 But I think we're getting there to the point where we could actually start saving the Python scripts to the cloud and running them in the cloud in such a way that the student could learn how to do it.

00:34:32 And that would be really awesome.

00:34:33 I think it is really awesome.

00:34:34 And I think at that level, the notebook type answers are really, really interesting.

00:34:39 So like Azure has, I think, free notebooks.

00:34:42 Google has a notebook solution.

00:34:44 JetBrains just came out with Data Lore.

00:34:46 All these like are hosted online.

00:34:49 You log in, you save your stuff, you know, you run and it runs there.

00:34:54 So those are pretty cool.

00:34:55 Even on the Google one, you could even hit like, you know how you like shift enter in notebooks to run it.

00:35:01 There's like a modifier key to run this cell on a GPU.

00:35:05 Like, and that's it.

00:35:07 You just, you have like a different hot key to run on the GPU.

00:35:10 I mean, it's like, wow, that's quite different than.

00:35:14 Yeah, I hadn't even heard of that.

00:35:16 Yeah, yeah, yeah.

00:35:16 So I covered it on Python Bytes a little while ago.

00:35:18 I can't remember the name.

00:35:20 I'll try to put it in the show notes.

00:35:21 But yeah, there's, so I think some of these things are coming along.

00:35:24 You have Python anywhere?

00:35:25 Python everywhere.

00:35:26 Sorry, guys.

00:35:27 It's actually, if you go to python.org.

00:35:29 I didn't realize this for the longest time.

00:35:31 If you go to python.org, there's those little screenshots of text.

00:35:34 And there's a little like prompt looking button.

00:35:37 If you press that, it'll actually open up a remote terminal, Python anywhere.

00:35:41 And you just start typing.

00:35:42 I knew it had a terminal, but I didn't realize Python everywhere was underneath it.

00:35:46 Yeah, yeah, yeah.

00:35:46 So pretty, pretty.

00:35:47 That's awesome.

00:35:48 Yeah, it's pretty cool, right?

00:35:49 But I think we need to be aware that so much of education at the lower levels is running

00:35:54 on Chromebooks.

00:35:55 And you can't pip install anything on the Chromebooks, right?

00:35:58 You don't get a terminal.

00:35:59 You get basically flavors of Chrome.

00:36:02 So having a really good way to bring people on there is quite cool.

00:36:07 So, you know, another thing that comes to mind is Anvil.

00:36:10 Anvil.works.

00:36:11 They basically let you create web apps and the whole IDE is in the browser.

00:36:15 So you can pretty much do that from Chromebooks as well.

00:36:17 It's kind of cool.

00:36:18 That is really neat.

00:36:19 So another thing that Carol touched on was the community.

00:36:22 And so did Brev.

00:36:23 It was basically, I came for the language.

00:36:24 I stayed for the community.

00:36:26 I think that's one of Python's superpowers.

00:36:28 How about you?

00:36:29 Oh, yeah.

00:36:30 That's definitely what kept me going with Python is, you know, I have questions.

00:36:34 I go ask and I ask them.

00:36:36 And you don't usually get into a flame war.

00:36:38 You usually get people saying, hey, this is how you do it.

00:36:41 Or ask the question better.

00:36:43 They're not like, that's a dumb question.

00:36:46 It's actual real answers the time.

00:36:48 And I really appreciate that they're so helpful.

00:36:52 And they'll sometimes even give you some sample code to point you in the right direction.

00:36:55 Yeah, that's really cool.

00:36:56 Also, I think, you know, you go to the Python conferences and they just feel different than like a standard tech conference.

00:37:04 They feel, I don't know, more representative of the general population.

00:37:07 People seem quite open.

00:37:10 And, you know, just the whole community seems to really carefully nurture that aspect more than other communities I've been part of.

00:37:17 Well, what I really liked about it is that you'll sit down at a table with a bunch of strangers and you'll be surrounded by people who are just starting Python or people who are like working for major companies.

00:37:29 Like I sat at a table with Apple and Pixar and major school, university.

00:37:35 And I'm like, wow, I wasn't expecting to sit with these kind of people today.

00:37:38 Yeah.

00:37:38 You know, they're all friendly.

00:37:41 Yeah, it's really, really cool.

00:37:42 Definitely.

00:37:43 So opposite of superpowers, maybe one of Python's weaknesses.

00:37:47 And I've been on a bit of a rant about this as well lately.

00:37:50 But Carol talks about, you know, we need a better story for mobile.

00:37:54 And I'll throw desktop development in there as well.

00:37:58 There's Kivi, which does let you create apps, but it's not the same experience as, you know, storyboards and Xcode stuff or, you know, IDE for Kotlin for Android, things like that.

00:38:12 Yeah, Python really doesn't have much besides Kivi.

00:38:14 And I think Toga is the other one that I've heard about, but haven't actually tried.

00:38:18 But yeah, there's basically nothing besides those two and maybe some like underlying libraries that Kivi relies upon.

00:38:27 And it would be awesome.

00:38:29 Does that shock you a little bit?

00:38:30 Yeah, it does.

00:38:31 And it kind of bugs me that that happened.

00:38:33 And I think Alex Martelli said that Guaido had tried to talk to the people at Google when he was working there to get them to include Python.

00:38:42 Right, right, right.

00:38:43 And Andy Rubin, yeah.

00:38:44 And the guy was like, we don't need more than one language for Android.

00:38:47 Java's amazing, so we'll do that.

00:38:49 And I'm just so disappointed that Google decided to do that, you know.

00:38:52 Yeah, that's really, it really is unfortunate.

00:38:55 Anyway, it just seems strange to me that there's such a hot development space and there's just not really an answer for it.

00:39:04 And I think it's a couple of things.

00:39:07 I think it's a little bit of the myth of boiling the frog slowly in the hot water type of thing in that.

00:39:14 Like it's even hard to just take your Python application and give it to anybody like say on Linux or Windows or whatever and go here, double click this.

00:39:24 Right, that's not an easy thing in Python.

00:39:27 And it should be, right?

00:39:29 So if it's hard to even like move your code from one place to another, like to package it and compile it for another platform, it's just like, well, we haven't solved this like first step.

00:39:38 So we're not going to go on the, you know, one mile journey to get to mobile.

00:39:43 Yeah, that's something, and then we didn't really talk about it during the interview process, but that's something I think would be awesome in Python for is let's have that built into the library so we can actually export the application to any XE or Linux tarball or whatever you need to install on Linux, you know, because every flavor of Linux is different.

00:40:02 That would be a game changer if you could just go Python space, you know, --build this folder with this entry point, and then you get a thing that you hand out and there's no dependency on Python, there's no dependency on the libraries, it's just packaged up, and it's ready to go.

00:40:17 Like, I know there's PyInstaller and certain things, but there's just all those things feel 85, 90% done, but then there's this weird glitch on this one framework or on this one platform.

00:40:27 You're like, why does this come on Windows show when I say no console?

00:40:31 Like, it's just, you know, just stuff like that makes me crazy.

00:40:34 Yeah, those things are pretty aggravating.

00:40:36 I think the Windows executables that they create are probably better than, I've had better luck with that than I've had with any of the other platforms so far.

00:40:45 But it's just, it seems so fundamental that, like, I want to build a program and give it to someone else.

00:40:51 Like, why is that not one of the first things that is, like, super focused on, I want to build a program and distribute it, right?

00:40:59 I know, it bugs the heck out of me when I first started learning Python was, how do I do this?

00:41:04 And it took a while.

00:41:06 It took a lot of trial and error to get it right.

00:41:07 Right, and you can't do it.

00:41:08 I mean, it has just lots of sharp edges, though.

00:41:11 So, yeah, if I can put in a vote for what is a major feature in the next version of Python, whether that's 4 or 3.8 or 3.9 or whatever, like, make this packaging thing just absolutely a non-issue.

00:41:25 A binary comes out, you hand it off, it runs and all the, you know.

00:41:29 Maybe you've got to build up each platform.

00:41:30 I don't care.

00:41:31 That's fine.

00:41:32 But something you can send out, right?

00:41:34 Yeah, I totally agree with that.

00:41:36 That would be wonderful.

00:41:37 All right, two votes.

00:41:38 I'm sure it's going to happen now.

00:41:40 Fingers crossed, anyway.

00:41:41 So, you already spoke about Glyph.

00:41:45 Let's talk about Glyph Alipowitz.

00:41:47 So, one of the things he talked about, and this was also touched on by Guido in the PyCascades keynote, which was in this past January, the transition of Python 2 to Python 3 as it was sort of managed by the core developers and the PSF and just generally.

00:42:08 And I think the main takeaway was they didn't realize how popular the thing they had created was and how much code was already in place.

00:42:18 So, basically, how much would have to be migrated?

00:42:20 Yeah, there's a lot of legacy Python 2 code.

00:42:23 I've been doing Python since, like, 2.4, I think.

00:42:27 And Python 3 came out, like, two or three years after I started doing Python.

00:42:32 And I've never worked in my 12 years of doing Python in a company that actually uses Python 3 regularly.

00:42:38 Everything uses Python 2.

00:42:39 So, what do you think about the 2020 end-of-life date?

00:42:43 Do you think that's going to make a big difference for you guys?

00:42:45 If I'm still at my company, I'm going to make sure we're already on 3.

00:42:48 But there are a lot of companies where I can see where they're like, it's going to cost a lot of money.

00:42:53 And we're just going to keep running this code until we have to for security reasons or some other monetary reason for change.

00:43:00 I wonder how well-managed that's going to be versus how, like, headline-driven it's going to be.

00:43:06 So, for example, I think the biggest distributed denial-of-service attack that's ever been launched was because a bunch of Memcached servers were left on the internet unprotected.

00:43:20 And they had this, like, vulnerability where you could send one UDB packet at it.

00:43:25 And it would basically dump the memory contents at, like, an address you pointed at.

00:43:30 So, you could get, like, a 50,000 multiplier of, like, your bandwidth against, you know, there's just, like, thousands of these on the internet that somebody pointed at GitHub and went after.

00:43:39 Somehow GitHub survived, actually.

00:43:41 But anyway, if there's something like that and you're like, oh, you just do this to all the Python 2 things running and you own it.

00:43:48 Or, you know, you look at Equifax or something like that, right?

00:43:51 One of these really bad sort of headline-driven things.

00:43:54 I mean, that would possibly get people's attention above the developer level.

00:43:58 Yeah, I think that's what's going to be, you know, unless they can just, like, kind of sneak it in.

00:44:03 A lot of developers are going to be stuck with Python 2 for a long time.

00:44:08 And, you know, it's a good language, but they really need to move to Python 3 if they can.

00:44:12 Yeah, absolutely.

00:44:13 And increasingly, there's a lot of things that are inaccessible to Python 2 developers.

00:44:19 You know, API Star, Django 2.

00:44:21 There's just a bunch of things that are coming along that are only Python 3, which is an interesting twist because the story is to be told exactly in reverse why you stay on Python 2.

00:44:30 Yeah, we're finally at the point where Python 3 is getting all tools and all the tooling, and it's not always getting backboarded to 2.7.

00:44:37 So, you know, if you want to use the new cool stuff that the cool kids are using, you've got to go to Python 3 right now.

00:44:44 Yeah, for sure.

00:44:46 So, another thing that Glyph touched on was a little bit of a similar idea that you and I were just talking about with packaging.

00:44:53 And said, like, one of his main thoughts of where he thinks Python should go is to make pip, to get away from using pip as a tool for installing apps for users.

00:45:04 And also touched on just the GUI, like, there's not really any built-in way to create a Python GUI, be it mobile or be it desktop.

00:45:12 So, I don't know what else to add to that, but we've kind of, you know, just one more voice.

00:45:17 Maybe he's a third vote for us in this packaging story.

00:45:21 Yeah, TK Enter is still kind of ugly, but I will say it has gotten a lot better than it was when I first started using it.

00:45:28 Yeah, I've definitely seen a few examples recently, like, oh, that's actually not as bad as I remember it.

00:45:33 But it doesn't feel like, wow, this is an amazing UI framework that I just can't wait to build my apps on.

00:45:39 It seems like, well, it's not as, I guess I could live with that.

00:45:42 And that's probably not where you want it to be.

00:45:44 What's funny is they added a new library called TTK to it.

00:45:47 And there was, like, no advertising, no nothing.

00:45:50 So, I didn't even know it improved a lot.

00:45:52 Yeah, I didn't either.

00:45:53 And I don't think a lot of people realized that.

00:45:55 Yeah, the only way I found out was I complained about it.

00:45:57 And somebody said, hey, I made some pretty good-looking apps with it and sent me some GitHub repos.

00:46:01 I'm like, those are good-looking apps, really?

00:46:02 Oh, interesting.

00:46:03 Another person you spoke to was Doug Hellman, who does the Python module of the week.

00:46:11 And he's been doing that for 10 years.

00:46:14 That's a pretty interesting series.

00:46:15 His website is pretty good.

00:46:17 I used to use it a lot for when I needed to look up something.

00:46:20 Yep, it's definitely, definitely cool.

00:46:22 So, you know, another thing, Doug mostly works on cloud and OpenStack and things like that.

00:46:27 But, you know, just keeping with this theme, like, the main takeaway from your interview with him was that we need better packaging.

00:46:34 Right?

00:46:35 We still need another way.

00:46:36 But his take was that this is not directly related to Python itself, but it'll get into all the tools, like set of tools, Twine, Wheel, Pip, Warehouse, and so on.

00:46:45 Yeah, it would be really nice if we had a common base framework to just make all those tools work the same way.

00:46:54 And we'd have a unified way of distributing and packaging our applications.

00:46:59 Yeah, definitely.

00:47:00 I could go, we could have an entire show on that.

00:47:03 But, I don't know.

00:47:04 I don't, I don't really like to complain without providing the answer.

00:47:09 Like, at least a suggested, like, this is bad.

00:47:12 Here's a possible solution.

00:47:14 But, yeah, I think this, the packaging thing would really make a huge, huge difference.

00:47:18 I was just going to say, I keep hearing good things about Briefcase, but I've not used it myself.

00:47:23 So, that's something people could look at, I guess, or at least contribute to if they thought that would be helpful.

00:47:28 Yeah, absolutely.

00:47:29 I just, you know, it seems like something built in that you just know you have and it just works.

00:47:36 I don't know.

00:47:37 We need some advocates and the core developers to do that.

00:47:39 Well, and that's why I said it's kind of like a boiling the frog problem.

00:47:43 Like, as, by the time you get into, where, like, you're in a position you could make these kinds of changes, I feel a lot of people are like, well, we're kind of good enough.

00:47:52 I've got a requirements.txt or, hey, didn't we just create pip file?

00:47:55 Like, didn't that solve?

00:47:56 I feel like the pain, by the time you get far enough into it, the pain is not high enough anymore.

00:48:01 But if you go and you, like, teach a little one-week workshop at a high school and the kids say, well, how do I share this with my friends?

00:48:10 Well, you can't share this with your friends.

00:48:12 I'm sorry.

00:48:12 Like, I mean, that's almost the answer.

00:48:14 Not quite.

00:48:15 But can you tell your friend to go, like, download Python from python.org, change the path, pip install the stuff, and then run?

00:48:23 Like, that is a large step if that's, like, a 12-year-old kid, right?

00:48:26 Yeah.

00:48:27 And that just seems not amazing.

00:48:29 Okay.

00:48:30 So let's speak about amazing stuff, though.

00:48:32 Another person that you interviewed that had tons of interesting things to say was Alex Martelli.

00:48:37 Yeah.

00:48:38 Alex was awesome.

00:48:39 Yeah.

00:48:39 He really mentioned the Stack Overflow thing that talked about Python's incredible growth.

00:48:46 He said, the forecast is that Python will become the most popular programming language and one of the most active, with one of the most active developer groups behind it by early 2019.

00:48:57 That's pretty awesome.

00:48:59 Yeah.

00:48:59 I've been amazed just looking at the statistics about Python over the last, like, two or three years and how it keeps skyrocketing higher and higher.

00:49:06 And, you know, that brings back the data science part.

00:49:09 I think that is driving a lot of that interest is we have a really big chunk of that now.

00:49:15 And if everyone wanted to do machine learning and AI and neural networks, it just, use Python.

00:49:23 It's easy.

00:49:23 And when you need to speed it up, you can drop back down to, you know, a low-level language.

00:49:28 Or Cython or PyPy or something like that.

00:49:30 So one of the things that I haven't heard talked about, I haven't talked about it before, but if you look at that Stack Overflow article, the incredible growth of Python, they have some really cool graphs, right?

00:49:43 And they show Python sort of just eclipsing Java and JavaScript.

00:49:48 But then the predicted growth, like, the derivative is obviously much higher, right?

00:49:52 But the other thing that I haven't heard anyone talk about is if you look at the Java curve and the JavaScript curve, they have huge, like, bi-yearly humps that are, like, many percent.

00:50:06 And what I think those mean are those are the people taking the class at that time.

00:50:13 So they go and they do a bunch of interaction with Java or JavaScript.

00:50:16 And then their semester ends and it drops back down and then it humps back up.

00:50:20 And you see these humps, like, twice a year every year.

00:50:23 You don't see that in Python.

00:50:25 Isn't that interesting?

00:50:26 I mean, it accounts for, like, 5% or 10% of the traffic.

00:50:29 And you look at Python.

00:50:31 Python is a smooth curve.

00:50:33 And it seems to me like people are made to take some of these courses voluntarily and voluntarily.

00:50:38 They are part of their schooling.

00:50:39 Whereas Python doesn't have these humps, which I think means, like, it's more genuinely adopted.

00:50:46 I don't know.

00:50:47 I may be reading too much into it.

00:50:48 But I thought that was a pretty interesting thing.

00:50:50 I could totally see that.

00:50:51 I mean, once you've used Python, why would I use another language unless I have to?

00:50:56 Okay.

00:50:56 So let's see.

00:50:58 I think one of the things you're kind of getting short on time here.

00:51:02 But one of the things I want to talk about that Alex focused on was what I'm going to classify as Python as a competitive advantage.

00:51:11 I guess there's a couple of things.

00:51:13 He said he ends up talking to these big internet companies.

00:51:16 And they seem to use Java or some other core language, Go maybe, I don't know, as their main language.

00:51:23 But they're acquiring these other companies, right?

00:51:26 Like, they're buying these little startups that are, you know, getting ahead and creating amazing things.

00:51:32 He said a lot of them are buying these Python-based startups.

00:51:35 And that's coming back in.

00:51:37 And they're having to sort of absorb Python into them.

00:51:40 But he said what's really interesting about that is an example with, say, YouTube.

00:51:46 So before I read your book, I didn't know there was a thing called Google Video.

00:51:50 Had you heard of that before?

00:51:51 Yeah, I actually had.

00:51:52 I used it briefly.

00:51:54 Yeah.

00:51:54 So Google Video was this thing that was a YouTube competitor or something to that effect, right?

00:52:00 And Alex was at Google at the time.

00:52:03 I think he still is.

00:52:04 Anyway, he said Google Video kept losing the feature battle to this tiny startup just a few miles away.

00:52:11 Each time this little startup unveiled a new successful feature that the customers liked a lot, our engineers would scramble to pick up something similar in a few months, right?

00:52:21 And they said they were basically amazed that these 20 guys were outclassing hundreds of engineers at Google.

00:52:26 And, of course, he said, well, the reason they were so productive was they were using Python and Google Video was using C++.

00:52:33 And that's the thing that became YouTube.

00:52:36 I've been trying to advocate in my current job that we might not be able to use Python in the embedded application side.

00:52:41 But we could do so much prototyping and other things with Python to help us figure out what works and what doesn't work before we go to the embedded side.

00:52:50 We could be so much more productive.

00:52:52 We have so many more new features or products.

00:52:54 And it's just a slow uphill battle when you have a lot of C++ people there.

00:52:59 Well, and the people writing the embedded code are probably, you know, they've probably been doing C++ for many, many years.

00:53:05 And, like, why would they change?

00:53:06 Et cetera, et cetera, right?

00:53:07 Yeah.

00:53:08 Have you guys looked at MicroPython?

00:53:09 Is that relevant to you?

00:53:11 I don't know.

00:53:11 It might be relevant to module side.

00:53:14 I don't think it would be for our actual main bread and butter display because that thing has to run really, really fast with the number of operations it works with.

00:53:23 Okay.

00:53:24 Interesting.

00:53:24 All right.

00:53:25 I think there's still so many more things we could cover.

00:53:28 I'm going to do one more, which I think is a really interesting and positive way to leave it.

00:53:33 So you also interviewed Barry Warsaw, who's been around the Python space for a long time.

00:53:38 And one of the things that he talked about was Python's strength.

00:53:41 And he said, I think one of the real strengths of Python as a language is that it scales.

00:53:48 And he's not talking about, like, well, on this Linux server and I add this many requests to it, it gets, like, this sort of scale curve or whatever.

00:53:56 He says, I'm talking about the human scale.

00:54:00 So, for example, you can have one person write a little script on their laptop and solve a problem.

00:54:04 And Python's good for that.

00:54:05 You can have a little startup or an open source project with 10 to 15 people working on it, and that's great.

00:54:11 And you can have hundreds of people working on large projects, and it's still great.

00:54:15 And it's sort of this idea of the elasticity of the architecture needed to build Python apps, right?

00:54:21 They can start really small, but they can stretch without breaking the language to things like YouTube.

00:54:26 Yeah.

00:54:27 That's something I've always liked about Python is you can start small and keep adding more and more to it.

00:54:34 And while there's a little bit of hesitancy on my part for the new typing module, I can see that that would be really helpful for people who are used to statically typed languages and how that might help them get into the Python sphere and, you know, get used to the language quickly.

00:54:51 We just have to be careful that they don't bring too many of their idioms into the Python part.

00:54:56 Yeah, it's going to be an interesting marriage.

00:54:58 You know, the more I play with the type annotation stuff, the more I like it.

00:55:02 But I find I don't cover everything with it.

00:55:04 I cover just like a certain few functions, and then the types sort of flow to the rest of it.

00:55:10 And I'm pretty positive on it these days.

00:55:13 Yeah.

00:55:13 I think it has some downs.

00:55:14 But yeah, I agree.

00:55:15 Yeah, for sure.

00:55:16 So I guess we'll leave it there.

00:55:18 You know, I found your book to be really interesting.

00:55:20 There's a lot of folks we didn't get to cover, and there's just a bunch of little insights like this.

00:55:26 So hopefully people will check it out.

00:55:28 Where can they find your book?

00:55:29 It's on the PAC site, I'm sure.

00:55:30 It's on Amazon, things like that.

00:55:32 Yeah, it's on PAC publishing.

00:55:33 And yeah, and then Amazon.

00:55:35 Yep, yep.

00:55:36 All right.

00:55:36 So well done.

00:55:37 I thought it was a good book, and I definitely enjoyed the insights that you got out of it.

00:55:41 Well, thank you.

00:55:42 I'm glad you enjoyed it.

00:55:43 Yeah.

00:55:43 How long it takes to write?

00:55:44 I did the interviews over about nine months, and then you had to do editing after that.

00:55:49 So we'll call it around 12, just to kind of even it out, even though it didn't really take quite 12.

00:55:55 It's a pretty serious project, though.

00:55:57 It took some time.

00:55:58 Yeah, it took a long time.

00:55:59 Yeah, cool.

00:56:00 Well, hopefully you're proud of it.

00:56:02 I think it came out good.

00:56:03 Thank you.

00:56:03 Yeah, you're welcome.

00:56:04 I think we have time for the final two questions.

00:56:07 So if you're going to write some Python code, what editor do you open up?

00:56:11 I usually use Wingware's IDE.

00:56:13 I prefer that, because I found the debugger to be the most useful for live debugging.

00:56:19 But I also use PyCharm, because we have to use it at work for the automated test stuff.

00:56:25 And I can see why people like it.

00:56:26 So I'm a little torn at this point.

00:56:29 Which is my favorite.

00:56:30 Do you want some kind of offspring of the two?

00:56:33 Yeah, pretty much.

00:56:34 Yeah.

00:56:34 Someday.

00:56:36 Who knows?

00:56:36 Very cool.

00:56:37 Yeah, I definitely am a fan of those as well.

00:56:40 And then notable PyPI package or packages.

00:56:44 So for me, I've been using Report Lab a lot because I'm writing a book on it.

00:56:48 But I also used it a lot in my previous job.

00:56:50 And it's just incredible what you can create with Report Lab.

00:56:54 Pretty much any document you see, or even this book, the Python interview book, I could probably

00:56:58 create with Report Lab with a little bit of time.

00:57:01 Because you can just create templates and it'll whip through that and generate whatever you

00:57:05 want.

00:57:06 That's awesome.

00:57:06 Yeah, I'm definitely checking it out.

00:57:08 Yeah, that's cool.

00:57:08 I like WX Python, which I've already mentioned.

00:57:11 It's great for creating UIs across all three major platforms with very little or no changes

00:57:17 across platforms.

00:57:18 I've written a code that works on all three without having to do anything running the code.

00:57:23 I definitely think it has the best overall experience for the cross-platform Python-based apps, right?

00:57:31 It looks like it belongs on those platforms and it feels modern and nice.

00:57:35 Yeah, it works really, really well, in my opinion.

00:57:38 Very cool.

00:57:39 All right, Mike.

00:57:40 Well, thank you so much for taking the time and also for doing all these interviews with

00:57:44 everyone.

00:57:44 It was great to chat with you.

00:57:46 It was good to chat with you, too.

00:57:47 Thanks for having me.

00:57:48 This has been another episode of Talk Python to Me.

00:57:52 Our guest has been Mike Driscoll, and this episode has been brought to you by Linode and

00:57:58 us over at Talk Python Training.

00:57:59 Linode is bulletproof hosting for whatever you're building with Python.

00:58:03 Get four months free at talkpython.fm/Linode.

00:58:08 That's L-I-N-O-D-E.

00:58:09 Want to level up your Python?

00:58:11 If you're just getting started, try my Python jumpstart by building 10 apps or our brand new

00:58:17 100 days of code in Python.

00:58:19 And if you're interested in more than one course, be sure to check out the Everything

00:58:22 bundle.

00:58:22 It's like a subscription that never expires.

00:58:25 Be sure to subscribe to the show.

00:58:27 Open your favorite podcatcher and search for Python.

00:58:29 We should be right at the top.

00:58:30 You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct

00:58:36 RSS feed at /rss on talkpython.fm.

00:58:39 This is your host, Michael Kennedy.

00:58:41 Thanks so much for listening.

00:58:43 I really appreciate it.

00:58:44 Now get out there and write some Python code.

00:58:46 We'll see you next time.

00:58:46 Bye.

00:58:46 Bye.

00:58:46 Bye.

00:58:46 Bye.

00:58:46 Bye.

00:58:47 Bye.

00:58:47 Bye.

00:58:47 Bye.

00:58:47 Bye.

00:58:47 Bye.

00:58:47 Bye.

00:58:47 Bye.

00:58:48 Bye.

00:58:48 Bye.

00:58:48 Bye.

00:58:48 Bye.

00:58:48 Bye.

00:58:49 Bye.

00:58:49 Bye.

00:58:49 Bye.

00:58:49 Bye.

00:58:49 Bye.

00:58:49 Bye.

00:58:49 Bye.

00:58:49 Bye.

00:58:49 Bye.

00:58:50 Bye.

00:58:50 Bye.

00:58:50 Bye.

00:58:50 Bye.

00:58:51 Bye.

00:58:51 Bye.

00:58:51 Bye.

00:58:51 Bye.

00:58:51 Bye.

00:58:51 Bye.

00:58:51 Bye.

00:58:51 Bye.

00:58:51 Bye.

00:58:52 Bye.

00:58:53 Bye.

00:58:53 Bye.

00:58:54 Bye.

00:58:55 Bye.

00:58:55 Bye.

00:58:56 Bye.

00:58:56 Bye.

00:58:56 Bye.

00:58:56 Bye.

00:58:56 Bye.

00:58:57 Bye.

00:58:57 Bye.

00:58:57 Bye.

00:58:57 Bye.

00:58:57 Bye.

00:58:58 Bye.

00:58:59 Bye.

00:58:59 Bye.

00:59:00 Bye.

00:59:01 Bye.

00:59:01 Bye.

00:59:01 Bye.

00:59:01 Bye.

00:59:01 Bye.

00:59:01 Bye.

00:59:02 Bye.

00:59:02 Bye.

00:59:03 Bye.

00:59:03 you you you Thank you.

00:59:06 Thank you.

