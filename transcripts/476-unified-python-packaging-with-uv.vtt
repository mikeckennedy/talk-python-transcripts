WEBVTT

00:00:00.001 --> 00:00:04.840
A couple of weeks ago, Charlie Marsh and the folks at Astral made another big splash with

00:00:04.840 --> 00:00:10.640
a major release of uv called UV, Unified Python Packaging, which has many far-reaching features.

00:00:10.640 --> 00:00:14.920
We had to have Charlie on the show to give us an inside look into this development.

00:00:14.920 --> 00:00:16.400
Let's get to it.

00:00:16.400 --> 00:00:21.160
This is Talk Python to Me, episode 476, recorded September 3rd, 2024.

00:00:21.160 --> 00:00:24.180
Are you ready for your host, please?

00:00:24.180 --> 00:00:27.840
You're listening to Michael Kennedy on Talk Python to Me.

00:00:28.040 --> 00:00:31.520
Live from Portland, Oregon, and this segment was made with Python.

00:00:31.520 --> 00:00:37.600
Welcome to Talk Python to Me, a weekly podcast on Python.

00:00:37.600 --> 00:00:39.820
This is your host, Michael Kennedy.

00:00:39.820 --> 00:00:45.080
Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython,

00:00:45.080 --> 00:00:50.980
both accounts over at fosstodon.org, and keep up with the show and listen to over nine years

00:00:50.980 --> 00:00:53.080
of episodes at talkpython.fm.

00:00:53.080 --> 00:00:57.580
If you want to be part of our live episodes, you can find the live streams over on YouTube,

00:00:57.580 --> 00:01:03.420
subscribe to our YouTube channel over at talkpython.fm/youtube, and get notified about upcoming

00:01:03.420 --> 00:01:03.880
shows.

00:01:04.560 --> 00:01:08.600
This episode is sponsored by Posit Connect from the makers of Shiny.

00:01:08.600 --> 00:01:13.100
Publish, share, and deploy all of your data projects that you're creating using Python.

00:01:13.100 --> 00:01:19.560
Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quattro, Reports, Dashboards, and APIs.

00:01:19.560 --> 00:01:21.960
Posit Connect supports all of them.

00:01:21.960 --> 00:01:27.640
Try Posit Connect for free by going to talkpython.fm/posit, P-O-S-I-T.

00:01:28.280 --> 00:01:32.040
And it's also brought to you by us over at Talk Python Training.

00:01:32.040 --> 00:01:36.660
Did you know that we have over 250 hours of Python courses?

00:01:36.660 --> 00:01:37.840
Yeah, that's right.

00:01:37.840 --> 00:01:40.440
Check them out at talkpython.fm/courses.

00:01:40.440 --> 00:01:43.000
Charlie, welcome back to Talk Python To Me.

00:01:43.000 --> 00:01:43.500
How are you doing?

00:01:43.500 --> 00:01:44.340
I'm good.

00:01:44.340 --> 00:01:45.760
Thanks so much for having me back.

00:01:45.760 --> 00:01:47.120
It's always a pleasure to be on here.

00:01:47.400 --> 00:01:53.220
Well, you are certainly making waves in the Python space these days with all of your projects

00:01:53.220 --> 00:01:54.660
and their fastness.

00:01:54.660 --> 00:01:58.220
I think you're known as the fast Python guy these days.

00:01:58.220 --> 00:01:59.960
Oh, that's not fast enough.

00:01:59.960 --> 00:02:01.640
We got to use something from Astral.

00:02:01.640 --> 00:02:04.520
The fast Python tooling guy, maybe.

00:02:04.520 --> 00:02:04.860
Yeah.

00:02:04.860 --> 00:02:06.060
Yeah, exactly.

00:02:06.060 --> 00:02:06.860
Exactly.

00:02:06.860 --> 00:02:07.980
So interesting.

00:02:07.980 --> 00:02:10.620
You know, we spoke, I think you've been on twice before.

00:02:10.620 --> 00:02:11.100
Is that right?

00:02:11.100 --> 00:02:12.700
We talked about Ruff once.

00:02:12.700 --> 00:02:14.100
Came on once to talk about Ruff.

00:02:14.160 --> 00:02:19.300
And then I came on in March, shortly after we did the first public release of uv.

00:02:19.300 --> 00:02:20.320
Right, right.

00:02:20.320 --> 00:02:24.780
And uv at that time, I'll let you tell people what uv is.

00:02:24.780 --> 00:02:29.160
But for those who know, it was kind of in the, it has pip-like features.

00:02:29.160 --> 00:02:34.600
And now it's got another layer to the onion or another shell to it.

00:02:34.600 --> 00:02:38.700
And that's actually why I invited you back, because there's a lot of interesting things

00:02:38.700 --> 00:02:39.380
to talk about there.

00:02:39.380 --> 00:02:39.640
Yeah.

00:02:39.640 --> 00:02:41.620
Maybe like several more layers too.

00:02:41.620 --> 00:02:42.560
Okay, well.

00:02:42.560 --> 00:02:43.540
All right.

00:02:43.540 --> 00:02:44.480
So let's, yeah.

00:02:44.480 --> 00:02:45.020
Yeah.

00:02:45.020 --> 00:02:46.100
Let's hear about them.

00:02:46.100 --> 00:02:52.520
So first of all, I guess, you know, not everyone, believe it or not, not everyone listened to

00:02:52.520 --> 00:02:54.660
that first Ruff interview.

00:02:54.660 --> 00:02:58.580
Things, Ruff interview and those kinds of things.

00:02:58.580 --> 00:03:04.080
So I suppose maybe quick introductions to you, Astral.

00:03:04.080 --> 00:03:05.420
How'd you get to where you are?

00:03:05.420 --> 00:03:06.780
Yeah, yeah, yeah.

00:03:06.780 --> 00:03:14.980
So I've been working on Python tooling full-time for a little under two years at this point.

00:03:15.760 --> 00:03:20.200
And my journey, I've been writing Python professionally for a long time.

00:03:20.200 --> 00:03:28.620
But my journey with Python tooling started with Ruff, which is a very fast Python linter code formatter

00:03:28.620 --> 00:03:30.440
and code transformation tool.

00:03:30.440 --> 00:03:37.680
And what's the sort of foundational idea of Ruff was, can we make really fast Python tooling?

00:03:37.680 --> 00:03:44.300
And so Ruff is written in Rust, but you don't need to have Rust installed or know anything about Rust to use it.

00:03:44.300 --> 00:03:46.980
You can just install it with pip or with whatever you're using.

00:03:48.160 --> 00:03:55.760
And that whole sort of story for me started from just working with Python a lot and asking if we could build

00:03:55.760 --> 00:04:00.680
sort of different Python tooling by using languages like Rust.

00:04:00.680 --> 00:04:06.660
So, you know, the first version of Ruff was very minimal, but it's grown from then to have, I don't know,

00:04:06.660 --> 00:04:08.840
if something like 800 plus rules.

00:04:08.840 --> 00:04:14.280
If you've used tools like Playgate or PyLint in the past, Ruff can do similar things.

00:04:14.280 --> 00:04:17.200
So discover issues with your code without running it.

00:04:17.200 --> 00:04:19.100
It can also fix them automatically.

00:04:19.100 --> 00:04:25.520
And then if you've used tools like Black in the past for code formatting, Ruff can do a similar thing too,

00:04:25.520 --> 00:04:27.080
where it automatically formats your code.

00:04:27.080 --> 00:04:32.260
So that was how I first got started in Python tooling and also how I first ended up on Talk Python

00:04:32.260 --> 00:04:34.960
was people were very interested in this when it came out.

00:04:34.960 --> 00:04:42.020
And I think it broke a lot of people's minds in the sense that it really changed what was possible.

00:04:42.020 --> 00:04:44.380
You know, maybe an analogy.

00:04:44.380 --> 00:04:51.140
So if you have unit tests, but to run the unit test takes 30 minutes, there's no one who doesn't just want to kill time.

00:04:51.140 --> 00:04:53.200
Who's going to say, I made a small change.

00:04:53.200 --> 00:04:55.660
Well, let me run the test and see how that change did.

00:04:55.660 --> 00:05:03.080
But if the tests run in 50 milliseconds, you could just set up a thing to just run the test every time code changes

00:05:03.080 --> 00:05:05.100
and just have a green, red, white.

00:05:05.420 --> 00:05:09.340
And I feel like Ruff did that for linting and formatting.

00:05:09.340 --> 00:05:14.040
Like for me, for example, I have it just run Ruff on.

00:05:14.040 --> 00:05:17.520
If I use PyCharm, I ask PyCharm to reformat the code.

00:05:17.520 --> 00:05:19.040
It just uses Ruff to do that.

00:05:19.040 --> 00:05:22.980
And you can check the box to just say, run it when I hit save because you won't notice a difference.

00:05:22.980 --> 00:05:23.980
You know what I mean?

00:05:24.320 --> 00:05:24.840
Yeah, yeah.

00:05:24.840 --> 00:05:31.000
I think that's been one of the really interesting things about working on tooling with the focus on performance has been like,

00:05:31.000 --> 00:05:37.120
if you build things that are way, way faster than what currently exists, like not just like a little bit, but like significantly faster.

00:05:37.120 --> 00:05:39.540
The ergonomics of the tool just change a lot.

00:05:39.540 --> 00:05:44.300
So maybe things that you only ran in CI before, you can now run locally.

00:05:44.300 --> 00:05:51.280
And maybe things that you now run locally, you can run on save as opposed to on commit or on explicit command.

00:05:51.280 --> 00:05:55.760
So that's been a big part of what we've seen with Ruff.

00:05:55.760 --> 00:06:03.500
And the other big piece, apart from performance that I think we sort of accidentally made a lot of progress on with Ruff,

00:06:03.500 --> 00:06:08.860
was just trying to make things simpler by bundling more stuff together.

00:06:08.860 --> 00:06:11.180
So Ruff can do like a lot of different things.

00:06:11.180 --> 00:06:17.760
And so you don't need to chain together as many tools to get the kind of setup that you might want to have in your Python projects.

00:06:17.760 --> 00:06:25.820
And so a lot of the things we've built with Ruff and with UV, they've had these kind of dual goals of being much faster,

00:06:25.820 --> 00:06:29.240
hopefully bringing in some interesting new features and functionality,

00:06:29.240 --> 00:06:36.520
but also trying to reduce a little bit of the fragmentation and tooling and make it easier for people,

00:06:36.520 --> 00:06:41.280
especially, you know, for newcomers who are writing Python for the first time to kind of get started.

00:06:41.280 --> 00:06:43.700
And we have, well, you have announcements.

00:06:43.700 --> 00:06:47.680
I have things to discuss with you about them, about making that even easier.

00:06:47.680 --> 00:06:50.860
So that's why some of the big features of UV, right?

00:06:50.860 --> 00:06:52.280
For example, what if I don't have Python?

00:06:52.280 --> 00:06:53.440
Not a problem.

00:06:53.440 --> 00:06:55.980
So that's pretty, that's pretty exciting, I think.

00:06:55.980 --> 00:06:56.360
Yep.

00:06:56.360 --> 00:06:56.900
Yeah.

00:06:56.900 --> 00:06:57.880
And we'll get into that.

00:06:57.880 --> 00:07:01.440
But I do want to just take a, not get too far past it,

00:07:01.440 --> 00:07:04.740
because even though this episode is not about Ruff, two things.

00:07:05.460 --> 00:07:12.640
One, a theme of Astral's is we're going to take some tools or some kind of concept that's been around for a long time,

00:07:12.640 --> 00:07:17.260
redo it in Rust, but also not just, well, we ported over the code,

00:07:17.260 --> 00:07:19.800
but you know, rethink some of the algorithms and some of the assumptions.

00:07:19.800 --> 00:07:25.440
And I think that's also a lot of what makes it faster, like the way uv works with caching and things like that.

00:07:25.440 --> 00:07:25.820
Yep.

00:07:26.080 --> 00:07:30.100
And there's been a lot of excitement and positivity about that.

00:07:30.100 --> 00:07:35.840
But I think there's also been a little suspicion of, wait a minute, if we write this in Rust,

00:07:36.040 --> 00:07:39.580
is it really for Python people, by Python people?

00:07:39.580 --> 00:07:41.220
Like what's, what's your take?

00:07:41.220 --> 00:07:45.160
I don't, I have, I have some thoughts that are, I don't see it as a negative, but I think,

00:07:45.160 --> 00:07:50.300
I think it's interesting just to discuss, you know, where does Rust actually belong here?

00:07:50.680 --> 00:07:50.940
Yeah.

00:07:50.940 --> 00:07:57.160
I mean, I think like the way I view it is that, you know, just like Python itself is,

00:07:57.160 --> 00:08:03.280
is implemented in C, like it makes some sense for like the underlying tooling that people are using

00:08:03.280 --> 00:08:05.080
to be written in a different language.

00:08:05.080 --> 00:08:10.800
If it means that you can ultimately build, you know, tools that are better, you know,

00:08:10.800 --> 00:08:13.200
at least on, on some metrics that people care about.

00:08:13.200 --> 00:08:18.300
So like, for me, I sometimes view what we're doing as, you know, like we put all this investment

00:08:18.300 --> 00:08:19.200
into this tooling.

00:08:19.200 --> 00:08:24.440
We write all this stuff in Rust, which, you know, in theory, incurs some cost for us.

00:08:24.440 --> 00:08:28.080
It's maybe, you know, maybe we move a little bit more slowly, maybe it's harder.

00:08:28.080 --> 00:08:33.560
And in doing so, we kind of like give all these people who are running these commands,

00:08:33.560 --> 00:08:37.060
you know, hundreds of times a day, a big boost in how they work.

00:08:37.060 --> 00:08:41.680
And they can keep writing Python, but have a better and better experience writing Python.

00:08:41.840 --> 00:08:46.700
So, you know, I don't think it actually really says anything personally.

00:08:46.700 --> 00:08:49.860
I don't really think it says anything about Python that we write the tooling in Rust.

00:08:49.860 --> 00:08:54.340
Because, you know, we get, sometimes people will criticize Python for that, but like,

00:08:54.340 --> 00:08:57.100
you know, different languages are useful and good for different things.

00:08:57.100 --> 00:09:00.540
And Python is an incredibly productive language.

00:09:00.540 --> 00:09:02.360
It's like growing more and more every year.

00:09:02.360 --> 00:09:03.680
People love writing it.

00:09:03.680 --> 00:09:08.780
But maybe it's not the best language to write, you know, a super high performance package manager.

00:09:08.780 --> 00:09:09.920
And that's totally fine.

00:09:09.920 --> 00:09:11.200
Because like, we're going to do that.

00:09:11.200 --> 00:09:15.000
And then everyone who's writing Python can benefit from it and can leverage it.

00:09:15.000 --> 00:09:15.940
Yeah.

00:09:15.940 --> 00:09:21.440
I do think that one interesting piece here that I got, you know, we got a lot of skepticism

00:09:21.440 --> 00:09:26.180
around early on was like, you know, how can people in the Python community like contribute

00:09:26.180 --> 00:09:27.620
to this if it's not written in Python?

00:09:27.620 --> 00:09:31.080
You know, how do you like have a sustainable contributor base?

00:09:31.560 --> 00:09:36.600
And the interesting thing for me is like, I actually think we've had a really strong contributor

00:09:36.600 --> 00:09:37.720
base over time.

00:09:37.720 --> 00:09:42.340
Like we have, I don't know, like somewhere between four and 500 contributors total, maybe

00:09:42.340 --> 00:09:42.800
in Ruff.

00:09:42.800 --> 00:09:46.580
You know, most of those are like one or two small, you know, one or two commits, maybe

00:09:46.580 --> 00:09:47.840
just one or two time committers.

00:09:48.520 --> 00:09:52.080
You know, but a lot of people have come to Ruff and said, you know, I want to learn Rust.

00:09:52.080 --> 00:09:53.340
I come from the Python ecosystem.

00:09:53.340 --> 00:09:57.720
There's a part of this that's sort of native to what I know, which is the Python language,

00:09:57.720 --> 00:09:58.580
the Python semantics.

00:09:58.580 --> 00:10:02.300
And it's an entry point for me to learn Rust, you know, from other people who come from Python.

00:10:02.300 --> 00:10:07.780
So, you know, I think there is certainly a cost to engaging and a cost for contributors

00:10:07.780 --> 00:10:10.860
because most, you know, most of our users don't know Rust.

00:10:10.860 --> 00:10:15.700
But I don't think it's as steep as people would expect.

00:10:15.700 --> 00:10:21.240
And I think, you know, over time we have been able to grow a pretty, a pretty healthy contributor

00:10:21.240 --> 00:10:23.560
base, like many people who have never written Rust before.

00:10:23.560 --> 00:10:25.020
Yeah, I agree.

00:10:25.020 --> 00:10:29.220
And I was thinking the same thing that you pointed out that Python itself is written in

00:10:29.220 --> 00:10:29.440
C.

00:10:29.440 --> 00:10:30.080
Yeah.

00:10:30.080 --> 00:10:30.480
Right.

00:10:31.080 --> 00:10:34.960
Generally speaking, of course, there's multiple runtimes and so on and so on.

00:10:34.960 --> 00:10:38.480
But CPython, the one that we generally use is written in C.

00:10:38.480 --> 00:10:43.780
And I mean, I don't see why there should be an allegiance to C over Rust or anything.

00:10:43.780 --> 00:10:49.240
And a lot of the data science tools are written in C or Orttran even, you know, something really

00:10:49.240 --> 00:10:50.200
wild like that.

00:10:50.200 --> 00:10:54.960
And Python is a way to kind of expose them and make them more accessible, more useful, make

00:10:54.960 --> 00:10:58.760
people more productive on top of those, that's that native code.

00:10:58.760 --> 00:10:59.260
Yeah.

00:10:59.380 --> 00:10:59.580
Yeah.

00:10:59.580 --> 00:11:03.640
A third example would be Jupyter, JupyterLab, Jupyter Notebook, all those things.

00:11:03.640 --> 00:11:08.200
When you talk to the contributors of those projects, they're down in TypeScript and JavaScript

00:11:08.200 --> 00:11:09.420
most of their day.

00:11:09.420 --> 00:11:13.180
So the data science folks don't have to write TypeScript and JavaScript.

00:11:13.180 --> 00:11:16.020
They just work in the tooling that's on the front end.

00:11:16.020 --> 00:11:20.400
And so it's, you know, it's kind of like, to me, it's kind of like, let's take one for

00:11:20.400 --> 00:11:20.800
the team.

00:11:20.800 --> 00:11:21.300
Yeah.

00:11:21.300 --> 00:11:22.020
We'll do this.

00:11:22.120 --> 00:11:23.860
So we all benefit, but you don't have to.

00:11:23.860 --> 00:11:24.760
You don't have to do it.

00:11:24.760 --> 00:11:31.980
I actually think it's one of the kind of, one of the real strengths of Python is the interoperability

00:11:31.980 --> 00:11:34.580
around like native code and extension modules.

00:11:34.720 --> 00:11:39.980
It's like a big, it's actually like a big part of Python and it's a big part of why Python

00:11:39.980 --> 00:11:41.380
has succeeded.

00:11:41.380 --> 00:11:45.980
And I think that will actually become more, I mean, this is sort of like going off on a

00:11:45.980 --> 00:11:49.720
tangent a little bit, but I think that will become a bigger and bigger part of like what

00:11:49.720 --> 00:11:53.020
Python looks like and what it looks like to work with Python.

00:11:53.980 --> 00:11:58.380
Because, you know, and I think Rust can actually play an interesting role here because at least

00:11:58.380 --> 00:12:01.480
from my perspective, like I do not have a systems programming background.

00:12:01.480 --> 00:12:05.420
Like I've not, I've definitely not written any C professionally.

00:12:05.420 --> 00:12:13.580
I don't think I've ever really written any C++ and Rust was my first sort of foray into

00:12:13.580 --> 00:12:14.620
that kind of programming.

00:12:14.620 --> 00:12:20.020
And I think at least me, you know, for me personally, I found it much more accessible.

00:12:20.540 --> 00:12:24.580
And so I think Rust and Python actually have this interesting story where Rust to some

00:12:24.580 --> 00:12:29.560
degree is this kind of like superpower, low level layer that you can drop into and then

00:12:29.560 --> 00:12:32.360
expose with a Python CLI for everyone to consume.

00:12:32.360 --> 00:12:37.640
So anyway, my prediction is I think that will only become more and more of a part of what

00:12:37.640 --> 00:12:38.480
Python looks like.

00:12:38.480 --> 00:12:40.520
And that's actually, I think it's actually a good thing.

00:12:40.520 --> 00:12:40.860
Yeah.

00:12:40.860 --> 00:12:41.600
I do too.

00:12:41.600 --> 00:12:42.240
I do too.

00:12:42.240 --> 00:12:47.060
Jake out in the audience, Jake Collahan, who says in another comment, great timing.

00:12:47.060 --> 00:12:49.860
I just released a video on these changes yesterday, so that's awesome.

00:12:50.360 --> 00:12:55.160
But the progress made in Ruff and uv sensor introductions clearly demonstrates that there's

00:12:55.160 --> 00:12:59.000
a strong contributor base, even when it's based on Rust, right?

00:12:59.000 --> 00:12:59.480
Yeah.

00:12:59.480 --> 00:12:59.960
Yeah.

00:12:59.960 --> 00:13:04.560
I'm not trying to dismiss that it's hard to learn Rust because I actually think it is pretty

00:13:04.560 --> 00:13:05.300
hard to learn Rust.

00:13:05.300 --> 00:13:07.200
And I think the learning curve is pretty steep.

00:13:07.200 --> 00:13:10.780
But yeah, I think the thing we found is there are people who are interested and who want to

00:13:10.780 --> 00:13:11.440
do it.

00:13:11.440 --> 00:13:11.880
Sure.

00:13:11.880 --> 00:13:12.400
Sure.

00:13:12.400 --> 00:13:13.200
I agree.

00:13:13.460 --> 00:13:19.620
I think another thing that it shows regardless of Rust or not is if it's your full-time job

00:13:19.620 --> 00:13:25.980
and there's funding and a team rather than part-time work, it can go many times faster

00:13:25.980 --> 00:13:27.980
towards a goal than before.

00:13:27.980 --> 00:13:29.520
I'm sure you've felt that way.

00:13:29.520 --> 00:13:29.960
Yeah.

00:13:29.960 --> 00:13:34.600
I mean, we're in a very unique, I mean, not completely unique, but fairly unique position

00:13:34.600 --> 00:13:39.460
whereby we can fund people full-time to work on this stuff.

00:13:39.460 --> 00:13:45.860
And it's actually just kind of wild to look at how much, not to sort of talk up our own

00:13:45.860 --> 00:13:49.740
work, but just how much you can accomplish in a relatively short period of time with that

00:13:49.740 --> 00:13:54.960
level of when people are kind of unlocked to work in that way and work on those kinds

00:13:54.960 --> 00:13:55.520
of problems.

00:13:56.040 --> 00:14:00.880
So, you know, just thinking it's like the amount of time we've been able to put into

00:14:00.880 --> 00:14:05.080
rough and uv is like sort of hard to fathom for some open source projects.

00:14:05.080 --> 00:14:06.380
It's like, wow, that's incredible.

00:14:06.380 --> 00:14:10.760
You know, but from the perspective of a company, it's actually like quite reasonable.

00:14:10.760 --> 00:14:13.340
And in fact, not even like that much.

00:14:13.340 --> 00:14:17.680
So, you know, I think it's pretty like the leverage that you have with open source, like

00:14:17.680 --> 00:14:23.100
when people are able to invest in it and really focus on it is pretty amazing because, you

00:14:23.100 --> 00:14:25.880
know, we work on these things, we improve these things and they ship out to,

00:14:25.880 --> 00:14:31.060
you know, I don't know, millions of users or whatever it is and really can provide a huge

00:14:31.060 --> 00:14:32.060
boost to the ecosystem.

00:14:32.060 --> 00:14:35.740
So, yeah, I mean, being able to work on this stuff full time, that was actually something

00:14:35.740 --> 00:14:40.400
that I decided pretty early on with rough was the project was growing more and more popular.

00:14:40.400 --> 00:14:45.300
And I was like, I don't know if I can keep up with this if I don't work on it full time.

00:14:45.300 --> 00:14:48.780
And so I'm at least going to see where that where that goes.

00:14:48.780 --> 00:14:51.340
And it's possible, right?

00:14:51.340 --> 00:14:52.360
And here you are.

00:14:52.360 --> 00:14:53.040
I mean, it is.

00:14:53.040 --> 00:14:55.720
But yeah, it's I mean, I just feel like,

00:14:55.720 --> 00:15:00.500
I just have a lot of respect for people who, you know, commit significant amounts of their

00:15:00.500 --> 00:15:03.020
time to open source alongside everything else.

00:15:03.020 --> 00:15:07.620
Because, yeah, it's I mean, it's an amazing thing, but it's also very challenging.

00:15:07.620 --> 00:15:08.980
And it's definitely is.

00:15:08.980 --> 00:15:10.280
It's 24 seven.

00:15:10.280 --> 00:15:17.280
Well, I think it's really positive that there's a group of people putting their full effort into

00:15:17.280 --> 00:15:20.760
especially the uv side of things.

00:15:20.760 --> 00:15:22.920
That's going to that's going to make a dent.

00:15:23.280 --> 00:15:35.640
Yeah, I mean, I think the other thing that's been cool about, you know, building this as a as a company is that we've been able to bring in a lot of people from like outside of Python to come and work on Python tooling.

00:15:36.120 --> 00:15:46.720
And I think that's like a really healthy thing for the ecosystem, because not only are these people, you know, I think, like really talented and really great, but they also bring like very different ideas and experiences.

00:15:46.720 --> 00:15:49.360
And so we have a lot of cross pollination on the team.

00:15:49.420 --> 00:15:58.820
The team's kind of a mix of people who have who fall everywhere on the spectrum of like or axes, I guess, probably not the spectrum of like how much rust experience, how much Python experience they have.

00:15:58.820 --> 00:16:02.840
You know, some of them have mostly worked in like TypeScript and the JavaScript ecosystem.

00:16:02.840 --> 00:16:11.860
So that was sort of an intentional thing for me when thinking about like building a team to work on this stuff was I want to have like some people on the team who are like super deep Python experts.

00:16:11.860 --> 00:16:15.680
And I want to have some people who like bring a totally different perspective to the problems.

00:16:15.680 --> 00:16:21.040
So that's been another like very cool piece of putting together a team to work on this stuff.

00:16:21.300 --> 00:16:22.520
I think that's a great perspective.

00:16:22.520 --> 00:16:31.640
This portion of Talk Python to Me is brought to you by Posit, the makers of Shiny, formerly RStudio and especially Shiny for Python.

00:16:31.640 --> 00:16:33.560
Let me ask you a question.

00:16:33.560 --> 00:16:35.260
Are you building awesome things?

00:16:35.260 --> 00:16:36.320
Of course you are.

00:16:36.320 --> 00:16:37.880
You're a developer or data scientist.

00:16:37.880 --> 00:16:38.800
That's what we do.

00:16:38.800 --> 00:16:40.820
And you should check out Posit Connect.

00:16:40.820 --> 00:16:47.800
Posit Connect is a way for you to publish, share and deploy all the data products that you're building using Python.

00:16:47.800 --> 00:16:51.000
People ask me the same question all the time.

00:16:51.180 --> 00:16:54.160
Michael, I have some cool data science project or notebook that I built.

00:16:54.160 --> 00:16:57.460
How do I share it with my users, stakeholders, teammates?

00:16:57.460 --> 00:17:02.260
Do I need to learn FastAPI or Flask or maybe Vue or React.js?

00:17:02.260 --> 00:17:03.480
Hold on now.

00:17:03.480 --> 00:17:08.280
Those are cool technologies and I'm sure you'd benefit from them, but maybe stay focused on the data project.

00:17:08.280 --> 00:17:10.760
Let Posit Connect handle that side of things.

00:17:10.760 --> 00:17:15.480
With Posit Connect, you can rapidly and securely deploy the things you build in Python.

00:17:15.480 --> 00:17:20.980
Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto, Ports, Dashboards.

00:17:21.060 --> 00:17:21.900
And APIs.

00:17:21.900 --> 00:17:24.220
Posit Connect supports all of them.

00:17:24.220 --> 00:17:30.060
And Posit Connect comes with all the bells and whistles to satisfy IT and other enterprise requirements.

00:17:30.060 --> 00:17:34.440
Make deployment the easiest step in your workflow with Posit Connect.

00:17:34.440 --> 00:17:40.540
For a limited time, you can try Posit Connect for free for three months by going to talkpython.fm/posit.

00:17:40.960 --> 00:17:44.200
That's talkpython.fm/P-O-S-I-T.

00:17:44.200 --> 00:17:46.080
The link is in your podcast player show notes.

00:17:46.080 --> 00:17:49.320
Thank you to the team at Posit for supporting Talk Python.

00:17:51.000 --> 00:17:55.540
One thing before we move on to talk about uv proper, closing the loop here.

00:17:55.540 --> 00:17:58.900
You mentioned those rules, those 800 Lint rules.

00:17:58.900 --> 00:18:04.880
And this resource you have over at docs.astral.sh slash rough slash rules is awesome.

00:18:04.880 --> 00:18:13.220
So even if you don't use rough, you know, you care about say PEP 8 naming or something, you get a warning from Flake8 or whatever.

00:18:13.220 --> 00:18:15.660
And it says Dunder function name.

00:18:15.660 --> 00:18:17.260
Like what is this error, right?

00:18:17.260 --> 00:18:18.240
What is this thing?

00:18:18.440 --> 00:18:22.580
And then you've got each one of these rules has a, what is this?

00:18:22.580 --> 00:18:23.860
Why is it bad?

00:18:23.860 --> 00:18:25.220
How should you change it?

00:18:25.220 --> 00:18:26.260
Here's the bad version.

00:18:26.260 --> 00:18:27.220
Here's the good version.

00:18:27.220 --> 00:18:28.040
And so on.

00:18:28.040 --> 00:18:29.840
And I think this is just a really good resource.

00:18:29.840 --> 00:18:32.200
I know you all put a ton of time and energy into it.

00:18:32.200 --> 00:18:32.700
I appreciate you calling that out.

00:18:32.700 --> 00:18:33.880
Yeah, it takes a lot of time.

00:18:33.880 --> 00:18:38.120
I mean, once you cover all the rules, maintaining it incrementally is slightly easier.

00:18:38.120 --> 00:18:41.160
But, you know, when we started this, we definitely had a few hundred rules.

00:18:41.160 --> 00:18:46.000
And so, you know, it was a lot of contributors who contributed us getting to full coverage here.

00:18:46.540 --> 00:18:50.340
It's almost like the Wikipedia of Lint rules or something.

00:18:50.340 --> 00:18:50.960
How to Python.

00:18:50.960 --> 00:18:51.380
Yeah.

00:18:51.380 --> 00:18:52.540
Yeah.

00:18:52.540 --> 00:18:57.140
I guess maybe one thing I'll say is like, we have a lot of rules, but you don't have to use them all.

00:18:57.140 --> 00:18:59.660
And like the default rule set is actually pretty small.

00:18:59.660 --> 00:19:03.260
So even when I work on projects, I don't necessarily enable all of the rules.

00:19:03.260 --> 00:19:05.080
I typically enable like a couple subsets.

00:19:05.080 --> 00:19:09.540
So I just think sometimes it can be intimidating to imagine 800 rules being applied over your code face.

00:19:09.540 --> 00:19:12.180
So, you know, the default rule set is pretty small.

00:19:12.180 --> 00:19:16.080
It covers things like unused imports, you know, things that are pretty common.

00:19:16.080 --> 00:19:17.980
Pretty common and relatively unobjectionable.

00:19:17.980 --> 00:19:22.460
And then we have all these different categories for ways that you kind of level up the level of coverage.

00:19:22.460 --> 00:19:23.020
Yeah.

00:19:23.020 --> 00:19:30.800
I take pretty much the defaults as well on all my projects, except for wider lines of code, more columns.

00:19:30.800 --> 00:19:31.020
Yeah.

00:19:31.020 --> 00:19:32.180
Yeah.

00:19:32.180 --> 00:19:37.120
On a 32-inch monitor, 80 columns is just down the little corner.

00:19:37.120 --> 00:19:38.880
We actually took that out of the defaults.

00:19:38.880 --> 00:19:39.480
Did you?

00:19:39.480 --> 00:19:40.060
Oh, beautiful.

00:19:40.160 --> 00:19:40.280
Yeah.

00:19:40.280 --> 00:19:45.200
I don't need a rough.toml or whatever it was I was putting in there for a configuration.

00:19:45.200 --> 00:19:45.780
Yeah.

00:19:45.780 --> 00:19:46.620
We got rid of that.

00:19:46.620 --> 00:19:52.260
Because the thinking there is like, if you have long lines, they should generally be handled by a format or not a linter.

00:19:52.260 --> 00:19:54.340
So by default, we don't enforce that.

00:19:54.340 --> 00:19:54.500
Yeah.

00:19:54.500 --> 00:19:55.020
Okay.

00:19:55.020 --> 00:19:55.640
Interesting.

00:19:56.040 --> 00:20:00.600
And then the single quotes versus double quotes, which we discussed on GitHub.

00:20:00.600 --> 00:20:02.300
I remember, I think we talked about it last time.

00:20:02.300 --> 00:20:02.880
Yeah, probably.

00:20:02.880 --> 00:20:03.220
Maybe as well.

00:20:03.220 --> 00:20:04.020
Yeah.

00:20:04.020 --> 00:20:05.940
I talked about that with everyone.

00:20:05.940 --> 00:20:07.500
Yeah.

00:20:07.500 --> 00:20:10.180
And Miguel also agrees here.

00:20:10.180 --> 00:20:10.920
Amazing docs.

00:20:10.920 --> 00:20:11.880
The rules are top notch.

00:20:11.880 --> 00:20:12.480
Nice work.

00:20:12.480 --> 00:20:13.100
I appreciate that.

00:20:13.340 --> 00:20:13.620
Okay.

00:20:13.620 --> 00:20:17.960
So I know we're going to talk to you, V, but Tushar does have a good question out there.

00:20:17.960 --> 00:20:20.520
And I don't know if speak to it or don't speak to it.

00:20:20.520 --> 00:20:24.280
Are there plans for rough to become a PyLance alternative?

00:20:24.280 --> 00:20:27.280
So a language server of some sort.

00:20:27.280 --> 00:20:29.720
Is this anything that you're willing to talk about?

00:20:29.720 --> 00:20:33.940
I would say, I mean, yeah, I think that's like an interesting thing that we'll consider.

00:20:33.940 --> 00:20:40.340
It's not something that we are committed to doing or committed not to doing, like building a language server.

00:20:41.060 --> 00:20:57.800
I would say that's probably like a few steps away from where we are today, because before we would build a language server, we would probably build, you know, something that could something like a type checker, like something that could deal with type inference and like better understand the relationships between different parts of your code.

00:20:57.800 --> 00:21:03.980
I view that as like, it's not strictly a prerequisite to building a language server, but I view that as like a little bit more of a path.

00:21:03.980 --> 00:21:05.700
More mypy.

00:21:05.700 --> 00:21:07.720
Yeah, more mypy.

00:21:07.720 --> 00:21:17.700
I think there's like a lot of interesting stuff around building a, well, first of all, of course, there's like building a type checker, but there's also building what I would call like a type aware linter.

00:21:17.700 --> 00:21:23.160
Like you could imagine that rough itself could actually get a lot more powerful if it could do all sorts of type inference.

00:21:23.160 --> 00:21:32.920
Like we have some rules that are only supposed to activate on dictionaries and we do some sort of bad local type inference and heuristics to figure out if we think a variable is a dictionary.

00:21:33.920 --> 00:21:36.820
Like if you call it on it, it might be a dictionary, right?

00:21:36.820 --> 00:21:41.260
So if we knew there's just a lot of interesting things we could do, we could build a much better tool.

00:21:41.260 --> 00:21:43.520
So it's not just about building a type checker.

00:21:43.520 --> 00:21:47.880
It's also about how can we build a much better linter and sort of like set of tools.

00:21:47.880 --> 00:21:49.880
But yeah, we're thinking about that a lot.

00:21:49.880 --> 00:21:56.060
There's a lot of discussion happening about that, both internally and publicly on the repo and the discord.

00:21:56.480 --> 00:22:00.520
We're thinking a lot about sort of type inference and how to evolve rough in that direction.

00:22:00.520 --> 00:22:03.060
So yeah, language server may be something we can do eventually.

00:22:03.060 --> 00:22:05.260
It's obviously a huge undertaking.

00:22:05.260 --> 00:22:19.140
And we want to make sure that like anything we decide to build, we feel a lot of conviction, you know, that it can be great because it's not, doesn't necessarily make sense for us to try and build something that we think is like 5% better than what's out there.

00:22:19.200 --> 00:22:21.680
It's very hard to get users to switch to something that's 5% better.

00:22:21.680 --> 00:22:26.620
So, you know, when we look at the opportunity set, we're kind of thinking about where can we have a big impact?

00:22:26.620 --> 00:22:29.880
What do users really want, you know, cross-referenced against?

00:22:29.880 --> 00:22:34.320
Where do we think there's opportunity to build something that would be an improvement in ways that users care about?

00:22:34.320 --> 00:22:38.540
So yeah, very interesting, not something we're focused on right now, the language server piece at least.

00:22:38.540 --> 00:22:39.060
Yeah.

00:22:39.060 --> 00:22:41.660
You guys are going to need at least a few weeks to get to that, huh?

00:22:41.660 --> 00:22:43.200
We're going to need a few weeks to get to language server.

00:22:43.200 --> 00:22:45.220
All right.

00:22:45.220 --> 00:22:46.900
I've been out there in the audience.

00:22:46.900 --> 00:22:47.980
It says, excellent tool.

00:22:48.200 --> 00:22:49.620
Ruff and uv have changed my life.

00:22:49.620 --> 00:22:50.840
I've talked about Ruff.

00:22:50.840 --> 00:22:51.540
That's very nice.

00:22:51.540 --> 00:22:52.240
Yeah.

00:22:52.240 --> 00:22:55.240
UV, maybe a quick summary for what it is.

00:22:55.240 --> 00:23:01.280
And then we could talk about your post, which adds layers of features and capabilities as we start.

00:23:01.280 --> 00:23:01.920
Yeah, totally.

00:23:01.920 --> 00:23:08.640
So I came on the show back in March and we talked a bit about what uv was at the time.

00:23:08.640 --> 00:23:10.620
We released uv in like mid-February.

00:23:10.620 --> 00:23:11.880
So that was a couple of weeks after.

00:23:11.880 --> 00:23:15.620
And uv is our Python packaging tool.

00:23:16.200 --> 00:23:24.700
And it's built in, you know, under a lot of the same sort of design goals as we had for Ruff.

00:23:24.700 --> 00:23:27.700
So we wanted it to be extremely fast.

00:23:27.700 --> 00:23:35.840
We wanted it to try and bundle a few more things together so that you could use fewer tools to work with Python and be productive with Python.

00:23:36.240 --> 00:23:38.900
And we wanted it to be really easy to adopt.

00:23:38.900 --> 00:23:41.000
That was another principle that we thought about a lot.

00:23:41.000 --> 00:23:48.420
So when we released uv in February, it was framed as a pip alternative.

00:23:49.080 --> 00:23:59.320
So the idea was if you've used pip before, you know, pip install, pip uninstall, or tools like pip compile or pip sync, it should be really familiar to you.

00:23:59.380 --> 00:24:04.920
So the API that we started with was like uv pip install, uv pip uninstall, uv pip compile.

00:24:04.920 --> 00:24:07.620
And it was meant to kind of mirror the pip API.

00:24:07.880 --> 00:24:14.960
And the idea there was we wanted it to hopefully be immediately obvious to people like how this tool works and what it does.

00:24:14.960 --> 00:24:17.000
And also, I guess, to some degree what it doesn't do.

00:24:17.380 --> 00:24:22.420
So we released that in February and it grew extremely fast.

00:24:22.420 --> 00:24:31.720
It's yeah, it's just the adoption both in terms of like raw numbers and just like the companies that we talk to that are using it like very quickly.

00:24:31.720 --> 00:24:32.820
A lot of people were using it.

00:24:32.820 --> 00:24:35.180
I consider it a big success.

00:24:35.180 --> 00:24:36.400
I'm really happy with how that went.

00:24:36.400 --> 00:24:39.220
But it was also like, I think, a pretty small.

00:24:39.220 --> 00:24:42.900
It was sort of a small portion of like what we wanted to build for packaging.

00:24:42.900 --> 00:24:46.840
You know, ultimately, we weren't trying to build just a faster pip.

00:24:46.840 --> 00:24:52.220
I think that's like a really I think it's a really good starting point for a couple of reasons.

00:24:52.220 --> 00:24:54.280
One, much easier for people to adopt.

00:24:54.280 --> 00:25:01.260
Two, it required us to build a lot of the like fundamental pieces that you need for Python packaging.

00:25:01.260 --> 00:25:10.400
Like in order to build a pip alternative, we had to be able to resolve Python dependencies, like install Python packages, understand virtual environments, right?

00:25:10.400 --> 00:25:11.540
Manipulate all those things.

00:25:11.620 --> 00:25:18.480
We had to implement a bunch of standards around introspecting built distributions and source distributions and virtual environments.

00:25:18.480 --> 00:25:25.340
So we had to invest in all these things that I view as kind of like fundamental primitives of working with Python packaging.

00:25:25.800 --> 00:25:35.800
But the ultimate goal for us was always we want to build something that's, you know, like a single static binary that you download install that just that just gives you everything you need to be productive with Python.

00:25:36.360 --> 00:25:40.080
And from that perspective, like a pip alternative is pretty low level.

00:25:40.080 --> 00:25:53.240
And we wanted to build something that was a little bit more high level, something that can install Python for you, something that can manage the virtual environment for you, something where you just do run this file and it figures out the dependencies, installs them.

00:25:53.240 --> 00:25:55.480
It creates the environments and it runs this file in the environment.

00:25:55.740 --> 00:25:56.820
Like that is what we wanted to build.

00:25:56.820 --> 00:26:00.040
So that's what we've been building up to over the past couple of months.

00:26:00.040 --> 00:26:00.520
Yeah.

00:26:00.520 --> 00:26:01.280
Amazing.

00:26:01.280 --> 00:26:05.600
Of course, you've got to have the uv pip features as a foundation, right?

00:26:05.600 --> 00:26:16.700
Because even if you don't kind of like we talked earlier, even if you don't expose it directly as a CLI thing that from a project management perspective, it's needed, right?

00:26:16.980 --> 00:26:17.220
Yeah.

00:26:17.220 --> 00:26:22.120
And like, it's part of kind of like meeting people where they are to a certain degree.

00:26:22.120 --> 00:26:28.400
Like everyone has workflows that are built around pip, like even people that do other package that have other packaging workflows.

00:26:28.400 --> 00:26:31.400
Often those workflows are actually built around pip commands.

00:26:31.400 --> 00:26:42.640
And like I said, I view those as a little bit low level, like with pip, the operations are kind of like install this package into this environment, as opposed to here are my dependencies, make sure the world is like in sync with my dependencies.

00:26:42.640 --> 00:26:45.040
That's what I would consider to be like a little bit more high level.

00:26:45.600 --> 00:26:49.140
So, you know, we built and released that pip interface in February.

00:26:49.140 --> 00:26:53.260
And since then we've, you know, it's basically been like hammered, right?

00:26:53.260 --> 00:26:54.080
By users.

00:26:54.080 --> 00:26:56.140
So it's just gotten like better and better, right?

00:26:56.140 --> 00:27:00.400
Because they find problems with it and then report them and it just gets, you know, it gets better.

00:27:00.400 --> 00:27:01.120
It gets faster.

00:27:01.120 --> 00:27:02.440
It's like more feature complete.

00:27:02.440 --> 00:27:05.680
So we've had a few months to kind of improve and build on top of it too.

00:27:05.680 --> 00:27:06.080
Yeah.

00:27:06.080 --> 00:27:14.660
That's one of the benefits of such it taking, they can hold so much and people using it so much as they hit the little edge cases all the time.

00:27:14.840 --> 00:27:15.280
Yeah.

00:27:15.280 --> 00:27:16.260
A lot of edge cases.

00:27:16.260 --> 00:27:16.820
It gets smoothed out quick.

00:27:16.820 --> 00:27:18.320
I bet.

00:27:18.320 --> 00:27:18.900
I bet.

00:27:18.900 --> 00:27:19.340
Yeah.

00:27:19.340 --> 00:27:19.460
Yeah.

00:27:19.460 --> 00:27:19.460
Yeah.

00:27:19.460 --> 00:27:19.460
Yeah.

00:27:19.460 --> 00:27:24.620
But it's, it's, it's, yeah, it's super fun, like set of problems to work on by the way.

00:27:24.620 --> 00:27:27.020
And like really different from rough too.

00:27:27.020 --> 00:27:33.040
Like, yeah, rough is rough is more like a, it's more like a compiler.

00:27:33.280 --> 00:27:38.200
I would say like, we have like a parser and a Lexer, you know, all that kind of stuff.

00:27:38.200 --> 00:27:42.200
And with UV, it's a lot more, how do we do IO really fast?

00:27:42.200 --> 00:27:43.440
Like we have a lot of networking.

00:27:43.440 --> 00:27:45.460
We're like reading and writing from disc a lot.

00:27:45.800 --> 00:27:47.760
There's a lot of interfacing with standards.

00:27:48.960 --> 00:27:50.680
A lot of interfacing with the registry.

00:27:50.680 --> 00:27:51.760
Everything's async.

00:27:52.720 --> 00:27:55.020
So it's just like a very different set of problems.

00:27:55.020 --> 00:27:57.660
And it's, it's fun to get to kind of work on both of them.

00:27:57.660 --> 00:27:58.940
Cause you know, they're just really different.

00:27:58.940 --> 00:27:59.400
Yeah.

00:27:59.400 --> 00:28:00.940
I'm sure they're both fun projects.

00:28:00.940 --> 00:28:05.240
And there's some really good ideas and questions in the audience, but we're not ready for them.

00:28:05.240 --> 00:28:16.540
So I think when we spoke back in March, one of the things we discussed is how you structured the CLI API in a way to leave space.

00:28:16.540 --> 00:28:20.220
So for example, it's not uv install package.

00:28:20.220 --> 00:28:22.160
It's uv pip install package.

00:28:22.160 --> 00:28:26.640
And it's not uv compile --update for dependence.

00:28:26.640 --> 00:28:29.120
It's uv pip file or whatever the command is, right?

00:28:29.120 --> 00:28:34.100
I have it alias to a couple of letters and I never think about it again, but something, you know, that's,

00:28:34.520 --> 00:28:37.700
you've left space in the CLI with these sub commands.

00:28:37.700 --> 00:28:41.980
And I think now we're starting to see why you left space.

00:28:41.980 --> 00:28:42.540
Is that right?

00:28:42.540 --> 00:28:42.840
Yeah.

00:28:42.840 --> 00:28:43.420
Yeah.

00:28:43.420 --> 00:28:46.700
That was like pretty controversial at the time and users really hated it.

00:28:46.700 --> 00:28:51.220
I mean, they still used it, but it's so much better.

00:28:51.220 --> 00:28:51.640
I'll use it.

00:28:51.640 --> 00:28:53.140
A lot of people complained about it.

00:28:53.140 --> 00:28:58.860
I even found it, you know, I even found myself saying like, maybe we should, maybe we should stop doing this.

00:28:58.860 --> 00:29:02.980
Like maybe we should just give up because like people, people were complaining and like I was annoyed by it and stuff.

00:29:03.800 --> 00:29:08.260
But yeah, it's either like a huge, obviously like it's either like a terrible mistake or it was genius.

00:29:08.260 --> 00:29:12.880
I don't, I don't actually know, but, but what it did was right.

00:29:12.880 --> 00:29:18.820
Like one effect, which I said before was it immediately conveyed the sort of rough shape of the commands like uv pip install.

00:29:18.820 --> 00:29:23.460
And then if you've used pip install, you know, that the next argument is like a package name or a requirements file.

00:29:24.160 --> 00:29:31.520
But the other thing it did is it left space in the CLI for these new APIs that are sort of first class uv APIs.

00:29:31.840 --> 00:29:42.920
So instead of, yeah, instead of doing uv install, when we released in February, it was uv pip install, which meant that today this new set of APIs that we, that we launched, let's see, two weeks ago, I think today.

00:29:42.920 --> 00:29:44.000
Scroll up.

00:29:44.000 --> 00:29:44.500
Is there a date there?

00:29:44.500 --> 00:29:45.400
August 20th.

00:29:46.980 --> 00:29:53.460
So this new set of APIs that we released are, you know, uv lock, uv sink, uv run.

00:29:53.460 --> 00:29:57.700
They're all, they can all be top level because they're really like the first class uv workflows.

00:29:58.700 --> 00:30:02.300
The pip API, by the way, still a hundred percent there.

00:30:02.300 --> 00:30:06.060
And like, we're going to invest in it a lot and like continue maintaining it.

00:30:06.060 --> 00:30:08.760
Cause like that is how most people use uv.

00:30:08.760 --> 00:30:11.540
And maybe eventually we want that to be less true.

00:30:11.540 --> 00:30:11.720
Right.

00:30:11.720 --> 00:30:12.360
Like, right.

00:30:12.360 --> 00:30:14.360
Like we hope more and more people use the new stuff.

00:30:14.360 --> 00:30:16.400
But like, we're going to keep building that.

00:30:16.400 --> 00:30:24.380
But for, for projects that can, we now have this new interface that if you can fit into it, it's just sort of more powerful and does more for you.

00:30:24.480 --> 00:30:30.900
So we saved space in the CLI exactly for this reason, which is we had a bunch of stuff we knew we wanted to build.

00:30:30.900 --> 00:30:37.260
And if we polluted, well, not polluted, it's the wrong word, but if we polluted, you know, the interface with uv install.

00:30:37.260 --> 00:30:37.780
Clogged.

00:30:37.780 --> 00:30:38.820
If you clogged it.

00:30:38.820 --> 00:30:39.320
Yeah.

00:30:39.320 --> 00:30:39.560
Yeah.

00:30:39.560 --> 00:30:43.100
If we, if we lost all that space to those existing commands, it would make things harder.

00:30:43.100 --> 00:30:45.040
So I think it's worked.

00:30:45.040 --> 00:30:45.800
It's done.

00:30:45.800 --> 00:30:50.120
It's had the intended effect for us of it kept the space open.

00:30:50.120 --> 00:30:51.240
It let people use it.

00:30:51.240 --> 00:30:52.440
It conveyed how it works.

00:30:53.320 --> 00:30:58.520
And now they kind of exist alongside each other and the pip API, you know, you can kind of use them together in certain ways.

00:30:58.520 --> 00:31:02.380
And when you use them together, you sort of realize that the pip API is more low level.

00:31:02.380 --> 00:31:11.840
It's like the new APIs, you know, you have a PI project tomo file with your requirements in it and you just run uv sync and it will resolve them, create a lock file, install them in a virtual environment.

00:31:11.840 --> 00:31:12.760
It's like one command.

00:31:12.760 --> 00:31:15.660
You could then like modify the virtual environment.

00:31:15.660 --> 00:31:19.880
Like you could do like uv pip install, blah, blah, blah, and like start making edits to it.

00:31:19.880 --> 00:31:29.240
But that kind of illustrates what I mean by it's like a low level pip API is where you're kind of manually manipulating things versus these higher level APIs where you, you tell us what your dependencies are.

00:31:29.240 --> 00:31:30.880
And then we figure everything out for you.

00:31:31.120 --> 00:31:31.860
Yeah, that's excellent.

00:31:31.860 --> 00:31:36.860
Just one comment on the, it's too many words or it's too long or whatever.

00:31:37.320 --> 00:31:40.280
Like I hinted at before, I just have aliases for these.

00:31:40.280 --> 00:31:46.480
So for example, I just type PIR and that means uv pip install -r requirements.txt.

00:31:46.480 --> 00:31:51.460
And like, I don't care if it's uv pip that or it's pip install dash, like whatever.

00:31:51.460 --> 00:31:52.600
I don't want to type any of those.

00:31:52.600 --> 00:31:54.840
So it's just three that PIR, let's go, you know?

00:31:54.840 --> 00:31:55.160
Yeah.

00:31:55.160 --> 00:32:00.100
And I've got three or four of those, you know, one to make virtual environments with uv and a couple of things like that.

00:32:00.100 --> 00:32:04.960
And one to compile the changes and, you know, you, you look up for me, I look up the docs.

00:32:04.960 --> 00:32:08.940
I go, okay, well, here's, here's how I'm going to shorten that to something I never think about again.

00:32:08.940 --> 00:32:10.100
So it doesn't matter.

00:32:10.100 --> 00:32:11.140
That's totally fine.

00:32:11.140 --> 00:32:11.440
Right.

00:32:11.440 --> 00:32:12.280
That's totally fine.

00:32:12.280 --> 00:32:16.360
But you do got to consider, I guess, the workflow for new people.

00:32:16.360 --> 00:32:17.040
Yeah.

00:32:17.040 --> 00:32:18.900
Maybe that's a good place to talk about the features here.

00:32:18.900 --> 00:32:22.000
So one of the things that really, there's a lot here.

00:32:22.000 --> 00:32:28.420
One of the things that even though it's number three on the list of four things is the Python command.

00:32:28.420 --> 00:32:33.720
So uv Python install, uv Python list, all of those kinds of things.

00:32:33.720 --> 00:32:38.400
I mean, maybe we should start there because without that, we don't have any Python.

00:32:38.400 --> 00:32:39.300
Although, yeah.

00:32:39.300 --> 00:32:42.940
So that runs sort of implicitly under some circumstances, right?

00:32:42.940 --> 00:32:43.520
Correct.

00:32:43.520 --> 00:32:44.020
Yeah.

00:32:44.020 --> 00:32:44.380
Okay.

00:32:44.380 --> 00:32:50.200
So part of what we wanted to do with this release was make uv sort of self-bootstrapping,

00:32:50.200 --> 00:32:51.920
which sounds complicated.

00:32:51.920 --> 00:32:56.880
But the idea there is if you don't have Python installed, uv doesn't depend on Python.

00:32:56.880 --> 00:32:58.020
It's just a binary.

00:32:58.020 --> 00:32:59.340
So you download it.

00:32:59.340 --> 00:33:04.400
And then when you run a command like UVVM and you give us a Python version, if you don't

00:33:04.400 --> 00:33:07.880
have any Python installed, if you don't have that version installed, we will download and

00:33:07.880 --> 00:33:08.700
install it for you.

00:33:08.700 --> 00:33:12.880
So you can sort of seamlessly run these commands without worrying about how do I install Python?

00:33:13.000 --> 00:33:14.960
Where is my Python, et cetera, et cetera.

00:33:14.960 --> 00:33:21.100
Which means that we can achieve this really cool experience where the whole set of commands

00:33:21.100 --> 00:33:26.400
you need to create a Python application are like, you curl install UV, and then you just

00:33:26.400 --> 00:33:28.620
run like uv init --Python.

00:33:28.620 --> 00:33:30.220
And we create a project for you.

00:33:30.220 --> 00:33:31.820
We download and install that version of Python.

00:33:31.820 --> 00:33:32.840
You can just start running things.

00:33:32.840 --> 00:33:34.900
You don't have to think about how do I install Python?

00:33:34.900 --> 00:33:36.000
How do I get it on my machine?

00:33:36.000 --> 00:33:37.100
Do I have the versions I need?

00:33:37.100 --> 00:33:37.820
Anything like that.

00:33:37.820 --> 00:33:40.180
So you can obviously turn this stuff off, right?

00:33:40.180 --> 00:33:41.220
And you can use your own.

00:33:41.860 --> 00:33:44.300
It also respect pythons that you have on your machine already.

00:33:44.300 --> 00:33:49.520
But part of the goal was we wanted to get to this, I won't call it the holy grail, but this

00:33:49.520 --> 00:33:54.260
experience of you just download the binary, you do uv run, and everything just works.

00:33:54.260 --> 00:33:56.740
So that was a big part of it.

00:33:56.740 --> 00:34:02.900
And if you look at the full list of things that we put in this release, there's kind of

00:34:02.900 --> 00:34:04.300
a lot of stuff, right?

00:34:04.300 --> 00:34:08.500
There's like four bullets of things that each of those could be a big release.

00:34:09.220 --> 00:34:10.840
You know, one is like the Python installation.

00:34:10.840 --> 00:34:14.820
One is we have this sort of like tool install, kind of like pipX.

00:34:14.820 --> 00:34:20.000
So if you want to install rough globally, you can do uv tool install rough and we'll install

00:34:20.000 --> 00:34:20.400
it for you.

00:34:20.400 --> 00:34:22.080
It'll get put in your path, everything like that.

00:34:22.080 --> 00:34:26.060
We have these project management APIs that I've hinted at a little bit throughout this conversation,

00:34:26.060 --> 00:34:28.120
like uv run, uv lock, uv sink.

00:34:28.660 --> 00:34:29.240
Yeah, we'll get into it.

00:34:29.240 --> 00:34:31.620
And we have, yeah, we have this thing around script execution.

00:34:31.620 --> 00:34:36.520
So, you know, I thought for a long time, I thought that these would actually all be separate releases,

00:34:36.520 --> 00:34:40.020
that we would do like a staggered series of releases.

00:34:40.020 --> 00:34:43.400
And I was excited about that because, well, first of all, that's always fun.

00:34:43.400 --> 00:34:47.080
Like you kind of like have a bunch of things and you're like shipping like one week, one

00:34:47.080 --> 00:34:49.280
week, one week, and everyone's like, oh my gosh, we're shipping so much stuff.

00:34:49.280 --> 00:34:53.280
But the thing we found was like, they're all kind of interconnected in subtle ways.

00:34:53.500 --> 00:34:57.740
And like the project management and the tool API, they're just not as interesting if you

00:34:57.740 --> 00:34:58.700
don't have like the Python.

00:34:58.700 --> 00:35:03.480
Like they are interesting, but the fact that we have the complete story of like you do uv run

00:35:03.480 --> 00:35:07.520
and we install Python, we've resolved your dependencies, we install your dependencies, we run the command

00:35:07.520 --> 00:35:10.760
in the environment, like that whole picture, like everything's a little bit interconnected.

00:35:10.760 --> 00:35:15.740
So that's how this release came to be so much stuff is we had this vision for what we wanted

00:35:15.740 --> 00:35:18.280
the full stories to be, and they all became somewhat interconnected.

00:35:18.280 --> 00:35:22.600
And, you know, in the end, they're all like individually, I think really powerful things,

00:35:22.780 --> 00:35:27.560
but they kind of come together to give this, what we want this Python experience to be.

00:35:27.560 --> 00:35:28.800
And we're not like totally there yet.

00:35:28.800 --> 00:35:30.100
You know, we're missing stuff for sure.

00:35:30.100 --> 00:35:35.740
But this was our attempt to capture kind of a couple of different workflows that are intertwined

00:35:35.740 --> 00:35:36.600
in different ways.

00:35:36.600 --> 00:35:37.080
Yeah.

00:35:37.080 --> 00:35:43.320
I see how they all interconnect, but they are also interesting on their own, right?

00:35:43.320 --> 00:35:43.520
Yes.

00:35:43.520 --> 00:35:45.480
The Python installation thing is interesting.

00:35:45.480 --> 00:35:47.780
And usable on their own, by the way.

00:35:47.780 --> 00:35:48.100
Yeah.

00:35:48.100 --> 00:35:48.640
Yeah, exactly.

00:35:48.640 --> 00:35:50.020
They're all independently.

00:35:50.860 --> 00:35:53.560
If you just had one of those, you'd be like, that's pretty cool.

00:35:53.560 --> 00:35:54.020
Okay.

00:35:54.020 --> 00:35:54.740
I like that.

00:35:54.740 --> 00:35:55.580
That's pretty cool.

00:35:55.580 --> 00:35:59.080
So let's talk just a bit more about the Python one.

00:35:59.080 --> 00:36:03.440
So there's analogies here to other tools that people may know.

00:36:03.440 --> 00:36:07.040
And the closest one for this would be PyE and V, do you think?

00:36:07.040 --> 00:36:08.460
Yeah, probably.

00:36:08.740 --> 00:36:14.000
It's like, there are obviously differences, but that's a very popular one that most, you

00:36:14.000 --> 00:36:14.820
know, a lot of people know.

00:36:14.820 --> 00:36:15.280
Yeah.

00:36:15.280 --> 00:36:15.480
Yeah.

00:36:15.480 --> 00:36:19.500
I'm not saying that they're identical, but it's, it fulfills a role that a lot of people

00:36:19.500 --> 00:36:20.940
were, were solving with it.

00:36:20.940 --> 00:36:26.480
Now, when I tried to do INV, I don't remember what I was doing wrong, but this was the early

00:36:26.480 --> 00:36:34.540
days of Apple Silicon and maybe I had the Intel X64 version of Homebrew, but I had the build

00:36:34.540 --> 00:36:35.560
tools for ARM.

00:36:35.560 --> 00:36:37.880
I can't remember, but I could not get it.

00:36:37.880 --> 00:36:37.960
Yeah.

00:36:37.960 --> 00:36:39.180
Trying to do something under Rosetta or something.

00:36:39.180 --> 00:36:45.440
Again, I couldn't get it to install anything with PyE and V because it would, it would download

00:36:45.440 --> 00:36:46.680
it and would try to compile it.

00:36:46.680 --> 00:36:48.880
Then there'd be some weird compiler bug.

00:36:48.880 --> 00:36:49.660
And I'm like, you know what?

00:36:49.660 --> 00:36:52.760
I'm not debugging the source of, I'm just not debugging this.

00:36:52.760 --> 00:36:53.100
I'm out.

00:36:53.100 --> 00:36:54.200
I'm just going to go download it.

00:36:54.200 --> 00:36:59.560
And also that's a real, I compiled Python for some of the server stuff I'm doing and it

00:36:59.560 --> 00:37:00.360
takes a while.

00:37:00.360 --> 00:37:01.780
It's not that fast.

00:37:01.960 --> 00:37:09.120
And when I get it from you guys, if I say uv Python install 3.12 or something, boom,

00:37:09.120 --> 00:37:09.760
I get it.

00:37:09.760 --> 00:37:12.040
Like in your standard style, it's fast.

00:37:12.040 --> 00:37:13.640
How is it fast?

00:37:13.640 --> 00:37:14.220
Yeah.

00:37:14.220 --> 00:37:17.900
So that comes down to like sort of a fundamental difference between what we're doing and what

00:37:17.900 --> 00:37:18.220
PyE.

00:37:18.220 --> 00:37:20.900
I don't know if it's PyE or PyE by the way.

00:37:20.900 --> 00:37:22.140
I think it's PyE by the way.

00:37:22.140 --> 00:37:22.560
Okay.

00:37:22.560 --> 00:37:23.480
So I'm just going to say that.

00:37:23.480 --> 00:37:25.080
Let's go with that.

00:37:25.080 --> 00:37:26.420
If I try to do the other, I will mess up.

00:37:27.120 --> 00:37:31.960
So like the way that PyE typically works is, you know, it's a great tool.

00:37:31.960 --> 00:37:32.780
A lot of people use it.

00:37:32.780 --> 00:37:36.840
It's building Python from source and there are trade-offs around this, but the idea is it

00:37:36.840 --> 00:37:38.960
will build the version of Python that you need.

00:37:38.960 --> 00:37:46.420
What we're doing is we're building a top of project called Python build standalone by originally

00:37:46.420 --> 00:37:47.500
created by Greg Sork.

00:37:47.500 --> 00:37:49.900
And that's a project that we've started contributing to.

00:37:49.900 --> 00:37:51.840
So I think I did the last two releases maybe.

00:37:52.480 --> 00:37:58.060
But the idea here is we have these standalone, easily redistributable Python builds.

00:37:58.060 --> 00:38:03.500
And when we do a release, it will create Python builds for, you know, for a bunch of Linux

00:38:03.500 --> 00:38:08.280
architectures for macOS, for Windows on all the different Python versions.

00:38:08.280 --> 00:38:11.960
And it will also run a bunch of optimizations over there.

00:38:11.960 --> 00:38:14.440
So it'll do, you know, it's not these acronyms.

00:38:14.440 --> 00:38:17.580
It's not important that you understand them, but, you know, it can do like link time optimization

00:38:17.580 --> 00:38:20.760
or LTO and profile guided optimization, PGO.

00:38:20.760 --> 00:38:23.260
So we build all the binaries in advance.

00:38:23.260 --> 00:38:23.840
That's pretty impressive.

00:38:23.840 --> 00:38:24.940
Yeah, that's impressive.

00:38:24.940 --> 00:38:26.420
That all happens in advance.

00:38:26.420 --> 00:38:32.000
So if you go to like the releases page here, like scroll up a little bit and just go to,

00:38:32.000 --> 00:38:33.500
just click their latest release.

00:38:33.500 --> 00:38:33.740
Yeah.

00:38:33.740 --> 00:38:33.920
Right.

00:38:33.920 --> 00:38:34.520
Yeah.

00:38:34.520 --> 00:38:38.380
You'll see like all the, yeah, like 773 artifacts.

00:38:38.380 --> 00:38:40.840
That's like 773 Python builds.

00:38:40.840 --> 00:38:43.160
So it's a lot of different Pythons.

00:38:43.160 --> 00:38:43.680
Yeah.

00:38:43.680 --> 00:38:43.900
Yeah.

00:38:43.900 --> 00:38:44.340
It's a lot of different Pythons.

00:38:44.340 --> 00:38:44.340
Yeah.

00:38:44.340 --> 00:38:46.240
773 different.

00:38:46.520 --> 00:38:48.360
So like, you know, we build all this stuff.

00:38:48.360 --> 00:38:52.660
And then when you run Python install, we figure out the correct, see, we have like arm, we

00:38:52.660 --> 00:38:53.260
have like all this stuff.

00:38:53.260 --> 00:38:55.360
So then we figure out the correct Python for your machine.

00:38:55.360 --> 00:38:56.600
We just download and unzip it.

00:38:56.600 --> 00:38:57.240
I see.

00:38:57.240 --> 00:38:59.520
The same way you get a wheel is the way you get this.

00:38:59.520 --> 00:39:00.080
Yeah.

00:39:00.080 --> 00:39:02.900
I mean, it's actually the same code pretty much like under the hood for us.

00:39:02.900 --> 00:39:03.080
Right.

00:39:03.080 --> 00:39:05.460
It's like we stream and unzip it down into disk.

00:39:05.460 --> 00:39:07.760
And that's great.

00:39:07.760 --> 00:39:08.800
It's like super fast.

00:39:08.800 --> 00:39:11.480
It's also, they're already optimized.

00:39:11.480 --> 00:39:14.900
Like Pythons by default does not compile with optimizations.

00:39:14.900 --> 00:39:18.020
You can compile with optimizations, but it's not what it does by default.

00:39:18.020 --> 00:39:23.460
So these will be, you know, noticeably faster than, than what you would get by default with Pythons.

00:39:24.140 --> 00:39:27.440
There are some downsides, like some people like to build from source, right?

00:39:27.440 --> 00:39:31.260
They like to have like effectively the full chain of like reproducibility in the build.

00:39:31.260 --> 00:39:34.340
And now you're kind of trusting us to give you your Pythons.

00:39:34.340 --> 00:39:36.100
So that's, that is a downside to some people.

00:39:36.100 --> 00:39:36.960
Yeah.

00:39:36.960 --> 00:39:41.180
But then the next thing you do is you pip install something that has a binary wheel anyway.

00:39:41.180 --> 00:39:43.140
So yeah, yeah, no, that is true.

00:39:43.140 --> 00:39:50.300
There are also like a couple of quirks with these builds that we're, we're working on a little bit.

00:39:50.300 --> 00:39:54.040
Some of it has to do with like licensing the fact that you want to have kind of

00:39:54.040 --> 00:39:56.360
a statically, you want to have a self-contained Python.

00:39:56.360 --> 00:40:00.640
And there are some things in the, in, you know, in there that, that require licensing changes.

00:40:00.640 --> 00:40:02.520
So, you know, it uses all terms.

00:40:02.520 --> 00:40:05.760
Some, there are some slight deviations from what you would get with building from source

00:40:05.760 --> 00:40:06.600
from CPython.

00:40:06.600 --> 00:40:09.080
And those are documented in Python build standalone.

00:40:09.080 --> 00:40:13.680
But, you know, the general idea is we pre-build and pre-optimize these Pythons.

00:40:13.680 --> 00:40:17.580
And then we, you know, we download them on demand and it makes it really fast.

00:40:17.580 --> 00:40:18.100
Awesome.

00:40:18.100 --> 00:40:23.940
When I go to python.org and download a DMG package or

00:40:23.940 --> 00:40:28.540
and MSI for windows or whatever, it runs this installer process that takes a good long while.

00:40:28.540 --> 00:40:31.840
And, you know, Jake just pointed out a similar experience I had.

00:40:31.840 --> 00:40:34.040
It says it took me less than two seconds to install 3.10.

00:40:34.040 --> 00:40:34.560
Yeah.

00:40:34.560 --> 00:40:35.960
Same thing for 3.12.

00:40:35.960 --> 00:40:42.360
So what is, are we missing anything compared to running a proper installer that seems to

00:40:42.360 --> 00:40:44.320
take 20 seconds, even on a fast computer?

00:40:44.320 --> 00:40:49.760
I think those installers also have to do some operations from source, most likely because

00:40:49.760 --> 00:40:51.160
they're not shipping.

00:40:51.160 --> 00:40:51.660
Okay.

00:40:51.660 --> 00:40:53.860
I could be wrong about that.

00:40:54.360 --> 00:40:56.160
I haven't looked at them closely.

00:40:56.160 --> 00:41:04.220
But Python in general, like, you know, Python.org does not distribute these kind of pre-built

00:41:04.220 --> 00:41:06.560
binary distributions for all these different architectures.

00:41:06.560 --> 00:41:10.300
And we, there's interest in doing that.

00:41:10.300 --> 00:41:12.840
And I'm also interested in doing that.

00:41:12.840 --> 00:41:17.260
And, but, you know, it needs to be, you know, there are some things that need to be decided,

00:41:17.260 --> 00:41:20.040
standards that potentially need to be set.

00:41:20.040 --> 00:41:24.640
So, you know, it's possible that eventually we can just read, you know, grab these basically

00:41:24.640 --> 00:41:27.600
from, from python.org.

00:41:27.700 --> 00:41:32.320
I think our PyPy downloads come from python.org, if I'm not mistaken.

00:41:32.320 --> 00:41:33.600
PYPy, that is.

00:41:33.600 --> 00:41:33.800
Yeah.

00:41:33.800 --> 00:41:36.660
Or it actually might come from PYPy.org.

00:41:36.660 --> 00:41:37.340
Now I can't remember.

00:41:37.340 --> 00:41:38.720
Okay.

00:41:38.720 --> 00:41:41.240
Anyway, those come from some sort of official source.

00:41:41.240 --> 00:41:41.560
Yeah.

00:41:41.560 --> 00:41:41.800
Yeah.

00:41:41.800 --> 00:41:42.060
Yeah.

00:41:42.060 --> 00:41:42.980
Yeah.

00:41:42.980 --> 00:41:43.980
So, okay.

00:41:43.980 --> 00:41:44.220
Yeah.

00:41:44.220 --> 00:41:44.580
Yeah.

00:41:44.580 --> 00:41:45.520
Maybe eventually.

00:41:45.520 --> 00:41:49.580
But, but for now, yeah, we're using Python built standalone and we've just been trying

00:41:49.580 --> 00:41:51.740
to grow our familiarity with the project too.

00:41:51.740 --> 00:41:52.180
Right.

00:41:52.180 --> 00:41:52.780
Okay.

00:41:52.840 --> 00:41:57.680
So let's give people a sense here, like they do not have Python at all, or they can't count

00:41:57.680 --> 00:41:59.500
on having Python or the right version of Python.

00:41:59.500 --> 00:42:05.540
They can run a single shell command to get UV, which uv can then manage itself.

00:42:05.540 --> 00:42:07.720
They could pip X install the uv.

00:42:07.720 --> 00:42:08.760
Can you homebrew?

00:42:08.760 --> 00:42:09.000
Yeah.

00:42:09.000 --> 00:42:10.840
What other ways, how, what other ways can I get?

00:42:10.840 --> 00:42:12.460
Yeah, you can get uv on your machine however you want.

00:42:12.460 --> 00:42:17.220
Like uv doesn't need to be in the virtual environment that it's manipulating.

00:42:17.220 --> 00:42:17.460
Yeah.

00:42:17.460 --> 00:42:20.780
It can just be anywhere on your machine and it can operate on any environment.

00:42:20.780 --> 00:42:22.420
External tool sort of deal.

00:42:22.420 --> 00:42:22.660
Yeah.

00:42:22.660 --> 00:42:22.960
Yeah.

00:42:22.960 --> 00:42:23.400
Yeah.

00:42:23.400 --> 00:42:24.260
So once you have that.

00:42:24.260 --> 00:42:25.380
You can install it with pip.

00:42:25.380 --> 00:42:28.740
We have our own standalone installers that you can, you know, curl.

00:42:28.740 --> 00:42:30.960
It's on homebrew, right?

00:42:30.960 --> 00:42:33.820
It's on, you can, you can install with pip X, you can install it however you want.

00:42:33.820 --> 00:42:37.300
And then ultimately it can operate on any environment on your machine.

00:42:37.300 --> 00:42:40.100
So I actually don't recommend installing it in a virtual environment.

00:42:40.100 --> 00:42:41.940
I recommend installing it globally.

00:42:41.940 --> 00:42:42.560
Yeah.

00:42:42.560 --> 00:42:43.380
That's how I have it as well.

00:42:43.380 --> 00:42:44.000
Kind of working from there.

00:42:44.000 --> 00:42:44.480
Yeah.

00:42:44.480 --> 00:42:46.680
I believe I've pip X installed it.

00:42:46.680 --> 00:42:50.160
Cause anything that falls into that category for me, it goes under pip X, at least for now.

00:42:50.160 --> 00:42:50.420
Yeah.

00:42:50.420 --> 00:42:51.980
Well, we'll talk about that in a minute.

00:42:51.980 --> 00:42:52.240
Yeah.

00:42:52.240 --> 00:42:57.740
I mean, one interesting thing is if you use our installers like the curl installers, then

00:42:57.740 --> 00:42:59.960
you get access to self updates.

00:42:59.960 --> 00:43:05.000
So you can run uv self update and we will update to the latest version.

00:43:05.000 --> 00:43:06.120
That's right.

00:43:06.120 --> 00:43:07.620
Cause I tried to really try that.

00:43:07.620 --> 00:43:09.240
If you, yeah, you can't do that.

00:43:09.240 --> 00:43:13.580
If you installed through a different package manager, because we don't really like know how

00:43:13.580 --> 00:43:14.220
it was installed.

00:43:15.340 --> 00:43:17.060
So if you install it through the installer, right.

00:43:17.060 --> 00:43:20.840
We write a receipt that, that we understand like where we installed it and all that kind

00:43:20.840 --> 00:43:20.840
of stuff.

00:43:20.840 --> 00:43:21.340
Yeah.

00:43:21.340 --> 00:43:23.060
So that's, that's one benefit.

00:43:23.060 --> 00:43:26.560
But it's not, you're not required to do that.

00:43:26.560 --> 00:43:27.560
Sure.

00:43:27.560 --> 00:43:30.780
I ran into that when I just wanted to see what it would do.

00:43:30.780 --> 00:43:31.780
Yeah.

00:43:31.780 --> 00:43:35.020
And it's, it's a, you installed this from a package manager type thing.

00:43:35.020 --> 00:43:36.280
So go do that thing.

00:43:36.280 --> 00:43:36.280
But that's fine.

00:43:36.280 --> 00:43:36.660
But that's fine.

00:43:36.660 --> 00:43:38.280
I have automation for like all those things.

00:43:38.280 --> 00:43:39.220
So it's not a big deal.

00:43:39.220 --> 00:43:39.820
And so on.

00:43:39.820 --> 00:43:44.380
So to give people a sense, like once uv is on your system and in the path, you can say

00:43:44.380 --> 00:43:50.000
UV, V and V --Python, and put up some variation of a Python version.

00:43:50.000 --> 00:43:54.220
And if you have it great, it'll use it right to create the virtual environment.

00:43:54.220 --> 00:43:58.380
If you don't have it, it will then do this two second download install deal.

00:43:58.380 --> 00:44:01.620
Assuming you have fiber and then create a virtual environment based on it.

00:44:01.620 --> 00:44:01.920
Right.

00:44:01.920 --> 00:44:02.520
Yep.

00:44:02.520 --> 00:44:03.020
That's right.

00:44:03.020 --> 00:44:05.560
And you can turn that off, but that is the default behavior.

00:44:05.560 --> 00:44:05.980
Yeah.

00:44:05.980 --> 00:44:06.340
That's awesome.

00:44:06.340 --> 00:44:11.420
And then you can also pass commands like managed only, I think it is, or something like that,

00:44:11.420 --> 00:44:14.880
where you say, don't use the system Python even.

00:44:14.880 --> 00:44:15.420
Yeah.

00:44:15.420 --> 00:44:15.820
Yeah.

00:44:15.820 --> 00:44:20.360
Only use the pythons that uv will install or like only use the pythons that are out my machine.

00:44:20.360 --> 00:44:21.520
Ignore UV's pythons.

00:44:21.520 --> 00:44:22.820
There's some customizations around that.

00:44:22.820 --> 00:44:23.040
Right.

00:44:23.040 --> 00:44:24.600
Like you could do the opposite.

00:44:24.600 --> 00:44:32.180
I will also say this version, by the way, this version format request thing is like so hard.

00:44:32.180 --> 00:44:33.920
Yeah.

00:44:33.920 --> 00:44:35.940
It's just like, you'd just be shocked.

00:44:35.940 --> 00:44:41.380
Like how much engineering work has gone into like understanding those requests and then discovering all the pythons on your machine.

00:44:41.380 --> 00:44:41.820
Yeah.

00:44:41.820 --> 00:44:48.740
And the discovering all the pythons on your machine part problem, by the way, is a problem that like a bunch of tools have had to solve.

00:44:48.740 --> 00:44:56.100
And we've talked with the pythons on your machine.

00:44:56.100 --> 00:44:57.460
And we've talked about it in different places that they could be.

00:44:57.460 --> 00:45:01.540
And like on windows, it's also like totally different than on Unix.

00:45:01.540 --> 00:45:08.900
So anyway, a lot of work has gone into that.

00:45:08.900 --> 00:45:13.420
Like you can say, yeah, you can say cpython greater than or equal to 3.12.

00:45:13.420 --> 00:45:13.660
Right.

00:45:13.660 --> 00:45:16.820
And then we'll look for cpython rather than pypy rather than grailpy.

00:45:16.820 --> 00:45:17.100
Yeah.

00:45:17.100 --> 00:45:17.380
Yeah.

00:45:17.380 --> 00:45:18.820
So anyway, a lot of work has gone into that.

00:45:18.820 --> 00:45:23.460
What if I just say uvvv and I have no python whatsoever?

00:45:24.260 --> 00:45:26.180
I think we would install the latest python.

00:45:26.180 --> 00:45:32.660
Would you just go, yeah, just do a latest like maybe a implicit --python space 3.

00:45:32.660 --> 00:45:33.220
Yeah.

00:45:33.220 --> 00:45:37.300
I think that would kind of give me any python from the list of downloads.

00:45:37.300 --> 00:45:39.540
And then we sort by version.

00:45:39.540 --> 00:45:42.660
So I think you would effectively get the latest compatible version.

00:45:42.660 --> 00:45:44.100
But now you're kind of quizzing me a little bit.

00:45:44.100 --> 00:45:45.540
No, I don't mean to be quizzing you.

00:45:45.540 --> 00:45:47.380
I'm just kidding.

00:45:47.380 --> 00:45:48.980
All right.

00:45:48.980 --> 00:45:50.740
So we'll move on.

00:45:50.740 --> 00:45:54.180
I know there's so much more and we don't have a ton of time to get it.

00:45:54.180 --> 00:46:10.020
But I just pulled up my my warp terminal and I typed uv python list and it shows me a bunch of options for arm 64 for macOS 312.5 312.0 311.9 310.3.8 and so on that I could pick.

00:46:10.020 --> 00:46:17.620
However, I'm just wondering where your cutting edge needle or setting is going to go here.

00:46:17.620 --> 00:46:19.940
I don't see a 3 of 13.

00:46:19.940 --> 00:46:21.540
Yeah, we're working on it.

00:46:21.540 --> 00:46:22.820
We're working on it.

00:46:22.820 --> 00:46:24.100
We're working on it.

00:46:24.100 --> 00:46:36.420
And one of the things that is tricky about any of these package manager stories is if I homebrew it, I'll see that there's a new python, especially a major release, but I might have to wait a week before it's available on homebrew.

00:46:36.420 --> 00:46:38.020
And but homebrew auto updated.

00:46:38.020 --> 00:46:41.780
But if I install it for the installer from python.org, it won't auto update it.

00:46:41.780 --> 00:46:44.420
And you know, there's just there's always a little drawback of it.

00:46:44.420 --> 00:46:44.580
Yeah.

00:46:44.580 --> 00:46:44.580
Yeah.

00:46:44.580 --> 00:46:44.580
Yeah.

00:46:44.580 --> 00:46:45.060
Yeah.

00:46:45.220 --> 00:46:52.500
And so when I saw this feature, I'm like, well, if this thing could just really soon have the newest one that would just be icing on the cake.

00:46:52.500 --> 00:46:57.540
And so what is your what is your policy on how quickly to adopt new things?

00:46:57.540 --> 00:46:58.580
I'll go get it.

00:46:58.580 --> 00:46:58.740
Yeah.

00:46:58.740 --> 00:46:59.140
Yeah.

00:46:59.140 --> 00:46:59.140
Yeah.

00:46:59.140 --> 00:46:59.140
Yeah.

00:46:59.140 --> 00:47:01.140
At least candidates and betas and things like that.

00:47:01.140 --> 00:47:01.540
Yeah.

00:47:01.540 --> 00:47:06.580
Like with 3.13, I mean, I would like to have it out as soon as there's an RC.

00:47:06.580 --> 00:47:08.420
That's what I would like to do.

00:47:08.420 --> 00:47:08.980
Okay.

00:47:08.980 --> 00:47:16.660
our policy or our, our goal is to make sure that it's out before the stable release.

00:47:16.660 --> 00:47:17.060
Okay.

00:47:17.060 --> 00:47:20.260
So we would like to not be lagging on the stable release.

00:47:20.260 --> 00:47:27.460
And, you know, we view like the minor releases in Python, similarly in rough historically,

00:47:27.460 --> 00:47:33.380
like we'll be like, okay, we want to make sure that we support all the 3.12 language features before 3.12 is stable.

00:47:33.380 --> 00:47:35.940
and there were like a bunch of language features in 3.12.

00:47:35.940 --> 00:47:38.660
There was like some new grammar, there were new typing features.

00:47:38.660 --> 00:47:41.540
And so the goal there again was like, the goal is to have it out by time.

00:47:41.540 --> 00:47:42.180
It's stable.

00:47:42.180 --> 00:47:46.500
So that's typically like the contract we try and uphold and that's still our plan for 3.13.

00:47:46.500 --> 00:47:46.980
Okay.

00:47:46.980 --> 00:47:47.540
Awesome.

00:47:47.540 --> 00:47:47.780
Yeah.

00:47:47.780 --> 00:47:48.260
Good to know.

00:47:48.260 --> 00:47:48.500
Yeah.

00:47:48.500 --> 00:47:54.260
Jay Geller says, it would be, it would be nice to have an option to install pre-release build.

00:47:54.260 --> 00:48:00.340
And, Tushar says, the thing is Python build standalone builds 600 releases per version number.

00:48:00.340 --> 00:48:01.620
Having that run daily is too much.

00:48:01.620 --> 00:48:05.860
But if anyone could do some interesting caching, surely the astral folks.

00:48:05.860 --> 00:48:08.100
You know, it's kind of amazing though.

00:48:08.100 --> 00:48:11.380
That project runs, it's not, we like, we don't, we don't own it.

00:48:11.380 --> 00:48:12.260
It's not under our org.

00:48:12.260 --> 00:48:12.260
Yeah.

00:48:12.260 --> 00:48:12.260
Yeah.

00:48:12.260 --> 00:48:12.260
Yeah.

00:48:12.260 --> 00:48:12.260
Yeah.

00:48:12.260 --> 00:48:15.460
That project runs completely for free on GitHub action.

00:48:15.460 --> 00:48:15.940
Wow.

00:48:15.940 --> 00:48:16.420
Isn't that remarkable?

00:48:16.420 --> 00:48:17.700
It's kind of crazy, isn't it?

00:48:17.700 --> 00:48:18.260
Yeah.

00:48:18.260 --> 00:48:19.940
GitHub is ridiculous.

00:48:19.940 --> 00:48:20.420
Yeah.

00:48:20.420 --> 00:48:21.940
So anyway, that's kind of.

00:48:21.940 --> 00:48:24.100
How much traffic it handles and yeah.

00:48:24.100 --> 00:48:24.500
Yeah.

00:48:24.500 --> 00:48:25.060
How much data.

00:48:25.060 --> 00:48:25.300
Yeah.

00:48:25.300 --> 00:48:26.660
They're, they're pretty awesome.

00:48:26.660 --> 00:48:27.060
Okay.

00:48:27.060 --> 00:48:27.460
Yep.

00:48:27.460 --> 00:48:31.940
So if you don't have Python, you can also, you don't have to do a V and V, you can just say,

00:48:31.940 --> 00:48:34.180
UV Python install, give it a version.

00:48:34.180 --> 00:48:35.860
And then you'll just have that.

00:48:35.860 --> 00:48:40.740
Like that's what Jake and I were referring to earlier, but you can also create a V and V.

00:48:40.740 --> 00:48:43.940
And this is sort of a philosophy that I'm, I'm getting.

00:48:43.940 --> 00:48:48.660
And sorry, someone said this earlier, but it's scrolled off the live stream comments that this

00:48:48.660 --> 00:48:55.060
prefer or require virtual environments by default, rather than prefer to try to jam stuff into system

00:48:55.060 --> 00:48:57.060
Python or the core Python.

00:48:57.060 --> 00:49:00.900
And then it could be a virtual environment if you really know the incantations.

00:49:00.900 --> 00:49:01.620
Yeah.

00:49:01.620 --> 00:49:02.100
Yeah.

00:49:02.100 --> 00:49:05.700
That's probably like, you know, we did the release in February.

00:49:05.700 --> 00:49:10.900
We tried to steer pretty closely to the way pit behaves to make it easy for people.

00:49:11.940 --> 00:49:16.340
But we did pick a few battles where we wanted to intentionally diverge.

00:49:16.340 --> 00:49:22.180
And this was, this was one of the bigger ones, which is uv by default requires a virtual environment.

00:49:22.180 --> 00:49:25.860
So if you try and uv pip install and there's no, we can't find a virtual environment in the current

00:49:25.860 --> 00:49:28.340
directory or an active virtual environment, we'll throw an error.

00:49:28.340 --> 00:49:34.660
And you can opt out of that by passing a system flag, but unlike pip, right, it's opt out.

00:49:34.660 --> 00:49:39.460
So you have to, by default, use a virtual environment and you can escape from that if you want to

00:49:39.460 --> 00:49:40.100
intentionally.

00:49:40.100 --> 00:49:47.620
So we're trying to, like with these APIs too, like these are all virtual environment.

00:49:47.620 --> 00:49:54.020
Well, the tool stuff, it is, but in a different way, like uv run, uv lock, uv sync, these all create

00:49:54.020 --> 00:49:58.580
a virtual environment in the project directory where the project is defined by a PI project tunnel.

00:49:58.580 --> 00:50:04.260
So if you run uv run in that directory, it will look at the dependencies, resolve them, create a lock file,

00:50:04.260 --> 00:50:08.180
create a virtual environment, install their locked versions into the virtual environment, run the

00:50:08.180 --> 00:50:08.580
command.

00:50:08.580 --> 00:50:14.900
And it does that every time, but it's so fast that we will hopefully so fast that we can do it.

00:50:14.900 --> 00:50:18.740
So like if the dependencies haven't changed, it will still make sure that everything's up to date.

00:50:18.740 --> 00:50:22.820
So if you just use uv run, we try and keep the whole environment in sync for you.

00:50:22.820 --> 00:50:25.220
And you don't have to think about how do I manage my environment?

00:50:25.220 --> 00:50:26.180
How do I activate it?

00:50:26.180 --> 00:50:27.140
How do I install stuff?

00:50:27.140 --> 00:50:31.540
But we're pretty like, we're pretty pro virtual environment.

00:50:32.660 --> 00:50:38.660
And one thing I want to do, and it's sometimes hard to hold these lines because you have users

00:50:38.660 --> 00:50:40.420
who come to you and want something really different.

00:50:40.420 --> 00:50:46.100
And it can be hard not to say yes to a lot of the things that users want.

00:50:46.100 --> 00:50:53.540
But some lines, I think we have to hold because if we can see it on them, sorry, I may sound like a

00:50:53.540 --> 00:50:58.980
battle, but if we can see it on them, it just limits the things we can do in the future.

00:50:58.980 --> 00:51:02.820
Like if we make things too flexible, it limits some of the things, some of the possibilities

00:51:02.820 --> 00:51:03.940
of what we can do in the future.

00:51:03.940 --> 00:51:08.820
And like one thing that I kind of want to change the perception around is like, I think virtual

00:51:08.820 --> 00:51:11.300
environments are like, they're here to stay really.

00:51:11.300 --> 00:51:18.340
And I am, so we like embrace them, but I want to change some of how people like think about virtual

00:51:18.340 --> 00:51:19.220
environments.

00:51:19.220 --> 00:51:22.500
In particular, I want to change this whole idea of like activating a virtual environment.

00:51:22.500 --> 00:51:27.620
Like I want it to feel more like node modules, which people don't necessarily think, you know,

00:51:27.620 --> 00:51:28.660
highly of node modules.

00:51:28.660 --> 00:51:31.940
Like I think when people think of node modules, they think of a huge node modules folder with

00:51:31.940 --> 00:51:33.140
like a ton of bloat.

00:51:33.140 --> 00:51:39.060
But the idea there is like when you're in a project, you just sort of run commands and all the packages

00:51:39.060 --> 00:51:40.100
just get installed there.

00:51:40.100 --> 00:51:42.660
And it just runs in the correct environment with the correct dependencies.

00:51:42.660 --> 00:51:44.340
And that's actually what I kind of want.

00:51:44.340 --> 00:51:47.700
That's actually what I want Python to feel like is, yeah, there's a virtual environment,

00:51:47.700 --> 00:51:50.500
but it's actually just kind of like the directories of, you know, it's kind of just like full

00:51:50.500 --> 00:51:51.860
of packages, full of your dependencies.

00:51:51.860 --> 00:51:55.140
And it just, you just use the right one at the right points in time.

00:51:55.140 --> 00:51:59.780
So that's, that's part of the shift that I want us to move towards a little bit.

00:51:59.780 --> 00:52:03.460
And it's part of why we're very virtual environment first and why we put the virtual environment

00:52:03.460 --> 00:52:09.060
right in the project in a specific known place, because we want to get away a little bit from

00:52:09.060 --> 00:52:11.460
this idea of where's the environment, how do I activate it?

00:52:11.460 --> 00:52:13.220
Do I have the wrong one activated?

00:52:13.220 --> 00:52:18.180
I want it to feel a little bit more like it is just sort of native to how the project works.

00:52:18.180 --> 00:52:21.940
Okay. If you're in the context of that thing, then it just uses the right one.

00:52:21.940 --> 00:52:22.260
Yeah.

00:52:22.260 --> 00:52:24.420
Is it, do you have intentions to do something?

00:52:24.420 --> 00:52:28.420
I can't remember the path, but something to the effect where if you're in a directory and

00:52:28.420 --> 00:52:32.980
there's no PyProject, Toml or virtual environment, but if you went up one or two, if we're both,

00:52:32.980 --> 00:52:35.860
would it fall to that one or would it just go, oh, we don't know?

00:52:35.860 --> 00:52:37.380
We do do that with uv run.

00:52:37.380 --> 00:52:41.140
So with uv run, we sort of find the root of the project.

00:52:41.140 --> 00:52:41.460
Yes, exactly.

00:52:41.460 --> 00:52:43.140
And we'll look up at parent directories.

00:52:43.140 --> 00:52:49.140
But we don't, but if you just run Python, you know, blah, blah, blah, obviously we don't hook

00:52:49.140 --> 00:52:50.020
into anything there.

00:52:50.020 --> 00:52:54.980
And so, you know, like with a lot of other things, like with uv run, uv lock, uv sync,

00:52:54.980 --> 00:52:56.500
like we, we create a virtual environment.

00:52:56.500 --> 00:53:00.180
If you use our commands, it's kind of just like everything just works, but you can also just like

00:53:00.180 --> 00:53:03.940
activate the virtual environment and like do whatever you want, because we're kind of trying to

00:53:03.940 --> 00:53:08.020
embrace the fact that virtual environments are like, everyone knows, not, you know, not everyone

00:53:08.020 --> 00:53:13.460
knows how to use them, but like people are familiar with them, editors and tooling like revolve around

00:53:13.460 --> 00:53:13.940
them.

00:53:13.940 --> 00:53:14.340
Right.

00:53:14.340 --> 00:53:14.420
Yeah.

00:53:14.420 --> 00:53:20.340
So things that try to eject from virtual environments tend to cause a lot of problems for editors and

00:53:20.340 --> 00:53:21.220
workflows.

00:53:21.220 --> 00:53:25.940
So part of embracing virtual environments, I think again, is like meeting the ecosystem where it is a

00:53:25.940 --> 00:53:29.460
little bit and being like, okay, the fact that we use virtual environments and they're just like in

00:53:29.460 --> 00:53:33.860
your project means that you don't need like a special, like editor integration to

00:53:33.860 --> 00:53:35.860
use UV, like, you know, like PyCharm.

00:53:35.860 --> 00:53:38.820
We'll just like let you use that virtual environment, which is a virtual normal virtual

00:53:38.820 --> 00:53:39.220
environment.

00:53:39.220 --> 00:53:39.380
Yeah.

00:53:39.380 --> 00:53:40.180
That's perspective.

00:53:40.180 --> 00:53:43.780
So that's, that's part, again, part of what we're trying to do is like build things that just

00:53:43.780 --> 00:53:49.780
work for people, and try and embrace, you know, the standards and the conventions while also,

00:53:49.780 --> 00:53:55.700
you know, maybe influencing or changing parts of them that we think could be, could be improved

00:53:55.700 --> 00:53:57.140
or could be made more user-friendly.

00:53:57.140 --> 00:53:57.620
Yeah.

00:53:57.620 --> 00:54:01.140
I don't know why I didn't book you for two and a half hour podcast, because that's what we're going to need.

00:54:01.140 --> 00:54:03.780
So Vincent from Comcode says, UV

00:54:03.780 --> 00:54:05.780
run is such a game changer may work on.

00:54:05.780 --> 00:54:08.740
He may work on a Jupyter runner for that this week.

00:54:08.740 --> 00:54:10.420
Feels like such a game changer, which is awesome.

00:54:10.420 --> 00:54:10.820
Cool.

00:54:10.820 --> 00:54:11.300
Yeah.

00:54:11.300 --> 00:54:11.300
Yeah.

00:54:11.300 --> 00:54:14.100
There's a lot of cool ideas too, around this sort of, sorry, good.

00:54:14.100 --> 00:54:18.980
Well, I was going to say with, with that in mind, let's dive into this whole project

00:54:18.980 --> 00:54:20.020
management stuff here.

00:54:20.020 --> 00:54:20.500
Right.

00:54:20.500 --> 00:54:25.380
Like this is, I think this is one of the, this is one of the three big pieces of functionality

00:54:25.380 --> 00:54:25.860
that comes.

00:54:25.860 --> 00:54:30.420
So, and you've been talking about this sort of, some of the features like uv run and so on,

00:54:30.420 --> 00:54:33.380
but let's, let's talk through, let's talk through like, yeah.

00:54:33.380 --> 00:54:35.380
I want to create a new project.

00:54:35.380 --> 00:54:35.380
Yeah.

00:54:35.380 --> 00:54:35.860
Yeah.

00:54:35.860 --> 00:54:36.180
Yeah.

00:54:36.180 --> 00:54:37.060
I want to create a project.

00:54:37.060 --> 00:54:39.380
I don't have the Python installed.

00:54:39.380 --> 00:54:40.660
It's a new project.

00:54:40.660 --> 00:54:44.100
I want to create a pyproject.toml, but I don't even remember the format for that.

00:54:44.100 --> 00:54:44.660
Yep.

00:54:44.660 --> 00:54:45.300
Let's go.

00:54:45.300 --> 00:54:45.940
How's that work?

00:54:45.940 --> 00:54:46.260
Yeah.

00:54:46.260 --> 00:54:51.300
So, so we have like a series of commands that kind of manage the project life cycle

00:54:51.300 --> 00:54:51.780
for you.

00:54:51.780 --> 00:54:54.420
So you can run uv init to create a new project.

00:54:54.420 --> 00:54:59.540
And it has a couple of flags based on whether you want to build like a library or command line

00:54:59.540 --> 00:55:04.420
application, whether you want it to be structured as like a Python package, or just kind of, maybe

00:55:04.420 --> 00:55:06.660
it's just an application that you're running on your machine.

00:55:06.660 --> 00:55:09.140
But uv init will create the project.

00:55:09.140 --> 00:55:14.180
You can then run uv add flask, uv add FastAPI, whatever to add dependencies.

00:55:14.180 --> 00:55:18.180
And when you run uv add, we'll automatically generate the lock file and sync the, sync the

00:55:18.180 --> 00:55:19.300
dependencies to your system.

00:55:19.300 --> 00:55:27.140
So we do have commands like uv lock to generate the lock file and uv sync to download the correct

00:55:27.140 --> 00:55:28.500
dependencies into your environment.

00:55:28.500 --> 00:55:32.260
But you can also just kind of use these life cycle commands and uv will make sure that everything's in

00:55:32.260 --> 00:55:33.460
the right state as you go.

00:55:33.460 --> 00:55:36.100
So you can run uv add, uv run.

00:55:36.100 --> 00:55:41.220
If you do uv run and then Python, blah, blah, blah, it's, it's, you know, what happens behind the

00:55:41.220 --> 00:55:43.300
scenes is we resolve the dependencies.

00:55:43.300 --> 00:55:46.260
We make sure the environment's up to date, and then we run that command in the environment.

00:55:46.260 --> 00:55:51.860
So the whole life cycle of working with your project can be managed through uv init, uv add,

00:55:51.860 --> 00:55:53.700
UV remove, uv run.

00:55:53.700 --> 00:55:56.500
There's a lot that goes into that.

00:55:56.500 --> 00:56:00.980
And there's also a lot of kind of powerful features built in here too.

00:56:00.980 --> 00:56:06.580
Like when you run uv run, it accepts a flag --with, so you can do uv run dash dash

00:56:06.580 --> 00:56:08.740
with and put a dependency there.

00:56:08.740 --> 00:56:14.180
And it will basically just download that, put it in an ephemeral virtual environment and make

00:56:14.180 --> 00:56:15.460
it available for the command.

00:56:15.460 --> 00:56:19.620
So you can just pull in one off dependencies as you need to run things.

00:56:19.620 --> 00:56:23.620
Like I never actually think about activating environments anymore.

00:56:23.620 --> 00:56:28.420
Like most of the time when I'm running Python commands to run one off tooling, I'm running,

00:56:28.420 --> 00:56:30.980
you know, uv run --with requirements.

00:56:30.980 --> 00:56:32.180
And I give it a requirements file.

00:56:32.180 --> 00:56:34.500
And then, you know, I pass the name of the file I want to run.

00:56:34.500 --> 00:56:39.940
And like, it, it just like builds the thing you need and runs the command and then throws it away.

00:56:39.940 --> 00:56:43.300
And because you have, again, we were talking at the beginning of this episode about how like

00:56:43.300 --> 00:56:45.460
really fast tools change the ergonomics.

00:56:45.460 --> 00:56:49.460
Like part of what we're trying to build here is like, if we have this packaging system, that's

00:56:49.460 --> 00:56:52.420
really fast, especially for like repeated operations.

00:56:52.420 --> 00:56:57.460
Like I need to keep pulling in, you know, I've downloaded this package before.

00:56:57.460 --> 00:56:59.380
I need to download it again, use it for this one command.

00:56:59.380 --> 00:57:02.500
Like we can just like throw away virtual environments and create new virtual environments,

00:57:02.500 --> 00:57:03.780
you know, in like in milliseconds.

00:57:03.780 --> 00:57:04.500
Yeah.

00:57:04.500 --> 00:57:11.540
So if this was a Python dash M V and V sort of, it would be way too much overhead.

00:57:11.540 --> 00:57:11.540
Yeah.

00:57:11.540 --> 00:57:12.100
Yeah.

00:57:12.100 --> 00:57:12.420
Yeah.

00:57:12.420 --> 00:57:12.900
Yeah.

00:57:12.900 --> 00:57:16.900
And so, you know, we can, we can just like, even like a bunch of dependencies,

00:57:16.900 --> 00:57:18.740
like they've been installed on your machine already.

00:57:18.740 --> 00:57:22.820
It's really, really fast just to pull these things together, use them and throw them away.

00:57:22.820 --> 00:57:28.020
So there's just a lot, there's a lot of things that we can do.

00:57:28.020 --> 00:57:31.620
And I think even like looking forward to the future, there's a lot of things we can do because

00:57:31.620 --> 00:57:33.700
we have this like performance foundation.

00:57:33.700 --> 00:57:38.260
Like, you know, I'm thinking about what if you want to test code on like a bunch of different

00:57:38.260 --> 00:57:38.980
Python versions.

00:57:38.980 --> 00:57:39.460
Yeah.

00:57:39.460 --> 00:57:39.540
Yeah.

00:57:39.540 --> 00:57:44.500
And maybe you don't want to like have to keep destroying and recreating your virtual

00:57:44.500 --> 00:57:45.940
environment or something like that.

00:57:45.940 --> 00:57:48.740
Like there's just, there's just a whole lot of stuff that we can build that would be really

00:57:48.740 --> 00:57:51.460
hard to imagine if you didn't have a really fast tool.

00:57:51.460 --> 00:57:51.940
Yeah.

00:57:51.940 --> 00:57:53.140
It's, it changed.

00:57:53.140 --> 00:57:54.580
It definitely changes what's possible.

00:57:54.580 --> 00:57:55.860
It's too sure.

00:57:55.860 --> 00:57:58.980
I'll put out an example that it's very near and dear to my heart.

00:57:58.980 --> 00:57:59.860
You know what would be great?

00:57:59.860 --> 00:58:04.580
If uv could build standalone binaries and embed Python into them.

00:58:04.580 --> 00:58:04.820
Yeah.

00:58:04.820 --> 00:58:05.220
Yeah.

00:58:05.220 --> 00:58:05.540
Yeah.

00:58:05.540 --> 00:58:06.900
That's an interesting space.

00:58:06.900 --> 00:58:10.980
It's not something we've built anything around, but yeah, I know it's being described there.

00:58:10.980 --> 00:58:11.140
Yeah.

00:58:11.140 --> 00:58:11.540
Yeah.

00:58:11.540 --> 00:58:16.580
I think one of the, what I've seen most of the things do is we'll do something like zip

00:58:16.580 --> 00:58:22.340
up a virtual environment or site packages or something and, and then put that in a binary.

00:58:22.340 --> 00:58:27.780
And then when you run it, it'll spit that out or maybe do a memory mapped sort of magic to try

00:58:27.780 --> 00:58:31.860
to map into that and unzip it into memory or all sorts of weirdness.

00:58:31.860 --> 00:58:37.220
And I think really for this to be easy, some somewhere along the way, I could be wrong, not

00:58:37.220 --> 00:58:44.660
a core developer, but I feel like Python's import behavior needs to be able to import from an embedded

00:58:44.660 --> 00:58:51.060
resource in a compiled binary rather than stick in a binary and have the binary do like weird things

00:58:51.060 --> 00:58:52.340
where it fakes out the path.

00:58:52.340 --> 00:58:54.260
Cause there's always like something that falls apart.

00:58:54.260 --> 00:58:59.380
But if the pip itself like say, okay, we can import from a memory stream and not just

00:58:59.380 --> 00:59:03.700
from file system, then these things would be like, oh, well, if that's the case, here's how you just

00:59:03.700 --> 00:59:08.260
embed those and off it goes, you know, it'd be more like go or so here's your one thing you run it.

00:59:08.260 --> 00:59:08.820
You know what I mean?

00:59:08.820 --> 00:59:09.380
Yeah.

00:59:09.380 --> 00:59:09.620
Yeah.

00:59:09.620 --> 00:59:11.700
There's definitely interesting stuff to explore there.

00:59:11.700 --> 00:59:17.380
And there's some interesting tools that exist already to try to facilitate some of those things.

00:59:17.380 --> 00:59:18.820
Yeah.

00:59:18.820 --> 00:59:20.900
It's also we've invested time in yet though.

00:59:20.900 --> 00:59:21.300
Yep.

00:59:21.300 --> 00:59:21.700
All right.

00:59:21.700 --> 00:59:23.540
Well, yeah, I was thinking in high app is similar.

00:59:23.540 --> 00:59:24.020
Yeah.

00:59:24.020 --> 00:59:24.260
Yeah.

00:59:24.260 --> 00:59:26.340
Py app is definitely, I've used py app before.

00:59:26.340 --> 00:59:28.020
Actually I have an app running in my system right now.

00:59:28.020 --> 00:59:29.460
It's in a little menu bar thing.

00:59:29.460 --> 00:59:31.780
That's a py app app and it works well.

00:59:31.780 --> 00:59:32.420
It does work well.

00:59:32.420 --> 00:59:32.900
Yep.

00:59:32.900 --> 00:59:33.380
Okay.

00:59:33.380 --> 00:59:39.220
so the project API is kind of like, you know, if you use you, if you've used like poetry or

00:59:39.220 --> 00:59:45.060
PDM, like these tools that are oriented around working on a project, and you have a py project

00:59:45.060 --> 00:59:48.500
toml that defines your dependencies and you might have some sort of structure.

00:59:48.500 --> 00:59:52.420
it's based around that kind of workflow of working on a project.

00:59:52.420 --> 00:59:56.740
which, you know, is that's like one way that people work with Python, but there's a

00:59:56.740 --> 00:59:57.300
lot of ways.

00:59:57.300 --> 01:00:00.180
There's a lot of things that people do with Python, which is why we have a couple of different APIs.

01:00:00.180 --> 01:00:00.740
Right.

01:00:00.740 --> 01:00:09.940
So we also have this tool API, like uv tool install, uv tool run, which we've alias to UVX.

01:00:09.940 --> 01:00:10.820
These are for running.

01:00:10.820 --> 01:00:11.940
This is interesting.

01:00:11.940 --> 01:00:12.420
Yeah.

01:00:12.420 --> 01:00:12.900
Yeah.

01:00:12.900 --> 01:00:17.540
These are for running like one-off, not one-off commands, but like things that you want installed globally.

01:00:17.540 --> 01:00:22.660
So like you might want rough installed globally on your machine so you can run it on a bunch of different projects.

01:00:22.660 --> 01:00:32.580
We call those like tools, and you install them, you know, similar if you've used pipX before we install them into dedicated environments, and put them on your path.

01:00:32.580 --> 01:00:35.620
and there's a lot of really cool stuff here.

01:00:35.620 --> 01:00:38.420
Like I now use UVX all the time when I want to run things.

01:00:38.420 --> 01:00:46.420
So I'll do like UVX rough check and that translates to uv tool run rough, you know, run the check command behind the scenes.

01:00:46.420 --> 01:00:48.980
What it does is it finds latest version of rough.

01:00:48.980 --> 01:00:53.940
It creates an environment with that version, and then it runs the command using, using the rough binary in there.

01:00:53.940 --> 01:00:57.620
and there's very, there's really no overhead to that.

01:00:57.620 --> 01:00:59.780
if you're kind of running it repeatedly.

01:00:59.780 --> 01:01:08.260
So, you know, this, this is oriented around like a different way of working with Python, where you have these tools that you need to run on your machine.

01:01:08.260 --> 01:01:10.500
And you use them for different things.

01:01:10.500 --> 01:01:17.700
so we have like the project interface for working on a project, and then we have the tool interface for running Python, you know, command line tools.

01:01:17.700 --> 01:01:18.100
Yeah.

01:01:18.100 --> 01:01:22.580
So UVX run, well, UVX is the run version.

01:01:22.580 --> 01:01:22.980
Yeah.

01:01:22.980 --> 01:01:24.580
And you've also got the install.

01:01:24.580 --> 01:01:34.420
I have some thoughts on when I might do one or the other, but the uv tool install seems like something you might want to run and have around and have auto complete in your shell.

01:01:34.420 --> 01:01:37.380
So I could type R U tab and get rough, or I could.

01:01:37.380 --> 01:01:37.940
Yep.

01:01:37.940 --> 01:01:37.940
Yeah.

01:01:37.940 --> 01:01:38.340
UV tool.

01:01:38.340 --> 01:01:42.660
I think for things you're going to run it repeatedly, it makes a lot of sense to install them.

01:01:42.660 --> 01:01:51.620
also if you have, like, if you ran uv tool install rough, and then you ran like UVX rough, we would use the installed version.

01:01:51.620 --> 01:01:58.740
So if you already have the tool installed, we'll still pull the installed version, assuming it's compatible with the version request that you made.

01:01:58.740 --> 01:01:59.300
Yeah.

01:01:59.300 --> 01:01:59.860
Yeah.

01:01:59.860 --> 01:02:05.140
So like, yeah, I generally like uv tool install things that I'm going to run, you know, multiple times.

01:02:05.140 --> 01:02:10.420
the other really nice thing about uv tool install is we have uv tool upgrade.

01:02:10.420 --> 01:02:14.980
So you can do like uv tool upgrade --all and we'll upgrade all the installed tools.

01:02:14.980 --> 01:02:18.020
so you don't have to think about like, which tools do I have installed?

01:02:18.020 --> 01:02:19.140
Like what versions are they at?

01:02:19.140 --> 01:02:19.940
Are they out of date?

01:02:19.940 --> 01:02:24.980
so, you know, it kind of gives you a way to manage all the Python tools that you're using,

01:02:24.980 --> 01:02:26.900
at a, at a kind of global level.

01:02:26.900 --> 01:02:32.020
so, you know, we have a lot of commands, like in our docs, we have a lot of like automation tooling

01:02:32.020 --> 01:02:35.140
built around Python, like, you know, rough and uv are written in rust, but a lot of our like

01:02:35.140 --> 01:02:38.180
documentation tooling, like we have a lot of scripting in Python.

01:02:38.180 --> 01:02:44.740
and all of our docs now in the doc string at the top have like the UVX command that you run to

01:02:44.740 --> 01:02:45.620
like run the script.

01:02:45.620 --> 01:02:46.020
Nice.

01:02:46.020 --> 01:02:48.260
And so I just like copy that and paste that.

01:02:48.260 --> 01:02:50.820
And then the script just runs with all of its dependencies.

01:02:50.820 --> 01:02:57.780
So, so it's like, it's just super, it's just very, very convenient.

01:02:57.780 --> 01:03:00.820
I think, like all these are APIs and the way they come together.

01:03:00.820 --> 01:03:04.740
and, there's a lot, I know it's a lot of different stuff.

01:03:04.740 --> 01:03:09.780
And that was actually my biggest fear with this release was it's hard to succinctly explain

01:03:09.780 --> 01:03:13.540
what this release is, because it's a lot of different things.

01:03:13.540 --> 01:03:17.620
And it's not like when we released uv or in February, when we released uv in February,

01:03:17.620 --> 01:03:19.300
it's like, this is a new tool.

01:03:19.300 --> 01:03:21.940
It, if you know, Pip, you understand what this is, right?

01:03:21.940 --> 01:03:25.700
It was much easier to explain, I think in a succinct way, like what we're doing.

01:03:25.700 --> 01:03:30.260
and in this release, it's like, it's actually like a lot of different stuff that comes together

01:03:30.260 --> 01:03:36.820
to tell what I think is a very coherent story, but it's hard to succinctly explain exactly what,

01:03:36.820 --> 01:03:38.260
what, you know, what we did.

01:03:38.260 --> 01:03:42.580
and I was very like the response to it.

01:03:42.580 --> 01:03:48.100
I was really heartened, you know, to see that people were, people were like getting

01:03:48.100 --> 01:03:50.100
it and they were getting different parts of it.

01:03:50.100 --> 01:03:52.340
Like different parts of it were speaking to different people.

01:03:52.340 --> 01:03:55.860
because I actually think different parts of it are like relevant to different ways that

01:03:55.860 --> 01:03:56.820
people work with Python.

01:03:56.820 --> 01:04:00.580
So a lot of people were excited about, you know, the lock files, the uv run.

01:04:00.580 --> 01:04:04.340
A lot of people were excited about the fact that we have this like scripting API.

01:04:04.340 --> 01:04:08.660
So you can like have these standalone scripts where the dependencies are embedded in them.

01:04:08.660 --> 01:04:13.220
And if you do uv run that script, you know, we just resolve the dependencies, download,

01:04:13.220 --> 01:04:16.260
download them and run the command with those dependencies available, run the script with

01:04:16.260 --> 01:04:17.220
those dependencies available.

01:04:17.220 --> 01:04:19.380
So you can have these like hermetic Python scripts.

01:04:19.380 --> 01:04:22.020
you know, we had the Python install API.

01:04:22.020 --> 01:04:24.900
So there were just different things that were resonating with people, which I think is what

01:04:24.900 --> 01:04:27.300
made me happiest in the response to it.

01:04:27.300 --> 01:04:33.060
Did you read, I'm sure you read Armin's Ryan uv August is harvest season of Python packaging.

01:04:33.060 --> 01:04:33.380
Yeah.

01:04:33.380 --> 01:04:33.860
Yeah.

01:04:33.860 --> 01:04:39.140
That's a pretty positive take and a pretty wide ranging recommendation there.

01:04:39.140 --> 01:04:40.180
It's, it's pretty interesting.

01:04:40.180 --> 01:04:40.740
Yeah.

01:04:40.740 --> 01:04:43.620
The relationship with Rye is something we get a lot of questions about.

01:04:43.620 --> 01:04:47.140
and you know, I think like,

01:04:47.140 --> 01:04:52.100
when we, you know, when we took over Rye, the goal was always like, we want to build

01:04:52.100 --> 01:04:57.300
UV up until to be a suitable replacement that people can migrate from ride to uv.

01:04:57.300 --> 01:05:03.220
but, and we're getting further along that path, but there's still like things we're

01:05:03.220 --> 01:05:03.860
missing.

01:05:03.860 --> 01:05:07.620
we don't plan on like deprecating Rye any, you know, anytime soon, but all of our

01:05:07.620 --> 01:05:12.100
like new feature development is really happening in uv and riots mostly like bug fixes, like keeping

01:05:12.100 --> 01:05:12.740
things up to date.

01:05:12.740 --> 01:05:16.900
so, you know, Rye has actually benefited a lot from uv.

01:05:16.900 --> 01:05:18.420
Cause it uses uv under the hood.

01:05:18.420 --> 01:05:22.900
So like Rye has just gotten like, there's new features or there's, you know, it's gotten

01:05:22.900 --> 01:05:23.300
faster.

01:05:23.300 --> 01:05:27.940
but you know, our goal is really to like find the things that are missing from Rye and

01:05:27.940 --> 01:05:29.460
make sure we can support them in uv.

01:05:29.460 --> 01:05:29.860
Yeah.

01:05:29.860 --> 01:05:36.340
Last one we've got to cover here is you have any, points out single file scripts with dependencies.

01:05:36.340 --> 01:05:38.260
That's the last one, the script execution.

01:05:38.260 --> 01:05:44.020
So yeah, one of the huge problems is I, one of the reasons I think, Tushar was suggesting

01:05:44.020 --> 01:05:49.540
it and I'm also really excited about it is if you could bundle your code into an application,

01:05:49.540 --> 01:05:53.460
one of the benefits is you don't have to have a conversation with everyone that runs it.

01:05:53.940 --> 01:05:54.340
Yeah.

01:05:54.340 --> 01:05:57.220
How to do virtual environments, how to do package management, all this kind of stuff.

01:05:57.220 --> 01:05:59.620
You just say, run, click it or, or whatever.

01:05:59.620 --> 01:06:06.900
And somewhat short of that is I want to give you just a script of some sort, but, and just say,

01:06:06.900 --> 01:06:08.100
run this, right?

01:06:08.100 --> 01:06:09.220
Here's the script app.

01:06:09.220 --> 01:06:11.060
You have an example.py to run that.

01:06:11.060 --> 01:06:17.220
But if you put some sort of magical incantation, which it's backed by a PEP to say what it actually

01:06:17.220 --> 01:06:23.780
requires then uv --script, something, it'll just see that and go, okay, or uv run rather.

01:06:23.780 --> 01:06:26.820
It'll see that install the pieces ephemerally, right?

01:06:26.820 --> 01:06:27.220
And run.

01:06:27.220 --> 01:06:28.020
That's, that's pretty cool.

01:06:28.020 --> 01:06:28.820
Yeah, exactly.

01:06:28.820 --> 01:06:31.300
So as our kind of our last thing before we run out of time.

01:06:31.300 --> 01:06:31.940
It's really cool.

01:06:31.940 --> 01:06:33.380
This is, this is backed by a pep.

01:06:33.380 --> 01:06:36.420
I think it's seven, two, three, if I recall correctly.

01:06:36.420 --> 01:06:40.820
So this is like a standardized, this syntax at the top of the file is standardized.

01:06:40.820 --> 01:06:42.980
might not be mentioned somewhere.

01:06:42.980 --> 01:06:43.540
Yeah.

01:06:43.540 --> 01:06:46.020
There's a bunch of PEP conversations, but not the one.

01:06:46.740 --> 01:06:47.140
Not a real.

01:06:47.140 --> 01:06:47.380
Yeah.

01:06:47.380 --> 01:06:52.100
We sometimes try and like shy away from talking about user facing features in terms of peps.

01:06:52.100 --> 01:06:52.980
yeah.

01:06:52.980 --> 01:06:53.940
It's because.

01:06:53.940 --> 01:06:54.500
There you go.

01:06:54.500 --> 01:06:54.900
It's not.

01:06:54.900 --> 01:06:54.900
It's not.

01:06:54.900 --> 01:06:55.300
It's not.

01:06:55.300 --> 01:06:55.300
Three.

01:06:55.300 --> 01:06:55.300
That's it.

01:06:55.300 --> 01:06:55.780
Yeah.

01:06:55.780 --> 01:06:55.940
Okay.

01:06:55.940 --> 01:06:56.500
Well, there it is.

01:06:56.500 --> 01:07:02.500
but anyway, the, so the idea here is like, you can declare the dependencies for the

01:07:02.500 --> 01:07:04.020
script, right in the script.

01:07:04.020 --> 01:07:09.220
And then when you do uv run that script, we read that dependency data and we've run the script

01:07:09.220 --> 01:07:10.900
in an environment with those dependencies.

01:07:10.900 --> 01:07:16.260
so, the other, I think really cool piece here

01:07:16.260 --> 01:07:19.620
is I talked before about uv ad.

01:07:19.620 --> 01:07:24.980
So if you're in a project with a PI project, you can do like uv ad, FastAPI or whatever,

01:07:24.980 --> 01:07:27.700
but you can also do that for scripts.

01:07:27.700 --> 01:07:31.300
So if you scroll, if you look for like uv ad --script.

01:07:31.300 --> 01:07:33.700
So you referred to this like magical incantation at the top.

01:07:33.700 --> 01:07:35.620
We will actually like create that for you.

01:07:35.620 --> 01:07:42.500
So if you do uv ad --dash script, and then the script name and the dependencies, like we'll actually just like put that stuff in there for you.

01:07:42.500 --> 01:07:44.420
So you don't actually have to like remember how to do that.

01:07:44.420 --> 01:07:50.500
Like you can just do uv run ----script, and we will actually like populate that field.

01:07:50.980 --> 01:07:52.500
So you can create a script.

01:07:52.500 --> 01:07:54.340
You can manage the dependencies in it with uv.

01:07:54.340 --> 01:07:54.820
You can run it.

01:07:54.820 --> 01:07:57.460
This is like super useful.

01:07:57.460 --> 01:08:02.980
There's some interesting conversations happening now too around like, what if we want to have a lock file for these?

01:08:02.980 --> 01:08:05.060
Because it's a little bit different, right?

01:08:05.060 --> 01:08:07.060
This is a, this is the list of dependencies.

01:08:07.060 --> 01:08:08.340
It's not the list of resolved versions.

01:08:08.340 --> 01:08:12.980
So if you wanted to have like full reproducibility, you probably want a lock file.

01:08:12.980 --> 01:08:19.620
And the, not just these things versions, but they're the transitive closure of all the dependencies.

01:08:19.620 --> 01:08:19.940
Correct.

01:08:19.940 --> 01:08:22.020
You know, everything they depend on.

01:08:22.020 --> 01:08:22.580
Yeah.

01:08:22.580 --> 01:08:23.220
Yeah.

01:08:23.220 --> 01:08:25.860
So, you know, we do that for projects.

01:08:25.860 --> 01:08:28.660
Like if you do uv lock in a project, we create this lock file.

01:08:28.660 --> 01:08:30.580
That's all the transitive dependencies.

01:08:30.580 --> 01:08:34.260
It locks the exact URLs, the hashes, the versions, everything.

01:08:34.260 --> 01:08:37.460
We don't do that right now for scripts, just because there's no,

01:08:37.460 --> 01:08:38.900
there isn't really a place to put it.

01:08:38.900 --> 01:08:38.900
Yeah.

01:08:38.900 --> 01:08:40.740
But we're kind of thinking about, like you could go on scripts.

01:08:40.740 --> 01:08:42.580
Have you considered the Windows registry?

01:08:42.580 --> 01:08:46.420
I mean, you could always just like integrate that and import that over to Mac and Linux.

01:08:46.420 --> 01:08:46.980
That'd be fine.

01:08:46.980 --> 01:08:47.460
Yeah.

01:08:47.460 --> 01:08:48.980
Just put everything in the Windows registry.

01:08:48.980 --> 01:08:49.540
Yeah.

01:08:49.540 --> 01:08:51.140
That's a, that's a winning idea.

01:08:51.140 --> 01:08:51.700
Yeah.

01:08:51.700 --> 01:08:53.540
No, I totally get it.

01:08:53.540 --> 01:08:54.180
Yeah.

01:08:54.180 --> 01:08:57.620
I mean, the other thing that's interesting too, is like the notebooks, like people are thinking about

01:08:57.620 --> 01:09:02.900
how can we add this kind of functionality to notebooks and, you know, being able to declare

01:09:02.900 --> 01:09:06.980
the dependencies for a notebook right in the notebook, being able to lock them too.

01:09:06.980 --> 01:09:10.660
There's a lot of cool stuff that we can build now that we have all these primitives connected.

01:09:10.660 --> 01:09:11.860
Yeah, for sure.

01:09:11.860 --> 01:09:15.940
I mean, you could do something like take a hash of the file and then use that hash as the name

01:09:15.940 --> 01:09:18.100
and as long as the file doesn't change, it'll run the same.

01:09:18.100 --> 01:09:18.500
I don't know.

01:09:18.500 --> 01:09:18.900
Yeah.

01:09:18.900 --> 01:09:19.380
Yeah.

01:09:19.380 --> 01:09:21.220
There's, I'll leave that to y'all.

01:09:21.220 --> 01:09:26.420
So I think, I mean, we didn't even talk about the speed for some of these things and there's,

01:09:26.420 --> 01:09:28.260
there's a whole lot of stuff here, but.

01:09:28.260 --> 01:09:31.780
There's a lot of good stories to tell about how we made some of these things,

01:09:31.780 --> 01:09:37.140
the problems we had to solve to like really some of this stuff, but they'll make for,

01:09:37.140 --> 01:09:40.180
you know, if I dream they'll make for good blog posts.

01:09:40.180 --> 01:09:42.500
In reality, they'll probably make for good Twitter threads.

01:09:42.500 --> 01:09:43.940
Yeah.

01:09:43.940 --> 01:09:44.420
Yeah.

01:09:44.420 --> 01:09:44.980
Absolutely.

01:09:44.980 --> 01:09:45.300
All right.

01:09:45.300 --> 01:09:47.060
Well, Charlie, thanks for being here.

01:09:47.060 --> 01:09:53.140
Maybe give us a final thoughts and words for folks who are interested in this, this new layer of uv.

01:09:53.140 --> 01:09:53.540
Yeah.

01:09:53.540 --> 01:09:59.060
I mean, I think like this is, this release is really different from the previous release in

01:09:59.060 --> 01:10:05.060
part, because we designed and built a lot of stuff that's pretty new for people and also requires

01:10:05.060 --> 01:10:07.940
people to, to change their workflows in a lot of cases.

01:10:07.940 --> 01:10:10.980
Like the previous release, it was like, this is a lot like pip.

01:10:10.980 --> 01:10:12.100
So kind of just drop it in.

01:10:12.100 --> 01:10:14.740
And now it's like, here's a bunch of ways to use this tools.

01:10:14.740 --> 01:10:18.580
If you work, you, it does require you to work a certain way and kind of think a certain way,

01:10:18.580 --> 01:10:19.860
but we think it's really powerful.

01:10:19.860 --> 01:10:23.220
And that's all stuff we're like kind of trying to figure out.

01:10:23.220 --> 01:10:23.460
Right.

01:10:23.460 --> 01:10:28.580
So we're very eager for, you know, I'm sure, I'm sure all this stuff will change and I'm just

01:10:28.580 --> 01:10:30.580
eager for like, like every release.

01:10:30.580 --> 01:10:34.260
I'm just excited to have it out, have people testing it, have people using it so we can get feedback.

01:10:34.900 --> 01:10:38.340
And so, you know, I would love for you to try it out.

01:10:38.340 --> 01:10:42.260
I'd love you even more for you to come file issues about the things that don't work so we can make

01:10:42.260 --> 01:10:42.980
it better and better.

01:10:42.980 --> 01:10:47.940
But I think we have a really cool foundation here.

01:10:47.940 --> 01:10:52.820
We can build a lot of things that hopefully make working with Python a lot, you know,

01:10:52.820 --> 01:10:58.260
a lot easier in the sense that the tools kind of get out of your way rather than getting in your way.

01:10:58.260 --> 01:11:03.380
So yeah, that'll be our focus for the next, for the next while is, is seeing how people are using

01:11:03.380 --> 01:11:04.820
this stuff and seeing where we can make it better.

01:11:04.820 --> 01:11:07.460
Well, I think it's pretty awesome what you're up to.

01:11:07.460 --> 01:11:08.340
Big fan of uv.

01:11:08.340 --> 01:11:10.580
So happy to see the project.

01:11:10.580 --> 01:11:11.140
Thank you.

01:11:11.140 --> 01:11:11.940
I appreciate it.

01:11:11.940 --> 01:11:13.140
And always happy to have you on.

01:11:13.140 --> 01:11:13.700
So thanks.

01:11:13.700 --> 01:11:14.420
Thank you.

01:11:14.420 --> 01:11:14.740
Yeah.

01:11:14.740 --> 01:11:15.220
See you later.

01:11:15.220 --> 01:11:15.700
Bye.

01:11:15.700 --> 01:11:16.260
Bye.

01:11:16.260 --> 01:11:16.660
Bye.

01:11:16.660 --> 01:11:17.300
Bye.

01:11:17.300 --> 01:11:19.620
This has been another episode of Talk Python to Me.

01:11:19.620 --> 01:11:21.460
Thank you to our sponsors.

01:11:21.460 --> 01:11:23.060
Be sure to check out what they're offering.

01:11:23.060 --> 01:11:24.500
It really helps support the show.

01:11:24.500 --> 01:11:28.900
This episode is sponsored by Posit Connect from the makers of Shiny.

01:11:28.900 --> 01:11:33.380
Publish, share, and deploy all of your data projects that you're creating using Python.

01:11:33.380 --> 01:11:39.940
Streamlit, Dash, Shiny, Bokeh, FastAPI, Flask, Quarto, Reports, Dashboards, and APIs.

01:11:39.940 --> 01:11:42.340
Posit Connect supports all of them.

01:11:42.340 --> 01:11:46.820
Try Posit Connect for free by going to talkpython.fm/posit.

01:11:46.820 --> 01:11:49.860
Want to level up your Python?

01:11:49.860 --> 01:11:54.020
We have one of the largest catalogs of Python video courses over at Talk Python.

01:11:54.020 --> 01:11:59.060
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:11:59.060 --> 01:12:01.780
And best of all, there's not a subscription in sight.

01:12:01.780 --> 01:12:04.420
Check it out for yourself at training.talkpython.fm.

01:12:04.420 --> 01:12:09.540
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:12:09.540 --> 01:12:10.980
We should be right at the top.

01:12:10.980 --> 01:12:16.020
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:12:16.020 --> 01:12:19.940
and the direct RSS feed at /rss on talkpython.fm.

01:12:19.940 --> 01:12:23.060
We're live streaming most of our recordings these days.

01:12:23.060 --> 01:12:26.500
If you want to be part of the show and have your comments featured on the air,

01:12:26.500 --> 01:12:30.820
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:12:30.820 --> 01:12:33.060
This is your host, Michael Kennedy.

01:12:33.060 --> 01:12:34.180
Thanks so much for listening.

01:12:34.180 --> 01:12:35.380
I really appreciate it.

01:12:35.380 --> 01:12:45.220
Now get out there and write some Python code.

01:12:45.220 --> 01:12:46.420
I'll see you next time.

01:12:46.420 --> 01:12:47.060
I'll see you next time.

01:12:47.060 --> 01:12:47.380
Bye.

01:12:47.380 --> 01:12:48.380
Bye.

01:12:48.380 --> 01:12:49.380
Bye.

01:12:49.380 --> 01:12:50.380
Bye.

01:12:50.380 --> 01:12:51.380
Bye.

01:12:51.380 --> 01:12:52.380
Bye.

01:12:52.380 --> 01:12:53.380
Bye.

01:12:53.380 --> 01:12:54.380
Bye.

01:12:54.380 --> 01:12:54.880
you

01:12:54.880 --> 01:12:55.380
you

01:12:55.380 --> 01:12:55.880
you

01:12:55.880 --> 01:12:57.880
Thank you.

