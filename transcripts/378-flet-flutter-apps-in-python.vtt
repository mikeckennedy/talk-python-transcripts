WEBVTT

00:00:00.001 --> 00:00:05.000
Have you heard of Flutter? It's a modern and polished UI framework for writing mobile apps,

00:00:05.000 --> 00:00:11.200
desktop apps, and even web apps. While interesting, you may have kept your distance because Flutter is

00:00:11.200 --> 00:00:16.240
a Dart language-based framework. But with the project we're covering here today, Flutter,

00:00:16.240 --> 00:00:21.860
many Flutter UIs can now be written in pure Python. Flutter is a very exciting development

00:00:21.860 --> 00:00:26.640
in the GUI space for Python devs, and we have the creator, Fyodor Fitzner, here to take us

00:00:26.640 --> 00:00:32.540
through it. This is Talk Python To Me, episode 378, recorded August 18th, 2022.

00:00:32.540 --> 00:00:51.560
Welcome to Talk Python To Me, a weekly podcast on Python. This is your host, Michael Kennedy. Follow

00:00:51.560 --> 00:00:55.860
me on Twitter, where I'm @mkennedy, and keep up with the show and listen to past episodes at

00:00:55.860 --> 00:01:02.240
talkpython.fm, and follow the show on Twitter via at Talk Python. We've started streaming most of our

00:01:02.240 --> 00:01:08.080
episodes live on YouTube. Subscribe to our YouTube channel over at talkpython.fm/youtube to get

00:01:08.080 --> 00:01:14.020
notified about upcoming shows and be part of that episode. This episode is brought to you by Sentry.

00:01:14.020 --> 00:01:19.560
Join Sentry at their conference, Dex, Sort the Madness, the conference for every developer to join

00:01:19.560 --> 00:01:24.260
as they investigate the movement and trends for better and more reliable developer experiences.

00:01:25.080 --> 00:01:31.760
Get your seat now at talkpython.fm/Dex. It's also brought to you by IRL, an original podcast

00:01:31.760 --> 00:01:37.040
from Mozilla. This season, they're focusing on a topic very relevant to Python developers,

00:01:37.040 --> 00:01:42.340
AI in real life. Check out an episode at talkpython.fm/IRL.

00:01:42.340 --> 00:01:48.020
Transcripts for this and all of our episodes are brought to you by Assembly AI. Do you need a great

00:01:48.020 --> 00:01:52.540
automatic speech-to-text API? Get human-level accuracy in just a few lines of code. Visit

00:01:52.540 --> 00:01:54.880
 talkpython.fm/assemblyai.

00:01:54.880 --> 00:01:56.180
Hey, Peter.

00:01:56.180 --> 00:01:59.220
Hi, Michael. Thanks for inviting me to your podcast.

00:01:59.220 --> 00:02:02.280
Yeah, absolutely. I'm so happy to have you on the podcast.

00:02:02.280 --> 00:02:06.220
I'm Peter Feitzner. I'm working on this flat project.

00:02:06.220 --> 00:02:07.700
So excited about your project.

00:02:07.700 --> 00:02:13.480
Well, I'm excited as well. It's something new. Yeah, it's open source. I love open source. It's

00:02:13.480 --> 00:02:17.680
actually, this project is a spinoff. It's like a second iteration.

00:02:17.680 --> 00:02:21.420
You had a project called Pagelet, right? Is that what you're referring to?

00:02:21.780 --> 00:02:29.440
Pagelet. So yeah, it was Pagelet. So it started as a kind of internal tool for making like, you know,

00:02:29.440 --> 00:02:37.000
quick apps, like throwaway apps. And it was for web mostly. So it was like, it started like as a web

00:02:37.000 --> 00:02:46.560
thing. And it was Pagelet. Then I shortened the name to Pagelet. And some guy on Sacker News

00:02:46.560 --> 00:02:53.820
said that it's probably about like old gram, something like, or Postgres, PL. Yeah. So I got

00:02:53.820 --> 00:03:00.160
confused. And I started calling it like Pagelet. So I didn't like the name. Yeah. And I did like that

00:03:00.160 --> 00:03:06.580
it's only web. Yeah. Because, you know, the next step right after web, I started looking into like

00:03:06.580 --> 00:03:14.140
doing desktop apps with this stuff and realized that actually the only choice is using web view.

00:03:14.140 --> 00:03:22.100
And web view is really platform specific. So on macOS is one thing is like Safari. On Windows,

00:03:22.100 --> 00:03:28.320
it's like either like web view one, web view two, which is quite a separate number, et cetera, et cetera.

00:03:28.320 --> 00:03:34.340
A lot of times they don't have full support for modern HTML as well. So certain things you do

00:03:34.340 --> 00:03:39.300
might act janky on a certain version of an OS. Yeah, it's always a weird thing, isn't it?

00:03:39.300 --> 00:03:48.260
Yeah. So this page web was made on React. And I realized you cannot open it like right away in

00:03:48.260 --> 00:03:54.260
the web view on Windows because it's this, you know, Microsoft Edge browser. So we have to add some like

00:03:54.260 --> 00:04:01.260
poly fields, et cetera, et cetera, to make it work on Windows. So yeah. Then I don't remember the exact

00:04:01.260 --> 00:04:07.800
moment, but probably I saw like an announcement from Google that they're releasing this like

00:04:07.800 --> 00:04:12.400
Flutter, something like into production for web and desktop.

00:04:13.220 --> 00:04:18.800
And I've become interested. What is that? You know, like, and I look into like Flutter thing,

00:04:18.800 --> 00:04:24.100
you know, and I realized actually that it was, it's been on the market like for a long time and

00:04:24.100 --> 00:04:25.780
mostly useful. Absolutely.

00:04:25.780 --> 00:04:28.520
For, yeah, mobile apps. And,

00:04:28.520 --> 00:04:34.780
I'd always kind of dismissed Dart as just kind of like a weird coffee script type of thing. It's like,

00:04:34.780 --> 00:04:40.340
oh, just another language to program, to write JavaScript. But then when Flutter came around,

00:04:40.340 --> 00:04:46.300
it got way more interesting. So before we dive into what Flutter is and how we work with it and

00:04:46.300 --> 00:04:52.060
why you built it and so on, let's actually take a bit of a step back and let's actually talk about

00:04:52.060 --> 00:04:57.140
the two building blocks or one of the building blocks. We have Dart, the programming language,

00:04:57.140 --> 00:05:03.940
which has been around since 2011 or so. And then we have Flutter, the UI framework that traditionally,

00:05:03.940 --> 00:05:09.620
or normally you would use with Dart to build initially, I think it was just initially web apps,

00:05:09.620 --> 00:05:10.500
wasn't it? Yeah.

00:05:10.500 --> 00:05:14.740
And then they added mobile and then they added desktop and add the combination of those three

00:05:14.740 --> 00:05:15.580
things is fantastic.

00:05:15.580 --> 00:05:15.580
Exactly.

00:05:15.580 --> 00:05:21.680
All right. We'll start with Dart. Tell people about Dart. I'm not a super expert in it, but I have been

00:05:21.680 --> 00:05:28.400
experimenting to see whether using Dart and Flutter might be the right way to rebuild the Talk Python

00:05:28.400 --> 00:05:35.480
training mobile apps because they're okay now. They have bugs. There's a whole story about the app store,

00:05:35.560 --> 00:05:39.340
about why they're not fixed as part of the problem, not just the way that they're written,

00:05:39.340 --> 00:05:43.000
but I would really like to modernize them. And I'm thinking that Flutter is the way to go.

00:05:43.000 --> 00:05:48.940
So I'm personally interested, but not very experienced in it, but I've done a little bit. So that's the

00:05:48.940 --> 00:05:53.820
perspective I'm coming at this with. Tell us maybe about your background with it as well. And then we'll

00:05:53.820 --> 00:05:57.760
talk a tad about Dart and Flutter before we get into the Python side.

00:05:57.760 --> 00:06:01.800
Sure. So I have to say, I'm coming from Microsoft world.

00:06:01.800 --> 00:06:02.160
Okay.

00:06:02.160 --> 00:06:07.360
From .NET. I've been in .NET like since the eldest, you know, so.

00:06:07.360 --> 00:06:10.160
Since like the year 2001 or something, right?

00:06:10.160 --> 00:06:17.160
Yeah. Yeah. I remember we were going through the language specifications and sent to us by Microsoft,

00:06:17.160 --> 00:06:24.320
you know, like in the word Microsoft Word file. So at that time, so web, then web, I'm a JavaScript guy,

00:06:24.320 --> 00:06:29.400
of course. Yeah. And then I learned like anyone else, like TypeScript and then Flutter.

00:06:29.400 --> 00:06:37.000
Yeah. So my impressions about Dart are very, very positive. You know, it's so nice. I mean,

00:06:37.000 --> 00:06:43.400
maybe it's me, but it looks and it feels better than TypeScript. Like to me, maybe it's because of,

00:06:43.400 --> 00:06:47.640
Yeah. They have a great tooling in Visual Studio Code, maybe. Yeah.

00:06:47.640 --> 00:06:54.440
But it felt so natural to write something in Dart. And especially, I love this, like this sound,

00:06:54.440 --> 00:07:01.080
no references, you know, like where you can't have basically nulls. It's a really huge problem. Like

00:07:01.080 --> 00:07:08.520
this nulls or nils or like, so yeah, Rust, like did, dealt with that, you know, there are no nulls. Go,

00:07:08.520 --> 00:07:15.320
some of the way like in between. So, you know, this flat server is written in Go and in Go, you can't have

00:07:15.320 --> 00:07:21.960
like null strings, but you can't have null references, like new references. But Dart is great. By default,

00:07:21.960 --> 00:07:26.200
it doesn't allow nulls and it makes your app working as expected.

00:07:26.200 --> 00:07:31.480
Yeah. And for people who don't know, Dart is out in the audience. Tushar puts it as a modern language,

00:07:31.480 --> 00:07:36.920
which is the mix of the good parts of JavaScript and Java. I would say it feels a bit like Java,

00:07:36.920 --> 00:07:43.480
a bit like C# in its syntax and the way that it works. Also a little bit like Swift with its optional,

00:07:43.480 --> 00:07:49.800
like explicit optional type system, kind of a mix of all the stuff that was either in those languages or

00:07:49.800 --> 00:07:54.920
came out in Swift later. And it's a pretty nice language. It's really different than Python.

00:07:54.920 --> 00:07:58.920
Oh, well, yeah. Especially untyped Python, right?

00:07:58.920 --> 00:08:05.240
Yeah. Yeah. You can see all different things in the Dart, like TypeScript, you know, like C#. Yeah,

00:08:05.240 --> 00:08:12.360
I agree. But I mean, I would love to see many things like implemented in Dart, like transfer to

00:08:12.360 --> 00:08:17.560
JavaScript with TypeScript, you know, like it's pretty easy to write. Yeah, it is. Before we,

00:08:17.560 --> 00:08:22.280
if people are listening, we might not want to scare them away thinking they would have to learn Dart

00:08:22.280 --> 00:08:26.280
in order to do this, right? Sure. The whole project that you are working on

00:08:26.280 --> 00:08:26.280
Yep.

00:08:26.280 --> 00:08:31.880
is sort of a, what if we use Python instead of Dart, but we still kind of use the building blocks

00:08:31.880 --> 00:08:36.920
of Flutter, which I think we should probably discuss as well, because it's a unique way of programming.

00:08:36.920 --> 00:08:42.600
Yeah. Absolutely. Yeah. The problem is not in Dart itself. Dart is a great language. I mean,

00:08:42.600 --> 00:08:48.600
you can spend like a few days and pick up basic things and you become really decent and write that.

00:08:48.600 --> 00:08:55.400
The Dart is not the problem. The problem isn't in Flutter. I mean, it's a great framework. It's so

00:08:55.400 --> 00:09:01.800
flexible. It's so powerful, but it could be kind of like a steep learning curve, you know, like I would

00:09:01.800 --> 00:09:07.960
compare Flutter to React. So if you come in from React, it could be easier to you, you know?

00:09:07.960 --> 00:09:08.920
React Native. Yeah.

00:09:08.920 --> 00:09:15.800
So yeah, you know what I, again, as a guy coming from like .NET world, I remember those times when we

00:09:15.800 --> 00:09:23.000
were writing apps using like ASP.NET web forms, you know, stateful controls sessions, you know, on server

00:09:23.000 --> 00:09:31.880
side. And now we translated to these stateless apps, like single page applications where the UI is filled

00:09:31.880 --> 00:09:38.760
of like application state. And to my mind, this application state, managing application state,

00:09:38.760 --> 00:09:43.400
like mutating application state is the most challenging thing, you know?

00:09:43.400 --> 00:09:43.880
It is.

00:09:43.880 --> 00:09:49.480
It's all right for a simple hello world apps, but if you write something really complex,

00:09:49.480 --> 00:09:55.080
there are a lot of tons of libraries, you know, like Redux, probably the most people like there is

00:09:55.080 --> 00:09:59.240
blog for Flutter. So it's a really challenging problem, you know?

00:09:59.240 --> 00:10:03.160
Yeah. And I've been working, like I said, I've been exploring and trying to learn some Flutter to

00:10:03.160 --> 00:10:07.960
see if it makes sense to work with. And the state stuff about it is crazy. It's really difficult to

00:10:07.960 --> 00:10:12.280
figure out kind of where does this fit in my application code?

00:10:12.280 --> 00:10:18.360
Yeah. Yeah. Sometimes you just want to take, you know, something and write like a simple,

00:10:18.360 --> 00:10:24.440
simple app, you know, like it don't bother with this state. Yeah. It could be really challenging.

00:10:24.440 --> 00:10:31.080
Like, there are a lot of questions. Why would, why, if we're talking about React, like tree re-renders

00:10:31.080 --> 00:10:37.880
all the time, you know, like what's going on? Like, is it all right to use this or that? So it's kind of

00:10:37.880 --> 00:10:45.720
like, if you look at any, even trivial app in React or Flutter, it's pretty, it's pretty complex right away.

00:10:45.720 --> 00:10:51.800
And we're not talking about backend because you have to fetch data, like synchronize

00:10:51.800 --> 00:10:58.440
data with the database and server side, right? So it has like even more complexity, like having

00:10:58.440 --> 00:11:02.600
like a backend. Yeah, for sure. You got to create all the APIs and then you somehow got to keep them

00:11:02.600 --> 00:11:06.360
in sync. Then you've got to do security from the front end to the backend. And there's all,

00:11:06.360 --> 00:11:09.080
there's a whole bunch of stuff. So just having a- Exactly.

00:11:09.080 --> 00:11:13.400
Single app that just has all your code, all your state running is really convenient.

00:11:13.400 --> 00:11:20.760
Yeah. I mean, I don't remember exactly when we transitioned, like we developers transition to that

00:11:20.760 --> 00:11:27.800
common concept, you know, like, like those apps should be made like, of like front end and backend,

00:11:27.800 --> 00:11:35.080
you know, it should be like, so we abandoned the idea of Monoly or like maybe because they're not scale,

00:11:35.080 --> 00:11:42.520
but you know what, actually the idea behind like flat. So we're not trying to pursue like

00:11:42.520 --> 00:11:48.120
a framework, like, you know, for building apps serving like millions of users. Right? So if you're

00:11:48.120 --> 00:11:54.200
building like a line of business app and you have a huge developer's team, maybe you don't need that

00:11:54.200 --> 00:11:59.880
framework. But if you're doing something small to serve like, you know, hundreds of users, it's all

00:11:59.880 --> 00:12:06.440
right to assume that you get memory. You can be a little bit slower here, you know, like, so you can

00:12:06.440 --> 00:12:10.760
lose a little bit your requirements. Yeah. And I think it's probably worth just taking a step back just for

00:12:10.760 --> 00:12:16.360
a second and talking about Flutter and how it runs, because while some of these things you're saying are

00:12:16.360 --> 00:12:21.080
true, a lot of this would be running on the client side. So that's fine. It's running on the desktop app,

00:12:21.080 --> 00:12:26.440
it's running in your web browser, but as a sort of a front end type of thing or whatever. Right?

00:12:26.440 --> 00:12:32.280
It's not so server focused. Yeah. It depends on the applications. Exactly. So if you write in the game,

00:12:32.280 --> 00:12:39.000
let's say everything is running on the client. Right? So most of business applications, I don't know,

00:12:39.000 --> 00:12:46.520
like admin panels or tooling, you know? Yeah. I just need a dashboard that shows me the recent orders and

00:12:46.520 --> 00:12:51.080
I need to like click them off to turn them to say we've finished them or they're pending or

00:12:51.080 --> 00:12:55.480
like that kind of, it doesn't have to be Netflix level of design. You just want something quick and

00:12:55.480 --> 00:13:01.880
get it up and share it. Right? Yeah. And in these apps, if you look into these apps, every click on a,

00:13:01.880 --> 00:13:08.680
on a UI, actually it's a call to a bookend. Yeah. So if you write something like that can work on the

00:13:08.680 --> 00:13:14.760
mobile, like on the desktop, yeah, it's a standalone app. Maybe it requires some service like for

00:13:14.760 --> 00:13:20.920
authentication, but if it's mostly a standalone app, yeah, you don't need backend, then Flutter is great,

00:13:20.920 --> 00:13:25.720
etc. Yeah. So if you look, if for people who are listening, if you go to flutter.dev,

00:13:25.720 --> 00:13:31.000
you can see some of the apps that are in the app store with Flutter. And there's some really nice

00:13:31.000 --> 00:13:36.360
ones here. You've got the BMW car app, you've got Stadia, you've got whatever the heck it's called,

00:13:36.360 --> 00:13:41.160
Google Pay. There's a showcase you can go and they actually talk about the different apps that are up

00:13:41.160 --> 00:13:45.800
here. Google Pay, ByteDance, eBay, iRobot. Like there's legitimate...

00:13:45.800 --> 00:13:51.640
iRobot. Oh, nice. Yeah. iRobot. I got this app, right?

00:13:51.640 --> 00:13:56.840
There's a question in the comments, but we'll get to in a minute about that actually. Right.

00:13:56.840 --> 00:14:01.640
A bunch of apps. And then you can also go and see that there's a thing called, it's all widgets.

00:14:01.640 --> 00:14:06.760
As you'll see, the way in which you design these apps is code first and you create these things

00:14:06.760 --> 00:14:10.280
called widgets. You have some interesting ideas around that, but yeah, you can flip through and

00:14:10.280 --> 00:14:14.600
there's just tons of apps. So here, at least the ones people submitted, there's like 3,000 apps in

00:14:14.600 --> 00:14:20.200
the showcase, which... So it's a pretty well used project, right? So we have Flutter. Yeah.

00:14:20.200 --> 00:14:25.720
And it's not like React Native or something where it puts HTML into your code, but it kind of is

00:14:25.720 --> 00:14:33.080
powered on top of the HTML engines. It runs by using an HTML canvas, but then it just completely

00:14:33.080 --> 00:14:39.160
does its own rendering to that, like 120 frames a second type of render. But the idea is it's supposed

00:14:39.160 --> 00:14:44.120
to be completely in control of the pixels so that it looks pixel perfect across all the devices. That's

00:14:44.120 --> 00:14:50.040
their selling point and you can see how well they go. But until recently, I thought the only way to

00:14:50.040 --> 00:14:55.880
program that was Dart. And then I learned about your project, Flet. And I got to say, I'm not the

00:14:55.880 --> 00:15:00.360
only one who thought it was pretty cool. Out in the audience, we've got... Abhay says,

00:15:00.360 --> 00:15:05.320
Fedora, I love you, man. Thanks for creating Flet. And then there's another...

00:15:05.320 --> 00:15:07.000
Nice. Thank you for your support.

00:15:07.000 --> 00:15:13.960
Yeah. There's another, you know, biggest fan and so on. So people definitely appreciate this project.

00:15:14.920 --> 00:15:21.560
What is the story? I gave my limited experience with what Flutter by default is. Oh, also, we mentioned

00:15:21.560 --> 00:15:27.480
this, but it's worth just emphasizing once again, Flutter compiles to different targets. Flutter runs

00:15:27.480 --> 00:15:34.200
as a JavaScript app on the browser, but it compiles natively with a head of time compilation to execute

00:15:34.200 --> 00:15:39.720
on the desktop and on mobile, right? So it's not just running some sort of web interpreted type of

00:15:39.720 --> 00:15:42.760
thing. It's literally compiled in native code on the other platform.

00:15:42.760 --> 00:15:50.200
This portion of Talk Python To Me is brought to you by Sentry. You know Sentry as a long-time sponsor

00:15:50.200 --> 00:15:54.920
of this podcast. They offer great error monitoring software that I've told you about many times.

00:15:54.920 --> 00:15:59.560
It's even software that we use on our own web apps. But this time, I want to tell you about a fun

00:15:59.560 --> 00:16:06.120
conference they have coming up. Sentry is hosting DEX, Sort the Madness, the conference for every developer

00:16:06.120 --> 00:16:11.880
to join as we investigate the movement and trends for a better and more reliable developer experience.

00:16:11.880 --> 00:16:18.280
What is this madness, you ask? It's the never-ending need to deploy stable code quickly.

00:16:18.280 --> 00:16:23.800
Come to DEX to engage with developers who will share their epic fails and their glorious saves.

00:16:23.800 --> 00:16:29.800
Since we can't fix the madness, but they can start sorting through it with you. Register today to join in

00:16:29.800 --> 00:16:37.720
San Francisco or attend virtually on September 28th at talkpython.fm/dex. That's talkpython.fm/dex.

00:16:37.720 --> 00:16:43.880
The link is in your show notes. Thank you to Sentry for supporting Talk Python To Me.

00:16:43.880 --> 00:16:53.240
Tell us about FLUT, this F-L-E-T, the fastest way to build Flutter apps in Python. So exciting. What is this thing?

00:16:53.240 --> 00:16:59.160
So, all right. I have to admit maybe the current title is a little bit click-baity.

00:16:59.160 --> 00:17:03.720
There's a whole thing about marketing open source projects and gaining momentum and, you know?

00:17:03.720 --> 00:17:04.360
Yeah.

00:17:04.360 --> 00:17:06.040
I'm not going to hold against you.

00:17:06.040 --> 00:17:11.800
Yeah. I was thinking a lot about how would I tell people what I'm working on? Like, but heck, why not?

00:17:11.800 --> 00:17:25.640
Maybe we're not building Flutter apps per se, but with help to build your Flutter apps. What is that if it's not Flutter apps? So yeah, I can say, yes, you can build Flutter app in Python and it's good.

00:17:25.640 --> 00:17:50.760
Flutter app in Flutter app. It's not just about collecting all the widgets, all the power available in Flutter, like to Python space, you know? It's not. In Flutter app, we try to cater all these to present all those widgets, you know, and their combinations to Python users in a very, you know, digestible form.

00:17:50.760 --> 00:17:51.760
Yeah.

00:17:51.760 --> 00:18:13.720
Like Flutter. It's those widgets, they're very highly specialized in Flutter. There is a widget for padding, there is a widget for opacity, there is a widget for depth. So it's like, if you try to write something like real, you will get this ladder, like widgets. And it could be really challenging to work with this ladder.

00:18:13.720 --> 00:18:14.720
Yeah.

00:18:14.720 --> 00:18:23.720
In Flutter, we're trying to combine some widgets to flatten this hierarchy, you know, to make people more productive, you know?

00:18:23.720 --> 00:18:47.500
I've been trying to look around the Flutter site, and I'm not doing very well while we're talking for an example. But the way that you write code, the Dart code version, and the flat code version, the Python version, is some UI frameworks have kind of a designer, right? Think Xcode and storyboards, think Visual Basic or Windows Forms or WPF, like where you can see it and you can drag things around.

00:18:47.720 --> 00:19:09.380
Flutter is very code focused on using these widgets. So you might create a list tile, and then you would have the contents equals a list of, you know, rows, and the row object you're allocating or creating there has like a list of things that are, you know, buttons. And it's just, it's like very, you see almost the hierarchy on the screen, right?

00:19:09.720 --> 00:19:09.900
Yep.

00:19:09.900 --> 00:19:30.020
And in some sense, programming in Flutter feels a lot like that, right? You can sort of see on the home screen that there's this place where you're adding, going to a page and adding a row, which takes a list of icons and so on. But it sounds to me like you've also done some work to build larger building blocks than just that, right? You call them components and not just widgets.

00:19:30.020 --> 00:19:57.020
Yeah, well, definitely to work with these frameworks, you have to have pretty good sense of, well, like imagination, you know, like you put these controls and you have to imagine like what would be on the screen. And also Flutter has like hot reload, so you can experiment very fast. And there is also a project Flutter Flow. I looked into that project and it's really nice. It's a new startup. Maybe you can cover it in some of your...

00:19:57.020 --> 00:19:57.560
What's it called?

00:19:57.560 --> 00:19:58.340
Flutter Flow.

00:19:58.340 --> 00:19:59.720
It's like Web Flow.

00:19:59.720 --> 00:20:01.360
Flutter Flow, like that?

00:20:01.360 --> 00:20:02.540
No, like Flow.

00:20:02.540 --> 00:20:05.600
Oh, I see. Flow like that. Got it. Yeah, yeah. Flutter Flow. Okay.

00:20:05.600 --> 00:20:06.680
Yeah, here you go.

00:20:06.680 --> 00:20:07.600
Oh, interesting. Okay.

00:20:07.600 --> 00:20:08.300
So...

00:20:08.300 --> 00:20:08.960
This is news to me.

00:20:08.960 --> 00:20:16.340
These guys, so yeah, you can drag and drop and they produce like a Flutter, like a package, you know, like basically...

00:20:16.340 --> 00:20:22.660
I see. It's a UI designer and it'll generate the hierarchy of widget. Probably it writes the codes behind the scene for you or something like that, right?

00:20:22.660 --> 00:20:23.140
Yeah.

00:20:23.140 --> 00:20:24.840
Okay. Wow. Interesting. Okay.

00:20:24.840 --> 00:20:39.200
We have something in our roadmap as well. So we're going to make something very similar, but instead of like Flutter code, it will be generating like button code instead. So it's going to be interesting as well.

00:20:39.200 --> 00:21:03.180
So yeah, components. So we call them controls. We call them controls. People asking about why control, like why not call them widgets? I don't know. Maybe I didn't use term widget a lot at the time, like, but it's historically maybe. Maybe it's because of it's coming like from design to replicate these people.net web forms.

00:21:03.500 --> 00:21:04.940
Yeah. That was the terminology there. Sure.

00:21:04.940 --> 00:21:12.480
Yeah. Controls and WPF, Windows Presentation Foundation also play controls and the Xamarin controls.

00:21:12.480 --> 00:21:15.080
You've been swimming in this terminology. So here it is, right?

00:21:15.080 --> 00:21:29.440
So yes, controls. Again, it's not like one-to-one reflection of Flutter widgets. We try to be creative. So we're trying to have some opinion, you know, like what we like to put into control.

00:21:29.440 --> 00:21:45.500
So we don't want them very generic. We don't want them very complex. So, and actually it's an interesting thing. If we talk about Paradigma, it's React and Flutter, they're like declarative style programming.

00:21:45.500 --> 00:22:03.660
And we are converting this back to imperative style. So you can find an article on Flutter website describing the differences and why it's cool, you know, to build UI from the state. But with Flutter, we are going back to imperative style, Xamarin style.

00:22:03.660 --> 00:22:04.260
Right. Okay.

00:22:04.520 --> 00:22:09.000
Where you change control provenance, you know, and they have a state.

00:22:09.000 --> 00:22:23.600
Yeah. You can say like a dot text equals type of model. Yeah. So let's actually, I think maybe the best way for us to understand this, there's a ton of questions about how it runs. Like, does it transpile? Does it compile? How does it, I want to get into that.

00:22:23.600 --> 00:22:34.420
But I think the best way for us to set the stage for that discussion is let's talk through your tutorial. Okay. Because that'll cover a lot of the capabilities, some of the programming model and so on.

00:22:34.420 --> 00:22:45.520
And if people drop over to flat.dev slash docs and click on the tutorials, you have the obligatory to do app. But the one that looks interesting to me is this calculator app.

00:22:45.520 --> 00:22:46.080
Yeah.

00:22:46.080 --> 00:22:58.480
Here's something that looks, it looks literally like the one that I have on my iPhone. It boggles my mind that a trillion dollar company cannot put a calculator on their larger version of their iPhone.

00:22:58.740 --> 00:23:08.040
So I can't say it looks like my iPad one, but this would run on the iPad as well. But, but this looks something I would really interact with. This is built with Flutter running on Flutter with Python.

00:23:08.040 --> 00:23:21.520
So let's go. And what's cool is you can find a live demo because Flutter runs on the, as a single page app in the web, it runs on iOS and Android. Oh wow. Yeah. It runs on iOS and Android. It runs on the desktop.

00:23:21.520 --> 00:23:28.480
So if I say five times, you know, 10, like granted it's a calculator, but it's pretty neat. And it's just one of the deploy targets, right?

00:23:28.480 --> 00:23:38.560
So let's talk us through like how to, first thing I can pip install Flutter. Do I have to have Flutter? Do I have to do, there's like a, quite a series of steps to set up your machine to be a Flutter dev machine.

00:23:38.560 --> 00:23:45.420
It's got to have like iOS simulators potentially and the Flutter and Dart SDKs, all of that's a prerequisite to this, right?

00:23:45.420 --> 00:23:55.480
Yes. You know what? Actually, it's also a huge obstacle. Like if you want to start doing Flutter, it's a, I have both Windows and MacOS machines. Like it worked.

00:23:55.680 --> 00:24:09.540
Same. You have to install a lot of things to start doing something like, especially on MacOS, it's Xcode, you know, like something. I'm still trying to figure out the whole like bunch of tools you need. Yeah. Like for, especially for deployment.

00:24:09.540 --> 00:24:22.060
But so Flutter actually comes with this thing called Flutter Doctor. I'll put up a screenshot of what I get when I run it. It's, I'm running it right now and it's still running. There we go here. Hold on. I'll put this up. And so people can see.

00:24:22.680 --> 00:24:46.200
So I'll try to include a screenshot or link to this or something, but it's like checks that Flutter is installed. Check that the Android tool chain is installed. Check that Xcode is installed. Check that Chrome is there. Android Studio, IntelliJ or VS Code that there's hosts available. Like there's a bunch of steps to make all this happen. Right? So we still need to do this though. That's my question is I still need to go through the steps to generate like the Flutter configuration on my machine.

00:24:46.680 --> 00:25:09.480
So I have to say you have ideally green list, you know, like, because I have some gaps. I didn't install like IntelliJ like it was that. So in Flutter, this client part, it's a Flutter app, which knows how to render, let's say, JSON tree, like page or UI presentation in JSON format.

00:25:09.680 --> 00:25:24.680
So it knows how to render it. And it has like a final functionality. So it's compiled, it's recompiled for all the platforms, like for Windows, for Max and these executables that included into Python wheels.

00:25:24.680 --> 00:25:36.600
So when you install Flutter, it basically downloads as a part of a wheel, it downloads Flutter client, which is Flutter, like combined Flutter app, and it downloads Flutter server.

00:25:36.600 --> 00:25:38.940
Oh, so I might not actually need to do this.

00:25:38.940 --> 00:25:48.520
Well, yeah, you don't see it. I mean, you can see it in logs or if you go and see site packages of your flight installation, you'll see all those executables.

00:25:48.520 --> 00:25:49.780
Okay. Interesting.

00:25:50.060 --> 00:25:52.060
Yeah, that's why you need nothing, you know.

00:25:52.060 --> 00:25:53.380
Oh, that's fantastic. Yeah.

00:25:53.380 --> 00:26:15.260
Yeah, it's for desktop, for web, like compiled Flutter web app is embedded into Flutter server. So it adds another two megabytes to like SQL itself. But so yeah, we have embedded web bar and you download either Linux, Windows or MaxQuest client with your wheel.

00:26:15.260 --> 00:26:19.260
Right. Okay. Yeah. The wheel knows which platform it's being installed on.

00:26:19.540 --> 00:26:20.300
Yep, exactly.

00:26:20.300 --> 00:26:20.380
Exactly.

00:26:20.380 --> 00:26:35.040
Yeah. Let me check how big this thing is. I went through your example and that we're going to talk through and I compiled it to a .app, a Mac.app application and it's 38 megs. That's totally reasonable for me for the base runtime, basically.

00:26:35.040 --> 00:26:37.300
Oh yeah, I'm frozen.

00:26:37.300 --> 00:26:38.120
You know, you.

00:26:38.120 --> 00:26:43.600
Was I? I was, sorry. I was just thinking about, I was just thinking a lot. That's all.

00:26:43.600 --> 00:26:53.360
Yeah. It's pretty, yeah. For macOS, it's the biggest, like 30 something. Like for Windows, it's probably the smallest cells. Maybe not news for the years.

00:26:53.360 --> 00:26:58.920
Yeah. But when you compare that, say, to an Electron app. An Electron app is very large compared to that.

00:26:58.920 --> 00:27:12.280
Yeah. Yeah. Because it packages browsers. So you have the same picture on all platforms, right? So Flutter is nice because like you said before, it's same rendering engine like on all platforms.

00:27:12.740 --> 00:27:19.580
It's clear, something like, and even on web, it's canvas. So you have the same picture on all platforms. And this is nice.

00:27:19.580 --> 00:27:29.500
Yeah. Fantastic. It is. All right. Let's talk to this. Let's talk to this example. So pip install Flutter, that takes care of all of it. I'm sorry. I derailed us talking about all the setup of Flutter and Dart and all that.

00:27:30.240 --> 00:27:44.040
And so in order to write code with this, I don't want to talk through too much code, but I want to give people a sense of what it feels like to write code with this. It feels like a very much like kind of a Python variation with the difference that it's more imperative, as you said.

00:27:44.160 --> 00:27:58.140
So we would say from Flutter, import page and text. And you have a main method that is past a page. And then you just say add text and you set the value. You could set the background color and then you just say run. And well, hello world Flutter, there you are, right?

00:27:58.140 --> 00:28:05.760
But you have other controls, like you have elevated button, and then you have a bunch of layout. I mean, you, like you as the developer.

00:28:05.760 --> 00:28:07.220
Yeah, like row.

00:28:07.220 --> 00:28:18.160
Because Flutter provides a lot of these, Git provides row and column and containers and all of those things. And you just have a way to talk to those from Python, right?

00:28:18.160 --> 00:28:18.640
Yep.

00:28:18.640 --> 00:28:28.120
How does that happen? What's the interop layer between Flutter and Dart and Go and all those like low level aspects? And then when I write Python code, how does that work?

00:28:28.120 --> 00:28:37.620
So yeah, it's a good question, right? Because people are constantly asking about like doing APK or IP files from this stuff.

00:28:37.620 --> 00:28:42.200
Those are the compiled output for the what you ship to the App Store for people who haven't done that.

00:28:42.200 --> 00:28:53.360
Yeah. So the way it works is the following. In the middle of all this, there is a web app basically like written in Go and GoLang. It's called Flat Server or Flat D for sure.

00:28:53.360 --> 00:28:58.600
And it holds in memory this current state of the page.

00:28:58.600 --> 00:29:05.080
When you like from one side of this server is language or this Python library.

00:29:05.080 --> 00:29:14.880
Like basically when you do this page.add, it sends like a JSON basically to this web server and updates the state.

00:29:14.940 --> 00:29:30.020
I see. So when I do this, I'm working in Python and the result is to send, to build up this control structure, this widget structure, and then it sends over to this embedded web server that's native that says build this in Flutter now.

00:29:30.020 --> 00:29:31.380
Right. Something like that.

00:29:31.620 --> 00:29:38.280
Exactly. So this Flutter client from other side, it connects to this server with WebSockets.

00:29:38.280 --> 00:29:38.640
Yeah.

00:29:38.640 --> 00:29:44.600
So in like in real time, and there is like a bi-directional channel between like this server and the client.

00:29:44.600 --> 00:29:51.540
When you push changes from the language to this server, it sends an update to Flutter app.

00:29:51.540 --> 00:29:58.260
And when you click something on Flutter, in Flutter, you know, like you do some like type text in the text box, text field.

00:29:58.260 --> 00:29:59.940
Right. Some event is raised. Yeah.

00:30:00.140 --> 00:30:05.740
It sends, yes, back to server and server routes it back to Python code.

00:30:05.740 --> 00:30:13.600
So yeah, it's like three components, like client library in language right now is Python, server, and client.

00:30:13.600 --> 00:30:15.160
So it's like three things.

00:30:15.160 --> 00:30:24.620
Okay. So when I execute my Python code, is that running on full CPython or is that running on some limited lesser thing?

00:30:24.620 --> 00:30:27.260
Like do I have full access to all of Python while I'm here?

00:30:27.480 --> 00:30:33.080
Exactly. And when we're talking about deployment, this stuff to mobile devices,

00:30:33.080 --> 00:30:40.740
devices on the first stages, we're going to support this so-called web server driven UI approach.

00:30:40.740 --> 00:30:46.700
And yes, your code runs by a real Python and you have access to all libraries.

00:30:46.700 --> 00:30:47.380
Yeah.

00:30:47.380 --> 00:30:47.900
Wow.

00:30:47.900 --> 00:30:52.900
Because if you decide to put this on a phone like Python, there could be limitations.

00:30:52.900 --> 00:31:00.120
Right. And most of those projects I went through Kyrie and the Beware project as well.

00:31:00.120 --> 00:31:01.000
Yep. Yep.

00:31:01.000 --> 00:31:02.100
Beware, Kivi.

00:31:02.420 --> 00:31:09.940
They do absolutely amazing job packaging Python for mobile devices, but there are always like bots.

00:31:09.940 --> 00:31:14.820
So mostly they encourage you to use pure Python modules, right?

00:31:14.820 --> 00:31:15.140
Yeah.

00:31:15.400 --> 00:31:24.940
Because if you decide to use like modules with native libraries and then you have to make sure that those are compiled for ARM 64 architectures, right?

00:31:24.940 --> 00:31:26.380
Right. Which gets really tricky.

00:31:26.380 --> 00:31:31.900
Sort of related to that out in the audience, maybe the first question we'll take before we get to some of the others is,

00:31:32.000 --> 00:31:34.740
can we use other Python packages with Flet?

00:31:34.740 --> 00:31:37.780
Like, could we run machine learning code on the click of a button?

00:31:37.780 --> 00:31:38.680
Asks Raul.

00:31:38.680 --> 00:31:39.700
Yes, absolutely.

00:31:39.700 --> 00:31:47.800
And the idea of Flet was not like to be a central park, like in your app, but to be on the side, you know,

00:31:47.800 --> 00:31:53.340
like to add UI to your application so you can make your app live.

00:31:53.340 --> 00:31:57.280
And goal was, first of all, to add like web-based UI, you know?

00:31:57.280 --> 00:32:01.480
So you can share your app with your colleagues, with your team, you know, customers.

00:32:01.480 --> 00:32:02.860
So yeah, absolutely.

00:32:02.860 --> 00:32:14.180
You can use any libraries, but we lack some visualization controls compared to other tools like Streamlit, for example, like for scientists.

00:32:14.180 --> 00:32:14.640
Sure.

00:32:14.640 --> 00:32:15.360
Absolutely.

00:32:15.360 --> 00:32:18.920
Or there is another project like DearPaiGui.

00:32:18.920 --> 00:32:19.840
DearPai, yeah.

00:32:19.840 --> 00:32:20.440
DearPaiGui.

00:32:20.440 --> 00:32:22.300
I've had both of those groups on the show before.

00:32:22.300 --> 00:32:22.520
Yeah.

00:32:22.520 --> 00:32:23.080
Yeah.

00:32:23.080 --> 00:32:29.960
Which is amazing, like for very fast visualizations that wouldn't be there probably like in a lot.

00:32:29.960 --> 00:32:30.160
Yeah.

00:32:30.160 --> 00:32:30.760
Right.

00:32:30.760 --> 00:32:32.740
More of a building interactive.

00:32:32.740 --> 00:32:33.280
Yeah.

00:32:33.280 --> 00:32:34.740
Applications, perhaps.

00:32:34.740 --> 00:32:36.060
With low latency, yeah.

00:32:38.440 --> 00:32:44.820
This episode of Talk Python To Me is brought to you by the IRL podcast, an original podcast from Mozilla.

00:32:44.820 --> 00:32:50.160
If you're like me, you care about the ideas behind technology, not just the tech itself.

00:32:50.160 --> 00:32:54.020
We know that tech has an enormous influence on society.

00:32:54.020 --> 00:32:56.300
Many of these effects are hugely beneficial.

00:32:56.300 --> 00:33:01.480
Just think about how much information we carry with us every day through our cell phones.

00:33:02.180 --> 00:33:04.560
Other tech influences can be more negative.

00:33:04.560 --> 00:33:12.300
I really appreciate that Mozilla is always on the lookout for and working to mitigate negative influences of tech for all of us.

00:33:12.560 --> 00:33:17.660
If those kinds of ideas resonate with you, you should definitely check out the IRL podcast.

00:33:17.740 --> 00:33:19.540
It's hosted by Bridget Todd.

00:33:19.540 --> 00:33:22.900
And this season of IRL looks at AI in real life.

00:33:22.900 --> 00:33:24.160
Who can AI help?

00:33:24.160 --> 00:33:25.220
Who can it harm?

00:33:25.220 --> 00:33:31.300
The show features fascinating conversations with people who are working to build a more trustworthy AI.

00:33:31.300 --> 00:33:35.640
For example, there's an episode on how the world is mapped with AI.

00:33:36.060 --> 00:33:41.720
But it's the data that's missing from those maps that tells as much of the story as the data that's there.

00:33:41.720 --> 00:33:45.840
Another episode is about gig workers who depend on apps for their livelihood.

00:33:45.840 --> 00:33:50.760
It looks at how they're pushing back against algorithms that control how much they get paid

00:33:50.760 --> 00:33:56.560
and how they're seeking new ways to gain power over data and create better working conditions for all of them.

00:33:56.560 --> 00:34:01.020
And for you political junkies, there's even an episode about the role that AI plays

00:34:01.020 --> 00:34:04.120
when it comes to the spread of disinformation around elections.

00:34:04.540 --> 00:34:07.520
Obviously, a huge concern for democracies around the world.

00:34:07.520 --> 00:34:10.640
I just listened to The Tech That We Won't Build,

00:34:10.640 --> 00:34:14.940
which explores when developers and data scientists should consider saying no to projects

00:34:14.940 --> 00:34:19.020
that can be harmful to society even though we do have the tech to build them.

00:34:19.020 --> 00:34:21.160
Does this sound like an interesting show?

00:34:21.160 --> 00:34:26.220
Please use the link talkpython.fm/IRL to subscribe.

00:34:26.220 --> 00:34:28.440
Yes, you could search for it in your podcast player,

00:34:28.440 --> 00:34:33.020
but use the link talkpython.fm/IRL to let them know

00:34:33.020 --> 00:34:34.620
that you came from us.

00:34:34.620 --> 00:34:36.800
The link is in your podcast player show notes.

00:34:36.800 --> 00:34:41.300
Thank you to IRL and Mozilla for supporting Talk Python To Me.

00:34:43.300 --> 00:34:47.100
I feel like we kind of answered this, but I think it's also maybe worth pointing out.

00:34:47.100 --> 00:34:50.680
Like Tushar asked, is this a transpile to Dart project?

00:34:50.680 --> 00:34:52.240
It sounds like definitely no.

00:34:52.240 --> 00:34:58.020
It runs in CPython and it serializes the UI to this other part of its process.

00:34:58.020 --> 00:34:58.580
Is that right?

00:34:58.780 --> 00:35:00.100
Yeah, there is no transpile.

00:35:00.100 --> 00:35:00.720
Yeah.

00:35:00.720 --> 00:35:06.260
And, you know, I saw a lot of, I know what people talking about, like I saw a lot of horrible

00:35:06.260 --> 00:35:12.380
implementations, like, you know, transpiling Rust to Dart, Dr. Rust, Python to all these

00:35:12.380 --> 00:35:12.680
guys.

00:35:12.760 --> 00:35:17.940
I mean, it's going to be a fragile solution, unnatural, you know, like, and to my mind.

00:35:17.940 --> 00:35:21.040
Well, as soon as you say, well, can I use this library or that library?

00:35:21.040 --> 00:35:23.100
The answer almost is always is no.

00:35:23.100 --> 00:35:23.720
Right.

00:35:23.720 --> 00:35:27.360
If you're, you know, you think of something like Sculpt or Brython, which is like Python

00:35:27.360 --> 00:35:29.540
in the browser, but transpiled to JavaScript.

00:35:29.540 --> 00:35:31.880
It's well, how to use these other libraries?

00:35:31.880 --> 00:35:33.000
Like there's no way to really.

00:35:33.000 --> 00:35:34.120
You will hit the wall.

00:35:34.120 --> 00:35:35.900
You will hit the wall at some point, you know?

00:35:35.900 --> 00:35:40.340
Like, so if I were like an engineering manager, I would never go for this, you know, like

00:35:40.340 --> 00:35:41.220
in a real project.

00:35:41.220 --> 00:35:41.640
Yeah.

00:35:41.640 --> 00:35:41.920
Yeah.

00:35:41.920 --> 00:35:44.880
Except for maybe some real special tools or use cases, but yeah.

00:35:44.880 --> 00:35:45.360
All right.

00:35:45.360 --> 00:35:47.920
Moving on down the line of our tutorial here.

00:35:47.920 --> 00:35:53.220
One of the things that you have to keep in mind and focus on when you're working with Flutter

00:35:53.220 --> 00:35:58.160
in general and Flutter with Python is how do you build out these, these layouts and how

00:35:58.160 --> 00:35:59.280
do you position the controls?

00:35:59.280 --> 00:36:01.860
And it looks like if you know one, you kind of know the other pretty well.

00:36:02.260 --> 00:36:07.520
So for example, here we're adding a row whose control is like the output, but then the next

00:36:07.520 --> 00:36:10.820
row is you say the controls are the first row of buttons.

00:36:10.820 --> 00:36:13.540
And then another row whose controls are the next row of buttons.

00:36:13.540 --> 00:36:18.220
And you just keep building this up and you pretty quickly end up in something that looks like

00:36:18.220 --> 00:36:20.160
it's kind of a real basic calculator app.

00:36:20.160 --> 00:36:20.760
Yeah.

00:36:20.760 --> 00:36:22.520
And then you get into containers, right?

00:36:22.520 --> 00:36:27.660
Where you've got a container contains like a column that has each row and you kind of like

00:36:27.660 --> 00:36:28.900
put it together like this, right?

00:36:28.900 --> 00:36:29.480
Mm-hmm.

00:36:29.700 --> 00:36:34.280
But I guess the question I wanted to ask you here is how similar or different is this

00:36:34.280 --> 00:36:35.080
than Flutter?

00:36:35.080 --> 00:36:39.040
It feels to me like it's pretty similar, at least in the zen of it.

00:36:39.040 --> 00:36:39.260
Yeah.

00:36:39.260 --> 00:36:40.140
Exactly.

00:36:40.140 --> 00:36:47.540
So PageLit was based on Microsoft Fluid UI library and for making new layouts, there was

00:36:47.540 --> 00:36:48.560
like stack.

00:36:48.560 --> 00:36:52.000
So stack could be like horizontal or vertical.

00:36:52.660 --> 00:37:00.460
And here we decided to do not bend Flutter into something else, but go with the same terminology.

00:37:00.460 --> 00:37:09.040
So stack is like a bunch of layers and we use row and column and all this stuff, you know.

00:37:09.040 --> 00:37:10.500
And it feels good.

00:37:10.500 --> 00:37:17.040
Row and columns inside, like rather than having stack everywhere or like div, if you will,

00:37:17.040 --> 00:37:23.420
like div and then add semantics to div by classes, you know, like it's still form like div, div,

00:37:23.420 --> 00:37:24.100
div, div, div.

00:37:24.100 --> 00:37:27.820
Here we have row, column, column row, at least.

00:37:27.820 --> 00:37:30.540
So you can distinguish this like, you know, visually.

00:37:31.020 --> 00:37:31.380
Right.

00:37:31.380 --> 00:37:34.820
One of the benefits of structuring your code like this, and you do touch on it in this

00:37:34.820 --> 00:37:39.780
tutorial, is that you can build little reusable segments, right?

00:37:39.780 --> 00:37:44.400
So for example, if you've got a row that has a column of stuff and then another row of more

00:37:44.400 --> 00:37:49.180
columns, you could take that, just that column or even build up just one row at a time and

00:37:49.180 --> 00:37:53.680
put that into its own function or its own class and then sort of include that kind of in the

00:37:53.680 --> 00:37:58.620
control sense of the traditional visual basic windows forms.

00:37:58.620 --> 00:38:02.800
Like, like here's the, now I have a bigger thing to drag around, but in this world, like

00:38:02.800 --> 00:38:05.960
drag around is just like right code to create it and put it in the right spot.

00:38:05.960 --> 00:38:06.680
You know what?

00:38:06.680 --> 00:38:10.780
And I've been really amazed, you know, because it works so good.

00:38:10.780 --> 00:38:17.080
I understand the first question people ask, like, how would I make my own like clutter component?

00:38:17.080 --> 00:38:18.480
But you know what?

00:38:18.480 --> 00:38:26.300
You can do these user controls in the, made of these primitives, flat provides, and it works

00:38:26.300 --> 00:38:26.980
pretty well.

00:38:27.280 --> 00:38:28.540
They're isolated.

00:38:28.540 --> 00:38:31.820
They can handle events inside them.

00:38:31.820 --> 00:38:37.980
Like if you put few of those user controls like on a page in different places, they will

00:38:37.980 --> 00:38:39.880
be all behave separately.

00:38:39.880 --> 00:38:41.480
And it's so nice.

00:38:41.480 --> 00:38:47.300
I mean, maybe it's side effect, you know, like I wasn't thinking about that while doing this

00:38:47.300 --> 00:38:48.580
stuff, but it's so good.

00:38:48.580 --> 00:38:49.680
So you can build.

00:38:49.680 --> 00:38:50.520
Yeah.

00:38:50.520 --> 00:38:53.200
And can these controls, do they have their own state?

00:38:53.200 --> 00:38:53.880
Absolutely.

00:38:53.880 --> 00:38:54.360
Yeah.

00:38:54.500 --> 00:38:55.240
Oh, that's awesome.

00:38:55.240 --> 00:38:58.480
So you could have like put information about it and need some buttons to interact with it.

00:38:58.480 --> 00:39:01.480
And it just, they sort of keep track of just that little block, right?

00:39:01.480 --> 00:39:02.560
Even better.

00:39:02.560 --> 00:39:08.160
Whatever you do on flat UI, it's getting persisted right away.

00:39:08.160 --> 00:39:14.300
So whatever, let's say if you have a new form and you type something into this form and you

00:39:14.300 --> 00:39:19.080
do refresh in your browser, all the information will be there after refresh.

00:39:19.080 --> 00:39:19.960
So it's like...

00:39:19.960 --> 00:39:24.020
And for a desktop app, say if I close it and open it again, will it remember?

00:39:24.020 --> 00:39:25.040
It depends.

00:39:25.040 --> 00:39:27.580
So right now it's a standalone app.

00:39:27.580 --> 00:39:33.480
And when you open it again, it will load another instance of this flat server with the

00:39:33.480 --> 00:39:34.120
clean state.

00:39:34.120 --> 00:39:34.860
Right.

00:39:34.860 --> 00:39:36.300
So it kind of loses the state.

00:39:36.300 --> 00:39:36.540
Yeah.

00:39:36.540 --> 00:39:37.060
Yeah.

00:39:37.060 --> 00:39:40.320
But I suspect you have access to the file system somehow.

00:39:40.320 --> 00:39:43.560
You could save it if you wrote the code to do it, right?

00:39:43.560 --> 00:39:44.260
Yeah, sure.

00:39:44.260 --> 00:39:45.060
We're going to make it.

00:39:45.060 --> 00:39:45.300
Yeah.

00:39:45.300 --> 00:39:49.300
Since this is Python executing, could I do like SQLite?

00:39:49.300 --> 00:39:50.040
Absolutely.

00:39:50.040 --> 00:39:57.040
And say SQLAlchemy and figure out like, I'll put the file in my user's app, you know, data

00:39:57.040 --> 00:39:58.100
directory in their profile.

00:39:58.100 --> 00:39:58.740
Absolutely.

00:39:58.740 --> 00:40:03.480
Right now we're working on a more advanced example with using database.

00:40:03.480 --> 00:40:06.900
I mean, like not advanced, like, but with using the database.

00:40:06.900 --> 00:40:12.780
And also we're going to add data table control for working with Greece, you know, like...

00:40:12.780 --> 00:40:13.160
Nice.

00:40:13.160 --> 00:40:14.900
Because this reason right now, yeah.

00:40:15.160 --> 00:40:15.340
Yeah.

00:40:15.340 --> 00:40:20.280
Related to that out in the audience, Rob will ask, is the way it looks and feels, is this

00:40:20.280 --> 00:40:21.140
material UI?

00:40:21.140 --> 00:40:23.020
Can we change the theme and styling?

00:40:23.020 --> 00:40:28.780
I know in raw Flutter, you can have like buttons out of the material design or you can have buttons

00:40:28.780 --> 00:40:29.780
out of, what do they call it?

00:40:29.780 --> 00:40:32.960
They call it Darwin or whatever the iOS equivalent.

00:40:32.960 --> 00:40:35.560
There's like different places you get the buttons to look different.

00:40:35.560 --> 00:40:37.280
And what's the story around that?

00:40:37.280 --> 00:40:38.900
So it's a good question.

00:40:38.900 --> 00:40:45.020
You know, again, I came from Microsoft world and there they have fluent UI and it looks different

00:40:45.020 --> 00:40:50.140
and what actually Flutter was my first experience with material UI.

00:40:50.140 --> 00:40:51.760
And you know what I see?

00:40:51.760 --> 00:40:56.200
Honestly, even compared to Fluent UI, it's pretty solid, you know?

00:40:56.200 --> 00:41:02.540
And they, I would say they have a strong commitment to this material UI strategy, you know?

00:41:02.540 --> 00:41:04.840
Like, and it looks really nice.

00:41:04.840 --> 00:41:07.960
You don't have to sell people what it is.

00:41:07.960 --> 00:41:14.300
Like I would probably need to sell people Fluent UI, but I don't need to sell people like this material UI.

00:41:14.300 --> 00:41:16.040
It's nice right away.

00:41:16.040 --> 00:41:16.940
Looks nice.

00:41:16.940 --> 00:41:18.700
It looks pretty solid.

00:41:18.980 --> 00:41:25.100
But for different styles, yes, you can style, like there are limited styling features right

00:41:25.100 --> 00:41:28.140
now like in flat, but we're going to pull more.

00:41:28.140 --> 00:41:32.380
And also we will be doing these adaptive controls.

00:41:32.380 --> 00:41:37.280
Oh, so if I run the app on Windows, it might look different.

00:41:37.280 --> 00:41:39.840
It might be material versus I run it on macOS.

00:41:39.840 --> 00:41:42.320
It'll be the, whatever the heck is the Darwin variant.

00:41:42.320 --> 00:41:42.580
Yeah.

00:41:42.580 --> 00:41:43.380
Exactly.

00:41:43.380 --> 00:41:48.400
So yeah, you can actually, I don't know how to share a link with you, but I can.

00:41:48.400 --> 00:41:48.940
Yeah.

00:41:48.940 --> 00:41:49.140
Yeah.

00:41:49.400 --> 00:41:52.420
There's a private chat here in the streaming through it and I'll pull it up for us.

00:41:52.420 --> 00:41:52.660
Yeah.

00:41:52.660 --> 00:41:54.660
I'll show you what it might look like.

00:41:54.660 --> 00:41:55.440
Oh, fantastic.

00:41:55.440 --> 00:41:59.920
While you're looking at it, I just also want to point out for event handling is a super important

00:41:59.920 --> 00:42:01.100
thing in UIs, right?

00:42:01.100 --> 00:42:05.720
Like UIs are basically get the stuff on the screen and start handling events and updating the UI

00:42:05.720 --> 00:42:06.160
accordingly.

00:42:06.160 --> 00:42:12.040
And so in flat, all you got to do is, for example, for your button, you say on click equals like

00:42:12.040 --> 00:42:15.500
a function called button clicked and you get past the data.

00:42:15.500 --> 00:42:16.140
Yep.

00:42:16.140 --> 00:42:19.820
And you can also associate like, here's the indicator or the data of the button.

00:42:19.820 --> 00:42:21.800
And when it's clicked, pass that over to it.

00:42:21.800 --> 00:42:24.020
Like, for example, the action to take.

00:42:24.020 --> 00:42:26.240
And those can even be lambda expressions, right?

00:42:26.240 --> 00:42:27.400
Oh, yeah, absolutely.

00:42:27.400 --> 00:42:27.700
Yeah.

00:42:27.700 --> 00:42:30.800
If you manage to put it in the single line, like, you know.

00:42:30.800 --> 00:42:35.800
So lambdas in Python are limited somehow, you know, like.

00:42:35.800 --> 00:42:36.320
Yeah.

00:42:36.320 --> 00:42:36.900
Oh, yeah.

00:42:36.900 --> 00:42:37.900
They're single line.

00:42:37.900 --> 00:42:40.000
They're like expressions of the other languages.

00:42:40.000 --> 00:42:46.200
I use it a lot, like print something as lambdas, you know, in the event headers to see if it's

00:42:46.200 --> 00:42:46.740
being called.

00:42:46.740 --> 00:42:47.160
Yeah.

00:42:47.160 --> 00:42:50.400
So I dropped you a link to Fluent UI.

00:42:50.400 --> 00:42:51.220
Yeah.

00:42:51.220 --> 00:42:52.920
It's a library for Flutter.

00:42:52.920 --> 00:42:54.580
It's really cool.

00:42:54.960 --> 00:43:02.400
And there is a web demo, even like, and there is also like, water, Macos, UI, something like.

00:43:02.400 --> 00:43:04.160
I'm dropping you a link as well.

00:43:04.160 --> 00:43:04.780
All right.

00:43:04.780 --> 00:43:05.040
Cool.

00:43:05.040 --> 00:43:13.180
So, and for mobile apps, we have a lot of controls like this Cupertino library built into Flutter.

00:43:13.180 --> 00:43:14.080
That's what it's called.

00:43:14.080 --> 00:43:14.680
Cupertino.

00:43:14.680 --> 00:43:15.080
Yes.

00:43:15.080 --> 00:43:15.700
Not Darwin.

00:43:15.700 --> 00:43:16.220
Cupertino.

00:43:16.220 --> 00:43:16.580
Yeah.

00:43:16.580 --> 00:43:16.820
Yeah.

00:43:16.820 --> 00:43:17.020
Yeah.

00:43:17.020 --> 00:43:17.080
Yeah.

00:43:17.080 --> 00:43:17.400
Yeah.

00:43:17.400 --> 00:43:18.080
Right the way.

00:43:18.080 --> 00:43:20.840
So, yeah, you know, yeah, I get it from many users.

00:43:20.840 --> 00:43:27.740
It's, it could be really inappropriate to see a Fluent UI, Fluent, let's say, toggle button

00:43:27.740 --> 00:43:29.220
on iOS, you know.

00:43:29.220 --> 00:43:30.300
This looks fantastic.

00:43:30.300 --> 00:43:30.880
Yeah.

00:43:30.880 --> 00:43:35.080
I mean, one of the, it's just, when you open an app and it clearly looks like it doesn't

00:43:35.080 --> 00:43:37.220
belong in the platform, you're like, hmm, this is weird.

00:43:37.220 --> 00:43:37.840
What is this?

00:43:37.840 --> 00:43:38.320
Yep.

00:43:38.320 --> 00:43:40.780
It just, it doesn't bring the right impression.

00:43:40.780 --> 00:43:45.280
And this, I mean, the stuff that you're showing on the screen, and I will link to the examples.

00:43:45.280 --> 00:43:45.720
Yeah.

00:43:45.800 --> 00:43:51.620
I can be convinced that this is a proper macOS app as well as proper Android or whatever

00:43:51.620 --> 00:43:52.580
it is you're looking at, right?

00:43:52.580 --> 00:43:53.020
Beautiful.

00:43:53.020 --> 00:43:58.380
Well, if you're like a specialist, you can definitely see like, you know, some odds, you know, that

00:43:58.380 --> 00:43:59.600
it's not like native.

00:43:59.600 --> 00:44:00.080
Yeah.

00:44:00.080 --> 00:44:00.320
Yeah.

00:44:00.320 --> 00:44:01.900
You're like, oh, that button's not quite.

00:44:01.900 --> 00:44:02.220
Yeah.

00:44:02.220 --> 00:44:02.440
Yeah.

00:44:02.440 --> 00:44:02.700
Yeah.

00:44:02.700 --> 00:44:04.840
It's drawn, you know.

00:44:04.840 --> 00:44:05.440
Right.

00:44:05.440 --> 00:44:10.220
The way Flutter works is it doesn't pull in the underlying window widgets out of your

00:44:10.220 --> 00:44:10.420
OS.

00:44:10.420 --> 00:44:14.160
It literally redraws them from scratch, but they try really hard to make it look the same.

00:44:14.560 --> 00:44:16.980
You know what?

00:44:16.980 --> 00:44:16.980
It's always a debate.

00:44:16.980 --> 00:44:20.380
If you go somewhere like in Harkin US, you'll have these debates.

00:44:20.380 --> 00:44:21.340
What would be like?

00:44:21.340 --> 00:44:25.360
Because React Native, it's about like display native controls, right?

00:44:25.360 --> 00:44:28.840
But is it a good thing when you precise design?

00:44:28.840 --> 00:44:34.760
And I work with designers in big companies like, and could be a problem if you cannot deliver

00:44:34.760 --> 00:44:36.060
precise design.

00:44:36.060 --> 00:44:36.460
Yeah.

00:44:36.460 --> 00:44:40.240
This gives you more stability across platforms for your look and feel.

00:44:40.240 --> 00:44:44.100
A question in the audience, which I think we're going to get to in a second.

00:44:44.100 --> 00:44:44.840
Sugato.

00:44:44.840 --> 00:44:45.400
Hey, Sugato.

00:44:45.400 --> 00:44:47.520
Can you create mobile apps with Flet?

00:44:47.520 --> 00:44:51.180
And I don't know if this is on the roadmap or this is already ready.

00:44:51.180 --> 00:44:54.320
We might have to save a bit of the conversation for the roadmap discussion.

00:44:54.320 --> 00:44:55.040
But sure.

00:44:55.480 --> 00:45:02.320
So as requested multiple times by our users, I put this, I assembled this model strategy.

00:45:02.320 --> 00:45:05.980
If you, Michael, if you can open this in a blog, it's in the blog.

00:45:05.980 --> 00:45:06.780
Ah, the blog.

00:45:06.780 --> 00:45:07.120
Gotcha.

00:45:07.120 --> 00:45:07.720
Okay.

00:45:07.900 --> 00:45:09.760
It's a blog, Flet mobile strategy.

00:45:09.760 --> 00:45:10.360
There you go.

00:45:10.360 --> 00:45:10.820
Cool.

00:45:10.820 --> 00:45:14.220
So it's not like we forgot about mobile devices.

00:45:14.220 --> 00:45:19.320
No, quite the opposite where I'm always thinking about mobile experience.

00:45:19.320 --> 00:45:24.100
We're getting there maybe slowly, but we're getting there and we will be there.

00:45:24.100 --> 00:45:29.300
So we want to deliver, not just, you know, like the way you can build like APK, you know,

00:45:29.300 --> 00:45:34.820
we want to enable developers, you know, like to quickly test, for example, these like experiences

00:45:34.820 --> 00:45:39.720
on mobile devices, because it's a complex process, you know, like it's very complicated.

00:45:39.720 --> 00:45:40.200
Yeah.

00:45:40.200 --> 00:45:44.320
Like packaging and signing and publishing, reviewing, et cetera.

00:45:44.320 --> 00:45:50.580
So it's, and many companies, they're moving to this server driven approach, like Airbnb,

00:45:50.580 --> 00:45:53.080
like Lyft, like big players.

00:45:53.080 --> 00:45:59.240
So they can bypass like App Store reviews, you know, and push some new functionality, like

00:45:59.240 --> 00:46:01.360
right away from their web servers.

00:46:01.360 --> 00:46:04.680
So we're going to explore this approach first.

00:46:04.680 --> 00:46:13.860
And yeah, definitely we will look into packaging everything into mobile package.

00:46:13.860 --> 00:46:20.760
Like, I mean, Python compiled for ARM 64, this Go server compiled for ARM.

00:46:20.760 --> 00:46:26.960
And so making this like sandwich working on mobile and packaging it and delivering to mobile

00:46:26.960 --> 00:46:28.040
device like the last.

00:46:28.040 --> 00:46:30.520
This is the biggest challenge for you all, right?

00:46:30.520 --> 00:46:31.260
It's not quite.

00:46:31.260 --> 00:46:32.080
It's challenge.

00:46:32.080 --> 00:46:33.400
It's not quite there yet, right?

00:46:33.400 --> 00:46:34.360
It's challenge.

00:46:34.360 --> 00:46:34.720
Yeah.

00:46:34.720 --> 00:46:37.880
It requires you to be a low level programmer, you know?

00:46:37.880 --> 00:46:38.320
Yeah.

00:46:38.320 --> 00:46:43.080
And Stugato actually has a follow up saying, cool, PyTorch is trying to make model serving

00:46:43.080 --> 00:46:46.960
available with React and using Flet could be a very accessible alternative.

00:46:46.960 --> 00:46:48.240
I will look into that.

00:46:48.240 --> 00:46:49.040
Well, so.

00:46:49.040 --> 00:46:49.760
Yeah.

00:46:49.760 --> 00:46:50.760
I mean, that is interesting.

00:46:50.760 --> 00:46:52.160
It's a fancy topic, right?

00:46:52.160 --> 00:46:52.580
Yeah.

00:46:52.620 --> 00:46:57.160
So for now, out of the box, I can package this up as a desktop app or a mobile app.

00:46:57.160 --> 00:46:59.500
And desktop means Linux, Windows, macOS?

00:46:59.500 --> 00:47:06.100
So yeah, just to make it right, you can package it as a desktop app, Windows, Linux, Mac, and

00:47:06.100 --> 00:47:06.840
there's a web app.

00:47:06.840 --> 00:47:07.260
Yeah.

00:47:07.260 --> 00:47:12.740
On the mobile experience, you can use it as Power BWA app.

00:47:12.740 --> 00:47:13.120
Right.

00:47:13.200 --> 00:47:16.680
So you package it as a mobile app and then you install that as a progressive web app and

00:47:16.680 --> 00:47:17.880
then it's kind of good to go.

00:47:17.880 --> 00:47:18.380
Okay.

00:47:18.380 --> 00:47:19.080
Yes.

00:47:19.080 --> 00:47:22.300
But not like a native mobile experience.

00:47:22.300 --> 00:47:26.160
I'm working on it right now and there is a branch for that.

00:47:26.160 --> 00:47:29.860
You know, you can always observe, you can live life real time.

00:47:29.860 --> 00:47:30.080
Yeah.

00:47:30.280 --> 00:47:30.520
Okay.

00:47:30.520 --> 00:47:31.520
Very last thing.

00:47:31.520 --> 00:47:33.140
There's some stuff we talked about the events.

00:47:33.140 --> 00:47:38.220
You have in there, you talk about how to package it up as an executable and basically that's

00:47:38.220 --> 00:47:38.980
Pi installer.

00:47:38.980 --> 00:47:43.420
And then you have steps on how to package it up as a web app as well.

00:47:43.420 --> 00:47:43.960
Mm-hmm.

00:47:43.960 --> 00:47:44.400
Cool.

00:47:44.400 --> 00:47:48.860
So let me ask you, maybe I'll pull up the roadmap as put that as the background.

00:47:48.860 --> 00:47:50.940
Is this ready for people to build apps with?

00:47:50.940 --> 00:47:52.560
Like what's the state of Flet?

00:47:52.560 --> 00:47:56.920
It's very exciting and it looks quite capable, but should people be using it yet?

00:47:56.920 --> 00:48:00.000
Should they be giving feedback or where are you with this?

00:48:00.220 --> 00:48:05.880
So as it basically like a second iteration, so we've had this proof of concept, like page

00:48:05.880 --> 00:48:07.280
let as a proof of concept.

00:48:07.280 --> 00:48:14.440
And it's still, despite it's like a second iteration, it's still a zero point something.

00:48:14.440 --> 00:48:21.560
So there could be, I don't expect any drastic changes into API, but there could be some breaking

00:48:21.560 --> 00:48:23.200
changes going forward.

00:48:23.200 --> 00:48:29.380
And also to have a complete feature, I would love to have like mobile experience to complete

00:48:29.380 --> 00:48:31.740
the cycle, you know, like web, desktop, mobile.

00:48:31.740 --> 00:48:38.320
But in general, it's really ready to build these apps with apps it made for, you know,

00:48:38.320 --> 00:48:39.340
like simple app.

00:48:39.340 --> 00:48:39.540
Yeah.

00:48:39.540 --> 00:48:43.580
We're talking the forms over data, the little portals and the dashboards that we talked about

00:48:43.580 --> 00:48:44.240
at the beginning, right?

00:48:44.240 --> 00:48:44.820
Exactly.

00:48:44.820 --> 00:48:48.780
So I think it's pretty much ready for, well, front time, why not?

00:48:48.780 --> 00:48:49.300
Nice.

00:48:49.720 --> 00:48:53.340
All modern software is beta, you know, like, yeah.

00:48:53.340 --> 00:48:54.940
So it's like prom, you know.

00:48:54.940 --> 00:48:55.860
Always evolving.

00:48:55.860 --> 00:48:58.660
What's the contributor story?

00:48:58.660 --> 00:49:04.020
Are you open to having other people submit PRs and help out with say tutorials and stuff?

00:49:04.020 --> 00:49:04.820
Absolutely.

00:49:04.820 --> 00:49:06.320
All people welcome.

00:49:06.320 --> 00:49:06.720
Awesome.

00:49:06.880 --> 00:49:12.380
And I know it's a challenge for some projects, but I really want to spend time on that.

00:49:12.380 --> 00:49:17.640
Working with people, writing guidelines, you know, et cetera, like establishing rules.

00:49:17.640 --> 00:49:18.640
So absolutely.

00:49:18.640 --> 00:49:24.900
Because it's not an open source project if you're not accepting PRs, you know, or if you

00:49:24.900 --> 00:49:25.880
don't work with people.

00:49:25.880 --> 00:49:28.040
It's like publish source project.

00:49:28.040 --> 00:49:28.560
For sure.

00:49:28.560 --> 00:49:29.740
Yeah, exactly.

00:49:29.740 --> 00:49:31.280
It's source open, not open source.

00:49:31.280 --> 00:49:31.820
That's right.

00:49:31.820 --> 00:49:32.240
Yeah.

00:49:32.240 --> 00:49:32.980
And only the next.

00:49:33.180 --> 00:49:34.840
Let me put an idea out there.

00:49:34.840 --> 00:49:37.120
You have two really great tutorials here.

00:49:37.120 --> 00:49:39.180
Are you willing to accept more tutorials?

00:49:39.180 --> 00:49:40.060
Sure.

00:49:40.060 --> 00:49:45.960
So over on the flutter.dev slash learn section, they have some tutorials over here.

00:49:45.960 --> 00:49:51.120
Maybe it would be fun if people could like try to create the equivalent of these tutorials,

00:49:51.120 --> 00:49:51.800
but in Flutter.

00:49:51.800 --> 00:49:52.160
I don't know.

00:49:52.160 --> 00:49:54.940
That might be a cool thing to create and see how they come out.

00:49:54.940 --> 00:49:56.060
Yeah, it's a nice idea.

00:49:56.060 --> 00:49:59.960
But you know, maybe it's not even worth a separate tutorial.

00:49:59.960 --> 00:50:03.160
Like, you know, look, in Flutter could be like a single page of

00:50:03.160 --> 00:50:03.940
gold, you know, like.

00:50:03.940 --> 00:50:05.700
Yeah, absolutely.

00:50:05.700 --> 00:50:07.140
So when I look at this.

00:50:07.140 --> 00:50:08.000
I will take a look.

00:50:08.000 --> 00:50:08.260
Yeah.

00:50:08.260 --> 00:50:08.700
Yeah.

00:50:08.700 --> 00:50:14.480
When I look at this, this looks a lot like a Dart version of Flutter or Flutter looks like

00:50:14.480 --> 00:50:16.580
a Python version of this, right?

00:50:16.580 --> 00:50:19.220
It has this same hierarchical code type of thing.

00:50:19.220 --> 00:50:23.000
There are some differences that we talked about, like state and stuff, but it looks really,

00:50:23.000 --> 00:50:23.680
really similar.

00:50:23.900 --> 00:50:28.420
So if I am a Flutter developer, how easy is it to go to Flutter?

00:50:28.420 --> 00:50:33.560
And if I go to, if I learn Flutter and like, I really need the true native version, how easy

00:50:33.560 --> 00:50:35.940
is it to go to like pick up Dart and then go to Flutter?

00:50:35.940 --> 00:50:41.540
If you're already a Flutter developer, well, the only requirement there probably is you should

00:50:41.540 --> 00:50:42.480
know Python, right?

00:50:42.480 --> 00:50:43.600
Like at the moment.

00:50:43.600 --> 00:50:43.960
Yeah.

00:50:43.960 --> 00:50:44.080
Yeah.

00:50:44.080 --> 00:50:45.320
I'm assuming that you know Python.

00:50:45.320 --> 00:50:45.660
Yeah.

00:50:45.660 --> 00:50:45.940
Yeah.

00:50:45.940 --> 00:50:46.100
Sure.

00:50:46.100 --> 00:50:46.580
Yeah.

00:50:46.820 --> 00:50:50.680
And I think it's pretty acceptable to write something in Flutter.

00:50:50.680 --> 00:50:58.180
I especially love the idea of using Flutter as a prototyping thing or because you can easily

00:50:58.180 --> 00:51:00.000
do something all weekend.

00:51:00.000 --> 00:51:01.500
It is so much easier.

00:51:01.500 --> 00:51:02.560
It's so much easier.

00:51:02.560 --> 00:51:08.540
People who have not tried to write in Dart, I feel like I am constantly chasing what const

00:51:08.540 --> 00:51:09.320
means.

00:51:09.320 --> 00:51:10.760
I didn't mean to double it up.

00:51:10.760 --> 00:51:12.660
Constantly chasing const around.

00:51:12.660 --> 00:51:14.720
I do not understand this language.

00:51:14.840 --> 00:51:18.100
So you might have a class which you're passing as const.

00:51:18.100 --> 00:51:20.120
Maybe this is my complaint as well.

00:51:20.120 --> 00:51:24.060
And you might need to take away that const, but then it's required to have const in other

00:51:24.060 --> 00:51:24.440
places.

00:51:24.440 --> 00:51:25.580
But then it like cascade.

00:51:25.580 --> 00:51:29.820
It's just, I'm like, okay, there's like five places I got to either remove or add const

00:51:29.820 --> 00:51:31.060
because I just want to change.

00:51:31.060 --> 00:51:32.800
Like this is driving me insane.

00:51:32.800 --> 00:51:35.300
And I don't see any of that in Flutter and it makes me happy.

00:51:35.300 --> 00:51:38.200
It sounds like you've been down this as well, Thador.

00:51:38.200 --> 00:51:38.600
Yeah.

00:51:38.600 --> 00:51:40.240
Because maybe you're a perfectionist.

00:51:40.240 --> 00:51:43.420
You're trying to avoid all those warnings.

00:51:43.420 --> 00:51:43.900
Yeah.

00:51:43.900 --> 00:51:44.680
It's a hassle.

00:51:44.680 --> 00:51:45.000
Yeah.

00:51:45.000 --> 00:51:45.420
Yeah.

00:51:45.420 --> 00:51:49.000
So the prototyping story makes me think like maybe you could build out stuff really quick

00:51:49.000 --> 00:51:52.920
because it's, you don't have to deal with all those little weird language edge cases.

00:51:52.920 --> 00:51:53.340
Yeah.

00:51:53.340 --> 00:51:59.880
And I had a few customers, like users on Discord coming from Flutter world.

00:51:59.880 --> 00:52:01.060
So yeah.

00:52:01.060 --> 00:52:05.840
The way back to Flutter from flat is also possible.

00:52:05.840 --> 00:52:06.360
Why not?

00:52:06.360 --> 00:52:12.320
I mean, like if you grow up, grow out of like this flat thing, you know, like, and you need

00:52:12.320 --> 00:52:17.120
something really unique, like animations, you know, like some weird transitions.

00:52:17.120 --> 00:52:18.380
So why not?

00:52:18.480 --> 00:52:22.500
So you can go and learn Flutter and dive into this world, you know?

00:52:22.500 --> 00:52:22.820
Yeah.

00:52:22.820 --> 00:52:24.800
I agree that they should be pretty transferable.

00:52:24.800 --> 00:52:27.260
Certainly knowing one will help you know the other.

00:52:27.260 --> 00:52:28.340
No doubt about it.

00:52:28.340 --> 00:52:28.740
Absolutely.

00:52:28.740 --> 00:52:30.300
And the way you think is real similar.

00:52:30.300 --> 00:52:34.580
So John asks, how do you handle Android and iOS permissions entitlements?

00:52:34.720 --> 00:52:38.800
It sounds like you're not quite there yet, but maybe you have some ideas on where that might go.

00:52:38.800 --> 00:52:47.420
So as right now, we actually, we are not delivering these anywhere, like, but we already building iOS

00:52:47.420 --> 00:52:51.420
Android packages as part of our CI process.

00:52:51.420 --> 00:52:58.160
So they're already there and they're already published into App Store ready to be sent for

00:52:58.160 --> 00:52:58.980
review, you know?

00:52:58.980 --> 00:53:02.700
And do you just put the entitlement in that compilation target, basically?

00:53:02.700 --> 00:53:03.560
Yeah.

00:53:03.900 --> 00:53:09.900
So yeah, if they, all these permissions right now, they have to be put into these pre-compiled

00:53:09.900 --> 00:53:17.100
Flutter client, like Flat client app, or right now we're working on the Flutter widget.

00:53:17.100 --> 00:53:19.440
So Flutter widget called Flat.

00:53:19.440 --> 00:53:24.940
So you can embed the Flat experience into any existing Flutter app.

00:53:24.940 --> 00:53:27.780
So that sounds like you're doing it in reverse.

00:53:27.780 --> 00:53:32.880
So you create a, build a Flutter application, a native one, compile it.

00:53:32.920 --> 00:53:36.740
But what you can do is you can create a section of your UI that is flat.

00:53:36.740 --> 00:53:37.920
Yeah, exactly.

00:53:37.920 --> 00:53:44.520
Imagine you already have an app written in Flutter or native app, like in Kotlin, you know, like

00:53:44.520 --> 00:53:45.960
for, or Swift.

00:53:46.120 --> 00:53:52.580
You can replace part of your app with this flat driven by server-side code written in Python.

00:53:52.580 --> 00:53:53.060
Cool.

00:53:53.060 --> 00:53:56.240
In that scenario, where does the Python run?

00:53:56.240 --> 00:53:57.240
It runs on the server?

00:53:57.240 --> 00:53:58.080
On the server.

00:53:58.080 --> 00:53:58.500
Yeah.

00:53:58.500 --> 00:53:59.000
Okay.

00:53:59.240 --> 00:54:05.220
And you can actually have in this app, your mobile app deployed to client devices.

00:54:05.220 --> 00:54:12.160
You basically have to redeploy code, Python code in the server to deliver new experience,

00:54:12.160 --> 00:54:14.640
new UI, new clicks, you know, like whatever.

00:54:14.640 --> 00:54:16.940
I don't know how relevant this is, but it might be.

00:54:16.940 --> 00:54:18.060
Have you looked at PyScript?

00:54:18.060 --> 00:54:19.100
Yeah, sure.

00:54:19.340 --> 00:54:23.840
You know, if some of the challenges is like, well, how do I end up running the Python part?

00:54:23.840 --> 00:54:30.020
Could you WebAssembly your Python in and get it native and get it locally, like for offline

00:54:30.020 --> 00:54:30.840
version?

00:54:31.300 --> 00:54:35.340
So yeah, people are asking, there are a lot of technologies right now, right?

00:54:35.340 --> 00:54:40.680
If we're talking about PyScript and the WebAssembly, it makes sense for web apps, right?

00:54:40.680 --> 00:54:41.400
You know what?

00:54:41.400 --> 00:54:45.440
And actually, Dart itself is being compiled.

00:54:45.440 --> 00:54:51.320
Okay, right now, it's only part, it's here, Engine is in WebAssembly, but they have, Google

00:54:51.320 --> 00:54:57.240
have plans to compile Dart, Flutter apps into web assemblies as well.

00:54:57.240 --> 00:54:57.680
Okay.

00:54:57.680 --> 00:55:02.840
So it makes sense for web, for mobile, it should be native code.

00:55:02.840 --> 00:55:03.180
Yeah.

00:55:03.180 --> 00:55:04.800
So for mobile, it should be native code.

00:55:04.800 --> 00:55:11.920
I'm not sure, maybe tomorrow we'll see some like engines translating like this WASM into

00:55:11.920 --> 00:55:12.680
native code.

00:55:12.680 --> 00:55:13.180
Yeah.

00:55:13.180 --> 00:55:19.260
If you could run WASM in your native application on iOS, then maybe this has opened some kind

00:55:19.260 --> 00:55:19.560
of door.

00:55:19.560 --> 00:55:19.800
Yeah.

00:55:19.800 --> 00:55:25.320
But again, as far as I know, it's really restrictive environment, mobile phones.

00:55:25.320 --> 00:55:26.360
So...

00:55:26.360 --> 00:55:30.640
Yeah, it's not the same as saying, well, sure, you can use PyTorch or requests or whatever.

00:55:30.640 --> 00:55:31.120
Yeah.

00:55:31.120 --> 00:55:31.540
Okay.

00:55:31.540 --> 00:55:34.920
Well, Fedor, I think we're just, we're out of time.

00:55:34.920 --> 00:55:38.220
But I want to congratulate you on a super interesting project.

00:55:38.220 --> 00:55:39.300
It's really cool.

00:55:39.300 --> 00:55:40.180
Thank you very much.

00:55:40.180 --> 00:55:41.020
Yeah, you bet.

00:55:41.020 --> 00:55:43.460
Now, before you get out of here, you got to answer the final two questions.

00:55:43.460 --> 00:55:43.940
Sure.

00:55:43.940 --> 00:55:47.160
If you're going to write some Python code, what editor do you use these days?

00:55:47.160 --> 00:55:47.840
Nice.

00:55:47.980 --> 00:55:50.100
I love Visual Studio Code.

00:55:50.100 --> 00:55:50.420
Yeah.

00:55:50.420 --> 00:55:50.740
Yeah.

00:55:50.740 --> 00:55:55.100
I mean, I would love, some people recommend trying PyCharm.

00:55:55.100 --> 00:55:58.020
And I believe it's a really great idea.

00:55:58.020 --> 00:56:02.680
Maybe I will look into that, especially if it's like, it's free for open source projects.

00:56:02.680 --> 00:56:03.360
But yeah.

00:56:03.360 --> 00:56:04.920
Right now it's VS Code.

00:56:04.920 --> 00:56:05.660
It's great.

00:56:05.820 --> 00:56:05.940
Cool.

00:56:05.940 --> 00:56:11.580
Well, I can tell you your calculator tutorial works all the way through on PyCharm because

00:56:11.580 --> 00:56:13.120
I just did it right before our show.

00:56:13.120 --> 00:56:15.060
So it's all good.

00:56:15.060 --> 00:56:15.780
It's all good.

00:56:15.780 --> 00:56:21.680
Now, also notable PyPI package, like obviously Flatt is a good one, but other libraries you

00:56:21.680 --> 00:56:22.540
may have run across recently.

00:56:22.540 --> 00:56:23.380
You're like, oh, this is cool.

00:56:23.380 --> 00:56:24.240
People should know about.

00:56:24.240 --> 00:56:29.960
Well, for me, it's a really challenging question because I'm a new guy to Python.

00:56:29.960 --> 00:56:35.680
And I don't know, like I don't have any really any like favorite packages, you know?

00:56:35.680 --> 00:56:36.420
Yeah.

00:56:36.420 --> 00:56:38.080
Well, we can throw Flatt out there.

00:56:38.080 --> 00:56:38.520
How's that?

00:56:38.520 --> 00:56:41.820
So yeah, maybe Flatt is nice.

00:56:41.820 --> 00:56:43.000
It's not disallowed.

00:56:43.000 --> 00:56:44.060
You pip install it.

00:56:44.060 --> 00:56:44.940
You can say that if you like.

00:56:44.940 --> 00:56:45.340
Yeah.

00:56:45.340 --> 00:56:47.780
And you know, actually it's not trivial.

00:56:47.780 --> 00:56:53.820
And I spend a lot of nights trying to put this, you know, wheels right, you know, like

00:56:53.820 --> 00:56:55.640
to include these binaries.

00:56:55.640 --> 00:56:57.100
So it's pretty cool.

00:56:57.100 --> 00:57:03.160
And I can, if you guys have some questions, like how would you repackage those wheels

00:57:03.160 --> 00:57:04.600
during the ECI process?

00:57:04.600 --> 00:57:08.300
So I would be really too happy to share my experience, you know?

00:57:08.300 --> 00:57:08.600
Yeah.

00:57:08.600 --> 00:57:09.160
Awesome.

00:57:09.160 --> 00:57:13.920
Because I learned a lot of packages and the internal structure to understand how it works,

00:57:13.920 --> 00:57:17.340
you know, basically like zip files, you know, like what's inside.

00:57:17.340 --> 00:57:17.820
Awesome.

00:57:17.820 --> 00:57:18.180
All right.

00:57:18.180 --> 00:57:19.620
Well, final call to action.

00:57:19.620 --> 00:57:21.400
People want to get started with Flatt.

00:57:21.400 --> 00:57:24.200
They want to build an app with it or maybe even contribute to it.

00:57:24.200 --> 00:57:25.080
What do you tell them?

00:57:25.320 --> 00:57:25.720
Absolutely.

00:57:25.720 --> 00:57:27.100
Go and try.

00:57:27.100 --> 00:57:28.320
Hope on Discord.

00:57:28.320 --> 00:57:29.840
I'm always online.

00:57:29.840 --> 00:57:32.980
Let me know what you like, what you didn't like.

00:57:32.980 --> 00:57:34.260
We're always listening.

00:57:34.260 --> 00:57:38.400
So, and definitely contributions are welcome.

00:57:38.400 --> 00:57:39.340
So, yeah.

00:57:39.340 --> 00:57:39.860
Awesome.

00:57:39.860 --> 00:57:44.140
And you at the bottom of the homepage of Flatt.dev, you've got a subscribe to our newsletter.

00:57:44.140 --> 00:57:46.700
I guess people can get updates on the project if they want there, right?

00:57:46.700 --> 00:57:47.280
Yeah.

00:57:47.280 --> 00:57:51.940
I haven't sent anything there yet, but yeah, there are a couple.

00:57:51.940 --> 00:57:55.440
It's all about building up the group of people who are interested in what you're doing.

00:57:55.440 --> 00:57:57.440
So, it's mostly Discord right now.

00:57:57.440 --> 00:57:57.700
Yeah.

00:57:57.700 --> 00:57:58.100
Got it.

00:57:58.100 --> 00:57:59.200
So, it's pretty active.

00:57:59.200 --> 00:57:59.560
Yeah.

00:57:59.560 --> 00:58:00.340
Good to know.

00:58:00.340 --> 00:58:00.760
All right.

00:58:00.760 --> 00:58:03.200
Well, once again, super exciting project.

00:58:03.740 --> 00:58:05.800
I've ranted on this before.

00:58:05.800 --> 00:58:12.620
Having some kind of UI framework that is really modern and fresh in Python is super important,

00:58:12.620 --> 00:58:14.460
but it's quite interesting in that space.

00:58:14.460 --> 00:58:19.440
Having a very viable mobile story for Python, also really interesting.

00:58:20.140 --> 00:58:23.460
So, as much as you bring those things forward, you know, more power to you.

00:58:23.460 --> 00:58:23.860
We love it.

00:58:23.860 --> 00:58:24.320
Yeah.

00:58:24.320 --> 00:58:25.180
Sounds great.

00:58:25.180 --> 00:58:25.640
Yeah.

00:58:25.640 --> 00:58:26.400
Thanks.

00:58:26.400 --> 00:58:27.340
Thank you, Michael.

00:58:27.340 --> 00:58:27.840
Yeah.

00:58:27.840 --> 00:58:28.200
Bye-bye.

00:58:28.200 --> 00:58:29.120
Thanks, everyone, for listening.

00:58:29.120 --> 00:58:29.520
Bye.

00:58:29.760 --> 00:58:59.740
Bye-bye.

00:58:59.740 --> 00:59:29.720
Bye-bye.

00:59:29.720 --> 00:59:31.720
Bye-bye.

00:59:31.720 --> 00:59:33.720
Bye-bye.

00:59:33.720 --> 00:59:33.720
Bye-bye.

00:59:33.720 --> 00:59:33.720
Bye-bye.

00:59:33.720 --> 00:59:39.680
find the iTunes feed at /itunes, the Google Play feed at /play and the direct RSS feed at

00:59:39.680 --> 00:59:46.080
/rss on talkpython.fm. We're live streaming most of our recordings these days. If you want to

00:59:46.080 --> 00:59:50.240
be part of the show and have your comments featured on the air, be sure to subscribe to

00:59:50.240 --> 00:59:55.160
our YouTube channel at talkpython.fm/youtube. This is your host, Michael Kennedy.

00:59:55.160 --> 00:59:59.480
Thanks so much for listening. I really appreciate it. Now get out there and write some Python code.

00:59:59.480 --> 01:00:29.460
Thank you.

