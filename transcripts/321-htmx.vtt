WEBVTT

00:00:00.001 --> 00:00:03.500
Have you wanted to add more interactivity and liveness to your web application?

00:00:03.500 --> 00:00:07.760
If you built it using Flask, Django, or some other Python web framework,

00:00:07.760 --> 00:00:12.180
that thought probably didn't fill you with joy. And that's because it might mean you need to

00:00:12.180 --> 00:00:15.980
change a bunch of your code and rewrite a significant bit of your application

00:00:15.980 --> 00:00:20.660
using a full-on front-end web framework like Vue.js or React.js.

00:00:20.660 --> 00:00:25.900
In this episode, we meet Carson from Big Sky Software. He's the creator of HTMX.

00:00:25.900 --> 00:00:31.080
This front-end JavaScript library lets you leverage the server-side aspects of your Python web app

00:00:31.080 --> 00:00:36.900
and add amazing interactivity, but keep the logic on the server near the database and implement it in Python.

00:00:36.900 --> 00:00:43.280
You're going to love it. This is Talk Python To Me, episode 321, recorded May 25th, 2021.

00:00:43.280 --> 00:01:02.600
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:01:02.600 --> 00:01:06.600
This is your host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy,

00:01:06.740 --> 00:01:10.320
and keep up with the show and listen to past episodes at talkpython.fm,

00:01:10.320 --> 00:01:13.380
and follow the show on Twitter via at Talk Python.

00:01:13.380 --> 00:01:16.820
This episode is brought to you by Sentry and Your Base,

00:01:16.820 --> 00:01:19.460
and the transcripts are brought to you by Assembly AI.

00:01:19.460 --> 00:01:23.260
Please check out what they're offering during their segments. It really helps support the show.

00:01:23.260 --> 00:01:25.840
Carson, welcome to Talk Python To Me.

00:01:25.840 --> 00:01:27.620
Thank you. I'm really happy to be here.

00:01:27.620 --> 00:01:33.100
I'm very thankful that you're willing to go a little bit outside the lines of a normal Python development

00:01:33.100 --> 00:01:35.140
to talk about something like HTMX.

00:01:35.140 --> 00:01:39.580
You know, I'm extremely happy to see HTMX getting picked up,

00:01:39.580 --> 00:01:42.280
particularly by the Django community in Python,

00:01:42.280 --> 00:01:44.600
and so I was very excited to come on here.

00:01:44.600 --> 00:01:46.580
Yeah, I'm really excited to have you here.

00:01:46.580 --> 00:01:48.240
It is such a cool technology,

00:01:48.240 --> 00:01:51.560
and I think so often the JavaScript story is,

00:01:51.560 --> 00:01:55.420
oh, you're doing this other technology that you like.

00:01:55.420 --> 00:01:58.640
Let us tell you how you should drop that and go do JavaScript, right?

00:01:58.720 --> 00:02:03.300
And what I feel HTMX brings is whatever technology using Django, Flask,

00:02:03.300 --> 00:02:07.280
even some other thing like Rails or ASP.NET,

00:02:07.280 --> 00:02:09.980
whatever it is that you already got working really well,

00:02:09.980 --> 00:02:12.000
here's a really cool way to extend that.

00:02:12.000 --> 00:02:12.880
We're going to dive into that.

00:02:12.880 --> 00:02:16.140
So I think, you know, I've had people reach out and say,

00:02:16.140 --> 00:02:18.520
oh, I'm a JavaScript developer.

00:02:18.520 --> 00:02:21.380
Let me come on to your podcast and tell people about how cool Node is.

00:02:21.380 --> 00:02:25.800
I'm like, well, I'm not really sure that's the best topic for a Python-focused podcast,

00:02:25.800 --> 00:02:27.640
so I'm going to decline your invitation,

00:02:27.640 --> 00:02:30.800
but I was really happy to get a chance to have you on the show

00:02:30.800 --> 00:02:36.820
because I think there are many people out there who are nervous about JavaScript.

00:02:36.820 --> 00:02:38.480
They're not yet learning JavaScript.

00:02:38.480 --> 00:02:40.640
They know they need some interactivity,

00:02:40.640 --> 00:02:44.060
and they feel that means they have to abandon what they've already learned

00:02:44.060 --> 00:02:46.920
or what they actually love, and I don't think that's the case.

00:02:46.920 --> 00:02:48.020
And we're going to dive into that.

00:02:48.020 --> 00:02:52.180
So I think HTMX plus Python web frameworks is a beautiful thing.

00:02:52.180 --> 00:02:54.600
But before we get into that, let's just start with your story.

00:02:54.600 --> 00:02:58.560
How did you get into programming and, yeah, start there?

00:02:58.560 --> 00:02:58.840
Sure.

00:02:58.840 --> 00:03:01.720
Well, I've been programming for a very long time now,

00:03:01.720 --> 00:03:04.340
and I started programming in college back in 94.

00:03:04.340 --> 00:03:08.600
Actually, before that, I was programming on a Mac and HyperCard,

00:03:08.600 --> 00:03:11.960
which is a very old technology, which I love.

00:03:11.960 --> 00:03:13.380
The web before the web.

00:03:13.380 --> 00:03:13.860
Yeah.

00:03:13.860 --> 00:03:15.180
Like local web.

00:03:15.180 --> 00:03:16.380
I can talk about that.

00:03:16.380 --> 00:03:20.160
If we talk about HyperScript at the end, maybe that'll come up again.

00:03:20.280 --> 00:03:28.540
But I started programming in college and then very early on started programming for the web back when it was CGI scripts and Perl and stuff like that.

00:03:28.540 --> 00:03:38.760
And then I moved into Java during kind of the original .com boom and did a lot of the was in the Java world for a long time and eventually moved into Rails.

00:03:39.160 --> 00:03:42.800
And so I've been programming in Rails now for the most part.

00:03:42.800 --> 00:03:43.320
I do.

00:03:43.320 --> 00:03:47.060
I program in a lot of different stuff, though, mainly Java and Rails.

00:03:47.060 --> 00:03:50.220
And I have to admit to your audience, please don't judge me too hard.

00:03:50.220 --> 00:03:53.880
But I haven't used Python very much in anger.

00:03:53.880 --> 00:03:58.500
I've used it for local sort of sysadmin scripts, but not for a bunch of web development.

00:03:58.500 --> 00:04:03.540
So but, you know, Rails and Django share a lot of things in common with one another.

00:04:03.540 --> 00:04:07.300
And they're both great server side pieces of infrastructure.

00:04:07.300 --> 00:04:11.000
And I always felt like it was a shame that they were kind of being left.

00:04:11.000 --> 00:04:15.860
They were being ignored to a large extent by the by the bigger JavaScript frameworks.

00:04:16.500 --> 00:04:20.280
One term that I try and coin, there's a lot of different stacks out there, right?

00:04:20.280 --> 00:04:22.360
Like the lamp stack and so on and so forth.

00:04:22.360 --> 00:04:27.080
And one joke stack that I've made up is the Howl stack, which is hyper.

00:04:27.080 --> 00:04:28.540
Howl? H-O-W-L?

00:04:28.540 --> 00:04:29.540
H-O-W-L.

00:04:29.540 --> 00:04:30.400
Okay.

00:04:30.400 --> 00:04:32.840
So HTML on whatever you'd like.

00:04:32.840 --> 00:04:37.820
So use HTML on the front end and then use whatever you'd like on the back end.

00:04:37.820 --> 00:04:38.220
Nice, nice.

00:04:38.220 --> 00:04:40.140
HTMLX is really empowering for this, right?

00:04:40.140 --> 00:04:42.240
I mean, that's kind of the philosophy in some degree.

00:04:42.240 --> 00:04:44.700
I mean, you get a joke stack, but like literally that's.

00:04:44.700 --> 00:04:45.020
Yeah.

00:04:46.080 --> 00:04:47.680
It's a joke, but it's kind of true.

00:04:47.680 --> 00:04:49.220
So.

00:04:49.220 --> 00:04:49.740
Yeah.

00:04:49.740 --> 00:04:50.620
Yeah, absolutely.

00:04:50.620 --> 00:04:51.340
And how about now?

00:04:51.340 --> 00:04:52.220
What do you do day to day?

00:04:52.220 --> 00:04:54.800
So day to day, I teach part-time at a university.

00:04:54.800 --> 00:04:57.060
My passion is actually programming languages.

00:04:57.060 --> 00:05:01.960
So I teach that as well as some other classes at a university part-time.

00:05:01.960 --> 00:05:06.700
And then I also, I work for a startup as well that I've been working on for a long time and

00:05:06.700 --> 00:05:10.620
which uses Intercooler.js, which is the predecessor at HTMX.

00:05:10.740 --> 00:05:14.700
The story with HTMX was that, well, we can go into it in a little bit if you'd like to,

00:05:14.700 --> 00:05:15.960
but that's what I'm doing now.

00:05:15.960 --> 00:05:17.220
So kind of a mix.

00:05:17.220 --> 00:05:19.600
I find myself doing a lot of different stuff.

00:05:19.600 --> 00:05:20.080
Yeah.

00:05:20.080 --> 00:05:21.780
That sounds like a really nice mix.

00:05:21.780 --> 00:05:22.720
I love universities.

00:05:22.720 --> 00:05:24.100
I love university campuses.

00:05:24.100 --> 00:05:28.540
Maybe it's a slightly different story today with COVID, right?

00:05:28.540 --> 00:05:30.240
But I think we'll kind of get back to it.

00:05:30.300 --> 00:05:35.440
But some of my fondest memories are just, you know, spending time dreaming about ideas,

00:05:35.440 --> 00:05:36.980
walking around various campuses.

00:05:36.980 --> 00:05:37.420
Yeah.

00:05:37.420 --> 00:05:38.280
It's a good energy.

00:05:38.280 --> 00:05:40.500
The kids aren't quite as beaten down.

00:05:40.500 --> 00:05:44.800
Some of the, when you're in the corporate sector, I mean, you see a lot of these posts

00:05:44.800 --> 00:05:49.780
on Hacker News and so forth, just old guys, older guys and gals that are just sick of the

00:05:49.780 --> 00:05:50.800
sick of the grind.

00:05:50.800 --> 00:05:55.180
And so it's nice to be around younger kids that are maybe not quite as jaded and there's

00:05:55.180 --> 00:05:58.200
just an energy and, you know, it's a beautiful environment.

00:05:58.620 --> 00:05:58.980
Yeah.

00:05:58.980 --> 00:06:01.320
Keeps you young being around that crowd.

00:06:01.320 --> 00:06:02.420
I do think that's awesome.

00:06:02.420 --> 00:06:06.760
So I want to start our conversation by taking a little bit of a step back.

00:06:06.760 --> 00:06:13.640
And I think we've circled around this a little bit, but when people are working in some technology,

00:06:13.640 --> 00:06:18.840
let's focus on Python, but it could be Rails, like you had said before, and they've got something

00:06:18.840 --> 00:06:19.700
working really great.

00:06:19.700 --> 00:06:23.220
You come to some part of the site and it's like, well, this should be really interactive.

00:06:23.220 --> 00:06:25.240
Like I want to click on this thing.

00:06:25.240 --> 00:06:29.020
And depending on what I select here, I want that dropdown to select that other thing.

00:06:29.020 --> 00:06:34.620
Or as I search here, I want it to actually just fill it as I type.

00:06:34.620 --> 00:06:38.140
I don't want to have to type in the search text, hit enter, see what comes back from the

00:06:38.140 --> 00:06:38.440
server.

00:06:38.440 --> 00:06:45.240
Oftentimes that is sold as a, well, your site is going to be more responsive if it's running

00:06:45.240 --> 00:06:45.780
on the front end.

00:06:45.840 --> 00:06:51.000
And sometimes that's sort of true, but I feel like a well-designed website can be really

00:06:51.000 --> 00:06:51.500
responsive.

00:06:51.500 --> 00:06:55.820
Like I don't really feel like the speed thing is the story, but this interactive like navigation

00:06:55.820 --> 00:07:00.000
thing where it resets where it is, like that is a real challenge.

00:07:00.000 --> 00:07:03.840
And so often people get pulled down this path, right?

00:07:03.840 --> 00:07:05.860
Well, you want to have that experience.

00:07:05.860 --> 00:07:08.400
So is it Vue.js or React?

00:07:08.400 --> 00:07:09.220
What are you going to do?

00:07:09.220 --> 00:07:14.060
And then 10,000 lines later, a front end code, you've winnowed down your backend to

00:07:14.060 --> 00:07:17.960
just a couple of simple HTTP API methods.

00:07:17.960 --> 00:07:22.260
Then also something that serves up like a HTML static page.

00:07:22.260 --> 00:07:27.240
And then the question becomes, well, why are we doing Python or why are we doing Rails at

00:07:27.240 --> 00:07:27.440
all?

00:07:27.440 --> 00:07:32.240
Why don't we just do Node on the backend and we just have that as our entire stack?

00:07:32.240 --> 00:07:38.880
I feel a lot of times people either end up going down that path and throwing the baby

00:07:38.880 --> 00:07:40.520
out with the bathwater type of thing, right?

00:07:40.520 --> 00:07:45.740
Like you have this really cool server side ORM and a bunch of stuff happening that you really

00:07:45.740 --> 00:07:51.920
love from your server side, say Django or whatever, but you kind of already gone.

00:07:51.920 --> 00:07:53.080
Like you're just so close.

00:07:53.080 --> 00:07:55.520
You're just like, well, let's just, we're already mostly writing JavaScript.

00:07:55.520 --> 00:07:56.400
Let's just write JavaScript.

00:07:56.400 --> 00:07:58.520
So I think that's one side of the story.

00:07:58.840 --> 00:08:02.940
And I think there's real pressure on the other web frameworks and Python and other spaces

00:08:02.940 --> 00:08:03.360
for that.

00:08:03.360 --> 00:08:06.720
The other side is people who are not doing that, but they feel bad.

00:08:06.720 --> 00:08:09.340
They're like, I know I'm doing it wrong.

00:08:09.340 --> 00:08:10.900
I know I'm not using React.

00:08:10.900 --> 00:08:14.280
I'm just using Django, but this is all I know.

00:08:14.280 --> 00:08:16.520
And I just not ready or we're just not a big enough team.

00:08:16.520 --> 00:08:17.780
How's that sit with you?

00:08:17.780 --> 00:08:18.940
What do you think about this?

00:08:18.940 --> 00:08:20.560
Yeah, I didn't like that.

00:08:20.560 --> 00:08:21.760
That's exactly the pressure.

00:08:21.760 --> 00:08:22.740
I don't like it either.

00:08:22.740 --> 00:08:24.660
That's why I'm so excited about HTMLX.

00:08:24.660 --> 00:08:27.140
That's exactly the pressure that I felt on Rails.

00:08:27.140 --> 00:08:28.140
I liked Rails.

00:08:28.140 --> 00:08:31.860
Ruby is a programming language I'm so, so on.

00:08:31.860 --> 00:08:32.440
It's fine.

00:08:32.440 --> 00:08:33.560
It's got its issues.

00:08:33.560 --> 00:08:35.100
But I liked Rails quite a bit.

00:08:35.100 --> 00:08:41.380
And I just disliked that pressure to adopt something else on the backend that came with using these

00:08:41.380 --> 00:08:43.360
more complex JavaScript frontends.

00:08:43.360 --> 00:08:46.840
And like I said earlier, it was just a shame.

00:08:46.840 --> 00:08:51.700
And the other aspect of that is when you go to that model, when you go to the Vue.js or the

00:08:51.700 --> 00:08:54.400
React model, your backend becomes pretty dumb.

00:08:54.400 --> 00:08:56.120
It's just producing JSON.

00:08:56.800 --> 00:08:58.280
You know, there's validation code.

00:08:58.280 --> 00:09:02.660
And, you know, yeah, your validation code can now live on both sides, which is important

00:09:02.660 --> 00:09:05.380
because the front end is not a trusted computing environment.

00:09:05.380 --> 00:09:07.920
So you can't trust validations that are done on the front end.

00:09:07.920 --> 00:09:08.860
You always have to redo them.

00:09:08.860 --> 00:09:10.800
You just redo them again anyway.

00:09:10.800 --> 00:09:11.220
That's right.

00:09:11.720 --> 00:09:24.840
So there's just all these kind of, I don't think they're complete arguments, but just, it's just with the grain to start pushing JavaScript onto the backend, especially once Node really came out and gave JavaScript a good runtime on the backend.

00:09:24.840 --> 00:09:26.320
And it's not a good thing.

00:09:26.320 --> 00:09:44.860
And the reality is, is I hope we can demonstrate with HTMX today that a lot of very good UI or slash UX patterns from the web can be achieved using just HTML, using the original HTML model, the original RESTful model for the web.

00:09:44.860 --> 00:09:54.840
I know that's kind of a fancy term, but just using the original model of the web, just kind of generalizing what we're already familiar with in our day-to-day development, links and forms.

00:09:54.840 --> 00:09:57.960
That's where HTMX is coming from is this idea.

00:09:57.960 --> 00:09:58.720
Wait a second.

00:09:58.720 --> 00:10:00.100
Let's take a step back.

00:10:00.100 --> 00:10:02.340
We don't need a super complicated front end.

00:10:02.340 --> 00:10:04.580
We just need to improve HTML.

00:10:04.580 --> 00:10:05.000
Right.

00:10:05.100 --> 00:10:07.260
We don't have to push it all down to the front end.

00:10:07.260 --> 00:10:07.580
Right.

00:10:07.580 --> 00:10:10.480
We only need to push a little bit of that interactivity down, right?

00:10:10.480 --> 00:10:11.040
That's right.

00:10:11.040 --> 00:10:17.520
And that interactivity can be defined in terms that are very familiar to us from normal HTML.

00:10:17.520 --> 00:10:25.460
So let's just take HTML and try and push it as a hypermedia or hypermedium, I guess I should say.

00:10:25.460 --> 00:10:29.240
People get mad because hypermedia is plural, but I say it.

00:10:29.240 --> 00:10:32.420
So, you know, that's where HTMX is coming from.

00:10:32.420 --> 00:10:33.320
It's very similar.

00:10:33.720 --> 00:10:37.480
You know, this frustration with the industry, particularly.

00:10:37.480 --> 00:10:43.920
I don't think this is strong now because Python has had, I mean, you go and you look at the trends and Python is just crushing right now.

00:10:43.920 --> 00:10:44.180
Yeah.

00:10:44.180 --> 00:10:48.200
It's such a, not a resurgence, but such an acceleration from where it was.

00:10:48.200 --> 00:10:48.580
Right.

00:10:48.580 --> 00:10:50.160
You know, 10 years ago.

00:10:50.160 --> 00:10:55.200
And I think if you compare that with five years ago, JavaScript was really the thing that was accelerating the most.

00:10:55.200 --> 00:10:56.480
I don't think that's true today.

00:10:56.480 --> 00:10:58.660
I think JavaScript is maybe plateauing a little bit.

00:10:58.660 --> 00:11:00.800
There's still plenty of JavaScript out there, obviously.

00:11:01.120 --> 00:11:09.000
But I feel like Python is really taking off because of, you know, big data and some of the AI tools that are available in Python.

00:11:09.380 --> 00:11:15.680
And so some of the great older tools like Django and Flask that have been around for a long time and that do a good job.

00:11:15.680 --> 00:11:34.660
So, again, just a very similar situation with you where I'm looking at this going, man, this stinks that you have to become either like a killer JavaScript front end engineer and then have two languages that are pretty complicated or abandon whatever backend you prefer in favor of JavaScript.

00:11:35.060 --> 00:11:35.180
Yeah.

00:11:35.180 --> 00:11:36.460
I'm 100% with you.

00:11:36.460 --> 00:11:37.880
Let me pull up a couple of things.

00:11:37.880 --> 00:11:41.800
One, here's that graph that you were talking about.

00:11:41.800 --> 00:11:42.700
Yeah, that's exactly the graph.

00:11:42.700 --> 00:11:44.460
Of Python going pretty wild.

00:11:44.460 --> 00:11:47.700
Like, you talked about JavaScript plateauing.

00:11:47.700 --> 00:11:52.420
So this is the stack overflow, you know, stack overflow trends for the major programming languages.

00:11:52.420 --> 00:11:56.320
So this is really surprising to me and I find it quite interesting here.

00:11:56.380 --> 00:11:56.620
Yeah.

00:11:56.620 --> 00:11:58.360
Also, a couple of things from the live stream.

00:11:58.360 --> 00:11:58.920
Nick Harvey.

00:11:58.920 --> 00:12:03.540
Hey, Nick says, for me, it's a constant battle between all the benefits of server side.

00:12:03.540 --> 00:12:05.840
Plus, I don't want the page to keep refreshing.

00:12:05.840 --> 00:12:06.300
Yep.

00:12:06.300 --> 00:12:07.760
I sympathize, Nick.

00:12:07.760 --> 00:12:10.900
And that's exactly what HTMX is designed to help with.

00:12:10.900 --> 00:12:16.160
The real bad part about the original web and browsers, we have to say, I think you made this point earlier, Michael.

00:12:16.720 --> 00:12:22.320
Browsers have gotten better at making the page transition not quite as clunky visually.

00:12:22.320 --> 00:12:27.660
So you can do sort of web 1.0 style apps and get away with it for a lot of stuff.

00:12:27.660 --> 00:12:28.180
Yeah.

00:12:28.180 --> 00:12:31.100
You talked about doing programming in 94.

00:12:31.100 --> 00:12:36.040
And I remember the first mosaic that I saw that was the graphical web.

00:12:36.040 --> 00:12:39.540
And I was just, my jaw was just dropped.

00:12:39.540 --> 00:12:41.660
I'm like, this changes everything.

00:12:41.660 --> 00:12:46.420
I've been using Telnet and like Gopher and all sorts of crazy stuff.

00:12:46.640 --> 00:12:47.400
Oh my gosh.

00:12:47.400 --> 00:12:49.980
And I'm just like, this is a new world.

00:12:49.980 --> 00:12:54.860
I literally think I had to skip the next class I was supposed to go to because I'm like, I can't, I have to explore this.

00:12:54.860 --> 00:12:56.420
This is unbelievable what I've just found.

00:12:56.420 --> 00:12:57.700
But I remember it going clunk, clunk.

00:12:57.700 --> 00:13:00.320
You could just see it building the page as it comes.

00:13:00.320 --> 00:13:03.040
And that was, yeah, luckily it's not like that.

00:13:03.040 --> 00:13:04.080
It's the big problem.

00:13:04.080 --> 00:13:07.020
It is, you know, it's much better now, but it's still a problem.

00:13:07.020 --> 00:13:09.620
And it's a big problem for many UX patterns.

00:13:09.620 --> 00:13:10.920
You just, you don't want it.

00:13:10.920 --> 00:13:14.900
And that's exactly what HTMX is designed to help with.

00:13:15.600 --> 00:13:17.860
So you can stay within that original model of the web.

00:13:17.860 --> 00:13:23.580
You can use whatever backend you want to produce your HTML, but we can get better user experience out of it.

00:13:23.580 --> 00:13:23.860
Yeah.

00:13:23.860 --> 00:13:24.160
Yeah.

00:13:24.880 --> 00:13:29.100
So also RJ out there in the live stream says, I just discovered HTMX a few days ago.

00:13:29.100 --> 00:13:29.760
Great timing.

00:13:29.760 --> 00:13:34.900
This portion of Talk Python I May is brought to you by Sentry.

00:13:34.900 --> 00:13:37.420
How would you like to remove a little stress from your life?

00:13:37.420 --> 00:13:42.520
Do you worry that users might be having difficulties or are encountering errors in your app right now?

00:13:42.520 --> 00:13:45.420
Would you even know it until they send that support email?

00:13:46.020 --> 00:13:56.680
How much better would it be to have the error and performance details immediately sent to you, including the call stack and values of local variables and the active user recorded in that report?

00:13:56.680 --> 00:13:59.800
With Sentry, this is not only possible, it's simple.

00:13:59.800 --> 00:14:03.560
In fact, we use Sentry on all the Talk Python web properties.

00:14:03.800 --> 00:14:10.220
We've actually fixed a bug triggered by a user and had the upgrade ready to roll out as we got their support email.

00:14:10.220 --> 00:14:11.920
That was a great email to write back.

00:14:11.920 --> 00:14:14.380
We saw your error and have already rolled out the fix.

00:14:14.380 --> 00:14:15.560
Imagine their surprise.

00:14:15.560 --> 00:14:17.800
Surprise and delight your users today.

00:14:17.800 --> 00:14:21.200
Create your Sentry account at talkpython.fm/sentry.

00:14:21.200 --> 00:14:32.500
And if you sign up with the code talkpython2021, it's good for two months of Sentry's team plan, which will give you up to 20 times as many monthly events as well as other features.

00:14:32.500 --> 00:14:37.480
So just use that code talkpython2021 as your promo code when you sign up.

00:14:37.480 --> 00:14:42.060
Yeah, so speaking of which, let's go ahead and let's get into it, right?

00:14:42.060 --> 00:14:46.400
So we've set this up as a, it doesn't have to be either or.

00:14:46.400 --> 00:14:51.580
It doesn't have to be either Django or Flask or React or Vue, right?

00:14:51.580 --> 00:14:53.300
Like, it doesn't necessarily have to be that way.

00:14:53.300 --> 00:14:55.640
And there's some really cool stuff going on here.

00:14:55.640 --> 00:14:59.520
Like, let me just read this little introduction you got over here at htmx.org.

00:14:59.520 --> 00:15:10.400
It says, htmx allows you to access AJAX, CSS transitions, web sockets, server sent events directly in HTML just using attributes so you can build modern interfaces simply.

00:15:10.400 --> 00:15:11.840
Which is really nice.

00:15:11.840 --> 00:15:18.680
And one of the things that frustrates me about these frameworks, like I do some stuff in Vue and like, I'm not against it.

00:15:18.680 --> 00:15:25.860
I just want to put out there, I realize there are apps that are absolutely making sense to build with Vue or with React, right?

00:15:25.860 --> 00:15:30.460
Are you trying to build a mobile app that is really sort of a progressive web app?

00:15:30.460 --> 00:15:32.640
Like, oh, that should absolutely be in that.

00:15:32.640 --> 00:15:35.040
Are you trying to build Gmail?

00:15:35.040 --> 00:15:37.580
It should very likely be in something like Vue.

00:15:38.240 --> 00:15:44.780
But most of us just want a sprinkling, like a little salt, you know, a little bit of niceness here and there to our app.

00:15:45.320 --> 00:15:55.280
And in order to get that, these days JavaScript has moved so far that it's no longer this simple little language that you just include a tag and then to the file and you're good to go.

00:15:55.280 --> 00:16:01.500
It's like you've got Webpack and you've got CLI tools and you've just got all this stuff to go, right?

00:16:01.500 --> 00:16:05.540
So what's the getting started experience for htmx?

00:16:05.680 --> 00:16:07.920
Yeah, htmx looks pretty straightforward here.

00:16:07.920 --> 00:16:11.580
Yeah, it's a small, it's a no build library.

00:16:11.580 --> 00:16:14.020
So there's no build step associated with it.

00:16:14.020 --> 00:16:15.120
You just drop it in.

00:16:15.120 --> 00:16:16.820
I mean, you can use a CDN if you want.

00:16:16.820 --> 00:16:23.120
The starting experience for it can be as simple as just adding a single attribute or maybe two attributes would be the minimum thing.

00:16:23.820 --> 00:16:28.440
And so it's not, it doesn't require a total rework of your front end.

00:16:28.440 --> 00:16:33.300
And that's one thing, you know, one concept I like to talk about with my students is this idea of a complexity budget.

00:16:33.300 --> 00:16:35.300
Your application has a complexity budget.

00:16:35.300 --> 00:16:37.000
You need to spend it effectively.

00:16:37.380 --> 00:16:43.340
And so with htmx, you can pick the parts of your app that need it and add interactivity to them.

00:16:43.340 --> 00:16:49.160
And the remainder of your app can remain just a standard, you know, web app that works the normal way.

00:16:49.160 --> 00:16:58.140
And because of that, you can sort of spend your complexity budget where you want to on your app rather than saying, okay, we're going to, we're going to react.

00:16:58.140 --> 00:16:59.860
And now we need a react router.

00:16:59.860 --> 00:17:00.920
And now we need GraphQL.

00:17:00.920 --> 00:17:03.120
We need all this stuff to make.

00:17:03.120 --> 00:17:05.640
Our next sprint is going to be the rewrite sprint.

00:17:05.640 --> 00:17:06.100
Right.

00:17:06.620 --> 00:17:11.980
I hope it's, you know, people would agree that it's, it's a lightweight library in that sense.

00:17:11.980 --> 00:17:16.100
And that you don't, you don't need to do a whole lot to make things work within one particular.

00:17:16.100 --> 00:17:27.680
There's some attributes like HX boost, for example, that you can just kind of toss on your, you know, on the body tag and it'll turn all the links into Ajax requests and all the forms into Ajax submissions.

00:17:27.680 --> 00:17:32.320
And so it's kind of like a turbo links, if you're familiar with that technology and that sense.

00:17:32.320 --> 00:17:36.600
So we, you know, there's, that isn't a big focus of the library, but it's there as well.

00:17:36.600 --> 00:17:41.580
So hopefully relatively lightweight and the user experience.

00:17:41.960 --> 00:17:49.360
I was going to say, so you basically include a script tag to link to HTMX, 10 kilobytes and it has no dependencies.

00:17:49.360 --> 00:17:49.880
Yep.

00:17:51.520 --> 00:17:51.880
Yeah.

00:17:51.880 --> 00:18:00.060
RJL out there in the live stream says, I strongly believe that these JS libraries, speaking of view and react and whatnot, are overkill for the majority of CRUD apps that exist on the web.

00:18:00.060 --> 00:18:03.460
Probably 90% of the CRUD apps are built within private corporations.

00:18:03.460 --> 00:18:05.480
And I've been doing that since 94.

00:18:05.780 --> 00:18:09.420
And then also does NPM and web pack are both a blessing and a curse.

00:18:09.420 --> 00:18:10.000
Yeah.

00:18:10.000 --> 00:18:12.960
Especially if you're a backend sort of person.

00:18:12.960 --> 00:18:13.380
Yeah.

00:18:13.380 --> 00:18:21.200
I never liked big, complicated build tools in any, you know, in any, even on the backend, I just, I'm not a big fan of them.

00:18:21.200 --> 00:18:25.400
I like dependency managers, but beyond that, I don't want a bunch of stuff going on.

00:18:25.400 --> 00:18:26.220
Yeah.

00:18:26.260 --> 00:18:27.420
I'm with you on that as well.

00:18:27.420 --> 00:18:28.420
All right.

00:18:28.420 --> 00:18:34.400
So let's talk about the motivation that you got here before we get into some code, because I think it really sets the stage.

00:18:34.400 --> 00:18:46.980
I mean, obviously we've, we've been studying the motivation here, but you know, you throw out some questions, some hypotheticals like, Hey, why should only anchor tags and forms be able to make HTTP requests?

00:18:46.980 --> 00:18:51.180
Like if I click on an image, shouldn't it be able to make an HTTP request?

00:18:51.180 --> 00:18:54.920
Why should click and submit be the only events that trigger them?

00:18:54.920 --> 00:18:55.360
Right.

00:18:55.440 --> 00:18:58.200
Like I don't know, mouse over or key down or something like that.

00:18:58.200 --> 00:18:58.360
Right.

00:18:58.360 --> 00:19:00.860
Probably key down for a smart auto-complete search.

00:19:00.860 --> 00:19:03.520
Why should only get and post be available?

00:19:03.520 --> 00:19:06.980
And why should you, why should they only replace the entire screen?

00:19:06.980 --> 00:19:07.560
Yeah.

00:19:07.560 --> 00:19:11.960
And that last one's really the crux for what Nick was talking about earlier, right?

00:19:11.960 --> 00:19:17.160
Is web requests have to do this big, chunky, replace the whole screen.

00:19:17.160 --> 00:19:24.780
If you have an action that only updates a small amount of that screen, why not just return the HTML for that small amount of the screen?

00:19:24.780 --> 00:19:32.840
And then in that element that's issuing that request specify, Oh, put the return content into that thing.

00:19:32.900 --> 00:19:34.320
And that's exactly that.

00:19:34.320 --> 00:19:44.920
So HTMX has an attribute called HX swap that lets you, or excuse me, HX target that lets you say exactly where you want to place the return to content.

00:19:44.920 --> 00:19:50.420
And then HX swap is another attribute, which lets you tell HTMX exactly how to do that swap.

00:19:50.420 --> 00:19:54.860
If you want to replace the whole thing or just the inner content or append it or whatever.

00:19:54.860 --> 00:20:00.060
So let me lay out an example here of a type of app that feels like it would need view or something.

00:20:00.480 --> 00:20:02.220
I'm just going to pick on view.

00:20:02.220 --> 00:20:06.740
It's like the catch all for all the major front end frameworks going forward.

00:20:06.740 --> 00:20:12.760
So imagine I've got like a photo gallery of like five images up on the screen.

00:20:12.760 --> 00:20:16.780
And I want to be able to click on that image and then have like a details of it.

00:20:16.780 --> 00:20:22.580
Like maybe the exit tags or like where it was taken or other stuff stored about it on the server.

00:20:22.720 --> 00:20:28.280
Maybe it's like a Wikipedia thing and like you click on the picture and it gives you some details about the picture below.

00:20:28.280 --> 00:20:29.740
And you just want to keep that there.

00:20:29.740 --> 00:20:34.640
And as you click on them, maybe even use an arrow keys or click around between them and have that happen.

00:20:34.640 --> 00:20:36.700
That's the kind of thing you're talking about, right?

00:20:36.700 --> 00:20:42.060
Like I could set it up so I could have an event where I interact with the image and it does a swap.

00:20:42.060 --> 00:20:47.100
And explain to me what I have to write in order to get that bottom part to like reload.

00:20:47.100 --> 00:20:53.020
Yeah, all you would do is on that image, you would say HX get and you would give it the URL to get that information from.

00:20:53.020 --> 00:20:55.860
And that information would come back in HTML form.

00:20:55.860 --> 00:20:58.100
And then you would say HX target.

00:20:58.100 --> 00:21:03.540
And there would likely be a div down below that would be your details div.

00:21:03.540 --> 00:21:05.680
And let's say it has the ID details.

00:21:05.680 --> 00:21:10.560
So your HX target attribute in that case would be hash details.

00:21:10.560 --> 00:21:19.260
And that tells HTMLX when this request comes back, take that content and jam it into the details div or whatever that has the ID details on it.

00:21:19.260 --> 00:21:20.600
Yeah, so that bottom section.

00:21:20.600 --> 00:21:26.340
And then if you want to, you know, depending on how you want to do that swap, the HX swap attribute lets you say inner HTML.

00:21:26.340 --> 00:21:27.840
Default is inner HTML.

00:21:27.840 --> 00:21:30.240
So it'll swap that into the inner HTML.

00:21:30.240 --> 00:21:32.780
But maybe you want to replace the whole thing for whatever reason.

00:21:32.780 --> 00:21:36.000
You could say HX swap outer HTML.

00:21:36.000 --> 00:21:38.640
And then there's a bunch of attributes there.

00:21:38.640 --> 00:21:40.120
And there's some syntax in there.

00:21:40.120 --> 00:21:47.660
Let's see, control scroll state, whether or not something gets pushed into history, depending on how you want to do that and so forth.

00:21:47.660 --> 00:21:54.320
And so there's a lot of stuff like that that lets you determine exactly how that swap is going to happen.

00:21:54.320 --> 00:21:54.720
Yeah.

00:21:54.720 --> 00:21:55.580
Fantastic.

00:21:56.000 --> 00:22:03.220
So right on the home screen, you've got kind of an example that is commented.

00:22:03.220 --> 00:22:07.460
Without the comments, it's four lines of HTML.

00:22:07.460 --> 00:22:08.080
Right.

00:22:08.080 --> 00:22:10.540
And that's the entire application.

00:22:10.540 --> 00:22:14.260
I guess you probably would want to wrap that in like an HTML and a body tag.

00:22:14.260 --> 00:22:15.720
But beyond that, right?

00:22:15.720 --> 00:22:18.680
So what you do is you include the script and then you have a button.

00:22:18.680 --> 00:22:24.020
And on the button, you have an attribute that says HX-post equals slash clicked.

00:22:24.020 --> 00:22:30.060
Then you have your HX-swap equals outer HTML, presumably of the button.

00:22:30.060 --> 00:22:30.260
Right.

00:22:30.260 --> 00:22:41.360
So you could say click the button and the button would replace with like a map of where you are or a grid of results or whatever the heck the returned HTML from slash clicked is.

00:22:41.360 --> 00:22:41.560
Right.

00:22:41.560 --> 00:22:42.240
Yeah, that's right.

00:22:42.240 --> 00:22:43.820
And it's HX-post, right?

00:22:43.820 --> 00:22:44.520
Is that what you said?

00:22:44.520 --> 00:22:44.860
Yeah.

00:22:44.860 --> 00:22:45.680
HX-post.

00:22:45.680 --> 00:22:46.400
I probably said it wrong.

00:22:46.400 --> 00:22:47.160
But yes, exactly.

00:22:47.160 --> 00:22:48.080
That's what I meant.

00:22:48.080 --> 00:22:48.920
Oh, no, it's okay.

00:22:48.920 --> 00:22:49.720
I just want to make sure.

00:22:49.720 --> 00:22:50.360
Yep.

00:22:50.360 --> 00:22:50.940
Yeah, yeah.

00:22:50.940 --> 00:22:51.400
Keep me honest.

00:22:51.400 --> 00:22:52.360
No, it's all good.

00:22:52.360 --> 00:22:53.560
It's hard to do code visually.

00:22:53.560 --> 00:22:55.320
My screen is flickering again.

00:22:55.320 --> 00:22:57.560
So I want to make sure I'm on the same page as you here.

00:22:57.560 --> 00:22:58.360
Yeah, yeah, yeah.

00:22:58.360 --> 00:22:59.840
This is just a quick start at the homepage.

00:22:59.840 --> 00:23:16.760
This is so neat because when people think about all the stuff they have to do, in order to adopt this type of dynamic page that you're talking about, what you have to do is you have to have a method on the server, a view method on the server that returns

00:23:17.480 --> 00:23:18.480
HTML fragments.

00:23:18.480 --> 00:23:19.020
Right.

00:23:19.020 --> 00:23:22.700
Instead of returning, you know, the whole HTML body, whatever.

00:23:22.700 --> 00:23:30.880
Like if my story where I said I'm going to put a grid of results, you have to have a server side thing that can generate HTML for a grid.

00:23:30.880 --> 00:23:31.380
Right.

00:23:31.380 --> 00:23:41.260
So you could do that with like a template like a Jinja or a Django template or a Chameleon template on the server and just pull the data out of your database, bind it.

00:23:41.260 --> 00:23:44.500
And instead of returning, have your template contain a full bit of HTML.

00:23:44.680 --> 00:23:45.800
It's like an HTML fragment.

00:23:45.800 --> 00:23:46.260
Yeah.

00:23:46.420 --> 00:23:47.420
Exactly.

00:23:47.420 --> 00:23:47.420
Exactly.

00:23:47.420 --> 00:23:49.340
In Rails, they're called partials.

00:23:49.340 --> 00:23:51.660
That's the language the Rails community uses.

00:23:51.660 --> 00:23:53.700
But it's just a sub-template.

00:23:53.980 --> 00:24:06.300
And so typically what you would do in an HTML based application is you would have your normal templates and then they would include these sort of sub-templates or partials, again, to use the Rails terminology.

00:24:07.140 --> 00:24:10.900
And so the HTML kind of pushes the factoring problem to the back end.

00:24:10.900 --> 00:24:20.740
So you factor your templates out on the back end rather than maybe creating components on the front end is how someone more familiar with Vue might think about these things or React.

00:24:20.740 --> 00:24:21.060
Yeah.

00:24:21.060 --> 00:24:23.540
It's like the little component bit on the server side there.

00:24:23.540 --> 00:24:23.740
Yeah.

00:24:23.740 --> 00:24:24.220
Yeah.

00:24:24.220 --> 00:24:34.640
So you do your factoring on the back end and then hopefully you're designing a good URL schema, a nice RESTful URL schema, and it all kind of makes sense with sub-resources and so forth.

00:24:34.640 --> 00:24:34.880
Right.

00:24:34.880 --> 00:24:36.540
So in this example, there's just a button.

00:24:36.660 --> 00:24:38.280
It just goes to slash clicked.

00:24:38.280 --> 00:24:51.360
But in my scenario where I had five images, the URL, like the hx-post could be slash detail slash one, slash detail slash two.

00:24:51.360 --> 00:25:02.620
And when you render the original HTML, you can preload into those embedded pieces the right data to pass on when it gets clicked or it gets interacted with.

00:25:02.620 --> 00:25:02.800
Right.

00:25:02.800 --> 00:25:03.740
Yeah, exactly.

00:25:03.740 --> 00:25:05.560
So that image is a resource.

00:25:05.780 --> 00:25:09.340
If we're thinking restfully, that image is a resource on the server.

00:25:09.340 --> 00:25:12.480
And so it has a URL associated with it.

00:25:12.480 --> 00:25:14.080
Let's say images slash one.

00:25:14.080 --> 00:25:15.420
Let's just say that.

00:25:15.420 --> 00:25:20.520
And then images slash one might have a sub-resource of images slash one slash details.

00:25:21.200 --> 00:25:30.500
And so you would, you know, you render that image slash ID slash details is what returns the details you were talking about earlier.

00:25:30.500 --> 00:25:36.820
And you would probably use hx-get in this case because it's a, you're retrieving information without a mutation.

00:25:36.820 --> 00:25:42.320
So post is probably not an appropriate HTTP verb or action to use.

00:25:42.400 --> 00:25:47.180
And so you would get that and then, you know, slam it into the div below the images.

00:25:47.180 --> 00:25:47.760
Right.

00:25:47.940 --> 00:25:53.500
That's almost exactly what you would do if you were going to write a server-side only thing.

00:25:53.500 --> 00:25:53.600
Right.

00:25:53.600 --> 00:25:58.460
It would just pull up that details page and it would have a back button to get to the other ones or something like that.

00:25:58.460 --> 00:26:01.180
Or maybe it would reload the whole page and then just stuff that in the bottom.

00:26:01.180 --> 00:26:01.480
Yep.

00:26:01.480 --> 00:26:05.760
So the experience of writing is almost, it's almost unchanged, right?

00:26:05.760 --> 00:26:08.140
You get to fully leverage the server-side thing.

00:26:08.140 --> 00:26:08.600
It is.

00:26:08.600 --> 00:26:09.800
And that's a great point.

00:26:09.800 --> 00:26:11.940
It's very similar to a link, right?

00:26:11.940 --> 00:26:16.980
And the advantages here are that you don't have that clunky user experience.

00:26:16.980 --> 00:26:18.440
You do have a smaller payload.

00:26:18.440 --> 00:26:20.320
That tends not to matter that much.

00:26:20.320 --> 00:26:23.620
People make a bigger deal out of that than I think is necessary.

00:26:23.620 --> 00:26:24.020
Yeah.

00:26:24.020 --> 00:26:25.860
But it really retains that simplicity.

00:26:26.500 --> 00:26:38.800
And on top of that, you also have all these tools that have been developed over the last 20 plus years of web development that are suddenly available to you again, such as caching and SQL tuning on the backend and so forth.

00:26:38.800 --> 00:26:51.300
All that institutional knowledge that we've built up about how to create good, fast web applications applies using the HTMX model in a way that is not as obvious if you're front end.

00:26:51.420 --> 00:26:59.800
You know, there's a whole separate style of development for developing JSON APIs at this point that just doesn't have a lot to do with that original model.

00:26:59.800 --> 00:27:01.980
And so we're relearning things.

00:27:01.980 --> 00:27:06.460
How do you, you know, that's, that model is really RPC, remote procedure call, I think.

00:27:06.460 --> 00:27:13.780
And so that is just a different mindset than the hypermedia infrastructure that we're used to as web app developers.

00:27:13.780 --> 00:27:14.740
Yeah, for sure.

00:27:15.080 --> 00:27:18.000
So you talked about this complexity budget before.

00:27:18.000 --> 00:27:33.580
And one of the things I like about this is I can have already built my application and I can decide, you know what, it would be a lot better if instead of doing a full refresh for this part, we could just add some interactivity to this.

00:27:33.580 --> 00:27:33.940
Right.

00:27:33.940 --> 00:27:34.340
Right.

00:27:34.340 --> 00:27:41.900
It feels to me like it's very easy to go to an existing web app and add this more dynamic nature to it.

00:27:41.900 --> 00:27:42.300
Yeah.

00:27:42.300 --> 00:27:44.640
In certain focused areas with HTMX.

00:27:44.640 --> 00:27:44.980
Yep.

00:27:44.980 --> 00:27:45.600
Exactly.

00:27:45.600 --> 00:27:47.920
You know, that's, again, I advocate for that.

00:27:47.920 --> 00:27:53.600
I think a good MVP written in the web 1.0 style can validate your app.

00:27:53.600 --> 00:28:01.340
You can start getting feedback very quickly without this really expensive from in development terms, front end investment in your technology.

00:28:01.340 --> 00:28:07.520
And then once that works out, you can start seeing how users are using your app and improving it from there.

00:28:07.520 --> 00:28:14.580
And so it lets you delay committing your complexity budget deeper into the development process.

00:28:14.580 --> 00:28:17.900
I think that's a big advantage of these lighter weight front end frameworks.

00:28:17.900 --> 00:28:21.640
Alpine JS is another one that I think lets you do that to an extent.

00:28:21.640 --> 00:28:23.880
You can just kind of sprinkle in when you want.

00:28:23.960 --> 00:28:28.420
And in fairness, I have heard people say that Vue can also be used in this way.

00:28:28.420 --> 00:28:31.040
So I don't want to say that's exclusive.

00:28:31.040 --> 00:28:31.660
Yeah.

00:28:31.660 --> 00:28:32.100
Yeah.

00:28:32.100 --> 00:28:36.620
If I had to pick a rich front end framework, Vue is certainly where I feel really happy.

00:28:36.620 --> 00:28:52.860
because while it does have the CLI stuff and it does have a lot of that style, it also has ability to just drop in a JavaScript file for Vue JS and then indicate here's a sub tag or some subset of my page.

00:28:52.860 --> 00:28:53.780
And now that's the app.

00:28:53.780 --> 00:28:55.560
Make this page go right there.

00:28:55.560 --> 00:28:56.660
There's that nice aspect.

00:28:56.660 --> 00:29:03.640
But yeah, I just feel like the, you still get to do all the important stuff on the server here, which is pretty cool.

00:29:03.640 --> 00:29:04.000
Yeah.

00:29:04.740 --> 00:29:08.500
Yvonne out in the live stream says, I heard about HTMX at DjangoCon EU.

00:29:08.500 --> 00:29:09.540
Really like the project.

00:29:09.540 --> 00:29:11.080
Fire, fire emoji.

00:29:11.080 --> 00:29:11.540
Yeah.

00:29:11.540 --> 00:29:19.740
We got a lot of mentions at DjangoCon EU and I'm hoping we'll get a bunch at the US DjangoCon as well.

00:29:19.740 --> 00:29:26.760
And, you know, I'm not, again, since I'm kind of, I have to, again, admit a little bit of an outsider in the Python community.

00:29:26.760 --> 00:29:34.380
You know, I'm hopeful that I can make more contacts and really help HTMX help Python developers stay in Python.

00:29:34.380 --> 00:29:36.040
So, yeah.

00:29:36.040 --> 00:29:36.880
Do this more.

00:29:36.880 --> 00:29:42.640
Do you provide better user experience for your users, but also stay within the Python world.

00:29:42.640 --> 00:29:45.640
It's, you know, obviously just, it's growing gangbusters.

00:29:45.640 --> 00:29:46.060
So.

00:29:46.060 --> 00:29:46.860
Yeah, for sure.

00:29:46.860 --> 00:29:49.480
Well, if your screen is willing.

00:29:49.480 --> 00:29:49.920
Yeah.

00:29:50.320 --> 00:29:53.340
Actual screen on your, like actual monitor is willing.

00:29:53.340 --> 00:29:55.100
Let's look at some examples.

00:29:55.100 --> 00:29:55.760
So.

00:29:55.760 --> 00:29:58.740
And I have to admit, I'm flying blind right now.

00:29:58.740 --> 00:30:00.440
My screen is blinking on.

00:30:00.440 --> 00:30:00.780
All right.

00:30:00.780 --> 00:30:01.360
So, but.

00:30:01.440 --> 00:30:03.220
Hopefully you're, I'll try to describe it.

00:30:03.220 --> 00:30:03.680
Yeah.

00:30:03.680 --> 00:30:05.780
I've got my phone up so I can follow along.

00:30:05.780 --> 00:30:06.500
Yeah.

00:30:06.500 --> 00:30:06.880
Perfect.

00:30:06.880 --> 00:30:08.200
Sorry.

00:30:08.200 --> 00:30:08.920
Linux.

00:30:08.920 --> 00:30:09.520
No, no, no.

00:30:09.520 --> 00:30:10.160
It's all good.

00:30:10.160 --> 00:30:10.780
It's all good.

00:30:10.780 --> 00:30:12.140
For just people listening.

00:30:12.140 --> 00:30:14.580
It's not that like the screen sharing is not working.

00:30:14.580 --> 00:30:16.800
Like the actual whole display is having trouble.

00:30:16.800 --> 00:30:17.380
Yeah.

00:30:17.380 --> 00:30:18.820
But luckily it's still going.

00:30:18.820 --> 00:30:19.380
Yeah.

00:30:19.380 --> 00:30:19.740
I know.

00:30:19.740 --> 00:30:23.200
I switched to Linux two years ago and 99% of the time it works great.

00:30:23.200 --> 00:30:24.900
But of course on this podcast.

00:30:24.900 --> 00:30:25.760
Yeah.

00:30:25.760 --> 00:30:26.700
It's fine.

00:30:26.700 --> 00:30:27.440
It's all good.

00:30:27.720 --> 00:30:29.900
Murphy waits for the maximum pressure.

00:30:29.900 --> 00:30:30.060
Yeah.

00:30:30.060 --> 00:30:31.060
Maximum pain.

00:30:31.060 --> 00:30:31.840
It's a straight.

00:30:31.840 --> 00:30:32.740
Exactly.

00:30:32.740 --> 00:30:37.660
Let me just go through a couple here that I think would need.

00:30:37.660 --> 00:30:38.720
I have pulled them up.

00:30:38.720 --> 00:30:43.420
One of them was this active search because I feel like this is the type of thing that is

00:30:43.420 --> 00:30:49.680
like really easy, but also really calls out for some interesting JavaScript thing.

00:30:49.680 --> 00:30:53.060
So over here, you've got a page.

00:30:53.060 --> 00:30:55.200
You don't have the outer shell bits, right?

00:30:55.200 --> 00:30:55.500
Body.

00:30:55.500 --> 00:30:55.840
Yeah.

00:30:55.840 --> 00:30:56.580
But whatever.

00:30:56.580 --> 00:30:58.380
You don't need that, right?

00:30:58.380 --> 00:31:02.200
You've got a header that says what we're going to do is we're going to search.

00:31:02.200 --> 00:31:02.580
Yep.

00:31:02.580 --> 00:31:06.860
And then you have an HTMX indicator next to the title.

00:31:06.860 --> 00:31:07.200
Yep.

00:31:07.200 --> 00:31:10.860
Presumably when something's happening over an AJAX request, that thing spins.

00:31:10.860 --> 00:31:12.460
And then when it stops, it goes away.

00:31:12.460 --> 00:31:13.080
Is that what that means?

00:31:13.080 --> 00:31:13.420
Yeah.

00:31:13.420 --> 00:31:20.360
So the class HTMX indicator is a class that's dynamically indicated or excuse me, dynamically

00:31:20.360 --> 00:31:21.880
added to your webpage.

00:31:22.060 --> 00:31:25.840
And it allows you to start with an opacity of zero.

00:31:25.840 --> 00:31:31.780
And then when a class is added to it, it'll transition to an opacity of one.

00:31:32.340 --> 00:31:35.380
And so that's the best pattern that I found for having a request indicator.

00:31:35.380 --> 00:31:41.280
And one of the problems that you run into in all, you know, even normal web requests, browsers

00:31:41.280 --> 00:31:45.780
these days often don't do a very good job of notifying users something's happening, right?

00:31:46.180 --> 00:31:50.100
And so this is particularly a problem when AJAX is in play.

00:31:50.100 --> 00:31:53.440
There's no indicator to say, hey, something's going on.

00:31:53.440 --> 00:31:58.040
And so HTMX provides infrastructure for doing that sort of thing for you.

00:31:58.040 --> 00:31:59.740
And you don't have to do anything, right?

00:31:59.740 --> 00:32:01.280
Just having this thing exist.

00:32:01.280 --> 00:32:05.480
It knows, okay, if I'm doing a request somehow, some way, what's happening?

00:32:05.480 --> 00:32:08.500
You do have to call out the indicator that you want to show.

00:32:08.500 --> 00:32:12.020
Now, one thing I should say with attributes, they're typically inherited.

00:32:12.220 --> 00:32:16.860
So if you had one indicator that you wanted to show for all AJAX requests, for example,

00:32:16.860 --> 00:32:22.200
you could put the AJAX indicator attribute on the body of your web app.

00:32:22.200 --> 00:32:29.680
And then all AJAX requests would then use that because it's as with CSS, attributes are inherited

00:32:29.680 --> 00:32:33.560
and most attributes are inherited in HTMX.

00:32:33.560 --> 00:32:39.680
And so you can hoist attributes up the DOM and have them apply to multiple things.

00:32:39.680 --> 00:32:40.220
Fantastic.

00:32:40.220 --> 00:32:44.360
So you can avoid repeating yourself using that technique.

00:32:44.360 --> 00:32:45.240
Okay, cool.

00:32:45.240 --> 00:32:48.080
So we've got that little indicator there.

00:32:48.080 --> 00:32:52.400
And yeah, like you said, so you've got to indicate which indicator you want to use, but you don't

00:32:52.400 --> 00:32:53.320
have to trigger it.

00:32:53.320 --> 00:32:53.760
Exactly.

00:32:53.760 --> 00:32:57.600
Then you've got an input, like a text input, and it has a placeholder.

00:32:57.600 --> 00:33:00.520
It just says, please begin typing to search.

00:33:00.520 --> 00:33:03.840
It has a HX-post, which is slash search.

00:33:03.840 --> 00:33:07.860
Presumably it's posting the data of it as a form, right?

00:33:08.000 --> 00:33:09.180
Yeah, it's posting it.

00:33:09.180 --> 00:33:09.720
Yeah, exactly.

00:33:09.720 --> 00:33:15.080
It's posting it and including the, by default, if it's on an input, it'll include that input's value.

00:33:15.080 --> 00:33:15.480
Nice.

00:33:15.480 --> 00:33:17.280
And then it has a trigger.

00:33:17.280 --> 00:33:17.740
Yeah.

00:33:17.740 --> 00:33:19.340
So the trigger is key up.

00:33:19.340 --> 00:33:19.560
Yep.

00:33:19.560 --> 00:33:20.120
Changed.

00:33:20.120 --> 00:33:20.460
Yep.

00:33:20.460 --> 00:33:21.460
That's two things, right?

00:33:21.500 --> 00:33:26.680
Like, so if I command V it or like somehow like drag text into it or key up.

00:33:26.680 --> 00:33:28.440
So the either event, is that what that's saying?

00:33:28.440 --> 00:33:30.460
Changed is a little different.

00:33:30.460 --> 00:33:33.060
So key up is the event that we're responding to.

00:33:33.060 --> 00:33:37.840
And then change says only issue requests if the input value has changed.

00:33:37.840 --> 00:33:38.280
Got it.

00:33:38.280 --> 00:33:38.520
Okay.

00:33:38.520 --> 00:33:41.060
So if I somehow hit.

00:33:41.060 --> 00:33:42.960
So if you hit an arrow key, for example.

00:33:42.960 --> 00:33:43.420
Yeah.

00:33:43.420 --> 00:33:44.020
Yeah, exactly.

00:33:44.020 --> 00:33:44.340
Okay.

00:33:44.340 --> 00:33:44.660
Got it.

00:33:44.660 --> 00:33:45.020
Arrow key.

00:33:45.120 --> 00:33:49.040
The value doesn't change and you don't want to issue a request in that case.

00:33:49.040 --> 00:33:49.800
Yeah, that makes sense.

00:33:49.800 --> 00:33:56.200
The other thing you have is delay 500 milliseconds because, you know, it depends on what the event is.

00:33:56.200 --> 00:33:57.180
Like click it.

00:33:57.180 --> 00:34:00.580
It maybe doesn't matter, but like mouse move.

00:34:00.580 --> 00:34:02.680
You're going to get a lot of those events, right?

00:34:02.680 --> 00:34:05.420
You want to just wreck the server uselessly.

00:34:05.420 --> 00:34:08.800
You want to say, okay, like, did it just flash, flash, flash the screen?

00:34:08.800 --> 00:34:11.140
Like just wait till they've slowed down typing.

00:34:11.520 --> 00:34:12.000
Right, exactly.

00:34:12.000 --> 00:34:14.660
So this is called debouncing an input, right?

00:34:14.660 --> 00:34:19.240
You don't want to, on every event, you don't want to issue a request.

00:34:19.240 --> 00:34:21.900
That would be crazy and not a good user experience.

00:34:21.900 --> 00:34:23.560
And certainly it would be very hard on your server.

00:34:23.560 --> 00:34:32.160
And so what you can do is you can add a delay modifier to a trigger and say delay, wait until a key up.

00:34:32.160 --> 00:34:35.420
So if a key up occurs, wait 500 milliseconds.

00:34:35.420 --> 00:34:40.240
And if another key up occurs in that 500 milliseconds, don't issue the original request.

00:34:40.340 --> 00:34:44.340
So you effectively wait for the user to stop typing before you issue a request.

00:34:44.340 --> 00:34:50.940
And there's another option, which is a throttle, which might be more appropriate for mouse movements,

00:34:50.940 --> 00:34:56.740
where you say only issue a request every, you know, one, every second or something, according to mouse moves.

00:34:56.740 --> 00:34:59.680
Depends very much on what you're trying to accomplish with your UX.

00:34:59.680 --> 00:35:01.940
Those are two different techniques for it.

00:35:03.620 --> 00:35:07.060
This portion of Talk Python To Me is brought to you by YourBase.

00:35:07.060 --> 00:35:10.260
I'm excited to welcome YourBase as a new sponsor of Talk Python.

00:35:10.260 --> 00:35:16.540
YourBase has a really cool product that will dramatically improve testing and CI of your Python applications.

00:35:16.540 --> 00:35:22.460
If you could benefit from having pytest run your test 100 times faster or more, you need to check them out.

00:35:22.460 --> 00:35:23.360
Here's how it works.

00:35:23.360 --> 00:35:27.460
YourBase observes what tests interact with which part of your application code.

00:35:27.560 --> 00:35:30.660
And the first time you run it, the speed is roughly the same as normal.

00:35:30.660 --> 00:35:34.020
But the next time you run pytest is where the magic is.

00:35:34.020 --> 00:35:37.940
YourBase knows which parts of your application code has changed.

00:35:38.640 --> 00:35:41.580
If the code under test hasn't changed, why test it again?

00:35:41.580 --> 00:35:46.040
So YourBase only runs the tests that have interacted with the part of the code that has.

00:35:46.040 --> 00:35:53.040
If you change just a couple of functions, you only need to run the few relevant tests and all the others can be safely skipped.

00:35:53.040 --> 00:35:57.980
This means skipping hundreds or even thousands of tests most of the time,

00:35:57.980 --> 00:36:02.300
making your dev test workflow and your CI builds much, much faster.

00:36:02.300 --> 00:36:06.160
All you have to do is install YourBase and run pytest as usual.

00:36:06.160 --> 00:36:07.220
They'll take it from there.

00:36:07.280 --> 00:36:11.420
Get your free trial by visiting talkpython.fm/YourBase.

00:36:11.420 --> 00:36:15.060
YourBase test acceleration works with the tools you're already using.

00:36:15.060 --> 00:36:17.960
So give them a pip install and see the difference right away.

00:36:17.960 --> 00:36:21.300
Get started at talkpython.fm/YourBase.

00:36:21.300 --> 00:36:27.600
The final thing is to set the target, which is a CSS selector.

00:36:27.600 --> 00:36:32.260
So hash search results, which is the ID.

00:36:32.260 --> 00:36:35.100
And you've got a table with the search results and that's it.

00:36:35.100 --> 00:36:43.760
This is the, besides the server side that does the actual search response, this is the entire implementation of your dynamic search page, right?

00:36:43.760 --> 00:36:44.540
Yeah, that's right.

00:36:44.540 --> 00:36:45.520
So what is that?

00:36:45.520 --> 00:36:47.240
It looks like four attributes.

00:36:47.240 --> 00:36:54.480
You have four attributes to implement dynamic search or active search, I think is what Google terms it when you go to Google and start searching.

00:36:54.920 --> 00:36:59.240
And this is a great example of something I think many web apps would benefit from.

00:36:59.560 --> 00:37:10.080
And it can be achieved very quickly with just a small amount of HTMX on the front end and a small refactoring of the code you probably already have on the back end.

00:37:10.220 --> 00:37:10.360
Yeah.

00:37:10.360 --> 00:37:17.700
What I really like about this is if you've already implemented the search page to return a table of results, you've already written all this code.

00:37:17.700 --> 00:37:17.980
Yep.

00:37:17.980 --> 00:37:19.220
Everything is here.

00:37:19.220 --> 00:37:20.720
Like you have a form.

00:37:20.720 --> 00:37:21.640
You've submitted the form.

00:37:21.640 --> 00:37:22.500
You've got a response.

00:37:22.500 --> 00:37:23.440
You've rendered the table.

00:37:23.440 --> 00:37:24.880
You probably show the form again.

00:37:24.880 --> 00:37:25.220
Yeah.

00:37:25.320 --> 00:37:31.760
Although those things are present, you just can turn it to a on key down, key up rather.

00:37:31.760 --> 00:37:32.320
Yeah.

00:37:32.320 --> 00:37:36.240
Basically make it much nicer without almost any effort.

00:37:36.240 --> 00:37:36.920
Yeah, exactly.

00:37:36.920 --> 00:37:43.880
And again, I think this is showing how HTMX is taking HTML as a hypermedia and pushing it forward, right?

00:37:43.880 --> 00:37:47.860
This, you know, I think in an ideal world, this would just be part of HTML.

00:37:48.340 --> 00:37:57.600
It's just taking this hypermedia concept and saying, let's go further with it because HTML is kind of stalled as a hypermedia and they aren't doing much with it.

00:37:57.600 --> 00:38:00.640
So that's very much where HTMX is coming from.

00:38:00.640 --> 00:38:04.280
And that's the philosophical underpinning of the library.

00:38:04.280 --> 00:38:04.760
Yeah.

00:38:04.760 --> 00:38:05.760
Super cool.

00:38:05.760 --> 00:38:06.460
All right.

00:38:06.460 --> 00:38:13.720
So one of the things I love about your examples, one, this whole library has a rich set of examples.

00:38:13.720 --> 00:38:15.020
We'll go through two others.

00:38:15.020 --> 00:38:15.400
Sure.

00:38:15.400 --> 00:38:18.900
And, but one, the examples are there.

00:38:18.900 --> 00:38:19.720
They're clear.

00:38:19.720 --> 00:38:20.800
They're visual.

00:38:20.800 --> 00:38:23.420
And you have a live one right embedded in the page.

00:38:23.420 --> 00:38:28.420
I don't have to pull up like rebel or whatever to like go figure out, well, how's this really going to work?

00:38:28.420 --> 00:38:29.060
I can just go here.

00:38:29.060 --> 00:38:33.020
So if I want to see if there's a username, Michael, I just type, am I?

00:38:33.020 --> 00:38:39.100
No, but there are, there's a username, Molly with M I in the domain.

00:38:39.100 --> 00:38:43.540
And there's Jessamine, M I in her name and so on.

00:38:43.540 --> 00:38:44.100
Right.

00:38:44.100 --> 00:38:45.500
So that's amazing.

00:38:45.500 --> 00:38:45.980
Yeah.

00:38:45.980 --> 00:38:54.680
I've tried to focus on making things as visual as possible because I, you know, what I run into is people don't believe what you can accomplish with this library.

00:38:54.920 --> 00:39:07.020
And so I really wanted to make it jump out and say, hey, you know, yeah, there's stuff you can do in Vue.js that would be tough to do in HTMX or react, you know, react or whatever you're using for your front end.

00:39:07.120 --> 00:39:13.480
But nonetheless, there's a lot of stuff that would benefit a lot of web apps that can be done using this simpler model.

00:39:13.480 --> 00:39:17.520
And if you're able to, you know, the question is, is, is it good enough?

00:39:17.520 --> 00:39:22.940
And I think it is good enough for probably 90, 90, 90 plus percent of the websites that are out there.

00:39:22.940 --> 00:39:29.160
I mean, it certainly would improve, you know, the vast majority of websites that were out there, just a little bit of HTMX.

00:39:29.160 --> 00:39:29.500
Yeah.

00:39:29.500 --> 00:39:32.840
It reminds me of what jQuery did for the web.

00:39:32.840 --> 00:39:42.200
It doesn't remind me of jQuery, but jQuery for, I know probably a lot of people view jQuery negatively as like this sort of spaghetti code type of story these days.

00:39:42.200 --> 00:39:49.280
But when it came out, it was like, oh my gosh, I can sprinkle in a few things and this becomes really amazing.

00:39:49.280 --> 00:39:49.580
Yeah.

00:39:49.580 --> 00:39:49.860
Right.

00:39:49.860 --> 00:39:51.420
I get that feeling as well.

00:39:51.420 --> 00:39:53.280
It's like easy to add to something that exists.

00:39:53.280 --> 00:39:54.320
Yeah, that's right.

00:39:54.320 --> 00:39:58.760
And, you know, this whole thing, we came, I came out of the jQuery world just like you did.

00:39:58.760 --> 00:40:04.540
And so I think you're right that there's, with jQuery, there was always an incrementalist approach.

00:40:04.540 --> 00:40:06.000
You could add things incrementally.

00:40:06.000 --> 00:40:09.060
You didn't have to buy into a huge bit of infrastructure.

00:40:09.060 --> 00:40:10.880
It turned into spaghetti code in the long run.

00:40:11.180 --> 00:40:13.080
I agree with those criticisms of jQuery.

00:40:13.080 --> 00:40:19.640
And so hopefully with HTMX, because of the way it's built, you're not going to run into those same issues.

00:40:19.640 --> 00:40:22.720
I think there's some, conceptually there are reasons why that is.

00:40:22.720 --> 00:40:27.600
So with HTMX, you tend to put the actions on the thing that does the action.

00:40:27.600 --> 00:40:31.460
Whereas in jQuery, you would move things to a separate place.

00:40:31.460 --> 00:40:32.180
It would be over in some job.

00:40:32.180 --> 00:40:34.340
Right, like dollar document ready sort of thing.

00:40:34.340 --> 00:40:36.100
They would be living somewhere else.

00:40:36.100 --> 00:40:41.160
And that was kind of sold under this idea of separation of concerns, which is a design principle.

00:40:41.160 --> 00:40:42.380
for software.

00:40:42.380 --> 00:40:49.320
I've been trying to push this idea of locality of behavior, which is intention with separation of concerns.

00:40:49.320 --> 00:40:55.940
And the idea of locality of behavior is that you want to put the things that a code unit does in the code unit.

00:40:56.180 --> 00:40:58.720
So a button should say what it does.

00:40:58.720 --> 00:41:03.240
It should say, I issue a post to this URL, and then I do this with the response.

00:41:03.240 --> 00:41:05.300
And that's exactly what HTMX does.

00:41:05.300 --> 00:41:15.200
And again, that's in contrast with jQuery, where you would hook up a click handler in some other place, and you would just be staring at this button wondering why it was doing what it was doing.

00:41:15.400 --> 00:41:25.880
And so locality of behavior is what I'm trying to use as a terminology to describe this idea of putting stuff in line in the HTML to explain what this thing does.

00:41:25.880 --> 00:41:29.460
And there are other tools that are doing this as well that are getting popular.

00:41:29.460 --> 00:41:33.740
The two big ones are AlpineJS and Tailwind CSS.

00:41:34.040 --> 00:41:36.660
Both of those, you put your stuff in the HTML.

00:41:36.660 --> 00:41:44.020
And I think those two projects pair very well with HTMX in that you can kind of do everything right there in your HTML.

00:41:44.020 --> 00:41:50.340
It can be a little overwhelming at first if you're not used to that style of programming, but it has a lot of benefits associated with it.

00:41:50.340 --> 00:41:50.620
Yeah.

00:41:50.620 --> 00:41:54.640
I've never, I haven't even heard of AlpineJS, so I'm going to definitely have to check that out.

00:41:54.640 --> 00:41:57.620
But Tailwind I've heard of, and Tailwind's pretty interesting as well.

00:41:57.620 --> 00:42:02.880
It's like sort of a replacement for Bootstrap, but not in the same sort of abstract style.

00:42:02.980 --> 00:42:06.520
It's more like, say, like, you describe it as the way you want it to be.

00:42:06.520 --> 00:42:07.920
Like, I want the font to be medium.

00:42:07.920 --> 00:42:08.420
Yeah.

00:42:08.420 --> 00:42:13.740
Rather than say this is the main text, and the main text is formatted medium-sized, right?

00:42:13.740 --> 00:42:13.860
Yeah.

00:42:13.860 --> 00:42:14.840
Exactly.

00:42:14.840 --> 00:42:16.140
You inline things.

00:42:16.140 --> 00:42:24.120
So when you're looking at a button, you can see why it has rounded curves or why it has the padding that it has and so forth.

00:42:24.120 --> 00:42:29.920
I think people have started to recognize the separation of concerns, while certainly a good thing in some ways,

00:42:30.180 --> 00:42:33.320
and, you know, a valid design principle has some disadvantages.

00:42:33.320 --> 00:42:40.560
And the big one that I see is this sort of spooky action at a distance where someone can change a file somewhere else,

00:42:40.560 --> 00:42:44.140
and suddenly your button doesn't work anymore or whatever.

00:42:44.140 --> 00:42:44.540
Yeah.

00:42:44.540 --> 00:42:44.620
Yeah.

00:42:44.620 --> 00:42:44.980
Yeah.

00:42:44.980 --> 00:42:51.440
I think, well, the separation in this scenario is hx-post is slash search.

00:42:51.440 --> 00:42:59.300
Like, this describes exactly in the web sense of what a URI means to describe this is what I want this to be,

00:42:59.300 --> 00:43:01.300
but it doesn't describe the implementation.

00:43:01.300 --> 00:43:01.780
Right.

00:43:01.780 --> 00:43:02.000
Right.

00:43:02.000 --> 00:43:02.780
That lives in the server.

00:43:02.780 --> 00:43:03.140
Yep.

00:43:03.140 --> 00:43:05.420
And so I think there's an interesting philosophy there as well.

00:43:05.420 --> 00:43:05.760
Yeah.

00:43:05.760 --> 00:43:06.840
Yeah, there is.

00:43:06.840 --> 00:43:13.140
And it's really that restful, uniform interface idea from the early web.

00:43:13.140 --> 00:43:19.300
It's, you know, I keep saying this, but we're trying to take HTML and drive it forward as a hypertext.

00:43:19.300 --> 00:43:22.620
Give you more power as a hypertext developer.

00:43:22.620 --> 00:43:23.060
Yeah.

00:43:23.060 --> 00:43:23.880
Super cool.

00:43:24.300 --> 00:43:26.460
All right, let's take a few things from the live audience.

00:43:26.460 --> 00:43:32.820
So we got Nick says, I love that this supplements server-side frameworks like Django rather than trying to replace parts of them.

00:43:32.820 --> 00:43:33.480
Yeah.

00:43:33.480 --> 00:43:34.360
Yeah, absolutely.

00:43:34.360 --> 00:43:34.860
For sure.

00:43:34.860 --> 00:43:37.500
Alec has an interesting fix for your monitor.

00:43:37.500 --> 00:43:37.920
Okay.

00:43:37.920 --> 00:43:39.280
Tudo app install new monitor.

00:43:39.280 --> 00:43:39.640
Easy.

00:43:39.640 --> 00:43:40.520
Yeah.

00:43:40.520 --> 00:43:41.340
Since you're on Linux, right?

00:43:41.340 --> 00:43:44.760
If I could get a terminal to show, I've got my laptop monitor over here.

00:43:44.760 --> 00:43:47.280
I'm literally staring at a blank, at a black screen.

00:43:47.280 --> 00:43:50.140
It flickers every once in a while, so I get a brief view.

00:43:50.140 --> 00:43:50.800
Catch a quick view.

00:43:50.800 --> 00:43:52.720
I'm not touching anything.

00:43:52.720 --> 00:43:53.600
If it's recording.

00:43:53.600 --> 00:43:54.020
It's all good.

00:43:54.140 --> 00:43:54.880
It's working.

00:43:54.880 --> 00:44:00.920
And then Nick also says, now we need an hx-python tag to run arbitrary Python in the browser.

00:44:00.920 --> 00:44:01.800
Just kidding.

00:44:01.800 --> 00:44:02.220
Don't do that.

00:44:02.220 --> 00:44:08.140
With HTMX, I think that you've removed a lot of the pressure to have Python in the browser with HTMX.

00:44:08.140 --> 00:44:17.860
And so I was optimistic, you know, all jokes aside, I was optimistic when WebAssembly was first proposed that it would break the dominance of JavaScript in the browser.

00:44:18.160 --> 00:44:21.940
But my experience thus far, and I have to admit, I haven't looked at it in a while.

00:44:21.940 --> 00:44:28.880
Is that WebAssembly has been so low-level that it's probably not going to help.

00:44:29.660 --> 00:44:31.440
And maybe I can't tell if that was intentional or not.

00:44:31.440 --> 00:44:32.040
Yeah.

00:44:32.040 --> 00:44:38.980
But in my experience, there wasn't a good interop layer between the DOM and WebAssembly even.

00:44:39.540 --> 00:44:40.500
And so, okay.

00:44:41.320 --> 00:44:44.660
The vast majority of scripting I want to do is DOM related.

00:44:44.660 --> 00:44:45.120
Yeah.

00:44:45.120 --> 00:44:46.160
It's all about the DOM.

00:44:46.160 --> 00:44:49.640
So let me give you my WebAssembly sidebar here.

00:44:49.640 --> 00:44:50.740
And I'd love to hear your thoughts.

00:44:51.200 --> 00:44:53.580
I hear two problems with WebAssembly.

00:44:53.580 --> 00:44:55.760
One is this DOM story, right?

00:44:55.760 --> 00:44:57.340
Like, this could be fixed, right?

00:44:57.340 --> 00:45:01.840
WebAssembly could be evolved to have like a, like, and here's the DOM API.

00:45:01.840 --> 00:45:02.220
Right.

00:45:02.220 --> 00:45:03.620
In a real straightforward way.

00:45:03.620 --> 00:45:08.700
I know there's a lot of separation and whatnot, but I cannot believe that it couldn't be figured out.

00:45:08.700 --> 00:45:08.960
Yeah.

00:45:09.100 --> 00:45:26.360
Two, the problem I hear about this is, well, you can have Python in the browser and things like PyIodide have actually done this to like compile the C into WebAssembly, the CPython runtime and the scientific libraries into a WebAssembly thing.

00:45:26.360 --> 00:45:28.840
And then you can download it and you can do limited stuff.

00:45:28.840 --> 00:45:32.520
It's limited because of the limitations of the DOM, but you can still run Python in your browser.

00:45:32.520 --> 00:45:34.660
It just so happens it's a 10 meg download.

00:45:34.660 --> 00:45:35.240
Yeah.

00:45:35.240 --> 00:45:35.760
Right.

00:45:35.760 --> 00:45:36.920
Here's what I would love to see.

00:45:36.920 --> 00:45:41.620
I would love to see the major language providers, C++, Python, .NET.

00:45:41.620 --> 00:45:51.400
You just go down the list, Java, Rails, provide a WebAssembly thing against some API and every major browser just builds that in.

00:45:51.400 --> 00:45:56.680
So my Firefox comes with Python, Ruby, Java, and .NET.

00:45:56.680 --> 00:45:58.920
These are all like 10 or 20 meg binaries.

00:45:58.920 --> 00:45:59.900
Right.

00:45:59.900 --> 00:46:03.420
The world would be like, then that whole problem of, well, do you download it?

00:46:03.420 --> 00:46:04.240
What if you redownload?

00:46:04.240 --> 00:46:06.160
What if it's out of, like, just they ship JavaScript.

00:46:06.160 --> 00:46:06.660
Yeah.

00:46:06.660 --> 00:46:12.440
If all they had to do is include a host of other features as WebAssembly, like, the problem would be solved.

00:46:12.440 --> 00:46:16.260
But there's just a little too much friction along the way to make that happen, I think.

00:46:16.260 --> 00:46:16.680
Yeah.

00:46:16.680 --> 00:46:24.120
It really, the core problem there, I think, is the core libraries that, you know, that come with all these programming languages.

00:46:24.120 --> 00:46:27.160
It's one reason why Rust actually does pretty well with WebAssembly.

00:46:27.160 --> 00:46:29.000
It just doesn't come with very much.

00:46:29.000 --> 00:46:29.520
Yeah.

00:46:29.520 --> 00:46:31.400
And that's a reasonable solution.

00:46:31.400 --> 00:46:40.780
If I was super passionate about Python, I might look at just writing an interpreted, and it sounds like there might already be an interpreted version of Python in the browser.

00:46:41.300 --> 00:46:52.800
So, HyperScript, which is a scripting language that I'm working on as kind of a passion project that's loosely associated with HTMX, is a scripting language, and it works in the browser, and it's just interpreted.

00:46:52.800 --> 00:46:56.860
And JavaScript is so fast in the browser now that you can actually get away with it.

00:46:57.080 --> 00:47:07.560
So, as long as your Python wasn't, you know, trying to do scientific computing, you're just trying to do basic web scripting, you know, adding classes to DOM elements and so forth.

00:47:07.560 --> 00:47:10.800
You want to do Vue.js stuff like stuff, but you don't want to write.

00:47:10.800 --> 00:47:14.800
You want to create Python classes and then, like, hook Python functions.

00:47:14.800 --> 00:47:15.200
Yeah.

00:47:15.200 --> 00:47:15.460
Right?

00:47:15.460 --> 00:47:15.900
Yeah.

00:47:15.900 --> 00:47:21.360
That actually, you know, in my opinion, if I were going to take a look at that problem, I'd look at doing an interpreted language.

00:47:21.540 --> 00:47:21.740
Yeah.

00:47:21.740 --> 00:47:22.500
Interesting.

00:47:22.500 --> 00:47:27.580
There is Sculpt, which is pretty interesting, and this runs Python in the browser.

00:47:27.580 --> 00:47:31.300
So, like, the example on the homepage is like a little turtle on an HTML canvas.

00:47:31.300 --> 00:47:31.700
Okay.

00:47:31.700 --> 00:47:33.120
And this is all client-side.

00:47:33.120 --> 00:47:36.220
But it's, it's like close.

00:47:36.220 --> 00:47:37.020
It's not the same.

00:47:37.020 --> 00:47:37.560
Right.

00:47:37.560 --> 00:47:40.020
So, I mean, that's the same for all the languages.

00:47:40.020 --> 00:47:40.300
Yeah.

00:47:40.300 --> 00:47:40.600
All right.

00:47:40.600 --> 00:47:45.380
Let's go back to this example here, because I think there's still a lot of really good things we haven't even touched on.

00:47:45.380 --> 00:47:47.600
And we're, I mean, we're only on, what, four tags?

00:47:47.600 --> 00:47:47.980
Yeah.

00:47:47.980 --> 00:47:48.720
I know.

00:47:49.580 --> 00:47:51.640
So, we talked about this little example here.

00:47:51.640 --> 00:47:54.140
And as I'm typing, people can see the little searching.

00:47:54.140 --> 00:47:55.500
They go and type.

00:47:55.500 --> 00:47:58.200
They can see, like, in the H3, they can see the little searching bit.

00:47:58.200 --> 00:47:58.440
Yep.

00:47:58.440 --> 00:48:01.120
But all of these things, I think, are neat.

00:48:01.120 --> 00:48:02.740
But you kind of wonder, well, what's happening?

00:48:02.740 --> 00:48:04.980
Like, what's going on really?

00:48:04.980 --> 00:48:10.400
Like, especially if this is a server-side thing, what's the HTTP traffic with the server?

00:48:10.400 --> 00:48:15.520
And you added this little, like, built-in debuggery toolbar thing.

00:48:15.520 --> 00:48:16.940
It's not a debugger toolbar.

00:48:16.940 --> 00:48:17.920
It's a debugger footer.

00:48:17.920 --> 00:48:18.160
Yeah.

00:48:18.160 --> 00:48:19.440
A debug footer.

00:48:19.440 --> 00:48:19.700
Yeah.

00:48:19.700 --> 00:48:25.180
And as you interact with the examples, on every one of the examples, you can see, well, what is the initial traffic?

00:48:25.180 --> 00:48:27.520
What is sent over?

00:48:27.520 --> 00:48:28.620
And you click on it.

00:48:28.620 --> 00:48:31.240
It has a history of all the requests that they made.

00:48:31.240 --> 00:48:31.500
Yep.

00:48:31.500 --> 00:48:34.960
What was posted over and then what was returned from the server.

00:48:34.960 --> 00:48:35.260
Yep.

00:48:35.260 --> 00:48:37.460
And it's super clear.

00:48:37.460 --> 00:48:38.000
Yeah.

00:48:38.000 --> 00:48:39.540
Like, you can go to the last one.

00:48:39.540 --> 00:48:40.440
You can see exactly.

00:48:40.440 --> 00:48:42.360
This is what's on this, you know, up at the top.

00:48:42.360 --> 00:48:42.580
Yep.

00:48:42.580 --> 00:48:43.240
And you look at the bottom.

00:48:43.240 --> 00:48:45.300
Well, there's the TRTDs that make that happen.

00:48:45.300 --> 00:48:45.660
Yeah.

00:48:45.880 --> 00:48:46.160
Yeah.

00:48:46.160 --> 00:48:46.180
Yeah.

00:48:46.180 --> 00:48:46.480
Yeah.

00:48:46.480 --> 00:48:50.720
I really wanted to focus on the examples to drive home just how easy it was.

00:48:50.720 --> 00:48:53.840
And then also what you could accomplish with the library.

00:48:53.840 --> 00:48:54.260
Yeah.

00:48:54.260 --> 00:48:55.520
Quite cool.

00:48:56.420 --> 00:48:56.700
All right.

00:48:56.700 --> 00:48:58.840
Let's touch on a couple other examples.

00:48:58.840 --> 00:49:00.800
I pulled them up because I wanted to highlight them.

00:49:00.800 --> 00:49:01.440
Click to edit.

00:49:01.440 --> 00:49:01.680
Okay.

00:49:01.680 --> 00:49:02.860
Let's go look at click to edit.

00:49:02.860 --> 00:49:03.820
That's a pretty good one.

00:49:03.820 --> 00:49:04.160
Yep.

00:49:04.160 --> 00:49:06.020
Again, I apologize.

00:49:06.020 --> 00:49:07.000
I'm on my phone.

00:49:07.000 --> 00:49:07.760
Yeah.

00:49:07.760 --> 00:49:08.020
Yeah.

00:49:08.020 --> 00:49:08.220
Yeah.

00:49:08.220 --> 00:49:08.380
Yeah.

00:49:08.380 --> 00:49:08.780
No worries.

00:49:08.780 --> 00:49:14.980
So here what you've got is you've got a form and it's not form-like.

00:49:14.980 --> 00:49:18.060
It's like just static text with divs and spans and whatnot.

00:49:18.060 --> 00:49:23.680
So you've got first name is Joe, last name is Blow, email is such and such.

00:49:23.680 --> 00:49:30.160
And if you hit click to edit, those things all become, well, the values become text inputs.

00:49:30.160 --> 00:49:30.420
Yeah.

00:49:30.420 --> 00:49:35.000
I could make Joey Joe and hit submit and in place, it becomes Joey.

00:49:35.000 --> 00:49:35.540
That's right.

00:49:35.540 --> 00:49:36.080
That effect.

00:49:36.080 --> 00:49:38.120
This is a really cool example, right?

00:49:38.120 --> 00:49:42.840
Like instead of having forms everywhere, you can just have HTML and like a grid.

00:49:42.840 --> 00:49:47.940
And you could say, an example I would imagine maybe is a grid of responses.

00:49:47.940 --> 00:49:50.060
And then you want to edit one of the lines of the grid.

00:49:50.060 --> 00:49:50.340
Yep.

00:49:50.340 --> 00:49:55.800
Like I want to edit this entry and then boom, those all become drop down flex or they become

00:49:55.800 --> 00:49:58.660
date time pickers or whatever the heck you want to make them become.

00:49:58.660 --> 00:50:00.220
And then they go back, right?

00:50:00.220 --> 00:50:00.500
Yeah.

00:50:00.500 --> 00:50:02.860
Like an editable row concept.

00:50:02.860 --> 00:50:03.520
Yes, exactly.

00:50:03.520 --> 00:50:03.900
Yep.

00:50:03.900 --> 00:50:04.620
Yeah.

00:50:04.620 --> 00:50:04.940
Yeah.

00:50:04.940 --> 00:50:06.660
Super easy example of what's happening.

00:50:06.660 --> 00:50:09.260
If you click edit, it returns the form HTML text.

00:50:09.440 --> 00:50:12.920
When you submit it, it returns the div span version of it.

00:50:12.920 --> 00:50:13.300
Beautiful.

00:50:13.300 --> 00:50:14.120
Yeah, exactly.

00:50:14.120 --> 00:50:19.580
So, you know, probably not going to the details of all the attributes that make this happen,

00:50:19.580 --> 00:50:22.400
but there's an HX get to get the form.

00:50:22.400 --> 00:50:25.420
That form gets swapped in to that little element.

00:50:25.420 --> 00:50:27.020
You don't have a big page refresh.

00:50:27.020 --> 00:50:31.360
You don't go to some other URL and then you can click save and it just does a put.

00:50:31.360 --> 00:50:35.100
Put being the traditional way to update something or the standard way.

00:50:35.100 --> 00:50:39.060
Know the URL and you want to make a change to it instead of a post you do a put because

00:50:39.060 --> 00:50:39.860
that's restful.

00:50:39.860 --> 00:50:40.000
Yeah.

00:50:40.000 --> 00:50:40.580
Yeah, exactly.

00:50:40.580 --> 00:50:46.600
And so you use an HX put and then when that put succeeds, you would render just the row again.

00:50:46.600 --> 00:50:51.580
And if that put failed for validation reasons, for example, you would just render the form

00:50:51.580 --> 00:50:52.880
with the error messages in it.

00:50:52.880 --> 00:50:59.120
And this is very similar to the way you do standard, you know, web app development in the web 1.0

00:50:59.120 --> 00:51:03.440
model, but you've managed to bring down your target to just this little form.

00:51:03.440 --> 00:51:07.420
And so you don't have to do redirects and stuff like this anymore.

00:51:07.420 --> 00:51:07.980
Interesting.

00:51:07.980 --> 00:51:09.460
I hadn't really thought about the errors.

00:51:09.460 --> 00:51:12.040
Yeah, I hadn't thought about the error response.

00:51:12.040 --> 00:51:18.440
But for example, you could say return the form, but in your server side template, you could say,

00:51:18.440 --> 00:51:19.420
well, this one has an error.

00:51:19.420 --> 00:51:23.120
So what we're going to do is put an error message at the top and we're going to put an

00:51:23.120 --> 00:51:27.960
error has error attribute onto the form element, which will make it glow red or something

00:51:27.960 --> 00:51:28.360
like that.

00:51:28.360 --> 00:51:28.860
Exactly.

00:51:28.860 --> 00:51:34.420
And if you wanted, so one common thing to do is to, you have your error messages elsewhere,

00:51:34.420 --> 00:51:35.100
right?

00:51:35.100 --> 00:51:36.360
They're not down in that element.

00:51:36.360 --> 00:51:41.000
I like inline error messages myself, but a lot of people like to show errors at the top.

00:51:41.000 --> 00:51:44.620
And so HTML, HTMX, excuse me, has tools to do that.

00:51:44.620 --> 00:51:47.140
You can use what's called an out of band response.

00:51:47.140 --> 00:51:53.400
So you can have a content that is streamed down that specifies this is out of band content and

00:51:53.400 --> 00:51:55.180
it needs to go somewhere else in the DOM.

00:51:55.180 --> 00:51:56.700
Typically it uses an ID.

00:51:56.800 --> 00:52:01.000
And so you could use that to put an error message, you know, up on the header if you

00:52:01.000 --> 00:52:01.900
wanted to do that.

00:52:01.900 --> 00:52:02.340
Yeah.

00:52:02.340 --> 00:52:06.180
Another common way to do this one that I like, if you're going to have something like that

00:52:06.180 --> 00:52:09.780
is to have some sort of growl library where it kind of.

00:52:09.780 --> 00:52:12.960
Like a toast notification pop-up type of thing.

00:52:12.960 --> 00:52:13.420
Exactly.

00:52:13.420 --> 00:52:14.300
Something like that.

00:52:14.380 --> 00:52:19.680
And so for that, what you might use is the HTMX has some fairly well-developed response

00:52:19.680 --> 00:52:21.660
headers and one of them is HX trigger.

00:52:21.660 --> 00:52:24.860
And you can use that to trigger an event with an argument.

00:52:24.860 --> 00:52:28.200
The argument in this case would be the error message to show.

00:52:28.200 --> 00:52:33.380
And then you can write a little bit of code on the front end to listen for that custom event

00:52:33.380 --> 00:52:38.040
that you're triggering and then show toast message saying, hey, it's saved.

00:52:38.040 --> 00:52:38.560
Oh, that's cool.

00:52:38.760 --> 00:52:42.660
So there's a bunch of different tools in there depending on what you're trying to accomplish.

00:52:42.660 --> 00:52:43.200
Yeah.

00:52:43.200 --> 00:52:44.140
All right.

00:52:44.140 --> 00:52:47.280
Out in the live stream, Apar says, hey from San Francisco.

00:52:47.280 --> 00:52:49.180
Hey, welcome to the live stream.

00:52:49.180 --> 00:52:50.480
Nick comment.

00:52:50.680 --> 00:52:54.440
I'm curious how this compares to two-way binding with something like Vue.

00:52:54.440 --> 00:52:58.640
Is the DOM reactive with an underlying data model so that they stay in sync?

00:52:58.640 --> 00:52:59.640
The answer is no.

00:52:59.640 --> 00:53:07.560
So HTMX adopts the original model of the web, this RESTful model where hyper, you may have

00:53:07.560 --> 00:53:11.240
heard at some point in your programming career, the acronym HADEOUS.

00:53:11.240 --> 00:53:13.580
It's a bad acronym, particularly these days.

00:53:13.580 --> 00:53:19.360
But the acronym stands for hypermedia or hypertext as the engine of application state.

00:53:19.840 --> 00:53:22.380
And so there is no backing model on the client side.

00:53:22.380 --> 00:53:28.780
Rather, the model, the source of truth is the back end and the front end just sits there

00:53:28.780 --> 00:53:31.680
and reacts to user inputs.

00:53:31.680 --> 00:53:36.860
And whenever a user input occurs that needs to trigger a state change, a request is issued

00:53:36.860 --> 00:53:41.680
to the server and then the updated state of that resource is returned via HTML.

00:53:41.680 --> 00:53:42.240
Yeah.

00:53:42.240 --> 00:53:44.760
And it kind of flows through this interaction.

00:53:44.760 --> 00:53:45.320
That's right.

00:53:45.320 --> 00:53:45.580
Right.

00:53:45.580 --> 00:53:46.740
So let me give you an example.

00:53:46.740 --> 00:53:51.500
So in this click to edit thing, when I click edit on the button, it knows it's on slash

00:53:51.500 --> 00:53:53.800
context, contact slash one.

00:53:53.800 --> 00:53:54.760
And I click the edit.

00:53:54.760 --> 00:54:01.980
What comes back is a form and has HX dash put with slash contact slash one as the action.

00:54:01.980 --> 00:54:02.360
Right.

00:54:02.480 --> 00:54:07.960
So then when I submit it, it flows that it was row one or item one I was editing on over.

00:54:07.960 --> 00:54:14.480
And then when it comes back, the response is, well, now it has the contact slash one slash

00:54:14.480 --> 00:54:15.460
edit in that URL.

00:54:15.460 --> 00:54:16.340
So it kind of flows.

00:54:16.340 --> 00:54:16.820
Yeah.

00:54:17.000 --> 00:54:18.840
This is actually super hideous.

00:54:18.840 --> 00:54:23.260
There's many things that you find in these APIs and people adopting REST.

00:54:23.260 --> 00:54:26.320
They're like, oh, we're going to take all the REST principles except for this hypermedia

00:54:26.320 --> 00:54:27.200
as application state.

00:54:27.200 --> 00:54:28.440
That we don't really care about.

00:54:28.440 --> 00:54:31.080
But this, the more you talk about it, it really is.

00:54:31.080 --> 00:54:31.420
Yeah.

00:54:31.420 --> 00:54:32.020
Well, it is.

00:54:32.020 --> 00:54:36.760
It's because people, this is a long conversation, but holy smokes, I've been arguing with people

00:54:36.760 --> 00:54:38.200
on the internet about this for a while.

00:54:38.540 --> 00:54:44.000
I don't think REST makes any sense when you talk about JSON because it does to some extent.

00:54:44.000 --> 00:54:45.800
The HTTP verbs make sense.

00:54:45.800 --> 00:54:46.580
Yeah, they do.

00:54:46.580 --> 00:54:47.480
That's about it.

00:54:47.480 --> 00:54:48.860
Other than that, right?

00:54:48.860 --> 00:54:50.360
There's a lot more to this whole REST.

00:54:50.360 --> 00:54:54.260
Maybe the representation, maybe the URL layout in some cases makes sense.

00:54:54.260 --> 00:54:54.380
Yeah.

00:54:54.380 --> 00:55:00.260
But when Fielding wrote his, Roy Fielding is where the term, his dissertation at University

00:55:00.260 --> 00:55:04.100
of California, Irvine is where all this terminology comes out of.

00:55:04.100 --> 00:55:07.540
And what he wrote, he was describing the web.

00:55:07.640 --> 00:55:08.660
He was describing HTML.

00:55:08.660 --> 00:55:13.060
He was describing the way Web 1.0 worked with that.

00:55:13.060 --> 00:55:19.880
And a big focus on that was this idea of stateless HTML and hypertext as the engine of application

00:55:19.880 --> 00:55:20.320
state.

00:55:20.320 --> 00:55:26.140
That being one of the crux issues within the section that's about what's called the uniform

00:55:26.140 --> 00:55:26.860
interface.

00:55:26.860 --> 00:55:29.960
We don't want you to get too much into the details of that right now.

00:55:29.960 --> 00:55:35.080
I'd be happy to talk about that maybe offline later, maybe in a different context.

00:55:35.260 --> 00:55:40.420
But when you're in JSON, hypertext isn't the engine of application state.

00:55:40.420 --> 00:55:43.740
There's a client-side model that is your application state.

00:55:43.740 --> 00:55:45.400
And now you're in a stateful world.

00:55:45.820 --> 00:55:50.580
And you're in some ways much closer to what thick apps used to look like back in the 90s

00:55:50.580 --> 00:55:52.920
than you are to the original web model.

00:55:52.920 --> 00:55:56.020
It's a different model and there are advantages and disadvantages to it.

00:55:56.020 --> 00:55:57.420
I like it a lot.

00:55:57.420 --> 00:55:58.840
I think there's a lot of power to it.

00:55:58.840 --> 00:56:04.140
And so, you know, to make a long story short, no, there's no reactive aspect here.

00:56:04.140 --> 00:56:06.980
The DOM is the source of truth.

00:56:06.980 --> 00:56:08.580
The server is really the source of truth.

00:56:08.760 --> 00:56:11.740
But the DOM, as far as the user is aware, is the source of truth.

00:56:11.740 --> 00:56:14.160
And it's stateless, just like the original web model.

00:56:14.160 --> 00:56:14.580
Right.

00:56:14.580 --> 00:56:16.100
The view model is super nice.

00:56:16.100 --> 00:56:19.760
I mean, you create these little JavaScript classes and they just kind of build up their

00:56:19.760 --> 00:56:20.020
data.

00:56:20.020 --> 00:56:21.060
And it's really cool.

00:56:21.060 --> 00:56:22.500
And it binds with the DOM.

00:56:22.500 --> 00:56:24.680
But like, what if someone refreshes the page?

00:56:24.680 --> 00:56:25.340
Right.

00:56:25.340 --> 00:56:26.720
Or something like that, right?

00:56:26.720 --> 00:56:26.980
Yeah.

00:56:26.980 --> 00:56:27.680
Oh my gosh.

00:56:27.680 --> 00:56:28.660
It's a God.

00:56:28.660 --> 00:56:29.060
Oh no.

00:56:29.060 --> 00:56:29.480
Right.

00:56:29.680 --> 00:56:31.680
So yeah, there could be drawbacks as well.

00:56:31.680 --> 00:56:37.660
Reactivity is, you know, sometimes I can be a little too hard, I think, on just the nature

00:56:37.660 --> 00:56:38.140
of the internet.

00:56:38.140 --> 00:56:43.920
But, you know, reactivity, this notion of a reactive two-way binding, that's new.

00:56:43.920 --> 00:56:45.200
It's relatively new.

00:56:45.200 --> 00:56:50.500
There were UI toolkits that did something, did similar stuff, but not as deeply as the current

00:56:50.500 --> 00:56:51.380
set do.

00:56:51.380 --> 00:56:55.020
And so there's something new there and it is useful in a lot of ways.

00:56:55.020 --> 00:57:00.040
But for a lot of apps, it's overkill and there are disadvantages that are associated

00:57:00.040 --> 00:57:00.440
with it.

00:57:00.440 --> 00:57:02.940
Sinking the two models is difficult.

00:57:02.940 --> 00:57:08.060
And if you let your DOM be the source of truth, the server be the source of truth and your

00:57:08.060 --> 00:57:12.920
DOM be a stateless representation of it, then there's a huge number of advantages that come

00:57:12.920 --> 00:57:13.580
along with that.

00:57:13.580 --> 00:57:14.640
Yeah, that's for sure.

00:57:14.640 --> 00:57:19.120
Like if you have the same page open on multiple tabs, for example, like the database is still

00:57:19.120 --> 00:57:19.880
in sync on the server.

00:57:19.880 --> 00:57:20.180
Yeah.

00:57:20.180 --> 00:57:20.480
All right.

00:57:20.480 --> 00:57:21.560
Let's look at one more example.

00:57:21.560 --> 00:57:21.820
Sure.

00:57:21.820 --> 00:57:23.560
And we'll do a little bit of wrap up.

00:57:24.240 --> 00:57:27.780
I'm a little hesitant to show this to people because I kind of hate this, but it's also

00:57:27.780 --> 00:57:30.620
a very neat infinite scroll.

00:57:30.620 --> 00:57:33.820
Infinite scroll can also be implemented as click to load.

00:57:33.820 --> 00:57:39.540
So I too am ambivalent towards this pattern, but it's so common.

00:57:39.540 --> 00:57:44.260
What I don't like about it is it's super hard to share it with somebody.

00:57:44.260 --> 00:57:46.840
They say, okay, go to this part of the search result.

00:57:46.840 --> 00:57:48.660
Like, well, where is it?

00:57:48.660 --> 00:57:49.580
Like, well, keep scrolling down.

00:57:49.580 --> 00:57:51.880
No, like hold down the page.

00:57:51.880 --> 00:57:52.360
You know what I mean?

00:57:52.360 --> 00:57:54.500
It's just like hard to share or to get back to you.

00:57:54.500 --> 00:57:55.580
Anyway, it's a lot.

00:57:55.580 --> 00:57:56.060
I don't know.

00:57:56.060 --> 00:57:57.760
But infinite scroll is neat.

00:57:57.760 --> 00:58:04.540
And so here you've got a table row that says hx-get slash context slash page equals to

00:58:04.540 --> 00:58:07.200
our question mark page equals to is a query string.

00:58:07.200 --> 00:58:09.440
And then hx trigger is revealed.

00:58:09.440 --> 00:58:13.840
This is like as you scroll down, when it becomes revealed within the DOM, run this.

00:58:14.080 --> 00:58:16.720
And then swap after end.

00:58:16.720 --> 00:58:17.000
Yeah.

00:58:17.000 --> 00:58:17.840
I guess.

00:58:17.840 --> 00:58:18.680
What's that mean?

00:58:18.680 --> 00:58:19.200
After end.

00:58:19.200 --> 00:58:25.060
So what that means is so you would put this code on the last row, the last result of your

00:58:25.060 --> 00:58:26.340
page of results.

00:58:26.340 --> 00:58:31.400
And so what that's going to do is it's going to issue a request to the server.

00:58:31.500 --> 00:58:36.600
And then when it gets that content back, it's going to append it after the end of this element,

00:58:36.600 --> 00:58:38.540
the element that this is on this table row.

00:58:38.540 --> 00:58:44.020
And so that new content, which is presumably going to be a new series of rows, is going to

00:58:44.020 --> 00:58:47.180
get appended after the last row.

00:58:47.180 --> 00:58:49.920
And so that's how you get that next set of rows.

00:58:50.040 --> 00:58:55.320
And then on the last row of that, there would be, again, this when I'm revealed.

00:58:55.320 --> 00:58:58.260
The response will come back with an hx-get on it, right?

00:58:58.260 --> 00:58:58.640
Yeah.

00:58:58.640 --> 00:59:03.360
So it'll come back with the hx on it, and it'll just keep going down the line until finally you

00:59:03.360 --> 00:59:04.920
get to a point where you don't have any more.

00:59:04.920 --> 00:59:09.380
And so you don't bother encoding one of these revealed triggers.

00:59:09.380 --> 00:59:11.560
And that would just be the end of it.

00:59:11.560 --> 00:59:12.900
So I agree with you.

00:59:12.900 --> 00:59:16.320
As you are, I am ambivalent towards this.

00:59:16.320 --> 00:59:19.880
I tend to prefer paging for exactly the reasons you talk about.

00:59:19.880 --> 00:59:23.740
And I should note that there is an attribute called hxpush.

00:59:23.740 --> 00:59:25.120
Is it hx?

00:59:25.120 --> 00:59:33.000
hxpush URL, excuse me, that will push the URL of the request up into the browser's history,

00:59:33.000 --> 00:59:34.640
like into the URL.

00:59:34.640 --> 00:59:35.060
Okay.

00:59:35.060 --> 00:59:37.200
And add it to the history.

00:59:37.200 --> 00:59:39.640
So you can use the back button and all that.

00:59:39.640 --> 00:59:42.560
And it does all that kind of automagically for you.

00:59:42.560 --> 00:59:43.860
Does it allow deep linking?

00:59:43.860 --> 00:59:45.120
Yeah, yeah.

00:59:45.120 --> 00:59:49.840
Now, that being said, if that URL, you know, someone can copy and paste into a new

00:59:49.840 --> 00:59:50.700
tab, for example.

00:59:50.700 --> 00:59:58.060
And so you have to handle both the HTMX request to that URL, as well as the normal non-HTMX

00:59:58.060 --> 00:59:59.040
request to that URL.

00:59:59.040 --> 01:00:00.320
And those might be very different.

01:00:00.320 --> 01:00:00.660
Yeah.

01:00:00.660 --> 01:00:06.080
But if you did that, then it would support potentially deep linking into this sort of experience.

01:00:06.080 --> 01:00:06.540
Exactly.

01:00:06.540 --> 01:00:09.800
And so, and then I just finished that thought.

01:00:09.800 --> 01:00:15.200
There's a header that comes in when it's an HTMX request, hx requests true.

01:00:15.200 --> 01:00:20.180
And so you can check that header and say, okay, this wasn't an HTMX request.

01:00:20.180 --> 01:00:23.340
So I need to render the entire surrounding for this thing.

01:00:23.340 --> 01:00:25.260
Or, oh, it was an HTMX request.

01:00:25.260 --> 01:00:27.100
So I just need to render this partial.

01:00:27.100 --> 01:00:32.180
And that's a very common pattern to have a little if statement on a URL that needs to service both

01:00:32.180 --> 01:00:33.760
of these to check the header value.

01:00:33.760 --> 01:00:34.480
Oh, that's pretty cool.

01:00:34.480 --> 01:00:34.800
Yeah.

01:00:34.800 --> 01:00:35.260
Nice.

01:00:35.420 --> 01:00:35.580
Okay.

01:00:35.580 --> 01:00:37.280
So let's see.

01:00:37.280 --> 01:00:38.140
Let me, I'm going to do it.

01:00:38.140 --> 01:00:39.060
I'm going to scroll here.

01:00:39.060 --> 01:00:39.360
Yeah.

01:00:39.360 --> 01:00:39.820
Here we go.

01:00:39.820 --> 01:00:40.640
There you go.

01:00:40.640 --> 01:00:42.460
See the indicator and down comes some more.

01:00:42.460 --> 01:00:42.780
Yeah.

01:00:42.780 --> 01:00:43.400
Oh, fantastic.

01:00:43.400 --> 01:00:43.960
Yeah.

01:00:43.960 --> 01:00:44.260
Yeah.

01:00:44.260 --> 01:00:44.880
There we go.

01:00:44.880 --> 01:00:47.820
And you can obviously, you know, pull up the little debug butter.

01:00:47.820 --> 01:00:48.200
Yeah.

01:00:48.200 --> 01:00:51.020
And see those behaviors here, which is great.

01:00:51.020 --> 01:00:51.260
Yeah.

01:00:51.260 --> 01:00:52.780
And again, the backend agnostic.

01:00:52.780 --> 01:00:55.460
So just, this could just be normal Python on the backend.

01:00:55.460 --> 01:00:56.220
Nothing fancy.

01:00:56.220 --> 01:00:56.640
Yeah.

01:00:56.640 --> 01:00:58.240
Django, Flask, or Rails.

01:00:58.240 --> 01:00:58.800
Take your pick.

01:00:58.800 --> 01:00:59.100
Yep.

01:00:59.100 --> 01:01:00.060
Whatever you like.

01:01:00.060 --> 01:01:05.380
I mean, it could, I've been bagging on Node because I'm not a huge fan of it as a platform that I want

01:01:05.380 --> 01:01:07.180
to work on, but it could also be Node, right?

01:01:07.180 --> 01:01:07.400
Sure.

01:01:07.400 --> 01:01:09.060
Like if people are out there doing that, it could be.

01:01:09.060 --> 01:01:09.240
Yeah.

01:01:09.240 --> 01:01:11.600
Hypertext on whatever you'd like.

01:01:11.600 --> 01:01:12.680
Howl.

01:01:12.680 --> 01:01:13.620
Howl.

01:01:13.620 --> 01:01:14.100
Yeah.

01:01:14.100 --> 01:01:14.920
All right.

01:01:14.920 --> 01:01:17.600
So let me wrap this up with a little bit of concreteness here.

01:01:17.600 --> 01:01:17.860
Sure.

01:01:17.860 --> 01:01:23.240
So tell us really quickly about, there was Intercooler and now it's HTMX.

01:01:23.240 --> 01:01:23.980
Just real quickly.

01:01:23.980 --> 01:01:25.880
What is the story with this transition?

01:01:25.880 --> 01:01:26.400
Yeah.

01:01:26.400 --> 01:01:29.340
So I created Intercooler, which is the predecessor to HTMX.

01:01:29.340 --> 01:01:31.720
HTMX is basically Intercooler 2.0.

01:01:31.720 --> 01:01:35.140
And then I created Intercooler back in 2013, I believe.

01:01:35.780 --> 01:01:38.520
And it was, again, I came out of the jQuery world.

01:01:38.520 --> 01:01:41.840
And so it started off basically as a jQuery plugin.

01:01:41.840 --> 01:01:45.380
And it grew to the point that I felt like, okay, I'm going to create a separate library

01:01:45.380 --> 01:01:46.060
for this.

01:01:46.060 --> 01:01:51.560
And last year when COVID hit, it had always had in the back of my mind that I didn't like

01:01:51.560 --> 01:01:53.840
the jQuery dependency in Intercooler.

01:01:53.940 --> 01:01:57.280
And so I just, you know, everyone was kind of at home.

01:01:57.280 --> 01:02:05.600
And in order to avoid losing my mind, I said, well, I wonder if I could pull the jQuery

01:02:05.600 --> 01:02:07.500
dependency out Intercooler.

01:02:07.900 --> 01:02:10.380
And it turned out JavaScript's come a long way.

01:02:10.380 --> 01:02:12.660
And I was able to do it pretty quickly.

01:02:12.660 --> 01:02:17.440
And so as I was doing that, one other thing that I thought about, I really, you know, I

01:02:17.440 --> 01:02:19.260
learned a lot as I built Intercooler.js.

01:02:19.820 --> 01:02:23.800
And I developed a much firmer sort of theoretical basis for it.

01:02:23.800 --> 01:02:26.420
It's like, okay, we're really, we're trying to drive HTML forward.

01:02:26.420 --> 01:02:32.900
And one thing that had always annoyed me about Intercooler.js was that it was compared with,

01:02:32.900 --> 01:02:36.020
you know, Angular was the big one when it was first out.

01:02:36.160 --> 01:02:39.440
And then eventually React and then, and Vue.js.

01:02:39.440 --> 01:02:41.740
And because it had that JS in the name.

01:02:41.740 --> 01:02:46.200
And so there was, people would treat it as a JavaScript library rather than thinking of

01:02:46.200 --> 01:02:49.020
it in these more hypertext oriented terms.

01:02:49.020 --> 01:02:54.460
And I was astounded to find out that HTMX org was available in 2020.

01:02:54.460 --> 01:02:56.280
And, but it was.

01:02:56.280 --> 01:02:58.640
And so I grabbed it and I was like, this is a great name.

01:02:58.640 --> 01:03:02.960
I originally called it something else, but came to my senses and said, you know, HTMX really

01:03:02.960 --> 01:03:03.920
captures this.

01:03:03.920 --> 01:03:05.360
We're trying to extend HTML.

01:03:05.960 --> 01:03:06.680
So HTMX.

01:03:06.680 --> 01:03:07.200
It's short.

01:03:07.200 --> 01:03:10.560
It's available as a domain name and it captures what you're after.

01:03:10.560 --> 01:03:11.060
Yeah.

01:03:11.060 --> 01:03:11.660
Yeah.

01:03:11.660 --> 01:03:13.080
So it worked out very well.

01:03:13.080 --> 01:03:14.580
So I'm very happy with it.

01:03:14.580 --> 01:03:18.740
Let me round out our conversation with a concrete example here for this.

01:03:18.740 --> 01:03:21.260
So people might wonder like, where is this being used out in the world?

01:03:21.260 --> 01:03:21.500
Right.

01:03:21.500 --> 01:03:26.520
And I'm obviously, I think it makes a ton of sense, especially in these little like backend

01:03:26.520 --> 01:03:30.600
internal corporate apps that don't get a ton of love, but could really benefit from this.

01:03:30.600 --> 01:03:35.040
But there's also some popular ones like realpython.com out there is one of the most

01:03:35.040 --> 01:03:40.080
popular ones, Python websites out there run by my good friend, Dan Bader.

01:03:40.080 --> 01:03:40.500
Cool.

01:03:40.500 --> 01:03:43.240
And I was just talking to Dan saying, I'm going to talk to you, Carson.

01:03:43.240 --> 01:03:44.400
He's like, oh, I love this.

01:03:44.400 --> 01:03:46.240
I actually use intercooler on the site.

01:03:46.240 --> 01:03:46.880
Okay, cool.

01:03:46.880 --> 01:03:51.280
So if you go over to the quizzes section, you can pull up one of these quizzes and you

01:03:51.280 --> 01:03:51.840
hit start.

01:03:52.000 --> 01:03:53.700
These sort of like test your knowledge things.

01:03:53.700 --> 01:03:57.280
So here it says like, for example, in Python three, the maximum value for an integer is

01:03:57.280 --> 01:03:58.800
two to the 63rd minus one.

01:03:58.800 --> 01:03:59.800
Oh, that's so false.

01:03:59.800 --> 01:04:04.840
And you click on it, it like reveals the check answer of the thing.

01:04:04.840 --> 01:04:07.900
And then you go to the next question or you can expand the explanation.

01:04:08.460 --> 01:04:12.340
How would you express a five, the base 16 integer?

01:04:12.340 --> 01:04:12.840
I have no idea.

01:04:12.840 --> 01:04:13.360
All right.

01:04:13.360 --> 01:04:14.580
Not the point.

01:04:14.580 --> 01:04:15.460
Not the point.

01:04:15.460 --> 01:04:20.900
But this thing, this experience of going through these, these steps with the progress bar, because

01:04:20.900 --> 01:04:23.980
there's a cool progress bar in HTMX and all that stuff.

01:04:23.980 --> 01:04:24.260
Yeah.

01:04:24.260 --> 01:04:27.600
Like this is a cool use case of that type of situation.

01:04:27.600 --> 01:04:29.220
That's really nice and easy to do.

01:04:29.220 --> 01:04:29.420
Yeah.

01:04:29.420 --> 01:04:33.820
And there's a huge amount of code that's written out there, even in apps that are more dramatic

01:04:33.820 --> 01:04:39.160
and need, need this reactive infrastructure in places, there are probably places within the

01:04:39.160 --> 01:04:40.380
app where that's not necessary.

01:04:40.380 --> 01:04:45.580
So, you know, one common thing I'll say is, okay, maybe HTMX doesn't apply to your entire

01:04:45.580 --> 01:04:45.900
app.

01:04:45.900 --> 01:04:51.320
Maybe you're doing concurrent editing of rich, you know, using canvas or something crazy like

01:04:51.320 --> 01:04:51.620
that.

01:04:51.620 --> 01:04:52.540
All right, fine.

01:04:52.540 --> 01:04:55.360
But you probably have a settings page for that app.

01:04:55.360 --> 01:04:58.600
And that settings page is going to be fairly standard forms.

01:04:59.100 --> 01:05:04.800
And that's something where maybe rather than using whatever reactive component you're using

01:05:04.800 --> 01:05:09.500
to manage the really complicated state, you could tear all that out, save that complexity

01:05:09.500 --> 01:05:14.180
budget and just use HTMX just to sync with the server for your, for your settings page,

01:05:14.180 --> 01:05:18.820
you know, but that even, you know, how many react, how many crazy apps do we use day to day?

01:05:18.820 --> 01:05:24.060
For the most part I use, you know, I go and I read blog posts, maybe I check my email

01:05:24.060 --> 01:05:24.600
and so forth.

01:05:24.600 --> 01:05:29.440
And a lot of those apps could be improved pretty dramatically by just using some basic

01:05:29.440 --> 01:05:32.260
HTMX patterns without adding a huge amount of complexity.

01:05:32.260 --> 01:05:33.440
Yeah, I totally agree.

01:05:33.440 --> 01:05:34.440
Totally agree.

01:05:34.440 --> 01:05:37.040
All right, Carson, I think we're pretty much out of time.

01:05:37.040 --> 01:05:37.280
Okay.

01:05:37.280 --> 01:05:42.060
But let me always ask two questions at the end of the show.

01:05:42.060 --> 01:05:42.280
Sure.

01:05:42.280 --> 01:05:42.780
Two questions.

01:05:42.780 --> 01:05:45.100
So I'll hit with them before we close it out.

01:05:45.100 --> 01:05:49.920
If you're going to work on HTMX or do some other programming, what editor do you use these

01:05:49.920 --> 01:05:50.120
days?

01:05:50.120 --> 01:05:51.720
I use WebStorm.

01:05:51.720 --> 01:05:53.820
WebStorm, right on.

01:05:53.820 --> 01:05:55.000
Yeah, I'm JetBrains.

01:05:55.000 --> 01:05:55.420
Yeah, go ahead.

01:05:55.420 --> 01:05:56.340
I'm a JetBrains guy.

01:05:56.340 --> 01:05:57.340
Yeah, same here.

01:05:57.340 --> 01:06:01.580
I'm a big fan of PyCharm and basically the web side of its functionality is just WebStorm

01:06:01.580 --> 01:06:03.100
as well, which is very cool.

01:06:03.100 --> 01:06:03.920
It's super nice.

01:06:03.920 --> 01:06:06.100
I encourage people to pay for their tools.

01:06:06.100 --> 01:06:09.200
If you're a programmer, spend some money.

01:06:09.200 --> 01:06:12.580
I mean, they have stuff for free, but they, they do tremendous work.

01:06:12.580 --> 01:06:16.300
I know that what's the Microsoft editor has become very popular.

01:06:16.300 --> 01:06:16.860
VS Code.

01:06:17.020 --> 01:06:17.260
Yeah.

01:06:17.260 --> 01:06:17.300
Yeah.

01:06:17.300 --> 01:06:18.760
But I don't know.

01:06:18.760 --> 01:06:20.100
It is what it is.

01:06:20.100 --> 01:06:21.840
You know, it's a holy war situation.

01:06:21.840 --> 01:06:24.080
So don't take me too seriously on this.

01:06:24.080 --> 01:06:28.860
But if you're willing to listen to me, if you're willing to listen to a random guy on

01:06:28.860 --> 01:06:32.180
the internet to at least take a look at the JetBrains stuff.

01:06:32.580 --> 01:06:36.980
I like your idea of, you know, support and encourage the things that you want to see

01:06:36.980 --> 01:06:37.340
more of.

01:06:37.340 --> 01:06:37.540
Right.

01:06:37.540 --> 01:06:38.120
For sure.

01:06:38.120 --> 01:06:42.900
And then normally I ask for like a Python library that people are really interested in.

01:06:42.900 --> 01:06:46.980
But in this, this case, let's, how about a JavaScript library or CSS library or something

01:06:46.980 --> 01:06:51.980
like that, that you think people should really check out like something on NPM or tailwind

01:06:51.980 --> 01:06:52.440
or whatever.

01:06:52.440 --> 01:06:52.640
Yeah.

01:06:52.640 --> 01:06:57.900
I like, I think looking at tailwinds and looking at Alpine JS, if I may, we didn't really get

01:06:57.900 --> 01:07:00.900
a chance to talk about it, but Hyperscript is a scripting language.

01:07:01.040 --> 01:07:05.220
It's kind of a natural language, scripting language for the front end, very front end

01:07:05.220 --> 01:07:05.680
focused.

01:07:05.680 --> 01:07:08.840
That's kind of got some interesting aspects to it.

01:07:08.840 --> 01:07:14.020
But I think, you know, rather than recommending one particular library, I'd say just that this

01:07:14.020 --> 01:07:20.040
idea of locality of behavior, looking for libraries where you're putting the code in the code unit

01:07:20.040 --> 01:07:22.060
rather than having a bunch of different places.

01:07:22.060 --> 01:07:27.720
And so tailwinds and Alpine JS are two that jump out at me in addition to HTMX as being worth

01:07:27.720 --> 01:07:28.740
taking a look at.

01:07:28.880 --> 01:07:32.660
I know there's a lot of Django people that are using that combination and are very passionate

01:07:32.660 --> 01:07:33.160
about it.

01:07:33.160 --> 01:07:33.480
Yeah.

01:07:33.480 --> 01:07:34.040
Fantastic.

01:07:34.040 --> 01:07:34.560
Yeah.

01:07:34.560 --> 01:07:36.600
I know some people certainly passionate about it as well.

01:07:36.600 --> 01:07:41.300
Nick out of the live stream says, view single file components, violate the separation concerns

01:07:41.300 --> 01:07:44.240
and lead towards this locality that you talk about as well.

01:07:44.240 --> 01:07:44.700
Yeah.

01:07:44.700 --> 01:07:45.360
It's a great improvement.

01:07:45.520 --> 01:07:45.960
Yeah.

01:07:45.960 --> 01:07:48.660
I think front end components are kind of moved that way as well.

01:07:48.660 --> 01:07:49.720
That's exactly right.

01:07:49.720 --> 01:07:54.140
Now, you know, do I, that's, that comes with a lot of other stuff that I don't think is necessary

01:07:54.140 --> 01:07:57.460
for a lot of web apps, but there's just this move, I think.

01:07:57.460 --> 01:07:59.840
And so I'm trying to use again, locality of behavior.

01:07:59.840 --> 01:08:04.200
And I've got an essay up on htmx.org slash talk.

01:08:04.260 --> 01:08:08.120
You can look, there's a locality of behavior essay where I'm trying to push that term and

01:08:08.120 --> 01:08:11.900
get people to adopt it when they're trying to explain to people why, Hey, why are you

01:08:11.900 --> 01:08:13.000
inlining all this code?

01:08:13.000 --> 01:08:15.940
Cause you know, they're like, Oh, this is the worst idea.

01:08:15.940 --> 01:08:17.220
No, you can't.

01:08:17.220 --> 01:08:18.300
And it's like, well, you can.

01:08:18.500 --> 01:08:23.460
And most people and people are actually having experiencing productivity and maintenance

01:08:23.460 --> 01:08:26.260
increase, you know, increases when they do it.

01:08:26.260 --> 01:08:26.520
So.

01:08:26.520 --> 01:08:27.660
Yeah.

01:08:27.660 --> 01:08:29.880
I like your idea of the spooky action at a distance.

01:08:29.880 --> 01:08:30.200
Right.

01:08:30.200 --> 01:08:31.600
A little quantum mechanics in there.

01:08:31.600 --> 01:08:32.680
Yep.

01:08:32.680 --> 01:08:33.280
Cool.

01:08:33.280 --> 01:08:34.060
All right.

01:08:34.060 --> 01:08:35.160
Final call to action.

01:08:35.160 --> 01:08:37.360
People are psyched about htmx.

01:08:37.360 --> 01:08:41.000
Maybe they're psyched about not doing too much JavaScript on the front end.

01:08:41.000 --> 01:08:41.980
What do you tell them?

01:08:41.980 --> 01:08:44.220
Well, check out htmx.org.

01:08:44.220 --> 01:08:45.960
Please start the GitHub repository.

01:08:45.960 --> 01:08:51.060
That is my primary source of compensation for, for htmx at this point.

01:08:51.060 --> 01:08:55.040
And, you know, we have a discord server that you can jump on as well.

01:08:55.040 --> 01:08:57.660
If you have questions, Twitter is getting more active.

01:08:57.660 --> 01:09:05.360
If you follow htmx, there's htmx.org on Twitter, which I run and it's getting more and more active,

01:09:05.360 --> 01:09:07.620
but the discord is friendly at this point.

01:09:07.620 --> 01:09:11.900
And, so I encourage people who are interested in this to jump on there and ask questions.

01:09:11.900 --> 01:09:15.360
There's a lot of people that understand the library very well and,

01:09:15.380 --> 01:09:19.420
know a lot of different backends because htmx is backend agnostic.

01:09:19.420 --> 01:09:24.160
Kind of each backend needs its own sort of expert to help out with it.

01:09:24.160 --> 01:09:28.960
And so, you know, hopefully in a few years, we built up a good set of example libraries,

01:09:28.960 --> 01:09:34.240
but at this point, if that's not available, then the discord is probably the best place to check out.

01:09:34.240 --> 01:09:34.620
Okay.

01:09:34.620 --> 01:09:35.360
Fantastic.

01:09:35.360 --> 01:09:38.560
Well, thanks again for being here and thanks for creating this.

01:09:38.560 --> 01:09:42.640
A lot of nice comments in the live stream as well saying, thanks for creating it.

01:09:42.640 --> 01:09:45.360
So yeah, I think you're onto something here and I'm happy to share with people.

01:09:45.360 --> 01:09:50.860
Hopefully it can superpower some of these Django flask, et cetera, apps without replacing them.

01:09:50.860 --> 01:09:55.840
Yeah, I really, and I appreciate again, you, you know, taking something that's obviously outside the,

01:09:55.840 --> 01:10:00.720
the normal Python world and, giving me a chance to talk to people about it because I do think it will

01:10:00.720 --> 01:10:07.060
help people stay in Python longer before they, they feel like they have to abandon it for JavaScript.

01:10:07.060 --> 01:10:07.620
Yeah.

01:10:07.620 --> 01:10:09.440
We can remove some JavaScript guilt.

01:10:09.440 --> 01:10:09.900
Yep.

01:10:09.900 --> 01:10:10.280
Exactly.

01:10:10.280 --> 01:10:11.380
Not doing the front and front.

01:10:11.380 --> 01:10:11.840
That's right.

01:10:11.840 --> 01:10:12.400
It's okay.

01:10:12.400 --> 01:10:12.740
Awesome.

01:10:12.740 --> 01:10:13.400
It's okay.

01:10:13.400 --> 01:10:15.800
You don't have to use JavaScript for everything.

01:10:15.800 --> 01:10:17.160
It's true.

01:10:17.160 --> 01:10:17.700
All right.

01:10:17.700 --> 01:10:18.640
Thanks again.

01:10:18.640 --> 01:10:19.060
See you later.

01:10:19.060 --> 01:10:19.720
Have a good one.

01:10:19.720 --> 01:10:20.040
Bye-bye.

01:10:20.040 --> 01:10:20.300
Bye.

01:10:20.300 --> 01:10:24.100
This has been another episode of talk Python to me.

01:10:24.100 --> 01:10:28.540
Our guest on this episode was Carson from big sky software, and it's been brought to you by

01:10:28.540 --> 01:10:31.240
Sentry, your base and assembly AI.

01:10:31.240 --> 01:10:33.320
Take some stress out of your life.

01:10:33.320 --> 01:10:37.200
Get notified immediately about errors in your web applications with Sentry.

01:10:37.200 --> 01:10:42.860
Just visit hawkpython.fm slash Sentry and get started for free and use the promo code

01:10:42.860 --> 01:10:44.560
hawkpython2021.

01:10:44.560 --> 01:10:51.640
When you sign up, your base test acceleration will dramatically improve dev test workflows and

01:10:51.640 --> 01:10:53.320
CI builds of your Python applications.

01:10:53.320 --> 01:10:57.640
If you could benefit from having pytest run your tests a hundred times faster or more, you

01:10:57.640 --> 01:10:58.480
need to check them out.

01:10:58.480 --> 01:11:01.520
Get started at talkpython.fm/your base.

01:11:01.520 --> 01:11:06.460
Transcripts for this and all of our episodes are brought to you by assembly AI.

01:11:06.460 --> 01:11:09.120
Do you need a great automatic speech to text API?

01:11:09.120 --> 01:11:11.660
Get human level accuracy in just a few lines of code.

01:11:11.660 --> 01:11:14.520
Visit talkpython.fm/assembly AI.

01:11:14.520 --> 01:11:16.280
Want to level up your Python?

01:11:16.280 --> 01:11:20.340
We have one of the largest catalogs of Python video courses over at talk Python.

01:11:20.340 --> 01:11:25.500
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:11:25.500 --> 01:11:28.180
And best of all, there's not a subscription in sight.

01:11:28.180 --> 01:11:31.080
Check it out for yourself at training.talkpython.fm.

01:11:31.080 --> 01:11:32.980
Be sure to subscribe to the show.

01:11:32.980 --> 01:11:35.760
Open your favorite podcast app and search for Python.

01:11:35.760 --> 01:11:37.060
We should be right at the top.

01:11:37.060 --> 01:11:42.860
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the

01:11:42.860 --> 01:11:46.440
direct RSS feed at /rss on talkpython.fm.

01:11:47.280 --> 01:11:49.860
We're live streaming most of our recordings these days.

01:11:49.860 --> 01:11:53.980
If you want to be part of the show and have your comments featured on the air, be sure to

01:11:53.980 --> 01:11:57.700
subscribe to our YouTube channel at talkpython.fm/youtube.

01:11:57.700 --> 01:11:59.540
This is your host, Michael Kennedy.

01:11:59.540 --> 01:12:00.840
Thanks so much for listening.

01:12:00.840 --> 01:12:02.000
I really appreciate it.

01:12:02.000 --> 01:12:03.900
Now get out there and write some Python code.

01:12:03.900 --> 01:12:24.520
I'll see you next time.

