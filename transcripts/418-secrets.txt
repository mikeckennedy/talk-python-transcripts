00:00:00 Think about the different APIs and databases your applications work with.

00:00:04 Each one of them requires either an API key or a database connection string that itself contains a password.

00:00:10 How do you let your application access this sensitive information without storing it in source code or putting it in other compromising locations?

00:00:19 On this episode, we have Glyph on the show to share his security fable, as well as just good advice for keeping secrets out of Python code.

00:00:27 This is Talk Python To Me, episode 418, recorded May 24th, 2023.

00:00:33 Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:49 This is your host, Michael Kennedy.

00:00:51 Follow me on Mastodon, where I'm @mkennedy and follow the podcast using @talkpython.

00:00:56 Both on Bostodon.org.

00:00:59 Be careful with impersonating accounts on other instances.

00:01:01 There are many.

00:01:02 Keep up with the show and listen to over seven years of past episodes at talkpython.fm.

00:01:07 We've started streaming most of our episodes live on YouTube.

00:01:11 Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:20 This episode is brought to you by JetBrains, who encourage you to get work done with PyCharm.

00:01:26 Download your free trial of PyCharm Professional at talkpython.fm/done dash with dash PyCharm.

00:01:32 And it's brought to you by the compiler podcast from Red Hat.

00:01:36 Listen to an episode of their podcast to demystify the tech industry over at talkpython.fm/compiler.

00:01:44 Cliff, welcome to Talk Python To Me.

00:01:46 It's good to be here.

00:01:47 Thank you very much for having me.

00:01:48 It is good to have you here.

00:01:50 And it's good to have you back.

00:01:51 You've been on the show a couple of times.

00:01:54 Way back when you talked about shipping software to users.

00:01:58 And then also not so long ago, a little while ago, we talked about running Python in production.

00:02:03 And those were a bunch of fun shows and really excited to now talk about secrets.

00:02:09 Although it does pose a bit of a problem.

00:02:11 If we talk about secrets, are they still secrets?

00:02:14 That is an interesting epistemological question.

00:02:17 But luckily, that's not the question that we need to answer today.

00:02:21 Because the kinds of secrets we're going to talk about are the ones that are meaningless.

00:02:25 They are, by definition, not very interesting to humans, but to computers.

00:02:29 Yes, they are.

00:02:30 They're both for you to access your database and cryptocurrency people to get cheaper crypto mining.

00:02:37 Depending on which way it goes, if you do it right or wrong.

00:02:39 So before we get into that, let's just do a quick catch up.

00:02:42 It's been at least a year since you've been on the show a little bit more.

00:02:47 So what have you been up to?

00:02:48 What are you doing these days?

00:02:49 I am nominally independent now.

00:02:51 I am trying to make a career out of having good ideas and putting them on the internet.

00:02:57 Work for a lot of different companies, doing a lot of different things.

00:03:00 Now I am making my own app.

00:03:01 I'm making an app called Pomodorobros, which is a terrible name that I'm sure you can't spell.

00:03:05 But I'm sure we'll have some links in the show notes to get to that, which is an ADHD time blindness assistance app.

00:03:13 Interesting.

00:03:14 So on the one hand, I'm kind of leaning into the neurodiversity thing.

00:03:18 I have ADHD and I'm kind of trying to help other people with it as well.

00:03:21 But also it is written entirely in Python.

00:03:24 I'm working on the Mac version first, but there'll be other versions later and it's all open source.

00:03:28 And so I have a Patreon at patreon.com slash creator glyph, which has just terrible reward tiers.

00:03:34 Hopefully I'll improve those soon.

00:03:36 But the idea is if you want to support like various open source libraries that I'm working on maintaining,

00:03:41 we'll talk about a couple of new ones that I've released recently in this podcast.

00:03:45 If you want to support the random stuff that I do, now you can.

00:03:50 And so we'll see.

00:03:51 People have been telling me for years that they love the stuff that I do.

00:03:54 So I guess we'll find out if they in fact do.

00:03:56 Well, congratulations.

00:03:58 That's really awesome.

00:03:59 As somebody doing independent stuff myself, I know how rewarding it is, but also how stressful it is, especially early days.

00:04:08 Yep.

00:04:08 It is equal parts harrowing and amazing.

00:04:11 Yes, that's well said.

00:04:13 Well said.

00:04:14 So yeah, certainly we will link to those in the show notes.

00:04:17 You give me the links.

00:04:18 I'll throw them in there for people.

00:04:19 You said something interesting that I don't hear a lot of people say that I actually wish I heard more often was,

00:04:24 I'm working on a macOS version and the word's Python.

00:04:29 So this is actually kind of dovetails with what we're going to be talking about today in an interesting way,

00:04:34 which is that one of the things that I want to be doing with my independent work is kind of letting people program their own computers.

00:04:42 And part of that is like a lot of people use Macs.

00:04:45 So I'm working on Mac desktop stuff.

00:04:48 I hope to do some mobile stuff later.

00:04:50 I also want to do Linux and Windows desktop versions of this app and then others.

00:04:54 Because I think that it's, we've lost touch with that a little bit.

00:04:57 You know, we all do stuff in the cloud these days, particularly in Python.

00:05:01 But Python is so versatile and you can use it in so many places.

00:05:04 And the way that that sort of dovetails with what we're going to be talking about today is that it's also a neglected part of the security story.

00:05:11 Because no matter how great all of your cloud security is, you're using AWS Secrets Manager and HashiCorp Vault and, you know, all kinds of cloud security stuff.

00:05:21 It all kind of terminates at your computer.

00:05:24 If your computer is not secure, if the secrets that you have locally in your possession are not properly managed,

00:05:31 then all of the cloud stuff, like you're doing it from your computer.

00:05:34 So that computer had better be secure.

00:05:36 And if it's not, that kind of flows outward towards everything else if you're a developer or a sysadmin.

00:05:43 So, yeah, so the two libraries that we're going to be talking about today are also both,

00:05:47 they're a little bit more traditional kind of console text things, but they are designed to be run on your computer and not on the cloud.

00:05:55 Yeah, absolutely.

00:05:55 It's a lot of interesting things for like, how do you secure secrets?

00:06:00 Connection strings and whatnot on your machine, right?

00:06:03 Yeah.

00:06:03 So, and as far as the other sort of desktop programming stuff, we do not have time to get into that today,

00:06:08 but you can definitely follow my blog for more interesting details about how PyObjective-C works.

00:06:13 Right.

00:06:13 Are you willing to share a quick what GUI framework you're using sort of thing

00:06:18 and how are you packaging it up or not yet?

00:06:20 I wrote a little tool called Encrust that does some of the code signing stuff.

00:06:24 I'm packaging it with PyToApp right now.

00:06:26 And as for GUI framework, I'm just using PyObjective-C and writing all of the GUI by hand as like a traditional Mac.

00:06:33 I plan to redo the GUI for each platform because Pometer Obros is a thing that needs to be a local Mac app,

00:06:39 like it can, or a local desktop app rather.

00:06:41 And so I really want to get the UI very kind of finely tuned per platform.

00:06:47 And so cross-platform GUI toolkits don't really do some of the stuff that I need to do.

00:06:51 So, and that's kind of part of the point I want to make with it is, it's actually not that hard to just like write things multiple times.

00:06:57 The Python lets you keep all the logic and a nice kind of core.

00:07:00 And then if you need to call some native APIs, Python can do that pretty much everywhere.

00:07:04 Okay.

00:07:05 Well, very interesting approach.

00:07:06 I think one of the things that's held me back from going, oh, I'm going to use TK Enter or GDK or whatever.

00:07:13 It's just like, oh, but it just doesn't really look like it belongs here that much.

00:07:16 It looks kind of like it belongs here, but not really.

00:07:19 And that, I don't know, some people don't mind that.

00:07:21 To me, it's just, I'm not a big fan.

00:07:23 So I'm looking forward to this.

00:07:25 It sounds great.

00:07:26 Cool.

00:07:26 Maybe you can have me on again to talk about it when it's closer to done.

00:07:29 Yeah, absolutely.

00:07:29 It'd be fun to talk about, you know, sort of going through and building,

00:07:32 how you built it and some lessons that you've learned, right?

00:07:36 Also, I'm working on some desktop apps now and it's not as easy as it used to be.

00:07:41 It's like, oh, this one's not signed.

00:07:42 And so it won't open because the macOS gatekeeper says it's probably dangerous.

00:07:47 And you're just like, God, I usually will just hand out an app, all right?

00:07:51 We can't have nice things because of people.

00:07:53 And I guess that's pretty much a great lead into this entire talk, because if we could have nice things, we wouldn't even need this talk, would we?

00:08:00 Exactly.

00:08:00 I guess it's worth mentioning that I reached out to you and had you on the show here

00:08:05 because you gave a talk at PyCon, How to Keep a Secret.

00:08:10 And what is it today?

00:08:11 It's May 24th.

00:08:12 So a month and two days.

00:08:15 And I was kind of looking forward to watching all these on YouTube and they're not out yet.

00:08:19 So how about we have a podcast episode about it and share that with everyone?

00:08:24 So I'm looking forward to kind of doing the audio conversational version of your talk.

00:08:29 How did your talk go there?

00:08:30 I thought it went great.

00:08:31 There was pretty good response.

00:08:32 One of the things I did, which I would recommend for other conference attendees and speakers in the future,

00:08:38 is whenever anybody came up to me and said, great talk, which is very nice.

00:08:43 I appreciate it when people do that.

00:08:44 I didn't just say thanks.

00:08:46 I said, thank you.

00:08:47 And how is this going to affect your behavior going forward?

00:08:50 What did you learn from the talk that's going to change what you do?

00:08:53 And a lot of people had specific things that they were going to change about their workflows or their kind of personal security.

00:08:59 And so that was telling me, like, I think this is an important message to get out there.

00:09:02 And I think that it's something that every developer should know about.

00:09:05 So the fact that people were, like, really learning from it, I thought, was the best metric for success.

00:09:10 It's got a lot of small lessons for many people.

00:09:13 And I suspect most people are not doing all of these things.

00:09:17 So even if you're like, yes, of course, I keep, you know, I don't put secrets into my source code.

00:09:22 Or do you?

00:09:23 But there's something else.

00:09:24 I'm sure there's something for everyone here.

00:09:26 So let's kick things off by talking about what you mean by secrets.

00:09:31 All right.

00:09:31 What are we talking about here specifically?

00:09:33 So the main kind of secret that I'm talking about is a token type of secret.

00:09:38 Whenever you use an API on the web, they'll give you, like, a little hex key, usually a short string that lets you access it.

00:09:47 Cryptographic secrets, like if you have some encrypted blob that's stored in block storage, you might have crypto key that's a similar kind of thing.

00:09:56 For your HTTPS certificates, you've got, like, you know, private RSA key or something or ECTSA key that's a little bit longer, but still kind of text file that's no more than 20 lines.

00:10:07 And so all of those secrets are kind of interesting.

00:10:10 And I wanted to talk about them in particular because the way that security works just on computers generally is that all of your other security, all of the other bigger secrets you want to keep, the confidential documents, you know, media files or whatever it is that you're securing, your database, your user accounts, all of that stuff is secured by a smaller secret.

00:10:33 And so these secrets generally represent some kind of authority, like a thing that you can do in the cloud.

00:10:40 Even cryptographic ones are kind of like the authority to decrypt another secret.

00:10:44 And so that's, in particular, the reason that restriction of the scope of this discussion to those smaller secrets is interesting is because those smaller secrets don't have, like, a lot of interesting storage requirements.

00:10:56 Like, they just, they're very small, and it's really about how you secure them, not so much about how you manage, like, a huge scale of them.

00:11:03 Yeah, also, if you're going to, say, encrypt huge blobs of data, usually what you actually need to get back to it is just the encryption key, right?

00:11:13 Which is often pretty small, right?

00:11:14 So even if the actual data is large, usually the thing that is the access to it is also small.

00:11:21 Right.

00:11:21 What you said you were not covering?

00:11:23 Into encryption and that kind of stuff, right?

00:11:25 There's a lot of other security stuff that you need to do.

00:11:28 Like, I touched briefly in the talk on disk encryption.

00:11:31 We can talk about that in a little bit, but it's mostly not about that.

00:11:35 In particular, like, there's been a lot of discussion lately about end-to-end encrypted messaging between people, and I'm not really talking about that either.

00:11:43 This is really about securing your applications.

00:11:45 It's, it's, a lot of these techniques have to do with how you get your secrets, not just secured for you, but, like, into your Python code in a way which keeps them secure, kind of on the whole journey from typing them in to using them in a production application.

00:12:01 For sure.

00:12:01 For sure.

00:12:01 I would just, as you're talking, I'm thinking, this problem is only getting worse, right?

00:12:05 We're only consuming more APIs in our code, and we're only stitching together more back ends of cloud systems, right?

00:12:13 Yeah.

00:12:14 We've been writing code for a while.

00:12:15 I have too.

00:12:16 Like, it used to be, well, what's your database connection streak?

00:12:18 All right, we're good.

00:12:18 We're done.

00:12:19 That's what you store, right?

00:12:20 How do you store that?

00:12:21 Well, and if you were doing something really esoteric, you would have, like, a Twilio API key, so you could send, like, SMS messages.

00:12:27 And now you've got, like, your billing provider and your database provider and your cloud and your user, you know, your customer relationship management API and your email service.

00:12:38 It's just, like, there's an API key for everything, and the scale of this stuff is, like, really, if you do this sort of simple thing that all the tutorials show you to do for each of these services, you end up in a complete mess with, like, basically no security on anything.

00:12:51 So, yeah, and that's why I wanted to talk about this at this point, because we need that security.

00:12:57 Yeah, we definitely do.

00:12:58 So I want to start out a little bit like you did with your talk, although not the same.

00:13:04 I want to start out with sort of something that, you know, maybe gets people's attention that might make them worry a little.

00:13:11 And that's this project that has been gone unmaintained and has been shut down, I think, because it was a little too much on the edge of what really you should be doing.

00:13:21 And it's called Shugit.

00:13:23 Shugit is a CLI thing.

00:13:25 I'm not exactly sure.

00:13:26 Basically, a little app you can run, a little CLI that you can run that will show you secrets in Git code, in code and Git repositories.

00:13:34 So you can look at your own, but for a while they were running this website called, like, Shugit.com or something, like, Shugit.

00:13:42 And it was just a live stream of just all the secrets that were being committed to public repositories just screaming by.

00:13:50 And it's going by so fast that you really can't read it.

00:13:54 And this is just the public.

00:13:56 Here's all the things being uploaded.

00:13:59 These are all these API keys, database connection strings, etc. that we've been talking about that are just, you shouldn't be doing an, oh my gosh, look at this, right?

00:14:07 Like, this has got to grab people's attention.

00:14:09 Right.

00:14:09 And this isn't, it's worth noting that this feed is not people accidentally committing their secrets to the improper kind of secure place in their organization where they, like, accidentally push to a private Git repo.

00:14:22 This is only showing you public repos with API, like, valid API keys being committed to them.

00:14:28 So, if, you know, you can imagine within organizations, there's probably 10 times as much traffic where stuff is being shared too broadly.

00:14:35 Oh, yeah.

00:14:36 People at least know they shouldn't do this and they still are.

00:14:38 Like, they might think it's okay in their private repos, right?

00:14:42 Right, exactly.

00:14:42 It's just easier.

00:14:43 Yeah, yeah, yeah.

00:14:44 This portion of Talk Python To Me is brought to you by JetBrains, who encourage you to get work done with PyCharm.

00:14:53 PyCharm Professional is the complete IDE that supports all major Python workflows, including full stack development.

00:15:00 That's front-end JavaScript, Python backend, and data support, as well as data science workflows with Jupyter.

00:15:06 PyCharm just works out of the box.

00:15:09 Some editors provide their functionality through piecemeal add-ins that you put together from a variety of sources.

00:15:16 PyCharm is ready to go from minute one.

00:15:18 And PyCharm thrives on complexity.

00:15:21 The biggest selling point for me personally is that PyCharm understands the code structure of my entire project,

00:15:28 even across languages such as Python and SQL and HTML.

00:15:32 If you see your editor completing statements just because the word appears elsewhere in the file,

00:15:37 but it's not actually relevant to that code block, that should make you really nervous.

00:15:42 I've been a happy paying customer of PyCharm for years.

00:15:45 Hardly a workday passes that I'm not deep inside PyCharm working on projects here at Talk Python.

00:15:52 What tool is more important to your productivity than your code editor?

00:15:56 You deserve one that works the best.

00:15:58 So download your free trial of PyCharm Professional today at talkpython.fm/done with PyCharm and get work done.

00:16:07 That link is in your podcast player show notes.

00:16:09 Thank you to PyCharm from JetBrains for sponsoring the show and keeping Talk Python going strong.

00:16:18 You also pointed out right before we hit record that GitHub has a more constructive, official way of doing this as well.

00:16:26 You want to tell people about the GitHub secret alerts?

00:16:29 Yeah, I don't know a whole lot about this, except that it is a feed that also produces a lot of data.

00:16:36 But there are secret scanning alerts.

00:16:39 And I believe it's also only for public repositories.

00:16:42 There might be some enterprise stuff that I have not used.

00:16:45 As it says on the page, I guess, organizations using GitHub Enterprise Cloud with a license for GitHub Advanced Security can also enable secret scanning for users on their private and internal repositories.

00:16:57 But yeah, this is something that if you're running an open source project or you have a corporate GitHub account,

00:17:02 you should probably look into just to understand how to manage these alerts, how to get them, and what to do if people are accidentally checking in secrets to your repository.

00:17:12 Because you may have to worry about open source PRs, including other people's API keys.

00:17:18 If they were testing something out with your tool.

00:17:20 Right.

00:17:20 That's more likely even as you might have a placeholder.

00:17:23 Enter API key here.

00:17:24 Don't commit it.

00:17:26 And someone commits it in a PR, right?

00:17:27 Something like that.

00:17:28 Yeah.

00:17:29 Yeah.

00:17:29 So don't do that.

00:17:30 Don't put a place to paste something in a file that's actually checked into Git.

00:17:33 But I think that it's also important not to shame people too much for doing this.

00:17:38 One of the points of showcasing these tools is to say, hey, people are leaking secrets constantly.

00:17:45 You should be aware of it.

00:17:46 It's a serious problem.

00:17:47 The other is people are doing this constantly.

00:17:49 It's a really easy kind of mistake to make.

00:17:52 And so if you do it, or if some junior engineer on your team pushes some secrets to GitHub, don't shame them.

00:17:58 It's not a dumb thing to do.

00:17:59 It's incredibly easy to screw up in this way.

00:18:01 And we should help each other build better processes.

00:18:04 So don't feel like it's a thing to mock or laugh at.

00:18:09 So you're not suggesting that GitHub adopts a new kind of badge, like a secret teller badge or something, if you're caught doing this?

00:18:16 I think let's not gamify that in either direction.

00:18:18 It's a hard enough conversation already.

00:18:22 It is.

00:18:23 Well, and it can happen even if you know you shouldn't.

00:18:25 Maybe you understand the security, but you're not good with Git, and you accidentally overcommit stuff.

00:18:32 And you're like, oh, whoops.

00:18:34 Yep, that's a very common way that it can happen.

00:18:36 And even if you are very familiar with Git, and you know not to do this, and all of the projects that you've set up are set up properly,

00:18:44 you might find yourself in an unfamiliar repository, assuming that something is Git ignored, and it's not.

00:18:49 There's lots of different ways that it can happen.

00:18:50 Yeah.

00:18:51 So I guess if you're running an open source project, it's probably worth turning on, or at least looking into the secret scanning that GitHub has, if it's on GitHub, right?

00:19:00 Yeah.

00:19:01 And if you want to startle yourself, just check out the link, the animated GIF in the Shiget repository.

00:19:06 All right.

00:19:07 So as we start our conversation about the different secrets, the pitfalls, and how we might keep them, you told, this was a really creative presentation at PyCon, and you presented it through by way, mostly by way of storytelling.

00:19:23 Well, thank you for saying so.

00:19:25 Yes, of course.

00:19:25 Was it Gerald who was your?

00:19:27 Jethro.

00:19:28 Jethro.

00:19:28 Jethro is the protagonist.

00:19:30 Yes, got it.

00:19:31 So there's this practice in security engineering, which I'm sure a lot of your listeners would have heard of, which is called threat modeling.

00:19:38 And threat modeling can be a bit dry, because it's really just repeating kind of these same scenarios over and over and over again, with slight things changed.

00:19:46 And so I thought a good way to frame that would be like a time loop story, where our protagonist is kind of running this service.

00:19:52 And every time through the time loop, his service gets pwned and taken down via some kind of compromise of secrets.

00:20:00 And he wakes up and he wakes up and has to do it all again and try to secure things properly.

00:20:04 Yes, indeed.

00:20:06 That's where we get started.

00:20:08 Yeah, for sure.

00:20:09 Yeah.

00:20:09 And one of the things I also kind of called out is like, I should mention this here, too.

00:20:12 It could be a little bit stressful listening to all these different things.

00:20:16 So this isn't exactly like a content warning, like a really serious, heavy stuff.

00:20:20 But be aware that even if it sounds kind of light and fun and informative, if you find yourself ideating on these same ideas of like, oh, no, this could go wrong, this could go wrong, this could go wrong.

00:20:31 That is kind of just what security engineering is like.

00:20:33 But also, it can kind of drive you crazy.

00:20:36 So like, don't let yourself get trapped in cycles of anxiety.

00:20:39 Just be aware that, you know, you kind of have to do your best and like make a reasonable effort, but you're never going to get everything perfect.

00:20:46 So and in fact, I'll spoil the story a little bit since we're not quite going through it in order here.

00:20:51 That's really the twist at the end of the talk is that Jethro needs to like just put forward a good effort across the board for managing his secrets and not, you know, absolutely perfectly defend against every attack, but also not to defend against each attack piecemeal, kind of onesie twosie, just like, oh, I'll address this thing.

00:21:09 And then I'll address that thing.

00:21:09 And then I'll address that thing.

00:21:11 It's like, think about your whole process.

00:21:13 So, yeah.

00:21:15 So I guess we should dive into what those actual specific attacks are.

00:21:19 Before we do that, one thing that I thought was really nice that you pointed out is, at least for me, when I feel like I'm putting a website up there, I feel like, oh, my goodness.

00:21:29 Have I what have I forgotten?

00:21:31 Right.

00:21:32 But there's you point out that there's a lot of people on your side.

00:21:36 Right.

00:21:36 There's operating system vendors, the open source maintainers.

00:21:40 You want to riff on that a bit?

00:21:42 This is also important to remember because so, for example, just to like some one attack that's been in the news a lot lately is typosquatting and software supply chain attacks.

00:21:54 Right.

00:21:54 Like somebody uploading something malicious to PyPI, somebody uploading, you know, pad NAS instead of pandas.

00:22:00 And you fat finger the name in pip and then, oh, no, you're like running code from some attacker.

00:22:06 And that is a threat.

00:22:08 And, you know, you should be concerned about it.

00:22:10 You should mitigate it in your code.

00:22:11 All of the different ways to do that are like a little bit out of scope for this discussion.

00:22:15 But also it's important to remember that a lot of these attacks are things that it's hard to demonstrate in like a quick, like circa 2007 type sniffing your Facebook password off the wire.

00:22:27 Like, hey, look at this like immediate attack where I've got all of your stuff.

00:22:31 And they're difficult to demonstrate because PyPI is actively scanning for these types of packages.

00:22:39 They're actively responding to reports.

00:22:41 There are lots of people.

00:22:42 There are lots of security researchers developing tools, some of them kind of over aggressively running them against the index to taking up a little too much, too many resources.

00:22:51 But there are lots of people doing things to defend you against each one of these attacks.

00:22:56 And so the simplistic version of them will rarely work out of the box.

00:23:00 The threat from typosquatting is a race condition.

00:23:04 It's that somebody uploads a malicious package that doesn't look malicious enough to get automatically caught in these various ways.

00:23:11 That doesn't get immediately flagged.

00:23:13 It's not popular enough to like be installed on a lot of people's machines.

00:23:17 And that you happen to do the typo in the window where it's still up before the admins have taken it down.

00:23:23 That is a real threat, but it is not as serious as like, oh, it's just a free for all.

00:23:29 Anybody can upload anything anywhere.

00:23:30 Like there's a lot of security.

00:23:32 There's the, not just the PyPI admins, but the distributors of all of the libraries on PyPI that you use are developing better processes on the teams that do uploading.

00:23:41 PyPI now has orgs.

00:23:43 And so we're doing like projects are starting to gather into organizations to apply more consistent security rules for uploading across the board.

00:23:50 So there's lots of work that's going on.

00:23:52 I happen to know a lot about PyPI, but your operating system vendor also is like, yeah, you could run some malware and that would really ruin your day.

00:24:01 But Apple, Microsoft, Google, Red Hat, none of them want their operating system to be implicated in the attack.

00:24:08 So they're constantly hardening their applications, hardening their APIs, developing secure APIs that developers can use to prevent certain attacks.

00:24:17 Different platforms are kind of at different stages of maturity there and have kind of different security features, but they're all trying their best to prevent the worst case from happening.

00:24:26 And so you're not like alone in this fight.

00:24:28 You need to model your own threats and use the tools that you've been provided in ways that are kind of helpful, but you don't have to do everything yourself.

00:24:36 You don't have to worry that you're kind of besieged with, and you're the only defender, right?

00:24:41 You're actually in a pretty big crowd of defenders, and we all got to share knowledge with each other to try to help each other out.

00:24:47 That's interesting.

00:24:47 You know, we are, you know, there's a big concern about supply chain attacks and, you know, open source building blocks.

00:24:54 But it is a bit of a herd immunity type of thing, right?

00:24:59 Yeah.

00:24:59 If something comes in pretty soon, if it at all starts to gain any popularity, people are going to notice, and it'll get beat down.

00:25:07 So it's scary, but it's maybe not as likely to broadly affect the ecosystem.

00:25:13 Right.

00:25:14 And that doesn't mean that you can give up on this work or put it off as some kind of gold plating that you're going to do later.

00:25:21 But it does mean that you can kind of moderate the amount of energy that you put in.

00:25:25 And the way that you should think about it as an individual, as an app developer, is like, you should be trying to figure out what your responsibility is and handle your part of the responsibility.

00:25:35 Don't try to, like, you know, think about every threat and become a vulnerability researcher in order to secure your application.

00:25:43 Like, let those people, there's a lot of people doing that stuff.

00:25:45 Let them do their job and just kind of figure out, okay, what do you need to do?

00:25:48 Because obviously, no matter how great the defenses are, if you don't use them, if you're not properly secure in your own processes, then it doesn't matter.

00:25:57 Like, you can easily, if you're pushing your, you know, root cloud keys to GitHub in a public repo, all of the security of the world is not going to help you.

00:26:05 Yeah, it's not going to be great.

00:26:07 You said there's even a PEP to help solve this, PEP 541.

00:26:11 What is PEP 541?

00:26:12 541 is actually a little bit broader than just, like, typo squatting.

00:26:16 It's about how PyPI, like, retains names, how they deal with trademark dispute resolution.

00:26:22 You know, it outlines some of the responsibilities of package maintainers.

00:26:27 So, for example, like, one of the typo squatting or one of the attacks against supply chains is if you use a vanity domain name for your PyPI account, and then you let the domain name lapse, and then somebody, like, registers the domain name, now they have access to your account because they can do a password reset.

00:26:43 And so there are various responsibilities that you have, like, you have to be reachable.

00:26:49 If your project has been abandoned, the index might take it away, right?

00:26:52 Like, they might shut it down.

00:26:53 They might freeze it.

00:26:55 And there are this PEP kind of lays out a bunch of processes for various things.

00:27:00 And one of them is, you know, how things get taken down, how projects become invalid, what a typo squat is.

00:27:08 And so it's an even broader project than just the security of typo squatting or even broader than supply chain security.

00:27:15 It's, like, the whole supply chain shebang.

00:27:18 And there will probably be more PEPs in this area in the future, I think.

00:27:21 Yeah, I would imagine.

00:27:23 Yeah, so, for example, if I had Michael.com and I registered, my account was Michael or me at Michael.com, and then I didn't, that went away.

00:27:34 Someone else could buy Michael.com for who knows how much and then do a password reset, and they control all of my super important open source projects on there.

00:27:43 Yeah, and then they can immediately do uploads, which is kind of a problem.

00:27:46 Right.

00:27:46 That might not be awesome.

00:27:48 Okay, so that's PEP 541.

00:27:51 Got it.

00:27:51 So it was all about threat modeling, right?

00:27:53 And you basically come through and you say, okay, well, first we're going to write some code, and then let's just push it to the cloud.

00:27:58 And to the cloud, it says.

00:28:01 Yeah.

00:28:02 Uh-oh.

00:28:04 You can't run your website, right?

00:28:06 So the first thing you got to talk about when you talk about secrets is human-generated secrets.

00:28:11 The ones, like your passwords that you actually have to remember and type in with your fingers, don't ever share those.

00:28:18 If you're sharing passwords between accounts, if you've got like a LinkedIn account that has been around for a decade, that's probably been in a breach.

00:28:27 Even if it hasn't been in a breach.

00:28:29 Oh, for those who are not on the live stream, Michael is now typing, have I been pwned?

00:28:35 Which is a great tool that you can use to see if your passwords have been in a previous breach.

00:28:41 And spoiler alert, yes, they have.

00:28:43 So the first lesson is like you should be using a password manager because that's the kind of absolute root of your security.

00:28:51 You have your kind of vault password for your password manager.

00:28:56 You need to be able to remember that.

00:28:58 You need to generate that securely.

00:29:00 And then you should let your password manager actually generate all of the passwords for all of the different sites and apps that you use.

00:29:07 Because you don't want to be sharing those between them.

00:29:09 Because inevitably, if you share a password between 10 sites, one of them will get breached, like for sure.

00:29:17 And then all of the others can be breached later by anybody who can buy that data dump on the dark web or now access that information.

00:29:26 So I actually wrote like one of the tools that I released during this talk at PyCon is called PinPal, which is kind of to help people adopt a password manager.

00:29:37 One of the challenging things about adopting a password manager, especially if you haven't got one already, is you really need to generate like a long, secure password.

00:29:46 And you have to memorize it.

00:29:48 And you really can't forget that.

00:29:51 And this is something that happened to Jethro.

00:29:53 You have to think about not just confidentiality, but there's this thing called the CIA triad where you've got confidentiality, integrity, and availability of your service.

00:30:03 And if you get hacked and people steal your secrets, then they can access your cloud and it's game over.

00:30:09 But if you forget all of your passwords and you can't access your cloud, it's just as equally game over.

00:30:15 So you have to like do that memorization.

00:30:17 You should ideally also change your root password once every couple of years.

00:30:21 You shouldn't change it too frequently, like policies that make you rotate every 90 days or whatever are just a kind of relic of a bygone time and not a very good idea.

00:30:29 But you shouldn't keep it forever.

00:30:31 And that process can be difficult because you need to memorize it.

00:30:35 And because password managers try to be convenient, they're not prompting you for it all the time.

00:30:40 So PinPal is this thing that kind of like sets up a spaced repetition process where it's like gradually generating the password over time.

00:30:48 It just kind of prompts you over and over for like, here's the first word.

00:30:53 It generates it.

00:30:54 It asks you to kind of read it back to it.

00:30:55 It's a little console tool that you like put in your prompt to see if it's time to do a memorization pass.

00:31:01 But you can use PinPal, memorize the password before you get the password manager.

00:31:05 Make sure you've got it thoroughly memorized.

00:31:08 And then you don't have to worry so much about like, oh, where was that little piece of paper that I put in my wallet that has the password in it?

00:31:13 Because like it's been a week and now I have to enter my master password again.

00:31:16 PinPal can kind of get that part of the inconvenience of adopting a password manager in the first place out of the way.

00:31:23 And so I've made it as easy as I possibly can for you.

00:31:26 I know that that's the one thing that like gets people stuck.

00:31:28 And so now you have no excuse.

00:31:30 You got to get a password manager right now.

00:31:31 I absolutely, totally recommend a password manager.

00:31:34 And I personally use one password, but I'm also a big fan of Bitwarden.

00:31:39 You know, props to the open source side of Bitwarden.

00:31:41 That's pretty cool.

00:31:42 And the pricing for the pro version is like a couple dollars a year or something ridiculously small.

00:31:48 So it's, they're good options.

00:31:49 Yeah, Dashlane is also pretty good.

00:31:52 Full disclosure, that was actually started by my cousin in France, oddly enough.

00:31:56 No kidding.

00:31:56 Yeah, it's a little weird aside there.

00:31:59 I don't believe he works there anymore.

00:32:01 So those options are all good.

00:32:02 I would avoid LastPass.

00:32:05 If you've been using LastPass, that's fine.

00:32:07 It's still way better that like, again, it can be easy to catastrophize security.

00:32:12 Like LastPass had a bunch of breaches and the breaches were like worse than they said.

00:32:18 And their security, like they used a lower iterations on their key derivation function than they should have.

00:32:23 And so there's all these issues with LastPass.

00:32:25 But like, if you had been using LastPass when they got breached, you're still in way better shape than if you had been trying to like memorize.

00:32:34 Just reusing your passwords.

00:32:36 Yeah.

00:32:36 Yeah.

00:32:37 One of the big, I think, big no-nos of LastPass, other than also the low iteration, the folding account,

00:32:45 was that a lot of stuff is stored in plain text.

00:32:49 So like the URL of the place for which the password goes to is stored in plain text.

00:32:54 So that the hackers could go through the dump and go, okay, well, just show me all the Bank of America ones.

00:33:00 Let's just work on that for a while.

00:33:01 Right?

00:33:02 Yeah.

00:33:03 They definitely had an architecture that was like bad for no reason.

00:33:07 Like there's no reason that they should, that stuff all should be.

00:33:09 I totally agree.

00:33:10 So yeah, people can choose LastPass if they want, but there's Bitward and 1Password.

00:33:15 That's where my heart loves it.

00:33:19 This portion of Talk Python To Me is sponsored by the Compiler podcast from Red Hat.

00:33:23 Just like you, I'm a big fan of podcasts, and I'm happy to share a new one from a highly respected open source company.

00:33:29 Compiler, an original podcast from Red Hat.

00:33:32 Do you want to stay on top of tech without dedicating tons of time to it?

00:33:35 Compiler presents perspectives, topics, and insights from the tech industry, free from jargon and judgment.

00:33:41 They want to discover where technology is headed beyond the headlines and create a place for new IT professionals to learn, grow, and thrive.

00:33:48 Compiler helps people break through the barriers and challenges turning code into community at all levels of the enterprise.

00:33:54 One recent and interesting episode is there, The Great Stack Debate.

00:33:59 I love, love, love talking to people about how they architect their code, the trade-offs and conventions they chose, and the costs, challenges, and smiles that result.

00:34:07 This Great Stack Debate episode is like that.

00:34:10 Check it out and see if software is more like an onion, or more like lasagna, or maybe even more complicated than that.

00:34:17 It's the first episode in Compiler's series on software stacks.

00:34:20 Learn more about Compiler at talkpython.fm/compiler.

00:34:24 The link is in your podcast player show notes.

00:34:26 And yes, you could just go search for Compiler and subscribe to it, but follow that link and click on your player's icon to add it.

00:34:34 That way they know you came from us.

00:34:36 Our thanks to the Compiler podcast for keeping this podcast going strong.

00:34:43 I did have one of Have I Been Pwned up.

00:34:45 And I would just like to point out, the question is, have I possibly, right?

00:34:48 I can tell you, it has a list of most recent breaches.

00:34:52 This Luxottica one here was 77 million.

00:34:56 I just got a notification that I was in that one.

00:34:58 That's like literally the most recent one.

00:35:01 And here's what drives me nuts about these things, this bit of a sidebar.

00:35:05 So nothing you can do about it, but it's maybe about the, you give it your best shot and you can just only do so much, Cliff.

00:35:11 And I am in this, I'm in this breach because I went to my eye doctor and my health provider.

00:35:18 They subcontracted to Luxottica to get my glasses created.

00:35:23 Luxottica was hacked and therefore my information, I'd never even heard of this company or interacted with them.

00:35:30 And yet here we are, right?

00:35:32 And so, you know, do your best, but don't go crazy.

00:35:35 Yep.

00:35:35 Okay.

00:35:36 So I guess you have more control over, right?

00:35:39 But I guess one of your very first recommendations was use a pass manager, use something like PenPal to help not forget your password to your password.

00:35:48 And sort of the lesson is the CIA triad, like availability is also important, not just the other two security bits.

00:35:54 But if you can't get to it anymore, that's still a problem.

00:35:56 Yep.

00:35:57 Don't be your own worst attacker.

00:35:58 Exactly.

00:36:00 So, yeah.

00:36:01 And I guess that one of the other major things I wanted to talk about here, part of the story is that the documentation.

00:36:07 So Jethro follows the docs on a lot of different things that he's looking at.

00:36:13 And a lot of those docs, and this is kind of the inspiration for the talk in the first place, was that many, many APIs are documented by saying, here's some code.

00:36:23 And here's where you paste the string of your API key.

00:36:26 And big companies do this.

00:36:28 Stripe does this.

00:36:30 DigitalOcean does this.

00:36:31 It's not an unusual thing.

00:36:34 It's not a thing that only kind of low security, uninteresting APIs do.

00:36:38 The idea is they're writing the docs, assuming that you kind of have some secret management strategy to begin with, that you know your API token is really sensitive.

00:36:46 So obviously you won't follow their example directly.

00:36:49 But like, as seen from the GitHub stream of, you know, constant secrets being pushed to public repos, a lot of people don't know that.

00:36:59 And there shouldn't be any shame in not knowing that.

00:37:01 Like, if the docs say, put this string here, and you're like, okay, I'm going to put that string there.

00:37:05 There's no way that you could have, like, somehow known in advance, if you're a novice coder, that, oh, if you put that string there, like they said, then all of your, you know, money will be stolen.

00:37:16 And your servers, attackers boot thousands of servers to mine cryptocurrency.

00:37:20 So one of the things that the calls to action here is if you're maintaining those docs, if you're leading people down that path, please at least mention that this token is extremely sensitive.

00:37:31 At least explain that people should be looking somewhere else for documentation of what to do.

00:37:38 And like in Python, it's actually quite easy to know what to do.

00:37:42 It's use key ring, like exactly how you configure key ring and what you do with it.

00:37:46 We can talk about in a minute or two.

00:37:48 But from the perspective of like an application loading something, from the example, from the perspective of like a code example that you want to put on a website, just never tell users to put a string directly in the code.

00:38:00 The string in your code is obviously never the user's like actual API key.

00:38:05 They're going to have to edit it anyway.

00:38:06 So in the example code, just import key ring into a key ring.get password.

00:38:10 And they can replace that with their key as easily as they can replace a string.

00:38:15 But at least you're calling out there, oh, hey, this is like a piece of data that has to be managed in a particular way.

00:38:21 Here's how you manage it in Python is you call the key ring get password API.

00:38:26 So the key ring module is like very simple.

00:38:29 It's basically just a wrapper around a function that returns a string.

00:38:33 But by centralizing that function, all of the myriad nuances of what exactly, like how exactly to get that string, how is it encrypted, where is it stored, whatever, can be kind of pushed out of the application.

00:38:46 Yeah, so let's talk about key ring a little bit.

00:38:48 It's a Python library that you can use.

00:38:51 And you can say, basically, save a secret or get a secret.

00:38:55 It calls it a password.

00:38:57 I kind of would like it to not be password, because what if it's an API token for that?

00:39:02 I don't know.

00:39:02 It seems a little, what if it's a connection string?

00:39:04 I don't know.

00:39:05 Yeah, it's a little bit like, it was definitely written quickly and saw just a crazy amount of adoption.

00:39:11 And, you know, we're kind of just stuck with that naming now.

00:39:13 I agree that it's not the best, but it's, you know, it's fine.

00:39:17 Any secret token that you treat this way is kind of functionally a password.

00:39:22 So the terminology is a little confusing, but it's fine.

00:39:25 Yeah, so regardless of whether it's an API key or a password or a connection string, you can say keyring.setpassword or keyring.getpassword.

00:39:34 And that's pretty much the API, right?

00:39:36 Yeah, and the nice thing about it is that there can be a lot of complexity in how it's configured.

00:39:40 But the default, if you just like pip install keyring and you start using it on a desktop machine, Windows, Linux, macOS, doesn't matter.

00:39:48 It, by default, will use your platform's default secret store, which is kind of the best that you can do without any additional configuration.

00:39:59 And ironically enough, for the talk, I really wanted to talk about, like, how this works on every platform.

00:40:04 I kind of figured that every platform was, like, equivalently secure.

00:40:08 I kind of hate being a shill for a, you know, trillion dollar corporation.

00:40:13 But, like, Apple does this so much better than either of the other major desktop platforms because on the Mac you've got, like, intra-user security boundaries.

00:40:24 So, like, your, there's, apps are generally sandboxed on the Mac if they come from the App Store or if they've opted in.

00:40:30 Even if they're not sandboxed, there's a lot of things that they can't do.

00:40:33 Like, if you, you may have noticed if you use a Mac, if you try to, like, run a Python program on, like, a file on your desktop or in your documents folder, it'll, like, pop up a dialogue and say, like, hey, this program's trying to access this thing.

00:40:45 Secrets are something like that where when an app tries to access a secret, you have to not just say yes, but you have to, like, enter your account, your login password again.

00:40:56 And you can choose to either allow it temporarily or permanently.

00:40:59 And you can then go in and configure it to say, like, oh, this, like, I know I said that I, this app could access its own secrets, but, like, actually, I want to be prompted every time.

00:41:08 So, like, for example, my PyPI keys, if I use Twine or Flit to upload a package to PyPI, I always get a password prompt because my PyPI token is not stored anywhere on my file system.

00:41:19 The key that's stored in my Mac keyring is, like, locked.

00:41:23 It's not allowed to be automatically accessed by anything.

00:41:26 Right.

00:41:26 And that adds a little bit of friction, but for something like PyPI package uploads, like, you want to have that friction there.

00:41:31 You don't, it's not very frequently used.

00:41:33 Now, on Windows and Linux, you still get, like, some protection against offline attacks.

00:41:39 You get protection against other users.

00:41:40 Like, if you share a computer or you're on a Windows, like, you know, a corporate laptop where things are executed under, like, administrative tasks are executed by your company under different users.

00:41:52 It'll be protected from that.

00:41:54 It'll be protected when you're not locked in.

00:41:55 And on Linux, oddly enough, you can lock your credential locker, but, like, only the whole thing.

00:42:00 And then anytime any app needs to do anything, it's like, hey, do you want to unlock this again?

00:42:05 And so, like, your mail client will be checking your mail, and it'll constantly be saying, like, hey, do you want to unlock this?

00:42:10 But nevertheless, it is still locked in a way that, like, if you step away from your computer, if the screensaver is on, I think it will generally kind of lock it for you.

00:42:19 So it provides as much protection as it can, given the way the platform works, without any additional inconvenience.

00:42:27 Like, if you use Keyring and you just kind of use it in the default mode, you get a bunch of extra security, and it's all for free.

00:42:33 Like, you don't have to think about it.

00:42:34 It'll just work.

00:42:36 I'm pretty comfortable just putting true secrets into macOS Keychain, for example.

00:42:42 I feel like that's a pretty safe, probably better than a source file, a text file.

00:42:47 Yes, it's definitely better than a text file.

00:42:49 And it's better than a text.

00:42:50 I mean, it's way better than a text file in your Git repo.

00:42:52 It's still much better than a text file, like, in your home directory.

00:42:57 Like, a lot of the less irresponsible code documentation tends to tell you to, like, put your keys into, like, dot this app dot CFG in your home directory or something.

00:43:09 And that's, like, kind of okay.

00:43:12 Like, any software that can steal stuff out of your home directory has probably already, you know, got a lot of control over your computer.

00:43:21 But it's still better to put it in Keyring if you can.

00:43:25 Right.

00:43:25 Well, my assumption about most malware type of things is it's going to be 100% automated.

00:43:32 I imagine there's very few.

00:43:34 I'm just going to remotely log into each computer and go hunting for secrets.

00:43:37 More like it's going to look for well-known things.

00:43:40 Much like if you tail the log of your website, you're going to see some things trying to access slash WP admin dot PHP.

00:43:47 Even if it's not a PHP site, like, they just got the things they look for and they're going to go through their processes to gather secrets and access.

00:43:54 And I guess the less standard, the less obvious it is to get a hold of it, probably the better.

00:43:59 It's easy to kind of trick yourself into thinking, like, oh, I should just put everything in, like, really weird locations and, like, the automation won't find it.

00:44:07 Quite often the automation, like, does kind of scrape through every file it can get access to because it doesn't cost them anything.

00:44:13 They can just, like, read every file.

00:44:14 It's your processor.

00:44:15 It's your processing.

00:44:16 Maybe just run shigit on every git repo I can find on your computer.

00:44:19 Right.

00:44:21 So it's better to kind of, like, put all your eggs in one basket and really watch that basket.

00:44:25 And that's what the keyring approach is.

00:44:27 But it also, like, beyond just the, you know, protection against malware, there's also a kind of level of management that you can do.

00:44:35 It puts, by using your platform's default keyring or encrypted store, there are platform-specific APIs for, like,

00:44:44 enumerating secrets.

00:44:45 And so if you're trying to do an inventory of, like, what secrets are on my computer, having them in there is nice because you don't have to go hunting around for them.

00:44:52 It gives you, as a defender, a little bit of an advantage because you know what you're defending against.

00:44:56 You know, oh, hey, this secret shouldn't be on this computer.

00:44:59 This should really be, like, only, you know, on this one server over here.

00:45:03 So using keyring also gets you that.

00:45:05 It also gets you this configurability because, like, once you actually put your code into production in the cloud, it's not going to have access to your local, you know, keyring on your Mac.

00:45:14 It's going to be a certain deadlock of your app if it pops up.

00:45:18 Can this website access the keychain?

00:45:20 You know, use Touch ID to allow.

00:45:22 It's probably not going to work in production.

00:45:23 Right.

00:45:24 So you have to use an alternate keyring backend on your server.

00:45:29 And that is a little bit awkward.

00:45:30 And that sometimes turns people off and they're just like, ah, I'll just use a config file.

00:45:33 But there are ways to configure, like, and they're actually documented, like, right on the keyring webpage.

00:45:39 Like, you can, it talks about keyrings.crypt file, which is this, like, extra backend that you can get that stores stuff in an encrypted file.

00:45:47 Keyrings.alt includes, like, just a plain text file.

00:45:51 If you know that on your server you have, like, a secure place to put a text file because the server is going to need to be accessing the secret over and over again, you can just say, okay, I'm going to configure the backend as part of this Docker container.

00:46:03 Like, it's just going to read this file from this volume and that's the keyring backend I'm using.

00:46:08 But again, that's all configuration.

00:46:10 You write your app to just use keyring.

00:46:13 And then after the fact, when you're setting up your deployments, you can select what the most appropriate backend is.

00:46:20 And in fact, one of the things I talked about during the talk was as I was trying to find, like, the super secure way to, like, disable access to secrets on Windows and Linux, and I didn't find it, I actually wrote my own keyring backend to demonstrate how you would do this.

00:46:33 So, when you're doing this, like, you're doing this, like, you're doing this, like, you're doing this.

00:46:47 It works on macOS, it works on Windows, and it requires you to be seated at your computer with your YubiKey plugged in in order to use this, like, keyring backend.

00:46:58 So, by configuring...

00:47:00 When your Python code hits keyring.getpassword, the next thing that has to happen before that returns, you have to attach the YubiKey.

00:47:07 And this is also a good example of how, like, this was a cool project.

00:47:10 It was fun to play around with that API.

00:47:13 I had some smarter security people than me look at it to make sure I wasn't releasing something super unsafe, just for a laugh.

00:47:19 So, I think it is definitely usable.

00:47:21 But it's also an example of a keyring backend that you would not always want to use, right?

00:47:26 Like, this is for your super high security secrets.

00:47:29 It doesn't even have support for multiple YubiKeys.

00:47:32 So, again, you've got to think about availability.

00:47:34 Like, anything you put into this, you probably want to back up somewhere else.

00:47:37 But it is a relatively convenient thing.

00:47:40 You just have to kind of touch it with your finger to unlock it.

00:47:43 But it's also really, really secure.

00:47:45 So, like, some of your secrets you might want to put into this backend to make sure that there's no way for software to access them automatically.

00:47:52 There's no way that malware running on your computer is going to be able to just, like, hoover them up.

00:47:57 Anytime you see a prompt for an authenticator touch that you weren't expecting, that's like a real eyebrow raise moment.

00:48:05 And so, but, you know, Token Ring is just kind of my example of one of these things.

00:48:11 There are dozens of other keyring backends that you can use for either different levels of security on your own machine.

00:48:17 Although, honestly, the platform encrypted stores are generally pretty good, like, for a default.

00:48:23 But you can also use alternate backends for different cloud secret providers.

00:48:27 Like, I believe HVAC, which is a HashiCorp vault backend.

00:48:32 I haven't actually used HVAC, so I'm not totally sure how it works.

00:48:35 But I believe it actually has a keyring backend, which is only one, like, tiny part of what it does.

00:48:41 But it can turn a vault into a keyring for you, I think.

00:48:46 If it can't, then the adapter to do so would be very, you know, trivial to write.

00:48:50 But that's the idea, is that you write your code to use keyring, and then wherever you deploy it, you can figure it to use the keyring that's appropriate to that context.

00:48:57 All right, right.

00:48:57 One of the interesting ones is the Bitwarden backend, which is kind of nice.

00:49:02 Right.

00:49:02 I was actually a little disappointed because I'm a big 1Password fan.

00:49:04 I know.

00:49:05 I don't use Bitwarden personally.

00:49:06 And I was like, oh, but there's a CLI.

00:49:07 Like, they could have made one.

00:49:09 And I'm sure somebody eventually will.

00:49:11 Yeah, I think it's also worth just a quick pointing out that both 1Password and Bitwarden come with CLIs.

00:49:19 So that is an option, right?

00:49:21 And 1Password even can be an SSH daemon for some of that as well.

00:49:26 So those are both options for ways that your app can directly interact with your password manager.

00:49:32 And it doesn't have to necessarily be the one that you use, right?

00:49:35 For example, you and I are 1Password people, but maybe our app is a Bitwarden person.

00:49:40 It's all about separating that software authorship thing from the user experience, right?

00:49:47 Like, the user should be able to select their own keyring.

00:49:49 It almost sounds like a little bit trivial to say, just use keyring and it'll all work.

00:49:54 But like, it's that separation that you're trying to achieve is that you want code that can be configured to be as secure as it needs to be and has like good defaults for most people.

00:50:03 Okay.

00:50:03 All right.

00:50:04 So there's a couple more lessons in here.

00:50:06 If you're a doc writer, don't encourage people to put their API token straight in the source code.

00:50:13 And you shame a few well-known companies saying it's not just that, but...

00:50:17 Yeah.

00:50:18 So that was like the biggest lesson.

00:50:20 But some other things here is that...

00:50:22 Or sorry, not another call to action here is that you really want to think about, you know, think about that time loop that you're in.

00:50:29 What are all of the different attacks could impact you?

00:50:32 Write them down.

00:50:34 Think about how...

00:50:36 What you want to be secure against the talk when it's out on YouTube kind of goes through them in order and can maybe when it comes out, you can have a listen.

00:50:44 But once you've written that down, stick to it and make sure that your processes are such that it's really easy to do all of the defenses that you have selected that are like relevant to you and to your application.

00:50:57 Like doing threat modeling is a great way to draw a line around that anxiety about like how secure are my secrets?

00:51:04 Like if you kind of...

00:51:05 If it's all just vibes and like, oh, you think about this one news story one day and then you write some security that like defends against that one particular thing.

00:51:12 Or you like do something on your laptop one day that's in a more secure way, but you don't like encode that as a process or something that you do repeatedly for each new secret.

00:51:23 Like as you said close to the top of the show here, like we're all using a zillion APIs now.

00:51:30 So if you think of a good way to access your Stripe API key and then next week you have to add Braintree support and then the week after that you have to add, you know, open AI, right?

00:51:41 Like as you add each one, you need to be doing things the same way, both so that you can correctly implement your security controls for each new thing, but also so that once you've implemented them, when you want to enhance them, when you grow to a certain size, you start getting more attacks, you start getting, you know, facing new, more difficult threats as you're a bigger target.

00:52:05 You have to be able to upgrade and you want to be able to upgrade all of your secrets management at once as easily as you can.

00:52:11 And there, there are other things outside the scope of what we're talking about today.

00:52:14 Like you also need to be able to like rotate those secrets, which is a whole other mess.

00:52:19 I mean, that's what tools like HashiCorp's vault can like help manage that part of the process.

00:52:25 But yeah, so the call to action for like doc writers and framework authors is like, don't document things the wrong way.

00:52:31 Don't provide bad defaults.

00:52:32 You use key ring if you're doing Python stuff, but the call to action for like app maintainers and people operating services is do some threat modeling, write it down and do everything the same way.

00:52:44 Like the more that it's all funneled through that choke point of key ring and of your documented security processes, the more that when you have to make it better, it will not be a giant pain of like trawling through all of your code and all of your libraries and trying to figure out where things even are.

00:53:01 You'll just be able to look at your, you know, the code that's accessing the secret and say like, oh, well, we're, we're going to switch from like, you know, our sort of homegrown thing to some vault or to Amazon secret store or Google cloud equivalent, or, you know, digital ocean has a thing.

00:53:17 Everybody's got their own secret storage thing.

00:53:19 There's a bunch of products in this area.

00:53:20 And when you adopt one, you want that process to be as smooth as possible.

00:53:24 It's also probably a bit of a friction.

00:53:26 I always think about, you know, how do you encourage people to do the right thing?

00:53:30 In a way you discourage them is you add friction and you make it harder to do the right thing.

00:53:36 Right.

00:53:36 So if the right thing is to, you figure out a way to manage one of your secrets, well, make it easy to bring on another API, make it easy to, you know, basically get in there and change that and work with that system.

00:53:47 Yeah.

00:53:47 All right.

00:53:48 Let's see.

00:53:48 We're getting short on time, but what other lessons do we have?

00:53:51 You know, talk a bit about where do we put some of these things.

00:53:53 You did also point out that there's beyond the keyring stuff is you do have stuff for like AWS secrets in particular.

00:54:03 And I suppose there's probably other ones as well, right?

00:54:06 Like what we talked about so far mostly is security on your computer or security on the one server that you go and run your app or the cluster of servers.

00:54:16 But, you know, what about GitHub automation?

00:54:18 You know, things like that, right?

00:54:20 There's various tools.

00:54:22 The two that I've talked about in my talk are there's a tool called AWS Vault.

00:54:26 There's another one called Gimme AWS Creds, which make it more secure to store your AWS credentials in particular.

00:54:33 Because those are pretty in the same way that like your computer is the root of security for like everything.

00:54:38 And that's where all your secrets are ultimately stored.

00:54:40 Your AWS account is like kind of the root of your security for AWS for all of your cloud resources if you're using them.

00:54:47 So it's that it's good to focus more on like the specific things that have a lot of power.

00:54:53 Those also can reduce the power, like have roles that have like less permission that isn't just like your cloud root API key for everything.

00:55:01 There's also like GitHub has a secrets system, which is effectively just injecting environment variables.

00:55:07 But it stores them in a way that like keeps them out of your repo.

00:55:11 It puts them in a place that, again, you can enumerate.

00:55:15 You can see all of the secrets that are provisioned against your particular repository.

00:55:19 It manages access control for like, you know, public open source PRs can't like immediately access all those secrets because they're running like they have to be run in a way that indicates that like an admin has kind of.

00:55:31 Seen that something is going to happen.

00:55:33 So they only run on like your main branch or things like that.

00:55:37 And it's a little difficult to talk about these.

00:55:39 And this is one of the reasons that I focus so heavily on your local computer, both because it's kind of the base of this pyramid, but also because you really have to do that research on your own.

00:55:48 Because you have to know what services you're using and what tools are available to manage certain secrets within them.

00:55:56 And keyring is so important because it's the thing that gives you the joint of flexibility to say like, oh, well, when it's running in GitHub, it's going to be in an N var.

00:56:04 And it's going to be in this N var.

00:56:06 And I'm going to write a keyring back in that knows that.

00:56:07 Interesting.

00:56:08 Yeah.

00:56:08 Keyring sounds like a really important piece of this story.

00:56:11 Yeah.

00:56:12 I mean, it is in the Python world.

00:56:14 It really is like the beginning of every story about improving your security is, okay, now that you're using keyring, you can.

00:56:20 And then there's like the next thing.

00:56:21 And there's a bunch of directions you can go in depending on if it's your local computer, if it's the cloud, if it's like a dedicated server, if it's an embedded device.

00:56:29 There's all different ways that you could go, but it kind of all starts with like acknowledging that you're going to need that flexibility.

00:56:35 And honestly, you could write your own version of keyring.

00:56:38 You know, all it is a function that like looks at a config file and figures out what other function to call.

00:56:43 But because it's the standard one, like it is a social convention that is very powerful because you really don't want to write all of your own backends for everything.

00:56:52 Right. It's about the integration with the other systems, about integrating with the Bitwarden CLI and with macOS keychain and doing all those things right.

00:57:00 Yeah.

00:57:00 Right. Yeah. And those good defaults are really important because like integrating with the macOS keychain is not easy and keyring just does it all for you.

00:57:08 So yeah.

00:57:08 One thing I also wanted to, this is kind of a minor point, but I just, I really want to toss it in there because I feel like it's rarely covered, which is environment variables have kind of taken over in the cloud.

00:57:18 Like they're the standard way that a lot of services expect you to inject stuff.

00:57:22 So I can't say like, don't use env vars, like it's just, that's not feasible, but when you can avoid them, like if you can get your credentials stored some other way, like in a text file or whatever, try to stick to that because env vars are really easy to accidentally dump in a debugging session.

00:57:39 Like you can just type env and it'll dump out everything.

00:57:41 And a lot of like CI builds or debug log uploaders will just like kind of dump out the environment because it's useful to know.

00:57:49 And filtering secrets out of that is a whole like discipline that you have to develop.

00:57:54 And like a lot of tools that do debugging like Sentry will have like a lot of code to do that filtering, but it's best if you could just put the secrets where the secrets go.

00:58:02 So like one idiom that you could use is like, you can put a crypto key in your environment variable, which can't do anything but like decrypt the text file.

00:58:11 And so that key is kind of useless outside the CI context or whatever.

00:58:15 And so you just like indirect it so that the actual secret is stored in a place that is not just going to be dumped in every debug log.

00:58:22 The danger may be given away too much.

00:58:23 That's what I do.

00:58:24 I have one encryption key that's pretty long and a really high level of encryption of the actual secret somewhere else.

00:58:31 And for me to add another secret, another API endpoint as well, to add it to this file and then re-encrypt it.

00:58:37 You know, it doesn't, it's sort of the same process.

00:58:39 So it's not like, well, these APIs are encrypted that way and the database connection is encrypted that way.

00:58:45 It's like, here's the file that's got all the info in it and then it's highly encrypted.

00:58:50 Yeah, and that's exactly what I want to encourage people to do.

00:58:53 Put all your eggs in one basket and then watch the basket.

00:58:55 Passwords go in the password manager.

00:58:58 Crypto stuff goes in the file.

00:59:00 Please, please, please don't let it get exposed.

00:59:02 Okay.

00:59:03 Let's wrap up this conversation with a bit of a summary from what you take away from your talk here.

00:59:10 Yeah, so I think we've hammered home, you know, you should use a password manager.

00:59:13 You should make sure that your master passwords for that password manager are backed up.

00:59:19 One thing we didn't cover today, but it's pretty big in the talk is like, you should trust the autofill on your password manager.

00:59:24 Because like, a lot of phishing attacks will make a very convincing website that will trick even the most seasoned security people.

00:59:32 So like, just if it doesn't autofill, close the window, type the URL by hand, make sure it autofills.

00:59:38 Yeah, I think people often see that.

00:59:40 Well, this is just the password manager is incomplete.

00:59:43 So it's not helping me with this website.

00:59:45 Like, that should be, you know, a super big red flag if the password manager is not suggesting to autofill.

00:59:50 Yeah, and one of my favorite things about 1Password is that they have been getting progressively more aggressive about making it super annoying to like disable that.

00:59:59 Like now when you do, if you try to autofill with 1Password in the wrong app or the wrong website, it now pops up a dialogue that's like, do you want to like add this URL?

01:00:08 Do you want to fill this once?

01:00:09 Or was this a mistake?

01:00:10 Like it will ask you every time if you try to force it to.

01:00:15 But obviously like copy paste kind of circumvents all those protections.

01:00:18 So like never, ever use copy paste.

01:00:20 Always try to get it to autofill.

01:00:22 You should use full disk encryption.

01:00:23 Just turn on FileVault or what's the Microsoft?

01:00:27 BitLocker.

01:00:27 BitLocker, yeah.

01:00:28 Or DMCrypt, I think is the Linux one.

01:00:31 Like you should, the technology now is like pretty much free.

01:00:34 It doesn't really cost much in the way of performance.

01:00:36 Like, and it gives you peace of mind if your laptop gets stolen, which is sadly a thing that speaking of like, you know, GitHub credentials leaking constantly.

01:00:44 Laptops are stolen every day.

01:00:45 So you should make encrypted backups.

01:00:48 You should make sure you have like a restore plan because availability is really important.

01:00:51 Obviously, use keyring, use keyring, use keyring.

01:00:54 And pick an appropriate backend for the level of security that you need in each place where your code's deployed.

01:00:59 Yeah, absolutely.

01:01:01 All right.

01:01:01 Well, Cliff, thanks for thinking about all this for everyone and giving us a list.

01:01:06 And I think people will really enjoy your storytelling when the PyCon video eventually comes out.

01:01:13 Yeah, I can't wait to start sending people over to the YouTube video.

01:01:15 I was pretty proud of how it went.

01:01:17 It's my first talk in quite a while because I don't know if you know this, but the last few years have been a little stressful for everybody.

01:01:24 A lot of stuff going on.

01:01:27 It scrambles up the whole conference track, conference circuit a little bit.

01:01:32 Yes.

01:01:32 All right.

01:01:32 Before we get out of here, let's give you a chance to give a shout out to a PyPI package.

01:01:36 I mean, feel free to pick keyring if you want one more time or something else that you think is kind of awesome people should check out.

01:01:41 That's always tough.

01:01:42 I remember, I know that this question is coming every time I'm on this podcast.

01:01:46 Well, let's see.

01:01:46 The choices are getting harder because we're up to 456,000 packages on PyPI.

01:01:52 How nuts is that?

01:01:53 There's a lot out there.

01:01:54 I guess I should take this as an opportunity to like, oh, you know what?

01:01:58 Actually, I do have a self-promotion thing that I should put in here that is not, we did not talk about at all today, which is date type.

01:02:05 Date type is another little package that I wrote.

01:02:09 And it's a workaround for like one specific bug in the standard library, which is that dates are assignable to like dates and date times are considered equivalent because they are one subclass is the other.

01:02:24 And this will make it so that you can't assign a date time to a date because they don't actually, like they're not compatible.

01:02:31 They're not Liskov substitutable.

01:02:33 And it will also give you separate types for naive and aware date times.

01:02:37 So you can't mix those up.

01:02:39 Oh, nice.

01:02:39 It is not actually a library.

01:02:41 It looks like a library.

01:02:43 And I guess it does have one function in it.

01:02:44 But what it actually is, is a bunch of abstract protocol like type stubs.

01:02:50 And so the actual, at runtime, there's still date times.

01:02:53 Everything works exactly the same.

01:02:54 It doesn't change how your code behaves at all.

01:02:55 But by importing from date type instead of date time, you get this extra mypy type safety.

01:03:00 Excellent.

01:03:00 All right.

01:03:01 Very cool.

01:03:01 That and also Rich, because like that text UI stuff is amazing.

01:03:06 But I feel like everybody talks about that one.

01:03:08 Rich is awesome.

01:03:09 Will's doing a good job over there with that for sure.

01:03:11 All right.

01:03:12 Final question.

01:03:13 If you're going to work on date type or any of these other projects, what editor are you using these days?

01:03:18 I use Emacs as I have for nigh on 30 years now.

01:03:22 You prefer to have an operating system for your editor?

01:03:25 I don't treat it as an OS.

01:03:26 I feel like a lot of people, you know, kind of live inside Emacs all the time.

01:03:30 And I use Emacs for a lot.

01:03:31 I think I love the text editing facilities.

01:03:33 Every time I kind of try to drop into like VS Code or one of the, you know, new cool text editors, I always like the IDE stuff is often nicer than Emacs.

01:03:43 But the text editing itself, like the number of motions, the kinds of things you can do to like select a word, select a function, select a line, you know, select a sentence, rewrap a paragraph.

01:03:55 There's all these things that you do as you're just working with text in Emacs.

01:04:00 So it's like a, it's a text editor in a way that few other IDEs are really text.

01:04:06 Yeah.

01:04:07 I feel like Vim is a little more interchangeable.

01:04:09 Yeah.

01:04:09 A lot of the editors have Vim bindings, right?

01:04:11 I've used Vim.

01:04:12 I actually kind of took a break from Emacs for about two years at one point and switched entirely to Vim.

01:04:17 But my Vim config has been slowly breaking over the years.

01:04:21 So I actually deleted the whole thing last year and I've been trying to get into NeoVim, but there's a little bit of like, it's a different world.

01:04:28 So I haven't managed to get into it.

01:04:30 Very cool.

01:04:31 All right.

01:04:32 Well, final call to action for people who are now maybe a little bit nervous and thinking about how they should treat their secrets differently.

01:04:38 Yeah.

01:04:39 I mean, I think that that's a good point.

01:04:41 They might be a little nervous.

01:04:42 Relax.

01:04:42 It's going to be okay.

01:04:44 That's my call to action.

01:04:45 And use keyring and don't like write docs that tell people to paste stuff into their source code.

01:04:50 But like mostly just like relax and take this methodically.

01:04:54 Nobody's attacking you right now.

01:04:55 And it's very easy to get worked up about security and think like, oh no, you know, all of these attacks, like all this horrible stuff could happen.

01:05:02 But really, like today's the same as yesterday.

01:05:05 You just need to start adding those defenses a little bit at a time.

01:05:08 Absolutely.

01:05:08 Well, thanks again for being on the show.

01:05:10 It's great to catch up with you.

01:05:11 Thanks so much for having me.

01:05:12 This was great.

01:05:12 Yeah, you bet.

01:05:13 Bye.

01:05:13 Bye.

01:05:13 This has been another episode of Talk Python To Me.

01:05:17 Thank you to our sponsors.

01:05:19 Be sure to check out what they're offering.

01:05:20 It really helps support the show.

01:05:22 The folks over at JetBrains encourage you to get work done with PyCharm.

01:05:27 PyCharm Professional understands complex projects across multiple languages and technologies, so you can stay productive while you're writing Python code and other code like HTML or SQL.

01:05:38 Download your free trial at talkpython.fm/done with PyCharm.

01:05:44 Listen to an episode of Compiler, an original podcast from Red Hat.

01:05:48 Compiler unravels industry topics, trends, and things you've always wanted to know about tech through interviews with the people who know it best.

01:05:55 Subscribe today by following talkpython.fm/compiler.

01:06:00 Want to level up your Python?

01:06:01 We have one of the largest catalogs of Python video courses over at Talk Python.

01:06:05 Our content ranges from true beginners to deeply advanced topics like memory and async.

01:06:10 And best of all, there's not a subscription in sight.

01:06:13 Check it out for yourself at training.talkpython.fm.

01:06:16 Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:06:20 We should be right at the top.

01:06:22 You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

01:06:31 We're live streaming most of our recordings these days.

01:06:34 If you want to be part of the show and have your comments featured on the air, be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:06:43 This is your host, Michael Kennedy.

01:06:44 Thanks so much for listening.

01:06:45 I really appreciate it.

01:06:47 Now get out there and write some Python code.

01:06:48 I'll see you next time.

01:07:09 Thank you.

