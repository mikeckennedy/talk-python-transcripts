WEBVTT

00:00:00.080 --> 00:00:04.280
Deploying and managing your application after you create it can be a big challenge.

00:00:04.280 --> 00:00:08.660
Cloud platforms such as Azure have literally hundreds of services.

00:00:08.660 --> 00:00:11.960
Which ones should you choose? How do you link them together?

00:00:11.960 --> 00:00:17.680
In this episode, Anthony Shaw and Shane Boyer share a new CLI tool and template

00:00:17.680 --> 00:00:22.500
they've created for jump-starting your use of modern Python apps and deploying them to Azure.

00:00:22.500 --> 00:00:27.480
We're talking FastAPI, Beanie and MongoDB, Async and Await, Bicep DevOps,

00:00:27.480 --> 00:00:30.200
Automated CI and CD pipelines and more.

00:00:30.200 --> 00:00:35.080
Plus, we also get to catch up on other Python work happening that Anthony is involved with.

00:00:35.080 --> 00:00:39.460
If you're interested in deploying or structuring modern Python applications,

00:00:39.460 --> 00:00:42.460
you'll find some interesting takeaways from our conversation.

00:00:42.460 --> 00:00:48.580
This is Talk Python To Me, episode 373, recorded May 12, 2022.

00:00:48.580 --> 00:00:48.780
Me too.

00:00:48.780 --> 00:01:04.860
Welcome to Talk Python To Me, a weekly podcast on Python.

00:01:04.860 --> 00:01:06.580
This is your host, Michael Kennedy.

00:01:06.580 --> 00:01:11.240
Follow me on Twitter where I'm @mkennedy and keep up with the show and listen to past episodes

00:01:11.240 --> 00:01:15.900
at talkpython.fm and follow the show on Twitter via at Talk Python.

00:01:15.900 --> 00:01:19.480
We've started streaming most of our episodes live on YouTube.

00:01:19.480 --> 00:01:24.220
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified

00:01:24.220 --> 00:01:27.040
about upcoming shows and be part of that episode.

00:01:27.040 --> 00:01:32.800
This episode is brought to you by Sentry and their awesome error monitoring product,

00:01:32.800 --> 00:01:34.380
as well as NordVPN.

00:01:34.760 --> 00:01:38.280
What you do on the internet belongs to you, not ad companies.

00:01:38.280 --> 00:01:40.680
Keep your connection private and safe with Nord.

00:01:40.680 --> 00:01:45.220
Transcripts for this and all of our episodes are brought to you by Assembly AI.

00:01:45.220 --> 00:01:47.900
Do you need a great automatic speech-to-text API?

00:01:47.900 --> 00:01:50.440
Get human-level accuracy in just a few lines of code.

00:01:50.440 --> 00:01:53.220
Visit talkpython.fm/assemblyai.

00:01:53.220 --> 00:01:56.780
Anthony, Shane, welcome to Talk Python To Me.

00:01:56.780 --> 00:01:57.600
Hey, how are you?

00:01:57.600 --> 00:01:58.440
I'm doing well.

00:01:58.440 --> 00:01:59.780
It's great to have you here.

00:01:59.780 --> 00:02:00.420
Yeah, yeah.

00:02:00.760 --> 00:02:07.800
I'm excited to talk about this re-envisioning how Python works on Azure as a developer story

00:02:07.800 --> 00:02:09.020
that you all are working on.

00:02:09.020 --> 00:02:11.980
And from the really quick preview I've seen, it looks really exciting.

00:02:11.980 --> 00:02:13.140
You must be excited to share it.

00:02:13.140 --> 00:02:17.920
Yeah, it's been an adventure to figure out what's the fastest way to get a developer

00:02:17.920 --> 00:02:23.760
kind of up and running on Azure and in the cloud without having to learn a whole set of new things.

00:02:23.760 --> 00:02:24.980
That's kind of the goal here.

00:02:24.980 --> 00:02:25.280
Sure.

00:02:25.280 --> 00:02:31.960
And Shane, you and I, when we first started talking, we were reminiscing back to Azure in

00:02:31.960 --> 00:02:34.540
the early days when there were only a couple of services.

00:02:34.540 --> 00:02:35.040
Right.

00:02:35.040 --> 00:02:35.600
Yeah.

00:02:35.600 --> 00:02:36.980
Back in Silverlight.

00:02:36.980 --> 00:02:37.520
It ran on.

00:02:37.520 --> 00:02:38.180
Silverlight.

00:02:38.180 --> 00:02:38.460
It ran on.

00:02:38.460 --> 00:02:39.380
Silverlight.

00:02:39.380 --> 00:02:39.700
Right.

00:02:39.700 --> 00:02:40.480
Silverlight.

00:02:40.480 --> 00:02:41.380
Oh, my goodness.

00:02:41.380 --> 00:02:41.840
Right.

00:02:41.840 --> 00:02:42.700
Those were the days.

00:02:42.700 --> 00:02:43.260
What was that?

00:02:43.260 --> 00:02:44.580
2008-ish?

00:02:44.580 --> 00:02:46.020
Maybe a little earlier even?

00:02:46.020 --> 00:02:47.600
Yeah, that sounds about right.

00:02:47.600 --> 00:02:49.340
Yeah, we had Silverlight.

00:02:49.340 --> 00:02:54.900
I think we had three actual products, and this is long before I started at Microsoft,

00:02:54.900 --> 00:02:57.060
and SQL Server was its own portal.

00:02:57.060 --> 00:02:59.460
So it had its own little space.

00:02:59.460 --> 00:03:03.820
And now we're like, I don't know, well over 100 different things that we can do in the portal.

00:03:03.820 --> 00:03:04.100
Yeah.

00:03:04.100 --> 00:03:10.060
I don't know how many folks who are listening have actually gone to the portal and pulled

00:03:10.060 --> 00:03:12.000
it up and sort of just browsed it.

00:03:12.000 --> 00:03:16.020
But between Azure and AWS, it's just like a paradox of choice.

00:03:16.440 --> 00:03:19.900
There's just layers of, oh, my gosh, the screen is full of icons.

00:03:19.900 --> 00:03:24.400
Oh, I opened up one, and that was a subsection of now we have like deploy features that fill

00:03:24.400 --> 00:03:25.120
the screen, right?

00:03:25.120 --> 00:03:27.480
It's quite the challenge to get up and going, right?

00:03:27.480 --> 00:03:27.920
Yeah.

00:03:27.920 --> 00:03:32.120
I think if you ask any web developer, hey, you've got code.

00:03:32.120 --> 00:03:33.960
How do you run this on the cloud?

00:03:33.960 --> 00:03:39.520
And it's like, it depends, truly takes full meaning, you know, when it comes to that.

00:03:39.520 --> 00:03:45.040
And, you know, before it was, you know, maybe it was just a slider bar for scaling,

00:03:45.040 --> 00:03:45.500
right?

00:03:45.560 --> 00:03:47.120
Like, oh, I want maybe two or three.

00:03:47.120 --> 00:03:50.780
And now it's like, oh, well, it's based on CPU and this and how the moon is moving.

00:03:50.780 --> 00:03:55.260
And like, there's just so many different ways that, you know, we can scale a web app or any

00:03:55.260 --> 00:03:56.600
part of our architecture now.

00:03:56.600 --> 00:04:00.220
And so many areas in which the pressure might be exerted that it needs to scale rather than

00:04:00.220 --> 00:04:01.000
just CPU.

00:04:01.000 --> 00:04:02.140
Yeah, totally.

00:04:02.140 --> 00:04:04.640
Before we get to it, though, just like quick introduction for you.

00:04:04.640 --> 00:04:07.080
I guess, Anthony, people know you.

00:04:07.080 --> 00:04:08.820
You've been on the show so many times.

00:04:08.820 --> 00:04:10.000
It's fantastic to have you back.

00:04:10.000 --> 00:04:11.020
Yeah, it's great to be here again.

00:04:11.020 --> 00:04:12.100
Yeah, for sure.

00:04:12.100 --> 00:04:13.320
It's always good to have you on the show.

00:04:13.380 --> 00:04:16.340
And when you're not on the show, we're often talking about you, about some project that

00:04:16.340 --> 00:04:22.900
you're doing, some pet that lives in your IDE or some comic sans font using, all sorts of

00:04:22.900 --> 00:04:23.360
fun things.

00:04:23.360 --> 00:04:23.580
Yeah.

00:04:23.580 --> 00:04:25.700
Rumors of a golden jacket somewhere.

00:04:25.700 --> 00:04:26.100
Yeah.

00:04:26.660 --> 00:04:28.860
Well, I didn't realize how close you were to the golden jacket.

00:04:28.860 --> 00:04:29.480
That's amazing.

00:04:29.480 --> 00:04:30.460
We have to work on that.

00:04:30.460 --> 00:04:34.340
So just give us a quick catch up and then Shane, you can introduce yourself.

00:04:34.340 --> 00:04:35.280
What have you been up to?

00:04:35.280 --> 00:04:35.660
Anthony?

00:04:35.660 --> 00:04:36.360
Have we spoken?

00:04:36.360 --> 00:04:36.720
Yeah.

00:04:36.720 --> 00:04:38.840
Anthony, have we spoken since you moved to Microsoft?

00:04:38.840 --> 00:04:40.120
I think we have.

00:04:40.120 --> 00:04:40.520
I can't.

00:04:40.520 --> 00:04:42.840
I'm not 100% sure, but let's assume we haven't.

00:04:42.840 --> 00:04:44.300
Tell people about what you're up to these days.

00:04:44.380 --> 00:04:44.540
Yeah.

00:04:44.540 --> 00:04:51.320
So I'm kind of working on advocating for Python within Microsoft and then working on advocating

00:04:51.320 --> 00:04:53.520
Python outside of Microsoft as well.

00:04:53.520 --> 00:04:57.800
So I'm still doing a lot of open source work, but then within Microsoft, I guess, trying to

00:04:57.800 --> 00:05:01.200
integrate Python more into our products and stuff like that.

00:05:01.380 --> 00:05:07.920
And also get the Python community and things like that more into how we work and find out

00:05:07.920 --> 00:05:12.520
more about how Python is being used across the company and how we can do better as well.

00:05:12.520 --> 00:05:16.540
So I've been focused on performance and security.

00:05:16.540 --> 00:05:21.860
They're kind of two things I'm always interested in, but also like modern Python applications and

00:05:21.860 --> 00:05:23.780
how they kind of come into play as well.

00:05:23.780 --> 00:05:28.840
So yeah, so many things I couldn't possibly list them all over the last, the first year I've

00:05:28.840 --> 00:05:30.320
been at Microsoft for over a year now.

00:05:30.560 --> 00:05:33.960
And I made less than it was like 50 things I think I'd done in the first year.

00:05:33.960 --> 00:05:36.980
But yeah, it's been a whirlwind, but really fun.

00:05:36.980 --> 00:05:37.400
It has.

00:05:37.400 --> 00:05:38.840
And you just came back from PyCon.

00:05:38.840 --> 00:05:42.220
I want to give us a quick report from being on the scene.

00:05:42.220 --> 00:05:45.700
Did I see you on the big screen, big stage giving a talk there?

00:05:45.700 --> 00:05:47.160
Yeah, it's my first time doing that.

00:05:47.160 --> 00:05:47.960
That was fun.

00:05:47.960 --> 00:05:48.500
Awesome.

00:05:48.500 --> 00:05:49.060
Congratulations.

00:05:49.060 --> 00:05:50.380
Yeah, it's terrifying.

00:05:50.380 --> 00:05:54.800
Yeah, so I gave a short update on behalf of Microsoft.

00:05:54.800 --> 00:05:57.440
I was also in the diversity and inclusion.

00:05:57.440 --> 00:06:00.300
I'm on the diversity and inclusion work group at the PSF.

00:06:00.300 --> 00:06:03.020
And we had like a panel discussion on the stage.

00:06:03.020 --> 00:06:06.340
And then I also gave a talk, like a full talk at PyCon.

00:06:06.340 --> 00:06:06.960
What was your talk on?

00:06:06.960 --> 00:06:09.340
It was on performance anti-patterns.

00:06:09.340 --> 00:06:09.700
Yeah.

00:06:09.700 --> 00:06:12.000
And that's it from your Perf Lint project?

00:06:12.000 --> 00:06:12.360
Yeah.

00:06:12.360 --> 00:06:17.220
So I basically gave background to the performance Lint project that I've been working on and

00:06:17.220 --> 00:06:20.600
what things I'm looking for in code and why they slow it down.

00:06:20.720 --> 00:06:25.880
And then just trying to demonstrate what the difference is to people on 3.9 or 3.10.

00:06:25.880 --> 00:06:32.520
So like a simple one line code change can make 60% difference in terms of how quickly the code runs.

00:06:32.900 --> 00:06:36.820
And then you can get into the debate again with people that no list comprehensions are just loops.

00:06:36.820 --> 00:06:37.800
They don't make it any faster.

00:06:37.800 --> 00:06:40.900
You're like, okay, can we run the benchmarks again?

00:06:40.900 --> 00:06:41.740
And let's have another.

00:06:41.740 --> 00:06:42.580
Yes, that's great.

00:06:42.580 --> 00:06:43.520
So that's good work.

00:06:43.960 --> 00:06:47.560
Last thing, what's the status of Perf Lint?

00:06:47.560 --> 00:06:49.040
Is it a thing people are using already?

00:06:49.040 --> 00:06:50.720
Is it still under development?

00:06:50.720 --> 00:06:52.700
Yeah, it's definitely very early beta.

00:06:52.700 --> 00:06:54.980
It raises a lot of false positives at the moment.

00:06:54.980 --> 00:06:59.500
But it's raised some really interesting things on production code bases that I've run it against.

00:06:59.500 --> 00:07:03.880
So for example, our serverless platform is Azure Functions.

00:07:03.880 --> 00:07:04.700
That's all.

00:07:04.700 --> 00:07:07.680
The Python serverless is all written in Python.

00:07:07.680 --> 00:07:10.820
And it uses gRPC for communication.

00:07:10.820 --> 00:07:16.960
So I'm actually running the performance linter against that code base to look at ways that we can make it faster.

00:07:16.960 --> 00:07:20.060
And there's a list of stuff that I'm working through with the engineering team.

00:07:20.060 --> 00:07:24.000
So yeah, trying to put that to proof instead of just making it theoretical.

00:07:24.000 --> 00:07:25.540
That's a really good test case, actually.

00:07:25.540 --> 00:07:30.040
And performance, if you can improve performance of the fabric of the cloud,

00:07:30.040 --> 00:07:32.640
then you've made it better for everyone, right?

00:07:32.640 --> 00:07:32.920
Yeah.

00:07:32.920 --> 00:07:35.000
So there's a couple of loops I was looking at,

00:07:35.000 --> 00:07:38.160
which probably get executed hundreds of millions of times a day.

00:07:38.260 --> 00:07:41.320
So I'm like, okay, what if I can improve that by like 10%?

00:07:41.320 --> 00:07:42.780
Then that's going to make a big difference.

00:07:42.780 --> 00:07:43.420
Yeah, absolutely.

00:07:43.420 --> 00:07:44.160
Awesome.

00:07:44.160 --> 00:07:46.140
Well, it seems like you're having a good time there.

00:07:46.140 --> 00:07:48.320
I'm happy to see you've found a new home.

00:07:48.320 --> 00:07:48.560
Yeah.

00:07:48.560 --> 00:07:49.100
Yeah, indeed.

00:07:49.100 --> 00:07:50.600
Shane, welcome to the show.

00:07:50.600 --> 00:07:51.540
Tell people about yourself.

00:07:51.540 --> 00:07:51.920
Thanks.

00:07:51.920 --> 00:07:53.040
It's a hard act to follow.

00:07:53.040 --> 00:07:53.560
I know.

00:07:53.560 --> 00:07:54.860
I did perf at my last job.

00:07:54.860 --> 00:07:57.140
So I appreciate any perf improvements.

00:07:57.140 --> 00:08:00.500
So yeah, I've been at Microsoft now six years.

00:08:00.500 --> 00:08:02.100
It'll be six years in the summer.

00:08:02.100 --> 00:08:03.400
So in about a month or so.

00:08:03.680 --> 00:08:06.080
And it feels like some days it's six days.

00:08:06.080 --> 00:08:07.580
Some days it feels like 60 days.

00:08:07.580 --> 00:08:08.960
Others it's 60 years.

00:08:08.960 --> 00:08:10.700
So yeah, what do I do at Microsoft?

00:08:10.700 --> 00:08:16.620
I run an end-to-end and developer experiences team for Azure inside of DevDiv.

00:08:16.740 --> 00:08:35.300
We do work closely with Anthony and other folks on his team too around just finding out what is hard about running Python and the other languages on Azure, on our tools, VS Code, Visual Studio, and how to get your code on the cloud and all the things that come along with it.

00:08:35.300 --> 00:08:43.620
Everything from docs to the actual components, the services, and what's that full story and kind of where are those pain points.

00:08:43.620 --> 00:08:51.280
And then working with those service teams to find out what makes sense to you, what feels like a Python developer should feel.

00:08:51.280 --> 00:08:56.120
One of the early things that Anthony brought forward was, these are great.

00:08:56.120 --> 00:08:59.440
It's great that we have logs, but it's not how I want to see logs, right?

00:08:59.520 --> 00:09:01.580
So I think that, you know, that makes sense.

00:09:01.580 --> 00:09:06.100
And that's the, again, like you talked earlier, that's the fabric of, you know, a developer.

00:09:06.100 --> 00:09:12.620
Like I want to, when something goes wrong, we want to fix, you know, fix what it should look like so I can find that problem fast.

00:09:12.620 --> 00:09:16.940
And those are types of things that we dig into and report up and help solve on our team.

00:09:16.940 --> 00:09:21.120
Yeah, there's this story of when Scott Guthrie was put in charge of Azure.

00:09:21.120 --> 00:09:29.420
Scott Guthrie being the guy at Microsoft, who was really responsible for a lot of the developer experience and took a bunch of the people on the team and had them all sit down and say,

00:09:29.420 --> 00:09:31.100
okay, get an app on Azure.

00:09:31.100 --> 00:09:33.120
And it was apparently a real struggle.

00:09:33.120 --> 00:09:34.580
A lot of the people didn't succeed.

00:09:34.580 --> 00:09:36.380
And it was like, this is the problem.

00:09:36.380 --> 00:09:37.620
We need to fix this.

00:09:37.620 --> 00:09:40.100
And I think that made it a lot better in some ways.

00:09:40.100 --> 00:09:45.020
But it sounds to me like you're kind of doing a microcosm of that with Python, with the two of you.

00:09:45.020 --> 00:09:45.260
Yeah.

00:09:45.260 --> 00:09:57.820
And we do it for many, you know, for every type of developer, every language stack in Python is important to us for, you know, the very reasons that like Anthony mentioned, like some of our core components are actually written in Python, right?

00:09:57.880 --> 00:10:03.640
And we want the, we appreciate that part of what we're doing and how those applications are written.

00:10:03.640 --> 00:10:05.000
And again, the perf.

00:10:05.000 --> 00:10:15.580
And that's a very classic story that you bring up because it's often referenced and probably a core reason why my team exists now does because we still have, you know, we have to solve those problems.

00:10:15.580 --> 00:10:16.320
Yeah, sure.

00:10:16.320 --> 00:10:18.360
Well, it's like we said, it's fabric, right?

00:10:18.360 --> 00:10:21.140
And if the fabric is scratchy or itchy, you don't want to wear it.

00:10:21.140 --> 00:10:23.220
And that's a really big problem, right?

00:10:23.220 --> 00:10:29.360
You want to make this as smooth and seamless for people to get it right without bouncing off the walls too badly.

00:10:29.360 --> 00:10:29.700
Yeah, for sure.

00:10:29.700 --> 00:10:30.080
For sure.

00:10:30.080 --> 00:10:38.620
Now, we're going to talk about this project that you all are working on, which is super exciting about structuring Python applications and deploying them to Azure.

00:10:38.860 --> 00:10:45.760
Before we do though, you know, there's some other interesting folks working with you at Microsoft these days.

00:10:45.760 --> 00:10:51.440
A lot of core developers, like Microsoft's doing a lot of stuff with Python these days in terms of the number of core developers.

00:10:51.440 --> 00:10:59.080
I mean, obviously, you know, taking over GitHub is like a big step into the whole open source steps that you're all taking.

00:10:59.080 --> 00:11:02.560
But, you know, the sort of the direct contribution to Python is super interesting.

00:11:02.560 --> 00:11:07.820
And the most significant one, I guess, that we could talk about is when was this?

00:11:07.820 --> 00:11:16.220
A little while ago, we had this big announcement that back in 2018, Guido Van Rossum retires as BDFL.

00:11:16.220 --> 00:11:17.700
And that was it.

00:11:17.700 --> 00:11:19.140
The steering council was created.

00:11:19.140 --> 00:11:23.380
Governance thing was up in the air, but then figured out and seems to be really nailed.

00:11:23.380 --> 00:11:25.680
And then hung out at home for a while.

00:11:25.680 --> 00:11:26.340
COVID hit.

00:11:26.340 --> 00:11:27.820
You couldn't really travel, do too much.

00:11:27.820 --> 00:11:30.560
He's like, you know what, I kind of want to go back and do some interesting stuff.

00:11:30.560 --> 00:11:37.200
So now Python creator Guido Van Rossum joins Microsoft and, you know, talk to him about that some and whatnot.

00:11:37.200 --> 00:11:38.920
But still, very interesting.

00:11:38.920 --> 00:11:40.020
You guys are working with him.

00:11:40.020 --> 00:11:47.220
Most recently, I spoke to him and Mark Shannon about the Shannon plan and making CPython five times faster.

00:11:47.220 --> 00:11:51.880
So, you know, Anthony, you want to give us sort of an update on the stuff you see going on?

00:11:51.880 --> 00:11:54.020
I mean, I know you might not be like directly involved.

00:11:54.020 --> 00:11:56.520
Yeah, we were actually testing.

00:11:56.560 --> 00:11:58.380
And doing some of the PyCon.

00:11:58.380 --> 00:12:06.600
So at the Microsoft booth, so the team that they're talking about, so Guido, Mark Shannon, there's now seven people on that team.

00:12:06.600 --> 00:12:09.000
All core developers are working full time.

00:12:09.000 --> 00:12:10.860
Apart from Guido, Guido is part time.

00:12:11.000 --> 00:12:15.760
But all the others working full time on the Shannon plan and a whole bunch of other concepts.

00:12:15.760 --> 00:12:21.760
And what they're doing is basically making changes to see Python core to make it faster.

00:12:21.760 --> 00:12:26.700
Targeting Python 3.11, which will be out in October this year.

00:12:26.700 --> 00:12:29.100
3.12 and 3.13.

00:12:29.100 --> 00:12:31.580
Some of the ideas are actually penciled for 3.13.

00:12:32.040 --> 00:12:32.200
Right.

00:12:32.200 --> 00:12:34.800
This is like a five-year plan that Mark had laid out of.

00:12:34.800 --> 00:12:40.180
If we could make it 1.5x better each year, compounding is good and we'll get fast.

00:12:40.180 --> 00:12:40.740
Yeah, exactly.

00:12:40.740 --> 00:12:43.740
So some of the fruits of that are actually coming out in 3.11.

00:12:44.280 --> 00:12:50.280
So we were actually doing some live benchmarks and stuff at PyCon on different workloads and things like that.

00:12:50.280 --> 00:12:55.740
I'm seeing 25% performance gain on most workloads, which is awesome.

00:12:55.740 --> 00:12:57.920
And in some cases up to 60%.

00:12:57.920 --> 00:13:00.740
So it depends very much on what your workload is.

00:13:00.740 --> 00:13:02.020
But yeah, that's 3.11.

00:13:02.020 --> 00:13:05.320
But I think some of the bigger changes are coming in 3.12.

00:13:05.320 --> 00:13:11.020
So basically, there's a core team of people working full time now on CPython itself.

00:13:11.020 --> 00:13:16.080
And not a fork of CPython, they're working directly on CPython with the core development team.

00:13:16.080 --> 00:13:16.460
Right.

00:13:16.460 --> 00:13:21.660
As amazing as the stuff that was done over, say, like Cinder and Instagram, right?

00:13:21.660 --> 00:13:24.660
Really interesting stuff, but it was kind of like, we forked it.

00:13:24.660 --> 00:13:26.360
Here's a sort of interesting thing we built.

00:13:26.360 --> 00:13:27.360
Take it or leave it.

00:13:27.360 --> 00:13:28.060
Take some ideas.

00:13:28.060 --> 00:13:28.780
Off it goes.

00:13:28.780 --> 00:13:36.040
It's really different to say where like the next time you just apt upgrade or brew, upgrade your Python, it just gets better.

00:13:36.040 --> 00:13:37.740
Chocolatey upgrade, however you do it, right?

00:13:37.740 --> 00:13:38.300
Yeah, definitely.

00:13:38.300 --> 00:13:42.060
So yeah, the 3.11 changes already, I think, could benefit everybody.

00:13:42.060 --> 00:13:48.700
And getting people onto the newest version of Python is definitely going to help everyone in the long term anyway, because it's got a list of other cool features.

00:13:48.700 --> 00:13:57.040
It's pretty remarkable that after 30 years, you can make one of these big step changes of that significant of a performance improvement.

00:13:57.040 --> 00:13:57.600
Yeah, definitely.

00:13:57.820 --> 00:14:02.520
Yeah, it's great to have a dedicated team working on this, but I mean, they're not the only people working on it.

00:14:02.520 --> 00:14:07.840
There are engineers from all over and other core developers working on contributions and stuff like that.

00:14:07.840 --> 00:14:12.840
But it's good that we can sponsor a full-time team to work just on this specific area.

00:14:12.840 --> 00:14:15.640
So Guido is kind of coordinating that.

00:14:15.800 --> 00:14:20.380
And a lot of the ideas come from Mark Shannon's plan that was on the podcast last year.

00:14:20.380 --> 00:14:24.360
Do you know any of the story around like the no-gil type of stuff?

00:14:24.360 --> 00:14:24.820
Yeah.

00:14:24.820 --> 00:14:27.280
There was Eric Snow's sub-interpreters.

00:14:27.280 --> 00:14:30.100
There was like Sam Gross' actual no-gil stuff.

00:14:30.300 --> 00:14:37.760
Yeah, there was actually an open space at PyCon on that specific topic and performance in general.

00:14:37.760 --> 00:14:47.040
And Sam Gross is there, as well as the Cinder team, the team that works on Pyodide, and a lot of other core developers.

00:14:47.040 --> 00:14:49.220
And that was discussed in detail.

00:14:49.220 --> 00:15:01.140
I know that from what I've heard, I think Sam Gross is still working on his no-gil branch and trying to break it down into smaller chunks that can be merged, like smaller pieces that can be merged individually.

00:15:01.140 --> 00:15:05.460
Because there's quite a number of changes in order to get that whole thing done.

00:15:05.460 --> 00:15:12.400
But it's still carrying on because it was targeted against what was now an older version of Python than as Python continues.

00:15:12.400 --> 00:15:13.400
Like 3.8 or something like that.

00:15:13.400 --> 00:15:13.660
Yeah.

00:15:13.660 --> 00:15:17.400
So Cinder, I think, was 3.8 and they're trying to get it to 3.9.

00:15:17.580 --> 00:15:22.700
But yeah, as Python continues to march forward, it gets harder and harder to upstream those things.

00:15:22.700 --> 00:15:22.940
Yeah.

00:15:22.940 --> 00:15:24.040
Still very exciting.

00:15:24.040 --> 00:15:24.500
Yeah.

00:15:24.500 --> 00:15:31.900
So the reason I ask is, you know, the work that Vito and Mark and team are doing is sort of orthogonal to that no-gil work, right?

00:15:31.900 --> 00:15:35.900
Like this is, a lot of stuff he's working on is just make it run faster single core.

00:15:35.900 --> 00:15:41.600
And then if you could unlock it for multi-core and each core, like it's a really nice multiplicative thing.

00:15:41.600 --> 00:15:47.540
You could easily see Python 20, 40 times faster if you could say, well, you can scale it across 10 cores.

00:15:47.540 --> 00:15:48.820
And it got four times faster.

00:15:48.820 --> 00:15:49.120
Yeah.

00:15:49.120 --> 00:15:51.080
So Eric's still working on his sub-interpreters.

00:15:51.080 --> 00:15:55.280
Mark is conceptually looking through a JIT specification.

00:15:55.280 --> 00:16:02.760
And they're working through specialized compilation as well at the moment, which is partially coming out in 3.11, but then more of that coming out in 3.12.

00:16:02.760 --> 00:16:03.160
Amazing.

00:16:03.160 --> 00:16:07.020
So yeah, it's going to just leaps and bounds, I think, in terms of performance difference.

00:16:07.020 --> 00:16:07.860
That's so exciting.

00:16:08.380 --> 00:16:11.420
Last thing to ask on this topic, and then we'll get to the main topic.

00:16:11.420 --> 00:16:12.000
Pidgin.

00:16:12.000 --> 00:16:17.860
Pidgin is somewhere involved in this performance thing, your JIT thing that we've had you on the show before to speak about.

00:16:17.860 --> 00:16:21.380
And so is that involved in any way, or is it sort of a parallel story?

00:16:21.380 --> 00:16:23.560
Yeah, I'm sharing some of that with the team.

00:16:23.920 --> 00:16:31.100
So things that I learned in Pidgin that worked, what made a difference, and especially in the JIT, like where there were gains to be made.

00:16:31.100 --> 00:16:38.640
My desire, really, is that the learnings from Pidgin can be part of the future of CPython, and then Pidgin isn't required.

00:16:38.640 --> 00:16:48.240
So if CPython gets its own JIT, and if some of the other stuff that Pidgin could do was part of CPython, then I think that's a win-win, because you don't have to install something separately.

00:16:48.240 --> 00:16:52.620
If you just get the performance gains out of the box, then that's a win for everyone.

00:16:52.620 --> 00:16:53.560
Yeah, absolutely.

00:16:53.560 --> 00:16:54.160
Cool.

00:16:54.160 --> 00:16:58.000
Well, that's really encouraging to hear all those improvements coming.

00:16:58.000 --> 00:16:58.560
Awesome.

00:16:58.560 --> 00:16:58.880
Thanks.

00:16:58.880 --> 00:17:05.520
Well, let's start off our conversation here by just talking about deploying to the cloud, right?

00:17:05.520 --> 00:17:09.820
I mean, your goal really is to make deploying to Azure awesome.

00:17:09.820 --> 00:17:10.200
Yeah.

00:17:10.200 --> 00:17:13.900
But let's just take a step back and talk about deploying to the cloud.

00:17:14.200 --> 00:17:21.520
You know, when people talk about deployment, well, let's just say they have a FastAPI, Flask Django, whatever app has a database, they've developed it.

00:17:21.520 --> 00:17:24.440
And usually it's a huge gap to go from.

00:17:24.440 --> 00:17:28.740
Well, I got it to work on my machine using SQLite and the tutorial.

00:17:28.740 --> 00:17:30.160
Now I need it to run.

00:17:30.160 --> 00:17:35.520
And it all said, well, you need to learn about SSL and servers and Nginx and all these things.

00:17:35.520 --> 00:17:36.820
You're like, whoa, whoa, whoa.

00:17:36.820 --> 00:17:38.040
I don't even know Linux.

00:17:38.040 --> 00:17:40.080
This is like a big step to take.

00:17:42.080 --> 00:17:45.060
This portion of Talk Python To Me is brought to you by Sentry.

00:17:45.060 --> 00:17:47.940
How would you like to remove a little stress from your life?

00:17:47.940 --> 00:17:53.920
Do you worry that users may be encountering errors, slowdowns, or crashes with your app right now?

00:17:53.920 --> 00:17:56.960
Would you even know it until they sent you that support email?

00:17:56.960 --> 00:18:01.740
How much better would it be to have the error or performance details immediately sent to you,

00:18:01.740 --> 00:18:07.380
including the call stack and values of local variables and the active user recorded in the report?

00:18:07.380 --> 00:18:10.800
With Sentry, this is not only possible, it's simple.

00:18:10.800 --> 00:18:14.360
In fact, we use Sentry on all the Talk Python web properties.

00:18:14.360 --> 00:18:20.920
We've actually fixed a bug triggered by a user and had the upgrade ready to roll out as we got the support email.

00:18:20.920 --> 00:18:22.900
That was a great email to write back.

00:18:22.900 --> 00:18:26.280
Hey, we already saw your error and have already rolled out the fix.

00:18:26.280 --> 00:18:27.700
Imagine their surprise.

00:18:27.700 --> 00:18:29.920
Surprise and delight your users.

00:18:29.920 --> 00:18:33.980
Create your Sentry account at talkpython.fm/sentry.

00:18:34.180 --> 00:18:41.000
And if you sign up with the code talkpython, all one word, it's good for two free months of Sentry's business plan,

00:18:41.000 --> 00:18:45.660
which will give you up to 20 times as many monthly events as well as other features.

00:18:45.660 --> 00:18:50.060
Create better software, delight your users, and support the podcast.

00:18:50.600 --> 00:18:55.040
Visit talkpython.fm/sentry and use the coupon code talkpython.

00:18:57.640 --> 00:19:04.320
How do you guys, Shane, how do you think about sort of the spectrum of options and how people are doing it?

00:19:04.320 --> 00:19:11.040
It's interesting because when you're creating that, you know, on your own machine, that's the environment, right, that you have to worry about.

00:19:11.040 --> 00:19:19.060
And even when we are deploying to on-prem machines, at least we could walk over and touch the, you know, for you rack that was there.

00:19:19.060 --> 00:19:21.260
We knew kind of what it was running on.

00:19:21.500 --> 00:19:21.740
Right.

00:19:21.740 --> 00:19:24.860
And a lot of times you plugged into, somebody had a database for you.

00:19:24.860 --> 00:19:25.320
Yeah.

00:19:25.320 --> 00:19:27.420
You ask them to create the database.

00:19:27.420 --> 00:19:28.060
Right.

00:19:28.060 --> 00:19:34.580
They ask you, you plead for a database to be set up and they give you a connection string and then that's that, right?

00:19:34.580 --> 00:19:37.220
You know, here's your connection string and you're on your way.

00:19:37.220 --> 00:19:41.420
I think the thought of now is, you know, how do I set this?

00:19:41.420 --> 00:19:42.680
How do I provision it?

00:19:42.680 --> 00:19:48.800
How do I deploy my code to the stuff that I've now provisioned there?

00:19:48.800 --> 00:19:55.200
How do I make all the connections between my front end and my middle tier and my, my backend stuff?

00:19:55.200 --> 00:20:02.220
How do I secure that with all of my environment variables and connection strings and, you know, monitoring is there.

00:20:02.220 --> 00:20:08.540
I mean, then how do I just, you know, as a developer for me, I go, that's a great, I want to do that one time.

00:20:08.540 --> 00:20:11.640
And then really, I just want to change my code and check in my code.

00:20:11.640 --> 00:20:11.980
Right.

00:20:11.980 --> 00:20:13.200
I just kind of want it to run.

00:20:13.200 --> 00:20:13.700
Yeah.

00:20:13.700 --> 00:20:14.400
That's for me.

00:20:14.420 --> 00:20:16.020
That's, I want to get to that point.

00:20:16.020 --> 00:20:26.740
And I think if, even if I have a very few amount of components, I've had meetings at companies that lasted three or four weeks, just talking about how are we going to set all this stuff up?

00:20:26.740 --> 00:20:27.300
You know?

00:20:27.480 --> 00:20:30.980
And the promise of the cloud is, hey, we can do this super fast.

00:20:30.980 --> 00:20:32.900
And sometimes that's not so much true.

00:20:32.900 --> 00:20:34.240
You know, it's still very challenging.

00:20:34.240 --> 00:20:34.640
Yeah.

00:20:34.640 --> 00:20:42.520
Previously it was, I need a server in our data center to be provisioned and we got to order it from Dell or wherever and wait for it to go.

00:20:42.520 --> 00:20:47.120
And now it's really easy to go to the cloud and get it, but there's a lot of decisions to make.

00:20:47.120 --> 00:20:49.220
Is it, are we getting VMs?

00:20:49.220 --> 00:20:54.640
And then it's my job to run shell scripts to set up Nginx and other things.

00:20:54.640 --> 00:20:55.680
How do I scale?

00:20:55.680 --> 00:20:57.540
What's the topography of that?

00:20:57.540 --> 00:21:01.340
How do I set that up for possibly what if we need to scale the web end or whatever?

00:21:01.860 --> 00:21:05.220
Maybe we use Docker, maybe we use a platform as a service, right?

00:21:05.220 --> 00:21:09.200
Like that could be a long conversation because ultimately it's somebody's responsibility.

00:21:09.200 --> 00:21:15.840
If it doesn't, if it doesn't work out right, they're going, you know, you're going to have to come in on the weekend and fix it.

00:21:15.840 --> 00:21:16.120
Yeah.

00:21:16.120 --> 00:21:18.340
Or be at least responsible to make sure it keeps running.

00:21:18.340 --> 00:21:18.580
Right.

00:21:18.580 --> 00:21:18.820
Yeah.

00:21:18.820 --> 00:21:19.840
Who do I call when it breaks?

00:21:19.840 --> 00:21:20.840
Yeah, exactly.

00:21:20.840 --> 00:21:21.520
Okay.

00:21:21.520 --> 00:21:25.020
So where are you seeing people who you're talking to a lot going?

00:21:25.020 --> 00:21:31.380
I mean, we've got, I think on one far end, like at the very far end, like if you turn it to either negative one or 11,

00:21:31.460 --> 00:21:34.060
depending on which side you consider this to be on, bare metal.

00:21:34.060 --> 00:21:42.160
That's very rare these days, but VMs and then Docker, Kubernetes, platform as a service, maybe, maybe some more functions.

00:21:42.160 --> 00:21:42.600
Yeah.

00:21:42.600 --> 00:21:43.060
Yeah.

00:21:43.060 --> 00:21:44.040
Functions live in there.

00:21:44.040 --> 00:21:44.260
Yeah.

00:21:44.260 --> 00:21:44.740
VMs.

00:21:44.740 --> 00:21:45.860
Usually 100% alone, but.

00:21:45.860 --> 00:21:51.520
I think VMs are still very popular with, with some companies who are just trying to get to the cloud.

00:21:51.520 --> 00:21:52.040
Right.

00:21:52.100 --> 00:21:55.640
It's very easy to kind of park your car in somebody else's garage.

00:21:55.640 --> 00:21:55.900
Right.

00:21:55.900 --> 00:21:57.140
I think that's okay.

00:21:57.140 --> 00:21:57.580
It's there.

00:21:57.580 --> 00:22:05.540
Well, it's, yeah, it solves the biggest problem is how do I get a reliable internet connection that's fast and a server and network infrastructure that I don't have to take care of.

00:22:05.540 --> 00:22:05.700
Yeah.

00:22:05.700 --> 00:22:10.340
I think those are still, it's still very, it's a very viable option for some folks.

00:22:10.340 --> 00:22:18.100
The PaaS option is, again, most companies can still run a very sophisticated system on PaaS.

00:22:18.100 --> 00:22:27.940
The one thing that I'm seeing right now is that companies are wanting to, in small, even small companies, or even they hear Kubernetes, they hear the promise of it.

00:22:28.060 --> 00:22:30.640
It's scalability, it's responsive, it's self-repairing.

00:22:30.640 --> 00:22:31.940
Zero downtime.

00:22:31.940 --> 00:22:32.840
Yeah, no downtime.

00:22:32.840 --> 00:22:33.740
Scale to zero.

00:22:33.740 --> 00:22:37.160
Like all the, all the buzziness that comes with it.

00:22:37.160 --> 00:22:42.940
And, you know, there's the memes that go around with, you know, the tiny box on a tractor trailer.

00:22:42.940 --> 00:22:44.260
Like I put my blog on Kubernetes.

00:22:44.260 --> 00:22:48.100
You don't need it, but everybody wants it and they're not sure why.

00:22:48.100 --> 00:22:55.760
And then it's just cost prohibitive in both manpower and management and cognitive load and all of the things.

00:22:56.300 --> 00:22:58.120
So there's that aspect of it.

00:22:58.120 --> 00:23:00.820
We want to find a place that is somewhere in between.

00:23:00.820 --> 00:23:05.840
Like what if I could have all the promise of Kubernetes, but not have to learn Kubernetes, right?

00:23:05.840 --> 00:23:09.940
And that's another thing that we're talking about with things like Azure Container Apps.

00:23:09.940 --> 00:23:10.500
Right.

00:23:10.500 --> 00:23:13.840
And being able to have kind of best of both worlds.

00:23:13.840 --> 00:23:14.200
Right.

00:23:14.200 --> 00:23:24.780
And looking forward, I don't want to get into it yet, but just to give people a preview is you guys have built a CLI tools for Python and some templates that kind of help people realize that goal.

00:23:24.780 --> 00:23:31.660
Much more quickly than just, all right, well, I guess I'm going to set up a Kubernetes cluster and nodes and all that kind of stuff.

00:23:31.660 --> 00:23:31.900
Yeah.

00:23:31.900 --> 00:23:32.280
Yeah.

00:23:32.280 --> 00:23:32.820
Okay.

00:23:32.820 --> 00:23:35.520
Well, Docker is an interesting one, right?

00:23:35.520 --> 00:23:37.740
To do Kubernetes, you got to do Docker, right?

00:23:37.740 --> 00:23:39.240
Or you got to do containers at least.

00:23:39.240 --> 00:23:42.240
There's the look how easy it is to run Docker.

00:23:42.780 --> 00:23:47.420
I just, you know, get the image, Docker run, off it goes.

00:23:47.420 --> 00:23:51.160
Unless you've got multiple tiers like many apps do, right?

00:23:51.160 --> 00:23:58.940
I've got like a database layer and maybe a background worker service for like emails and other long running jobs.

00:23:58.940 --> 00:24:01.600
And then all of a sudden coordination that becomes really hard.

00:24:01.760 --> 00:24:01.900
Yeah.

00:24:01.900 --> 00:24:08.100
I'd say that like kind of where people start off with containerization is the Python app itself.

00:24:08.640 --> 00:24:15.160
So the Python code, whether that's in like a Whiskey application or using ASCII or something.

00:24:15.160 --> 00:24:18.000
So that's like Django, Flask, FastAPI.

00:24:18.000 --> 00:24:21.740
So like running that in a container is a great place to start.

00:24:22.060 --> 00:24:24.220
But hardly ever is that the whole application.

00:24:24.220 --> 00:24:32.400
You know, just Flask and Django alone, you need some sort of web app at the front end, like a HTTP server, like Nginx or something.

00:24:32.400 --> 00:24:35.280
And then you need the distribution to Whiskey.

00:24:35.280 --> 00:24:43.940
So you need Genicorn or Yuvicorn or Hypercorn or one of the other corns to connect between the HTTP front end and the back.

00:24:43.940 --> 00:24:50.780
And then once you've got that in place, you're like, okay, I need to configure my SSL certificates and my DNS and stuff.

00:24:50.980 --> 00:24:52.240
So you can do that.

00:24:52.240 --> 00:24:56.660
But I think people start to try and try to jam everything into one container.

00:24:56.660 --> 00:24:57.260
Yeah.

00:24:57.260 --> 00:24:58.200
And that's where it kind of gets.

00:24:58.200 --> 00:25:00.120
Until it absolutely explodes.

00:25:00.120 --> 00:25:01.940
You're like, all right, it just won't take it anymore.

00:25:01.940 --> 00:25:02.200
Right.

00:25:02.200 --> 00:25:03.280
But preserve that.

00:25:03.280 --> 00:25:05.600
Just call run on it as long as you can.

00:25:05.600 --> 00:25:05.800
Right.

00:25:05.800 --> 00:25:06.080
Yeah.

00:25:06.080 --> 00:25:07.360
People I imagine are trying.

00:25:07.360 --> 00:25:07.580
Yeah.

00:25:07.580 --> 00:25:07.860
Yeah.

00:25:07.860 --> 00:25:09.800
And they're not supposed to be persistent.

00:25:09.800 --> 00:25:16.960
Like, you know, containers are supposed to be immutable, but you can attach storage to them, which is where it gets tricky with databases.

00:25:16.960 --> 00:25:24.680
Because really running something like Postgres and Docker, you can, but like, it's not going to be particularly fast.

00:25:24.680 --> 00:25:30.080
And you've got all these extra challenges of if the image stops, then what did you just lose?

00:25:30.080 --> 00:25:36.180
So, yeah, I think containerization is great to get some of the Python environment complexities.

00:25:36.440 --> 00:25:39.100
Like, you know, you've got a virtual environment to configure.

00:25:39.100 --> 00:25:40.580
How is that installed?

00:25:40.580 --> 00:25:41.720
What version of Python?

00:25:41.720 --> 00:25:47.880
So, there's like all the bits of Python that are specific to getting the Python app running consistently in one place and another.

00:25:47.880 --> 00:25:49.540
So, Docker is great for that.

00:25:49.540 --> 00:25:51.580
Containerizing is great for that.

00:25:51.700 --> 00:25:56.940
But you often find yourself needing more than one container, which is where things start to get complicated.

00:25:56.940 --> 00:26:00.400
Because then it's like, okay, I've got Redis in there.

00:26:00.400 --> 00:26:03.600
I've got, I want to run Nginx in one container.

00:26:03.600 --> 00:26:05.520
I want to run my app in another.

00:26:05.520 --> 00:26:09.220
So, then how do you like coordinate all that stuff?

00:26:09.220 --> 00:26:10.140
Right.

00:26:10.340 --> 00:26:13.780
And just how do I keep them connected, right?

00:26:13.780 --> 00:26:19.300
Because in regular non-Docker world, you just say my Redis string connection string is this.

00:26:19.300 --> 00:26:21.960
My database connection string is that.

00:26:21.960 --> 00:26:28.560
Nginx says I route traffic over either this Unix socket or through this HTTP socket.

00:26:28.560 --> 00:26:34.040
But those are not stable as these Docker images come and go separately, right?

00:26:34.040 --> 00:26:35.780
It gets tricky to connect them still.

00:26:35.780 --> 00:26:38.360
Yeah, there's a connection and the coordination of it.

00:26:38.500 --> 00:26:42.380
And things like Docker Compose, I think, helps with that there.

00:26:42.380 --> 00:26:47.140
Anthony mentioned a very valid point around databases and containers.

00:26:47.140 --> 00:26:55.480
I think when container development started to kind of hockey stick a little bit, I can't tell you how many times I answered the question, should I run my database in a container?

00:26:55.480 --> 00:26:57.700
And I was like, well, no.

00:26:57.700 --> 00:27:00.480
And then it was like, well, why not?

00:27:00.480 --> 00:27:03.100
And I was like, okay, here's the 15 reasons why you should never do that.

00:27:03.100 --> 00:27:03.280
Yeah.

00:27:03.280 --> 00:27:07.840
And I go to my framework and write in the tutorial that shows me how to run Postgres.

00:27:07.980 --> 00:27:11.920
Yeah, it was more of a like, what happens when it dies?

00:27:11.920 --> 00:27:14.400
You know, and they go, oh, no, I mean, I lose my data.

00:27:14.400 --> 00:27:14.880
Yes.

00:27:14.880 --> 00:27:16.260
It says don't do that.

00:27:16.260 --> 00:27:25.480
But they serve very well for, you know, emulating those big cloud managed services like Redis and like, you know, Postgres and stuff like that.

00:27:25.520 --> 00:27:32.040
They would typically run in a managed service instead of trying to have your entire world, if you will, running on your local machine.

00:27:32.200 --> 00:27:35.540
And then the other part of that is how many is too many?

00:27:35.540 --> 00:27:44.260
If you, you know, the microservices type of, you know, scenario of are you going to run 200 individual containers on your local machine?

00:27:44.260 --> 00:27:48.100
There is a cap where it's just too much, you know?

00:27:48.240 --> 00:27:49.620
Yeah, yeah, for sure.

00:27:49.620 --> 00:27:58.360
And we're even seeing some sort of swinging of the pendulum, I guess you would call it, back to articles like, give me my monolith back.

00:27:58.360 --> 00:28:01.620
Life just got too hard.

00:28:01.840 --> 00:28:06.580
Now, you know, my personal philosophy, and I'm not suggesting anyone else has to adopt it.

00:28:06.580 --> 00:28:20.580
But when I think about these things like microservices versus monoliths and Docker and Kubernetes versus more simple things is I try to keep the complex parts in the areas that I'm really good at and not push them to areas that I have a little experience with.

00:28:20.580 --> 00:28:29.500
Like, I don't have a great DevOps background, so I don't want to push tons of the complexity to DevOps and keep the code simple because I can handle complex code, but I can't handle complex DevOps.

00:28:29.500 --> 00:28:29.880
Yeah.

00:28:29.880 --> 00:28:31.020
Not right now anyway, you know?

00:28:31.100 --> 00:28:34.840
So for me, I kind of try to think of the balance of like, what works for me, you know?

00:28:34.840 --> 00:28:44.620
I literally saw an example where somebody was saying, I manage all of my configuration in its own repo, and then that sucks into my DevOps pipeline.

00:28:44.620 --> 00:28:45.980
I was like, what is happening?

00:28:45.980 --> 00:28:49.720
I'm not even going to talk about that.

00:28:49.720 --> 00:28:51.800
You know, I'm sure that works for you.

00:28:51.800 --> 00:28:58.760
But like you said, unless you really understand that level of, you know, complexity, you know, it's no thanks.

00:28:58.760 --> 00:29:03.080
If you specialize in that area, then maybe that's exactly your secret sauce.

00:29:03.080 --> 00:29:03.640
Yeah, yeah.

00:29:03.640 --> 00:29:09.320
But if you don't, don't like see someone else be doing that and go, I should just do that because it's working for them.

00:29:09.320 --> 00:29:13.280
Like maybe, but it's not a clear, I should just go that way, I think is the story.

00:29:13.280 --> 00:29:20.520
Yeah, and I think just like in a coding world, like we can use things like, you know, interfaces and polymorphism to the nth degree.

00:29:20.520 --> 00:29:25.980
And for a simplistic programmer, you know, examples, they're going, why are you doing that?

00:29:25.980 --> 00:29:27.860
Because I can just do it in a single file.

00:29:27.860 --> 00:29:28.340
Thanks.

00:29:28.340 --> 00:29:28.980
Exactly.

00:29:29.500 --> 00:29:33.640
Why do we have like dependency injection registries when it's 50 lines long?

00:29:33.640 --> 00:29:34.660
Like I really just don't.

00:29:34.660 --> 00:29:34.900
Yeah.

00:29:34.900 --> 00:29:35.420
It's just not.

00:29:35.420 --> 00:29:36.500
It's hello world, man.

00:29:36.500 --> 00:29:37.780
Yeah, exactly.

00:29:37.780 --> 00:29:38.400
Exactly.

00:29:38.400 --> 00:29:39.580
It's just a manuscript script.

00:29:39.580 --> 00:29:39.880
Right.

00:29:39.960 --> 00:29:40.240
All right.

00:29:40.240 --> 00:29:46.780
So maybe that probably sets the stage a little bit for the work that you two have been doing in this project we're going to talk about.

00:29:46.780 --> 00:29:49.860
But one more predecessor, bit of history.

00:29:49.860 --> 00:30:02.360
So one of the notable things about the Azure CLI, that is the CLI that everyone uses when they're not working in the crazy, belated, very full management portal, is built in Python, right?

00:30:02.360 --> 00:30:03.080
Yes, it is.

00:30:03.080 --> 00:30:03.480
Yes.

00:30:03.480 --> 00:30:06.360
But it's not that that actually makes any difference for Python people.

00:30:06.360 --> 00:30:08.260
It's just an interesting detail.

00:30:08.260 --> 00:30:18.120
But that one is not focused as much on helping developers get their code out as maybe helping IT DevOps side of the world, DevOps on Azure.

00:30:18.120 --> 00:30:18.640
Right.

00:30:18.640 --> 00:30:25.160
I would say its primary goal is referred to as kind of a management ops plane functionality.

00:30:25.160 --> 00:30:31.740
There is some capabilities in there for, you know, pushing up simplistic, you know, web applications.

00:30:31.740 --> 00:30:36.440
There's a web app command where I can kind of get a simple page up.

00:30:36.440 --> 00:30:39.520
And there's some static web apps capabilities within that command.

00:30:39.520 --> 00:30:50.280
But when you get into, you know, a full kind of job to be done for a developer focused type of activity that does not serve that type of persona.

00:30:50.280 --> 00:30:50.660
Sure.

00:30:50.660 --> 00:30:51.280
All right.

00:30:51.280 --> 00:30:53.760
Well, that brings us to your project.

00:30:53.760 --> 00:30:54.780
Does your project have a name?

00:30:55.040 --> 00:30:59.460
Just so people know, at the time of us talking about this, this is not yet released.

00:30:59.460 --> 00:30:59.760
Yeah.

00:30:59.760 --> 00:31:03.000
But at the time people are going to be listening to it, it will be released.

00:31:03.000 --> 00:31:03.420
And so.

00:31:03.420 --> 00:31:04.140
Yeah, sure.

00:31:04.140 --> 00:31:05.760
I'm kind of behind the scenes.

00:31:05.760 --> 00:31:09.820
Maybe I can pull up your screen here and start from there.

00:31:09.820 --> 00:31:13.880
We'll call it the like lowercase Azure developer CLI.

00:31:13.880 --> 00:31:14.220
Okay.

00:31:14.320 --> 00:31:16.880
Because if it's uppercase, I think that means it has a name.

00:31:16.880 --> 00:31:20.100
So we'll say it's the lowercase Azure developer CLI.

00:31:20.100 --> 00:31:21.920
It's a standalone install.

00:31:21.920 --> 00:31:26.300
Command is AZD or AZD, depending on where you're from.

00:31:26.300 --> 00:31:28.120
Don't don't alienate Anthony.

00:31:28.120 --> 00:31:28.560
Yeah.

00:31:28.560 --> 00:31:31.220
Much of the other rest of the English speaking world.

00:31:31.220 --> 00:31:31.680
Yeah.

00:31:31.680 --> 00:31:32.980
Everywhere but the US.

00:31:33.980 --> 00:31:40.380
And its primary goal is to, you know, make it easy for developers to get up and running

00:31:40.380 --> 00:31:46.560
with both infrastructure and code, you know, in Azure based on at least initially, we've

00:31:46.560 --> 00:31:54.020
got some out of the box templates to help establish kind of a getting started kind of to do app,

00:31:54.020 --> 00:32:00.740
which at least in this particular example, we have a to do application that's got a Python

00:32:00.740 --> 00:32:06.020
FastAPI middle tier with a React JS front end.

00:32:06.020 --> 00:32:12.040
And then the back end is supported with Azure Cosmos DB with Mongo API.

00:32:12.040 --> 00:32:12.560
Right.

00:32:12.560 --> 00:32:19.340
So the way it's going to go now is it will have the Mongo API, but Mongo, the Mongo API can be pointed

00:32:19.340 --> 00:32:22.520
at Cosmos DB, your document database in Azure, right?

00:32:22.520 --> 00:32:22.980
Correct.

00:32:22.980 --> 00:32:23.420
Correct.

00:32:23.420 --> 00:32:23.800
Correct.

00:32:23.800 --> 00:32:26.620
Let me ask another really quick question on that.

00:32:26.620 --> 00:32:30.000
What's the interaction with the Mongo API?

00:32:30.000 --> 00:32:31.820
Like, is there an ODM they're using?

00:32:31.820 --> 00:32:34.500
Is it just PyMongo or rather motor or something like that?

00:32:34.500 --> 00:32:34.700
Yeah.

00:32:34.700 --> 00:32:36.740
This app was built within ODM.

00:32:36.740 --> 00:32:37.460
It was built with Beanie.

00:32:37.460 --> 00:32:38.200
I love Beanie.

00:32:38.200 --> 00:32:42.720
I've, I converted the talk Python.fm and Python bytes.fm over to it.

00:32:42.720 --> 00:32:47.180
The really big one left for me is the training site, which is massive, but it's, it's getting

00:32:47.180 --> 00:32:48.280
some Beanie on it as well.

00:32:48.280 --> 00:32:48.600
Yeah.

00:32:48.660 --> 00:32:54.680
So for like a fully async ASCII app on FastAPI, Beanie is a great option because it's

00:32:54.680 --> 00:32:59.960
like async from end to end and it uses the async motor client for talking to Mongo.

00:32:59.960 --> 00:33:00.280
Yeah.

00:33:00.280 --> 00:33:01.600
So yeah, it's super fast.

00:33:01.600 --> 00:33:06.020
So that's what we've built for the to-do app, which is like the demo application.

00:33:08.540 --> 00:33:11.520
This portion of talk Python to me is sponsored by NordVPN.

00:33:11.520 --> 00:33:16.560
I've been a pain and happy NordVPN customer for over a year now.

00:33:16.560 --> 00:33:21.400
So when they approached us to become a sponsor of the podcast, I was excited because it's

00:33:21.400 --> 00:33:23.560
a product I've already been recommending.

00:33:23.920 --> 00:33:28.860
I use NordVPN almost universally throughout the day on all my devices, whether it's my

00:33:28.860 --> 00:33:34.480
Mac, my iPhone, or my iPad, I enable the auto connect feature and Nord keeps my connection

00:33:34.480 --> 00:33:36.200
protected and ad free.

00:33:36.200 --> 00:33:41.080
I'm sure you've heard that VPNs can keep your traffic private on public networks.

00:33:41.080 --> 00:33:42.180
And that's true.

00:33:42.180 --> 00:33:44.480
But let me tell you why I use NordVPN.

00:33:44.480 --> 00:33:46.280
Privacy and malware protection.

00:33:46.280 --> 00:33:47.600
First, privacy.

00:33:47.600 --> 00:33:50.380
Ad companies are slowly eroding our privacy.

00:33:50.920 --> 00:33:55.880
Shadow profiles are being built for you and being built for me by combining tracking scripts,

00:33:55.880 --> 00:33:57.960
ISP data, and through data brokers.

00:33:57.960 --> 00:34:01.560
If these were just being used for commercial ads, it'd be one thing.

00:34:01.560 --> 00:34:06.820
But we've all heard stories about how groups have been targeted to affect negative social

00:34:06.820 --> 00:34:07.320
outcomes.

00:34:07.320 --> 00:34:09.060
Think Cambridge Analytica.

00:34:09.060 --> 00:34:15.160
With Nord's built-in network-wide ad blocking and IP hiding, you'll limit the data that all

00:34:15.160 --> 00:34:16.680
of these players get to collect on you.

00:34:16.680 --> 00:34:20.800
What's so sweet about using Nord for this is it works across all of your apps.

00:34:20.800 --> 00:34:26.780
Not just a browser plugin, but even native apps on your phone can't contact or load most

00:34:26.780 --> 00:34:27.140
ads.

00:34:27.140 --> 00:34:30.600
These same ad networks have been hijacked to deliver malware.

00:34:30.600 --> 00:34:35.100
Nord also includes network-level malware protection as an added layer of safety.

00:34:35.100 --> 00:34:36.880
And Nord has a great offer for you.

00:34:36.880 --> 00:34:43.480
Use talkpython.fm/NordVPN to get a massive discount on a two-year plan that includes a free

00:34:43.480 --> 00:34:43.780
month.

00:34:43.780 --> 00:34:45.160
Nord is also risk-free.

00:34:45.280 --> 00:34:49.380
There's literally no risk to you with their 30-day money-back guarantee.

00:34:49.380 --> 00:34:50.180
Give it a try.

00:34:50.180 --> 00:34:52.300
And if, like me, you love it, great.

00:34:52.300 --> 00:34:57.680
If you don't, they'll issue a refund and you can pretend the entire situation never happened.

00:34:57.680 --> 00:35:03.340
Say no to being manipulated by ad companies and enjoy the free and open internet on all of

00:35:03.340 --> 00:35:03.800
your devices.

00:35:04.340 --> 00:35:09.000
Visit talkpython.fm/NordVPN to get your subscription started today.

00:35:09.000 --> 00:35:11.640
Yeah.

00:35:11.640 --> 00:35:15.360
So let me see if I can summarize this for folks before we dive into more detail.

00:35:15.360 --> 00:35:19.160
Basically, you guys have built this full stack-ish.

00:35:19.160 --> 00:35:20.420
I guess full stack fits.

00:35:20.420 --> 00:35:28.520
Full stack, FastAPI, document, database, JavaScript front-end app that sort of natively integrates

00:35:28.520 --> 00:35:31.300
in the ways that you would expect it to in Azure.

00:35:31.300 --> 00:35:36.460
Not just you can get it up there and get it to run, but it's got different sections.

00:35:36.460 --> 00:35:38.420
It uses a hosted database.

00:35:38.420 --> 00:35:40.240
It integrates with CICD.

00:35:40.240 --> 00:35:43.240
It has tests that plug into all those kinds of things and so on.

00:35:43.240 --> 00:35:46.920
And so you can take that and sort of publish that to Azure.

00:35:46.920 --> 00:35:50.880
But then, of course, you can just use it as a prototype to say, well, we don't need to do,

00:35:50.880 --> 00:35:51.780
we need this other thing.

00:35:51.780 --> 00:35:53.140
So we'll swap out, whatever.

00:35:53.140 --> 00:35:53.540
Yeah.

00:35:53.540 --> 00:35:53.880
Right?

00:35:53.880 --> 00:35:54.360
Something like that.

00:35:54.360 --> 00:35:54.660
Yeah.

00:35:54.660 --> 00:35:57.020
I would say there's a couple of key components.

00:35:57.600 --> 00:35:59.960
You know, we do all of our commands.

00:35:59.960 --> 00:36:01.560
Again, it's command line based.

00:36:01.560 --> 00:36:05.880
We focus on a CLI first approach to this for a couple of reasons.

00:36:05.880 --> 00:36:11.300
A, it feels natural for a lot of developers who kind of are on a terminal constantly, but

00:36:11.300 --> 00:36:17.940
also allows if VS Code wants to build an experience on top of it, if PyTorch wants to build an experience

00:36:17.940 --> 00:36:21.700
on top of it, they can, you know, because they just call into those same hooks.

00:36:21.700 --> 00:36:22.940
But also...

00:36:22.940 --> 00:36:26.740
Can we consume the CLI as a Python library?

00:36:26.740 --> 00:36:33.420
Well, that's a good question because we are also looking at making this an extension inside

00:36:33.420 --> 00:36:35.720
of the core Azure CLI.

00:36:35.720 --> 00:36:38.700
So we have actually wrapped this as a Python extension.

00:36:38.700 --> 00:36:39.060
Okay.

00:36:39.060 --> 00:36:39.660
For them.

00:36:39.660 --> 00:36:40.140
Interesting.

00:36:40.140 --> 00:36:40.540
Yeah.

00:36:40.540 --> 00:36:43.480
I mean, you can always sub process it around all day you want, but...

00:36:43.480 --> 00:36:44.660
It's written in Go.

00:36:44.660 --> 00:36:45.100
Okay.

00:36:45.100 --> 00:36:45.480
Got it.

00:36:45.480 --> 00:36:45.780
Yeah.

00:36:45.780 --> 00:36:47.520
So it's A, it's super lightweight.

00:36:47.520 --> 00:36:49.400
It's like five and a half megs.

00:36:49.400 --> 00:36:50.100
It's really small.

00:36:50.100 --> 00:36:53.000
And once you have the binary, you have it.

00:36:53.000 --> 00:36:55.960
That is one of the true beauties of Go.

00:36:56.160 --> 00:36:56.440
Yeah.

00:36:56.440 --> 00:36:56.700
Yeah.

00:36:56.700 --> 00:37:01.380
The other parts of it, like you mentioned, if there's pieces of this that, of the app,

00:37:01.380 --> 00:37:07.900
if I back up one section here, is that a lot of the samples that we come across, they are

00:37:07.900 --> 00:37:08.720
a hello world.

00:37:08.720 --> 00:37:10.740
They're a very simplistic app.

00:37:10.740 --> 00:37:15.040
And once you kind of go through the process, when you're all done with it, you're like, okay,

00:37:15.040 --> 00:37:15.680
this is great.

00:37:15.680 --> 00:37:17.420
I built my hello world app.

00:37:17.540 --> 00:37:18.160
Now what?

00:37:18.160 --> 00:37:18.520
Right.

00:37:18.640 --> 00:37:25.640
This is an opinionated structure that allows you to swap out components, build upon it.

00:37:25.640 --> 00:37:29.220
Like I can take out the FastAPI if I want to use Flask or Django or whatever.

00:37:29.220 --> 00:37:31.080
I can swap that out and do it.

00:37:31.080 --> 00:37:32.960
Swap in Postgres if I'd like.

00:37:33.180 --> 00:37:35.120
We have an infrastructure as code.

00:37:35.120 --> 00:37:37.360
Right now we're using Bicep to do that.

00:37:37.360 --> 00:37:41.740
And in the future we'll support things like Terraform and other IAC providers.

00:37:41.740 --> 00:37:44.980
And that's just how we would swap out any of the infrastructure.

00:37:44.980 --> 00:37:45.500
Right.

00:37:45.700 --> 00:37:51.740
This particular sample, we are targeting the Azure container apps as a host, as our target

00:37:51.740 --> 00:37:52.180
host.

00:37:52.180 --> 00:37:53.980
But we do support paths.

00:37:53.980 --> 00:37:56.300
And in the future also things like Kubernetes.

00:37:56.300 --> 00:37:56.780
Yep.

00:37:56.780 --> 00:38:00.520
And also in terms of the, how cloud native is it?

00:38:00.520 --> 00:38:02.020
If you don't scroll away just yet, come back.

00:38:02.020 --> 00:38:02.920
Okay, sorry.

00:38:02.920 --> 00:38:04.120
Yeah, no worries.

00:38:04.120 --> 00:38:09.740
In terms of just how cloud native it is, like how much does it reach into all those things?

00:38:09.740 --> 00:38:12.180
Basically for areas that are interesting.

00:38:12.180 --> 00:38:13.880
Azure container apps, right?

00:38:14.000 --> 00:38:16.300
So you've got, Anthony, let me know what this sounds like.

00:38:16.300 --> 00:38:19.180
You've got maybe an Nginx type of container.

00:38:19.180 --> 00:38:25.000
And then you've got one that runs UVicorn, FastAPI, Workers.

00:38:25.000 --> 00:38:25.520
Yeah.

00:38:25.520 --> 00:38:27.740
There's two containers in this example.

00:38:27.740 --> 00:38:32.060
But like, yeah, Azure container apps is more where you've got a collection of containers that

00:38:32.060 --> 00:38:33.200
form an application.

00:38:33.200 --> 00:38:35.680
Like if you put that in a Docker Compose or something.

00:38:35.680 --> 00:38:36.240
Yeah.

00:38:36.240 --> 00:38:39.200
And then we kind of spin those up for you and manage that for you.

00:38:39.200 --> 00:38:42.240
So you don't have to think of or plan about things like Kubernetes.

00:38:42.860 --> 00:38:47.840
And it does SSL certificates and DNS and everything else for you.

00:38:47.840 --> 00:38:48.520
So nice.

00:38:48.520 --> 00:38:50.460
So you don't have to worry about let's encrypt and stuff.

00:38:50.460 --> 00:38:50.720
Yeah.

00:38:50.720 --> 00:38:51.020
Yeah.

00:38:51.020 --> 00:38:51.840
Does all that for you.

00:38:51.840 --> 00:38:52.420
So nice.

00:38:52.420 --> 00:38:55.100
And then that hosted Cosmos DB.

00:38:55.480 --> 00:38:55.880
Yeah.

00:38:55.880 --> 00:38:59.820
So Cosmos DB is the document database on Azure.

00:38:59.820 --> 00:39:03.520
And when you deploy it, you can choose which API you want it to have.

00:39:03.520 --> 00:39:06.540
You can pick the Cosmos API or you can pick a Mongo API.

00:39:06.540 --> 00:39:12.740
So if you pick the Mongo API, then you can use your existing Mongo tools and clients with it.

00:39:12.740 --> 00:39:14.240
Like Beanie and so on.

00:39:14.240 --> 00:39:14.380
Yeah.

00:39:14.460 --> 00:39:14.720
Exactly.

00:39:14.720 --> 00:39:15.940
And that would just work.

00:39:15.940 --> 00:39:16.300
Okay.

00:39:16.300 --> 00:39:17.940
And then monitoring.

00:39:17.940 --> 00:39:19.020
Azure Monitor.

00:39:19.020 --> 00:39:21.240
This is like Sentry type stuff, right?

00:39:21.240 --> 00:39:22.100
Like is it up?

00:39:22.100 --> 00:39:23.380
Is it running into errors?

00:39:23.380 --> 00:39:26.540
Does it also do performance or just sort of error?

00:39:26.540 --> 00:39:26.820
Yeah.

00:39:26.820 --> 00:39:28.460
It will do all of your calls.

00:39:28.460 --> 00:39:32.820
Basically it does tracing between all of the different containers or different components

00:39:32.820 --> 00:39:33.460
of the app.

00:39:33.460 --> 00:39:35.900
You can look at telemetry between those calls.

00:39:35.900 --> 00:39:38.300
You know, how long is a call taking to the database?

00:39:38.300 --> 00:39:42.780
You know, you can look at the individual calls, see where the errors are, trace those down to

00:39:42.780 --> 00:39:49.600
like it was a get call on, you know, the to-dos collection and actually look at those and

00:39:49.600 --> 00:39:51.560
then introspect those inside of Azure Monitor.

00:39:51.560 --> 00:39:52.600
So it's pretty detailed.

00:39:52.600 --> 00:39:52.860
Yeah.

00:39:52.860 --> 00:39:53.480
That's really nice.

00:39:53.480 --> 00:39:53.760
Yeah.

00:39:53.760 --> 00:39:58.220
I use that stuff all the time for my sites, you know, if I run into a problem, probably

00:39:58.220 --> 00:40:00.060
the first place I go is the actual log.

00:40:00.060 --> 00:40:03.800
But if it's not super clear right away, I'm like, all right, let's go to the monitoring and

00:40:03.800 --> 00:40:07.320
see the local variables and see what was going on for real.

00:40:07.320 --> 00:40:09.320
And then the last one is secrets.

00:40:09.320 --> 00:40:15.060
Like it is nice to just check in your API keys into Azure and to GitHub.

00:40:15.060 --> 00:40:17.720
I don't understand why I heard you're not supposed to.

00:40:17.720 --> 00:40:21.180
No, I understand why you're not supposed to.

00:40:21.180 --> 00:40:21.400
Yeah.

00:40:21.400 --> 00:40:21.800
Yeah.

00:40:22.280 --> 00:40:31.480
The Key Vault is really great in the sense of, yeah, this is kind of, it is the sauce, if you will, where we keep the connection string for the Mongo database.

00:40:31.480 --> 00:40:39.060
And then within the actual FastAPI app, we can then connect to the Key Vault to pull that out securely.

00:40:39.060 --> 00:40:46.200
And then really the nice thing about Key Vault is if we need to change it, we can just change that one key and not have to kind of redeploy all the other apps.

00:40:46.320 --> 00:40:46.800
It's just great.

00:40:46.800 --> 00:40:47.280
It's just great.

00:40:47.280 --> 00:40:59.560
And then from a local development story there, we use environment variables to have that locally as opposed to passing it around or keeping it in a GitHub repo, of course.

00:40:59.560 --> 00:41:00.020
Got it.

00:41:00.880 --> 00:41:07.160
The apps kind of like built in a way that we said, if we were building a production app, this is how we do it.

00:41:07.160 --> 00:41:18.460
So like Shane said, it's, it's the example app is opinionated because we've picked how we've configured Python version environments and how I've done the testing and how the ASCII configuration works and stuff like that.

00:41:18.520 --> 00:41:20.420
But it's done in a way that it's okay.

00:41:20.420 --> 00:41:24.020
This is a production style web app that we put together.

00:41:24.020 --> 00:41:28.880
And here's how you would deploy it using this new, the new AZD CLI.

00:41:28.880 --> 00:41:30.240
So the new Azure Dev CLI.

00:41:30.240 --> 00:41:34.760
And the other important thing is that you don't have to learn all these new concepts.

00:41:34.760 --> 00:41:40.480
So it's not like we've said, okay, we've got our own configuration language that we're going to throw at you.

00:41:40.480 --> 00:41:45.580
And we've got our own, you know, like here's a hundred YAML files you need to write or stuff like that.

00:41:46.000 --> 00:41:48.520
It's try to keep it as native as possible.

00:41:48.520 --> 00:41:55.500
So in the Python application, in the web app, then there's a Docker file and there's a pyproject.toml.

00:41:55.500 --> 00:41:59.040
And, you know, if you want to run the Docker file locally, you can do that.

00:41:59.040 --> 00:42:02.680
One of the opinions that you're, you're choosing is like use poetry, for example, right?

00:42:02.680 --> 00:42:02.880
Yeah.

00:42:02.880 --> 00:42:03.460
Yeah.

00:42:03.460 --> 00:42:03.680
Yeah.

00:42:03.680 --> 00:42:11.880
So using poetry to manage the dependencies and make those, I guess, pinning dependencies and making them between creating things like lock files.

00:42:11.880 --> 00:42:19.320
But also if you work on the repo, the demo repo in VS Code, you know, you can run and debug the app locally as well.

00:42:19.320 --> 00:42:21.960
So you don't have to figure out all the extra complexity.

00:42:21.960 --> 00:42:29.500
So, yeah, we kind of really thought, okay, let's write, you know, a production type application using all the normal tools we would use,

00:42:29.500 --> 00:42:33.720
which is like Docker files and pyproject.toml requirements files.

00:42:33.860 --> 00:42:37.040
And then on the front end app, like, you know, it's in React.

00:42:37.040 --> 00:42:41.020
So we've got our normal project and Node.js configuration and stuff.

00:42:41.020 --> 00:42:41.300
Right.

00:42:41.300 --> 00:42:42.340
All the NPM stuff.

00:42:42.340 --> 00:42:42.660
Yeah.

00:42:42.660 --> 00:42:50.960
And then what would the, what would the developer need to describe that in a way that then can be deployed up to the cloud and trying to make that as simple as possible?

00:42:50.960 --> 00:42:51.380
Sure.

00:42:51.380 --> 00:42:51.940
Yeah.

00:42:51.940 --> 00:42:54.180
So Shane, you spoke about Bicept.

00:42:54.180 --> 00:42:54.580
Right.

00:42:54.580 --> 00:42:55.980
As a way to get your things up.

00:42:55.980 --> 00:42:58.980
And I think it might be worth touching a little bit on the Bicept story.

00:42:58.980 --> 00:42:59.280
Sure.

00:42:59.280 --> 00:43:03.500
I mean, that's usually arm wrestling for me, but I'm thinking, no, no.

00:43:03.500 --> 00:43:06.940
Bicept, Bicept is, it's like Ansible or Terraform.

00:43:06.940 --> 00:43:07.260
Yeah.

00:43:07.260 --> 00:43:11.520
But it's, it's one of these, it's kind of a Azure native thing, right?

00:43:11.520 --> 00:43:12.280
For DevOps.

00:43:12.280 --> 00:43:18.300
Most Azure DevOps folks would understand if we said, hey, what's your arm template look like?

00:43:18.300 --> 00:43:19.780
Azure resource manager.

00:43:19.780 --> 00:43:20.620
Management template.

00:43:20.620 --> 00:43:21.020
Yes.

00:43:21.020 --> 00:43:21.300
Yeah.

00:43:21.300 --> 00:43:21.620
Management.

00:43:21.620 --> 00:43:26.240
Lots of JSON, a lot of JSON, thousands of lines of JSON.

00:43:26.640 --> 00:43:29.480
Not easy to write, read, or kind of understand.

00:43:29.480 --> 00:43:34.240
Bicept is a simpler format and kind of self-describing almost.

00:43:34.240 --> 00:43:41.400
So we use that right now to describe the resources that we're going to provision and deploy our app to.

00:43:41.400 --> 00:43:46.740
And in this particular case, in this template, we have a number of templates, but in this template,

00:43:46.740 --> 00:43:49.440
we're putting together a container registry.

00:43:49.840 --> 00:43:59.720
We're provisioning the container apps environments, you know, the web apps, the Mongo database, a lot of things that, you know, if you did those individually, it would take a lot of time to do.

00:43:59.720 --> 00:44:04.640
So we're doing that all as a part of the one single line command to do that.

00:44:04.640 --> 00:44:11.520
So we're looking at implementing, you know, other IAC providers like Terraform and Pulumi as well.

00:44:11.520 --> 00:44:18.520
And, you know, if that makes you happy in your place, you know, we're not hiding anything in what we're doing.

00:44:18.520 --> 00:44:25.260
We're more of an orchestrator of the tools instead of hiding some secret commands to make all this happen.

00:44:25.260 --> 00:44:29.200
We like folks to kind of see what the steps are to do it.

00:44:29.280 --> 00:44:33.480
We're just going to do the steps for you in a single press of the button, press the easy button, you know?

00:44:33.480 --> 00:44:33.800
Yeah.

00:44:33.800 --> 00:44:34.900
Yeah, absolutely.

00:44:34.900 --> 00:44:35.280
Right.

00:44:35.280 --> 00:44:35.840
That's great.

00:44:35.840 --> 00:44:41.700
So maybe, Anthony, it would be a good time for you to sort of talk us through some of the code and the projects,

00:44:41.700 --> 00:44:47.060
because I think that'll give people a sense of what they're getting in terms of what this app looks like.

00:44:47.060 --> 00:44:47.260
Yeah.

00:44:47.260 --> 00:44:55.260
So the demo app that we put together has got two main containers on the front end, which is the React.js web app,

00:44:55.320 --> 00:45:05.960
which is all running under Node 16, and then a FastAPI API, which does basically the middleware between the front end and the database in the back end.

00:45:05.960 --> 00:45:14.740
So the React.js one is an app that we wrote to demonstrate a lot of functionality and to-do management app, basically.

00:45:14.740 --> 00:45:17.460
But in terms of the FastAPI app, that...

00:45:17.460 --> 00:45:19.400
The canonical example that people may try.

00:45:19.400 --> 00:45:20.640
Yeah, exactly.

00:45:20.960 --> 00:45:24.040
And the FastAPI one is the one that I worked on with the team.

00:45:24.040 --> 00:45:31.060
And that's really kind of looking at, okay, if we did a modern Python application, how would we write it and how would we deploy it?

00:45:31.060 --> 00:45:35.720
And like I said, using poetry for requirements management and stuff.

00:45:35.720 --> 00:45:36.920
But you could use whatever.

00:45:36.920 --> 00:45:38.360
This is an example.

00:45:38.360 --> 00:45:39.900
You don't have to use poetry.

00:45:39.900 --> 00:45:45.380
But I'm just showing the latest approach and the latest design with the application.

00:45:45.900 --> 00:45:49.540
And then if you want to swap out or change bits of it, obviously you can do that.

00:45:49.540 --> 00:45:52.360
So yeah, the project itself has got a pyproject.toml.

00:45:52.360 --> 00:45:56.280
We're using FastAPI, Uvacorn, and then Beanie is the ODM.

00:45:56.280 --> 00:45:58.760
And then a nice package...

00:45:58.760 --> 00:46:02.460
Maybe just tell people real quick about just what Beanie is, just so that...

00:46:02.460 --> 00:46:06.120
I've had Rumin on the show before, but maybe not everyone knows.

00:46:06.120 --> 00:46:16.100
Yeah, so if you're working with FastAPI, often you would describe models that the API reads or writes or reflects using something like Pydantic.

00:46:16.100 --> 00:46:18.680
So these are kind of your data classes.

00:46:18.680 --> 00:46:28.760
So Beanie basically allows you to write Pydantic style models, data classes, and then read and write those from a Mongo database.

00:46:29.460 --> 00:46:37.100
So this app is basically written in a way that the to-do list items, the tasks and stuff like that, are all reflected in a models file.

00:46:37.100 --> 00:46:41.180
And then Beanie does the work of actually putting those in a database.

00:46:41.180 --> 00:46:43.140
So we have a to-do list.

00:46:43.140 --> 00:46:46.200
We can also do things like to-do items.

00:46:46.200 --> 00:46:53.380
And each of those are a document, but they're written in a way that's very similar, basically identical to how you'd write a Pydantic model.

00:46:53.380 --> 00:46:55.280
Beanie also allows you to...

00:46:55.280 --> 00:46:56.900
Right, just slightly different base class.

00:46:56.900 --> 00:47:02.940
Yeah, Beanie also allows you to lazily reflect Beanie models into Pydantic models.

00:47:02.940 --> 00:47:14.740
So when you're working with FastAPI, you can get all that nice functionality of using Pydantic, but you get a lot of the performance of basically trying to keep it as close to the actual document in Mongo as possible.

00:47:14.740 --> 00:47:24.540
So yeah, that's one big challenge people have to overcome when they use stuff like Pydantic, which is like, when do you put stuff into Pydantic models?

00:47:25.000 --> 00:47:34.200
Like if you're reading a thousand rows from the database and you're just going to give that straight to the user, there's no point in reflecting all that into Pydantic and then sending it back out again.

00:47:34.200 --> 00:47:36.280
Right, doing all the conversions or whatever craziness.

00:47:36.280 --> 00:47:36.480
Yeah.

00:47:36.480 --> 00:47:37.340
Yeah, or just slow it down.

00:47:37.340 --> 00:47:38.020
Yeah, okay, cool.

00:47:38.020 --> 00:47:46.420
And so this is a really good choice because it matches the native MongoDB API and it matches FastAPI on at least two levels.

00:47:46.420 --> 00:47:52.240
Pydantic models are all about driving the data exchange and the open API specification, which is fantastic.

00:47:52.240 --> 00:47:55.780
But then also Beanie is an async ODM.

00:47:56.140 --> 00:47:59.340
So what you do, it allows you to fully leverage the scalability of FastAPI.

00:47:59.340 --> 00:48:01.120
I think it's a great choice.

00:48:01.120 --> 00:48:03.360
It's a nice configuration and it's nice to run as well.

00:48:03.360 --> 00:48:04.300
It's pretty responsive.

00:48:04.300 --> 00:48:13.440
And then what we did on the app itself, so in FastAPI, a couple of things that you have to do are configuring cores, which is always fun.

00:48:13.440 --> 00:48:16.600
And then we've put tracing in the app as well.

00:48:16.600 --> 00:48:21.480
I just ran into a cores error on just an HTML file I opened.

00:48:21.480 --> 00:48:22.600
I'm like, there is no server.

00:48:22.600 --> 00:48:23.580
I can't do cores.

00:48:23.580 --> 00:48:24.540
Please don't do this.

00:48:24.540 --> 00:48:27.460
Yeah, it becomes a bit of a challenge.

00:48:27.460 --> 00:48:28.060
It does.

00:48:28.060 --> 00:48:33.900
So on FastAPI, we've been doing a lot of work over the last year on a project called OpenTelemetry.

00:48:33.900 --> 00:48:44.340
It's a cross-company open source collaboration to create basically a tracing and eventing framework across multiple languages.

00:48:44.660 --> 00:48:50.520
So you can use OpenTelemetry in Go, Rust, Python, and basically install.

00:48:50.520 --> 00:48:54.540
Does it connect into the thing that Shane was talking about with the Azure monitoring?

00:48:54.540 --> 00:48:55.240
Yeah, it does.

00:48:55.240 --> 00:48:58.300
And it also connects into a whole bunch of other monitoring tools.

00:48:58.300 --> 00:49:01.220
It's not the Azure monitoring library for Python.

00:49:01.220 --> 00:49:03.300
It is an agnostic library.

00:49:03.300 --> 00:49:03.700
Nice.

00:49:03.700 --> 00:49:05.780
Which is, it's got support for FastAPI.

00:49:05.780 --> 00:49:09.800
It also has support for lots of other Python components.

00:49:10.440 --> 00:49:23.060
So when you get the actual logging data, for example, if your app crashed or somebody made a request which gave a 500 error, in Azure Monitor, you get the full stack trace and you get all the events that led up to that as well.

00:49:23.060 --> 00:49:25.000
So it's not just a log file, basically.

00:49:25.000 --> 00:49:28.740
We're actually putting stuff in the Python app to get all the tracing information.

00:49:28.840 --> 00:49:35.100
You can also use it to see like performance regressions and like slow pages or slow requests.

00:49:35.100 --> 00:49:41.300
So in Azure Monitor, you can actually go and see what are like the slowest requests I've had to the application and what was the cause of that.

00:49:41.300 --> 00:49:41.740
Yeah.

00:49:41.740 --> 00:49:43.300
And none of that stuff is proprietary.

00:49:43.300 --> 00:49:46.760
It's all basically using OpenTelemetry, which is open source.

00:49:46.980 --> 00:49:49.920
But we have a special source is the exporter.

00:49:49.920 --> 00:49:53.300
So we export OpenTelemetry events to Azure Monitor.

00:49:53.300 --> 00:49:53.780
Okay.

00:49:53.780 --> 00:49:55.640
Yeah, this all looks super nice.

00:49:55.640 --> 00:49:59.560
And the reason I wanted you to talk through this is the project looks really nice.

00:49:59.560 --> 00:50:07.820
It looks like an app that I would like to use as a starting place for my final destination rather than just, oh, cool.

00:50:07.820 --> 00:50:09.940
There's a main.py or app.py.

00:50:09.940 --> 00:50:11.240
It's all just jammed in there.

00:50:11.240 --> 00:50:14.300
And like, you know, it feels like a good starting point.

00:50:14.540 --> 00:50:14.780
Yeah.

00:50:14.780 --> 00:50:18.480
And then, like I mentioned, like debugging is set up already.

00:50:18.480 --> 00:50:25.140
So yeah, in VS Code, you can either debug the React app or the API, the FastAPI app.

00:50:25.140 --> 00:50:27.640
And that will run the whole application locally.

00:50:27.640 --> 00:50:32.620
Does that run just on your local machine or does that like fire up the containers?

00:50:32.620 --> 00:50:34.180
It just runs on your local machine.

00:50:34.180 --> 00:50:36.860
So it would run FastAPI locally.

00:50:36.860 --> 00:50:37.940
I give that a thumbs up.

00:50:37.940 --> 00:50:38.900
Yeah, yeah.

00:50:38.900 --> 00:50:44.520
So if you wanted to, for example, debug the front end and it needs to get, just go start the back end and then go debug the front end.

00:50:44.520 --> 00:50:45.240
Something like that, right?

00:50:45.240 --> 00:50:45.460
Yeah.

00:50:45.460 --> 00:50:46.660
Just trying to keep it super simple.

00:50:46.660 --> 00:50:47.520
Yeah, no, that's good.

00:50:47.520 --> 00:50:50.780
And then we also wrote tests for both components.

00:50:50.780 --> 00:50:58.660
So yeah, the ToDo app comes with its own unit tests for FastAPI and then for the front end as well.

00:50:58.660 --> 00:51:01.500
And then all of that's set up in VS Code.

00:51:01.500 --> 00:51:03.540
Well, it's all, they're all pytest tests.

00:51:03.540 --> 00:51:05.800
So if you just want to run pytest over it, then you can.

00:51:05.800 --> 00:51:11.060
But yeah, asynchronous FastAPI tests are a bit fiddly to set up the first time.

00:51:11.160 --> 00:51:12.800
So we've done all that as a demo as well.

00:51:12.800 --> 00:51:13.580
Yeah, this is great.

00:51:13.580 --> 00:51:29.380
And one area that we haven't talked about yet, Shane, when you deploy this, and we can talk about how to do that in just a second, is that it automatically sets up, at least with one of those CLI commands, CI, CD, continuous integration and continuous delivery or deployment.

00:51:29.760 --> 00:51:36.260
And these tests that Anthony's talking about, these automatically just like start running on check-ins for you, right?

00:51:36.260 --> 00:51:39.460
Like that whole lifecycle is connected here.

00:51:39.460 --> 00:51:46.260
Yeah, it's, Anthony, I don't know if you could maybe scroll up and touch on the GitHub actions that are included there.

00:51:46.260 --> 00:51:54.960
So with every template that we're providing out of the box, we include the GitHub actions in order to run those.

00:51:54.960 --> 00:52:03.740
So on the builds, we'll actually provision, deploy, and we would include the test run as well as a part of the container build.

00:52:03.740 --> 00:52:09.740
If it's targeting containers or if it's paths, we would have the test command, which is not in this particular one.

00:52:09.740 --> 00:52:13.840
But it would be like AZD test would be the command that would run.

00:52:13.840 --> 00:52:17.240
It would run through all the testing that are in there depending on the platform.

00:52:17.240 --> 00:52:17.880
Yeah, that's great.

00:52:17.880 --> 00:52:19.860
So yeah, it gets us to that point.

00:52:19.860 --> 00:52:25.140
Like I said, as a developer, I just want to check in code and know that my tests are going to run.

00:52:25.140 --> 00:52:28.660
If they pass, it deploys to the environment that's specified.

00:52:28.660 --> 00:52:32.760
And it gets me to a happy place as a developer, you know?

00:52:32.760 --> 00:52:34.180
Right, right, right.

00:52:34.180 --> 00:52:35.700
You don't have to know about this stuff.

00:52:35.700 --> 00:52:38.840
And, you know, to some degree, that might not be 100% true, right?

00:52:38.840 --> 00:52:45.660
Like if your code is running somewhere, you need to have some level of understanding, even if you don't have to directly touch it.

00:52:45.660 --> 00:52:52.600
But I think one of the big benefits is for a lot of people, you can start running there and you can kind of grow into a better, deeper understanding.

00:52:52.600 --> 00:52:59.520
You don't have to like swallow the whole, I learned all of the Linux configuration all in one shot just to get it to even start, you know?

00:52:59.520 --> 00:52:59.840
Yeah.

00:52:59.840 --> 00:53:09.620
And I think it's important to mention a couple of times is that even though we have a command, like in order to get this whole architecture that Anthony just walked through,

00:53:09.620 --> 00:53:18.760
if I wanted to get this into Azure, I would just run AZD up and then pass in the name of the template repo, you know?

00:53:18.760 --> 00:53:22.620
And it would then deploy all of that and run it for me.

00:53:22.620 --> 00:53:23.140
Yeah, yeah.

00:53:23.140 --> 00:53:25.320
Let's talk about like, we've got the app.

00:53:25.320 --> 00:53:27.680
Anthony talked about running and developing it locally.

00:53:27.680 --> 00:53:28.080
Right.

00:53:28.080 --> 00:53:28.600
Now what?

00:53:28.600 --> 00:53:30.640
Like I actually want to get it up and running.

00:53:30.640 --> 00:53:31.680
I want CI, CD.

00:53:31.680 --> 00:53:32.960
I want all the things.

00:53:33.080 --> 00:53:33.240
Yeah.

00:53:33.240 --> 00:53:40.400
So if I started from nothing, if I was just opened up, you know, VS Code or my command line or whatever I'm in in a terminal,

00:53:40.400 --> 00:53:44.740
I could just run AZD up and then pass in a --template.

00:53:44.740 --> 00:53:50.400
And in this particular case, it would be like to do dash Python, ACA dash Mongo.

00:53:50.400 --> 00:53:51.040
Right.

00:53:51.040 --> 00:53:53.000
And that would clone that repo.

00:53:53.300 --> 00:54:07.480
It would then start to provision those resources on Azure, you know, based on your login to Azure and then use the BICEP infrastructure definitions to create that target host if it's PaaS or Azure container apps.

00:54:07.480 --> 00:54:16.300
And then build and deploy, you know, the API, the front end, and then make all those connections and so on as we walk through how that's all put together.

00:54:16.300 --> 00:54:16.660
Right.

00:54:16.740 --> 00:54:29.320
And so it's worth thinking about that, those BICEP DevOps commands and configuration, if you want a slight variation of what this gives you, you change the BICEP and then AZD up just uses your slight variation, right?

00:54:29.320 --> 00:54:30.540
Well, yeah, exactly.

00:54:30.540 --> 00:54:35.680
And, you know, one of the services that is very common to use, you know, in our, in our apps nowadays is Redis.

00:54:35.680 --> 00:54:47.240
Like if I want to add Redis and make a couple of changes, I could just put that definition in my BICEP code, add in the environment variables that are necessary to, you know, expose in my app and call up.

00:54:47.240 --> 00:54:53.320
And then we would then push them into Key Vault, you know, provision the service, redeploy the code.

00:54:53.320 --> 00:54:56.560
And hopefully if we typed it all right, it would happen right.

00:54:56.560 --> 00:54:56.900
Right.

00:54:56.900 --> 00:55:00.040
So that would be the way to do that for sure.

00:55:00.040 --> 00:55:09.680
If I run the AZD, you know, pipeline command and help that establish my GitHub repo and kick off those workflows in the GitHub actions.

00:55:09.680 --> 00:55:14.120
At that point, I could just make those changes to the BICEP files and check those in.

00:55:14.120 --> 00:55:16.540
And then the workflow would kick off that process for me.

00:55:16.540 --> 00:55:16.960
That's cool.

00:55:16.960 --> 00:55:19.820
Can I start from code and then do this?

00:55:19.820 --> 00:55:22.500
Or do I do the template to create the code and the GitHub repo?

00:55:22.500 --> 00:55:24.380
Like if I already have a GitHub repo, for example.

00:55:24.380 --> 00:55:25.740
Yeah, that's a good question.

00:55:25.740 --> 00:55:32.040
And we have some documentation and walkthroughs on how to, what we call Devify your project.

00:55:32.040 --> 00:55:37.000
And basically it will walk you through how to set up that an infra folder.

00:55:37.000 --> 00:55:41.300
That infra folder will contain the BICEP definitions.

00:55:41.300 --> 00:55:50.100
And we've got an Azure.yaml file, which will hold a couple of the kind of naming structures that we have as an opinionated way to name things.

00:55:50.100 --> 00:55:52.000
And then also set up that target host.

00:55:52.000 --> 00:55:57.140
Again, it's that PaaS or is it, you know, app service or is it container apps or AKS?

00:55:57.140 --> 00:55:58.480
So a little bit of setup.

00:55:58.480 --> 00:56:02.960
And then you can start using AZD up or AZD deploy.

00:56:02.960 --> 00:56:08.580
You just want to deploy the app to then, you know, take your code and push it onto the platform.

00:56:08.580 --> 00:56:09.320
Okay.

00:56:09.320 --> 00:56:10.580
That sounds really good.

00:56:10.580 --> 00:56:14.500
What about the, talk about the continuous delivery part.

00:56:14.500 --> 00:56:15.580
So I've got this created.

00:56:15.580 --> 00:56:16.520
I've got a GitHub repo.

00:56:16.520 --> 00:56:17.820
It's up and running.

00:56:17.900 --> 00:56:20.680
How do I associate a domain name, by the way, first?

00:56:20.680 --> 00:56:25.820
Well, the domain name, we would push it onto the, obviously onto Azure and then create that.

00:56:25.820 --> 00:56:26.900
Like your app.

00:56:26.900 --> 00:56:27.140
Yeah.

00:56:27.140 --> 00:56:29.800
Do it UID.Azure or something like that.

00:56:29.800 --> 00:56:30.100
Blah, blah, blah.

00:56:30.100 --> 00:56:32.020
Azure websites.net slash la, la, la.

00:56:32.020 --> 00:56:32.260
Yep.

00:56:32.320 --> 00:56:39.280
Then that would be part of that configuration inside of Azure portal or through the management

00:56:39.280 --> 00:56:45.000
plane where you'd actually kind of go through of associating your domain name with whatever

00:56:45.000 --> 00:56:45.940
your entry point is.

00:56:45.940 --> 00:56:48.780
In this case, it's going to be the React front end, right?

00:56:48.780 --> 00:56:53.420
So I would go into that particular app service and set that up with your DNS and such there.

00:56:53.520 --> 00:56:53.760
Yeah.

00:56:53.760 --> 00:56:58.660
You probably want to, you probably want the API if you want to surface an API out of fast

00:56:58.660 --> 00:56:58.960
API.

00:56:58.960 --> 00:56:59.340
Yeah.

00:56:59.340 --> 00:57:02.620
And then you want the React front end, obviously, for most people.

00:57:02.620 --> 00:57:02.920
Yeah.

00:57:02.920 --> 00:57:06.680
And you could add, if you want to get into things like that, one of the pieces you could

00:57:06.680 --> 00:57:11.820
add is things like Azure front door or, you know, API management or something like that

00:57:11.820 --> 00:57:13.880
in front of those components too.

00:57:13.880 --> 00:57:14.420
Okay.

00:57:14.420 --> 00:57:16.120
Well, that step is like a separate step.

00:57:16.120 --> 00:57:16.340
Yeah.

00:57:16.420 --> 00:57:20.560
You go in there and you configure it because how often do you really want to have a thing

00:57:20.560 --> 00:57:21.620
messing with your DNS?

00:57:21.620 --> 00:57:21.960
Yeah.

00:57:21.960 --> 00:57:23.180
As little as possible.

00:57:23.180 --> 00:57:24.220
It's a one-time shot.

00:57:24.220 --> 00:57:25.520
That's all I want to do with.

00:57:25.520 --> 00:57:25.780
Yeah.

00:57:25.780 --> 00:57:28.760
Please wait 24 to 48 hours for this to propagate.

00:57:28.760 --> 00:57:29.360
Like, no.

00:57:29.360 --> 00:57:30.640
You know, it's funny.

00:57:30.640 --> 00:57:33.660
I haven't had a DNS chain, knock wood.

00:57:33.660 --> 00:57:37.780
I haven't had a DNS chain to take longer than a few minutes nowadays, but.

00:57:37.780 --> 00:57:38.080
Yeah.

00:57:38.080 --> 00:57:39.520
It is a lot better than it used to be.

00:57:39.520 --> 00:57:40.780
I've done it.

00:57:40.780 --> 00:57:46.100
I just changed all of our email and stuff around and there's been a lot of MX records and the

00:57:46.100 --> 00:57:48.700
like verification keys and yeah, it's.

00:57:48.700 --> 00:57:51.300
No matter how many times you do it, you're sure you did it wrong.

00:57:51.300 --> 00:57:51.640
Yep.

00:57:51.640 --> 00:57:52.720
That's for sure.

00:57:52.720 --> 00:57:53.340
Yeah.

00:57:53.340 --> 00:57:53.560
All right.

00:57:53.560 --> 00:57:55.420
So back to my original train of thought.

00:57:55.420 --> 00:57:58.480
I was like, let's just sort of kind of wrap this up with the continuous delivery.

00:57:58.480 --> 00:57:59.900
I've got the app up.

00:57:59.900 --> 00:58:02.600
Now we know how to get the domain associated with it and whatnot.

00:58:02.600 --> 00:58:05.760
You know, presumably go and buy a domain wherever you buy domains.

00:58:05.760 --> 00:58:06.860
Point it at it.

00:58:06.860 --> 00:58:08.280
Let it map over.

00:58:08.280 --> 00:58:11.720
But then I make some changes and I get push a thing.

00:58:11.720 --> 00:58:12.900
What happens now?

00:58:12.900 --> 00:58:13.100
Yeah.

00:58:13.140 --> 00:58:17.700
If you set up your, your CI CD pipeline, it would then run through that same process.

00:58:17.700 --> 00:58:20.500
And we showed it in the GitHub actions here and talk through it.

00:58:20.500 --> 00:58:23.260
It would run your test, do the deployments.

00:58:23.260 --> 00:58:25.580
We do support multiple environments.

00:58:25.700 --> 00:58:32.060
So we can help set up a, like a dev or a QA environment as well, other than just a single.

00:58:32.060 --> 00:58:32.840
Like a staging.

00:58:32.840 --> 00:58:33.340
Yeah.

00:58:33.340 --> 00:58:34.580
Sort of thing that people can.

00:58:34.580 --> 00:58:34.940
Yeah.

00:58:34.940 --> 00:58:39.780
And then you could set up some processes, you know, within Azure, like, hey, this passes,

00:58:39.780 --> 00:58:45.460
let me do a, an IP switch or however you manage that in, in a platform based on your scenario.

00:58:45.640 --> 00:58:48.980
But yeah, we get to that point where we're just checking in code and having a positive track.

00:58:48.980 --> 00:58:49.060
Okay.

00:58:49.060 --> 00:58:51.920
And do you, what's the branching structure look like?

00:58:51.920 --> 00:58:56.240
If I just push domain, is that going to go live and I got to work on a dev branch to not

00:58:56.240 --> 00:58:56.560
do that?

00:58:56.560 --> 00:58:58.800
Or is there like a prod branch or?

00:58:58.800 --> 00:58:59.100
Yeah.

00:58:59.100 --> 00:59:00.480
You can set that up in your GitHub action.

00:59:00.480 --> 00:59:01.000
Right.

00:59:01.000 --> 00:59:01.220
Okay.

00:59:01.220 --> 00:59:03.700
Right now we have, the template is just going to work.

00:59:03.700 --> 00:59:05.220
If I don't do anything, what happens?

00:59:05.220 --> 00:59:06.460
It's main branch.

00:59:06.460 --> 00:59:08.300
Main branch goes straight to production.

00:59:08.300 --> 00:59:08.420
That's right.

00:59:08.420 --> 00:59:09.020
I love it.

00:59:09.120 --> 00:59:12.500
Y'all are just carefree to test for it.

00:59:12.500 --> 00:59:13.220
Do it live.

00:59:13.220 --> 00:59:14.840
The users are the testers.

00:59:14.840 --> 00:59:15.280
Let's go.

00:59:15.280 --> 00:59:16.080
Do it live.

00:59:16.080 --> 00:59:17.180
No.

00:59:17.180 --> 00:59:17.440
Okay.

00:59:17.440 --> 00:59:17.940
Got it.

00:59:17.940 --> 00:59:22.320
So you would just tweak your GitHub action Yable file and change your branch name or something?

00:59:22.320 --> 00:59:22.440
Yeah.

00:59:22.440 --> 00:59:26.540
You could set some conditionals in the GitHub action based on the environments that are coming

00:59:26.540 --> 00:59:26.760
in.

00:59:26.760 --> 00:59:26.980
Cool.

00:59:26.980 --> 00:59:28.400
Anthony, what were you going to say?

00:59:28.400 --> 00:59:28.900
Yeah.

00:59:28.900 --> 00:59:33.420
It assumes a single branch strategy, but I mean, or you can tell it to generate the template

00:59:33.420 --> 00:59:35.200
for you and you can put that template wherever.

00:59:35.380 --> 00:59:41.720
It's pretty easy nowadays to say with GitHub, you know, which branch and stuff this should

00:59:41.720 --> 00:59:45.360
apply for, or this pipeline should only run on pull requests.

00:59:45.360 --> 00:59:49.700
Or my recommendation to people is that you keep main highly protected.

00:59:49.700 --> 00:59:54.920
You don't let people push directly to main and it can only be merged into, and then it has

00:59:54.920 --> 00:59:55.960
to be reviewed and stuff.

00:59:55.960 --> 01:00:00.020
I think keeping a clean main branch is good strategy anyway.

01:00:00.020 --> 01:00:05.080
You can have a feature branch or release branch separately to that.

01:00:05.240 --> 01:00:09.200
So probably the main branch would be your dev, your sort of live dev environment.

01:00:09.200 --> 01:00:14.620
And then maybe you want a feature branch or release, so main release branch separately

01:00:14.620 --> 01:00:16.300
to that, but using the same templates.

01:00:16.300 --> 01:00:19.480
So all you're really changing is the targeted environment names.

01:00:19.480 --> 01:00:19.780
Yeah.

01:00:19.780 --> 01:00:20.180
Okay.

01:00:20.180 --> 01:00:21.180
That sounds like good advice.

01:00:21.180 --> 01:00:21.960
All right, guys.

01:00:21.960 --> 01:00:23.700
Well, we're getting a little short on time now.

01:00:23.700 --> 01:00:25.360
This looks like a really interesting project.

01:00:25.360 --> 01:00:31.160
I love the technical choices on the backend, you know, that you've made to sort of create

01:00:31.160 --> 01:00:32.520
building blocks for people.

01:00:32.520 --> 01:00:37.080
I guess we could wrap it up real quickly with, we've got this more DevOps-y management,

01:00:37.080 --> 01:00:40.360
IT-like CLI that people have used previously.

01:00:40.360 --> 01:00:45.160
If they're doing Python stuff and they kind of want this container-hosted world, this is

01:00:45.160 --> 01:00:47.540
probably the recommended way, at least from you all.

01:00:47.540 --> 01:00:47.800
Yeah.

01:00:47.800 --> 01:00:48.120
Yeah.

01:00:48.120 --> 01:00:50.140
If you want to get started and...

01:00:50.140 --> 01:00:50.500
Fantastic.

01:00:50.500 --> 01:00:51.060
All right.

01:00:51.060 --> 01:00:52.300
Anything else you want to add about this?

01:00:52.300 --> 01:00:53.840
I'd like to call it a show.

01:00:53.840 --> 01:00:56.060
No, nothing from my side.

01:00:56.060 --> 01:00:59.140
A template that you can kind of build upon.

01:00:59.140 --> 01:00:59.700
Shane is frozen.

01:00:59.700 --> 01:01:00.480
Something that you want.

01:01:00.480 --> 01:01:00.900
Oh, no.

01:01:00.900 --> 01:01:01.560
Shane is frozen.

01:01:01.560 --> 01:01:02.600
A production-style app.

01:01:02.600 --> 01:01:03.820
This is a great way to get started.

01:01:03.820 --> 01:01:06.460
I thought he was just getting tired because it's late where he is, but no.

01:01:06.460 --> 01:01:07.320
All right.

01:01:07.320 --> 01:01:12.120
Well, Anthony, I'm sure this is not going to come as a big surprise given all of your current

01:01:12.120 --> 01:01:12.880
work and stuff.

01:01:13.000 --> 01:01:16.980
But I'll ask you the final two questions first, and then we'll hopefully get Shane

01:01:16.980 --> 01:01:17.560
back shortly.

01:01:17.560 --> 01:01:18.820
Good to write some Python code?

01:01:18.820 --> 01:01:20.860
What editor are you using these days still?

01:01:20.860 --> 01:01:21.880
Definitely VS Code.

01:01:21.880 --> 01:01:23.120
But tell people about the font.

01:01:23.120 --> 01:01:25.920
Comic Sans Mono.

01:01:25.920 --> 01:01:29.060
So it's a Comic Sans font, but in Mono space.

01:01:29.060 --> 01:01:29.440
Awesome.

01:01:29.440 --> 01:01:30.500
Is it a nerd font?

01:01:30.500 --> 01:01:31.000
There is.

01:01:31.000 --> 01:01:32.620
I think there's a nerd font flavor of it.

01:01:32.620 --> 01:01:36.720
I haven't configured my terminal to use Comic Mono yet because I think that'd be going

01:01:36.720 --> 01:01:37.200
a bit far.

01:01:37.200 --> 01:01:38.800
It actually looks...

01:01:38.800 --> 01:01:39.360
It'd be madness.

01:01:39.360 --> 01:01:40.600
It looks better than you think.

01:01:40.600 --> 01:01:41.220
It looks good.

01:01:41.220 --> 01:01:44.060
It looks way better than you would think Comic Sans looks.

01:01:44.060 --> 01:01:44.800
And it's really readable.

01:01:44.800 --> 01:01:46.120
I would totally be down to it.

01:01:46.120 --> 01:01:47.940
I had to make a DNS joke.

01:01:47.940 --> 01:01:49.580
You did.

01:01:49.580 --> 01:01:51.760
You took yourself offline, but you're back.

01:01:51.760 --> 01:01:55.040
And just in time to answer the question, have you written some Python code?

01:01:55.040 --> 01:01:56.360
What editor are you using these days?

01:01:56.360 --> 01:01:57.380
I use VS Code.

01:01:57.380 --> 01:01:58.040
Right on.

01:01:58.040 --> 01:01:58.340
I don't know.

01:01:58.340 --> 01:02:00.200
I use VS Code for taking notes.

01:02:00.200 --> 01:02:01.300
I mean, it's just...

01:02:01.300 --> 01:02:01.440
Yeah.

01:02:01.440 --> 01:02:03.620
It's Markdown or if it's in Mark...

01:02:03.620 --> 01:02:06.460
Everything's in Markdown or whatever code, so...

01:02:06.460 --> 01:02:06.640
Yeah.

01:02:06.640 --> 01:02:08.580
All my notes these days are in Markdown.

01:02:08.580 --> 01:02:11.300
If not like a Google Doc, Zoho Doc, something like that.

01:02:11.300 --> 01:02:12.340
It's definitely in Markdown.

01:02:12.340 --> 01:02:13.020
It was like...

01:02:13.020 --> 01:02:14.560
I think it was like three years ago.

01:02:14.560 --> 01:02:18.460
I was in a meeting with Chris Diaz, who's the kind of owner of VS Code.

01:02:18.460 --> 01:02:21.720
And he pulled up his screen and he started taking notes in VS Code.

01:02:21.720 --> 01:02:23.140
And I was like, I'm an idiot.

01:02:23.140 --> 01:02:24.400
I should be doing that.

01:02:25.160 --> 01:02:25.600
Yes.

01:02:25.600 --> 01:02:26.940
Just go to the bottom right.

01:02:26.940 --> 01:02:28.720
Change that little language to Markdown.

01:02:28.720 --> 01:02:29.280
You're good to go.

01:02:29.280 --> 01:02:29.760
That's right.

01:02:29.760 --> 01:02:30.560
Absolutely.

01:02:30.560 --> 01:02:31.580
Notepad.

01:02:31.580 --> 01:02:32.740
Notepad is dead to me.

01:02:32.740 --> 01:02:33.500
Yeah.

01:02:33.500 --> 01:02:36.200
The problem I have at the moment is I've probably got too many extensions.

01:02:36.200 --> 01:02:38.720
I just realized this morning I have 99 now.

01:02:38.720 --> 01:02:42.020
So I'm nearly at three figures.

01:02:42.020 --> 01:02:47.480
There might not be room at the UI to just display that number.

01:02:47.480 --> 01:02:49.020
It might stop at two digits.

01:02:49.020 --> 01:02:49.960
Just kidding.

01:02:49.960 --> 01:02:50.560
Yeah.

01:02:50.560 --> 01:02:51.040
That's awesome.

01:02:51.040 --> 01:02:52.800
I tell you, I didn't even...

01:02:52.800 --> 01:02:54.180
The first bit of...

01:02:54.180 --> 01:02:54.840
Here's some irony.

01:02:54.840 --> 01:02:57.760
The first time I ever wrote Python was...

01:02:57.760 --> 01:02:59.980
It feels like 100 years ago, but...

01:02:59.980 --> 01:03:08.220
Was actually to write a Sublime add-in to enable .NET IntelliSense for .NET Core.

01:03:08.220 --> 01:03:12.120
So I was on the OmniSharp team to write the add-ins for that.

01:03:12.120 --> 01:03:18.460
So completely like not Python related, but I was using Python to enable .NET and Sublime back in the day.

01:03:18.460 --> 01:03:19.420
That's cool.

01:03:19.420 --> 01:03:19.680
Yeah.

01:03:19.680 --> 01:03:21.000
So very meta.

01:03:21.000 --> 01:03:21.040
Yeah.

01:03:21.040 --> 01:03:22.700
Using the editor to write the editor.

01:03:22.700 --> 01:03:23.340
All right.

01:03:23.340 --> 01:03:25.100
And then notable PyPI package.

01:03:25.100 --> 01:03:26.920
Anything you want to give a shout out to?

01:03:26.920 --> 01:03:29.200
I mean, we definitely mentioned a bunch of fun ones, but...

01:03:29.200 --> 01:03:29.320
Yeah.

01:03:29.320 --> 01:03:32.420
I'd say Beanie Perflint, which is one of mine.

01:03:32.420 --> 01:03:34.620
But yeah, check out Perflint if you want to.

01:03:34.620 --> 01:03:36.200
And check out Beanie as well.

01:03:36.200 --> 01:03:42.000
It's a really nice approach to document databases in asynchronous front ends.

01:03:42.000 --> 01:03:42.320
Yeah.

01:03:42.320 --> 01:03:44.040
Especially if you're doing FastAPI.

01:03:44.040 --> 01:03:52.000
I was going to say, I used to struggle with document databases and Pydantic and Beanie made my life a whole lot better.

01:03:52.000 --> 01:03:52.520
Yeah.

01:03:52.520 --> 01:03:53.900
I think we all concur.

01:03:53.900 --> 01:03:54.420
Beanie.

01:03:54.420 --> 01:03:56.420
Definitely a good one.

01:03:56.420 --> 01:03:56.440
Good call.

01:03:56.440 --> 01:03:56.800
Cool.

01:03:56.800 --> 01:03:57.880
Yeah, absolutely.

01:03:57.880 --> 01:03:58.780
All right, guys.

01:03:58.780 --> 01:03:59.960
Final call to action.

01:03:59.960 --> 01:04:01.600
People want to get started with this.

01:04:01.600 --> 01:04:03.400
Once it's out, what do they do?

01:04:03.400 --> 01:04:04.820
When they're listening to this, it'll be out.

01:04:04.820 --> 01:04:06.040
So not to confuse folks.

01:04:06.720 --> 01:04:09.860
I've got a link that folks can go and check this out.

01:04:09.860 --> 01:04:11.560
It'll obviously be in the show notes.

01:04:11.560 --> 01:04:12.920
It's a short link.

01:04:12.920 --> 01:04:17.300
It's an aka.ms and it's try-aca-python.

01:04:17.300 --> 01:04:17.720
Right on.

01:04:17.720 --> 01:04:23.100
And they can see the project template, sign up for our preview, check out the repos, et cetera.

01:04:23.100 --> 01:04:23.500
Cool.

01:04:23.500 --> 01:04:24.900
Yeah, it looks like you need a project.

01:04:24.900 --> 01:04:28.000
And definitely people are doing Azure.

01:04:28.000 --> 01:04:31.600
It supercharges you into a ton of best practices.

01:04:31.600 --> 01:04:32.340
Yeah, for sure.

01:04:32.340 --> 01:04:33.280
Well, nice work.

01:04:33.280 --> 01:04:34.880
And thanks for joining me to talk about it.

01:04:34.880 --> 01:04:35.540
Yeah, I appreciate the time.

01:04:35.540 --> 01:04:35.800
Thanks.

01:04:35.800 --> 01:04:36.500
Yeah, you bet.

01:04:36.500 --> 01:04:36.920
Bye.

01:04:36.920 --> 01:04:40.860
This has been another episode of Talk Python To Me.

01:04:40.860 --> 01:04:42.660
Thank you to our sponsors.

01:04:42.660 --> 01:04:44.280
Be sure to check out what they're offering.

01:04:44.280 --> 01:04:45.700
It really helps support the show.

01:04:45.700 --> 01:04:48.020
Take some stress out of your life.

01:04:48.020 --> 01:04:53.500
Get notified immediately about errors and performance issues in your web or mobile applications with

01:04:53.500 --> 01:04:53.800
Sentry.

01:04:53.800 --> 01:04:58.800
Just visit talkpython.fm/sentry and get started for free.

01:04:58.800 --> 01:05:02.380
And be sure to use the promo code talkpython, all one word.

01:05:02.780 --> 01:05:08.260
Say no to being manipulated by ad companies and enjoy the free and open internet.

01:05:08.260 --> 01:05:10.540
Get NordVPN on all your devices.

01:05:10.540 --> 01:05:12.860
Set auto-connect and relax.

01:05:12.860 --> 01:05:19.300
Visit talkpython.fm/NordVPN to get your risk-free subscription started today.

01:05:19.300 --> 01:05:20.300
Want to level up your Python?

01:05:20.300 --> 01:05:21.180
Want to level up your Python?

01:05:21.180 --> 01:05:25.220
We have one of the largest catalogs of Python video courses over at Talk Python.

01:05:25.220 --> 01:05:30.400
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:05:30.800 --> 01:05:33.080
And best of all, there's not a subscription in sight.

01:05:33.080 --> 01:05:35.980
Check it out for yourself at training.talkpython.fm.

01:05:35.980 --> 01:05:37.880
Be sure to subscribe to the show.

01:05:37.880 --> 01:05:40.660
Open your favorite podcast app and search for Python.

01:05:40.660 --> 01:05:41.960
We should be right at the top.

01:05:41.960 --> 01:05:47.140
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:05:47.140 --> 01:05:51.340
and the direct RSS feed at /rss on talkpython.fm.

01:05:52.280 --> 01:05:54.760
We're live streaming most of our recordings these days.

01:05:54.760 --> 01:05:58.180
If you want to be part of the show and have your comments featured on the air,

01:05:58.180 --> 01:06:02.600
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:06:02.600 --> 01:06:04.440
This is your host, Michael Kennedy.

01:06:04.440 --> 01:06:05.740
Thanks so much for listening.

01:06:05.740 --> 01:06:06.920
I really appreciate it.

01:06:06.920 --> 01:06:08.820
Now get out there and write some Python code.

01:06:08.820 --> 01:06:29.380
I'll see you next time.

