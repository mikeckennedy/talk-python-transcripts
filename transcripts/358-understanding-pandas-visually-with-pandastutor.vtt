WEBVTT

00:00:00.001 --> 00:00:06.140
Pandas is a great library that allows you to accomplish a ton of filtering and processing in condensed syntax.

00:00:06.140 --> 00:00:08.640
But how well do you understand what's happening?

00:00:08.640 --> 00:00:17.720
Sam Lau and Philip Guo built a great site to help us visually explore how Pandas is processing your dataset with your specific syntax.

00:00:17.720 --> 00:00:21.120
It's called Pandas Tutor, and Sam is here to tell us all about it.

00:00:21.120 --> 00:00:27.860
This is Talk Python To Me, episode 358, recorded February 28, 2022.

00:00:27.860 --> 00:00:44.340
Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:44.340 --> 00:00:46.060
This is your host, Michael Kennedy.

00:00:46.060 --> 00:00:52.240
Follow me on Twitter where I'm @mkennedy and keep up with the show and listen to past episodes at talkpython.fm.

00:00:52.240 --> 00:00:55.300
And follow the show on Twitter via at Talk Python.

00:00:55.520 --> 00:00:58.960
We've started streaming most of our episodes live on YouTube.

00:00:58.960 --> 00:01:06.480
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:06.480 --> 00:01:11.400
This episode is brought to you by SignalWire and the Stack Overflow podcast.

00:01:11.400 --> 00:01:14.500
Please check out what they're both offering during their segments.

00:01:14.500 --> 00:01:15.880
It really helps support the show.

00:01:15.880 --> 00:01:20.600
Transcripts for this and all of our episodes are brought to you by Assembly AI.

00:01:20.980 --> 00:01:23.260
Do you need a great automatic speech-to-text API?

00:01:23.260 --> 00:01:25.800
Get human-level accuracy in just a few lines of code.

00:01:25.800 --> 00:01:28.540
Visit talkpython.fm/assemblyai.

00:01:28.540 --> 00:01:31.000
Sam, welcome to Talk Python To Me.

00:01:31.000 --> 00:01:31.860
It's great to be back.

00:01:31.860 --> 00:01:33.060
It's good to have you back.

00:01:33.060 --> 00:01:38.380
Previously, you were here with Philip Guel and your research.

00:01:38.380 --> 00:01:40.260
Is he your advisor at UCSD?

00:01:40.260 --> 00:01:41.700
Yeah, Philip's my advisor.

00:01:41.700 --> 00:01:43.000
Philip is a great guy.

00:01:43.060 --> 00:01:45.720
He's been on the show multiple times before.

00:01:45.720 --> 00:01:54.520
And you all were here previously to talk about, you had analyzed an insane number of notebook environments, right?

00:01:54.520 --> 00:01:56.400
Yeah, something like 60 of them.

00:01:56.400 --> 00:01:57.600
Yeah, like 60.

00:01:57.600 --> 00:02:01.120
So people think of JupyterLab and maybe Google CoLab.

00:02:01.120 --> 00:02:02.500
And then is there another one?

00:02:02.500 --> 00:02:03.580
Maybe 60.

00:02:03.580 --> 00:02:04.880
It's insane, right?

00:02:04.880 --> 00:02:05.940
There's just a long list.

00:02:05.940 --> 00:02:10.940
We have like a giant table in that paper that takes up one whole page and it's a lot going on.

00:02:10.940 --> 00:02:13.180
That was really fun to have you on to talk about that.

00:02:13.180 --> 00:02:16.020
And I suspect that that list is longer, not shorter now.

00:02:16.020 --> 00:02:17.160
Of course, of course.

00:02:17.160 --> 00:02:19.040
It just is growing.

00:02:19.040 --> 00:02:21.620
How about we just do a quick sync up?

00:02:21.620 --> 00:02:22.580
What have you been up to?

00:02:22.580 --> 00:02:23.440
When was that?

00:02:23.440 --> 00:02:26.080
That was about a year, year and a half ago.

00:02:26.080 --> 00:02:26.760
So it's been a while.

00:02:26.760 --> 00:02:27.500
What have you been up to?

00:02:27.500 --> 00:02:29.300
You still over at UCSD?

00:02:29.300 --> 00:02:31.460
Yeah, so I'm still at UCSD.

00:02:31.780 --> 00:02:36.060
UCSD being University of California, San Diego, for those who are not hanging out on the West

00:02:36.060 --> 00:02:39.020
Coast, the U.S. and are familiar with all the UC acronyms.

00:02:39.020 --> 00:02:40.360
Yeah, UC San Diego.

00:02:40.360 --> 00:02:41.520
Here in sunny San Diego.

00:02:41.520 --> 00:02:45.060
I'm doing my PhD in cognitive science.

00:02:45.060 --> 00:02:49.860
But what that really means for me is most of my research is in a field called human-computer

00:02:49.860 --> 00:02:54.460
interaction, which is the way I describe it is more or less the study of user interfaces,

00:02:54.460 --> 00:02:56.220
how people interact with computers.

00:02:57.060 --> 00:03:02.540
And for me specifically, how people interact, how people use computers to teach and learn

00:03:02.540 --> 00:03:03.940
programming in data science.

00:03:03.940 --> 00:03:05.420
Yeah, that sounds super fun.

00:03:05.420 --> 00:03:08.580
There's just so many more interfaces these days.

00:03:08.580 --> 00:03:12.460
You know, human-computer interfaces used to be just like, well, how do you use Windows?

00:03:12.460 --> 00:03:13.140
Yeah.

00:03:13.140 --> 00:03:14.140
Or something like that, right?

00:03:14.140 --> 00:03:18.060
Well, even before that, it was like, how do you type stuff into a terminal, right?

00:03:18.060 --> 00:03:19.440
Before we even had like Windows.

00:03:19.440 --> 00:03:23.220
And then people from like the community was like, you know, like Windows would be good.

00:03:23.220 --> 00:03:25.160
And then they were like, maybe touchscreens will be good.

00:03:25.240 --> 00:03:30.400
So now we have all these cool input, ways to input like commands into a computer and make

00:03:30.400 --> 00:03:30.880
use of that.

00:03:30.880 --> 00:03:31.660
Yeah, absolutely.

00:03:31.660 --> 00:03:38.420
And so it seems like you and Philip are somewhat focused on how developers interact with computers.

00:03:38.420 --> 00:03:39.480
Is that fair to say?

00:03:39.480 --> 00:03:40.760
We kind of do a mix.

00:03:40.760 --> 00:03:49.300
So Philip, I think, has done a lot of developer-oriented work maybe like in the last five years or 10 years

00:03:49.300 --> 00:03:49.680
or so.

00:03:49.680 --> 00:03:55.260
For me specifically, I'm more interested in like how students and instructors use computers.

00:03:55.260 --> 00:03:56.180
Okay.

00:03:56.180 --> 00:04:03.620
So like what people, how people use, like create lecture slides using like screenshots of like their notebook environments

00:04:03.620 --> 00:04:10.480
and how people like put code in their slides and use code to teach while also like, while also talking over at the same time.

00:04:10.480 --> 00:04:10.900
Sure.

00:04:11.340 --> 00:04:18.220
Well, and notebooks are all about communicating computational ideas, either being science or developer or data science, right?

00:04:18.220 --> 00:04:18.600
Yeah.

00:04:18.600 --> 00:04:19.420
Yeah, for sure.

00:04:19.420 --> 00:04:23.100
And then nowadays we see a lot of notebooks being used in the classroom as well.

00:04:23.100 --> 00:04:32.520
So instructors will not only have lecture slides, but a lot of instructors will like flip back and forth between lecture slides and a computational notebook like Jupyter.

00:04:32.520 --> 00:04:39.380
So they'll have lecture slides for a few minutes and then they'll do some live coding in front of students for another few minutes and they'll switch back and forth.

00:04:39.580 --> 00:04:43.400
So we're seeing a lot of that sort of use case in the classroom.

00:04:43.400 --> 00:04:54.600
And that's where, like, that's the sort of thing that I'm really interested in because here we have people doing something visual, doing something verbal, but also now doing, working with code and having students like see code in the classroom.

00:04:54.600 --> 00:04:57.980
I think it must be such an advantage for students these days.

00:04:57.980 --> 00:05:09.360
I remember when I was in school, it was either the instructor would be writing something either on the blackboard or on like one of those overlay things with a pen and with a light that literally went through it.

00:05:09.360 --> 00:05:11.880
Or, you know, you would just get a book or something.

00:05:11.880 --> 00:05:17.460
But now if you want to say, well, look how these forces in physics come together or look how these chemical bonds are formed.

00:05:17.460 --> 00:05:21.820
You could see them actually, you could see actual animation that you could try new ideas.

00:05:21.820 --> 00:05:24.340
And it's just, it's opened up so much exploration, I think.

00:05:24.340 --> 00:05:25.520
Yeah, I think it's really cool.

00:05:25.520 --> 00:05:32.220
And, you know, I don't know about you, but I would definitely prefer to write code in the computer rather than writing code in the overhead slide.

00:05:32.220 --> 00:05:33.940
Oh my goodness.

00:05:33.940 --> 00:05:37.480
Can not even imagine doing it that way.

00:05:37.480 --> 00:05:38.940
So for sure, for sure.

00:05:38.940 --> 00:05:39.240
All right.

00:05:39.240 --> 00:05:42.140
Speaking of code, let's talk about your project.

00:05:42.140 --> 00:05:45.420
So you have this project called Pandas Tutor.

00:05:45.420 --> 00:05:46.140
Yeah, that's right.

00:05:46.140 --> 00:05:52.920
And this is a little bit of a next generation data science thing followed on from Python Tutor, right?

00:05:52.920 --> 00:05:55.720
I see some similarities in the website and stuff like that.

00:05:55.720 --> 00:05:57.060
Yeah, yeah.

00:05:57.060 --> 00:06:05.180
So Pandas Tutor, the website is similar to the Python Tutor website because Philip used like his old style sheet for both of them.

00:06:05.180 --> 00:06:05.660
Sure.

00:06:05.660 --> 00:06:13.340
When we were getting this out the door, we were, at the time, we were like very focused on squashing bugs and like adding new features.

00:06:13.460 --> 00:06:16.880
And then the website was like, oh, okay, like we got to launch this thing.

00:06:16.880 --> 00:06:18.000
We need something to put on.

00:06:18.000 --> 00:06:20.240
So Philip was like, okay, let me copy my styles.

00:06:20.240 --> 00:06:20.700
Yeah.

00:06:20.700 --> 00:06:22.220
Well, his styles look good.

00:06:22.220 --> 00:06:24.420
So I think it's, there's nothing wrong with that.

00:06:24.420 --> 00:06:27.320
It's very nice visualizations and interactives.

00:06:27.320 --> 00:06:29.000
So what is this?

00:06:29.000 --> 00:06:31.340
Why would people be interested in Pandas Tutor?

00:06:31.840 --> 00:06:37.700
It might sound like it's a series of video courses on Pandas or something, but that's not at all what it is, right?

00:06:37.700 --> 00:06:38.680
Tell people what this is.

00:06:38.680 --> 00:06:39.000
Yeah.

00:06:39.000 --> 00:06:46.120
So Pandas Tutor is a little website tool where you can paste in some Python Pandas code.

00:06:46.120 --> 00:06:48.540
So Python code that works with data frames.

00:06:48.540 --> 00:06:52.960
And what the tool will do is it'll take your code and break it down step by step.

00:06:53.240 --> 00:06:56.300
It'll draw a little diagram for you at every step of your code.

00:06:56.300 --> 00:07:11.900
So I have a little example on the website, but the example on the website basically shows that if you have a few lines of Pandas code, when you run those lines in a Jupyter notebook, let's say, all you get when you run the cell, all you get when you run the code is a final output.

00:07:11.900 --> 00:07:18.340
So even if there are like four steps in the recipe, all you get is the finished cake and you don't really get to see the middle steps that happen.

00:07:18.340 --> 00:07:20.440
And so often, you know, that's what you do.

00:07:20.520 --> 00:07:25.180
Like I'm going to transform this data frame with these multiple operations to get a new data frame.

00:07:25.180 --> 00:07:27.380
That's the destination I want to be at, right?

00:07:27.380 --> 00:07:27.760
Totally.

00:07:27.760 --> 00:07:28.300
Totally.

00:07:28.300 --> 00:07:28.880
Yeah.

00:07:28.880 --> 00:07:32.220
And it happens all the time in real practice for data analysis.

00:07:32.220 --> 00:07:34.740
And it also happens a lot in the classroom.

00:07:34.740 --> 00:07:40.180
So a lot of times when I'm teaching in data science, a little piece of data science, I'll write a few lines of code.

00:07:40.180 --> 00:07:43.060
But the problem is like students ask me like, oh, what happened?

00:07:43.060 --> 00:07:44.280
Like there's a lot going on.

00:07:44.280 --> 00:07:47.700
Like, can you show me like this step or like step three in the code or step four?

00:07:47.860 --> 00:07:52.940
And I have to like manually comment out lines of code and display those data frames to students.

00:07:52.940 --> 00:07:55.480
So this tool kind of emerged from that use case.

00:07:55.480 --> 00:07:56.300
Yeah, absolutely.

00:07:56.300 --> 00:07:59.560
And it's totally reasonable that you would comment out those lines.

00:07:59.560 --> 00:08:04.080
But it's also more difficult still to see the transformation, right?

00:08:04.140 --> 00:08:09.780
So if I say, well, what happens if I don't do, say, a group by, but I just get the previous result?

00:08:09.780 --> 00:08:14.920
Well, then, you know, you kind of, how do you put that side by side with the other, the next step, right?

00:08:14.920 --> 00:08:22.020
There's not a great mechanism for saying put these side by side and see the changes without like lots of scrolling and back and forth and stuff.

00:08:22.020 --> 00:08:22.460
Totally.

00:08:22.460 --> 00:08:22.800
Totally.

00:08:22.800 --> 00:08:23.300
Yeah.

00:08:23.480 --> 00:08:23.660
Yeah.

00:08:23.660 --> 00:08:23.720
Yeah.

00:08:23.720 --> 00:08:35.580
So it's something, it's a use case that came directly out of our experiences teaching data science, where a lot of times when we teach, we're like, okay, in the top cell of a notebook, we'll like display dogs.

00:08:35.700 --> 00:08:40.340
And then the cell below it, we'll do some stuff with the data frame, like dogs dot sort values.

00:08:40.340 --> 00:08:53.500
And then we have to say, okay, students, like look at the top data frame and look at the bottom one, and then compare those two and like stare really hard at it and try to figure out what happened between the two, between the two data frames to understand it.

00:08:53.500 --> 00:08:59.900
So whereas with Pandas Tutor, what I could do instead is put the code, just paste the code into Pandas Tutor.

00:09:00.080 --> 00:09:08.720
It'll display the two data frames side by side and draw some arrows between the two data frames or add some coloring so that I can see, oh, okay, the rows were sorted.

00:09:08.720 --> 00:09:13.940
I don't have to ask people to like stare really hard and imagine the rows moving from place to place.

00:09:13.940 --> 00:09:22.200
And before we get too far into this episode, I do want to just point out to people like this is a really visual tool, which is its massive advantage.

00:09:22.200 --> 00:09:30.540
But that also puts Sam and me at a disadvantage for discussing it during this audio, mostly audio presentation.

00:09:30.540 --> 00:09:38.380
So you might consider checking out also the YouTube stream and flipping around there or just open up PandasTutor.com and play around with it yourself.

00:09:38.380 --> 00:09:39.980
Like it's all about just a live example.

00:09:39.980 --> 00:09:42.820
So with that said, I want to dive into a few things.

00:09:42.820 --> 00:09:45.600
There's going to be an example here that we're going to cover a lot.

00:09:46.060 --> 00:09:49.940
And it's an example using a Pandas data frame called dogs.

00:09:49.940 --> 00:09:55.100
And the dogs are like the breed, which would be German Shepherd or Terrier or whatever.

00:09:55.100 --> 00:09:58.480
And then type is a herding dog or a hound dog or a toy dog.

00:09:58.480 --> 00:10:00.080
I love the toy dog idea.

00:10:00.440 --> 00:10:06.320
And then there's a filtering statement where you say dogs bracket, dog size, equal, equal, medium.

00:10:06.320 --> 00:10:10.720
That's a standard Pandas like, let's do this filter type of wear clause.

00:10:10.720 --> 00:10:17.440
And then there's a sort where you sort by the type of dog, you know, the herding or hound dog or working dog, whatever.

00:10:17.440 --> 00:10:21.040
And then you do a group by on the type.

00:10:21.040 --> 00:10:25.980
So show me all the non-sporting dogs, all the sporting dogs and so on.

00:10:25.980 --> 00:10:26.480
Yeah.

00:10:26.480 --> 00:10:27.340
Yeah, that's right.

00:10:27.580 --> 00:10:29.960
We'll be using this data quite a bit.

00:10:29.960 --> 00:10:38.320
Before we get into analyzing Pandas, I guess one thing I was wondering is, it's super focused on Pandas and Pandas data frames.

00:10:38.320 --> 00:10:45.040
Did you consider making it for other tools like a NumPy one or a TensorFlow one?

00:10:45.040 --> 00:10:48.340
Or like why Pandas specifically out of the data science space?

00:10:48.340 --> 00:10:49.160
It's a great question.

00:10:49.160 --> 00:10:55.180
Pandas happens to be like the de facto tool for working with data tables in Pandas.

00:10:55.180 --> 00:10:57.280
I mean, they can bring data tables in Python.

00:10:57.740 --> 00:11:00.820
And it's taught a lot in introductory courses specifically.

00:11:00.820 --> 00:11:09.020
So a lot of intro to data science courses, when they teach students how to work with data tables, they'll also teach students how they work with Pandas.

00:11:09.360 --> 00:11:12.520
We chose to focus on Pandas because of like those two aspects.

00:11:12.520 --> 00:11:17.840
So one, it's like a common standard package that a lot of people use in practice.

00:11:17.840 --> 00:11:23.000
And it's also a package that people, a lot of people learn when they're learning data science for the first time.

00:11:23.000 --> 00:11:27.680
They'll learn Pandas as one of the first stepping stones to learning how to do data analysis.

00:11:28.040 --> 00:11:34.240
Now, there is another version of this tool for the R data, like R tidyverse world.

00:11:34.240 --> 00:11:37.340
It's called a tidy data tutor instead of Pandas tutor.

00:11:37.340 --> 00:11:40.960
And it was made by one of my lab mates and Phillip as well.

00:11:40.960 --> 00:11:43.060
So we kind of, the three of us kind of worked together.

00:11:43.060 --> 00:11:48.000
I worked on the Pandas side and then my lab mate worked on the R tidyverse side.

00:11:48.000 --> 00:11:48.240
Sure.

00:11:48.620 --> 00:11:48.840
Okay.

00:11:48.840 --> 00:11:54.640
Yeah, that's cool that it depends, you know, regardless of which side of data science you're on, you can grab this and run with it.

00:11:54.640 --> 00:11:55.640
Yeah.

00:11:55.640 --> 00:12:04.220
And as for other tools, I think the approach that the tool uses to analyze code could be applied to all sorts of other tools, including tools like TensorFlow.

00:12:05.020 --> 00:12:17.820
And that's probably one of the exciting things for me is that like, this for me is like a stepping stone towards like all sorts of visual tools for learning Python packages or other data science specific things that otherwise are difficult to understand.

00:12:17.820 --> 00:12:21.180
Or like things that you would normally draw a picture to understand normally.

00:12:21.180 --> 00:12:26.980
I can imagine a tool like this drawing a picture for you or helping you like when you're explaining your code to someone else.

00:12:26.980 --> 00:12:33.540
When I first learned about this, Brian Okken and Leah Cole and I spoke about it over on the Python Bytes podcast.

00:12:33.540 --> 00:12:37.540
And Leah made a really interesting point when she saw this.

00:12:37.540 --> 00:12:42.740
My first impression is, okay, this is a great way to teach students who are getting into data science.

00:12:42.740 --> 00:12:45.980
And it sounds like that's a very solid use case.

00:12:45.980 --> 00:12:53.900
But Leah said, hey, this would be really good if you just like went to Stack Overflow or you picked up some new code and you're like, what does this do?

00:12:53.900 --> 00:12:56.300
This is like a complicated pandas expression.

00:12:56.300 --> 00:12:58.900
Let me throw it in here and you could visualize that.

00:12:58.900 --> 00:13:09.000
So I want to sort of put that out there for people to think about, well, if they're not learning data science right now, they're probably still encountering algorithms and data sets that are new to them.

00:13:09.000 --> 00:13:10.460
And that might be useful as well.

00:13:10.460 --> 00:13:11.100
What do you think?

00:13:11.100 --> 00:13:12.520
Yeah, I totally agree with that.

00:13:12.520 --> 00:13:30.100
And actually, one of the ideas that Philippa and I had was to do a little bookmarklet where if you put the bookmarklet in your browser bookmarks bar and then you're on Stack Overflow and you click that button, we could even show you those diagrams that pandas created in line.

00:13:30.100 --> 00:13:35.300
If you click it online on a Stack Overflow website or let's say the pandas documentation.

00:13:35.760 --> 00:13:49.260
I've certainly run into the problem where I'm trying to like Google, like, how do I, let's say, unpivot a data frame and then I pull up the first Stack Overflow result and then it works, but it's like five lines of complicated machinery.

00:13:49.260 --> 00:13:51.400
And I'm trying to figure out what's going on.

00:13:51.400 --> 00:13:56.580
And I have to like, like kind of walk through it step by step myself to make sure it's not messing up my data in some way.

00:13:56.580 --> 00:14:09.940
And so I can imagine like a tool like this, if you could display the visualizations in line and just put it in Stack Overflow's website itself on the user side, then that could be like a nice way to make use of the visualizations in real practice.

00:14:09.940 --> 00:14:10.960
That would be really cool.

00:14:10.960 --> 00:14:17.040
Just install a browser helper that like every time it detects a panda statement, it just puts a little.

00:14:17.040 --> 00:14:17.740
Yeah, yeah.

00:14:17.740 --> 00:14:18.860
Like a little Chrome extension.

00:14:18.860 --> 00:14:19.820
That would be super neat.

00:14:19.820 --> 00:14:20.520
I would use that.

00:14:20.520 --> 00:14:21.120
Yeah, for sure.

00:14:21.120 --> 00:14:25.280
So let's click on start visualizing your Python code now.

00:14:25.460 --> 00:14:27.100
Now I'll pull this up and run.

00:14:27.100 --> 00:14:39.580
And this, what happens for those of you who are not familiar with Python Tutor and Pandas Tutor is it actually executes, you put a block of code in here and it actually executes it in a container or something like that, right?

00:14:39.580 --> 00:14:40.160
Yeah, that's right.

00:14:40.160 --> 00:14:43.160
So it'll run your code in a Docker container on one of our servers.

00:14:43.160 --> 00:14:43.720
Nice.

00:14:43.720 --> 00:14:46.440
You don't have to just explore other people's code, right?

00:14:46.440 --> 00:14:48.160
You can put whatever you want in here.

00:14:48.160 --> 00:14:53.260
Now, the first thing that I think about when I think about data frames is data.

00:14:53.980 --> 00:14:55.840
Obviously, you've got to get some data in here.

00:14:55.840 --> 00:15:08.120
And as we were talking about this Chrome extension, one of the challenges for me is, well, here's a cool little code snippet, but it has to have the proper data frame data backing it before it really means anything, right?

00:15:08.120 --> 00:15:08.980
Yeah, that's right.

00:15:08.980 --> 00:15:10.120
It's a challenge.

00:15:10.120 --> 00:15:10.620
It is.

00:15:10.840 --> 00:15:12.040
So how do you get data in here?

00:15:12.040 --> 00:15:13.800
What are the options for getting data in here?

00:15:13.800 --> 00:15:14.180
Okay.

00:15:14.180 --> 00:15:25.360
So the one challenge about hosting a tool that runs code for other people is that it's a little bit, you run into issues when you let the tool like also have internet access.

00:15:25.360 --> 00:15:28.200
Because then people will start mining Bitcoins using X2.

00:15:28.200 --> 00:15:28.820
Yes, exactly.

00:15:28.820 --> 00:15:33.200
And arbitrary code on the internet, how could it go wrong?

00:15:33.200 --> 00:15:41.060
I mean, I know with a Docker container, it's not going to harm you or the other things most likely, unless there's an exploit fully in Docker.

00:15:41.060 --> 00:15:44.800
But they're going to exploit your computational resources and things like that, right?

00:15:44.800 --> 00:15:45.240
That's right.

00:15:45.240 --> 00:15:45.680
That's right.

00:15:45.900 --> 00:15:46.040
Yeah.

00:15:46.040 --> 00:15:46.380
Yeah.

00:15:46.380 --> 00:15:46.640
Okay.

00:15:46.640 --> 00:15:51.340
So you probably don't have full just root access to do whatever you feel like here.

00:15:51.340 --> 00:15:51.700
Yeah.

00:15:51.700 --> 00:15:58.340
So the tool, it cuts off internet access for your code and it also imposes like a few memory limits.

00:15:58.340 --> 00:16:03.160
So I don't think you can write, you might be able to read or write to disk temporarily.

00:16:03.160 --> 00:16:08.140
I don't quite remember the details of that, but I do know that it does restrict internet access.

00:16:08.140 --> 00:16:15.860
So a lot of things like one common way that we'll get data sets in class is we'll do pandas.readcsv and put in a URL.

00:16:15.860 --> 00:16:16.000
Yeah.

00:16:16.000 --> 00:16:17.260
Of a CSV file.

00:16:17.260 --> 00:16:19.320
And unfortunately, that doesn't work for the tool.

00:16:19.320 --> 00:16:28.260
So the way that we're getting around this right now is in the examples that we have for pandas tutor on the website, we have like inline CSVs.

00:16:28.260 --> 00:16:36.380
So we put a snippet of a CSV file as a Python string, and then we can read that string into pandas as if it was a CSV file.

00:16:36.380 --> 00:16:36.800
Yeah.

00:16:36.800 --> 00:16:37.440
Yeah.

00:16:37.440 --> 00:16:44.620
So you just drop it in as part of the code as a, what's that, a literal string, the triple quotes that'll go multiline.

00:16:44.860 --> 00:16:46.740
So you just drop it in the middle of that, right?

00:16:46.740 --> 00:16:47.240
Yeah.

00:16:47.240 --> 00:16:47.500
Yeah.

00:16:47.500 --> 00:16:50.540
And it's not, I definitely don't think it's an ideal solution.

00:16:50.540 --> 00:17:00.600
What I would like, like one stepping stone to like a future solution would be to include some example data sets with Python, with pandas too, so people can load in directly.

00:17:00.600 --> 00:17:01.240
That's a good idea.

00:17:01.360 --> 00:17:06.460
The R version of this tool has some built-in data sets because of R's like built-in packages.

00:17:06.460 --> 00:17:13.840
So R has like, I think it comes with default, like the car, like the cars data set, maybe like some flowers data sets.

00:17:13.840 --> 00:17:15.180
So you can load those in directly.

00:17:15.180 --> 00:17:18.060
And that makes the R version of this a little bit more convenient.

00:17:18.540 --> 00:17:32.160
So we're thinking about ways of loading in data right now, but in terms of being able to load in arbitrary data, the only real option right now is to go into your CSV file and copy and paste out a few lines of it into the tool directly.

00:17:34.500 --> 00:17:37.460
This portion of Talk Python To Me is brought to you by SignalWire.

00:17:37.460 --> 00:17:39.360
Let's kick this off with a question.

00:17:39.360 --> 00:17:42.960
Do you need to add multi-party video calls to your website or app?

00:17:42.960 --> 00:17:55.500
I'm talking about live video conference rooms that host 500 active participants, run in the browser and work within your existing stack, and even support 1080p without devouring the bandwidth and CPU on your users' devices.

00:17:55.940 --> 00:18:05.840
SignalWire offers the APIs, the SDKs, and edge networks around the world for building the realest of real-time voice and video communication apps with less than 50 milliseconds of latency.

00:18:05.840 --> 00:18:16.620
Their core products use WebSockets to deliver 300% lower latency than APIs built on REST, making them ideal for apps where every millisecond of responsiveness makes a difference.

00:18:16.620 --> 00:18:20.460
Now, you may wonder how they get 500 active participants in a browser-based app.

00:18:20.640 --> 00:18:32.880
Most current approaches use a limited but more economical approach called SFU, or Selective Forwarding Units, which leaves the work of mixing and decoding all those video and audio streams of every participant to each user's device.

00:18:32.880 --> 00:18:38.560
Browser-based apps built on SFU struggle to support more than 20 interactive participants.

00:18:38.560 --> 00:18:45.360
So SignalWire mixes all the video and audio feeds on the server and distributes a single unified stream back to every participant.

00:18:45.640 --> 00:18:58.420
So you can build things like live streaming fitness studios where instructors demonstrate every move from multiple angles, or even live shopping apps that highlight the charisma of the presenter and the charisma of the products they're pitching at the same time.

00:18:58.420 --> 00:19:09.060
SignalWire comes from the team behind FreeSwitch, the open-source telecom infrastructure toolkit used by Amazon, Zoom, and tens of thousands of more to build mass-scale telecom products.

00:19:09.180 --> 00:19:18.280
So sign up for your free account at talkpython.fm/signalwire, and be sure to mention talkpython to me to receive an extra 5,000 video minutes.

00:19:18.280 --> 00:19:22.560
That's talkpython.fm/signalwire, and mention talkpython to me for all those credits.

00:19:24.740 --> 00:19:31.200
It's not a huge problem because the goal here is not to execute and get results from it.

00:19:31.200 --> 00:19:34.240
It's like, what would it look like if I did this?

00:19:34.240 --> 00:19:35.100
Yeah, that's right.

00:19:35.100 --> 00:19:48.440
So it's not really about visualizing gigabytes of data frame transformations because in those cases, we're going to draw a bajillion arrows, and it's really hard to see what's exactly happening between the two data frames.

00:19:48.440 --> 00:19:48.840
Exactly.

00:19:48.840 --> 00:19:51.400
From an understanding perspective, it might be worse, right?

00:19:51.400 --> 00:19:59.460
Because it's like, as people will see as they explore PanasTutor.com, like, it's putting lines and little interactive widgets all over the place to see how the data flows.

00:19:59.460 --> 00:20:02.420
And if you've got too much, then it's just lines everywhere.

00:20:02.420 --> 00:20:03.320
Yeah, yeah.

00:20:03.320 --> 00:20:03.960
Yeah, cool.

00:20:03.960 --> 00:20:04.200
All right.

00:20:04.200 --> 00:20:07.940
So we've got this data, which we already talked about a little bit, the dogs.

00:20:07.940 --> 00:20:11.480
And so we've got like a Labrador Retriever, which is a sporting dog.

00:20:11.480 --> 00:20:13.940
That is, it lives to 12 years.

00:20:13.940 --> 00:20:15.120
That's right.

00:20:15.120 --> 00:20:18.060
It's medium-sized, and it's 67 pounds, and so on.

00:20:18.340 --> 00:20:20.100
So that's the kind of data that we're working with.

00:20:20.100 --> 00:20:29.240
You jam that into an in-memory CSV string, use io.string.io to treat it like a file stream, and tell Pandas to read CSV it.

00:20:29.240 --> 00:20:29.440
Okay.

00:20:29.440 --> 00:20:33.340
So then you want to know, basically, let me go to the finalists.

00:20:33.340 --> 00:20:42.300
You want to know, given a type of dog, like non-sporting, sporting, working, what is its median longevity in years and its weight, right?

00:20:42.300 --> 00:20:42.440
That's right.

00:20:42.440 --> 00:20:49.940
So that's the kind of question that you're trying to answer, which is kind of incredible that given this data, it's only three lines of Pandas to answer that.

00:20:50.000 --> 00:20:51.640
Yeah, Pandas does a lot behind the scenes.

00:20:51.640 --> 00:20:53.640
Yeah, that's pretty remarkable, actually.

00:20:54.100 --> 00:21:06.400
So what happens when you say visualize this is it takes that same code block that we've been talking about, dogs, dog of size, equal, equal, medium, sort values, group by, median, and so on.

00:21:06.660 --> 00:21:20.200
And you put that on the screen where the parts that are not relevant at the moment are grayed out, and the code that it's actually applying at that step is strong or regular color font.

00:21:20.200 --> 00:21:21.240
That's really clever.

00:21:21.240 --> 00:21:28.120
How do you come up with that idea to say, like, we're going to show the flow through this code by, like, dimming the other parts of the code?

00:21:28.120 --> 00:21:33.760
When we were making this tool, our first cut of this was actually just to show the code that we were running itself.

00:21:33.760 --> 00:21:37.360
Right, so you'd say, like, dog, bracket size, equal, equal, medium, or something like that, right?

00:21:37.360 --> 00:21:38.040
That's exactly right.

00:21:38.040 --> 00:21:46.640
So in the first version of this tool, we did, like, if we're filtering a data frame and then, like, sorting it, we would just show the code for filtering first.

00:21:46.640 --> 00:21:48.160
But we showed all the code for filtering.

00:21:48.160 --> 00:21:57.280
And then when we sort the data frame, then we would show the code for filtering and sorting because that's the snippet of code that we would execute or, like, visualize.

00:21:57.640 --> 00:22:05.140
And it ended up being a little bit, it ended up being, like, less helpful, in our opinion, when we had, like, longer chains, especially.

00:22:05.140 --> 00:22:12.480
Because when you have longer chains, it looks like there's, like, five things running, but really all we're visualizing is the last step.

00:22:13.040 --> 00:22:24.380
So what the solution we kind of came around to was to say, okay, well, we'll just display all the code that we're visualizing, but bold, like, highlight the part that we're visualizing in this step.

00:22:24.380 --> 00:22:32.540
So if there's four steps, then we'll have, like, four little diagram displays, and we'll highlight this, like, the individual steps that we're running at each time.

00:22:32.540 --> 00:22:42.280
Yeah, there's a lot of subtleness in this tool that it takes a, you know, on first glance, you don't see exactly how much it's communicating, but there's a lot of nice touches like that.

00:22:42.280 --> 00:22:53.820
So in this first step, it says we're going to go and filter down our data set from all the different types of dogs, like large dogs, small dogs, and so on, to just look at medium-sized breeds.

00:22:54.540 --> 00:23:05.560
So then we get to the thing that we were talking about, where you've got two data frames, as if you had done just, like, df.head or something, where it puts the top and then, like, a few listings of them.

00:23:05.560 --> 00:23:05.960
That's right.

00:23:05.960 --> 00:23:07.800
But it puts them side by side, right?

00:23:07.800 --> 00:23:09.400
Tell us what's on the screen here.

00:23:09.400 --> 00:23:10.440
Describe this.

00:23:10.440 --> 00:23:10.820
Yeah.

00:23:10.820 --> 00:23:19.860
So on the left, we displayed the original data frame dogs, and then on the right, we displayed the data frame dogs, but with the medium dogs filtered.

00:23:20.060 --> 00:23:25.940
So the right data frame only has medium dogs, and the left data frame has all the dogs in the original data frame.

00:23:25.940 --> 00:23:26.180
Right.

00:23:26.180 --> 00:23:28.260
So that's the filtering that you might first see.

00:23:28.260 --> 00:23:30.740
But then you also have lines, which are pretty cool.

00:23:30.740 --> 00:23:31.300
Yeah.

00:23:31.300 --> 00:23:31.660
Yeah.

00:23:31.660 --> 00:23:38.600
So what we're doing here is we're showing which rows from the original data frame made it into the right data frame.

00:23:38.600 --> 00:23:46.200
So in the original data frame, it looks like rows three, four, you know, three through seven, and a few more other rows made it into the right side.

00:23:46.200 --> 00:23:52.720
And what we're doing is we're drawing arrows to show from the left side which rows got copied over into the right side.

00:23:52.720 --> 00:23:52.960
Yeah.

00:23:52.960 --> 00:23:56.360
So in that filter, you can sort of see them going across, which is fantastic.

00:23:56.360 --> 00:24:02.080
And the other part that's subtle, I guess there's two more, is this looks like a static picture.

00:24:02.080 --> 00:24:03.980
Like, it almost looks like a JPEG or something.

00:24:03.980 --> 00:24:19.720
But then as you move your mouse over, as you hover over a particular row in the original data set, it'll highlight just what happens to that row and where did it end up, either directly or in some kind of aggregation like a sum or something on the right-hand side, right?

00:24:19.720 --> 00:24:19.940
That's right.

00:24:19.940 --> 00:24:24.780
So there's this really cool sort of hovery, like, follow this piece of data along story.

00:24:24.780 --> 00:24:25.640
Yeah, that's right.

00:24:25.640 --> 00:24:26.960
And you can do it on the right side, too.

00:24:27.060 --> 00:24:31.520
So if you hover on the right side, it'll show you the rows that went into that on the left side.

00:24:31.520 --> 00:24:31.680
Okay.

00:24:31.680 --> 00:24:33.460
This is convenient when there's a lot of arrows.

00:24:33.460 --> 00:24:41.160
So this is, like, the main reason why we did this was in some cases, there are a lot of arrows, and you want to just show a few of them.

00:24:41.160 --> 00:24:46.860
And to do that, the easiest way to do that in this tool right now is to highlight moving mouse over a row.

00:24:46.860 --> 00:24:47.140
Yeah.

00:24:47.220 --> 00:24:48.320
That's one subtlety here.

00:24:48.320 --> 00:24:51.000
In this case, it's not super relevant because it's just a filter.

00:24:51.000 --> 00:24:51.420
That's right.

00:24:51.420 --> 00:24:57.000
When you get down to, like, group by and stuff like that, you're like, well, show me everything that went into this row on this group by.

00:24:57.000 --> 00:24:57.800
Like, well, these three.

00:24:57.800 --> 00:24:58.420
That's right.

00:24:58.420 --> 00:24:58.980
That's pretty cool.

00:24:58.980 --> 00:24:59.820
Yeah, yeah.

00:24:59.820 --> 00:25:09.320
So it's especially helpful when you have, like, multiple rows on the left going into a single row on the right or some weird combination of rows that otherwise, like, would be hard to see.

00:25:09.320 --> 00:25:10.260
Yeah, for sure.

00:25:10.620 --> 00:25:19.360
One final thing is we're doing a sort by this comparison, or sorry, filter, by this comparison on the size column of the data frame.

00:25:19.360 --> 00:25:22.320
So dog, bracket size, equal, equal, medium.

00:25:22.320 --> 00:25:28.600
And on both of these, you've got, like, an outline, a vertical outline on the size.

00:25:28.600 --> 00:25:32.180
So that's another aspect that's really nice to highlight what's going on here, right?

00:25:32.180 --> 00:25:32.900
Yeah, that's right.

00:25:32.900 --> 00:25:35.180
So we're drawing a box from the size column.

00:25:35.180 --> 00:25:39.120
That's meant to show the user, like, what column we're using for filtering.

00:25:39.120 --> 00:25:39.380
Yeah.

00:25:39.380 --> 00:25:52.120
There's actually one more thing here I wanted to point out, which is that if you display this data frame in a Jupyter notebook, you might not actually see any medium-sized dogs because they're hidden in, like, the middle rows of this data frame.

00:25:52.120 --> 00:25:52.360
Yeah.

00:25:52.360 --> 00:25:57.880
And so by default, Pandas displays, like, a few rows from the top and the bottom of a data frame.

00:25:57.880 --> 00:26:04.440
But sometimes when you're, like, filtering, the rows that you're filtering only come from the middle of the data frame, which are hidden by default.

00:26:04.440 --> 00:26:11.640
So you have to kind of, like, really, like, scrub through the data frame yourself in a Jupyter notebook to see that there are medium dogs in the first place.

00:26:11.640 --> 00:26:18.380
So one thing we're doing with this tool is whenever we draw an arrow, we make sure that the rows on the left are visible to the user.

00:26:18.380 --> 00:26:24.700
So we'll, like, selectively hide and show rows to make sure that you can always see the rows that we're making use of.

00:26:24.700 --> 00:26:24.980
Right.

00:26:24.980 --> 00:26:27.440
The most important ones are the ones that are included.

00:26:27.440 --> 00:26:29.300
So let's include some of them, right?

00:26:29.340 --> 00:26:29.700
That's right.

00:26:29.700 --> 00:26:30.100
That's right.

00:26:30.100 --> 00:26:30.320
Yeah.

00:26:30.320 --> 00:26:30.920
Yeah.

00:26:30.920 --> 00:26:35.460
You've got these little subtle one more, four more in this section, and so on.

00:26:35.460 --> 00:26:36.160
So that's pretty neat.

00:26:36.160 --> 00:26:36.880
All right.

00:26:36.880 --> 00:26:39.080
So, so far, we're step one.

00:26:39.080 --> 00:26:44.500
We've taken all the different types of dogs, and we're now down to a data frame of just medium-sized dogs.

00:26:44.500 --> 00:26:47.080
The next thing to do was, what, sort them, right?

00:26:47.080 --> 00:26:47.960
Yeah, that's right.

00:26:47.960 --> 00:26:48.320
Okay.

00:26:48.320 --> 00:26:49.800
So maybe tell us about this step here.

00:26:49.800 --> 00:26:50.160
Yeah.

00:26:50.300 --> 00:26:53.660
So in this step, we're sorting the rows by the type column.

00:26:53.660 --> 00:27:01.920
So again, we're going to highlight or draw a box from the type column for the input and the output to show the user, this is the column we're using for this operation.

00:27:01.920 --> 00:27:11.920
And here we're drawing arrows, and the arrows kind of crisscrossing this diagram because some of the rows go to the top of the data frame, and some of the rows go to the bottom of the data frame after we sort them.

00:27:11.920 --> 00:27:12.120
Yeah.

00:27:12.120 --> 00:27:13.140
As you would expect.

00:27:13.140 --> 00:27:17.820
But you can see, after the sort, here's where everything sort of started and ended up.

00:27:17.820 --> 00:27:19.620
So that's pretty straightforward, I would say.

00:27:19.820 --> 00:27:21.920
And then you have a group by one.

00:27:21.920 --> 00:27:26.580
Tell us how you visualize the group by stuff because that's pretty interesting to think about.

00:27:26.580 --> 00:27:30.520
How do you represent the two-dimensional data, but then additionally the groups?

00:27:30.520 --> 00:27:31.480
Yeah, yeah.

00:27:31.480 --> 00:27:40.100
So when we group data, what we do visually is we use the same color to highlight the backgrounds of each row within a group.

00:27:40.100 --> 00:27:44.140
So in this example, all the non-sporting dogs will get highlighted blue.

00:27:44.140 --> 00:27:46.360
All the sporting dogs get highlighted light green.

00:27:46.360 --> 00:27:48.560
And then all the working dogs get highlighted red.

00:27:48.720 --> 00:27:53.940
So you can see visually how the rows are put together in groups by pandas.

00:27:53.940 --> 00:27:54.960
Yeah, fantastic.

00:27:54.960 --> 00:28:01.540
And then finally, simple but also very cool visualization is you just go to that data frame.

00:28:01.540 --> 00:28:03.840
You say, give us the median of that.

00:28:03.840 --> 00:28:10.580
And I guess, I don't know pandas super well, but I guess if you just say dot median, that'll just give you the median of all the columns that are numerical.

00:28:10.580 --> 00:28:11.460
Is that what happens?

00:28:11.600 --> 00:28:12.020
That's right.

00:28:12.020 --> 00:28:16.660
So it'll give you the median for all the dog longevities and the median for all the dog weights.

00:28:16.660 --> 00:28:19.160
Which is the two numerical columns.

00:28:19.160 --> 00:28:19.400
Yep.

00:28:19.400 --> 00:28:19.960
Okay.

00:28:20.140 --> 00:28:27.080
And in this case, what we're doing instead is because we've grouped the data frame before taking the median, pandas does the median within each group.

00:28:27.080 --> 00:28:34.580
So it'll find the median longevity and weight for the non-sporting dogs and then for the sporting dogs and then for the working dogs.

00:28:34.580 --> 00:28:46.360
And so what we're doing in the diagram here is we're showing how the four non-sporting dogs on the left side get kind of aggregated together into one row on the right-hand side.

00:28:46.460 --> 00:28:50.560
So there's four arrows going from like four rows on the left side that go into one row on the right.

00:28:50.560 --> 00:28:51.440
Yeah, that's awesome.

00:28:51.440 --> 00:29:00.800
And this is probably that case where showing where the lines go is most interesting because there's like the first four results are all non-sporting.

00:29:00.800 --> 00:29:02.320
So they contribute to row one.

00:29:02.320 --> 00:29:05.240
So you've got all these arrows going into that first group and so on.

00:29:05.240 --> 00:29:05.600
That's right.

00:29:05.600 --> 00:29:08.900
I think that really helps visualize how this is computed.

00:29:08.900 --> 00:29:09.820
Yeah, and that's right.

00:29:09.820 --> 00:29:17.100
And group by is especially a tricky thing when we teach students because students are like, I understand sorting because like, you know, the rows get moved around.

00:29:17.100 --> 00:29:21.080
When we do group by and then do something afterward, all of a sudden like my rows disappear.

00:29:21.080 --> 00:29:22.080
Like where did my rows go?

00:29:22.080 --> 00:29:24.560
And so here we can see exactly where all the rows go.

00:29:24.560 --> 00:29:29.840
Yeah, that is very tricky because often you don't see that group by intermediate representation.

00:29:29.840 --> 00:29:31.100
Yeah, yeah.

00:29:31.100 --> 00:29:35.100
And pandas actually does not help people understand the group by.

00:29:35.320 --> 00:29:44.580
So in a notebook, if you do dot group by by itself, all you get back is like this pandas group by object at some memory address.

00:29:44.580 --> 00:29:46.000
And that's for novices.

00:29:46.000 --> 00:29:47.320
It's like, I don't know.

00:29:47.320 --> 00:29:48.580
I have no idea what just happened.

00:29:48.580 --> 00:30:00.460
And so what we decided to do here as kind of like a design step is instead of showing the default group by like display, which is just text, we expanded that out to the original data frame plus some colors.

00:30:00.460 --> 00:30:01.500
Yeah, yeah.

00:30:01.500 --> 00:30:03.300
It really is a great visualization.

00:30:03.940 --> 00:30:14.460
So I guess while we're talking about setting up your code, one thing that's interesting here is I can go to the top and I can jam in my code and I could do, you know, maybe I could change this to like, I don't know, max.

00:30:14.460 --> 00:30:15.620
Is that going to work?

00:30:15.620 --> 00:30:18.280
I got a different result by running, you know, dot max.

00:30:18.280 --> 00:30:21.420
And I might play and explore and so on.

00:30:21.420 --> 00:30:23.260
And then I'm like, I want to save this.

00:30:23.260 --> 00:30:30.420
I'm going to save it for myself or I want to share it on Twitter because I just got to say something on Twitter and let people check it out.

00:30:30.540 --> 00:30:31.960
I want to put it in the gist.

00:30:31.960 --> 00:30:34.280
I want to share with my students, whatever.

00:30:34.280 --> 00:30:40.900
So you'll have a handy little thing at the bottom that lets you create sort of a shareable link type of thing.

00:30:40.900 --> 00:30:41.860
How does that work?

00:30:41.860 --> 00:30:46.020
Do you just base64 encode the stuff at the top into the URL or what happens?

00:30:46.260 --> 00:30:48.940
It's actually even simpler than base64 encoding.

00:30:48.940 --> 00:30:51.900
We just put the code verbatim into the URL.

00:30:51.900 --> 00:31:00.040
If you're looking at the URL, like the shareable URL, like you'll see that we put the code like import pandas as PD into the URL there.

00:31:00.040 --> 00:31:00.720
Yeah, that's true.

00:31:00.720 --> 00:31:01.540
It's just HTML.

00:31:01.540 --> 00:31:02.740
No, it's URL encoded.

00:31:02.740 --> 00:31:04.100
It's just URL encoded.

00:31:04.100 --> 00:31:04.420
Yeah.

00:31:04.420 --> 00:31:06.720
So we don't do anything super special with it.

00:31:06.720 --> 00:31:09.960
And this works because URLs can actually be pretty long.

00:31:10.120 --> 00:31:12.400
Like browsers will accept pretty long URLs.

00:31:12.400 --> 00:31:17.340
And so for a lot of cases, we actually can't put the entirety of the code in the URL of software sharing.

00:31:19.680 --> 00:31:23.860
This portion of Talk Python To Me is brought to you by the Stack Overflow podcast.

00:31:23.860 --> 00:31:29.140
There are few places more significant to software developers than Stack Overflow.

00:31:29.140 --> 00:31:30.800
But did you know they have a podcast?

00:31:30.800 --> 00:31:41.160
For a dozen years, the Stack Overflow podcast has been exploring what it means to be a developer and how the art and practice of software programming is changing our world.

00:31:41.160 --> 00:31:46.120
Are you wondering which skills you need to break into the world of technology or level up as a developer?

00:31:46.120 --> 00:31:49.600
Curious how the tools and frameworks you use every day were created?

00:31:49.920 --> 00:32:00.740
The Stack Overflow podcast is your resource for tough coding questions and your home for candid conversations with guests from leading tech companies about the art and practice of programming.

00:32:00.740 --> 00:32:08.460
From Rails to React, from Java to Python, the Stack Overflow podcast will help you understand how technology is made and where it's headed.

00:32:08.460 --> 00:32:16.400
Hosted by Ben Popper, Cassidy Williams, Matt Kierninder, and Sierra Ford, the Stack Overflow podcast is your home for all things code.

00:32:16.600 --> 00:32:20.060
You'll find new episodes twice a week wherever you get your podcasts.

00:32:20.060 --> 00:32:26.420
Just visit talkpython.fm/stackoverflow and click your podcast player icon to subscribe.

00:32:26.420 --> 00:32:27.340
And one more thing.

00:32:27.340 --> 00:32:33.980
I know you're a podcast veteran and you could just open up your favorite podcast app and search for the Stack Overflow podcast and subscribe there.

00:32:33.980 --> 00:32:40.500
But our sponsors continue to support us when they see results and they'll only know you're interested from Talk Python if you use our link.

00:32:40.500 --> 00:32:45.860
So if you plan on listening, do use our link, talkpython.fm/stackoverflow to get started.

00:32:45.860 --> 00:32:48.420
Thank you to Stack Overflow for sponsoring the show.

00:32:50.180 --> 00:32:54.740
So people can come down here and they can copy this URL and then they can do whatever they want.

00:32:54.740 --> 00:32:57.340
Either save it as a bookmark for themselves or share it, right?

00:32:57.340 --> 00:32:57.920
That's cool.

00:32:57.920 --> 00:32:58.600
Yeah, that's right.

00:32:58.600 --> 00:33:07.840
So the idea is if I had, let's say, like an email I'm sending to a colleague and I send them a little picture of data frames, like with some arrows,

00:33:07.840 --> 00:33:13.620
I can also send this URL, which will let the other person view like the original code I used to create the diagrams.

00:33:13.860 --> 00:33:22.720
Sure. So maybe it makes sense to do like a snapshot screenshot of just one step and then you say, well, here you can explore the whole thing and rerun it and so on.

00:33:22.720 --> 00:33:28.220
It also kind of leads to the reproducible publications, reproducible science.

00:33:28.220 --> 00:33:33.440
You know, if you're trying to explain to people what this step does, it might be worth putting that in the paper, right?

00:33:33.440 --> 00:33:34.340
Yeah, exactly.

00:33:34.900 --> 00:33:40.280
Yeah. And one use case we imagined was like, let's say for a lecture slide, I'll take a screenshot of this page.

00:33:40.280 --> 00:33:46.500
I can also put in the URL, like some small text at the bottom of the lecture slide so people can play around with it afterward.

00:33:46.500 --> 00:33:54.020
You need a URL shortening service, like a pandas.toot.or slash 170.

00:33:54.020 --> 00:33:55.440
Yeah, yeah.

00:33:55.440 --> 00:33:58.300
I don't even know .ORs or domains, but they should be.

00:33:58.300 --> 00:33:59.300
I don't know. Maybe.

00:33:59.300 --> 00:34:03.100
But like a bit.ly equivalent of a short one. Yeah. Cool.

00:34:03.620 --> 00:34:04.020
Yeah.

00:34:04.020 --> 00:34:09.440
All right. Well, I do see there's a place I can suggest improvements. So like I can just talk to you and tell them.

00:34:09.440 --> 00:34:11.780
Yeah, yeah. Just send us a little email.

00:34:11.780 --> 00:34:19.080
Yeah. One thing we do want to do is to include like a, like save this diagram as a PNG or SVG button.

00:34:19.080 --> 00:34:19.880
Oh, nice.

00:34:19.880 --> 00:34:23.040
We haven't gone around to it, but we would like to include that at some point.

00:34:23.040 --> 00:34:26.360
Yeah, that'd be great. You know what would be fantastic is save it as an animated GIF.

00:34:26.360 --> 00:34:27.780
Yeah, that would be cool.

00:34:27.780 --> 00:34:32.180
Where you could sort of see like the little arrows run by or something.

00:34:32.580 --> 00:34:33.320
Yeah, that'd be fun.

00:34:33.320 --> 00:34:35.940
That's a cool idea. Yeah. Yeah. Think about that.

00:34:35.940 --> 00:34:42.720
Well, just give me more work. So super cool project. This project is part of your PhD work, right?

00:34:42.720 --> 00:34:43.520
Yeah, that's right.

00:34:43.520 --> 00:34:46.420
Yeah. What's next? Where's it going from here?

00:34:46.560 --> 00:35:13.300
I'm looking to graduate like next year's spring. So my hope is that this project will be like a major piece of piece of the thesis and I'm going to talk about it a lot. And as for the tool next steps in the short term, we'd like to expand the types of visualizations it can do. So right now it doesn't know how to do joins, for instance, or pivots. And so we really like to include those because those also tend to be like really confusing for people learning.

00:35:13.300 --> 00:35:17.000
Right. And they're in the group by category of hard to understand. Yeah.

00:35:17.000 --> 00:35:17.960
Yeah. Yeah.

00:35:18.120 --> 00:35:19.180
I think they're worse, actually.

00:35:19.180 --> 00:35:30.300
Yeah. It's a toss up, I think, in my experience. People, students who struggle, students will always have one, at least one of those three to struggle with. Group buys, joins, and pivots. Those three are just really confusing.

00:35:30.300 --> 00:35:57.420
And longer term for this tool, we're thinking it would be great to have it, as I alluded to a little bit earlier, have a version of it that we can embed into Stack Overflow or even the Pandas documentation itself. And we're also looking at different alternative ways of drawing arrows and colors to see what can help students. And then we're also looking at ways of applying this general code analysis approach to other tools for visualization.

00:35:57.420 --> 00:36:11.300
Yeah. There's certainly other tools that could benefit from it, although not so many of them as popular as Pandas. But for example, like Dask. Dask is panda-like, but it's fairly complicated what happens to compute stuff.

00:36:11.300 --> 00:36:11.780
Yeah.

00:36:11.780 --> 00:36:19.200
I mean, not understanding the ideas of it necessarily, but it's like, okay, well, it's going to go after this cluster and these things happened. There could be interesting things there.

00:36:19.200 --> 00:36:33.500
Yeah, totally. Like there's Dask and now there's like other tools like Ray and like, there's even, even like if we're going really far out, there's like tools like Spark and like MapReduce and stuff that distribute computing across different computers. Visualizing those would be really cool.

00:36:33.500 --> 00:36:40.780
Because, you know, for me as a user of those tools, sometimes it's like when like one computer breaks, it's really hard to debug and figure out what happened.

00:36:40.920 --> 00:36:44.220
It definitely is. Another one is just database queries.

00:36:44.220 --> 00:36:45.200
Oh yeah, for sure.

00:36:45.200 --> 00:37:01.560
Right. I mean, it's pretty similar. You've got like group buys, you've got sorting, you've got filtering, select where clauses. And yeah, I think that would be a pretty natural match as well. But yeah, there's a lot of places for it to go. So very cool. Are you using this in any of your courses and things like that?

00:37:01.560 --> 00:37:22.560
At the moment, I'm not teaching any data science courses, but this summer I will be teaching a course at UC San Diego. And so I'm really hoping to use this tool to like make some little diagrams to copy and paste into my lecture slides. Before I would make these diagrams manually using like Google slides, like arrows and shapes and such. But it's a huge pain. It's a massive pain.

00:37:22.560 --> 00:37:30.580
Oh gosh, I know. It's so painful. As somebody who does online courses, I'm like, I really want to put some arrows and show how this goes. Like, oh boy, this is a lot of work.

00:37:30.580 --> 00:37:32.460
It's a lot of work. It's a lot of work.

00:37:32.460 --> 00:37:52.360
Yeah. I've actually used a Python tutor in my beginner Python course to show people like, okay, when you have two variables, but they point to the same object in memory, here's why changing one of them changes the other, for example, because you're really the same. They're just like pointing at the same thing. So they're changing the thing they point at and whatnot. Pretty cool. So very nice.

00:37:52.360 --> 00:37:55.360
Yeah. And you're also working on a book, right?

00:37:55.360 --> 00:38:02.740
Yeah. It's a book. The website right now says principles and techniques of data science, but we're renaming the book to learning data science.

00:38:02.740 --> 00:38:05.400
Okay, cool. Now, when is that coming out?

00:38:05.400 --> 00:38:09.980
Ooh, that's a great question. A question to ask every book author.

00:38:09.980 --> 00:38:11.060
Yes, I know.

00:38:11.060 --> 00:38:20.580
We're really hoping to get a first cut of it by the end of this year. We're about like one third or halfway through the content right now.

00:38:20.900 --> 00:38:32.880
But we're hoping to get like the first cut of it out by the end of this year and then going through the whole like editing cycle and like publication, like before publication work and have it published sometime in the year after.

00:38:32.880 --> 00:38:35.040
Yeah. Fantastic. Well, good luck on that.

00:38:35.040 --> 00:38:41.320
You know, we are getting a little bit short on time, mostly because I have an extra tight constraint today. Sorry about that.

00:38:41.320 --> 00:38:41.760
No problem.

00:38:42.000 --> 00:38:52.300
But let's talk a little bit about the internals. So we talked about uploading some code in the text area field of the website, how it runs in a Docker container. It has restrictions.

00:38:52.980 --> 00:39:02.800
But how do you all pull this off? Like understanding some of these things that we're getting color and pictures and arrows for. I don't think that's built into Pandas or Python, is it?

00:39:02.800 --> 00:39:03.640
No, it's not.

00:39:03.640 --> 00:39:04.720
How do you pull this off?

00:39:04.880 --> 00:39:16.740
Yeah. So what we're doing to actually make this work is we're parsing the code behind the scenes and then running each step like using a sort of like a debugger.

00:39:17.120 --> 00:39:30.580
So what we're doing is we parse the code to split it up into the steps that we want to run. So in this case, we would split it up to say the first step is dogs and the second step is filtering. And the third step is sorting and then grouping and then taking the max.

00:39:30.580 --> 00:39:37.980
So you don't go all the way down to like disassembly. Do you like disk dot disk? Because that many more steps than this. Okay.

00:39:37.980 --> 00:39:50.080
Yeah. Yeah. So we're trying to keep it roughly at like the level of function calls. We just split up into its individual function calls. And in this case, we have like a slice syntax for filtering. So we split that up as well.

00:39:50.080 --> 00:39:56.160
Okay. So then you basically run each step. You have the before data frame and the after data frame.

00:39:56.160 --> 00:39:58.200
That's right. Yeah. So we run each step.

00:39:58.200 --> 00:39:59.800
Unwound expression. Yeah.

00:39:59.800 --> 00:40:10.520
We run each step, get like the left-hand side and the right-hand side. And then we essentially have some like special rules where if we do sort values, we'll like use this rule for drawing arrows.

00:40:10.520 --> 00:40:18.500
If we see a group by, we'll use this rule for drawing arrows. So underneath the hood is really just a lot of heuristics and rules for specific pandas functions.

00:40:18.500 --> 00:40:26.500
Yeah. So you might say, all right, if it's doing a group by and here's the groups, here's how we're going to understand which group this goes to.

00:40:26.500 --> 00:40:29.460
So you're like, all right, it's grouping on the type column.

00:40:29.460 --> 00:40:30.120
That's right.

00:40:30.120 --> 00:40:32.440
So then you know which thing to point it to. I see.

00:40:32.440 --> 00:40:37.540
Yeah, that's right. And we could have done a smarter approach using like some, like, I don't know,

00:40:37.540 --> 00:40:39.500
some deeper co-analysis or machine learning.

00:40:39.640 --> 00:40:46.820
But I think for teaching purposes, we really wanted to avoid the case where we draw arrows like wrongly.

00:40:46.820 --> 00:40:49.060
So we draw arrows that are not supposed to be there.

00:40:49.060 --> 00:40:49.940
Yeah.

00:40:49.940 --> 00:40:51.860
That'd be confusing, wouldn't it?

00:40:51.860 --> 00:40:57.960
Yeah. Yeah. And especially for learners, like we would rather just like not draw arrows and draw wrong arrows.

00:40:57.960 --> 00:41:01.060
I think that was like our main, one of the main design decisions here.

00:41:01.200 --> 00:41:06.300
So that's why we resorted to like a simple approach of just using like rules and heuristics, but it gets the job done.

00:41:06.300 --> 00:41:11.660
Sure. What about source code? Can people come and check it out and play with it?

00:41:11.660 --> 00:41:14.460
Or is it really they can just play with the website?

00:41:14.460 --> 00:41:17.160
Right now, only the website's available for the public.

00:41:17.160 --> 00:41:21.000
Like the source code right now, we're thinking about like making it open source.

00:41:21.000 --> 00:41:25.180
But right now it's not really in a state for the rest of the world to see.

00:41:25.180 --> 00:41:27.300
Uh-huh. What about the front end stuff here?

00:41:27.300 --> 00:41:30.280
When I went and did a view source on it, there's not a lot to see.

00:41:30.280 --> 00:41:37.140
Basically some JavaScript and like five or six empty locations on the page, right?

00:41:37.140 --> 00:41:38.720
What's the story there?

00:41:38.720 --> 00:41:42.160
Yeah. Yeah. So the front end code is a similar story as the back end code.

00:41:42.160 --> 00:41:46.640
It's like pretty messy and very specific to our workflows right now.

00:41:46.800 --> 00:41:53.880
So getting, so essentially the issue right now is getting it set up on someone else's computer would be like a massive pain.

00:41:53.880 --> 00:42:02.180
That's one of the main issues with releasing the source code out is that if we were to release it right now as open source and people want to play around with it,

00:42:02.180 --> 00:42:09.600
then we would probably get tons of emails from people asking how to like debug this one like really weird step that we're doing or how to make it work.

00:42:09.600 --> 00:42:11.740
So that's something that we'd like to get around to.

00:42:11.740 --> 00:42:15.820
But for the first release, unfortunately, we ran out of time and we just wanted to get the tool out the door.

00:42:15.960 --> 00:42:19.360
Yeah, I know. That's the most useful bit is for people to go and play with it, right?

00:42:19.360 --> 00:42:19.960
Yeah. Yeah.

00:42:19.960 --> 00:42:23.940
Fantastic. Any chance of an offline version like a progressive web app?

00:42:24.940 --> 00:42:35.540
So I actually would like a version of this tool that would work as a JupyterLab extension because JupyterLab has like a Python back end that we can make use of.

00:42:35.540 --> 00:42:35.760
Yeah.

00:42:35.760 --> 00:42:44.120
So I could totally imagine this being used like directly in a notebook and displaying the diagrams directly in a notebook without needing to go to planetary.com.

00:42:44.340 --> 00:42:46.340
What about WebAssembly and PyIodide?

00:42:46.340 --> 00:42:48.120
Oh, yeah, yeah. We thought about that too.

00:42:48.120 --> 00:42:50.480
That's another like far-fetched idea we like to do.

00:42:50.480 --> 00:42:53.340
We've seen like PyIodide right now is just super cool to me.

00:42:53.340 --> 00:42:54.740
And I'd really like to do it.

00:42:54.740 --> 00:42:58.280
And you could turn on like the internet accessibility and stuff again, right?

00:42:58.280 --> 00:42:58.560
Totally.

00:42:58.560 --> 00:42:59.420
Because it's all running on the cloud.

00:42:59.420 --> 00:43:02.440
They're only going to hack themselves or use their own resources, right?

00:43:02.440 --> 00:43:03.220
Yeah, yeah.

00:43:03.220 --> 00:43:03.820
You know what?

00:43:03.820 --> 00:43:04.260
That's great.

00:43:04.260 --> 00:43:04.780
That's a great point.

00:43:04.780 --> 00:43:05.740
I didn't even think about that.

00:43:05.800 --> 00:43:07.000
But that totally makes sense.

00:43:07.000 --> 00:43:08.760
It's coming along pretty well.

00:43:08.760 --> 00:43:15.140
And Steve Dower was just telling us that they're starting to do official WebAssembly builds out of CPython.

00:43:15.140 --> 00:43:19.600
So it's a little more stable than some other projects.

00:43:19.600 --> 00:43:22.260
So I think there's progress in the WebAssembly space.

00:43:22.260 --> 00:43:27.820
And the PyIodide guys have got some of the data science libraries compiled into it.

00:43:27.820 --> 00:43:29.400
Yeah, possibly.

00:43:29.400 --> 00:43:33.440
I don't know what that means in terms of your system that understands and takes it apart.

00:43:33.440 --> 00:43:34.560
That could be totally tricky.

00:43:34.840 --> 00:43:36.020
But maybe that's an option.

00:43:36.020 --> 00:43:37.480
Yeah, I think it's really viable.

00:43:37.480 --> 00:43:39.580
I really like to look into it in the months to come.

00:43:39.580 --> 00:43:40.540
Yeah, for sure.

00:43:40.540 --> 00:43:41.020
All right.

00:43:41.020 --> 00:43:43.840
Well, Sam, I'm afraid that's all the time we got to talk about today.

00:43:43.840 --> 00:43:49.420
So before, though, we get to move off of this, tell us about the final two questions.

00:43:49.420 --> 00:43:52.420
If you're going to write some Python code, what editor are you using these days?

00:43:52.420 --> 00:43:54.420
My editor right now is VS Code.

00:43:54.420 --> 00:43:55.260
I've flipped.

00:43:55.260 --> 00:44:01.500
I've jumped editors from like Notepad++ to like Sublime to like Vim and Emacs.

00:44:01.500 --> 00:44:04.040
And now I'm settling into the VS Code world.

00:44:04.040 --> 00:44:04.640
It's got me.

00:44:04.760 --> 00:44:05.480
Yeah, cool.

00:44:05.480 --> 00:44:05.880
Right on.

00:44:05.880 --> 00:44:08.140
And then notable PyPI package.

00:44:08.140 --> 00:44:08.600
Ooh.

00:44:08.600 --> 00:44:10.240
Something you found, you're like, oh, that's really cool.

00:44:10.240 --> 00:44:14.100
Honestly, I'm really vibing with TQDM right now.

00:44:14.100 --> 00:44:16.320
I always forget how to pronounce it, but I really like that one.

00:44:16.320 --> 00:44:19.340
It displays a little progress bar for looping.

00:44:19.340 --> 00:44:21.660
And I just think it's a really nicely done package.

00:44:21.660 --> 00:44:21.980
Yeah.

00:44:21.980 --> 00:44:26.060
If you just do wrap, just do a decorator and you do a for loop or something like that.

00:44:26.060 --> 00:44:29.860
I don't remember the exact API, but then you just do a for loop and it'll just automatically

00:44:29.860 --> 00:44:30.900
do a progress bar.

00:44:30.900 --> 00:44:31.400
That's right.

00:44:31.400 --> 00:44:32.060
It's fantastic.

00:44:32.060 --> 00:44:32.440
That's right.

00:44:32.440 --> 00:44:32.960
I love it.

00:44:32.960 --> 00:44:33.260
Yeah.

00:44:33.260 --> 00:44:34.140
Super cool.

00:44:34.140 --> 00:44:34.740
All right.

00:44:34.740 --> 00:44:35.600
Final call to action.

00:44:35.600 --> 00:44:38.360
People want to visualize their Pandas code.

00:44:38.360 --> 00:44:39.440
What do you tell them?

00:44:39.440 --> 00:44:44.320
I tell them, go to pandasvery.com and put your code in and see what comes out.

00:44:44.320 --> 00:44:44.700
Awesome.

00:44:44.700 --> 00:44:48.300
And I encourage people when you go there, try to interact with the diagrams, right?

00:44:48.360 --> 00:44:52.580
There's a lot of stuff going on that it doesn't look at first interactive, but it is.

00:44:52.580 --> 00:44:53.980
So yeah, go play around.

00:44:53.980 --> 00:44:55.420
Sam, thanks for being on the show.

00:44:55.420 --> 00:44:56.080
Thanks, Michael.

00:44:56.080 --> 00:44:56.940
I'm great to have you here.

00:44:56.940 --> 00:44:57.840
It was really great.

00:44:57.840 --> 00:45:00.440
It was a lot of fun for me and I really enjoyed talking to you about it.

00:45:00.440 --> 00:45:00.700
Same.

00:45:00.700 --> 00:45:01.120
Bye.

00:45:01.120 --> 00:45:01.460
Okay.

00:45:01.460 --> 00:45:01.980
See you.

00:45:03.660 --> 00:45:06.300
This has been another episode of Talk Python To Me.

00:45:06.300 --> 00:45:08.120
Thank you to our sponsors.

00:45:08.120 --> 00:45:09.720
Be sure to check out what they're offering.

00:45:09.720 --> 00:45:11.140
It really helps support the show.

00:45:11.140 --> 00:45:16.020
Add high-performance, multi-party video calls to any app or website with SignalWire.

00:45:16.020 --> 00:45:22.140
Visit talkpython.fm/SignalWire and mention that you came from Talk Python To Me to get started

00:45:22.140 --> 00:45:23.260
and grab those free credits.

00:45:23.820 --> 00:45:27.940
For over a dozen years, the Stack Overflow podcast has been exploring what it means to

00:45:27.940 --> 00:45:32.240
be a developer and how the art and practice of software programming is changing the world.

00:45:32.240 --> 00:45:36.700
Join them on that adventure at talkpython.fm/Stack Overflow.

00:45:36.700 --> 00:45:38.680
Want to level up your Python?

00:45:38.680 --> 00:45:42.720
We have one of the largest catalogs of Python video courses over at Talk Python.

00:45:42.720 --> 00:45:47.900
Our content ranges from true beginners to deeply advanced topics like memory and async.

00:45:47.900 --> 00:45:50.560
And best of all, there's not a subscription in sight.

00:45:50.560 --> 00:45:53.460
Check it out for yourself at training.talkpython.fm.

00:45:53.900 --> 00:45:58.140
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

00:45:58.140 --> 00:45:59.460
We should be right at the top.

00:45:59.460 --> 00:46:04.620
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

00:46:04.620 --> 00:46:08.820
and the direct RSS feed at /rss on talkpython.fm.

00:46:08.820 --> 00:46:12.260
We're live streaming most of our recordings these days.

00:46:12.260 --> 00:46:15.660
If you want to be part of the show and have your comments featured on the air,

00:46:15.660 --> 00:46:20.100
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

00:46:20.100 --> 00:46:21.940
This is your host, Michael Kennedy.

00:46:22.220 --> 00:46:23.220
Thanks so much for listening.

00:46:23.220 --> 00:46:24.380
I really appreciate it.

00:46:24.380 --> 00:46:26.300
Now get out there and write some Python code.

00:46:26.300 --> 00:46:27.160
Bye.

00:46:27.160 --> 00:46:27.280
Bye.

00:46:27.280 --> 00:46:27.340
Bye.

00:46:27.340 --> 00:46:27.340
Bye.

00:46:27.340 --> 00:46:27.960
Bye.

00:46:27.960 --> 00:46:28.280
Bye.

00:46:28.280 --> 00:46:29.280
Bye.

00:46:29.280 --> 00:46:30.280
Bye.

00:46:30.280 --> 00:46:30.280
Bye.

00:46:30.280 --> 00:46:30.280
Bye.

00:46:30.280 --> 00:46:30.280
Bye.

00:46:30.280 --> 00:46:30.280
Bye.

00:46:30.280 --> 00:46:31.280
Bye.

00:46:31.280 --> 00:46:31.280
Bye.

00:46:31.280 --> 00:46:32.280
Bye.

00:46:32.280 --> 00:46:33.280
Bye.

00:46:33.280 --> 00:46:34.280
Bye.

00:46:34.280 --> 00:46:35.280
Bye.

00:46:35.280 --> 00:46:36.280
Bye.

00:46:36.280 --> 00:46:37.280
Bye.

00:46:37.280 --> 00:46:38.280
Bye.

00:46:38.280 --> 00:46:39.280
Bye.

00:46:39.280 --> 00:46:40.280
Bye.

00:46:40.280 --> 00:46:41.280
Bye.

00:46:41.280 --> 00:46:42.280
Bye.

00:46:42.280 --> 00:46:43.280
Bye.

00:46:43.280 --> 00:46:43.780
you

00:46:43.780 --> 00:46:44.280
you

00:46:44.280 --> 00:46:44.780
you

00:46:44.780 --> 00:46:46.780
Thank you.

