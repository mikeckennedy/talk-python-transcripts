00:00:00 The great power of Python is it's over 400,000 packages on PyPI to serve as building blocks for your app.

00:00:06 How do you get those needed packages on your dev machine and manage them within your project?

00:00:11 What about production and QA servers?

00:00:13 And I don't even know where to start if you're shipping built software to non-developer end users.

00:00:18 There are many variations on how this works today, and where we should go from here has been a hot topic of discussion.

00:00:24 So today, that's the topic of Talk Python.

00:00:27 I have a great panel of guests, Steve Dower, Pradyun Gedam, Ofek Lev, and Paul Moore.

00:00:33 This is Talk Python to Me, episode 406, recorded February 21st, 2023.

00:00:39 Welcome to Talk Python to Me, a weekly podcast on Python.

00:00:55 This is your host, Michael Kennedy.

00:00:57 Follow me on Mastodon, where I'm @mkennedy, and follow the podcast using @talkpython, both on fosstodon.org.

00:01:04 Be careful with impersonating accounts on other instances.

00:01:07 There are many.

00:01:07 Keep up with the show and listen to over seven years of past episodes at talkpython.fm.

00:01:13 We've started streaming most of our episodes live on YouTube.

00:01:17 Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:25 This episode is brought to you by Cox Automotive.

00:01:28 Use your technical skills to transform the way the world buys, sells, and owns cars at talkpython.fm/cox and by Sentry.

00:01:36 Don't let those errors go unnoticed.

00:01:38 Use Sentry.

00:01:38 Get started at talkpython.fm/sentry.

00:01:43 Steve, Paul, Ofek, and Predian, welcome all to Talk Python To Me.

00:01:47 Happy to have a year.

00:01:48 Thanks, Dennis.

00:01:48 Yeah, you bet.

00:01:49 New for some of you.

00:01:50 Welcome back for some others.

00:01:52 So either way, still great.

00:01:54 Let's just go around the video square here and have you all just do a quick introduction.

00:01:59 I know, like I said, some of you have been here before, but it may have been a while.

00:02:02 So, Steve, you want to kick us off?

00:02:04 My name is Steve Dower.

00:02:04 Zuba on Twitter and GitHub in various places.

00:02:07 I'm CPython core developer.

00:02:09 And I actually got involved in Python in the first place to help with packaging.

00:02:13 And while I'm not kind of officially closely involved with packaging as much now, I still

00:02:18 help contribute.

00:02:19 Yeah, awesome.

00:02:20 And you're also pretty notable for helping step up Python's game on Windows.

00:02:25 Yeah, along with some of the others in this panel, actually.

00:02:28 We've got a few of the Windows contributors here.

00:02:31 Yeah.

00:02:31 But yeah, that's kind of my focus area.

00:02:33 Yeah, awesome.

00:02:33 Paul, welcome.

00:02:34 Happy to have you here.

00:02:35 Hi, nice to be here.

00:02:37 I'd say I'm Paul.

00:02:38 I'm a core Python developer and a pip maintainer, two things I'm most involved in.

00:02:44 I'm also, for my sins, the PEP delegate for packaging standards, if you like.

00:02:51 So basically anything that's a PEP around interoperability between packaging tools comes to me ultimately

00:03:00 for the decision on how it's going.

00:03:03 I've been around in packaging for years now, so I've got quite a lot of the history behind me,

00:03:07 which is also useful in this server discussion.

00:03:10 Yeah, absolutely.

00:03:11 Very much involved with pip.

00:03:13 And that's at the heart of this, right?

00:03:16 That's probably the earliest tool there, yeah.

00:03:18 It's a venerable one.

00:03:19 Yeah, welcome.

00:03:21 Hey, yeah.

00:03:21 I'm the primary maintainer of Hatch, which has been around for a few years.

00:03:27 But more recently, I rewrote it from scratch to better satisfy kind of what I wanted and what more users wanted the UX to look like.

00:03:35 It comes with a build back end hatchling, too, that is also a bit new.

00:03:40 So yeah, my primary focus is the user experience, making things as easy and less prone to errors as possible with perspective and fade and stuff like that.

00:03:52 Excellent.

00:03:52 Yeah.

00:03:52 So Hatch is in the general category of these higher level tools that work on top of the lower level Python ones to provide more consistent workflows for doing things.

00:04:03 And that's kind of the heart of this discussion, honestly, is like, what should those workflows be?

00:04:08 What tools should be responsible for it?

00:04:10 And so on.

00:04:10 We're not quite there yet because Pravyan still has to introduce himself.

00:04:14 Indeed.

00:04:14 Hi, I'm Pravyan.

00:04:15 I am a maintainer on pip, FLIT, and a few more Python packaging stuff.

00:04:21 I'm also the maintainer of Tomo, as well as, well, I guess I'm a new C-Python code developer as of.

00:04:29 So yeah, that's me.

00:04:31 Yeah, welcome.

00:04:32 You're doing a lot of cool stuff.

00:04:33 So we're all here together because, let me pull this up my screen really quick.

00:04:40 Because of this discussion over on discuss.python.org, it's multi-part, which is notable for how long just a part of it is, Python packaging strategy discussion.

00:04:52 And part one, if you scroll down just a little bit, it says that there are 272 replies and 150 minutes of reading time.

00:04:59 And that's before we get to the related blogs, the GitHub issues, part two, the survey results, all of these things.

00:05:06 So this is quite a discussion, and a lot of people seem to care a lot about it.

00:05:12 I don't think you've brought your screen up there for us, Michael.

00:05:13 Oh, I have not, have I?

00:05:14 There we go.

00:05:15 Thank you.

00:05:15 Yeah.

00:05:16 So let's start the discussion with maybe a summary of what's going on here.

00:05:21 This was posted by Shamika, who unfortunately couldn't be here today, was going to be here, but can't make it.

00:05:26 So I'm going to have to let whoever feels most qualified to jump in on this.

00:05:30 Who wants to sort of set the stage for what this discussion was about?

00:05:34 Paul, you look like you might be willing to fight.

00:05:37 Paul looked like everybody else was backing off there.

00:05:39 Yeah, one of the things that we've wanted to do for some time now is sort of get a better feel for how the user community views packaging.

00:05:52 Shamika joined the packaging community as the project manager for the packaging effort as a whole.

00:06:00 And one of the things she initiated in that was getting a survey done to effectively try and answer those questions.

00:06:09 What do the users think of the packaging ecosystem?

00:06:12 What do they think of how things are going?

00:06:15 What do they want from Python packaging?

00:06:17 There was a fair bit.

00:06:19 There was a, I don't honestly know how big the response was, but it was quite, we got quite a decent response from it,

00:06:26 which basically got summarized up in a couple of feedback documents.

00:06:30 Yeah, I think, here we go.

00:06:32 There's a PDF that I'll link to that has the actual survey responses.

00:06:37 Yeah, and it turns out that putting a banner on PyPI.org seems to be the winner in terms of reaching out to people who care.

00:06:45 We have almost 8.7k responses and 7.9k out of those are from PyPI.

00:06:51 So that's more than 90%.

00:06:54 Yeah, absolutely.

00:06:55 Basically, from that, the discussions on Python discourse are following on from that,

00:07:01 taking a number of the messages that came out of the survey, and essentially getting everybody in the packaging community together to talk about, you know,

00:07:13 what does this mean?

00:07:14 What do we expect we can do about this?

00:07:16 How do we address the comments that have been made?

00:07:19 Where do we take it?

00:07:21 There are a number of discussions planned.

00:07:25 I don't know how many.

00:07:27 The first one, Pradian's either waving at me or suggesting it's five.

00:07:33 The first one is the one that we've had already, the sort of main strategy.

00:07:39 There are a number of follow-ups to that, one of which has just started, but most of which haven't taken place yet.

00:07:45 So where we're at now, the initial discussion, which was the thread that you showed previously,

00:07:52 that went on for about a month on discourse, generated quite a lot of discussion.

00:08:00 And we now need to sort of digest that and understand where that leaves us and what actions we can take from it,

00:08:07 what conclusions we can draw, how we pull that together into something that we can actually do something with, I guess.

00:08:13 Yeah.

00:08:13 And I think it's worth adding that this is not kind of an unusual thing for our packaging kind of participants.

00:08:20 We have quite a significant history of a few comments kicking off a huge discussion that flows and fragments and drags on for hundreds of posts.

00:08:31 And this one actually feels a bit different.

00:08:33 This one feels like there's a real sort of commitment from certainly some of the main players who are involved in it.

00:08:39 You know, if you look at the regular posters in that other thread, then, you know, you'll see a lot of us up near the top.

00:08:43 But there's also a number of other people involved who are, it feels more serious this time.

00:08:48 It feels like we really not just feeling or recognizing pain that we've always kind of seen and known is out there for a lot of people using it.

00:08:56 But it feels like we're kind of at a place where something has to give.

00:08:59 And I feel like we're getting closer and closer to being able to change whatever it is that needs to change to make that give.

00:09:05 So I think it's an exciting set of discussions, though it is long and meandering and drawn out.

00:09:12 And occasionally a little frustrating.

00:09:14 I've taken a few breaks during it just to cool off.

00:09:18 And I suspect some of the others in here have as well.

00:09:20 But it is a lot of it's nothing new.

00:09:23 It's nothing that we haven't heard or come across before.

00:09:26 Having it laid out the way the survey did gave us a real kind of strong starting point.

00:09:31 And there's just a lot of honestly discussion.

00:09:34 A lot of things that have to be talked through because we're all different people with different backgrounds, different areas and trying to get aligned.

00:09:41 Well enough to then align the random group of volunteers who make up this group.

00:09:47 It's like we jokingly call it a packaging authority, but that's the biggest joke in the world.

00:09:53 And so to actually align the volunteers working on independent projects takes a huge, you know, we've got to build up that momentum and that alignment before we can even start, you know, changing projects.

00:10:04 Yeah, there it is.

00:10:05 There's a couple of levels of this, right?

00:10:07 I mean, as a broad Python community, we've got to get enough alignment that people will back it.

00:10:12 But there's a bunch of people who would have to build whatever variant of this you might pick.

00:10:18 And you've got to agree on that as well.

00:10:20 And many of them are working on different tools.

00:10:23 Pradion mentioned Flit and Pip.

00:10:25 In fact, it's Hatch and Hatchling.

00:10:27 Paul is Pip.

00:10:28 Like, in some sense, the discussion might be, well, should pip take on the responsibilities of Flit?

00:10:34 Or should it do less?

00:10:35 And Hatch takes on, you know, there's this give and take, which I think is going to be an interesting thing to see play out.

00:10:43 We've had a thousand flowers bloom sort of moment, I think, with the packaging.

00:10:47 We've seen a bunch of different tools come along.

00:10:49 But that's also led to, I think, confusion with people who are like, well, one blog post said use poetry.

00:10:55 Now this one says use Hatch.

00:10:57 This other one said don't use any of them.

00:10:58 What do I do?

00:10:59 I'm new.

00:10:59 I'm confused.

00:11:00 Yeah.

00:11:01 Well, before we move on, just sort of summarizing your thoughts of this overall discussion, just kicking it off.

00:11:06 You know, Ofec and Pradion, you haven't got a chance to weigh in.

00:11:09 Ofec, what do you think?

00:11:10 Yeah, I will say, although the main sentiment about the takeaway from the survey was that people wanted more unification and sort of guidance,

00:11:19 I think the thread itself was not as much about that, but just like a myriad issues.

00:11:26 So only one of the issues was actually about tools and user experience.

00:11:31 Other people brought up other longstanding issues.

00:11:34 Like we want more integration with Conda.

00:11:37 That's a large topic there.

00:11:39 Some other people want better support for essential modules and detection of like GPU, stuff like that.

00:11:47 So there's lots of needs from various communities that also have to be worked out.

00:11:53 It's not all just about user experience and things like that.

00:11:57 Sure.

00:11:58 That makes sense.

00:11:59 Pradion, you wrote a huge, great long blog post on this, which we're going to get to a little bit, but, you know, higher level first.

00:12:05 It's been productive.

00:12:06 One of the things that Steve gave me the word for is level setting.

00:12:12 There's a lot of sort of bringing everyone up to context on or bringing everyone up to the same amount of information and sort of understanding other use cases that you don't have yourself,

00:12:23 even though you're right that supports that and things like that.

00:12:27 Having all of the discussion happen has helped bring everyone up to the same page on these things.

00:12:33 One thing I want to push back and what Steve just said, which is sort of the Python packaging authority does not have authority, is probably not true.

00:12:42 We do have four here who gets the authority to decide on things directly delegated from the steering council.

00:12:49 I heard the cats.

00:12:50 That's about as far as it goes.

00:12:53 There is a level of authority involved, but it's limited because we'll get onto the structure of the PyPA, I guess.

00:13:02 But there's a lot of independent projects, a lot of independent people.

00:13:06 And one of the things that this discussion did was bring everybody together and get us interacting maybe more than we had done.

00:13:14 I think historically, it's probably worth also saying that historically, packaging started off very much one or two tools that did everything, things like disto tools and setup tools.

00:13:26 They were it.

00:13:27 And there were all sorts of issues at that time, which meant that we consciously tried to take a view that we were going to enable diversity, allow other tools to get into the mix.

00:13:41 We started by looking at how we could make alternatives to setup tools work, how we could give people choice there.

00:13:49 And from there, it's grown.

00:13:51 And we've now got choice in a lot of areas that we never used to have choice in.

00:13:54 That wasn't an accident.

00:13:56 That was a conscious decision that we made to try to give some level of competition, some level of innovation that hadn't been there beforehand.

00:14:05 One of the things that this discussion has done, well, one of the things the survey did has brought home to us the downside of that is that everybody's confused as heck, that nobody knows what to do now because we've just given them 100 million choices.

00:14:19 And that's a very fair comment.

00:14:21 It wasn't the intention, but it was an obvious consequence of that diversity that we promoted.

00:14:28 Now what we need to do and what we're trying to do on the back of the discussion, on the back of what we've learned is try and pull that back together again.

00:14:37 We've got all these tools now.

00:14:39 We want to try and, if not exactly unify them, but certainly give a clearer picture, a more this is how you do things story.

00:14:47 And part of the problem with that, one of the things that Getting Everybody Talking has done, it's made it clearer that we do need to work together.

00:14:55 We can't keep competing because the users of the tools are just lost knowing what to do.

00:15:02 So we need to bring things together, but nobody is, certainly I don't think at this point anybody is saying that we're going to shut down all the other tools, all the people working on them have wasted their time.

00:15:13 That's not the idea at all.

00:15:14 But we still need to navigate how we get a more unified approach within the context that we've got, which is a lot of people working on their own vision of how they are serving a subset of the overall group of users.

00:15:30 Like Steve said, I think it's been really useful getting everybody together and everybody getting each other's perspectives.

00:15:35 We now need to work out what to do with that, frankly.

00:15:39 This portion of Talk Python to Me is brought to you by Cox Automotive.

00:15:44 Cox Automotive isn't a car company.

00:15:47 It's a technology company that's transforming the automotive industry.

00:15:51 The team at Cox Automotive understands the future of car buying and ownership,

00:15:56 and they're looking for software developers, data engineers, scrum masters, and other experts to help make that happen.

00:16:03 If you're interested in innovating with brands like Kelly Blue Book, Auto Traders, and others, then you should check out Cox Automotive.

00:16:11 Just visit talkpython.fm/cox to find out more.

00:16:15 Thank you to Cox Automotive for sponsoring the show.

00:16:20 One thing that stood out to me from reading the survey, and we can poke through some of the interesting questions and responses there.

00:16:27 I feel like there's two users that almost need two approaches.

00:16:32 There are people who are creating libraries and shipping them to PyPI, and they're kind of core Python developer folks.

00:16:40 Not core developers, but they live and breathe Python, and they build Python things, and stuff like Pydantic or FastAPI and so on.

00:16:48 They might need the flexibility and the diversity.

00:16:52 Sarah, the new grad student in the biology department that needs to get pandas to work, and she knows that Python is her path forward.

00:17:00 She shouldn't have to decide whether to use Flit or Hatch or straight pip plus maybe pip-tools.

00:17:06 These are two very different use cases, and almost like bringing them together to, well, what's the best of those two solutions together seems almost maybe the wrong.

00:17:15 You might make both groups unhappy going down that path.

00:17:18 If we bring together the current 8,000 tools, it's going to make 7,999 groups unhappy.

00:17:24 I mean, this is part of the challenge.

00:17:27 Though I think an interesting thing there, and probably about halfway through this mega thread, it kind of clicked, at least for me.

00:17:34 I think some people had mentioned it earlier, that there's really two big categories of tools.

00:17:39 Kind of as you say, there's the tools for packaging and the tools for using packages, which includes what seems to be the biggest issue is the environment managers.

00:17:48 It's the virtual environment creation, which is kind of half of poetry, but not the other half.

00:17:55 A big part of Hatch, but not the other half.

00:17:57 It's none of Flit.

00:17:59 It's none of setup tools.

00:18:01 It's like those are purely about building packages.

00:18:03 And it's on this side, the building packages, where we've invested in kind of creating and driving that diversity.

00:18:10 And I think that's worked really well.

00:18:12 We've got a range of standards that make them interoperable at the right places so that pip can take kind of any of these backends and trigger them correctly.

00:18:23 Source code written to provide metadata for any of these backends can be easily transferred between a lot of them.

00:18:29 That seems to mostly work.

00:18:31 And it's a situation where, again, as you say, the deep in Python maintainers have a choice in what backend they want to use.

00:18:37 And what kind of clicked is people were saying, you know, we want less diversity.

00:18:43 And a lot of us were going, well, the diversity is in the backend.

00:18:46 So if you want less, then we have to combine the backends.

00:18:48 But I think what clicked is that, no, that's not what they're wanting because it is the newcomer to Python who just wants it to work, who's trying to choose between all of these environment managers.

00:18:58 And especially when you throw a condor in there as well, which is just so fundamentally different in how it behaves from the ones that kind of rely on PyPI directly.

00:19:07 We already have that divide and the diversity has shown up on this side uncontrolled.

00:19:12 Uncontrolled.

00:19:13 We didn't set out to see poetry created or see Pip-Enf created or any of these, but it's there.

00:19:19 And how do we rein in something that has grown up all by itself completely outside of anything that we've ever tried to control?

00:19:26 One thing that struck me in that discussion was I'm really quite happy with a lot of the, like Steve says, the backend tools, all that sort of stuff.

00:19:36 But it occurred to me that when I'm just writing little hobby programs and things like that for myself, I'm with everybody else.

00:19:43 Packaging is horrible.

00:19:45 I just want to say, start a project, start up a notebook, do something.

00:19:50 And it's really hard.

00:19:52 And it hadn't occurred to me until we had this discussion that that's very much the two sides of the user equation.

00:20:01 We've really not put as much effort into the just wants to use Python to do their job side of the user base than we should.

00:20:10 And tools like Hatch and PDM is another one.

00:20:13 Poetry is another one.

00:20:14 They are addressing that.

00:20:17 And I actually went off and started exploring them.

00:20:20 I thought, hey, there's cool stuff going on here that I really wasn't as conscious of as I could have been.

00:20:25 So, yeah, absolutely.

00:20:27 We need to look at that side as well now, I think.

00:20:30 I agree.

00:20:30 The Italian behavior we're talking about is like libraries versus applications.

00:20:36 So, as people have mentioned, it is very easy now to build the library and test it.

00:20:40 And that's due in large part to the standards that we made to allow diversity for the build back end.

00:20:46 So, that's very good.

00:20:48 But, yeah, it's where the applications are.

00:20:50 That's like the hard part now.

00:20:52 And I think at least one of the missing features that I think we should devote resources to, I know Brett isn't here, but locked files is something that we desperately need.

00:21:04 And poetry has their own implementation of locked files and dependency resolution.

00:21:10 So does PDM.

00:21:11 But there's nothing like standard for that.

00:21:14 And that should be the next step, I think, for applications.

00:21:17 While we're talking about the future and sort of where we are, I will point out part of the reason we're seeing a bunch of this is because we've solved some of the harder problems already.

00:21:27 We are at a point where, oh, I'm having difficulties installing pandas and figuring out how to work for that.

00:21:33 And not, I can't install pandas.

00:21:35 That's a good point.

00:21:36 Or I can't publish pandas or whatever.

00:21:39 So, we have been solving problems as we go.

00:21:42 It's just we're going to keep seeing more and more problems, especially in a user base this large.

00:21:46 There's always going to be more interesting and really difficult problems to solve.

00:21:50 I think a lot of the people who are now just trying to get on with using Python for their day job,

00:21:56 probably when we were starting the process of moving away from setup tools, they didn't even exist.

00:22:03 Python wasn't that popular in those days.

00:22:06 There's a new set of users who are coming along with a new set of problems.

00:22:11 And if we don't keep our eye on what people are trying to do with Python, we'll get left behind, I guess.

00:22:18 We won't be relevant.

00:22:19 They won't have any solutions for what they're trying to do.

00:22:22 And a lot of them came in because they believed Python was easy because we've got a reputation for being easy.

00:22:28 They wouldn't be frustrated if they thought it was going to be impossible and then found out that it's impossible.

00:22:33 They wouldn't be frustrated.

00:22:34 They wouldn't be happy, but they'd be satisfied.

00:22:37 It's because they've come in expecting this great experience that everyone's talking about.

00:22:40 And we're just not able to deliver it in enough cases that the frustration comes in.

00:22:45 And we get that.

00:22:46 We all get hit by it as well.

00:22:49 I am quite optimistic about it, though.

00:22:51 I think one person brought up a good point in one of the recent discourse threads that, despite the hardships with packaging and everything we're discussing here, Python has gained massively in popularity and usage despite all these obstacles.

00:23:07 So, yeah, I'm pretty optimistic that we can satisfy people's needs.

00:23:12 I'm too.

00:23:13 I think there's – I think Paddy didn't really hit on it.

00:23:16 I remember long ago that certain things wouldn't install.

00:23:19 Sorry, you couldn't get this to compile or this other thing wouldn't work right.

00:23:23 And it hadn't really occurred to me explicitly, but I haven't seen those errors for a real long time.

00:23:27 Yeah, and there's a lot of work that's gone into build backends to make that possible.

00:23:32 Certainly for Linux users, the huge amount of effort that went into defining the many Linux standard, which is kind of the base layout of system libraries

00:23:42 and where they're expected to be on a system so that people can build a binary package for Linux that can assume that those libraries are there and distribute those has meant that, yeah, a lot of the time when you go to install something, you'll get already built, already compiled packages that are just ready to go.

00:23:59 And kind of the problem that that's raised up is we've taken the really obvious problem of you don't have a compiled package yet up to the point where you have a compiled package that is subtly incompatible with some other compiled package,

00:24:13 which can be really subtle because it can be one of those 99% of the times it works fine and then the other time it just segfaults and everything dies.

00:24:21 Or maybe subtle data corruption, like there's a million little things that can subtly go wrong there and we're starting to see some of those come up.

00:24:28 Certainly the people in the data science side of things saw them come up quicker because they use a lot more of these complex packages and they do interact with each other and they do check things like numerical stability.

00:24:39 A lot of the rest of us don't worry about that kind of stuff most of the time.

00:24:43 And so we're like, yeah, this works.

00:24:45 This works.

00:24:45 Put it out there.

00:24:46 Maybe if wheel existed before conda, people would have just pushed harder on wheel potentially and conda might not exist.

00:24:53 Not saying it shouldn't exist, but that might, it might not have been a bad enough problem to make it.

00:24:57 I agree.

00:24:58 Like conda came into existence because the solutions that were there weren't able to satisfy it.

00:25:03 And it was so far, like just the distance from where we were at that point.

00:25:08 Because at that point, like eggs, probably no one watching even remembers eggs.

00:25:11 I'm sure Paul does.

00:25:12 At that point, it was, OFEC may as well.

00:25:15 I'm not sure how long you've been involved, mate.

00:25:17 But yeah, it was like, it was a very different world.

00:25:19 And the distance to get there just looks so impossible.

00:25:21 But yeah, if we'd been at wheels, then they may have said, well, this little tweak to wheels will make it work for us.

00:25:27 And who knows where we might have been then.

00:25:29 It's quite possible.

00:25:30 I can't judge, honestly, but it's quite possible.

00:25:33 But conda is where wheels will be in a number of years.

00:25:38 I think there are fundamental reasons why that might not be the case.

00:25:42 And we may have to find different ways of dealing with the problems.

00:25:45 But yeah, these sort of really difficult, really basically not solved technical problems.

00:25:52 It's not that Python is struggling with something that's easy.

00:25:57 There are no languages or environments anywhere that have really solved these problems.

00:26:03 So we're trying to find solutions as we go along.

00:26:07 And I think in spite of what Steve is saying, I think having an 80%, 90% solution often is plenty good enough.

00:26:16 I don't want to say that we should abandon the users who really need that because they are on the forefront of things like AI research and data science.

00:26:25 And they're doing incredible work, which they can't do if Python falls apart on them.

00:26:30 But at the same time, I think we're now in a position where we have to balance the general solution with the specialist solution and try and understand that.

00:26:38 And for a lot of us, certainly for me, that's quite new.

00:26:41 I'm not entirely comfortable yet with the idea of saying we need a different solution for this than we have for that.

00:26:48 It's something we're all getting to grips with, I think.

00:26:50 One aspect of this is also sort of kind of related to the Konda and Python success aspects of this is Python is a famously glue language.

00:27:01 So when you're trying to package or use Python, you're not just using Python.

00:27:06 You're using a whole stack of other languages and tech stacks along with it.

00:27:11 Photography uses Rots under the hood.

00:27:13 And there's Fortran code in NumPy.

00:27:17 There's all sorts of diverse tooling underneath what just looks like a Python package.

00:27:25 And that works.

00:27:27 And you are able to use these.

00:27:30 And it also introduces all the challenges that come with all of those themselves.

00:27:35 So we're in a good spot.

00:27:38 There's also a long way ahead.

00:27:40 But we're also quite a ways from where we were.

00:27:44 And I think one of the things to bring it around that the strategy discussion is doing is helping us understand where the gaps are right now and what the most painful points are right now, which is where the user survey was really helpful in telling us these are the things that at least the users that we follow and who did fill the survey think the problem and pain points are.

00:28:07 I would say just quick estimate looking at the source of the respondents from the survey.

00:28:13 that even these results lean more towards the highly committed software developer side and data science side of Python and not the super casual user.

00:28:24 There's a huge bias.

00:28:25 Yeah.

00:28:26 My example of Sarah in the biology department, she's not going to PyPI and going through surveys.

00:28:32 She might see the banner, which is, whatever, I care by biology or I care by economics.

00:28:36 Right.

00:28:37 So I think even this should be taken with a bit of a bit of a bias.

00:28:41 I think one of the useful pieces of data that we did collect was user experience, like experience level.

00:28:47 One of the things that's not a bit true but not done is sort of split this survey data that we have across various axes and see if we see other pieces of transparency here.

00:28:58 I don't think any of the people who have acted in this space have had the time to be into the data.

00:29:05 I, for one, don't have the expertise or skill set to do so.

00:29:08 So like one of the things that would be really useful is having people look through this data and come up with new insights and flag things, which is an unangering amount of work.

00:29:19 It is.

00:29:20 That's very much a common problem we have is so many people use Python who we just have no way of getting in touch with.

00:29:28 We have no way of knowing what their experience is because why would they talk to us?

00:29:34 It's like you don't go and talk to the engineers who design your car.

00:29:38 You just drive the flipping thing.

00:29:39 And there's an awful lot of people who treat Python like that.

00:29:43 And we can ask.

00:29:45 We can put surveys up.

00:29:46 But at the end of the day, like you say, the sort of people who would really, really like to get feedback from simply don't look at these sort of things.

00:29:55 They aren't involved in going on to PyPI.

00:29:59 You know, they type pip install something that the guy across the desk from them told them would work and they never see PyPI.

00:30:06 In my workplace, I was very conscious that we had some people who were dabbling in Python who didn't interact at all with the community, never even contemplated doing so.

00:30:18 And that's with me sitting next to them and saying, hey, Python's cool.

00:30:21 And that's the norm.

00:30:24 That's the actual Python user.

00:30:26 Anyone who's looking at a survey and responding to it is already in the top 5%.

00:30:32 This portion of Talk Python To Me is brought to you by Sentry.

00:30:38 How would you like to remove a little stress from your life?

00:30:40 Do you worry that users may be encountering errors, slowdowns, or crashes with your app right now?

00:30:46 Would you even know it until they sent you that support email?

00:30:49 How much better would it be to have the error or performance details immediately sent to you, including the call stack and values of local variables and the active user recorded in the report?

00:31:00 With Sentry, this is not only possible, it's simple.

00:31:03 In fact, we use Sentry on all the Talk Python web properties.

00:31:07 We've actually fixed a bug triggered by a user and had the upgrade ready to roll out as we got the support email.

00:31:13 And that was a great email to write back.

00:31:15 Hey, we already saw your error and have already rolled out the fix.

00:31:19 Imagine their surprise.

00:31:20 Surprise and delight your users.

00:31:23 Create your Sentry account at talkpython.fm/sentry.

00:31:26 And if you sign up with the code Talk Python, all one word, it's good for two free months of Sentry's business plan, which will give you up to 20 times as many monthly events as well as other features.

00:31:38 Create better software.

00:31:40 Delight your users and support the podcast.

00:31:43 Visit talkpython.fm/sentry and use the coupon code Talk Python.

00:31:50 There's a really interesting term that Scott Hanselman came up with called the dark matter developer.

00:31:56 The unseen 99%.

00:31:59 And it's exactly what you're describing here, Paul, is you can't reach them because they don't come to the meetups.

00:32:05 They don't come to the conferences.

00:32:06 They don't subscribe to the blog.

00:32:08 They just use it as a tool and go home.

00:32:10 And they shouldn't.

00:32:11 They don't, you know, it's not what they're doing.

00:32:13 Some of the best feedback that we do get in these discussions comes from, as well as kind of people who get actual issues reported to them.

00:32:21 So every time the pip maintainers are like, people are reporting this problem all the time.

00:32:25 Okay, we know that's a problem because it's getting to the developers.

00:32:27 But we also get feedback from people who do training and tutorials and people who kind of manage Python's presence in a workplace and in an organization.

00:32:37 Because in that position, and that's kind of the position that I do as well at my work, we get more of that feedback.

00:32:42 We get people complaining about things that they'd never think to take out in public, but they'll happily put on an internal list somewhere saying, hey, how come Python can't do this?

00:32:51 Right.

00:32:51 Or they'll ask for help because they actually have a job to do and they need to get it done.

00:32:55 And, you know, we're all getting paid to be there.

00:32:58 So there's no kind of fear or shame in saying, hey, can someone just tell me how to do this?

00:33:02 And so by being kind of that central point in that place, just the same as when you're teaching a class, students are going to say, this didn't work.

00:33:09 And now you see a problem.

00:33:11 And when you start seeing the same things over and over again, that becomes kind of useful additional feedback to factor into these kind of surveys.

00:33:19 And I don't think we've put a lot of weight in kind of the quantitative response here.

00:33:23 Like it's quotes.

00:33:24 It's stuff that people have put in the open spaces that, you know, the ones that have really resonated or been repeated a lot are the ones that we've pulled out into the discussion and have been working from.

00:33:34 And kind of the actual numbers is like, yeah, they could mean anything realistically.

00:33:38 And we can slice them to make them mean whatever we want.

00:33:41 Exactly.

00:33:42 So there's a careful balance there of drawing the right insights from this, knowing the limitations of what we've done.

00:33:50 As is probably the case with every survey.

00:33:52 Let me read out some of the, oh, sorry, go ahead, Nofick.

00:33:54 And then I'll read off some of the comments that actually some of the respondents actually made.

00:33:58 But go ahead.

00:33:59 Oh, yeah, no, I was going to say, I agree with Steve that I think since we have no access to these, you know, 99% of actual developers, I think what maps closest to them would be users and industry.

00:34:12 I got companies building applications, because if you're a user of Python, like kind of by definition, you're writing an app and not really building a library.

00:34:21 So I think if we hear feedback from, you know, people at companies trying to build apps facing hardships, I think that would reflect the main, main chunk of users.

00:34:33 That is a good point.

00:34:34 I made the distinction that was almost like beginner versus expert, but really, I guess how I should have phrased it is closer to what you said, Ofick, is people building applications and presentation type things that they never will share with anybody through PyPI or something.

00:34:50 They just want to get it to run.

00:34:51 Maybe they'll deploy it, but they won't publish it.

00:34:54 Versus people building Flask and Pydantic and SQLAlchemy and so on.

00:34:59 These are really different use cases.

00:35:00 So the person building that may be extremely talented and experienced, but they also have different constraints and different goals.

00:35:07 So that's a really good point.

00:35:08 All right.

00:35:09 So I'm quick respondent thoughts here, just from this discussion thread.

00:35:13 So one person says, unify multiple tools.

00:35:16 It's good to have new ideas and new implementation, but it has to converge after a while.

00:35:20 That's pretty interesting.

00:35:21 Number two, there should be one and preferably only one obvious way to do it.

00:35:26 Get rid of the fragmentation straight out of a Xenopython there.

00:35:30 Number three, I definitely want Python to introduce the one true packaging tool.

00:35:34 Ideally, both as easy as Rust's cargo and extensible package.

00:35:40 Installing is easy.

00:35:41 Package building is the wild west.

00:35:43 So that kind of speaks to potentially the other side of creating the libraries.

00:35:47 And then person forward said, blow it all away.

00:35:49 Just everything goes away.

00:35:51 Start over from scratch.

00:35:53 Paul, you had actually a comment here in this discussion about the historical perspective.

00:35:59 I think I even potentially pulled it up here saying, you know, having pip be exactly this tool might be really hard because pip has been built to do certain things and people now rely on it.

00:36:10 Right.

00:36:11 pip is in a very odd position here.

00:36:13 It is shipped with Python and it's shipped with Python for a very specific reason.

00:36:19 You've got to have something to start the whole process off.

00:36:23 You've got to be able to bootstrap.

00:36:25 If you use Hatch, how do you get Hatch on your PC?

00:36:28 You need something.

00:36:29 And pip was incorporated into the Python.

00:36:32 It's not technically part of the standard library.

00:36:35 It's installed with the standard library.

00:36:36 But let's not go there.

00:36:38 But it was incorporated to give us that bootstrapping capability.

00:36:43 At the time, that's really all pip was, was an installer.

00:36:48 It had build capabilities because you needed to build things from source because that's how you installed a lot of things.

00:36:55 I predated wheels and all that.

00:36:56 Yeah.

00:36:56 Yeah.

00:36:57 Wheels were nowhere near as common at the time.

00:37:00 Since then, things have changed.

00:37:02 But pip is still the one thing that it's where people get into the whole packaging ecosystem.

00:37:08 They have to start by saying pip install.

00:37:11 And there's a very good point which was made.

00:37:14 I mean, this is January.

00:37:15 My opinions change every 15 minutes.

00:37:18 So that was a long time ago now.

00:37:19 But there was a good point made, which is that pip is in the position to be that unified tool.

00:37:29 But it's not what it is now.

00:37:31 Other tools like Hatch or PDM or Poetry are better at being the workflow tool that people talk about when they make analogies with Rust and Cargo, for example.

00:37:41 But they don't come with Python.

00:37:42 And to balance that problem out and come up with a solution there, we can't just look at packaging in isolation.

00:37:53 One of the things Condor does, which is what allows them to solve certain problems that they solve, but at the same time is one of the reasons some people don't find Condor appropriate, is that it bundles Python.

00:38:07 You install Condor and then use that to install Python.

00:38:11 And that's a fundamentally different way of getting Python.

00:38:16 Rust has a similar thing.

00:38:17 You get rust up and that gives you rust and cargo.

00:38:19 The model is there.

00:38:21 The model is used in other places.

00:38:23 But a change like that is not something that the packaging community can agree on by themselves.

00:38:31 That would involve the core developers, the steering council.

00:38:33 It's a very, very significant change to the whole model.

00:38:38 And I think one of the things that we struggle with and one of the things I was sort of trying to get at at this point in the discussion was that we're not in a position to do that at the moment.

00:38:50 Maybe we should be.

00:38:51 One of the things coming out of this discussion is a broader look at what can we achieve, what can't we achieve.

00:38:58 But we need to work out how to take that forward if we want to.

00:39:02 So, yeah, I think pip is in an odd position because a lot of people say, why can't we add this to Pip?

00:39:10 Because pip should be the thing to do.

00:39:13 But speaking as a pip maintainer, I'm not even sure if that's what pip should be doing because we've got a lot of history.

00:39:20 We've got a lot of legacy code in Pip.

00:39:23 It will be a big disruptive change to use as a pip to add workflow.

00:39:27 Whereas Hatch is doing a great job of it.

00:39:29 PDM is doing fine.

00:39:30 We do want to get into that area.

00:39:33 And that's where, in all honesty, that's where a lot of the discussion started to veer towards big grand philosophy questions.

00:39:43 And I think a lot of people got quite frustrated because they're hard questions and nobody's got an answer.

00:39:50 People wanted action.

00:39:51 I think one of the things that came out of the survey was a real sense of urgency.

00:39:55 People said, burn it all down and create something new now.

00:39:58 We want a unified solution now.

00:40:00 And that put everybody under a sense of pressure.

00:40:03 We ought to be doing better.

00:40:05 But the reality is some of these things will take a long time.

00:40:09 And thinking about them is the first step, which is what we're doing here.

00:40:13 The analogies that people make, I find very interesting because some people do come in saying, make it more like Condor, which, as Paul said, kind of sits outside of Python.

00:40:21 But then other people say, make it more like Cargo, make it more like NPM, which kind of have the virtual environment thing built into the packaging tool.

00:40:29 So rather, but it still lives inside it.

00:40:32 And we get people always coming in with these assumptions that because pip is part of the standard distributions of Python, I'm choosing those words carefully as a core developer.

00:40:43 Because it comes with the Python.org distributions.

00:40:46 They assume that because it's included, it's going to be like the ones that are included in other languages.

00:40:51 And that's simply not the case.

00:40:53 I mean, for starters, we existed well before those did.

00:40:55 So we couldn't have copied what Rust does or what Node does.

00:41:00 But having all those requests come in kind of just show that if we did burn it down, we don't even know what people actually want built back in its place.

00:41:08 Because they're all asking for different things.

00:41:10 I think part of the challenge, people are asking for you all to decide.

00:41:14 I got that sense from a lot of this conversation, from some of the feedback, the survey results, was nobody is deciding in the core developer space.

00:41:24 Tell us how to do it.

00:41:26 We'll go with that.

00:41:27 A lot of them would say.

00:41:28 Obviously, not everyone.

00:41:29 The C-Python co-developers, well, this isn't the most polite way of saying this, but they sort of don't care about packaging.

00:41:35 The Python streamer effectively delegates all of this and says, you figure it out.

00:41:41 And while there's a bunch of people here who are co-developers, they're wearing two hats.

00:41:47 It's not a single hat.

00:41:48 And to jump back in the conversation, I'm sorry, I've done that a few times already.

00:41:53 Please do.

00:41:53 Python is a very redistributor-driven distribution model.

00:41:57 Whereas with RustUp, for example, everyone's getting Rust as the Rust team built it and as the Rust team packaged it and it ships to them.

00:42:05 Many people are getting their Python from Homebrew or from PyEand and compiling it or from ASDF and doing the same thing.

00:42:14 Or from Debian who have patched it in a bazillion ways.

00:42:20 And a lot of the Python packaging problems that people keep hitting are actually these problems in a trench coat.

00:42:28 These are Python distribution problems that are showing up when they use the packaging tooling.

00:42:32 And that causes a lot of friction there as well.

00:42:36 And solving that as probably hinted at is the last problem.

00:42:40 And it's also tricky because problems mirror your organization.

00:42:45 And as we're organized, we aren't set to solve this.

00:42:49 Not easily.

00:42:50 To be fair to the distributors, we like distributing Python as source code.

00:42:53 Like the official release of CPython is a pile of source code that someone else should build and give to you.

00:43:00 Because that's the Linux model, whichever model it is from 30 years back, is you got your operating system with the software built for it by someone who picked up all those source bundles and built it for you if you didn't do it yourself.

00:43:14 And so it's never really been built around the core team, build the binaries and distribute those.

00:43:20 And it certainly does confuse people because we do do that for Windows and we do do that for macOS because we've been able to because we never had distributors pick those up.

00:43:27 I think with...

00:43:29 In the same way that the Linux distributors did.

00:43:31 With more Windows users nowadays than we used to have, I think that confusion is much more visible.

00:43:39 The people coming from a Windows background think, well, I get Python from Python.org.

00:43:45 People coming from a Linux background think Python.org has nothing.

00:43:49 I get it from Ubuntu or it's just there.

00:43:52 I don't even know where I get it from.

00:43:54 That's something that is changing.

00:43:57 I don't know if we will ever...

00:43:59 I think languages like Rust with things like RustUp, that's a new model and it comes from much more recent how people expect things to be delivered to them.

00:44:09 And Python's got a heck of a lot of history here that isn't as easy to change as people might like to think it is.

00:44:17 I'm not saying we don't.

00:44:18 I'm not saying this isn't a challenge.

00:44:20 I guess to draw an analogy, it's similar to the source distribution versus wheel problem that we solve in some sense, wherein you can still build your own NumPy, but the NumPy developers ship a single NumPy and that has certain choices made that you can make differently.

00:44:38 I guess I wasn't trying to be combative here.

00:44:42 This is how packaging discussions always go.

00:44:45 This is how packaging discussions.

00:44:46 We always get combative.

00:44:47 We sound like we're arguing and we're actually agreeing with each other.

00:44:50 We're still just arguing together.

00:44:53 But a big difference...

00:44:54 Oh, sorry.

00:44:54 In future, I would imagine what would be best for users would be not to download a Python executable that installs, but rather you would download the workflow tool.

00:45:05 So whatever our version of cargo ends up being, that's what you would actually download and install on Windows or Mac.

00:45:13 And that would manage your Python.

00:45:16 In that case, then that would be easier to install for users and you wouldn't have the conflict of, you know, like, should pip do everything?

00:45:25 Because then it wouldn't be pip we're talking about.

00:45:28 Because right now, if you were to add workflow features to pip, that's a bit awkward because pip is in every Python.

00:45:34 So you have like multiple workflow tools on your path, which is a bit odd.

00:45:39 Yeah, then you're tied to figuring out how do I get to the right version of Python to then ask it the workflow questions?

00:45:45 And what if I get that wrong?

00:45:47 And if 3.10 is not in the path, it's installed, but why doesn't this work?

00:45:50 So on and so on.

00:45:51 Yeah, so a couple of the interesting tools that have been growing a bit in more recent times.

00:45:55 We've had the PY launcher on Windows for a while.

00:45:58 And Brett, unfortunately not here, is maintaining a PY launcher for other platforms as well.

00:46:04 And so there's some suggestion, I think Brett's actually experimenting a bit with adding some of this functionality into that tool.

00:46:10 So kind of the primary function of the PY tool is you have that one command to launch Python, and it takes an option to select which version you actually want to run.

00:46:17 So you don't end up with multiple copies on path.

00:46:20 You don't worry about which order they're in.

00:46:22 You just say PY and you'll get the latest version, whatever the latest version is, because it can do a more intelligent sort.

00:46:28 Or you say PY-3.10-3.11.

00:46:32 Or it has shebangs on Windows even, or you say the version in there?

00:46:35 Yeah.

00:46:35 The Windows one has a lot of extra functionality.

00:46:39 I briefly looked at merging the two and kind of adopting Brett's one for both platforms.

00:46:44 But honestly, the Windows one, like 5% of the functionality is launching Python, and the other 95% does not exist in the cross-platform one because it exists in the platform itself.

00:46:56 So there's a lot of other stuff that I don't even want to bring up in the Windows one.

00:46:59 But we do already have this extra tool that's getting installed everywhere, that's independently installable, that might be a suitable place to take on some of that workload.

00:47:08 I think the big challenge here, and I don't want to get into the Pip-Conda discussion again, but we have at this point 10 years worth of evidence of what happens when you put out a workflow tool that isn't strictly Python, but will give you Python.

00:47:25 And it hasn't beaten all the other workflow tools.

00:47:27 People still don't want to use the tool that does that.

00:47:30 And so I don't know if we can simply assume that providing that tool or mandating that kind of tool is going to be a winner because it exists.

00:47:39 It's been around for a long time, and it's not won.

00:47:41 I think it's proven to be a fantastic experience if it suits you.

00:47:47 That's what Condor...

00:47:48 You listen to a Condor user, and they are massively enthusiastic about it, but it's because it fits what they want to do.

00:47:56 You listen to somebody who doesn't like Condor, and they're equally frustrated with the choices it makes.

00:48:01 And I think Steve's right.

00:48:03 I think we have to learn all of the lessons, not just some of the lessons.

00:48:07 And one of the lessons here is that sort of everything in one bundle tool is a mixed blessing.

00:48:14 I'm going to call from January because that's right in front of me, and it seems very prudent.

00:48:19 Many of the respondents wanting a unified tool will have an implicit assumption that their preferred workflow will be supported.

00:48:26 There are many workflows in the queue, and trying to corral all of them into a single workflow is quite possibly a not-particle problem.

00:48:35 I don't think anybody responded to the survey saying, please give a unified workflow tool that doesn't do what I currently do.

00:48:43 Exactly.

00:48:44 Please make what I do not work.

00:48:46 Yes.

00:48:47 Or make it hard.

00:48:48 Yeah.

00:48:48 Everyone thinks their own workflow is normal, and everyone else is the weird one.

00:48:52 Speaking of workflows, I was thinking through this process and thinking of, well, what might an option be?

00:48:59 What might some other tool look like?

00:49:02 You all talk a lot about in the surveys and in the responses about a user experience, right?

00:49:08 And we've got certainly notable people in the community who are well-known for creating APIs that just connect with folks, right?

00:49:15 So I put together this idea of, what if there was a few more commands in Python itself that you didn't even have to think about?

00:49:22 Do I have pip?

00:49:23 Does it use hatch under the covers, or does it not?

00:49:27 What if you had things like Python init, Python add requests, Python upgrade all, Python build?

00:49:33 I think you've just misspelled hatch here, haven't you?

00:49:36 I probably have.

00:49:38 You've spelled hatch with a P-Y-T-H-O-N.

00:49:41 I probably have.

00:49:41 Yeah, exactly.

00:49:43 Well, but I don't have to think if pip is installed.

00:49:46 I don't think if pip is there.

00:49:48 I'm almost afraid to put this up here as a proposal, because if it got adopted, then it might be the way, and I don't like it.

00:49:56 I don't know if I would like it, but have you thought to go this far to say, we're not even going to talk about the tools that make this happen?

00:50:01 This might be pip plus hatch making this happen behind the scenes.

00:50:05 You might set an environment variable that says, please use poetry when you do this stuff, but I don't want to talk or know about poetry.

00:50:11 I just want the output of it.

00:50:12 Just Python install, that's all you tell them, versus pip install-requirements.txt.

00:50:17 Oh, I meant pip 3.

00:50:18 Wait, pip 3 doesn't exist.

00:50:19 Why doesn't pip 3 exist?

00:50:20 On and on and on, right?

00:50:22 And then if you want to do more, you use hatch, or use pip-tools, or insane, not insane.

00:50:27 I'd use that.

00:50:28 I think there is a question, like Steve said, this is almost hatch.

00:50:32 MakeApp is the one I'm looking at and thinking, please give it to me now.

00:50:35 But it's almost hatch.

00:50:37 The question is whether hatch is where it is, or PDM, or poetry, or whether it's Python.

00:50:44 If you want it to be the Python command, then I think there's a whole, we're way too far through this now to talk about the role of the PyPA,

00:50:54 and how it links to the core developers.

00:50:59 But there's a whole disconnect that we struggle with, and we continue to struggle with, which is, what can we do in packaging, and what do we need the core to be involved with?

00:51:10 Pradyum mentioned earlier, Python core, defer packaging decisions to the PyPA and to the packaging people, which is great as long as it works.

00:51:20 But when it doesn't, when we need to integrate more, we're not really there yet in knowing how to address that sort of thing.

00:51:27 So I think a tool that does something like that, it's certainly what I'm looking for.

00:51:31 It's certainly what I think a lot of people see when they say workflow tool.

00:51:37 And as I say, we've got people like Hatch and PDM and Poetry making that a reality.

00:51:42 You just made tools into people.

00:51:44 Yeah, sorry.

00:51:45 I don't know all the names.

00:51:48 But yeah, we have people making that sort of thing happen in the different tools that are around.

00:51:54 Unifying is a question that I think we need to look at.

00:51:59 And there's a clear message that having 10 different tools that do this sort of workflow is not what people want.

00:52:05 But we don't know quite what the best model is yet.

00:52:07 So there's some work to do there.

00:52:09 The massive danger, Paul, is if you pick one and it turns out to not be really that great.

00:52:13 Yeah.

00:52:14 Which we've been burnt by before.

00:52:15 Many times.

00:52:16 So it makes us a lot more hesitant to pick something.

00:52:21 I think all I'll say on this is, yeah, there's tools out there doing a lot of this.

00:52:25 The best way to get it adopted into core Python is have a tool that is clearly the winner that we can integrate that tool directly.

00:52:33 And so the transition path becomes if you're using Python 3.36 or whatever version it makes it into, then you have Python that command.

00:52:44 If you want to work with a previous version, then first you install, let's say, Hatch and use Hatch that command.

00:52:49 This is the kind of thing that might get integrated into that PY launcher I mentioned before.

00:52:54 Because we have more ability to add more random commands to that.

00:52:57 All of these are valid Python commands today.

00:53:00 So people could theoretically be running these commands already and having it do something.

00:53:05 I'm clearly not doing what you intend here.

00:53:07 But they're all valid commands.

00:53:08 And so we can't just push out a minor update that breaks them.

00:53:11 The only thing we do need to watch with that is something that Pradian mentioned in his blog post, which is, we want to see a winner in one sense.

00:53:21 But we want to be very careful not to end up in a competitive situation where rather than working together to get to the ideal workflow, we're working against each other.

00:53:33 We do not want, it's not going to be good for users.

00:53:36 It's not going to be good for the tool developers.

00:53:39 It's not going to be good for the community if we're all trying to compete with each other on, I've got this whizzy new feature.

00:53:44 We want to work together.

00:53:46 And I think we want, I hesitate to use the word a winner, but we want a clear sort of best of breed that we can promote.

00:53:56 Because, as we've said, we've been so burned by saying, this is what we should use, having everything go horribly wrong, that we're very reluctant to do that without evidence.

00:54:07 So we want to see something become that tool that people want.

00:54:13 Which is going to get difficult as long as we have competing solutions where it's like, oh, now we're split 50-50.

00:54:20 And now what?

00:54:22 There were decent solutions.

00:54:23 Whichever you pick makes half the ecosystem angry.

00:54:26 Yeah, but I think it is important to eventually get help from Core Python.

00:54:31 I know we were just talking about how Conda has been around for like a decade and that workflow tool hasn't won.

00:54:38 But like, if a decade ago, you know, on python.org, you had that tool, I think that would have won.

00:54:43 It's just about advertising it on, you know, Core Python.

00:54:46 So eventually we'll need their assistance.

00:54:49 Yeah, that's a really good point.

00:54:50 Indeed.

00:54:51 And, you know, we definitely do want to make it work from the Core Python side.

00:54:54 I might be the least kind of conflicted core developer here.

00:54:57 So I can say that we do want to make this work.

00:55:00 It's just seen as kind of outside of the core runtime responsibilities.

00:55:06 One of the massive discussion threads actually kicked off because I mistakenly thought the steering council kind of owned responsibility for packaging and delegated it officially to the PyPA.

00:55:17 But it turns out I was wrong and they just don't cover packaging at all.

00:55:20 And so packaging is kind of outside of core focus entirely.

00:55:24 It's officially not cared for by the core developers, not unofficially not cared for, if that makes sense.

00:55:30 It's like we do care about it.

00:55:31 We do want it to work.

00:55:32 We do want it to be a good experience because we know it's critical to the overall Python experience.

00:55:37 But it's also just scoped out of being our job, which is why, you know, we don't hold up releases based on packaging.

00:55:44 And to get packaging features into the core runtime is it just feels like a huge amount of work to do because it's got to overcome that.

00:55:52 This is so important to the core runtime, you know, to the reference interpreter that it's got to be in there, even though it's a packaging thing.

00:56:01 So it's challenging, but there's definitely those of us who want to make it happen.

00:56:05 And one of the benefits of being outside of the language is that it can move faster.

00:56:09 Python has an annual release cycle compared to, to draw an analogy, the Rust plus cargo story of six weeks.

00:56:16 And also not having this be in the core language makes it possible for alternative platforms and implementations that don't exist, that CPython does not care about today, to support those things.

00:56:28 Wasm, which is a T3 support, PEP 11 for anyone who cares about where that word comes from.

00:56:35 Pryodive exists.

00:56:36 It runs things.

00:56:38 CPython compiles on Wasm and it runs things.

00:56:42 The packaging story for Python in the browser is going to be very different.

00:56:46 The development workflow of Python in the browser is going to be very different.

00:56:49 And if you try to shunt poetry and pip or those specific tools as differently shaped into those workflows, that's just not going to work.

00:57:00 And you also don't want to rebuild that avenue of innovation using these tools.

00:57:06 Or that's one of the pieces that is sort of a symptom of success or a problem of success, which is Hatch, Poetry, PDM, all of these exist.

00:57:16 Because the other problems have been solved well enough.

00:57:20 And they've been solved well enough that these are now the main main points.

00:57:24 They're innovating in this space.

00:57:26 And there's other aspects of Python getting innovated on in terms of where it runs, in terms of how you interact with it even.

00:57:35 And as long as we don't stifle those, we're doing fine.

00:57:39 And that's a really good point about it not being in the core distribution as well.

00:57:43 Like if the ability to install packages was considered a core feature of the runtime, we wouldn't be able to release the runtime for a new platform until we'd figured that out.

00:57:53 Because that would block the release.

00:57:54 Because we'd have to say Python is incomplete until it has a complete packaging story on this brand new platform.

00:58:01 So because that is separated, we can release Python.

00:58:03 And so we have WASM releases of the CPython runtime because packaging is not part of that.

00:58:10 And so we don't have to wait for that to come up.

00:58:13 And yeah, because it's independent, Anaconda can come along and build PyScript and build packaging around the runtime because it doesn't have to be tightly integrated into it.

00:58:22 So there's big advantages.

00:58:23 Like there's a reason we pulled distri-tools out of the core library because it was restricting things.

00:58:28 And so it opens up more things, but it does put more responsibility on distributors, essentially, to build a distribution of Python that includes the workflow tools, the packaging tools, the indexes, the repositories, whatever they need to give users of that distribution a good experience.

00:58:46 And ultimately, a lot of this comes down to our distributions from Python.org have a very, very basic story for this.

00:58:54 Like we have pip.

00:58:55 That's basically our entire story.

00:58:57 Linux distros have their own story, which again, is they keep a very narrow focus on what they want to care about.

00:59:04 And users want things outside of that.

00:59:06 Even condo users, very kind of narrow focus to what's in those repositories.

00:59:11 And when you try and go outside of that, then things start breaking down just the same as all the distributions do.

00:59:17 So it's got pluses and minuses.

00:59:19 Python gets into places where it otherwise couldn't if packaging was a core feature of the runtime.

00:59:25 But it does mean that packaging is determined by the distribution and not by the core team and not even by the core maintainers of the kind of satellite projects that are really, really close to the core runtime.

00:59:37 Because setup tools can't determine how a WASM build is going to work because they're not controlling that distribution.

00:59:45 So there's a separation of roles that is not really clear, even to most of us who are involved, if I'm honest, that we all have different jobs to do.

00:59:53 And someone has to pull it all together.

00:59:55 And unfortunately, a lot of the time, it's the end user has to connect the dots.

00:59:59 Well, I think, guys, we are out of time, I would say.

01:00:01 Although not out of discussion points, for sure.

01:00:04 This could just go on and on.

01:00:06 Super interesting conversation.

01:00:08 It's really great to see it getting this focus.

01:00:10 But yeah, it's going to be interesting to see where it goes.

01:00:13 It's a challenge.

01:00:14 But, Arjan, I really like your idea.

01:00:16 It's that we're going to rise to it.

01:00:18 We've now come, we've solved the hard enough problems now that this new thing is a problem.

01:00:22 Ofak, go ahead.

01:00:23 I have one quick question because I'm sure listeners would be curious, too.

01:00:27 What do we think the next steps either are or should be for this?

01:00:32 I know we split off into different discussions and we're trying to research the feedback that we got.

01:00:38 But what do we think the next steps are?

01:00:41 Or is that just the next step, just trying to understand what users want more?

01:00:45 I don't think we know yet.

01:00:47 Yeah, I mean, I've written far too many posts on where I think we've got to go next.

01:00:52 But I do think we still have to, as Prajian mentioned earlier, level set.

01:00:56 There's a lot of people involved.

01:00:58 We all have different backgrounds, different expectations, different experiences.

01:01:02 And we just need to talk and figure that out.

01:01:06 And it's the kind of thing that would be ideal for us all to fly to some remote island somewhere for a week and just hash it all out in person.

01:01:13 That's unfortunately not going to happen.

01:01:15 So long discourse threads.

01:01:17 We're not leaving Hawaii until we solve this.

01:01:20 We've got to stay here.

01:01:20 I'm okay with that.

01:01:21 I will do it.

01:01:22 Three months later, we're still there.

01:01:24 Yeah.

01:01:26 Absolutely.

01:01:28 All right.

01:01:29 Well, you all, thank you so much for being here.

01:01:31 Thanks for taking the time and participating in this first, the original discussion.

01:01:35 And then this here as well.

01:01:36 I think it's going to highlight a lot of interesting and unseen aspects for people.

01:01:41 But a word, listeners out there, they want to get maybe their feedback in.

01:01:46 We saw some folks in the audience asking how they take the survey.

01:01:49 The survey is closed.

01:01:49 I'll give you a chance to sort of say like, what next for people out there listening?

01:01:54 Steve, we'll go around the circle again.

01:01:55 You're the top of it.

01:01:57 Go first.

01:01:57 If you're still on Twitter, then you can mention me in a tweet at Zuba.

01:02:01 I do read those and I do collect a lot of kind of random information and ideas out of there.

01:02:08 Otherwise, discourse and start a discussion.

01:02:11 And don't be surprised if we point you at an existing one and say we've done this one to death already.

01:02:15 So I'm always happy to hear more.

01:02:18 And I guess just be aware that we do get very overloaded.

01:02:22 Sure.

01:02:22 Paul?

01:02:23 Yeah, I think that's probably about the situation.

01:02:27 Again, I'm not very active on social media.

01:02:30 You can probably ping me on Twitter or Mastodon and I might notice.

01:02:34 Certainly get involved.

01:02:36 I can't promise.

01:02:38 Certainly get involved on Discord.

01:02:40 I think a lot of people are put off joining the conversations because it feels quite a hostile environment.

01:02:49 There's a lot of, like Steve said, we've seen that before.

01:02:52 We do want new perspectives.

01:02:54 We do want people offering ideas.

01:02:57 And it's hard.

01:02:59 It's hard to speak up because there's so much history that people will assume you know and you won't.

01:03:07 But please do, you know, come with half-baked ideas.

01:03:12 We'll maybe tell you how to bake them.

01:03:15 We'll maybe tell you we've already covered them.

01:03:17 But we won't ignore them.

01:03:19 We'll see them.

01:03:20 And even if it looks like we're not picking up on things that you think are really important, they'll get in the pot.

01:03:27 We will be aware of them.

01:03:28 And that's the main thing.

01:03:29 What we want more than anything is to be aware of what people think.

01:03:33 Yep.

01:03:33 Effect?

01:03:34 Yeah, I agree with what's been said.

01:03:36 I'm always on the discourse forums, reading feedback.

01:03:39 And if any Twitter threads gain popularity, I think it's important to realize most people that work on this are volunteers at the end of the day.

01:03:48 So we might not have much time to iterate as fast as people want.

01:03:52 But we are trying our best, for sure.

01:03:55 Excellent.

01:03:55 And there was that big sponsorship to make major progress on PyPI.org.

01:04:00 And maybe we'll see something like that at some point.

01:04:02 Pradyan, you get the final word here.

01:04:04 That's literally what I was going to say.

01:04:05 Invest in Python, folks.

01:04:07 If you work somewhere that uses Python, tell them to invest in the language.

01:04:13 And part of why we're having these discussions is because the role that initiated the user service is a sponsored role from Bloomberg.

01:04:21 And these sorts of investments into the ecosystem are vital to sort of make things keep working.

01:04:28 Because there's only software we can go with a bunch of people doing this in their evenings.

01:04:34 When they're, you know, slightly sort of bored and kind of want to keep themselves busy.

01:04:38 And these tough problems are not going to solve themselves because someone had half an hour in their evening or an hour in their evening.

01:04:46 Yep.

01:04:46 All right.

01:04:47 Good point.

01:04:47 And thank you all for being here.

01:04:49 Thanks very much.

01:04:50 Thanks, Michael.

01:04:50 Bye.

01:04:51 Bye.

01:04:51 Bye.

01:04:51 Bye.

01:04:52 Bye.

01:04:52 Bye.

01:04:52 This has been another episode of Talk Python to Me.

01:04:55 Thank you to our sponsors.

01:04:56 Be sure to check out what they're offering.

01:04:58 It really helps support the show.

01:05:00 Join Cox Automotive and use your technical skills to transform the way the world buys,

01:05:05 sells, and owns cars.

01:05:07 Find an exciting position that's right for you at talkpython.fm/cox.

01:05:12 Take some stress out of your life.

01:05:15 Get notified immediately about errors and performance issues in your web

01:05:19 or mobile applications with Sentry.

01:05:21 Just visit talkpython.fm/sentry and get started for free.

01:05:25 And be sure to use the promo code talkpython, all one word.

01:05:29 Want to level up your Python?

01:05:31 We have one of the largest catalogs of Python video courses over at Talk Python.

01:05:35 Our content ranges from true beginners to deeply advanced topics like memory and async.

01:05:40 And best of all, there's not a subscription in sight.

01:05:42 Check it out for yourself at training.talkpython.fm.

01:05:45 Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:05:50 We should be right at the top.

01:05:51 You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:05:57 and the direct RSS feed at /rss on talkpython.fm.

01:06:01 We're live streaming most of our recordings these days.

01:06:04 If you want to be part of the show and have your comments featured on the air,

01:06:08 be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:06:12 This is your host, Michael Kennedy.

01:06:14 Thanks so much for listening.

01:06:15 I really appreciate it.

01:06:16 Now get out there and write some Python code.

01:06:20 I'll see you next time.

01:06:39 Thank you.

