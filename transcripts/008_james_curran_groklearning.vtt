WEBVTT

00:00:00.001 --> 00:00:08.980
Talk Python To Me, episode number eight, with guest James Curran, recorded Monday, April 27th, 2015.

00:00:08.980 --> 00:00:38.900
Hello and welcome to Talk Python To Me.

00:00:39.180 --> 00:00:44.360
A weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:44.360 --> 00:00:46.440
This is your host, Michael Kennedy.

00:00:46.440 --> 00:00:49.220
Follow me on Twitter where I'm @mkennedy.

00:00:49.220 --> 00:00:54.180
And keep up with the show and listen to past episodes at talkpythontome.com.

00:00:54.180 --> 00:00:59.320
This episode, we'll be talking to James Curran about Grok learning and teaching Python.

00:00:59.320 --> 00:01:05.040
Before we get to the interview, I want to tell you that this episode is brought to you by Codeship.

00:01:05.500 --> 00:01:11.420
Codeship is a platform for powerful continuous integration and continuous delivery as a service.

00:01:11.420 --> 00:01:13.700
I'll talk more about them later in the show.

00:01:13.700 --> 00:01:19.100
Please take a moment to check them out at codeship.com or follow them on Twitter where they're at Codeship.

00:01:19.100 --> 00:01:23.660
And if you love this podcast, please send Codeship a message and say thank you.

00:01:24.980 --> 00:01:27.980
Next, I want to highlight something that I think is pretty cool.

00:01:27.980 --> 00:01:33.600
Abraham Smith, who is a professor at Fordham University in New York, sent us a message on Twitter.

00:01:33.600 --> 00:01:42.380
He just wrapped up his course on scientific programming by encouraging his students to listen to a few key podcasts as they continue their learning.

00:01:43.260 --> 00:01:54.840
That's awesome, Abe. Thank you.

00:01:54.840 --> 00:01:58.660
You can follow Abe on Twitter where he's Abraham D. Smith.

00:01:58.660 --> 00:02:03.600
Finally, remember, many of our shows now have full text searchable transcripts.

00:02:04.300 --> 00:02:06.780
Look for the full transcripts button on the show page.

00:02:06.780 --> 00:02:08.880
Now, let's get on to the interview with James.

00:02:08.880 --> 00:02:10.680
Let me introduce James.

00:02:10.680 --> 00:02:15.440
James Curran is an associate professor in computer science at the University of Sydney

00:02:15.440 --> 00:02:20.700
and co-founder of Grok Learning, which you can find at groklearning.com.

00:02:20.700 --> 00:02:22.880
That's G-R-O-K learning.com.

00:02:22.880 --> 00:02:27.740
James has been teaching computer science to students and teachers for over a decade.

00:02:28.300 --> 00:02:36.140
In 2010, he was named one of Sydney Magazine's top 100 influential people for his work in computer science education.

00:02:36.140 --> 00:02:43.660
James is an expert in high school IT education and is currently a digital technologies writer for the Australian curriculum.

00:02:43.660 --> 00:02:49.160
Follow him on Twitter where he's at DrJames Curran, C-U-R-R-A-N.

00:02:49.160 --> 00:02:51.100
James, welcome to the show.

00:02:51.100 --> 00:02:53.180
Hi, great to be here.

00:02:53.180 --> 00:02:59.280
I'm really glad you could come on and talk about teaching Python, especially teaching the younger generation Python.

00:02:59.280 --> 00:03:06.500
Well, Python is a great language to be teaching to kids, and we love using it, and it's great fun to teach it to the kids as well.

00:03:06.500 --> 00:03:07.720
That's fantastic.

00:03:07.720 --> 00:03:15.620
You have a couple of areas, one through Grok Learning and one through the university, as well as working with high school and lower grades.

00:03:15.620 --> 00:03:18.220
So I think there's a lot of stuff to cover here.

00:03:18.220 --> 00:03:22.860
But before we get into the sort of teaching programming, how did you yourself get it started?

00:03:22.860 --> 00:03:31.940
So I started using Python, I guess, in about 1998 myself.

00:03:31.940 --> 00:03:40.640
So Bob Kummerfeld, another associate professor in the school here, was a keen Python fan himself.

00:03:40.640 --> 00:03:47.100
And in fact, some of our other staff had previously been contributors to some of the Python modules.

00:03:47.600 --> 00:03:52.460
So Python was kind of a thing here at the University of Sydney from quite early on.

00:03:52.460 --> 00:03:55.660
And so I just started using Python.

00:03:55.660 --> 00:04:01.160
It was a great language to do lots of day-to-day data manipulation in.

00:04:01.160 --> 00:04:07.000
And then we also kind of found it increasingly a good language to teach students.

00:04:07.000 --> 00:04:12.960
And because it's so accessible, we found that we could just teach younger and younger students to code in Python.

00:04:13.120 --> 00:04:14.980
And so much of it started from there.

00:04:14.980 --> 00:04:16.140
That's fantastic.

00:04:16.140 --> 00:04:26.900
Yeah, I think through some of your Grok Learning stuff, you could reasonably reach middle school kids, you know, sixth, seventh, eighth graders with no problem, possibly younger than that.

00:04:26.900 --> 00:04:28.240
Absolutely.

00:04:28.240 --> 00:04:35.660
So we've done a lot of work with teaching students in around the year seven, eighth grade.

00:04:35.660 --> 00:04:37.280
I think that that's the ideal zone.

00:04:37.280 --> 00:04:49.720
And in fact, the Australian curriculum that I was just involved in writing has mandated that kids will learn a text-based programming language as opposed to something like a visual language like Scratch.

00:04:49.880 --> 00:04:53.280
So text-based programming is mandated for year seven and eight.

00:04:53.280 --> 00:04:57.820
And Python, I think, is the ideal language to be teaching there.

00:04:57.820 --> 00:04:59.360
You can go younger.

00:04:59.360 --> 00:05:04.700
And I think that the interesting question is, how do you do the transition from a visual language to Python?

00:05:04.700 --> 00:05:17.700
And one of the things that we've been doing with Grok Learning is to have a visual environment where you see the corresponding Python code and the blocks in that visual environment are as close as possible to Python constructs.

00:05:17.700 --> 00:05:25.140
So that that mapping from a visual language like Scratch through to a text-based language like Python is as smooth as possible.

00:05:25.140 --> 00:05:34.360
So if you do something like that, then I see no reason why you're not down in the year five, six kids or potentially even earlier if kids have had more experience themselves beforehand.

00:05:34.360 --> 00:05:36.900
Yeah, that's fantastic.

00:05:36.900 --> 00:05:42.580
So before we get too far in the details, I suspect a fair number of people have heard about Grok Learning.

00:05:42.580 --> 00:05:50.520
I learned about you guys through working with a couple of local schools here in Portland, Oregon around the Hour of Code, which we can talk about in a little bit.

00:05:50.520 --> 00:05:53.120
But before we do that, let's talk about Grok Learning.

00:05:53.120 --> 00:05:53.580
What is it?

00:05:53.580 --> 00:06:04.860
So Grok Learning was basically started with the primary mission of getting kids in school learning to programming in an authentic and engaging way.

00:06:04.860 --> 00:06:18.460
So we've found in Australia, and we've found this is a problem in the UK and the US as well, is that many teachers don't have the necessary skills themselves to teach coding in school confidently.

00:06:19.860 --> 00:06:28.740
And we wanted to find a scalable way of actually injecting our experience and enthusiasm into the classroom to help teachers teach programming.

00:06:29.380 --> 00:06:38.000
And of course, not just programming, but kind of wider computer science and other technologies like, you know, web development, HTML, CSS, and so on eventually.

00:06:38.000 --> 00:06:41.380
But definitely starting with programming is the core thing.

00:06:41.820 --> 00:06:50.940
And we've been running an online programming competition in Australia through the University of Sydney and a thing called the National Computer Science School, which I'm a director of.

00:06:51.600 --> 00:06:55.700
And we'd had a programming comp, which essentially wasn't a programming comp.

00:06:55.700 --> 00:06:59.980
It was actually a five-week learning activity pretending to be a competition.

00:06:59.980 --> 00:07:01.660
So there was a competitive element there.

00:07:01.660 --> 00:07:03.620
You had questions that you needed to solve.

00:07:03.880 --> 00:07:12.500
But unlike pretty much every other programming comp in the world, you actually learnt to program by doing the competition as opposed to it assuming that you already know how to code.

00:07:12.500 --> 00:07:14.720
So we had the competitive element.

00:07:14.720 --> 00:07:21.760
We had a new set of notes and questions were released every Monday morning, and the submissions needed to be put in by 5 p.m.

00:07:21.760 --> 00:07:24.560
Or, sorry, 9 p.m. on Sunday night.

00:07:25.300 --> 00:07:38.840
And that competition started out many years ago with about 150 kids and then got to the point where we had about 4,500 students in Australia doing the competition, where it was too big to do as a side activity in the university.

00:07:38.840 --> 00:07:49.540
So we then got to the point where our success was kind of making it hard to do as a side job, and so we decided to take it out and start the company, Croc Learning.

00:07:51.040 --> 00:08:01.300
And we'd done a lot of work previously with sponsors to help fund programs like NCSS, and I really wanted this to be something that was a self-sustaining entity.

00:08:01.300 --> 00:08:13.420
So I wanted to set up a model whereby we could find a reasonable price point that teachers could afford to pay for their students to do this, offer them great value for money, but it'd actually be sustainable into the long term.

00:08:13.420 --> 00:08:15.480
And so that's kind of where it was born.

00:08:15.480 --> 00:08:35.880
I looked through the Hour of Code stuff and the Grok Learning site when I was trying to do some research for a local high school, looking for something more than the visual programming, you know, Scratch or some of the other visual programming languages seemed inappropriate for, you know, high school kids, right?

00:08:35.880 --> 00:08:38.560
14, 15, 16, 17 years old.

00:08:38.560 --> 00:08:41.960
That was definitely not where they should be, I don't think.

00:08:41.960 --> 00:08:46.540
Yeah, well, I think that that partly comes down to what existing experience they've had.

00:08:46.540 --> 00:08:54.260
So quite a lot of schools will actually teach some Scratch into the beginnings of high school or the end of middle school, so year 7, 8, say.

00:08:54.260 --> 00:08:57.300
But that's if they haven't done programming before.

00:08:57.300 --> 00:09:03.280
If they've done some visual programming earlier, then getting stuck into Python by that age is definitely the way to go.

00:09:03.620 --> 00:09:22.920
Right, and I think one of the problems that many students will get hung up on, not the really committed ones who are going to plow through the errors until they get it to work no matter what, but, you know, the average kid will get hung up with weird compiler errors or runtime errors or syntax errors, just that kind of stuff.

00:09:22.920 --> 00:09:37.600
And so what I really liked about what you guys do, at least the part that I've been exposed to, which is the hour of code stuff, is you have a really nice kind of walkthrough interactive environment in the browser that runs your Python and then verifies it.

00:09:37.600 --> 00:09:39.680
And it really helps you and gives you hints and stuff.

00:09:40.640 --> 00:09:41.520
Right, absolutely.

00:09:41.520 --> 00:10:01.900
I mean, I think programming is one of the hardest things to learn entirely on your own because getting that feedback and support when you get a mysterious syntax error or when you get a runtime error or I think the other cases where you think your program is right, but actually there's some error that you haven't even noticed.

00:10:01.900 --> 00:10:19.620
If you're not pulled up in any way by someone else who knows programming better or a system to say, hey, what about this case or you haven't thought about this or there's various other details that aren't quite right about your program, then you're not really learning all of those skills you need to count yourself as a programmer.

00:10:19.620 --> 00:10:27.920
So that's what I meant before about where we really wanted to inject our expertise in a scalable way by having a system that gives you lots of feedback.

00:10:28.180 --> 00:10:35.080
And the other thing we wanted to do with all of those little interactive snippets is really encourage students to mess around.

00:10:35.080 --> 00:10:45.940
And I think possibly I actually learned to do this as a way of teaching from Python because the interactive interpreter was such a great way to experiment with and a great way to teach.

00:10:45.940 --> 00:10:55.280
I mean, when I'm teaching Python in a university context, I usually just open a terminal window with a Python interpreter and just start typing stuff in.

00:10:55.380 --> 00:11:03.500
So getting kids to see that they can mess around with little snippets of code to understand how they work and modify them in interesting ways.

00:11:03.500 --> 00:11:08.040
We wanted to make sure that our online platform really encouraged that same kind of behavior.

00:11:17.120 --> 00:11:21.480
Now let me take a minute and tell you about our sponsor for the show, CodeShip.

00:11:21.480 --> 00:11:28.060
CodeShip is a hosted continuous delivery service focused on speed, security, and customizability.

00:11:28.060 --> 00:11:34.200
You can set up continuous integration in a matter of seconds and automatically deploy when your tests have passed.

00:11:34.200 --> 00:11:37.560
CodeShip supports your GitHub and Bitbucket projects.

00:11:37.560 --> 00:11:40.780
You can get started with CodeShip's free plan today.

00:11:41.200 --> 00:11:50.760
Should you decide to go with a premium plan, Talk Python listeners can save 20% off any plan for the next three months by using the code TALKPYTHON.

00:11:50.760 --> 00:11:56.360
That's T-A-L-K-P-Y-T-H-O-N, all caps, no spaces.

00:11:56.360 --> 00:11:59.300
Thanks to CodeShip for sponsoring the show.

00:11:59.300 --> 00:12:05.160
And I encourage you to check them out right now at CodeShip.com and thank them on Twitter where they're at CodeShip.

00:12:05.160 --> 00:12:35.140
CodeShip.com and thank them for the time.

00:12:35.140 --> 00:12:40.520
Really designed to fit in an hour or realistically probably a couple of hours depending on your student.

00:12:40.520 --> 00:12:41.040
Right.

00:12:41.040 --> 00:12:41.680
Okay.

00:12:41.680 --> 00:12:43.520
I really thought these were interesting.

00:12:43.520 --> 00:12:52.560
You have some that seem like they would appeal a lot to girls, which I think is sometimes a hard problem with a lot of the examples people come up with.

00:12:52.560 --> 00:12:58.300
They'll come up with like robots that smash each other or, you know, like that's not necessarily appealing to young girls.

00:12:58.300 --> 00:13:06.540
And so I really thought your is Eliza human where you create kind of an artificial chatbot, a really interesting example.

00:13:06.540 --> 00:13:06.880
Yeah.

00:13:06.880 --> 00:13:08.500
Well, I mean, Eliza is a lot of fun.

00:13:08.500 --> 00:13:13.300
And my area of research in the university is computational linguistics.

00:13:13.300 --> 00:13:21.480
So I'm very interested in language and the ways in which language can be – and language skill can essentially be faked by a fairly simple bit of software.

00:13:21.580 --> 00:13:24.220
And Eliza is definitely the most famous example of that.

00:13:24.220 --> 00:13:47.860
I mean, I wish in some sense it was called a week of code rather than an hour of code because there's a lot more exciting backstory about artificial intelligence and the Turing test and all kinds of things you'd really love to bring into Eliza that make it come alive a lot more than just saying, hey, we're writing a program that reads some input and echoes some output in slightly different ways.

00:13:48.020 --> 00:13:49.520
So it is a great one.

00:13:49.520 --> 00:13:57.920
And we've got quite a diverse team and we just come up with questions and things that we would have liked to solve at school.

00:13:57.920 --> 00:14:04.100
I mean, I don't really think of Eliza as being especially targeting towards girls.

00:14:04.100 --> 00:14:06.520
I just think it's a great example that involves language.

00:14:06.720 --> 00:14:13.000
And we try to have a range of language problems, maths problems, science problems, sport, popular culture.

00:14:13.000 --> 00:14:19.800
When we run our competitions, we try to have a range each week of the kind of questions so that there's something in there for everyone.

00:14:19.800 --> 00:14:20.820
Right.

00:14:20.820 --> 00:14:26.260
I think your disease epidemic is really nice because it's a good tie into science and biology.

00:14:26.260 --> 00:14:27.680
Right, exactly.

00:14:27.860 --> 00:14:32.480
I think maybe my favorite might be the dark tunnel, which is a mud.

00:14:32.480 --> 00:14:37.380
I don't know how many people remember muds, but boy, I played those a lot when I was in high school and college.

00:14:37.380 --> 00:14:38.260
They're pretty awesome.

00:14:38.260 --> 00:14:38.740
They are.

00:14:38.740 --> 00:14:39.820
They're a lot of fun.

00:14:40.320 --> 00:14:51.280
What I think is great about a mud is that you can actually get quite a long way without having to use many advanced programming concepts.

00:14:51.280 --> 00:14:54.440
And you can actually build it up in quite a graduated fashion.

00:14:54.440 --> 00:14:58.580
So the thing can just start out as a massive sequence of if statements if necessary.

00:14:58.580 --> 00:15:06.380
And then you can slowly build a more general framework for your mud as you need new features in the system.

00:15:06.380 --> 00:15:17.540
And so you can start all of the way from input and print in Python through to OO just by expanding on the various bits of functionality you'd like to have in your mud.

00:15:17.540 --> 00:15:33.580
So we've had a lot of success teaching muds to students and to school teachers as a way of motivating programming and giving the keen students a huge amount of scope to expand it in ways that interest them.

00:15:33.580 --> 00:15:42.200
I mean, that's another thing that I think is quite critical when you're teaching programming is showing that, you know, this is not a question where you just get the right answer and that's all there is to it.

00:15:42.200 --> 00:15:46.740
If you really want to go to town with something, you can build almost anything you can think of.

00:15:46.740 --> 00:15:48.900
And that's pretty special about programming.

00:15:48.900 --> 00:15:50.960
It doesn't apply to many other jobs in life.

00:15:50.960 --> 00:15:54.100
No, if you can dream it, it almost can be done, right?

00:15:54.100 --> 00:15:55.180
Right, exactly.

00:15:55.180 --> 00:16:02.360
I mean, if you happen to be the kid that thinks of NP complete problem as the thing that you want to solve, well, you're out of luck there.

00:16:02.360 --> 00:16:07.260
But most of what you can think to do, you can do, which is, you know, is just amazing.

00:16:07.260 --> 00:16:09.700
Yeah, it really is something special, I think.

00:16:09.700 --> 00:16:13.680
And, you know, you're really exposing these young people to that.

00:16:13.760 --> 00:16:19.760
And I think if they get a taste of that magic, you know, they're like, wow, I really did this.

00:16:19.760 --> 00:16:20.700
I really built this.

00:16:20.700 --> 00:16:24.300
That can really spark a fire that can last a long time.

00:16:25.040 --> 00:16:25.940
Right, absolutely.

00:16:25.940 --> 00:16:33.320
And I think another thing about programming, and this is, I think, a more general thing about schools around the world,

00:16:33.320 --> 00:16:37.920
is that we often don't actually push our kids hard enough to achieve things.

00:16:37.920 --> 00:16:40.060
And I don't mean push them and pressure them.

00:16:40.060 --> 00:16:46.460
I mean set them a goal that is challenging for them, to give them something that they really find a bit of a challenge to do,

00:16:46.460 --> 00:16:52.320
but then give them the support to actually be able to achieve that and come out with a sense of accomplishment at the end.

00:16:52.320 --> 00:16:59.900
And some of the feedback that we've got from our Hour of Code activities, but even more so from our much longer five-week competitions,

00:16:59.900 --> 00:17:08.240
is that kids really do get a strong sense of reward and achievement of having conquered these programming problems.

00:17:08.240 --> 00:17:13.320
And that's actually the same mentality that drives most people that I know in the IT industry,

00:17:13.320 --> 00:17:17.040
is that there's, you know, the joy of solving a problem,

00:17:17.040 --> 00:17:22.180
and especially a problem that you don't really have a good sense of how to solve when you start,

00:17:22.180 --> 00:17:28.120
is one of the things that makes working in IT and being a programmer exciting.

00:17:28.120 --> 00:17:32.180
And we really wanted to have that sense conveyed to the kids,

00:17:32.180 --> 00:17:34.080
and also for that to be a driver of learning.

00:17:34.080 --> 00:17:36.180
I mean, if you've got a problem that you want to solve,

00:17:36.180 --> 00:17:41.060
and you accidentally learn things in the process, I feel like there's no better way to learn.

00:17:41.060 --> 00:17:42.380
Yeah, absolutely.

00:17:42.380 --> 00:17:49.680
You know, I think a lot of adults who are in charge of education of younger people, you know, teachers, principals, and so on,

00:17:49.680 --> 00:17:55.780
they find computers harder, they have found computers hard, and they think of programming as something there's just no way they can do.

00:17:55.780 --> 00:18:01.180
So I think they're a little uncomfortable introducing it to their classes.

00:18:01.640 --> 00:18:04.240
And, you know, during the Hour of Code last year, I was really lucky.

00:18:04.240 --> 00:18:09.680
I got to work with my daughter who's six years old, and I got to work with her principal at her school.

00:18:09.680 --> 00:18:15.620
And luckily, the principal actually worked at Microsoft before coming over.

00:18:15.620 --> 00:18:18.440
So I had some experience, right, which was really great.

00:18:19.220 --> 00:18:24.780
And we were talking about how do we bring Hour of Code to this elementary school, first grade through fifth grade, you know.

00:18:24.780 --> 00:18:29.180
And it was like, well, maybe we can do it for fifth grade, possibly we can do it for fourth grade.

00:18:29.180 --> 00:18:32.680
And we ended up introducing it for first, second, third, fourth, and fifth.

00:18:32.680 --> 00:18:35.340
And even the first graders, like, blew the teachers away.

00:18:35.340 --> 00:18:36.320
It was just amazing.

00:18:36.320 --> 00:18:40.120
And at the beginning of the conversation, it was like, well, maybe fifth graders can do this.

00:18:40.120 --> 00:18:44.640
At the end, it was like, wow, look what the, you know, the six-year-olds did who can't even read hardly, you know.

00:18:44.640 --> 00:18:45.780
So it was really nice.

00:18:46.220 --> 00:19:01.540
And some of those Hour of Code activities like the Frozen activity, for example, just bang on what younger kids are interested in and just really engaging stuff and a great place to start thinking about some of the underlying concepts of programming.

00:19:01.540 --> 00:19:08.740
So I think the Code.org gang really have done an amazing job with that.

00:19:09.380 --> 00:19:19.200
And it really is, as you said, finding a teacher that either has the confidence or finding ways to give teachers the confidence and skills to deliver this stuff.

00:19:19.200 --> 00:19:30.360
And to be fair to teachers, I mean, computing is one of the few disciplines where the things that you've learned can be thrown away every few years as the technology changes.

00:19:30.360 --> 00:19:39.420
If you think about, for example, being a secondary maths teacher, what you learned at university or college to become a maths teacher will probably set you up your entire career.

00:19:39.420 --> 00:19:48.740
But if you're a computing teacher, typically you haven't actually got an undergraduate computer science degree as you're backing anyway that you've usually started in some other discipline.

00:19:49.260 --> 00:19:57.660
And you need to learn a constantly changing set of technologies and skills to teach your students.

00:19:57.660 --> 00:20:06.840
So it's actually quite a special subject in the scheme of teaching at school that it is changing fairly frequently.

00:20:06.840 --> 00:20:12.780
And teachers rarely get given enough time and support to actually continue their own professional development to keep up.

00:20:12.880 --> 00:20:21.620
I mean, even if you're in the IT industry full time as a professional, spending enough time on your own professional development is one of the challenges.

00:20:21.620 --> 00:20:24.860
So teachers have that, you know, 10 times as bad.

00:20:24.860 --> 00:20:26.180
Yeah, at least 10 times.

00:20:26.180 --> 00:20:38.080
So, you know, one thing we could do is encourage everyone out there listening, because almost everyone listening to this show would be fairly qualified to do this, is get involved with your local schools and teachers and just volunteer a little bit, right?

00:20:38.960 --> 00:20:39.340
Absolutely.

00:20:39.340 --> 00:20:39.460
Absolutely.

00:20:39.460 --> 00:20:52.880
And we've actually had quite a lot of IT professionals, usually who have, you know, a son or daughter at a local school that want to do some programming in school that don't quite know what's the right way to approach it.

00:20:52.880 --> 00:20:59.620
They may not have a good understanding of the pedagogical approaches in school or how it would fit in with the curriculum and so on.

00:20:59.760 --> 00:21:08.120
That's exactly the kind of thing that our platform helps with as well, because we've got activities that we know are age appropriate for certain groups and so on.

00:21:08.120 --> 00:21:12.240
And so it kind of, I mean, it helps you from either direction.

00:21:12.240 --> 00:21:21.040
If you're a teacher looking for the more technical element, then using our system in class is a great way to provide, say, a five-week learning activity to your students.

00:21:21.040 --> 00:21:35.260
And if you're an industry professional looking to help out in your local school, then using our activities as a starting point for that engagement with the local teachers and students is a good way to ensure that what you're doing is relevant and age appropriate.

00:21:35.260 --> 00:21:36.000
Yeah.

00:21:36.000 --> 00:21:40.000
I think using a platform like yours makes it dramatically more approachable.

00:21:40.000 --> 00:21:40.840
So that's great.

00:21:40.840 --> 00:21:46.120
It seems like you guys are doing specific stuff to help train teachers as well.

00:21:46.120 --> 00:21:47.100
Can you speak to that a little?

00:21:48.260 --> 00:21:48.440
Yeah.

00:21:48.440 --> 00:21:52.500
So, I mean, some of that work isn't actually within Grok Learning specifically.

00:21:52.500 --> 00:21:58.120
It's more within my broader university role that we've done a lot of teacher training over the years.

00:21:58.120 --> 00:22:05.180
But we do have quite a lot of teachers that actually use the Grok Learning courses themselves for their professional development.

00:22:05.180 --> 00:22:11.100
For example, they might do one of our competitions the year before they teach it to their students themselves.

00:22:11.800 --> 00:22:24.080
If you've got a student – sorry, if you've got a teacher that's brave enough to actually say to the kids, look, I don't know all of this stuff myself now, but we're going to learn it together, then I think that that's an amazing situation.

00:22:24.080 --> 00:22:28.240
And the teachers and students get a lot out of the fact that they're learning together.

00:22:29.860 --> 00:22:36.680
Then what you actually see is rather than a teacher just being at the front teaching, what the teacher is doing is modelling ideal learner behaviour.

00:22:36.680 --> 00:22:45.800
And that's a very powerful thing to do and quite a joyous thing for a teacher to be able to learn stuff alongside the student and kind of change the classroom dynamic entirely.

00:22:46.100 --> 00:22:54.620
But it does take a certain amount of bravery to say that I'm going to change the paradigm and the student's expectation that the teacher knows everything in advance.

00:22:54.620 --> 00:23:03.280
But we have a lot of teachers that, for example, essentially compete with their kids in a fun way to solve the questions in our various courses and competitions.

00:23:03.280 --> 00:23:07.300
So a lot of teachers use it in professional development that way.

00:23:07.300 --> 00:23:12.160
And it's also a very efficient way of doing professional development because you're actually teaching at the same time.

00:23:13.140 --> 00:23:14.380
Yeah, that's really great.

00:23:14.380 --> 00:23:22.320
And I think it does model very good learning behaviour because if you're going to be in the software industry, you're going to be doing this forever, right?

00:23:22.320 --> 00:23:24.540
And there'll be many times you don't know the answer.

00:23:24.540 --> 00:23:27.260
You're like, first time, I need to talk to a database.

00:23:27.260 --> 00:23:29.820
Well, I have no idea how to do that, but let's get started.

00:23:29.820 --> 00:23:31.260
We'll figure this out, right?

00:23:31.260 --> 00:23:37.380
And that's a really valuable skill to be able to approach a problem you don't know how to solve already or you're not given a formula to.

00:23:37.380 --> 00:23:38.600
Right.

00:23:38.720 --> 00:23:48.620
And if you think about the way much of school is structured in most countries around the world, it's very much not that model of learning.

00:23:48.620 --> 00:23:57.700
It's very much here's up front the things you need to know and here are the problems that you can then solve using that knowledge rather than flipping it on its head and saying, well, look, here's a problem.

00:23:59.180 --> 00:24:02.040
You don't know everything you need to know to solve this problem.

00:24:02.040 --> 00:24:04.200
Go out and find it.

00:24:04.200 --> 00:24:16.940
And so that's where the problem-driven learning and the challenges really are quite an important part of our model and giving kids a different way of thinking and a confidence to say, you know what?

00:24:16.940 --> 00:24:20.400
I can solve a problem that at first glance I don't know how to solve.

00:24:20.900 --> 00:24:21.480
That's right.

00:24:21.480 --> 00:24:32.700
And I really like your platform that it really guides them in the very early stages so they don't get frustrated when they're kind of presented with the unknown, which is just the natural state of this programming world.

00:24:32.700 --> 00:24:40.920
It kind of helps them get over the hump and then they might have the persistence or the interest to actually do the hard work to keep learning.

00:24:41.720 --> 00:24:42.160
Right.

00:24:42.160 --> 00:24:54.580
And I mean another dimension that we haven't talked about yet is that programming really requires a precision that isn't required in many other parts of a student's or teacher's life.

00:24:55.240 --> 00:25:19.900
So, you know, when you have a specification that says that your program will produce output in exactly this format where everything from punctuation, capitalization, spacing, and so on could be the difference between you successfully interacting with an API or not, that really isn't a natural state of thinking for most people and definitely not something that they're exposed to that often in the rest of their classwork.

00:25:21.420 --> 00:25:29.420
So, if you have an auto marker, I mean all auto markers demand a level of precision in the things that they're marking.

00:25:29.420 --> 00:25:59.360
But if you don't actually educate the users into that way of thinking and how the auto marker works, then it's an incredibly frustrating process to think, you know, I've written this program, I've sweated blood to get it to work, and then your system says, but the punctuation is wrong, or even worse, and it's very common to actually give you no real information about how your program is wrong except for you to stare at it for ages and ages and realize that you've made a comma into a full stop or something like that when you shouldn't have.

00:25:59.360 --> 00:26:16.500
So, having those walking people through using the marker for the first few questions as a way of learning to be precise and reading the question very carefully, but at the same time, how the auto marker will give feedback is really an important part of the recipe.

00:26:17.360 --> 00:26:19.500
Yeah, I think you're absolutely right there.

00:26:19.500 --> 00:26:27.520
You know, that is an unnatural way to think, especially for children, but even for, you know, adults in high school and college kids.

00:26:27.520 --> 00:26:33.820
The closest analogy I can think of it in my experience is it's almost like a mathematical proof with no forgiveness.

00:26:33.820 --> 00:26:35.060
You know, it's…

00:26:35.060 --> 00:26:35.680
Right, absolutely.

00:26:36.060 --> 00:26:39.360
Not only do you have to have all the steps right, but they have to be exactly right.

00:26:39.360 --> 00:26:40.760
It's not like, I know what you mean.

00:26:40.760 --> 00:26:41.680
It's got to be right.

00:26:41.680 --> 00:26:41.960
Yes.

00:26:41.960 --> 00:26:43.180
Yeah, exactly.

00:26:43.180 --> 00:26:45.020
I mean, that analogy is perfect.

00:26:45.020 --> 00:26:53.200
The thing is, with a math's proof, you can kind of do the beginning and kind of do the end and kind of muddle your way through the middle and get most of the marks.

00:26:53.700 --> 00:27:07.120
But when you're programming, the computer is incredibly unforgiving and it's one of those few things where you hand in something that you know is wrong and you really know is wrong because the program just isn't doing what it's meant to be doing.

00:27:07.120 --> 00:27:10.020
So, I think that adds a lot of frustration.

00:27:10.020 --> 00:27:22.320
The other thing is that is a general skill about this precision is reading a question carefully and working out exactly what it requires of you is a very general life skill.

00:27:22.320 --> 00:27:33.040
And that kind of precision thinking is something that we don't really have that many other opportunities apart from in maths to encourage students to acquire these skills.

00:27:33.040 --> 00:27:40.160
So, I think when you do something like the Grok Learning Activities, you're getting a lot more than being able to say you can write a program at the end.

00:27:40.160 --> 00:27:44.740
You're actually developing some more generic skills that are very useful.

00:27:44.740 --> 00:27:45.120
Right.

00:27:45.120 --> 00:27:48.540
It might even be more important to learn those skills than to learn programming.

00:27:48.540 --> 00:27:48.780
Well, absolutely.

00:27:48.780 --> 00:27:52.860
Because most people won't actually become programmers and that's perfectly fine.

00:27:52.860 --> 00:28:00.620
We just want them to have a genuine experience of it and learn some more useful general problem-solving techniques along the way.

00:28:00.780 --> 00:28:01.300
Right.

00:28:01.300 --> 00:28:13.540
And I think something like this is way more realistic or approachable to kids than here we're going to do some geometry proofs or we're going to do advanced algebra work.

00:28:13.540 --> 00:28:14.140
Right.

00:28:14.140 --> 00:28:15.460
That just doesn't feel real to them.

00:28:15.460 --> 00:28:19.660
But if they see creatures running on the screen and, you know, that's something they can connect with.

00:28:19.660 --> 00:28:21.420
But they're learning basically the same skills.

00:28:21.420 --> 00:28:22.120
Right.

00:28:22.460 --> 00:28:22.660
Yeah.

00:28:22.660 --> 00:28:22.680
Yeah.

00:28:22.680 --> 00:28:23.340
That's excellent.

00:28:23.340 --> 00:28:26.660
So, what's your long-term goals for coding in school?

00:28:26.660 --> 00:28:40.240
Well, in Australia, our national curriculum will require students from year three through to year eight to do visual programming and then text-based programming.

00:28:40.240 --> 00:28:51.540
And so, our first goal is really to be able to support students and teachers in actually satisfying what are pretty massive ambitions in terms of getting kids to be coding at school.

00:28:52.100 --> 00:28:59.280
The UK has recently started, last September, a new curriculum that has very similar goals and expectations of teachers.

00:28:59.280 --> 00:29:15.200
And I believe we've got a short window, let's say three to five years, of really getting teachers up to speed and delivering this stuff before people get a bit blasé about the whole computing in schools thing and it just becomes another idea that didn't work.

00:29:15.560 --> 00:29:22.680
So, at the moment, we're really racing to get the teachers supported who are delivering the new curriculum.

00:29:22.680 --> 00:29:34.660
In the US, the situation is a bit more complex as each state has its own and sometimes even down to a lower level than the state, its own curriculum.

00:29:34.840 --> 00:29:44.760
So, it's a bit more of a fragmented market, but essentially getting kids to have that genuine experience right across their school career is what we're interested in.

00:29:44.760 --> 00:29:52.180
So, that every student can say somewhere along the line they've been exposed to computer programming in a genuine and inspiring way.

00:29:52.700 --> 00:29:56.440
And if they decide not to do it later on, having done that, that's fine.

00:29:56.440 --> 00:30:02.720
I feel like our job was to expose them to it as it really is.

00:30:02.720 --> 00:30:05.720
And if they decide then that it's not for them, that's fine.

00:30:05.720 --> 00:30:10.400
But for many others, it will be something that they can actually be quite passionate about.

00:30:11.440 --> 00:30:19.400
And then we want to be able to offer further courses to extend people far beyond the kind of hour of code starting point.

00:30:19.400 --> 00:30:24.540
So, I think one of the ways you can think about Grok learning is hour of code was great.

00:30:24.540 --> 00:30:26.160
You enjoyed doing an hour of Python.

00:30:26.160 --> 00:30:26.960
What next?

00:30:26.960 --> 00:30:30.880
And what's the sequence that gets you from there to Guido, right?

00:30:30.880 --> 00:30:31.420
That's right.

00:30:31.560 --> 00:30:47.400
In the long term, it would be fantastic to have the entire sequence of courses that could start with you learning the very basics and then going the way through to quite sophisticated programming, computer science, and then all of the surrounding technologies as well.

00:30:47.400 --> 00:31:14.600
So, as I said, web development, databases, courses, we'd eventually like to, and when I say eventually, within the next 12 months, have the full web development stack where you could start out learning Python, learn about databases, learn HTML and CSS and JavaScript, and then actually deploy a full Django project or something like that on Heroku as a kind of endpoint of all of those things.

00:31:14.600 --> 00:31:19.020
And that's achievable for kids that want to commit the time.

00:31:19.020 --> 00:31:33.160
And, I mean, our focus right now is students, but there's no reason why professionals and anyone else that's, you know, scientists, engineers that want to further develop their programming skills, why Grok shouldn't become the go-to place for them as well.

00:31:33.160 --> 00:31:33.920
Right.

00:31:33.920 --> 00:31:34.340
Absolutely.

00:31:34.340 --> 00:31:41.400
And Skype cut out just for a minute, so I apologize if you just mentioned this, but you have some more advanced classes coming up, right, that you're working on?

00:31:41.400 --> 00:31:42.400
Right.

00:31:42.400 --> 00:31:54.620
So, the way that our competitions run, for example, at the moment is that we actually have four levels of our competition, so they already go to reasonably advanced Python materials.

00:31:54.620 --> 00:32:11.080
So, the advanced course currently has things like regular expressions, object-oriented programming, some recursion and some parsing, and then various bits of computer science, sometimes some computational geometry or other algorithms and things that they implement.

00:32:11.080 --> 00:32:19.860
So, we've already got a bit of a range, but we also want to start branching out to courses that cover specific technologies as well.

00:32:20.080 --> 00:32:23.860
So, you know, we use Django as the back end for our system.

00:32:23.860 --> 00:32:25.420
I'd love to have a Django course.

00:32:25.420 --> 00:32:27.480
We also use Tornado.

00:32:27.480 --> 00:32:29.940
It'd be great to have a Tornado course as well.

00:32:29.940 --> 00:32:40.120
And to bring that same power of auto marking that we have with the core programming courses, bring that to bear on all of these other technologies as well.

00:32:40.700 --> 00:32:41.480
Yeah, that's really great.

00:32:41.480 --> 00:32:52.820
I think, you know, these kinds of courses, you go through them and, you know, putting your final exam or your final project out on some cloud system using continuous delivery through GitHub or something.

00:32:52.820 --> 00:32:55.040
Like, that's a really amazing place to be in.

00:32:55.040 --> 00:32:58.540
I think that's a nice idea.

00:32:59.480 --> 00:33:07.640
Yeah, well, I think one of the things that's difficult at school for students that are really keen is getting started on a project can be difficult.

00:33:07.640 --> 00:33:10.540
So, you've got some vision for a website you want to build.

00:33:11.040 --> 00:33:14.940
What are the kind of core bits of that website and how do you get those things going?

00:33:14.940 --> 00:33:30.600
I think a lot of students that have a vision for something they'd like to produce don't necessarily know how to go from, okay, I can write some Python code to how do I actually build and deploy a site with users and profiles and various other things at the core.

00:33:30.880 --> 00:33:44.180
I'd like to be the platform or have the platform that allows them to get to that first stage where then their creativity can take off and do the thing that they actually want to by building on top of that framework.

00:33:44.180 --> 00:33:46.660
Yeah, I think that's really great.

00:33:46.660 --> 00:33:56.000
You know, there was some article that I saw a while ago, I think from a guy at Google, that basically said computers and programming are fractals.

00:33:56.000 --> 00:33:59.900
And every time you think you see the picture, you get a little closer and there's a whole bunch more pieces.

00:34:00.520 --> 00:34:01.500
And that can be really challenging.

00:34:01.500 --> 00:34:04.360
So, what I'm thinking is, oh, I learned to program Python.

00:34:04.360 --> 00:34:05.660
Now, maybe I'll write a game.

00:34:05.660 --> 00:34:06.100
Oh, wait.

00:34:06.100 --> 00:34:08.520
Now, I've got to learn about files and the file system.

00:34:08.520 --> 00:34:09.820
Now, I've got to learn about databases.

00:34:09.820 --> 00:34:10.960
And now, I've got my web app.

00:34:10.960 --> 00:34:11.980
I'm ready to put it out.

00:34:11.980 --> 00:34:15.220
Oh, now, I've got to learn about web servers and HTTP.

00:34:15.220 --> 00:34:18.340
And there's just layer after layer as you dig into it.

00:34:18.340 --> 00:34:21.460
So, the more we can give people help in the beginning, the better.

00:34:21.460 --> 00:34:22.880
Absolutely.

00:34:22.880 --> 00:34:24.000
All right, James.

00:34:24.000 --> 00:34:26.480
I think that might be a show.

00:34:26.480 --> 00:34:28.380
This sounds like some really interesting stuff.

00:34:28.540 --> 00:34:36.200
And I just want to second the call for everybody to go out there, get involved, check out Grok Learning next year when Hour of Code comes out.

00:34:36.200 --> 00:34:38.700
You know, volunteer with some local school.

00:34:38.700 --> 00:34:46.880
It's really easy with things like the Grok Learning walkthroughs and the Hour of Codes or Code.orgs tutorials and so on.

00:34:47.840 --> 00:34:54.180
So, James, is there anything you want to – that we haven't already spoken about, call the listeners' attention to or give a shout-out to?

00:34:54.180 --> 00:35:10.560
Well, look, I think if there's anyone that's interested in learning Python that you're thinking what's the resource to send people off to, then I'd like to think we're a great place to start for any age, not just the school kids that we've been talking about.

00:35:10.560 --> 00:35:17.900
But I think let me just reiterate your call to arms for all Python programmers to get themselves into a local school.

00:35:18.520 --> 00:35:23.280
Contact the teachers, say, hey, how can we help you teach some programming in schools?

00:35:23.280 --> 00:35:29.280
I think what you'll find is that there's a huge amount of interest from teachers, but they just don't have the skills themselves.

00:35:29.280 --> 00:35:34.620
And I really believe there's no greater joy of programming than sharing that with someone else.

00:35:34.620 --> 00:35:35.900
Absolutely.

00:35:35.900 --> 00:35:38.200
Well, this has been a great conversation.

00:35:38.200 --> 00:35:39.300
Thanks for being on the show, James.

00:35:39.300 --> 00:35:40.800
Thanks very much.

00:35:40.800 --> 00:35:41.540
You bet.

00:35:42.900 --> 00:35:45.920
This has been another episode of Talk Python To Me.

00:35:45.920 --> 00:35:50.840
Today's guest was James Curran, and this episode has been sponsored by Codeship.

00:35:50.840 --> 00:35:55.500
Please check them out at Codeship.com and thank them on Twitter where they're at Codeship.

00:35:55.500 --> 00:35:57.960
Don't forget the discount code for listeners.

00:35:57.960 --> 00:35:58.600
It's easy.

00:35:58.600 --> 00:36:01.100
It's Talk Python, all caps, no spaces.

00:36:01.100 --> 00:36:08.740
You can find the links from today's show at Talk Python To Me.com slash episodes slash show slash eight.

00:36:09.340 --> 00:36:14.440
And if you're feeling generous, please check out our Patreon campaign at Patreon.com slash mkennedy.

00:36:14.440 --> 00:36:16.460
Be sure to subscribe to the show.

00:36:16.460 --> 00:36:23.700
Visit the website and choose subscribe in iTunes or grab the episode RSS feed and drop it into your favorite podcatcher.

00:36:23.700 --> 00:36:26.160
You'll find both of these in the footer of every page.

00:36:26.160 --> 00:36:28.300
This is your host, Michael Kennedy.

00:36:28.300 --> 00:36:29.360
Thanks for listening.

00:36:29.360 --> 00:36:33.480
Stating with my voice, there's no norm that I can feel within.

00:36:33.480 --> 00:36:36.320
Haven't been sleeping, I've been using lots of rest.

00:36:36.320 --> 00:36:39.140
I'll pass the mic back to who rocked his best.

00:36:39.140 --> 00:36:57.380
Talk Python To Me is created by PDX Web Properties LLC in Portland, Oregon.

00:36:57.380 --> 00:37:00.240
This show is copyrighted and all rights reserved.

00:37:00.240 --> 00:37:02.600
Thanks again for listening and see you next time.

