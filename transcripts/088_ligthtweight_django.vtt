WEBVTT

00:00:00.001 --> 00:00:02.400
Django is a very popular Python web framework.

00:00:02.400 --> 00:00:07.200
One of the reasons is you have these many building blocks to drop in for large sections of your application.

00:00:07.200 --> 00:00:09.780
Need a full-on admin editor backend?

00:00:09.780 --> 00:00:13.220
There's a few lines of code and boom, you have a basic table editor.

00:00:13.220 --> 00:00:15.120
This appeals to many people.

00:00:15.120 --> 00:00:20.960
But for those of us, myself included, who appreciate lightweight frameworks where you choose just what's included

00:00:20.960 --> 00:00:24.740
and piece together our apps from best-of-breed components, can find this a turnoff.

00:00:24.740 --> 00:00:29.040
This week you'll meet Julie Ellman and Mark Lavin, authors of Lightweight Django,

00:00:29.360 --> 00:00:33.700
who are here to dispel the myth that Django apps have to be built out of large building blocks.

00:00:33.700 --> 00:00:39.540
This is Talk Python to Me, episode 88, recorded November 21st, 2016.

00:00:58.720 --> 00:01:00.340
Anyone can get the job done.

00:01:00.340 --> 00:01:01.840
It's the execution that matters.

00:01:01.840 --> 00:01:03.320
I have many interests.

00:01:03.660 --> 00:01:10.700
Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:01:10.700 --> 00:01:12.840
This is your host, Michael Kennedy.

00:01:12.840 --> 00:01:14.840
Follow me on Twitter where I'm @mkennedy.

00:01:14.840 --> 00:01:18.720
Keep up with the show and listen to past episodes at talkpython.fm.

00:01:18.720 --> 00:01:21.240
And follow the show on Twitter via at Talk Python.

00:01:22.420 --> 00:01:25.680
This episode has been sponsored by GoCD and PyUp.

00:01:25.680 --> 00:01:26.500
That's right.

00:01:26.500 --> 00:01:29.520
PyUp.io has joined the show as a sponsor this week.

00:01:29.520 --> 00:01:33.760
Thank them both for supporting the show by checking out what they have to offer during their segments.

00:01:33.760 --> 00:01:36.880
Julia, Mark, welcome to the show.

00:01:36.880 --> 00:01:38.100
Thanks for having us.

00:01:38.100 --> 00:01:39.360
Yes, thank you.

00:01:39.680 --> 00:01:40.260
Yeah, you're welcome.

00:01:40.260 --> 00:01:42.240
I'm super excited to talk about your book.

00:01:42.240 --> 00:01:43.680
You guys are doing some cool stuff.

00:01:43.680 --> 00:01:47.540
I'm really looking forward to talking about this combination of technologies.

00:01:47.540 --> 00:01:49.080
I mean, we're going to talk about Django.

00:01:49.080 --> 00:01:50.760
We're also going to talk about Backbone.

00:01:50.760 --> 00:01:55.940
We're going to talk about WebSockets, Redis, Tornado, all sorts of cool things.

00:01:55.940 --> 00:01:57.840
And I really like the way that you put them together.

00:01:57.840 --> 00:01:59.820
So we'll have a good time talking about those.

00:01:59.820 --> 00:02:01.920
But before we get to that, why don't you tell us your story?

00:02:01.920 --> 00:02:02.980
Like, how did you get into programming?

00:02:02.980 --> 00:02:07.360
I think that my love of programming really started when I was pretty young.

00:02:07.360 --> 00:02:16.440
And I was very fortunate to be able to learn how to use Logo on Apple 2e in about first grade.

00:02:16.440 --> 00:02:19.940
And just kind of like being able to just play around, right?

00:02:19.940 --> 00:02:25.660
So having the ability to do that, really started to get into it there.

00:02:25.660 --> 00:02:27.400
But I ended up going into art.

00:02:27.400 --> 00:02:33.900
And slowly after graduating from college, realized that I can't really survive on making art.

00:02:33.900 --> 00:02:42.800
So I decided to go back to this thing that I was really interested in since I was a kid and started doing web design and development,

00:02:42.800 --> 00:02:45.520
which back then there wasn't really programs for it.

00:02:45.520 --> 00:02:52.640
So I ended up getting a job at an internal marketing agency at a small company and really learned there on the job.

00:02:52.640 --> 00:02:59.860
And shortly after that, got a job at Hallmark Cards, where I was an interaction designer.

00:02:59.860 --> 00:03:03.160
So doing a lot of e-cards, things like that.

00:03:03.160 --> 00:03:03.800
Oh, cool.

00:03:03.800 --> 00:03:05.760
So, yeah, yeah.

00:03:05.760 --> 00:03:12.780
But then I met this guy at South by Southwest Interactive a bajillion years ago.

00:03:12.780 --> 00:03:17.040
And he was like, so have you heard of Django?

00:03:17.460 --> 00:03:18.720
And I said, no.

00:03:18.720 --> 00:03:26.320
And he's like, oh, you live in Kansas City and you live so close to Lawrence, Kansas, and you don't know what Django is?

00:03:26.320 --> 00:03:27.820
And I said, no.

00:03:27.820 --> 00:03:30.300
And he's like, you've got to go work at the Lawrence Journal World.

00:03:30.300 --> 00:03:30.820
I'm sorry.

00:03:30.820 --> 00:03:33.280
And that person was Simon Willison.

00:03:33.280 --> 00:03:35.120
Nice.

00:03:35.120 --> 00:03:35.840
Nice.

00:03:36.200 --> 00:03:37.780
And he introduced me to a few people.

00:03:37.780 --> 00:03:46.340
And I ended up working there for about a year and just learned all about Django and contributed to the actual project.

00:03:46.340 --> 00:03:50.500
And that's when I really started working in Django was then.

00:03:50.500 --> 00:03:52.400
It's a really cool way to get introduced to it.

00:03:52.400 --> 00:03:54.760
It's basically go to the birthplace, right?

00:03:54.760 --> 00:03:55.380
Yeah.

00:03:55.380 --> 00:03:55.840
Yeah.

00:03:55.840 --> 00:03:59.100
It was a really, really amazing time for sure.

00:03:59.100 --> 00:04:01.920
Because that was like 2007?

00:04:01.920 --> 00:04:05.520
2008 when I started working there.

00:04:05.520 --> 00:04:06.600
So, yeah.

00:04:06.600 --> 00:04:10.640
Like three years after it had become an official open source project.

00:04:10.640 --> 00:04:11.080
Right.

00:04:11.080 --> 00:04:12.700
It was just some kind of internal thing.

00:04:12.700 --> 00:04:15.500
It was actually recognized as this big project.

00:04:15.500 --> 00:04:15.700
Yeah.

00:04:15.700 --> 00:04:16.080
Yep.

00:04:16.080 --> 00:04:16.620
Yeah.

00:04:16.620 --> 00:04:17.020
By then.

00:04:17.020 --> 00:04:17.660
Yeah.

00:04:17.660 --> 00:04:17.940
Nice.

00:04:17.940 --> 00:04:19.060
I love Lawrence, Kansas.

00:04:19.060 --> 00:04:22.720
I went to university there and I enjoyed my time in that town.

00:04:22.720 --> 00:04:24.500
Oh, I rock chalk Jayhawk.

00:04:24.500 --> 00:04:25.320
I'm a Jayhawk.

00:04:25.320 --> 00:04:25.640
Yeah.

00:04:25.640 --> 00:04:26.280
Right on.

00:04:26.280 --> 00:04:26.620
Right on.

00:04:26.620 --> 00:04:28.520
How about you, Mark?

00:04:28.520 --> 00:04:30.080
How'd you get into programming?

00:04:30.080 --> 00:04:32.940
My father, programmer, a long time.

00:04:32.940 --> 00:04:34.720
Maybe he worked at IBM.

00:04:34.720 --> 00:04:37.960
My older brother always loves programming.

00:04:37.960 --> 00:04:45.900
So, I resisted being a programmer, being a stubborn little child, wanting to do something

00:04:45.900 --> 00:04:46.520
on my own.

00:04:46.520 --> 00:04:49.320
I always kept coming back towards it.

00:04:49.320 --> 00:04:54.640
I studied math in college and I dreamed about being a professor.

00:04:54.640 --> 00:04:58.280
I don't know why anyone would dream about being a math professor.

00:04:58.440 --> 00:05:00.260
But that's what I had.

00:05:00.260 --> 00:05:03.600
There's a lot of cool stuff about being a math professor.

00:05:03.600 --> 00:05:06.340
Job opportunities, not necessarily one of them.

00:05:06.340 --> 00:05:10.440
I guess I just really love like tweed jackets and elbow patches.

00:05:11.400 --> 00:05:14.820
And that's what I envisioned for my future.

00:05:14.820 --> 00:05:20.560
And so I continued doing math in graduate school.

00:05:20.560 --> 00:05:26.540
And there's a lot of programming that comes into doing some applied mathematics.

00:05:26.540 --> 00:05:30.800
And as much as I resisted, again, I just kept coming back to it.

00:05:30.800 --> 00:05:38.660
And when I left graduate school, I started looking for what could I do with this math degree that I had.

00:05:38.720 --> 00:05:40.800
I was in New York City at the time.

00:05:40.800 --> 00:05:43.800
And I got into finance.

00:05:43.880 --> 00:05:51.600
I just got sucked right in to doing crazy math on Wall Street.

00:05:51.700 --> 00:05:55.140
And it was fun and exciting for a time.

00:05:55.140 --> 00:05:57.980
We were doing some really cool stuff.

00:05:57.980 --> 00:06:00.120
Over-the-counter derivative pricing.

00:06:00.120 --> 00:06:05.460
It wasn't as flashy as Michael Lewis sort of draws in his books.

00:06:05.520 --> 00:06:12.320
But we were, it felt like we were on the cutting edge of financial math to some extent.

00:06:12.320 --> 00:06:19.020
But there was a little bit of a financial crisis that you may have heard of, I don't know, 2008, 2009.

00:06:19.020 --> 00:06:26.680
And while my company wasn't really negatively impacted by that, many of our clients were.

00:06:26.680 --> 00:06:32.220
And it was a really stressful time to be pricing such a volatile market.

00:06:32.400 --> 00:06:36.360
We were having a lot of questions about our work.

00:06:36.360 --> 00:06:39.400
A lot of really bad market data that we were sifting through.

00:06:39.400 --> 00:06:44.320
In that process, a lot of my work was about automating what we were doing.

00:06:44.320 --> 00:06:45.820
Collecting data.

00:06:45.820 --> 00:06:49.400
Parsing really messy files.

00:06:49.400 --> 00:06:53.680
And trying to turn it into a reasonable data we could use.

00:06:53.680 --> 00:06:57.040
And we were doing weird things in VBA.

00:06:57.040 --> 00:06:58.500
Visual Basic.

00:06:58.500 --> 00:06:59.560
Excel.

00:06:59.560 --> 00:07:00.140
Yeah.

00:07:00.200 --> 00:07:04.880
How much of the world runs on Excel as the, quote, programming back end?

00:07:04.880 --> 00:07:06.540
Nothing you'll ever believe.

00:07:06.540 --> 00:07:10.280
And then we also had applications that were written in C++.

00:07:10.280 --> 00:07:11.600
And we had nothing in the middle.

00:07:11.600 --> 00:07:18.760
And I started exploring sort of scripting languages is what I started looking at.

00:07:18.880 --> 00:07:21.420
I started learning, I started learning, I started learning Perl.

00:07:21.420 --> 00:07:26.440
And I had a friend from graduate school who was pursuing a PhD.

00:07:26.440 --> 00:07:29.980
And he said, forget everything you know about Perl and learn Python.

00:07:30.580 --> 00:07:33.540
And I took his advice and I did.

00:07:33.540 --> 00:07:35.420
It didn't stick at work.

00:07:35.420 --> 00:07:38.580
My boss wasn't really interested in change.

00:07:38.740 --> 00:07:40.060
But it stuck with me.

00:07:40.060 --> 00:07:47.300
And I kept playing with it for different, both scripting tasks and automating foreign things and solving math problems with it.

00:07:48.020 --> 00:08:01.860
And when I decided to sort of leave New York with my wife and started pursuing careers outside of finance, I started looking at what else I could do with this sort of hobby.

00:08:01.860 --> 00:08:03.560
And...

00:08:03.560 --> 00:08:05.200
What's this Python good for anyway, huh?

00:08:05.200 --> 00:08:07.100
Yeah, what's this Python good for?

00:08:07.100 --> 00:08:11.560
And I had all this free time when I just, we just quit.

00:08:11.560 --> 00:08:12.380
We just left.

00:08:12.380 --> 00:08:16.360
Came and stayed with my family down in North Carolina, where I'm from.

00:08:16.360 --> 00:08:19.040
Built myself a website in Django.

00:08:19.040 --> 00:08:22.040
And I was having a blast.

00:08:22.040 --> 00:08:25.600
I built a little route tracking thing for running.

00:08:25.600 --> 00:08:30.080
And yeah, I was still searching for jobs in finance.

00:08:30.220 --> 00:08:34.980
And then eventually I thought, maybe someone would just pay me to write stuff in Django.

00:08:34.980 --> 00:08:40.440
And strangely enough, I found a contractor hosting at the Cactus Group.

00:08:40.440 --> 00:08:45.520
It was like two guys working in an office in Carrboro at the time.

00:08:45.520 --> 00:08:47.360
And started working with them.

00:08:47.360 --> 00:08:49.280
Took on one contract.

00:08:49.280 --> 00:08:50.680
Finished that.

00:08:50.680 --> 00:08:51.560
Took on another.

00:08:51.560 --> 00:08:55.060
And eventually got hired full-time with them.

00:08:55.160 --> 00:09:00.340
And I've been doing full-time Django development with them for almost seven years now.

00:09:00.340 --> 00:09:01.180
Yeah, that's really cool.

00:09:01.180 --> 00:09:08.240
I like how you kind of just kept going and looking for that Python opportunity to work in the space you wanted to.

00:09:08.240 --> 00:09:09.640
And eventually it worked out.

00:09:09.640 --> 00:09:10.080
That's great.

00:09:10.080 --> 00:09:10.820
Changed my life.

00:09:10.820 --> 00:09:17.600
I mean, the advice to forget Perl and learn Python was the best advice someone's ever given me.

00:09:17.920 --> 00:09:20.780
Now we come to about a year and a half ago.

00:09:20.780 --> 00:09:23.260
You guys created this book called Lightweight Django.

00:09:23.260 --> 00:09:25.960
Julia, what's the story with your book?

00:09:25.960 --> 00:09:28.140
It wasn't at a year and a half ago.

00:09:28.140 --> 00:09:28.880
No way.

00:09:28.880 --> 00:09:30.200
Was it?

00:09:30.200 --> 00:09:32.320
I think it was like two years ago.

00:09:32.320 --> 00:09:32.720
Mark?

00:09:32.720 --> 00:09:34.420
Yeah, it was since it got published.

00:09:34.420 --> 00:09:34.740
Yeah.

00:09:34.740 --> 00:09:35.260
Yeah, yeah.

00:09:35.260 --> 00:09:36.580
It's almost two years to the day.

00:09:36.580 --> 00:09:36.780
Yeah.

00:09:36.780 --> 00:09:37.080
Sorry.

00:09:37.080 --> 00:09:39.060
No, don't be sorry.

00:09:39.240 --> 00:09:41.940
I just was kind of like, no, it couldn't have been that long.

00:09:41.940 --> 00:09:43.200
It couldn't have been that long.

00:09:43.200 --> 00:09:45.340
I thought it was like 10 years ago.

00:09:45.340 --> 00:09:48.900
So, yeah, come up for the idea for the book.

00:09:48.900 --> 00:10:03.180
So, the thing with Django is that a lot of people look at it and they're like, oh, it's so big and it's like a dinosaur and can't use it because there's too much and I don't need everything that's in there.

00:10:04.160 --> 00:10:11.800
And, I don't know, I would just talk to Mark about that when I, like, I would hear this and Mark and I were both working at the same place at that time.

00:10:11.800 --> 00:10:14.060
It's like, I don't know that I agree with this.

00:10:14.060 --> 00:10:19.220
There's got to be a way that we can show people that they can use Django.

00:10:19.220 --> 00:10:30.040
And this is also the time of Flask sort of coming on the scene and, you know, people started making all these little Flask apps and then all of a sudden they're like, oh, I probably should start with Django.

00:10:30.040 --> 00:10:31.280
I shouldn't have done this.

00:10:31.280 --> 00:10:33.380
Doing all this work.

00:10:33.380 --> 00:10:38.000
Yeah, I made all these Flask apps and then I probably should use Django.

00:10:38.000 --> 00:10:44.500
So, yeah, we kind of talked about it and we were speaking at a conference.

00:10:44.500 --> 00:10:49.220
We were speaking at OSCON and I was like, what do you think about writing a book?

00:10:49.220 --> 00:10:52.760
I've got way too much time.

00:10:52.760 --> 00:10:54.380
Let's just see if we can get rid of that.

00:10:56.060 --> 00:10:57.480
I remember that feeling.

00:10:57.480 --> 00:11:00.800
She was just whirted out one.

00:11:00.800 --> 00:11:04.440
Whether you're having coffee or drinks or something, we should write a book.

00:11:04.440 --> 00:11:06.800
And I think I just said, yeah.

00:11:06.800 --> 00:11:09.340
And I had no idea what we were going to write.

00:11:09.340 --> 00:11:10.580
No, you did not.

00:11:10.580 --> 00:11:13.820
No, you were like, you were like, I don't know.

00:11:13.820 --> 00:11:14.680
You were smart.

00:11:14.680 --> 00:11:16.300
You were much smarter.

00:11:16.400 --> 00:11:17.300
I was like, we could do it.

00:11:17.300 --> 00:11:17.700
It's fine.

00:11:17.700 --> 00:11:18.300
We could do it.

00:11:18.300 --> 00:11:19.580
And you're like, let me think about it.

00:11:19.580 --> 00:11:23.700
I remember you're like, I got to think about this.

00:11:23.700 --> 00:11:25.080
So, yeah.

00:11:25.080 --> 00:11:31.680
And like calling it lightweight was sort of the antithesis of what people refer to Django as.

00:11:31.880 --> 00:11:33.880
So, like, oh, I don't want to use that.

00:11:33.880 --> 00:11:34.420
Yeah.

00:11:34.420 --> 00:11:42.720
Rather than let's plop in Django ORM, let's plop in like an admin back in all these big building blocks.

00:11:42.720 --> 00:11:54.780
Your book takes the approach of saying, basically, let's see how you can strip this down to a very small core and then build up your own like starter templates and tweak it however you need.

00:11:54.780 --> 00:11:55.020
Right.

00:11:55.020 --> 00:12:00.420
And you're also bringing together a lot of interesting technologies that are not just Django.

00:12:00.420 --> 00:12:01.600
Mark, how do you pick those?

00:12:02.180 --> 00:12:13.320
Pick some of the ones that we're most familiar with, either from projects that we've built or, you know, professionally or projects that we've built on the side, you know, experimental projects.

00:12:13.320 --> 00:12:23.080
One that we knew would work together, one that we had some familiarity with and that had some of the same sort of staying power as Django did.

00:12:23.080 --> 00:12:26.140
You know, Tornado is one that I really like.

00:12:26.140 --> 00:12:29.000
It's been around for a long time.

00:12:29.180 --> 00:12:32.840
And it does this one thing really well.

00:12:32.840 --> 00:12:35.740
And it's not flashy.

00:12:35.740 --> 00:12:40.740
It's stable and boring, just like I like my technology.

00:12:41.520 --> 00:12:42.000
Yeah.

00:12:42.000 --> 00:12:43.780
Tornado plays a really important role.

00:12:43.780 --> 00:12:53.160
And definitely when we get to the eighth async section or the real time web section of this conversation, it will definitely come back to it.

00:12:53.800 --> 00:12:58.360
So when you guys wrote the book, who do you have in mind for it?

00:12:58.360 --> 00:13:03.260
Julia, like who is your ideal student or who should read this book?

00:13:03.260 --> 00:13:04.440
Definitely an intermediate.

00:13:04.440 --> 00:13:05.480
I don't know.

00:13:05.520 --> 00:13:09.840
I've had this conversation with a few folks, like beginner, intermediate, and advanced.

00:13:09.840 --> 00:13:11.540
It's like, is there really an intermediate?

00:13:11.540 --> 00:13:14.100
Is there really like, is it black?

00:13:14.100 --> 00:13:14.480
I don't know.

00:13:14.480 --> 00:13:23.660
So when it comes to, I think it's more like people who have actually built a Django application and have some sort of familiarity also with JavaScript.

00:13:24.320 --> 00:13:26.640
So I think that that is part of the audience.

00:13:26.640 --> 00:13:32.100
The people who are also in, like have this infrastructure, they're already using Django.

00:13:32.100 --> 00:13:37.060
They already have it as part of the applications and whatever product or platform that you're using.

00:13:37.540 --> 00:13:42.180
And they're kind of locked in and they're seeing all these newer technologies kind of come out.

00:13:42.180 --> 00:13:46.720
And they're like looking at them longingly and they just don't understand how to connect them all.

00:13:46.720 --> 00:13:49.020
And so, you know, I don't know.

00:13:49.020 --> 00:13:51.780
I think it plays to a couple, quite a few different audiences.

00:13:51.780 --> 00:13:58.380
Ones that need to be convinced to use Django that maybe haven't used it before, but have programmed in other languages and other web frameworks.

00:13:58.380 --> 00:13:58.920
Okay.

00:13:58.920 --> 00:13:59.160
Yeah.

00:13:59.160 --> 00:14:02.100
I do think it's interesting to see how these pieces fit together.

00:14:02.100 --> 00:14:05.860
And, you know, Mark, to your point, it's really challenging to choose those.

00:14:05.860 --> 00:14:13.020
So you're choosing Django, obviously, but you're also choosing Backbone and Redis and some of these other things.

00:14:13.020 --> 00:14:18.920
And especially in the JavaScript front end space, that's a real topsy-turpsy world, right?

00:14:18.920 --> 00:14:22.960
And so, you know, by the time you're done with the book, you don't want the framework to be passe, right?

00:14:22.960 --> 00:14:23.780
I don't know.

00:14:23.780 --> 00:14:27.800
I think I've had a couple of folks ask me why we chose Backbone.

00:14:27.800 --> 00:14:36.240
And I think Mark put it very well, which is just kind of one of the, like, boring and stable things that work.

00:14:36.240 --> 00:14:40.640
And I feel like Backbone is pretty straightforward.

00:14:40.640 --> 00:14:42.840
There's nothing flashy or fancy about it.

00:14:42.840 --> 00:14:45.900
So when it comes to those things, I don't know.

00:14:45.900 --> 00:14:48.240
It's like, what's in fashion right now?

00:14:48.240 --> 00:14:48.960
It's like, it works.

00:14:49.040 --> 00:14:50.160
It works, you know?

00:14:50.160 --> 00:14:52.640
Yeah, you don't want to get caught with bell bottoms in the 80s.

00:14:52.640 --> 00:14:53.840
Well, yeah.

00:14:53.840 --> 00:14:59.720
I think it's also a matter of it's so basic, simple, and straightforward.

00:14:59.900 --> 00:15:09.380
A lot of the concepts in Backbone can then be played out in other front end frameworks that you're, or JavaScript frameworks that you're wanting to use on your applications, right?

00:15:09.380 --> 00:15:16.320
Like, it's not going to be too dissimilar than something else that you're going to choose, whether it's going to be React, which is the thing.

00:15:16.320 --> 00:15:22.800
I think at the time of this book, it was Angular, and people are starting to kind of, like, look at Knockout.

00:15:22.800 --> 00:15:24.660
But I don't even know.

00:15:24.660 --> 00:15:25.740
I don't really remember.

00:15:26.420 --> 00:15:31.920
The debate, I think, we had was Angular versus Backbone or Ember.

00:15:31.920 --> 00:15:33.060
That's right.

00:15:33.060 --> 00:15:33.520
Yeah.

00:15:33.520 --> 00:15:37.900
I know Ember is really popular in the Ruby community.

00:15:37.900 --> 00:15:40.160
It follows a lot of conventions there.

00:15:40.160 --> 00:15:43.780
I don't see it used quite as much in the Python community.

00:15:43.780 --> 00:15:46.540
Maybe that's just my own bias showing through.

00:15:46.540 --> 00:15:50.960
The concern we had with Angular was the steeper learning curve.

00:15:51.200 --> 00:16:00.280
And we kind of wanted to focus more on how do these pieces work together rather than let's try to teach you Angular and Django at the same time.

00:16:00.280 --> 00:16:04.700
And I think that's where Backbone kind of won out out of those three.

00:16:04.700 --> 00:16:07.880
It had a pretty shallow learning curve.

00:16:07.880 --> 00:16:16.380
And it sort of used the same terminology as Django did on the back end.

00:16:16.380 --> 00:16:21.220
And they play fairly nicely together, which works well for the book.

00:16:21.220 --> 00:16:21.540
Yeah.

00:16:21.540 --> 00:16:24.580
And I think in the end, like you guys said, it's pretty simple.

00:16:24.820 --> 00:16:32.960
So if you decided you wanted to go use Ember or something shiny new like Aurelia or whatever, just, you know, you could translate it pretty straightforward if you knew that other framework.

00:16:32.960 --> 00:16:36.400
Well, not only that, but just showing how do they connect, right?

00:16:36.400 --> 00:16:43.160
Like how do you connect these two things together, which I think is a mystery for a lot of people that have been showing that translation.

00:16:43.160 --> 00:16:45.520
And then, oh, oh, that's how you do it.

00:16:45.520 --> 00:16:46.140
Yeah, absolutely.

00:16:46.140 --> 00:16:53.820
I think that's a lot of the key lessons that are the takeaways from your book are this piece connects to that piece in this way.

00:16:53.820 --> 00:16:56.400
That piece connects over to this piece in that way.

00:16:56.400 --> 00:16:56.920
You know what I mean?

00:16:56.920 --> 00:17:00.600
So you guys are using Python 3 for your book.

00:17:00.600 --> 00:17:01.800
And that makes me really happy.

00:17:01.800 --> 00:17:04.060
I love it whenever I see Python 3 stuff being used.

00:17:04.060 --> 00:17:07.740
And I've got some good stories on Python 3 coming up.

00:17:07.740 --> 00:17:12.840
But was that a – how much did you guys think about that or how much just go, yeah, Python 3?

00:17:12.840 --> 00:17:15.200
Two years ago, it was a different time than it is now.

00:17:15.320 --> 00:17:19.780
I think at first we sort of thought, oh, we'll do dual code base.

00:17:19.780 --> 00:17:24.180
We'll do 2 and 3 and just see how that goes.

00:17:24.180 --> 00:17:30.780
You know, we've written a lot of reusable components that support both and familiar with doing those.

00:17:30.780 --> 00:17:37.080
But as we started working through that, there's a lot of explaining, oh, well, why do we need this?

00:17:37.080 --> 00:17:38.500
Why do we have that?

00:17:38.500 --> 00:17:40.200
And it got a little clunky.

00:17:40.200 --> 00:17:45.080
We spent a lot of time explaining the differences between Python 2 and Python 3.

00:17:45.080 --> 00:17:52.020
instead of the message that we wanted to give, which is, you know, how do you use Django with Backbone?

00:17:52.020 --> 00:17:54.540
Or how do you do WebSockets with Django?

00:17:55.380 --> 00:17:58.620
How do you build a single file application with Django?

00:17:58.620 --> 00:18:00.600
That's what we wanted to teach people.

00:18:00.600 --> 00:18:04.060
And we were getting caught up teaching people the difference between 2 and 3.

00:18:04.060 --> 00:18:06.840
So in the end, we abandoned Python 2.

00:18:06.840 --> 00:18:08.140
I think that's for the best.

00:18:08.140 --> 00:18:11.400
People shouldn't be building new applications from Python 2.

00:18:11.400 --> 00:18:12.340
Hopefully they're not.

00:18:12.340 --> 00:18:14.700
We feel strongly about that direction.

00:18:15.240 --> 00:18:23.700
We also had a lot of support from another O'Reilly author, Harry Percival, who had just published a book that was Python 3 only.

00:18:23.700 --> 00:18:26.920
And he felt very strongly about that same direction.

00:18:26.920 --> 00:18:30.280
So we have received some criticism for making that choice.

00:18:30.280 --> 00:18:34.120
I think someone called our use of Python 3 academic at one point.

00:18:34.300 --> 00:18:41.880
But even two years ago, we were building applications with Python 3 here professionally for our clients.

00:18:41.880 --> 00:18:44.260
So I mean, that's definitely the way to go.

00:18:44.260 --> 00:18:49.120
We've had a disservice to write a book even two years ago based on Python 2.

00:18:49.580 --> 00:18:55.860
To add to it as well, it's sort of like trying to push the community forward.

00:18:55.860 --> 00:18:57.600
A little nudge, right?

00:18:57.600 --> 00:18:58.020
Yeah.

00:18:58.020 --> 00:19:00.960
If we only write it in 3, that's it.

00:19:00.960 --> 00:19:05.720
It's like you just got to learn it and got to keep moving forward.

00:19:05.720 --> 00:19:13.560
And I think sort of like aiding this Python 2 usage doesn't help towards moving everyone towards 3.

00:19:14.700 --> 00:19:22.180
Yeah, I think all of us that are doing stuff in public, if we can take these small steps, they add up to make a big difference.

00:19:22.180 --> 00:19:37.100
In aggregate, you know, one of the things that made a big difference in the Python 3 usage measured on PyPI relative to like the year previously or whatever was actually to do with Django.

00:19:37.100 --> 00:19:42.460
And they switched the default language of their documentation and their tutorials to Python 3.

00:19:43.300 --> 00:19:52.080
And that actually made like a pretty measurable difference in the amount of Python 3 usage, like as seen from PyPI downloads.

00:19:52.080 --> 00:19:55.440
So let's talk about the first part, Julia.

00:19:55.440 --> 00:20:00.380
So one of the things you guys start with is the world's smallest Django application.

00:20:00.380 --> 00:20:01.620
What's the story of this?

00:20:01.620 --> 00:20:14.100
So it's sort of like bashing that concept of this is following the instructions of how you actually build an application, like doing the polls tutorial application.

00:20:14.100 --> 00:20:18.100
And this is the way you have to do every Django app.

00:20:18.100 --> 00:20:23.740
And a lot of what that chapter is, is saying, nope, you don't.

00:20:23.740 --> 00:20:27.500
You can actually just have one file to do it all.

00:20:27.880 --> 00:20:42.700
So when we're trying to think of the progression of the chapters, that was something that kind of starting with, like, I really like how you were saying that you got the concept how the chapters build off of each other.

00:20:43.060 --> 00:20:45.800
So we start with the tiniest little thing.

00:20:45.800 --> 00:20:51.780
How much of that is like a reaction to Flask coming along saying, here's our one file.

00:20:51.780 --> 00:20:53.840
That is the web app.

00:20:53.840 --> 00:20:56.600
And you thinking like, wait, Django can do that.

00:20:56.600 --> 00:20:58.560
It doesn't by default, but it can.

00:20:58.560 --> 00:20:59.760
Totally.

00:20:59.760 --> 00:21:00.840
That's totally.

00:21:00.840 --> 00:21:02.660
Yes, of course.

00:21:02.740 --> 00:21:03.180
That's right.

00:21:03.180 --> 00:21:04.680
I think.

00:21:04.680 --> 00:21:18.300
And it's funny because I've had a lot of people tell me and I'm probably Mark as well kind of come up and be like, after reading just the first chapter, like, I never thought of it that way.

00:21:18.300 --> 00:21:18.940
Never.

00:21:18.940 --> 00:21:20.860
Yeah, it's it is interesting.

00:21:20.860 --> 00:21:26.640
Like, you know, the starter projects there and, you know, like pyramid has it scaffolding.

00:21:26.640 --> 00:21:29.880
And the thing that comes out looks really complicated when you're new.

00:21:29.880 --> 00:21:33.360
Like, there's like, why are there so many files here and all this stuff wired together?

00:21:33.360 --> 00:21:40.440
But it's easy to see that as required rather than just the conventions this community is following, you know?

00:21:40.440 --> 00:21:41.440
Yeah.

00:21:41.440 --> 00:21:41.980
Yeah.

00:21:41.980 --> 00:21:42.540
Totally.

00:21:42.540 --> 00:21:50.760
So another thing that you bring up and I thought was really interesting that you covered here were components or parts of this thing called the 12 factor app.

00:21:50.760 --> 00:21:52.080
What's the 12 factor app?

00:21:52.080 --> 00:22:10.320
12 factor is pretty growing popularity, you know, way of sort of building and deploying applications, sort of a set of principles around what makes an application easy to deploy and scale in multiple environments.

00:22:11.280 --> 00:22:16.560
And we didn't want to preach too much, I guess, about that methodology.

00:22:16.560 --> 00:22:24.900
But you talk about some of the challenges that people face when they are using Django.

00:22:24.900 --> 00:22:33.220
I think this question of how do I have multiple settings files comes up all the time.

00:22:33.620 --> 00:22:42.900
And certainly for that sweet spot of our audience of someone who's maybe built something and wants to deploy it, make it real, you know, put it out on the public internet.

00:22:42.900 --> 00:22:50.180
Then they come with, well, how do I configure this for my local development and for this production environment?

00:22:50.680 --> 00:22:56.360
And 12 factor is one way to do that way that I think works fairly well.

00:22:56.360 --> 00:23:02.160
And so that's sort of the direction we try to nudge people in.

00:23:02.160 --> 00:23:02.820
Yeah, sure.

00:23:02.820 --> 00:23:04.060
And I thought it was pretty cool.

00:23:04.060 --> 00:23:13.120
One of the philosophies you were talking about there is to try to have the minimal amount of deviation from like dev to QA to prod.

00:23:13.120 --> 00:23:17.300
So the thing you're working on is close to the real thing, right?

00:23:17.720 --> 00:23:18.240
Absolutely.

00:23:18.240 --> 00:23:29.320
And making those differences obvious, sort of seeing which settings can be changed, which ones can't is part of that.

00:23:29.320 --> 00:23:30.080
Yeah, absolutely.

00:23:30.080 --> 00:23:37.680
So the next section that I thought was interesting and worth talking about, it's this part where you kind of speak to stateless web applications.

00:23:38.340 --> 00:23:48.620
And you say that much of the focus in Django is about building reusable applications that can be installed and configured for like a Django project, but that can get really complicated.

00:23:48.620 --> 00:23:54.220
And so you talk about breaking your web app into like small composable services.

00:23:54.460 --> 00:24:03.000
And I think that's a recent trend that people have been leaning towards wanting to do microservice architecture.

00:24:03.000 --> 00:24:05.120
You can't see my air quotes, but they're there.

00:24:06.060 --> 00:24:12.440
And so, again, I think that's where people are reaching for other frameworks that they felt accomplished this better.

00:24:12.440 --> 00:24:17.760
And part of the story that we wanted to tell was this can be done in Django, too.

00:24:17.760 --> 00:24:24.120
You don't have to throw away your existing Django knowledge to build these types of applications.

00:24:24.700 --> 00:24:31.540
In fact, Django has a lot of utilities that make it easy to build these types of applications.

00:24:31.540 --> 00:24:47.000
One of my favorite things about that chapter in particular is I feel like we do a really good deep dive into some of the HTTP caching layers that Django provides, you know, those utilities that Django provides.

00:24:47.000 --> 00:24:53.340
And I think that's really important for those types of applications at scale.

00:24:53.340 --> 00:24:54.560
I agree as well.

00:24:54.560 --> 00:25:01.640
Like, how much do you feel that developers are spending too much time chasing the shiny new thing?

00:25:01.640 --> 00:25:08.380
I feel like, you know, especially around things like Node.js and the front-end frameworks, it's like, well, that's six months old.

00:25:08.380 --> 00:25:09.840
We should be doing something different now.

00:25:09.840 --> 00:25:10.780
You're doing it the wrong way.

00:25:10.780 --> 00:25:11.300
It's old.

00:25:11.300 --> 00:25:12.600
It's like, wait a minute.

00:25:12.600 --> 00:25:13.600
Isn't that too quick?

00:25:13.600 --> 00:25:22.280
I feel like it's not necessarily because as developers are always trying to strive to be better, faster, performant.

00:25:23.060 --> 00:25:31.120
And I think that's, we're always trying to look of that optimal utopia of combination of things and combination of technologies.

00:25:31.120 --> 00:25:31.580
Right.

00:25:31.580 --> 00:25:34.920
So I think that's a, that's a big part of this.

00:25:34.920 --> 00:25:35.760
Yeah, I agree.

00:25:35.760 --> 00:25:38.580
It's a real challenge because it's fun to work on the new shiny stuff.

00:25:38.580 --> 00:25:39.160
Right.

00:25:39.860 --> 00:25:48.860
But at the same time, if you build an app that takes a year to build, you don't want to have like three different technologies mixed in because there were seasons, technical seasons.

00:25:50.160 --> 00:25:58.500
So one of the things you guys did in this stateless web app section was you created like a placeholder image thing for prototyping out the site.

00:25:58.500 --> 00:26:02.800
You could say, well, I don't really know what image the graphic artist is going to put here, but it's going to be 200 by 300.

00:26:03.020 --> 00:26:06.480
So give me a 200 by 300 image, which is pretty cool.

00:26:06.480 --> 00:26:08.440
And use this package called pillow.

00:26:08.440 --> 00:26:11.080
People love to learn about new packages on the show.

00:26:11.080 --> 00:26:12.260
Tell people what pillow is.

00:26:12.260 --> 00:26:14.840
Pillow is the Python imaging library.

00:26:15.220 --> 00:26:22.020
I mean, it's a work of, well, now it's really assumed the old pill module.

00:26:22.020 --> 00:26:29.200
So it's really, I think, the gold standard for Python image manipulation.

00:26:29.200 --> 00:26:41.700
If you need something to either modify or tweak an existing image or something like we're doing, which is generating new images, it's your go-to in Python.

00:26:41.700 --> 00:27:01.640
This portion of Talk Python To Me is brought to you by GoCD from ThoughtWorks.

00:27:01.640 --> 00:27:06.300
GoCD is the on-premise, open-source, continuous delivery server.

00:27:06.300 --> 00:27:13.120
With GoCD's comprehensive pipeline and model, you can model complex workflows for multiple teams with ease.

00:27:13.120 --> 00:27:18.940
And GoCD's value stream map lets you track changes from commit to deployment at a glance.

00:27:18.940 --> 00:27:23.920
GoCD's real power is in the visibility it provides over your end-to-end workflow.

00:27:23.920 --> 00:27:28.880
You get complete control of and visibility into your deployments across multiple teams.

00:27:28.880 --> 00:27:33.360
Say goodbye to release day panic and hello to consistent, predictable deliveries.

00:27:33.620 --> 00:27:38.280
Commercial support and enterprise add-ons, including disaster recovery, are available.

00:27:38.280 --> 00:27:44.240
To learn more about GoCD, visit talkpython.fm/gocd for a free download.

00:27:44.240 --> 00:27:47.560
That's talkpython.fm/gocd.

00:27:47.560 --> 00:27:48.640
Check them out.

00:27:48.640 --> 00:27:49.660
It helps support the show.

00:27:56.440 --> 00:28:04.040
Julie, the next thing that you guys did was you said one of the popular trends is to use something to generate like a static site.

00:28:04.040 --> 00:28:12.600
So maybe it's data-driven, but the thing you actually want to deploy to the server is static because it's easy to scale, cheap to run, and things like that.

00:28:12.600 --> 00:28:16.680
And so you showed how Django can actually be used to build static sites, right?

00:28:16.680 --> 00:28:26.160
Static site generators is something that in my current role, I pretty much that is the thing that we use a lot in prototyping.

00:28:26.160 --> 00:28:31.420
And a lot of what this chapter is about is about doing things like rapid prototyping, right?

00:28:31.420 --> 00:28:40.360
So you have a client or even just like want to build something quickly or you want a blog and you don't need a database.

00:28:40.940 --> 00:28:51.280
That's something that a lot of folks go to particular things like other frameworks like Jekyll, Pelican, and a bajillion others that I don't know the names.

00:28:51.280 --> 00:28:53.460
So there's two ones that come to mind.

00:28:53.460 --> 00:28:56.460
But there's a way that you can do this with Django.

00:28:56.460 --> 00:29:06.400
And again, going back to the user that is sort of locked into using Django on whatever platform they're on and then also wants to be able to do something, like I said,

00:29:06.400 --> 00:29:09.340
that they're using Django.

00:29:09.340 --> 00:29:13.380
So it's like showing how you can actually do that with technology.

00:29:13.380 --> 00:29:14.620
Yeah, that's neat.

00:29:14.620 --> 00:29:25.240
And some of the stuff that you covered in there, I think when people are new to web development, they don't really know about it or they don't pay attention to it until it becomes challenging, let's say.

00:29:25.240 --> 00:29:33.860
And you were showing how you can do sort of bundling, minification, cache busting, all that kind of stuff with Django, right?

00:29:33.860 --> 00:29:34.620
That was cool.

00:29:34.620 --> 00:29:37.040
Yeah, and asset management too, right?

00:29:37.040 --> 00:29:38.780
Which is a huge thing.

00:29:38.780 --> 00:29:46.780
Something I've been thinking a lot about lately is asset management in general and how it plays across all these different frameworks, right?

00:29:46.780 --> 00:29:49.700
And all these different things like how do we compress files?

00:29:49.700 --> 00:29:56.420
How do we take things that need to be compiled from one thing to another or copied over?

00:29:56.420 --> 00:30:02.380
And I mean, that's something that just showing someone how to do that in general, I think, has a huge value.

00:30:02.380 --> 00:30:16.220
So in this particular chapter, being able to show not only how to build something in Django like a static site generator, but also like asset management, which, you know, Django's always been something that I just love because you have so much freedom.

00:30:16.800 --> 00:30:22.540
I feel like there's not a lot of rules around it, which is another theme of this book, right?

00:30:22.540 --> 00:30:24.040
Like this underlying theme.

00:30:24.040 --> 00:30:25.300
There are no rules.

00:30:25.300 --> 00:30:26.140
Break it apart.

00:30:26.140 --> 00:30:26.820
Smash it.

00:30:26.820 --> 00:30:28.280
Just use one file.

00:30:28.280 --> 00:30:30.240
Like create a static site generator.

00:30:30.240 --> 00:30:30.820
Whatever.

00:30:30.820 --> 00:30:31.340
Yeah.

00:30:31.340 --> 00:30:32.400
Do what works for you, right?

00:30:32.460 --> 00:30:33.460
Exactly.

00:30:33.460 --> 00:30:33.780
Exactly.

00:30:33.780 --> 00:30:40.240
And that's something that, you know, I love about the framework and kind of wanted to show here.

00:30:40.240 --> 00:30:40.880
So.

00:30:40.880 --> 00:30:41.280
Yeah.

00:30:41.280 --> 00:30:42.900
I thought that was, that was really interesting.

00:30:42.900 --> 00:30:57.580
So then Mark, you started talking about how to build RESTful APIs, because if you're going to have a single page app, a spa, it's going to be pretty boring without some server side communication, right?

00:30:57.780 --> 00:30:58.340
Absolutely.

00:30:58.340 --> 00:31:04.220
And I think we have great tooling in the Django community for doing this.

00:31:04.220 --> 00:31:12.920
And Tom, for see his work relentlessly on Django REST framework, and we're all better for his work and contributions.

00:31:12.920 --> 00:31:22.860
So, yeah, we wanted to show off sort of how easy and fun and elegant it can be to build, you know, RESTful API in Django.

00:31:23.240 --> 00:31:30.580
So where do you think people get hung up building like HTTP APIs other than calling maybe it RESTful and it's actually not?

00:31:30.580 --> 00:31:32.880
They get a fight about whether it's truly RESTful.

00:31:32.880 --> 00:31:38.140
I mean, like, what do they get hung up in just about like mistakes that you see them making?

00:31:38.140 --> 00:31:42.420
Well, there's certainly a lot of debates that people like to have.

00:31:42.480 --> 00:31:56.700
And I certainly like to have my fair share of those base as well, but mostly about wanting good support for validating data that comes in and generating responses to go out.

00:31:56.700 --> 00:32:14.420
And ideally, being able to accept different formats on both ends, being able to take in JSON and return JSON, being able to take in XML and return XML or YAML or whatever their favorite means of communication is.

00:32:14.420 --> 00:32:23.380
So I do think people get hung up on trying to make things perfect or fit some vision of what they feel RESTful is.

00:32:23.380 --> 00:32:31.940
But I think REST framework in this community gets you a good percentage of the way without a lot of work.

00:32:31.940 --> 00:32:39.140
Yeah, and the fact that there's that nice framework that's really ubiquitous in the Django space makes it – there's a lot of shared knowledge on that, right?

00:32:39.140 --> 00:32:39.660
That's cool.

00:32:39.660 --> 00:32:42.220
Yes, and great complementary utilities.

00:32:42.220 --> 00:32:48.980
It calls itself a framework, and I think it's true because other people are able to build off of it.

00:32:48.980 --> 00:32:53.380
It's not let's cram everything together, everything that anyone could ever want.

00:32:53.580 --> 00:33:01.760
It's let's give it extensibility and let other people in the community add things that might be missing from the core.

00:33:01.760 --> 00:33:07.460
And, yeah, there's just a lot of great activity going around that project.

00:33:07.460 --> 00:33:07.860
Yeah.

00:33:07.860 --> 00:33:08.660
Okay.

00:33:08.660 --> 00:33:09.700
Yeah, that's really cool.

00:33:09.700 --> 00:33:14.020
One part you guys were – I don't remember what part of it.

00:33:14.020 --> 00:33:20.980
I think it might have been this section where you were using the forms classes for validation

00:33:20.980 --> 00:33:26.700
that you would typically use for HTTP get post type forms, and you were applying it for validation.

00:33:26.700 --> 00:33:27.940
Was that in the RESTful part?

00:33:27.940 --> 00:33:31.960
We did that in the stateless application.

00:33:31.960 --> 00:33:35.660
We actually validated the incoming path expressions.

00:33:35.660 --> 00:33:41.400
Oh, right, right, right, for the sizes of the images and stuff.

00:33:41.400 --> 00:33:42.560
Yeah, I thought that was cool.

00:33:42.560 --> 00:33:49.300
Why don't you tell people just real quick about how that's more flexible than, say, just straight HTTP angle bracket form?

00:33:50.740 --> 00:33:53.980
Well, that's, again, a big theme of the book.

00:33:53.980 --> 00:34:01.480
And maybe it's an unspoken theme, but it was definitely a big motivator for us is showing using Django,

00:34:01.480 --> 00:34:07.540
you know, the pieces of Django like it's a collection of libraries rather than a framework.

00:34:07.540 --> 00:34:11.120
It's something you can kind of take and use as needed.

00:34:11.900 --> 00:34:21.860
And the forms library is, you know, the forms section of Django is an amazing piece, not just for the HTTP aspect,

00:34:21.860 --> 00:34:26.780
because, you know, it does help you with sort of rendering HTML forms on the front end.

00:34:27.180 --> 00:34:29.500
So the biggest piece is about that validation.

00:34:29.500 --> 00:34:36.840
You know, we've used forms to validate incoming, you know, CSVs, all kinds of crazy stuff.

00:34:36.840 --> 00:34:43.700
And it's got a really simple API, you know, nice declarative, you know, these are the fields that should be there.

00:34:43.860 --> 00:34:49.740
And then it takes a dictionary and it says this dictionary is valid or is not valid.

00:34:49.740 --> 00:34:54.180
And it has methods for, you know, cleaning data that it comes through.

00:34:54.180 --> 00:34:54.920
Right.

00:34:55.080 --> 00:34:58.960
And it's not just this value type has to be a parsable integer.

00:34:58.960 --> 00:35:03.160
It's like this has to be an integer between 1 and 10 or something like that, right?

00:35:03.160 --> 00:35:05.620
Like lots of nice little rules and whatnot.

00:35:05.620 --> 00:35:06.360
Absolutely.

00:35:06.360 --> 00:35:12.160
And as you said, that dictionary, that blob of data doesn't have to come from an HTTP request.

00:35:12.160 --> 00:35:14.200
They're really decoupled in that way.

00:35:14.200 --> 00:35:16.940
That dictionary can come from anywhere.

00:35:17.640 --> 00:35:25.300
And I think it really speaks to, you know, maintainers of the Django project to build something that's as flexible as it is.

00:35:25.300 --> 00:35:26.020
Yeah, that's excellent.

00:35:26.020 --> 00:35:27.580
That's very nicely decoupled there.

00:35:27.580 --> 00:35:28.100
That's cool.

00:35:28.100 --> 00:35:38.360
So I want to make sure that we spend some time on the last third of your book or last quarter, I guess quarter, but maybe telling people about the middle part.

00:35:38.360 --> 00:35:41.400
So they know kind of what kind of apps you're building and so on.

00:35:41.400 --> 00:35:46.800
So, Julia, the idea was you're going to model some kind of like Scrum Kanban board type thing, right?

00:35:47.120 --> 00:35:54.860
Yeah, and we were trying to come up with an application like what we would use in our day-to-day and basically how that would tie together.

00:35:54.860 --> 00:36:01.080
But also, like how can we sort of start with like a simple, a super simple part of it, right?

00:36:01.080 --> 00:36:03.600
And build from that.

00:36:03.600 --> 00:36:09.060
So that's sort of the concept of why we're going to build like a Kanban board.

00:36:09.060 --> 00:36:17.540
Yeah, so basically with Backbone, you build a Kanban board and you can edit it through Django and so on.

00:36:17.540 --> 00:36:27.140
And then you get to this part where you're like, well, it's cool that we have this board, but it would be way cooler if we could edit it together on the web.

00:36:27.900 --> 00:36:31.280
And so this brings you to a section called Real-Time Django.

00:36:31.280 --> 00:36:32.840
Like tell us about that.

00:36:32.840 --> 00:36:34.860
Yeah, Real-Time Django.

00:36:34.860 --> 00:36:36.320
Yeah, so what is Real-Time Django?

00:36:36.320 --> 00:36:37.800
That sounds cool.

00:36:37.800 --> 00:36:38.400
Sounds fun.

00:36:38.400 --> 00:36:39.660
It can mean anything.

00:36:39.660 --> 00:36:40.300
Yeah.

00:36:41.100 --> 00:36:44.820
But Real-Time just covers like such a host of sins.

00:36:44.820 --> 00:36:51.960
Many sins have been committed in the name of simulating something real-time, right?

00:36:51.960 --> 00:36:55.400
So this is like I don't want to have to refresh my browser.

00:36:55.400 --> 00:36:57.920
I want to open a page like Google Docs or something, right?

00:36:57.920 --> 00:37:01.100
And we can all type and it just, it changes as we all work with it, right?

00:37:01.100 --> 00:37:02.820
That's the basic theme.

00:37:02.820 --> 00:37:03.640
Yeah.

00:37:03.640 --> 00:37:10.700
And like also bringing like it's that whole concept of like you don't think Django can do this, but it can, you know?

00:37:10.860 --> 00:37:12.100
Yeah, that's really, really excellent.

00:37:12.100 --> 00:37:16.840
So you guys run down some of the options for Real-Time Communications.

00:37:16.840 --> 00:37:18.840
You're like, well, we've got WebSockets.

00:37:18.840 --> 00:37:20.200
We've got server-sent events.

00:37:20.200 --> 00:37:21.140
We've got WebRTC.

00:37:21.140 --> 00:37:23.700
There's even like old-school long-pulling.

00:37:23.700 --> 00:37:26.280
And which one did you end up picking?

00:37:26.280 --> 00:37:31.940
We ended up going with WebSockets and we spelled this out kind of why.

00:37:31.940 --> 00:37:40.140
I mean, the server-sent events, you know, are maybe a better map to how we end up using WebSockets themselves.

00:37:40.620 --> 00:37:45.520
But WebSockets are just better known and better browser-supported.

00:37:45.520 --> 00:37:48.660
Definitely two years ago, they had much better browser support.

00:37:48.660 --> 00:37:58.100
Most frameworks that gear towards doing, you know, real-time web typically ship with WebSocket types of support out of the box.

00:37:58.100 --> 00:38:00.020
And server-sent events are not.

00:38:00.020 --> 00:38:01.740
It's usually kind of an add-on.

00:38:02.300 --> 00:38:04.780
So we ended up going with WebSockets.

00:38:04.780 --> 00:38:06.320
Yeah, certainly two years ago.

00:38:06.320 --> 00:38:07.120
That makes sense.

00:38:07.120 --> 00:38:11.740
I think those kind of features have come a long ways in two years, right?

00:38:11.780 --> 00:38:17.440
It feels like the HTML5 stuff has definitely grown quite a bit from 2013, 2014.

00:38:17.440 --> 00:38:18.120
Yeah.

00:38:18.120 --> 00:38:19.880
I mean, it's every day.

00:38:20.520 --> 00:38:25.200
People would just keep pushing and pushing and doing crazier things.

00:38:25.200 --> 00:38:34.280
And it's cool to see those technologies have definitely matured to where two or three years ago, something, you'd say, well, maybe this could be an add-on.

00:38:34.280 --> 00:38:38.220
It's probably not required for your app to really be functional.

00:38:38.580 --> 00:38:48.520
And now I think, you know, people are really gearing towards more apps where it's like a core piece of functionality that absolutely needs to be there and work for the app to be useful.

00:38:48.520 --> 00:38:49.600
Yeah, I totally agree.

00:38:49.600 --> 00:38:54.980
And you guys point to a website that I'm a big fan of called caniuse.com.

00:38:54.980 --> 00:38:59.180
And as you're talking about these features, you're like, oh, check this out on caniuse.com.

00:38:59.180 --> 00:39:01.700
Why don't you tell people quickly about that if they don't know about it?

00:39:01.700 --> 00:39:02.620
That's a good resource.

00:39:02.820 --> 00:39:12.020
Yeah, it's a place where you can see if a particular feature is going to work on various different browsers, but not just the browsers, but the actual version of the browser.

00:39:12.020 --> 00:39:24.240
So if you're not quite sure if this is going to be available, a lot of what I do now is making sure things work on really, really old browsers for many reasons, many good reasons.

00:39:24.240 --> 00:39:26.580
So, yeah, I use that all the time.

00:39:26.580 --> 00:39:31.900
Yeah, you know, the web is always like a compromise at some level, right?

00:39:31.980 --> 00:39:33.140
Like, oh, there's this new cool thing.

00:39:33.140 --> 00:39:35.020
Oh, but it's not supported on IE.

00:39:35.020 --> 00:39:39.400
Or there's this other great thing, but it's not supported on Safari, on mobile.

00:39:39.400 --> 00:39:44.560
Then you have to decide, like, do I really want to have a degraded experience for these people?

00:39:44.560 --> 00:39:46.280
Like, and so on.

00:39:46.280 --> 00:39:48.720
And sometimes the answer might be yes.

00:39:48.720 --> 00:39:55.760
Like, for example, if you want to use CSS3 2D transforms, the only browser that that doesn't work on, according to caniuse, is Opera Mini.

00:39:55.760 --> 00:39:58.720
And it might be totally reasonable to go, I don't care.

00:39:58.720 --> 00:40:00.320
It's just going to look bad on Opera Mini.

00:40:00.520 --> 00:40:03.180
Yeah, but there's fallbacks that you can actually use.

00:40:03.180 --> 00:40:08.460
If you want to go forward and try something, there's definitely fallbacks that you can use.

00:40:08.460 --> 00:40:15.480
So I encourage those that are listening, like, don't feel like you can't move forward with those particular technologies.

00:40:15.480 --> 00:40:16.360
Right.

00:40:16.360 --> 00:40:19.080
There's a lot of times some kind of polyfill you can do, huh?

00:40:19.080 --> 00:40:21.640
Yeah, Modernizer is a big one.

00:40:21.720 --> 00:40:22.180
Yeah, absolutely.

00:40:22.180 --> 00:40:27.600
Let me take just a moment and tell you about one of our sponsors that makes this show possible.

00:40:27.600 --> 00:40:31.200
This portion of Talk Python is brought to you by PyUp.io.

00:40:31.200 --> 00:40:34.140
Have a website based on a popular framework like Django?

00:40:34.140 --> 00:40:38.860
You really want to make sure that you're on the latest point release that includes all bug and security fixes.

00:40:39.420 --> 00:40:45.520
With PyUp.io, you no longer have to search for updates manually, possibly missing an important update for a security vulnerability.

00:40:45.520 --> 00:40:51.940
When you add one of your GitHub repos to PyUp's online service, the PyUp bot immediately starts searching for requirement files.

00:40:51.940 --> 00:40:58.280
It will send you one big pull request that updates all your dependencies, and the bot constantly checks for new releases on PyPI.

00:40:58.520 --> 00:41:05.640
This PR contains all the info you need in one place, and your test will run automatically, telling you if an update broke your code and why.

00:41:05.640 --> 00:41:08.140
Try it today by visiting PyUp.io.

00:41:08.140 --> 00:41:09.940
That's P-Y-U-P dot I-O.

00:41:09.940 --> 00:41:12.300
Accounts are free and come with one private repo.

00:41:12.300 --> 00:41:15.280
If you need more, plans start at just $4.99 a month.

00:41:15.280 --> 00:41:27.020
Okay, so you decide WebSockets, and then the real challenge, and I think I wanted to ask you guys about this in a more broader sense, not just the context of your book.

00:41:28.080 --> 00:41:40.880
But in order to do WebSockets, you have to have these long-term, many, many, many connections back to, you know, if your site's successful, hundreds of thousands of browsers, right?

00:41:40.880 --> 00:41:55.580
And WSGI and a lot of the Python frameworks, Django, Pyramid, Flask, they're not really built to handle the asynchronous web or these long, long, long-running connections or HTTP2.

00:41:55.680 --> 00:42:04.820
A lot of this stuff, do you think it's time for, like, a WSGI 2 or some rethink of how web processing is done?

00:42:04.820 --> 00:42:05.980
Yes and no.

00:42:05.980 --> 00:42:17.200
I mean, it would be nice to get a refresh of something that is definitely geared more towards long-term connections over HTTP.

00:42:17.200 --> 00:42:26.180
But I still think that there's a lot of web applications that are still really request-reply based.

00:42:26.180 --> 00:42:26.880
And that's fine.

00:42:27.080 --> 00:42:28.540
There's always going to be that need.

00:42:28.540 --> 00:42:35.600
You don't want to throw sort of everything out in the pursuit of something that has that support.

00:42:35.600 --> 00:42:49.400
HTTP2 is probably a really good one where, yes, you want something to, yes, you want something to hold the connections open and make use of the multiplexing that they allow.

00:42:49.760 --> 00:42:55.260
But that doesn't necessarily have to be exposed at the framework level for it to be useful.

00:42:55.260 --> 00:42:55.740
Right.

00:42:55.740 --> 00:42:56.240
That's true.

00:42:56.240 --> 00:42:59.180
Like, for example, Nginx supports that already.

00:42:59.180 --> 00:43:00.060
Yeah.

00:43:00.240 --> 00:43:10.420
So maybe if you're using GeniCorn or Microwiskey behind Nginx, like, your actual data-driven Python requests might not do HTTP2, but the rest of it could, I guess.

00:43:10.420 --> 00:43:10.920
Yeah.

00:43:10.920 --> 00:43:25.300
What's interesting or confusing may be in this HTTP2 world, you know, a lot of the things that we've been doing and some of the things that we've even touched on earlier, concatenating files and minifying them all together,

00:43:25.960 --> 00:43:29.120
some of that really loses its usefulness.

00:43:29.120 --> 00:43:33.640
And instead, you want to make those be additional requests.

00:43:33.640 --> 00:43:47.140
And you potentially want to be able to do browser pushes on your page load and say, you know, here are all the CSS files that are going to come with this page.

00:43:47.140 --> 00:43:48.820
Here's all the JavaScript files.

00:43:48.960 --> 00:43:59.120
So we kind of have to unlearn some of the things that we've done and then add new hooks into our frameworks to be able to make use of the new features.

00:43:59.120 --> 00:43:59.980
Pretty interesting idea.

00:43:59.980 --> 00:44:05.140
I wonder if Google will start ranking sites higher that follow HTTP2 someday.

00:44:05.140 --> 00:44:07.840
If that happens, I suspect it'll push people quickly.

00:44:07.840 --> 00:44:14.380
Like, for example, they recently started ranking SSL encrypted sites higher than non-encrypted ones.

00:44:14.840 --> 00:44:17.740
Mobile friendly ones for mobile searches higher and so on.

00:44:17.740 --> 00:44:22.500
Well, they certainly rank or they value, you know, page load time.

00:44:22.500 --> 00:44:34.960
And to the extent that making good use of HTTP2 can help your page load time, I think you'll see that reflected whether they make an explicit HTTP2, you know, differentiator or not.

00:44:35.120 --> 00:44:35.960
Yeah, it's still up in the area.

00:44:35.960 --> 00:44:51.020
So one of the things that you did is you said, well, because this is how I kind of got out of this conversation is like Django and the whiskey servers in general are not super for this long term connection story.

00:44:51.020 --> 00:44:52.660
So you brought up Tornado.

00:44:52.660 --> 00:44:54.600
And so tell us about Tornado.

00:44:54.600 --> 00:44:56.100
Like, what's the use case here?

00:44:56.640 --> 00:44:58.820
Well, as I said before, I really like Tornado.

00:44:58.820 --> 00:45:04.020
It came from FriendFeed before they were acquired by Facebook.

00:45:04.020 --> 00:45:07.720
And it's been kept going ever since.

00:45:08.180 --> 00:45:17.020
It's a it's a it's a it's own sort of event based network IO for concurrent, you know, highly concurrent web applications.

00:45:17.020 --> 00:45:24.240
And it has a small web framework that comes with it where you're basically talking directly with the socket.

00:45:24.240 --> 00:45:29.320
A little bit different than how you write a whiskey application.

00:45:29.320 --> 00:45:33.300
You know, a lot closer to the raw TCP connection.

00:45:33.300 --> 00:45:37.600
And so part of it was sort of love of Tornado.

00:45:37.600 --> 00:45:39.060
It does great things.

00:45:39.060 --> 00:45:41.340
It supported Python 3 for a while.

00:45:41.340 --> 00:45:46.420
And again, that really goes with sort of our message of pushing Python 3 forward.

00:45:46.420 --> 00:45:50.880
What we wanted to capture was, OK, Tornado is awesome.

00:45:50.880 --> 00:45:52.520
You want to use Tornado.

00:45:52.520 --> 00:45:53.700
You already know Django.

00:45:53.700 --> 00:45:55.920
How can you make them play nicely together?

00:45:56.220 --> 00:46:10.400
And I think that's the most important aspect of those chapters is let Tornado do what Tornado does well and let Django do what Django does well and learn how to make them work together.

00:46:10.400 --> 00:46:10.920
Right.

00:46:10.920 --> 00:46:11.320
Absolutely.

00:46:11.320 --> 00:46:20.600
So you can focus the WebSocket processing on a small Tornado site and then do the rest basically through Django.

00:46:20.600 --> 00:46:20.920
Right.

00:46:21.040 --> 00:46:26.260
And the trick is how to make them talk together because it's pretty easy to set up a WebSocket system.

00:46:26.260 --> 00:46:28.860
So you can say, well, here's all the listeners on this channel.

00:46:28.860 --> 00:46:32.240
I made some change broadcast out a message to everybody.

00:46:32.240 --> 00:46:33.180
This thing changed.

00:46:33.180 --> 00:46:39.800
And maybe it's not a message, but a JSON document that like tells backbone to update the UI in this way or that.

00:46:39.800 --> 00:46:40.100
Right.

00:46:40.800 --> 00:46:45.940
But then they could also go to the website and like add a new card to the Kanban board.

00:46:45.940 --> 00:46:47.760
And you want them to see that.

00:46:47.760 --> 00:46:49.180
Everybody else.

00:46:49.180 --> 00:46:50.680
And you want to do that through WebSockets.

00:46:50.680 --> 00:46:54.940
So tell us quickly sort of what's the connection there.

00:46:54.940 --> 00:46:55.880
How do you pull that off?

00:46:55.880 --> 00:47:00.160
Essentially the choice that we made was to expose.

00:47:00.160 --> 00:47:02.860
So Django server already had a REST API.

00:47:03.040 --> 00:47:05.200
That's what the previous chapters were all about.

00:47:05.200 --> 00:47:12.180
And that's what the browser is primarily talking to, you know, adding new items to the board and moving them around.

00:47:12.180 --> 00:47:19.280
And then along with the WebSocket, you know, the Tornado server has its own sort of small.

00:47:19.280 --> 00:47:23.540
I don't really want to call it RESTful because it's not very RESTful.

00:47:24.260 --> 00:47:29.800
But another HTTP endpoint where it can accept changes that come over.

00:47:29.800 --> 00:47:36.140
So essentially the browser makes a request to the REST API on the Django server.

00:47:36.140 --> 00:47:42.260
And that change gets propagated over by making another HTTP request over to the Tornado server.

00:47:42.260 --> 00:47:50.080
And then that gets broadcast out to any of the connected WebSocket clients that might be interested.

00:47:50.080 --> 00:47:50.940
Okay, cool.

00:47:50.940 --> 00:47:55.960
So the flow goes something like the JavaScript client talks to Django via REST.

00:47:55.960 --> 00:48:01.960
Then the Django server tells the Tornado server via an API that this thing has happened.

00:48:01.960 --> 00:48:08.440
And then Tornado pushes that back down to everybody except for maybe the person who made the change via WebSockets.

00:48:08.440 --> 00:48:08.860
Is that right?

00:48:08.860 --> 00:48:09.400
Yeah.

00:48:09.400 --> 00:48:11.020
And it's kind of a server.

00:48:11.020 --> 00:48:13.840
That's pretty awesome.

00:48:13.840 --> 00:48:20.700
One thing that you mentioned there that I hadn't played with or really thought about is Redis Message Broker.

00:48:20.700 --> 00:48:20.740
Sure.

00:48:20.740 --> 00:48:29.520
Because so far the stuff we talked about would work well if like Tornado, the process is managing all the connections.

00:48:29.520 --> 00:48:36.660
But what if you have like scale out to where you've got like 10 Tornado web front ends or WebSocket front ends, whatever you call it.

00:48:36.660 --> 00:48:39.660
How do you get that to work?

00:48:39.660 --> 00:48:42.460
So maybe tell everyone how you were working that out.

00:48:42.460 --> 00:48:46.440
This is one of the things that I kind of love and hate about this section.

00:48:46.440 --> 00:48:48.340
I think I would probably rewrite it.

00:48:49.340 --> 00:48:54.620
We chose Redis because it's simple and it sort of gets the job done.

00:48:54.620 --> 00:49:06.940
But I would have really loved to use Rabbit if I didn't feel like it would have added a ton of complexity here to sort of talk about AMQP and all those things.

00:49:07.160 --> 00:49:08.900
So we owned Redis.

00:49:08.900 --> 00:49:15.560
Basically Redis is the inter-process communication protocol between the Tornado instances.

00:49:15.560 --> 00:49:19.860
So Django doesn't know anything about Redis and doesn't publish to it directly.

00:49:19.860 --> 00:49:26.800
Redis is just the intermediary between if you're running multiple Tornado processes.

00:49:27.800 --> 00:49:35.960
And it's got great PubSub support and it's broadcast only, but that works for our example.

00:49:35.960 --> 00:49:44.820
So it's definitely sort of the familiar pragmatic approach to doing a simple broadcast example.

00:49:44.820 --> 00:49:46.260
It seems like a good choice.

00:49:46.260 --> 00:49:50.940
I mean, you don't want to spend a whole other chapter on like message brokers and whatnot, right?

00:49:50.940 --> 00:49:51.260
Yeah.

00:49:51.260 --> 00:49:52.000
Yeah.

00:49:52.100 --> 00:50:02.700
I mean, we wanted to make it so that it could scale beyond a single process because it's a big pet peeve of mine when I sort of see this sort of toy example.

00:50:02.700 --> 00:50:04.160
I say, look how easy it is.

00:50:04.160 --> 00:50:14.520
And it's like, well, it's easy because it doesn't scale like beyond a single process and it has no fault tolerance or high availability possibilities at all.

00:50:14.520 --> 00:50:19.620
And it's really disingenuous to say, oh, this is, oh, look how easy it is.

00:50:19.620 --> 00:50:25.000
Well, it's easy when you cut out all those things that people care about in your applications.

00:50:25.000 --> 00:50:26.180
Yeah, that's a good point.

00:50:26.180 --> 00:50:30.840
And for WebSockets, it's more important to have some kind of like fault tolerance, right?

00:50:30.840 --> 00:50:33.260
Because people are constantly connected.

00:50:33.260 --> 00:50:35.900
It's not just an instantaneous request and they have their page.

00:50:35.900 --> 00:50:37.960
They're like connected and waiting.

00:50:37.960 --> 00:50:41.520
But yeah, Redis is easy to get up and running with.

00:50:41.520 --> 00:50:43.260
People are pretty familiar with it.

00:50:43.260 --> 00:50:45.620
A lot of people use it for caching as well.

00:50:45.940 --> 00:50:59.560
And it's nice to kind of have technologies that can do a role when you aren't pushing the boundaries of scale on it that you can make use of Redis in other ways once you have it.

00:50:59.560 --> 00:51:00.360
It's really interesting.

00:51:00.360 --> 00:51:01.320
I didn't think about that use.

00:51:01.320 --> 00:51:01.740
That's great.

00:51:01.740 --> 00:51:04.940
So I think that's about all the time we have to talk about the book.

00:51:04.940 --> 00:51:06.760
But I found it really interesting.

00:51:06.760 --> 00:51:09.880
I like the take on the lightweight aspect.

00:51:10.120 --> 00:51:13.700
I like the take, Julie, like you said, like, but you can do that with Django.

00:51:13.700 --> 00:51:15.100
So here, I'll show you.

00:51:15.100 --> 00:51:15.920
Nice work.

00:51:15.920 --> 00:51:16.820
Thank you.

00:51:16.820 --> 00:51:17.480
Yeah, you bet.

00:51:17.480 --> 00:51:22.140
So you said at the beginning how you got started, you know, like, hey, let's write a book.

00:51:22.140 --> 00:51:26.340
What kind of advice do you have for others who are thinking about writing a technical book?

00:51:26.340 --> 00:51:34.160
One of the mistakes I feel like I made was assuming like, oh, yeah, I can write a chapter like that quickly.

00:51:34.240 --> 00:51:37.080
You know, I could do that like so quickly and one a week.

00:51:37.080 --> 00:51:37.820
It's going to be what?

00:51:37.820 --> 00:51:38.760
Like, well, you split it up.

00:51:38.760 --> 00:51:39.460
That's like a month.

00:51:39.460 --> 00:51:39.840
We're done.

00:51:39.840 --> 00:51:43.820
I think I think we had gotten like maybe Mark.

00:51:43.820 --> 00:51:45.660
It was like two chapters done.

00:51:45.660 --> 00:51:48.680
And we were like, oh, we've got this.

00:51:48.680 --> 00:51:49.980
Like, this is no big deal.

00:51:49.980 --> 00:51:52.100
And that was a mistake.

00:51:52.100 --> 00:52:00.060
So my advice would be to write 50% of the book before you even pitch it.

00:52:00.060 --> 00:52:01.060
Like, get it.

00:52:01.060 --> 00:52:01.860
I mean it.

00:52:01.860 --> 00:52:04.020
Like, just write it.

00:52:04.020 --> 00:52:11.420
Like, and at least get a really healthy outline down because you think you know, but you don't.

00:52:11.420 --> 00:52:11.800
Yeah.

00:52:11.800 --> 00:52:22.080
When it comes down to editing, especially when it comes to a technical book, because you're not just writing content about like and teaching content.

00:52:22.740 --> 00:52:26.560
And Michael, I think you understand this for like what you do every day.

00:52:26.560 --> 00:52:27.820
You know, it's not just about that.

00:52:27.820 --> 00:52:34.620
It's also about refinement and testing and verifying and seeing how can I make this better?

00:52:34.620 --> 00:52:37.500
It's like this mega, mega project.

00:52:37.500 --> 00:52:37.880
So.

00:52:37.880 --> 00:52:38.620
Yeah, for sure.

00:52:38.620 --> 00:52:42.700
And if you are like try to make a jump that's too big, you're going to lose people.

00:52:42.700 --> 00:52:42.980
Right.

00:52:42.980 --> 00:52:46.000
And so you've got to make sure that you can continually carry them along.

00:52:46.000 --> 00:52:47.500
And it's a big challenge.

00:52:47.500 --> 00:52:54.700
Or if you're too academic in your use of Python, which I love that Mark brought that up because we weren't sure if that was a bad.

00:52:54.700 --> 00:52:57.560
I mean, I think they gave us like one star for that.

00:52:57.560 --> 00:52:59.640
We're like, I'm actually pretty proud of that.

00:52:59.640 --> 00:53:02.160
I think that's actually kind of cool.

00:53:02.160 --> 00:53:03.740
Throw me in with Stanford at MIT.

00:53:03.900 --> 00:53:04.540
I'll take that.

00:53:04.540 --> 00:53:06.620
That's awesome.

00:53:06.620 --> 00:53:11.560
Two questions I always ask my guests on the other way out the door.

00:53:11.560 --> 00:53:13.220
So, Julie, I'll go with you first.

00:53:13.220 --> 00:53:16.080
What is your favorite PI PI package?

00:53:16.080 --> 00:53:17.780
We have over 90,000 now.

00:53:17.780 --> 00:53:20.100
And I'm sure there's some that you use that are great.

00:53:20.320 --> 00:53:25.920
Well, I really enjoy keeping my things neat and tidy, especially when it comes to using Git.

00:53:25.920 --> 00:53:30.160
And while branches are cheap, I still like removing them when I'm not using them anymore.

00:53:30.160 --> 00:53:36.360
So I really like this little package called GitSweep, which verifies what's been merged in and what hasn't and cleans them up.

00:53:36.360 --> 00:53:36.940
Oh, nice.

00:53:36.940 --> 00:53:43.100
So if you do like a pull request and that the request is accepted, the GitSweep will automatically delete the branch, something like that?

00:53:43.100 --> 00:53:43.980
Yeah, yeah.

00:53:44.180 --> 00:53:49.900
So you can just keep everything nice and tidy, hence the name GitSweep.

00:53:49.900 --> 00:53:51.160
Okay, that's awesome.

00:53:51.160 --> 00:53:55.720
And then, of course, PyLadies, which has a very dear place in my heart.

00:53:55.720 --> 00:53:56.200
Nice.

00:53:56.200 --> 00:53:57.480
What is the PyLadies package?

00:53:57.480 --> 00:53:59.340
I know what PyLadies, the organization, is.

00:53:59.340 --> 00:54:00.740
So it's actually the kit.

00:54:00.740 --> 00:54:04.260
So let's say you want to start a PyLadies in your local area.

00:54:04.260 --> 00:54:07.100
Then you can just pip install PyLadies.

00:54:07.100 --> 00:54:10.740
And then you can get a whole information package of how you can get started.

00:54:10.740 --> 00:54:13.840
And I believe that the package is, I can't remember the name.

00:54:13.980 --> 00:54:14.420
Sphinx.

00:54:14.420 --> 00:54:15.640
It's built off of Sphinx.

00:54:15.640 --> 00:54:19.320
So I don't know if it's based off of Read the Docs or it's just straight up Sphinx.

00:54:19.320 --> 00:54:20.040
I can't remember.

00:54:20.040 --> 00:54:20.260
Sure.

00:54:20.260 --> 00:54:24.560
But yeah, it's just a nice little thing.

00:54:24.560 --> 00:54:26.980
Linroot made it because she's amazing.

00:54:26.980 --> 00:54:27.860
Yeah, that's awesome.

00:54:27.860 --> 00:54:28.760
Yeah, I had her on the show.

00:54:28.760 --> 00:54:29.200
She's great.

00:54:29.200 --> 00:54:30.400
Mark, how about you?

00:54:30.400 --> 00:54:31.940
My favorite package is Django.

00:54:31.940 --> 00:54:35.120
Obviously, it's my livelihood.

00:54:35.120 --> 00:54:38.740
And I'm thankful to have found it.

00:54:39.120 --> 00:54:43.420
And beyond that, I mean, I like a lot of sort of linting tools.

00:54:43.420 --> 00:54:51.960
I'm really grateful for Flake 8 and the suite of tools around PyCode style and PyFlakes.

00:54:52.220 --> 00:54:53.820
I make a lot of typos.

00:54:53.820 --> 00:55:01.020
And so it helps me catch when I misspelled a variable in one place to say, hey, you're

00:55:01.020 --> 00:55:04.040
trying to use a variable that's never been used.

00:55:04.040 --> 00:55:08.080
Or, hey, this variable that you thought you were using isn't being used.

00:55:08.080 --> 00:55:08.940
You just spelled it wrong.

00:55:08.940 --> 00:55:14.700
It helps me find a dead code or code that is imported and not used.

00:55:14.960 --> 00:55:17.720
So I really always install Flake 8.

00:55:17.720 --> 00:55:19.440
Yeah, that's great advice.

00:55:19.440 --> 00:55:20.280
All right.

00:55:20.280 --> 00:55:25.760
So the other question I always ask is when you write Python code, what editor do you use?

00:55:25.760 --> 00:55:26.240
Julia?

00:55:26.240 --> 00:55:28.700
I don't have really a favorite.

00:55:28.700 --> 00:55:32.100
I think it's whatever I need to use at the time, depending on what space I'm in.

00:55:32.100 --> 00:55:35.700
Because I use Sublime, but I've also used Atom.

00:55:35.700 --> 00:55:37.440
And I use Vim sometimes.

00:55:37.440 --> 00:55:40.020
I just kind of like don't want to leave command line.

00:55:40.020 --> 00:55:42.720
But it's not like, I don't know, I just don't really have a favorite.

00:55:42.720 --> 00:55:44.560
It's whatever works at the time.

00:55:44.860 --> 00:55:45.880
Whatever I'm trying to do.

00:55:45.880 --> 00:55:46.440
Be flexible.

00:55:46.440 --> 00:55:46.940
Awesome.

00:55:46.940 --> 00:55:47.540
Mark?

00:55:47.540 --> 00:55:50.220
As pretentious as it sounds, I really like them.

00:55:50.220 --> 00:55:53.860
I switched a couple years ago.

00:55:53.860 --> 00:55:55.800
And it's been really nice.

00:55:55.800 --> 00:56:01.900
It really helps me focus to just sort of see one file open at a time.

00:56:01.900 --> 00:56:06.380
I have to be very deliberate about moving out of that file, moving to another one.

00:56:06.380 --> 00:56:13.540
And whereas I found myself, when I switched from Sublime, and I just found myself kind of having

00:56:13.540 --> 00:56:19.800
a thousand files open in a billion tabs and clicking around everywhere to try to find where I was going.

00:56:19.800 --> 00:56:25.160
And just Vim has really helped me focus on one task at a time.

00:56:25.160 --> 00:56:25.600
Oh, yeah.

00:56:25.600 --> 00:56:26.920
That's a really cool advantage.

00:56:26.920 --> 00:56:27.700
All right.

00:56:27.700 --> 00:56:29.020
You guys, final call to action.

00:56:29.440 --> 00:56:34.900
What do people do to get started your book or take advantage of this whole idea that you're promoting as lightweight Django?

00:56:34.900 --> 00:56:39.840
Well, if you haven't checked out the book, it's available for purchase on O'Reilly's website.

00:56:39.840 --> 00:56:46.260
You can get e-book or a beautiful dead tree version with a hummingbird from the front.

00:56:46.400 --> 00:56:46.600
Nice.

00:56:46.600 --> 00:56:49.160
And I'll be sure to put the link in the show notes so people can check it out.

00:56:49.160 --> 00:56:55.440
We have our code examples up on GitHub, which you can see without purchasing the book, though.

00:56:55.440 --> 00:56:58.680
They maybe won't have a lot of context around them.

00:56:58.680 --> 00:57:05.540
Additionally, I recorded a webcast with O'Reilly about intermediate topics in Django.

00:57:05.660 --> 00:57:17.320
So if you sort of fit that audience of, you know, I've done a little bit of Django and I'm not sure where to go beyond the polls sort of tutorial, you can check that out.

00:57:17.320 --> 00:57:22.320
I cover using Django along with Celery for background task processing.

00:57:22.320 --> 00:57:27.800
And I talk about using Playgate to keep your Django code clean and up to date.

00:57:27.800 --> 00:57:28.400
All right.

00:57:28.400 --> 00:57:28.760
Awesome.

00:57:28.760 --> 00:57:31.160
Julia, Mark, thank you for being on the show.

00:57:31.160 --> 00:57:35.020
This is a really interesting take on Django, and I enjoyed talking about it with you.

00:57:35.080 --> 00:57:36.000
It's been great talking to you.

00:57:36.000 --> 00:57:37.120
Thank you for having me.

00:57:37.120 --> 00:57:41.640
This has been another episode of Talk Python to Me.

00:57:41.640 --> 00:57:44.520
Today's guests have been Julie Elman and Mark Levin.

00:57:44.520 --> 00:57:47.780
And this episode has been sponsored by GoCD and PyUp.

00:57:47.780 --> 00:57:49.580
Thank you both for supporting the show.

00:57:49.580 --> 00:57:54.700
GoCD is the on-premise, open-source, continuous delivery server.

00:57:54.700 --> 00:57:58.860
Want to improve your deployment workflow but keep your code and builds in-house?

00:57:58.860 --> 00:58:05.220
Check out GoCD at talkpython.fm/gocd and take control over your process.

00:58:05.220 --> 00:58:10.740
Are there bugs or vulnerabilities hiding in your app's dependencies or even in their dependencies?

00:58:10.740 --> 00:58:16.360
Stop guessing and start getting notified by registering your GitHub repo with pyup.io.

00:58:16.700 --> 00:58:18.760
Are you or a colleague trying to learn Python?

00:58:18.760 --> 00:58:23.420
Have you tried books and videos that just left you bored by covering topics point by point?

00:58:23.420 --> 00:58:29.420
Well, check out my online course, Python Jumpstart, by building 10 apps at talkpython.fm/course

00:58:29.420 --> 00:58:32.040
to experience a more engaging way to learn Python.

00:58:32.040 --> 00:58:39.340
And if you're looking for something a little more advanced, try my Write Pythonic Code course at talkpython.fm/pythonic.

00:58:39.900 --> 00:58:44.540
You can find the links from this episode at talkpython.fm/88.

00:58:44.540 --> 00:58:47.040
That's right, I've added a new short link.

00:58:47.040 --> 00:58:52.640
So anytime you want to get to a particular episode, it's always talkpython.fm/show number.

00:58:52.640 --> 00:58:55.740
There's all sorts of cool stuff on the show pages, so be sure to check them out.

00:58:55.740 --> 00:58:57.720
Be sure to subscribe to the show.

00:58:57.720 --> 00:58:59.940
Open your favorite podcatcher and search for Python.

00:58:59.940 --> 00:59:01.180
We should be right at the top.

00:59:01.560 --> 00:59:10.500
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct RSS feed at /rss on talkpython.fm.

00:59:10.500 --> 00:59:15.580
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

00:59:15.580 --> 00:59:22.280
Corey just recently started selling his tracks on iTunes, so I recommend you check it out at talkpython.fm/music.

00:59:22.280 --> 00:59:27.620
You can browse his tracks he has for sale on iTunes and listen to the full-length version of the theme song.

00:59:27.620 --> 00:59:29.700
This is your host, Michael Kennedy.

00:59:29.700 --> 00:59:30.980
Thanks so much for listening.

00:59:31.180 --> 00:59:32.180
I really appreciate it.

00:59:32.180 --> 00:59:34.320
Smix, let's get out of here.

