WEBVTT

00:00:00.001 --> 00:00:05.600
2020 will be one for the history books, won't it? I've put together a great group to look back on

00:00:05.600 --> 00:00:11.600
2020 from the Python perspective. Join me along with Cecil Phillip, Ines Montani, Jay Miller,

00:00:11.600 --> 00:00:17.180
Paul Everett, Reuven Lerner, Matt Harrison, and Brian Okken for a lighthearted and fun look back

00:00:17.180 --> 00:00:24.160
on the major Python events of 2020. This is Talk Python to Me, episode 297, recorded November 30th,

00:00:24.160 --> 00:00:27.400
2020. Happy New Year, everyone, and thanks for listening.

00:00:27.960 --> 00:00:32.980
Welcome to Talk Python to Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:00:32.980 --> 00:00:37.940
and the personalities. This is your host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy,

00:00:37.940 --> 00:00:41.680
and keep up with the show and listen to past episodes at talkpython.fm,

00:00:41.680 --> 00:00:44.820
and follow the show on Twitter via at Talk Python.

00:00:44.820 --> 00:00:49.920
So let's go ahead and just kick off this episode. This one is a little bit different than the standard

00:00:49.920 --> 00:00:55.040
show. Everyone here has been a guest and a great guest, and some of you even repeat guests. Some

00:00:55.040 --> 00:00:59.860
of you are a repeat guest and scheduled for more episodes even, hint, hint, Ines. But let's go

00:00:59.860 --> 00:01:03.080
ahead and kick it off. So this is going to be a year in review. There's a bunch of us here,

00:01:03.080 --> 00:01:08.560
seven or eight of us, and I'll just do a quick introduction. Let me just welcome you individually

00:01:08.560 --> 00:01:12.300
on. You could say, you know, a couple sentences about who you are and whatnot so people know.

00:01:12.300 --> 00:01:17.180
And then we're just going to get into what you thought was the most interesting, impactful thing

00:01:17.180 --> 00:01:21.060
of the year. And I have some software to help me do this. So let me run it here. Darn it,

00:01:21.060 --> 00:01:25.000
it's me. All right, we'll go back to that. Well, let me welcome you all, then we'll go

00:01:25.000 --> 00:01:28.740
through this. So Jay, Jay Miller, welcome to Talk By The Me again.

00:01:28.740 --> 00:01:31.980
Happy to be here. I haven't been a guest in like three years. So

00:01:31.980 --> 00:01:36.400
I know, but your episode was so popular, like over a hundred thousand people listened to your

00:01:36.400 --> 00:01:38.240
episode. Can you believe that? That's so insane.

00:01:38.240 --> 00:01:40.980
I'm shutting down my podcast. I don't get those kinds of listens.

00:01:40.980 --> 00:01:43.360
Tell people about yourself.

00:01:44.500 --> 00:01:50.700
Sure. Jay Miller. I'm a podcaster, developer, now developer advocate for Elastic, you know,

00:01:50.700 --> 00:01:57.860
the people that do search and we are database shots again, Michael. But yeah, I'm just happy

00:01:57.860 --> 00:01:59.460
to be here. Yeah, that's it.

00:01:59.460 --> 00:02:03.360
Awesome. Welcome. Reuven Lerner. Welcome back. Good to see you, man.

00:02:03.360 --> 00:02:04.280
Hey there. Nice to be here.

00:02:04.280 --> 00:02:05.560
How early is it?

00:02:05.560 --> 00:02:07.240
It's not that early. It's only 530.

00:02:07.240 --> 00:02:11.620
Oh, okay. Well, thank you so much for waking up early and making, yeah, we have people from

00:02:11.620 --> 00:02:15.580
basically every corner of the world. So yeah, tell people about yourself again,

00:02:15.580 --> 00:02:16.580
if they haven't heard the episodes.

00:02:16.580 --> 00:02:23.320
Sure. So I'm a Python trainer. So most days I'm in different companies doing on-site training.

00:02:23.320 --> 00:02:27.940
Nowadays, a little less on-site for some strange reason. And so I normally do corporate training,

00:02:27.940 --> 00:02:31.920
everything from intro to Python for non-programmers all the way up to advanced Python workshops.

00:02:31.920 --> 00:02:36.520
And I also sell a whole bunch of courses online to individuals. Oh, and I have my book,

00:02:36.520 --> 00:02:37.980
my book, Python Workout.

00:02:37.980 --> 00:02:38.520
Yay.

00:02:38.520 --> 00:02:42.700
Yeah. And we're streaming live with video, so you can hold it up. Yeah, that's awesome.

00:02:42.700 --> 00:02:44.180
Oh, I can hold it up.

00:02:44.180 --> 00:02:45.720
Python Workout. Awesome.

00:02:45.720 --> 00:02:46.940
And this is the picture of me on the cover, of course.

00:02:46.940 --> 00:02:49.920
Of course. Yeah. That was when you were working out, preparing for the Olympics.

00:02:49.920 --> 00:02:51.100
Precisely. Precisely.

00:02:51.100 --> 00:02:54.900
Yeah, exactly. So we'll be sure to link to your book and some of your courses as well.

00:02:54.900 --> 00:02:57.980
Ines, welcome from the other side of the world.

00:02:57.980 --> 00:03:04.160
Yeah, I'm currently in Australia. Escaped the EU lockdowns. And now I'm here. Yeah. Happy to be back.

00:03:04.160 --> 00:03:07.420
I think I've been on a few of your podcasts, but it's always my favorite podcast.

00:03:07.420 --> 00:03:12.420
Oh, thank you. Yeah. It's awesome to have you here. And I have definitely dreamed about,

00:03:12.420 --> 00:03:18.120
well, my daughter goes to school online. I always work online. Maybe we should just go somewhere by

00:03:18.120 --> 00:03:22.200
a beach away from people. How can we do that where it's warm? Right. And it seems like you pulled it

00:03:22.200 --> 00:03:24.640
off. Beautiful. All right. Paul, Paul Everett. Welcome.

00:03:24.640 --> 00:03:30.240
I just saw Anthony Shaw talking. So if you want to talk about converting your life to work at the beach,

00:03:30.240 --> 00:03:34.520
just subscribe to his damn Twitter account. Welcome, Anthony Shaw.

00:03:34.520 --> 00:03:35.480
Anthony, I'm raging against you.

00:03:35.480 --> 00:03:41.560
Oh my gosh. Also from Australia. Hey, Anthony. And Andri from PyCharm is here. A bunch of folks.

00:03:41.560 --> 00:03:43.340
Mark, awesome. Paul, introduce yourself.

00:03:43.340 --> 00:03:49.780
Sure. Developer advocate at JetBrains for Python stuff and web stuff. Most known for giving the Python

00:03:49.780 --> 00:03:56.360
1994 talk. My purpose on this panel is to increase the median age so that we all qualify for the

00:03:56.360 --> 00:03:57.320
discount at the buffet.

00:03:57.940 --> 00:04:01.080
Hey, man. I'm right there with you. Right there with you. Awesome. Nice to have you, Paul.

00:04:01.080 --> 00:04:03.160
Brian, we've met before, right?

00:04:03.160 --> 00:04:03.900
No.

00:04:03.900 --> 00:04:09.400
Brian Okken, he and I co-host Python Bytes Together. And you've been on the show quite a few times as

00:04:09.400 --> 00:04:13.340
well. Last time, I think we covered 30 pytest plugins. That was quite the whirlwind tour.

00:04:13.340 --> 00:04:17.060
Yeah. So I highly recommend this book to anybody that wants to learn pytest.

00:04:17.060 --> 00:04:18.940
Awesome. Matt Harrison, welcome back.

00:04:18.940 --> 00:04:25.300
Thanks. Good to be here. I guess I'm similar to Reuben. I do corporate training and consulting in Python

00:04:25.300 --> 00:04:29.820
and data science. And I guess since we're flaunting books, I'll flaunt my latest book.

00:04:29.820 --> 00:04:32.600
Wait, wait. The tiny Python 3 notebook. Awesome.

00:04:32.600 --> 00:04:34.780
The Python notebook. It's very small. Anyway.

00:04:34.780 --> 00:04:38.640
It is tiny. Well, what I was going to say, Matt, is like, you're going to need to be like basically

00:04:38.640 --> 00:04:42.200
an octopus to hold up all your books. Multiple books on each tentacle.

00:04:42.200 --> 00:04:45.540
I've got a few here. So yeah, it's good to be here. Thanks for having me on.

00:04:45.540 --> 00:04:48.280
Yeah. Yeah. You were just recently on about learning how to learn.

00:04:48.280 --> 00:04:48.820
Yeah.

00:04:49.060 --> 00:04:51.380
Does it count if I have everyone else's book?

00:04:51.380 --> 00:04:55.260
Yes, it does. But it will also be hard to hold them all up, especially if you've got all of Matt's.

00:04:55.260 --> 00:04:58.180
Cecil Phillip, man. Hello. Good to see you, friend.

00:04:58.180 --> 00:05:01.020
Hey, thanks for having me on. I don't have any books to share,

00:05:01.020 --> 00:05:03.960
but because I hate writing, so I don't write anything.

00:05:03.960 --> 00:05:10.120
I do do some video. So if y'all are interested, I do do a weekly Python stream on Wednesdays.

00:05:10.480 --> 00:05:13.860
So if you folks want to check it out, it's on Twitch, the Microsoft developer account.

00:05:13.860 --> 00:05:18.780
And we do very beginner-friendly conversations about Python and stuff like that.

00:05:18.780 --> 00:05:20.620
And Michael, you were just on the other day too, right?

00:05:20.620 --> 00:05:23.460
Yeah, it was so fun to be on there with you. We got to play around with FastAPI.

00:05:23.460 --> 00:05:24.860
And man, that's a cool framework.

00:05:24.860 --> 00:05:27.380
So it's Coding from the Beach. What's the name of the show?

00:05:27.380 --> 00:05:29.760
That's a good name, actually. Maybe I should coin that one.

00:05:29.760 --> 00:05:35.360
No, so we do PyWeekly. So it's me and my co-worker, Brian Clark.

00:05:35.560 --> 00:05:39.100
And we kind of approach Python from the perspective of beginners,

00:05:39.100 --> 00:05:43.560
but also from two people that don't necessarily know Python very well.

00:05:43.560 --> 00:05:46.340
So Brian is a JavaScript guy. I'm a .NET guy.

00:05:46.340 --> 00:05:49.580
But we're both, I like to call it PyCurious. You know what I mean?

00:05:49.580 --> 00:05:50.580
Like we're Python Curious.

00:05:50.580 --> 00:05:56.160
And we definitely want to show people the different perspectives of learning new languages.

00:05:56.160 --> 00:05:58.420
Yeah, it's super interesting. And it's really low-key.

00:05:58.420 --> 00:06:03.640
It's like you said, it's this Twitch sort of exploration style of code,

00:06:03.640 --> 00:06:05.400
not polished presentation style.

00:06:05.480 --> 00:06:09.560
So you just guys sit down, take feedback from the audiences and go with it.

00:06:09.560 --> 00:06:11.940
Yeah, I love the show because I'm never prepared.

00:06:11.940 --> 00:06:15.660
Like I kind of just show up and talk about stuff and people love it.

00:06:15.660 --> 00:06:19.480
And it's great. I don't have to do notes or anything like that.

00:06:19.480 --> 00:06:21.700
We just kind of be like, hey, what do we want to learn about today?

00:06:21.700 --> 00:06:22.880
Right? Well, let's go ahead and do it.

00:06:22.880 --> 00:06:24.840
Yeah, fantastic. All right.

00:06:24.840 --> 00:06:28.060
Well, given how many of us there are, let's go ahead and just jump in.

00:06:28.060 --> 00:06:29.840
And we're going to do our year in review.

00:06:29.840 --> 00:06:33.180
And so I've written a small piece of Python software here in the REPL.

00:06:33.180 --> 00:06:35.380
It's very advanced. It's at least four lines of code.

00:06:35.400 --> 00:06:36.060
I've got to tell you.

00:06:36.060 --> 00:06:37.780
And what it's going to do is going to pick one of you.

00:06:37.780 --> 00:06:42.060
And then we're going to have you talk about what you felt was the most significant

00:06:42.060 --> 00:06:45.520
or impactful thing that you saw happening in the Python space.

00:06:45.520 --> 00:06:49.860
So round one, Cecil, you're on screen and it pulled you up.

00:06:49.860 --> 00:06:50.440
Go for it.

00:06:50.440 --> 00:06:51.060
I got lucky.

00:06:51.280 --> 00:07:04.780
Okay. So the most exciting thing that I think happened in the world of Python and one that I have a little bit of a close relationship to is the fact that Guido von Rossum joined Microsoft just a couple of weeks ago.

00:07:04.780 --> 00:07:08.220
So I didn't mention this before, but I do work at Microsoft as a developer advocate.

00:07:08.440 --> 00:07:17.880
And I think for me, it's been a really interesting to kind of see how the company has been embracing open source and working with a lot of the creators.

00:07:18.100 --> 00:07:22.820
And now seeing a lot of the leaders of the industry kind of join the company, you know what I mean?

00:07:22.820 --> 00:07:25.660
It kind of, you know, it's a kind of, it's like a different world.

00:07:25.660 --> 00:07:28.560
I mean, I don't know how else to explain it or talk about it.

00:07:28.560 --> 00:07:30.220
It's been really great to have him here.

00:07:30.620 --> 00:07:38.760
I had the opportunity actually to interview him and we did like an internal interview just talking about like, well, what made you decide to come out of retirement?

00:07:38.760 --> 00:07:40.000
That's awesome.

00:07:40.000 --> 00:07:41.120
Was this on channel nine?

00:07:41.120 --> 00:07:42.640
Is it public or is it?

00:07:42.640 --> 00:07:43.460
No, it was internal.

00:07:43.460 --> 00:07:44.420
It was an internal interview.

00:07:44.420 --> 00:07:49.340
I don't know what his, his, I'm sure he'll do some other ones, but it was an internal one.

00:07:49.340 --> 00:07:50.640
Did you make him whiteboard?

00:07:50.640 --> 00:07:52.520
No, we didn't do him any whiteboarding.

00:07:52.520 --> 00:07:54.620
We did ask him what some of his favorite shows were.

00:07:54.620 --> 00:07:56.020
So that was pretty interesting.

00:07:56.020 --> 00:07:59.340
We asked him like the Star Trek versus Star Wars conversation too.

00:07:59.800 --> 00:08:01.340
I couldn't, I couldn't handle that pressure.

00:08:01.340 --> 00:08:02.860
It's hard, man.

00:08:02.860 --> 00:08:03.440
It's a tough crowd.

00:08:03.440 --> 00:08:04.300
It's a tough crowd.

00:08:04.300 --> 00:08:15.320
I think it's definitely amazing to be able to see folks from the industry, like kind of embracing like these different companies and us really supporting open source in a very like authentic way.

00:08:15.320 --> 00:08:15.820
Yeah.

00:08:15.820 --> 00:08:17.160
It's such a big change.

00:08:17.160 --> 00:08:22.660
Reuben, you were just talking before we started streaming, I think about, you know, 10 years ago, how this was really different.

00:08:22.660 --> 00:08:23.340
Oh yeah.

00:08:23.340 --> 00:08:29.580
I mean like even more, but yeah, even 10 years ago, the notion that Microsoft would be so involved in the open source.

00:08:29.580 --> 00:08:33.000
Space and specifically the Python space was basically unthinkable.

00:08:33.260 --> 00:08:39.500
I mean, I think it was Steve Ballmer who said that, you know, Microsoft, like the Linux and open source were a cancer on the industry.

00:08:40.080 --> 00:08:45.280
And they were definitely seen, you know, Microsoft was seen as an enemy of the open source world.

00:08:45.280 --> 00:08:47.880
And it's been truly amazing to see them just embrace it.

00:08:47.880 --> 00:08:51.100
I mean, you see the booth at Python, you see the VS Code investment.

00:08:51.100 --> 00:08:52.380
It's very, very impressive.

00:08:52.380 --> 00:08:59.460
And it demonstrates, and he says, we'll say this earlier, like how much leadership at the top really can change the direction and the attitude of a company.

00:08:59.460 --> 00:09:04.000
And that filters through to even the lower level people and the decisions made there.

00:09:04.000 --> 00:09:04.420
Yeah.

00:09:04.420 --> 00:09:06.100
That's a lot of hard work, right?

00:09:06.100 --> 00:09:09.860
Because if you think about it, we've had different leadership for a very long time.

00:09:09.940 --> 00:09:15.860
And so for some of us, some of this change that people are still recognizing, I mean, we've been doing it for a very long time.

00:09:15.860 --> 00:09:16.520
You know what I mean?

00:09:16.520 --> 00:09:20.880
Like we didn't just in 2020 decide, oh, hey, let's adopt and support open source.

00:09:21.180 --> 00:09:25.120
It's been one of those things that have been building, you know, very much over time.

00:09:25.120 --> 00:09:29.760
But, you know, the fact of the matter is like you still have those old stigmas that we still have to shake.

00:09:29.760 --> 00:09:36.860
And, you know, we still have a lot of folks that we have to help convince that we're not the death star and we won't, you know, destroy the world kind of thing.

00:09:36.860 --> 00:09:43.660
But I think it's a good responsibility to take on because there's also, you know, there's a lot to fuck up.

00:09:43.660 --> 00:09:55.440
And if you commit to like doing something like, you know, GitHub acquisition and say, okay, we're doing that and we're running it, you know, we're good sign forward because every misstep can have like, you know, a really big impact.

00:09:55.440 --> 00:10:00.100
You know, if Microsoft starts doing bad things again, people are not going to be, you know, very forgiving at all.

00:10:00.100 --> 00:10:07.220
So I think that was the most sensitive one of them all is the GitHub acquisition because what they do to Azure is kind of their story.

00:10:07.220 --> 00:10:08.660
What they do to Windows is their story.

00:10:08.660 --> 00:10:10.500
But what they do to GitHub, that's everyone's story.

00:10:10.500 --> 00:10:12.580
And all of a sudden, that was a big deal.

00:10:13.000 --> 00:10:18.380
And on top of that, you have the ability to give GitHub a little bit more power in the space.

00:10:18.380 --> 00:10:23.400
Like, I mean, we've all been kind of watching what's happening with like YouTube DL and stuff like that.

00:10:23.400 --> 00:10:25.660
And just seeing the support.

00:10:25.660 --> 00:10:27.520
It's not just GitHub anymore.

00:10:27.520 --> 00:10:41.880
Now it's like, okay, what does one of the wealthiest companies in the world, you know, say about this particular position that YouTubers have a problem with, that people in tech have a problem with, like a lot of abusive behavior.

00:10:41.880 --> 00:10:45.080
And on top of that, you're providing support for things like NPM.

00:10:45.080 --> 00:10:46.420
It's one of those questions.

00:10:46.420 --> 00:10:54.300
We all want to contribute to open source, but none of us have the financial ability to contribute like a company like Microsoft can.

00:10:54.300 --> 00:11:00.300
So I'm not just saying we're going to be a part of it, but saying, no, we're really going to be a part of it is like a huge deal.

00:11:00.680 --> 00:11:01.040
Yeah.

00:11:01.040 --> 00:11:04.220
The million dollar defense fund that they just announced is a big deal.

00:11:04.280 --> 00:11:05.120
Yeah, for sure.

00:11:05.120 --> 00:11:06.960
And when you think about GitHub, right?

00:11:06.960 --> 00:11:09.560
Like you think about like developer culture.

00:11:09.560 --> 00:11:15.140
That's what GitHub kind of represents to me is the new, you know, the future of developer culture.

00:11:15.140 --> 00:11:16.300
Like how do we collaborate?

00:11:16.300 --> 00:11:17.400
How do we work with each other?

00:11:17.400 --> 00:11:21.940
How do we share not just source code, but like experiences and knowledge, right?

00:11:21.940 --> 00:11:24.260
Through like something that we can all connect together with.

00:11:24.440 --> 00:11:25.260
That's code, right?

00:11:25.260 --> 00:11:34.980
And then kind of circling it back around to Vita, being able to, again, see these leaders of these really large open source projects put their faith in the company.

00:11:35.080 --> 00:11:38.560
And even considering what the past of the company was to what it is today.

00:11:38.560 --> 00:11:47.800
I think hopefully like the rest of the open source world would start to realize that we are serious about being good open source citizens and supporting the culture and the community.

00:11:47.800 --> 00:11:51.420
I mean, me personally, I'm just really excited to see what he's going to do, what he's going to work on.

00:11:51.420 --> 00:11:52.660
The future is bright, man.

00:11:52.660 --> 00:11:53.520
Yeah, absolutely.

00:11:53.520 --> 00:12:09.220
I think someone on Twitter had said, so now we actually hire folks that contributes to, you know, obviously C# and F sharp and the .NET stuff, but also folks that contribute to Java, Rust, C++, and obviously Python, right?

00:12:09.220 --> 00:12:12.700
So we have a whole host of language folks underneath the umbrella of the company.

00:12:12.700 --> 00:12:21.340
And so now being able to have that space of collaboration, like underneath the umbrella of one company, I think is going to be really interesting to see what the next couple of years looks like.

00:12:21.620 --> 00:12:25.280
Yeah, you're going to have to come back in six months and give us an update on all the Python tools you see.

00:12:25.280 --> 00:12:26.640
I'll give you the six month update on it.

00:12:26.640 --> 00:12:27.200
Right on.

00:12:27.200 --> 00:12:27.400
All right.

00:12:27.400 --> 00:12:28.700
I'm going to run the chooser.

00:12:28.700 --> 00:12:30.460
Hall, it has chosen you.

00:12:30.460 --> 00:12:32.500
Not sure about your chooser algorithm here.

00:12:32.500 --> 00:12:33.840
There doesn't seem to be.

00:12:33.840 --> 00:12:37.000
Random dot choice.

00:12:37.000 --> 00:12:37.800
I'm telling you.

00:12:37.800 --> 00:12:42.440
This time, it's not a good time to talk about election strategies.

00:12:42.440 --> 00:12:44.600
And as soon as how it chose you first.

00:12:44.600 --> 00:12:45.820
It could be flawed.

00:12:45.820 --> 00:12:47.140
We're reviewing it.

00:12:47.140 --> 00:12:49.160
Are you changing the random seat on everything?

00:12:49.160 --> 00:12:50.540
Exactly.

00:12:50.540 --> 00:12:51.240
Exactly.

00:12:51.500 --> 00:12:52.840
Yeah, I should be.

00:12:52.840 --> 00:12:56.400
My topic is things change, nothing changes.

00:12:56.400 --> 00:12:59.320
And I think I'm maybe stealing someone else's topic.

00:12:59.320 --> 00:13:02.240
So I appreciate your random algorithm choosing me first.

00:13:02.240 --> 00:13:03.640
And it's kind of along the line.

00:13:03.640 --> 00:13:08.340
I'm kind of interested in open source communities over the years and decades and why one works,

00:13:08.340 --> 00:13:09.300
why one doesn't.

00:13:09.300 --> 00:13:15.240
In particular, a lot of open source projects that get successful kind of founder when the founder leaves.

00:13:15.760 --> 00:13:25.260
And over the last couple of years, you've seen Guido transition out, stepping out as BDFL and kind of a new language governance model that he didn't even decide on.

00:13:25.320 --> 00:13:35.740
And then, you've seen the big fundraiser.

00:13:35.740 --> 00:13:37.900
An organizing event called PyCon.

00:13:37.900 --> 00:13:43.940
Python 2.7 end of life, which I guess a lot of us thought would never effing happen.

00:13:44.260 --> 00:13:45.160
And it effing happened.

00:13:45.160 --> 00:13:54.120
And through all of this change for a project that was like reaching mega escape velocity and popularity, nothing changed.

00:13:54.120 --> 00:13:55.240
Everyone's like, who cares?

00:13:55.240 --> 00:13:58.000
Python just kept on doing its business.

00:13:58.000 --> 00:13:59.800
Releases kept cranking out.

00:13:59.800 --> 00:14:01.240
Peps kept cranking out.

00:14:01.240 --> 00:14:02.160
Elections.

00:14:02.600 --> 00:14:04.620
Well, Python elections kept cranking out.

00:14:04.620 --> 00:14:07.760
Michael and Brian kept cranking out podcasts.

00:14:07.760 --> 00:14:08.540
Hallelujah.

00:14:08.540 --> 00:14:10.500
Something good happened in 2020.

00:14:10.500 --> 00:14:13.080
And so, it's interesting to me.

00:14:13.080 --> 00:14:16.640
Healthy projects are those with kind of a healthy bench, kind of a middle management.

00:14:16.640 --> 00:14:19.120
Python has a hell of a middle management now.

00:14:19.120 --> 00:14:19.760
It's awesome.

00:14:19.760 --> 00:14:23.000
And it's like middle management in every vector now.

00:14:23.000 --> 00:14:29.580
It's got language leadership, middle management, foundation leadership, middle management, conferences.

00:14:29.580 --> 00:14:32.800
All the regional conferences are kicking ass, even online.

00:14:32.800 --> 00:14:38.100
So, it's really good for me to see kind of a balance between some of the old heroes like Brett Cannon,

00:14:38.100 --> 00:14:43.240
who gave this awesome keynote two or three or four years ago at PyCon about open source.

00:14:43.240 --> 00:14:46.480
And then some of the new heroes like Marlene Mangami.

00:14:46.480 --> 00:14:49.900
When I give the Python 1994 talk, sometimes I give it with Barry.

00:14:49.900 --> 00:14:53.620
And it's like, well, did you ever know back then that it was good?

00:14:53.620 --> 00:14:54.840
Hell no, we didn't know.

00:14:54.840 --> 00:15:02.060
And so, seeing all of this happen, seeing generation after generation come in, do their thing, raise the next generation is pretty cool to see.

00:15:02.060 --> 00:15:02.420
Yeah.

00:15:02.420 --> 00:15:03.340
It's fantastic.

00:15:03.340 --> 00:15:09.140
And I know there was a lot of uncertainty when Guido stepped down about, oh my gosh, what's going to happen.

00:15:09.140 --> 00:15:11.600
But it's kind of been a non-issue, which is good.

00:15:11.600 --> 00:15:13.060
Non-issue in a good way.

00:15:13.060 --> 00:15:13.540
Indeed.

00:15:13.780 --> 00:15:20.120
Yeah, I think it's really nice to also have, you know, some stability, even, you know, especially nowadays, that's quite rare.

00:15:20.120 --> 00:15:22.940
And just to see, you know, stuff just works.

00:15:22.940 --> 00:15:24.220
Nothing goes wrong.

00:15:24.220 --> 00:15:24.760
No drama.

00:15:24.760 --> 00:15:26.580
No, you know, nothing terrible.

00:15:26.580 --> 00:15:27.340
Just drama.

00:15:27.340 --> 00:15:28.100
Almost boring.

00:15:28.100 --> 00:15:28.560
Yeah.

00:15:28.560 --> 00:15:29.600
Boring is good these days.

00:15:29.600 --> 00:15:34.180
One of the things that really surprises me, Paul, as you mentioned, the escape velocity.

00:15:34.620 --> 00:15:43.560
What's weird to me is how Python went, like, 20 years on medium, like, simmer popularity, and then it hit the afterburners and took off.

00:15:43.560 --> 00:15:44.000
Right?

00:15:44.000 --> 00:15:53.500
It seems just, I think there's going to be some interesting studies done about why or how did a language that had kind of been around for 20 years all of a sudden really dramatically improve in popularity.

00:15:53.500 --> 00:15:57.720
And, you know, I have some ideas, but I just think that that's an interesting aspect of what you're talking about here.

00:15:57.720 --> 00:16:09.820
Yeah, it's also the whole aspect of the, you know, the previous, like, Microsoft and Java and sort of, I guess, big money behind those sorts of languages in, like, the early 2000s, pushing them.

00:16:09.820 --> 00:16:19.800
And then I think community and to the point of, like, developer gave developers what they wanted rather than maybe, say, enterprise-y languages.

00:16:19.800 --> 00:16:24.140
And then I think there's a whole confluence of other things that happened as well.

00:16:24.140 --> 00:16:32.500
But it is kind of crazy, right, that, like, one of the top, if not the top languages right now, they're almost 30 years old.

00:16:32.500 --> 00:16:33.880
And it's got issues.

00:16:33.880 --> 00:16:37.280
It's got warts and whatnot, but it's a thriving language.

00:16:37.280 --> 00:16:46.400
And, you know, without significant big companies behind it, right, that it's competing with companies that've thrown millions of dollars into development of these things.

00:16:46.400 --> 00:16:47.400
Yeah, absolutely.

00:16:47.400 --> 00:16:50.780
Absolutely. And Matt and Ines, you two are on the data science side.

00:16:50.780 --> 00:16:57.440
And I think the data science and computational folks are the ones that poured the gas on the fire and really made it take off.

00:16:57.440 --> 00:17:01.360
And that's not where the growth necessarily completely is, but I think that gave it a serious kick.

00:17:01.360 --> 00:17:08.080
Yeah. No, actually, because I get asked about this a lot, like, oh, what do you think made Python the language for machine learning data science?

00:17:08.180 --> 00:17:13.720
And my theory is actually that, A, Python, of course, was lucky that it was in the right place at the right time.

00:17:13.720 --> 00:17:16.940
But I think actually it won because it's a general purpose language.

00:17:16.940 --> 00:17:21.640
People can come from other fields of Python into machine learning data science, for example.

00:17:21.640 --> 00:17:23.460
Like, what did people do before?

00:17:23.460 --> 00:17:27.720
If you look at kind of, you know, these surveys of what to use Python for before, it's a lot of web stuff.

00:17:27.720 --> 00:17:30.200
You can build kind of anything in Python.

00:17:30.200 --> 00:17:35.200
And I think that's what makes it so appealing and much more appealing than, let's say, like an AI language.

00:17:35.200 --> 00:17:40.120
And that's also, in my opinion, why a lot of these attempts at making an AI language haven't taken off.

00:17:40.120 --> 00:17:41.520
And people are like, no, Python is great.

00:17:41.520 --> 00:17:44.980
It's fast enough. It's usable enough.

00:17:44.980 --> 00:17:49.480
But I think the general purpose is really is what kind of got it over the edge there.

00:17:49.480 --> 00:17:55.060
A lot of people that I'm teaching or training are people who don't want to be programmers.

00:17:55.060 --> 00:17:57.000
They want to use Python as a tool.

00:17:57.000 --> 00:17:58.240
It's like Excel to them.

00:17:58.240 --> 00:17:59.600
They don't want to be programmers.

00:17:59.860 --> 00:18:02.720
And so something that they can pick up and it just sort of works.

00:18:02.720 --> 00:18:06.720
And they can go to Stack Overflow and copy something.

00:18:06.720 --> 00:18:12.120
And as long as they get the indentation right, it sort of works as long as they're using the right version or whatever.

00:18:12.120 --> 00:18:14.260
There's no compiling. There's no linking.

00:18:14.260 --> 00:18:14.980
Yeah.

00:18:14.980 --> 00:18:15.500
Weirdness.

00:18:15.500 --> 00:18:22.540
And then you have things like Google Colab or whatever, where you have an environment, it's all set up, and you can just sort of go, right?

00:18:22.540 --> 00:18:29.280
And so that is really empowering for people who don't want to be programmers, but view Python as a tool.

00:18:29.520 --> 00:18:31.520
A necessary tool that they need to leverage.

00:18:31.520 --> 00:18:37.040
And in addition, there's over a quarter of a million packages on PyPI, right?

00:18:37.160 --> 00:18:40.620
And that's literally standing on the shoulders of giants.

00:18:40.620 --> 00:18:46.620
You can go there and pick out something that you want to do, and you're a pipit and stall away from it.

00:18:46.620 --> 00:18:49.320
And that's super powerful, right?

00:18:49.320 --> 00:18:51.620
You don't have to set up a huge environment.

00:18:52.020 --> 00:18:52.380
Yeah.

00:18:52.380 --> 00:18:52.420
Yeah.

00:18:52.420 --> 00:18:59.300
It just really simplifies life for a lot of these people who don't want to be programmers, but want to leverage these really cool.

00:18:59.660 --> 00:19:04.280
But at the same time, you do have very strong support for C extensions.

00:19:04.280 --> 00:19:12.340
So if you're looking at the top packages people download from PyPI, most of them are written in C, Siphon, whatever.

00:19:12.340 --> 00:19:14.040
That's what makes them so powerful.

00:19:14.220 --> 00:19:18.420
So we have that while also being able to provide pretty good developer experience.

00:19:18.420 --> 00:19:19.720
Yeah, absolutely.

00:19:19.720 --> 00:19:28.540
I think it was Seymour Papper who talked about a good language having, he was talking about logo, but it's even more appropriate for Python, having low floors and high ceiling.

00:19:28.540 --> 00:19:31.560
That's really easy to get in and do simple stuff.

00:19:31.740 --> 00:19:33.900
But when you want to do complex stuff, you're not limited.

00:19:33.900 --> 00:19:43.300
And so just yesterday, I was doing a workshop with people, and someone who had just started with Python, I said, oh, but look what we can do if we sort of extend it several layers.

00:19:43.300 --> 00:19:49.040
And he was amazed how complex you can get and how sophisticated you can get just in a few lines of code.

00:19:49.040 --> 00:19:52.660
It's really a testament to the elegance of the design of the language, I think.

00:19:52.660 --> 00:19:59.280
Andre Lasowski in chat makes a good point that many folks say Python is their second favorite language.

00:20:00.280 --> 00:20:02.460
And there's something to be said for that.

00:20:02.460 --> 00:20:04.600
Derek, sorry, should be there first.

00:20:04.600 --> 00:20:05.840
I'm with you.

00:20:05.840 --> 00:20:06.360
I'm with you.

00:20:06.360 --> 00:20:11.100
Well, to that point, I mean, it's also been said that Python is the second best language for doing things, right?

00:20:11.100 --> 00:20:12.860
So you might have a language that's better.

00:20:12.860 --> 00:20:14.240
Yeah, that's actually his quote.

00:20:14.240 --> 00:20:14.820
I got it.

00:20:14.820 --> 00:20:20.560
Data science, or you might have a language that's better for web apps, or you might have a language that's better for like system admin.

00:20:20.560 --> 00:20:25.220
But there's probably not a language that's going to like get you all three of those, right?

00:20:25.220 --> 00:20:32.840
And Python is sort of that Venn diagram that gets you in the middle and is good enough to do a lot of what you want to do.

00:20:32.840 --> 00:20:33.420
Absolutely.

00:20:33.420 --> 00:20:34.640
Random by choice.

00:20:34.640 --> 00:20:35.840
Chooses Brian Okken.

00:20:35.840 --> 00:20:37.040
Well, hey, cool.

00:20:37.040 --> 00:20:38.200
Let me pull up my notes.

00:20:38.200 --> 00:20:39.040
It was interesting.

00:20:39.040 --> 00:20:40.020
We were talking about Microsoft.

00:20:40.720 --> 00:20:44.080
And I didn't choose this, but I'm going to mention it anyway.

00:20:44.080 --> 00:20:47.320
Tons of projects switched over to GitHub Actions in 2020.

00:20:47.320 --> 00:20:53.800
And I mean, because it just kind of hit the area right like at the end of 2019.

00:20:53.800 --> 00:20:57.300
So I saw a lot of projects migrating to GitHub Actions.

00:20:57.300 --> 00:21:00.640
Anyway, I wanted to talk about packaging, which is sort of related.

00:21:00.640 --> 00:21:02.060
There's a couple things.

00:21:02.060 --> 00:21:03.220
I know I was supposed to pick one.

00:21:03.220 --> 00:21:04.820
And the exciting thing happened today.

00:21:04.820 --> 00:21:07.100
PIP 20.3 was released.

00:21:07.100 --> 00:21:10.960
And the dependency resolver is now the default.

00:21:10.960 --> 00:21:15.080
The dependency resolver is already angry at me for trying to deploy some dependa bot changes.

00:21:15.080 --> 00:21:18.200
I'm excited about this.

00:21:18.200 --> 00:21:19.380
And it's bit me already, too.

00:21:19.380 --> 00:21:23.760
I've had requirements.txt files that have broken dependencies.

00:21:23.760 --> 00:21:27.280
So I have to go look at those and see, well, which, you know, I have to pay attention to it.

00:21:27.280 --> 00:21:32.300
So there's a little bit of pain for some people, but it was such a long struggle.

00:21:32.300 --> 00:21:38.160
And I look back, and the request for a dependency resolver came in 2013.

00:21:38.160 --> 00:21:39.880
So seven years later.

00:21:39.880 --> 00:21:42.400
But something magical happened in 2019.

00:21:42.400 --> 00:21:45.680
And that was some money from Mozilla came through.

00:21:45.680 --> 00:21:48.240
And they threw some of that money at the dependency resolver.

00:21:48.240 --> 00:21:49.160
That was pretty cool.

00:21:49.160 --> 00:21:50.340
Yeah, that's a big deal.

00:21:50.340 --> 00:21:56.080
There's been a couple of these experiences where money was given to Python specifically

00:21:56.080 --> 00:21:58.960
to hire a team to improve something.

00:21:58.960 --> 00:22:01.840
PyPI, the rewrite of pypi.org was one.

00:22:01.840 --> 00:22:02.620
And then this is another.

00:22:02.620 --> 00:22:04.620
Yeah, and they rolled it out in several versions.

00:22:04.620 --> 00:22:07.220
So we had our version early in the year.

00:22:07.220 --> 00:22:11.520
And then around July, we had another version that had a different flag that you could try it out with

00:22:11.520 --> 00:22:14.820
to try to get some of the early adopters to try it out to make sure it's working.

00:22:14.820 --> 00:22:17.420
And then today, it's rolled out for good.

00:22:17.420 --> 00:22:19.040
And I'm pretty excited about it.

00:22:19.040 --> 00:22:21.200
I kind of want to tie this in with the packaging.

00:22:21.560 --> 00:22:30.020
I've seen a lot of progress on and a lot of adoption of the pyproject.toml kind of taking over more packages and more uses.

00:22:30.020 --> 00:22:35.440
So we saw Flit used to have its own any file now only uses pyproject.toml.

00:22:35.440 --> 00:22:42.080
There's been like additions to the metadata definition that hopefully will take hold.

00:22:42.320 --> 00:22:47.280
And even pytest now, you can throw your configuration in a pyproject.toml.

00:22:47.280 --> 00:22:51.860
So and I've seen more and more projects saying, getting pressure from their users to say,

00:22:51.860 --> 00:22:53.620
I don't want another any file.

00:22:53.620 --> 00:22:56.620
I want to put my settings in the pyproject.toml.

00:22:56.620 --> 00:22:57.860
So that's a good thing.

00:22:57.860 --> 00:22:58.700
Yeah, absolutely.

00:22:58.700 --> 00:23:00.160
You know, a couple of things on that.

00:23:00.160 --> 00:23:03.220
You talked about two things when you talked about packaging and you talked about GitHub.

00:23:03.520 --> 00:23:08.580
I mean, the fact that now you can actually do some package work within GitHub itself.

00:23:08.580 --> 00:23:14.340
I built a lot of small little tools, not things that I would want to go on PyPI.

00:23:14.340 --> 00:23:17.020
No, we don't need to clutter that up anymore with my garbage.

00:23:17.020 --> 00:23:21.500
But it's great when I can just say like, hey, here's a link.

00:23:21.500 --> 00:23:28.580
And if you're really, you know, concerned on how to add it, you can just tip install, but point to this GitHub, you know, and that works.

00:23:29.100 --> 00:23:38.300
Yeah, and also the stuff about finding security vulnerabilities automatically and doing PRs for you that GitHub does against like your various package definitions.

00:23:38.300 --> 00:23:39.340
I think that's great as well.

00:23:39.340 --> 00:23:45.780
Hey, has anybody ever put a JavaScript package on the GitHub package.json?

00:23:45.780 --> 00:23:47.740
Probably, but not me.

00:23:47.740 --> 00:23:49.580
I have.

00:23:49.580 --> 00:23:51.700
You know this is a Python podcast, right?

00:23:51.700 --> 00:23:52.380
No worse.

00:23:52.380 --> 00:23:53.600
It's Gatsby.

00:23:53.600 --> 00:23:58.780
So I basically put 500,000 JavaScript packages into my repo.

00:23:58.780 --> 00:23:59.260
Yeah.

00:23:59.260 --> 00:24:07.380
And I'm just saying that there's something I appreciate about Python a lot that like I actually, I never thought I'd say this, but like I do prefer also that you don't.

00:24:07.380 --> 00:24:12.680
I can't resolve the depend about security mega warnings fast enough.

00:24:12.680 --> 00:24:14.420
It's just incredible.

00:24:14.420 --> 00:24:15.140
I know.

00:24:15.140 --> 00:24:16.760
And I just turn them off, right?

00:24:16.760 --> 00:24:17.880
Like you just don't.

00:24:17.880 --> 00:24:18.300
Yeah.

00:24:18.300 --> 00:24:19.960
That totally fixes it.

00:24:19.960 --> 00:24:20.280
You're right.

00:24:20.280 --> 00:24:22.420
That is one way to do it.

00:24:22.420 --> 00:24:22.780
Yes.

00:24:22.780 --> 00:24:26.260
It's like, I've always said that's a problem with writing tests, right?

00:24:26.260 --> 00:24:31.940
Like when I started programming, I was all like, kind of hate writing these tests because they keep pointing out shit that's kind of wrong.

00:24:31.940 --> 00:24:32.900
And then I have to fix that.

00:24:32.900 --> 00:24:34.000
But I don't have tests.

00:24:34.000 --> 00:24:35.200
It all works fine.

00:24:35.200 --> 00:24:35.840
And then I'm happy.

00:24:35.840 --> 00:24:37.340
Same with, I don't know, TypeScript.

00:24:37.340 --> 00:24:37.820
Exactly.

00:24:37.820 --> 00:24:39.080
I actually even type hints to some.

00:24:39.080 --> 00:24:40.480
Fuck.

00:24:40.480 --> 00:24:41.980
Yeah, I know that's kind of wrong.

00:24:41.980 --> 00:24:43.480
So now I actually have to fix it.

00:24:43.480 --> 00:24:45.040
So, you know, just don't.

00:24:45.040 --> 00:24:47.280
So we should not let you speak at a high school.

00:24:47.280 --> 00:24:49.960
It's the see no evil, hear no evil.

00:24:49.960 --> 00:24:55.460
I do think that the Dependabot stuff, there's something about turning it off.

00:24:55.460 --> 00:24:56.320
It drives me crazy.

00:24:56.320 --> 00:24:57.340
I really value it.

00:24:57.340 --> 00:25:10.160
But at the same time, the reason I had this conflict with the dependency resolver is it told me I should give me a PR to upgrade one thing, but not one of the dependencies for which the newer version was required or would break the resolver.

00:25:10.160 --> 00:25:11.940
It's just like, ah, what is this thing doing?

00:25:11.940 --> 00:25:12.900
All right.

00:25:12.900 --> 00:25:13.420
Very good.

00:25:13.420 --> 00:25:14.020
Very good, Brian.

00:25:14.240 --> 00:25:18.280
Sorry, you need a batch dependency resolver.

00:25:18.280 --> 00:25:18.880
Yes.

00:25:18.880 --> 00:25:23.220
One that resolves everything at once and then makes sure you've got a working state at the end.

00:25:23.220 --> 00:25:25.580
Well, the thing is, the PIMP is fine.

00:25:25.580 --> 00:25:26.600
It was right.

00:25:26.600 --> 00:25:34.440
It's that Dependabot, if you have 100, I probably had 20 dependencies in this thing, it gives you one PR for each line.

00:25:34.440 --> 00:25:36.880
Sometimes it's like lags a day on the other one.

00:25:36.880 --> 00:25:41.100
And if it gets it out of order, then the resolver, anyway, long story, frustrating.

00:25:41.520 --> 00:25:47.220
I mean, to be fair, speaking of dependency resolving from the perspective of a library developer, it is hard.

00:25:47.220 --> 00:25:49.700
And it's, you know, you do want to use versioning properly.

00:25:49.700 --> 00:26:01.880
And I do feel like there's this eternal conflict between how do we manage dependencies properly for users and how can we make sure that we can define how our packages depend on each other in a way that's reasonable.

00:26:02.300 --> 00:26:06.300
Because not, you know, use semantic versioning, not everything is a major release.

00:26:06.300 --> 00:26:07.760
Not everything is a breaking release.

00:26:07.760 --> 00:26:09.600
But stuff just depends on each other.

00:26:09.600 --> 00:26:10.700
And you don't want to lock people in.

00:26:10.700 --> 00:26:17.680
There's always this, you know, the idea is you should be able to pick up your project a year later with its requirements and it should run.

00:26:17.680 --> 00:26:19.700
And that's really, really, really hard.

00:26:19.700 --> 00:26:20.360
Yeah.

00:26:20.380 --> 00:26:23.700
And if it gets wrong, then you probably get a lot of email or a lot of GitHub issues.

00:26:23.700 --> 00:26:29.200
Hey, Brian, on your topic of PyProject Toml, what's the latest, greatest on editable installs?

00:26:29.200 --> 00:26:32.820
I don't think it's completely working for all the same.

00:26:32.820 --> 00:26:35.800
So I'd like to be able to say pip install dash E.

00:26:35.800 --> 00:26:36.480
Is it dash E?

00:26:36.480 --> 00:26:37.960
And just a project.

00:26:38.160 --> 00:26:44.660
You can say pip install just a directory no matter what kind of packager it has.

00:26:44.660 --> 00:26:45.600
So that works now.

00:26:45.600 --> 00:26:49.400
So you can, even if you use flit or something, you can't do dash E.

00:26:49.400 --> 00:26:53.940
But flit itself, for instance, has its own editable install thing.

00:26:53.940 --> 00:26:55.860
And I don't know what poetry does.

00:26:55.860 --> 00:26:56.660
I don't use poetry.

00:26:56.660 --> 00:26:58.200
So it's a different command.

00:26:58.200 --> 00:27:00.480
I'm annoyed that it doesn't just convert it.

00:27:00.480 --> 00:27:01.720
I wish it would plug it in.

00:27:01.720 --> 00:27:06.660
But I think that'll be coming maybe in 2020 or probably not this year.

00:27:06.660 --> 00:27:07.820
Maybe next year.

00:27:07.820 --> 00:27:08.280
Hopefully.

00:27:08.280 --> 00:27:08.780
Yeah.

00:27:08.780 --> 00:27:14.180
Badwolf says in the chats, what is the quick solution for getting pip version updated?

00:27:14.180 --> 00:27:15.720
The first thing you created, a virtual environment.

00:27:15.720 --> 00:27:17.500
This is another thing that drives me crazy about pip.

00:27:17.500 --> 00:27:19.880
And if that could get changed, I would love it.

00:27:19.880 --> 00:27:24.440
When you create a new virtual environment, basically for about a week, you have the latest pip.

00:27:24.440 --> 00:27:29.260
And then afterwards, soon as you pip install something, it says, warning, your pip is out of date.

00:27:29.260 --> 00:27:31.540
As soon as you create a virtual environment, it's like, well, why didn't you just

00:27:31.540 --> 00:27:31.960
update it?

00:27:31.960 --> 00:27:34.340
I want, if you're going to tell me it's wrong, just fix it.

00:27:34.340 --> 00:27:35.560
You can use virtual environment.

00:27:35.560 --> 00:27:40.160
Instead of venv, use virtual environment because then you can update your pip and you can update

00:27:40.160 --> 00:27:42.980
the global one and install it in all your environments.

00:27:42.980 --> 00:27:43.620
Interesting.

00:27:43.620 --> 00:27:44.340
Yeah.

00:27:44.340 --> 00:27:48.560
I just wrote an alias that will create the virtual environment, upgrade pip and set up

00:27:48.560 --> 00:27:49.660
tools, and then activate it.

00:27:49.660 --> 00:27:50.220
Other way around.

00:27:50.220 --> 00:27:51.160
Activate it, then upgrade.

00:27:51.160 --> 00:27:51.820
Yeah.

00:27:51.820 --> 00:27:52.340
Yeah.

00:27:52.340 --> 00:27:52.560
It's funny.

00:27:52.560 --> 00:27:54.320
I have a shortcut like that too.

00:27:54.320 --> 00:27:54.800
Yeah.

00:27:54.800 --> 00:27:55.100
Awesome.

00:27:55.100 --> 00:27:59.560
And then you can also have it install everything you need, you know, in the same command, automatically

00:27:59.560 --> 00:28:00.680
create one switch.

00:28:01.080 --> 00:28:02.200
I shared my script somewhere.

00:28:02.200 --> 00:28:04.080
I think on Twitter, if anyone's interested.

00:28:04.080 --> 00:28:04.620
Nice.

00:28:04.620 --> 00:28:04.800
Yeah.

00:28:04.800 --> 00:28:05.680
Mine's just V and V.

00:28:05.680 --> 00:28:07.400
I just type V and V and magic happens.

00:28:07.400 --> 00:28:08.520
I don't think of it anymore.

00:28:08.520 --> 00:28:13.500
Well, when I finally switched to virtual and it's like, I make so many virtual environments.

00:28:13.500 --> 00:28:14.580
It's so much faster.

00:28:15.000 --> 00:28:19.860
And just that even just a few seconds, several times a day, it's worth it for me.

00:28:19.860 --> 00:28:20.460
Yeah.

00:28:20.460 --> 00:28:20.580
Yeah.

00:28:20.580 --> 00:28:21.720
Awesome.

00:28:21.720 --> 00:28:22.180
All right.

00:28:22.180 --> 00:28:25.300
I've chosen next and there's a dependency in the chooser.

00:28:25.300 --> 00:28:27.020
So it's works correctly.

00:28:27.020 --> 00:28:29.100
So it's chosen me actually to talk about the next thing.

00:28:29.740 --> 00:28:32.840
And Paul touched on this, but I think this is a really important one.

00:28:32.840 --> 00:28:37.520
Like this is the year that Python 2 actually went away.

00:28:37.840 --> 00:28:44.460
And it's, I just, it's been so long having to justify why Python 3 is the right thing or

00:28:44.460 --> 00:28:47.920
more often teaching people, no, no, no, you can't type Python.

00:28:47.920 --> 00:28:48.920
Please don't do that.

00:28:48.920 --> 00:28:50.420
Unless you're on Windows and you have to do that.

00:28:50.460 --> 00:28:52.360
But if you're not on Windows, then you better not do that.

00:28:52.360 --> 00:28:54.660
So you got to, you know, it's just like this drag.

00:28:54.660 --> 00:28:59.560
It always felt like things like Django or Flask and whatnot were being held back.

00:28:59.560 --> 00:29:03.240
All these libraries were being held back by Python 2 support.

00:29:03.240 --> 00:29:05.220
And last year they started dropping it.

00:29:05.220 --> 00:29:07.460
And then Python 2 itself actually went away.

00:29:07.460 --> 00:29:11.580
Brian and I tried to create the right nomenclature around this, I guess.

00:29:11.580 --> 00:29:15.660
I was calling it legacy Python and modern Python rather than 2 and 3.

00:29:15.660 --> 00:29:16.680
And that was, that was fun.

00:29:16.680 --> 00:29:19.460
People started to quote it and use that terminology, which was kind of cool.

00:29:19.460 --> 00:29:24.880
I don't know how well it worked, but it's really nice that Python 2 is finally officially gone.

00:29:24.880 --> 00:29:29.600
And I thought there'd be a bunch of people would freak out for Python and start creating

00:29:29.600 --> 00:29:31.220
like alternate old versions.

00:29:31.220 --> 00:29:35.300
And I haven't, besides some like support, commercial support stuff, I've really seen that happening.

00:29:35.300 --> 00:29:37.500
So it's, it's pretty interesting, I think.

00:29:37.500 --> 00:29:42.400
Yeah, I think we should have brought like horns and stuff and like, you know, waving.

00:29:42.400 --> 00:29:47.520
Some of those little pop, like bottle looking stuff on New Year's.

00:29:47.520 --> 00:29:47.860
Absolutely.

00:29:47.860 --> 00:29:51.000
Yeah, I mean, we really didn't get the party we were hoping for, right?

00:29:51.000 --> 00:29:54.660
Like PyCon was supposed to be this big send off for Python 2.

00:29:54.660 --> 00:29:57.080
But no, there was not so much of a PyCon.

00:29:57.080 --> 00:29:57.840
Not really.

00:29:57.840 --> 00:29:59.280
I mean, there's online, but it wasn't the same.

00:29:59.280 --> 00:30:04.140
Now we just got to wait until we have all of the articles about the companies that finally

00:30:04.140 --> 00:30:10.020
decided to switch and the steps that they took that they avoided for the last decade to,

00:30:10.020 --> 00:30:11.540
to make this a reality.

00:30:11.880 --> 00:30:16.180
Yeah, I mean, one of my biggest corporate training clients, they have been using Python

00:30:16.180 --> 00:30:17.280
2 for years and years.

00:30:17.280 --> 00:30:21.720
And they do all sorts of testing of hardware using Windows.

00:30:22.100 --> 00:30:24.320
And so with all sorts of custom C extensions.

00:30:24.320 --> 00:30:28.260
So I've been saying to them for years, every time I do training, look, you should really

00:30:28.260 --> 00:30:29.180
think about Python 3.

00:30:29.180 --> 00:30:30.840
And you should realize you should move in that direction.

00:30:30.840 --> 00:30:33.140
And their attitude was basically, no, no, no.

00:30:33.140 --> 00:30:35.780
We've got so much invested in what we've done.

00:30:35.780 --> 00:30:36.900
We're not really going to upgrade.

00:30:36.900 --> 00:30:41.860
And finally, about, I guess, a year ago, they realized, huh, we're going to be stuck on our

00:30:41.860 --> 00:30:45.440
own maintaining everything, including all these packages of IPI.

00:30:45.860 --> 00:30:47.780
Maybe it's time to start talking about it.

00:30:47.780 --> 00:30:50.100
And so I'm actually doing some training for them now.

00:30:50.100 --> 00:30:53.920
And I asked a group, should we do Python 2 or should we do Python 3?

00:30:53.920 --> 00:30:57.520
And the majority actually said it's OK to use 3 because our group has switched.

00:30:57.520 --> 00:31:03.580
So if they are moving, it's clear that even sort of the draggiest of the draggiest companies

00:31:03.580 --> 00:31:04.500
are doing it.

00:31:04.500 --> 00:31:09.200
Yeah, I was just going to echo what Ruben said that, you know, when you have success and you

00:31:09.200 --> 00:31:14.180
get enterprises using your stuff and enterprises are slow to move.

00:31:14.180 --> 00:31:18.980
And I don't want to, like, criticize Python 3 too much, but I think if they would have put

00:31:18.980 --> 00:31:21.680
f-strings in 3.0, then they wouldn't have had this problem.

00:31:21.680 --> 00:31:25.600
But because they waited to put f-strings in, then they had people dragging their feet.

00:31:25.600 --> 00:31:26.620
So weird how that dragged.

00:31:26.620 --> 00:31:28.980
That was one of the most popular features, for sure.

00:31:28.980 --> 00:31:32.460
So you're saying the walrus operator was what finally did it?

00:31:32.460 --> 00:31:36.420
I'm not going to go there.

00:31:36.420 --> 00:31:38.900
You know, I was not super excited about the walrus operator.

00:31:38.900 --> 00:31:40.260
I find myself using it all the time.

00:31:40.260 --> 00:31:40.800
I like it.

00:31:40.800 --> 00:31:41.460
It's neat.

00:31:41.460 --> 00:31:42.300
Oh, it's cool.

00:31:42.300 --> 00:31:43.580
I think it definitely solves a problem.

00:31:43.580 --> 00:31:45.180
I just, wait, that's 3.8, right?

00:31:45.180 --> 00:31:45.900
The walrus?

00:31:45.900 --> 00:31:46.900
I believe so.

00:31:46.900 --> 00:31:47.600
Yeah.

00:31:47.600 --> 00:31:48.140
Yeah.

00:31:48.140 --> 00:31:51.800
I'm still, I mean, I feel like I'm now back at like, okay, we finally dropped support for

00:31:51.800 --> 00:31:53.540
two from all of our libraries that we're developing.

00:31:53.540 --> 00:31:55.240
And now we're on 3.6.

00:31:55.240 --> 00:31:56.680
Because, you know.

00:31:56.680 --> 00:31:58.660
3.9 is current.

00:31:58.660 --> 00:32:00.920
3.8 is now the new legacy Python.

00:32:00.920 --> 00:32:05.000
Ines, how was it for you?

00:32:05.000 --> 00:32:06.660
Like, as a library developer?

00:32:07.100 --> 00:32:07.420
Yeah.

00:32:07.420 --> 00:32:07.440
Yeah.

00:32:07.440 --> 00:32:11.540
I mean, I feel like I only really got to use Python 3 this year.

00:32:11.540 --> 00:32:14.280
I mean, of course, I've been using it privately for much longer.

00:32:14.280 --> 00:32:17.580
But I would say, in mid this year, I was finally like, cool.

00:32:17.580 --> 00:32:18.960
I just use type hints.

00:32:18.960 --> 00:32:20.800
I use f-strings across all of our projects.

00:32:20.800 --> 00:32:23.680
Because before, our dependencies had to support people on it too.

00:32:23.680 --> 00:32:26.420
And our old version of spaCy had to support people who wanted to use it too.

00:32:26.700 --> 00:32:28.640
So that kind of becomes the baseline.

00:32:28.640 --> 00:32:30.700
And now we've moved that up to 3.6.

00:32:30.700 --> 00:32:36.160
And so until 3.6 is dead, there's still always new features that, you know, we can't just,

00:32:36.160 --> 00:32:36.780
you know, ship.

00:32:36.780 --> 00:32:37.220
Yeah.

00:32:37.220 --> 00:32:43.120
But that step from 2 to 3.6 is going to be way bigger than 3.6 to 7, right?

00:32:43.120 --> 00:32:46.800
That's a very small step, the 3.6 to 3.7 or 3.7 to 3.8.

00:32:46.800 --> 00:32:48.180
So you've done the big step.

00:32:48.180 --> 00:32:49.240
Yeah.

00:32:49.240 --> 00:32:51.820
And some of the new features, it's like, yeah, whatever.

00:32:51.820 --> 00:32:54.400
I can, you know, live without writing those in my code base.

00:32:54.400 --> 00:32:56.180
And people can still use them in their code bases.

00:32:56.540 --> 00:32:56.940
Yeah.

00:32:56.940 --> 00:33:00.520
All the new versions we're going to publish, like spaCy 3, that's coming soon.

00:33:00.520 --> 00:33:03.600
We'll use Python 3 in the code base.

00:33:03.600 --> 00:33:05.180
And we'll only work with Python 3.

00:33:05.180 --> 00:33:09.820
We won't distribute wheels for Python 2, which we might have not even done for a while.

00:33:09.820 --> 00:33:14.440
Because it's really, really a pain for some of our more abstract and complex dependencies

00:33:14.440 --> 00:33:15.400
that we're also building.

00:33:15.400 --> 00:33:16.060
Yeah, cool.

00:33:16.060 --> 00:33:17.180
So far, people haven't really complained.

00:33:17.180 --> 00:33:20.000
Like, I was expecting people to complain a bit more, but like, no.

00:33:20.000 --> 00:33:25.540
Well, if you look at the PSF JetBrains survey, the data science folks, that side of the

00:33:25.540 --> 00:33:29.660
house have definitely moved to Python 3 quicker and bigger than the web team.

00:33:29.660 --> 00:33:31.940
I'm actually surprised how quickly people move up.

00:33:31.940 --> 00:33:35.740
Like, you know, I don't know, even after 3.9 came out, we've had people requesting like,

00:33:35.740 --> 00:33:39.760
oh my God, why does your, you know, annotation tool not work on, you know, 3.9?

00:33:39.760 --> 00:33:40.780
Or why does this not work?

00:33:40.920 --> 00:33:42.980
And it's like, nothing works on 3.9.

00:33:42.980 --> 00:33:45.840
I was like, LCI doesn't do 3.9 yet.

00:33:45.840 --> 00:33:47.220
Like, I can't build anything.

00:33:47.220 --> 00:33:49.600
None of our other packages run.

00:33:49.600 --> 00:33:50.280
Like, sorry.

00:33:50.280 --> 00:33:56.660
I felt like a big person developer for like the first time ever when I actually got my first

00:33:56.660 --> 00:33:59.220
issue with running the latest and greatest Python.

00:33:59.220 --> 00:34:02.920
It was because I was running GCP and I kept running into an error, running into an error.

00:34:02.920 --> 00:34:03.780
And I was like, you know what?

00:34:04.120 --> 00:34:05.200
It used to work.

00:34:05.200 --> 00:34:06.980
Let me just try it on 385.

00:34:06.980 --> 00:34:08.260
And then sure enough, it worked perfectly.

00:34:08.260 --> 00:34:09.800
And I was like, I've done it.

00:34:09.800 --> 00:34:11.200
I've reached the new achievement.

00:34:11.200 --> 00:34:13.020
Nice.

00:34:13.020 --> 00:34:13.240
Yeah.

00:34:13.240 --> 00:34:17.500
I've taken down the Talk Python training website by shipping the walrus operator accidentally.

00:34:17.500 --> 00:34:20.060
At the time, Ubuntu didn't support it.

00:34:20.060 --> 00:34:26.080
A quick question or a comment from Zach in the comments about when, you know, we can actually

00:34:26.080 --> 00:34:28.700
say legacy Python's gone when the OS vendor stopped supporting it.

00:34:28.700 --> 00:34:33.940
I think Python 2 is no longer shipping with the new macOS and Canonical is starting to

00:34:33.940 --> 00:34:35.740
make Python 3.8 the default.

00:34:35.740 --> 00:34:37.140
So I think we're getting there.

00:34:37.140 --> 00:34:43.700
I thought they were removing Python in general from macOS and just making you install it yourself.

00:34:43.700 --> 00:34:46.260
I think there might be some internal system thing.

00:34:46.260 --> 00:34:50.640
I saw people talking about the system Python 3.8, even though I agree I heard the same thing

00:34:50.640 --> 00:34:52.500
you said, but I don't have a fresh install.

00:34:52.500 --> 00:34:54.580
It's not actually such a bad idea.

00:34:54.580 --> 00:34:58.360
Like, I think, you know, for most things you do, you have to install some extra stuff anyway.

00:34:58.620 --> 00:35:03.480
So making it a more explicit install from a user's perspective, I think, isn't even so

00:35:03.480 --> 00:35:03.800
terrible.

00:35:03.800 --> 00:35:04.340
Yeah.

00:35:04.340 --> 00:35:08.000
Because otherwise, you know, if you just type in Python, you just run into all kinds of

00:35:08.000 --> 00:35:09.280
potential issues anyway.

00:35:09.280 --> 00:35:10.600
So, yeah.

00:35:10.600 --> 00:35:12.080
Especially when it's super out of date.

00:35:12.080 --> 00:35:12.380
All right.

00:35:12.380 --> 00:35:12.580
Yeah.

00:35:12.580 --> 00:35:16.300
I definitely end up like telling people in my courses, oh, you're using a Mac?

00:35:16.300 --> 00:35:16.760
Yeah.

00:35:16.760 --> 00:35:18.240
Ignore the Python that's installed.

00:35:18.240 --> 00:35:19.720
I know this is a Python course.

00:35:19.720 --> 00:35:21.080
Ignore the ones that's installed.

00:35:21.080 --> 00:35:23.240
And here are ways that you can install it on your own.

00:35:23.240 --> 00:35:24.420
So it'll be up to date.

00:35:24.420 --> 00:35:27.380
And here's how you can make sure it doesn't conflict with what's already installed.

00:35:27.700 --> 00:35:30.720
So maybe removing it all together is not such a terrible thing.

00:35:30.720 --> 00:35:31.660
Yeah, for sure.

00:35:31.660 --> 00:35:32.340
Homebrew.

00:35:32.340 --> 00:35:32.780
Homebrew.

00:35:32.780 --> 00:35:33.580
All right.

00:35:33.580 --> 00:35:36.000
Ines, the voting system has chosen you next.

00:35:36.000 --> 00:35:37.620
Unmute myself and look at my notes.

00:35:37.620 --> 00:35:37.940
Yeah.

00:35:37.940 --> 00:35:43.580
So I think I've already mentioned the topic I was going to talk about about five times so

00:35:43.580 --> 00:35:43.920
far.

00:35:43.920 --> 00:35:51.160
But yeah, I think in 2020, we really saw the ecosystem around type hints, static type checking,

00:35:51.160 --> 00:35:54.360
types in general mature and like really be widely adopted.

00:35:54.360 --> 00:36:00.380
And I do think a part of that is the more widespread adoption of Python 3 because before that, to be

00:36:00.380 --> 00:36:04.140
fair, you could use type hints before Python 3 just for completeness.

00:36:04.280 --> 00:36:06.020
But like, that's not what people did.

00:36:06.020 --> 00:36:07.140
And it looked very, very different.

00:36:07.140 --> 00:36:12.140
So yeah, now and actually, even I couldn't really imagine writing code without type hints

00:36:12.140 --> 00:36:12.460
anymore.

00:36:12.460 --> 00:36:17.300
Like if I write something and I'm not adding any types, it feels kind of naked and it feels

00:36:17.300 --> 00:36:17.880
kind of wrong.

00:36:17.880 --> 00:36:21.940
And I actually feel like, oh, my God, I might be missing some issues here.

00:36:21.940 --> 00:36:23.200
Maybe I'm not catching some bugs.

00:36:23.200 --> 00:36:24.920
So yeah, which is quite surprising.

00:36:24.920 --> 00:36:30.460
But it says something considering I only just recently was able to really embrace all the

00:36:30.460 --> 00:36:31.200
new Python 3 stuff.

00:36:31.200 --> 00:36:32.700
Yeah, that's a pretty quick transition.

00:36:32.700 --> 00:36:33.620
Find it.

00:36:33.620 --> 00:36:33.840
Yeah.

00:36:33.840 --> 00:36:37.780
I depend on this thing now that like previously you had to stay away from.

00:36:37.780 --> 00:36:38.300
Yeah.

00:36:38.300 --> 00:36:45.000
And I have static type checking enabled in Visual Studio Code, you know, underlines things if

00:36:45.000 --> 00:36:49.120
you pass in the wrong types, it gives you all these nice like autocomplete prompts or

00:36:49.120 --> 00:36:50.420
previews if you want to.

00:36:50.420 --> 00:36:53.800
That's also something I've gotten really, really used to over a really short period of

00:36:53.800 --> 00:36:54.020
time.

00:36:54.020 --> 00:36:54.680
Like, I don't know.

00:36:54.680 --> 00:36:56.320
What about you, everyone?

00:36:56.320 --> 00:36:57.520
Like, do you use type hints?

00:36:57.520 --> 00:36:59.340
Like, can we have like an opinion, Paul?

00:36:59.340 --> 00:37:02.100
Like, just raise the hand and then we summarize it for people who just...

00:37:02.100 --> 00:37:03.060
End of hand raise.

00:37:03.060 --> 00:37:03.860
Everybody.

00:37:03.860 --> 00:37:11.300
I'm slowly starting to use them more and more as I see the advantages.

00:37:11.300 --> 00:37:15.340
And in part, as I mentioned before we started recording, like, because my students are encouraging

00:37:15.340 --> 00:37:18.520
me to use it more and more because they want it because they come from languages where

00:37:18.520 --> 00:37:20.140
there's no such thing as optional type hints.

00:37:20.140 --> 00:37:22.580
It's, you must do this or the program does not run.

00:37:22.580 --> 00:37:24.020
So what do you know?

00:37:24.020 --> 00:37:24.940
They can actually be useful.

00:37:24.940 --> 00:37:25.340
Yeah.

00:37:25.340 --> 00:37:29.700
I think that's one of the biggest benefits that I like about the type hinting system is

00:37:29.700 --> 00:37:30.520
that it's optional.

00:37:30.520 --> 00:37:32.040
So you could choose to use it.

00:37:32.040 --> 00:37:34.560
And then if you don't need it, then we could just take it out.

00:37:34.560 --> 00:37:37.520
Because for me, like, I believe in lazy, being a lazy developer.

00:37:37.520 --> 00:37:42.200
And stuff like type hints just make certain things a little bit more discoverable.

00:37:42.200 --> 00:37:42.600
Right.

00:37:42.600 --> 00:37:47.320
And kind of like what we were saying before, like, it just improves your tooling to be able

00:37:47.320 --> 00:37:49.420
to discover more of your code for you.

00:37:49.420 --> 00:37:50.480
I like to use it.

00:37:50.480 --> 00:37:55.400
I like to use it for APIs or especially for package interfaces so that people using a package

00:37:55.400 --> 00:38:00.160
can use the editor tools and stuff like that for the hints.

00:38:00.760 --> 00:38:02.700
And also just wherever it makes sense.

00:38:02.700 --> 00:38:08.240
I mean, if it looks like it actually distracts from readability, then I take it out.

00:38:08.240 --> 00:38:09.720
Readability is above all for me.

00:38:09.720 --> 00:38:12.200
So if it's usable and readable, it helps.

00:38:12.200 --> 00:38:13.960
I mean, I wouldn't advocate.

00:38:13.960 --> 00:38:14.720
Oh, sorry.

00:38:14.720 --> 00:38:15.900
Any, like, I don't know.

00:38:15.900 --> 00:38:20.660
If you have a function that takes several arguments and then returns like a callback, that gives you

00:38:20.660 --> 00:38:21.560
this kind of type hint.

00:38:21.620 --> 00:38:22.900
I wouldn't advocate for that necessarily.

00:38:22.900 --> 00:38:23.860
But yeah.

00:38:23.860 --> 00:38:27.520
And I feel like they're working on some of that confusion as well.

00:38:27.520 --> 00:38:29.060
And some of that, like, clutter and blood.

00:38:29.060 --> 00:38:32.000
I mean, that was, I talk about that 3.9 story.

00:38:32.000 --> 00:38:36.760
It was because I was tired of typing, typing dot list or typing dot dict.

00:38:36.760 --> 00:38:38.860
And it was like, oh, you mean I can just do this now?

00:38:38.860 --> 00:38:41.680
Like, and then sure enough, you know, stuff crashes.

00:38:41.680 --> 00:38:42.920
And it's like, well, guess not.

00:38:42.920 --> 00:38:43.460
Maybe later.

00:38:43.460 --> 00:38:51.840
But it's great that for people who are looking at Python as a tool that they're using, not

00:38:51.840 --> 00:38:56.180
the language that they're writing on a day to day, but just flat out the tool that they're

00:38:56.180 --> 00:39:01.700
using, they don't know what we're talking about half the time, but they can kind of look at

00:39:01.700 --> 00:39:04.080
something and go, STR, hmm.

00:39:04.080 --> 00:39:06.300
Someone mentioned a string that one time.

00:39:06.300 --> 00:39:07.460
Maybe that's what that is.

00:39:07.460 --> 00:39:11.480
You know, it's a lot easier than just looking at the code and trying to figure it out.

00:39:11.480 --> 00:39:15.980
Yeah, and speaking of tools, I think type-ins, they're not only that syntax feature.

00:39:15.980 --> 00:39:23.040
They've really enabled this whole new ecosystem of tools that use type-ins to accomplish something

00:39:23.040 --> 00:39:24.240
else or in a creative way.

00:39:24.240 --> 00:39:27.140
And I think many of them have been covered on this podcast previously.

00:39:27.140 --> 00:39:31.980
For example, there's Pydantic, which uses type-ins in actually one of my favorite creative ways

00:39:31.980 --> 00:39:33.600
for data validation, settings management.

00:39:33.600 --> 00:39:37.900
It's actually a library we've adopted across a lot of our projects to just quickly, you know,

00:39:37.900 --> 00:39:38.980
you define this interface.

00:39:38.980 --> 00:39:39.920
Here's what I expect.

00:39:39.920 --> 00:39:43.320
You get like, you know, kind of like JSON schema just with type-ins.

00:39:43.320 --> 00:39:44.620
Pydantic is so wonderful.

00:39:44.620 --> 00:39:45.680
Yeah, you're right.

00:39:45.680 --> 00:39:46.560
It's really nice.

00:39:46.560 --> 00:39:47.320
It's really nice.

00:39:47.320 --> 00:39:51.680
Yeah, I would say it's one of my favorite recent discoveries in terms of Python developer

00:39:51.680 --> 00:39:52.020
tools.

00:39:52.020 --> 00:39:57.020
And then, of course, there's FastAPI and Typer developed by my colleague, Sebastian, which

00:39:57.020 --> 00:40:00.340
probably has been discussed a lot on this and related podcast.

00:40:00.340 --> 00:40:03.320
Yeah, he was on the show not long ago, like 10 shows ago or so.

00:40:03.320 --> 00:40:05.440
And yeah, that's a fantastic framework too.

00:40:05.820 --> 00:40:12.440
Yeah, so that's, I think it's also partly what really popular, popularized, great word,

00:40:12.440 --> 00:40:20.500
type-ins in as a, I don't know, as a tool for, yeah, developing applications and so on,

00:40:20.500 --> 00:40:20.840
I think.

00:40:20.840 --> 00:40:21.960
Also actually Pydantic.

00:40:21.960 --> 00:40:27.460
And yeah, we've also in 2020, I think, released our machine learning library, Think, which kind

00:40:27.460 --> 00:40:33.860
of functions more like an interface layer and lets you write neural networks, combine layers

00:40:33.860 --> 00:40:35.660
written in different frameworks like PyTorch.

00:40:35.660 --> 00:40:36.180
TensorFlow.

00:40:36.180 --> 00:40:40.860
And we've included custom types for arrays and all that stuff that passes through the

00:40:40.860 --> 00:40:41.160
network.

00:40:41.160 --> 00:40:44.960
Because, you know, if you're doing machine learning, a lot of it is like really abstract.

00:40:44.960 --> 00:40:49.220
You have like this multidimensional array as in like 300 dimensions.

00:40:49.220 --> 00:40:51.480
And then that goes through and then it gets transformed.

00:40:51.480 --> 00:40:52.800
And then it goes all the way back.

00:40:52.800 --> 00:40:54.860
And at the end, you're hoping to get something out.

00:40:54.860 --> 00:40:56.020
And there's a lot that can go wrong.

00:40:56.020 --> 00:40:59.100
And it's not even about like, oh, how experienced are you as a programmer?

00:40:59.100 --> 00:41:01.140
It's like, that shit's just abstract.

00:41:01.460 --> 00:41:01.660
Yeah.

00:41:01.660 --> 00:41:06.440
We can make it a bit less abstract, even by just providing custom types that you can

00:41:06.440 --> 00:41:07.120
declare.

00:41:07.120 --> 00:41:10.780
So it's easier to see what goes in, what comes out.

00:41:10.780 --> 00:41:12.760
Do these layers fit together?

00:41:12.760 --> 00:41:13.460
Do they not?

00:41:13.460 --> 00:41:18.160
Because otherwise, yeah, you easily end up with these very hard to debug NumPy errors

00:41:18.160 --> 00:41:23.220
triggered by like five layers deep that tell you that you can't broadcast that shape into

00:41:23.220 --> 00:41:23.880
this other shape.

00:41:23.880 --> 00:41:25.780
And you're like, yeah, that's going to be fun.

00:41:25.780 --> 00:41:26.760
This doesn't help me.

00:41:26.800 --> 00:41:27.280
I have no idea.

00:41:27.280 --> 00:41:28.040
Yeah.

00:41:28.040 --> 00:41:33.280
I think there's also things like mypyC, which will compile stuff that has types.

00:41:33.280 --> 00:41:37.580
And there's Cython, which will use the new Python type hints to compile to much faster

00:41:37.580 --> 00:41:37.820
code.

00:41:37.820 --> 00:41:39.500
So there's a lot of neat things coming out of it.

00:41:39.500 --> 00:41:39.920
Yeah.

00:41:39.920 --> 00:41:43.440
And I think especially also for abstract stuff like machine learning, there are lots of use

00:41:43.440 --> 00:41:48.400
cases that web type hints and type-based validation is really promising because we can also take

00:41:48.400 --> 00:41:52.740
something a developer already knows, like typing your functions, typing your layers, and it will

00:41:52.740 --> 00:41:55.440
just work and do some extra stuff if you wanted to.

00:41:55.720 --> 00:41:58.180
Watching mypy evolve is really cool.

00:41:58.180 --> 00:42:04.260
And for Think, we've briefly dabbled in custom mypy plugins for a bit.

00:42:04.260 --> 00:42:10.220
We have a plugin that checks if two layers you're chaining together return the correct types.

00:42:10.220 --> 00:42:13.880
Like if you have one layer that returns a two-dimensional array of floats and the other

00:42:13.880 --> 00:42:19.160
layer expects a two-dimensional array of integers or four dimensions, whatever, you can

00:42:19.160 --> 00:42:23.620
actually see that underlined in your editor done by mypy as you type the code.

00:42:23.620 --> 00:42:29.180
So you can prevent a bug before you even make it, like type it and introduce it.

00:42:29.180 --> 00:42:30.040
So that's cool.

00:42:30.040 --> 00:42:32.360
And I think that's all very actively developing.

00:42:32.360 --> 00:42:35.180
So I think there's so much potential for custom plugins.

00:42:35.180 --> 00:42:40.380
Like imagine more libraries just coming with their own mypy plugins that help the developers

00:42:40.380 --> 00:42:41.600
use those libraries better.

00:42:41.600 --> 00:42:43.420
I think, yeah, that's all super cool.

00:42:43.420 --> 00:42:43.780
Yeah.

00:42:43.780 --> 00:42:45.780
It's early days and there's a bunch of great tools.

00:42:46.080 --> 00:42:49.120
Cecil, let me round this out with coming back to one thing you said.

00:42:49.120 --> 00:42:50.300
You talked about how it was optional.

00:42:50.300 --> 00:42:56.160
The closest analogy that I think we have to this in other languages has got to be TypeScript,

00:42:56.160 --> 00:42:59.480
which is like JavaScript plus types and a little transpiling thing.

00:42:59.480 --> 00:43:00.500
And it's all cool.

00:43:00.500 --> 00:43:03.760
But all my interactions with TypeScript are like, oh, you haven't declared this thing right.

00:43:03.760 --> 00:43:08.020
This thing's, it's like, it's as picky as C++ or C# or Java.

00:43:08.240 --> 00:43:14.540
But it's, it's not as like built from the start, like the tools aren't necessarily all

00:43:14.540 --> 00:43:15.880
there to make that fit together.

00:43:15.880 --> 00:43:20.100
So I always feel like I'm kind of stumbling over the things like 80% of the time it's helped

00:43:20.100 --> 00:43:22.180
me and 20% of the time that frustrates me.

00:43:22.180 --> 00:43:25.280
Whereas like here you can just kind of, you can leave it off, take it or leave it if it's

00:43:25.280 --> 00:43:26.040
good, not good.

00:43:26.040 --> 00:43:26.580
Yeah.

00:43:26.580 --> 00:43:27.080
Yeah.

00:43:27.080 --> 00:43:32.600
I think TypeScript definitely helps with some learnings about how developers want to interact

00:43:32.600 --> 00:43:33.060
with typing.

00:43:33.060 --> 00:43:37.900
I think the thing with TypeScript is very, like there's a lot of features in there and it's

00:43:37.900 --> 00:43:42.600
very customizable, but you know, it's kind of like you have like a nail, right?

00:43:42.600 --> 00:43:43.640
And it gave you a jackhammer.

00:43:43.640 --> 00:43:45.140
You really don't need the jackhammer.

00:43:45.140 --> 00:43:46.420
Exactly.

00:43:46.420 --> 00:43:48.960
Maybe a little finishing hammer would be nice.

00:43:48.960 --> 00:43:49.520
Yeah.

00:43:49.520 --> 00:43:52.460
There's a lot of different things that you can customize and some people need that.

00:43:52.460 --> 00:43:56.540
But I think for 90% of folks, I'm making up that number.

00:43:56.540 --> 00:43:57.260
That's not a real number.

00:43:57.260 --> 00:44:02.780
But for a lot of folks, you probably don't need a lot of those knobs to turn and options

00:44:02.780 --> 00:44:03.180
to set.

00:44:03.180 --> 00:44:03.960
Yeah, absolutely.

00:44:03.960 --> 00:44:07.840
There was like a two year period with TypeScript where I'd read the roadmap.

00:44:07.840 --> 00:44:10.760
They do a great job of running their project.

00:44:10.760 --> 00:44:11.760
Great job.

00:44:11.760 --> 00:44:15.880
But they put a feature in using words I didn't know from type theory.

00:44:15.880 --> 00:44:18.880
And my answer was, oh, that's for Angular.

00:44:18.880 --> 00:44:20.200
Oh, that's for Angular.

00:44:20.200 --> 00:44:22.380
Oh, Angular is the only one having that problem.

00:44:22.380 --> 00:44:25.180
There's some serious machinery.

00:44:25.180 --> 00:44:26.660
Yeah, there is.

00:44:26.660 --> 00:44:27.020
All right.

00:44:27.020 --> 00:44:31.720
Final thought on this from the chat is Eric O'Shaughnessy says, I love how typing solidifies

00:44:31.720 --> 00:44:33.120
the author's intent.

00:44:33.120 --> 00:44:33.640
Yeah.

00:44:33.640 --> 00:44:34.240
All right.

00:44:34.240 --> 00:44:36.980
Let's have the chooser choose again.

00:44:36.980 --> 00:44:37.660
Jay.

00:44:37.660 --> 00:44:38.340
All right.

00:44:38.340 --> 00:44:40.680
So I totally didn't peanut butter on this.

00:44:40.680 --> 00:44:44.220
But as y'all were talking, like I just got some wonderful ideas.

00:44:44.220 --> 00:44:49.580
And I immediately started thinking about just the doubling down of some of the technologies

00:44:49.580 --> 00:44:54.700
that we've seen kind of pop up over the last couple of years, but then truly evolve.

00:44:54.700 --> 00:44:59.300
And like one of the biggest examples of that, and I know I'm like five years, daily, dollar

00:44:59.300 --> 00:45:05.260
short here, but like Jupyter, anything Jupyter notebook related, like it's not just for the

00:45:05.260 --> 00:45:10.300
solo data scientist anymore, like collaborative Jupyter notebooks.

00:45:10.300 --> 00:45:15.080
Like to me that I know people that just have dreams about that and they're like the best dreams

00:45:15.080 --> 00:45:15.380
ever.

00:45:15.380 --> 00:45:23.060
And, you know, I know, Mike, you just did a podcast episode a few weeks back about that.

00:45:23.060 --> 00:45:25.000
And we were talking about it on Python bytes a little bit.

00:45:25.000 --> 00:45:27.460
They're like, it's not just one option anymore.

00:45:27.460 --> 00:45:31.040
It's, you know, there's cocalc, there's pybinder, there's deep note.

00:45:31.040 --> 00:45:33.900
Apparently I'm a deep note influencer and I didn't even know it, but.

00:45:33.900 --> 00:45:34.360
That's awesome.

00:45:34.360 --> 00:45:35.280
It looks good.

00:45:35.280 --> 00:45:36.320
You are bringing it up again.

00:45:36.320 --> 00:45:36.940
Again.

00:45:36.940 --> 00:45:37.500
Exactly.

00:45:37.500 --> 00:45:42.180
But not just in like Jupyter land, we have like crazy ideas.

00:45:42.180 --> 00:45:46.440
Like what if we could do Python on the front end with Anvil?

00:45:46.440 --> 00:45:51.140
And like now Anvil is saying like, hey, we're going to open source some of our server

00:45:51.140 --> 00:45:54.620
technology so that you can take this technology and do it yourself.

00:45:54.620 --> 00:45:59.040
And I think that that's just like with type hints, we're coming up with these ideas and

00:45:59.040 --> 00:46:00.700
we're taking them a step further.

00:46:00.700 --> 00:46:06.860
I think that this is what, in my opinion, has kept me in the Python ecosystem as long as it

00:46:06.860 --> 00:46:14.060
has is because I'm constantly learning about like brand new ways to do a thing in Python.

00:46:14.060 --> 00:46:18.160
And I have to talk about this because I told people in my Slack channel that I would, but

00:46:18.160 --> 00:46:21.740
like we just thought, you know, at Elastic, we just launched a brand new tool called Elant

00:46:21.740 --> 00:46:22.360
and it's in beta.

00:46:22.360 --> 00:46:25.840
And the whole idea is it's like a Pandas data frame.

00:46:25.840 --> 00:46:29.860
But instead of storing all of your data in memory, you can store it in an Elasticsearch,

00:46:29.860 --> 00:46:30.760
you know, data store.

00:46:30.760 --> 00:46:31.860
Oh, that's an interesting idea.

00:46:31.860 --> 00:46:39.180
So now instead of being limited to what your RAM can hold, you're limited to how much space

00:46:39.180 --> 00:46:42.560
you got and you can run search and you can run queries on it.

00:46:42.560 --> 00:46:46.820
You can tie it into things like, you know, scikit learn and TensorFlow and do machine,

00:46:46.820 --> 00:46:48.500
you know, any type of machine learning on it.

00:46:48.820 --> 00:46:54.100
And at the end of the day, you're doing transforms on the data as it's in the data store.

00:46:54.100 --> 00:46:58.220
So there's no more downloading a bunch of data, working on it and trying to re-upload it.

00:46:58.220 --> 00:47:05.580
And it's off of the backs of crazy ideas from people crazier than I am that are just like,

00:47:05.580 --> 00:47:06.920
hey, what if we could do this?

00:47:06.920 --> 00:47:12.020
And, you know, to me, that's all I wanted to do with Python is just make up goofy stuff

00:47:12.020 --> 00:47:13.060
and see if it would work.

00:47:13.060 --> 00:47:14.400
I think that's an interesting idea.

00:47:14.400 --> 00:47:18.380
You could start using things like lots of data and things like serverless.

00:47:18.780 --> 00:47:21.780
where you get really short execution times and not much power.

00:47:21.780 --> 00:47:26.700
But if it's already in something like Elastic, you could do pandas against it, like quote pandas,

00:47:26.700 --> 00:47:31.760
like the API against it without really suffering a lot of trying to download it to your little

00:47:31.760 --> 00:47:36.160
Docker Lambda callback thing before it runs out of time to execute and whatnot.

00:47:36.160 --> 00:47:40.600
Yeah, actually, I think I've seen some people do some cool stuff with spaCy and Elastic as well,

00:47:40.600 --> 00:47:44.540
you know, processing all, you know, the huge volumes of text, which also I think is

00:47:44.540 --> 00:47:47.340
such an interesting part of our application of data science.

00:47:47.780 --> 00:47:51.320
Like, you know, you want to have, you have so much text that, you know, you can't even,

00:47:51.320 --> 00:47:52.300
nobody can read it.

00:47:52.300 --> 00:47:57.380
You can barely store it, but you can still analyze it and process it and find something

00:47:57.380 --> 00:47:58.500
out about it that otherwise.

00:47:58.500 --> 00:48:00.800
So yeah, that's, that actually sounds quite cool.

00:48:00.800 --> 00:48:06.880
I mean, the problems I was, I was having initially was just this amazing problem of like, I've got

00:48:06.880 --> 00:48:10.360
a million lines of data that I need to do something with.

00:48:10.360 --> 00:48:14.360
And I've got this little Mac mini here that's just chugging along, trying its best.

00:48:14.360 --> 00:48:16.880
And everyone's like, well, why don't you just use the Google API?

00:48:16.880 --> 00:48:18.420
And it's like, okay, well, I did the math.

00:48:18.420 --> 00:48:19.900
I'm going to need $20,000.

00:48:19.900 --> 00:48:22.840
And it's like, okay, so we can't use the Google API.

00:48:22.840 --> 00:48:24.100
We can't solve it with that problem.

00:48:24.100 --> 00:48:24.940
What else do we got?

00:48:24.940 --> 00:48:28.700
And now it's like, oh, wait, you mean I can just store all this data?

00:48:28.700 --> 00:48:33.540
Because it's only a few gigs, but then I can just hit my local server as many times as

00:48:33.540 --> 00:48:33.880
I want.

00:48:33.880 --> 00:48:39.280
Let, you know, search store or any type of data store that's good at retrieving the data

00:48:39.280 --> 00:48:42.060
as I want it, as I need it, and then let it do its thing.

00:48:42.060 --> 00:48:45.800
Like that solved a $20,000 problem.

00:48:45.800 --> 00:48:48.180
I mean, even, even a site for the cash.

00:48:48.180 --> 00:48:49.600
Do you want to send all your data to Google?

00:48:49.600 --> 00:48:50.320
Probably not.

00:48:50.320 --> 00:48:50.980
Yeah.

00:48:50.980 --> 00:48:52.500
I mean, that's awesome.

00:48:52.500 --> 00:48:54.640
Even if it were free, yeah.

00:48:54.640 --> 00:48:57.760
You could also send it to Facebook while you're at it.

00:48:58.080 --> 00:48:58.720
I don't know.

00:48:58.720 --> 00:49:02.900
I was, I was working with police call records, so I don't want to send that data anywhere.

00:49:02.900 --> 00:49:04.540
I don't want to be on a watch list.

00:49:04.540 --> 00:49:05.880
No, exactly.

00:49:05.880 --> 00:49:09.800
And I think those are like really, a lot of these really important applications of the technology

00:49:09.800 --> 00:49:13.560
when in the health domain, people are doing good and useful stuff, but they should not

00:49:13.560 --> 00:49:19.000
do that stuff at that type of cost, which means sharing all of their sensitive data with

00:49:19.000 --> 00:49:21.640
companies that will, you know, want it for some other reason.

00:49:21.640 --> 00:49:22.340
Yeah, absolutely.

00:49:22.340 --> 00:49:24.360
Matt, Reuven, you guys do training.

00:49:24.360 --> 00:49:26.080
What's the Jupyter story around there?

00:49:26.420 --> 00:49:30.440
I did a class with not Jupyter, but it was all collab based this morning.

00:49:30.440 --> 00:49:32.320
So yeah, I use it a lot.

00:49:32.320 --> 00:49:33.940
I think it's great for beginners.

00:49:33.940 --> 00:49:40.800
Like I said, for a lot of people who are scientists or engineers, that's what they sort of consider

00:49:40.800 --> 00:49:41.280
Excel.

00:49:41.280 --> 00:49:45.560
And so a lot of them sort of want to sit in Jupyter all day.

00:49:45.560 --> 00:49:51.600
They don't even want to like think about modules or code or even software engineering.

00:49:51.600 --> 00:49:52.020
Right.

00:49:52.020 --> 00:49:57.460
And so it's somewhat of a challenge for me to sort of say, okay, let's talk about some engineering

00:49:57.460 --> 00:50:01.200
skills and some good best practices for Python projects.

00:50:01.200 --> 00:50:02.820
And they're like, oh, I don't want to leave Jupyter.

00:50:02.820 --> 00:50:03.280
Right.

00:50:03.280 --> 00:50:04.300
Can I do this all in Jupyter?

00:50:04.300 --> 00:50:08.000
I'm like, well, you could, but you kind of don't want to per se.

00:50:08.000 --> 00:50:09.320
But yeah, definitely cool.

00:50:09.580 --> 00:50:16.580
I think what I'd love to see is Inez's fancy mypy checker hooked up with pandas on Jupyter.

00:50:16.580 --> 00:50:21.160
That would make my day because that's one of the things that I find confuses people just

00:50:21.160 --> 00:50:26.500
with pandas having 50 ways to do things and then objects returning five different types

00:50:26.500 --> 00:50:29.220
or methods that return five different types.

00:50:29.400 --> 00:50:34.180
like you don't get any tab completion or any of that good stuff in Jupyter when you're doing

00:50:34.180 --> 00:50:35.620
a lot of the machine learning stuff.

00:50:35.620 --> 00:50:36.040
Yeah.

00:50:36.040 --> 00:50:39.760
And a bunch of like grown up engineering stuff is coming to Jupyter, right?

00:50:39.760 --> 00:50:44.100
Like NB dev, NB QA, some of these other stuff that's coming.

00:50:44.100 --> 00:50:46.700
There's making it way more interesting for that regard.

00:50:46.700 --> 00:50:46.960
Yeah.

00:50:46.960 --> 00:50:49.260
The NB dev stuff is interesting just coming.

00:50:49.260 --> 00:50:53.780
I mean, that's sort of taking it to that sort of literate style of programming where we're

00:50:53.780 --> 00:50:56.260
going to stay in Jupyter all day and do everything from that.

00:50:56.380 --> 00:51:00.740
And then, you know, Netflix has their stuff where they're deploying Jupyter notebooks to

00:51:00.740 --> 00:51:01.280
production.

00:51:01.280 --> 00:51:01.600
Yeah.

00:51:01.600 --> 00:51:02.160
It was paper mill.

00:51:02.160 --> 00:51:02.540
Yeah.

00:51:02.540 --> 00:51:03.680
Reuben, how about you?

00:51:03.680 --> 00:51:04.840
And then I'm going to run the chooser.

00:51:04.840 --> 00:51:09.840
So I, yeah, I mean, I use, oh, so I use Jupyter every day for my training.

00:51:09.840 --> 00:51:10.600
I don't use slides.

00:51:10.600 --> 00:51:11.660
I just do live coding.

00:51:11.660 --> 00:51:16.640
And I find that's a great way to show them not just sort of the answer.

00:51:16.640 --> 00:51:20.960
This is how you code something, but this is the process you use to get to the solution

00:51:20.960 --> 00:51:23.320
because teaching people that process is really important.

00:51:23.640 --> 00:51:27.260
And it also means I can share with them everything that I typed during the day really, really

00:51:27.260 --> 00:51:27.640
easily.

00:51:27.640 --> 00:51:31.220
People are a little resistant to using it for especially experienced developers.

00:51:31.220 --> 00:51:32.520
They're like, wait, what is this thing?

00:51:32.520 --> 00:51:33.960
Why are you not using a normal IDE?

00:51:33.960 --> 00:51:37.560
I'm actually going to force myself in the last year to remember, oh, yeah, we should do a

00:51:37.560 --> 00:51:41.960
few exercises and tell them to use the IDE so they won't think that everything is done

00:51:41.960 --> 00:51:42.300
in Jupyter.

00:51:42.300 --> 00:51:43.660
That's a great environment.

00:51:43.660 --> 00:51:45.980
But like, there are other ways to develop software.

00:51:45.980 --> 00:51:48.860
Why does Python only run in this weird web browser thing?

00:51:49.280 --> 00:51:54.720
Speaking of this, this is another I think this is another reason why Python has taken

00:51:54.720 --> 00:51:57.360
off so much just that you want stuff to be dynamic.

00:51:57.360 --> 00:52:03.720
If you're doing the sort of data science type of work, you want to run your code that way,

00:52:03.720 --> 00:52:06.060
even if you're running it in an IDE in a more traditional way.

00:52:06.060 --> 00:52:09.800
But I think Jupyter has especially not just like, oh, you want to have like these little

00:52:09.800 --> 00:52:13.240
notebook cells in your browser, but more like this is the type of way you want to interact

00:52:13.240 --> 00:52:13.660
with code.

00:52:13.660 --> 00:52:16.020
Run something, change a line, run again, run that part.

00:52:16.020 --> 00:52:17.680
Well, they're coming from too.

00:52:17.680 --> 00:52:19.600
They're coming from notebook environments.

00:52:19.600 --> 00:52:22.660
And so this makes sense for a lot of these people.

00:52:22.660 --> 00:52:28.620
And being able to just explain it, you know, on the same, just in one look, like instead

00:52:28.620 --> 00:52:34.240
of going, here's five slides explaining what I'm about to do, or here's just the code.

00:52:34.240 --> 00:52:36.140
Now let me sit here and explain it to you.

00:52:36.140 --> 00:52:38.420
I can literally break it down line by line.

00:52:38.420 --> 00:52:40.000
Okay, this is what's about to happen now.

00:52:40.000 --> 00:52:42.680
Let's run this and watch it happening as we go.

00:52:42.680 --> 00:52:47.680
So for people who don't write Python full time, again, it's amazing because for them,

00:52:47.680 --> 00:52:49.300
they can see it piece by piece.

00:52:49.300 --> 00:52:52.680
Just like, you know, my daughter, I'm just trying to teach her how to read early.

00:52:52.680 --> 00:52:55.180
And it's just like, like break it up piece by piece.

00:52:55.180 --> 00:53:00.840
And like, you can do that when you're training young, experienced wise Pythonistas and just

00:53:00.840 --> 00:53:04.160
say like, hey, let's just look at what this does.

00:53:04.320 --> 00:53:08.280
And if we want to dig into it, it's almost like having a debugger in your presentation

00:53:08.280 --> 00:53:12.340
and just being able to like stop at any point in time and go, all right, let's, let's jump

00:53:12.340 --> 00:53:12.500
in.

00:53:12.500 --> 00:53:13.100
Let's go deeper.

00:53:13.100 --> 00:53:14.280
Let's really talk about this.

00:53:14.280 --> 00:53:14.620
Yeah.

00:53:14.620 --> 00:53:17.240
Or be able to step back two lines in your execution.

00:53:17.240 --> 00:53:17.820
True.

00:53:17.820 --> 00:53:18.800
All right.

00:53:18.800 --> 00:53:19.500
Just for the time sake.

00:53:19.500 --> 00:53:20.820
Go ahead.

00:53:20.820 --> 00:53:21.780
Last thought, Reuben.

00:53:21.780 --> 00:53:22.760
You get the final thought on this one.

00:53:22.820 --> 00:53:27.100
I started using more and more markup in my notebooks as well to like sort of document

00:53:27.100 --> 00:53:32.660
what I'm doing explicitly and sort of instead of just using hashtags and comments.

00:53:32.660 --> 00:53:35.160
So it becomes much more obvious with bullet points.

00:53:35.160 --> 00:53:37.080
I think people are enjoying that as well.

00:53:37.080 --> 00:53:38.340
Yeah, that's great.

00:53:38.340 --> 00:53:40.060
And that's, I mean, that's part of the Zen of notebooks.

00:53:40.060 --> 00:53:40.580
All right.

00:53:40.580 --> 00:53:42.380
And you're up next.

00:53:42.380 --> 00:53:44.200
The random choices selected you.

00:53:44.200 --> 00:53:44.840
Okay.

00:53:44.840 --> 00:53:48.860
So my big story for this year is very small story.

00:53:48.860 --> 00:53:49.980
A Microsoft story.

00:53:49.980 --> 00:53:50.960
It's COVID.

00:53:50.960 --> 00:53:51.660
It's the coronavirus.

00:53:52.360 --> 00:53:58.100
Which I think for the first time ever, it's the topic that everyone is speaking about in

00:53:58.100 --> 00:54:00.040
every country, every walk of life.

00:54:00.040 --> 00:54:04.240
Like whoever I talk to, wherever they are, this is the only thing people talk about because

00:54:04.240 --> 00:54:06.900
it is such a profound effect on everything we've done.

00:54:06.900 --> 00:54:08.780
Now, you know, this is a Python show.

00:54:08.780 --> 00:54:10.500
So we'll talk about the Python aspect of it.

00:54:10.500 --> 00:54:15.100
And I'm not trying to minimize at all the extraordinary pain that people are going through

00:54:15.100 --> 00:54:19.700
physically, medically, emotionally, financially, on, on, and on.

00:54:19.700 --> 00:54:24.440
But Python has continued sort of chugging along throughout this crisis.

00:54:24.440 --> 00:54:29.580
In fact, like we've seen that big companies, high-tech companies are actually among the winners

00:54:29.580 --> 00:54:31.460
in this as the whole world has gone digital.

00:54:31.460 --> 00:54:34.320
And companies are hiring Python developers.

00:54:34.320 --> 00:54:36.000
They're increasingly desperate for Python developers.

00:54:36.000 --> 00:54:40.380
The number of people in my corporate training classes who, when we go around and everyone introduces

00:54:40.380 --> 00:54:44.300
themselves, who were hired in the last six months is amazing to me.

00:54:44.300 --> 00:54:47.840
Like these are people who are working from home, were interviewed from home, hired from

00:54:47.840 --> 00:54:52.200
home, and are now doing training from home as their companies sort of grow in interest

00:54:52.200 --> 00:54:52.900
and power and everything.

00:54:52.900 --> 00:54:58.640
So people who have Python skills have continued to be, and I would even say are increasingly

00:54:58.640 --> 00:55:00.120
in demand, which is amazing.

00:55:00.120 --> 00:55:05.620
The bad news, or among the bad news is, of course, so I mentioned this before, Python and all the

00:55:05.620 --> 00:55:09.740
other meetings and meetups and gatherings have suffered as a result.

00:55:10.020 --> 00:55:12.740
The good news on this front is I've been able to speak at many more conferences than I would

00:55:12.740 --> 00:55:16.960
have been able to because, hey, I can attend the conference from my home office.

00:55:16.960 --> 00:55:18.440
I don't need to fly anywhere, go anywhere.

00:55:18.440 --> 00:55:19.760
But you know what?

00:55:19.760 --> 00:55:24.260
All of these conferences, these online solutions are still really lacking.

00:55:24.260 --> 00:55:28.560
At the end of the day, as much as we want to say, we're virtual, we're online, we communicate

00:55:28.560 --> 00:55:28.980
this way.

00:55:28.980 --> 00:55:32.780
And that is an important part of things, that face-to-face contact, that personal contact

00:55:32.780 --> 00:55:34.080
is really missing.

00:55:34.080 --> 00:55:35.280
And I'm really feeling it.

00:55:35.280 --> 00:55:37.100
I've only been going to conferences for a few years now.

00:55:37.500 --> 00:55:40.700
And boy, I really miss being in the same room as other people and talking to them and

00:55:40.700 --> 00:55:42.640
chatting and just sort of randomly bumping into people.

00:55:42.640 --> 00:55:47.340
And then you also have the financial aspect of it that someone was mentioning earlier, the

00:55:47.340 --> 00:55:47.780
PSF.

00:55:47.780 --> 00:55:49.500
Their big fundraiser each year is Python.

00:55:49.500 --> 00:55:53.880
And I'm sure it was a hit for them not just not to have it this year, but to have to cancel

00:55:53.880 --> 00:55:54.280
the venue.

00:55:54.280 --> 00:55:57.480
And I am extremely skeptical that's going to happen in person.

00:55:57.480 --> 00:56:00.000
I know EuroPython already said it's not happening in 2021.

00:56:00.680 --> 00:56:05.420
And we'll have to see exactly how this affects the community going forward.

00:56:05.420 --> 00:56:07.140
I'd say so far, we're doing okay.

00:56:07.140 --> 00:56:12.240
But here's an opportunity for someone to figure out how can we do conferences online that are

00:56:12.240 --> 00:56:15.980
effective in a closer way to what we've been doing so far.

00:56:15.980 --> 00:56:20.600
The news is, I would say, unbalanced good for Python and for people who know Python, but

00:56:20.600 --> 00:56:22.500
still pretty bad overall.

00:56:23.160 --> 00:56:28.020
And also add that like these vaccines, I mean, boy, oh boy, if they work, this is going

00:56:28.020 --> 00:56:33.400
to be like, I'm super, not as a biologist or anything, but I'm so amazingly impressed with

00:56:33.400 --> 00:56:36.700
all the science and the work that people have been doing on this front.

00:56:36.700 --> 00:56:41.700
And I think this has a chance also to affect our lives moving forward, how they develop them.

00:56:41.700 --> 00:56:43.540
They just need to make a PyCon bubble.

00:56:43.540 --> 00:56:49.480
So in the United States, the NBA was continuing to play because they had a bubble where they isolated

00:56:49.480 --> 00:56:52.380
all the players for however long, right?

00:56:52.480 --> 00:56:57.740
So we just all go to somewhere and bubble up for however long.

00:56:57.740 --> 00:56:58.820
Then we can have our conference.

00:56:58.820 --> 00:57:02.600
I don't know if my family will let me do that.

00:57:02.600 --> 00:57:04.460
Jay, we'll just do it in San Diego, man.

00:57:04.460 --> 00:57:04.960
It's nice though.

00:57:04.960 --> 00:57:05.720
Okay, I'm all for it.

00:57:05.720 --> 00:57:07.520
Coronado Island, we'll just get a section of it.

00:57:07.520 --> 00:57:07.720
Okay.

00:57:07.720 --> 00:57:08.200
Yeah.

00:57:08.200 --> 00:57:09.200
But why not?

00:57:09.200 --> 00:57:11.480
Mandatory quarantine for like conferences.

00:57:11.480 --> 00:57:15.380
I just did two-way quarantine here to be able to enter Australia.

00:57:15.380 --> 00:57:16.600
Yeah, just live in Australia.

00:57:16.600 --> 00:57:18.680
In the hotel room for two weeks and you're free.

00:57:18.680 --> 00:57:20.020
Make PyCon in Australia.

00:57:20.020 --> 00:57:21.160
That sounds okay to me.

00:57:21.160 --> 00:57:21.800
Problem solved.

00:57:21.800 --> 00:57:24.340
Well, I mean, to be fair, it's expensive.

00:57:24.340 --> 00:57:30.400
So I wouldn't, you know, would you want to pay like, you know, your conference plus two

00:57:30.400 --> 00:57:32.040
weeks in a hotel in order to do that?

00:57:32.040 --> 00:57:37.240
I don't think that'd be even less inclusive than a lot of these conferences already are.

00:57:37.480 --> 00:57:39.020
I don't want to take all of this thunder.

00:57:39.020 --> 00:57:45.640
But one of the first conferences that I watched was, Cecil, please remind me now because I'm blanking.

00:57:45.640 --> 00:57:46.920
That's how long of a year it's been.

00:57:46.920 --> 00:57:48.720
The conference that you helped put on.

00:57:49.720 --> 00:57:50.960
The Juneteenth conference.

00:57:50.960 --> 00:57:51.480
Yeah.

00:57:51.480 --> 00:57:55.340
And with that, I mean, one, great conference.

00:57:55.340 --> 00:57:57.560
I'm sorry I screwed up on remembering the name.

00:57:57.560 --> 00:57:58.660
That's my fault, not yours.

00:57:58.980 --> 00:58:05.780
But also the sheer fact that that conference was organized in two weeks.

00:58:05.780 --> 00:58:07.500
And it was an amazing conference.

00:58:07.500 --> 00:58:08.560
Like the ability.

00:58:08.560 --> 00:58:11.020
That could never have been done if it was in person, right?

00:58:11.020 --> 00:58:11.580
Yes.

00:58:11.580 --> 00:58:17.260
So like the accessibility that you're providing to new speakers, people that normally would

00:58:17.260 --> 00:58:19.680
not be able to get up and give a presentation.

00:58:19.680 --> 00:58:24.620
Like I've had that conversation so many times of like the type of talks that I like to create

00:58:24.620 --> 00:58:26.740
are not the type of talks you see at PyCon.

00:58:26.740 --> 00:58:27.920
And there's a reason why.

00:58:27.920 --> 00:58:29.400
And it's not a bad thing.

00:58:29.400 --> 00:58:30.860
It's just, it is what it is.

00:58:31.320 --> 00:58:35.560
And I think when you're able to say, you know what, let's do a conference.

00:58:35.560 --> 00:58:36.780
Let's make this happen.

00:58:36.780 --> 00:58:38.060
Let's, let's just get up.

00:58:38.060 --> 00:58:39.240
We can have fun with it.

00:58:39.240 --> 00:58:43.320
I've seen some conference talks that were literally small budget films.

00:58:43.320 --> 00:58:45.440
Like they had multiple casts.

00:58:45.440 --> 00:58:50.180
I've done transcriptions on, on conference talks that literally had, like, they gave me the script

00:58:50.180 --> 00:58:51.860
and said, all right, here you go.

00:58:51.860 --> 00:58:58.220
So like when you can actually do things like that and think outside the box and, and use this

00:58:58.220 --> 00:59:01.400
time to readjust the needle.

00:59:01.400 --> 00:59:05.620
There was a good podcast episode on more than just code.

00:59:05.620 --> 00:59:06.840
I believe not more than just code.

00:59:06.840 --> 00:59:07.480
I don't remember what it is.

00:59:07.480 --> 00:59:08.400
I'll find it greater than code.

00:59:08.400 --> 00:59:08.920
That's what it was.

00:59:08.920 --> 00:59:15.700
And they said, if we haven't taken this time to do something better, when things are different,

00:59:15.700 --> 00:59:20.860
when things have improved, then shame on all of us because yes, this sucked, but it caused

00:59:20.860 --> 00:59:26.200
us to think so much outside the box that we should be able to take all that knowledge with

00:59:26.200 --> 00:59:29.960
us when we can get back in the box and just have a ton of fun with it.

00:59:29.960 --> 00:59:30.240
Yeah.

00:59:30.240 --> 00:59:34.920
I think the, a lot of opportunities been made available for people to attend conferences and

00:59:34.920 --> 00:59:40.040
for people to get jobs where companies would previously say, no, you have to move to San

00:59:40.040 --> 00:59:42.100
Francisco or to Omaha or whatever.

00:59:42.100 --> 00:59:42.920
It's like, well, you know what?

00:59:42.920 --> 00:59:44.000
No one's going to the office.

00:59:44.000 --> 00:59:47.960
Let's try hiring from the best in the world instead of the best in Nebraska or whatever.

00:59:48.220 --> 00:59:53.300
I think that might be the biggest fallout of this, Michael, is just the change in everything

00:59:53.300 --> 00:59:55.620
being centrally located in Silicon Valley.

00:59:55.620 --> 00:59:56.120
Yeah.

00:59:56.120 --> 01:00:01.720
I've heard of a lot of people like that actually just have jobs in the Valley that have moved

01:00:01.720 --> 01:00:06.640
back to where their parents are because it's like 10 times cheaper or something like that.

01:00:06.640 --> 01:00:08.820
And they're not going to want to move back.

01:00:08.820 --> 01:00:10.260
Yeah.

01:00:10.260 --> 01:00:13.640
Have you heard that some companies are then readjusting their salaries?

01:00:13.780 --> 01:00:17.340
They're saying, well, if you live outside of the Bay Area, then it's cheaper.

01:00:17.340 --> 01:00:19.660
So we're going to cut their salary as a result.

01:00:19.660 --> 01:00:19.940
Yeah.

01:00:19.940 --> 01:00:22.080
But people have always been doing that.

01:00:22.080 --> 01:00:23.960
That's like, unfortunately, not new.

01:00:23.960 --> 01:00:29.360
So if you're listening and this happens, you can say, well, you no longer have to pay

01:00:29.360 --> 01:00:32.560
$15 million for my office area.

01:00:32.560 --> 01:00:34.600
So let's call it an even swap.

01:00:34.600 --> 01:00:41.000
Just keep a virtual address in the Bay Area.

01:00:41.000 --> 01:00:41.460
Exactly.

01:00:41.460 --> 01:00:43.180
My P.O. box is right down on Fifth Street.

01:00:43.560 --> 01:00:43.780
All right.

01:00:43.780 --> 01:00:44.820
Last one.

01:00:44.820 --> 01:00:48.240
This random choice was easy because we're down to our final excellent guest.

01:00:48.240 --> 01:00:49.880
Matt Harrison, what do you got for us?

01:00:49.880 --> 01:00:50.440
Okay.

01:00:50.440 --> 01:00:54.600
My thought was just on sort of the hardware aspect of things this year.

01:00:54.600 --> 01:00:59.620
So I have a daughter who started college this year for better or for worse.

01:00:59.620 --> 01:01:02.880
And she's learning both C++ and Python right now.

01:01:02.880 --> 01:01:06.600
Her linear algebra class has a Python lab, which I think is awesome.

01:01:06.600 --> 01:01:07.820
I wish I had that.

01:01:07.820 --> 01:01:11.460
But I was actually helping her with some homework.

01:01:11.760 --> 01:01:12.560
I wasn't doing it.

01:01:12.560 --> 01:01:14.540
But she was like, I can't figure this out.

01:01:14.540 --> 01:01:16.480
So I was her rubber duck the other night.

01:01:16.480 --> 01:01:19.980
And her issue was allocating memory, right?

01:01:20.400 --> 01:01:25.960
And so one of the things that's nice about Python is you don't have to worry about allocating memory.

01:01:25.960 --> 01:01:32.480
And she got all the output, but she was just double freeing a pointer here, which they checked on submission.

01:01:33.040 --> 01:01:35.800
So Python's now, now we're seeing Python.

01:01:35.800 --> 01:01:45.960
And I'll just tie this, like, I have a client who wants, next year, wants me to do a training on GPUs with Python, which just goes to show, like, my clients tend to be big companies.

01:01:45.960 --> 01:01:53.320
And so big companies are now leveraging, like, specialized technology to do things very quickly, right?

01:01:53.320 --> 01:02:00.060
And if you have a GPU, you can get 10,000 times performance that you get out of a CPU.

01:02:00.060 --> 01:02:01.940
So I think that's super exciting.

01:02:02.100 --> 01:02:06.440
There's the Rapids project, which is heavily sponsored by NVIDIA.

01:02:06.440 --> 01:02:09.360
And I'm super impressed with that.

01:02:09.360 --> 01:02:22.760
They're basically, like, taking well-known APIs and basically saying, hey, your code basically change an import or, you know, with the change of an import and this hardware, your code will run X times faster or whatever.

01:02:23.100 --> 01:02:25.440
And so I think that's super compelling and exciting.

01:02:25.440 --> 01:02:32.440
Not that necessarily everyone will have access to those sorts of things, but it's now getting to the point where it's becoming more common.

01:02:32.440 --> 01:02:38.840
On the note of hardware, I think another thing that was really interesting this year was the Apple M1 chip coming out.

01:02:38.840 --> 01:02:51.820
I actually bought a beefy PC this year, having run a MacBook for 15 years, just because due to Corona and whatnot, I needed something beefy to start doing virtual sharing and presentation like this.

01:02:51.880 --> 01:02:53.640
And my MacBook just wasn't cutting it.

01:02:53.640 --> 01:03:02.380
But the thing I don't like about my PC is that it sounds like it's going to take off every time I start doing something, right?

01:03:02.380 --> 01:03:06.720
Like modern Intel chips can take us to Mars if they want to.

01:03:06.720 --> 01:03:09.400
We just need to, like, make a huge drone out of them.

01:03:09.400 --> 01:03:18.960
And so I'm super excited to see, like, if you can get a silent MacBook that, you know, is super powerful, runs faster than Intel chips.

01:03:19.160 --> 01:03:25.960
That's super compelling, especially if they allow you to get a little bit more RAM, which from the machine learning side is interesting to me.

01:03:25.960 --> 01:03:29.600
But I'm also excited about the competition factor of that.

01:03:29.600 --> 01:03:34.260
I think, like, Intel and the chipset has sort of stagnated for the past couple of years.

01:03:34.260 --> 01:03:37.480
We've sort of run out of the end of Moore's law, per se.

01:03:37.840 --> 01:03:53.440
So I think both the GPU and the M1, it'll be interesting to see what the competition is from the PC manufacturers, if they're going to, you know, do a similar everything on a chip thing or just sort of go with what they've been going with.

01:03:53.520 --> 01:03:55.000
I think competition is good.

01:03:55.000 --> 01:03:59.060
And so I'm excited that Apple did this, even though there's going to be some growing pains.

01:03:59.060 --> 01:04:09.280
And Python might have some issues at first, but I think in the end, new technologies, new hardware that allow us to write at high levels and not have to worry about freeing and allocating memory.

01:04:09.400 --> 01:04:12.320
Which, again, a lot of people are using Python, don't care about that.

01:04:12.320 --> 01:04:13.480
They don't want to be programmers.

01:04:13.480 --> 01:04:21.600
They want to leverage great code, stand on the shoulders of giants and the latest and greatest software and hardware and have it be fast.

01:04:21.600 --> 01:04:24.340
So I'm super excited about the future with them.

01:04:24.340 --> 01:04:26.300
Yeah, I'm really excited about both these things.

01:04:26.300 --> 01:04:28.920
Like the whole GPU revolution is incredible.

01:04:28.920 --> 01:04:32.220
And the Apple M1 stuff is going to be really, really interesting.

01:04:32.220 --> 01:04:35.960
Like you, I bought a maxed out Mac mini.

01:04:36.080 --> 01:04:40.500
I actually had already ordered a top-of-the-line MacBook Pro 16-inch.

01:04:40.500 --> 01:04:41.640
And then that came out.

01:04:41.640 --> 01:04:42.560
I started seeing the reviews.

01:04:42.560 --> 01:04:43.160
I'm like, you know what?

01:04:43.160 --> 01:04:43.580
Forget it.

01:04:43.580 --> 01:04:45.160
I'm not getting that thing.

01:04:45.160 --> 01:04:46.580
I'm getting this new one to try it out.

01:04:46.580 --> 01:04:48.240
And it does have some drawbacks.

01:04:48.240 --> 01:04:49.700
Like Docker doesn't work right away.

01:04:49.700 --> 01:04:50.640
Maybe it will.

01:04:50.640 --> 01:04:51.200
Maybe it won't.

01:04:51.200 --> 01:04:53.900
But I have a 2018 MacBook Pro.

01:04:53.900 --> 01:04:54.480
That's pretty good.

01:04:54.480 --> 01:04:58.540
I have a SimRacing 16-core machine over there.

01:04:58.540 --> 01:05:01.000
Like I've got plenty of Intel stuff to work.

01:05:01.000 --> 01:05:02.180
So I'm going to try to jump on this.

01:05:02.180 --> 01:05:06.060
And I think the interesting Python angle here, besides just having stuff to run our code,

01:05:06.060 --> 01:05:10.620
and it's, you know, Inus talked about like her CI didn't support 3.9 right away.

01:05:10.620 --> 01:05:15.060
Well, whose CI is going to build wheels for Apple M1 straight away and things like that.

01:05:15.060 --> 01:05:18.420
There's going to be some interesting growing pains, especially on the data science side,

01:05:18.420 --> 01:05:20.440
as this true platform shift happens.

01:05:20.440 --> 01:05:23.940
It's funny you mentioned that because actually, yeah, when this came out, we were also thinking

01:05:23.940 --> 01:05:25.200
like, ah, maybe we should get one of these.

01:05:25.200 --> 01:05:27.840
You know, we want to make sure spaCy compiles properly on it.

01:05:27.840 --> 01:05:29.900
And we can really, you know, optimize for that.

01:05:29.900 --> 01:05:31.040
Did you guys get one?

01:05:31.040 --> 01:05:32.480
Yeah, because someone has to do it.

01:05:32.480 --> 01:05:33.860
Or so, you know, not yet.

01:05:33.860 --> 01:05:34.080
No.

01:05:34.080 --> 01:05:35.740
Also, it's a bit difficult with the traveling.

01:05:35.740 --> 01:05:37.560
But like, yeah, that's kind of...

01:05:37.560 --> 01:05:39.020
And we have other priorities too.

01:05:39.020 --> 01:05:39.720
This is not...

01:05:39.720 --> 01:05:41.480
I wouldn't put this like at the very top.

01:05:41.480 --> 01:05:42.940
But like, it's definitely something we want to do.

01:05:42.940 --> 01:05:43.360
Yeah.

01:05:43.360 --> 01:05:46.040
While at the same time, we also want to keep optimizing for CPU.

01:05:46.040 --> 01:05:47.080
Like, that's the other thing.

01:05:47.080 --> 01:05:52.360
Of course, you know, even all these new NLP models, all of that stuff, obviously, runs great

01:05:52.360 --> 01:05:53.000
on a GPU.

01:05:53.000 --> 01:05:54.320
And we'll see a lot of improvements.

01:05:54.320 --> 01:05:58.420
And we also see this become much more available and cheaper for people to use.

01:05:58.420 --> 01:06:02.500
But at the same time, we're still optimizing our tools and libraries for CPU.

01:06:02.500 --> 01:06:04.800
Like, you can run it on your random laptop.

01:06:04.800 --> 01:06:07.700
And also, it's still, for a long time, it will be cheaper still.

01:06:07.700 --> 01:06:09.720
If you just, you know, you want to run lots of machines.

01:06:09.720 --> 01:06:12.660
And you can get those, you know, much cheaper in the cloud.

01:06:12.660 --> 01:06:18.200
And if you can parallelize, you can train your models very efficiently on CPU if you can get

01:06:18.200 --> 01:06:18.600
it to work.

01:06:18.600 --> 01:06:19.020
Yeah.

01:06:19.020 --> 01:06:21.240
That will always be cheaper for a long time.

01:06:21.240 --> 01:06:26.460
There's a lot to say about just the overall cost of computing as a whole.

01:06:26.460 --> 01:06:28.060
I mean, this is great.

01:06:28.060 --> 01:06:28.820
This is $10.

01:06:28.820 --> 01:06:31.920
And I mean, I can run a lot of stuff on that.

01:06:31.920 --> 01:06:33.220
You're holding up a circuit.

01:06:33.220 --> 01:06:36.520
Well, this is an Adafruit thing just for the people who are not on the video.

01:06:36.520 --> 01:06:37.100
Oh, yeah.

01:06:37.100 --> 01:06:37.420
Sorry.

01:06:37.420 --> 01:06:39.680
I'm holding a Raspberry Pi Zero W.

01:06:39.680 --> 01:06:43.560
So it's like, you know, four gigs of RAM, like enough.

01:06:43.560 --> 01:06:47.700
You can buy a 64 gig, like flash drive for $3 now.

01:06:47.700 --> 01:06:52.900
Like, it's amazing, like just the overall cost of compute has dropped so much.

01:06:52.900 --> 01:06:53.580
I mean, what was it?

01:06:53.580 --> 01:06:55.880
The, what is the Raspberry Pi 400?

01:06:55.880 --> 01:06:59.260
400 where it's just, it looks like a keyboard, but it's actually a whole computer.

01:06:59.260 --> 01:06:59.820
Yeah.

01:06:59.820 --> 01:07:06.560
So it's like, as we continue to do more and more, we're doing it with less and less and

01:07:06.560 --> 01:07:08.220
it's cheaper and cheaper and cheaper.

01:07:08.400 --> 01:07:12.880
And most of us are coming from someplace where the cost of living is too damn high.

01:07:12.880 --> 01:07:18.580
And we're able to say that we can afford to buy a $15 Pi Zero and not think about it too

01:07:18.580 --> 01:07:18.820
hard.

01:07:18.820 --> 01:07:23.000
But the fact that we're getting to that point where you can have people all over the world

01:07:23.000 --> 01:07:27.960
where the question isn't anymore, how do I get a computing device in my hands?

01:07:27.960 --> 01:07:31.020
It's like, okay, now I have some choices and they're all affordable.

01:07:31.200 --> 01:07:35.400
Like to me, that's, we're going to see a lot of things come where Brian Okken is right

01:07:35.400 --> 01:07:38.340
now, where VS 2103 is in the future.

01:07:38.340 --> 01:07:40.220
There's going to be a lot of great things coming.

01:07:40.220 --> 01:07:41.440
And yes, I'm looking at chat.

01:07:41.440 --> 01:07:47.300
I have my kids to have one of those one laptop per child's in my, in their bedroom over there,

01:07:47.300 --> 01:07:47.520
right?

01:07:47.520 --> 01:07:51.740
Which I think that the Raspberry Pi 400 is sort of.

01:07:51.740 --> 01:07:52.840
It's the next gen of that.

01:07:52.900 --> 01:07:56.220
It's actually something that makes sense.

01:07:56.220 --> 01:07:57.680
Everyone has a TV, right?

01:07:57.680 --> 01:08:01.400
And you can just plug it in and you're not in somewhere.

01:08:01.400 --> 01:08:02.560
I mean, you're in Linux.

01:08:02.560 --> 01:08:06.840
So yeah, you're in a weird environment, but you can run one of the laptops with the hand

01:08:06.840 --> 01:08:07.420
crank on it.

01:08:07.420 --> 01:08:08.080
Yeah.

01:08:08.080 --> 01:08:09.640
Well, it has a little wings.

01:08:09.640 --> 01:08:11.660
Mine didn't have the hand crank, but okay.

01:08:11.660 --> 01:08:14.740
I actually like, I kept hearing about Raspberry Pi.

01:08:14.740 --> 01:08:17.880
And so I decided to order one recently and I haven't done anything with it.

01:08:17.880 --> 01:08:20.740
I like just came a few days ago, but I'm looking at this thing.

01:08:20.740 --> 01:08:25.340
I'm like, Oh my God, this little card here that costs me less than a hundred dollars,

01:08:25.340 --> 01:08:29.500
a lot less than that is more powerful than the computer I use to run my entire business

01:08:29.500 --> 01:08:31.060
for years and years and years.

01:08:31.060 --> 01:08:32.960
It's just astonishing to me.

01:08:32.960 --> 01:08:33.380
Yeah.

01:08:33.380 --> 01:08:36.060
So I think that's probably a good place to round out the show.

01:08:36.060 --> 01:08:37.940
Like the future is so exciting.

01:08:37.940 --> 01:08:40.820
And in some ways we're like kind of living there, right?

01:08:40.820 --> 01:08:42.480
Some of these things that are coming out are so amazing.

01:08:42.480 --> 01:08:45.600
And I just want to say, thank you all to you all for being here.

01:08:45.600 --> 01:08:48.140
You're all doing such amazing work and it's really humbling.

01:08:48.140 --> 01:08:52.500
You all took time from crazy schedules, from traveling, from weird locations to just be

01:08:52.500 --> 01:08:54.140
here and make this whole event happen.

01:08:54.140 --> 01:08:57.540
This has been another episode of Talk Python to Me.

01:08:57.540 --> 01:09:03.120
Our guests on this episode were Cecil Phillip, Ines Montani, Jay Miller, Paul Everett, Reuven

01:09:03.120 --> 01:09:05.420
Lerner, Matt Harrison, and Brian Okken.

01:09:05.420 --> 01:09:06.800
Thank you all for being on the show.

01:09:06.800 --> 01:09:10.540
And it's been brought to you by us over at Talk Python Training.

01:09:11.220 --> 01:09:12.820
Do you want to level up your Python?

01:09:12.820 --> 01:09:17.460
Well, if you're just getting started, try our Python for the Absolute Beginner course.

01:09:17.460 --> 01:09:22.280
Or if you're looking for something more advanced, check out our new Async course that digs into

01:09:22.280 --> 01:09:25.400
all the different types of Async programming that you can do in Python.

01:09:25.400 --> 01:09:29.380
And if you're interested in more than one of these, be sure to check out our Everything

01:09:29.380 --> 01:09:29.780
Bundle.

01:09:29.780 --> 01:09:32.100
It's like a subscription that never expires.

01:09:32.100 --> 01:09:36.860
Whatever you're interested in, taking one of our courses or recommending one of our courses

01:09:36.860 --> 01:09:39.380
is the best way that you can support the podcast.

01:09:39.380 --> 01:09:40.300
Thank you.

01:09:40.300 --> 01:09:42.720
Be sure to subscribe to the show.

01:09:42.720 --> 01:09:45.600
Just open your favorite podcast app and search for Python.

01:09:45.600 --> 01:09:46.820
We should be right at the top.

01:09:46.820 --> 01:09:54.420
You can also find the iTunes feed at /itunes and the direct RSS feed at /rss on talkpython.fm.

01:09:54.420 --> 01:09:56.320
This is your host, Michael Kennedy.

01:09:56.320 --> 01:09:57.940
Thank you so much for listening.

01:09:57.940 --> 01:09:59.180
I really appreciate it.

01:09:59.180 --> 01:10:01.280
Now get out there and write some Python code.

01:10:01.280 --> 01:10:22.060
I'll see you next time.

