WEBVTT

00:00:00.001 --> 00:00:03.620
Python is one of the most popular languages of the current era.

00:00:03.620 --> 00:00:05.520
It dominates data science.

00:00:05.520 --> 00:00:08.080
It's an incredible choice for web development,

00:00:08.080 --> 00:00:10.520
and it's many people's first language.

00:00:10.520 --> 00:00:14.140
But it's not super great for front-end programming, is it?

00:00:14.140 --> 00:00:19.340
Frameworks like React, Vue, and other JavaScript frameworks rule the browsers,

00:00:19.340 --> 00:00:22.760
and few other languages even get a chance to play there.

00:00:22.760 --> 00:00:26.180
But with PyScript, which I've covered a couple times on this show,

00:00:26.180 --> 00:00:29.320
we have the possibility of Python on the front-end.

00:00:30.000 --> 00:00:32.800
Yet PyScript is not really a front-end framework.

00:00:32.800 --> 00:00:34.680
It's just a runtime in the browser.

00:00:34.680 --> 00:00:38.300
That's why I'm excited to have Ken Kinder on the podcast

00:00:38.300 --> 00:00:43.940
to talk about his project, PewPy, a reactive front-end framework in Python.

00:00:43.940 --> 00:00:50.180
This is Talk Python To Me, episode 469, recorded June 20th, 2024.

00:00:50.180 --> 00:00:53.020
Are you ready for your host, please?

00:00:53.020 --> 00:00:56.700
You're listening to Michael Kennedy on Talk Python To Me.

00:00:56.700 --> 00:00:59.240
Live from Portland, Oregon, and this segment

00:00:59.240 --> 00:01:00.460
was made with Python.

00:01:00.460 --> 00:01:07.120
Welcome to Talk Python To Me, a weekly podcast on Python.

00:01:07.120 --> 00:01:08.860
This is your host, Michael Kennedy.

00:01:08.860 --> 00:01:11.520
Follow me on Mastodon, where I'm @mkennedy,

00:01:11.520 --> 00:01:13.900
and follow the podcast using @talkpython,

00:01:13.900 --> 00:01:16.340
both on fosstodon.org.

00:01:16.340 --> 00:01:19.920
Keep up with the show and listen to over seven years of past episodes

00:01:19.920 --> 00:01:21.420
at talkpython.fm.

00:01:21.420 --> 00:01:25.160
We've started streaming most of our episodes live on YouTube.

00:01:25.660 --> 00:01:28.980
Subscribe to our YouTube channel over at talkpython.fm/youtube

00:01:28.980 --> 00:01:32.760
to get notified about upcoming shows and be part of that episode.

00:01:33.480 --> 00:01:35.320
This episode is brought to you by Sentry.

00:01:35.320 --> 00:01:37.100
Don't let those errors go unnoticed.

00:01:37.100 --> 00:01:38.960
Use Sentry like we do here at Talk Python.

00:01:38.960 --> 00:01:42.300
Sign up at talkpython.fm/sentry.

00:01:42.300 --> 00:01:46.380
And it's brought to you by Code Comments, an original podcast from Red Hat.

00:01:46.380 --> 00:01:51.300
This podcast covers stories from technologists who've been through tough tech transitions

00:01:51.300 --> 00:01:54.900
and share how their teams survived the journey.

00:01:54.900 --> 00:01:58.040
Episodes are available everywhere you listen to your podcasts

00:01:58.040 --> 00:02:01.320
and at talkpython.fm/code dash comments.

00:02:01.320 --> 00:02:04.800
Hey, before we talk about PewPy, I have an announcement.

00:02:04.800 --> 00:02:09.100
I'm sure that you know I have many online courses that you could take at Talk Python.

00:02:09.100 --> 00:02:12.540
But before I went down this online courses path,

00:02:12.540 --> 00:02:16.080
I did years of in-person courses for software developers.

00:02:16.480 --> 00:02:21.540
So it's back to these routes for my next event, but with a truly adventurous twist.

00:02:21.540 --> 00:02:26.700
I'll be doing a six half day course on all sorts of modern Python topics

00:02:26.700 --> 00:02:30.400
like FastAPI for building web apps and APIs.

00:02:30.400 --> 00:02:35.580
And the amazing part is that the course will be held in a castle in Tuscany, Italy.

00:02:35.580 --> 00:02:36.500
That's right.

00:02:36.500 --> 00:02:37.780
It's code in a castle.

00:02:37.780 --> 00:02:41.340
One half developer course and one half dream vacation.

00:02:41.340 --> 00:02:46.280
We'll spend the mornings learning Python and the afternoon on excursions to amazing venues

00:02:46.280 --> 00:02:47.080
and vineyards.

00:02:47.080 --> 00:02:50.300
Places are super limited and I'd love to have you join me.

00:02:50.300 --> 00:02:54.660
So check out talkpython.fm/castle and see what it's all about.

00:02:54.660 --> 00:02:58.000
I hope you can join me for an adventure in Italy this fall.

00:02:58.000 --> 00:03:00.600
Ken, welcome to Talk Python To Me.

00:03:00.600 --> 00:03:01.040
Right.

00:03:01.040 --> 00:03:01.880
Good to be here.

00:03:01.880 --> 00:03:03.140
Excellent to have you here.

00:03:03.140 --> 00:03:06.340
It's a topic that's near and dear to my heart.

00:03:06.340 --> 00:03:12.280
And I know for many people as well, building cool websites, but more Python, less JavaScript.

00:03:12.540 --> 00:03:16.620
Not hating on JavaScript, but why do we need to learn a sixth language to work on websites?

00:03:16.620 --> 00:03:19.600
There's already so many HTML, CSS, et cetera, et cetera.

00:03:19.600 --> 00:03:23.280
In the world, we should be able to pick the language we like and build websites with it.

00:03:23.280 --> 00:03:27.720
But somehow it's gotten itself into a place where you pick part of the language you like

00:03:27.720 --> 00:03:28.800
and then the rest you do in JavaScript.

00:03:29.340 --> 00:03:30.620
But we'll see how long that lasts.

00:03:30.620 --> 00:03:31.040
Yeah.

00:03:31.040 --> 00:03:35.260
Running Python in the browser has always kind of been a little dream of mine ever since

00:03:35.260 --> 00:03:38.000
I first, well, ever since I first started programming in JavaScript.

00:03:38.000 --> 00:03:39.440
But yeah, that's awesome.

00:03:39.440 --> 00:03:45.400
We had traditionally things like mscripten and some of those transpilers, right?

00:03:45.400 --> 00:03:47.600
Like Sculpt and others.

00:03:47.600 --> 00:03:49.880
Sculpt, transcript, Brython.

00:03:49.880 --> 00:03:51.260
Not Brython.

00:03:51.260 --> 00:03:53.120
Not transpiler, but transpiler.

00:03:53.120 --> 00:03:53.820
Brython.

00:03:54.960 --> 00:03:56.560
And it does the same thing as PyScript.

00:03:56.560 --> 00:04:01.180
It just runs the whole CPython in JavaScript, which is wild.

00:04:01.180 --> 00:04:03.400
Yeah, it's super wild.

00:04:03.400 --> 00:04:08.960
And I guess there's a requisite shout out to the birth and death of JavaScript talk, which

00:04:08.960 --> 00:04:10.240
gives you a really good insight.

00:04:10.240 --> 00:04:12.280
It seems like you've seen that talk as well.

00:04:12.280 --> 00:04:14.100
No, but I have heard about it.

00:04:14.160 --> 00:04:15.360
It's worth the 15 minutes.

00:04:15.360 --> 00:04:17.360
It's both funny, but also very insightful.

00:04:17.360 --> 00:04:18.000
All right.

00:04:18.000 --> 00:04:26.060
So we're going to talk about a front-end framework that you've built that is Vue.js-like, but

00:04:26.060 --> 00:04:28.960
runs on top of Python in the browser, which is awesome.

00:04:28.960 --> 00:04:29.760
On the client side.

00:04:29.760 --> 00:04:30.340
On the client side.

00:04:30.340 --> 00:04:30.740
Which is awesome.

00:04:30.740 --> 00:04:31.680
On the client side.

00:04:31.680 --> 00:04:32.280
Very important.

00:04:32.280 --> 00:04:34.000
Very, that's the big thing.

00:04:34.000 --> 00:04:36.640
Before we get to that, though, you know, just tell people a bit about yourself.

00:04:36.640 --> 00:04:37.320
Who's Ken?

00:04:38.020 --> 00:04:39.120
Yeah, my name's Ken Kender.

00:04:39.120 --> 00:04:45.700
I've been developing Python software for 24, 2025 years, something like that.

00:04:45.700 --> 00:04:51.480
Ever since Red Hat's installer crashed and I saw the stack trace and opened up a file and

00:04:51.480 --> 00:04:52.540
I could just read the code.

00:04:52.540 --> 00:04:55.720
That was my introduction to Python and I never looked back.

00:04:55.720 --> 00:05:01.620
Mostly I've been writing kind of line of business, software as a service kind of code, and I've

00:05:01.620 --> 00:05:05.060
always wanted to kind of short circuit and bring it to the browser.

00:05:05.060 --> 00:05:05.460
Yeah.

00:05:05.820 --> 00:05:08.660
What are you using now for the line of business stuff?

00:05:08.660 --> 00:05:13.160
Is that like Flask on the back end or is it Node on the back end or what are we talking

00:05:13.160 --> 00:05:13.420
here?

00:05:13.420 --> 00:05:19.480
At RealJob, it's all Python on the back end and then our front end is actually a Vue.js app

00:05:19.480 --> 00:05:25.460
that I wrote originally and then some professional front end developers kind of took it over and

00:05:25.460 --> 00:05:27.060
we wrote it.

00:05:27.060 --> 00:05:27.300
Yeah.

00:05:27.300 --> 00:05:28.220
Yeah, cool.

00:05:28.220 --> 00:05:29.980
Now it has eight compilation steps.

00:05:29.980 --> 00:05:30.660
Yes.

00:05:30.660 --> 00:05:31.540
To prepare itself.

00:05:32.400 --> 00:05:39.380
But I mean, it compiles into like semi-native apps for mobile and there's like a Chrome

00:05:39.380 --> 00:05:40.360
extension involved.

00:05:40.360 --> 00:05:40.840
So.

00:05:40.840 --> 00:05:41.520
Okay.

00:05:41.520 --> 00:05:42.940
You're doing a good job with it.

00:05:42.940 --> 00:05:43.540
Yeah, that's awesome.

00:05:43.540 --> 00:05:48.780
Look, there's a ton of websites built primarily with JavaScript and many of them are good,

00:05:48.780 --> 00:05:52.280
some are more bad, but there's also plenty of bad websites written in Python.

00:05:52.740 --> 00:05:57.760
But like I said, not hating on JavaScript so much as just saying, why does every programmer

00:05:57.760 --> 00:06:00.020
in language have to reduce to JavaScript?

00:06:00.020 --> 00:06:01.540
That seems like a weird situation.

00:06:01.540 --> 00:06:04.740
There's other frameworks that are making progress here.

00:06:04.740 --> 00:06:09.760
For example, Blazor in the .NET C# space is actually, I haven't done anything with it,

00:06:09.760 --> 00:06:12.140
but it's a super interesting idea and it's not that different.

00:06:12.140 --> 00:06:12.500
Yeah.

00:06:12.580 --> 00:06:13.600
Not the only crazy person.

00:06:13.600 --> 00:06:19.600
Blazor uses WebAssembly just like PyScript, which is what I built my stuff on top of.

00:06:19.600 --> 00:06:22.760
And WebAssembly is about what it sounds like.

00:06:22.760 --> 00:06:27.000
It's mature enough now that it's supported by all major modern browsers.

00:06:27.000 --> 00:06:34.020
And since there is no JavaScript layer, really, I mean, there's some kind of JavaScript shims

00:06:34.020 --> 00:06:34.680
involved.

00:06:34.680 --> 00:06:36.000
You want to think of it that way.

00:06:36.000 --> 00:06:39.880
But it's not like your Python code is being transpiled to JavaScript.

00:06:39.880 --> 00:06:41.440
It's actual Python.

00:06:41.440 --> 00:06:42.380
Right, right, right.

00:06:42.380 --> 00:06:43.260
And we're going to talk about that.

00:06:43.260 --> 00:06:43.980
It's super interesting.

00:06:43.980 --> 00:06:50.360
There's interop in the sense that there's kind of like there's C interop in Python now back

00:06:50.360 --> 00:06:52.460
into the JavaScript layer that you can have.

00:06:52.460 --> 00:06:55.460
But that's not the same as this other language is interpreting.

00:06:55.460 --> 00:06:57.280
It's running the interpreter, right?

00:06:57.280 --> 00:07:00.520
So it's kind of natively as much as you get in the front end, natively there.

00:07:00.520 --> 00:07:05.700
I kind of want to walk people through some of the technologies to get us started here.

00:07:05.700 --> 00:07:08.200
So you've already given a shout out to PyScript.

00:07:08.200 --> 00:07:09.560
We talked about Vue.

00:07:09.560 --> 00:07:11.500
I think PyScript is the foundation.

00:07:11.500 --> 00:07:13.140
Vue is maybe the motivation.

00:07:13.140 --> 00:07:14.520
Let's start with PyScript.

00:07:14.520 --> 00:07:16.260
Got their website pull up here.

00:07:16.260 --> 00:07:20.620
And what I'm learning is that I can have a REPL on my homepage.

00:07:20.620 --> 00:07:22.100
Actually, I know I can do more than that.

00:07:22.100 --> 00:07:24.100
But that's sort of what they're demonstrating right now.

00:07:24.320 --> 00:07:25.720
Yeah, you can do a lot more than that.

00:07:25.720 --> 00:07:27.760
You have kind of two choices with PyScript.

00:07:27.760 --> 00:07:35.400
You can run Pyodide, which is lower level, if you want to think of it that way, Python in the browser project.

00:07:35.820 --> 00:07:42.820
And that is basically full CPython with some minor changes necessary.

00:07:42.820 --> 00:07:45.360
But you get basically the whole standard library.

00:07:45.360 --> 00:07:51.100
You can install packages from PyPy or PyPI, however you pronounce it.

00:07:51.460 --> 00:07:54.660
And those download just as you download the website.

00:07:54.660 --> 00:08:00.040
That's probably your best bet if you just want it through Python experience.

00:08:00.040 --> 00:08:04.120
PyScript, though, also includes a MicroPython version.

00:08:04.860 --> 00:08:15.100
And the MicroPython, if you're not familiar with it, it's mostly designed for microcontrollers or Raspberry Pi kind of environments where you have very limited resources.

00:08:15.100 --> 00:08:22.060
Because it is so truncated relative to real Python, it downloads very nicely in the browser.

00:08:22.060 --> 00:08:29.280
It's actually it plus PyScript ends up being smaller than a lot of JavaScript front-end frameworks.

00:08:29.280 --> 00:08:30.620
Yeah, which is incredible.

00:08:30.620 --> 00:08:38.340
And this is a huge thing that is unlocked, honestly, kind of the stuff that you're pursuing a much bigger scale, I think.

00:08:38.340 --> 00:08:40.760
MicroPython is the name suggests.

00:08:40.760 --> 00:08:43.960
And I've had Damien and others on to talk about MicroPython.

00:08:43.960 --> 00:08:45.120
It's real micro.

00:08:45.120 --> 00:08:48.920
Like this, I'll hold up a little device here, like this thing in my hand.

00:08:48.920 --> 00:08:53.720
This little chip that is probably about the size of my thumb costs like 20 bucks.

00:08:53.720 --> 00:08:59.580
And this runs full MicroPython, manages the DNS of my network and stuff like that,

00:08:59.660 --> 00:09:02.180
like ad blockers and that little tiny thing.

00:09:02.180 --> 00:09:05.680
But the restriction is, you know, how much storage does it have?

00:09:05.680 --> 00:09:06.620
A couple of megs.

00:09:06.620 --> 00:09:08.200
How much RAM does it have?

00:09:08.200 --> 00:09:09.060
Probably similar.

00:09:09.060 --> 00:09:09.660
I don't know.

00:09:09.660 --> 00:09:19.760
The goal was to be a very small kernel of Python with MicroPython, not let you do Tkinter, pandas, etc., etc., etc.

00:09:20.000 --> 00:09:28.940
And so PyScript choosing to support both of these means you can kind of take Pyodide and get full Python, in a sense, as much as you can.

00:09:28.940 --> 00:09:35.640
Or you can do MicroPython and restrict yourself to a smaller set, but you get a much lighter weight experience, right?

00:09:35.640 --> 00:09:35.960
Yeah.

00:09:35.960 --> 00:09:49.840
If you've ever used transpiling, MicroPython is still a real big upgrade over that because you are getting almost all the Python syntax and most of the libraries that you're likely to use just rendering a website.

00:09:49.840 --> 00:09:50.260
Right.

00:09:50.640 --> 00:09:50.860
Okay.

00:09:50.860 --> 00:09:56.440
So a lot of the standard library is still there, but maybe things like networking or whatever that don't make sense.

00:09:56.440 --> 00:09:57.580
I wouldn't say a lot of it is.

00:09:57.580 --> 00:10:01.260
Like, a good example is the regular expression module is there.

00:10:01.340 --> 00:10:09.440
But when I first wrote the router for PewPy, the regular expressions that I was using weren't supported in the MicroPython version of that module.

00:10:09.440 --> 00:10:12.220
And there's a limited, a limited regular expression.

00:10:12.220 --> 00:10:14.040
You went too big on your regular expressions.

00:10:14.040 --> 00:10:14.720
I did, yeah.

00:10:14.720 --> 00:10:15.200
I see.

00:10:15.200 --> 00:10:15.700
Okay.

00:10:15.700 --> 00:10:16.380
Interesting.

00:10:16.380 --> 00:10:17.280
Yeah, we'll talk about routing.

00:10:17.280 --> 00:10:18.260
That'll be fun.

00:10:18.260 --> 00:10:18.820
Okay.

00:10:18.820 --> 00:10:31.460
So if somebody were to, which is why we're on the topic of these two, like if someone were to think about building a website, maybe internally for their company, would you suggest that they use Pyodide as the foundation or MicroPython?

00:10:31.460 --> 00:10:33.080
Because you can pick when you run PyScript.

00:10:33.080 --> 00:10:42.520
If it's for your company and it's an internal tool, probably most users downloading it are going to have plenty of bandwidth and normal machines.

00:10:42.520 --> 00:10:45.300
So there's really no reason not to use Pyodide.

00:10:45.300 --> 00:10:45.880
Yeah, sure.

00:10:45.880 --> 00:10:47.860
You get better errors with it.

00:10:48.220 --> 00:10:54.820
There's little things that'll just, you're used to coding, like data classes are missing from MicroPython, but you could use either.

00:10:54.820 --> 00:10:55.200
Okay.

00:10:55.200 --> 00:10:55.740
Yeah.

00:10:55.740 --> 00:10:58.820
Let's see if it, if it'll show us how big is this thing.

00:10:58.820 --> 00:11:00.900
It doesn't want to, I could just get this.

00:11:00.900 --> 00:11:02.060
It's a jQuery terminal.

00:11:02.060 --> 00:11:02.560
How about that?

00:11:02.560 --> 00:11:05.660
If I click on the link in Pyodide, very cool.

00:11:05.660 --> 00:11:08.040
But yeah, how big is maybe 10 megs?

00:11:08.040 --> 00:11:09.180
Is that, would you say that's right?

00:11:09.180 --> 00:11:14.680
Like I made a little example app for our purposes and I used Pyodide.

00:11:14.680 --> 00:11:18.180
Now I am pulling in SQLite, which is part of it.

00:11:18.180 --> 00:11:19.740
That adds some space.

00:11:19.740 --> 00:11:25.760
One of the benefits though of using Pyodide is you can just grab a lot of the libraries and they'll work, right?

00:11:25.760 --> 00:11:26.260
Yeah.

00:11:26.260 --> 00:11:33.780
I don't know if it's PyScript doing it or Pyodide upstream, but they do make you say that you need certain libraries.

00:11:33.780 --> 00:11:34.600
Sure.

00:11:34.780 --> 00:11:37.700
And then they're available for import after you kind of declare them.

00:11:37.700 --> 00:11:37.980
Right.

00:11:37.980 --> 00:11:43.880
And when you initially set up the PyScript environment, there's a way where you kind of set the environment as it loads, right?

00:11:43.880 --> 00:11:44.140
Yeah.

00:11:44.140 --> 00:11:44.420
Yeah.

00:11:44.420 --> 00:11:44.920
Okay.

00:11:44.920 --> 00:11:45.960
You can do it at runtime too.

00:11:45.960 --> 00:11:46.580
All right, cool.

00:11:46.580 --> 00:11:52.100
So we've got PyScript, which lets us do Python in the browser, which is awesome.

00:11:52.100 --> 00:11:54.540
And we've got these two foundations.

00:11:54.540 --> 00:11:59.280
We've got Pyodide, which is great for its compatibility, I guess.

00:11:59.280 --> 00:12:11.880
But PyScript, which if I was going to build a SaaS product where lots and lots of people were visiting kind of interactive bits, maybe you consider writing that in MicroPython because it's just less overhead for the world.

00:12:12.020 --> 00:12:12.480
I don't know.

00:12:12.480 --> 00:12:13.140
Depends.

00:12:13.140 --> 00:12:18.820
I would especially consider MicroPython for a page that loads as a normal web page.

00:12:18.820 --> 00:12:19.260
Yeah.

00:12:19.260 --> 00:12:20.020
If it loads.

00:12:20.020 --> 00:12:20.420
Yeah.

00:12:20.420 --> 00:12:22.080
If it's a landing page sort of thing.

00:12:22.080 --> 00:12:23.020
Yeah, absolutely.

00:12:23.020 --> 00:12:36.320
Or even just if it's like one of the CRUD pages, like let's say that you have a traditional sort of Django app or whatever, where you've done server side routing and you only want interactivity on the edit page.

00:12:36.320 --> 00:12:39.380
And for the view and the list, you're fine with normal templates.

00:12:39.800 --> 00:12:42.720
You could just use MicroPython where you need it then.

00:12:42.720 --> 00:12:49.800
But if you're building a single page app and you want everything downloaded up front, maybe that 10 megs is worth it.

00:12:49.800 --> 00:12:50.080
Yeah.

00:12:50.080 --> 00:12:50.480
Yeah.

00:12:50.480 --> 00:12:54.500
Perhaps because you can put aggressive caching on it, put it over a CDN.

00:12:54.500 --> 00:12:59.340
A lot of times when you pull it up, it'll say, you know, loaded from cache, things like that.

00:12:59.340 --> 00:12:59.540
Right.

00:12:59.540 --> 00:12:59.900
Yeah.

00:12:59.980 --> 00:13:03.420
Let's see if I can, on PyScript, let's see what happens here.

00:13:03.420 --> 00:13:05.340
If we go to the network and pull this in.

00:13:05.340 --> 00:13:05.840
Oh, look at that.

00:13:05.840 --> 00:13:07.000
They're using MicroPython there.

00:13:07.000 --> 00:13:09.880
But yeah, all this stuff is coming out of disk cache.

00:13:09.880 --> 00:13:11.260
Disk cache.

00:13:11.260 --> 00:13:13.200
Seven milliseconds to pull that up.

00:13:13.200 --> 00:13:13.360
Right.

00:13:13.620 --> 00:13:17.720
So another thing I just saw looking at the PyScript source there is that it had a service worker.

00:13:17.720 --> 00:13:21.860
And service workers kind of indicate maybe progressive web app, right?

00:13:21.860 --> 00:13:23.200
See if I click on this.

00:13:23.200 --> 00:13:26.420
But partially a progressive web app on PyScript.net.

00:13:26.840 --> 00:13:29.640
I know you're a fan of these and it might be an interesting way to deploy.

00:13:29.640 --> 00:13:32.100
You know, you talked about the internal apps, right?

00:13:32.100 --> 00:13:35.560
Instead of just putting links, maybe you install it as a progressive web app, right?

00:13:35.560 --> 00:13:35.920
Yeah.

00:13:35.920 --> 00:13:41.580
I haven't made a progressive web app in PyScript yet, but there's others who have done it.

00:13:41.580 --> 00:13:42.680
Yeah, I've done it.

00:13:42.680 --> 00:13:47.580
And I have an example up where I don't think it runs anymore because PyScript's changed so much.

00:13:47.580 --> 00:13:52.640
But I even got it to install as an app on the home screen of my iPad.

00:13:52.640 --> 00:13:54.020
You click it, it launches.

00:13:54.020 --> 00:13:56.000
It looks like a full-blown app.

00:13:56.340 --> 00:13:59.420
Nobody would know the difference, but it's PyScript based.

00:13:59.420 --> 00:14:00.060
Yeah.

00:14:00.060 --> 00:14:03.400
I'll try to link the video about that in the show notes.

00:14:03.400 --> 00:14:03.680
Yeah.

00:14:03.680 --> 00:14:08.960
If you're running a SaaS, that's a really compelling option because then you also skip out on the

00:14:08.960 --> 00:14:10.200
App Store review process.

00:14:10.200 --> 00:14:11.080
Oh my gosh.

00:14:11.080 --> 00:14:12.580
Forking over some of your brain.

00:14:12.580 --> 00:14:16.680
If people see, you got to carve off a piece of your soul to get through App Store review.

00:14:16.680 --> 00:14:19.440
It's not a fun, it's not a fun experience.

00:14:19.440 --> 00:14:24.560
Let me tell you, I've been through the ringer four or five times, mostly in the Apple App Store,

00:14:24.640 --> 00:14:28.140
but also in the Google App Store with our courses app and not fun.

00:14:28.220 --> 00:14:32.500
So progressive web app, letting you skip that, 100% behind that idea.

00:14:33.800 --> 00:14:37.140
This portion of Talk Python To Me is brought to you by Sentry.

00:14:37.380 --> 00:14:38.260
Code breaks.

00:14:38.260 --> 00:14:39.560
It's a fact of life.

00:14:39.560 --> 00:14:41.720
With Sentry, you can fix it faster.

00:14:41.720 --> 00:14:47.440
As I've told you all before, we use Sentry on many of our apps and APIs here at Talk Python.

00:14:47.440 --> 00:14:52.640
I recently used Sentry to help me track down one of the weirdest bugs I've run into in a long

00:14:52.640 --> 00:14:53.120
time.

00:14:53.120 --> 00:14:54.080
Here's what happened.

00:14:54.300 --> 00:15:00.100
When signing up for our mailing list, it would crash under a non-common execution pass, like

00:15:00.100 --> 00:15:05.360
situations where someone was already subscribed or entered an invalid email address or something

00:15:05.360 --> 00:15:05.840
like this.

00:15:05.840 --> 00:15:11.840
The bizarre part was that our logging of that unusual condition itself was crashing.

00:15:11.840 --> 00:15:15.040
How is it possible for our log to crash?

00:15:15.580 --> 00:15:17.620
It's basically a glorified print statement.

00:15:17.620 --> 00:15:19.320
Well, Sentry to the rescue.

00:15:19.320 --> 00:15:24.140
I'm looking at the crash report right now, and I see way more information than you'd expect

00:15:24.140 --> 00:15:25.780
to find in any log statement.

00:15:25.780 --> 00:15:28.820
And because it's production, debuggers are out of the question.

00:15:29.320 --> 00:15:35.480
I see the traceback, of course, but also the browser version, client OS, server OS, server

00:15:35.480 --> 00:15:40.720
OS version, whether it's production or Q&A, the email and name of the person signing up.

00:15:40.720 --> 00:15:42.760
That's the person who actually experienced the crash.

00:15:42.760 --> 00:15:45.600
Dictionaries of data on the call stack and so much more.

00:15:45.600 --> 00:15:46.540
What was the problem?

00:15:46.540 --> 00:15:53.440
I initialized the logger with the string info for the level rather than the enumeration dot

00:15:53.440 --> 00:15:56.220
info, which was an integer-based enum.

00:15:56.340 --> 00:16:01.180
So the logging statement would crash, saying that I could not use less than or equal to

00:16:01.180 --> 00:16:02.800
between strings and ints.

00:16:02.800 --> 00:16:04.200
Crazy town.

00:16:04.200 --> 00:16:10.040
But with Sentry, I captured it, fixed it, and I even helped the user who experienced that

00:16:10.040 --> 00:16:10.400
crash.

00:16:10.400 --> 00:16:11.840
Don't fly blind.

00:16:11.840 --> 00:16:13.520
Fix code faster with Sentry.

00:16:13.520 --> 00:16:17.540
Create your Sentry account now at talkpython.fm/sentry.

00:16:17.540 --> 00:16:24.060
And if you sign up with the code TALKPYTHON, all capital, no spaces, it's good for two free

00:16:24.060 --> 00:16:28.660
months of Sentry's business plan, which will give you up to 20 times as many monthly events

00:16:28.660 --> 00:16:29.880
as well as other features.

00:16:29.880 --> 00:16:33.360
That's PyScript, which is super awesome.

00:16:33.360 --> 00:16:36.740
But let me just make a comment here to get your thoughts about this.

00:16:36.740 --> 00:16:40.520
When I go to PyScript.net, I'm a big fan of this project, the people behind it.

00:16:40.520 --> 00:16:46.880
But when I get here, what it shows me and what it encourages, what it basically communicates

00:16:46.880 --> 00:16:52.600
to me, at least, is you, dear visitor, can have Python in your browser.

00:16:52.600 --> 00:16:55.660
And so, for example, here's your REPL.

00:16:55.660 --> 00:17:00.020
You know, you just type Python in the terminal, that thing that comes up, that redeveloped print

00:17:00.020 --> 00:17:00.160
loop.

00:17:00.160 --> 00:17:01.320
You just get the REPL.

00:17:01.360 --> 00:17:07.340
And now I can type, like I could do X equals seven, Y equals two, X plus Y is nine.

00:17:07.340 --> 00:17:08.040
Right?

00:17:08.040 --> 00:17:09.120
That's interesting.

00:17:09.120 --> 00:17:10.220
And it shows the power.

00:17:10.220 --> 00:17:14.100
But as a web developer, I don't want to develop a REPL.

00:17:14.100 --> 00:17:19.940
I want to develop web applications like input boxes and images and grids.

00:17:19.940 --> 00:17:21.820
And if I interact with this, it changes that.

00:17:21.820 --> 00:17:22.700
And so on.

00:17:22.700 --> 00:17:22.840
Right?

00:17:22.840 --> 00:17:29.600
Like I want a front-end UI experience with my Python in the browser, not just the equivalent

00:17:29.600 --> 00:17:31.480
of the console in JavaScript, you know?

00:17:31.480 --> 00:17:33.400
That's my desire, too.

00:17:33.400 --> 00:17:38.600
Something I really like about Vue, React does this, but I don't have as much React experience,

00:17:38.600 --> 00:17:48.540
is reactivity, where if the state of your page or your component changes, it redraws the UI

00:17:48.540 --> 00:17:55.720
and patches the DOM, the elements in the browser, in real time, where you don't need to think

00:17:55.720 --> 00:18:01.120
about, oh, let's say one state changed and that affects five widgets, so I need to go

00:18:01.120 --> 00:18:02.360
redraw those five widgets.

00:18:02.360 --> 00:18:04.380
It all just kind of happens automatically.

00:18:04.380 --> 00:18:07.880
And there's nothing like that built into PyScript itself.

00:18:07.880 --> 00:18:14.160
So PewPy kind of lives on top of PyScript and adds that layer and just other conveniences

00:18:14.160 --> 00:18:15.240
that I would want.

00:18:15.240 --> 00:18:16.000
Yeah, absolutely.

00:18:16.000 --> 00:18:18.440
And event handlers, right?

00:18:18.680 --> 00:18:19.360
As well.

00:18:19.360 --> 00:18:19.880
Yeah.

00:18:19.880 --> 00:18:22.060
So really a lot of neat stuff.

00:18:22.060 --> 00:18:23.520
And that is very nice about Vue.

00:18:23.520 --> 00:18:24.300
I like that as well.

00:18:24.300 --> 00:18:28.500
The data binding and the reactivity, where you can just say, here's a dictionary.

00:18:28.500 --> 00:18:33.660
I make changes to the values of that dictionary, that JSON object, and other parts of my UI

00:18:33.660 --> 00:18:34.280
are using it.

00:18:34.280 --> 00:18:36.060
Just also make those change.

00:18:36.060 --> 00:18:40.860
Or if I bound it to an input and somebody starts typing, propagate that back to the rest

00:18:40.860 --> 00:18:41.480
of the app, right?

00:18:41.480 --> 00:18:41.820
Right.

00:18:41.820 --> 00:18:43.820
And you've got reusable components.

00:18:43.820 --> 00:18:50.060
So if you make the perfect foreign key lookup widget, you can just reuse it all over your

00:18:50.060 --> 00:18:50.540
application.

00:18:50.540 --> 00:18:52.920
And reusing it is really easy.

00:18:52.920 --> 00:18:55.040
It just becomes a little HTML tag in view.

00:18:55.040 --> 00:18:57.440
Kind of like web components, if you've used those.

00:18:57.440 --> 00:18:59.160
But I think...

00:18:59.160 --> 00:19:00.760
Those didn't really catch on that well, did they?

00:19:00.760 --> 00:19:01.600
Compared to how...

00:19:01.600 --> 00:19:02.940
I think they should have caught on better, maybe.

00:19:02.940 --> 00:19:05.920
Oh, I think there's kind of a little movement behind them now.

00:19:05.920 --> 00:19:06.280
Okay.

00:19:06.280 --> 00:19:08.220
Maybe because people are so...

00:19:08.220 --> 00:19:15.060
I mean, not to come down on any projects, but I think there's a desire to have more stable

00:19:15.060 --> 00:19:16.280
development tools.

00:19:16.280 --> 00:19:20.520
And all the JavaScript stuff changes one day to the next.

00:19:20.520 --> 00:19:25.760
Like you go get a cup of coffee and then you need to upgrade all your node dependencies.

00:19:25.760 --> 00:19:31.140
So with web components, like you really only need to upgrade the components you use.

00:19:31.140 --> 00:19:35.420
And web components are how I see you using PewPy too.

00:19:35.420 --> 00:19:35.740
Okay.

00:19:35.740 --> 00:19:36.580
Very interesting.

00:19:36.580 --> 00:19:39.060
So that brings us to PewPy.

00:19:39.060 --> 00:19:44.360
The name is like Vue, but for Python, so Pew and then Py, right?

00:19:44.360 --> 00:19:45.740
Is that where the origin is?

00:19:45.740 --> 00:19:46.360
Am I getting this right?

00:19:46.360 --> 00:19:47.320
That is the origin.

00:19:47.320 --> 00:19:47.980
Awesome.

00:19:47.980 --> 00:19:48.540
Okay.

00:19:48.540 --> 00:19:53.660
So here I land on PewPy.dev and I see a red button with a minus and a green button with

00:19:53.660 --> 00:19:54.120
a plus.

00:19:54.120 --> 00:19:57.880
And I can just click on these and it does the reactivity and it does the changing.

00:19:57.880 --> 00:20:02.740
There's no navigation, but there's not really directly much JavaScript, is there?

00:20:02.740 --> 00:20:03.740
What is happening here?

00:20:03.740 --> 00:20:04.620
Tell us about this project.

00:20:04.620 --> 00:20:09.960
On your screen, if you have it pulled up, you'll see code directly below the counter.

00:20:09.960 --> 00:20:14.480
And that is the code that is running the site you're seeing with just a little bit of

00:20:14.480 --> 00:20:15.460
boilerplate that's missing.

00:20:15.460 --> 00:20:17.780
And it sounds very, yeah, just a tiny, tiny bit.

00:20:17.780 --> 00:20:21.760
It looks very familiar to a Vue.js app startup, right?

00:20:21.760 --> 00:20:22.920
How you would get that?

00:20:22.920 --> 00:20:23.180
Yeah.

00:20:23.180 --> 00:20:24.440
Especially Vue 2.

00:20:24.440 --> 00:20:31.400
I never upgraded to Vue 3 while I was working on Vue stuff before handing off my current

00:20:31.400 --> 00:20:31.800
project.

00:20:31.800 --> 00:20:36.420
You'll see that initial function defines state when the page loads.

00:20:36.420 --> 00:20:40.620
Populate defines the layout and DOM elements.

00:20:41.260 --> 00:20:44.120
And then there's two event handlers that update the state.

00:20:44.120 --> 00:20:46.640
And as the state updates, the DOM is updated.

00:20:46.860 --> 00:20:47.200
Yeah, awesome.

00:20:47.200 --> 00:20:52.860
And it looks, yeah, you combined functions, Python functions as the event handler.

00:20:52.860 --> 00:20:57.940
And you just say, go to the button and say onclick equals your Python function.

00:20:58.580 --> 00:21:04.160
And then in that function, you say state bracket current value from the dictionary.

00:21:04.160 --> 00:21:06.720
You can increment it like plus or minus it in this case.

00:21:06.720 --> 00:21:12.620
And that reactivity propagates back to the text box or the span in there that shows that

00:21:12.620 --> 00:21:13.180
information, right?

00:21:13.180 --> 00:21:16.680
That's kind of the full lifecycle in a pretty simple little bit of code.

00:21:16.840 --> 00:21:17.600
That's the snippet.

00:21:17.600 --> 00:21:19.060
That's the basic video.

00:21:19.060 --> 00:21:19.520
Yeah.

00:21:19.520 --> 00:21:22.800
Let's see about the old network here.

00:21:22.800 --> 00:21:23.640
What do we get?

00:21:23.640 --> 00:21:26.380
If I pull this up, a couple of things that I think are interesting.

00:21:26.380 --> 00:21:29.520
I pull up the network tools and I just pull up pewpie.dev.

00:21:29.520 --> 00:21:32.140
The whole page, I don't know how far away this is.

00:21:32.140 --> 00:21:32.980
Do you know where this is hosted?

00:21:32.980 --> 00:21:35.440
It's on GitHub pages, so I can't tell you.

00:21:35.440 --> 00:21:36.280
It's on the internet.

00:21:36.280 --> 00:21:36.940
Okay, awesome.

00:21:36.940 --> 00:21:37.820
All right.

00:21:37.820 --> 00:21:40.720
So it loads in, because I was thinking about, well, it's the ping time and stuff.

00:21:40.720 --> 00:21:47.700
So it loaded in 155 milliseconds and then it processed the DOM content in 144 milliseconds,

00:21:47.700 --> 00:21:49.280
which is, that's good.

00:21:49.280 --> 00:21:52.200
Like that's in a realm that people don't really perceive, right?

00:21:52.200 --> 00:21:52.960
Not really.

00:21:52.960 --> 00:21:59.020
And it looks like you're doing MicroPython here, which is, how big is our MicroPython?

00:21:59.020 --> 00:22:01.700
It is 1.6 megs.

00:22:01.700 --> 00:22:02.460
No, no, that's the age.

00:22:02.460 --> 00:22:02.760
Sorry.

00:22:02.760 --> 00:22:04.120
Where's the content length?

00:22:04.120 --> 00:22:04.560
There it is.

00:22:04.560 --> 00:22:05.980
188k.

00:22:05.980 --> 00:22:07.480
189k.

00:22:07.480 --> 00:22:08.300
That's pretty good.

00:22:08.460 --> 00:22:12.440
There's some stuff that was downloaded that you'll also see over there, like, you know,

00:22:12.440 --> 00:22:13.660
the PewPy wheel.

00:22:13.660 --> 00:22:14.520
Yeah, sure.

00:22:14.520 --> 00:22:15.660
The entering the file.

00:22:15.660 --> 00:22:17.980
I mean, hold on to what you just said there.

00:22:17.980 --> 00:22:20.920
The PewPy wheel was downloaded, okay?

00:22:20.920 --> 00:22:22.420
So talk about that.

00:22:22.420 --> 00:22:24.660
Like, this is not even the source, right?

00:22:24.660 --> 00:22:26.420
This is the distribution.

00:22:26.420 --> 00:22:28.820
I mean, I'm probably in there, it has the source, but.

00:22:28.820 --> 00:22:29.120
Yeah.

00:22:29.120 --> 00:22:32.220
I mean, a wheel file is just a zip file of the source.

00:22:32.220 --> 00:22:32.860
Yeah.

00:22:32.860 --> 00:22:36.380
It could have binary goodies in there as well, I suppose.

00:22:36.380 --> 00:22:37.700
But this one's platform neutral.

00:22:37.700 --> 00:22:38.620
So it's not likely.

00:22:38.620 --> 00:22:43.440
But this is basically like taking something off PyPI and pip installing it.

00:22:43.440 --> 00:22:47.500
But for your website, for your front end, you basically pip install it for it, right?

00:22:47.500 --> 00:22:47.840
Yeah.

00:22:47.840 --> 00:22:50.500
I would like to have it work that way.

00:22:50.500 --> 00:22:53.160
But for MicroPython, you don't get the full pip.

00:22:53.160 --> 00:22:54.560
Right, right, right.

00:22:54.560 --> 00:22:57.320
MicroPython has a funky way of working with its dependencies.

00:22:57.320 --> 00:23:01.520
I don't remember exactly how I got it working with this little thing, but it has three or

00:23:01.520 --> 00:23:05.360
four dependencies, my little, my 32-bit little chip thing.

00:23:05.520 --> 00:23:09.420
But I do remember that it was like, my intuition around pip wasn't quite working.

00:23:09.420 --> 00:23:14.980
If you said, if you went to somebody, so we have an interactive web page and it's 189k,

00:23:14.980 --> 00:23:16.520
plus a little bit, that's fine.

00:23:16.520 --> 00:23:17.140
Right?

00:23:17.140 --> 00:23:20.900
On a CDN, no one's going to have a problem with that amount of data.

00:23:20.900 --> 00:23:21.220
Yeah.

00:23:21.220 --> 00:23:21.700
I mean that.

00:23:21.820 --> 00:23:22.580
Oh, and the other thing.

00:23:22.580 --> 00:23:26.980
Absolutely competes with what a typical JavaScript framework would require.

00:23:26.980 --> 00:23:27.380
Yeah.

00:23:27.380 --> 00:23:35.820
And the other thing worth noting here is PewPy, its wheel comes from disk cache as well as

00:23:35.820 --> 00:23:37.600
MicroPython WebAssembly.

00:23:37.600 --> 00:23:43.440
So once I hit this, like for example, now looking at the processing times, it's 62 milliseconds

00:23:43.440 --> 00:23:44.520
and 50 milliseconds.

00:23:44.520 --> 00:23:45.280
All right.

00:23:45.280 --> 00:23:45.920
That's ridiculous.

00:23:45.920 --> 00:23:46.520
That's awesome.

00:23:46.520 --> 00:23:48.020
So yeah, really good.

00:23:48.300 --> 00:23:52.500
I don't know how fast your computer is, but I haven't been bothered by any of the performance

00:23:52.500 --> 00:23:54.300
I've seen from PyScript.

00:23:54.300 --> 00:23:55.840
Yeah, no, it's super fast.

00:23:55.840 --> 00:23:59.620
So it's down to a point where, you know, there had been, there had been statements like, well,

00:23:59.620 --> 00:24:04.260
it'd be cool if you could use something like Pyodide, but it's, it's just so slow.

00:24:04.360 --> 00:24:08.060
It takes five seconds for the page to come up or whatever on the early days.

00:24:08.060 --> 00:24:11.700
And you can't really assume that that's acceptable to people.

00:24:11.700 --> 00:24:15.240
150 milliseconds, 60 milliseconds here and there.

00:24:15.240 --> 00:24:17.220
Like that's blink of an eye type stuff.

00:24:17.220 --> 00:24:18.560
You're, you're good to go with that, right?

00:24:18.560 --> 00:24:18.900
Yeah.

00:24:18.900 --> 00:24:25.440
I probably wouldn't use it for like a WebGL kind of stuff or anything that needs to be super

00:24:25.440 --> 00:24:28.780
performant, but most business software is just fine with these.

00:24:28.920 --> 00:24:34.660
And even, you know, like that is a runtime performance versus a app initialization performance

00:24:34.660 --> 00:24:36.160
conversation, isn't it?

00:24:36.160 --> 00:24:36.660
Yeah.

00:24:36.660 --> 00:24:38.400
So let's talk a bit about that.

00:24:38.400 --> 00:24:39.380
What is this good for?

00:24:39.380 --> 00:24:40.460
And what is it bad for?

00:24:40.460 --> 00:24:46.760
It's most good for, especially with, with MicroPython, those kinds of use cases where you have

00:24:46.760 --> 00:24:53.160
business logic that is presentation relevant, like, like you have a form and what is shown

00:24:53.160 --> 00:24:55.560
on the form depends on what's already entered.

00:24:55.560 --> 00:24:59.260
You know, that's, that's the kind of stuff you would have done with jQuery back in the

00:24:59.260 --> 00:24:59.500
day.

00:24:59.500 --> 00:25:01.680
And you could do it very easily with PewPy.

00:25:01.680 --> 00:25:04.500
You could do kind of basic CRUD work.

00:25:04.500 --> 00:25:05.880
You could do data visualization.

00:25:05.880 --> 00:25:11.560
And also just anytime that you want a full Python environment in the browser, obviously it's a

00:25:11.560 --> 00:25:12.100
good choice.

00:25:12.100 --> 00:25:19.280
It's probably not a great choice if you don't already know and love Python, because if you're

00:25:19.280 --> 00:25:22.920
a JavaScript developer, why would you lose all the tooling?

00:25:22.920 --> 00:25:28.760
If for that matter, if you like a lot of tooling, you know, there's no Chrome debugger for PyScript.

00:25:28.760 --> 00:25:30.420
You just get your trace back.

00:25:30.420 --> 00:25:31.540
You're not going to do it wrong.

00:25:31.540 --> 00:25:32.220
Can you print?

00:25:32.220 --> 00:25:33.280
Can you print a console?

00:25:33.280 --> 00:25:34.000
You can print.

00:25:34.000 --> 00:25:36.560
And normal Python statements go to console.

00:25:36.560 --> 00:25:37.440
That's what you get.

00:25:37.440 --> 00:25:39.000
You're good.

00:25:39.000 --> 00:25:42.440
You know, you honestly, though, you probably could bring in some of these libraries.

00:25:42.440 --> 00:25:43.740
Gosh, I can't remember.

00:25:43.740 --> 00:25:48.260
There's a couple that are really nice that you can bring in and change the print statement,

00:25:48.260 --> 00:25:52.320
or they'll do much richer output of like the state of an object.

00:25:52.320 --> 00:25:55.020
They'll traverse the graph or they'll give better information about it.

00:25:55.020 --> 00:25:59.200
So you might be able to get those print statements a little bit supercharged, but they're still

00:25:59.200 --> 00:25:59.920
print statements, right?

00:25:59.920 --> 00:26:00.100
Yeah.

00:26:00.100 --> 00:26:06.740
I mean, hopefully one day you can run like a remote debugger into PyCharm or something too.

00:26:06.740 --> 00:26:07.380
But yeah.

00:26:07.380 --> 00:26:08.320
That would be cool.

00:26:08.320 --> 00:26:11.020
We'll get the PyCharm folks on that and just connect to the front.

00:26:11.020 --> 00:26:12.200
Look, they do a JavaScript.

00:26:12.500 --> 00:26:12.720
Yeah.

00:26:12.720 --> 00:26:13.120
Right.

00:26:13.120 --> 00:26:13.420
So.

00:26:13.420 --> 00:26:17.200
And also, you know, PyCharm supports remote debugging.

00:26:17.200 --> 00:26:18.020
So.

00:26:18.020 --> 00:26:19.760
Let's put them together.

00:26:19.760 --> 00:26:20.500
Yeah.

00:26:20.500 --> 00:26:21.160
All right.

00:26:21.160 --> 00:26:27.220
So one of the things that does jump out at me when I see this here is the populate method.

00:26:27.220 --> 00:26:31.960
So the way you create this interactive app that has the plus or minus increment or decrement

00:26:31.960 --> 00:26:36.460
or things is you create a class called counter page, derives from page.

00:26:36.460 --> 00:26:42.280
When it initializes itself, it has, it sets sort of the variables to their default values

00:26:42.280 --> 00:26:42.960
and creates them.

00:26:42.960 --> 00:26:45.360
You know, increment can change them, decrement can change them.

00:26:45.360 --> 00:26:51.620
But then there's this populate method that says with some kind of DOM mill, like with div

00:26:51.620 --> 00:26:56.500
with this class, with e.button as this text and its event hooks this.

00:26:56.500 --> 00:27:03.180
So you're expressing the UI of that little section, not the whole page, but that little section

00:27:03.180 --> 00:27:04.480
in Python code.

00:27:04.480 --> 00:27:05.860
Want to tell us about how that goes?

00:27:05.860 --> 00:27:06.180
Yeah.

00:27:06.180 --> 00:27:11.660
So the kind of two approaches that you can have toward building a DOM, building not even

00:27:11.660 --> 00:27:17.680
a DOM, but just any UI is like a templated language, which is usually real popular on the web.

00:27:17.680 --> 00:27:24.360
And I have experimented with embedding Genja to templates and it works sort of iodide.

00:27:24.360 --> 00:27:33.020
What I decided on is my preferred method is using context managers to specify nesting.

00:27:33.580 --> 00:27:39.260
So in the example you're looking at, there's a div tag and then there's two buttons and

00:27:39.260 --> 00:27:41.480
a span and they're nested in the div tag.

00:27:41.480 --> 00:27:50.160
And the context manager tells the UI.

00:27:50.160 --> 00:27:55.940
So every time you want to nest more elements, you use another with statement.

00:27:55.940 --> 00:28:02.240
And that way you can use if statements, for loops, just normal Python code.

00:28:02.240 --> 00:28:07.120
And the deeper you're into your context managers, the more nested you are.

00:28:07.920 --> 00:28:11.980
So in this case, you say with div and then you create a button, a span and a button.

00:28:11.980 --> 00:28:16.920
Basically, anything that gets created while within that context manager just goes to the children

00:28:16.920 --> 00:28:19.220
of the thing that was put into the context, right?

00:28:19.220 --> 00:28:19.540
Right.

00:28:19.540 --> 00:28:19.940
Exactly.

00:28:19.940 --> 00:28:25.720
And for that matter, you could also nest more PuePy components using that same.

00:28:25.720 --> 00:28:26.060
Oh, interesting.

00:28:26.060 --> 00:28:26.660
Okay.

00:28:27.020 --> 00:28:29.340
And what does a PuePy component look like?

00:28:29.340 --> 00:28:34.460
Is it just a class or is there like, how do we make one of the, or is it just a function

00:28:34.460 --> 00:28:36.640
that also does context manager stuff?

00:28:36.640 --> 00:28:37.180
What's the deal?

00:28:37.180 --> 00:28:41.880
I do have some examples of them, but yeah, a component, a page is a component.

00:28:41.880 --> 00:28:49.300
A component is any reusable chunk of code with that state and population that you can use and

00:28:49.300 --> 00:28:50.640
reuse throughout your application.

00:28:51.640 --> 00:28:56.680
This portion of Talk Python To Me is brought to you by Code Comments, an original podcast

00:28:56.680 --> 00:28:57.400
from Red Hat.

00:28:57.400 --> 00:29:01.880
You know, when you're working on a project and you leave behind a small comment in the

00:29:01.880 --> 00:29:05.940
code, maybe you're hoping to help others learn what isn't clear at first.

00:29:05.940 --> 00:29:11.400
Sometimes that Code Comment tells a story of a challenging journey to the current state of

00:29:11.400 --> 00:29:11.880
the project.

00:29:11.880 --> 00:29:18.360
Code Comments, the podcast, features technologists who've been through tough tech transitions and

00:29:18.360 --> 00:29:20.520
they share how their teams survived that journey.

00:29:20.960 --> 00:29:24.900
The host, Jamie Parker, is a Red Hatter and an experienced engineer.

00:29:24.900 --> 00:29:30.420
In each episode, Jamie recounts the stories of technologists from across the industry who've

00:29:30.420 --> 00:29:33.120
been on a journey implementing new technologies.

00:29:33.120 --> 00:29:37.660
I recently listened to an episode about DevOps from the folks at Worldwide Technology.

00:29:37.660 --> 00:29:43.240
The hardest challenge turned out to be getting buy-in on the new tech stack rather than using

00:29:43.240 --> 00:29:44.440
that tech stack directly.

00:29:44.440 --> 00:29:49.320
It's a message that we can all relate to, and I'm sure you can take some hard-won lessons

00:29:49.320 --> 00:29:50.420
back to your own team.

00:29:50.780 --> 00:29:52.300
Give Code Comments a listen.

00:29:52.300 --> 00:29:58.660
Search for Code Comments in your podcast player or just use our link, talkpython.fm/code

00:29:58.660 --> 00:29:59.660
dash comments.

00:29:59.660 --> 00:30:02.200
The link is in your podcast player's show notes.

00:30:02.200 --> 00:30:05.880
Thank you to Code Comments and Red Hat for supporting Talk Python To Me.

00:30:07.720 --> 00:30:09.280
See if I can find some examples.

00:30:09.280 --> 00:30:14.360
You also can run those examples on PyScript.com, right in your browser.

00:30:14.360 --> 00:30:15.660
Oh, that's right.

00:30:15.660 --> 00:30:16.040
Yeah.

00:30:16.440 --> 00:30:19.280
So, yeah, maybe tell people just about that capability.

00:30:19.280 --> 00:30:21.360
I'll link to the tutorials there.

00:30:21.360 --> 00:30:28.500
Yeah, I mean, PyScript.com is a really cool project, also from Anaconda, I believe, where it's kind

00:30:28.500 --> 00:30:32.440
of like all those million JavaScript IDEs in your browser.

00:30:32.440 --> 00:30:37.020
IDEs may be a strong word, but you can edit the code and then run it right in your browser.

00:30:37.020 --> 00:30:40.740
And just like you can see, there's the list of files.

00:30:40.740 --> 00:30:41.820
You can edit the files.

00:30:41.960 --> 00:30:45.160
You can fork other people's work and edit them.

00:30:45.160 --> 00:30:46.360
It's very convenient.

00:30:46.360 --> 00:30:46.800
Nice.

00:30:46.800 --> 00:30:47.080
Yeah.

00:30:47.080 --> 00:30:51.040
So here you have a component defined with the decorator, called it a card.

00:30:51.040 --> 00:30:53.680
And you've got three little UI cards on there.

00:30:53.680 --> 00:30:56.420
And they have their populate thing that I guess you would expect.

00:30:56.420 --> 00:30:56.640
Yeah.

00:30:56.640 --> 00:30:57.000
Yeah.

00:30:57.000 --> 00:31:01.260
And then you can just now create the cards as if you'd create any other DOM element, right?

00:31:01.260 --> 00:31:01.600
Right.

00:31:01.600 --> 00:31:01.920
Exactly.

00:31:01.920 --> 00:31:06.280
And you're also seeing slots where there's a card header in the card body.

00:31:06.680 --> 00:31:13.580
And so if you have a component where there's multiple, in Genja, these would be like template

00:31:13.580 --> 00:31:14.000
inheritance.

00:31:14.000 --> 00:31:20.600
If you have a component where you want to insert code from wherever you're using the component

00:31:20.600 --> 00:31:23.460
into where the component renders, that's what slots do.

00:31:23.460 --> 00:31:26.360
Again, a lot like Vue or Web Component.

00:31:26.360 --> 00:31:31.160
So it sounds to me like if I had lots of Vue experience, but at one point I created some apps

00:31:31.160 --> 00:31:32.700
with Vue, but it's been a while.

00:31:32.700 --> 00:31:34.620
I'm sure the Vue doesn't look much like that anymore.

00:31:34.620 --> 00:31:35.100
Yeah.

00:31:35.260 --> 00:31:36.360
It changed a lot.

00:31:36.360 --> 00:31:37.320
Yeah.

00:31:37.320 --> 00:31:40.120
But if you had that experience, it would carry over to Pupy pretty well, right?

00:31:40.120 --> 00:31:40.500
Yeah.

00:31:40.500 --> 00:31:43.100
I would hope you wouldn't need that experience either, but yeah.

00:31:43.100 --> 00:31:43.440
Sure.

00:31:43.440 --> 00:31:43.860
Yeah.

00:31:43.860 --> 00:31:48.240
You could just learn it from the Pupy perspective, but if you already knew it, like, hey, that's

00:31:48.240 --> 00:31:48.940
kind of nice, right?

00:31:48.940 --> 00:31:49.280
Yeah.

00:31:49.280 --> 00:31:53.940
If you know React or Web Components, that also would probably carry over.

00:31:53.940 --> 00:31:54.320
Sure.

00:31:54.320 --> 00:31:54.600
Sure.

00:31:54.600 --> 00:31:54.780
Sure.

00:31:54.780 --> 00:31:55.360
Okay.

00:31:55.360 --> 00:32:01.500
So one of the things that you talked about was a single page app, and I'm sure there's plenty

00:32:01.500 --> 00:32:05.160
of people out there who know what a single page app is or a spa, but there's

00:32:05.160 --> 00:32:09.940
probably a lot of people who are, I mean, from not a web developer areas that are like,

00:32:09.940 --> 00:32:10.780
what is that again?

00:32:10.780 --> 00:32:14.160
I want to talk about the router, but I think we need to talk about a single page app before

00:32:14.160 --> 00:32:15.000
we can talk routers.

00:32:15.000 --> 00:32:15.680
All right.

00:32:15.680 --> 00:32:16.080
What is this?

00:32:16.300 --> 00:32:17.360
You need a router to do it.

00:32:17.360 --> 00:32:23.500
But a single page app is instead of having that request response cycle where the server

00:32:23.500 --> 00:32:28.840
renders HTML, and then you go to a new page and the server renders the new HTML, and then

00:32:28.840 --> 00:32:31.420
you go to another page and the server renders that.

00:32:31.420 --> 00:32:46.100
A single page app works where it loads the page, and then when you click on a button or click on a link, the software in the client in your browser re-renders the page based on the link you clicked without ever talking to the server.

00:32:46.100 --> 00:32:53.200
Or if it does talk to the server, it's just kind of an API call to figure out what data it wants to render on the page.

00:32:53.200 --> 00:32:56.740
But the page itself and the structure is not done through server calls.

00:32:56.740 --> 00:32:59.480
It's not done through redrawing the page or navigating.

00:32:59.480 --> 00:33:05.820
Even though sometimes you'll see the URL change, it might not actually go anywhere, right?

00:33:05.820 --> 00:33:12.580
That might just be something so you kind of know where it is, so you can bookmark and deep link into it, but it doesn't actually make the browser go, right?

00:33:12.700 --> 00:33:13.980
Yeah, that's the gist.

00:33:13.980 --> 00:33:24.640
I mean, one telltale sign of kind of an older SPA is if all the URLs, like if it's index.html or something, but then the meat of the URL is after the hash.

00:33:24.640 --> 00:33:31.420
So it's, you know, example.com slash and then a hash, and then the hash tells you everything about the URL.

00:33:31.420 --> 00:33:31.880
Right.

00:33:31.880 --> 00:33:36.640
That's a telltale sign that it's an SPA, an older one that used for that.

00:33:36.640 --> 00:33:36.920
Okay.

00:33:36.920 --> 00:33:40.880
Because then the client is looking at what's after the hash and deciding what it wants to render.

00:33:41.260 --> 00:33:43.380
And by client, I mean the website.

00:33:43.380 --> 00:33:48.180
View or PuePy or whatever the front-end framework is, is figuring that out.

00:33:48.180 --> 00:34:02.680
So in order to do that, in order to make these faux URLs or whatever you call them, actually kind of take you from place to place and navigate and redraw the page, you need something like the URL structure that would be built in Django or Flask or other things.

00:34:02.680 --> 00:34:04.360
And that's called a router, right?

00:34:04.360 --> 00:34:04.700
Right.

00:34:04.700 --> 00:34:06.160
And you guys have a router, right?

00:34:06.160 --> 00:34:07.180
So that's pretty awesome.

00:34:07.180 --> 00:34:07.900
There is a router.

00:34:08.140 --> 00:34:12.200
It's not as powerful as one in Flask or Django, but it gets the job done.

00:34:12.200 --> 00:34:13.040
Mm-hmm.

00:34:13.040 --> 00:34:13.620
Okay.

00:34:13.620 --> 00:34:14.680
Let's see.

00:34:14.680 --> 00:34:15.640
Here we go.

00:34:15.640 --> 00:34:15.880
Router.

00:34:15.880 --> 00:34:18.480
There's a bunch of really nice tutorial walkthrough.

00:34:18.480 --> 00:34:23.620
I went through most of these up to basically here, more or less, earlier today.

00:34:24.100 --> 00:34:28.060
And yeah, tell us about how you set up this router and how this works.

00:34:28.060 --> 00:34:29.320
You have a link component.

00:34:29.320 --> 00:34:31.440
That's probably not real interesting.

00:34:31.440 --> 00:34:35.700
But if you scroll down, when you define pages, there it is.

00:34:35.700 --> 00:34:37.080
App.page is a decorator.

00:34:37.420 --> 00:34:40.780
That's how you're telling PuePy that you've made a page.

00:34:40.780 --> 00:34:44.200
And the default page is the one that renders if there is no route.

00:34:44.200 --> 00:34:50.840
But you'll also see above it, pet page, where just like with Flask, the URL is in the decorator.

00:34:50.840 --> 00:34:55.880
So it's saying if you go to pet and then there's a pet ID, use that class to render the page.

00:34:55.880 --> 00:35:00.720
And I can put that whole URL without the hash in there and it'll find it.

00:35:00.720 --> 00:35:08.660
So I could just say my server slash pet slash dog or whatever the thing's ID is, then it'll invoke the router instead of the browser?

00:35:08.660 --> 00:35:10.440
Well, there's two routing options.

00:35:10.440 --> 00:35:11.920
One is that hash I mentioned.

00:35:11.920 --> 00:35:18.120
And that's easiest to set up because you don't then require any changes on the server.

00:35:18.120 --> 00:35:24.340
If you have a server you want, like if you have a Django project, let's say, and you want a single page app,

00:35:24.340 --> 00:35:32.760
how that has to work is whenever the browser opens a URL, Django, if it's a URL for the single page app,

00:35:32.760 --> 00:35:37.320
needs to return the single page app and not try to process the URL on server side.

00:35:37.320 --> 00:35:39.640
So there's some tricks to doing that.

00:35:39.640 --> 00:35:43.180
I think there's actually a couple Django packages now that do that.

00:35:43.180 --> 00:35:45.620
But you're essentially just putting a wild card up.

00:35:45.620 --> 00:35:54.320
So maybe example.com slash app and then anything after that URL renders the exact same page as if it were indexed on HTML.

00:35:54.320 --> 00:35:54.840
I see.

00:35:54.840 --> 00:35:58.020
Which would you recommend, the hash or the server hack?

00:35:58.020 --> 00:36:01.540
Well, the hash doesn't require any server hack, so that's convenient.

00:36:01.540 --> 00:36:05.760
But yeah, it probably doesn't require any server communications either, right?

00:36:05.760 --> 00:36:07.120
No, it doesn't require you.

00:36:07.120 --> 00:36:07.820
Not directly.

00:36:07.820 --> 00:36:12.720
I mean, you can just have a static HTML website that works fine doing that.

00:36:12.960 --> 00:36:18.560
If you want cleaner URLs, you want to use what's called HTML5 history mode.

00:36:18.560 --> 00:36:24.740
And that's where there's an API you can hook into on the browser and navigate around.

00:36:24.740 --> 00:36:32.120
And it'll look exactly like a normal website where you're changing the URL, but the page isn't actually reloading.

00:36:32.120 --> 00:36:37.960
Then when you reload, you need that server hack to make sure it always serves the same page.

00:36:38.260 --> 00:36:38.400
Got it.

00:36:38.400 --> 00:36:43.180
So in effect, that would be what's sometimes called deep linking, right?

00:36:43.180 --> 00:36:47.260
Where it doesn't just load up the front page of the spa and you click around and get back.

00:36:47.260 --> 00:36:55.380
But if you were on this page with these details and that's contained in the URL, you could bookmark it and come back and it should come back to that setup, right?

00:36:55.380 --> 00:36:55.740
Yeah.

00:36:55.740 --> 00:36:58.340
I mean, you have to test that to make sure you did it right.

00:36:58.340 --> 00:36:59.640
Yeah, of course.

00:37:00.300 --> 00:37:03.260
You browse around the site and it all seems fine.

00:37:03.260 --> 00:37:09.940
And then you come back and reload later and you get a 404 because you haven't configured your server to always go to the spa.

00:37:09.940 --> 00:37:10.460
Okay.

00:37:10.460 --> 00:37:11.200
Interesting.

00:37:11.680 --> 00:37:19.100
What about working with external data and from the front end, that usually means APIs, something like that, right?

00:37:19.100 --> 00:37:28.820
Can I use some of our standard code that we would for HTTPX or requests or things along those lines to call out?

00:37:28.820 --> 00:37:30.780
Or how do I call out from this?

00:37:30.920 --> 00:37:38.560
Networking is where it gets a little messy because the browser doesn't let you just have untrammeled access to open whatever sockets you want.

00:37:38.560 --> 00:37:42.080
You have to work within either web sockets or requests.

00:37:42.080 --> 00:37:46.860
And the best way to do that is using PyScript's fetch function.

00:37:46.860 --> 00:37:53.920
That wraps the browser fetch, which is the new XML HTTP request.

00:37:53.920 --> 00:37:59.780
Guys, so basically you kind of do an AJAX thing in the browser and then pick it back up from there.

00:38:00.080 --> 00:38:05.260
Maybe you get some JSON back, but then you could maybe use the JSON module to process it or...

00:38:05.260 --> 00:38:08.620
AJAX or web sockets are basically your choices.

00:38:08.620 --> 00:38:09.100
Okay.

00:38:09.100 --> 00:38:14.920
In the PyPI library example, you have beautiful soup 4 for parsing data.

00:38:14.920 --> 00:38:18.900
The example that you run, you can run it and it'll show you...

00:38:18.900 --> 00:38:20.380
Actually, that's a pretty interesting example.

00:38:20.380 --> 00:38:22.940
Maybe it's worth giving a shout out to is...

00:38:22.940 --> 00:38:29.060
I think it's this one perhaps is to go and refresh your thing.

00:38:29.320 --> 00:38:34.500
It will actually go and you can give it some part of HTML, some HTML.

00:38:34.500 --> 00:38:35.900
Like, I don't know.

00:38:35.900 --> 00:38:36.500
I'll just make up some...

00:38:36.500 --> 00:38:38.120
See how forgiving this is.

00:38:38.120 --> 00:38:41.880
So you give it any HTML, some basic page data that you have.

00:38:41.880 --> 00:38:45.760
And in here, when you run this, it'll use beautiful soup to parse it.

00:38:45.760 --> 00:38:51.440
And then the output at the bottom is that populate thing.

00:38:51.560 --> 00:39:01.120
So it'll basically recreate that DOM structure, take an HTML file or HTML content and convert it to the component style of PewPy, right?

00:39:01.120 --> 00:39:01.680
Yeah.

00:39:01.680 --> 00:39:10.040
I kind of made that as a utility because I might go have some HTML that I really want to render that is going to be part of my web app.

00:39:10.180 --> 00:39:19.780
And rather than going line by line and trying to figure out how to generate that programmatically in Python, you can paste it into here and get your Python back.

00:39:19.780 --> 00:39:21.100
Does it even do classes?

00:39:21.100 --> 00:39:21.660
Yeah.

00:39:21.800 --> 00:39:24.260
So it knows all about the attributes.

00:39:24.260 --> 00:39:24.980
Yeah, it sure does.

00:39:24.980 --> 00:39:25.620
That's pretty awesome.

00:39:25.620 --> 00:39:33.720
So maybe you could do something like write out an important chunk of HTML with all the tooling of PyCharm or VS Code or whatever.

00:39:33.720 --> 00:39:34.860
Copy, paste.

00:39:35.120 --> 00:39:36.320
And then get it here, right?

00:39:36.320 --> 00:39:40.820
Is that like an accelerated way to generate the first bit of structure and then just tweak it from here?

00:39:40.820 --> 00:39:50.000
Maybe you don't like writing HTML or don't know how to and you ask ChatGPT to write some for you and then you copy and paste it into here and see how it works.

00:39:50.000 --> 00:39:52.720
Yeah, that's a totally reasonable thing.

00:39:52.720 --> 00:39:54.820
ChatGPT is pretty good at writing HTML.

00:39:54.820 --> 00:39:56.000
It does make up stuff.

00:39:56.000 --> 00:40:01.900
If you say use this framework or that framework like Bootstrap or Tailwind or something, but it'll still get you pretty close.

00:40:01.900 --> 00:40:02.860
Yeah, it's decent.

00:40:02.860 --> 00:40:03.700
I've used it before.

00:40:03.700 --> 00:40:04.760
It was pretty excellent.

00:40:04.760 --> 00:40:05.720
Let's see.

00:40:05.720 --> 00:40:06.360
What?

00:40:06.360 --> 00:40:08.560
Let me rerun this whole thing here.

00:40:08.560 --> 00:40:11.140
What other things you want to give a shout out to?

00:40:11.140 --> 00:40:19.980
I guess maybe the refs concept here is worth talking about because this is an interesting challenge that people could run into.

00:40:19.980 --> 00:40:24.340
Yeah, this is a problem that would happen in Vue as well.

00:40:24.340 --> 00:40:34.280
As that state changes, as your application state changes, that populate function that defines your DOM runs on every single state change.

00:40:34.680 --> 00:40:36.320
Unless you can override that.

00:40:36.320 --> 00:40:40.100
Maybe there's a state that isn't important and you can turn that off.

00:40:40.100 --> 00:40:41.220
But that's the default.

00:40:41.220 --> 00:40:47.020
And so what that means is every time that you have a state change, the DOM could be different.

00:40:47.020 --> 00:40:58.880
And if the DOM is different and it patches the DOM, that means that the browser might have, let's say you're typing in an input element and the input element moves.

00:40:58.880 --> 00:41:01.400
You would lose focus on that element.

00:41:01.400 --> 00:41:04.940
And that's the example that you see in this demo.

00:41:04.940 --> 00:41:08.720
So if you give it a ref, that does two things.

00:41:08.720 --> 00:41:11.920
One, it identifies within that component.

00:41:11.920 --> 00:41:14.660
It's kind of like an ID, but it's local to the component.

00:41:14.660 --> 00:41:16.560
It's not a document-wide ID.

00:41:16.800 --> 00:41:30.780
It identifies it so that when it comes time to patch, it will reuse that HTML tag, that element in the DOM, and only update the attributes on it and the elements around it.

00:41:30.780 --> 00:41:39.780
So you get ultimately a smoother browser experience because it's being a little more intelligent about how it wants to patch the DOM.

00:41:39.940 --> 00:41:52.260
Right. So in your example, there's an input, and as you start typing into it with the naive, straightforward way, the thing reruns, but it regenerates the DOM in a way that completely blasts away that text input.

00:41:52.260 --> 00:41:52.540
Right.

00:41:52.540 --> 00:42:01.020
It puts it back, but as you type, now all of a sudden it goes click, click, click, or beep, beep, beep, because it's no longer focused on there because that's not actually the same text box.

00:42:01.020 --> 00:42:03.100
It's a new one with the same value, right?

00:42:03.100 --> 00:42:03.380
Right.

00:42:03.580 --> 00:42:10.360
And so in order to say, no, this thing is permanent, leave it here, don't recreate it for whatever reason, maybe you could use that for performance, right?

00:42:10.360 --> 00:42:12.960
If you had like a big grid that didn't change or something.

00:42:12.960 --> 00:42:14.820
Yeah, it would probably help with performance.

00:42:14.820 --> 00:42:20.520
You also can use it to just reference those components elsewhere in your code.

00:42:20.520 --> 00:42:31.260
Like if you have an event handler and you want to get at a DOM element that's rendered, you can reference self.refs, use the reference as a dictionary key, and that gets you the component.

00:42:31.260 --> 00:42:31.980
Yeah, sure.

00:42:32.360 --> 00:42:35.240
All right, so I really recommend that people come check out this tutorial.

00:42:35.240 --> 00:42:45.620
It's got a bunch of neat pieces and not just necessarily jumping in here into the iScript runner, but on the documentation, which is somewhere.

00:42:45.620 --> 00:42:46.900
I found it somewhere.

00:42:46.900 --> 00:42:47.860
There you go.

00:42:47.860 --> 00:42:50.020
There's actually like a really nice walkthrough.

00:42:50.020 --> 00:42:54.620
Like you start here, you click, take me to the next one, see that example run, right?

00:42:54.620 --> 00:42:57.360
At docs.pupy.dev, walk through the tutorial.

00:42:57.360 --> 00:42:58.700
That's really quite nice there.

00:42:58.700 --> 00:42:59.060
Thanks.

00:42:59.060 --> 00:43:00.160
I hope it's nice.

00:43:00.280 --> 00:43:07.480
I mean, send me any feedback because it's hard to write a tutorial for something you made yourself and understand pretty well.

00:43:07.480 --> 00:43:08.760
Yeah, that's a good point, right?

00:43:08.760 --> 00:43:11.180
Because you know how it's supposed to look.

00:43:11.940 --> 00:43:17.060
Yeah, it's hard to evacuate that assumed knowledge from your context.

00:43:17.060 --> 00:43:18.400
Yeah, yeah, yeah, exactly.

00:43:18.400 --> 00:43:23.400
Okay, so this looks like a pretty well-polished framework.

00:43:23.400 --> 00:43:26.840
It's still at its super, super early stages.

00:43:26.840 --> 00:43:29.800
So I guess a couple questions.

00:43:29.800 --> 00:43:32.380
One, contributors, PRs welcome.

00:43:32.380 --> 00:43:33.340
What's the thoughts there?

00:43:33.340 --> 00:43:34.240
Yeah, absolutely.

00:43:34.240 --> 00:43:35.340
That's why it's on GitHub.

00:43:35.580 --> 00:43:36.040
Yeah, yeah.

00:43:36.040 --> 00:43:43.220
And if people want to try to build with it, you know, they can give it a try and maybe they'll discover an issue and put it on the GitHub repo or something like that.

00:43:43.220 --> 00:43:43.900
Yeah, it'd be cool.

00:43:43.900 --> 00:43:49.080
And then sort of towards that end, what is its readiness for use?

00:43:49.240 --> 00:43:53.100
If somebody said, I want to be all in on Python, I think PyScript's awesome.

00:43:53.100 --> 00:43:54.760
What's the stability look like?

00:43:54.760 --> 00:43:56.220
Where would you classify it?

00:43:56.220 --> 00:43:58.000
Is it an experimental stage?

00:43:58.000 --> 00:43:58.840
Is it a beta?

00:43:58.840 --> 00:43:59.460
What is it?

00:43:59.460 --> 00:44:07.440
If you're someone who is comfortable using a relatively new project that has one contributor of GitHub, I think you know who you are.

00:44:07.440 --> 00:44:14.560
If you took this and you try to bring it to like a review board of a Fortune 500 company, I don't think they would go for it.

00:44:14.560 --> 00:44:17.940
But then again, a lot of things kind of get smuggled in.

00:44:18.520 --> 00:44:19.840
They might, they can always fork it.

00:44:19.840 --> 00:44:20.240
Exactly.

00:44:20.240 --> 00:44:21.080
That's what I was going to say.

00:44:21.080 --> 00:44:30.860
That's why they might, because while there's not a huge team behind it, they could fork it and say, look, this is important enough for us that we'll like take it over effectively if we have to.

00:44:30.860 --> 00:44:33.100
It's also just not that much code.

00:44:33.100 --> 00:44:33.420
Yeah.

00:44:33.420 --> 00:44:45.760
I mean, I've been kind of working on it on and off in my free time for like six months, but the volume of code, I mean, I don't know how many lines there are off the top of my head, but there's like four main files.

00:44:45.760 --> 00:44:47.580
They're relatively straightforward.

00:44:47.800 --> 00:44:49.900
Most of the heavy lifting is with PyScript.

00:44:49.900 --> 00:44:50.620
Yeah.

00:44:50.620 --> 00:44:58.820
In terms of stability and breaking, like it promised that I won't break anything, but I think it's pretty deliberately laid out.

00:44:58.820 --> 00:45:06.380
And like I said, one complaint I have about the node JS world is how aggressively everything gets broken every six months.

00:45:06.580 --> 00:45:11.500
So I have some PTSD from that and I'm not looking to recreate it myself.

00:45:11.500 --> 00:45:11.900
Yeah.

00:45:11.900 --> 00:45:12.920
No more left pad.

00:45:12.920 --> 00:45:14.220
That's not even the problem.

00:45:14.220 --> 00:45:16.600
The problem is just that it's the constant change.

00:45:16.600 --> 00:45:17.960
This version changes.

00:45:18.040 --> 00:45:22.140
And it also happens in CSS frameworks like, oh, we've got bootstrap six.

00:45:22.140 --> 00:45:24.160
And I know five was awesome.

00:45:24.160 --> 00:45:27.320
You wrote a bunch of stuff in it, but we're completely redoing it because it's better now.

00:45:27.320 --> 00:45:33.560
It's like it would be even better if it's if I didn't have to start over or get pinned in the past or whatever, you know?

00:45:33.640 --> 00:45:42.240
And yeah, if you're living in that world, like it's fine because you get up every day and you eat, breathe and sleep.

00:45:42.240 --> 00:45:47.400
Everything in your world is this node front end framework and it's your full time job.

00:45:47.400 --> 00:45:48.680
You can keep up with it.

00:45:49.000 --> 00:45:55.720
But if you're like me and it's just something you did and then six months later you need to revisit it, it's too much.

00:45:55.720 --> 00:45:56.020
Yeah.

00:45:56.020 --> 00:45:56.460
Yeah.

00:45:56.460 --> 00:45:56.820
Well said.

00:45:56.820 --> 00:45:57.440
Okay.

00:45:57.440 --> 00:45:59.900
Last QPy question.

00:45:59.900 --> 00:46:02.220
Where are you going from here?

00:46:02.220 --> 00:46:04.000
Like what do you got next in mind?

00:46:04.000 --> 00:46:07.980
The testing is basically just Python unit tests.

00:46:07.980 --> 00:46:13.240
I'm not really, I don't have any automated testing for how it behaves in different browsers.

00:46:13.240 --> 00:46:14.060
It's fine.

00:46:14.060 --> 00:46:15.740
It's code runs the same in all browsers.

00:46:15.740 --> 00:46:16.360
Don't worry about it.

00:46:16.360 --> 00:46:18.900
Well, I mean, it might with PyStream.

00:46:19.240 --> 00:46:20.880
But I know it's getting better.

00:46:20.880 --> 00:46:29.880
It used to be really bad, but like I'm just now dealing with an issue like this video will play back on every single browser except this particular one on this particular OS.

00:46:29.880 --> 00:46:30.340
Like, great.

00:46:30.340 --> 00:46:30.600
Right.

00:46:30.600 --> 00:46:30.920
Okay.

00:46:30.920 --> 00:46:32.660
You know, it's that kind of stuff, right?

00:46:32.660 --> 00:46:34.220
Can't solve that kind of stuff for you.

00:46:34.220 --> 00:46:37.860
The actual Python language is going to be the same.

00:46:37.860 --> 00:46:40.380
Maybe not the JavaScript APIs you import.

00:46:40.380 --> 00:46:40.820
Yeah.

00:46:40.820 --> 00:46:48.080
Well, to a large degree, you're basically built upon the stability or lack thereof of MicroPython, which has been pretty stable.

00:46:48.320 --> 00:46:48.460
Yeah.

00:46:48.460 --> 00:46:49.720
MicroPython's great.

00:46:49.720 --> 00:46:50.520
Pyodide's great.

00:46:50.520 --> 00:46:51.260
Yeah.

00:46:51.260 --> 00:46:57.280
I would like to get some playwright tests to actually do proper end-to-end testing instead of just unit tests.

00:46:57.280 --> 00:47:03.600
I think probably some direct support for progressive web apps would be helpful.

00:47:03.600 --> 00:47:05.400
Helpful for everyone.

00:47:05.400 --> 00:47:11.480
I would like to have some kind of example on how to hook it up to like a Django or Flask backend.

00:47:11.480 --> 00:47:18.860
No, that's not usually in scope for a fun-end framework, but I kind of like the batteries included approach to development.

00:47:18.860 --> 00:47:19.260
Sure.

00:47:19.260 --> 00:47:22.760
You know, you talked about the progressive web apps, and I think they're great.

00:47:22.760 --> 00:47:29.220
I think it'd be like I've already said, I think it's completely possible to do with PyScript because I've done it on iOS.

00:47:29.800 --> 00:47:30.960
But it is great.

00:47:30.960 --> 00:47:35.300
The challenge with progressive web apps is the how do I get it in my dock?

00:47:35.300 --> 00:47:38.840
How do I install this thing like for real in a discoverable way?

00:47:38.840 --> 00:47:41.340
You know, I can come over on some of these things.

00:47:41.340 --> 00:47:51.420
I can like right-click on it and say, for example, if I right-click on a GitHub page, I can install GitHub, which means it will install as a progressive web app.

00:47:51.420 --> 00:47:57.740
But if I go to PyScript and right-click, it'll say create shortcut, which if I say open as a window kind of looks like it, but it's not.

00:47:57.740 --> 00:48:02.320
And just like that's not an end user experience, right?

00:48:02.320 --> 00:48:04.620
That's a dev user experience, I think.

00:48:04.620 --> 00:48:05.180
Yeah.

00:48:05.180 --> 00:48:06.740
That's not for you to solve.

00:48:06.740 --> 00:48:09.720
I mean, that's a problem with progressive web apps globally.

00:48:09.720 --> 00:48:11.300
That's nothing to do with your project.

00:48:11.300 --> 00:48:14.220
But it would be nice if there was like a really nice way to click this.

00:48:14.220 --> 00:48:16.080
Here's how it goes in your dock or your taskbar.

00:48:16.080 --> 00:48:16.600
And like.

00:48:16.600 --> 00:48:16.920
Yeah.

00:48:16.920 --> 00:48:25.900
I think the problem that they're butting up against is that the people who make browsers are keenly aware of how spammy websites get.

00:48:25.900 --> 00:48:32.940
So they don't want to have it be where you visit like a, you know, a newspaper and the newspaper prompts you to install the newspaper.

00:48:33.940 --> 00:48:40.060
So having that easily self-documenting install process is not there for the desktop.

00:48:40.060 --> 00:48:42.860
You have to actually go click add shortcut and then it works.

00:48:42.860 --> 00:48:43.420
Right.

00:48:43.420 --> 00:48:43.480
Right.

00:48:43.480 --> 00:48:45.320
The Safari folks.

00:48:45.320 --> 00:48:52.160
I've been, I talked Apple down a little bit from their really horrible app store review experiences they put on people.

00:48:52.160 --> 00:49:01.040
But the Safari browser, which I don't generally use, but they've got a really nice install this, you know, go to file, add to dock.

00:49:01.040 --> 00:49:05.620
And then that experience, the lifecycle of using that app once you've done it is real nice.

00:49:05.800 --> 00:49:11.260
So, I mean, add to dock is I want this app as an applicant thing where my other apps are.

00:49:11.260 --> 00:49:12.020
That's pretty good.

00:49:12.020 --> 00:49:12.320
Yeah.

00:49:12.320 --> 00:49:20.340
I've like I've installed Google's old chat app, which I still use as a progressive web app using Safari on my desktop.

00:49:20.340 --> 00:49:21.340
And it's great.

00:49:21.340 --> 00:49:25.680
It's it's just like another application that I've downloaded and installed in it.

00:49:25.680 --> 00:49:27.380
It's Safari, which is fine.

00:49:27.380 --> 00:49:27.780
Yeah.

00:49:27.780 --> 00:49:32.340
As long as it stays in its little container and doesn't infect my Vivaldi experience.

00:49:32.340 --> 00:49:40.780
I have Proton Drive, Gmail, Google Contacts, Google Calendar, some of the e-commerce stuff that I have to do.

00:49:40.780 --> 00:49:44.660
I've got the analytics, my email newsletter app.

00:49:44.660 --> 00:49:46.380
I've got YouTube, YouTube Music.

00:49:46.380 --> 00:49:49.100
All those things are all installed that way these days for me.

00:49:49.100 --> 00:49:50.040
And it's really, really nice.

00:49:50.040 --> 00:49:52.180
It beats having all those Electron apps running.

00:49:52.180 --> 00:49:52.740
It does.

00:49:52.740 --> 00:49:57.580
However, I don't see any reason why this stuff wouldn't work for Electron as well.

00:49:57.580 --> 00:49:58.100
Right.

00:49:58.100 --> 00:50:05.880
You can ship your Electron app with a HTML page and then you can just put this PyScript and PewPy as part of your HTML.

00:50:05.880 --> 00:50:07.740
And it should it's on the client side.

00:50:07.740 --> 00:50:09.620
It should just run in Chrome just fine.

00:50:09.620 --> 00:50:10.080
It should.

00:50:10.080 --> 00:50:12.040
You know, I don't know what the process for that would be.

00:50:12.040 --> 00:50:14.920
The developer in me says make it a PWA.

00:50:14.920 --> 00:50:19.180
But I'm I'm sure there's some business cases for making it a .app file.

00:50:19.180 --> 00:50:20.520
It feels more real.

00:50:21.140 --> 00:50:25.000
Maybe data storage, maybe access to OS features.

00:50:25.000 --> 00:50:28.980
I know it's that's getting better, but it's running natively on the machine.

00:50:28.980 --> 00:50:30.920
You can do whatever you need to do.

00:50:30.920 --> 00:50:31.920
So possibly.

00:50:31.920 --> 00:50:32.360
That's true.

00:50:32.360 --> 00:50:41.640
That might get a little messy in terms of importing those features once in JavaScript and then from JavaScript into PewPy.

00:50:41.640 --> 00:50:46.780
Yeah, you might have to have a multi-layer interop type thing that's a little bit funky, but.

00:50:46.780 --> 00:50:47.060
Yeah.

00:50:47.060 --> 00:50:54.440
My suspicion is that most people making Electron apps have a team that does front end work.

00:50:54.440 --> 00:50:57.960
And probably that front end work is going to be in JavaScript.

00:50:57.960 --> 00:50:58.720
Right.

00:50:58.720 --> 00:51:00.320
Yeah, probably some framework there.

00:51:00.320 --> 00:51:00.920
All right.

00:51:00.920 --> 00:51:01.660
Awesome.

00:51:02.020 --> 00:51:04.460
So I think PewPy has got a lot of potential.

00:51:04.460 --> 00:51:08.060
That's why I invited you on the show to talk about it because it's it's very interesting.

00:51:08.060 --> 00:51:15.800
And honestly, it's this kind of stuff I would love to see when I visit PyScript and not a REPL because, right, that's not what most people do.

00:51:15.800 --> 00:51:21.400
I know it's PyScript's a little more data science focused, but even for them, they more have a notebook experience generally.

00:51:21.400 --> 00:51:22.040
All right.

00:51:22.040 --> 00:51:23.560
I do have a question, though.

00:51:23.560 --> 00:51:32.320
So I noticed when I was going through the documentation here for your PewPy docs that it says powered by JetBrains right side, writer side.

00:51:32.320 --> 00:51:32.940
Tell me about that.

00:51:32.940 --> 00:51:38.380
I have not used this, but it's like a new IDE for recruiting documentation and testing and stuff.

00:51:38.380 --> 00:51:39.420
Like, what do you think about this?

00:51:39.420 --> 00:51:40.600
Now you've got to play with it a little.

00:51:40.600 --> 00:51:49.840
Well, you're basically just calling out laziness on my behalf because all the real Python projects are using something awesome like Sphinx.

00:51:49.840 --> 00:51:52.920
And I have the JetBrains all products license.

00:51:52.920 --> 00:51:56.000
So I just saw that and tried downloading it.

00:51:56.000 --> 00:51:57.040
It works well.

00:51:57.040 --> 00:51:58.400
There's zero setup.

00:51:58.400 --> 00:52:01.360
You just open it up and start typing in Markdown.

00:52:01.360 --> 00:52:03.780
It's clean and polished.

00:52:03.780 --> 00:52:07.400
If you have a JetBrains license, you might as well try it out.

00:52:07.400 --> 00:52:15.320
But I expect that if people start contributing to the documentation, I'll need to switch to something more community oriented.

00:52:15.320 --> 00:52:15.660
Potentially.

00:52:15.660 --> 00:52:16.420
I can't remember.

00:52:16.420 --> 00:52:20.860
I feel like writer side might integrate with some of those frameworks like Sphinx.

00:52:20.860 --> 00:52:23.340
But I'm asking about all this because I've not used it at all.

00:52:23.340 --> 00:52:24.340
So I don't really know.

00:52:24.340 --> 00:52:26.400
It's kind of its own framework.

00:52:26.400 --> 00:52:34.940
It supports Markdown, but it has its own little kind of HTML-ish thing for making tabs and glossaries and all that.

00:52:34.940 --> 00:52:35.560
Yeah, excellent.

00:52:35.560 --> 00:52:35.600
Excellent.

00:52:35.600 --> 00:52:36.300
Okay.

00:52:36.300 --> 00:52:44.600
And then I guess anything else you want to give a shout out to or talk about on the PuePy side of things when we wrap up our show?

00:52:44.600 --> 00:52:47.400
I would kind of like to give a shout out just to the PyScript people.

00:52:47.400 --> 00:52:54.000
I've gotten stuck a few times and headed over to their Discord server and they're always really friendly.

00:52:54.000 --> 00:52:58.200
They run little meetups kind of on Zoom with the community.

00:52:58.200 --> 00:53:00.040
And they've been great.

00:53:00.040 --> 00:53:02.680
I wouldn't have been able to do this without their help.

00:53:02.680 --> 00:53:03.300
Yeah, awesome.

00:53:03.300 --> 00:53:04.760
They have been helpful for me as well.

00:53:05.100 --> 00:53:05.260
All right.

00:53:05.260 --> 00:53:09.340
And then notable IPI project library?

00:53:09.340 --> 00:53:11.900
Completely unrelated.

00:53:11.900 --> 00:53:16.260
But there is a project called PGQer.

00:53:16.260 --> 00:53:17.640
There you have it pulled up on GitHub.

00:53:18.140 --> 00:53:33.880
And if you want something kind of like Celery, but you don't want to have to install Celery and install a broker and figure out your Celery installation and make maybe even another Docker container for your workers, this is great.

00:53:33.880 --> 00:53:38.040
It uses some Postgres.

00:53:38.040 --> 00:53:42.480
You don't want to have a simple task queue.

00:53:42.480 --> 00:53:43.720
I've tried it.

00:53:43.720 --> 00:53:44.280
It works great.

00:53:44.280 --> 00:53:49.960
You can probably Celery is still, you know, quote unquote, better for complex needs.

00:53:50.280 --> 00:53:52.460
But if you just want something simple, this is great.

00:53:52.460 --> 00:53:52.920
Yeah, it's cool.

00:53:52.920 --> 00:53:56.420
I mean, the truth is most of us have not complex needs, simple needs.

00:53:56.600 --> 00:54:02.280
And then bringing that kind of stuff in just makes it way more complicated from a DevOps perspective, right?

00:54:02.280 --> 00:54:03.840
Like, I'm already talking to a database.

00:54:03.840 --> 00:54:04.980
I'm already talking to Postgres.

00:54:04.980 --> 00:54:06.380
What if I could just use it?

00:54:06.440 --> 00:54:08.260
There's a lot to learn with Celery.

00:54:08.260 --> 00:54:10.640
Like, it's a whole project unto itself.

00:54:10.640 --> 00:54:11.080
Sure.

00:54:11.080 --> 00:54:15.820
Yeah, over at Talk Python, I've got a MongoQer equivalent.

00:54:15.820 --> 00:54:19.580
That is, you know, because you scale out the worker processes, right?

00:54:19.580 --> 00:54:21.400
So it's not enough to just have them running.

00:54:21.400 --> 00:54:26.780
You want a little more durability in case for some reason, like the server restarts, but there's still work to be done.

00:54:26.780 --> 00:54:28.220
You just come back and look.

00:54:28.220 --> 00:54:30.480
Oh, look, there's some unprocessed work in the database.

00:54:30.480 --> 00:54:31.080
Let's do that.

00:54:31.080 --> 00:54:32.060
It's nice.

00:54:32.060 --> 00:54:33.980
It's not quite as nice as this, I think.

00:54:34.360 --> 00:54:45.280
But, I mean, suppose if it said send an email and it, like, had sent the email, but it hadn't acknowledged it sent the email yet, and you restart the server at that very moment, the person's probably getting a second email.

00:54:45.280 --> 00:54:45.960
You know what I mean?

00:54:45.960 --> 00:54:49.000
But there's a really, really small chance of these types of things.

00:54:49.000 --> 00:54:53.820
It's much more common to, like, you know, re-index these things or whatever.

00:54:53.820 --> 00:55:00.420
I think, actually, with PGQer, because it's Postgres, you would get strong consistency.

00:55:00.420 --> 00:55:03.600
So the chance of that duplicate email would be low.

00:55:03.740 --> 00:55:10.900
Well, but imagine this, like, if you do a transaction and you go to, like, start, let's say, like, I'm going to move the work into running.

00:55:10.900 --> 00:55:15.580
And then if you shut it down, that transaction's going to roll back and it'll probably go back to ready to run.

00:55:15.580 --> 00:55:17.400
I mean, I don't know how you deal with it.

00:55:17.400 --> 00:55:23.240
I mean, it almost comes back to the poison message thing of, like, celery and message queues, which is really very tricky.

00:55:23.240 --> 00:55:27.520
Like, sending an email, the thing is, you can't put that in your transaction.

00:55:27.900 --> 00:55:28.520
Yeah, exactly.

00:55:28.520 --> 00:55:29.640
You can't unset.

00:55:29.640 --> 00:55:34.060
Well, a few things have tried to recall email, but as in general, email doesn't support rollback.

00:55:34.060 --> 00:55:37.000
No, it might be a good feature for, like, SendGrid to consider.

00:55:37.000 --> 00:55:38.000
Yeah, it would be very cool.

00:55:38.000 --> 00:55:48.480
One thing you can kind of do in those situations, if you happen to have, like, Redis or something available, is if you, the content of the email is going to be exactly the same.

00:55:48.740 --> 00:56:00.440
So if you just hash the email to, identify it somehow, a combination of the email content and who it's for, and then you get a hash of that, then you can have a little Redis key.

00:56:00.440 --> 00:56:04.620
And if that Redis key is set, email has been sent and you can discard the task.

00:56:04.620 --> 00:56:05.440
Yeah, yeah.

00:56:05.440 --> 00:56:08.300
You just put that right next to where you've actually sent the email.

00:56:08.300 --> 00:56:11.840
And the chance that it's going to crash in between those two is pretty low.

00:56:11.840 --> 00:56:12.600
It's extremely low.

00:56:12.600 --> 00:56:13.140
Yeah, exactly.

00:56:13.140 --> 00:56:22.520
So things like this, things like that solution you talked about, while not bank-level bulletproof, most of us don't want to suffer through that level of durability, right?

00:56:22.520 --> 00:56:23.740
So very cool project.

00:56:23.740 --> 00:56:24.800
Yeah, I like it.

00:56:24.800 --> 00:56:25.100
Awesome.

00:56:25.100 --> 00:56:26.980
All right, Ken, final call to action.

00:56:26.980 --> 00:56:31.160
People are like, oh my gosh, front-end Python, what do they do?

00:56:31.160 --> 00:56:37.920
Well, I don't want to oversell it as solving all your problems, but if you want to check it out, PewPy might need spelling out.

00:56:37.920 --> 00:56:41.980
It's P-U-E-P-Y.dev.

00:56:41.980 --> 00:56:42.720
Excellent.

00:56:43.180 --> 00:56:44.780
And love the initiative.

00:56:44.780 --> 00:56:46.460
Happy to shine a light on the project.

00:56:46.460 --> 00:56:47.600
Would like to see it grow.

00:56:47.600 --> 00:56:47.980
Awesome.

00:56:47.980 --> 00:56:49.240
Thanks for having me on.

00:56:49.240 --> 00:56:50.320
Yeah, thanks for being on the show.

00:56:50.320 --> 00:56:50.800
Bye.

00:56:50.800 --> 00:56:51.060
Bye.

00:56:51.060 --> 00:56:55.560
This has been another episode of Talk Python To Me.

00:56:55.560 --> 00:56:57.360
Thank you to our sponsors.

00:56:57.360 --> 00:56:58.980
Be sure to check out what they're offering.

00:56:58.980 --> 00:57:00.400
It really helps support the show.

00:57:00.400 --> 00:57:02.600
Take some stress out of your life.

00:57:02.600 --> 00:57:08.380
Get notified immediately about errors and performance issues in your web or mobile applications with Sentry.

00:57:08.860 --> 00:57:13.380
Just visit talkpython.fm/sentry and get started for free.

00:57:13.380 --> 00:57:16.980
And be sure to use the promo code Talk Python, all one word.

00:57:17.120 --> 00:57:20.200
Code Comments, an original podcast from Red Hat.

00:57:20.200 --> 00:57:28.860
This podcast covers stories from technologists who've been through tough tech transitions and share how their teams survived the journey.

00:57:29.440 --> 00:57:35.280
Episodes are available everywhere you listen to your podcasts and at talkpython.fm/code dash comments.

00:57:35.280 --> 00:57:36.940
Want to level up your Python?

00:57:37.180 --> 00:57:41.060
We have one of the largest catalogs of Python video courses over at Talk Python.

00:57:41.060 --> 00:57:46.160
Our content ranges from true beginners to deeply advanced topics like memory and async.

00:57:46.160 --> 00:57:48.840
And best of all, there's not a subscription in sight.

00:57:48.840 --> 00:57:51.740
Check it out for yourself at training.talkpython.fm.

00:57:51.740 --> 00:57:53.840
Be sure to subscribe to the show.

00:57:53.840 --> 00:57:56.700
Open your favorite podcast app and search for Python.

00:57:56.700 --> 00:57:57.920
We should be right at the top.

00:57:57.920 --> 00:58:07.280
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

00:58:07.280 --> 00:58:10.260
We're live streaming most of our recordings these days.

00:58:10.260 --> 00:58:18.040
If you want to be part of the show and have your comments featured on the air, be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

00:58:18.040 --> 00:58:20.140
This is your host, Michael Kennedy.

00:58:20.140 --> 00:58:21.440
Thanks so much for listening.

00:58:21.440 --> 00:58:22.600
I really appreciate it.

00:58:22.600 --> 00:58:24.500
Now get out there and write some Python code.

00:58:24.500 --> 00:58:45.380
I'll see you next time.

