WEBVTT

00:00:00.001 --> 00:00:02.880
You know the two questions I ask at the end of each episode?

00:00:02.880 --> 00:00:05.500
What's your favorite editor for writing Python code?

00:00:05.500 --> 00:00:08.740
And what less well-known PyPI package do you recommend?

00:00:08.740 --> 00:00:12.140
Well, this time, we're going to make an entire episode out of

00:00:12.140 --> 00:00:13.120
what's your favorite editor.

00:00:13.120 --> 00:00:16.980
You'll meet Don Jayamane, who created the wildly popular

00:00:16.980 --> 00:00:19.720
and open-source Python add-in for Visual Studio Code.

00:00:19.720 --> 00:00:21.960
That's not the Windows-only Visual Studio,

00:00:21.960 --> 00:00:24.920
but Microsoft's free cross-platform editor.

00:00:25.480 --> 00:00:31.200
This is Talk Python To Me, episode 101, recorded January 23, 2017.

00:00:31.200 --> 00:00:59.380
Welcome to Talk Python To Me, a weekly podcast on Python,

00:00:59.380 --> 00:01:02.460
the language, the libraries, the ecosystem, and the personalities.

00:01:02.460 --> 00:01:04.560
This is your host, Michael Kennedy.

00:01:04.560 --> 00:01:06.560
Follow me on Twitter, where I'm @mkennedy.

00:01:06.560 --> 00:01:10.440
Keep up with the show and listen to past episodes at talkpython.fm

00:01:10.440 --> 00:01:12.960
and follow the show on Twitter via at Talk Python.

00:01:12.960 --> 00:01:17.540
This episode is brought to you by Talk Python Training and Hired.

00:01:17.540 --> 00:01:20.880
Be sure to check out what we both have to offer during our segments.

00:01:20.880 --> 00:01:21.900
It helps support the show.

00:01:21.900 --> 00:01:24.100
Don, welcome to Talk Python.

00:01:24.100 --> 00:01:25.920
Hi, Michael. It's a pleasure to be here.

00:01:25.920 --> 00:01:26.940
It's great to have you here.

00:01:26.940 --> 00:01:29.700
You know, we're going to talk about Visual Studio Code.

00:01:29.700 --> 00:01:32.140
And I know Visual Studio and Python,

00:01:32.140 --> 00:01:35.140
while they do have the Python tools for Visual Studio,

00:01:35.140 --> 00:01:36.200
that's not what we're talking about.

00:01:36.200 --> 00:01:40.620
Typically, people think of Visual Studio as this thing being a Windows thing,

00:01:40.620 --> 00:01:45.020
and mostly for like .NET and Windows C developers and so on.

00:01:45.020 --> 00:01:50.140
But what we're going to talk about is a really amazing plug-in or extension

00:01:50.140 --> 00:01:52.580
that you've created for Visual Studio Code,

00:01:52.580 --> 00:01:56.100
which is actually a cross-platform editor based on JavaScript,

00:01:56.100 --> 00:01:57.880
that Microsoft has released.

00:01:57.880 --> 00:02:01.200
So we're going to talk about a pretty excellent Python editor

00:02:01.200 --> 00:02:04.180
that you've had a lot of influence in creating.

00:02:04.180 --> 00:02:04.840
Yes.

00:02:04.840 --> 00:02:08.240
This is a little project that I've worked on.

00:02:08.240 --> 00:02:13.040
And as you mentioned, Visual Studio Code is not Visual Studio IDE

00:02:13.040 --> 00:02:14.960
that's been developed for Windows.

00:02:15.600 --> 00:02:19.480
Most people think it is, but it's more of a cross-platform editor.

00:02:19.480 --> 00:02:20.780
Yeah, it's really, really nice.

00:02:20.780 --> 00:02:22.360
And it's gaining so much traction.

00:02:22.360 --> 00:02:24.440
And the Python tools you built were really cool.

00:02:24.440 --> 00:02:25.440
So I want to talk about those.

00:02:25.440 --> 00:02:26.900
But let's do first things first.

00:02:26.900 --> 00:02:27.840
Let's hear about your background.

00:02:27.840 --> 00:02:29.260
How did you get into programming in the first place?

00:02:29.260 --> 00:02:33.300
Back in 2000, that's when I started a course in computer science.

00:02:33.480 --> 00:02:37.480
And I was looking for a permanent role in permanent part-time role

00:02:37.480 --> 00:02:38.540
in information technology.

00:02:38.540 --> 00:02:42.260
And that's when I joined a company named EDMS.

00:02:42.260 --> 00:02:47.080
It's basically a branch of a company in Australia named QA Software.

00:02:47.080 --> 00:02:52.360
The way they hired people was they just took kids just after year 12.

00:02:52.360 --> 00:02:54.860
And you were given an IQ test.

00:02:54.860 --> 00:02:56.320
If you did well, you were hired.

00:02:56.720 --> 00:02:58.260
So they hired me.

00:02:58.260 --> 00:03:00.400
That's a really interesting way to get a job.

00:03:00.400 --> 00:03:02.320
They're just like, look, we know you're smart.

00:03:02.320 --> 00:03:03.520
You're driven.

00:03:03.520 --> 00:03:05.960
And we think we could teach you programming.

00:03:05.960 --> 00:03:06.540
Yes.

00:03:06.540 --> 00:03:08.740
So it was a really great place.

00:03:08.740 --> 00:03:14.960
And as the name says, QA Software, it stands for Quality Assured Software.

00:03:15.140 --> 00:03:22.260
So they were really keen on ensuring the programmers were thought the very basics on programming.

00:03:22.260 --> 00:03:29.960
That was writing unit tests, writing technical specifications, and writing quality-issued code.

00:03:29.960 --> 00:03:31.220
So it was really great.

00:03:31.220 --> 00:03:33.280
It had a very great foundation.

00:03:33.280 --> 00:03:34.720
And I started learning.

00:03:34.720 --> 00:03:37.940
I started programming with Visual Fox Pro.

00:03:37.940 --> 00:03:41.240
Again, I don't know if many people know about that language.

00:03:41.240 --> 00:03:41.740
It was...

00:03:41.740 --> 00:03:41.860
Yeah.

00:03:41.860 --> 00:03:43.380
You know, actually, I don't know if they do.

00:03:43.380 --> 00:03:47.400
So it's kind of like an access sort of language for databases, right?

00:03:47.400 --> 00:03:48.740
Can you maybe tell people what that is?

00:03:48.740 --> 00:03:49.780
Yes, that's exactly right.

00:03:49.780 --> 00:03:51.920
It started out as Fox Pro.

00:03:51.920 --> 00:03:57.980
And then, if I'm not mistaken, Microsoft bought it over and turned it into Visual Fox Pro.

00:03:57.980 --> 00:04:00.260
So initially, they had Visual...

00:04:00.260 --> 00:04:03.040
I think it was Visual Studio 5.

00:04:03.040 --> 00:04:05.740
And then they added Fox Pro onto it.

00:04:05.740 --> 00:04:11.080
And then it became Visual Studio 6 because it became one of the six little components to Visual Studio.

00:04:11.080 --> 00:04:12.960
Eventually, they killed it off.

00:04:12.960 --> 00:04:16.060
Yeah, it's not a thing anymore.

00:04:16.060 --> 00:04:18.280
But yeah, it was a big language.

00:04:18.280 --> 00:04:18.680
Oh, yes.

00:04:18.680 --> 00:04:20.500
For sort of rapid development, right?

00:04:20.500 --> 00:04:21.020
Oh, yes.

00:04:21.020 --> 00:04:23.500
Personally, I thought it was better than Visual Basic.

00:04:23.500 --> 00:04:24.540
So...

00:04:24.540 --> 00:04:24.760
Okay.

00:04:24.760 --> 00:04:25.880
Yeah, yeah.

00:04:25.880 --> 00:04:26.420
Very interesting.

00:04:26.420 --> 00:04:28.660
So where'd you go from there?

00:04:28.660 --> 00:04:29.860
From there?

00:04:29.860 --> 00:04:31.660
So I stayed there for a couple of years.

00:04:31.900 --> 00:04:36.540
And eventually migrated to Australia in 2004.

00:04:36.540 --> 00:04:41.520
And so while I was at that place that we were using .NET as well.

00:04:41.520 --> 00:04:47.600
So once I migrated to Australia, then I was just using .NET primarily.

00:04:47.600 --> 00:04:50.600
And .NET and SQL.

00:04:50.600 --> 00:04:51.080
Yeah.

00:04:51.180 --> 00:04:51.440
All right.

00:04:51.440 --> 00:04:51.840
Interesting.

00:04:51.840 --> 00:04:54.120
Those are a long ways away from Python.

00:04:54.120 --> 00:04:56.700
So what got you into Python?

00:04:56.700 --> 00:04:57.320
Simple.

00:04:57.320 --> 00:04:59.940
It was the Raspberry Pi microcontroller.

00:04:59.940 --> 00:05:01.980
Or I don't know what it's called exactly.

00:05:01.980 --> 00:05:03.000
Or microcomputer.

00:05:04.000 --> 00:05:09.680
Once I heard about the Raspberry Pi, I just wanted to get my hands on one of those.

00:05:09.680 --> 00:05:16.820
And I learned that the best language to work on Raspberry Pi was Python.

00:05:16.820 --> 00:05:23.020
And I figured that was a really great excuse or great reason to learn another programming language.

00:05:23.020 --> 00:05:24.740
And yes, that's how I learned it.

00:05:24.740 --> 00:05:25.640
Yeah, that's really nice.

00:05:25.640 --> 00:05:29.580
Did you end up building anything interesting or just sort of play around with Raspberry Pis?

00:05:29.580 --> 00:05:32.240
Initially, I just started playing around with it.

00:05:32.500 --> 00:05:39.480
But my first project was building a little timer slash remote for my pool motor.

00:05:39.480 --> 00:05:40.880
Because I had just moved in.

00:05:40.880 --> 00:05:44.280
And the pool pump wasn't...

00:05:44.280 --> 00:05:45.720
It had to be turned on manually.

00:05:45.720 --> 00:05:46.800
The timer wasn't working.

00:05:46.800 --> 00:05:51.080
So I had to hook in the Raspberry Pi with a timer.

00:05:51.080 --> 00:05:55.520
And that would turn the pump on and off late in the night.

00:05:55.520 --> 00:05:56.120
Nice.

00:05:56.120 --> 00:05:59.200
Did you internet enable it so you could see the status of it or anything?

00:05:59.200 --> 00:06:00.000
Oh, no, no, no.

00:06:00.080 --> 00:06:03.800
It was just a timer and then just turned the pump on and off.

00:06:03.800 --> 00:06:05.040
And I was just happy with that.

00:06:05.040 --> 00:06:06.020
That's really cool.

00:06:06.020 --> 00:06:09.620
I love how you used it to solve a real world problem.

00:06:09.620 --> 00:06:10.780
You're like, you know what?

00:06:10.780 --> 00:06:13.000
I can program this silly pump.

00:06:14.220 --> 00:06:16.800
And so there were times when it would...

00:06:16.800 --> 00:06:20.180
There's a little thing called a creepy crawly as well.

00:06:20.180 --> 00:06:23.340
It would get stuck or tangled up at night.

00:06:23.340 --> 00:06:24.560
So this was just the early days.

00:06:24.560 --> 00:06:27.440
I didn't know how to look after a pool or maintain a pool.

00:06:27.440 --> 00:06:34.580
So I'd even hooked up a camera to this so I could see in the middle of the night whether it's functional or whether it's stuck somewhere.

00:06:34.580 --> 00:06:36.980
And yes, that's what I did.

00:06:37.300 --> 00:06:42.380
I don't have any of those things anymore, but it was just in the first couple of months.

00:06:42.380 --> 00:06:43.480
Oh, that sounds really cool.

00:06:43.480 --> 00:06:45.900
How did you find learning Python to be?

00:06:45.900 --> 00:06:47.420
Did you pick it up pretty easily?

00:06:47.420 --> 00:06:47.860
Yes.

00:06:47.860 --> 00:06:50.140
Amazingly really simple language.

00:06:50.140 --> 00:06:55.440
Initially, the only thing that I found annoying was the indentation.

00:06:55.960 --> 00:06:58.040
So blocks of code had to be intended.

00:06:58.040 --> 00:07:05.820
So coming from other languages, I just felt that was a little weird and took me, I guess, a week or two to get used to that.

00:07:05.820 --> 00:07:08.000
I just felt it was...

00:07:08.000 --> 00:07:10.340
Initially, I thought it was a poor language having to do that.

00:07:10.340 --> 00:07:16.400
But over time, I realized it was a really very powerful and very, I would say, a very cool language.

00:07:16.400 --> 00:07:17.680
Yeah, that's really cool.

00:07:17.680 --> 00:07:19.820
I had a similar experience.

00:07:19.820 --> 00:07:26.020
I think a lot of people who come from C-based languages where blocks are curly braces and parentheses and things like that.

00:07:26.020 --> 00:07:27.180
I just...

00:07:27.180 --> 00:07:29.340
You're so used to white space not mattering.

00:07:29.340 --> 00:07:30.620
That it's really...

00:07:30.620 --> 00:07:33.640
It catches you off guard and you're like, wait, that's crazy.

00:07:33.640 --> 00:07:41.580
But once you realize that editors really, really help you, they kind of make that almost transparent or invisible and they manage it and you don't have to.

00:07:41.580 --> 00:07:45.020
Well, then all of a sudden, it's pretty sweet once you get your mind around it.

00:07:45.020 --> 00:07:49.100
I absolutely prefer that kind of programming now.

00:07:49.200 --> 00:07:52.500
But I remember it being a bit of a mind shift the first time I saw it, too.

00:07:52.500 --> 00:07:53.680
Interesting.

00:07:53.680 --> 00:07:55.100
Okay, cool.

00:07:55.100 --> 00:07:59.600
So let's talk about Visual Studio Code and your plugin.

00:07:59.600 --> 00:08:03.200
We mentioned a little bit about Visual Studio Code.

00:08:03.200 --> 00:08:06.180
It's built on something that I actually am a fan of.

00:08:06.180 --> 00:08:07.460
It's this thing called Electron.

00:08:07.460 --> 00:08:12.500
So can you maybe give us the history of Electron and its maybe weird intersection with Microsoft?

00:08:12.500 --> 00:08:15.920
Electron started out as a project that...

00:08:15.920 --> 00:08:17.660
What's this GitHub word called?

00:08:17.660 --> 00:08:18.760
Yeah, GitHub, I think, yeah.

00:08:18.820 --> 00:08:19.580
They started out...

00:08:19.580 --> 00:08:21.340
It didn't start out as a standalone project.

00:08:21.340 --> 00:08:22.120
Initially, they built...

00:08:22.120 --> 00:08:24.060
To my knowledge, they built Atom.

00:08:24.060 --> 00:08:25.980
And then they realized, hey, wait a minute.

00:08:25.980 --> 00:08:29.160
We've got this really cool framework that can build desktop applications.

00:08:29.160 --> 00:08:33.820
And from there, they took out parts of Atom and built Electron.

00:08:33.820 --> 00:08:38.560
So basically, if you would look at it, Atom is built on top of Electron.

00:08:40.040 --> 00:08:44.240
And so for some time, people had been using Atom to build extensions.

00:08:44.240 --> 00:08:46.840
And basically, that turned into an editor.

00:08:46.840 --> 00:08:56.460
Microsoft came along and they realized, oh, we could do the same thing because we need to provide an editor for C# and a couple of other languages as well.

00:08:57.120 --> 00:09:02.940
So they came in and took Electron as the basis for Visual Studio Code.

00:09:02.940 --> 00:09:03.920
Yeah, that's interesting.

00:09:03.920 --> 00:09:05.920
I mean, it used to be called even Atom Shell, right?

00:09:05.920 --> 00:09:08.800
Before they were like, okay, it needs its own name, right?

00:09:08.800 --> 00:09:11.120
Which is really interesting.

00:09:11.120 --> 00:09:13.900
You know, I guess the origins...

00:09:13.900 --> 00:09:23.700
It just seemed really weird to me that Microsoft, the company, is coming along and shipping one of their major new projects on Chrome and Node.js.

00:09:23.700 --> 00:09:27.780
It does not think like where...

00:09:27.780 --> 00:09:30.560
It's not where I thought they would be focusing, but it's a cool thing.

00:09:30.560 --> 00:09:31.000
Yes.

00:09:31.000 --> 00:09:33.560
It's interesting that you mentioned Chrome and Node.js.

00:09:33.560 --> 00:09:42.640
For people who don't really know what Electron is, the best way to describe it is it's a desktop application built using Chrome and Node.js.

00:09:42.640 --> 00:09:46.440
So again, if people don't know what Node.js is, it's just JavaScript.

00:09:46.440 --> 00:09:47.720
That's pretty much it.

00:09:47.720 --> 00:09:49.060
Yeah, it's interesting.

00:09:49.060 --> 00:09:59.220
And it packages it up and you just get like a .app on your Mac or whatever and you could care less or you don't really know that it is unless like you actually know the internals.

00:09:59.220 --> 00:10:07.720
And one of the things you said was interesting was how it makes like heavy use of extensions to give it any functionality.

00:10:07.720 --> 00:10:09.160
Yes, that's Atom.

00:10:09.160 --> 00:10:11.820
Atom uses a lot of extensions.

00:10:11.820 --> 00:10:18.100
Basically, there's not much built or baked into the extension apart from the editors.

00:10:18.620 --> 00:10:21.480
This is where Visual Studio Code differs significantly.

00:10:21.480 --> 00:10:25.200
Microsoft came in and they had the benefit of hindsight.

00:10:25.200 --> 00:10:33.580
So they could see where Atom and Sublime had their drawbacks and they built Visual Studio Code to resolve those issues.

00:10:33.580 --> 00:10:40.260
For instance, Atom had some serious problems with editing or loading of large files and Visual Studio Code did not.

00:10:40.260 --> 00:10:46.640
One of the major reasons for people adopting Visual Studio Code was because of its efficiency in dealing with large files.

00:10:46.940 --> 00:10:54.240
Yeah, and if you had to categorize it in sort of its size on one hand and sort of the, I just run it in the terminal, very lightweight.

00:10:54.240 --> 00:10:55.520
We've got things like Vim.

00:10:56.220 --> 00:11:01.940
We've got sort of middle-sized, I guess, tooling like Sublime Text.

00:11:01.940 --> 00:11:04.000
I guess maybe throw Atom in there.

00:11:04.000 --> 00:11:15.940
And we've got heavier weight things that do many, many things but are quite large applications like PyCharm or Wing IDE or Visual Studio even itself.

00:11:15.940 --> 00:11:19.620
Where do you think Visual Studio Code falls in this category?

00:11:19.880 --> 00:11:21.200
Somewhere halfway there.

00:11:21.200 --> 00:11:30.980
I would say in the middle because of its debugging capabilities and integration with the Git and a couple of other capabilities.

00:11:30.980 --> 00:11:34.980
So it's a very mature and very capable editor.

00:11:34.980 --> 00:11:37.660
So I would have to say it's definitely halfway there.

00:11:37.660 --> 00:11:37.980
Sure.

00:11:37.980 --> 00:11:38.280
Okay.

00:11:38.580 --> 00:11:46.780
Yeah, I mean, it seems like Sublime Text but a little bit larger in terms of size but not a full-blown IDE and maybe in like how it feels when you work with it.

00:11:46.780 --> 00:11:47.280
That's correct.

00:11:47.280 --> 00:11:47.640
Yes.

00:11:47.640 --> 00:11:48.160
Okay.

00:11:48.340 --> 00:11:53.120
So people may be wondering, what's all this about on this Python show?

00:11:53.120 --> 00:11:56.920
But let's talk about your Python plugin for Visual Studio.

00:11:56.920 --> 00:11:59.140
And it's just called Python for Visual Studio Code, right?

00:11:59.140 --> 00:12:00.180
Yes, it is.

00:12:00.180 --> 00:12:00.840
Yeah.

00:12:00.840 --> 00:12:02.660
And when I first saw that, oh, cool.

00:12:02.660 --> 00:12:06.460
Because, you know, when I first started playing Visual Studio Code, it didn't support Python.

00:12:06.460 --> 00:12:09.300
And so, like, the white space indentation was not working right.

00:12:09.300 --> 00:12:10.760
And I'm like, oh, this is not going to work.

00:12:10.760 --> 00:12:11.300
Put that away.

00:12:11.300 --> 00:12:12.980
And then I checked back.

00:12:12.980 --> 00:12:16.520
I talked to some of the guys that mentioned it.

00:12:16.520 --> 00:12:17.800
And I'm like, oh, let me have a look at this.

00:12:17.800 --> 00:12:19.300
And then I found your plugin.

00:12:19.300 --> 00:12:22.400
I'm like, wow, this thing is actually really rich and nice.

00:12:22.400 --> 00:12:26.080
So, first of all, let's start by how many downloads does it currently have?

00:12:26.080 --> 00:12:28.300
Before that, how old is it?

00:12:28.300 --> 00:12:29.680
It's a little over a year old.

00:12:29.680 --> 00:12:42.740
If I remember correctly, I started work on this sometime in late 2015, somewhere around November or December 2015, late night to early mornings of December 2015.

00:12:42.740 --> 00:12:47.260
So, it's just over a year old now.

00:12:47.260 --> 00:12:48.060
Okay, cool.

00:12:48.060 --> 00:12:50.260
So, now, with that in mind, how many downloads does it have?

00:12:50.260 --> 00:12:52.740
It's got over a million downloads.

00:12:52.740 --> 00:12:58.780
So, if I were to be a bit more accurate, maybe 1,150,000 downloads.

00:12:58.780 --> 00:12:59.800
So, yeah.

00:12:59.800 --> 00:13:00.120
Yeah.

00:13:00.120 --> 00:13:01.680
That probably, that number is climbing.

00:13:01.680 --> 00:13:07.600
And that's just, you know, that really got my attention because I'm like, wow, you know, how many people really use Python and Visual Studio Code?

00:13:07.720 --> 00:13:07.980
Come on.

00:13:07.980 --> 00:13:12.120
And then I realized this is like the second most popular extension or something.

00:13:12.120 --> 00:13:14.800
And it's really, really used.

00:13:14.800 --> 00:13:17.720
And as I looked into it, there's a lot of features there.

00:13:17.720 --> 00:13:18.160
Yes.

00:13:18.360 --> 00:13:20.020
As you mentioned, it is really surprising.

00:13:20.020 --> 00:13:26.000
Surprising because, one, it's, this is a Microsoft product, Visual Studio Code.

00:13:26.340 --> 00:13:31.000
And the most popular extension is the C# extension.

00:13:31.000 --> 00:13:37.980
So, one would have expected the next most popular one to be something to do with, I don't know, maybe TypeScript or something else.

00:13:38.640 --> 00:13:40.120
However, it's Python.

00:13:40.120 --> 00:13:45.580
So, it just shows that Python is really up there in terms of popularity with language.

00:13:45.580 --> 00:13:48.120
To me, it was something very new.

00:13:48.120 --> 00:13:50.640
That's not what I was expecting at all.

00:13:50.640 --> 00:13:50.900
Yeah.

00:13:50.900 --> 00:13:51.880
That's really surprising.

00:13:51.880 --> 00:13:52.100
Yeah.

00:13:52.100 --> 00:13:52.460
Yeah.

00:13:52.460 --> 00:13:57.840
And there were others in the community, too, who were really surprised to see, hey, Python's really doing very well.

00:13:57.840 --> 00:13:59.380
It's really interesting.

00:13:59.380 --> 00:13:59.740
Yeah.

00:13:59.740 --> 00:14:04.140
That's, it must have felt really good to put out something that got over a million downloads.

00:14:04.140 --> 00:14:06.480
And you have over a million people using it.

00:14:06.480 --> 00:14:07.020
That's amazing.

00:14:07.020 --> 00:14:08.460
Yes, indeed.

00:14:08.460 --> 00:14:15.460
So, what got you, you said back in late 2005, you started working evenings and, you know, skipping sleep and stuff.

00:14:15.460 --> 00:14:17.560
What got you started?

00:14:17.560 --> 00:14:19.620
Like, why are you like, ah, this thing must exist.

00:14:19.620 --> 00:14:20.320
I have to create it.

00:14:20.320 --> 00:14:21.180
Were you like me?

00:14:21.180 --> 00:14:23.300
You're like, I wish this would, like, indent my code correctly.

00:14:23.300 --> 00:14:25.800
But you actually took some action and made something happen?

00:14:25.800 --> 00:14:31.940
This is, I would say, I was primarily looking for a really cross-platform editor.

00:14:31.940 --> 00:14:32.600
Where is it?

00:14:32.600 --> 00:14:33.220
Cross-platform.

00:14:33.220 --> 00:14:35.440
I was working, I was using a Mac at that time.

00:14:35.440 --> 00:14:37.540
I was learning to do some development on a Mac.

00:14:37.560 --> 00:14:39.260
And Windows as well.

00:14:39.260 --> 00:14:42.140
So, I was still working on Raspberry Pi.

00:14:42.140 --> 00:14:48.860
As I was jumping between the two platforms, I wanted a consistent look and feel for the editor.

00:14:49.020 --> 00:14:51.260
So, PyCharm was the only one that fit the box.

00:14:51.260 --> 00:15:00.300
However, as a Visual Studio developer, someone who's been using Visual Studio all my life, I just preferred that look and feel.

00:15:00.640 --> 00:15:02.500
So, though PyCharm was great.

00:15:02.500 --> 00:15:04.060
I still preferred something else.

00:15:04.060 --> 00:15:08.320
I guess, in the back of my mind, I was still hoping for something from Microsoft.

00:15:08.320 --> 00:15:16.320
And when Microsoft released Visual Studio Code, I was using that as a replacement for Notepad++.

00:15:16.880 --> 00:15:24.200
When they released that, I was really looking forward to them providing the API for developers to build extensions.

00:15:24.200 --> 00:15:29.040
As soon as they did that, I thought to myself, oh, this is a great opportunity.

00:15:29.180 --> 00:15:38.440
Let's just provide an extension for developers, at least myself, who can use it to edit Python files on both a Mac and Windows.

00:15:38.980 --> 00:15:48.920
And I was also looking for a really simple project to work on while I was at home using Node.js because I wanted to play around with Node.js.

00:15:48.920 --> 00:15:52.140
So, I was looking for a project to work on.

00:15:52.140 --> 00:15:52.440
Right.

00:15:52.440 --> 00:15:59.100
So, obviously, the tooling is for Python developers, but what type of code did you write to create this thing?

00:15:59.100 --> 00:16:01.480
I'd say primarily Node.js.

00:16:01.480 --> 00:16:07.180
So, it was really like writing almost like an Electron app, right?

00:16:07.180 --> 00:16:07.720
Yes.

00:16:07.720 --> 00:16:08.220
Yeah, okay.

00:16:08.220 --> 00:16:08.960
That is correct.

00:16:08.960 --> 00:16:16.360
So, if you want to write any extensions for Visual Studio Code, you've got to do it in Node.js.

00:16:16.360 --> 00:16:18.400
So, Node.js is the framework.

00:16:18.400 --> 00:16:21.480
The language is TypeScript.

00:16:21.480 --> 00:16:25.660
So, TypeScript is a language that Microsoft have developed.

00:16:25.660 --> 00:16:28.260
It's basically a superset of JavaScript.

00:16:28.260 --> 00:16:30.180
So, those who don't know what TypeScript is.

00:16:30.180 --> 00:16:33.180
Right, like adding static typing to JavaScript in a sense.

00:16:33.180 --> 00:16:34.340
A little bit more, too.

00:16:34.340 --> 00:16:34.880
Precisely.

00:16:34.880 --> 00:16:35.240
Yeah.

00:16:35.240 --> 00:16:35.540
Yes.

00:16:35.540 --> 00:16:36.320
That's right.

00:16:36.320 --> 00:16:36.680
Okay.

00:16:36.680 --> 00:16:37.460
Yeah, interesting.

00:16:37.460 --> 00:16:37.900
Interesting.

00:16:37.900 --> 00:16:40.080
So, you talked about PyCharm.

00:16:40.080 --> 00:16:41.440
You said there was Sublime.

00:16:41.440 --> 00:16:42.900
Like, what...

00:16:42.900 --> 00:16:45.780
Why didn't you pick and just go like, oh, let's use Sublime over here.

00:16:45.780 --> 00:16:47.500
Like, that works on both platforms as well.

00:16:47.640 --> 00:16:49.900
For some reason, I never did like Sublime.

00:16:49.900 --> 00:16:50.740
I don't know.

00:16:50.740 --> 00:16:54.440
I guess it's just the font and the way the IntelliSense was displayed.

00:16:54.440 --> 00:16:55.200
I don't know.

00:16:55.200 --> 00:17:00.920
As I mentioned, as a Visual Studio developer, the look and feel was completely different.

00:17:00.920 --> 00:17:04.160
So, I preferred the way Visual Studio laid things out.

00:17:04.160 --> 00:17:08.980
Whereas Sublime, I was still getting used to using editors.

00:17:08.980 --> 00:17:10.260
PyCharm was an IDE.

00:17:10.980 --> 00:17:15.440
Sublime was an editor and it just didn't feel rich and powerful enough to me.

00:17:15.440 --> 00:17:17.120
So, it was just preference.

00:17:17.120 --> 00:17:17.660
All right.

00:17:17.660 --> 00:17:18.260
Sounds good.

00:17:18.260 --> 00:17:23.680
So, your project, when I first talked to you, it had over 600 stars on GitHub.

00:17:23.680 --> 00:17:25.820
That's a pretty serious project.

00:17:26.260 --> 00:17:26.540
Yeah.

00:17:26.540 --> 00:17:27.340
635.

00:17:27.340 --> 00:17:30.460
So, what's it been like to...

00:17:30.460 --> 00:17:32.240
And all the code for this is on GitHub, right?

00:17:32.240 --> 00:17:33.000
Yes, it is.

00:17:33.000 --> 00:17:33.400
Yeah.

00:17:33.400 --> 00:17:33.720
Okay.

00:17:33.720 --> 00:17:34.360
Cool.

00:17:34.360 --> 00:17:38.340
What's it been like to run a project with that much popularity?

00:17:38.340 --> 00:17:42.500
Have you been getting a lot of feedback from the community or people helping out?

00:17:42.500 --> 00:17:43.100
Oh, yes.

00:17:43.100 --> 00:17:44.940
I've been getting quite a lot of feedback.

00:17:44.940 --> 00:17:54.260
And, like, for instance, plenty of people provide the feedback while submitting issues on GitHub or maybe on the extensions page.

00:17:54.260 --> 00:18:03.380
And it's very humbling to know that this little pet project of mine has made a big difference in the development experience of people in the professional workspace.

00:18:03.380 --> 00:18:13.760
So, for instance, when people say that they've switched over from Sublime or some other IDE because of Feature X, Y, Z, it feels really great.

00:18:13.760 --> 00:18:19.460
And there are others who talk about the efficiency of the extension or they say that they love Visual Studio Code.

00:18:19.460 --> 00:18:22.980
And for me, it's a person who just loves Microsoft products.

00:18:22.980 --> 00:18:24.880
I'm like, oh, wow, this is really good.

00:18:24.880 --> 00:18:28.480
Something Microsoft has done really well and is finally doing well.

00:18:28.640 --> 00:18:36.280
Yeah, it's definitely interesting in that they seem to have given up on the idea of, like, the answer is always a Windows.

00:18:36.280 --> 00:18:37.180
Now, what's the question?

00:18:37.180 --> 00:18:38.140
You know?

00:18:38.140 --> 00:18:41.440
And just trying to be more part of the community.

00:18:41.440 --> 00:18:46.340
And I think this is one of the places where we're starting to see some cool things out of that.

00:18:48.280 --> 00:18:50.900
This portion of Talk Python is brought to you by us.

00:18:50.900 --> 00:18:56.820
As many of you know, I have a growing set of courses to help you go from Python beginner to novice to Python expert.

00:18:56.820 --> 00:18:58.840
And there are many more courses in the works.

00:18:58.840 --> 00:19:03.100
So please consider Talk Python training for you and your team's training needs.

00:19:03.100 --> 00:19:09.520
If you're just getting started, I've built a course to teach you Python the way professional developers learn by building applications.

00:19:09.860 --> 00:19:14.600
Check out my Python jumpstart by building 10 apps at talkpython.fm/course.

00:19:14.600 --> 00:19:17.740
Are you looking to start adding services to your app?

00:19:17.740 --> 00:19:20.960
Try my brand new consuming HTTP services in Python.

00:19:20.960 --> 00:19:26.340
You'll learn to work with RESTful HTTP services as well as SOAP, JSON, and XML data formats.

00:19:26.340 --> 00:19:28.180
Do you want to launch an online business?

00:19:28.180 --> 00:19:32.380
Well, Matt McKay and I built an entrepreneur's playbook with Python for Entrepreneurs.

00:19:32.380 --> 00:19:37.620
This 16-hour course will teach you everything you need to launch your web-based business with Python.

00:19:37.760 --> 00:19:41.160
And finally, there's a couple of new course announcements coming really soon.

00:19:41.160 --> 00:19:46.620
So if you don't already have an account, be sure to create one at training.talkpython.fm to get notified.

00:19:46.620 --> 00:19:50.400
And for all of you who have bought my courses, thank you so much.

00:19:50.400 --> 00:19:52.340
It really, really helps support the show.

00:19:52.340 --> 00:19:55.580
So how many contributors are working on the project?

00:19:55.580 --> 00:20:01.340
If you were to look at the total number of contributors, I believe there are around 200, sorry, 29 contributors.

00:20:01.340 --> 00:20:01.880
Okay, cool.

00:20:01.880 --> 00:20:06.660
And do you have the concept of a core development team?

00:20:06.780 --> 00:20:08.920
Or are you just managing it yourself among all these people?

00:20:08.920 --> 00:20:09.720
Or how does it work?

00:20:09.720 --> 00:20:11.260
Unfortunately, it's just myself.

00:20:11.260 --> 00:20:17.500
So the other contributors just contribute maybe some of them just fixes or typos here and there.

00:20:17.500 --> 00:20:27.060
And I would say the major contribution has been something like adding a new linter, for instance, adding prospector to the extension.

00:20:27.060 --> 00:20:30.140
So it's just here and there.

00:20:30.220 --> 00:20:33.940
But I have to acknowledge the fact that they are significant contributions.

00:20:33.940 --> 00:20:35.600
Yeah, I'm sure it's great to have all the help.

00:20:35.600 --> 00:20:38.020
So, yeah, you brought up some of the features.

00:20:38.020 --> 00:20:39.100
Let's go ahead and talk about them.

00:20:39.100 --> 00:20:42.180
Like one of the things that you have in there is linting.

00:20:42.180 --> 00:20:45.320
And you said like somebody added just prospector.

00:20:45.320 --> 00:20:46.180
So what's the story?

00:20:46.180 --> 00:20:48.580
And maybe just for people who don't know, like what is linting?

00:20:48.680 --> 00:20:51.060
And then tell people about some of the options there.

00:20:51.060 --> 00:20:51.440
Yes.

00:20:51.440 --> 00:21:00.020
Linting is basically just the ability to see what all of the error messages are, the errors that you could have in your program.

00:21:00.020 --> 00:21:09.060
For instance, if you've written a Python code, block of code, if something isn't indented properly, or if you've got some typos, some keywords are misspelled.

00:21:09.460 --> 00:21:16.840
So this is where the linters would come in and tell you before the program is run, hey, these are potential issues.

00:21:16.840 --> 00:21:20.320
Here are some warnings or these are some definite errors.

00:21:20.320 --> 00:21:22.920
So you've got different sorts of categories.

00:21:22.920 --> 00:21:28.540
So basically a linter is kind of like a pre-compiled time error checker.

00:21:28.540 --> 00:21:31.160
There's a number of tools in the Python space.

00:21:31.160 --> 00:21:33.220
Which ones are built in or do you have support for?

00:21:33.220 --> 00:21:37.460
In the Python space, there are plenty of packages that provide linting capabilities.

00:21:37.460 --> 00:21:46.240
So for instance, if I'm not mistaken, the most popular ones are PyLint, Prospector, PyDocStyle, Flake8, and so on and so forth.

00:21:46.240 --> 00:21:49.320
So if I were to look at these linters, there are two categories.

00:21:49.320 --> 00:21:51.420
One is that checks for formatting.

00:21:51.420 --> 00:21:56.740
And the other one is that looks at your code itself to check whether there are errors within the code.

00:21:56.740 --> 00:21:57.060
Yeah.

00:21:57.060 --> 00:22:00.400
So on one hand, you might have like PEP 8 checks, right?

00:22:00.400 --> 00:22:03.340
For like there should be no space after this comma.

00:22:03.340 --> 00:22:05.900
There should be no extra parentheses or whatever.

00:22:05.900 --> 00:22:08.860
And the others might be like, here's an unused variable.

00:22:08.860 --> 00:22:10.680
Is that a problem, right?

00:22:10.680 --> 00:22:13.860
Those are maybe the two categories if you put some examples on it, right?

00:22:13.860 --> 00:22:14.600
That's correct.

00:22:14.600 --> 00:22:22.360
So what's really great is I don't really have to write much code because people or communities out there have built these tools.

00:22:22.540 --> 00:22:32.600
All I'm doing is utilizing those and displaying those results through Visual Studio Code, just surfacing it through Visual Studio Code in a consistent manner.

00:22:32.600 --> 00:22:39.880
So this is where, again, Visual Studio Code really excels because it provides a consistent look and feel across all languages.

00:22:39.880 --> 00:22:46.020
So whether you're using C#, TypeScript, or any other language, the error messages would be displayed in the same way.

00:22:46.020 --> 00:22:46.400
I see.

00:22:46.400 --> 00:22:51.840
And you just, your extension plugs into that error message notification system or whatever, right?

00:22:51.840 --> 00:22:52.260
Yes.

00:22:52.260 --> 00:22:53.000
Yes, it does.

00:22:53.000 --> 00:22:53.340
Nice.

00:22:54.020 --> 00:22:54.300
Okay.

00:22:54.300 --> 00:22:56.300
So linting, built-in, that's pretty awesome.

00:22:56.300 --> 00:22:58.260
And lots of support for different linters.

00:22:58.260 --> 00:22:58.720
Cool.

00:22:58.720 --> 00:23:04.140
And then we have IntelliSense or autocompletion, including support for type-ins, right?

00:23:04.140 --> 00:23:04.600
Yes.

00:23:04.600 --> 00:23:06.160
So, yeah, let's talk about that a bit.

00:23:06.520 --> 00:23:12.620
This one's supported, again, through a Python package that's been developed by David Halter.

00:23:12.620 --> 00:23:13.940
Is it David Halter?

00:23:13.940 --> 00:23:16.560
Sorry if I'm not pronouncing his name correctly.

00:23:16.560 --> 00:23:24.560
But, yes, it's a great little package because all of the hard work has been done by this particular package.

00:23:24.560 --> 00:23:25.160
Oh, nice.

00:23:25.160 --> 00:23:26.200
And it's called JEDI, right?

00:23:26.200 --> 00:23:27.200
Yes, it's called JEDI.

00:23:27.200 --> 00:23:27.280
Okay.

00:23:27.280 --> 00:23:30.040
So it was developed by this individual.

00:23:30.500 --> 00:23:36.060
And this particular package is used today in a couple of other editors as well.

00:23:36.060 --> 00:23:37.640
I know Atom uses it.

00:23:37.640 --> 00:23:38.900
Sublime uses it.

00:23:38.900 --> 00:23:46.920
Including, if I'm not mistaken, PyCharm 2 uses it to provide IntelliSense when you're debugging Python code.

00:23:46.920 --> 00:23:50.460
It's a serious package that's used by some major players out there.

00:23:50.460 --> 00:23:57.000
So, and I've made use of it as well to provide the IntelliSense capabilities for the extension.

00:23:57.000 --> 00:23:58.560
It's not just IntelliSense.

00:23:58.800 --> 00:24:04.020
It gives you the ability to inspect your code and understand the structure of your code as well.

00:24:04.020 --> 00:24:12.600
Yeah, I was pretty impressed, like, how much of the structure of, like, if I'm working on a package, it understands my code, not just the standard library and things like that.

00:24:12.600 --> 00:24:13.140
Yes.

00:24:13.140 --> 00:24:16.840
So as mentioned, it's a really great, great little package.

00:24:16.840 --> 00:24:19.020
So kudos to David.

00:24:19.020 --> 00:24:24.540
Yeah, and that's awesome that you're not necessarily starting from scratch, but you're able to build on this really mature thing.

00:24:24.540 --> 00:24:30.200
And benefits to or improvements to Jedi are improvements to your tooling as well, right?

00:24:30.200 --> 00:24:30.620
Yes.

00:24:30.620 --> 00:24:39.480
I think it was sometime mid to late last year that's when he added support for PEP 484 in a new version.

00:24:39.860 --> 00:24:46.120
And yes, so I got the benefit of supporting PEP 484 in the extension.

00:24:46.120 --> 00:24:51.520
So people don't really realize that the support comes through another Python package.

00:24:51.520 --> 00:24:54.620
They just assume, oh, wow, the extension now supports this.

00:24:54.620 --> 00:24:56.220
Well, in fact, yes, it does.

00:24:56.420 --> 00:24:58.540
But again, thanks to the Jedi plugin.

00:24:58.540 --> 00:25:00.420
Yeah, that's really, really cool.

00:25:00.420 --> 00:25:04.700
You can look good just building on the shoulders of giants, as they say, right?

00:25:04.700 --> 00:25:05.240
Yes, yes.

00:25:05.240 --> 00:25:05.880
Cool.

00:25:05.880 --> 00:25:10.400
And then you have support for PySpark and things like Jupyter and IPython notebooks, too.

00:25:10.400 --> 00:25:11.120
Yes.

00:25:11.120 --> 00:25:12.040
What's that look like?

00:25:12.040 --> 00:25:17.340
Support for PySpark and Jupyter is really very basic at this stage.

00:25:17.340 --> 00:25:25.080
So what we do is we can execute certain code against one of these engines and the results,

00:25:25.080 --> 00:25:29.040
whether they are just raw output or whether you've got graphical output can be displayed.

00:25:29.040 --> 00:25:32.560
So you could have two forms of graphical output.

00:25:32.560 --> 00:25:39.240
One is just a static graph or the other one is a graph that you can interact with or interactive graphs.

00:25:39.240 --> 00:25:40.780
So those are supported as well.

00:25:41.580 --> 00:25:46.780
And the reason this was added is because sometime around mid to late last year, I noticed,

00:25:46.780 --> 00:25:50.660
oh, we, when I say we, it's back then I was working at Microsoft.

00:25:50.660 --> 00:25:57.580
We noticed that there was quite a lot of interest in the data science community for Python developers.

00:25:57.580 --> 00:26:08.540
And that's when we felt, okay, we need to add some tooling around that space so that we could draw the data science community into the Visual Studio editor.

00:26:08.540 --> 00:26:14.200
And also the Azure team, the Azure data science team does a lot of stuff with Python as well, right?

00:26:14.200 --> 00:26:14.860
That's correct.

00:26:14.860 --> 00:26:16.420
They use the PySpark.

00:26:16.420 --> 00:26:18.620
They use PySpark for some of their work.

00:26:18.620 --> 00:26:25.360
In fact, they had made some contributions to the extension to resolve some issues to ensure it worked properly with PySpark.

00:26:25.360 --> 00:26:25.740
All right.

00:26:25.740 --> 00:26:28.920
So another thing you have, obviously, is auto-indenting.

00:26:28.920 --> 00:26:30.720
Like how much work was that?

00:26:30.720 --> 00:26:31.720
How did you pull that off?

00:26:31.720 --> 00:26:35.500
That's the one thing where I'm like, oh, I can't use Visual Studio Code for Python,

00:26:35.500 --> 00:26:40.100
even though I thought it was cool because it just didn't understand how to work with the structure, right?

00:26:40.100 --> 00:26:42.840
It's interesting that you ask how much work went into that.

00:26:42.840 --> 00:26:44.920
In fact, very little work went in there.

00:26:44.920 --> 00:26:48.320
But if I'm not mistaken, maybe half a page of code or even less.

00:26:48.320 --> 00:26:51.480
Again, this is where Visual Studio Code excels.

00:26:51.600 --> 00:26:59.460
It just provides the capability for me to give it the rules for indentation with the use of regular expressions.

00:26:59.460 --> 00:27:01.820
And that's exactly what I did.

00:27:01.820 --> 00:27:04.180
And Visual Studio Code just handles the rest.

00:27:04.180 --> 00:27:09.240
So it was a really simple bit of a simple block of code.

00:27:09.240 --> 00:27:11.280
And Visual Studio Code does everything.

00:27:11.280 --> 00:27:11.780
Okay.

00:27:11.780 --> 00:27:12.380
Yeah.

00:27:12.380 --> 00:27:13.040
Very, very cool.

00:27:13.040 --> 00:27:15.280
It's nice that that's built in, right?

00:27:15.280 --> 00:27:17.400
That makes adding these extensions to be cool.

00:27:17.400 --> 00:27:17.960
Oh, yes.

00:27:18.160 --> 00:27:19.640
It made my life easy as well.

00:27:19.640 --> 00:27:21.300
So I wouldn't have to just tab, tab.

00:27:21.300 --> 00:27:22.940
And it was just awesome.

00:27:22.940 --> 00:27:23.600
Cool.

00:27:23.600 --> 00:27:28.260
And you also have like code formatting, like code cleanup, kind of almost like linting.

00:27:28.260 --> 00:27:28.960
Yes.

00:27:28.960 --> 00:27:31.340
Code formatting, just like linting, as you mentioned.

00:27:31.340 --> 00:27:35.120
We've got two popular linters out there, Autopef8 and YapF.

00:27:35.360 --> 00:27:39.380
So once again, I'm not doing much of the work, if at all any.

00:27:39.380 --> 00:27:42.300
I'm just making use of some pre-built packages.

00:27:42.300 --> 00:27:50.860
So take the packages that someone out there has built and provide the capabilities in Visual Studio Code.

00:27:51.140 --> 00:27:57.620
So the developer using Visual Studio Code can choose the format of choice, either Autopef8 or YapF.

00:27:57.620 --> 00:27:59.700
And they could configure it as well.

00:27:59.700 --> 00:28:06.480
They could configure Autopef8 or YapF by using the corresponding configuration files and adding it into the project directory.

00:28:06.480 --> 00:28:07.120
Oh, great.

00:28:07.120 --> 00:28:07.340
Yeah.

00:28:07.340 --> 00:28:09.840
I just put like a config file right there and it just works.

00:28:09.840 --> 00:28:10.260
It just works.

00:28:10.260 --> 00:28:10.700
That's correct.

00:28:10.700 --> 00:28:11.600
That is the intention.

00:28:11.600 --> 00:28:11.920
Yes.

00:28:12.240 --> 00:28:12.680
That's nice.

00:28:12.680 --> 00:28:14.780
And it integrates with the command line that way as well.

00:28:14.780 --> 00:28:21.440
So like if you do it in Visual Studio Code, it'll pick up the config files, but also like automated builds or something, huh?

00:28:21.440 --> 00:28:21.840
Yes.

00:28:21.840 --> 00:28:33.380
So when developing this extension, one of the main requirements was people should be able to use either PyCharm or Sublime or whatever editor they prefer.

00:28:33.380 --> 00:28:38.240
We're not trying to restrict users to keep using Visual Studio Code.

00:28:38.480 --> 00:28:47.380
There are a few places where you'd have to add custom settings into Visual Studio Code, but as much as possible, you're not tied to Visual Studio Code.

00:28:47.380 --> 00:28:50.360
Yeah, that's a really great goal or thing to keep in mind.

00:28:50.360 --> 00:28:51.860
Nice.

00:28:51.860 --> 00:28:55.060
And you have pretty decent refactoring support as well.

00:28:55.060 --> 00:28:58.160
Not all the refactorings maybe, but the most popular ones, right?

00:28:58.160 --> 00:28:58.640
Yes.

00:28:58.640 --> 00:28:59.320
What does it support?

00:28:59.620 --> 00:29:08.280
The most popular ones that we felt was necessary was renaming a method name or function or variable.

00:29:08.280 --> 00:29:11.940
So it's rename and extracting variables and extracting methods.

00:29:11.940 --> 00:29:16.960
So those are the three main or two main refactoring capabilities that we wanted to add.

00:29:16.960 --> 00:29:20.940
And once again, I didn't have to do much in there.

00:29:21.320 --> 00:29:25.200
I just made use of a popular package named Rope.

00:29:25.200 --> 00:29:26.780
So this is Rope for Python.

00:29:26.780 --> 00:29:30.420
And that provides all of the refactoring capabilities.

00:29:30.420 --> 00:29:38.620
Apart from the rename and extract refactoring capabilities, there's also the sorting of imports.

00:29:39.000 --> 00:29:44.920
So again, I just made use of iSort package, which does the sorting of the imports.

00:29:44.920 --> 00:29:45.500
So yes.

00:29:45.500 --> 00:29:46.160
Oh, that's excellent.

00:29:46.160 --> 00:29:52.780
You said that there was something about the maintainer with Rope that it's a great package, but it was like it had gone dormant or something?

00:29:52.780 --> 00:29:53.420
Yes.

00:29:53.420 --> 00:29:56.500
When I started using Rope, I came across a couple of issues.

00:29:56.500 --> 00:30:04.600
And then what I did was, as any other developer was, just raise those issues on GitHub and then notice that it wasn't getting looked at.

00:30:04.600 --> 00:30:06.940
That's when I learned that it had gone fairly dormant.

00:30:06.940 --> 00:30:14.300
And after getting in touch with the contributor, I learned that he was unable to maintain it.

00:30:14.300 --> 00:30:17.660
And that's when they were looking for, he was looking for another contributor.

00:30:17.660 --> 00:30:28.940
So it was, I've got to bring this out because it's really sad that you've got such popular tools that's in the public space that are used by, well, hundreds of users and plenty of people rely on them.

00:30:28.940 --> 00:30:32.560
And you only have just one contributor.

00:30:33.340 --> 00:30:38.600
So it's really important that we all pitch in and try to pitch in as contributors.

00:30:38.600 --> 00:30:40.200
And it can be hard, too.

00:30:40.200 --> 00:30:45.040
You know, like there have been a few things where I'm like, oh, this just needs a little tweak and it would be nicer.

00:30:45.040 --> 00:30:48.960
And I'll do like, I'll raise an issue on GitHub or I'll do a pull request.

00:30:48.960 --> 00:30:53.040
It feels the worst when you like, you go fork the repo, you'd make the fix.

00:30:53.040 --> 00:30:54.620
You're like, yeah, this is like really good now.

00:30:54.700 --> 00:31:02.580
And you do a PR and like people aren't even bothered to even like merge it, you know, you're like, oh, but it's like so close.

00:31:02.580 --> 00:31:03.380
Just press merge.

00:31:03.380 --> 00:31:04.660
It won't even conflict, you know.

00:31:04.660 --> 00:31:05.200
And yes.

00:31:05.200 --> 00:31:06.380
And what do you do?

00:31:06.380 --> 00:31:07.260
I mean, it's tough.

00:31:07.260 --> 00:31:09.520
But on the flip side, right?

00:31:09.520 --> 00:31:13.220
Like these people have lives beyond the projects that they create.

00:31:13.300 --> 00:31:18.440
And so you can't really be too upset with somebody for not maintaining a thing for free.

00:31:18.440 --> 00:31:19.440
Yes.

00:31:19.440 --> 00:31:19.980
Yes.

00:31:19.980 --> 00:31:23.080
It's just the challenge of open source.

00:31:23.080 --> 00:31:24.280
Do you think that's going to grow?

00:31:24.280 --> 00:31:32.460
I sort of feel like as open source grows and more people come into this community and this way of working, that it's going to actually be a bigger problem.

00:31:32.460 --> 00:31:33.820
I wouldn't say it's a problem.

00:31:33.820 --> 00:31:38.620
It's just the responsibility falls on us, on us developers who are using it.

00:31:38.620 --> 00:31:40.420
So we've got to pitch back.

00:31:40.420 --> 00:31:42.760
We've got to pitch in as well.

00:31:43.020 --> 00:31:45.580
So it's a little bit of give and take.

00:31:45.580 --> 00:31:48.860
So if we're going to take something from the community, we need to give something back as well.

00:31:48.860 --> 00:31:58.660
So we need to be, we need to take the time to contribute, to help the contributors, to resolve issues or, you know, look at some of the questions.

00:31:58.660 --> 00:32:02.920
Because I can see quite a lot of that happening in my project.

00:32:02.920 --> 00:32:06.320
Plenty of people just come in and they answer questions that other people have.

00:32:06.320 --> 00:32:07.460
And it's really great.

00:32:07.460 --> 00:32:08.280
It's really great.

00:32:08.280 --> 00:32:10.460
I guess that's what we need a lot more of.

00:32:10.460 --> 00:32:10.880
Yeah.

00:32:10.880 --> 00:32:11.320
Nice.

00:32:11.320 --> 00:32:11.760
Okay.

00:32:12.040 --> 00:32:18.180
Another thing that you have built in is viewing references and code navigation and viewing signatures and stuff.

00:32:18.180 --> 00:32:23.380
And that's, you see, that also is basically just standing on the shoulders of Jedi, right?

00:32:23.380 --> 00:32:24.120
That's correct.

00:32:24.120 --> 00:32:27.620
Again, Jedi is one package that's developed by David.

00:32:27.820 --> 00:32:31.780
So it provides the ability to look at your code.

00:32:31.780 --> 00:32:34.700
So when you say look at your code, it gives you the structure of your code.

00:32:34.700 --> 00:32:39.900
And that's where you have the ability to look at the references, code navigation, or signatures.

00:32:39.900 --> 00:32:40.380
Nice.

00:32:40.500 --> 00:32:41.840
So code navigation and signatures.

00:32:41.840 --> 00:32:43.180
That's pretty explanatory.

00:32:43.180 --> 00:32:44.260
Viewing references.

00:32:44.260 --> 00:32:51.800
You mean if I write a function or a class or something showing all the places in which it's used in the rest of the code across my other files.

00:32:52.020 --> 00:32:52.520
That's correct.

00:32:52.520 --> 00:32:53.000
Okay.

00:32:53.000 --> 00:32:53.560
Yeah.

00:32:53.560 --> 00:32:54.060
Pretty excellent.

00:32:54.060 --> 00:32:54.560
Yes.

00:32:54.560 --> 00:33:02.840
So this is where, again, Visual Studio Code is really great because it provides a very consistent way of navigating or viewing references.

00:33:03.260 --> 00:33:07.540
So whatever, irrespective of your language, the UX is consistent.

00:33:07.540 --> 00:33:15.520
Whereas if you were to go to something, if I'm not mistaken, in Atom, there is no consistent UX for viewing references.

00:33:15.520 --> 00:33:21.980
Because each developer, each author of extensions, they've got to build their own UI around these things.

00:33:21.980 --> 00:33:24.440
So if I'm not mistaken, that's how it is.

00:33:24.440 --> 00:33:38.780
It is pretty cool that I could be there working on, like, a Python web app, and the CSS support and the JavaScript support and the Python support and the HTML support all have the same basic gestures and UIs and way of doing things.

00:33:38.780 --> 00:33:41.660
That's a cool extension system they've built in.

00:33:41.660 --> 00:33:42.080
Very nice.

00:33:42.080 --> 00:33:42.540
Yes.

00:33:42.540 --> 00:33:44.820
So you have some pretty serious debugging support.

00:33:44.820 --> 00:33:49.460
When I read that, I thought, wow, you guys are really adding a lot of interesting things.

00:33:49.460 --> 00:33:57.220
So on your page, it says you have excellent debugging support, including remote debugging over SSH, multiple threads, Django, Flask, and so on.

00:33:57.220 --> 00:33:58.200
How did you pull that off?

00:33:58.200 --> 00:34:00.160
I have to say this is one of my favorite features.

00:34:00.160 --> 00:34:04.440
I say it's one of my favorites simply because it's something that I use quite a lot of.

00:34:04.440 --> 00:34:07.120
And it made my life a lot easier as well.

00:34:07.120 --> 00:34:10.020
Initially, I have to say, just add a little bit of history.

00:34:10.020 --> 00:34:12.940
The debugger was built on PDD.

00:34:13.720 --> 00:34:19.960
And then once I added the debugger, I noticed that plenty of people were using it and commenting on some of the issues.

00:34:19.960 --> 00:34:22.600
And then I realized, oh, wow, plenty of people are using this.

00:34:22.600 --> 00:34:26.900
And back then, I was looking for a way to improve the debugging capabilities.

00:34:26.900 --> 00:34:31.540
And at that time, I was using both PyCharm and PTVS.

00:34:31.540 --> 00:34:33.460
So that's Python tools for Visual Studio.

00:34:33.820 --> 00:34:40.200
When I looked at the source code for PTVS, I realized that their debugger was built completely in Python.

00:34:40.200 --> 00:34:44.020
And that's when, you know, a light bulb went ding.

00:34:44.020 --> 00:34:50.960
And I was like, oh, since I've used all of these packages for IntelliSense and Linting, I could do the same here as well.

00:34:51.140 --> 00:34:58.980
So all I did was took this Python package, Python code, and built a debugger around that.

00:34:58.980 --> 00:35:09.980
So again, thanks to Microsoft and the PTVS team, the support for debugging is awesome in this, simply because of the awesome work that they've done in PTVS.

00:35:09.980 --> 00:35:10.820
Yeah, that's really cool.

00:35:10.820 --> 00:35:11.860
You're able to pull it out of there.

00:35:11.860 --> 00:35:16.640
And the Python tools for Visual Studio, that's like the big, more heavyweight IDE that runs on Windows.

00:35:16.640 --> 00:35:18.340
That's also open source, isn't it?

00:35:18.340 --> 00:35:19.200
Yes, it is.

00:35:19.300 --> 00:35:23.380
Yeah, okay, so that was pretty easy for you to kind of merge those things together.

00:35:23.380 --> 00:35:23.940
Yes.

00:35:23.940 --> 00:35:38.260
This portion of Talk Python To Me is brought to you by Hired.

00:35:38.260 --> 00:35:41.280
Hired is the platform for top Python developer jobs.

00:35:41.280 --> 00:35:46.080
Create your profile and instantly get access to 3,500 companies who will work to compete with you.

00:35:46.080 --> 00:35:48.960
Take it from one of Hired's users who recently got a job and said,

00:35:48.960 --> 00:35:54.260
I had my first offer on Thursday after going live on Monday, and I ended up getting eight offers in total.

00:35:54.260 --> 00:35:57.720
I've worked with recruiters in the past, but they've always been pretty hit and miss.

00:35:57.720 --> 00:36:00.560
I tried LinkedIn, but I found Hired to be the best.

00:36:00.560 --> 00:36:02.640
I really liked knowing the salary up front.

00:36:02.640 --> 00:36:05.020
Privacy was also a huge seller for me.

00:36:05.020 --> 00:36:06.700
Sounds awesome, doesn't it?

00:36:06.700 --> 00:36:08.700
Well, wait until you hear about the sign-in bonus.

00:36:08.700 --> 00:36:12.120
Everyone who accepts a job from Hired gets $1,000 sign-in bonus.

00:36:12.380 --> 00:36:14.780
And as Talk Python listeners, it gets way sweeter.

00:36:14.780 --> 00:36:20.020
Use the link Hired.com slash Talk Python To Me, and Hired will double the signing bonus to $2,000.

00:36:20.020 --> 00:36:21.820
Opportunities knocking.

00:36:21.820 --> 00:36:25.580
Visit Hired.com slash Talk Python To Me and answer the door.

00:36:32.720 --> 00:36:35.640
And of course, unit testing with all the frameworks.

00:36:35.640 --> 00:36:36.880
Yes, unit testing.

00:36:36.880 --> 00:36:39.640
It supports the three major frameworks.

00:36:39.640 --> 00:36:42.220
Unit tests, built into Python.

00:36:42.220 --> 00:36:44.000
There's pytest and NoseTest.

00:36:44.000 --> 00:36:48.340
So initially, I started out with just adding support for unit tests,

00:36:48.340 --> 00:36:53.300
and then found that adding support for pytest and NoseTest was very easy as well.

00:36:53.460 --> 00:37:00.360
So just as the linters and formaters, these are just treated as separate packages.

00:37:00.360 --> 00:37:05.660
So all we do is we just need, if one were to run unit tests as a Python developer,

00:37:05.660 --> 00:37:08.660
you could just go into the command prompt and run these tests.

00:37:08.660 --> 00:37:10.860
So that's pretty much what I am doing.

00:37:10.860 --> 00:37:17.100
I'm just running these things in a shell and capturing the output and surfacing it to the user.

00:37:17.100 --> 00:37:23.360
Does it appear in like a console, or does it do more like highlight some of the code with coverage,

00:37:23.360 --> 00:37:28.440
or like does it affect the UI in the editor, or is it more like here's the console and the outcome?

00:37:28.440 --> 00:37:34.880
At this stage, it's primarily in a little console, because there is Microsoft, if I'm not mistaken,

00:37:34.880 --> 00:37:40.360
they do not have a consistent, they do not have a UI for unit tests.

00:37:40.360 --> 00:37:44.100
So back when I was working on this extension, which was last year, they did not have anything.

00:37:44.360 --> 00:37:51.080
So they were looking at adding support for some UI, because this is something they need across other languages as well.

00:37:51.080 --> 00:37:58.000
So just as, you know, viewing references or debugging, where you've got consistent look and feel for these capabilities,

00:37:58.000 --> 00:38:00.920
it's something that they didn't have for unit tests.

00:38:00.920 --> 00:38:03.020
So at this stage, it's just console window.

00:38:03.020 --> 00:38:04.500
Okay, yeah, that makes sense.

00:38:04.500 --> 00:38:08.820
And there's like a little console that can be in the bottom of the editor, a little like PyCharm, right?

00:38:08.820 --> 00:38:09.160
Yes.

00:38:09.160 --> 00:38:15.820
However, what we have added is for each class of method, there is something new.

00:38:15.820 --> 00:38:18.260
What we've got is we've got something called code lenses.

00:38:18.260 --> 00:38:26.360
Basically, it's just this floating link or floating text that you can click on to run or debug a unit test.

00:38:26.360 --> 00:38:28.040
It's fairly easy.

00:38:28.040 --> 00:38:33.800
Once you've got a block of code, and if it's a unit test, you've got some link within the code that you can click on.

00:38:33.800 --> 00:38:34.400
Oh, that's cool.

00:38:34.400 --> 00:38:38.440
There's like a little button next to the test method in your unit test itself.

00:38:38.440 --> 00:38:40.060
And you can just click that and run the one?

00:38:40.060 --> 00:38:41.740
Yes, that's correct.

00:38:41.740 --> 00:38:42.740
Oh, sweet.

00:38:42.740 --> 00:38:44.180
Do you have any support for profiling?

00:38:44.180 --> 00:38:45.080
At this stage?

00:38:45.080 --> 00:38:48.660
No, it's been it's something that's been requested by a number of people.

00:38:48.660 --> 00:38:50.800
So it's something that I'm looking at adding.

00:38:50.800 --> 00:38:53.580
So no, it isn't supported at this stage.

00:38:53.580 --> 00:38:53.940
Sure.

00:38:53.940 --> 00:38:54.840
Okay.

00:38:54.840 --> 00:39:02.420
One thing I thought was cool that seems like you support pretty well is virtual environments and Python versions and things like that.

00:39:02.420 --> 00:39:05.140
Do you want to talk about how whether you've got that or how it works?

00:39:05.140 --> 00:39:05.520
Yes.

00:39:05.520 --> 00:39:07.100
Virtual environments are supported.

00:39:07.280 --> 00:39:14.480
Now, initially, it took me a while to get this working because I would say it took a couple of iterations to get this working.

00:39:14.480 --> 00:39:19.220
The way virtual environments are supported is we and the extension.

00:39:19.220 --> 00:39:25.520
All I do is it's up to the developer to define the location of the virtual environment.

00:39:25.520 --> 00:39:29.760
So you could have virtual environments within the project directory or somewhere else.

00:39:29.760 --> 00:39:31.260
So I have no idea.

00:39:31.260 --> 00:39:32.820
I'm not going to try looking for it.

00:39:32.820 --> 00:39:36.460
It's up to the developer to define it in the settings file.

00:39:36.460 --> 00:39:41.980
So this is one of those places where you have custom Visual Studio code-specific settings.

00:39:41.980 --> 00:39:44.980
It's a file named settings.json.

00:39:44.980 --> 00:39:48.720
You define the path and the name of the setting is Python path.

00:39:48.720 --> 00:39:52.740
So you define the name, the path to the Python interpreter.

00:39:52.740 --> 00:39:57.480
To make lives easier, what we've got is we've got a little shortcut.

00:39:57.480 --> 00:40:06.180
So you could go into this particular menu item and launch a particular command palette which says select the Python interpreter.

00:40:06.360 --> 00:40:18.920
So what we do is, in the extension, try to look for the common locations where you could have your Python interpreters or your virtual environments, whether it's in the current directory or some other known locations.

00:40:18.920 --> 00:40:22.240
We look through those directories and list it out to you.

00:40:22.300 --> 00:40:25.940
So all you have to do is, from that list box, you just select it and done.

00:40:25.940 --> 00:40:28.660
If it's not there, you'd have to just manually type it.

00:40:28.660 --> 00:40:30.240
And yeah, that's it.

00:40:30.460 --> 00:40:38.100
Yeah, that's pretty nice because I do almost all of my, at least my web projects, almost all of them from, you know, each website gets its own virtual directory.

00:40:38.100 --> 00:40:45.300
And having that there, I'm like, oh, I don't know if I can edit this thing because of Visual Studio code because it's all the stuff that's installed over here.

00:40:45.300 --> 00:40:45.800
I'm like, oh, wait.

00:40:45.800 --> 00:40:47.160
Yeah, I totally have support for that.

00:40:47.160 --> 00:40:47.580
It's very cool.

00:40:48.680 --> 00:40:51.820
Yeah, and you also have like little Python terminals and local help.

00:40:51.820 --> 00:40:52.660
Those are all great.

00:40:52.660 --> 00:40:55.920
And then I guess the last major feature is our snippets.

00:40:55.920 --> 00:40:59.100
What are snippets and what are the nice ones you got?

00:40:59.100 --> 00:41:09.320
Snippets, well, I wouldn't say they're nice ones, but it's basically certain snippets like having a try snippet or just for a class.

00:41:09.820 --> 00:41:12.780
So those are the kind of snippets that I have in there.

00:41:12.780 --> 00:41:17.540
I wouldn't say there are some really great snippets, but it's something that just makes life a little bit easier.

00:41:17.540 --> 00:41:17.940
I see.

00:41:17.940 --> 00:41:24.180
So I can type like try and hit tab and we'll expand out to try colon pass, accept expression as a dinner vehicle.

00:41:24.180 --> 00:41:24.600
All right.

00:41:24.600 --> 00:41:27.520
Or I could do, can I do like width?

00:41:27.520 --> 00:41:28.800
Yeah, like width blocks.

00:41:28.800 --> 00:41:30.060
And yeah.

00:41:30.060 --> 00:41:34.740
So just the common structures probably of if and whatnot.

00:41:34.740 --> 00:41:35.740
That's correct.

00:41:35.740 --> 00:41:36.000
Okay.

00:41:36.000 --> 00:41:37.240
Yeah, very nice.

00:41:37.240 --> 00:41:38.280
Can we add our own?

00:41:39.140 --> 00:41:40.380
If we're like, oh, this is cool.

00:41:40.380 --> 00:41:43.280
I'd like to have it do this when I hit tab and it doesn't.

00:41:43.280 --> 00:41:43.920
Good question.

00:41:43.920 --> 00:41:45.140
I have no idea.

00:41:45.140 --> 00:41:49.780
I haven't had this question been asked by anyone on GitHub.

00:41:49.780 --> 00:41:53.340
So I wouldn't be surprised if it were possible.

00:41:53.340 --> 00:41:54.520
However, I'm not sure.

00:41:54.520 --> 00:41:56.400
I have no idea to answer the question.

00:41:56.400 --> 00:41:57.180
I don't know.

00:41:57.180 --> 00:41:57.480
Yeah.

00:41:57.480 --> 00:41:58.880
That's a good question, though.

00:41:58.880 --> 00:41:59.820
All right.

00:41:59.820 --> 00:42:02.480
Well, maybe I'll file a GitHub issue and you can say yes here or no.

00:42:02.480 --> 00:42:03.040
We'll add it.

00:42:03.040 --> 00:42:03.800
Awesome.

00:42:04.560 --> 00:42:09.580
So it sounds to me like to some degree you've done, obviously, a large amount of work.

00:42:09.580 --> 00:42:21.000
But the really what makes it look like it would be extreme work, like the remote debugging, multi-threading over SSH shells and things like that come from other packages, actually.

00:42:21.000 --> 00:42:24.080
And so how much of this is like pulling other packages together?

00:42:24.440 --> 00:42:28.860
I would say majority of it, if not all of it, has been done by the other packages.

00:42:28.860 --> 00:42:37.040
Because as I mentioned earlier, the code is primarily written in Node.js or TypeScript because that's what Visual Studio Code is built on top of.

00:42:37.040 --> 00:42:48.120
And to provide the capabilities for individual language features like IntelliSense, debugging, linting, all of that is done through individual Python packages.

00:42:48.120 --> 00:42:51.200
So all I'm doing is just making use of them.

00:42:51.200 --> 00:42:51.940
That's really cool.

00:42:51.940 --> 00:43:01.640
How do you do the interprocess communication between like Python, the Python packages, and the Node.js stuff that is really running Visual Studio Code?

00:43:01.640 --> 00:43:05.980
So that's fairly simple for something such as linting or code formatting.

00:43:05.980 --> 00:43:17.420
All I'm doing is in the background, I'm just launching a particular process, a Python process, and running the corresponding Python package against a particular file or particular block of code.

00:43:17.420 --> 00:43:20.700
And I just capture the output and display it.

00:43:20.880 --> 00:43:23.800
For some of them, it's not as straightforward as that.

00:43:23.800 --> 00:43:33.740
For instance, with the debugger, what I've got to do is I start the Python package, which is the debugging package, and communicate with that process using sockets.

00:43:33.740 --> 00:43:34.080
Okay.

00:43:34.400 --> 00:43:35.700
So, for instance, it's different.

00:43:35.700 --> 00:43:39.980
Like, for instance, debugging and running unit tests, I'd use sockets.

00:43:39.980 --> 00:43:45.500
And the others, it's just basically simple communications, just reading the output from the…

00:43:45.500 --> 00:43:47.100
Just shell out and capture it, yeah.

00:43:47.100 --> 00:43:47.440
Yes.

00:43:47.440 --> 00:43:47.880
Okay.

00:43:48.660 --> 00:43:53.040
How much time did you spend on this, getting this all up and running, do you think?

00:43:53.040 --> 00:43:56.840
Like, how long from December until it's more or less looking like what it is now?

00:43:56.840 --> 00:43:59.320
Around May, it was…

00:43:59.320 --> 00:44:07.620
We had quite a lot of the capabilities built in, apart from running unit tests and adding support for PySpark and Jupyter.

00:44:07.960 --> 00:44:14.400
So, until then, there was plenty of support for linters, debugging, and code formatting.

00:44:14.400 --> 00:44:24.180
So, I would say half of it around May, and then the remainder was completed around November of last year.

00:44:24.180 --> 00:44:26.660
So, just under a year.

00:44:26.860 --> 00:44:28.920
It took just under a year to complete everything.

00:44:28.920 --> 00:44:29.460
That's…

00:44:29.460 --> 00:44:29.620
Yeah.

00:44:29.620 --> 00:44:30.640
And how many…

00:44:30.640 --> 00:44:31.680
That was mostly you, right?

00:44:31.680 --> 00:44:32.060
Yes.

00:44:32.060 --> 00:44:32.860
That's correct.

00:44:32.860 --> 00:44:33.460
So, yeah.

00:44:33.460 --> 00:44:37.180
That's a lot of cool stuff that you got out in that short amount of time.

00:44:37.180 --> 00:44:37.440
Nice.

00:44:37.440 --> 00:44:39.520
It was really interesting working on this.

00:44:39.520 --> 00:44:44.500
So, as I mentioned, when I started out this pet project of mine, it was just early.

00:44:44.500 --> 00:44:49.560
I was in the morning, and then over time, I learned, oh, it was getting really popular.

00:44:49.560 --> 00:44:53.680
And then that kept motivating me because there are plenty of people using it.

00:44:53.680 --> 00:44:55.220
Like, oh, well, this is really doing well.

00:44:55.340 --> 00:44:58.780
Let's just keep churning more code, putting more features in there.

00:44:58.780 --> 00:44:59.720
Yeah.

00:44:59.720 --> 00:45:00.360
That's awesome.

00:45:00.360 --> 00:45:07.620
I think two really motivating things about writing software are one of them is you get to either work with a really cool technology

00:45:07.620 --> 00:45:12.540
or the thing that you're actually building is a cool technology or some combination thereof.

00:45:12.540 --> 00:45:17.640
And the other is that lots of people use and appreciate whatever it is you build, right?

00:45:17.640 --> 00:45:18.480
Yes.

00:45:18.480 --> 00:45:25.200
I think the most important thing was the appreciation because even though there was plenty of people downloading it,

00:45:25.260 --> 00:45:30.340
I mean, getting to know that people appreciate the work that you've done, it makes a big difference.

00:45:30.340 --> 00:45:30.720
Yeah.

00:45:30.720 --> 00:45:31.260
I'm sure.

00:45:31.260 --> 00:45:36.880
And so, what other, you know, if you get something with a million downloads, what other opportunities come with that?

00:45:36.880 --> 00:45:40.600
Like, have people reached out to you to do cool stuff?

00:45:40.820 --> 00:45:43.880
I did get one opportunity and that was Microsoft.

00:45:43.880 --> 00:45:47.440
They approached me around early May last year.

00:45:47.440 --> 00:45:53.320
They approached me and they asked me if I would like to join the Visual Studio Code team and work full time on this extension

00:45:53.320 --> 00:46:01.880
because they saw that it was a great extension and they wanted me to spend full time on it so that it could be polished and it would be feature complete.

00:46:02.100 --> 00:46:09.580
When I say feature complete, we could take the time out to iron out some wrinkles and ensure it integrates well with Visual Studio Code.

00:46:09.580 --> 00:46:16.660
And also, if there was something that I wanted added into the co-product, I could, you know, do that myself as well.

00:46:16.660 --> 00:46:17.260
That's pretty awesome.

00:46:17.260 --> 00:46:19.260
So, that was, yeah, it was really great.

00:46:19.380 --> 00:46:26.800
So, that's when I gave up my 10-year role at a previous place and I was like, oh, yes, I will jump ship.

00:46:26.800 --> 00:46:29.700
Yeah, you get to just get paid to work on such a cool project.

00:46:29.700 --> 00:46:37.740
I've seen them do that before, hire people to basically continue to work on something they saw really valuable that was integrating kind of in the style.

00:46:37.740 --> 00:46:38.320
That's great.

00:46:38.320 --> 00:46:38.880
Yes.

00:46:38.880 --> 00:46:42.300
Are you still working there on it or are you kind of got it where it used to be?

00:46:42.300 --> 00:46:45.500
Oh, so, my contract ended last year.

00:46:45.500 --> 00:46:48.780
So, it was just a six-month contract, but no regrets there.

00:46:48.780 --> 00:46:52.200
So, enjoyed the time while working there, working for Microsoft.

00:46:52.200 --> 00:46:54.340
And so, I've moved on since then.

00:46:54.340 --> 00:46:54.920
Okay, cool.

00:46:54.920 --> 00:47:02.200
Now, I want to ask you about the other extensions you've written because you have a habit of writing Visual Studio Code extensions, apparently.

00:47:02.200 --> 00:47:03.460
There's some cool ones.

00:47:03.460 --> 00:47:03.700
Yes.

00:47:03.700 --> 00:47:08.360
But before I do, before I do, I want to ask you, is there a way to write extensions for your Python thing?

00:47:08.360 --> 00:47:14.940
Like, if I had something I wanted to add, is there a way, like, how can I change or extend what you've done?

00:47:15.000 --> 00:47:19.280
Do I have to go into a PR directly against it or is there some other way to get in there?

00:47:19.280 --> 00:47:20.240
It's just a PR.

00:47:20.240 --> 00:47:25.660
So, pull the report down to your local machine and then make the changes.

00:47:25.660 --> 00:47:28.020
So, as I mentioned, it's all done in Node.js.

00:47:28.020 --> 00:47:30.880
So, you've got to use TypeScript to make the changes.

00:47:30.880 --> 00:47:31.380
Nice.

00:47:31.380 --> 00:47:31.740
Okay.

00:47:31.740 --> 00:47:32.260
Very cool.

00:47:32.260 --> 00:47:32.920
So, all right.

00:47:32.920 --> 00:47:36.100
Let's just really briefly touch on some of the others that you've written.

00:47:36.100 --> 00:47:39.180
I'll just go through the major extensions that I've developed.

00:47:39.180 --> 00:47:41.440
One is the Java debugger.

00:47:42.160 --> 00:47:45.600
Back then, I was playing around a little bit with Java as well.

00:47:45.600 --> 00:47:53.280
And I was looking around for the ability to debug Java code.

00:47:53.280 --> 00:47:59.660
And I really hated Eclipse or the others because it was just too bulky and it took a long time to load up.

00:47:59.820 --> 00:48:08.660
By then, I had some experience with PDB and I figured I could build a Java debugger as well using the similar capability, similar concepts.

00:48:08.660 --> 00:48:10.000
And that's exactly what I did.

00:48:10.000 --> 00:48:12.260
So, I built a Java debugger.

00:48:12.260 --> 00:48:14.840
It's not as popular, but there are plenty of people using that.

00:48:15.660 --> 00:48:19.200
And the other extension is create unique IDs.

00:48:19.200 --> 00:48:25.960
Basically, it's just the ability to create unique IDs like GUIDs or random numbers and it inserts it into the text.

00:48:25.960 --> 00:48:28.780
Then there's BOA or Bauer.

00:48:28.780 --> 00:48:33.260
It's just a little tool to restore BOA packages.

00:48:34.100 --> 00:48:40.320
It was popular in the early days when Visual Studio Code didn't have an integrated terminal, but now it does.

00:48:40.320 --> 00:48:47.760
So, for Python developers, basically, it's a tool to restore dependencies from your requirements of TXT file.

00:48:47.760 --> 00:48:48.720
That's pretty much it.

00:48:48.720 --> 00:48:51.680
So, if you've got your terminal, you can do it using your terminal.

00:48:51.680 --> 00:48:54.240
That's why it's no longer popular.

00:48:54.800 --> 00:48:58.600
The next most popular extension that I have is GitHistory.

00:48:58.600 --> 00:49:03.300
So, I built this again for personal use.

00:49:03.300 --> 00:49:08.220
I was after an extension that I could use to look at the GitHistory log.

00:49:08.220 --> 00:49:13.880
So, I built this one again using TypeScript and it's just a wrapper around the Git.

00:49:13.880 --> 00:49:17.080
And at this stage, it's quite popular.

00:49:17.080 --> 00:49:24.780
If I were to bring numbers, it's the 12th most popular extension out there with around 350,000 downloads.

00:49:25.580 --> 00:49:32.740
And I have to say that currently it's being maintained primarily by Mike Surkopf.

00:49:32.740 --> 00:49:34.180
I'm not sure how it's pronounced.

00:49:34.180 --> 00:49:39.780
He's the one who's looking at all of the contributions at this stage while I focus on Python and the others.

00:49:39.780 --> 00:49:40.800
Yeah, that's cool.

00:49:40.800 --> 00:49:43.920
Lastly, the other extension is jQuery code snippets.

00:49:43.920 --> 00:49:48.060
That's a simple extension that gives you a lot of code snippets for jQuery.

00:49:48.060 --> 00:49:49.740
Okay, yeah, that'd be really nice.

00:49:49.740 --> 00:49:51.680
Are you working on any new ones?

00:49:51.680 --> 00:49:54.080
There is one that I'm trying to work on.

00:49:54.160 --> 00:49:59.920
I just haven't been doing much work on that for the past couple of weeks.

00:49:59.920 --> 00:50:08.820
It's pulling the code which supports Jupyter out of the Python extension because there are other languages that could use the Jupyter kernel.

00:50:08.820 --> 00:50:09.840
It's not just Python.

00:50:09.840 --> 00:50:16.080
So, I'm just trying to pull that out so others could use that or other languages could make use of it.

00:50:16.080 --> 00:50:16.600
Okay, yeah.

00:50:16.900 --> 00:50:21.340
That'll be really nice to separate those if people want to use them in R or whatever.

00:50:21.340 --> 00:50:21.880
Yes.

00:50:21.880 --> 00:50:23.000
Okay, nice.

00:50:23.000 --> 00:50:26.220
Well, I think people have a pretty good idea of this extension.

00:50:26.220 --> 00:50:28.080
And it's all open source.

00:50:28.080 --> 00:50:28.700
It's all free.

00:50:28.940 --> 00:50:43.680
So, if you're looking to try a pretty seriously rich Python editor cross-platform Linux, OS X or macOS and Windows, then, you know, check out Visual Studio Code and go check out the extensions and pick.

00:50:43.680 --> 00:50:47.880
Basically, you don't just pull up the extensions and you're like number two, right?

00:50:48.000 --> 00:50:49.840
I guess search for Python if it doesn't show up.

00:50:49.840 --> 00:50:53.160
There's more than just your extension for Python.

00:50:53.160 --> 00:50:55.160
So, yours is – what's the exact name?

00:50:55.160 --> 00:50:55.880
Is it –

00:50:55.880 --> 00:50:57.040
It's just Python.

00:50:57.040 --> 00:50:58.260
Just Python.

00:50:58.260 --> 00:50:58.480
Yeah.

00:50:58.480 --> 00:51:03.220
So, you got the straight up name all by itself.

00:51:03.220 --> 00:51:04.120
Awesome.

00:51:04.120 --> 00:51:04.460
Okay.

00:51:04.460 --> 00:51:11.460
So, let me ask you two questions before we go and then give you a chance to sort of let people know what they can do to get started or help out.

00:51:11.460 --> 00:51:17.220
I'm not really expecting a surprise here, but what's your favorite editor when you write some Python code?

00:51:17.460 --> 00:51:20.560
I would say it is Visual Studio Code simple.

00:51:20.560 --> 00:51:26.860
It's something I can use across both the Mac and Windows, and it's very lightweight.

00:51:26.860 --> 00:51:30.920
I can go to a different PC, just download it, install, done.

00:51:30.920 --> 00:51:33.440
So, it's just super lightweight and easy to use.

00:51:33.440 --> 00:51:33.840
Okay.

00:51:33.840 --> 00:51:34.760
Yeah, very nice.

00:51:34.760 --> 00:51:36.300
And favorite PyPI package?

00:51:36.300 --> 00:51:37.520
I would say there are two.

00:51:37.520 --> 00:51:39.480
One is the Jedi.

00:51:39.480 --> 00:51:47.440
Well, it's not something that I use on a day-to-day basis on every project, but it's something that I've used in the Python.

00:51:47.440 --> 00:51:49.100
And I really value that.

00:51:49.100 --> 00:51:54.820
And as a developer, the favorite package would be requests.

00:51:54.820 --> 00:51:55.300
Yeah.

00:51:55.300 --> 00:51:56.720
That's definitely a popular one.

00:51:56.720 --> 00:51:58.520
That's a really, really great package.

00:51:58.520 --> 00:51:59.860
All right, Don.

00:51:59.860 --> 00:52:01.400
So, final call to action.

00:52:01.400 --> 00:52:04.620
Like, you're looking for people to work on this project, help out, give you feedback.

00:52:04.620 --> 00:52:05.660
What can the listeners do?

00:52:06.060 --> 00:52:06.560
Oh, yes.

00:52:06.560 --> 00:52:08.320
Any contribution is really welcome.

00:52:08.320 --> 00:52:12.240
At this stage, there are two major items that I need to work on.

00:52:12.240 --> 00:52:15.400
One is profiling, and that doesn't look too complicated.

00:52:15.400 --> 00:52:19.380
The other one is adding support for remote interpreters.

00:52:19.760 --> 00:52:27.420
So, this is where you do not have Python installed locally, but it's running on a different machine, maybe on a Docker container or something.

00:52:28.140 --> 00:52:31.200
And you're editing your Python files locally.

00:52:31.200 --> 00:52:34.000
So, that's something that plenty of people have requested.

00:52:34.000 --> 00:52:35.060
So, it's not just that.

00:52:35.060 --> 00:52:37.360
So, any contribution, really welcome.

00:52:37.360 --> 00:52:38.580
I'd really appreciate that.

00:52:38.580 --> 00:52:39.000
All right.

00:52:39.000 --> 00:52:43.840
And, yeah, the future for the extension, where are you going with this thing?

00:52:43.980 --> 00:52:47.280
I'd just keep trying to extend it and adding more capabilities.

00:52:47.280 --> 00:52:53.880
So, the way I do this is by looking at other IDEs and adding capabilities from there, for instance.

00:52:53.880 --> 00:53:03.100
Looking at what Visual Studio or PDVS or PyCharm support, and I'd say, oh, maybe I could add that and try to plug it in here.

00:53:03.100 --> 00:53:03.580
All right.

00:53:03.580 --> 00:53:04.060
Very cool.

00:53:04.060 --> 00:53:07.000
So, thank you for contributing this, Editor.

00:53:07.000 --> 00:53:10.520
It's definitely got a lot of features, and it's pretty unique.

00:53:10.520 --> 00:53:13.820
So, thanks for creating it, and thanks for sharing your story with everyone.

00:53:13.820 --> 00:53:18.400
Thank you very much for having me, and thank you for sharing this with everyone else.

00:53:18.400 --> 00:53:19.320
So, yes.

00:53:19.320 --> 00:53:19.800
Absolutely.

00:53:19.800 --> 00:53:20.300
Happy to.

00:53:20.300 --> 00:53:21.080
It's a cool project.

00:53:21.080 --> 00:53:21.720
Talk to you later.

00:53:21.720 --> 00:53:25.980
This has been another episode of Talk Python To Me.

00:53:25.980 --> 00:53:32.520
Today's guest has been Don Jayamane, and this episode has been sponsored by Talk Python Training and Hired.

00:53:32.520 --> 00:53:34.240
Thank you both for supporting the show.

00:53:34.240 --> 00:53:37.120
Are you or a colleague trying to learn Python?

00:53:37.120 --> 00:53:41.800
Have you tried books and videos that just left you bored by covering topics point by point?

00:53:41.940 --> 00:53:50.400
Well, check out my online course, Python Jumpstart, by building 10 apps at talkpython.fm/course to experience a more engaging way to learn Python.

00:53:50.400 --> 00:53:57.780
And if you're looking for something a little more advanced, try my Write Pythonic Code course at talkpython.fm/pythonic.

00:53:57.780 --> 00:54:00.700
Hired wants to help you find your next big thing.

00:54:00.940 --> 00:54:09.200
Visit Hired.com slash talkpythontome to get five or more offers with salary and equity presented right up front and a special listener signing bonus of $2,000.

00:54:09.200 --> 00:54:11.940
Be sure to subscribe to the show.

00:54:11.940 --> 00:54:14.140
Open your favorite podcatcher and search for Python.

00:54:14.140 --> 00:54:15.380
We should be right at the top.

00:54:15.780 --> 00:54:29.800
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

00:54:29.800 --> 00:54:36.480
Corey just recently started selling his tracks on iTunes, so I recommend you check it out at talkpython.fm/music.

00:54:36.660 --> 00:54:41.860
You can browse his tracks he has for sale on iTunes and listen to the full-length version of the theme song.

00:54:41.860 --> 00:54:43.920
This is your host, Michael Kennedy.

00:54:43.920 --> 00:54:45.200
Thanks so much for listening.

00:54:45.200 --> 00:54:46.400
I really appreciate it.

00:54:46.400 --> 00:54:48.540
Smix, let's get out of here.

00:54:48.660 --> 00:55:10.120
Outro Music.

00:55:10.120 --> 00:55:10.800
Thank you.

