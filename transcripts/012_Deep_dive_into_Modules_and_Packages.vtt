WEBVTT

00:00:00.001 --> 00:00:05.060
Quick, what's the difference between a module, a package, and packaging in Python?

00:00:05.060 --> 00:00:08.900
Okay, maybe you should listen to this episode of Talk Python To Me,

00:00:08.900 --> 00:00:10.940
number 12 with David Beasley.

00:00:10.940 --> 00:00:15.820
It's all about packages, and it was recorded Monday, May 27, 2015.

00:00:15.820 --> 00:00:43.920
Hello, and welcome to Talk Python To Me,

00:00:43.920 --> 00:00:49.460
a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:00:49.460 --> 00:00:51.480
This is your host, Michael Kennedy.

00:00:51.480 --> 00:00:53.860
Follow me on Twitter, where I'm @mkennedy,

00:00:53.860 --> 00:00:58.800
and keep up with the show and listen to past episodes at talkpythontome.com.

00:00:58.800 --> 00:01:05.540
This episode, we'll be talking to David Beasley about the internals of modules and packages in Python.

00:01:05.540 --> 00:01:09.980
I'm thrilled to tell you that this episode is brought to you by Codeship.

00:01:09.980 --> 00:01:13.720
Codeship is a platform for continuous integration and continuous delivery,

00:01:13.720 --> 00:01:14.760
as a service.

00:01:14.760 --> 00:01:16.760
I'll talk more about them later in the show.

00:01:16.760 --> 00:01:20.240
Please take a moment to check them out at codeship.com,

00:01:20.240 --> 00:01:22.600
or follow them on Twitter, where they're at Codeship.

00:01:23.820 --> 00:01:26.200
This episode is also brought to you by Hired.

00:01:26.200 --> 00:01:30.680
Hired has joined Talk Python as a sponsor because they want to help you find your dream job.

00:01:30.680 --> 00:01:34.760
Hired is built specifically for developers looking for new opportunities.

00:01:34.760 --> 00:01:39.380
You can sign up and expect to get five offers within the first week,

00:01:39.380 --> 00:01:42.080
and salary and equity presented right up front.

00:01:42.080 --> 00:01:47.420
Check them out and get a very special offer at Hired.com slash Talk Python To Me.

00:01:47.840 --> 00:01:51.300
Think them on Twitter, where they're at Hired underscore HQ.

00:01:51.300 --> 00:01:56.640
The last show on Computer Vision with Adrian Rosebrock, that was show number 11,

00:01:56.640 --> 00:02:00.920
we talked about a laptop sticker from years back, which really inspired him.

00:02:00.920 --> 00:02:03.220
It said, Python will save the world.

00:02:03.360 --> 00:02:04.820
I don't know how, but it will.

00:02:04.820 --> 00:02:08.340
Well, I thought that was a great sticker, and I tracked down a picture of it for you.

00:02:08.340 --> 00:02:11.720
Check it out at bit.ly slash Python save.

00:02:11.720 --> 00:02:17.700
I invited David to come on the show and talk about this subject after watching his tutorial

00:02:17.700 --> 00:02:19.680
online at PyCon 2015.

00:02:19.680 --> 00:02:25.320
Remember, I have this list of my essential 30 presentations from PyCon 2015,

00:02:25.320 --> 00:02:27.020
and of course, David's is on it.

00:02:27.020 --> 00:02:31.140
Check it out at bit.ly slash PyCon 2015 MK.

00:02:32.540 --> 00:02:34.300
Now, let's get to the interview.

00:02:34.300 --> 00:02:37.240
Let me introduce David.

00:02:37.240 --> 00:02:42.520
David Beasley is an independent software developer, teacher, and book author living in Chicago.

00:02:42.520 --> 00:02:47.420
He primarily works on programming tools and teaches programming courses for software developers,

00:02:47.420 --> 00:02:48.980
scientists, and engineers.

00:02:48.980 --> 00:02:53.660
He's the author of the Python Essential Reference and Python Cookbook.

00:02:53.660 --> 00:02:55.620
David, welcome to the show.

00:02:55.620 --> 00:02:57.200
Hi, how are you?

00:02:57.200 --> 00:02:58.440
I'm doing fantastic.

00:02:58.440 --> 00:02:59.740
Thank you for being on the show.

00:02:59.740 --> 00:03:01.040
I'm really glad to have you here.

00:03:01.040 --> 00:03:02.420
Okay, thanks for having me.

00:03:02.420 --> 00:03:03.160
Yeah, you bet.

00:03:03.160 --> 00:03:10.640
I saw your packages and modules talk at PyCon 2015, and I thought it was really interesting.

00:03:10.640 --> 00:03:12.400
Okay, you survived that.

00:03:12.400 --> 00:03:13.460
I did survive.

00:03:13.460 --> 00:03:18.880
Unfortunately, my wife was traveling, and we have small kids, so I saw it remotely over YouTube.

00:03:18.880 --> 00:03:21.880
But I wish I was able to be there.

00:03:21.880 --> 00:03:23.540
So I sort of saw it.

00:03:23.540 --> 00:03:25.080
But yeah, it was really, really interesting.

00:03:25.080 --> 00:03:26.620
You didn't put it on for the kids?

00:03:26.980 --> 00:03:30.760
Oh, my kids love it when I put on Python instructional videos for them.

00:03:30.760 --> 00:03:32.880
Yeah, they're like, Dora the Explorer, forget it.

00:03:32.880 --> 00:03:36.440
Give me something to do with, like, async Python.

00:03:36.440 --> 00:03:37.020
I'll do that.

00:03:37.020 --> 00:03:38.040
Yeah, yeah.

00:03:38.040 --> 00:03:38.420
Good.

00:03:39.720 --> 00:03:43.340
So we're going to talk a lot about packages and other stuff that you've got going on as well.

00:03:43.340 --> 00:03:45.380
But let's start at the beginning.

00:03:45.380 --> 00:03:49.320
Where did you get started in programming and Python and all that stuff?

00:03:50.140 --> 00:03:55.960
So I got started, it's hard for me to believe, but about 19 years ago with Python.

00:03:55.960 --> 00:04:00.100
I was actually using it in the context of scientific computing.

00:04:00.100 --> 00:04:05.720
So around that time, I was trying to figure out some way to script scientific software written in C.

00:04:05.720 --> 00:04:11.540
And kind of, for lack of a better description, was trying to create my own version of MATLAB, actually.

00:04:11.540 --> 00:04:12.500
So...

00:04:12.500 --> 00:04:13.620
What kind of science was it?

00:04:13.620 --> 00:04:21.560
Well, I was doing molecular dynamics, material science, sort of on supercomputers and had done a lot of C programming for that.

00:04:21.560 --> 00:04:29.400
And, you know, kind of the biggest problem that we had in that project was not the scientific computing part of it, but it was everything else.

00:04:29.400 --> 00:04:34.200
Like just moving files around and, like, ripping data formats apart.

00:04:34.200 --> 00:04:36.420
Kind of like all the annoying day-to-day stuff.

00:04:37.560 --> 00:04:41.080
And so I was looking for some way to kind of solve that problem.

00:04:41.080 --> 00:04:50.580
Prior to discovering Python, I had actually written my own scripting language, for which I was sort of resoundingly flamed at graduate school.

00:04:50.580 --> 00:04:54.480
They were sort of saying, Dave, like, why are you making your own programming language?

00:04:54.480 --> 00:04:58.920
Why don't you just use Tickle or some, you know, some existing thing?

00:04:58.920 --> 00:05:04.860
And then I had read about Python in a, I think, an article in Computers and Physics or something like that.

00:05:04.860 --> 00:05:07.360
And just said, oh, I'm going to go check that out.

00:05:07.360 --> 00:05:07.840
Yeah.

00:05:07.840 --> 00:05:10.180
And you're like, hey, somebody else wrote a scripting language.

00:05:10.180 --> 00:05:10.680
Look at that.

00:05:10.680 --> 00:05:12.280
Yeah, it is way better than mine.

00:05:12.280 --> 00:05:15.080
You know, the syntax was fairly similar.

00:05:15.080 --> 00:05:15.820
So...

00:05:15.820 --> 00:05:16.600
Did yours have white space?

00:05:16.600 --> 00:05:18.060
Like significant white space?

00:05:18.060 --> 00:05:20.100
I did not have significant white space.

00:05:20.100 --> 00:05:24.020
But I didn't have dollar signs and other kind of, you know, crazy things either.

00:05:24.020 --> 00:05:25.120
So it was...

00:05:25.120 --> 00:05:27.740
Okay, so you started out in the scientific world.

00:05:27.740 --> 00:05:32.480
And, you know, I think Python now is super big for scientific programming.

00:05:32.480 --> 00:05:33.540
How was it back then?

00:05:33.540 --> 00:05:35.880
Back then, it was pretty radical.

00:05:35.880 --> 00:05:38.520
I mean, this was like 96.

00:05:38.520 --> 00:05:43.740
And if you go back that far, there were basically no tools available.

00:05:43.740 --> 00:05:45.620
I mean, or it's very minimal tools.

00:05:45.620 --> 00:05:46.960
And then a lot of the...

00:05:46.960 --> 00:05:49.780
A lot of what you faced was pushback.

00:05:49.780 --> 00:05:55.220
Because people thought, well, you know, can't write real software in a scripting language.

00:05:55.220 --> 00:05:58.260
You know, why are you fooling around with this scripting language?

00:05:58.260 --> 00:05:59.560
This thing.

00:05:59.560 --> 00:06:01.240
Instead of coding in C++.

00:06:01.240 --> 00:06:01.760
Right.

00:06:01.760 --> 00:06:03.720
Especially if it's computational, right?

00:06:03.720 --> 00:06:04.240
Yeah.

00:06:04.240 --> 00:06:08.140
I mean, I actually got quite a bit of negative response.

00:06:08.140 --> 00:06:11.260
Because I was running interactive Python on a supercomputer.

00:06:11.260 --> 00:06:20.220
And people were like, you're just burning up, like, hundreds of dollars of CPU cycles just typing at the keyboard at this prompt.

00:06:20.220 --> 00:06:22.140
You know, like, what are you doing?

00:06:22.140 --> 00:06:27.920
And they didn't really realize that doing that was actually saving us huge amounts of time later.

00:06:28.600 --> 00:06:37.400
You know, like, preventing us from running bad simulations or taking problems that used to take, you know, like, 50 hours and reducing it down to 15 minutes.

00:06:37.400 --> 00:06:39.580
That kind of stuff.

00:06:39.580 --> 00:06:41.080
But, yeah, it was a lot of pushback.

00:06:41.080 --> 00:06:42.000
That's really funny.

00:06:42.000 --> 00:06:45.180
It's interesting how people can focus on the wrong things.

00:06:45.180 --> 00:06:47.220
You know, like, oh, we've got to have another server for that.

00:06:47.220 --> 00:06:50.200
Or, you know, otherwise we'd have to have another person.

00:06:50.200 --> 00:06:51.680
Or something like this, right?

00:06:51.680 --> 00:06:56.080
I actually got quite a few people sort of mad in talks.

00:06:56.080 --> 00:07:03.540
I gave some talks about this, and every now and then I'd get a, you know, like a question, like, how did you get permission from management to do this project?

00:07:03.540 --> 00:07:06.600
And I would just say, well, we didn't ask.

00:07:06.600 --> 00:07:09.820
They didn't explicitly forbid it, so it's permitted.

00:07:09.820 --> 00:07:15.300
Yeah, so it was very much kind of a, you know, I don't know whether hidden project.

00:07:15.300 --> 00:07:17.080
It was not really an approved project.

00:07:17.080 --> 00:07:18.540
Yeah, a guerrilla project, maybe.

00:07:18.540 --> 00:07:19.340
Project.

00:07:19.560 --> 00:07:24.400
Although, you know, the people involved, I mean, at the time I was, you know, I was doing this work in Los Alamos.

00:07:24.400 --> 00:07:29.580
You know, there was a group in Livermore National Lab kind of doing the same things.

00:07:29.580 --> 00:07:37.680
And a lot of that early work is sort of led to kind of the precursors of things like NumPy and the SciPy tools that people are using now.

00:07:37.680 --> 00:07:38.740
So, yeah.

00:07:38.740 --> 00:07:41.880
Think of how the world would have been different if you had that to start from, right?

00:07:43.020 --> 00:07:45.640
It would have made a big difference for you guys, I'm sure.

00:07:45.640 --> 00:07:47.540
You've got to start somewhere, I guess.

00:07:47.540 --> 00:07:51.360
Somebody has to shake things up, I guess.

00:07:51.360 --> 00:07:53.220
Yeah, well, that's really cool.

00:07:53.220 --> 00:07:54.920
What are you doing today with Python?

00:07:54.920 --> 00:07:58.140
So, right now, well, a variety of things.

00:07:58.140 --> 00:07:59.060
I'm teaching classes.

00:07:59.060 --> 00:08:02.520
I'm also involved with a startup company.

00:08:02.520 --> 00:08:03.520
That's been a little bit secretive.

00:08:03.520 --> 00:08:09.420
But I'm technically co-founder of a startup doing some education tech stuff.

00:08:09.420 --> 00:08:11.480
And I'm actually coding with that.

00:08:12.300 --> 00:08:19.180
I'm doing a lot of just back-end web programming, databases, SQLAlchemy, things like that.

00:08:19.180 --> 00:08:24.960
I'm supposed to be working on a new version of the Python Essential Reference book.

00:08:24.960 --> 00:08:27.500
I haven't really started that yet.

00:08:27.500 --> 00:08:29.240
I hope my editor doesn't listen to this.

00:08:29.240 --> 00:08:32.720
But, you know, that's coming soon as well.

00:08:32.720 --> 00:08:38.280
Well, we'll make it up to him by promoting the book in the show notes or something like that.

00:08:38.280 --> 00:08:38.680
How's that?

00:08:38.680 --> 00:08:39.600
Right, right.

00:08:39.600 --> 00:08:43.940
Yeah, the tech education scene is insanely hot right now.

00:08:43.940 --> 00:08:47.700
And VC and people, it's really an amazing place to be.

00:08:47.700 --> 00:08:49.300
And I'm doing a little bit of stuff there as well.

00:08:49.300 --> 00:08:52.940
And just, you know, knowing what's going on there is just amazing right now.

00:08:52.940 --> 00:08:55.640
Yeah, a lot of crazy, crazy things there.

00:08:55.640 --> 00:08:59.200
I guess if it wasn't crazy, it wouldn't be, I don't know, it wouldn't be worth doing, I guess.

00:08:59.340 --> 00:08:59.680
Exactly.

00:08:59.680 --> 00:09:01.220
It'd be like going back to high school instead.

00:09:01.220 --> 00:09:01.880
Right, right.

00:09:01.880 --> 00:09:02.020
Yeah.

00:09:09.880 --> 00:09:16.100
CodeChip is a hosted continuous delivery service focused on speed, security, and customizability.

00:09:16.460 --> 00:09:21.920
You can set up continuous integration in a matter of seconds and automatically deploy when your tests have passed.

00:09:21.920 --> 00:09:25.160
CodeChip supports your GitHub and Bitbucket projects.

00:09:25.160 --> 00:09:27.940
You can get started with CodeChip's free plan today.

00:09:27.940 --> 00:09:36.420
Should you decide to go with a premium plan, Talk Python listeners can save 20% off any plan for the next three months by using the code TALKPython.

00:09:36.840 --> 00:09:38.160
All caps, no spaces.

00:09:38.160 --> 00:09:45.500
Check them out at CodeChip.com and tell them thanks for sponsoring the show on Twitter where they're at CodeChip.

00:09:45.500 --> 00:09:53.900
Awesome.

00:09:53.900 --> 00:09:56.780
So what inspired you to do a tutorial on packages?

00:09:56.780 --> 00:10:01.420
I mean, that seems like, you know, doing a tutorial on for loops or something.

00:10:01.420 --> 00:10:06.620
But obviously, you know, it was a two, three hour tutorial and it was really great, I thought.

00:10:06.740 --> 00:10:09.240
So, but, but what started you on this path?

00:10:09.240 --> 00:10:09.440
Yeah.

00:10:09.440 --> 00:10:11.780
A three hour tutorial on packages.

00:10:11.780 --> 00:10:12.780
Import.

00:10:12.780 --> 00:10:13.580
Okay.

00:10:13.580 --> 00:10:17.420
Now you can just contemplate this for two and a half hours to get the zen of it, right?

00:10:17.420 --> 00:10:17.700
Yeah.

00:10:17.700 --> 00:10:22.800
So I guess it was like probably a, so packages, I mean, modules and packages.

00:10:22.800 --> 00:10:26.920
I mean, one part of it, it's something that, that I've rarely thought about.

00:10:26.920 --> 00:10:29.920
You know, it's like you learn Python, you know, 19 years ago.

00:10:29.920 --> 00:10:31.700
I was like, yeah, there's the import statement.

00:10:31.700 --> 00:10:36.700
And yeah, sometimes you have to fiddle with the system path and, and, and, and, and so forth.

00:10:36.700 --> 00:10:38.620
You know, you sort of, you sort of get over it.

00:10:39.320 --> 00:10:45.040
But in, you know, in teaching a lot of classes and working with other people, it seems like

00:10:45.040 --> 00:10:49.360
the import statement is like this no end of just hell for people.

00:10:49.360 --> 00:10:54.780
Like, you know, I'll be teaching a class somewhere and then, you know, kind of walk around and I'll

00:10:54.780 --> 00:10:55.580
see somebody struggling.

00:10:55.580 --> 00:10:58.920
And they're like, yeah, I've been fooling around with this for like half an hour or something.

00:10:59.640 --> 00:11:02.440
And first, first of all, like, why didn't you get my attention earlier?

00:11:02.440 --> 00:11:05.480
But then you, but then you go over there and you realize that they're just fiddling around with

00:11:05.480 --> 00:11:07.620
some stupid thing with the import statement.

00:11:07.620 --> 00:11:12.660
Like, you know, the file is named wrong or that it's in the wrong directory or they're trying to

00:11:12.660 --> 00:11:13.880
reload something or.

00:11:13.880 --> 00:11:16.000
It could be subtle as well.

00:11:16.000 --> 00:11:19.800
It's like, you might have a number as the starting name for your directory or something like that.

00:11:19.800 --> 00:11:20.020
Right.

00:11:20.020 --> 00:11:20.540
Yeah.

00:11:20.540 --> 00:11:25.000
Subtle things or, you know, or like, you know, you're working with people on a project, you know,

00:11:25.000 --> 00:11:28.980
it's like four o'clock in the afternoon and somebody's like, why are they cursing so much

00:11:28.980 --> 00:11:29.440
over there?

00:11:29.440 --> 00:11:33.980
You know, I go walk over, walk over there and they're like cursing about like why Python isn't

00:11:33.980 --> 00:11:38.200
running their code correctly only to, only to realize that they, they've forgotten that

00:11:38.200 --> 00:11:39.060
module loading.

00:11:39.060 --> 00:11:40.560
It's a one-time operation.

00:11:40.560 --> 00:11:41.100
Right.

00:11:41.100 --> 00:11:41.460
Exactly.

00:11:41.460 --> 00:11:43.200
It's not reloading there.

00:11:43.200 --> 00:11:45.940
I changed it, but it's not changing.

00:11:45.940 --> 00:11:46.600
Loading.

00:11:46.600 --> 00:11:51.260
So, so, so part of it was just, it's like, I should do something on modules and packages to

00:11:51.260 --> 00:11:54.340
try and like, I don't know, clear confusion maybe.

00:11:54.540 --> 00:11:59.060
But I think, I think also part of it is the whole module system in Python has,

00:11:59.060 --> 00:12:01.200
has been basically rewritten.

00:12:01.200 --> 00:12:05.780
I don't know whether it's like a, it's almost like a from scratch rewrite where all of the

00:12:05.780 --> 00:12:11.460
mechanics of it have actually been pulled out of C and put up into the Python level.

00:12:11.460 --> 00:12:16.820
So almost, almost all the internals of modules and imports and packages and stuff is, is sort

00:12:16.820 --> 00:12:18.400
of way more accessible now.

00:12:19.220 --> 00:12:23.540
And so I thought it'd be kind of, kind of interesting to, to, to look at that as well,

00:12:23.540 --> 00:12:29.560
just sort of take like a totally modern take on it and just see, you know, like what's going

00:12:29.560 --> 00:12:30.840
on with modules and packages.

00:12:30.840 --> 00:12:31.480
Yeah.

00:12:31.480 --> 00:12:36.640
Before we get into the details, I, I'm sure everybody kind of gets a sense of what are modules,

00:12:36.640 --> 00:12:41.620
what are packages, but just to make sure we're all on the same page, I could import things.

00:12:41.620 --> 00:12:45.460
And sometimes I import a module and sometime I'm importing a package.

00:12:45.460 --> 00:12:46.600
What's the deal there?

00:12:46.600 --> 00:12:51.140
Well, I mean, a module, you know, maybe a simple view of it is, you know, people think of it

00:12:51.140 --> 00:12:57.180
as like a single file, you know, single, single, file of source code, package would

00:12:57.180 --> 00:12:59.060
be more of a collection of files.

00:12:59.840 --> 00:13:05.240
You know, maybe larger application or a framework or, or, or something like that.

00:13:05.240 --> 00:13:09.420
I think one thing that can be a little bit muddled is sometimes things look like modules

00:13:09.420 --> 00:13:16.480
when in fact they're big packages and, you know, it can be kind of muddled sometimes.

00:13:16.480 --> 00:13:19.620
So it seems to me like with modules, I'm getting just a file, right?

00:13:19.620 --> 00:13:21.200
Like, Hey, I've written some code over here.

00:13:21.200 --> 00:13:22.280
I've written some code over there.

00:13:22.680 --> 00:13:25.880
Let me grab the code in the one file and use it.

00:13:25.880 --> 00:13:31.100
And with packages, it seems like there's a lot more going on potentially, right?

00:13:31.100 --> 00:13:37.880
I've got the under, under init.py and I can sort of declare this all under, under all

00:13:37.880 --> 00:13:38.820
variable.

00:13:38.820 --> 00:13:43.300
Can you maybe talk a little bit about the structure of a package and why you might build one?

00:13:43.300 --> 00:13:43.740
Okay.

00:13:43.740 --> 00:13:49.540
Well, I think, you know, the, so, so one thing with packages is, well, let me, let me back

00:13:49.540 --> 00:13:50.320
up for a second here.

00:13:50.320 --> 00:13:54.440
I think like, like if you're thinking about module, typically you're thinking about something

00:13:54.440 --> 00:14:00.820
kind of small, like a single file, maybe a small library, you know, maybe, maybe not a

00:14:00.820 --> 00:14:04.940
huge amount of functionality, but you know, it's just like a, you know, like just a single

00:14:04.940 --> 00:14:08.200
point of, of, of code that, that is very easy to use.

00:14:08.200 --> 00:14:12.900
I think with a package, you're getting into something much more complicated, you know, it's

00:14:12.900 --> 00:14:14.500
like much larger code base.

00:14:14.500 --> 00:14:19.440
And part of what you, what you want to avoid is just putting all of your code in one file.

00:14:19.440 --> 00:14:23.860
Like nobody wants to have a file where it's 50,000 lines of Python code in there.

00:14:23.860 --> 00:14:26.000
Especially not if you inherit that file.

00:14:26.000 --> 00:14:26.260
Yeah.

00:14:26.260 --> 00:14:26.700
Well, yeah.

00:14:26.700 --> 00:14:28.020
So especially if it's given to you.

00:14:28.020 --> 00:14:31.460
So with a, you know, with a package, you're really thinking about kind of breaking up your

00:14:31.460 --> 00:14:36.180
code into different, you know, different sub modules, different parts of the application

00:14:36.180 --> 00:14:36.740
and so forth.

00:14:36.740 --> 00:14:41.440
It's more of an organizational, you know, organizational tool than, than anything.

00:14:41.440 --> 00:14:46.520
Also, also just keeping your code separate from the, from the rest of the Python universe,

00:14:46.520 --> 00:14:51.760
you know, avoiding like naming clashes with other bits of, bits of code.

00:14:51.760 --> 00:14:56.900
I think the thing that gets complicated with a package is once you do that, you know, once

00:14:56.900 --> 00:15:02.280
you separate your code out into multiple files, you have to start worrying about all sorts of

00:15:02.280 --> 00:15:03.000
side issues.

00:15:03.000 --> 00:15:06.040
Like, like how do those files interact with each other?

00:15:06.040 --> 00:15:10.940
You know, like how does one sub module refer to another sub module or how do they, you know,

00:15:10.940 --> 00:15:14.080
combine pieces together and, and so forth.

00:15:14.080 --> 00:15:17.900
And that's actually where a lot of the, I think a lot of the tricky parts of packages come into

00:15:17.900 --> 00:15:23.920
play is that just, you know, relationships within the package causes a lot of complexity that

00:15:23.920 --> 00:15:27.000
you wouldn't see with a single, you know, a single file module.

00:15:27.860 --> 00:15:27.900
Right.

00:15:27.900 --> 00:15:28.640
I totally agree.

00:15:28.640 --> 00:15:34.600
There's a lot of stuff you can do in that init file to sort of make it explicit about

00:15:34.600 --> 00:15:35.560
what you want to export.

00:15:35.560 --> 00:15:40.500
And I think of these packages as like reusable libraries that you're going to grab and they

00:15:40.500 --> 00:15:41.420
have a bunch of functionality.

00:15:41.420 --> 00:15:44.680
Whereas modules, I kind of feel like, Hey, I'm just, I'm reusing a file that I wrote.

00:15:44.680 --> 00:15:46.660
This file wants access to that part of my code.

00:15:46.660 --> 00:15:47.600
So I pull that in.

00:15:47.600 --> 00:15:53.740
And so you talked about a lot of cool tips and tricks that you can kind of do there.

00:15:53.740 --> 00:15:56.220
You talked about like the all, all variable.

00:15:56.480 --> 00:16:02.100
You talked about importing sub modules in the main level module and stuff like that.

00:16:02.100 --> 00:16:02.840
Yeah.

00:16:02.840 --> 00:16:06.820
I think one of the, one of the things that, it might be more of a personal complaint,

00:16:06.820 --> 00:16:11.940
but you know, when you use packages a lot, you can sometimes get a pull, like a huge number

00:16:11.940 --> 00:16:16.620
of imports that start showing up in your code where, you know, instead of just importing a

00:16:16.620 --> 00:16:22.160
single file, all of a sudden you're, you're putting in like 20 import statements and not a,

00:16:22.160 --> 00:16:24.440
I'm not a huge fan of doing that.

00:16:24.440 --> 00:16:27.400
So, you know, these are knit files that you sometimes see in packages.

00:16:27.400 --> 00:16:33.800
I mean, those, one, one use of those is, is to basically coalesce the pieces into one

00:16:33.800 --> 00:16:34.400
place.

00:16:34.400 --> 00:16:38.520
And, you know, sometimes you can cut down on the number of imports that you have to do.

00:16:38.520 --> 00:16:39.380
Right.

00:16:39.380 --> 00:16:43.320
Maybe you import the top level thing, like import SQLAlchemy.

00:16:43.480 --> 00:16:47.740
And then you could say SQLAlchemy dot and get to the sub packages, something like that.

00:16:47.740 --> 00:16:47.960
Right.

00:16:47.960 --> 00:16:48.480
Right.

00:16:48.480 --> 00:16:48.680
Right.

00:16:48.680 --> 00:16:53.260
You don't have to worry about, you know, how they organize that under the covers of SQLAlchemy.

00:16:53.260 --> 00:16:56.880
It could be, you know, spread across, you know, 20 different files for all you care.

00:16:56.880 --> 00:16:58.060
Yeah, exactly.

00:16:58.060 --> 00:17:00.520
But you have to manually do that in the init file, right?

00:17:00.520 --> 00:17:04.320
In order to sort of force the top level import to bring in the sub packages.

00:17:04.320 --> 00:17:04.900
Is that correct?

00:17:04.900 --> 00:17:07.120
You, you have to take some steps there.

00:17:07.120 --> 00:17:07.360
Yeah.

00:17:07.360 --> 00:17:10.640
I mean, it's, you know, if you're the author of a package, you have to figure out

00:17:10.640 --> 00:17:12.540
some way to, some way to do that.

00:17:12.540 --> 00:17:16.800
I've done some tricks involving decorators doing that.

00:17:16.800 --> 00:17:21.320
Like, you know, they, being one of the applications I'm working on now, I mean, I

00:17:21.320 --> 00:17:27.120
have a, I have a decorator I can put on functions that will automatically sort of hoist them up

00:17:27.120 --> 00:17:28.140
into the init file.

00:17:28.140 --> 00:17:33.300
So, I mean, there are, there are tricks that you can do to, to, to do that kind of thing.

00:17:33.300 --> 00:17:34.000
That's really cool.

00:17:34.000 --> 00:17:35.180
Is that a decorator that you wrote?

00:17:35.960 --> 00:17:37.400
I just cooked it up myself.

00:17:37.400 --> 00:17:37.740
Yeah.

00:17:37.740 --> 00:17:38.940
Is it on GitHub or something?

00:17:38.940 --> 00:17:41.140
It's, I don't know if it's on GitHub.

00:17:41.140 --> 00:17:43.460
it is in the tutorial though.

00:17:43.460 --> 00:17:44.080
Right.

00:17:44.080 --> 00:17:44.400
Okay.

00:17:44.400 --> 00:17:45.200
A module.

00:17:45.200 --> 00:17:46.380
It's somewhere in that tutorial.

00:17:46.380 --> 00:17:46.780
So.

00:17:46.780 --> 00:17:47.720
Nice.

00:17:47.720 --> 00:17:52.240
one thing that I thought was interesting that you spoke about the tutorial was that

00:17:52.240 --> 00:17:57.700
structure guidelines, the PEP 8 guidelines sometimes make your code more brittle in packages

00:17:57.700 --> 00:17:58.860
than otherwise should be.

00:17:58.860 --> 00:18:01.080
Oh yeah.

00:18:01.080 --> 00:18:01.440
Yes.

00:18:01.780 --> 00:18:06.900
One of the things with PEP 8, I think is it predates some of the work that went on in

00:18:06.900 --> 00:18:07.380
packages.

00:18:07.380 --> 00:18:11.660
I mean, you know, like, like PEP 8 sort of talks that you should, you know, well, it

00:18:11.660 --> 00:18:16.620
sort of says things like, oh, you should just do like an absolute import from kind of a top

00:18:16.620 --> 00:18:17.880
level package name.

00:18:18.300 --> 00:18:24.760
So if we were writing like the, the, a package called math and it had a, a class called library,

00:18:24.760 --> 00:18:30.420
uh, calculator, something like that, we might in the init file say import math dot calculator

00:18:30.420 --> 00:18:32.920
where math is the actual name of the package.

00:18:32.920 --> 00:18:33.220
Right.

00:18:33.680 --> 00:18:35.860
I don't know that I'd use math as the best.

00:18:35.860 --> 00:18:36.320
Okay.

00:18:36.320 --> 00:18:36.560
Yeah.

00:18:36.560 --> 00:18:38.160
So I'm lacking creativity.

00:18:38.160 --> 00:18:38.400
Yeah.

00:18:38.400 --> 00:18:39.300
Pick another example.

00:18:39.300 --> 00:18:39.980
Yeah.

00:18:39.980 --> 00:18:43.580
I, it's, it's more concerning things like imports within the package.

00:18:43.580 --> 00:18:48.340
Like if you, you know, if you had a package where, you know, you had a, like there was a

00:18:48.340 --> 00:18:53.040
sub module called graphics and there was another module called data or something like that.

00:18:53.280 --> 00:18:57.060
You would end up importing from the top level name down.

00:18:57.060 --> 00:19:01.520
So if you're, if your package was named spam, for instance, you'd have to say, you know, import

00:19:01.520 --> 00:19:04.860
spam dot graphics or import spam dot data.

00:19:04.860 --> 00:19:10.180
And you would, you would do that within the package, within the package itself.

00:19:10.180 --> 00:19:14.560
but the thing that I don't, that I don't like about that is it ends up hard coding the

00:19:14.560 --> 00:19:15.480
package name.

00:19:15.480 --> 00:19:16.300
Right.

00:19:16.300 --> 00:19:18.780
For example, if you rename the package, what happens?

00:19:18.780 --> 00:19:20.780
Well, then you have to go change all of your code.

00:19:20.780 --> 00:19:21.780
Great.

00:19:22.180 --> 00:19:23.300
See, that's the part I don't like.

00:19:23.300 --> 00:19:23.920
Is there a fix?

00:19:23.920 --> 00:19:28.480
Well, you could use, one of the things that you can use are these package relative imports.

00:19:28.480 --> 00:19:30.160
This is this form.

00:19:30.160 --> 00:19:35.400
I, it's, I'm actually surprised how many people have not seen it sometimes, but it's, what it

00:19:35.400 --> 00:19:39.260
looks like is you have these dots where you would say something like, oh, from dot import

00:19:39.260 --> 00:19:41.640
graphics or from dot import data.

00:19:41.640 --> 00:19:47.800
And the dot is just telling Python that you want to load relative to your current location,

00:19:47.800 --> 00:19:48.400
for instance.

00:19:48.400 --> 00:19:49.540
Right.

00:19:49.540 --> 00:19:49.880
Exactly.

00:19:49.880 --> 00:19:51.660
So then it doesn't matter what you call the package.

00:19:52.080 --> 00:19:52.240
Right.

00:19:52.240 --> 00:19:52.620
Right.

00:19:52.620 --> 00:19:52.940
Right.

00:19:52.940 --> 00:19:53.700
That's really excellent.

00:19:53.700 --> 00:19:56.100
I'm sort of thinking about things like versioning and stuff.

00:19:56.100 --> 00:20:01.660
I mean, it's, you know, I could imagine situations where, you know, I have code where I need

00:20:01.660 --> 00:20:06.780
to have an old version of some package coexisting with a modern version of the same package.

00:20:06.780 --> 00:20:11.580
You know, one of the ways that you could deal with that is just to rename the old one.

00:20:11.580 --> 00:20:12.560
Right.

00:20:12.980 --> 00:20:13.320
Exactly.

00:20:13.320 --> 00:20:13.380
Exactly.

00:20:13.380 --> 00:20:16.840
Graphics dot, graphics dot old or underscore old or something like that.

00:20:16.840 --> 00:20:17.060
Right.

00:20:17.060 --> 00:20:17.760
Right.

00:20:17.760 --> 00:20:17.980
Right.

00:20:17.980 --> 00:20:22.980
As long as you don't have the package name hard coded in there, that, that, that all works

00:20:22.980 --> 00:20:23.360
fine.

00:20:23.360 --> 00:20:23.720
So.

00:20:23.720 --> 00:20:24.580
Yeah.

00:20:24.600 --> 00:20:26.180
I think it's, I think it's really good advice.

00:20:26.180 --> 00:20:31.220
I propose we amend PEP 8 to have the package relative imports.

00:20:31.220 --> 00:20:34.280
I wonder when that part was written in PEP 8.

00:20:34.280 --> 00:20:40.140
I mean, it's, I have to, I hate to admit this on like a podcast, but I'm sort of a flagrant

00:20:40.140 --> 00:20:41.480
PEP 8 violator.

00:20:42.660 --> 00:20:45.840
Don't worry, you, nobody can see the code, so they won't really know about it.

00:20:45.840 --> 00:20:46.320
It's fine.

00:20:46.320 --> 00:20:46.500
Yeah.

00:20:46.500 --> 00:20:53.280
It's, I don't mean to violate it, but I think it's, you know, PEP 8 comes after

00:20:53.280 --> 00:20:55.900
the point at which I got involved with Python.

00:20:55.900 --> 00:21:00.700
So it never really entered my consciousness of something that I would pay attention to.

00:21:00.700 --> 00:21:01.200
I mean, it's.

00:21:01.200 --> 00:21:02.640
Your style was already set by the time.

00:21:02.640 --> 00:21:02.900
Yes.

00:21:02.900 --> 00:21:03.340
Yeah.

00:21:03.340 --> 00:21:08.440
I haven't, I have enough trouble just with the, people are always giving me a bad time

00:21:08.440 --> 00:21:10.820
for using double quotes on all my strings.

00:21:11.920 --> 00:21:15.780
Even, you know, I think like, you know, it's, that's fine in Python, but you know, most people

00:21:15.780 --> 00:21:20.420
tend to use like the single quote and instead I'm kind of locked into double quotes just because

00:21:20.420 --> 00:21:21.700
I've done so much C programming.

00:21:21.700 --> 00:21:22.740
Exactly.

00:21:22.740 --> 00:21:25.380
The, the single quote in C doesn't do the same thing.

00:21:25.380 --> 00:21:29.400
I just can't get out of C programming, even though that's not my day-to-day job.

00:21:29.400 --> 00:21:31.260
So yeah, I have the same problem.

00:21:31.260 --> 00:21:33.000
I'm kind of back and forth on it.

00:21:41.180 --> 00:21:46.520
This episode is brought to you by hired hired.

00:21:46.520 --> 00:21:52.060
Hired is a two-sided curated marketplace that connects the world's knowledge workers to the

00:21:52.060 --> 00:21:53.080
best opportunities.

00:21:53.080 --> 00:21:58.460
Each offer you receive has salary and equity presented right up front, and you can view the

00:21:58.460 --> 00:22:02.200
offers to accept or reject them before you even talk to the company.

00:22:02.200 --> 00:22:06.560
Typically candidates receive five or more offers in just the first week.

00:22:06.560 --> 00:22:10.180
And there are no obligations ever sounds pretty awesome.

00:22:10.180 --> 00:22:10.660
Doesn't it?

00:22:10.660 --> 00:22:12.720
Well, did I mention there's a signing bonus?

00:22:12.720 --> 00:22:16.800
Everyone who accepts a job from hired gets a $2,000 signing bonus.

00:22:16.800 --> 00:22:21.120
And as talk Python listeners, it gets way sweeter.

00:22:21.120 --> 00:22:27.960
Use the link hired.com slash talk Python to me and hired will double the signing bonus to

00:22:27.960 --> 00:22:30.020
$4,000 opportunities.

00:22:30.020 --> 00:22:30.420
Knocking.

00:22:30.420 --> 00:22:34.020
Visit hired.com slash talk Python to me and answer the call.

00:22:34.020 --> 00:22:48.260
One thing that goes, you know, hand in hand with packages and trying these things out and

00:22:48.260 --> 00:22:50.920
so on is virtual environments.

00:22:50.920 --> 00:22:52.420
Do you use those often?

00:22:52.880 --> 00:22:55.520
This is going to sound really shocking, but I almost never use them.

00:22:55.520 --> 00:22:56.020
Okay.

00:22:56.020 --> 00:23:00.000
I don't know why I never use them.

00:23:00.000 --> 00:23:06.320
It's like I tend to, when I want to do something custom, I tend to just kind of build Python

00:23:06.320 --> 00:23:07.020
myself.

00:23:07.020 --> 00:23:10.960
And I might just put it in its own directory somewhere.

00:23:10.960 --> 00:23:12.320
I don't know.

00:23:12.320 --> 00:23:16.220
You know, that's probably just a bad thing to be doing, but maybe it's more historical.

00:23:16.220 --> 00:23:21.540
Just having used Python for a while, that's something that's never been that hard to do.

00:23:22.200 --> 00:23:22.240
Right.

00:23:22.240 --> 00:23:24.520
Well, you understand it well enough.

00:23:24.520 --> 00:23:26.800
You just do what virtual environment does more or less, right?

00:23:26.800 --> 00:23:27.680
Yeah.

00:23:27.680 --> 00:23:29.940
I do it the inefficient way, you know.

00:23:29.940 --> 00:23:31.720
The explicit way.

00:23:31.720 --> 00:23:32.080
How's that?

00:23:32.080 --> 00:23:33.580
The explicit way.

00:23:33.580 --> 00:23:34.960
You just download from source.

00:23:34.960 --> 00:23:36.080
Yeah.

00:23:36.080 --> 00:23:41.000
One of the things I do like about, well, I think is that I've actually have started using

00:23:41.000 --> 00:23:44.700
them a little bit more ever since they got built into Python 3.

00:23:46.480 --> 00:23:51.360
So that's actually a big win, I think, for sort of the newer versions of Python is they

00:23:51.360 --> 00:23:55.140
have the virtual environment feature kind of just baked into the language.

00:23:55.140 --> 00:23:58.060
I think that is really nice.

00:23:58.060 --> 00:24:04.000
You know, we could go into a whole side conversation on Python 2 versus Python 3.

00:24:04.680 --> 00:24:05.840
Yeah, we probably don't want to go there.

00:24:05.840 --> 00:24:07.000
We probably don't want to go there.

00:24:07.000 --> 00:24:11.140
But I think it's interesting that things like that are like, hey, here's a little less friction

00:24:11.140 --> 00:24:13.160
if you go down the Python 3 path.

00:24:13.160 --> 00:24:15.580
I talked with Kenneth Reitz on show number six.

00:24:15.580 --> 00:24:17.360
We talked a little bit about that.

00:24:17.360 --> 00:24:22.000
And he's like, I think what we really need is a killer feature that only appears in Python

00:24:22.000 --> 00:24:24.100
3 in order to get people really to switch.

00:24:24.960 --> 00:24:29.320
I mean, there's small gains that are making around like Django switching their documentation

00:24:29.320 --> 00:24:30.660
by default to Python 3.

00:24:30.660 --> 00:24:34.300
And that made a measurable dent in the world.

00:24:34.300 --> 00:24:39.760
But, you know, things like maybe in Python 3, there's no such thing as a global interpreter

00:24:39.760 --> 00:24:40.120
lock.

00:24:40.120 --> 00:24:42.860
Well, that would be a big win.

00:24:42.860 --> 00:24:45.120
I don't know whether that's going to happen anytime soon.

00:24:45.120 --> 00:24:45.800
Of course.

00:24:45.800 --> 00:24:48.480
You know, possibly with something like PyPy, right?

00:24:48.480 --> 00:24:48.920
Or Pyston.

00:24:48.920 --> 00:24:49.600
Maybe.

00:24:49.600 --> 00:24:50.100
I don't know.

00:24:50.100 --> 00:24:50.760
Yeah, maybe.

00:24:50.760 --> 00:24:52.900
Anyway, you know, I think it's interesting.

00:24:52.900 --> 00:24:57.520
But yeah, so these things like the virtual environment stuff being built into Python 3,

00:24:57.520 --> 00:24:58.220
it's really cool.

00:24:58.220 --> 00:25:01.960
And it's, you know, one more check in the box of, hey, you know, consider Python 3.

00:25:01.960 --> 00:25:08.860
So another thing that you talked about is like splitting modules into a bunch of multiple files.

00:25:08.860 --> 00:25:10.980
And I really like to do this.

00:25:10.980 --> 00:25:12.880
Like you sort of started out the conversation.

00:25:12.880 --> 00:25:16.860
I really, really dislike large files, right?

00:25:16.860 --> 00:25:24.180
I would much rather have 10 50 line files than one 500 line file or two 250 line, you know,

00:25:24.180 --> 00:25:25.840
whatever the math works out to be.

00:25:25.840 --> 00:25:27.000
It's a bunch of smaller files.

00:25:27.000 --> 00:25:30.200
It seems like Python kind of dislikes me doing this.

00:25:30.200 --> 00:25:38.280
You know, it's the more I break stuff into small files, the more I have to put a whole bunch of imports at the top.

00:25:39.140 --> 00:25:39.540
Right.

00:25:39.540 --> 00:25:40.960
And that's that that is one thing.

00:25:40.960 --> 00:25:43.320
I mean, you can definitely solve that with those init file.

00:25:43.320 --> 00:25:48.200
I mean, if you put it all in a package, you can kind of stitch it all back together in a knit.

00:25:48.200 --> 00:25:49.600
Right.

00:25:49.600 --> 00:25:53.420
So I could have like all those in a subfolder, which has an under under init.

00:25:53.420 --> 00:25:54.940
So it's a sub package.

00:25:55.040 --> 00:26:04.420
And in that under under init, I would have like import and say from my class import my class or whatever.

00:26:04.420 --> 00:26:07.760
And then they would sort of drop into that top level namespace.

00:26:07.760 --> 00:26:08.040
Right.

00:26:08.040 --> 00:26:08.560
Right.

00:26:08.560 --> 00:26:08.940
Right.

00:26:08.940 --> 00:26:09.300
Right.

00:26:09.300 --> 00:26:13.840
So there's actually quite a few things in the standard library that do that already.

00:26:13.840 --> 00:26:17.460
You know, like things like I think the collections module does that.

00:26:17.460 --> 00:26:19.300
Multiprocessing does that.

00:26:19.300 --> 00:26:23.020
I mean, if you if you look at how those are implemented, they're actually collections of files.

00:26:23.020 --> 00:26:30.660
But to kind of an end user from kind of the Python side, it just looks like you're using a single module, basically.

00:26:30.660 --> 00:26:31.820
Yeah, exactly.

00:26:31.820 --> 00:26:32.940
Just collections dot.

00:26:32.940 --> 00:26:33.600
And it's all there.

00:26:33.600 --> 00:26:36.100
So they pull that off with the package stuff.

00:26:36.100 --> 00:26:36.300
Right.

00:26:36.300 --> 00:26:36.960
With the init file.

00:26:36.960 --> 00:26:37.700
Yeah.

00:26:37.700 --> 00:26:38.400
OK.

00:26:38.400 --> 00:26:39.060
That's cool.

00:26:39.060 --> 00:26:43.620
So one thing that you talked about that I don't know very little bit about are import hooks.

00:26:43.620 --> 00:26:44.880
What are the stories with import hooks?

00:26:44.880 --> 00:26:45.660
What can I do with those?

00:26:45.660 --> 00:26:49.700
Well, import hooks.

00:26:49.700 --> 00:26:58.780
I mean, essentially, some of the new machinery with import gives you complete control over like locating modules on the system.

00:26:58.780 --> 00:27:01.240
What happens when you load modules?

00:27:02.000 --> 00:27:06.380
You can actually completely customize what happens at import.

00:27:06.380 --> 00:27:10.420
You know, for instance, pulling you could pull modules off of URLs.

00:27:10.420 --> 00:27:12.400
You could pull modules out of a database.

00:27:12.400 --> 00:27:15.980
You could even pull in code that wasn't Python.

00:27:15.980 --> 00:27:19.680
You know, one of some things I did a tutorial maybe three.

00:27:19.680 --> 00:27:21.620
It was three years ago, two years ago.

00:27:21.620 --> 00:27:21.900
I don't know.

00:27:21.900 --> 00:27:25.020
It was a Python three metaprogramming tutorial.

00:27:25.020 --> 00:27:37.600
At the end of that, I had some import hook that loaded an XML file and translated it to Python class definitions at import time.

00:27:37.600 --> 00:27:40.240
So I'm not saying this was a good idea.

00:27:40.240 --> 00:27:44.960
It was sort of an example of some crazy thing that was possible.

00:27:46.080 --> 00:27:47.000
That's pretty awesome.

00:27:47.000 --> 00:27:48.740
Maybe not recommended, though.

00:27:48.740 --> 00:27:49.880
Maybe not.

00:27:49.880 --> 00:27:51.120
Let me rephrase.

00:27:51.120 --> 00:27:55.200
It's probably awesome that you can do it, but not awesome if you do do it.

00:27:55.200 --> 00:28:00.080
Yeah, I think I pitched the XML example as something that's been very enterprise ready.

00:28:00.080 --> 00:28:03.560
Oh, that definitely sounds enterprise ready.

00:28:03.560 --> 00:28:04.100
Yeah.

00:28:04.100 --> 00:28:06.400
So what about threading?

00:28:06.400 --> 00:28:10.000
Is there any special considerations for modules if I'm like working with threads?

00:28:11.000 --> 00:28:20.840
Well, one of the things that I didn't realize doing the tutorial is just how nasty the import statement combined with threads is under the cover.

00:28:20.840 --> 00:28:23.980
Well, under the covers.

00:28:23.980 --> 00:28:31.820
It turns out that module imports is not really a totally thread-safe thing to do.

00:28:31.820 --> 00:28:42.600
Like, you know, if you're loading a module or Python is in the process of importing something, potentially you could have another thread that tries to import the same module at the same time.

00:28:42.600 --> 00:28:47.860
And it actually has to take some steps to avoid just complete chaos with that.

00:28:47.860 --> 00:28:54.200
Like, one of the things that you don't want is you don't want it to – you don't want Python to load a module twice.

00:28:55.020 --> 00:29:00.000
Like, you wouldn't want – because that violates the way that modules work, that they only get loaded once.

00:29:00.000 --> 00:29:05.720
So if you had two threads trying to import the same module, one of them has to do it and the other one has to wait.

00:29:05.720 --> 00:29:14.500
The other thing that's tricky is, you know, that the thread that has to wait can't use like a half-loaded module either.

00:29:14.500 --> 00:29:20.500
So it turns out there's a bunch of just nasty stuff with threads and import.

00:29:20.500 --> 00:29:26.080
I think a lot of that comes from code that does import statements inside functions.

00:29:26.080 --> 00:29:27.400
Yeah, yeah.

00:29:27.400 --> 00:29:30.460
That's kind of a temporary import it, throw it away sort of thing, right?

00:29:30.460 --> 00:29:31.500
Yeah, right.

00:29:31.500 --> 00:29:34.720
And so sometimes people will put like an import inside of a function.

00:29:34.720 --> 00:29:43.620
And then if that function happens to execute within a thread, you know, the import might not happen until some thread hits that function.

00:29:43.620 --> 00:29:48.380
And then all of a sudden you have concurrent imports taking place.

00:29:48.380 --> 00:29:50.560
Yeah, that doesn't sound good.

00:29:50.560 --> 00:29:53.480
So does Python take care of it for us though in the end?

00:29:53.480 --> 00:29:56.200
Python takes care of it for us, thankfully.

00:29:57.200 --> 00:29:59.780
But some of the code for that is really nasty.

00:29:59.780 --> 00:30:05.720
I looked at some of the implementation and they're doing all sorts of things like thread deadlock avoidance algorithms.

00:30:05.720 --> 00:30:08.340
And there's like all sorts of corner cases.

00:30:08.340 --> 00:30:14.120
I tried to actually get Python to fail with some of the cases that they checked for.

00:30:14.120 --> 00:30:20.260
I was not successful in doing that, which I think gives me maybe some bit of relief thinking,

00:30:20.260 --> 00:30:27.640
wow, okay, if I can't make it fail there, then it's unlikely this would happen in most code.

00:30:27.640 --> 00:30:33.520
But yeah, there's a lot of just really weird, nasty corner cases on that.

00:30:33.520 --> 00:30:37.220
Yeah, the whole threading story in Python looks a little shadowy.

00:30:37.220 --> 00:30:40.580
Like it doesn't get exposed to the light nearly as much as a lot of the other pieces.

00:30:40.580 --> 00:30:45.320
Not shadowy and necessarily evil, but, you know, it's just less used, I would guess.

00:30:45.320 --> 00:30:46.540
Yes.

00:30:46.540 --> 00:30:49.560
Well, especially if it interacts with something like import.

00:30:49.700 --> 00:30:52.760
I mean, you know, already import is pretty dark magic.

00:30:52.760 --> 00:30:58.040
And, you know, you combine that with threads and then you're sort of in a weird place at that point.

00:30:58.040 --> 00:30:58.380
So.

00:30:58.380 --> 00:30:59.580
Yes, you are.

00:30:59.580 --> 00:31:03.580
So you also said that you can reload modules programmatically.

00:31:03.580 --> 00:31:06.260
And Python doesn't do that for you, but you can.

00:31:06.260 --> 00:31:09.420
But you also said it's not a super good idea.

00:31:09.420 --> 00:31:10.460
What's the story of that?

00:31:10.460 --> 00:31:12.380
I would not do that.

00:31:12.380 --> 00:31:16.380
I mean, so Python has traditionally had this reload statement.

00:31:17.340 --> 00:31:20.960
You know, Python 2, you have to reload thing that would reload a module.

00:31:20.960 --> 00:31:25.160
And then there's always been this kind of like advice surrounding it.

00:31:25.160 --> 00:31:30.140
Like, well, you can do it, but you should basically never do it because, you know, puppies will die or something.

00:31:30.140 --> 00:31:35.540
If you do that, then there's, you know, some kind of vague, ominous sort of mystery surrounding that.

00:31:35.540 --> 00:31:40.440
And then in Python 3, they just took it out altogether as a built in.

00:31:40.440 --> 00:31:43.080
They sort of said, well, OK, we're going to get rid of reloading.

00:31:43.080 --> 00:31:45.900
Although you can find it in one of the libraries.

00:31:45.900 --> 00:31:49.580
So I think it's an import lib or something like that.

00:31:50.780 --> 00:31:58.500
The thing that I think is kind of interesting about reload is it's one of these things that somebody, they could think that it might be an interesting idea.

00:31:58.500 --> 00:32:02.160
Like, OK, I have some Python code running in a server somewhere.

00:32:02.160 --> 00:32:12.880
And I want to, I don't know, I want to make a code change and then, you know, have it load up into my server without restarting it or something like that.

00:32:13.260 --> 00:32:16.420
Yeah, maybe I've got a website sitting there running and I don't want to have to deal with it.

00:32:16.420 --> 00:32:20.840
I want to just notice if a new file gets dropped in here, just pick it up and run with it, right?

00:32:20.840 --> 00:32:21.760
Right, right, right.

00:32:21.760 --> 00:32:27.480
You know, maybe, you know, maybe somebody has seen, you know, like a demo of Erlang somewhere, somewhere at some place.

00:32:27.480 --> 00:32:33.760
And they're like, oh, I want to be able to do that in Python, you know, do like a hot swap of code or something on the fly.

00:32:33.760 --> 00:32:38.020
And, you know, so in the tutorial, talked about reload a little bit.

00:32:38.020 --> 00:32:42.860
Is there anything that you could do to make that work?

00:32:42.940 --> 00:32:46.180
I mean, so here's some of the problems with reload.

00:32:46.180 --> 00:32:51.960
One big problem with it concerns instances of objects that you've created.

00:32:51.960 --> 00:32:53.980
So let's say you had some code.

00:32:53.980 --> 00:32:57.280
You have a bunch of instances of classes kind of floating around.

00:32:57.280 --> 00:33:06.020
If you reload all of the class definitions, what ends up happening is you have all these existing instances that are basically using the old code.

00:33:06.020 --> 00:33:10.840
And then any new instance you would make would end up using the new code.

00:33:10.920 --> 00:33:16.100
So you could actually end up with like instances in your code using two different class definitions at the same time.

00:33:16.100 --> 00:33:17.080
Oh, that's kind of crazy.

00:33:17.080 --> 00:33:22.800
I suspect it runs, but things like static class level data might be kind of broken.

00:33:23.440 --> 00:33:24.700
Static stuff breaks.

00:33:24.700 --> 00:33:28.480
Another thing that breaks horribly is the super call.

00:33:28.480 --> 00:33:29.640
If you ever use that.

00:33:29.640 --> 00:33:35.720
One of the arguments to super is the name is the class that you're that you're working with.

00:33:35.720 --> 00:33:41.760
If you ever if you ever do that, you'll end up getting this extremely cryptic error message.

00:33:43.400 --> 00:33:44.560
Something about kittens.

00:33:44.560 --> 00:33:47.900
Yeah, about kittens dying or something like that.

00:33:47.900 --> 00:33:50.920
Although, I mean, here's here's kind of the wild thing.

00:33:50.920 --> 00:33:54.220
You actually can kind of hack this.

00:33:54.220 --> 00:33:55.840
I mean, one of the one of the things that people.

00:33:56.960 --> 00:34:01.620
Well, one of the things you can do with Python objects is you can change the class attribute.

00:34:01.620 --> 00:34:09.920
I don't know if anybody's done that, but like all objects, they have this magic attribute class that sort of points to the class.

00:34:09.920 --> 00:34:21.980
You could do some reloading hacks where, you know, on a module reload, you go through all of the existing instances and then flip their class attribute to the newly loaded class.

00:34:22.080 --> 00:34:25.200
And then all of a sudden they'll be all of a sudden they're using the new code.

00:34:25.200 --> 00:34:25.980
Yeah.

00:34:25.980 --> 00:34:35.660
So maybe it's possible if somebody really wanted to change the standard library to support this, it maybe could be done, but maybe it's not really the best idea.

00:34:35.660 --> 00:34:47.540
I my gut feeling is that you could probably do it if you wanted to surround your application with these sort of like 10,000 lines of code to manage it in some kind of sane way.

00:34:47.540 --> 00:34:49.660
And then maybe it would work.

00:34:49.660 --> 00:34:51.440
It's like a qualified maybe.

00:34:51.660 --> 00:34:52.760
You know, maybe it would work.

00:34:52.760 --> 00:34:59.560
I'm just not sure it's even tractable problem to solve in the big picture, though.

00:34:59.560 --> 00:35:00.180
I mean, it's just.

00:35:00.180 --> 00:35:02.060
And maybe it's not a good idea anyway.

00:35:02.060 --> 00:35:10.160
You know, things with, you know, I just released a show with Docker and things like Docker and these microservices and so on.

00:35:10.160 --> 00:35:13.180
It probably means it's less of a big deal to restart your app.

00:35:13.180 --> 00:35:15.420
Yeah, that's probably my feeling, too.

00:35:15.420 --> 00:35:25.800
I mean, I have to admit, Mike, in the code I'm working on now, if I want to do a deployment of new code, I just kill minus nine, the old one.

00:35:25.800 --> 00:35:26.380
Yeah, sure.

00:35:26.740 --> 00:35:36.440
You know, it's it's I mean, the system actually has a sort of a like a monitor or a watchdog or something that's, you know, just watches to see whether the thing is running or not.

00:35:36.440 --> 00:35:37.880
If it's not, it restarts it.

00:35:37.880 --> 00:35:38.420
Oh, it died.

00:35:38.420 --> 00:35:38.940
Bring it back.

00:35:38.940 --> 00:35:39.460
Oh, yeah.

00:35:39.500 --> 00:35:45.640
So if you want to if you want to do a deployment, you just kill the old one and then it will automatically respawn itself at some point.

00:35:45.640 --> 00:35:48.260
So, yeah, that that works.

00:35:48.260 --> 00:35:49.880
Nice.

00:35:49.880 --> 00:35:54.620
So you talked a little bit about the reloading stuff being different in Python three.

00:35:54.620 --> 00:35:59.820
Is there other stuff that you're aware of, like this dramatically different from Python two to Python three?

00:35:59.820 --> 00:36:09.060
Like if I'm down at the package level, writing code, worrying about those things, do I have to do something to make my Python two code friendly to Python three upgrades and things like that?

00:36:09.060 --> 00:36:13.240
I wouldn't say there's a huge number of differences on the Python two, three side.

00:36:13.240 --> 00:36:19.880
You know, one thing that might impact people is you can't do a relative import within a package.

00:36:19.880 --> 00:36:30.260
So if you had a if you had a like a package directory spam and then you had two files in there, you know, like foo and bar dot foo dot pi bar dot pi.

00:36:30.260 --> 00:36:38.920
In Python two, you can one of those files like bar dot pi can just say import foo and it will find it in the same directory.

00:36:38.920 --> 00:36:41.660
That does not work in Python three.

00:36:41.660 --> 00:36:45.980
You would have to say from dot import foo or something.

00:36:45.980 --> 00:36:53.160
So so this relative import feature, that is one place that might break in Python two, like from two to three.

00:36:53.160 --> 00:36:56.180
I'm not really aware of much else, though.

00:36:56.180 --> 00:36:59.640
And I haven't been using three for a while.

00:36:59.640 --> 00:37:04.440
I haven't really noticed anything that would that would break across languages like that.

00:37:04.700 --> 00:37:05.400
OK, that's cool.

00:37:05.400 --> 00:37:09.240
So you said the from dot sort of relative import style.

00:37:09.240 --> 00:37:10.280
Does that also work in two?

00:37:10.280 --> 00:37:11.720
That also works in two.

00:37:11.720 --> 00:37:11.940
Yeah.

00:37:11.940 --> 00:37:15.240
It's just there's another syntax in two that wouldn't work in three, right?

00:37:15.240 --> 00:37:18.120
No, it's the same syntax in two and three, actually.

00:37:18.120 --> 00:37:18.600
Oh, OK.

00:37:18.600 --> 00:37:20.960
So the syntax works in both.

00:37:21.740 --> 00:37:26.120
It's just that the Python two is, you know, lets you do this relative import.

00:37:26.120 --> 00:37:29.220
They they've taken that away from you in Python three.

00:37:29.220 --> 00:37:29.540
So.

00:37:29.540 --> 00:37:29.880
Yeah.

00:37:29.880 --> 00:37:30.140
OK.

00:37:30.140 --> 00:37:30.520
Yeah.

00:37:30.520 --> 00:37:31.320
That's what I was thinking of.

00:37:31.320 --> 00:37:32.080
OK, cool.

00:37:32.080 --> 00:37:39.240
One of the things that I don't know, I wanted to ask you about was what surprised you about going through like this deep dive into this world?

00:37:39.240 --> 00:37:41.800
Like what do you feel like you learned from this adventure?

00:37:41.800 --> 00:37:49.360
I think one takeaway from looking at it is that there has been really an effort at cleaning up a lot of hacks.

00:37:50.100 --> 00:38:00.700
Like a lot of the features that's been that have been built into the new import machinery are actually solving problems that people have been solving with Python two for maybe 10 years or more.

00:38:00.700 --> 00:38:05.560
Like you'll you'll you'll see some feature in Python three where it's like, oh, this is kind of interesting.

00:38:05.560 --> 00:38:06.800
You know, why did they do that?

00:38:06.800 --> 00:38:12.240
And then you kind of chase it down through maybe, you know, descriptions through peps and and things like that.

00:38:12.240 --> 00:38:21.180
And you realize that, you know, the motivation for this maybe came from some thing that somebody had done in, you know, in soap or something or some big Python two package.

00:38:21.180 --> 00:38:25.940
And they've and they've just sort of rethought it in Python three.

00:38:25.940 --> 00:38:34.300
And now what's interesting is the old hack that somebody would have done in Python two is just completely unneeded at this point.

00:38:34.300 --> 00:38:38.500
But, you know, it's been cleaned up in a totally different way.

00:38:38.500 --> 00:38:39.120
That's really cool.

00:38:39.120 --> 00:38:40.720
It's just not a problem anymore.

00:38:40.840 --> 00:38:46.320
Whereas you used to have to have this kind of special knowledge to survive whatever case they were dealing with.

00:38:46.320 --> 00:38:46.500
Right.

00:38:46.500 --> 00:38:47.060
Yeah.

00:38:47.060 --> 00:39:02.340
I think that's actually a theme with a lot of Python three, actually, not just not just imports, but to, you know, if you look really deeply at a lot of things in Python three, they're solving problems that people have been dealing with for a long time.

00:39:02.340 --> 00:39:07.980
But just trying to simplify it or or or make it more sane, if you will.

00:39:07.980 --> 00:39:10.700
And, you know, I think that's throughout the language, actually.

00:39:10.820 --> 00:39:17.660
You see a lot of cleanup of stuff where it's like, well, OK, you no longer have to do this kind of weird hack because it just works.

00:39:17.660 --> 00:39:22.620
And in Python three, the thing that's tricky is that's just a really hard selling point.

00:39:22.620 --> 00:39:32.640
You know, if you're trying to convince somebody to go from Python two to three and say, well, Python three is better because it cleans up this weird hack that somebody was doing on Python two.

00:39:32.640 --> 00:39:37.020
And, you know, 10 years ago, that's often not a compelling story.

00:39:37.020 --> 00:39:37.380
Sure.

00:39:37.380 --> 00:39:38.160
It's hard to say.

00:39:38.160 --> 00:39:38.720
You know what?

00:39:38.720 --> 00:39:44.880
It's easier for the people writing Python three, the standard library stuff to maintain it.

00:39:44.880 --> 00:39:45.600
So you should use it.

00:39:45.600 --> 00:39:46.940
And I think, OK, I don't care about that.

00:39:46.940 --> 00:39:47.680
That's not my problem.

00:39:47.680 --> 00:39:48.420
Right.

00:39:49.360 --> 00:39:52.060
You know, actually, one surprising thing in the Python.

00:39:52.060 --> 00:39:57.840
This is a well, this is one example of some Python three stuff that I thought was surprising.

00:39:58.340 --> 00:40:07.320
Like right now in Python three, you can ask you can ask the import system to locate a module for you without importing it.

00:40:07.320 --> 00:40:12.460
Which is kind of an you say, well, that's kind of an obscure thing.

00:40:12.460 --> 00:40:19.320
But what's kind of interesting about that is it solves a problem that people have doing what I would call a trial import.

00:40:19.320 --> 00:40:25.580
You've probably seen this pattern from time to time where somebody will do a try statement and then they'll try to import a module.

00:40:26.520 --> 00:40:32.800
And then they'll just catch like an import error exception and then maybe take action if it doesn't exist.

00:40:32.800 --> 00:40:33.380
Right.

00:40:33.380 --> 00:40:40.220
Maybe do like some sort of polyfill or try to load the version, Python two version versus Python three or something like that.

00:40:40.220 --> 00:40:40.400
Right.

00:40:40.400 --> 00:40:40.820
Yeah.

00:40:40.820 --> 00:40:45.560
And it turns out there's some really weird, obscure failure modes of that.

00:40:45.560 --> 00:40:48.440
Like, you know, like somebody might try to import a module.

00:40:48.440 --> 00:40:53.660
Maybe the module exists, but it can't import some other module.

00:40:54.180 --> 00:41:00.880
And then you end up with like these, these like weird failure modes where you might get error messages related to the wrong thing.

00:41:01.220 --> 00:41:04.160
Or it might be kind of pointing you in completely the wrong direction.

00:41:04.160 --> 00:41:05.220
Yeah.

00:41:05.220 --> 00:41:07.680
You might tell the user, hey, make sure you have this package installed.

00:41:07.680 --> 00:41:09.440
They're like, I do have this package installed.

00:41:09.440 --> 00:41:10.120
Right, right, right.

00:41:10.120 --> 00:41:10.320
Right.

00:41:10.320 --> 00:41:13.540
You can get like a false message saying, hey, I wasn't able to detect your package.

00:41:13.540 --> 00:41:18.840
And then the users like they're looking at their directory and they're cursing because they're like, wait, it's right there.

00:41:18.840 --> 00:41:19.700
I'm looking at it.

00:41:19.700 --> 00:41:20.940
Like, why can't you find this?

00:41:21.420 --> 00:41:23.920
I'm going to email this guy the pip list and show him it's here.

00:41:23.920 --> 00:41:24.940
Yeah, right.

00:41:24.940 --> 00:41:34.860
And so, you know, some of the things that you can do now is it's, yeah, I guess in Python terminology, it's almost like a look before you leap kind of thing with import.

00:41:35.220 --> 00:41:41.400
You can go to the import system and you can say, hey, where is this module?

00:41:41.400 --> 00:41:42.440
Do you have this?

00:41:42.440 --> 00:41:46.660
And it can tell you whether it has it or not without actually importing it.

00:41:46.660 --> 00:41:47.740
Interesting.

00:41:47.740 --> 00:41:48.960
What's the code look like for that?

00:41:48.960 --> 00:41:51.400
It's not try import or anything, right?

00:41:51.400 --> 00:41:55.780
You have to import a single function and you just call it.

00:41:55.780 --> 00:41:56.660
It's like a function call.

00:41:56.660 --> 00:41:57.020
Okay.

00:41:57.020 --> 00:41:57.480
Yeah.

00:41:57.480 --> 00:42:00.700
So there's some library call you say, hey, does this thing exist?

00:42:00.700 --> 00:42:01.480
Show me where it is.

00:42:01.480 --> 00:42:02.160
Yeah.

00:42:02.280 --> 00:42:05.940
It actually gives you this thing known as a module spec.

00:42:05.940 --> 00:42:09.980
So it will actually tell you a whole bunch of information about it, like what path it's in.

00:42:09.980 --> 00:42:11.740
Like, is it Python source code?

00:42:11.740 --> 00:42:12.600
Is it C source?

00:42:12.600 --> 00:42:13.540
Is it C module?

00:42:13.540 --> 00:42:15.940
Is it a built-in?

00:42:15.940 --> 00:42:22.120
You know, you can actually find out a lot of information about the module without even touching, without actually loading it.

00:42:22.120 --> 00:42:22.600
Interesting.

00:42:22.600 --> 00:42:23.800
Will it tell you the version?

00:42:23.800 --> 00:42:29.020
I don't know whether, no, because usually the version is inside the file.

00:42:29.020 --> 00:42:29.740
Yeah, it's in the init.

00:42:29.740 --> 00:42:30.860
Okay.

00:42:30.860 --> 00:42:32.140
Well, that's really cool.

00:42:32.140 --> 00:42:34.100
You can do some interesting things with that as well.

00:42:34.100 --> 00:42:37.440
Doing like, I guess sort of module stand-ins, for instance.

00:42:37.440 --> 00:42:43.720
I don't know that this will make sense, but you can make like a, you can basically ask Python to locate a module.

00:42:43.720 --> 00:42:48.280
And then what you could do is make a dummy module to take its place temporarily.

00:42:48.280 --> 00:42:51.220
Like you could make like an empty module.

00:42:51.700 --> 00:42:57.700
And then you could program that to auto-load the source code when it's accessed later on.

00:42:59.040 --> 00:43:12.340
So if you've ever had this phenomenon, probably people have done this, where you do an import on some module, and then Python just sits there for like 30 seconds while it loads the entire universe of code behind the scenes.

00:43:13.220 --> 00:43:17.460
You know, you might be able to use that to kind of solve loading time issues.

00:43:17.460 --> 00:43:21.180
You know, setting up modules where they don't actually load until they're needed.

00:43:21.180 --> 00:43:24.800
You could have, you know, you could do things like that, which is kind of interesting.

00:43:24.800 --> 00:43:32.740
Could you do something insane like kick off another thread to import it, and maybe it'll already be loaded by the time the code needs it actually gets there?

00:43:33.600 --> 00:43:35.540
I hadn't thought of that, but yeah, maybe.

00:43:35.540 --> 00:43:37.360
That probably would be wrong.

00:43:37.360 --> 00:43:39.060
It is kind of insane, actually.

00:43:39.060 --> 00:43:40.400
Yeah, so you could do like a...

00:43:40.400 --> 00:43:41.500
Like a lazy load.

00:43:41.500 --> 00:43:42.320
A lazy...

00:43:42.320 --> 00:43:44.460
It would be sort of a lazy load.

00:43:44.460 --> 00:43:46.980
Sort of a lazy concurrent.

00:43:46.980 --> 00:43:50.200
Yeah, I hadn't thought of that, but yeah, that is kind of devious.

00:43:50.200 --> 00:43:53.420
Yeah, you could program it.

00:43:53.420 --> 00:43:55.400
I mean, yeah, I guess you could do that.

00:43:55.400 --> 00:43:57.720
Man, I'd have to...

00:43:57.720 --> 00:43:58.400
That would...

00:43:58.400 --> 00:43:58.880
I don't know.

00:43:58.880 --> 00:44:03.260
You might have to explain that at a code review or something like that if you sprung that on your...

00:44:03.260 --> 00:44:05.440
Could you just tell me why this is here?

00:44:05.440 --> 00:44:07.700
Who knows?

00:44:07.700 --> 00:44:11.620
Maybe someday Python will have a lazy import keyword.

00:44:11.620 --> 00:44:12.360
Probably not.

00:44:12.360 --> 00:44:14.720
Yeah, I'm just trying to think how that would work.

00:44:14.720 --> 00:44:16.300
I mean, I guess that would be...

00:44:16.300 --> 00:44:19.680
I think you could just kick off a thread and just do nothing but import it, right?

00:44:19.680 --> 00:44:23.920
And then technically, I mean, Python should manage that concurrency.

00:44:23.920 --> 00:44:27.140
And if you don't end up calling the function that actually needed it till later, maybe.

00:44:27.140 --> 00:44:27.840
I don't know.

00:44:27.840 --> 00:44:31.340
So in a sense, you'd be sort of lying to the user, right?

00:44:31.340 --> 00:44:32.300
I mean, they would...

00:44:32.300 --> 00:44:35.940
I'm thinking how this would be useful, like interactively, right?

00:44:35.940 --> 00:44:38.720
They could type the port and it would come back instantly.

00:44:38.720 --> 00:44:41.100
Oh, look, they made it fast.

00:44:41.100 --> 00:44:44.240
The person using it would think, oh, Python is awesome.

00:44:44.240 --> 00:44:45.100
It's so fast.

00:44:45.100 --> 00:44:53.620
And then not realizing that it's actually importing the universe behind the scenes, in a thread taking like 30 seconds or something.

00:44:53.620 --> 00:44:54.260
Exactly.

00:44:54.260 --> 00:44:55.660
It's probably wrong.

00:44:55.660 --> 00:44:58.300
A lot of things are wrong, though.

00:44:58.300 --> 00:44:59.780
It's true.

00:44:59.880 --> 00:45:00.880
Okay, I have to think about that.

00:45:00.880 --> 00:45:09.980
So another thing I wanted to ask you about is, you know, in the init file, it kind of felt like that is there mostly to like structure your import.

00:45:09.980 --> 00:45:15.440
So I'm going to say import this module, this module, this module, put them in the top level namespace and so on.

00:45:15.440 --> 00:45:17.680
But you can write arbitrary code there.

00:45:17.680 --> 00:45:22.160
Do you think that that kind of stuff is like abusing the intent of that?

00:45:22.220 --> 00:45:25.780
Or is it kind of, it's just taking advantage of what you should be able to do?

00:45:25.780 --> 00:45:28.920
I see modules that do that.

00:45:28.920 --> 00:45:31.960
I don't have a strong opinion on it.

00:45:31.960 --> 00:45:38.420
Although I have to say it kind of rubs me the wrong way a little bit to see tons and tons of code in the init file.

00:45:39.420 --> 00:45:42.040
Partly because that's not where I'm expecting to see it.

00:45:42.040 --> 00:45:48.340
If I'm looking at somebody else's code and I want to know, oh, where's the source code for the database object or something like that?

00:45:48.340 --> 00:45:54.340
I'm more inclined to look for maybe a file called db.py or something.

00:45:54.340 --> 00:45:58.000
It doesn't occur to me that the code would be in the init file.

00:45:59.280 --> 00:46:01.520
Yeah, I kind of feel the same way.

00:46:01.520 --> 00:46:03.120
I was wondering what your thoughts were there.

00:46:03.120 --> 00:46:07.580
I try to keep the init files kind of small.

00:46:07.580 --> 00:46:08.980
Yeah, I agree.

00:46:08.980 --> 00:46:12.080
Like I said, more small files is my style as well.

00:46:12.080 --> 00:46:16.260
Just sometimes, you know, I feel like I'm importing a thousand things.

00:46:16.260 --> 00:46:17.060
Yeah.

00:46:17.060 --> 00:46:19.480
I mean, I have seen that technique used.

00:46:19.480 --> 00:46:24.580
I mean, sometimes I run into that where, you know, maybe somebody started with just a single file module.

00:46:24.580 --> 00:46:28.860
And then all of a sudden they want to have unit tests shipped with it or something.

00:46:29.020 --> 00:46:32.020
Like maybe they want to have like a subdirectory of unit tests.

00:46:32.020 --> 00:46:37.620
And they'll do things like, oh, I'll just take my whole module and drop it into the init file.

00:46:37.620 --> 00:46:38.980
How could that be wrong?

00:46:38.980 --> 00:46:44.300
You know, and then I'll have like a separate test subdirectory or something where I'll put my unit tests.

00:46:44.300 --> 00:46:46.920
So I don't know.

00:46:46.920 --> 00:46:52.580
Okay, there's two questions that I like to ask my guests near the end.

00:46:52.580 --> 00:46:54.060
And so I'll ask you those now.

00:46:54.660 --> 00:47:01.080
Do you have any favorite PyPy packages or like libraries that, you know, you think are really cool?

00:47:01.080 --> 00:47:03.640
I just want to say, hey, world, check out this package.

00:47:03.640 --> 00:47:04.260
It's really awesome.

00:47:05.260 --> 00:47:05.980
Okay.

00:47:05.980 --> 00:47:08.240
Well, there are the obvious ones.

00:47:08.240 --> 00:47:10.440
I'm a big fan of pandas.

00:47:10.440 --> 00:47:11.320
Pandas is cool.

00:47:11.320 --> 00:47:12.680
For data analysis.

00:47:12.680 --> 00:47:15.220
Things like requests, SQLAlchemy.

00:47:15.220 --> 00:47:18.280
I think these are used by a lot of people, though.

00:47:18.280 --> 00:47:19.760
So I'm trying to think of it.

00:47:19.760 --> 00:47:21.300
Yeah, requests is downloaded 40 million times.

00:47:21.660 --> 00:47:27.000
Yeah, I'm trying to think of a more obscure, cool thing.

00:47:27.000 --> 00:47:35.940
Well, you're thinking of one of the ones that I was reminded of yesterday is something called passlib that'll do all the management of like hashing correctly passwords and stuff.

00:47:35.940 --> 00:47:37.080
Oh, okay.

00:47:37.080 --> 00:47:38.380
So you can say, here's a password.

00:47:38.380 --> 00:47:40.540
And I want to use SHA-512 hashing.

00:47:40.540 --> 00:47:46.300
And please iterate that hash 40,000 times so it's super computational to like, you know, brute force it.

00:47:46.300 --> 00:47:47.440
And boom, here.

00:47:47.440 --> 00:47:49.100
And that's like one line of code in that thing.

00:47:49.100 --> 00:47:49.560
That's beautiful.

00:47:49.560 --> 00:47:50.320
Okay.

00:47:50.320 --> 00:47:51.540
I have to look at that.

00:47:52.160 --> 00:47:58.020
Well, actually, this is a standard library module that's in Python 3 that I think blows people's mind.

00:47:58.020 --> 00:47:59.500
I had some people in a class.

00:47:59.500 --> 00:48:03.660
They were very fixated on manipulating IP addresses.

00:48:03.660 --> 00:48:04.320
Okay.

00:48:04.320 --> 00:48:08.120
I was like, you should look at the IP address module.

00:48:08.120 --> 00:48:10.840
This is something that's in the standard library in 3.4.

00:48:10.840 --> 00:48:14.060
There's a whole module just related to manipulating IP addresses.

00:48:14.060 --> 00:48:15.940
Wow, I don't think I've even touched that thing.

00:48:15.940 --> 00:48:20.080
Oh, it's like, yeah, iterating over like subnets and all sorts of things like that.

00:48:20.120 --> 00:48:22.660
That might be something to look at to kind of blow people's mind.

00:48:22.660 --> 00:48:23.680
Yeah, that is pretty cool.

00:48:23.680 --> 00:48:24.380
All right.

00:48:24.380 --> 00:48:24.660
Awesome.

00:48:24.660 --> 00:48:27.300
And the other question is, what editor do you like?

00:48:27.300 --> 00:48:28.580
I use Emacs.

00:48:28.580 --> 00:48:29.080
Emacs.

00:48:29.080 --> 00:48:29.580
All right.

00:48:29.580 --> 00:48:30.100
Right on.

00:48:30.100 --> 00:48:32.240
Yeah, I use Emacs back in the day.

00:48:32.240 --> 00:48:33.740
These days I've been doing PyCharm.

00:48:33.940 --> 00:48:38.060
I guess I'm patient, waiting for stuff to start to get all the features.

00:48:38.060 --> 00:48:38.880
I don't know.

00:48:38.880 --> 00:48:44.820
I have too much invested in Emacs at this point to give it up.

00:48:44.820 --> 00:48:48.640
You know, I've been using it so long.

00:48:48.640 --> 00:48:50.580
I don't know.

00:48:50.580 --> 00:48:51.420
Lost cause.

00:48:51.420 --> 00:48:51.860
Absolutely.

00:48:51.860 --> 00:48:56.820
We could almost have a Python 2 versus 3 type debate with Emacs versus Vim versus IDs.

00:48:57.620 --> 00:48:59.340
But we won't go down that path right now.

00:48:59.340 --> 00:49:02.780
Mostly I just like, I like to use Emacs to kind of troll people a little bit.

00:49:02.780 --> 00:49:04.440
So that's always, uh...

00:49:04.440 --> 00:49:05.300
Hey, it's written in Lisp.

00:49:05.300 --> 00:49:06.100
That's kind of fun, right?

00:49:06.100 --> 00:49:07.080
Always fun.

00:49:07.080 --> 00:49:07.380
Yeah.

00:49:07.380 --> 00:49:13.780
So, although actually my big shameful thing with Emacs, I have to admit that I never customize it.

00:49:13.780 --> 00:49:14.440
Oh my gosh.

00:49:14.620 --> 00:49:17.360
I know it has all that Lisp and stuff in there.

00:49:17.360 --> 00:49:19.260
Never go there.

00:49:19.260 --> 00:49:23.620
I have too many other projects to work on than that.

00:49:23.620 --> 00:49:25.740
You don't need to change your editor.

00:49:25.740 --> 00:49:26.760
Just get some work done.

00:49:26.760 --> 00:49:28.600
Just get work done.

00:49:28.600 --> 00:49:31.680
I actually wish they'd fix Idle a little bit.

00:49:31.680 --> 00:49:32.040
Yeah.

00:49:32.040 --> 00:49:33.260
Yeah, I could use some help.

00:49:33.260 --> 00:49:35.180
They like to hate on Idle.

00:49:35.180 --> 00:49:39.340
And I use it a fair amount for teaching classes.

00:49:39.340 --> 00:49:43.040
You know, it has the one feature of it comes with Python.

00:49:44.300 --> 00:49:51.100
And so if you're looking for just an easy way to get started without having to install all this stuff, it's great.

00:49:51.100 --> 00:49:53.420
But it could definitely use some love these days.

00:49:53.420 --> 00:49:54.960
Yeah, I agree.

00:49:54.960 --> 00:49:56.200
All right.

00:49:56.200 --> 00:49:58.660
David, I think that might make a show for us.

00:49:58.660 --> 00:50:00.100
That was a really interesting conversation.

00:50:00.100 --> 00:50:02.200
Before we head out, there's two things.

00:50:02.200 --> 00:50:06.840
One, I want to say people can find your tutorial on YouTube.

00:50:06.840 --> 00:50:11.880
In the previous show, I had a playlist of my favorite talks from PyCon 2015.

00:50:11.880 --> 00:50:14.020
And I'll put that in the show notes.

00:50:14.100 --> 00:50:20.700
But you can just go to bit.ly, B-I-T dot L-Y slash PyCon 2015 M-K, all lowercase.

00:50:20.700 --> 00:50:24.820
And that'll be a list of like 30 really good sessions from PyCon 2015.

00:50:24.820 --> 00:50:26.260
And yours is definitely in there.

00:50:26.260 --> 00:50:27.580
Okay, great.

00:50:27.580 --> 00:50:28.140
Awesome.

00:50:28.140 --> 00:50:30.640
And anything else you want to give a shout out to, let people know about?

00:50:30.640 --> 00:50:31.440
I don't know.

00:50:31.440 --> 00:50:34.080
If you like the tutorials, come take a class with me in Chicago.

00:50:34.080 --> 00:50:36.120
That'd be the only thing I'd say there, I think.

00:50:36.120 --> 00:50:36.640
All right, awesome.

00:50:36.640 --> 00:50:38.040
You got a website they should check out for that?

00:50:38.420 --> 00:50:41.020
They can find it on my personal site.

00:50:41.020 --> 00:50:42.440
Okay, cool.

00:50:42.440 --> 00:50:43.620
We'll put that in the show notes as well.

00:50:43.620 --> 00:50:44.320
Okay.

00:50:44.320 --> 00:50:45.500
All right, David.

00:50:45.500 --> 00:50:46.340
Thanks for being on the show.

00:50:46.340 --> 00:50:46.820
It's been fun.

00:50:46.820 --> 00:50:47.560
Okay.

00:50:47.560 --> 00:50:48.060
Thanks a lot.

00:50:49.020 --> 00:50:51.160
Today's guest was David Beasley.

00:50:51.160 --> 00:50:54.320
And this episode has been sponsored by CodeShip and Hired.

00:50:54.320 --> 00:50:55.080
Thank you.

00:50:55.080 --> 00:50:55.560
Thank you.

00:50:55.560 --> 00:50:57.260
Thank you for keeping this show going.

00:50:57.260 --> 00:51:03.320
Please check out CodeShip at CodeShip.com and thank them on Twitter via at CodeShip.

00:51:03.320 --> 00:51:05.260
Don't forget the discount for listeners.

00:51:05.260 --> 00:51:05.980
It's easy.

00:51:05.980 --> 00:51:07.100
Talk Python.

00:51:07.100 --> 00:51:07.980
All caps.

00:51:07.980 --> 00:51:08.760
No spaces.

00:51:08.760 --> 00:51:11.800
Hired wants to help you find your next big thing.

00:51:11.800 --> 00:51:17.860
Visit Hired.com slash Talk Python To Me to get five or more offers with salary and equity right up front

00:51:17.860 --> 00:51:21.380
and a special listener signing bonus of $4,000 US.

00:51:21.380 --> 00:51:29.620
Remember, you can find the links from the show at Talk Python To Me.com slash episodes slash show slash 12.

00:51:29.620 --> 00:51:32.080
Be sure to subscribe to the show.

00:51:32.080 --> 00:51:35.720
Open your favorite podcatcher and search for Python.

00:51:35.720 --> 00:51:37.240
We should be right at the top.

00:51:37.240 --> 00:51:41.680
You can also find the iTunes and direct RSS feeds in the footer of the website.

00:51:42.340 --> 00:51:43.840
This is your host, Michael Kennedy.

00:51:43.840 --> 00:51:44.920
Thanks for listening.

00:51:44.920 --> 00:51:47.680
Smicks, take us out of here.

00:51:47.680 --> 00:51:48.340
Stay tuned.

00:51:48.340 --> 00:51:48.680
Stay tuned.

00:51:48.680 --> 00:51:49.340
Stay tuned.

00:51:49.340 --> 00:51:49.340
Stay tuned.

00:51:49.340 --> 00:51:49.560
Stay tuned.

00:51:49.560 --> 00:51:51.560
Stay tuned.

00:51:51.560 --> 00:51:52.620
Haven't been sleeping.

00:51:52.620 --> 00:51:54.260
I've been using lots of rest.

00:51:54.260 --> 00:51:57.120
I'll pass the mic back to who rocked it best.

00:51:57.120 --> 00:52:09.420
I'll pass the mic back to who rocked it best.

