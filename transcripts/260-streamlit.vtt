WEBVTT

00:00:00.001 --> 00:00:05.280
If you work on the data science or data visualization side of Python, you may have come to it from a

00:00:05.280 --> 00:00:11.060
scripting side of things, writing just a little Python using its magical libraries with little

00:00:11.060 --> 00:00:16.660
structure or formalism to build a powerful analysis tool that runs in the terminal or

00:00:16.660 --> 00:00:22.020
maybe even in a Jupyter notebook. What if you could take that same code, sprinkle in a bit of

00:00:22.020 --> 00:00:28.280
a simple API and turn it into a fast and dynamic single page web application that allows your users

00:00:28.280 --> 00:00:34.180
to dive into the visualizations right there in the app? Well, that's basically what the folks over at

00:00:34.180 --> 00:00:38.700
Streamlit created, and we're going to dive into it with one of the creators, Adrian Truel.

00:00:38.700 --> 00:00:43.780
This is Talk Python To Me, episode 260, recorded April 9th, 2020.

00:00:56.560 --> 00:01:02.220
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:01:02.220 --> 00:01:06.900
and the personalities. This is your host, Michael Kennedy. Follow me on Twitter where I'm at,

00:01:06.900 --> 00:01:12.200
mkennedy. Keep up with the show and listen to past episodes at talkpython.fm, and follow the show on

00:01:12.200 --> 00:01:19.360
Twitter via at Talk Python. This episode is sponsored by Linode and Reuven Lerner's Ace Python interviews

00:01:19.360 --> 00:01:23.680
course. Please check out what they're both offering during their segments. It really helps support the

00:01:23.680 --> 00:01:29.060
show. Adrian, welcome to Talk Python To Me. Hey, Mike. So excited to be here. Thanks a lot for

00:01:29.060 --> 00:01:33.500
inviting me on the show. Hey, it's super happy to have you here on the show. A ton of people reached

00:01:33.500 --> 00:01:39.940
out to me when Streamlit was initially launched saying, there's this new thing. It has changed my

00:01:39.940 --> 00:01:45.060
world. You have to talk to the people behind it. And so now I'm excited to talk to the people behind it.

00:01:45.140 --> 00:01:52.560
Yeah, totally. It's awesome to hear that. And, you know, definitely for someone who's spent a lot of

00:01:52.560 --> 00:01:58.560
time, you know, in a room programming alone, it's really cool to have made something and hear people

00:01:58.560 --> 00:02:03.880
say, this is awesome. This, this, you know, really changed my life and my work. So that's great to hear.

00:02:03.880 --> 00:02:09.000
Yeah, it's a super cool product. And I think it's going to be fun to talk about. It really enables

00:02:09.000 --> 00:02:16.240
data scientists to get certain types of computation out there in a way that people can interact with.

00:02:16.240 --> 00:02:21.720
So I'm very excited to talk about it, where it came from, some of the technology inside of it and

00:02:21.720 --> 00:02:25.060
whatnot. But let's get started with your story. How'd you get into programming in Python?

00:02:25.060 --> 00:02:31.060
My story is that it's never too late to become a programmer. I actually went to college to study

00:02:31.060 --> 00:02:36.520
international relations. I was, came from a bilingual family and I, you know, I figured out I should do

00:02:36.520 --> 00:02:41.000
politics or something like that. Right. Leverage your bilingualism, right? What languages did you,

00:02:41.000 --> 00:02:47.100
do you speak? Well, okay. So my dad's French. So I grew up speaking French and English and we were,

00:02:47.100 --> 00:02:51.400
and then, you know, being, you know, growing up in the U S I'm surprising that I took Spanish.

00:02:51.400 --> 00:02:59.100
And then actually when I got to college, I took Chinese. So, you know, I didn't come from a family

00:02:59.100 --> 00:03:04.320
that really respected like programming and that kind of thing. And so it wasn't part of my world. And I

00:03:04.320 --> 00:03:08.840
feel kind of envious of kids who grew up, you know, went to science high schools and stuff,

00:03:08.840 --> 00:03:14.820
because in retrospect, that's really who I was. But it wasn't until I got to college and about a

00:03:14.820 --> 00:03:18.360
year and a half into studying international relations, I was like, this is not for me.

00:03:18.360 --> 00:03:25.640
Actually, I always thought college might not be for me. And then this professor of economics remembered

00:03:25.640 --> 00:03:30.160
me because I had blue hair. And he was like, you know, he said, Adrian, how are you doing? And I said,

00:03:30.160 --> 00:03:35.000
well, you know, not so well, I'm not even sure if I should be here. And he said,

00:03:35.000 --> 00:03:39.680
what you need to do is, he said, you're misallocated, which is a very economic way.

00:03:39.680 --> 00:03:42.380
That's a very economic way to describe your situation.

00:03:42.380 --> 00:03:48.920
Yeah, exactly. And so he was like, what you need to do is you need to study math and science. And I was,

00:03:48.920 --> 00:03:53.560
you know, anyway, I thought that that was ridiculous, literally, but I took him up on his offer.

00:03:54.160 --> 00:04:01.460
And it calc one, my sophomore year of college took intro to programming, was like blown away. It was

00:04:01.460 --> 00:04:07.060
like, these are my people, this is my work. And I'm just so grateful. I found it. Oh, my God. I mean,

00:04:07.060 --> 00:04:13.560
wow, what a fun job to have. And what a fun world to be in. And also, this is back in the late 90s.

00:04:13.620 --> 00:04:20.300
It wasn't 100% as obvious as it is today that this is like, generally, generationally changing for all

00:04:20.300 --> 00:04:24.920
of culture. And obviously, it is everyone sees that now. And so I feel really lucky to have gotten in.

00:04:24.920 --> 00:04:30.620
Yeah, how lucky that you had that interaction. And you found your place because I think a lot of people,

00:04:30.620 --> 00:04:34.680
they don't find their place in the world, they find a place that they're comfortable with,

00:04:34.680 --> 00:04:36.460
and they end up in a place that's okay.

00:04:36.460 --> 00:04:37.280
Absolutely.

00:04:37.280 --> 00:04:41.140
They don't wake up going, wow, I get to do this.

00:04:41.140 --> 00:04:48.820
Yeah. And I really think, you know, being able to figuring out taking time to figure out like,

00:04:48.820 --> 00:04:54.340
what you really would enjoy doing and trying a lot of different things. I just can't think of

00:04:54.340 --> 00:04:59.600
anything more valuable. I really actually think the whole world is a little bit misallocated

00:04:59.600 --> 00:05:04.560
to a certain extent. And if everyone can sort of play musical chairs and, you know, get the right job,

00:05:04.560 --> 00:05:09.860
for a better job, we can just unleash like massive new economic potential. So,

00:05:09.860 --> 00:05:14.980
you know, that's true for my life. It's also been part of actually a theme of my professional life as

00:05:14.980 --> 00:05:20.740
well. So I can talk about that. But anyway, yeah, figuring out what you love to do is I think so

00:05:20.740 --> 00:05:23.020
valuable. And I'm so grateful for that professor.

00:05:23.020 --> 00:05:28.220
That's amazing. I do think there's a little bit, I don't know how to solve this. But I do think there's

00:05:28.220 --> 00:05:33.260
a little bit of a mismatch, where people tell you, you have to find something that you're passionate

00:05:33.260 --> 00:05:40.360
about, or you're not going to be happy in your career. I think that you find something that connects

00:05:40.360 --> 00:05:45.400
with you. And you didn't even know that it was going to connect with you. And then you polish that

00:05:45.400 --> 00:05:51.120
skill. And then you become very passionate and excited about it. So when you, I think when young

00:05:51.120 --> 00:05:54.880
people hear advice, like you have to do what you're passionate about, like when you're young, and you

00:05:54.880 --> 00:05:59.700
haven't had that exposure, like imagine you hadn't taken that math class, like, you weren't passionate

00:05:59.700 --> 00:06:04.640
about math. It's not like you're like, well, get out of my way, you know, languages, I'm going to math,

00:06:04.640 --> 00:06:09.020
right? There's a sort of chicken and egg thing. And I think it's really hard to unlock that potential

00:06:09.020 --> 00:06:14.560
for a lot of people in general. I don't know. I don't know what to give people advice about that.

00:06:14.560 --> 00:06:18.920
But it's it's I think it's interesting that it's important to do what you're passionate about. But like,

00:06:19.480 --> 00:06:22.240
you got to somehow explore to get that figured out.

00:06:22.240 --> 00:06:28.180
I agree. And I also think there may be different, there are different kinds of people, of course. And

00:06:28.180 --> 00:06:33.940
I don't think necessarily being passionate about what you do is as important to other people as it

00:06:33.940 --> 00:06:39.060
turns out it is to me. I don't want to over extrapolate either. But I do feel really grateful

00:06:39.060 --> 00:06:45.540
for, you know, have been given that advice. And it's actually come up in a couple other ways in my life.

00:06:45.540 --> 00:06:51.300
I created a game called Foldit that allowed hundreds of thousands of people to solve protein

00:06:51.300 --> 00:06:56.900
folding problems when I was doing my PhD. I think I've heard of that. Yeah, I'm pretty sure I did hear

00:06:56.900 --> 00:07:03.920
that. Yeah. So it was the gamification of trying to solve a protein folding problem. It wasn't like

00:07:03.920 --> 00:07:08.980
SETI at home where it was like just grid computing, right? It was leveraging human creativity, not

00:07:08.980 --> 00:07:14.820
distributed computing, right? Exactly. And that had sort of that theme. One of the coolest things about

00:07:14.820 --> 00:07:19.800
that project was that a lot of people found out, hey, this is something that I love doing. And they

00:07:19.800 --> 00:07:25.560
were able to contribute to society in like a new way that they've never experienced before. And so I

00:07:25.560 --> 00:07:30.160
think for a lot of people, it sort of unlocked a little bit this, you know, new skill. Yeah.

00:07:30.160 --> 00:07:38.440
And then coming to Streamlit, you know, what we are doing is building software that lets data

00:07:38.440 --> 00:07:43.540
scientists and machine learning engineers, like productize their work without the need of anyone else to

00:07:43.540 --> 00:07:49.480
help them so they can build apps that others can use. And again, I feel like for our users,

00:07:49.480 --> 00:07:56.960
we're giving them like a new form of impact in the world and in their companies. And I think that's

00:07:56.960 --> 00:08:02.500
where the passion comes from. So in a funny way, it does seem like a theme, both in my life personally,

00:08:02.500 --> 00:08:05.060
and also in the products that I've been creating.

00:08:05.280 --> 00:08:09.800
Yeah, absolutely. And so you went from not sure you should be at college to studying some math to

00:08:09.800 --> 00:08:13.540
being a professor at Carnegie Mellon. That's a big, big U-turn.

00:08:13.780 --> 00:08:18.280
Yeah, yeah, yeah, yeah, yeah. But you know, actually, in a funny way, the I don't think the

00:08:18.280 --> 00:08:22.380
quest ended there. Because when I was a professor at Carnegie Mellon, there were some things that I

00:08:22.380 --> 00:08:30.880
really loved about it. But I felt that I wasn't directly affecting the world the way I do now at

00:08:30.880 --> 00:08:38.580
Streamlit. So and in a sense, we were doing super fascinating, very mathematical, big data stuff.

00:08:38.780 --> 00:08:43.940
And it was from an intellectual standpoint, I mean, heaven to the power of heaven.

00:08:43.940 --> 00:08:52.340
But I was missing that that other aspect of things, which is really, you know, having an audience beyond

00:08:52.340 --> 00:08:58.680
a couple hundred experts in the world in some way. Both are totally valid and extremely important

00:08:58.680 --> 00:09:04.880
forms of impact each in their own way. So I am a huge believer in academia, and it's important in

00:09:04.880 --> 00:09:10.940
society. I personally wanted a little bit more direct connection to the, you know, the quote,

00:09:10.940 --> 00:09:19.960
unquote, the user. And that has taken me through a variety of different jobs at Google X, working on

00:09:19.960 --> 00:09:26.100
self-driving cars at Zoox, and then finally starting Streamlit. And for the first time since I created

00:09:26.100 --> 00:09:32.000
Foldit, I'm hearing people say, wow, this is really changing my life. And that's so exciting to have

00:09:32.000 --> 00:09:35.860
created a product that has that property. It's amazing you've done it twice, right?

00:09:35.860 --> 00:09:40.040
And with this, you've made something that's made a big impact for a lot of people.

00:09:40.040 --> 00:09:46.260
It is really gratifying. And I think, you know, the gratifying part is to, first of all, it gets to,

00:09:46.260 --> 00:09:53.460
you know, build cool things and work on cool ideas, but also just have other people feel like their jobs

00:09:53.460 --> 00:09:58.960
are more interesting and more fun, and they're having more impact because of some piece of technology that

00:09:58.960 --> 00:10:03.740
we've pulled out. And so I think that's just great. I think that's just so exciting.

00:10:03.740 --> 00:10:10.080
I agree. So today, day to day, you're working at Streamlit with Thiago and Amanda, your co-founders,

00:10:10.080 --> 00:10:13.340
and I'm guessing some other folks on the team. What kind of work are you doing there?

00:10:13.340 --> 00:10:20.180
Okay, so we're about nine people, and we're about 18, including contractors, and we are hiring a lot

00:10:20.180 --> 00:10:28.220
all across the United States. And we are basically building two products, one of which is Streamlit,

00:10:28.220 --> 00:10:36.120
and the other of which is Streamlit for Teams, which allows people to build data apps really

00:10:36.120 --> 00:10:41.680
quickly in Python. Streamlit for Teams allows them to deploy it really easily, and so that others can

00:10:41.680 --> 00:10:50.040
use it. And then my day is pretty much, well, my dream day is pretty much I'm chatting with the

00:10:50.040 --> 00:10:56.480
engineers and working on design docs and thinking about cool problems. Somehow that's like very rarely

00:10:56.480 --> 00:11:01.380
my actual day. I don't know how it happens, but my actual day is often just like meetings,

00:11:01.380 --> 00:11:05.840
meetings, meetings, meetings, meetings, talking with investors. I don't know, thinking about

00:11:05.840 --> 00:11:13.920
payroll stuff and not sure how, despite my effort over years to make that not be the case, that is

00:11:13.920 --> 00:11:16.380
still the case, but that is still the case.

00:11:16.380 --> 00:11:21.460
Here you find yourself, but you know, that's kind of what it takes to get some of the stuff going,

00:11:21.460 --> 00:11:29.780
right? So yeah, totally, totally. Yeah. And I think, you know, ultimately what has made Streamlit

00:11:29.780 --> 00:11:37.600
great has not actually been my ideas per se, but really actually the ideas of the community

00:11:37.600 --> 00:11:44.440
and also of the engineers working on it. And so I try to remember that even though I have a dream job

00:11:44.440 --> 00:11:49.320
of working on every aspect of the product, probably for everyone else's benefit, I should just get out of

00:11:49.320 --> 00:11:53.360
the way and let them do the magic. Yeah. That sometimes is how it is, right? It's just let

00:11:53.360 --> 00:12:00.000
let the people do the work, even though it would be very fun. Now I want to get into some of the

00:12:00.000 --> 00:12:04.960
origins and whatnot, but I also just want to set the stage as people are listening, because this was

00:12:04.960 --> 00:12:11.200
something I was not entirely clear about as well. Yeah. So you spoke about Streamlit, the tool for

00:12:11.200 --> 00:12:16.680
building interactive UIs around data science, and you spoke about Streamlit for teams, talked about hiring

00:12:16.680 --> 00:12:22.920
people. So obviously this is a business venture. Yeah. The status, which is great. I'm super supportive

00:12:22.920 --> 00:12:28.620
of you guys. That's awesome. But I just want people to realize that Streamlit, the tooling in the library

00:12:28.620 --> 00:12:35.080
is an open source thing that you can use. And the teams thing is like a cloud computing service that is

00:12:35.080 --> 00:12:39.980
part of the business. Is that, am I understanding that right? Yeah, that's exactly right. And speaking of

00:12:39.980 --> 00:12:46.020
the origin story, it wasn't actually meant to be a business. It was really a side project and it was

00:12:46.020 --> 00:12:54.380
going to just be an open source project. But what happened was a bunch of people at really big companies

00:12:54.380 --> 00:13:00.840
like Stitch Fix started using it. And then we realized, hey, there is actually a business model

00:13:00.840 --> 00:13:05.920
here. And so the picture started, in a sense, it all kind of snowballed from what was really first,

00:13:05.920 --> 00:13:12.140
just a personal project, me at home, coding all day long. And my mom saying, hey, you need to figure out a way

00:13:12.140 --> 00:13:17.620
to make money off this thing. You're going to work on it so much. And then it sort of has evolved into a business.

00:13:17.620 --> 00:13:24.900
And so, yeah, there's actually a very simple breakdown in terms of the open source and the business part,

00:13:25.260 --> 00:13:33.300
which is open source is lets you build data apps super quickly and easily. It's free, always will be free.

00:13:33.300 --> 00:13:38.660
Apache 2 license. It's a real open source project. Everything's up on GitHub. The community contributes a lot.

00:13:38.660 --> 00:13:42.920
We build it a lot and maintain it. So that's the open source part of the project.

00:13:42.920 --> 00:13:50.260
The closed source part of the project lets you take your streamlit apps and deploy them really easily on our cloud.

00:13:50.480 --> 00:13:56.960
You're certainly welcome to just deploy it for free, however you'd want. And there's tons of guides online about how to do that.

00:13:56.960 --> 00:14:02.720
And we totally support that aspect of the community. So there will always be a way to create and deploy streamlit apps

00:14:02.720 --> 00:14:09.580
for free using only open source tools. But we also recognize that a lot of our users and especially corporate users

00:14:09.580 --> 00:14:14.860
are asking for a simpler solution to that side of things, the deployment, not the app building.

00:14:14.860 --> 00:14:23.520
Well, I think it makes a lot of sense because the goal of the tool is to make converting like data science ideas and libraries

00:14:23.520 --> 00:14:30.440
and problem solving into an interactive web app really easy. And so the last thing you probably want to do is like,

00:14:30.440 --> 00:14:35.120
well, that was cool. Now you need to figure out Nginx. You need to figure out SSL. You need to figure out cache.

00:14:35.120 --> 00:14:37.660
You need to figure out Linux maintenance, et cetera, et cetera.

00:14:37.660 --> 00:14:38.160
Exactly.

00:14:38.160 --> 00:14:40.480
I think it's a reasonable thing to do for sure.

00:14:40.480 --> 00:14:48.100
Yeah. I think that the experience that our users have is they download Streamlit. So pip install Streamlit,

00:14:48.100 --> 00:14:55.020
follow the tutorial, literally within 30 seconds, they have an app that they're playing around with. Within

00:14:55.020 --> 00:15:01.560
five minutes, they've created their own and there's a little button or something. And I think that what we

00:15:01.560 --> 00:15:07.300
hope for is delight. But then it comes to, I want to share this with others.

00:15:07.720 --> 00:15:12.620
And you go into the, you search around on Google and it's literally starts to become,

00:15:12.620 --> 00:15:21.440
you know, create a GCP instance, copy your SSH keys into it. I'll tell you, that's a nerve wracking

00:15:21.440 --> 00:15:27.240
experience to actually try to put something on the web and have it secure and everything. So we want

00:15:27.240 --> 00:15:31.180
to bring that delight to the deploy as well. And that's kind of the picture.

00:15:33.120 --> 00:15:37.420
This portion of Talk Python To Me is brought to you by Linode. Whether you're working on a personal

00:15:37.420 --> 00:15:42.920
project or managing your enterprise's infrastructure, Linode has the pricing, support, and scale that you

00:15:42.920 --> 00:15:47.960
need to take your project to the next level. With 11 data centers worldwide, including their newest

00:15:47.960 --> 00:15:54.260
data center in Sydney, Australia, enterprise grade hardware, S3 compatible storage, and the next

00:15:54.260 --> 00:15:59.460
generation network, Linode delivers the performance that you expect at a price that you don't.

00:15:59.600 --> 00:16:05.800
Get started on Linode today with a $20 credit and you get access to native SSD storage, a 40 gigabit

00:16:05.800 --> 00:16:11.020
network, industry leading processors, their revamped cloud manager at cloud.linode.com,

00:16:11.020 --> 00:16:17.820
root access to your server, along with their newest API and a Python CLI. Just visit talkpython.fm

00:16:17.820 --> 00:16:23.200
slash Linode when creating a new Linode account, and you'll automatically get $20 credit for your next

00:16:23.200 --> 00:16:28.700
project. Oh, and one last thing, they're hiring. Go to linode.com slash careers to find out more.

00:16:28.760 --> 00:16:30.020
Let them know that we sent you.

00:16:30.020 --> 00:16:36.920
I haven't interacted with the deployment side of things, but I can tell you that the web app side,

00:16:36.920 --> 00:16:43.760
it's got a little bit of magic. So let's get into that, but let's start at maybe the predecessor,

00:16:43.760 --> 00:16:50.720
right? A lot of people are coming into Python these days. This is my assessment of looking out at the

00:16:50.720 --> 00:16:57.300
world. They're coming into Python for a little bit of computational scripting. I hate to call it

00:16:57.360 --> 00:17:00.360
scripting because when people say, Oh, Python's a scripting language. It's like,

00:17:00.360 --> 00:17:04.880
yeah, but you also, it's a programming language that supports scripting, right? Like it's,

00:17:04.880 --> 00:17:12.180
there are a lot of people who they don't care about computer science. They definitely don't think of

00:17:12.180 --> 00:17:19.960
themselves as programmers. They think of themselves as economists, biologists, whatever. But they're like,

00:17:20.020 --> 00:17:24.760
I know I got it. This data is too much for me to do on my own. I Excel or whatever. So I'm going to

00:17:24.760 --> 00:17:29.260
throw it into this. I've learned that if I use Jupyter, I type these five lines using this library,

00:17:29.260 --> 00:17:34.380
no functions in sight, you know, no unit tests, none of that. Just like I do these,

00:17:34.380 --> 00:17:40.220
these five or 10 lines in order. Then I have this really cool power. And then they get sucked into

00:17:40.220 --> 00:17:44.220
Python, right? Like, yeah, they could do a little more and a little more. And like, eventually they look

00:17:44.220 --> 00:17:49.840
back and like, wait, I'm programming. How did I become a programmer? Which is great. But I think

00:17:49.840 --> 00:17:57.360
like where you guys are aiming is that audience a little bit, right? The people who are like,

00:17:57.360 --> 00:18:02.920
I can put this together in kind of a top to bottom flow of computation and generate results,

00:18:02.920 --> 00:18:06.640
but I need more than that, but I'm not a programmer. Would you say that's fair?

00:18:06.640 --> 00:18:15.680
Yeah, that's exactly right. So we really embrace Python as a scripting language. That's the core of

00:18:15.680 --> 00:18:24.600
Streamlit. And we embrace the ethos of let's write code from top to bottom that does something simple,

00:18:24.600 --> 00:18:32.500
that's easy to understand and read. And that really gives you a huge amount of power for,

00:18:32.500 --> 00:18:36.520
you know, a huge amount of bang for your buck. I mean, that's what Python is, right? You know,

00:18:36.520 --> 00:18:42.340
how do I, how do I download some information off the web requests package, boom, boom, boom,

00:18:42.340 --> 00:18:48.600
all of a sudden it's happening. And I think actually Python programmers, myself very much included,

00:18:48.600 --> 00:18:52.980
are like shocked when you go to another programming language and you're like, oh, I, yeah, totally.

00:18:52.980 --> 00:18:57.440
You know, we just, you do, you know, do all these things. And then you're like, oh my God,

00:18:57.440 --> 00:19:03.880
this is impossibly difficult. How are these people doing this? You know? So there is still,

00:19:04.040 --> 00:19:07.920
I mean, it's an old, it's getting to be an old language and yet there's this magic to it. And

00:19:07.920 --> 00:19:13.620
there's this bang for the buck that it's just unparalleled. And, and Streamlit is grounded in

00:19:13.620 --> 00:19:21.220
that observation and in that ethos, which is let's write script and let's extend Python in a new

00:19:21.220 --> 00:19:27.780
direction, which is really being able to write web apps, especially data web apps that capture something

00:19:27.780 --> 00:19:33.660
about what you've done as a data scientist or a machine learning engineer and allows lots of people to play with it

00:19:33.860 --> 00:19:37.640
use it and understand it and actually become part of business processes. And,

00:19:37.640 --> 00:19:37.740
yeah.

00:19:37.740 --> 00:19:43.080
And we've seen, you know, become part of the fabric of your company or of your group or of the world.

00:19:43.080 --> 00:19:49.860
People are creating lots of COVID apps, for example, both to teach other people about coronavirus,

00:19:49.860 --> 00:19:55.140
but also in some cases, the University of Penn hospitals released a Streamlit app to allow

00:19:55.140 --> 00:19:57.680
other hospitals to predict how many beds they need.

00:19:57.940 --> 00:20:01.780
Yeah. That's very useful, right? That's taking the models and applying them for,

00:20:01.780 --> 00:20:05.920
you're going to need to get five more or something like that. Right. Very concrete.

00:20:05.920 --> 00:20:12.440
Exactly. Exactly. Very concrete. And very much sort of the next step in data science beyond just,

00:20:12.440 --> 00:20:18.820
you know, I've created a graph once for, to paste into a, you know, spreadsheet or into a presentation.

00:20:18.820 --> 00:20:24.260
It's like, well, what happens when I need to do this repeatedly and when a lot of people need to interact with it and play with it?

00:20:24.260 --> 00:20:31.780
I use it, I should say. And then, and then how can we do that without embracing this scripting ethos?

00:20:31.780 --> 00:20:38.800
We want to make app creation as easy as writing scripts in Python. And that's really the core sort of philosophy that motivates Streamlit.

00:20:38.800 --> 00:20:45.820
And I think the capturing that magic is what has caused so many people to get excited by it.

00:20:45.820 --> 00:20:54.460
Yeah, I think you're right. And I think it's an interesting blend between notebooks and more proper programming, but just a little bit.

00:20:54.460 --> 00:21:03.320
So we'll talk about some of the examples and whatnot you have that are really cool, but they are Python files and they do have functions in them,

00:21:03.320 --> 00:21:08.700
but they're not, not like super advanced. Right. So it feels like they're almost kind of organized,

00:21:08.700 --> 00:21:15.720
like someone might organize a notebook for scripting, but it's a little bit more formal than a tiny bit more formal than that.

00:21:15.720 --> 00:21:19.940
But what you gain on the other side is like tons of interactivity, which is pretty cool.

00:21:19.940 --> 00:21:26.320
So when you look at the Streamlit, you guys talk about it, you say, basically the goal is to bring three things together.

00:21:26.440 --> 00:21:34.440
The Python scripting, which we talked about. The next one is interaction to basically make this an interactive thing for users,

00:21:34.440 --> 00:21:40.460
more or less the productization of that stuff. Right. So users can play with it, not just developers.

00:21:40.460 --> 00:21:46.760
And the final bit is deployment that we've kind of touched on, but we haven't talked very much about the interactive bit,

00:21:46.760 --> 00:21:52.860
which I think is also some of the magic because honestly, I look at this and I don't necessarily fully understand it

00:21:52.860 --> 00:21:58.960
because I've written a lot of GUI applications. I've written 3D simulators and whatnot.

00:21:58.960 --> 00:22:03.520
And I, you know, I wasn't super great at it, but I know what the code looks like.

00:22:03.520 --> 00:22:07.900
I've done tons of GUI apps with, with callbacks and whatnot.

00:22:07.900 --> 00:22:08.380
Yeah.

00:22:08.380 --> 00:22:16.700
You seem to have been able to achieve those types of things without loops and without explicit,

00:22:17.140 --> 00:22:24.000
how this button event wires up to this callback and all that async kind of stuff that's so common around UI.

00:22:24.000 --> 00:22:26.080
So maybe we should talk about the interaction bit.

00:22:26.080 --> 00:22:32.920
That's exactly right. The ethos of scripting is basically, I'm going to write a script that,

00:22:32.920 --> 00:22:36.800
you know, loads some data, transforms it, does some other stuff, and then it's done.

00:22:37.480 --> 00:22:45.280
The ethos of app development is totally different. It's, I'm going to declare a bunch of widgets on the screen.

00:22:45.280 --> 00:22:49.720
I'm going to wire them up with callbacks. I'm going to have state that changes over time.

00:22:49.720 --> 00:22:54.280
I'm going to be interacting with the web and have premises and stuff.

00:22:54.380 --> 00:23:06.060
It is a truly different form of programming fundamentally and typically requires a lot of time to do even fairly small things.

00:23:06.060 --> 00:23:09.540
I mean, that's, you know, it's not easy to build an app actually.

00:23:09.540 --> 00:23:14.700
At a minimum, it takes a different way of thinking about programming that is not just like these 10 lines, right?

00:23:14.700 --> 00:23:17.140
That's exactly right. It's a different way of thinking about programming.

00:23:17.140 --> 00:23:28.840
And we really tried to ask ourselves, how could we make writing an app as simple as writing a script?

00:23:28.840 --> 00:23:37.500
And so we give the Streamlit programmer a very, very simple to understand paradigm,

00:23:37.500 --> 00:23:43.540
which is basically like sort of a cross between just a fancy print statement.

00:23:44.340 --> 00:23:47.800
So, you know, in Python, you can always just say print, blah, blah, blah.

00:23:47.800 --> 00:23:51.920
And then that gives you an ability to see what's going on and understand.

00:23:51.920 --> 00:23:55.860
Right. If you want to level it up, you put some colorama in there and like make it.

00:23:55.860 --> 00:24:02.720
Yeah, exactly. Yeah, exactly. Or, you know, if you're in Jupyter, you can say, like, let's look at the graph or, you know,

00:24:02.720 --> 00:24:04.540
you can start doing some visual output.

00:24:04.540 --> 00:24:07.920
So we basically give you that as a basic primitive.

00:24:07.920 --> 00:24:12.000
It's called S-T Streamlit dot write, R-I-T-E.

00:24:12.000 --> 00:24:16.160
And then you can just plop anything you want in there and it pops up on your web browser in order.

00:24:16.580 --> 00:24:24.520
And then we say, hey, and if you want any interaction at any point, you can just say S-T dot and then just give it.

00:24:24.520 --> 00:24:28.900
We've got a whole bunch of widgets, you know, sliders, text boxes and whatnot.

00:24:28.900 --> 00:24:30.640
And that pops up on the screen.

00:24:30.640 --> 00:24:38.620
And then we wire it all together so that if the user types or changes anything on the web browser,

00:24:38.620 --> 00:24:42.960
that gets reflected back in your code instantly without having to do any work.

00:24:42.960 --> 00:24:49.320
And so the model is just so simple to understand and therefore so productive.

00:24:49.320 --> 00:24:56.600
And we want to bring that Python simplicity and that Python magic to the app building process

00:24:56.600 --> 00:24:59.860
and make it so that others can just build apps really easily.

00:24:59.860 --> 00:25:04.300
Probably the best way to give people a sense of this is maybe to walk through an example.

00:25:04.300 --> 00:25:08.380
You guys have a couple of example bits of code out there.

00:25:08.380 --> 00:25:13.720
And right at the beginning, you go to the Streamlit website, Streamlit dot IO.

00:25:13.720 --> 00:25:14.860
You can go down a little bit.

00:25:14.860 --> 00:25:18.900
There's like a get started, just pip install Streamlit and a few other things.

00:25:19.360 --> 00:25:24.000
And then there's an example that you can just run that comes with it.

00:25:24.000 --> 00:25:30.800
And this has to do with stealth driving cars, which you and your co-founders have a lot of background in self-driving cars.

00:25:30.800 --> 00:25:31.340
Yeah, yeah.

00:25:31.340 --> 00:25:32.080
Which is kind of cool, right?

00:25:32.080 --> 00:25:32.700
Totally.

00:25:32.700 --> 00:25:40.360
So the idea is there's a lot of image processing that goes on around identifying people, other cars, bikers,

00:25:40.360 --> 00:25:45.100
certain tolerances of whether or not that is a biker or not, and so on.

00:25:45.100 --> 00:25:50.220
And so you can basically get this demo and explore those.

00:25:50.220 --> 00:25:55.020
You say, I'd like to have up to five, but no more than six pedestrians on the screen.

00:25:55.020 --> 00:25:58.220
And then I want to test like parameters around it and stuff, right?

00:25:58.220 --> 00:25:59.960
Yeah, that's exactly right.

00:25:59.960 --> 00:26:04.320
So this is a problem that comes up in the self-driving car industry.

00:26:04.320 --> 00:26:08.820
Really, it comes up in all machine learning and all data science.

00:26:08.820 --> 00:26:13.520
In my experience, I've seen this again and again across groups at Google,

00:26:14.100 --> 00:26:20.240
self-driving cars, companies across the country, which are now using Streamlit and telling us what their challenges are.

00:26:20.240 --> 00:26:29.860
And so it's really a perfect example of a simple Streamlit app, which is I have a whole bunch of data, domain specific,

00:26:29.860 --> 00:26:33.840
and I need a way to be able to browse through it and understand what's going on.

00:26:34.040 --> 00:26:36.520
And I might need to look through it.

00:26:36.520 --> 00:26:43.080
I might need to maybe run some models on it and or blend a couple of different data sets together.

00:26:43.080 --> 00:26:53.160
And Streamlit makes those kinds of tasks really easy by just taking the basic elements of Python and adding a tiny little bit on top to make it a map.

00:26:53.560 --> 00:27:02.320
So in this case, the challenge was something that we saw when building self-driving cars is that you drive your cars all around the city and you're collecting like all this data.

00:27:03.040 --> 00:27:08.040
And at a certain point, even understanding all the data that you have becomes really complicated.

00:27:08.040 --> 00:27:15.860
And lots of people need to be able to see it, not just the engineers, but technical program managers and executives and everyone needs to be able to see what's going on.

00:27:15.940 --> 00:27:23.580
And so you eventually build an app to allow many different stakeholders to see and understand this data.

00:27:23.580 --> 00:27:27.760
And so we built this app to illustrate how that can be done in Streamlit.

00:27:27.760 --> 00:27:36.080
It uses the Udacity self-driving car data set as an underlying data set, lets you visualize where there are pedestrians and cars.

00:27:36.080 --> 00:27:38.420
It even lets you run a neural net in real time.

00:27:38.420 --> 00:27:43.100
And the entire app is built in 300 lines of Streamlit from top to bottom.

00:27:43.100 --> 00:27:45.000
There's also like 50 lines of comments.

00:27:45.140 --> 00:27:45.940
So I would say.

00:27:45.940 --> 00:27:47.000
Yeah, yeah, yeah.

00:27:47.000 --> 00:27:48.720
Yeah, it's 300 lines.

00:27:48.720 --> 00:27:53.520
And it's not even like we're not even trying to be super, you know, we're not playing like code golf or anything.

00:27:53.520 --> 00:28:00.480
Like the 300 lines includes like a huge like Apache 2 license and a lot of comments.

00:28:00.480 --> 00:28:01.540
And yeah.

00:28:01.540 --> 00:28:08.920
So in fact, I think there's only like 20 some odd function calls, Streamlit function calls in the entire program.

00:28:08.920 --> 00:28:14.780
So everything else, basically, this very, very rich app is created in.

00:28:15.060 --> 00:28:18.720
20 function calls and everything else or let's call it 25.

00:28:18.720 --> 00:28:20.640
Everything else is just pure data.

00:28:20.980 --> 00:28:32.040
So that's kind of a glimpse, hopefully for the listeners of just like this fact, which is that like you can just do a lot with a little, which is just a great thing to have.

00:28:32.040 --> 00:28:32.260
Yeah.

00:28:32.360 --> 00:28:33.740
So let me do two things.

00:28:33.740 --> 00:28:38.000
Let me describe a little bit of what this app looks like when it's running so people get a sense.

00:28:38.000 --> 00:28:44.420
So when you run the app, you get a web page that is running on its own little local Streamlit server.

00:28:44.420 --> 00:28:49.840
And on the left, you get a sidebar that lets you basically do the user interaction, right?

00:28:49.840 --> 00:28:52.860
Like I can say, what type of object am I looking for?

00:28:53.120 --> 00:28:59.440
And then how many of those objects and depending on what you get, you can have like different types of confidence and whatnot.

00:28:59.440 --> 00:29:02.800
So there's this sort of cool interactive slider thing on the left.

00:29:02.800 --> 00:29:11.500
And then on the right and the main pane, there's kind of output from that, like pictures with selected characters in the picture from the neural net or graphs or whatever.

00:29:11.500 --> 00:29:11.820
Right.

00:29:11.820 --> 00:29:13.180
That's exactly right.

00:29:13.180 --> 00:29:13.460
Yeah.

00:29:13.460 --> 00:29:17.080
And so, you know, it's all the basic elements of Streamlit are there.

00:29:17.080 --> 00:29:19.140
So you get some user input.

00:29:19.140 --> 00:29:19.400
Right.

00:29:19.400 --> 00:29:25.160
And so if I change like the dropdown or I change the slider as a user, talk about the user input, right?

00:29:25.160 --> 00:29:32.600
Then that automatically is reflected back in the changing views of the graphs or the detection of the picture.

00:29:32.600 --> 00:29:37.280
So that's a super cool type of dynamic interactive web app.

00:29:37.280 --> 00:29:39.000
It's not posting back the page.

00:29:39.280 --> 00:29:43.720
It's like a JavaScript spa type of application you would expect.

00:29:43.720 --> 00:29:44.680
That's exactly right.

00:29:44.680 --> 00:29:45.580
That's exactly right.

00:29:45.580 --> 00:29:45.840
Yeah.

00:29:45.840 --> 00:29:53.920
And, you know, it actually, this is just, this is trying to show what's possible in 300 lines of code with a 20 some odd Streamlit call.

00:29:53.920 --> 00:30:07.580
But some of our users, especially corporate users, build really intricate, not just single page applications, but, you know, multi page applications with different levels of authentication for different users.

00:30:07.580 --> 00:30:12.420
And, you know, interactions with databases and, you know, interactions with databases and they go both ways.

00:30:12.420 --> 00:30:15.820
So it's really the sky's the sky's the limit.

00:30:15.820 --> 00:30:23.860
It is actually possible to build, you know, production quality apps used by many people fully in Streamlit.

00:30:23.860 --> 00:30:38.500
And, you know, and in fact, to do so really as a data scientist or as a machine learning engineer without having to learn and then wield a pretty complicated and, you know, quote unquote pro tech stack.

00:30:38.500 --> 00:30:43.660
Like, you know, Flask and then CSS, JavaScript, HTML, React, whatever it is.

00:30:43.740 --> 00:30:45.700
That we love those tools.

00:30:45.700 --> 00:30:48.200
For that matter, we wrote Streamlit in those tools.

00:30:48.200 --> 00:30:49.560
So we really love them.

00:30:49.560 --> 00:30:57.580
But we recognize that for a lot of people, even if they do know them, it's a big lift to start building an app in that way.

00:30:57.580 --> 00:31:00.980
And it's really fun to not have to.

00:31:00.980 --> 00:31:03.080
And you can do a lot.

00:31:03.080 --> 00:31:04.840
Yeah, that's cool.

00:31:05.260 --> 00:31:17.820
The other thing that's interesting and that's where that's notable, I guess, is a lot of these types of tooling that try to make things more accessible or more productive.

00:31:17.820 --> 00:31:23.600
They say, OK, well, what you're going to do is you're going to work with our little widgets and our little libraries.

00:31:23.600 --> 00:31:26.220
And the reason it's simple, because you don't need to learn about databases.

00:31:26.220 --> 00:31:29.820
So you use our data library and it magically does data magic.

00:31:29.820 --> 00:31:30.500
Right.

00:31:30.500 --> 00:31:31.540
Right.

00:31:31.540 --> 00:31:31.760
Yeah.

00:31:31.860 --> 00:31:39.000
But right at the top you have of this example, you have import Altair, import Pandas, import NumPy, import OpenCV.

00:31:39.000 --> 00:31:39.980
Right.

00:31:39.980 --> 00:31:40.720
That's right.

00:31:40.720 --> 00:31:45.740
I guess what I'm pointing out is like these are the tools that data scientists are already using.

00:31:45.740 --> 00:31:49.220
They already know how to use and they're already like very effective and polished.

00:31:49.220 --> 00:31:55.400
So it's not like, well, you can give up your Altair or your Bokeh and your Pandas and you could use our style.

00:31:55.400 --> 00:31:56.140
Right.

00:31:56.140 --> 00:31:58.140
That doesn't seem to be the story you're telling.

00:31:58.140 --> 00:31:59.220
Yeah, that's right.

00:31:59.300 --> 00:32:14.440
I think that there is a really interesting balance between simplicity, power and accessibility in regards to using other existing open source frameworks.

00:32:14.440 --> 00:32:21.860
And one of the sort of strategies that some people have tried is we will be the platform.

00:32:21.860 --> 00:32:25.460
We will define everything and you will live in our walled garden.

00:32:25.460 --> 00:32:27.760
And that's how we'll make things quote unquote simple.

00:32:28.120 --> 00:32:30.620
That's not really the ethos of open source.

00:32:30.620 --> 00:32:35.500
Really, the ethos of open source is more like we're going to do one thing really, really well.

00:32:35.500 --> 00:32:44.840
We're going to be modest in a sense in what we provide, but we're going to provide a great version of it that then you can mix and match with other open source tools.

00:32:44.840 --> 00:32:47.080
And that's the ethos of Streamlit.

00:32:47.080 --> 00:32:49.920
We do one thing, which is let you build apps.

00:32:50.080 --> 00:32:52.900
We try to do it the best in the world, of course.

00:32:52.900 --> 00:33:04.380
And then we get out of the way and we say, use everything that you know about existing graphing tools, just Python, all of the, you know, Snowflake, Pandas, NumPy, Scikit, Learn.

00:33:04.380 --> 00:33:08.600
The entire Python ecosystem is just directly available to you.

00:33:08.600 --> 00:33:09.500
Yeah, that's really cool.

00:33:09.540 --> 00:33:14.540
It also means you're not like super tied to Streamlit if you decide actually no or whatever, right?

00:33:14.540 --> 00:33:15.060
Totally.

00:33:15.060 --> 00:33:15.440
Exactly.

00:33:15.440 --> 00:33:20.420
You could say we could do it in Notebook or we could try it in Streamlit and or not, right?

00:33:20.420 --> 00:33:23.700
Like it's, I really appreciate about that, about what you built.

00:33:23.700 --> 00:33:33.040
This portion of Talk Python To Me is sponsored by me, Reuben Lerner, and my free video course, Ace Python Interviews.

00:33:33.040 --> 00:33:37.840
You know, one of the most stressful parts of a job interview is when they ask you to explain a concept

00:33:37.840 --> 00:33:39.900
or to solve a problem with Python.

00:33:39.900 --> 00:33:47.300
Ace Python Interviews contains six hours of screencasts solving 50 beginner, intermediate, and advanced Python problems.

00:33:47.300 --> 00:33:50.820
You can even download the Jupyter Notebooks used in the screencasts.

00:33:50.820 --> 00:33:53.300
Give yourself an edge when you next apply for a job.

00:33:53.300 --> 00:33:58.440
Check out Ace Python Interviews for free at talkpython.fm/ace.

00:33:58.440 --> 00:34:03.020
I still don't fully understand how the magic works.

00:34:03.020 --> 00:34:05.720
So I want to talk people through it.

00:34:05.960 --> 00:34:09.120
And then maybe you can tell me like, oh, here's where the magic is.

00:34:09.120 --> 00:34:10.040
Yeah, for sure.

00:34:10.040 --> 00:34:10.460
All right.

00:34:10.460 --> 00:34:12.100
So let me talk through some of the code.

00:34:12.100 --> 00:34:15.360
I just pulled out a few little examples of things that are interesting as you go through

00:34:15.360 --> 00:34:16.840
that self-driving demo.

00:34:16.840 --> 00:34:18.500
So let me run past you.

00:34:18.500 --> 00:34:19.040
Yeah.

00:34:19.040 --> 00:34:21.880
So first of all, like I already talked about this.

00:34:21.880 --> 00:34:23.540
You have functions.

00:34:23.540 --> 00:34:25.620
You've got a main function at the top.

00:34:25.900 --> 00:34:30.960
And then you've got other functions like download the files, like go and get those self-driving car model

00:34:30.960 --> 00:34:33.820
datas and the images and whatnot.

00:34:33.820 --> 00:34:42.200
And you've got other functions for like showing what are some of them or like running one to like run the app,

00:34:42.200 --> 00:34:45.780
one to select different parts of the UI, one.

00:34:45.780 --> 00:34:46.180
Yeah.

00:34:46.180 --> 00:34:47.360
And whatnot.

00:34:47.740 --> 00:34:53.140
So you have this broken down like a well-structured script, I guess you would say.

00:34:53.140 --> 00:34:54.620
Like it's all self-contained in this file.

00:34:54.620 --> 00:34:56.340
It's not like a notebook exactly.

00:34:56.340 --> 00:34:58.220
But it is broken to function.

00:34:58.220 --> 00:34:59.380
So I appreciate that.

00:34:59.380 --> 00:35:04.060
I also like the fact that you put the main method at the top and then it functions below.

00:35:04.180 --> 00:35:07.120
I always see that in mind because here's the summary of what's happening.

00:35:07.120 --> 00:35:08.080
Here's the details, right?

00:35:08.080 --> 00:35:09.940
It always seems to be reversed a lot of times.

00:35:09.940 --> 00:35:10.720
That drives me crazy.

00:35:10.720 --> 00:35:11.120
Yeah.

00:35:11.120 --> 00:35:17.760
But so first thing is like you want to have some message on the screen that is the UI of the web app.

00:35:17.760 --> 00:35:23.580
And the way you do that is load a markdown file and parse it and render it using like one line,

00:35:23.580 --> 00:35:26.020
like st.markdown.

00:35:26.020 --> 00:35:26.440
Boom.

00:35:26.440 --> 00:35:27.220
Give it a file name.

00:35:27.220 --> 00:35:30.480
And then that's part like a portion of the UI is that, right?

00:35:30.480 --> 00:35:31.380
Yeah, that's right.

00:35:31.380 --> 00:35:33.660
There's a couple of cool things to note about that.

00:35:33.740 --> 00:35:39.900
First of all, we do let you write well-structured code, quote unquote, well-structured code if you want.

00:35:39.900 --> 00:35:42.940
Using names, functions and stuff is great.

00:35:42.940 --> 00:35:44.120
You also don't have to.

00:35:44.120 --> 00:35:46.100
It literally is just a Python script.

00:35:46.100 --> 00:35:50.100
So you could get rid of all these function calls and just write it as a script from top to bottom.

00:35:50.100 --> 00:35:50.840
And that works too.

00:35:50.840 --> 00:35:53.040
And you get all the interaction and everything.

00:35:53.040 --> 00:35:57.800
But we think it's cool that you get to write some function calls and structure your code that way.

00:35:57.800 --> 00:36:03.520
And if nothing else, it actually mostly just helps describe what's going on to the user.

00:36:03.520 --> 00:36:06.280
Which is one of the great properties of functions.

00:36:06.280 --> 00:36:11.180
Then the other thing that you pointed out, which is true too, is that we've did in one line of code,

00:36:11.180 --> 00:36:14.440
we've put a giant markdown file right on your browser.

00:36:14.440 --> 00:36:16.820
And that's the instructions for how to use the app.

00:36:16.820 --> 00:36:18.340
And that's pretty cool.

00:36:18.340 --> 00:36:18.620
Yeah.

00:36:18.620 --> 00:36:19.440
It's pretty simple.

00:36:19.660 --> 00:36:21.560
And it does exactly what you expect.

00:36:21.560 --> 00:36:29.440
And then later on, we say, hey, if you, a couple lines down, we say, once they select which mode they want, we just get rid of that, those instructions.

00:36:29.440 --> 00:36:30.760
And that's pretty simple also.

00:36:31.000 --> 00:36:35.760
So it's a pretty cool little, yeah, it's a pretty simple little way to do things.

00:36:35.760 --> 00:36:36.100
Yeah.

00:36:36.420 --> 00:36:38.320
So that doesn't take over the whole screen.

00:36:38.320 --> 00:36:40.540
That kind of just goes up there as like part of the UI.

00:36:40.540 --> 00:36:43.760
And then you say, probably when you run it first, you don't have these files.

00:36:43.760 --> 00:36:46.940
And they're like 400 megs, which is not a ton to download.

00:36:46.940 --> 00:36:49.140
But they're not on a super fast server.

00:36:49.140 --> 00:36:51.420
So they do take a little while to get down, actually.

00:36:51.680 --> 00:36:52.260
Yeah, yeah.

00:36:52.260 --> 00:36:58.400
And so what's really cool is you, you're just using requests and standard file IO to read and write them.

00:36:58.400 --> 00:37:04.200
But as you're looping through that, reading off the stream, you have two simple lines.

00:37:04.200 --> 00:37:05.840
You have a progress bar.

00:37:05.840 --> 00:37:06.520
Yeah.

00:37:06.520 --> 00:37:09.820
And you have like a text box area.

00:37:09.820 --> 00:37:12.100
And you say progress bar dot progress.

00:37:12.100 --> 00:37:14.180
And you give it like how far it is in the download.

00:37:14.180 --> 00:37:16.500
And then you say the weights area.

00:37:16.500 --> 00:37:21.580
You can say we're downloading this amount, you know, like five of 10, five of 400 megs.

00:37:21.640 --> 00:37:21.920
Or whatever.

00:37:21.920 --> 00:37:22.600
Yeah, yeah, yeah.

00:37:22.600 --> 00:37:23.360
5.1, 5.2.

00:37:23.360 --> 00:37:27.260
And as you're looping, you're changing those values.

00:37:27.260 --> 00:37:29.800
And that is just dynamically changing the web app.

00:37:29.800 --> 00:37:31.400
Yeah, yeah, yeah.

00:37:31.400 --> 00:37:33.420
That's part of the magic right there for me, I think.

00:37:33.420 --> 00:37:34.140
Oh, my God.

00:37:34.140 --> 00:37:38.380
I'm so excited that you've been reading the code at this level.

00:37:38.380 --> 00:37:40.560
I mean, what delight to talk about this.

00:37:40.560 --> 00:37:41.080
Yeah.

00:37:41.080 --> 00:37:47.200
So that's the next bit of magic, which is you can think of it as like a sort of, you know, magical print statement.

00:37:47.200 --> 00:37:47.700
Yeah.

00:37:47.700 --> 00:37:51.020
Instead of saying print blah, you say st dot write blah.

00:37:51.600 --> 00:37:54.700
And then you can just pop things on the web browser screen from top to bottom.

00:37:54.700 --> 00:37:57.700
Markdown, data frames, graphs, anything you want.

00:37:57.700 --> 00:38:03.940
But the next bit of magic is that those things that you put on the screen are not just stuck there.

00:38:03.940 --> 00:38:07.800
You can reach out to any one of them and say, hey, I want to change you.

00:38:07.800 --> 00:38:12.480
And for example, I want to take this progress bar and move it from 51% to 52%.

00:38:12.480 --> 00:38:16.160
Or I want to take this text and I want to change it from foo to bar.

00:38:16.160 --> 00:38:23.480
That ability to reach into the web page that you just created in pure Python and just update things is animation.

00:38:23.480 --> 00:38:31.180
And then you throw that into a loop and all of a sudden you have progress bars going from left to right and download information.

00:38:31.180 --> 00:38:37.280
And it's really no more complicated than just writing a script.

00:38:37.280 --> 00:38:37.560
Yeah.

00:38:37.560 --> 00:38:46.520
And it looks to me like the visual layout story here is like kind of a column layout on the main screen.

00:38:46.520 --> 00:38:48.720
So I just throw stuff into the UI.

00:38:48.720 --> 00:38:52.100
Like I say, I want to dial, I want a text area.

00:38:52.100 --> 00:38:54.880
So I just create a like a warning text area or whatever.

00:38:54.880 --> 00:38:56.320
And I create a progress bar.

00:38:56.320 --> 00:39:02.080
I just say I'm creating one and it just, it piles, it sort of visually piles up like one after another vertically.

00:39:02.080 --> 00:39:02.480
Right.

00:39:02.480 --> 00:39:09.080
So you don't, there's not a lot of position this at X, Y here, or like set this to like dock this style.

00:39:09.080 --> 00:39:12.620
It's kind of, you put them, there doesn't feel like I'm doing UI.

00:39:12.620 --> 00:39:14.560
It kind of just figures it out.

00:39:14.560 --> 00:39:15.600
I guess what I'm talking about.

00:39:15.600 --> 00:39:16.680
Yeah, exactly.

00:39:16.680 --> 00:39:18.860
The paradigm is just like a print statement.

00:39:18.860 --> 00:39:20.200
It's just from top to bottom.

00:39:20.200 --> 00:39:24.200
And this is a, you know, I think that's the right default behavior.

00:39:24.520 --> 00:39:32.540
It's worth pointing out that the community has been saying for months, we want horizontal layout.

00:39:32.540 --> 00:39:33.660
We want more control.

00:39:33.660 --> 00:39:34.360
Yeah, yeah, no.

00:39:34.360 --> 00:39:37.780
I just want to put something to the right or something else, not just below it.

00:39:37.780 --> 00:39:44.320
And I want to say to all you programmers out there, we totally hear you.

00:39:44.320 --> 00:39:47.540
We are super excited about horizontal layout.

00:39:47.540 --> 00:39:48.520
It's coming.

00:39:48.520 --> 00:39:49.740
It's in the lab.

00:39:49.740 --> 00:39:54.160
We're working on some other really cool stuff like custom components

00:39:54.160 --> 00:39:58.600
that lets you insert your own custom widgets into the, into the streamlet page.

00:39:58.600 --> 00:39:59.920
Those are coming first.

00:39:59.920 --> 00:40:01.240
We're still a small team.

00:40:01.240 --> 00:40:07.040
We're also really trying to hire as fast as possible, but, but, you know, great programmers.

00:40:07.040 --> 00:40:13.180
So all of these, we feel a lot of pressure to get things out and we really hear you and we're getting it out.

00:40:13.180 --> 00:40:14.500
Please give us some time.

00:40:14.500 --> 00:40:19.860
And if you're, if you feel like you're the right person for the job, come join us and we'll work with you too that way.

00:40:20.060 --> 00:40:20.100
Yeah.

00:40:20.100 --> 00:40:20.460
Very cool.

00:40:20.460 --> 00:40:21.720
It's awesome that you're hiring.

00:40:21.720 --> 00:40:23.080
One other thing.

00:40:23.080 --> 00:40:24.780
So I guess that I can see how that works.

00:40:24.780 --> 00:40:25.820
So I have a progress bar.

00:40:25.820 --> 00:40:26.860
I call progress.

00:40:26.860 --> 00:40:31.000
It kicks off some asynchronous JavaScript event.

00:40:31.000 --> 00:40:33.940
That's going to go over and tell that progress bar to update.

00:40:34.080 --> 00:40:49.200
But the other part that this is where I was thinking more of the magic is like, if I want, say a slider that people can interact with, I can go over there and I can say, go and put a slider on the sidebar and then just ask some questions about it.

00:40:49.360 --> 00:40:54.380
And I don't see anywhere, some kind of callback for when the slider changes.

00:40:54.380 --> 00:40:55.880
I'm just getting that information.

00:40:55.880 --> 00:40:56.620
Yeah.

00:40:56.620 --> 00:41:02.360
And yeah, it's really interesting how the user interaction kind of comes back into the script.

00:41:02.360 --> 00:41:03.120
Yeah.

00:41:03.120 --> 00:41:12.440
Maybe tell me how that kind of works because I don't totally see like where the user interaction response starts versus like setting up things and so on.

00:41:12.440 --> 00:41:12.820
Yeah.

00:41:12.820 --> 00:41:15.960
First of all, I'll point out that this was just a suggestion by a user.

00:41:15.960 --> 00:41:22.540
And so this is an example of our user community really just having being the source of the best ideas in Streamlit.

00:41:22.540 --> 00:41:31.020
And he said, hey, you just you should have a checkbox that should just be like, you know, the answer equals checkbox.

00:41:31.020 --> 00:41:32.780
And that's how it should work.

00:41:32.780 --> 00:41:35.180
That's blocking.

00:41:35.180 --> 00:41:36.040
What am I going to do?

00:41:36.040 --> 00:41:37.140
Like, that's impossible.

00:41:37.140 --> 00:41:38.460
There's no way to do that.

00:41:38.460 --> 00:41:44.600
But we then went back to the, you know, the whiteboard, basically, and we asked ourselves, how can we do just that?

00:41:44.600 --> 00:41:57.180
And so the way it works is that if you ever want to have an interactive element in your app, you basically just say the answer equals and then the widget type.

00:41:57.180 --> 00:42:00.380
So the widget type could be a checkbox and then the answer will be true or false.

00:42:00.380 --> 00:42:03.380
It could be a text input and then the answer will be a string.

00:42:03.680 --> 00:42:07.820
It could be a number input or a slider and you'll get numbers and so on and so forth.

00:42:07.820 --> 00:42:09.100
You can even have file inputs.

00:42:09.100 --> 00:42:11.120
You can get, we're working on a color clicker.

00:42:11.120 --> 00:42:12.740
So there's a lot of cool stuff you can do.

00:42:12.740 --> 00:42:13.180
Okay.

00:42:13.180 --> 00:42:22.580
But this really simple model, no callbacks, just it's like at this moment, I want to materialize this variable and I want to let the user select it.

00:42:22.740 --> 00:42:27.020
It's similar to like, if you had done like print, which of these three options do you want?

00:42:27.020 --> 00:42:29.420
Input, parse it as an integer, right?

00:42:29.420 --> 00:42:31.540
Like it's the blocking, it looks like blocking calls.

00:42:31.540 --> 00:42:32.500
It looks like a blocking call.

00:42:32.500 --> 00:42:32.700
Yeah.

00:42:32.700 --> 00:42:42.040
And in fact, the goal is that you could just, is that you can just say, you know, this is a very typical thing when you're scripting is you say like, you know, number of iterations equals 50.

00:42:42.340 --> 00:42:44.540
And then you just keep coding, coding, coding, coding, coding.

00:42:44.540 --> 00:42:48.300
And then you say to yourself, you know, hey, it would be really nice if someone could select the number of iterations.

00:42:48.300 --> 00:42:50.120
I don't have to keep editing this text file.

00:42:50.120 --> 00:42:55.760
So then you just go to that one line of code and you say number of iterations equals st.number input.

00:42:55.760 --> 00:42:57.940
Default equals 50.

00:42:57.940 --> 00:43:02.380
And then boom, in your app, suddenly there's a place where the user can select that.

00:43:02.380 --> 00:43:07.360
And if they do change it, what happens is the app runs from top to bottom.

00:43:07.700 --> 00:43:14.520
And at that exact moment when that call happens, we substitute 50 for whatever number the user typed in.

00:43:14.520 --> 00:43:14.920
I see.

00:43:14.920 --> 00:43:17.000
So the function is basically rerun.

00:43:17.000 --> 00:43:17.500
That's right.

00:43:17.500 --> 00:43:21.820
It's sort of been seeded to say, if they ask, tell them it was this.

00:43:21.820 --> 00:43:22.720
Okay.

00:43:22.720 --> 00:43:23.620
That's exactly right.

00:43:23.620 --> 00:43:25.840
So the script is rerun.

00:43:25.840 --> 00:43:31.700
And so as a result of that, it is helpful if your scripts run quickly.

00:43:31.700 --> 00:43:33.840
And so we...

00:43:33.840 --> 00:43:37.020
It's a true statement, but if you're going to rerun it a lot, it's really helpful.

00:43:37.340 --> 00:43:37.780
Exactly.

00:43:37.780 --> 00:43:38.380
Exactly.

00:43:38.380 --> 00:43:44.920
And so we provide a bunch of primitives that help you sort of reuse bits of your script

00:43:44.920 --> 00:43:47.820
so that from the previous run, so that it does run quickly.

00:43:47.820 --> 00:43:48.400
Yeah.

00:43:48.400 --> 00:43:55.280
I did notice that from the code there, that there's a lot of caching type of things, but I didn't

00:43:55.280 --> 00:43:59.960
realize that it was to facilitate what you're talking about here.

00:43:59.960 --> 00:44:00.440
Yeah.

00:44:00.440 --> 00:44:04.240
So you can go to a lot of these functions and you can put a decorator, a cache decorator,

00:44:04.720 --> 00:44:07.500
and you can even say show spinner true, show spinner false.

00:44:07.500 --> 00:44:12.020
Here's the hashing function to determine if the input is the same or not the same.

00:44:12.020 --> 00:44:17.480
It feels a little bit like the functools LRU cache last recent, yeah, the LRU cache.

00:44:17.480 --> 00:44:18.200
Yeah.

00:44:18.200 --> 00:44:20.240
To basically just say, look at the arguments.

00:44:20.240 --> 00:44:23.140
If the input's the same, then when you already have the output just here.

00:44:23.400 --> 00:44:24.020
Yeah, that's right.

00:44:24.020 --> 00:44:24.840
That's exactly right.

00:44:24.840 --> 00:44:32.340
So it is very, it is exactly that idea, which for CS nerds out there is also called memoization.

00:44:32.340 --> 00:44:38.460
And it really, it comes down to a super simple idea, which is you write a little function

00:44:38.460 --> 00:44:42.780
and it takes some arc inputs and it gives you back some outputs.

00:44:42.940 --> 00:44:46.220
And then you decorate it with this little Python decorator.

00:44:46.220 --> 00:44:52.060
And then lo and behold, if you run it again on the same inputs, it just returns the same

00:44:52.060 --> 00:44:53.720
output without actually doing the computation.

00:44:53.720 --> 00:44:56.280
And that's a very useful thing in general.

00:44:56.280 --> 00:45:00.660
And it's a very useful thing in particular in Streamlit because it lets you write these

00:45:00.660 --> 00:45:02.140
much more performant apps.

00:45:02.540 --> 00:45:09.460
It's also, I would say, one of the greatest sources of confusion about how Streamlit works.

00:45:09.460 --> 00:45:15.200
You know, as people who are really trying to create easy and simple to understand tools,

00:45:15.200 --> 00:45:22.340
it is a source of some degree of chagrin and embarrassment for us that this part of Streamlit

00:45:22.340 --> 00:45:23.600
is a little bit complicated.

00:45:23.600 --> 00:45:32.060
And so we have been working on a bunch of other simpler abstractions that we're going to release

00:45:32.060 --> 00:45:34.520
that will hopefully make this easier to understand.

00:45:34.520 --> 00:45:34.780
Cool.

00:45:34.780 --> 00:45:34.960
Yeah.

00:45:34.960 --> 00:45:37.360
So maybe that's a good place to talk about the future.

00:45:37.360 --> 00:45:39.480
You wrote, you published a roadmap for 2020.

00:45:39.480 --> 00:45:39.900
Yeah.

00:45:39.900 --> 00:45:40.940
Yeah, yeah, yeah, yeah.

00:45:40.940 --> 00:45:44.300
There's two basic things that we're working on.

00:45:44.300 --> 00:45:47.480
So one of them is Streamlit for Teams.

00:45:47.480 --> 00:45:51.480
And so that is the sort of auto deploy version of Streamlit.

00:45:51.480 --> 00:45:56.480
And that lets you basically just check, you know, your apps into GitHub and then deploy

00:45:56.480 --> 00:45:57.240
them instantly.

00:45:57.680 --> 00:46:04.680
And in fact, we are planning to release a version such that if your app is open source on GitHub,

00:46:04.680 --> 00:46:09.560
you get some amount of free hosting, which we're just super, super excited about.

00:46:09.560 --> 00:46:09.800
Yeah.

00:46:09.800 --> 00:46:15.360
So you're basically trying to leverage GitHub's actions and notifications to just do continuous

00:46:15.360 --> 00:46:15.820
deployment.

00:46:16.140 --> 00:46:18.020
All they're going to do is just commit it, right?

00:46:18.020 --> 00:46:18.540
That's right.

00:46:18.540 --> 00:46:18.920
That's right.

00:46:18.920 --> 00:46:19.280
That's right.

00:46:19.280 --> 00:46:19.540
Yeah.

00:46:19.540 --> 00:46:19.760
Yeah.

00:46:19.760 --> 00:46:21.320
We're really excited about that.

00:46:21.320 --> 00:46:26.500
It's, there's a lot of sort of community apps that people put out there for the benefit

00:46:26.500 --> 00:46:26.980
of others.

00:46:26.980 --> 00:46:31.280
And we just feel like this is going to just totally unblock that workflow and make it really

00:46:31.280 --> 00:46:31.680
simple.

00:46:31.680 --> 00:46:31.960
Yeah.

00:46:31.960 --> 00:46:37.120
You're really trying to sneak in some of these like proper CS ideas for non-TSP.

00:46:37.120 --> 00:46:37.400
Yeah.

00:46:37.400 --> 00:46:37.980
Yeah.

00:46:37.980 --> 00:46:38.320
Yeah.

00:46:38.320 --> 00:46:38.540
Yeah.

00:46:38.540 --> 00:46:42.040
You could just do simple scripts, but you're going to have to set up a GitHub repo and you

00:46:42.040 --> 00:46:42.900
have to use service control.

00:46:42.900 --> 00:46:46.600
Oh, you can just like put whatever, but you probably should have a few functions, right?

00:46:46.600 --> 00:46:47.060
Yeah.

00:46:47.060 --> 00:46:47.840
Nudge, nudge.

00:46:47.840 --> 00:46:48.320
It's cool.

00:46:48.320 --> 00:46:50.560
Hey, I love, I love that you say that.

00:46:50.560 --> 00:46:53.920
I think that's, I think that there's a very much element of truth to that.

00:46:53.920 --> 00:46:55.620
But, you know, it goes both ways too.

00:46:56.120 --> 00:47:01.400
We talk to, so, so, so Streamlitz really caught on in the, in like the enterprise, basically

00:47:01.400 --> 00:47:04.480
much, you know, in some ways to our surprise how fast.

00:47:04.480 --> 00:47:09.180
And so we've, we've talked to the data science teams from like 7-Eleven, Caterpillar and all

00:47:09.180 --> 00:47:09.640
these companies.

00:47:09.640 --> 00:47:13.560
And one of the things that we asked them is like, do you guys use source control?

00:47:13.560 --> 00:47:19.380
And often basically the answer is yes, or it's no, but we want to.

00:47:19.380 --> 00:47:25.820
So in a sense, I don't think we view this prescriptively so much as we think this is really where

00:47:25.820 --> 00:47:26.940
things are going anyway.

00:47:26.940 --> 00:47:33.260
And also we want to use the best tools out there and we want to weave them together.

00:47:33.260 --> 00:47:37.560
That's, I think all the, you know, basically if you look through the GitHub, I mean, if

00:47:37.560 --> 00:47:41.080
you look through the Streamlitz source code, it's almost like a roadmap of the coolest tools

00:47:41.080 --> 00:47:43.660
in Python and then out there in the world.

00:47:43.660 --> 00:47:45.780
And so React and all this stuff.

00:47:45.780 --> 00:47:50.960
So we want to weave those together, you know, using the best possible tools in 2020.

00:47:50.960 --> 00:47:54.920
And from our perspective, Git, which is not just GitHub, it's also GitLab.

00:47:55.100 --> 00:48:02.540
And, you know, there's many incarnations is these are amazing, amazing tools that hugely

00:48:02.540 --> 00:48:05.940
make people more productive, actually, once you understand them.

00:48:05.940 --> 00:48:12.780
So being able to embrace them and not reinvent the wheel, but rather be sort of get out of

00:48:12.780 --> 00:48:15.840
the way and let them do their magic is totally part of the Streamlitz.

00:48:15.840 --> 00:48:16.960
Yeah, that's cool.

00:48:16.960 --> 00:48:21.620
Other stuff you got on the roadmap, improved caching, which you just spoke a little bit

00:48:21.620 --> 00:48:23.640
about some plugins, layout.

00:48:23.640 --> 00:48:25.860
You've talked a little bit about that as well.

00:48:25.860 --> 00:48:26.300
Yeah, yeah.

00:48:26.300 --> 00:48:29.760
And then user programmable state is in for multi-page apps.

00:48:29.760 --> 00:48:31.520
All those things sound very useful.

00:48:31.780 --> 00:48:38.600
So I think right now, the experience that people have of Streamlit is this thing is awesome.

00:48:39.220 --> 00:48:45.480
If I have this specific use case, which is an app with sliders, and you know, I don't care too much about the layout.

00:48:45.480 --> 00:48:49.980
And if that's what you want to do, then Streamlit is just super cool.

00:48:50.600 --> 00:48:55.100
But there are limits to that framework.

00:48:55.100 --> 00:48:57.420
There are in terms of what's possible.

00:48:57.420 --> 00:49:09.740
And we believe that we can sort of relax those limits to the point that Streamlit is really the best general purpose app framework for machine learning and data science.

00:49:09.860 --> 00:49:24.140
But in order to do that, we need to think really carefully about how to introduce new sort of app abstractions like state into Streamlit really carefully so that it maintains that simplicity that people like, but gives you a little bit more power.

00:49:24.140 --> 00:49:37.020
So the goal for 2020 is to roll out sort of the zeros of each one of these pieces of the puzzle so that by the end of the year, people can say with some degree of confidence, hey, you know, I can build this app.

00:49:37.020 --> 00:49:38.040
It's going to go all the way.

00:49:38.040 --> 00:49:38.340
Sure.

00:49:38.340 --> 00:49:39.660
That's a great mission.

00:49:40.340 --> 00:49:44.040
What's the story on authorization, authentication?

00:49:44.040 --> 00:49:44.900
Oh, yeah.

00:49:44.900 --> 00:49:50.780
I would like somebody to interact with this app, but I wanted to remember for them what they did or something like that.

00:49:50.780 --> 00:49:52.880
That is part of the paid product.

00:49:52.880 --> 00:49:58.720
People who want to create it themselves in an open source, purely open source way are welcome to do that.

00:49:58.720 --> 00:50:06.220
But we're going to basically create really simple deployment that gives you that functionality sort of with a couple of clicks.

00:50:06.640 --> 00:50:14.060
So you can say scope it to these people or scope it to my company or use this existing identity provider, SAML or whatnot.

00:50:14.420 --> 00:50:22.880
And then basically create an app that is scoped to a certain number of users, both in terms of accessing the source code and also in terms of who can use the app.

00:50:22.880 --> 00:50:23.100
Sure.

00:50:23.100 --> 00:50:23.700
Okay, cool.

00:50:23.700 --> 00:50:27.240
Well, Adrian, we're getting long on time here, but this has been really fun to talk about.

00:50:27.240 --> 00:50:30.900
There's two quick things I just want to touch on before we move on.

00:50:31.020 --> 00:50:41.240
One is we were talking a little bit before we hit record and how, like many companies, you guys are finding yourself reinventing yourself as a remote company.

00:50:41.240 --> 00:50:42.000
Yeah.

00:50:42.000 --> 00:50:42.640
How's that going?

00:50:42.640 --> 00:50:48.860
I have to say that it has been a really interesting and instructive experience.

00:50:48.860 --> 00:51:00.860
And as much as I find the whole COVID-19 very scary and I worry about my parents and my fiance's parents and all of our...

00:51:00.860 --> 00:51:05.320
And we're getting a little stir crazy being at home all day long.

00:51:05.320 --> 00:51:12.660
It's also a silver lining is that we've had to really think about how to build a company that works asynchronously.

00:51:13.000 --> 00:51:17.040
We use Notion all the time, which is like the coolest app of all time.

00:51:17.040 --> 00:51:19.640
We use Streamlitz to coordinate things.

00:51:19.640 --> 00:51:22.860
And it's been an amazing experience.

00:51:22.860 --> 00:51:24.700
And I think we're going to...

00:51:24.700 --> 00:51:29.520
We've actually made a decision to start hiring anywhere in the US now instead of just in San Francisco.

00:51:29.520 --> 00:51:32.320
I'm just so excited about that.

00:51:32.320 --> 00:51:36.460
I mean, we recognize that there's so much talent everywhere.

00:51:36.460 --> 00:51:42.180
And we really just assumed that we all had to be in the same room.

00:51:42.260 --> 00:51:47.380
And I think that these past couple of weeks have kind of shattered that assumption, which is kind of mind-blowing.

00:51:47.380 --> 00:51:47.740
Yeah.

00:51:47.740 --> 00:51:50.140
Boy, it's a tough time in a lot of ways.

00:51:50.140 --> 00:52:02.100
But it's also, I think, shaken up everybody's assumptions about reality for work, for family, for even simple stuff like food.

00:52:02.100 --> 00:52:02.680
Right?

00:52:02.680 --> 00:52:04.600
We used to get takeout a lot and whatnot.

00:52:04.600 --> 00:52:07.480
And we're like, all right, well, we're just going to have to start making more interesting food.

00:52:07.480 --> 00:52:10.180
So I cooked a really good dinner last night.

00:52:10.180 --> 00:52:11.080
Totally.

00:52:11.420 --> 00:52:12.340
But it's like...

00:52:12.340 --> 00:52:12.460
Totally.

00:52:12.460 --> 00:52:17.940
It's just all these different stages or parts of our life are just like, shake, shake, shake.

00:52:17.940 --> 00:52:22.220
Let's see what, you know, shakes out what we really need or what really is the right fit.

00:52:22.220 --> 00:52:25.460
And so it's really cool to hear that you guys are finding a silver lining in it.

00:52:25.460 --> 00:52:25.960
Yeah.

00:52:25.960 --> 00:52:26.480
Yeah.

00:52:27.740 --> 00:52:35.840
One other one is that my son, who's eight, now he has like literally three playdates a day over like Google Hangouts.

00:52:35.840 --> 00:52:39.320
Like he plays like, you know, Fortnite and then he plays Minecraft.

00:52:39.320 --> 00:52:43.960
And it's like, he has a whole new social life that he never had before.

00:52:44.060 --> 00:52:46.220
And he actually told me the other day, he's like, I'm sad.

00:52:46.220 --> 00:52:51.380
I'm going to be sad when COVID is done because I want to have all these playdates over Hangouts with all my friends.

00:52:51.380 --> 00:52:52.440
And I was like, you know what?

00:52:52.440 --> 00:52:53.300
You still can.

00:52:53.300 --> 00:52:55.180
That's never going to go away.

00:52:55.180 --> 00:52:58.240
We just, we just figured out how to do that and you'll have it forever.

00:52:58.520 --> 00:52:58.740
Yeah.

00:52:58.740 --> 00:52:59.140
Yeah.

00:52:59.140 --> 00:52:59.800
That's really cool.

00:52:59.800 --> 00:53:01.900
My daughter's definitely been doing that as well.

00:53:01.900 --> 00:53:06.360
Like she'll sit down at the Xbox with her friend and like prop up, you know, an iPad next to her.

00:53:06.360 --> 00:53:09.600
You see, I'm feeding this character and they're doing the same.

00:53:09.600 --> 00:53:13.260
And you know, it's like, it's, it's pretty neat in that regard.

00:53:13.260 --> 00:53:22.140
The other thing I want to touch on, something I'm a big fan of, and I just learned about reading your bio that you were involved in,

00:53:22.140 --> 00:53:26.080
is the Lo and Behold documentary by Van Rietzog.

00:53:26.080 --> 00:53:26.940
Yeah.

00:53:26.940 --> 00:53:34.960
For people who have not seen Lo and Behold, it is an incredible documentary on the history of the internet and technology in that era.

00:53:34.960 --> 00:53:35.540
Yeah.

00:53:35.540 --> 00:53:36.560
What was your involvement there?

00:53:36.560 --> 00:53:37.220
That sounds fun.

00:53:37.220 --> 00:53:43.360
I was interviewed as one of the sort of like internet pioneers because of my work with Foldit.

00:53:43.360 --> 00:53:50.360
I was probably like the least famous person by far that day because it was like Elon Musk and all these people.

00:53:50.360 --> 00:53:54.780
So I'm sure that they, when they watched it, they were like, who's this, you know, who's this guy?

00:53:55.260 --> 00:53:56.320
But it was because I folded.

00:53:56.320 --> 00:54:05.860
And you know, one of the coolest things for me was being able to meet Werner Herzog, who's just like, you know, he has a sort of shamanistic way of being in the world.

00:54:05.860 --> 00:54:14.980
And so, you know, he gave me advice like, Adrian, if you want to understand some part of the world, you must walk through it on two feet.

00:54:14.980 --> 00:54:17.300
How cool.

00:54:17.300 --> 00:54:17.960
Stuff like that.

00:54:17.960 --> 00:54:19.960
So I was like, it was really cool meeting him.

00:54:19.960 --> 00:54:21.940
And obviously it's a legendary filmmaker.

00:54:21.940 --> 00:54:22.660
Yeah.

00:54:22.660 --> 00:54:23.300
Oh, how cool.

00:54:23.380 --> 00:54:28.700
I just, if you were looking to watch something interesting, lo and behold, it's a fantastic option there.

00:54:28.700 --> 00:54:29.340
Yeah.

00:54:29.340 --> 00:54:29.620
All right.

00:54:29.620 --> 00:54:31.980
Well, final two questions before I let you out of here.

00:54:31.980 --> 00:54:37.820
If you're going to work on Streamlit or other Python code, what editor do you use?

00:54:37.820 --> 00:54:39.440
Oh, VS Code all the way.

00:54:39.440 --> 00:54:39.920
All right.

00:54:39.920 --> 00:54:40.400
Right on.

00:54:40.660 --> 00:54:48.480
Although, although I've tried in COVID, one of my little side projects has been to try to figure out how to code on my iPad.

00:54:48.480 --> 00:54:48.860
Oh, yeah.

00:54:48.860 --> 00:54:56.660
And so now I'm, and if anyone knows like how to do this, like tweet me your secrets, because I'm like really trying to figure this out just kind of for fun.

00:54:56.660 --> 00:54:58.700
But on the iPad, there is no VS Code.

00:54:58.700 --> 00:55:03.280
So I would love if there were VS Code and please someone make that happen.

00:55:03.280 --> 00:55:05.860
I'll give you two things that you can play with that I know about.

00:55:06.020 --> 00:55:13.200
I'm sure listeners, they can put it at the bottom of the show notes, the comments on the episode page and we'll make sure you get those as well.

00:55:13.200 --> 00:55:13.680
Yeah.

00:55:13.680 --> 00:55:17.760
But one is Carnet, C-A-R-N-E-T-S.

00:55:17.760 --> 00:55:18.620
Oh.

00:55:18.620 --> 00:55:28.960
It's local Jupyter Notebooks for iOS, like no network everything, which is, if you're willing to do notebooks, it's JupyterLab on your iPad.

00:55:28.960 --> 00:55:29.720
That's awesome.

00:55:29.720 --> 00:55:31.120
It's pretty cool.

00:55:31.120 --> 00:55:32.780
I think it might even be open source.

00:55:32.780 --> 00:55:33.280
I'm not sure.

00:55:33.880 --> 00:55:38.180
And then you can set up Visual Studio Code online.

00:55:38.180 --> 00:55:39.620
So Visual Studio online.

00:55:39.620 --> 00:55:41.160
And then run that.

00:55:41.160 --> 00:55:45.340
I think you can run that in your web browser and basically get VS Code.

00:55:45.340 --> 00:55:48.420
I've been trying to do that and I cannot get it to work.

00:55:48.420 --> 00:55:48.540
Is it working?

00:55:48.540 --> 00:55:49.260
Yeah.

00:55:49.260 --> 00:55:50.780
I can.

00:55:50.780 --> 00:55:51.320
It doesn't.

00:55:51.320 --> 00:55:56.220
The iPad browser just doesn't quite like have it.

00:55:56.220 --> 00:55:58.160
It's missing a couple of things that.

00:55:58.160 --> 00:56:00.820
So I've been, that's been my, I've been trying to do that.

00:56:00.820 --> 00:56:02.540
And maybe I'm getting something wrong.

00:56:02.700 --> 00:56:03.500
So anyway.

00:56:03.500 --> 00:56:03.920
Maybe.

00:56:03.920 --> 00:56:13.160
I do feel like that's actually one of the big mistakes that Apple has made is not allowing any innovation on web browsers on their platform.

00:56:13.160 --> 00:56:13.760
Totally.

00:56:13.760 --> 00:56:14.980
That's just bizarre to me.

00:56:14.980 --> 00:56:15.640
So anyway.

00:56:15.640 --> 00:56:16.020
Yeah.

00:56:16.020 --> 00:56:16.480
Yeah.

00:56:16.480 --> 00:56:16.860
Cool.

00:56:16.860 --> 00:56:17.220
Cool.

00:56:17.220 --> 00:56:17.520
All right.

00:56:17.520 --> 00:56:20.640
And then notable PyPI package.

00:56:20.640 --> 00:56:25.820
Something, some Python package that you're like, maybe it's not the most popular, but like, wow, people should know about this.

00:56:25.980 --> 00:56:33.540
And I mean, obviously, if it's all streamlet is one option, but if it's anything else that comes to mind, I guess, I don't know how I'm famous.

00:56:33.540 --> 00:56:34.020
This is.

00:56:34.020 --> 00:56:38.940
I think it's semi-famous, but I would really get tell people that I want to shout out to Altair.

00:56:39.740 --> 00:56:42.540
Basically, you know, a lot of people know Matplotlib.

00:56:42.540 --> 00:56:43.940
A lot of people know Plotly.

00:56:43.940 --> 00:56:45.360
A lot of people know Bokeh.

00:56:45.360 --> 00:56:47.240
I think Altair is a little less famous.

00:56:47.440 --> 00:56:51.820
The short story is they took D3, which is this legendary thing.

00:56:51.820 --> 00:56:57.300
They simplified it into a declarative JSON language called Vega, but that was way too complicated.

00:56:57.300 --> 00:57:00.620
So they simplified that into an even simpler language called Vega Lite.

00:57:00.620 --> 00:57:05.720
And then someone created, at Google, created Python bindings for that, and it's called Altair.

00:57:05.720 --> 00:57:09.120
And this thing, it's its own philosophy, man.

00:57:09.180 --> 00:57:17.940
But when you learn it, it is so cool and creates beautiful graphs and they're interactive and they just look great and they're easy to create.

00:57:17.940 --> 00:57:19.340
And I just think Altair is great.

00:57:19.340 --> 00:57:19.760
Awesome.

00:57:19.760 --> 00:57:21.680
Yeah, I've definitely heard good things from Altair.

00:57:21.680 --> 00:57:22.320
Yeah.

00:57:22.320 --> 00:57:22.800
About Altair.

00:57:22.800 --> 00:57:23.940
So a good recommendation.

00:57:23.940 --> 00:57:25.200
All right, Adrian.

00:57:25.200 --> 00:57:26.120
Final call to action.

00:57:26.120 --> 00:57:27.300
People are excited about Streamlit.

00:57:27.300 --> 00:57:28.420
Want to check it out.

00:57:28.420 --> 00:57:29.460
Do more with it.

00:57:29.460 --> 00:57:29.960
What do you say?

00:57:29.960 --> 00:57:30.780
Go for it.

00:57:30.780 --> 00:57:31.800
Super fun.

00:57:31.800 --> 00:57:34.300
Streamlit.io or just pip install Streamlit.

00:57:34.500 --> 00:57:40.700
And then type Streamlit that hello on the command line and you'll be playing with interactive stuff in minutes.

00:57:40.700 --> 00:57:42.120
Well, thanks for being on the show.

00:57:42.120 --> 00:57:43.920
It's been really great to talk to you about your project.

00:57:43.920 --> 00:57:44.300
Yeah.

00:57:44.300 --> 00:57:45.180
Thanks so much, Mike.

00:57:45.180 --> 00:57:46.080
I really appreciate it.

00:57:46.080 --> 00:57:46.400
You're welcome.

00:57:46.400 --> 00:57:46.780
Bye-bye.

00:57:46.780 --> 00:57:47.100
All right.

00:57:47.100 --> 00:57:47.540
Take care.

00:57:47.540 --> 00:57:47.680
Bye.

00:57:47.680 --> 00:57:51.460
This has been another episode of Talk Python To Me.

00:57:51.460 --> 00:57:54.040
Our guest on this episode is Adrian Troiel.

00:57:54.040 --> 00:57:58.800
And it's been brought to you by Linode and Reuven Lerner's Ace Python Interviews course.

00:57:58.800 --> 00:58:03.580
Start your next Python project on Linode's state-of-the-art cloud service.

00:58:03.580 --> 00:58:06.380
Just visit talkpython.fm/Linode.

00:58:06.380 --> 00:58:07.920
L-I-N-O-D-E.

00:58:07.920 --> 00:58:11.260
You'll automatically get a $20 credit when you create a new account.

00:58:11.260 --> 00:58:13.800
Ace that Python interview.

00:58:13.800 --> 00:58:17.840
Let Reuven Lerner's course help you get that next Python job.

00:58:17.840 --> 00:58:22.240
Just visit talkpython.fm/ace to take his free course.

00:58:22.240 --> 00:58:24.500
Want to level up your Python?

00:58:24.500 --> 00:58:29.360
If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

00:58:29.660 --> 00:58:37.520
Or if you're looking for something more advanced, check out our new async course that digs into all the different types of async programming you can do in Python.

00:58:37.520 --> 00:58:42.200
And of course, if you're interested in more than one of these, be sure to check out our Everything Bundle.

00:58:42.200 --> 00:58:44.080
It's like a subscription that never expires.

00:58:44.460 --> 00:58:46.220
Be sure to subscribe to the show.

00:58:46.220 --> 00:58:48.640
Open your favorite podcatcher and search for Python.

00:58:48.640 --> 00:58:49.860
We should be right at the top.

00:58:49.860 --> 00:58:58.840
You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

00:58:59.320 --> 00:59:00.920
This is your host, Michael Kennedy.

00:59:00.920 --> 00:59:02.420
Thanks so much for listening.

00:59:02.420 --> 00:59:03.460
I really appreciate it.

00:59:03.460 --> 00:59:05.220
Now get out there and write some Python code.

00:59:05.220 --> 00:59:24.860
I really appreciate it.

