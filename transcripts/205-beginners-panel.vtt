WEBVTT

00:00:00.001 --> 00:00:03.040
Welcome to part two of our Beginners and Experts series.

00:00:03.040 --> 00:00:06.820
This one is a panel format with seven different guests,

00:00:06.820 --> 00:00:08.920
each one of them a beginner in their own way.

00:00:08.920 --> 00:00:11.380
We dig deep into some of the follow-up conversations

00:00:11.380 --> 00:00:13.200
from part one with these panelists.

00:00:13.200 --> 00:00:15.920
On this episode, you'll meet Vanessa Angel,

00:00:15.920 --> 00:00:19.460
Kelly Schuster-Paradez, Dane Parks, Scott Stoltzman,

00:00:19.460 --> 00:00:23.040
Sergio Sanchez, Alex Caprazi, and Jason Picour.

00:00:23.040 --> 00:00:25.960
This is Talk Python To Me, episode 205,

00:00:25.960 --> 00:00:28.720
published April 2nd, 2019.

00:00:28.720 --> 00:00:45.180
Welcome to Talk Python To Me, a weekly podcast on Python,

00:00:45.180 --> 00:00:48.240
the language, the libraries, the ecosystem, and the personalities.

00:00:48.240 --> 00:00:50.180
This is your host, Michael Kennedy.

00:00:50.180 --> 00:00:52.320
Follow me on Twitter, where I'm @mkennedy.

00:00:52.320 --> 00:00:56.060
Keep up with the show and listen to past episodes at talkpython.fm,

00:00:56.060 --> 00:00:58.560
and follow the show on Twitter via at Talk Python.

00:00:58.920 --> 00:01:01.300
This episode is brought to you by Linode and Rollbar.

00:01:01.300 --> 00:01:03.300
Please check out what they're offering during their segments.

00:01:03.300 --> 00:01:04.640
It really helps support the show.

00:01:04.640 --> 00:01:10.240
In this first segment, we're just going to hear a little bit about the background of each of our panelists,

00:01:10.240 --> 00:01:13.360
what their experience is with Python, what they do day to day,

00:01:13.360 --> 00:01:15.740
so you know where they're coming from for the rest of their answers.

00:01:15.740 --> 00:01:16.920
Now let's hear from Vanessa.

00:01:16.920 --> 00:01:18.820
My name is Vanessa Angel.

00:01:19.300 --> 00:01:23.660
I live in Anchorage, Alaska, and I'm a mom with three kids, nine, five, and two,

00:01:23.660 --> 00:01:25.500
and I work as a petroleum engineer.

00:01:25.500 --> 00:01:30.660
I just picked up Python within the last year to apply to my job,

00:01:30.660 --> 00:01:33.160
and in the world of petroleum engineering, there's three main kinds.

00:01:33.160 --> 00:01:34.680
The drilling engineer drills the hole.

00:01:34.680 --> 00:01:38.780
Production engineer gets the oil from the bottom of the hole to the surface,

00:01:38.780 --> 00:01:41.380
through the production facilities to the sales line.

00:01:41.520 --> 00:01:43.760
And then the reservoir engineer, that's the last kind.

00:01:43.760 --> 00:01:44.420
That's what I am.

00:01:44.420 --> 00:01:51.020
We work with geologists and geophysicists who use tools like seismic, core sampling, logging,

00:01:51.020 --> 00:01:55.840
to come up with an estimate of what the layer of rock that we're studying

00:01:55.840 --> 00:01:58.720
that sits thousands of feet underground looks like.

00:01:58.720 --> 00:02:02.500
You know, it's covering miles and miles, and we only have small data points in between.

00:02:02.500 --> 00:02:06.800
So we use a lot of different types of data, a lot of time series data.

00:02:06.800 --> 00:02:11.240
We have a lot of monitors in the field, and then we get a lot of inputs from the geologists

00:02:11.240 --> 00:02:13.980
and geophysicists, and we build a lot of simulation models.

00:02:13.980 --> 00:02:18.200
And using all that information together, we're trying to come up with estimates for predicted

00:02:18.200 --> 00:02:22.860
oil rates if you drill a well, where oil's remaining, where we could drill more locations

00:02:22.860 --> 00:02:23.920
and get more oil.

00:02:23.920 --> 00:02:26.460
And for all of this, in general, I used to use Excel.

00:02:26.460 --> 00:02:29.640
You know, we'd have databases of data, but you'd just pull it out and analyze it.

00:02:29.640 --> 00:02:34.080
And learning Python has really transformed the way I do my job.

00:02:34.080 --> 00:02:39.920
It's been really useful for all the data analysis, data wrangling, and then advanced

00:02:39.920 --> 00:02:43.500
data techniques that you can apply that come built into packages in Python.

00:02:43.500 --> 00:02:45.120
Now let's hear from Kelly.

00:02:45.120 --> 00:02:50.640
Hi, my name is Kelly Schuster-Paredes, and I'm an education technology specialist and computer

00:02:50.640 --> 00:02:53.980
science teacher at an independent school in Florida.

00:02:53.980 --> 00:03:00.760
My day-to-day job consists of wrangling 11 to 13-year-old students and try to teach them

00:03:00.760 --> 00:03:01.140
Python.

00:03:01.140 --> 00:03:06.180
This is the first time they've scripted in Python in a language, so it's been a fun experience

00:03:06.180 --> 00:03:06.640
this year.

00:03:06.640 --> 00:03:12.480
I also support approximately 30 teachers in the school, in the middle school, with using

00:03:12.480 --> 00:03:13.760
technology in their classroom.

00:03:13.760 --> 00:03:21.000
And I do anything from helping them with an application, helping them with a Google Suite

00:03:21.000 --> 00:03:21.560
product.

00:03:21.980 --> 00:03:27.440
But our major and most fun part is getting the teachers into coding projects in their

00:03:27.440 --> 00:03:27.820
curriculum.

00:03:27.820 --> 00:03:33.660
And on a side job, my teaching partner, Sean Tyber, and I, we just launched a podcast called

00:03:33.660 --> 00:03:40.520
TeachingPython.fm, where we discuss the daily findings, our triumphs, our learning of teaching

00:03:40.520 --> 00:03:41.980
kids to code in Python.

00:03:41.980 --> 00:03:44.560
It's been a fun podcast.

00:03:44.800 --> 00:03:49.080
We started in December, and we have launched 15 episodes so far.

00:03:49.080 --> 00:03:49.840
Here's Dane.

00:03:49.840 --> 00:03:50.520
Hi.

00:03:50.520 --> 00:03:51.820
Thanks for having me on the show.

00:03:51.820 --> 00:03:52.780
My name's Dane.

00:03:52.780 --> 00:03:53.600
I'm a civil engineer.

00:03:53.600 --> 00:03:55.880
I've been working with Python for about four months now.

00:03:56.240 --> 00:04:00.160
I have a little experience with some other programming languages, but I've never been in a professional

00:04:00.160 --> 00:04:02.160
development role or anything of that nature.

00:04:02.160 --> 00:04:06.900
I write code for personal use to try to assist with some of the more menial tasks I face day

00:04:06.900 --> 00:04:07.260
to day.

00:04:07.260 --> 00:04:13.320
And I work with computers that use proprietary specialized software a lot, like AutoCAD, MicroStation,

00:04:13.320 --> 00:04:14.020
ArcGIS.

00:04:14.020 --> 00:04:19.080
I had some programming classes in college, but certainly don't consider programming to play

00:04:19.080 --> 00:04:22.240
a day-to-day role in my job expectations or anything like that.

00:04:22.240 --> 00:04:25.420
I work for a company now that inspects bridges for state agencies.

00:04:25.740 --> 00:04:30.380
So when you see a photo of those guys walking up on the suspension cables or dangling off

00:04:30.380 --> 00:04:33.500
the side of a bridge in a basket, that's the kind of work I primarily do.

00:04:33.500 --> 00:04:38.540
I do some design work as well and work associated with repairs found on the inspections.

00:04:38.540 --> 00:04:41.980
There's a lot of record keeping and data being transmitted in my role.

00:04:41.980 --> 00:04:47.140
Some of these bridges have thousands of components being inspected and recorded, and I deal with

00:04:47.140 --> 00:04:50.280
the databases every day, which is why I originally got into Python.

00:04:50.280 --> 00:04:54.040
I want to try to keep track of and manage the data I'm working with a little more efficiently

00:04:54.040 --> 00:04:56.960
and get it to a more practical format when I needed it to be.

00:04:56.960 --> 00:04:58.200
Here's Alexander.

00:04:58.680 --> 00:04:59.540
Hi, my name's Alex.

00:04:59.540 --> 00:05:04.080
I'm 42 years old, and I've been learning Python for about a year now.

00:05:04.080 --> 00:05:10.140
I'm a certified fluid power specialist working for a hydraulic component rebuilder and distributor

00:05:10.140 --> 00:05:11.840
in the Seattle area.

00:05:11.840 --> 00:05:15.160
I've been in the industry for about 18 years.

00:05:15.160 --> 00:05:16.720
So I came to Python.

00:05:16.720 --> 00:05:22.760
I was kind of curious about programming, and someone told me that Python was a great place

00:05:22.760 --> 00:05:23.200
to start.

00:05:23.200 --> 00:05:28.940
It didn't take me long to realize that Python had a lot of potential to help me out with

00:05:28.940 --> 00:05:35.860
my current job in regards to dealing with spreadsheets and scheduling, things of that nature.

00:05:35.860 --> 00:05:40.380
A lot of the stuff that you'd find in Al Sweeker's Automate the Boring Stuff.

00:05:40.380 --> 00:05:47.360
So I've been reading that and also taking the 100 Days of Python course through Talk Python FM.

00:05:48.000 --> 00:05:50.800
So I've been enjoying that and building projects.

00:05:50.800 --> 00:05:56.100
I've built a hydraulic calculator, and I've built a unit conversion tool.

00:05:56.100 --> 00:06:00.060
And right now I'm working on a hydraulic library.

00:06:00.060 --> 00:06:06.140
So I'm putting together a library with commonly used hydraulic formulas used in the industry.

00:06:06.460 --> 00:06:09.800
So maybe that'll turn into an open source project.

00:06:09.800 --> 00:06:12.320
So far, I've really enjoyed learning how to program.

00:06:12.320 --> 00:06:14.600
I'm really excited to see where it takes me.

00:06:14.600 --> 00:06:15.860
Now let's hear from Jason.

00:06:15.860 --> 00:06:20.960
Hi, my name is Jason Pecor, and I spent about the first 10 years of my career doing semiconductor

00:06:20.960 --> 00:06:22.120
design and verification.

00:06:22.120 --> 00:06:27.420
So most of my coding experience historically has been using the languages like System Verilog

00:06:27.420 --> 00:06:30.520
and VHDL that we use in that industry.

00:06:30.740 --> 00:06:37.460
Did some Perl development, C, Tickle, and even a little bit of Python to kind of do like support

00:06:37.460 --> 00:06:41.940
scripts and things that we would use as part of our verification environments, but never have

00:06:41.940 --> 00:06:45.680
really been a true software developer as my full-time gig.

00:06:45.680 --> 00:06:50.400
These days, my primary responsibility is focused on business development and marketing.

00:06:50.540 --> 00:06:56.460
I'm one of the co-founders of a small company that does semiconductor design as well as some FPGA-based

00:06:56.460 --> 00:07:02.280
embedded computing platforms for embedded systems, motion control, industrial IoT, and things like that.

00:07:02.280 --> 00:07:07.580
So most of my work is spent on the sales and marketing kind of activities, but that also includes

00:07:07.580 --> 00:07:11.520
doing YouTube videos and doing our social media stuff, which is really cool because that's where

00:07:11.520 --> 00:07:12.480
I get to do demonstrations.

00:07:12.480 --> 00:07:16.920
It allows me to get my hands kind of dirty with some coding and creating things.

00:07:16.920 --> 00:07:21.980
I actually came back to Python about a year or so ago because I was working on a Raspberry

00:07:21.980 --> 00:07:23.000
Pi project at home.

00:07:23.000 --> 00:07:26.900
It was kind of during that time I was just looking for some help and I ran across the Talk Python

00:07:26.900 --> 00:07:32.040
podcast and the Python Bytes podcast and I just love them and I just kind of started to get

00:07:32.040 --> 00:07:33.980
really interested in Python in general.

00:07:33.980 --> 00:07:38.880
And then in addition to that, one of the core things I care about right now that's Python

00:07:38.880 --> 00:07:43.100
related is what's happening in the area of Python running on hardware.

00:07:43.100 --> 00:07:48.020
So for example, MicroPython or Adafruit's fork of MicroPython, which they call CircuitPython,

00:07:48.020 --> 00:07:51.600
is really interesting for microcontrollers and what they're doing there, a lot of activity.

00:07:51.600 --> 00:07:56.580
And then there's a project called MyHDL where people are developing, that group is developing

00:07:56.580 --> 00:08:01.520
a mechanism for using Python for actually doing ASIC and FPGA hard work types of design.

00:08:01.520 --> 00:08:05.520
And ultimately, I'm very interested in Python as a high-level synthesis language.

00:08:05.520 --> 00:08:10.420
So really enjoying learning Python and how it might apply to some of the things I'm currently

00:08:10.420 --> 00:08:12.180
working on or interested in professionally.

00:08:12.340 --> 00:08:13.040
Here's Scott.

00:08:13.040 --> 00:08:15.400
Hi, my name is Scott Stoltzman.

00:08:15.400 --> 00:08:20.680
I live in the beautiful city of Fort Collins, Colorado, where I recently became a father.

00:08:20.680 --> 00:08:25.200
And it's been unsurprisingly more difficult to figure out than Python.

00:08:25.200 --> 00:08:30.820
A few years ago, I started an analytics consulting business where I now work as a data scientist

00:08:30.820 --> 00:08:34.820
and I provide services surrounding statistical modeling and analysis.

00:08:34.820 --> 00:08:37.880
I've been using Python for about five years.

00:08:37.880 --> 00:08:44.460
The first three years basically just utilized Jupyter Notebooks scripts with a lot of functions

00:08:44.460 --> 00:08:45.160
and loops.

00:08:45.160 --> 00:08:50.140
I think that was mostly driven by the fact that I had a R background in MATLAB where the majority

00:08:50.140 --> 00:08:53.900
of work I needed to do didn't require any sort of custom classes.

00:08:53.900 --> 00:08:59.740
And while functional programming produced a lot of value for me, I was eventually forced to

00:08:59.740 --> 00:09:04.040
move on and utilize more classes in order to put my Python code into production.

00:09:04.040 --> 00:09:10.880
My day-to-day work is focused on data acquisition, ETL, statistical modeling, and data visualization.

00:09:10.880 --> 00:09:17.460
I focus on improving data integrity, increasing the value businesses get from their data, that

00:09:17.460 --> 00:09:18.000
sort of thing.

00:09:18.000 --> 00:09:24.600
My typical workflow consists of creating a data pipeline with Luigi, gathering data from APIs,

00:09:24.600 --> 00:09:30.620
cleaning it all up and getting it ready for a Panda's data frame, ensuring accuracy with

00:09:30.620 --> 00:09:31.400
stats models.

00:09:31.400 --> 00:09:34.100
And I'm starting to consider PyJanitor.

00:09:34.100 --> 00:09:37.460
And I set it up for an API endpoint with Flask.

00:09:37.460 --> 00:09:39.780
I'd say I'm pretty dependent on Python.

00:09:40.100 --> 00:09:45.640
It's played a critical role across the board from my smallest to largest clients.

00:09:45.640 --> 00:09:52.840
I've used it for basic dashboards, using Dash, for businesses making 100K a year, maybe all

00:09:52.840 --> 00:09:57.960
the way up to ETL for a state pension fund with billions in assets under management.

00:09:57.960 --> 00:10:03.340
That kind of robustness has really been the driver for my success because I can focus on

00:10:03.340 --> 00:10:07.560
the problem I'm solving rather than worrying about how I'm going to solve it.

00:10:07.560 --> 00:10:08.260
Here's Sergio.

00:10:08.900 --> 00:10:10.600
Hi, my name is Sergio Sanchez-Zavala.

00:10:10.600 --> 00:10:14.940
I'm a research associate at PPIC, the Public Policy Institute of California.

00:10:14.940 --> 00:10:22.080
My experience with Python is mostly on the data analytics and data visualization side of

00:10:22.080 --> 00:10:22.360
things.

00:10:22.360 --> 00:10:26.740
I do research on higher education public policy in California.

00:10:26.740 --> 00:10:30.440
So I use a lot of publicly available census data.

00:10:30.440 --> 00:10:44.860
And I use Jupyter Notebooks, Pandas, Altair, Jupyter Lab actually nowadays mostly to analyze this data and extract useful information for our legislature here in California.

00:10:45.080 --> 00:10:51.620
The next question I wanted to ask everyone was, what has been the most challenging thing to learn programming and Python?

00:10:51.620 --> 00:11:01.300
I feel like this is an important one to hear because often there's one or two things that are really hard and you push through learning some concept or you're solving some problem.

00:11:01.300 --> 00:11:07.340
Once you've gone through that at a time or two, everything else after that becomes much more approachable.

00:11:07.340 --> 00:11:07.940
All right.

00:11:07.940 --> 00:11:08.800
Not necessarily easy.

00:11:08.800 --> 00:11:12.900
There's still many things you don't know, but there's plenty of stuff you have solved.

00:11:12.960 --> 00:11:15.560
And you can say, well, if I did that, I can do this other thing.

00:11:15.560 --> 00:11:19.780
So let's hear what has been the most challenging on the path of learning to become a programmer.

00:11:19.780 --> 00:11:20.840
Here's Alexander.

00:11:20.840 --> 00:11:28.720
Yeah, surprisingly, it really hasn't been the programming concepts that have been presenting the greatest challenge.

00:11:28.720 --> 00:11:40.400
It has been dealing with some of the external libraries like the UI libraries and dealing with the installation and navigating through some of the documentation.

00:11:40.400 --> 00:11:41.460
Here's Dane.

00:11:42.020 --> 00:11:47.260
So my college had a basic programming for engineering course that anyone in any of the engineering disciplines had to complete.

00:11:47.260 --> 00:11:49.400
It was absolutely terrible.

00:11:49.400 --> 00:11:56.080
They started us out with HTML, a couple Excel tips, and then we just kind of jumped straight into C.

00:11:56.080 --> 00:12:03.940
Basically just had us go through the motions of how to create a simple app to do things like play Blackjack or Yahtzee, other things like that.

00:12:03.940 --> 00:12:07.760
I think a lot of people had that experience where they were looking for a language that was useful.

00:12:07.980 --> 00:12:12.500
So they started with C and it was just ended up being not the right language to start out with.

00:12:12.500 --> 00:12:18.940
I remember one of the best professors I had had us write a basic code in MATLAB that performed a set of beam analysis calculations.

00:12:18.940 --> 00:12:27.280
And I think that project was the only one I was assigned during school that really made me go, hey, programming could be incredibly useful to me in the future.

00:12:27.680 --> 00:12:37.120
I don't think college really has the ability to prepare you for a career like people think it does going in, but more so gives you an introduction to a little bit of everything to help you find the thing that you enjoy doing.

00:12:37.680 --> 00:12:45.580
I think it's really important career-wise for people to find something that they say, I'd be willing to do this in my free time and I'm not just going to do it basically to earn a paycheck.

00:12:45.580 --> 00:12:56.580
Up until that point, my programming experience consisted of making some darts, scoring games and Excel spreadsheets and learning what was required to work with Ubuntu and Linux through Bash.

00:12:57.000 --> 00:13:01.840
I built some PCs and I was able to do multiple OSs, those kinds of things.

00:13:01.840 --> 00:13:06.240
I'm really happy with my choice of college overall, but there's one thing I'll hold against them.

00:13:06.240 --> 00:13:10.240
It's that their technology program at the time for engineers was just absolutely terrible.

00:13:10.240 --> 00:13:14.860
As far as challenges with Python, I think my biggest struggle has just been how expansive it is.

00:13:14.860 --> 00:13:22.120
I can form simple functions with it, but when I got to the point where I wanted to write to its database, I had to get some basic SQL knowledge.

00:13:22.120 --> 00:13:25.660
For web apps, I had to refresh what I knew about HTML and CSS.

00:13:26.160 --> 00:13:34.780
There's a lot of things that can be accessed using Python as a springboard, but in order to get the program to do what you actually wanted to do, you end up getting a pretty good intro into a little bit of everything.

00:13:34.780 --> 00:13:36.060
Now let's hear from Kelly.

00:13:36.060 --> 00:13:42.940
I think the most challenging thing about learning to program for me was just getting started.

00:13:42.940 --> 00:13:55.740
There's so much information out there in order for people to learn the basics so that when I was told I was going to be teaching Python last year, I started wondering, you know, where would I start in my preparation?

00:13:56.040 --> 00:14:03.180
I've been teaching for a while, and I know how I would start students, but for some reason, I didn't know how to start them in learning how to code.

00:14:03.180 --> 00:14:09.540
So with learning anything new, I had to stop and prepare my brain for this type of learning.

00:14:10.200 --> 00:14:17.520
And then I started comparing myself to others and how well they code and how the information just came out and they were able to start typing.

00:14:17.520 --> 00:14:25.400
I also didn't know really what my learning style would be for coding because it was something different than what I had done in the past.

00:14:25.760 --> 00:14:27.520
And so I started ordering every book on the planet.

00:14:27.520 --> 00:14:30.080
I would order Python for tweens and teens.

00:14:30.080 --> 00:14:31.720
I ordered Python for kids.

00:14:31.720 --> 00:14:33.740
I ordered Python for dummies.

00:14:33.740 --> 00:14:37.400
I ordered the programming BBC Microbit, getting started with MicroPython.

00:14:37.400 --> 00:14:41.680
And I kept, I just read the books thinking that it would be easy to pick up coding.

00:14:41.680 --> 00:14:42.500
I knew the concepts.

00:14:42.500 --> 00:14:43.680
I could say the vocabulary.

00:14:43.680 --> 00:14:47.060
But I really wasn't into programming.

00:14:47.060 --> 00:14:51.960
So I started watching videos, the Sendex videos and the Socrates videos.

00:14:52.600 --> 00:14:55.500
And started listening to your show, Michael, talk Python to me.

00:14:55.500 --> 00:15:03.300
And then what would happen was I had all this information and I still didn't consider myself a programmer because I had so many resources.

00:15:03.300 --> 00:15:05.960
I just, and I would do all the resources.

00:15:05.960 --> 00:15:09.840
And I kept finding new things that could be done with Python and I would read some more resources.

00:15:09.840 --> 00:15:11.300
And I got a bit overwhelmed.

00:15:11.300 --> 00:15:17.160
And so again, like the most challenging part about starting to program is just starting to program.

00:15:17.160 --> 00:15:19.700
You can read as much information as you want.

00:15:19.700 --> 00:15:29.740
But until you actually start trying to solve problems and write the code by yourself, you never really get the full understanding of what it's like to program.

00:15:29.740 --> 00:15:31.120
Now let's hear from Vanessa.

00:15:31.120 --> 00:15:42.480
The most challenging part about learning Python to me was in the beginning, just trying to get started and meet myself where I was at.

00:15:42.840 --> 00:15:53.960
So I guess the way I imagined the whole process would work is that I would go online, find a snippet of code, kind of deconstruct it, figure out how it worked, and then apply that and be immediately useful.

00:15:53.960 --> 00:15:58.460
But I hadn't had any computer programming in my history at all.

00:15:58.460 --> 00:16:05.580
And I found that I didn't understand the context well enough to understand what any one line or word or symbol in that script meant.

00:16:05.600 --> 00:16:08.580
And therefore, I couldn't use it usefully and I couldn't analyze it.

00:16:08.580 --> 00:16:10.140
And I got frustrated early on.

00:16:10.140 --> 00:16:13.920
And what I found was that I really needed to start from the very beginning.

00:16:13.920 --> 00:16:16.320
I needed to have those intro classes.

00:16:16.320 --> 00:16:17.080
What is a list?

00:16:17.080 --> 00:16:18.580
What is a Boolean?

00:16:18.860 --> 00:16:29.920
So once I realized that and I allowed myself to start as slowly as I needed to, I found that then I was able to get up and start making progress.

00:16:29.920 --> 00:16:31.700
You know, just one step at a time.

00:16:31.700 --> 00:16:34.120
It was surprising how easy it was.

00:16:34.120 --> 00:16:39.020
Three months later, it felt like I'd been waiting slowly through this material.

00:16:39.020 --> 00:16:42.340
But then three months later, I have these skills that I didn't have before.

00:16:42.340 --> 00:16:44.740
And I can do these amazing things that I couldn't do before.

00:16:44.740 --> 00:16:45.680
Here's Sergio.

00:16:45.680 --> 00:16:58.580
I think the most challenging thing for me was being okay with not knowing anything and asking for help and understanding that, yeah, I don't know anything right now, but maybe eventually I will.

00:16:58.580 --> 00:17:07.840
Because when I was in college, I signed up for this computer science class and the professor handed out this worksheet that said, if you cannot do this, you shouldn't be in this class.

00:17:07.840 --> 00:17:13.100
I dropped that class and I didn't touch computer science or programming until after college.

00:17:13.440 --> 00:17:21.160
And that was a huge fear when you're barely starting and you don't want to look dumb and you want to learn something.

00:17:21.160 --> 00:17:24.820
If you want to learn something, obviously you do not know that thing.

00:17:24.820 --> 00:17:26.420
And that's perfectly fine.

00:17:26.420 --> 00:17:30.320
And the Python community is particularly great at welcoming beginners.

00:17:30.320 --> 00:17:32.280
So it worked out.

00:17:32.280 --> 00:17:36.180
But you have to get over that fear of looking dumb.

00:17:36.340 --> 00:17:38.640
That was the most challenging thing for me, at least personally.

00:17:38.640 --> 00:17:44.540
And a very close follow-up was having time for myself.

00:17:44.540 --> 00:17:51.460
Setting up one hour, 30 minutes a day or every other day to actually sit down and write code.

00:17:51.460 --> 00:17:58.280
Because you cannot learn programming by reading articles or listening to podcasts, or at least I can't.

00:17:58.720 --> 00:18:05.040
You have to sit down and actually write some code to understand what you're doing and see the errors and be like, oh, I guess this doesn't work.

00:18:05.040 --> 00:18:07.340
Oh, I didn't know this could work, but it did.

00:18:07.340 --> 00:18:07.980
You know?

00:18:07.980 --> 00:18:11.660
And then also you have your code and then you can start building on that.

00:18:11.660 --> 00:18:13.600
It's just keeping track of everything.

00:18:13.600 --> 00:18:15.720
Those are the two biggest challenges for me.

00:18:15.720 --> 00:18:17.780
It's just, it's okay looking dumb.

00:18:17.780 --> 00:18:20.600
Sometimes it's okay saying that you don't know something.

00:18:21.600 --> 00:18:23.540
And actually having time to do it.

00:18:23.540 --> 00:18:30.720
And not a lot of people have that privilege to have an extra hour a day or every other day to take up a new skill.

00:18:30.720 --> 00:18:32.000
Now let's hear from Jason.

00:18:32.000 --> 00:18:36.640
Well, when I came back to using Python again here recently in the like last year and a half or so,

00:18:36.640 --> 00:18:41.760
it was really on the heels of starting to do more applied coding for our development platforms.

00:18:41.760 --> 00:18:45.360
And we've designed our development platforms to play really nicely in the Arduino ecosystem.

00:18:45.360 --> 00:18:55.980
And so most of the code I was writing was in the, it's really in C, but it's kind of like a abstracted version of C that Arduino came up with that runs in their development environment.

00:18:55.980 --> 00:19:00.920
And I wanted to pick up Python for this project I was doing at home and wanted to learn that.

00:19:00.920 --> 00:19:02.740
And I had done Perl before.

00:19:02.740 --> 00:19:09.960
And so I thought, okay, well, it's going to be similar in a lot of ways to Perl and even similar, you know, programming languages from language to language.

00:19:09.960 --> 00:19:14.860
You get different syntax, different ways to structure things, but a lot of the concepts are the same.

00:19:14.860 --> 00:19:19.780
Well, the first thing I hit that I really didn't like was the indenting and I actually hated it.

00:19:19.780 --> 00:19:21.780
I mean, I wanted my braces back.

00:19:21.780 --> 00:19:24.040
I wanted a begin end something.

00:19:24.040 --> 00:19:39.500
And really, it really came down to the fact that I kind of had my own personalized coding style with some things that if I could put an open brace and a closed brace on the same line for like really short if else statements and things like that, it, for me, it was very efficient and very clean and very compact.

00:19:39.500 --> 00:19:45.620
But I know that people are probably hearing that and thinking, man, that is just crazy to do it from a style guideline stamp perspective.

00:19:45.620 --> 00:19:48.540
But it's kind of what I was doing and it seemed to work.

00:19:48.540 --> 00:19:51.140
But it wasn't long before I learned to really like it.

00:19:51.220 --> 00:20:00.560
In fact, I remember coming in here one of the first days I was starting to work with it and talking with one of our engineers and just talking about how much I hated the whole indenting thing.

00:20:00.560 --> 00:20:05.120
And then like two weeks later coming in saying, you know, I think I actually like this.

00:20:05.120 --> 00:20:06.520
My code looks pretty clean.

00:20:06.520 --> 00:20:10.240
I can very quickly look at Python code and understand what's going on.

00:20:10.300 --> 00:20:14.440
And so I kind of became a believer in using that.

00:20:14.440 --> 00:20:18.380
So that was one of the first kind of challenging things I had to get over.

00:20:18.380 --> 00:20:27.020
Then the other thing that I found that was a little bit challenging is Python goes from being very easy to use to getting complex in kind of a hurry, depending on what you're trying to do.

00:20:27.020 --> 00:20:30.040
And so you can come out of the gate and write a simple script.

00:20:30.040 --> 00:20:33.380
You can jump into the shell or you can do a little app.

00:20:33.380 --> 00:20:34.000
It's pretty simple.

00:20:34.000 --> 00:20:40.740
But all of a sudden it's like, OK, well, now I'm going to need this virtual environment and I need to get these packages installed.

00:20:40.740 --> 00:20:44.100
And am I what am I installing here?

00:20:44.100 --> 00:20:45.700
Am I using pip to install something?

00:20:45.700 --> 00:20:47.660
There's homebrews involved.

00:20:47.660 --> 00:20:49.880
I had to download something from GitHub.

00:20:49.880 --> 00:20:51.720
It's a Python 2, Python 3.

00:20:51.720 --> 00:20:54.360
And then there's the whole thing of Dunder variables.

00:20:54.360 --> 00:21:00.860
I mean, when I first saw those, especially the like the Dunder main thing, I had no idea what was going on.

00:21:00.860 --> 00:21:01.840
I saw examples of it.

00:21:01.840 --> 00:21:11.420
And actually, the first class, Michael, that I bought from you, one of the first things I did was I searched through all the content to figure out where you might talk about this.

00:21:11.420 --> 00:21:13.260
And I jumped to that video and watched that first.

00:21:13.260 --> 00:21:19.820
And so that was a little bit of a challenge for me coming into Python was kind of going from that quick and easy program to something more complicated.

00:21:19.820 --> 00:21:23.940
And some of the sort of auxiliary things I needed to understand to make it work.

00:21:23.940 --> 00:21:24.980
Here's Scott.

00:21:24.980 --> 00:21:31.840
The most challenging problems I faced when learning to program in Python actually had nothing to do with the language itself.

00:21:31.840 --> 00:21:36.580
It had to do with the lack of discipline I had on my end when initially learning to code.

00:21:36.840 --> 00:21:44.400
I was more or less self-taught out of the gate with input from excellent mathematicians, economists, and a physicist.

00:21:45.540 --> 00:21:49.820
However, the code they wrote wasn't really geared for any sort of production environment.

00:21:49.820 --> 00:21:58.600
They were writing scripts to solve problems in isolation to deal with the certain situations in their realm rather than focusing on good practices.

00:21:58.600 --> 00:22:04.600
Needless to say, I developed some really bad habits, but I'm glad that it got me going.

00:22:04.640 --> 00:22:16.560
As I look back, I realize it's much easier to learn some bad habits while you're excited about learning than it is to sit down and learn something like a tuple is an immutable object, blah, blah, blah.

00:22:16.560 --> 00:22:19.400
But I'm sure there's some kind of balance in between.

00:22:19.400 --> 00:22:25.220
Due to the fact the previous work I was doing was almost exclusively surrounding functional programming,

00:22:25.680 --> 00:22:32.220
I still have to take back and remind myself there could be a better way to structure my code in an object-oriented way.

00:22:32.220 --> 00:22:38.360
This happens a lot when I start chaining functions together in an attempt to utilize drive principles.

00:22:38.360 --> 00:22:45.380
Nowadays, after I find myself overloading my overloaded functions with more overloaded functions,

00:22:45.380 --> 00:22:51.000
I tend to step back and hit the reset button rather than pushing on and regretting it later.

00:22:51.320 --> 00:22:57.320
That said, object-oriented programming still requires a conscious effort on my part.

00:22:57.320 --> 00:23:02.220
It's not super difficult by any means, but I still have to flip the switch.

00:23:02.220 --> 00:23:07.360
A related challenge basically surrounds how to best utilize design patterns.

00:23:07.360 --> 00:23:12.920
Breaking up my code in a logical, scalable, and easy-to-understand way is important,

00:23:12.920 --> 00:23:16.740
and it's not something that's easily researched.

00:23:16.740 --> 00:23:21.160
When you work with someone else who's already designed the patterns,

00:23:21.160 --> 00:23:23.080
they make a lot of sense.

00:23:23.080 --> 00:23:30.420
But coming up with how to structure your own code takes a while to develop the intuition and how to develop it.

00:23:30.420 --> 00:23:34.380
Everyone recommends the Gang of Four and the work by Brandon Rhodes.

00:23:34.380 --> 00:23:40.200
Those are really well done, but for me it just took time and experience to really figure out

00:23:40.200 --> 00:23:44.360
which of those patterns to use, how and when to use them,

00:23:44.360 --> 00:23:47.620
and it's something I really have to work on every day.

00:23:48.300 --> 00:23:52.420
Now the most important question I ask myself when writing code is,

00:23:52.420 --> 00:23:54.660
am I maximizing breakage?

00:23:54.660 --> 00:23:59.060
That's something you never want to do, and it tends to happen really easily.

00:23:59.060 --> 00:24:03.320
So as I've become more experienced, I can catch these things ahead of time,

00:24:03.320 --> 00:24:05.440
but it's definitely still a challenge for me.

00:24:08.120 --> 00:24:11.020
This portion of Talk Python To Me is brought to you by Linode.

00:24:11.020 --> 00:24:14.740
Are you looking for hosting that's fast, simple, and incredibly affordable?

00:24:14.740 --> 00:24:19.860
Well, look past that bookstore and check out Linode at talkpython.fm/Linode.

00:24:19.860 --> 00:24:21.740
That's L-I-N-O-D-E.

00:24:21.740 --> 00:24:26.160
Plans start at just $5 a month for a dedicated server with a gig of RAM.

00:24:26.160 --> 00:24:30.740
They have 10 data centers across the globe, so no matter where you are or where your users are,

00:24:30.740 --> 00:24:32.200
there's a data center for you.

00:24:32.200 --> 00:24:36.700
Whether you want to run a Python web app, host a private Git server, or just a file server,

00:24:36.700 --> 00:24:41.900
you'll get native SSDs on all the machines, a newly upgraded 200 gigabit network,

00:24:41.900 --> 00:24:46.640
24-7 friendly support even on holidays, and a 7-day money-back guarantee.

00:24:46.640 --> 00:24:48.240
Need a little help with your infrastructure?

00:24:48.240 --> 00:24:52.980
They even offer professional services to help you with architecture, migrations, and more.

00:24:52.980 --> 00:24:55.920
Do you want a dedicated server for free for the next four months?

00:24:55.920 --> 00:24:59.000
Just visit talkpython.fm/Linode.

00:24:59.000 --> 00:25:03.140
The next question I wanted to ask everybody was,

00:25:03.140 --> 00:25:07.120
what is the most surprising thing that you learned getting into programming?

00:25:07.120 --> 00:25:11.880
Things like, what did you expect that was going to be really hard, but actually turned out to be easy?

00:25:11.880 --> 00:25:14.960
Or what did you think was easy and actually is way harder?

00:25:14.960 --> 00:25:16.400
Now let's hear from Vanessa.

00:25:16.400 --> 00:25:21.180
When I first started learning programming, I thought it would be a bit of a check-the-box exercise.

00:25:21.180 --> 00:25:25.480
Like, okay, there's all these skills that I need to know, and programming is one I haven't done yet,

00:25:25.480 --> 00:25:29.000
so let me pick up a language and that will augment my skills.

00:25:29.000 --> 00:25:37.940
But instead, it's been really transformational to the core way I bring data in and analyze it every day,

00:25:37.940 --> 00:25:41.900
and the types of data that I'm now able to analyze.

00:25:41.900 --> 00:25:44.520
You know, for one thing, there's data that's too large.

00:25:44.520 --> 00:25:48.340
That's the reason I first got kicked off was because there was a file, a pressure file,

00:25:48.340 --> 00:25:53.420
that had pressure data every second for three months, and it was just too big to open in Excel.

00:25:53.420 --> 00:26:01.140
And so I used Python to open it and read it and plot it and refit it so that I could get the information out of it that I needed.

00:26:02.140 --> 00:26:12.480
But then I found that you can analyze image data and audio data and all types of data that I never even considered going through in Excel,

00:26:12.480 --> 00:26:20.600
and it really opens up a lot of ability for innovation if you're able to get down to that level where you're at the data source.

00:26:21.440 --> 00:26:28.060
Or, you know, just getting to be able to talk to the database is easier and pull in multiple sources and types of information

00:26:28.060 --> 00:26:31.820
allows you to be so much more creative than I could be in the past.

00:26:31.820 --> 00:26:34.480
And that's really resonated with other people as well.

00:26:34.480 --> 00:26:40.140
You know, I felt that my position as an advanced beginner meant I was in this really key position

00:26:40.140 --> 00:26:43.580
to be able to help bring other people along if they wanted to learn too.

00:26:44.120 --> 00:26:50.840
So I paired up with a much more experienced programmer, and together we've been putting on this training program

00:26:50.840 --> 00:26:53.820
that mirrors what I went through last year.

00:26:53.820 --> 00:26:58.600
And we kind of wanted to start with a small group of maybe 20 to 25 people,

00:26:58.600 --> 00:27:02.880
but we just kept thinking of people who we thought would want to do it, and they signed on,

00:27:02.880 --> 00:27:06.640
and now we've got a list of 60 people, and at some point I'm just going to have to cut it off.

00:27:06.640 --> 00:27:07.880
But it's really exciting.

00:27:08.380 --> 00:27:16.300
People across all kinds of disciplines from engineering, geology, geophysics, IT, facilities, finance.

00:27:16.300 --> 00:27:21.520
You know, we have this big multidisciplinary group that's all using Python and learning Python,

00:27:21.520 --> 00:27:24.860
and I'm really excited to see how they end up applying it to their jobs,

00:27:24.860 --> 00:27:28.220
because I really think it's a game changer in how you do your work.

00:27:28.220 --> 00:27:29.540
Now let's hear from Kelly.

00:27:29.540 --> 00:27:33.140
I think one of the most surprising things that I learned when getting into programming

00:27:33.140 --> 00:27:40.620
and introducing Python into our school was just how well the students got into Python.

00:27:40.620 --> 00:27:48.600
I think it's an amazing opportunity that we have here in order to give the students the tools

00:27:48.600 --> 00:27:51.620
that they will need in the future to solve great problems,

00:27:51.620 --> 00:27:58.520
and to be able to see the creativity that comes out from our students as they're learning to code.

00:27:58.520 --> 00:28:03.100
I didn't expect Python to be so versatile at first,

00:28:03.100 --> 00:28:08.440
and I think that is what has just really enlightened me

00:28:08.440 --> 00:28:11.260
and made us become a little bit of an addict for Python.

00:28:11.260 --> 00:28:16.920
Giving the students the opportunity to learn that Python can be used in web development,

00:28:16.920 --> 00:28:21.220
in scientific computations, in desktop applications, in robotics,

00:28:21.220 --> 00:28:23.540
in machine learning, in hardware programming.

00:28:24.180 --> 00:28:32.340
It's such a great opportunity instead of just programming in old school HTML and maybe C++ or something.

00:28:32.340 --> 00:28:37.260
But I think it's just this opportunity that Python provides our students

00:28:37.260 --> 00:28:41.060
in order to show them the libraries that are constantly being produced,

00:28:41.060 --> 00:28:47.180
the SciPy, NumPy, Pandas, in order to produce data science and to do machine learning

00:28:47.180 --> 00:28:55.540
and to show the students that you can use TensorFlow and create your own program in order to solve an issue.

00:28:55.540 --> 00:29:05.020
One of our students, he's actually using visual perception in order to help visually impaired people or person,

00:29:05.020 --> 00:29:11.260
a visually impaired person, maneuver their way in a new environment.

00:29:11.820 --> 00:29:14.720
And I think that's great that we can give them.

00:29:14.720 --> 00:29:19.940
So I think that that's one of the most surprising things that I learned from getting into programming with Python.

00:29:19.940 --> 00:29:21.580
It was efficient.

00:29:21.580 --> 00:29:23.140
It's versatile.

00:29:23.140 --> 00:29:24.340
It's easy.

00:29:24.340 --> 00:29:29.660
And it just allows the students to solve really good problems.

00:29:29.660 --> 00:29:30.640
Here's Dane.

00:29:31.360 --> 00:29:38.840
I think the first thing I was really surprised by when I got out of college and into my professional career was just the fear of open source in my industry.

00:29:38.840 --> 00:29:44.280
My first job was with a Fortune 500 company that was taking database entries, exporting them as a PDF,

00:29:44.280 --> 00:29:47.060
and then emailing one giant file out to supervisors.

00:29:47.060 --> 00:29:52.400
Instead of performing unique queries for each supervisor that only returned what they actually needed,

00:29:52.400 --> 00:29:59.420
they only did that to basically limit our access to the database because they didn't want us to accidentally mess it up

00:29:59.420 --> 00:30:02.100
or open up a security hole or something in it.

00:30:02.100 --> 00:30:07.120
They did payroll through a program that still used the DOS prompt, which took me back to my childhood,

00:30:07.120 --> 00:30:12.180
playing games like Where in the World is Carmen Sandiego or Oregon Trail on 5-inch floppy disks.

00:30:12.180 --> 00:30:16.780
Most of their enormous amounts of data was in Excel sheets on a company file server.

00:30:16.780 --> 00:30:19.760
It was so bad when they told us they were switching to SharePoint.

00:30:19.760 --> 00:30:22.140
I was actually pretty excited about the idea of it.

00:30:22.140 --> 00:30:28.000
I think open source languages have progressed to the point where writing your own codes and programs

00:30:28.000 --> 00:30:31.620
is like knowing how to write a spreadsheet formula was 10 years ago.

00:30:31.620 --> 00:30:37.480
And cutting that out of your business really limits what people with intimate knowledge of your systems are able to improve upon.

00:30:37.480 --> 00:30:42.960
The other surprise for me was kind of these companies' fear of giving any type of user authorization to us as employees.

00:30:42.960 --> 00:30:47.860
There was some sensitive data involved in my role, but it wasn't like I was working with customer accounts or anything

00:30:47.860 --> 00:30:49.800
that would have been really worth getting a hold of.

00:30:50.020 --> 00:30:55.880
Even if someone did manage to get a hold of the data I had access to, it wouldn't have made any sense to them at all.

00:30:55.880 --> 00:30:57.100
Don't get me wrong.

00:30:57.100 --> 00:31:04.400
One of the things I've always been afraid of and it still scares me about programming is potentially negligently opening some kind of security flaw,

00:31:04.400 --> 00:31:08.440
which is why I shy away from full app deployments or putting anything live on the web.

00:31:08.720 --> 00:31:14.400
But at the same time, I think that by taking that sort of whitelist over blacklist approach and not allowing access to anything,

00:31:14.400 --> 00:31:18.840
they cut their employees off from critical information because it was just too difficult to access.

00:31:18.840 --> 00:31:25.560
They shot themselves in the foot as a result by basically stifling innovation or personal projects at the individual employee level.

00:31:25.560 --> 00:31:31.240
And I think there were smart enough people there that if they had some sort of sandbox type environment for their employees to access,

00:31:31.240 --> 00:31:37.680
there could have been some really useful code made available through that process and would definitely help the company.

00:31:37.680 --> 00:31:42.320
It's crazy to me that the company was worried about those vulnerabilities because at the same time,

00:31:42.320 --> 00:31:45.540
they had password rules like the password must be eight characters.

00:31:45.540 --> 00:31:49.860
We weren't allowed capital letters or special characters and it had to be changed each month.

00:31:49.860 --> 00:31:55.980
It led to weak and repetitive passwords across the company where employees would do things like use the same four letters

00:31:55.980 --> 00:31:58.860
and then follow it up with an increasing number each month.

00:31:59.040 --> 00:32:02.720
I've looked into data breaches and cybersecurity a lot since getting into programming.

00:32:02.720 --> 00:32:06.740
It's never this company gave access to open source languages to their employees.

00:32:06.740 --> 00:32:10.480
It's always something like an SQL injection, a phishing attack.

00:32:10.480 --> 00:32:14.520
And that's kind of what ends up getting your data put out there into the world.

00:32:14.520 --> 00:32:20.040
It's funny to me that they felt that these specialized proprietary softwares were so much safer

00:32:20.040 --> 00:32:22.660
because I've heard Audidesk, the makers of Auditcad,

00:32:22.660 --> 00:32:25.500
and then called out multiple times in these discussions.

00:32:25.500 --> 00:32:27.280
It's generally not their fault.

00:32:27.280 --> 00:32:31.180
It's that these companies aren't being good about keeping these programs updated,

00:32:31.180 --> 00:32:34.160
making sure security updates are being rolled out.

00:32:34.160 --> 00:32:40.500
But these programs aren't any safer than open source if you have the same people kind of managing them

00:32:40.500 --> 00:32:43.140
and not updating them correctly like they're supposed to be.

00:32:43.140 --> 00:32:44.320
Here's Alexander.

00:32:44.780 --> 00:32:52.760
I would say the most surprising thing to me was the fact that the thought process for reading and writing code

00:32:52.760 --> 00:32:58.520
was similar to reading hydraulic schematics and analyzing systems.

00:32:58.520 --> 00:33:03.220
I was surprised that I was able to pick up the basic programming concepts the way I did,

00:33:03.220 --> 00:33:07.440
although object-oriented programming is taking some getting used to.

00:33:07.440 --> 00:33:11.140
But there are many great resources out there that have helped me through the process.

00:33:11.140 --> 00:33:16.280
You know, dealing with external libraries, that's really what presented the greatest challenge to me,

00:33:16.280 --> 00:33:17.700
especially UIs.

00:33:17.700 --> 00:33:22.240
I guess I need to just, you know, spend more time reading the documentation

00:33:22.240 --> 00:33:24.340
and maybe take some tutorials.

00:33:24.340 --> 00:33:29.820
I guess what I enjoy the most about all of this is the fact that I can solve problems

00:33:29.820 --> 00:33:33.420
and that I can create and build something.

00:33:33.420 --> 00:33:36.660
And that has probably been the most fulfilling part of this whole adventure.

00:33:36.660 --> 00:33:37.700
Here's Scott.

00:33:38.080 --> 00:33:41.300
The single most surprising thing I learned when getting into programming

00:33:41.300 --> 00:33:44.620
was coming to the realization that if you have a problem,

00:33:44.620 --> 00:33:47.500
chances are someone else has already solved it.

00:33:47.500 --> 00:33:51.960
And honestly, the amount of information out there is so vast, it's unbelievable.

00:33:51.960 --> 00:33:58.440
I think Stack Overflow has probably saved countless screens and keyboards from being broken

00:33:58.440 --> 00:34:00.300
by frustrated programmers.

00:34:00.300 --> 00:34:04.120
If I look back at it, finding answers versus asking questions

00:34:04.120 --> 00:34:09.080
is probably a 500 to 1 ratio for me, at least.

00:34:09.080 --> 00:34:11.120
And it's absolutely incredible.

00:34:11.120 --> 00:34:14.040
And I think it's really unique to the programming world.

00:34:14.040 --> 00:34:19.540
Once you learn to ignore the negativity and crazy self-centered egotistical stuff,

00:34:19.540 --> 00:34:22.380
you can really gain a lot from the help online.

00:34:22.380 --> 00:34:26.320
And it's been an overwhelmingly positive experience getting help.

00:34:26.320 --> 00:34:29.100
And I make sure to answer questions and give back as well.

00:34:29.100 --> 00:34:32.400
You know, the golden rule is still really important online.

00:34:32.400 --> 00:34:34.480
And it's not limited to anything online.

00:34:34.480 --> 00:34:40.060
There tends to be a programming community in every major city and probably plenty of rural

00:34:40.060 --> 00:34:40.780
cities as well.

00:34:40.780 --> 00:34:46.760
Finding a meetup group is easier than ever before and starting one yourself as well.

00:34:46.760 --> 00:34:49.260
There's a Python meetup here in Fort Collins.

00:34:49.260 --> 00:34:55.620
And the guy who runs it has dedicated office hours, which is a great idea where people can just

00:34:55.620 --> 00:34:58.760
come and talk about whatever Python issue they want to discuss.

00:34:59.240 --> 00:35:07.420
Between that and the data science meetup I run, I rarely have felt like I was the first person to ever

00:35:07.420 --> 00:35:08.540
attempt to solve a problem.

00:35:08.540 --> 00:35:14.400
I brought up issues with SQLAlchemy, Docker design patterns, you name it, and we've talked about it.

00:35:14.400 --> 00:35:19.820
And just going over it with other people tends to solve more than half of my problems anyway.

00:35:19.820 --> 00:35:25.100
Along those same lines, it's really easy to get started with things you find interesting.

00:35:25.200 --> 00:35:31.520
If you want to use a new package, it takes moments to jump online, find examples, find a tutorial, get your feet wet.

00:35:31.520 --> 00:35:38.180
Python and the open source community allow you to stand on the shoulders of giants and get started working on things you care about.

00:35:38.180 --> 00:35:42.940
And when you're working on things you care about, it doesn't feel like work anymore.

00:35:43.200 --> 00:35:44.420
Now let's hear from Jason.

00:35:44.420 --> 00:35:55.380
Okay, this is going to be a really specific initial answer, but one of the most surprising things I remember learning about Python was the night I figured out that a regular expression had to be handled with a class object.

00:35:55.380 --> 00:36:01.580
That was radical for me because I was used to doing regular expressions and pattern matching in Perl.

00:36:01.580 --> 00:36:10.380
And so when I was doing this with this Raspberry Pi project I was working on, I was downloading a whole bunch of information from Flickr and I had to do a regular expression on it.

00:36:10.380 --> 00:36:12.600
And it just blew my mind that it was an object.

00:36:12.600 --> 00:36:16.820
I don't know why it's not that big of a deal, but I just remember thinking, wow, this is weird.

00:36:16.900 --> 00:36:21.640
I have to create this search string and then pass it into an object using a class method.

00:36:21.640 --> 00:36:23.840
I just, it was really strange.

00:36:23.840 --> 00:36:25.760
Once I figured it out, it worked great.

00:36:25.760 --> 00:36:28.520
But that was something that just stood out in my mind as well.

00:36:28.520 --> 00:36:30.380
This was really a surprise to me.

00:36:30.380 --> 00:36:34.020
And I'm guessing there's a whole bunch of stuff like that that I've not even yet come across.

00:36:34.020 --> 00:36:41.980
One of the other things that for me, because of my background and a lot of this is all new, is I have to learn kind of a whole new development ecosystem.

00:36:42.160 --> 00:36:50.280
The whole kind of global ecosystem of how things are getting done today versus the way I kind of started my career.

00:36:50.280 --> 00:36:55.840
And so even just learning how to use GitHub effectively and play well as a community member there.

00:36:55.840 --> 00:37:01.940
The ideas of learning about continuous integration and how to get support with the things I'm trying to do.

00:37:01.940 --> 00:37:07.860
I'm trying to learn all these kind of new support technologies that are all there as part of the development ecosystem.

00:37:07.860 --> 00:37:12.060
And of course, everybody has their own sort of support network, right?

00:37:12.100 --> 00:37:17.960
Whether they're using Slack or they're using Gitter or they've got a Discord channel or they have their own forums.

00:37:17.960 --> 00:37:23.800
There's so many ways to sort of find and interact with people to try to get the help that you need.

00:37:23.800 --> 00:37:25.040
It's just a lot to learn.

00:37:25.040 --> 00:37:27.000
For me, this is just all new.

00:37:27.000 --> 00:37:28.240
I love it.

00:37:28.240 --> 00:37:29.460
It's been a lot of fun, actually.

00:37:29.460 --> 00:37:33.340
And I found that the community I'm interacting with, the people that I'm asking help from, they're great.

00:37:33.340 --> 00:37:35.020
And I've really, really enjoyed it.

00:37:35.020 --> 00:37:36.440
But it's new and it's interesting.

00:37:36.440 --> 00:37:46.200
And it's a little bit surprising how much there is out there to support this growing base or this huge base of developers all working on different stuff.

00:37:46.200 --> 00:37:47.260
It's been very cool.

00:37:47.260 --> 00:37:55.300
And of course, one of the things that's really fun about programming and being able to do this kind of development, though, is sort of the instant satisfaction that you can get from it.

00:37:55.360 --> 00:37:59.620
And it's an area I've always liked about programming, even going back to when I was doing it in college.

00:37:59.620 --> 00:38:02.560
You write something, you run it, and you see it, right?

00:38:02.560 --> 00:38:11.140
As opposed to developing boards or hardware, things that you may have to wait a long time to see it actually working directly or hold it in your hands and make it work.

00:38:11.220 --> 00:38:26.460
It's just a lot of fun to have something work immediately, whether it's web development or you're running microcontroller code and hardware, doing something in robotics, or even just making cool neopixels light up and create a really funky color pattern.

00:38:26.460 --> 00:38:30.840
It's something you can see happen right away and very fun.

00:38:30.840 --> 00:38:41.420
So the project I did on that Raspberry Pi, being able to get the help I needed, figure out how to write the Python code and actually have it work and do all the things I wanted to do, that was just very gratifying and a lot of fun.

00:38:41.420 --> 00:38:42.380
Here's Sergio.

00:38:42.380 --> 00:38:45.700
What is the most surprising thing you learned getting into programming?

00:38:45.700 --> 00:38:46.900
A few things.

00:38:46.900 --> 00:38:53.380
One, it's really hard to work with certain types of data, like PDFs.

00:38:53.380 --> 00:38:58.100
If I try to take text out of PDF, it's just impossible in general.

00:38:58.100 --> 00:38:59.420
It sucks.

00:38:59.420 --> 00:39:00.600
I can never get it to work.

00:39:00.820 --> 00:39:11.100
Working with time, that was really weird because we're so used to knowing what in five minutes or next year or two weeks ago is.

00:39:11.100 --> 00:39:13.340
If you tell someone, they'll understand right away.

00:39:13.340 --> 00:39:16.620
But try to explain the concept of time to a computer.

00:39:16.620 --> 00:39:17.940
That's impossible.

00:39:17.940 --> 00:39:19.640
I mean, I guess it's not impossible.

00:39:19.640 --> 00:39:20.600
People do it all the time.

00:39:20.600 --> 00:39:22.540
It's just really, really hard, at least for me.

00:39:22.540 --> 00:39:29.020
A really, really great positive surprise I got was how amazing the community is.

00:39:29.020 --> 00:39:30.700
Everyone seems so happy to.

00:39:30.800 --> 00:39:39.940
Share their resources and share their knowledge and tell you what you did wrong in a positive way and not call you stupid right away.

00:39:39.940 --> 00:39:41.080
At least in Python.

00:39:41.080 --> 00:39:45.780
I hear other communities might not be as great at that.

00:39:46.140 --> 00:39:52.520
But in Python, it seems like everyone has a blog or tutorial or willing to be like, hey, here's my code or actually you did this.

00:39:52.520 --> 00:39:55.420
This works, but maybe you should try this.

00:39:55.420 --> 00:39:56.460
It's a little bit more efficient.

00:39:57.020 --> 00:40:06.080
Because of that, you can learn a lot of things really fast.

00:40:06.080 --> 00:40:10.820
You can then learn very, very advanced techniques really quick.

00:40:10.820 --> 00:40:11.820
I started learning Python in Python.

00:40:11.820 --> 00:40:13.500
I started learning Python in 2017.

00:40:13.500 --> 00:40:14.440
I didn't know anything.

00:40:14.440 --> 00:40:19.040
And now I'll be presenting a tutorial on Pandas at PyCon 2019.

00:40:19.960 --> 00:40:20.960
In less than two years.

00:40:20.960 --> 00:40:27.480
I got from not knowing anything in Python to actually presenting a tutorial and teaching other people at PyCon.

00:40:27.680 --> 00:40:29.060
That's all because of the community.

00:40:29.060 --> 00:40:30.180
It's not just me.

00:40:30.180 --> 00:40:33.000
It's the free resources I receive from the community.

00:40:33.000 --> 00:40:35.480
The positive feedback I receive from the community.

00:40:35.480 --> 00:40:36.780
The Python community.

00:40:39.240 --> 00:40:42.260
This portion of Talk Python To Me is brought to you by Rollbar.

00:40:42.260 --> 00:40:43.680
Got a question for you.

00:40:43.680 --> 00:40:46.400
Have you been outsourcing your bug discovery to your users?

00:40:46.400 --> 00:40:49.040
Have you been making them send you bug reports?

00:40:49.040 --> 00:40:50.740
You know there's two problems with that.

00:40:50.740 --> 00:40:52.700
You can't discover all the bugs this way.

00:40:52.700 --> 00:40:55.260
And some users don't bother reporting bugs at all.

00:40:55.260 --> 00:40:56.200
They just leave.

00:40:56.200 --> 00:40:57.160
Sometimes forever.

00:40:57.160 --> 00:41:00.960
The best software teams practice proactive error monitoring.

00:41:00.960 --> 00:41:04.940
They detect all the errors in their production apps and services in real time.

00:41:04.940 --> 00:41:07.380
And debug important errors in minutes or hours.

00:41:07.640 --> 00:41:09.380
Sometimes before users even notice.

00:41:09.380 --> 00:41:14.460
Teams from companies like Twilio, Instacart, and CircleCI use Rollbar to do this.

00:41:14.460 --> 00:41:20.540
With Rollbar, you get a real-time feed of all the errors so you know exactly what's broken in production.

00:41:20.540 --> 00:41:27.720
And Rollbar automatically collects all the relevant data and metadata you need to debug the errors so you don't have to sift through logs.

00:41:27.720 --> 00:41:31.700
If you aren't using Rollbar yet, they have a special offer for you and it's really awesome.

00:41:31.700 --> 00:41:36.200
Sign up and install Rollbar at talkpython.fm/Rollbar.

00:41:36.760 --> 00:41:48.220
And Rollbar will send you a $100 gift card to use at the Open Collective where you can donate to any of the 900 plus projects listed under the Open Source Collective or to the Women Who Code organization.

00:41:48.220 --> 00:41:51.840
Get notified of errors in real time and make a difference in Open Source.

00:41:51.840 --> 00:41:54.760
Visit talkpython.fm/Rollbar today.

00:41:56.760 --> 00:42:02.440
The final question for everyone is, what is the best piece of advice you have received?

00:42:02.440 --> 00:42:04.120
Let's hear from our panelists.

00:42:04.120 --> 00:42:05.260
Here's Alexander.

00:42:05.260 --> 00:42:15.720
Some of the best advice that I've received so far is be curious, code every day, and don't give up when a challenge arises.

00:42:16.280 --> 00:42:24.300
I would say the most valuable piece of advice was during your podcast with Jay Miller when he said, merge your passions.

00:42:24.300 --> 00:42:30.320
You know, someone who tends to jump around and tries to learn too many things at once.

00:42:30.320 --> 00:42:34.240
What he said really spoke to me and it gave me direction.

00:42:34.240 --> 00:42:40.380
It made me realize that it is okay to be passionate about many things.

00:42:40.380 --> 00:42:42.660
And there are times when they can coexist.

00:42:42.660 --> 00:42:48.300
I guess it's kind of like writing books about your passions and interests.

00:42:48.300 --> 00:42:50.740
I guess the same could be said about programming.

00:42:50.740 --> 00:42:56.000
It could be another way of expressing that passion for something that is important to you.

00:42:56.240 --> 00:42:57.060
Here's Sergio.

00:42:57.060 --> 00:43:04.600
My mom has this saying, el conocimiento nos hace responsables, which translates to knowledge makes us responsible.

00:43:04.600 --> 00:43:08.920
And I always took that as, if you know something is wrong, you should do something about it.

00:43:08.920 --> 00:43:12.760
Or if you know you could help, you should.

00:43:12.760 --> 00:43:16.180
And that's going to make the world a better place in general.

00:43:16.180 --> 00:43:19.940
And that has driven me my whole life, I think.

00:43:19.940 --> 00:43:22.220
I was good at math.

00:43:22.560 --> 00:43:26.420
And growing up, it became a thing of how can I use math?

00:43:26.420 --> 00:43:27.440
And how can I use statistics?

00:43:27.440 --> 00:43:31.720
And how can I use this technical knowledge I know to help other people?

00:43:31.720 --> 00:43:36.160
And that drove me here to what I do of researching public policy.

00:43:36.160 --> 00:43:41.880
So I can, maybe I cannot draft the legislation myself, but I can help these people make the right decision.

00:43:41.880 --> 00:43:44.820
Or hopefully at least a more informed decision.

00:43:44.820 --> 00:43:51.220
And that's coupled with another advice, implicit advice my mom gave me of always keep learning.

00:43:51.220 --> 00:43:52.400
Never stop learning.

00:43:52.400 --> 00:43:55.640
You can always learn something new and you can always get better at something.

00:43:55.640 --> 00:43:59.140
And when you become better at certain things, you can share that knowledge.

00:43:59.140 --> 00:44:06.760
It doesn't cost anything for you to share your knowledge and make other people better at what they do or what they want to learn.

00:44:06.760 --> 00:44:09.220
More efficient at things.

00:44:09.680 --> 00:44:12.920
And it's just a positive thing for everyone.

00:44:12.920 --> 00:44:13.660
When we all learn.

00:44:13.660 --> 00:44:15.220
When we stay learning.

00:44:15.220 --> 00:44:17.020
And we get better at things.

00:44:17.020 --> 00:44:18.120
That's my advice.

00:44:18.120 --> 00:44:20.960
That's what I would tell someone that's starting.

00:44:20.960 --> 00:44:25.440
Or if I could tell my younger self or if I could tell anyone out there listening.

00:44:25.440 --> 00:44:28.120
Just don't stop learning.

00:44:28.120 --> 00:44:30.220
Because knowledge makes us responsible.

00:44:30.220 --> 00:44:31.840
It makes us all better.

00:44:31.840 --> 00:44:33.780
It makes us as a society better.

00:44:34.280 --> 00:44:35.060
It makes you better.

00:44:35.060 --> 00:44:36.200
It makes your family.

00:44:36.200 --> 00:44:37.960
Your neighbors.

00:44:37.960 --> 00:44:39.300
Your friends.

00:44:39.300 --> 00:44:40.760
Better off.

00:44:40.760 --> 00:44:42.100
Here's Dane.

00:44:42.700 --> 00:44:45.100
So I don't have a lot of close friends in the programming world.

00:44:45.100 --> 00:44:48.720
And a lot of engineering friends don't really have coding experience.

00:44:48.720 --> 00:44:51.060
So I don't get a lot of personalized advice on programming.

00:44:51.060 --> 00:44:57.360
One of the better pieces of general advice I've ever received was you don't have to approach every project like you're building a watch.

00:44:57.360 --> 00:44:59.720
It was referring to a construction process.

00:44:59.720 --> 00:45:03.080
But it's a principle I carried over to my programming work as well.

00:45:03.580 --> 00:45:08.900
There's no point in trying to recreate the request library because it doesn't have one function you think you need.

00:45:08.900 --> 00:45:16.980
Or if you have a process that takes seven steps, don't give up on the program entirely when you realize you can only automate about three of them.

00:45:16.980 --> 00:45:23.040
Even though those three steps will make your life a little bit easier, there's a good chance that later on you may be able to address the other four.

00:45:23.180 --> 00:45:29.100
And even until then, automating those three processes will definitely save you a lot of time in the long run.

00:45:29.100 --> 00:45:35.040
Some great advice I got while learning Python from online tutorials and just researching programming would be Google is your friend.

00:45:35.040 --> 00:45:47.660
Even if I'm trying to create a very specialized function, I've learned that I can boil that down into simpler parts and go on to places like Stack Overflow or just Googling the error codes I'm getting and find solutions that way.

00:45:47.660 --> 00:45:51.440
Tutorials give you a great intro into a wide range of libraries.

00:45:51.660 --> 00:45:58.940
And even if the end app wasn't exactly what I was trying to create, they still open the door for me to a lot of ideas to use later on.

00:45:58.940 --> 00:46:02.260
I've used a lot of Corey Schaefer's tutorials on YouTube.

00:46:02.260 --> 00:46:04.180
They're absolutely fantastic.

00:46:04.180 --> 00:46:07.180
They basically taught me a lot of what I know about programming.

00:46:07.180 --> 00:46:13.300
I switched over to PyTerm after hearing so many people recommending it at the end of this show.

00:46:13.300 --> 00:46:15.140
That's helped me tremendously.

00:46:15.140 --> 00:46:20.300
It's a great organizational system and it just makes everything so much easier.

00:46:20.300 --> 00:46:22.580
And you can use it to create small programs.

00:46:22.580 --> 00:46:23.740
You can access the terminal.

00:46:23.740 --> 00:46:25.340
It basically does everything I need.

00:46:25.340 --> 00:46:32.920
I think most importantly, the big lesson I learned was not to be intimidated by security concerns or things like that.

00:46:32.920 --> 00:46:35.220
Absolutely keep them in mind while coding.

00:46:35.220 --> 00:46:43.080
But there's plenty of ways to start out in a way that guarantees your primary day-to-day computer and personal information aren't getting exposed to anything you don't want them to accidentally.

00:46:44.020 --> 00:46:46.280
And again, Google is your friend as far as that.

00:46:46.280 --> 00:46:48.160
Thanks for having me on the show, Michael.

00:46:48.160 --> 00:46:50.300
I'm a huge fan and you're doing a great job.

00:46:50.300 --> 00:46:51.120
So keep it up.

00:46:51.120 --> 00:46:51.660
Thanks again.

00:46:51.660 --> 00:46:53.060
Now let's hear from Jason.

00:46:53.400 --> 00:47:00.780
I'm not sure I could really claim this is the best piece of advice I've ever received, but I thought this was really good.

00:47:01.120 --> 00:47:10.620
One of the managers I worked for about 10 years ago, a little less than 10 years ago, told me a story about when he first got hired to his first job out of college.

00:47:10.620 --> 00:47:17.260
And his boss told him, his manager said, listen, I want you to be very aggressive in the work that you do.

00:47:17.340 --> 00:47:24.100
I want you to continually push and push and push to the point where we need to tell you, hey, you're not allowed to make that decision.

00:47:24.100 --> 00:47:25.600
You're not allowed to do that.

00:47:25.600 --> 00:47:27.080
That's what I want from you.

00:47:27.080 --> 00:47:30.060
And that's kind of what he told me is he's like, I want you to take initiative.

00:47:30.060 --> 00:47:36.420
If you see something you think needs to get done, just do it and move forward and take care of the things you see that need to be taken care of.

00:47:36.420 --> 00:47:43.240
And if you step over the lines and you make a decision, you make a call that really wasn't yours to make, I'm not going to be upset with you about that.

00:47:43.240 --> 00:47:53.200
I'm just going to say, look, you aren't actually allowed to make that decision, but I'd always rather have you pushing hard like that than to be laying back and wondering whether or not you should do something.

00:47:53.200 --> 00:47:56.580
And generally speaking, I've had a really good success with that approach.

00:47:56.580 --> 00:48:01.280
And I was kind of wired like that a little bit anyway, historically in my career.

00:48:01.400 --> 00:48:13.120
But sort of being given that open door at that time really allowed me to say, hey, I'm just going to do these things that need to get done, whether that's technical or business related or creating marketing content or something.

00:48:13.120 --> 00:48:16.740
We just encourage people to take that approach.

00:48:16.740 --> 00:48:27.980
And generally speaking, and I've told this to my children as well, that if you're the person that's always going to see a need, get it done, take care of it, that usually is just going to probably work out for you in the long run.

00:48:28.220 --> 00:48:34.780
And every now and then you might get sat down and told, listen, you're not allowed to buy that or you're not allowed to make that call.

00:48:34.780 --> 00:48:35.780
And that's fine.

00:48:35.780 --> 00:48:42.640
Most employers would really rather have someone move in that direction than to just kind of sit back and wait for things to go.

00:48:42.640 --> 00:48:53.860
So as I was thinking about what is the best piece of advice I had been given, I really was thankful that he told me that story when he did and that I've kind of always been in to lean into that over the last number of years.

00:48:54.120 --> 00:49:05.600
And actually, Michael, as I've listened to the different episodes on Talk Python To Me, I've heard many times people come in and say, look, I wanted to introduce Python in my place of business or wherever I worked.

00:49:06.040 --> 00:49:09.120
And kind of waiting for permission that didn't come.

00:49:09.120 --> 00:49:14.280
And eventually they just said, well, I just went and solved a problem with it and fixed it, proved that it worked.

00:49:14.280 --> 00:49:18.100
And then that was the way that kind of Python ended up becoming the solution.

00:49:18.100 --> 00:49:21.720
And they ended up becoming the person that was able to do it and work on it.

00:49:21.720 --> 00:49:26.460
And I think that that just has played itself out in some of the examples with other guests you've had on this program.

00:49:26.680 --> 00:49:27.800
Now let's hear from Kelly.

00:49:27.800 --> 00:49:38.760
So the best piece of advice that I have received, I think that would be find a passion project in order to motivate me to keep me going with learning Python.

00:49:38.760 --> 00:49:46.580
Once you start learning the basics and you start playing around with the basics, you sometimes hit this little bit of a lull in the learning.

00:49:47.580 --> 00:49:52.600
And you end up doing the same thing over and over again because it's comfortable and easy.

00:49:52.600 --> 00:50:00.880
I remember I kept getting stuck into if else conditional loops because I work with the basics and a lot of the kids would always use these.

00:50:00.880 --> 00:50:08.420
And so when I was given the advice to pick a project, I was trying to avoid using the stuff that I already knew.

00:50:08.420 --> 00:50:16.800
And I think that really helped once you find something that you like or you're interested in and you try to find a problem that needs to be solved within that passion.

00:50:17.480 --> 00:50:21.240
And then sky's the limit on what you can find.

00:50:21.240 --> 00:50:23.920
We tend to do that with our students a lot.

00:50:23.920 --> 00:50:32.940
We give them 20% time project at the end of the quarter where they can pick something that they like to do outside of coding and see if they can solve a problem with that.

00:50:32.940 --> 00:50:36.820
Or just find something that they liked with coding and see if they can solve a problem with that.

00:50:37.280 --> 00:50:48.060
And what's really great is that you can take those large projects and you can break them down and chunk the project into smaller bits.

00:50:48.060 --> 00:50:54.860
And then you can see if you can find solutions that will help make that project better by searching online.

00:50:54.920 --> 00:51:00.680
One of my first projects was really getting into Matplotlib.

00:51:01.180 --> 00:51:09.320
And it was because I wanted to show some teachers that you could do a lot of graphing, easy graphing using Python.

00:51:09.320 --> 00:51:14.560
And so we worked a lot with learning different features of Matplotlib.

00:51:14.940 --> 00:51:21.040
And then having after that, I wanted to get into some collecting of big data in schools.

00:51:21.040 --> 00:51:29.040
We have lots of data on students with grades and external tests and other software that tests their knowledge.

00:51:29.040 --> 00:51:38.580
And so by looking at how I can use Python to aggregate that information in the database, I've been able to learn more about other libraries.

00:51:38.580 --> 00:51:43.040
I just found a library called Bokeh, B-O-K-E-H.

00:51:43.040 --> 00:51:49.700
And within that library, you can have a visualization in it.

00:51:49.700 --> 00:51:53.480
And it allows a different presentation with some data.

00:51:53.480 --> 00:51:58.420
So I'm hoping I can incorporate stuff like that into the situation.

00:51:58.420 --> 00:52:00.080
So that's the best advice I've been given.

00:52:00.080 --> 00:52:06.620
And it really helps you to get re-energized, especially when you're feeling a little bit overwhelmed.

00:52:06.620 --> 00:52:07.780
Here's Scott.

00:52:07.780 --> 00:52:14.820
The best piece of advice I've received, aside from happy wife, happy life, was from my dad.

00:52:14.820 --> 00:52:18.780
He used to say, if your feet are cold, put on a hat.

00:52:18.780 --> 00:52:24.300
And it stems from the fact that I grew up backpacking and spent a lot of time in the outdoors.

00:52:24.300 --> 00:52:27.380
He wanted my sister and I to learn survival skills.

00:52:27.800 --> 00:52:31.360
And one very important part to survival is staying warm.

00:52:31.720 --> 00:52:37.940
And the reason behind putting on a hat instead of socks is because you tend to lose more heat through your head.

00:52:37.940 --> 00:52:38.840
Pretty simple.

00:52:38.840 --> 00:52:42.160
And he didn't mean for that to extend to other parts of our lives.

00:52:42.160 --> 00:52:45.200
But it really has implications outside of survival.

00:52:45.200 --> 00:52:50.960
If you're ever stuck on a problem, it's tempting to do local fixes and slap on a band-aid.

00:52:50.960 --> 00:52:54.620
But if there are core issues, you really should put on a hat.

00:52:54.760 --> 00:53:00.080
And simply put, the most obvious solution isn't always the most effective one.

00:53:00.080 --> 00:53:04.280
And you should be thinking about better ways to solve your problems.

00:53:04.280 --> 00:53:07.040
There are a lot of examples of this in life.

00:53:07.040 --> 00:53:24.640
But one recent one I had when programming was working with a massive legacy code base that had some really nasty variable names in files that were 5,000 lines long and linked to raw data files that were created by 17 other files.

00:53:24.640 --> 00:53:31.600
And had variables like xy, y1, y2, y2a, that sort of thing.

00:53:32.200 --> 00:53:39.160
And so the first solution was to just rename everything, get it all into one place, and call it good.

00:53:39.160 --> 00:53:42.860
And honestly, that might be a first step.

00:53:42.860 --> 00:53:46.300
But the real problem is definitely deeper.

00:53:46.300 --> 00:53:53.740
Because if you have a y1, why do you need a y2 that's just a slightly modified y1?

00:53:53.740 --> 00:53:57.240
And then a y3, which is a slightly modified y2.

00:53:57.240 --> 00:53:59.000
And so on.

00:53:59.480 --> 00:54:10.140
We went back to the drawing board, found the earliest instances of all of these objects, and then created methods and manipulate it in a way that made a decent amount of sense.

00:54:10.140 --> 00:54:19.940
And so rather than recreating a mess with better naming conventions, we built something that followed best practices, moved forward, and became more sustainable.

00:54:19.940 --> 00:54:22.980
In other words, we put on a hat.

00:54:22.980 --> 00:54:24.700
Now let's hear from Vanessa.

00:54:24.700 --> 00:54:27.580
Best piece of advice that I received.

00:54:27.960 --> 00:54:30.620
Okay, they weren't actually talking to me precisely.

00:54:30.620 --> 00:54:33.360
But this was really, really impactful for me.

00:54:33.360 --> 00:54:39.320
So I was listening to a podcast called Becoming a Data Scientist by Renee Teat.

00:54:39.320 --> 00:54:42.720
Imagining, I just wanted to know what data science was.

00:54:42.720 --> 00:54:44.480
I'd started to hear about it, and I was curious.

00:54:44.480 --> 00:54:47.680
And the first guest she interviewed, his name was Will Kurt.

00:54:47.680 --> 00:54:49.740
And you should listen to the whole thing.

00:54:50.120 --> 00:54:56.120
But what I remember was specifically between minute 14 and 16, they have this conversation.

00:54:56.840 --> 00:55:01.020
And it goes something like, you know, she says, okay, you're from this non-traditional background.

00:55:01.020 --> 00:55:04.540
And, you know, when did you start really getting this stuff?

00:55:04.540 --> 00:55:05.960
And when did you stop feeling stupid?

00:55:07.140 --> 00:55:11.640
And his answer was, oh, well, I continually try to feel that way.

00:55:12.320 --> 00:55:16.260
And he talks about how, you know, when he did software engineering, he got really good at it.

00:55:16.260 --> 00:55:18.060
But that was actually a low point intellectually.

00:55:18.060 --> 00:55:25.540
And that if you're going to be a lifelong learner, one of the key things is that you have to be okay with continually feeling stupid.

00:55:25.980 --> 00:55:28.360
And that just flipped a switch for me somewhere.

00:55:28.360 --> 00:55:30.260
Because I had been trying to do these things.

00:55:30.260 --> 00:55:36.720
And if it led to me feeling dumb, I would just think, well, I can't do this, or I should quit, or I should stop.

00:55:36.720 --> 00:55:41.640
But to have someone say, no, if you feel stupid, that's part of it.

00:55:41.640 --> 00:55:42.380
You're doing it right.

00:55:42.380 --> 00:55:42.920
This is it.

00:55:42.920 --> 00:55:45.580
This is just what it feels like to be learning new things.

00:55:45.580 --> 00:55:53.020
For some reason, that helped me to just sit down and power through things and not feel self-conscious about the way that I was learning them.

00:55:53.520 --> 00:55:56.580
And allowed me to have a lot more success than I would have otherwise.

00:55:56.580 --> 00:55:58.200
Well, that's it.

00:55:58.200 --> 00:56:00.660
I just want to say a quick thank you to all of our panelists.

00:56:00.660 --> 00:56:02.700
It's been great to have you all on the show.

00:56:02.700 --> 00:56:05.980
And I hope all of you out there listening learned a lot from them.

00:56:05.980 --> 00:56:09.980
This has been another episode of Talk Python To Me.

00:56:09.980 --> 00:56:19.680
Our guests have been Vanessa Angel, Kelly Schuster-Paredes, Dane Parks, Scott Stoltzman, Sergio Sanchez, Alex Caprazi, and Jason Picour.

00:56:19.680 --> 00:56:22.820
And this episode has been brought to you by Linode and Rollbar.

00:56:22.820 --> 00:56:27.000
Linode is your go-to hosting for whatever you're building with Python.

00:56:27.000 --> 00:56:30.540
Get four months free at talkpython.fm/linode.

00:56:30.540 --> 00:56:32.460
That's L-I-N-O-D-E.

00:56:32.460 --> 00:56:35.340
Rollbar takes the pain out of errors.

00:56:35.340 --> 00:56:40.620
They give you the context and insight you need to quickly locate and fix errors that might have gone unnoticed.

00:56:40.620 --> 00:56:42.640
Until users complain, of course.

00:56:42.880 --> 00:56:49.100
Track a ridiculous number of errors for free as Talk Python To Me listeners at talkpython.fm/rollbar.

00:56:49.100 --> 00:56:51.400
Want to level up your Python?

00:56:51.400 --> 00:56:56.220
If you're just getting started, try my Python Jumpstart by Building 10 Apps course.

00:56:56.220 --> 00:57:04.380
Or if you're looking for something more advanced, check out our new async course that digs into all the different types of async programming you can do in Python.

00:57:04.600 --> 00:57:09.020
And of course, if you're interested in more than one of these, be sure to check out our Everything Bundle.

00:57:09.020 --> 00:57:10.920
It's like a subscription that never expires.

00:57:10.920 --> 00:57:13.220
Be sure to subscribe to the show.

00:57:13.220 --> 00:57:15.620
Open your favorite podcatcher and search for Python.

00:57:15.620 --> 00:57:16.840
We should be right at the top.

00:57:16.840 --> 00:57:21.680
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

00:57:21.680 --> 00:57:25.840
and the direct RSS feed at /rss on talkpython.fm.

00:57:26.360 --> 00:57:27.940
This is your host, Michael Kennedy.

00:57:27.940 --> 00:57:29.440
Thanks so much for listening.

00:57:29.440 --> 00:57:30.500
I really appreciate it.

00:57:30.500 --> 00:57:32.260
Now get out there and write some Python code.

00:57:32.260 --> 00:57:52.880
And I'll see you next time.

