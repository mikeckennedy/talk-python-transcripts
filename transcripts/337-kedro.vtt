WEBVTT

00:00:00.001 --> 00:00:06.020
Have you heard of Kedro? It's a Python framework for creating reproducible, maintainable, and modular data science code.

00:00:06.020 --> 00:00:10.980
We all know that reproducibility and related topics are important ones in the data science space.

00:00:10.980 --> 00:00:15.300
The freedom to pop open a notebook and just start exploring is much of the magic.

00:00:15.300 --> 00:00:22.340
Yet, that freeform style can lead to difficulties in versioning, reproducibility, collaboration, and moving to production.

00:00:22.340 --> 00:00:24.760
Solving these challenges is the goal of Kedro.

00:00:24.760 --> 00:00:28.500
And we have three great guests from the Kedro community here to give us the rundown.

00:00:28.500 --> 00:00:31.800
Yatunda Dada, Waylon Walker, and even Donov.

00:00:31.800 --> 00:00:37.140
This is Talk Python To Me, episode 337, recorded October 1st, 2021.

00:00:37.140 --> 00:00:53.640
Welcome to Talk Python To Me, a weekly podcast on Python.

00:00:53.640 --> 00:00:55.360
This is your host, Michael Kennedy.

00:00:55.520 --> 00:01:01.540
Follow me on Twitter where I'm @mkennedy, and keep up with the show and listen to past episodes at talkpython.fm.

00:01:01.540 --> 00:01:04.580
And follow the show on Twitter via at Talk Python.

00:01:04.580 --> 00:01:08.220
We've started streaming most of our episodes live on YouTube.

00:01:08.220 --> 00:01:15.760
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:16.560 --> 00:01:23.360
This episode is brought to you by Tab9, the editor plugin that enhances your autocomplete by learning how you write code.

00:01:23.360 --> 00:01:26.520
Us over at Talk Python training with our courses.

00:01:26.520 --> 00:01:29.540
And the transcripts are brought to you by Assembly AI.

00:01:29.540 --> 00:01:33.700
Yatunda, Ivan and Waylon, welcome to Talk Python To Me.

00:01:33.700 --> 00:01:35.060
Thank you so much for having us.

00:01:35.260 --> 00:01:36.540
Yeah, thank you for inviting us.

00:01:36.540 --> 00:01:37.140
Yes, thank you.

00:01:37.140 --> 00:01:38.800
Yeah, it's fantastic to have you all here.

00:01:38.800 --> 00:01:41.660
Let's start with just a little bit of your background.

00:01:41.660 --> 00:01:49.240
Since there's three of you, maybe not too long, but how do you all get into programming, Python, into this Kedro project and so on?

00:01:49.240 --> 00:01:50.200
Yatunda, you want to start with you?

00:01:50.200 --> 00:01:50.740
Sure.

00:01:50.740 --> 00:01:52.800
So I'm a principal product manager on Kedro.

00:01:52.800 --> 00:01:56.760
I've been with the project for actually exactly today, three years.

00:01:56.760 --> 00:01:58.240
Oh, nice.

00:01:58.240 --> 00:01:59.540
Three years and eight months.

00:01:59.600 --> 00:02:00.400
You've been there most of the time.

00:02:00.400 --> 00:02:00.940
That's fantastic.

00:02:00.940 --> 00:02:01.200
Yeah.

00:02:01.200 --> 00:02:03.420
Ivan has been there from the beginning, so he'll talk about that.

00:02:03.420 --> 00:02:08.600
My background is mechanical engineering, and I would have been a user of Kedro.

00:02:08.600 --> 00:02:12.500
We discovered, I think, one of the coolest user interviews I've ever done was with my former team.

00:02:12.500 --> 00:02:14.900
They picked it up on their own, which is amazing.

00:02:14.900 --> 00:02:15.640
Oh, nice.

00:02:15.640 --> 00:02:16.460
Ivan now.

00:02:16.460 --> 00:02:18.760
And I work at Quantum Black.

00:02:18.760 --> 00:02:20.780
That's the primary.

00:02:20.780 --> 00:02:21.400
Yeah, okay.

00:02:21.400 --> 00:02:21.700
Ivan?

00:02:21.700 --> 00:02:22.880
Yeah, so I'm Ivan.

00:02:22.880 --> 00:02:24.680
I'm a tech lead for Kedro.

00:02:24.680 --> 00:02:29.400
Started, like, have been working with Quantum Black for the last almost five years now.

00:02:29.720 --> 00:02:30.080
Is it?

00:02:30.080 --> 00:02:30.960
Yeah, five years.

00:02:30.960 --> 00:02:33.160
So you've been there from the beginning, as we hear.

00:02:33.160 --> 00:02:35.220
From the beginning for Kedro, not for the beginning.

00:02:35.220 --> 00:02:35.760
Yeah, yeah, yeah.

00:02:35.760 --> 00:02:36.240
That's what I, yeah.

00:02:36.240 --> 00:02:36.840
Quantum Black.

00:02:36.840 --> 00:02:37.120
Yeah.

00:02:37.120 --> 00:02:46.160
So initially, it was a small internal tool that was being developed by another two people on our team, Nikos and Aris.

00:02:46.160 --> 00:02:49.120
And then we decided to turn it into a product.

00:02:49.120 --> 00:02:53.180
And then we started from scratch and developed it into what it is.

00:02:53.180 --> 00:02:55.840
Then we found out that things can get serious.

00:02:55.840 --> 00:02:59.360
And then that's how we hired Yetu, because we needed a PM as well.

00:03:00.260 --> 00:03:01.580
As a proper product.

00:03:01.580 --> 00:03:06.480
Otherwise, my background is in software engineering, all kinds of software engineering.

00:03:06.480 --> 00:03:08.260
Started off as web developer.

00:03:08.260 --> 00:03:13.340
I was very keen to do some game programming before that, but I couldn't find jobs related to that.

00:03:13.340 --> 00:03:18.440
A lot of people are interested in doing game programming until you actually get into the reality of it.

00:03:18.440 --> 00:03:23.080
And the reality is, a lot of times it can be a grind and it's hard to get a job.

00:03:23.320 --> 00:03:28.060
I was going to say that I'm quite lucky that I didn't end up being a game programmer.

00:03:28.060 --> 00:03:29.560
It's not the first time I heard that.

00:03:29.560 --> 00:03:30.020
That's right.

00:03:30.020 --> 00:03:30.300
Yeah.

00:03:30.300 --> 00:03:30.740
Yeah.

00:03:30.740 --> 00:03:38.980
So then, yeah, I moved on to distributed systems and I ended up doing data and AI at QB mainly.

00:03:38.980 --> 00:03:45.580
So I'm kind of a newbie in the data field, but being there for five years, kind of newbie.

00:03:45.580 --> 00:03:49.220
A lot of people are in that realm, right?

00:03:49.220 --> 00:03:52.460
A lot of people are coming into the whole data science side of things.

00:03:52.460 --> 00:03:53.340
Waylon, how about you?

00:03:53.400 --> 00:03:55.340
My background is in mechanical engineering.

00:03:55.340 --> 00:04:01.880
Probably around 2014, I started diving deeper into the data side of things.

00:04:01.880 --> 00:04:08.300
I had some family medical things that came up and it kind of severely limited my ability to travel.

00:04:08.300 --> 00:04:13.240
And slowly over time, I just kind of doubled down into the side of things.

00:04:13.240 --> 00:04:13.540
Yeah.

00:04:13.540 --> 00:04:15.420
It was right around the time you started the show.

00:04:15.760 --> 00:04:24.440
And a lot of what I've learned has either been directly from this show or from like taking ideas from the show and diving into them.

00:04:24.440 --> 00:04:25.140
Oh, awesome.

00:04:25.140 --> 00:04:25.900
That's really cool.

00:04:25.900 --> 00:04:27.200
Happy to bring that to you.

00:04:27.200 --> 00:04:33.280
I think a lot of people who come from backgrounds that they're not like traditional CS backgrounds, right?

00:04:33.280 --> 00:04:34.860
They're kind of coming in through a side channel.

00:04:34.860 --> 00:04:44.140
I feel like the podcast has offered a lot of connection and extra information besides just what's on like the docs page of some projects for people, which is great.

00:04:44.140 --> 00:04:44.840
It's awesome to hear.

00:04:45.000 --> 00:04:50.780
So now I'm a team lead for a data science team and do Python every day.

00:04:50.780 --> 00:04:55.020
And we use Kedro pretty heavily in all of our projects.

00:04:55.020 --> 00:05:06.460
So before we move on to the topic, give me a quick thought on comparing mechanical engineering work life experience to software development, Python developer experience.

00:05:06.460 --> 00:05:08.460
How do you feel about where you are?

00:05:08.460 --> 00:05:09.500
I like where I'm at.

00:05:09.640 --> 00:05:16.120
One thing that I kind of struggled with in mechanical engineering was there was a lot of learning in college.

00:05:16.120 --> 00:05:17.840
There was a lot of things to learn.

00:05:17.840 --> 00:05:22.320
And then you get an industry and everything's kind of like walled off.

00:05:22.320 --> 00:05:26.500
And the learning doesn't completely stop, but it's very hard to do.

00:05:26.560 --> 00:05:31.100
You know, on the software side, a lot more things are open to learn.

00:05:31.100 --> 00:05:39.960
There's a lot more resources that are just out there in the open and not like behind proprietary IP patents and all that kind of stuff.

00:05:39.960 --> 00:05:41.760
I think that works really well for me.

00:05:41.760 --> 00:05:42.840
I'm a learner.

00:05:42.840 --> 00:05:45.220
I don't remember the, is it Galt?

00:05:45.220 --> 00:05:48.140
The personality study kind of things.

00:05:48.140 --> 00:05:48.420
Yeah.

00:05:48.420 --> 00:05:51.340
Always come out with learner is like the top thing for me.

00:05:51.340 --> 00:05:51.620
Nice.

00:05:51.620 --> 00:05:51.880
Yeah.

00:05:51.880 --> 00:05:52.580
So it's a good fit.

00:05:52.580 --> 00:05:52.740
Yeah.

00:05:52.740 --> 00:06:04.200
If you don't like to continually learn and continues, continually kind of reinvent yourself, then software is probably a data science is probably not a super awesome place because the life cycle of these things.

00:06:04.200 --> 00:06:06.280
I mean, if you want to take it to the extreme, you could do JavaScript.

00:06:06.280 --> 00:06:11.940
But most of us, we have like at least a year on the technology before we move on.

00:06:11.940 --> 00:06:12.140
Yeah.

00:06:12.140 --> 00:06:12.480
All right.

00:06:12.480 --> 00:06:17.240
Now, speaking of that, let's go ahead and get into our main topic here.

00:06:17.240 --> 00:06:22.940
And I want to kick this off by talking about reproducible and maintainable data science.

00:06:22.940 --> 00:06:34.500
So a little bit like engineering, people are coming to data science from these different angles, a lot of times from computational stuff, from biology or from finance and economics or whatever.

00:06:34.500 --> 00:06:41.540
And they don't necessarily come with a full baked set of, oh, here's the software engineering lifecycle skill set.

00:06:41.540 --> 00:06:43.240
Here's how I set up my continuous integration.

00:06:43.240 --> 00:06:44.220
Here's my testing.

00:06:44.220 --> 00:06:46.240
And like a lot of times it's like, look, I got it working.

00:06:46.240 --> 00:06:46.960
We're kind of good.

00:06:46.960 --> 00:06:47.620
You know what I mean?

00:06:47.620 --> 00:07:02.420
I think one of the areas the whole data science field is working with is taking a lot of these folks who are coming from non-traditional CS backgrounds and helping them create more reproducible, reusable bits of code, notebooks, maybe even code outside notebooks.

00:07:02.660 --> 00:07:05.220
So let's maybe open the conversation there

00:07:05.220 --> 00:07:07.320
because that's where Kedro focuses

00:07:07.320 --> 00:07:10.400
on helping data scientists create reproducible,

00:07:10.400 --> 00:07:11.300
maintainable code.

00:07:11.300 --> 00:07:13.400
Eutunde, do you want to maybe kick us off

00:07:13.400 --> 00:07:17.440
with some thoughts on where Kedro's philosophy is on this?

00:07:17.440 --> 00:07:19.620
So I guess if we actually break it down,

00:07:19.620 --> 00:07:21.580
it's a Python framework that helps you

00:07:21.580 --> 00:07:22.900
do those specific things.

00:07:22.900 --> 00:07:24.640
And when we talk about it being a framework,

00:07:24.640 --> 00:07:27.080
it's kind of embedded with best practices

00:07:27.080 --> 00:07:30.980
and ways of structuring how you write code

00:07:30.980 --> 00:07:33.120
so that you can get those reproducible,

00:07:33.120 --> 00:07:35.020
maintainable, and modular data science code.

00:07:35.020 --> 00:07:36.900
But if I go into each one of the definitions,

00:07:36.900 --> 00:07:39.760
when we say reproducible, we kind of mean that

00:07:39.760 --> 00:07:43.620
when I rerun this pipeline or rerun this experiment,

00:07:43.620 --> 00:07:45.680
I should get the same result at the end.

00:07:45.680 --> 00:07:47.720
So there shouldn't be any real surprises

00:07:47.720 --> 00:07:50.060
that things have really changed or things are really breaking.

00:07:50.060 --> 00:07:52.240
When we talk about it being maintainable,

00:07:52.240 --> 00:07:55.080
we now also add in an aspect of collaboration,

00:07:55.080 --> 00:07:58.400
even for yourself, that if you come back to this code base

00:07:58.400 --> 00:08:00.780
like three months from now or six months from now,

00:08:00.960 --> 00:08:02.960
you should be able to know what was going on in it

00:08:02.960 --> 00:08:05.400
and be able to modify and tweak it.

00:08:05.400 --> 00:08:07.620
And other people should be able to do that with you too.

00:08:07.620 --> 00:08:10.060
It's not really, it shouldn't be the biggest disaster

00:08:10.060 --> 00:08:13.780
if the main code contributor has left

00:08:13.780 --> 00:08:15.800
and you now have to try, scramble to figure out

00:08:15.800 --> 00:08:16.600
what's going on there.

00:08:16.600 --> 00:08:18.680
And then when we talk about it being modular,

00:08:18.680 --> 00:08:21.600
this is where we encompass some of the software engineering principles

00:08:21.600 --> 00:08:24.260
that you wouldn't ordinarily learn in,

00:08:24.260 --> 00:08:27.640
maybe if you enter data science from the mathematician space

00:08:27.640 --> 00:08:29.420
or even from the sciences,

00:08:29.420 --> 00:08:34.500
where we think about you being able to break your code base down into small units

00:08:34.500 --> 00:08:37.340
so that it's possible to think about things like reuse,

00:08:37.340 --> 00:08:40.520
but also it's easier to do things like testing the code base as well.

00:08:40.520 --> 00:08:42.900
All of these things like basically amount to

00:08:42.900 --> 00:08:46.100
trying to enforce like software engineering best practice,

00:08:46.100 --> 00:08:49.440
especially where you recognize that you might need help with that.

00:08:49.680 --> 00:08:56.060
One of the other areas that I've seen a lot of emphasis on the project about is collaboration.

00:08:56.060 --> 00:09:01.140
And one of the things that can be challenging is if you're a data scientist working on a notebook,

00:09:01.140 --> 00:09:05.340
you might run some cells, maybe on data that is live.

00:09:05.340 --> 00:09:07.000
And so the data might be slightly changing.

00:09:07.000 --> 00:09:10.080
You check that into GitHub or source control.

00:09:10.320 --> 00:09:16.180
You've got the results in sort of a scrambled up JSON file notebook,

00:09:16.180 --> 00:09:19.480
and then someone else has rerun it at a different time,

00:09:19.480 --> 00:09:20.600
and then they try to check it out.

00:09:20.600 --> 00:09:23.760
Well, you know, you end up with these conflicts and other issues.

00:09:23.760 --> 00:09:25.800
So the sort of natural flow of,

00:09:25.800 --> 00:09:28.040
hey, let's just check everything into Git,

00:09:28.040 --> 00:09:29.980
and then we'll just synchronize over that

00:09:29.980 --> 00:09:33.980
can sort of fall apart with some of the traditional tooling of data science.

00:09:33.980 --> 00:09:35.220
And that's definitely true.

00:09:35.220 --> 00:09:39.580
I think Kydra's origins actually come from large teams,

00:09:39.580 --> 00:09:44.580
upwards of like at least three or four data scientists and data engineers,

00:09:44.580 --> 00:09:47.200
machine learning engineers collaborating on the same code base,

00:09:47.200 --> 00:09:50.540
upwards of, you know, to 12 people having to work on the same code base.

00:09:50.540 --> 00:09:54.600
If you're using Jupyter Notebook and trying to construct your entire pipeline in it,

00:09:54.600 --> 00:09:58.040
I think the workflow would look kind of strange with you waiting.

00:09:58.040 --> 00:10:02.560
Maybe Waylon has some comment on like watching this in practice of,

00:10:02.560 --> 00:10:04.800
you know, waiting for someone to finish in the Jupyter Notebook

00:10:04.800 --> 00:10:07.240
before you could have a go at it and try your things.

00:10:07.240 --> 00:10:08.880
During our engagement with McKinsey,

00:10:08.880 --> 00:10:12.780
we were introduced to Kedro during kind of the first iteration.

00:10:12.780 --> 00:10:14.120
Yeah, and Waylon, by the way,

00:10:14.120 --> 00:10:16.180
we've only talked about Quantum Black so far,

00:10:16.180 --> 00:10:18.860
but Quantum Black is like a subsidiary of McKinsey.

00:10:18.860 --> 00:10:20.080
So yeah, right.

00:10:20.080 --> 00:10:23.400
This is all sort of the same organization in a sense, right?

00:10:23.400 --> 00:10:25.420
So that's why this is coming together, yeah?

00:10:25.420 --> 00:10:26.060
Yeah, good point.

00:10:26.060 --> 00:10:27.580
But so the second half,

00:10:27.580 --> 00:10:29.580
they chose like just due to familiarity,

00:10:29.580 --> 00:10:31.560
the people that we had with us,

00:10:31.640 --> 00:10:33.740
it was their first time using Kedro.

00:10:33.740 --> 00:10:37.080
And they're like, well, if we want to move fast on the second half,

00:10:37.080 --> 00:10:38.880
let's not try to do anything new.

00:10:38.880 --> 00:10:41.320
And let's just do notebooks like we always had.

00:10:41.320 --> 00:10:43.020
Right, fall back to what they know sort of thing.

00:10:43.020 --> 00:10:46.400
Yeah, and the workflow there was definitely like

00:10:46.400 --> 00:10:47.980
three people are on a project,

00:10:47.980 --> 00:10:49.640
two people are sitting idle

00:10:49.640 --> 00:10:51.840
while one person has the notebook checked out.

00:10:51.840 --> 00:10:52.500
Oh my gosh.

00:10:52.500 --> 00:10:55.900
That sounds like old school source safe type source control.

00:10:55.900 --> 00:10:58.280
Someone's locked the files, no one else can edit it.

00:10:58.440 --> 00:11:01.700
Like that's just, it's completely 1990s style, right?

00:11:01.700 --> 00:11:02.460
But it's a real problem.

00:11:02.460 --> 00:11:03.880
I mean, some of these things are,

00:11:03.880 --> 00:11:06.000
there's an attempt to address them

00:11:06.000 --> 00:11:07.500
by having collaborative notebooks,

00:11:07.500 --> 00:11:10.160
basically Google Docs type of experiences, right?

00:11:10.160 --> 00:11:12.920
But usually those are in somebody else's cloud,

00:11:12.920 --> 00:11:14.120
somebody else's compute cloud.

00:11:14.120 --> 00:11:15.940
And so you're taking the trade-offs

00:11:15.940 --> 00:11:17.680
of running it over there, right?

00:11:17.880 --> 00:11:19.540
Yeah, and there's multiple things

00:11:19.540 --> 00:11:20.700
I think you're missing out on.

00:11:20.700 --> 00:11:23.140
When we talk about even making a robust code base,

00:11:23.140 --> 00:11:25.200
writing unit tests in a notebook,

00:11:25.200 --> 00:11:27.000
writing doc strings in a notebook

00:11:27.000 --> 00:11:28.220
becomes a little challenging.

00:11:28.220 --> 00:11:31.360
And then we think about all the additional tools

00:11:31.360 --> 00:11:32.760
that you have to add for collaboration.

00:11:32.760 --> 00:11:34.380
How am I going to do pull requests

00:11:34.380 --> 00:11:35.760
and review my friend's code?

00:11:35.760 --> 00:11:37.160
Because we know the way that

00:11:37.160 --> 00:11:38.880
when you check in a Jupyter notebook,

00:11:38.880 --> 00:11:40.980
it's often with the weird Jason thing.

00:11:40.980 --> 00:11:43.540
So how do I do reviews of my team members' code

00:11:43.540 --> 00:11:45.660
so we can overall improve the code base?

00:11:45.980 --> 00:11:47.780
And then some of the features as well

00:11:47.780 --> 00:11:50.940
within notebooks like cache state as well

00:11:50.940 --> 00:11:52.200
cause issues down the line

00:11:52.200 --> 00:11:55.040
because I might be working on a version of my code

00:11:55.040 --> 00:11:57.040
that when I rerun my entire Jupyter notebook,

00:11:57.040 --> 00:11:58.160
not everything will run.

00:11:58.160 --> 00:12:01.460
So it's not necessarily down with the notebooks

00:12:01.460 --> 00:12:02.440
or anything, for sure.

00:12:02.440 --> 00:12:04.880
We believe that there's a space for them really

00:12:04.880 --> 00:12:07.620
for maybe doing exploratory data analysis,

00:12:07.620 --> 00:12:09.660
trying to work out what's going on with the data set.

00:12:09.660 --> 00:12:10.680
There's space for it

00:12:10.680 --> 00:12:12.460
with initial pipeline development as well

00:12:12.460 --> 00:12:13.460
if you're still prototyping

00:12:13.460 --> 00:12:15.280
and you're not sure how things are going to go.

00:12:15.780 --> 00:12:17.140
And then even for reporting maybe,

00:12:17.140 --> 00:12:19.600
if you want like a more visual interface for reporting.

00:12:19.600 --> 00:12:22.260
But when you talk about like code

00:12:22.260 --> 00:12:24.220
that I want to be able to run in three months,

00:12:24.220 --> 00:12:26.160
six months, and many people will be using,

00:12:26.160 --> 00:12:27.760
it has to be in Python script

00:12:27.760 --> 00:12:30.060
and it's supported when it's in the framework.

00:12:30.060 --> 00:12:31.360
Yeah, I think that's a good point.

00:12:31.360 --> 00:12:34.660
You can definitely start in the notebook space

00:12:34.660 --> 00:12:36.260
and then eventually move it over.

00:12:36.260 --> 00:12:39.120
Now, one thing I do want to give a shout out to,

00:12:39.120 --> 00:12:40.800
I don't remember the name,

00:12:40.860 --> 00:12:43.300
but you can set up a Git pre-commit hook

00:12:43.300 --> 00:12:46.240
that will strip out the metadata,

00:12:46.240 --> 00:12:48.260
the results of your notebook.

00:12:48.260 --> 00:12:50.460
So that's kind of a fix,

00:12:50.460 --> 00:12:52.440
but it's still, you know, it's not that amazing.

00:12:52.440 --> 00:12:55.760
The other thing, you talked about reproducibility.

00:12:55.760 --> 00:12:57.760
One of the things that troubles me,

00:12:57.760 --> 00:12:59.900
and I'm a fan of notebooks and I like it.

00:12:59.900 --> 00:13:02.140
And I just on Python Bytes podcast,

00:13:02.140 --> 00:13:04.040
we just talked about how JupyterLab

00:13:04.040 --> 00:13:05.540
is now a desktop application.

00:13:05.740 --> 00:13:07.400
they just released that like this week,

00:13:07.400 --> 00:13:08.240
which is really cool.

00:13:08.240 --> 00:13:09.440
So there's a lot of neat stuff

00:13:09.440 --> 00:13:10.300
happening around notebooks.

00:13:10.300 --> 00:13:13.560
One of the things that I'm not a big fan of though,

00:13:13.560 --> 00:13:16.500
is the ability to reorder execution

00:13:16.500 --> 00:13:19.120
or only execute part of it, right?

00:13:19.120 --> 00:13:20.280
There's a lot of benefits to say,

00:13:20.280 --> 00:13:21.920
run the cell that computes the data

00:13:21.920 --> 00:13:22.880
that's really expensive.

00:13:22.880 --> 00:13:24.760
And then run this,

00:13:24.760 --> 00:13:26.760
no, make, go back three cells,

00:13:26.760 --> 00:13:28.140
make a change here, run this one,

00:13:28.140 --> 00:13:31.040
and then go back down four cells and run that one.

00:13:31.040 --> 00:13:35.280
And it's kind of like a go-to with no explanation.

00:13:35.280 --> 00:13:36.240
Right?

00:13:36.240 --> 00:13:38.820
Where you can jump around in different orders.

00:13:38.820 --> 00:13:42.120
And that certainly doesn't lead to reproducibility

00:13:42.120 --> 00:13:45.720
when it's up to the human's decision of like,

00:13:45.720 --> 00:13:47.700
I decided I felt like I wanted to make a tweak

00:13:47.700 --> 00:13:48.720
and rerun that one.

00:13:48.720 --> 00:13:51.240
And I forgot to run the intermediate step that used that.

00:13:51.240 --> 00:13:54.460
It's very problematic for long-term reliability,

00:13:54.460 --> 00:13:55.920
reproducibility, and so on.

00:13:55.920 --> 00:13:57.200
There's quite a few studies, I think,

00:13:57.200 --> 00:14:00.140
where people have tried to rerun notebooks.

00:14:00.140 --> 00:14:03.580
There's one by NYU, I think back in 2020 or 2019,

00:14:03.580 --> 00:14:04.960
where they rerun like,

00:14:04.960 --> 00:14:07.280
I think over like 80,000 notebooks.

00:14:07.280 --> 00:14:10.620
And only 24% of them completed without error.

00:14:10.620 --> 00:14:15.400
But there's a very small part of that

00:14:15.400 --> 00:14:16.840
that had the same result

00:14:16.840 --> 00:14:18.680
when the notebook was finished running.

00:14:18.680 --> 00:14:19.020
Yeah.

00:14:19.020 --> 00:14:19.560
Wow.

00:14:19.560 --> 00:14:20.440
Very interesting.

00:14:20.620 --> 00:14:24.460
The other part that Kedro has is the versioned datasets.

00:14:24.460 --> 00:14:27.800
So not only like just running the code itself,

00:14:27.800 --> 00:14:30.940
but you can check out like an exact version of the code

00:14:30.940 --> 00:14:34.040
or the version of the data that was ran last time.

00:14:34.040 --> 00:14:34.420
Okay.

00:14:34.420 --> 00:14:36.620
So you sort of store the data as well?

00:14:36.620 --> 00:14:41.220
Like instead of just versioning just the source code or the notebook,

00:14:41.220 --> 00:14:42.600
you also version the data?

00:14:42.600 --> 00:14:42.900
Yep.

00:14:42.900 --> 00:14:45.860
That's an option as you're creating your catalog entries.

00:14:45.860 --> 00:14:48.740
You can, it's as simple as just putting versioned equals true

00:14:48.740 --> 00:14:50.560
pretty much on most of the datasets.

00:14:50.560 --> 00:14:51.820
Oh, that's really cool.

00:14:51.820 --> 00:14:54.880
Ivan, how about your thoughts on this reproducibility,

00:14:54.880 --> 00:14:57.500
maintainability side of data science?

00:14:57.500 --> 00:14:59.800
That's essentially why we started Kedro

00:14:59.800 --> 00:15:03.600
because here at QB, when we were going to clients

00:15:03.600 --> 00:15:05.440
and we needed to be able to,

00:15:05.440 --> 00:15:07.920
if anyone has worked at Consonance,

00:15:07.920 --> 00:15:09.920
you know that sometimes you need to rotate people,

00:15:09.920 --> 00:15:11.880
you need to move people from one place to another.

00:15:11.880 --> 00:15:14.020
And the pace is quite high.

00:15:14.020 --> 00:15:17.040
And when people end up in a, like in the midway,

00:15:17.040 --> 00:15:18.960
like in the middle of a project,

00:15:18.960 --> 00:15:21.840
there is quite a long onboarding time,

00:15:21.840 --> 00:15:24.560
which is probably a week or more than that.

00:15:24.560 --> 00:15:26.400
And that's super expensive for a client

00:15:26.400 --> 00:15:27.800
to pay for one extra person

00:15:27.800 --> 00:15:30.460
just to read the code that was written to that point.

00:15:30.460 --> 00:15:32.360
Moreover, when you hand over code,

00:15:32.360 --> 00:15:33.580
it can be just notebooks.

00:15:33.580 --> 00:15:36.360
So we ended up resorting to,

00:15:36.360 --> 00:15:37.740
okay, having different stages

00:15:37.740 --> 00:15:39.500
where you do things in notebooks,

00:15:39.500 --> 00:15:40.660
then you need to convert them

00:15:40.660 --> 00:15:42.780
in another programming language.

00:15:42.780 --> 00:15:44.860
And then you have an extra person doing that.

00:15:44.860 --> 00:15:47.180
And obviously that conversion wasn't done

00:15:47.180 --> 00:15:50.360
due to the limited time in the best way possible.

00:15:50.360 --> 00:15:53.700
So it was quite hard to have this,

00:15:53.700 --> 00:15:55.860
you know, workflow of making a reproducibility

00:15:55.860 --> 00:16:00.380
reproducible code without sacrificing speed and agility.

00:16:00.380 --> 00:16:01.660
And out of that need,

00:16:01.660 --> 00:16:04.400
that was how the initial versions of Kedro were born.

00:16:04.400 --> 00:16:06.940
I think notebooks are super useful as well,

00:16:06.940 --> 00:16:09.920
like, but they are definitely not for production code.

00:16:09.920 --> 00:16:10.860
They're for exploring,

00:16:10.860 --> 00:16:14.180
for trying out, doing some different things,

00:16:14.180 --> 00:16:16.240
just basically a working session.

00:16:16.240 --> 00:16:18.560
And I like the name notebook

00:16:18.560 --> 00:16:19.840
because it's essentially,

00:16:19.840 --> 00:16:22.240
you're just catching things in a notebook.

00:16:22.460 --> 00:16:25.340
The thing is that what we see is people end up

00:16:25.340 --> 00:16:26.680
using those in production.

00:16:26.680 --> 00:16:29.840
And I think that makes it hard.

00:16:29.840 --> 00:16:30.820
You already explained,

00:16:30.820 --> 00:16:32.900
like all of you mentioned some of the issues.

00:16:32.900 --> 00:16:35.100
How do you manage that?

00:16:35.100 --> 00:16:37.060
And how do you deal with credentials,

00:16:37.060 --> 00:16:38.140
with traditional stuff?

00:16:38.140 --> 00:16:39.020
And for me,

00:16:39.020 --> 00:16:41.200
when I was coming from different software background,

00:16:41.200 --> 00:16:42.840
joining a data company,

00:16:42.840 --> 00:16:43.720
and I was like,

00:16:43.720 --> 00:16:45.300
where are the frameworks here?

00:16:45.300 --> 00:16:47.080
Like there was no frameworks.

00:16:47.080 --> 00:16:48.380
Everything was platforms.

00:16:48.580 --> 00:16:51.840
And there was no way for you to start a project.

00:16:51.840 --> 00:16:55.420
And I found that super interesting.

00:16:55.420 --> 00:16:56.200
Interesting.

00:16:56.200 --> 00:16:58.820
Not like cookie cutter type of templates

00:16:58.820 --> 00:17:00.940
and those kinds of things for generating it.

00:17:00.940 --> 00:17:01.920
Like here's how we integrate

00:17:01.920 --> 00:17:03.640
with all of our other libraries

00:17:03.640 --> 00:17:05.940
and infrastructure and just go, right?

00:17:05.940 --> 00:17:07.220
Yeah, that wasn't there.

00:17:07.220 --> 00:17:11.460
And it was quite hard to align on a similar process.

00:17:11.460 --> 00:17:12.800
And it reminded me a lot

00:17:12.800 --> 00:17:14.460
to early days of web development

00:17:14.460 --> 00:17:17.340
when everyone had their own PHP scripts

00:17:17.340 --> 00:17:18.120
that they would make

00:17:18.120 --> 00:17:20.800
and people didn't use frameworks a lot.

00:17:20.800 --> 00:17:23.400
And then things moved on from there.

00:17:23.400 --> 00:17:24.960
And for me, that's how it felt.

00:17:24.960 --> 00:17:28.140
This portion of Talk Python To Me

00:17:28.140 --> 00:17:29.440
is brought to you by Tab9.

00:17:29.440 --> 00:17:30.560
As you know,

00:17:30.560 --> 00:17:32.380
I'm a big fan of rich text editors

00:17:32.380 --> 00:17:34.140
and all they can do to empower us

00:17:34.140 --> 00:17:35.560
to work faster and smarter.

00:17:35.560 --> 00:17:37.340
The most important feature there

00:17:37.340 --> 00:17:38.360
being autocomplete

00:17:38.360 --> 00:17:41.000
to help you write code more correctly and faster.

00:17:41.000 --> 00:17:43.480
So why not supercharge your autocomplete?

00:17:43.480 --> 00:17:45.000
If you haven't tried Tab9,

00:17:45.000 --> 00:17:46.200
you should definitely check it out.

00:17:46.200 --> 00:17:47.960
It works with PyCharm, VS Code,

00:17:47.960 --> 00:17:50.100
and even Vim among other text editors.

00:17:50.100 --> 00:17:52.200
Tab9 is kind of a mind reader

00:17:52.200 --> 00:17:53.860
that gets even better as you use it.

00:17:53.860 --> 00:17:56.620
Tab9 uses three AI models,

00:17:56.620 --> 00:17:58.720
an open-source trained AI,

00:17:58.720 --> 00:18:00.860
a private code-based trained AI,

00:18:00.860 --> 00:18:02.300
and team-trained AI.

00:18:02.300 --> 00:18:04.420
A very cool benefit of Tab9

00:18:04.420 --> 00:18:06.720
is the fact that they have a team-trained AI.

00:18:06.720 --> 00:18:09.000
So if you're on a team working on the same project,

00:18:09.000 --> 00:18:10.780
you can all work on the same model

00:18:10.780 --> 00:18:12.420
and get suggestions accordingly.

00:18:12.500 --> 00:18:14.120
The more team members you add,

00:18:14.120 --> 00:18:16.240
the faster the AI will learn your project,

00:18:16.240 --> 00:18:17.620
preferences, and patterns.

00:18:17.620 --> 00:18:19.680
Tab9 is free to use.

00:18:19.680 --> 00:18:22.480
They have a free forever subscription plan

00:18:22.480 --> 00:18:24.260
as well as a pro plan

00:18:24.260 --> 00:18:25.380
with advanced models,

00:18:25.380 --> 00:18:27.860
an enterprise plan for larger organizations,

00:18:27.860 --> 00:18:30.540
and every plan supports inviting team members.

00:18:30.980 --> 00:18:34.060
If you're a student, Tab9 is 100% free.

00:18:34.060 --> 00:18:35.540
Just let them know you're a student,

00:18:35.540 --> 00:18:37.520
and you'll get the pro plan for free.

00:18:37.520 --> 00:18:40.600
See what better adaptive autocomplete can do for you.

00:18:40.600 --> 00:18:43.760
Visit talkpython.fm/tab9 to get started.

00:18:43.760 --> 00:18:46.360
That's talkpython.fm/tab9,

00:18:46.360 --> 00:18:48.820
or just visit the link in your podcast player's show notes.

00:18:48.820 --> 00:18:51.240
And thanks to Tab9 for supporting Talk Python To Me.

00:18:53.100 --> 00:18:54.460
It was very interesting.

00:18:54.460 --> 00:18:56.560
I think it was very interesting initially

00:18:56.560 --> 00:18:58.220
because of this, like,

00:18:58.220 --> 00:19:00.040
okay, how do we bring that

00:19:00.040 --> 00:19:04.180
to people whose job is not to build software,

00:19:04.180 --> 00:19:05.800
but their job is to build models?

00:19:05.800 --> 00:19:07.660
And these are different skill sets, right?

00:19:07.720 --> 00:19:09.080
It talks about how there's these skills

00:19:09.080 --> 00:19:11.020
that data scientists should learn

00:19:11.020 --> 00:19:13.200
from software development, software engineering,

00:19:13.200 --> 00:19:13.880
and that's true.

00:19:13.880 --> 00:19:14.740
It would help them a lot,

00:19:14.740 --> 00:19:15.900
but there's also a lot of skills

00:19:15.900 --> 00:19:18.160
that data scientists and people in engineering

00:19:18.160 --> 00:19:20.800
and economics and biology that have,

00:19:20.800 --> 00:19:22.880
as software developers like you and I,

00:19:22.880 --> 00:19:25.240
you know, we don't know the inner details

00:19:25.240 --> 00:19:28.720
of, you know, gene editing or mitochondria or whatever, right?

00:19:28.720 --> 00:19:30.380
Like, there's a, to be fair,

00:19:30.380 --> 00:19:32.200
I mean, it's not like to put them in a negative light.

00:19:32.200 --> 00:19:33.500
It's just some of these skills

00:19:33.500 --> 00:19:35.800
are not learned along the traditional path,

00:19:35.800 --> 00:19:38.600
and so it does make things like reproducibility hard.

00:19:38.600 --> 00:19:41.400
Yeah, that's why I think the data is like a very,

00:19:41.400 --> 00:19:43.960
you know, the data landscape is a very nice place

00:19:43.960 --> 00:19:46.600
because it's a very creative mix of people

00:19:46.600 --> 00:19:48.980
from different backgrounds for that reason.

00:19:48.980 --> 00:19:51.940
And I think what software engineers can do is,

00:19:51.940 --> 00:19:54.880
okay, help those people to be the most effective,

00:19:54.880 --> 00:19:57.500
the most productive with what skills they already have.

00:19:57.500 --> 00:19:57.740
Yeah.

00:19:57.740 --> 00:19:59.400
And maybe just teach them

00:19:59.400 --> 00:20:01.540
just enough software engineering practices

00:20:01.540 --> 00:20:03.720
so they can go ahead.

00:20:03.720 --> 00:20:05.780
They don't need to be experts in two things.

00:20:05.780 --> 00:20:06.040
Yeah.

00:20:06.040 --> 00:20:08.140
You can never be like full expert in,

00:20:08.140 --> 00:20:10.980
you know, software engineering and then biology

00:20:10.980 --> 00:20:13.340
and, you know, DNA and all that.

00:20:13.340 --> 00:20:16.200
And if we go that way and require people

00:20:16.200 --> 00:20:17.940
to be full-blown experts,

00:20:17.940 --> 00:20:19.260
that's, I think, the wrong path.

00:20:19.260 --> 00:20:22.120
These are ways just to equip them with the tools.

00:20:22.120 --> 00:20:23.500
Especially in Python.

00:20:23.500 --> 00:20:24.100
Yeah.

00:20:24.100 --> 00:20:26.080
The ethos of Python is that it's kind of,

00:20:26.080 --> 00:20:27.360
you can be very effective

00:20:27.360 --> 00:20:29.820
with a partial understanding of what it is.

00:20:29.820 --> 00:20:31.740
You know, and if you require them

00:20:31.740 --> 00:20:32.820
to be full data scientists,

00:20:32.820 --> 00:20:35.520
then it's, you know, something different for sure.

00:20:35.520 --> 00:20:35.820
Yeah.

00:20:35.820 --> 00:20:39.340
So let's talk about Kendro specifically

00:20:39.340 --> 00:20:41.220
in terms of not just the philosophies

00:20:41.220 --> 00:20:42.080
and some of the goals,

00:20:42.080 --> 00:20:43.600
but, you know, what is it?

00:20:43.600 --> 00:20:44.900
When I first heard of it,

00:20:44.900 --> 00:20:46.760
I thought this feels a little bit like,

00:20:46.760 --> 00:20:51.280
you know, one of these data pipeline type of programs,

00:20:51.280 --> 00:20:53.380
you know, like Luigi or something like that.

00:20:53.380 --> 00:20:55.820
But that's not quite right, is it?

00:20:55.820 --> 00:20:56.420
You tuned in.

00:20:56.480 --> 00:20:57.400
No, it's not quite right

00:20:57.400 --> 00:20:59.300
because we really do dial in on that focus

00:20:59.300 --> 00:21:01.700
of like software engineering best practice first

00:21:01.700 --> 00:21:02.720
implemented on code.

00:21:02.720 --> 00:21:05.320
So we think about things like a project template

00:21:05.320 --> 00:21:07.440
for you to know where to store

00:21:07.440 --> 00:21:08.580
different parts of your code.

00:21:08.580 --> 00:21:11.140
I actually think then we've also got a data catalog

00:21:11.140 --> 00:21:13.160
which manages like how you load and save data.

00:21:13.160 --> 00:21:15.240
We've also got a way for users

00:21:15.240 --> 00:21:16.420
to interact with configuration

00:21:16.420 --> 00:21:17.740
for the first time as well.

00:21:17.880 --> 00:21:20.980
So removing what would have been maybe configuration

00:21:20.980 --> 00:21:23.600
because of their loading and saving paths

00:21:23.600 --> 00:21:25.000
for data out of the code,

00:21:25.000 --> 00:21:27.100
as well as things like removing parameters

00:21:27.100 --> 00:21:28.980
and even implementing logging.

00:21:28.980 --> 00:21:30.940
And then we also think around

00:21:30.940 --> 00:21:33.540
being able to have our own pipeline abstraction as well,

00:21:33.540 --> 00:21:34.900
which is why everyone gets excited

00:21:34.900 --> 00:21:37.820
and thinks that Kendro is kind of like Luigi Airflow.

00:21:37.820 --> 00:21:40.860
I think we get grouped with Dagster as well,

00:21:40.860 --> 00:21:42.960
all these different pipeline abstractions,

00:21:42.960 --> 00:21:45.380
but we really do focus on that journey of like,

00:21:45.380 --> 00:21:47.280
how do we even write code that's worth deploying?

00:21:47.780 --> 00:21:49.420
Which is a kind of like a different focus

00:21:49.420 --> 00:21:50.520
because when you get to,

00:21:50.520 --> 00:21:52.940
our expectation is like when you get into Prefect,

00:21:52.940 --> 00:21:54.720
Dagster, Luigi, Airflow,

00:21:54.720 --> 00:21:56.960
you really have a code base that's worth deploying.

00:21:56.960 --> 00:21:59.200
And you just really need to think about like,

00:21:59.200 --> 00:22:01.520
I want it to run at 7 a.m. on Monday.

00:22:01.520 --> 00:22:02.940
Right, or based on this trigger

00:22:02.940 --> 00:22:05.340
when a file shows up in blob storage or whatever, right?

00:22:05.340 --> 00:22:08.000
Yeah, which is a completely different focus.

00:22:08.000 --> 00:22:09.300
And we think that we call that group,

00:22:09.300 --> 00:22:11.920
the orchestrators are really good at what they do.

00:22:11.920 --> 00:22:14.080
But in terms of that whole process

00:22:14.080 --> 00:22:16.360
of leading up to a code base that's worth deploying,

00:22:16.600 --> 00:22:18.340
that's actually what Kedro handles best.

00:22:18.340 --> 00:22:18.940
Yeah, cool.

00:22:18.940 --> 00:22:20.700
You guys want to add anything to that?

00:22:20.700 --> 00:22:23.040
Maybe you might can go a bit more into like functionality.

00:22:23.040 --> 00:22:23.640
Yeah.

00:22:23.640 --> 00:22:24.460
What it has to do.

00:22:24.460 --> 00:22:27.500
I think I can't add anything after you get to this excellent introduction.

00:22:27.500 --> 00:22:30.840
I think initially that's the main thing we were asked for.

00:22:30.840 --> 00:22:33.160
It's like, oh, why don't we use Airflow instead?

00:22:33.160 --> 00:22:35.320
And we're not exactly the same.

00:22:35.480 --> 00:22:38.200
You can just use Kedro and Airflow together.

00:22:38.200 --> 00:22:42.140
And in fact, actually now we have a plugin because we connected with them

00:22:42.140 --> 00:22:44.100
and it was a very nice collaboration we had.

00:22:44.100 --> 00:22:47.760
But I think just to underline the main difference is,

00:22:47.760 --> 00:22:49.400
you know, like all of those tools,

00:22:49.400 --> 00:22:53.480
they came out from big tech companies that already had good processes.

00:22:53.480 --> 00:22:53.900
Yeah.

00:22:53.900 --> 00:22:57.680
Like, for example, Luigi comes from Spotify and so on, right?

00:22:58.120 --> 00:23:00.520
So Luigi from Spotify, Airflow from Airbnb.

00:23:00.520 --> 00:23:02.440
And like, those are big tech companies.

00:23:02.440 --> 00:23:04.040
They have uniform, like,

00:23:04.040 --> 00:23:07.360
or at least they have a big team that is taking care of the infrastructure.

00:23:07.360 --> 00:23:09.820
So you own the infrastructure, you own everything.

00:23:09.820 --> 00:23:11.500
You just need to put it there,

00:23:11.500 --> 00:23:15.780
like run your Airflow instance and then run your code there.

00:23:15.780 --> 00:23:16.920
And for us,

00:23:16.920 --> 00:23:19.220
we come from consultancies where

00:23:19.220 --> 00:23:22.000
you don't know what infrastructure you'll find at your client.

00:23:22.120 --> 00:23:24.380
So there is no way for us to say,

00:23:24.380 --> 00:23:26.280
okay, this is the scheduler we're going to use.

00:23:26.280 --> 00:23:27.820
And it was really impossible.

00:23:27.820 --> 00:23:28.020
Yeah.

00:23:28.020 --> 00:23:30.880
And you also don't know what sort of team you're dropping into.

00:23:30.880 --> 00:23:35.040
Is it a large, highly professional, experienced software team?

00:23:35.040 --> 00:23:37.180
Or is it a bunch of research scientists

00:23:37.180 --> 00:23:39.740
who need a little help on the software side, right?

00:23:39.740 --> 00:23:40.540
Yeah, absolutely.

00:23:40.540 --> 00:23:43.520
Also the team, you don't know any of that.

00:23:43.520 --> 00:23:44.840
And the thing is that

00:23:44.840 --> 00:23:47.960
we need to have some transferable skills within our teams

00:23:47.960 --> 00:23:50.160
when you work on one project here and there.

00:23:50.380 --> 00:23:53.200
So the next time you're more efficient and more productive,

00:23:53.200 --> 00:23:55.000
even though you're changing project.

00:23:55.000 --> 00:23:56.880
And that's the main difference here

00:23:56.880 --> 00:23:58.420
with Kedro and those orchestrators

00:23:58.420 --> 00:24:00.840
that like we don't have that assumption on the infrastructure.

00:24:00.840 --> 00:24:01.940
As yet to mention,

00:24:01.940 --> 00:24:05.800
it's like we focus on how to make something that's worth deploying.

00:24:05.800 --> 00:24:07.840
And then once you need to deploy it,

00:24:07.840 --> 00:24:09.960
at least that's very hard to achieve.

00:24:09.960 --> 00:24:11.460
But this is what we strive for

00:24:11.460 --> 00:24:14.220
is to make Kedro deployable basically anywhere.

00:24:14.220 --> 00:24:16.700
If it's managed service in AWS,

00:24:16.700 --> 00:24:20.740
or if it's Airflow or maybe they're offering,

00:24:20.740 --> 00:24:22.740
they have an astronomer offering,

00:24:22.740 --> 00:24:24.300
which is basically managed Airflow.

00:24:24.300 --> 00:24:25.960
If you need any of that,

00:24:25.960 --> 00:24:28.420
Kedro should be able to run on all of this.

00:24:28.420 --> 00:24:30.520
But during the development process,

00:24:30.520 --> 00:24:32.740
you don't need to, you know,

00:24:32.740 --> 00:24:35.460
use their primitives to create your nodes

00:24:35.460 --> 00:24:38.040
and deal with all the, you know, the extra work.

00:24:38.040 --> 00:24:40.140
The data scientists or data engineers,

00:24:40.140 --> 00:24:41.400
they don't need to care about,

00:24:41.740 --> 00:24:45.600
okay, what is an Airflow operator or these kind of things.

00:24:45.600 --> 00:24:49.820
So does this mean that you're able to swap out

00:24:49.820 --> 00:24:51.300
these different data pipelines?

00:24:51.300 --> 00:24:53.240
Like if, for example,

00:24:53.240 --> 00:24:55.200
I had a company we started on Luigi

00:24:55.200 --> 00:24:55.700
and we're like,

00:24:55.700 --> 00:24:57.340
oh, we really want to move to Airflow.

00:24:57.340 --> 00:24:59.080
We'd written our stuff in Kedro.

00:24:59.080 --> 00:24:59.880
Would it make that easier?

00:24:59.880 --> 00:25:01.340
Yeah, I would say yes.

00:25:01.340 --> 00:25:02.480
Okay.

00:25:02.480 --> 00:25:03.860
Depending how you've written it.

00:25:03.860 --> 00:25:08.260
I guess you can always make code not portable, but yeah.

00:25:08.260 --> 00:25:09.660
You know, one of the options

00:25:09.660 --> 00:25:12.540
that hasn't been mentioned yet is the one we're using,

00:25:12.540 --> 00:25:14.920
which is just the Kedro Docker plugin.

00:25:14.920 --> 00:25:17.880
So Kedro works very nicely inside of Docker.

00:25:17.880 --> 00:25:20.640
Despite all the nice orchestrators out there,

00:25:20.640 --> 00:25:23.860
there's also the backup plan of just put it in Docker

00:25:23.860 --> 00:25:26.280
and that can run virtually anywhere as well.

00:25:26.280 --> 00:25:26.560
Yeah.

00:25:26.560 --> 00:25:28.440
Sometimes that is really nice.

00:25:28.440 --> 00:25:30.960
Just, I know there's all this stuff as a service

00:25:30.960 --> 00:25:31.620
to help me out,

00:25:31.620 --> 00:25:33.560
but we'll just go in the simple route

00:25:33.560 --> 00:25:34.520
and run in it this way.

00:25:34.520 --> 00:25:36.040
All right, let's talk about some of the features.

00:25:36.680 --> 00:25:39.320
And Kevin, you talked about the lack

00:25:39.320 --> 00:25:41.640
of some kind of template to get started.

00:25:41.640 --> 00:25:44.340
And that's the first feature listed here.

00:25:44.340 --> 00:25:46.200
So maybe tell folks about this.

00:25:46.200 --> 00:25:48.480
I think that was probably the first one we implemented

00:25:48.480 --> 00:25:50.380
when we were rebuilding the thing.

00:25:50.380 --> 00:25:53.060
Because what we found out is like lots of data scientists,

00:25:53.060 --> 00:25:56.020
they were naturally using like some cookie cutter templates.

00:25:56.020 --> 00:25:56.500
Yeah.

00:25:56.500 --> 00:25:57.560
Okay, this is my project.

00:25:57.560 --> 00:25:59.380
This is the structure I like.

00:25:59.720 --> 00:26:02.280
And then we had a big discussion

00:26:02.280 --> 00:26:03.720
with many different data scientists

00:26:03.720 --> 00:26:05.160
how to implement this.

00:26:05.160 --> 00:26:07.600
So we set out on a,

00:26:07.600 --> 00:26:09.820
the thing that will be the bare minimum

00:26:09.820 --> 00:26:12.040
that you will need for starting a project.

00:26:12.040 --> 00:26:12.340
Right.

00:26:12.340 --> 00:26:14.280
The minimal set that everyone is going to use.

00:26:14.280 --> 00:26:16.560
One of the things I really dislike about templates,

00:26:16.560 --> 00:26:18.300
these types of project templates,

00:26:18.300 --> 00:26:19.880
and I see them all over the place,

00:26:19.880 --> 00:26:23.220
is, oh, here's how you use this template to get started.

00:26:23.220 --> 00:26:24.320
And the template says,

00:26:24.320 --> 00:26:25.460
okay, what we're going to do

00:26:25.460 --> 00:26:27.520
is we're going to set up Celery as your backend worker.

00:26:27.520 --> 00:26:29.840
We're going to set up Postgres as your database.

00:26:29.840 --> 00:26:33.340
We're going to set up SQLAlchemy as your data layer.

00:26:33.340 --> 00:26:34.340
We're going to set up X,

00:26:34.340 --> 00:26:35.720
and you end up with 10 things.

00:26:35.720 --> 00:26:37.100
You're like, I only want four of these,

00:26:37.100 --> 00:26:39.440
but the four it's helping with is really useful.

00:26:39.440 --> 00:26:41.780
But then I got to hunt through and get the others out.

00:26:41.780 --> 00:26:42.380
And it's just,

00:26:42.380 --> 00:26:45.160
you do want to aim for this minimal side

00:26:45.160 --> 00:26:46.280
because, you know,

00:26:46.280 --> 00:26:48.680
while it's nice to have support for the other things,

00:26:48.680 --> 00:26:51.000
like if you foist it upon people

00:26:51.000 --> 00:26:51.660
and they're like, I just,

00:26:51.660 --> 00:26:53.380
this is more junk than I,

00:26:53.380 --> 00:26:55.520
like I'm using less than half of this.

00:26:55.520 --> 00:26:56.660
So this is not useful for me.

00:26:56.660 --> 00:26:57.100
Right.

00:26:57.280 --> 00:26:57.500
Yeah.

00:26:57.500 --> 00:26:59.880
So that was your philosophy to go more minimalist on it.

00:26:59.880 --> 00:27:00.620
Yeah, absolutely.

00:27:00.620 --> 00:27:01.560
Even though,

00:27:01.560 --> 00:27:04.060
because at that time it was an internal tool,

00:27:04.060 --> 00:27:06.660
we had some stakeholders that we had to appease, right?

00:27:06.660 --> 00:27:07.240
Like there was,

00:27:07.240 --> 00:27:09.900
we had internally a very well-developed

00:27:09.900 --> 00:27:11.160
data engineering convention.

00:27:11.160 --> 00:27:14.060
And then they absolutely wanted to have the,

00:27:14.060 --> 00:27:15.240
you know, in the template,

00:27:15.240 --> 00:27:16.800
we need to have the folders

00:27:16.800 --> 00:27:19.380
with those layers in the data engineering.

00:27:19.380 --> 00:27:21.480
And I think you can still find that in Kedro.

00:27:21.800 --> 00:27:25.440
So there are these kinds of things that we needed to do,

00:27:25.440 --> 00:27:26.720
but they're not necessarily,

00:27:26.720 --> 00:27:27.260
okay,

00:27:27.260 --> 00:27:28.260
you don't need to use them,

00:27:28.260 --> 00:27:30.000
that you can remove a lot of those.

00:27:30.000 --> 00:27:31.920
And further down the line,

00:27:31.920 --> 00:27:34.440
we ended up introducing something called starters.

00:27:34.960 --> 00:27:35.800
And this is essentially,

00:27:35.800 --> 00:27:38.580
you can have a custom template that you can start from.

00:27:38.580 --> 00:27:44.820
And people are using them to create their own custom projects for their organizations.

00:27:44.820 --> 00:27:45.380
Yeah.

00:27:45.620 --> 00:27:46.780
I think that's a great idea.

00:27:46.780 --> 00:27:47.200
Yeah.

00:27:47.200 --> 00:27:47.620
Yeah.

00:27:47.620 --> 00:27:50.500
And we're using cookie cutter behind the scenes,

00:27:50.500 --> 00:27:55.180
which means like another thing that we wanted to do is to not reinvent the wheel

00:27:55.180 --> 00:27:57.280
and use standard tools out there.

00:27:57.280 --> 00:27:59.480
If the Python world is using cookie cutter,

00:27:59.480 --> 00:28:01.920
there is no reason for us not to use it.

00:28:01.920 --> 00:28:02.200
Right.

00:28:02.200 --> 00:28:04.340
And we went with that.

00:28:04.340 --> 00:28:07.660
And that's how we settled on the template system.

00:28:07.660 --> 00:28:07.980
Yeah.

00:28:07.980 --> 00:28:08.260
Nice.

00:28:08.260 --> 00:28:09.660
And you talked about,

00:28:09.660 --> 00:28:12.220
or Hedro talks about on the homepage,

00:28:12.220 --> 00:28:15.000
how it uses the cookie cutter data science,

00:28:15.000 --> 00:28:16.180
cookie cutter template,

00:28:16.180 --> 00:28:17.420
which is a logical,

00:28:17.420 --> 00:28:19.120
how much of that is that?

00:28:19.120 --> 00:28:20.580
Or have you kind of moved beyond that?

00:28:20.580 --> 00:28:21.960
I think we moved beyond that.

00:28:21.960 --> 00:28:22.800
It was mainly,

00:28:22.800 --> 00:28:25.040
that's what the inspiration was.

00:28:25.040 --> 00:28:25.360
Ah,

00:28:25.360 --> 00:28:25.620
got it.

00:28:25.620 --> 00:28:26.920
It's not like we're using it,

00:28:26.920 --> 00:28:31.940
but more like it was inspired by this because we found out like a few users back then,

00:28:31.940 --> 00:28:33.000
they use that one.

00:28:33.000 --> 00:28:34.240
And it was fairly sane.

00:28:34.240 --> 00:28:34.520
I mean,

00:28:34.520 --> 00:28:34.980
if you,

00:28:34.980 --> 00:28:36.600
if you don't need to framework,

00:28:36.600 --> 00:28:38.900
I think it's quite a good starting point.

00:28:38.900 --> 00:28:41.740
So if you don't need a full blown Kedro setup,

00:28:41.740 --> 00:28:43.680
I would recommend that one.

00:28:43.680 --> 00:28:44.340
And,

00:28:44.340 --> 00:28:45.140
uh,

00:28:45.140 --> 00:28:45.700
we said,

00:28:45.700 --> 00:28:45.900
okay,

00:28:45.900 --> 00:28:47.980
how can we build upon that?

00:28:47.980 --> 00:28:48.920
And like make,

00:28:48.920 --> 00:28:50.380
obviously we started from scratch,

00:28:50.380 --> 00:28:52.140
not copying any of their templating,

00:28:52.140 --> 00:28:53.220
but saying,

00:28:53.220 --> 00:28:53.440
okay,

00:28:53.440 --> 00:28:56.060
this is a very good example of what we can be.

00:28:56.060 --> 00:28:58.960
And then how can we achieve the same thing,

00:28:58.960 --> 00:29:02.500
but achieving our goals for making this framework.

00:29:02.500 --> 00:29:03.180
And,

00:29:03.180 --> 00:29:03.440
uh,

00:29:03.440 --> 00:29:04.120
that's how we,

00:29:04.120 --> 00:29:05.040
we settled on.

00:29:05.600 --> 00:29:06.200
And I think we,

00:29:06.200 --> 00:29:07.340
we still honor it because,

00:29:07.340 --> 00:29:08.120
uh,

00:29:08.120 --> 00:29:11.640
I think it was a good inspiration for us in our documentation.

00:29:11.640 --> 00:29:12.200
Yeah.

00:29:12.200 --> 00:29:12.860
Very nice.

00:29:12.860 --> 00:29:13.700
I love it.

00:29:13.700 --> 00:29:17.360
And definitely thumbs up on using something like cookie cutter,

00:29:17.360 --> 00:29:17.880
right?

00:29:17.880 --> 00:29:20.760
There's already so many templates out there that people are using.

00:29:20.760 --> 00:29:24.600
People are somewhat familiar with the idea and they maybe know how to extend it.

00:29:24.600 --> 00:29:24.980
Right.

00:29:24.980 --> 00:29:28.200
So no need to go write your own macro language or something crazy.

00:29:28.200 --> 00:29:28.640
Yeah.

00:29:28.640 --> 00:29:29.140
All right.

00:29:29.140 --> 00:29:31.600
Next main feature is the data catalog.

00:29:32.020 --> 00:29:33.340
One thing I was going to mention here,

00:29:33.340 --> 00:29:37.180
Michael mentioned that you get like from a template,

00:29:37.180 --> 00:29:38.540
a lot of times you get a,

00:29:38.540 --> 00:29:41.420
a thing that's got everything that you need.

00:29:41.420 --> 00:29:42.900
And then a bunch of stuff you don't need.

00:29:42.900 --> 00:29:46.120
I think one thing that plays well with Kedro is this catalog.

00:29:46.680 --> 00:29:47.280
So with the catalog,

00:29:47.280 --> 00:29:48.140
I can kind of,

00:29:48.140 --> 00:29:48.620
you know,

00:29:48.620 --> 00:29:52.380
abstractly tell Kedro where my data is and what type it is.

00:29:52.380 --> 00:29:55.500
So that catalog can load things from pandas,

00:29:55.500 --> 00:29:56.280
spark,

00:29:56.280 --> 00:29:56.980
desk,

00:29:56.980 --> 00:29:58.040
from databases.

00:29:58.040 --> 00:30:01.880
There's pretty long list of data sources that it can load from.

00:30:01.880 --> 00:30:07.620
So I don't need to change the template based on what my underlying data is or where it's stored.

00:30:07.620 --> 00:30:08.320
That's really nice.

00:30:08.320 --> 00:30:10.200
A lot of times when you're thinking of data,

00:30:10.200 --> 00:30:12.940
the abstractions are you can switch between MySQL,

00:30:12.940 --> 00:30:15.380
Microsoft SQL server and Postgres,

00:30:15.380 --> 00:30:16.440
not between,

00:30:16.440 --> 00:30:17.260
you know,

00:30:17.260 --> 00:30:21.760
spark and a relational database or cloud storage or something like that.

00:30:21.760 --> 00:30:23.040
That's a lot of flexibility.

00:30:23.040 --> 00:30:30.440
One really nice feature I like that was added in the 16 series is it's built on FS spec under the hood.

00:30:30.440 --> 00:30:33.620
So you can have data sitting on S3,

00:30:33.620 --> 00:30:35.940
GCP or your local file system.

00:30:35.940 --> 00:30:38.120
And all you do is change your file path,

00:30:38.120 --> 00:30:42.140
maybe like a slight tweak to your requirements.txt.

00:30:42.140 --> 00:30:43.360
But other than that,

00:30:43.360 --> 00:30:48.860
Kedro just knows how to load data into whatever object type you ask for.

00:30:48.860 --> 00:30:49.120
Yeah,

00:30:49.120 --> 00:30:49.620
very nice.

00:30:49.620 --> 00:30:51.500
Also helps on the data science side,

00:30:51.500 --> 00:30:55.540
if you're not super familiar with like remote blob storage APIs,

00:30:55.540 --> 00:30:57.060
you don't have to learn that,

00:30:57.060 --> 00:30:57.280
right?

00:30:57.280 --> 00:30:58.220
Which is good.

00:30:58.220 --> 00:30:58.680
Cool.

00:30:58.680 --> 00:31:04.060
And another thing to maybe mention is if you don't need the full Kedro template,

00:31:04.060 --> 00:31:06.460
you don't need the pipeline and everything,

00:31:06.460 --> 00:31:09.480
you can use Kedro's catalog by itself.

00:31:09.480 --> 00:31:09.800
Okay.

00:31:09.800 --> 00:31:13.760
So maybe if you're just starting a notebook or just starting a project in a notebook,

00:31:13.760 --> 00:31:16.380
you might want to move it to Kedro later.

00:31:16.380 --> 00:31:21.020
You can start putting your catalog together as a Kedro catalog from the start.

00:31:21.020 --> 00:31:21.340
Nice.

00:31:21.340 --> 00:31:24.600
And then maybe as you move it more into source files,

00:31:24.600 --> 00:31:26.280
it's like part of that's already done,

00:31:26.280 --> 00:31:26.440
right?

00:31:26.440 --> 00:31:26.680
Yep.

00:31:26.680 --> 00:31:28.180
You're closer to the destination.

00:31:28.180 --> 00:31:28.520
Yep.

00:31:28.520 --> 00:31:32.520
And you can use their loaders and savers so that you don't have to write any sort of

00:31:32.520 --> 00:31:34.840
saving and loading code manually.

00:31:34.840 --> 00:31:35.260
Yeah.

00:31:35.260 --> 00:31:35.880
All right.

00:31:35.880 --> 00:31:39.000
Next one is pipeline abstraction,

00:31:39.000 --> 00:31:44.840
automatic resolution of dependencies between pure Python functions and data pipeline visualizations.

00:31:44.840 --> 00:31:49.880
And you all have a cool visualizer there of a whole lot of stuff going on here.

00:31:49.880 --> 00:31:51.340
I could zoom in here,

00:31:51.340 --> 00:31:52.660
but like this,

00:31:52.660 --> 00:31:56.340
this really interesting visualizer of what's happening.

00:31:56.880 --> 00:31:58.680
who wants to sort of tell us what this one's about?

00:31:58.680 --> 00:32:00.020
I'll happily take this one.

00:32:00.020 --> 00:32:01.720
And I leave the coding starters to yet.

00:32:03.640 --> 00:32:09.640
I really wanted to take that one because I want to kind of promote using more the API of the pipeline.

00:32:09.640 --> 00:32:12.800
I think this is probably one of the best things we've done.

00:32:13.160 --> 00:32:18.260
And it was kind of a find that we had is what is the pipeline in our,

00:32:18.260 --> 00:32:22.180
I think that's probably one of the things that makes Kedro different than other tools.

00:32:22.180 --> 00:32:25.300
We treat each processing node as a pure function.

00:32:25.300 --> 00:32:30.120
So what you need to do is just to write a pure function that you have inputs and outputs,

00:32:30.120 --> 00:32:33.740
and you return stuff and that's all you need to do.

00:32:33.740 --> 00:32:38.340
And then you need to announce that in a pipeline that,

00:32:38.340 --> 00:32:38.640
okay,

00:32:38.640 --> 00:32:39.840
I'm going to use that function.

00:32:39.960 --> 00:32:43.740
we'll have those inputs from the catalog that Waylon was talking about.

00:32:43.740 --> 00:32:45.780
And they're just aliases to,

00:32:45.780 --> 00:32:47.480
to those references in the catalog.

00:32:47.480 --> 00:32:49.980
And then when I'm done with that function,

00:32:49.980 --> 00:32:52.080
then I'll save them to those datasets.

00:32:52.080 --> 00:32:54.340
And you don't need to know,

00:32:54.340 --> 00:32:54.740
okay,

00:32:54.740 --> 00:32:58.020
what's the order of execution or like any of that.

00:32:58.020 --> 00:33:00.560
You just need to think locally.

00:33:00.560 --> 00:33:03.200
You need to think about that function you're dealing with.

00:33:03.200 --> 00:33:03.860
Okay.

00:33:03.860 --> 00:33:07.260
I need maybe in this example that we have on the screen,

00:33:07.260 --> 00:33:08.800
like people who are listening,

00:33:08.800 --> 00:33:09.920
they might not be able to see,

00:33:09.920 --> 00:33:15.960
but let's say you have an input to a function and let's say factory train.

00:33:15.960 --> 00:33:17.020
In that example,

00:33:17.020 --> 00:33:17.500
we have,

00:33:17.500 --> 00:33:18.880
and that's your input.

00:33:18.880 --> 00:33:22.240
And then you want to remove the new columns and that's your function.

00:33:22.240 --> 00:33:24.340
And then let's say you have a,

00:33:24.340 --> 00:33:30.160
let's say we call the output a clean factory input or what was it?

00:33:30.340 --> 00:33:34.720
So that's all you need to think about how to solve that locally.

00:33:34.720 --> 00:33:36.980
You don't need to think how that would fit in globally.

00:33:36.980 --> 00:33:40.020
And then once you add enough of those functions,

00:33:40.020 --> 00:33:41.020
then the connection,

00:33:41.020 --> 00:33:43.080
those dependencies,

00:33:43.080 --> 00:33:45.740
because you announced them in your inputs and your outputs,

00:33:45.740 --> 00:33:47.740
they'll be figured out by Kedro.

00:33:47.740 --> 00:33:48.420
And then,

00:33:48.420 --> 00:33:48.840
you know,

00:33:48.840 --> 00:33:49.900
this graph,

00:33:49.900 --> 00:33:53.220
the visualization will be drawn for you out of your code.

00:33:53.220 --> 00:33:57.080
And then you can use that for running your code in that particular order.

00:33:57.080 --> 00:33:59.040
And why I say that we,

00:33:59.040 --> 00:34:04.680
we are so proud of this because using these pure functions and connecting them as pipelines,

00:34:04.680 --> 00:34:14.100
gave us a lot of ability to reuse code and reuse parts of the pipelines without really taking care of like where the data is.

00:34:14.100 --> 00:34:17.680
So you just work on a pipeline level and the connections,

00:34:17.680 --> 00:34:20.640
and then the data catalog would load and save things for you.

00:34:20.640 --> 00:34:21.040
And,

00:34:21.040 --> 00:34:21.680
and that,

00:34:21.680 --> 00:34:22.720
that made it super,

00:34:22.720 --> 00:34:24.060
super easy for us to,

00:34:24.060 --> 00:34:27.000
to scale the types of projects we can build.

00:34:27.000 --> 00:34:29.540
We started off with very small pipelines and now we,

00:34:29.540 --> 00:34:32.220
we have maybe yet to can talk more about this,

00:34:32.220 --> 00:34:34.640
but we have projects which have like hundreds of people,

00:34:34.640 --> 00:34:36.940
hundreds of nodes internally in QB.

00:34:36.940 --> 00:34:37.280
Yeah.

00:34:37.280 --> 00:34:38.180
If you look at this,

00:34:38.180 --> 00:34:39.480
there's a lot going on here.

00:34:39.480 --> 00:34:43.480
And I really appreciate the idea of being able to just focus in on,

00:34:43.480 --> 00:34:43.800
you know,

00:34:43.800 --> 00:34:44.580
small pieces.

00:34:44.580 --> 00:34:47.180
It brings me back to your idea of talking about,

00:34:47.180 --> 00:34:47.300
well,

00:34:47.300 --> 00:34:49.980
let's just write a .php file and put,

00:34:49.980 --> 00:34:50.580
start just,

00:34:50.580 --> 00:34:56.540
I'm going to start writing HTML and I'm going to start writing some SQL query and I'm going to write some more markup.

00:34:56.540 --> 00:35:01.080
It's just all from scratch and there's zero structure and there's zero support.

00:35:01.080 --> 00:35:02.420
So if you're going to do something like that,

00:35:02.440 --> 00:35:04.300
you're doing it all at once,

00:35:04.300 --> 00:35:05.220
all at the same time.

00:35:05.220 --> 00:35:06.060
Whereas,

00:35:06.060 --> 00:35:06.360
you know,

00:35:06.360 --> 00:35:07.940
compare that to like a modern framework,

00:35:07.940 --> 00:35:08.800
like Flask,

00:35:08.800 --> 00:35:10.360
all you do is write the view method.

00:35:10.360 --> 00:35:12.220
You don't care about how the template gets rendered.

00:35:12.220 --> 00:35:16.220
You don't care about how the process comes in or finding the verbs to figure out.

00:35:16.220 --> 00:35:16.520
You just,

00:35:16.520 --> 00:35:17.940
I know when I get here,

00:35:17.940 --> 00:35:18.920
Flask got me here.

00:35:18.920 --> 00:35:19.380
I do the,

00:35:19.380 --> 00:35:22.000
the five lines of code that I got to do and we're good.

00:35:22.000 --> 00:35:23.580
And I feel like this is real similar,

00:35:23.580 --> 00:35:23.900
right?

00:35:23.900 --> 00:35:24.240
Yeah.

00:35:24.240 --> 00:35:24.440
Yeah,

00:35:24.440 --> 00:35:24.760
absolutely.

00:35:25.060 --> 00:35:26.000
You just write a function.

00:35:26.000 --> 00:35:26.480
Yeah.

00:35:26.480 --> 00:35:29.480
You write a function that says unify timestamp column name,

00:35:29.480 --> 00:35:31.760
or you write a function called remove null columns.

00:35:31.760 --> 00:35:33.200
Like you can definitely do that.

00:35:33.200 --> 00:35:34.140
That's not challenging,

00:35:34.140 --> 00:35:35.640
but if you look at this overall workflow,

00:35:35.640 --> 00:35:38.140
it looks like there's a lot going on here.

00:35:38.140 --> 00:35:38.560
Yeah.

00:35:38.560 --> 00:35:38.860
Yeah.

00:35:38.980 --> 00:35:42.240
And I really liked that you brought that analogy with frameworks,

00:35:42.240 --> 00:35:43.760
with view and like these things,

00:35:43.760 --> 00:35:45.480
because the more we started building that,

00:35:45.480 --> 00:35:47.320
the more it was very similar for me.

00:35:47.320 --> 00:35:47.700
I mean,

00:35:47.700 --> 00:35:52.000
I've done some Ruby on rails before and actually the pipeline sounded like the

00:35:52.000 --> 00:35:52.560
roots file.

00:35:52.560 --> 00:35:54.480
So you would have different routes like,

00:35:54.480 --> 00:35:54.820
okay,

00:35:54.820 --> 00:35:55.540
what is the,

00:35:55.540 --> 00:35:57.980
how do you register on this URL?

00:35:57.980 --> 00:36:01.880
This is the action I would call and actions here are our notes.

00:36:01.880 --> 00:36:02.200
Right.

00:36:02.200 --> 00:36:05.240
And what data is provided to it and things and so on.

00:36:05.240 --> 00:36:05.380
Yeah.

00:36:05.380 --> 00:36:05.740
All that.

00:36:05.740 --> 00:36:07.840
So the data that's provided to it is basically,

00:36:07.840 --> 00:36:08.180
you know,

00:36:08.240 --> 00:36:09.740
the URL endpoints and,

00:36:09.740 --> 00:36:12.840
and maybe the post data and things like that.

00:36:12.840 --> 00:36:14.740
And then the output is your views,

00:36:14.740 --> 00:36:15.640
for example,

00:36:15.640 --> 00:36:16.040
in,

00:36:16.040 --> 00:36:16.380
in,

00:36:16.380 --> 00:36:17.560
in traditional framework.

00:36:17.560 --> 00:36:19.980
The only difference here is that your inputs and outputs,

00:36:19.980 --> 00:36:20.980
their data,

00:36:20.980 --> 00:36:24.460
they're not a URL data coming from,

00:36:24.460 --> 00:36:24.740
you know,

00:36:24.740 --> 00:36:25.280
the request.

00:36:25.280 --> 00:36:27.640
And then the response is not a view,

00:36:27.640 --> 00:36:28.580
but actually again,

00:36:28.580 --> 00:36:29.560
saving to the data.

00:36:29.560 --> 00:36:32.580
And there is one subtle difference here is that you,

00:36:32.580 --> 00:36:36.140
you have dependencies between different routes where in web frameworks,

00:36:36.140 --> 00:36:37.700
they're fairly independent,

00:36:37.700 --> 00:36:38.000
right?

00:36:38.000 --> 00:36:39.660
It's a stateless thing.

00:36:39.660 --> 00:36:39.800
Yeah.

00:36:39.800 --> 00:36:40.180
We're here.

00:36:40.180 --> 00:36:41.020
We kind of,

00:36:41.020 --> 00:36:42.160
it's still stateless,

00:36:42.160 --> 00:36:45.120
but you have dependencies between different parts of the route.

00:36:45.560 --> 00:36:51.060
And maybe here comes the real reason I wanted to talk about the pipeline was that this abstraction done

00:36:51.060 --> 00:36:57.080
this way gives you kind of like an algebra that you can use to combine pipelines,

00:36:57.080 --> 00:36:58.680
to have prebuilt pipelines,

00:36:58.680 --> 00:37:00.240
plus them together,

00:37:00.240 --> 00:37:00.680
plus them together,

00:37:00.680 --> 00:37:02.560
or maybe just join them together,

00:37:02.560 --> 00:37:05.060
or remove things from them,

00:37:05.060 --> 00:37:05.940
or maybe saying,

00:37:05.940 --> 00:37:07.420
because it's a tree,

00:37:07.420 --> 00:37:08.340
like a,

00:37:08.340 --> 00:37:09.980
ends up being dark,

00:37:09.980 --> 00:37:11.700
directed acyclic graph.

00:37:11.900 --> 00:37:12.520
means like,

00:37:12.520 --> 00:37:17.160
I want to get this sub pipeline that produces that output.

00:37:17.160 --> 00:37:19.380
And then it will remove everything from you.

00:37:19.520 --> 00:37:19.760
Okay.

00:37:19.760 --> 00:37:20.960
So maybe you're like saying,

00:37:20.960 --> 00:37:23.680
I only care about the output at the,

00:37:23.680 --> 00:37:24.080
say,

00:37:24.080 --> 00:37:25.340
fifth function,

00:37:25.340 --> 00:37:27.240
this round timestamps thing,

00:37:27.240 --> 00:37:29.240
and it could strip off a whole bunch of the other pieces.

00:37:29.240 --> 00:37:29.960
Because it's like,

00:37:29.960 --> 00:37:30.060
well,

00:37:30.060 --> 00:37:34.280
all this other stuff is not involved in this part of the chain of the pipeline,

00:37:34.280 --> 00:37:36.140
reversing the acyclic graph.

00:37:36.300 --> 00:37:36.460
Yeah,

00:37:36.460 --> 00:37:36.860
exactly.

00:37:36.860 --> 00:37:37.960
And you don't need to do anything.

00:37:37.960 --> 00:37:40.080
You just need to say pipeline two,

00:37:40.080 --> 00:37:41.020
and then specify.

00:37:41.020 --> 00:37:43.640
So we have a bunch of methods that you can use.

00:37:43.640 --> 00:37:44.440
And,

00:37:44.440 --> 00:37:44.920
uh,

00:37:44.920 --> 00:37:46.660
unfortunately they're underutilized.

00:37:46.660 --> 00:37:48.260
Like people don't really use them.

00:37:48.260 --> 00:37:49.820
And then when we ask like,

00:37:49.820 --> 00:37:49.960
Oh,

00:37:49.960 --> 00:37:50.780
how can I do that?

00:37:50.780 --> 00:37:51.280
And it's like,

00:37:51.280 --> 00:37:53.180
there is one method call and people are like,

00:37:53.180 --> 00:37:53.360
Oh,

00:37:53.360 --> 00:37:54.160
that's so cool.

00:37:54.160 --> 00:37:57.660
Maybe we need to improve our documentation.

00:37:57.660 --> 00:37:58.500
And this one.

00:37:58.500 --> 00:37:58.900
Yeah.

00:37:58.900 --> 00:38:01.120
Maybe you should go on a podcast and tell people about it.

00:38:01.120 --> 00:38:01.440
Yeah.

00:38:01.440 --> 00:38:01.700
Yeah.

00:38:01.700 --> 00:38:04.180
I think that's why I want to use the opportunity.

00:38:04.180 --> 00:38:04.520
Yeah.

00:38:04.520 --> 00:38:05.080
Absolutely.

00:38:05.080 --> 00:38:05.640
You should.

00:38:06.100 --> 00:38:09.880
Do you want to elaborate on some of these larger pipelines that you'll have going?

00:38:09.880 --> 00:38:13.760
This actually speaks to a lot to the collaborative way that you can work once you're using the

00:38:13.760 --> 00:38:14.420
Kedra pipelines,

00:38:14.420 --> 00:38:17.820
because now your team sessions can easily become something like,

00:38:17.820 --> 00:38:18.140
okay,

00:38:18.140 --> 00:38:21.740
I know I need to work on like these three key functions because we know this is what we

00:38:21.740 --> 00:38:23.180
want this pipeline to do.

00:38:23.180 --> 00:38:27.860
And then you split out the work and work accordingly to produce those specific nodes and functions.

00:38:27.860 --> 00:38:28.720
Also,

00:38:28.720 --> 00:38:32.540
one of the things that I'd like to call out about the pipeline abstraction is that you definitely

00:38:32.540 --> 00:38:35.200
do get Kedra Viz for free on top of it.

00:38:35.900 --> 00:38:37.680
It's a pipeline visualization tool.

00:38:37.680 --> 00:38:41.340
It's really cool because it allows you to give like kind of like a bird's eye view of

00:38:41.340 --> 00:38:42.440
what's going on in the pipeline.

00:38:42.940 --> 00:38:45.600
So you can actually understand like how different things are connected.

00:38:45.600 --> 00:38:59.380
some of the ways our users have used it, but ways that we didn't imagine it was originally created for being able to talk to non-technical users or stakeholders about the way that the code base was structured instead of diving into code and showing them,

00:38:59.380 --> 00:38:59.660
hey,

00:38:59.660 --> 00:39:00.600
here's how the code works,

00:39:00.600 --> 00:39:01.260
because they'll be like,

00:39:01.260 --> 00:39:02.340
I don't know what's going on here.

00:39:02.440 --> 00:39:08.380
But we've also found our users will do things like debugging with Kedra Viz to find out,

00:39:08.380 --> 00:39:08.640
oh,

00:39:08.640 --> 00:39:12.160
something doesn't appear right in my pipeline and then figure out what's going on there.

00:39:12.160 --> 00:39:13.380
And in some ways,

00:39:13.380 --> 00:39:15.720
we've actually extended some of that functionality.

00:39:15.720 --> 00:39:19.420
So you'll see that there's now like a code viewer for you to interact with your code.

00:39:20.220 --> 00:39:21.460
And we have some,

00:39:21.460 --> 00:39:21.980
I guess,

00:39:21.980 --> 00:39:25.540
maybe exciting things planned down the line when we're talking about the roadmap.

00:39:25.540 --> 00:39:28.320
We'll be able to allude to some of the work that we're doing with experiment tracking,

00:39:28.320 --> 00:39:30.860
which will extend Kedra Viz a bit further.

00:39:30.860 --> 00:39:31.740
So nice.

00:39:31.740 --> 00:39:32.060
Yeah.

00:39:32.060 --> 00:39:32.380
Yeah.

00:39:32.380 --> 00:39:37.440
You can definitely tell if you've got like a dependency mismatch and the order is wrong or something you could see,

00:39:37.440 --> 00:39:37.580
oh,

00:39:37.580 --> 00:39:39.220
this one is supposed to be after that one.

00:39:39.220 --> 00:39:40.160
And it's really nice.

00:39:40.160 --> 00:39:41.140
The visualizers.

00:39:41.140 --> 00:39:41.780
It's nice.

00:39:41.780 --> 00:39:44.880
You've kind of got this like map thing you can cruise around on.

00:39:44.880 --> 00:39:46.580
And for people who are listening,

00:39:46.580 --> 00:39:49.980
I'll definitely put this in the show notes so you can open it up.

00:39:50.060 --> 00:39:50.660
and explore it.

00:39:50.660 --> 00:39:53.080
There's a pretty elaborate pipeline here to explore.

00:39:53.080 --> 00:39:57.420
Does this do anything runtime or is it just for visualizing the static structure?

00:39:57.420 --> 00:40:00.200
It's actually just for visualizing the static structure.

00:40:00.200 --> 00:40:01.240
We often find,

00:40:01.240 --> 00:40:07.620
we've tried to skirt away from what we call the orchestrator UI interface because it takes us a bit too much.

00:40:07.620 --> 00:40:12.300
I mentioned into that realm of like where we would prefer the orchestrators to play a part.

00:40:12.300 --> 00:40:15.840
So for now it's just static view of what's going on in your code base.

00:40:15.840 --> 00:40:16.160
Yeah.

00:40:16.160 --> 00:40:16.500
No,

00:40:16.500 --> 00:40:17.020
this is great.

00:40:17.020 --> 00:40:19.980
I feel like a lot of projects would benefit from this kind of stuff.

00:40:19.980 --> 00:40:21.560
not just data science things,

00:40:21.560 --> 00:40:21.780
right?

00:40:21.780 --> 00:40:25.620
Like I'd like this kind of view of my code for other things as well.

00:40:25.620 --> 00:40:27.760
We have found people using,

00:40:27.760 --> 00:40:32.340
KedroViz is also available as a React app and people use it in,

00:40:32.340 --> 00:40:33.740
without Kedro.

00:40:34.740 --> 00:40:36.560
So we'll find that they will build,

00:40:36.560 --> 00:40:40.320
one of the most common use cases we've seen built on top of KedroViz is data lineage,

00:40:40.320 --> 00:40:44.200
but specifically column level lineage that people will want to visualize.

00:40:44.200 --> 00:40:46.280
So they end up using the React app for that.

00:40:46.280 --> 00:40:49.600
I also have a friend who was playing a game.

00:40:49.600 --> 00:40:51.740
He's actually one of the former maintainers on Kedro,

00:40:51.740 --> 00:40:53.420
KedroViz and Kedro,

00:40:53.420 --> 00:40:56.160
where he was playing a game where he needed to work on how to build,

00:40:56.300 --> 00:40:57.360
I don't know what this game is called.

00:40:57.360 --> 00:40:58.120
How to build.

00:40:58.120 --> 00:40:59.100
It was Factorio.

00:40:59.100 --> 00:41:00.060
Factorio.

00:41:00.060 --> 00:41:04.020
You basically look at like how to,

00:41:04.020 --> 00:41:05.440
how to build up your factory,

00:41:05.440 --> 00:41:06.040
I think,

00:41:06.040 --> 00:41:08.480
or something like that and use the different elements in the factory.

00:41:08.480 --> 00:41:12.420
and he used KedroViz to visualize what he should be doing in his factory.

00:41:12.420 --> 00:41:13.660
So yeah,

00:41:13.660 --> 00:41:14.540
it's different ways.

00:41:14.540 --> 00:41:14.820
Oh, that's funny.

00:41:14.820 --> 00:41:18.380
I guess you can visualize lots of things with it.

00:41:18.380 --> 00:41:18.660
How neat.

00:41:18.660 --> 00:41:18.960
Yeah.

00:41:18.960 --> 00:41:19.280
All right.

00:41:19.280 --> 00:41:22.460
The next main feature here is deployment.

00:41:22.460 --> 00:41:24.120
One comment I had on the,

00:41:24.120 --> 00:41:25.940
on the pipeline was,

00:41:25.940 --> 00:41:26.360
so,

00:41:26.360 --> 00:41:26.560
you know,

00:41:26.560 --> 00:41:29.220
you get a task to do on your sprint.

00:41:29.220 --> 00:41:31.000
You sit down to work for the day.

00:41:31.000 --> 00:41:34.080
And if you're not in this Kedro type of,

00:41:34.080 --> 00:41:36.120
or this framework mode,

00:41:36.120 --> 00:41:37.320
a lot of times it's like,

00:41:37.320 --> 00:41:37.620
okay,

00:41:37.960 --> 00:41:40.100
open the notebook or open the script.

00:41:40.100 --> 00:41:43.740
And I've got to run to a certain point to start my work.

00:41:43.740 --> 00:41:46.280
Cause I've got to have that data in memory or I,

00:41:46.280 --> 00:41:46.740
I,

00:41:46.740 --> 00:41:47.840
that's my option.

00:41:47.840 --> 00:41:50.740
Or I'm manually saving things along the way.

00:41:50.740 --> 00:41:53.280
Both have their downsides.

00:41:53.280 --> 00:41:55.180
But so a lot of times it's like,

00:41:55.180 --> 00:41:55.380
okay,

00:41:55.380 --> 00:41:57.700
I'm going to run the notebook and then I'm going to go grab coffee.

00:41:57.700 --> 00:41:58.840
And maybe when it's,

00:41:58.840 --> 00:41:59.700
when I get back,

00:41:59.700 --> 00:42:00.660
I can start my work.

00:42:00.660 --> 00:42:05.000
So Kedro is saving each one of these points in the background along the way.

00:42:05.000 --> 00:42:06.960
So when I get a task and it's like,

00:42:06.960 --> 00:42:07.160
Hey,

00:42:07.180 --> 00:42:09.500
you've got to put a note in between these two,

00:42:09.500 --> 00:42:10.780
I can start right away.

00:42:10.780 --> 00:42:12.280
Cause the data is already sitting there.

00:42:12.280 --> 00:42:12.480
Oh,

00:42:12.480 --> 00:42:12.900
that's cool.

00:42:12.960 --> 00:42:15.500
I can also use the pipeline dag object.

00:42:15.500 --> 00:42:22.060
like Ivan mentioned to just run that section of pipeline I'm working on as I'm working.

00:42:22.060 --> 00:42:22.420
Interesting.

00:42:22.420 --> 00:42:27.000
It's a little bit like just rerun the failing tests or just this one test or something like

00:42:27.000 --> 00:42:28.300
that in the unit testing world.

00:42:28.300 --> 00:42:31.820
Like instead of trying to rerun the entire test suite for every little change.

00:42:31.820 --> 00:42:32.580
Yeah.

00:42:32.920 --> 00:42:33.560
That's a cool thing.

00:42:33.560 --> 00:42:33.980
All right.

00:42:33.980 --> 00:42:35.680
You did talk about the deployment stuff before.

00:42:35.680 --> 00:42:38.540
So maybe you want to touch on some of the deployment stuff.

00:42:38.700 --> 00:42:40.080
I guess it will just be a quick mention.

00:42:40.080 --> 00:42:43.620
So what we do support is two deployment plugins right now.

00:42:44.080 --> 00:42:45.140
The first one is Kedra Docker,

00:42:45.140 --> 00:42:47.660
which packages your Kedra project in a Docker container.

00:42:47.660 --> 00:42:49.400
And the second one is Kedra Airflow,

00:42:49.400 --> 00:42:52.040
which was built with the Airflow astronomer team,

00:42:52.040 --> 00:42:57.760
which will take your Kedra pipeline and convert it into an Airflow DAG so that you can run it on Airflow.

00:42:57.760 --> 00:43:00.420
But we also do support in our documentation,

00:43:00.420 --> 00:43:03.320
like a few guides on how to deploy Kedra on Prefect,

00:43:03.320 --> 00:43:04.260
on Kubeflow,

00:43:04.260 --> 00:43:05.540
on AWS Batch,

00:43:05.540 --> 00:43:06.860
AWS SageMaker,

00:43:06.860 --> 00:43:11.060
and AWS Databricks as well.

00:43:11.060 --> 00:43:11.620
One of them.

00:43:11.620 --> 00:43:13.720
I always feel like with AWS and Azure,

00:43:13.720 --> 00:43:14.220
there's just,

00:43:14.220 --> 00:43:16.000
no matter how much I studied,

00:43:16.000 --> 00:43:18.600
there's like three more things that are similar to what are there,

00:43:18.600 --> 00:43:19.180
but they're different.

00:43:19.180 --> 00:43:20.180
So like I know Batch,

00:43:20.180 --> 00:43:22.360
but not the one you named after that.

00:43:22.360 --> 00:43:23.040
Yeah.

00:43:23.040 --> 00:43:24.700
That's definitely the case.

00:43:24.700 --> 00:43:26.040
I believe it's AWS Databricks.

00:43:26.660 --> 00:43:31.560
But you can kind of use the same methodology if you're working with Azure Databricks as well to deploy things there.

00:43:31.560 --> 00:43:35.640
Ivan alluded to the fact that we do really pride on flexible deployment

00:43:35.640 --> 00:43:38.620
because we don't know what is your internal infrastructure like

00:43:38.620 --> 00:43:42.000
and therefore should be able to support the most generalizable case to do that.

00:43:42.000 --> 00:43:44.080
So you can definitely check out those guides.

00:43:44.080 --> 00:43:45.920
I know if there are guides missing,

00:43:45.920 --> 00:43:48.420
just raise GitHub issues and we'll look at it.

00:43:48.420 --> 00:43:49.240
As well,

00:43:49.240 --> 00:43:54.420
we add a growing tally of mentions of things that we haven't heard people necessarily using with Kedra.

00:43:54.420 --> 00:43:54.860
Yeah,

00:43:54.860 --> 00:43:55.740
it's worth checking out.

00:43:55.880 --> 00:43:56.000
Yeah.

00:43:56.000 --> 00:43:56.900
It's open source.

00:43:56.900 --> 00:43:59.160
If people want to add new deployment stories,

00:43:59.160 --> 00:44:01.240
they can go and PRs are accepted.

00:44:01.240 --> 00:44:01.900
Is that true?

00:44:01.900 --> 00:44:02.300
Yeah.

00:44:02.300 --> 00:44:02.820
Yeah.

00:44:02.820 --> 00:44:04.800
Write up a guide and we'll take it.

00:44:04.800 --> 00:44:10.740
We have a great sense of contributing guide that's available on our documentation too.

00:44:10.740 --> 00:44:12.100
That shows you how to make,

00:44:12.100 --> 00:44:12.480
I mean,

00:44:12.480 --> 00:44:17.280
PRs across like whether it's features or minor tech improvements or bug fixes,

00:44:17.280 --> 00:44:19.000
as well as documentation too,

00:44:19.000 --> 00:44:20.600
because we like to write our docs.

00:44:20.600 --> 00:44:20.920
Yeah,

00:44:20.920 --> 00:44:21.360
that's important.

00:44:21.360 --> 00:44:22.800
And coming into October,

00:44:22.800 --> 00:44:23.960
it's October.

00:44:23.960 --> 00:44:28.480
So people can come in and I think we will be really,

00:44:28.480 --> 00:44:32.440
really grateful for adding more deployment because no matter how many you have,

00:44:32.440 --> 00:44:34.120
you always run out of,

00:44:34.120 --> 00:44:36.600
or maybe differently,

00:44:36.700 --> 00:44:37.840
like no matter how many you have,

00:44:37.840 --> 00:44:39.400
you always don't have everything.

00:44:39.400 --> 00:44:42.220
And there is always someone would come and like,

00:44:42.220 --> 00:44:42.800
by the way,

00:44:42.800 --> 00:44:44.560
how do you deploy it on this AWS,

00:44:44.560 --> 00:44:45.680
whatever,

00:44:45.680 --> 00:44:46.940
the new thing that they have?

00:44:46.940 --> 00:44:47.240
It's like,

00:44:47.240 --> 00:44:48.320
how do I know?

00:44:48.320 --> 00:44:48.680
It's like,

00:44:48.760 --> 00:44:50.400
this is the first time I hear about it.

00:44:50.400 --> 00:44:53.360
So there is always room for more.

00:44:53.360 --> 00:44:55.940
And this is the thing that we would really,

00:44:55.940 --> 00:44:57.240
really love help with.

00:44:57.240 --> 00:45:01.480
So if you want to find something to contribute to for this October,

00:45:01.480 --> 00:45:02.880
maybe that could be Kedra.

00:45:02.880 --> 00:45:03.240
Yeah,

00:45:03.240 --> 00:45:04.020
that'd be awesome.

00:45:04.020 --> 00:45:04.500
Yeah.

00:45:04.500 --> 00:45:08.980
I periodically will get in October contributions to like,

00:45:08.980 --> 00:45:09.480
for example,

00:45:09.480 --> 00:45:10.840
my course projects,

00:45:10.840 --> 00:45:12.100
the GitHub repos for them.

00:45:12.100 --> 00:45:14.760
And it would be like slight changing in the wording.

00:45:14.760 --> 00:45:15.360
And if so,

00:45:15.360 --> 00:45:18.740
like if it says the Kedra documentation includes three examples to help you,

00:45:18.740 --> 00:45:19.300
you get started,

00:45:19.300 --> 00:45:21.360
they might say to help you get started.

00:45:21.360 --> 00:45:23.380
The documentation contains three examples.

00:45:23.380 --> 00:45:24.140
There's a PR.

00:45:24.140 --> 00:45:24.520
So I,

00:45:24.520 --> 00:45:24.980
it counts.

00:45:24.980 --> 00:45:25.300
I'm like,

00:45:25.300 --> 00:45:26.780
so I just got to go through and close them.

00:45:26.780 --> 00:45:27.840
So please people listening,

00:45:27.840 --> 00:45:30.360
just a minor useful contribution,

00:45:30.360 --> 00:45:31.000
but yeah,

00:45:31.000 --> 00:45:32.680
it would be great to work on this.

00:45:32.680 --> 00:45:32.920
Right.

00:45:32.920 --> 00:45:36.420
And I feel like these types of pipelines are very accessible because they,

00:45:36.420 --> 00:45:38.500
they narrow the focus so much,

00:45:38.500 --> 00:45:39.000
right.

00:45:39.000 --> 00:45:41.820
When you get down to like certain tasks and certain things,

00:45:41.820 --> 00:45:43.280
you don't have to understand the whole project.

00:45:43.280 --> 00:45:45.520
Just how do you do this other tasks slightly differently?

00:45:45.520 --> 00:45:45.880
Yeah,

00:45:45.880 --> 00:45:46.320
absolutely.

00:45:46.320 --> 00:45:48.660
And I'm pretty sure that talking about contributors,

00:45:48.660 --> 00:45:50.560
like if it's just change of words,

00:45:50.560 --> 00:45:52.080
we might not have t-shirt for you.

00:45:52.080 --> 00:45:54.360
If you're adding a guide,

00:45:54.360 --> 00:45:56.040
we would definitely send out a t-shirt.

00:45:56.040 --> 00:45:56.880
Oh,

00:45:56.880 --> 00:45:57.180
nice.

00:45:57.180 --> 00:45:57.540
Awesome.

00:45:57.540 --> 00:45:58.560
T-shirts are included,

00:45:58.560 --> 00:46:00.300
not just a passing.

00:46:01.300 --> 00:46:01.760
Uber fest.

00:46:01.760 --> 00:46:02.080
Okay.

00:46:02.080 --> 00:46:04.700
So one of the things I find is a little tricky,

00:46:04.700 --> 00:46:05.280
uh,

00:46:05.280 --> 00:46:06.380
is always talking through,

00:46:06.380 --> 00:46:08.660
or like thinking through an example of these kinds of things.

00:46:08.660 --> 00:46:09.240
They're very neat,

00:46:09.240 --> 00:46:11.180
but they also sometimes feel pretty abstract.

00:46:11.180 --> 00:46:12.880
So even you would,

00:46:12.880 --> 00:46:14.120
maybe want to talk us through,

00:46:14.120 --> 00:46:15.000
uh,

00:46:15.000 --> 00:46:16.540
just this like hello world example.

00:46:16.540 --> 00:46:18.820
I know it's hard to talk about code on audio.

00:46:18.820 --> 00:46:19.440
So not,

00:46:19.440 --> 00:46:20.660
not exactly,

00:46:20.660 --> 00:46:24.220
but just give us a sense of what it means to write one of these pipelines.

00:46:24.220 --> 00:46:24.580
Yeah.

00:46:24.580 --> 00:46:24.940
Sure.

00:46:24.940 --> 00:46:26.580
Starting from the first one is,

00:46:26.580 --> 00:46:27.100
uh,

00:46:27.100 --> 00:46:29.200
I think in the hello world example,

00:46:29.200 --> 00:46:30.140
we have,

00:46:30.140 --> 00:46:32.540
we show like what a node is and,

00:46:32.540 --> 00:46:34.420
and it's not very different than a function.

00:46:34.420 --> 00:46:35.840
It's just a function actually.

00:46:35.840 --> 00:46:36.940
And your function,

00:46:36.940 --> 00:46:38.680
we accept two types of nodes,

00:46:38.680 --> 00:46:40.280
actually three types of nodes,

00:46:40.280 --> 00:46:41.980
nodes that have only inputs,

00:46:41.980 --> 00:46:43.780
nodes that have only outputs,

00:46:43.780 --> 00:46:45.700
or nodes that have both inputs and outputs.

00:46:45.700 --> 00:46:51.080
So we don't accept functions that don't have neither inputs nor outputs.

00:46:51.280 --> 00:46:52.440
So for obvious reasons,

00:46:52.440 --> 00:46:54.680
because that doesn't do much.

00:46:54.680 --> 00:46:55.620
And,

00:46:55.620 --> 00:46:56.080
uh,

00:46:56.080 --> 00:46:57.940
you can start with your own function.

00:46:57.940 --> 00:47:00.200
Let's say you can call it return greeting,

00:47:00.200 --> 00:47:01.880
which will just return hello.

00:47:01.880 --> 00:47:02.240
So,

00:47:02.240 --> 00:47:02.620
uh,

00:47:02.620 --> 00:47:03.920
just let me elaborate on that for a second.

00:47:03.920 --> 00:47:09.300
So what you have is a Python function that takes no parameters and returns a string.

00:47:09.300 --> 00:47:16.660
But the thing that's notable about this is it doesn't have a decorator or some other special thing about it.

00:47:16.660 --> 00:47:20.880
It's literally just a bare Python function that has nothing to do with case.

00:47:20.880 --> 00:47:21.900
With Kidro per se.

00:47:21.900 --> 00:47:22.260
Yeah,

00:47:22.260 --> 00:47:22.780
absolutely.

00:47:22.780 --> 00:47:29.100
So the reason why we did it this way was to allow all kinds of people just to create functions.

00:47:29.100 --> 00:47:31.560
Like if you don't know decorators and these kinds of things,

00:47:31.560 --> 00:47:32.620
you don't need to know that.

00:47:32.620 --> 00:47:39.400
And then the second one is you might actually use functions from libraries that were not at all designed to be part of our framework.

00:47:39.720 --> 00:47:40.000
You know,

00:47:40.000 --> 00:47:41.360
if you're importing a function,

00:47:41.360 --> 00:47:43.480
you cannot add a decorator on that one.

00:47:43.480 --> 00:47:43.920
Well,

00:47:43.920 --> 00:47:46.360
there is ways obviously in Python always,

00:47:46.360 --> 00:47:48.160
but it's not,

00:47:48.160 --> 00:47:48.480
you know,

00:47:48.480 --> 00:47:49.060
very intuitive.

00:47:49.060 --> 00:47:52.080
So we just work with pure functions.

00:47:52.280 --> 00:47:56.840
how that gets turned into a node is actually more curious here.

00:47:56.840 --> 00:47:58.040
And then we have a,

00:47:58.040 --> 00:48:00.620
like it happens to a helper function we have,

00:48:00.620 --> 00:48:02.620
which is called node conveniently.

00:48:02.880 --> 00:48:07.840
And then you provide your function and you provide your inputs and outputs strings.

00:48:07.840 --> 00:48:10.500
So these are the three things you can add.

00:48:10.500 --> 00:48:11.380
So for example,

00:48:11.380 --> 00:48:13.020
for this return greeting function,

00:48:13.020 --> 00:48:15.360
your inputs would be none.

00:48:15.360 --> 00:48:15.700
So,

00:48:15.700 --> 00:48:19.380
because you don't have any inputs and your outputs could be a string,

00:48:19.380 --> 00:48:21.200
which says my salutation.

00:48:21.200 --> 00:48:22.360
That's in our,

00:48:22.360 --> 00:48:24.580
how we've done in the hello world example.

00:48:25.120 --> 00:48:28.480
So this will create a node in Kedro sense,

00:48:28.480 --> 00:48:30.740
which you can embed later in a pipeline.

00:48:30.740 --> 00:48:31.140
Nice.

00:48:31.140 --> 00:48:32.520
And then here,

00:48:32.520 --> 00:48:34.540
the output has a static.

00:48:34.540 --> 00:48:36.060
Is that like the name of the output?

00:48:36.060 --> 00:48:37.260
So you can use it in the pipeline?

00:48:37.260 --> 00:48:37.620
Yeah.

00:48:37.620 --> 00:48:38.380
Not the value,

00:48:38.380 --> 00:48:39.340
but like the name.

00:48:39.340 --> 00:48:40.660
So you can refer to it later on,

00:48:40.660 --> 00:48:40.840
right?

00:48:40.840 --> 00:48:41.140
Yeah,

00:48:41.140 --> 00:48:41.500
exactly.

00:48:41.500 --> 00:48:45.080
So you can think of them as variables in a way as a variable,

00:48:45.080 --> 00:48:45.940
the variable,

00:48:45.940 --> 00:48:51.140
like you can define where to store that valuable through the data catalog later.

00:48:51.140 --> 00:48:51.480
Yeah.

00:48:51.480 --> 00:48:52.020
Very nice.

00:48:52.020 --> 00:48:53.940
So it seems super easy.

00:48:54.080 --> 00:48:56.200
You have also a more elaborate example.

00:48:56.200 --> 00:48:58.680
It says a space flight tutorial.

00:48:58.680 --> 00:48:59.100
Yeah.

00:48:59.100 --> 00:49:00.060
So people want to,

00:49:00.060 --> 00:49:00.660
what is this?

00:49:00.660 --> 00:49:02.080
And we don't have to talk to it.

00:49:02.080 --> 00:49:03.480
Just if people want to go and play with it,

00:49:03.480 --> 00:49:04.060
what is this one?

00:49:04.060 --> 00:49:08.740
I really want the editor to introduce it because initially when we were thinking of an example,

00:49:08.740 --> 00:49:12.240
I think she came up with the idea to make it more of a space flight.

00:49:12.240 --> 00:49:14.100
And we actually,

00:49:14.100 --> 00:49:20.180
it was quite funny that this led to something more interesting that the editor can share about.

00:49:20.180 --> 00:49:20.460
Yeah.

00:49:20.460 --> 00:49:20.720
Nice.

00:49:20.720 --> 00:49:22.620
I think it was actually Dimitri that did this.

00:49:22.820 --> 00:49:24.800
he was a former maintainer on the Kendra project.

00:49:24.800 --> 00:49:28.620
But the scenario for this tutorial is that it's the year 2160.

00:49:28.620 --> 00:49:32.980
You're somehow a data scientist predicting the price of space flights to the moon and back.

00:49:32.980 --> 00:49:35.220
And you have access to three data sources,

00:49:35.220 --> 00:49:38.220
information about companies that are flying people to the moon,

00:49:38.220 --> 00:49:40.440
reviews on their shuttles that they have,

00:49:40.500 --> 00:49:43.880
and then also the customer reviews that they've given while working with those companies.

00:49:43.880 --> 00:49:47.980
And the whole thing is you just want to predict the price of a space flight.

00:49:47.980 --> 00:49:49.620
So if you go through the tutorial,

00:49:49.620 --> 00:49:52.700
you'll get acquainted with all the way from beginner functionality,

00:49:52.700 --> 00:49:54.620
like install Kedro,

00:49:54.620 --> 00:49:55.620
you know,

00:49:55.620 --> 00:49:57.180
set up my project template,

00:49:57.180 --> 00:49:58.900
all the way to kind of intermediate,

00:49:58.900 --> 00:50:01.460
just before intermediate functionality in Kedro.

00:50:01.900 --> 00:50:03.920
So you get up to speed in about like an hour,

00:50:03.920 --> 00:50:05.220
an hour and a half in total,

00:50:05.220 --> 00:50:06.920
as you go through the full tutorial.

00:50:06.920 --> 00:50:08.700
And it will teach you all the basics of like,

00:50:08.700 --> 00:50:10.020
how do I use the project template?

00:50:10.020 --> 00:50:11.520
How do I use the data catalog?

00:50:11.520 --> 00:50:13.300
How do I construct my pipeline?

00:50:13.300 --> 00:50:15.120
How do I visualize my pipeline?

00:50:15.120 --> 00:50:17.020
And how do I package my project as well?

00:50:17.560 --> 00:50:20.580
So it's really useful for getting up to speed on that.

00:50:20.580 --> 00:50:24.240
But we've had a really great time with the space flights project,

00:50:24.240 --> 00:50:26.300
because we found out that NASA,

00:50:26.300 --> 00:50:27.920
a team at NASA was using Kedro.

00:50:27.920 --> 00:50:29.380
So it was almost like a dream.

00:50:29.380 --> 00:50:29.980
Oh, nice.

00:50:29.980 --> 00:50:32.340
When we discovered,

00:50:32.340 --> 00:50:33.220
when we discovered that,

00:50:33.220 --> 00:50:36.360
because it was like we went full circle and went to the moon with them.

00:50:36.360 --> 00:50:39.540
They're actually doing space flights.

00:50:39.540 --> 00:50:40.000
Amazing.

00:50:40.000 --> 00:50:40.600
Yeah.

00:50:40.600 --> 00:50:43.640
I'm pretty sure they chose this only because of our tutorial.

00:50:43.640 --> 00:50:46.860
We were thinking Luigi,

00:50:47.000 --> 00:50:49.600
but then we saw this tutorial and we knew this was the one.

00:50:49.600 --> 00:50:53.780
Now, I do love these imaginative examples and tutorials

00:50:53.780 --> 00:50:55.160
rather than something really boring.

00:50:55.160 --> 00:50:56.840
Like, oh, let's build a to-do list.

00:50:56.840 --> 00:50:57.880
And here's how we're going to do it.

00:50:57.880 --> 00:50:59.140
Like, okay.

00:50:59.140 --> 00:51:01.600
No, this sounds really fun.

00:51:01.600 --> 00:51:05.080
So if people want to get a sense for what it's like to work with Kedro,

00:51:05.080 --> 00:51:08.640
you recommend this as the tutorial to work through to get started?

00:51:08.640 --> 00:51:10.080
Definitely recommend this.

00:51:10.080 --> 00:51:13.080
And then there are a few online resources if you want to use them.

00:51:13.080 --> 00:51:14.600
We have a blogger.

00:51:14.600 --> 00:51:16.440
I mean, he's been inactive for a while,

00:51:16.440 --> 00:51:18.540
but he still has really good YouTube tutorials.

00:51:18.540 --> 00:51:22.960
Search for Data Engineer 1 and look for his walkthrough of the tutorial there.

00:51:22.960 --> 00:51:27.020
It's also very handy for getting up to speed if you want a video kind of like workflow

00:51:27.020 --> 00:51:28.720
as you go through the tutorial.

00:51:28.720 --> 00:51:34.200
But we are going to be repiloting some live stream workshops of us working through the tutorial

00:51:34.200 --> 00:51:35.820
ourselves later on in the year.

00:51:36.220 --> 00:51:40.840
So definitely do look out for that on, I think, probably the Quantum Black YouTube will have

00:51:40.840 --> 00:51:41.060
them.

00:51:41.060 --> 00:51:43.660
And then also, oh, yeah, you can actually see.

00:51:43.660 --> 00:51:44.440
I'm here, opened up.

00:51:44.440 --> 00:51:46.900
First, I got to get through the ad for people to see.

00:51:46.900 --> 00:51:48.740
I'm not logged in over here.

00:51:48.740 --> 00:51:49.760
But yeah, there we go.

00:51:49.760 --> 00:51:51.120
That's Data Engineer 1 in action.

00:51:51.120 --> 00:51:55.320
And then I definitely recommend either joining in on those live streams as we host them.

00:51:55.320 --> 00:51:55.920
Nice.

00:51:55.920 --> 00:51:58.520
Or live the follow-up YouTube videos as we do them.

00:51:58.520 --> 00:51:58.980
Yeah, cool.

00:51:58.980 --> 00:52:02.280
I'll link to some of the YouTube videos for people to go check out there.

00:52:02.280 --> 00:52:03.020
Very nice.

00:52:03.020 --> 00:52:04.680
So we're getting pretty short on time.

00:52:04.680 --> 00:52:09.420
Maybe one thing we could just do to wrap this up is maybe, I know you talked about some of

00:52:09.420 --> 00:52:11.480
the cool libraries and stuff you used to build this.

00:52:11.480 --> 00:52:15.720
Maybe you could just talk a little bit briefly about the internals and some of the fun things

00:52:15.720 --> 00:52:16.700
you used there.

00:52:16.700 --> 00:52:17.060
Sure.

00:52:17.060 --> 00:52:20.060
So probably good libraries that were mentioning.

00:52:20.060 --> 00:52:24.540
And maybe I will not use the time to too much about Kedrus internals, but like just to

00:52:24.540 --> 00:52:26.960
have a shout out for nice libraries that we found out.

00:52:26.960 --> 00:52:27.200
Yeah.

00:52:27.200 --> 00:52:31.000
One thing that Waylon already mentioned was FSPEC.

00:52:31.000 --> 00:52:32.380
I think that was amazing.

00:52:32.380 --> 00:52:35.580
And we really found it super useful.

00:52:35.580 --> 00:52:43.320
I think it is in the Anaconda ecosystem developed by some of the people there.

00:52:43.820 --> 00:52:49.200
And the good news is that actually it's also becoming part of Pandas.

00:52:49.200 --> 00:52:55.400
So whenever you're doing load CSV in the newest version of Pandas, they use FSPEC as well.

00:52:55.400 --> 00:52:56.060
Oh yeah.

00:52:56.060 --> 00:53:01.440
And now it says it's also in Dask, Pandas, even DVC and many other things.

00:53:01.440 --> 00:53:08.220
This has been really, really useful because it simplified a lot of our code about the datasets.

00:53:08.220 --> 00:53:12.140
We didn't have to, previously we had the dataset for S3.

00:53:12.320 --> 00:53:18.980
We had a dataset for GCP and GCS and Azure Blob Store and all of that.

00:53:18.980 --> 00:53:19.620
I don't know.

00:53:19.620 --> 00:53:22.380
It's super annoying because they do exactly the same thing.

00:53:22.380 --> 00:53:26.680
You do it like many times, just changing endpoints and things like that.

00:53:26.680 --> 00:53:28.600
It was super frustrating to maintain it.

00:53:28.600 --> 00:53:31.460
And when we have many of those datasets, it was super frustrating.

00:53:31.460 --> 00:53:38.680
And when this came out, it simplified basically, maybe reduced our code base for datasets three times or something like that.

00:53:38.680 --> 00:53:38.940
Wow.

00:53:38.940 --> 00:53:39.280
Yeah.

00:53:39.280 --> 00:53:41.600
Because they do that abstraction for you.

00:53:41.600 --> 00:53:42.060
Yeah.

00:53:42.060 --> 00:53:43.440
You just pass it along, right?

00:53:43.440 --> 00:53:43.740
Yeah.

00:53:43.880 --> 00:53:51.240
So if someone wants to treat a remote database as kind of like a local file, I think AppSPEC is really useful too.

00:53:51.240 --> 00:53:51.520
Cool.

00:53:51.520 --> 00:53:52.400
Let's see.

00:53:52.400 --> 00:53:55.960
Another one that you mentioned was Dynacomp.

00:53:55.960 --> 00:53:56.400
Yeah.

00:53:56.400 --> 00:53:58.320
That's a quite nice one.

00:53:58.320 --> 00:53:59.880
We started using it recently.

00:53:59.880 --> 00:54:07.960
What we wanted to do in Kedro, because we are a framework, and there is some framework code that needs to call user code.

00:54:08.900 --> 00:54:15.140
And that's a bit challenging because you don't know what the package name of the user, because the user will create their own code.

00:54:15.140 --> 00:54:18.860
They will choose a package name, and you don't know what to import from.

00:54:18.860 --> 00:54:31.180
So we came up with a pattern that was actually applied by Django, which you kind of configure projects by their package name, and then you load some of the settings.

00:54:31.180 --> 00:54:38.680
So if people know Django, they know that they have an extensive way of doing settings in order to configure different things in Django.

00:54:38.680 --> 00:54:47.740
How Dynacomp helped us with that is because it was a very extensive, like very clean abstraction to do lazy loading of settings.

00:54:47.740 --> 00:54:50.880
And why did we need lazy loading of settings?

00:54:50.880 --> 00:54:55.380
And for example, you might have multiple pipelines in Kedro.

00:54:55.380 --> 00:54:57.100
One of them would not be completed.

00:54:57.100 --> 00:54:58.460
There could be some errors in it.

00:54:58.460 --> 00:55:01.260
But you still want to run the other pipeline.

00:55:01.260 --> 00:55:07.120
And if you eagerly load all of that, then your code will fail for no reason.

00:55:07.120 --> 00:55:08.100
Right, right.

00:55:08.300 --> 00:55:10.500
Even if you weren't actually going to end up running that part.

00:55:10.500 --> 00:55:11.400
Yeah, exactly.

00:55:11.400 --> 00:55:15.560
It's almost like a compiled language versus a dynamic language.

00:55:15.560 --> 00:55:17.940
Yeah, and here Python shines, right?

00:55:17.940 --> 00:55:22.140
Because you can have things like Dynacomp, where you don't need to compile that path.

00:55:22.140 --> 00:55:28.440
So it helped us a lot with making those settings loaded lazily, because there were different things.

00:55:28.440 --> 00:55:31.080
You can add validators to validate settings and so on.

00:55:31.080 --> 00:55:32.180
It's fairly extensive.

00:55:32.180 --> 00:55:35.040
I recommend people to read their documentation.

00:55:35.040 --> 00:55:36.840
You can use it for many things.

00:55:37.920 --> 00:55:41.080
So yeah, it's a nice package we stumbled on.

00:55:41.080 --> 00:55:41.700
Yeah, very neat.

00:55:41.700 --> 00:55:42.980
Those are great recommendations.

00:55:42.980 --> 00:55:48.220
So with just a little bit of time left, let's wrap up our conversation with where things are going.

00:55:48.220 --> 00:55:55.560
Yatunda, maybe want to give us a roadmap future view of what people who are maybe using Kedro now are like, what's coming?

00:55:55.720 --> 00:56:02.720
So I guess maybe one of the next upcoming feature that you'll start to see being rolled out is experiment tracking in Kedro.

00:56:02.880 --> 00:56:09.700
So what we're doing is Kedro is already, I think Waylon spoke to it, really aware of like being able to save your data sets.

00:56:09.700 --> 00:56:12.920
And for us, our data catalog would apply to models as well.

00:56:12.920 --> 00:56:15.640
So we already had some form of model versioning in Kedro.

00:56:15.640 --> 00:56:20.540
But what we really needed to extend, and we already have a concept of parameters too, so inputs.

00:56:20.720 --> 00:56:28.100
But what we really needed to do was think around how do we think about features and how do we think about metrics coming out of the pipeline as well.

00:56:28.500 --> 00:56:33.720
And those are the two additions that we've made kind of as additional data sets in the Kedro framework too.

00:56:33.720 --> 00:56:39.960
And then the last thing that we had to think around was like, how do we collect all of these things as one unit or one experiment?

00:56:39.960 --> 00:56:44.680
That concept is actually very, it's actually been implemented on the framework side.

00:56:44.680 --> 00:56:48.620
So you can really start to interact with the, you know, experiment tracking functionality there.

00:56:48.620 --> 00:56:57.160
But a lot of the massive changes are going to be done on the front end, where you'll be able to, you know, look at the list of experiments that you've run, compare them as well.

00:56:57.160 --> 00:57:05.380
And then we'll be building up like the functionality as we see fit, including probably MLflow model registry and model serving integration as well.

00:57:05.380 --> 00:57:07.920
And that's probably going to be done through our data catalog as well.

00:57:07.920 --> 00:57:17.260
Oh, that's cool. Is that if I go to the trouble to train up a model and it takes a day, I can store that and other people can just pull it down and use it without spending another day?

00:57:17.380 --> 00:57:19.920
Exactly. That's the large thinking around it.

00:57:19.920 --> 00:57:22.260
So yeah, you can definitely look forward to that.

00:57:22.260 --> 00:57:26.980
There's some open issues on the, our GitHub repository around configuration.

00:57:26.980 --> 00:57:34.300
So I do suggest if users have, you know, interacted with Kedro and you've had issues with scaling configuration, please do check it out and give us comment there.

00:57:34.300 --> 00:57:40.840
Because that will decide whether or not, like when we pick those, those issues up based on like user responses there.

00:57:40.840 --> 00:57:43.060
So that's what I think you can look forward to.

00:57:43.060 --> 00:57:44.420
Oh, fantastic. All right.

00:57:44.760 --> 00:57:52.400
Even I think we're going to take your two libraries you mentioned as the notable PyPI projects, just for the sake of time, since we're kind of over.

00:57:52.400 --> 00:57:55.200
I'll just do one final question for everyone out there.

00:57:55.200 --> 00:57:59.020
And that's if you're going to write some Python code, what editor do you use?

00:57:59.020 --> 00:58:00.100
Even you want to go first?

00:58:00.100 --> 00:58:01.900
IntelliJ.

00:58:02.140 --> 00:58:04.420
I come from Java and Scala world.

00:58:04.420 --> 00:58:05.760
So I stick with IntelliJ.

00:58:05.760 --> 00:58:09.780
So basically the Python support in like full-on IntelliJ, right?

00:58:09.780 --> 00:58:10.240
Yeah.

00:58:10.240 --> 00:58:10.520
Yeah.

00:58:10.520 --> 00:58:10.740
Yeah.

00:58:10.740 --> 00:58:12.380
And not PyCharm, but IntelliJ.

00:58:12.380 --> 00:58:13.240
Yep.

00:58:13.240 --> 00:58:13.780
Go ahead.

00:58:13.920 --> 00:58:16.700
Ivan says like, no PyCharm, I'm full PyCharm.

00:58:16.700 --> 00:58:19.140
Same here.

00:58:19.140 --> 00:58:21.620
There's arguments on the team about this.

00:58:21.620 --> 00:58:22.780
Oh, is there?

00:58:22.780 --> 00:58:23.960
This is a point of contention.

00:58:23.960 --> 00:58:24.360
I see.

00:58:24.360 --> 00:58:27.900
That's funny because they're so similar, right?

00:58:27.900 --> 00:58:29.860
It's not like VS Code versus PyCharm.

00:58:29.860 --> 00:58:31.040
Oh, Aylan, how about you?

00:58:31.140 --> 00:58:32.740
I'm an avid NeoVim user.

00:58:32.740 --> 00:58:39.680
You know, part of my workflow as being a lead data scientist is I bounce between probably

00:58:39.680 --> 00:58:46.400
like a dozen projects a day between like actual running pipelines, or maybe it's like a couple

00:58:46.400 --> 00:58:49.560
of our internal libraries that help like those things run.

00:58:49.560 --> 00:58:55.300
And it's really nice to have something lightweight that can run with pretty low resources.

00:58:55.300 --> 00:59:00.120
Also, having it running in Tmux makes it easy to like a few keystrokes.

00:59:00.300 --> 00:59:03.000
They can go into a specific project.

00:59:03.000 --> 00:59:05.460
The editors, they all tend to look the same.

00:59:05.460 --> 00:59:07.480
And you have a bunch of projects looking the same.

00:59:07.480 --> 00:59:10.300
It's very easy to edit the wrong one.

00:59:10.300 --> 00:59:10.680
Yeah.

00:59:10.680 --> 00:59:11.200
Yeah.

00:59:11.200 --> 00:59:11.680
Cool.

00:59:11.680 --> 00:59:12.280
All right.

00:59:12.280 --> 00:59:13.120
A good recommendation.

00:59:13.120 --> 00:59:13.660
All right.

00:59:13.660 --> 00:59:16.060
Well, thank you all for being here.

00:59:16.060 --> 00:59:17.800
Maybe final call to action.

00:59:17.800 --> 00:59:19.320
People want to get started with Kedro.

00:59:19.320 --> 00:59:21.000
Bring it into the organization.

00:59:21.000 --> 00:59:21.540
Try it out.

00:59:21.540 --> 00:59:22.160
What do you all say?

00:59:22.160 --> 00:59:23.580
Well, you know how to get started.

00:59:23.580 --> 00:59:27.280
Get into the Spaceflight tutorial and then just shout if you have any issues.

00:59:27.280 --> 00:59:28.280
We're up on Discord.

00:59:28.580 --> 00:59:31.000
And we also do have a GitHub discussions page as well.

00:59:31.000 --> 00:59:31.800
So you can just flag.

00:59:31.800 --> 00:59:34.840
We help users across the different levels of where they find themselves.

00:59:34.840 --> 00:59:36.380
So definitely do that.

00:59:36.380 --> 00:59:36.600
Yeah.

00:59:36.600 --> 00:59:40.180
And I guess Quantum Black does consulting for Kedro.

00:59:40.180 --> 00:59:43.360
So if people have these projects and they're like, I'm not sure we can handle this ourselves,

00:59:43.360 --> 00:59:44.880
they could probably hire you all, right?

00:59:45.040 --> 00:59:47.860
We've never quite had that level of interaction.

00:59:47.860 --> 00:59:54.740
It's not that a Quantum Black data science and data engineering team will go out and use Kedro

00:59:54.740 --> 00:59:59.000
as part of a larger engagement on like, how do we make a business problem?

00:59:59.000 --> 01:00:01.440
So you can definitely learn Kedro through that way.

01:00:01.440 --> 01:00:05.920
But you're in the open source community as we move in the open source space.

01:00:05.920 --> 01:00:08.440
It would definitely be through the channels that we have available.

01:00:08.440 --> 01:00:08.780
Cool.

01:00:08.880 --> 01:00:12.640
One thing to mention is like, if people want to engage with Quantum Black because they know

01:00:12.640 --> 01:00:15.500
about Kedro, please mention that.

01:00:16.680 --> 01:00:20.580
I mean, like, we found it because of Kedro, you know, the Kedro team.

01:00:20.580 --> 01:00:23.100
So that, you know, we get the Keds.

01:00:23.100 --> 01:00:24.200
Yeah.

01:00:24.200 --> 01:00:25.440
Awesome.

01:00:25.440 --> 01:00:29.840
Yeah, I bring that up because there's different ways to support open source, right?

01:00:29.840 --> 01:00:34.880
I mean, there's the MongoDB model where they sell MongoDB as a service and Atlas and all

01:00:34.880 --> 01:00:35.220
that.

01:00:35.220 --> 01:00:37.940
There's, you know, like Tidelift.

01:00:37.940 --> 01:00:39.440
There's GitHub support.

01:00:39.440 --> 01:00:43.980
But here's like yet another way in which this project is being grown and being supported

01:00:43.980 --> 01:00:46.600
because it's, you know, supporting you all doing your work.

01:00:46.600 --> 01:00:47.180
So, yeah.

01:00:47.180 --> 01:00:52.920
So, I mean, if that's the case, then I'll definitely say we do really want to be able to help a

01:00:52.920 --> 01:00:55.700
lot of people in the industry as well, because we know that it's needed.

01:00:55.700 --> 01:01:00.320
And we obviously recognize that as a framework, especially in the data science space, we are

01:01:00.320 --> 01:01:01.500
a bit of a first mover.

01:01:01.500 --> 01:01:05.620
So we suffer a lot of like first mover pains where people are like, why on earth do I need

01:01:05.620 --> 01:01:06.140
a framework?

01:01:06.140 --> 01:01:07.180
I don't need a framework.

01:01:07.420 --> 01:01:12.020
So if you help us with breaking through those barriers, like please go for it and be an

01:01:12.020 --> 01:01:12.360
advocate.

01:01:12.360 --> 01:01:14.120
And I guess in this sense, be a Kedroid.

01:01:14.120 --> 01:01:15.980
Right on.

01:01:15.980 --> 01:01:16.580
All right.

01:01:16.580 --> 01:01:19.360
Yatunda, Waylon, even thank you all for being here.

01:01:19.360 --> 01:01:22.340
It's been great to learn about Kedro and great to chat with you.

01:01:22.340 --> 01:01:22.900
It's been awesome.

01:01:22.900 --> 01:01:23.840
Thank you so much.

01:01:23.840 --> 01:01:24.380
Thank you.

01:01:24.380 --> 01:01:24.660
Bye.

01:01:24.660 --> 01:01:25.180
Thanks, Michael.

01:01:25.180 --> 01:01:25.440
Bye.

01:01:25.440 --> 01:01:29.240
This has been another episode of Talk Python To Me.

01:01:29.240 --> 01:01:34.200
Our guests on this episode have been Yatunda Dada, Waylon Walker, and even Donov.

01:01:34.200 --> 01:01:38.040
And it's been brought to you by Tab9 and us over at Talk Python Training.

01:01:38.040 --> 01:01:40.440
And the transcripts are brought to you by Assembly AI.

01:01:40.440 --> 01:01:43.020
Supercharge your editors.

01:01:43.020 --> 01:01:44.520
Auto-complete with Tab9.

01:01:44.520 --> 01:01:49.780
The editor add-in that uses AI to learn your coding styles and preferences and make you even

01:01:49.780 --> 01:01:50.380
more effective.

01:01:50.380 --> 01:01:54.180
Visit talkpython.fm/Tab9 to get started.

01:01:54.720 --> 01:01:57.460
Do you need a great automatic speech-to-text API?

01:01:57.460 --> 01:02:00.000
Get human-level accuracy in just a few lines of code.

01:02:00.000 --> 01:02:02.840
Visit talkpython.fm/assemblyai.

01:02:02.840 --> 01:02:04.620
Want to level up your Python?

01:02:04.620 --> 01:02:08.760
We have one of the largest catalogs of Python video courses over at Talk Python.

01:02:08.760 --> 01:02:13.860
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:02:13.860 --> 01:02:16.520
And best of all, there's not a subscription in sight.

01:02:16.520 --> 01:02:19.420
Check it out for yourself at training.talkpython.fm.

01:02:19.560 --> 01:02:24.100
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:02:24.100 --> 01:02:25.420
We should be right at the top.

01:02:25.420 --> 01:02:30.580
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:02:30.580 --> 01:02:34.780
and the direct RSS feed at /rss on talkpython.fm.

01:02:34.780 --> 01:02:38.200
We're live streaming most of our recordings these days.

01:02:38.200 --> 01:02:41.620
If you want to be part of the show and have your comments featured on the air,

01:02:41.620 --> 01:02:46.000
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:02:46.000 --> 01:02:47.900
This is your host, Michael Kennedy.

01:02:47.900 --> 01:02:49.180
Thanks so much for listening.

01:02:49.180 --> 01:02:50.360
I really appreciate it.

01:02:50.360 --> 01:02:52.280
Now get out there and write some Python code.

01:02:52.280 --> 01:03:22.260
Thank you.

