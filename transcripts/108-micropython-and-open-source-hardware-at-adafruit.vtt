WEBVTT

00:00:00.001 --> 00:00:05.360
Want to learn how to build an Ironman-like arc reactor accessory or maybe a solar charging backpack?

00:00:05.360 --> 00:00:09.540
What if you could program these devices with Python? Now that would be cool.

00:00:09.540 --> 00:00:15.140
In this episode, we're going to be talking about a project and a company combining to make this possible.

00:00:15.140 --> 00:00:22.120
This week, you'll meet Tony DeCola, who works at Adafruit, a company making hardware programming accessible to everyone.

00:00:22.120 --> 00:00:28.060
And we'll also be talking about MicroPython, which lets you program these cool devices in Python.

00:00:28.460 --> 00:00:33.660
This is Talk Python To Me, episode 108, recorded April 18th, 2017.

00:00:56.920 --> 00:01:04.900
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities.

00:01:04.900 --> 00:01:09.020
This is your host, Michael Kennedy. Follow me on Twitter, where I'm @mkennedy.

00:01:09.020 --> 00:01:12.900
Keep up with the show and listen to past episodes at talkpython.fm.

00:01:12.900 --> 00:01:15.480
And follow the show on Twitter via at Talk Python.

00:01:16.340 --> 00:01:20.520
This episode is brought to you by Advanced Digital and the Strange Loop Conference.

00:01:20.520 --> 00:01:24.440
Be sure to check out what they're offering during their segments. It helps support the show.

00:01:24.440 --> 00:01:26.420
Tony, welcome to Talk Python.

00:01:26.420 --> 00:01:28.100
Hey, it's great to be here. Thanks a lot.

00:01:28.100 --> 00:01:33.980
Yeah, I'm really excited to talk about hardware and MicroPython and all the stuff that we got on deck today.

00:01:33.980 --> 00:01:37.640
So that's going to be really fun. But before we do, let's start with your story.

00:01:37.640 --> 00:01:38.780
How do you get into programming in Python?

00:01:39.000 --> 00:01:43.900
Yeah, so I think like a lot of people that you've had on the show, I got into programming just as a kid.

00:01:43.900 --> 00:01:50.900
So when I was 13 or 14, I remember at the time we had a 486 and I was using QBasic to learn how to do programming.

00:01:50.900 --> 00:01:56.940
Or it was just a fascinating thing to me to understand like, wow, I can actually make something that controls the computer.

00:01:57.380 --> 00:02:01.360
And of course, I wanted to make video games. And that seemed like the coolest thing for me.

00:02:01.360 --> 00:02:05.180
But it was just a really interesting passion that I followed as a kid.

00:02:05.180 --> 00:02:08.260
Just took me all the way through college, studied computer science.

00:02:08.260 --> 00:02:14.920
And Python is interesting. So I remember in college, this was around maybe the early 2000s or so,

00:02:14.920 --> 00:02:17.960
I'd started to hear about Python and it had been around for quite a while.

00:02:17.960 --> 00:02:23.820
But I played around with it. I think I'd learned like the basic syntax and then put it away and didn't use it for a long time.

00:02:24.060 --> 00:02:29.100
And I went on and worked a lot in industry with like some of the managed languages like C#.

00:02:29.100 --> 00:02:35.920
And I did a lot with like C++ originally. But I kind of came back to Python maybe about 10 years ago.

00:02:35.920 --> 00:02:42.820
I was working for an online service, SkyDrive, like what used to be called SkyDrive, a big file store service.

00:02:42.820 --> 00:02:48.400
And we had to do a lot of data processing. So things like looking at log files and analyzing data.

00:02:48.400 --> 00:02:52.920
And that stuff is not so fun to do in some of the languages like C++.

00:02:53.480 --> 00:02:58.460
So Python was like a perfect fit for that. So I started to use a lot of that for things like manipulating data.

00:02:58.460 --> 00:03:00.760
And just really kind of fell in love with the language.

00:03:00.760 --> 00:03:06.320
You know, it's turned into something that becomes kind of the first thing I reach for now when I have some problem of,

00:03:06.320 --> 00:03:11.980
you know, whether it's even just like doing something on the desktop, like manipulating files, manipulating data.

00:03:12.420 --> 00:03:18.180
It's what I really like and enjoy using. So it's become kind of, I'd say, the primary language that I use.

00:03:18.180 --> 00:03:25.680
And then as I've worked with Adafruit, it's been something that's been interesting to explore of how you take Python and use it to control hardware,

00:03:25.680 --> 00:03:28.560
because that's been something that's been a little bit difficult.

00:03:28.560 --> 00:03:34.100
You know, hardware has typically been a lot of low level languages and direct access to the hardware.

00:03:34.100 --> 00:03:36.060
Right. That's the domain of C, right?

00:03:36.300 --> 00:03:41.400
Exactly. Yeah. So having like the C and C++ knowledge, that's what your bread and butter was.

00:03:41.580 --> 00:03:44.180
But nowadays, things have kind of changed a little bit.

00:03:44.180 --> 00:03:47.300
So there are a lot of new processors and, you know, it's Moore's law.

00:03:47.300 --> 00:03:49.460
Everything is getting faster, even at the low end.

00:03:49.460 --> 00:03:53.560
So these little processors can actually start to run things like Python code.

00:03:53.560 --> 00:03:56.880
And so that's super exciting to me to start to see that kind of crossover there.

00:03:56.880 --> 00:03:58.720
I think that's really cool.

00:03:58.720 --> 00:04:00.140
Like a couple of questions.

00:04:00.140 --> 00:04:05.340
One, coming from like static languages that are based on C with curly braces,

00:04:05.340 --> 00:04:11.180
like how did you feel about coming into Python with the white space and the dynamic types and whatnot?

00:04:11.760 --> 00:04:13.380
Oh, sure. Yeah, yeah, yeah.

00:04:13.380 --> 00:04:19.100
I think everyone maybe goes through like a phase of like it feels weird and you maybe push back against it

00:04:19.100 --> 00:04:20.920
and think like, oh, wow, this is horrible.

00:04:20.920 --> 00:04:22.240
Like I don't understand what's happening.

00:04:22.240 --> 00:04:25.480
And the biggest thing for me was losing the destructor.

00:04:25.480 --> 00:04:30.180
Like, you know, in C++, I love having that knowledge of when some object goes in and out of scope,

00:04:30.180 --> 00:04:31.120
you can do certain things.

00:04:31.120 --> 00:04:34.920
Then in Python and some of these managed languages, you just don't have that control anymore.

00:04:34.920 --> 00:04:37.580
So, yeah, your first reaction is kind of to push back.

00:04:38.140 --> 00:04:43.620
But then after a few years and using it for a while, you get into that zen of Python of just kind of understanding.

00:04:43.620 --> 00:04:47.280
And like nowadays, I love how Python, it almost feels like clay.

00:04:47.280 --> 00:04:51.060
Like you can just model it into whatever paradigm of programming you like,

00:04:51.060 --> 00:04:55.020
like whether you want to do object oriented or functional or some combination of those.

00:04:55.620 --> 00:05:01.440
So it's, yeah, it was a little bit of an adjustment period, but you kind of have to think more, I guess, Pythonically,

00:05:01.440 --> 00:05:05.300
which was another thing that took a while to kind of figure out and understand what that means.

00:05:05.300 --> 00:05:11.160
But yeah, really not try to do things that you would do in the C and C++ world.

00:05:11.160 --> 00:05:15.320
Look more at, okay, how do you do that in the Python world and just adjust to that.

00:05:15.320 --> 00:05:17.920
So, yeah, there's a definite period of changing.

00:05:18.300 --> 00:05:18.860
Yeah, that's interesting.

00:05:18.860 --> 00:05:24.780
I still remember that it seemed really odd to me, like using white space for managing structure and stuff.

00:05:24.780 --> 00:05:27.580
And then I got really comfortable.

00:05:27.580 --> 00:05:29.720
It really took a few hours to actually get comfortable.

00:05:29.720 --> 00:05:33.420
But then a week or so later, I went back and I'm like, whoa, what are all these symbols?

00:05:33.420 --> 00:05:34.580
And why is all this stuff here?

00:05:34.580 --> 00:05:35.900
This is so not fun anymore.

00:05:35.900 --> 00:05:37.300
And like a week ago, I really loved it.

00:05:37.300 --> 00:05:37.840
It was so weird.

00:05:38.020 --> 00:05:38.580
Oh, yeah, exactly.

00:05:38.580 --> 00:05:42.600
And the problem is, unfortunately, with a lot of the curly braces, everyone has a different style.

00:05:42.600 --> 00:05:46.640
So you might read some code that looks completely different from a different style of code.

00:05:46.640 --> 00:05:50.480
And so it is nice that it makes things a little bit more uniform with the spacing.

00:05:50.480 --> 00:05:51.780
Yeah, yeah, for sure.

00:05:51.780 --> 00:05:52.300
For sure.

00:05:52.300 --> 00:05:57.720
And then an article that just came out recently, it was, I don't remember the title exactly,

00:05:57.720 --> 00:05:59.980
but it was something like Python slow and I don't care.

00:06:00.640 --> 00:06:06.880
And the idea was, we should be optimizing for the programmer in a lot of cases, much more

00:06:06.880 --> 00:06:11.320
than we should be optimizing for high performance or close to the metal.

00:06:11.320 --> 00:06:15.300
Do you think that's kind of happening in like small hardware type stuff?

00:06:15.300 --> 00:06:18.840
Like Python is making it more accessible and that's way better than making it, you know,

00:06:18.840 --> 00:06:20.080
10% faster or something?

00:06:20.080 --> 00:06:21.460
Yeah, I totally agree.

00:06:21.460 --> 00:06:26.900
And it's definitely a big priority, I think, of, yeah, making things easier to create and

00:06:26.900 --> 00:06:30.840
understand, especially with a lot of devices and things that are coming out today.

00:06:30.840 --> 00:06:35.760
You know, the big buzzword is the Internet of Things, IoT, where every device has to be connected

00:06:35.760 --> 00:06:38.600
to the Internet for better or worse, unfortunately, in some cases.

00:06:38.600 --> 00:06:43.740
But, you know, in those cases, you're usually talking to like web services and dealing with

00:06:43.740 --> 00:06:45.020
like parsing a lot of data.

00:06:45.020 --> 00:06:52.180
And so writing that kind of code in C and C++, it's doable, but, you know, it's almost like

00:06:52.180 --> 00:06:56.860
a field of landmines where it's very easy to have like buffer issues or it's sometimes

00:06:56.860 --> 00:07:00.500
just really cumbersome to like parse JSON data, for example.

00:07:00.500 --> 00:07:04.680
But that's where a language like Python is great because you've got a lot of libraries that

00:07:04.680 --> 00:07:07.500
you can use or just the syntax can be a little bit simpler.

00:07:07.500 --> 00:07:12.760
So I think that's where we'll start to see Python really shine is that when you have these

00:07:12.760 --> 00:07:17.600
more complex applications where, yeah, you don't really care about sending, like controlling

00:07:17.600 --> 00:07:22.260
some signal at some super high speed and when you do care about that, you know, there are

00:07:22.260 --> 00:07:26.480
ways that you can say, oh, well, we'll just write that code in C or C++, put the performance

00:07:26.480 --> 00:07:29.320
critical code in a language that makes sense for that.

00:07:29.320 --> 00:07:32.860
But then all of your business logic, all of the things that you care about, all of how

00:07:32.860 --> 00:07:36.280
your application wants to work, do that in a higher level language so that it's a little

00:07:36.280 --> 00:07:38.320
easier to understand, easier to change.

00:07:38.320 --> 00:07:40.700
You know, you can build your minimum viable product or whatever.

00:07:40.700 --> 00:07:43.040
You can iterate on it a little bit faster with it.

00:07:43.040 --> 00:07:47.500
So, yeah, I think it's definitely an important thing to consider with Python is that you have

00:07:47.500 --> 00:07:52.140
that simplicity that helps you do things faster when you don't necessarily need like that

00:07:52.140 --> 00:07:53.740
super critical hardware speed.

00:07:53.740 --> 00:07:54.260
Right.

00:07:54.260 --> 00:08:00.460
The speed of innovation might be more important than how fast your nest can report the temperature

00:08:00.460 --> 00:08:00.960
or whatever.

00:08:00.960 --> 00:08:01.660
Exactly.

00:08:01.660 --> 00:08:02.040
Yeah.

00:08:02.040 --> 00:08:03.520
So what do you do day to day?

00:08:03.520 --> 00:08:04.740
You work at Adafruit, right?

00:08:04.740 --> 00:08:05.500
Yeah, exactly.

00:08:05.500 --> 00:08:05.760
Right.

00:08:05.760 --> 00:08:11.660
So I work for Adafruit and basically I, so my title is engineer, but I do a lot of things from

00:08:11.660 --> 00:08:12.380
the software side.

00:08:12.380 --> 00:08:16.740
So I have a background in software, but I did a little bit of hardware also in college.

00:08:16.840 --> 00:08:20.240
I have a computer science degree, but did kind of a mixed computer engineering.

00:08:20.240 --> 00:08:25.100
And basically I do a lot of the software and I originally started doing things with Raspberry

00:08:25.100 --> 00:08:25.460
Pi.

00:08:25.460 --> 00:08:30.880
So Adafruit builds a lot of hardware, a lot of educational hardware and sensors and boards

00:08:30.880 --> 00:08:35.460
and, you know, things like lights that you can control or motors that you can move around.

00:08:35.460 --> 00:08:40.460
But a lot of that stuff wasn't, well, it was originally written or created to work with platforms

00:08:40.460 --> 00:08:44.080
like Arduino, which are these little microcontrollers that you program directly.

00:08:44.280 --> 00:08:47.360
But then things like the Raspberry Pi came around and we'll talk more about that later,

00:08:47.360 --> 00:08:47.660
I'm sure.

00:08:47.660 --> 00:08:52.540
But the Raspberry Pi is a platform that's more of a Linux based system that you can run actual

00:08:52.540 --> 00:08:54.680
CPython on, on that system.

00:08:54.680 --> 00:08:59.840
And so maybe three or four years ago or so, I came around, I was doing a lot of stuff for

00:08:59.840 --> 00:09:04.540
Adafruit and they brought me on to help port a lot of the drivers that they had in the

00:09:04.540 --> 00:09:06.660
Arduino world to the Raspberry Pi.

00:09:06.780 --> 00:09:10.800
So to convert that code from C and C++ to Python code.

00:09:10.800 --> 00:09:15.180
So I did a lot of that and then just got a lot more involved in kind of the products that

00:09:15.180 --> 00:09:17.300
Adafruit creates and, you know, helping to support them.

00:09:17.300 --> 00:09:23.360
So yeah, the day-to-day for me is doing a lot of things like usually there's certain projects

00:09:23.360 --> 00:09:24.420
that we're working on.

00:09:24.420 --> 00:09:29.560
You know, there's maybe a lot of things in like the Raspberry Pi world, like drivers to

00:09:29.560 --> 00:09:30.500
write or to support.

00:09:31.000 --> 00:09:36.060
There are a lot of projects that we do also because a big thing that Adafruit does is teach

00:09:36.060 --> 00:09:37.140
people how to use stuff.

00:09:37.140 --> 00:09:41.760
So we show people, you know, it's not just good enough to sell you a board that lights up

00:09:41.760 --> 00:09:42.340
and does things.

00:09:42.340 --> 00:09:45.760
You have to understand how to use that and how to control it yourself.

00:09:45.760 --> 00:09:50.540
And so we create a lot of different content, like guides and tutorials that walk you through

00:09:50.540 --> 00:09:55.820
how to use a product, but they'll even walk through concepts of like, okay, here's how

00:09:55.820 --> 00:09:56.960
temperature sensors work.

00:09:56.960 --> 00:09:59.160
And here's how, you know, maybe you calibrate them.

00:09:59.160 --> 00:10:04.000
And here's how the equations work to convert the raw data into temperature reading and things

00:10:04.000 --> 00:10:04.340
like that.

00:10:04.340 --> 00:10:09.520
So it's just a lot of interesting, you know, knowledge to share that helps people learn

00:10:09.520 --> 00:10:12.860
and they can kind of build on that knowledge to build different things and do their own

00:10:12.860 --> 00:10:13.300
projects.

00:10:13.300 --> 00:10:14.880
So yeah, I'll do guides and things.

00:10:14.880 --> 00:10:19.460
And then in recent years, we've gotten into video because that's kind of become the new

00:10:19.460 --> 00:10:22.820
medium as far as like how people learn things.

00:10:22.820 --> 00:10:26.180
You know, the internet started out just as a text thing.

00:10:26.180 --> 00:10:29.920
And nowadays, you know, like Netflix, I think it's like 90% of all the bandwidth on the internet.

00:10:29.920 --> 00:10:35.540
So video is such a critical thing that, you know, we're there on YouTube and actually Twitch

00:10:35.540 --> 00:10:37.140
and some of these live streaming platforms too.

00:10:37.140 --> 00:10:38.700
So I do some of those things too.

00:10:38.700 --> 00:10:39.600
I do some videos.

00:10:39.600 --> 00:10:43.240
I try to do like a video every week, just kind of showing off maybe things that I'm hacking

00:10:43.240 --> 00:10:43.620
on.

00:10:43.620 --> 00:10:47.060
Or if I did like a guide or tutorial, kind of walking through how to do that.

00:10:47.060 --> 00:10:49.780
So yeah, it's a lot of kind of showing people how things work.

00:10:49.780 --> 00:10:50.020
Yeah.

00:10:50.020 --> 00:10:51.620
That sounds like a really fun job.

00:10:51.620 --> 00:10:57.340
So I heard just the other day that YouTube is the second largest search engine on the

00:10:57.340 --> 00:10:57.660
internet.

00:10:57.660 --> 00:10:58.500
Oh, wow.

00:10:58.500 --> 00:11:03.240
Bigger than Bing, bigger than Yahoo, bigger than, you know, a bunch of others, right?

00:11:03.240 --> 00:11:04.980
There's Google and then there's YouTube.

00:11:04.980 --> 00:11:08.760
And so, yeah, for the kind of stuff that you're doing, you definitely want to be putting your

00:11:08.760 --> 00:11:10.240
guides there and whatnot, right?

00:11:10.240 --> 00:11:11.120
Yep, exactly.

00:11:11.120 --> 00:11:11.440
Yeah.

00:11:11.580 --> 00:11:15.200
It sounds like a really fun job that you kind of get to see what people need to know

00:11:15.200 --> 00:11:18.200
and then just like come up with these little projects for them, right?

00:11:18.200 --> 00:11:19.740
Yeah, no, it definitely is.

00:11:19.740 --> 00:11:24.520
I would definitely consider it maybe like a dream job in some ways because yeah, it is

00:11:24.520 --> 00:11:29.600
really cool to have a lot of kind of freedom to build things that, you know, are interesting

00:11:29.600 --> 00:11:30.100
to me.

00:11:30.100 --> 00:11:32.340
And then, yeah, to show people how I build things.

00:11:32.340 --> 00:11:36.880
You know, I kind of think of myself in some ways as like, if you remember Bob Ross, who did

00:11:36.880 --> 00:11:40.880
the joy of painting, you know, do these instructional videos on PBS and he had the amazing

00:11:40.880 --> 00:11:41.860
hair, the Afro.

00:11:41.860 --> 00:11:45.840
I don't have the Afro, unfortunately, but I kind of think of myself and this is, you know,

00:11:45.840 --> 00:11:51.860
I don't want to be too presumptuous, but, you know, I think of myself in some ways as a Bob

00:11:51.860 --> 00:11:53.400
Ross, but more for code.

00:11:53.400 --> 00:11:58.140
So like showing people, you know, how do you do this project?

00:11:58.140 --> 00:12:04.120
Or for example, I'll do like videos maybe that show how I convert a driver to run on the

00:12:04.120 --> 00:12:05.760
Raspberry Pi and how to write it in Python.

00:12:05.760 --> 00:12:10.400
And I like to show kind of that process of creating that driver and show like even the

00:12:10.400 --> 00:12:13.460
mistakes and things that happen as I code this up.

00:12:13.460 --> 00:12:15.460
And, you know, I get some of the math wrong.

00:12:15.460 --> 00:12:18.680
And so you can watch me fidget around and figure out like debug this thing.

00:12:18.680 --> 00:12:24.220
Because, you know, I think back to when I was learning and it was so hard to just understand,

00:12:24.220 --> 00:12:27.200
you know, to make that leap from beginner to more experienced programmer.

00:12:27.460 --> 00:12:35.020
Because back in my day, you know, early days, the internet, it was like, you'd be lucky to find maybe a text file or something that explains how something works.

00:12:35.020 --> 00:12:40.240
You know, you'd be going to the bookstore and reading these three, 400 page books and hoping to understand things.

00:12:40.240 --> 00:12:52.420
You know, whereas now I'm hoping that maybe, you know, the 13 year old me kid out there could watch me and hopefully learn a little bit and kind of see like, okay, yeah, this is how I can get into programming or how things can work for this.

00:12:52.460 --> 00:12:53.360
So, yeah.

00:12:53.360 --> 00:12:53.760
Yeah.

00:12:53.760 --> 00:12:55.160
It sounds super fun.

00:12:55.160 --> 00:12:55.720
Super fun.

00:12:55.720 --> 00:12:58.420
So let's talk a little bit about microcontrollers.

00:12:58.420 --> 00:13:01.740
So you said that there's Arduino, which is a microcontroller.

00:13:01.740 --> 00:13:06.660
And then there's Raspberry Pi, which is more like a computer on a board or something like that.

00:13:06.660 --> 00:13:06.800
Right.

00:13:06.800 --> 00:13:07.500
What's the difference?

00:13:07.500 --> 00:13:09.440
Like when would I know to call which?

00:13:09.440 --> 00:13:09.880
Because I didn't.

00:13:09.880 --> 00:13:10.340
Yeah.

00:13:10.580 --> 00:13:11.840
I didn't study hardware in college.

00:13:11.840 --> 00:13:14.940
I studied, you know, math and programming, right?

00:13:14.940 --> 00:13:15.940
So good question.

00:13:15.940 --> 00:13:22.540
And the honest answer is it's kind of a gray area because, you know, when you get down to it, they're both really similar.

00:13:22.540 --> 00:13:32.160
So like the computer that, you know, that people are using right now, like if you're listening to this on your phone or on your desktop computer, on your laptop, you know, that has a little CPU that just runs instructions.

00:13:32.160 --> 00:13:35.500
And so a microcontroller is the exact same thing.

00:13:35.500 --> 00:13:39.560
It's just a tiny little CPU that runs program instructions and it can do math.

00:13:39.560 --> 00:13:41.540
It can do all kinds of processing.

00:13:41.780 --> 00:13:46.780
But the big difference is usually that the microcontrollers are much more constrained.

00:13:46.780 --> 00:13:49.000
So they have much less memory.

00:13:49.000 --> 00:13:55.840
So your computer or even your phone, like I think the new phones these days have like four gigabytes of memory, which is kind of insane to me.

00:13:55.840 --> 00:14:02.940
You know, you have a lot of resources like that, whereas a microcontroller, an Arduino has, for example, two kilobytes of RAM.

00:14:02.940 --> 00:14:09.160
So that's a huge difference as far as just the amount of things that you can store, the program state you can have.

00:14:09.320 --> 00:14:12.080
And then the processing speed is usually a lot different, too.

00:14:12.080 --> 00:14:21.520
So an Arduino is usually like 16 or 8 megahertz or so, whereas, you know, your phone or your laptop, your computer is well into the multiple gigahertz, three, four gigahertz sometimes.

00:14:21.520 --> 00:14:24.000
So there's a big difference there.

00:14:24.000 --> 00:14:32.960
And there are some other differences as far as your computer is usually built to run an operating system, which is kind of a layer that does a lot of work for you.

00:14:32.960 --> 00:14:38.380
So it can talk to your peripherals and it can control access to a lot of things.

00:14:38.380 --> 00:14:54.220
Whereas on a microcontroller, you're usually doing things what they call bare metal, where you write your code and it might be in a higher level language like C or C++, but it gets compiled down into the raw assembly language that just controls that processor directly and has complete control over all the memory.

00:14:54.440 --> 00:14:59.700
There's nothing stopping it to say, hey, stop your program for a little bit to let another program run.

00:14:59.700 --> 00:15:03.380
You know, whereas on your desktop computer, you've got all kinds of programs running for that.

00:15:03.380 --> 00:15:04.520
So it's kind of a spectrum.

00:15:04.520 --> 00:15:05.220
Yeah.

00:15:05.280 --> 00:15:18.680
And that, you know, the Raspberry Pi is maybe on one end where it's the more computer style where you have a full Linux operating system and it's running multiple programs and you have a little bit less direct access to the hardware.

00:15:18.680 --> 00:15:21.120
You still do have pretty close control to the hardware.

00:15:21.620 --> 00:15:24.720
But I mean, ultimately, there's maybe some control that you give up in that case.

00:15:24.720 --> 00:15:29.380
Whereas with Arduino, yeah, you've got a much less powerful microcontroller.

00:15:29.380 --> 00:15:33.240
Sometimes in a lot of cases, they're a little bit less expensive, though, because of that.

00:15:33.760 --> 00:15:37.980
And so you've got less power, less memory, but more control over the hardware.

00:15:37.980 --> 00:15:39.920
So your code runs directly on the CPU.

00:15:39.920 --> 00:15:46.520
And you can know, for example, if you write a loop, how long it's going to run and, you know, that nothing's going to stop it or keep it from going.

00:15:46.520 --> 00:15:46.800
Right.

00:15:46.800 --> 00:15:50.940
Basically, your program, it's the whole thing, right?

00:15:50.940 --> 00:15:52.160
It has access to the hardware.

00:15:52.160 --> 00:15:53.700
It just runs and there's nothing.

00:15:53.700 --> 00:15:56.940
There's no other preemptive multithreading or anything like that, right?

00:15:56.940 --> 00:15:57.480
Exactly.

00:15:57.480 --> 00:15:57.780
Yep.

00:15:57.780 --> 00:16:01.260
It's the only thing that chip knows how to do is run your program.

00:16:01.260 --> 00:16:02.140
Oh, very cool.

00:16:02.300 --> 00:16:04.800
So which one would you say is easier to work with?

00:16:04.800 --> 00:16:05.940
Ah, that's a great question.

00:16:05.940 --> 00:16:08.420
So, you know, there are advantages to both.

00:16:08.420 --> 00:16:13.860
In the microcontroller world, for the longest time, it was a little bit hard to get started,

00:16:13.860 --> 00:16:17.000
especially before these platforms like Arduino came around.

00:16:17.000 --> 00:16:22.360
Because in a lot of cases, those microcontrollers sometimes have very custom or specific tool chains

00:16:22.360 --> 00:16:30.020
where you couldn't just pick up, you know, the GCC compiler years ago and use that to write code for the processor that Arduino uses.

00:16:30.520 --> 00:16:33.640
You know, nowadays you can because they've added support to those platforms.

00:16:33.640 --> 00:16:37.300
But for a while, you had to get these custom tool chains and you'd have to figure them out.

00:16:37.300 --> 00:16:40.800
And they'd usually be more constrained and you'd have to know how to set those things up.

00:16:40.800 --> 00:16:42.400
So it was a big barrier to entry.

00:16:42.400 --> 00:16:46.700
And then platforms like Arduino came around and said, hey, let's simplify all that stuff.

00:16:46.700 --> 00:16:52.160
And let's just give you this prepackaged environment, like a little IDE that you can download that does all that for you.

00:16:52.160 --> 00:17:00.180
So you just write in your code and you still have to use kind of maybe those higher level or the C and C++ style languages, but we'll make it easier.

00:17:00.180 --> 00:17:06.100
So it's not as hard to get started in microcontrollers, whereas something like the Raspberry Pi that runs Linux,

00:17:06.320 --> 00:17:15.500
if you're already familiar with using Python on your desktop, just installing the Python, the CPython interpreter, it's really similar on those platforms.

00:17:15.500 --> 00:17:19.960
And so it's just, you know, learning, OK, how to hook up this Raspberry Pi and maybe how to connect to it.

00:17:19.960 --> 00:17:22.620
And then once you're connected, it's no different from your computer.

00:17:22.620 --> 00:17:28.760
So, you know, if you have absolutely no hardware experience at all and you're used to Python on your desktop,

00:17:29.140 --> 00:17:35.140
the Raspberry Pi might be a little bit easier to get started with, but Arduino and those systems aren't as bad.

00:17:35.140 --> 00:17:38.240
The one difference with Arduino, though, is that the language is different.

00:17:38.240 --> 00:17:43.200
So it's, you know, you have to use C and C++, but it's a little bit easier when you use some of the systems that give you,

00:17:43.200 --> 00:17:46.500
you know, here is a development environment that's kind of ready to go for that.

00:17:46.500 --> 00:17:54.060
So, you know, I'd say start with Raspberry Pi, but also look at things like Arduino and MicroPython also that I'm sure we'll talk about,

00:17:54.060 --> 00:17:57.940
you know, how to get into Python on some of these little microcontrollers.

00:17:58.220 --> 00:18:06.380
Yeah, absolutely. I mean, the devices are interesting, but to the Python audience, it's like, OK, well, how do I use Python on this device?

00:18:06.380 --> 00:18:14.600
Right. So back on episode 17, almost two years ago, I talked to Damian George, who was one of the guys that created MicroPython.

00:18:14.600 --> 00:18:17.220
Maybe tell us a little bit about what that is.

00:18:17.220 --> 00:18:21.280
Yeah, totally right. So MicroPython, it's a really cool project.

00:18:21.280 --> 00:18:26.180
And yeah, like you said, it was created by Damian George, I think maybe four years ago in 2013 or so.

00:18:26.300 --> 00:18:32.840
And it's basically a Python interpreter that runs on these small memory constrained environments,

00:18:32.840 --> 00:18:35.920
like little boards that might be used with Arduino.

00:18:35.920 --> 00:18:41.020
Now, it doesn't run on what is typically the Arduino that everyone uses, the Arduino Uno.

00:18:41.020 --> 00:18:44.260
That's a really low end. That's the one with two kilobytes of memory.

00:18:44.260 --> 00:18:47.060
It runs on a little bit larger microcontrollers.

00:18:47.060 --> 00:18:53.140
So microcontrollers that have around like 32 kilobytes of memory or so, or even much more in some cases.

00:18:53.580 --> 00:18:59.460
But it is a Python interpreter. And the nice thing is, it's not the first Python interpreter that runs on hardware.

00:18:59.460 --> 00:19:04.080
I think there have been a few other embedded Python projects, and there still are some other ones around.

00:19:04.080 --> 00:19:15.340
But one of the big goals and things that kind of separates from other Python on hardware implementations is that it tries to be a very strict implementation of the Python 3.0 core language.

00:19:15.560 --> 00:19:24.940
So basically, you know, all of the features that you would expect in Python as far as like classes and functions, you know, just the basic syntax.

00:19:24.940 --> 00:19:27.060
Most pretty much all of that is there.

00:19:27.060 --> 00:19:30.740
I think something like 90% of it is implemented and they're working on getting more support.

00:19:30.940 --> 00:19:35.660
So that makes it really cool as a Python user because you can kind of dive in and there are less surprises.

00:19:35.660 --> 00:19:39.600
You know, you do things that are a little more natural and it's, in most cases, works.

00:19:39.600 --> 00:19:44.420
The one thing I should say, though, is that not all of the Python library is implemented, though.

00:19:44.420 --> 00:19:52.760
So things like all the things that you've probably come to know and love on the Python world of just being able to import a JSON parser or, you know, import like a CSV parser or something like that.

00:19:52.920 --> 00:19:54.660
Some of that stuff is there in the MicroPython world.

00:19:54.660 --> 00:19:59.140
But again, these run on these tiny little microcontrollers that just have kilobytes of memory.

00:19:59.140 --> 00:20:02.520
So you have to make some tradeoffs there, unfortunately.

00:20:02.520 --> 00:20:08.700
Yeah, that's a pretty serious constrained environment compared to, you know, 16 gigs of RAM.

00:20:08.700 --> 00:20:09.320
Exactly.

00:20:09.320 --> 00:20:09.620
Yep.

00:20:09.620 --> 00:20:11.260
And it's just different priorities, right?

00:20:11.260 --> 00:20:15.700
So how do you get Python to work in that kind of a world with much less memory?

00:20:16.000 --> 00:20:24.920
So you basically put this on one of the microcontrollers, you put your Python code there, and then your Python code basically is the only thing running on that chip, more or less, right?

00:20:24.920 --> 00:20:25.540
Exactly.

00:20:25.540 --> 00:20:25.840
Yep.

00:20:25.840 --> 00:20:29.500
So there's not necessarily like an operating system that's running.

00:20:29.500 --> 00:20:36.200
Your code is actually it's compiled into a bytecode internally by MicroPython, and then it executes that bytecode.

00:20:36.200 --> 00:20:40.300
So it can be very dynamic and do all kinds of cool, fun kind of Python things.

00:20:40.300 --> 00:20:40.760
Nice.

00:20:40.760 --> 00:20:41.940
Can you pip install to it?

00:20:41.940 --> 00:20:44.720
A lot of that stuff is being kind of figured out in the MicroPython world.

00:20:44.720 --> 00:20:46.820
So like I said, MicroPython is still pretty new.

00:20:46.820 --> 00:20:51.360
Like it's only maybe four years old, which is actually really new in the grand scheme of things.

00:20:51.360 --> 00:20:57.260
And so there's not a super solid story yet on like libraries and modules.

00:20:57.260 --> 00:21:05.560
So MicroPython does have a concept of it supports packages where you can have a folder structure within a init.py,

00:21:05.560 --> 00:21:09.060
and you can have, you know, modules and things that you import based on that.

00:21:09.060 --> 00:21:16.080
And you can actually do this pre-compilation step where you convert a Python file into what's called an MPY file,

00:21:16.080 --> 00:21:21.280
which is just pre-compiling it into bytecode because, again, it's optimizing for the memory usage.

00:21:21.280 --> 00:21:26.440
Because if you're just storing the raw Python source code of your program, that's pretty large.

00:21:26.440 --> 00:21:28.060
You have, you know, big text files.

00:21:28.260 --> 00:21:34.780
And so if you're trying to fit a bunch of Python code onto like 256 kilobytes of flash memory, you're going to run out at some point.

00:21:34.780 --> 00:21:39.480
And so there are little optimizations you can make like pre-compiling some of the stuff into bytecode.

00:21:39.480 --> 00:21:41.180
But yeah, there's no pip.

00:21:41.320 --> 00:21:48.580
Well, there is a pip for MicroPython, but it's not the same pip that you might expect on the desktop.

00:21:48.580 --> 00:21:55.200
So it's not like you connect to your board and run a pip command and it goes to the internet and downloads your package.

00:21:55.200 --> 00:21:57.160
It's more on your desktop.

00:21:57.160 --> 00:22:05.000
You can grab these MicroPython libraries and then you still have to kind of get them onto your board and import them yourself.

00:22:05.000 --> 00:22:12.720
So it's, I think in the future, though, there'll probably be more of a story for how, you know, you get packages and things.

00:22:12.720 --> 00:22:18.220
But again, in the MicroPython world, they're definitely, they're trying to follow the Python kind of paradigms and systems out there.

00:22:18.220 --> 00:22:23.060
And so, you know, using things like PyPI and pip and the tools like that to make it work.

00:22:23.060 --> 00:22:26.760
This portion of Talk Python is brought to you by Advanced Digital.

00:22:26.760 --> 00:22:30.600
How would you like to build one of the most visited news sites in the U.S.?

00:22:30.600 --> 00:22:31.400
That sounds fun.

00:22:31.400 --> 00:22:33.840
The folks at Advanced Digital would love to talk to you.

00:22:33.840 --> 00:22:39.500
They're primarily a Python shop located in beautiful Jersey City, just one subway stop from lower Manhattan.

00:22:39.500 --> 00:22:45.940
Spend your time building an amazing web app with Python and do it with a small team of developers focused on agile development.

00:22:45.940 --> 00:22:49.940
Are you going to miss PyCon this year because your company wouldn't fund the travel and expense?

00:22:49.940 --> 00:22:53.280
If you join this team, they'll cover your conference and training initiatives.

00:22:53.280 --> 00:22:55.660
It's time to take your Python to the next level.

00:22:55.660 --> 00:22:57.320
Build an amazing web app.

00:22:57.320 --> 00:23:01.260
Get started by visiting python.advance.net right now.

00:23:02.360 --> 00:23:10.240
One of the things that Damian talked about was that you could basically hook a Lambda expression directly up to a hardware interrupt.

00:23:10.240 --> 00:23:11.740
And that kind of blew my mind.

00:23:11.740 --> 00:23:13.200
Yeah, it's really cool.

00:23:13.200 --> 00:23:18.060
I love it too because, like I said, with Python, I love how you can make it work the way you want.

00:23:18.060 --> 00:23:23.480
So if you want to do like really cool functional programming, you've got all of the constructs to do that in Python.

00:23:23.660 --> 00:23:28.080
You've got like filter and map and all these cool functions you can chain together and stuff and do reactive programming, whatever.

00:23:28.080 --> 00:23:33.320
And it's fascinating to transfer that over to the hardware world and start playing with it.

00:23:33.320 --> 00:23:38.420
Because at the end of the day, I mean, hardware, it's just a different set of functions you're calling.

00:23:38.420 --> 00:23:44.740
Like you're calling functions to control the voltage of an output or to read an analog input or something like that.

00:23:44.740 --> 00:23:50.460
So having that core language and, yeah, doing Lambda expressions with hardware interrupts, I mean, it is a really cool thing.

00:23:50.460 --> 00:23:56.580
And again, because it's so interesting to me because for the longest time, we really haven't had that in the hardware world.

00:23:56.760 --> 00:24:05.660
You know, you've had the lower level languages like C and C++ that are very static and everything is done up front ahead of time because you need it optimized for memory and stuff like that.

00:24:05.660 --> 00:24:11.900
So, yeah, it's kind of a brave new world in some ways of figuring out like because, yes, you can hook up a Lambda expression to a hardware interrupt.

00:24:11.900 --> 00:24:14.540
But, you know, maybe we'll learn like, well, maybe you shouldn't.

00:24:14.540 --> 00:24:18.140
You know, maybe there are reasons why it maybe doesn't make sense or it gets too complex or something.

00:24:18.140 --> 00:24:20.600
But that'll be fun to figure out what works and what doesn't work.

00:24:20.600 --> 00:24:21.360
Yeah, absolutely.

00:24:21.360 --> 00:24:22.860
It's being new.

00:24:22.860 --> 00:24:24.540
It really makes it exciting as well.

00:24:25.800 --> 00:24:30.500
When would make a lot of sense to use MicroPython and when would you maybe pick something else?

00:24:30.500 --> 00:24:37.400
MicroPython, it's good at some things and it's maybe not as good as at other things right now in the world, in the embedded world.

00:24:37.400 --> 00:24:42.840
Because, again, you can't get away from the fact that you're running on a much more constrained environment.

00:24:42.840 --> 00:24:46.620
So you have much less memory than your desktop computer.

00:24:46.780 --> 00:24:58.940
So things that you might do in the Python world that you might not even realize take a lot of resources, you know, like having a tight loop that's creating a bunch of objects, which might just be a few lines of Python code.

00:24:58.940 --> 00:25:02.660
You know, you might not even realize what's happening underneath the behind the scenes there.

00:25:02.660 --> 00:25:09.720
That might not be great in MicroPython because, sure, it can run that code, but it's going to be allocating a lot of memory.

00:25:09.720 --> 00:25:12.580
And then you're going to be having this garbage collector kicking in and things.

00:25:12.580 --> 00:25:21.100
So MicroPython, it's really good at, like I said, doing the high-level business logic of, you know, I'm creating like an IoT device.

00:25:21.100 --> 00:25:32.360
And I need to talk to a web service and get some data and process it and then maybe actuate some devices or maybe read some sensors and then send that reading up into the cloud.

00:25:32.360 --> 00:25:39.140
So it's really good at being kind of that glue that goes between the low-level hardware and other different things that you're doing.

00:25:39.140 --> 00:25:40.780
So it's great for that kind of thing.

00:25:40.780 --> 00:25:44.960
It's also great for, like, when you want to update and change how something works.

00:25:44.960 --> 00:25:48.520
Because, again, it's all interpreted code, so you can change the code on the fly.

00:25:48.520 --> 00:25:55.660
You know, if you want to change how your program runs with, like, Arduino or C and C++ or older kind of embedded-style programming,

00:25:55.660 --> 00:26:00.160
you have to, like, connect that board to your computer and just completely reprogram it.

00:26:00.160 --> 00:26:03.800
Whereas with MicroPython, you know, if you can just change that Python file,

00:26:03.800 --> 00:26:06.840
and it could even just be, like, downloading that file from the Internet itself.

00:26:06.840 --> 00:26:09.700
You know, you could send new code to the board and it can start running it.

00:26:09.700 --> 00:26:12.440
And actually, that's a cool use case that I heard about recently.

00:26:12.440 --> 00:26:18.820
I think the European Space Agency, they've been looking at MicroPython and potentially going to use that on satellites

00:26:18.820 --> 00:26:25.260
because they like that idea of being able to send new code up to the satellites and have it just run that code

00:26:25.260 --> 00:26:28.540
instead of having to reprogram the satellite while it's in orbit.

00:26:28.540 --> 00:26:30.320
Because sometimes things go wrong.

00:26:30.320 --> 00:26:33.160
You know, you're writing a flash memory and something might get corrupted.

00:26:33.160 --> 00:26:36.220
And so I think they like having that kind of capability.

00:26:36.220 --> 00:26:37.380
And so you can do that with MicroPython.

00:26:37.800 --> 00:26:41.360
And then the other cool thing, too, that you get because it's interpreted, you've got a REPL.

00:26:41.360 --> 00:26:46.380
So you've got an ability to just connect and arbitrarily run Python code.

00:26:46.380 --> 00:26:51.020
And so that's a really good case for, like, education and learning.

00:26:51.020 --> 00:26:53.020
And something I think that we'll see a lot with MicroPython,

00:26:53.020 --> 00:26:56.820
where it's a lot easier to learn about things like hardware

00:26:56.820 --> 00:27:01.440
when you can just connect to your board and run a function that says turn on this LED

00:27:01.440 --> 00:27:05.020
or turn off this LED or read this microphone value.

00:27:05.020 --> 00:27:08.520
And you can get that result back directly and kind of play with it

00:27:08.520 --> 00:27:10.160
and, you know, maybe build little programs from that.

00:27:10.160 --> 00:27:12.720
So, you know, MicroPython is really good at that stuff.

00:27:12.720 --> 00:27:17.300
Yeah, that sounds so much better than I'm going to recompile and ship a new binary

00:27:17.300 --> 00:27:20.600
and restart the device and all that kind of stuff, right?

00:27:20.600 --> 00:27:21.760
Exactly right.

00:27:21.760 --> 00:27:23.660
There's just more steps, more complexity.

00:27:23.660 --> 00:27:26.180
And especially for people that are learning things, it's, you know,

00:27:26.180 --> 00:27:29.920
it's difficult enough to even just understand how the tools work and things like that.

00:27:29.920 --> 00:27:33.680
And so just the less things that you have to learn, the easier it'll be

00:27:33.680 --> 00:27:36.020
and the more it opens up to more people to use.

00:27:36.020 --> 00:27:37.480
Oh, yeah, that's really great.

00:27:37.480 --> 00:27:40.120
And could you have the device auto-update itself

00:27:40.120 --> 00:27:46.040
or the Python auto-update its own code on MicroPython with over-the-air updates type things?

00:27:46.040 --> 00:27:47.120
Yeah, you definitely could.

00:27:47.120 --> 00:27:49.820
So, and there are a few different things you could do.

00:27:49.820 --> 00:27:53.900
So kind of the way MicroPython works is there's an interpreter,

00:27:54.160 --> 00:27:58.780
like a firmware that's written onto the chip that has the implementation of MicroPython.

00:27:58.780 --> 00:28:04.460
So it has things like how it converts your Python code into bytecode and how it executes that

00:28:04.460 --> 00:28:08.700
and how it turns your Python functions that might talk to hardware,

00:28:08.700 --> 00:28:10.540
how those actually access the hardware.

00:28:10.540 --> 00:28:14.460
And then there's actually a little file system that MicroPython adds,

00:28:14.460 --> 00:28:17.780
which is one of the cool things that it does differently, you know,

00:28:17.780 --> 00:28:21.160
or maybe that's an advantage over systems like Arduino.

00:28:21.780 --> 00:28:25.340
In MicroPython, there's a little file system that all the boards have,

00:28:25.340 --> 00:28:27.720
and it's just like a fat file system.

00:28:27.720 --> 00:28:32.160
So you can put .py files on there, but you can also put like text and data files on there.

00:28:32.160 --> 00:28:35.580
And so that's a case where, yeah, if you want to change your program code,

00:28:35.580 --> 00:28:38.900
you just have to figure out a way to update that file system.

00:28:38.900 --> 00:28:42.660
And you can usually write to that file system using all of the same Python functions,

00:28:42.660 --> 00:28:44.220
like open, read, write.

00:28:44.220 --> 00:28:48.860
So you could build a project where, you know, maybe it looks to a web service

00:28:48.860 --> 00:28:52.820
to download its latest code and it can see, okay, what's the version of my code

00:28:52.820 --> 00:28:54.740
and grab the latest code and update it.

00:28:54.740 --> 00:28:56.720
And so that would update your Python code.

00:28:56.720 --> 00:29:00.700
And then updating the MicroPython firmware itself, it's a little more challenging.

00:29:00.700 --> 00:29:02.040
There are ways to do that.

00:29:02.040 --> 00:29:06.380
Some boards and systems support this concept of, you know, doing an over-the-air update.

00:29:06.380 --> 00:29:10.040
It's usually a little more complicated because when you're changing the firmware itself,

00:29:10.040 --> 00:29:12.380
you sometimes have to have like two copies of it,

00:29:12.380 --> 00:29:14.620
and then you tell the microcontroller to kind of swap over.

00:29:14.620 --> 00:29:19.040
Yeah, I was thinking more of just your code, right, and just letting the MicroPython be.

00:29:19.040 --> 00:29:19.920
Exactly, yeah.

00:29:19.920 --> 00:29:23.020
And it's great for that because it's just a .py file.

00:29:23.020 --> 00:29:26.120
And so if you've got a way to tell the board to update that file,

00:29:26.120 --> 00:29:29.320
then it's, in a lot of cases, it's as easy as that.

00:29:29.320 --> 00:29:32.900
I'm thrilled to hear that the European Space Agency might be using it.

00:29:32.900 --> 00:29:33.820
How cool is that?

00:29:33.820 --> 00:29:35.240
Yeah, Python in space.

00:29:35.240 --> 00:29:36.680
That is just too cool, I think.

00:29:36.680 --> 00:29:38.080
I think, yeah, really, really neat.

00:29:38.300 --> 00:29:42.580
Yeah, you know, you hear about the thing is not responding,

00:29:42.580 --> 00:29:48.060
this rover is lost because, you know, something went wrong with its software and whatnot.

00:29:48.060 --> 00:29:51.980
This ability to go, we're going to ship you a few bytes of a new PY file,

00:29:51.980 --> 00:29:53.220
and you're going to come back to life.

00:29:53.220 --> 00:29:54.020
Like, that's pretty cool.

00:29:54.020 --> 00:29:55.000
Yeah, oh yeah, totally.

00:29:55.000 --> 00:29:57.640
And, you know, maybe not too far off in the future,

00:29:57.640 --> 00:30:00.140
maybe it'll be something that we could even do ourselves.

00:30:00.140 --> 00:30:01.840
You know, they've got cube satellites,

00:30:01.840 --> 00:30:07.340
and maybe when, you know, you've got kind of private enterprises sending shuttles and rockets and things up.

00:30:07.340 --> 00:30:13.080
And maybe one day there'll be a Raspberry Pi that I can send up and start, you know, controlling myself with Python.

00:30:13.080 --> 00:30:14.000
That would be really fun.

00:30:14.000 --> 00:30:15.440
Yeah, hook a little camera to it.

00:30:15.440 --> 00:30:16.000
That'd be awesome.

00:30:16.000 --> 00:30:16.440
Oh, yeah.

00:30:16.440 --> 00:30:21.280
All right, so that's when you, when it's a good idea to use it,

00:30:21.280 --> 00:30:24.300
maybe when would you say probably not the best option?

00:30:24.300 --> 00:30:27.500
The one big thing, though, with MicroPython is, again, it's interpreted,

00:30:27.500 --> 00:30:30.840
so you do pay a cost as far as performance goes with that.

00:30:30.920 --> 00:30:34.900
And it's a significant cost in some cases because, yeah, these little microcontrollers,

00:30:34.900 --> 00:30:39.060
they run at like, you know, maybe 80 megahertz, 40 megahertz or so.

00:30:39.060 --> 00:30:40.780
It's like a 486DX.

00:30:40.780 --> 00:30:41.980
Yeah, exactly right.

00:30:41.980 --> 00:30:46.060
So the kind of computer, when I got started programming, I think it was a 486, it was 50 megahertz.

00:30:46.060 --> 00:30:48.740
And even that's probably faster than some of the systems we have now.

00:30:48.740 --> 00:30:52.760
So, yeah, for a lot of people today that maybe got into programming later,

00:30:52.760 --> 00:30:55.900
they might not realize that computers back then were pretty slow.

00:30:55.900 --> 00:30:59.020
So that could be a little bit of a shock to some people where,

00:30:59.400 --> 00:31:03.440
especially if you've done things in Arduino, like blinking LED, you have a little loop,

00:31:03.440 --> 00:31:05.540
you turn it on, you turn it off, you sleep in between there.

00:31:05.540 --> 00:31:09.060
You try the same thing in Python and it might not work as well,

00:31:09.060 --> 00:31:11.360
or at least it might not go as fast as Arduino.

00:31:11.360 --> 00:31:16.120
So things that are timing critical, where like you're trying to generate a signal

00:31:16.120 --> 00:31:19.720
that maybe tells some hardware, you know, like talking to a servo,

00:31:19.720 --> 00:31:22.960
you need to generate a signal that has a very specific pulse width,

00:31:23.320 --> 00:31:28.160
or talking to a lot of these RGB LEDs, these NeoPixel strands.

00:31:28.160 --> 00:31:31.100
They need a very specific pulse train sent to them.

00:31:31.100 --> 00:31:37.620
So that type of stuff is more difficult with MicroPython because you've got less speed because it's interpreted.

00:31:37.620 --> 00:31:42.140
And so that just means that rather than your code running directly on the CPU,

00:31:42.140 --> 00:31:47.200
you've got code on the CPU that has to load your code from memory and then figure out,

00:31:47.300 --> 00:31:50.640
okay, what is it doing, and then actually convert that into CPU instructions.

00:31:50.640 --> 00:31:51.980
So there's overhead with that.

00:31:51.980 --> 00:31:55.340
And then there's also a little sometimes overhead with the memory management where,

00:31:55.340 --> 00:31:59.620
you know, in the Python world, you don't worry about managing memory because Python does that for you.

00:31:59.620 --> 00:32:02.900
But in the embedded world, when you're in this memory constrained environments,

00:32:02.900 --> 00:32:04.380
it doesn't come for free.

00:32:04.380 --> 00:32:05.680
Like there's no magic wand.

00:32:05.680 --> 00:32:09.820
You know, just when MicroPython manages your memory, it might not manage it the best way.

00:32:09.820 --> 00:32:12.140
You know, it might be creating and allocating memory,

00:32:12.140 --> 00:32:13.380
and then it has to go clean things up.

00:32:13.380 --> 00:32:14.360
And so that takes some time.

00:32:14.360 --> 00:32:19.980
So anyways, long story short, things that are timing critical are more difficult in MicroPython.

00:32:19.980 --> 00:32:24.580
Things that need that direct access to the hardware sometimes are more difficult.

00:32:24.580 --> 00:32:27.220
But it doesn't have to always be the case.

00:32:27.220 --> 00:32:30.700
I guess I say more difficult, but I don't really mean that it's impossible to do that stuff

00:32:30.700 --> 00:32:36.020
because the really cool thing that MicroPython did is make itself very easily extensible

00:32:36.020 --> 00:32:41.180
so that you can combine both C code and Python code in the MicroPython firmware

00:32:41.180 --> 00:32:44.400
so that when you need to do that advanced signal generation,

00:32:44.400 --> 00:32:48.800
you know, you can drop down to a C function that you implement that does that

00:32:48.800 --> 00:32:52.020
and has very critical, you know, loop code and things like that

00:32:52.020 --> 00:32:54.660
and very tight constraints on like how much memory it uses.

00:32:54.660 --> 00:32:57.240
And then you can just expose that as a Python function.

00:32:57.240 --> 00:33:01.760
And it's very similar syntax to how you do C extensions in desktop and CPython.

00:33:01.760 --> 00:33:04.100
So yeah, that was my next question.

00:33:04.100 --> 00:33:08.360
That sounds like, you know, there's your escape hatch for those little parts that are really critical.

00:33:08.640 --> 00:33:12.220
Exactly. Yeah. And I think that kind of plays back to the really big advantage of MicroPython

00:33:12.220 --> 00:33:16.480
of, you know, getting to that world where you do your low level interface logic

00:33:16.480 --> 00:33:19.260
and all that performance critical code in C

00:33:19.260 --> 00:33:22.120
and then do all of your business logic and all that interesting stuff.

00:33:22.120 --> 00:33:24.540
You know, the things that make your smart device smart,

00:33:24.540 --> 00:33:27.200
do all of that in Python and you get all the advantages.

00:33:27.860 --> 00:33:28.740
You know, you get both advantages.

00:33:28.740 --> 00:33:31.500
You get maybe easier, faster to iterate in the Python code,

00:33:31.500 --> 00:33:35.700
but then all the low level and fast control in the C functions.

00:33:35.700 --> 00:33:38.220
Nice. So let me run some examples by you.

00:33:38.220 --> 00:33:41.460
And you tell me if like good or not good for MicroPython.

00:33:41.460 --> 00:33:47.820
So if I was like a farmer and I wanted to have like an automated irrigation system

00:33:47.820 --> 00:33:53.920
or something that managed, like watched the pH level of all my dirt around all my plants

00:33:53.920 --> 00:33:58.500
and reported that back and maybe, you know, controlled valves for more water or whatever.

00:33:58.500 --> 00:34:02.280
Right. It seems like something like that would be totally fine for MicroPython.

00:34:02.280 --> 00:34:03.860
Yeah, I think that'd be great.

00:34:03.860 --> 00:34:06.100
That's a good option because you're talking to little sensors.

00:34:06.200 --> 00:34:09.880
And in a lot of cases, those sensors have kind of standard interfaces.

00:34:09.880 --> 00:34:11.040
There are some protocols.

00:34:11.040 --> 00:34:14.340
One's called I squared C or another one's called SPI.

00:34:14.340 --> 00:34:16.940
And so MicroPython has a lot of good support for that.

00:34:16.940 --> 00:34:21.740
And your hardware itself kind of generates those signals and knows how to talk those protocols.

00:34:21.740 --> 00:34:27.460
So, yeah, it's easy to hook up external sensors in a lot of cases and just talk to those directly from MicroPython.

00:34:27.460 --> 00:34:28.360
So, yeah, that's a great case.

00:34:28.420 --> 00:34:32.720
And then when you want to report back to some central service, it's amazing because you've got, you know,

00:34:32.720 --> 00:34:36.360
all of the great Python syntax and fun things you can do there.

00:34:36.360 --> 00:34:36.820
So, yeah.

00:34:36.820 --> 00:34:37.280
Okay.

00:34:37.280 --> 00:34:38.220
That sounds really awesome.

00:34:38.220 --> 00:34:42.760
What if I wanted to outfit the front of my drone with a camera?

00:34:42.760 --> 00:34:43.500
I don't have a drone.

00:34:43.500 --> 00:34:45.100
My brother has a drone, but I don't.

00:34:45.100 --> 00:34:46.040
With a camera.

00:34:46.040 --> 00:34:50.440
And when it saw like another drone, it would change color or something like that.

00:34:50.440 --> 00:34:55.240
Like almost like an image recognition thing or, you know, something like that.

00:34:55.240 --> 00:34:56.080
Would that make any sense?

00:34:56.400 --> 00:34:56.640
Yeah.

00:34:56.640 --> 00:34:57.740
Well, so that's a good case.

00:34:57.740 --> 00:35:04.840
Drones are interesting because, yeah, with the drone case, you know, maybe that case of like recognizing a thing that you might be able to do that MicroPython.

00:35:04.840 --> 00:35:09.240
That would probably be a little more challenging just because when you get into like advanced image recognition stuff,

00:35:09.240 --> 00:35:18.800
you probably want to use something more like a Raspberry Pi where you can use like OpenCV and some of these really powerful and amazing image processing libraries.

00:35:18.800 --> 00:35:24.200
Because you probably don't want to have to like, you know, hand code a neural network or something in MicroPython yourself.

00:35:24.200 --> 00:35:24.800
Yeah, exactly.

00:35:25.140 --> 00:35:29.720
But if I want to use like TensorFlow or something, like it obviously wouldn't make any sense, right?

00:35:29.720 --> 00:35:30.720
Exactly.

00:35:30.720 --> 00:35:31.160
Yeah.

00:35:31.160 --> 00:35:33.200
So, you know, use, yeah, use the tool for that.

00:35:33.200 --> 00:35:39.520
But then the other thing with the drone too, you might think like, well, could I have the drone, you know, the code that controls the motors?

00:35:39.520 --> 00:35:40.680
Could that be in MicroPython?

00:35:40.680 --> 00:35:42.880
Like that's controlling the actual flight of the drone.

00:35:42.880 --> 00:35:51.100
And that might be a case where you wouldn't want to use MicroPython because that's a very critical control loop where you need a lot of speed.

00:35:51.100 --> 00:35:55.620
You know, you need just milliseconds and microseconds of the sensor detected.

00:35:55.620 --> 00:35:56.920
I'm tilting slightly.

00:35:56.920 --> 00:36:00.480
So now I need to offset this motor and make it spin a little bit faster.

00:36:00.680 --> 00:36:08.800
And if you've got a loop in Python that has all this interpreter overhead, that could be the difference between, you know, your drone crashing or it staying in the air there.

00:36:08.800 --> 00:36:14.040
So, you know, that's maybe a case where you wouldn't want MicroPython to do that really timing critical control loop.

00:36:14.040 --> 00:36:14.380
Right.

00:36:14.380 --> 00:36:14.700
Okay.

00:36:15.020 --> 00:36:19.480
But maybe if it was a Raspberry Pi, I could do like a C extension in there.

00:36:19.480 --> 00:36:20.040
Right.

00:36:20.040 --> 00:36:21.220
Something like that.

00:36:21.220 --> 00:36:21.900
Some combo.

00:36:21.900 --> 00:36:22.540
Exactly.

00:36:22.540 --> 00:36:22.820
Yeah.

00:36:22.820 --> 00:36:26.320
And actually, there's a board that's even better for drones these days.

00:36:26.320 --> 00:36:27.720
The BeagleBone boards.

00:36:27.720 --> 00:36:30.240
BeagleBone Black is one because they're kind of cool.

00:36:30.240 --> 00:36:36.900
They're like the Raspberry Pi, but they add a little microcontroller that sits alongside the main processor that runs Linux.

00:36:36.900 --> 00:36:41.420
So you can run code on there that the Linux operating system doesn't even touch at all.

00:36:41.520 --> 00:36:45.120
And so that's where you put your little super critical control loops and things like that.

00:36:45.120 --> 00:36:49.040
And then your Linux processor can communicate with it and send it instructions and things like that.

00:36:49.040 --> 00:36:51.200
So, yeah, lots of options in that case.

00:36:51.200 --> 00:36:52.700
That sounds really cool.

00:36:52.700 --> 00:36:55.140
So what other hardware could I use MicroPython on?

00:36:55.140 --> 00:36:55.700
Yeah.

00:36:55.700 --> 00:36:56.240
So great question.

00:36:56.240 --> 00:36:57.800
So, again, it's a little bit new.

00:36:57.800 --> 00:36:59.020
So it's only four years old.

00:36:59.020 --> 00:37:02.220
There's just maybe a handful of boards right now that support it.

00:37:02.220 --> 00:37:06.440
The original board was called the PyBoard, and it's a pretty powerful microcontroller.

00:37:06.440 --> 00:37:08.120
It's this STM.

00:37:08.120 --> 00:37:09.540
I think it's an F4.

00:37:09.720 --> 00:37:11.460
It's basically a fancy processor.

00:37:11.460 --> 00:37:14.820
It runs at a couple, I think, like 70 or so megahertz, something like that.

00:37:14.820 --> 00:37:16.420
That was kind of the first board.

00:37:16.420 --> 00:37:17.900
It has a lot of peripherals and features.

00:37:17.900 --> 00:37:23.420
And then the ESP8266 is another board that came around, and this is a really popular board.

00:37:23.420 --> 00:37:27.700
It started out as the brains behind an internet-connected light bulb.

00:37:27.700 --> 00:37:31.540
And then the company that created it, they released, I think, the developer tool chain.

00:37:31.540 --> 00:37:32.700
It's a company called Espressif.

00:37:33.120 --> 00:37:36.200
And they realized, like, oh, people kind of like hacking this thing.

00:37:36.200 --> 00:37:37.020
And, like, this is cool.

00:37:37.020 --> 00:37:40.180
Because it was just a little microcontroller with a Wi-Fi radio.

00:37:40.180 --> 00:37:43.980
So, you know, it could run code that talks to your Wi-Fi network and web services.

00:37:43.980 --> 00:37:50.360
And so people kind of ran with that, and they integrated it into Arduino, and, you know, people take a lot of control over it.

00:37:50.360 --> 00:37:52.500
But that became a platform for MicroPython.

00:37:52.500 --> 00:37:54.380
There was a big Kickstarter for it a few years ago.

00:37:54.540 --> 00:38:02.420
And that became a really great platform for MicroPython because it's the ESP8266 has a good amount of memory and has that Wi-Fi chip, so you can do lots of cool stuff.

00:38:02.420 --> 00:38:03.580
So that's a great chip.

00:38:03.580 --> 00:38:04.580
And then let's see.

00:38:04.580 --> 00:38:14.440
There are some other boards, the Wi-Fi and the Low-Py and some of these boards that Pycom creates that are basically similar to, like, the ESP8266, more Internet of Things oriented.

00:38:14.440 --> 00:38:19.660
But they're also, you know, kind of moderate amounts of speed and performance and things like that for it.

00:38:19.660 --> 00:38:26.040
And then I think the last board that's really interesting that we're probably going to see a lot more of these types of boards are the MicroBit.

00:38:26.040 --> 00:38:34.120
So the BBC MicroBit was this really neat little board over in England that they gave to, I think, all of the seventh grade students in the country.

00:38:34.120 --> 00:38:37.620
So, you know, they made, like, maybe millions of these boards or hundreds of thousands of them.

00:38:37.620 --> 00:38:46.120
And they're little boards that have these tiny little microcontrollers that are a little more powerful than an Arduino, but not much more powerful.

00:38:46.120 --> 00:38:48.040
I think they only have, like, 16 kilobytes of memory.

00:38:48.560 --> 00:38:52.160
And there was a really nice effort to port MicroPython to run on those boards.

00:38:52.160 --> 00:38:55.960
And the cool thing with the MicroBit is that it's not just the microprocessor.

00:38:55.960 --> 00:38:57.560
It has a few peripherals.

00:38:57.560 --> 00:38:58.480
So it has some LEDs.

00:38:58.480 --> 00:38:59.960
It has some buttons and things.

00:38:59.960 --> 00:39:04.700
And the idea with it was, you know, you give this to a kid who's learning programming and they can get started right away.

00:39:04.700 --> 00:39:08.880
They don't have to learn, like, how to solder all this stuff together or how to install a tool chain.

00:39:08.880 --> 00:39:10.240
They make the tools really nice and easy.

00:39:10.400 --> 00:39:17.480
And that's a really cool fit with MicroPython because with things like the REPL where you can just connect to the board and start running Python code.

00:39:18.000 --> 00:39:26.660
And the MicroBit, it's even cooler because you just literally pick up this board, plug it into your computer, connect to a terminal, and then you start typing Python code.

00:39:26.660 --> 00:39:32.280
And you're turning on LEDs and you're, like, controlling a speaker and you're making it, like, say things and listening to microphone stuff.

00:39:32.280 --> 00:39:33.020
That's really cool.

00:39:33.020 --> 00:39:33.420
Yeah.

00:39:33.420 --> 00:39:34.740
But does it ship with MicroPython?

00:39:35.100 --> 00:39:36.140
It does not.

00:39:36.140 --> 00:39:38.760
I don't think it ships with MicroPython, but it's really easy.

00:39:38.760 --> 00:39:39.600
They have a web editor.

00:39:39.600 --> 00:39:47.980
I think you, if you just search online for, like, the BBC web editor, you go to a web page and it will give you, like, you type in your Python code on the web page and you click a button.

00:39:47.980 --> 00:39:51.080
It gives you a file and then you just drag that file onto the board.

00:39:51.080 --> 00:39:54.780
Like, the board shows up as a USB drive and it programs itself based on that.

00:39:54.780 --> 00:39:57.840
So it's really easy to get kind of MicroPython going on it.

00:39:57.840 --> 00:40:02.800
This portion of Talk Python is brought to you by the Strangelube Conference.

00:40:03.200 --> 00:40:05.260
Do you love to present technical topics?

00:40:05.260 --> 00:40:07.880
Are you looking for your first major speaking event?

00:40:07.880 --> 00:40:11.400
The Strangelube Conference just announced their call for proposals.

00:40:11.400 --> 00:40:20.640
Whether you're interested in languages, web development, distributed systems, AI, security, or something else, be sure to submit a proposal to Strangelube by May 8th.

00:40:20.640 --> 00:40:24.260
Their opportunity grant applications for developers in underrepresented groups.

00:40:24.260 --> 00:40:31.040
Last year, they were able to grant travel, hotel, and admission for 115 attendees, and they're hoping to expand on that for 2017.

00:40:31.540 --> 00:40:33.600
Don't just attend the Strangelube Conference.

00:40:33.600 --> 00:40:39.440
Submit a talk and you'll be speaking at a beautiful venue in St. Louis, Missouri, September 28th to 30th.

00:40:39.440 --> 00:40:43.980
Visit talkpython.fm/Strangelube to submit your proposal.

00:40:43.980 --> 00:40:44.540
Hurry.

00:40:44.540 --> 00:40:45.940
It closes May 8th.

00:40:46.600 --> 00:40:48.880
So, one more hardware question for you.

00:40:48.880 --> 00:40:53.320
One of my, well, I'd say my favorite smartwatch is the Pebble Time Round.

00:40:53.320 --> 00:40:57.240
And, you know, really thin, really small, little lightweight smartwatch.

00:40:57.240 --> 00:41:01.640
And those guys recently went out of business, which is a super sad story across the board.

00:41:01.640 --> 00:41:04.200
But could you build something like that?

00:41:04.200 --> 00:41:07.100
Like, could you build a smartwatch type thing with MicroPython?

00:41:07.360 --> 00:41:08.060
Oh, yeah, definitely.

00:41:08.060 --> 00:41:10.520
And I think that would be a great project with MicroPython.

00:41:10.520 --> 00:41:15.100
So, you know, like, if you just think of the components of the smartwatch, it's pretty straightforward.

00:41:15.100 --> 00:41:16.680
I mean, you've got your processor.

00:41:16.680 --> 00:41:19.120
You have a display of some sort.

00:41:19.120 --> 00:41:26.560
And most displays have a standard interface, like either this I2C or SPI protocol that most of the MicroPython boards support.

00:41:26.700 --> 00:41:30.000
So, you could get, like, a little OLED, an organic LED display.

00:41:30.000 --> 00:41:35.440
Or there even are e-paper displays, which are the really nice kind of, like, the Kindle style or what the original Pebbles used.

00:41:35.440 --> 00:41:38.220
Yeah, the Pebble Time Round has, like, a color E-ing.

00:41:38.220 --> 00:41:39.100
Exactly, yeah.

00:41:39.100 --> 00:41:40.480
So, you could get one of those displays.

00:41:40.480 --> 00:41:43.500
And that talks usually like an I2C or an SPI protocol.

00:41:43.500 --> 00:41:47.860
You'd have to figure out from the data sheet, you know, like, what are the commands to send it and things like that.

00:41:47.860 --> 00:41:49.240
But that would be perfect.

00:41:49.240 --> 00:41:50.560
That's easy to connect to the board.

00:41:50.560 --> 00:41:56.020
And then the actual clock part, you might want, like, a real-time clock connected to it where, you know,

00:41:56.020 --> 00:42:01.280
these are little hardware peripherals that have, or basically little watches that just run off of a coin cell battery

00:42:01.280 --> 00:42:05.500
so that, you know, your main watch might go to sleep just to save power.

00:42:05.500 --> 00:42:09.320
But this thing will keep the time running so that it always knows what's happening.

00:42:09.320 --> 00:42:13.320
And that's all you need for maybe a basic smartwatch or a basic watch.

00:42:13.320 --> 00:42:18.320
And then, you know, if you use a board that has, like, a Bluetooth radio or a Wi-Fi radio,

00:42:18.320 --> 00:42:21.140
then you can go crazy and add all kinds of things like, okay, you know,

00:42:21.140 --> 00:42:25.680
I want my watch to connect to some internet service and pull down, you know, the weather or the time.

00:42:25.740 --> 00:42:27.060
Or things like that from it.

00:42:27.060 --> 00:42:27.360
So, yeah.

00:42:27.360 --> 00:42:29.640
And that would be a great case for MicroPython, too.

00:42:29.640 --> 00:42:34.760
Because it's, again, you know, you want to write all of that fun watch logic in, like, Python code.

00:42:34.760 --> 00:42:39.440
But you don't want to write, you know, necessarily maybe, like, controlling the E-ink display.

00:42:39.440 --> 00:42:40.640
Like, that's maybe not as interesting.

00:42:40.640 --> 00:42:44.900
And so you'd maybe use a library or something like that or some C code, potentially, to talk to it.

00:42:44.900 --> 00:42:45.280
Yeah.

00:42:45.420 --> 00:42:47.640
And it would also have a great extensibility model.

00:42:47.640 --> 00:42:48.840
You want to write apps for it?

00:42:48.840 --> 00:42:50.840
Give a little Python file or something like that, right?

00:42:50.840 --> 00:42:52.020
Oh, that would be too cool.

00:42:52.020 --> 00:42:53.240
I mean, wouldn't that be amazing?

00:42:53.240 --> 00:42:56.980
You just plug your watch into your computer and you just edit .py files on it?

00:42:56.980 --> 00:42:57.940
That would be really cool.

00:42:57.940 --> 00:43:01.040
Like, 13-year-old me would just be, you know, probably freaking out.

00:43:01.040 --> 00:43:03.660
That would be so much easier than trying to figure out, like, I don't know.

00:43:03.660 --> 00:43:08.660
It would be more interesting than, I guess, like, opening up QBasic and loading nibbles or Gorilla or something like that.

00:43:09.120 --> 00:43:09.740
Yeah, for sure.

00:43:09.740 --> 00:43:10.940
All right.

00:43:10.940 --> 00:43:20.340
So let's move off of MicroPython just a little bit and sort of into the broader hardware world and talk about the company that you work for and what you guys are doing there with Adafruit.

00:43:20.340 --> 00:43:21.660
So what is Adafruit?

00:43:21.660 --> 00:43:22.080
Yeah.

00:43:22.080 --> 00:43:28.180
So Adafruit, it is an electronics company that helps make electronics more accessible to people.

00:43:28.180 --> 00:43:33.340
So it was founded about, I think, 11 years ago in 2005 by Lamore Fried.

00:43:33.340 --> 00:43:34.960
And she goes by the handle Lady Ada.

00:43:34.960 --> 00:43:37.160
Founded in her dorm room at MIT.

00:43:37.420 --> 00:43:39.300
So she's a brilliant electrical engineer.

00:43:39.300 --> 00:43:47.860
And really, the core DNA of Adafruit is showing people how things work, like, taking the mystery out of electronics.

00:43:47.860 --> 00:44:01.780
So a lot of things that Adafruit did early on were things around, like, Arduino, or even before Arduino actually even existed, of, like, hey, I'm building, I'm an artist, and I'm making a really cool installation, and I need to control some of these lights.

00:44:02.340 --> 00:44:07.860
I know how I want to animate them, but, like, I'm looking at all these wires, and what do I do now, and how do I make this stuff work?

00:44:07.860 --> 00:44:10.480
And so Lamore did a lot of great stuff.

00:44:10.480 --> 00:44:16.620
She had a website, LadyAda.net, where she would show tutorials that show, hey, here's how you program this little microcontroller.

00:44:16.620 --> 00:44:18.700
Here's how you set up this crazy tool chain.

00:44:19.160 --> 00:44:23.280
And, you know, make it as easy as just follow these steps, and you'll get this stuff working.

00:44:23.820 --> 00:44:30.240
And it just built on top of that, because, you know, people realize, like, oh, okay, well, now I can program this microcontroller, but I want to connect it to things.

00:44:30.240 --> 00:44:31.860
You know, I want to talk to this sensor.

00:44:31.860 --> 00:44:42.320
And unfortunately, you know, for a while, it was difficult in that if you wanted to, you know, maybe use, like, a temperature sensor, well, you'd have to build a board that has all the supporting hardware for it.

00:44:42.320 --> 00:44:53.940
Because you can buy the sensor, but when you read the data sheet for it, which, first of all, you have to figure out how to read data sheets, you know, then you realize, like, oh, man, I have to put this on a board, and I have to connect all these, like, components to it, maybe some capacitors or other things to it.

00:44:53.940 --> 00:44:57.580
So then at that point, it's like, oh, uh-oh, now I have to learn how to make a circuit board.

00:44:57.580 --> 00:44:59.340
So that's a little annoying and difficult.

00:44:59.340 --> 00:45:12.300
And so Adafruit does a lot of things, like builds a lot of breakout boards, you know, to take some of those interesting sensors and things and give you a board that just does all that grunt work for you of, okay, I buy this board, and then it gives me these connections that I care about.

00:45:12.300 --> 00:45:27.160
Like, you know, maybe the I2C or the SPI connection so that I can just run a few wires to my Raspberry Pi, and then you grab the code that we publish that knows how to talk to this device so that now you can just start running some Python code on your Raspberry Pi and dealing with it.

00:45:27.160 --> 00:45:37.180
So, again, it's all in that pursuit of making electronics easier for people because we want to open it up and make it less of, you know, an electrical engineer's playground and more of a playground for anyone.

00:45:37.180 --> 00:45:41.640
So that's the cool thing, and the thing that I get a lot of joy out of is just seeing what people do with this.

00:45:41.800 --> 00:45:50.500
Like, you know, seeing someone who's an artist who's totally intimidated by, you know, hardware and circuits and thinking, you know, there's no way I can make this thing work.

00:45:50.500 --> 00:46:01.060
And then building really cool interactive things or just, you know, things that blow your mind as far as, like, interesting art installations or even beyond that, like, things like students and learning and just hobbyists.

00:46:01.060 --> 00:46:13.720
Like, I still love just the projects that people do of, like, hey, I have my barbecue grill and I want to build a temperature sensor to, you know, maybe control, like, the opening and closing the vents on it to, you know, smoke a brisket or something like that.

00:46:13.720 --> 00:46:15.560
You know, just fun things that someone could do.

00:46:15.560 --> 00:46:19.520
Like, sure, you could buy, like, probably a $4,000 or $5,000 barbecue that does that.

00:46:19.580 --> 00:46:22.300
So I like the kind of do-it-yourself aspect of that, too.

00:46:22.300 --> 00:46:28.860
And, again, Adafruit is all about helping people do things themselves and, you know, taking the mystery out of a lot of this electronic stuff.

00:46:28.860 --> 00:46:30.120
Yeah, that's really cool.

00:46:30.120 --> 00:46:30.920
That's a great mission.

00:46:30.920 --> 00:46:32.780
You know, create more creators, right?

00:46:33.060 --> 00:46:33.720
Exactly, yeah.

00:46:33.720 --> 00:46:37.680
Limor was talking about open-source hardware at Adafruit.

00:46:37.680 --> 00:46:41.780
And I can imagine what that means, but what do you guys think that means to you there?

00:46:41.780 --> 00:46:51.420
Open-source hardware and open-source in general, again, is kind of a core of Adafruit because from the very beginning, you know, Adafruit was created to teach people how things work.

00:46:51.420 --> 00:46:57.840
And so it wouldn't have been very successful if it's like, well, get this board, but, you know, if you want to know how it works, that's off-limits.

00:46:57.840 --> 00:46:58.780
You know, we can't tell you that.

00:46:58.780 --> 00:46:59.900
That's our secret sauce or whatever.

00:47:00.340 --> 00:47:04.920
You know, we kind of realized early on that telling people how things work doesn't hurt.

00:47:04.920 --> 00:47:09.900
You know, it helps you because people will just build on your thing and they'll use more of your stuff because of that.

00:47:09.900 --> 00:47:16.880
But at the core, so open-source hardware, there is actually the Open-source Hardware Association, which has a concept.

00:47:16.880 --> 00:47:18.140
I think there's like an official definition.

00:47:18.140 --> 00:47:29.220
But the basic idea is, you know, you release the schematics and the build materials and how your device is built so that someone could replicate it themselves if they wanted to.

00:47:29.300 --> 00:47:30.680
The same idea with software.

00:47:30.680 --> 00:47:40.760
So, you know, something like the GCC compiler, you know, all of that source code is out there so that if you want to add a new language to it or whatever, you can take it and you can study it and you can extend it.

00:47:40.760 --> 00:47:43.300
And all of that code is available for you to change.

00:47:43.300 --> 00:47:44.920
Same thing with open-source hardware.

00:47:44.920 --> 00:47:49.220
You know, if you want to build one of these little temperature sensor breakout boards, you can do that.

00:47:49.280 --> 00:47:50.900
Like, you can get the design files.

00:47:50.900 --> 00:47:56.980
You can see how all of the layout was routed and you can tweak it if you want or you could even just go and build it yourself.

00:47:56.980 --> 00:48:01.960
You know, you're going to need like a big robot pick in place in a lot of cases to assemble the board.

00:48:01.960 --> 00:48:05.700
That's, you know, maybe one of the advantages of getting it from Aterfruits is that we've done that for you.

00:48:05.700 --> 00:48:07.220
Yeah, we don't want to constrain people.

00:48:07.220 --> 00:48:10.060
We want to put it out there so that people can build on it and learn from it.

00:48:10.420 --> 00:48:14.760
And, you know, the whole everyone kind of grows when everyone can kind of see how things work.

00:48:14.760 --> 00:48:15.700
Yeah, that's great.

00:48:15.700 --> 00:48:20.700
It seems to me like 3D printing would be a good complement to these kinds of things.

00:48:20.700 --> 00:48:21.440
Yeah, definitely.

00:48:21.440 --> 00:48:28.660
Well, especially for a lot of the projects that you see kind of in the maker world of, yeah, like I have, you know, maybe I'm building like a costume and cosplay.

00:48:28.660 --> 00:48:32.800
And so I have some like cool, maybe like a sword that I want to light up or something.

00:48:32.800 --> 00:48:36.560
And, yeah, being able to make some custom enclosure for it is really cool.

00:48:37.100 --> 00:48:41.440
But, yeah, I love, too, just seeing with 3D printing, just people using it in different ways.

00:48:41.440 --> 00:48:46.180
Like, again, like going back to the art aspect and building cool sculptures or things.

00:48:46.180 --> 00:48:47.140
It's just fascinating stuff.

00:48:47.140 --> 00:48:48.680
I think there's a lot more that we'll see with 3D printing.

00:48:48.680 --> 00:48:54.960
But, yeah, 3D printing dovetails very nicely with microcontrollers and, you know, because you're building things.

00:48:54.960 --> 00:48:58.560
And usually you want those things to move or to sense the world or light up or something like that.

00:48:58.560 --> 00:48:59.040
So, yeah.

00:48:59.040 --> 00:48:59.440
Yeah.

00:48:59.440 --> 00:49:04.500
Yeah, at least to be in some kind of enclosure so it looks shiny and not just a bunch of wires, right?

00:49:04.500 --> 00:49:04.880
Right.

00:49:04.880 --> 00:49:06.240
Not the box of wires, yeah.

00:49:06.300 --> 00:49:08.900
It might kind of scare airport security or something like that.

00:49:08.900 --> 00:49:09.320
Exactly.

00:49:09.320 --> 00:49:10.280
He has a bomb.

00:49:10.280 --> 00:49:13.720
It's always difficult for me.

00:49:13.720 --> 00:49:15.340
So I travel sometimes to Maker Faire.

00:49:15.340 --> 00:49:17.940
And, oh, I always worry every time I go through.

00:49:17.940 --> 00:49:19.960
I'm like, I just know they're going to look in my bag.

00:49:19.960 --> 00:49:24.520
And I've got like this, you know, box of wires and just having to explain to someone what an Arduino is.

00:49:24.520 --> 00:49:27.600
It hasn't happened yet, but I know at some point I'm going to have to do that.

00:49:27.600 --> 00:49:27.940
It's coming.

00:49:27.940 --> 00:49:28.740
Yeah, yeah, yeah.

00:49:30.200 --> 00:49:33.780
So one thing I saw you guys have is the Adafruit Web IDE.

00:49:33.780 --> 00:49:34.440
What's that?

00:49:34.440 --> 00:49:35.060
Yeah.

00:49:35.060 --> 00:49:37.400
So that was something in the Raspberry Pi world.

00:49:37.400 --> 00:49:40.120
Basically, it's a program you can run on your Raspberry Pi.

00:49:40.320 --> 00:49:45.180
And it gives you a little web interface to type in code and run it like Python code.

00:49:45.180 --> 00:49:47.000
I think you can even access the file system.

00:49:47.000 --> 00:49:50.460
It came about actually in the early days of the Raspberry Pi.

00:49:50.460 --> 00:49:52.660
So the Raspberry Pi, I think it's about four years old now.

00:49:52.660 --> 00:50:05.500
In those early days, you know, they initially were just had spent all their time getting this $35 computer out there and making it work and turning Linux into something that a beginner could, you know, reasonably get started with and use.

00:50:06.140 --> 00:50:10.340
So there wasn't telling a sixth grader to fire up Emacs is probably not the way.

00:50:10.340 --> 00:50:11.020
Exactly.

00:50:11.020 --> 00:50:11.360
Yes.

00:50:11.360 --> 00:50:14.460
And so early days in the Raspberry Pi world, it was still a little bit.

00:50:14.460 --> 00:50:15.100
I mean, it was good.

00:50:15.100 --> 00:50:20.440
Like they had a graphical interface, but it was maybe a little more difficult sometimes to just get going and start programming things.

00:50:20.440 --> 00:50:28.300
So, yeah, we kind of created that as a way to do some of these early Raspberry Pi tutorials to show people like, OK, here's how you connect your board and here's how you start running code.

00:50:28.300 --> 00:50:32.580
But nowadays, the Raspberry Pi Foundation, you know, they had a lot of time and they've grown quite a bit.

00:50:32.740 --> 00:50:38.520
So they've done a lot more polish as far as like how you go from zero to starting running code.

00:50:38.520 --> 00:50:43.980
I mean, they have their new pixel operating system, which is a really nice reskin of the Linux environment.

00:50:43.980 --> 00:50:45.500
They've got some nice editors.

00:50:45.500 --> 00:50:48.340
I think they're like graphical block based editors and things now.

00:50:48.580 --> 00:50:56.760
So, you know, these days, maybe WebID hasn't been updated as much to, you know, or maybe you might be able to get more things from kind of what Raspberry Pi is doing.

00:50:56.760 --> 00:51:02.520
But it was originally I just created as a way to get code running quickly on the Raspberry Pi for people.

00:51:02.520 --> 00:51:03.100
Sure.

00:51:03.100 --> 00:51:03.600
Very cool.

00:51:03.600 --> 00:51:10.160
So one of the places that I really one of the things that Adafruit I really like is your learn.adafruit.com.

00:51:10.380 --> 00:51:16.700
There's just all these projects and some of them are kind of like you talked about at the beginning, like here's how you understand batteries or displays or whatever.

00:51:16.700 --> 00:51:21.860
But a lot of them are, hey, I made a really cool like thing for Halloween and here's how I made it.

00:51:21.860 --> 00:51:22.060
Right.

00:51:22.060 --> 00:51:25.420
These projects that you you could make or take and customize.

00:51:25.420 --> 00:51:25.740
Right.

00:51:25.740 --> 00:51:26.760
Yeah, exactly right.

00:51:26.760 --> 00:51:28.220
And there's a ton of things.

00:51:28.220 --> 00:51:28.960
I think I just checked.

00:51:28.960 --> 00:51:31.560
There are 1200 tutorials on the Adafruit learning system.

00:51:31.560 --> 00:51:33.800
So there is an immense amount of things there.

00:51:33.880 --> 00:51:34.420
And yeah, you're right.

00:51:34.420 --> 00:51:36.000
Like it falls in a lot of different categories.

00:51:36.000 --> 00:51:41.720
So like every product usually has a guide that goes with it that just shows you, okay, here's what you do when you get it.

00:51:41.720 --> 00:51:43.720
Here's how you might have to solder some things to it.

00:51:43.720 --> 00:51:46.200
Or here's how you download the software to get started with it.

00:51:46.200 --> 00:51:51.440
But then, yeah, like you said, there are lots of projects that just serve as like sometimes as inspiration.

00:51:51.440 --> 00:51:52.980
Like, hey, this is cool.

00:51:52.980 --> 00:51:57.460
Like, you know, the GPS dog collar, you know, maybe I want to make a cat dog collar or something like that.

00:51:57.460 --> 00:52:00.380
So I can, you know, take some of the same code and ideas from that.

00:52:00.380 --> 00:52:03.000
So, yeah, inspiration is a good thing for it.

00:52:03.360 --> 00:52:08.120
You know, and yeah, just kind of showing off cool things you can do with the projects.

00:52:08.120 --> 00:52:12.160
There are also some guides that, yeah, teach the basics, interesting things.

00:52:12.160 --> 00:52:18.100
You know, there's one guide that kind of tells you how to do sensor readings and analog readings.

00:52:18.100 --> 00:52:23.040
It seems like a boring topic of like, okay, how do you read an analog to digital converter?

00:52:23.040 --> 00:52:29.000
And then how do you smooth out the data to make it maybe not jump around as much and stuff like that?

00:52:29.000 --> 00:52:32.480
And so, you know, there's a guide to learn stuff like that, which sounds boring,

00:52:32.480 --> 00:52:36.400
but it's actually like a really kind of critical thing that you need to learn when you deal with these analog things.

00:52:36.400 --> 00:52:36.820
So, yeah.

00:52:36.820 --> 00:52:37.420
So, yeah.

00:52:37.420 --> 00:52:39.440
So we span kind of quite a broad range.

00:52:39.440 --> 00:52:44.800
You know, there's, I don't think I know of any case where, you know, we've looked at something and said, no, that's not a guide or something.

00:52:44.800 --> 00:52:53.380
You know, there's almost anything we can turn into a guide because it's, you know, it's either teaching someone how to do something or it's showing how a product works or just giving inspiration.

00:52:53.660 --> 00:52:56.280
Like some of the guides and projects are really advanced.

00:52:56.280 --> 00:53:03.840
Like, you know, there's some of these light painting projects where like the Raspberry Pi light painter, you know, you take a wand of these RGB pixels.

00:53:04.040 --> 00:53:15.160
And when you wave it around, you can do the persistence of vision effects where, you know, if you light up the pixels in a certain time and then you have a camera that has like a long exposure, it can kind of average out the movement.

00:53:15.160 --> 00:53:18.860
And so you can see really cool things floating in the air.

00:53:18.860 --> 00:53:20.860
Like, you know, it looks like an image floating in the air.

00:53:21.340 --> 00:53:27.760
But some of those projects can be a little more advanced to build, you know, might require like more kind of difficult soldering and stuff like that.

00:53:27.760 --> 00:53:27.940
Sure.

00:53:27.940 --> 00:53:31.560
So, you know, everyone might not want to build those, but just seeing that like, wow, that's really cool.

00:53:31.560 --> 00:53:38.040
I had no idea that I could make something that looks like that, you know, maybe inspire you to do something a little bit simpler or, you know, more capable.

00:53:38.040 --> 00:53:39.020
Yeah, that sounds awesome.

00:53:39.020 --> 00:53:40.240
I've picked a few that I like.

00:53:40.240 --> 00:53:42.600
I'll read them off just so people kind of get a sense for what's up there.

00:53:42.840 --> 00:53:51.420
So one that you guys had was an onion pie, P-I, not P-Y, which was like a took a raspberry pie and made it a Tor proxy, which is kind of cool.

00:53:51.420 --> 00:53:54.960
A GPS dog collar for your dog's fitness.

00:53:54.960 --> 00:54:00.000
LED bicycle things, wrap it on your bike and it can light up in certain ways.

00:54:00.000 --> 00:54:05.240
A DeLorean time circuit, a raspberry pie streaming radio for like Pandora type stuff.

00:54:05.240 --> 00:54:08.840
There's a couple of Halloween things like costumes and whatnot.

00:54:08.840 --> 00:54:12.540
And I think my favorite was a solar charging handbag, which is pretty cool.

00:54:12.740 --> 00:54:13.660
Oh yeah, that's a great one.

00:54:13.660 --> 00:54:21.400
Yeah, I love, I love those projects where it's the kind of thing where, you know, you could see that being a commercial product, like something that people would probably pay hundreds of dollars for.

00:54:21.400 --> 00:54:27.260
And just, you know, with a few dollars of components, you can build it yourself and customize it, make it the way you want.

00:54:27.260 --> 00:54:32.620
Like if you want a cool design or whatever, if you want to put it into some really neat, funky bag that you have, you can do that.

00:54:32.620 --> 00:54:34.000
So yeah, it's great stuff.

00:54:34.000 --> 00:54:34.820
Yeah, that one was cool.

00:54:34.820 --> 00:54:38.020
That's one of the things like I could see myself using that GPS dog collar.

00:54:38.020 --> 00:54:39.340
Interesting, but probably not.

00:54:39.340 --> 00:54:40.060
Yeah, yeah.

00:54:40.060 --> 00:54:40.440
Right, right.

00:54:40.440 --> 00:54:42.720
So what are the common, a couple of common.

00:54:42.720 --> 00:54:45.040
things you see created with Adafruit hardware?

00:54:45.380 --> 00:54:52.900
I think there are a couple standout projects that are, you know, very Adafruit, I don't know, has Adafruit DNA in them for sure.

00:54:52.900 --> 00:55:02.860
The Pie Girl, which is basically a Raspberry Pi that you put into a 3D printed enclosure that looks like a Game Boy, like a portable game plane unit.

00:55:02.900 --> 00:55:04.460
And you add a little display to it.

00:55:04.460 --> 00:55:06.060
We have a display called the Pi TFT.

00:55:06.060 --> 00:55:10.100
It's a real low cost display that you just snap onto the Raspberry Pi.

00:55:10.640 --> 00:55:13.220
And it's cool because it gives you what looks like a Game Boy.

00:55:13.220 --> 00:55:15.400
So you've got, you know, your direction pad and a couple buttons.

00:55:15.400 --> 00:55:20.760
But because it's a Raspberry Pi, you can run any games and emulators and things that the Raspberry Pi has.

00:55:20.760 --> 00:55:24.640
So you can play like old Nintendo games or Super Nintendo games and stuff like that on there.

00:55:24.640 --> 00:55:27.300
And so that one's, yeah, that one's super popular.

00:55:27.300 --> 00:55:28.500
Can I play Pitfall on it?

00:55:28.940 --> 00:55:30.260
Oh, yeah, you can definitely play Pitfall.

00:55:30.260 --> 00:55:32.800
You can play, you know, the 2600 version.

00:55:32.800 --> 00:55:35.240
You can play the Super Nintendo, whatever versions of it.

00:55:35.240 --> 00:55:36.460
So, yeah, lots of options there.

00:55:36.460 --> 00:55:42.300
Another one is the Cupcade, which is a mini arcade cabinet with the Raspberry Pi.

00:55:42.300 --> 00:55:43.000
And this one's fun.

00:55:43.000 --> 00:55:46.960
Like both of these actually, I've seen kind of commercial projects now.

00:55:46.960 --> 00:55:49.240
Like I think I was just in a Target now recently.

00:55:49.240 --> 00:55:55.440
I saw this tiny little arcade cabinet that reminded me of this Cupcade project, which now is, I think, like three or four years old.

00:55:55.440 --> 00:55:58.400
But it's a little miniature, like, you know, an arcade cabinet.

00:55:58.560 --> 00:56:02.420
Like you might imagine a Pac-Man cabinet with a little joystick and a couple little buttons.

00:56:02.420 --> 00:56:06.020
But, again, it's got that little Raspberry Pi behind it in the display.

00:56:06.020 --> 00:56:07.400
And so you can run a full emulator.

00:56:07.400 --> 00:56:08.700
You can run all kinds of arcade games.

00:56:08.700 --> 00:56:11.220
So, you know, those are definitely really popular projects.

00:56:11.220 --> 00:56:15.560
Like things that use Raspberry Pi are really popular because the Raspberry Pi community is really large.

00:56:15.560 --> 00:56:17.700
But, yeah, we're really well known.

00:56:17.700 --> 00:56:19.460
We did a lot of things with wearables.

00:56:19.460 --> 00:56:26.900
So we have some different boards that are great for like sewing onto clothing and controlling things like lights and sensors and stuff like that.

00:56:26.900 --> 00:56:28.800
So we have fun projects like that.

00:56:28.800 --> 00:56:29.160
Nice.

00:56:29.160 --> 00:56:34.660
Yeah, I saw you had made, I saw some picture where you had one of those arc reactor type things from Iron Man.

00:56:34.660 --> 00:56:35.820
Yeah, exactly right.

00:56:35.820 --> 00:56:38.660
So I was at the Emerald City Comic Con here in Seattle.

00:56:38.660 --> 00:56:39.780
And, yeah, that was fun.

00:56:39.780 --> 00:56:44.560
Basically, I took a board that we have called Circuit Playground that has a ring of little lights on it.

00:56:44.640 --> 00:56:46.120
And then it's the easiest thing.

00:56:46.120 --> 00:56:50.180
I just put a magnet on the back, a name tag magnet, and just clipped it to my shirt.

00:56:50.180 --> 00:56:51.680
And it's this little circle of lights.

00:56:51.680 --> 00:56:53.920
But then I could control, I could program it.

00:56:53.920 --> 00:56:57.220
Because in the Iron Man universe, I think the arc reactor is a little boring.

00:56:57.220 --> 00:56:59.740
You know, Tony Stark, it's just, it only glows blue.

00:56:59.740 --> 00:57:01.860
And maybe that's because of the, you know, the way it works.

00:57:01.860 --> 00:57:07.280
But in my world, with my, with Tony D's arc reactor, I'm going to make it glow different colors.

00:57:07.360 --> 00:57:10.940
So I had mine going through, like, rainbow colors and pulsing in different effects and things like that.

00:57:10.940 --> 00:57:13.860
And that's cool because I could just write the code that controls it myself.

00:57:13.860 --> 00:57:14.780
You know, I built it myself.

00:57:14.780 --> 00:57:16.080
So I have total control over it.

00:57:16.080 --> 00:57:17.480
Those are all cool projects.

00:57:17.480 --> 00:57:20.100
So one more project question.

00:57:20.100 --> 00:57:24.620
Do you know of any, like, commercial projects or Kickstarter type things?

00:57:24.620 --> 00:57:29.480
Have people, like, used MicroPython or Adafruit to prototype something and then make it into a project?

00:57:29.480 --> 00:57:30.120
Even if it's...

00:57:30.120 --> 00:57:30.940
Good question, yeah.

00:57:30.940 --> 00:57:32.620
So I do see Kickstarters all the time.

00:57:32.620 --> 00:57:33.960
I can't think of any off the top of my head.

00:57:33.960 --> 00:57:36.840
But I've definitely seen, you know, if you look at a Kickstarter, in a lot of cases,

00:57:36.840 --> 00:57:39.260
they'll be showing the prototype that they built.

00:57:39.260 --> 00:57:44.040
And look for, like, a little blue board with a white star or a white flower on it.

00:57:44.040 --> 00:57:46.400
And that's, in a lot of cases, if they're using a sensor or something,

00:57:46.400 --> 00:57:47.980
they've probably got an Adafruit board on there.

00:57:47.980 --> 00:57:50.660
Because it's great for, you know, if you're doing a Kickstarter,

00:57:50.660 --> 00:57:52.960
you're trying to very quickly build this prototype.

00:57:52.960 --> 00:57:56.760
And so you don't have time yet to lay out that circuit board and figure out how it works.

00:57:56.760 --> 00:57:59.700
You know, just grab the sensor off the shelf and make it work.

00:57:59.700 --> 00:58:03.320
But then the cool thing is, because we publish all of our designs with open source,

00:58:03.320 --> 00:58:05.060
when you're ready to turn it into that product,

00:58:05.180 --> 00:58:06.940
you just grab our design files and you can see,

00:58:06.940 --> 00:58:08.460
oh, here's how they built their sensor board.

00:58:08.460 --> 00:58:09.900
And so now I can integrate it in my component.

00:58:09.900 --> 00:58:11.660
So yeah, I did.

00:58:11.660 --> 00:58:15.860
So one thing, though, that was a really popular Adafruit project was the Firewalker sneaker,

00:58:15.860 --> 00:58:18.100
which is basically you put a ring of LEDs,

00:58:18.100 --> 00:58:21.560
RGB controllable LEDs around the bottom of your shoes.

00:58:21.560 --> 00:58:24.920
And then you put some little sensors in the shoes to detect when you take a step

00:58:24.920 --> 00:58:26.660
and you can light up and animate the sneakers.

00:58:26.660 --> 00:58:29.460
That was a project, I think it's about four years old or so,

00:58:29.460 --> 00:58:30.960
and was really novel and cool.

00:58:31.320 --> 00:58:36.540
And nowadays, like you can walk into pretty much any shopping mall and there's like a stand in the middle of the shopping mall

00:58:36.540 --> 00:58:39.480
where they're selling commercial versions of these Firewalker sneakers.

00:58:39.480 --> 00:58:41.640
I have seen people walking around with these.

00:58:41.640 --> 00:58:42.100
Yeah.

00:58:42.100 --> 00:58:44.480
And a lot of them, if you look at them, they're not as advanced.

00:58:44.480 --> 00:58:48.100
Most of them don't have the sensors that detect when you take a step.

00:58:48.100 --> 00:58:49.740
They'll just like have a fixed animation.

00:58:50.200 --> 00:58:52.060
So that's, you know, not as interesting.

00:58:52.060 --> 00:58:54.620
Like when you build it yourself, you can make it more fun and interesting.

00:58:54.620 --> 00:58:57.540
And I haven't seen anything yet with MicroPython,

00:58:57.540 --> 00:59:01.760
but I'm pretty sure we'll start to see that in the near future because that would be fun.

00:59:01.760 --> 00:59:05.160
You know, make the MicroPython Firewalker sneakers where, you know,

00:59:05.160 --> 00:59:09.400
you can have like Python code controlling it or maybe use a board that talks to your phone.

00:59:09.400 --> 00:59:13.180
And, you know, maybe your sneakers can glow when you get like a notification or something.

00:59:13.260 --> 00:59:17.500
Your sneakers could tweet every time you take a step, which might be a little excessive.

00:59:17.500 --> 00:59:21.320
But yeah, so that's maybe the future of things that we'll see with products.

00:59:21.320 --> 00:59:22.600
That sounds pretty cool.

00:59:22.600 --> 00:59:23.540
Very nice.

00:59:23.540 --> 00:59:23.820
Okay.

00:59:23.820 --> 00:59:28.860
So I think we're pretty much out of time, Tony, but thank you for sharing all those stories.

00:59:28.860 --> 00:59:34.560
Hopefully people are inspired to go out and try to create cool things they've always wanted to see exist.

00:59:34.560 --> 00:59:35.280
Oh, yeah, totally.

00:59:35.280 --> 00:59:35.640
Exactly.

00:59:35.640 --> 00:59:39.780
You know, that's what we love to do in Adafruit is show people how things work and then show,

00:59:39.780 --> 00:59:41.300
see what you've done with it.

00:59:41.300 --> 00:59:43.520
You know, come back and show us what you built with it.

00:59:43.520 --> 00:59:43.880
Really?

00:59:43.880 --> 00:59:45.620
Show that it's not like so difficult.

00:59:45.620 --> 00:59:47.040
Like, hey, these are all the steps it takes.

00:59:47.040 --> 00:59:47.640
You can do this.

00:59:47.640 --> 00:59:48.580
Yeah, the greatest thing.

00:59:48.580 --> 00:59:54.740
So we do every Wednesday at, I think it's 4.30 Pacific, 7.30 Eastern time.

00:59:54.740 --> 00:59:58.200
We have a show and tell on our YouTube channel and it's a live show.

00:59:58.200 --> 01:00:02.320
People can come on and we have a hangout and you can show off the projects you built.

01:00:02.320 --> 01:00:06.840
And the best thing, and Lamora said, you know, the greatest moments for her are when

01:00:06.840 --> 01:00:11.560
you have like a seven-year-old girl come on to show off, you know, what she built or what

01:00:11.560 --> 01:00:12.140
she made.

01:00:12.140 --> 01:00:14.280
And it happens quite often.

01:00:14.280 --> 01:00:16.080
You know, we inspire someone.

01:00:16.080 --> 01:00:20.300
And then I think pretty soon we'll start to see that those seven-year-olds who came on the

01:00:20.300 --> 01:00:23.880
show, you know, five, six, seven years from now are going to be coming back and saying,

01:00:23.880 --> 01:00:26.540
hey, now I'm in college and look what, you know, you inspire me to do.

01:00:26.540 --> 01:00:27.680
So looking forward to that.

01:00:27.680 --> 01:00:28.640
Yeah, that's awesome.

01:00:29.020 --> 01:00:33.800
You know, it just came to mind, like you go to these school science fairs and they have

01:00:33.800 --> 01:00:37.540
these projects and a lot of them are like, well, I put a tadpole in a tank and we watched

01:00:37.540 --> 01:00:38.500
it and measured it.

01:00:38.500 --> 01:00:42.200
So, you know, it seems like if you took some of these things, you could do a really cool

01:00:42.200 --> 01:00:42.840
science project.

01:00:42.840 --> 01:00:44.000
Oh yeah, yep, exactly.

01:00:44.000 --> 01:00:46.640
This is maybe science projects on easy mode.

01:00:46.640 --> 01:00:50.420
You know, you just find cool projects we've done and then, you know, modify them yourself

01:00:50.420 --> 01:00:51.440
and build on top of them.

01:00:51.440 --> 01:00:52.180
Yep, exactly.

01:00:52.180 --> 01:00:52.720
Exactly.

01:00:52.720 --> 01:00:53.120
All right.

01:00:53.120 --> 01:00:55.080
Well, two final questions before I let you out of here.

01:00:55.080 --> 01:00:55.480
All right.

01:00:55.480 --> 01:00:58.120
So if you're going to write some Python code, what editor do you open up?

01:00:58.120 --> 01:01:00.720
Oh, I use the Atom text editor these days.

01:01:00.720 --> 01:01:02.020
So I like it a lot.

01:01:02.020 --> 01:01:04.620
You know, it's simple, runs on all the different operating systems.

01:01:04.620 --> 01:01:07.060
I like the color scheme it has by default too.

01:01:07.060 --> 01:01:08.260
Yeah, I like Atom as well.

01:01:08.260 --> 01:01:08.780
Nice one.

01:01:08.780 --> 01:01:12.800
And most notable or PyPI package you want to recommend?

01:01:12.800 --> 01:01:15.060
I really like the click package.

01:01:15.060 --> 01:01:17.420
It's used to build command line interfaces.

01:01:17.420 --> 01:01:21.060
So it's, I think it was created by the person who created the Flask web framework.

01:01:21.060 --> 01:01:22.720
And it's really nice.

01:01:22.720 --> 01:01:27.100
It has that same kind of concept of, you know, building command line apps, but breaking it down

01:01:27.100 --> 01:01:29.460
into kind of simpler functions that you implement for it.

01:01:29.460 --> 01:01:33.540
So it makes it really easy to build an app that does something or a command line tool that does

01:01:33.540 --> 01:01:33.820
something.

01:01:33.820 --> 01:01:34.200
Yeah.

01:01:34.200 --> 01:01:34.640
Excellent.

01:01:34.640 --> 01:01:34.960
Excellent.

01:01:34.960 --> 01:01:35.700
All right.

01:01:35.700 --> 01:01:38.000
Final call to action for people to get started with all this stuff.

01:01:38.000 --> 01:01:38.860
What should they do?

01:01:38.860 --> 01:01:39.240
Yes.

01:01:39.240 --> 01:01:45.220
If you're new to Python and hardware, you know, like I said, the Raspberry Pi is a great platform.

01:01:45.220 --> 01:01:49.820
If you're just used to desktop Python and you just want something that feels like a desktop

01:01:49.820 --> 01:01:50.260
computer.

01:01:50.260 --> 01:01:56.060
But then also explore MicroPython and some of the boards I mentioned, things like the ESP8266.

01:01:56.060 --> 01:02:00.420
That's probably the best entry level MicroPython board right now, just because it's a good balance

01:02:00.420 --> 01:02:03.040
of cost and performance and really easy to get started.

01:02:03.040 --> 01:02:05.880
But keep your eyes peeled for more boards coming in the future.

01:02:05.880 --> 01:02:07.420
Circuit Playground board I mentioned.

01:02:07.500 --> 01:02:11.500
We've got some boards that are coming soon that are going to run MicroPython and CircuitPython

01:02:11.500 --> 01:02:13.920
and some of these versions of Python that run on microcontrollers.

01:02:13.920 --> 01:02:16.380
So that'll be another good kind of getting started option for people.

01:02:16.380 --> 01:02:17.880
So yeah, definitely check out those boards.

01:02:17.880 --> 01:02:20.620
And yeah, don't be afraid to get started.

01:02:20.620 --> 01:02:23.520
You know, one thing that holds people back is just thinking, I'm going to break something.

01:02:23.520 --> 01:02:24.560
I'm going to spend a bunch of money.

01:02:24.560 --> 01:02:27.320
And, you know, it's going to just destroy this piece of hardware.

01:02:27.320 --> 01:02:29.560
They're more resilient than you think.

01:02:29.560 --> 01:02:33.480
And like I said, if you follow a guide, if you look at a project that someone's already done,

01:02:33.480 --> 01:02:36.880
you're going to run into less problems usually and have a little bit more fun

01:02:36.880 --> 01:02:38.740
and get kind of quicker feedback on things.

01:02:38.740 --> 01:02:39.800
Yeah, absolutely.

01:02:39.800 --> 01:02:41.500
Check out learn.adafruit.com.

01:02:41.500 --> 01:02:43.320
There's a ton of inspiration there for you.

01:02:43.320 --> 01:02:44.600
All right.

01:02:44.600 --> 01:02:45.820
Tony, thanks for being on the show.

01:02:45.820 --> 01:02:46.240
Oh, yeah.

01:02:46.240 --> 01:02:46.780
Thank you so much.

01:02:46.780 --> 01:02:47.180
This is great.

01:02:47.180 --> 01:02:47.540
Yeah.

01:02:47.540 --> 01:02:48.040
Talk to you later.

01:02:48.040 --> 01:02:48.420
Yeah.

01:02:48.420 --> 01:02:48.700
See ya.

01:02:48.700 --> 01:02:53.320
This has been another episode of Talk Python To Me.

01:02:53.320 --> 01:02:55.800
Today's guest has been Tony DeCola.

01:02:55.800 --> 01:03:00.300
And this episode has been sponsored by Advanced Digital and the Strange Loop Conference.

01:03:00.300 --> 01:03:06.260
Advanced Digital would love to work with you to build and extend one of the most visited websites

01:03:06.260 --> 01:03:08.200
in the US in Python.

01:03:08.200 --> 01:03:12.640
Reach out to them at python.advance.net to see if there's a fit.

01:03:12.640 --> 01:03:17.820
The Strange Loop Conference would love to have you present on languages, web development, AI,

01:03:17.820 --> 01:03:18.660
and much more.

01:03:18.660 --> 01:03:22.820
Visit talkpython.fm/strange loop to submit your proposal.

01:03:22.820 --> 01:03:24.060
Don't wait.

01:03:24.300 --> 01:03:26.680
The call for proposals closes on May 8th.

01:03:27.560 --> 01:03:29.820
Are you or your colleagues trying to learn Python?

01:03:29.820 --> 01:03:32.780
Well, be sure to visit training.talkpython.fm.

01:03:32.780 --> 01:03:38.600
We now have year-long course bundles and a couple of new classes released just this week.

01:03:38.600 --> 01:03:39.580
Have a look around.

01:03:39.580 --> 01:03:41.040
I'm sure you'll find a class you'll enjoy.

01:03:41.720 --> 01:03:43.440
Be sure to subscribe to the show.

01:03:43.440 --> 01:03:45.660
Open your favorite podcatcher and search for Python.

01:03:45.660 --> 01:03:46.900
We should be right at the top.

01:03:46.900 --> 01:03:53.000
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct

01:03:53.000 --> 01:03:56.180
RSS feed at /rss on talkpython.fm.

01:03:56.660 --> 01:04:01.280
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

01:04:01.280 --> 01:04:05.720
Corey just recently started selling his tracks on iTunes, so I recommend you check it out

01:04:05.720 --> 01:04:07.980
at talkpython.fm/music.

01:04:07.980 --> 01:04:12.420
You can browse his tracks he has for sale on iTunes and listen to the full-length version

01:04:12.420 --> 01:04:13.340
of the theme song.

01:04:13.340 --> 01:04:15.420
This is your host, Michael Kennedy.

01:04:15.420 --> 01:04:16.700
Thanks so much for listening.

01:04:16.700 --> 01:04:17.880
I really appreciate it.

01:04:17.880 --> 01:04:20.040
Smix, let's get out of here.

01:04:21.940 --> 01:04:22.940
Bye.

01:04:22.940 --> 01:04:23.940
Bye.

01:04:23.940 --> 01:04:23.940
Bye.

01:04:23.940 --> 01:04:24.940
Bye.

01:04:24.940 --> 01:04:25.940
Bye.

01:04:25.940 --> 01:04:25.940
Bye.

01:04:25.940 --> 01:04:25.940
Bye.

01:04:25.940 --> 01:04:25.940
Bye.

01:04:25.940 --> 01:04:26.940
Bye.

01:04:26.940 --> 01:04:27.940
Bye.

01:04:27.940 --> 01:04:27.940
Bye.

01:04:27.940 --> 01:04:27.940
Bye.

01:04:27.940 --> 01:04:27.940
Bye.

01:04:27.940 --> 01:04:27.940
Bye.

01:04:27.940 --> 01:04:27.940
Bye.

01:04:27.940 --> 01:04:28.940
Bye.

01:04:28.940 --> 01:04:29.940
Bye.

01:04:29.940 --> 01:04:39.340
developers developers developers developers developers developers developers developers

01:04:39.340 --> 01:04:42.100
Developers, developers, developers, developers.

01:04:42.100 --> 01:04:42.260
you

01:04:42.260 --> 01:04:44.320
you

