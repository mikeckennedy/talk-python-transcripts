WEBVTT

00:00:00.001 --> 00:00:04.780
When you think about the power of Python, the clean language or powerful standard library may come to mind.

00:00:04.780 --> 00:00:07.640
You might certainly point to the external packages as well.

00:00:07.640 --> 00:00:12.520
But what about the relative ease of picking up new libraries or even parts of the standard library?

00:00:12.520 --> 00:00:15.060
Documentation plays an important role there.

00:00:15.060 --> 00:00:23.780
And the tools in the Python space for building solid documentation and even publishing articles and books involving live code are huge assets.

00:00:24.020 --> 00:00:35.160
In this episode, we have Paul Everett, Radian Gedem, Chris Holdgraff, and Chris Saywell to update us on Sphinx, Mist Parser, Executable Books, Jupyter Book, Sphinx Themes, and much more.

00:00:35.160 --> 00:00:40.800
This is Sock Python under me, episode 354, recorded January 19th, 2022.

00:00:40.800 --> 00:00:57.400
Welcome to Talk Python under me, a weekly podcast on Python.

00:00:57.400 --> 00:00:59.120
This is your host, Michael Kennedy.

00:00:59.120 --> 00:01:04.800
Follow me on Twitter where I'm @mkennedy and keep up with the show and listen to past episodes at talkpython.fm.

00:01:04.800 --> 00:01:08.340
And follow the show on Twitter via at Talk Python.

00:01:08.580 --> 00:01:12.040
We've started streaming most of our episodes live on YouTube.

00:01:12.040 --> 00:01:19.540
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:19.540 --> 00:01:23.940
This episode is brought to you by SignalWire and Tonic.ai.

00:01:23.940 --> 00:01:26.420
Please check out what they're offering during their segments.

00:01:26.420 --> 00:01:27.920
It really helps support the show.

00:01:27.920 --> 00:01:32.180
Transcripts for this and all of our episodes are brought to you by Assembly.ai.

00:01:32.180 --> 00:01:34.840
Do you need a great automatic speech-to-text API?

00:01:34.840 --> 00:01:37.380
Get human-level accuracy in just a few lines of code.

00:01:37.380 --> 00:01:40.240
Visit talkpython.fm/Assembly.ai.

00:01:40.240 --> 00:01:46.580
Pradyan, Paul, Chris H., and Chris S., welcome to Talk Python to Me.

00:01:46.580 --> 00:01:47.360
It's great to have you all here.

00:01:47.360 --> 00:01:47.940
Good to be here.

00:01:47.940 --> 00:01:48.920
Thanks for doing this, Michael.

00:01:48.920 --> 00:01:49.580
Nice to be here.

00:01:49.580 --> 00:01:50.020
Thank you.

00:01:50.020 --> 00:01:50.820
Yeah, absolutely.

00:01:50.820 --> 00:01:52.120
Happy to be doing it.

00:01:52.200 --> 00:02:01.360
I think talking about documentation and all the static site stuff and book generation stuff that we're going to talk about is going to be super fun.

00:02:01.360 --> 00:02:07.340
You all are at the center of various fulcrums of that throughout the ecosystem.

00:02:07.340 --> 00:02:09.120
So it's great to have you here.

00:02:09.120 --> 00:02:10.480
Great to be talking about that stuff.

00:02:10.920 --> 00:02:16.780
So let's just start really quick with a quick introduction and then what you're up to these days.

00:02:16.780 --> 00:02:19.780
Paul, you're a regular here, so you want to go first?

00:02:19.780 --> 00:02:20.160
Sure.

00:02:20.160 --> 00:02:21.360
I'm Paul Everett.

00:02:21.360 --> 00:02:22.920
I'm a JetBrains developer advocate.

00:02:22.920 --> 00:02:24.640
Big fan of the show.

00:02:24.640 --> 00:02:25.960
Big fan.

00:02:25.960 --> 00:02:29.800
Total fanboy of the other three people here.

00:02:29.800 --> 00:02:40.560
I've got all kinds of stories about where I was when I found out about Myst and the parser and desperately wishing I could join Pradyen and all the things that he's doing.

00:02:40.560 --> 00:02:44.780
And I will add big, big fan of Carol Willing.

00:02:44.780 --> 00:02:46.720
And when I grew up, I want to be Carol Willing.

00:02:46.720 --> 00:02:49.100
And you're still at JetBrains?

00:02:49.100 --> 00:02:50.120
Still at JetBrains.

00:02:50.120 --> 00:02:50.920
Right on.

00:02:50.920 --> 00:02:52.620
Keeping the PyCharm flowing.

00:02:52.620 --> 00:02:53.440
Right on.

00:02:53.440 --> 00:02:54.840
Pradyen, how about you?

00:02:54.840 --> 00:02:59.580
I work at Bloomberg, although not what I'm going to talk about today is related to work.

00:02:59.580 --> 00:03:00.960
Software engineer there.

00:03:00.960 --> 00:03:02.900
Work on the bathroom infrastructure team.

00:03:02.900 --> 00:03:05.140
I am a maintainer on pip.

00:03:05.140 --> 00:03:10.880
I have written a Sphinx team for two, depending on how you count the second one.

00:03:10.880 --> 00:03:17.580
And I'm involved in a bunch of sort of various efforts around Sphinx at this point.

00:03:17.580 --> 00:03:25.560
I've sort of made myself comfortable in these spaces and sort of made my way into the various discussion forums, I guess.

00:03:25.560 --> 00:03:25.860
Yeah.

00:03:25.860 --> 00:03:26.500
Fantastic.

00:03:26.500 --> 00:03:28.620
With me, I guess, in this topic.

00:03:28.620 --> 00:03:29.180
Awesome.

00:03:29.180 --> 00:03:29.920
Well, welcome.

00:03:29.920 --> 00:03:34.840
You seem to be the emergency maintainer of many open source projects, like Live Reload.

00:03:34.840 --> 00:03:36.240
Yeah.

00:03:36.240 --> 00:03:40.060
I have a mild issue of not knowing when to stop.

00:03:40.060 --> 00:03:41.220
That's good.

00:03:41.220 --> 00:03:41.760
All right.

00:03:41.760 --> 00:03:42.500
Chris H.

00:03:42.500 --> 00:03:42.900
Yeah.

00:03:42.900 --> 00:03:44.060
So my name is Chris Holgraf.

00:03:44.060 --> 00:03:57.440
I'm the director of the International Interactive Computing Collaboration, or 2i2c, which is a nonprofit that runs cloud infrastructure for interactive computing and the Jupyter ecosystem and the sort of surrounding ecosystem alongside of it.

00:03:57.440 --> 00:04:02.100
I'm a little bit of a lot of research and the Jupyter ecosystem.

00:04:02.100 --> 00:04:03.100
I'm a little bit of a lot of the Jupyter ecosystem.

00:04:03.100 --> 00:04:08.600
I've worked a lot on Jupyter Hub, which serves multiple Jupyter sessions via some kind of centralized cloud infrastructure.

00:04:08.600 --> 00:04:20.080
I also work a lot on the Binder project, which focuses on more scientific reproducibility and shareable computing environments in a kind of cloud agnostic and pretty flexible manner.

00:04:20.080 --> 00:04:20.840
Yeah, that's fantastic.

00:04:20.840 --> 00:04:33.200
For people who don't know about Binder, that's basically if you are at a GitHub repo or some published notebook that's not interactive, you can click that and it'll fire up a little environment where you can go and explore the notebook for real, right?

00:04:33.200 --> 00:04:33.780
Yeah, exactly.

00:04:33.780 --> 00:04:48.200
And so a lot of these things are kind of surrounding this general topic of like scientific communication, scientific reproducibility, bringing those kind of like data workflows and facilitating them with software development, which is related to a lot of the stuff we're talking about today as well.

00:04:48.200 --> 00:04:48.800
Yeah, fantastic.

00:04:48.800 --> 00:04:51.200
You also have worked on the MIST project, right?

00:04:51.440 --> 00:04:51.820
Yes, yeah.

00:04:51.820 --> 00:04:58.780
And one of the projects that I'm focusing on right now, along with Chris S and a few other collaborators, is called the Executable Books Project.

00:04:58.780 --> 00:05:18.500
And this is basically an attempt at improving the state of open source kind of community-driven tools in the Python ecosystem around scientific communication and building a lot on top of the Sphinx ecosystem, because there's a lot of good material there to work with and a lot of improvements that can be made that'll benefit the broader Python community as well.

00:05:18.500 --> 00:05:19.360
Yeah, yeah, very cool.

00:05:19.360 --> 00:05:21.280
Looking forward to talking about Jupyter Book as well.

00:05:21.280 --> 00:05:22.000
That'll be fun.

00:05:22.000 --> 00:05:24.160
Chris Siewel, you're back.

00:05:24.160 --> 00:05:25.440
Tell us about yourself.

00:05:25.440 --> 00:05:28.960
Yeah, so I work in the Executable Books.

00:05:28.960 --> 00:05:37.760
I guess essentially my kind of focus is on making the best tools for scientists to make open reproducible science.

00:05:37.760 --> 00:05:50.040
So I work 50% of the time here in Switzerland at EPFL on a package called ADA, which is a Python workflow engine for running simulations, orchestrating simulations.

00:05:50.440 --> 00:05:55.520
And then I work the other 50% of the time in executable books on Mist and Jupyter Book.

00:05:55.520 --> 00:05:56.840
Yeah, that's really fantastic.

00:05:56.840 --> 00:06:01.040
Is any of your work in Switzerland, does it have to do with CERN or other projects?

00:06:01.040 --> 00:06:02.400
No, not to do with CERN.

00:06:02.400 --> 00:06:07.400
It's an EPFL in a group on materials discovery.

00:06:07.400 --> 00:06:08.020
Yeah, fantastic.

00:06:08.600 --> 00:06:12.040
Let's start by talking about Sphinx.

00:06:12.040 --> 00:06:17.180
So when I think about Sphinx, I think about Python documentation.

00:06:17.180 --> 00:06:21.500
So who wants to sort of set the stage for Sphinx?

00:06:21.500 --> 00:06:27.180
I mean, I guess it does say the Python documentation generator, but it does more than that as well if you wanted to.

00:06:27.440 --> 00:06:28.700
So guys, what is Sphinx?

00:06:28.700 --> 00:06:30.060
When do I use this?

00:06:30.060 --> 00:06:30.820
What's its value?

00:06:30.820 --> 00:06:31.960
It's been around for a long time.

00:06:31.960 --> 00:06:32.900
I know that much.

00:06:32.900 --> 00:06:33.900
Let's do a round table.

00:06:33.900 --> 00:06:36.680
I'd love to hear everyone's elevator pitch.

00:06:36.680 --> 00:06:37.200
Yeah, exactly.

00:06:37.200 --> 00:06:38.540
What's the elevator pitch for Sphinx?

00:06:38.680 --> 00:06:45.280
I can start with sort of how I got into Sphinx and then maybe how I use Sphinx now, which is a little bit different from how I initially used it.

00:06:45.280 --> 00:06:50.980
I think that a lot of people, so Sphinx has been around for a really long time and it's a really powerful tool for documentation.

00:06:50.980 --> 00:06:55.060
And a lot of people use it alongside of their software projects that they work on.

00:06:55.060 --> 00:07:01.300
So my first introduction to Sphinx was via, it was actually a neuroscience analytics package called MNE Python.

00:07:01.300 --> 00:07:08.100
And we needed documentation to describe, you know, the APIs and the functions and the classes and things like use cases and examples.

00:07:08.620 --> 00:07:23.640
And so one of the really useful things about Sphinx is that it has an inherent extensibility and a lot of flexibility so that you can both generate like narrative documentation with it, but also include programmatically generated documentation, API documentation, and that kind of thing.

00:07:23.640 --> 00:07:35.320
So it lets you kind of like more seamlessly merge together code documentation or documentation embedded within code and your more kind of traditional narrative examples, tutorials, that kind of a thing.

00:07:35.460 --> 00:07:41.520
I see. Almost like a wiki plus an API documentation generator in one.

00:07:41.520 --> 00:07:45.720
Yeah. Plus that's been around for a long time and with an inherent extensibility.

00:07:45.720 --> 00:07:54.800
So a lot of different sub communities have kind of built out their own community specific documentation that builds on top of the kind of basic Sphinx building blocks.

00:07:54.800 --> 00:07:58.100
Sure. I bet the scientific community has got a lot of specializations.

00:07:58.100 --> 00:08:00.520
They're like, we need to be able to express stuff like this, right?

00:08:00.520 --> 00:08:15.640
Well, so that kind of gets me to the second part of what I was going to describe, which is I think over time, and this is one of the inspirations behind Jupyter book to some degree, is the realization that like technical and API documentation is also really useful.

00:08:16.020 --> 00:08:23.200
Well, I should say the things you need to build for really good technical and API documentation are really useful for other kinds of use cases as well.

00:08:23.200 --> 00:08:27.280
And so I saw some other groups in the scientific ecosystem.

00:08:27.280 --> 00:08:32.580
There's a really interesting one called Simpeg, which I think is just S-I-M-P-E-G dot X-Y-Z.

00:08:32.580 --> 00:08:33.720
I'm pretty sure that's what it is.

00:08:33.880 --> 00:08:41.080
And they basically built out a whole geospatial analytics tutorial and sort of documentation resource just built on Sphinx.

00:08:41.080 --> 00:08:54.820
And so for me, seeing that, it kind of unlocked an aha moment in my head to realize that you could also use the same documentation engine for documenting lots of other things, not just software packages and things like that.

00:08:54.820 --> 00:09:02.100
Technical documentation is quite generic and overlaps quite a lot with like scientific documentation and scholarly documentation.

00:09:02.100 --> 00:09:06.340
And so that's the space that we've been exploring over the last couple of months and years.

00:09:06.340 --> 00:09:07.060
Yeah, fantastic.

00:09:07.060 --> 00:09:08.980
And a lot of the outputs are super flexible.

00:09:08.980 --> 00:09:20.020
It outputs HTML, which you might host on somewhere like Read the Docs or Netlify, but also LaTeX, which is really important for publications and EPUB for eBooks and whatnot.

00:09:20.020 --> 00:09:20.740
So pretty cool.

00:09:20.740 --> 00:09:36.040
I think Sphinx is documentation generated written in Python, primarily intended for technical documentation with the ability to sort of intertwine narrative documentation with auto-generated documentation that picks up things from your code.

00:09:36.040 --> 00:09:36.680
Right.

00:09:36.680 --> 00:09:37.440
Yeah.

00:09:37.440 --> 00:09:54.060
And this whole thing is combined with the ability to have a variety of output formats, as well as a variety of extension points within the tooling to extend basically every aspect of building that documentation.

00:09:54.060 --> 00:09:54.540
Interesting.

00:09:54.540 --> 00:09:55.120
Yeah.

00:09:55.120 --> 00:09:58.820
So for example, testing the code snippets that you might have in your documentation.

00:09:58.820 --> 00:09:59.480
Yes.

00:09:59.480 --> 00:10:01.780
Or doc strings or something like that, maybe.

00:10:01.780 --> 00:10:02.140
Yep.

00:10:02.140 --> 00:10:09.860
So that is doc test and that's baked into Sphinx and Python's documentation, which happens to also be written in Sphinx.

00:10:09.860 --> 00:10:10.180
Okay.

00:10:10.180 --> 00:10:10.900
Interesting.

00:10:10.900 --> 00:10:11.700
By Sphinx.

00:10:11.700 --> 00:10:17.500
So there's a lot of capability and power hidden underneath the shell of Sphinx.

00:10:17.500 --> 00:10:27.580
And as Chris was mentioning, there's really extensive customizability here that you can then take and specialize it to your specific use case.

00:10:27.580 --> 00:10:37.700
And that's sort of both the power and, you know, there's a con to that, which is, hey, you got to maintain this and you got to keep this functioning and stuff.

00:10:37.840 --> 00:10:44.660
But yeah, it's a really powerful documentation generation tool that is perhaps a little too powerful for its own good.

00:10:44.660 --> 00:10:47.900
Very good.

00:10:47.900 --> 00:10:48.360
Very good.

00:10:48.360 --> 00:10:48.900
Yeah.

00:10:48.900 --> 00:10:52.320
So docs.python.org is generated by Sphinx, huh?

00:10:52.320 --> 00:10:52.660
Yes.

00:10:52.660 --> 00:10:53.180
Fantastic.

00:10:53.180 --> 00:10:54.420
All right, Chris.

00:10:54.420 --> 00:10:54.680
Yeah.

00:10:54.680 --> 00:11:05.000
I think the other point that I wanted to touch in is one of the brilliant points there on the Sphinx site is the cross-referencing capability is just second to none.

00:11:05.000 --> 00:11:10.400
You know, you can reference inner page, you can reference cross-page within your own documentation.

00:11:10.400 --> 00:11:25.220
But also, and one of the things that's really helped to build on Sphinx is the Read the Docs community and the work they're doing so that you can reference any other site that's built on Read the Docs as well in a really nice way.

00:11:25.220 --> 00:11:32.020
Yeah, that's something that really surprised me when I learned about Sphinx is, you know, give a quick shout out to Paul.

00:11:32.160 --> 00:11:39.980
Paul wrote a course that we hosted over on Talk Python, generating static sites with Sphinx and Markdown, which is really, really cool.

00:11:39.980 --> 00:11:44.260
And one of the things that surprised me is when I think about creating multiple pages.

00:11:44.260 --> 00:11:55.400
So, for example, if I'm on GitHub and I want to have this part of some read me here, point to some other read me or some other Markdown, I just go in there, I type, you know, here's the relative path over to that thing.

00:11:55.400 --> 00:11:57.240
And I come up with the text that goes there.

00:11:57.240 --> 00:12:07.640
Sphinx allows you to have kind of an index into all the sub elements of the page, not just the pages, but like parts of the pages, you know, headers and whatnot.

00:12:07.640 --> 00:12:11.140
And you can link to them by name, right?

00:12:11.140 --> 00:12:18.880
And so if for some reason you change the title of a header, your A tag text that you are linking to will change, which is pretty awesome, right?

00:12:18.960 --> 00:12:19.320
Exactly.

00:12:19.320 --> 00:12:19.900
Yeah.

00:12:19.900 --> 00:12:23.540
And also, enter Sphinx, right?

00:12:23.540 --> 00:12:33.380
Which is a way to expose those endpoints, not those endpoints, those index points across domain or across project, right?

00:12:33.420 --> 00:12:41.180
So I could reference to something on Python in my documentation, specifically by a reference point, not by URL, which is pretty excellent.

00:12:41.180 --> 00:12:58.120
And I think that's a big part of why Sphinx is as adopted as it is, by the fact that interSphinx exists and the fact that you can very easily cross-reference bits in other parts of the ecosystem, as long as that part of the ecosystem is in Sphinx.

00:12:58.120 --> 00:12:58.300
Yeah.

00:12:58.480 --> 00:13:00.520
As the interSphinx file generators, right?

00:13:00.520 --> 00:13:05.360
Like in theory, other ecosystems could, or other tooling could generate it as well.

00:13:05.360 --> 00:13:20.540
But yeah, I think that is quite capable if the fact that it's in restructured text has some fun interactions with all the linking syntaxes that exist, but it's genuinely very powerful, as I said.

00:13:21.020 --> 00:13:21.260
Yeah.

00:13:21.260 --> 00:13:29.020
So let's talk about that for a little bit, because when I thought about Sphinx originally, I always thought about restructured text.

00:13:29.020 --> 00:13:32.300
And restructured text is kind of funky.

00:13:32.300 --> 00:13:32.760
I don't know.

00:13:32.760 --> 00:13:34.740
I just have a hard time getting used to it.

00:13:34.740 --> 00:13:38.680
But all those formats and whatnot, it takes some getting used to, right?

00:13:38.760 --> 00:13:41.280
You've got, let me see if I can find an example we can pull up here.

00:13:41.280 --> 00:13:45.380
You know, things like dot, dot, image, colon, colon, some other thing.

00:13:45.380 --> 00:13:47.860
And then, you know, sort of almost like a YAML style.

00:13:47.860 --> 00:13:56.100
And to me, when I'm writing, I feel like, wow, I would just much rather write Markdown and just blaze through this and write it nice and clean.

00:13:56.100 --> 00:14:04.760
And I'm willing to give up a little formatting or something to allow me to live in a simpler world that doesn't require so much stuff.

00:14:04.760 --> 00:14:10.300
So traditionally, restructured text has been the way of the documentation through Sphinx.

00:14:10.300 --> 00:14:16.680
It's also been like the way that you put your information on PyPI and describe it there, right?

00:14:17.240 --> 00:14:21.380
But the PyPI.org version moved over to at least support Markdown.

00:14:21.380 --> 00:14:29.540
And through some of the work you all are doing, Sphinx now has an integration layer with doing everything in Markdown as well, right?

00:14:29.540 --> 00:14:30.740
You want to talk about that maybe?

00:14:30.740 --> 00:14:31.760
Yeah, I think so.

00:14:31.760 --> 00:14:36.840
As Preza mentioned, Sphinx is just incredibly powerful.

00:14:36.840 --> 00:14:45.460
But it's trying to harness that power and make it not overwhelming to non-technical users.

00:14:45.940 --> 00:14:49.980
For people who want it, it's brilliant and you can do everything under the sun.

00:14:49.980 --> 00:14:58.900
But trying to sell it to the masses, as it were, and trying to make it as easy to use as possible for simple use cases.

00:14:58.900 --> 00:15:05.320
But then having that extensibility there is, I guess, kind of what we've been looking at in executive books.

00:15:05.320 --> 00:15:13.220
And with this, with the Markdown, most everyone now knows about Markdown, Common Mark, how to write.

00:15:13.220 --> 00:15:13.620
Right.

00:15:13.720 --> 00:15:19.500
We've got GitHub and Stack Overflow have basically forced the software development community to understand it, right?

00:15:19.500 --> 00:15:21.100
Exactly.

00:15:21.100 --> 00:15:25.460
Or whether people love it or hate it, it's there and you know it.

00:15:25.680 --> 00:15:34.960
So being able to just copy and paste things from GitHub or Stack Overflow or just write something that's quite intuitive to write.

00:15:35.640 --> 00:15:41.820
That's what we're really trying to hide some of the intricacies of Sphinx.

00:15:41.820 --> 00:15:44.600
Make it more user-friendly on the front.

00:15:44.600 --> 00:15:49.200
This portion of Talk Python To Me is brought to you by SignalWire.

00:15:49.200 --> 00:15:51.080
Let's kick this off with a question.

00:15:51.080 --> 00:15:54.660
Do you need to add multi-party video calls to your website or app?

00:15:54.880 --> 00:16:07.220
I'm talking about live video conference rooms that host 500 active participants, run in the browser and work within your existing stack, and even support 1080p without devouring the bandwidth and CPU on your users' devices.

00:16:07.220 --> 00:16:17.560
SignalWire offers the APIs, the SDKs, and edge networks around the world for building the realest of real-time voice and video communication apps with less than 50 milliseconds of latency.

00:16:17.700 --> 00:16:28.340
Their core products use WebSockets to deliver 300% lower latency than APIs built on REST, making them ideal for apps where every millisecond of responsiveness makes a difference.

00:16:28.340 --> 00:16:32.180
Now, you may wonder how they get 500 active participants in a browser-based app.

00:16:32.180 --> 00:16:44.600
Most current approaches use a limited but more economical approach called SFU, or Selective Forwarding Units, which leaves the work of mixing and decoding all those video and audio streams of every participant to each user's device.

00:16:44.740 --> 00:16:50.360
Browser-based apps built on SFU struggle to support more than 20 interactive participants.

00:16:50.360 --> 00:16:57.080
So SignalWire mixes all the video and audio feeds on the server and distributes a single unified stream back to every participant.

00:16:57.080 --> 00:17:03.220
So you can build things like live streaming fitness studios where instructors demonstrate every move from multiple angles,

00:17:03.220 --> 00:17:10.140
or even live shopping apps that highlight the charisma of the presenter and the charisma of the products they're pitching at the same time.

00:17:10.580 --> 00:17:20.780
SignalWire comes from the team behind FreeSwitch, the open-source telecom infrastructure toolkit used by Amazon, Zoom, and tens of thousands of more to build mass-scale telecom products.

00:17:20.780 --> 00:17:29.980
So sign up for your free account at talkpython.fm/signalwire, and be sure to mention Talk Python To Me to receive an extra 5,000 video minutes.

00:17:29.980 --> 00:17:34.280
That's talkpython.fm/signalwire, and mention Talk Python To Me for all those credits.

00:17:35.840 --> 00:17:40.240
What do you guys got to add to this restructured text markdown duality here?

00:17:40.240 --> 00:17:42.500
I think it's an interesting duality.

00:17:42.500 --> 00:17:45.280
And I missed my...

00:17:45.280 --> 00:17:46.700
I don't know how to say this.

00:17:46.700 --> 00:17:48.440
I find this...

00:17:48.440 --> 00:17:53.920
When I first discovered this, I was really fascinated because I was like, hey, this looks cool.

00:17:53.920 --> 00:17:56.660
This looks like a really good...

00:17:56.660 --> 00:18:00.740
I found it especially amusing to see how mist...

00:18:00.740 --> 00:18:01.800
Let's pick one phrasing.

00:18:01.800 --> 00:18:02.160
Yeah.

00:18:02.160 --> 00:18:03.220
I guess.

00:18:03.220 --> 00:18:09.460
I really liked how mist ends up reconciling the complexity or power, depending on how you look at it.

00:18:09.460 --> 00:18:09.640
Yeah.

00:18:09.640 --> 00:18:14.340
Sphinx, and sort of fitting that into markdown and not...

00:18:14.340 --> 00:18:17.780
And having it still look like it belongs there, right?

00:18:17.780 --> 00:18:22.920
Because there's a whole bunch of, well, directives, roles, or whatever you want to call them,

00:18:22.920 --> 00:18:29.220
that, well, you can use to manipulate the text and include things and have those extensible points.

00:18:29.220 --> 00:18:29.540
Right.

00:18:29.540 --> 00:18:35.120
Because markdown is not nearly sophisticated enough to handle things like interest Sphinx and

00:18:35.120 --> 00:18:38.200
these other types of constructs that's in Sphinx, right?

00:18:38.200 --> 00:18:38.600
Yes.

00:18:38.600 --> 00:18:44.360
So, like, one example of this would be the ability to have the cards that you're showing

00:18:44.360 --> 00:18:45.680
on the screen at the moment, right?

00:18:45.680 --> 00:18:51.820
Like, the closest thing you could do for that in markdown would probably be embed a bunch

00:18:51.820 --> 00:18:52.420
of HTML.

00:18:52.420 --> 00:18:52.860
Yeah.

00:18:52.860 --> 00:18:53.240
Yeah.

00:18:53.240 --> 00:18:55.800
That or tables when you get basically no styling there.

00:18:55.800 --> 00:18:57.880
Like, it's not cards.

00:18:57.880 --> 00:18:59.400
It's all jammed together in a table.

00:18:59.400 --> 00:18:59.860
But yeah.

00:18:59.920 --> 00:19:07.000
And even when you have the ability to have inline sort of markup of markup that's in the

00:19:07.000 --> 00:19:11.560
same line as the paragraph that you're writing in, you have a very limited set of those, right?

00:19:11.560 --> 00:19:18.380
Like bold italics, underlines, maybe strikes if the platform you're using supports it and

00:19:18.380 --> 00:19:19.200
stuff like that.

00:19:19.200 --> 00:19:24.100
But with MIS or restructured text or whatever, you have a lot more capability there.

00:19:24.100 --> 00:19:24.300
Yeah.

00:19:24.300 --> 00:19:29.920
You in part to Sphinx, you in part to DockerDills, which is what implements the restructured text.

00:19:29.920 --> 00:19:37.100
On this particular point of the power expressing itself into markdown, I've enjoyed watching Chris

00:19:37.100 --> 00:19:40.080
and Chris over the years iterate through this.

00:19:40.080 --> 00:19:41.720
Roll some things out.

00:19:42.140 --> 00:19:48.500
Realize, wait, you know, it's better in tooling if we do a triple colon instead of a triple

00:19:48.500 --> 00:19:55.300
back tick because the body of the directive can then be rendered by some inline viewer or

00:19:55.300 --> 00:19:55.720
something.

00:19:55.720 --> 00:20:00.260
So I'd be interested in hearing Chris and Chris talk a little bit about your like voyage of

00:20:00.260 --> 00:20:04.560
discovery for, you know, what's the gestalt of markdown?

00:20:04.560 --> 00:20:05.800
Yeah, it's interesting.

00:20:05.800 --> 00:20:11.480
So obviously with, well, with, with Jupyter's book and things we're very much focused on

00:20:11.480 --> 00:20:16.320
it, you know, in, in these, in Jupyter's notebooks, you have the markdown set, everything, Chris

00:20:16.320 --> 00:20:16.920
and markdown.

00:20:16.920 --> 00:20:22.280
And that historically has a single kind of renderer that renders things.

00:20:22.280 --> 00:20:30.340
So trying to harness the simplicity of markdown, they're trying to make it look nice as you're

00:20:30.340 --> 00:20:31.740
writing with that.

00:20:31.740 --> 00:20:35.680
It doesn't look like a complete mess within these markdown cells.

00:20:35.680 --> 00:20:41.620
Whilst still having the capabilities of like a restructured text has been an interesting

00:20:41.620 --> 00:20:42.360
challenge.

00:20:42.360 --> 00:20:51.440
So obviously we had this, we wanted to make the mark, the missed format kind of degradable

00:20:51.440 --> 00:20:57.740
to common mark so that it can be passed normally as with a normal markdown parser, although it

00:20:57.740 --> 00:21:02.060
wouldn't know what to do with things like notes and all of the other, these other directives

00:21:02.060 --> 00:21:05.300
and roles that you, that you can have within the Sphinx.

00:21:05.560 --> 00:21:08.500
But at the same time, yeah, have all the capabilities.

00:21:08.500 --> 00:21:11.500
So, it's a hard balancing act, I'd say.

00:21:12.240 --> 00:21:16.920
I'm trying to just say, here's all of these roles and directives.

00:21:16.920 --> 00:21:19.080
You don't want to spoil the simplicity of markdown though, right?

00:21:19.080 --> 00:21:20.860
Yeah, exactly.

00:21:20.860 --> 00:21:27.880
It's having the readability of source text, essentially, weighing that against the flexibility of actually

00:21:27.880 --> 00:21:30.260
making these lovely HTML pages.

00:21:30.260 --> 00:21:31.040
Right, exactly.

00:21:31.040 --> 00:21:32.820
Chris H., you want to add something to that?

00:21:32.920 --> 00:21:40.720
Yeah, I mean, I think that the interesting thing about markdown and probably something that we should clarify for some of the people here is that there is no one markdown.

00:21:40.720 --> 00:21:41.180
Yes.

00:21:41.180 --> 00:21:42.160
That surprised me, actually.

00:21:42.160 --> 00:21:43.020
I didn't realize that.

00:21:43.020 --> 00:21:43.280
Yeah.

00:21:43.320 --> 00:21:48.320
I mean, there's like, you know markdown when you see it, but there is no like canonical markdown.

00:21:48.320 --> 00:21:55.300
The closest thing to a standard that exists is common markdown, which is like an attempt at standardization across a few different communities.

00:21:55.300 --> 00:22:02.960
But over the years, what we've seen, whether it's, you know, Stack Overflow or GitHub or whatever, basically, people want to extend common mark in a couple of ways.

00:22:03.180 --> 00:22:10.440
So they added a new couple of syntax features to support and they have then created a new flavor of markdown.

00:22:10.440 --> 00:22:14.600
So people often talk about markdown in terms of flavors, like what functionality do you want to turn on?

00:22:14.600 --> 00:22:16.120
What functionality do you want to turn off?

00:22:16.120 --> 00:22:19.020
And there are a couple of nice like renderers and parsers.

00:22:19.020 --> 00:22:26.440
And for example, the JavaScript world that will let you, you know, enable extensions in markdown to turn on and off different kinds of syntax.

00:22:26.620 --> 00:22:37.440
And so what's interesting about mist is that it's kind of intentionally trying to create like a privileged extension point, either for block level writing or for inline writing.

00:22:37.440 --> 00:22:44.580
In part with the goal that you don't have to create a new flavor of markdown if you want to extend markdown's functionality in a new direction.

00:22:44.580 --> 00:22:50.420
And I think it's going to create an interesting question of, okay, you've created a new extension point,

00:22:50.420 --> 00:23:02.380
but you want to have some kind of reliability or knowledge that your document is going to behave the same in one implementation of a mist renderer or a mist parser versus another implementation.

00:23:02.380 --> 00:23:09.060
So there's an extra sort of interesting standards question of, okay, if a directive is infinitely extensible, right?

00:23:09.060 --> 00:23:12.540
It's basically like a Python function, but in markdown.

00:23:12.680 --> 00:23:27.300
Is there some like minimal subset of directives that you want to support as a part of core mist so that if it's a mist parser for Sphinx or a mist parser for, you know, an HTML website or for some other documentation engine, you know that they'll behave similarly.

00:23:27.300 --> 00:23:28.400
That is a big challenge.

00:23:28.400 --> 00:23:30.200
A quick question from the audience.

00:23:30.200 --> 00:23:34.900
Ryan asked, does GitHub use their own version or do they use common mark?

00:23:34.900 --> 00:23:37.480
They use GitHub flavored markdown.

00:23:37.480 --> 00:23:38.400
GF.

00:23:38.400 --> 00:23:41.760
Which is a superset of common mark?

00:23:42.100 --> 00:23:42.540
Yes.

00:23:42.540 --> 00:23:43.640
It is indeed.

00:23:43.640 --> 00:23:44.040
Yes.

00:23:44.040 --> 00:23:54.940
It's got, it now has, I mean, I think if you Google it, I guess, GitHub flavored markdown, it has its own specification, which is built on top of the common mark specification.

00:23:54.940 --> 00:23:58.760
The title is different as well.

00:23:58.760 --> 00:23:59.940
Yeah.

00:23:59.940 --> 00:24:00.680
Yeah.

00:24:00.680 --> 00:24:05.360
And it adds a few extensions, a few slightly different things like tables.

00:24:05.360 --> 00:24:05.560
Right.

00:24:05.560 --> 00:24:06.380
Exactly.

00:24:06.380 --> 00:24:12.080
Funnily enough, it's not in common mark, which is quite a basic thing, but that is not in common mark.

00:24:12.080 --> 00:24:13.940
That's only GitHub flavored mark.

00:24:13.940 --> 00:24:14.240
Yeah.

00:24:14.240 --> 00:24:14.520
Yeah.

00:24:14.520 --> 00:24:14.640
Yeah.

00:24:14.640 --> 00:24:15.080
Interesting.

00:24:15.260 --> 00:24:19.660
It was avoiding the politics of what it got to get it to where it got.

00:24:19.660 --> 00:24:24.560
There was a decent amount of, oh, this has to be maximally compliant.

00:24:24.560 --> 00:24:27.340
Like this has to be the thing that works everywhere.

00:24:27.340 --> 00:24:28.080
Yeah.

00:24:28.080 --> 00:24:31.800
The minimum functionality, the maximum reach sort of story, right?

00:24:31.800 --> 00:24:32.380
Yeah.

00:24:32.380 --> 00:24:36.520
And they sort of went, okay, what words basically everywhere?

00:24:36.520 --> 00:24:39.380
And that's sort of what ended up becoming some mark.

00:24:39.380 --> 00:24:46.100
So any effort to like, oh, how about we extend this has sort of not gone very well so far.

00:24:46.100 --> 00:24:47.120
Sure.

00:24:47.120 --> 00:24:53.040
So I do want to give a quick shout out to this app I came across recently called TypeHora for writing markdown.

00:24:53.600 --> 00:25:05.820
And one of the things I think is interesting, the reason I bring it up is it has the standard markdown stuff, but it also has like inline bits for like mathematics and other stuff like diagrams and whatnot.

00:25:05.820 --> 00:25:13.880
And this is the kind of stuff you're talking about, Chris, right, where you want to take the core, but there's ways to extend it in Myst, right?

00:25:13.880 --> 00:25:14.140
Yeah.

00:25:14.140 --> 00:25:16.260
I mean, that's the beauty of Python, right?

00:25:16.260 --> 00:25:25.840
Or a lot of languages where you can define functions is that you can show a lot more creativity and add extra functionality in a very intentional, structured way, right?

00:25:25.840 --> 00:25:30.220
So that it's easier for you to replicate other people's work and build on top of it and things like that.

00:25:30.220 --> 00:25:40.860
And so in some ways, that's how I think about directives and roles is it's like bringing functions, but into a realm where you're dealing with like human written text or code that is like interpreted.

00:25:40.860 --> 00:25:48.760
But inside of, you know, these little directives and things like that, which just opens up a lot of extra room for creativity and trying out different kinds of things.

00:25:48.760 --> 00:25:59.580
I guess because we're going to mention this a bunch in sort of Sphinx glossary or terminology, directives are essentially a block of text that you're all saying.

00:25:59.780 --> 00:26:02.780
It also has this characteristic associated with it.

00:26:02.780 --> 00:26:09.520
Like, hey, present within like a notebook or whatever, whereas a role would probably be something in line.

00:26:09.520 --> 00:26:10.700
Hey, make this bold.

00:26:10.700 --> 00:26:14.840
Hey, this is actually a link to another thing and stuff like that.

00:26:14.840 --> 00:26:19.480
In case folks who are listening aren't familiar, this would probably be helpful.

00:26:19.480 --> 00:26:21.360
Although I wish we had said this sooner.

00:26:23.100 --> 00:26:33.640
And if you're coming from the front end world, I'm a kind of a refugee from Gatsby in which Markdown is almost like a database format, a lot of structure.

00:26:34.100 --> 00:26:52.200
But when it comes to Markdown and extension points and things like that, oh my God, the monkey business they jump through to try and get information from the document to the extension point or whatever.

00:26:52.440 --> 00:27:01.660
And they all have to invent their own little mechanism for packing stuff into the space after the code fence invocation.

00:27:01.660 --> 00:27:13.420
It's just clearly obvious that they need something like what Myst has done, which is a consistent syntax that just hands things over to restructured text directives.

00:27:13.620 --> 00:27:26.360
I think what's interesting about, you know, Spanx and DocuTools is that intermediate document model that exists, which I think is something that differentiates it from a lot of other like Markdown parsers and renders that are out there.

00:27:26.360 --> 00:27:39.200
I think a lot of the like a lot of static website generators, they're effectively going from blobs of Markdown mapped onto blobs of HTML as a sort of like heuristic, like it's a very programmatic output kind of a thing.

00:27:39.500 --> 00:27:47.920
And actually the original version of Jupyterbook, maybe like two and a half years old now, it was a wrapper around Jekyll, the Jekyll website generator.

00:27:47.920 --> 00:28:07.860
But because Jekyll was fundamentally just doing, you know, blobs of Markdown to blobs of HTML, there wasn't that intermediate rich document representation where you can do things like resolve cross-references and collect, you know, bibliographic entries and collect, you know, equation and figure labels so that you can refer to them elsewhere.

00:28:08.240 --> 00:28:18.200
And once you add that extra model in, it gives you a lot of extra, I think that's where a lot of that extra like power and complexity comes from in the Sphinx ecosystem.

00:28:18.200 --> 00:28:24.420
And so in some ways Markdown, Miss Markdown is just like a, it's almost like a front end on a user side.

00:28:24.420 --> 00:28:30.820
It's just giving you, at least in my opinion, a more user-friendly entry point into the Sphinx ecosystem.

00:28:31.000 --> 00:28:40.280
Now, most times you just want to write straight Markdown, but every now and then you need something like one of these references over to another part of the site or you need more control.

00:28:40.280 --> 00:28:46.940
And so Miss has this ability to say, kind of like run some inline restructured text here, right?

00:28:46.940 --> 00:28:53.440
That as well as the ability to just hook into the thing that restructured text would, right?

00:28:53.440 --> 00:28:54.880
So that will be the directive.

00:28:54.880 --> 00:29:01.380
So you can embed restructured text inline, but that's usually not what you need to do or want to do.

00:29:01.380 --> 00:29:05.120
Usually you're just able to directly use the thing that you wanted to use.

00:29:05.120 --> 00:29:06.300
So yeah, there you go.

00:29:06.420 --> 00:29:06.580
Okay.

00:29:06.580 --> 00:29:11.620
So you would go and hook in and write some Python code to process one of these directives.

00:29:11.620 --> 00:29:12.460
That's pretty excellent.

00:29:12.460 --> 00:29:12.820
Yeah.

00:29:12.820 --> 00:29:17.540
And a bunch of these directives exist already in, well, Sphinx essentially.

00:29:17.540 --> 00:29:29.720
And you can just reuse them as you would in restructured text in Mist, except with a slightly different syntax because you're operating in a different model of language, you know?

00:29:29.720 --> 00:29:30.020
Sure.

00:29:30.160 --> 00:29:30.600
Yeah, exactly.

00:29:30.600 --> 00:29:33.560
So the terminology they use is interpreted text.

00:29:33.560 --> 00:29:41.640
So it's just a block of text and here's the name of the class function that is going to interpret this.

00:29:41.640 --> 00:29:46.420
And here's maybe some options to help you interpret it.

00:29:46.420 --> 00:29:47.880
And then you can do what you want to do.

00:29:47.880 --> 00:29:48.260
Nice.

00:29:48.260 --> 00:29:57.860
So does Mist come with a bunch of these extensions already that you can use for maybe scientific graphs or things like that that you can pull in?

00:29:58.460 --> 00:30:01.140
Or where do I find more of these if I don't want to write them myself?

00:30:01.140 --> 00:30:13.440
So one of the goals of the Jupyter book project is trying to bring in functionality from the Jupyter ecosystem around interactive computational document models like IPyND, Jupyter notebook files.

00:30:13.920 --> 00:30:32.840
And also kernels that can run arbitrary, you know, usually data centric code for visualizations and analysis and things like that, where those code will generate outputs like, you know, PNG images or HTML, you know, interactive visualizations or, you know, tables with statistical analyses in them and that sort of stuff.

00:30:32.840 --> 00:30:44.000
And so one of the goals of the executable books is also to build sort of entry points for the Jupyter ecosystem into Sphinx and into Mist Markdown.

00:30:44.400 --> 00:30:58.400
So you can kind of get the complexity of the PyData ecosystem or the Jupyter ecosystem, but with the ability to embed that into, you know, a documentation narrative structure as well.

00:30:58.400 --> 00:31:08.520
So I think that that's where a lot of the scientific use cases come from is like using scientific code that gets executed alongside of your documentation build in a programmatic fashion.

00:31:08.880 --> 00:31:19.020
And where those outputs of the code are then inserted into your document in a way that from a reader's perspective, looks like it's just part of the, you know, narrative flow of everything else that was there.

00:31:19.020 --> 00:31:25.080
This portion of Talk By The Nome is brought to you by Tonic.ai.

00:31:25.080 --> 00:31:32.400
Creating quality test data for developers is a complex, never-ending chore that eats in the valuable engineering resources.

00:31:32.400 --> 00:31:34.600
Random data doesn't do it.

00:31:34.600 --> 00:31:38.360
And production data is not safe or legal for developers to use.

00:31:38.360 --> 00:31:45.140
What if you could mimic your entire production database to create a realistic data set with zero sensitive data?

00:31:45.140 --> 00:31:48.220
Tonic.ai does exactly that.

00:31:48.220 --> 00:31:56.100
With Tonic, you can generate fake data that looks, acts, and behaves like production data because it's made from production data.

00:31:56.100 --> 00:32:03.080
Using their universal data connectors and a flexible API, Tonic integrates seamlessly into your existing pipelines

00:32:03.080 --> 00:32:08.840
and allows you to shape and size your data to scale, realism, and degree of privacy that you need.

00:32:08.840 --> 00:32:15.780
Their platform offers advanced subsetting, secure de-identification, and ML-driven data synthesis

00:32:15.780 --> 00:32:20.200
to create targeted test data for all your pre-production environments.

00:32:20.200 --> 00:32:28.380
Your newly mimicked data sets are safe to share with developers, QA, data scientists, and, heck, even distributed teams around the world.

00:32:28.900 --> 00:32:37.040
Shorten development cycles, eliminate the need for cumbersome data pipeline work, and mathematically guarantee the privacy of your data with Tonic AI.

00:32:37.040 --> 00:32:44.720
Check out their service right now at talkpython.fm/tonic, or just click the link in your podcast player's show notes.

00:32:44.780 --> 00:32:50.380
Be sure to use our link, talkpython.fm/tonic, so they know you heard about them from us.

00:32:50.380 --> 00:32:56.060
Maybe tell people a bit about the Jupyterbook project itself.

00:32:56.060 --> 00:33:01.040
It's an open source project for building beautiful publication quality books and documentation.

00:33:01.040 --> 00:33:08.920
As you said, from sort of taking the code in the notebook and generating the output, like some of the graphs and whatnot, in a live way.

00:33:08.920 --> 00:33:10.400
But it sounds fascinating.

00:33:10.400 --> 00:33:12.140
Maybe when would I use it?

00:33:12.140 --> 00:33:13.480
Tell people a bit about that.

00:33:13.480 --> 00:33:20.120
Yeah, I mean, I think of the simplest, I mean, from a technical standpoint, since we're kind of riffing off of Sphinx, Jupyterbook is a distribution of Sphinx.

00:33:20.120 --> 00:33:37.040
It's basically a collection of pre-configured Sphinx extensions, some of which are developed by the executable books team and community, others of which have been developed by the broader Sphinx community and that are just reused and contributed upstream to by people in executive books.

00:33:37.040 --> 00:33:43.680
And those extensions have been created by the other way.

00:33:43.680 --> 00:33:51.320
So things like Sphinx Contrib Bib Tech is a bibliography and citation extension in Sphinx.

00:33:51.320 --> 00:33:54.080
And that's activated automatically with Jupyterbook.

00:33:54.080 --> 00:33:54.580
Right on.

00:33:54.580 --> 00:33:56.100
Because of course you're going to need that.

00:33:56.100 --> 00:34:02.120
And you want something like Evernote that's going to pull from some source that's always like I always quote this article or something, right?

00:34:02.120 --> 00:34:02.420
Yeah.

00:34:02.420 --> 00:34:07.660
I mean, just it's a use case that's not built into core Sphinx, like having references and citations and bibliographies.

00:34:07.800 --> 00:34:11.400
And so it pulls that workflow into Sphinx via an extension.

00:34:11.400 --> 00:34:20.620
So Jupyterbook is kind of a collection of these extensions and then wrapped in a command line interface and a configuration structure that's a little bit more user-friendly.

00:34:20.620 --> 00:34:31.740
I think that's one of the things about Sphinx is that at least historically it has tended to be both developed by and catered to the developer community, which is a little bit different from the scientific community.

00:34:31.740 --> 00:34:40.840
A lot of scientists know just enough code to be dangerous with, myself included, and are often not as familiar with traditional software development workflows.

00:34:40.840 --> 00:34:48.820
And so things like, you know, Jupyterbook is configurable with a YAML file rather than with, in Sphinx, the default configuration is with a Confident.

00:34:48.820 --> 00:34:49.180
Oh, interesting.

00:34:49.180 --> 00:34:50.940
It's like a Python file directly.

00:34:50.940 --> 00:34:58.680
So a little quality of life improvements to make it a little bit easier for people to get started with this more opinionated distribution of Sphinx.

00:34:58.680 --> 00:34:59.640
Yeah, it sounds like a fan.

00:34:59.640 --> 00:35:00.660
Is what Jupyterbook is called out.

00:35:00.660 --> 00:35:00.840
Oh, yeah.

00:35:00.840 --> 00:35:02.760
What a fascinating resource for people.

00:35:02.760 --> 00:35:04.460
And I meant EndNote, not Evernote.

00:35:04.460 --> 00:35:04.740
Sorry.

00:35:04.740 --> 00:35:07.000
That's the one you use for references.

00:35:07.000 --> 00:35:09.680
There's some good questions in the audience I want to ask you all.

00:35:09.680 --> 00:35:13.040
But before we do, I want to ask about MIS just a little bit more.

00:35:13.040 --> 00:35:21.940
So MIS looks really interesting and it looks like it allows me to do much more, many more powerful things with Markdown than just straight Markdown.

00:35:22.500 --> 00:35:30.140
Right now for when I'm in my code, like say on the website, it might have to take some Markdown content and turn it into a page or something.

00:35:30.140 --> 00:35:36.260
I'm just using something like Markdown 2 or one of the arbitrary just Markdown parsers.

00:35:36.600 --> 00:35:45.020
Does this make sense as something to run live in your application rather than a publication generation story?

00:35:45.020 --> 00:35:53.120
Like would it make sense to replace just using that one function from that library and then allow me to write like directives that do more for the site, for example?

00:35:53.120 --> 00:35:54.780
Not exactly sure what you're asking.

00:35:54.780 --> 00:35:57.660
I think what Michael wants is the layer under MIS.

00:35:57.660 --> 00:36:05.140
There is a parser inspired by, I guess, the JavaScript parser written by Chris and Chris.

00:36:05.140 --> 00:36:10.820
It was actually the way I found MIS when I was looking at MIS tune and Mistletoe.

00:36:10.820 --> 00:36:17.380
And so, yes, there's a wonderful parser that lets you hand it strings and you get back Markdown.

00:36:17.380 --> 00:36:17.700
Yeah.

00:36:17.700 --> 00:36:19.680
You hand it Markdown and you get HTML, you mean?

00:36:19.680 --> 00:36:20.000
Sorry.

00:36:20.000 --> 00:36:20.300
Yeah.

00:36:20.300 --> 00:36:22.200
You hand it strings and Markdown and you get HTML.

00:36:22.200 --> 00:36:22.500
Sorry.

00:36:22.780 --> 00:36:22.980
Yes.

00:36:22.980 --> 00:36:23.180
Yeah.

00:36:23.180 --> 00:36:23.960
That's what I want.

00:36:23.960 --> 00:36:24.200
Yeah.

00:36:24.200 --> 00:36:24.420
Yeah.

00:36:24.420 --> 00:36:24.860
Exactly.

00:36:24.860 --> 00:36:35.460
What I want is a nice way to have richer Markdown, like in an application, in production, not just as, you know, something that I run, like a build process, I guess.

00:36:35.460 --> 00:36:39.180
So there's a bunch of, I guess, parsers from MIS.

00:36:39.180 --> 00:36:41.000
There's an implementation in Python.

00:36:41.000 --> 00:36:42.760
There's an implementation in JavaScript.

00:36:42.760 --> 00:36:43.860
If.

00:36:43.860 --> 00:36:44.160
Yep.

00:36:44.160 --> 00:36:45.200
Work in progress.

00:36:45.200 --> 00:36:47.100
So I take that as a yes.

00:36:47.100 --> 00:36:52.700
There's multiple implementations of that and you can integrate that into an application if you wanted to.

00:36:52.700 --> 00:37:05.700
So I think this is where we're working on this kind of MIS specification of what would be core MIS as in what can we parse, not just in Sphinx, but with other kinds of parsers.

00:37:05.700 --> 00:37:07.740
And then you say embedded into applications.

00:37:07.740 --> 00:37:12.960
So one of the things we've been working on say is this JavaScript application.

00:37:13.320 --> 00:37:27.960
And one of the nice things, firstly, about how we parse, how we use MIS with Sphinx in the Python world is that it uses Markdown at Py, which is a Python implementation of Markdown it, which is a JavaScript.

00:37:27.960 --> 00:37:31.320
That is a JavaScript package passing Markdown.

00:37:32.040 --> 00:37:40.560
So we use on both sides in Python and in JavaScript, we can use exactly the same, essentially exactly the same code, passing exactly the same.

00:37:40.560 --> 00:37:42.920
So then we're working on this Markdown at Dr.

00:37:42.920 --> 00:37:46.440
Teels in JavaScript to see if we can bring.

00:37:46.840 --> 00:37:59.180
There's much of the functionality, probably not all the functionality of Sphinx in also the JavaScript world, where obviously that's what you need if you want to be able to do anything kind of live without a backend.

00:37:59.180 --> 00:37:59.440
Right.

00:37:59.440 --> 00:38:00.040
Runtime.

00:38:00.040 --> 00:38:00.320
Yeah.

00:38:00.320 --> 00:38:01.180
Okay.

00:38:01.180 --> 00:38:02.860
Exciting to hear you all are working on it.

00:38:02.860 --> 00:38:03.400
All right.

00:38:03.600 --> 00:38:05.980
Let's bring this maybe back to the documentation side.

00:38:05.980 --> 00:38:14.280
Right now, the audience asks, could we describe the whole process that a MIS document goes through before it becomes an HTML document?

00:38:14.280 --> 00:38:20.440
Like what happens to my inputs to get either the HTML or the EPUB or whatever I get?

00:38:20.440 --> 00:38:23.680
Essentially, so you have your Markdown text file.

00:38:23.680 --> 00:38:31.800
Markdown, we then parse it, as I just mentioned, with Markdown at Py, which turns it into a bunch of syntax tokens.

00:38:32.460 --> 00:38:43.860
And then we take them tokens and we convert them into the Docutils-ask syntax tree, which is what Sphinx works with.

00:38:43.860 --> 00:39:01.360
And then as we're converting that into the Docutils-ask, Sphinx works with, we're running all of these directives and these roles, this interpreted text against all of the functions, the extensions that have been loaded within Sphinx.

00:39:01.960 --> 00:39:11.920
And we end up with this nice syntax tree, Python thing, nodes, and then we say to Sphinx, there you go.

00:39:11.920 --> 00:39:13.160
Take it away.

00:39:13.160 --> 00:39:13.360
Right.

00:39:13.800 --> 00:39:18.380
Traditionally, Sphinx has gone through some sort of restructured text process to generate that.

00:39:18.380 --> 00:39:20.820
And you're like, we're going to generate that and give it to you in a different way.

00:39:20.820 --> 00:39:23.420
Now just do what you do to generate your documentation, right?

00:39:23.420 --> 00:39:23.860
Exactly.

00:39:23.860 --> 00:39:31.160
So once you've passed it through this MISTS, or you've done restructured text, you end up with exactly the same thing.

00:39:31.160 --> 00:39:33.780
This syntax tree with nodes.

00:39:34.420 --> 00:39:39.400
And then Sphinx can go through that and that's kind of agnostic to any kind of output format.

00:39:39.400 --> 00:39:39.640
Yeah.

00:39:39.640 --> 00:39:47.720
That's just, here's a paragraph and then within that, here's some text and here's a bit of bold and a bit of italical.

00:39:47.720 --> 00:39:53.200
And looping this back around to what we mentioned at the start of like the power of Sphinx, right?

00:39:53.200 --> 00:40:02.420
Of the extensibility of it is that the markup format that you're writing with is decoupled from anything else that you do with it.

00:40:02.540 --> 00:40:07.060
Not the extensions, not the directives that you use, none of that.

00:40:07.060 --> 00:40:10.280
They're all sort of a separate step from that.

00:40:10.280 --> 00:40:22.620
And that getting that separation happens through the intermediate documentary or doc tree, which if anyone's worked with Sphinx has probably seen mentions of in the build directory and stuff.

00:40:22.620 --> 00:40:25.740
So yeah, doc tree sort of acts as that separator.

00:40:25.740 --> 00:40:26.720
Oh, fantastic.

00:40:26.920 --> 00:40:35.480
And you go from your input text to your doc tree, then to your output for formats, HTML, latex, et cetera.

00:40:35.480 --> 00:40:44.900
And on the way, you mess around with all the doc tree to make sure you've got a piece of room to document references and all this kind of thing.

00:40:44.900 --> 00:40:56.340
Well known fact, if you go to SourceForge and look at DocUtils, you'll see that they, from the very beginning, have anticipated restructured text not being the only format.

00:40:56.900 --> 00:40:58.800
Restructured text is just one.

00:40:58.800 --> 00:41:02.960
It happens to be the default parser, but it wasn't intended to be the only parser.

00:41:02.960 --> 00:41:03.280
Yeah.

00:41:03.280 --> 00:41:03.660
Wow.

00:41:03.660 --> 00:41:07.540
A lot of what we've been discussing is things that Sphinx does.

00:41:07.540 --> 00:41:15.800
Sphinx, for thought of the most part, is really a good rapport around a lot of what DocUtils provides.

00:41:16.200 --> 00:41:21.540
It's much more friendly package, in my opinion, to interact with.

00:41:22.020 --> 00:41:30.940
And generally, in some senses, Jupyter Book sort of wraps Sphinx into a nicer package to use.

00:41:30.940 --> 00:41:33.440
Sphinx does that for DocuTils, right?

00:41:33.620 --> 00:41:37.280
And it builds upon it to give you additional functionality.

00:41:37.280 --> 00:41:43.520
It gives you additional points to hook into in the build process that you would still have with DocuTils.

00:41:43.520 --> 00:41:51.000
It's clearly not doing anything in addition to, like, in the build process, in addition to what DocuTils would.

00:41:51.000 --> 00:41:53.240
It just gives you a better framework to do that.

00:41:53.240 --> 00:41:57.720
And a lot of what we've been talking about, apply that intermediate format and stuff.

00:41:57.720 --> 00:42:01.300
Those are all concepts coming up from DocuTils into Sphinx.

00:42:01.500 --> 00:42:02.560
Yeah, very interesting.

00:42:02.560 --> 00:42:07.280
Alvaro out there asks, can we use the AST to translate between markup languages?

00:42:07.280 --> 00:42:09.680
Something like Pandoc, which is a pretty neat thing.

00:42:09.680 --> 00:42:11.400
It sounds like that might already work.

00:42:11.400 --> 00:42:13.800
You've got the different output formats and stuff already, right?

00:42:13.800 --> 00:42:21.940
Yeah, so an interesting example of this actually is there's a little helper tool that Chris wrote as a part of the Executable Books project called RST to Mist.

00:42:21.940 --> 00:42:27.580
And essentially, it's a converter if you have a bunch of documentation written in restructured text,

00:42:27.580 --> 00:42:30.760
and you want to automatically convert it into Mist Markdown.

00:42:31.140 --> 00:42:34.880
Because Mist Markdown and restructured text have the same, like, fundamental vocabulary,

00:42:34.880 --> 00:42:38.820
they just have different syntaxes that map onto that, you know, DocuTils doc tree,

00:42:38.820 --> 00:42:42.000
you can go from one to the other relatively easily.

00:42:42.000 --> 00:42:48.320
And that's what the RST to Mist package does, is it, you know, it parses RST into these abstract tokens,

00:42:48.320 --> 00:42:54.240
and then it can render those tokens as Mist Markdown rather than restructured text.

00:42:54.240 --> 00:42:57.660
And that's because of that sort of intermediate document format that's there.

00:42:57.660 --> 00:42:58.880
That's very fascinating.

00:42:58.880 --> 00:43:09.060
It's like this huge library of rules, basically, of how do you go from these abstract tokens into like a million different output formats.

00:43:09.060 --> 00:43:15.680
And that sort of speaks to the community of the Pandoc world that's been around for quite a long time and is doing a lot of really awesome work there, too.

00:43:15.900 --> 00:43:16.380
Yeah, indeed.

00:43:16.380 --> 00:43:18.560
All right, let's bring it back to Sphinx a little bit.

00:43:18.560 --> 00:43:24.560
I know you all wanted to give a quick shout out to Juan about some of the tutorials that he created, right?

00:43:24.560 --> 00:43:24.900
Absolutely.

00:43:25.120 --> 00:43:30.900
So one of the things that Sphinx, as we've been talking about, has, it has a documentation site, right?

00:43:30.900 --> 00:43:36.440
And it is a documentation generator, but it didn't have a tutorial to get you started.

00:43:36.440 --> 00:43:39.480
So that's one of the things that Juan worked on recently.

00:43:39.480 --> 00:43:48.540
And I think a bunch of that work is actually piggybacking off of Read the Docs getting funding from EZI,

00:43:48.540 --> 00:43:52.640
Trans-Igobab Initiative, as an essential open source software.

00:43:52.640 --> 00:43:56.680
I think it's under the E-RSS program, but I could be wrong on that.

00:43:56.680 --> 00:44:03.720
And yeah, he worked on a tutorial for Sphinx that, well, introduces people to Sphinx, essentially,

00:44:03.720 --> 00:44:08.060
and, well, tells you what your first steps to document your project using Sphinx would be.

00:44:08.060 --> 00:44:08.760
Yeah, very cool.

00:44:08.760 --> 00:44:12.220
It sounds certainly useful to have, right?

00:44:12.220 --> 00:44:16.360
Like the API documentation is not enough to make it feel really great.

00:44:16.360 --> 00:44:23.380
All right, so the next thing I want to talk a bit about with Sphinx is sort of the look and feel side of things, right?

00:44:25.380 --> 00:44:27.900
Can I really quickly make a plug, actually?

00:44:27.900 --> 00:44:29.200
Yeah, yeah, absolutely. Go for it.

00:44:29.200 --> 00:44:32.300
I think that one of the other reasons that, like Juan, for example,

00:44:32.300 --> 00:44:37.320
has been contributing some of the improvements to the Sphinx documentation is that, like, Sphinx is pretty old.

00:44:37.320 --> 00:44:42.220
In the computer science world and technology world, it's like an ancient technology, you know?

00:44:42.220 --> 00:44:44.200
It's like eight years old or something like that.

00:44:44.200 --> 00:44:45.320
And I think that one of the...

00:44:45.320 --> 00:44:45.780
More than that.

00:44:45.780 --> 00:44:46.220
One of the...

00:44:46.220 --> 00:44:46.720
Dokudones.

00:44:46.720 --> 00:44:50.180
Yeah, that's true. That's like the early, early days of Python.

00:44:50.420 --> 00:44:55.820
So anyway, my point is that I think that the documentation about Sphinx has been around for a long time.

00:44:55.820 --> 00:45:04.060
But I think that the community's understanding of, like, what makes for good documentation has evolved quite a lot in the last, like, 15 years.

00:45:04.220 --> 00:45:10.440
There's just more expectations around different kinds of documentation that you expect to find embedded in one place.

00:45:10.440 --> 00:45:17.040
I put a link in the YouTube comments for a really interesting framework that's been gaining some traction lately called the Dietaxis framework.

00:45:17.220 --> 00:45:24.260
But this idea that you sort of clearly separate out, like, tutorials and how-to examples and reference documentation and explanations.

00:45:24.260 --> 00:45:25.840
That's just one example.

00:45:25.840 --> 00:45:27.480
But I think that, like, there's...

00:45:27.480 --> 00:45:33.280
The community has sort of evolved and made more complex its own idea of what makes for good documentation.

00:45:33.280 --> 00:45:41.500
In some ways, faster than a lot of these Python packages that have been around for, like, decades, in some cases, have kept up with that pace.

00:45:41.620 --> 00:45:48.580
And so I think there's a lot of low-hanging fruit to improve a lot of these aspects by making contributions to Sphinx stocks and other pieces in the ecosystem.

00:45:48.580 --> 00:45:49.340
Yeah, absolutely.

00:45:49.340 --> 00:45:50.620
If I can make an addition to your addition.

00:45:50.620 --> 00:45:51.240
Do.

00:45:51.240 --> 00:45:54.340
One of the things I think of Sphinx as is I think of it as a miracle.

00:45:54.340 --> 00:45:56.560
It's an underappreciated miracle.

00:45:57.560 --> 00:46:08.480
They crank out bug fix updates with long lists of features and bugs fixed and all over and over for year after year.

00:46:08.480 --> 00:46:11.620
They don't get to go do Greenfield development.

00:46:11.620 --> 00:46:15.400
They're still stuck in Python 2.3 land or something like that.

00:46:15.400 --> 00:46:20.860
They've got this main template, which was written back when Mark Andreessen was still in grad school.

00:46:20.860 --> 00:46:23.600
It's just heroic what they do.

00:46:23.600 --> 00:46:26.580
Yeah, it's amazing when software continues to live like that, right?

00:46:26.860 --> 00:46:29.540
It's foundational software through the ecosystem.

00:46:29.540 --> 00:46:34.280
And yeah, there's very little Greenfield development there.

00:46:34.280 --> 00:46:41.200
And there's very little sort of exciting work that sort of, it's all complicated problems with lots of complexity to deal.

00:46:41.200 --> 00:46:44.320
Both terms of compatibility as well.

00:46:44.320 --> 00:46:52.360
Oh, not having enough visibility into how your users are using things to know for sure if a change will break them.

00:46:52.360 --> 00:46:55.140
So basically everything is a breaking change.

00:46:55.540 --> 00:46:56.940
Let's operate with that.

00:46:56.940 --> 00:46:59.560
And the constraint that brings with it.

00:46:59.560 --> 00:47:00.200
So yeah.

00:47:00.200 --> 00:47:01.800
That's a big constraint for sure.

00:47:01.800 --> 00:47:02.420
Cool.

00:47:02.420 --> 00:47:02.760
All right.

00:47:02.760 --> 00:47:04.680
So let's talk about look and feel.

00:47:04.680 --> 00:47:09.440
So there's the whole idea of Sphinx themes, right?

00:47:09.440 --> 00:47:10.160
Yeah.

00:47:10.160 --> 00:47:13.560
How, and maintained by some people we know here?

00:47:14.840 --> 00:47:15.760
Yes, that is.

00:47:15.760 --> 00:47:15.880
Yes.

00:47:15.880 --> 00:47:15.880
That is.

00:47:15.880 --> 00:47:16.800
That is what I use in the image.

00:47:16.800 --> 00:47:21.640
Rajan, you want to give a quick shout out to the themes and tell us a bit about it?

00:47:21.640 --> 00:47:22.140
Sure.

00:47:22.140 --> 00:47:28.160
So one of the things that Sphinx has, as we've mentioned multiple times, is a bunch of variety of outputs, right?

00:47:28.540 --> 00:47:37.080
And even within those, even within the HTML output format, you have the ability to change how your output stylized, right?

00:47:37.080 --> 00:47:38.380
What theme you end up using.

00:47:38.380 --> 00:47:47.700
This is roughly analogous to, I guess, Jekyll themes or Hugo themes, in that you give it a bunch of templates, maybe a bit of logic, depending on what you're doing.

00:47:47.700 --> 00:47:49.360
And yeah, it rendered.

00:47:49.360 --> 00:47:50.620
Sphinx has that.

00:47:51.160 --> 00:48:14.640
And what's probably on screen at the moment, as we've talked about this, is SphinxThemes.org, which is one of the sites I helped update to be more pretty and more up-to-date and sort of a more curated set of, well, themes for Sphinx that you can and maybe should be using when you move away from the defaults, essentially.

00:48:14.980 --> 00:48:18.120
As Chris mentioned, Sphinx is fairly old.

00:48:18.120 --> 00:48:24.740
And when you look at the themes that shift with it, they're better than aesthetic with them.

00:48:24.740 --> 00:48:33.720
They don't look like they were built last week by someone who has been doing this since not too long.

00:48:33.720 --> 00:48:34.720
So, yeah.

00:48:34.720 --> 00:48:42.640
If you ever go to the Wayback Machine and you look at something that is, you know, a popular website from the early days.

00:48:42.640 --> 00:48:44.360
Yeah, I think it's as a Polish.

00:48:44.820 --> 00:48:45.380
I don't know.

00:48:45.380 --> 00:48:46.060
Yeah.

00:48:46.060 --> 00:48:50.580
It's an amazing experience to just like pull up Google or Yahoo.

00:48:50.580 --> 00:48:55.740
I mean, to look at something like this and say, yeah, that's one of the biggest companies in the world.

00:48:55.740 --> 00:49:01.180
Kind of reframe your opinion.

00:49:01.180 --> 00:49:04.800
But having these themes, I think, is an important aspect.

00:49:04.800 --> 00:49:11.500
I do think having them look really good is something that, you know, is these are starting to come along, right?

00:49:11.500 --> 00:49:14.500
Like I think the furrow theme and the book theme look really nice.

00:49:14.660 --> 00:49:16.100
There's the PyData theme.

00:49:16.100 --> 00:49:17.820
If you've done Read the Docs, right?

00:49:17.820 --> 00:49:20.820
Read the Docs is one of the themes that people I'm sure are familiar with.

00:49:20.920 --> 00:49:29.680
I think for a very long time, the only major good theme or one of the two major good themes was the Read the Docs theme.

00:49:29.680 --> 00:49:33.460
The other one, Alabaster, which is not the default.

00:49:33.460 --> 00:49:34.700
Alabaster is not the default.

00:49:34.700 --> 00:49:45.940
And it's been fairly recent that these new themes have sort of come in and gained major adoption in sort of the timeline of Sphinx, I would say.

00:49:45.940 --> 00:49:51.660
And I think that's a good thing because, well, I'm personally motivated to do a lot of this, right?

00:49:52.140 --> 00:49:56.120
I have, like, one of the themes you mentioned is one that I wrote from scratch.

00:49:56.800 --> 00:49:59.360
And it's been an interesting, fun experience.

00:49:59.360 --> 00:50:02.800
And I can see why there's not a lot of these.

00:50:02.800 --> 00:50:05.480
It's tricky, huh?

00:50:05.480 --> 00:50:07.380
I really would like to give you credit for this.

00:50:07.380 --> 00:50:16.040
I think Furo is the tipping point, the exemplar that made people rethink what to expect from Sphinx themes.

00:50:16.240 --> 00:50:21.560
If I was to guess the two reasons people are switching to MakeDocs, number one is Markdown.

00:50:21.560 --> 00:50:23.400
So, Chris and Chris, thank you for that.

00:50:23.400 --> 00:50:26.380
And number two is it just looks a lot better.

00:50:26.380 --> 00:50:35.180
Part of the reason Markdown or MKDocs looks really good is because there's one theme that's really good there, MKDocs material.

00:50:35.180 --> 00:50:36.040
Yeah, the material, yeah.

00:50:36.040 --> 00:50:36.260
Right.

00:50:36.260 --> 00:50:37.140
That's all it takes.

00:50:37.140 --> 00:50:39.480
And I have not.

00:50:39.480 --> 00:50:44.700
And I've spent a decent amount of time looking as part of research for all of this work that I'm doing.

00:50:44.700 --> 00:50:47.480
Is there any other major theme there?

00:50:47.480 --> 00:50:48.320
And there isn't.

00:50:48.320 --> 00:50:49.520
There's just one.

00:50:49.520 --> 00:50:54.580
And pretty much most of the ecology there just revolves around that.

00:50:54.580 --> 00:50:56.360
That isn't to say bad thing.

00:50:56.360 --> 00:50:57.460
Certainly not.

00:50:57.460 --> 00:51:00.000
And that isn't to say MKDocs is just that.

00:51:00.000 --> 00:51:00.860
It's not.

00:51:00.860 --> 00:51:01.480
Right.

00:51:01.480 --> 00:51:04.140
But a decent amount of the overlap there is.

00:51:04.140 --> 00:51:06.400
Well, the overlap there is huge.

00:51:06.400 --> 00:51:07.900
It is what I would go for.

00:51:07.900 --> 00:51:16.420
And kudos to Squid Funk, whose name is not coming to my head at the moment for the amount of work he's put into that.

00:51:16.420 --> 00:51:16.980
Yeah, absolutely.

00:51:16.980 --> 00:51:21.680
You and Chris are working on the new chapter of this idea, right?

00:51:21.680 --> 00:51:22.200
Which Chris?

00:51:22.200 --> 00:51:22.880
Chris H.

00:51:22.880 --> 00:51:28.680
I believe the two of you are kind of thinking about what if we didn't have to live with the old contract?

00:51:28.680 --> 00:51:34.480
I think the way you're referring to is some of the infrastructure improvements around developing the Sphinx ecosystem.

00:51:34.480 --> 00:51:35.260
Is that what you're...

00:51:35.260 --> 00:51:36.340
No, I was thinking of...

00:51:36.340 --> 00:51:46.460
I thought there was a theme itself you were working on that kind of threw out the basic theme, which is the predecessor of all themes.

00:51:46.460 --> 00:51:50.300
And I thought that you had a repo where there was a new theme you were working on.

00:51:50.300 --> 00:51:50.900
There is.

00:51:50.900 --> 00:51:52.760
Almost like an abstract theme or something.

00:51:52.760 --> 00:51:53.280
Yeah.

00:51:53.280 --> 00:51:58.160
So the way Sphinx's theme ecosystem works is there's a basic theme.

00:51:58.160 --> 00:52:07.280
And what that basic theme has is like the JavaScript for Sphinx's search and all kinds of like fundamental things for Sphinx.

00:52:07.280 --> 00:52:12.760
And a very, very, very bare bones HTML structure, essentially.

00:52:12.760 --> 00:52:14.800
There's, I don't think, any CSS even.

00:52:14.800 --> 00:52:15.460
Right?

00:52:15.460 --> 00:52:21.440
So it's just a very bare bones page to just serve as a basic skeleton for you to build upon.

00:52:21.440 --> 00:52:21.880
Right?

00:52:21.880 --> 00:52:29.800
And I think through the work that Chris and I have been doing on themes and among...

00:52:29.800 --> 00:52:30.580
There's more people.

00:52:30.580 --> 00:52:34.480
And sort of the name escapes me at the moment.

00:52:34.480 --> 00:52:41.000
And one of the things we found out was, oh, there's like a lot of common work across these themes.

00:52:41.000 --> 00:52:44.080
That we put into a layer on top of that.

00:52:44.460 --> 00:52:46.300
And those things there.

00:52:46.300 --> 00:52:48.720
So that it reduces the amount of duplicated work.

00:52:48.720 --> 00:52:56.100
It still gives us the bits of flexibility that we want in the individual themes to make opinionated choices, design choices, and whatnot.

00:52:56.100 --> 00:53:00.500
But there's a decent chunk of, oh, we all will do the same thing.

00:53:00.680 --> 00:53:04.100
Like breadcrumbs have this HTML structure.

00:53:05.100 --> 00:53:12.320
Doing things like that will reduce the amount of duplicated effort and lower the barrier for entry, essentially, in your writing.

00:53:12.320 --> 00:53:17.700
Which is sort of what I'm personally motivated in at the moment, having written one.

00:53:17.700 --> 00:53:23.240
It's like, oh, this thing goes to my right sort of brain areas.

00:53:23.360 --> 00:53:26.880
Because I, as I've mentioned, I'm a maintainer on PIB.

00:53:26.880 --> 00:53:30.960
Developer workflows are a thing that I happen to be interested in.

00:53:30.960 --> 00:53:35.120
And I would say have a decent amount of experience dealing with.

00:53:35.120 --> 00:53:47.480
So I was like, hey, this looks like a great place to put in a bunch of my JavaScript, HTML, web tech experience, combined with a bunch of Python packaging and user workflows around that.

00:53:47.480 --> 00:53:49.540
And sort of put in energy there.

00:53:49.720 --> 00:53:53.320
So that led Sphinx team builder, which is like...

00:53:53.320 --> 00:53:53.760
Fantastic.

00:53:53.760 --> 00:53:54.500
Yeah.

00:53:54.500 --> 00:53:55.380
Yeah, it's been excellent.

00:53:55.380 --> 00:54:02.140
I think it's kind of just bringing in that maybe what Sphinx has lacked in the past is that kind of expertise in web design, really.

00:54:02.140 --> 00:54:12.960
I mean, there's a lot of, you know, excellent people working, as you say, within Sphinx and DocuTools and things on the kind of back end and how all that works and all the Python code.

00:54:13.400 --> 00:54:26.360
Possibly there's been less so in the past of going, right, let's actually make all this good work and actually show it off and have these just lovely themes that actually show what you can do.

00:54:26.360 --> 00:54:31.860
It was super fascinating for me because sort of when I jumped in, I was like, oh, recreationally, right?

00:54:31.860 --> 00:54:39.300
And to be honest, my motivation jumping into the Sphinx ecosystem was precisely this of like, I want it to look better.

00:54:39.300 --> 00:54:41.060
Like, it doesn't look good.

00:54:41.060 --> 00:54:42.460
I would like it to look better.

00:54:42.780 --> 00:54:58.300
And funnily enough, none of this would have happened if pip hadn't gotten a grant where we had a bunch of computer experience experts sit with us and our users and sort of have that channel of feedback through them as well as their expertise.

00:54:58.300 --> 00:55:05.380
And just having them state multiple times like, hey, pip's documentation is not that great to sort of navigate and stuff.

00:55:05.380 --> 00:55:06.500
Like, there's content.

00:55:06.500 --> 00:55:07.960
They don't know how to get there.

00:55:07.960 --> 00:55:13.140
And sort of in those conversations, I was like, yeah, I don't like this site.

00:55:13.140 --> 00:55:15.540
Now that you've made me look at it a bunch of times.

00:55:15.540 --> 00:55:19.280
Let me put something on the screen for you all just to put side by side here.

00:55:19.280 --> 00:55:21.240
And just think about this.

00:55:21.240 --> 00:55:23.940
And you all can pull this up really easily who are listening.

00:55:23.940 --> 00:55:32.000
Just think about this from the perspective of someone who's choosing a programming language or new to programming and deciding, is Python the space for me?

00:55:32.000 --> 00:55:48.360
You know, if on one hand, we've got, you know, just the docs.python.org and the other, you know, something like Tailwind, where you look at it and it's just like, it just feels, you know, so fresh and welcoming.

00:55:48.800 --> 00:55:58.960
Whereas the other, this is not to take away from the hard and important work of writing the documentation, but the way it feels when you land there, I think, is in desperate need of the work that you do.

00:55:58.960 --> 00:56:01.840
Yeah, but Michael, have you seen what it looks like in a man page?

00:56:01.840 --> 00:56:02.940
I know.

00:56:02.940 --> 00:56:05.480
It probably is looking the same, right?

00:56:05.480 --> 00:56:08.880
Those three man pager users are really happy.

00:56:08.880 --> 00:56:10.080
Pretty close.

00:56:10.440 --> 00:56:14.220
And that isn't to say those users aren't about to be clear, right?

00:56:14.220 --> 00:56:14.680
Yeah.

00:56:14.680 --> 00:56:19.160
I mean, it's kind of like moving from MySpace to Instagram.

00:56:19.160 --> 00:56:20.480
It is.

00:56:20.480 --> 00:56:20.900
It is.

00:56:20.900 --> 00:56:23.160
And like I said, I'm not bashing on it.

00:56:23.160 --> 00:56:30.460
I'm just saying this is the face that that part of Python is presenting to the world to say, we want you here.

00:56:30.460 --> 00:56:31.380
Come be with us.

00:56:31.380 --> 00:56:31.740
Right.

00:56:31.740 --> 00:56:39.120
And there's a different face that other places are putting on that I think probably will appeal a lot more to people who don't know better.

00:56:39.120 --> 00:56:40.780
You know, they're getting to write in JavaScript.

00:56:40.780 --> 00:56:47.900
And this is really an aspect that I would sort of think, I would like to put my energy into this and make these improvements.

00:56:47.900 --> 00:56:50.160
And I'm by far not the only one.

00:56:50.320 --> 00:56:59.360
There's, in fact, now a documentation working group being formed in the CPython core development community.

00:56:59.360 --> 00:57:03.520
The folks who develop the language around improving this.

00:57:03.520 --> 00:57:11.780
And there's like a public issue driver that hopefully going to sort of start ramping up soon because I would like to be involved with that.

00:57:11.780 --> 00:57:13.660
And I'm aware that Paul is as well.

00:57:13.660 --> 00:57:17.560
And yeah, this is by no means news to the folks involved.

00:57:17.560 --> 00:57:18.940
They're aware of this.

00:57:18.940 --> 00:57:28.860
And I think the first issue itself in this sort of dogs community issue tracker that they have is moving to a more modern documentation theme.

00:57:28.860 --> 00:57:31.760
As it turns out, there aren't many in Sphinx.

00:57:31.760 --> 00:57:35.380
So that's sort of been another thing I've picked up and gone.

00:57:35.380 --> 00:57:35.720
Yeah.

00:57:35.720 --> 00:57:39.220
So maybe one more shout out to the Sphinx theme builder that you put together, right?

00:57:39.220 --> 00:57:39.480
Yeah.

00:57:39.480 --> 00:57:41.460
Sphinx theme builder comes in nicely into this.

00:57:41.460 --> 00:57:44.540
So there's a bunch of Sphinx themes today, right?

00:57:44.540 --> 00:57:45.140
There's Furo.

00:57:45.140 --> 00:57:47.320
There's Sphinx book theme.

00:57:47.320 --> 00:57:48.820
There's PyData Sphinx theme.

00:57:48.820 --> 00:57:50.040
There's Alabaster.

00:57:50.040 --> 00:57:51.700
There's a bazillion of those.

00:57:51.700 --> 00:57:58.080
The first three that I mentioned, right, are the folks on this discussion are involved with those.

00:57:58.600 --> 00:58:12.260
And one of the things that came out of having worked on all of these was it would be nicer to simplify these workflows a bit, make the interaction with JavaScript easier, reduce the amount of bootstrapping required and stuff like that.

00:58:12.260 --> 00:58:22.140
And that essentially ended up in Sphinx theme builder where it sort of streamlines the JavaScript and Python build processes and sort of makes the development workflow easier.

00:58:22.140 --> 00:58:22.400
Yeah.

00:58:22.400 --> 00:58:27.260
It even comes with a development server that does like refresh the browser on change, right?

00:58:27.360 --> 00:58:27.620
Yes.

00:58:27.620 --> 00:58:32.340
And I think that's also really nice to have in Sphinx documentation authoring as well.

00:58:32.340 --> 00:58:38.660
And Paul sort of mentioned this earlier of like me taking up maintainership of too many things.

00:58:38.660 --> 00:58:41.920
So I went, I like this.

00:58:41.920 --> 00:58:45.560
And the repository had maintainers needed on it.

00:58:45.560 --> 00:58:49.160
So I just went and opened an issue and said, hi, add me.

00:58:49.160 --> 00:58:57.220
And I'm more basically a defactor maintainer on like live reload as well as Sphinx auto build, which is nice.

00:58:57.600 --> 00:59:02.860
If you don't use Sphinx auto build and write a lot of Sphinx docs, start using it because it's great, I think.

00:59:02.860 --> 00:59:03.240
Yeah.

00:59:03.240 --> 00:59:03.620
Awesome.

00:59:03.620 --> 00:59:05.840
I love those auto reload aspects.

00:59:05.840 --> 00:59:06.180
Yeah.

00:59:06.180 --> 00:59:09.080
All right, you guys, we are just about out of time.

00:59:09.080 --> 00:59:15.840
Maybe I'll open it up for if anyone else wants to just give a shout out to something or mention something while we're all here together.

00:59:15.840 --> 00:59:18.620
What have we not covered that we need to quickly talk about?

00:59:18.620 --> 00:59:41.760
The main thing that I would just say is to reiterate that I think that what a lot of these like the theme conversations and improving developer workflows around the Sphinx ecosystem, one of the reasons that they're so successful is because I think that there's a lot of low-hanging fruit in the Sphinx ecosystem to basically like signal boost all of this work that's been done over the last, you know, 14 years.

00:59:41.960 --> 00:59:47.880
And DocuTales and Sphinx and building this documentation engine and this whole community of people writing extensions for it.

00:59:47.880 --> 01:00:00.500
In a lot of ways, I think that there's a lot of potential energy there that hasn't been unlocked yet, in part because of some of the things around developer friction or themes that don't look kind of like modern and nice and web develop-y.

01:00:00.500 --> 01:00:10.040
And I think that there's still a lot more low-hanging fruit that can be accomplished with, for example, improving documentation about Sphinx itself or the extensions or whatever.

01:00:10.240 --> 01:00:20.040
And so I think that all of the success of these projects is largely possible only because they're kind of piggybacking on top of this really well-established community where a lot of work has already been done.

01:00:20.040 --> 01:00:22.780
And a lot of kudos go out to that broader community.

01:00:22.780 --> 01:00:23.400
For sure.

01:00:23.740 --> 01:00:37.520
And one other thing that I'm sort of hoping to see coming out of this is as sort of these efforts around making it easier to present your thing nicer, making it easier to write your docs and all of these happen.

01:00:37.520 --> 01:00:57.420
So, you know, because when you have something that looks nicer, that's all of that, it also results in a better quality of documentation where because you're able to go, oh, actually, I can see the structure of my site more clearly.

01:00:57.760 --> 01:01:02.180
I think I would like to restructure it slightly to make it clearer what the flow is.

01:01:02.180 --> 01:01:06.600
And, oh, I'm missing this bit of content in this section, but I have it there.

01:01:06.600 --> 01:01:07.820
Maybe I should just edit it.

01:01:07.820 --> 01:01:17.360
And when these things become more obvious to you through either clearer markup or clearer site design or whatever, it will lead to better documentation.

01:01:17.360 --> 01:01:20.300
And also a lot more people would be willing to write those.

01:01:20.300 --> 01:01:23.820
Because it's more like, oh, why am I writing this?

01:01:23.820 --> 01:01:24.120
Yeah.

01:01:24.120 --> 01:01:36.500
And also moving away from Sphinx just being seen as a developer documentation into Ghibli books, trying to do, make it available for scientists and things to go, oh, wait a minute.

01:01:36.500 --> 01:01:47.500
I can use this relatively easily and I can share my work or I can write tutorials, science, share my research and things like stuff like that.

01:01:47.500 --> 01:01:49.580
That part's really interesting to me.

01:01:49.580 --> 01:01:57.260
And it's why I did the course with Michael on static websites, not static documentation, is to think bigger than just docs.

01:01:57.260 --> 01:01:59.540
I have an interest in knowledge bases.

01:01:59.540 --> 01:02:00.820
I'm a developer advocate.

01:02:00.820 --> 01:02:05.160
We create artifacts that are rich and interconnected and richly linked.

01:02:05.160 --> 01:02:06.180
Sound like something?

01:02:06.380 --> 01:02:09.020
Sphinx has inside of it this engine.

01:02:09.020 --> 01:02:13.660
Sphinx and DocuTools has this engine inside, which nothing else has.

01:02:13.660 --> 01:02:21.480
The very first contact you have with the mist in the course that I did is just the humble link.

01:02:21.480 --> 01:02:26.520
But when you do it in mist, it will tell you if the thing on the other side isn't there.

01:02:26.520 --> 01:02:30.220
It'll extract the title and inline it on your side.

01:02:30.380 --> 01:02:33.960
That is magic to all these other systems.

01:02:33.960 --> 01:02:37.060
And it's knowledge-based kinds of things that are valuable.

01:02:37.060 --> 01:02:52.420
And I think that we could tell the story of Sphinx in a bigger way beyond documentation and start doing all of the things that people on technical teams want to do for storytelling.

01:02:52.660 --> 01:02:57.180
I feel like I want to interject and mention that, hey, you know Sphinx can do blogs?

01:02:57.940 --> 01:02:59.940
Yes, there's the Ablog extension.

01:02:59.940 --> 01:03:00.880
Right on.

01:03:00.880 --> 01:03:08.000
And Chris H, at least, has his blog on his personal website, as far as I'm aware.

01:03:08.080 --> 01:03:21.880
Look inside the code of Ablog, which I've followed for years, it shows you tapping into the equivalent of front matter and walking through all the doc trees and looking for structure and doing back references.

01:03:21.880 --> 01:03:25.180
People don't expect to be able to do that in Markdown.

01:03:25.180 --> 01:03:27.420
It's a document database.

01:03:27.420 --> 01:03:29.760
That's what you should think of, Sphinx says.

01:03:29.760 --> 01:03:33.260
And I think there's a lot there of unlocking.

01:03:33.260 --> 01:03:44.060
I really do want to reiterate what Chris said of there's a huge body of excellent work that has been done over more than a decade.

01:03:44.060 --> 01:03:48.640
I mentioned older than me, it's like four years younger or something like that.

01:03:48.640 --> 01:03:51.300
I'm four years older than me.

01:03:51.300 --> 01:03:51.940
Okay, whatever.

01:03:51.940 --> 01:03:52.960
I was wrong there.

01:03:52.960 --> 01:03:56.420
But yeah, there's a huge body of work there.

01:03:56.420 --> 01:04:02.660
And there's just, it sort of needs the little touch of, hey, paint.

01:04:02.660 --> 01:04:07.160
Get it to look like it belongs in the sort of modern web.

01:04:07.160 --> 01:04:09.080
But it also needed Mist.

01:04:09.080 --> 01:04:14.540
It needed Mist to come along and express that power in a human-oriented way.

01:04:14.540 --> 01:04:17.020
And there are so many things in Mist that are mind-blowing.

01:04:17.020 --> 01:04:21.240
People haven't scratched the surface with Mist yet.

01:04:21.240 --> 01:04:28.560
I actually, to that point, one other quick plug that I would give is, I know we've been talking about Sphinx in this conversation.

01:04:28.560 --> 01:04:36.220
But to reiterate, I think that the goal of Mist is to be a tool or implementation agnostic specification for Markdown.

01:04:36.220 --> 01:04:48.160
And I think that there is a lot of exciting possibilities if we can sort of find the right standards to apply at the Mist, you know, directives level or roles level or whatever.

01:04:48.520 --> 01:04:56.660
And to see if you could get a flavor of Markdown that is flexible enough that it can be reused across like a few different kinds of applications.

01:04:56.660 --> 01:05:01.940
Maybe some are pure web page, maybe some that are full-blown documentation, maybe Pandoc, you know, whatever.

01:05:01.940 --> 01:05:08.620
And so I invite people who, if they can think of use cases or tools that they're working on or ecosystems that they're working in,

01:05:08.620 --> 01:05:19.200
that would benefit from something like a sort of tool agnostic flavor of Markdown that has natural block and inline level extension points,

01:05:19.300 --> 01:05:25.480
then reach out and we would love to chat because I think it would be really cool to see Mist being applied in other kinds of contexts as well.

01:05:25.480 --> 01:05:27.260
Yeah, it would just help it grow, get stronger.

01:05:27.260 --> 01:05:37.440
Yeah, I guess on a similar sort of call to action sense, I think if there's anyone around in listening who has sort of JavaScript and web design jobs

01:05:37.440 --> 01:05:47.540
and sort of finds all of this interesting and wants to sort of contribute to making Sphinx look prettier, like reach out to honestly any of us on this call.

01:05:47.920 --> 01:05:57.420
And yeah, we'd really like to have more people on board, not least because it's good to have fun collaborators to collaborate with, as Chris and Chris have been,

01:05:57.420 --> 01:06:01.440
but also because I think the ecosystem could use a bunch.

01:06:01.440 --> 01:06:09.860
I think Sphinx itself and even Dark Itals, like the maintainership story on those and the work that those maintainers do is,

01:06:09.860 --> 01:06:13.660
well, the maintainership story is, let's leave it at interesting.

01:06:14.200 --> 01:06:19.200
And the work that the maintainers do is really amazing for the amount of resources that they have.

01:06:19.200 --> 01:06:19.960
Yeah, fantastic.

01:06:19.960 --> 01:06:20.920
Good call to action.

01:06:20.920 --> 01:06:21.860
Let's leave it there.

01:06:21.860 --> 01:06:26.840
Let me ask you all one of the two final questions I typically ask before we get out of here.

01:06:26.840 --> 01:06:29.980
Regine, I'll start with you.

01:06:29.980 --> 01:06:32.880
If you're going to write some Python code, what editor are you using these days?

01:06:32.880 --> 01:06:34.880
I am using Visual Studio Code.

01:06:34.880 --> 01:06:35.260
Okay.

01:06:35.260 --> 01:06:38.380
Used to use Sublime Text, but I've sort of switched over.

01:06:38.380 --> 01:06:42.780
Yeah, I feel like that's the natural transition for Sublime users that seems to be able to advertise.

01:06:42.780 --> 01:06:44.080
Good it is.

01:06:44.080 --> 01:06:45.840
I'm wondering which one you might be using.

01:06:45.840 --> 01:06:50.320
No, I love PyCharm as well.

01:06:50.320 --> 01:06:50.860
The best, baby.

01:06:50.860 --> 01:06:51.620
The best.

01:06:51.620 --> 01:06:52.560
Absolutely.

01:06:52.560 --> 01:06:53.320
Right on.

01:06:53.320 --> 01:06:54.700
Chris Siwa?

01:06:54.700 --> 01:06:57.240
Mainly Visual Studio Code.

01:06:57.240 --> 01:07:00.520
Is there, I suspect, probably some notebooks in there as well.

01:07:00.520 --> 01:07:03.480
There's probably some notebooks in there as well.

01:07:03.480 --> 01:07:04.680
Like some Jupyter.

01:07:04.680 --> 01:07:08.080
Partly Jupyter Lab, but mainly Visual Studio Code.

01:07:08.080 --> 01:07:11.620
And there's also this extension for Visual Studio Code.

01:07:11.620 --> 01:07:15.400
And we're working on the extension for Jupyter Lab as well.

01:07:15.400 --> 01:07:16.220
Oh, fantastic.

01:07:16.220 --> 01:07:17.160
All right, cool.

01:07:17.160 --> 01:07:17.740
Chris?

01:07:17.740 --> 01:07:18.380
H?

01:07:18.380 --> 01:07:21.500
I kind of split 50-50 VS Code and Jupyter Lab.

01:07:21.500 --> 01:07:25.060
Basically, if I'm doing development, software development, then I do VS Code.

01:07:25.140 --> 01:07:29.920
And if I do data exploration, interactive computing, that kind of workflow, then I use Jupyter Lab.

01:07:29.920 --> 01:07:31.220
Over on the notebooks.

01:07:31.220 --> 01:07:31.920
Right on.

01:07:31.920 --> 01:07:32.340
All right.

01:07:32.340 --> 01:07:33.620
Well, thank you all for being here.

01:07:33.620 --> 01:07:34.620
It's been really fun.

01:07:34.620 --> 01:07:39.060
And thank you for all the hard work on bringing all this stuff up to 2020.

01:07:39.060 --> 01:07:39.900
Plus.

01:07:40.000 --> 01:07:41.000
Wait, wait.

01:07:41.000 --> 01:07:42.280
You have two questions.

01:07:42.280 --> 01:07:43.560
You only ask one.

01:07:43.560 --> 01:07:44.380
I know.

01:07:44.380 --> 01:07:44.620
All right.

01:07:44.620 --> 01:07:45.500
Really quick then.

01:07:45.500 --> 01:07:46.720
Notable PyPI package.

01:07:46.720 --> 01:07:48.780
And so I don't want to take too much of your time.

01:07:48.780 --> 01:07:49.140
Okay.

01:07:49.140 --> 01:07:52.460
I guess for me, it'll be Pursuit PyPair, PPB.

01:07:52.460 --> 01:07:58.380
It's a really cool educational game engine that's way better than what I had when I got started

01:07:58.380 --> 01:07:59.260
with gaming.

01:07:59.480 --> 01:07:59.760
Yeah.

01:07:59.760 --> 01:08:04.360
I just finished doing the Python Bytes podcast with Brian before we started this one.

01:08:04.360 --> 01:08:11.720
And ESA, the European Space Agency, just put two Raspberry Pis on the International Space Station

01:08:11.720 --> 01:08:14.220
for kids and students to program against.

01:08:14.220 --> 01:08:17.740
I'm like, that's way better than the turtle I got to drive around when I was in school.

01:08:17.740 --> 01:08:19.380
All right.

01:08:19.380 --> 01:08:20.160
Paul, really quick.

01:08:20.160 --> 01:08:22.540
What's a package or library you want to just give a quick shout out to?

01:08:22.540 --> 01:08:28.460
I have a fascination with dependency injection in a human oriented way.

01:08:28.460 --> 01:08:29.340
Antidote.

01:08:29.340 --> 01:08:29.940
Antidote.

01:08:29.940 --> 01:08:30.540
Okay.

01:08:30.540 --> 01:08:31.400
Very interesting.

01:08:31.400 --> 01:08:31.980
That's new to me.

01:08:31.980 --> 01:08:33.140
Chris S.

01:08:33.140 --> 01:08:35.560
Got a library you want to give a quick shout out to?

01:08:35.560 --> 01:08:36.480
So is that Chris S?

01:08:36.480 --> 01:08:37.120
Yes, it was Chris S.

01:08:37.120 --> 01:08:38.580
It was.

01:08:38.580 --> 01:08:40.940
I'm Pipex.

01:08:40.940 --> 01:08:44.180
I hadn't used yet until recently.

01:08:44.180 --> 01:08:47.320
And yeah, I love you.

01:08:47.320 --> 01:08:47.700
Yeah.

01:08:47.700 --> 01:08:50.140
I'm all for that.

01:08:50.140 --> 01:08:55.560
People talk about how it's hard to distribute Python applications and little utilities by packaging

01:08:55.560 --> 01:08:58.480
them up because, well, you got to download the scripts and then set up the environment.

01:08:58.960 --> 01:09:00.860
That is the homebrew of the Python world.

01:09:00.860 --> 01:09:05.820
If you want something, I can go to the terminal and just type a command and it runs.

01:09:05.820 --> 01:09:09.300
Well, if you Pipex install it, it's going to just be there and it's fantastic.

01:09:09.300 --> 01:09:09.780
I love it.

01:09:09.780 --> 01:09:12.300
People should use it more for that use case.

01:09:12.300 --> 01:09:13.280
Chris H.

01:09:13.700 --> 01:09:19.540
I feel like in the name of improving UI, UX and window dressing on technology that some

01:09:19.540 --> 01:09:20.400
people think is outdated.

01:09:20.560 --> 01:09:22.120
I would shout out to Rich.

01:09:22.120 --> 01:09:22.560
Oh, yeah.

01:09:22.560 --> 01:09:25.940
Sort of like UI components, visualizations, whatever.

01:09:25.940 --> 01:09:31.280
I would love to find a way to get Rich into Jupyterbook or even Sphinx or something like that because

01:09:31.280 --> 01:09:33.820
I think it makes for a really nice user experience.

01:09:33.820 --> 01:09:37.820
The only problem is that the maintainer of Rich is much better at Wordle than I am.

01:09:37.820 --> 01:09:40.760
And so he's like consistently beating me by two or three tries.

01:09:41.420 --> 01:09:42.780
Every day.

01:09:42.780 --> 01:09:45.960
Fantastic.

01:09:45.960 --> 01:09:49.340
Let me wrap it up a bit because this seems relevant.

01:09:49.340 --> 01:09:53.640
One of the things I've been doing through work as well as personal time is improving error

01:09:53.640 --> 01:09:56.200
messages in Fit and Rich has played a decent thing.

01:09:56.200 --> 01:09:57.420
Oh, yeah.

01:09:57.420 --> 01:09:57.980
Fantastic.

01:09:57.980 --> 01:10:02.880
So it's pretty likely that in the coming release or two, you'll see better error messages,

01:10:02.880 --> 01:10:05.100
partly thanks to Will's work on Rich.

01:10:05.100 --> 01:10:05.700
Yeah, absolutely.

01:10:05.700 --> 01:10:07.860
He's got the whole traceback enhancements and everything.

01:10:08.520 --> 01:10:08.820
All right.

01:10:08.820 --> 01:10:09.740
Thank you all for being here.

01:10:09.740 --> 01:10:10.280
It's been great.

01:10:10.280 --> 01:10:11.480
Chat with you later.

01:10:11.480 --> 01:10:12.040
Thanks, Michael.

01:10:12.040 --> 01:10:15.980
This has been another episode of Talk Python to Me.

01:10:15.980 --> 01:10:17.780
Thank you to our sponsors.

01:10:17.780 --> 01:10:19.400
Be sure to check out what they're offering.

01:10:19.400 --> 01:10:20.820
It really helps support the show.

01:10:20.820 --> 01:10:25.700
Add high-performance, multi-party video calls to any app or website with SignalWire.

01:10:25.700 --> 01:10:31.160
Visit talkpython.fm/SignalWire and mention that you came from Talk Python to Me

01:10:31.160 --> 01:10:32.960
to get started and grab those free credits.

01:10:33.740 --> 01:10:39.420
Tonic.ai creates quality test data that does not contain personally identifiable information.

01:10:39.420 --> 01:10:44.380
Your generated data sets are safe to share with developers, UA, and data scientists.

01:10:44.380 --> 01:10:49.560
Most importantly, they behave like production because they're made from production data.

01:10:49.560 --> 01:10:53.660
Check them out at talkpython.fm/Tonic.

01:10:53.660 --> 01:10:55.380
Want to level up your Python?

01:10:55.780 --> 01:10:59.420
We have one of the largest catalogs of Python video courses over at Talk Python.

01:10:59.420 --> 01:11:04.600
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:11:04.600 --> 01:11:07.260
And best of all, there's not a subscription in sight.

01:11:07.260 --> 01:11:10.180
Check it out for yourself at training.talkpython.fm.

01:11:10.180 --> 01:11:14.860
Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

01:11:14.860 --> 01:11:16.160
We should be right at the top.

01:11:16.160 --> 01:11:21.340
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:11:21.340 --> 01:11:25.540
and the direct RSS feed at /rss on talkpython.fm.

01:11:25.540 --> 01:11:28.960
We're live streaming most of our recordings these days.

01:11:28.960 --> 01:11:32.360
If you want to be part of the show and have your comments featured on the air,

01:11:32.360 --> 01:11:36.780
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:11:36.780 --> 01:11:38.640
This is your host, Michael Kennedy.

01:11:38.640 --> 01:11:39.940
Thanks so much for listening.

01:11:39.940 --> 01:11:41.100
I really appreciate it.

01:11:41.100 --> 01:11:43.020
Now get out there and write some Python code.

01:11:43.020 --> 01:12:03.900
I'll see you next time.

