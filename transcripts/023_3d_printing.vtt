WEBVTT

00:00:00.001 --> 00:00:05.020
I'm sure you've heard of a full stack developer and full stack Python, but this week Authentize

00:00:05.020 --> 00:00:10.100
is taking it to a whole new level with Python all the way from the cloud to the client to

00:00:10.100 --> 00:00:10.520
the printer.

00:00:10.520 --> 00:00:16.820
It's all about 3D printing with Python on show number 23 with Eli Ribble, recorded Wednesday,

00:00:16.820 --> 00:00:18.500
August 5th, 2015.

00:00:18.500 --> 00:00:48.440
Hello and welcome to Talk Python To Me, a weekly podcast on Python, the language,

00:00:48.600 --> 00:00:50.980
the libraries, the ecosystem, and the personalities.

00:00:50.980 --> 00:00:53.220
This is your host, Michael Kennedy.

00:00:53.220 --> 00:00:55.660
Follow me on Twitter where I'm @mkennedy.

00:00:55.660 --> 00:01:01.000
Keep up with the show and listen to past episodes at talkpython.fm and follow the show on Twitter

00:01:01.000 --> 00:01:02.180
via at talkpython.

00:01:02.180 --> 00:01:06.200
This episode is brought to you by Hired and Codeship.

00:01:06.200 --> 00:01:11.000
Thank them on Twitter for supporting the show where they're at hired underscore HQ and at

00:01:11.000 --> 00:01:11.460
Codeship.

00:01:11.460 --> 00:01:15.920
I don't have any particular news this week, so let's get right to the show with Eli.

00:01:16.920 --> 00:01:21.160
Eli Ribble has been hacking since he was little and discovered BASIC, NetHack, and

00:01:21.160 --> 00:01:21.580
Debuggers.

00:01:21.580 --> 00:01:26.420
He's enchanted by magic, is implemented via technology, and holds a master's degree in

00:01:26.420 --> 00:01:28.400
computer science from the University of Utah.

00:01:28.400 --> 00:01:34.420
He's developed driving simulator engines, mobile device management on Windows CE, websites, and

00:01:34.420 --> 00:01:35.860
various cloud streaming applications.

00:01:36.640 --> 00:01:40.880
Recently, he's been building 3D printing technology in the cloud to help start the digital manufacturing

00:01:40.880 --> 00:01:43.780
age as the CTO of Authentize.

00:01:43.780 --> 00:01:47.780
He's been doing professional Python development for the past seven years.

00:01:47.780 --> 00:01:49.760
Eli, welcome to the show.

00:01:49.760 --> 00:01:51.080
Thanks.

00:01:51.080 --> 00:01:51.820
It's great to be here.

00:01:51.820 --> 00:01:52.440
Yeah.

00:01:52.440 --> 00:01:56.680
I'm really excited to talk to you guys about 3D printing and Python.

00:01:56.680 --> 00:01:59.000
It sounds like you're doing some amazing stuff over there.

00:01:59.000 --> 00:01:59.980
Yeah.

00:02:00.280 --> 00:02:00.680
Thanks.

00:02:00.680 --> 00:02:02.560
We're actually really enjoying it.

00:02:02.560 --> 00:02:08.220
I feel like 3D printing is poised to really change a lot of things in the world about how

00:02:08.220 --> 00:02:09.360
manufacturing is done.

00:02:09.360 --> 00:02:11.680
And it's a lot of fun to get to be a part of that.

00:02:11.680 --> 00:02:12.520
Yeah.

00:02:12.520 --> 00:02:13.380
I'm sure it is.

00:02:13.380 --> 00:02:14.660
It's definitely cutting edge.

00:02:14.660 --> 00:02:15.140
All right.

00:02:15.140 --> 00:02:16.740
So you work at a place called Authentize.

00:02:16.740 --> 00:02:19.120
And you're using Python there.

00:02:19.120 --> 00:02:20.420
What's the story with that place?

00:02:21.420 --> 00:02:27.540
I actually long ago started the company with mostly contractors doing a lot of development

00:02:27.540 --> 00:02:27.740
work.

00:02:27.740 --> 00:02:30.600
And they basically brought whatever tooling they wanted to the table.

00:02:30.600 --> 00:02:36.280
We had a little bit of Perl, some C, bits and pieces of Python, and a bunch of other languages

00:02:36.280 --> 00:02:36.940
I won't go into.

00:02:36.940 --> 00:02:42.000
And part of my job here was to bring all of that together, tighten it up, build an engineering

00:02:42.000 --> 00:02:47.260
team around, ideally, some reasonable common decisions.

00:02:47.260 --> 00:02:53.980
I tend to agree with Netflix's attitude about allowing developers to have some freedom.

00:02:53.980 --> 00:02:58.100
But in our space, in 3D printing, Python is extremely common.

00:02:58.100 --> 00:03:00.780
And it's also very good for building web APIs and that sort of thing.

00:03:00.780 --> 00:03:03.740
And so we use Python all up and down the stack.

00:03:03.740 --> 00:03:11.180
We have a desktop client that it's also sort of an agent that manages the printer, sends

00:03:11.180 --> 00:03:12.600
commands to it, gets responses back.

00:03:12.600 --> 00:03:16.920
That then streams data up to a streaming server that lives in the cloud in a data center.

00:03:17.000 --> 00:03:18.300
That's written in Python as well.

00:03:18.300 --> 00:03:24.500
We have various APIs where people can send commands to printers, control prints, do slicing, things

00:03:24.500 --> 00:03:24.920
like that.

00:03:24.920 --> 00:03:26.840
All of those APIs are all written in Python.

00:03:26.840 --> 00:03:29.760
They interface with databases using Python.

00:03:29.760 --> 00:03:33.120
We manage our deployments even, all with Python.

00:03:33.120 --> 00:03:36.000
We are essentially a full Python shop.

00:03:36.000 --> 00:03:36.840
Everything here.

00:03:36.840 --> 00:03:38.120
Our whole cloud, everything.

00:03:38.120 --> 00:03:39.080
That's awesome.

00:03:39.080 --> 00:03:43.600
You know, there's the term full stack Python and things like that, which is awesome.

00:03:43.720 --> 00:03:45.520
But this is like taking it to a whole nother level.

00:03:45.520 --> 00:03:48.700
Like physical objects come out of your full stack Python system.

00:03:48.700 --> 00:03:49.140
It's great.

00:03:49.140 --> 00:03:55.580
So before we get into that, maybe we could just sort of start at the beginning and talk

00:03:55.580 --> 00:03:58.440
about how you got into programming and kind of tell your story.

00:03:58.440 --> 00:04:00.020
And then we'll talk about how you guys are using Python.

00:04:00.640 --> 00:04:04.700
Gosh, as far as how I got into programming, it was forever ago.

00:04:04.700 --> 00:04:09.200
My parents bought an old 486.

00:04:09.200 --> 00:04:12.040
My older brother.

00:04:12.040 --> 00:04:13.300
SX or DX?

00:04:13.420 --> 00:04:14.640
Oh gosh, I couldn't even tell you.

00:04:14.640 --> 00:04:17.200
I was not old enough to really care.

00:04:17.200 --> 00:04:18.360
It was just magic to me.

00:04:18.360 --> 00:04:19.560
That was good enough.

00:04:19.560 --> 00:04:23.860
I watched my older brother use it a little bit and got kind of curious.

00:04:23.860 --> 00:04:26.500
And here in Utah, we have year-round school.

00:04:26.500 --> 00:04:29.860
So you're on again, off again every nine weeks or so.

00:04:29.860 --> 00:04:32.760
And during the off times, it was basically me and the computer.

00:04:32.760 --> 00:04:35.900
So I started learning basic, doing that sort of thing.

00:04:36.260 --> 00:04:41.520
When I got into middle school, they had a class where you would learn the 12-key calculator.

00:04:41.520 --> 00:04:44.220
You'd learn basic typing skills, Microsoft Word, that sort of thing.

00:04:44.220 --> 00:04:48.180
And if you finished everything in time, there was a little programming module at the end based

00:04:48.180 --> 00:04:49.420
on whatever time was left over.

00:04:49.420 --> 00:04:53.620
And I sped through everything like you wouldn't believe so I could get to that programming module.

00:04:53.620 --> 00:04:57.420
And then I would actually stay late at school just so that I could do more.

00:04:57.420 --> 00:04:58.960
It was really ridiculous.

00:04:58.960 --> 00:05:00.140
That's awesome.

00:05:00.140 --> 00:05:03.140
It's an old, old thing for me.

00:05:03.140 --> 00:05:05.660
I was back at 12 years old doing this stuff.

00:05:05.660 --> 00:05:06.200
That's cool.

00:05:06.280 --> 00:05:09.760
So it really resonated with you when you figured it out and learned it, right?

00:05:09.760 --> 00:05:10.520
Yeah.

00:05:10.520 --> 00:05:11.260
Yeah, absolutely.

00:05:11.260 --> 00:05:12.440
Okay.

00:05:12.440 --> 00:05:17.740
So let's talk about what you guys are doing with 3D printing and Python.

00:05:17.740 --> 00:05:20.020
There's all sorts of moving parts.

00:05:20.020 --> 00:05:26.420
It sounds to me like looking over your website and looking through some of the notes you'd sent

00:05:26.420 --> 00:05:31.380
me about what you guys are up to, that there's just all sorts of various hooks and stuff that

00:05:31.380 --> 00:05:38.080
you're putting together, like what, web APIs or JSON, HTTP APIs that you're connecting together

00:05:38.080 --> 00:05:38.580
with Python.

00:05:38.580 --> 00:05:39.020
Is that right?

00:05:39.020 --> 00:05:39.680
Yeah.

00:05:39.680 --> 00:05:43.500
So 3D printing's kind of complicated.

00:05:43.500 --> 00:05:46.860
It's funny in that regard because it's very much in the maker community now.

00:05:46.940 --> 00:05:49.140
So there's all these people tinkering in their spare time doing it.

00:05:49.140 --> 00:05:52.000
But even still, usually that simplifies things.

00:05:52.000 --> 00:05:54.960
But even still, it is quite complicated.

00:05:54.960 --> 00:05:57.800
And there's a lot involved to actually produce a physical object with it.

00:05:58.220 --> 00:06:04.840
So we started out and created a system where somebody who owns a website and runs a marketplace

00:06:04.840 --> 00:06:11.760
and just wants to sell designs can have this website, sell the designs, and our technology

00:06:11.760 --> 00:06:16.420
is embedded in the website and allows someone to directly from the website stream a print

00:06:16.420 --> 00:06:16.980
to their printer.

00:06:16.980 --> 00:06:20.980
Now, obviously, I have to install a little piece of software on their local computer that talks

00:06:20.980 --> 00:06:22.500
over the serial interface to the printer.

00:06:23.040 --> 00:06:26.820
But the idea was to try to simplify a lot of this.

00:06:26.820 --> 00:06:30.980
There's intellectual property controls that come into play as well.

00:06:30.980 --> 00:06:35.820
Obviously, if you're running a website, you don't want someone to buy a design, then steal it

00:06:35.820 --> 00:06:37.560
and turn around and sell it as their own.

00:06:37.560 --> 00:06:45.780
And so part of our technology is to sort of separate out the model, which is the intellectual property,

00:06:45.780 --> 00:06:50.880
from the instructions to the printer, which is what the end user is really buying so that they can end up

00:06:50.880 --> 00:06:54.040
with a physical object that looks like the model.

00:06:54.040 --> 00:06:58.660
So we built a system to simplify printing and realized, well, we've built all these parts and pieces

00:06:58.660 --> 00:07:01.840
that are interesting just to makers and people who do 3D printing as a whole.

00:07:01.840 --> 00:07:05.000
Let's separate each of them out so that people could then build applications against them.

00:07:05.000 --> 00:07:09.720
So we ended up building a suite of web APIs that do the various parts involved in 3D printing

00:07:09.720 --> 00:07:11.800
so that people can mix and match and use them as they want.

00:07:11.800 --> 00:07:12.860
Yeah, that's cool.

00:07:12.860 --> 00:07:18.260
On your website, you had a really cool, I don't know if it was a slogan or just a statement somewhere,

00:07:18.260 --> 00:07:21.740
that you guys are building the middleware for 3D printing.

00:07:21.740 --> 00:07:22.380
Yeah.

00:07:22.380 --> 00:07:22.920
Yeah.

00:07:22.920 --> 00:07:28.260
I mean, again, it kind of goes back to this whole maker movement of people just cobbling stuff together.

00:07:28.260 --> 00:07:32.280
And it's funny when you start looking at, say, putting firmware on your printer,

00:07:32.280 --> 00:07:35.760
there's a couple of fairly well-supported firmwares.

00:07:35.820 --> 00:07:43.080
But for many years, a lot of it was, oh, download this from this forum post because some guy was tinkering with it last weekend

00:07:43.080 --> 00:07:45.760
and he fixed these bugs and it's got some really great updates.

00:07:45.760 --> 00:07:47.360
And someone would basically branch that.

00:07:47.360 --> 00:07:50.100
And this was like, I mean, this was not ancient history, right?

00:07:50.100 --> 00:07:51.640
Like this is three, four years ago.

00:07:51.640 --> 00:08:04.120
GitHub existed, but it was still this sort of ethos of like just, you know, rip, modify, push, like stick it places, email it to your friends, which isn't bad.

00:08:04.120 --> 00:08:04.740
It's really cool.

00:08:04.740 --> 00:08:07.920
And I like that feel that the community has.

00:08:08.040 --> 00:08:14.000
But at the same time, it makes it very hard for somebody new to come in and to kind of get their bearings and get going.

00:08:14.000 --> 00:08:14.600
Yeah.

00:08:14.600 --> 00:08:24.100
Grabbing firmware from some random user off of the internet is kind of different than, you know, actually installing trusted software, I guess.

00:08:24.100 --> 00:08:24.360
Right.

00:08:24.360 --> 00:08:24.720
Right.

00:08:24.720 --> 00:08:26.180
Interesting.

00:08:26.180 --> 00:08:36.760
So at a high level, you guys are using, you said, Flask and uWSGI and Python 3 to sort of put all this together.

00:08:37.380 --> 00:08:39.880
Do you want to talk a little bit about why you chose that?

00:08:39.880 --> 00:08:40.440
Sure.

00:08:40.440 --> 00:08:59.000
So I've been doing Python for quite a while now, and it's really hard for anyone to do Python and to not run into sort of Django, MySQL kind of environment, especially if you were doing this six years ago, which I was.

00:08:59.000 --> 00:09:01.840
And so I've used Django before, and it's great.

00:09:01.840 --> 00:09:03.140
It's a really great piece of software.

00:09:03.720 --> 00:09:08.040
But for this particular company, I felt like we had a real opportunity to start fresh.

00:09:08.040 --> 00:09:09.480
The company's relatively young.

00:09:09.480 --> 00:09:17.460
And I kind of looked around and looked at the tooling and thought, you know, I'd love to go with something that is really modern and a little more a la carte pieced together.

00:09:17.460 --> 00:09:21.040
Flask was very simple and direct, and I really enjoyed it.

00:09:21.580 --> 00:09:29.800
At the time, it was kind of best in breed, and so far I haven't found anything in Python that's necessarily better, but there's constantly new things popping up in that space in Python.

00:09:29.800 --> 00:09:32.080
uWSGI I've used before at companies.

00:09:32.080 --> 00:09:32.920
I really trust it.

00:09:32.920 --> 00:09:33.740
It does a really good job.

00:09:33.740 --> 00:09:34.840
Same thing with Nginx.

00:09:35.080 --> 00:09:44.060
I mean, several years ago, it was a little bit more of a bleeding-edge choice, but now it's just like, yeah, you go Apache and, I don't know, something else.

00:09:44.060 --> 00:09:45.260
I haven't used Apache in forever.

00:09:45.260 --> 00:09:47.520
Or you go Nginx and uWSGI if you're in Python.

00:09:47.520 --> 00:09:51.280
There's a couple alternatives, but it's just very reliable.

00:09:51.280 --> 00:09:56.820
And I feel like you only get so many sort of innovation points that you can spend at a new company.

00:09:57.340 --> 00:10:02.580
I really wanted to spend them on Python 3, and I tried to make everything else really just stable.

00:10:02.580 --> 00:10:12.920
Right, yeah, I've been using uWSGI and Nginx to deliver all the episodes of my podcast, actually the download server and stuff, and it's been super amazing.

00:10:12.920 --> 00:10:14.560
So, yeah, I really like it.

00:10:14.560 --> 00:10:25.440
You said that you chose Python 3, and was that just because there was this opportunity to pick the latest and sort of reset everything as you came into this company,

00:10:25.440 --> 00:10:27.440
or was there more to it than that?

00:10:27.440 --> 00:10:33.520
That was certainly there, and that was definitely a component.

00:10:33.520 --> 00:10:37.280
Part of it is that I feel like Python 3 has finally come into its own.

00:10:37.280 --> 00:10:42.280
You know, I've been watching Python 3 for, goodness, it feels like forever, but from the initial drafts,

00:10:42.280 --> 00:10:45.160
I was looking at some of the changes they want to make, and it's like, oh, this is really exciting.

00:10:45.160 --> 00:10:45.980
This is really great.

00:10:45.980 --> 00:10:48.580
It's going to be really hard to deal with this whole break in the community.

00:10:48.580 --> 00:10:53.280
You know, I think everybody just sort of needs to do their share, and it's kind of like that pigeon.

00:10:53.280 --> 00:10:55.880
We'll all work together, and we'll make Python 3 a reality.

00:10:55.880 --> 00:11:01.220
So some of that is just the sense of wanting to be a part of moving things forward, right?

00:11:01.220 --> 00:11:07.260
Like you have to reach this critical mass with Python 3 in order to get it drawing new projects to it,

00:11:07.260 --> 00:11:08.580
and I wanted to do my part.

00:11:09.160 --> 00:11:15.300
Part of it is also that it's finally got some features that just cannot be reasonably backported.

00:11:15.300 --> 00:11:17.840
You know, for a while, some stuff was backported.

00:11:17.840 --> 00:11:20.960
There was ways you could work around it, but now, like, especially async.io.

00:11:20.960 --> 00:11:28.800
And in our company, we do a fair amount of actual streaming, and async.io is beautiful, and I really like it.

00:11:28.800 --> 00:11:33.120
And looking through it and looking at it over, I was like, okay, we're going to do this streaming server.

00:11:33.820 --> 00:11:36.700
Let's use something that we want to stick with that we'll be really happy with.

00:11:36.700 --> 00:11:42.540
And I've used G-Event before, and it's fine, and some things like Tornado and stuff like that way back when.

00:11:42.540 --> 00:11:48.260
But I just really like async.io, and I want to help build it up, and it fits our need really well.

00:11:48.260 --> 00:11:49.000
And so we went with it.

00:11:49.060 --> 00:11:54.200
And we were able to put something together based off of async.io really fast.

00:11:54.200 --> 00:11:58.080
We threw together a streaming server prototype within, like, two days,

00:11:58.080 --> 00:12:01.540
and then we started flushing it out with more of the features we needed.

00:12:01.540 --> 00:12:03.840
And after a couple weeks, it was essentially stable.

00:12:03.840 --> 00:12:05.140
Yeah, that's really cool.

00:12:05.140 --> 00:12:12.020
I think async.io is definitely one of those major features that, like you said, is a legitimate reason to say,

00:12:12.020 --> 00:12:19.600
look, we're going to choose Python 3 over Python 2 because if that's relevant to you, it really does do more in some great ways.

00:12:19.600 --> 00:12:22.060
So what are you guys doing for deployment?

00:12:22.060 --> 00:12:24.340
Deployment.

00:12:24.340 --> 00:12:27.680
Yeah, that's always the question, right?

00:12:27.680 --> 00:12:30.400
So we use Salt.

00:12:30.860 --> 00:12:40.040
It's not just because we're based in Utah and Salt Stack is a Utah company, though we do send some love down south to our neighbors down there.

00:12:40.040 --> 00:12:42.760
But, yeah, Salt is fantastic.

00:12:42.760 --> 00:12:49.440
It's written in Python, which means when it comes down to debugging what's going on with deployment, we can bring all the same knowledge to bear.

00:12:49.440 --> 00:12:52.960
We run essentially a DevOps shop.

00:12:52.960 --> 00:12:58.640
I'm a little hesitant to throw that out there because we don't really have a choice.

00:12:58.820 --> 00:13:02.380
My team is small and all my developers have to be able to handle everything.

00:13:02.380 --> 00:13:06.420
And so everyone figures out how stuff gets deployed and they debug it.

00:13:06.420 --> 00:13:10.980
So being in the same kind of stack that way helps a whole heck of a lot.

00:13:10.980 --> 00:13:18.700
Beyond Salt for like our sort of coordination of commands and our configuration management, we actually use pip.

00:13:20.360 --> 00:13:29.240
So when we push a new update to some service, and we have a lot of services, we try to run essentially a microservice architecture.

00:13:29.240 --> 00:13:31.220
We push the update into Git.

00:13:31.220 --> 00:13:36.980
Jenkins grabs that, builds it, runs the test, ensures that it's good, all that stuff.

00:13:36.980 --> 00:13:45.520
If it's accepted and we need to deploy it, the developer will put it in the dev environment, test it, make sure it's fine and functions as specified.

00:13:46.100 --> 00:13:48.220
And then they tag the build, send it to Jenkins again.

00:13:48.220 --> 00:13:51.740
It will then package it up just using setup tools, right?

00:13:51.740 --> 00:13:54.380
Like any package you would stick in the cheese shop.

00:13:54.380 --> 00:13:59.380
And zips that up and sticks it into an archiver.

00:13:59.380 --> 00:14:04.640
And the archiver just is a pretend pip mirror, I guess you could say.

00:14:04.880 --> 00:14:06.040
It's really simple.

00:14:06.040 --> 00:14:10.520
We have this little tiny app that basically responds the way pip expects things to respond.

00:14:10.520 --> 00:14:18.500
And then on all of our machines, we put a special config for pip saying, hey, also hit this other mirror if you're looking for anything.

00:14:18.500 --> 00:14:19.640
And it's our internal mirror.

00:14:19.640 --> 00:14:21.660
It's on our internal network and protecting all that stuff.

00:14:21.660 --> 00:14:22.900
It's where all of our code lives.

00:14:22.900 --> 00:14:26.440
And we just say pip install whatever it was.

00:14:26.440 --> 00:14:28.860
And we have some projects that depend on one another.

00:14:29.580 --> 00:14:31.620
And they just go through setup tools.

00:14:31.620 --> 00:14:32.860
They're just part of the dependencies.

00:14:32.860 --> 00:14:41.920
And our deployment system just says, hey, I want you to pip install, upgrade, you know, this system for, say, managing 3D models.

00:14:42.560 --> 00:14:49.180
And it will look, find the newest update, install that update, download any dependencies, internal or external, get them all installed via pip.

00:14:49.180 --> 00:14:54.480
And then it just tells MicroWSGI to bounce the process if need be so that it updates all of its logic.

00:14:54.480 --> 00:14:56.040
And off we go.

00:14:56.040 --> 00:14:58.040
Like, we're pip.

00:14:58.040 --> 00:15:01.440
That's a really interesting way to do it.

00:15:11.440 --> 00:15:14.000
This episode is brought to you by Hired.

00:15:14.000 --> 00:15:20.480
Hired is a two-sided, curated marketplace that connects the world's knowledge workers to the best opportunities.

00:15:20.480 --> 00:15:24.820
Each offer you receive has salary and equity presented right up front.

00:15:24.820 --> 00:15:29.640
And you can view the offers to accept or reject them before you even talk to the company.

00:15:29.640 --> 00:15:34.040
Typically, candidates receive five or more offers in just the first week.

00:15:34.040 --> 00:15:36.000
And there are no obligations ever.

00:15:36.000 --> 00:15:38.120
Sounds pretty awesome, doesn't it?

00:15:38.120 --> 00:15:40.180
Well, did I mention there's a signing bonus?

00:15:40.460 --> 00:15:44.220
Everyone who accepts a job from Hired gets a $2,000 signing bonus.

00:15:44.220 --> 00:15:48.580
And as Talk Python listeners, it gets way sweeter.

00:15:48.580 --> 00:15:52.880
Use the link Hired.com slash Talk Python To Me.

00:15:52.880 --> 00:15:56.140
And Hired will double the signing bonus to $4,000.

00:15:56.140 --> 00:15:57.860
Opportunity's knocking.

00:15:57.860 --> 00:16:01.460
Visit Hired.com slash Talk Python To Me and answer the call.

00:16:01.460 --> 00:16:13.740
You know, it's a little crazy, but it's really cool, actually.

00:16:13.740 --> 00:16:15.840
Especially the dependency part.

00:16:16.420 --> 00:16:18.360
Yeah, that one was actually kind of tricky.

00:16:18.360 --> 00:16:22.000
And it's funny because I first developed a system like this at a previous company.

00:16:22.000 --> 00:16:31.240
And at the time, it was kind of painful because we were going through some of the growing pains of setup tools and distribute and the different packaging methods.

00:16:31.380 --> 00:16:34.780
PIP was relatively new, but it was growing fast.

00:16:34.780 --> 00:16:37.620
And we just decided, well, what if we try this?

00:16:37.620 --> 00:16:43.640
Like, what if we try doing our own internal dependencies in setup tools and just let pip figure it out?

00:16:44.180 --> 00:16:48.620
Some of our deployment people at the time were like, heretics and all that stuff.

00:16:48.620 --> 00:16:50.580
We gave it a shot and it worked out.

00:16:50.580 --> 00:16:51.940
And it's actually gotten much better.

00:16:51.940 --> 00:16:55.740
Like, pip has been growing a lot recently, especially if you're in the Python 3 world.

00:16:55.740 --> 00:16:58.180
And it's quite powerful.

00:16:58.180 --> 00:17:01.260
I mean, there's a few things that are a little bit difficult.

00:17:01.260 --> 00:17:12.260
We struggled with version numbers, actually, since our version numbers in Git, our version numbers went all the way through from Git, tags, all that stuff, all the way through Jenkins.

00:17:12.960 --> 00:17:19.020
And Python 3, pip, the latest stuff, is all very exacting about how it treats your version numbers.

00:17:19.020 --> 00:17:33.320
And so we'll occasionally get internal conflicts or we accidentally push something to production that's not a production build because, oh, it turns out that the way our Git tag translated into a pip version ended up making it more recent than our last one on accident.

00:17:33.320 --> 00:17:35.740
But overall, like, the system's really good.

00:17:35.740 --> 00:17:42.720
And I kind of encourage other small businesses that are doing this, like, check this out because I've used it now at two different companies.

00:17:42.940 --> 00:17:44.260
And it's pretty seamless.

00:17:44.260 --> 00:17:45.440
And we're pretty happy with it.

00:17:45.440 --> 00:17:48.240
Yeah, it actually sounds really pretty effective.

00:17:48.240 --> 00:17:49.240
I think that's cool.

00:17:49.240 --> 00:17:51.520
Is Docker in this world anywhere?

00:17:51.520 --> 00:17:52.460
Are you considering Docker?

00:17:52.460 --> 00:17:57.900
Like most modern companies, we're always considering Docker.

00:17:57.900 --> 00:18:00.620
We're not actually using it at this point.

00:18:00.620 --> 00:18:05.580
Right now, the feeling is that it won't buy us any advantages.

00:18:06.120 --> 00:18:08.440
Part of that is because of the position that we're in.

00:18:08.440 --> 00:18:11.060
We have credits with some cloud providers.

00:18:11.060 --> 00:18:17.460
And so it's essentially free for us to spin up enormous servers and really over-provision.

00:18:17.460 --> 00:18:23.160
And so, like, Docker can be kind of effective at eking out more bang for your buck on your resources.

00:18:23.160 --> 00:18:24.280
We don't really need that.

00:18:24.420 --> 00:18:29.020
And it adds a layer of complexity on top of the rest of our config management that we don't really need right now.

00:18:29.020 --> 00:18:32.600
But we keep an eye on it because it is interesting and it's an exciting project.

00:18:32.600 --> 00:18:34.920
And we expect that someday we probably will need it.

00:18:34.920 --> 00:18:36.520
But first, we have to get through the growth phase.

00:18:36.520 --> 00:18:38.220
Yeah, I kind of feel the same way.

00:18:38.220 --> 00:18:43.720
You know, some of the stuff I was doing recently, I'm like, oh, I should probably do this with Docker and it'd be really great.

00:18:43.720 --> 00:18:49.880
But in the end, I realized, you know, it's really a dedicated VM and it's doing one thing.

00:18:49.880 --> 00:18:57.080
And I could just configure the VM or I could configure the Docker image and have that be the only Docker thing running, the only Docker container running.

00:18:57.080 --> 00:19:01.220
So in the end, I just put it in and just, you know, changed it directly.

00:19:01.220 --> 00:19:02.800
But I think you're right.

00:19:02.800 --> 00:19:06.400
In the future, it's definitely going to make a huge difference in what we do.

00:19:06.400 --> 00:19:12.580
I think Docker is going to be a major part of what the world has for deployment, but maybe not today for everyone.

00:19:13.220 --> 00:19:21.940
Yeah, I had a very trusted sort of IT systems management fellow that I've worked with who's done this for many, many years.

00:19:21.940 --> 00:19:29.400
And I talked to him about Docker once and he said the key insight you have to have at Docker is it does not get rid of the fact you have to manage a server.

00:19:29.400 --> 00:19:33.360
Like whatever it does, it will be on top of having a server.

00:19:33.360 --> 00:19:34.520
Now, that's not strictly true.

00:19:34.520 --> 00:19:38.660
There's some services out there now for different cloud providers that gets rid of that constraint.

00:19:38.660 --> 00:19:45.420
But if you keep that in mind, it kind of reminds you, oh, it's not like magic sauce that solves all of my configuration management server management needs.

00:19:45.420 --> 00:19:45.720
Right.

00:19:45.720 --> 00:19:46.920
It's an additional tool.

00:19:46.920 --> 00:19:48.260
I'm very useful for what it does.

00:19:48.260 --> 00:19:49.200
Yeah, exactly.

00:19:49.200 --> 00:19:52.640
It doesn't it doesn't save you from everything, but it is a very cool tool.

00:19:53.380 --> 00:20:08.800
At PyCon 2014 and to a lesser degree this year at Europython, Guido Van Rossum got up and during the keynote and basically said, I know you guys are still many of you are still on Python 2.

00:20:09.220 --> 00:20:15.820
And some guys are moving to Python 3 like your project, but there will be no Python 2.8.

00:20:15.820 --> 00:20:21.420
There's a great giant slide that had like two Python 2.8 and a huge like cross through it or something.

00:20:21.420 --> 00:20:23.820
What are your thoughts on that?

00:20:23.820 --> 00:20:26.220
That's really hard.

00:20:26.220 --> 00:20:27.320
I agree with him.

00:20:27.320 --> 00:20:30.400
I think you have to make the hard break.

00:20:30.740 --> 00:20:37.360
And the irony here is if anyone was going to be pushing for Python 2.8, they should have been doing this five years ago.

00:20:37.360 --> 00:20:37.580
Right.

00:20:37.580 --> 00:20:40.220
And I get that a lot of people like, well, it's been five years.

00:20:40.220 --> 00:20:43.040
That's how long they expected it to take.

00:20:43.040 --> 00:20:44.640
And not everybody has moved over.

00:20:44.640 --> 00:20:47.940
So obviously something was wrong.

00:20:47.940 --> 00:20:48.980
We should have a Python 2.8.

00:20:48.980 --> 00:20:52.740
I see it kind of the other way, which is we should have been arguing about this five years ago.

00:20:52.740 --> 00:20:58.620
And since that's not the argument that was made, like, OK, it's either Python 3 is dead or it's not dead.

00:20:59.260 --> 00:21:00.940
And to me, it's very much not dead.

00:21:00.940 --> 00:21:02.940
If it were dead, OK, let's jettison it.

00:21:02.940 --> 00:21:04.660
Let's go back to maintaining Python 2.

00:21:04.660 --> 00:21:10.120
But it doesn't make a lot of sense to me to continue the bifurcation longer, which is all you would do.

00:21:10.120 --> 00:21:18.540
Like the more major revisions you release of Python 2, all you're doing is extending that timeline before there's this critical mass that pulls people into Python 3.

00:21:18.860 --> 00:21:37.360
And so, like, my attitude now is, OK, if we're talking about, you know, Python 2.8, like, what you really need to be doing is let's enumerate the constraints you have about needing to be on Python 2 and figure out how to solve those constraints for you.

00:21:37.360 --> 00:21:50.320
Because there's so much compelling about Python 3 and so many things have moved over and support it that, to me, you really have to give me strong reasons why not to switch over rather than trying to give good reasons to backport stuff.

00:21:50.900 --> 00:21:52.500
Yeah, I tend to agree with you on that.

00:21:52.500 --> 00:21:57.100
I think there's a lot of interesting technical debates and conversations.

00:21:57.100 --> 00:22:02.720
You know, I've got a million lines of Python 2 code and we just moved to 2.6 or who knows whatever.

00:22:02.720 --> 00:22:04.520
You know, some strange thing like that, right?

00:22:04.520 --> 00:22:07.320
And there's totally merits to that conversation.

00:22:07.320 --> 00:22:29.880
But on a larger level, on a more philosophical level, it seems wrong to me to have this great community, some of which is focused doing their best work on Python 3, on the interpreter and these new features like AsyncIO, and then a whole other big chunk of people working professionally on this older version that's kind of disconnected in some sense.

00:22:29.880 --> 00:22:37.920
Like, it just seems, it just seems not like a good use of the community's energy and stuff to have these two things where people are focused.

00:22:37.920 --> 00:22:39.440
And I think you're right.

00:22:39.440 --> 00:22:42.440
Going forward, it'd be great if it was Python 3.

00:22:42.440 --> 00:22:50.460
Yeah, I think Guido's making the right decision by basically saying, we're just going to keep adding great things to Python 3 to make you want to be here.

00:22:50.460 --> 00:22:57.340
It's like, rather than having two separate parties and being like, well, we should try to split food between them and music and all that stuff.

00:22:57.420 --> 00:23:01.700
Just be like, we picked a party, let's make that party the best party it can possibly be.

00:23:01.700 --> 00:23:03.980
And whatever happens to this other party will happen.

00:23:03.980 --> 00:23:05.460
We're not going to worry too much about it.

00:23:05.460 --> 00:23:07.140
I think that's kind of where Python 3 is right now.

00:23:07.140 --> 00:23:12.200
It's like, let's put the focus on the new stuff and people will trickle over because they're going to see how awesome it is.

00:23:12.200 --> 00:23:13.160
That's right.

00:23:13.160 --> 00:23:16.500
And they just keep adding stuff like you say, like, hey, now our party has a hot tub.

00:23:16.500 --> 00:23:18.200
Hey, now our party has a ski jump.

00:23:18.200 --> 00:23:19.660
Hey, it has a cool water slide.

00:23:19.660 --> 00:23:21.680
And eventually, like, all right, we have to go there, right?

00:23:21.680 --> 00:23:24.260
Someday, that's probably how it's going to play out, isn't it?

00:23:24.260 --> 00:23:26.640
Awesome.

00:23:26.640 --> 00:23:33.860
So let's go back to your overall architecture because it sounds like you're doing a ton of stuff with Python.

00:23:33.860 --> 00:23:42.720
Could you maybe walk us through kind of like the flow through your whole environment and all the stuff that happens there and how Python fits into that story?

00:23:42.720 --> 00:23:43.840
Okay.

00:23:43.840 --> 00:23:47.480
So first off, our baseline is essentially Amazon services.

00:23:47.640 --> 00:23:55.840
We do have some other cloud providers that play in, but we're very Amazon-centric, AWS-centric as far as, like, kind of our main line goes.

00:23:55.840 --> 00:24:00.080
So you're running Linux servers and EC2 and things like that?

00:24:00.080 --> 00:24:00.480
Yeah.

00:24:00.480 --> 00:24:01.080
Yeah, exactly.

00:24:01.080 --> 00:24:04.160
Ubuntu, to be specific, for the most part.

00:24:05.280 --> 00:24:06.700
So, yeah, we've got all these servers.

00:24:06.700 --> 00:24:08.700
So let's say you want to print a model.

00:24:08.700 --> 00:24:15.160
So you've got, I don't know, a new iPhone case that you want to print out maybe that has your initials on it.

00:24:15.160 --> 00:24:15.800
Pretty exciting.

00:24:16.640 --> 00:24:18.540
So first, you need to get that into our system.

00:24:18.540 --> 00:24:24.800
We have a system that will take in models from partners that have marketplaces from individuals.

00:24:24.800 --> 00:24:26.760
Anybody, essentially, you can build an account.

00:24:26.760 --> 00:24:27.660
You send us a model.

00:24:28.980 --> 00:24:38.640
That's going to come in through a Python API, Flask, you know, really standard, MicroWisgee, Nginx, Flask, and then SQLAlchemy, of course, talking to Postgres.

00:24:38.640 --> 00:24:43.040
And it's going to store that record in there, and we're going to stick your model.

00:24:43.040 --> 00:24:49.620
Basically, we're actually going to hand you back a URL that says, hey, upload your model to this URL, and it's assigned us through URL, so you don't have to go through Python.

00:24:49.620 --> 00:24:50.680
You just send the model up there.

00:24:50.680 --> 00:24:53.160
That way we're not having to broker all of this data that's coming in.

00:24:53.160 --> 00:24:54.860
Amazon will do that for us.

00:24:55.340 --> 00:24:59.200
So that then initiates a job on the back of the queue that says, hey, process this model.

00:24:59.200 --> 00:25:03.000
There's a Python application that's pulling messages off of a queue.

00:25:03.000 --> 00:25:12.980
It pulls down your model, analyzes it, checks to see if it's printable, gets some essential statistics about it, things like that, and then eventually we'll update a resource in the database so that you can see, okay, my model's been uploaded.

00:25:12.980 --> 00:25:13.840
It's been ingested.

00:25:13.840 --> 00:25:15.080
It's been analyzed.

00:25:15.080 --> 00:25:15.900
It's good to go.

00:25:15.900 --> 00:25:16.620
It's good to print.

00:25:16.620 --> 00:25:17.460
All of that stuff.

00:25:17.460 --> 00:25:20.800
We then have a couple different APIs you could use to modify the model.

00:25:20.800 --> 00:25:25.280
Say you want to put your initials on it, change the scale, things like that.

00:25:25.360 --> 00:25:34.320
There's different operations you might want to do to improve the print quality, that sort of thing, and that will actually cascade through the same system, reanalyze after operations and that sort of thing.

00:25:34.320 --> 00:25:35.220
That's all done.

00:25:35.220 --> 00:25:36.840
You can actually just stop there if you wanted.

00:25:36.840 --> 00:25:38.780
But let's say we want to go on to actual printing.

00:25:38.780 --> 00:25:43.460
There's another service that you would say, okay, hey, I have this printer.

00:25:43.460 --> 00:25:45.680
It's a, I don't know, MakerBot.

00:25:46.240 --> 00:25:47.400
No, let's not do MakerBot.

00:25:47.400 --> 00:25:49.120
Let's say it's an Ultimaker.

00:25:49.120 --> 00:25:52.360
You say, I have this Ultimaker printer I bought.

00:25:52.360 --> 00:25:52.920
It's lovely.

00:25:52.920 --> 00:25:55.540
I've got some PLA.

00:25:55.540 --> 00:25:57.680
That's a type of plastic I want to print this with.

00:25:57.680 --> 00:25:59.460
Here's the model that I want to use.

00:25:59.460 --> 00:26:00.540
It's already in your service.

00:26:00.540 --> 00:26:10.980
Here's a bunch of parameters about the print, like the wall thickness, the layer height, that sort of thing, the temperature of the nozzle so that you know what temperature the plastic's going to come out, all that stuff.

00:26:10.980 --> 00:26:15.700
And there's a bunch of essentially like mechanical engineering, material science stuff that goes into those parameters.

00:26:15.700 --> 00:26:21.340
And the nice thing is you could also pick very high level parameters and just say, I want quality over speed.

00:26:21.340 --> 00:26:22.460
Figure it out.

00:26:22.460 --> 00:26:25.980
And we'll figure it out based off of your printer and the model and things like that.

00:26:25.980 --> 00:26:31.760
So then that also goes through, again, a Python API to handle all that, sticks it in another Postgres database.

00:26:31.760 --> 00:26:34.160
There's another job that will go on another queue.

00:26:34.160 --> 00:26:38.180
There's a Python process on the back end, pulls the job off the queue, pulls the model down.

00:26:38.700 --> 00:26:45.060
It's going to load up software from different slicing engines, depending on exactly the approach and that sort of thing.

00:26:45.060 --> 00:26:51.540
Run those processes, monitor them, push updates into a database that you could pull constantly for information about your slice.

00:26:51.540 --> 00:26:56.940
Because slices can take a while, you know, very complex geometry with really difficult settings.

00:26:56.940 --> 00:26:58.860
We could be talking about tens of minutes.

00:26:58.860 --> 00:27:00.780
What's a standard time?

00:27:00.780 --> 00:27:06.780
Most people for most prints will be on the order of like a couple minutes, really.

00:27:07.360 --> 00:27:11.120
It's really just like the big or the really complicated stuff that will get in the tens of minutes.

00:27:11.120 --> 00:27:14.240
So we'll finish the slicing job.

00:27:14.240 --> 00:27:20.640
We actually have a callback API so you can tell us, hey, hit this URL endpoint when it's done so that you can integrate a service with us.

00:27:20.640 --> 00:27:22.240
We'll tell you, hey, slicing's done.

00:27:22.240 --> 00:27:23.860
We have instructions for your printer.

00:27:24.740 --> 00:27:26.860
That will then get handed over to a streaming service.

00:27:26.860 --> 00:27:34.140
Again, Python 3 using asyncio that is handling, you know, hundreds of thousands of connections at any given time for a particular server.

00:27:34.140 --> 00:27:38.220
You will, assuming you're working on like a web page.

00:27:38.220 --> 00:27:43.800
You could do all this with a command line, but most people do it on some sort of web page, often with one of our partners.

00:27:44.600 --> 00:27:51.360
You'll be seeing, you know, JavaScript that's interacting with these APIs, pulling down updates and displaying the status as you go along.

00:27:51.360 --> 00:27:53.260
You know, get to this point where it's like, okay, let's print.

00:27:53.260 --> 00:27:56.820
You're going to, you need to download our software on your printer.

00:27:56.820 --> 00:27:59.860
Some printers have our software built in.

00:28:00.560 --> 00:28:05.460
Anybody who has like a laptop or desktop with the printer plugged in could download the application and run it.

00:28:05.460 --> 00:28:08.700
That application is mostly written in Python.

00:28:08.700 --> 00:28:14.400
There are, of course, some platform specifics as well as some encryption and stuff like that that isn't for various reasons.

00:28:14.400 --> 00:28:15.200
Yeah.

00:28:15.200 --> 00:28:21.900
So for the client side stuff, I was wondering, so you send them an application and a decent amount that's Python.

00:28:21.900 --> 00:28:31.100
Are you like compiling that or composing that into an application like a .app or .exe file with something like CX Freeze?

00:28:31.100 --> 00:28:33.140
Or how does that work?

00:28:33.140 --> 00:28:36.660
For Windows, we're actually sending them an MSI.

00:28:36.660 --> 00:28:41.800
For Mac, we're sending, oh goodness, what is their installer type?

00:28:41.800 --> 00:28:44.280
I can't remember what it is for Mac, but either.

00:28:44.280 --> 00:28:45.740
A PKG or whatever?

00:28:45.740 --> 00:28:46.260
Yeah, yeah.

00:28:46.260 --> 00:28:46.720
PKG.

00:28:46.720 --> 00:28:47.040
Thank you.

00:28:47.040 --> 00:28:51.560
Anyway, for any given platform, it's a real installer.

00:28:51.820 --> 00:28:56.220
So it'll be properly signed and all that sort of thing, and it will walk you through a wizard and install.

00:28:56.220 --> 00:29:11.240
The thing that it installs will end up being a binary, and that binary actually has a bootstrapping process where it unpacks itself as a bunch of PYC files and then can execute, can use those files with an interpreter that's baked in.

00:29:11.240 --> 00:29:12.680
That interpreter has all of our dependencies.

00:29:12.680 --> 00:29:19.320
It's got a version of Python that we know what it is so that we don't end up using whatever their installed version of Python is.

00:29:19.320 --> 00:29:21.740
And it basically comes with everything.

00:29:21.740 --> 00:29:24.680
So you run it, it unpacks itself, executes Python.

00:29:24.680 --> 00:29:30.000
It's got, again, some other languages bound up in there, but mostly Python, to even do all the UI stuff.

00:29:30.000 --> 00:29:35.280
Because we've got a little, like, sys tray icon that shows you the status of your print, that sort of thing.

00:29:48.740 --> 00:29:51.160
This episode is brought to you by CodeShip.

00:29:51.840 --> 00:29:53.660
CodeShip has launched organizations.

00:29:53.660 --> 00:29:53.760
CodeShip has launched organizations.

00:29:53.760 --> 00:30:00.000
Create teams, set permissions for specific team members, and improve collaboration in your continuous delivery workflow.

00:30:00.000 --> 00:30:05.900
Maintain centralized control over your organization's projects and teams with CodeShip's new organizations plan.

00:30:05.900 --> 00:30:11.440
And as Talk Python listeners, you can save 20% off any premium plan for the next three months.

00:30:11.440 --> 00:30:14.960
Just use the code TALKPYTHON, all caps, no spaces.

00:30:15.520 --> 00:30:20.680
Check them out at CodeShip.com and tell them thanks for supporting the show on Twitter where they're at CodeShip.

00:30:20.680 --> 00:30:26.180
That's awesome.

00:30:26.180 --> 00:30:27.600
What UI frameworks are you using?

00:30:28.740 --> 00:30:35.500
So for Mac, sorry, I laughed because I think for Mac it's called something like Rumps something.

00:30:35.500 --> 00:30:39.860
It's this tiny little thing that we found.

00:30:39.860 --> 00:30:41.420
And it's a great piece of software.

00:30:42.300 --> 00:30:52.180
But it basically gives you – you define a class and it figures out all of the Coco bindings and stuff so that it can do a message pumping loop for you.

00:30:52.180 --> 00:30:58.460
And it will just like – the class defines some menu items, some callbacks when those menu items get fired.

00:30:58.460 --> 00:30:59.080
And that's it.

00:30:59.080 --> 00:31:00.300
It's very small, very simple.

00:31:00.300 --> 00:31:02.620
But it does exactly what we need, which is fantastic.

00:31:03.580 --> 00:31:07.980
On Windows, goodness, I think we have something similar.

00:31:07.980 --> 00:31:17.900
But, yeah, ultimately we're using just a couple of very, very small little toolkits that are designed only to do like a system tray icon kind of application.

00:31:17.900 --> 00:31:25.180
There's no Windows in our application aside from a little like help blurb, like tell me about the version of this software.

00:31:25.180 --> 00:31:25.720
But that's all.

00:31:25.720 --> 00:31:27.760
It's just very, very minimal.

00:31:27.760 --> 00:31:30.360
So we kept the framework very, very light.

00:31:30.360 --> 00:31:31.820
Yeah, that's really cool.

00:31:31.820 --> 00:31:39.900
I think that's one of the somewhat untouched frontiers of Python is proper native feeling applications.

00:31:39.900 --> 00:31:42.760
Yeah, and it's been a bit difficult, to be honest.

00:31:42.760 --> 00:31:48.600
It took us a while to sort out exactly how to do Mac just because we needed the Coco bindings.

00:31:48.600 --> 00:31:50.320
And those are built into the latest versions.

00:31:50.320 --> 00:31:52.120
But they're kind of different across different versions.

00:31:52.120 --> 00:31:56.240
And you can't really properly virtually environment one when you're doing development.

00:31:56.240 --> 00:31:57.440
Not easily anyways.

00:31:57.440 --> 00:31:58.620
There's all these little complexities.

00:31:58.620 --> 00:31:59.720
But I agree.

00:31:59.720 --> 00:32:01.060
It's somewhat of an untouched area.

00:32:01.060 --> 00:32:10.840
And it's really interesting because there's no reason you can't use Python much as you would, say, like C# on Windows as a high level language to just tie your UI logic together.

00:32:10.840 --> 00:32:11.940
Yeah, definitely.

00:32:12.280 --> 00:32:23.620
By the way, I found at least one of the rumps repositories on GitHub at JaredKS slash rumps.

00:32:23.620 --> 00:32:27.180
Ridiculously uncomplicated OS X Python status bar apps.

00:32:27.180 --> 00:32:27.820
Perfect, right?

00:32:27.820 --> 00:32:28.400
Yep.

00:32:28.400 --> 00:32:30.100
Yeah, that's exactly why we used it.

00:32:30.100 --> 00:32:33.060
And it does exactly what we need, which is, I mean, that's the Python way, right?

00:32:33.060 --> 00:32:33.700
That's right.

00:32:34.260 --> 00:32:34.980
Very cool.

00:32:34.980 --> 00:32:36.260
Okay.

00:32:36.260 --> 00:32:39.720
I kind of short-circuited you talking about this architecture thing.

00:32:39.720 --> 00:32:42.640
Were we getting to the end of what we got to the client side?

00:32:42.640 --> 00:32:43.660
Or what's the story there?

00:32:43.660 --> 00:32:44.400
Yeah, yeah.

00:32:44.400 --> 00:32:44.620
Okay.

00:32:44.620 --> 00:32:46.160
So the client side.

00:32:46.160 --> 00:32:47.640
Yeah, you download this application.

00:32:47.980 --> 00:32:53.180
All it does is mediate between the streaming server and the connection to your printer.

00:32:53.180 --> 00:32:56.020
However we're making that connection, there's various ways it could be made.

00:32:56.020 --> 00:32:58.080
But it does some of this UI stuff.

00:32:58.080 --> 00:33:00.200
It does some of the streaming stuff.

00:33:00.200 --> 00:33:04.800
And the Python is all kind of the high-level application logic, which is really nice.

00:33:04.880 --> 00:33:12.540
We were able to take some C code that did all of this that was probably close to five to seven times as many lines of code

00:33:12.540 --> 00:33:16.480
and compress it down into much smaller, much more easily debugged Python, which is awesome.

00:33:16.480 --> 00:33:21.320
One of the other fun things that the client does is it will stream logging events up to our server

00:33:21.320 --> 00:33:24.920
so that if you were trying to do a print right now, I could actually log in.

00:33:24.920 --> 00:33:28.100
You could give me essentially a little token that would correspond to your installation.

00:33:28.100 --> 00:33:33.160
I could watch the information coming from your printer over the wire into our data centers

00:33:33.160 --> 00:33:36.000
so that I could actively debug with you stuff that's going on.

00:33:36.000 --> 00:33:38.140
That's necessary because printing is just hard.

00:33:38.140 --> 00:33:42.040
And 3D printing is a whole other level, right?

00:33:42.040 --> 00:33:44.000
Yeah, it's a whole other dimension.

00:33:44.000 --> 00:33:45.440
Of course, of course.

00:33:45.440 --> 00:33:46.300
Yuck, yuck.

00:33:46.300 --> 00:33:50.100
So anyways, that's the client application.

00:33:50.100 --> 00:33:55.480
The last component I think that's interesting as far as Python goes is that while your print is going on,

00:33:55.480 --> 00:34:00.800
people can opt in to a computer vision component, which is they'll mount a camera on their printer

00:34:00.800 --> 00:34:03.260
and the camera will watch the printer as it's printing.

00:34:03.260 --> 00:34:07.160
And we're using OpenCV on both the front end and the back end,

00:34:07.160 --> 00:34:09.840
so on both the client-side application as well as the back end server.

00:34:09.840 --> 00:34:16.340
And awesomely, thank you OpenCV Project for supporting Python 3 relatively recently

00:34:16.340 --> 00:34:21.480
because we actually started on the OpenCV 3 beta when we first did this product,

00:34:21.480 --> 00:34:24.500
trusting it would come out of beta in time for us to run it in production.

00:34:24.500 --> 00:34:26.480
Yeah, not too long ago it did, right?

00:34:26.480 --> 00:34:27.860
Yeah, yeah.

00:34:27.860 --> 00:34:29.960
It was a matter of months.

00:34:29.960 --> 00:34:30.620
It was this year.

00:34:30.620 --> 00:34:32.020
So it was really great.

00:34:32.020 --> 00:34:33.860
But it's a really cool piece of technology.

00:34:33.860 --> 00:34:37.140
Anyways, we use that so that we can capture these images of the printer.

00:34:37.140 --> 00:34:40.440
We send some data about those images up to the cloud,

00:34:40.440 --> 00:34:46.500
and we use machine learning and computer vision on it to assess whether or not your print is going well

00:34:46.500 --> 00:34:49.980
so that you can have these 10 and 20-hour long prints,

00:34:49.980 --> 00:34:53.740
and it will actually text you if it looks to us like, I don't know,

00:34:53.740 --> 00:34:57.360
so your cat jumped on the platform to get warm next to the hot plastic,

00:34:57.360 --> 00:34:59.660
and we're trying to print on your cat.

00:34:59.660 --> 00:35:02.180
That's not good, so we text you and let you know if your cat's there.

00:35:02.180 --> 00:35:04.520
There's got to be a Law Cat reference in there somewhere.

00:35:04.520 --> 00:35:07.180
I'm sure there is, but I always miss it.

00:35:08.140 --> 00:35:10.160
Ah, that sounds really, really cool.

00:35:10.160 --> 00:35:13.420
What's the craziest thing you've seen printed?

00:35:13.420 --> 00:35:22.560
Sorry, I'm trying to filter through all the things that are actually okay to talk about.

00:35:22.560 --> 00:35:28.880
Probably the craziest thing, we've gotten a surprise number of nude models.

00:35:28.880 --> 00:35:33.860
So for whatever reason, naked people.

00:35:33.860 --> 00:35:34.780
Interesting.

00:35:34.780 --> 00:35:35.880
People print naked people.

00:35:36.400 --> 00:35:38.740
Are these like little toy-sized ones?

00:35:38.740 --> 00:35:44.560
Yeah, most of the printers that we work with can't build much more outside of,

00:35:44.560 --> 00:35:47.700
oh, I'd say maybe 20 centimeters cubed.

00:35:47.700 --> 00:35:50.900
So you're not doing any life-size prints.

00:35:50.900 --> 00:35:51.780
That's probably good.

00:35:51.780 --> 00:35:53.600
Oh, boy.

00:35:53.600 --> 00:35:54.300
What else?

00:35:54.300 --> 00:35:59.060
One of my favorites is people who print stuff with actual joins.

00:35:59.060 --> 00:36:01.000
And this isn't, say, crazy,

00:36:01.000 --> 00:36:03.800
but I think it's really interesting to people who aren't into 3D printing.

00:36:04.340 --> 00:36:08.740
One of the first prints that I did when I joined the company was I printed out a bracelet for my wife.

00:36:08.740 --> 00:36:10.420
And this is, of course, printed in plastic.

00:36:10.420 --> 00:36:12.600
And it's all one object, right?

00:36:12.780 --> 00:36:16.200
So you literally print this object, and it's rigid and hard.

00:36:16.200 --> 00:36:19.300
And you take it off of the build platform, and then you bend it.

00:36:19.300 --> 00:36:21.120
And you hear all of this breaking all along.

00:36:21.120 --> 00:36:22.560
Like you just completely snapped it apart.

00:36:22.560 --> 00:36:27.760
But all you've done is broken these really tiny bonds to keep the print as one object.

00:36:27.760 --> 00:36:31.720
And then there are these ball and socket joints and various other sorts of joints, and they work.

00:36:32.280 --> 00:36:37.040
And so you have this completely flexible fluid thing made out of rigid plastic that you print it all at once,

00:36:37.040 --> 00:36:40.060
all in one object that cannot come apart unless you break it.

00:36:40.060 --> 00:36:41.940
But it works like jewelry.

00:36:41.940 --> 00:36:44.400
And every time I see those, I think they're amazing.

00:36:44.400 --> 00:36:45.240
I just love them.

00:36:45.240 --> 00:36:46.180
Yeah, that's really cool.

00:36:46.180 --> 00:36:51.780
I have seen certain things that have been printed where you couldn't ever put it together because the way,

00:36:52.220 --> 00:36:55.880
you know, it could be 3D printed, but it couldn't be assembled from parts, basically,

00:36:55.880 --> 00:36:57.520
which I think is a really cool idea.

00:36:57.520 --> 00:37:03.460
Yeah, and that actually has a lot of application into some modern industrial stuff that we've been doing lately.

00:37:03.460 --> 00:37:08.860
Like aerospace, they have need for parts that you literally cannot machine or manufacture right now.

00:37:08.860 --> 00:37:15.760
But 3D printing can produce these things with extremely complex internal geometry that's used for like jet engine injection type stuff

00:37:15.760 --> 00:37:19.820
where you'll get improvements of, say, 20% in fuel economy or something like that.

00:37:20.260 --> 00:37:26.620
Just because you have this highly advanced structure that you can analyze really in depth and get some really neat economies out of.

00:37:26.620 --> 00:37:27.580
That's really cool.

00:37:27.580 --> 00:37:33.120
I mean, you could make a big dent in sort of the gas consumption of the world, which, you know, could make a big difference.

00:37:33.120 --> 00:37:33.560
That's awesome.

00:37:33.560 --> 00:37:36.600
Where do you think 3D printing is going?

00:37:36.600 --> 00:37:38.380
I mean, these are early days.

00:37:38.380 --> 00:37:48.660
Yeah, my expectation is that 3D printing will follow a trajectory somewhat similar to personal computing, say, 30 years ago,

00:37:48.660 --> 00:37:51.120
where right now we're at the very beginning.

00:37:51.120 --> 00:37:54.300
It feels like we've essentially invented the transistor, right?

00:37:54.300 --> 00:37:56.700
And it's going to be a little bit of time.

00:37:56.700 --> 00:37:58.400
There's a lot of big industries getting in.

00:37:58.400 --> 00:38:02.800
Department of Defense, aerospace, also very big because it enables them to do things they've never done before.

00:38:02.800 --> 00:38:05.000
Kind of similar to personal computing, obviously.

00:38:05.000 --> 00:38:09.160
And I think what will happen is a lot of these technologies will get cheaper and cheaper

00:38:09.160 --> 00:38:10.400
and they become more and more ubiquitous.

00:38:10.400 --> 00:38:17.260
But there will be kind of this inflection point where people realize that you don't have to manufacture things in giant warehouses

00:38:17.260 --> 00:38:21.460
and then distribute them all over the globe via a massive logistics network.

00:38:21.460 --> 00:38:26.820
Instead, what you'll do is you will create the objects you need at the point of use.

00:38:27.080 --> 00:38:33.580
Now, I don't necessarily follow some people in thinking that every person will have their own personal 3D printer to make them everything they ever dreamed.

00:38:33.580 --> 00:38:34.880
That would be pretty far out.

00:38:34.880 --> 00:38:40.880
But I think it's very reasonable to have sort of the Kinko's model where every neighborhood has a 3D printing bureau nearby

00:38:40.880 --> 00:38:44.240
where, you know, every couple, several weeks or what have you,

00:38:44.240 --> 00:38:46.540
when you have a need to produce something that's personalized

00:38:46.540 --> 00:38:50.560
or that comes through the sort of digital manufacturing environment,

00:38:51.300 --> 00:38:54.080
you'll send them a command, they'll print it, they'll say,

00:38:54.080 --> 00:38:57.300
hey, your thingamabob is ready, come pick it up, and you'll go pick it up.

00:38:57.300 --> 00:38:59.880
And I think we'll see that by and large all over the world

00:38:59.880 --> 00:39:04.980
because it's so much cheaper to just acquire the raw materials in place that you need

00:39:04.980 --> 00:39:06.660
and then assemble them intelligently

00:39:06.660 --> 00:39:12.240
rather than to drag raw materials all across the planet to a few focused manufacturing centers,

00:39:12.240 --> 00:39:15.720
build the object, and then redistribute them back out the opposite direction.

00:39:15.720 --> 00:39:17.780
Yeah, that's a really cool vision.

00:39:17.780 --> 00:39:19.720
And I think you're right.

00:39:19.980 --> 00:39:21.520
That sounds pretty amazing.

00:39:21.520 --> 00:39:23.960
You know, I've been reading some books lately,

00:39:23.960 --> 00:39:28.780
and I was talking to the authors of some, like, early, you know, not quite yet released books.

00:39:28.780 --> 00:39:32.120
And I'm like, do you have an electronic version that I could get?

00:39:32.120 --> 00:39:35.000
And, of course, you know, they sent me something I could put on my Kindle or whatever.

00:39:35.000 --> 00:39:38.640
And it was just really nice that a tree didn't have to be cut down,

00:39:38.640 --> 00:39:43.360
turned into paper, printed somewhere, and put on a truck and driven to my house.

00:39:43.360 --> 00:39:46.020
It was just like, poof, here it is, and now it's on my Kindle.

00:39:46.020 --> 00:39:49.280
But this is like that for everything, right?

00:39:49.340 --> 00:39:49.900
It's amazing.

00:39:49.900 --> 00:39:52.180
It seems realistic, though.

00:39:52.180 --> 00:39:52.940
Yeah.

00:39:52.940 --> 00:39:59.640
One of the other things that's kind of curious about this is most of us are familiar with mass-produced objects,

00:39:59.640 --> 00:40:03.820
because right now that's one of the most efficient things that we have is this mass production,

00:40:03.820 --> 00:40:04.940
which we've had for 100 years.

00:40:04.940 --> 00:40:08.940
You know, everybody has exactly the same, you know, parts to their car,

00:40:08.940 --> 00:40:11.040
because there's only so many manufactured these parts,

00:40:11.040 --> 00:40:12.820
and they're just mixed and matched in slightly different ways.

00:40:13.060 --> 00:40:20.900
But with this whole digital manufacturing thing, like, we have a print shop that we maintain here so that we can test our software for various reasons.

00:40:20.900 --> 00:40:25.780
But, you know, one of my interns will be looking at the printer and go,

00:40:25.900 --> 00:40:30.520
oh, you know, we're having somewhat inefficient cooling on this printer because of these various reasons.

00:40:30.520 --> 00:40:33.300
And could we fix the ducting on this?

00:40:33.300 --> 00:40:36.960
And we'll pull the ducting off, kind of look at it, bring up the model in a 3D modeler,

00:40:36.960 --> 00:40:41.400
manipulate some parameters, you know, open a gap a little bit, shorten some of the length, something like that,

00:40:41.400 --> 00:40:48.180
print it, and in, like, three or four hours, we've mounted a completely new piece of duct work that's more efficient at cooling or whatever.

00:40:48.560 --> 00:40:55.640
And, like, we just naturally want to highly customize everything we have to deal with the particular environment that we're in.

00:40:55.640 --> 00:41:00.700
And I think we'll see this interesting inversion where instead of having everything is mass produced,

00:41:00.700 --> 00:41:04.680
and we try to make everything the same so that it can deal with all of these mass produced items,

00:41:04.680 --> 00:41:11.240
we'll instead go to the opposite end where we have very intelligent tooling that can hyper-customize everything that we have.

00:41:11.240 --> 00:41:13.100
Yeah, that's really cool.

00:41:13.100 --> 00:41:21.720
And I think there's going to be a whole new set of sort of craftsmen that can do that customization for people rather than giant factories, right?

00:41:21.720 --> 00:41:22.820
Exactly.

00:41:22.820 --> 00:41:23.940
Awesome.

00:41:23.940 --> 00:41:27.460
So people want to get started with working with you guys for 3D printing.

00:41:27.460 --> 00:41:32.360
Maybe they want to set up a website, sell some models, and work with sort of B2C that way.

00:41:32.360 --> 00:41:33.140
Like, what do they do?

00:41:33.140 --> 00:41:35.940
Actually, they just reach out to us.

00:41:35.940 --> 00:41:38.980
We keep an email address, info at authentize.com.

00:41:38.980 --> 00:41:40.280
Reach out.

00:41:40.480 --> 00:41:47.400
We've had all kinds of people from graduate students who are just doing studies in 3D printing that need some data to help them in their studies,

00:41:47.400 --> 00:41:55.140
to businesses, Fortune 100 companies that want information on how they can use 3D printing to, you know, essentially mom and pop shops.

00:41:55.140 --> 00:42:02.000
We actually have a few shops that specialize, like highly specialized, like 3D printing sex toys, say.

00:42:02.000 --> 00:42:05.260
And they will reach out to us and say, can you help us out?

00:42:05.260 --> 00:42:09.140
And that's what we do is we help people get 3D printing working for them.

00:42:09.440 --> 00:42:09.980
Yeah, that's cool.

00:42:09.980 --> 00:42:14.200
I saw you just recently had done some kind of partnership with Autodesk.

00:42:14.200 --> 00:42:18.040
And those guys are obviously natural counterparts to what you guys are doing.

00:42:18.040 --> 00:42:18.860
Yeah.

00:42:18.860 --> 00:42:19.340
Yeah.

00:42:19.340 --> 00:42:24.180
We're working with Autodesk to, part of the difficulty in 3D printing is the tooling, right?

00:42:24.180 --> 00:42:27.180
You talked about new professionals that will do this design work.

00:42:27.720 --> 00:42:35.080
Ideally, we need to, you know, push all of this interesting, professional-grade tooling out to as many people as possible, make it smarter, make it easier.

00:42:35.080 --> 00:42:36.400
And Autodesk has some great tooling.

00:42:36.400 --> 00:42:43.080
And so we're working together with them to try to bring more of those tools to the masses so people can do better designs and make better stuff for everyone to print.

00:42:43.080 --> 00:42:43.960
Excellent.

00:42:43.960 --> 00:42:45.220
Yeah, the Autodesk guys are great.

00:42:45.220 --> 00:42:46.960
I've been out to their place.

00:42:46.960 --> 00:42:47.400
Very cool.

00:42:48.480 --> 00:42:50.440
How about your favorite editor?

00:42:50.440 --> 00:42:52.480
So if you're writing code, what do you write it in?

00:42:52.480 --> 00:42:54.160
I'm writing it in Vim.

00:42:54.160 --> 00:42:54.680
Vim.

00:42:54.680 --> 00:42:55.040
Okay.

00:42:55.040 --> 00:42:55.680
Right on.

00:42:55.680 --> 00:42:59.140
There's a ton of packages out on Python Package Index.

00:42:59.700 --> 00:43:04.780
What one do you think maybe people don't know about that you'd like to say, hey, be sure you check out this cool thing that's out there?

00:43:04.780 --> 00:43:07.300
Oh, this is going to sound so boring.

00:43:07.300 --> 00:43:11.020
There's a tool for sorting your Python imports.

00:43:11.020 --> 00:43:19.760
I'm really super weird in that long, long ago, I was involved in lots of flame wars about coding style.

00:43:20.140 --> 00:43:22.160
And I think they scarred me in some way.

00:43:22.160 --> 00:43:29.740
And so I actually harp on coding style a lot in my organization because in my mind, you read the thing 10 times more than you're going to write it.

00:43:29.740 --> 00:43:31.700
Maybe even more than that if your company survives.

00:43:31.700 --> 00:43:35.200
And so you should optimize for readability in your code.

00:43:35.200 --> 00:43:38.280
And so I actually like all of the imports to be sorted.

00:43:38.280 --> 00:43:39.740
I like parameters to be sorted.

00:43:39.740 --> 00:43:42.780
I like to build little tables out of white space and code.

00:43:42.780 --> 00:43:46.380
Anything that will make it more readable, more approachable is a good thing to me.

00:43:46.380 --> 00:43:50.040
So like little tools like that that will sort your imports so that they're alphabetical.

00:43:50.040 --> 00:43:50.860
Awesome.

00:43:50.860 --> 00:43:51.500
Awesome.

00:43:51.500 --> 00:43:52.240
So what's the tool?

00:43:52.240 --> 00:43:54.160
Oh, gosh.

00:43:54.160 --> 00:43:56.460
I pi sort something like that.

00:43:56.460 --> 00:43:57.040
I pi sort.

00:43:57.040 --> 00:43:57.420
I don't know.

00:43:57.420 --> 00:44:01.600
It's one of those things that it's like you install it and you stick it in your git hook and then you never think about it.

00:44:01.600 --> 00:44:02.040
Yeah, of course.

00:44:02.040 --> 00:44:04.360
Very nice.

00:44:04.360 --> 00:44:04.720
Okay.

00:44:04.720 --> 00:44:05.560
That's awesome.

00:44:05.560 --> 00:44:11.880
Anything else that we haven't talked about you want to let people know about or some sort of call to action?

00:44:12.180 --> 00:44:16.720
If you have not given Python 3 a try, try it.

00:44:16.720 --> 00:44:29.540
Like I keep going back to a lot of us will remember our original experience with Python and it feels a lot like that XKCD comic where it's like import anti-gravity and you're just like, come join us up here.

00:44:29.540 --> 00:44:30.140
It's amazing.

00:44:30.520 --> 00:44:40.760
My feeling for Python 3 now is that it has that same sort of gap of joy to program to Python 2 as Python 2 did to everything else back then.

00:44:40.760 --> 00:44:42.960
So like if you have not tried it, try it.

00:44:42.960 --> 00:44:51.160
Especially like say asyncio or, you know, any of some of the newer language developments like 3.3, 3.4, that sort of area.

00:44:51.160 --> 00:44:52.220
Look it over.

00:44:52.220 --> 00:44:52.880
Try it out.

00:44:53.220 --> 00:44:54.820
It will be very hard for you to let go.

00:44:54.820 --> 00:44:56.060
And that's part of my point.

00:44:56.060 --> 00:44:57.800
That's awesome.

00:44:57.800 --> 00:44:58.120
Yeah.

00:44:58.120 --> 00:45:00.480
And then the whole type annotation thing is coming.

00:45:00.480 --> 00:45:03.820
That's going to be a pretty interesting conversation in the community, I think.

00:45:03.820 --> 00:45:05.040
Oh, yeah.

00:45:05.040 --> 00:45:05.860
Yeah, I agree.

00:45:05.860 --> 00:45:09.940
I'm watching that whole thing and I'm really excited for what it will mean.

00:45:09.940 --> 00:45:12.040
I don't even know, which is part of what makes it so exciting.

00:45:12.040 --> 00:45:12.900
Yeah, that's awesome.

00:45:13.040 --> 00:45:23.380
And just, you know, to follow up on your XKCD, if anybody's not familiar with this cartoon, open up a Python REPL and type import antigravity.

00:45:23.380 --> 00:45:25.460
It's awesome.

00:45:25.460 --> 00:45:27.400
Eli, thanks for being on the show.

00:45:27.400 --> 00:45:28.380
It's been really interesting.

00:45:28.380 --> 00:45:29.780
Yeah, thanks for having me.

00:45:29.780 --> 00:45:30.660
Yeah, you bet.

00:45:30.660 --> 00:45:31.120
Talk to you later.

00:45:31.120 --> 00:45:34.780
This has been another episode of Talk Python To Me.

00:45:34.780 --> 00:45:39.700
Today's guest was Eli Ribble, and this episode has been sponsored by Hired and CodeChip.

00:45:39.700 --> 00:45:41.760
Thank you guys for supporting the show.

00:45:42.500 --> 00:45:44.460
Hired wants to help you find your next big thing.

00:45:44.460 --> 00:45:53.480
Visit Hired.com slash Talk Python To Me and get five or more offers with salary and equity presented right up front and a special listener signing bonus of $4,000.

00:45:53.480 --> 00:45:59.800
Check out CodeChip at CodeChip.com and thank them via Twitter where they're at CodeChip.

00:45:59.800 --> 00:46:01.760
Don't forget the discount code for listeners.

00:46:01.760 --> 00:46:02.540
It's easy.

00:46:02.540 --> 00:46:04.960
Talk Python, all caps, no spaces.

00:46:04.960 --> 00:46:11.620
You can find the links from today's show at talkpython.fm/episodes slash show slash 23.

00:46:11.960 --> 00:46:13.820
Be sure to subscribe to the show.

00:46:13.820 --> 00:46:16.100
Open your favorite podcatcher and search for Python.

00:46:16.100 --> 00:46:17.800
We should be right at the top.

00:46:17.800 --> 00:46:21.980
You can also find the iTunes and direct RSS feeds in the footer on the website.

00:46:21.980 --> 00:46:27.180
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

00:46:27.520 --> 00:46:29.520
You can hear the entire song on our website.

00:46:29.520 --> 00:46:31.560
This is your host, Michael Kennedy.

00:46:31.560 --> 00:46:32.480
Thanks for listening.

00:46:32.480 --> 00:46:34.680
Smix, take us out of here.

00:46:34.680 --> 00:46:36.620
Stating with my voice.

00:46:36.620 --> 00:46:38.400
There's no norm that I can feel within.

00:46:38.400 --> 00:46:39.620
Having been sleeping.

00:46:39.620 --> 00:46:41.240
I've been using lots of rest.

00:46:41.240 --> 00:46:44.080
I'll pass the mic back to who rocked it best.

00:46:44.080 --> 00:46:56.400
I'll pass the mic back to who rocked it best.

00:46:56.400 --> 00:46:56.900
you

