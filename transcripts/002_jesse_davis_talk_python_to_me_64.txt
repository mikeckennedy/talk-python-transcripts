00:00:00 Talk Python To Me. Episode number two with guest Jesse Davis recorded Sunday, April 5th, 2015.

00:00:09 Hello and welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem, and the personalities. This is your

00:00:45 host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy and keep up with the show and listen

00:00:50 to past episodes at talkpythontome.com. This episode, we'll be talking to Jesse Davis from

00:00:56 MongoDB about PyMongo and of course, MongoDB. Before we get to the interview, I have a quick

00:01:02 message to share. Since we launched a week ago, the response has been overwhelming. I've received many

00:01:09 feedback. I want to thank everyone who contacted the show. However, I could use your help to make

00:01:15 sure the show continues to grow and thrive. If you know someone who would be interested in listening to

00:01:19 the show, please send them a link to talkpythontome.com or share this on Twitter or Facebook. Do you know of

00:01:26 someone who would make a great guest or have a great show topic in mind? Send me a note and I'll set it up.

00:01:30 In other excellent news, we have a show sponsor. I want to thank Python Gear from pythongear.com for

00:01:36 sponsoring this episode and you'll hear more about them later. If you'd like to sponsor a future episode,

00:01:42 please contact us at talkpythontome.com slash sponsor. Now onto the show.

00:01:48 Let me introduce Jesse. Jesse Davis is a staff engineer at MongoDB in New York City. He works

00:01:56 on the MongoDB driver team and develops PyMongo and the MongoC driver. He's the author of the async

00:02:04 MongoDB driver called Motor and he contributes to Tornado and AsyncIO.

00:02:09 Jesse, welcome to the show.

00:02:11 Thanks, Michael.

00:02:13 It's really great to have you here on the show. And, you know, we've known each other

00:02:17 sort of as acquaintances for a couple of years. As you know, I'm a MongoDB master,

00:02:23 which is kind of like an MVP community expert program you guys run. So yearly, we'll come up there and we'll have some really interesting conversations.

00:02:31 And we've always enjoyed the sessions where you come down and talk to sort of the external experts about working with MongoDB from Python.

00:02:40 Yeah, we've been doing those about once a year and we've got the next one coming up in a month. And I really look forward to those too. We get some of our best ideas. It definitely creates a year's worth of ideas, if not more, to kind of mull over and implement after each one of those sessions.

00:02:58 Yeah, those are really fantastic meetings. I really, really enjoy them. So I've seen that you've done a ton of stuff with Python. You know, before we get into the details of MongoDB and PyMongo and all that, you know, how'd you get started?

00:03:10 So it's a funny story, really, as they say. I began when I graduated from Oberlin College 15 years ago, I was a C++ guy, to the extent that I knew any programming language, really, particularly well at the age of 22.

00:03:29 I thought that I was a C++ and graphics guy.

00:03:59 flight patterns.

00:04:00 Wow, that sounds like a really interesting thing to jump into.

00:04:03 It was a great gig and I did really, really poorly at it. So I spent about two years there and realized that I wasn't yet a grown-up. I was really screwing up my life and I was a bad software engineer. So I quit the job and went out into the world to try to get my head straight. And I spent a summer biking through France.

00:04:29 And then I spent a year at a Zen monastery in Southern California. And when I checked back with Austin Digital whether they wanted me to come back to work for them, they said no, because I had not proven myself there.

00:04:44 So I came to New York to continue my Zen study with a place called the Village Zendo here and to start being a layman and a software professional again. And there were no C++ jobs in New York at the time.

00:05:02 What kind of jobs were there?

00:05:03 What kind of jobs were there?

00:05:04 Well, this was fall of 2004. So the whole market was kind of in bad shape. There had been the NASDAQ crash in July of 2001 and then there was September 11th. And New York hadn't recovered from that yet. So all of the C++ people from all of the banks were still unemployed and I couldn't compete with them.

00:05:30 So what I did find was an educational startup called Wireless Generation in Brooklyn. In recent years, it's become Amplify Education. And they were willing to take a shot at me, even though the job was in Python and Oracle. And I didn't know either of those.

00:05:53 That's a long ways from graphics and C++.

00:05:56 Yeah, it was a huge leap. And it was pretty tough, but I had good mentors and I started using Python there.

00:06:06 That's excellent. So then you carried on digging into Python and I saw that you have a ton of open source projects on GitHub that are successful or contribute to them.

00:06:19 And somehow you found your way over to MongoDB from there, huh?

00:06:22 Yeah. So after a few years working for Wireless Generation, I wanted to get a little more breadth. And I also wanted to make sure that I didn't become so senior that I couldn't continue to program, which was a pressure that I experienced there to move into management.

00:06:41 That's kind of the curse of success for some programmers is, you know, you're really good at this. Stop doing it now. Go manage people, right?

00:06:47 Yeah, exactly. And so to jump ahead a little bit, now at MongoDB, we've figured out how to do that by creating this whole separate track of staff engineers, which is the track I'm on now.

00:06:59 Oh, that's excellent.

00:07:29 Data storage layer for applications like that.

00:07:32 Even though MongoDB was brand new at the time, like I started using it at version like 0.8 or something.

00:07:38 Yeah, is this like 2009, 2010 timeframe or something like that?

00:07:42 Yeah, exactly.

00:07:44 And it was such a cool product.

00:07:48 And within the New York tech startup scene, it was such a rarity as a big infrastructure systems project in a New York City startup that when I finally got tired of freelancing and I wanted to settle down and make a substantial contribution to a single product, I called Elliot and I said, I'm ready to come in from the cold.

00:08:12 And he said, great.

00:08:12 That's excellent.

00:08:13 That's Elliot Horowitz, who's the CTO of MongoDB, right?

00:08:16 Yeah, exactly.

00:08:18 Yeah.

00:08:18 So I suspect most people who are listening to this show have heard of MongoDB, although maybe not everybody.

00:08:26 And they might maybe just know it as a buzzword.

00:08:29 Can you give us the quick elevator pitch of what MongoDB is?

00:08:32 Sure.

00:08:32 Sure.

00:08:32 So it stores your data.

00:08:36 It's a database.

00:08:37 And it stores your data not in rows and columns, but in a non-relational document format.

00:08:45 And the format is called BSON, which is a binary JSON format.

00:08:50 So if you know JSON, MongoDB's data format is very familiar.

00:08:56 It consists of objects, which have a set of key value pairs.

00:09:00 And these documents can also contain arrays, strings, numbers, dates, and about a dozen primitive data types.

00:09:11 MongoDB lets you index and query this kind of object-oriented data in a very rich way.

00:09:20 So among the document databases that we compete with, we have a particular advantage when it comes to our ability to declare multiple indexes on a collection,

00:09:36 the sophistication of our query language and our statistical aggregation capabilities,

00:09:42 and our ability to let you do very complex update operations where you can add a member to a set within a document

00:09:52 or do math on numbers within those documents.

00:09:56 One of the things that I find people coming from a relational database world feel like,

00:10:02 a lot of times they're like, well, it's really cool you can have these kind of hierarchical structures

00:10:06 that more closely match the way your objects look in memory in your program.

00:10:12 But you probably can't query properly deep down with this stuff.

00:10:16 So if I've got, let's take a super simple example, like a bookstore, and the bookstore has books and the books have reviews as nested, like a nested array.

00:10:25 Well, what if I just want to know all the books that have five-star reviews?

00:10:29 Could I query that?

00:10:31 Right, exactly.

00:10:32 And we do provide that, and that distinguishes us somewhat from the much simpler sort of key value store

00:10:41 or other simplified document database product.

00:10:45 Yeah, definitely.

00:10:47 And I think, you know, of all the NoSQL databases, MongoDB is one of the few that would reasonably be something you could consider

00:10:55 as your standard general purpose database, not just some kind of high-scale special use case.

00:11:01 Yeah, that's exactly right.

00:11:02 And MongoDB is not the best answer to every single question, obviously.

00:11:07 There is data that is naturally relational, and then there is data that should naturally be put in some other simpler,

00:11:17 more specialized NoSQL database.

00:11:19 But MongoDB is very much targeted to be the best answer to many questions

00:11:24 questions and a pretty good answer to an even broader set of questions.

00:11:28 So you can use it as your default database in the way that you might have in the past been used to,

00:11:35 MySQL or Postgres being a pretty good answer to many questions and the best answer to many others.

00:11:42 This episode is sponsored by Python Gear.

00:11:45 We know you're a huge fan of Python, and Python Gear has an excellent way to put your enthusiasm for Python on display.

00:11:52 Visit pythongear.com and pick up Python or Django t-shirts, stickers, and more.

00:11:57 Hand screen printed on American apparel, these are shirts that are made to last and are very comfortable.

00:12:04 What's more, a portion of all sales will benefit either the Python Software Foundation

00:12:08 or the Django Software Foundation.

00:12:10 Tell Python Gear thank you for sponsoring this podcast by visiting their site at pythongear.com and ordering a t-shirt.

00:12:17 They're also helping us with a small contest.

00:12:20 We're giving away a free t-shirt to one lucky listener.

00:12:23 Visit talkpythontimi.com, click on Friends of the Show, enter your email address, and we'll pick a winner before the next episode.

00:12:31 Now, back to the show.

00:12:32 So, I've got MongoDB, and by the way, in case people didn't know, it's open source, you can go to GitHub and check it out or see the progress.

00:12:42 I've gotten it, but probably I downloaded it from mongodb.org, and it's running.

00:12:48 Now I've got my Python app.

00:12:49 What do I do?

00:12:50 Right.

00:12:50 So, MongoDB's network protocol is called the MongoDB Wire Protocol, and it's a basic TCP protocol.

00:13:01 So, you need something that knows how to talk that protocol and knows how to convert between your Python data structures,

00:13:10 your dicts and lists and strings and numbers, to BSON and back.

00:13:15 So, you need a driver.

00:13:16 And the standard driver for MongoDB is called PyMongo, and you install it from PyPI via pip, install PyMongo.

00:13:26 The current version is about to be 3.0, which we'll release in just about a week,

00:13:34 which is very exciting.

00:13:35 Yeah, that's big news.

00:13:37 Like, you guys have been trying to have a sort of a major unification of all the different drivers for the different languages.

00:13:44 Is this part of that effort?

00:13:45 Yeah, that's exactly right.

00:13:46 So, PyMongo 3 has big behavioral and API improvements and standardizations,

00:13:52 and that those changes are matched by the MongoDB Ruby driver 2.0, the C driver 1.2,

00:14:02 the nose driver 2.0, and so on.

00:14:04 And much more than ever before, we are all converging on the same set of behaviors

00:14:11 and the same set of APIs.

00:14:13 That's really cool.

00:14:14 One of the real benefits of Mongo, I think, is it has great support for so many languages.

00:14:18 So, if you choose your database, you're like, oh, wait, maybe this is better from, you know,

00:14:22 Java for some reason.

00:14:23 It still has a good data access story.

00:14:26 So, that's fantastic.

00:14:27 That's getting even better.

00:14:28 Yeah, right.

00:14:29 That's exactly right.

00:14:30 So, we have drivers in 10 programming languages, and plus, even if you're using something weird like R or Haskell or Erlang,

00:14:41 there's something out there in the community for you because writing a basic driver is actually fairly easy.

00:14:46 We're really focused on making sure that each of these drivers feels right to experts in that language.

00:14:54 So, PyMongo is very Pythonic, and it's written by Python experts, and its style and its documentation and so on

00:15:02 are all very Python-y while at the same time balancing that with some degree of consistency

00:15:07 with the nine other programming languages that we support.

00:15:10 Yeah, there's got to be some interesting tension there.

00:15:13 Huge, huge tension.

00:15:14 It's the toughest problem that we face, and we are just in the last year or two

00:15:19 really figuring out good bits to tackle that and to make those decisions correctly.

00:15:24 Yeah, cool.

00:15:25 So, you play a pretty big part in PyMongo, right?

00:15:28 Yeah, I've been Bernie Hackett.

00:15:31 My boss in Palo Alto is the PyMongo developer and maintainer, and I've been assisting him for the last three years

00:15:40 as his second-in-command.

00:15:42 And my main contributions to the driver are its concurrency design, its implementation of distributed systems type problem solving,

00:15:55 and the connection pool.

00:15:58 And with the 3.0 release, that's actually kind of done for the moment.

00:16:06 And so I'm putting a lot of that work to rest now and moving on to become the primary maintainer of the C driver for MongoDB

00:16:16 so that that part of the team can move into the kernel team and make contributions there.

00:16:22 Oh, that's excellent.

00:16:23 And that's even a little bit back to your roots from Austin, in some ways, I guess, right, with the C++ story.

00:16:30 Yeah, exactly.

00:16:31 Parts of my brain that has been idle for a decade are coming back online,

00:16:37 and it's a really fun feeling.

00:16:39 I know it is.

00:16:40 Yeah, yeah.

00:16:41 If audience members, if you've been programming Python for 10 years straight,

00:16:46 like I have, I really can't recommend enough learning a very different programming language or reviving one.

00:16:53 It's incredibly satisfying.

00:16:55 Yeah, and gives you interesting problem solving skills that you don't necessarily develop if you stay in just one language.

00:17:03 So that's great.

00:17:03 Yeah.

00:17:04 Now, there's a bunch of ways to talk to MongoDB, even just from Python, right?

00:17:08 So there's PyMongo.

00:17:10 What else is there?

00:17:11 So PyMongo is the general purpose driver, and it's the most featureful, the most standard,

00:17:18 the best maintained, but it's not optimized for some specialized use cases.

00:17:26 And you can think of these as CPU-bound versus I.O.-bound use cases.

00:17:33 Right, okay.

00:17:34 So for the I.O.-bound, cases where you've got a web application that has a huge number of client connections,

00:17:43 but they're often kind of idle or sleepy connections, like if you're implementing a chat server

00:17:50 or something with web sockets, you want to use an async framework in Python,

00:17:56 like Tornado or Twisted or in the Python 3.4 standard library, we've got async.io now.

00:18:04 Yeah, that's a cool new feature.

00:18:06 Right, so these are awesome async frameworks, and they solve that problem brilliantly,

00:18:11 but they've got a gigantic compatibility issue.

00:18:16 none of the existing libraries work with them.

00:18:18 None of the existing sort of outside MongoDB libraries don't work with them,

00:18:24 or like PyMongo itself doesn't work with them, or how do you mean?

00:18:27 Well, I mean both of those.

00:18:28 So if you've got basically a driver for any database that's not written specifically for one of these async frameworks,

00:18:36 then it won't work with that async framework.

00:18:41 So you need a specialized database driver for Tornado and MySQL.

00:18:44 You need a specialized database driver for Tornado and Postgres.

00:18:49 Right.

00:18:51 And you need a specialized driver for Tornado and MongoDB.

00:18:55 So I wrote that over the last few years, and it's called Motor, because it's taking the beginning of Mongo and Tornado.

00:19:02 Excellent.

00:19:03 Right.

00:19:04 Plus it's a cool name, and somehow it was not yet taken on PyPI.

00:19:08 So Motor is the now standard official async driver for MongoDB and Tornado,

00:19:15 and over the next year I'm going to be expanding it out to cover async.io next,

00:19:21 and then eventually twist it as well, so that it will just integrate with whatever you're using right now.

00:19:26 Nice.

00:19:27 And does that work with Python 3 and 2, or is that sort of a 2 thing for now,

00:19:30 or what's the story there?

00:19:32 That will work with Python 2.6 plus, so 2.6, 2.7, 3.3, 3.4, 3.5, when 3.5 is out.

00:19:41 So how does that work with different implementations, like PyPI, for example?

00:19:45 Sure.

00:19:46 In the past, Motor and PyPI didn't work together very well, but that was about a year ago that I last personally tested them.

00:19:53 It was correct, but it was slow, due to some very specific details about PyPI.

00:20:01 In recent months, somebody that I didn't know posted benchmarks that showed that Tornado, Motor, and PyPI were actually blazingly fast,

00:20:12 but I haven't personally reproduced that, so at the moment it's just kind of a hopeful sign

00:20:18 rather than something that I would officially endorse.

00:20:20 Sure.

00:20:21 That's really good news, though.

00:20:22 It looks like PyPI is moving on and has a lot of activity there, so that's really cool.

00:20:26 I agree.

00:20:27 Yeah.

00:20:27 I've also heard of something called Mon Area.

00:20:29 What's that?

00:20:30 Right.

00:20:31 So we've got this other branch of specialization.

00:20:34 So the three categories that I think of are general purpose, PyO bound, and that's for Motor,

00:20:41 and then there's CPU bound, and that's what Monary is for.

00:20:45 Monary is a NumPy driver for MongoDB.

00:20:50 Oh, that's interesting.

00:20:51 Wow.

00:20:52 Isn't it?

00:20:53 I found out about it a few years ago.

00:20:55 It was written by a quantitative analyst named David Beach.

00:21:00 He needed it for something, some specific financial application that he was doing.

00:21:05 And he noticed that if you stream BSON data through PyMongo and then into NumPy from there,

00:21:13 it's pretty slow.

00:21:15 And your data conversion is typically your bottleneck.

00:21:18 MongoDB is fast.

00:21:20 NumPy is fast.

00:21:21 But converting each number from one data format to the next is very expensive,

00:21:27 and it's a lot of wasted work.

00:21:29 So he wrote a little bit of C code, which queries MongoDB using the C driver rather than PyMongo,

00:21:38 converts the BSON data directly into NumPy arrays without passing through any Python data structure,

00:21:46 and then hands you giant buffers of numbers that it got from MongoDB.

00:21:52 And then you can use NumPy's incredibly fast statistical methods on that data.

00:21:59 That's really fantastic.

00:22:00 So if maybe you're storing a bunch of data in Mongo for big data on numerical type stuff,

00:22:06 this would be the thing for you from Python.

00:22:09 Exactly.

00:22:10 And that's a pretty common use case among financial institutions.

00:22:14 There's also a lot of universities doing big bioinformatics with MongoDB.

00:22:20 And there's generally a lot of use within the scientific community for storing numeric data in MongoDB.

00:22:28 Since NumPy has such a rich set of statistical routines that you can just take off the shelf,

00:22:37 being able to go between the two in Python incredibly fast is an awesome feature.

00:22:44 So Monary can do upwards of a million queries per second on commodity hardware.

00:22:50 And, or query upwards of a million documents per second.

00:22:55 That's amazing.

00:22:56 We've been adding features to it over the years.

00:23:00 We had a couple of interns last summer, Matt Cotter and Kyle Suarez.

00:23:04 And now a new hire who's working for me, Anna Hurley, is adding more and more features to Monary every month.

00:23:13 So it's becoming better documented.

00:23:15 It's now read-write.

00:23:17 So you can insert some NumPy arrays into MongoDB.

00:23:22 And it's similarly optimized along that path.

00:23:24 And we're adding SSL and authentication, which financial institutions will probably want if they're analyzing financial data.

00:23:32 And that's kind of, that fills in the other portion of the environment where you're doing single-threaded CPU-bound calculations on numeric data within MongoDB.

00:23:48 Yeah, that really does open up the whole science story for MongoDB a little bit more from Python anyway.

00:23:53 That's really cool.

00:23:54 So what surprises you most about what you see people doing with Mongo from Python or even with PyMongo specifically?

00:24:01 What most often surprises me is there are certain mistakes that are incredibly common.

00:24:09 And I wish we could figure out how to stamp them out.

00:24:11 And the main mistake that I see people make is that they create a new Mongo client class instance for every HTTP request.

00:24:23 And so they pay the price of TCP setup, very often SSL and authentication setup, and then the TCP slow start algorithm.

00:24:35 All of this incredible overhead involved in opening a socket.

00:24:40 And then they do one query and shut it all down.

00:24:44 And when they say, oh, and they defeat connection pooling as well.

00:24:49 And there's this sort of strange resistance to just creating a single global variable, which is the Mongo client.

00:24:58 And I don't understand.

00:24:59 I think they're coming from Java, where it's frowned upon to have one module-level global variable.

00:25:05 But it means that among Python programmers who make this mistake, which is a huge number of people, their throughput is probably a third or a quarter or a fifth of what they should be seeing.

00:25:19 Wow, that's amazing.

00:25:21 And it's easy to fix.

00:25:23 I don't understand apps to persuade people.

00:25:24 It's incredibly easy to fix.

00:25:26 That's the thing, right?

00:25:27 Right.

00:25:27 Doing it correctly is easier than doing it wrong, and yet doing it wrong is very common.

00:25:31 Yeah.

00:25:32 Well, hopefully people out there listening will go make a global Mongo client.

00:25:37 I hope so.

00:25:38 And we're also adding a best practices document to the PyMongo documentation in the next release that I hope will further dissuade people from making this error.

00:25:48 Yeah, that'd be great.

00:25:49 Almost would be cool to have a list of, like, these are the top five worst things you could do that we see out in the wild, so don't do them.

00:25:55 You know, something like that would be nice to put up somewhere.

00:25:57 That's a good idea, although honestly, it's really only top one.

00:26:01 Like, if you don't do that, you're probably doing a good job.

00:26:06 Excellent.

00:26:06 So you guys just had a big release as well.

00:26:09 You've kind of changed the entire underlying file system with something called WireTiger, and you've released version 3.0.

00:26:15 What's the quick rundown of that?

00:26:17 That's pretty exciting.

00:26:18 Right.

00:26:19 So it's not the default at the moment.

00:26:21 It's opt-in.

00:26:23 But with MongoDB 3.0, we made the option available to swap our old storage engine with WireTiger.

00:26:32 And the performance characteristics are still a little complex, so I'm not going to make any inexpert pronouncements on that.

00:26:41 Sure.

00:26:42 But for the large number of use cases, WireTiger seems to be much, much higher performance, and it especially has much better concurrency.

00:26:54 So if you're doing a lot of simultaneous writes on certain kinds of hardware, you should see a lot better throughput with WireTiger.

00:27:02 So it's really exciting.

00:27:04 And we also acquired that company.

00:27:07 It was our first acquisition so that we could...

00:27:09 The WireTiger open source project continues, but it means that we have that expertise in-house to make sure that WireTiger and MongoDB work perfectly together.

00:27:19 That's right.

00:27:20 They were from Berkeley DB or something like that originally, right?

00:27:23 I think a lot of the WireTiger people were among the Berkeley DB developers, yes.

00:27:29 Yeah, excellent.

00:27:29 You have some opinions on editors, right?

00:27:32 Like Vim versus PyCharm.

00:27:34 What are your thoughts there?

00:27:36 Yeah.

00:27:37 So in recent years, I've spent a lot of time mentoring young people or just working together with a lot of junior developers.

00:27:46 And what I particularly noticed is that everybody uses Vim for everything.

00:27:50 And it's kind of sad to watch because I say, go find this method.

00:27:57 And then I sort of have to sit around for a little bit, drinking tea and watching them grepping their files and doing like an incremental search through each file with Vim until, you know, they're searching for like death space, create collection or something in order to find this method.

00:28:16 And it's just sad.

00:28:23 And when people watch me, it's just, you know, this isn't bragging.

00:28:30 It's just, if you use the right tool for the job, you can leap around really easily.

00:28:36 And it's not just navigation.

00:28:40 It's for huge search and replace jobs.

00:28:43 PyCharm has all of these modes and all of these wonderful ways of breaking down big code change tasks to make sure that you complete them correctly.

00:28:55 Using a visual debugger is also completely invaluable.

00:28:58 Like when I see somebody say, I have this bug.

00:29:02 And I say, well, what if you try it?

00:29:03 And they say, well, I added 100 print statements.

00:29:05 I know that something's wrong.

00:29:07 And invariably, even though they've spent hours on it, I say, well, let's get it into PyCharm.

00:29:14 And I use a couple of breakpoints and a few watchpoints.

00:29:18 And we find it because that's what a debugger is for.

00:29:22 That's right.

00:29:23 A picture is worth a thousand words and you can kind of say the same about a visual debugger, right?

00:29:27 Yeah, exactly.

00:29:28 You don't have to ask via a print statement, is this what I expect?

00:29:33 Oh, it is.

00:29:34 Okay.

00:29:34 Well, is this what I expect?

00:29:35 Oh, it is.

00:29:36 Right.

00:29:37 You just have everything displayed for you and you can immediately see what it is about the code that isn't matching your expectations.

00:29:44 Yeah, that's awesome.

00:29:45 I totally agree with you.

00:29:46 And I'm a big fan of PyCharm as well.

00:29:48 I use it for all my Python work.

00:29:50 And you can just hit like shift two times and type something and it'll just take you to a file or to a method or to a variable.

00:29:57 It's fantastic.

00:29:58 Yeah, I agree.

00:30:00 It also shows you your unused imports and it checks your style while you go.

00:30:05 So you start making that error as well.

00:30:06 Yeah, you're sort of PEP 8 compliant straight away.

00:30:09 Exactly.

00:30:10 Awesome.

00:30:12 All right.

00:30:13 Well, let me ask you one more question.

00:30:15 So out there on PyPI, there's tons and tons, you know, 65,000, 56,000, something like that packages.

00:30:22 There's some great ones out there.

00:30:24 Do you have any favorites?

00:30:25 PyMongo and Motor maybe, huh?

00:30:27 Yeah.

00:30:29 PyMongo is a great package.

00:30:31 It's one of the most popular.

00:30:32 It's one of the most popular.

00:30:32 And Motor is a fun little project written by some smart guy somewhere.

00:30:38 I wonder who that was.

00:30:41 I'm also a big fan.

00:30:42 And so another package I wrote that I'm very fond of is called Toro.

00:30:47 It's T-O-R-O.

00:30:49 And it's a set of things that are like locks, queues, conditions, event variables.

00:30:56 But it's not for multi-threading.

00:30:59 It's for Tornado coroutines.

00:31:01 Oh, okay.

00:31:03 So it kind of extends the analogy between coroutines and threads.

00:31:07 And it makes it possible for your asynchronous coroutines, which are optimized for I-O-bound applications using something like Tornado.

00:31:17 It lets them coordinate using the same kinds of patterns you're used to with threads.

00:31:23 So you can make consumer-producer coroutines using the exact same pattern as you're used to for producer and consumer threads.

00:31:32 I'm working with Tornado's author, Ben Darnell, to contribute Toro piece-by-piece into Tornado so that Tornado will have those features built in with Tornado 4.2.

00:31:47 It has nothing to do with MongoDB.

00:31:50 I think it's one of the things I like about it is that it's just this separate project that I kind of use recreationally.

00:31:56 And it's also just got a lot of really fun patterns that it's fun to think about.

00:32:02 Yeah, that's really cool.

00:32:03 You know, that kind of programming, trying to coordinate asynchronous coroutines, sounds like a really interesting sort of problem or puzzle to solve, you know?

00:32:12 Right.

00:32:13 And a lot of those questions have already been answered for threads.

00:32:16 So if you have the same primitives or if you have analogous primitives to use with coroutines, then you can use the same answers that people have developed for threads for the last few decades.

00:32:28 Fantastic.

00:32:28 So, yeah, people should check out Toro.

00:32:30 Very cool.

00:32:30 People have been listening to us talk and rave about MongoDB.

00:32:33 And in case you guys don't know, I'm a huge fan of MongoDB as well and use it for many projects.

00:32:38 If people are excited, they want to get started, what do they need to do?

00:32:42 So you can pip install PyMongo and then you can go to mongodb.org and download the MongoDB server.

00:32:50 It's among other awesome things about MongoDB.

00:32:54 You install it by untarring it and then starting it, period.

00:32:59 And if you want to learn more, the PyMongo documentation online at api.mongodb.org slash python has a complete tutorial for you.

00:33:09 And if you want to go a little deeper, there's an excellent online course called M101P.

00:33:16 So that's MongoDB 101 for Python.

00:33:19 And the next section of that class starts on May 26th, I think.

00:33:24 Excellent.

00:33:25 And is that education.mongodb.org?

00:33:29 I forget the URL.

00:33:30 Yeah, that's correct.

00:33:31 Yep, exactly.

00:33:32 Excellent.

00:33:33 Okay, well, is there anything else you want to sort of give a shout out to or get people's attention focused on?

00:33:37 I'm just really excited to be on this podcast.

00:33:40 And I think that this podcast is excellent.

00:33:43 And I'm looking forward to listening to the next episodes while I'm on the subway.

00:33:48 Excellent.

00:33:50 Thank you, Jesse.

00:33:50 It's been a really great conversation.

00:33:52 And I think people are going to be super interested in this stuff.

00:33:55 It's good.

00:33:55 MongoDB is such a fun project to work with.

00:33:58 When I was working with relational databases, I always felt like, oh, there's this sort of database and it's a necessary evil.

00:34:03 And it's kind of resisting what I'm trying to build in my app.

00:34:06 And you switched to Mongo and it's just sort of frictionless design and evolution in your app.

00:34:10 And so thanks for all your work on making that a possibility.

00:34:14 Thanks so much, Michael.

00:34:15 You bet.

00:34:16 Talk to you later.

00:34:16 Bye.

00:34:17 This has been another episode of Talk Python To Me.

00:34:23 I want to thank our sponsor, Python Gear, for making this show possible.

00:34:27 Please visit pythongear.com, get an awesome T-shirt or sticker, and let them know you heard about them on Talk Python To Me.

00:34:34 Smix, take us out of here.

00:34:36 Bye.

00:34:58 Thank you.

