WEBVTT

00:00:00.001 --> 00:00:03.760
The tables have turned, and this time I'm the guest and you all are the hosts.

00:00:03.760 --> 00:00:09.240
I get tons of questions over email and Twitter asking me about my thoughts on various trends,

00:00:09.240 --> 00:00:14.760
tools, and behind-the-scenes questions around Talk Python. So I've enlisted two listeners who

00:00:14.760 --> 00:00:19.220
are up for hosting a conversation and taking questions from y'all. Thank you to Patrick

00:00:19.220 --> 00:00:23.840
Lobiel and Kim VanWijk, who guest-hosted this episode, where I answer a bunch of audience

00:00:23.840 --> 00:00:31.660
questions in this Ask Me Anything. This is Talk Python To Me, episode 310, recorded March 31st, 2021.

00:00:31.660 --> 00:00:49.820
Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the ecosystem,

00:00:49.820 --> 00:00:54.040
and the personalities. This is your host, Michael Kennedy. Follow me on Twitter, where I'm

00:00:54.040 --> 00:00:58.500
at mkennedy, and keep up with the show and listen to past episodes at talkpython.fm,

00:00:58.500 --> 00:01:05.180
and follow the show on Twitter via at Talk Python. This episode is sponsored by OutSystems and us

00:01:05.180 --> 00:01:09.540
over at Talk Python Training. OutSystems is a new sponsor with a really cool product,

00:01:09.540 --> 00:01:13.880
so please check it out with the link in the podcast player show notes. We'll be giving away

00:01:13.880 --> 00:01:19.760
five tickets to attend PyCon US 2021. This conference is one of the primary sources of

00:01:19.760 --> 00:01:25.940
funding for the PSF, and it's going to be held May 14th to 15th online. And because it's online this

00:01:25.940 --> 00:01:30.320
year, it's open to anyone around the world. So we decided to run a contest to help people,

00:01:30.320 --> 00:01:35.020
especially those who have never been part of PyCon before, attend it this year. Just visit

00:01:35.020 --> 00:01:40.680
 talkpython.fm/PyCon 2021 and enter your email address, and you'll be in the running for an

00:01:40.680 --> 00:01:47.480
individual PyCon ticket. Compliments of Talk Python. These normally sell for about $100 each. And if

00:01:47.480 --> 00:01:50.940
you're certain you want to go, I encourage you to visit the PyCon website, get a ticket,

00:01:50.940 --> 00:01:56.900
and that money will go to support the PSF and the Python community. Congratulations to Janine

00:01:56.900 --> 00:02:02.000
Van Nykirk. Janine won the fourth of the five tickets that were given away for PyCon, and there's

00:02:02.000 --> 00:02:07.460
still more chances to win. If you want to be in this drawing, just visit talkpython.fm/PyCon 2021.

00:02:07.460 --> 00:02:13.560
Enter your email address. You'll be in the running to win a ticket. Now let's get on to that interview.

00:02:14.760 --> 00:02:16.900
Tim and Patrick, welcome to Talk Python To Me.

00:02:16.900 --> 00:02:18.340
Thanks. Thanks for having us.

00:02:18.340 --> 00:02:19.480
Thanks for the invitation.

00:02:19.480 --> 00:02:24.700
Yeah, it's, should I say thank you for having me? It's different, right? This is a bit of a unique

00:02:24.700 --> 00:02:30.260
one. So thank you both for being here. I've selected you to represent the audience in this

00:02:30.260 --> 00:02:33.400
Ask Me Anything episode, which should be a lot of fun. So yeah.

00:02:33.400 --> 00:02:33.720
Cool.

00:02:33.720 --> 00:02:35.900
It's great to have you both here and helping out with that.

00:02:35.900 --> 00:02:37.660
Yeah, looking forward to it. Should be good fun.

00:02:37.660 --> 00:02:38.160
Yeah, definitely.

00:02:38.320 --> 00:02:42.940
Yeah, I agree. So you were sort of guests on the show until you turned the tables, I suppose. So

00:02:42.940 --> 00:02:47.420
let's do a quick introduction, just a little bit of background about yourself. Tim, I'll let you go

00:02:47.420 --> 00:02:53.000
first. How'd you get into programming and how'd you get over here onto this show to interview me?

00:02:53.000 --> 00:02:59.060
Sure. And in terms of programming, I've been, or I'm an electronic engineer by training and I did

00:02:59.060 --> 00:03:05.280
electronic engineering type work for 13, 14 years or so, mainly producing television satellite decoders

00:03:05.280 --> 00:03:10.520
at a facility based in Durban in South Africa. So we made satellite decoders and I did all sorts of

00:03:10.520 --> 00:03:14.420
areas on that with C and low level embedded programming and so forth, but slowly moved my

00:03:14.420 --> 00:03:18.100
way into PC programming. And for the last couple of years, I've actually been full-time software

00:03:18.100 --> 00:03:22.980
development using Python mainly for DevOps work. Although DevOps means different things to different

00:03:22.980 --> 00:03:27.740
people. In my case, it's a process automation and industrial is not the word I'm looking for,

00:03:27.740 --> 00:03:32.100
but process automation and infrastructure as code is the word I'm looking for. That's the kind of thing

00:03:32.100 --> 00:03:38.160
we do. So I've been probably writing Python since university today, which was not terribly far off 20

00:03:38.160 --> 00:03:39.980
years ago. So I've been using it for quite a while.

00:03:39.980 --> 00:03:43.860
Yeah. Those are pretty early days of Python. You know, that's at least two thirds of its life there,

00:03:43.860 --> 00:03:44.020
right?

00:03:44.100 --> 00:03:46.700
Yeah, it was 2.3, 2.4, something I get.

00:03:46.700 --> 00:03:51.200
Yeah, absolutely. Well, that sounds really fun. And were you happy to be moving away from more

00:03:51.200 --> 00:03:52.800
low level stuff or do you miss it?

00:03:52.800 --> 00:03:57.680
I don't miss it a great deal. I don't miss writing C. But I enjoyed it when I did it,

00:03:57.680 --> 00:04:00.880
but I don't miss, I don't know if I'd go back to it now, but yeah, I thoroughly enjoy the kind of

00:04:00.880 --> 00:04:01.440
thing I do now.

00:04:01.440 --> 00:04:05.360
I feel the same way. I did a bunch of C programming at the beginning and I'm really glad I had that

00:04:05.360 --> 00:04:08.340
experience. I'm also really glad I don't have to continue having that experience.

00:04:08.340 --> 00:04:08.700
Exactly.

00:04:08.700 --> 00:04:11.840
Awesome. All right, Patrick, how about yourself?

00:04:11.980 --> 00:04:17.100
I don't have the experience that you two guys have, but I think my first course in programming

00:04:17.100 --> 00:04:23.860
was during my physics studies where I had a C++ course, just basic introduction. And I didn't

00:04:23.860 --> 00:04:28.660
really, I liked the idea of programming, but I didn't like the language that much. During my PhD,

00:04:28.660 --> 00:04:36.680
I was mostly working with Mathematica, also some C++ and old Fortran code for simulations. But after my

00:04:36.680 --> 00:04:43.280
PhD, I started as a traffic planning, in a traffic planning company as a transport model and data

00:04:43.280 --> 00:04:43.800
analyst and-

00:04:43.800 --> 00:04:46.620
Like modeling like traffic and stuff like traffic lights.

00:04:46.620 --> 00:04:48.060
Like traffic, yes. Traffic.

00:04:48.060 --> 00:04:48.360
Okay.

00:04:48.360 --> 00:04:48.560
Yeah.

00:04:48.560 --> 00:04:53.740
We did like traffic modeling for cities and areas and stuff like that. Yeah. Even some countries.

00:04:53.740 --> 00:05:00.660
Keep the A4, A6. Is that, what are the Autobahn names there from clogging up or is that more cities?

00:05:00.660 --> 00:05:06.280
Yeah. Yeah. That was also a big part. Yes. The modeling that stuff because that's the most interesting

00:05:06.280 --> 00:05:11.340
form of some of the economic companies there. Yes. I think my first task there was like converting

00:05:11.340 --> 00:05:17.140
some old VBA code to Python that transferred structural data from an Excel database to another

00:05:17.140 --> 00:05:18.900
program, which was horrible. Oh, wow.

00:05:18.900 --> 00:05:24.540
Yeah. It was absolutely horrible. And I immediately realized that I hated VBA and loved Python.

00:05:24.540 --> 00:05:31.220
That's where I stuck. And later I joined Germany's biggest drugstore company. And I'm now there

00:05:31.220 --> 00:05:37.500
a data engineer for tracking data, mostly working with Python and the Hadoop PySpark ecosystem.

00:05:37.500 --> 00:05:37.900
Yeah.

00:05:37.900 --> 00:05:42.180
I see you live pretty solidly on the big data, data science side of Python.

00:05:42.180 --> 00:05:48.120
Yeah. I'm more in the data science, more data engineering. So it's really a lot of software

00:05:48.120 --> 00:05:48.600
engineering.

00:05:48.600 --> 00:05:53.860
I recently had Tobias Macy on the show. We talked about the whole data engineering landscape and

00:05:53.860 --> 00:05:58.060
it's really interesting. Like I had kind of lost track of paying attention to the data pipeline

00:05:58.060 --> 00:06:00.980
stuff. And there's a lot of neat tools that are coming out in that area.

00:06:00.980 --> 00:06:06.300
Yeah, there is actually, but it's always hard to migrate from an existing infrastructure to

00:06:06.300 --> 00:06:09.860
something new, but you always have to. So it's a steady flow of new stuff that's coming

00:06:09.860 --> 00:06:11.180
in where you have to adapt. Yeah.

00:06:11.240 --> 00:06:15.220
Yeah, absolutely. All right, cool. Well, thank you both for being here. Let me just

00:06:15.220 --> 00:06:21.540
give a quick summary of this. Ask me anything episode for people watching and listening. So

00:06:21.540 --> 00:06:25.080
people ask me questions all the time. They'll, they'll shoot me a message over email and say,

00:06:25.080 --> 00:06:28.160
Hey, here's this thing you should check out, or this is interesting. I got a quick question. Oh,

00:06:28.160 --> 00:06:33.460
by the way, here's some question about the podcast and this way or that those have obviously been,

00:06:33.460 --> 00:06:37.720
you know, building up over time. So I thought it might be fun to just let you guys come on and

00:06:37.720 --> 00:06:43.580
basically ask those questions and you two get to be the audience or for everyone out there. And so

00:06:43.580 --> 00:06:49.900
we collected some questions previously. I tweeted this out and maybe mentioned on one of the podcasts,

00:06:49.900 --> 00:06:54.820
let people fill out a form and ask their question, which is actually how you two got here, right?

00:06:54.820 --> 00:07:00.400
Because you both asked a question and there was a checkbox of, would you like to be the interviewer of this whole thing?

00:07:00.400 --> 00:07:05.500
And that's great. And so what we're going to do is we're going to start with some of those questions we collected previously,

00:07:05.500 --> 00:07:12.240
but then I could see people like Hong and Daniel and Sam all in the audience and other people coming.

00:07:12.240 --> 00:07:15.720
So maybe there's going to be some questions from the live stream that we do on YouTube as well.

00:07:15.720 --> 00:07:20.340
So Patrick, I guess we can kick this off and what's the first question?

00:07:20.340 --> 00:07:28.260
So the first question is by Martin Boris. So a little bit of background. So he's listening from Germany.

00:07:28.260 --> 00:07:32.800
So yeah, sorry. Let me also add like everyone put a little tiny bit of background about themselves.

00:07:32.800 --> 00:07:38.500
And so just to kind of make them more part of the show as well, these guys will like fill that in just a tiny bit as well.

00:07:38.500 --> 00:07:42.940
Yes. So he's listening from Germany. So hello from Germany to Germany.

00:07:42.940 --> 00:07:48.560
I think I started around 2016. I love the show's wide range of Python related topics.

00:07:48.560 --> 00:07:53.900
And also the sound quality is usually very good. Yes, that's true. And yeah, the question is,

00:07:53.900 --> 00:07:59.920
what's the first Python code you ever used professionally or got paid for? And is it still in production?

00:07:59.920 --> 00:08:04.020
That's a great question. So what is the first Python code that I wrote in production?

00:08:04.420 --> 00:08:14.020
Well, the first that I got paid for. So really, when I started in the Python, I was working as a full time as a software trainer.

00:08:14.020 --> 00:08:24.640
So I would go around and teach courses. And I used to previously do C# and .NET and C++ and stuff and was super happy to move over to Python and do more of that.

00:08:24.640 --> 00:08:33.960
So the first things that I did around that space was really like a bunch of little example projects and things I kind of explored so that I could teach those ideas to other people.

00:08:34.280 --> 00:08:42.880
So it's, I don't know, it's possibly someone took that and put it into production, but it's not really the type of code like, oh, I deployed this one website or I built that website.

00:08:42.880 --> 00:08:51.400
And then, you know, after that, I started realizing just how neat and powerful Python was started doing some little small projects with it.

00:08:51.400 --> 00:08:54.520
And probably the thing that's still around, honestly, is Talk Python.

00:08:54.520 --> 00:09:00.480
The site itself is the oldest piece of Python code that I've written that's still around and doing anything.

00:09:01.080 --> 00:09:04.460
Yeah. So I think that's probably the first one back in the day.

00:09:04.460 --> 00:09:05.860
You know, it's tricky.

00:09:05.860 --> 00:09:12.080
I wasn't working at the time writing that much software as a software developer when I found Python, I would say.

00:09:12.080 --> 00:09:13.100
So there you go.

00:09:13.100 --> 00:09:13.560
Yeah.

00:09:13.880 --> 00:09:24.320
I would also probably suggest quite a lot of us who write Python, a lot of our Python, if it's still in production, was only ever run once or twice because it was a quick script to fix some problem that the rest of the system had and so forth.

00:09:24.320 --> 00:09:29.480
So it's still around, but not necessarily ever looked at again because it fixed the problem and it was solved.

00:09:30.140 --> 00:09:30.620
Exactly.

00:09:30.620 --> 00:09:31.540
Yeah.

00:09:31.540 --> 00:09:36.280
I've got a huge folder of like, these are the things I need to run to solve problems or get like little reports really quick.

00:09:36.280 --> 00:09:38.720
And I honestly forget if they even exist.

00:09:38.720 --> 00:09:46.860
You know, I'm like, I'm pretty sure a couple of years ago I wrote this thing that'll, you know, output this data or summarize this for me and I could do it again, but maybe I can find that script.

00:09:46.860 --> 00:09:49.660
And yeah, I just, I did one of those like yesterday or the day before.

00:09:49.660 --> 00:09:49.900
Yeah.

00:09:49.900 --> 00:09:50.840
I think it was Monday.

00:09:50.840 --> 00:09:51.100
Yeah.

00:09:51.100 --> 00:09:51.880
Onto the next question.

00:09:51.880 --> 00:09:53.180
It's maybe just worth noting.

00:09:53.180 --> 00:09:54.520
I think I forgot to mention up front.

00:09:54.520 --> 00:09:57.300
We are very loosely grouped the questions together.

00:09:57.300 --> 00:10:04.840
So we're going through a set of kind of software related questions and then there's a couple on the software industry and then a couple of them more podcast specific itself.

00:10:04.840 --> 00:10:05.360
Yeah.

00:10:05.360 --> 00:10:05.800
Sounds good.

00:10:05.800 --> 00:10:09.440
Hey, before you do that, the follow up from the live stream, Sam, Samuel.

00:10:09.440 --> 00:10:09.760
Yes.

00:10:09.760 --> 00:10:15.040
Does how much of the original Talk Python code do you think is still remaining versus how much has been refactored over the years?

00:10:15.040 --> 00:10:15.920
Super interesting.

00:10:15.920 --> 00:10:18.220
I would say a lot of it has been additive.

00:10:18.220 --> 00:10:20.680
You know, people maybe think, oh, it's just a podcast site.

00:10:20.740 --> 00:10:24.740
Like it does a whole bunch of little small things behind the scenes that are not super obvious.

00:10:24.740 --> 00:10:30.200
Like just a couple months ago, I added the ability to have the site like transform during live stream.

00:10:30.200 --> 00:10:34.320
So if you pulled up talkpython.fm right now, like there's like a sort of the whole site is like lit up.

00:10:34.320 --> 00:10:35.660
Oh, we're live streaming right now.

00:10:35.660 --> 00:10:37.020
And it'll like take you over there.

00:10:37.020 --> 00:10:37.460
Right.

00:10:37.460 --> 00:10:39.000
Like you don't get that with say WordPress.

00:10:39.000 --> 00:10:40.700
So there's a lot of stuff behind the scenes happening.

00:10:40.700 --> 00:10:47.640
In terms of the biggest stuff that was ripped out and refactored is it originally was written with SQLAlchemy talking to a relational database.

00:10:47.820 --> 00:10:51.460
And then after a year or two, I switched it over to MongoDB.

00:10:51.960 --> 00:10:53.340
We collect tons of data.

00:10:53.340 --> 00:10:59.140
There's like, I don't know, gigs, gigs of data in the database and, you know, millions of records.

00:10:59.140 --> 00:11:01.020
So I'm like, all right, it's going to be better to switch this over.

00:11:01.020 --> 00:11:02.240
And I like it better anyway.

00:11:02.240 --> 00:11:03.500
So switch that over.

00:11:03.500 --> 00:11:06.100
It probably just ripped out the data layer and put in this new one.

00:11:06.100 --> 00:11:07.440
That's probably the biggest change.

00:11:07.440 --> 00:11:07.780
Yeah.

00:11:07.840 --> 00:11:15.420
The next question that was submitted is from Mahadi, who describes himself as a longtime listener, first time caller who does automation and data science.

00:11:15.420 --> 00:11:17.000
There's two questions here.

00:11:17.000 --> 00:11:18.860
I'll ask them both at the same time.

00:11:18.860 --> 00:11:20.440
You can tackle them, obviously, together.

00:11:20.440 --> 00:11:21.840
First question.

00:11:21.840 --> 00:11:26.880
Are there any new courses or content or projects that you're currently working on that you can share to your listeners?

00:11:27.300 --> 00:11:33.740
And the second question, you've done an amazing job covering almost every major Python framework, what you love about them and what you dislike.

00:11:33.740 --> 00:11:38.740
As a professional content creator, what are the exact features that you're looking for in a Python web framework?

00:11:38.740 --> 00:11:43.260
Not including the common features, but subtleties that may just make up your mind about switching to that framework.

00:11:43.260 --> 00:11:43.680
Awesome.

00:11:43.680 --> 00:11:45.420
That sounds like three questions, right?

00:11:45.420 --> 00:11:46.760
Well, granted, more or less, yeah.

00:11:46.760 --> 00:11:48.200
Yeah, yeah, yeah, yeah.

00:11:48.520 --> 00:11:48.920
Beautiful.

00:11:48.920 --> 00:11:52.600
So first one, courses and content that I'm working on.

00:11:52.600 --> 00:11:54.880
I have two main areas that we're focusing on.

00:11:54.880 --> 00:11:57.000
We have a couple of authors who are working with me.

00:11:57.000 --> 00:12:01.320
Probably the most exciting one that is just about to come out is we have a course on Dask.

00:12:01.320 --> 00:12:04.620
So a Dask and scaling Dask with Coiled.

00:12:04.620 --> 00:12:06.940
That's going to be a real fun series that we're doing.

00:12:06.940 --> 00:12:09.440
I have a course on Twilio and Flask.

00:12:09.440 --> 00:12:19.580
So basically, how do I build like a chat bot that will talk to like a backend and in Flask and then like let people put in database, create an admin backend, notifications for like a company.

00:12:19.580 --> 00:12:22.140
Then they talk back to their customers over WhatsApp.

00:12:22.140 --> 00:12:23.240
So that's going to be fun.

00:12:23.240 --> 00:12:24.040
That's coming out.

00:12:24.040 --> 00:12:29.400
More FastAPI kind of leads into the next one of the other questions.

00:12:29.400 --> 00:12:36.720
And then I'm thinking I haven't quite got there, but I'm thinking of doing a year long YouTube channel of something like a five minute.

00:12:36.720 --> 00:12:40.420
Here's a cool thing in Python this week thing on YouTube.

00:12:40.420 --> 00:12:45.560
Just like screen sharing and like, hey, let's just jump in and oh, did you know about micro or ultra JSON?

00:12:45.560 --> 00:12:48.120
Look, you can use it like this, but it's faster or something like that.

00:12:48.120 --> 00:12:48.660
That'd be nice.

00:12:48.660 --> 00:12:48.980
Yeah.

00:12:48.980 --> 00:12:49.300
Yeah.

00:12:49.300 --> 00:12:49.560
Thanks.

00:12:49.560 --> 00:12:52.680
A single highlight out of your other podcast, basically.

00:12:52.680 --> 00:12:53.720
Yeah, exactly.

00:12:53.720 --> 00:12:56.600
Python bytes occasionally highlights a package we may not know about.

00:12:56.600 --> 00:12:57.420
Yeah, exactly.

00:12:57.420 --> 00:13:01.540
Like so Python bytes, but like let's actually write some code and see it on the screen real quick sort of style.

00:13:01.540 --> 00:13:03.260
So that's in terms of content.

00:13:03.260 --> 00:13:07.540
And then you, the other one was about the web frameworks.

00:13:07.540 --> 00:13:08.040
Go ahead.

00:13:08.040 --> 00:13:08.320
Yeah.

00:13:08.320 --> 00:13:10.280
About Python web frameworks, effectively.

00:13:10.280 --> 00:13:17.160
What is it that you're looking for in one that, you know, given that you seem to have covered quite a few of them, what is it you like most about the ones you like?

00:13:17.240 --> 00:13:20.820
I would say two things that really attract me to paying attention to those.

00:13:20.820 --> 00:13:25.200
One is the sort of modern features, modern feel, right?

00:13:25.200 --> 00:13:35.020
If it's using type hints, if it's using async, those kinds of aspects, it feels like it's leveraging what Python is now and not what Python used to be.

00:13:35.080 --> 00:13:37.240
So those aspects of it make me excited.

00:13:37.240 --> 00:13:54.380
But the other thing in terms of when would I think that it's important to pay attention to or when would I think is switching to it is I look at the basically the derivative of the popularity, the number of stars, the number of people that tell me I should be covering this, the number of articles you see about it.

00:13:54.420 --> 00:13:56.720
So like how fast is it growing and how much excitement?

00:13:56.720 --> 00:14:02.840
So, for example, like FastAPI, I would say is probably number one in that rate of growth category right now.

00:14:02.840 --> 00:14:06.760
And it also touches on the modern features with Pydantic and whatnot.

00:14:06.760 --> 00:14:10.240
And it's not, say, as popular as Django or Flask.

00:14:10.240 --> 00:14:14.680
I think it's if you look at the adoption, I think it's one third compared to them.

00:14:14.680 --> 00:14:20.180
You look at the GitHub stars, it's 50-50, but it's only been around for two years where those other frameworks have been around 15 years.

00:14:20.180 --> 00:14:24.400
So, you know, to be almost as popular, like 50 percent as popular.

00:14:24.840 --> 00:14:30.060
But from, you know, in just two years, that's a pretty big indicator that people are excited about it, at least at the time.

00:14:30.060 --> 00:14:37.300
That is, yeah, I was about to say, granted, if you're half as popular as Flask or a third as popular as Flask and you've been around far less, that is impressive.

00:14:37.300 --> 00:14:38.140
Yeah, exactly.

00:14:38.140 --> 00:14:39.040
It's a big deal.

00:14:39.040 --> 00:14:47.260
And I think it's because these other frameworks, while amazing, it's hard for them to say, oh, we're going to change how you write the code and use like type hints.

00:14:47.260 --> 00:14:52.260
And you can see both those frameworks are working on their strategy to switch to async.

00:14:52.520 --> 00:14:58.760
Whereas with FastAPI, like literally the getting started out of the box gives you an async server.

00:14:58.760 --> 00:15:01.460
You can write async view methods if you want or not.

00:15:01.460 --> 00:15:07.140
And it's just, it's unencumbered in which I think is one of the things that's given it an advantage over the others.

00:15:07.140 --> 00:15:07.500
Perfect.

00:15:07.500 --> 00:15:08.020
Thanks.

00:15:08.020 --> 00:15:10.080
I think that pretty much comprehensively covers that.

00:15:10.180 --> 00:15:16.200
On a side note, I do recall in previous episodes, you've made reference to building your site on Pyramid.

00:15:16.200 --> 00:15:16.560
Sorry.

00:15:16.560 --> 00:15:17.100
Yes.

00:15:17.100 --> 00:15:18.660
There's a pyramid you've used.

00:15:18.660 --> 00:15:18.800
Yeah.

00:15:18.800 --> 00:15:20.880
That's also obviously one of your favorites.

00:15:20.880 --> 00:15:21.340
Yeah.

00:15:21.340 --> 00:15:21.560
Yeah.

00:15:21.560 --> 00:15:21.680
Yeah.

00:15:21.680 --> 00:15:26.560
There's a little bit of Flask in there as well for like some services that are no one would know about or see.

00:15:26.960 --> 00:15:30.640
Maybe our search microservice type thing might be in Flask.

00:15:30.640 --> 00:15:32.620
But yeah, I'm a fan of Pyramid.

00:15:32.620 --> 00:15:33.400
I like it a lot.

00:15:33.400 --> 00:15:40.840
I think it also is in the situation where it's hard for it to make major changes to adopt some of these new features.

00:15:40.840 --> 00:15:41.120
Right?

00:15:41.120 --> 00:15:41.400
Yeah.

00:15:41.540 --> 00:15:48.320
One of the things that attracted me to Pyramid is it's a clean, simple, small framework that lets me go, oh, I'm going to use relational.

00:15:48.320 --> 00:15:49.280
Oh, no, I'm going to switch to Mongo.

00:15:49.280 --> 00:15:53.200
And I don't have to like negotiate with the ORM and the admin integration.

00:15:53.200 --> 00:15:55.180
And like, I can just decide how it's going to work.

00:15:55.180 --> 00:15:57.860
And for me, that's good because I've been building web apps for a while.

00:15:57.860 --> 00:16:01.800
Like, I don't know that's necessarily good for everyone, but for me, that was a big positive.

00:16:01.800 --> 00:16:07.540
And also, Pyramid was one of the first modern frameworks to massively embrace Python 3.

00:16:07.840 --> 00:16:12.480
I remember when I was choosing between Flask and Pyramid, Pyramid's like Python 3 straight away.

00:16:12.480 --> 00:16:14.380
This is like where we're focused.

00:16:14.380 --> 00:16:19.880
And Flask was like, to get out a statement, like, yeah, it'll probably work on Python 3, but we've tested on Python 2.

00:16:19.880 --> 00:16:24.800
I'm like, if I'm starting from scratch, I don't really want to have that as the way that I feel.

00:16:24.800 --> 00:16:26.940
I really want this to work on Python 3, right?

00:16:26.940 --> 00:16:32.900
So that was part of the thing that I think is not really relevant now, but it's part of the decision when I decided to go with it.

00:16:32.900 --> 00:16:33.760
Yeah, it makes a lot of sense.

00:16:33.760 --> 00:16:34.080
Yep.

00:16:34.080 --> 00:16:35.020
Thanks, Patrick.

00:16:35.020 --> 00:16:36.320
I think that's pretty much that.

00:16:36.320 --> 00:16:37.640
Yeah, that was all of them.

00:16:37.640 --> 00:16:38.680
From that question, yeah.

00:16:38.680 --> 00:16:43.720
This portion of Talk Python To Me is brought to you by OutSystems.

00:16:43.720 --> 00:16:52.600
Just in a recent episode, my guest and I were lamenting about how complex building UI-oriented applications for end users has become across the industry.

00:16:52.600 --> 00:16:56.780
There's an entire class of applications that should be a whole lot easier to build.

00:16:56.780 --> 00:16:59.660
That's why I'm really excited about our sponsor, OutSystems.

00:16:59.660 --> 00:17:03.540
They provide a visual, model-driven, yet powerful development environment.

00:17:03.540 --> 00:17:06.160
You create your app's UI by dragging beautiful widgets.

00:17:06.460 --> 00:17:10.840
You connect those widgets to a plethora of data sources like APIs, SaaS services, and more.

00:17:10.840 --> 00:17:16.720
You can connect it to your Python backend data using something like FastAPI or Flask services.

00:17:16.720 --> 00:17:23.600
Then you publish your app as a web portal, a progressive web app, or even a native mobile app at the iTunes and Google Play stores.

00:17:23.980 --> 00:17:28.940
As someone who has created cross-platform mobile apps, this whole system is very appealing to me.

00:17:28.940 --> 00:17:30.220
I encourage you to check it out.

00:17:30.220 --> 00:17:36.580
It's time to stop telling your team and stakeholders that it's too hard to build a mobile app or a website for your project.

00:17:36.580 --> 00:17:38.740
Impress them with OutSystems.

00:17:38.740 --> 00:17:44.960
Just visit talkpython.fm/OutSystems and check out the animated GIF right at the top to see what I'm talking about.

00:17:45.200 --> 00:17:50.260
Give it a try for free at talkpython.fm/OutSystems or just click the link in your podcast player show notes.

00:17:50.260 --> 00:17:56.840
Next question, which is from me, so I'm not going to introduce myself.

00:17:56.840 --> 00:17:57.960
Yeah, you've already done so.

00:17:57.960 --> 00:17:58.440
Yeah, perfect.

00:17:58.820 --> 00:18:07.940
So, yeah, in my opinion, the addition of f-strings and Python 3.6 was the game changer for convincing many people to finally drop legacy Python.

00:18:07.940 --> 00:18:16.200
Many libraries today only support Python 3.6 and greater, and I know that some of them did so because they wanted to use f-strings.

00:18:16.200 --> 00:18:27.560
Do you think pattern matching in Python 3.10 could be a similar milestone, or do you think the current controversies around pattern matching will continue once Python 3.10 will be released?

00:18:27.680 --> 00:18:28.880
I've been thinking about pattern matching.

00:18:28.880 --> 00:18:29.720
It's really interesting.

00:18:29.720 --> 00:18:33.940
It's like a switch statement, but much, much more, right?

00:18:33.940 --> 00:18:35.600
And that's been approved.

00:18:35.600 --> 00:18:40.360
That's pretty recent news that that's been approved and will be in Python 3.10, as you've hinted, Patrick.

00:18:40.360 --> 00:18:46.540
I also agree that f-strings were major, and I think it's interesting to just look back on the history of Python.

00:18:46.700 --> 00:18:57.760
Like, one of the biggest challenges of switching from Python 2.2.3 was around the way that strings behaved in, like, bytes versus strings, where it used to just kind of be all the one thing.

00:18:57.760 --> 00:19:02.640
And it's kind of amazing to me that such a simple, oh, we're just changing this one data structure.

00:19:02.640 --> 00:19:05.100
It has so much influence, right?

00:19:05.100 --> 00:19:09.200
That you'd switch to Python 3.6 because f-strings are awesome.

00:19:09.440 --> 00:19:13.640
Or you would be resistant to switch from 2.3 because the way strings work changes.

00:19:13.640 --> 00:19:14.560
But I think it's true.

00:19:14.560 --> 00:19:16.900
So will pattern matching be that?

00:19:16.900 --> 00:19:18.040
I don't think so.

00:19:18.040 --> 00:19:19.200
You know, it's...

00:19:19.200 --> 00:19:19.880
Let me rephrase that.

00:19:19.880 --> 00:19:22.240
I think for certain use cases, absolutely.

00:19:22.580 --> 00:19:35.700
And I think the way that pattern matching is set up, particularly, it's really useful for things where you're kind of doing, I don't know, maybe almost a reg X type of work where it's not just this value equals that or that.

00:19:35.700 --> 00:19:38.680
But like the name says, I guess, pattern matching, right?

00:19:38.680 --> 00:19:41.080
And you're writing a parser or something like that.

00:19:41.080 --> 00:19:42.600
Maybe it's really, really important.

00:19:42.600 --> 00:19:45.640
But to me, it doesn't feel like it's going to make a major difference.

00:19:45.640 --> 00:19:51.880
I would say it's more going to be a walrus operator than an f-string, which is not to disparage the walrus operator.

00:19:51.880 --> 00:19:53.420
I've come to love that thing, actually.

00:19:53.420 --> 00:19:54.360
I really like it.

00:19:54.360 --> 00:20:03.940
It's like, especially, I think, in the data science realm where you have to do things as a single statement, a single expression, you know, like a list comprehension or something.

00:20:03.940 --> 00:20:10.560
You can really do nice things with the walrus operator, whereas like you could create a variable and assign it and then test it.

00:20:10.640 --> 00:20:16.780
That's not something that's as easy to do without multiple duplication or whatever in, say, a list comprehension.

00:20:16.780 --> 00:20:23.380
So these sort of places where you work in like one line expressions, I think actually the walrus operator is really super powerful.

00:20:23.380 --> 00:20:28.840
So I think there'll be something like that where there's a slice of types of problems that you solve.

00:20:28.840 --> 00:20:30.140
Like, yeah, this is the answer.

00:20:30.140 --> 00:20:33.500
And, you know, 90% of the world will go like, what's pattern matching?

00:20:33.500 --> 00:20:34.160
Well, yes.

00:20:35.480 --> 00:20:45.600
Well, I must say just to chop onto that in terms of the f-strings, to come at it from the other side, I didn't move to Python 3 because I wanted to get access to f-strings.

00:20:45.600 --> 00:20:50.240
As is, I stuck with 2.7 long after there were threes available for legacy reasons.

00:20:50.240 --> 00:20:53.520
And that's what the stuff I'd written was written in and for a variety of reasons.

00:20:53.520 --> 00:20:57.720
But because it's what I was using for my day-to-day job, it's what I was using for my personal stuff as well.

00:20:57.720 --> 00:20:58.940
I hadn't bothered moving to three.

00:20:58.940 --> 00:21:02.640
But having now finally done that, I'm not prepared to go back without the f-strings.

00:21:02.760 --> 00:21:10.740
And it's not just f-strings, but f-strings are a very nice thing to point to, to say, this is why I'm staying with Python 3.

00:21:10.740 --> 00:21:12.580
I'm not giving these up.

00:21:12.580 --> 00:21:13.280
I totally agree.

00:21:13.280 --> 00:21:14.340
You know, it's interesting.

00:21:14.340 --> 00:21:16.480
Python has many ways to format strings.

00:21:16.480 --> 00:21:18.360
You've got the percent modulo thing.

00:21:18.360 --> 00:21:19.920
You've got .format.

00:21:19.920 --> 00:21:22.340
You could even do a plus if you had to.

00:21:22.340 --> 00:21:23.520
All those kinds of things.

00:21:23.520 --> 00:21:24.320
And now f-strings.

00:21:24.320 --> 00:21:26.120
I think the most underrated thing is this.

00:21:26.120 --> 00:21:30.660
When you have an f-string and an expression and you say letter equals.

00:21:30.660 --> 00:21:32.340
And it prints a nice.

00:21:32.340 --> 00:21:33.740
Yeah, the debugging statement.

00:21:33.740 --> 00:21:34.140
Yeah.

00:21:34.140 --> 00:21:37.120
Output like letter equals the letter value.

00:21:37.120 --> 00:21:38.140
That's pretty nice.

00:21:38.140 --> 00:21:39.580
I think it's a 3.8 thing.

00:21:39.580 --> 00:21:40.500
Yeah, I think that's not.

00:21:40.500 --> 00:21:43.460
Which is bad because we use a lot of 3.6 currently.

00:21:43.460 --> 00:21:44.420
But we hope to.

00:21:44.420 --> 00:21:47.960
Hopefully we're soon switching to 3.8.

00:21:47.960 --> 00:21:48.180
Yeah.

00:21:48.180 --> 00:21:49.060
Why is this crashing?

00:21:49.060 --> 00:21:50.720
I've definitely broken the server.

00:21:50.720 --> 00:21:52.300
I took down the website once.

00:21:52.300 --> 00:21:56.120
So one of my websites by using the Walrus operator and a little side script.

00:21:56.120 --> 00:21:59.660
But it tried to parse it and it was on 3.7 at the time.

00:21:59.660 --> 00:22:00.180
Anyway.

00:22:00.180 --> 00:22:00.740
Yeah.

00:22:00.740 --> 00:22:02.060
You got to stay back a little.

00:22:02.060 --> 00:22:07.500
But the thing that's interesting is like f-strings are now both faster and cleaner and shorter.

00:22:07.500 --> 00:22:08.920
There's always been these trade-offs.

00:22:08.920 --> 00:22:11.460
Like, well, this is faster, but this is more maintainable.

00:22:11.460 --> 00:22:12.840
And now it's just clear.

00:22:12.840 --> 00:22:15.060
So I think f-strings are actually pretty important.

00:22:15.060 --> 00:22:16.100
I would put pattern.

00:22:16.100 --> 00:22:21.080
Patrick, I'd put pattern matching in with like Walrus operator level in my guesstimation here.

00:22:21.080 --> 00:22:22.240
So it breaks your code.

00:22:23.860 --> 00:22:24.600
Yeah, exactly.

00:22:24.600 --> 00:22:26.340
It will.

00:22:26.340 --> 00:22:29.340
Yeah, I think I'm running 3.9 on the server if I try to put it out too soon.

00:22:29.340 --> 00:22:32.760
Before we move on to the next question, a comment's just come on from Piotr.

00:22:32.760 --> 00:22:35.880
There have been a few previous comments to do with courses, which I think might make more

00:22:35.880 --> 00:22:38.780
sense to get to when we get down to the podcast side.

00:22:38.780 --> 00:22:41.440
But this one looks like it might fit in here quite nicely.

00:22:41.440 --> 00:22:41.900
Yeah.

00:22:41.900 --> 00:22:44.100
Basically, Piotr, and my apologies.

00:22:44.100 --> 00:22:48.100
In fact, my apologies to everyone whose name I mangled if I mangled it wrong during the podcast.

00:22:48.100 --> 00:22:52.400
Basically, Piotr saying his question, what do you find more exciting these days?

00:22:52.400 --> 00:22:55.740
Web development with Python on the back end or machine learning and AI?

00:22:55.740 --> 00:22:56.780
That's pretty interesting.

00:22:56.780 --> 00:22:58.000
What is more exciting?

00:22:58.000 --> 00:23:03.420
I mean, I think there's philosophical exciting and then there's what am I excited to sit down

00:23:03.420 --> 00:23:03.900
and write?

00:23:03.900 --> 00:23:08.900
And for me, there's something beautiful about just sitting down and building an API that

00:23:08.900 --> 00:23:12.140
you can put out there and just builds a website that feels super smooth.

00:23:12.240 --> 00:23:14.300
The web is so critical to us today.

00:23:14.300 --> 00:23:16.960
And you go around and so many sites are like loading, loading.

00:23:16.960 --> 00:23:19.240
Maybe they're like, oh, we're going to use a front end framework.

00:23:19.240 --> 00:23:22.460
So it seems fast and then it fills up and then it just has a bunch of spinners for a while.

00:23:22.460 --> 00:23:24.620
You're like, no, that's just another way of loading slowly.

00:23:25.500 --> 00:23:28.980
And having something that's just like instant, no matter where you are.

00:23:28.980 --> 00:23:33.660
It's just like there's a I get a great satisfaction in building things like that.

00:23:33.660 --> 00:23:38.640
And so the day to day sort of I'm going to go with the web development in Python.

00:23:38.640 --> 00:23:42.740
But in the big picture, like let's dream sci-fi sort of world.

00:23:42.740 --> 00:23:46.080
Machine learning AI is, you know, very captivating.

00:23:46.080 --> 00:23:46.380
Cool.

00:23:46.380 --> 00:23:47.080
What do you guys think?

00:23:47.080 --> 00:23:48.480
Thomas, I'm with you there entirely.

00:23:48.800 --> 00:23:53.120
I don't do any web development per se, but similarly in a day to day basis, if it turns

00:23:53.120 --> 00:23:57.940
out that for a lot of my work day, I wrote a script that did something relatively simple.

00:23:57.940 --> 00:24:02.840
You know, I spoke to a couple of databases and processed some numbers and maybe told us

00:24:02.840 --> 00:24:03.880
some stuff we didn't know before.

00:24:03.880 --> 00:24:08.220
And it was a script I wrote in a day and I ran it once or twice on the server and we never

00:24:08.220 --> 00:24:08.920
need to do it again.

00:24:08.920 --> 00:24:09.880
That was a good day.

00:24:09.880 --> 00:24:10.580
That was pleasing.

00:24:10.580 --> 00:24:12.720
You know, I sat down, I wrote some Python.

00:24:12.720 --> 00:24:14.480
It did the job and it worked.

00:24:14.480 --> 00:24:16.200
It's yeah, that was exciting to me.

00:24:16.200 --> 00:24:18.240
I like the fact that here's a problem to solve.

00:24:18.420 --> 00:24:19.900
I've written some patterns to solve it.

00:24:19.900 --> 00:24:23.300
And it's a neat self-contained thing as opposed to being big picture.

00:24:23.300 --> 00:24:25.680
Let's say machine learning stuff you do for months on end.

00:24:25.680 --> 00:24:26.580
And that's also very exciting.

00:24:26.580 --> 00:24:30.040
But there is something very satisfying about solving a particular problem.

00:24:30.040 --> 00:24:30.380
Yeah.

00:24:30.380 --> 00:24:31.500
You know, with some Python.

00:24:31.500 --> 00:24:33.740
I mean, and Python makes a lot of it really simple.

00:24:33.740 --> 00:24:34.320
Exactly.

00:24:34.320 --> 00:24:35.200
Yeah, exactly.

00:24:35.200 --> 00:24:35.540
Yeah.

00:24:35.540 --> 00:24:38.460
Patrick, you live closer to the AI world than probably Kim Aradia.

00:24:38.460 --> 00:24:44.640
I actually started as a data scientist at my company and I quickly switched to be a data

00:24:44.640 --> 00:24:48.040
engineer because I realized that that's where the hard engineering

00:24:48.040 --> 00:24:50.380
and the kind of real work was happening.

00:24:50.380 --> 00:24:56.260
And without the data engineering, data cleaning, the whole, the proper processing of data, you

00:24:56.260 --> 00:24:58.800
cannot do any machine learning or AI.

00:24:58.800 --> 00:25:00.200
You cannot even start.

00:25:00.200 --> 00:25:01.320
That's why I'm there.

00:25:01.320 --> 00:25:04.180
To build kind of a foundation for me.

00:25:04.500 --> 00:25:09.780
At some point, I want to more go into this data science world, more machine learning, AI, which

00:25:09.780 --> 00:25:16.740
is really, I mean, it's incredible what Google puts out there with image classifiers and crazy

00:25:16.740 --> 00:25:20.220
stuff, especially with video or pictures.

00:25:20.760 --> 00:25:25.560
But I would also say it's really nice to solve a problem the right way.

00:25:25.560 --> 00:25:29.700
That's more an engineering part, which I like, which is more like a web framework where it's

00:25:29.700 --> 00:25:30.140
predictable.

00:25:30.140 --> 00:25:32.980
And data science is, it's really dependent on the data.

00:25:32.980 --> 00:25:33.620
And that's hard.

00:25:33.620 --> 00:25:34.420
The hard problem.

00:25:34.540 --> 00:25:39.760
There's a really cool quote that Eugene Yen mentioned on the show last time in some of

00:25:39.760 --> 00:25:41.260
his writings the time before.

00:25:41.260 --> 00:25:46.340
But recently he was on the show and it was that this cleaning and wrangling of data is

00:25:46.340 --> 00:25:47.180
not the grunt work.

00:25:47.180 --> 00:25:49.620
It is the work of data science, right?

00:25:49.620 --> 00:25:51.620
Like that's, without that, you really get nowhere.

00:25:51.620 --> 00:25:52.680
It's like an iceberg.

00:25:52.680 --> 00:25:55.180
It's a 90% below the water.

00:25:55.180 --> 00:25:56.980
Without it.

00:25:56.980 --> 00:25:57.200
Yeah.

00:25:57.200 --> 00:25:58.780
The top bit falls under.

00:25:58.780 --> 00:25:59.280
All right.

00:25:59.280 --> 00:26:02.800
Kim, other live stream questions you want to focus on now or want to move on?

00:26:02.880 --> 00:26:06.260
Well, actually, the other live stream question that maybe is worth talking while we're talking

00:26:06.260 --> 00:26:09.480
web frameworks, question from, I think it's Nechmat.

00:26:09.480 --> 00:26:11.320
Basically, that's the one.

00:26:11.320 --> 00:26:15.900
Basically, what are your thoughts on creating web applications using Streamlit versus Flask

00:26:15.900 --> 00:26:18.680
versus FastAPI in terms of pros and cons and so forth?

00:26:18.680 --> 00:26:21.020
I know you've had whole episodes talking about these things.

00:26:21.020 --> 00:26:21.780
Yeah, yeah, yeah.

00:26:21.780 --> 00:26:22.760
These are episodes.

00:26:22.760 --> 00:26:24.160
I have classes on some of these.

00:26:24.160 --> 00:26:26.820
Yeah, I've put a lot of thought into this, I guess.

00:26:26.820 --> 00:26:32.640
So let's put Streamlit on one side and Flask and FastAPI to the same other side in a

00:26:32.640 --> 00:26:32.880
moment.

00:26:32.880 --> 00:26:37.760
So Streamlit, if you're unaware, is really interesting for, I want to write some code

00:26:37.760 --> 00:26:42.620
that looks like procedural code, maybe in the data science world or in a Jupyter notebook,

00:26:42.620 --> 00:26:44.900
like do this thing, then this, then this, then this.

00:26:44.900 --> 00:26:45.560
Oh, wait.

00:26:45.560 --> 00:26:49.780
Actually, what I want is an interactive website with like a combo box and a select list and

00:26:49.780 --> 00:26:53.180
a slider that's going to like live time update that on the web.

00:26:53.180 --> 00:26:58.420
To go from that script to that front end dynamic website without something like Streamlit

00:26:58.420 --> 00:26:59.780
is a tremendous amount of work.

00:26:59.780 --> 00:27:05.920
It involves like reactor view, requires writing APIs, and it requires you understanding like

00:27:05.920 --> 00:27:07.060
visualization in the route.

00:27:07.060 --> 00:27:08.360
Like there's a lot of pieces.

00:27:08.360 --> 00:27:14.540
So I think Streamlit is incredible from going from like zero to 80 or zero to 70% on that.

00:27:14.800 --> 00:27:16.260
I've got that script and I want to get that up.

00:27:16.260 --> 00:27:20.400
And for most, for many, many people, 70% is plenty fine.

00:27:20.400 --> 00:27:24.000
Like the decision makers or the team want to have a dashboard where they can play with the

00:27:24.000 --> 00:27:24.820
data and look at it.

00:27:24.820 --> 00:27:28.960
And it kind of looks like this shape and I can't do a lot of design on it maybe, but who cares?

00:27:28.960 --> 00:27:32.900
Like they just want access to this and it's better than an Excel spreadsheet, better than

00:27:32.900 --> 00:27:34.480
like letting them query the data directly.

00:27:34.480 --> 00:27:36.760
So I think like that's one realm.

00:27:36.760 --> 00:27:43.240
And the other realm is I want to build like a production grade API that other things are

00:27:43.240 --> 00:27:45.380
going to depend upon and use and so on.

00:27:45.380 --> 00:27:47.620
So that comes down to Flask versus FastAPI.

00:27:47.760 --> 00:27:54.880
I think on the both new feature neatness, you know, Pydanic types, async and await, FastAPI

00:27:54.880 --> 00:27:55.260
wins.

00:27:55.260 --> 00:28:01.160
The APIs are similar, but it's the new magic plus the derivative of like the growth rate

00:28:01.160 --> 00:28:02.820
of FastAPI is higher.

00:28:02.820 --> 00:28:06.100
So on that regard, I think FastAPI is a really good choice.

00:28:06.100 --> 00:28:11.620
On the other hand, Flask has thousands of extensions you can add to it and just make it do things

00:28:11.620 --> 00:28:12.260
really easily.

00:28:12.260 --> 00:28:17.280
So if you would like to depend on that extension, things that people have done for you, you know,

00:28:17.360 --> 00:28:20.780
you're going to get, and you don't want to try to do those things yourself, you're probably

00:28:20.780 --> 00:28:22.520
better off going with Flask in that regard.

00:28:22.520 --> 00:28:27.380
So, you know, I mean, not everything, Brian had a nice statement quite a while ago that

00:28:27.380 --> 00:28:29.340
you're not Facebook, you're not LinkedIn, you're not Google.

00:28:29.340 --> 00:28:33.400
And I know that's a false statement for a very small slice of the world, but for most people,

00:28:33.400 --> 00:28:36.280
your API doesn't have to support a thousand requests a second.

00:28:36.280 --> 00:28:37.760
Five requests a second is fine.

00:28:37.760 --> 00:28:41.920
And you can do five requests a second on lots of data on a $5 server.

00:28:41.920 --> 00:28:42.880
You know what I mean?

00:28:42.880 --> 00:28:45.500
Like exactly with Flask and with no async.

00:28:45.500 --> 00:28:47.600
So I think like don't go too far.

00:28:47.600 --> 00:28:51.660
And also the Flask versus FastAPI, you can switch from one to the other pretty easily.

00:28:51.660 --> 00:28:53.620
There's similar frameworks you can switch.

00:28:53.620 --> 00:28:56.520
It's not sort of a super huge commitment.

00:28:56.520 --> 00:28:59.340
Streamlit versus those other two, that's a big deal.

00:28:59.340 --> 00:29:00.240
That's a big difference.

00:29:00.240 --> 00:29:00.500
Cool.

00:29:00.500 --> 00:29:00.680
Yeah.

00:29:00.760 --> 00:29:01.060
Yeah.

00:29:01.060 --> 00:29:03.260
And Robert says, I agree.

00:29:03.260 --> 00:29:05.500
Flask and Grapeframe were small and medium sized web apps.

00:29:05.500 --> 00:29:06.200
Yeah, I agree.

00:29:06.200 --> 00:29:10.260
I'm reminded of probably not that many shows ago you had some of the Django chaps on.

00:29:10.260 --> 00:29:14.240
And I recall one of them, one of the chaps saying he basically, he ran almost everything

00:29:14.240 --> 00:29:16.760
on the baked in SQLite.

00:29:16.760 --> 00:29:18.700
You can get quite far on SQLite.

00:29:18.700 --> 00:29:19.160
Yeah.

00:29:19.160 --> 00:29:19.480
Yeah.

00:29:19.480 --> 00:29:21.480
That was Carlton Gibson, I think.

00:29:21.480 --> 00:29:21.620
Yeah.

00:29:21.620 --> 00:29:22.160
That was it.

00:29:22.160 --> 00:29:22.360
Yeah.

00:29:22.480 --> 00:29:23.680
You can get quite far on SQLite.

00:29:23.680 --> 00:29:24.560
And that was a good point.

00:29:24.560 --> 00:29:27.160
And not everybody, not all your problems are Google scale problems.

00:29:27.160 --> 00:29:29.700
You don't need to roll out a cluster of databases up front.

00:29:29.700 --> 00:29:29.980
Yeah.

00:29:29.980 --> 00:29:35.060
And if you write to it rarely and you read from it frequently, it may well be very good.

00:29:35.060 --> 00:29:38.520
It's the thing is, you know, it's a lot of people say, well, you got to use Postgres

00:29:38.520 --> 00:29:41.060
if you're in a relationalist because you could do all this amazing things.

00:29:41.060 --> 00:29:42.000
And that's true.

00:29:42.000 --> 00:29:45.860
But my experience is there's a lot of people out there in the world that go, I want to build

00:29:45.860 --> 00:29:48.200
my first website or API and put it on the internet.

00:29:48.200 --> 00:29:49.960
Oh, I also have to learn Linux.

00:29:49.960 --> 00:29:50.960
And that's really intimidating.

00:29:50.960 --> 00:29:55.280
And now I've got to run another server and the database in production with the, on the

00:29:55.280 --> 00:29:56.940
internet where people could hammer on it.

00:29:56.940 --> 00:29:59.940
And there's all the security and just like, they throw up their hands and they run away.

00:29:59.940 --> 00:30:03.180
They're like, this is just too much for me to connect these different servers securely

00:30:03.180 --> 00:30:04.060
and maintain them.

00:30:04.060 --> 00:30:08.420
And, and, you know, the SQLite answer might be like, I can do this versus, ah, it's too

00:30:08.420 --> 00:30:08.680
much.

00:30:08.680 --> 00:30:09.040
Right.

00:30:09.040 --> 00:30:11.020
And I think in that case, it's a huge win.

00:30:11.020 --> 00:30:13.740
There's a strong, I think sometimes overlooked middle ground.

00:30:13.740 --> 00:30:17.360
I sometimes think we get a lot of resources for how to begin AppStage beginner.

00:30:17.360 --> 00:30:20.320
You've never done any of this Python stuff before and all that stuff is brilliant.

00:30:20.560 --> 00:30:23.880
And you get a lot of writing on, well, this is how we do it at, as you say, a thousand

00:30:23.880 --> 00:30:26.540
requests a second at huge scale and clustering.

00:30:26.540 --> 00:30:31.060
And we're running Kubernetes clusters over 15 different locations around the world and all

00:30:31.060 --> 00:30:32.140
that kind of serious complexity.

00:30:32.140 --> 00:30:34.320
But most of us aren't at either of those extremes.

00:30:34.320 --> 00:30:39.340
We're sitting in the middle where, you know, perhaps MySQL is what your company's chosen to

00:30:39.340 --> 00:30:39.820
use, for example.

00:30:39.820 --> 00:30:40.500
And it's just fine.

00:30:40.500 --> 00:30:41.000
It works.

00:30:41.000 --> 00:30:43.040
You know, it's not as good as Postgres, et cetera.

00:30:43.040 --> 00:30:44.900
But you know, a lot of these tools will meet the need.

00:30:44.900 --> 00:30:47.300
The need isn't always as big as you think it will be.

00:30:47.420 --> 00:30:47.780
Yeah, absolutely.

00:30:47.780 --> 00:30:49.760
I mean, I started out on one server, I think.

00:30:49.760 --> 00:30:50.700
And now we have eight.

00:30:50.700 --> 00:30:52.020
But I didn't start with eight.

00:30:52.020 --> 00:30:54.080
That would have been super intimidating, right?

00:30:54.080 --> 00:30:54.720
Like, yeah.

00:30:54.720 --> 00:30:55.040
Yeah.

00:30:55.040 --> 00:30:55.340
Yeah.

00:30:55.340 --> 00:30:55.940
Fantastic.

00:30:55.940 --> 00:30:57.440
Quick follow from Robert.

00:30:57.440 --> 00:31:01.140
A fair number of internal apps used by 10 to 15 people running on SQLite.

00:31:01.140 --> 00:31:01.780
Easy setup.

00:31:01.780 --> 00:31:03.060
Easy to move from server to server.

00:31:03.060 --> 00:31:03.960
Excellent.

00:31:03.960 --> 00:31:04.480
Oh, exactly.

00:31:04.480 --> 00:31:04.940
Yeah.

00:31:05.020 --> 00:31:05.540
And backup.

00:31:05.540 --> 00:31:07.200
You backup the SQLite file.

00:31:07.200 --> 00:31:07.880
You got it backed up.

00:31:07.880 --> 00:31:09.780
Baked into your Docker container, in my case, for example.

00:31:09.780 --> 00:31:11.800
And the people using it don't even know there's a database at all.

00:31:11.800 --> 00:31:12.500
It's brilliant.

00:31:12.500 --> 00:31:12.900
Yeah.

00:31:12.900 --> 00:31:13.460
Beautiful.

00:31:13.460 --> 00:31:15.760
Michael, there were a couple more live comments.

00:31:15.760 --> 00:31:19.680
Or perhaps, I don't know if any of those left to you that you wanted to take.

00:31:19.680 --> 00:31:22.960
Or we should maybe ask one of the questions that were sent in earlier.

00:31:22.960 --> 00:31:23.460
Yeah.

00:31:23.460 --> 00:31:24.180
Magnus had.

00:31:24.180 --> 00:31:25.340
He was in here early.

00:31:25.340 --> 00:31:28.580
So I'll give him the chance to get his thoughts in as well.

00:31:28.580 --> 00:31:34.040
So it says, in your, great, thank you, courses seem to be favoring starting from scratch,

00:31:34.040 --> 00:31:36.480
creating files in order to learn step by step.

00:31:36.480 --> 00:31:40.920
It's not bad per se, but do you have any thought of maybe doing a TDD workflow?

00:31:40.920 --> 00:31:42.460
Would this add more value?

00:31:42.460 --> 00:31:48.600
I think there's a big difference between the right way to create things for somebody seeing

00:31:48.600 --> 00:31:52.040
it for the first time versus the right way to create things for engineering.

00:31:52.040 --> 00:31:57.180
And I would say in the engineering world, I would lean more towards having tests.

00:31:57.420 --> 00:31:59.140
I'm not sure I want to start that.

00:31:59.140 --> 00:32:02.040
I've gone through some experiences where like, okay, what we're going to do is we're going

00:32:02.040 --> 00:32:04.120
to build this whole project up doing TDD.

00:32:04.120 --> 00:32:09.140
And if the whole idea is not to teach testing per se, but something else, I think for a lot

00:32:09.140 --> 00:32:14.920
of people that can be distracting, even though it might be a nice way to simplify it on the

00:32:14.920 --> 00:32:18.680
small scale and the large scale, I think that it can be, you know, just one more thing

00:32:18.680 --> 00:32:19.500
to talk about.

00:32:19.500 --> 00:32:23.200
Like a similar thing that people say is like, well, wouldn't it be great to like also cover

00:32:23.200 --> 00:32:26.480
Docker in your classes so that it doesn't matter what setup you're on?

00:32:26.480 --> 00:32:29.960
It's like, well, yeah, but then I also have to teach people Docker and that's already its

00:32:29.960 --> 00:32:32.380
own, its own other, you know, thing.

00:32:32.380 --> 00:32:36.360
And I ended up using SQLite a lot in all of my courses because I don't want you to have

00:32:36.360 --> 00:32:38.340
to fire up a server and go, why can't I connect?

00:32:38.340 --> 00:32:40.320
Or why can't I authenticate to this other server?

00:32:40.320 --> 00:32:44.420
Or actually even maybe worse, accidentally put data into it because you're playing around

00:32:44.420 --> 00:32:46.320
and then forget that, oh, that's open on the internet.

00:32:46.320 --> 00:32:46.720
Whoops.

00:32:46.920 --> 00:32:50.980
You know, like there's just a beauty to just having like a laser focus on the thing that

00:32:50.980 --> 00:32:51.660
you're trying to do.

00:32:51.660 --> 00:32:52.060
Exactly.

00:32:52.060 --> 00:32:55.980
That said, yeah, my stuff in production, I would say there's not a hundred percent code

00:32:55.980 --> 00:32:56.440
coverage.

00:32:56.440 --> 00:33:02.500
I find, you know, that that last 30, 20 percent, whatever it is, that marginal returns on that

00:33:02.500 --> 00:33:07.980
is much farther down the road than like, what is the essence of my thing I'm building?

00:33:08.300 --> 00:33:12.820
If I was building like a training engine, sorry, a trading engine for like stock market,

00:33:12.820 --> 00:33:16.520
well, the core part that does the trades and pricing like that should have tests.

00:33:16.520 --> 00:33:19.500
The part that does the logging, eh, probably not.

00:33:19.500 --> 00:33:19.940
Exactly.

00:33:19.940 --> 00:33:24.040
The part that emails everybody once a month of the marketing newsletter.

00:33:24.040 --> 00:33:24.520
Exactly.

00:33:24.520 --> 00:33:24.840
Yeah.

00:33:24.840 --> 00:33:25.540
Exactly.

00:33:25.540 --> 00:33:25.860
Right.

00:33:25.860 --> 00:33:30.640
Like, yeah, I mean, it might be great to have it, but it could be that you could be making

00:33:30.640 --> 00:33:32.240
important contributions in the other.

00:33:32.240 --> 00:33:32.640
I don't know.

00:33:32.640 --> 00:33:37.880
I feel like that if you take it too far in any direction that like looking for a hundred percent

00:33:37.880 --> 00:33:42.160
code coverage or something like that, often you can end up spending huge amounts of time.

00:33:42.160 --> 00:33:45.360
Then you get in a situation where you're like, well, it would be really better if we refactored

00:33:45.360 --> 00:33:45.720
this.

00:33:45.720 --> 00:33:49.000
And that's not that much work, but there's like 500 tests that go with that.

00:33:49.000 --> 00:33:50.460
Now we've got to rewrite the tests.

00:33:50.460 --> 00:33:54.420
And it's just like, oh gosh, well, maybe we won't make that architectural shift because

00:33:54.420 --> 00:33:58.260
what was a benefit to like supporting us getting there.

00:33:58.260 --> 00:34:01.880
Now all of a sudden I've got all this like baggage to take along for lack of a better word.

00:34:01.880 --> 00:34:05.400
Anyway, that's, that's probably a larger answer than he was looking forward.

00:34:05.400 --> 00:34:06.560
That's kind of my thoughts on that.

00:34:06.800 --> 00:34:09.240
There were a couple of other comments that you've, you've pretty much covered as well

00:34:09.240 --> 00:34:12.240
on the same vein of, of testing in your courses and so forth.

00:34:12.240 --> 00:34:12.420
Yeah.

00:34:12.420 --> 00:34:12.660
Yeah.

00:34:12.660 --> 00:34:13.100
Okay, cool.

00:34:13.100 --> 00:34:18.300
I don't think that Brian Okun would agree with you, Michael, but, but maybe you should offer

00:34:18.300 --> 00:34:20.180
a course on, on test driven development.

00:34:20.180 --> 00:34:21.400
So that's, that's fine.

00:34:21.400 --> 00:34:21.600
Right.

00:34:21.600 --> 00:34:21.840
Yeah.

00:34:21.840 --> 00:34:22.040
Yeah.

00:34:22.040 --> 00:34:25.420
And if we do a course, probably Brian is going to be the one doing it.

00:34:25.420 --> 00:34:29.300
So I'll let him, you know, I just, I have a very pragmatic feel about that stuff.

00:34:29.300 --> 00:34:30.780
Like, yes, you should have tests.

00:34:30.780 --> 00:34:35.280
You should be able to say, if I push this to production, is it going to crash or not crash?

00:34:35.280 --> 00:34:37.340
Like, is it going to do the thing that it's supposed to do?

00:34:37.340 --> 00:34:43.240
But at the same time, I think it's also really valuable to not put too much extra burden and

00:34:43.240 --> 00:34:47.900
calcify your architecture and your decisions on this package or this structure and be able

00:34:47.900 --> 00:34:50.300
to move quick when you find that there's other things.

00:34:50.300 --> 00:34:54.400
Anyway, that's, that's about this, the tension I'm trying to balance in my world, not speaking

00:34:54.400 --> 00:34:55.040
for Brian, right?

00:34:55.140 --> 00:34:58.760
If I could just maybe pick up on one of the statements you were making on the way through.

00:34:58.760 --> 00:35:02.420
The other thing also to all of us really have to bear in mind is if somebody is paying you

00:35:02.420 --> 00:35:06.880
to do this, there are a number of things you could be doing in any given part of the day

00:35:06.880 --> 00:35:09.340
that would help the company, which is ultimately what you're being paid for.

00:35:09.340 --> 00:35:14.780
It may be that writing the last 90 to 95% test coverage isn't actually nearly as useful

00:35:14.780 --> 00:35:16.480
as the next problem on the list.

00:35:16.920 --> 00:35:22.960
So you got to ask yourself, how upset will either the users or the business folks be

00:35:22.960 --> 00:35:27.060
if that part of the site stops working or if that part of the application stops working?

00:35:27.060 --> 00:35:31.580
And would they be willing to accept a little bit of uncertainty there for, you know, more

00:35:31.580 --> 00:35:32.980
features or something like that?

00:35:32.980 --> 00:35:33.340
Exactly.

00:35:33.340 --> 00:35:33.640
Yeah.

00:35:33.640 --> 00:35:33.940
Yeah.

00:35:33.940 --> 00:35:37.680
That said, when I was, when people would ask, oh, we need this new feature.

00:35:37.680 --> 00:35:40.220
How much is it going to cost in terms of time and energy?

00:35:40.220 --> 00:35:43.820
I wouldn't say, well, here's how much the feature costs and here's how much the test costs.

00:35:43.820 --> 00:35:46.540
And here's how much the refactoring to keep things clean.

00:35:46.780 --> 00:35:49.040
I would just put that into one and go, that's the price.

00:35:49.040 --> 00:35:53.960
And then, you know, then you don't have to have that discussion of, well, yes, you can

00:35:53.960 --> 00:35:58.500
add this feature, but please don't take time to refactor the code so that it's not building

00:35:58.500 --> 00:35:59.320
up technical debt.

00:35:59.320 --> 00:36:00.820
It's like, no, no, no, that's the price.

00:36:00.820 --> 00:36:01.780
This is what it costs.

00:36:01.780 --> 00:36:02.080
Yeah.

00:36:02.080 --> 00:36:02.600
Yeah.

00:36:02.600 --> 00:36:02.840
Yeah.

00:36:02.840 --> 00:36:03.400
Exactly.

00:36:03.400 --> 00:36:03.800
Yeah.

00:36:03.800 --> 00:36:07.360
I think maybe while, while we're going through some excellent comments that have come through,

00:36:07.360 --> 00:36:10.740
it might be worth, there's two more that just leapt out to me that are probably

00:36:10.740 --> 00:36:12.400
interesting discussions for most people.

00:36:12.400 --> 00:36:14.760
There's one from Data Goose, which I can just read.

00:36:14.860 --> 00:36:18.400
It's basically pipn versus vn versus conda, pros and cons at scale.

00:36:18.400 --> 00:36:18.780
Yeah.

00:36:18.780 --> 00:36:21.280
That's an excellent question, I think, of a discussion.

00:36:21.280 --> 00:36:26.640
And then not quite, well, not actually related at all, but in the kind of Python vein, Prodvan

00:36:26.640 --> 00:36:30.840
has asked, with all the new pips being merged and people calling it a bit bloated with features,

00:36:30.840 --> 00:36:33.020
what are your thoughts on that?

00:36:33.020 --> 00:36:33.260
Yeah.

00:36:33.460 --> 00:36:33.680
Yeah.

00:36:33.680 --> 00:36:34.440
I can touch on those.

00:36:34.440 --> 00:36:37.140
I'll get your, both of your thoughts on this as well.

00:36:37.480 --> 00:36:44.100
So for me, I'm not using pipn, I'm not using poetry, I'm not using the other things.

00:36:44.100 --> 00:36:47.120
And that's not necessarily a negative view on those.

00:36:47.120 --> 00:36:52.400
But for me, I've just focused on using Python's virtual BNV stuff.

00:36:52.400 --> 00:36:53.160
A couple of reasons.

00:36:53.160 --> 00:36:54.880
For me, it just works.

00:36:54.880 --> 00:36:56.120
I find it simple.

00:36:56.120 --> 00:36:58.220
I don't have to make sure I have anything installed.

00:36:58.220 --> 00:37:00.140
I don't have to alter my workflow.

00:37:00.300 --> 00:37:01.560
I'm going through a tutorial.

00:37:01.560 --> 00:37:05.120
I don't have to go, oh, well, they said do this thing, but I'm going to do it in this

00:37:05.120 --> 00:37:05.760
other way.

00:37:05.760 --> 00:37:10.980
When I'm talking to other people or maybe making a part of a course, these things, they wax

00:37:10.980 --> 00:37:11.600
and they wane.

00:37:11.600 --> 00:37:16.460
And, you know, it might be poetry this year, but next year it's pipn or vice versa.

00:37:16.460 --> 00:37:18.880
And you bake that flow into a course.

00:37:18.880 --> 00:37:22.800
And then people are like, well, really, you told me to use pipn, but I feel like poetry

00:37:22.800 --> 00:37:23.460
is kind of the thing.

00:37:23.460 --> 00:37:27.160
It's like, oh, yeah, well, you can't change those once they're, you know, solidified.

00:37:27.160 --> 00:37:27.380
Right.

00:37:27.380 --> 00:37:28.800
And these are like months long projects.

00:37:28.800 --> 00:37:30.840
I don't know for me, it's not ideal.

00:37:30.840 --> 00:37:35.400
What I would really like to see is the PEP that has dunder py packages accepted and kind

00:37:35.400 --> 00:37:39.300
of like a, there's this convention of, you know, if I've got an environment, I just run

00:37:39.300 --> 00:37:39.880
Python stuff.

00:37:39.880 --> 00:37:41.020
It just finds the environment.

00:37:41.020 --> 00:37:45.300
But until something like that comes along, I'm going to go with virtual environment versus

00:37:45.300 --> 00:37:46.940
the pep, poetry, et cetera.

00:37:46.940 --> 00:37:49.020
I think conda is a different story, right?

00:37:49.020 --> 00:37:54.140
I think that the, all these other things versus conda, this is, do I choose like the conda

00:37:54.140 --> 00:37:57.120
data stack sort of style of supply?

00:37:57.120 --> 00:38:00.600
Or do I go straight with PyPI and like the raw Python things?

00:38:00.600 --> 00:38:04.660
So I don't do conda because I'm, I'm mostly doing stuff on the web.

00:38:04.660 --> 00:38:09.260
And something that really bothers me about the web is every now and then you're like, oh,

00:38:09.260 --> 00:38:15.320
you need to update, I don't know, some random library that either your framework is your framework

00:38:15.320 --> 00:38:19.120
or your framework depends upon because there's a CVE security vulnerability.

00:38:19.400 --> 00:38:23.800
And you need to update that hours from the time, you know, not, not days from the time,

00:38:23.800 --> 00:38:27.880
you know, that because you pull up the logs, your website, you can see it's just whack, whack,

00:38:27.880 --> 00:38:28.260
whack.

00:38:28.260 --> 00:38:30.440
And it's constantly being hammered, looking for problems.

00:38:30.440 --> 00:38:33.040
And if something major comes along, you want to be able to go now.

00:38:33.040 --> 00:38:35.100
It like the release is out, put it up now.

00:38:35.100 --> 00:38:40.200
And the conda side often has a little bit of a lag because there's more that you've got to

00:38:40.200 --> 00:38:43.040
like build the binaries and stuff, go along with it.

00:38:43.040 --> 00:38:48.340
That latency that's not normally a big deal is a big deal when you are running stuff that people

00:38:48.340 --> 00:38:49.340
could be messing with.

00:38:49.340 --> 00:38:53.140
You want to make sure like if anything needs to be updated, it's updated straight away.

00:38:53.140 --> 00:38:54.920
So that's another consideration.

00:38:54.920 --> 00:38:59.220
But if I was doing, say, Patrick's job, that wouldn't matter probably, right?

00:38:59.220 --> 00:39:00.500
Because it's behind the scenes.

00:39:00.500 --> 00:39:04.460
I mean, so actually I'm using conda on my computer, but mainly because I'm used to.

00:39:04.460 --> 00:39:10.700
So when I worked at my first company, I had to use a Windows computer and I had to do data

00:39:10.700 --> 00:39:11.360
science stuff.

00:39:11.360 --> 00:39:13.560
So it's incredibly hard to install.

00:39:13.560 --> 00:39:14.840
Especially there.

00:39:14.840 --> 00:39:15.080
Yeah.

00:39:15.080 --> 00:39:15.400
Yeah.

00:39:15.400 --> 00:39:17.280
Some packages like Geopandas.

00:39:17.280 --> 00:39:19.980
It's hard to install with pip there.

00:39:19.980 --> 00:39:23.700
Now I'm using Linux most of the time and there it works fine.

00:39:23.700 --> 00:39:27.060
So I'm just using conda for my environments to setting them up.

00:39:27.060 --> 00:39:31.520
Just I have all environments in one with one comments, something like pip.

00:39:31.520 --> 00:39:33.800
But then I normally install just via pip.

00:39:34.680 --> 00:39:36.800
So I'm kind of using it wrong.

00:39:36.800 --> 00:39:42.320
But I know some of my colleagues, especially data science people, they use conda for running

00:39:42.320 --> 00:39:43.800
jobs in the Spark cluster.

00:39:43.800 --> 00:39:44.880
And yeah.

00:39:44.880 --> 00:39:49.260
But we personally, so my team, we're using pecs, which is something like.

00:39:49.260 --> 00:39:49.720
Oh, right.

00:39:49.720 --> 00:39:50.240
Okay.

00:39:50.240 --> 00:39:50.660
Interesting.

00:39:50.660 --> 00:39:52.540
So VNs, something like this.

00:39:52.540 --> 00:39:52.820
Yes.

00:39:52.920 --> 00:39:53.060
Yeah.

00:39:53.060 --> 00:39:58.460
So pecs, that's a way to like package the things you're running up and deliver almost

00:39:58.460 --> 00:40:00.180
like a zip file, if I remember correctly.

00:40:00.180 --> 00:40:01.360
And then like running that directly.

00:40:01.360 --> 00:40:01.640
Right.

00:40:01.640 --> 00:40:02.500
Oh, interesting.

00:40:02.700 --> 00:40:04.500
It's something like a zip VNs.

00:40:04.500 --> 00:40:06.420
You need an interpreter, by the way.

00:40:06.420 --> 00:40:12.840
So you have to have the correct interpreter on your system to then run this file or run

00:40:12.840 --> 00:40:13.420
this pecs file.

00:40:13.420 --> 00:40:15.460
So it's kind of a nice thing.

00:40:15.460 --> 00:40:18.180
It's kind of a binary, which you can chip everywhere.

00:40:18.180 --> 00:40:19.000
That's the thing.

00:40:19.000 --> 00:40:23.780
You can test it on your CI and then deploy it, this thing on a CI and deploy exactly that

00:40:23.780 --> 00:40:24.780
on production system.

00:40:24.780 --> 00:40:30.340
So you don't have to install, alter that in any way from your test environment to production,

00:40:30.340 --> 00:40:30.940
which is nice.

00:40:30.940 --> 00:40:31.280
Yeah.

00:40:31.280 --> 00:40:32.100
That's pretty interesting.

00:40:32.220 --> 00:40:34.900
It's almost like halfway to Docker, but not quite.

00:40:34.900 --> 00:40:35.600
Yes.

00:40:35.600 --> 00:40:37.500
Yeah.

00:40:37.500 --> 00:40:37.840
Yeah.

00:40:37.840 --> 00:40:39.580
And I don't mean that in a positive or negative way.

00:40:39.580 --> 00:40:44.920
It's just, it is like, it doesn't come with the runtime stuff of the machine, like the

00:40:44.920 --> 00:40:48.220
interpreter and other stuff you might set up like Docker would, but it comes with everything

00:40:48.220 --> 00:40:50.160
else, like exactly as you would put it, right?

00:40:50.160 --> 00:40:51.360
Like the packages and stuff.

00:40:51.360 --> 00:40:51.820
So yeah.

00:40:51.820 --> 00:40:56.940
I think this whole packaging and deploying and moving Python applications around, it's interesting.

00:40:56.940 --> 00:40:57.660
It's interesting.

00:40:57.660 --> 00:40:58.340
It's changing.

00:40:58.340 --> 00:41:01.840
We're also looking into poetry now and let's see how this works.

00:41:01.840 --> 00:41:02.200
Yeah.

00:41:02.200 --> 00:41:06.660
Speaking of which, Magnus says, I use poetry to get into pyproject.toml.

00:41:06.660 --> 00:41:11.240
However, not be able to do editable install via pip is a big hurdle.

00:41:11.240 --> 00:41:11.580
Yeah.

00:41:11.580 --> 00:41:11.800
Okay.

00:41:11.800 --> 00:41:12.400
Interesting.

00:41:12.400 --> 00:41:12.640
Yeah.

00:41:12.640 --> 00:41:13.020
Yeah.

00:41:13.020 --> 00:41:14.900
I'm going to have the next question.

00:41:14.900 --> 00:41:16.560
Do it a notebook themes?

00:41:16.560 --> 00:41:17.480
Yes or no?

00:41:17.480 --> 00:41:18.620
If yes, which one?

00:41:18.720 --> 00:41:19.260
Oh, interesting.

00:41:19.260 --> 00:41:19.540
Yeah.

00:41:19.540 --> 00:41:22.560
So for me, I do some stuff in notebooks.

00:41:22.560 --> 00:41:27.800
I have like accounting and what courses are popular and what are people doing there?

00:41:27.800 --> 00:41:29.440
What podcasts are popular?

00:41:29.440 --> 00:41:32.980
And so that kind of analysis and graphic do that in notebooks.

00:41:32.980 --> 00:41:36.840
But boy, it's just the plain old JupyterLab notebooks.

00:41:37.120 --> 00:41:38.140
Nothing super fancy.

00:41:38.140 --> 00:41:38.720
Right.

00:41:38.720 --> 00:41:42.880
I looked at some notebook themes after this question and they look really cool.

00:41:42.880 --> 00:41:43.940
Maybe I should check it out.

00:41:43.940 --> 00:41:46.480
You probably spend more time in notebooks than I do anyway.

00:41:46.480 --> 00:41:47.580
Have you done anything with it?

00:41:47.580 --> 00:41:51.920
I don't know if I spent more time, just some basic stuff to play around with code.

00:41:51.920 --> 00:41:55.840
I think it's superior to IPython, just the way the UI works.

00:41:55.840 --> 00:41:58.000
And I played with Jupyter themes once.

00:41:58.000 --> 00:42:04.100
I tried some, but always at some point there was some weird thing with the CSS, in my opinion,

00:42:04.100 --> 00:42:05.360
and I didn't like it.

00:42:05.360 --> 00:42:07.120
Some table formatting stuff.

00:42:07.120 --> 00:42:07.520
Right.

00:42:07.520 --> 00:42:08.540
That's a challenge, right?

00:42:08.540 --> 00:42:13.000
Like it's how comprehensive is that theme going to be?

00:42:13.000 --> 00:42:16.140
And, you know, once it breaks through and then like, oh, it looks good.

00:42:16.140 --> 00:42:16.480
It looks good.

00:42:16.480 --> 00:42:17.240
Oh, it looks horrible.

00:42:17.240 --> 00:42:21.080
I can't even hardly, and if it gets to the point where you can't even make sense of

00:42:21.080 --> 00:42:23.780
like some graph or something, then it's out, right?

00:42:23.780 --> 00:42:24.120
Yeah.

00:42:24.120 --> 00:42:28.340
And also like the, for example, I played a lot with Bokeh or Bokeh.

00:42:28.340 --> 00:42:32.540
And then also it didn't really fit in that theme, right?

00:42:32.540 --> 00:42:35.120
It's just like wide and everything around it is as dark.

00:42:35.120 --> 00:42:37.000
And it didn't, it didn't just feel right.

00:42:37.000 --> 00:42:38.060
I like the idea of themes.

00:42:38.060 --> 00:42:42.140
I've also, you know, say like PyCharm has like themes and stuff that I put in there.

00:42:42.140 --> 00:42:43.640
And I'm always, oh, well, this one is great.

00:42:43.640 --> 00:42:46.140
Then I'm like, ah, but this part, I don't know.

00:42:46.140 --> 00:42:46.860
And I don't know.

00:42:46.860 --> 00:42:50.120
There's something to be said for just going back to the plain old standard.

00:42:50.120 --> 00:42:54.400
I guess another important question, Patrick, is font ligatures or no font ligatures?

00:42:54.400 --> 00:42:55.360
Are you familiar with those?

00:42:55.360 --> 00:42:57.400
I have no feeling about that.

00:42:57.400 --> 00:42:58.240
Really?

00:42:58.240 --> 00:42:58.800
Okay.

00:42:59.320 --> 00:43:04.660
I kind of like them, but I know that people seem like, why does your code look weird and whatnot?

00:43:04.660 --> 00:43:09.880
So I also normally don't use them because I have the feeling that it's changing stuff.

00:43:09.880 --> 00:43:11.100
That's not in the code.

00:43:11.100 --> 00:43:12.160
It's a bit weird.

00:43:12.160 --> 00:43:13.700
It is weird.

00:43:13.700 --> 00:43:14.740
I kind of like it.

00:43:14.740 --> 00:43:17.140
It's, I kind of feel like I live for the future when I use them.

00:43:17.140 --> 00:43:20.840
The thing that's okay with me is they've changed the way it looks, but only for me.

00:43:20.840 --> 00:43:21.200
Right.

00:43:21.220 --> 00:43:24.720
They don't actually change the meaning, but yeah, they are a little bit crazy.

00:43:24.720 --> 00:43:25.060
All right.

00:43:25.060 --> 00:43:27.820
Maybe catch a live stream question from Moomten.

00:43:27.820 --> 00:43:33.800
What would be the best Python project types to do to learn some cool things you can do,

00:43:33.800 --> 00:43:35.080
things Python can do maybe?

00:43:35.080 --> 00:43:37.940
So, you know, Patrick, I want to get your thoughts on this one as well.

00:43:38.200 --> 00:43:40.440
I think it depends on where you want to go.

00:43:40.440 --> 00:43:42.060
You know, people ask me this often.

00:43:42.060 --> 00:43:43.680
It's like, well, do you want to go down?

00:43:43.680 --> 00:43:45.700
I want to build websites and web APIs and stuff.

00:43:45.700 --> 00:43:50.220
Then there's a series of things that you can do there to get you down that path.

00:43:50.220 --> 00:43:55.520
And if what you want to do is you want to go down the data science or data engineering side,

00:43:55.520 --> 00:43:58.100
there's a different set of things that you should learn to go to it.

00:43:58.100 --> 00:44:01.580
Like, so you should be playing with Jupyter and you should be playing with pandas.

00:44:01.580 --> 00:44:04.460
But if you want to go do stuff on the web, you could completely ignore those things.

00:44:04.460 --> 00:44:07.580
So I think you want to decide in the path that you'd like to take.

00:44:07.580 --> 00:44:10.360
And then start on really small stuff, right?

00:44:10.360 --> 00:44:11.400
Like, you know what?

00:44:11.400 --> 00:44:13.160
I'll give you an example of something I have to do all the time.

00:44:13.160 --> 00:44:19.600
I've got a course folder full of MP4s and I need to turn those into what is the file name?

00:44:19.600 --> 00:44:21.420
How many seconds long is it?

00:44:21.420 --> 00:44:24.420
What is the resulting title of that going to be?

00:44:24.420 --> 00:44:28.180
And I used to just go through by hand and go, okay, we'll go to the finder.

00:44:28.180 --> 00:44:29.520
All right, this is a minute 30.

00:44:29.520 --> 00:44:31.140
So that's 90 seconds.

00:44:31.140 --> 00:44:33.280
And then the title of the file is this.

00:44:33.280 --> 00:44:34.660
And so the title is going to be that.

00:44:34.660 --> 00:44:36.660
And you do that for 150 files.

00:44:36.960 --> 00:44:38.640
You're probably going to make a mistake.

00:44:38.640 --> 00:44:39.380
Not fun.

00:44:39.380 --> 00:44:44.260
So I decided instead of complaining about that week after week, I wrote a script that would

00:44:44.260 --> 00:44:48.740
read the file structure, do some stuff to figure out the time, generate the output that it needed.

00:44:48.740 --> 00:44:53.440
And boom, like all of a sudden, now that's an instant answer instead of an hour long project

00:44:53.440 --> 00:44:54.200
that's AirPro.

00:44:54.620 --> 00:44:56.800
Everybody's life is full of these little types of projects.

00:44:56.800 --> 00:44:58.080
Like, oh, this is super annoying.

00:44:58.080 --> 00:44:59.160
I have to do this all the time.

00:44:59.160 --> 00:45:00.700
Why do I have to keep doing this?

00:45:00.700 --> 00:45:01.920
I keep making the mistakes.

00:45:01.920 --> 00:45:05.000
I do it at the end of the week because I want to put it off.

00:45:05.000 --> 00:45:08.960
And if I do it frequently, like the repetition of it just turns up my day.

00:45:09.140 --> 00:45:13.260
And there's probably a way to do that in Python and make it run in five seconds or less.

00:45:13.480 --> 00:45:17.200
And then that just completely changes the way that you approach like that part of your

00:45:17.200 --> 00:45:17.500
life.

00:45:17.500 --> 00:45:18.280
Like, well, that's solved.

00:45:18.280 --> 00:45:19.280
That's automatic now.

00:45:19.280 --> 00:45:20.360
What else can I do?

00:45:20.360 --> 00:45:23.820
And so, you know, Patrick and Kim as well.

00:45:23.820 --> 00:45:24.340
What do you guys think?

00:45:24.480 --> 00:45:25.980
Sorry, I dropped out just slightly.

00:45:25.980 --> 00:45:26.760
Fair enough.

00:45:26.760 --> 00:45:29.240
The best Python project types to do cool things.

00:45:29.240 --> 00:45:32.960
I would find, in all honesty, exactly what you're saying there.

00:45:32.960 --> 00:45:38.140
What I ended up doing a lot of with Python when I learned it, I didn't have any.

00:45:38.140 --> 00:45:39.340
I wasn't employed at the time.

00:45:39.340 --> 00:45:40.420
I was at university level.

00:45:40.420 --> 00:45:44.120
I wasn't using it for the master's thesis I was pretending to do.

00:45:44.120 --> 00:45:47.980
I basically, a friend of mine knew it and used it.

00:45:47.980 --> 00:45:49.100
And he found it quite nifty.

00:45:49.100 --> 00:45:52.960
And when I looked at him using it, I thought, well, this could be quite a powerful tool.

00:45:52.960 --> 00:45:55.340
And ultimately, I had a few small tasks to automate.

00:45:55.340 --> 00:45:58.000
And for the life of me, I can't remember what they were now.

00:45:58.000 --> 00:45:59.400
But similar kind of things.

00:45:59.400 --> 00:46:01.120
I had, say, 100 files to rename.

00:46:01.120 --> 00:46:06.100
Or I needed to extract the text out of 15 Excel files and join them together.

00:46:06.100 --> 00:46:08.200
Simple things like that that you could do by hand.

00:46:08.200 --> 00:46:11.200
It would take you a couple of hours and it would be done.

00:46:11.200 --> 00:46:13.160
Or it would possibly be error prone.

00:46:13.160 --> 00:46:14.240
You'd make mistakes and so forth.

00:46:14.240 --> 00:46:15.780
So I turned to Python for that kind of thing.

00:46:15.780 --> 00:46:20.760
And ultimately, I found before I knew it that I had, you know, 50 Python files on my system

00:46:20.760 --> 00:46:22.780
doing one thing well once.

00:46:23.120 --> 00:46:24.360
Every now and then, I, you know.

00:46:24.360 --> 00:46:27.300
And you learn other little, you're like, oh, this time I got to work with Excel.

00:46:27.300 --> 00:46:29.240
Now you know how to talk to Excel files.

00:46:29.240 --> 00:46:30.560
Oh, this one's got to talk to a database.

00:46:30.560 --> 00:46:31.780
Now I know how to talk to a database.

00:46:31.780 --> 00:46:33.220
But they're not huge projects.

00:46:33.220 --> 00:46:33.580
No.

00:46:33.580 --> 00:46:37.520
And to think of an example, I acquired some music of some form.

00:46:37.520 --> 00:46:40.800
And I didn't like the way it was, the MP3 tags were done at the time.

00:46:41.100 --> 00:46:44.760
So then I had to figure out a Python library to do whatever those things are called.

00:46:44.760 --> 00:46:46.160
Itags or tags or whatever.

00:46:46.160 --> 00:46:46.720
Yeah, yeah, yeah.

00:46:46.720 --> 00:46:48.220
I've forgotten exactly what the ID.

00:46:48.220 --> 00:46:49.040
Effects.

00:46:49.040 --> 00:46:49.460
That's the one.

00:46:49.460 --> 00:46:50.020
Yeah, something like that.

00:46:50.020 --> 00:46:50.220
Yeah.

00:46:50.220 --> 00:46:51.600
So I had to figure that out.

00:46:51.740 --> 00:46:53.620
And so suddenly I know about a new module.

00:46:53.620 --> 00:46:58.200
And I would suggest, in all honesty, that the best way to learn some Python easily is the

00:46:58.200 --> 00:47:00.900
next time you find yourself sitting down and thinking, well, this will take me a couple

00:47:00.900 --> 00:47:03.280
of hours to click and drag and push the buttons, whatever.

00:47:03.280 --> 00:47:05.960
Think about if you can write some Python to do it instead.

00:47:06.300 --> 00:47:07.020
And keep doing that.

00:47:07.020 --> 00:47:10.380
And before you know it, anything you can't write some Python to do becomes an irritating

00:47:10.380 --> 00:47:13.200
problem because you're used to writing scripts to solve all your problems.

00:47:13.200 --> 00:47:13.680
That's right.

00:47:13.680 --> 00:47:17.620
That's why we both said, oh, we have all these scripts just laying around for these types of

00:47:17.620 --> 00:47:18.020
things, right?

00:47:18.020 --> 00:47:18.860
Patrick, what do you think?

00:47:18.860 --> 00:47:19.560
I can just agree.

00:47:19.560 --> 00:47:20.700
Automate everything.

00:47:20.700 --> 00:47:22.680
That's my answer to that.

00:47:22.680 --> 00:47:28.340
And if you want to go forward, the problem is you only come so far with that, like self-learning.

00:47:28.340 --> 00:47:32.400
At some point, you have to get in touch with more experienced people.

00:47:32.400 --> 00:47:34.800
And that's my second answer to that.

00:47:35.160 --> 00:47:40.980
So at some point, go to a company or go to an open source project where you have a mentor,

00:47:40.980 --> 00:47:46.100
where you have people, where you can grow, which give you the experience, which you only

00:47:46.100 --> 00:47:47.420
can get from other people.

00:47:47.420 --> 00:47:47.620
Yeah.

00:47:47.620 --> 00:47:48.700
You take some online courses.

00:47:48.700 --> 00:47:50.980
You can join something like Python Discord.

00:47:50.980 --> 00:47:53.340
There's a lot of options for where you can find that.

00:47:53.340 --> 00:47:58.040
But yeah, maybe even that means find a job where you can, you're not the smartest person

00:47:58.040 --> 00:48:00.480
in the room in that area, right?

00:48:00.480 --> 00:48:03.220
It's like, because at that point, you've got no one left to ask.

00:48:03.540 --> 00:48:06.100
You're just on the internet on Stack Overflow hunting around.

00:48:06.100 --> 00:48:07.720
And so that can be also a big help.

00:48:07.720 --> 00:48:07.940
Yeah.

00:48:07.940 --> 00:48:08.300
Yeah.

00:48:08.300 --> 00:48:10.000
Never be the smartest person in the room.

00:48:10.000 --> 00:48:10.260
Yeah.

00:48:10.260 --> 00:48:11.260
If you can avoid it.

00:48:11.260 --> 00:48:11.760
Exactly.

00:48:11.760 --> 00:48:12.240
Exactly.

00:48:12.240 --> 00:48:15.840
Also says there are some good books out there, like Automate the Boring Stuff by Al Swagger.

00:48:15.840 --> 00:48:16.440
That's excellent.

00:48:16.440 --> 00:48:16.960
Yeah.

00:48:16.960 --> 00:48:17.440
Yeah.

00:48:17.500 --> 00:48:18.460
I recommend that.

00:48:18.460 --> 00:48:20.580
It's in the same vein of what we've been talking about.

00:48:20.580 --> 00:48:24.780
I was going to say, I would have recommended Mark Pilgrim's Dive into Python, but it's quite

00:48:24.780 --> 00:48:25.820
a few years out of date now.

00:48:25.820 --> 00:48:28.300
And it does really assume you know how to develop software.

00:48:28.300 --> 00:48:31.220
But that's also, that was what taught me a lot of useful things.

00:48:31.220 --> 00:48:31.620
For sure.

00:48:31.620 --> 00:48:32.180
Okay.

00:48:32.180 --> 00:48:32.660
Yeah.

00:48:32.660 --> 00:48:33.120
Other questions?

00:48:33.120 --> 00:48:33.460
You guys.

00:48:33.460 --> 00:48:34.760
Got a few more minutes.

00:48:34.760 --> 00:48:37.260
We've got maybe five minutes and then lots of call it.

00:48:37.260 --> 00:48:39.260
Kim, I think you can choose, right?

00:48:39.260 --> 00:48:40.980
I already stole one of your questions.

00:48:40.980 --> 00:48:44.120
The one about notebook themes or was it?

00:48:44.380 --> 00:48:44.740
Yeah.

00:48:44.740 --> 00:48:46.980
I mean, SQLite and MongoDB, right?

00:48:46.980 --> 00:48:48.400
There's one which we kind of.

00:48:48.400 --> 00:48:50.560
Well, that's because maybe we've got a few minutes, Michael.

00:48:50.560 --> 00:48:54.300
I'm going to self-indulgently ask you the question I submitted, if that makes sense.

00:48:54.300 --> 00:48:56.080
Because I think there's some value there to a lot of people.

00:48:56.080 --> 00:48:59.080
What I basically asked you was more about the software industry.

00:48:59.080 --> 00:49:02.680
And what you're saying, in your conversations with people over the last year or, you know,

00:49:02.680 --> 00:49:06.040
year plus, et cetera, particularly in the COVID times, have you noticed an increased

00:49:06.040 --> 00:49:09.360
appetite for employers to be willing to have their developers work fully remotely?

00:49:09.360 --> 00:49:13.160
I know, as I said, this has become more common in the US and it's common in other

00:49:13.160 --> 00:49:14.320
countries in recent years.

00:49:14.600 --> 00:49:14.740
Yes.

00:49:14.740 --> 00:49:16.620
I'm wondering if the pandemic is...

00:49:16.620 --> 00:49:17.340
Yeah, work for...

00:49:17.340 --> 00:49:17.580
Remotely.

00:49:17.580 --> 00:49:17.940
Yeah.

00:49:17.940 --> 00:49:18.260
Yeah.

00:49:18.260 --> 00:49:22.500
Has the pandemic hastened acceptance of employees from outside the employee's country?

00:49:22.500 --> 00:49:24.080
And I also, this is a South African.

00:49:24.080 --> 00:49:24.400
Yeah.

00:49:24.400 --> 00:49:26.320
And there's lots of small nations like mine.

00:49:26.320 --> 00:49:28.120
We've got a small software industry, for example.

00:49:28.120 --> 00:49:32.340
But if I think of, say, Lesotho and Swaziland, our two nearest neighbors, if you want to do

00:49:32.340 --> 00:49:34.520
any kind of software work, you have to at least come to South Africa.

00:49:34.520 --> 00:49:39.760
And I'm wondering if the scope is opening for those of us from countries like ours to do more

00:49:39.760 --> 00:49:40.380
global work.

00:49:40.380 --> 00:49:40.860
Short answer.

00:49:41.020 --> 00:49:41.540
Absolutely.

00:49:41.540 --> 00:49:42.040
Yeah.

00:49:42.040 --> 00:49:43.500
I definitely, definitely think so.

00:49:43.500 --> 00:49:49.700
I have worked from home in some fashion or another remotely since 2006.

00:49:49.700 --> 00:49:52.820
Those are earlier days of working from home.

00:49:52.940 --> 00:49:54.380
Where it was a little bit...

00:49:54.380 --> 00:49:56.000
And I ended up there in an interesting way.

00:49:56.000 --> 00:49:58.420
I worked for this company that I love working for.

00:49:58.420 --> 00:50:03.260
And they said, well, my wife got her PhD and we moved from the West Coast to the East Coast

00:50:03.260 --> 00:50:05.460
so she could go to a university and teach there.

00:50:05.460 --> 00:50:09.540
And so I spoke to the company I worked at and I said, hey, you know, I'm not going to completely

00:50:09.540 --> 00:50:12.040
hold back my wife's career just so I can stay working here.

00:50:12.040 --> 00:50:12.720
I have to move.

00:50:12.720 --> 00:50:13.340
Like, we're moving.

00:50:13.340 --> 00:50:15.260
Would you like me to still work for you?

00:50:15.260 --> 00:50:16.560
We can figure out something remote.

00:50:16.560 --> 00:50:17.980
And they're like, I don't think it's going to work.

00:50:18.060 --> 00:50:19.180
I don't think we can do this remotely.

00:50:19.180 --> 00:50:19.840
All right.

00:50:19.840 --> 00:50:20.780
I'll find something else.

00:50:20.780 --> 00:50:24.360
Coincidentally, like a great company reached out to me a week later, said, hey, we'd love

00:50:24.360 --> 00:50:25.040
to give you a job.

00:50:25.040 --> 00:50:27.080
And it's like traveling around or remote, whatever.

00:50:27.080 --> 00:50:28.220
It's fantastic.

00:50:28.220 --> 00:50:28.740
I'll take it.

00:50:28.740 --> 00:50:30.100
I moved away.

00:50:30.100 --> 00:50:33.800
The other company called me and said, well, are you going to maybe keep working for us?

00:50:33.800 --> 00:50:34.560
Like, no, I asked.

00:50:34.560 --> 00:50:35.200
You said no.

00:50:35.200 --> 00:50:36.540
Like, I took another job.

00:50:36.540 --> 00:50:37.220
I'm gone.

00:50:37.220 --> 00:50:37.500
Right.

00:50:37.500 --> 00:50:38.580
That was kind of the thing.

00:50:38.620 --> 00:50:40.920
It was like there was maybe we can make it work.

00:50:40.920 --> 00:50:46.020
I really like working with you, but probably not was the way I think that's less so, but

00:50:46.020 --> 00:50:48.460
it's still persisted up until 2019.

00:50:48.460 --> 00:50:51.920
There were many companies like we're going to get this campus.

00:50:51.920 --> 00:50:53.240
We're going to get an amazing office.

00:50:53.240 --> 00:50:53.500
Yeah.

00:50:53.500 --> 00:50:56.700
You got to commute for an hour and a half and be on some random bus and a bunch of traffic,

00:50:56.700 --> 00:50:57.480
but it's fine.

00:50:57.480 --> 00:50:58.480
We'll give the bus Wi-Fi.

00:50:58.480 --> 00:50:59.480
You're going to love it.

00:50:59.480 --> 00:50:59.700
Right.

00:50:59.700 --> 00:51:04.160
And then it was you can either go out of business or you can let people work from home.

00:51:04.160 --> 00:51:04.680
Like, oh, you know what?

00:51:04.680 --> 00:51:05.620
Work from home is good.

00:51:05.620 --> 00:51:06.800
We don't mind this at all.

00:51:06.800 --> 00:51:12.440
And I think specifically for software developers, what has happened is we built up tools and

00:51:12.440 --> 00:51:17.300
ways of working that are already perfect for this disconnected async way.

00:51:17.300 --> 00:51:18.160
We've got Git.

00:51:18.160 --> 00:51:20.020
We've got GitHub or something like it.

00:51:20.020 --> 00:51:22.800
We've got Zoom and other forms of screen sharing.

00:51:22.800 --> 00:51:23.960
We've got voiceover IP.

00:51:23.960 --> 00:51:27.700
We've got the way to say, hey, let's work on this project together.

00:51:27.700 --> 00:51:29.240
I'll just fire up screen sharing.

00:51:29.240 --> 00:51:33.140
And it's better than if I sit at your desk because we both can control the keyboard and

00:51:33.140 --> 00:51:34.600
I can see it right in front of me.

00:51:34.600 --> 00:51:35.940
I'm not like off to the side.

00:51:36.400 --> 00:51:40.820
And I think there's a lot of companies that are realizing that worked.

00:51:40.820 --> 00:51:42.040
We are privileged for that.

00:51:42.040 --> 00:51:42.840
Yeah, absolutely.

00:51:42.840 --> 00:51:48.320
And so what I think is there were many companies who still believed maybe it's possible, but

00:51:48.320 --> 00:51:49.100
it's not for us.

00:51:49.100 --> 00:51:52.140
And they were forced to realize that didn't break everything.

00:51:52.660 --> 00:51:58.080
So maybe we can hire the best talent around the world, not the best talent out of just

00:51:58.080 --> 00:52:02.820
Oklahoma City or out of Lisbon or whatever, right?

00:52:02.820 --> 00:52:06.840
Like we can all of a sudden really expand out and do something amazing.

00:52:06.840 --> 00:52:09.620
So not every company is going to come along for that ride.

00:52:09.620 --> 00:52:12.320
But I think many, many more are open to it.

00:52:12.440 --> 00:52:13.060
That's encouraging.

00:52:13.060 --> 00:52:13.360
Yeah.

00:52:13.360 --> 00:52:14.800
I do agree with you there entirely.

00:52:14.800 --> 00:52:20.080
I mean, particularly in the South African context, quite a lot of employers have had to have

00:52:20.080 --> 00:52:21.320
some of the employers work from home.

00:52:21.320 --> 00:52:24.520
There was a time we all worked from home, but quite a lot of people are now back in the office.

00:52:24.520 --> 00:52:29.340
But, you know, restrictions on gatherings to kind of try to combat spread of COVID have

00:52:29.340 --> 00:52:30.580
meant you can't fill the building.

00:52:30.660 --> 00:52:34.100
So in many cases, the IT staff are the ones who are working from home, because you're

00:52:34.100 --> 00:52:35.640
right, we are the best equipped to do this.

00:52:35.640 --> 00:52:37.800
You know, we're using Git collaboratively, et cetera.

00:52:37.800 --> 00:52:40.460
We're mainly talking to servers that aren't our computers anyhow.

00:52:40.460 --> 00:52:43.460
So whether you do that from inside the office or do it.

00:52:43.460 --> 00:52:43.840
Exactly.

00:52:43.840 --> 00:52:45.020
All this move to the cloud.

00:52:45.020 --> 00:52:45.440
Exactly.

00:52:45.440 --> 00:52:45.680
Yeah.

00:52:45.680 --> 00:52:48.780
The data center is no longer down the hall behind the VPN.

00:52:48.780 --> 00:52:53.060
The data center is out on Amazon or Linode or DigitalOcean or whatever.

00:52:53.060 --> 00:52:56.580
For that matter, even if it is down the hall behind the VPN, you're still talking to

00:52:56.580 --> 00:52:56.960
it remotely.

00:52:56.960 --> 00:53:00.100
You just were sitting at a desk above it instead of at home.

00:53:00.300 --> 00:53:04.800
So that I think I would like to think, and I must hasten to add, if my employer happens

00:53:04.800 --> 00:53:08.060
to be listening, I'm not looking myself, but there are lots of people in the South African

00:53:08.060 --> 00:53:12.880
or otherwise environment, smaller, with smaller industries like ours, where there's talent

00:53:12.880 --> 00:53:13.120
there.

00:53:13.120 --> 00:53:16.920
And most people don't necessarily know you wouldn't come looking to South Africa for a

00:53:16.920 --> 00:53:19.280
software developer, for example, if, as you say, you're not Oklahoma City.

00:53:19.280 --> 00:53:23.400
But maybe there is kind of a good sign that we'll start expanding this kind of look.

00:53:23.400 --> 00:53:24.020
I think so.

00:53:24.020 --> 00:53:28.200
I think it's going to be progressive, but certainly the trends are in that way.

00:53:28.200 --> 00:53:30.140
Everybody's been, you know, shocked.

00:53:30.160 --> 00:53:32.380
Into realizing how this is going to work.

00:53:32.380 --> 00:53:37.880
And I think, honestly, there's probably some managers and some business leaders who are

00:53:37.880 --> 00:53:39.960
like, I actually don't even want to go back to the office.

00:53:39.960 --> 00:53:41.240
I kind of like working from home too.

00:53:41.240 --> 00:53:42.200
Like, I hate the traffic.

00:53:42.200 --> 00:53:42.620
Yeah.

00:53:42.620 --> 00:53:43.580
You know, not everyone.

00:53:43.580 --> 00:53:46.620
Like, yeah, I heard Tim Cook is like, oh, I can't wait till we get back together.

00:53:46.620 --> 00:53:48.360
This is what makes us special.

00:53:48.360 --> 00:53:49.980
And I don't know, maybe it is, maybe it isn't.

00:53:49.980 --> 00:53:53.120
But I think there's still going to be a lot of people who are like, actually, this is a pretty

00:53:53.120 --> 00:53:54.500
good way for us to work.

00:53:54.500 --> 00:53:54.940
Exactly.

00:53:54.940 --> 00:53:55.400
Yeah.

00:53:55.700 --> 00:53:58.700
I think there's a lot of people along the lines of, I'd like to see my colleagues every

00:53:58.700 --> 00:54:00.680
now and then, but keep working from home most of the time.

00:54:00.680 --> 00:54:05.920
Well, we did that company that I was remote for from 2006, 2000, I guess it was.

00:54:05.920 --> 00:54:08.480
We would have once or twice yearly retreats.

00:54:08.480 --> 00:54:11.820
We would go to some fun town and spend a week together.

00:54:11.820 --> 00:54:12.240
Yes.

00:54:12.420 --> 00:54:16.700
And, you know, do basically like sprints or do presentations to each other.

00:54:16.700 --> 00:54:18.580
And it was great team building.

00:54:18.580 --> 00:54:19.800
We'd go to Toronto.

00:54:19.800 --> 00:54:25.300
We'd go to New Orleans or go to London or something like that and spend a week together.

00:54:25.300 --> 00:54:27.120
And then we'd all go back to our remote places.

00:54:27.120 --> 00:54:31.900
But even just that, that one week together and that face-to-face time creates deeper relationships

00:54:31.900 --> 00:54:36.680
that when you reach you, oh, now I feel comfortable to reach out to that person on Slack and ask

00:54:36.680 --> 00:54:37.920
for help or whatever.

00:54:37.920 --> 00:54:38.280
Right.

00:54:38.480 --> 00:54:38.880
Exactly.

00:54:38.880 --> 00:54:39.220
Yeah.

00:54:39.220 --> 00:54:45.260
I think the pandemic showed a lot of people who are a lot of deciders that there are many

00:54:45.260 --> 00:54:47.220
advantages in allowing remote work.

00:54:47.220 --> 00:54:49.560
It's like you get better people, you get more people.

00:54:49.560 --> 00:54:53.900
You don't have to pay for offices, which is like a big deal.

00:54:53.900 --> 00:54:57.180
And people are more willing to come to your company.

00:54:57.180 --> 00:54:58.160
It's incredible.

00:54:58.160 --> 00:55:02.340
You might even like, don't tell all the people who are working, but you might even get more

00:55:02.340 --> 00:55:04.300
time, productive hours from people.

00:55:04.300 --> 00:55:07.240
They're less likely to get distracted walking down the hall.

00:55:07.240 --> 00:55:07.920
Yes.

00:55:08.120 --> 00:55:09.680
They're not spent commuting.

00:55:09.680 --> 00:55:12.600
If they had a long commute, they might just show up a half hour early.

00:55:12.600 --> 00:55:15.480
You could actually get more productivity out of people.

00:55:15.480 --> 00:55:15.800
Yes.

00:55:15.800 --> 00:55:16.160
Essentially.

00:55:16.160 --> 00:55:16.860
Not always.

00:55:16.860 --> 00:55:17.040
For sure.

00:55:17.040 --> 00:55:20.020
There's people who might just go watch TV, but you don't necessarily want to keep working

00:55:20.020 --> 00:55:20.500
with those people.

00:55:20.500 --> 00:55:21.520
Yeah.

00:55:21.520 --> 00:55:21.760
Right.

00:55:21.760 --> 00:55:22.080
Thanks.

00:55:22.080 --> 00:55:24.860
That covers what I was asking quite well.

00:55:24.860 --> 00:55:25.520
Thank you very much.

00:55:25.520 --> 00:55:26.040
All right, gentlemen.

00:55:26.040 --> 00:55:29.880
I think we might be out of time, even if we're not out of questions entirely.

00:55:29.880 --> 00:55:30.380
Yeah.

00:55:30.380 --> 00:55:33.560
There's probably another half set of questions we could ask.

00:55:33.560 --> 00:55:35.520
I don't know if you want to do this again sometime.

00:55:35.520 --> 00:55:37.760
Clearly, it looks like there's a lot of...

00:55:37.760 --> 00:55:38.700
Good stuff, yeah.

00:55:38.700 --> 00:55:43.860
So let's just do the wrap up real quick and just do a quick favorite editor or editor

00:55:43.860 --> 00:55:47.220
use for Python code and then a notable PyPI project.

00:55:47.220 --> 00:55:48.560
So I'm using VS Code.

00:55:48.560 --> 00:55:55.740
I like the GUI, although I like the auto-completion and intelligence of PyCharm more.

00:55:55.740 --> 00:55:59.980
But PyLens is making a great leap in that regard.

00:56:00.120 --> 00:56:00.360
Oh, yeah.

00:56:00.360 --> 00:56:04.340
You started using PyLens over just the Python add-in and you find it makes a difference?

00:56:04.340 --> 00:56:05.260
It's pretty good.

00:56:05.260 --> 00:56:08.340
It's not PyCharm level yet, but I think it's getting there.

00:56:08.340 --> 00:56:11.220
In my case, I would love to use VS Code.

00:56:11.220 --> 00:56:12.920
I've tried to use VS Code.

00:56:12.920 --> 00:56:17.260
I know I should be using a modern tool that's under active development like VS Code because

00:56:17.260 --> 00:56:19.140
new things are added to it all the time.

00:56:19.220 --> 00:56:24.040
But my fingers remember Emacs and I keep coming back to Emacs because that's how I'm most

00:56:24.040 --> 00:56:24.380
productive.

00:56:24.380 --> 00:56:26.300
It is too frustrating to try anything else.

00:56:26.300 --> 00:56:30.280
And I'm sure at some point I will just bite the bullet, sit down and work through the frustration

00:56:30.280 --> 00:56:34.740
point and just get myself under VS Code or something that actually sees development.

00:56:34.740 --> 00:56:38.760
I'm being slightly unfair to the Emacs guys, but I think nobody would disagree VS Code sees

00:56:38.760 --> 00:56:40.620
more development than, say, Emacs does.

00:56:40.620 --> 00:56:40.940
Yeah.

00:56:40.940 --> 00:56:43.560
VS Code has got a ton of people working on it.

00:56:43.560 --> 00:56:45.540
Emacs is where my fingers are.

00:56:45.540 --> 00:56:45.740
Yeah.

00:56:45.740 --> 00:56:47.900
It's muscle memory demands Emacs.

00:56:47.900 --> 00:56:48.320
Yeah.

00:56:48.320 --> 00:56:53.060
And if you said Vim, like a lot of PyCharm and VS Code have Vim modes and stuff.

00:56:53.060 --> 00:56:54.780
And I don't know about the Emacs version.

00:56:54.780 --> 00:56:58.160
It's a set of Emacs bindings for VS Code, but it's just not the same.

00:56:58.160 --> 00:57:00.680
You know, I rely on things that only Emacs can do.

00:57:00.680 --> 00:57:04.600
Things that were probably designed roughly before I was born, but I want those things, you

00:57:04.600 --> 00:57:05.780
know, and I keep coming back to them.

00:57:05.780 --> 00:57:05.940
Yeah.

00:57:05.940 --> 00:57:09.180
And you just like your code to run on, your editor to run on Lisp.

00:57:09.180 --> 00:57:09.720
Well, yes.

00:57:09.720 --> 00:57:13.180
I have actually tried to write some Lisp, but that's in its own right terrifying.

00:57:13.180 --> 00:57:15.680
Yeah, it definitely is.

00:57:15.680 --> 00:57:19.300
And Samuel says, yeah, you might be able to find some Emacs.

00:57:19.300 --> 00:57:24.780
I've tried them and they work, but there's underlying Emacs behavior that I'm just so used

00:57:24.780 --> 00:57:27.140
to that I just can't get around not having, basically.

00:57:27.140 --> 00:57:27.440
Yeah.

00:57:27.440 --> 00:57:29.240
It's just the window is freaking you out.

00:57:29.240 --> 00:57:31.160
They have a window and tabs and stuff.

00:57:31.160 --> 00:57:31.340
Yeah.

00:57:31.340 --> 00:57:31.720
Exactly.

00:57:31.720 --> 00:57:35.020
It's basically, I boiled down to being kind of old and stuck in my ways is what I'm politely

00:57:35.020 --> 00:57:35.380
saying.

00:57:35.380 --> 00:57:35.580
Yeah.

00:57:35.580 --> 00:57:35.860
Yeah.

00:57:35.860 --> 00:57:36.240
Got it.

00:57:36.240 --> 00:57:36.640
All right.

00:57:36.640 --> 00:57:39.040
And then you guys, a quick notable PyPI package.

00:57:39.040 --> 00:57:39.880
Kim, you want to start?

00:57:39.880 --> 00:57:40.200
Sure.

00:57:40.200 --> 00:57:45.260
I actually was going to suggest, I was going to highlight two Python packages that I don't

00:57:45.260 --> 00:57:46.360
think see a lot of attention.

00:57:46.360 --> 00:57:51.640
And they are fairly niche, but I use them a great deal, particularly when I was doing embedded

00:57:51.640 --> 00:57:52.200
type software.

00:57:52.200 --> 00:57:57.340
Because a lot of those devices you talk to have RS-232 serial and that kind of low level stuff.

00:57:57.700 --> 00:58:01.960
And there's a project called PyCereal and a project called PyVisa, both of which are under

00:58:01.960 --> 00:58:02.720
active development.

00:58:02.720 --> 00:58:07.860
And both of which I would recommend to anybody who is getting into RS-232, Arduino type embedded

00:58:07.860 --> 00:58:08.600
work, et cetera.

00:58:08.600 --> 00:58:10.960
PyCereal more so for that.

00:58:10.960 --> 00:58:12.680
It's brilliant at RS-232 work.

00:58:12.680 --> 00:58:14.020
It can simplify a lot of things.

00:58:14.020 --> 00:58:17.640
You might be finding yourself spending a lot of time in a terminal doing this by hand.

00:58:18.040 --> 00:58:21.200
So PyCereal can really help with a lot of this kind of automation.

00:58:21.200 --> 00:58:25.280
And then PyVisa is very niche, but I just wanted to give it a shout out because I don't

00:58:25.280 --> 00:58:26.400
think anybody ever does.

00:58:26.400 --> 00:58:28.400
And it's helped me a lot for years.

00:58:28.400 --> 00:58:31.980
Visa is the protocol effectively that controls industrial automation.

00:58:31.980 --> 00:58:37.320
So things like industrial power supplies and multimeters and the kind of things you find

00:58:37.320 --> 00:58:39.580
scattered around factories that turns valves on and moves things around.

00:58:39.580 --> 00:58:41.960
Yeah, and Python is a perfect way to automate that kind of stuff, right?

00:58:41.960 --> 00:58:42.260
Exactly.

00:58:42.260 --> 00:58:42.700
Yeah.

00:58:42.700 --> 00:58:44.180
Python does it very well.

00:58:44.180 --> 00:58:49.140
I mean, National Instruments has built LabVIEW to be exactly the tool for this.

00:58:49.140 --> 00:58:54.480
But if you're tired of LabVIEW and if you're into Python, I would hazard a guess to say LabVIEW

00:58:54.480 --> 00:58:56.640
maybe annoys you like it annoyed me.

00:58:56.640 --> 00:58:59.720
Something like PyVisa is a great way to get away from LabVIEW for everything.

00:58:59.720 --> 00:59:02.800
And Python can do a lot of this kind of automation work instead.

00:59:02.800 --> 00:59:03.500
Yeah, fantastic.

00:59:03.500 --> 00:59:04.520
Patrick, package?

00:59:04.520 --> 00:59:09.280
I want to mention Click, which is a package for building CLI applications.

00:59:09.280 --> 00:59:10.180
I don't know.

00:59:10.180 --> 00:59:13.060
I think you already mentioned it at some point, but I just love it.

00:59:13.060 --> 00:59:13.540
Oh, awesome.

00:59:13.540 --> 00:59:17.960
So instead of using like argparse or just like sys.args.

00:59:17.960 --> 00:59:20.160
Yeah, it has some Flask wipe with decorators.

00:59:20.160 --> 00:59:23.920
It's because the creator of Flask also created Click, I think.

00:59:23.920 --> 00:59:24.600
Yeah, it's interesting.

00:59:24.600 --> 00:59:27.340
There's these CLI frameworks and these web frameworks.

00:59:27.340 --> 00:59:31.660
And it seems like multiple times the people that make the web stuff also created CLI framework,

00:59:31.660 --> 00:59:32.280
I guess.

00:59:32.280 --> 00:59:33.880
There must be something going on there.

00:59:33.880 --> 00:59:34.120
Yeah.

00:59:34.120 --> 00:59:35.080
But yeah, that's cool.

00:59:35.080 --> 00:59:36.800
Yeah, Click is quite popular and neat.

00:59:36.800 --> 00:59:37.060
Yeah.

00:59:37.060 --> 00:59:42.260
There's also Typer, which is built on Click, which is even easier.

00:59:42.260 --> 00:59:45.320
And it uses type hints if you're interested, Michael.

00:59:45.320 --> 00:59:45.900
Yeah.

00:59:45.900 --> 00:59:47.100
Yeah, Typer's cool.

00:59:47.100 --> 00:59:47.600
That's nifty.

00:59:47.600 --> 00:59:48.300
They're both cool.

00:59:48.300 --> 00:59:48.460
Yeah.

00:59:48.460 --> 00:59:48.680
Yeah.

00:59:49.000 --> 00:59:52.420
It's maybe just worth pointing out that you mentioned sys.org and argpars.

00:59:52.420 --> 00:59:57.960
Since argparse is bundled into the Python library, if you are still using sys.org, argparsemight

00:59:57.960 --> 00:59:58.480
be worth a look.

00:59:58.480 --> 01:00:02.280
You know, if you don't want to install any third-party applications, you can now get your

01:00:02.280 --> 01:00:05.000
hands on at least argparseto get yourself closer to...

01:00:05.000 --> 01:00:05.380
Yeah, cool.

01:00:05.380 --> 01:00:05.840
Good advice.

01:00:05.840 --> 01:00:09.580
There's definitely something to be said for you don't have to pip install anything.

01:00:09.580 --> 01:00:11.080
You don't have to create a virtual environment.

01:00:11.080 --> 01:00:12.020
You can just run it.

01:00:12.020 --> 01:00:16.120
And so if using Click would push you into that boundary, maybe it's worth sticking with

01:00:16.120 --> 01:00:16.540
this, right?

01:00:16.540 --> 01:00:17.020
Yeah.

01:00:17.020 --> 01:00:22.740
We also have it in our production system because at some point we weren't able to use a personal

01:00:22.740 --> 01:00:23.420
VN.

01:00:23.420 --> 01:00:28.720
Now we can with specs, but before we had to use what was there, which was basically nothing.

01:00:28.720 --> 01:00:29.500
Oh, interesting.

01:00:29.500 --> 01:00:29.940
Okay.

01:00:29.940 --> 01:00:30.880
Yeah, yeah.

01:00:30.880 --> 01:00:32.240
That's part of the advantage of specs.

01:00:32.240 --> 01:00:35.160
All right, Patrick, Kim, thank you for hosting this.

01:00:35.160 --> 01:00:35.640
This has been great.

01:00:35.640 --> 01:00:36.700
Oh, thank you, Michael.

01:00:36.700 --> 01:00:38.300
My apologies that I wasn't here for some of it.

01:00:38.300 --> 01:00:39.520
I hope I didn't miss too much.

01:00:39.520 --> 01:00:40.180
But yeah.

01:00:40.180 --> 01:00:41.260
No, it was great.

01:00:41.560 --> 01:00:43.620
The bulk of it that I was here for, I thoroughly enjoyed.

01:00:43.620 --> 01:00:43.960
Thank you.

01:00:43.960 --> 01:00:44.980
That was very good.

01:00:44.980 --> 01:00:46.300
Thank you for having us, Michael.

01:00:46.300 --> 01:00:46.560
Yeah.

01:00:46.560 --> 01:00:46.920
Yeah.

01:00:46.920 --> 01:00:47.560
Thanks, guys.

01:00:47.560 --> 01:00:48.200
See you later.

01:00:48.200 --> 01:00:48.460
Bye.

01:00:48.460 --> 01:00:49.180
Thank you very much.

01:00:49.180 --> 01:00:49.740
Cheers, guys.

01:00:49.740 --> 01:00:53.400
This has been another episode of Talk Python To Me.

01:00:53.400 --> 01:00:57.560
Our guest hosts on this episode have been Patrick Lobiel and Kim VanWijk.

01:00:57.560 --> 01:01:02.600
Stop telling your team and stakeholders that it's too hard to build a website or mobile app

01:01:02.600 --> 01:01:03.320
for your project.

01:01:03.320 --> 01:01:05.160
Wow them with OutSystems.

01:01:05.160 --> 01:01:09.320
Give it a try for free at talkpython.fm/OutSystems.

01:01:09.320 --> 01:01:11.520
Be sure to subscribe to the show.

01:01:11.740 --> 01:01:14.300
Open your favorite podcast app and search for Python.

01:01:14.300 --> 01:01:15.620
We should be right at the top.

01:01:15.620 --> 01:01:20.780
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:01:20.780 --> 01:01:24.980
and the direct RSS feed at /rss on talkpython.fm.

01:01:25.860 --> 01:01:28.400
We're live streaming most of our recordings these days.

01:01:28.400 --> 01:01:31.820
If you want to be part of the show and have your comments featured on the air,

01:01:31.820 --> 01:01:36.240
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:01:36.240 --> 01:01:38.080
This is your host, Michael Kennedy.

01:01:38.080 --> 01:01:39.380
Thanks so much for listening.

01:01:39.380 --> 01:01:40.540
I really appreciate it.

01:01:40.800 --> 01:01:42.460
Now get out there and write some Python code.

01:01:42.460 --> 01:01:42.460
Now get out there and write some Python code.

01:01:42.460 --> 01:01:42.980
We'll see you next time.

01:01:42.980 --> 01:01:43.280
Bye.

01:01:43.280 --> 01:01:43.280
Bye.

01:01:43.280 --> 01:01:43.280
Bye.

01:01:43.280 --> 01:01:43.280
Bye.

01:01:43.280 --> 01:01:44.100
Bye.

01:01:44.100 --> 01:01:44.100
Bye.

01:01:44.100 --> 01:01:44.300
Bye.

01:01:44.300 --> 01:01:44.400
Bye.

01:01:44.400 --> 01:01:44.460
Bye.

01:01:44.460 --> 01:01:45.300
Bye.

01:01:45.300 --> 01:01:46.300
Bye.

01:01:46.300 --> 01:01:47.300
Bye.

01:01:47.300 --> 01:01:48.300
Bye.

01:01:48.300 --> 01:01:49.300
Bye.

01:01:49.300 --> 01:01:50.300
Bye.

01:01:50.300 --> 01:01:51.300
Bye.

01:01:51.300 --> 01:01:52.300
Bye.

01:01:52.300 --> 01:01:53.300
Bye.

01:01:53.300 --> 01:01:54.300
Bye.

01:01:54.300 --> 01:01:55.300
Bye.

01:01:55.300 --> 01:01:56.300
Bye.

01:01:56.300 --> 01:01:57.300
Bye.

01:01:57.300 --> 01:01:58.300
Bye.

01:01:58.300 --> 01:01:59.300
Bye.

01:01:59.300 --> 01:01:59.800
you

01:01:59.800 --> 01:02:00.300
you

01:02:00.300 --> 01:02:00.800
you

01:02:00.800 --> 01:02:02.800
Thank you.

01:02:02.800 --> 01:02:32.780
Thank you.

