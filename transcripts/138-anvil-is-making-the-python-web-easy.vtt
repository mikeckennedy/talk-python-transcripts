WEBVTT

00:00:00.001 --> 00:00:02.260
Have you noticed that web development's kind of hard?

00:00:02.260 --> 00:00:04.320
If you've been doing it for a long time,

00:00:04.320 --> 00:00:06.300
this is actually easy to forget.

00:00:06.300 --> 00:00:08.680
It probably sounds simple enough to

00:00:08.680 --> 00:00:11.160
pick a server-side framework, Pyramid or Django,

00:00:11.160 --> 00:00:12.840
create a new project.

00:00:12.840 --> 00:00:14.080
Oh, do I use pcreate?

00:00:14.080 --> 00:00:14.860
Is that cookie cutter?

00:00:14.860 --> 00:00:15.740
Is that manage.py?

00:00:15.740 --> 00:00:18.560
Install some client-side dependencies with NPM.

00:00:18.560 --> 00:00:21.120
Install some server-side dependencies with pip.

00:00:21.120 --> 00:00:22.220
Create a database.

00:00:22.220 --> 00:00:23.940
Well, first choose a database server,

00:00:23.940 --> 00:00:24.940
then create a database,

00:00:24.940 --> 00:00:27.440
maybe even set up and install the server,

00:00:28.060 --> 00:00:30.480
the process and maybe even another machine to do this.

00:00:30.480 --> 00:00:32.940
Connect the app to the database securely.

00:00:32.940 --> 00:00:34.560
Pick a front-end framework.

00:00:34.560 --> 00:00:36.000
Is that bootstrap or foundation?

00:00:36.000 --> 00:00:38.520
Integrate the front-end framework into it.

00:00:38.520 --> 00:00:39.140
Pick a theme.

00:00:39.140 --> 00:00:40.960
Now, finally, you get to write some code.

00:00:40.960 --> 00:00:42.800
Oh, now it's time to deploy.

00:00:42.800 --> 00:00:44.800
Wait, that doesn't sound that easy.

00:00:44.800 --> 00:00:46.100
Actually, even to me.

00:00:46.100 --> 00:00:49.600
What if the web were as easy as old-school VV6?

00:00:49.600 --> 00:00:50.800
You just open a UI,

00:00:50.800 --> 00:00:52.160
you drag and drop some widgets,

00:00:52.160 --> 00:00:54.540
you double-click on the things like buttons for events,

00:00:54.540 --> 00:00:56.340
but with Python code, of course.

00:00:56.340 --> 00:00:58.540
With Anvil, you'll see that it really is

00:00:58.540 --> 00:01:00.020
that quick and easy to get started.

00:01:00.020 --> 00:01:02.760
Meet Meredith Loof, who's here to tell us about Anvil.

00:01:02.760 --> 00:01:04.280
This is Talk Python To Me,

00:01:04.280 --> 00:01:07.980
episode 138, recorded November 6, 2017.

00:01:21.220 --> 00:01:23.380
Welcome to Talk Python To Me,

00:01:23.380 --> 00:01:25.460
a weekly podcast on Python,

00:01:25.460 --> 00:01:27.400
the language, the libraries, the ecosystem,

00:01:27.400 --> 00:01:28.500
and the personalities.

00:01:28.500 --> 00:01:30.620
This is your host, Michael Kennedy.

00:01:30.620 --> 00:01:32.620
Follow me on Twitter, where I'm @mkennedy.

00:01:32.620 --> 00:01:35.000
Keep up with the show and listen to past episodes

00:01:35.000 --> 00:01:36.520
at talkpython.fm,

00:01:36.520 --> 00:01:39.080
and follow the show on Twitter via at Talk Python.

00:01:39.080 --> 00:01:41.860
This episode is brought to you by Datadog

00:01:41.860 --> 00:01:43.660
and GoCD from ThoughtWorks.

00:01:43.660 --> 00:01:45.900
Please check out what they're offering during their segments.

00:01:46.020 --> 00:01:47.280
It really helps support the show.

00:01:47.280 --> 00:01:49.880
Meredith, welcome to Talk Python.

00:01:49.880 --> 00:01:50.920
Thank you very much.

00:01:50.920 --> 00:01:51.800
Thank you very much for having me.

00:01:51.800 --> 00:01:54.580
Yeah, you had some pretty interesting stuff going on

00:01:54.580 --> 00:01:55.500
at PyCon UK,

00:01:55.500 --> 00:01:58.960
and yeah, I'm super happy to bring it to a wider audience.

00:01:58.960 --> 00:01:59.660
Cool, thanks.

00:01:59.660 --> 00:02:01.740
Yeah, it was really great.

00:02:01.740 --> 00:02:04.460
That's actually been our first time sponsoring that conference,

00:02:04.900 --> 00:02:08.100
and it was really quite fun being deluged in people.

00:02:08.100 --> 00:02:10.020
Yeah, a whole bunch of stuff we weren't expecting.

00:02:10.020 --> 00:02:11.760
We went through a lot of throat sweeps

00:02:11.760 --> 00:02:12.880
in the evening after the conference,

00:02:12.880 --> 00:02:14.920
but it was really great to see the reaction out there,

00:02:14.920 --> 00:02:17.020
and I'm really pleased to be talking to you

00:02:17.020 --> 00:02:17.760
and your listeners, too.

00:02:17.760 --> 00:02:18.520
Yeah, that's awesome.

00:02:18.520 --> 00:02:22.120
So I'm super excited to talk about your project called Anvil,

00:02:22.120 --> 00:02:25.040
which is kind of trying to democratize the web again

00:02:25.040 --> 00:02:27.400
in like a really interesting and powerful way

00:02:27.400 --> 00:02:28.500
and using Python to do it,

00:02:28.500 --> 00:02:30.820
but before we get to that, let's just hear your story.

00:02:30.820 --> 00:02:32.200
How did you get into programming in Python?

00:02:32.200 --> 00:02:35.860
So programming, I started, I was very privileged.

00:02:35.860 --> 00:02:37.260
I started around the age of seven.

00:02:37.260 --> 00:02:38.920
I was introduced to QBasic,

00:02:38.920 --> 00:02:41.920
and for me, it was just this piece of magic

00:02:41.920 --> 00:02:45.480
because here I was sitting at this blue screen,

00:02:45.480 --> 00:02:46.780
and I could type something in,

00:02:46.780 --> 00:02:50.020
and it was nothing the seven-year-old's brain

00:02:50.020 --> 00:02:51.000
couldn't comprehend,

00:02:51.000 --> 00:02:53.360
and here was this program.

00:02:53.360 --> 00:02:55.260
It was drawing pictures on the screen.

00:02:55.260 --> 00:02:56.760
It was interacting with me,

00:02:56.760 --> 00:02:58.260
and I could make it do what I wanted,

00:02:58.260 --> 00:03:02.280
and this was magic made real sitting in front of me,

00:03:02.280 --> 00:03:03.680
and it was several years before that

00:03:03.680 --> 00:03:05.660
that I worked out that you could actually make a career

00:03:05.660 --> 00:03:07.800
doing this amazing thing that I discovered

00:03:07.800 --> 00:03:08.920
was the best hobby in the world.

00:03:08.920 --> 00:03:12.940
Actually, literally the reason we started Anvil

00:03:12.940 --> 00:03:16.140
was that that experience isn't there

00:03:16.140 --> 00:03:18.720
in much of the web these days,

00:03:18.860 --> 00:03:20.140
and as far as I'm concerned,

00:03:20.140 --> 00:03:21.780
that's borderline criminal negligence

00:03:21.780 --> 00:03:23.340
from our whole profession

00:03:23.340 --> 00:03:26.800
because that kind of magic that can capture a kid's eye

00:03:26.800 --> 00:03:28.520
is what we should be delivering.

00:03:28.520 --> 00:03:29.160
You're right.

00:03:29.160 --> 00:03:30.320
It absolutely is missing,

00:03:30.320 --> 00:03:33.260
and so I think you guys are going to bring some of that back.

00:03:33.260 --> 00:03:34.640
Yeah, that's awesome.

00:03:34.640 --> 00:03:35.640
So that's how you got into programming.

00:03:35.640 --> 00:03:36.300
How about Python?

00:03:36.580 --> 00:03:38.260
So Python itself actually,

00:03:38.260 --> 00:03:43.020
I mean, I've like dabbled, dipped into it bits and pieces,

00:03:43.020 --> 00:03:46.900
but honestly, like we started on Anvil first.

00:03:46.900 --> 00:03:48.860
It was very much, you know,

00:03:48.860 --> 00:03:52.640
we want to bring back this sort of instant access magic.

00:03:52.640 --> 00:03:54.520
We want to bring back what you had

00:03:54.520 --> 00:03:57.420
with like Visual Basic 6, these tools in the 1990s,

00:03:57.420 --> 00:04:00.700
and we were like, okay, but it's got to be modern.

00:04:00.700 --> 00:04:04.700
It's got to be an easy-to-use, accessible language.

00:04:05.060 --> 00:04:07.080
It's got to, you know, it's got to feel

00:04:07.080 --> 00:04:10.040
that kind of easy workability in your hands,

00:04:10.040 --> 00:04:11.460
and we like looked at it,

00:04:11.460 --> 00:04:13.220
and Python was so the obvious candidate.

00:04:13.220 --> 00:04:15.320
And so like I was, you know,

00:04:15.320 --> 00:04:16.580
I spoke Python as like, you know,

00:04:16.580 --> 00:04:18.300
fourth language up till then,

00:04:18.300 --> 00:04:19.480
and then I went, right, okay,

00:04:19.480 --> 00:04:20.560
this is clearly the right thing,

00:04:20.560 --> 00:04:23.020
and jumped into it, and I've been loving it.

00:04:23.020 --> 00:04:23.840
Yeah, that's awesome.

00:04:23.840 --> 00:04:26.960
And so you guys sponsored PyCon UK.

00:04:26.960 --> 00:04:28.900
It sounds like Anvil is something

00:04:28.900 --> 00:04:30.740
that you're focused on pretty much day-to-day.

00:04:30.740 --> 00:04:31.200
Is that right?

00:04:31.200 --> 00:04:31.800
Absolutely.

00:04:32.180 --> 00:04:36.680
So we originally started this a couple of years back now.

00:04:36.680 --> 00:04:39.100
It was like an evening and weekends project.

00:04:39.100 --> 00:04:40.780
It was, you know, we were on our way to a wedding,

00:04:40.780 --> 00:04:42.280
sitting there in the airport,

00:04:42.280 --> 00:04:43.840
Departures Lounge going, you know,

00:04:43.840 --> 00:04:47.020
why don't we have Visual Basic 6 for the web anymore?

00:04:47.020 --> 00:04:49.800
And that kind of turned into, you know,

00:04:49.800 --> 00:04:51.320
some evenings working on it,

00:04:51.320 --> 00:04:54.220
which eventually turned into like taking one day off a week

00:04:54.220 --> 00:04:54.920
to work on it.

00:04:55.180 --> 00:04:57.500
And then last summer, we just, honestly,

00:04:57.500 --> 00:04:58.460
we just stuck it on Reddit,

00:04:58.460 --> 00:05:00.400
and we saw the reaction, went,

00:05:00.400 --> 00:05:02.180
oh, okay, this is really a thing now.

00:05:02.180 --> 00:05:03.840
Okay, we could afford to go full-time on it.

00:05:03.840 --> 00:05:05.600
And so we worked our way up to it,

00:05:05.600 --> 00:05:07.280
but now, yeah, this is our thing.

00:05:07.280 --> 00:05:08.560
Yeah, that's a really great story,

00:05:08.560 --> 00:05:11.220
and I think a lot of people feel like the way

00:05:11.220 --> 00:05:13.060
you get to somewhere where you have, like,

00:05:13.060 --> 00:05:15.200
your own business or your own sort of thing

00:05:15.200 --> 00:05:17.060
that you can go do that's not part of your job,

00:05:17.700 --> 00:05:20.900
it's kind of like diving off a high diving board

00:05:20.900 --> 00:05:21.660
with your eyes closed,

00:05:21.660 --> 00:05:23.020
whereas I think in practice,

00:05:23.020 --> 00:05:24.600
a lot of these things, like you described,

00:05:24.600 --> 00:05:26.840
start as like, let's test the waters,

00:05:26.840 --> 00:05:28.040
let's do some proof of concept,

00:05:28.040 --> 00:05:29.320
let's slowly build up,

00:05:29.320 --> 00:05:31.280
and then once you see that it's like gaining traction,

00:05:31.280 --> 00:05:32.480
like, all right, if I could go

00:05:32.480 --> 00:05:35.200
and do eight or nine hours a day instead of one,

00:05:35.200 --> 00:05:36.140
think what would happen.

00:05:36.140 --> 00:05:36.960
Yeah, absolutely.

00:05:36.960 --> 00:05:39.580
It's very much sort of wading in from the shoreline

00:05:39.580 --> 00:05:40.740
rather than jumping up a diving board.

00:05:40.740 --> 00:05:41.900
That's great.

00:05:41.900 --> 00:05:44.860
All right, so we're definitely going to get into

00:05:44.860 --> 00:05:46.940
the details of what Anvil is,

00:05:46.940 --> 00:05:48.580
but maybe just give us a really,

00:05:48.580 --> 00:05:51.640
really high-level picture of what you built,

00:05:51.640 --> 00:05:53.340
and then let's talk about your thought

00:05:53.340 --> 00:05:55.440
that the web is not as accessible as it should be.

00:05:55.440 --> 00:05:57.980
Well, what we built was a tool

00:05:57.980 --> 00:05:59.380
for building full-stack web apps

00:05:59.380 --> 00:06:00.480
with nothing but Python.

00:06:00.480 --> 00:06:03.900
So you can design what your page is going to look like

00:06:03.900 --> 00:06:05.840
in a kind of drag-and-drop visual editor,

00:06:05.840 --> 00:06:07.900
but everything you place,

00:06:07.900 --> 00:06:09.440
every button, every checkbox,

00:06:09.440 --> 00:06:12.440
every piece of text is actually a Python object.

00:06:12.440 --> 00:06:15.540
And so even your client-side code

00:06:15.540 --> 00:06:16.340
that's running in the browser

00:06:16.340 --> 00:06:17.980
is actually just Python.

00:06:17.980 --> 00:06:19.520
We compile this JavaScript.

00:06:19.520 --> 00:06:20.240
We run it there.

00:06:20.240 --> 00:06:22.280
Your server-side code is just Python.

00:06:22.280 --> 00:06:23.840
We even have a built-in database

00:06:23.840 --> 00:06:25.880
that you can access with pure Python,

00:06:25.880 --> 00:06:26.580
no SQL,

00:06:26.580 --> 00:06:27.980
although obviously if you want to,

00:06:27.980 --> 00:06:28.300
you know,

00:06:28.300 --> 00:06:30.480
go and pull in a MySQL database,

00:06:30.480 --> 00:06:31.200
you know,

00:06:31.200 --> 00:06:32.960
we support everything that Python supports.

00:06:32.960 --> 00:06:34.340
But the idea is really

00:06:34.340 --> 00:06:35.800
that you should be able to build

00:06:35.800 --> 00:06:37.420
a fully functional web application

00:06:37.420 --> 00:06:38.320
and publish it

00:06:38.320 --> 00:06:39.740
knowing nothing but Python.

00:06:39.740 --> 00:06:42.560
I think you could build a fully functional web application

00:06:42.560 --> 00:06:44.460
with hardly knowing any programming.

00:06:44.460 --> 00:06:44.820
I mean,

00:06:44.820 --> 00:06:49.580
this could easily be built like a really functional web application

00:06:49.580 --> 00:06:53.420
for your first computer science or programming course

00:06:53.420 --> 00:06:54.720
in high school or something, right?

00:06:54.840 --> 00:06:56.200
We have people who've done that, right?

00:06:56.200 --> 00:06:56.400
You know,

00:06:56.400 --> 00:06:57.000
we've had schools

00:06:57.000 --> 00:06:59.440
who've just taught their computing curriculum

00:06:59.440 --> 00:07:00.260
with Anvil

00:07:00.260 --> 00:07:02.340
precisely because of that

00:07:02.340 --> 00:07:02.800
because, you know,

00:07:02.800 --> 00:07:03.240
for the kids,

00:07:03.240 --> 00:07:05.100
it comes back to what I was saying

00:07:05.100 --> 00:07:05.500
at the beginning.

00:07:05.500 --> 00:07:06.220
You know,

00:07:06.220 --> 00:07:07.320
you want that instant feedback.

00:07:07.320 --> 00:07:08.420
You want to have this feeling

00:07:08.420 --> 00:07:10.280
that I just learned this abstract concept

00:07:10.280 --> 00:07:11.120
of the if statement

00:07:11.120 --> 00:07:12.220
and now here it is

00:07:12.220 --> 00:07:13.200
in buttons of colors

00:07:13.200 --> 00:07:14.340
and images in front of me

00:07:14.340 --> 00:07:14.880
right away.

00:07:14.880 --> 00:07:15.200
Yeah.

00:07:15.320 --> 00:07:16.880
So let me see if I can just describe

00:07:16.880 --> 00:07:18.660
the experience of using this

00:07:18.660 --> 00:07:19.360
which, granted,

00:07:19.360 --> 00:07:20.560
my experience is like

00:07:20.560 --> 00:07:22.520
I've only built like one little test app

00:07:22.520 --> 00:07:24.680
and played with it for an hour or something

00:07:24.680 --> 00:07:25.140
but still,

00:07:25.140 --> 00:07:27.220
the idea is you go to your website,

00:07:27.220 --> 00:07:28.680
you create an account,

00:07:28.680 --> 00:07:31.860
you launch a cloud browser-based IDE

00:07:31.860 --> 00:07:34.620
which is really focused on

00:07:34.620 --> 00:07:37.440
the sort of UI design layer of,

00:07:37.440 --> 00:07:40.040
UI and data layer of your app.

00:07:40.040 --> 00:07:42.040
You have a design view and a code view.

00:07:42.040 --> 00:07:43.220
In the design view,

00:07:43.300 --> 00:07:45.180
you have a bunch of components and widgets

00:07:45.180 --> 00:07:46.240
that you can drag over,

00:07:46.240 --> 00:07:47.760
images, links, buttons,

00:07:47.760 --> 00:07:49.740
repeaters, columns,

00:07:49.740 --> 00:07:50.520
all sorts of stuff.

00:07:50.520 --> 00:07:51.760
You can give them names

00:07:51.760 --> 00:07:53.860
and then you access them in Python

00:07:53.860 --> 00:07:56.420
in the code side of your page, right?

00:07:56.420 --> 00:07:57.560
Yeah, that's exactly right.

00:07:57.560 --> 00:07:58.300
But look,

00:07:58.300 --> 00:08:01.240
it's not just on the code side of a page

00:08:01.240 --> 00:08:02.980
because you can also then

00:08:02.980 --> 00:08:04.440
pull up a server module

00:08:04.440 --> 00:08:05.720
and then you're writing,

00:08:05.720 --> 00:08:06.020
again,

00:08:06.020 --> 00:08:07.120
it's just a Python module

00:08:07.120 --> 00:08:09.300
but now it's running on our servers

00:08:09.300 --> 00:08:11.720
and you can just make function calls

00:08:11.720 --> 00:08:12.980
as just a decorator for,

00:08:13.220 --> 00:08:14.080
this is something that

00:08:14.080 --> 00:08:15.140
you should be able to call

00:08:15.140 --> 00:08:16.020
from your client code

00:08:16.020 --> 00:08:18.260
and so you can make Python calls

00:08:18.260 --> 00:08:20.000
straight from the Python code

00:08:20.000 --> 00:08:20.620
that runs when,

00:08:20.620 --> 00:08:20.820
say,

00:08:20.820 --> 00:08:21.640
when you click a button

00:08:21.640 --> 00:08:23.340
in that code view

00:08:23.340 --> 00:08:24.320
through to server module.

00:08:24.320 --> 00:08:24.760
Right.

00:08:24.760 --> 00:08:26.340
And I think one of the

00:08:26.340 --> 00:08:27.100
sort of making this

00:08:27.100 --> 00:08:28.760
more accessible aspects of it

00:08:28.760 --> 00:08:29.160
is like,

00:08:29.160 --> 00:08:30.860
I've been doing a lot of JavaScript lately

00:08:30.860 --> 00:08:31.880
and JavaScript is like

00:08:31.880 --> 00:08:34.860
an intense place these days, man.

00:08:34.860 --> 00:08:37.600
And it didn't used to be.

00:08:37.700 --> 00:08:38.680
even in the early days,

00:08:38.680 --> 00:08:38.820
though,

00:08:38.820 --> 00:08:40.360
like with things like Ajax and stuff,

00:08:40.360 --> 00:08:43.000
you still have this sort of callback

00:08:43.000 --> 00:08:46.760
indirect seesaw type of programming.

00:08:46.760 --> 00:08:48.580
So like with what you just described,

00:08:48.580 --> 00:08:50.840
like you write a function on the server

00:08:50.840 --> 00:08:52.900
and then you write some literally Python code

00:08:52.900 --> 00:08:53.740
that runs in the browser

00:08:53.740 --> 00:08:56.320
and then you just say,

00:08:56.320 --> 00:08:58.520
call that function on the server

00:08:58.520 --> 00:08:59.540
by saying something like

00:08:59.540 --> 00:09:01.240
anvil.server.name of thing you wrote,

00:09:01.240 --> 00:09:02.180
pass the parameters,

00:09:02.340 --> 00:09:03.940
and it's even a synchronous call.

00:09:03.940 --> 00:09:05.500
Like it blocks and then continues, right?

00:09:05.500 --> 00:09:08.340
That's something we really wanted to do

00:09:08.340 --> 00:09:08.780
because,

00:09:08.780 --> 00:09:09.920
I don't know,

00:09:09.920 --> 00:09:10.080
I mean,

00:09:10.080 --> 00:09:11.340
I'm going to confess some bias here.

00:09:11.340 --> 00:09:12.820
There's a talk I gave at PyCon US.

00:09:12.820 --> 00:09:13.540
If you Google it,

00:09:13.540 --> 00:09:14.320
you can find it,

00:09:14.320 --> 00:09:16.800
anvil PyCon Portland talk,

00:09:16.800 --> 00:09:18.720
which I entitled like,

00:09:18.720 --> 00:09:19.840
you want to make the world better,

00:09:19.840 --> 00:09:21.520
put a little bit less JavaScript in it,

00:09:21.520 --> 00:09:22.240
which is,

00:09:22.240 --> 00:09:22.460
you know,

00:09:22.460 --> 00:09:23.580
it's like the inflammatory title,

00:09:23.580 --> 00:09:25.400
but fundamentally,

00:09:25.400 --> 00:09:27.200
when you're doing stuff like that

00:09:27.200 --> 00:09:27.700
in JavaScript,

00:09:27.700 --> 00:09:29.260
even like the hello world,

00:09:29.260 --> 00:09:30.920
you have to understand

00:09:30.920 --> 00:09:32.440
asynchronous callbacks,

00:09:32.440 --> 00:09:33.720
which means you have to understand

00:09:33.720 --> 00:09:34.600
like closures

00:09:34.600 --> 00:09:35.740
and anonymous functions

00:09:35.740 --> 00:09:37.100
and even promises.

00:09:37.100 --> 00:09:37.380
Well,

00:09:37.380 --> 00:09:38.180
that's just an abstraction

00:09:38.180 --> 00:09:38.820
on top of them

00:09:38.820 --> 00:09:39.480
and you've got to understand

00:09:39.480 --> 00:09:40.280
that as well.

00:09:40.280 --> 00:09:41.800
And like the minimal set

00:09:41.800 --> 00:09:43.340
of what you need to do

00:09:43.340 --> 00:09:44.120
for,

00:09:44.120 --> 00:09:44.800
hey,

00:09:44.800 --> 00:09:45.620
what's your name?

00:09:45.620 --> 00:09:46.900
Let me stick that in a database

00:09:46.900 --> 00:09:48.120
and read it back to you

00:09:48.120 --> 00:09:50.000
is like a huge amount

00:09:50.000 --> 00:09:50.840
of computer science.

00:09:50.840 --> 00:09:53.400
And we really wanted to take that back

00:09:53.400 --> 00:09:54.340
to what you had,

00:09:54.340 --> 00:09:55.140
you know,

00:09:55.140 --> 00:09:56.400
what you get in a REPL

00:09:56.400 --> 00:09:57.940
or what you had with QBasic

00:09:57.940 --> 00:09:59.200
or what you had with Visual Basic

00:09:59.200 --> 00:09:59.860
or Delphi,

00:10:00.160 --> 00:10:01.640
where you could just go,

00:10:01.640 --> 00:10:02.020
well,

00:10:02.020 --> 00:10:02.320
okay,

00:10:02.320 --> 00:10:02.940
you click the button,

00:10:02.940 --> 00:10:03.820
what's the first thing I do?

00:10:03.820 --> 00:10:04.020
Well,

00:10:04.020 --> 00:10:04.760
I call this function

00:10:04.760 --> 00:10:05.400
that puts it in a database,

00:10:05.400 --> 00:10:06.400
what's the second thing I do?

00:10:06.400 --> 00:10:06.820
Well,

00:10:06.820 --> 00:10:07.520
I do something else

00:10:07.520 --> 00:10:08.400
with the value it's returned

00:10:08.400 --> 00:10:12.060
and you can reason about it

00:10:12.060 --> 00:10:13.060
in a very straightforward manner.

00:10:13.060 --> 00:10:14.480
And so we've put a lot of effort

00:10:14.480 --> 00:10:15.980
and a lot of like compiler hacking

00:10:15.980 --> 00:10:16.900
in the background

00:10:16.900 --> 00:10:17.840
to make that happen

00:10:17.840 --> 00:10:19.580
so that the user model

00:10:19.580 --> 00:10:20.760
is as simple as it can get.

00:10:20.760 --> 00:10:21.020
Yeah,

00:10:21.020 --> 00:10:22.160
and I think it's super,

00:10:22.160 --> 00:10:23.160
super approachable.

00:10:23.160 --> 00:10:24.280
So,

00:10:24.280 --> 00:10:24.800
you know,

00:10:24.800 --> 00:10:25.760
I sort of touched on it,

00:10:25.760 --> 00:10:26.380
you did as well,

00:10:26.380 --> 00:10:27.440
like working with JavaScript,

00:10:27.440 --> 00:10:28.740
working on the web these days,

00:10:28.740 --> 00:10:29.520
it's really tricky.

00:10:29.520 --> 00:10:30.740
if you're not going to use JavaScript

00:10:30.740 --> 00:10:31.920
and you want something interesting,

00:10:31.920 --> 00:10:34.100
you're probably talking Django,

00:10:34.100 --> 00:10:35.020
Flask,

00:10:35.020 --> 00:10:36.520
or something else,

00:10:36.520 --> 00:10:37.280
Ruby on Rails,

00:10:37.280 --> 00:10:38.280
ASP.NET,

00:10:38.280 --> 00:10:40.100
but none of those are super like

00:10:40.100 --> 00:10:40.900
walk up and just,

00:10:40.900 --> 00:10:42.360
oh yeah,

00:10:42.360 --> 00:10:43.340
I just push the button

00:10:43.340 --> 00:10:43.980
and go, right?

00:10:43.980 --> 00:10:45.100
There's actually quite a bit of work

00:10:45.100 --> 00:10:45.780
to make those things

00:10:45.780 --> 00:10:46.460
all fit together.

00:10:46.680 --> 00:10:48.120
and kind of the worst of it

00:10:48.120 --> 00:10:48.980
is you need to do

00:10:48.980 --> 00:10:49.820
all of the above,

00:10:49.820 --> 00:10:50.100
right?

00:10:50.100 --> 00:10:51.000
Because if you're building

00:10:51.000 --> 00:10:53.300
a web application today,

00:10:53.300 --> 00:10:54.760
you're going to need

00:10:54.760 --> 00:10:56.240
at least five different

00:10:56.240 --> 00:10:56.980
programming languages.

00:10:56.980 --> 00:10:58.160
You need to write the HTML,

00:10:58.160 --> 00:10:59.120
you need to write the CSS

00:10:59.120 --> 00:10:59.900
to make it look

00:10:59.900 --> 00:11:00.840
how you want it,

00:11:00.840 --> 00:11:01.980
you need to write the JavaScript

00:11:01.980 --> 00:11:03.020
for it to behave

00:11:03.020 --> 00:11:03.740
in the browser,

00:11:03.740 --> 00:11:05.620
you need a server-side language

00:11:05.620 --> 00:11:06.680
like Python

00:11:06.680 --> 00:11:07.420
on,

00:11:07.420 --> 00:11:08.640
running on the server

00:11:08.640 --> 00:11:09.140
for the browser

00:11:09.140 --> 00:11:09.800
to talk to,

00:11:10.020 --> 00:11:11.160
you need to be talking SQL

00:11:11.160 --> 00:11:12.040
to your database

00:11:12.040 --> 00:11:13.440
and then you need

00:11:13.440 --> 00:11:15.160
a framework for the JavaScript,

00:11:15.160 --> 00:11:17.120
a framework for your CSS

00:11:17.120 --> 00:11:17.840
like Bootstrap,

00:11:17.840 --> 00:11:18.820
another framework

00:11:18.820 --> 00:11:19.500
for the JavaScript

00:11:19.500 --> 00:11:20.320
if you're doing this

00:11:20.320 --> 00:11:21.880
React plus Redux thing,

00:11:21.880 --> 00:11:23.500
a framework for the server-side

00:11:23.500 --> 00:11:24.540
language like Django,

00:11:24.540 --> 00:11:25.880
probably a framework

00:11:25.880 --> 00:11:26.460
for the database

00:11:26.460 --> 00:11:27.500
like SQLAlchemy.

00:11:27.500 --> 00:11:28.280
I mean,

00:11:28.280 --> 00:11:29.300
I count these on my fingers,

00:11:29.300 --> 00:11:30.460
I've literally just run out

00:11:30.460 --> 00:11:32.660
and that is a completely

00:11:32.660 --> 00:11:34.900
unfair bar

00:11:34.900 --> 00:11:35.700
to set for,

00:11:35.700 --> 00:11:35.880
you know,

00:11:35.880 --> 00:11:36.740
you must be this tall

00:11:36.740 --> 00:11:37.620
to ride this ride.

00:11:37.620 --> 00:11:39.340
This ride is the web,

00:11:39.340 --> 00:11:39.840
it's the greatest

00:11:39.840 --> 00:11:41.400
application delivery platform

00:11:41.400 --> 00:11:42.720
that humanity has invented

00:11:42.720 --> 00:11:44.800
and we make you learn

00:11:44.800 --> 00:11:45.640
all this stuff

00:11:45.640 --> 00:11:46.640
before you can basically

00:11:46.640 --> 00:11:47.740
do hello world

00:11:47.740 --> 00:11:49.260
and it's kind of interesting

00:11:49.260 --> 00:11:50.520
how that happened as well

00:11:50.520 --> 00:11:51.700
because...

00:11:51.700 --> 00:11:51.980
How do you think

00:11:51.980 --> 00:11:52.420
we got here?

00:11:52.420 --> 00:11:54.200
The web as a platform

00:11:54.200 --> 00:11:55.120
is this kind of

00:11:55.120 --> 00:11:56.720
Frankensteinian creation.

00:11:56.720 --> 00:11:59.200
It grew up in the 1990s

00:11:59.200 --> 00:11:59.900
and there were people

00:11:59.900 --> 00:12:00.920
who could see

00:12:00.920 --> 00:12:01.920
the, you know,

00:12:01.920 --> 00:12:03.060
the potential for this.

00:12:03.060 --> 00:12:03.660
You know,

00:12:03.660 --> 00:12:04.540
JavaScript itself

00:12:04.540 --> 00:12:05.780
was kind of dashed off

00:12:05.780 --> 00:12:06.680
extra famously

00:12:06.680 --> 00:12:08.040
constructed by Brendan Eich

00:12:08.040 --> 00:12:08.760
in two weeks

00:12:08.760 --> 00:12:11.060
but as the web

00:12:11.060 --> 00:12:11.620
sort of grew

00:12:11.620 --> 00:12:12.320
and it could be seen

00:12:12.320 --> 00:12:13.060
as a platform,

00:12:13.060 --> 00:12:13.880
Microsoft,

00:12:13.880 --> 00:12:14.340
who are then

00:12:14.340 --> 00:12:15.340
the dominant incumbent,

00:12:15.340 --> 00:12:17.060
put a lot of effort

00:12:17.060 --> 00:12:18.160
into kind of

00:12:18.160 --> 00:12:19.480
corralling that power.

00:12:19.480 --> 00:12:20.540
You know,

00:12:20.540 --> 00:12:21.580
you had the Internet Explorer

00:12:21.580 --> 00:12:22.120
Netscape,

00:12:22.120 --> 00:12:24.320
Monopoly Wars of the 1990s

00:12:24.320 --> 00:12:26.640
and you had this kind of

00:12:26.640 --> 00:12:28.280
semi-deliberate crippling

00:12:28.280 --> 00:12:29.120
of the platform.

00:12:29.120 --> 00:12:29.400
You know,

00:12:29.400 --> 00:12:29.580
how,

00:12:29.580 --> 00:12:30.720
if people remember,

00:12:30.720 --> 00:12:31.400
gosh,

00:12:31.400 --> 00:12:31.660
I mean,

00:12:31.660 --> 00:12:33.220
I realize that this makes me

00:12:33.220 --> 00:12:34.520
old for some people.

00:12:34.520 --> 00:12:35.440
if you remember

00:12:35.440 --> 00:12:36.580
the pain

00:12:36.580 --> 00:12:37.320
of trying to make

00:12:37.320 --> 00:12:37.980
something work

00:12:37.980 --> 00:12:39.000
at Internet Explorer 4

00:12:39.000 --> 00:12:39.520
or 5

00:12:39.520 --> 00:12:40.400
as a web application,

00:12:40.400 --> 00:12:41.540
it was really hard work

00:12:41.540 --> 00:12:42.500
and that was not accidental.

00:12:42.500 --> 00:12:42.860
Yeah,

00:12:42.860 --> 00:12:43.820
and then they kind of

00:12:43.820 --> 00:12:45.320
fixed it in Internet Explorer 6

00:12:45.320 --> 00:12:46.000
and then the web

00:12:46.000 --> 00:12:46.700
kind of suffered

00:12:46.700 --> 00:12:48.160
from a couple years

00:12:48.160 --> 00:12:48.940
of stagnation.

00:12:48.940 --> 00:12:50.080
It was years of stagnation.

00:12:50.080 --> 00:12:50.880
I think that the couple

00:12:50.880 --> 00:12:51.900
of years of stagnation

00:12:51.900 --> 00:12:52.320
is,

00:12:52.320 --> 00:12:53.820
that was actually

00:12:53.820 --> 00:12:54.540
arguably

00:12:54.540 --> 00:12:55.620
one of the periods

00:12:55.620 --> 00:12:56.660
of greatest innovation

00:12:56.660 --> 00:12:57.480
where it just became

00:12:57.480 --> 00:12:58.900
obvious how tight

00:12:58.900 --> 00:12:59.560
the constraints

00:12:59.560 --> 00:13:00.000
and limits

00:13:00.000 --> 00:13:00.800
that had been put

00:13:00.800 --> 00:13:01.260
on it were.

00:13:01.740 --> 00:13:02.560
because what actually

00:13:02.560 --> 00:13:03.520
happened is this wonderful,

00:13:03.520 --> 00:13:04.800
it's almost a Greek tragedy.

00:13:04.800 --> 00:13:06.360
You get Microsoft

00:13:06.360 --> 00:13:07.220
trying desperately

00:13:07.220 --> 00:13:08.200
to hold back

00:13:08.200 --> 00:13:10.160
this tide of web innovation

00:13:10.160 --> 00:13:11.000
so it doesn't become

00:13:11.000 --> 00:13:12.000
the platform of the future

00:13:12.000 --> 00:13:14.180
and then this,

00:13:14.180 --> 00:13:14.540
you know,

00:13:14.540 --> 00:13:16.060
around the turn

00:13:16.060 --> 00:13:16.840
of the millennium

00:13:16.840 --> 00:13:18.140
and this is like famously

00:13:18.140 --> 00:13:18.860
product groups

00:13:18.860 --> 00:13:19.440
in Microsoft

00:13:19.440 --> 00:13:21.000
not very well connected,

00:13:21.000 --> 00:13:21.940
the Outlook

00:13:21.940 --> 00:13:22.960
web access team,

00:13:22.960 --> 00:13:23.380
they go,

00:13:23.380 --> 00:13:23.560
well,

00:13:23.560 --> 00:13:24.260
wouldn't it be great

00:13:24.260 --> 00:13:24.900
if you could have

00:13:24.900 --> 00:13:25.440
like Outlook,

00:13:25.440 --> 00:13:26.220
an email client

00:13:26.220 --> 00:13:26.960
in a web browser

00:13:26.960 --> 00:13:27.840
and they kind of

00:13:27.840 --> 00:13:28.680
put enough pressure on

00:13:28.680 --> 00:13:29.920
to make the Internet Explorer

00:13:29.920 --> 00:13:30.740
team implement

00:13:30.740 --> 00:13:32.420
this weird,

00:13:32.420 --> 00:13:33.900
janky interface

00:13:33.900 --> 00:13:34.600
for doing like

00:13:34.600 --> 00:13:35.340
real-time calls

00:13:35.340 --> 00:13:35.740
to the server

00:13:35.740 --> 00:13:37.280
called XMLRPC request

00:13:37.280 --> 00:13:39.020
and then that

00:13:39.020 --> 00:13:39.880
gets released

00:13:39.880 --> 00:13:41.220
in like what,

00:13:41.220 --> 00:13:41.740
2002,

00:13:41.740 --> 00:13:42.420
2003

00:13:42.420 --> 00:13:43.420
and within a year

00:13:43.420 --> 00:13:44.080
you've got Gmail

00:13:44.080 --> 00:13:44.780
and Google Maps.

00:13:44.780 --> 00:13:45.100
Yeah,

00:13:45.100 --> 00:13:46.080
that just totally

00:13:46.080 --> 00:13:47.280
broke the dam free,

00:13:47.280 --> 00:13:47.500
right?

00:13:47.500 --> 00:13:48.000
That was when

00:13:48.000 --> 00:13:48.960
the whole Web2O

00:13:48.960 --> 00:13:49.800
sort of thing

00:13:49.800 --> 00:13:50.300
kicked in,

00:13:50.300 --> 00:13:50.520
right?

00:13:50.520 --> 00:13:51.000
Yeah.

00:13:51.000 --> 00:13:51.780
Thing happened,

00:13:51.780 --> 00:13:52.000
yeah,

00:13:52.000 --> 00:13:53.400
and so the Internet Explorer

00:13:53.400 --> 00:13:54.560
stick-6 stagnation

00:13:54.560 --> 00:13:55.660
was a bunch of people

00:13:55.660 --> 00:13:56.200
kind of,

00:13:56.200 --> 00:13:57.440
it was a belated

00:13:57.440 --> 00:13:58.680
putting on of the brakes

00:13:58.680 --> 00:13:59.520
when the dam

00:13:59.520 --> 00:14:00.600
had already broken.

00:14:00.600 --> 00:14:02.140
but the fun thing

00:14:02.140 --> 00:14:02.580
about this is

00:14:02.580 --> 00:14:03.180
what it means is

00:14:03.180 --> 00:14:04.540
the whole Web platform,

00:14:04.540 --> 00:14:05.380
the whole structure

00:14:05.380 --> 00:14:06.220
of the Web platform

00:14:06.220 --> 00:14:08.260
is built on the rubble

00:14:08.260 --> 00:14:10.260
of a platform war

00:14:10.260 --> 00:14:12.140
of the early 2000s

00:14:12.140 --> 00:14:13.880
and so that's why

00:14:13.880 --> 00:14:14.720
the ground underneath

00:14:14.720 --> 00:14:15.260
your feet

00:14:15.260 --> 00:14:16.540
is so rough,

00:14:16.540 --> 00:14:18.000
I would argue,

00:14:18.000 --> 00:14:20.180
because we're still

00:14:20.180 --> 00:14:21.180
trying to build

00:14:21.180 --> 00:14:22.140
a functional application

00:14:22.140 --> 00:14:23.720
platform on top

00:14:23.720 --> 00:14:25.000
of a system

00:14:25.000 --> 00:14:25.640
that was originally

00:14:25.640 --> 00:14:26.280
documents

00:14:26.280 --> 00:14:27.720
and then evolved

00:14:27.720 --> 00:14:29.660
against really

00:14:29.660 --> 00:14:31.040
like active opposition

00:14:31.040 --> 00:14:32.260
into an application

00:14:32.260 --> 00:14:32.780
platform

00:14:32.780 --> 00:14:34.040
and what's left

00:14:34.040 --> 00:14:35.320
is this Frankensteinian

00:14:35.320 --> 00:14:35.680
monster

00:14:35.680 --> 00:14:37.160
of so many

00:14:37.160 --> 00:14:38.240
different languages

00:14:38.240 --> 00:14:39.060
and frameworks

00:14:39.060 --> 00:14:40.060
having to work together

00:14:40.060 --> 00:14:40.800
to make something

00:14:40.800 --> 00:14:41.280
happen

00:14:41.280 --> 00:14:43.160
that you end up

00:14:43.160 --> 00:14:43.800
with this huge barrier

00:14:43.800 --> 00:14:44.220
to entry.

00:14:44.220 --> 00:14:44.840
Yeah, you do

00:14:44.840 --> 00:14:45.420
and I feel like

00:14:45.420 --> 00:14:46.080
a lot of the Web

00:14:46.080 --> 00:14:46.680
is like,

00:14:46.680 --> 00:14:47.460
well,

00:14:47.460 --> 00:14:47.980
we could probably

00:14:47.980 --> 00:14:48.640
do this better

00:14:48.640 --> 00:14:50.200
but this is working

00:14:50.200 --> 00:14:50.640
everywhere

00:14:50.640 --> 00:14:51.920
and that's more

00:14:51.920 --> 00:14:52.680
important than anything

00:14:52.680 --> 00:14:53.000
else.

00:14:53.000 --> 00:14:53.660
It's the ultimate

00:14:53.660 --> 00:14:54.340
path dependence.

00:14:54.340 --> 00:14:54.960
It's how we,

00:14:54.960 --> 00:14:55.380
you know,

00:14:55.380 --> 00:14:56.540
we got here this way

00:14:56.540 --> 00:14:57.040
and that's,

00:14:57.040 --> 00:14:58.020
so that determines

00:14:58.020 --> 00:14:58.760
the way things are.

00:14:58.760 --> 00:14:59.180
Well,

00:14:59.180 --> 00:15:00.100
so that probably means

00:15:00.100 --> 00:15:00.900
writing Python

00:15:00.900 --> 00:15:01.620
in the browser

00:15:01.620 --> 00:15:02.520
is not really

00:15:02.520 --> 00:15:03.120
going to be a thing,

00:15:03.120 --> 00:15:03.380
right?

00:15:03.380 --> 00:15:04.060
It's all JavaScript.

00:15:04.060 --> 00:15:04.580
Absolutely.

00:15:04.580 --> 00:15:05.000
Also,

00:15:05.000 --> 00:15:05.780
and this is,

00:15:05.780 --> 00:15:07.060
this is one of the

00:15:07.060 --> 00:15:07.880
things we set out

00:15:07.880 --> 00:15:08.300
to tackle.

00:15:08.300 --> 00:15:09.420
We actually use

00:15:09.420 --> 00:15:10.420
an open source

00:15:10.420 --> 00:15:11.560
Python to JavaScript

00:15:11.560 --> 00:15:12.940
compiler called Sculpt

00:15:12.940 --> 00:15:14.680
and so that's

00:15:14.680 --> 00:15:15.520
what enables us

00:15:15.520 --> 00:15:16.520
to take your Python

00:15:16.520 --> 00:15:17.280
code that you've

00:15:17.280 --> 00:15:18.020
written in this,

00:15:18.020 --> 00:15:18.200
you know,

00:15:18.200 --> 00:15:18.940
design code,

00:15:18.940 --> 00:15:19.740
your view thing

00:15:19.740 --> 00:15:20.780
and run it right

00:15:20.780 --> 00:15:21.420
there in the browser.

00:15:22.060 --> 00:15:22.500
that project

00:15:22.500 --> 00:15:23.180
already existed

00:15:23.180 --> 00:15:24.260
and there are a

00:15:24.260 --> 00:15:24.820
couple other

00:15:24.820 --> 00:15:25.700
kind of like it

00:15:25.700 --> 00:15:27.340
but there was a lot

00:15:27.340 --> 00:15:28.300
that of work

00:15:28.300 --> 00:15:28.780
that needed doing

00:15:28.780 --> 00:15:29.040
to it.

00:15:29.040 --> 00:15:29.520
I jumped in,

00:15:29.520 --> 00:15:30.140
I'm now one of

00:15:30.140 --> 00:15:30.860
the maintainers,

00:15:30.860 --> 00:15:32.020
I did the big change

00:15:32.020 --> 00:15:32.760
that enabled that

00:15:32.760 --> 00:15:33.560
blocking code you

00:15:33.560 --> 00:15:34.140
were talking about

00:15:34.140 --> 00:15:34.560
earlier,

00:15:34.560 --> 00:15:35.140
that was,

00:15:35.140 --> 00:15:35.960
that was a big

00:15:35.960 --> 00:15:36.380
change.

00:15:36.380 --> 00:15:37.300
But yeah,

00:15:37.300 --> 00:15:38.500
it's really quite fun

00:15:38.500 --> 00:15:39.760
because not often

00:15:39.760 --> 00:15:40.520
you get to do like

00:15:40.520 --> 00:15:41.560
deep compiler hacking

00:15:41.560 --> 00:15:42.360
and then say,

00:15:42.360 --> 00:15:42.760
actually,

00:15:42.760 --> 00:15:43.520
this is,

00:15:43.520 --> 00:15:43.740
you know,

00:15:43.740 --> 00:15:44.180
you can draw a

00:15:44.180 --> 00:15:45.340
direct line from

00:15:45.340 --> 00:15:47.200
this weird piece

00:15:47.200 --> 00:15:48.200
of object code

00:15:48.200 --> 00:15:48.980
transformation I'm

00:15:48.980 --> 00:15:50.260
doing to like

00:15:50.260 --> 00:15:51.020
I'm improving

00:15:51.020 --> 00:15:51.840
usability for

00:15:51.840 --> 00:15:52.360
seven-year-olds.

00:15:52.360 --> 00:15:53.420
And I mean,

00:15:53.420 --> 00:15:53.880
and indeed,

00:15:53.880 --> 00:15:54.720
I should say this,

00:15:54.720 --> 00:15:56.480
for developers

00:15:56.480 --> 00:15:56.980
of all strikes,

00:15:56.980 --> 00:15:57.180
right,

00:15:57.180 --> 00:15:58.140
for your data scientist

00:15:58.140 --> 00:15:58.980
who knows how to

00:15:58.980 --> 00:15:59.440
draw a graph

00:15:59.440 --> 00:15:59.940
and needs to do

00:15:59.940 --> 00:16:00.360
a web map.

00:16:00.560 --> 00:16:01.140
what I think is

00:16:01.140 --> 00:16:01.640
really interesting

00:16:01.640 --> 00:16:02.500
there is like

00:16:02.500 --> 00:16:03.240
you open that

00:16:03.240 --> 00:16:03.820
statement with

00:16:03.820 --> 00:16:04.940
we're improving

00:16:04.940 --> 00:16:05.960
sort of the

00:16:05.960 --> 00:16:06.540
accessibility of the

00:16:06.540 --> 00:16:07.300
web for seven-year-olds,

00:16:07.300 --> 00:16:08.340
which I think,

00:16:08.340 --> 00:16:09.540
as you pointed out,

00:16:09.540 --> 00:16:10.300
kind of downplays

00:16:10.300 --> 00:16:11.420
the significance of it.

00:16:11.420 --> 00:16:12.600
But when you get

00:16:12.600 --> 00:16:13.760
something that kids

00:16:13.760 --> 00:16:14.500
like that can start

00:16:14.500 --> 00:16:15.120
to use,

00:16:15.120 --> 00:16:16.200
what that really

00:16:16.200 --> 00:16:16.840
means is

00:16:16.840 --> 00:16:17.880
non-programmer,

00:16:17.880 --> 00:16:19.280
you like crack open

00:16:19.280 --> 00:16:20.000
like a whole new

00:16:20.000 --> 00:16:20.760
aspect of the web

00:16:20.760 --> 00:16:21.880
for non-programmers.

00:16:21.880 --> 00:16:22.520
People who like,

00:16:22.520 --> 00:16:22.940
hey,

00:16:22.940 --> 00:16:23.680
I could totally

00:16:23.680 --> 00:16:24.760
program Excel

00:16:24.760 --> 00:16:26.140
and I could like

00:16:26.140 --> 00:16:27.220
set up these functions

00:16:27.220 --> 00:16:28.220
and maybe an if statement

00:16:28.220 --> 00:16:28.760
that'll make

00:16:28.760 --> 00:16:29.760
like this Excel go,

00:16:29.760 --> 00:16:30.680
but I'm not a programmer,

00:16:30.680 --> 00:16:31.480
right?

00:16:31.480 --> 00:16:31.820
All of a sudden

00:16:31.820 --> 00:16:32.940
that person can become

00:16:32.940 --> 00:16:34.100
like they could build

00:16:34.100 --> 00:16:34.540
a web app

00:16:34.540 --> 00:16:35.360
totally with those skills.

00:16:35.360 --> 00:16:36.100
So this is something

00:16:36.100 --> 00:16:36.940
that's quite interesting

00:16:36.940 --> 00:16:38.320
and it's a philosophical thing.

00:16:38.320 --> 00:16:39.040
A lot of people

00:16:39.040 --> 00:16:40.100
are interested in making

00:16:40.100 --> 00:16:41.820
tools for non-programmers

00:16:41.820 --> 00:16:42.220
and actually,

00:16:42.220 --> 00:16:43.200
if you want tools

00:16:43.200 --> 00:16:44.280
for building a web app

00:16:44.280 --> 00:16:45.180
for non-programmers,

00:16:45.180 --> 00:16:46.140
there's actually

00:16:46.140 --> 00:16:47.280
quite a lot out there

00:16:47.280 --> 00:16:48.460
and it's probably

00:16:48.460 --> 00:16:49.300
better optimized

00:16:49.300 --> 00:16:50.220
for non-programmers

00:16:50.220 --> 00:16:51.480
than Anvil is.

00:16:51.480 --> 00:16:52.880
We actually take

00:16:52.880 --> 00:16:53.560
a different approach.

00:16:53.560 --> 00:16:54.180
We say,

00:16:54.180 --> 00:16:55.640
programming's not

00:16:55.640 --> 00:16:57.620
actually that hard,

00:16:57.620 --> 00:16:57.880
right?

00:16:58.180 --> 00:16:58.840
increasingly,

00:16:58.840 --> 00:17:00.320
people teach themselves

00:17:00.320 --> 00:17:01.740
to code from websites.

00:17:01.740 --> 00:17:03.100
They get taught in school.

00:17:03.100 --> 00:17:04.240
It is something

00:17:04.240 --> 00:17:05.600
that people think

00:17:05.600 --> 00:17:06.140
it's reasonable

00:17:06.140 --> 00:17:07.320
to teach middle schoolers

00:17:07.320 --> 00:17:08.780
and a whole bunch

00:17:08.780 --> 00:17:09.180
of people

00:17:09.180 --> 00:17:10.380
have learned themselves

00:17:10.380 --> 00:17:13.380
and I would argue

00:17:13.380 --> 00:17:14.500
kind of one of the

00:17:14.500 --> 00:17:15.280
big reasons

00:17:15.280 --> 00:17:16.460
we have this big

00:17:16.460 --> 00:17:17.220
mental block

00:17:17.220 --> 00:17:17.700
around,

00:17:17.700 --> 00:17:18.040
oh,

00:17:18.040 --> 00:17:19.200
programming's so hard,

00:17:19.200 --> 00:17:19.940
we have to make it

00:17:19.940 --> 00:17:21.320
accessible to non-programmers

00:17:21.320 --> 00:17:22.660
is that when we think

00:17:22.660 --> 00:17:23.280
of programming,

00:17:23.280 --> 00:17:25.060
we think of

00:17:25.060 --> 00:17:26.120
the modern

00:17:26.120 --> 00:17:27.080
10-layer

00:17:27.080 --> 00:17:28.140
web application

00:17:28.140 --> 00:17:28.680
stack.

00:17:28.680 --> 00:17:29.220
Whereas,

00:17:29.220 --> 00:17:29.920
actually,

00:17:29.920 --> 00:17:31.520
writing code

00:17:31.520 --> 00:17:32.360
is the best way

00:17:32.360 --> 00:17:33.160
to tell a computer

00:17:33.160 --> 00:17:34.000
how to do something

00:17:34.000 --> 00:17:35.920
and Python

00:17:35.920 --> 00:17:36.660
is one of the best

00:17:36.660 --> 00:17:38.120
ways to get from

00:17:38.120 --> 00:17:39.280
I'm learning

00:17:39.280 --> 00:17:39.940
these concepts

00:17:39.940 --> 00:17:40.460
to cool,

00:17:40.460 --> 00:17:41.080
I can write some

00:17:41.080 --> 00:17:41.620
code that gets

00:17:41.620 --> 00:17:42.360
some stuff done

00:17:42.360 --> 00:17:43.560
and that should

00:17:43.560 --> 00:17:44.480
be all you need.

00:17:44.480 --> 00:17:45.100
So,

00:17:45.100 --> 00:17:45.740
we're kind of

00:17:45.740 --> 00:17:46.660
not aiming

00:17:46.660 --> 00:17:47.980
at non-programmers,

00:17:47.980 --> 00:17:49.340
we're aiming at

00:17:49.340 --> 00:17:50.440
I can do a little

00:17:50.440 --> 00:17:51.100
bit of code

00:17:51.100 --> 00:17:51.840
and that should

00:17:51.840 --> 00:17:52.480
be enough.

00:17:52.480 --> 00:17:52.780
Yeah,

00:17:52.780 --> 00:17:53.320
I guess that's what

00:17:53.320 --> 00:17:53.880
I was thinking of

00:17:53.880 --> 00:17:54.160
as well.

00:17:54.160 --> 00:17:54.580
It's like people

00:17:54.580 --> 00:17:54.940
who are like,

00:17:55.020 --> 00:17:55.820
I'll take a

00:17:55.820 --> 00:17:56.620
two-hour or

00:17:56.620 --> 00:17:57.460
five-hour course

00:17:57.460 --> 00:17:58.180
on Python

00:17:58.180 --> 00:17:59.600
and put a little

00:17:59.600 --> 00:18:00.400
effort into learning

00:18:00.400 --> 00:18:00.740
to code,

00:18:00.740 --> 00:18:01.580
but I'm not going

00:18:01.580 --> 00:18:02.520
to take computer

00:18:02.520 --> 00:18:03.820
science four-year

00:18:03.820 --> 00:18:04.620
program, right?

00:18:04.620 --> 00:18:05.380
Like that kind of

00:18:05.380 --> 00:18:05.600
group.

00:18:05.600 --> 00:18:06.140
And you shouldn't

00:18:06.140 --> 00:18:06.600
need it, right?

00:18:06.600 --> 00:18:07.540
It's when people

00:18:07.540 --> 00:18:08.340
talk about coding

00:18:08.340 --> 00:18:09.180
as digital literacy,

00:18:09.180 --> 00:18:09.600
this is what

00:18:09.600 --> 00:18:10.000
they're talking

00:18:10.000 --> 00:18:10.300
about.

00:18:10.300 --> 00:18:11.140
You shouldn't

00:18:11.140 --> 00:18:11.820
actually need

00:18:11.820 --> 00:18:12.520
to be that

00:18:12.520 --> 00:18:13.160
kind of expert

00:18:13.160 --> 00:18:13.720
before you can

00:18:13.720 --> 00:18:14.740
at least participate

00:18:14.740 --> 00:18:15.480
in this world.

00:18:15.700 --> 00:18:16.720
So, funny story,

00:18:16.720 --> 00:18:17.460
I'm actually

00:18:17.460 --> 00:18:18.600
taking this

00:18:18.600 --> 00:18:19.520
interview from

00:18:19.520 --> 00:18:20.480
borrowed offices

00:18:20.480 --> 00:18:21.540
of a customer

00:18:21.540 --> 00:18:23.420
who started

00:18:23.420 --> 00:18:25.900
with a single

00:18:25.900 --> 00:18:26.640
data scientist

00:18:26.640 --> 00:18:28.360
and, you know,

00:18:28.360 --> 00:18:29.600
she had the

00:18:29.600 --> 00:18:30.420
stats knowledge,

00:18:30.420 --> 00:18:31.020
the marketing

00:18:31.020 --> 00:18:31.580
understanding

00:18:31.580 --> 00:18:33.100
for an ad tech

00:18:33.100 --> 00:18:33.760
product she wanted

00:18:33.760 --> 00:18:34.240
to build.

00:18:34.240 --> 00:18:35.220
As far as she

00:18:35.220 --> 00:18:35.780
was concerned,

00:18:35.780 --> 00:18:36.400
she was, you know,

00:18:36.400 --> 00:18:37.120
she was not a

00:18:37.120 --> 00:18:37.440
developer.

00:18:37.440 --> 00:18:38.380
She couldn't

00:18:38.380 --> 00:18:39.240
build the web

00:18:39.240 --> 00:18:39.740
app that this

00:18:39.740 --> 00:18:40.760
so clearly needed

00:18:40.760 --> 00:18:42.400
and was, you know,

00:18:42.400 --> 00:18:43.140
talking to agencies

00:18:43.140 --> 00:18:43.720
and so on.

00:18:44.300 --> 00:18:45.900
And then she

00:18:45.900 --> 00:18:46.500
found Anvil

00:18:46.500 --> 00:18:47.100
and suddenly

00:18:47.100 --> 00:18:48.520
actually she

00:18:48.520 --> 00:18:49.580
realized she was

00:18:49.580 --> 00:18:50.100
a developer.

00:18:50.100 --> 00:18:51.100
It's just that

00:18:51.100 --> 00:18:51.920
what she could do

00:18:51.920 --> 00:18:52.460
was, you know,

00:18:52.460 --> 00:18:53.140
the Python she'd

00:18:53.140 --> 00:18:53.640
learned in the

00:18:53.640 --> 00:18:54.320
course of data

00:18:54.320 --> 00:18:54.800
science.

00:18:54.800 --> 00:18:56.360
And that's kind

00:18:56.360 --> 00:18:57.900
of moving the

00:18:57.900 --> 00:18:58.760
goalposts that

00:18:58.760 --> 00:18:59.840
actually a lot

00:18:59.840 --> 00:19:00.680
more people can

00:19:00.680 --> 00:19:01.340
and do know

00:19:01.340 --> 00:19:01.800
how to code.

00:19:01.800 --> 00:19:02.300
They just don't

00:19:02.300 --> 00:19:02.940
think of themselves

00:19:02.940 --> 00:19:03.940
as being able

00:19:03.940 --> 00:19:04.860
to build stuff

00:19:04.860 --> 00:19:05.900
primarily because

00:19:05.900 --> 00:19:06.420
of the quality

00:19:06.420 --> 00:19:07.840
of today's tools

00:19:07.840 --> 00:19:08.760
rather than

00:19:08.760 --> 00:19:09.640
because they

00:19:09.640 --> 00:19:10.500
actually don't

00:19:10.500 --> 00:19:10.840
know how to

00:19:10.840 --> 00:19:11.180
program.

00:19:11.180 --> 00:19:12.300
And the world's

00:19:12.300 --> 00:19:12.740
full of people

00:19:12.740 --> 00:19:13.280
like that, right?

00:19:13.280 --> 00:19:13.820
People who can

00:19:13.820 --> 00:19:14.260
write a little

00:19:14.260 --> 00:19:14.820
bit of code,

00:19:14.820 --> 00:19:15.660
as you said,

00:19:15.660 --> 00:19:16.180
like people

00:19:16.180 --> 00:19:17.320
who'd in

00:19:17.320 --> 00:19:19.100
previous decades

00:19:19.100 --> 00:19:20.040
would have

00:19:20.040 --> 00:19:21.040
graduated from

00:19:21.040 --> 00:19:22.020
Excel to

00:19:22.020 --> 00:19:22.920
Visual Basic

00:19:22.920 --> 00:19:24.480
are now like

00:19:24.480 --> 00:19:24.780
they're the

00:19:24.780 --> 00:19:25.580
people who are

00:19:25.580 --> 00:19:27.260
writing Python

00:19:27.260 --> 00:19:27.840
analysis,

00:19:27.840 --> 00:19:28.420
you're doing a

00:19:28.420 --> 00:19:28.720
little bit of

00:19:28.720 --> 00:19:29.800
Python notebooking

00:19:29.800 --> 00:19:31.400
and we're trying

00:19:31.400 --> 00:19:32.200
to graduate them

00:19:32.200 --> 00:19:33.020
onto, you know,

00:19:33.020 --> 00:19:33.740
you can take that

00:19:33.740 --> 00:19:34.420
and you can build

00:19:34.420 --> 00:19:35.620
something real

00:19:35.620 --> 00:19:36.600
that in this case

00:19:36.600 --> 00:19:37.880
handles, you know,

00:19:37.880 --> 00:19:38.580
terrifying amounts

00:19:38.580 --> 00:19:39.320
of advertising money.

00:19:39.320 --> 00:19:40.740
That's awesome.

00:19:41.060 --> 00:19:42.300
I do feel like

00:19:42.300 --> 00:19:44.100
that people are

00:19:44.100 --> 00:19:44.960
expected to

00:19:44.960 --> 00:19:46.840
start software

00:19:46.840 --> 00:19:48.780
as they're

00:19:48.780 --> 00:19:49.280
compared to

00:19:49.280 --> 00:19:49.960
places like,

00:19:49.960 --> 00:19:50.540
well, this is

00:19:50.540 --> 00:19:51.160
how Instagram

00:19:51.160 --> 00:19:52.600
works with Django

00:19:52.600 --> 00:19:53.320
and this is how

00:19:53.320 --> 00:19:53.720
they use

00:19:53.720 --> 00:19:54.500
microservices

00:19:54.500 --> 00:19:55.180
and this is how

00:19:55.180 --> 00:19:55.740
they've written

00:19:55.740 --> 00:19:56.700
it to be testable

00:19:56.700 --> 00:19:57.440
and scalable.

00:19:57.440 --> 00:19:58.820
People look at

00:19:58.820 --> 00:19:59.240
that and they go,

00:19:59.240 --> 00:20:00.040
well, I can't do

00:20:00.040 --> 00:20:01.340
that, so I can't

00:20:01.340 --> 00:20:01.920
start, right?

00:20:01.920 --> 00:20:02.720
And I feel like

00:20:02.720 --> 00:20:04.180
sometimes the most

00:20:04.180 --> 00:20:04.820
important thing is

00:20:04.820 --> 00:20:05.800
just to get started.

00:20:05.940 --> 00:20:06.760
like, I think

00:20:06.760 --> 00:20:07.640
Microsoft Access

00:20:07.640 --> 00:20:09.580
was like one of

00:20:09.580 --> 00:20:10.620
the most used

00:20:10.620 --> 00:20:11.380
small business

00:20:11.380 --> 00:20:12.120
sort of things

00:20:12.120 --> 00:20:13.200
for basically

00:20:13.200 --> 00:20:14.600
forms over data,

00:20:14.600 --> 00:20:15.620
build something to

00:20:15.620 --> 00:20:16.840
work to make my

00:20:16.840 --> 00:20:18.260
dentistry run

00:20:18.260 --> 00:20:19.080
or make my little

00:20:19.080 --> 00:20:19.740
business run.

00:20:19.740 --> 00:20:20.420
I'm not a programmer

00:20:20.420 --> 00:20:21.380
but I can like drag

00:20:21.380 --> 00:20:21.920
this stuff around

00:20:21.920 --> 00:20:22.440
until I can get

00:20:22.440 --> 00:20:22.940
what I need

00:20:22.940 --> 00:20:23.800
and that's kind

00:20:23.800 --> 00:20:24.320
of gone away,

00:20:24.320 --> 00:20:24.600
right?

00:20:24.600 --> 00:20:25.440
I'm not a programmer

00:20:25.440 --> 00:20:26.380
but I can use

00:20:26.380 --> 00:20:27.220
Access to put this

00:20:27.220 --> 00:20:27.500
together.

00:20:27.500 --> 00:20:28.820
I'm not a programmer

00:20:28.820 --> 00:20:30.200
but I can create

00:20:30.200 --> 00:20:31.180
a visual basic form

00:20:31.180 --> 00:20:31.800
to do this one

00:20:31.800 --> 00:20:32.220
thing that's

00:20:32.220 --> 00:20:33.100
application specific.

00:20:33.100 --> 00:20:34.540
I'm not a programmer

00:20:34.540 --> 00:20:35.840
but I've now

00:20:35.840 --> 00:20:36.700
created this line

00:20:36.700 --> 00:20:37.040
of business

00:20:37.040 --> 00:20:38.180
application that

00:20:38.180 --> 00:20:39.300
runs my business

00:20:39.300 --> 00:20:40.460
and Microsoft

00:20:40.460 --> 00:20:41.240
have basically

00:20:41.240 --> 00:20:41.900
taken one look

00:20:41.900 --> 00:20:42.300
at this and

00:20:42.300 --> 00:20:42.900
realized that they

00:20:42.900 --> 00:20:43.480
had to guarantee

00:20:43.480 --> 00:20:44.140
support for

00:20:44.140 --> 00:20:45.120
applications written

00:20:45.120 --> 00:20:45.980
in Visual Basic 6

00:20:45.980 --> 00:20:47.040
out to like the

00:20:47.040 --> 00:20:48.440
2030s or something

00:20:48.440 --> 00:20:49.720
because you give

00:20:49.720 --> 00:20:50.840
people this ability

00:20:50.840 --> 00:20:51.720
to like slide

00:20:51.720 --> 00:20:53.120
into building code

00:20:53.120 --> 00:20:54.060
and you know

00:20:54.060 --> 00:20:54.640
you give people

00:20:54.640 --> 00:20:55.280
this power and

00:20:55.280 --> 00:20:55.860
amazing things

00:20:55.860 --> 00:20:56.180
happen.

00:20:56.180 --> 00:20:57.800
Although, yeah,

00:20:57.800 --> 00:20:58.760
something we've

00:20:58.760 --> 00:20:59.480
been working on

00:20:59.480 --> 00:21:00.260
quite a lot with

00:21:00.260 --> 00:21:01.020
Anvil is to

00:21:01.020 --> 00:21:01.720
support that whole

00:21:01.720 --> 00:21:02.720
journey because I

00:21:02.720 --> 00:21:03.680
don't want to

00:21:03.680 --> 00:21:04.400
like pretend

00:21:04.400 --> 00:21:06.000
that good

00:21:06.000 --> 00:21:07.160
architecture and

00:21:07.160 --> 00:21:07.800
testing and all

00:21:07.800 --> 00:21:09.080
these things aren't

00:21:09.080 --> 00:21:10.860
important and so

00:21:10.860 --> 00:21:13.300
a real, the big

00:21:13.300 --> 00:21:14.780
design goal for us

00:21:14.780 --> 00:21:16.060
with Anvil is to

00:21:16.060 --> 00:21:16.960
have something you

00:21:16.960 --> 00:21:18.340
can get started

00:21:18.340 --> 00:21:20.080
with without this

00:21:20.080 --> 00:21:20.800
huge barrier to

00:21:20.800 --> 00:21:22.680
entry but is not

00:21:22.680 --> 00:21:23.980
going to stop you

00:21:23.980 --> 00:21:25.860
achieving mastery

00:21:25.860 --> 00:21:27.300
and proper design

00:21:27.300 --> 00:21:28.660
and scaling your

00:21:28.660 --> 00:21:29.660
app and scaling

00:21:29.660 --> 00:21:30.200
your code.

00:21:30.200 --> 00:21:30.640
Right.

00:21:30.640 --> 00:21:31.160
You don't want to

00:21:31.160 --> 00:21:31.820
set a really low

00:21:31.820 --> 00:21:32.240
ceiling.

00:21:32.240 --> 00:21:33.040
Yes, exactly.

00:21:33.040 --> 00:21:33.560
don't want to

00:21:33.560 --> 00:21:34.720
set a really high

00:21:34.720 --> 00:21:35.620
barrier to entry.

00:21:35.620 --> 00:21:36.960
Yeah, and we're

00:21:36.960 --> 00:21:37.560
convinced that this

00:21:37.560 --> 00:21:38.520
is possible and we

00:21:38.520 --> 00:21:39.100
think that, you

00:21:39.100 --> 00:21:40.420
know, we are well

00:21:40.420 --> 00:21:41.020
on the way if not

00:21:41.020 --> 00:21:41.860
already there for

00:21:41.860 --> 00:21:42.880
most people's use

00:21:42.880 --> 00:21:44.460
cases and I think

00:21:44.460 --> 00:21:46.380
that there's a bit

00:21:46.380 --> 00:21:48.320
of a sense that

00:21:48.320 --> 00:21:49.960
the floor is so

00:21:49.960 --> 00:21:50.300
high on the

00:21:50.300 --> 00:21:50.920
traditional tools

00:21:50.920 --> 00:21:51.540
anything with a

00:21:51.540 --> 00:21:52.420
lower floor must

00:21:52.420 --> 00:21:53.180
have a much lower

00:21:53.180 --> 00:21:54.000
ceiling and I just

00:21:54.000 --> 00:21:54.640
don't think that's

00:21:54.640 --> 00:21:54.880
true.

00:21:54.880 --> 00:21:55.400
I think that's

00:21:55.400 --> 00:21:55.620
awesome.

00:21:55.620 --> 00:21:56.740
So maybe now is a

00:21:56.740 --> 00:21:57.320
good time to like

00:21:57.320 --> 00:21:58.180
start actually getting

00:21:58.180 --> 00:21:59.160
into the details of

00:21:59.160 --> 00:21:59.480
Anvil.

00:21:59.480 --> 00:22:00.500
People can check it

00:22:00.500 --> 00:22:00.760
out at

00:22:00.760 --> 00:22:01.400
Anvil.works,

00:22:01.400 --> 00:22:01.720
right?

00:22:01.720 --> 00:22:02.160
You can go there.

00:22:02.160 --> 00:22:02.800
There's some actually

00:22:02.800 --> 00:22:04.220
really nice videos and

00:22:04.220 --> 00:22:05.240
some really intriguing

00:22:05.240 --> 00:22:06.900
things but it

00:22:06.900 --> 00:22:07.640
basically starts, you

00:22:07.640 --> 00:22:08.100
say, create a new

00:22:08.100 --> 00:22:08.560
project.

00:22:08.560 --> 00:22:10.080
It happens on your

00:22:10.080 --> 00:22:12.280
web IDE and it

00:22:12.280 --> 00:22:13.400
drops you basically,

00:22:13.400 --> 00:22:14.280
well, why don't you

00:22:14.280 --> 00:22:14.780
walk us through it?

00:22:14.780 --> 00:22:15.580
So it doesn't just

00:22:15.580 --> 00:22:16.680
drop you into a blank

00:22:16.680 --> 00:22:17.700
page necessarily,

00:22:17.700 --> 00:22:18.020
right?

00:22:18.100 --> 00:22:18.760
if you sign up at

00:22:18.760 --> 00:22:19.980
Anvil.works, it is

00:22:19.980 --> 00:22:20.720
free to sign up.

00:22:20.720 --> 00:22:23.320
You end up in this

00:22:23.320 --> 00:22:24.500
IDE and you can choose

00:22:24.500 --> 00:22:25.200
some of our sample

00:22:25.200 --> 00:22:25.940
apps and see what

00:22:25.940 --> 00:22:26.720
we've done before but

00:22:26.720 --> 00:22:27.520
if you just create a

00:22:27.520 --> 00:22:28.940
new app, you start

00:22:28.940 --> 00:22:29.820
with selecting a

00:22:29.820 --> 00:22:31.980
visual theme and you

00:22:31.980 --> 00:22:32.960
create a new form

00:22:32.960 --> 00:22:34.080
which is like a page

00:22:34.080 --> 00:22:35.000
in your site.

00:22:35.000 --> 00:22:37.460
You've then got this

00:22:37.460 --> 00:22:37.860
form.

00:22:37.860 --> 00:22:38.740
It's not fully blank.

00:22:38.740 --> 00:22:39.680
It's already got like

00:22:39.680 --> 00:22:41.320
the visual structure in

00:22:41.320 --> 00:22:44.100
there and for this

00:22:44.100 --> 00:22:45.620
point you have a

00:22:45.620 --> 00:22:46.400
toolbox of stuff on the

00:22:46.400 --> 00:22:47.660
right that you can

00:22:47.660 --> 00:22:49.160
just drag on and

00:22:49.160 --> 00:22:50.100
visually create your

00:22:50.100 --> 00:22:52.480
page and everything

00:22:52.480 --> 00:22:54.520
you drag on is a

00:22:54.520 --> 00:22:55.800
Python object and if

00:22:55.800 --> 00:22:56.360
you sort of scroll

00:22:56.360 --> 00:22:57.280
down on the right you

00:22:57.280 --> 00:22:58.800
can have, you can see

00:22:58.800 --> 00:23:00.040
its properties like for

00:23:00.040 --> 00:23:00.920
example if you put some

00:23:00.920 --> 00:23:02.140
text on there's, you

00:23:02.140 --> 00:23:03.120
know, the font size of

00:23:03.120 --> 00:23:04.100
the text, there's the

00:23:04.100 --> 00:23:04.960
string that's what the

00:23:04.960 --> 00:23:06.840
text actually is, there

00:23:06.840 --> 00:23:07.940
is, you know, there's

00:23:07.940 --> 00:23:08.700
which font, there's

00:23:08.700 --> 00:23:09.960
which color, all that

00:23:09.960 --> 00:23:12.320
kind of stuff and you

00:23:12.320 --> 00:23:13.120
may or may not realize

00:23:13.120 --> 00:23:13.780
it at this point but

00:23:13.780 --> 00:23:14.500
you're actually just

00:23:14.500 --> 00:23:15.820
editing attributes of a

00:23:15.820 --> 00:23:16.920
Python object that is

00:23:16.920 --> 00:23:17.780
going to be created at

00:23:17.780 --> 00:23:18.100
runtime.

00:23:18.100 --> 00:23:20.120
Hey everyone, this is

00:23:20.120 --> 00:23:20.320
Michael.

00:23:20.320 --> 00:23:21.260
Let me tell you about

00:23:21.260 --> 00:23:21.720
Datadog.

00:23:21.720 --> 00:23:22.540
They're sponsoring this

00:23:22.540 --> 00:23:22.860
episode.

00:23:22.860 --> 00:23:24.280
Performance and

00:23:24.280 --> 00:23:25.300
bottlenecks don't exist

00:23:25.300 --> 00:23:26.500
just in your application

00:23:26.500 --> 00:23:26.860
code.

00:23:26.860 --> 00:23:28.140
Modern applications are

00:23:28.140 --> 00:23:29.220
systems built upon

00:23:29.220 --> 00:23:30.760
systems and Datadog

00:23:30.760 --> 00:23:31.760
lets you view the

00:23:31.760 --> 00:23:32.900
system as a whole.

00:23:32.900 --> 00:23:33.760
Let's say you have a

00:23:33.760 --> 00:23:34.780
Python web app running

00:23:34.780 --> 00:23:35.240
Flask.

00:23:35.240 --> 00:23:36.340
It's built upon MongoDB

00:23:36.340 --> 00:23:37.540
and hosted and scaled

00:23:37.540 --> 00:23:38.540
out on a set of Ubuntu

00:23:38.540 --> 00:23:39.940
servers running Nginx and

00:23:39.940 --> 00:23:40.520
MicroWisgee.

00:23:40.520 --> 00:23:42.100
Add Datadog and you can

00:23:42.100 --> 00:23:43.160
view and monitor and

00:23:43.160 --> 00:23:44.280
even get alerts across

00:23:44.280 --> 00:23:45.540
all of these systems.

00:23:45.540 --> 00:23:47.320
Datadog has a great

00:23:47.320 --> 00:23:48.260
getting started tutorial

00:23:48.260 --> 00:23:49.160
that takes just a few

00:23:49.160 --> 00:23:49.940
moments and if you

00:23:49.940 --> 00:23:50.960
complete it, they'll send

00:23:50.960 --> 00:23:52.480
you a sweet Datadog t-shirt

00:23:52.480 --> 00:23:52.980
for free.

00:23:52.980 --> 00:23:53.920
Don't hesitate.

00:23:53.920 --> 00:23:55.740
Visit talkpython.fm

00:23:55.740 --> 00:23:57.360
slash Datadog and see

00:23:57.360 --> 00:23:58.040
what you've been missing.

00:23:58.040 --> 00:23:59.680
That's talkpython.fm

00:23:59.680 --> 00:24:00.680
slash Datadog.

00:24:01.420 --> 00:24:02.300
Yeah, like you said, you

00:24:02.300 --> 00:24:03.160
may or may not know, but

00:24:03.160 --> 00:24:04.660
it has this very Visual

00:24:04.660 --> 00:24:06.340
Basic 6 designer feel,

00:24:06.340 --> 00:24:06.580
right?

00:24:06.580 --> 00:24:08.640
Like you see it, you drag

00:24:08.640 --> 00:24:10.160
the stuff on there, you

00:24:10.160 --> 00:24:12.040
have a properties pane, you

00:24:12.040 --> 00:24:13.600
change the name, and then

00:24:13.600 --> 00:24:14.440
maybe if there's like a

00:24:14.440 --> 00:24:15.140
button, you have these

00:24:15.140 --> 00:24:15.740
events, right?

00:24:15.740 --> 00:24:16.700
So there's various things

00:24:16.700 --> 00:24:17.760
that might have events.

00:24:17.760 --> 00:24:18.800
Like if you double click a

00:24:18.800 --> 00:24:20.700
button, it drops you into

00:24:20.700 --> 00:24:22.880
like this code behind type

00:24:22.880 --> 00:24:24.560
thing, which is a Python.

00:24:24.560 --> 00:24:25.700
Yeah, tell us about that

00:24:25.700 --> 00:24:26.100
back there.

00:24:26.200 --> 00:24:26.840
If you double click a

00:24:26.840 --> 00:24:27.820
button, you're immediately

00:24:27.820 --> 00:24:29.820
dumped into a function that

00:24:29.820 --> 00:24:30.580
runs and that button gets

00:24:30.580 --> 00:24:32.000
clicked, and it's actually

00:24:32.000 --> 00:24:33.780
a method of a class that

00:24:33.780 --> 00:24:34.860
represents the whole page.

00:24:34.860 --> 00:24:35.820
All of this is Python,

00:24:35.820 --> 00:24:36.060
right?

00:24:36.060 --> 00:24:37.080
Absolutely, all Python.

00:24:37.080 --> 00:24:38.600
And all those things you

00:24:38.600 --> 00:24:41.180
dragged onto the page are

00:24:41.180 --> 00:24:42.680
in fact accessible as

00:24:42.680 --> 00:24:43.840
instance variables, so

00:24:43.840 --> 00:24:45.400
you know, self.label1 or

00:24:45.400 --> 00:24:47.100
whatever, in that Python

00:24:47.100 --> 00:24:47.460
code.

00:24:47.460 --> 00:24:49.600
So it's a very natural

00:24:49.600 --> 00:24:50.400
thing.

00:24:50.400 --> 00:24:51.240
I mean, you said Visual

00:24:51.240 --> 00:24:53.340
Basic 6 and Delphi, and

00:24:53.340 --> 00:24:54.880
no two ways about it.

00:24:54.880 --> 00:24:56.180
Anvil owes a huge debt to

00:24:56.180 --> 00:24:57.120
those rapid application

00:24:57.120 --> 00:24:59.860
tools of the 1990s, because

00:24:59.860 --> 00:25:01.100
that was a really good way

00:25:01.100 --> 00:25:01.540
to work.

00:25:01.540 --> 00:25:03.380
They were hugely successful

00:25:03.380 --> 00:25:04.820
in building quick little

00:25:04.820 --> 00:25:06.100
applications rather than

00:25:06.100 --> 00:25:07.520
hiring like a big dev team,

00:25:07.520 --> 00:25:09.800
but they ran on Windows

00:25:09.800 --> 00:25:11.400
95, not on the internet.

00:25:11.400 --> 00:25:12.780
You'll spend most of your

00:25:12.780 --> 00:25:14.200
time, if you're editing an

00:25:14.200 --> 00:25:15.660
Anvil app, switching between

00:25:15.660 --> 00:25:18.120
the visual design to put

00:25:18.120 --> 00:25:20.540
some visual component on and

00:25:20.540 --> 00:25:23.080
the code that runs when you

00:25:23.080 --> 00:25:23.700
interact with these

00:25:23.700 --> 00:25:24.160
components.

00:25:24.960 --> 00:25:26.720
everything there will be

00:25:26.720 --> 00:25:28.420
compiled to JavaScript and

00:25:28.420 --> 00:25:29.280
will run in the user's

00:25:29.280 --> 00:25:29.520
browser.

00:25:29.520 --> 00:25:31.960
You'll then, of course, if

00:25:31.960 --> 00:25:33.740
you're writing most non-trivial

00:25:33.740 --> 00:25:34.440
web apps are going to

00:25:34.440 --> 00:25:36.060
require a server component, so

00:25:36.060 --> 00:25:37.620
you can add a server module to

00:25:37.620 --> 00:25:37.960
your app.

00:25:37.960 --> 00:25:40.460
And that's a Python module that

00:25:40.460 --> 00:25:42.100
runs on our servers, original

00:25:42.100 --> 00:25:42.580
naming, right?

00:25:42.580 --> 00:25:45.000
And you can put whatever you

00:25:45.000 --> 00:25:45.700
like into that module.

00:25:45.700 --> 00:25:46.640
It's just a Python module.

00:25:46.640 --> 00:25:48.300
But any functions that you

00:25:48.300 --> 00:25:49.400
annotate with at

00:25:49.400 --> 00:25:50.700
anvil.server.callable,

00:25:50.700 --> 00:25:52.860
just a decorator, those

00:25:52.860 --> 00:25:54.820
functions you can then call

00:25:54.820 --> 00:25:56.220
from your client code.

00:25:56.220 --> 00:25:56.460
Right.

00:25:56.460 --> 00:25:57.680
Much like writing like a

00:25:57.680 --> 00:26:00.460
Pyramid or Flask web method.

00:26:00.460 --> 00:26:01.800
You just put a decorator on it

00:26:01.800 --> 00:26:03.180
and then it's accessible.

00:26:03.180 --> 00:26:05.180
But somehow there's a kind of

00:26:05.180 --> 00:26:07.160
a really nice link both through

00:26:07.160 --> 00:26:08.460
the autocomplete

00:26:08.460 --> 00:26:10.380
IntelliSense side of things as

00:26:10.380 --> 00:26:12.280
well as the calling side with

00:26:12.280 --> 00:26:14.580
the Python that is the code

00:26:14.580 --> 00:26:15.720
behind for your page that

00:26:15.720 --> 00:26:16.660
actually runs in the browser

00:26:16.660 --> 00:26:17.940
and the Python that you write

00:26:17.940 --> 00:26:19.240
that actually lives in the

00:26:19.240 --> 00:26:19.820
server, right?

00:26:19.900 --> 00:26:21.200
Not knocking Flask because

00:26:21.200 --> 00:26:22.460
Flask is excellent for

00:26:22.460 --> 00:26:24.540
building REST APIs, but

00:26:24.540 --> 00:26:26.700
having to squeeze all of

00:26:26.700 --> 00:26:28.460
your app state through this

00:26:28.460 --> 00:26:30.140
choke point of it must be

00:26:30.140 --> 00:26:32.140
representable as a REST API

00:26:32.140 --> 00:26:34.460
and as JSON is one of those

00:26:34.460 --> 00:26:35.440
things that makes the web

00:26:35.440 --> 00:26:36.800
unnecessarily difficult and

00:26:36.800 --> 00:26:38.220
we explicitly avoid that.

00:26:38.220 --> 00:26:39.640
So when you mark a

00:26:39.640 --> 00:26:41.260
function as callable in a

00:26:41.260 --> 00:26:42.840
server module in Anvil and

00:26:42.840 --> 00:26:44.540
then you call it from your

00:26:44.540 --> 00:26:46.520
client code, as well as being

00:26:46.520 --> 00:26:47.780
autocompleted right through

00:26:47.780 --> 00:26:48.860
and, you know, if you get an

00:26:48.860 --> 00:26:49.880
exception, there'll be a

00:26:49.880 --> 00:26:51.360
stack trace that shows the

00:26:51.360 --> 00:26:52.680
call going from the service

00:26:52.680 --> 00:26:53.660
of the client exactly where

00:26:53.660 --> 00:26:55.300
it blew up, which is very

00:26:55.300 --> 00:26:56.120
hard to do over something

00:26:56.120 --> 00:26:56.540
like REST.

00:26:56.540 --> 00:26:59.160
You can also pass in or

00:26:59.160 --> 00:27:00.720
return much richer data

00:27:00.720 --> 00:27:01.200
structures.

00:27:01.200 --> 00:27:02.240
I mean, you can pass in or

00:27:02.240 --> 00:27:03.540
return anything that could be

00:27:03.540 --> 00:27:05.380
JSONs, so, you know, lists,

00:27:05.380 --> 00:27:07.240
dictionaries, strings, numbers,

00:27:07.240 --> 00:27:07.980
none, etc.

00:27:07.980 --> 00:27:10.380
But you can also do things like

00:27:10.380 --> 00:27:12.740
returning a row from a

00:27:12.740 --> 00:27:13.060
database.

00:27:13.060 --> 00:27:14.680
Actually, I'll just explain

00:27:14.680 --> 00:27:15.180
what that is.

00:27:15.540 --> 00:27:17.440
So a lot of apps will

00:27:17.440 --> 00:27:18.480
require some app-specific

00:27:18.480 --> 00:27:19.060
storage.

00:27:19.060 --> 00:27:21.040
And because it's just Python,

00:27:21.040 --> 00:27:22.160
if you already have a

00:27:22.160 --> 00:27:23.520
database, you can just, you

00:27:23.520 --> 00:27:25.880
know, import PyMySQL, import

00:27:25.880 --> 00:27:27.460
Psycopegee, connect to a

00:27:27.460 --> 00:27:28.320
database and go on.

00:27:28.320 --> 00:27:29.380
You know, many people do.

00:27:29.380 --> 00:27:31.240
But a lot of the time you'll

00:27:31.240 --> 00:27:32.700
require something apps, some

00:27:32.700 --> 00:27:33.680
app-specific storage.

00:27:33.680 --> 00:27:35.600
And Anvil has a built-in

00:27:35.600 --> 00:27:36.800
database we call the data

00:27:36.800 --> 00:27:37.680
tables for that.

00:27:37.680 --> 00:27:38.800
That's based on Postgres,

00:27:38.800 --> 00:27:39.040
right?

00:27:39.100 --> 00:27:39.320
Yes.

00:27:39.320 --> 00:27:40.420
So it's backed by Postgres

00:27:40.420 --> 00:27:42.340
and the tables themselves

00:27:42.340 --> 00:27:44.820
have a directly Pythonic API.

00:27:44.820 --> 00:27:46.460
So you don't actually write

00:27:46.460 --> 00:27:47.980
SQL to interact with them.

00:27:47.980 --> 00:27:48.980
You can if you've got a

00:27:48.980 --> 00:27:50.360
dedicated instance and you

00:27:50.360 --> 00:27:51.240
have your own database and

00:27:51.240 --> 00:27:52.380
we don't mind you writing

00:27:52.380 --> 00:27:54.340
Towers of Hanoi in SQL.

00:27:54.340 --> 00:27:57.880
But this means that the data

00:27:57.880 --> 00:27:59.860
table itself is a Python

00:27:59.860 --> 00:28:00.320
object.

00:28:00.320 --> 00:28:02.160
So if I create a data table

00:28:02.160 --> 00:28:03.180
to store all the visitors to

00:28:03.180 --> 00:28:04.640
my form, I entitle it

00:28:04.640 --> 00:28:04.940
visitors.

00:28:05.260 --> 00:28:06.500
I've then got app tables

00:28:06.500 --> 00:28:07.980
dot visitors accessible as

00:28:07.980 --> 00:28:09.220
an identifier in my code,

00:28:09.220 --> 00:28:10.380
just like those components

00:28:10.380 --> 00:28:11.440
are accessible as Python

00:28:11.440 --> 00:28:12.300
objects in my code.

00:28:12.300 --> 00:28:15.400
And I could return that.

00:28:15.400 --> 00:28:17.000
I could search for a set of

00:28:17.000 --> 00:28:18.460
rows and those rows will

00:28:18.460 --> 00:28:20.320
become live objects.

00:28:20.320 --> 00:28:21.240
You can access them like

00:28:21.240 --> 00:28:22.340
dictionaries to, you know,

00:28:22.340 --> 00:28:23.280
get the column values out

00:28:23.280 --> 00:28:24.360
or you can update them by

00:28:24.360 --> 00:28:25.580
going, you know, row,

00:28:25.580 --> 00:28:27.180
bracket quote, name,

00:28:27.180 --> 00:28:28.900
bracket is Meredith.

00:28:28.900 --> 00:28:29.300
Okay.

00:28:29.300 --> 00:28:30.200
So I think there's some

00:28:30.200 --> 00:28:31.060
really interesting stuff

00:28:31.060 --> 00:28:32.480
happening here in that you

00:28:32.480 --> 00:28:35.140
have Python that looks like

00:28:35.140 --> 00:28:35.960
it's just regular Python,

00:28:35.960 --> 00:28:36.900
but actually runs and

00:28:36.900 --> 00:28:37.740
sculpt in the browser and

00:28:37.740 --> 00:28:38.720
you've got Python that runs

00:28:38.720 --> 00:28:39.320
on the server.

00:28:39.320 --> 00:28:41.340
Where can I access this

00:28:41.340 --> 00:28:41.800
database?

00:28:41.800 --> 00:28:43.660
Because it could be like,

00:28:43.660 --> 00:28:44.920
do I have to do it only on

00:28:44.920 --> 00:28:46.660
the server or can I put it

00:28:46.660 --> 00:28:47.720
in my like button click?

00:28:47.720 --> 00:28:48.540
Not necessarily should,

00:28:48.540 --> 00:28:49.260
but that I could.

00:28:49.260 --> 00:28:49.920
Absolutely.

00:28:49.920 --> 00:28:52.340
So the thing I was leading

00:28:52.340 --> 00:28:53.120
up to, we were talking

00:28:53.120 --> 00:28:54.000
about the client server

00:28:54.000 --> 00:28:54.400
calls.

00:28:54.400 --> 00:28:56.440
The reason that we benefit

00:28:56.440 --> 00:28:57.320
from not squeezing

00:28:57.320 --> 00:28:58.020
everything through this

00:28:58.020 --> 00:28:59.720
choke point of a REST API

00:28:59.720 --> 00:29:03.060
is you can return a row

00:29:03.060 --> 00:29:03.980
from a database as a

00:29:03.980 --> 00:29:04.620
Python object.

00:29:05.020 --> 00:29:06.340
from this server code

00:29:06.340 --> 00:29:08.100
and it will pop out of

00:29:08.100 --> 00:29:09.840
your, the call as a

00:29:09.840 --> 00:29:10.700
return value in the

00:29:10.700 --> 00:29:11.220
client code.

00:29:11.220 --> 00:29:13.260
And this means you can

00:29:13.260 --> 00:29:14.940
absolutely just directly

00:29:14.940 --> 00:29:17.060
access this in client

00:29:17.060 --> 00:29:17.320
code.

00:29:17.320 --> 00:29:18.900
I mean, in fact, for any

00:29:18.900 --> 00:29:19.840
data table, you can set

00:29:19.840 --> 00:29:20.320
its permissions.

00:29:20.320 --> 00:29:21.660
You can say, actually,

00:29:21.660 --> 00:29:22.480
this table should be

00:29:22.480 --> 00:29:23.400
completely readable from

00:29:23.400 --> 00:29:23.980
client code.

00:29:23.980 --> 00:29:25.440
And then in your form

00:29:25.440 --> 00:29:26.340
code, in the stuff that

00:29:26.340 --> 00:29:27.220
gets compiled to JavaScript,

00:29:27.220 --> 00:29:29.080
you can go iterate through

00:29:29.080 --> 00:29:29.920
all the rows of the table

00:29:29.920 --> 00:29:30.820
if it's readable from the

00:29:30.820 --> 00:29:31.120
client.

00:29:31.120 --> 00:29:32.100
Why shouldn't you be able

00:29:32.100 --> 00:29:32.300
to?

00:29:32.300 --> 00:29:32.840
Yeah, that's cool.

00:29:32.840 --> 00:29:33.820
And you also get like a

00:29:33.820 --> 00:29:35.040
visual designer type thing

00:29:35.040 --> 00:29:36.740
for the databases and the

00:29:36.740 --> 00:29:37.660
relationships and stuff.

00:29:37.660 --> 00:29:37.840
Yeah.

00:29:37.840 --> 00:29:39.040
So yeah, if you're, you can

00:29:39.040 --> 00:29:40.400
say, oh, there's, here's a

00:29:40.400 --> 00:29:41.040
bunch of components.

00:29:41.040 --> 00:29:43.320
I'm repeating it for every

00:29:43.320 --> 00:29:44.340
element of list.

00:29:45.040 --> 00:29:46.800
And again, like this is

00:29:46.800 --> 00:29:47.620
something we gain from

00:29:47.620 --> 00:29:48.620
everything being Python

00:29:48.620 --> 00:29:51.440
because that list is just a

00:29:51.440 --> 00:29:53.240
list of Python objects and

00:29:53.240 --> 00:29:54.560
you can give it a hint or the

00:29:54.560 --> 00:29:56.000
autocompleter can work out

00:29:56.000 --> 00:29:57.660
what type the Python objects

00:29:57.660 --> 00:29:58.300
were.

00:29:58.300 --> 00:30:00.220
And if, for example, it

00:30:00.220 --> 00:30:01.920
knows that you've given it a

00:30:01.920 --> 00:30:03.360
list of rows from such and

00:30:03.360 --> 00:30:05.380
such a database, then when

00:30:05.380 --> 00:30:06.280
you, when you were in the

00:30:06.280 --> 00:30:07.380
visual designer and you pull

00:30:07.380 --> 00:30:08.480
up the data bindings and you

00:30:08.480 --> 00:30:10.300
say, I want the text on this

00:30:10.300 --> 00:30:13.660
label to be the name column

00:30:13.660 --> 00:30:14.480
from this row in the

00:30:14.480 --> 00:30:15.380
database, it could

00:30:15.380 --> 00:30:16.440
autocomplete that for you

00:30:16.440 --> 00:30:18.440
because it's all using the

00:30:18.440 --> 00:30:19.020
same object model.

00:30:19.020 --> 00:30:19.880
It's all using the same

00:30:19.880 --> 00:30:21.960
language and it knows, for

00:30:21.960 --> 00:30:23.760
example, what options are

00:30:23.760 --> 00:30:25.360
available for column lookup

00:30:25.360 --> 00:30:25.920
on that row.

00:30:25.920 --> 00:30:27.260
And that I think is a really

00:30:27.260 --> 00:30:28.800
powerful thing for making

00:30:28.800 --> 00:30:29.820
this stuff a lot faster.

00:30:29.820 --> 00:30:31.740
I think also that that's a

00:30:31.740 --> 00:30:33.520
super important component for

00:30:33.520 --> 00:30:34.240
people who are getting

00:30:34.240 --> 00:30:34.620
started.

00:30:34.620 --> 00:30:36.300
They, they look at code and

00:30:36.300 --> 00:30:36.900
they're like, I don't know

00:30:36.900 --> 00:30:37.360
what to type.

00:30:37.360 --> 00:30:38.160
Right.

00:30:38.160 --> 00:30:39.100
But if you type dot and

00:30:39.100 --> 00:30:39.880
like, here's a list, like,

00:30:39.880 --> 00:30:40.600
oh, it says text.

00:30:40.600 --> 00:30:41.100
Okay, cool.

00:30:41.100 --> 00:30:42.380
That must mean like that's the

00:30:42.380 --> 00:30:43.280
value that's in the input

00:30:43.280 --> 00:30:46.420
box or I type dot customer

00:30:46.420 --> 00:30:46.940
dot name.

00:30:46.940 --> 00:30:47.820
Oh, that's the name of the

00:30:47.820 --> 00:30:48.440
customer, right?

00:30:48.440 --> 00:30:49.140
That's super helpful.

00:30:49.140 --> 00:30:51.220
So there's a talk that I, a

00:30:51.220 --> 00:30:52.480
lightning talk I just gave at

00:30:52.480 --> 00:30:53.140
Python UK.

00:30:53.140 --> 00:30:55.500
So last Sunday, that will be

00:30:55.500 --> 00:30:56.720
going up on our website soon,

00:30:56.720 --> 00:30:57.900
possibly by the time this

00:30:57.900 --> 00:30:59.100
podcast gets published,

00:30:59.100 --> 00:31:01.400
where I talk about the

00:31:01.400 --> 00:31:02.280
autocompleter and how we

00:31:02.280 --> 00:31:02.760
built it.

00:31:02.760 --> 00:31:03.680
But actually I spent about

00:31:03.680 --> 00:31:04.800
half the talk talking about

00:31:04.800 --> 00:31:06.660
how no really autocomplete is

00:31:06.660 --> 00:31:08.120
just terribly important.

00:31:08.120 --> 00:31:10.680
And seriously, listeners out

00:31:10.680 --> 00:31:11.960
there, if you spend all your

00:31:11.960 --> 00:31:14.700
days in Vim or Emacs and you

00:31:14.700 --> 00:31:16.660
don't use an autocompleter, I

00:31:16.660 --> 00:31:18.580
would just recommend just try

00:31:18.580 --> 00:31:20.360
for a week, install the Jedi

00:31:20.360 --> 00:31:22.860
plugin for Vim or Emacs and

00:31:22.860 --> 00:31:25.080
experience what using autocomplete

00:31:25.080 --> 00:31:26.860
is like for your code creation

00:31:26.860 --> 00:31:29.460
because you're faster, you know

00:31:29.460 --> 00:31:30.340
what you're doing, you can

00:31:30.340 --> 00:31:31.860
eliminate whole classes of bugs

00:31:31.860 --> 00:31:33.040
without ever even hitting the

00:31:33.040 --> 00:31:33.580
run button.

00:31:33.580 --> 00:31:36.520
And you get this, you know, you

00:31:36.520 --> 00:31:37.960
get to stay in flow rather than

00:31:37.960 --> 00:31:38.940
going out to check the document,

00:31:38.940 --> 00:31:40.720
documentation every five

00:31:40.720 --> 00:31:41.040
seconds.

00:31:41.040 --> 00:31:42.720
Yeah, I use PyCharm a lot and

00:31:42.720 --> 00:31:44.300
that's one of the main things

00:31:44.300 --> 00:31:45.340
that I find it super helpful

00:31:45.340 --> 00:31:45.600
for.

00:31:45.600 --> 00:31:46.780
You do the editor question at

00:31:46.780 --> 00:31:48.040
the end, but yes, absolutely.

00:31:48.040 --> 00:31:49.740
And I have to say we spent a

00:31:49.740 --> 00:31:51.240
while thinking that we could do

00:31:51.240 --> 00:31:53.640
without autocompletion and

00:31:53.640 --> 00:31:55.100
create a application development

00:31:55.100 --> 00:31:56.340
environment that was fun to use

00:31:56.340 --> 00:31:57.340
and we were just wrong.

00:31:57.340 --> 00:31:58.140
You need it.

00:31:58.140 --> 00:32:00.020
You need that reassurance.

00:32:00.020 --> 00:32:01.300
Yeah, what I think is really

00:32:01.300 --> 00:32:02.820
interesting is you actually span

00:32:02.820 --> 00:32:03.980
like client server with

00:32:03.980 --> 00:32:05.500
autocomplete and stuff as well.

00:32:05.500 --> 00:32:06.720
Yeah, well, no, this is

00:32:06.720 --> 00:32:07.500
honestly the biggest thing.

00:32:07.620 --> 00:32:09.380
It's when one of the reasons

00:32:09.380 --> 00:32:11.420
that a lot of people, again,

00:32:11.420 --> 00:32:13.380
when back in the 1990s, your

00:32:13.380 --> 00:32:14.600
standard tools all had

00:32:14.600 --> 00:32:16.740
autocomplete, why people have

00:32:16.740 --> 00:32:18.900
kind of lost it now is because

00:32:18.900 --> 00:32:20.960
the tools don't know about, oh,

00:32:20.960 --> 00:32:22.080
well, what's on the other end of

00:32:22.080 --> 00:32:24.020
this rest call I'm making?

00:32:24.020 --> 00:32:25.860
What options will be available on

00:32:25.860 --> 00:32:26.820
the thing that comes back?

00:32:26.820 --> 00:32:28.360
And actually, because it's all in

00:32:28.360 --> 00:32:29.400
the same system, it's all in the

00:32:29.400 --> 00:32:31.000
same language, the autocomplete

00:32:31.000 --> 00:32:32.560
goes, well, you know, I passed the

00:32:32.560 --> 00:32:34.120
return statement that will give me

00:32:34.120 --> 00:32:35.740
this value five seconds ago.

00:32:35.740 --> 00:32:36.760
I know exactly what it's

00:32:36.760 --> 00:32:37.560
returning and I'm going to

00:32:37.560 --> 00:32:39.080
autocomplete the columns available

00:32:39.080 --> 00:32:39.880
on this database, right?

00:32:39.880 --> 00:32:41.220
That's actually really, really

00:32:41.220 --> 00:32:41.540
nice.

00:32:41.540 --> 00:32:43.940
And we preserve that.

00:32:43.940 --> 00:32:45.600
And again, because we have this

00:32:45.600 --> 00:32:47.280
rich interface that's not

00:32:47.280 --> 00:32:48.740
squeezed over a rest connection,

00:32:48.740 --> 00:32:51.320
we can do things like we have a

00:32:51.320 --> 00:32:53.120
built-in capability security

00:32:53.120 --> 00:32:55.300
model, which is a fancy word for

00:32:55.300 --> 00:32:56.380
a thing that you most of the

00:32:56.380 --> 00:32:57.340
time just don't need to think

00:32:57.340 --> 00:32:58.660
about, which is if you've got

00:32:58.660 --> 00:33:00.480
one of these rich objects and you

00:33:00.480 --> 00:33:01.800
return it from a server function,

00:33:01.800 --> 00:33:03.520
that was you giving the client

00:33:03.520 --> 00:33:04.420
access to that object.

00:33:05.080 --> 00:33:07.040
So if there's a data table that

00:33:07.040 --> 00:33:08.120
the server can access and the

00:33:08.120 --> 00:33:09.960
client can't, but there's some

00:33:09.960 --> 00:33:11.160
server function that says, well,

00:33:11.160 --> 00:33:12.440
okay, I will give you the rows

00:33:12.440 --> 00:33:13.460
that belong to your user.

00:33:13.460 --> 00:33:15.580
As it's returned to those, you've

00:33:15.580 --> 00:33:17.620
now got read access to those rows

00:33:17.620 --> 00:33:18.480
that belong to your user.

00:33:18.480 --> 00:33:20.080
And so you can use them directly

00:33:20.080 --> 00:33:20.820
in client code.

00:33:20.820 --> 00:33:21.320
That's cool.

00:33:21.320 --> 00:33:23.920
How much ability do you have to

00:33:23.920 --> 00:33:25.900
structure things other than this

00:33:25.900 --> 00:33:28.840
like page code behind thing in

00:33:28.840 --> 00:33:29.140
Python?

00:33:29.140 --> 00:33:31.220
Like, can I create like classes and

00:33:31.220 --> 00:33:32.940
helper modules and stuff in Python

00:33:32.940 --> 00:33:34.280
that actually run and sculpt?

00:33:34.420 --> 00:33:36.420
So we've got server side modules

00:33:36.420 --> 00:33:37.620
that run purely on the server and

00:33:37.620 --> 00:33:39.340
that's code that the client never

00:33:39.340 --> 00:33:40.400
sees and is trustworthy.

00:33:40.400 --> 00:33:41.960
And then we've also got like

00:33:41.960 --> 00:33:43.240
utility modules, which can be

00:33:43.240 --> 00:33:44.880
imported from client and server.

00:33:44.880 --> 00:33:46.180
And again, they're just Python

00:33:46.180 --> 00:33:47.260
modules you can import.

00:33:47.260 --> 00:33:49.660
So, you know, common code that'll

00:33:49.660 --> 00:33:51.100
be between lots of your pages.

00:33:51.100 --> 00:33:53.540
We've also got a system where you

00:33:53.540 --> 00:33:56.180
can take your whole app and kind of

00:33:56.180 --> 00:33:58.320
package that up as well as a Python

00:33:58.320 --> 00:33:59.880
package that other apps can depend

00:33:59.880 --> 00:34:00.100
on.

00:34:00.540 --> 00:34:02.760
So you could say, you know, oh, I've

00:34:02.760 --> 00:34:05.080
built a form for, I don't know, for

00:34:05.080 --> 00:34:06.040
displaying a progress bar.

00:34:06.040 --> 00:34:08.020
This is something that actually one of

00:34:08.020 --> 00:34:09.220
our users did in the forum recently.

00:34:09.220 --> 00:34:12.280
I built a progress bar form and I'm

00:34:12.280 --> 00:34:15.760
going to export this as a package that

00:34:15.760 --> 00:34:17.020
somebody else can import.

00:34:17.020 --> 00:34:18.880
So you can also structure your code in

00:34:18.880 --> 00:34:20.460
that kind of reusable libraries way.

00:34:20.460 --> 00:34:20.800
Right.

00:34:20.880 --> 00:34:21.760
That's a really cool bit.

00:34:21.760 --> 00:34:24.020
Like, I can't remember the last time

00:34:24.020 --> 00:34:26.920
in the web that I had like a sort of a

00:34:26.920 --> 00:34:29.600
drag and drop reusable visual component

00:34:29.600 --> 00:34:32.140
that had both a visual aspect and a

00:34:32.140 --> 00:34:32.920
functional aspect.

00:34:32.920 --> 00:34:34.000
But you guys have that, right?

00:34:34.000 --> 00:34:36.060
You can create these like sub element

00:34:36.060 --> 00:34:37.820
controls and like drop them.

00:34:37.820 --> 00:34:40.040
I mean, it's been probably 10 years

00:34:40.040 --> 00:34:41.340
since I've worked in a web framework

00:34:41.340 --> 00:34:41.840
that had that.

00:34:41.840 --> 00:34:42.160
Yes.

00:34:42.160 --> 00:34:43.000
This is the thing, right?

00:34:43.000 --> 00:34:44.360
People say, oh, it's been 10 years.

00:34:44.360 --> 00:34:45.540
What happened to progress?

00:34:45.540 --> 00:34:47.360
Why did we go backwards in those 10

00:34:47.360 --> 00:34:47.600
years?

00:34:47.600 --> 00:34:48.660
Yes, absolutely.

00:34:49.160 --> 00:34:50.600
So when you import one of these, if

00:34:50.600 --> 00:34:52.420
you, when you import a dependency

00:34:52.420 --> 00:34:55.380
that's got some of this stuff in, as

00:34:55.380 --> 00:34:56.840
well as being able to like import the

00:34:56.840 --> 00:34:58.340
utility modules, you know, just like

00:34:58.340 --> 00:34:59.400
you'd import Python modules.

00:34:59.400 --> 00:35:00.440
And of course they ought to complete

00:35:00.440 --> 00:35:01.000
and blah, blah, blah.

00:35:01.000 --> 00:35:03.040
You've also got this server side code

00:35:03.040 --> 00:35:04.500
you can bring in.

00:35:04.500 --> 00:35:06.400
So you can make, you've brought in the

00:35:06.400 --> 00:35:07.820
client side code, you've brought in the

00:35:07.820 --> 00:35:10.120
server side behavior and you've brought

00:35:10.120 --> 00:35:12.000
in the visual design all at once.

00:35:12.000 --> 00:35:14.620
So you can create these reusable

00:35:14.620 --> 00:35:17.520
components that will abstract away a

00:35:17.520 --> 00:35:18.780
lot of the fuss people.

00:35:19.140 --> 00:35:21.300
people currently have to re-implement

00:35:21.300 --> 00:35:21.920
10 times.

00:35:21.920 --> 00:35:24.520
There could be actually almost a

00:35:24.520 --> 00:35:26.080
marketplace for people to create

00:35:26.080 --> 00:35:28.420
really powerful little controls.

00:35:28.420 --> 00:35:29.400
Tell me about it.

00:35:29.400 --> 00:35:31.020
That's definitely on our radar.

00:35:31.020 --> 00:35:32.520
I don't have anything to talk about

00:35:32.520 --> 00:35:34.660
yet, but yes, you would not be the

00:35:34.660 --> 00:35:35.860
first person to ask for that.

00:35:35.860 --> 00:35:36.220
Yeah.

00:35:36.220 --> 00:35:38.860
I mean, definitely in like the Windows

00:35:38.860 --> 00:35:40.700
forums, VB space, there were companies

00:35:40.700 --> 00:35:42.800
that like just, they built these

00:35:42.800 --> 00:35:43.940
components that you could buy.

00:35:43.940 --> 00:35:45.120
Like I need a really cool graphing

00:35:45.120 --> 00:35:47.400
component or I need like a, I don't

00:35:47.400 --> 00:35:48.820
know, like a login component or

00:35:48.820 --> 00:35:49.840
something and you just drop them in

00:35:49.840 --> 00:35:50.040
there.

00:35:50.040 --> 00:35:50.360
Yeah.

00:35:50.360 --> 00:35:51.920
And I feel like we've already kind of

00:35:51.920 --> 00:35:54.260
proved out that model with the

00:35:54.260 --> 00:35:56.760
components and services we already

00:35:56.760 --> 00:35:57.780
provide within Anvil.

00:35:57.780 --> 00:36:00.620
So as well as like forms and modules

00:36:00.620 --> 00:36:02.880
and server modules, in an Anvil app, you

00:36:02.880 --> 00:36:04.240
just hit a plus button next to the word

00:36:04.240 --> 00:36:06.820
services and you get the option of

00:36:06.820 --> 00:36:09.140
adding a bunch of pre-built

00:36:09.140 --> 00:36:12.920
interfaces to various external services.

00:36:13.040 --> 00:36:14.760
So, I mean, the data tables is one I've

00:36:14.760 --> 00:36:16.460
already talked about, but you could, for

00:36:16.460 --> 00:36:17.860
example, you know, add the Google API

00:36:17.860 --> 00:36:19.920
service and that's just a bunch of

00:36:19.920 --> 00:36:22.580
packaged up functions for dealing with

00:36:22.580 --> 00:36:26.000
files in Google Drive, accessing Google

00:36:26.000 --> 00:36:29.000
Sheets documents, authenticating people

00:36:29.000 --> 00:36:30.780
with their Google accounts.

00:36:30.780 --> 00:36:33.200
So maybe some company that runs on Excel

00:36:33.200 --> 00:36:35.820
could take all of their Excel documents,

00:36:35.820 --> 00:36:38.160
drop them into Google Docs, and then you

00:36:38.160 --> 00:36:40.180
could access them and convert them, access

00:36:40.180 --> 00:36:42.180
them as Google Sheets and use them as

00:36:42.180 --> 00:36:45.000
companies that do that have done that

00:36:45.000 --> 00:36:45.360
with Anvil.

00:36:45.360 --> 00:36:45.740
Okay.

00:36:45.740 --> 00:36:47.040
Yeah, for exactly that reason.

00:36:47.040 --> 00:36:49.960
And that's enabled by the fact that there

00:36:49.960 --> 00:36:51.880
is this drop-in, you know, client and

00:36:51.880 --> 00:36:56.820
server and UI service that provides the

00:36:56.820 --> 00:36:58.860
things you will need if you want to

00:36:58.860 --> 00:37:00.640
interact with the Google API.

00:37:00.640 --> 00:37:02.380
And similarly, you know, we have something

00:37:02.380 --> 00:37:04.980
equivalent for Facebook and a couple of

00:37:04.980 --> 00:37:05.660
other things.

00:37:05.660 --> 00:37:07.440
Yeah, you guys have Stripe, like a super

00:37:07.440 --> 00:37:08.900
simple integration with Stripe.

00:37:08.900 --> 00:37:09.680
Oh, yes, absolutely.

00:37:09.780 --> 00:37:12.260
So if you want to get money, again, just a

00:37:12.260 --> 00:37:14.100
Stripe integration just off the shelf.

00:37:14.100 --> 00:37:15.000
Yeah, that's awesome.

00:37:15.000 --> 00:37:17.080
You have email, you have user management.

00:37:17.080 --> 00:37:18.900
Those are both pretty impressive.

00:37:18.900 --> 00:37:19.460
Yes.

00:37:19.460 --> 00:37:20.760
Well, user management was what I really

00:37:20.760 --> 00:37:21.720
wanted to talk about.

00:37:21.720 --> 00:37:22.560
It's the perfect example.

00:37:22.560 --> 00:37:24.880
The user management service is implemented.

00:37:24.880 --> 00:37:27.760
I don't think there's any, no, there is no

00:37:27.760 --> 00:37:29.080
JavaScript in the entire thing.

00:37:29.080 --> 00:37:31.640
It's all implemented using the standard

00:37:31.640 --> 00:37:32.000
API.

00:37:32.000 --> 00:37:34.100
So user service is a perfect example of

00:37:34.100 --> 00:37:35.920
something that you could have written

00:37:35.920 --> 00:37:36.360
yourself.

00:37:36.360 --> 00:37:37.920
In fact, people, of course, people did.

00:37:37.980 --> 00:37:39.760
People did before we had it implemented.

00:37:39.760 --> 00:37:43.140
But it's just a data table with, you know,

00:37:43.140 --> 00:37:44.640
a column for email, a column for your

00:37:44.640 --> 00:37:45.860
bcrypt hash password.

00:37:45.860 --> 00:37:47.200
Oh, you guys are using bcrypt?

00:37:47.200 --> 00:37:47.660
That's awesome.

00:37:47.660 --> 00:37:50.400
You know, a server function that you pass

00:37:50.400 --> 00:37:52.720
in a username and password and it looks up

00:37:52.720 --> 00:37:53.980
the user and says, does it match?

00:37:53.980 --> 00:37:55.320
And if so, it stores something into the

00:37:55.320 --> 00:37:55.680
session.

00:37:56.620 --> 00:37:58.340
And, you know, you can use the Google API

00:37:58.340 --> 00:38:00.640
service to say, oh, who's, you know, log this

00:38:00.640 --> 00:38:02.000
user in with Google, who's logged in.

00:38:02.000 --> 00:38:02.200
Right.

00:38:02.200 --> 00:38:03.520
You got the OAuth 2 stuff.

00:38:03.520 --> 00:38:04.820
It's all something you could build, but you

00:38:04.820 --> 00:38:07.280
don't want to have to every time you want to

00:38:07.280 --> 00:38:08.680
build a web application.

00:38:08.680 --> 00:38:10.400
I'm working on a project right now and I spent

00:38:10.400 --> 00:38:13.060
like literally a full day just working on

00:38:13.060 --> 00:38:13.660
user management.

00:38:13.660 --> 00:38:15.380
And I'm like, yep, this is just like the

00:38:15.380 --> 00:38:16.780
stuff I wrote six months ago.

00:38:16.780 --> 00:38:18.920
And it's also going to be probably what I

00:38:18.920 --> 00:38:19.780
write six months from now.

00:38:19.880 --> 00:38:22.720
So I feel like I'm always reinventing user

00:38:22.720 --> 00:38:23.060
management.

00:38:23.060 --> 00:38:25.060
So that's cool that that's kind of a plug

00:38:25.060 --> 00:38:25.580
and play thing.

00:38:25.580 --> 00:38:27.360
We've tried to pick off some like low hanging

00:38:27.360 --> 00:38:29.580
fruit, the things that people reinvent a lot.

00:38:29.580 --> 00:38:31.500
And user management was, I mean, pretty much

00:38:31.500 --> 00:38:32.280
top of that list.

00:38:32.280 --> 00:38:32.500
Yeah.

00:38:32.500 --> 00:38:35.340
How many times have you written an email

00:38:35.340 --> 00:38:38.580
validation link processor thing?

00:38:38.580 --> 00:38:39.460
Too many.

00:38:39.460 --> 00:38:40.380
I want my life back.

00:38:40.380 --> 00:38:40.800
Exactly.

00:38:40.800 --> 00:38:45.280
But really, that's just the low hanging fruit

00:38:45.280 --> 00:38:47.080
because there's tons of stuff out there that

00:38:47.080 --> 00:38:51.040
people implement every day and shouldn't have

00:38:51.040 --> 00:38:52.640
to, they should, they should be able to

00:38:52.640 --> 00:38:53.800
create reusable libraries.

00:38:53.800 --> 00:38:57.320
And we're really excited to have that kind

00:38:57.320 --> 00:39:00.040
of ease of use come to other domains in

00:39:00.040 --> 00:39:00.180
that.

00:39:00.180 --> 00:39:02.680
So if you're Esri and you're like a company

00:39:02.680 --> 00:39:05.360
that creates the company that creates ArcGIS,

00:39:05.360 --> 00:39:07.360
you wanted people to access your stuff.

00:39:07.360 --> 00:39:09.100
Maybe you could just drop in like, here's

00:39:09.100 --> 00:39:11.040
how you just plug into our web service and

00:39:11.040 --> 00:39:13.700
just get to your like cloud GIS stuff.

00:39:13.700 --> 00:39:13.960
Right.

00:39:13.960 --> 00:39:14.980
Or things like this.

00:39:14.980 --> 00:39:15.260
Yeah.

00:39:15.260 --> 00:39:15.820
That's beautiful.

00:39:15.820 --> 00:39:19.140
This portion of Talk Python To Me was brought

00:39:19.140 --> 00:39:20.400
to you by GoCD.

00:39:20.400 --> 00:39:24.020
GoCD is an on-premise, open source, continuous

00:39:24.020 --> 00:39:26.460
delivery tool to help you get better visibility

00:39:26.460 --> 00:39:29.140
into and control of your team's deployments.

00:39:29.140 --> 00:39:31.640
With GoCD's comprehensive pipeline modeling,

00:39:31.640 --> 00:39:34.800
you can model complex workflows for multiple teams

00:39:34.800 --> 00:39:35.700
with ease.

00:39:35.700 --> 00:39:39.140
And GoCD's value stream map lets you track changes

00:39:39.140 --> 00:39:41.320
from commit to deploy at a glance.

00:39:41.320 --> 00:39:43.700
Say goodbye to deployment panic and hello to

00:39:43.700 --> 00:39:45.560
consistent, predictable deliveries.

00:39:45.560 --> 00:39:47.880
We all know that continuous integration is super

00:39:47.880 --> 00:39:49.840
important to the code quality of your applications.

00:39:49.840 --> 00:39:53.460
Choose the open source local CI server, GoCD.

00:39:53.460 --> 00:39:57.380
Learn more at talkpython.fm/gocd.

00:39:57.380 --> 00:40:00.180
That's talkpython.fm/gocd.

00:40:00.880 --> 00:40:04.400
And I mean, Anvil already, again, all of this stuff is stuff you could do yourself.

00:40:04.400 --> 00:40:07.800
We have a bunch of really cool stuff for interacting with web services.

00:40:07.800 --> 00:40:11.640
I mean, if you're a client of a web service, you probably just want the requests library

00:40:11.640 --> 00:40:12.620
and then you're off.

00:40:12.980 --> 00:40:22.140
But making that easy and simple and tab completing their whole API is a kind of thing that companies will want.

00:40:22.140 --> 00:40:25.320
And it's something we've talked to with companies before.

00:40:25.320 --> 00:40:27.360
And we're really excited about bringing that kind of,

00:40:27.360 --> 00:40:29.400
oh, OK, I want to do telephony.

00:40:29.400 --> 00:40:30.100
Fine.

00:40:30.200 --> 00:40:32.140
Yeah, that's one import and autocomplete.

00:40:32.140 --> 00:40:32.520
Exactly.

00:40:32.520 --> 00:40:33.220
Exactly.

00:40:33.220 --> 00:40:35.600
Drop in the Twilio module or whatever, whoever it is, right?

00:40:35.600 --> 00:40:38.060
So this is all super interesting.

00:40:38.060 --> 00:40:40.520
And these component type things are super cool.

00:40:40.520 --> 00:40:45.520
But one, I guess the thing that probably was most impressive to me that showed like,

00:40:45.520 --> 00:40:49.580
OK, you have this thing that runs in your environment and is hosted.

00:40:49.580 --> 00:40:51.480
And I want to talk about like what that means.

00:40:51.480 --> 00:40:55.280
Before we talk about that, though, let's talk about Uplink, your final service.

00:40:55.480 --> 00:40:55.880
Oh, yeah.

00:40:55.880 --> 00:40:57.720
Well, so Uplink isn't really service.

00:40:57.720 --> 00:41:04.600
The Uplink is yet another example of a pattern that we do right the way throughout Ambil.

00:41:04.600 --> 00:41:06.980
Everything's built in abstractions, right?

00:41:06.980 --> 00:41:10.080
You know, you can solve every problem in computer science with another layer of abstraction,

00:41:10.080 --> 00:41:11.920
except the problem with too many layers.

00:41:11.920 --> 00:41:12.140
Right.

00:41:12.140 --> 00:41:13.840
If it doesn't work, you add one more, yeah.

00:41:13.840 --> 00:41:14.080
Yeah.

00:41:14.080 --> 00:41:15.600
And Ambil is an abstraction over the web.

00:41:15.600 --> 00:41:18.860
And of course, every abstraction has its limits.

00:41:18.860 --> 00:41:21.860
Every abstraction leaks, to quote that famous essay.

00:41:22.540 --> 00:41:26.300
And the question is, how does your abstraction handle it when you hit the edge?

00:41:26.300 --> 00:41:30.040
And I mean, JavaScript frameworks basically handle it by letting it all hang out.

00:41:30.040 --> 00:41:34.100
But, you know, you can't use these JavaScript frameworks without understanding quite a lot

00:41:34.100 --> 00:41:35.520
about how they work underneath anyway.

00:41:35.520 --> 00:41:39.980
So you can just, you know, pull away bits of the foundation and edit it yourself if you need to.

00:41:39.980 --> 00:41:45.640
Some abstractions, like if you're writing a Windows desktop application and you need it to run on the web,

00:41:45.640 --> 00:41:47.720
you're kind of stuck.

00:41:47.720 --> 00:41:50.280
You know, you're going to have to do some serious rewriting or interfacing.

00:41:50.920 --> 00:41:57.940
But the pattern I most like is kind of, I should say, there's also this kind of ejection pattern.

00:41:57.940 --> 00:42:01.520
There's a tool called Create React App, if you're familiar with it.

00:42:01.520 --> 00:42:02.560
I forgive you if you're not.

00:42:02.560 --> 00:42:09.080
But the idea is it simplifies a bunch of the creation of, you know, the front-end build process.

00:42:09.080 --> 00:42:12.180
So I want to take my source code and compile it to another form of JavaScript,

00:42:12.180 --> 00:42:15.200
compile it to another form of JavaScript, minify it and deliver it as one asset.

00:42:15.660 --> 00:42:17.960
And it takes a lot of that kind of pain away from you.

00:42:17.960 --> 00:42:24.620
But of course, it's going to be limited and it's going to be an abstraction that won't let you do absolutely everything your platform requires.

00:42:24.620 --> 00:42:27.800
And if you hit this limit, there's a handle you can pull like eject.

00:42:28.360 --> 00:42:30.740
And then it will say, well, you're done here.

00:42:30.740 --> 00:42:37.640
I will dump out all like the high complexity stuff for you and say, well, right, you can edit it.

00:42:37.640 --> 00:42:39.540
You know, you can edit a webpack configuration now.

00:42:39.540 --> 00:42:40.080
Oh, goody.

00:42:40.640 --> 00:42:49.900
And like if Anvil had something similar, it would be like, oh, this thing is now a horrendously complicated JavaScript app using this Python JavaScript compiler you have no familiarity with.

00:42:49.900 --> 00:42:50.400
Have fun.

00:42:50.400 --> 00:42:55.600
And that's actually slightly, I mean, it's more user-friendly than like making the user go down with a ship.

00:42:55.600 --> 00:42:59.240
But it's still quite high complexity.

00:42:59.240 --> 00:43:02.760
And what we try to do is instead of an ejector seat, we've got escape hatches.

00:43:03.820 --> 00:43:08.740
So you want to do some specific visual design on your web page.

00:43:08.740 --> 00:43:09.360
Well, that's fine.

00:43:09.360 --> 00:43:16.200
If you want to, you can drop down and edit the HTML and CSS that makes up the template into which these Anvil components are dropped.

00:43:16.200 --> 00:43:22.300
And you can create your own house style and, you know, bring in assets from a professional designer and use that.

00:43:22.300 --> 00:43:27.980
If you have some, you know, you want to build something like WebRTC was a request I got recently.

00:43:27.980 --> 00:43:29.020
You know, we don't support that yet.

00:43:29.020 --> 00:43:29.740
We will one day.

00:43:29.740 --> 00:43:30.240
We don't yet.

00:43:30.240 --> 00:43:33.380
I want to use this advanced feature of the browser platform.

00:43:33.900 --> 00:43:34.520
Well, that's okay.

00:43:34.520 --> 00:43:36.240
I can write some JavaScript.

00:43:36.240 --> 00:43:37.420
Some JavaScript.

00:43:37.420 --> 00:43:39.140
And then I can call it from Python.

00:43:39.140 --> 00:43:40.640
It can call into my Python.

00:43:40.640 --> 00:43:43.400
And then I can package all of that up as one of these custom components.

00:43:43.400 --> 00:43:46.400
Make a library so other people can just say import my code.

00:43:46.400 --> 00:43:47.980
And now you have WebRTC support.

00:43:47.980 --> 00:43:49.100
It's all auto-completed.

00:43:49.100 --> 00:43:49.740
It's all nice.

00:43:49.740 --> 00:43:50.520
It's all in Python.

00:43:50.520 --> 00:43:52.000
You don't have to worry about it.

00:43:52.000 --> 00:43:54.900
And the server-side version of this is the uplink.

00:43:54.900 --> 00:43:59.200
So the uplink, it's a library you can pip install from anywhere in the world.

00:44:00.440 --> 00:44:03.720
And when you enable it for your app, you get an authentication key.

00:44:03.720 --> 00:44:08.180
And you do anvil.server.connect and you give it this authentication key.

00:44:08.180 --> 00:44:12.760
And now your Python code, wherever it's running in the world, is connected to your Anvil app.

00:44:12.760 --> 00:44:14.800
It makes a secure WebSocket connection in.

00:44:14.800 --> 00:44:16.160
It's really quite impressive.

00:44:16.160 --> 00:44:20.200
I think maybe give us the example that you have on your website with the Raspberry Pi.

00:44:20.200 --> 00:44:22.880
Because I think that really highlights how flexible this is.

00:44:22.880 --> 00:44:26.560
So if you've got a Python code, if you've got Python code running somewhere in the world,

00:44:26.560 --> 00:44:29.880
and you Anvil server-connect in, all those things you can do on the server module,

00:44:29.880 --> 00:44:32.600
you can do from your Python code, wherever it is.

00:44:32.600 --> 00:44:38.080
And there's an example tutorial video on our site of me doing this with a Raspberry Pi.

00:44:38.080 --> 00:44:39.120
So I take a Raspberry Pi.

00:44:39.120 --> 00:44:42.100
I write, like, with two lines of code.

00:44:42.100 --> 00:44:45.280
If you've ever used a Raspberry Pi, you can get something called a SenseHat for it,

00:44:45.280 --> 00:44:46.620
which is an LED array.

00:44:46.920 --> 00:44:51.580
And it's, like, really super simple to display some text scrolling across that LED array.

00:44:51.580 --> 00:44:52.340
It's very nice.

00:44:52.340 --> 00:44:57.200
And I write a function that takes a piece of text, displays it on that.

00:44:57.200 --> 00:45:01.200
Because I've got the uplink, all I do is I mark that at Anvil.server.callable,

00:45:01.200 --> 00:45:02.700
just like I would in a server module.

00:45:02.700 --> 00:45:05.160
And all of a sudden, I can call it from my web app.

00:45:05.160 --> 00:45:08.940
Just to be clear, this is a function running on the Raspberry Pi.

00:45:08.940 --> 00:45:11.920
It's being called by your Anvil app.

00:45:11.920 --> 00:45:12.220
Absolutely.

00:45:12.220 --> 00:45:13.440
There's a function running on the Raspberry Pi.

00:45:13.440 --> 00:45:13.960
It's crazy.

00:45:13.960 --> 00:45:15.180
Called from a web browser.

00:45:16.020 --> 00:45:17.920
Why shouldn't you be able to do that, right?

00:45:17.920 --> 00:45:18.460
Yeah, it's beautiful.

00:45:18.460 --> 00:45:19.240
It's one call.

00:45:19.240 --> 00:45:20.680
We don't even use a server module.

00:45:20.680 --> 00:45:22.580
We call it straight from the browser.

00:45:22.580 --> 00:45:23.940
Yeah, that's really incredible.

00:45:23.940 --> 00:45:26.260
And it even goes straight through firewalls and stuff.

00:45:26.260 --> 00:45:30.340
You don't even have to open a port because it's an outbound connection to establish that socket, right?

00:45:30.340 --> 00:45:32.100
And so you can drive code.

00:45:32.100 --> 00:45:37.720
I mean, obviously, the Raspberry Pi is a slightly educational, possibly slightly facetious example.

00:45:37.880 --> 00:45:46.180
But, you know, we've got people driving big, like, machine learning jobs that need to run on some dedicated server somewhere with, like, 20 GPUs in.

00:45:46.180 --> 00:45:51.380
And, like, you know, if they tried to do that inside our server modules, they'd hit their CPU quota pretty quickly.

00:45:51.380 --> 00:45:52.300
And that would be the end of that.

00:45:52.660 --> 00:46:02.640
But because there's a route to plug your code into Android wherever it is, they just import the uplink module, you know, mark some control functions callable.

00:46:02.640 --> 00:46:15.100
And they can drive this big GPU rig from our hosted web stuff just as easily as you could drive this Raspberry Pi on your desk to display something just as easily as you could be driving a server function.

00:46:15.100 --> 00:46:16.400
This is a really cool feature.

00:46:16.400 --> 00:46:17.260
I really like it.

00:46:17.260 --> 00:46:23.100
So maybe this is a good time to talk about, like, what it means to publish your code, where is it hosted, things like that.

00:46:23.100 --> 00:46:25.840
So tell me about where I can put this code.

00:46:25.840 --> 00:46:28.040
When I hit publish on your site, what does that mean?

00:46:28.040 --> 00:46:29.480
It's hosted on our infrastructure.

00:46:29.700 --> 00:46:33.680
We were talking earlier about this hugely deep web stack you need to understand all of.

00:46:33.680 --> 00:46:38.440
And you need to understand all of before you can do, like, even Hello World on the web.

00:46:38.440 --> 00:46:41.780
And we didn't talk about the layers lower on the stack, right?

00:46:41.780 --> 00:46:46.920
Also, if I want to deploy a Hello World on the web, I'm going to need to understand, like, you know, AWS, spin up a server.

00:46:46.920 --> 00:46:50.240
I'm going to have to understand how to administer a Linux computer usually.

00:46:50.240 --> 00:46:52.280
I'm going to have to publish that.

00:46:52.280 --> 00:46:59.280
I'm going to have to keep it up to date with security updates because I don't want to be the next Equifax being popped by, you know, months old known vulnerability.

00:46:59.280 --> 00:47:02.360
And that, too, is a barrier to entry.

00:47:02.360 --> 00:47:04.080
And tools like Heroku can help.

00:47:04.080 --> 00:47:07.200
But what Anvil does is we do the whole package.

00:47:07.200 --> 00:47:10.940
So you write your code in Anvil, and it's hosted on our platform as well.

00:47:10.940 --> 00:47:16.200
So you hit the publish button from the Anvil editor, even if you, you know, just signed up 30 seconds ago.

00:47:16.200 --> 00:47:21.480
You hit the publish button, and you've got a URL that is your app on the web already.

00:47:21.960 --> 00:47:24.420
By default, obviously, it's a private URL.

00:47:24.420 --> 00:47:26.440
It's like one of those Google Apps sharing links.

00:47:26.440 --> 00:47:30.900
So, you know, Google Docs, if I send you this link, you can open it.

00:47:30.900 --> 00:47:32.880
But if you don't have it, you can't get it.

00:47:32.880 --> 00:47:38.380
And this is really powerful because it means that your turnaround time is really low.

00:47:38.380 --> 00:47:40.300
You can get something onto the web very quickly.

00:47:40.300 --> 00:47:45.880
And you're not worrying about all that ongoing maintenance burden of, ooh, have I updated the server this week?

00:47:45.880 --> 00:47:47.000
Yeah, I think that's really cool.

00:47:47.000 --> 00:47:48.540
And where's your infrastructure actually running?

00:47:48.540 --> 00:47:50.000
Is it AWS or somewhere else?

00:47:50.140 --> 00:47:51.120
We run in AWS.

00:47:51.120 --> 00:47:51.480
Okay.

00:47:51.480 --> 00:47:53.480
But, I mean, we also run on-site stuff.

00:47:53.480 --> 00:47:53.920
Go on.

00:47:53.920 --> 00:47:54.500
Sure.

00:47:54.500 --> 00:47:57.800
And you guys have an option to let it, to basically have an on-prem version, right?

00:47:57.800 --> 00:47:58.540
Absolutely, yeah.

00:47:58.540 --> 00:48:02.520
And, of course, that is just, you know, a few Docker containers, one Docker-compose command,

00:48:02.520 --> 00:48:05.540
and you've got a local version of Anvil running on your own machine.

00:48:05.540 --> 00:48:06.200
Yeah, that's cool.

00:48:06.200 --> 00:48:11.680
So our code runs in Docker on some Linux machine in AWS, basically, when we run it, the server code?

00:48:11.680 --> 00:48:12.500
Absolutely, yes.

00:48:12.500 --> 00:48:12.880
Okay.

00:48:12.880 --> 00:48:15.060
It's a little bit more tightly locked down than that, but yes.

00:48:15.060 --> 00:48:15.900
Yeah, sure.

00:48:15.900 --> 00:48:19.140
And do I get to pick the data center?

00:48:19.140 --> 00:48:20.040
Not at the moment.

00:48:20.040 --> 00:48:27.400
You will want one of, there's a business-dedicated hosting plan that says, essentially, we will put the VM wherever you like, and you can have it to yourselves.

00:48:27.400 --> 00:48:27.800
Okay.

00:48:27.800 --> 00:48:28.640
Yeah, that's pretty cool.

00:48:28.640 --> 00:48:41.840
So I think what you guys have built really is quite interesting, and definitely for proof-of-concept apps, for people who don't really consider themselves web developers, but they feel like they can learn enough to solve their problem.

00:48:41.840 --> 00:48:42.700
Like, this is awesome.

00:48:42.920 --> 00:48:45.860
Yeah, I think it's not just for those people.

00:48:45.860 --> 00:48:46.980
I mean, it is for those people.

00:48:46.980 --> 00:48:48.240
It's not just for those people.

00:48:49.600 --> 00:48:56.140
Something that we do observe quite a bit, for example, is people going, oh, well, I'll just use this to throw together like a visual mock-up.

00:48:56.140 --> 00:48:56.740
Oh, wait.

00:48:56.740 --> 00:48:58.380
Well, I can add a little bit of behavior to it.

00:48:58.380 --> 00:49:00.440
Oh, well, I can add a bit more behavior to it.

00:49:00.440 --> 00:49:01.320
Oh, okay.

00:49:01.320 --> 00:49:03.040
Well, I've got this first version of my app.

00:49:03.080 --> 00:49:04.740
I might as well launch it as a prototype, right?

00:49:04.740 --> 00:49:06.660
Oh, well, it's in production.

00:49:06.660 --> 00:49:07.260
It's scaling.

00:49:07.260 --> 00:49:08.160
Okay, then.

00:49:08.160 --> 00:49:09.600
Yeah, exactly.

00:49:09.600 --> 00:49:17.920
So the point is that we should be able to grow with you from that proof-of-concept prototype up to a deployed application, and we have many people who've done that with us.

00:49:17.920 --> 00:49:20.240
It sounds definitely doable looking at what you guys have built there.

00:49:20.800 --> 00:49:25.720
So one thing I do want to sort of touch on with you is what about the escape patches?

00:49:25.720 --> 00:49:37.780
Like, so if I want to use a different editor that's external, if I want to do, like, unit testing, if I decide I actually want to take that code and put it somewhere else, is there a way to, like, move out?

00:49:37.780 --> 00:49:49.020
I've talked to you before about, like, the server hosting environment and some of the really quite critical usability stuff we can do because we're not squeezing everything through this REST API checkpoint.

00:49:49.860 --> 00:50:01.780
A corollary of that is it kind of needs to be hosted on our platform to work because standardized platforms that let you just return a database row from the server to the client and have that give you implicit permissions are kind of thin on the ground.

00:50:01.780 --> 00:50:08.440
So if you want to run an Anvil app on-premises on your own hardware, you are going to need an on-premises license.

00:50:08.440 --> 00:50:13.000
If you do want to migrate out, obviously, you know, we'd be sad to see you go.

00:50:13.000 --> 00:50:18.780
But because of these escape patches I talked about earlier, it's actually a fairly straightforward process, right?

00:50:18.800 --> 00:50:21.220
You could change your server modules into REST endpoints.

00:50:21.220 --> 00:50:28.840
So, I mean, even if you're not moving out, right, you have, for example, a native iOS app that wants to talk to the same backend as the web app you've already created.

00:50:28.840 --> 00:50:40.020
Well, that's fine because although by default we don't go through this REST API layer, you can decorate functions in your server modules to make them REST endpoints.

00:50:40.220 --> 00:50:42.080
And say, this is very Flask-like.

00:50:42.080 --> 00:50:44.880
Oh, well, this function is available at this URL.

00:50:44.880 --> 00:50:50.340
And that lets you expand outside the Anvil hosted web client.

00:50:50.340 --> 00:50:54.500
And equally, you can use different backends from an Anvil hosted client.

00:50:55.640 --> 00:50:58.800
So, yeah, we don't think that you're kind of stuck there.

00:50:58.800 --> 00:51:03.460
But there are tools of our platform that you kind of need the whole thing to use.

00:51:03.460 --> 00:51:04.300
Yeah, that makes sense.

00:51:04.300 --> 00:51:05.480
I do understand.

00:51:05.480 --> 00:51:07.900
Like, you guys are doing a lot of magic to wire this stuff together.

00:51:08.060 --> 00:51:15.020
And without the sort of orchestration behind the scenes, then I can see how that's not so easy to do.

00:51:15.020 --> 00:51:17.580
I have a love-hate relationship with the word magic.

00:51:17.580 --> 00:51:22.600
I mean, obviously, magic is a word that people use when they see, you know, something like Anvil working.

00:51:22.600 --> 00:51:23.720
Oh, my goodness, that's magic.

00:51:23.720 --> 00:51:28.480
And it's the word I used earlier to describe my first experiences with something like QBasic.

00:51:28.480 --> 00:51:29.680
Oh, my goodness, this is magic.

00:51:29.680 --> 00:51:32.060
But there's good magic and bad magic, right?

00:51:32.060 --> 00:51:41.220
There is bad magic as in this is an Angular app and I'm not really sure what it does underneath to make this lever I pull over here connect to that thing over there that just wiggled.

00:51:41.220 --> 00:51:45.900
And then there's kind of good magic which is comprehensible.

00:51:45.900 --> 00:51:48.120
You could see exactly how it worked.

00:51:48.120 --> 00:51:50.160
It just saved you some work.

00:51:50.160 --> 00:51:53.800
Like, for example, the client server calls in Anvil.

00:51:53.800 --> 00:51:56.400
There are an example of what I would argue good magic.

00:51:56.400 --> 00:51:58.980
You can see, you know, it's just a function call.

00:51:58.980 --> 00:52:00.440
You can see how it worked.

00:52:00.440 --> 00:52:03.480
You see how you could implement it with REST endpoints if you wanted to.

00:52:03.480 --> 00:52:05.600
But you're kind of glad you don't have to.

00:52:05.600 --> 00:52:08.960
I mostly meant that in the positive sense, the magic you guys are doing.

00:52:08.960 --> 00:52:13.020
But just that it's hard to replicate outside the environment, right?

00:52:13.020 --> 00:52:19.380
So you have a business model for this that is more or less like a freemium.

00:52:19.380 --> 00:52:21.440
Like there's a basic version.

00:52:21.440 --> 00:52:25.840
But if you want your own domain, then you've got to pay some amount.

00:52:25.840 --> 00:52:27.120
It seems pretty reasonable to me.

00:52:27.120 --> 00:52:37.980
But one of the things that came up is like, what if I'm working on an open source project and I'd like to have like some kind of open web app hosted with you guys that a bunch of people can come and contribute to?

00:52:37.980 --> 00:52:39.160
Like, what would that look like?

00:52:39.160 --> 00:52:39.740
Or is that possible?

00:52:39.740 --> 00:52:40.700
It totally would.

00:52:40.820 --> 00:52:45.680
I mean, even if you have an open source web app, you know, somebody's usually paying for hosting somewhere.

00:52:45.680 --> 00:52:52.400
But the good news about, the good thing about Anvil is that all of your apps are in fact Git repositories.

00:52:52.400 --> 00:52:58.040
So it is totally a thing you can do to pull your apps Git repository out of Anvil.

00:52:58.040 --> 00:52:58.960
You could stick it on GitHub.

00:52:58.960 --> 00:52:59.800
You could collaborate.

00:53:00.360 --> 00:53:03.160
If you asked earlier about, oh, I want to use my own editor.

00:53:03.160 --> 00:53:04.220
Oh, I'm an Emacs fiend.

00:53:04.220 --> 00:53:05.980
I absolutely must edit this module in Emacs.

00:53:05.980 --> 00:53:06.460
That's fine.

00:53:06.460 --> 00:53:07.260
Get checkout.

00:53:07.260 --> 00:53:07.800
Get pulled.

00:53:07.800 --> 00:53:08.280
Have fun.

00:53:08.280 --> 00:53:10.020
Get pushed when you're done.

00:53:10.020 --> 00:53:14.540
But also that means that you're open to collaboration tools like GitHub.

00:53:14.540 --> 00:53:17.940
So you could totally run an open source app that's based on Anvil.

00:53:17.940 --> 00:53:23.200
You could have multiple instances that people pay to host or host on our free version.

00:53:23.200 --> 00:53:24.040
Yeah, that sounds good.

00:53:24.040 --> 00:53:26.080
The Git integration is pretty nice.

00:53:26.080 --> 00:53:32.240
And I guess you can create multiple upstreams in Git and make one of those be your GitHub repo, right?

00:53:32.240 --> 00:53:35.300
That's something that we do all the time.

00:53:35.300 --> 00:53:44.860
I mean, you can even do like a continuous integration, continuous deployment, because everything you can do in the Anvil editor is reflected in this Git repository, obviously.

00:53:44.860 --> 00:53:50.720
So you could do things like, oh, well, this is my staging deployment and it's got access to some staging data.

00:53:51.120 --> 00:53:55.680
And then I pull that Git commit and I push it up to somewhere else.

00:53:55.680 --> 00:53:57.080
And that's my deployed app.

00:53:57.080 --> 00:54:00.700
Indeed, we actually have a miniature version of this within Anvil itself.

00:54:00.700 --> 00:54:02.580
So you can choose a version of your app.

00:54:02.580 --> 00:54:05.760
If you go into view history, you can see like the full Git history of your app.

00:54:05.760 --> 00:54:10.360
And you can select a version that's the published version.

00:54:10.360 --> 00:54:15.120
And so if somebody comes to your shared URL externally, that's what they get.

00:54:15.120 --> 00:54:20.240
And so you can carry on hacking and you've got this dev versus production thing already kind of built in.

00:54:20.660 --> 00:54:22.700
But the thing about Git is that, of course, you can extend that.

00:54:22.700 --> 00:54:23.620
I think that's really nice.

00:54:23.620 --> 00:54:26.820
And so basically of this UI that says, here's your Git history.

00:54:26.820 --> 00:54:29.740
That means like you went and pressed save, like save a state here.

00:54:29.740 --> 00:54:38.360
But you can actually mark like this one right here right now is production and continue working on it and then push production on down the line once you have it sort of tested.

00:54:38.360 --> 00:54:39.620
Also kind of in production.

00:54:39.620 --> 00:54:40.700
And I think that's pretty powerful.

00:54:40.900 --> 00:54:41.060
Yeah.

00:54:41.060 --> 00:54:45.160
And actually, if you use that Git interface, you'll discover that's just a branching Git.

00:54:45.160 --> 00:54:48.140
And this is kind of what I mean about good magic versus bad magic.

00:54:48.140 --> 00:54:49.320
That's kind of magical.

00:54:49.320 --> 00:54:55.300
But how we do it is very much open and you can play with it, too, if you want to do something more advanced.

00:54:55.300 --> 00:54:57.720
But yeah, the normal user experience is like one click.

00:54:57.720 --> 00:54:58.680
Okay, that's production now.

00:54:58.680 --> 00:54:58.920
Done.

00:54:58.920 --> 00:54:59.300
All right.

00:54:59.300 --> 00:55:00.800
So we don't have much time left.

00:55:00.800 --> 00:55:02.720
This is so much cool stuff to talk about.

00:55:02.720 --> 00:55:07.420
I guess one last question is like you have your data tables as a service there.

00:55:07.420 --> 00:55:08.880
How do I back up my data?

00:55:08.880 --> 00:55:18.300
So if you're using the data tables within Anvil, the first thing to say is we do take regular and properly encrypted and stored backups of those.

00:55:18.300 --> 00:55:21.000
So you should not have to worry about the data loss.

00:55:21.000 --> 00:55:25.840
But if you want to copy on your own system, then there's a ton of ways to get it out.

00:55:25.840 --> 00:55:33.060
I mean, every data table in the editor, there's like a download a CSV button, which is the very straightforward way of getting this stuff out.

00:55:33.060 --> 00:55:35.560
But earlier we talked about the uplink.

00:55:35.560 --> 00:55:40.280
And, of course, from the uplink, you can do anything you could do in those server modules.

00:55:40.280 --> 00:55:46.220
It's not just a matter of saying, oh, well, here's a function that displays some text on my Raspberry Pi and it's callable from the web.

00:55:46.220 --> 00:55:52.320
That script can also reach in and say, oh, I would like to iterate over all the rows in this table.

00:55:52.320 --> 00:55:54.780
And that's totally legit from an uplink.

00:55:54.780 --> 00:55:57.400
Sync that with some local DB, something like that.

00:55:57.400 --> 00:55:57.700
Yes.

00:55:57.700 --> 00:56:05.340
So if you had your own representation of data you wanted to synchronize with or import, export, that is really straightforward to do.

00:56:05.340 --> 00:56:13.880
And again, if what you actually want is something in Amazon Redshift, if that's where you want to sync your data to and that's where you want all your data to live,

00:56:13.880 --> 00:56:20.260
you could just access it there from Anvil as well because we've got all those Python modules ready for you to use.

00:56:20.260 --> 00:56:22.540
There's nothing forcing you to use the data table service.

00:56:22.840 --> 00:56:25.780
It's just something that makes your life more convenient in a lot of cases.

00:56:25.780 --> 00:56:26.140
Right.

00:56:26.140 --> 00:56:32.420
Knowing the Docker containers are running AWS, you can basically crack out and get to most of the other AWS stuff, right?

00:56:32.420 --> 00:56:33.400
That would be accessible.

00:56:33.400 --> 00:56:36.480
That would be possible even if we weren't running in AWS, right?

00:56:36.480 --> 00:56:36.920
Right.

00:56:36.920 --> 00:56:38.380
Lower latency inside AWS.

00:56:38.380 --> 00:56:38.660
Yeah.

00:56:38.660 --> 00:56:39.380
Does run quite well.

00:56:39.380 --> 00:56:39.780
Nice.

00:56:39.780 --> 00:56:40.080
All right.

00:56:40.080 --> 00:56:42.920
Well, I think, you know, there's a bunch of other stuff we could dig into.

00:56:42.920 --> 00:56:45.700
I think we should probably leave it here just for time's sake.

00:56:45.940 --> 00:56:47.920
So let me ask you the two questions.

00:56:47.920 --> 00:56:49.840
We talked a lot about editors, actually.

00:56:49.840 --> 00:56:52.320
So let's start with your favorite editor.

00:56:52.320 --> 00:56:57.040
Favorite because it's my baby and also I spend a lot of time in it is, of course, the Anvil editor.

00:56:57.360 --> 00:57:00.180
It's got a full autocomplete.

00:57:00.180 --> 00:57:04.480
It can do full stack development and it's plugged into full version control on the backend.

00:57:04.480 --> 00:57:06.840
So I spend a lot of my time obviously working in that.

00:57:06.840 --> 00:57:13.800
For building the Anvil backend itself, I actually use IntelliJ and I really love the JetBrains tools.

00:57:13.800 --> 00:57:15.320
IntelliJ, PyCharm are fantastic.

00:57:15.320 --> 00:57:18.680
Again, the autocompletion is top notch.

00:57:18.680 --> 00:57:19.080
Cool.

00:57:19.080 --> 00:57:19.300
All right.

00:57:19.300 --> 00:57:20.020
That sounds awesome.

00:57:20.020 --> 00:57:20.260
Yeah.

00:57:20.260 --> 00:57:22.420
The editor you built is really, really nice.

00:57:22.420 --> 00:57:23.220
I definitely like it.

00:57:23.220 --> 00:57:23.380
Yeah.

00:57:23.380 --> 00:57:24.780
Check out our PyCon UK lightning talk.

00:57:25.300 --> 00:57:25.700
Yeah.

00:57:25.700 --> 00:57:26.420
You send me the link.

00:57:26.420 --> 00:57:27.100
I'll put it in the show notes.

00:57:27.100 --> 00:57:29.220
And notable PyPI package.

00:57:29.220 --> 00:57:35.080
The selfish answer here is the Anvil uplink because it is on PyPI and it is remarkably cool

00:57:35.080 --> 00:57:37.440
in its ability to plug your own code into the cloud.

00:57:37.440 --> 00:57:40.960
If I weren't counting that, then it's got to be Pandas.

00:57:40.960 --> 00:57:47.640
The things you can do in like three lines of code that I recall using janky libraries to

00:57:47.640 --> 00:57:51.260
pull that data out of Excel files and process it or worse using R.

00:57:51.260 --> 00:57:52.020
Yeah.

00:57:52.020 --> 00:57:52.800
Incredible.

00:57:52.800 --> 00:57:53.820
So yeah, Pandas wins.

00:57:53.820 --> 00:57:54.140
Cool.

00:57:54.220 --> 00:57:55.580
Yeah, that's definitely a big one.

00:57:55.580 --> 00:57:56.860
All right.

00:57:56.860 --> 00:57:57.800
Final call to action.

00:57:57.800 --> 00:57:59.400
People want to check out Anvil.

00:57:59.400 --> 00:58:00.120
What do they do?

00:58:00.120 --> 00:58:04.360
Oh, they go to anvil.works and they sign up for a free account.

00:58:04.360 --> 00:58:07.060
We've got tons of walkthrough videos and tutorials.

00:58:07.060 --> 00:58:10.720
There's a user forum that's really quite active and friendly.

00:58:10.720 --> 00:58:13.700
And you can sign up for an account for free and start building.

00:58:13.700 --> 00:58:15.620
And I would really encourage you to do so.

00:58:15.620 --> 00:58:16.880
And I would look forward to seeing you there.

00:58:16.880 --> 00:58:17.300
Awesome.

00:58:17.300 --> 00:58:18.960
Well, congrats on building this.

00:58:18.960 --> 00:58:24.420
It's definitely pushing Python in a direction that I haven't really seen it pushed successfully

00:58:24.420 --> 00:58:26.240
in quite a while.

00:58:26.380 --> 00:58:27.080
So it's awesome.

00:58:27.080 --> 00:58:27.740
Nice work.

00:58:27.740 --> 00:58:28.520
Thank you very much.

00:58:28.520 --> 00:58:29.600
It's been great talking to you.

00:58:30.800 --> 00:58:33.620
This has been another episode of Talk Python To Me.

00:58:33.620 --> 00:58:36.320
Today's guest was Meredith Loof.

00:58:36.320 --> 00:58:39.400
And this episode has been brought to you by Datadog and ThoughtWorks.

00:58:39.400 --> 00:58:43.520
Datadog gives you visibility into the whole system running your code.

00:58:43.520 --> 00:58:47.860
Visit talkpython.fm/datadog and see what you've been missing.

00:58:47.860 --> 00:58:50.060
Don't even throw in a free t-shirt for doing the tutorial.

00:58:50.920 --> 00:58:54.700
GoCD is the on-premise, open-source, continuous delivery server.

00:58:54.700 --> 00:58:58.840
Want to improve your deployment workflow but keep your code and builds in-house?

00:58:58.840 --> 00:59:05.180
Check out GoCD at talkpython.fm/gocd and take control over your process.

00:59:05.180 --> 00:59:08.000
Are you or a colleague trying to learn Python?

00:59:08.000 --> 00:59:12.660
Have you tried books and videos that just left you bored by covering topics point by point?

00:59:12.780 --> 00:59:18.680
Well, check out my online course, Python Jumpstart, by building 10 apps at talkpython.fm/course

00:59:18.680 --> 00:59:21.280
to experience a more engaging way to learn Python.

00:59:21.280 --> 00:59:24.280
And if you're looking for something a little more advanced,

00:59:24.280 --> 00:59:28.640
try my Write Pythonic Code course at talkpython.fm/pythonic.

00:59:28.640 --> 00:59:31.340
Be sure to subscribe to the show.

00:59:31.340 --> 00:59:33.560
Open your favorite podcatcher and search for Python.

00:59:33.560 --> 00:59:34.800
We should be right at the top.

00:59:34.800 --> 00:59:38.140
You can also find the iTunes feed at /itunes,

00:59:38.140 --> 00:59:40.200
Google Play feed at /play,

00:59:40.200 --> 00:59:42.640
and direct RSS feed at /rss.

00:59:42.640 --> 00:59:44.120
on talkpython.fm.

00:59:44.120 --> 00:59:45.980
This is your host, Michael Kennedy.

00:59:45.980 --> 00:59:47.360
Thanks so much for listening.

00:59:47.360 --> 00:59:48.420
I really appreciate it.

00:59:48.420 --> 00:59:50.360
Now get out there and write some Python code.

00:59:50.360 --> 00:59:50.860
I'll see you next time.

00:59:50.860 --> 00:59:51.180
Bye.

00:59:51.180 --> 00:59:51.200
Bye.

00:59:51.200 --> 00:59:51.240
Bye.

00:59:51.240 --> 00:59:51.500
Bye.

00:59:51.500 --> 00:59:52.340
Bye.

00:59:52.340 --> 00:59:52.340
Bye.

00:59:52.340 --> 00:59:52.340
Bye.

00:59:52.340 --> 00:59:52.340
Bye.

00:59:52.340 --> 00:59:52.340
Bye.

00:59:52.340 --> 00:59:52.360
Bye.

00:59:52.360 --> 00:59:53.200
Bye.

00:59:53.200 --> 00:59:53.200
Bye.

00:59:53.200 --> 00:59:53.200
Bye.

00:59:53.200 --> 00:59:53.200
Bye.

00:59:53.200 --> 00:59:53.200
Bye.

00:59:53.200 --> 00:59:53.200
Bye.

00:59:53.200 --> 00:59:53.200
Bye.

00:59:53.200 --> 00:59:54.040
Bye.

00:59:54.040 --> 00:59:54.040
Bye.

00:59:54.040 --> 00:59:54.040
Bye.

00:59:54.040 --> 00:59:54.040
Bye.

00:59:54.040 --> 00:59:54.040
Bye.

00:59:54.040 --> 00:59:54.040
Bye.

00:59:54.040 --> 00:59:54.040
Bye.

00:59:54.040 --> 00:59:54.040
Bye.

00:59:54.040 --> 00:59:54.880
Bye.

00:59:54.880 --> 00:59:54.880
Bye.

00:59:54.880 --> 00:59:54.880
Bye.

00:59:54.880 --> 00:59:54.880
Bye.

00:59:54.880 --> 00:59:54.880
Bye.

00:59:54.880 --> 00:59:54.880
Bye.

00:59:54.880 --> 00:59:55.720
Bye.

00:59:55.720 --> 00:59:55.720
Bye.

00:59:55.720 --> 00:59:55.720
Bye.

00:59:55.720 --> 00:59:55.720
Bye.

00:59:55.720 --> 00:59:55.720
Bye.

00:59:55.720 --> 00:59:56.560
Bye.

00:59:56.560 --> 00:59:56.560
Bye.

00:59:56.560 --> 00:59:56.560
Bye.

00:59:56.560 --> 00:59:57.400
Bye.

00:59:57.400 --> 00:59:58.240
Bye.

00:59:58.240 --> 00:59:59.080
Bye.

00:59:59.080 --> 00:59:59.920
Bye.

00:59:59.920 --> 01:00:00.760
Bye.

01:00:00.760 --> 01:00:01.600
Bye.

01:00:01.600 --> 01:00:02.440
Bye.

01:00:02.440 --> 01:00:03.280
Bye.

01:00:03.280 --> 01:00:04.120
Bye.

01:00:04.120 --> 01:00:04.960
Bye.

01:00:04.960 --> 01:00:05.800
Bye.

01:00:05.800 --> 01:00:06.640
Bye.

01:00:06.640 --> 01:00:07.480
Bye.

01:00:07.480 --> 01:00:07.980
you

01:00:07.980 --> 01:00:08.480
you

01:00:08.480 --> 01:00:08.980
you

01:00:08.980 --> 01:00:09.980
Thank you.

01:00:09.980 --> 01:00:39.960
Thank you.

