WEBVTT

00:00:00.001 --> 00:00:02.780
Are you coming to Python from another language and ecosystem?

00:00:02.780 --> 00:00:09.800
It can seem a bit daunting at first, but Python is very welcoming and has a massive array of tools and libraries.

00:00:09.800 --> 00:00:15.460
In this episode, I speak with my friend Cecil Phillip, who does both Python and .NET development.

00:00:15.460 --> 00:00:22.760
We discuss what it's like coming to Python from .NET, as well as a whole bunch of compare and contrast across those two ecosystems.

00:00:22.760 --> 00:00:29.120
This is Talk Python to Me, episode 363, recorded April 13th, 2022.

00:00:29.120 --> 00:00:45.080
Welcome to Talk Python to Me, a weekly podcast on Python.

00:00:45.080 --> 00:00:46.800
This is your host, Michael Kennedy.

00:00:46.800 --> 00:00:53.000
Follow me on Twitter, where I'm @mkennedy, and keep up with the show and listen to past episodes at talkpython.fm.

00:00:53.000 --> 00:00:56.040
And follow the show on Twitter via at Talk Python.

00:00:56.240 --> 00:00:59.700
We've started streaming most of our episodes live on YouTube.

00:00:59.700 --> 00:01:07.240
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:07.240 --> 00:01:11.060
Hey folks, I want to share a cool opportunity with you.

00:01:11.060 --> 00:01:19.440
Many people reach out to me and ask about getting a job doing full-time Python rather than, say, Java in the day and Python on a hobby basis.

00:01:19.720 --> 00:01:25.080
If you're in the market for a proper Python job with adventure right in the description, then check this out.

00:01:25.080 --> 00:01:35.560
The Intelligence and Space Research Division at Los Alamos National Laboratory is seeking some smart and talented developers to help them blaze new galactic trails across the solar system.

00:01:35.840 --> 00:01:42.900
They're located in the American Southwest, so you'll also have time to explore earthly trails in the beautiful mountains of northern New Mexico.

00:01:42.900 --> 00:01:57.600
You could use your amazing Python skills to write software for satellites orbiting the Earth, design systems and interfaces that help protect America's security interests, process data from Mars, or even explore a host of other fascinating space research projects.

00:01:58.180 --> 00:01:59.640
Does that sound like an adventure?

00:01:59.640 --> 00:02:00.780
Well, you won't be alone.

00:02:00.780 --> 00:02:06.000
Your team will be filled with experts in software, engineering, and space science all working together.

00:02:06.000 --> 00:02:10.740
Just visit talkpython.fm/Los Alamos and shoot them an email.

00:02:10.740 --> 00:02:13.080
That link actually opens your email client, by the way.

00:02:13.080 --> 00:02:15.840
The folks at Los Alamos can't wait to hear from you.

00:02:15.840 --> 00:02:18.960
The link's right in your podcast player or on the episode page.

00:02:18.960 --> 00:02:23.500
Transcripts for this and all of our episodes are brought to you by Assembly AI.

00:02:23.500 --> 00:02:26.160
Do you need a great automatic speech-to-text API?

00:02:26.160 --> 00:02:28.700
Get human-level accuracy in just a few lines of code.

00:02:28.700 --> 00:02:31.540
Visit talkpython.fm/assembly AI.

00:02:31.540 --> 00:02:32.980
Hey, Cecil.

00:02:32.980 --> 00:02:33.700
Hey, what's going on?

00:02:33.700 --> 00:02:36.700
It's going to be fun to just chat about past, future, present.

00:02:36.700 --> 00:02:38.960
I see you're wearing the C-sharp shirt.

00:02:38.960 --> 00:02:40.520
Yeah, I decided to wear this today.

00:02:40.520 --> 00:02:42.300
Also, this is a vintage shirt.

00:02:42.300 --> 00:02:43.540
Like, you can't get these anymore.

00:02:43.540 --> 00:02:48.100
I think this was from, I want to say, Xamarin Evolve.

00:02:48.100 --> 00:02:54.260
Back before Xamarin was a Microsoft company, they had a conference called Xamarin Evolve, and they used to give out, you know, swag and bags and stuff.

00:02:54.680 --> 00:02:56.020
And I got this shirt.

00:02:56.280 --> 00:03:03.160
And I try to only wear it on special occasions because I want to preserve it for as long as I can because I know I'm not going to get another one.

00:03:03.160 --> 00:03:04.820
So, I figured today was a special occasion.

00:03:04.820 --> 00:03:05.420
I'll wear it today.

00:03:05.420 --> 00:03:06.440
Yeah, for sure, for sure.

00:03:06.440 --> 00:03:10.700
I got my Vivaldi shirt on today, which is, should have brought my Python ones.

00:03:10.700 --> 00:03:13.780
Anyway, I'm super excited to have you back on the show.

00:03:14.000 --> 00:03:15.600
You've been on the show a couple of times.

00:03:15.600 --> 00:03:19.180
We talked about live streaming of all things.

00:03:19.180 --> 00:03:25.740
And, you know, some of my live stream setup is actually thanks to you because you blazed the trail, which is awesome.

00:03:25.740 --> 00:03:27.660
You and it was Brian Clark, right?

00:03:27.720 --> 00:03:30.860
Who had been doing your Python live stream, right?

00:03:30.860 --> 00:03:31.320
Yeah, yeah.

00:03:31.320 --> 00:03:36.240
Back when Brian and I were both at Microsoft, we were doing a Pi Weekly Live is what it was called.

00:03:36.240 --> 00:03:41.920
Or we were just kind of looking at Python from a perspective of people that don't do Python for a living.

00:03:42.060 --> 00:03:47.740
Or, you know, I don't push Python's production or I don't maintain Python open source libraries.

00:03:47.740 --> 00:03:50.940
But it's still a cool language and we wanted to learn it, right?

00:03:50.940 --> 00:03:52.260
And we wanted to learn in public.

00:03:52.260 --> 00:04:01.620
And I think as advocates or pretty much just as anyone, I think now like learning in public is a great way to not only help yourself, but also help the community too.

00:04:01.620 --> 00:04:02.100
It is.

00:04:02.100 --> 00:04:03.980
And putting yourself out there in that way.

00:04:03.980 --> 00:04:07.660
I think it's scary, especially when you're brand new.

00:04:07.660 --> 00:04:09.200
You're like, oh, I've been doing this for a few weeks.

00:04:09.200 --> 00:04:10.120
I'm going to look really bad.

00:04:10.120 --> 00:04:12.660
But at the same time, you learn that people want to help you.

00:04:12.660 --> 00:04:16.300
And other people who are also having the same problems really appreciate that.

00:04:16.300 --> 00:04:17.580
So that was a really cool episode.

00:04:17.580 --> 00:04:24.540
And we also talked about developer relations and what the heck is that with you and Paul Everett and some other folks as well.

00:04:24.540 --> 00:04:26.280
So anyway, welcome back.

00:04:26.280 --> 00:04:36.000
This time we're going to be talking about what may seem initially like a bit of a weird topic for the Talk Python show.

00:04:36.000 --> 00:04:38.760
And that's somewhat .NET.

00:04:38.760 --> 00:04:48.480
So what we're going to talk about is really reaching out to folks who are experts in C# and .NET, hence your shirt, saying, look, Python is this excellent language as well.

00:04:48.480 --> 00:04:57.100
And it seems really like such a different ecosystem, such a different language, such a different tool chain, like are almost all the axes.

00:04:57.100 --> 00:05:00.360
It looks really weird from a .NET perspective, right?

00:05:00.360 --> 00:05:02.520
And I think it's going to be super fun to explore those.

00:05:02.520 --> 00:05:06.780
But I want people listening to take this from a slightly different perspective.

00:05:06.780 --> 00:05:11.400
Obviously, if you're a C# or .NET person, you know, that's a really focused conversation.

00:05:11.760 --> 00:05:17.080
But what about the teams who are doing Java and they're looking at Python or the teams who are doing C++ and look at it?

00:05:17.080 --> 00:05:27.620
I think this could be a sort of a stand in or a prototype for how people coming from other technologies coming into Python might evaluate it and perceive it and think about it.

00:05:27.620 --> 00:05:28.560
Yeah, I think so, too.

00:05:28.560 --> 00:05:33.980
Like, so first of all, I want to tell folks like this is not like a my language is vetted in your language kind of conversation.

00:05:33.980 --> 00:05:35.340
You know, we fight.

00:05:35.620 --> 00:05:36.600
We're girlfriends here.

00:05:36.600 --> 00:05:37.660
You know, we all like each other.

00:05:37.660 --> 00:05:44.180
But I always find that, you know, if you kind of look through like the history of programming languages, like we all kind of evolve together, right?

00:05:44.180 --> 00:05:51.420
Like we all borrow features from each other, whether it's libraries or, you know, actual language core features or whatever the case is.

00:05:51.420 --> 00:05:56.180
And, you know, it's always interesting to see folks when they're like, oh, your language can do that, too.

00:05:56.180 --> 00:05:56.820
So can mine.

00:05:56.820 --> 00:06:00.320
And so now that kind of just makes them a little bit more relatable, right?

00:06:00.320 --> 00:06:03.060
Because you're like, OK, well, I know how that works for me.

00:06:03.180 --> 00:06:08.540
So now I'm maybe I can pick up your language a little bit easier because I already know like that particular concept, you know?

00:06:08.540 --> 00:06:09.640
Yeah, I totally agree.

00:06:09.640 --> 00:06:11.840
And it's not a one way street either.

00:06:11.840 --> 00:06:12.500
Yeah, exactly.

00:06:12.500 --> 00:06:16.180
For example, we in Python have async and a wait.

00:06:16.180 --> 00:06:17.460
Thank you to C#.

00:06:17.460 --> 00:06:20.840
But C# has generators and yield return.

00:06:20.840 --> 00:06:22.780
Thank you to places like Python.

00:06:22.780 --> 00:06:23.000
Right.

00:06:23.000 --> 00:06:24.780
So there's like this sort of give and take.

00:06:24.780 --> 00:06:25.020
Yeah.

00:06:25.020 --> 00:06:25.180
Yeah.

00:06:25.180 --> 00:06:27.080
Which I think is quite interesting.

00:06:27.080 --> 00:06:29.240
Another thing that C# has.

00:06:29.240 --> 00:06:32.140
I don't know if you know, I think it was in C# 9.

00:06:32.660 --> 00:06:33.200
I might be a mistake.

00:06:33.200 --> 00:06:34.080
I think it was C# 9.

00:06:34.080 --> 00:06:36.720
C#, by the way, if you're not following it, has many versions.

00:06:36.720 --> 00:06:40.640
This is actually an interesting thing to discuss as we'll get into it later.

00:06:40.640 --> 00:06:41.180
Yeah.

00:06:41.180 --> 00:06:43.760
So C# 9, this is like a lot of releases.

00:06:43.760 --> 00:06:43.980
Yeah.

00:06:43.980 --> 00:06:44.240
Yeah.

00:06:44.240 --> 00:06:46.640
I think C# 9 was two years ago.

00:06:46.640 --> 00:06:46.840
Right.

00:06:46.840 --> 00:06:48.380
So last year's version was C# 10.

00:06:48.380 --> 00:06:52.240
And then C# 11 is going to be released in November of 2022.

00:06:52.240 --> 00:06:52.940
Yeah.

00:06:52.940 --> 00:06:54.560
So yeah, like Michael said, there's a lot of versions.

00:06:54.720 --> 00:06:59.000
But I kind of want to follow up on that last point you made about async await because another

00:06:59.000 --> 00:07:03.120
feature too, which is one I actually really appreciate, is records.

00:07:03.120 --> 00:07:07.380
And so when I think about records, I almost think about like data classes in Python.

00:07:07.380 --> 00:07:07.740
Yeah.

00:07:07.740 --> 00:07:08.480
They're very similar.

00:07:08.480 --> 00:07:08.740
Yeah.

00:07:08.740 --> 00:07:09.100
Yeah.

00:07:09.100 --> 00:07:12.080
I think about like these immutable classes, these immutable types that I have.

00:07:12.080 --> 00:07:15.760
And essentially like their job is really just to pass information back and forth.

00:07:15.760 --> 00:07:18.280
But I want to say I feel like Python had that first.

00:07:18.280 --> 00:07:19.380
Right.

00:07:19.720 --> 00:07:21.780
Again, .NET got that like two years ago.

00:07:21.780 --> 00:07:23.440
I'm not sure how old data records are.

00:07:23.440 --> 00:07:23.940
Or data.

00:07:23.940 --> 00:07:24.960
Oh, yeah.

00:07:24.960 --> 00:07:27.380
Data classes, I believe, are older than two years.

00:07:27.380 --> 00:07:28.620
But yeah, I'm pretty sure.

00:07:28.620 --> 00:07:32.000
But yeah, I don't totally remember the exact release number it was.

00:07:32.000 --> 00:07:32.180
Yeah.

00:07:32.180 --> 00:07:33.300
We have a lot of releases too.

00:07:33.300 --> 00:07:35.920
We just put them as point releases, 3.7, 3.8, 3.9.

00:07:35.920 --> 00:07:42.040
Now, let's start this conversation from a perspective of a C# developer.

00:07:42.040 --> 00:07:43.960
Now, imagine you don't know a lot about Python.

00:07:43.960 --> 00:07:47.620
You do know a lot about both languages, just to be clear.

00:07:47.620 --> 00:07:51.460
And that's why I actually have a ton of experience in .NET before I got into Python.

00:07:51.460 --> 00:07:54.240
But let's imagine that you don't know a lot about Python.

00:07:54.240 --> 00:07:59.440
And you're thinking about, you know, maybe I just really need to either I'm going to get a new job.

00:07:59.440 --> 00:08:03.020
And it's not the same technology I was working in.

00:08:03.020 --> 00:08:04.400
This is a Python place.

00:08:04.400 --> 00:08:06.100
And I've been doing .NET at my company.

00:08:06.100 --> 00:08:09.740
Or you're just thinking, you know, more like I was.

00:08:09.800 --> 00:08:18.860
It's like, gosh, I kind of need to diversify my technology and my career experience and not put all the eggs in one basket sort of thing.

00:08:18.860 --> 00:08:21.820
And really actually love that change.

00:08:21.820 --> 00:08:28.480
But think about what are the things that you really love about working in C# and .NET.

00:08:28.480 --> 00:08:36.120
And you're like, I just, if I had to leave this feature or this language thing behind, it would nearly kill me to do so.

00:08:36.760 --> 00:08:43.060
Yeah, I think for me, and it's almost not so much so for me about like the language.

00:08:43.060 --> 00:08:48.480
Because like you mentioned before, like we've had the opportunity to play around with like a lot of different languages and kind of see how the world works.

00:08:48.480 --> 00:08:50.840
For me, it's the tooling, right?

00:08:50.840 --> 00:08:53.640
From a .NET developer perspective, it's the tooling.

00:08:53.640 --> 00:08:54.480
And the libraries.

00:08:54.480 --> 00:08:55.440
The tooling and the libraries.

00:08:55.440 --> 00:09:02.480
The tooling, the libraries and the integrations with like some of the other ecosystem that kind of surrounds .NET that makes it really useful for me.

00:09:02.880 --> 00:09:04.440
So I'll give you an example.

00:09:04.440 --> 00:09:13.140
Like, so for .NET developers, you may already know this, but, you know, we have project types that are based on CS projects and solution files and things of that nature.

00:09:13.140 --> 00:09:19.100
Where I know some folks might look at and be like, oh man, why did my project have all of these different files?

00:09:19.100 --> 00:09:23.060
And like, there's so much stuff just to do like a hello world or a simple project.

00:09:23.300 --> 00:09:27.820
But then I look at that as, okay, well, I know where the root of my project is, right?

00:09:27.820 --> 00:09:39.800
And I know there's a very standard way to define like what are my dependencies and what are the different projects that denotes, I guess, sub projects in like that larger solution, right?

00:09:40.140 --> 00:09:51.100
Whereas one of the things that, you know, hurt me a little bit as you look at other languages and not just Python, but if you look at JavaScript and Go and some of these other ones, I'm like, okay, well, how do I know where's the roots?

00:09:51.100 --> 00:09:53.440
And then how do I have multiple projects?

00:09:54.060 --> 00:09:59.980
Or I guess you could call them multiple components for that same project or multiple pieces, but I want them in the same folder.

00:09:59.980 --> 00:10:05.220
And I want when I hit build or run that all of them run or like the right subset of them run.

00:10:05.220 --> 00:10:05.960
Like, right, right.

00:10:05.960 --> 00:10:10.980
I maybe have a web front end and some API back end and they both need to be running that type of thing.

00:10:10.980 --> 00:10:11.260
Right.

00:10:11.260 --> 00:10:16.560
So for me, like one of the things I love about Visual Studio back when I was on Windows, because I don't use Windows as much anymore.

00:10:17.100 --> 00:10:27.420
I used to be able to like select multiple projects to start, like when I started debugging session so that whenever I hit F5, famous F5, you know, start and run and do all that types of stuff.

00:10:27.420 --> 00:10:30.260
Now I'll have like multiple projects running.

00:10:30.260 --> 00:10:36.380
So it could be, like you said, like my web API or my back end, or I have a Xamarin thing that's running or whatever the case is.

00:10:36.380 --> 00:10:41.160
But now they're all running and debugging at the same time in the same solution.

00:10:41.160 --> 00:10:44.940
Because again, the editor knows what projects are part of this.

00:10:44.940 --> 00:10:46.240
It knows what the dependencies are.

00:10:46.240 --> 00:10:48.540
It knows what ports they're running on and all that types of stuff.

00:10:48.540 --> 00:10:58.340
Whereas, again, if I walk away from that world a little bit, I feel like now that becomes like a manual process and I have to write like scripts or YAML files or something like that.

00:10:58.340 --> 00:10:59.160
Yeah, yeah, yeah.

00:10:59.160 --> 00:11:00.740
Well, let me riff on that for a minute.

00:11:00.880 --> 00:11:16.900
So, so often what you'll see in the tutorials and stuff, the getting started stories in the Python space is create a blank Python file called app.py, main.py, whatever, and write this bit of code.

00:11:16.900 --> 00:11:17.080
Yeah.

00:11:17.080 --> 00:11:23.660
And the sort of starting structure that is presented to you is, it's almost wholly absent, right?

00:11:23.660 --> 00:11:27.560
If you're going to build a web app, you have to figure out, well, where do the static files go?

00:11:27.560 --> 00:11:28.360
Where is the JavaScript?

00:11:28.360 --> 00:11:29.760
How do I align that?

00:11:29.760 --> 00:11:35.320
What do I do with my view templates versus like just, it's completely unstructured, right?

00:11:35.460 --> 00:11:50.600
And I think that that is the world that's presented to a lot of people and keeping with my opening theme, if you're coming from a place where there's a lot of guidance through the tooling, you may see that and want to just run in horror and go, I've been shot back to the 80s.

00:11:50.600 --> 00:11:51.480
What has happened to me?

00:11:51.480 --> 00:11:52.240
I don't want this.

00:11:52.240 --> 00:11:53.060
Like, I don't need this.

00:11:53.060 --> 00:11:53.640
Why am I here?

00:11:53.640 --> 00:12:06.680
But as you dig deeper, if you want to opt into those things, they do exist in a much more sort of decentralized, you know, by choice, go hunt them down way.

00:12:06.680 --> 00:12:13.120
And that's like, if you want a lot of structure, you could use cookie cutter to generate very structured projects.

00:12:13.120 --> 00:12:18.140
So much so that I think a lot of the cookie cutters are overly specific.

00:12:18.500 --> 00:12:22.540
You end up like, you know, I don't really need two layers of Redis.

00:12:22.540 --> 00:12:24.000
One layer of Redis was enough.

00:12:24.000 --> 00:12:25.240
Like, why is all this stuff here?

00:12:25.240 --> 00:12:26.720
People get carried away with it.

00:12:26.720 --> 00:12:31.600
But you can generate those types of like, here's the pieces and it's really structured how they fit together.

00:12:31.600 --> 00:12:36.100
You can use things like PyCharm to create a project that might have a little bit of structure.

00:12:36.100 --> 00:12:38.160
They very rarely have much, but a little bit.

00:12:38.160 --> 00:12:42.640
But none of that is presented to you in a way that is discoverable in the first week.

00:12:42.640 --> 00:12:43.140
Right?

00:12:43.140 --> 00:12:45.660
If you're brand new, you're like, I'm here at this one file.

00:12:45.660 --> 00:12:46.800
That's what the tutorial says.

00:12:47.140 --> 00:12:48.600
Why is it all in one file anyway?

00:12:48.600 --> 00:12:49.540
Shouldn't this be broken up?

00:12:49.540 --> 00:12:49.740
Yeah.

00:12:49.740 --> 00:12:53.680
And to that point, there's like pros and cons to each of those approaches.

00:12:53.680 --> 00:13:00.200
Because like you mentioned before, one of the things that I could say I love about Python is the fact that I could just get started with one file.

00:13:00.200 --> 00:13:00.840
Right?

00:13:00.840 --> 00:13:01.100
Yeah.

00:13:01.180 --> 00:13:05.700
And that getting started experience and that evolvability of the language, I think is important.

00:13:05.700 --> 00:13:05.920
Right?

00:13:05.920 --> 00:13:08.960
I think that's one of the reasons why people like latch onto it so much.

00:13:08.960 --> 00:13:13.020
Because my barrier to entry is like extremely low.

00:13:13.020 --> 00:13:17.860
It is literally like a file and, you know, whatever Python runtime that you have on your machine.

00:13:17.860 --> 00:13:18.800
You know what I mean?

00:13:18.940 --> 00:13:19.100
Yeah.

00:13:19.100 --> 00:13:25.300
And that's a huge attraction for many people coming into the ecosystem from what I can see from talking to a lot of people is, right?

00:13:25.300 --> 00:13:26.880
I'm a biologist.

00:13:27.120 --> 00:13:32.020
And I learned that if I write these five lines into a text file, I can now do magic.

00:13:33.260 --> 00:13:39.720
Whereas if you've got to learn about public static void classes, namespaces, compiling, linking, you're like, wait a minute.

00:13:39.720 --> 00:13:41.040
I'm not a programmer.

00:13:41.040 --> 00:13:41.660
This is not for me.

00:13:41.660 --> 00:13:42.420
Yeah, exactly.

00:13:42.420 --> 00:13:44.760
And when I think about that, right?

00:13:44.760 --> 00:13:51.220
Like if I think about like the structured nature of Visual Studio style projects and .NET projects and C# projects.

00:13:51.220 --> 00:13:56.040
And like you mentioned, like the Python projects and even the cookie cutter stuff and whatever the case is.

00:13:56.040 --> 00:14:02.620
I have to kind of look at the history and see like, oh, well, what space did these ecosystems kind of evolve in?

00:14:02.620 --> 00:14:03.440
Right?

00:14:03.440 --> 00:14:11.360
Like when I think about that .NET ecosystem, you know, for folks that are listening, that's mostly where I spent a lot of my time in terms of like my career coming forward.

00:14:11.360 --> 00:14:17.280
You know, I think about like schools and enterprises and big companies that need like structure.

00:14:17.280 --> 00:14:22.720
Like give me the structure and then now I'll add the bits and pieces that I kind of need going forward.

00:14:22.720 --> 00:14:23.060
Right?

00:14:23.580 --> 00:14:26.660
When I think about Python, and again, if I'm wrong, please correct me.

00:14:26.660 --> 00:14:33.500
When I think about Python, I think about, okay, folks that are doing like a lot of scientific experiments, like numeric computations.

00:14:33.500 --> 00:14:36.280
And hey, I just want to do these things really quickly.

00:14:36.280 --> 00:14:40.460
I don't really need structure, but I want to like execute experiments.

00:14:40.460 --> 00:14:43.660
Not experiments from the perspective that the code is not important.

00:14:43.660 --> 00:14:44.600
The code is important.

00:14:44.600 --> 00:14:49.000
But like it's the task is more important than the code is, if that makes sense.

00:14:49.000 --> 00:14:49.200
Sure.

00:14:49.200 --> 00:14:50.200
Yeah, that makes a lot of sense.

00:14:50.200 --> 00:14:52.800
And that's not always true, but that's often true.

00:14:52.920 --> 00:15:05.480
And I would say there's different areas in like certainly the scientific area, maybe the data science exploration area, but even like the DevOps or just the automate stuff with Python rather than bash.

00:15:05.480 --> 00:15:05.800
Right?

00:15:05.800 --> 00:15:10.980
Like I need to copy these files over here and then rename them and then put them on S3.

00:15:10.980 --> 00:15:11.400
Right?

00:15:11.560 --> 00:15:17.020
So that's not a super structured experience, but Python's really good at it and often it's used for it.

00:15:17.020 --> 00:15:17.240
Yeah.

00:15:17.240 --> 00:15:21.800
And I agree with you when we look at where both of these languages have come today.

00:15:21.800 --> 00:15:26.120
So if you kind of look at, okay, now .NET is what?

00:15:26.120 --> 00:15:29.140
.NET is like 16, 17 years old, something like that.

00:15:29.140 --> 00:15:29.560
20.

00:15:29.560 --> 00:15:30.140
I think it's 20.

00:15:30.140 --> 00:15:36.280
I think because, yeah, I think there was the whole, yeah, Richard Campbell and crew have been going on about like the anniversary and stuff.

00:15:36.380 --> 00:15:41.360
Right. So if you look at languages 20 years later, right, like your initial intent was this.

00:15:41.600 --> 00:15:50.320
As the world evolves, as the world of software development evolves, and then now we're, as developers, like we're looking at attaching on to new, you know, new work types.

00:15:50.320 --> 00:15:55.240
And, you know, you're hearing about Kubernetes and mobile apps and all these types of things.

00:15:55.240 --> 00:15:58.400
Now, like our languages kind of have to evolve with us.

00:15:58.400 --> 00:15:58.620
Right.

00:15:58.620 --> 00:15:59.960
And like we have to evolve with the industry.

00:15:59.960 --> 00:16:04.860
And so now some of those initial use cases have like expanded and multiplied.

00:16:04.860 --> 00:16:05.340
Right.

00:16:05.340 --> 00:16:07.840
And now we got to take care of all of these other things now as well.

00:16:07.840 --> 00:16:08.100
Yeah.

00:16:08.440 --> 00:16:21.880
Well, that's a big shift, honestly, that the whole .NET side has had to sort of come to terms with over the last 10 years is the open source, the open sourceification of this whole sort of commercial side of things.

00:16:21.880 --> 00:16:29.100
And let's maybe explore that for a little bit, because I think there's a lot of interesting variations and differences and stuff.

00:16:29.100 --> 00:16:29.340
Right.

00:16:29.420 --> 00:16:34.360
So Python, in a sense, was open source before open source was a thing.

00:16:34.360 --> 00:16:34.620
Right.

00:16:34.620 --> 00:16:36.660
It was just, here's the source code.

00:16:36.660 --> 00:16:37.060
Right.

00:16:37.060 --> 00:16:42.540
There's no GitHub and PRs and all of this sort of formal open source structure.

00:16:42.540 --> 00:16:45.800
It was just released on Usenet and other places.

00:16:45.800 --> 00:16:53.600
Whereas Python, I'm sorry, whereas .NET has been a product from quite a long time.

00:16:53.660 --> 00:16:53.780
Right.

00:16:53.780 --> 00:17:01.360
It was a way to build things in the early days for like Windows servers and for Windows and the Microsoft tooling.

00:17:01.360 --> 00:17:04.020
And like, let's make it really good for developers over there.

00:17:04.020 --> 00:17:04.260
Right.

00:17:04.260 --> 00:17:09.400
But that was not released by a bunch of people contributing in different ways.

00:17:09.400 --> 00:17:10.380
It was way more structured.

00:17:10.380 --> 00:17:10.640
Right.

00:17:10.640 --> 00:17:11.020
Yeah.

00:17:13.580 --> 00:17:17.120
This portion of Talk Python To Me is brought to you by Cast AI.

00:17:17.120 --> 00:17:22.920
Cast AI is the number one Kubernetes cost management and automation platform.

00:17:22.920 --> 00:17:30.700
Get on top of your cloud costs, streamline DevOps processes, and remove the complexity that slows down software delivery.

00:17:30.700 --> 00:17:38.340
Cast AI uses automation to eliminate manual tasks, provision your infrastructure, and keep it optimized at all times.

00:17:38.440 --> 00:17:42.580
It selects the right resources at the right time and for the best price.

00:17:42.580 --> 00:17:47.180
So you can focus on things you want to do, like building new features and writing code.

00:17:47.180 --> 00:17:52.400
Teams using Cast AI see an average savings of 50% and more.

00:17:52.400 --> 00:17:55.280
Your friendly cloud giant is making tons of money.

00:17:55.280 --> 00:17:56.880
Don't send them more than you need to.

00:17:56.880 --> 00:18:00.960
So why not scan your cluster and discover how much you could save with Cast AI?

00:18:00.960 --> 00:18:04.080
They have a special offer for Talk Python listeners.

00:18:04.080 --> 00:18:12.460
Just visit talkpython.fm/castai or click the link in your podcast player show notes and get a free optimization report.

00:18:12.460 --> 00:18:15.060
Thank you to Cast AI for supporting the show.

00:18:15.060 --> 00:18:20.280
Again, like when we look at the history of things, right?

00:18:20.280 --> 00:18:28.080
Like for me, the initial intent or one of the initial intents of .NET was to make it easier to build apps on Windows specifically.

00:18:28.080 --> 00:18:31.560
So you think about like, well, who's building Windows applications, right?

00:18:31.560 --> 00:18:35.440
Like at that time, you know, you go back to like 2001, 2002, right?

00:18:35.440 --> 00:18:36.400
That's what we're talking about.

00:18:36.400 --> 00:18:41.180
And at that time, mostly we're talking about like desktop applications, right?

00:18:41.180 --> 00:18:42.740
Like we're thinking about Windows forms.

00:18:42.740 --> 00:18:46.320
This is the successor to Visual Basic 6 and all of its glorious.

00:18:46.320 --> 00:18:49.600
Right, like the drag and drop UIs and like all that types of stuff, right?

00:18:49.620 --> 00:18:52.660
And then eventually that evolved into WinForms and those types of things.

00:18:52.660 --> 00:18:56.240
But still from a very Windows specific perspective.

00:18:56.240 --> 00:19:02.540
And then now we forward on to like, I don't know, let's say 2013, 14, 15.

00:19:02.540 --> 00:19:06.140
And even up until today, now like the cloud has become a major thing.

00:19:06.720 --> 00:19:17.180
And I'll be honest with you, I'm not a business person and I wasn't in the room, but I can tell you, anyone that wants to compete in the cloud computing space, you have to be cross-platform.

00:19:17.440 --> 00:19:30.440
And you almost have to have a more open community, be able to work with different types of folks and interoperate with different types of technologies just because of the nature of the landscape of cloud computing, right?

00:19:30.440 --> 00:19:32.140
Like you mentioned Redis earlier, right?

00:19:32.140 --> 00:19:33.880
Like how do we plug into Redis?

00:19:33.880 --> 00:19:35.340
How do we plug into RabbitMQ?

00:19:35.340 --> 00:19:38.200
How do I plug into Docker and Kubernetes, right?

00:19:38.260 --> 00:19:43.800
Like, you know, a lot of these things have their best experiences on non-Windows machines, right?

00:19:43.800 --> 00:19:50.040
So how do we now plug into that ecosystem and evolve to kind of follow along with where the rest of the industry is going?

00:19:50.040 --> 00:19:54.380
And so that's why you'll see now, like now .NET is, now it's open source.

00:19:54.380 --> 00:19:57.600
Now it runs on ARM devices and it runs on, you know, what's that?

00:19:57.600 --> 00:19:59.380
The M1 Macs and all of these.

00:19:59.380 --> 00:20:00.660
Yeah, it runs on our Mac, right?

00:20:00.660 --> 00:20:03.860
Right, like it runs everywhere that you could potentially want it to run.

00:20:04.260 --> 00:20:12.960
One's on, I'm sure, I'm pretty sure it runs on like Apple watches and on your fridge if you have a Samsung fridge and like all these different places, which is really crazy to think about.

00:20:12.960 --> 00:20:19.100
Again, like looking back at the history of what this thing was intentionally, you know, initially intended for.

00:20:19.100 --> 00:20:19.360
Sure.

00:20:19.360 --> 00:20:31.100
To me, the biggest, maybe two biggest, the two big things that are sort of tied together that are affected by this different origin story of Python and .NET

00:20:31.100 --> 00:20:43.580
really have to do about what I'll refer to, I guess, as the one true way versus a thousand flowers blooming and some of them growing in, you know, maybe in the tall trees or whatever.

00:20:43.580 --> 00:20:54.000
And then people's perception of using open source content versus like what is blessed by the project organizer, right?

00:20:54.000 --> 00:20:56.420
So maybe we can think about that for a little bit, right?

00:20:56.420 --> 00:21:07.240
So when you're a .NET person, you go traditionally, I think this is actually fading a lot, but traditionally you would go into Visual Studio and it has a list of projects.

00:21:07.240 --> 00:21:07.820
What do you want?

00:21:07.820 --> 00:21:09.000
I want a web project.

00:21:09.000 --> 00:21:11.980
I want a UI GUI type of project.

00:21:11.980 --> 00:21:13.360
I want an API.

00:21:13.680 --> 00:21:22.000
And then you click it and it goes whoosh and a ton of files come out and a bunch of linked libraries off to the equivalent of PyPI.

00:21:22.000 --> 00:21:24.180
And those are certain frameworks, right?

00:21:24.180 --> 00:21:28.840
It says you will use this web framework, ASP.NET, some variety.

00:21:28.840 --> 00:21:33.120
You'll use this data access framework, entity framework, probably of some variety.

00:21:33.120 --> 00:21:34.160
Now go.

00:21:34.160 --> 00:21:37.400
Like those, you start from the assumption of, well, I'm using these frameworks.

00:21:37.400 --> 00:21:53.220
Now I get decisions about architecture and other things I bring in and how I build, whereas somebody coming from that world into the Python space, I think they're going to have almost a rude awakening, both in a beautiful way, but also not so great, like a paradox of choice.

00:21:53.220 --> 00:21:55.980
So you want to do a project that's a web app?

00:21:55.980 --> 00:21:56.660
Okay.

00:21:56.660 --> 00:21:59.980
First, you begin the web framework selection story.

00:21:59.980 --> 00:22:04.500
Flask, Django, Pyramid, FastAPI, Tornado.

00:22:04.500 --> 00:22:10.760
So like just, and then the next layer down, now we begin the data access layer exploration, right?

00:22:10.760 --> 00:22:11.720
Is it SQLAlchemy?

00:22:11.720 --> 00:22:12.560
Is it SQL model?

00:22:12.560 --> 00:22:14.120
Is it some MongoDB thing?

00:22:14.120 --> 00:22:20.700
Like you just, every step is a, is great in that there's a ton of choice and variety.

00:22:20.700 --> 00:22:26.720
You don't like one, you pick another one, but to get started as an experienced person, that feels like a great option.

00:22:26.720 --> 00:22:33.740
As a brand new person, I think that feels like an impediment and not quite a problem, but almost a problem.

00:22:33.740 --> 00:22:34.400
What do you think?

00:22:34.560 --> 00:22:34.680
Yeah.

00:22:34.680 --> 00:22:37.920
I think it definitely gives you a lot to think about, right?

00:22:37.920 --> 00:22:41.720
Because now you have to wonder, am I making the right choice?

00:22:41.720 --> 00:22:42.740
Right.

00:22:42.740 --> 00:22:42.980
Yeah.

00:22:42.980 --> 00:22:46.720
And not only am I making the right choice, am I making the right choice today?

00:22:47.060 --> 00:22:55.160
And is this choice going to grow with me as whatever I'm building hopefully grows because hopefully all of our projects are successful, right?

00:22:55.160 --> 00:22:56.380
And hopefully it will grow with me.

00:22:56.840 --> 00:23:10.940
And so if you kind of go back again to like that Microsoft thing that you were talking about, like you said, .NET was not originally open source and .NET is a product that was essentially created to make it easier to build things on Windows.

00:23:10.940 --> 00:23:13.820
And now, again, over time, it's become open source.

00:23:13.820 --> 00:23:17.380
And now it's in the cloud and runs on different devices and all those types of things.

00:23:17.380 --> 00:23:21.360
But I keep going back to this because the origin story is important, right?

00:23:21.400 --> 00:23:27.500
Because like you said, Python was almost open source by default from the beginning, right?

00:23:27.500 --> 00:23:34.180
And so like its intent from the beginning was already like, hey, I have a community of people that are going to come and latch on to us.

00:23:34.180 --> 00:23:47.880
And then we're going to kind of just grow organically together versus like I have big company X that's going to throw millions of dollars in developer time and research and all these other things to tell you this is the right way for me to do this.

00:23:47.880 --> 00:23:51.980
Now, I don't think there's a good or a bad way for either one.

00:23:51.980 --> 00:24:00.220
I think at that point it comes down to us or you as a developer to kind of sit down and think about, well, what's really important to me?

00:24:00.220 --> 00:24:03.000
Like, how do I really want to build applications?

00:24:03.320 --> 00:24:08.820
And it's such a funny thing because I like to look at building software like writing a book or like drawing a picture.

00:24:08.820 --> 00:24:13.640
Like you can tell me to write the same app that you write, but you might write it in a different way.

00:24:13.640 --> 00:24:17.640
You might have a different style or different patterns or different tools that you like to do.

00:24:17.640 --> 00:24:23.060
But ultimately, maybe it solves the same problem, but like it looks different because it came from different people.

00:24:23.060 --> 00:24:26.680
Just like, again, like telling a story, drawing a picture, whatever the case is.

00:24:26.980 --> 00:24:38.180
And so for some people, the way that they work and the way that their organization is set up, you might prefer to be able to pick each and every single piece of your stack, right?

00:24:38.180 --> 00:24:47.280
And make it look exactly how you want it to look with the pieces that you want, the frameworks you want, the databases, all that type of stuff.

00:24:47.280 --> 00:24:55.560
Or you can go to Microsoft and do a file new project that you can get ASP.NET, an ADD framework and a right click publish to the cloud.

00:24:56.140 --> 00:24:58.020
And then you could just be like, okay, well.

00:24:58.020 --> 00:25:01.800
And by the way, when you publish to cloud, how many vendors, cloud vendors do you get?

00:25:01.800 --> 00:25:03.320
Usually it's Azure, right?

00:25:03.320 --> 00:25:08.840
I mean, if you're talking about Visual Studio out of the box, it's, you know, published to Azure, right?

00:25:08.840 --> 00:25:13.860
Just being like that, that's another thing that's sort of like strongly encouraged as like one more choice.

00:25:13.860 --> 00:25:16.320
Yeah, that's another thing you have to think about, right?

00:25:16.320 --> 00:25:16.540
Yeah.

00:25:16.540 --> 00:25:21.820
And so now for people that are in that space, like if you're in a space of, hey, I just need the template.

00:25:21.820 --> 00:25:27.900
I need you to tell me like how this thing is structured and like where my dependencies go, how they're defined and how the build process works.

00:25:27.900 --> 00:25:31.860
And all I want to do is just write code and publish, then sure.

00:25:31.860 --> 00:25:34.020
Again, like I said, there's nothing wrong with that.

00:25:34.020 --> 00:25:41.980
But then if you're in a space where you want to control every minute detail of the development process and the libraries and how they plug in,

00:25:42.120 --> 00:25:44.800
maybe you even want to write some of your own libraries, right?

00:25:44.800 --> 00:25:49.180
To like augment some of those additional things that are in there and do some of that type of stuff.

00:25:49.180 --> 00:25:52.440
Then, you know, maybe again, you want to make some different choices.

00:25:52.440 --> 00:26:02.060
You know, one thing that just occurred to me, I think is pretty interesting as a difference here is you talked about the benefit of all these, the tooling, you know, like file a project, boom, it gives you all these things.

00:26:02.060 --> 00:26:15.340
And for people who haven't played with it, you can get like these database visualizers for designers for say the classes that are backing entity framework and things like that.

00:26:15.580 --> 00:26:19.860
The presence of those tools is also kind of a limiting factor.

00:26:19.860 --> 00:26:28.000
Well, you wouldn't choose some other database way of working because you're going to lose access to all those good data integration tools, right?

00:26:28.000 --> 00:26:32.500
Whereas in our space, we don't have those to nowhere near to the same degree.

00:26:33.320 --> 00:26:41.800
And so it doesn't matter so much which tools we pick, whether or not they fit exactly together in that way, because they're not really available.

00:26:41.800 --> 00:26:45.540
So we have more flexibility, I guess, to say like, actually, I like the API of this one better.

00:26:45.540 --> 00:26:55.040
The performance story of this one or maintenance, how lively the GitHub project is, you know, is better on this one, even though it wasn't traditionally like exactly.

00:26:55.380 --> 00:27:03.100
Yeah, I think there's definitely something to be said if you walk into a world where the entire stack is unified.

00:27:03.100 --> 00:27:20.360
And when I say that, I mean, you know, I can go into a place and the programming language runs on the operating system that they built, that runs in the IDE that they built, that runs in the cloud that they built, that runs on the DevOps pipeline, security, whatever, whatever that they built.

00:27:20.360 --> 00:27:21.640
And it all plugs in together.

00:27:21.640 --> 00:27:31.960
And so with that integration, like you said, like you can get a different level of visualization, a different level of reporting and metrics on all of that types of stuff with a lot less work.

00:27:31.960 --> 00:27:41.840
It's not that you can't get it from other places, but it's just a little bit more work to get it, you know, to kind of kind of put those puzzle pieces together to make the world look like how you want it to look.

00:27:41.840 --> 00:27:50.180
Every level is like a decision you have to make and an integration you have to consider as opposed to it just by default clicking together.

00:27:50.300 --> 00:27:56.560
Right. Just like cloud computing. I'm going to bring this up because I have a talk where I talk about something I like to call like the microservice matrix.

00:27:56.560 --> 00:28:03.920
Yeah. And I do. Before you get into that, I do really quickly want to point out last time you were on the show, you were developer relations on the Azure team at Microsoft.

00:28:03.920 --> 00:28:05.780
And now you're at Stripe.

00:28:05.780 --> 00:28:06.540
Now I'm at Stripe.

00:28:06.540 --> 00:28:11.320
Right. We didn't, we didn't point that out. Right. I want to point out that you're not actually at Microsoft anymore.

00:28:11.320 --> 00:28:19.880
Yeah. I'm not at Microsoft anymore. So there's no backgrounds baseball happening here. Like, you know, I'm not sharing anything that, that I know more about than anyone else at this point.

00:28:20.240 --> 00:28:29.160
Yeah. Kind of going back to, if you think about the world of like microservices, because I kind of look at that as like everything that we've already done, just like existing on another level.

00:28:29.160 --> 00:28:59.140
And I'm using that as an analogy when I talk about this microservice matrix, because with everything that you do, you have to make a choice. Right. So like I mentioned before, like, where am I going to store my state, my database? It's like, I have to make a choice. Right. Like, how am I going to do metrics and monitoring? I have to make a choice. How do I know what my services are? How does my DNS routing situation work? I have to make a choice. How does ingress work? I have to make a choice. How do I do publish, subscribe? Like I have to choose a thing. Right. And so now you're going to make a choice.

00:28:59.140 --> 00:29:09.460
So you're sitting down having to like make some of these decisions about what's the right way for me to compose my app. And then also what are the right combinations of tools that I'm going to compose them with?

00:29:09.540 --> 00:29:27.060
So if we come back now, now to the level of just talking about Python and .NET, again, it's a very similar thing where you could just say, hey, just give me the menu, right? The GUI, like file new block. And there's a thing. Or I can sit down and I could fine tune and optimize my application to perfection.

00:29:27.060 --> 00:29:41.620
Or what we consider to run and work and have the right integrations of things that I wanted to have. And like I was saying, like, there's no wrong way. It's just a matter of like, for your business and what you're trying to do, like, what do you think makes the most sense?

00:29:41.620 --> 00:29:57.100
Yeah. It certainly is an interesting difference. Now, I do think there are more opinionated paths, we would call them in the Python world that you can choose. For example, you could say, and many people do, like, let me just use Django.

00:29:57.240 --> 00:29:58.240
Sure.

00:29:58.240 --> 00:30:15.000
Right. And you choose Django, it's very much this sort of holistic, click together stack that we spoke about, right? Like the data access layer is the Django ORM. The database is relational. You put it in something that could be SQL server, but more likely it's Postgres. There you go.

00:30:15.000 --> 00:30:15.200
Yeah.

00:30:15.200 --> 00:30:26.880
Right. But I personally very much appreciate the ability to look at all those options and go, no, no, for this one, I want to use FastAPI and Beanie rather than Django and Django ORM.

00:30:26.880 --> 00:30:35.400
And that's what I'm saying, like, depending on what your goals are. So I know for you, you have your top Python websites and your courses, and I believe you all have a mobile app too, right?

00:30:35.400 --> 00:30:38.100
Yeah, we do. That's actually Xamarin. Shout out to the shirt, man.

00:30:38.100 --> 00:30:39.100
I didn't know that. That's cool.

00:30:39.100 --> 00:30:43.260
The APIs are all Python, but the front end, like, mobile app itself is Xamarin.

00:30:43.260 --> 00:30:43.740
It's all Xamarin.

00:30:43.740 --> 00:30:44.140
Okay.

00:30:44.140 --> 00:30:44.460
Yeah.

00:30:44.460 --> 00:30:56.840
So, like, for your web experiences, like, you already know in your mind what your objectives are. So you're like, okay, I'm going to use this database and this caching thing and this thing because I need them to work this way, right?

00:30:56.840 --> 00:31:05.620
Because the thing with having opinions, it's always great to have opinions, but when sometimes someone's opinion just doesn't line up with what you're trying to do.

00:31:06.100 --> 00:31:12.460
But then on the other side, you know, sometimes there's just too many opinions, right? And so now you're like, oh, man, can I choose this or this or that or the other?

00:31:12.460 --> 00:31:12.720
Yeah.

00:31:12.720 --> 00:31:14.940
Like, what's the right puzzle piece for me?

00:31:15.020 --> 00:31:29.960
There's opinions and then there's opinions within a context, right? And there's a very popular article that keeps getting passed around and around. And I'm sure I'm somewhat to blame for this. It's like the title goes something like, you're not Google, you're not Facebook, you're not LinkedIn, you're not Instagram.

00:31:30.640 --> 00:31:34.120
So subtitle, don't design your software like they do.

00:31:34.120 --> 00:31:34.320
Yeah.

00:31:34.320 --> 00:31:49.640
Right. And opinions often mean, I believe this is how code should be written. If this is your general use case, right? And if your use case is really different from that, then those opinions might not just be someone else's opinion.

00:31:49.640 --> 00:32:05.880
They might actually be wrong because they were formed for another situation. I, I believe you're having a relational database and around 100,000 or fewer users a day. But if, if it's significantly different in some other direction, then maybe you should make different choices. Right. And having that flexibility is awesome.

00:32:05.880 --> 00:32:18.060
Yeah, for sure. For sure. And then kind of going back to like what we were talking about a little bit earlier with the tooling, like, like once you've made those choices, now you have to make a choice of like, well, what's the thing that I'm going to build it with?

00:32:18.060 --> 00:32:32.740
So again, on the Microsoft side, you have Visual Studio, which is like a kitchen sink of stuff. So I could, I could look at my databases, I could look at my deployments, I could build, deploy, debug, analyze memory dumps and all these types of things. Right. Again, like big thing.

00:32:32.740 --> 00:32:46.420
Or on the other side, we probably might want to do like some more command line tools, or we might want to grab like a bunch of different tools and kind of put them together. Again, all depending on like what we're trying to do with our use cases. And I think with that too,

00:32:46.480 --> 00:33:03.820
what you notice is that like the culture of either side of those of those languages is a little bit different. So I will tell you as a .NET person, automatically, it is ASP.net. It is any framework, and in a SQL server, automatically. I mean, I'm not going to say 100% of the people do it. But I want to say,

00:33:04.480 --> 00:33:14.200
a lot of people do that, right? That's the default. But I'm sure on the Python side, like the culture is probably different, right? It's probably a little bit of Mongo or Postgres is probably a little bit of

00:33:14.200 --> 00:33:18.300
Blask or Django and probably now FastAPI, because I know that's another popular thing.

00:33:18.820 --> 00:33:30.800
And, you know, whatever other tool they put on top of that, whether it's PyCharm or VS Code, or I know a lot of you, people love them, right? I know you've had a lot of them folks on the show, right? So it could be that too, right?

00:33:30.880 --> 00:33:38.260
But that culture is different. You know what I mean? And so like the expectations about like how software is built is going to just be totally different.

00:33:38.260 --> 00:33:59.200
Yeah. When I opened this segment, I said there were two things that were closely tied together. We covered the one, I think a very similar related parallel here is developers often in the Microsoft space, my experience I've had interacting with them is like, if it's not recommended by Microsoft, or the .NET team or whatever, I don't want it.

00:33:59.200 --> 00:34:10.280
If it's not the product story or the company story that you should use this framework or that, then even if the other one might be better, might not, like it's just, they just don't want to consider it.

00:34:10.280 --> 00:34:10.440
Yeah.

00:34:10.440 --> 00:34:15.080
Which I think is an interesting angle. Like it's very much at odds with the, you have a thousand choices.

00:34:15.080 --> 00:34:24.400
Yeah. For me as a .NET developer, before and during and now after Microsoft, like that's one of those things that's such a hard habit to break.

00:34:24.400 --> 00:34:25.920
Yeah. Do you agree with my assessment?

00:34:25.920 --> 00:34:27.840
I agree with your assessment 100% for sure.

00:34:27.840 --> 00:34:28.060
Okay.

00:34:28.320 --> 00:34:38.240
And I think it's something that particularly when you're living in an open source development world, like all of us are, you know, majority of us languages and tooling and stuff are open source.

00:34:38.240 --> 00:34:42.400
We have to be able to, like developers still have to develop.

00:34:42.400 --> 00:34:43.360
You know what I mean?

00:34:43.360 --> 00:34:48.220
Like, and you can't really expect things to always be given to you all the time.

00:34:48.220 --> 00:34:57.700
So when I say that, I mean like, just because company X doesn't create a thing for you, doesn't mean that there's not a ton of other great options available.

00:34:57.700 --> 00:35:06.500
But again, the culture or the way that .NET developers have been raised, right? If you think about them as, you know, evolving over time.

00:35:06.500 --> 00:35:07.380
Growing up through their career.

00:35:07.380 --> 00:35:08.100
Growing up through their time.

00:35:08.100 --> 00:35:20.900
And the way that they have been raised is that like, I'm going to open Visual Studio on Windows and whatever's in the box. I'm going to use that. I might be one or two or other two other things that like, I'll use. But those things are usually recommended.

00:35:20.900 --> 00:35:27.140
When we think about like JSON.NET as an example, those things are usually recommended from the box.

00:35:27.140 --> 00:35:28.900
And then not going to use that.

00:35:28.900 --> 00:35:29.300
Right.

00:35:29.700 --> 00:35:32.500
They might actually be third party, but they end up getting installed anyway.

00:35:32.500 --> 00:35:32.940
Exactly.

00:35:32.940 --> 00:35:33.260
Right.

00:35:33.260 --> 00:35:35.660
Like a pip dependency effect.

00:35:35.660 --> 00:35:37.200
Like a pip dependency or something like that.

00:35:37.200 --> 00:35:40.960
Or I don't know if you remember back when ASP.NET MVC was a thing.

00:35:40.960 --> 00:35:43.500
Like the first version of it, like it shipped with jQuery.

00:35:44.040 --> 00:35:50.100
And so anytime you did found new project MVC, like you automatically, you had jQuery, you had jQuery validation.

00:35:50.100 --> 00:35:52.500
And I think there was a couple other libraries that were in there.

00:35:52.500 --> 00:35:55.780
I think jQuery UI maybe might've been in there or something else like that.

00:35:55.780 --> 00:35:56.100
Right.

00:35:56.100 --> 00:35:56.360
Yeah.

00:35:56.360 --> 00:36:00.540
But again, like these are the things that like just come out of the box with that, that style.

00:36:00.540 --> 00:36:07.680
And I think what happens with that now is that, and again, this is my opinion, I think it hampers innovation.

00:36:08.100 --> 00:36:15.740
Because now when I look at the Python side, we joke about, oh my gosh, like there's a new Python web framework like every other year or every year or whatever the case is.

00:36:15.740 --> 00:36:22.800
But I could also look at that and seeing, wow, like people are so invested in this ecosystem that they're constantly trying to make it better.

00:36:22.800 --> 00:36:29.420
And they're constantly trying to like pull resources together to create new experiences to improve developer productivity.

00:36:29.420 --> 00:36:33.120
Not to say that people are not trying to do that on the Microsoft side.

00:36:33.120 --> 00:36:37.300
But what I'm saying is that like, if it's not in the box, people are like, I'm not messing with it.

00:36:37.380 --> 00:36:39.560
Versus on the background side, it's like, we'll just make it.

00:36:39.560 --> 00:36:39.820
Sure.

00:36:39.820 --> 00:36:41.700
The realm of possibility is wider.

00:36:41.700 --> 00:36:42.320
Yeah.

00:36:42.320 --> 00:36:42.900
We'll just make it.

00:36:42.900 --> 00:36:43.720
Well, we'll make it together.

00:36:43.720 --> 00:36:44.440
We'll open source.

00:36:44.440 --> 00:36:47.140
And if people like it, now we'll start a community around it.

00:36:47.140 --> 00:36:48.500
And now it's a thing, right?

00:36:48.500 --> 00:36:54.460
Again, like FastAPI and Pedantic and Sanic and like some of those other things that have come up recently.

00:36:54.460 --> 00:36:54.960
Absolutely.

00:36:54.960 --> 00:36:55.940
Okay.

00:36:55.940 --> 00:37:00.220
So one of the things I did want to talk to you about here, I think that's really interesting.

00:37:00.220 --> 00:37:03.300
And FastAPI is a good example of it.

00:37:03.300 --> 00:37:06.740
FastAPI basically exists because as you mentioned,

00:37:06.880 --> 00:37:13.740
Pedantic and some of the new language features of Python 3, 5, 6, 7.

00:37:13.740 --> 00:37:20.940
You know, the somewhat enforced typing information, data classes, those kinds of things.

00:37:20.940 --> 00:37:21.980
The async and await.

00:37:21.980 --> 00:37:25.260
So these are now possible.

00:37:25.260 --> 00:37:30.120
These are these new experiences that can be created from the language.

00:37:30.440 --> 00:37:45.760
But one of the really interesting things about languages, places like C#, or we could just as well say Swift and Apple or other languages, is there's a team of people whose job it is to work on the language.

00:37:46.600 --> 00:37:49.520
Which I think is really interesting.

00:37:49.520 --> 00:37:50.900
It has some very good positives.

00:37:50.900 --> 00:37:53.220
Like there's people who are constantly focused on it.

00:37:53.220 --> 00:37:55.660
I mean, we have the core devs, but they're kind of more broadly focused.

00:37:55.660 --> 00:37:56.940
And sometimes that means the language.

00:37:56.940 --> 00:38:01.580
But in the .NET space, that means the language is always changing.

00:38:02.280 --> 00:38:04.120
Maybe if it doesn't even need to.

00:38:04.120 --> 00:38:06.080
That's my statement.

00:38:06.080 --> 00:38:07.320
You don't have to stay behind that if you don't want.

00:38:07.320 --> 00:38:09.940
But I feel like there's people who are working there.

00:38:09.940 --> 00:38:12.320
And every year there's a new version of the language.

00:38:12.520 --> 00:38:15.740
If there's no new keywords, then what's their job about?

00:38:15.740 --> 00:38:16.060
Yeah.

00:38:16.060 --> 00:38:23.320
So for folks that don't know, .NET as an entire product and family of things has gone through changes over time.

00:38:23.320 --> 00:38:26.540
So when Michael and I first started doing .NET, it was .NET framework.

00:38:26.540 --> 00:38:28.980
And then over time, it became like...

00:38:28.980 --> 00:38:31.220
Back in early 2000s.

00:38:31.220 --> 00:38:31.600
Yeah, for sure.

00:38:31.600 --> 00:38:35.100
And then it evolved into what today is known as .NET Core.

00:38:35.100 --> 00:38:41.900
And I think .NET Core went from 1.1 to 3.1 or something like that.

00:38:42.020 --> 00:38:42.100
Right?

00:38:42.100 --> 00:38:44.380
And then after that, we skipped a number.

00:38:44.380 --> 00:38:45.000
We skipped 4.

00:38:45.000 --> 00:38:45.380
Right?

00:38:45.380 --> 00:38:46.260
I don't know why we skipped 4.

00:38:46.260 --> 00:38:47.120
But we skipped 4.

00:38:47.120 --> 00:38:48.960
And then we went to .NET 5.

00:38:48.960 --> 00:38:51.540
Not .NET Core 5, but just .NET.

00:38:51.540 --> 00:38:52.380
Right?

00:38:52.380 --> 00:38:53.660
So we had .NET Framework.

00:38:53.660 --> 00:38:54.820
We had .NET Core.

00:38:54.820 --> 00:38:56.380
And now we just have .NET.

00:38:56.380 --> 00:38:58.860
Nothing else after it but the number, right?

00:38:58.860 --> 00:38:59.520
.NET 5.

00:38:59.520 --> 00:39:06.440
And what's happened over time now with .NET 5 and 6, 7, and until they decided to call it something else,

00:39:06.440 --> 00:39:10.440
what's happened right now is that it switched to like this yearly release cycle.

00:39:11.520 --> 00:39:13.440
And I'll be honest with you, I don't know how I feel about it yet.

00:39:13.440 --> 00:39:17.300
We're looking at .NET 7 coming up in November.

00:39:17.300 --> 00:39:19.800
So it's really only been, you know, 5 and 6.

00:39:19.800 --> 00:39:22.560
We've had two versions that have been on this yearly release cycle.

00:39:22.560 --> 00:39:27.160
I don't think that's enough time for me to like feel like, you know, see how I feel about it.

00:39:27.160 --> 00:39:28.920
See what the actual effects of that are for sure.

00:39:28.980 --> 00:39:32.860
Well, my initial thoughts are, I don't think we really need to release that quickly.

00:39:32.860 --> 00:39:38.640
Because like you said, one, how many people are going to update every year or even every two years?

00:39:38.640 --> 00:39:39.940
You know what I mean?

00:39:40.000 --> 00:39:45.240
And then as you're pulling out these new features, I often have to think about, well, who is this for?

00:39:45.320 --> 00:39:53.320
Because if one of the goals of your language is adoption or if it's growth or if it's how do I bring new people in by adding new features,

00:39:53.320 --> 00:39:59.800
I can tell you regardless of how many features you add to make it easier, when they go to work,

00:39:59.800 --> 00:40:03.240
they're going to end up in a code base that's going to be 10 years old.

00:40:03.240 --> 00:40:06.500
With three flavors of Lambda expression, that three flavors.

00:40:06.500 --> 00:40:09.440
And it's going to look different and it's going to feel different.

00:40:09.440 --> 00:40:15.020
And their experience is not going to be hello world or a to-do application.

00:40:15.020 --> 00:40:18.720
And so now like the minds, like the mental efforts.

00:40:18.720 --> 00:40:21.640
So now you kind of like have to exist in multiple worlds.

00:40:21.640 --> 00:40:23.540
Like, oh, here's the new cool stuff.

00:40:23.540 --> 00:40:27.020
And if you're lucky, maybe you start in a company that's doing the new cool stuff.

00:40:27.020 --> 00:40:34.800
Or here's like the framework stuff or the older tooling or here's this older version that's, you know, still kind of new,

00:40:34.800 --> 00:40:38.400
but still doesn't have like the things from like six or seven.

00:40:38.400 --> 00:40:43.560
And it's like, well, if I am considering myself a language X developer,

00:40:43.560 --> 00:40:46.260
how many of these new language features do I need to know?

00:40:46.260 --> 00:40:47.300
It's a really good question.

00:40:47.300 --> 00:40:54.260
I mean, let me just give a little bit of background for people who obviously most people listening probably don't work in C#.

00:40:54.460 --> 00:40:57.700
But C#, like Python, has a way to express properties.

00:40:57.700 --> 00:41:00.840
Honestly, C#'s way is way better than Python's.

00:41:00.840 --> 00:41:05.400
There is a way to do Lambda expressions that's very similar across both languages.

00:41:05.400 --> 00:41:09.900
But if you look on the C# way, there's how many ways are there to do properties?

00:41:09.900 --> 00:41:11.300
There's at least four.

00:41:11.300 --> 00:41:17.160
There may be five different pieces of language syntax to accomplish effectively the same thing.

00:41:17.160 --> 00:41:20.280
And there are benefits to argue on some of the newer ones,

00:41:20.280 --> 00:41:23.760
but so much so that there needs to be a fourth, not just three ways to do it.

00:41:23.760 --> 00:41:24.180
You know what I mean?

00:41:24.180 --> 00:41:26.020
Like there's a lot of overhead.

00:41:26.020 --> 00:41:34.500
And my feeling is that the language looks that way because it's a product and there's a team whose job it is to continue to work on that product.

00:41:34.500 --> 00:41:37.460
Whereas like in Python, if it doesn't make sense to add it,

00:41:37.460 --> 00:41:43.680
there's nobody whose yearly review doesn't look so good because they didn't add a new way to do properties.

00:41:43.680 --> 00:41:44.040
Yeah.

00:41:44.040 --> 00:41:45.000
And I agree with you.

00:41:45.060 --> 00:41:49.900
I think that's another thing that I feel like I ever really appreciated about the Python ecosystem.

00:41:49.900 --> 00:41:54.320
Because Python also has like a scheduled cadence of release.

00:41:54.320 --> 00:41:55.420
It's not like, yeah, yeah.

00:41:55.420 --> 00:41:56.420
And it's yearly as well now.

00:41:56.420 --> 00:42:00.640
And it's not like Python hasn't updated the language in like six years or whatever the case is.

00:42:00.640 --> 00:42:05.080
Like you said, like there's async await and, you know, there's new operators and things of that nature.

00:42:05.420 --> 00:42:25.640
But I always find like the additions to language, I think with the exception of maybe type hints, I think that might be a little bit more in your face for a lot of folks if they decide to use it. But if you look at some of the other language features, a lot of the times it happens in the core library and not so much so on the language surface. And then the few that happen in the language surface.

00:42:25.640 --> 00:42:30.380
Yeah, or some package, but you don't have to know about it to consume it, something like that.

00:42:30.380 --> 00:42:54.380
Right. And then the things that happen on the language surface are usually very subtle, right? Like we'll have a whole version and they might add like one operator, right? Or you might add like, again, like a sink away, like we've just added. I mean, it's not really one keyword. It's kind of one keyword. It's one feature. But like, I've added this one big feature, but there's tons of other little fixes in the library and not necessarily like what the syntactic structure of my application looks like.

00:42:54.440 --> 00:43:09.360
And so I kind of feel like, like if you're on modern Python, I'm going to use a term you use, right? If we're on modern Python, and you're, you know, 3.4 or 5 and above, I'm sure when you hit Python 3.9, it's going to look the same, it's going to feel the same, it's going to work the same.

00:43:09.360 --> 00:43:09.580
Yeah.

00:43:09.580 --> 00:43:30.240
Might be some extra things, but you could probably ignore it if you don't, if you don't need it. But then, you know, you should be able to be functional and not have to think too much about like, oh, okay, how do I like plug this thing into this thing? And then, oh, my thing is not compiling anymore because I don't have the old, I don't have the new version, even though I'm not using the new version features and all of that.

00:43:30.240 --> 00:43:43.120
Yeah, it's interesting. And I think that, you know, we use a language as an example, but I think that influence happens across different many things, across like the web frameworks, across the database, across the tooling and so on. All right. A couple of thoughts from the audience here.

00:43:43.120 --> 00:43:43.400
Oh, yeah.

00:43:43.400 --> 00:43:43.940
A lot of people.

00:43:43.940 --> 00:44:09.220
Mr. Hypermatic says, hello, looking sharp. See what I did there? It's loving the shirt. And then Christopher Tyler has a more actual question here. Are the contributors to .NET primarily people who work at Microsoft? Is that the same for C#? Like, what's the open source story on that? So we know in Python, like, there's the core devs, and then there's the sort of everyone else layering, but that's not nearly as extreme as employee, not employee.

00:44:09.220 --> 00:44:29.240
Yeah, I can't talk to the percentages in terms of like, what percentages is Microsoft and what percentage is not. But I can tell you that now that it is open source and it's on GitHub. I mean, there's a tremendous amount of folks that do not work in the company, that not only contribute fixes, but also submit proposals for new features and like all these types of things.

00:44:29.360 --> 00:44:44.860
So I think if you go to, let me see if I can open it up. I think if you go to GitHub slash .NET, and I think if you go to .NET slash C#, I'm not mistaken. No, it's not .C#. It's a, there's a language proposal thing. I don't remember what it's called.

00:44:44.860 --> 00:44:46.440
Runtime, maybe?

00:44:46.440 --> 00:45:02.940
It might be in the runtime. There's a repo in here that you can essentially, you can essentially like submit proposals whenever there's a new version of C# that's coming out. Or, you know, if you want to know, okay, well, I want to, maybe we should change how interfaces work or how do we add records or whatever it is.

00:45:03.440 --> 00:45:07.760
Like there's, there's a repo in here that you can do that. I don't remember what it is at the time. I probably should.

00:45:07.760 --> 00:45:17.820
But what I'm saying is that like, as a person that does not work in the company, you can have like that level of influence and you can have a whole discussion about, hey, this is why I think this is a great feature.

00:45:17.820 --> 00:45:25.020
This is how I think it should look and behave. And this is how I think it would work with some of the existing features that are ready in the language today.

00:45:25.300 --> 00:45:37.440
I love that because that means that now you don't work there. I don't work there. We all don't work there, but we can have like a very open and honest discussion in the public because again, it's on GitHub unless they delete it. But they don't, they don't do that.

00:45:37.440 --> 00:45:37.960
They don't do that.

00:45:37.960 --> 00:45:41.000
It's not like they own GitHub. Oh, wait a minute.

00:45:41.000 --> 00:45:41.940
Uh-oh, uh-oh.

00:45:41.940 --> 00:45:49.120
Well, you see what I'm saying, right? Like you can have that open discussion about like, okay, well, these are some of the things I think make a lot of sense.

00:45:49.120 --> 00:45:54.300
That's really good. And it's certainly a big change that's happened over the last five years there.

00:45:54.960 --> 00:46:05.120
I found it. It's .NET's has C# Lang. So it's not just C#. It's C# L-A-N-G. Yeah. So if you go there, you should be able to, again, it's the language design repo.

00:46:05.120 --> 00:46:10.700
Oh, yeah. The active C# language feature proposals and meetings. And yeah. Interesting.

00:46:10.700 --> 00:46:24.440
Yeah. And I mean, some of those meetings are, they're public on their online. I know Emo. Emo is one of the folks that work on C# in the runtime. Like they do API reviews and all these types of things, live stream it. I don't know if you've ever said that in an API review.

00:46:24.620 --> 00:46:30.140
It's not the most page churning thing to sit down in a lot of computers. But you could have. You are.

00:46:30.140 --> 00:46:39.700
But if you wanted to, like if you're interested in that, if you're interested in language design and compilers and API surface design and those types of things, I think those are great things to do.

00:46:40.100 --> 00:46:44.000
Because I honestly can't think of any other ecosystem that really does that.

00:46:44.000 --> 00:46:49.560
From the perspective of like reviewing the actual API in the public, which I think is a great thing.

00:46:49.560 --> 00:47:03.280
Yeah. One of the things that's interesting about in the public is I try to listen to all sorts of different podcasts and try to keep my finger on the pulse of sort of where technology companies and programming languages and stuff are going.

00:47:03.280 --> 00:47:08.740
So I listen to some Apple podcasts, some Microsoft podcasts, and of course, Python podcasts.

00:47:08.740 --> 00:47:17.060
One of the things I find interesting is when you hear the Apple podcast people talk, it's always about speculation and rumors.

00:47:17.060 --> 00:47:19.220
And there was this leak and there's this thing.

00:47:19.220 --> 00:47:20.460
And what will we get?

00:47:20.460 --> 00:47:24.860
You hear the Microsoft people talk and like, oh, there's a hint of this code word, this project.

00:47:24.860 --> 00:47:26.060
And I think this is happening.

00:47:26.060 --> 00:47:29.700
If that's absent in the Python world, right?

00:47:29.760 --> 00:47:35.920
There's none of this like sort of fortune telling surprise of what's going on.

00:47:35.920 --> 00:47:49.300
I think that's also a big thing that people coming from either the .NET or the sort of Swift space over to Python is that we know really far in advance what's coming and what's not.

00:47:49.300 --> 00:47:59.240
And the more of the fortune telling side happens to land on, well, of these thousand flowers that represent web frameworks, which one do you think is going to continue to gain popularity?

00:47:59.240 --> 00:48:00.080
Right.

00:48:00.080 --> 00:48:00.380
Yeah.

00:48:00.380 --> 00:48:01.160
In that sense.

00:48:01.160 --> 00:48:03.100
That's a pretty big difference to the ecosystem.

00:48:03.100 --> 00:48:03.440
Yeah.

00:48:03.440 --> 00:48:05.760
I think it kind of goes back to what we were talking about before, right?

00:48:05.760 --> 00:48:07.120
In terms of culture, right?

00:48:07.120 --> 00:48:15.000
Like the culture of Python has always been like an open project that we all kind of work on together versus, okay, here's a product from Apple or Microsoft.

00:48:15.000 --> 00:48:17.600
And I'll date myself a little bit.

00:48:17.600 --> 00:48:26.520
Like I remember when you used to have to wait until like magazines came out to like learn about like beta features that have like the little CD in the back.

00:48:26.520 --> 00:48:27.100
Yeah.

00:48:27.100 --> 00:48:27.400
Yeah.

00:48:27.400 --> 00:48:30.620
You might go to a conference or I don't know, go, I don't know, Barnes and Noble or whatever.

00:48:30.620 --> 00:48:31.720
And there'll be a CD.

00:48:31.720 --> 00:48:34.120
Macworld or MSDN or any of these things.

00:48:34.120 --> 00:48:34.340
Right.

00:48:34.340 --> 00:48:36.240
Like there'll be CDs in the back of magazines.

00:48:36.240 --> 00:48:43.160
And that's how a lot of developers back whenever used to be like, oh, okay, this is what's coming out.

00:48:43.160 --> 00:48:44.600
Like, and you'll read about it, right?

00:48:44.600 --> 00:48:54.300
That there wasn't like a YouTube, like YouTube wasn't a thing for like developer videos and, you know, live streaming, all these things that we do now where we can get more immediate feedback.

00:48:54.360 --> 00:48:57.000
Like, you know, it was the magazine's going to go out.

00:48:57.000 --> 00:48:57.800
But then think about it.

00:48:57.800 --> 00:49:01.980
Like how long does it take to print the magazine, press the CD and put it out?

00:49:01.980 --> 00:49:04.240
Like how many things have changed in the product?

00:49:04.240 --> 00:49:05.400
Does that act?

00:49:05.400 --> 00:49:05.800
Right.

00:49:05.800 --> 00:49:10.940
And how far, far back is the editorial schedule versus the writing versus that's months.

00:49:10.940 --> 00:49:11.180
Right.

00:49:11.240 --> 00:49:12.160
It could be months, right?

00:49:12.160 --> 00:49:20.500
So by the time you get that CD, what's actually in the product on that day might be like two months difference, right?

00:49:20.500 --> 00:49:21.980
Like you could have changed all kinds of stuff.

00:49:22.240 --> 00:49:28.740
But what I love, again, about like the culture of where Python has started, like the feedback mechanism is so much faster.

00:49:28.740 --> 00:49:30.260
And it's been like that by default.

00:49:30.260 --> 00:49:30.580
Yeah.

00:49:30.580 --> 00:49:35.660
You know, we're talking about .NET and Microsoft, but like you said, it could be Swift, it could have been Java or whatever the case is.

00:49:36.080 --> 00:49:41.980
Now as these things become open source, now they're understanding, okay, well, like let's shorten the feedback mechanism.

00:49:41.980 --> 00:49:44.480
Let's get more immediate responses on things.

00:49:44.480 --> 00:49:47.440
You know, let's allow folks to like download them and try them out.

00:49:47.440 --> 00:49:58.000
Let's have students that are doing language design and programming language theory, like try our bits out and like work with us and talk about like, oh, okay, well, I learned this in class.

00:49:58.000 --> 00:49:58.900
Now I'm seeing it over here.

00:49:58.900 --> 00:50:00.040
I understand how this works.

00:50:00.040 --> 00:50:02.280
Like let's kind of collaborate a little bit closely together.

00:50:02.280 --> 00:50:06.640
Yeah, it's certainly is a different way of working on it.

00:50:06.640 --> 00:50:10.240
You don't have to wait until the one thing has been released.

00:50:10.240 --> 00:50:10.500
Yeah.

00:50:10.500 --> 00:50:25.340
I was contacted by a guy who was interested in making some proposal around APIs and Python and said, here, I want to propose this PEP, this way of changing Python officially for a new API.

00:50:25.340 --> 00:50:27.020
What do you think about this proposal?

00:50:27.020 --> 00:50:36.260
Well, this is cool, but really, I think the best way to do it would be just make a package that accomplishes the same thing, show that there's traction around it.

00:50:36.260 --> 00:50:41.120
And then you could talk about bringing it back in and sort of like grow it up through the community.

00:50:41.120 --> 00:50:51.520
And if it shows enough value, then all of a sudden you should have this conversation about should it be officially a part of the thing, which is almost the reverse of what you're saying.

00:50:51.520 --> 00:50:51.880
Yeah.

00:50:51.880 --> 00:50:54.400
Again, the thing about projects and products, right?

00:50:54.400 --> 00:51:00.000
Like when you have a product, I'm going to assume you probably have a PM and your PM is probably going to do user research.

00:51:00.000 --> 00:51:00.740
And they're going to do it.

00:51:00.740 --> 00:51:02.160
I bet your PM has a PM.

00:51:02.160 --> 00:51:03.660
Your PM probably has a PM, right?

00:51:03.660 --> 00:51:04.880
To manage all the other PMs.

00:51:04.880 --> 00:51:05.560
Right.

00:51:05.560 --> 00:51:19.340
But what I'm saying is like when you're a product, you have resources financially to be able to do user studies and talk to customers directly and set up meetings and gather analytics and like all of these really cool things, which is great that you could do that.

00:51:19.520 --> 00:51:25.120
But when you're a free open source projects, like what, like your resources, your community, right?

00:51:25.120 --> 00:51:35.220
So like you said, like sometimes you just have to kind of like build up that culture of, hey, well, hey, we're going to release a new version to do switch statements in Python, right?

00:51:35.220 --> 00:51:37.440
Or pattern matching or whatever the case is.

00:51:37.440 --> 00:51:37.860
Yeah, exactly.

00:51:37.860 --> 00:51:42.560
Like let's make it a library first and evolve it into something a little bit more substantial.

00:51:42.560 --> 00:51:47.480
And if people are like, yo, we love this, maybe now like that could become a feature.

00:51:47.480 --> 00:51:53.720
But the downside of that being, again, we don't, you know, there's no money engine behind of it.

00:51:53.720 --> 00:51:54.980
That might take a little while.

00:51:54.980 --> 00:51:58.820
That might take like two or three or four versions before that actually happens.

00:51:58.820 --> 00:52:02.760
Or it might never happen if no one cares enough.

00:52:03.460 --> 00:52:07.760
Someone who's actually a contributor to the project doesn't really, you know, they don't care enough.

00:52:07.760 --> 00:52:11.200
But somebody who's using it, they might really care.

00:52:11.200 --> 00:52:15.980
But it's not going to get there because there's sort of a mismatch and capability of changing it.

00:52:15.980 --> 00:52:24.280
You know, I think one of the big things that's changed recently for us over in Python is that we've had this thing called the developer in residence.

00:52:24.280 --> 00:52:29.900
Which Microsoft, Google, I think also Facebook, which I call the meta.

00:52:29.900 --> 00:52:46.500
I think those three groups, hopefully that's right and exhaustive, have contributed a bunch of money through sponsorships to actually fund one or currently one, but possibly more than one person whose job it is to just sort of work on Python around all the rough edges.

00:52:46.500 --> 00:52:55.300
And that might sound like the language rough edges, but what I mean is like people are submitting PRs or feature requests and nobody has time to really review the PR.

00:52:55.300 --> 00:53:02.760
Like sort of almost project management plus development to just kind of like be the glue that keeps the community working together.

00:53:02.760 --> 00:53:05.000
And I think that that's actually making a big difference.

00:53:05.000 --> 00:53:07.900
That brings it a little bit closer to these things.

00:53:07.900 --> 00:53:11.700
There's somebody whose kind of job it is to bring these features in.

00:53:11.700 --> 00:53:18.040
Yeah. When you think about, again, a project evolving into something really substantial, right?

00:53:18.040 --> 00:53:21.800
Like, and I look at Python as an extremely substantial project.

00:53:21.800 --> 00:53:24.880
At some point, like you're going to need support, right?

00:53:24.880 --> 00:53:30.380
Because now there's like a lot of things that need to get reviewed or fixed or discussed and talked about.

00:53:30.380 --> 00:53:32.080
And like, whose time is that?

00:53:32.080 --> 00:53:33.940
Right? Like who's going to do that?

00:53:33.940 --> 00:53:39.960
Right. But like now when the project is at the point where, well, my business needs this thing to run.

00:53:39.960 --> 00:53:41.480
So you better figure it out kind of thing.

00:53:41.480 --> 00:53:51.160
At that point, like that's why it's so important for like, you know, not even just major corporations, but all of us that use it to find a way to like contribute in whatever way that we can.

00:53:51.160 --> 00:53:55.140
You know, obviously for bigger companies, like again, they could, you know, they could sign the check.

00:53:55.140 --> 00:54:04.820
But for us, can we go ahead and have those discussions and talk about, well, hey, well, these are really useful features that it's useful because of this reason or because of these use cases.

00:54:04.820 --> 00:54:09.000
Or these are scenarios that would help us be more productive, right?

00:54:09.000 --> 00:54:11.220
And again, not just say I want stuff.

00:54:11.220 --> 00:54:16.020
Well, let's have a practical conversation about like, how is it going to make everyone better?

00:54:16.020 --> 00:54:16.760
Right?

00:54:16.760 --> 00:54:17.140
Right.

00:54:17.140 --> 00:54:18.680
There's a whole spectrum of that, right?

00:54:18.780 --> 00:54:25.040
Like it could be just communicating with the project over issues and stuff to say, this is really important.

00:54:25.040 --> 00:54:25.780
Here's our use case.

00:54:25.780 --> 00:54:31.000
It could be, hey, I could actually make a PR on this and contribute a PR to a project you care about.

00:54:31.000 --> 00:54:35.040
Or it could just be, I'm going to write a tutorial because this is really hard to get started with.

00:54:35.040 --> 00:54:35.260
Right?

00:54:35.260 --> 00:54:38.260
There's not, or even just documentation with examples.

00:54:38.460 --> 00:54:38.660
Yeah.

00:54:38.660 --> 00:54:41.160
And you bring up a great example of documentation, right?

00:54:41.160 --> 00:54:44.660
Like I know this is such a cliche thing to say because we've been saying it for years.

00:54:44.660 --> 00:54:52.500
But documentation is such, I don't want to say easy, but it's such a great way to get started in open source, in any open source project.

00:54:53.100 --> 00:54:58.340
Because I'll tell you the folks that are writing the code probably don't have a lot of time to write documentation.

00:54:58.340 --> 00:54:58.800
Yeah.

00:54:58.800 --> 00:55:01.640
And they might not have gotten into the project because they love documentation.

00:55:01.640 --> 00:55:03.720
They might have got in because they really wanted to write the code.

00:55:03.720 --> 00:55:03.980
Right.

00:55:03.980 --> 00:55:13.960
You know, when we think about projects, like just like how every language is good at specific things, people that work on projects are all good at very specific things.

00:55:13.960 --> 00:55:17.380
Because I'm a good engineer doesn't mean I'm going to be a good manager.

00:55:17.380 --> 00:55:22.580
And just because I'm a good engineer doesn't mean I'm going to be a good docs writer and vice versa.

00:55:22.580 --> 00:55:23.620
You know what I mean?

00:55:23.620 --> 00:55:25.820
I might be able to tell you how to do it.

00:55:25.820 --> 00:55:30.400
But the way I communicate that to you, you might be like, yo, dude, I don't have a PhD.

00:55:30.400 --> 00:55:32.820
I don't understand anything you just told me.

00:55:32.820 --> 00:55:33.340
Right.

00:55:33.340 --> 00:55:37.280
Versus like, okay, someone that could kind of sit in the middle and translate.

00:55:37.280 --> 00:55:41.900
Not that we're translating languages, but like, you know, hey, how can I package this in a way?

00:55:41.900 --> 00:55:49.140
How can I put this forward in a way that just makes it more digestible by whatever particular audience of folks that I'm trying to reach out to?

00:55:49.140 --> 00:55:55.100
So again, if we're talking about students or folks in startups or big enterprise companies, like what are the things that are important to them?

00:55:55.100 --> 00:55:56.940
And then how can I communicate that to those people?

00:55:56.940 --> 00:55:57.180
Yeah.

00:55:57.180 --> 00:55:58.060
But again, absolutely.

00:55:58.060 --> 00:56:00.380
You know, when you're a big company, like you could pay for that.

00:56:00.380 --> 00:56:01.880
Like you could pay people to do that.

00:56:01.880 --> 00:56:02.820
Like when you're not.

00:56:02.820 --> 00:56:07.320
You say it's now your job to do this thing and you better do it because you have a manager.

00:56:07.320 --> 00:56:08.040
Yeah, exactly.

00:56:08.040 --> 00:56:08.640
Exactly.

00:56:08.640 --> 00:56:09.200
Exactly.

00:56:09.200 --> 00:56:09.600
Yeah.

00:56:09.600 --> 00:56:10.620
All right.

00:56:10.620 --> 00:56:12.260
We're getting short on time here, Cecil.

00:56:12.260 --> 00:56:17.820
But I do want to talk about one thing that I really admire about the .NET space.

00:56:17.820 --> 00:56:25.380
And I think the reason I admire is I, among other reasons, is I think it really has a lot of relevance for Python people.

00:56:25.380 --> 00:56:29.820
And that is the whole Blazor thing.

00:56:29.820 --> 00:56:30.420
Oh, yeah.

00:56:30.420 --> 00:56:31.280
It's Blazor.

00:56:31.280 --> 00:56:32.500
Is it Blazor.net?

00:56:32.640 --> 00:56:43.640
So one of the things that they did over at the .NET side is they came up with this idea of like a standard core.

00:56:43.640 --> 00:56:50.820
And I've sort of taken a little, an inner essence of .NET that like this is the thing that we should have available everywhere.

00:56:50.820 --> 00:56:54.220
And then there's a bunch of stuff that's irrelevant in certain situations.

00:56:54.220 --> 00:57:00.040
Like, do you really need a UI GUI framework when you're on like a fridge?

00:57:00.040 --> 00:57:00.840
Maybe do that.

00:57:00.840 --> 00:57:04.740
Or, you know, like you're running just as a backend service on Linux.

00:57:04.740 --> 00:57:06.880
You really need a UI framework for that, right?

00:57:06.880 --> 00:57:16.120
And so out of that, to some degree, came Blazor, which is basically the runtime plus the language in the browser.

00:57:16.120 --> 00:57:25.820
And we have that really, really close in things like Pyodide and the core developers have been building CPython really recently for WebAssembly, which is amazing.

00:57:25.820 --> 00:57:38.500
Difference here is this framework has a front-end framework on top of it that is like Vue.js or React, but in C# on the browser.

00:57:38.500 --> 00:57:40.920
And do you want to just riff on that a little bit?

00:57:40.920 --> 00:57:51.660
I think if we had something like this in Python, I mean, this is basically how do you not have to write JavaScript on the front-end and have something really cool in your language and your runtime.

00:57:51.660 --> 00:57:52.120
Yeah.

00:57:52.120 --> 00:57:52.440
Yeah.

00:57:52.440 --> 00:57:53.920
So kind of like what Michael just said.

00:57:53.920 --> 00:58:03.120
So Blazor is the equivalence of React or Vue or Angular, but it's .NET for .NET developers.

00:58:03.120 --> 00:58:06.080
And the cool thing about it, so I guess just a little bit of a backstory.

00:58:06.080 --> 00:58:09.820
So Steve Sanderson, I believe is how you say this last name.

00:58:09.820 --> 00:58:10.000
Yeah.

00:58:10.000 --> 00:58:12.220
So he did a talk at NDC, right?

00:58:12.220 --> 00:58:19.400
One of the NDC conferences where he showed how you can compile the .NET's runtime, right?

00:58:19.400 --> 00:58:22.540
The actual, you know, thing that runs in a virtual machine, right?

00:58:22.540 --> 00:58:23.520
Kind of like what Java does.

00:58:23.520 --> 00:58:27.980
The .NET runtime to actually execute a WebAssembly, right?

00:58:27.980 --> 00:58:32.240
And most modern browsers have like, you know, WebAssembly enabled today.

00:58:32.240 --> 00:58:38.960
So again, assuming that you update your browsers, put them on auto-update, like you shouldn't really have to do a lot to just get that kind of stuff to work.

00:58:39.220 --> 00:58:46.740
And so now that means, okay, well, if I can ship the runtime into the browser, that means I can run the language in the browser, right?

00:58:46.740 --> 00:58:47.480
Which is really cool.

00:58:47.480 --> 00:58:55.940
And so what Blazor Canada is, if you're familiar with .NET and you know what Razor syntax is, like from MVC days.

00:58:56.160 --> 00:58:58.580
It's like a Jinja for us.

00:58:58.580 --> 00:58:58.920
Right.

00:58:58.920 --> 00:59:00.340
It's like a templating language, right?

00:59:00.340 --> 00:59:04.640
Like if you understand how that templating language functions, which is essentially C-sharp in code.

00:59:04.800 --> 00:59:07.760
Just like you said, like Jinja is Python and code, right?

00:59:07.760 --> 00:59:09.820
It's Python and HTML, right?

00:59:09.820 --> 00:59:18.300
So once you understand how that world works, now you can take those existing skills that you have and now you could write components that run inside of the browser.

00:59:18.300 --> 00:59:20.760
And they're 100% in the browser, right?

00:59:20.800 --> 00:59:29.380
Because now the runtime, you've just shipped the runtime, kind of like you would like a JavaScript file, like jQuery or whatever the case is, or your web pack bundle the thing, right?

00:59:29.380 --> 00:59:31.260
You build it and you send it to the browser.

00:59:31.260 --> 00:59:32.760
Also now it kind of runs there.

00:59:33.420 --> 00:59:39.560
So that means, and sometimes people don't believe this, but what that means is that you could turn off the internet, right?

00:59:39.560 --> 00:59:41.540
And then your app is still functioning, right?

00:59:41.540 --> 00:59:45.860
Because the functionality is living in the browser inside of Blazor, which I think is really cool.

00:59:45.860 --> 00:59:46.740
I think this is really cool.

00:59:46.740 --> 00:59:55.360
And I don't really care that much for this type of app, say as like in my website, although I see uses there, but Electron.

00:59:55.360 --> 00:59:56.760
You know?

00:59:57.120 --> 00:59:57.560
Right?

00:59:57.560 --> 01:00:12.840
Like if you could get something really rich like this and then turn it into a proper way to ship rich applications that are either progressive web apps or Electron.js apps, then you get a whole new avenue of types of apps that you can write that you wouldn't otherwise be able to.

01:00:12.840 --> 01:00:21.120
So one of the things that the .NET team promised that was going to come out this year, hopefully comes out by the time build happens in May, is .NET MAUI, right?

01:00:21.220 --> 01:00:26.580
Like MAUI, M-A-U-I stands for multi, oh my gosh, Microsoft application UI.

01:00:26.580 --> 01:00:27.940
Oh my gosh, I don't remember what it is.

01:00:27.940 --> 01:00:28.740
But whatever it is.

01:00:28.740 --> 01:00:29.300
User interface?

01:00:29.300 --> 01:00:29.700
I don't know.

01:00:29.700 --> 01:00:30.600
User interface thing.

01:00:30.600 --> 01:00:36.960
But essentially, MAUI is a way that you could write applications that exist across a lot of different places.

01:00:36.960 --> 01:00:42.880
So if you think about like macOS desktop, Windows desktop, Android, iOS, those types of things.

01:00:42.880 --> 01:00:44.760
But I could have like the single code base.

01:00:44.760 --> 01:00:49.400
Kind of like Xamarin Forms, but like Xamarin Forms, the new like VNX kind of thing.

01:00:49.760 --> 01:00:58.980
I bring that up because one of the things that they promised that we could do in MAUI is have a Blazor view, which essentially is Blazor running in MAUI.

01:00:58.980 --> 01:01:11.160
So that means that like if I write a thing in Blazor, like my Blazor components that run on the web and do the thing, that means that I should be able to have that code exported and like embedded inside of an app.

01:01:11.160 --> 01:01:14.540
And now that app could run across all those other places as well.

01:01:14.540 --> 01:01:15.220
Right?

01:01:15.220 --> 01:01:15.780
Interesting.

01:01:16.160 --> 01:01:20.120
Think about the right once run anywhere thing that we've been chasing for decades, right?

01:01:20.120 --> 01:01:23.080
Like we can write the thing in Blazor if we wanted to.

01:01:23.080 --> 01:01:25.960
And now it can run not only in the web, but it can run on mobile.

01:01:25.960 --> 01:01:26.780
It can run on desktop.

01:01:26.780 --> 01:01:29.420
Not just Windows desktop, but also macOS desktop.

01:01:29.420 --> 01:01:30.220
Mobile even.

01:01:30.220 --> 01:01:31.380
The dream of mobile.

01:01:31.380 --> 01:01:31.600
Yeah.

01:01:31.600 --> 01:01:36.040
iPhones, iPads, Samsung tablets, and like all those kinds of cool things.

01:01:36.040 --> 01:01:36.340
Yeah.

01:01:37.180 --> 01:01:37.500
Absolutely.

01:01:37.500 --> 01:01:38.840
All right.

01:01:38.840 --> 01:01:42.640
Well, I think we have to leave it there for our main topic, Cecil.

01:01:42.640 --> 01:01:44.580
But I feel like we have so much more to talk about.

01:01:44.580 --> 01:01:46.120
Like that was so, that won't buy so quickly.

01:01:46.120 --> 01:01:48.900
Maybe we'll come back and do another follow up episode.

01:01:48.900 --> 01:01:50.320
People have a bunch of questions or something.

01:01:50.320 --> 01:01:50.580
Yeah.

01:01:50.580 --> 01:01:52.520
If folks want to know part two, they should let us know.

01:01:52.520 --> 01:01:55.200
Leave a comment on the show or whatever the case is.

01:01:55.200 --> 01:01:55.540
Yeah.

01:01:55.540 --> 01:01:55.700
Yeah.

01:01:55.700 --> 01:01:56.520
Don't bug Michael on Twitter.

01:01:56.580 --> 01:01:59.740
Mostly the best place to leave comments is on the YouTube live stream.

01:01:59.740 --> 01:02:00.080
Okay.

01:02:00.080 --> 01:02:06.680
I turned off the comments on the episode page because they were forcing a bunch of third

01:02:06.680 --> 01:02:08.780
party tracking onto our users.

01:02:08.780 --> 01:02:13.340
And I'm like, ah, I really don't want to have cookie pop-ups and all these things.

01:02:13.340 --> 01:02:13.460
Yeah.

01:02:13.460 --> 01:02:14.540
And I'll just, yes.

01:02:14.540 --> 01:02:18.360
Anyway, no more comments on the episode page, but on the YouTube live stream.

01:02:18.360 --> 01:02:18.720
Absolutely.

01:02:18.720 --> 01:02:22.400
Before we get out of here though, if you're going to write some code, I guess at this

01:02:22.400 --> 01:02:25.220
point, it almost doesn't matter the language of C# or Python.

01:02:25.520 --> 01:02:26.800
What editor are you using?

01:02:26.800 --> 01:02:32.060
I pull out VS Code by default only because, again, I like, I like to focus.

01:02:32.060 --> 01:02:33.160
You know what I mean?

01:02:33.160 --> 01:02:37.580
And then if there's one IDE that can support multiple languages, like that's what I'm going

01:02:37.580 --> 01:02:37.880
to do.

01:02:37.880 --> 01:02:39.520
So VS Code is where I'm going to go.

01:02:39.520 --> 01:02:39.700
Cool.

01:02:39.700 --> 01:02:39.820
Cool.

01:02:39.820 --> 01:02:43.820
And I don't know if you have anything off the top of your head, any Python libraries

01:02:43.820 --> 01:02:44.420
you want to recommend?

01:02:44.420 --> 01:02:45.280
Have you come across any?

01:02:45.280 --> 01:02:46.520
You know, I'll be honest with you.

01:02:46.520 --> 01:02:49.560
I'm sure folks know about this already, so I'm not going to say anything different, but

01:02:49.560 --> 01:02:53.200
I really want to learn about scikit-learn.

01:02:53.200 --> 01:02:55.460
You know, it's a machine learning.

01:02:56.240 --> 01:02:59.520
Library, like I'm sure most of your listeners already know about, but I personally haven't

01:02:59.520 --> 01:03:00.240
played around with it.

01:03:00.240 --> 01:03:04.500
I personally haven't spent too much time at all in that machine learning space.

01:03:04.500 --> 01:03:06.440
But I figured this day I want to try it.

01:03:06.440 --> 01:03:06.640
Yeah.

01:03:06.640 --> 01:03:07.220
I haven't either.

01:03:07.220 --> 01:03:08.400
It seems so magical.

01:03:08.400 --> 01:03:11.700
Like if you could crack it, you'd be able to build just amazing things, right?

01:03:11.700 --> 01:03:12.020
Yeah.

01:03:12.020 --> 01:03:12.240
Yeah.

01:03:12.240 --> 01:03:12.360
Yeah.

01:03:12.360 --> 01:03:12.460
Yeah.

01:03:12.460 --> 01:03:16.220
So I've been playing around with just like doing data visualizations and stuff like that

01:03:16.220 --> 01:03:18.420
with things like Seaborn or Matplotlib.

01:03:18.420 --> 01:03:21.740
That's just me having data, wanting to draw like charts and graphs.

01:03:22.280 --> 01:03:26.040
What I actually want to do is like analyze some of that data using like some of those

01:03:26.040 --> 01:03:26.900
machine learning libraries.

01:03:26.900 --> 01:03:30.820
And, you know, I figured learning a little bit of machine learning is not a bad idea, right?

01:03:30.820 --> 01:03:34.680
And I think that's one of those places that Python really shines.

01:03:34.680 --> 01:03:39.040
The ecosystem that it has within Keras, I think is what one of them is called.

01:03:39.060 --> 01:03:43.600
And you think about PyTorch, you think about all the other really cool data analytics and

01:03:43.600 --> 01:03:44.960
machine learning libraries.

01:03:44.960 --> 01:03:47.000
For me, like it's just automatic.

01:03:47.000 --> 01:03:48.700
Like I'm going to go to Python and I'm going to do that.

01:03:48.700 --> 01:03:49.500
Yeah, absolutely.

01:03:49.500 --> 01:03:49.960
All right.

01:03:49.960 --> 01:03:54.280
Now close us out, you know, especially speaking to the .NET people who I may have dragged into

01:03:54.280 --> 01:03:58.440
this episode, they're thinking of Python.

01:03:58.440 --> 01:03:59.620
Maybe they'll try it out.

01:03:59.620 --> 01:04:00.220
Maybe they won't.

01:04:00.220 --> 01:04:02.500
What would you tell them coming from their C-sharp background?

01:04:02.500 --> 01:04:07.500
If you look at one of those old, older Stack Overflow surveys, they'll always say like

01:04:07.500 --> 01:04:11.120
Python is like the second language for a lot of C-sharp developers.

01:04:11.120 --> 01:04:16.100
Because when you think about it, Python does a great job at allowing you to like execute

01:04:16.100 --> 01:04:18.000
things very quickly, right?

01:04:18.000 --> 01:04:21.960
And so for us, a .NET developer, if I need to analyze something, if I need to like, I don't

01:04:21.960 --> 01:04:26.040
spin up a really quick web server and, you know, just do like some really quick things.

01:04:26.040 --> 01:04:27.060
Prototype something.

01:04:27.060 --> 01:04:27.520
Yeah.

01:04:27.520 --> 01:04:28.860
Just put some data on the internet.

01:04:28.860 --> 01:04:29.120
Yeah.

01:04:29.120 --> 01:04:31.380
It's a great additional tool to have.

01:04:31.380 --> 01:04:33.180
Now, it's more than just a tool.

01:04:33.180 --> 01:04:35.940
But again, like if you're a .NET developer, that's your focus.

01:04:36.420 --> 01:04:40.200
And you need something else to allow you to like move quickly, allow you to experiment,

01:04:40.200 --> 01:04:45.280
allow you to kind of just like explore your world and kind of extend your tool belt a little

01:04:45.280 --> 01:04:45.440
bit.

01:04:45.440 --> 01:04:47.520
I think Python is a great option to do that with.

01:04:47.520 --> 01:04:47.880
Right on.

01:04:47.880 --> 01:04:49.000
Well, thanks for being here.

01:04:49.000 --> 01:04:50.240
It's always fun to talk to you.

01:04:50.240 --> 01:04:53.160
And it's been cool to sort of compare and contrast.

01:04:53.160 --> 01:04:53.500
Sure.

01:04:53.500 --> 01:04:54.500
Thanks for having me, man.

01:04:54.500 --> 01:04:55.480
So I really appreciate it.

01:04:55.480 --> 01:04:55.780
You bet.

01:04:55.780 --> 01:04:56.060
Bye.

01:04:56.060 --> 01:04:56.300
Bye.

01:04:56.300 --> 01:05:00.200
This has been another episode of Talk Python to Me.

01:05:00.200 --> 01:05:02.040
Thank you to our sponsors.

01:05:02.040 --> 01:05:03.640
Be sure to check out what they're offering.

01:05:03.640 --> 01:05:05.060
It really helps support the show.

01:05:05.060 --> 01:05:11.800
Teams using Cast AI see an average of 50% or more savings on their Kubernetes clusters.

01:05:11.800 --> 01:05:14.520
Your friendly cloud giant is making tons of money.

01:05:14.520 --> 01:05:16.140
Don't send them more than you need to.

01:05:16.140 --> 01:05:19.780
So why not scan your cluster to discover how much you could save?

01:05:20.080 --> 01:05:25.120
Visit talkpython.fm/cast AI to get a free optimization report.

01:05:25.120 --> 01:05:27.060
Want to level up your Python?

01:05:27.060 --> 01:05:31.100
We have one of the largest catalogs of Python video courses over at Talk Python.

01:05:31.100 --> 01:05:36.280
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:05:36.280 --> 01:05:38.940
And best of all, there's not a subscription in sight.

01:05:38.940 --> 01:05:41.860
Check it out for yourself at training.talkpython.fm.

01:05:41.860 --> 01:05:43.760
Be sure to subscribe to the show.

01:05:43.760 --> 01:05:46.540
Open your favorite podcast app and search for Python.

01:05:46.540 --> 01:05:47.840
We should be right at the top.

01:05:47.840 --> 01:05:53.020
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:05:53.020 --> 01:05:57.220
and the direct RSS feed at /rss on talkpython.fm.

01:05:57.220 --> 01:06:00.640
We're live streaming most of our recordings these days.

01:06:00.640 --> 01:06:04.040
If you want to be part of the show and have your comments featured on the air,

01:06:04.040 --> 01:06:08.460
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:06:08.460 --> 01:06:10.320
This is your host, Michael Kennedy.

01:06:10.320 --> 01:06:11.620
Thanks so much for listening.

01:06:11.620 --> 01:06:12.780
I really appreciate it.

01:06:12.780 --> 01:06:14.700
Now get out there and write some Python code.

01:06:14.700 --> 01:06:35.580
I'll see you next time.

