WEBVTT

00:00:00.001 --> 00:00:02.480
Are you asked to generate reports for your company's data?

00:00:02.480 --> 00:00:07.360
Has someone suggested that you buy or deploy massive BI software that's expensive,

00:00:07.360 --> 00:00:09.320
closed source, and generally underwhelming?

00:00:09.320 --> 00:00:11.940
Well, it's Redash and Python to the rescue.

00:00:11.940 --> 00:00:15.500
Today you'll meet Eric Framovich, the creator of Redash,

00:00:15.500 --> 00:00:17.920
whose goal is to make your company data-driven

00:00:17.920 --> 00:00:21.560
by connecting to any data source to easily visualize your data.

00:00:21.560 --> 00:00:23.860
Not only is it a cool open source,

00:00:23.860 --> 00:00:27.560
but it's an example of someone taking a successful open source project

00:00:27.560 --> 00:00:29.560
and building a business on top of it.

00:00:30.200 --> 00:00:35.360
This is Talk Python to Me, episode 110, recorded April 27, 2017.

00:00:59.120 --> 00:01:03.440
Welcome to Talk Python to Me, a weekly podcast on Python,

00:01:03.440 --> 00:01:06.500
the language, the libraries, the ecosystem, and the personalities.

00:01:06.500 --> 00:01:08.620
This is your host, Michael Kennedy.

00:01:08.620 --> 00:01:10.620
Follow me on Twitter where I'm @mkennedy.

00:01:10.620 --> 00:01:14.500
Keep up with the show and listen to past episodes at talkpython.fm

00:01:14.500 --> 00:01:17.040
and follow the show on Twitter via at Talk Python.

00:01:17.920 --> 00:01:21.200
This episode has been brought to you by Intel and Hired.

00:01:21.200 --> 00:01:23.840
Be sure to check out what they're offering during their segments.

00:01:23.840 --> 00:01:25.060
It helps support the show.

00:01:25.060 --> 00:01:27.440
Eric, welcome to Talk Python.

00:01:27.440 --> 00:01:28.480
Good to be here.

00:01:28.480 --> 00:01:29.760
Yeah, it's great to have you here.

00:01:29.760 --> 00:01:35.460
It's time to democratize some data and break it free from all the places it's captured

00:01:35.460 --> 00:01:36.960
and use Python to do it, right?

00:01:37.080 --> 00:01:38.000
Yep, yep, yep, yep.

00:01:38.000 --> 00:01:39.140
That's how it started.

00:01:39.140 --> 00:01:40.800
And it's still the mission.

00:01:40.800 --> 00:01:43.340
Like, we're not there yet.

00:01:43.340 --> 00:01:46.640
And it's a lot beyond the technology itself.

00:01:46.640 --> 00:01:48.760
It's also educating people.

00:01:48.760 --> 00:01:50.840
But yeah, that's the goal.

00:01:51.060 --> 00:01:52.120
It's an awesome goal.

00:01:52.120 --> 00:01:54.640
And I'm looking forward to chatting with you about it.

00:01:54.640 --> 00:01:56.500
But before we get into that, let's hear your story.

00:01:56.500 --> 00:01:57.780
How did you get into programming in Python?

00:01:57.780 --> 00:02:04.000
It started over 20 years ago when I got my first PC, which was an XT computer.

00:02:04.000 --> 00:02:08.160
I think there were newer computers at the time, but that's what we could afford.

00:02:08.160 --> 00:02:11.060
And as a kid, there wasn't much to do with it.

00:02:11.060 --> 00:02:17.560
So I started exploring and luckily stumbled at QBasic, which was shipped with DOS at the time.

00:02:17.560 --> 00:02:21.040
And it had a few example programs and games along with it.

00:02:21.040 --> 00:02:26.880
So basically, I just started running them and then messing around with the source code

00:02:26.880 --> 00:02:31.140
and looking what results my changes have been causing.

00:02:31.140 --> 00:02:34.660
So that was my first start with programming.

00:02:34.660 --> 00:02:40.140
Later, I found some older kid at school who was programming during breaks.

00:02:40.140 --> 00:02:44.180
And I was like standing behind him, looking over his shoulder, looking what he's doing,

00:02:44.180 --> 00:02:48.120
catching up new functions and stuff, and then going back home to try.

00:02:48.440 --> 00:02:51.160
And eventually, my parents bought me some books.

00:02:51.160 --> 00:02:54.060
And that's how I really started programming.

00:02:54.060 --> 00:02:59.520
From then, I kept learning, you know, started connecting to the internet, exploring more.

00:02:59.520 --> 00:03:03.120
And I think that I got a bit into web development at the time.

00:03:03.120 --> 00:03:08.520
And then the biggest jump was when I was 18, we have a mandatory army service.

00:03:08.920 --> 00:03:16.440
I was lucky to join one of our intelligence, military intelligence units, where I was becoming a developer.

00:03:16.440 --> 00:03:20.760
And there I was doing stuff that are completely different from what I'm doing today.

00:03:20.760 --> 00:03:27.040
A lot of C++ and hardware interfaces gained a lot of interesting experiences like debugging on a helicopter.

00:03:27.040 --> 00:03:28.440
Debugging on a helicopter.

00:03:28.440 --> 00:03:29.560
How interesting.

00:03:30.520 --> 00:03:31.000
Yeah, yeah.

00:03:31.000 --> 00:03:33.320
It's not, I can't share that much details.

00:03:33.320 --> 00:03:35.880
But yeah, that's, that happened.

00:03:35.880 --> 00:03:42.960
Anyway, when I finished my army service, I got back into the web and web stuff.

00:03:43.240 --> 00:03:53.240
Although I had the chance to do pretty much everything like full stack and mobile development, like native mobile development and anything, whatever the job requires.

00:03:53.240 --> 00:03:54.340
Yeah.

00:03:54.340 --> 00:03:57.040
So, and Python, I think that I started with Python.

00:03:57.040 --> 00:03:58.700
I'm not really sure.

00:03:58.860 --> 00:04:03.140
But definitely, I've been doing Python when Google App Engine was released.

00:04:03.140 --> 00:04:05.660
So, that's around 2008.

00:04:05.660 --> 00:04:09.300
I had some detour in Ruby for a few years.

00:04:09.300 --> 00:04:14.560
But then four years ago, when I joined EverythingMe, I went back to developing mainly in Python.

00:04:14.560 --> 00:04:18.300
Been doing some Go in the past years.

00:04:18.300 --> 00:04:20.760
But there's nothing like Python.

00:04:20.760 --> 00:04:21.640
Yeah, that's right.

00:04:21.640 --> 00:04:24.400
And, okay, so this is interesting.

00:04:24.400 --> 00:04:26.100
You talked about, what was it called?

00:04:26.100 --> 00:04:27.040
EverythingMe?

00:04:27.040 --> 00:04:28.560
Yeah, yeah.

00:04:28.560 --> 00:04:31.640
Yeah, so for a while, you worked at this company called EverythingMe.

00:04:31.640 --> 00:04:36.640
And that was like a launcher app for Android phones.

00:04:36.640 --> 00:04:37.400
Is that right?

00:04:37.400 --> 00:04:37.700
Yeah.

00:04:37.700 --> 00:04:38.880
Yeah, that's right.

00:04:38.880 --> 00:04:39.360
Okay.

00:04:39.360 --> 00:04:41.840
And that was super popular, right?

00:04:41.840 --> 00:04:45.900
Like between 10 and 50 million downloads or something on that scale?

00:04:45.900 --> 00:04:47.180
Yeah, something like that.

00:04:47.180 --> 00:04:48.600
Yeah, that was the scale.

00:04:48.600 --> 00:04:50.440
I don't remember the exact numbers by now.

00:04:50.440 --> 00:04:51.660
But yeah, that was the scale.

00:04:51.660 --> 00:04:53.060
Were you guys using Python there?

00:04:53.060 --> 00:04:56.020
Or was that mostly just things like Swift and Objective-C?

00:04:56.020 --> 00:04:58.340
Or not Objective-C, Java, I guess.

00:04:58.340 --> 00:05:00.800
So yeah, our client was Android only.

00:05:00.800 --> 00:05:02.480
So that's Java.

00:05:02.480 --> 00:05:04.860
But we had a lot of...

00:05:04.860 --> 00:05:10.540
Because probably today we would call it AI-based launcher or whatever the current buzzwords are.

00:05:10.940 --> 00:05:16.380
But it was personalized and it was learning you over time and adapting to you.

00:05:16.380 --> 00:05:18.380
I mean, in various ways in the UI.

00:05:18.380 --> 00:05:23.280
So there was a lot of machine learning and logic on the backend.

00:05:23.720 --> 00:05:25.500
And most of it was in Python.

00:05:25.500 --> 00:05:26.100
And then we had a lot of machine learning and learning.

00:05:26.100 --> 00:05:28.280
Some of our new code was in Go.

00:05:28.280 --> 00:05:30.420
But I had...

00:05:30.420 --> 00:05:31.940
Like I was doing many Python.

00:05:32.180 --> 00:05:41.740
And then that shut down, which is actually a really cool story, which we'll get to in a minute, which kind of gave you an excuse to do something even more cool.

00:05:41.740 --> 00:05:44.300
But it seems like they came back.

00:05:44.300 --> 00:05:44.780
Is that right?

00:05:44.880 --> 00:05:47.160
The application itself had come back.

00:05:47.160 --> 00:05:49.520
It was a bit weird for us.

00:05:49.520 --> 00:05:54.260
But yeah, there was another company that bought the IP, I think, or something like that.

00:05:54.260 --> 00:05:55.980
I'm not really sure about the details.

00:05:55.980 --> 00:05:57.460
But they brought back that.

00:05:57.620 --> 00:06:02.520
Yeah, because I read your Medium post about how when that shut down, you went to work on this project.

00:06:02.520 --> 00:06:06.400
And then I did some research to look at just what that was historically.

00:06:06.400 --> 00:06:08.260
And I'm like, oh, wait, it's still in the Play Store.

00:06:08.260 --> 00:06:09.740
And there's still an active website.

00:06:09.740 --> 00:06:13.060
And okay, I figured somebody must have purchased it.

00:06:13.060 --> 00:06:13.940
Yeah, exactly.

00:06:13.940 --> 00:06:14.420
Okay.

00:06:14.420 --> 00:06:17.460
Well, that brings us to what you're doing today.

00:06:17.460 --> 00:06:20.880
So what are you doing day to day for programming?

00:06:20.880 --> 00:06:22.840
These days I'm working on Redash.

00:06:22.840 --> 00:06:25.420
And I'm working on the three levels.

00:06:25.420 --> 00:06:27.220
One is Redash itself.

00:06:27.480 --> 00:06:28.160
So the code.

00:06:28.160 --> 00:06:31.960
Trying to build the Redash community because it's an open source project.

00:06:31.960 --> 00:06:34.720
So trying to build the open source community around it.

00:06:34.720 --> 00:06:38.920
But it's also the company that I started when everything in me was shut down.

00:06:38.920 --> 00:06:40.940
So I'm also trying to build a company.

00:06:40.940 --> 00:06:44.200
And yeah, so that's my day to day.

00:06:44.200 --> 00:06:46.180
And I'm trying to balance between all of this.

00:06:46.180 --> 00:06:49.860
Usually one of the aspects is suffering more than others.

00:06:49.860 --> 00:06:53.340
But I'm trying to learn over time how to improve the balance.

00:06:53.340 --> 00:06:54.120
That's really cool.

00:06:54.260 --> 00:06:59.960
So one of the things I always love to talk about and share with everybody is how people

00:06:59.960 --> 00:07:04.880
have an open source project and how they, in some way or another, make a business about

00:07:04.880 --> 00:07:05.000
it.

00:07:05.040 --> 00:07:06.240
So I really want to dig into that.

00:07:06.240 --> 00:07:08.920
But before we do, let's talk about just Redash itself.

00:07:08.920 --> 00:07:10.640
What is Redash?

00:07:10.640 --> 00:07:11.860
Where did it come from?

00:07:11.860 --> 00:07:12.780
Things like that.

00:07:12.780 --> 00:07:13.660
Okay, cool.

00:07:13.660 --> 00:07:20.620
So there for me, when, like at some point, when we started, we collected event data, like

00:07:20.620 --> 00:07:22.940
about usage and stuff like that with Splunk.

00:07:22.940 --> 00:07:28.060
You can compare it to Elasticsearch with Kibana, something like that.

00:07:28.060 --> 00:07:35.400
And once we started getting actual usage, it just didn't scale well with the amount of data

00:07:35.400 --> 00:07:36.540
that we started to collect.

00:07:36.600 --> 00:07:41.540
And we've been looking into different alternatives and decided to go with Redshift at the time.

00:07:41.540 --> 00:07:44.420
It was really around the time that Redshift was just introduced.

00:07:44.420 --> 00:07:47.220
It was a bit over four years ago, I think.

00:07:47.220 --> 00:07:47.480
All right.

00:07:47.480 --> 00:07:48.760
Tell us all what Redshift is.

00:07:48.760 --> 00:07:50.260
It's from AWS, right?

00:07:50.260 --> 00:07:50.620
Yeah.

00:07:50.620 --> 00:07:54.860
So basically, it was a mobile app, but you can compare it to Google Analytics, like the data

00:07:54.860 --> 00:07:56.600
that Google Analytics collects.

00:07:57.160 --> 00:08:02.080
So it's the same thing, like a user clicked this button, user swipe left, user swipe right,

00:08:02.080 --> 00:08:04.940
user did that, looked at that, and stuff like that.

00:08:04.940 --> 00:08:10.360
And for us, it was really important because along with Splunk, we've been using Flurry,

00:08:10.360 --> 00:08:13.800
I think, and some of the off-the-shelf analytics products.

00:08:13.800 --> 00:08:20.480
But most of them really didn't work for us because we've been creating quite a unique product.

00:08:20.480 --> 00:08:22.320
Like it's a launcher.

00:08:22.600 --> 00:08:26.980
So it's not an application that you start, do something, and then close it.

00:08:26.980 --> 00:08:29.220
It's something that runs all the time.

00:08:29.220 --> 00:08:35.340
So the concept of session is completely different from how other apps see it or how the off-the-shelf

00:08:35.340 --> 00:08:36.200
products see it.

00:08:36.200 --> 00:08:42.520
So being able to access the raw data gives us a lot of power and ability to really understand

00:08:42.520 --> 00:08:43.800
what people are doing.

00:08:43.800 --> 00:08:45.600
So that was Redshift.

00:08:45.600 --> 00:08:49.220
So you said Redshift is a column store database.

00:08:49.220 --> 00:08:50.300
Column and R, yeah.

00:08:50.300 --> 00:08:51.040
Column and R, yeah.

00:08:51.300 --> 00:08:55.740
Which is not necessarily the same as a standard relational database.

00:08:55.740 --> 00:08:59.340
It's not a document or key value store type of database.

00:08:59.340 --> 00:09:00.180
Yes.

00:09:00.180 --> 00:09:01.340
How would you describe that?

00:09:01.340 --> 00:09:03.400
Like what does it mean to be a column or a database?

00:09:03.400 --> 00:09:04.880
Redshift has two properties.

00:09:04.880 --> 00:09:07.020
One of them is that it's columnar.

00:09:07.020 --> 00:09:12.220
And what it means is quite easy to understand is that it stores data in columns.

00:09:12.220 --> 00:09:17.780
So when you write a row, it takes each column and stores them, each one of them, along with

00:09:17.780 --> 00:09:19.660
the other values of that column.

00:09:19.660 --> 00:09:23.160
And what it allows, it allows for easier compression.

00:09:23.760 --> 00:09:26.860
Like it can really compress your data really well.

00:09:26.860 --> 00:09:30.940
Because think of like if you have a column which is a boolean.

00:09:31.540 --> 00:09:36.480
So it's super easy to compress it if you have only these booleans versus if you store them

00:09:36.480 --> 00:09:36.980
by rows.

00:09:36.980 --> 00:09:43.100
Because then it gets harder to compress this row because it has all the different kinds

00:09:43.100 --> 00:09:43.500
of data.

00:09:44.020 --> 00:09:47.300
And this compression both saves you space.

00:09:47.300 --> 00:09:51.120
And when you're dealing with large, large amount of data, it's important.

00:09:51.120 --> 00:09:58.440
But it also makes processing much, much faster because you need to load smaller amounts of

00:09:58.440 --> 00:09:59.340
data each time.

00:09:59.340 --> 00:10:05.760
The other property of Redshift is it's I think the term is MPP is massively parallel.

00:10:05.760 --> 00:10:07.860
What's the other P?

00:10:07.860 --> 00:10:08.800
I don't remember.

00:10:08.800 --> 00:10:10.620
Massively parallel.

00:10:10.620 --> 00:10:11.820
That's just them.

00:10:11.820 --> 00:10:13.300
So why MPP?

00:10:13.460 --> 00:10:14.980
Massively parallel processing maybe.

00:10:14.980 --> 00:10:15.720
Yeah, exactly.

00:10:15.720 --> 00:10:16.700
Yeah, you're right.

00:10:16.700 --> 00:10:23.980
They have, like when you run a query on Redshift, they compile binary code from it, from your

00:10:23.980 --> 00:10:24.320
query.

00:10:24.320 --> 00:10:27.520
Distribute this code to all the nodes in your cluster.

00:10:27.520 --> 00:10:33.920
And then each node runs the query and then the master node aggregates it all.

00:10:33.920 --> 00:10:38.140
So it's all sophisticated ways to process large amounts of data.

00:10:38.140 --> 00:10:41.500
That's cool when you're processing large amounts of data.

00:10:41.660 --> 00:10:47.180
It's not cool when you have small tables because then the penalty of like waiting for the compilation

00:10:47.180 --> 00:10:53.580
step and all that is like it's too high compared to if you just ran this query on a normal database.

00:10:53.580 --> 00:10:56.700
So you need to know when you should use it and when not.

00:10:57.180 --> 00:10:58.700
But it's a great tool.

00:10:58.700 --> 00:11:04.500
If you like on the Google side, you have BigQuery, which is again a columnar database.

00:11:04.500 --> 00:11:13.660
But BigQuery has the advantage that it's you might call it serverless because with Redshift, you need to decide what the size of cluster you have.

00:11:13.700 --> 00:11:15.220
You need to maintain it.

00:11:15.220 --> 00:11:18.340
You need to vacuum your data like you do with Postgres.

00:11:18.340 --> 00:11:23.380
With BigQuery, you don't have all this hassle that you just load that into it, run your queries.

00:11:23.380 --> 00:11:25.100
You don't worry about anything.

00:11:25.100 --> 00:11:26.420
Google takes care of it.

00:11:26.420 --> 00:11:30.360
It comes with the downside that you pay per query.

00:11:30.360 --> 00:11:38.680
They have an interesting pricing model where you need to pay basically based on the amount of data that your query is scanning.

00:11:38.680 --> 00:11:47.360
So you need to be really aware what your query is doing and what columns you're picking to query and stuff like that.

00:11:47.360 --> 00:11:53.160
That is an interesting business model to like, as your code runs less efficiently, you pay more.

00:11:53.160 --> 00:11:56.820
But that's a pretty straightforward way to, I mean, that's how you use it up, right?

00:11:56.820 --> 00:11:57.680
Yeah, exactly.

00:11:57.680 --> 00:12:04.580
And the thing is that while it's not straightforward this way, with Redshift, it's practically the same.

00:12:04.580 --> 00:12:09.620
Because if you write a BigQuery, you're waiting longer time, you take more resources off your cluster.

00:12:09.620 --> 00:12:13.860
So you will end up eventually having to buy a larger cluster.

00:12:13.860 --> 00:12:15.400
So it means it costs you more.

00:12:15.640 --> 00:12:22.200
It costs you in human hours, like when your analyst is staring at the screen and waiting for his query to return.

00:12:22.200 --> 00:12:27.960
So it's less explicit, but it's practically the same thing.

00:12:27.960 --> 00:12:33.560
But obviously, from a financial standpoint, it's much easier to say, OK, we have this and that budget.

00:12:33.560 --> 00:12:36.260
That's the kind of cluster that we're going to buy.

00:12:36.260 --> 00:12:41.660
And that's it versus BigQuery where you, OK, I'm not sure how much it's going to cost me.

00:12:41.660 --> 00:12:42.880
Let's hope it will be OK.

00:12:42.880 --> 00:12:44.740
Yeah, it's definitely harder to predict.

00:12:45.140 --> 00:12:47.260
But OK, very interesting.

00:12:47.260 --> 00:12:47.880
All right.

00:12:47.880 --> 00:12:55.580
So you said, look, we have this high performance, massive scale database and sort of regardless of which one you choose.

00:12:55.580 --> 00:12:57.940
And we have all this data coming in.

00:12:57.940 --> 00:13:03.660
And you're like, well, now we want to look at it and query it and do reports on it and things like that, right?

00:13:03.660 --> 00:13:04.400
Yes, exactly.

00:13:04.560 --> 00:13:05.560
So we had this project.

00:13:05.560 --> 00:13:13.740
So we had this project of, OK, let's start piping our data into Redshift and to understand how we should do it and all that.

00:13:13.740 --> 00:13:19.780
And when we started to get to the finish point of this, we said, OK, we're starting to have data in Redshift.

00:13:20.180 --> 00:13:21.420
What are we going to do with it?

00:13:21.420 --> 00:13:30.940
And we've been really spoiled by Splunk because Splunk has a really good user interface that allows you to query the data that you send into it.

00:13:30.940 --> 00:13:34.880
And they have their own language that some people like it, some others not.

00:13:35.020 --> 00:13:41.980
I didn't use it enough to form an opinion, but it was obviously lacking with Redshift because Redshift is just a database.

00:13:41.980 --> 00:13:44.020
They don't handle the UI.

00:13:44.020 --> 00:13:50.840
And at this point, we decided, OK, let's look at what the big boys are using.

00:13:50.840 --> 00:13:53.100
Let's find the BI tool.

00:13:53.100 --> 00:13:59.440
And we looked at Tableau, Yellowfin and maybe some others, but all of them failed with Redshift.

00:13:59.440 --> 00:14:07.660
They might be great tools for traditional BI, let's call it, but with Redshift, what we've been doing at the time and probably many others doing,

00:14:07.660 --> 00:14:14.960
we had a huge table, which being our raw events data, and we wanted to start running queries on top of it.

00:14:14.960 --> 00:14:19.200
And it's something that's super hard to do with tools like Tableau or Yellowfin.

00:14:19.200 --> 00:14:25.380
I think that they improved over the years and adapted to support better tools, databases like Redshift.

00:14:25.820 --> 00:14:33.540
But it's definitely not the same thing as being able just to open an editor, write your query and run it on top of the table.

00:14:33.540 --> 00:14:36.780
We tried to find a tool.

00:14:36.780 --> 00:14:46.040
And at the same time, because we started already collecting data, anyone who wanted access to this data, we just created a user in Redshift,

00:14:46.040 --> 00:14:50.680
told him to connect with any SQL client that he likes.

00:14:51.160 --> 00:14:56.640
And people started inquiring for data, getting results and sharing them.

00:14:56.640 --> 00:15:03.680
But the way they've been sharing them is basically sending CSV or Excel files over email, which is okay.

00:15:03.680 --> 00:15:09.420
But then you get into questions like, okay, we see an issue in the data.

00:15:09.420 --> 00:15:11.740
Okay, we see that we have a drop in conversion.

00:15:12.140 --> 00:15:16.680
Now we start with questions like, do we really have an issue?

00:15:16.680 --> 00:15:21.760
Maybe the issue is with the data that we collect, because it's a new pipeline.

00:15:21.760 --> 00:15:25.200
Maybe we have a bug, and it's not really a drop in conversion.

00:15:25.200 --> 00:15:30.240
Or maybe it's just the way the person who wrote this query, he made a mistake.

00:15:30.240 --> 00:15:33.040
And he calculated the conversion wrong.

00:15:33.520 --> 00:15:39.900
So you start reverse engineering the kind of query that he ran, because he obviously, since then, closed his editor.

00:15:39.900 --> 00:15:41.180
He doesn't remember what he did.

00:15:41.180 --> 00:15:43.120
He just has a CSV file to show.

00:15:43.120 --> 00:15:45.400
And it was really, really frustrating.

00:15:45.400 --> 00:15:46.160
I'm sure.

00:15:46.160 --> 00:15:49.100
And you can't even verify it some of the times, right?

00:15:49.100 --> 00:15:51.540
Because the person might not remember exactly what they did.

00:15:51.540 --> 00:15:52.060
Yeah.

00:15:52.200 --> 00:15:52.400
Yeah.

00:15:52.400 --> 00:15:56.680
And this is like an exact true story, where I was reverse engineering.

00:15:56.680 --> 00:15:59.980
I knew what query that person started with.

00:15:59.980 --> 00:16:03.240
So I started with that query, and I'm running it.

00:16:03.240 --> 00:16:05.080
And I see, no, that's not the same numbers.

00:16:05.080 --> 00:16:06.720
Okay, let's change this and that.

00:16:06.720 --> 00:16:07.700
Not the same numbers.

00:16:07.700 --> 00:16:11.120
And then I followed the steps until I got the same numbers.

00:16:11.120 --> 00:16:12.900
And okay, he had a mistake in the query.

00:16:12.900 --> 00:16:18.000
And this is not something like, I had a similar experience in a previous working place.

00:16:18.760 --> 00:16:21.740
So the problem felt familiar.

00:16:21.740 --> 00:16:42.320
And me and our CTO at the time, Joey Simchon, we started talking about, how about if we had a JSFiddle-like UI for queries, where a person can write a query, get the results, and then share this URL with others, where the other person gets both the results, but also the query.

00:16:42.500 --> 00:16:49.680
So that you can see what he did, and maybe understand if it's like, do some peer review.

00:16:49.680 --> 00:16:54.680
And also, if you want to keep digging in, you have the query to start with.

00:16:54.680 --> 00:16:57.200
So we had this idea floating.

00:16:57.200 --> 00:17:00.280
And then we had one of our hackathons.

00:17:00.280 --> 00:17:02.660
And this is when Ridesh was born.

00:17:02.660 --> 00:17:03.020
Nice.

00:17:03.140 --> 00:17:09.480
Yeah, you know you have a good product or idea when it's solving a problem that keeps coming back.

00:17:09.480 --> 00:17:09.960
Right?

00:17:09.960 --> 00:17:11.480
You're like, oh, we've been here before.

00:17:11.480 --> 00:17:13.380
Why is there nothing that actually does this well?

00:17:13.380 --> 00:17:14.040
Yeah, yeah.

00:17:14.140 --> 00:17:20.740
And I think that only after I realized, yeah, that's actually something that I wanted to build back then.

00:17:20.740 --> 00:17:21.520
Hmm, interesting.

00:17:21.520 --> 00:17:32.740
And many people that adopted Redash since then have been telling me, yeah, we built the same thing internally, but we dropped it for Redash because, well, we can't really maintain it for a long time.

00:17:32.740 --> 00:17:35.600
And here's a product that someone's already maintaining and using.

00:17:35.600 --> 00:17:37.460
So let's switch to it.

00:17:37.460 --> 00:17:37.760
Right.

00:17:37.760 --> 00:17:41.120
So Redash kind of is made up of two different parts.

00:17:41.120 --> 00:17:45.280
You've got, like you said, this JS Fiddle-like query editor.

00:17:45.280 --> 00:17:47.380
And it's actually really nice.

00:17:47.380 --> 00:17:52.480
It has auto-completion for the columns and tables and all sorts of stuff, right?

00:17:52.480 --> 00:17:52.780
Yeah.

00:17:52.780 --> 00:17:58.860
It depends on the database that you connect to because not all of them will have support for loading the schema.

00:17:58.860 --> 00:18:03.460
But if it's a connector that supports loading the schema, you will have auto-complete.

00:18:03.960 --> 00:18:07.460
And we have some other features that we adopted over time, like query snippets.

00:18:07.460 --> 00:18:17.600
And you can have parameters inside your query so you can create something more interactive that the end user, let's call it, can play with instead of changing the query every time.

00:18:17.600 --> 00:18:18.020
I see.

00:18:18.020 --> 00:18:21.220
So can you have, like, so the other half of the story is you build the queries.

00:18:21.220 --> 00:18:23.660
The other half is the dashboards and visualizations.

00:18:23.660 --> 00:18:31.700
So on your visualization, could you have, like, a slider that is, like, a number of days you want to average across or something like that?

00:18:31.700 --> 00:18:33.040
And you can slide it and it'll change the query.

00:18:33.260 --> 00:18:37.660
So unfortunately, the parameters are not as slick as a slider or something today.

00:18:37.660 --> 00:18:48.400
So currently, they're just input boxes where you can, the most that you can customize is, like, say, okay, this is a number input box or it's a date input box and the UI will adapt accordingly.

00:18:48.620 --> 00:18:53.020
But it's not as simple as you can't.

00:18:53.020 --> 00:18:57.420
So you can't.

00:18:57.420 --> 00:19:01.820
So you can't.

00:19:01.820 --> 00:19:06.220
So you can't.

00:19:06.220 --> 00:19:10.060
able to give these people a way to create interactive stuff is super important.

00:19:10.060 --> 00:19:13.960
Sure. And being the person who writes that query where they're like, well, I asked for

00:19:13.960 --> 00:19:18.380
one day, but now could you do it for seven days? You know, that's also not fun to be

00:19:18.380 --> 00:19:19.040
doing that, right?

00:19:19.040 --> 00:19:25.940
Yeah, exactly. Although I've seen more than once that people who are not like your traditional,

00:19:25.940 --> 00:19:31.020
someone who, like, obviously developers will know to write queries. Then there are the

00:19:31.020 --> 00:19:35.720
product managers who some of them had some engineering background, they know to write

00:19:35.720 --> 00:19:40.960
queries. But I've seen marketing people learn to write queries just because, well, they

00:19:40.960 --> 00:19:45.540
started with asking someone to write a query for them. And then over time, they started

00:19:45.540 --> 00:19:50.340
picking at the SQL and saying, okay, that's not a frightening, let's change the number of

00:19:50.340 --> 00:19:56.200
days from seven to 14, running the query and hey, I got the results I wanted, that's cool.

00:19:56.200 --> 00:20:01.160
Then the next step is that they, okay, let's just learn SQL and there are some good resources

00:20:01.160 --> 00:20:07.160
online to learn SQL. They learn SQL, then they feel really empowered because now they can

00:20:07.160 --> 00:20:13.600
have direct access to the data without anyone in the middle. It creates some issues sometimes

00:20:13.600 --> 00:20:21.580
because many times the company's organizations actually won't have a clear schema of the data.

00:20:21.580 --> 00:20:24.180
The data model is not that obvious.

00:20:24.340 --> 00:20:28.280
Especially on these event streams, right? Where you're just like dropping data and that's streaming

00:20:28.280 --> 00:20:28.820
in or something.

00:20:28.820 --> 00:20:34.580
So yeah, so the event stream is definitely hard because it's also harder to, like, every question

00:20:34.580 --> 00:20:40.180
beyond like, okay, how many events we had yesterday, how many unique users and obvious stuff like that

00:20:40.180 --> 00:20:46.940
becomes really complex query. So this is something that I really want to tackle in the future.

00:20:47.160 --> 00:20:52.860
And basically to make it easier to create more sensible models around the data. And I have some

00:20:52.860 --> 00:20:58.020
ideas here, but that's, it will take time to get here. But yeah, so, so it's not that obvious to give

00:20:58.020 --> 00:21:03.280
people a way to play with data. But I think that the fact that in Redash, you can always see the

00:21:03.280 --> 00:21:11.660
querying, always have some peer review. It makes it much more safe, let's call it, to do it. And I see

00:21:11.660 --> 00:21:14.000
really good success stories around this.

00:21:14.000 --> 00:21:20.760
Yeah. And you have the ability to very much JS Fiddle, like to share your queries and, you know,

00:21:20.760 --> 00:21:25.740
save them in the dashboard. And then people can like fork them off and say, I'm going to make a copy

00:21:25.740 --> 00:21:31.120
of this and then I'll tweak it myself and save my version and stuff like that. Right. So that's pretty

00:21:31.120 --> 00:21:31.420
helpful.

00:21:31.420 --> 00:21:37.240
Yep. So basically the flow is that you can write the query, get the results. From here, you can just share

00:21:37.240 --> 00:21:42.320
the table that you got. That's cool. You can access it with an API if you want to connect it to some

00:21:42.320 --> 00:21:46.740
other tool. But you can also visualize it. And there are several types of visualizations.

00:21:46.740 --> 00:21:53.480
The default ones like charts, maps, some Sunkey, WorldCloud and other stuff. And then you can group

00:21:53.480 --> 00:22:00.540
several visualizations into a dashboard. And that's Shareware as well. That's basically the scope of it.

00:22:00.700 --> 00:22:05.540
Yeah, that's cool. And so really, I think, you know, the way people probably perceive it is like,

00:22:05.540 --> 00:22:10.420
here's a site internally we can go to, or I guess it could be public as well, that we can go to and

00:22:10.420 --> 00:22:16.580
it'll show us the stats for our company. If we've got an app or web app, how are people using it? If you

00:22:16.580 --> 00:22:22.280
got sales, like what sales versus leads doing, right? And there's a lot of different ways to visualize it.

00:22:22.360 --> 00:22:26.460
One of the things I saw that you guys had that I really appreciated, because I've had to build it

00:22:26.460 --> 00:22:34.100
before, is cohort analysis for like subscription services, or you know, those those types of things,

00:22:34.100 --> 00:22:38.140
you know, users come and then they fade out. And that was really nice. So you have a lot of nice

00:22:38.140 --> 00:22:43.260
visualizations. And they're pretty interactive. And they look really good. They're certainly things

00:22:43.260 --> 00:22:48.420
like you would be happy to put in front of the CEOs or whatever. And go, here's your dashboard. Enjoy this.

00:22:48.420 --> 00:22:56.320
In many cases, the CEO is the most active user on Redash, like at Everything Me, usually the CEO was

00:22:56.320 --> 00:23:02.280
the one to spot data issues, because he was like, all the time on Redash, and he would spot various

00:23:02.280 --> 00:23:08.600
changes in data. And we had, because we've been using Redshift from the early days. So we had cases

00:23:08.600 --> 00:23:16.000
where a data for a whole day just disappears, and then reappears. So he was spotting that just before

00:23:16.000 --> 00:23:22.900
anyone else. Sure. I live in this. I know this looks weird. I've been watching this for 14 days.

00:23:22.900 --> 00:23:28.920
Yeah. So he was really challenging us to build the better alerting and monitoring mechanism for our

00:23:28.920 --> 00:23:34.160
data flow, so that we can spot it before him. But I know that other companies as well, like the most

00:23:34.160 --> 00:23:38.900
active user is the CEO. And he's like starting his morning, checking from the phone, the stats,

00:23:39.280 --> 00:23:45.280
and then goes to email. So yeah, it's really, it's really nice in that way. And, and really,

00:23:45.280 --> 00:23:52.180
like the visualization is something that we really want to find a way to get more contributions from

00:23:52.180 --> 00:23:59.240
the community. Because this is like a venue for people to really become creative and share stuff

00:23:59.240 --> 00:24:04.580
that they know. And I think that something that really, really, really help with it is if we will

00:24:04.580 --> 00:24:09.560
have some plugin model. So today you need, like, if you want to add a visualization, you need to make

00:24:09.560 --> 00:24:15.180
a pull request to the main repository. And you need like to start the whole project for that, which

00:24:15.180 --> 00:24:20.800
over time became a bit hard. So I think that once we have a plugin model, it might catalyze more

00:24:20.800 --> 00:24:25.660
development around this area. Yeah, I was thinking that a plugin model, I was going to ask you about

00:24:25.660 --> 00:24:27.140
that. That seems like a really good idea.

00:24:27.140 --> 00:24:46.340
We all love Python for its tremendous productivity benefits, but getting the best performance takes

00:24:46.340 --> 00:24:52.480
some work. What if you could get out of the box, easy access to high performance Python? Intel distribution

00:24:52.480 --> 00:24:57.700
for Python developers delivers just that. Get close to 100 times better performance for certain

00:24:57.700 --> 00:25:03.780
functions when using NumPy, SciPy, scikit-learn, linked with optimized native libraries like Intel

00:25:03.780 --> 00:25:08.580
Math Kernel Library, access efficient multi-threading, and Python projects like Numba and Scithon.

00:25:08.580 --> 00:25:15.180
Try the Intel distribution for Python and experience performance today at talkpython.fm/intel.

00:25:15.860 --> 00:25:21.080
And profile your Python and native C, C++ applications for performance hotspots with

00:25:21.080 --> 00:25:25.160
Intel VTune amplifier. With Intel, it's all about performance.

00:25:25.160 --> 00:25:37.700
We also talked about the community. Like if you check out the GitHub repo at github.com slash

00:25:37.700 --> 00:25:44.080
get read dash slash read dash. And when somebody, one of my listeners suggested that I have you on the

00:25:44.080 --> 00:25:48.380
show and that we talk about this, I'm like, okay, this is a pretty cool looking project, but like how

00:25:48.380 --> 00:25:53.420
many people really care about it? And then I went and looked at the GitHub repo and there's like 65,

00:25:53.420 --> 00:26:00.640
almost 6,500 stars. There's like 135 contributors. I'm like, whoa, people are using this a lot. And it

00:26:00.640 --> 00:26:10.920
seems like such a nice alternative to like Microsoft Excel with like some BI plugin or, you know, something

00:26:10.920 --> 00:26:18.760
like that. Or all the various like big corporate commercial things that you have to buy into to

00:26:18.760 --> 00:26:26.380
sort of do your BI dashboard type stuff. Yeah. And most of them are many times will be too complex for

00:26:26.380 --> 00:26:33.760
many use cases and overpriced. So basically they've been like priced let's buy, let's charge as much as

00:26:33.760 --> 00:26:39.740
we can, which is not really friendly for smaller companies or for different economies. Like

00:26:39.740 --> 00:26:45.720
read dash has users really all around the world. And we see like people from Asia, Africa, South America,

00:26:45.720 --> 00:26:51.820
where they have a completely different economy and it's really hard for them to afford all the other

00:26:51.820 --> 00:26:58.120
tools. So being able to like to give them something that's really affordable, like almost free, like

00:26:58.120 --> 00:27:03.440
it's open source. So it's really free except for the, I don't know, the cost of the server really gives

00:27:03.440 --> 00:27:10.440
them a, I don't know, the same playing field as others, which is kind of cool. We have like, besides that,

00:27:10.440 --> 00:27:15.860
we have all the big names that use it and that everyone knows like Amazon Atlassian, Mozilla,

00:27:16.700 --> 00:27:23.040
Cloud, Outbrain and others. But it's really cool for me that I know that it's being used everywhere

00:27:23.040 --> 00:27:29.340
and not just, you know, like in the United States, in the Silicon Valley. And actually I think that in

00:27:29.340 --> 00:27:34.060
the Silicon Valley, probably less popular in many other areas. Right. Cause they have the money to burn

00:27:34.060 --> 00:27:39.300
on whatever they want. Yeah. But it is cool. It's cool that it's used at some of these major tech

00:27:39.300 --> 00:27:45.400
companies. It's also cool that it's enabling places where they're just with nothing possible or much less

00:27:45.400 --> 00:27:53.580
possible before. So you talked about supporting different databases or connectors. You actually

00:27:53.580 --> 00:27:58.320
have a quite a few integrations, you call them. What are some of the integrations that you guys have?

00:27:58.320 --> 00:28:04.600
We started with Redshift and Postgres and basically it's the same thing. It's used like Redshift. You can

00:28:04.600 --> 00:28:09.780
talk to it with a Postgres client. So this was the first connector that we had. I think the second one

00:28:09.780 --> 00:28:17.780
was MySQL and the third one was BigQuery. But since then we had many more and most of them came from as

00:28:17.780 --> 00:28:24.060
contributions from the community. Basically, someone found Redash. He wanted to connect it to his database and

00:28:24.060 --> 00:28:30.960
he created the connector. And I think it's, there are two reasons why it became like this kind of contribution

00:28:30.960 --> 00:28:37.640
became probably because there is a really simple API that you need to implement to add a connector to Redash.

00:28:37.640 --> 00:28:45.480
And also it's like the thing that you must create to be able to connect to your database. So it's been really

00:28:45.480 --> 00:28:50.820
motivating people to do it. So yeah, today it connects to many databases that I never used or heard of before.

00:28:51.140 --> 00:28:53.140
So it's like InfluxDB or Impala?

00:28:53.140 --> 00:28:55.900
It's actually InfluxDB I used.

00:28:55.900 --> 00:28:56.300
Okay.

00:28:56.300 --> 00:28:58.460
But Impala, yeah.

00:28:58.460 --> 00:29:05.460
Yeah, yeah. Cool. And also it connects to like the standard sort of big company ones like Oracle, Microsoft SQL Server.

00:29:05.460 --> 00:29:13.000
You've got MagaDB and MySQL, like what you already mentioned, and Cassandra and some others, right?

00:29:13.360 --> 00:29:23.200
Yeah. And with all of them, you can say, well, let's say with all the SQL ones, you can just write the regular SQL query that you will write for the database.

00:29:23.200 --> 00:29:38.760
Like we don't do any processing on your query. We send it as is. And this is one, this is a decision that allows us to support all these databases so easily because adding a database is just a matter of having proper driver and Python for it.

00:29:38.760 --> 00:29:45.560
And even that's not really a limitation as like Amazon Athena, which is something they introduced recently.

00:29:45.560 --> 00:29:48.920
They released only a JDBC connector for it.

00:29:48.920 --> 00:30:02.500
And basically what I did is write a simple microservice in Java that uses the JDBC driver and exposes an interface that Redash can talk to it.

00:30:02.500 --> 00:30:02.780
I see.

00:30:02.780 --> 00:30:05.900
But most of the others, we just use the Python driver.

00:30:06.080 --> 00:30:17.520
Now, if it's a database, if it's not like, if it's a database like MongoDB, then you just need to write a JSON that describes the query, the MongoDB query.

00:30:17.520 --> 00:30:25.120
And it's almost similar to the syntax that you might use if you wrote the query inside some Mongo shell.

00:30:25.120 --> 00:30:27.120
Not exactly the same, but quite similar.

00:30:27.700 --> 00:30:32.840
But we also use this for other, like we have connector to Google Analytics, for example.

00:30:32.840 --> 00:30:41.220
So again, you write a JSON that describes the data that you want to fetch from Google Analytics and you can get it into Redash.

00:30:41.220 --> 00:30:46.300
Similarly, we have support for Google Spreadsheets, Jira and some other stuff.

00:30:46.300 --> 00:30:54.440
And what this allows is that you can create one dashboard that shows data from the multiple data sources that you have.

00:30:54.440 --> 00:31:00.260
It became quite common these days that many companies will have different type of data sources.

00:31:00.660 --> 00:31:13.820
And it really helps them to be able to just show data from all of them instead of having different silos of UIs that show data from each one or having to build it in-house yourself.

00:31:13.820 --> 00:31:28.380
Right. So maybe you could have like Google Analytics, like a Google Analytics widget on your dashboard right next to, so for web traffic and conversions, right next to like your sales numbers for the day.

00:31:28.380 --> 00:31:31.220
And you could see how those relate potentially or something like that, right?

00:31:31.220 --> 00:31:32.140
Yep. Yep. Yep.

00:31:32.140 --> 00:31:33.900
Nice. Do you have integration with things like Stripe?

00:31:33.900 --> 00:31:54.580
No. And it's something that comes up and maybe in the future we will have, but it's much easier today to just use something like, I don't know, Segment or Stitch, which are companies that give you the service of you connect all these web hooks to them or they just use their REST API, whatever.

00:31:54.580 --> 00:32:02.880
And they can write the data into your database or maybe BigQuery or whatever you want.

00:32:02.880 --> 00:32:05.860
And then it's easy to query that in Reddish.

00:32:05.860 --> 00:32:08.840
I see. Let them handle all the API bits and the callbacks.

00:32:08.840 --> 00:32:17.000
It's not only that. You get also the advantage that you have all the data in one database so you can start joining the data easily.

00:32:17.000 --> 00:32:18.420
Right. Okay.

00:32:18.420 --> 00:32:32.500
And it's something that you can do in the hosted version of Reddish, that you can write a query that runs across different data sources, but it's still not the same thing as having it in the same database and easily manipulating the data.

00:32:32.500 --> 00:32:32.840
Sure.

00:32:32.840 --> 00:32:38.260
So we've talked about a lot of the databases and data sources on the back end.

00:32:38.260 --> 00:32:40.900
What is Redash itself built in?

00:32:40.900 --> 00:32:42.380
It's a Python web app, right?

00:32:42.380 --> 00:32:42.840
Yep.

00:32:42.840 --> 00:32:54.620
Yeah. So it's both Python and JavaScript because it's a single page application. I think there are new names for that today. But basically, the Python side is an API.

00:32:54.620 --> 00:33:01.100
And then there is the front end application that uses this API to present the UI.

00:33:01.100 --> 00:33:08.860
I see. So you've got like a Flask backend. There's a bunch of JSON services. And then you've got what, Angular running on the front end?

00:33:09.060 --> 00:33:18.140
It's a bit embarrassing these days to say it. But yeah, we're using Angular 1. So yeah, when we started, it was quite new and fun. But these days, yeah.

00:33:18.140 --> 00:33:33.160
Isn't that the problem with JavaScript? It's like, we got the most amazing thing. It's just taken off. And like six months later, it's not. Right? There's five other choices. It's hard to really pick a winner. I mean, it's just nobody seems to reign very long in that world.

00:33:33.160 --> 00:33:49.420
Yeah, it's a bit frustrating in this sense. Ember been quite surprising in the sense that they kept just moving ahead. And they've been able to really pick up the good parts of each new iteration of frameworks.

00:33:50.280 --> 00:33:57.840
But it has its own issues in other senses. But it was really impressive to see how Ember just evolved over the years.

00:33:57.840 --> 00:34:02.180
And I think that there is a feeling that things are starting to stabilize.

00:34:02.180 --> 00:34:11.600
That the community is starting to adopt less, like the same tools and start to evolve them instead of, yeah, let's reinvent it again.

00:34:11.600 --> 00:34:21.620
And it seems that React is going to be among the top winners along the side with Vue. I'm not sure how to pronounce it, but it's V-U-E.

00:34:21.620 --> 00:34:21.960
Okay.

00:34:21.960 --> 00:34:27.900
And probably Angular will stay because all the enterprise players that use it.

00:34:27.900 --> 00:34:33.780
But it's probably not going to be the tool of choice for new companies and smaller companies.

00:34:34.280 --> 00:34:43.400
I really like the Angular 2 and by now it's probably Angular 4 syntax is really like, I just don't like how it looks, the API they created.

00:34:43.400 --> 00:34:45.040
But that's just a personal thing.

00:34:45.040 --> 00:34:47.380
So, yeah, we're still with Angular 1.

00:34:47.380 --> 00:34:51.520
I really hope that I could devote the time to migrate to something else.

00:34:51.520 --> 00:35:00.640
But every time it comes up, I need to wear the product manager hat and say, the user doesn't care if it's Angular React or whatever.

00:35:00.640 --> 00:35:03.720
So, let's focus on things that the user cares about.

00:35:03.720 --> 00:35:11.700
Yeah, I mean, it really doesn't matter too much until maybe there are contributors that's like, I would love to contribute, but I'm not writing Angular.

00:35:11.700 --> 00:35:15.740
Or it's really in the way of evolving the product, right?

00:35:15.740 --> 00:35:16.820
Yeah, exactly.

00:35:16.820 --> 00:35:25.960
I'm sure that there are a few things that I can, like, the aspect of attracting new contributors is definitely an issue here.

00:35:25.960 --> 00:35:32.060
Because many people will just stay away from Angular these days and will be bummed by that.

00:35:32.060 --> 00:35:41.580
And I can see some technical challenges that will be much easier, including the plugin model and stuff like that, if we adopted something else.

00:35:41.580 --> 00:35:43.240
What would you pick if you could pick anything?

00:35:43.240 --> 00:35:44.440
It's a good question.

00:35:44.440 --> 00:35:47.920
It will be probably either React or Vue.

00:35:48.600 --> 00:35:52.600
There are some things that I really like about Vue or whatever its name.

00:35:52.600 --> 00:35:53.800
Vue, maybe?

00:35:53.800 --> 00:35:54.220
Yeah.

00:35:54.220 --> 00:35:57.640
Yeah, it's probably pronounced like Vue, but yeah.

00:35:57.640 --> 00:35:58.800
Anyway, V-U-E.

00:35:58.800 --> 00:36:06.020
So, there are many concepts there that I really like, but it seems that most of the mindshare is around React.

00:36:06.020 --> 00:36:21.900
And as an open source project, I think it's important to adopt the more common technologies so it's easy for people to jump in and contribute instead of picking stuff that might make more sense from a technical point of view.

00:36:21.900 --> 00:36:23.700
Yeah, there's really that balance, isn't there?

00:36:23.700 --> 00:36:28.980
I mean, you definitely want to make it as easy as possible for contributors to contribute and extend it.

00:36:29.060 --> 00:36:32.380
Yeah, and in that sense, Angular was really bad choice.

00:36:32.380 --> 00:36:43.440
I remember an instance where someone like a coworker there for me wanted to add some feature, and I started to walk him through the things that he will need to understand to add it.

00:36:43.440 --> 00:36:46.920
And then after like three minutes, I said, you know what?

00:36:46.920 --> 00:36:47.340
Never mind.

00:36:47.340 --> 00:36:48.560
I just implemented myself.

00:36:48.560 --> 00:36:50.580
It will take less time than to explain it.

00:36:50.580 --> 00:36:58.880
On the other hand, there was some internal app that I wrote later on with React, and I wanted someone to help me with a specific component.

00:36:59.040 --> 00:37:03.180
And he didn't even need to look at React documentation.

00:37:03.180 --> 00:37:07.140
He figured out the API from the code that I already had in place.

00:37:07.140 --> 00:37:14.900
So it really reassured this feeling that I had that React has a really good learning curve.

00:37:14.900 --> 00:37:18.660
So even if someone is not familiar with it, it's super easy to understand.

00:37:18.660 --> 00:37:27.160
And it has other issues where it's like the ecosystem around it is a bit complex at this time.

00:37:27.160 --> 00:37:28.960
But yeah, I don't know.

00:37:29.020 --> 00:37:32.660
It will take time until I will have to make this decision again.

00:37:32.660 --> 00:37:35.700
So we'll see how things will shift until then.

00:37:35.700 --> 00:37:38.720
Yeah, maybe someday you can rewrite the front end.

00:37:38.720 --> 00:37:41.760
But for now, there's more to do.

00:37:41.760 --> 00:37:51.500
So one of the things I wanted to talk to you about, make sure that we covered on the show, is when you first started this project, it was an open source project.

00:37:52.780 --> 00:37:56.420
And then recently, we talked about everything me and it's shutting down.

00:37:56.420 --> 00:38:00.940
And that gives you a chance to say, okay, well, if I'm not doing that anymore, now what?

00:38:00.940 --> 00:38:08.960
And you decided to try to take Redash and make it a proper company, as you talked about in the beginning, right?

00:38:09.160 --> 00:38:13.320
I think there are a lot of people working on open source things.

00:38:13.320 --> 00:38:23.000
And it feels to me like the standard way to level up off of open source stuff is to, all right, I've created something.

00:38:23.000 --> 00:38:24.440
Let's just say like Flask.

00:38:24.440 --> 00:38:28.100
I don't actually know how Armin Roeneker works this angle.

00:38:28.100 --> 00:38:29.540
But let's suppose I create Flask.

00:38:29.540 --> 00:38:30.380
Flask is popular.

00:38:30.840 --> 00:38:33.320
So I try to do consulting for Flask projects.

00:38:33.320 --> 00:38:35.460
And that's fine.

00:38:35.460 --> 00:38:38.620
But I feel like in a lot of cases, it doesn't work very well.

00:38:38.620 --> 00:38:42.920
You're still trading in your time for money, which is not always the best thing to be doing.

00:38:42.920 --> 00:38:47.560
So you said like you actually thought through the different business models.

00:38:47.560 --> 00:38:54.260
And right now, you're basically offering, in addition to the free open source version, hosted Redash as a service, right?

00:38:54.260 --> 00:38:55.180
Yeah, that's correct.

00:38:55.180 --> 00:39:00.200
So you want to talk about your thinking through those different business models and whatnot, stuff like that?

00:39:00.200 --> 00:39:00.760
Sure, sure.

00:39:01.240 --> 00:39:11.640
About half a year ago, I did a talk at a local meetup about what I learned from the experience of taking an open source project and turning it into a company.

00:39:11.640 --> 00:39:14.100
And there have been three lessons.

00:39:14.100 --> 00:39:22.880
The first one is that if you want to be able to work on some open source project, like your project, don't start a company.

00:39:22.880 --> 00:39:24.460
That was a mistake.

00:39:24.460 --> 00:39:27.660
And it's like an obvious thing.

00:39:27.660 --> 00:39:30.120
Starting a company has its own challenges.

00:39:30.120 --> 00:39:30.920
It has its own challenges.

00:39:30.920 --> 00:39:33.640
It has its own demands.

00:39:33.640 --> 00:39:36.000
And it's not easy.

00:39:36.000 --> 00:39:42.640
You have to learn about accounting and all sorts of stuff that is, you're not trained in marketing, for example.

00:39:42.860 --> 00:39:44.160
Yeah, so there is that.

00:39:44.160 --> 00:39:53.160
But there is the whole thing of creating a business, which has nothing to do with creating a project or creating a product even.

00:39:53.660 --> 00:39:54.660
Like you have your open source project.

00:39:54.660 --> 00:39:55.660
Like you have your open source project.

00:39:55.660 --> 00:39:56.660
That's cool.

00:39:56.660 --> 00:39:56.780
That's cool.

00:39:56.780 --> 00:40:00.580
But it has nothing to do with creating a business around it.

00:40:00.580 --> 00:40:05.500
And I know that I made mistakes.

00:40:05.500 --> 00:40:09.360
Some of them intentional around the business side of Redash.

00:40:09.360 --> 00:40:17.280
Because the reason I started the company was to make sure that Redash will stay here for the long term.

00:40:17.280 --> 00:40:20.780
So basically, the project doesn't serve the company.

00:40:20.780 --> 00:40:24.200
Like it's not that I'm building a company using the project.

00:40:24.200 --> 00:40:26.620
I'm building the company for the project.

00:40:26.620 --> 00:40:31.360
Like I'm building the company to be able to work on the project for the long term.

00:40:31.520 --> 00:40:35.020
Obviously, I'm also making it for my own self-defense reasons.

00:40:35.020 --> 00:40:40.640
Because like I always wanted to create a company the way I see that it should be.

00:40:40.640 --> 00:40:48.280
But there is some balance where usually you will invest more in the business itself.

00:40:48.280 --> 00:40:52.860
I tipped more towards the project because that was the goal.

00:40:52.860 --> 00:40:58.580
Now, in terms of business model, luckily we can see a lot of open source companies these days.

00:40:59.260 --> 00:41:02.720
And you can see different models they do.

00:41:02.720 --> 00:41:06.660
Many of them actually, if you look into it, they do all of them.

00:41:06.660 --> 00:41:13.940
So basically, you can either like have some dual licensing or two versions.

00:41:13.940 --> 00:41:18.100
Like have some your community version and your enterprise version.

00:41:18.100 --> 00:41:20.600
Something like GitLab.

00:41:20.600 --> 00:41:22.040
Yeah, GitLab is doing.

00:41:22.040 --> 00:41:25.960
So they have their community GitLab version that anyone can download and install.

00:41:25.960 --> 00:41:28.060
And there's the enterprise version of GitLab.

00:41:28.140 --> 00:41:34.600
And these days there are, I think, two flavors of their enterprise version, which you can buy a license for and install them.

00:41:34.600 --> 00:41:35.800
So that's one model.

00:41:35.800 --> 00:41:40.500
There is the model of offering some professional services around your software.

00:41:40.500 --> 00:41:47.520
And there is the model of offering a hosted version of your software, which is something that GitLab is doing as well.

00:41:47.520 --> 00:41:49.580
But it's not their main thing.

00:41:49.800 --> 00:41:55.580
The product that I took inspiration most from is Sentry, which is actually Python as well.

00:41:56.260 --> 00:42:02.480
And I exchanged a few emails with David Kramer, who was really generous with his time and shared some advice.

00:42:02.480 --> 00:42:10.540
And what they're doing is that they have a SaaS offering, which is exactly the same as their open source project.

00:42:10.720 --> 00:42:20.760
When I started, I decided to keep everything open source and offer it as a service as the SaaS offering.

00:42:20.760 --> 00:42:33.800
And basically, the idea is that anyone who doesn't want to manage his own installation of Redash and have the hassle of, like, uptime and keeping up with the upgrades and all this stuff, he can use the hosted version.

00:42:34.020 --> 00:42:41.560
What I learned since then is it takes time to scale a SaaS business, especially when it's not your only focus.

00:42:41.560 --> 00:42:50.680
Like, I'm always, like, juggling between, okay, we have the open source version and I have some production issue with the SaaS and you need to prioritize.

00:42:50.680 --> 00:42:59.180
And also, like, building a SaaS business, again, like, at this point, Redash is good enough to just keep selling it.

00:42:59.180 --> 00:43:03.680
Like, to focus on finding the market, finding the market and blah, blah, blah, blah, blah.

00:43:04.360 --> 00:43:13.440
But because it's also open source, it has to keep moving forward because no one likes, like, a stagnating open source project.

00:43:13.440 --> 00:43:19.160
So there is this balance which is not that easy to maintain, especially with limited resources.

00:43:19.160 --> 00:43:27.520
So besides deciding, like, on this business model, I also decided to keep the company bootstrapped and not raise any money.

00:43:27.520 --> 00:43:30.180
There were different reasons for that.

00:43:30.940 --> 00:43:33.980
Essentially, it's just the thing that I felt most comfortable with.

00:43:35.700 --> 00:43:38.780
This portion of Talk Python to Me is brought to you by Hired.

00:43:38.780 --> 00:43:42.180
Hired is the platform for top Python developer jobs.

00:43:42.180 --> 00:43:47.640
Create your profile and instantly get access to thousands of companies who will compete to work with you.

00:43:47.640 --> 00:43:50.880
Take it from one of Hired's users who recently got a job and said,

00:43:50.880 --> 00:43:54.800
I had my first offer within four days and I ended up getting eight offers in total.

00:43:54.800 --> 00:43:58.020
I've worked with recruiters in the past, but they were pretty hit and miss.

00:43:58.020 --> 00:44:00.860
I tried LinkedIn, but I found Hired to be the best.

00:44:00.860 --> 00:44:05.140
I really like knowing the salary up front and privacy was also a huge seller for me.

00:44:05.140 --> 00:44:07.080
Well, that sounds pretty awesome, doesn't it?

00:44:07.080 --> 00:44:08.940
But wait until you hear about the signing bonus.

00:44:08.940 --> 00:44:12.500
Everyone who accepts a job from Hired gets a $300 signing bonus.

00:44:12.500 --> 00:44:15.520
And as Talk Python listeners, it gets even sweeter.

00:44:15.520 --> 00:44:20.880
Use the link talkpython.fm/Hired and Hired will double the signing bonus to $600.

00:44:20.880 --> 00:44:22.940
Opportunity is knocking.

00:44:22.940 --> 00:44:26.660
Visit talkpython.fm/Hired and answer the door.

00:44:27.780 --> 00:44:30.940
There have been a few local investors who've been really interested.

00:44:30.940 --> 00:44:41.140
And they even had a funny thing that one of our SaaS users, we have an integration with Slack that you can share visualizations from Reddish on Slack.

00:44:41.140 --> 00:44:43.860
And he has a Slack channel with his investors.

00:44:43.860 --> 00:44:48.860
So he started sharing with them KPIs and stuff like that from Reddish in Slack.

00:44:48.980 --> 00:44:52.480
And so his investors saw it and he said like, hey, what's that?

00:44:52.480 --> 00:44:53.320
That looks cool.

00:44:53.320 --> 00:44:54.980
Can you connect me with the founder?

00:44:54.980 --> 00:44:56.060
I might want to invest.

00:44:56.060 --> 00:44:58.320
But I passed that opportunity.

00:44:58.320 --> 00:45:00.440
Yeah, that's a hard decision to make, right?

00:45:00.440 --> 00:45:11.440
But as soon as you take funding, the clock starts ticking for growth and other types of things that are maybe short term and not necessarily where you want to focus.

00:45:11.440 --> 00:45:15.060
Well, it's a long discussion like bootstrap versus VC and all.

00:45:15.060 --> 00:45:19.640
But essentially what I realized is that I prefer to keep it bootstrap.

00:45:19.640 --> 00:45:22.500
So let's just move with it.

00:45:22.500 --> 00:45:25.980
It definitely puts many constraints on what you can do.

00:45:25.980 --> 00:45:29.260
Up to this day, I'm still working mostly alone on it.

00:45:29.260 --> 00:45:32.180
Like full time, I'm the only employee at the company.

00:45:32.180 --> 00:45:36.500
I'm using some freelancers, but full time, I'm the only one.

00:45:36.500 --> 00:45:40.460
I am currently trying to hire another developer.

00:45:41.080 --> 00:45:42.180
But it takes time.

00:45:42.180 --> 00:45:43.880
So it's still only me.

00:45:43.880 --> 00:45:47.180
But hopefully soon there will be another person.

00:45:47.180 --> 00:45:55.100
So do you feel like having your open source project also powering a SaaS company?

00:45:55.100 --> 00:46:01.460
Do you feel like Redash is better because of the exposure and experience you got running the SaaS company?

00:46:01.460 --> 00:46:02.600
Yeah, that's for sure.

00:46:02.600 --> 00:46:07.560
The hosted version of Redash is probably one of the largest deployments of Redash.

00:46:08.120 --> 00:46:15.500
And it allows me both to stress test it and to find weak points in terms of performance and stuff like that.

00:46:15.820 --> 00:46:19.180
But also it gives me visibility into how people use it.

00:46:19.180 --> 00:46:28.660
So as an open source project, you practically have no idea how people use your project, what they do with it, how they use it, what kind of connectors and all that.

00:46:28.820 --> 00:46:36.840
So you need to make decisions really blindly compared to a SaaS business where they have a lot of data that they can collect.

00:46:36.840 --> 00:46:42.180
Yeah, it's not like everything me, for example, which started this whole thing where you have all these stats coming in.

00:46:42.180 --> 00:46:49.720
And now I'm sure you have like all sorts of usage stats on like features, how frequently they're used and the type of errors you run into.

00:46:49.720 --> 00:46:53.400
And you wouldn't get that if it was just cloned off GitHub and run the script.

00:46:53.620 --> 00:46:54.100
Yeah, exactly.

00:46:54.100 --> 00:47:00.980
And so this as well improves the project itself because it allows to make more informed decisions.

00:47:00.980 --> 00:47:06.020
I remember there was one instance where someone wanted to switch just some behavior.

00:47:06.020 --> 00:47:10.040
And it felt to me that what he proposed is not common enough.

00:47:10.040 --> 00:47:12.560
But then I checked the data and I realized that he's right.

00:47:13.040 --> 00:47:22.240
So it really, really helps to be able to see how people use it and to have more direct access to them and to be able to understand what they do with Redash.

00:47:22.240 --> 00:47:38.660
It has some downsides towards the open source project because there are things around the way like the deployment story and stuff like that, that might be investing more into them if it was only a self-hosted solution.

00:47:38.660 --> 00:47:42.220
We still have quite an easy way to deploy Redash.

00:47:42.480 --> 00:47:46.240
Like I maintain images for Amazon and Google Cloud.

00:47:46.240 --> 00:47:48.080
And also there are Docker images.

00:47:48.080 --> 00:47:51.460
So it's not that hard to start using Redash.

00:47:51.460 --> 00:47:57.780
And in the last version, I even added some wizard that allows you to set up the user without having to use the CLI.

00:47:57.780 --> 00:48:03.780
That's eventually improving, but it could move faster if I wasn't also working on the SAS project.

00:48:03.780 --> 00:48:05.820
Yeah, it's easy to see it that way.

00:48:05.820 --> 00:48:18.460
But at the same time, the SAS project lets you put all of your time into this open source project and not do like consulting for a bank where you're building forms over data type web apps.

00:48:18.620 --> 00:48:19.240
Yeah, exactly.

00:48:19.240 --> 00:48:29.840
And at the beginning, I've been doing some custom development, paid custom development for on top of Redash, but still like doing some sort of consulting work.

00:48:30.300 --> 00:48:33.920
While over time, I could focus more on the product itself.

00:48:33.920 --> 00:48:36.120
So it definitely has its benefits.

00:48:36.120 --> 00:48:48.900
And I'm still like it's a recurring thing dilemma for me, like around whether I should invest more in the SAS or should I find a business model around the self-hosted version?

00:48:48.900 --> 00:48:57.280
Because even today, there are much more users who use the open source version, the self-hosted one, than ones who use the SAS version.

00:48:57.280 --> 00:49:02.080
And there are people who even start with the SAS and then like they use the trial of the SAS.

00:49:02.080 --> 00:49:03.020
Oh, that's cool.

00:49:03.020 --> 00:49:05.780
Let's move to the open source one for different reasons.

00:49:05.780 --> 00:49:10.160
Some of them just don't want to open their database to an external company.

00:49:10.160 --> 00:49:12.600
Others are just cheap.

00:49:13.460 --> 00:49:24.420
And I even compared the numbers with Sentry and they said that they see a better ratio between the open source users and the SAS users.

00:49:24.420 --> 00:49:37.800
And I think that part of the reason is the kind of product I'm building where you really need to like give access to your data to another company and many people not feeling comfortable with that.

00:49:38.100 --> 00:49:51.240
So I always like it's a recurring dilemma of whether I should find either another business model or an additional business model where I can offer something to the self-hosted crowd.

00:49:51.240 --> 00:49:56.080
And the obvious thing here is just some kind of an enterprise edition.

00:49:56.340 --> 00:50:03.900
But my concern here is that once I start offering an enterprise edition, there are two problematic outcomes here.

00:50:03.900 --> 00:50:12.320
One is that usually enterprise clients, they're not only buying software, they're also buying support, which means selling services.

00:50:12.320 --> 00:50:12.700
Right.

00:50:12.700 --> 00:50:15.740
What's your SLA and all of that kind of stuff?

00:50:15.740 --> 00:50:15.980
Yeah.

00:50:15.980 --> 00:50:16.460
Yeah.

00:50:16.460 --> 00:50:22.020
And you start deviating into the world of selling hours instead of selling software.

00:50:22.560 --> 00:50:23.500
That's one issue.

00:50:23.500 --> 00:50:29.600
And another issue is that they have completely different demands than what the rest of the users need.

00:50:29.600 --> 00:50:36.600
And then there is the concern of turning Reddish into Jira instead of keeping it as Trello.

00:50:36.600 --> 00:50:47.340
And this is like something that it's a slippery slope where you find yourself with a bloated product because of different bigger clients with weird needs.

00:50:47.340 --> 00:50:51.000
And today it's easier to ignore them because they're not paying you.

00:50:51.000 --> 00:50:56.420
But once most like huge chunk of your revenue comes from them, you need to be more attentive.

00:50:56.420 --> 00:51:02.020
So these concerns keep me on the SaaS model, but it's like a recurring dilemma.

00:51:02.020 --> 00:51:08.680
And I hope that one day I will have a definitive answer here and I will know like, yeah, that's what we're sticking with.

00:51:08.980 --> 00:51:11.700
Yeah, it's not super straightforward, I can tell.

00:51:11.700 --> 00:51:16.480
But I think it's really great that you're making it work on either path.

00:51:16.480 --> 00:51:19.080
And the SaaS one is definitely adding value to the world.

00:51:19.080 --> 00:51:20.940
So nice work.

00:51:20.940 --> 00:51:23.920
And I'm sure it's inspirational to a lot of people to hear it.

00:51:23.920 --> 00:51:24.780
Yeah, I hope so.

00:51:24.780 --> 00:51:25.380
I hope so.

00:51:25.380 --> 00:51:26.280
All right.

00:51:26.280 --> 00:51:30.140
Well, I think we're going to probably have to leave it there more or less for Redash.

00:51:30.320 --> 00:51:34.100
So let me ask you two final questions before I let you out of here.

00:51:34.100 --> 00:51:39.720
When you're working on Redash and you open up an editor, a Python editor, what one is it?

00:51:39.720 --> 00:51:42.240
So until not long ago, it was Atom.

00:51:42.240 --> 00:51:45.360
But recently I started using Sublime again.

00:51:45.360 --> 00:51:47.120
So I guess it's both of them.

00:51:47.120 --> 00:51:49.920
And obviously with Vim mode enabled.

00:51:49.920 --> 00:51:50.760
Yeah, of course.

00:51:50.760 --> 00:51:51.360
Very nice.

00:51:51.960 --> 00:52:00.880
And what out of the 100,000 plus PyPI packages, what one do you think is notable that people maybe don't know of, but they should check out?

00:52:00.880 --> 00:52:02.800
So the first one is PeeWee.

00:52:02.800 --> 00:52:04.460
P-E-E-W-E-E.

00:52:04.460 --> 00:52:05.320
Yeah, exactly.

00:52:05.320 --> 00:52:06.380
It's an ORM.

00:52:06.380 --> 00:52:08.100
It's a Python ORM.

00:52:08.100 --> 00:52:11.540
I think it's not, it should be much more popular than it is.

00:52:11.540 --> 00:52:13.940
I think it's the most Pythonic ORM.

00:52:13.940 --> 00:52:14.920
Yeah, exactly.

00:52:14.920 --> 00:52:20.080
I really don't understand how SQLAlchemy getting more mind share than PeeWee.

00:52:20.320 --> 00:52:24.120
It's really like a mystery to me because PeeWee is much more Pythonic.

00:52:24.120 --> 00:52:32.300
And Redash has been using PeeWee up until like half a year ago when I decided to migrate to SQLAlchemy.

00:52:32.300 --> 00:52:40.000
And no offense to the SQLAlchemy people, but I think that was one of the biggest mistakes of 2016 for me.

00:52:40.000 --> 00:52:41.840
Yeah, I should have stayed with PeeWee.

00:52:41.840 --> 00:52:42.520
How interesting.

00:52:42.520 --> 00:52:43.300
Yeah, you're right.

00:52:43.300 --> 00:52:46.000
The SQLAlchemy definitely gets a lot of the mind share.

00:52:46.000 --> 00:52:47.460
SQLAlchemy is great.

00:52:47.720 --> 00:52:50.500
But I do think also PeeWee is quite cool.

00:52:50.500 --> 00:52:57.660
Basically, you give it Lambda expressions or generator expression type things, and it transforms that into the actual SQL query.

00:52:57.660 --> 00:52:58.640
I think that's glorious.

00:52:58.640 --> 00:53:01.200
Yeah, and just simple to use and fun.

00:53:01.200 --> 00:53:02.020
Yeah, exactly.

00:53:02.200 --> 00:53:08.860
And I also noticed that there's an extension sort of package that will convert it to an asyncio variation.

00:53:08.860 --> 00:53:18.000
So you can basically create async coroutines and use PeeWee queries and await the queries, which is, that's just icing on the cake.

00:53:18.000 --> 00:53:18.420
That's nice.

00:53:18.420 --> 00:53:19.940
Oh, that's kind of cool.

00:53:19.940 --> 00:53:21.020
Yeah, it's very cool.

00:53:21.020 --> 00:53:22.340
So thanks for that.

00:53:22.340 --> 00:53:23.500
Those are awesome recommendations.

00:53:23.980 --> 00:53:28.080
Now, final call to action, like, how do people check out Redash?

00:53:28.080 --> 00:53:29.800
How do they check out the hosted thing?

00:53:29.800 --> 00:53:31.740
What do you need from the community?

00:53:31.740 --> 00:53:32.660
Things like that.

00:53:32.660 --> 00:53:35.980
Go to redash.io and you have all the information there.

00:53:35.980 --> 00:53:41.720
It's super easy to start, either if you go with the hosted version or even if you start with your own deployment.

00:53:41.720 --> 00:53:44.720
It's really a few minutes and you can start curing your data.

00:53:45.320 --> 00:53:48.080
And probably if you have a database, you need Redash.

00:53:48.080 --> 00:53:53.620
And contributions are always welcomed, like both code but also documentation.

00:53:53.620 --> 00:53:56.580
Like, this is something that we're not getting enough of.

00:53:56.580 --> 00:53:59.460
But, yeah, any contribution is eventually welcomed.

00:53:59.460 --> 00:54:00.040
All right.

00:54:00.040 --> 00:54:01.760
Well, sounds good.

00:54:01.760 --> 00:54:02.900
It's definitely a cool project.

00:54:02.900 --> 00:54:04.460
Eric, thank you for sharing it with everyone.

00:54:04.460 --> 00:54:05.700
Thank you for inviting me.

00:54:05.700 --> 00:54:06.060
You bet.

00:54:06.060 --> 00:54:06.280
Bye.

00:54:06.280 --> 00:54:10.760
This has been another episode of Talk Python to Me.

00:54:10.760 --> 00:54:13.780
Today's guest has been Eric Framovich.

00:54:14.220 --> 00:54:17.260
And this episode has been sponsored by Intel and Hired.

00:54:17.260 --> 00:54:23.260
The Intel distribution for Python delivers the high-performance Intel C libraries built right into Python.

00:54:23.260 --> 00:54:29.280
Get close to 100 times better performance for certain functions when using NumPy, SciPy, and scikit-learn.

00:54:29.280 --> 00:54:32.560
Check them out at talkpython.fm/intel.

00:54:32.560 --> 00:54:35.540
Hired wants to help you find your next big thing.

00:54:35.540 --> 00:54:41.980
Visit talkpython.fm/hired to get five or more offers with salary and equity presented right up front

00:54:41.980 --> 00:54:44.120
and a special listener signing bonus of $600.

00:54:45.560 --> 00:54:47.700
Are you or your colleagues trying to learn Python?

00:54:47.700 --> 00:54:50.760
Well, be sure to visit training.talkpython.fm.

00:54:50.760 --> 00:54:56.560
We now have year-long course bundles and a couple of new classes released just this week.

00:54:56.560 --> 00:54:57.540
Have a look around.

00:54:57.540 --> 00:54:59.000
I'm sure you'll find a class you'll enjoy.

00:54:59.000 --> 00:55:01.420
Be sure to subscribe to the show.

00:55:01.420 --> 00:55:03.620
Open your favorite podcatcher and search for Python.

00:55:03.620 --> 00:55:04.860
We should be right at the top.

00:55:05.240 --> 00:55:14.180
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct RSS feed at /rss on talkpython.fm.

00:55:14.180 --> 00:55:19.260
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

00:55:19.260 --> 00:55:25.960
Corey just recently started selling his tracks on iTunes, so I recommend you check it out at talkpython.fm/music.

00:55:25.960 --> 00:55:31.300
You can browse his tracks he has for sale on iTunes and listen to the full-length version of the theme song.

00:55:31.920 --> 00:55:33.380
This is your host, Michael Kennedy.

00:55:33.380 --> 00:55:34.680
Thanks so much for listening.

00:55:34.680 --> 00:55:36.480
I really appreciate it.

00:55:36.480 --> 00:55:38.020
Smix, let's get out of here.

00:55:38.020 --> 00:55:59.580
Outro Music.

00:55:59.580 --> 00:56:00.280
And I'll put it in.

00:56:00.280 --> 00:56:30.260
Thank you.

