WEBVTT

00:00:00.001 --> 00:00:02.440
How do you test whether your websites are working well?

00:00:02.440 --> 00:00:09.100
Unit tests are great, but for web apps, the number of pieces that have to click together just so are many.

00:00:09.100 --> 00:00:18.380
You have databases, server code, such as your Flask app, server templates like Jinja, CSS, JavaScript, and even deployment topologies.

00:00:18.380 --> 00:00:20.240
Think Nginx and UVicorn.

00:00:20.240 --> 00:00:24.820
Unit tests won't cover all of that integration, but Playwright does.

00:00:24.820 --> 00:00:34.900
Playwright is a modern Pythonic take on testing web apps using code driving a browser core engine to interact with web apps the way real users and API clients do.

00:00:34.900 --> 00:00:36.660
I think you'll find a lot to like here.

00:00:36.660 --> 00:00:41.080
And we have Pandy Knight from Automation Panda here to break it down for us.

00:00:41.080 --> 00:00:47.160
This is Talk Python to Me, episode 369, recorded May 12, 2022.

00:00:47.160 --> 00:01:03.560
Welcome to Talk Python to Me, a weekly podcast on Python.

00:01:03.560 --> 00:01:05.280
This is your host, Michael Kennedy.

00:01:05.280 --> 00:01:11.460
Follow me on Twitter where I'm @mkennedy and keep up with the show and listen to past episodes at talkpython.fm.

00:01:11.460 --> 00:01:14.520
And follow the show on Twitter via at Talk Python.

00:01:14.720 --> 00:01:18.200
We've started streaming most of our episodes live on YouTube.

00:01:18.200 --> 00:01:25.720
Subscribe to our YouTube channel over at talkpython.fm/youtube to get notified about upcoming shows and be part of that episode.

00:01:25.720 --> 00:01:30.120
This episode is sponsored by Microsoft for Startups Founders Hub.

00:01:30.120 --> 00:01:35.880
Check them out at talkpython.fm/founders hub to get early support for your startup.

00:01:35.880 --> 00:01:39.400
And it's brought to you by Compiler from Red Hat.

00:01:39.400 --> 00:01:47.060
Listen to an episode of their podcast as they demystify the tech industry over at talkpython.fm/compiler.

00:01:47.060 --> 00:01:51.560
Transcripts for this and all of our episodes are brought to you by Assembly AI.

00:01:51.560 --> 00:01:54.260
Do you need a great automatic speech to text API?

00:01:54.260 --> 00:01:56.800
Get human level accuracy in just a few lines of code.

00:01:56.800 --> 00:01:59.640
Visit talkpython.fm/assemblyai.

00:02:00.780 --> 00:02:01.420
Hello, Andy.

00:02:01.420 --> 00:02:02.120
Hey, what's going on?

00:02:02.120 --> 00:02:02.680
What's up?

00:02:02.680 --> 00:02:04.020
Man, it's great to catch up with you.

00:02:04.020 --> 00:02:04.660
Oh, thank you.

00:02:04.660 --> 00:02:05.160
You as well.

00:02:05.160 --> 00:02:06.200
It's been a while.

00:02:06.200 --> 00:02:11.560
Actually, the last time that we got to meet up, we were chilling at the Pi Bay, right?

00:02:11.560 --> 00:02:12.360
I believe so.

00:02:12.360 --> 00:02:13.080
Pretty far from both of our places.

00:02:13.080 --> 00:02:14.780
But what a cool place to meet.

00:02:14.780 --> 00:02:18.640
Outside at a food cart conference in San Francisco.

00:02:18.640 --> 00:02:20.560
That was one of the best days of 2021.

00:02:20.560 --> 00:02:21.580
It was incredible.

00:02:21.580 --> 00:02:22.480
It really was.

00:02:22.480 --> 00:02:27.240
And I got to tell you, I think more conferences should follow this style.

00:02:27.240 --> 00:02:31.780
I know if you got a conference in Minnesota in the winter, you probably can't have it outside.

00:02:31.780 --> 00:02:37.260
But boy, what a neat way to have a conference in the age of COVID where people felt comfortable.

00:02:37.260 --> 00:02:39.340
And honestly, forget COVID.

00:02:39.340 --> 00:02:42.720
I would have loved to go to this regardless, but it just works even better because of it.

00:02:42.720 --> 00:02:43.140
Oh, yeah.

00:02:43.140 --> 00:02:45.460
I'm looking forward to going back this year in September.

00:02:45.460 --> 00:02:46.080
Oh, yeah.

00:02:46.080 --> 00:02:46.780
It's going to be epic.

00:02:46.780 --> 00:02:47.060
Okay.

00:02:47.060 --> 00:02:50.140
Anyway, that was really great to meet you there.

00:02:50.440 --> 00:02:52.980
And now we're here to talk about testing.

00:02:52.980 --> 00:02:58.300
It's really, you know, what a surprise that you're on the show to talk testing in Python.

00:02:58.300 --> 00:03:00.920
Who would have thought of all people?

00:03:00.920 --> 00:03:01.320
Yeah.

00:03:01.320 --> 00:03:07.380
And people may know you from your Automation Panda work and blog and stuff like that, right?

00:03:07.380 --> 00:03:08.920
So let's get started with your story.

00:03:08.920 --> 00:03:10.040
How do you get into programming in Python?

00:03:10.040 --> 00:03:12.480
And maybe just kick it off by talking about Automation Panda.

00:03:12.480 --> 00:03:14.340
It's maybe a good place to set the stage.

00:03:14.340 --> 00:03:14.680
Sure.

00:03:14.680 --> 00:03:18.320
So I'll start with how Python, then I'll talk about why Automation Panda.

00:03:18.460 --> 00:03:20.940
So I first started programming Python in high school.

00:03:20.940 --> 00:03:24.020
This was around 2005.

00:03:24.020 --> 00:03:28.880
I think Python 2.3 was the new version.

00:03:28.880 --> 00:03:32.220
I was taking a survey of programming languages course.

00:03:32.220 --> 00:03:33.280
We did a whole bunch of things.

00:03:33.280 --> 00:03:34.640
And the instructor really liked Python.

00:03:34.640 --> 00:03:36.040
So I picked it up a little bit.

00:03:36.040 --> 00:03:36.300
Nice.

00:03:36.300 --> 00:03:37.780
Didn't do much other than toy around.

00:03:37.780 --> 00:03:43.360
Then I didn't do anything with Python until about 2015, when I joined a new company in my

00:03:43.360 --> 00:03:47.300
area called Max Point, and their three languages were Java, C#, and Python.

00:03:47.300 --> 00:03:52.200
And so I picked up Python and I really, really, really loved it again.

00:03:52.200 --> 00:03:54.800
And that's when I went heads down into it.

00:03:54.800 --> 00:03:56.860
I've spoken my first Python conference.

00:03:56.860 --> 00:04:00.280
It was PyData Carolinas 2016, right in my backyard in Durham.

00:04:00.280 --> 00:04:01.640
IBM was hosting it.

00:04:01.640 --> 00:04:01.860
Yeah.

00:04:01.980 --> 00:04:04.440
Then I attended PyCon 2018, and the rest was history.

00:04:04.440 --> 00:04:09.680
I think a lot of people out in the audience listening, many of them have never been to

00:04:09.680 --> 00:04:14.300
either a regional or near international conference, PyCon.

00:04:14.300 --> 00:04:19.120
And so many people I talked to are like, I can't, I didn't think I was really good enough

00:04:19.120 --> 00:04:21.500
to go or experienced enough to go or whatever.

00:04:21.640 --> 00:04:24.020
And then they say, but I went and it was amazing.

00:04:24.020 --> 00:04:26.200
And now I feel so much more part of the community, right?

00:04:26.200 --> 00:04:29.900
Like I just want to encourage people to, you know, like it sounds like you went there and

00:04:29.900 --> 00:04:33.300
you're like, oh my gosh, I forgot how cool this place was, this ecosystem was.

00:04:33.300 --> 00:04:34.000
And like, I'm in.

00:04:34.000 --> 00:04:34.500
Absolutely.

00:04:34.500 --> 00:04:37.340
I mean, that's one of the best ways to engage the Python community.

00:04:37.340 --> 00:04:40.680
Find your local meetup, find your regional conference or attend the biggins.

00:04:40.680 --> 00:04:41.040
Yeah.

00:04:41.040 --> 00:04:46.540
And unfortunately, there are people who are far away from any of those, but there's really

00:04:46.540 --> 00:04:48.080
good online meetups.

00:04:48.580 --> 00:04:54.420
Like I was just on the PyIndie one and they've, they're doing a hybrid now with the Six Feet

00:04:54.420 --> 00:04:54.820
Up folks.

00:04:54.820 --> 00:04:59.600
And it's like, they've got their, their real in-person meetup, but then you can participate

00:04:59.600 --> 00:05:02.260
and you're up on the screen with the group and whatnot.

00:05:02.260 --> 00:05:03.920
So there's still ways to do it.

00:05:03.920 --> 00:05:09.300
Even if you feel like, well, I live in small town outside of the small town that has no meetup,

00:05:09.300 --> 00:05:09.440
right?

00:05:09.440 --> 00:05:11.960
I'm the one Python person that I possibly know.

00:05:11.960 --> 00:05:12.800
It's still an option.

00:05:12.800 --> 00:05:13.200
Absolutely.

00:05:13.200 --> 00:05:13.660
Okay.

00:05:13.660 --> 00:05:15.620
So you dive in, get into it.

00:05:15.660 --> 00:05:20.300
And you've basically been, been working in it on and off in different aspects for quite

00:05:20.300 --> 00:05:20.720
a while now.

00:05:20.720 --> 00:05:21.200
Indeed.

00:05:21.200 --> 00:05:21.680
Indeed.

00:05:21.680 --> 00:05:23.940
I consider Python my favorite programming language.

00:05:23.940 --> 00:05:31.840
Funny fact, until my current job from about 2016 through 2021, my main programming language

00:05:31.840 --> 00:05:33.040
at work was actually C#.

00:05:33.040 --> 00:05:35.800
And so people would ask me, so what do you do with Python at work?

00:05:35.800 --> 00:05:36.340
I say nothing.

00:05:36.340 --> 00:05:37.280
And they think I'm joking.

00:05:37.280 --> 00:05:39.880
I'm like, I'm more of a polyglot.

00:05:40.000 --> 00:05:41.640
One can dream, but no, it is not true.

00:05:41.640 --> 00:05:42.080
I don't know.

00:05:42.080 --> 00:05:42.180
Yeah.

00:05:42.180 --> 00:05:46.360
I mean, I do Java, JavaScript, Python, C#, you name it.

00:05:46.360 --> 00:05:49.800
Way long ago, I did test automation in Perl for a couple of years.

00:05:49.800 --> 00:05:51.240
That was fun, quote unquote.

00:05:51.240 --> 00:05:54.800
I'm going to write a test regular expression to test the regular expression.

00:05:54.800 --> 00:05:55.640
Oh my gosh.

00:05:55.640 --> 00:05:56.740
Oh my gosh.

00:05:56.740 --> 00:05:57.180
Sorry.

00:05:57.180 --> 00:05:58.220
I didn't really give you flashbacks.

00:05:58.220 --> 00:05:59.400
It's all right.

00:05:59.400 --> 00:06:01.900
That is the one gem that's buried in Perl, I would say.

00:06:01.900 --> 00:06:04.800
I mean, Perl, every language has strengths and weaknesses.

00:06:04.800 --> 00:06:06.820
Perl strength is reg X by far.

00:06:06.900 --> 00:06:07.380
Yeah, sure.

00:06:07.380 --> 00:06:07.920
Yeah.

00:06:07.920 --> 00:06:12.480
Anytime I hear people talking about how much they use Perl or love Perl, it's got a really

00:06:12.480 --> 00:06:15.800
strong text understanding element to what they were doing.

00:06:15.800 --> 00:06:16.360
Mm-hmm.

00:06:16.360 --> 00:06:17.040
Mm-hmm.

00:06:17.040 --> 00:06:17.460
Nice.

00:06:17.460 --> 00:06:20.420
Well, you spoke about your jobs and doing the C# thing.

00:06:20.420 --> 00:06:23.220
And I don't think that that's necessarily that big.

00:06:23.220 --> 00:06:24.380
I don't think it's a negative.

00:06:24.380 --> 00:06:27.900
You know, there's tons of people who they go to work and work in one language and then

00:06:27.900 --> 00:06:30.940
they maybe come back and they love Python or vice versa.

00:06:30.940 --> 00:06:33.440
Maybe they do Python and they love JavaScript.

00:06:33.440 --> 00:06:34.040
I don't know.

00:06:34.040 --> 00:06:34.840
We could get them help.

00:06:34.840 --> 00:06:35.720
Just kidding.

00:06:36.040 --> 00:06:40.900
But I know that for a lot of people, the dream is like, how do I do Python full time?

00:06:40.900 --> 00:06:42.560
For now, it's a hobby.

00:06:42.560 --> 00:06:46.140
But how do I like, I'm writing a blog, I'm doing some projects, but I want to do that as

00:06:46.140 --> 00:06:46.640
my job.

00:06:46.640 --> 00:06:46.880
Right.

00:06:46.880 --> 00:06:50.180
So yeah, you kind of made that transition again, in a sense.

00:06:50.180 --> 00:06:50.780
Yep.

00:06:50.780 --> 00:06:53.800
Now being a developer advocate, I play with all the tools at the sandbox.

00:06:53.800 --> 00:06:56.240
Yeah, that's awesome.

00:06:56.240 --> 00:06:58.080
So tell us about what you're doing now.

00:06:58.080 --> 00:06:58.340
Sure.

00:06:58.440 --> 00:07:01.440
So I'm a developer advocate at a company called Apple tools.

00:07:01.440 --> 00:07:05.160
Apple tools focuses on automated visual testing.

00:07:05.160 --> 00:07:07.140
So if I got this right, there you go.

00:07:07.140 --> 00:07:07.660
You got it.

00:07:07.660 --> 00:07:07.940
Yeah.

00:07:07.940 --> 00:07:09.120
Some people think I work at Apple.

00:07:09.120 --> 00:07:09.780
It's like, no, no, no.

00:07:09.780 --> 00:07:10.460
Apple tools.

00:07:10.460 --> 00:07:11.540
Apple tools.

00:07:12.020 --> 00:07:14.200
A-P-P-L-I tools.

00:07:14.200 --> 00:07:15.280
I'll put it in the show notes.

00:07:15.280 --> 00:07:15.760
Sure, sure.

00:07:15.760 --> 00:07:22.020
And so the premise is a lot of traditional functional testing is either your manual tester

00:07:22.020 --> 00:07:24.080
banging on a keyboard, looking and clicking through.

00:07:24.080 --> 00:07:26.440
Or if you're doing automation, you're scripting it, right?

00:07:26.440 --> 00:07:30.460
With a tool like Playbrite or Cypress or Selenium WebDriver, whatever.

00:07:30.460 --> 00:07:31.320
They're all good tools.

00:07:31.740 --> 00:07:36.480
But when you're using a browser automation tool, typically you're faking like the clicks

00:07:36.480 --> 00:07:37.320
and the typing.

00:07:37.320 --> 00:07:43.520
And then you're scraping the DOM of the page to get things like text or attributes of HTML

00:07:43.520 --> 00:07:44.620
tags or classes.

00:07:44.620 --> 00:07:47.160
And you're doing some sort of assertions on those.

00:07:47.160 --> 00:07:47.480
Right.

00:07:47.480 --> 00:07:52.300
Sometimes as JavaScript, like a view front end, you just get like handlebars back.

00:07:52.300 --> 00:07:52.520
Oh, well.

00:07:52.520 --> 00:07:52.780
Nothing.

00:07:52.780 --> 00:07:53.420
Yeah.

00:07:53.420 --> 00:07:56.500
Or you got to do a little bit, something more complicated to scrape it.

00:07:56.500 --> 00:07:59.320
But still, you're just like comparing text, right?

00:07:59.320 --> 00:07:59.740
Exactly.

00:07:59.740 --> 00:08:00.200
Exactly.

00:08:00.200 --> 00:08:00.620
What about CSS?

00:08:00.620 --> 00:08:01.540
What about visuals?

00:08:01.700 --> 00:08:04.020
What about JavaScript events being linked up?

00:08:04.020 --> 00:08:04.460
Exactly.

00:08:04.460 --> 00:08:10.120
And so in that sense, the assertions you're doing are really a bare minimal validation of

00:08:10.120 --> 00:08:10.540
the page.

00:08:10.540 --> 00:08:16.900
The way I like to describe it is most traditional automated scripts will work if you rip the entire

00:08:16.900 --> 00:08:17.860
CSS off the page.

00:08:17.860 --> 00:08:20.140
It would look butt ugly, but your test scripts will go through.

00:08:20.140 --> 00:08:23.060
So the question is, is that really proving that it works?

00:08:23.060 --> 00:08:25.080
From a human aspect, no.

00:08:25.080 --> 00:08:29.860
You would expect to make sure that things like your layout are good, that your buttons are

00:08:29.860 --> 00:08:31.660
there, that your text is aligned.

00:08:31.660 --> 00:08:33.000
All the colors are right.

00:08:33.000 --> 00:08:36.400
And so that's where automated visual testing comes in, right?

00:08:36.400 --> 00:08:41.160
That you would take snapshots of different views of your web or mobile apps, whether it's

00:08:41.160 --> 00:08:43.060
a full page, whether it's a section of a page.

00:08:43.060 --> 00:08:47.300
And then every time you make changes, you run the tests again, and they'll take checkpoint

00:08:47.300 --> 00:08:50.260
comparisons to point out, here's what has changed.

00:08:50.340 --> 00:08:53.400
And then you as the tester can decide, is that good or bad?

00:08:53.400 --> 00:08:57.700
Kind of a visual diff, like an image diff, and then go from there.

00:08:57.700 --> 00:08:57.880
Yep.

00:08:57.880 --> 00:09:01.760
It's a little bit stronger than just like a pixel to pixel comparison, right?

00:09:01.760 --> 00:09:05.580
Because if you had a padding shift by two pixels, all of a sudden everything's blown up, right?

00:09:05.580 --> 00:09:06.780
Apple tools uses.

00:09:07.000 --> 00:09:07.520
Yeah, exactly.

00:09:07.520 --> 00:09:12.140
Like if it has the time of day up there and the time it goes from like nine to 10, it'll

00:09:12.140 --> 00:09:13.220
shift everything a little bit.

00:09:13.220 --> 00:09:14.360
Text changes like that too.

00:09:14.360 --> 00:09:19.200
So what Apple tools does is it uses visual AI to really pick out the things that would be

00:09:19.200 --> 00:09:20.580
noticeable to a human eye.

00:09:20.580 --> 00:09:22.500
So if you have a small shift, not a big deal.

00:09:22.500 --> 00:09:26.980
You can set ignore regions, like for certain text areas, like it's the time of day or those

00:09:26.980 --> 00:09:27.480
kinds of things.

00:09:27.480 --> 00:09:31.060
So you can really hone these visual assertions that you're making.

00:09:31.060 --> 00:09:35.080
Other thing you can do is because they're taking snapshots of the page, it's like a full

00:09:35.080 --> 00:09:35.680
DOM capture.

00:09:35.680 --> 00:09:37.180
It's not just a pixelated screenshot.

00:09:37.180 --> 00:09:41.040
You can take those snapshots and re-render them on different browser configurations.

00:09:41.040 --> 00:09:43.880
So, you know, for example, I'm using a Mac.

00:09:43.880 --> 00:09:50.120
I can test on Chrome and Firefox and Safari and Edge now, but I can't test IE.

00:09:50.120 --> 00:09:54.080
You know, well, you could take that snapshot, send it up to the Apple tools cloud.

00:09:54.080 --> 00:09:56.500
And then in there, you can test it on IE.

00:09:56.500 --> 00:09:57.840
There you can test it on mobile platforms.

00:09:57.840 --> 00:10:00.620
Or if you're a Windows person, like good luck with Safari.

00:10:00.620 --> 00:10:01.140
Oh, exactly.

00:10:01.140 --> 00:10:01.560
Right.

00:10:01.560 --> 00:10:02.120
That's the other one.

00:10:02.120 --> 00:10:04.460
If you're on Windows, you want to test Safari, but you can't.

00:10:04.460 --> 00:10:04.800
Boom.

00:10:04.800 --> 00:10:06.800
Apple tools ultra fast grid is a way to do that.

00:10:06.800 --> 00:10:10.480
So there's a lot of really cool stuff you can do with visual testing.

00:10:10.480 --> 00:10:11.140
That sounds fun.

00:10:11.140 --> 00:10:11.940
Yep.

00:10:11.940 --> 00:10:14.960
And so what I do at Apple tools, I'm a developer advocate.

00:10:14.960 --> 00:10:17.260
So I stand between company and community.

00:10:17.260 --> 00:10:20.080
I help the community understand good testing practices.

00:10:20.300 --> 00:10:21.100
What is visual testing?

00:10:21.100 --> 00:10:24.180
Help them get the most out of using Apple tools.

00:10:24.180 --> 00:10:27.280
And also to be in the community to advocate for them.

00:10:27.280 --> 00:10:28.260
Here are the problems.

00:10:28.260 --> 00:10:29.040
Here are the needs.

00:10:29.040 --> 00:10:29.760
Here's the struggles.

00:10:29.760 --> 00:10:30.880
How can Apple tools help me?

00:10:30.880 --> 00:10:31.080
Right.

00:10:31.080 --> 00:10:32.620
I tell people our tool does this.

00:10:32.620 --> 00:10:34.180
They say, we don't need that solved.

00:10:34.180 --> 00:10:36.400
We need this other slightly different thing solved.

00:10:36.400 --> 00:10:37.140
Yep.

00:10:37.140 --> 00:10:37.560
Yep.

00:10:37.560 --> 00:10:39.520
And you're like, all right, I'll talk to the team.

00:10:39.520 --> 00:10:40.320
That kind of stuff, right?

00:10:40.320 --> 00:10:40.960
Yeah, exactly.

00:10:40.960 --> 00:10:41.400
Yeah.

00:10:41.480 --> 00:10:44.660
I think the DevRel developer evangelist role is super fun.

00:10:44.660 --> 00:10:46.560
It sounds like a really neat.

00:10:46.560 --> 00:10:50.040
If you're a little bit extroverted, you like talking to people, you love code.

00:10:50.040 --> 00:10:50.500
Yeah.

00:10:50.500 --> 00:10:51.420
I mean, it's great.

00:10:51.420 --> 00:10:51.680
Yep.

00:10:52.000 --> 00:11:05.660
So one other thing I do want to mention with the whole Apple tools, DevRel thing, Apple tools run something called test automation university, which is a free platform full of online courses about testing automation and everything on that topic.

00:11:05.660 --> 00:11:08.960
So we got some of the best instructors in the world who have these courses.

00:11:08.960 --> 00:11:11.260
I've taught three of the Python courses.

00:11:12.340 --> 00:11:14.840
You know, I would recommend folks check it out.

00:11:14.840 --> 00:11:16.620
Test automation university, TAU.

00:11:16.620 --> 00:11:17.760
It's good stuff.

00:11:17.760 --> 00:11:18.800
All right.

00:11:18.800 --> 00:11:19.600
Automation Panda.

00:11:19.600 --> 00:11:20.440
Oh my goodness.

00:11:20.440 --> 00:11:23.780
So yes, I also happen to be called the automation Panda.

00:11:23.780 --> 00:11:24.940
That's just me.

00:11:24.940 --> 00:11:26.980
You know, there's no like company or anything.

00:11:26.980 --> 00:11:28.000
It's just my moniker.

00:11:28.000 --> 00:11:28.900
It's my Twitter handle.

00:11:28.900 --> 00:11:29.580
It's my blog.

00:11:29.580 --> 00:11:37.160
Or the reason I started the whole automation Panda thing back in 2016, I got my first position as a senior level engineer.

00:11:37.160 --> 00:11:38.900
And I thought, wow, this is great.

00:11:38.900 --> 00:11:40.400
I've achieved my career dream.

00:11:40.400 --> 00:11:41.180
I'm senior level.

00:11:41.280 --> 00:11:42.460
People going to listen to me now.

00:11:42.460 --> 00:11:43.340
What's next?

00:11:43.340 --> 00:11:45.480
Like, oh, hmm.

00:11:45.480 --> 00:11:50.360
Up until that point, all the work I'd ever done had been behind company proprietary walls.

00:11:50.360 --> 00:11:56.180
Even if that work had not necessarily been proprietary or secret or anything like that.

00:11:56.180 --> 00:12:00.300
You know, I got sick of rewriting the same thing, wiki pages across multiple teams.

00:12:00.300 --> 00:12:01.380
So I was like, you know what?

00:12:01.380 --> 00:12:03.540
Maybe I can do something more public facing.

00:12:03.540 --> 00:12:08.320
Maybe I can write those wiki pages on something like a blog that everyone can just Google for and find.

00:12:08.320 --> 00:12:11.180
Especially me, because I don't want to have to repeat the same things over and over.

00:12:11.220 --> 00:12:13.880
And so I was like, okay, I'll start a blog.

00:12:13.880 --> 00:12:19.040
And I needed a catchy name because you go to, you know, whatever website to register your domain.

00:12:19.040 --> 00:12:22.160
And I'm like, well, andrewknight.com is not available.

00:12:22.160 --> 00:12:24.880
And nobody's going to remember Andrew Knight anyway.

00:12:24.880 --> 00:12:26.280
Let me come up with something catchy.

00:12:26.520 --> 00:12:28.780
And I just landed on Automation Panda.

00:12:28.780 --> 00:12:30.360
Automation for test automation.

00:12:30.360 --> 00:12:32.280
Panda, because pandas are awesome.

00:12:32.280 --> 00:12:32.700
Yeah.

00:12:32.700 --> 00:12:33.220
And there we go.

00:12:33.220 --> 00:12:37.240
And pandas hate crashing web apps and desktop apps.

00:12:37.240 --> 00:12:46.160
As I think across the different animals throughout the animal kingdom, they are very finicky about a failed app.

00:12:46.160 --> 00:12:46.740
I suppose.

00:12:46.740 --> 00:12:48.540
Push or whatever.

00:12:48.540 --> 00:12:49.320
I'm just kidding.

00:12:49.320 --> 00:12:50.640
No, that's awesome.

00:12:50.640 --> 00:12:52.300
And I certainly know you through this.

00:12:52.300 --> 00:12:57.060
And you've done a lot of general advocacy for testing in the Python space there.

00:12:57.060 --> 00:12:57.300
Yeah.

00:12:57.400 --> 00:13:00.300
I advocated for good testing before I was a developer advocate.

00:13:00.300 --> 00:13:02.280
That is true.

00:13:02.280 --> 00:13:02.720
Exactly.

00:13:02.720 --> 00:13:06.940
Well, I mean, I think that that's often how people get into these roles.

00:13:06.940 --> 00:13:11.020
You think there's probably a lot of people that are thinking, like, I would love to have that role.

00:13:11.140 --> 00:13:13.320
So I'm going to try to apply so I can get that role.

00:13:13.320 --> 00:13:17.080
And, you know, you did a bunch of public speaking and presentations.

00:13:17.080 --> 00:13:18.780
And I'm sure they saw that.

00:13:18.780 --> 00:13:20.200
Like, this guy is great.

00:13:20.200 --> 00:13:21.920
We just need to have him on our team.

00:13:21.920 --> 00:13:22.560
You know?

00:13:22.560 --> 00:13:31.720
And I got hired doing in-person developer training because I was speaking at user groups and meetups and conferences and blogging.

00:13:31.720 --> 00:13:34.440
And they're just like, I see you doing this for free.

00:13:34.440 --> 00:13:35.660
Would you like a job to do it?

00:13:35.660 --> 00:13:37.020
I'm like, that sounds awesome.

00:13:37.020 --> 00:13:37.660
Let's do that.

00:13:37.660 --> 00:13:38.120
Indeed.

00:13:38.480 --> 00:13:42.700
So, yeah, it's definitely advice people can take sort of as a path forward.

00:13:42.700 --> 00:13:43.460
Oh, yeah, definitely.

00:13:43.460 --> 00:13:44.980
If they want to end up where you are, yeah.

00:13:44.980 --> 00:13:49.220
When you generate content, that becomes your electronic business card.

00:13:49.220 --> 00:13:50.500
That's how people get to know you.

00:13:50.500 --> 00:13:54.500
And so if you do the things you like, the things you like will start coming to you.

00:13:54.500 --> 00:13:54.880
Absolutely.

00:13:54.880 --> 00:13:55.740
All right.

00:13:55.740 --> 00:13:59.040
Now, how about we talk a little bit of testing?

00:13:59.040 --> 00:13:59.880
Let's do it.

00:13:59.880 --> 00:14:00.220
Yeah.

00:14:00.220 --> 00:14:07.480
So the kind of testing that we're talking about here is somewhat related, actually, to your current job.

00:14:07.880 --> 00:14:08.040
Yeah.

00:14:08.040 --> 00:14:09.120
Apple tools, right?

00:14:09.120 --> 00:14:09.420
Indeed.

00:14:09.420 --> 00:14:21.720
I don't know if you're using the same tooling exactly or anything, but it's the similar idea of not just, okay, I've got a stack data structure and I can push a thing onto it and I can pop it off.

00:14:21.720 --> 00:14:24.700
And if I pop two on and pop it off, it's going to be the second one.

00:14:24.700 --> 00:14:25.000
Okay.

00:14:25.000 --> 00:14:26.520
Our app is working, right?

00:14:26.520 --> 00:14:32.980
It's trying to understand more of an integration black box level of testing, would you say?

00:14:32.980 --> 00:14:33.460
Correct.

00:14:33.460 --> 00:14:33.840
Correct.

00:14:33.840 --> 00:14:38.700
I always say there is a big difference between testing code and testing features.

00:14:38.700 --> 00:14:53.240
Testing code is what we would think of as white box or unit testing or maybe sometimes subcutaneous testing where you're testing to make sure that the implementation of whatever code you wrote, be it a function or method or something else, is working according to specification.

00:14:53.240 --> 00:14:55.980
Like, okay, I have a function, an absolute value function.

00:14:55.980 --> 00:15:00.800
Let me make sure that, you know, I have a table of inputs that meet the expected table of outputs, right?

00:15:00.800 --> 00:15:01.900
Input, rank it up.

00:15:01.900 --> 00:15:02.920
Output doesn't match.

00:15:02.920 --> 00:15:04.380
You know, that would be unit testing.

00:15:04.760 --> 00:15:08.300
And so it's very good for pinpointing things quickly, right?

00:15:08.300 --> 00:15:09.420
Unit tests are very fast.

00:15:09.420 --> 00:15:11.460
It catches problems at their source.

00:15:11.460 --> 00:15:17.380
But it doesn't test things like, okay, can you actually complete the workflow that this whole big application is designed to do?

00:15:17.380 --> 00:15:19.060
That's where feature testing comes in.

00:15:19.060 --> 00:15:20.760
That's where you have to do something black box.

00:15:21.820 --> 00:15:25.680
Unit testing is good when you are focused in on a part of the app.

00:15:25.680 --> 00:15:31.720
Like, this part is the part that checks whether or not I can access this page, whether or not the user's logged in.

00:15:31.720 --> 00:15:34.400
So let me try to request it with a user that's not logged in.

00:15:34.400 --> 00:15:36.060
Let me try to request it with a user that is.

00:15:36.060 --> 00:15:40.860
How about now one with whose one's logged in but doesn't have access through some role thing?

00:15:40.860 --> 00:15:41.320
Right?

00:15:41.320 --> 00:15:42.240
Like, that is fine.

00:15:42.240 --> 00:15:49.160
But most applications, as they grow, become like Lego pieces that click together, right?

00:15:49.160 --> 00:16:02.160
And if you think about web apps or APIs or I don't even want to think about microservices, you know, they become these things like, well, here's the database with its schema and constraints.

00:16:02.160 --> 00:16:04.020
And here's the data layer.

00:16:04.020 --> 00:16:06.260
And here's my view method.

00:16:06.260 --> 00:16:09.420
And then, oh, here, these are the routes that are set up based on this view.

00:16:09.480 --> 00:16:11.840
And here's the static folder for the JavaScript.

00:16:11.840 --> 00:16:14.660
And then it renders and just here's the HTML template.

00:16:14.660 --> 00:16:22.620
Like, it'd be insanity to try to test those on a unit level and then be sure that, well, I tested the view and then I tested the template.

00:16:22.620 --> 00:16:25.360
And somehow I feel like that's OK because they could get out of sync.

00:16:25.360 --> 00:16:25.800
Exactly.

00:16:25.800 --> 00:16:26.400
Exactly.

00:16:26.400 --> 00:16:33.380
This portion of Talk Python to Me is brought to you by Microsoft for Startups Founders Hub.

00:16:33.380 --> 00:16:35.440
Starting a business is hard.

00:16:35.440 --> 00:16:40.380
By some estimates, over 90% of startups will go out of business in just their first year.

00:16:40.620 --> 00:16:49.860
With that in mind, Microsoft for Startups set out to understand what startups need to be successful and to create a digital platform to help them overcome those challenges.

00:16:49.860 --> 00:16:52.540
Microsoft for Startups Founders Hub was born.

00:16:52.540 --> 00:16:59.180
Founders Hub provides all founders at any stage with free resources to solve their startup challenges.

00:16:59.420 --> 00:17:07.800
The platform provides technology benefits, access to expert guidance and skilled resources, mentorship and networking connections, and much more.

00:17:07.800 --> 00:17:17.360
Unlike others in the industry, Microsoft for Startups Founders Hub doesn't require startups to be investor backed or third party validated to participate.

00:17:17.360 --> 00:17:20.080
Founders Hub is truly open to all.

00:17:20.420 --> 00:17:21.580
So what do you get if you join them?

00:17:21.580 --> 00:17:29.860
You speed up your development with free access to GitHub and Microsoft Cloud computing resources and the ability to unlock more credits over time.

00:17:29.860 --> 00:17:39.580
To help your startup innovate, Founders Hub is partnering with innovative companies like OpenAI, a global leader in AI research and development, to provide exclusive benefits and discounts.

00:17:39.980 --> 00:17:45.000
Through Microsoft for Startups Founders Hub, becoming a founder is no longer about who you know.

00:17:45.000 --> 00:17:58.540
You'll have access to their mentorship network, giving you a pool of hundreds of mentors across a range of disciplines and areas like idea validation, fundraising, management and coaching, sales and marketing, as well as specific technical stress points.

00:17:58.540 --> 00:18:03.760
You'll be able to book a one-on-one meeting with the mentors, many of whom are former founders themselves.

00:18:03.760 --> 00:18:08.900
Make your idea a reality today with the critical support you'll get from Founders Hub.

00:18:09.040 --> 00:18:14.860
To join the program, just visit talkpython.fm/founders hub, all one word, no links in your show notes.

00:18:14.860 --> 00:18:17.180
Thank you to Microsoft for supporting the show.

00:18:17.180 --> 00:18:26.680
Having that full application ready to go and you're testing it as if you were a user is very, very valuable.

00:18:26.680 --> 00:18:28.260
It can be painful to set up.

00:18:28.260 --> 00:18:33.920
It can be painful to think about all the scenarios to do, but it is also incredibly valuable in the results you get from it.

00:18:33.920 --> 00:18:34.120
Yeah.

00:18:34.120 --> 00:18:38.120
And I made the snarky comment about like a view or react front end as well.

00:18:38.120 --> 00:18:38.360
Yeah.

00:18:38.360 --> 00:18:38.400
Yeah.

00:18:38.400 --> 00:18:44.340
Well, which really requires a little bit more of a test that understands the behavior rather

00:18:44.340 --> 00:18:47.780
than just creating like a flask test app and requesting the view.

00:18:47.780 --> 00:18:48.160
Exactly.

00:18:48.160 --> 00:18:52.780
You're just going to get back where the binding bits of the JavaScript framework go.

00:18:52.780 --> 00:18:53.200
Exactly.

00:18:53.200 --> 00:18:54.600
You need something like a web browser, right?

00:18:54.600 --> 00:18:55.220
Exactly.

00:18:55.220 --> 00:18:55.700
Yes.

00:18:55.700 --> 00:18:56.180
Yes.

00:18:56.280 --> 00:18:59.820
You need to pull up the page, load it in a browser and see what it does.

00:18:59.820 --> 00:19:03.360
And, you know, you mentioned, I know this is the top Python podcast.

00:19:03.360 --> 00:19:04.660
And so we love Python.

00:19:04.660 --> 00:19:05.400
I love Python.

00:19:05.400 --> 00:19:09.960
But in the web space, it's inevitable, unless you're using HTML or something.

00:19:09.960 --> 00:19:10.460
Ha ha ha.

00:19:10.460 --> 00:19:12.960
That Python is going to test JavaScript at some point.

00:19:12.960 --> 00:19:13.460
Right?

00:19:13.460 --> 00:19:14.200
Yeah.

00:19:14.440 --> 00:19:18.520
They're going to crash together definitely in the web space for sure, unless you are purely

00:19:18.520 --> 00:19:19.740
on the API side.

00:19:19.740 --> 00:19:20.580
And who knows?

00:19:20.580 --> 00:19:23.380
Probably somehow still it'll worm its way in there.

00:19:23.380 --> 00:19:28.820
So traditionally, this kind of testing has been done by pulling up a browser.

00:19:28.820 --> 00:19:30.360
It could be several levels.

00:19:30.360 --> 00:19:34.880
It could be, okay, I get my feature implemented and I go click, clickety, clickety, click.

00:19:34.880 --> 00:19:35.640
Seems like it's working.

00:19:35.640 --> 00:19:36.500
Let's push it.

00:19:36.660 --> 00:19:39.220
Like that's, let's call that level zero testing.

00:19:39.220 --> 00:19:43.640
Actually, that's level like 0.1 because level zero is just make the feature change and push

00:19:43.640 --> 00:19:44.100
it.

00:19:44.100 --> 00:19:46.220
And then we'll see whether it crashes, right?

00:19:46.220 --> 00:19:47.180
No test.

00:19:47.180 --> 00:19:48.740
No test is level zero.

00:19:48.740 --> 00:19:53.520
But then just above that is, I kind of sort of clicked around in the area that I think I

00:19:53.520 --> 00:19:55.180
might have affected to see that it works, right?

00:19:55.180 --> 00:19:56.480
Maybe take it from there.

00:19:56.480 --> 00:19:58.220
Like, where do we go from there if we want to be better?

00:19:58.220 --> 00:20:01.740
Well, I would caveat to say maybe it's not necessarily layers of getting better.

00:20:01.740 --> 00:20:04.220
There is always a place for manual testing.

00:20:04.520 --> 00:20:08.780
The place for manual testing is what I would consider exploratory testing because it's

00:20:08.780 --> 00:20:13.280
still good to have a human go in there and try things and feel the experience.

00:20:13.280 --> 00:20:19.260
Because like we said before, a lot of test automation struggles to handle things like visuals, struggles

00:20:19.260 --> 00:20:23.600
to handle things like good design, judging design, judging user experience.

00:20:23.600 --> 00:20:26.040
Does it feel laggy or is it responsive?

00:20:26.040 --> 00:20:26.400
Exactly.

00:20:26.400 --> 00:20:27.040
Exactly.

00:20:27.040 --> 00:20:28.660
Performance issues and stuff.

00:20:28.660 --> 00:20:31.940
And so people, like they start clicking and typing.

00:20:31.940 --> 00:20:33.280
It's immediate, you know?

00:20:33.580 --> 00:20:38.220
Like if anything is laggier than like 0.4 seconds or something, I forget the name of

00:20:38.220 --> 00:20:38.780
that threshold.

00:20:38.780 --> 00:20:40.560
That's categorically bad.

00:20:40.560 --> 00:20:47.640
What we don't want to do is have the bulk of our testing coverage done that way.

00:20:47.640 --> 00:20:52.500
We don't want to have the, let's say like the majority of our functional test cases executed

00:20:52.500 --> 00:20:52.940
manually.

00:20:52.940 --> 00:20:57.980
Because the idea of a test case, it's a well-defined procedure that you step through one through

00:20:57.980 --> 00:21:00.000
and you do the steps and you make sure it works.

00:21:00.220 --> 00:21:03.800
That kind of testing is where we might want to quote unquote level up to something like

00:21:03.800 --> 00:21:04.700
automation, right?

00:21:04.700 --> 00:21:10.680
Where you have these complimentary practices of you have automation do the rote, repetitive,

00:21:10.680 --> 00:21:13.700
but still necessary checks along the way.

00:21:13.700 --> 00:21:18.840
And then have your humans be creative in exploring and be able to judge the things that a script

00:21:18.840 --> 00:21:20.280
can't necessarily judge for you.

00:21:20.540 --> 00:21:20.940
Right.

00:21:20.940 --> 00:21:21.660
That's kind of where that goes.

00:21:21.660 --> 00:21:26.640
It would be lovely to leverage continuous integration and tools like that all over the place.

00:21:26.640 --> 00:21:32.780
And if you don't have at least some basic level of automation, that's more or less inaccessible

00:21:32.780 --> 00:21:33.460
to you, right?

00:21:33.460 --> 00:21:38.360
Like, so let's take an example of, I've got a Django CMS that I built and it's open source.

00:21:38.400 --> 00:21:44.320
And I want to allow people to send PRs to me to contribute back to this general CMS like

00:21:44.320 --> 00:21:48.120
WordPress, but with Django press, I'll just make a random term.

00:21:48.120 --> 00:21:49.040
It probably exists.

00:21:49.040 --> 00:21:49.480
Who knows?

00:21:49.480 --> 00:21:53.520
But like, imagine my Django press, I want to allow contributors and they're going to submit

00:21:53.520 --> 00:21:53.920
stuff.

00:21:53.920 --> 00:21:59.980
If I don't have something a little bit like the testing you're describing, then every PR,

00:21:59.980 --> 00:22:03.740
I've got to go download it, try it out and do those things.

00:22:03.740 --> 00:22:06.840
And as opposed to, no, the test didn't pass because you broke this thing.

00:22:06.840 --> 00:22:07.740
First fix that, please.

00:22:07.740 --> 00:22:08.180
Exactly.

00:22:08.180 --> 00:22:14.400
Your automated test suites are your safety net and they should account for a very high

00:22:14.400 --> 00:22:19.160
percentage of the coverage that you would want in your testing, right?

00:22:19.160 --> 00:22:23.340
The idea is the automated tests will do almost all the kinds of things.

00:22:23.340 --> 00:22:28.080
And then you would just have yourself or someone else go in and just kind of poke around real

00:22:28.080 --> 00:22:29.860
quick, make sure everything is still good.

00:22:29.860 --> 00:22:34.120
There's an, let me try the, okay, good, you know, and then feel good because you spent a

00:22:34.120 --> 00:22:37.080
little bit of time, sanity check, making sure everything is still good.

00:22:37.080 --> 00:22:38.660
Good from a user experience perspective.

00:22:38.660 --> 00:22:43.380
While you had the battery of your automated suites batter the crap out of whatever changed

00:22:43.380 --> 00:22:45.080
us when it, and it's like, Oh, they all passed.

00:22:46.460 --> 00:22:46.900
Yeah.

00:22:46.900 --> 00:22:47.020
Yeah.

00:22:47.020 --> 00:22:47.340
Yeah.

00:22:47.340 --> 00:22:49.320
I'm 95% sure we're okay.

00:22:49.320 --> 00:22:50.180
Now let's go from there.

00:22:50.180 --> 00:22:50.860
Yeah, exactly.

00:22:50.860 --> 00:22:53.860
You can also hone in on the really important things, right?

00:22:53.860 --> 00:22:59.900
Like in your CMS thing, maybe there's a reporting section that reports page hits over time or if

00:22:59.900 --> 00:23:00.940
it goes down, that's not great.

00:23:00.940 --> 00:23:06.260
But if the main page or main site won't even load, that's worse than the reporting being

00:23:06.260 --> 00:23:06.700
screwed up.

00:23:06.700 --> 00:23:06.880
Right.

00:23:06.880 --> 00:23:12.060
So you can, you can focus in on those areas and really put the energy where people are going

00:23:12.060 --> 00:23:14.040
to notice and consider it fully broken.

00:23:14.040 --> 00:23:14.600
Basically.

00:23:14.600 --> 00:23:14.960
Indeed.

00:23:14.960 --> 00:23:15.500
Indeed.

00:23:15.600 --> 00:23:15.780
All right.

00:23:15.780 --> 00:23:20.380
So the tools of the trade traditionally have been Selenium for this type of thing, right?

00:23:20.380 --> 00:23:24.640
And not to bash on Selenium anyway, it's, it's pretty awesome, but we're going to talk about

00:23:24.640 --> 00:23:28.600
some sweet new stuff as well that also works with Python in nice ways.

00:23:28.600 --> 00:23:28.960
Indeed.

00:23:29.120 --> 00:23:29.260
Yeah.

00:23:29.260 --> 00:23:33.700
So maybe tell people real quick about Selenium and then we'll talk about Playwright and you

00:23:33.700 --> 00:23:34.400
can compare those.

00:23:34.400 --> 00:23:34.860
Absolutely.

00:23:34.860 --> 00:23:40.900
So as you said, Michael, Selenium has been the classic browser automation tool.

00:23:40.900 --> 00:23:44.400
It's been around for, oh gosh, well over a decade now.

00:23:44.400 --> 00:23:45.180
It's hard to believe.

00:23:45.180 --> 00:23:48.560
Almost like two decades inch.

00:23:48.560 --> 00:23:53.040
I mean, the early, very, very early, early things that ultimately became the Selenium

00:23:53.040 --> 00:23:53.480
projects.

00:23:53.480 --> 00:23:58.820
How Selenium works is that you will have your browser, whether that's Chrome.

00:23:59.280 --> 00:24:01.980
IE, Firefox, RE, what have you.

00:24:01.980 --> 00:24:02.880
There's the browser.

00:24:02.880 --> 00:24:08.440
Then there is this web driver executable that acts as a proxy between the browser and your

00:24:08.440 --> 00:24:09.820
test automation code.

00:24:09.820 --> 00:24:14.180
And then in your test automation code, you have language bindings that will send requests

00:24:14.180 --> 00:24:17.940
to the browser or the Selenium web driver executable.

00:24:17.940 --> 00:24:19.820
It used to use a JSON protocol.

00:24:19.820 --> 00:24:21.840
I think it's Selenium before they might've changed some things.

00:24:21.840 --> 00:24:23.260
So I don't remember exactly.

00:24:23.260 --> 00:24:27.800
Basically, you send, you send requests to the thing, its proxy goes to the browser, performs

00:24:27.800 --> 00:24:28.680
whatever thing you wanted.

00:24:28.680 --> 00:24:29.300
Did you want to click?

00:24:29.300 --> 00:24:30.200
Did you want to get text?

00:24:30.200 --> 00:24:31.700
Sends the response back through.

00:24:31.700 --> 00:24:34.560
And so that's how your automation can control the browser.

00:24:34.560 --> 00:24:40.200
This is back and forth between browser and your automation through this, this proxy executable.

00:24:40.200 --> 00:24:42.300
Selenium is an open source project.

00:24:42.300 --> 00:24:44.920
So everything is available online.

00:24:44.920 --> 00:24:51.440
They have multiple language bindings, not just Python, Java, JavaScript, Python, C#, Ruby.

00:24:51.700 --> 00:24:54.700
I don't know if there are any others, but those would be like the big five.

00:24:54.700 --> 00:24:55.300
What else?

00:24:55.300 --> 00:24:55.580
What else?

00:24:55.580 --> 00:25:00.840
Not only is Selenium open source, but it is also open standards and open governance.

00:25:00.840 --> 00:25:04.660
Those might be new things or new phrases for some people.

00:25:04.660 --> 00:25:06.200
So let's go over there real quick.

00:25:06.200 --> 00:25:13.540
Open source means that the source code for all the implementations for Selenium web driver,

00:25:13.620 --> 00:25:17.000
as well as the other tools, Selenium ID and grid, which I'll talk about in a moment.

00:25:17.000 --> 00:25:18.480
Those are all GitHub.

00:25:18.480 --> 00:25:20.020
You can check out the source.

00:25:20.020 --> 00:25:20.700
You can look at it.

00:25:20.700 --> 00:25:21.380
You can fork it.

00:25:21.380 --> 00:25:22.160
You can make changes.

00:25:22.160 --> 00:25:23.920
You want to contribute to the main project.

00:25:23.920 --> 00:25:25.860
You can submit pull requests.

00:25:25.860 --> 00:25:28.200
And so that is all open and free.

00:25:28.200 --> 00:25:29.400
Open standards.

00:25:29.400 --> 00:25:30.620
What does that mean?

00:25:30.620 --> 00:25:36.180
The way Selenium works is it uses the web driver protocol to communicate with browsers.

00:25:36.180 --> 00:25:40.080
Web driver as a protocol is a W3C standard.

00:25:40.080 --> 00:25:44.260
It's something that all major browser vendors are supposed to conform to.

00:25:44.260 --> 00:25:48.860
And the reason, and that was a hard fall battle to get that to be a W3C recommendation.

00:25:48.860 --> 00:25:54.540
What that means is that hopefully in perpetuity, web driver will work with every major browser

00:25:54.540 --> 00:25:55.420
out there, right?

00:25:55.420 --> 00:25:56.660
So that there's this guarantee.

00:25:56.660 --> 00:25:59.660
We get a Zerodium instead of a Chromium in the future.

00:25:59.660 --> 00:26:00.940
Theoretically.

00:26:00.940 --> 00:26:01.560
Exactly.

00:26:01.560 --> 00:26:03.060
Theoretically it'll come with that, right?

00:26:03.060 --> 00:26:06.740
So that we could use the same protocol, meaning we could use the same tools to automate the

00:26:06.740 --> 00:26:07.900
basic browser interactions.

00:26:07.900 --> 00:26:09.440
So that's open standards.

00:26:09.440 --> 00:26:16.480
Open governance means that Selenium is not controlled by any single party or private entity or single

00:26:16.480 --> 00:26:16.920
company.

00:26:16.920 --> 00:26:23.080
The way that the Selenium project is governed is by a consortium of open source contributors

00:26:23.080 --> 00:26:23.760
and collaborators.

00:26:23.760 --> 00:26:27.900
I know many of these folks, they span multiple different companies.

00:26:27.900 --> 00:26:30.980
And so that way it's not like one person can control it.

00:26:30.980 --> 00:26:32.400
One person can't kill it.

00:26:32.400 --> 00:26:34.020
And again, everything is open.

00:26:34.020 --> 00:26:37.620
So it's not like it's a secret little cabal that everybody's scheming together.

00:26:37.620 --> 00:26:41.040
No, you can go read the meeting notes or the monthly meetings of the Selenium team.

00:26:41.040 --> 00:26:42.420
That's Selenium in a nutshell.

00:26:42.420 --> 00:26:46.520
Most times when people talk about Selenium for browser automation, that means Selenium web

00:26:46.520 --> 00:26:46.780
driver.

00:26:46.780 --> 00:26:51.480
That's like when you pip install Selenium in Python, you're getting the Selenium web driver

00:26:51.480 --> 00:26:51.940
package.

00:26:51.940 --> 00:26:56.580
That's the Python language bindings for the web driver protocol that you can go communicate

00:26:56.580 --> 00:26:57.140
with the browser.

00:26:57.140 --> 00:27:03.180
The other two projects Selenium IDE is a basically like a visual builder.

00:27:03.180 --> 00:27:07.660
So instead of you trying to figure out your expats and everything, you can use Selenium IDE to kind of

00:27:07.660 --> 00:27:10.060
create a visual builder for your test case steps.

00:27:10.600 --> 00:27:15.780
And the other project they have is Selenium grid, which is this scale out solution.

00:27:15.780 --> 00:27:23.220
So rather than running all the browsers on your local machine for testing, because that will max out your system resources very quickly.

00:27:23.220 --> 00:27:25.860
If you parallelize, you can distribute that remotely.

00:27:26.220 --> 00:27:32.580
So you can have like a cluster of nodes that have IE, some of them have Chrome, some have Safari.

00:27:32.580 --> 00:27:36.600
And so then you make remote requests and do the automation that way.

00:27:36.600 --> 00:27:37.320
So that's Selenium.

00:27:37.320 --> 00:27:38.620
Okay.

00:27:38.620 --> 00:27:39.540
Very cool.

00:27:39.540 --> 00:27:41.720
And like you said, it's been around for a while.

00:27:41.720 --> 00:27:44.740
And then the new one on the block is Playwright.

00:27:46.360 --> 00:27:52.760
And it's conceptually people should think of it like similar to Selenium, I think is your mental model, I would guess.

00:27:52.760 --> 00:27:55.860
But then it has some differences and advantages.

00:27:55.860 --> 00:28:00.000
One of which is it had 10 years of experience to build upon.

00:28:00.000 --> 00:28:01.020
True, true.

00:28:01.020 --> 00:28:02.340
Maybe tell us about Playwright.

00:28:02.340 --> 00:28:02.960
Sure, sure.

00:28:02.960 --> 00:28:08.980
So Selenium and Playwright at their core, the highest level are both browser automation tools.

00:28:08.980 --> 00:28:14.020
They go in, they do the clicks, they do the scrapes, you know, they send back the answers.

00:28:14.500 --> 00:28:16.100
So in that sense, they're similar.

00:28:16.100 --> 00:28:21.920
And also the main, I should also just caveat this, the main use case for both Selenium and Playwright is test automation.

00:28:21.920 --> 00:28:25.160
You could use it for any kind of automation, but primarily people use it for testing.

00:28:25.160 --> 00:28:25.700
Right, okay.

00:28:25.700 --> 00:28:28.460
And I will talk mainly in the domain of testing.

00:28:28.460 --> 00:28:36.660
I mean, you could use this to like, if you wanted to, I don't know, like refresh a page every hour and scrape it using Scrappy or something.

00:28:36.660 --> 00:28:39.640
But anyway, let's talk, just keep the focus on testing.

00:28:39.780 --> 00:28:49.420
I kind of would have like, in my history, would have liked to automate registering for college classes so I could get the 10 a.m. classes, not the 7.30 a.m. calculus class.

00:28:49.420 --> 00:28:49.980
Yep, yep.

00:28:49.980 --> 00:28:52.000
If only, if only, right?

00:28:52.800 --> 00:28:55.420
So Playwright, Selenium, both browser automation tools.

00:28:55.420 --> 00:28:59.120
But the ways in which they go about that are different.

00:28:59.120 --> 00:29:04.600
Selenium uses that web driver protocol, which kind of operates outside the browser, right?

00:29:04.600 --> 00:29:07.380
Playwright uses debug protocols.

00:29:08.080 --> 00:29:11.920
So basically, Chrome dev tools and Firefox's equivalent and all that.

00:29:11.920 --> 00:29:13.560
That's what Playwright focuses on.

00:29:13.560 --> 00:29:21.740
In that case, Playwright can access things about a browser that either Selenium can't or Selenium struggles to.

00:29:21.740 --> 00:29:26.420
It also makes Playwright run a bit faster than Selenium.

00:29:26.420 --> 00:29:31.620
One of the big complaints about Selenium-based tests is that they are slow.

00:29:31.620 --> 00:29:36.960
Now, this is due to the nature of them being black box that you need to have the whole system up.

00:29:36.960 --> 00:29:38.080
The fact that...

00:29:38.080 --> 00:29:38.120
Right.

00:29:38.120 --> 00:29:43.940
Launch your entire browser and then we're going to send messages and then shut it down and then launch it again for the next test.

00:29:43.940 --> 00:29:44.360
Right, right.

00:29:44.360 --> 00:29:45.340
Like that kind of stuff, right?

00:29:45.340 --> 00:29:49.980
So there is, based on the nature of UI or black box testing, there is sluggishness there.

00:29:50.200 --> 00:29:55.120
But at the same time, like you just mentioned, you know, the whole browser setup thing can be kind of slow.

00:29:55.120 --> 00:29:57.880
Playwright has some optimizations there that are pretty...

00:29:57.880 --> 00:29:58.920
So it can be a little bit fast.

00:29:58.920 --> 00:30:08.920
Another big difference between Playwright and Selenium, Selenium WebDriver is meant to be more of a low-level interface.

00:30:08.920 --> 00:30:13.960
So the interactions that you would do with Selenium are very raw.

00:30:13.960 --> 00:30:17.100
Like when you do a click, it'll send a click event and that's it.

00:30:17.100 --> 00:30:19.160
It doesn't wait for the thing to be received.

00:30:19.160 --> 00:30:21.860
It doesn't wait for the page to load or do anything magic.

00:30:21.860 --> 00:30:22.860
It just goes.

00:30:22.860 --> 00:30:28.280
And so with Selenium, you have to do a lot of explicit waiting for things.

00:30:28.280 --> 00:30:35.920
Because if you click and you don't wait for the page to reflect and then you proceed to your next interaction, the page might not be ready.

00:30:35.920 --> 00:30:39.160
The element might not be loaded and your test will go kaboom.

00:30:39.160 --> 00:30:43.240
And then your test suite gets criticized for being quote-unquote flaky.

00:30:43.240 --> 00:30:44.000
Yeah, absolutely.

00:30:44.000 --> 00:30:47.000
Well, this is like what happens in the JavaScript world.

00:30:47.000 --> 00:30:49.360
It's not the instant the page shows up.

00:30:49.360 --> 00:30:51.340
It's got to then bring down the JavaScript.

00:30:51.340 --> 00:30:55.820
Then maybe the JavaScript talks to some API and then it comes back and it binds to some stuff.

00:30:55.820 --> 00:30:59.680
Like there's a bunch of network steps with built-in latency there.

00:30:59.680 --> 00:31:00.240
Exactly.

00:31:00.240 --> 00:31:04.620
That is the pain point of all types of black box testing.

00:31:04.780 --> 00:31:06.580
There are inherent race conditions.

00:31:06.580 --> 00:31:15.760
And when you do test automation in that type of space, then you need to handle appropriate waiting for those race conditions or else your test will be flaky.

00:31:16.200 --> 00:31:22.860
And so in that sense, Selenium WebDriver, the tool does get a bad rap for being flaky when it's not WebDriver itself.

00:31:22.860 --> 00:31:28.700
99% of the time, it's actually the tests written using WebDriver that don't have those explicit waits in there.

00:31:28.700 --> 00:31:34.360
But on the other hand, like the tool gets used in the way that the tool encourages itself to be used.

00:31:34.360 --> 00:31:35.700
And so, yeah.

00:31:35.700 --> 00:31:36.440
Exactly.

00:31:36.440 --> 00:31:38.140
And so that's exactly where I was going.

00:31:38.140 --> 00:31:47.080
Because when you see some method, driver.click, you as the programmer expect it to click and kind of wait for things, right?

00:31:47.080 --> 00:31:48.600
Like that's kind of what you think.

00:31:48.600 --> 00:31:49.080
Nope.

00:31:49.080 --> 00:31:49.780
No, no.

00:31:49.780 --> 00:32:01.060
And so from experience working on many of these types of test automation projects across all languages and tools, when people are automating their tests, waiting is something that a lot of times they just don't even think of, right?

00:32:01.060 --> 00:32:02.960
Especially when they're newer to it.

00:32:02.960 --> 00:32:10.860
Whether that is a manual tester who's learning automation for the first time or a developer who's crossing over to automate some tests, you know?

00:32:10.860 --> 00:32:11.180
Yeah.

00:32:11.180 --> 00:32:17.720
Well, I mean, maybe you're just testing your local dev machine running on a local dev server where there's no network latency.

00:32:18.080 --> 00:32:24.100
And then you go and test against your microservice deployed cloud CDN thing.

00:32:24.100 --> 00:32:26.520
And it just doesn't behave the same, right?

00:32:26.520 --> 00:32:26.960
Exactly.

00:32:26.960 --> 00:32:28.580
It could have been working and working and working and working.

00:32:28.580 --> 00:32:29.540
And now it's flaky.

00:32:29.540 --> 00:32:30.000
Exactly.

00:32:30.000 --> 00:32:37.560
So with that in mind, with Selenium being that low-level kind of tool, I mean, I've even talked and heard from the Selenium people on this.

00:32:37.560 --> 00:32:42.980
Their thought is WebDriver is meant to be a low-level tool that you have to handle all those things yourself.

00:32:43.440 --> 00:32:50.140
And they even encourage you, you have, you know, layers and frameworks on top of Selenium that will handle that kind of stuff for your needs.

00:32:50.140 --> 00:33:00.360
In fact, at my previous company, I created an open source project in C# called Boa Constrictor, which is a .NET implementation of the screenplay pattern to handle those kinds of things.

00:33:00.460 --> 00:33:04.560
Like in Java, you have Serenity BDD, which has a layer over it like that.

00:33:04.560 --> 00:33:05.840
There's something called Selenide.

00:33:05.840 --> 00:33:09.520
You know, there's tons of different little projects out there.

00:33:09.520 --> 00:33:09.780
Sure.

00:33:09.780 --> 00:33:10.960
Compared to Playwright.

00:33:10.960 --> 00:33:16.060
Playwright is not a low-level interaction tool.

00:33:16.060 --> 00:33:23.460
Playwright is meant to be more modern, more refined, more high-level, more do-things-for-you, where the framework is there to help you.

00:33:23.460 --> 00:33:31.900
And so when it comes to waiting, most of the time that you need to do waiting in Playwright, Playwright handles it for you automatically.

00:33:31.900 --> 00:33:45.060
So for any single interaction where you are interacting with an element, depending on that type of interaction, there is a specific kind of wait automatically built in for that element, that target element to be ready before it does anything with it.

00:33:45.060 --> 00:33:51.540
You know, so before you go to click an element, Playwright's going to be like, whoa, whoa, whoa, let's wait about five seconds until it appears on the page.

00:33:51.540 --> 00:33:54.260
And once that thing appears, it's a smart wait.

00:33:54.260 --> 00:33:56.580
So boom, it'll dive in and do it then.

00:33:56.580 --> 00:34:01.060
So you don't have that flakiness that perbades so many older test suites.

00:34:01.060 --> 00:34:01.660
It's so good.

00:34:01.660 --> 00:34:05.560
And when your tests are flaky, then you just, doesn't matter if it fails, whatever.

00:34:05.560 --> 00:34:06.580
It fails sometimes.

00:34:06.580 --> 00:34:07.220
Right?

00:34:07.220 --> 00:34:08.800
As opposed to, oh no, the test failed.

00:34:08.800 --> 00:34:09.360
What happened?

00:34:09.360 --> 00:34:10.000
What went wrong?

00:34:10.000 --> 00:34:10.520
Mm-hmm.

00:34:10.520 --> 00:34:11.300
Mm-hmm.

00:34:11.300 --> 00:34:11.880
Exactly.

00:34:11.880 --> 00:34:17.700
You want to have a lot of faith and trust that a broken build means something or a failed test means something.

00:34:17.700 --> 00:34:18.060
Yes.

00:34:18.060 --> 00:34:25.100
This portion of Talk Python to Me is brought to you by the Compiler Podcast from Red Hat.

00:34:25.100 --> 00:34:28.420
Just like you, I'm a big fan of podcasts.

00:34:28.420 --> 00:34:36.140
And I'm happy to share a new one from a highly respected and open source company, Compiler, an original podcast from Red Hat.

00:34:36.140 --> 00:34:41.480
With more and more of us working from home, it's important to keep our human connection with technology.

00:34:41.480 --> 00:34:43.620
With Compiler, you'll do just that.

00:34:43.620 --> 00:34:51.580
The Compiler Podcast unravels industry topics, trends, and things you've always wanted to know about tech through interviews with people who know it best.

00:34:51.580 --> 00:34:55.760
These conversations include answering big questions like, what is technical debt?

00:34:55.760 --> 00:34:58.500
What are hiring managers actually looking for?

00:34:58.500 --> 00:35:01.800
And do you have to know how to code to get started in open source?

00:35:02.520 --> 00:35:11.220
I was a guest on Red Hat's previous podcast, Command Line Heroes, and Compiler follows along in that excellent and polished style we came to expect from that show.

00:35:11.220 --> 00:35:15.100
I just listened to episode 12 of Compiler, How Should We Handle Failure?

00:35:15.100 --> 00:35:25.040
I really valued their conversation about making space for developers to fail so that they can learn and grow without fear of making mistakes or taking down the production website.

00:35:25.280 --> 00:35:27.800
It's a conversation we can all relate to, I'm sure.

00:35:27.800 --> 00:35:32.600
Listen to an episode of Compiler by visiting talkpython.fm/compiler.

00:35:32.600 --> 00:35:34.740
The link is in your podcast player's show notes.

00:35:34.740 --> 00:35:41.180
You can listen to Compiler on Apple Podcasts, Overcast, Spotify, Pocket Cast, or anywhere you listen to your podcasts.

00:35:41.180 --> 00:35:45.480
And yes, of course, you could subscribe by just searching for it in your podcast player,

00:35:45.620 --> 00:35:51.780
but do so by following talkpython.fm/compiler so that they know that you came from Talk Python To Me.

00:35:51.780 --> 00:35:57.040
My thanks to the Compiler Podcast for keeping this podcast going strong.

00:35:57.040 --> 00:36:05.760
Before we dive in too much to Playwright, just a couple of questions that I think there that are interesting and worth covering.

00:36:05.760 --> 00:36:10.440
Dave Sharp says, I use Selenium for some headless browser tests and automations.

00:36:10.440 --> 00:36:11.640
Is that possible with Playwright?

00:36:11.640 --> 00:36:11.980
Yes.

00:36:11.980 --> 00:36:12.360
Yeah.

00:36:12.360 --> 00:36:12.840
Yeah.

00:36:12.940 --> 00:36:16.940
So real similar, I think the API is probably a little cleaner as well, as we'll see in a minute.

00:36:16.940 --> 00:36:20.720
Then Micah also says, absolutely can recommend Playwright.

00:36:20.720 --> 00:36:27.520
And the robot framework side browser library is built on Playwright and Selenium library on top of Selenium.

00:36:27.520 --> 00:36:29.060
Faster and just makes sense.

00:36:29.060 --> 00:36:29.600
Boom.

00:36:29.600 --> 00:36:30.440
Very cool.

00:36:30.440 --> 00:36:31.100
All right.

00:36:31.100 --> 00:36:34.060
Well, we've talked about some of these differences and stuff.

00:36:34.060 --> 00:36:42.380
Let's maybe just highlight some of the, you've introduced it pretty well across browser because it does Chromium WebKit and Firefox.

00:36:42.640 --> 00:36:47.380
And when you say Chromium these days, you're like 96% of all the browsers, sadly.

00:36:47.380 --> 00:36:49.280
That covers a lot, right?

00:36:49.280 --> 00:36:57.260
That's not just testing for Chrome, but that's testing for Edge, Brave, Vivaldi, et cetera, et cetera, cross-platform.

00:36:57.260 --> 00:37:03.120
I want to go back to browser because there is an interesting difference here to note between Selenium and Playwright.

00:37:03.120 --> 00:37:06.480
When you use Selenium, you're testing the full browsers, right?

00:37:06.480 --> 00:37:07.460
You're testing Google Chrome.

00:37:07.460 --> 00:37:10.140
You're testing Mozilla Firefox, Microsoft Edge.

00:37:10.140 --> 00:37:13.080
Does it even load up like extensions and stuff like that?

00:37:13.080 --> 00:37:14.580
Or is it just, is it more bare?

00:37:14.580 --> 00:37:16.780
Is it like maybe just below your customizations?

00:37:16.940 --> 00:37:18.980
In Selenium, it's the full browser, whatever you've got.

00:37:18.980 --> 00:37:25.900
You can do things from a command line to kind of like play with certain things like what user profile use, what user data directory and all that.

00:37:25.900 --> 00:37:30.340
But essentially, the browser that's installed on your machine is what Selenium WebDriver would use.

00:37:30.340 --> 00:37:33.360
But in Playwright, it doesn't use those quote unquote stock browsers.

00:37:33.360 --> 00:37:35.520
Playwright uses browser projects.

00:37:35.520 --> 00:37:38.420
So with Playwright, you are not testing Google Chrome.

00:37:38.420 --> 00:37:41.020
You are literally testing the Chromium project.

00:37:41.020 --> 00:37:43.000
You're not testing Mozilla Firefox.

00:37:43.000 --> 00:37:45.260
You're testing the open source Firefox project.

00:37:45.260 --> 00:37:47.120
You're not testing Apple Safari.

00:37:47.120 --> 00:37:49.320
You're testing the WebKit project.

00:37:49.320 --> 00:37:58.440
And so when you go to set up and install Playwright, part of the Playwright install command is it will download the latest versions of these browser projects and install them on your machine.

00:37:58.440 --> 00:38:01.680
And so when Playwright runs, it's running against those.

00:38:01.680 --> 00:38:07.020
In a sense, it's a more pure stripped down, just the essence of the rendering engine, JavaScript.

00:38:07.020 --> 00:38:07.560
Exactly.

00:38:07.560 --> 00:38:08.300
VM and stuff.

00:38:08.300 --> 00:38:08.840
Exactly.

00:38:08.840 --> 00:38:10.480
So it is.

00:38:10.480 --> 00:38:11.120
That's really nice.

00:38:11.120 --> 00:38:12.300
It's an opinionated take.

00:38:12.300 --> 00:38:15.060
You seem to have a very positive view of that, Michael.

00:38:15.060 --> 00:38:15.740
I do.

00:38:15.740 --> 00:38:16.420
Yes.

00:38:16.420 --> 00:38:17.400
I think it's cool.

00:38:17.400 --> 00:38:18.240
I think it's awesome.

00:38:18.240 --> 00:38:19.680
I think it's lighter weight.

00:38:19.680 --> 00:38:23.340
But I would also caveat they may not be usable in all contexts.

00:38:23.500 --> 00:38:34.600
Like if you are a government contractor or you're working at some big bank or some of these older, more legacy shops, they may have very strict requirements on browsers and versions to test.

00:38:34.600 --> 00:38:35.560
It's out there.

00:38:35.560 --> 00:38:36.100
It exists.

00:38:36.100 --> 00:38:43.180
Maybe you want IE 11 and you've got to just run that because they're they're crummy SharePoint installation from 10 years ago.

00:38:43.180 --> 00:38:43.760
Stuff like that.

00:38:43.760 --> 00:38:48.180
Unwilling to upgrade like anything but that log into it or some weird thing like that.

00:38:48.180 --> 00:38:48.300
Right.

00:38:48.340 --> 00:38:48.620
Exactly.

00:38:48.620 --> 00:38:52.740
So anything like that may be a showstopper for folks who want to use Playwright.

00:38:52.740 --> 00:38:57.980
My gut tells me that's a very, very small sliver of the wider industry, but it is something to call it.

00:38:57.980 --> 00:39:01.300
So kind of modern web browsers is where you're going to end up.

00:39:01.300 --> 00:39:02.120
Yes, exactly.

00:39:02.120 --> 00:39:02.780
Exactly.

00:39:02.780 --> 00:39:03.160
Sure.

00:39:03.160 --> 00:39:03.780
Okay.

00:39:03.780 --> 00:39:08.820
Across platform, Windows, Linux, Mac plus CI and headless.

00:39:08.820 --> 00:39:17.340
That was sort of touched upon in Dave's question, but maybe discuss this headless versus headed idea of this, these types of frameworks.

00:39:17.340 --> 00:39:17.900
Sure, sure.

00:39:18.060 --> 00:39:21.780
So when you're the human and you open up your browser, that's headed mode.

00:39:21.780 --> 00:39:23.160
Why is it called headed mode?

00:39:23.160 --> 00:39:29.280
Because it's rendering in front of you and it's doing all that fun stuff and you can see it visibly on the screen or in whatever viewports you've got.

00:39:29.280 --> 00:39:35.020
Headless mode is a way that you can run browsers without having it pop up on the screen and render all that stuff.

00:39:35.020 --> 00:39:36.000
It'll still do the rendering.

00:39:36.000 --> 00:39:38.040
It just won't graphically display that to you.

00:39:38.040 --> 00:39:46.740
When you run automated tests, specifically like in a continuous integration environment, maybe in a GitHub action or something, you want to run headless mode.

00:39:46.740 --> 00:39:47.180
Why?

00:39:47.180 --> 00:39:48.720
Because it uses fewer resources.

00:39:48.720 --> 00:39:50.020
It's a little bit faster.

00:39:50.020 --> 00:39:52.960
Nobody is there to look at the screen when it pops up.

00:39:53.760 --> 00:39:54.640
It's got a button.

00:39:54.640 --> 00:39:55.980
Would you like to upgrade?

00:39:55.980 --> 00:39:56.600
Yeah.

00:39:56.600 --> 00:39:56.980
Yeah.

00:39:56.980 --> 00:39:59.140
Chrome is great, but you should try Edge.

00:39:59.140 --> 00:40:00.160
It has these new shopping.

00:40:00.160 --> 00:40:00.980
No, I don't want that.

00:40:00.980 --> 00:40:01.300
Go on.

00:40:01.300 --> 00:40:01.960
Yeah.

00:40:01.960 --> 00:40:02.380
Thanks.

00:40:03.220 --> 00:40:04.740
I know that wouldn't happen in the project.

00:40:04.740 --> 00:40:09.620
That might be more of a Selenium thing if you get like these weird, typically, you know, periodic pop ups, right?

00:40:09.620 --> 00:40:10.740
From the browser vendors.

00:40:10.740 --> 00:40:11.140
Indeed.

00:40:11.140 --> 00:40:18.020
When headless modes first became popular, I want to say about like five years ago, like it really became popular with PhantomJS.

00:40:18.020 --> 00:40:22.340
And then Chrome basically came along, did the same thing and killed the PhantomJS project.

00:40:22.340 --> 00:40:24.020
The dude just like, I'm done.

00:40:24.020 --> 00:40:25.220
Use Chrome instead.

00:40:25.220 --> 00:40:27.400
Like TLDR on the GitHub repo.

00:40:27.400 --> 00:40:27.920
I was like, wow.

00:40:27.920 --> 00:40:29.480
Now all the browsers do this.

00:40:29.480 --> 00:40:35.240
But it is a recommended practice that when you're running tests for credit, like in CI or something, you do headless mode.

00:40:35.240 --> 00:40:42.680
Also, if you try to do headed mode in certain CI tools or GitHub actions, sometimes you might get these walkie errors like, you couldn't render this thing.

00:40:42.680 --> 00:40:43.040
Yeah.

00:40:43.040 --> 00:40:49.480
Or maybe like the desktop UI tools or frameworks are not set up to actually show windows or some weird thing.

00:40:49.480 --> 00:40:52.280
But headed, you might want to see what happened.

00:40:52.280 --> 00:40:53.960
Like if something goes wrong.

00:40:53.960 --> 00:41:00.280
So you would use headed mode when you are developing the test automation on your workbench.

00:41:00.280 --> 00:41:04.940
Like, you know, I've got Visual Studio Code open and I just code my test.

00:41:04.940 --> 00:41:05.900
I want to run it real quick.

00:41:05.900 --> 00:41:08.020
I want to see it pop up and dance through the page.

00:41:08.020 --> 00:41:08.500
Right.

00:41:08.500 --> 00:41:09.780
That's when I would use headed mode.

00:41:09.780 --> 00:41:11.320
Also, interesting thing.

00:41:11.320 --> 00:41:15.240
I believe by default, Playwright uses headless mode.

00:41:15.240 --> 00:41:17.160
It's not something that you have to.

00:41:17.160 --> 00:41:17.700
Yes.

00:41:17.700 --> 00:41:19.140
I think you're right about that as well.

00:41:19.540 --> 00:41:19.660
Yeah.

00:41:19.660 --> 00:41:23.560
If you want a headed mode, you got a headless equals false or headed equals, I don't know.

00:41:23.560 --> 00:41:24.520
We'll see it in a second.

00:41:24.520 --> 00:41:25.620
We'll get to the examples.

00:41:25.620 --> 00:41:27.200
But you got to opt in.

00:41:27.200 --> 00:41:32.660
And then you already mentioned the Playwright API is TypeScript, JavaScript, Python, .NET, and Java.

00:41:32.660 --> 00:41:34.880
And people are like, ah, I'm not using it.

00:41:34.880 --> 00:41:35.420
It's not Python.

00:41:35.420 --> 00:41:37.860
Well, the browsers aren't Python anyway.

00:41:37.860 --> 00:41:41.640
So it's just like one more layer of who knows how many technologies are in there.

00:41:41.640 --> 00:41:43.860
But like NumPy has a C layer.

00:41:43.860 --> 00:41:47.000
This is like a layer to talk to the thing that does the work.

00:41:47.000 --> 00:41:49.600
And it's a pretty nice API, as we're going to see in a moment.

00:41:49.600 --> 00:41:55.760
And then you can also test mobile web, even if you don't have a mobile web thing, because it has native mobile emulation.

00:41:55.760 --> 00:41:56.060
Yeah.

00:41:56.060 --> 00:41:56.500
Correct.

00:41:56.500 --> 00:42:05.160
That's all, you know, viewport size, some of the little options on whatever request it has, just to kind of somewhat emulate what a mobile browser would look like.

00:42:05.160 --> 00:42:05.400
Yeah.

00:42:05.400 --> 00:42:05.820
Very cool.

00:42:05.820 --> 00:42:09.600
Test like responsiveness and like a bootstrap menu or something.

00:42:09.600 --> 00:42:10.720
Auto-wait.

00:42:10.720 --> 00:42:12.300
That sounds very promising.

00:42:12.300 --> 00:42:16.600
It waits for elements to be actionable prior to trying to click them.

00:42:16.600 --> 00:42:20.500
You already went into the flakiness and race conditions of all that, but that's pretty cool.

00:42:20.500 --> 00:42:22.020
Web-first assertions.

00:42:22.020 --> 00:42:23.140
What does that mean?

00:42:23.140 --> 00:42:24.320
So that sounds good.

00:42:24.320 --> 00:42:24.640
Yeah.

00:42:24.640 --> 00:42:24.820
Yeah.

00:42:24.820 --> 00:42:24.880
Yeah.

00:42:24.880 --> 00:42:25.380
Because you're testing the web.

00:42:25.380 --> 00:42:28.480
So that kind of goes hand in hand with auto-wait.

00:42:28.480 --> 00:42:34.700
For those of you who are familiar with unit testing in Python, whether that's with unit test or pytest.

00:42:34.700 --> 00:42:38.320
No, unit test has its like assert that library.

00:42:38.320 --> 00:42:42.220
pytest, you literally just use the assert command in Python, right?

00:42:42.220 --> 00:42:44.140
Assert this, assert that, all that kind of stuff.

00:42:44.140 --> 00:42:51.780
When it comes to web testing or really any sort of black box testing, the basic kind of assert statements can be limited.

00:42:52.000 --> 00:42:59.140
Again, because a lot of times you have to wait for the value to be ready before you can make a Boolean condition of an assertion on it.

00:42:59.140 --> 00:43:01.560
That's basically what these web-first assertions mean.

00:43:01.560 --> 00:43:04.140
In Playwright, there is an expect function.

00:43:04.140 --> 00:43:05.380
It's in JavaScript.

00:43:05.380 --> 00:43:06.200
It's in Python.

00:43:06.200 --> 00:43:07.260
I think it's in the others.

00:43:07.640 --> 00:43:12.900
But basically, you would say something like expect a certain locator to have a certain text value.

00:43:12.900 --> 00:43:19.980
And what it'll do is it'll wait until said phrase has that text value or wait until this locator appears on the screen.

00:43:19.980 --> 00:43:22.920
It's a more fluid kind of way of writing assertions.

00:43:22.920 --> 00:43:25.000
And it also has that built-in waiting.

00:43:25.000 --> 00:43:32.780
And they call it web-first because it's the idea that it's putting the emphasis of the condition on the web elements as we would naturally understand them.

00:43:32.780 --> 00:43:36.640
Not trying to shoehorn them into some fixed static Boolean condition.

00:43:36.640 --> 00:43:37.720
Yeah, that's very cool.

00:43:37.720 --> 00:43:48.660
Okay, and then the last selling point on resiliency here is tracing, configure tests, retry strategies, capture execution traces, videos, and screenshots.

00:43:48.660 --> 00:43:52.900
So, yeah, we'll see some of the tooling, the GUI tools and stuff for this.

00:43:52.900 --> 00:43:54.860
But, yeah, this sounds really nice.

00:43:54.860 --> 00:43:55.300
Mm-hmm.

00:43:55.300 --> 00:43:55.900
Mm-hmm.

00:43:55.900 --> 00:44:02.520
If your test fails in CI and you get a video, they click there and then that gave a, you know, 400 or something.

00:44:02.640 --> 00:44:06.040
In JavaScript instead of filling up this form, like, that sounds pretty nice.

00:44:06.040 --> 00:44:06.460
Oh, yeah.

00:44:06.460 --> 00:44:10.500
So, yeah, and that's a huge advantage that Playwright has over Selenium as well.

00:44:10.500 --> 00:44:15.760
Like, in Selenium, you can capture screenshots along the way, but there's no built-in video capture.

00:44:15.760 --> 00:44:27.460
In Playwright, you can not only get screenshots if you want explicitly through the code, implicitly you slap on the screenshot command line argument after every single failed test, it'll poop out a screenshot.

00:44:27.460 --> 00:44:30.960
Or you can just be like, give me the whole dang video so I can trace through a watch.

00:44:30.960 --> 00:44:33.040
I mean, screenshots are great.

00:44:33.040 --> 00:44:34.420
Video is lit.

00:44:34.420 --> 00:44:36.400
It's incredible.

00:44:36.400 --> 00:44:38.420
It's like, oh, my gosh, they did it.

00:44:38.420 --> 00:44:40.280
They planted the flag.

00:44:40.280 --> 00:44:41.140
Victory.

00:44:41.140 --> 00:44:42.220
This is amazing.

00:44:42.220 --> 00:44:45.820
Yeah, because it's one thing to see it where you have it in headed mode and you can interact.

00:44:45.820 --> 00:44:50.420
It's another when it's on a remote system, maybe a different platform, and you're like, what went wrong with this thing?

00:44:50.520 --> 00:44:50.880
Exactly.

00:44:50.880 --> 00:44:52.500
Because, like, that's the thing.

00:44:52.500 --> 00:44:59.280
Like, in olden times, I kid you not, when people did automation, they would literally push the button on the machine and just, like, watch it go.

00:44:59.280 --> 00:45:00.720
Wait for it to finish.

00:45:00.720 --> 00:45:01.940
And that was automation.

00:45:01.940 --> 00:45:02.960
No, no, no, no.

00:45:02.960 --> 00:45:05.500
Like, true automation is it's in some sort of CI system.

00:45:05.500 --> 00:45:13.520
You know, it runs on a, after every pull request, after every commit, or maybe if the test suite is too big, it runs nightly or, you know, a couple times a week.

00:45:13.760 --> 00:45:15.920
You are not there to watch it fail, right?

00:45:15.920 --> 00:45:18.000
So you need all the evidence you can get.

00:45:18.000 --> 00:45:19.180
What's the best evidence?

00:45:19.180 --> 00:45:19.640
Video.

00:45:19.640 --> 00:45:22.160
Video to see what's happening, and then you dig into logs.

00:45:22.160 --> 00:45:26.300
Yeah, I mean, your only visibility is spinning, spinning on CI and then failed.

00:45:26.300 --> 00:45:26.920
Exactly.

00:45:26.920 --> 00:45:28.960
And so, yeah, it's really good.

00:45:28.960 --> 00:45:29.800
I love it.

00:45:29.800 --> 00:45:30.380
Okay.

00:45:30.380 --> 00:45:35.380
Stuff about running on modern platforms, but then let's talk the isolation.

00:45:35.380 --> 00:45:36.920
I think that that's huge.

00:45:36.920 --> 00:45:41.600
There's two things about sort of authentication and cookies and stuff like that.

00:45:41.600 --> 00:45:42.320
It's pretty interesting.

00:45:43.160 --> 00:45:45.480
But then just also the isolation, right?

00:45:45.480 --> 00:45:48.560
You have this very much in testing, right?

00:45:48.560 --> 00:45:49.120
Yes.

00:45:49.120 --> 00:45:54.080
You don't want to depend on the order of tests, for example, at a unit test.

00:45:54.080 --> 00:45:59.380
And this, you kind of like don't want to depend upon the last page you visited for browser tests.

00:45:59.380 --> 00:46:04.100
And specifically with the isolation and Playwright and the browser context here.

00:46:04.200 --> 00:46:13.980
You had mentioned earlier, Michael, about in Selenium, how for every single test, you would have to open a new browser, open a new web driver process, and at the end of it, close it, close it.

00:46:14.220 --> 00:46:19.600
And the reason you do that, you open and close for every single test is because you want that isolation, right?

00:46:19.600 --> 00:46:23.540
You don't want to share web browsers across tests because things can go wrong.

00:46:23.940 --> 00:46:30.460
With Playwright, one of the optimizations is for the entirety of your test suite, you do only have one browser process.

00:46:30.460 --> 00:46:32.740
So you only have one Chromium process.

00:46:32.740 --> 00:46:37.300
It's at the beginning of everything you started up and it exists throughout all tests and you close it.

00:46:37.300 --> 00:46:40.680
You're like, well, how, wait, doesn't that violate independence and isolation?

00:46:41.120 --> 00:46:44.580
What Playwright does is it creates what's called browser contexts out of that.

00:46:44.580 --> 00:46:46.240
So the slow part is...

00:46:46.240 --> 00:46:49.580
It's like a new private incognito window sort of, right?

00:46:49.580 --> 00:46:50.260
Yes, exactly.

00:46:50.260 --> 00:46:55.160
It's basically like your own session, your own window, your own user account kind of thing.

00:46:55.160 --> 00:46:58.360
Browser contexts are very quick to create and close.

00:46:58.360 --> 00:47:03.140
So you don't have the like five second to 10 second startup and teardown time per test.

00:47:03.140 --> 00:47:04.020
It's like a split second.

00:47:04.020 --> 00:47:06.620
So that makes you be able to set up your test a lot faster.

00:47:06.620 --> 00:47:09.840
And it's basically, it's like an incognito session.

00:47:09.980 --> 00:47:12.300
So you have access to everything in your scope.

00:47:12.300 --> 00:47:18.420
But if there are other contexts running at the same time, e.g. you're running parallel tests,

00:47:18.420 --> 00:47:20.840
you can't access anything in the other sandboxes.

00:47:20.840 --> 00:47:21.760
So it's safe.

00:47:21.760 --> 00:47:24.920
And it's really a game changer for browser-based testing.

00:47:24.920 --> 00:47:30.080
And as you mentioned, just like I have a quick count, I think I have six browser tabs

00:47:30.080 --> 00:47:32.580
and a progressive web app open right now.

00:47:32.580 --> 00:47:34.300
They don't interact, right?

00:47:34.300 --> 00:47:35.640
I mean, that's just how browsers are built.

00:47:35.640 --> 00:47:38.840
That if I visit playwright.dev and then some other...

00:47:38.840 --> 00:47:43.560
Selenium, whatever, they don't get to spy on each other, right?

00:47:43.560 --> 00:47:45.040
That's just how it works.

00:47:45.040 --> 00:47:48.460
And so it leverages that to say, well, we can do more than one tab at once.

00:47:48.460 --> 00:47:48.840
Let's go.

00:47:49.280 --> 00:47:55.640
And all of your authentication or browser context, you know, any of the cookies you have protected by browser context.

00:47:55.640 --> 00:47:57.940
So you can do a lot of really cool stuff.

00:47:57.940 --> 00:48:03.560
It's not just you're on a different tab because that comes down to pages off of browser context, which is another thing.

00:48:03.560 --> 00:48:07.000
But it's full context of what's going on.

00:48:07.000 --> 00:48:07.420
Yeah.

00:48:07.420 --> 00:48:08.060
Yeah.

00:48:08.060 --> 00:48:08.540
Yeah.

00:48:08.540 --> 00:48:08.860
Very cool.

00:48:09.300 --> 00:48:16.240
And then the last sort of selling point that Playwright talks about is that they have a bunch of tooling to go along and help you, right?

00:48:16.460 --> 00:48:18.880
We're going to talk about the API next and go see that.

00:48:18.880 --> 00:48:20.500
And the API is really nice.

00:48:20.500 --> 00:48:23.840
But sometimes you're like, oh, what is that CSS selector?

00:48:23.840 --> 00:48:27.660
And I've been writing CSS selectors for many years, so it doesn't bother me.

00:48:27.660 --> 00:48:32.040
But I remember the beginning of like, what does it mean when there's the arrow versus not the arrow?

00:48:32.040 --> 00:48:36.560
Or does it need the space or not the space between the dot and the preceding element?

00:48:36.560 --> 00:48:39.200
You're just like, oh, I'd rather just go hit me with a stick.

00:48:39.260 --> 00:48:39.940
I've done more content.

00:48:39.940 --> 00:48:41.460
I just can't take this anymore.

00:48:41.460 --> 00:48:43.000
I'm pulling my hair out.

00:48:43.000 --> 00:48:50.800
So there's some tools like a code gen, sort of record my interactions and then generate Python or other language, I guess.

00:48:50.800 --> 00:48:52.760
For me, that'll help a lot there, right?

00:48:52.760 --> 00:48:53.120
Yep.

00:48:53.120 --> 00:48:55.300
Maybe we could talk a bit about really high level.

00:48:55.300 --> 00:48:56.680
Then we could like, we'll dive in.

00:48:56.680 --> 00:48:57.960
We'll pull some pictures about it.

00:48:57.960 --> 00:48:58.360
Sure, sure.

00:48:58.360 --> 00:48:58.900
Yeah.

00:48:58.900 --> 00:49:01.240
I mean, it's basically that like it fires up a browser.

00:49:01.240 --> 00:49:02.020
You click through.

00:49:02.020 --> 00:49:02.800
You say, I'm done.

00:49:02.800 --> 00:49:05.920
And then poops out all the stuff you did in Playwright code.

00:49:05.920 --> 00:49:06.100
Yeah.

00:49:06.100 --> 00:49:07.760
Well, you talked about it using the dev tools.

00:49:07.880 --> 00:49:10.320
It's very much like the inspect element of the dev tools.

00:49:10.320 --> 00:49:10.600
Yep.

00:49:10.600 --> 00:49:11.020
Okay.

00:49:11.020 --> 00:49:18.180
And then there's an inspector, a similar, but also kind of like lets you step through and a trace viewer as well.

00:49:18.180 --> 00:49:21.800
That's a little bit like the network tab, I guess, plus snapshots.

00:49:21.800 --> 00:49:22.380
Yeah, yeah.

00:49:22.380 --> 00:49:22.980
Screenshots.

00:49:22.980 --> 00:49:29.180
So trace viewer is something that you would kind of put on a test for monitoring and then it poops out all the logs and stuff.

00:49:29.180 --> 00:49:32.620
So you can kind of better trace through it after the test is done.

00:49:32.620 --> 00:49:34.740
Live DOM snapshots and all that good stuff.

00:49:34.740 --> 00:49:35.640
Okay, cool.

00:49:35.820 --> 00:49:38.540
Let's maybe talk through some of the code and how it works.

00:49:38.540 --> 00:49:39.360
Install.

00:49:39.360 --> 00:49:40.200
Easy.

00:49:40.200 --> 00:49:41.320
Know it.

00:49:41.320 --> 00:49:41.940
Love it.

00:49:41.940 --> 00:49:42.680
Pip install it.

00:49:42.680 --> 00:49:44.120
But it looks like there's two steps.

00:49:44.120 --> 00:49:46.220
I pip install Playwright and then I playwright install.

00:49:46.220 --> 00:49:47.200
Ah, yes, yes.

00:49:47.200 --> 00:49:51.500
So pip install Playwright is what's going to give you the Python Playwright package.

00:49:51.500 --> 00:49:52.840
I know that's a lot of P's.

00:49:52.840 --> 00:49:58.920
What Playwright install does is it installs those browser projects, Chromium, Firefox, and WebKit.

00:49:59.000 --> 00:49:59.480
Right, okay.

00:49:59.480 --> 00:50:03.940
You can also, I think you can do Playwright install Chromium if you want just one, right?

00:50:03.940 --> 00:50:04.140
Correct.

00:50:04.140 --> 00:50:04.680
You can focus in.

00:50:04.680 --> 00:50:04.960
Yep.

00:50:04.960 --> 00:50:06.620
You can pick the one to install.

00:50:06.620 --> 00:50:07.620
Yeah, but it's 2022.

00:50:07.620 --> 00:50:08.680
Just install them all.

00:50:08.680 --> 00:50:09.540
Let it have it.

00:50:09.540 --> 00:50:09.680
Yep.

00:50:10.040 --> 00:50:13.700
One other thing that if you're in Python, I would strongly recommend you include would

00:50:13.700 --> 00:50:18.540
be a pip install Playwright pytest, which is the pytest plugin for Playwright.

00:50:18.540 --> 00:50:20.360
Again, plop, plop, plop, plop.

00:50:21.080 --> 00:50:25.460
The Playwright package alone is going to be the browser automation tool.

00:50:25.460 --> 00:50:32.960
The pytest plugin for Playwright is what gives you all the tie-ins to pytest so you can make

00:50:32.960 --> 00:50:34.440
really nice tests.

00:50:34.440 --> 00:50:40.280
It gives you the command line options like the headed option or the video option.

00:50:40.280 --> 00:50:43.260
It gives you the fixtures for getting the context and the page.

00:50:43.260 --> 00:50:48.840
So if you're going to be using it for testing, definitely Python, Playwright, plus pytest.

00:50:48.840 --> 00:50:50.020
Amazing combo.

00:50:50.020 --> 00:50:50.500
Cool.

00:50:50.680 --> 00:50:57.000
If you're just doing pure automation, maybe you don't need the pytest plugins and so on.

00:50:57.000 --> 00:50:57.480
Yeah, cool.

00:50:57.480 --> 00:50:57.840
Okay.

00:50:57.840 --> 00:50:59.600
So we've installed it.

00:50:59.600 --> 00:51:07.680
And then immediately what might catch your eye is when I import, I import Playwright.either

00:51:07.680 --> 00:51:09.800
sync API or async API.

00:51:09.800 --> 00:51:12.300
And you're like, oh, wait, there's two APIs.

00:51:12.300 --> 00:51:12.820
How lovely.

00:51:12.820 --> 00:51:17.660
But maybe talk us through what the code, keep in mind this audio, but give us a sense of

00:51:17.660 --> 00:51:19.920
what does it feel like to write code for the sync API?

00:51:19.920 --> 00:51:21.400
And then we can see how it changes with async.

00:51:21.400 --> 00:51:21.880
Sure, sure.

00:51:21.880 --> 00:51:25.040
So with the sync API, of course, everything is step by step.

00:51:25.040 --> 00:51:26.860
It waits before it goes on to the next thing.

00:51:26.860 --> 00:51:31.400
I would say if you're doing test automation in Python, the sync API is the way to go.

00:51:31.400 --> 00:51:35.540
And in fact, that pytest fixture I mentioned gives you everything sync.

00:51:35.540 --> 00:51:39.860
You would use async if you're doing more just rogue automation.

00:51:39.860 --> 00:51:42.420
You know, you're trying to sign up for your college courses.

00:51:42.420 --> 00:51:44.220
That would be what you would use the async.

00:51:44.300 --> 00:51:50.700
So in this little snippet, what it's doing here is with sync API, you're saying browser

00:51:50.700 --> 00:51:52.560
equals p chromium launch.

00:51:52.560 --> 00:51:56.780
That's opening up a chromium browser instance for Playwright.

00:51:56.780 --> 00:51:58.300
So that's the full browser.

00:51:58.300 --> 00:51:59.680
That's the start of the browser process.

00:51:59.920 --> 00:52:03.980
Then off of that, the next line, page equals browser.newpage.

00:52:03.980 --> 00:52:09.400
What it's saying there is from that browser instance, create a under the hood.

00:52:09.400 --> 00:52:12.220
This is not included here, but create a new browser context.

00:52:12.220 --> 00:52:16.880
And from that browser context, create a new page and give me the page options.

00:52:17.140 --> 00:52:21.500
All of the interactions in Playwright are going to be going off of that page.

00:52:21.500 --> 00:52:27.160
If you want to click, if you want to scrape, if you want to send text, all that is going to be on the page.

00:52:27.160 --> 00:52:33.720
So following that, the next line is the first call we see page.go to, you know, some web address,

00:52:33.720 --> 00:52:36.000
http colon slash /playwright.dev.

00:52:36.000 --> 00:52:40.440
So that would be an example of a browser interaction on the page.

00:52:40.440 --> 00:52:45.080
That one, because that will load the webpage, it's directly off the page.

00:52:45.220 --> 00:52:53.140
A lot of times you might need to say page.locator with your CSS selector, expat ID to identify an element on the page

00:52:53.140 --> 00:52:54.660
and then do something on the element.

00:52:54.660 --> 00:52:57.820
So you would say page.locator, blah, blah, blah, dot click.

00:52:57.820 --> 00:53:01.300
Page.locator.fill with certain text.

00:53:01.300 --> 00:53:02.300
That would be like typing text.

00:53:02.300 --> 00:53:02.820
Right, okay.

00:53:02.820 --> 00:53:04.180
Then the next line we see here.

00:53:04.180 --> 00:53:06.740
Nice, then you can access like properties like page.title, right?

00:53:06.740 --> 00:53:09.120
Oh yeah, you can get page title, you can get page URL.

00:53:09.120 --> 00:53:14.580
I don't know the exact names of everything, but if you're using like Visual Studio Code

00:53:14.580 --> 00:53:18.120
and Python typing, then you can get on a complete and find the whole list.

00:53:18.120 --> 00:53:18.880
Beautiful.

00:53:18.880 --> 00:53:20.340
Yeah, yeah, that's awesome.

00:53:20.500 --> 00:53:26.280
So another thing it seems like I could do here is we've got p.chromium, p.webkit, I presume, and so on.

00:53:26.280 --> 00:53:33.120
I could use a parameterized pytest test and give it the browser for Chromium.

00:53:33.120 --> 00:53:35.360
Okay, so.

00:53:35.360 --> 00:53:35.720
No?

00:53:35.720 --> 00:53:36.500
So, okay.

00:53:36.500 --> 00:53:38.180
How do I just test all the browsers?

00:53:38.180 --> 00:53:38.960
Two things here.

00:53:38.960 --> 00:53:39.640
Two things here.

00:53:39.640 --> 00:53:42.000
First of all, what you just recommended is an antipatter.

00:53:42.320 --> 00:53:44.760
You never want to use pytest parameters to choose browser.

00:53:44.760 --> 00:53:47.020
Browser is a browser choice.

00:53:47.020 --> 00:53:49.080
Browser choice is a test control input.

00:53:49.080 --> 00:53:52.540
That's something that you want the user to specify, I want to target this browser.

00:53:52.540 --> 00:53:56.720
And the way you would want to treat that is to say, okay, I have my whole test suite.

00:53:56.720 --> 00:54:00.920
Honestly, all web UI tests should be able to run against any browser.

00:54:00.920 --> 00:54:03.640
There's no reason one would test on Chromium versus Firefox or something.

00:54:03.700 --> 00:54:11.060
So, you would want to say, hey, for this entire test run of these tests that I'm filtering on my suite, target Chromium.

00:54:11.060 --> 00:54:15.860
If you wanted to test on Firefox, you spin up another process and say, okay, run these and target Firefox.

00:54:15.860 --> 00:54:18.620
Test control input passed in and handle.

00:54:18.620 --> 00:54:24.400
Now you're probably thinking, oh, okay, so now I can use a pytest fixture to read an environment variable and pass it in that way.

00:54:24.400 --> 00:54:27.720
That's what the Playwright pytest plugin does for you.

00:54:27.720 --> 00:54:29.100
Okay, nice.

00:54:29.100 --> 00:54:30.160
Yeah, we'll get to that in a second.

00:54:30.160 --> 00:54:30.540
Yeah, yeah.

00:54:30.620 --> 00:54:34.260
That's another reason to use the plugin is because literally it's a command line option.

00:54:34.260 --> 00:54:38.020
You know, project Chromium, project Firefox.

00:54:38.020 --> 00:54:40.500
Or you can specify all of them and run three at a time.

00:54:40.500 --> 00:54:40.820
Got it.

00:54:40.820 --> 00:54:41.940
Okay, cool.

00:54:41.940 --> 00:54:51.440
And then there's a similar async API, but instead of using a with block to create the browser's sort of session up here, right?

00:54:51.440 --> 00:54:57.640
Instead of with sync playwright SP, we have, we create an async with block to create an async playwright.

00:54:57.640 --> 00:55:02.340
And then we await launching the browser or launching the process and then await getting the page.

00:55:02.340 --> 00:55:04.820
And there's a lot of await on this page, honestly.

00:55:04.820 --> 00:55:08.160
This might be the most await dense async thing I've ever seen in my life.

00:55:08.160 --> 00:55:09.500
Oh, you should see the JavaScript code.

00:55:09.500 --> 00:55:11.180
Which is not necessarily negative, but this is all await.

00:55:11.180 --> 00:55:12.500
Like six lines of await.

00:55:12.500 --> 00:55:14.280
Yeah, no, you're absolutely right.

00:55:14.280 --> 00:55:18.460
In fact, right before our chat today, I was doing playwright in TypeScript.

00:55:18.460 --> 00:55:22.100
And yeah, it's await, await, await, await, await, all the way down.

00:55:22.100 --> 00:55:24.180
At least in Python, you get to choose.

00:55:24.880 --> 00:55:25.560
Yeah, true.

00:55:25.560 --> 00:55:28.080
Yeah, JavaScript doesn't have the sync options.

00:55:28.080 --> 00:55:30.660
Yeah, so, but otherwise it's the same, right?

00:55:30.660 --> 00:55:31.140
Exactly.

00:55:31.140 --> 00:55:33.740
So when would I use, like when would, let me rephrase this.

00:55:33.740 --> 00:55:35.880
When would you use the async API?

00:55:35.880 --> 00:55:43.900
I would use the async API if I'm trying to do some sort of browser automation apart from test automation.

00:55:43.900 --> 00:55:48.680
Like if I'm trying to write a tool that's trying to log in and register for college course,

00:55:48.680 --> 00:55:55.500
or I'm trying to scrape numbers off of a dashboard on a website that change every five minutes or something.

00:55:55.500 --> 00:56:00.300
That would be the case where I would probably write like a pyscript and just puke everything in one file.

00:56:00.300 --> 00:56:02.000
And I would use the async API.

00:56:02.000 --> 00:56:04.400
I would use sync API for test automation.

00:56:04.600 --> 00:56:04.800
Got it.

00:56:04.800 --> 00:56:05.060
Okay.

00:56:05.060 --> 00:56:09.920
Would it make sense to use the async API if I was trying to run on all three browsers at once?

00:56:09.920 --> 00:56:10.720
I mean, yeah.

00:56:10.720 --> 00:56:12.360
Why would it still not go async there?

00:56:12.360 --> 00:56:12.740
Well.

00:56:12.740 --> 00:56:16.180
Maybe like an xdist or something like that on my PY test?

00:56:16.180 --> 00:56:18.000
That would not be the appropriate way to handle that.

00:56:18.000 --> 00:56:23.420
What you would do is you would code your test and it would be generic enough to run on any browser.

00:56:23.420 --> 00:56:33.480
And then when you would launch it using the PY test plugin, you would specify all three browsers to run at the same time, which would basically triple the test.

00:56:33.480 --> 00:56:36.660
And then you would use PY test xdist dash three.

00:56:36.660 --> 00:56:38.080
So it would parallelize that.

00:56:38.080 --> 00:56:38.320
Right.

00:56:38.380 --> 00:56:44.900
So you would write the test as if it's generic and then you would use control options to parallelize and cross browser tests.

00:56:44.900 --> 00:56:45.180
Yeah.

00:56:45.180 --> 00:56:46.440
Probably the xdist anyway.

00:56:46.440 --> 00:56:47.380
I don't know.

00:56:47.380 --> 00:56:48.380
You probably know.

00:56:48.380 --> 00:56:51.440
It's probably multi-process, not threaded anyway, right?

00:56:51.440 --> 00:56:51.740
Yes.

00:56:51.740 --> 00:56:52.140
Yeah.

00:56:52.180 --> 00:56:53.760
So it doesn't really matter if it's asynchronous.

00:56:53.760 --> 00:56:54.240
Correct.

00:56:54.240 --> 00:56:54.680
Okay.

00:56:54.680 --> 00:56:55.200
Got it.

00:56:55.200 --> 00:56:55.480
Got it.

00:56:55.480 --> 00:56:55.720
Got it.

00:56:55.720 --> 00:57:00.880
And then here's the example of like how you might launch it in headed or not headed mode.

00:57:00.880 --> 00:57:04.800
You would say like Firefox dot launch headless equals false.

00:57:04.800 --> 00:57:06.800
There's another interesting parameter here.

00:57:06.800 --> 00:57:07.680
Slow mo.

00:57:07.680 --> 00:57:08.420
Mm-hmm.

00:57:08.420 --> 00:57:08.800
Mm-hmm.

00:57:08.800 --> 00:57:10.040
Like don't you want your test to be fast?

00:57:10.040 --> 00:57:11.500
You went on and on about how it was good.

00:57:11.500 --> 00:57:17.600
So when you are developing tests on your local workbench, and like I said before, that's when you want to do headed because you want to see it.

00:57:17.600 --> 00:57:20.820
Playwright is so fast that sometimes you can't track what's going on.

00:57:20.820 --> 00:57:21.740
I kid you not.

00:57:21.740 --> 00:57:23.460
It's fast.

00:57:23.460 --> 00:57:31.220
And so what you would want to do during like your local development or debugging, you might want to inject a slowdown after every interaction.

00:57:31.220 --> 00:57:35.600
Usually I use like 1,000 or 2,000 milliseconds just to kind of.

00:57:35.600 --> 00:57:35.820
Yeah.

00:57:35.820 --> 00:57:41.300
Also, I would recommend just like with headless option, slow-mo option, you can use the command line.

00:57:41.300 --> 00:57:45.280
And I would even say that's the preferred way rather than injecting directly to code.

00:57:45.280 --> 00:57:45.480
Yeah.

00:57:45.600 --> 00:57:47.080
Probably also just to be nice.

00:57:47.080 --> 00:57:55.380
If you're not testing, but you're going around scraping on people's websites, don't hit it as fast as the network will allow you.

00:57:55.380 --> 00:58:00.620
Yeah, because some websites will identify you as a bot and be like, nope, I'm rejecting your request.

00:58:00.620 --> 00:58:03.980
So if you inject a slow-mo, you seem more like a human.

00:58:03.980 --> 00:58:05.580
You'll skirt under the radar.

00:58:05.580 --> 00:58:07.820
Ooh, I didn't even think of that, but that's right.

00:58:07.820 --> 00:58:08.120
Yeah.

00:58:08.120 --> 00:58:10.740
I'm sure that that actually, it may not be the intent.

00:58:10.820 --> 00:58:16.440
The intent is to make it human interactable, but it's still, it might be necessary.

00:58:16.440 --> 00:58:20.160
Get in that college course, get that 10 a.m. class, don't get banned.

00:58:20.160 --> 00:58:20.480
Okay.

00:58:20.480 --> 00:58:28.260
I actually did do something like that when I was in college, but using a dial-up modem because I had to talk to somebody.

00:58:28.260 --> 00:58:29.300
But it was glorious.

00:58:29.300 --> 00:58:31.740
I had the best class schedule of the year that year.

00:58:31.740 --> 00:58:32.140
Nice.

00:58:32.140 --> 00:58:38.260
Okay, so another thing you could do is you can record scripts using Playwright, CodeGen, and then give it a URL.

00:58:38.260 --> 00:58:44.380
And then it'll watch you interact with it and then generate Python, try to mimic those interactions, right?

00:58:44.380 --> 00:58:44.780
Mm-hmm.

00:58:44.780 --> 00:58:46.640
Okay, that's pretty awesome.

00:58:46.640 --> 00:58:49.800
We talked a lot about, we'll come back to the pytest in a second.

00:58:49.800 --> 00:58:55.560
There's also a REPL mode, which is pretty, I mean, I guess that's just saying like you can call Python code in a REPL.

00:58:55.560 --> 00:58:57.080
That's not super interesting.

00:58:57.080 --> 00:59:02.540
If you're coming to Python from another ecosystem, this might be a big deal for you.

00:59:02.540 --> 00:59:05.180
I think for us, we're like, oh yeah, you can do any Python in a REPL.

00:59:05.180 --> 00:59:06.040
No, it's simple, whatever.

00:59:06.040 --> 00:59:10.700
So somebody come from like the Java world, oh my gosh, this will blow their mind, you know, probably.

00:59:10.700 --> 00:59:11.640
Yeah, that's for sure.

00:59:11.640 --> 00:59:21.660
I guess I'd never really thought about creating an async REPL, but you can create an async REPL using Python-M asyncio and then you get a REPL, but it lets you write await.

00:59:21.660 --> 00:59:23.300
I've never done that.

00:59:23.300 --> 00:59:24.780
So I guess I learned something.

00:59:24.780 --> 00:59:31.220
Then also it has this interesting way to build itself into a standalone executable.

00:59:31.220 --> 00:59:37.120
So you don't need Python or anything else to run it using PyInstaller, but there's some integrated commands.

00:59:37.120 --> 00:59:38.180
Tell us about this.

00:59:38.180 --> 00:59:41.840
Like I'm searching for a way in which this might be relevant to me.

00:59:41.840 --> 00:59:46.240
Well, that would be like the tool that we mentioned versus a test automation suite, right?

00:59:46.240 --> 00:59:52.120
If you wanted to build your college course hacker scheduler thing, you could build it.

00:59:52.120 --> 00:59:52.140
I see.

00:59:52.140 --> 00:59:52.440
And then.

00:59:52.440 --> 00:59:52.920
Yep.

00:59:52.920 --> 00:59:55.920
You could build into it an executable and then it's a little easier to run.

00:59:55.920 --> 00:59:56.460
That's all.

00:59:56.460 --> 00:59:56.780
I see.

00:59:56.780 --> 01:00:00.240
Then you tell it, it takes these command line arguments and then it goes and it.

01:00:00.240 --> 01:00:00.440
Yep.

01:00:00.440 --> 01:00:00.800
Okay.

01:00:00.800 --> 01:00:01.220
Got it.

01:00:01.220 --> 01:00:01.780
If I want to share it.

01:00:01.780 --> 01:00:01.920
Sure.

01:00:01.920 --> 01:00:04.500
By the way, the instructions on the website, people are watching.

01:00:04.820 --> 01:00:06.760
There's a bash, a PowerShell and a batch version.

01:00:06.760 --> 01:00:09.900
The bash version like doesn't have backslash ends or something.

01:00:09.900 --> 01:00:10.320
I don't know.

01:00:10.320 --> 01:00:10.820
It's a little weird.

01:00:10.820 --> 01:00:12.420
Just look at the other ones.

01:00:12.420 --> 01:00:13.540
So realize that's three lines.

01:00:13.540 --> 01:00:14.540
Oops.

01:00:14.540 --> 01:00:15.380
Oops.

01:00:15.380 --> 01:00:16.000
All right.

01:00:16.540 --> 01:00:18.400
It does have some interesting ideas.

01:00:18.400 --> 01:00:22.140
You talked about the waiting and it says, don't use time.sleep.

01:00:22.140 --> 01:00:25.820
You might be able to get away with async.io.sleep, but don't use time.sleep.

01:00:25.820 --> 01:00:30.200
Use page.wait for timeout instead, which is interesting.

01:00:30.200 --> 01:00:34.280
Apparently the time.sleep messes with its internal asynchronous.

01:00:34.280 --> 01:00:34.760
Interesting.

01:00:34.760 --> 01:00:35.620
Or something.

01:00:35.620 --> 01:00:38.340
So yeah, just people be aware of that.

01:00:38.340 --> 01:00:38.480
All right.

01:00:38.480 --> 01:00:39.940
Let's talk pytest plugin real quick.

01:00:39.940 --> 01:00:40.180
Sure.

01:00:40.180 --> 01:00:40.280
Sure.

01:00:40.280 --> 01:00:46.200
So we could write a pytest test that takes a page object, which is.

01:00:46.200 --> 01:00:48.780
The browser process is launched.

01:00:48.780 --> 01:00:52.620
A session is created and a page has been created and then it's handed to you.

01:00:52.620 --> 01:00:53.040
Exactly.

01:00:53.040 --> 01:00:57.820
So like that opening code snippet we just talked about, you don't need to do that when you're

01:00:57.820 --> 01:00:59.020
doing pytest with the plugin.

01:00:59.020 --> 01:01:01.280
You basically say, I want to use a page.

01:01:01.280 --> 01:01:02.140
Fixture go.

01:01:02.140 --> 01:01:02.580
Boom.

01:01:02.580 --> 01:01:03.240
And it gives it to you.

01:01:03.240 --> 01:01:08.740
So you can immediately jump into things like page go to, page locator, give me this, page

01:01:08.740 --> 01:01:13.740
title, page click, you know, straight from the test function, which is really, really

01:01:13.740 --> 01:01:14.020
nice.

01:01:14.020 --> 01:01:15.700
It cuts down on all that boilerplate.

01:01:15.700 --> 01:01:15.980
Yeah.

01:01:15.980 --> 01:01:16.760
That's, that's very neat.

01:01:16.760 --> 01:01:23.140
And then here, right below that in the, it shows the CLI options, pytest --headed,

01:01:23.140 --> 01:01:26.840
--browser, Firefox or multiple browsers and so on.

01:01:26.840 --> 01:01:27.300
Mm-hmm.

01:01:27.300 --> 01:01:27.860
Mm-hmm.

01:01:27.860 --> 01:01:28.280
Yeah.

01:01:28.280 --> 01:01:29.000
Very nice.

01:01:29.000 --> 01:01:29.620
Very nice.

01:01:29.620 --> 01:01:30.900
What else should we talk about?

01:01:30.900 --> 01:01:35.000
Maybe we could talk like text input and stuff just really quick, because I feel like that

01:01:35.000 --> 01:01:39.640
goes a little bit beyond just CSS selectors, like the clicks and the inputs and the.

01:01:39.640 --> 01:01:40.480
Sure, sure, sure.

01:01:40.480 --> 01:01:40.860
So on.

01:01:40.980 --> 01:01:42.300
So which one do we talk about?

01:01:42.300 --> 01:01:43.240
Inputs, locators?

01:01:43.240 --> 01:01:47.300
There should be a section on selectors if you go down, which I would recommend.

01:01:47.300 --> 01:01:47.720
There you go.

01:01:47.720 --> 01:01:52.800
So the selectors are the starting point of finding things on the page.

01:01:53.220 --> 01:01:56.740
You can identify elements on the page from many different kinds of selectors.

01:01:56.740 --> 01:02:01.940
You can have an ID, boom, you nail it, you know, assuming it's your unique on the page,

01:02:01.940 --> 01:02:02.260
right?

01:02:02.260 --> 01:02:03.780
You can use a CSS selector.

01:02:03.780 --> 01:02:05.320
You can use an XPath.

01:02:05.320 --> 01:02:10.480
All those are things that are also selectors available with Selenium WebDriver and Cypress.

01:02:10.880 --> 01:02:14.040
But Playwright has a few other kinds of selectors that it supports.

01:02:14.040 --> 01:02:17.040
One of the most helpful ones is what they call a text selector.

01:02:17.040 --> 01:02:18.260
Oh, you've got it on the screen here.

01:02:18.260 --> 01:02:18.820
Yeah, there you go.

01:02:18.820 --> 01:02:21.980
So like I want the button that says login.

01:02:21.980 --> 01:02:22.700
Correct.

01:02:22.700 --> 01:02:23.340
Exactly.

01:02:23.340 --> 01:02:26.620
Because I don't care what kind of element it is.

01:02:26.620 --> 01:02:31.840
I just want the element that has a text that says login, that has submit.

01:02:31.840 --> 01:02:34.280
As long as it's the only one on the page, you're going to get a right.

01:02:34.600 --> 01:02:37.600
That lends to the developer experience, right?

01:02:37.600 --> 01:02:41.640
Because you're trying to figure out CSS selectors and XPaths.

01:02:41.640 --> 01:02:42.580
There's a cognitive load.

01:02:42.580 --> 01:02:43.920
Sometimes you have to do it.

01:02:43.920 --> 01:02:47.800
But if you don't have to and you can do something easier, it's better for you and for the test

01:02:47.800 --> 01:02:48.040
case.

01:02:48.040 --> 01:02:49.420
Simple is better than complex.

01:02:49.420 --> 01:02:51.040
And so here, right, yeah.

01:02:51.040 --> 01:02:51.800
Give me the text.

01:02:51.800 --> 01:02:52.720
Boom, I'll find the element.

01:02:52.720 --> 01:02:55.280
So that's one of the really, really cool selectors.

01:02:55.280 --> 01:02:56.280
Yeah, that's fantastic.

01:02:56.280 --> 01:03:02.320
And then you can come in here for input and like go and say, I would like to check the check

01:03:02.320 --> 01:03:04.200
box that has the ID agree.

01:03:04.200 --> 01:03:06.820
Or that has the text XL.

01:03:06.820 --> 01:03:08.200
Like what size of t-shirt do you want?

01:03:08.200 --> 01:03:08.760
I want XL.

01:03:08.760 --> 01:03:09.440
Check that.

01:03:09.440 --> 01:03:11.440
That radio button or that check box.

01:03:11.440 --> 01:03:12.480
That's super cool.

01:03:12.480 --> 01:03:16.820
Actually, I should comment that the commands we're seeing here are things like page check,

01:03:16.820 --> 01:03:18.740
page uncheck, page fill.

01:03:18.740 --> 01:03:21.980
That's actually no longer the recommended practice with Playwright.

01:03:21.980 --> 01:03:23.240
You can do it this way.

01:03:23.240 --> 01:03:23.700
What do they suggest?

01:03:23.700 --> 01:03:29.880
What they suggest is page.locator, pop in your selector, and then dot whatever the interaction

01:03:29.880 --> 01:03:30.180
is.

01:03:30.180 --> 01:03:35.900
So in these cases, instead of page dot check, agree will be page locator agree dot check.

01:03:35.900 --> 01:03:41.700
And the reason they recommend that, even though it's more verbose, it's ultimately supposed

01:03:41.700 --> 01:03:44.820
to lead you to a refactoring into things like page objects, right?

01:03:44.820 --> 01:03:48.480
Because you are separating the concern of page structure from interaction.

01:03:48.860 --> 01:03:52.440
Whereas when they're together, even though it's more concise, it is readable.

01:03:52.440 --> 01:03:54.920
You're combining those concerns.

01:03:54.920 --> 01:03:56.160
It doesn't really matter.

01:03:56.160 --> 01:03:57.220
You can use both ways.

01:03:57.220 --> 01:03:58.980
Sure.

01:03:58.980 --> 01:03:59.380
Okay.

01:03:59.380 --> 01:03:59.920
Yeah.

01:03:59.920 --> 01:04:00.620
These are nice.

01:04:00.620 --> 01:04:01.400
All right.

01:04:01.400 --> 01:04:07.080
So really, basically the takeaway, like for example, here I can go and find me the button

01:04:07.080 --> 01:04:10.840
that says text submit, and then I can do a hover over it and then click, which I think

01:04:10.840 --> 01:04:13.020
is interesting because often it doesn't matter.

01:04:13.020 --> 01:04:18.340
But sometimes if you hover over a thing, it exposes different DOM elements that when you

01:04:18.340 --> 01:04:19.800
click on them may have a different behavior.

01:04:19.800 --> 01:04:20.180
Indeed.

01:04:20.180 --> 01:04:21.800
So you have this really fine grain control.

01:04:21.800 --> 01:04:22.200
Indeed.

01:04:22.200 --> 01:04:23.000
Got a few.

01:04:23.000 --> 01:04:23.360
Go.

01:04:23.360 --> 01:04:23.580
No.

01:04:23.580 --> 01:04:23.940
Okay.

01:04:23.940 --> 01:04:24.480
Finish your thought.

01:04:24.480 --> 01:04:24.680
Sorry.

01:04:24.680 --> 01:04:24.940
Sorry.

01:04:24.940 --> 01:04:29.740
I was going to say like, also in that example, we just showed you created the locator object

01:04:29.740 --> 01:04:32.860
to one time, and then you perform multiple interactions on it.

01:04:32.860 --> 01:04:37.480
Whereas if we, if you had repeated or if you had combined the calls, you would have under

01:04:37.480 --> 01:04:40.820
the hood duplicated the creation of the same locator object.

01:04:40.820 --> 01:04:43.320
So there's a sense of reusability there as well.

01:04:43.320 --> 01:04:43.640
That's all.

01:04:43.640 --> 01:04:43.960
Got it.

01:04:43.960 --> 01:04:44.300
All right.

01:04:44.300 --> 01:04:48.100
Let's round out our conversation here just quickly with the tools.

01:04:48.100 --> 01:04:50.060
So I think that these are really nice.

01:04:50.060 --> 01:04:51.160
These visual tools here.

01:04:51.160 --> 01:04:51.780
All right.

01:04:51.780 --> 01:04:56.140
The first one I pulled up first is the playwright inspector, and it's kind of like, I don't

01:04:56.140 --> 01:04:57.240
even know how to describe it.

01:04:57.300 --> 01:05:02.460
So it's, it's as if you went through and you did a bunch of CSS stuff and then playwright

01:05:02.460 --> 01:05:08.240
wrote asynchronous Python code with the things like page.click and whatnot that we discussed.

01:05:08.240 --> 01:05:10.440
And then, then you can go and check it out.

01:05:10.440 --> 01:05:15.140
So this is kind of like a playback understanding type thing, right?

01:05:15.140 --> 01:05:15.380
Yeah.

01:05:15.380 --> 01:05:15.660
Yeah.

01:05:15.660 --> 01:05:16.820
How would you characterize this?

01:05:16.820 --> 01:05:19.800
So this is like saying, okay, this is what your code did.

01:05:19.800 --> 01:05:21.440
Here's more information on it.

01:05:21.440 --> 01:05:23.960
Very similar to Chrome dev tools.

01:05:24.080 --> 01:05:27.580
I will caveat to say, I have not used this much myself.

01:05:27.580 --> 01:05:29.380
This is also kind of new to me too.

01:05:29.380 --> 01:05:33.520
Also on top of that, I should say the playwright team keeps pumping out new, awesome stuff all

01:05:33.520 --> 01:05:33.960
the time.

01:05:33.960 --> 01:05:35.740
So hold on to your butts.

01:05:35.740 --> 01:05:37.420
They just keep making more awesome, cool stuff.

01:05:37.420 --> 01:05:37.680
Yeah.

01:05:37.680 --> 01:05:42.120
Apparently it has features for like debugging selectors for stepping through like one of

01:05:42.120 --> 01:05:44.600
these playback scripts to see how it goes and so on.

01:05:44.600 --> 01:05:45.980
It's really cool.

01:05:45.980 --> 01:05:47.040
Real time stuff here.

01:05:47.040 --> 01:05:47.360
Yeah.

01:05:47.360 --> 01:05:47.880
Yeah.

01:05:47.880 --> 01:05:48.540
This is super neat.

01:05:48.540 --> 01:05:48.760
Okay.

01:05:48.800 --> 01:05:50.480
Another one, the trace viewer.

01:05:50.480 --> 01:05:54.420
This, like I said, looks a little bit, it's a little bit like the dev tools of a browser.

01:05:54.420 --> 01:06:00.080
If you open up the network tab and then select, show me the response in that view for people

01:06:00.080 --> 01:06:03.360
who are not seeing this, but you can go to the playwright.dev site and check it out.

01:06:03.360 --> 01:06:04.480
That's a good way to describe it.

01:06:04.480 --> 01:06:07.340
And it bundles up like so many things.

01:06:07.340 --> 01:06:10.440
Like I think you can say like, oh, I want to capture the screenshots.

01:06:10.440 --> 01:06:12.040
I want to capture the video.

01:06:12.040 --> 01:06:13.560
I want to capture the DOMS of the pages.

01:06:13.560 --> 01:06:14.340
I want the stores.

01:06:14.340 --> 01:06:18.240
Like it all ended up like, I think it bundles it up all for you in one artifact.

01:06:18.240 --> 01:06:19.680
It's like, you're just tested done.

01:06:19.680 --> 01:06:20.400
Here you go.

01:06:20.400 --> 01:06:21.580
Have fun looking at it.

01:06:21.580 --> 01:06:25.560
So it's the kind of thing where you could, when you, let's say you're running this in continuous

01:06:25.560 --> 01:06:30.740
integration, you know, test fail, it bundles all this stuff up, saves it for you as an artifact

01:06:30.740 --> 01:06:34.640
and then you can go look at it later for the ones that fail and be like, oh, so here's

01:06:34.640 --> 01:06:36.080
all the context of what went wrong.

01:06:36.080 --> 01:06:38.720
And you can really get in there and figure out what happened.

01:06:38.720 --> 01:06:40.260
It's fantastic.

01:06:40.260 --> 01:06:41.620
It has all the actions.

01:06:41.620 --> 01:06:43.320
You click on them and it says, what was the action?

01:06:43.440 --> 01:06:44.280
What was it like before?

01:06:44.280 --> 01:06:45.300
What was it like after?

01:06:45.300 --> 01:06:46.440
What did the network do?

01:06:46.440 --> 01:06:46.760
Yeah.

01:06:46.760 --> 01:06:47.360
Really good.

01:06:47.360 --> 01:06:50.300
And then test generation because, hey, we don't need to write tests.

01:06:50.300 --> 01:06:51.480
We'll just tell it to go.

01:06:51.480 --> 01:06:52.400
No, I'm just kidding.

01:06:52.400 --> 01:06:53.600
Tell us about this.

01:06:53.600 --> 01:06:54.460
This is pretty cool though.

01:06:54.460 --> 01:06:56.260
This is like fire up the browser.

01:06:56.260 --> 01:07:00.280
Let me interact with it and then generate a script that I can go from there.

01:07:00.280 --> 01:07:00.460
Yeah.

01:07:00.460 --> 01:07:01.860
Basically it's like a screen recorder.

01:07:01.860 --> 01:07:02.220
Yeah.

01:07:02.220 --> 01:07:06.400
You start the recorder, you navigate through the webpage, you know, you do your workflow,

01:07:06.400 --> 01:07:11.120
you stop the recorder and then it turns all of the things that you did into a Playbride.

01:07:11.120 --> 01:07:11.540
Right.

01:07:11.640 --> 01:07:14.780
Instead of recording video, it records asynchronous Python.

01:07:14.780 --> 01:07:16.060
Basically.

01:07:16.060 --> 01:07:17.640
So that it generates.

01:07:17.640 --> 01:07:19.520
Now this is really cool and it's super easy.

01:07:19.520 --> 01:07:24.000
The other thing that's worth noting here is they talk about authenticated state.

01:07:24.000 --> 01:07:28.760
So if you've got to log in and set up some cookies and local storage, you know, like even if you've

01:07:28.760 --> 01:07:33.100
got a JavaScript app that needs to read and write stuff to local storage, you can sort

01:07:33.100 --> 01:07:36.340
of save and load that from a JavaScript, the JSON file rather.

01:07:36.340 --> 01:07:36.640
Yeah.

01:07:36.640 --> 01:07:40.380
So because that's another thing, particularly with test automation, how many times you have

01:07:40.380 --> 01:07:44.440
to log into your app under test, username, password, token or whatever.

01:07:44.640 --> 01:07:48.340
And so, I mean, you can do this with pretty much any browser automation tool.

01:07:48.340 --> 01:07:49.520
This is how Playbride does it.

01:07:49.520 --> 01:07:55.080
You're basically caching that authentication so that you can reuse it for different sessions

01:07:55.080 --> 01:07:55.740
or tests.

01:07:55.740 --> 01:07:59.720
So you don't have to burn that five seconds of log in every single time.

01:07:59.720 --> 01:08:00.000
Sure.

01:08:00.000 --> 01:08:03.120
If you're not trying to test the log in flow, it's just in your way.

01:08:03.120 --> 01:08:03.340
Correct.

01:08:03.500 --> 01:08:03.640
Yeah.

01:08:03.640 --> 01:08:04.400
Fantastic.

01:08:04.400 --> 01:08:05.500
I guess debugging tools.

01:08:05.500 --> 01:08:06.580
We could look real quick.

01:08:06.580 --> 01:08:08.500
I mean, I feel like we kind of touched a lot of them.

01:08:08.500 --> 01:08:09.500
Anything else you want to highlight?

01:08:09.500 --> 01:08:11.220
Maybe running in debug mode?

01:08:11.220 --> 01:08:14.040
I mean, it's all goodness.

01:08:14.040 --> 01:08:15.380
I would say go read the docs up on it.

01:08:15.380 --> 01:08:17.680
There's more than we can cover in a one hour discussion.

01:08:17.680 --> 01:08:18.120
Yeah.

01:08:18.120 --> 01:08:20.500
Well, I think we're down to minutes, not hours.

01:08:20.500 --> 01:08:23.080
So maybe leave it there.

01:08:23.080 --> 01:08:28.680
There's a bunch of guides about like auto-weighting, testing APIs, browser context, JavaScript events.

01:08:28.680 --> 01:08:31.080
Like there's a lot of stuff to go in here.

01:08:31.080 --> 01:08:33.260
And I'll check out even testing video.

01:08:33.260 --> 01:08:34.540
We're recording videos.

01:08:34.540 --> 01:08:35.060
Yeah.

01:08:35.060 --> 01:08:35.360
Cool.

01:08:35.360 --> 01:08:36.000
Fantastic.

01:08:36.000 --> 01:08:44.460
And for folks who want to learn more about Playwright, what I can recommend is that I have done a tutorial on Playwright in Python.

01:08:44.460 --> 01:08:46.760
It's on my GitHub account.

01:08:46.760 --> 01:08:49.420
It's playwright-python-tutorial.

01:08:49.420 --> 01:08:51.180
I have given this at PyCon.

01:08:51.180 --> 01:08:53.120
I gave this at Python Web Conference.

01:08:53.120 --> 01:08:56.000
I think I gave this at the TAU Homecoming last year.

01:08:56.000 --> 01:09:04.340
And in this repository, what it has, it has not only example code, but it has full instructions on how you build a test automation project with these tools.

01:09:04.340 --> 01:09:07.840
And it walks you through in glorious detail all the way.

01:09:07.840 --> 01:09:11.020
If this is something you want to get hands-on with, yep, there it is.

01:09:11.020 --> 01:09:11.460
Boom.

01:09:11.460 --> 01:09:12.460
Give that a try.

01:09:12.460 --> 01:09:13.100
Check it out.

01:09:13.100 --> 01:09:15.600
Follow the instructions in the tutorial folder.

01:09:15.600 --> 01:09:16.960
And let me know if you get stuck.

01:09:17.120 --> 01:09:17.980
Yeah, this is really great.

01:09:17.980 --> 01:09:20.340
People can follow along and play with it, right?

01:09:20.340 --> 01:09:21.280
Do a little DuckDuckGo.

01:09:21.280 --> 01:09:22.720
Basically.

01:09:22.720 --> 01:09:23.560
Yeah.

01:09:23.560 --> 01:09:29.680
No, but take some other public website like DuckDuckGo and figure out how you might go about testing it, right?

01:09:29.680 --> 01:09:34.540
Work your way through understanding what you should do to test it and then put that into action with Playwright.

01:09:34.540 --> 01:09:34.800
Yep.

01:09:34.800 --> 01:09:35.160
Yep.

01:09:35.160 --> 01:09:35.460
All right.

01:09:35.460 --> 01:09:40.740
Well, I think that pretty much is the time we've had to talk about this.

01:09:40.740 --> 01:09:43.440
Anything else you want to quickly touch on before we call it a wrap?

01:09:43.440 --> 01:09:43.700
No.

01:09:43.700 --> 01:09:45.080
I mean, have fun with it.

01:09:45.080 --> 01:09:46.260
I think Playwright is awesome.

01:09:46.520 --> 01:09:47.960
I really love what the team is doing.

01:09:47.960 --> 01:09:55.980
And if you ever have, if anyone ever has questions, all testing, automation, Playwright, Selenium, you name it, hit me up on Twitter, AutomationPanda.

01:09:55.980 --> 01:09:56.560
Right on.

01:09:56.560 --> 01:09:57.120
All right.

01:09:57.120 --> 01:10:01.040
Now, before we get out of here, I've got to ask the final two questions.

01:10:01.040 --> 01:10:05.120
If you're going to write some Python code, what editor do you use?

01:10:05.120 --> 01:10:08.420
Your tutorial may have given it away if people have seen that, but go ahead.

01:10:08.420 --> 01:10:09.020
VS Code.

01:10:09.020 --> 01:10:10.540
That's what I've been using recently.

01:10:10.540 --> 01:10:11.340
All right.

01:10:11.340 --> 01:10:11.800
Right on.

01:10:11.800 --> 01:10:14.200
And then notable PyPI package.

01:10:14.200 --> 01:10:16.320
I mean, pip install Playwrights, one of them.

01:10:16.380 --> 01:10:18.200
But something else you want to recommend, you're like, oh, this is cool.

01:10:18.200 --> 01:10:19.720
People should know about X.

01:10:19.720 --> 01:10:21.940
I mean, typically I would say pytest, right?

01:10:21.940 --> 01:10:27.100
But in fact, I just released a package on PyPI during PyCon.

01:10:27.100 --> 01:10:29.280
I got it done before the final closing keynote.

01:10:29.280 --> 01:10:29.800
Oh, nice.

01:10:29.800 --> 01:10:30.080
Okay.

01:10:30.080 --> 01:10:31.120
It's called Screenplay.

01:10:31.120 --> 01:10:34.680
It is a Pythonic implementation of the Screenplay pattern.

01:10:34.680 --> 01:10:36.240
It's very minimal right now.

01:10:36.240 --> 01:10:37.420
It doesn't even have documentation.

01:10:37.860 --> 01:10:42.240
But if anybody knows about Screenplay Pattern and wants to help contribute to that, check out Screenplay.

01:10:42.240 --> 01:10:42.880
Hold on.

01:10:42.880 --> 01:10:43.600
There it is.

01:10:43.600 --> 01:10:43.800
This one?

01:10:43.800 --> 01:10:45.040
Yeah.

01:10:45.040 --> 01:10:45.580
All right.

01:10:45.580 --> 01:10:46.220
I'll put that in.

01:10:46.220 --> 01:10:47.360
Put that in the show notes.

01:10:47.360 --> 01:10:47.580
Yeah.

01:10:47.580 --> 01:10:48.280
Very cool.

01:10:48.280 --> 01:10:48.840
Thank you.

01:10:48.840 --> 01:10:49.360
All right.

01:10:49.360 --> 01:10:50.000
Yeah, you bet.

01:10:50.000 --> 01:10:52.200
Well, it's been really great to have you here.

01:10:52.200 --> 01:10:54.740
Thanks for sharing all your experience with Playwright.

01:10:54.740 --> 01:10:55.780
It looks very exciting.

01:10:55.780 --> 01:10:58.040
It looks like something you just want to play with.

01:10:58.040 --> 01:10:58.880
Yeah, indeed.

01:10:58.880 --> 01:11:00.440
Well, thank you for inviting me to talk.

01:11:00.440 --> 01:11:01.480
I'd love to do it.

01:11:01.480 --> 01:11:01.920
Yeah, you bet.

01:11:01.920 --> 01:11:03.840
So people are excited to get started.

01:11:03.840 --> 01:11:04.800
Final call to action.

01:11:04.800 --> 01:11:05.320
What do you tell them?

01:11:05.320 --> 01:11:07.260
People are excited to get started with Playwright.

01:11:07.260 --> 01:11:10.380
Check out the website, playwright.dev.

01:11:10.380 --> 01:11:12.560
Check out my tutorial with the link.

01:11:12.560 --> 01:11:17.360
And also, if you ever get stuck, you can reach out to me or join the Playwright Slack.

01:11:17.360 --> 01:11:20.140
The folks in there are very helpful and very quick to respond.

01:11:20.140 --> 01:11:20.600
All right.

01:11:20.600 --> 01:11:21.120
Fantastic.

01:11:21.120 --> 01:11:23.200
Well, thanks again for being here.

01:11:23.200 --> 01:11:24.320
It's great to chat with you.

01:11:24.320 --> 01:11:24.780
Thanks, man.

01:11:24.780 --> 01:11:25.320
Appreciate it.

01:11:25.320 --> 01:11:25.540
Yeah.

01:11:25.540 --> 01:11:25.960
You bet.

01:11:25.960 --> 01:11:26.140
Bye.

01:11:26.140 --> 01:11:30.700
This has been another episode of Talk Python to Me.

01:11:31.240 --> 01:11:32.520
Thank you to our sponsors.

01:11:32.520 --> 01:11:34.120
Be sure to check out what they're offering.

01:11:34.120 --> 01:11:35.540
It really helps support the show.

01:11:35.540 --> 01:11:37.680
Starting a business is hard.

01:11:37.680 --> 01:11:43.780
Microsoft for Startups, Founders Hub, provides all founders at any stage with free resources

01:11:43.780 --> 01:11:46.300
and connections to solve startup challenges.

01:11:46.300 --> 01:11:50.820
Apply for free today at talkpython.fm/founders hub.

01:11:50.820 --> 01:11:55.800
Listen to an episode of Compiler, an original podcast from Red Hat.

01:11:55.800 --> 01:12:00.560
Compiler unravels industry topics, trends, and things you've always wanted to know about

01:12:00.560 --> 01:12:03.260
tech through interviews with the people who know it best.

01:12:03.260 --> 01:12:07.380
Subscribe today by following talkpython.fm/compiler.

01:12:07.380 --> 01:12:09.260
Want to level up your Python?

01:12:09.260 --> 01:12:13.320
We have one of the largest catalogs of Python video courses over at Talk Python.

01:12:13.320 --> 01:12:18.480
Our content ranges from true beginners to deeply advanced topics like memory and async.

01:12:18.480 --> 01:12:21.160
And best of all, there's not a subscription in sight.

01:12:21.160 --> 01:12:24.060
Check it out for yourself at training.talkpython.fm.

01:12:24.060 --> 01:12:25.960
Be sure to subscribe to the show.

01:12:25.960 --> 01:12:28.820
Open your favorite podcast app and search for Python.

01:12:29.120 --> 01:12:30.060
We should be right at the top.

01:12:30.060 --> 01:12:35.220
You can also find the iTunes feed at /itunes, the Google Play feed at /play,

01:12:35.220 --> 01:12:39.400
and the direct RSS feed at /rss on talkpython.fm.

01:12:39.400 --> 01:12:42.840
We're live streaming most of our recordings these days.

01:12:42.840 --> 01:12:46.260
If you want to be part of the show and have your comments featured on the air,

01:12:46.260 --> 01:12:50.680
be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

01:12:51.120 --> 01:12:52.520
This is your host, Michael Kennedy.

01:12:52.520 --> 01:12:53.820
Thanks so much for listening.

01:12:53.820 --> 01:12:54.980
I really appreciate it.

01:12:54.980 --> 01:12:56.900
Now get out there and write some Python code.

01:12:56.900 --> 01:13:26.880
Thank you.

