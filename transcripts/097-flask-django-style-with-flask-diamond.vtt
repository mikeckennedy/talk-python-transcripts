WEBVTT

00:00:00.001 --> 00:00:02.720
There's a whole spectrum of Python web frameworks.

00:00:02.720 --> 00:00:08.320
On one end, we have the micro frameworks like Bottle, Flask, and to a lesser degree, Pyramid.

00:00:08.320 --> 00:00:12.900
On the other, things like Django or even CMSs like Wagtail,

00:00:12.900 --> 00:00:16.620
which are built on top of Django way in the far end of the spectrum.

00:00:16.620 --> 00:00:21.220
While this is often positioned as an either-or choice between these frameworks,

00:00:21.220 --> 00:00:26.420
this week you'll meet someone who's doing a lot to build some middle ground in the spectrum.

00:00:26.420 --> 00:00:29.500
Ian Dennis Miller, the creator of Flask Diamond,

00:00:30.040 --> 00:00:35.100
an extension of Flask which brings the good things from Django to Flask's simple and small API.

00:00:35.100 --> 00:00:41.180
This is Talk Python To Me, episode 97, recorded January 16, 2017.

00:00:55.920 --> 00:01:09.680
Welcome to Talk Python To Me, a weekly podcast on Python,

00:01:09.680 --> 00:01:12.740
the language, the libraries, the ecosystem, and the personalities.

00:01:12.740 --> 00:01:14.880
This is your host, Michael Kennedy.

00:01:14.880 --> 00:01:16.860
Follow me on Twitter where I'm @mkennedy.

00:01:16.860 --> 00:01:20.760
Keep up with the show and listen to past episodes at talkpython.fm

00:01:20.760 --> 00:01:23.320
and follow the show on Twitter via at Talk Python.

00:01:23.320 --> 00:01:27.760
This episode is brought to you by Rollbar and Hired.

00:01:27.760 --> 00:01:29.800
Thank them both for supporting the show.

00:01:29.800 --> 00:01:37.140
Check them out at Rollbar and at Hired underscore HQ on Twitter and tell them thank you.

00:01:37.140 --> 00:01:39.040
Ian, welcome to the show.

00:01:39.040 --> 00:01:40.160
Thanks for inviting me.

00:01:40.280 --> 00:01:41.380
Yeah, I'm really excited.

00:01:41.380 --> 00:01:46.600
I often feel like we have to make this tradeoff between micro frameworks when we're choosing

00:01:46.600 --> 00:01:50.860
a web framework like Flask, to some degree, Pyramid, Bottle, things like that, or Django,

00:01:50.860 --> 00:01:52.340
which has all these cool building blocks.

00:01:52.340 --> 00:01:56.860
And I think you're kind of here to dispel the fact that that's the choice to some degree,

00:01:56.860 --> 00:01:57.080
right?

00:01:57.080 --> 00:01:57.860
I hope so.

00:01:58.320 --> 00:02:04.060
I think there's room for something that exists somewhere in between, or maybe that can look

00:02:04.060 --> 00:02:08.040
like one thing sometimes and look like the other thing other times.

00:02:08.040 --> 00:02:08.700
Yeah, absolutely.

00:02:08.700 --> 00:02:14.760
So we're going to talk about your project, Flask Diamond, which brings some Django-like features

00:02:14.760 --> 00:02:15.720
to Flask.

00:02:15.720 --> 00:02:18.700
But before we get into those, let's get your story.

00:02:18.700 --> 00:02:19.600
Where'd you get into programming?

00:02:19.600 --> 00:02:20.300
Yeah.

00:02:20.960 --> 00:02:29.440
Many moons ago, in, let's see, I guess, sixth, seventh grade, something like that, I made

00:02:29.440 --> 00:02:36.120
some kind of transition from using the computer basically as a gaming device.

00:02:36.120 --> 00:02:43.140
And I started experimenting with this weird program I found lurking in the DOS prompt called

00:02:43.140 --> 00:02:48.520
GWBASIC, which was a basic interpreter that just shipped with DOS.

00:02:48.940 --> 00:02:57.880
And I actually started off by entering random words into BASIC because I didn't really have

00:02:57.880 --> 00:02:58.880
a book for it.

00:02:58.880 --> 00:03:04.560
And the internet didn't exist at the time, at least not the way that it exists now.

00:03:04.560 --> 00:03:06.400
You didn't want to like gopher for BASIC?

00:03:06.400 --> 00:03:07.380
Yeah, right.

00:03:07.380 --> 00:03:08.400
Now, gopher.

00:03:08.400 --> 00:03:12.800
So, I mean, you know, as a sixth grader, all that stuff was way beyond my reach.

00:03:12.800 --> 00:03:16.340
But I guess kids just, our time is worth so little.

00:03:16.460 --> 00:03:19.220
We sit there and we can just pound away at a keyboard.

00:03:19.220 --> 00:03:22.320
And eventually, randomly, things started working.

00:03:22.320 --> 00:03:26.260
And it took years, actually, of doing this.

00:03:26.260 --> 00:03:28.960
But I learned how to program in BASIC.

00:03:28.960 --> 00:03:35.000
And then as I grew up, I was able to take courses at school.

00:03:35.000 --> 00:03:38.580
And so that actually accelerated the process dramatically.

00:03:38.580 --> 00:03:39.720
Yeah, that's really cool.

00:03:39.920 --> 00:03:42.640
It's amazing that you actually were persistent to do that.

00:03:42.640 --> 00:03:44.380
That's really quite incredible.

00:03:44.380 --> 00:03:45.120
Oh, yeah.

00:03:45.120 --> 00:03:48.760
You must have thought like when you got to a program in a class, you're like, you mean they

00:03:48.760 --> 00:03:50.700
give you all the stuff you could tell?

00:03:50.700 --> 00:03:51.560
You just put it together?

00:03:51.560 --> 00:03:53.580
This is like, nobody's, I could do this.

00:03:53.580 --> 00:03:54.300
This is easy.

00:03:54.560 --> 00:03:58.420
I could not believe it when I learned about a for loop.

00:03:58.420 --> 00:04:00.540
Because I had discovered this.

00:04:00.540 --> 00:04:03.440
So in BASIC, you can use a go-to expression.

00:04:03.440 --> 00:04:10.060
And when I put a logic test inside a go-to loop that just kept looping across itself.

00:04:10.060 --> 00:04:16.600
And when I got that test to break out of the iterator, you know, that was like discovering the wheel or something.

00:04:16.600 --> 00:04:26.480
And so then when I learned that other programming languages had that built in and they called it a for loop, that just blew my mind.

00:04:26.480 --> 00:04:30.400
I mean, everything that came with these high-powered languages like C.

00:04:30.400 --> 00:04:31.460
That was so awesome.

00:04:31.460 --> 00:04:32.700
Yeah, that's great.

00:04:32.700 --> 00:04:36.380
Yeah, so you studied in university?

00:04:36.380 --> 00:04:40.300
Or when you went to school, what level was that that you started taking program courses?

00:04:40.300 --> 00:04:56.780
I'm talking here about later in high school, the AP or the advanced placement track at the time was in a language called Pascal, which by now has kind of, you know, fallen away into history.

00:04:56.780 --> 00:05:02.760
But in the course of taking this AP test, I learned this dead language.

00:05:02.760 --> 00:05:06.060
And the following year, they switched it over to C++.

00:05:06.440 --> 00:05:11.320
So I retook the course again, still in high school, and learned C++ in the process.

00:05:11.320 --> 00:05:16.820
And then, yeah, in university, I actually went a kind of different direction and studied cognitive science.

00:05:16.820 --> 00:05:24.120
But it still has a foundation in a knowledge of certain computer science principles.

00:05:24.120 --> 00:05:26.820
But that's a pretty different beast.

00:05:26.820 --> 00:05:28.120
It is pretty different.

00:05:28.120 --> 00:05:35.780
Although my experience with cognitive scientists is a lot of them have some reasonable programming skills to do their modeling and whatnot with.

00:05:36.160 --> 00:05:37.900
Yeah, that's been my experience, too.

00:05:37.900 --> 00:05:38.540
Yeah, cool.

00:05:38.540 --> 00:05:43.580
So basic, Pascal, C++, how'd you get to Python?

00:05:43.580 --> 00:05:49.200
I took a very long pit stop in the Pearl universe.

00:05:49.200 --> 00:05:57.200
After university, I got pretty involved with building web applications and CGI.

00:05:57.920 --> 00:06:00.060
This was, you know, the early 2000s.

00:06:00.060 --> 00:06:02.420
CGI was the way to do it.

00:06:02.420 --> 00:06:09.920
And Apache had a strong connection to the PHP community and to the Pearl community.

00:06:09.920 --> 00:06:19.540
And I dug really deep with Pearl for years, but found that this was Pearl 5, 5.8, thereabouts.

00:06:19.920 --> 00:06:22.920
And it really didn't have a good object model.

00:06:22.920 --> 00:06:24.240
It didn't have inheritance.

00:06:24.240 --> 00:06:31.680
And a lot of the things that I came to like from statically typed languages, such as, you know, C and Java.

00:06:32.260 --> 00:06:38.960
And I found that I wasn't able to scale up Pearl web applications as large as I wanted to.

00:06:38.960 --> 00:06:42.300
Eventually, the chaos just took over and the bit rot.

00:06:42.300 --> 00:06:47.940
And I watched a number of software projects die in my hands.

00:06:48.140 --> 00:06:53.800
You know, I loved them so much, but I just couldn't speak to them anymore because my own Pearl was just so backwards.

00:06:53.800 --> 00:07:05.320
And anyway, I went looking for something that would be an interpreted language, but also provide strong concepts about object orientedness and inheritance.

00:07:05.320 --> 00:07:07.060
And Python was perfect.

00:07:07.060 --> 00:07:14.260
And it also had the momentum, the community of the Python, all the extensions and everything.

00:07:14.260 --> 00:07:17.840
Then the decent documentation made it pretty easy to get started.

00:07:18.100 --> 00:07:22.620
So I was really attracted because I just needed to make bigger applications.

00:07:22.620 --> 00:07:26.060
And Python just perfectly filled that space.

00:07:26.060 --> 00:07:26.440
Right.

00:07:26.440 --> 00:07:32.220
Just better structure, better packaging, better ability to separate concerns, all sorts of stuff, right?

00:07:32.220 --> 00:07:32.860
Exactly.

00:07:32.860 --> 00:07:33.440
Yeah.

00:07:33.440 --> 00:07:35.380
And I mean, you could do it in Pearl.

00:07:35.380 --> 00:07:41.520
There was just an awful lot of ritual, literally ritual involved in that stuff.

00:07:41.520 --> 00:07:45.420
And they just thought through it the right way in Python.

00:07:45.420 --> 00:07:46.020
I love it.

00:07:46.020 --> 00:07:47.280
Yeah, I think that's really important.

00:07:47.480 --> 00:07:51.320
Because a lot of people, when they're comparing languages, they're like, well, I can do this in this language.

00:07:51.320 --> 00:07:53.220
Or I could do that in that language or whatever.

00:07:53.220 --> 00:07:56.720
And it's not always about whether it's possible to be done.

00:07:56.720 --> 00:08:00.200
It's also how much is that part of the idioms of the language?

00:08:00.200 --> 00:08:01.620
How hard?

00:08:01.620 --> 00:08:03.500
How do you have to fight the thing?

00:08:03.500 --> 00:08:03.920
Yeah.

00:08:03.920 --> 00:08:04.460
Or do you?

00:08:04.460 --> 00:08:04.680
Yeah.

00:08:04.940 --> 00:08:08.680
There's a saying that I like, falling into the pit of success, right?

00:08:08.680 --> 00:08:10.920
So if you design the language and the APIs, right?

00:08:10.920 --> 00:08:16.100
If you just kind of follow the breadcrumbs, you end up in the right place versus the wrong place.

00:08:16.100 --> 00:08:21.280
And I think there's a lot of that in the Python, the falling into the pit of success story.

00:08:21.280 --> 00:08:22.200
So that's really nice.

00:08:22.400 --> 00:08:22.520
Yeah.

00:08:22.520 --> 00:08:26.540
Well, and you know, it's kind of like we, you have infinite power with Perl.

00:08:26.540 --> 00:08:35.640
And it's the kind of thing where you need to stop and ask yourself if you should, you know, like in the first place, do you embrace that?

00:08:35.740 --> 00:08:43.220
And the people who do become actual wizards and power maybe, well, I don't know.

00:08:43.220 --> 00:08:45.860
Perl is really powerful.

00:08:45.860 --> 00:08:46.840
Let's just say that.

00:08:46.840 --> 00:08:47.580
Yeah, absolutely.

00:08:47.580 --> 00:09:01.960
I've actually, yes, just following good Python practices like PEP 8, for example, or the Google style guides are great ways to accidentally write better code.

00:09:01.960 --> 00:09:07.040
I mean, not accidentally, but just due to habit, create code that is so much more valuable.

00:09:07.040 --> 00:09:08.500
Yeah, yeah, totally agree.

00:09:08.500 --> 00:09:08.940
Totally agree.

00:09:08.940 --> 00:09:13.020
So how'd you get interested in the combination of Django and Flask?

00:09:13.020 --> 00:09:17.120
Like you were obviously doing CGI and Apache stuff with Perl before.

00:09:17.120 --> 00:09:19.600
So you're already in the web space.

00:09:19.600 --> 00:09:20.460
Definitely.

00:09:20.460 --> 00:09:27.760
And I learned Django first because the documentation is so fantastic.

00:09:28.100 --> 00:09:32.860
They have covered the novice, like the tutorials for the beginners.

00:09:32.860 --> 00:09:37.640
They've covered all the depth that you would ever need in terms of API documentation.

00:09:37.640 --> 00:09:49.380
It was just such a great example of how to build a really vibrant community that is able to get up to speed and then live with it for a long time.

00:09:49.620 --> 00:09:51.020
So I learned Django.

00:09:51.020 --> 00:09:52.420
I really like it.

00:09:52.420 --> 00:09:59.340
I thought an awful lot about the model view controller pattern because that generalizes across a whole bunch of different frameworks.

00:09:59.840 --> 00:10:09.160
But what I came to the friction point that I found was the typical object relational mapper.

00:10:09.160 --> 00:10:13.160
The Django way of doing it is part of the core library.

00:10:13.160 --> 00:10:26.220
And I was really attracted to SQLAlchemy just as a good single concern library that just solved the problems with SQL for all time.

00:10:26.220 --> 00:10:41.540
And so I didn't want to sacrifice the clarity of using an ORM like SQLAlchemy just so that I could have a better web application experience.

00:10:41.540 --> 00:10:47.040
I just didn't want my object relational mapper to be so tightly tied to my web stack.

00:10:47.680 --> 00:10:53.720
And so Flask really provided a model that separated those concerns a lot more cleanly.

00:10:53.720 --> 00:11:00.880
And when I say Flask, I'm also just kind of lumping in the Flask SQLAlchemy extension, which bridges it in a very natural way.

00:11:01.460 --> 00:11:22.980
So for me, the ability to deal with the database and alone just in terms of SQLAlchemy and set aside the web concerns for a time meant that it would be a powerful enough way of expressing some really strong statements about the data.

00:11:22.980 --> 00:11:25.040
I have a lot to say about the data.

00:11:25.040 --> 00:11:30.740
But as I got deeper into scientific computing, that's where my concerns really lay.

00:11:30.740 --> 00:11:34.620
And I couldn't imagine using Django to perform that kind of work.

00:11:34.620 --> 00:11:44.280
I definitely don't want to give the impression you can't do these things with Django because I know that you very much can customize it and set it up just the way you want.

00:11:44.280 --> 00:11:47.780
But I think it also goes a little bit back to that pit of success, right?

00:11:47.780 --> 00:11:50.880
That's not the first thing that it encourages.

00:11:50.880 --> 00:11:54.520
It doesn't say bring your own ORM and use it however you want.

00:11:54.520 --> 00:11:58.240
Bring your own ACP client and do whatever you want with it, right?

00:11:58.240 --> 00:12:01.400
It's more about these are the building blocks and you build with them.

00:12:02.080 --> 00:12:11.900
Whereas with Flask or Pyramid, it's like you go through and you pick the type of thing you want to work with, the pieces you want to use across the whole 96,000 packages.

00:12:11.900 --> 00:12:13.760
And then you put them together however you feel like.

00:12:13.760 --> 00:12:15.760
And that doesn't work for everyone.

00:12:15.760 --> 00:12:17.120
But it sounds like it works for you.

00:12:17.120 --> 00:12:19.080
And that's also the way that I like to work.

00:12:19.380 --> 00:12:21.520
So I think it's an interesting option.

00:12:21.520 --> 00:12:23.640
Well, you know, it did and it didn't work for me.

00:12:23.640 --> 00:12:30.060
I actually started running into trouble with taking Flask and then having the freedom, having the power.

00:12:30.060 --> 00:12:34.540
Again, sort of thinking about Pearl and wizardry.

00:12:34.540 --> 00:12:43.460
The ability to glue together absolutely anything that you can imagine can lead you into chaotic projects.

00:12:43.700 --> 00:12:55.380
I think it's a lot of places where you do things in an idiosyncratic way and suddenly you can't really collaborate about your project anymore because you've done things because Flask let you.

00:12:55.380 --> 00:13:09.520
I mean, I'm not blaming Flask, but it just requires such discipline to use it in a way that's predictable enough that any teammate could actually, you know, meet you halfway, read your source code, extend it.

00:13:09.640 --> 00:13:17.040
I'm being a little bit hyperbolic here because I know that there are people out there that are being very successful using Flask in a team context.

00:13:17.040 --> 00:13:33.180
But I found that I was getting burned by some of the power and I wanted to regularize some of the ways that I was using Flask and make some of those things repeatable, if only because I didn't want to have to start from scratch every single time.

00:13:33.180 --> 00:13:36.680
As freeing as that is, I just didn't want to do that anymore.

00:13:36.860 --> 00:13:47.380
Yeah, I do find a lot of times if you've been working in one company or one environment for a long time, you do feel like you're doing the same thing over and over and over again.

00:13:47.380 --> 00:13:52.660
One company I worked at, I went so far as to build like a new app generator.

00:13:54.120 --> 00:13:57.860
And it would spit out a new app with logging already set up.

00:13:57.860 --> 00:14:02.300
We'd have like exception handling services, kind of things like Rollbar before they existed.

00:14:02.300 --> 00:14:08.560
It would automatically, you know, all that stuff was integrated and you press the button and then you added, you know, where you went from there.

00:14:08.560 --> 00:14:09.460
Exactly.

00:14:09.680 --> 00:14:13.900
That is really handy as long as you can tweak and do whatever you want, I suppose.

00:14:13.900 --> 00:14:17.240
Well, so yeah, that's a whole other can of worms there.

00:14:17.240 --> 00:14:27.620
Because I kind of think that scaffolds, so there's a whole ecosystem now of Flask scaffolds because the idea of an app generator is actually really attractive.

00:14:27.620 --> 00:14:32.980
A lot of people have gained efficiencies by automating some of that stuff.

00:14:32.980 --> 00:14:35.240
And I went down that path.

00:14:35.240 --> 00:14:49.260
I started using a Python library called Mr. Bob that just takes a template and a Jinja type template and spits out a file structure, like a directory hierarchy with auto-generated code.

00:14:49.620 --> 00:15:07.920
And what I wanted there then was the ability to keep the app generator alive such that I could then fold back things that I learned in the process of the previous app into the scaffold so that the scaffold evolved along with my other projects.

00:15:07.920 --> 00:15:13.100
And so actually that's a large part of Flask Diamond is that it is an app generator.

00:15:13.100 --> 00:15:18.120
It will scaffold an application, maybe kind of like what you were just describing, you know.

00:15:18.120 --> 00:15:21.440
It has logging already embedded.

00:15:21.440 --> 00:15:22.040
Well, anyway.

00:15:22.040 --> 00:15:23.460
Yeah, so tell us about your project.

00:15:23.460 --> 00:15:27.360
I mean, I think we've sort of found our way to your project in this whole conversation.

00:15:27.360 --> 00:15:31.200
So the thing that you created is called Flask Diamond.

00:15:31.200 --> 00:15:31.780
What is that?

00:15:31.780 --> 00:15:38.440
So Flask Diamond is, I see it as consisting of a couple of important components.

00:15:38.440 --> 00:15:45.680
So at a high level, Flask Diamond is a batteries-included Python Flask framework.

00:15:46.180 --> 00:15:52.880
So the batteries-included part means it will do something without you really doing anything at all.

00:15:52.880 --> 00:16:00.940
So if you pip install Flask Diamond and then you scaffold an app, the app that comes out already works.

00:16:00.940 --> 00:16:02.460
And everything's in it.

00:16:02.520 --> 00:16:05.980
So it does have logging enabled and it does have all these features.

00:16:05.980 --> 00:16:10.240
And, you know, some of these things I might describe a little bit more later.

00:16:10.240 --> 00:16:19.160
But the batteries included means the Flask extensions are already there and they've already been hooked up in a way that basically makes sense.

00:16:19.680 --> 00:16:27.640
For a typical case, this is the kind of thing that's impossible to anticipate everybody's individual project considerations.

00:16:27.640 --> 00:16:35.760
So you want to get kind of a happy medium between providing something that actually does something kind of neat without any configuration.

00:16:36.340 --> 00:16:50.220
And it doesn't ideally have too much bloat in terms of getting in the way of you configuring it for however your project is going to deviate from whatever the defaults are, whatever the opinions are.

00:16:50.220 --> 00:16:50.520
Right.

00:16:50.520 --> 00:16:59.040
The more opinionated you make it and the more features you add to it, kind of ironically almost, I suspect, means the fewer people who are interested and enjoy it.

00:16:59.040 --> 00:16:59.480
Right.

00:16:59.480 --> 00:17:00.780
Yes, I think so.

00:17:00.780 --> 00:17:02.540
Because if you're like, oh, it needs logging.

00:17:02.540 --> 00:17:04.040
Most people are like, yeah, logging is good.

00:17:04.040 --> 00:17:05.820
Oh, it also needs like caching.

00:17:05.820 --> 00:17:07.380
It also needs message queues.

00:17:07.380 --> 00:17:09.160
It also needs like, whoa, I don't need all this stuff.

00:17:09.160 --> 00:17:12.860
I'll just, you know, you start to push people out, right, as you like overdo it.

00:17:12.860 --> 00:17:14.900
So, you know, how did you find that balance?

00:17:14.900 --> 00:17:16.780
I don't know that I have just yet.

00:17:16.780 --> 00:17:18.480
So I'll issue that disclaimer.

00:17:18.480 --> 00:17:30.040
But I will say that for my own uses, I do think that it meets a certain balance by being, I'm calling it radically decomposable.

00:17:30.040 --> 00:17:50.840
So what I mean by that is it is actually safe to strip away pretty much everything that comes sort of bundled by default with Flask Diamond and actually create a command line app that doesn't even use Flask to spin up a web server and a database model.

00:17:51.040 --> 00:17:57.920
I've actually used the whole Flask Diamond setup to create, yeah, really simple little scripts.

00:17:57.920 --> 00:18:07.240
But I've also used that basic pattern of a command line driver with a full-fledged SQLAlchemy database lurking behind it.

00:18:07.600 --> 00:18:21.140
And again, I'll use Flask Diamond to do that because it merely simplifies the interfaces and the process and the extensions and importing the database models and setting up the namespaces in a predictable way.

00:18:21.140 --> 00:18:31.820
You know, it does all of that for free such that I actually don't care if Flask happens to be a WSGI environment, you know, an HTTP server.

00:18:32.080 --> 00:18:37.840
I'm actually using it as just this really general purpose application framework.

00:18:37.840 --> 00:18:47.260
And I even consider the web part to be decomposable and extractable from the whole rest of the application platform.

00:18:47.260 --> 00:18:52.480
So what I'm saying is I don't even always write web apps with Flask anymore.

00:18:52.980 --> 00:19:03.240
There's a way of using the Flask application context to script an app that does not actually need to be running in conjunction with a WSGI server.

00:19:03.240 --> 00:19:05.720
It's an incredibly powerful pattern.

00:19:05.720 --> 00:19:10.300
And it's another thing that I would never do with a thing like Django.

00:19:10.300 --> 00:19:12.900
That is, it's very heavy.

00:19:12.900 --> 00:19:19.700
And when you start up a Django process, it's not that easy to slice out different pieces of the core.

00:19:20.040 --> 00:19:25.000
But with Flask, pretty much nothing is included in the core to begin with.

00:19:25.000 --> 00:19:33.720
Yeah, even Flask itself is made up of like a number of building blocks that are put together, like It's Dangerous and Vexig and those sorts of things, right?

00:19:33.720 --> 00:19:34.300
That's right.

00:19:34.300 --> 00:19:36.720
You know, you mentioned It's Dangerous.

00:19:36.720 --> 00:19:51.320
And one of the things that is kind of nice about folding in something like It's Dangerous using something like Flask Diamond is that by default, it's just folded in in a way that is going to work.

00:19:51.320 --> 00:20:04.120
So the pathway there is through Flask security and Flask security will sanitize all your inputs with It's Dangerous and perform all of the cross-site scripting protections.

00:20:04.120 --> 00:20:06.560
And so, you know, it's there.

00:20:06.560 --> 00:20:10.360
You know it's there and that your input will be sanitized.

00:20:10.360 --> 00:20:14.340
And frankly, if you don't want it, you don't have to have it.

00:20:14.340 --> 00:20:16.140
You can also get rid of all that.

00:20:20.320 --> 00:20:33.600
This portion of Talk Python To Me has been brought to you by Rollbar.

00:20:33.600 --> 00:20:37.140
One of the frustrating things about being a developer is dealing with errors.

00:20:37.140 --> 00:20:45.320
Relying on users to report errors, digging through log files, trying to debug issues, or a million alerts just flooding your inbox and ruining your day.

00:20:45.320 --> 00:20:50.300
With Rollbar's full stack error monitoring, you'll get the context, insights, and control of the data.

00:20:50.300 --> 00:20:52.540
All that you need to find and fix bugs faster.

00:20:52.540 --> 00:20:54.240
It's easy to install.

00:20:54.240 --> 00:20:58.480
You can start tracking production errors and deployments in eight minutes or even less.

00:20:58.480 --> 00:21:07.860
Rollbar works with all the major languages and frameworks, including the Python ones such as Django, Flask, Pyramid, as well as Ruby, JavaScript, Node, iOS, and Android.

00:21:08.220 --> 00:21:10.460
You can integrate Rollbar into your existing workflow.

00:21:10.460 --> 00:21:12.720
Send error alerts to Slack or HipChat.

00:21:12.720 --> 00:21:17.060
Or even automatically create issues in Jira, Pivotal Tracker, and a whole bunch more.

00:21:17.060 --> 00:21:20.440
Rollbar has put together a special offer for Talk Python To Me listeners.

00:21:20.440 --> 00:21:22.880
Visit rollbar.com slash Talk Python To Me.

00:21:23.220 --> 00:21:26.120
Sign up and get the bootstrap plan free for 90 days.

00:21:26.120 --> 00:21:29.180
That's 300,000 errors tracked all for free.

00:21:29.180 --> 00:21:32.900
But hey, just between you and me, I really hope you don't encounter that many errors.

00:21:32.900 --> 00:21:38.900
Loved by developers at awesome companies like Heroku, Twilio, Kayak, Instacart, Zendesk, Twitch, and more.

00:21:38.900 --> 00:21:40.520
Give Rollbar a try today.

00:21:40.520 --> 00:21:43.120
Go to rollbar.com slash Talk Python To Me.

00:21:51.300 --> 00:21:56.820
Before we get to the nitty-gritty details of it, tell me why and when did you create this?

00:21:56.820 --> 00:21:57.740
How old is this project?

00:21:57.740 --> 00:22:00.300
And what got you to say, all right, I'm making this thing?

00:22:00.300 --> 00:22:00.760
Totally.

00:22:00.760 --> 00:22:04.580
So this has been going on for years by this point.

00:22:04.580 --> 00:22:08.560
And it's the kind of thing that didn't happen intentionally.

00:22:08.560 --> 00:22:12.740
No one ever sits down and says, I'm going to write a framework today.

00:22:12.740 --> 00:22:13.960
But I needed it.

00:22:13.960 --> 00:22:20.960
I found that I just needed something to fill a missing spot in my research pipeline.

00:22:20.960 --> 00:22:22.040
Pipeline, basically.

00:22:22.040 --> 00:22:31.020
So I was doing a lot of work with online memes and their propagation through social networks.

00:22:31.020 --> 00:22:33.400
And so I was building a couple of web apps.

00:22:33.400 --> 00:22:38.000
And I guess this is 2011, 2012.

00:22:38.420 --> 00:22:42.880
I was using a framework called WebPy, which Reddit was using.

00:22:42.880 --> 00:22:50.720
And at the time, the principal author was a guy named Aaron Swartz, who died in early 2013.

00:22:50.720 --> 00:22:55.720
And the WebPy project died with him, as far as I can tell.

00:22:55.720 --> 00:22:56.880
So I needed something.

00:22:56.880 --> 00:22:57.240
Yeah.

00:22:57.280 --> 00:22:58.960
That whole story is super tragic.

00:22:58.960 --> 00:22:59.420
Yeah.

00:22:59.420 --> 00:23:00.160
It's unfortunate.

00:23:00.160 --> 00:23:00.640
Yeah.

00:23:00.640 --> 00:23:01.260
It's very sad.

00:23:01.260 --> 00:23:01.800
Yeah.

00:23:01.800 --> 00:23:09.160
It's interesting to consider some of just the rippling costs, the things that a huge tragedy,

00:23:09.160 --> 00:23:09.640
actually.

00:23:09.640 --> 00:23:16.660
And so when you're trying to do some kind of academic work that's going to be reproducible,

00:23:16.660 --> 00:23:20.680
be repeatable, the code needs to be shareable.

00:23:20.680 --> 00:23:21.720
It needs to be portable.

00:23:21.720 --> 00:23:26.620
You need to be able to give it to other people and they need to be able to run it.

00:23:26.620 --> 00:23:31.400
And it also needs to be able to run ideally 5, 10, 20 years in the future.

00:23:31.400 --> 00:23:37.800
And so a web framework that's not going to be evolving beyond 2012 or so is no good.

00:23:37.800 --> 00:23:41.820
So I experimented with Bottle and I liked it.

00:23:41.820 --> 00:23:44.760
And just I discovered Flask.

00:23:44.760 --> 00:23:49.640
It's kind of, I think, because of the plan words between Bottle and Flask.

00:23:49.640 --> 00:23:57.700
And in summer of 2013, I started really making some of these ideas into a repeatable template.

00:23:57.700 --> 00:24:03.260
So I was building, at this time, an application to model Twitter.

00:24:03.260 --> 00:24:05.480
I was scraping a ton of Twitter data.

00:24:05.480 --> 00:24:09.200
And so I had all these different types of objects.

00:24:09.200 --> 00:24:13.880
There were accounts and there were tweets and there were links between them and all the

00:24:13.880 --> 00:24:17.760
data model that you need to do to scrape Twitter.

00:24:17.760 --> 00:24:25.000
What I really needed was a way for other peers, collaborators to be able to look at this data

00:24:25.000 --> 00:24:31.160
without needing to understand SQL themselves, without needing to understand Python, ideally

00:24:31.160 --> 00:24:33.460
without even me needing to be there.

00:24:33.460 --> 00:24:39.440
And it was through Flask that I discovered this whole ecosystem then of things like Flask

00:24:39.440 --> 00:24:46.400
Flask admin and Flask security and the whole rest of it that I started assembling into this kind

00:24:46.400 --> 00:24:51.500
of research data support infrastructure.

00:24:51.500 --> 00:24:58.780
So all my data then I could put on a server somewhere in the cloud and just give a login to

00:24:58.780 --> 00:25:00.980
an advisor and they would be able to look at it.

00:25:01.380 --> 00:25:07.540
So the need was really, I just had so much data and I wanted to talk about it.

00:25:07.540 --> 00:25:09.700
I wanted to collaborate with it.

00:25:09.700 --> 00:25:15.600
And like I said earlier, I didn't want to have, I didn't want to be tied to the Django ORM.

00:25:15.600 --> 00:25:17.140
I just wanted to use SQLAlchemy.

00:25:17.140 --> 00:25:17.500
Cool.

00:25:17.500 --> 00:25:20.100
I think that's a really forward looking way of doing it.

00:25:20.100 --> 00:25:21.680
Here, I'm doing this research.

00:25:21.680 --> 00:25:22.620
I'm going to put it on the web.

00:25:22.740 --> 00:25:26.200
You can just execute it, slice it, dice it, whatever you want.

00:25:26.200 --> 00:25:31.900
This predates Docker, but it seems to me like Docker is being used by a lot of scientists

00:25:31.900 --> 00:25:33.360
for that purpose as well.

00:25:33.360 --> 00:25:38.980
Like I'm going to package up the execution of my analysis into a Docker image and then you

00:25:38.980 --> 00:25:40.100
can go do what you want.

00:25:40.100 --> 00:25:42.720
So it's like the next level or something.

00:25:42.720 --> 00:25:43.700
Yes, absolutely.

00:25:43.700 --> 00:25:50.520
A kind of anecdotal story is that back in the day, I was aware of a guy in this one department

00:25:50.520 --> 00:25:57.320
who needed, for timing purposes, he needed these 286s because that was the only thing that would

00:25:57.320 --> 00:26:03.240
execute his code at the right timing for a certain kind of reaction time task that he was recording.

00:26:03.240 --> 00:26:07.200
So he actually stockpiled these 286s.

00:26:07.200 --> 00:26:10.440
And I mean, by the way, this was happening in like 2008.

00:26:10.440 --> 00:26:16.580
So someone with a big pile of 286s, all for the purpose of getting the software to run exactly

00:26:16.580 --> 00:26:19.080
right decades after it was originally written.

00:26:19.080 --> 00:26:20.460
It's a serious problem.

00:26:20.460 --> 00:26:21.240
It really is.

00:26:21.240 --> 00:26:26.200
You take the 286, 16 megahertz and don't press the turbo button or it won't work right.

00:26:26.200 --> 00:26:27.360
Exactly.

00:26:27.360 --> 00:26:29.300
That'll screw up all your data.

00:26:29.300 --> 00:26:30.120
Yeah.

00:26:30.120 --> 00:26:31.340
But no, I mean, it's a real problem.

00:26:31.340 --> 00:26:37.580
And reproducibility is a big it's a hot topic in science right now, especially in the field

00:26:37.580 --> 00:26:41.600
of social psychology, which is kind of my home base right now.

00:26:41.960 --> 00:26:47.220
These issues of sharing data between labs and getting the same results, even when different

00:26:47.220 --> 00:26:48.280
researchers do it.

00:26:48.280 --> 00:26:51.080
It's actually getting a lot of cool papers written right now.

00:26:51.080 --> 00:26:55.760
So anyway, yeah, it's really important for data to be kind of social.

00:26:55.760 --> 00:26:56.200
Sure.

00:26:56.200 --> 00:27:03.580
I don't think that we as an industry or users or programmers across the board, we're not

00:27:03.580 --> 00:27:08.720
used to thinking of execution as a thing that has to be kept for long terms of period.

00:27:08.720 --> 00:27:11.120
We think about how are you going to archive data?

00:27:11.120 --> 00:27:14.940
How are you going to make that interoperable so you can read it in the future?

00:27:15.080 --> 00:27:20.120
But not like, how am I going to be able to run this algorithm that nobody's going to rewrite

00:27:20.120 --> 00:27:21.860
or something like this?

00:27:21.860 --> 00:27:23.040
This is an interesting problem.

00:27:23.040 --> 00:27:29.300
It's not something that affected my day to day life until relatively recently.

00:27:29.300 --> 00:27:38.600
But it gives me new respect for mainframe type stuff, like the whole IBM system 360 stack

00:27:38.600 --> 00:27:44.880
that goes back 50 years and what they have done to virtualize hardware and enable code, ancient

00:27:44.880 --> 00:27:46.720
code to still execute today.

00:27:46.720 --> 00:27:52.120
I mean, I think about just the horrors that the banks must be facing on a regular basis.

00:27:52.120 --> 00:27:57.660
So yeah, you know, let's be sensitive to those forward looking issues.

00:27:57.660 --> 00:28:00.880
And I don't know, maybe mitigate that a little bit.

00:28:00.880 --> 00:28:02.280
Fully the solution.

00:28:02.280 --> 00:28:02.840
But anyway.

00:28:02.840 --> 00:28:05.260
Yeah, it's a small deposit.

00:28:05.260 --> 00:28:10.200
But I think you're probably right that like emulation and virtualization and, you know,

00:28:10.200 --> 00:28:11.040
throw containers in there.

00:28:11.040 --> 00:28:13.260
Those will like alleviate that to some degree.

00:28:13.260 --> 00:28:14.480
But still, it's going to be tough.

00:28:14.680 --> 00:28:17.380
So there's a bunch of cool features to flash diamond.

00:28:17.380 --> 00:28:18.900
Let's let's dig into those for a bit.

00:28:18.900 --> 00:28:19.180
Yeah.

00:28:19.180 --> 00:28:25.620
So what I found was, you know, when we're talking about not wanting to repeat the same

00:28:25.620 --> 00:28:30.740
steps every single time you start a new application, I found there were a couple of features that

00:28:30.740 --> 00:28:36.500
pretty much every application I needed to build, it required those features.

00:28:36.640 --> 00:28:40.660
And I've already talked about some of these things that I just needed in the process of

00:28:40.660 --> 00:28:47.360
just normal, like I say, social data, like collaborative access to my data.

00:28:47.360 --> 00:28:51.360
And so this account management is a pretty obvious feature.

00:28:51.360 --> 00:28:58.820
It is provided by Flask admin in association with a number of other really helpful extensions.

00:28:58.820 --> 00:29:00.660
So I've already mentioned Flask security.

00:29:00.660 --> 00:29:08.920
And one of the things that I actually liked a lot about Django is the way that you get this

00:29:08.920 --> 00:29:12.560
GUI management interface kind of for free.

00:29:12.700 --> 00:29:20.440
Whatever your object model is, Django makes it so easy to get in there, see it in your web browser,

00:29:20.440 --> 00:29:22.020
create test data.

00:29:22.020 --> 00:29:26.440
And so that's something that Flask admin provides pretty easily.

00:29:26.440 --> 00:29:28.520
And so I really wanted to bake that in.

00:29:28.520 --> 00:29:31.220
So administrative access just works.

00:29:31.860 --> 00:29:35.180
And then databases are especially important for me.

00:29:35.180 --> 00:29:41.560
I've used a whole bunch of different SQL backends, but I've also used MongoDB very successfully

00:29:41.560 --> 00:29:42.380
with Flask.

00:29:42.380 --> 00:29:50.300
This is another instance where just because Flask diamond has a little opinion about databases

00:29:50.300 --> 00:29:57.260
and the basic entity relationship pattern for describing object models, despite that, it's

00:29:57.260 --> 00:30:00.060
really not very hard to switch that out for Mongo.

00:30:00.420 --> 00:30:03.820
And when I say not very hard, I mean five lines of code.

00:30:03.820 --> 00:30:11.140
There's no extremely deep epistemological commitment to using a SQL database just because the default

00:30:11.140 --> 00:30:12.320
is a SQL database.

00:30:12.320 --> 00:30:12.800
That's cool.

00:30:12.800 --> 00:30:15.380
And so you have a SQLAlchemy part of that story?

00:30:15.380 --> 00:30:17.080
In a couple of different ways, actually.

00:30:17.080 --> 00:30:27.500
So SQLAlchemy is not the only object relational mapper, but it has documentation that is spiritual.

00:30:27.500 --> 00:30:32.420
I think alchemy is a great term for what SQLAlchemy does.

00:30:32.420 --> 00:30:41.960
They go to crazy places in terms of what they are doing to layer the SQLAlchemy core on top of these

00:30:41.960 --> 00:30:44.240
relatively stupid databases.

00:30:44.240 --> 00:30:47.680
I'm just so impressed with what SQLAlchemy has done.

00:30:47.680 --> 00:30:48.680
Yeah, I really like it too.

00:30:48.680 --> 00:30:49.360
I use it a lot.

00:30:50.080 --> 00:30:50.600
Yeah.

00:30:50.600 --> 00:30:56.620
But, you know, there's other ones like PeeWee that are really popular and a lot of people like it.

00:30:56.620 --> 00:31:02.360
In terms of being opinionated, you know, in terms of offering these little opinions for optimizations,

00:31:02.360 --> 00:31:12.380
the reason that I'm going with SQLAlchemy is because sometimes there's just a really crazy thing that you just want to do.

00:31:12.720 --> 00:31:15.160
And they've already thought about it.

00:31:15.160 --> 00:31:18.960
I haven't found something that I can't do yet with SQLAlchemy.

00:31:18.960 --> 00:31:29.200
And if there is something that maybe you can't express with SQLAlchemy, you can always just drop to a database shell and do it directly in Postgres or whatever.

00:31:29.200 --> 00:31:42.920
So that's another thing that I never wanted to get too far away from was the ability to just physically interact with the database and not lose some connection back to the original web application.

00:31:42.920 --> 00:31:46.760
And like I say again, the alchemy is magic.

00:31:46.760 --> 00:31:47.060
Nice.

00:31:47.060 --> 00:31:48.900
What they have done makes it possible.

00:31:48.900 --> 00:31:50.180
Yeah, it is really great.

00:31:50.180 --> 00:31:54.400
I think it never ceases to amaze me that you really can keep on doing that.

00:31:54.400 --> 00:31:56.540
I can also model that and see what I mean, right?

00:31:56.640 --> 00:31:59.740
Yeah, basically, I think it's good enough for real research.

00:31:59.740 --> 00:32:00.720
Yeah, I totally agree.

00:32:00.720 --> 00:32:01.920
I guess that's the story.

00:32:01.920 --> 00:32:02.380
Yeah.

00:32:02.380 --> 00:32:05.720
Yeah, and there's a lot of interesting places using it in production.

00:32:05.720 --> 00:32:12.640
I forget some, I don't want to say the wrong one off the top of my head, but some really major apps that are very cool, major companies using it.

00:32:12.640 --> 00:32:25.560
You also talked about pointing Flask Diamond at existing databases and having presumably the SQLAlchemy classes, the models generated from existing databases.

00:32:25.700 --> 00:32:28.040
Tell us about that because that sounds like saving a ton of work.

00:32:28.040 --> 00:32:32.840
This is actually just some kind of experimentation that I've done on the side with some of my buddies.

00:32:32.840 --> 00:32:35.140
And we have done it successfully.

00:32:35.140 --> 00:32:44.740
SQLAlchemy ships with, it's a Python script that'll scrape your SQL schema and auto generate model code for you.

00:32:44.900 --> 00:32:49.280
So I don't want to give you the wrong idea that this is already baked into Flask Diamond.

00:32:49.280 --> 00:32:53.680
Simply that we have done it in a Flask Diamond app.

00:32:53.680 --> 00:32:55.500
It worked pretty much.

00:32:55.500 --> 00:32:58.480
And it did save us time in this one instance.

00:32:59.160 --> 00:33:04.320
So I mean, again, this is kind of like sort of spooky, pseudo-magical stuff here.

00:33:04.320 --> 00:33:07.940
And I'm saying like, yes, yes, this is possible, but I will only speak of it.

00:33:07.940 --> 00:33:10.440
I won't actually show you.

00:33:10.440 --> 00:33:13.120
But you'll just have to take my word for it.

00:33:13.120 --> 00:33:13.820
But it's possible.

00:33:13.820 --> 00:33:15.380
Yeah, I've done that before as well.

00:33:15.380 --> 00:33:19.900
I think there was a third-party package that didn't come directly from SQLAlchemy.

00:33:19.900 --> 00:33:20.600
That sounds right.

00:33:20.600 --> 00:33:22.080
Maybe the contrib.

00:33:22.520 --> 00:33:31.600
Yeah, it might have been contrib or something that was like, hey, this works with SQLAlchemy and it'll like read your schema and it'll actually generate your classes.

00:33:31.600 --> 00:33:34.700
And maybe the classes have stupid names and you need to go edit them a little bit.

00:33:34.700 --> 00:33:40.740
But still, like when you're looking at a big daunting database and you're like, oh, I got to get started with this.

00:33:40.740 --> 00:33:44.800
Like the ability to auto-generate or pre-generate like a starting place is really cool.

00:33:44.800 --> 00:33:45.260
Yeah.

00:33:45.260 --> 00:33:45.800
And it worked.

00:33:45.800 --> 00:33:47.800
Yeah, like I say, it worked most of the way.

00:33:47.800 --> 00:33:49.180
Which saves you most of the work.

00:33:49.180 --> 00:33:50.120
That's right.

00:33:50.120 --> 00:33:51.020
Yeah.

00:33:51.020 --> 00:33:51.540
That's awesome.

00:33:51.800 --> 00:33:55.060
You said it also has one of the features is model CRUD.

00:33:55.060 --> 00:33:56.620
Create, read, update, delete.

00:33:56.620 --> 00:33:57.280
Yeah, that's right.

00:33:57.280 --> 00:34:02.360
Create, read, update, delete is a really useful pattern that I've encountered all over the place.

00:34:02.360 --> 00:34:11.760
And all the more so with RESTful HTTP interfaces where the basic HTTP verbs more or less map on to create, read, update, and delete.

00:34:11.760 --> 00:34:14.420
And so I just found that I was doing this constantly.

00:34:15.040 --> 00:34:16.040
And so I wanted to do this.

00:34:16.040 --> 00:34:16.040
And so I wanted to do this.

00:34:16.040 --> 00:34:16.040
And so I wanted to do this.

00:34:16.040 --> 00:34:16.040
And so I wanted to do this.

00:34:16.040 --> 00:34:16.040
And so I wanted to do this.

00:34:16.040 --> 00:34:16.040
And so I wanted to do this.

00:34:16.040 --> 00:34:17.040
And so I wanted to do this.

00:34:17.040 --> 00:34:18.040
And so I wanted to do this.

00:34:18.040 --> 00:34:26.480
And so I wanted to persist that through just the general object model.

00:34:26.480 --> 00:34:35.340
And so this is actually implemented as a mix in that you can include with any SQLAlchemy object that you create.

00:34:35.340 --> 00:34:40.560
And it simply extends your model with create, read, update, and delete for free.

00:34:40.560 --> 00:34:48.940
And it extends it a little bit more with the ability to rapidly load and dump objects from JSON.

00:34:48.940 --> 00:34:51.900
Or you can extend it further for something like CSV.

00:34:51.900 --> 00:34:59.840
So the idea is to take some of the nice stuff from the GUI CRUD and enable that Pythonically.

00:34:59.840 --> 00:35:03.880
It's just a convenience thing, but I use it constantly.

00:35:04.440 --> 00:35:10.180
It's really the only way that I'm interacting with objects anymore is through this CRUD interface.

00:35:10.180 --> 00:35:11.880
Huge time saver for me, at least.

00:35:11.880 --> 00:35:12.860
Yeah, that sounds cool.

00:35:12.860 --> 00:35:15.640
Another thing a lot of apps need is email.

00:35:15.640 --> 00:35:16.460
Definitely.

00:35:16.460 --> 00:35:18.400
It's a necessary evil.

00:35:18.400 --> 00:35:27.620
Email is kind of an out-of-channel or an out-of-band way of communicating things like account changes.

00:35:28.400 --> 00:35:43.920
And actually, Flask security provides a number of features for email account confirmation if you're going to incorporate some kind of second factor authentication into your platform.

00:35:43.920 --> 00:35:46.140
So email is a necessary thing.

00:35:46.140 --> 00:35:47.680
It's provided by Flask mail.

00:35:48.040 --> 00:35:49.660
Again, needs to be integrated.

00:35:49.660 --> 00:35:56.220
And once again, Flask Diamond gives you an integrated email solution for free, batteries included.

00:35:56.220 --> 00:36:00.920
However, in this case, this is the kind of thing that not everybody needs.

00:36:01.140 --> 00:36:08.220
And so I've gone the extra step and I've actually commented out the one line that would enable email by default.

00:36:08.220 --> 00:36:14.700
And so if you find that you actually want it in your app, you are going to have to uncomment that line.

00:36:14.700 --> 00:36:17.740
But then, you know, emails is just there and it's free.

00:36:17.740 --> 00:36:19.480
And it works.

00:36:19.680 --> 00:36:20.540
Yeah, that's really great.

00:36:20.540 --> 00:36:22.080
And testing.

00:36:22.080 --> 00:36:30.180
One of the things I feel like is more possible, things like Flask, the micro frameworks, is because they're just less, they're easier to test.

00:36:30.180 --> 00:36:41.500
Yeah, it's possible to get in there and test some really low level things like the generation of signals or like I mentioned the application context earlier.

00:36:41.500 --> 00:36:52.840
The ability to create an application completely separate from any kind of web server or any kind of WSGI serving infrastructure is so powerful for testing.

00:36:52.840 --> 00:37:04.060
And so Flask testing makes some of these things really easy, like creating a debugging server and creating a phony HTTP test client for local testing of HTTP interfaces.

00:37:04.060 --> 00:37:06.580
So, of course, that's stitched in.

00:37:06.580 --> 00:37:21.500
But also, a simple testing framework is included with the scaffold to provide some examples of how you might use nose test, which is one of the Python testing suites.

00:37:21.500 --> 00:37:24.020
Other examples are pytest or Tox.

00:37:24.020 --> 00:37:31.600
And, you know, once again, you can actually use another testing platform, apart from nose, relatively easily.

00:37:31.600 --> 00:37:34.720
So I actually use Tox on a couple of projects.

00:37:34.720 --> 00:37:56.900
But the scaffold includes some, a pattern for building a test harness using nose tests and integrating it with the command line, making it pretty easy to run single tests, to run all of the tests, to automatically run tests when a file changes.

00:37:56.900 --> 00:38:03.000
Certain things that become really more like the DevOps side of things.

00:38:03.000 --> 00:38:10.640
Once again, a basic workable solution comes for free out of the box with Flask Diamond.

00:38:11.180 --> 00:38:17.400
And once again, it's the kind of thing that if you don't like it, you can just delete it and it's gone because it's really not baked in very deeply.

00:38:17.400 --> 00:38:26.680
It's just hooked in enough that it'll work, that the make file has a make test command and it'll do the right thing unless you don't want it to.

00:38:26.680 --> 00:38:27.020
Right.

00:38:27.020 --> 00:38:29.540
There's probably like a test stop py or something like that.

00:38:29.540 --> 00:38:30.120
Exactly.

00:38:30.120 --> 00:38:30.560
Hang around somewhere.

00:38:30.560 --> 00:38:30.900
Yeah.

00:38:31.180 --> 00:38:33.040
It was a test directory, but anyway.

00:38:33.040 --> 00:38:33.560
Right.

00:38:33.560 --> 00:38:34.000
Okay, sure.

00:38:34.000 --> 00:38:37.560
You could delete the test directory and you're done with the test if you don't want it or whatever.

00:38:37.560 --> 00:38:37.820
Yeah.

00:38:37.820 --> 00:38:52.160
This portion of Talk Python is brought to you by Hired.

00:38:52.160 --> 00:38:55.200
Hired is the platform for top Python developer jobs.

00:38:55.200 --> 00:39:00.000
Create your profile and instantly get access to 3,500 companies who will work to compete with you.

00:39:00.360 --> 00:39:02.860
Take it from one of Hired's users who recently got a job and said,

00:39:02.860 --> 00:39:08.160
I had my first offer on Thursday after going live on Monday and I ended up getting eight offers in total.

00:39:08.160 --> 00:39:11.620
I've worked with recruiters in the past, but they've always been pretty hit and miss.

00:39:11.620 --> 00:39:14.460
I tried LinkedIn, but I found Hired to be the best.

00:39:14.460 --> 00:39:16.560
I really like knowing the salary up front.

00:39:16.560 --> 00:39:18.920
Privacy was also a huge seller for me.

00:39:18.920 --> 00:39:20.600
Sounds awesome, doesn't it?

00:39:20.600 --> 00:39:22.620
Well, wait until you hear about the sign-in bonus.

00:39:22.620 --> 00:39:26.040
Everyone who accepts a job from Hired gets $1,000 sign-in bonus.

00:39:26.040 --> 00:39:28.680
And as Talk Python listeners, it gets way sweeter.

00:39:29.040 --> 00:39:33.920
Use the link Hired.com slash Talk Python To Me and Hired will double the signing bonus to $2,000.

00:39:33.920 --> 00:39:35.720
Opportunity's knocking.

00:39:35.720 --> 00:39:39.480
Visit Hired.com slash Talk Python To Me and answer the door.

00:39:46.420 --> 00:39:47.960
You also talked about deployment.

00:39:47.960 --> 00:39:51.560
How's the deployment different or enhanced with Plast Diamond?

00:39:51.560 --> 00:40:09.840
I came to really like a Python package called Fabric that abstracted away some of the weirdness of SSH and RSync and simplified some of the management of remote tasks that occur on your testing server or on your production server.

00:40:10.500 --> 00:40:14.120
And so I started baking this into the scaffold again.

00:40:14.120 --> 00:40:21.320
So what comes for free is a little fab file that actually I want to take a step back.

00:40:21.320 --> 00:40:24.260
For deployment, you can do it in a couple of different patterns.

00:40:24.600 --> 00:40:37.120
There's a way in which you could push your code to a central Git server or something like that and have all of your testing machines automatically pull from that server or have your production machines pull from that server.

00:40:37.120 --> 00:40:39.860
And so that's kind of a passive deployment.

00:40:40.120 --> 00:40:47.580
And then there's also an active deployment where you physically push the code to the machine that you're actually going to be running it on.

00:40:47.580 --> 00:40:51.560
You know, you don't relay it through some other intermediary server.

00:40:51.560 --> 00:40:55.840
And so I wanted to support both styles, actually, of deployment.

00:40:55.840 --> 00:41:05.540
And so that's supported with Fabric and with a command line interface, because this is the kind of thing that every command is a one off.

00:41:05.540 --> 00:41:13.220
And you just want to rapidly be able to SSH to a deployment server or push the code directly to a deployment server.

00:41:13.220 --> 00:41:15.740
And these things happen constantly.

00:41:15.740 --> 00:41:20.020
I just wanted, again, a simple solution that came for free out of the box.

00:41:20.020 --> 00:41:20.800
Yeah, that's cool.

00:41:20.800 --> 00:41:22.720
So nice that that's built in there.

00:41:23.220 --> 00:41:28.060
So another thing when I was cruising around your website that I saw, you were talking about facets.

00:41:28.060 --> 00:41:30.740
What are facets in this project?

00:41:30.740 --> 00:41:35.760
In a roundabout way, I've kind of been describing what these facets are.

00:41:35.760 --> 00:41:38.040
A facet is kind of a feature.

00:41:38.040 --> 00:41:47.340
So, you know, a facet is kind of like a face of a surface or as a play on words, a diamond is faceted with many faces.

00:41:47.340 --> 00:41:51.060
And so each of these features is actually a facet.

00:41:51.180 --> 00:41:52.720
So there's an account facet.

00:41:52.720 --> 00:41:54.960
There's an administration facet.

00:41:54.960 --> 00:41:56.500
There's a databases facet.

00:41:56.500 --> 00:41:58.360
There's an email facet and so on.

00:41:58.360 --> 00:42:11.640
And the basic idea is that together, these facets are the default types of considerations, the typical considerations that many of these web applications just require.

00:42:11.640 --> 00:42:14.520
You know, insofar as many of them need accounts and administration.

00:42:14.520 --> 00:42:16.200
Well, those are facets.

00:42:16.200 --> 00:42:27.220
At the Python level, each facet is really like a proxy for the extensions that are loaded to actually provide that facet.

00:42:27.220 --> 00:42:39.500
So I mentioned that Flask admin and Flask security have an interplay where admin uses security for login purposes.

00:42:39.500 --> 00:42:49.080
And the facets just ensure that those get that all the objects are created in the correct order and that Flask security knows about Flask admin.

00:42:49.080 --> 00:43:05.040
And what this means, again, Pythonically, is that you can either inherit and override or completely comment out any of these facets and really control whether or not your application has that facet at all.

00:43:05.040 --> 00:43:07.000
Right. Or replace it with something different.

00:43:07.000 --> 00:43:07.920
Exactly.

00:43:07.920 --> 00:43:08.560
Yeah. OK.

00:43:08.560 --> 00:43:16.420
And so it creates like a predictable hook where if you're going to use a different database, then that's where you do it.

00:43:16.420 --> 00:43:23.040
You know, you don't just randomly decide when you're sitting down to create the application that, you know, I'm going to do my database, whatever.

00:43:23.040 --> 00:43:26.980
This is predictable place where all the database stuff happens.

00:43:26.980 --> 00:43:29.160
You just go to the database facet.

00:43:29.160 --> 00:43:32.200
And if you're going to use Mongo, then you do it there.

00:43:32.320 --> 00:43:36.120
You just override, you inherit and override what I wrote.

00:43:36.120 --> 00:43:41.560
And boom, that's the right place or the opinionated place.

00:43:41.560 --> 00:43:45.420
Certainly not the right place, but that's the agreed upon place.

00:43:45.420 --> 00:43:45.760
Sure.

00:43:45.760 --> 00:43:47.160
I see.

00:43:47.160 --> 00:43:48.280
So it's kind of a convention.

00:43:48.280 --> 00:43:55.200
The facets sort of bundled, like your convention on top of like Flask security or some part of the API.

00:43:55.200 --> 00:43:55.740
Exactly.

00:43:55.740 --> 00:43:57.460
Convention is a good word for it.

00:43:57.460 --> 00:43:58.620
It's creating some conventions.

00:43:58.620 --> 00:43:59.100
OK.

00:43:59.100 --> 00:44:00.080
Conventions are good.

00:44:00.080 --> 00:44:00.860
That's cool.

00:44:01.400 --> 00:44:08.060
So let's assume that people out there are basically familiar with how you write Flask apps and how you write Django apps.

00:44:08.060 --> 00:44:11.420
Can you talk just a little bit about like, what does it look like?

00:44:11.420 --> 00:44:13.240
What's the API look like?

00:44:13.240 --> 00:44:14.400
Does it look a lot like Flask?

00:44:14.400 --> 00:44:15.100
Does it look like Django?

00:44:15.100 --> 00:44:19.780
Like what do I, what are the feelings I get when I write code in this, on top of this?

00:44:19.780 --> 00:44:20.140
Totally.

00:44:20.140 --> 00:44:25.320
I would expect it to be really familiar for Flask users.

00:44:25.320 --> 00:44:29.640
Because what comes out is actually a Flask application.

00:44:29.640 --> 00:44:32.420
The process starts off a lot like Django.

00:44:32.420 --> 00:44:41.160
You know, I was saying that Django has done such a great job of creating tutorials and making it easy for new users to get started.

00:44:41.160 --> 00:44:54.660
So just like Django, Flask Diamond begins with a scaffold and it creates a directory structure that would be really familiar to somebody who uses Django.

00:44:55.160 --> 00:44:58.600
So there's a manage.py and it does basically what you would expect.

00:44:58.600 --> 00:45:04.780
You can do manage.py server and then it'll, you know, just run your server or manage.py DB.

00:45:04.780 --> 00:45:08.040
And it gives you access to all of your database stuff.

00:45:08.180 --> 00:45:11.460
So in that sense, it's reminiscent of Django.

00:45:11.460 --> 00:45:18.000
And incidentally, all of that manage.py stuff is implemented with Flask script, another really great extension.

00:45:18.000 --> 00:45:23.760
But after you scaffold your application, it really comes to resemble Flask.

00:45:23.760 --> 00:45:40.300
The basic pattern uses the Flask create app idiom where somewhere in your project code, instead of just directly instantiating all of the Flask objects, you wrap that in a function called create app.

00:45:40.300 --> 00:45:43.700
And that really simplifies testing and it does all these things.

00:45:43.700 --> 00:45:45.860
And that's kind of the Flask way to do it.

00:45:45.860 --> 00:45:51.080
And all the extensions have an init app style of object creation.

00:45:51.700 --> 00:45:57.920
So Flask admin, it has a slightly opinionated way of setting it up.

00:45:57.920 --> 00:46:04.360
So once you have your application scaffold, it follows all the Flask conventions.

00:46:04.360 --> 00:46:07.580
You'll find a create app is inside your init file.

00:46:07.580 --> 00:46:13.640
And you'll find that each extension is created using the typical Flask init app idiom.

00:46:13.640 --> 00:46:19.640
I would expect that everything else should just look pretty much like another Flask scaffold.

00:46:19.640 --> 00:46:20.700
Okay.

00:46:20.800 --> 00:46:21.680
You might find online.

00:46:21.680 --> 00:46:22.160
Yeah, cool.

00:46:22.160 --> 00:46:26.700
So maybe not like a new Flask app, but like more, a more mature one you've dropped into or something.

00:46:26.700 --> 00:46:27.580
Yeah.

00:46:27.580 --> 00:46:28.280
Okay.

00:46:28.280 --> 00:46:33.940
You talked about the Django tutorials and documentation and they are really important.

00:46:33.940 --> 00:46:34.880
They make a big difference.

00:46:34.880 --> 00:46:41.500
Actually, when the Django tutorial switched from just by default recommending Python 3 over Python 2,

00:46:41.560 --> 00:46:47.360
that made a significantly measurable difference in Python 3 usage on PyPI.

00:46:47.360 --> 00:46:48.340
Yeah.

00:46:48.340 --> 00:46:53.640
So, you know, that I think speaks pretty strongly how powerful the Django documentation is.

00:46:53.640 --> 00:46:55.880
But yours is really nice as well.

00:46:55.980 --> 00:46:59.680
And you have a tutorial called Planet Tutorial, which I thought was cool.

00:46:59.680 --> 00:47:06.300
And it has a video as well as like a screencast video as well as just the steps, which I really like that.

00:47:06.300 --> 00:47:07.060
Yeah, thanks.

00:47:07.400 --> 00:47:11.500
Like I say, I'm really inspired by Django and what they have done.

00:47:11.500 --> 00:47:20.240
And one of the things that I've put a lot of time into over the years, because this is several years in the making,

00:47:20.240 --> 00:47:27.740
is creating some kind of a compelling story or a tutorial that kind of made sense at some level.

00:47:27.840 --> 00:47:31.380
And so I used to use an example about chess.

00:47:31.380 --> 00:47:34.760
And, you know, there's a board and there's pieces and there's players.

00:47:34.760 --> 00:47:40.820
And for some reason it didn't, I don't know, I guess I didn't care at a certain point.

00:47:40.820 --> 00:47:42.980
Like it wasn't interesting implementing chess.

00:47:42.980 --> 00:47:50.560
And I had a breakthrough a couple of months ago when I realized that whatever tutorial I write about,

00:47:50.560 --> 00:47:54.060
it really needs to ship with working code.

00:47:54.060 --> 00:47:56.800
The two need to play off of each other.

00:47:57.020 --> 00:48:00.080
So over the course of a couple of weeks, these ideas kind of came together.

00:48:00.080 --> 00:48:04.360
And the planets tutorial actually ships as another code scaffold.

00:48:04.360 --> 00:48:07.020
There's only two that ship with Flask Diamond.

00:48:07.020 --> 00:48:10.120
The one will create an application for you.

00:48:10.120 --> 00:48:12.600
And the other will set up this planets tutorial.

00:48:12.600 --> 00:48:18.520
And so it's working code that comes in the package and it maps on to the documentation.

00:48:18.520 --> 00:48:21.420
So the idea is it should be a consistent story.

00:48:21.420 --> 00:48:25.780
Part of why that's important is to make it possible.

00:48:26.200 --> 00:48:32.940
So let's assume that you're doing some team collaboration, some development that involves a couple of people.

00:48:32.940 --> 00:48:37.960
And let's assume that they know Python and maybe even they know Flask already.

00:48:37.960 --> 00:48:47.340
The idea is you should be able to point them at something and make it pretty easy for people to become initiated or get up to speed such that they can collaborate.

00:48:47.840 --> 00:48:53.780
So the planets tutorial is really just there's planets and there's moons or there's satellites.

00:48:53.780 --> 00:49:01.940
And it walks through creating Earth and Mars and Venus and just adding a couple of moons around those planets.

00:49:01.940 --> 00:49:04.560
And at that level, it's actually pretty pedestrian.

00:49:04.560 --> 00:49:06.380
There's some simple models.

00:49:06.580 --> 00:49:10.540
But I just kind of liked the story a little bit more than, I don't know.

00:49:10.540 --> 00:49:12.120
It sounds intriguing.

00:49:12.120 --> 00:49:14.040
Like I want to go through a planets tutorial.

00:49:14.040 --> 00:49:15.800
Yeah.

00:49:15.800 --> 00:49:17.600
Well, hey, it's an 11 minute video.

00:49:17.600 --> 00:49:18.940
So nice.

00:49:20.140 --> 00:49:22.280
How about how are you using this?

00:49:22.280 --> 00:49:25.380
You said you're using this in a few interesting ways in production today, right?

00:49:25.380 --> 00:49:25.820
Yeah.

00:49:25.820 --> 00:49:27.880
So I am actually using it in production.

00:49:27.880 --> 00:49:38.780
And I gave a few examples of some research projects where I wanted advisors or peers to have access to this stuff.

00:49:38.780 --> 00:49:47.120
But I've done a couple of other projects more recently that are actually live and out there and even potentially getting some decent traffic.

00:49:47.120 --> 00:49:50.340
So peopleapi.com.

00:49:50.340 --> 00:49:55.820
So that's P-P-L-A-P-I dot com is something I've been working on for a couple of years.

00:49:55.820 --> 00:49:58.240
It's part of my dissertation work.

00:49:58.240 --> 00:50:01.300
It's a virtual database of the human population.

00:50:01.300 --> 00:50:07.620
So for everyone who is alive, approximately in 2014, that was about 7.2 billion people.

00:50:07.620 --> 00:50:11.320
There's an entry in this database for everybody.

00:50:11.320 --> 00:50:18.880
Now, to be clear, it's synthetic data that's not actually scraped from Facebook or something like that.

00:50:18.880 --> 00:50:27.640
I have a bunch of algorithms based on demographics that make guesses about where everybody is and how old they are and all that stuff.

00:50:27.640 --> 00:50:30.580
And, you know, and the guesses are pretty good.

00:50:30.580 --> 00:50:33.560
But the idea is that they're not real people just yet.

00:50:33.560 --> 00:50:34.600
But it's billions.

00:50:34.600 --> 00:50:36.400
I mean, it's a really big database.

00:50:36.400 --> 00:50:37.560
That is a big database.

00:50:37.880 --> 00:50:40.460
Yeah, something like seven terabytes.

00:50:40.460 --> 00:50:46.460
And I was really happy that this got featured on Hacker News and Product Hunt last week.

00:50:46.460 --> 00:50:50.080
And the website did not fall over.

00:50:50.080 --> 00:50:54.100
I was sustaining 150 simultaneous connections.

00:50:54.780 --> 00:51:01.100
And it held up on a virtual machine in the Digital Ocean cloud.

00:51:01.100 --> 00:51:11.560
So that was actually a pretty cool validation of the ability of one of these applications to sustain moderate traffic.

00:51:11.940 --> 00:51:26.380
And it's also a demonstration of the ability to manage a pretty sizable database using SQLAlchemy and exposing that over the web and coping with some kind of scale, coping with, like I say, a little, like a moderate amount of traffic.

00:51:26.380 --> 00:51:28.100
So I'm pretty happy about that.

00:51:28.100 --> 00:51:29.820
PPL API dot com.

00:51:29.820 --> 00:51:38.040
But another thing that I'm doing that kind of relates to me as an open source developer is that I've been looking at GitHub.

00:51:38.040 --> 00:51:42.460
And they have a ton of data available through their API.

00:51:42.460 --> 00:51:47.560
And there are actually a bunch of academics out there who are scraping GitHub.

00:51:47.560 --> 00:51:51.060
There's a lot of interesting research you can do with that data.

00:51:51.060 --> 00:51:54.980
So I have created an analysis called GH Impact.

00:51:55.340 --> 00:52:01.200
This relates to the number of projects that have a certain number of stars or more.

00:52:01.200 --> 00:52:07.420
So if you have 10 projects with at least 10 stars, then you have a GH Impact score of 10.

00:52:07.420 --> 00:52:13.680
And if you have 100 projects, each with 100 stars or more, then you have a score of 100.

00:52:13.680 --> 00:52:23.220
And only companies like Google and Microsoft and Mozilla are able to get these scores that are really high, to have 100 projects.

00:52:23.220 --> 00:52:26.600
And every single one of those projects is well liked on GitHub.

00:52:26.600 --> 00:52:33.580
And typically, even prolific developers have fewer projects and they get fewer stars.

00:52:33.580 --> 00:52:39.640
Or if they have one popular project, then they probably don't have a second popular project.

00:52:39.640 --> 00:52:48.200
So this is kind of a social analysis of the impact that people are able to achieve through a platform like GitHub.

00:52:48.680 --> 00:52:51.260
Once again, this is live on the Internet.

00:52:51.260 --> 00:52:55.340
And once again, I did all the data modeling with Flask Diamond.

00:52:55.340 --> 00:53:09.100
And in this case, one of the ways that that was really useful was the ability to extract small amounts of data from this, you know, this like 150 gigabyte database through a REST API.

00:53:09.100 --> 00:53:18.040
And so that enabled me to use a statistical package called R to not have to load the whole 150 gigabyte database.

00:53:18.040 --> 00:53:24.040
I was able to use a little tiny bit of data through the REST interface that I built.

00:53:24.040 --> 00:53:28.120
In that manner, I was able to fit my analysis in RAM.

00:53:28.120 --> 00:53:34.440
Because R is just not powerful enough to deal with an enormous database of many gigabytes.

00:53:34.440 --> 00:53:50.300
And so for certain analyses, a tool like Flask Diamond fills a really crucial data translation role of adapting huge data down to relatively underpowered statistical workstations.

00:53:50.300 --> 00:53:51.120
Yeah, that's cool.

00:53:51.120 --> 00:53:58.980
So is it kind of like, did you kind of like sample or poll the GitHub population and then compare name you put in there against that?

00:53:59.040 --> 00:54:01.820
No, I got all of it with like certain caveats.

00:54:01.820 --> 00:54:07.580
I scraped as much as these other researchers over in the Netherlands have scraped.

00:54:07.580 --> 00:54:09.960
Their project is called GH Torrent.

00:54:09.960 --> 00:54:12.000
The torrent thing is, I think, irrelevant.

00:54:12.000 --> 00:54:15.200
Now I'm pretty sure it's just a distributed scraping project.

00:54:15.200 --> 00:54:20.440
As much as they were able to scrape, which is, I think, you know, certainly more than 90% of GitHub.

00:54:20.440 --> 00:54:22.760
Yeah, that should be statistically relevant.

00:54:22.760 --> 00:54:23.100
Yeah.

00:54:23.100 --> 00:54:24.020
Yeah, yeah.

00:54:24.020 --> 00:54:24.960
I got all of it.

00:54:24.960 --> 00:54:26.520
So, no, I didn't sample any of it.

00:54:26.680 --> 00:54:36.640
I just extracted specific columns and subsetted the data so that I was able to fit only what I cared about into RAM and ignore the rest.

00:54:36.640 --> 00:54:37.080
Nice.

00:54:37.080 --> 00:54:40.340
So I had to type my name into it because it's the only one I knew off the top of my head.

00:54:40.340 --> 00:54:43.860
I have a GitHub impact score of eight and a 99 percentile.

00:54:43.860 --> 00:54:44.640
Yeah, yeah.

00:54:44.640 --> 00:54:45.140
That's cool.

00:54:45.140 --> 00:54:47.180
It ceilings out pretty rapidly.

00:54:47.180 --> 00:54:54.940
And, you know, so, you know, your score might be a little bit higher than that because, like I say, maybe they haven't scraped the whole thing just yet.

00:54:55.060 --> 00:55:00.720
But, yeah, what that means is you have at least eight projects with each eight stars or more.

00:55:00.720 --> 00:55:04.460
In all likelihood, some of those projects have way more than eight stars.

00:55:04.460 --> 00:55:10.160
But the way that it draws the line is I guess they're not nine projects each with at least nine stars.

00:55:10.160 --> 00:55:12.080
Yeah, that sounds right to me, actually.

00:55:12.080 --> 00:55:12.840
It's pretty cool.

00:55:12.840 --> 00:55:13.600
It's a cool measurement.

00:55:13.600 --> 00:55:15.080
Yeah, thanks.

00:55:15.080 --> 00:55:15.580
Yeah.

00:55:15.580 --> 00:55:16.680
They like it in academia.

00:55:16.680 --> 00:55:17.520
So, anyway.

00:55:17.520 --> 00:55:18.240
Yeah, very nice.

00:55:18.600 --> 00:55:22.760
So, the last one that you want to talk about in production is GThink.

00:55:22.760 --> 00:55:23.940
This one's a weird one.

00:55:23.940 --> 00:55:24.580
Without the I.

00:55:24.580 --> 00:55:27.100
G-T-H-N-K dot com.

00:55:27.100 --> 00:55:27.600
Yeah.

00:55:27.600 --> 00:55:29.200
So, I do pronounce it GThink.

00:55:29.200 --> 00:55:30.400
So, you got that right.

00:55:30.400 --> 00:55:33.240
It's not actually hosted remotely.

00:55:33.240 --> 00:55:36.520
This is one that you download and then you run it locally.

00:55:37.260 --> 00:55:42.580
And on OS X, GThink installs as a launch service.

00:55:42.580 --> 00:55:45.680
So, it's just kind of always running in the background.

00:55:45.680 --> 00:55:50.160
And it's a note-taking application of sorts.

00:55:50.160 --> 00:55:51.980
It's not in the cloud.

00:55:51.980 --> 00:55:56.900
You know, it's not hosted remotely, which is, I believe, a security feature.

00:55:56.900 --> 00:56:03.780
Like, I really don't trust a hosted cloud service to store my personal notes.

00:56:03.780 --> 00:56:06.780
I would much rather just have a program running on my own computer.

00:56:07.440 --> 00:56:08.520
That's what GThink is.

00:56:08.520 --> 00:56:12.440
It's like a self-hosted Evernote or something along those lines.

00:56:12.440 --> 00:56:13.400
Okay, cool.

00:56:13.400 --> 00:56:17.120
It demonstrates that Flash Diamond can be packaged in a couple of different ways.

00:56:17.120 --> 00:56:18.500
Not only hosted online.

00:56:18.500 --> 00:56:20.900
That is really cool to have it as a desktop app.

00:56:20.900 --> 00:56:21.780
Okay, nice.

00:56:21.780 --> 00:56:23.180
That's quite an interesting twist.

00:56:23.180 --> 00:56:28.240
So, tell me the story of Python 2 versus Python 3 with your project.

00:56:28.240 --> 00:56:28.700
Yeah.

00:56:28.700 --> 00:56:31.480
This was a bit of a struggle, actually.

00:56:31.480 --> 00:56:36.080
Because the ecosystem was a real barrier.

00:56:36.580 --> 00:56:44.060
Insofar as all the packages that Flash Diamond relies upon, they all need to have made the switch to Python 3.

00:56:44.060 --> 00:56:45.480
And by now they have.

00:56:45.480 --> 00:56:51.180
But also, you know, there was a little bit of stuff inside Flash Diamond itself that needed to be updated.

00:56:51.740 --> 00:56:54.340
I eventually made the leap within the last year.

00:56:54.340 --> 00:57:03.420
But I think I found that Travis, actually, in automated testing, is a real asset with Python 2 and Python 3 compatibility.

00:57:04.160 --> 00:57:11.220
So, the ability to automatically run the test suite with different Python interpreters has saved me a lot of headaches.

00:57:11.220 --> 00:57:16.160
Because I'm catching a lot of bugs that, well, less now the transition has been made.

00:57:16.360 --> 00:57:19.860
But it caught an awful lot of bugs moving from 2 to 3.

00:57:19.860 --> 00:57:25.680
But I find now that I make all my new projects using Python 3.

00:57:25.840 --> 00:57:30.760
And personally, I'm really enjoying what's happened with Python 3.

00:57:30.760 --> 00:57:36.280
And I do kind of, I check in on the arguments whenever it comes up.

00:57:36.280 --> 00:57:38.480
You know, why isn't Python 3 whatever?

00:57:38.480 --> 00:57:41.980
I like to sort of torture myself reading that stuff online.

00:57:42.220 --> 00:57:46.260
Because I was held back for quite a while on Python 2.7.

00:57:46.260 --> 00:57:49.920
Now that I have made the switch, there's no going back.

00:57:49.920 --> 00:57:50.440
Yeah.

00:57:50.440 --> 00:57:51.180
I really do like that.

00:57:51.180 --> 00:57:51.880
Yeah, I'm with you.

00:57:51.880 --> 00:57:53.140
There's a whole bunch of cool stuff.

00:57:53.140 --> 00:57:55.580
Especially around concurrency and async stuff.

00:57:55.580 --> 00:57:57.820
And just a lot of polish on the language.

00:57:57.820 --> 00:57:58.140
Yeah.

00:57:58.140 --> 00:58:00.180
Strings and bytes and Unicode.

00:58:00.180 --> 00:58:01.380
It's so much better.

00:58:01.380 --> 00:58:05.580
I feel like we, as a community, have sort of turned the corner.

00:58:05.580 --> 00:58:11.940
A year ago, a few years, it wasn't entirely clear that Python 3 was like,

00:58:11.940 --> 00:58:12.820
of course you should be doing it.

00:58:12.820 --> 00:58:14.440
People were still like, no, I don't know about this.

00:58:14.440 --> 00:58:19.720
I feel like most people, even though maybe they have a project that's not quite converted

00:58:19.720 --> 00:58:24.480
or they don't foresee themselves able to move whatever project to Python 3,

00:58:24.480 --> 00:58:29.220
like the recognition that it is the way to go, I think is definitely growing.

00:58:29.220 --> 00:58:30.860
So I think it's a pretty positive move.

00:58:30.860 --> 00:58:31.180
Yeah.

00:58:31.180 --> 00:58:33.420
I think finally the critical mass is there.

00:58:33.420 --> 00:58:33.740
Yeah.

00:58:33.740 --> 00:58:36.360
And it's the way forward, clearly.

00:58:36.360 --> 00:58:37.040
Absolutely.

00:58:37.040 --> 00:58:37.440
Absolutely.

00:58:37.440 --> 00:58:38.000
All right.

00:58:38.000 --> 00:58:39.800
Well, your project looks really cool.

00:58:39.920 --> 00:58:44.660
I feel like, you know, we've got Flask at one end with the micro frameworks.

00:58:44.660 --> 00:58:45.960
We've got Django at the other end.

00:58:45.960 --> 00:58:48.120
It's more sort of full-featured building blocks.

00:58:48.120 --> 00:58:56.820
I talked with Julia Ellman and Mark Levin on episode 88 about a lightweight Django and bringing,

00:58:56.820 --> 00:59:00.440
you know, sort of unrolling some of the stuff out of Django to make more lightweight,

00:59:00.440 --> 00:59:01.860
to bend it however you want.

00:59:02.220 --> 00:59:06.080
And this is kind of taking some of the niceties of Django, put it in a flask, and you're kind

00:59:06.080 --> 00:59:07.460
of like filling out the spectrum.

00:59:07.460 --> 00:59:08.980
I hope so.

00:59:08.980 --> 00:59:09.280
Yeah.

00:59:09.280 --> 00:59:11.520
So it sounds, I think it's a cool contribution.

00:59:11.520 --> 00:59:11.840
Yeah.

00:59:11.840 --> 00:59:12.100
Thanks.

00:59:12.100 --> 00:59:12.460
Yeah.

00:59:12.460 --> 00:59:15.640
So let's see, before we go, let me ask you the two final questions.

00:59:15.640 --> 00:59:18.040
If you're going to write some Python code, what editor do you use?

00:59:18.040 --> 00:59:20.580
It's Sublime Text 3 these days.

00:59:20.960 --> 00:59:22.940
It's Python all the way down.

00:59:22.940 --> 00:59:25.160
I love Emacs.

00:59:25.160 --> 00:59:26.520
I love the Emacs philosophy.

00:59:26.520 --> 00:59:28.140
And I love Lisp.

00:59:28.140 --> 00:59:37.340
But the idea of redoing Emacs with Python as its heart and its brain is too cool.

00:59:37.340 --> 00:59:39.420
So it's Sublime Text.

00:59:39.420 --> 00:59:39.820
Yeah.

00:59:39.820 --> 00:59:40.940
That's pretty cool.

00:59:40.940 --> 00:59:45.060
Have you seen the Anaconda plugin for it?

00:59:45.060 --> 00:59:46.100
I have not.

00:59:46.100 --> 00:59:48.060
It's not the same as the Anaconda distribution.

00:59:48.060 --> 00:59:49.300
I think these things are unrelated.

00:59:49.480 --> 00:59:54.800
But it's like an extension for Sublime that brings all sorts of Python features, apparently.

00:59:54.800 --> 00:59:56.360
I just ran across it recently.

00:59:56.360 --> 00:59:57.540
But I haven't really explored it.

00:59:57.540 --> 00:59:58.280
Yeah.

00:59:58.280 --> 01:00:02.420
I would have just discounted it as just packaging of the other Anaconda.

01:00:02.420 --> 01:00:03.700
Well, that's awesome, actually.

01:00:03.700 --> 01:00:04.960
I'm going to check it out.

01:00:04.960 --> 01:00:05.640
Yeah.

01:00:05.640 --> 01:00:09.100
I'm quite sure that it's a different sort of thing.

01:00:09.100 --> 01:00:09.400
Cool.

01:00:09.400 --> 01:00:09.420
Yeah.

01:00:09.420 --> 01:00:09.520
Cool.

01:00:09.520 --> 01:00:11.200
So I'll put a link.

01:00:11.200 --> 01:00:11.440
Yeah.

01:00:11.440 --> 01:00:17.840
So here it says, I open it up and it says, Anaconda, the Sublime Text 3 Python IDE.

01:00:18.720 --> 01:00:20.420
And it gives you all sorts of functionality.

01:00:20.420 --> 01:00:20.720
Yeah.

01:00:20.720 --> 01:00:23.920
So it's not the same thing as the Anaconda.

01:00:23.920 --> 01:00:24.840
It's a different thing.

01:00:24.840 --> 01:00:25.360
Check it out.

01:00:25.360 --> 01:00:26.180
I'm giving that a look.

01:00:26.180 --> 01:00:26.420
Yeah.

01:00:26.420 --> 01:00:27.540
Awesome.

01:00:27.540 --> 01:00:27.820
Okay.

01:00:27.820 --> 01:00:31.000
And then there's over 96,000 PyPI packages.

01:00:31.000 --> 01:00:32.600
I can't wait till it gets to 100,000.

01:00:32.600 --> 01:00:33.860
There's got to be some kind of celebration.

01:00:34.940 --> 01:00:40.300
But why don't you tell people about some that you think are cool they should know about.

01:00:40.300 --> 01:00:40.660
Check out.

01:00:40.660 --> 01:00:41.040
All right.

01:00:41.040 --> 01:00:46.220
So I've already said so many good things about Flask and Sequel Alchemy.

01:00:46.220 --> 01:00:50.960
Together, they have changed my life, I think, probably for the better.

01:00:51.500 --> 01:00:54.080
So everybody needs to go look at those two.

01:00:54.080 --> 01:00:59.020
But I also just want to, there's a special place in my heart for Beautiful Soup.

01:00:59.020 --> 01:01:02.140
It's a throwback to an earlier time.

01:01:02.640 --> 01:01:11.800
But when Beautiful Soup came along and made it easy for me to parse even really broken and terrible HTML,

01:01:11.800 --> 01:01:16.700
and actually I was able to start doing useful stuff with web scraping,

01:01:16.700 --> 01:01:22.540
and I began sort of collecting some data that I was unable to access before.

01:01:22.540 --> 01:01:29.700
I think there's a way that Beautiful Soup might have improved my life more than anything else in PyPI.

01:01:29.700 --> 01:01:31.360
That's really cool.

01:01:31.680 --> 01:01:33.540
It's a special place in my heart for that one.

01:01:33.540 --> 01:01:34.360
Yeah.

01:01:34.360 --> 01:01:35.460
You talked about the alchemy.

01:01:35.460 --> 01:01:37.460
The alchemy nature of Sequel Alchemy.

01:01:37.460 --> 01:01:39.740
Beautiful Soup is kind of magical as well.

01:01:39.740 --> 01:01:40.620
Yeah.

01:01:40.620 --> 01:01:44.360
Everything becomes an API even if it's not supposed to be.

01:01:44.360 --> 01:01:45.220
Right.

01:01:45.220 --> 01:01:47.320
Awesome.

01:01:47.320 --> 01:01:48.740
And it's surprisingly easy to use.

01:01:48.740 --> 01:01:50.680
So if you guys need to do web scraping, check it out.

01:01:50.680 --> 01:01:51.440
It's definitely cool.

01:01:51.440 --> 01:01:52.540
I can recommend it as well.

01:01:52.540 --> 01:01:53.800
All right.

01:01:53.800 --> 01:01:55.620
How about a final call to action?

01:01:55.620 --> 01:01:58.300
You looking for contributors to this project, people to try it out?

01:01:58.300 --> 01:01:59.020
Yeah.

01:01:59.380 --> 01:02:04.460
Definitely check out the website flask-diamond.org.

01:02:04.460 --> 01:02:06.620
That'll link you through to GitHub.

01:02:06.620 --> 01:02:12.920
I'm looking for people to battle test this on Windows because that's harder for me to do.

01:02:12.920 --> 01:02:14.820
And ideally give me feedback.

01:02:15.240 --> 01:02:26.240
Or even better would actually be some edits to the documentation because I want to break down the barriers to get some new users initiated into this flask ecosystem.

01:02:26.240 --> 01:02:26.800
Yeah.

01:02:26.800 --> 01:02:27.440
That sounds great.

01:02:27.520 --> 01:02:30.560
You know, people are always asking me like how they can contribute to open source.

01:02:30.560 --> 01:02:35.880
Like something that just came to mind is maybe they could come write a tutorial and you could have like a whole bunch of tutorials.

01:02:35.880 --> 01:02:36.120
Right.

01:02:36.120 --> 01:02:38.660
That'd be a fun way to like a fun and easy way to get started.

01:02:38.660 --> 01:02:38.900
Right.

01:02:38.900 --> 01:02:39.900
I would love that.

01:02:39.900 --> 01:02:41.840
And, you know, make a screencast video.

01:02:41.840 --> 01:02:45.180
And man, you're you're you'll be my friend for life.

01:02:46.140 --> 01:02:46.760
That's awesome.

01:02:46.760 --> 01:02:47.440
All right.

01:02:47.440 --> 01:02:48.480
Well, this is a really cool project.

01:02:48.480 --> 01:02:53.920
And I think it's, you know, fills an interesting space in the spectrum of the web and Python.

01:02:53.920 --> 01:02:54.960
So thanks for building it.

01:02:54.960 --> 01:02:56.360
And thanks for taking the time to share the story.

01:02:56.360 --> 01:02:56.680
Thanks.

01:02:56.680 --> 01:02:57.700
It was really my pleasure.

01:02:57.700 --> 01:02:58.340
You bet.

01:02:58.340 --> 01:02:58.580
Bye.

01:02:59.920 --> 01:03:02.880
This episode's guest has been Ian Dennis Miller.

01:03:02.880 --> 01:03:06.240
And the episode has been sponsored by Rollbar and Hired.

01:03:06.240 --> 01:03:08.400
Thank you both for supporting the show.

01:03:08.400 --> 01:03:11.380
Rollbar takes the pain out of errors.

01:03:11.380 --> 01:03:19.080
They give you the context and insight you need to quickly locate and fix errors that might have gone unnoticed until your users complain, of course.

01:03:19.080 --> 01:03:26.240
As Talk Python To Me listeners, track a ridiculous number of errors for free at rollbar.com slash Talk Python To Me.

01:03:26.240 --> 01:03:29.140
Hired wants to help you find your next big thing.

01:03:29.420 --> 01:03:37.600
Visit Hired.com slash Talk Python To Me to get five or more offers with salary and equity presented right up front and a special listener signing bonus of $2,000.

01:03:37.600 --> 01:03:40.540
Are you or a colleague trying to learn Python?

01:03:40.540 --> 01:03:45.200
Have you tried books and videos that just left you bored by covering topics point by point?

01:03:45.200 --> 01:03:53.780
Well, check out my online course, Python Jumpstart by Building 10 Apps at talkpython.fm/course to experience a more engaging way to learn Python.

01:03:54.240 --> 01:04:01.180
And if you're looking for something a little more advanced, try my WritePythonic code course at talkpython.fm/Pythonic.

01:04:01.860 --> 01:04:03.640
Be sure to subscribe to the show.

01:04:03.640 --> 01:04:05.840
Open your favorite podcatcher and search for Python.

01:04:05.840 --> 01:04:07.080
We should be right at the top.

01:04:07.080 --> 01:04:16.400
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct RSS feed at /rss on talkpython.fm.

01:04:16.800 --> 01:04:21.480
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

01:04:21.480 --> 01:04:28.160
Corey just recently started selling his tracks on iTunes, so I recommend you check it out at talkpython.fm/music.

01:04:28.160 --> 01:04:33.520
You can browse his tracks he has for sale on iTunes and listen to the full-length version of the theme song.

01:04:34.340 --> 01:04:35.620
This is your host, Michael Kennedy.

01:04:35.620 --> 01:04:36.900
Thanks so much for listening.

01:04:36.900 --> 01:04:38.100
I really appreciate it.

01:04:38.100 --> 01:04:40.220
Smix, let's get out of here.

01:04:40.220 --> 01:04:40.220
Smix, let's get out of here.

01:04:40.220 --> 01:05:01.780
Outro Music.

01:05:01.780 --> 01:05:02.160
Bye.

01:05:02.160 --> 01:05:02.420
.

