00:00:00 When you think of government software development and projects, do fast apps and modern tech stacks

00:00:04 jump to mind? Probably not. So you'll be delighted to hear from our guest, Laura Buford. She's the

00:00:09 tech lead at the U.S. Federal Election Commission. She and her team have built a very modern tech

00:00:14 stack running modern Flask web apps with APIs powered by SQLAlchemy and Flask RESTful.

00:00:19 This app and its API are available as open source on GitHub, and they deploy it with continuous

00:00:25 delivery right out to cloud.gov. There are lots of lessons to learn for governmental agencies around

00:00:30 the world, as well as private organizations, small and large. This is Talk Python To Me, episode 317,

00:00:37 recorded May 19th, 2021.

00:00:52 Welcome to Talk Python To Me, a weekly podcast on Python, the language, the libraries, the

00:00:57 ecosystem, and the personalities. This is your host, Michael Kennedy. Follow me on Twitter where I'm

00:01:02 at mkennedy and keep up with the show and listen to past episodes at talkpython.fm and follow the

00:01:07 show on Twitter via at Talk Python. This episode is brought to you by Square and us over at Talk

00:01:13 Python Training. Please check out what we're offering during our segments. It really helps

00:01:17 support the show. Laura, welcome to Talk Python To Me.

00:01:20 Thank you very much, Michael. Happy to be here.

00:01:21 Yeah, I'm so happy to have you here as well. You're doing a whole bunch of interesting things

00:01:26 around open source and the U.S. government. And I find government to be so interesting because

00:01:32 there's a lot of data, there's a lot of technology, there's many users, right? We've got 300 million

00:01:39 users in the U.S. or so, in some sense. And yet, a lot of times, the technology there feels so

00:01:44 old and ancient. And yet, what you're building and some of the change that you're leading is

00:01:50 very modern, right? You could put this up beside a lot of the startups in Silicon Valley and it would

00:01:55 look amazing still. So, well done.

00:01:58 Well, thank you so much for your kind words.

00:01:59 Yeah, absolutely. Now, before we dive into all the cool Python things, let's just start with your

00:02:05 story. How'd you get into programming in Python?

00:02:06 I have always been interested in computers. I loved to tinker with the computers at home,

00:02:14 but I couldn't say that I had a natural aptitude for software development. I took classes in high

00:02:20 school and college. I thought I wanted to be a computer science major and really struggled with

00:02:25 writing software. It was a very exciting time politically at the time, so I decided I wanted

00:02:30 to be a political science and history major. And my mom really encouraged me to finish my minor,

00:02:34 which was great advice, mom. Thank you. I finished my computer science minor.

00:02:38 And when I first graduated, I really wanted to get involved in campaigns. It was 2007, 2008. And I found

00:02:46 a, I'm from DC. I came back to DC. I found a local political software company that was hiring.

00:02:52 And I had originally interviewed for an administrative assistant position and the founder recommended I work

00:02:59 in tech support. I was really surprised because I felt like I didn't know what I was doing,

00:03:03 but it was a really great organization. It taught me everything I need to know and really loved.

00:03:08 That's cool. Did you have one of those experiences where you're like, oh, there's no way I can help out with this

00:03:12 tech support stuff. And then you can get there and you're like, I'm actually able to help quite a bit.

00:03:15 Yeah. You learn some skills. So we had one major system that we supported and then a couple other smaller

00:03:20 software. And I never really learned how to use myself. So you learn some tricks like,

00:03:26 so walk me through the exact steps you've taken so far, you know, and then you sort of follow along

00:03:31 with them and you're like, have you tried clicking this? This looks promising. Let's try clicking on

00:03:35 this and see what happens. So how funny. Yeah. Tech support was a great first job out of college. I

00:03:40 learned a lot, helped me with my creative problem solving skills. And I really learned the software

00:03:44 well to the point where after a few years of tech support, I would send the developers the line of code

00:03:50 where the bug occurred and say, you know, here's the bug that the user reported. So they asked me to

00:03:56 come work on the development side. And I did that for a little while. And then I was still struggling

00:04:01 with my confidence. It wasn't really a great fit. And I couldn't quite figure out why I didn't have a lot

00:04:07 of support. This is before a lot of the meetup culture. This was 2012. There are a lot. Now I found

00:04:14 there are a lot of communities for helping people get into tech. But DC. Yeah, the communities have really

00:04:19 grown a lot in the last five years or so. It's a lot, a lot nicer in that. Absolutely. Yeah. And DC

00:04:24 wasn't really a tech hub. It wasn't really known for being much of a tech hub. So I had a lot of self

00:04:31 doubt. And I wasn't sure that being a developer was right for me. So but I while I was working at this

00:04:37 company, it was a company that helped campaigns file their campaign finance disclosures, the FEC. So

00:04:42 political campaigns in the in the US need to disclose money that they've raised and spent towards

00:04:48 their election. This is if they privately done it or through the government support or something

00:04:53 like that, right? You have options. FEC provides free filing software. And it's everything you might

00:04:59 imagine free government software might look like and we're working on that. But there are also third

00:05:05 party companies like a like equivalent of like a turbo tax for filing campaign finance disclosures.

00:05:10 And so that's what that company did. And I just fell in love with all the rules and the campaign

00:05:15 finance. It's sort of like super nerdy, like anyone who gets excited about filing their taxes and all the

00:05:20 different scenarios. It's very similar amount of rules for who can give how much under what circumstances.

00:05:27 There are situations where individuals can gift goods and services to campaigns, but there are

00:05:32 restrictions on those types of gifts. So I really just enjoyed that world campaign finance. Yeah.

00:05:38 Even though I had been a political science major in college, I actually hadn't learned that much about

00:05:43 the FEC and campaign finance laws and regulations. And it was kind of before campaign finance was a

00:05:49 hotbed issue. It can sometimes be a hotbed issue now, but this was not something we covered a lot in

00:05:56 class. It's not something that was getting covered a lot in the media. So it was through work that I

00:06:00 learned about FEC disclosure rules and campaign fundraising, whereas before I had really learned more about

00:06:05 voting. So the fundraising is what allows the running of the campaign to take place.

00:06:10 Yeah. So much, at least in the U S is about running ads and hiring people to go out and knock on doors

00:06:16 and all sorts of stuff like that. Right. So even though really you'd hope it's kind of some sort of

00:06:20 meritocracy and you debate and then you choose the ideas, there's monies involved.

00:06:24 Yes. It has become a hot, hot bed topic in a lot of ways, but I think at the time I was learning about it,

00:06:30 it was the money was often thought to be an indicator of support. So if you could raise a lot

00:06:34 of money from a lot of different people, it was an indicator that you had widespread support and that

00:06:39 those folks were, even if they were just giving you $20 towards the campaign, they would help you

00:06:43 support, like have office space. And like you said, print ads.

00:06:46 Right. It's some sort of, if you're going to give money, you're likely you would vote for them,

00:06:50 right? Giving money is a bigger signal than actually voting. So it's an early signal, I guess.

00:06:55 Absolutely. So I wasn't sure being a software developer was right for me. So I went to go

00:07:00 work for the FEC in a less technical role where I worked to help the FEC with more of the enforcement

00:07:07 side of things, making sure that the campaign finance reports were filled out properly, that if

00:07:12 people had questions about how to comply with the law, if there's any disparities or anything that was

00:07:16 unclear on the reports, I would help clear, like send correspondence on the public record, asking the

00:07:23 regulated community that, you know, the campaigns and the PACs and parties to, you know, further

00:07:28 clarify their reports. And there was an element of tech support in that role. I also did tech support

00:07:34 for the free filing software and anyone who's done tech support, sometimes I can get pretty,

00:07:39 like answering the same question over and over again, no matter how much you care, it can,

00:07:44 can sort of wear on you. So I was looking for a challenge.

00:07:47 I'm so happy to have your question. I'm really here to support you for the 100th time.

00:07:52 Yes. And this is the first time they're asking, you know, so you have to, you know,

00:07:56 Yeah, of course they, it's not there. They don't know.

00:07:58 Right. And there are a lot of very confusing rules. And some of the best advice I got from my

00:08:04 supervisor was you don't have to defend the agency. You know, so if someone says, this is really

00:08:08 confusing, you can say, it is confusing. Let me see if I can help you work through it instead of,

00:08:14 you know, trying to defend the regulations for, for, and so after about five years of doing that job,

00:08:21 I wanted a challenge, I wanted to change. And there was an opening on the website project team

00:08:27 for fec.gov. And my mentor at the time had recommended that I come work on this project.

00:08:34 It was a really cool project. And I can talk about why it's cool. And I said, Oh, I haven't written a

00:08:38 line of code in five years. You know, there's no way I can work there. And I met with the team and

00:08:43 they were willing to, if I was willing to work hard to get up to speed, they were willing to work with me

00:08:48 since I had a lot of knowledge about the area and past experience. So basically did a crash course

00:08:53 in Python. And with a lot more support this time around, there are all these organizations in DC for

00:08:59 underrepresented genders and tech and just new developers. And so really did a deep dive and

00:09:06 kind of was able to talk myself onto the team and, and was drinking from the fire hose and really just,

00:09:11 yeah, really had fun though. It was super fun.

00:09:14 That's cool. You know, one of the things that I hear in your story here, that sounds a little bit

00:09:19 different between the two experiences, you're going to college and getting your minor in CS versus,

00:09:24 you know, being really passionate about the politics and elections and then learning code to sort of

00:09:31 advance that mission. Those are really different in that, you know, so often in computer science,

00:09:36 it's like, well, here's some random algorithm. We're going to study the algorithm. Then you can

00:09:39 reproduce the algorithm and how boring and dry and separated from like what you're interested in.

00:09:44 is that right. Whereas this is like, well, I've got to go through this technology to use it as a,

00:09:50 like a way to really achieve the goals I'm after. And I think those are just such different experiences.

00:09:55 Would you agree?

00:09:56 Absolutely. I distinctly remember one of my projects in college was to build a calendar.

00:10:00 And I was like, I have a calendar. You have to remember like, got a paper one, I got a digital one.

00:10:07 Yeah. And so I just wasn't very passionate about some of the projects and they're good projects for

00:10:12 teaching the concepts, but not necessarily that can be difficult to find. And I think there's been

00:10:17 a reevaluation of how certain ways of writing software is taught a little more beginner friendly.

00:10:22 If you have a goal and you have something you want to build and you know why you want to work on it,

00:10:26 well then it's super exciting. But if it's just dry, I think we lose a lot of people who don't have some

00:10:32 sort of personal drive that's going to get them through that is not necessarily part of the lessons or part of the

00:10:37 official experience, you know?

00:10:39 Absolutely. And the thing I wanted to add to that is that I didn't learn at the time I was in,

00:10:44 in school, I was studying computer science and I've sort of figured out that software development and computer science

00:10:50 can be somewhat different disciplines. And I never learned how to really write software in college.

00:10:56 And what I've learned the hard way is to really start small, get the smallest piece working,

00:11:02 change the smallest part of it. And can you make that even smaller? Maybe just hard code something for now.

00:11:07 Whereas before I would write in college, I would write top to bottom, write the whole thing out,

00:11:12 and then it would just explode about a semicolon buried on line 463.

00:11:17 So those learning those skills has helped me made it a lot more fun, a lot less miserable.

00:11:22 Yeah, fantastic. So I think you've given us quite a bit of background already about the FEC,

00:11:27 FEC Federal Election Commission. But I think two things are interesting to talk about real quickly here.

00:11:33 One is this whole agency was born, I guess, just a tiny bit before I was actually, but it was born out of a financial

00:11:42 scandal in 1972, right?

00:11:45 Yes, after the Watergate scandal.

00:11:47 Yeah, I bet people have heard of that one.

00:11:48 I hope so.

00:11:49 Yeah, I would hope so too. The other thing is, you know, you look at the FEC and you said it's not a

00:11:56 huge organization of the government, but how many people work there?

00:11:58 We have about 300 full-time employees. That's federal employees. So they work for the US government.

00:12:03 And for on FEC.gov, we have a team of about, you know, we have a cross-functional team, but we have about nine developers and a user experience designer who work on the technical side of the site.

00:12:15 Yeah, cool. It's a pretty small group of developers. Probably all work pretty closely. I'm sure it's a fun place to be.

00:12:21 It really is.

00:12:21 Yeah. And before we move on too far from the opening, Kim Van Wyk, who was one of the Ask Me Anything hosts for me? Hey, Kim.

00:12:29 Says, I strongly suspect that also helps you remember a software topic six months later if you did something you found interesting while learning.

00:12:36 Absolutely.

00:12:36 Yeah, I would definitely say so.

00:12:37 Absolutely.

00:12:37 All right. So as we get into the code side of things, maybe we could talk a little bit about the type of data to give people a sense of what we're working with here.

00:12:46 So one of the things you can do is you can go to FEC.gov and you can go to all data and there's all kinds of stuff you can learn about raising money, spending money, candidates.

00:12:54 I could go over here. I could select my state, Oregon. I could go pick my location around Portland and pull that up.

00:13:02 And it'll do things like, I could go up and say, learn about the house, I guess.

00:13:06 And it'll show this person in this party raised $64,000 and had $110,000 disbursements, how much cash they have on hand right now.

00:13:18 So apparently $711,000, which is kind of insane.

00:13:22 And then you can go see the sources for this data. Tell us about the kind of data and how people use it there.

00:13:27 Yeah, that's a great, our election profile pages. I'm really proud of those.

00:13:30 We can see who's running in each election.

00:13:32 Yeah, it's beautiful. And you get like a colorful map of the areas.

00:13:35 You just click on it and it pulls it right up. It's really neat.

00:13:38 Thank you so much. And as you were demoing it live here, it was looking snappy, which just really warmed my heart.

00:13:43 It's very funny.

00:13:44 So when we think about filing our taxes with the IRS, in the U.S. at least,

00:13:48 we have to disclose how much money we made and various other, basically the money we made in our taxes.

00:13:54 It's all summary level data.

00:13:55 Campaigns need to file the, not only the summary level data, but also the transaction level data.

00:14:00 So from every contributor who's given aggregate of $200 or more in a given election,

00:14:07 they have to disclose their name and address, employer occupation, and the details of that transaction.

00:14:13 And so it's a large volume of data.

00:14:15 Especially at the presidential level or national level.

00:14:18 Yes. Yes. Presidential level, I mean, like hundreds of millions of records.

00:14:24 I think we're on track to have a total of 1 billion records by the end of the 2022 elections.

00:14:29 It's just a lot of data. So it's not just how much they've raised. It's the individual contributions that go into that.

00:14:36 So from here, if you wanted to click on the name of the candidate you're looking at for your district,

00:14:42 it'll take you to the candidate's profile page. It looks like this is a House candidate and they run every two years.

00:14:49 So there's a browse receipts button so you can actually see the individual contributions that made up.

00:14:54 And it's 2022. There hasn't been a lot of data yet for 2022 because it's early in the election cycle.

00:15:00 Oh my gosh. So I'm in here looking at this and it says, here is Diane Snow, who donated how much?

00:15:07 You know, $50. These are individual contributions and all sorts of stuff, right? This is crazy detail.

00:15:13 Yes. And we've had detailed, we, as part of our mission to make detailed contributor data and not just contributor,

00:15:18 but expenditure data, how the committees are spending their money since back to the late 70s.

00:15:25 So we do have all the historical data here to explore. You could export this to Excel spreadsheet or technically it's a CSV.

00:15:32 But at the top of the page, you could filter for like all the money that's been received for 2022.

00:15:37 So you could eliminate your, there are the breadcrumbs there with the little X's on them.

00:15:41 You could, you know, just maybe that one candidate across all time or all the money for 2022.

00:15:47 And so it is for all the data is, it is again, like about coming up on, we had around 500 million transactional transactions last in the 2020 election.

00:15:59 That equals about four terabytes of data.

00:16:01 And the expectation is it is filterable. It's searchable. It's exportable.

00:16:06 I think user expectation is that you'll be able to get the information quickly.

00:16:09 So we've spent a lot of time focusing on performance improvement for the site, which is powered by our campaign finance data API under the hood.

00:16:16 This portion of Talk Python To Me is brought to you by Square.

00:16:21 Payment acceptance can be one of the most painful parts of building a web app for a business.

00:16:26 When implementing checkout, you want it to be simple to build, secure, and slick to use.

00:16:31 Square's new web payment SDK raises the bar in the payment acceptance developer experience

00:16:37 and provides a best-in-class interface for merchants and buyers.

00:16:41 With it, you can build a customized branded payment experience and never miss a sale.

00:16:46 Deliver a highly responsive payments flow across web and mobile that integrates with credit cards and debit cards,

00:16:53 digital wallets like Apple Pay and Google, ACH bank payments, and even gift cards.

00:16:57 For more complex transactions, follow-up actions by the customer can include completing a payment authentication step,

00:17:04 filling in a credit line application form, or doing background risk checks on the buyer's device.

00:17:09 And developers don't even need to know if the payment method requires validation.

00:17:14 Square hides the complexity from the seller and guides the buyer through the necessary steps.

00:17:18 Getting started with a new web payment SDK is easy.

00:17:21 Simply include the web payment SDK JavaScript, flag an element on the page where you want the payment form to appear,

00:17:27 and then attach hooks for your custom behavior.

00:17:29 Learn more about integrating with Square's web payments SDK at talkpython.fm/square,

00:17:35 or just click the link in your podcast player's show notes.

00:17:38 That's talkpython.fm/square.

00:17:42 There's a whole bunch of APIs, and you can even check out the code on GitHub, which is super interesting.

00:17:47 This is the kind of data that people can get, and I think it's pretty good.

00:17:50 So one of the things that's interesting to me is if I'm over here on fec.gov,

00:17:56 this looks like a pretty well-designed website.

00:17:59 It looks nice.

00:18:00 You can jump around.

00:18:01 But then as you were showing me those different locations, it looks pretty data-driven.

00:18:06 There's a decent amount of logic behind it.

00:18:08 You said that this is built on Wagtail.

00:18:10 Is that right?

00:18:11 So when you go to fec.gov, it's mainly two applications.

00:18:15 The content management system we use is built with Wagtail.

00:18:19 So there are kind of three different buckets on the site.

00:18:22 There's the campaign finance data, which we were just discussing, which is mostly powered by the API.

00:18:26 We use some AJAX calls, just basically JavaScript and data tables to display the data that the API provides.

00:18:34 And this application that we're looking at is the Django-based CMS application.

00:18:39 Right.

00:18:39 And so for people who don't know, maybe just tell them really, what's the elevator pitch on Wagtail?

00:18:43 What is this thing?

00:18:44 Wagtail is a really great admin for the Django framework.

00:18:48 So Django has a built-in admin framework.

00:18:50 So just to kind of give some context, the disclosure, the help for candidates and committees section of our site

00:18:57 has information for our regulated community.

00:18:59 So if they want to find out, can I take this money from this source?

00:19:02 Or what are the limits on contributions?

00:19:03 They can go to help for candidates and committees and find the answers to their questions.

00:19:07 And so that's stored in the Django database.

00:19:10 Well, it's stored in a Postgres database that our Django application connects to.

00:19:15 And Django as a web application framework has a built-in admin.

00:19:19 So, you know, if you're working on this, if you've worked on like the Django tutorial or anything like that,

00:19:23 you can go slash admin and use the built-in Django admin to manage your content.

00:19:29 So if you wanted to modify an article or, you know, you're working on a blog or whatever, that's how you do it.

00:19:34 Wagtail is an open source tool that is, that has more user-friendly functionality on top of the existing Django admin.

00:19:41 A little closer to like WordPress-ish kind of?

00:19:44 Yeah, it's got some great features.

00:19:46 You can do custom templates.

00:19:48 I don't work as, I work more on the data sides, but we have a content team that uses Wagtail to manage the content on the site.

00:19:54 It seems like it's very customizable and just has more features than the Django admin that I'm sure you could build yourself.

00:20:02 But this is a free open source project that allows you to have a more robust admin interface.

00:20:07 Yeah, a lot of times that's a big platform decision people have to make.

00:20:11 Like, oh, well, we want to have this admin thing that people will let people go in and just developers don't have to add the informational pages

00:20:18 and just maintain the basic data of the site.

00:20:20 So I could either build something in Django and then it's kind of on me or we got to go through the admin backend in a clunky way

00:20:28 or I've got to build something or we go WordPress.

00:20:31 But now you're out of Python and you're in this other Joomla WordPress world that you're not really able to extend

00:20:37 and it just becomes almost a static site.

00:20:38 And so things like Wagtail are cool because they let you stay in your world if you're a Python developer,

00:20:44 but then also have a nicer experience on top of it for the users.

00:20:47 Yeah, Wagtail seems like it's been great for us.

00:20:50 Yeah, very cool, very cool.

00:20:51 Okay, so we've got that.

00:20:54 And then we've also got the OpenFEC API is what I'm trying to say here, which is RESTful API around all this data that we've been talking about, right?

00:21:05 Tell us about this.

00:21:05 Sure.

00:21:06 So if anyone hasn't worked with APIs before, the API is just the source for all the campaign finance data.

00:21:12 So one of my friends put it in a cute way, we drink our own champagne.

00:21:16 So any of the data you see on FEC.gov is coming from the API.

00:21:21 So you don't need to know how to use an API.

00:21:23 You never need to touch the API.

00:21:24 If you don't want to, you can go to FEC.gov and get all of the data that you want out of this.

00:21:29 That's really cool.

00:21:30 I've heard the term dog food, eat your own dog food.

00:21:33 Drinking your own champagne sounds way better.

00:21:36 It probably means the same thing, right?

00:21:37 Way more pleasant, I imagine.

00:21:39 Yes, absolutely.

00:21:41 When we were interacting with the homepage, the all data section, that was JavaScript talking to this as well.

00:21:48 Just so you're basically the first client of this API.

00:21:51 Correct.

00:21:52 Exactly correct.

00:21:53 Okay.

00:21:53 However, if the FEC.gov doesn't have the information you need or you want to build your own tools on top of the API, we do make that available to you directly.

00:22:03 So you can bypass FEC.gov and go directly to the source to get the data.

00:22:07 How old is this API?

00:22:08 How long has it been around?

00:22:09 We realized around 2014 that the legacy systems we were running were going to have a really big problem with our exponentially growing data.

00:22:17 So in 2015, we partnered with 18F, which is a government organization within consulting for government by government.

00:22:25 And we wanted to build an open source cloud-based application that had an API.

00:22:30 So we actually launched the API before we launched FEC.gov.

00:22:34 So we've been drinking our own campaigns since around 2015.

00:22:38 It's been a party for six years.

00:22:40 Awesome.

00:22:41 So I've heard of 18F, and it sounds like these are some really tech-savvy folks that can drop in and help the other developers on other organizations or divisions in the government and say,

00:22:52 look, you want to modernize what you're doing.

00:22:55 Let us come spend six months or a year, and we'll help you get going and then hand it off to you.

00:22:59 Yeah, I was hugely, hugely fortunate to have overlapped with 18F when I joined the project because I, again, joined the project, having done a crash course in learning Python, but not having had a lot of other skills that were needed to be successful in the project.

00:23:13 So I was able to have really, really excellent mentors that helped me learn.

00:23:18 In a lot of government agencies, this was our first cloud-based application.

00:23:22 I think hopefully I'll get a chance to talk about cloud.gov, which is the platform that we run.

00:23:26 Yeah, yeah, absolutely.

00:23:27 But this is all new to us.

00:23:28 And so 18F was really wonderful.

00:23:30 They taught us a lot.

00:23:31 They taught us how to build software in an agile way, how to practice open source, and not just share your code, but work in the open.

00:23:39 So if you go to our code repositories, you can see what I'm currently working on.

00:23:44 All of our issues, all of our tickets are public, and you can see the priorities and how things are going.

00:23:49 And, oh, there's my change, where I was tweaking our workers for a G event.

00:23:54 And actually, I'm thinking of moving to a different mechanism for our asynchronous requests.

00:23:59 And you can follow along with my research.

00:24:01 And if you have opinions about workers versus threads for G-Unicorn, I think, I don't know how, I call it G-Unicorn.

00:24:09 I say G-Unicorn, some people say G-Unicorn.

00:24:11 To me, I don't know, it's like a unicorn with a G.

00:24:14 So if you have opinions on this, please chime in.

00:24:17 All those issues are public.

00:24:19 I've done some research on pros and cons of the different configuration.

00:24:22 But, yeah, 18F kind of led the way on how to work in an agile way, in an open way.

00:24:28 And we were super lucky to be able to work with it.

00:24:30 Yeah, this is really neat.

00:24:31 So I'm sitting here looking at github.com/fecgov slash openfec.

00:24:35 And this is the GitHub repository for the API, right?

00:24:38 Correct.

00:24:39 And it's not some forked off, like we'll dump to it every now and then.

00:24:43 Like you said, this is where you all work.

00:24:44 Yes, this is where we deploy from.

00:24:45 We use CircleCI.

00:24:46 They have a really great open source tier.

00:24:49 So when we merge the develop branch, it deploys to CloudDive the develop space.

00:24:53 So this is our source of truth for the code.

00:24:56 Nice.

00:24:56 And it looks like you're using sort of feature branch style PR development, which feels modern

00:25:02 and fresh to me.

00:25:03 Another thing that's interesting is if I come down here, we've got our requirements.json here.

00:25:10 And we've got Flask.

00:25:11 We've got Flask RESTful and Flask SQLAlchemy.

00:25:13 This looks like a fun tech stack.

00:25:15 Thank you.

00:25:16 Yeah, I've enjoyed it.

00:25:17 I gave a talk at FlaskCon, which I think was the first time they ran it, I guess about a

00:25:21 year ago, that goes into a little bit more technical detail about how we use Flask for the API.

00:25:25 Yeah.

00:25:26 Super interesting.

00:25:27 One thing I'm noticing here, there's Flask 1, 1.1.1, which is great.

00:25:32 Last week, I guess last week, maybe five days ago, two came out.

00:25:37 They also have new async plans going on.

00:25:39 Are you all thinking about that already or are you just still putting out features for now?

00:25:43 With our data doubling every two years and we are down a couple of staff members, we're

00:25:48 sort of in the hopefully hang on until next year and hopefully we'll get some more money

00:25:52 plays.

00:25:53 If it's not broken, we do have regular dependency checking for security issues.

00:25:58 Of course, yeah.

00:25:59 If there's an issue, we do update it.

00:26:02 Basically, we're not in the place to take that on quite yet, but I did hear the news and

00:26:08 I'm excited to see what that might help us accomplish.

00:26:11 Yeah, absolutely.

00:26:12 You've mentioned cloud.gov.

00:26:14 I think that's a pretty interesting place.

00:26:17 Let's talk about a couple of other things.

00:26:18 Let's talk about this communities of practice at digital.gov.

00:26:23 You talked about working out in the open.

00:26:25 Let's talk about some of the things going on there that I think are pretty interesting.

00:26:29 What's the story of these community of practices?

00:26:32 I'm here.

00:26:32 I can see that there's an AI section and there's a blockchain section and the cloud and infrastructure,

00:26:37 which is getting close to cloud.gov stories and DevOps.

00:26:40 What is this place?

00:26:42 Yeah, so one of the things that surprised me about coming to government is how, so FEC is

00:26:46 an independent regulatory agency, which means it's not part of one of the big cabinet agencies.

00:26:51 And so kind of surprised me.

00:26:53 We're all sort of doing similar things and we sort of struggle to talk to each other about,

00:26:58 you know, what's working, what's not working.

00:26:59 It's not always clear who you might talk to just at other agencies about ideas and suggestions

00:27:05 they have.

00:27:06 We're pretty small potatoes compared to a lot of the bigger agencies and we have a lot

00:27:09 to learn from them, but I don't know how I'd feel about just sort of cold emailing someone

00:27:14 I've stalked on LinkedIn or something like that.

00:27:16 It can be hard to connect to other people working on very similar problems.

00:27:20 Yeah, because you could hear that maybe the people in, I don't know, IRS or something,

00:27:25 they're doing something cool and you would, because it's kind of related to what you're doing

00:27:28 in some sense.

00:27:29 It'd be neat to see how that might work for you all, but you don't know those people, right?

00:27:34 Like the government is huge and it's like a hundred thousand, I'm sure more than that,

00:27:37 a huge, huge company that many people have never met.

00:27:41 They're not close to each other, right?

00:27:42 So this is a way to set up some of those communities around ideas.

00:27:45 Is that right?

00:27:46 Absolutely.

00:27:46 Yeah, it's really wonderful.

00:27:48 And we've talked to people at the CFPB.

00:27:51 They use, I know they use Wagtail and we've sort of traded ideas about what's working well

00:27:55 and what's some of the challenges we're facing.

00:27:58 But the communities of practice are kind of a formal way of bringing people together.

00:28:01 And I've really enjoyed the DevOps community of practice.

00:28:04 And they have a monthly short half hour tech talk where they invite people to talk about

00:28:09 the types of things they're working on and successes and challenges.

00:28:13 Yeah, super neat.

00:28:14 Then another one was this digital services playbook.

00:28:18 So I think the digital services is something I just learned about a little while ago, a few

00:28:23 years ago, I think.

00:28:24 I had, oh gosh, I'm sorry, I don't remember the guest's name, but I had one of the developers

00:28:29 on from the US Digital Service, which I thought was a really interesting, just a really interesting

00:28:34 organization that I hadn't heard about.

00:28:35 Tell people what that is real quick.

00:28:37 And then what is this digital services playbook?

00:28:39 I think this seems pretty neat.

00:28:40 Sure.

00:28:40 So I'm not affiliated with the US Digital Service in any way.

00:28:43 However, I have met people who work there and I've always been super impressed by them.

00:28:46 And they have a similar mission to 18F.

00:28:49 And there are people out there who have written blog posts about the difference, but they're

00:28:52 through the executive office of the president.

00:28:53 And they do have a similar mission of helping modernize government technologies.

00:28:57 I think one of the biggest challenges in everyone I've ever spoken to who works in government is

00:29:01 contracting.

00:29:02 So if you were lucky enough to have staff of federal employees, you can have some more flexibility

00:29:09 around how you do the work.

00:29:10 But if you are, there are some advantages and disadvantages to contracting, but it can be very difficult to

00:29:15 get right.

00:29:16 And so one of the resources I often point my acquaintances towards that are trying to

00:29:22 modernize their technology is the digital US Digital Services Playbook.

00:29:26 And it goes through how to approach your modernizing your technology.

00:29:31 It talks about best practices for contracting and kind of gives you a roadmap.

00:29:36 And another resource I'd like to touch on in a second, there's a statistic that I think like

00:29:40 80% of all custom built software projects in government fail.

00:29:45 And I think that contracting is a really hard thing to get right.

00:29:48 It's sort of like, I imagine outsourcing for the private sector.

00:29:51 It has risks to outsource because it just has trade-offs.

00:29:55 And the amount of management and oversight you might need to have for a contractor or an

00:30:01 outsourced project might differ from if it's in-house.

00:30:04 So this is a really great, the Digital Services Playbook is a really great resource for other

00:30:09 federal employees or people working on federal projects.

00:30:12 And then also just anyone looking to modernize their systems might find this is helpful as

00:30:18 well.

00:30:18 Yeah.

00:30:18 And they've got 13.

00:30:20 Apparently, they're not superstitious, which is cool.

00:30:22 So they've got 13 digital service plays.

00:30:27 So things like that are pretty, I guess, pretty standard, but also good, you know, understand

00:30:31 what people need, make it simple and intuitive.

00:30:33 But then stuff that maybe people within government don't necessarily, they wouldn't necessarily

00:30:39 think about like default to open or, you know, choose a modern technology stack and things

00:30:44 like that.

00:30:45 You know, default to open, for example, right?

00:30:47 You might think, well, this is data about people and it's super sensitive.

00:30:51 That's one reason to keep it hidden.

00:30:52 I mean, obviously what you're giving away is supposed to be public at FEC.

00:30:56 And then another is, you know, for example, like if you share your source code, maybe people

00:31:00 who want to do bad things with it will come and, you know, use that to find some way to,

00:31:05 I don't know, do something that they shouldn't, right?

00:31:08 We've seen a lot of security in open source as well, right?

00:31:12 By having multiple eyes on it.

00:31:14 Absolutely.

00:31:15 And I think building in the open from the beginning is the best way to successfully

00:31:19 have an open source project because retroactively open sourcing that has been built using the

00:31:25 assumption that you'll have protection through obfuscation can be really risky.

00:31:29 And unfortunately, if you're building a closed source system, it can make it a little easier

00:31:35 to have some bad practices like hard coding credentials.

00:31:38 I think there can be some misunderstandings about how open source works.

00:31:43 Like no one can come in and just change the code for fec.gov.

00:31:46 They need to submit a request, which is reviewed by one of our team members and gone through

00:31:51 a security review as part of that process.

00:31:53 So it kind of open source sort of encourages best practices because you might think that you're the strongest network security that ever exists.

00:32:02 If someone could be phishing is, I think, one of the biggest weaknesses that organizations face.

00:32:06 And so I think that's sometimes called zero trust.

00:32:09 Yeah.

00:32:10 Yeah.

00:32:10 So assume they're going to get to the code either way.

00:32:12 So you might as well use best practices for securing your code.

00:32:16 And the best way to do that is from the very beginning, assume that you're going to have eyes on it.

00:32:22 Talk Python To Me is partially supported by our training courses.

00:32:25 Flask is one of, if not the most popular Python web frameworks and developers are adopting it for the smallest and many of the largest Python based websites and APIs.

00:32:34 If you want to learn Flask, we built a fantastic course called Building Data-Driven Web Apps with Flask and SQLAlchemy.

00:32:41 In this course, we built a PyPI.org clone from scratch using Flask and SQLAlchemy.

00:32:46 You'll learn many of the major ingredients needed to build most web apps.

00:32:50 If this sounds amazing, just visit talkpython.fm/Flask or email us at sales at talkpython.fm.

00:32:57 Before we move off this digital services, Kim out there live stream says, David Holmes was your guest.

00:33:04 Thank you, Kim, for that.

00:33:06 Yes, I remember that now.

00:33:07 And says, as a non-U.S. citizen, he's from South Africa, do organizations like the FEC use the U.S. digital services or is it all in-house?

00:33:17 It sounds like you kind of are separate from them.

00:33:20 We partnered with 18F back in 2015.

00:33:22 Again, they're sort of like consulting for government by government.

00:33:25 18F rolled off our project in 2018-ish.

00:33:32 And we haven't partnered with the U.S. digital service.

00:33:34 I think they choose their projects that can be influenced by the executive office of the president.

00:33:40 So we haven't worked with them, but I've met, we do have an exchange of ideas.

00:33:44 If we're lucky to go to PyCon, for example, and meet other people who work there, we can talk about what's working well.

00:33:51 And so that is super valuable to be able to have that sort of relationship with them.

00:33:54 Yeah, fantastic.

00:33:55 One other resource that I think you were hinting at is this de-risking guide from 18F.

00:34:02 Is that right?

00:34:02 Yes.

00:34:03 I'm a huge fan of this.

00:34:04 They have a federal and non-federal version.

00:34:07 So if you're a state, that's a whole nother thing in the U.S. that we have to deal with where we have the federal government and the state government.

00:34:14 And just like all the federal agencies are out there replicating similar efforts, all the states are replicating similar efforts with their own budgets and their own challenges.

00:34:21 And in some ways, if we're looking at things like security, we have a disadvantage because we're splitting up our resources into many slices.

00:34:30 So I love that 18F also built a non-federal guide to help with the state and local governments as well.

00:34:36 Yeah, I think this also applies to large organizations that have maybe been around a while.

00:34:41 But here's a stat from government.

00:34:43 It says only 13% of large government IT projects succeed.

00:34:48 And implementing custom software projects can be extraordinarily costly and risky in a government setting.

00:34:55 And here's the big thing.

00:34:56 The waterfall software development remains the standard at all levels.

00:34:59 So in budgeting, in management, in rollout, all those things, which is very different from here's my PR.

00:35:07 Let's push that with CI to cloud.gov, right?

00:35:10 Yeah, absolutely.

00:35:10 I feel like someone said recently, government contracting is really designed to buy tanks.

00:35:16 And building software isn't really very, doesn't have a lot in common with buying a tank.

00:35:22 And so, yes, it is difficult to get right.

00:35:25 And this guide has some really practical recommendations for how to manage the process.

00:35:31 And one of my biggest things I'd like to highlight is the Quality Assurance Surveillance Plan, or QASP.

00:35:37 That's mentioned in this guide.

00:35:38 You can build it into your contract as a way to measure whether the quality of the software is acceptable.

00:35:45 It can help you as the person who's managing the contract and help your contractors understand what acceptable levels of quality are.

00:35:52 So, oh, it looks like the QASP is highlighted there at the top in one of the menus.

00:35:57 Oh, yeah.

00:35:58 There you go.

00:35:59 And they have a sample QASP, which is really cool.

00:36:01 And so, if you scroll down a little bit there on this page, you can see some example quality measurement ideas.

00:36:08 So, using an automated tool to check for accessibility and security vulnerabilities, you should be able to deploy with a single command following OWASP best practices.

00:36:18 Their tools, ZAP, can be used to check for vulnerabilities.

00:36:22 Doing user research at every sprint.

00:36:24 These are just really great recommendations.

00:36:25 Oh, yeah.

00:36:26 How neat.

00:36:27 And there's a little, how do you do this measurement of what is the acceptable quality level?

00:36:32 How do you measure it?

00:36:33 And so on.

00:36:33 This is really neat.

00:36:34 I like it.

00:36:35 Huge.

00:36:35 I'm a huge fan.

00:36:35 Yeah.

00:36:36 Cool.

00:36:36 Now, let me pull up one thing that I thought was pretty interesting here.

00:36:39 And I'm seeing this, excuse me, I'm seeing this all over the different sites that were.

00:36:44 I'm seeing it on, you know, the fec.gov and so on.

00:36:47 If I click here, it says right at the top, an official website of the U.S. government.

00:36:50 How do you know?

00:36:51 And it says, well, it's a .gov.

00:36:53 And then it talks about this little lock.

00:36:55 And if I look at the lock, it says this is all done through Let's Encrypt, which Let's Encrypt is awesome.

00:37:01 You know, it's a way to basically automate getting SSL certificates.

00:37:06 But it feels like very modern and cool and hip.

00:37:10 And to see the government rolling that out, that was kind of a surprise.

00:37:13 And I feel like this ties a little bit back to our next topic, which is cloud.gov.

00:37:17 Absolutely.

00:37:17 Yes.

00:37:18 The first thing I want to point out is the banner you mentioned at the top of the page is part of the U.S. Web Development Standards, U.S. Web Development Design System.

00:37:28 It's an initiative to bring the look and feel of government websites in line with each other so it can help build trust.

00:37:35 And users can be assured that they are in the right place.

00:37:38 If this is the first time you've heard of it, they have some really great resources.

00:37:42 U.S. W.D.S.

00:37:44 And I might be getting the acronym, like what it stands for slightly wrong.

00:37:49 But they have components you can use on your site.

00:37:51 It's all open source.

00:37:52 Web Design System.

00:37:54 There you go.

00:37:55 Thank you.

00:37:56 And so you can see on their website, they have an official website of the U.S. government.

00:38:01 Here's how you know at the top of their page, just like we do.

00:38:04 They even have versioning, like version 2.11.2.

00:38:07 Yeah.

00:38:07 This is a really great resource as well.

00:38:09 It's all open source.

00:38:10 So even if you aren't in government, if you wanted to borrow any design, it's a design system.

00:38:15 And people who know more about design systems would know more about what that means.

00:38:18 But we do use parts of that in our site.

00:38:21 But you mentioned Let's Encrypt as part of how we manage our certificates.

00:38:27 FEC.gov is run on cloud.gov.

00:38:29 And cloud.gov is a platform as a service that's available to government agencies.

00:38:35 And so when you build a cloud-based system, you have the option of building your own cloud

00:38:40 infrastructure in AWS or Azure, Google Cloud from scratch.

00:38:46 Or you could use a platform as a service.

00:38:47 And there are pros and cons, trade-offs of each approach.

00:38:51 But we find as a small agency, cloud misconfiguration is one of the leading causes of security vulnerability.

00:38:57 Like security breaches.

00:38:57 Yeah.

00:38:58 How often do we hear about here is a open server running in the cloud without authentication?

00:39:04 Or here is 10 million records of sensitive data in a non-secured public S3 bucket because

00:39:10 it was a pain to deal with security, to integrate that with the app or whatever, right?

00:39:14 These are real problems.

00:39:15 Absolutely.

00:39:15 And the cloud itself is very secure.

00:39:18 But you need to make sure you're configuring it properly, take advantage of those security

00:39:23 features.

00:39:23 And so that's not easy to do.

00:39:26 Or I haven't found it easy to do.

00:39:28 I always say like they give you enough.

00:39:30 Well, I probably won't use that phrase, phraseology, but it's very powerful and difficult to get

00:39:36 right.

00:39:36 Yeah.

00:39:36 I feel like AWS and Azure, those types of places, they're very powerful, but you go there

00:39:41 and it's just, you know, deer in the headlights.

00:39:44 So many choices.

00:39:45 Just even at the, what area do you want to go into?

00:39:48 And then you factor, well, what are the security implications of changing this switch down in

00:39:52 some level?

00:39:52 It's crazy.

00:39:54 Yeah.

00:39:54 Yeah.

00:39:54 I won't even sign up for a free tier account because I'm convinced knowing me, someone's

00:39:57 going to get access and mine Bitcoin.

00:39:59 I'm going to have a $10,000.

00:40:00 Like they make you put your credit card in there and I'm not doing that.

00:40:03 So it takes a lot of expertise to build your own infrastructure in the cloud in a secure

00:40:09 way.

00:40:09 Our agency being smaller, we could go ahead and do that, but cloud.gov has a lot of advantages.

00:40:15 And so what it does is it sits on top of AWS as a management layer.

00:40:21 And so it manages the cloud security.

00:40:23 It manages authentication.

00:40:25 You know, who has access to what it makes it super easy to deploy, really easy to keep

00:40:30 our infrastructure as code.

00:40:31 You can use infrastructure as code in AWS, but I still haven't really figured out how to do

00:40:36 that.

00:40:36 It seems wolf again.

00:40:37 So many haven't, I find it no matter how many trainings I take, I still find it difficult

00:40:42 to work with.

00:40:42 So cloud.gov has a lot of advantages over building your own infrastructure.

00:40:47 It has fixed pricing.

00:40:49 Again, like if you mess something up and are running a machine for too long and you get

00:40:53 a surprise $10,000 bill, like that doesn't happen in cloud.gov because they have cost

00:40:57 engineers and they have fixed pricing.

00:40:58 In government, if you want to build a technical system, you have to have an, it's called an

00:41:03 ATO, an authority to operate.

00:41:05 And it's all this paperwork that you need to do in order to prove that your system is secure

00:41:09 enough.

00:41:10 By using cloud.gov, you can inherit from their ATO and kind of save yourself a lot of paperwork.

00:41:15 You just put the checkbox.

00:41:17 I'm using cloud.gov.

00:41:18 I mean, essentially, they, I mean, you mentioned we use let's encrypt and my first reaction

00:41:23 was cool.

00:41:24 I guess we use let's encrypt.

00:41:26 Awesome.

00:41:26 Yeah.

00:41:27 They manage a lot for us.

00:41:29 They make it super easy to deploy.

00:41:30 We have scalability through cloud.gov and we can focus more of our time and energy on

00:41:36 the data and application side of development, which in and of itself is pretty time consuming

00:41:41 for us.

00:41:42 Yeah.

00:41:42 So maybe you could talk about two things.

00:41:44 Maybe you could talk about what does your deployment look like?

00:41:48 I think you're using AWS at the moment.

00:41:49 Is that right?

00:41:50 And then you're using Postgres.

00:41:52 And maybe just talk about how you're running all that, the APIs and stuff out there.

00:41:56 Sure.

00:41:57 So application architecture, we run our application tier on cloud.gov and our database tier is

00:42:04 actually, we have our own managed AWS Aurora Postgres that we run because while cloud.gov

00:42:11 does offer database services, our database is so massive that we wanted, and we have really

00:42:16 experienced DBAs who wanted more granular control over the settings on the database.

00:42:21 Yeah.

00:42:21 You talked about how you were in a place where if you wanted to scale horizontally by adding

00:42:27 more read servers, read replicas, that was a redeploy of your app and a big challenge.

00:42:32 And moving to Aurora made that sort of automatic behind the scenes, right?

00:42:35 Yes.

00:42:36 I did.

00:42:36 And I can probably put this in the show notes.

00:42:39 I did a talk on how we use Aurora for database scalability.

00:42:44 So AWS, RDS, Postgres, just kind of plain, I think it's like relational database service,

00:42:51 basically managed database service.

00:42:53 When you have read replicas, so at some points we need to run like three to four read replicas

00:42:59 equivalents.

00:43:00 I can go into like the difference there, but we need to run on numerous machines at the same

00:43:04 time on the database side in order to meet our demand.

00:43:07 I suspect that this data is very read heavy, the way it's being used.

00:43:12 Well, it is very read heavy, but we also have the data is always changing.

00:43:16 So we have some really big filers.

00:43:18 That's true.

00:43:18 If you're doing like a big campaign, people are every little contribution is streaming in,

00:43:24 right?

00:43:24 Yep.

00:43:24 And there's some big packs that'll have like 30 million records, 40 million records we need

00:43:28 to insert all in one night.

00:43:29 So we do have a lot of, it's pretty insert heavy as well.

00:43:33 But in the past, when you use AWS RDS, each read replica had its own connection string.

00:43:39 We are using the 12 factor framework for application development, which is a few is that's published

00:43:46 online and basically considered best practices for cloud based application development.

00:43:50 And it recommends using your attached services connecting to them through connection strings.

00:43:56 So basically, you should be able to swap out your database for one database to be able to swap out to another.

00:44:01 So this is backing services number four there.

00:44:03 Treat backing services as attached resources.

00:44:05 So our application connects to the database through environment variable connection string.

00:44:11 And when we were using plain RDS before, each replica had its own connection string.

00:44:16 So in order to scale, we could have set up auto scaling on that database side, but we would have had to come up with a fairly fancy way of consuming that new connection string, adding it to the environment variable, the application, and then redeploying the application to reflect that new connection string.

00:44:33 So basically, it wasn't functionally, it wasn't very feasible to us for us to have database auto scaling.

00:44:39 And after doing some research, we decided to move to AWS Aurora Postgres, which has one connection string that you connect to, and it handles auto scaling on its end.

00:44:49 So it doesn't call them replicas, it calls them instances, but they're functionally replicas.

00:44:55 So we connect to one connection string, and it could have two instances running.

00:44:59 And then if it has high CPU, it'll spin up some more machines to handle the database side.

00:45:04 Oh, cool.

00:45:04 So you can set up like auto scaling rules and things along those lines?

00:45:07 Yes.

00:45:08 Okay.

00:45:09 So that's the machine under the hood for the API.

00:45:11 Yeah.

00:45:12 And during one of your talks, was that presentation that I linked to, was that one given to the community of practice group?

00:45:20 Is that where that was?

00:45:21 It is.

00:45:21 Yes.

00:45:22 It's all coming together, I see.

00:45:23 So I'll link to that as well.

00:45:24 But during that talk, you showed some neat CLIs for deployment and configuring scale and things like that.

00:45:31 And it was really cool.

00:45:32 You go over there and say, hey, I just want five more web run-ins.

00:45:34 Boom.

00:45:35 And you have them, right?

00:45:36 That was quite neat how that works.

00:45:38 Yeah.

00:45:38 Cloud.gov is based off of Cloud Foundry, which is an open source platform management tool.

00:45:45 And so it can be a little bit difficult to run this on your own, but there are managed services that run Cloud Foundry.

00:45:52 And one of the big ideas, as I understand it, behind Cloud Foundry is making the developer experience really easy.

00:45:57 So you can deploy with a single command, CF push.

00:46:00 So we use on Cloud.gov all the Cloud Foundry commands.

00:46:04 And with one command, you can scale up the number of instances you're running your application.

00:46:11 And it's practically immediate.

00:46:13 I mean, I would say under three seconds to quadruple your number of machines.

00:46:19 Yeah, you made an interesting comparison to that about your previous model with physical servers.

00:46:23 Yeah.

00:46:24 So our legacy system was run on physical servers.

00:46:26 And it was really difficult to predict how much we were going to need.

00:46:30 Sometimes we'd overbuy.

00:46:31 Sometimes we'd underbuy.

00:46:32 It could take three months to get a new server set up.

00:46:35 And now it takes three seconds to get a new instance running.

00:46:38 In addition, when we moved to Cloud.gov, we saved about $1.2 million a year in infrastructure costs, which was really big for us as a small agency.

00:46:46 That's a huge thing.

00:46:47 And I believe one of the numbers you threw out there previously is $1.4 million was around the infrastructure costs before.

00:46:53 So to go from $1.4 to $200,000, that's a huge difference.

00:46:58 It's not like, well, it's $100 million and it went to $99 million.

00:47:01 It was much, much better, right?

00:47:02 Percentage-wise.

00:47:03 That's a great point.

00:47:03 Yeah.

00:47:04 And we were able to, again, like my big, the thing I love about Cloud.gov is not taking on that risk ourselves.

00:47:10 It's both the security risk and also just the risk of misconfiguring something and something going down.

00:47:16 If for a small agency like ours, it's really huge to be able to depend on them for that.

00:47:19 Yeah.

00:47:19 And you don't have to have a team of network and DevOps engineers just to keep it going, I suspect.

00:47:26 Like that's the cloud.gov side and they just deal with it.

00:47:29 Yeah.

00:47:29 I think when I talked to them, if we had taken all of this in-house, the amount of services that they offer, we would have needed to hire like six or seven more people.

00:47:37 And we have a team of nine.

00:47:38 So it was just not cost effective for us to bring that infrastructure in-house at this time.

00:47:44 All right.

00:47:44 So let me ask you a question.

00:47:46 I've been thinking about this as we've been talking about all these things, seeing all the cool stuff that you're doing, seeing how 18F came in and helped and all of those.

00:47:53 Now, I don't necessarily expect you to have an answer to this, but I just want to hear your thoughts.

00:47:57 So the rollout of the Affordable Care Act and all of the drama around the websites and the challenge of scaling that and stuff, do you think it would be different?

00:48:06 I think it would be smoother if like this world existed in a more polished way and we tried to roll it out again in the same way?

00:48:13 I think that there are a lot of challenges in developing and delivering digital services.

00:48:19 I think a lot of the expectations for digital service delivery are high.

00:48:25 You know, it's like, well, Google can find this for me.

00:48:27 And if you compare the operating budget between my agency and Google, it's like, yeah, Google just talked about rolling out like their own supercomputer for this other thing.

00:48:35 Right.

00:48:35 That's like a different set of capabilities or whatever.

00:48:39 Totally.

00:48:39 Totally.

00:48:39 I would say to me, it all boils down to as boring as it sounds.

00:48:43 It boils down to contracting.

00:48:44 It really depends on how the contract is written and how it's managed.

00:48:48 And I don't know very much about it, but I do know that if you don't get it right, it's very difficult to course correct.

00:48:54 So absolutely, we can do better.

00:48:57 But there are still a lot of challenges to preventing those sorts of issues.

00:49:01 Yeah, of course.

00:49:02 All right.

00:49:03 Well, I think that's probably all the time we have to dive deep in this.

00:49:07 But this has been a super interesting look at what's happening over there.

00:49:10 And, you know, honestly, it's heartening to see how much the government is advancing and using modern tech and really putting these systems in place.

00:49:18 So well done.

00:49:19 Thank you so much.

00:49:20 It was a pleasure to speak with you today.

00:49:21 Yeah, you bet.

00:49:22 Now, before you get out of here, I got the two final questions.

00:49:24 So if you're going to work on the API, for example, write some Flask and Python code.

00:49:30 What editor do you use?

00:49:32 I use Sublime.

00:49:32 And VS Code does package management better, I think.

00:49:36 But I just can't make myself move.

00:49:38 And notable PyPI package.

00:49:41 You know, maybe something cool that you use during the project that you're like, oh, people should really know about this.

00:49:45 It doesn't get enough press.

00:49:46 Sure.

00:49:46 I'm a maintainer for Flask SQLAlchemy.

00:49:48 So it's a really great package.

00:49:50 Community has been super welcoming.

00:49:52 And it's the only one I've been able to really get my hands on.

00:49:55 So if you're looking for a project to work on, all the Flask projects are great to attribute to.

00:50:00 Oh, fantastic.

00:50:00 Tell people real quick, why would you choose Flask SQLAlchemy over just SQLAlchemy?

00:50:05 I think it depends on getting started.

00:50:07 It's pretty friendly to get started.

00:50:09 And you can maybe start with that and then reevaluate what sort of custom settings you might need.

00:50:15 Yeah, cool.

00:50:16 All right.

00:50:16 A couple of comments from the live stream.

00:50:18 Antonio says, no, don't go.

00:50:21 I really enjoyed the chat.

00:50:22 And then Brandon says, super interesting subject.

00:50:24 Thank you.

00:50:25 Yeah, thanks.

00:50:25 Thanks both for being here.

00:50:26 Final call to action.

00:50:27 You know, people broadly or maybe even people within governments around the world who want to do better work with modern tech stack.

00:50:35 And what do you tell them?

00:50:36 Check out fec.gov.

00:50:37 The link to our GitHub is in the footer.

00:50:38 We look at all the feedback as public.

00:50:40 Anything you can get out of our open source project.

00:50:43 Take a look at who's running for office.

00:50:45 And we just love it if you got involved in our project.

00:50:47 Very cool.

00:50:47 Well, like I said, well done.

00:50:49 Very nice work.

00:50:50 It seems like when I was working with the site, it was super snappy and beautiful and polished.

00:50:55 So excellent.

00:50:56 Thanks for being here, Laura.

00:50:57 I'll pass that along to my team.

00:50:58 Thanks so much.

00:50:59 Yeah, you bet.

00:51:00 Thanks.

00:51:00 Okay, bye.

00:51:01 This has been another episode of Talk Python To Me.

00:51:05 Our guest on this episode was Laura Buford.

00:51:08 And it's been brought to you by Square and us over at Talk Python Training.

00:51:11 With Square, your web app can easily take payments, seamlessly accept debit and credit cards, as well as digital wallet payments.

00:51:18 Get started building your own online payment form in three steps with Square's Python SDK at talkpython.fm/square.

00:51:27 Want to level up your Python?

00:51:30 We have one of the largest catalogs of Python video courses over at Talk Python.

00:51:33 Our content ranges from true beginners to deeply advanced topics like memory and async.

00:51:39 And best of all, there's not a subscription in sight.

00:51:41 Check it out for yourself at training.talkpython.fm.

00:51:44 Be sure to subscribe to the show, open your favorite podcast app, and search for Python.

00:51:49 We should be right at the top.

00:51:50 You can also find the iTunes feed at /itunes, the Google Play feed at /play, and the direct RSS feed at /rss on talkpython.fm.

00:52:00 We're live streaming most of our recordings these days.

00:52:03 If you want to be part of the show and have your comments featured on the air, be sure to subscribe to our YouTube channel at talkpython.fm/youtube.

00:52:11 This is your host, Michael Kennedy.

00:52:13 Thanks so much for listening.

00:52:14 I really appreciate it.

00:52:15 Now get out there and write some Python code.

00:52:17 Thank you.

