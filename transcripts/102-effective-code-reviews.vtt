WEBVTT

00:00:00.001 --> 00:00:04.520
How do you build reliable software with fewer bugs? Yes, unit testing is part of that.

00:00:04.520 --> 00:00:09.080
But did you know that code reviews often play a key role in this process

00:00:09.080 --> 00:00:12.360
and come with many more benefits on top of just bug detection?

00:00:12.360 --> 00:00:20.000
This week, you'll meet Dougal Matthews. It's Talk Python To Me, episode 102, recorded February 28, 2017.

00:00:20.000 --> 00:00:48.120
Welcome to Talk Python To Me, a weekly podcast on Python,

00:00:48.120 --> 00:00:51.200
the language, the libraries, the ecosystem, and the personalities.

00:00:51.200 --> 00:00:55.300
This is your host, Michael Kennedy. Follow me on Twitter where I'm @mkennedy.

00:00:55.300 --> 00:00:59.180
Keep up with the show and listen to past episodes at talkpython.fm

00:00:59.180 --> 00:01:01.720
and follow the show on Twitter via at Talk Python.

00:01:01.720 --> 00:01:06.140
This episode is brought to you by Rollbar and Hired.

00:01:06.140 --> 00:01:08.180
Thank them both for supporting the show.

00:01:08.180 --> 00:01:15.500
Check them out at rollbar and at hired underscore HQ on Twitter and tell them thank you.

00:01:15.500 --> 00:01:17.960
Dougal, welcome to Talk Python.

00:01:17.960 --> 00:01:19.760
Hi, thanks. It's an honor to be here.

00:01:19.760 --> 00:01:21.400
Yeah, it's great to have you here.

00:01:21.400 --> 00:01:25.860
I'm really excited to bring a slightly different view of technology here.

00:01:25.860 --> 00:01:28.560
Often we talk about, you know, how do you execute this code?

00:01:28.560 --> 00:01:29.480
What's the API you call?

00:01:29.480 --> 00:01:32.980
But let's take a step a little bit back from just writing code

00:01:32.980 --> 00:01:34.780
and talk about how we work as a team,

00:01:34.780 --> 00:01:37.180
how we contribute to open source,

00:01:37.180 --> 00:01:39.220
contribute to our company's code,

00:01:39.220 --> 00:01:41.380
and things like that through this code review

00:01:41.380 --> 00:01:43.180
whole conversation that you have here.

00:01:43.180 --> 00:01:45.600
Yeah, I mean, I spend so much time doing code review

00:01:45.600 --> 00:01:47.120
just as part of my daily job.

00:01:47.120 --> 00:01:49.820
It just seems like such an important thing to actually talk about

00:01:49.820 --> 00:01:50.860
and see how we can improve.

00:01:50.860 --> 00:01:53.000
Yeah, and I feel like people don't talk about it very much.

00:01:53.000 --> 00:01:56.340
That's why I was drawn to a talk that you gave at EuroPython

00:01:56.340 --> 00:01:58.080
that we're going to talk about is,

00:01:58.080 --> 00:02:01.120
you know, it's great that you're talking about this here

00:02:01.120 --> 00:02:04.020
because it can actually be either very beneficial

00:02:04.020 --> 00:02:06.680
to bring in people, kind of to level them up as developers,

00:02:07.680 --> 00:02:10.760
or it can be confrontational and actually upsetting, right?

00:02:10.760 --> 00:02:14.160
So I think having this as a thing you study

00:02:14.160 --> 00:02:15.800
and a thing that you do meaningfully,

00:02:15.800 --> 00:02:18.380
not just, hey, I have to review your code, somebody said so.

00:02:18.380 --> 00:02:19.680
Seems like a good idea.

00:02:19.680 --> 00:02:20.260
Absolutely.

00:02:20.260 --> 00:02:22.200
At the EuroPython talk, I actually,

00:02:22.200 --> 00:02:24.180
I'd done a quick sort of raise of hands

00:02:24.180 --> 00:02:26.300
to see what people thought about code review.

00:02:26.300 --> 00:02:28.920
And I think it was only around 20% of the room

00:02:28.920 --> 00:02:31.880
said they looked forward to or enjoyed the code review process.

00:02:32.200 --> 00:02:35.760
And given how long, how much time people spend doing code review,

00:02:35.760 --> 00:02:38.860
which was several hours a day, if not more in some cases,

00:02:38.860 --> 00:02:41.900
then that's just something we need to do better at.

00:02:41.900 --> 00:02:42.780
Yeah, we definitely do.

00:02:42.780 --> 00:02:45.060
Before we get to that, though, let's start with your story.

00:02:45.060 --> 00:02:45.820
How did you get into programming?

00:02:45.820 --> 00:02:47.800
Yeah, I've got a fairly common story.

00:02:47.800 --> 00:02:50.660
I think I started messing around with computers when I was young.

00:02:50.660 --> 00:02:53.040
The first thing I'd done really was learning sort of HTML

00:02:53.040 --> 00:02:55.960
and I guess CSS a bit later on,

00:02:55.960 --> 00:02:58.640
just because I first encountered it in some websites

00:02:58.640 --> 00:03:00.200
and I looked at the view source.

00:03:00.580 --> 00:03:03.180
And just with that, it kind of led me down this rabbit hole.

00:03:03.180 --> 00:03:05.320
My dad had actually done something really great

00:03:05.320 --> 00:03:06.160
when I was a teenager.

00:03:06.160 --> 00:03:07.620
He embraced it.

00:03:07.620 --> 00:03:09.180
He was running his own company at the time.

00:03:09.180 --> 00:03:12.760
And not many people actually had websites

00:03:12.760 --> 00:03:13.700
for their small businesses.

00:03:13.700 --> 00:03:15.740
What year was this? Do you remember?

00:03:15.740 --> 00:03:18.520
It must have been around 2000.

00:03:18.520 --> 00:03:19.260
Okay, yeah.

00:03:19.260 --> 00:03:20.240
Maybe a couple of years before.

00:03:20.240 --> 00:03:23.080
Yeah, I mean, the web was certainly well established.

00:03:23.080 --> 00:03:25.940
Like the whole dot-com boom was going crazy around that time.

00:03:26.840 --> 00:03:30.460
It was still not a thing that if you had a business,

00:03:30.460 --> 00:03:31.500
you had a website, right?

00:03:31.500 --> 00:03:33.800
Like that was not a one-to-one mapping.

00:03:33.800 --> 00:03:35.820
It was if you're doing internet stuff

00:03:35.820 --> 00:03:39.320
or you're a big company like Coke or Chevrolet or something,

00:03:39.320 --> 00:03:40.620
you would of course have one, right?

00:03:40.620 --> 00:03:41.300
Yeah, absolutely.

00:03:41.300 --> 00:03:42.440
I think at that point,

00:03:42.440 --> 00:03:45.580
it was really out of reach from your regular small companies.

00:03:45.820 --> 00:03:49.200
So yeah, my dad just basically got me to put together

00:03:49.200 --> 00:03:50.200
a simple website for him.

00:03:50.200 --> 00:03:52.060
And honestly, it was fairly terrible,

00:03:52.060 --> 00:03:54.700
but it was my first kind of step into that world

00:03:54.700 --> 00:03:55.400
and that direction.

00:03:55.400 --> 00:03:57.840
And I just, I love the idea of web development since.

00:03:57.840 --> 00:04:02.380
Yeah, I think it's interesting that the whole view source thing

00:04:02.380 --> 00:04:04.780
brought so many people into programming, right?

00:04:04.780 --> 00:04:06.980
It used to be we would go to a store,

00:04:06.980 --> 00:04:07.920
we'd buy a box,

00:04:07.920 --> 00:04:11.540
it would have compiled machine instructions on a disk.

00:04:11.540 --> 00:04:13.080
We'd put those on our computers and run them.

00:04:13.320 --> 00:04:15.760
And then the web came along and if it did something interesting,

00:04:15.760 --> 00:04:19.340
you could pretty much just look and study it, right?

00:04:19.340 --> 00:04:19.680
Yeah.

00:04:19.680 --> 00:04:21.820
And that actually reminds me of one time,

00:04:21.820 --> 00:04:24.000
I was just starting and I was trying to figure out

00:04:24.000 --> 00:04:25.060
why something wasn't working.

00:04:25.060 --> 00:04:27.860
And actually, I didn't have access to the computer all the time.

00:04:27.860 --> 00:04:30.500
So what I'd done is I printed about 20 pages of HTML

00:04:30.500 --> 00:04:32.300
and just sat down and studied it.

00:04:32.300 --> 00:04:35.420
It wasn't a very good approach, but...

00:04:35.420 --> 00:04:36.640
I've tried that as well.

00:04:36.640 --> 00:04:39.180
It's extremely hard to get anything out of it.

00:04:39.180 --> 00:04:40.220
I did it with C++.

00:04:40.220 --> 00:04:41.280
Awesome.

00:04:41.280 --> 00:04:42.280
Okay, so you created the site.

00:04:42.280 --> 00:04:43.240
What language was that in?

00:04:43.240 --> 00:04:44.800
It was purely static.

00:04:44.800 --> 00:04:45.920
So it was just HTML.

00:04:45.920 --> 00:04:48.760
I'm not even sure if I was using CSS at the time.

00:04:48.760 --> 00:04:52.780
It might have been a bit early in my learning at that point.

00:04:52.780 --> 00:04:55.300
But fairly quickly, I moved on to doing PHP.

00:04:55.300 --> 00:04:57.600
I think it was just because you've seen it everywhere.

00:04:57.600 --> 00:04:59.660
All the websites ending with .php,

00:04:59.660 --> 00:05:02.240
like on, I guess, Facebook later on.

00:05:02.240 --> 00:05:04.000
But they were everywhere at the time.

00:05:04.000 --> 00:05:06.300
I never really felt quite at home with PHP.

00:05:06.300 --> 00:05:08.540
It wasn't really the language for me.

00:05:08.540 --> 00:05:10.320
I'm not really quite sure what it was.

00:05:10.320 --> 00:05:12.000
I mean, it was just a large number of things.

00:05:12.000 --> 00:05:13.360
I guess it always felt a bit strange.

00:05:13.360 --> 00:05:14.440
And I was trying to do more.

00:05:14.440 --> 00:05:16.060
Like, I was trying to do more object-oriented

00:05:16.060 --> 00:05:19.800
and think about my code more from an engineering point of view.

00:05:19.800 --> 00:05:23.580
And eventually, I stumbled on a video by Jacob Cavill Moss

00:05:23.580 --> 00:05:24.880
when he was introducing Django.

00:05:25.200 --> 00:05:26.180
It was very early on.

00:05:26.180 --> 00:05:27.460
It was before Django at one point.

00:05:27.460 --> 00:05:29.980
And I just picked it up and tried it out.

00:05:29.980 --> 00:05:30.960
I just loved it.

00:05:30.960 --> 00:05:31.460
It was great.

00:05:31.460 --> 00:05:35.160
And that just kind of led me down that path to learning Python.

00:05:35.160 --> 00:05:38.840
I remember writing a blog post years ago that Django,

00:05:38.840 --> 00:05:42.780
it's just Python because it was Python that I really liked.

00:05:42.780 --> 00:05:45.900
I mean, I do enjoy Django, but it was Python and the full ecosystem

00:05:45.900 --> 00:05:46.880
and everything beyond that.

00:05:46.880 --> 00:05:48.040
And it just kept on going.

00:05:48.200 --> 00:05:51.020
Yeah, I hear that's a story sort of like that over and over

00:05:51.020 --> 00:05:57.840
in that the guys around Django were very just enthusiastic, right?

00:05:57.840 --> 00:06:01.300
And their enthusiasm wore off on anybody who came in touch with them.

00:06:01.300 --> 00:06:04.040
And Django just really grew, partly because it's really great,

00:06:04.040 --> 00:06:05.260
partly because it's Python,

00:06:05.260 --> 00:06:09.160
but partly just the enthusiasm of getting started with this new world, right?

00:06:09.240 --> 00:06:09.800
Yeah, absolutely.

00:06:09.800 --> 00:06:13.080
And I'd gone from sort of hacking on WordPress sites

00:06:13.080 --> 00:06:16.400
and various PHP frameworks to then suddenly the elegance of Django

00:06:16.400 --> 00:06:19.160
and Python just defining models and having the admin

00:06:19.160 --> 00:06:23.120
and all that just there was just amazing, mind-blowing, really.

00:06:23.120 --> 00:06:26.560
You mean there's objects in architecture and factoring?

00:06:26.560 --> 00:06:27.240
Oh, my goodness.

00:06:27.240 --> 00:06:29.280
Yeah, yeah, very cool.

00:06:29.280 --> 00:06:32.460
So you said you have some strong ties to Europython.

00:06:32.460 --> 00:06:33.400
What's the story there?

00:06:33.400 --> 00:06:34.760
Are you working with the conference somehow?

00:06:34.760 --> 00:06:37.520
The reason I wanted to mention Europython,

00:06:37.520 --> 00:06:39.080
I mean, there's actually several reasons.

00:06:40.020 --> 00:06:41.120
But when I started with Django,

00:06:41.120 --> 00:06:42.800
I just thought I need to get involved with this.

00:06:42.800 --> 00:06:44.620
But there's nobody local that I know.

00:06:44.620 --> 00:06:47.300
I can't find anyone that's doing anything with Python or Django.

00:06:47.300 --> 00:06:50.240
So as a poor student at the time,

00:06:50.240 --> 00:06:55.180
I found all the money I had and got myself to Europython in 2009.

00:06:55.180 --> 00:06:57.060
And that's the first Europython I went to,

00:06:57.060 --> 00:06:58.180
and I've been every year since.

00:06:58.180 --> 00:07:02.700
And I also went to the first and actually the only Euro DjangoCon

00:07:02.700 --> 00:07:04.960
because after that I got changed to DjangoCon EU.

00:07:04.960 --> 00:07:07.900
Yeah, and it's just I've met so many people there

00:07:07.900 --> 00:07:11.060
and I slowly have started to do some small things to help out with Europython.

00:07:11.060 --> 00:07:12.780
So I'm on the program committee this year.

00:07:12.780 --> 00:07:17.420
And I'll actually take the moment to point out that the Europython dates for this year

00:07:17.420 --> 00:07:19.300
are the 9th to the 16th of July.

00:07:19.300 --> 00:07:23.860
These are tentative, but I expect they'll be finalized by the time this is released.

00:07:23.860 --> 00:07:25.260
Oh, yeah, that's really great.

00:07:25.260 --> 00:07:25.520
Thanks.

00:07:25.520 --> 00:07:28.880
So if you're anywhere near Europe or you want to go to Europe, right?

00:07:28.880 --> 00:07:29.880
Check it out, right?

00:07:29.880 --> 00:07:31.320
What's the URL?

00:07:31.320 --> 00:07:32.840
I think it's just...

00:07:32.840 --> 00:07:34.020
It's like Europython.

00:07:35.060 --> 00:07:37.000
Europython.eu is the website.

00:07:37.000 --> 00:07:37.260
Yeah, that.eu.

00:07:37.260 --> 00:07:39.740
And this year it's going to be in Rumini in Italy.

00:07:39.740 --> 00:07:40.820
Oh, that sounds awesome.

00:07:40.820 --> 00:07:42.180
Okay, excellent.

00:07:42.180 --> 00:07:44.500
Well, there's a possibility I'll make it there,

00:07:44.500 --> 00:07:46.740
but it's very far away from it.

00:07:46.740 --> 00:07:47.480
So we'll see.

00:07:47.480 --> 00:07:48.800
But that's awesome.

00:07:48.800 --> 00:07:49.920
If people can make it, they should go.

00:07:49.920 --> 00:07:52.700
I think the Python conferences are something really, really special.

00:07:53.280 --> 00:07:59.820
There is a different way that people interact with each other there than a lot of typical

00:07:59.820 --> 00:08:00.480
tech conferences.

00:08:00.480 --> 00:08:02.220
So yeah, if you can get there, check it out.

00:08:02.220 --> 00:08:02.660
Yeah, I agree.

00:08:02.660 --> 00:08:06.920
There's a long-running phrase of come for the language and then stay for the community.

00:08:06.920 --> 00:08:08.720
And I think that really resonates with me.

00:08:08.720 --> 00:08:09.500
Yeah, absolutely.

00:08:09.500 --> 00:08:13.720
So you're doing a lot with Europython, a lot with Django.

00:08:13.720 --> 00:08:15.440
What do you do for your job today?

00:08:15.740 --> 00:08:18.400
So I'm currently working on OpenStack.

00:08:18.400 --> 00:08:22.000
I'm employed by Red Hat and I work on the OpenStack project full-time.

00:08:22.000 --> 00:08:27.080
So I'm focusing primarily on making OpenStack easier to use and install.

00:08:27.080 --> 00:08:32.540
And I'm also working on a workflow service within OpenStack, which is quite an interesting project.

00:08:32.540 --> 00:08:33.500
I think that's really good.

00:08:33.500 --> 00:08:39.040
OpenStack is really a great example of Python doing major stuff.

00:08:39.040 --> 00:08:42.140
And it's a great contribution, but it is a little bit hard to install,

00:08:42.140 --> 00:08:44.940
especially if I just want to run it natively on my Mac or something.

00:08:45.260 --> 00:08:46.580
It's challenging, right?

00:08:46.580 --> 00:08:47.220
Oh, absolutely.

00:08:47.220 --> 00:08:51.320
I mean, I think the problem with OpenStack or one of the problems with OpenStack is

00:08:51.320 --> 00:08:53.680
it's such a wide range of different projects.

00:08:53.680 --> 00:08:57.180
There's no two OpenStack installations that are actually the same.

00:08:57.180 --> 00:09:00.580
Some people care about containers or some people can care about VMs.

00:09:00.580 --> 00:09:04.860
Other people can care about storage, distributed storage, that kind of thing.

00:09:04.860 --> 00:09:06.400
They're all very different.

00:09:06.400 --> 00:09:06.660
Yeah.

00:09:06.660 --> 00:09:09.580
I mean, you're basically installing AWS in a sense, right?

00:09:09.580 --> 00:09:10.620
Yeah, exactly.

00:09:10.620 --> 00:09:12.040
Which is quite the thing.

00:09:12.040 --> 00:09:15.240
And by the way, just S3 is entirely down and the internet is,

00:09:15.240 --> 00:09:15.960
is in chaos today.

00:09:15.960 --> 00:09:17.040
So that's quite something.

00:09:17.040 --> 00:09:19.440
I'm really glad our recording is working.

00:09:19.440 --> 00:09:20.200
That's great.

00:09:20.200 --> 00:09:21.820
All right.

00:09:21.820 --> 00:09:23.600
So let's talk about code reviews.

00:09:23.600 --> 00:09:29.460
So first of all, let's start with who should be doing code reviews.

00:09:29.700 --> 00:09:31.560
Like, are these big enterprises?

00:09:31.560 --> 00:09:33.500
Is this open source?

00:09:33.500 --> 00:09:35.560
Like, who should care about this?

00:09:35.560 --> 00:09:37.400
I think everyone should be doing code review.

00:09:37.400 --> 00:09:41.560
Really, the only reason I can think of to not do code review it, and that would be that you

00:09:41.560 --> 00:09:43.500
are the sole developer on the project.

00:09:43.500 --> 00:09:46.920
And obviously, then it's kind of tricky to have a peer review.

00:09:47.580 --> 00:09:52.020
Most of the time, I'm involved in open source projects and that kind of environment.

00:09:52.020 --> 00:09:57.120
But I think code review is something that should be in the enterprise and all companies as well.

00:09:57.120 --> 00:10:02.740
And I think, actually, it's probably more common in open source just because of the nature of how people communicate and collaborate.

00:10:02.980 --> 00:10:03.460
Yeah, okay.

00:10:03.460 --> 00:10:05.560
So I tend to agree with you.

00:10:05.560 --> 00:10:15.580
I mean, I guess if you're on a small team, you work at like a small company, and you have one project, maybe there's some other developers, but they have their other project, and you don't really cross over.

00:10:15.580 --> 00:10:24.680
It might be a little bit tough to do code reviews, especially if one guy is a C++ person and another person is a Python person or something where they don't know deeply what they're looking at.

00:10:24.680 --> 00:10:25.820
That's a fair comment.

00:10:25.820 --> 00:10:29.620
But you're missing out on an opportunity when you're looking at situations like that.

00:10:29.760 --> 00:10:35.680
Perhaps the Python person becomes ill or leaves the company if nobody else knows what they've been doing, then you're in trouble.

00:10:35.680 --> 00:10:41.020
At least if they've had a light code review process, they might not need to be as in-depth as in some other situations.

00:10:41.020 --> 00:10:43.080
They will have some idea of what's going on.

00:10:43.080 --> 00:10:44.520
Yeah, I think that's a really good point.

00:10:44.520 --> 00:10:52.580
You also actually pointed out some scenarios where it might make sense, even as a solo developer, to do your own code reviews.

00:10:52.580 --> 00:10:57.160
Yeah, so this is kind of an interesting thing, which I just stumbled on by mistake.

00:10:57.500 --> 00:11:00.780
I do some work on one of the documentation projects used in Python.

00:11:00.780 --> 00:11:02.100
It's called mkdocs.

00:11:02.100 --> 00:11:05.040
And it's a fairly popular project on GitHub.

00:11:05.040 --> 00:11:06.780
There's quite a lot of people watching the repo.

00:11:06.780 --> 00:11:08.860
And I was just hacking away on it.

00:11:08.860 --> 00:11:18.340
And I opened a pull request onto the project just because I wanted to trigger the Travis build and make sure things passed and were working before I merged it, just to avoid myself making any errors.

00:11:18.620 --> 00:11:24.420
But in the process of doing that, I left the pull request open for maybe six hours or half a day.

00:11:24.420 --> 00:11:27.760
And somebody came along and actually made a comment on it and made a suggestion.

00:11:27.760 --> 00:11:37.220
So it's just by including that process in something that I'm working on, even if I'm planning to just merge it myself anyway, it gives other people an opportunity to get involved.

00:11:37.400 --> 00:11:40.060
And it actually helped me find new contributors as well.

00:11:40.060 --> 00:11:40.980
Oh, yeah, that's really cool.

00:11:40.980 --> 00:11:42.300
So especially if you have open source.

00:11:42.300 --> 00:11:54.440
But really, if you have a repo that other people are watching, going through the whole workflow, even if it's just a cursory sort of review, lets them know there's like this milestone, like a feature is fixed.

00:11:54.680 --> 00:11:56.940
And here's the code that fixes that feature, right?

00:11:56.940 --> 00:11:57.240
Yeah.

00:11:57.240 --> 00:12:10.340
And also, if you have your CI integrated in that, it will avoid you making any sort of silly mistakes where you've accidentally missed a file or added a file because your test will run against that pull request as well.

00:12:10.340 --> 00:12:11.120
Yeah, yeah, absolutely.

00:12:11.120 --> 00:12:18.260
So do you follow or subscribe to the GitFlow style with feature branches and stuff and PRs?

00:12:18.260 --> 00:12:22.360
How do you guys work together at OpenStack?

00:12:22.520 --> 00:12:24.300
We basically do master development.

00:12:24.300 --> 00:12:30.440
Every patch goes into master and then we've got stable branches for releases that are still receiving updates.

00:12:30.440 --> 00:12:34.300
It's a much lighter workflow than something like GitFlow.

00:12:34.300 --> 00:12:40.960
I find that GitFlow might work well in a company where you can force everyone to follow the same conventions easily.

00:12:40.960 --> 00:12:50.640
But in an open source project, I don't think long lasting branches tend to work very well because they just get out of sync and there's different problems going on or they get forgotten about.

00:12:50.640 --> 00:12:57.080
So I prefer everything just to go into master as soon as possible, but keeping master as stable as possible as well.

00:12:57.080 --> 00:12:58.740
Yeah, I think that's a really interesting point.

00:12:58.740 --> 00:12:59.720
And I've worked both ways.

00:12:59.720 --> 00:13:04.460
I've worked in a company where we basically agreed to do the GitFlow stuff.

00:13:04.460 --> 00:13:16.320
So every change has its own branch, like a feature branch or a bug fix branch, and then you do a pull request back to the dev or main or whatever to have someone else review it on the way back in.

00:13:16.320 --> 00:13:20.680
But I've also worked in the – basically, we've got a dev branch and a releases branch.

00:13:20.680 --> 00:13:24.540
And we just push, you know, merge over to the releases every now and then.

00:13:24.540 --> 00:13:25.820
I don't know.

00:13:25.820 --> 00:13:26.320
I've torn.

00:13:26.440 --> 00:13:28.100
Like they're both – they both have their advantages.

00:13:28.100 --> 00:13:39.640
One of the things I see about the second one, the latter one, like what you described you're doing is the closer you are to dev on your branch or what you're doing, the less merge pain you're going to have.

00:13:39.640 --> 00:13:44.220
Like a friend of mine describes sort of being branched as credit card debt.

00:13:45.160 --> 00:13:46.760
A little bit of credit card debt is fine.

00:13:46.760 --> 00:13:51.560
If you let it build up for six months, there's going to be a reckoning when you try to fix it, right?

00:13:51.560 --> 00:13:52.420
Yeah, absolutely.

00:13:52.420 --> 00:13:58.380
And I think if people are using longer-running branches, then as long as you're rebasing, then you're maybe avoiding most of the problems.

00:13:58.380 --> 00:13:58.980
That's right.

00:13:58.980 --> 00:14:12.100
So if you take the dev branch and you merge it into your feature branch every now and then to like keep – basically to keep that time, the work that's been done from the time that you're working on your code to what you're going to check in minimum, that's great.

00:14:12.720 --> 00:14:23.820
Okay, so in my mind, I guess code reviews are obviously about finding bugs or making sure that you follow certain procedures for, say, security reasons.

00:14:23.820 --> 00:14:31.580
But you actually said there's a lot to do with like code quality and mentoring and a lot of things.

00:14:31.580 --> 00:14:32.840
So like what are some of the benefits?

00:14:32.840 --> 00:14:34.980
Yeah, so this is actually quite an interesting point.

00:14:34.980 --> 00:14:40.160
There's a paper which is called Expectations, Outcomes, and Challenges of Modern Code Review.

00:14:40.160 --> 00:14:45.820
This is one of the first academic papers I read about code review, and it's kind of what led me down this rabbit hole.

00:14:45.820 --> 00:14:48.960
At least I hope I'm remembering the right paper.

00:14:48.960 --> 00:14:50.600
This data might be from another one.

00:14:50.600 --> 00:14:54.220
We'll put all the papers, the links to the papers, and people can find the references.

00:14:54.220 --> 00:15:02.940
Somebody had done some research with Microsoft, and what they'd done is they'd done a questionnaire for the developers before and after the code review process.

00:15:02.940 --> 00:15:09.100
And they were just finding out why they were doing code review, what they were expecting to get out of code review, and the motivations.

00:15:09.980 --> 00:15:25.940
And while most of the developers actually stated their primary motivation was to find bugs and find problems, when they took the outcomes of code review, so they looked at the comments and all the different feedback that was in a code review, then they manually classified it based on all the different things that were coming out of it.

00:15:25.940 --> 00:15:29.940
They actually found out that bug finding was much smaller.

00:15:29.940 --> 00:15:38.640
While bug finding was still important, it was a much smaller piece of the overall code review process, and there were a lot of other benefits that you'd get out of it as well.

00:15:38.640 --> 00:15:39.060
I see.

00:15:39.100 --> 00:15:43.180
Yeah, they probably started out the same sort of mental model, like, okay, how well did we do finding bugs?

00:15:43.180 --> 00:15:45.760
And like, oh, wait, all these other good things came out of it.

00:15:45.760 --> 00:15:45.960
Wow.

00:15:45.960 --> 00:15:46.360
Yeah.

00:15:46.360 --> 00:15:55.380
Yeah, and I think this is part of why a lot of people don't enjoy code review is because if you're going in just to find bugs, you're kind of going in with a negative stance.

00:15:55.380 --> 00:15:57.840
You're thinking, what can I find that's wrong with this?

00:15:57.840 --> 00:15:58.760
What can I find that's broken?

00:15:58.760 --> 00:15:59.220
It's not.

00:15:59.220 --> 00:16:01.080
It's a slightly different process.

00:16:01.080 --> 00:16:05.580
But what they actually found was the biggest outcome was a code improvement.

00:16:05.580 --> 00:16:10.600
So this is kind of subtle to a bug because the code that was up for review was valid, and it worked.

00:16:10.600 --> 00:16:16.220
But actually, based on the feedback and the iteration that went on in the code review, they ended up with a better solution in the end.

00:16:16.220 --> 00:16:19.920
And then there's understanding and shared knowledge between the teams.

00:16:19.920 --> 00:16:25.520
So it's about having awareness of what other people are doing on different projects or different areas of the code base.

00:16:25.520 --> 00:16:26.000
Okay.

00:16:26.000 --> 00:16:26.980
Interesting.

00:16:26.980 --> 00:16:27.360
Yeah.

00:16:27.460 --> 00:16:34.160
So you had some interesting quotes, like one from Jeff Atwood, the creator of Stack Overflow, about the value.

00:16:34.160 --> 00:16:36.060
And it's also one from Steve McDonnell, right?

00:16:36.060 --> 00:16:41.300
So yeah, Jeff Atwood, who a lot of people will know, he wrote a blog about code review a while ago.

00:16:41.300 --> 00:16:47.380
And he basically said that the hardest thing about doing code review is finding somebody that you trust enough to do the code review with.

00:16:47.380 --> 00:16:56.780
But once you actually get into the process, you'll find that every minute you spend in code review is paid back tenfold, which is a really huge sort of payback for your time investment.

00:16:57.040 --> 00:16:58.120
Yeah, that sounds like a good investment.

00:16:58.120 --> 00:17:00.360
And then the one from Steve McDonnell.

00:17:00.360 --> 00:17:06.200
So he was basically, in his book, Code Complete, he compared the detection rate.

00:17:06.200 --> 00:17:09.000
So how often you're finding bugs in your reviews.

00:17:09.000 --> 00:17:15.360
And in their study, they found out that unit tests had a 25% chance of catching bugs.

00:17:15.360 --> 00:17:17.680
Function tests had a 35% chance.

00:17:17.680 --> 00:17:19.700
Integration tests, 45% chance.

00:17:20.080 --> 00:17:23.720
But then code reviews were actually between 55% and 60%.

00:17:23.720 --> 00:17:26.160
So I'm not sure I completely buy those numbers.

00:17:26.160 --> 00:17:30.900
But I mean, just even think that code review is just as valuable as your unit tests is quite something.

00:17:30.900 --> 00:17:32.820
I mean, I couldn't live without my unit tests.

00:17:33.060 --> 00:17:34.560
Yeah, it certainly is interesting.

00:17:34.560 --> 00:17:38.680
And that book, Code Complete by Steve McDonnell, it's really, it's quite a book.

00:17:38.680 --> 00:17:43.540
It really has a lot of wisdom, a lot of things like backed up by studies and numbers.

00:17:43.540 --> 00:17:49.780
And so if you haven't seen that book and you're kind of into this process stuff a little bit, definitely check it out.

00:17:50.140 --> 00:17:56.100
So the fact that you get better bug coverage than unit testing, that's pretty interesting.

00:17:56.100 --> 00:18:06.480
Also, how do you feel like unit testing contributes to mentoring and better understanding and sort of team understanding versus, say, like code review?

00:18:06.480 --> 00:18:09.160
I feel like you would get more of that out of a code review, right?

00:18:09.160 --> 00:18:11.640
Because you're actually talking, not just writing tests.

00:18:11.640 --> 00:18:12.300
Yeah, absolutely.

00:18:12.300 --> 00:18:21.140
So one of the things I covered in my talk was the issues with the sort of the quotes that I gave is they are very focused on bug detection and defection rate.

00:18:21.140 --> 00:18:24.880
And as you said, there's a lot more to code review, which I cover as well.

00:18:24.880 --> 00:18:29.600
I think the reason that paper is covered in the bugs is bugs are sort of an absolute thing.

00:18:29.600 --> 00:18:30.800
Something is a bug or it isn't.

00:18:30.800 --> 00:18:32.020
So it's very easy to measure.

00:18:32.020 --> 00:18:40.800
You can see how many bugs have been reported, whereas all of the other benefits, they tend to be a lot softer and a lot harder to actually get a tangible measurement of.

00:18:40.800 --> 00:18:45.000
Yeah, like that example of what if the Python guy gets hit by a bus, right?

00:18:45.000 --> 00:18:49.060
Your company is more anti-fragile if you do these types of things, right?

00:18:49.060 --> 00:18:56.820
It can withstand these problems, whereas I guess it's obvious, like the user can't log in and you get a 500 error on the server.

00:18:56.820 --> 00:18:58.780
Okay, well, that's a bug, obviously, right?

00:18:58.780 --> 00:19:01.800
But you can say, well, we could have missed this with, we could have saved this with a test.

00:19:01.800 --> 00:19:04.260
But also, like, our team works better together.

00:19:04.260 --> 00:19:09.840
Our team has a better understanding of what each other is doing and the tradeoffs they're making and so on.

00:19:10.260 --> 00:19:11.580
You can't really test for that.

00:19:11.580 --> 00:19:12.620
No, not at all.

00:19:18.520 --> 00:19:30.860
This portion of Talk Python To Me has been brought to you by Rollbar.

00:19:31.220 --> 00:19:34.400
One of the frustrating things about being a developer is dealing with errors.

00:19:34.400 --> 00:19:42.580
Ah, relying on users to report errors, digging through log files trying to debug issues, or a million alerts just flooding your inbox and ruining your day.

00:19:42.700 --> 00:19:49.820
With Rollbar's full-time error monitoring, you'll get the context, insights, and control that you need to find and fix bugs faster.

00:19:49.820 --> 00:19:51.520
It's easy to install.

00:19:51.520 --> 00:19:55.760
You can start tracking production errors and deployments in eight minutes or even less.

00:19:55.760 --> 00:20:05.140
Rollbar works with all the major languages and frameworks, including the Python ones, such as Django, Flask, Pyramid, as well as Ruby, JavaScript, Node, iOS, and Android.

00:20:05.140 --> 00:20:14.340
You can integrate Rollbar into your existing workflow, send error alerts to Slack or HipChat, or even automatically create issues in Jira, Pivotal Tracker, and a whole bunch more.

00:20:14.340 --> 00:20:17.680
Rollbar has put together a special offer for Talk Python To Me listeners.

00:20:17.960 --> 00:20:23.380
Visit Rollbar.com slash Talk Python To Me, sign up, and get the bootstrap plan free for 90 days.

00:20:23.380 --> 00:20:26.440
That's 300,000 errors tracked all for free.

00:20:26.440 --> 00:20:30.160
But hey, just between you and me, I really hope you don't encounter that many errors.

00:20:30.160 --> 00:20:36.160
Loved by developers at awesome companies like Heroku, Twilio, Kayak, Instacart, Zendesk, Twitch, and more.

00:20:36.160 --> 00:20:37.780
Give Rollbar a try today.

00:20:37.780 --> 00:20:40.380
Go to Rollbar.com slash Talk Python To Me.

00:20:40.380 --> 00:20:50.660
Yeah, so how do you feel like automation fits into this?

00:20:50.660 --> 00:20:54.160
So like continuous integration and whatnot?

00:20:54.160 --> 00:20:58.000
So I really strongly believe that you should automate as much as possible.

00:20:58.000 --> 00:21:02.260
Anything that can be automated that isn't is essentially wasting your time.

00:21:02.260 --> 00:21:06.060
And for most people, their time is the most precious thing.

00:21:06.480 --> 00:21:09.480
So this means that you should be automating your linting.

00:21:09.480 --> 00:21:12.540
So this is like your PEP 8 checking or your FLAC8.

00:21:12.540 --> 00:21:20.620
Yeah, you had an interesting quote where you said something to the effect of this whole thing often gets set up as an adversarial sort of relationship.

00:21:20.620 --> 00:21:22.860
Like, okay, these guys sit on the side of that table.

00:21:22.860 --> 00:21:23.580
You sit here.

00:21:23.580 --> 00:21:26.840
We're going to review and tell you what you did wrong and how you need to fix it.

00:21:28.360 --> 00:21:37.300
And one of the things that code reviews are supposed to do is like say, well, you're not following this coding convention or you didn't do this thing.

00:21:37.300 --> 00:21:40.380
You know, you didn't document this or name this correctly or whatever.

00:21:40.380 --> 00:21:40.780
Right.

00:21:40.780 --> 00:21:44.300
And if that comes from a human, it seems super nitpicky.

00:21:44.300 --> 00:21:51.240
But if it comes from a machine, everybody is sort of subjected to the thing absolutely uniformly.

00:21:51.240 --> 00:21:56.360
So you're like, oh, yeah, FLAC8 told me that should have an underscore and not camel case or whatever.

00:21:56.560 --> 00:21:56.760
Right.

00:21:56.760 --> 00:21:57.500
Yeah, absolutely.

00:21:57.500 --> 00:22:00.100
The sort of the feedback from an automated machine.

00:22:00.100 --> 00:22:05.940
So in terms of also including verifying the tests are running, it doesn't feel negative.

00:22:05.940 --> 00:22:08.580
It doesn't feel like the code is judging you.

00:22:08.580 --> 00:22:19.080
But sometimes if somebody comes along and reviews something that you've been spending a lot of time on that, but then they just point out different small little things that they think would be slightly nicer formatting, then that can be infuriating.

00:22:19.080 --> 00:22:21.800
Yeah, I think it's infuriating, but it also can't be anyway.

00:22:22.140 --> 00:22:31.500
But I think the other part that is there is if your job is to be the reviewer, you don't want to spend your time going, yeah, you named that wrong.

00:22:31.500 --> 00:22:32.680
Yeah, that needs a comment.

00:22:32.680 --> 00:22:33.980
Yeah, that needs a doc string.

00:22:34.100 --> 00:22:39.220
Like that is not that is like a job that robots could do and robots should do.

00:22:39.220 --> 00:22:39.380
Right.

00:22:39.380 --> 00:22:47.220
You should say like, no, no, I think this algorithm is when we scale up, this is not going to scale or this is a stateful thing you're doing.

00:22:47.220 --> 00:22:48.760
That means like we can't load balance it.

00:22:48.760 --> 00:22:49.760
So we need to do that different.

00:22:49.760 --> 00:22:55.500
Like that is the kind of thing people should be contributing to and not spending the energy on camel case, camel case, doc string.

00:22:55.500 --> 00:22:55.900
Yeah.

00:22:55.900 --> 00:22:56.120
Right.

00:22:56.120 --> 00:22:56.340
Yeah.

00:22:56.340 --> 00:23:03.240
So focusing your time on the design and the architecture and the actual solution to the problem is just so much more productive.

00:23:03.240 --> 00:23:03.540
Yeah.

00:23:03.540 --> 00:23:08.620
And so you said you were trying to rename this process to like something other than a review, right?

00:23:08.620 --> 00:23:08.880
Yeah.

00:23:09.420 --> 00:23:12.300
I have a bit of an issue with code review.

00:23:12.300 --> 00:23:15.600
I think review is a slightly negative feeling about it.

00:23:15.600 --> 00:23:19.180
If you think of something like a performance review at work, that's rarely a good thing.

00:23:19.180 --> 00:23:21.960
And your manager says, okay, we need to have a performance review.

00:23:21.960 --> 00:23:27.460
I much prefer to think that it's going to be a code collaboration or a code discussion.

00:23:27.460 --> 00:23:30.140
It's something that you're working on with someone else.

00:23:30.140 --> 00:23:31.860
And I think we should try and encompass that more.

00:23:31.860 --> 00:23:37.560
I don't realistically think we'll ever change the name at this point, but that's how I perceive it in my head at least.

00:23:37.560 --> 00:23:37.800
Yeah.

00:23:37.800 --> 00:23:38.060
Yeah.

00:23:38.060 --> 00:23:38.340
That's cool.

00:23:38.400 --> 00:23:39.540
I think code collaboration.

00:23:39.540 --> 00:23:42.300
To me, maybe code conversation, right?

00:23:42.300 --> 00:23:43.260
Something like this, right?

00:23:43.260 --> 00:23:43.480
Yeah.

00:23:43.480 --> 00:23:44.100
That's awesome.

00:23:44.100 --> 00:23:44.620
Yeah.

00:23:44.620 --> 00:23:56.840
I mean, certainly in the open source space, I feel like these can almost be a conversation starter or an introduction to somebody maintaining an important project.

00:23:56.840 --> 00:24:02.860
Like you can go look at some code, fork it, do some work, and then your pull request like starts the conversation.

00:24:02.860 --> 00:24:06.480
Like here's how I think I can both contribute to your project and improve it.

00:24:06.880 --> 00:24:17.700
And then, you know, you get to know that person a little bit, at least by going through and reviewing their code back and forth on, well, you didn't think about this in our project and you're going to have to account for it and so on.

00:24:17.700 --> 00:24:17.860
Right?

00:24:17.860 --> 00:24:18.140
Yeah.

00:24:18.220 --> 00:24:30.040
And I think it's really important when you submit a change to a project that you state that you want to have feedback.

00:24:30.040 --> 00:24:31.600
I just want you to merge this.

00:24:31.600 --> 00:24:33.800
And I was like, well, you've only just opened this pull request.

00:24:33.800 --> 00:24:35.520
We're only just starting to talk about it.

00:24:35.520 --> 00:24:36.580
I've never seen this before.

00:24:36.580 --> 00:24:39.420
So this is like the start of the conversation.

00:24:39.420 --> 00:24:42.100
And I think both people need to go into it at that point.

00:24:42.500 --> 00:24:49.960
Whereas sometimes somebody's maybe been working for a week on something and they feel like when they opened the pull request, they kind of feel like they've done.

00:24:49.960 --> 00:24:50.880
They feel like they've finished.

00:24:50.880 --> 00:24:52.060
But that's not the case.

00:24:52.060 --> 00:24:52.380
Yeah.

00:24:52.380 --> 00:24:53.620
No, it's the beginning, right?

00:24:53.620 --> 00:24:54.780
The beginning of the conversation.

00:24:55.460 --> 00:24:59.000
What would you recommend to have made that person's experience better?

00:24:59.000 --> 00:25:02.820
Should they have opened an issue and said, I'm going to do a pull request.

00:25:02.820 --> 00:25:03.700
Here are my intentions.

00:25:03.700 --> 00:25:06.700
Here's the problem I've identified and what I think I'm going to do.

00:25:06.700 --> 00:25:12.280
I'm sort of personally torn because on one hand, actions speak much louder than words.

00:25:12.280 --> 00:25:15.800
Like here is the code that I have written that will fix this for you.

00:25:15.800 --> 00:25:19.960
Puts you in a different place than somebody who opens an issue and sort of like almost complaining.

00:25:19.960 --> 00:25:20.440
Right?

00:25:20.440 --> 00:25:24.340
So they come with more credibility, but at the same time, they put a lot of energy into it.

00:25:24.360 --> 00:25:26.840
And they may have gone in a path that was incongruent with what you're doing.

00:25:26.840 --> 00:25:27.060
Right?

00:25:27.060 --> 00:25:27.700
So what do you think?

00:25:27.700 --> 00:25:28.080
Yeah.

00:25:28.080 --> 00:25:31.200
So I think in this case, you just need to judge it yourself.

00:25:31.200 --> 00:25:31.460
Really?

00:25:31.460 --> 00:25:32.840
There isn't a standard answer.

00:25:32.840 --> 00:25:35.340
Sometimes what you're working on is fair.

00:25:35.340 --> 00:25:36.300
It seems fairly obvious.

00:25:36.300 --> 00:25:37.700
So it's fairly small and contained.

00:25:37.700 --> 00:25:40.380
And then you should just go ahead and do the pull request.

00:25:40.380 --> 00:25:46.760
But if you feel like there's maybe more discussion, you're not sure about how it should work, then it's better to go towards an issue first.

00:25:46.760 --> 00:25:50.980
I do think that sometimes it's actually easier to express what you want to do in code.

00:25:50.980 --> 00:25:52.220
Like you're just messing around.

00:25:52.880 --> 00:25:55.440
So I think it's also fine to just go straight to the pull request.

00:25:55.440 --> 00:26:01.860
But you should just always have the expectation that this is a very first draft and it will change or it could change.

00:26:01.860 --> 00:26:02.280
Yeah.

00:26:02.280 --> 00:26:05.820
I think maybe think of it as like a draft of a paper sort of thing.

00:26:05.820 --> 00:26:07.740
It's a pretty interesting way to think about code.

00:26:07.740 --> 00:26:07.940
Right?

00:26:07.940 --> 00:26:09.080
Okay.

00:26:10.000 --> 00:26:13.260
So when you're authoring changes, don't start with a code.

00:26:13.260 --> 00:26:14.500
Well, what should you start with?

00:26:14.500 --> 00:26:16.320
You should either be starting.

00:26:16.320 --> 00:26:25.560
Well, you can start with the code if you want to, but it's always good to start with a discussion first on an issue or sort of a bug report somewhere where you can actually flesh out what it's going to be.

00:26:25.940 --> 00:26:29.600
But that isn't always needed if it's going to be a much smaller change in the end.

00:26:29.600 --> 00:26:29.860
Yeah.

00:26:30.040 --> 00:26:36.300
Also, you know, understanding the context of where that person's coming from, where the project is.

00:26:36.300 --> 00:26:36.940
Right?

00:26:37.000 --> 00:26:42.500
Like on one hand, you might, it would be very easy to look at one algorithm and go, this algorithm does everything in memory.

00:26:42.500 --> 00:26:44.440
It loads it all up, all this data up at once.

00:26:44.440 --> 00:26:45.940
And it's going to be super slow.

00:26:45.940 --> 00:26:46.820
We can't do this.

00:26:46.820 --> 00:26:48.700
Well, that's true if you have a billion records.

00:26:48.700 --> 00:26:51.020
If you have 20, it's totally fine.

00:26:51.020 --> 00:26:53.240
And the billion record solution would actually make it worse.

00:26:53.240 --> 00:26:53.420
Right?

00:26:53.420 --> 00:26:55.500
So understanding context, I think, is super important.

00:26:55.500 --> 00:26:55.760
Yeah.

00:26:55.760 --> 00:27:01.180
And when you actually provide a change, it's really useful to tell people both why you were doing something.

00:27:01.180 --> 00:27:03.460
Sorry, what you were doing and why you were doing it.

00:27:03.620 --> 00:27:08.240
I quite often see commit messages or pull requests that only really cover one of the two.

00:27:08.240 --> 00:27:14.240
And I think you really need to understand both as a reviewer to really give a thorough review to that code.

00:27:14.240 --> 00:27:14.920
Yeah, for sure.

00:27:14.920 --> 00:27:17.500
I think, obviously, you have to keep that in mind no matter what.

00:27:17.500 --> 00:27:24.960
But I feel like in open source, you don't necessarily know how people are using your code as opposed to, like, within your company, like, well, it's that website.

00:27:24.960 --> 00:27:26.240
We know what we're doing.

00:27:26.240 --> 00:27:27.260
We know what the traffic is.

00:27:27.260 --> 00:27:28.600
We know how that's going to look.

00:27:28.600 --> 00:27:28.840
Right?

00:27:28.900 --> 00:27:36.760
So it seems almost more important in the open source, open space world rather than confined behind your company's wall.

00:27:36.760 --> 00:27:37.360
Yeah, absolutely.

00:27:37.360 --> 00:27:42.300
So say, for example, you need to add a new sort of method to a function for some reason.

00:27:42.300 --> 00:27:48.260
If you just write in your pull request, added parameter A to this function, then that's not very useful.

00:27:48.260 --> 00:27:50.140
You need to also explain why you're doing that.

00:27:50.140 --> 00:27:52.040
What is the actual advantage to this as well?

00:27:52.040 --> 00:27:54.600
Yeah, and how you're not going to break everybody's code by doing it.

00:27:54.600 --> 00:27:54.840
Yeah.

00:27:54.840 --> 00:28:09.160
Another interesting piece of research that you pulled out, something from Mozilla, was people actually find more issues and give better feedback on small changes, small PRs and so on, rather than large ones.

00:28:09.160 --> 00:28:11.800
Even though the large one surely has more things to address.

00:28:11.800 --> 00:28:15.560
This happens because reviewers are just overwhelmed by a big change.

00:28:15.880 --> 00:28:18.040
And I actually seen someone tweet about this.

00:28:18.040 --> 00:28:25.000
Basically, they decided that they should just submit bigger changes because people do less thorough reviews and they get their code in more easily.

00:28:25.000 --> 00:28:26.860
Sneak it back.

00:28:26.860 --> 00:28:28.960
Yeah, that's obviously not the idea here.

00:28:28.960 --> 00:28:37.440
So if you can just keep your changes really sort of contained to one particular thing, one particular issue, and ideally touching less files within the project.

00:28:37.440 --> 00:28:39.840
Although, obviously, sometimes you need to touch multiple files.

00:28:39.840 --> 00:28:45.300
It just makes it easier for someone to review and get their mind around it and really understand what's going on.

00:28:45.300 --> 00:28:57.120
And I think that's why the smaller changes then get a much more valuable review, whereas the bigger changes, they tend to nitpick at different things, but they've maybe not quite been able to wrap their head around everything that's going on in this review.

00:28:57.120 --> 00:29:06.560
Yeah, so do you recommend sort of having one concept per check-in type of thing rather than, I did all my work for the day, so I'm done, so I checked it in.

00:29:06.560 --> 00:29:15.400
But here's this little change I made, then I reformatted this thing, and then I addressed this performance thing over here rather than just all at one shot.

00:29:15.400 --> 00:29:16.700
Would that get better feedback?

00:29:16.700 --> 00:29:19.680
I'd definitely go for splitting that up into multiple reviews.

00:29:20.240 --> 00:29:33.720
I actually find that you mentioned that you reformatted something in that example, and I actually think that can really make it harder to review something because the diff could be 10 times bigger just because they've also reformatted the code at the same time.

00:29:33.720 --> 00:29:39.240
They do that as two individual changes, and you can actually see, okay, this is where they've actually made the functional change.

00:29:39.240 --> 00:29:41.140
This one's just laid out.

00:29:41.140 --> 00:29:42.040
Okay, they're both fine.

00:29:42.040 --> 00:29:45.200
Something like this can depend a bit based on the tool that you're using.

00:29:45.480 --> 00:29:52.360
So if you're using a GitHub pull request, if you just have two commits in your pull request, then that would be fairly easy to review in that case.

00:29:52.360 --> 00:29:56.160
But something like Garrett, which only allows one package at a time, it's a bit tricky.

00:29:56.160 --> 00:29:56.960
Yeah, sure.

00:29:56.960 --> 00:30:00.840
What do you think, what contribution to this do you think GitHub has made?

00:30:00.840 --> 00:30:10.300
How important is all of this sort of well-known, commonly used infrastructure that is kind of GitHub.com for code review, code collaboration?

00:30:10.300 --> 00:30:12.340
Do you think the tools are adjacent?

00:30:12.340 --> 00:30:13.540
I think they're reasonably good.

00:30:13.700 --> 00:30:20.660
They've actually made some changes over the last, I can't remember when exactly, but I think over the last six months or so, they added a whole bunch of features.

00:30:20.660 --> 00:30:25.760
And at least some of them appear to be inspired by Garrett and maybe other code review tools as well.

00:30:25.760 --> 00:30:28.200
I think they're improving the process.

00:30:28.200 --> 00:30:31.720
Originally, I think it was almost too simple.

00:30:31.720 --> 00:30:34.920
But actually, for small projects, it seems to work quite well.

00:30:35.080 --> 00:30:43.820
When you see larger projects on GitHub using pull requests as their primary code review, they tend to come up with a very complicated system on top of that with labels.

00:30:43.820 --> 00:30:50.680
Or they maybe, I think Facebook has bots on all their different projects that are like progressing things on and sort of marking them as failed or not.

00:30:50.680 --> 00:30:56.520
So yeah, I think they've done a great job in making code review accessible to everyone to at least a degree.

00:30:56.720 --> 00:30:59.580
But yeah, I still think there's space for improvement there.

00:30:59.580 --> 00:31:00.280
Yeah, it's interesting.

00:31:00.280 --> 00:31:15.320
I mean, it's not necessarily true that the code that, you know, say you guys are using for OpenStack or Python is using for CPython is necessarily the best same set of tools for people with a thousand line project.

00:31:15.700 --> 00:31:16.020
Right.

00:31:16.020 --> 00:31:21.820
Like there's overhead in these bigger things that the smaller ones would actually suffer from it being there.

00:31:21.820 --> 00:31:23.240
So it's always a tension, right?

00:31:23.240 --> 00:31:23.760
Yeah, absolutely.

00:31:23.760 --> 00:31:29.560
I mean, so we use Garrett for OpenStack and it's a Python open source project.

00:31:29.560 --> 00:31:30.860
So that's quite nice.

00:31:30.860 --> 00:31:33.180
In all honesty, it is very hard to use.

00:31:33.180 --> 00:31:37.660
It's also extremely ugly and it takes a long time to just get used to using it.

00:31:37.660 --> 00:31:40.560
But once you do get to that point, I find it really good.

00:31:40.560 --> 00:31:43.760
Whereas GitHub, I feel like that's maybe the opposite.

00:31:44.040 --> 00:31:49.140
Whereas it's really easy to use, but you start to hit up on the limitations of it fairly quickly.

00:31:49.140 --> 00:31:52.620
Yeah, I think that's totally, totally correct.

00:31:52.620 --> 00:31:58.420
So, I mean, even simple stuff as like nested issues or to-dos, right?

00:31:58.420 --> 00:32:04.500
Like I'm not even sure if GitHub supports those, but it can be like, well, we want to do this thing, but there's actually five things we have to do to make that happen, right?

00:32:04.500 --> 00:32:05.420
That could be important.

00:32:06.340 --> 00:32:06.640
Okay.

00:32:06.640 --> 00:32:17.680
Now, you talked about how if you're the reviewer, you shouldn't see this as like I'm assigning a grade or judging this person's code, but maybe think of it as like a shared responsibility with the author.

00:32:18.500 --> 00:32:21.620
And you had a nice picture of like bunnies or guinea pigs or something.

00:32:21.620 --> 00:32:24.360
Yeah, it was a guinea pigs.

00:32:24.360 --> 00:32:25.580
I think I found that on Flickr.

00:32:25.580 --> 00:32:26.320
Yeah.

00:32:26.380 --> 00:32:31.400
I think it's really important when you're reviewing something that you take on ownership of that code as well.

00:32:31.780 --> 00:32:38.500
Because effectively, I think the author of the code and the person that's approved and merged it are just as responsible for it ultimately.

00:32:38.500 --> 00:32:45.860
This may not work in practice sometimes because people that submit the changes that get merged, they'll disappear on an open source project, for example.

00:32:45.860 --> 00:32:48.520
You should really be trying to share that responsibility.

00:32:48.520 --> 00:32:58.480
And I think this sort of highlights an issue that you would see with something like Git Blame because you would sometimes use Git Blame to look through the history of a project and see who has written what.

00:32:58.480 --> 00:33:03.140
But that will only ever show you the author or sometimes the merger, depending on how you're doing things.

00:33:03.140 --> 00:33:07.300
It won't show you everyone that's involved in the code review process as well.

00:33:07.300 --> 00:33:10.440
And I think surfacing all these different people is useful.

00:33:10.440 --> 00:33:14.340
As a side, I think Git Blame is a terrible name for the command in general.

00:33:14.340 --> 00:33:19.060
But I think just having something which helps you find everyone that knows about this.

00:33:19.060 --> 00:33:24.040
It's more about finding someone that has the knowledge here rather than finding someone to blame, in my opinion.

00:33:24.040 --> 00:33:25.020
Yeah, I agree.

00:33:25.020 --> 00:33:26.020
I certainly blame.

00:33:27.060 --> 00:33:31.400
While sometimes it feels appropriate, you're like, all right, what is this?

00:33:31.400 --> 00:33:32.120
Who wrote this?

00:33:32.120 --> 00:33:34.240
It's not a real positive thing, right?

00:33:34.240 --> 00:33:35.020
And you're right.

00:33:35.020 --> 00:33:40.840
It only captures the final commit, which it could have actually just been the person who just reformatted it because there was a problem, right?

00:33:40.840 --> 00:33:43.140
It doesn't even necessarily mean they created it.

00:33:43.140 --> 00:33:44.420
Yeah, or moved the code around.

00:33:44.420 --> 00:33:45.080
Yeah, yeah.

00:33:45.080 --> 00:33:45.680
Something like that.

00:33:45.680 --> 00:33:48.560
You also said that code contributions are like puppies.

00:33:49.480 --> 00:33:54.340
Yeah, so the picture of the puppy is actually my dog when she was only a couple of months old.

00:33:54.340 --> 00:33:57.500
But it's quite a nice quote.

00:33:57.500 --> 00:34:00.060
I don't know where it came from, so I can't attribute it correctly.

00:34:00.300 --> 00:34:03.460
But somebody said that code contributions are like puppies.

00:34:03.460 --> 00:34:04.900
Everyone loves them.

00:34:04.900 --> 00:34:06.640
But you need to look after them.

00:34:06.640 --> 00:34:07.420
You've got to walk them.

00:34:07.420 --> 00:34:08.160
You've got to feed them.

00:34:08.160 --> 00:34:09.000
You've got to care for them.

00:34:09.000 --> 00:34:12.160
And this is the same for any code contributions that you receive.

00:34:12.160 --> 00:34:14.400
You need to make sure that they continue to work.

00:34:14.400 --> 00:34:18.860
You need to make sure they're documented and so on until you can deprecate it.

00:34:18.860 --> 00:34:21.620
And that often is quite hard to do in open source projects.

00:34:21.620 --> 00:34:22.180
Absolutely.

00:34:22.180 --> 00:34:24.820
Well, and I think the puppy analogy is nice.

00:34:24.820 --> 00:34:27.600
Like everybody loves them and they're cool when they're nice and cute.

00:34:27.600 --> 00:34:32.940
But, you know, when they're four years old and it's raining and you're busy, do you really want to walk them, right?

00:34:32.940 --> 00:34:36.000
Or do you want to leave the party early because the dog needs to go out?

00:34:36.000 --> 00:34:39.560
It's easy to say, well, I just want to change this behavior a little bit.

00:34:39.560 --> 00:34:40.660
I just want to add this function.

00:34:40.660 --> 00:34:47.180
I just want to like add an overload or a default parameter here and think how hard can that be?

00:34:47.460 --> 00:34:49.020
It's like two lines of code.

00:34:49.020 --> 00:34:49.900
I'll check it in.

00:34:49.900 --> 00:34:51.900
Well, there's the documentation.

00:34:51.900 --> 00:34:56.140
There's that video you recorded showing people how to use it that you have to re-record.

00:34:56.140 --> 00:34:58.260
There's this thing you have to redeploy.

00:34:58.260 --> 00:35:03.400
There's this, these, like they can, the smallest changes can expand in like large ways, right?

00:35:03.400 --> 00:35:11.040
So under, like having somebody who knows that, like it's reviewing and going, you don't really fully appreciate the cascading changes that the small change is going to have, right?

00:35:11.040 --> 00:35:11.220
Yeah.

00:35:11.220 --> 00:35:20.840
And I think it's, it's something that open source maintainers in particular should feel like they can do, they can reject code more basically on this basis.

00:35:20.840 --> 00:35:23.760
I think people quite often feel pressured to accept contributions.

00:35:23.760 --> 00:35:24.960
Right.

00:35:24.960 --> 00:35:25.820
I worked hard on it.

00:35:25.820 --> 00:35:27.260
And so why don't you want to accept it?

00:35:27.260 --> 00:35:27.600
It works.

00:35:27.600 --> 00:35:28.460
It passes the test.

00:35:28.460 --> 00:35:28.980
Yeah.

00:35:28.980 --> 00:35:33.480
But then they then are responsible for looking after that code for forever.

00:35:34.560 --> 00:35:35.200
Yeah, yeah.

00:35:35.200 --> 00:35:49.460
This portion of Talk Python To Me is brought to you by Hired.

00:35:49.460 --> 00:35:52.480
Hired is the platform for top Python developer jobs.

00:35:52.480 --> 00:35:57.300
Create your profile and instantly get access to 3,500 companies who will work to compete with you.

00:35:57.300 --> 00:36:00.160
Take it from one of Hired's users who recently got a job and said,

00:36:00.160 --> 00:36:05.480
I had my first offer on Thursday after going live on Monday and I ended up getting eight offers in total.

00:36:05.480 --> 00:36:08.920
I've worked with recruiters in the past, but they've always been pretty hit and miss.

00:36:08.920 --> 00:36:11.760
I tried LinkedIn, but I found Hired to be the best.

00:36:11.760 --> 00:36:13.860
I really liked knowing the salary up front.

00:36:13.860 --> 00:36:16.220
Privacy was also a huge seller for me.

00:36:16.220 --> 00:36:17.900
Sounds awesome, doesn't it?

00:36:17.900 --> 00:36:19.900
Well, wait until you hear about the sign-in bonus.

00:36:19.900 --> 00:36:23.340
Everyone who accepts a job from Hired gets $1,000 sign-in bonus.

00:36:23.340 --> 00:36:25.980
And as Talk Python listeners, it gets way sweeter.

00:36:26.300 --> 00:36:31.240
Use the link Hired.com slash Talk Python To Me and Hired will double the signing bonus to $2,000.

00:36:31.240 --> 00:36:33.020
Opportunity is knocking.

00:36:33.020 --> 00:36:36.780
Visit Hired.com slash Talk Python To Me and answer the door.

00:36:36.780 --> 00:36:45.520
You know, I had a recent experience with this.

00:36:45.520 --> 00:36:48.800
I suggested some change to pyramid the web framework and they're like, great.

00:36:48.800 --> 00:36:52.940
And if you're willing to be the maintainer of this part of that feature for two years,

00:36:52.940 --> 00:36:54.340
then we're totally happy to accept that.

00:36:54.340 --> 00:36:56.520
Is there a simpler way we can solve this problem?

00:36:56.520 --> 00:36:56.900
Maybe.

00:36:56.900 --> 00:37:00.080
So they subscribe to the puppy philosophy.

00:37:00.080 --> 00:37:00.460
Yeah.

00:37:00.460 --> 00:37:04.040
I mean, it's nice that they were willing to give you that opportunity because actually it's

00:37:04.040 --> 00:37:09.200
quite hard to get to that point of trust with people sometimes because a lot of people might

00:37:09.200 --> 00:37:14.600
promise to support something for two years, but then they'll just disappear shortly after.

00:37:14.600 --> 00:37:15.900
That's right.

00:37:15.900 --> 00:37:16.360
That's right.

00:37:16.680 --> 00:37:21.760
The other thing that I thought was pretty insightful is you said that not just senior

00:37:21.760 --> 00:37:24.400
devs should be reviewing code.

00:37:24.400 --> 00:37:26.380
It shouldn't be a top down, like I'm above you.

00:37:26.380 --> 00:37:31.320
And so I look down on your stuff and I tell you whether it can be approved, but also juniors

00:37:31.320 --> 00:37:34.440
should do review, maybe even a seniors check-ins, right?

00:37:34.440 --> 00:37:37.100
This is a mistake which I've seen in a couple of companies.

00:37:37.100 --> 00:37:38.320
Not recently, actually.

00:37:38.320 --> 00:37:40.600
So hopefully it's sort of a trend that's dying now.

00:37:41.040 --> 00:37:45.100
I've seen cases where only the seniors were allowed to review the code and the juniors

00:37:45.100 --> 00:37:49.860
would then sort of be subject to the review, but they would never get the chance to review

00:37:49.860 --> 00:37:50.320
themselves.

00:37:50.320 --> 00:37:54.400
There was actually a study which found that senior developers were actually doing slightly

00:37:54.400 --> 00:37:57.680
better code reviews just because of their experience.

00:37:57.680 --> 00:38:03.960
They also found that junior developers most quickly improved and most quickly became on par

00:38:03.960 --> 00:38:06.560
with the other seniors by doing code reviews themselves.

00:38:07.100 --> 00:38:11.060
I think that really highlights back to all the other benefits that come out of code review,

00:38:11.060 --> 00:38:12.940
like with the shared knowledge and the shared understanding.

00:38:12.940 --> 00:38:14.860
That's how the juniors become seniors.

00:38:14.860 --> 00:38:15.680
Yeah, absolutely.

00:38:15.680 --> 00:38:17.760
I totally think that's a great idea, a great point.

00:38:17.760 --> 00:38:22.820
Sure, they'll find fewer bugs, potentially, because they don't really know as well to look

00:38:22.820 --> 00:38:23.220
for them.

00:38:23.220 --> 00:38:26.320
Maybe their suggestions will be pushed back upon.

00:38:26.320 --> 00:38:28.520
Like, I suggest you rewrite this in a simple way.

00:38:28.520 --> 00:38:31.180
Well, no, no, it won't scale and we have a million users, so on and so on.

00:38:31.180 --> 00:38:36.680
But even just having that conversation, making them actively think about it and propose those

00:38:36.680 --> 00:38:40.980
changes, whether or not they actually make it through, the value has already been gained

00:38:40.980 --> 00:38:41.560
from that, right?

00:38:41.560 --> 00:38:42.200
Yeah, absolutely.

00:38:42.200 --> 00:38:42.680
Okay.

00:38:42.680 --> 00:38:43.640
Very nice.

00:38:43.640 --> 00:38:46.940
You also said having a review checklist might help.

00:38:46.940 --> 00:38:49.980
It seems to me like that could depersonalize it a little bit.

00:38:49.980 --> 00:38:52.780
Like, look, these are the things we're going to check for, so we're going down the list

00:38:52.780 --> 00:38:54.500
and it's not me being a jerk to you.

00:38:54.500 --> 00:38:55.040
This is a list.

00:38:55.040 --> 00:38:56.000
Like, it applies to me too.

00:38:56.000 --> 00:38:59.280
A code review checklist can be very beneficial because it gets everyone really on the same

00:38:59.280 --> 00:39:03.400
page and everyone's kind of reviewing to the same standard and the same expectations.

00:39:04.120 --> 00:39:07.200
The one thing you need to be careful with is that you don't include anything that could

00:39:07.200 --> 00:39:08.900
be automated because there's temptation.

00:39:08.900 --> 00:39:13.440
It's easier to write something on a sort of a review policy than it is to automate it.

00:39:13.440 --> 00:39:15.880
So you just need to make sure that that doesn't happen.

00:39:15.880 --> 00:39:20.420
But otherwise, I think it's a really good idea for projects to explicitly sort of state what

00:39:20.420 --> 00:39:21.020
they're expecting.

00:39:21.020 --> 00:39:25.300
And this can be useful both for the reviewers and also somebody that is submitting something

00:39:25.300 --> 00:39:27.800
for review because they know what they are working towards.

00:39:27.800 --> 00:39:28.720
Yeah, that's cool.

00:39:29.140 --> 00:39:32.480
Certainly, it seems like you could just build the checklist and go, okay, what of this can

00:39:32.480 --> 00:39:32.980
we automate?

00:39:32.980 --> 00:39:37.280
And we're not going to use this checklist until we've gotten everything that can be automated

00:39:37.280 --> 00:39:37.760
automated.

00:39:37.760 --> 00:39:38.920
Yeah, that's actually a good idea.

00:39:38.920 --> 00:39:41.340
So that'd be a really nice way to build up your priorities.

00:39:41.340 --> 00:39:41.940
Yeah, for sure.

00:39:41.940 --> 00:39:44.740
Like automated linting and things like that.

00:39:44.740 --> 00:39:48.300
We already talked about the bots providing the nitpicky stuff and so on.

00:39:48.300 --> 00:39:51.280
You also suggested possibly having multiple reviewers.

00:39:51.280 --> 00:39:52.060
Yeah.

00:39:52.060 --> 00:39:53.120
Not a one-on-one situation.

00:39:53.280 --> 00:39:57.380
Yes, I think a lot of people actually assume that core review is essentially one-to-one.

00:39:57.380 --> 00:40:00.580
You have one person doing the authoring and one person doing the reviewing.

00:40:00.580 --> 00:40:03.660
You can get real benefits from having multiple reviewers.

00:40:03.660 --> 00:40:06.920
So this is something I hadn't done before working on OpenStack.

00:40:06.920 --> 00:40:12.020
And in OpenStack, every change has to have at least two core reviewers.

00:40:12.020 --> 00:40:16.920
And also then they'll often have other reviewers that are just community members that are interested.

00:40:17.360 --> 00:40:21.360
So every change is, I actually looked at the numbers at one point, every change on average

00:40:21.360 --> 00:40:24.060
was getting between three and five people reviewing it.

00:40:24.060 --> 00:40:28.960
So they were a huge number, but only two of those were going to be in-depth reviews.

00:40:28.960 --> 00:40:34.100
And it's just really surprising to me how often I will review something and then someone else

00:40:34.100 --> 00:40:37.100
will come along and review and actually see something that I missed.

00:40:37.100 --> 00:40:40.780
It helps multiply the benefits of the shared knowledge and the shared understanding.

00:40:40.780 --> 00:40:43.580
It also takes the pressure off code review.

00:40:43.580 --> 00:40:47.980
So you can not feel like you're the only person that's verifying this.

00:40:47.980 --> 00:40:51.460
You don't feel as responsible, but you share that more.

00:40:51.460 --> 00:40:52.780
It's not like you're the goalie.

00:40:52.780 --> 00:40:55.240
And if it goes past you, it's over, right?

00:40:55.240 --> 00:40:55.800
Yeah, exactly.

00:40:55.800 --> 00:40:56.340
Interesting.

00:40:56.340 --> 00:40:59.040
Yeah, definitely talked about the short reviews.

00:40:59.040 --> 00:41:06.620
Do you think it would be beneficial to kind of reverse that as well and have multiple contributors?

00:41:06.620 --> 00:41:10.920
So if I'm submitting a patch, this probably works better in a corporate space.

00:41:10.920 --> 00:41:16.220
But if I'm submitting a patch and it's getting reviewed, I also have to like sit in on the review,

00:41:16.220 --> 00:41:22.100
maybe be a reviewer, maybe just observe someone else's code being reviewed as well.

00:41:22.100 --> 00:41:26.040
Like having that other side of the story not be one to many.

00:41:26.040 --> 00:41:30.240
And that sounds a little bit like doing pair programming in maybe an asynchronous way.

00:41:30.240 --> 00:41:32.920
So you have multiple people contributing to the project.

00:41:33.060 --> 00:41:38.500
And I think that can work well, but it does probably require that you know people a bit more.

00:41:38.500 --> 00:41:42.100
So this is something that I do see happen in OpenStack fairly often.

00:41:42.100 --> 00:41:48.040
Some of my colleagues, if I see that they've got a review up and then there's a small addition or something else that I can make to it,

00:41:48.040 --> 00:41:49.680
I'll just push a change to that.

00:41:49.680 --> 00:41:53.140
I guess it also requires the tooling to support this.

00:41:53.260 --> 00:41:58.640
It wouldn't be quite tricky in GitHub, for example, because you'd have to send a pull request to the branch,

00:41:58.640 --> 00:42:01.360
which is the original pull request, and it becomes a message.

00:42:01.360 --> 00:42:02.520
Yeah, yeah, yeah.

00:42:02.520 --> 00:42:08.220
I'm certainly thinking like this is a place where you guys sit down over like a shared projector and have this conversation.

00:42:08.220 --> 00:42:09.140
You know, something like that.

00:42:09.140 --> 00:42:12.340
They get, you know, pure open source where it's all asynchronous.

00:42:12.340 --> 00:42:13.480
I'm not sure it makes any sense.

00:42:13.480 --> 00:42:19.360
I work from home remotely, so I always think about everything as being async and whatnot.

00:42:19.360 --> 00:42:21.600
Yeah, yeah, same here.

00:42:21.600 --> 00:42:22.740
I work from my house as well.

00:42:22.740 --> 00:42:25.880
Okay, so all that stuff is really interesting.

00:42:25.880 --> 00:42:30.020
Now, we talked a little bit on the tools that you might use to make this work.

00:42:30.020 --> 00:42:34.020
So we've got Garrett, which is open source Python.

00:42:34.020 --> 00:42:35.700
It's like a web app that you install.

00:42:35.700 --> 00:42:39.980
Do you like connect it to your Git repo and it watches the branches or how does that work?

00:42:40.200 --> 00:42:44.640
There are integrations for GitHub, which I've not actually used them very often.

00:42:44.640 --> 00:42:50.060
But the way you interact with Garrett is with a Git plugin, which is actually also written in Python.

00:42:50.060 --> 00:42:57.300
So you pip install a project called git-review, and that gives you a new command, which is git space review.

00:42:57.300 --> 00:43:01.940
And there's a little configuration file in your code repository,

00:43:01.940 --> 00:43:07.020
and then that will send the review up for review to the destination of the Garrett installation.

00:43:07.660 --> 00:43:12.860
And you will have an account with Garrett already with your SSH key in there, so it knows who you are.

00:43:12.860 --> 00:43:13.380
Nice. I see.

00:43:13.380 --> 00:43:16.480
So you do like a push to that origin or something, right?

00:43:16.480 --> 00:43:17.240
And then it has it.

00:43:17.240 --> 00:43:21.040
It doesn't necessarily have to hook into the full code repository.

00:43:21.040 --> 00:43:25.060
Yeah, so the git review, it does a couple of different things, the command.

00:43:25.060 --> 00:43:30.840
But primarily what it does is it sets up the remote for you and pushes and creates a branch for your change on the remote one

00:43:30.840 --> 00:43:32.900
and gives you like a review number and that kind of thing.

00:43:32.920 --> 00:43:33.780
Yeah, yeah. Very cool.

00:43:33.780 --> 00:43:36.100
And then GitHub, obviously, we've talked about that a lot.

00:43:36.100 --> 00:43:41.980
They just added like full proper code review where you can go to a check-in and like expand it out and comment and stuff.

00:43:41.980 --> 00:43:43.480
So GitHub's coming along.

00:43:43.480 --> 00:43:44.520
There's also Bitbucket.

00:43:44.520 --> 00:43:46.000
Probably a lot of people use Jira.

00:43:46.000 --> 00:43:52.140
I don't know the source usage relative to GitHub, but it seems like at least issue and review stuff happens a lot in Jira.

00:43:52.320 --> 00:43:55.280
I'm not sure if Jira has code review built in, but I've not really used it.

00:43:55.280 --> 00:43:58.360
The one I do hear quite good things about is Fabricator.

00:43:58.360 --> 00:44:00.480
So this is actually written in PHP, I think.

00:44:00.480 --> 00:44:02.980
And I also think it came out of Facebook originally.

00:44:02.980 --> 00:44:06.400
I've heard of some people really having success with that.

00:44:06.400 --> 00:44:08.840
Again, I've never actually used it myself.

00:44:08.840 --> 00:44:14.940
The only two that I really have recent and extended experience with are GitHub and Garrett.

00:44:14.940 --> 00:44:15.300
Sure.

00:44:15.300 --> 00:44:15.780
Okay.

00:44:15.780 --> 00:44:16.660
Excellent.

00:44:16.660 --> 00:44:21.220
So some tools out there, I know actually in this whole space, there's like a billion tools, right?

00:44:21.220 --> 00:44:25.080
There's a whole bunch of small things, but these are some of the big players in our space.

00:44:25.080 --> 00:44:25.420
Very cool.

00:44:25.420 --> 00:44:27.960
I think, you know, we're kind of getting to the end of the show.

00:44:27.960 --> 00:44:28.960
We're running low on time.

00:44:28.960 --> 00:44:32.400
Let me wrap it up with my final two questions, as always.

00:44:32.400 --> 00:44:35.500
So if you're going to write some Python code or any code, what editor do you open?

00:44:35.500 --> 00:44:37.660
I use Vim all the time.

00:44:37.660 --> 00:44:37.940
Yeah.

00:44:37.940 --> 00:44:46.320
I work in so many remote servers and VMs that I have some scripts to kind of set up my Vim environment on that machine.

00:44:46.640 --> 00:44:47.720
And then it's just, it's great.

00:44:47.720 --> 00:44:48.560
Oh, nice.

00:44:48.560 --> 00:44:48.780
Yeah.

00:44:48.780 --> 00:44:49.620
That's super portable.

00:44:49.620 --> 00:44:49.980
Awesome.

00:44:49.980 --> 00:44:50.920
Okay.

00:44:50.920 --> 00:44:54.640
And favorite or favorites from the PyPI package.

00:44:54.640 --> 00:44:55.960
Have we passed 100,000?

00:44:55.960 --> 00:44:58.000
I'm going to look at what you're thinking.

00:44:58.000 --> 00:44:59.800
We're definitely getting up there.

00:44:59.800 --> 00:45:02.800
It is at 99,706.

00:45:02.800 --> 00:45:05.020
I think tomorrow will be the 100,000 packages.

00:45:05.020 --> 00:45:09.140
So there are rounding up 100,000 packages on PyPI.

00:45:09.140 --> 00:45:12.380
What ones do you recommend for people to check out that are awesome?

00:45:12.380 --> 00:45:16.240
So I think most of my favorites are the fairly common ones that people know about.

00:45:16.380 --> 00:45:20.060
So I picked a couple of more obscure ones here, which I think are just quite nice.

00:45:20.060 --> 00:45:22.320
And they've been useful in my development process.

00:45:22.320 --> 00:45:26.020
So Vulture is one that you actually covered on Python Bytes.

00:45:26.020 --> 00:45:28.680
You referenced one of my blog posts about it.

00:45:28.680 --> 00:45:31.920
And basically, it's a tool for finding dead code.

00:45:32.040 --> 00:45:34.820
So it finds functions which are never used.

00:45:34.820 --> 00:45:36.780
And that kind of thing.

00:45:36.780 --> 00:45:37.500
It's just really useful.

00:45:37.500 --> 00:45:39.060
I think that's a really cool project.

00:45:39.060 --> 00:45:40.220
And I'm glad we talked about it.

00:45:40.220 --> 00:45:45.700
Because nothing is more frustrating to me than spending half an hour trying to understand what a function does in the context of an app.

00:45:45.780 --> 00:45:49.860
To realize, oh, I don't understand it because it doesn't do anything.

00:45:49.860 --> 00:45:50.160
Right?

00:45:50.160 --> 00:45:51.560
Like, it's super cool.

00:45:51.560 --> 00:45:52.700
So very nice.

00:45:52.700 --> 00:45:58.940
It's amazing how often I've found projects which have a function and it's only has a unit test for it.

00:45:58.940 --> 00:46:00.360
But it isn't used anywhere else.

00:46:00.360 --> 00:46:05.000
But because there's a unit test, everything that inspects the code thinks it's being used.

00:46:05.240 --> 00:46:09.480
But with Vulture, you can exclude any uses in your test cases, for example.

00:46:09.480 --> 00:46:11.160
And then it'll highlight it.

00:46:11.160 --> 00:46:12.220
So that works quite nicely.

00:46:12.220 --> 00:46:12.940
Oh, very cool.

00:46:12.940 --> 00:46:13.300
Very cool.

00:46:13.300 --> 00:46:13.820
All right.

00:46:13.820 --> 00:46:14.320
What's the next one?

00:46:14.320 --> 00:46:18.200
The next one that I've been using recently is called pip debt tree.

00:46:18.200 --> 00:46:19.280
So that's one word.

00:46:19.280 --> 00:46:25.520
And what you can do with pip debt tree is you can provide it the name of a package which is installed in your virtual land.

00:46:25.520 --> 00:46:28.620
And I'll actually give you the tree of requirements for that.

00:46:28.620 --> 00:46:31.040
So you can see where another package came from, why it's there.

00:46:31.040 --> 00:46:32.280
Right.

00:46:32.280 --> 00:46:35.020
You might be looking at your virtual environment via pip list and go,

00:46:35.160 --> 00:46:36.320
why do I have beautiful soup installed?

00:46:36.320 --> 00:46:37.480
Like I didn't install that.

00:46:37.480 --> 00:46:37.820
Right.

00:46:37.820 --> 00:46:38.580
And this would tell you, right?

00:46:38.580 --> 00:46:41.460
It was installed because of this, which installed that, and it needed that or whatever.

00:46:41.460 --> 00:46:41.780
Yeah.

00:46:41.780 --> 00:46:44.520
And it prints it out in quite a nice sort of tree structure.

00:46:44.520 --> 00:46:45.980
And then it's got a few other things.

00:46:45.980 --> 00:46:47.360
Like you can do a reverse of that.

00:46:47.360 --> 00:46:50.780
So you can have it tell you all the requirements for a package,

00:46:50.780 --> 00:46:54.340
or you can have it trace where something came from, like the opposite end.

00:46:54.340 --> 00:46:57.460
So from the leaf node of the tree rather than the trunk.

00:46:57.460 --> 00:46:58.340
Oh, that sounds awesome.

00:46:58.340 --> 00:46:59.080
I didn't know about that.

00:46:59.080 --> 00:47:01.520
And the final one you said is entry point inspector.

00:47:01.520 --> 00:47:01.960
Yeah.

00:47:01.960 --> 00:47:03.540
So this is probably the smallest one.

00:47:03.680 --> 00:47:06.300
And I guess this is because I do quite a lot of Python packagings.

00:47:06.300 --> 00:47:12.100
But if you have, so say for example, when you install pip deptree,

00:47:12.100 --> 00:47:16.340
it creates the pip deptree command for you that you can use in your terminal.

00:47:16.340 --> 00:47:20.560
But actually trying to find out where these commands come from is quite difficult.

00:47:20.720 --> 00:47:27.760
So entry point inspector will actually inspect the Python entry points that are defined in different setup.py.

00:47:27.760 --> 00:47:29.500
And then I'll list them out.

00:47:29.500 --> 00:47:33.280
So you can see where all these commands are coming from, where they're defined, what packages are coming from.

00:47:33.280 --> 00:47:34.300
That sounds really cool too.

00:47:34.300 --> 00:47:35.080
These are all great.

00:47:35.080 --> 00:47:35.580
Awesome.

00:47:35.580 --> 00:47:36.580
Thank you for sharing them.

00:47:36.580 --> 00:47:38.180
Final call to action.

00:47:38.180 --> 00:47:39.920
What should people do after listening to this?

00:47:39.920 --> 00:47:41.280
They're all inspired about code review.

00:47:41.280 --> 00:47:46.980
If people are inspired about code review, they should just think about how they can improve their process.

00:47:46.980 --> 00:47:51.860
They should start thinking about what they're doing, build improvement into your code review process.

00:47:51.860 --> 00:47:57.440
So every now and then maybe have some kind of retrospective and think about what's working, what isn't working, and just try and improve that.

00:47:57.660 --> 00:47:59.680
Yeah, remember why you're doing it, right?

00:47:59.680 --> 00:48:00.240
Yeah.

00:48:00.240 --> 00:48:01.020
Absolutely.

00:48:01.020 --> 00:48:01.360
Okay.

00:48:01.360 --> 00:48:03.660
And then EuroPython's coming up, right?

00:48:03.660 --> 00:48:03.920
Yeah.

00:48:03.920 --> 00:48:10.480
So I did touch on this earlier, but EuroPython is going to be this year on July from the 9th to the 16th.

00:48:10.480 --> 00:48:15.320
These dates are officially tentative, but I think they will be finalized by the time this episode is out.

00:48:15.320 --> 00:48:16.900
I have to put that disclaimer in.

00:48:16.900 --> 00:48:19.140
And people should start thinking about talks.

00:48:19.140 --> 00:48:21.940
So we will have a call for papers coming out very soon as well.

00:48:21.940 --> 00:48:23.800
I would love for people to speak.

00:48:23.800 --> 00:48:27.580
If people have never spoken before, I'd be happy to speak to them about it.

00:48:27.580 --> 00:48:31.900
and help them sort of find something that they want to talk about, I think that'd be good.

00:48:31.900 --> 00:48:32.580
Yeah, it'd be great.

00:48:32.580 --> 00:48:37.260
It's a very welcoming community, so a good place to get started with public speaking, right?

00:48:37.260 --> 00:48:38.040
Yeah, absolutely.

00:48:38.040 --> 00:48:39.620
It's where I first started speaking.

00:48:39.620 --> 00:48:43.700
Well, Dougal, thank you so much for being on the podcast and sharing all these ideas with us.

00:48:43.700 --> 00:48:44.220
It's been great.

00:48:44.220 --> 00:48:44.520
Thanks.

00:48:44.520 --> 00:48:45.180
I really enjoyed it.

00:48:45.180 --> 00:48:45.480
You bet.

00:48:45.480 --> 00:48:45.720
Bye.

00:48:45.720 --> 00:48:50.080
This has been another episode of Talk Python To Me.

00:48:50.080 --> 00:48:55.560
Today's guest has been Dougal Matthews, and this episode has been sponsored by Rollbar and Hired.

00:48:55.560 --> 00:48:57.340
Thank you both for supporting the show.

00:48:57.340 --> 00:49:00.240
Rollbar takes the pain out of errors.

00:49:00.240 --> 00:49:07.960
They give you the context and insight you need to quickly locate and fix errors that might have gone unnoticed until your users complain, of course.

00:49:07.960 --> 00:49:15.120
As Talk Python To Me listeners, track a ridiculous number of errors for free at rollbar.com slash Talk Python To Me.

00:49:15.120 --> 00:49:17.920
Hired wants to help you find your next big thing.

00:49:17.920 --> 00:49:23.720
Visit Hired.com slash Talk Python To Me to get five or more offers with salary and equity presented right up front

00:49:23.720 --> 00:49:26.420
and a special listener signing bonus of $2,000.

00:49:26.420 --> 00:49:29.440
Are you or a colleague trying to learn Python?

00:49:29.440 --> 00:49:34.100
Have you tried books and videos that just left you bored by covering topics point by point?

00:49:34.100 --> 00:49:40.100
Well, check out my online course, Python Jumpstart, by building 10 apps at talkpython.fm/course

00:49:40.100 --> 00:49:42.680
to experience a more engaging way to learn Python.

00:49:42.680 --> 00:49:50.040
And if you're looking for something a little more advanced, try my WritePythonic code course at talkpython.fm/Pythonic.

00:49:50.040 --> 00:49:52.260
Be sure to subscribe to the show.

00:49:52.260 --> 00:49:54.480
Open your favorite podcatcher and search for Python.

00:49:54.480 --> 00:49:55.720
We should be right at the top.

00:49:55.720 --> 00:50:05.000
You can also find the iTunes feed at /itunes, Google Play feed at /play, and direct RSS feed at /rss on talkpython.fm.

00:50:05.000 --> 00:50:10.120
Our theme music is Developers, Developers, Developers by Corey Smith, who goes by Smix.

00:50:10.120 --> 00:50:16.800
Corey just recently started selling his tracks on iTunes, so I recommend you check it out at talkpython.fm/music.

00:50:16.800 --> 00:50:22.160
You can browse his tracks he has for sale on iTunes and listen to the full-length version of the theme song.

00:50:22.980 --> 00:50:24.240
This is your host, Michael Kennedy.

00:50:24.240 --> 00:50:25.520
Thanks so much for listening.

00:50:25.520 --> 00:50:26.700
I really appreciate it.

00:50:26.700 --> 00:50:28.840
Smix, let's get out of here.

00:50:28.840 --> 00:50:28.840
Smix, let's get out of here.

00:50:28.840 --> 00:50:50.280
Outro Music.

00:50:50.280 --> 00:50:50.780
you

00:50:50.780 --> 00:50:51.080
.

00:50:51.080 --> 00:50:53.140
you

