WEBVTT

00:00:00.001 --> 00:00:07.860
Hi folks, for our final episode of 2022 here on Talk Python, we're crossing the streams with my other show, Python Bytes.

00:00:07.860 --> 00:00:10.980
I present to you one of the more popular episodes of the year.

00:00:10.980 --> 00:00:13.840
We cover many small topics on Python Bytes.

00:00:13.840 --> 00:00:16.000
It's the whole theme of the show, as you may know.

00:00:16.000 --> 00:00:20.140
But the headline of this one is, AI goes on trial for writing code.

00:00:20.140 --> 00:00:25.140
Thank you for listening to Talk Python To Me in 2022, and have a great holiday break.

00:00:25.860 --> 00:00:30.940
The opportunity for me to do this work, and have you all appreciate it and support it, is humbling and truly an honor.

00:00:30.940 --> 00:00:33.160
Thank you, and I'll see you next week.

00:00:33.160 --> 00:00:34.420
Here's that episode.

00:00:34.420 --> 00:00:39.380
Hello and welcome to Python Bytes, where we deliver Python news and headlines directly to your earbuds.

00:00:39.380 --> 00:00:44.800
This is episode 312, recorded November 29th, 2022.

00:00:44.800 --> 00:00:46.060
I'm Michael Kennedy.

00:00:46.060 --> 00:00:47.280
And I'm Brian Okken.

00:00:47.280 --> 00:00:49.700
Brian, we've got a lot to cover today. You want to just jump right into it?

00:00:49.700 --> 00:00:52.000
What I want to talk about is Simon Willison.

00:00:52.000 --> 00:00:54.480
This is incredible.

00:00:54.700 --> 00:01:03.980
So Simon did a talk at DjangoCon 2022, and then he wrote up the slides and everything, and we're going to link to his blog.

00:01:03.980 --> 00:01:08.600
His blog title is Coping Strategies for the Serial Project Hoarder.

00:01:08.600 --> 00:01:17.340
And then the talk title was Massively Increase Your Productivity on Personal Projects with Comprehensive Documentation and Automated Tests.

00:01:17.900 --> 00:01:18.900
Yes, that's a mouthful.

00:01:18.900 --> 00:01:27.460
But really, I don't know what a good name for this is, other than everybody that works with development needs to watch this talk, because it's incredible.

00:01:28.280 --> 00:01:31.400
So he goes through a lot of stuff.

00:01:31.400 --> 00:01:32.280
I'm going to go through it.

00:01:32.280 --> 00:01:37.240
I'm going to luckily, he's got screenshots on here, but he starts out.

00:01:37.560 --> 00:01:42.520
So this is important not just for open source projects or personal projects.

00:01:42.520 --> 00:01:45.920
This is also for if you're working in a company.

00:01:45.920 --> 00:01:47.480
I think this is equally true.

00:01:47.840 --> 00:01:56.860
So he talks about how he got these techniques from working at, now I'm going to forget where he worked, but it's gone.

00:01:57.120 --> 00:02:04.180
A large company with multiple continents, and it was helpful to do this model.

00:02:04.180 --> 00:02:05.360
So what is he talking about?

00:02:05.360 --> 00:02:10.080
So one of the things he talks about is the perfect commit.

00:02:10.080 --> 00:02:17.380
So we don't really, as a professional software developer, you're not really doing new code all the time.

00:02:17.380 --> 00:02:19.920
What you're doing is maintaining existing software.

00:02:20.560 --> 00:02:34.220
So the commit is your unit of work, and a perfect commit includes the implementation of whatever you've done, but it also has tests and documentation and a link to the issue thread.

00:02:34.220 --> 00:02:39.660
And this is, it seems like a lot to me, but walking through his talk, it totally makes sense.

00:02:39.660 --> 00:02:48.260
So he gives an example of one of his with some cool highlights that he's got documentation changes also.

00:02:48.580 --> 00:02:53.080
And the documentation might just be a single line change or something.

00:02:53.080 --> 00:02:59.960
But the tests, he does pause here and say tests are hard for some people, for some developers.

00:02:59.960 --> 00:03:09.160
So it's important to get a working test framework in place quickly so that a test developer isn't starting from scratch.

00:03:09.160 --> 00:03:11.800
They're just, or a software developer when they're writing tests.

00:03:11.920 --> 00:03:24.600
It's just, it's not like comprehensive testing has to be there, but it is a test that passes when your change is there and fails when it's not there or fails when it's not working.

00:03:24.600 --> 00:03:25.540
That's enough.

00:03:25.540 --> 00:03:30.500
You can do more thoroughly test, thorough testing, but that's enough to get us started.

00:03:30.800 --> 00:03:32.700
And I think that's a good way to think about it.

00:03:32.700 --> 00:03:43.540
But he goes, talks about, has, he throws in this little cool thing of like, just keep common types of projects that you're, you have around as cookie cutters in your own, in your own GitHub area.

00:03:44.000 --> 00:03:48.840
He's got a Python library and a click app and dataset plugin for him.

00:03:48.840 --> 00:03:51.880
I might have different things like a pytest plugin or something.

00:03:51.880 --> 00:03:58.040
And that way you can just keep up with your best practices, what you think of as best practices in one place.

00:03:58.040 --> 00:03:59.280
This is a cool idea.

00:03:59.280 --> 00:04:01.060
I'm totally going to steal this.

00:04:01.660 --> 00:04:07.320
And then for myself as well, I've built like a, this predated cookie cutter, but I built this thing.

00:04:07.320 --> 00:04:10.160
Like I always want to have logging and I want it like this.

00:04:10.160 --> 00:04:19.680
I always want to, you know, connect to this other service and like ping and to make sure that the thing is alive or whatever, whatever thing we decided for monitoring inside of our, the company I worked at.

00:04:19.680 --> 00:04:22.000
And like all the new projects would just start that way.

00:04:22.000 --> 00:04:27.280
And it was so nice because you didn't like, ah, is it really worth doing the thing to make sure that we can monitor it at some time?

00:04:27.280 --> 00:04:30.140
Like you just run the one command line thing and it's, it's there.

00:04:30.500 --> 00:04:33.880
Right. We could give it to an intern and they could run it to start their projects.

00:04:33.880 --> 00:04:34.340
It was great.

00:04:34.340 --> 00:04:46.160
And then he's got like this thing that supposedly with a GitHub hook, and I'm going to have to dig into this more because I didn't quite understand how this works, but he's got a way within the GitHub interface to say, I want a new project.

00:04:46.160 --> 00:04:55.200
And it automatically like gives you the choices or what kind of project and then fills out all the defaults from the start instead of just getting the read me like normally.

00:04:55.200 --> 00:04:57.100
So this is kind of neat.

00:04:57.100 --> 00:04:59.600
And I guess I want to try figuring this out.

00:04:59.840 --> 00:05:09.120
The documentation bit, at least one of the things about including this, even if it's difficult, you can have this be part of the code review requirements.

00:05:09.120 --> 00:05:13.780
So don't, don't accept a code review until the documentation is there also.

00:05:13.780 --> 00:05:15.780
So this is a cool idea.

00:05:15.780 --> 00:05:21.880
And then it's the bonus trick of testing documentation, which is a cool idea.

00:05:22.440 --> 00:05:24.820
And then the links to the issue.

00:05:24.820 --> 00:05:27.760
And I thought this was just sort of a, yes, you should do this.

00:05:27.760 --> 00:05:34.420
But this is really the meat of the talk is him doing his entire thought process in the issue thread.

00:05:34.760 --> 00:05:40.260
And he even gives examples where there's sometimes like up to 50, 60 comments.

00:05:40.260 --> 00:05:42.180
And it's just him talking to himself.

00:05:42.180 --> 00:05:43.700
But this is brilliant.

00:05:44.040 --> 00:05:49.560
And I'm not going to convince you as much as he is, but includes screenshots and dead ends.

00:05:49.560 --> 00:05:51.260
Like I tried this thing and it didn't work.

00:05:51.260 --> 00:05:52.860
And we're going to go back and do this other thing.

00:05:53.320 --> 00:05:57.140
This is an, he calls it temporal documentation.

00:05:57.140 --> 00:05:58.780
And I just love this idea.

00:05:58.780 --> 00:06:03.620
And I'm going to try to follow this myself because I have like a memory issue.

00:06:03.620 --> 00:06:06.920
I write stuff down and I, then I forget where I wrote it down.

00:06:06.920 --> 00:06:11.940
And this is where, this way he says, you don't have to remember anything.

00:06:11.940 --> 00:06:13.740
You just dump it there.

00:06:13.740 --> 00:06:20.480
And that way, let's say you, you get pulled off of a project and, and you don't get back to it for like six months.

00:06:20.480 --> 00:06:22.860
Cause you've been fighting fires and doing other stuff.

00:06:22.860 --> 00:06:24.080
And then you get back to it.

00:06:24.080 --> 00:06:25.800
You won't remember where you're at.

00:06:25.800 --> 00:06:35.540
And with this, this, this line of thinking of keeping all of your thinking in the issue thread, you can just jump in and go, oh, that's where I was and get started pretty quickly.

00:06:35.540 --> 00:06:36.300
I love this.

00:06:36.300 --> 00:06:36.840
It's cool.

00:06:36.840 --> 00:06:46.040
So then the rest of the talk is pretty interesting to talking about how like, you know, scientists been doing this and other engineers have been doing this for a long time.

00:06:46.040 --> 00:06:47.860
They called them lab notebooks before.

00:06:47.860 --> 00:06:50.720
And we kind of got out of the habit of doing that with software.

00:06:50.720 --> 00:06:52.760
But anyway, lots of great techniques.

00:06:52.760 --> 00:06:55.740
And I think this is just how to be a professional software developer.

00:06:55.740 --> 00:06:56.080
Now.

00:06:56.460 --> 00:06:57.080
I love that.

00:06:57.080 --> 00:07:04.500
It's like a casual conversation and not like, here are my four recommendations, but like the playing around and the dead ends are really, really valuable.

00:07:04.500 --> 00:07:05.120
Yeah.

00:07:05.120 --> 00:07:13.400
Kim out in the audience says the cookie cutter approach also works beautifully from a DevOps perspective for setting up developers to use your firm specific infrastructure.

00:07:13.680 --> 00:07:14.700
Yeah, I totally agree.

00:07:14.700 --> 00:07:19.360
And that's a little bit of what I was hinting at of like, here's how we integrate with this, like uptime manager and stuff.

00:07:19.360 --> 00:07:21.480
But obviously DevOps that was talk.

00:07:21.480 --> 00:07:27.300
We were deploying to a server in a closet there, which I mean, that tells you all you need to know.

00:07:27.300 --> 00:07:27.720
Yeah.

00:07:28.480 --> 00:07:36.920
Speaking of stuff you might need to know, Brian, Google Copilot and these code writing AIs, I have more to say about that at the very end of the show, book in this a little bit.

00:07:37.700 --> 00:07:42.420
They train themselves on lots of code and Google Copilot.

00:07:42.420 --> 00:07:50.720
For those of you who don't know, you basically can give it a comment and like, I want to connect to a Postgres database with SQLAlchemy.

00:07:50.720 --> 00:07:57.920
And then boom, it'll like literally write all the code, import the usings, you know, come up with a connection string, all that kind of stuff.

00:07:57.920 --> 00:07:58.700
It's pretty fantastic.

00:07:58.700 --> 00:08:00.060
Has some privacy issues.

00:08:00.060 --> 00:08:02.480
I don't know what it's doing now.

00:08:02.480 --> 00:08:09.560
It used to send your source code that you wrote up to GitHub, which made me not want to use it already.

00:08:09.560 --> 00:08:17.580
But the big news here is get the website, GitHub Copilot litigation.com.

00:08:17.580 --> 00:08:20.360
And that's as ominous as it sounds.

00:08:20.360 --> 00:08:22.040
It says we filed.

00:08:22.040 --> 00:08:25.180
This is what the website sort of announces.

00:08:25.180 --> 00:08:32.180
We fought a lawsuit challenging GitHub Copilot, an AI product that relies on unprecedented open source software piracy.

00:08:32.180 --> 00:08:33.180
Why piracy?

00:08:33.180 --> 00:08:39.100
Because it's trained on things that are like GPL and Creative Commons share alike or attribution.

00:08:39.100 --> 00:08:46.540
And then it outputs code based on that original input that has no GPL and it has no, you know, whatever license, right?

00:08:46.540 --> 00:08:49.380
The license is stripped and no attribution.

00:08:49.380 --> 00:08:49.980
What do you think?

00:08:49.980 --> 00:08:54.000
Something we talked about from the very beginning of like, how is this okay?

00:08:54.000 --> 00:08:54.960
Yeah.

00:08:54.960 --> 00:08:55.580
Not sure.

00:08:55.880 --> 00:08:56.280
Absolutely.

00:08:56.280 --> 00:09:06.400
If it did things like we're only going to look at MIT licenses and other commercial open no attribution licenses, I don't think there'd be anything to say about it.

00:09:06.400 --> 00:09:08.460
But apparently that's not the case.

00:09:08.460 --> 00:09:11.220
So there's a couple of updates as well.

00:09:11.220 --> 00:09:15.440
I suppose we should also, like they do on this page, say we are not a lawyer.

00:09:15.440 --> 00:09:17.020
Please don't take legal advice from us.

00:09:17.020 --> 00:09:20.400
We write code, not legal documents.

00:09:20.400 --> 00:09:24.900
But nonetheless, it says this is Matthew Butterick.

00:09:24.900 --> 00:09:29.300
And they've set up to investigate Google Copilot.

00:09:29.300 --> 00:09:35.340
And they filed a class action lawsuit in the U.S. federal court in San Francisco on behalf of a couple folks.

00:09:35.340 --> 00:09:44.460
So they're challenging the legality of GitHub Copilot and a related product, OpenAI Codex, which powers Copilot.

00:09:44.460 --> 00:09:49.740
The suit has been filed against a set of defendants that includes GitHub, Microsoft, and OpenAI.

00:09:49.740 --> 00:09:50.460
Wow.

00:09:50.460 --> 00:09:53.140
There's an update down here somewhere.

00:09:53.140 --> 00:09:54.540
Let's see.

00:09:54.540 --> 00:09:58.220
It says by training, here's the motivation for their lawsuit.

00:09:58.220 --> 00:10:05.300
By training their AI systems on public GitHub repositories, though based on their public statements, possibly much more,

00:10:05.300 --> 00:10:14.540
we contend that the defendants have violated the legal rights of a vast number of creators who posted code or other work under certain open source licenses on GitHub,

00:10:14.540 --> 00:10:20.740
which licenses a set of 11 popular open source licenses that all require attribution, the author's name, and copyright,

00:10:20.740 --> 00:10:24.600
including, I guess, the MIT license as well, the GPL, and the Apache license.

00:10:24.600 --> 00:10:26.060
And it's listed out there.

00:10:26.060 --> 00:10:29.720
There's a whole bunch more details, and it says, update, November 10th.

00:10:29.720 --> 00:10:33.200
That original was November 3rd.

00:10:33.200 --> 00:10:34.760
There's an update here.

00:10:34.760 --> 00:10:39.140
This is, we filed a second class action lawsuit on behalf of two additional plaintiffs.

00:10:39.140 --> 00:10:42.780
The defendants and claimants are otherwise similar to the initial one.

00:10:42.780 --> 00:10:44.580
So there you go.

00:10:44.580 --> 00:10:45.520
It's going to be interesting.

00:10:45.520 --> 00:10:52.860
It's not going to be just interesting for Google, for Google, GitHub, Copilot, but basically AI in general, right?

00:10:52.860 --> 00:11:02.800
It says it's going to challenge that AI strips the ownership and other requirements of inputs and outputs, right?

00:11:02.800 --> 00:11:04.060
And maybe it does, maybe it doesn't.

00:11:04.060 --> 00:11:09.740
I mean, we heard that APIs are not copyrightable in the Google Oracle Java lawsuit.

00:11:09.740 --> 00:11:10.800
So we're going to find out here.

00:11:10.800 --> 00:11:11.740
Oh, interesting.

00:11:12.140 --> 00:11:12.540
Yeah.

00:11:12.540 --> 00:11:25.980
I mean, like, when we looked into this a little bit earlier, if it's helping you fill in parameters to a function or what likely things you're going to fill in for a function call, that's one thing.

00:11:25.980 --> 00:11:31.120
But when it plops down like 20 lines of code for you, where did it get those 20 lines of code?

00:11:31.640 --> 00:11:35.620
And then, I mean, open source doesn't necessarily mean you can copy it.

00:11:35.620 --> 00:11:37.420
It's just open to read.

00:11:37.420 --> 00:11:40.600
I mean, you can put your own license in there.

00:11:40.600 --> 00:11:47.680
You can make up your own license that says anybody can read this, but you can't copy it, use it, or do anything else with it at all.

00:11:47.680 --> 00:11:48.840
Can't even fork it.

00:11:48.840 --> 00:11:53.040
And there's nothing stopping you from doing that sort of a license.

00:11:53.640 --> 00:11:54.000
Right.

00:11:54.000 --> 00:12:01.180
Or the default, if you put it on GitHub, I believe if you put no license means you have no license, you're conferring no license whatsoever, right?

00:12:01.180 --> 00:12:01.660
Yeah.

00:12:01.660 --> 00:12:04.640
It means it's just like writing a book.

00:12:04.640 --> 00:12:10.280
You can't, when you write a book, you have the full copyright unless you give it to somebody else.

00:12:10.280 --> 00:12:11.700
Yeah, absolutely.

00:12:11.700 --> 00:12:16.120
This portion of Talk Python To Me is brought to you by Sentry.

00:12:16.120 --> 00:12:18.980
How would you like to remove a little stress from your life?

00:12:18.980 --> 00:12:24.980
Do you worry that users may be encountering errors, slowdowns, or crashes with your app right now?

00:12:24.980 --> 00:12:28.020
Would you even know it until they sent you that support email?

00:12:28.020 --> 00:12:32.800
How much better would it be to have the error or performance details immediately sent to you,

00:12:32.800 --> 00:12:38.440
including the call stack and values of local variables and the active user recorded in the report?

00:12:38.440 --> 00:12:41.840
With Sentry, this is not only possible, it's simple.

00:12:41.840 --> 00:12:45.420
In fact, we use Sentry on all the Talk Python web properties.

00:12:45.560 --> 00:12:51.960
We've actually fixed a bug triggered by a user and had the upgrade ready to roll out as we got the support email.

00:12:51.960 --> 00:12:53.940
That was a great email to write back.

00:12:53.940 --> 00:12:57.340
Hey, we already saw your error and have already rolled out the fix.

00:12:57.340 --> 00:12:58.760
Imagine their surprise.

00:12:58.760 --> 00:13:00.960
Surprise and delight your users.

00:13:00.960 --> 00:13:05.020
Create your Sentry account at talkpython.fm/sentry.

00:13:05.500 --> 00:13:12.040
And if you sign up with the code talkpython, all one word, it's good for two free months of Sentry's business plan,

00:13:12.040 --> 00:13:16.700
which will give you up to 20 times as many monthly events as well as other features.

00:13:16.700 --> 00:13:21.100
Create better software, delight your users, and support the podcast.

00:13:21.100 --> 00:13:26.080
Visit talkpython.fm/sentry and use the coupon code talkpython.

00:13:27.180 --> 00:13:27.760
All right.

00:13:27.760 --> 00:13:28.340
Over to you, Brian.

00:13:28.340 --> 00:13:28.940
What's the next one?

00:13:28.940 --> 00:13:40.280
So this is a silly thing, but sometimes I've got Python code that I want to have a pop-up, a window pop-up.

00:13:40.540 --> 00:13:45.260
And I've always been using, what is it, PySimple GUI?

00:13:45.260 --> 00:13:51.220
Well, not always, but that's what I've been using lately for like really easy, just a simple pop-up thing,

00:13:51.220 --> 00:13:57.800
especially if I needed to use RunOnMax and really anywhere, because it's like totally fast to get it done,

00:13:57.800 --> 00:13:59.160
and I don't have to think about it anymore.

00:13:59.160 --> 00:14:07.660
However, PySimple GUI doesn't, I don't, I haven't mastered the art of getting it to look just like a native dialog box.

00:14:07.900 --> 00:14:11.460
It's, and maybe there's some tricks that you can do that I just don't know.

00:14:11.460 --> 00:14:21.760
But if I'm on, if I know it's on Windows, maybe we could just go ahead and use the Windows DLLs and do a native Windows dialog box.

00:14:21.760 --> 00:14:25.320
Right, just call straight into the Windows Win32 API for.

00:14:25.320 --> 00:14:26.720
Yeah, sure.

00:14:26.720 --> 00:14:29.520
Like that could be, that shouldn't be too hard, right?

00:14:29.520 --> 00:14:30.060
No.

00:14:30.380 --> 00:14:35.040
It sounds scary to me, but I ran across Matt Callahan's blog.

00:14:35.040 --> 00:14:44.880
Matt Callahan has an article called Display a Message Box in Python Without Using a Non-Standard Library or Other Dependency.

00:14:44.880 --> 00:14:46.100
Actually, you can just do this.

00:14:46.100 --> 00:14:48.060
You don't have to install anything.

00:14:48.060 --> 00:14:49.960
And I got this.

00:14:49.960 --> 00:14:52.040
I want to, where did I get this from?

00:14:52.040 --> 00:14:53.740
Give credit where credit is due.

00:14:54.080 --> 00:14:56.840
I got this from the PyQuarters Weekly newsletter.

00:14:56.840 --> 00:14:58.300
So thanks, thanks to them.

00:14:58.300 --> 00:15:01.200
Anyway, this is not hard.

00:15:01.200 --> 00:15:03.160
So he has a little pop-up example.

00:15:03.160 --> 00:15:06.840
And I should have read the article, but I just skimmed for the code.

00:15:06.840 --> 00:15:08.840
Here's some code.

00:15:08.840 --> 00:15:09.380
That's it.

00:15:09.380 --> 00:15:11.940
This makes a dialog box pop up.

00:15:12.080 --> 00:15:16.460
And it's calling the, so it calls, it's just like a couple flags.

00:15:16.460 --> 00:15:17.680
It's like 10 lines of code.

00:15:17.680 --> 00:15:25.180
It calls ctypes, winDLL, user32, messagebox, exw, whatever that means.

00:15:25.180 --> 00:15:29.000
And with some stuff in it, like a title and a message and everything.

00:15:29.000 --> 00:15:35.920
So it's using ctypes, which I don't use much, but you can to get into DLLs.

00:15:35.920 --> 00:15:37.640
So ctypes is built into Python.

00:15:38.740 --> 00:15:41.920
And so this message box, I wanted to play with it a little bit more.

00:15:41.920 --> 00:15:49.040
So as I was playing with this, looked into the Microsoft documentation, the message box

00:15:49.040 --> 00:15:52.520
dialog, there's a, one of the flags is this U type.

00:15:52.520 --> 00:15:55.080
And it's like this hex value thing or a bit field.

00:15:55.080 --> 00:15:57.040
And you can orient a whole bunch of stuff.

00:15:57.040 --> 00:16:03.540
So you can use this to get like an OK box or an OK cancel box, different types of dialog

00:16:03.540 --> 00:16:05.420
boxes using this flag.

00:16:05.620 --> 00:16:10.640
And then once you've got this popped up, how do you, you need to know like what users

00:16:10.640 --> 00:16:11.620
clicked on and stuff.

00:16:11.620 --> 00:16:16.260
So there's, there's return values from this and you can just like check the return value

00:16:16.260 --> 00:16:23.280
and it's defined to be like, you know, a three for abort and a two for cancel and one for OK.

00:16:23.280 --> 00:16:25.220
And you can just check this value.

00:16:25.220 --> 00:16:30.620
So with just a little bit of code, you can have a native dialog box pop up if you need to in

00:16:30.620 --> 00:16:31.220
your code.

00:16:31.600 --> 00:16:32.500
Yeah, that's awesome.

00:16:32.500 --> 00:16:35.420
And it does things like natively that you would expect.

00:16:35.420 --> 00:16:38.300
Like, for example, you hit escape and you have an OK cancel.

00:16:38.300 --> 00:16:39.340
It'll return cancel.

00:16:39.340 --> 00:16:41.600
I hate some of these, these like UI things.

00:16:41.600 --> 00:16:45.120
They show up and you're like, well, it's got one text input and a submit button.

00:16:45.120 --> 00:16:45.640
You hit enter.

00:16:45.640 --> 00:16:46.200
It does nothing.

00:16:46.200 --> 00:16:46.940
You're like, yeah, great.

00:16:46.940 --> 00:16:49.180
OK, apparently this is not real.

00:16:49.180 --> 00:16:51.600
I'm going to have to just, you know, go click it or whatever.

00:16:51.600 --> 00:16:51.940
Right.

00:16:52.300 --> 00:16:54.600
So hooking into the native OS is sweet like that.

00:16:54.600 --> 00:17:00.920
This looks like a thing that would be ripe for a short, simple little package that wraps

00:17:00.920 --> 00:17:02.900
up, say, all the OK cancel.

00:17:02.900 --> 00:17:03.660
Yeah.

00:17:03.660 --> 00:17:04.500
OK cancel.

00:17:04.500 --> 00:17:06.180
What kind of icon you want?

00:17:06.180 --> 00:17:07.060
Do you want like a warning?

00:17:07.060 --> 00:17:08.480
Do you want an informational icon?

00:17:08.480 --> 00:17:09.820
The buttons?

00:17:09.820 --> 00:17:10.160
Yeah.

00:17:10.160 --> 00:17:10.800
Yeah.

00:17:10.800 --> 00:17:11.480
It seems really great.

00:17:11.480 --> 00:17:12.920
But this is fantastic.

00:17:12.920 --> 00:17:14.000
So neat.

00:17:14.000 --> 00:17:15.520
And built in.

00:17:15.520 --> 00:17:16.080
Neat.

00:17:16.080 --> 00:17:17.700
So anyway, just a quickie.

00:17:17.700 --> 00:17:18.260
Yeah.

00:17:18.320 --> 00:17:18.860
It comes included.

00:17:18.860 --> 00:17:20.300
And yeah, I really like it.

00:17:20.300 --> 00:17:24.120
And it's also a bit of a roadmap to show what you could do beyond that.

00:17:24.120 --> 00:17:24.280
Right.

00:17:24.280 --> 00:17:26.540
There's more than just really simple dialog boxes.

00:17:26.540 --> 00:17:30.480
For example, like the open file dialog box on Windows could probably be real similar.

00:17:30.480 --> 00:17:30.740
Right.

00:17:30.740 --> 00:17:31.520
Oh, yeah.

00:17:31.520 --> 00:17:32.080
Probably.

00:17:32.080 --> 00:17:36.840
So when I was looking it up, there's a whole bunch of dialog boxes you got access to.

00:17:36.840 --> 00:17:37.240
So.

00:17:37.240 --> 00:17:38.020
Yeah, exactly.

00:17:38.020 --> 00:17:42.500
It's like a roadmap to like, oh, I can like create a file or, you know, any of these things,

00:17:42.500 --> 00:17:43.540
which I think is pretty cool.

00:17:43.540 --> 00:17:44.300
All right.

00:17:44.300 --> 00:17:47.820
Let's flip away from OS specific to OS general.

00:17:48.020 --> 00:17:49.540
Let's stick with PyCoders for a minute.

00:17:49.540 --> 00:17:51.260
So this one also comes from PyCoders.

00:17:51.260 --> 00:17:54.600
I don't know if it's the same issue or not, but very cool.

00:17:54.600 --> 00:17:59.960
It says write Chrome extensions, which also mean like Brave and Vivaldi and others.

00:17:59.960 --> 00:18:00.860
Edge, maybe.

00:18:00.860 --> 00:18:03.480
Write Chrome extensions in Python.

00:18:03.480 --> 00:18:04.480
Oh.

00:18:04.480 --> 00:18:06.700
How does it work?

00:18:06.700 --> 00:18:08.660
PyScript, of course.

00:18:08.660 --> 00:18:12.400
So, yeah, we just take PyScript.

00:18:12.400 --> 00:18:15.320
And this is an article by Pete Fiston.

00:18:15.320 --> 00:18:26.060
And it sort of walks through how he was able to use PyScript, which is Python on WebAssembly running in the browser, to use that to power a Chrome extension.

00:18:26.060 --> 00:18:32.340
And it doesn't really matter if it's a bit of a nine meg download because you install it once and it's local on your computer.

00:18:32.340 --> 00:18:32.600
Right.

00:18:32.600 --> 00:18:40.640
So if you want to do this, it walks you through all the things you got to do in order to use PyScript to write Chrome extensions or Python to write Chrome extensions.

00:18:40.640 --> 00:18:41.300
What do you think?

00:18:41.300 --> 00:18:41.660
Cool.

00:18:41.660 --> 00:18:42.840
Even shows you how to put an icon.

00:18:42.840 --> 00:18:43.920
That's pretty cool.

00:18:43.920 --> 00:18:44.460
Yeah.

00:18:45.180 --> 00:18:46.780
But I have more for you.

00:18:46.780 --> 00:18:52.240
So just so in case people don't know, this is an extra, extra, extra hear all about it section because I want to hit a whole bunch of things.

00:18:52.240 --> 00:18:56.180
So as of recently, just published this episode.

00:18:56.180 --> 00:18:56.960
Let me look.

00:18:56.960 --> 00:19:00.200
30, 31 minutes ago.

00:19:00.200 --> 00:19:02.920
And it says PyScript powered by MicroPython.

00:19:02.920 --> 00:19:14.760
So one of the challenges that PyScript has had traditionally is it's based on the full, nearly the full CPython runtime compiled into WebAssembly, which after you strip a bunch out, that doesn't work in the browser.

00:19:14.760 --> 00:19:16.460
It comes down to like nine megabytes.

00:19:16.460 --> 00:19:17.200
Okay.

00:19:17.200 --> 00:19:19.400
It's for like this browser extension thing.

00:19:19.400 --> 00:19:20.020
That's reasonable.

00:19:20.020 --> 00:19:27.640
But for you would never use in place of like Vue.js on a popular page because you want that page to load quickly.

00:19:27.640 --> 00:19:29.660
You want it to be good for SEO, all those things.

00:19:29.660 --> 00:19:31.700
But you know what's small and fast?

00:19:32.500 --> 00:19:33.020
MicroPython.

00:19:33.020 --> 00:19:33.820
Oh, neat.

00:19:33.820 --> 00:19:48.520
So I just had Brett Cannon, Nicholas Tolerwey, and Fabio Flieger on Talk Python to talk about the work that they're doing to make PyScript not run on full CPython, but to run on MicroPython.

00:19:48.520 --> 00:19:49.080
Oh, wow.

00:19:49.080 --> 00:19:52.860
And MicroPython, you can get that to load up in 100 milliseconds on your page.

00:19:52.860 --> 00:19:54.420
And it's only a couple hundred K.

00:19:54.420 --> 00:20:01.460
All of a sudden, that starts to sound a lot like a pretty rich front-end framework level of stuff you got to download and get started.

00:20:01.580 --> 00:20:03.160
And you cache it, then you're good to go.

00:20:03.160 --> 00:20:04.140
That's exciting, huh?

00:20:04.140 --> 00:20:05.440
That's super exciting.

00:20:05.440 --> 00:20:06.100
Yeah.

00:20:06.100 --> 00:20:06.420
Yeah.

00:20:06.500 --> 00:20:08.300
So this Chrome extension thing is cool.

00:20:08.300 --> 00:20:10.380
when you look at the shipping version.

00:20:10.380 --> 00:20:14.120
I don't know if you can call it shipping because the price grip is still like super alpha.

00:20:14.120 --> 00:20:15.960
But what you can get today.

00:20:16.760 --> 00:20:24.820
So Nicholas said probably spring that they'll have something to share, but in terms of being able to use MicroPython.

00:20:24.820 --> 00:20:26.020
But I think that's pretty excellent.

00:20:26.020 --> 00:20:29.340
That could really, really unlock some super cool features.

00:20:29.340 --> 00:20:33.380
If now we could build like a Vue.js type thing, but with Python.

00:20:33.620 --> 00:20:43.080
And one of the goals that they stated is that they're looking to build this as a framework or, excuse me, a platform that you can build frameworks on top of.

00:20:43.080 --> 00:20:52.600
So it's not just here's how you write some Python code in the browser, but here's a foundation that people could create like a PyView or a PyAngular or, you know, whatever they wanted to create.

00:20:52.600 --> 00:20:52.840
Right.

00:20:52.840 --> 00:20:53.280
Yeah.

00:20:53.480 --> 00:21:01.460
So question, question just for my own personal use is, is, is would Chrome extensions work on Vivaldi?

00:21:01.460 --> 00:21:02.480
Yeah, yeah, they do.

00:21:02.480 --> 00:21:03.080
Okay.

00:21:03.080 --> 00:21:08.320
One of the things that's interesting about Vivaldi, and I think it probably affects its reporting a little bit.

00:21:08.320 --> 00:21:13.400
When you look at the user agent of Vivaldi, it's exactly the user agent of Chrome.

00:21:13.400 --> 00:21:16.200
So it lies to the world and tells the world it's Chrome.

00:21:16.200 --> 00:21:18.540
There's no user agent for Vivaldi.

00:21:18.540 --> 00:21:22.360
It's just whatever version of Chrome it's, it's like using, you know?

00:21:22.360 --> 00:21:22.640
Okay.

00:21:22.800 --> 00:21:26.320
So when you go to the Chrome web store, it's like put this in Chrome, you click it and yeah, it goes.

00:21:26.320 --> 00:21:27.140
So it worked perfectly.

00:21:27.140 --> 00:21:27.360
Sure.

00:21:27.360 --> 00:21:27.820
Cool.

00:21:27.820 --> 00:21:28.340
Yes.

00:21:28.340 --> 00:21:30.160
And John Sheehan says, yes, they do.

00:21:30.160 --> 00:21:30.460
All right.

00:21:30.460 --> 00:21:31.780
Next extra, extra, extra.

00:21:31.780 --> 00:21:35.020
Brian, I've been excited a little bit about Mastodon.

00:21:35.020 --> 00:21:35.940
I don't know if you noticed.

00:21:35.940 --> 00:21:37.200
Yeah, me too.

00:21:37.200 --> 00:21:37.900
I know.

00:21:37.900 --> 00:21:38.380
It's fantastic.

00:21:38.380 --> 00:21:39.920
It's really tons of great interactions.

00:21:39.920 --> 00:21:46.380
And I started putting in our show notes, which you'll see when I publish this, your Mastodon account and mine.

00:21:46.380 --> 00:21:50.440
So people can connect with us and have even more conversations over there.

00:21:50.660 --> 00:21:56.040
But there was a really interesting article by Eugene, the guy who created Mastodon.

00:21:56.880 --> 00:21:58.320
I've been looking and looking.

00:21:58.320 --> 00:22:01.720
It's about scaling Mastodon and the challenges they were having.

00:22:01.720 --> 00:22:05.920
And boy, it's I would love to link to it, but I just can't find it.

00:22:05.920 --> 00:22:08.640
But it's so it's written in Ruby.

00:22:08.640 --> 00:22:09.100
Right.

00:22:09.100 --> 00:22:14.240
And so it talks so much about these are the challenges of scaling out threads.

00:22:14.240 --> 00:22:16.360
And, oh, we have this thing called a GIL.

00:22:16.360 --> 00:22:19.540
And it really doesn't allow you to use threads very easily.

00:22:19.940 --> 00:22:32.100
And here's there's just it was so interesting to look at how a technology that doesn't have asyncio and async and await getting all tangled up trying to do IO based things.

00:22:32.100 --> 00:22:38.220
So it's like, well, can we have maybe we should have 10 to 20 threads to do the network communication.

00:22:38.220 --> 00:22:47.100
But if we have more than 20, then we get like a context switching and contention in the operating system, you know, that just comes with having OS threads.

00:22:47.100 --> 00:22:47.820
Well, guess what?

00:22:47.820 --> 00:22:51.440
You can do really well with no threads or one thread.

00:22:51.440 --> 00:22:52.600
You can talk to web.

00:22:52.600 --> 00:22:53.920
You can call other websites.

00:22:53.920 --> 00:22:55.260
You can receive web requests.

00:22:55.260 --> 00:22:59.100
And the mechanism for doing that in Python is async and await.

00:22:59.100 --> 00:23:02.040
And asyncio requires no additional threads.

00:23:02.040 --> 00:23:03.740
Very, very little overhead.

00:23:03.740 --> 00:23:04.640
No contact switching.

00:23:04.640 --> 00:23:10.060
So this project by Andrew.

00:23:10.060 --> 00:23:13.760
I'm sorry if I am not getting Andrew Godwin.

00:23:13.760 --> 00:23:20.100
Sorry for last name for a moment of Django channel said, what if I rewrote this?

00:23:20.100 --> 00:23:22.360
But in Python with an async and await.

00:23:22.360 --> 00:23:25.100
OK, so there's a bunch of challenges.

00:23:25.100 --> 00:23:26.560
Challenges of running Mastodon.

00:23:26.560 --> 00:23:29.320
People want to have their own server because they're like, oh, I want my own server.

00:23:29.320 --> 00:23:31.160
So I'm not stuck in one of these communities.

00:23:31.160 --> 00:23:37.320
And as beholden to them, the problem is every one of those is like a standalone DevOps adventure.

00:23:37.320 --> 00:23:39.920
There's tons of like things working together.

00:23:39.920 --> 00:23:41.720
And it's it's a lot of work.

00:23:41.720 --> 00:23:41.940
Right.

00:23:41.940 --> 00:23:49.420
It'd be better if you put like host more of them on one machine and sort of scale scale that up in a nice way.

00:23:49.420 --> 00:23:53.580
So this one lets you host multiple domains for small to medium instances.

00:23:53.580 --> 00:23:57.640
And it's written with async and await, which is pretty awesome.

00:23:57.640 --> 00:23:58.520
So, yeah.

00:23:58.520 --> 00:24:00.060
Anyway, I don't know.

00:24:00.060 --> 00:24:00.720
Check this out.

00:24:00.720 --> 00:24:04.080
I didn't know if you if I caught you trying to pronounce it.

00:24:04.080 --> 00:24:04.800
Takahe?

00:24:04.800 --> 00:24:05.760
Takahe?

00:24:05.760 --> 00:24:06.520
I don't know.

00:24:06.520 --> 00:24:07.920
I'm going to go with that.

00:24:07.920 --> 00:24:15.500
But and of course, Andrew Godwin just said, you know, I can probably write this in Python and like get it out in a couple of weeks.

00:24:15.760 --> 00:24:17.540
I think it was like five days or something.

00:24:17.540 --> 00:24:24.160
So key features, multiple domain support, multiple identities per user, which is kind of interesting.

00:24:24.160 --> 00:24:27.240
Desktop mobile PWA compatible.

00:24:27.240 --> 00:24:32.860
Again, how many days and easy deployment, a web worker, a background worker and one database.

00:24:32.860 --> 00:24:35.040
Not all this crazy, crazy stuff.

00:24:35.240 --> 00:24:37.280
So anyway, people can check it out.

00:24:37.280 --> 00:24:39.200
Let's check out the requirements.

00:24:39.200 --> 00:24:41.020
See what we got going on here.

00:24:41.020 --> 00:24:44.060
UVicorn for an HTTPX.

00:24:44.060 --> 00:24:46.540
I mean, that pretty much pretty much says it right there.

00:24:46.540 --> 00:24:47.500
Oh, interesting.

00:24:47.500 --> 00:24:52.360
It's based on Django HTMX is pretty interesting.

00:24:52.360 --> 00:24:53.320
It's some of the building blocks.

00:24:53.320 --> 00:24:54.620
But yeah, super cool.

00:24:55.400 --> 00:24:56.560
So there's another one.

00:24:56.560 --> 00:25:01.980
This portion of Talk Python To Me is brought to you by the AWS Insiders podcast.

00:25:01.980 --> 00:25:09.960
When was the last time you ordered a physical server to host your functions as a service, your latest API or your most recent web app?

00:25:09.960 --> 00:25:11.620
I remember the last time I did.

00:25:11.620 --> 00:25:13.640
That was around the year 2001.

00:25:13.640 --> 00:25:15.800
And yes, it was quite the odyssey.

00:25:15.800 --> 00:25:18.000
Of course, we don't do that anymore.

00:25:18.000 --> 00:25:23.440
We run our code in the cloud with near instant provisioning and unparalleled data centers.

00:25:24.180 --> 00:25:27.060
And the most popular cloud provider is AWS.

00:25:27.060 --> 00:25:34.360
But for all the ways that AWS has made our lives easier, it has also opened a massive box of choices.

00:25:34.360 --> 00:25:36.220
Should you choose platform as a service?

00:25:36.220 --> 00:25:38.300
Or maybe it's still VMs with IaaS.

00:25:38.300 --> 00:25:39.540
What about your database?

00:25:39.540 --> 00:25:43.120
Maybe you should choose a managed service like RDS with Postgres.

00:25:43.120 --> 00:25:45.280
Or is DynamoDB better?

00:25:45.280 --> 00:25:46.080
Maybe Aurora?

00:25:46.080 --> 00:25:46.860
No, wait.

00:25:46.860 --> 00:25:49.600
I hear good things about Amazon DocumentDB too.

00:25:49.600 --> 00:25:52.900
And that's where the AWS Insider podcast comes in.

00:25:53.360 --> 00:25:58.160
This podcast helps technology leaders stay ahead of Amazon's constant pace of change and innovation.

00:25:58.160 --> 00:26:10.040
Some relevant recent episodes include Storage Wars Database Edition, Microservices or Macro Disaster, and Exploring Computer Vision at the Edge with AWS Panorama.

00:26:10.040 --> 00:26:14.940
They bring on guests to debate the options and the episodes are vibrant and fun.

00:26:15.000 --> 00:26:22.220
So if you want to have fun and make sense of AWS, head on over to talkpython.fm/AWS Insiders.

00:26:22.220 --> 00:26:26.800
Yes, I know you probably already have a podcast player and you can just search for it there.

00:26:26.800 --> 00:26:30.380
But please use the link so that they know you came from us.

00:26:30.380 --> 00:26:35.260
Thank you to the AWS Insider podcast for keeping this podcast going strong.

00:26:36.940 --> 00:26:39.980
We just had our Black Friday sale over at Talk Python.

00:26:39.980 --> 00:26:40.440
Cool.

00:26:40.440 --> 00:26:41.280
And that was really excellent.

00:26:41.280 --> 00:26:42.220
Sold a bunch of courses.

00:26:42.220 --> 00:26:44.740
We sold some pytest courses, by the way.

00:26:44.740 --> 00:26:45.300
Yeah.

00:26:45.300 --> 00:26:51.920
I'm just excited because sometimes we have these sort of conversations about you've like cool sales and stuff.

00:26:51.920 --> 00:26:53.540
And I'm glad that I get to be a part of that now.

00:26:53.740 --> 00:26:59.520
We've done other fun things where like we couldn't sell your book through them because it's through the publisher.

00:26:59.520 --> 00:27:01.220
And I guess it gets tricky, right?

00:27:01.220 --> 00:27:02.340
So I'm really excited as well.

00:27:02.340 --> 00:27:04.780
So we did our Black Friday sale.

00:27:04.780 --> 00:27:05.740
And guess what?

00:27:05.740 --> 00:27:07.740
I noticed something a little bit unusual.

00:27:07.740 --> 00:27:14.240
So after a little bit, I opened up Glances on the main web server and said, CPU usage is 85%.

00:27:14.240 --> 00:27:15.320
I'm like, oh, that's not so good.

00:27:15.320 --> 00:27:17.120
88, 91, 92.

00:27:17.120 --> 00:27:17.640
Uh-oh.

00:27:17.640 --> 00:27:24.220
But what was super interesting was Nginx, not Python, was the thing getting hammered.

00:27:24.220 --> 00:27:27.660
So both Nginx workers were like almost 100%.

00:27:27.660 --> 00:27:28.920
And Python was just chilling.

00:27:28.920 --> 00:27:38.740
I'm like, okay, that is a really interesting story for Python performance that something amazing like Nginx that people say is fast all the time is the bottleneck.

00:27:38.740 --> 00:27:41.920
And it turned out it survived, but just barely, right?

00:27:41.920 --> 00:27:45.240
If it were like twice as bad, it would have keeled over, which had been bad.

00:27:45.520 --> 00:27:50.700
So I talked to a bunch of people about this, and I realized that there's one HTTP response.

00:27:50.700 --> 00:27:51.700
I've got to spell that better.

00:27:51.700 --> 00:27:57.620
And 12 CSS files, 43 images, and one JavaScript file on the page I was sending them.

00:27:57.620 --> 00:28:05.940
So I'm like, all right, maybe I should try to use some interesting CDN, which I had got a recommendation from one of our listeners, but otherwise hadn't heard about.

00:28:05.940 --> 00:28:07.460
What a cool service.

00:28:07.460 --> 00:28:13.000
So now we have 112 different locations serving up those static files.

00:28:13.000 --> 00:28:13.580
Nice.

00:28:13.740 --> 00:28:14.940
And just processing.

00:28:14.940 --> 00:28:27.280
So I went back today when we did our Cyber Monday, and I said, when I, that was yesterday, when I pushed out the announcement for Cyber Monday closing, and I pulled up the real-time data, look at that traffic.

00:28:27.280 --> 00:28:29.540
That's CSS and JavaScript and images.

00:28:29.540 --> 00:28:31.800
1.4 gigabytes a second.

00:28:31.800 --> 00:28:32.660
Oh, my gosh.

00:28:32.660 --> 00:28:33.880
It's insane, dude.

00:28:34.260 --> 00:28:36.020
And check this out on the server.

00:28:36.020 --> 00:28:37.060
This is the most important part.

00:28:37.060 --> 00:28:39.520
3% CPU usage on NGINX.

00:28:39.520 --> 00:28:45.620
And across the whole computer, across all of the MicroWISGY processes, just a couple more percent.

00:28:45.620 --> 00:28:47.060
CDN to the rescue.

00:28:47.060 --> 00:28:47.760
Exactly.

00:28:48.040 --> 00:28:51.580
But the thing that's also interesting is that Python is just like, yeah, it was nothing.

00:28:51.580 --> 00:28:54.000
Like, we can take that, but it's all those static files.

00:28:54.000 --> 00:29:02.960
So anyway, I put that right up together for people in order to serve out that data, pay $2, right, for 0.35 terabytes.

00:29:05.120 --> 00:29:07.380
And, by the way, it's going right now.

00:29:07.380 --> 00:29:09.180
Oh, it's got to refresh here.

00:29:09.180 --> 00:29:12.120
They have these cool real-time maps and whatnot.

00:29:12.120 --> 00:29:16.260
But that little spike right there is when I released the Talk Python episode.

00:29:16.260 --> 00:29:21.760
And that's about 4.5 terabytes per second, which is just insane.

00:29:21.760 --> 00:29:24.480
So anyway, I totally recommend people check this out.

00:29:24.480 --> 00:29:25.300
It's super fun.

00:29:25.300 --> 00:29:26.900
You're reaching people all over the world.

00:29:26.900 --> 00:29:27.640
That's pretty cool.

00:29:27.640 --> 00:29:28.300
Yeah.

00:29:28.300 --> 00:29:28.980
Isn't that amazing?

00:29:28.980 --> 00:29:30.500
You get all these different locations.

00:29:30.940 --> 00:29:36.500
I think it lost its web socket connection because it stopped updating.

00:29:36.500 --> 00:29:38.240
It's like there's a little warning.

00:29:38.240 --> 00:29:43.260
This live monitor is like a little bit of a suggestion of how things might be.

00:29:43.260 --> 00:29:44.380
But, yeah, anyway.

00:29:44.380 --> 00:29:46.640
Yeah, what's up with the Alaska people not listening?

00:29:46.640 --> 00:29:47.500
Hey, Alaska.

00:29:47.500 --> 00:29:47.900
Yeah, man.

00:29:47.900 --> 00:29:48.640
Come on.

00:29:48.640 --> 00:29:52.620
Yeah, they're going to have to CDN over to Canada anyway.

00:29:52.620 --> 00:29:54.400
So not that.

00:29:54.400 --> 00:29:56.200
This final one here.

00:29:56.200 --> 00:29:57.180
No, not final one.

00:29:57.180 --> 00:30:00.340
The second final one that read all about it or hear all about it.

00:30:00.780 --> 00:30:04.300
Reader 5, I've actually been really getting back into RSS.

00:30:04.300 --> 00:30:06.200
I've never left.

00:30:06.200 --> 00:30:06.780
Yeah.

00:30:06.780 --> 00:30:08.800
What's your RSS story these days?

00:30:08.800 --> 00:30:13.520
No, I use Feedly on my phone just to keep up on stuff.

00:30:13.520 --> 00:30:14.600
Nice.

00:30:14.600 --> 00:30:21.800
I'd switch to things like Zite, which is sadly gone, and Flipboard, and these sort of Apple

00:30:21.800 --> 00:30:24.880
News-like things where they kind of curate a bunch of different sources.

00:30:24.880 --> 00:30:25.680
I'm like, you know what?

00:30:25.680 --> 00:30:30.160
There's a bunch of great places I would really like to just directly get them from and curate

00:30:30.160 --> 00:30:32.260
a little more than just I suggest more Python.

00:30:32.260 --> 00:30:39.200
Because do you know how many times my Python channel in Flipboard has women scared of Python

00:30:39.200 --> 00:30:40.820
that comes out of the toilet?

00:30:40.820 --> 00:30:42.800
Like, you know, no, not that Python.

00:30:42.800 --> 00:30:43.620
Really not.

00:30:43.620 --> 00:30:44.820
Oh, no, no.

00:30:44.820 --> 00:30:46.640
And so I've just been super loving.

00:30:46.640 --> 00:30:50.100
I've been using Reader 5 with two E's.

00:30:50.460 --> 00:30:53.640
What a nice piece of software this thing is for $10.

00:30:53.640 --> 00:30:55.000
Okay.

00:30:55.000 --> 00:30:55.540
Really, really cool.

00:30:55.540 --> 00:30:56.060
Yeah, so.

00:30:56.060 --> 00:30:57.000
I'll check it out.

00:30:57.000 --> 00:30:57.480
Yeah.

00:30:57.480 --> 00:31:03.500
And another thing I would like, if people have awesome recommendations for blogs, especially

00:31:03.500 --> 00:31:08.080
Python blogs that I should be following or people, listeners should be following, put

00:31:08.080 --> 00:31:12.200
that on the YouTube channel comments or send it to us on Mastodon or Twitter.

00:31:12.200 --> 00:31:15.800
And maybe I'll give a shout out to ones that are extra good.

00:31:15.800 --> 00:31:16.820
But very, very cool.

00:31:16.820 --> 00:31:17.640
Let's see.

00:31:17.640 --> 00:31:19.340
Check this out.

00:31:19.340 --> 00:31:22.180
There's a podcast called Sing for Science.

00:31:22.180 --> 00:31:28.800
And on season three, episode eight, which just came out six days ago, Rivers Cuomo of Weezer

00:31:28.800 --> 00:31:31.460
and Guido Van Rossum sit down for a conversation.

00:31:31.460 --> 00:31:32.400
How cool is that?

00:31:32.400 --> 00:31:33.260
That's pretty cool.

00:31:33.260 --> 00:31:34.580
That's really cool.

00:31:34.580 --> 00:31:35.000
So.

00:31:35.120 --> 00:31:35.840
Have you listened to it?

00:31:35.840 --> 00:31:36.900
Yeah, I listened to it.

00:31:36.900 --> 00:31:41.680
I grabbed some, grabbed my phone and my dog and went for a walk and listened to it because

00:31:41.680 --> 00:31:43.900
the sun came out and that was rare right now.

00:31:43.900 --> 00:31:45.680
So yeah, it's really interesting.

00:31:45.680 --> 00:31:46.840
Neat.

00:31:46.840 --> 00:31:52.080
It's a lot of the host talking to Rivers and talking to Guido and a little bit of interaction.

00:31:52.080 --> 00:31:56.260
I would love a little more facilitation of them to talking directly, but both great people.

00:31:56.260 --> 00:31:58.360
Rivers is awesome.

00:31:58.360 --> 00:31:59.800
He does really cool stuff with Python.

00:31:59.800 --> 00:32:04.900
I had him on Talk Python 327, little automation tools.

00:32:04.900 --> 00:32:05.900
Which was fun.

00:32:05.900 --> 00:32:09.920
So yeah, he's a, he's a legit developer these days, which is, that's pretty neat.

00:32:09.920 --> 00:32:10.380
All right.

00:32:10.380 --> 00:32:11.500
Final thing, Brian.

00:32:11.500 --> 00:32:12.960
Final extra, extra, extra.

00:32:12.960 --> 00:32:18.520
We started with, I started at least my segment with AI coding and I'm going to end it with

00:32:18.520 --> 00:32:19.600
AI coding kite.

00:32:19.600 --> 00:32:20.600
Do you remember kite?

00:32:20.600 --> 00:32:22.760
It was like the original GitHub copilot.

00:32:22.760 --> 00:32:23.280
Yeah.

00:32:23.280 --> 00:32:23.780
Yeah.

00:32:24.240 --> 00:32:26.220
Unfortunately, they are shutting down.

00:32:26.220 --> 00:32:30.100
So they've been around for 10 years or so.

00:32:30.100 --> 00:32:30.860
Not quite.

00:32:30.860 --> 00:32:32.120
Seven years, something like that.

00:32:32.120 --> 00:32:34.280
Quite a while, but they're shutting down.

00:32:34.280 --> 00:32:37.220
So thanks for all the code, I suppose.

00:32:37.220 --> 00:32:38.120
And that's it.

00:32:38.120 --> 00:32:40.040
That's all I got for all my extras.

00:32:40.900 --> 00:32:42.100
I want to add one.

00:32:42.100 --> 00:32:48.480
So we talked to Simon Willison, talked to one of the, one thing I didn't mention about

00:32:48.480 --> 00:32:53.100
in his talk is he encouraged people to write blogs because there's not that, that blogs

00:32:53.100 --> 00:32:57.680
were huge for a while and then everybody was doing it and now not so much.

00:32:57.680 --> 00:33:01.560
And so you do get noticed more if you're writing a blog.

00:33:01.560 --> 00:33:03.080
I think that that's a good thing.

00:33:03.080 --> 00:33:06.920
Plus you can link, we can link to it easier if you've, if you got your article on a blog.

00:33:07.340 --> 00:33:13.660
But also, and RSS wise, Planet Python is something I still check out.

00:33:13.660 --> 00:33:18.720
So planetpython.org, if you haven't heard of it, it has, you can either have the full

00:33:18.720 --> 00:33:23.600
content so you can read and it pulls all of this through RSS from, from different blogs.

00:33:23.600 --> 00:33:30.900
And so if you have, and titles only, if you have a, a Python blog or you're starting one,

00:33:30.900 --> 00:33:35.260
check out Python, planetpython.org and try to get your name on the list.

00:33:35.560 --> 00:33:39.860
Maybe put out like three or four articles first and then, and then try to get your name

00:33:39.860 --> 00:33:41.560
on the list or your blog on the list.

00:33:41.560 --> 00:33:45.980
And that way it gets seen by people like us, even if you don't notify us.

00:33:45.980 --> 00:33:47.720
So yeah, that's, that's excellent.

00:33:47.720 --> 00:33:52.220
I didn't subscribe to that because I feel like it's a little bit too much of everything, but

00:33:52.220 --> 00:33:56.300
I went through all the recent posts and said, this writer looks interesting or this source

00:33:56.300 --> 00:33:58.180
looks interesting and like subscribe directly.

00:33:58.180 --> 00:34:02.420
So I kind of used it to, to start my exploration of those things I wanted to subscribe to.

00:34:02.660 --> 00:34:02.860
Yeah.

00:34:02.860 --> 00:34:03.560
Not a bad idea.

00:34:03.560 --> 00:34:06.260
And you know, they have RSS feeds cause they're, they're in here.

00:34:06.260 --> 00:34:07.060
Exactly.

00:34:07.060 --> 00:34:12.040
I, since you brought it up, I just want to also point out like one of my roadblocks of writing

00:34:12.040 --> 00:34:16.400
a lot was, well, I don't have time to write like an article, something well thought out

00:34:16.400 --> 00:34:19.140
and you know, a thousand words and that, you know what?

00:34:19.220 --> 00:34:24.240
My, my new philosophy has been, let's just write like really short posts.

00:34:24.240 --> 00:34:29.200
Like here's one about a fun thing I did with spammers and it's like three paragraphs or here's

00:34:29.200 --> 00:34:31.200
one about installing something as a PWA.

00:34:31.200 --> 00:34:33.660
It's two pictures and four paragraphs.

00:34:33.660 --> 00:34:39.520
And you don't, you don't have to write essay like long essays to contribute interesting things

00:34:39.520 --> 00:34:40.000
and ideas.

00:34:40.000 --> 00:34:40.660
I think so.

00:34:40.660 --> 00:34:41.820
I just following up on that.

00:34:41.820 --> 00:34:42.220
Yeah.

00:34:42.220 --> 00:34:46.740
My, my thoughts are if it's going to be a thread, make it a post instead.

00:34:46.940 --> 00:34:47.640
Yeah, exactly.

00:34:47.640 --> 00:34:48.380
Exactly.

00:34:48.380 --> 00:34:49.180
All right.

00:34:49.180 --> 00:34:52.300
Well, my jokes have vanished.

00:34:52.300 --> 00:34:55.220
I had a cool joke on social media and it got taken down.

00:34:55.220 --> 00:34:58.080
It was, it was, it was really funny.

00:34:58.080 --> 00:34:58.880
It was totally benign.

00:34:58.880 --> 00:35:00.480
I don't know why it's gone, but whatever.

00:35:00.480 --> 00:35:06.400
And then by the way, following up on this, Jeremy Page says you can also RSS Mastodon users.

00:35:06.400 --> 00:35:07.120
Okay.

00:35:07.120 --> 00:35:08.880
That's, that's funny.

00:35:08.880 --> 00:35:12.380
And Mastodon hashtags as well.

00:35:12.380 --> 00:35:13.640
You can RSS those.

00:35:13.640 --> 00:35:14.060
Okay.

00:35:14.060 --> 00:35:14.540
Yeah.

00:35:14.540 --> 00:35:16.080
I follow the Python hashtag over there.

00:35:16.140 --> 00:35:17.420
I could RSS it, I suppose.

00:35:17.420 --> 00:35:18.240
Excellent.

00:35:18.240 --> 00:35:18.620
All right.

00:35:18.620 --> 00:35:19.060
Brian.

00:35:19.060 --> 00:35:21.060
So do you have a joke for us?

00:35:21.060 --> 00:35:21.600
Yeah.

00:35:21.600 --> 00:35:25.960
So speaking of Mastodon on Mastodon, I said, I'm getting, I'm getting a lot of great

00:35:25.960 --> 00:35:31.300
Python content on Mastodon, but I need some joke people to like, I need some nerd jokes.

00:35:31.300 --> 00:35:33.240
So I'm asking for people.

00:35:33.240 --> 00:35:37.040
And this, somebody didn't ask, tell me a person to follow.

00:35:37.040 --> 00:35:39.240
I'm still looking for people to follow with good jokes.

00:35:39.300 --> 00:35:45.820
So if you send them my way, if I, or send me their way, if, if you know of people, but here's

00:35:45.820 --> 00:35:47.660
one that I got from somebody on Mastodon.

00:35:47.660 --> 00:35:50.220
So I got it from, who did I get this from?

00:35:50.220 --> 00:35:51.280
I should probably give credit.

00:35:52.320 --> 00:35:54.520
So this came from Steven Box.

00:35:54.520 --> 00:35:55.400
Nice.

00:35:55.400 --> 00:35:56.060
Thanks, Steven.

00:35:56.060 --> 00:35:59.600
So exit condition from monkeyuser.com.

00:35:59.600 --> 00:36:02.520
So it took me a while to get this.

00:36:03.680 --> 00:36:10.120
So there's a couple of people sitting at a desk, paraprogramming, I'm guessing, and then

00:36:10.120 --> 00:36:11.240
somebody else is frustrated.

00:36:11.240 --> 00:36:12.660
They hear, wait.

00:36:12.660 --> 00:36:15.560
And he says, the frustrated guy says, that's it.

00:36:15.560 --> 00:36:20.360
And, and, and he starts going towards a door that's labeled recursion.

00:36:20.360 --> 00:36:23.920
And somebody says, wait, there's no, I'm going in.

00:36:23.920 --> 00:36:30.120
He goes in and he gets into the other side and says, wait, he's the person trying to say

00:36:30.120 --> 00:36:30.620
wait.

00:36:31.260 --> 00:36:32.340
Oh my gosh.

00:36:32.340 --> 00:36:34.400
There's no exit condition.

00:36:34.400 --> 00:36:38.940
So that's a dumb joke, but it's really good.

00:36:38.940 --> 00:36:44.200
And it's got some clever, the cartoon is clever where like the speech of the other

00:36:44.200 --> 00:36:45.260
one is off screen.

00:36:45.260 --> 00:36:48.760
So it kind of looks like it comes from the original group, but in fact is coming from the

00:36:48.760 --> 00:36:50.140
recursion of the first one.

00:36:50.140 --> 00:36:51.680
And yeah, it's, yeah.

00:36:51.680 --> 00:36:52.200
Okay.

00:36:52.200 --> 00:36:53.120
Well, one more.

00:36:53.120 --> 00:36:57.060
somebody said, you, I should follow, Olafur.

00:36:57.060 --> 00:36:57.960
Why?

00:36:57.960 --> 00:36:59.740
Anyways.

00:37:00.180 --> 00:37:02.500
I just thought this was dumb and funny.

00:37:02.500 --> 00:37:03.740
Bobby pin.

00:37:03.740 --> 00:37:06.720
No, I go by my full name, Robert Pindle.

00:37:06.720 --> 00:37:10.220
And it reminded me of the Bobby tables thing.

00:37:10.220 --> 00:37:11.240
So yeah, that's exactly.

00:37:11.240 --> 00:37:12.360
I love it.

00:37:12.360 --> 00:37:12.900
All right.

00:37:12.900 --> 00:37:16.420
Well, thank you everyone for listening and Brian, thanks for being here.

00:37:16.420 --> 00:37:16.960
Thank you.

00:37:16.960 --> 00:37:17.340
Yeah.

00:37:17.340 --> 00:37:18.520
Bye everyone.

00:37:18.520 --> 00:37:19.020
Bye.

00:37:19.020 --> 00:37:19.080
Bye.

00:37:20.260 --> 00:37:23.020
I hope you all enjoyed this crossover Python bytes episode.

00:37:23.020 --> 00:37:25.780
If you did, please consider subscribing to Python bytes.

00:37:25.780 --> 00:37:27.220
If you don't already do so.

00:37:27.220 --> 00:37:31.720
Thanks for being part of talk Python to me, have a great new year and I'll see you in 2023.

