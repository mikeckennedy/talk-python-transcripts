WEBVTT

00:00:00.000 --> 00:00:00.840
- Hello, YouTube.


00:00:00.840 --> 00:00:01.680
Hello, Nathaniel.


00:00:01.680 --> 00:00:04.280
- Hey, how's it going?


00:00:04.280 --> 00:00:05.440
- Hey, it's going really well.


00:00:05.440 --> 00:00:08.360
Thanks for being here on the live stream at the moment


00:00:08.360 --> 00:00:10.440
and on the podcast very soon.


00:00:10.440 --> 00:00:12.080
After everyone out there watching,


00:00:12.080 --> 00:00:13.440
thank you for being here.


00:00:13.440 --> 00:00:14.760
If you've got comments, thoughts,


00:00:14.760 --> 00:00:16.000
throw them out into the live chat.


00:00:16.000 --> 00:00:17.320
We'll try to make them part of the show.


00:00:17.320 --> 00:00:19.040
If you're watching later, of course,


00:00:19.040 --> 00:00:22.600
thanks for being here, but no live comments in the past.


00:00:22.600 --> 00:00:25.080
All right, and with that, let's kick it off, huh?


00:00:25.080 --> 00:00:26.240
- Sounds good.


00:00:26.240 --> 00:00:27.080
- All right.


00:00:28.160 --> 00:00:33.160
All right. Nathaniel, welcome back to Talk Python To Me.


00:00:33.160 --> 00:00:34.880
- How's it going?


00:00:34.880 --> 00:00:36.600
- It's going real well. It's going real well.


00:00:36.600 --> 00:00:41.100
We're on the eve of the eve of PyCon. How about that?


00:00:41.100 --> 00:00:43.960
- Okay, yeah.


00:00:43.960 --> 00:00:46.240
- I don't know how many, maybe it's the third,


00:00:46.240 --> 00:00:48.920
the eve to the third, but we're very near PyCon.


00:00:48.920 --> 00:00:50.440
I'm pretty excited.


00:00:50.440 --> 00:00:53.360
- Yeah. Anti-penultimate eve. I don't know.


00:00:53.360 --> 00:00:56.440
- The penultimate eve, perhaps? Yeah, exactly.


00:00:56.440 --> 00:01:00.740
So I suspect a lot of people will be listening to this show


00:01:00.740 --> 00:01:01.900
on their way to PyCon.


00:01:01.900 --> 00:01:04.440
So if you are, awesome.


00:01:04.440 --> 00:01:05.400
Come say hello to me.


00:01:05.400 --> 00:01:06.840
I'm going to be doing some live shows,


00:01:06.840 --> 00:01:08.300
ask me anything, some various other things.


00:01:08.300 --> 00:01:09.760
Are you going to be at PyCon this year?


00:01:09.760 --> 00:01:12.240
- I'm not, I'm not unfortunately.


00:01:12.240 --> 00:01:13.720
- So they're going to have to just shoot you a message


00:01:13.720 --> 00:01:17.800
on Twitter or on Mastodon or something like that, right?


00:01:17.800 --> 00:01:19.400
- Yeah, I'm easy to find.


00:01:19.400 --> 00:01:21.240
- Yeah.


00:01:21.240 --> 00:01:22.240
- Whatever, yeah.


00:01:22.240 --> 00:01:23.760
- Yeah, excellent.


00:01:23.760 --> 00:01:27.000
Cool, well, everyone going to PyCon,


00:01:27.000 --> 00:01:30.120
hope you have a great time and do come say hi.


00:01:30.120 --> 00:01:35.120
And with that, we're gonna be talking about this project,


00:01:35.120 --> 00:01:40.160
this new PEP about distributing Python itself,


00:01:40.160 --> 00:01:42.280
kind of like you distribute Python packages,


00:01:42.280 --> 00:01:44.380
but a little bit more.


00:01:44.380 --> 00:01:45.220
Why not?


00:01:45.220 --> 00:01:46.640
I mean, it seems pretty reasonable to me


00:01:46.640 --> 00:01:50.920
and I'm super, super excited to see you work in this area


00:01:50.920 --> 00:01:55.640
because Python is so strong in so many areas


00:01:55.640 --> 00:01:59.800
and there's just a couple of like really big gaps


00:01:59.800 --> 00:02:04.180
that other technologies have nailed so well.


00:02:04.180 --> 00:02:07.800
Two of them that I see that are super significant


00:02:07.800 --> 00:02:10.120
is like, "Hey, Michael, I wanna build a mobile app.


00:02:10.120 --> 00:02:11.440
"How do I do that in Python?"


00:02:11.440 --> 00:02:12.600
Or, "I wanna build a desktop app.


00:02:12.600 --> 00:02:13.600
"How do I do that in Python?"


00:02:13.600 --> 00:02:18.160
Like, I'm not sure you should even think about doing like,


00:02:18.160 --> 00:02:19.800
desktop maybe, mobile.


00:02:20.760 --> 00:02:24.020
I mean, Kivy is great, but it's not like a general purpose


00:02:24.020 --> 00:02:24.980
UI toolkit.


00:02:24.980 --> 00:02:26.780
And so that's the one.


00:02:26.780 --> 00:02:29.100
The other is, hey, I have an application.


00:02:29.100 --> 00:02:34.040
I want to give it to someone who is not a developer


00:02:34.040 --> 00:02:36.080
and have them run it, right?


00:02:36.080 --> 00:02:38.500
And there are some tools that address that.


00:02:38.500 --> 00:02:39.540
But one of them is just like,


00:02:39.540 --> 00:02:41.480
well, how do they get Python at all?


00:02:41.480 --> 00:02:44.740
And your product, your pep, and some of the ideas


00:02:44.740 --> 00:02:47.900
relate specifically to how do we make it easier


00:02:47.900 --> 00:02:51.180
to get a pre-built non-admin,


00:02:51.180 --> 00:02:54.220
not installed for the whole system, Python for somebody


00:02:54.220 --> 00:02:57.980
so they can run an app or even for developers, right?


00:02:57.980 --> 00:03:02.540
- Yeah, I mean, in fact, I mean, I'm a developer,


00:03:02.540 --> 00:03:05.820
so that's kind of in some ways the original use case,


00:03:05.820 --> 00:03:06.740
you know, scratch your own itch.


00:03:06.740 --> 00:03:08.300
- Yeah, of course.


00:03:08.300 --> 00:03:09.300
- But yeah, I mean, it's just,


00:03:09.300 --> 00:03:12.600
it's a very general capability, I think, once you have it.


00:03:12.600 --> 00:03:17.780
So yeah, I mean, the motivation there is basically like,


00:03:17.780 --> 00:03:20.900
there are lots and lots of ways to get Python, right?


00:03:20.900 --> 00:03:23.860
You can get it from the Windows Store,


00:03:23.860 --> 00:03:26.180
it comes with pre-installed on your Mac,


00:03:26.180 --> 00:03:28.060
but not a very good one.


00:03:28.060 --> 00:03:30.140
- Yeah, not quite, sort of.


00:03:30.140 --> 00:03:32.140
- But there's also Homebrew or PyEnv


00:03:32.140 --> 00:03:34.140
or your Linux distro has it,


00:03:34.140 --> 00:03:37.180
and you can get it through Conda.


00:03:37.180 --> 00:03:38.860
And if you download Blender,


00:03:38.860 --> 00:03:40.700
oh, there's secretly a Python inside.


00:03:40.700 --> 00:03:42.620
You know, like, it's just,


00:03:42.620 --> 00:03:45.380
there's just so many different ways to do it.


00:03:45.380 --> 00:03:46.380
And that's great.


00:03:46.380 --> 00:03:51.780
know, like it's good to have all these options. They all serve different use cases. But it's


00:03:51.780 --> 00:03:57.380
sort of silly that, you know, it's obviously it's, you know, it's flexible. There's lots


00:03:57.380 --> 00:04:02.420
of ways to do it. But there's no way to just be like, okay, like I just want a zip file.


00:04:02.420 --> 00:04:06.740
That's Python. And it's like a standard way that's like supported and, you know, kind


00:04:06.740 --> 00:04:12.140
of we all use so we can all sort of share benefits and improvements and all of that.


00:04:12.140 --> 00:04:14.660
So that's kind of the key.


00:04:14.660 --> 00:04:16.500
The PEP is not that innovative in terms


00:04:16.500 --> 00:04:18.500
of what it's actually doing.


00:04:18.500 --> 00:04:20.900
It's a zip file with Python in it.


00:04:20.900 --> 00:04:23.580
But it's just sort of trying to do kind of the logistics


00:04:23.580 --> 00:04:25.500
of like, OK, but let's all agree on how


00:04:25.500 --> 00:04:27.260
we're going to put it on PyPI.


00:04:27.260 --> 00:04:29.180
Let's have tags and stuff so tools


00:04:29.180 --> 00:04:30.760
can figure out what they're looking at


00:04:30.760 --> 00:04:32.060
and do stuff automatically.


00:04:32.060 --> 00:04:34.500
And I think that unlocks a lot of use cases, just


00:04:34.500 --> 00:04:36.820
that one simple change.


00:04:36.820 --> 00:04:37.940
I think it does as well.


00:04:37.940 --> 00:04:42.040
I mean, your abstract is one of the more concise ones


00:04:42.040 --> 00:04:42.880
I would say.


00:04:42.880 --> 00:04:43.720
- Sure, yeah.


00:04:43.720 --> 00:04:47.240
- Tell people about the abstract here.


00:04:47.240 --> 00:04:49.840
- Yeah, the abstract on the PEP is,


00:04:49.840 --> 00:04:52.720
it's quote, "Like wheels,


00:04:52.720 --> 00:04:54.440
but instead of a prebuilt Python package,


00:04:54.440 --> 00:04:56.520
it's a prebuilt Python interpreter."


00:04:56.520 --> 00:04:57.480
That is the full abstract.


00:04:57.480 --> 00:04:59.520
I figured that basically, you know,


00:04:59.520 --> 00:05:01.280
tells people what they need to know.


00:05:01.280 --> 00:05:07.420
- Yeah, so the idea is kind of like you would say,


00:05:07.420 --> 00:05:09.520
pip install request.


00:05:09.520 --> 00:05:13.480
you might say pip install Python 3.11,


00:05:13.480 --> 00:05:15.600
except for that you can't use the word pip


00:05:15.600 --> 00:05:17.100
because pip is built on Python.


00:05:17.100 --> 00:05:19.320
And so you need Python to run.


00:05:19.320 --> 00:05:21.140
I mean, it's a little bit circular there.


00:05:21.140 --> 00:05:24.380
So you kind of need something outside of Python,


00:05:24.380 --> 00:05:26.620
but conceptually it's,


00:05:26.620 --> 00:05:28.340
I have these things I need to run my app.


00:05:28.340 --> 00:05:32.720
I need requests, SQLAlchemy and beautiful soup.


00:05:32.720 --> 00:05:33.900
I also need Python 3.11.


00:05:33.900 --> 00:05:35.060
So those are my dependencies.


00:05:35.060 --> 00:05:36.360
Give me that, right?


00:05:36.360 --> 00:05:37.200
- Yeah.


00:05:38.500 --> 00:05:42.580
And I mean, you could even imagine potentially pip install Python 3.11


00:05:42.580 --> 00:05:43.540
working, I suppose.


00:05:43.540 --> 00:05:46.060
Like, you would need some Python to run pip.


00:05:46.060 --> 00:05:49.660
But once you have that, then it's probably still convenient to be able to say,


00:05:49.660 --> 00:05:53.980
OK, actually, shoot, I got this bug report saying in 3.11.2 specifically,


00:05:53.980 --> 00:05:54.780
there's some issue.


00:05:54.780 --> 00:05:56.380
I'm not sure if I can reproduce it.


00:05:56.380 --> 00:06:01.500
Like, being able to just grab that in one command, pretty useful.


00:06:01.500 --> 00:06:06.060
But that said, yeah, it's not necessarily--


00:06:06.060 --> 00:06:08.140
PIP isn't necessarily the target.


00:06:08.140 --> 00:06:11.700
I've been working on some stuff there as well.


00:06:11.700 --> 00:06:13.340
I don't know if you want to go into that.


00:06:13.340 --> 00:06:15.980
- Yeah, we'll definitely get into it.


00:06:15.980 --> 00:06:19.380
I think you need something a little bit on the outside


00:06:19.380 --> 00:06:21.620
and I think ideally doesn't depend on Python


00:06:21.620 --> 00:06:23.260
being on the system because that,


00:06:23.260 --> 00:06:28.860
it would be perfectly useful for it to depend on Python.


00:06:28.860 --> 00:06:29.680
- Right.


00:06:29.680 --> 00:06:30.580
- And this gives you a different version.


00:06:30.580 --> 00:06:32.420
This gives you a way to quickly toggle


00:06:32.420 --> 00:06:34.820
between these versions and these different setups.


00:06:34.820 --> 00:06:37.560
But if you could omit that dependency on Python,


00:06:37.560 --> 00:06:42.120
all of a sudden you give away to give it to people who are not developers and use cases where it's


00:06:42.120 --> 00:06:46.600
not just I already have Python and I need to do maybe you're a developer but you're not a Python


00:06:46.600 --> 00:06:52.840
developer should you have to manage your own Python installation so that you can use you know


00:06:52.840 --> 00:06:57.720
something that needs Python to run against your source code right that is not Python so there's


00:06:57.720 --> 00:07:03.720
there's a lot of scenarios where I think it gets unlocked if you use a different foundation. Yeah


00:07:04.520 --> 00:07:06.680
Some of the-- one of the audiences definitely


00:07:06.680 --> 00:07:09.600
I have in mind here is people with taking


00:07:09.600 --> 00:07:11.320
their very first ever programming course


00:07:11.320 --> 00:07:12.920
on the first day of class.


00:07:12.920 --> 00:07:15.520
Right now, it's pretty awkward that you're like, OK, well,


00:07:15.520 --> 00:07:17.000
first you have to go to python.org


00:07:17.000 --> 00:07:19.640
and then click through here and click there and download that.


00:07:19.640 --> 00:07:21.520
Oh, wait, no, not that version.


00:07:21.520 --> 00:07:23.520
Right, oh, did you forget to check to put in your path?


00:07:23.520 --> 00:07:24.000
Oh, dear.


00:07:24.000 --> 00:07:24.500
Hold on.


00:07:24.500 --> 00:07:26.520
Yeah, and oh, no, do you use the PyLauncher?


00:07:26.520 --> 00:07:27.760
Are you on Windows?


00:07:27.760 --> 00:07:31.280
It's just this extra fiddliness.


00:07:31.280 --> 00:07:33.360
And it's funny, we've spent all this effort


00:07:33.360 --> 00:07:38.480
the last few years, getting wheels to the point where they can just work. You can just pip install


00:07:38.480 --> 00:07:42.640
NumPy and it works everywhere, stuff like that. But Python itself isn't there yet.


00:07:42.640 --> 00:07:52.800
Another use case, maybe my primary use case, audience I have in mind is I develop Python


00:07:52.800 --> 00:08:01.200
packages and it's open source and distributed on PyPI, stuff like Trio. And so I have the problem


00:08:01.200 --> 00:08:05.280
of, you know, I want to be welcoming to new contributors, right? I want to, you know,


00:08:05.280 --> 00:08:10.080
bring them in, get them started first, quickly. They're volunteers, so like, I don't want them


00:08:10.080 --> 00:08:14.160
like faffing around and struggling and getting stuck trying to just like run the tests or


00:08:14.160 --> 00:08:18.880
anything like that, right? Like both that's just a waste of time. It's like kind of rude and


00:08:18.880 --> 00:08:23.120
inconsiderate. And it's also, you know, there's likely they'll just give up, you know, if it's


00:08:23.120 --> 00:08:26.960
just a casual, like, you know, they aren't really invested yet. It's just something they're doing


00:08:26.960 --> 00:08:34.960
for fun or out of interest. I really want to make that easy for them. And so part of the vision


00:08:34.960 --> 00:08:40.320
here is like, you know, be able to say, oh, yeah, so you check out Trio, you type this git clone


00:08:40.320 --> 00:08:48.720
command, and then you have some kind of Python management tool installed. You type that tool,


00:08:48.720 --> 00:08:52.640
you run tests, and it makes sure you get the right version of Python and set up the environment


00:08:52.640 --> 00:08:56.600
correctly and then it executes it for you and it knows what tests are, how to run the


00:08:56.600 --> 00:09:01.760
tests in this project as it looks at, I don't know, pyproject.toml or whatever.


00:09:01.760 --> 00:09:05.940
And so just sort of capturing all, we have all those pieces, but we don't really have


00:09:05.940 --> 00:09:11.880
anything that kind of brings them all together into that, like just type one thing, that's


00:09:11.880 --> 00:09:12.880
it.


00:09:12.880 --> 00:09:14.560
It's going, and it just works.


00:09:14.560 --> 00:09:19.320
We don't have many, we honestly don't have many tools that are outside looking in, in


00:09:19.320 --> 00:09:20.320
Python.


00:09:20.320 --> 00:09:26.560
of our tooling and our infrastructure is you have Python. Now, now you start with the tools.


00:09:26.560 --> 00:09:30.640
Now you install it. Now you install Black or Ruff or other.


00:09:30.640 --> 00:09:36.320
Yeah, there's just this kind of very old assumption, which I mean, it made sense like


00:09:36.320 --> 00:09:40.880
10, 15, 20 years ago, where sort of everything was sort of installed manually. And of course,


00:09:40.880 --> 00:09:44.160
you have, you're going to go through some work to like get set up with Python. It's the foundation


00:09:44.160 --> 00:09:49.040
of your whole environment. And then you to kind of we add stuff to make it easier on top of that,


00:09:49.040 --> 00:09:54.400
But I think it's time to go back and re-evaluate that foundational assumption.


00:09:54.400 --> 00:10:00.240
Yeah, absolutely. So you mentioned Trio. I know before we dive too much further in,


00:10:00.240 --> 00:10:06.480
I want to give you a chance to let the folks know what you're up to. We'll talk about Trio


00:10:06.480 --> 00:10:14.960
at the end if we've got time. But what have you been up to since June 29, 2018, five years ago?


00:10:14.960 --> 00:10:16.640
Right, last time I was on the podcast.


00:10:16.640 --> 00:10:17.840
Yeah, last time you were on the show.


00:10:18.400 --> 00:10:20.720
Yeah.


00:10:20.720 --> 00:10:25.160
Wow, that was really early in Trio's life, I guess, actually.


00:10:25.160 --> 00:10:30.080
So I mean, I've had a lot of just real life has happened.


00:10:30.080 --> 00:10:33.800
Then I was sick for a while and trying


00:10:33.800 --> 00:10:38.280
to kind of get back on my feet, did some consulting,


00:10:38.280 --> 00:10:39.760
just started a new job.


00:10:39.760 --> 00:10:42.480
So it's kind of a lot of distractions.


00:10:42.480 --> 00:10:49.200
But also, yeah, I think Trio is still--


00:10:49.200 --> 00:10:51.200
I still like it a lot.


00:10:51.200 --> 00:10:54.040
It's definitely had more influence.


00:10:54.040 --> 00:10:56.460
Actually, had I even published the Structured Concurrency blog


00:10:56.460 --> 00:10:56.960
post then?


00:10:56.960 --> 00:10:58.120
I don't remember.


00:10:58.120 --> 00:10:59.960
I feel like-- it sounds familiar to me,


00:10:59.960 --> 00:11:01.320
even though it's been five years.


00:11:01.320 --> 00:11:02.360
It does sound familiar.


00:11:02.360 --> 00:11:03.920
I do think so.


00:11:03.920 --> 00:11:06.920
But what has happened since then certainly


00:11:06.920 --> 00:11:11.680
is Python has seen some of these ideas and adopted them.


00:11:11.680 --> 00:11:15.680
like 311's concurrency stuff.


00:11:15.680 --> 00:11:17.000
- Yeah, so there's been a,


00:11:17.000 --> 00:11:20.000
like sort of the influence has gone a lot further


00:11:20.000 --> 00:11:22.920
than I ever expected, both actually in other languages.


00:11:22.920 --> 00:11:27.440
So, yeah, like Swift and Kotlin


00:11:27.440 --> 00:11:31.720
and have all kind of adopted ideas from here.


00:11:31.720 --> 00:11:35.640
Java apparently is making some big changes coming up soon


00:11:35.640 --> 00:11:36.920
with a whole new concurrency setup.


00:11:36.920 --> 00:11:38.280
And they're like saying like, yeah,


00:11:38.280 --> 00:11:40.560
we're basing it on that Nathaniel Smith's


00:11:40.560 --> 00:11:41.560
random blog post.


00:11:41.560 --> 00:11:43.560
It's kind of like, okay, sure.


00:11:43.560 --> 00:11:45.680
- Interesting, okay, amazing.


00:11:45.680 --> 00:11:47.640
- Okay, you know, it's very flattering.


00:11:47.640 --> 00:11:54.040
But yeah, and yes, also in the Python itself,


00:11:54.040 --> 00:11:56.600
it's sort of complicated 'cause we,


00:11:56.600 --> 00:11:58.160
it's sort of this awkward situation


00:11:58.160 --> 00:12:00.320
where there's async.io that's in the standard library


00:12:00.320 --> 00:12:02.520
and then there's my sort of competing thing, Trio,


00:12:02.520 --> 00:12:04.480
which, yeah, I guess we should say,


00:12:04.480 --> 00:12:08.240
Trio is an async library for Python that's portable.


00:12:08.240 --> 00:12:11.120
It's sort of an alternative to async.io.


00:12:11.120 --> 00:12:13.440
There are some tools to let you use both at once,


00:12:13.440 --> 00:12:16.480
but it's not a library for async.io.


00:12:16.480 --> 00:12:19.240
It's its own thing.


00:12:19.240 --> 00:12:24.360
And so obviously, we all wish there


00:12:24.360 --> 00:12:27.720
was just one obvious choice.


00:12:27.720 --> 00:12:29.200
I kind of looked--


00:12:29.200 --> 00:12:31.440
but async.io is also in this very difficult position,


00:12:31.440 --> 00:12:35.560
being in the standard library and being sort of built up


00:12:35.560 --> 00:12:36.080
over time.


00:12:36.080 --> 00:12:37.880
And a lot of it was designed before we even


00:12:37.880 --> 00:12:40.200
stuff like Async/Await.


00:12:40.200 --> 00:12:42.420
So there's just a lot of machinery


00:12:42.420 --> 00:12:44.220
in there that's already committed


00:12:44.220 --> 00:12:46.920
to other ways of doing things, and it's very hard to change.


00:12:46.920 --> 00:12:48.360
And Trio was like, well, look, we


00:12:48.360 --> 00:12:51.280
have all these modern things, and some new ideas coming in,


00:12:51.280 --> 00:12:55.840
like structured concurrency is a better way to write


00:12:55.840 --> 00:12:57.440
concurrent programs.


00:12:57.440 --> 00:13:00.800
And it was able, since it had a clean slate, to really do that


00:13:00.800 --> 00:13:01.920
all from the start.


00:13:01.920 --> 00:13:04.480
It'd be much simpler.


00:13:04.480 --> 00:13:07.360
So that was important, you know,


00:13:07.360 --> 00:13:08.240
to have it be its own thing,


00:13:08.240 --> 00:13:09.800
just so we could, you know, work that stuff out.


00:13:09.800 --> 00:13:11.120
Then there's a question of, okay, now what?


00:13:11.120 --> 00:13:12.120
Do we all switch to Trio?


00:13:12.120 --> 00:13:13.880
Do we move it back into my sync IO?


00:13:13.880 --> 00:13:15.400
Do they both continue?


00:13:15.400 --> 00:13:18.040
- That's been a debate for some really popular things.


00:13:18.040 --> 00:13:19.960
I think that is interesting.


00:13:19.960 --> 00:13:22.820
A lot of people say, well, why is library X,


00:13:22.820 --> 00:13:26.280
which everyone uses, why is that not built into Python?


00:13:26.280 --> 00:13:28.360
Why do I need to pip install it?


00:13:28.360 --> 00:13:30.240
And a lot of times the answer is


00:13:30.240 --> 00:13:31.860
because making it part of Python


00:13:31.860 --> 00:13:35.020
will harm its ability to innovate and change.


00:13:35.020 --> 00:13:36.340
It'll slow it way down.


00:13:36.340 --> 00:13:36.940
Yeah.


00:13:36.940 --> 00:13:40.340
Like there was a whole debate some years ago about--


00:13:40.340 --> 00:13:42.340
we all know the HTTP client in Python,


00:13:42.340 --> 00:13:44.820
URLib or whatever, is just really bad.


00:13:44.820 --> 00:13:46.320
You should just never use it.


00:13:46.320 --> 00:13:48.260
And it's broken a lot of ways.


00:13:48.260 --> 00:13:50.580
You just don't use it.


00:13:50.580 --> 00:13:55.420
But we still ship it because it would be too disruptive


00:13:55.420 --> 00:13:56.300
to take it out.


00:13:56.300 --> 00:13:57.380
That's also why we can't change it.


00:13:57.380 --> 00:13:58.920
There's just too much code out there,


00:13:58.920 --> 00:14:01.420
depending on all the weird quirks.


00:14:01.420 --> 00:14:04.380
And we don't want to ship something else,


00:14:04.380 --> 00:14:08.340
because then it'll end up being like URL lib five years later.


00:14:08.340 --> 00:14:10.100
So it was a question of, should we


00:14:10.100 --> 00:14:11.680
put requests in the standard library,


00:14:11.680 --> 00:14:14.560
or URL lib 3, or one of these?


00:14:14.560 --> 00:14:17.900
And it's just, then you can't ship security fixes.


00:14:17.900 --> 00:14:19.140
You can't improve your API.


00:14:19.140 --> 00:14:25.260
You can't-- so as we've gotten better at packaging also,


00:14:25.260 --> 00:14:28.500
it's taken some of the pressure off the standard library


00:14:28.500 --> 00:14:30.140
to be all things to all people.


00:14:30.140 --> 00:14:33.180
And I think that's a good direction overall


00:14:33.180 --> 00:14:34.860
to be moving as an ecosystem.


00:14:34.860 --> 00:14:35.740
I agree.


00:14:35.740 --> 00:14:40.060
When the standard library first came into existence,


00:14:40.060 --> 00:14:41.900
there was no PyPI.


00:14:41.900 --> 00:14:43.700
And there was no package.


00:14:43.700 --> 00:14:46.340
It had to come with it, because how else are you


00:14:46.340 --> 00:14:47.020
going to get it?


00:14:47.020 --> 00:14:50.940
Hunt it down on Usenet and on base64 and code it.


00:14:50.940 --> 00:14:52.260
But what are you going to do?


00:14:52.260 --> 00:14:53.780
Yeah, or maybe you find it--


00:14:53.780 --> 00:14:55.780
you download, I don't know, Twisted or something


00:14:55.780 --> 00:14:56.980
like from an FTP site.


00:14:56.980 --> 00:14:58.900
Yeah, or an FTP site or something like that.


00:14:58.900 --> 00:15:04.580
good and have to put it in your pipe. Like it was all totally, yeah, knocking rocks together.


00:15:04.580 --> 00:15:13.380
Hope it's Flint and it creates a spark. Yeah. So I think the motivations and the


00:15:13.380 --> 00:15:21.140
decisions, the way you might lean in making the decisions are really different now. Like I would,


00:15:21.140 --> 00:15:26.020
even though we're already far down the road and making changes is breaking and doesn't make sense,


00:15:26.740 --> 00:15:29.740
it might make sense to ship less in the standard library,


00:15:29.740 --> 00:15:31.440
quite a bit less, and just say,


00:15:31.440 --> 00:15:33.780
"Oh, you're going to pip install some meta package


00:15:33.780 --> 00:15:36.120
that explodes out some section.


00:15:36.120 --> 00:15:38.740
I'm going to pip install the collections area.


00:15:38.740 --> 00:15:40.220
Boom, and now I got a bunch more."


00:15:40.220 --> 00:15:40.820
>> Yeah.


00:15:40.820 --> 00:15:41.820
>> Potentially, who knows?


00:15:41.820 --> 00:15:45.720
>> One thing I'd really like to see as a possible future there


00:15:45.720 --> 00:15:48.780
is moving some of the standard library


00:15:48.780 --> 00:15:51.580
into wheels that are installed by default.


00:15:51.580 --> 00:15:52.500
>> Yes, exactly.


00:15:52.500 --> 00:15:52.700
>> Exactly.


00:15:52.700 --> 00:15:55.980
>> So it's sort of this halfway house,


00:15:55.980 --> 00:15:58.300
where it's still the case you download Python, install it,


00:15:58.300 --> 00:15:59.180
they're there.


00:15:59.180 --> 00:16:01.820
So we don't just break everyone in the world who


00:16:01.820 --> 00:16:03.660
just assumes they're there.


00:16:03.660 --> 00:16:06.780
But then it gives us that--


00:16:06.780 --> 00:16:09.300
both in the long term, if it's like we want to get rid of it,


00:16:09.300 --> 00:16:10.220
it gives us--


00:16:10.220 --> 00:16:13.980
or push it out to PyPI or just remove it entirely.


00:16:13.980 --> 00:16:17.620
Then it gives us a way to do that more gradually.


00:16:17.620 --> 00:16:20.140
But also for libraries like Async.io


00:16:20.140 --> 00:16:22.380
that are big and complex and really


00:16:22.380 --> 00:16:25.540
would benefit from being able to have their own release cadence


00:16:25.540 --> 00:16:28.740
add bug fixes and deprecation cycles and all of that,


00:16:28.740 --> 00:16:31.540
then it's like, yeah, it still ships with Python,


00:16:31.540 --> 00:16:33.340
but then you can pip upgrade it.


00:16:33.340 --> 00:16:36.740
You're not stuck with that exact version.


00:16:36.740 --> 00:16:39.440
That could only change when a whole new Python release comes out,


00:16:39.440 --> 00:16:41.940
and you have to take all those changes together at once.


00:16:41.940 --> 00:16:44.740
Yeah, I've absolutely had this thought,


00:16:44.740 --> 00:16:49.040
and I think it's a really elegant solution,


00:16:49.040 --> 00:16:52.240
because on one hand, it lets the core developers focus more


00:16:52.240 --> 00:16:55.840
on the true essence of Python.


00:16:55.840 --> 00:16:58.040
And it lets it be used in more locations, right?


00:16:58.040 --> 00:17:01.800
Think PyScript, for example, or MicroPython, right?


00:17:01.800 --> 00:17:05.180
It might be that you create a central core


00:17:05.180 --> 00:17:08.280
that is exactly the same on all of these.


00:17:08.280 --> 00:17:09.120
You don't have to consider,


00:17:09.120 --> 00:17:11.880
like, of course, this is what runs, it runs everywhere.


00:17:11.880 --> 00:17:14.400
But you still get that backwards compatibility,


00:17:14.400 --> 00:17:15.520
and you get the ability to say,


00:17:15.520 --> 00:17:18.520
actually, I want the newest version of AsyncIO,


00:17:18.520 --> 00:17:22.200
because I want this more high-performance background


00:17:22.200 --> 00:17:27.720
worker or something. Yeah, or even just, I mean, for smaller, like, you know, I don't want the


00:17:27.720 --> 00:17:32.760
newest version of async.io because, like, I don't know if it works, but I want to install in a


00:17:32.760 --> 00:17:38.280
scratch environment this, like, development version so I can try it out and give them feedback before


00:17:38.280 --> 00:17:43.320
they, you know, really make the release and set the API in stone. And again, like, right now, like,


00:17:43.320 --> 00:17:48.120
you'd have to go build your own Python and it's like, it's just kind of a whole thing, right? You


00:17:48.120 --> 00:17:51.280
You can't just do install --pre.


00:17:51.280 --> 00:17:52.120
- Right, exactly.


00:17:52.120 --> 00:17:55.320
It's definitely more of a barrier


00:17:55.320 --> 00:17:57.520
for people who are just casually wanting to test stuff out.


00:17:57.520 --> 00:18:01.200
You gotta be pretty committed to getting Python 3.12,


00:18:01.200 --> 00:18:03.400
alpha six or whatever we're at, right?


00:18:03.400 --> 00:18:05.760
- Yeah. - Yeah, yeah, yeah.


00:18:05.760 --> 00:18:06.600
Indeed.


00:18:06.600 --> 00:18:08.640
Okay, very cool.


00:18:08.640 --> 00:18:10.760
Maybe we'll come back and dive into Trio a little bit more,


00:18:10.760 --> 00:18:12.840
but yeah, and what are you doing these days?


00:18:12.840 --> 00:18:15.560
You talked about doing a little consulting and...


00:18:15.560 --> 00:18:20.000
Well, yeah, so I just started a new job just like last week,


00:18:20.000 --> 00:18:20.920
week before, I guess.


00:18:20.920 --> 00:18:22.560
Yeah, it's been less than two weeks.


00:18:22.560 --> 00:18:23.520
>>Exciting.


00:18:23.520 --> 00:18:26.680
>>Yeah, I'm working at Anthropic,


00:18:26.680 --> 00:18:28.720
which I don't know if anyone's heard of.


00:18:28.720 --> 00:18:32.800
It's still somewhat stealthy, but it's sort of--


00:18:32.800 --> 00:18:34.200
>>What's now?


00:18:34.200 --> 00:18:36.040
>>Yeah, I mean, quickly changing.


00:18:36.040 --> 00:18:38.640
I don't know the exact status currently.


00:18:38.640 --> 00:18:41.000
But yeah, so my understanding of the background


00:18:41.000 --> 00:18:43.760
here is that there's actually the team


00:18:43.760 --> 00:18:46.620
at OpenAI who trained GPT-3,


00:18:46.620 --> 00:18:51.480
just sort of sat down together and decided


00:18:51.480 --> 00:18:55.000
they really wanted to do more of like a pure focus


00:18:55.000 --> 00:18:58.120
on like interpretability and safety.


00:18:58.120 --> 00:18:59.280
Like how do you get these models?


00:18:59.280 --> 00:19:00.400
Like how do you know what these models


00:19:00.400 --> 00:19:01.680
are actually gonna do?


00:19:01.680 --> 00:19:03.480
And how do you get them to do what you want


00:19:03.480 --> 00:19:06.720
instead of kind of stuff like making things up


00:19:06.720 --> 00:19:09.800
or just, we've all kind of got the scene now


00:19:09.800 --> 00:19:12.200
how these large language models can go


00:19:12.200 --> 00:19:15.920
just all over the place, do all kinds of strange things.


00:19:15.920 --> 00:19:16.840
And they decided--


00:19:16.840 --> 00:19:19.160
>>Luis: There's even one of them being sued for slander,


00:19:19.160 --> 00:19:19.720
I believe.


00:19:19.720 --> 00:19:20.480
>>Tom: Yes.


00:19:20.480 --> 00:19:22.200
Yeah.


00:19:22.200 --> 00:19:24.120
>>Luis: Somebody in the UK, I think.


00:19:24.120 --> 00:19:26.600
>>Tom: Yeah, well, yeah, there's one that just,


00:19:26.600 --> 00:19:28.960
if you ask the model, can you give me


00:19:28.960 --> 00:19:32.280
some advantages of problems with sexual harassment in law


00:19:32.280 --> 00:19:32.960
schools?


00:19:32.960 --> 00:19:36.400
And it just picks five real law professors and makes up stuff.


00:19:36.400 --> 00:19:38.840
It's really, really bad.


00:19:38.840 --> 00:19:40.840
Yeah.


00:19:40.840 --> 00:19:42.640
And it like sites sources that are all made up.


00:19:42.640 --> 00:19:45.660
Like it's, you know, like they, you know, they're just,


00:19:45.660 --> 00:19:48.960
they're very powerful, but also not well understood


00:19:48.960 --> 00:19:51.520
or how to like kind of make it useful and safe.


00:19:51.520 --> 00:19:53.720
- Just a little bit of devil's advocate though.


00:19:53.720 --> 00:19:56.160
They are incredibly powerful


00:19:56.160 --> 00:19:58.360
and they are incredibly capable.


00:19:58.360 --> 00:20:00.000
And that's, I think part of the danger is you're like,


00:20:00.000 --> 00:20:01.120
oh my God, it knows this.


00:20:01.120 --> 00:20:01.960
Oh my gosh.


00:20:01.960 --> 00:20:04.240
It understood all of that.


00:20:04.240 --> 00:20:07.440
And I ask it, so the fifth thing it says,


00:20:07.440 --> 00:20:08.840
you're like, well, at this point I'm convinced.


00:20:08.840 --> 00:20:10.640
So it really is on.


00:20:10.640 --> 00:20:12.180
And then maybe that's the made up one.


00:20:12.180 --> 00:20:14.980
And I think that's the danger is 'cause it's actually,


00:20:14.980 --> 00:20:16.620
it's almost an uncanny valley.


00:20:16.620 --> 00:20:18.100
It's close enough to right,


00:20:18.100 --> 00:20:19.420
but you're like, okay, this thing's right.


00:20:19.420 --> 00:20:20.420
It knows. - Yeah.


00:20:20.420 --> 00:20:21.700
So, yeah, so personally,


00:20:21.700 --> 00:20:24.140
like I'm still kind of up in the air on


00:20:24.140 --> 00:20:27.060
how impactful it'll be, where the impact will be.


00:20:27.060 --> 00:20:29.420
Like I think it's just a lot of open questions.


00:20:29.420 --> 00:20:31.500
- You haven't bought a farm,


00:20:31.500 --> 00:20:33.420
like a goat farm in the woods


00:20:33.420 --> 00:20:36.140
'cause you've just given technologies a blow out now?


00:20:36.140 --> 00:20:37.700
Okay, all right, good to hear.


00:20:39.620 --> 00:20:42.700
But I guess I do have stock options now, apparently.


00:20:42.700 --> 00:20:44.260
Or I will at some point if they vest.


00:20:44.260 --> 00:20:46.540
So I guess that's the other route.


00:20:46.540 --> 00:20:49.260
But no, but anyway.


00:20:49.260 --> 00:20:51.980
So I was just saying, so yeah, so Anthropics,


00:20:51.980 --> 00:20:53.940
just interesting company where you actually


00:20:53.940 --> 00:20:56.580
get to play with some of those big models internally.


00:20:56.580 --> 00:21:01.660
They're kind of working on releasing products now.


00:21:01.660 --> 00:21:04.620
But it's also been kind of just really interesting


00:21:04.620 --> 00:21:06.980
to kind of get the sense internally of like,


00:21:06.980 --> 00:21:09.460
it's really kind of this like research culture,


00:21:09.460 --> 00:21:10.860
which is appealing to me.


00:21:10.860 --> 00:21:12.940
I'm sort of coming out of academia,


00:21:12.940 --> 00:21:15.420
have a lot of like numerics background.


00:21:15.420 --> 00:21:18.820
And what's also as interesting is that part of the reason


00:21:18.820 --> 00:21:21.820
we kind of connected is that apparently,


00:21:21.820 --> 00:21:23.860
it turns out a ton of their internal infrastructure


00:21:23.860 --> 00:21:24.680
runs on Trio.


00:21:24.680 --> 00:21:29.340
So they're partly hired me to support that


00:21:29.340 --> 00:21:30.760
and are actually giving me time


00:21:30.760 --> 00:21:33.620
to work on open source paid time.


00:21:33.620 --> 00:21:37.300
So actually they are funding this PEP 711,


00:21:39.060 --> 00:21:42.260
Python binary stuff, though they don't know it yet.


00:21:42.260 --> 00:21:43.100
- Now they do.


00:21:43.100 --> 00:21:45.060
- Yeah, if they listen to the podcast, they'll learn.


00:21:45.060 --> 00:21:46.780
- That's great, that's really cool.


00:21:46.780 --> 00:21:49.620
It looks like an interesting area to be working.


00:21:49.620 --> 00:21:52.700
I agree that the research oriented places,


00:21:52.700 --> 00:21:55.460
they are fun area to work, right?


00:21:55.460 --> 00:21:57.780
- Yeah, and there's just a lot of flexibility kind of,


00:21:57.780 --> 00:22:02.060
you know, like it's clear this stuff is gonna have effects,


00:22:02.060 --> 00:22:03.820
which effects and how big and all that, I don't know,


00:22:03.820 --> 00:22:07.140
but, you know, being at ground zero is, you know.


00:22:07.140 --> 00:22:07.960
- It's exciting.


00:22:07.960 --> 00:22:08.860
- It's really exciting, yeah.


00:22:08.860 --> 00:22:11.740
and a lot of chance of maybe have some impact.


00:22:11.740 --> 00:22:12.580
- Cool. - Yeah.


00:22:12.580 --> 00:22:15.020
- All right, let's dive into the pip.


00:22:15.020 --> 00:22:16.020
The pip, the PEP.


00:22:16.020 --> 00:22:16.860
- The PEP.


00:22:16.860 --> 00:22:19.100
- That is not quite pip, but it's kind of like pip.


00:22:19.100 --> 00:22:20.500
Okay. - Yeah, okay.


00:22:20.500 --> 00:22:23.140
- So we talked a little bit about the motivation.


00:22:23.140 --> 00:22:28.340
We talked a little bit about what it is.


00:22:28.340 --> 00:22:31.700
Maybe tell us a bit about the spec.


00:22:31.700 --> 00:22:34.860
Like what does the PEP actually say?


00:22:34.860 --> 00:22:36.340
What is it actually trying to deliver?


00:22:36.340 --> 00:22:38.260
And we can talk about like the use cases


00:22:38.260 --> 00:22:41.420
and some of the tools for it and so on.


00:22:41.420 --> 00:22:44.580
- Yeah, I mean, and so, like I said,


00:22:44.580 --> 00:22:46.540
the abstract deal is like wheels,


00:22:46.540 --> 00:22:49.480
but it's an interpreter instead of a package.


00:22:49.480 --> 00:22:51.780
That's partly just sort of a tagline of how you use it,


00:22:51.780 --> 00:22:53.700
but it's actually also a lot about


00:22:53.700 --> 00:22:56.020
how the actual spec is written.


00:22:56.020 --> 00:22:57.460
It's just sort of like, well,


00:22:57.460 --> 00:23:03.300
we've done a ton of work over the last five, 10 years.


00:23:03.300 --> 00:23:04.640
A lot of people have put a lot of work


00:23:04.640 --> 00:23:06.620
into making wheels work, right?


00:23:06.620 --> 00:23:10.780
terms of like figure out, okay, how do we, you know, have metadata that's usable to like keep


00:23:10.780 --> 00:23:15.180
track of, you know, which packages are installed and their versions and which ones are compatible.


00:23:15.180 --> 00:23:20.540
And if for a binary build, like which systems can you put this on and, you know, all the many Linux


00:23:20.540 --> 00:23:26.460
work and just all of that stuff. And it's just like, well, you know, so we have wheels, we don't


00:23:26.460 --> 00:23:35.180
need to reinvent the wheel again. So I'm just sort of taking all of that. So it's just like, okay,


00:23:35.180 --> 00:23:38.540
it's mostly just a delta against the wheel spec.


00:23:38.540 --> 00:23:40.900
It's like, OK, in the wheel spec,


00:23:40.900 --> 00:23:43.220
you have this directory for metadata.


00:23:43.220 --> 00:23:45.820
I have that same directory, but I'm


00:23:45.820 --> 00:23:48.700
calling these Python binaries PyBys just


00:23:48.700 --> 00:23:51.500
to have a short name you can stick in a prefix--


00:23:51.500 --> 00:23:53.300
or sorry, in a file extension.


00:23:53.300 --> 00:23:55.140
Yeah, pybi.


00:23:55.140 --> 00:23:56.300
Yes.


00:23:56.300 --> 00:23:57.340
.pybi.


00:23:57.340 --> 00:23:58.260
I like it.


00:23:58.260 --> 00:23:59.260
Yeah.


00:23:59.260 --> 00:24:04.100
The PyPy, the interpreter, and PyPI, the package repository,


00:24:04.100 --> 00:24:07.060
confusing enough. I thought I'd add another near homonym.


00:24:07.060 --> 00:24:17.220
- Pi, pi, it's pi, bi. - Yeah. Anyway. But they look like, the file


00:24:17.220 --> 00:24:27.780
names look like wheels. Something like Cpython -version-miniLinux217.pibi. The context looks like wheels. They're


00:24:27.780 --> 00:24:33.820
basically just zip files. Instead of a .diskinfo directory, you have a pi,bi info directory,


00:24:33.820 --> 00:24:36.100
And it has a metadata file that's


00:24:36.100 --> 00:24:38.340
in the same format as wheel metadata files


00:24:38.340 --> 00:24:42.220
for the name and version and description, all that stuff.


00:24:42.220 --> 00:24:48.460
There are a few tweaks, basically just what you need


00:24:48.460 --> 00:24:50.620
specifically for interpreters.


00:24:50.620 --> 00:24:57.580
OK, so one thing that makes it a lot simpler


00:24:57.580 --> 00:25:01.060
is that there's only one interpreter in a Python


00:25:01.060 --> 00:25:02.380
environment, right?


00:25:02.380 --> 00:25:05.140
Whereas wheels are designed to be flexible and be installed


00:25:05.140 --> 00:25:07.340
into different kinds of Python environments


00:25:07.340 --> 00:25:09.060
with different layouts.


00:25:09.060 --> 00:25:13.520
A pyby is just a raw set of files.


00:25:13.520 --> 00:25:14.140
You unzip it.


00:25:14.140 --> 00:25:14.640
That's it.


00:25:14.640 --> 00:25:15.620
You're done.


00:25:15.620 --> 00:25:17.060
Where wheels, there's like, well,


00:25:17.060 --> 00:25:18.700
you want to put this in site packages,


00:25:18.700 --> 00:25:19.860
so you have to go find that.


00:25:19.860 --> 00:25:21.520
Whereas this goes in the bin directory,


00:25:21.520 --> 00:25:23.580
so you have to go find that and do the special--


00:25:23.580 --> 00:25:26.220
so that part's just not relevant.


00:25:26.220 --> 00:25:28.900
Leave that out.


00:25:28.900 --> 00:25:32.500
There's some slight-- we have to support


00:25:32.500 --> 00:25:37.020
symlinks, which wheels don't, mostly just because there's


00:25:37.020 --> 00:25:39.020
never been a big compelling reason.


00:25:39.020 --> 00:25:39.580
What's that?


00:25:39.580 --> 00:25:41.140
>> For the Windows folks out there, maybe,


00:25:41.140 --> 00:25:42.580
and others who just haven't been--


00:25:42.580 --> 00:25:44.180
what the heck are symlinks?


00:25:44.180 --> 00:25:45.780
>> Yeah, OK, well, so, yeah, symlink


00:25:45.780 --> 00:25:47.460
is a classic Unix concept.


00:25:47.460 --> 00:25:49.420
Though Windows does have them too now, I guess,


00:25:49.420 --> 00:25:54.220
where it's like a special magic file that,


00:25:54.220 --> 00:25:56.080
instead of having its actual contents,


00:25:56.080 --> 00:25:58.920
It just lists, says, go look at this other location


00:25:58.920 --> 00:26:01.400
on the file system for my content.


00:26:01.400 --> 00:26:06.400
- It's like an app shortcut, but for programs, not for UI.


00:26:06.400 --> 00:26:08.280
- Well, like built into the file system though.


00:26:08.280 --> 00:26:09.120
- Yes, exactly.


00:26:09.120 --> 00:26:11.080
So you try to open it, it goes to the other one.


00:26:11.080 --> 00:26:13.280
- Yeah, the operating system automatically opens


00:26:13.280 --> 00:26:14.920
that other file for you.


00:26:14.920 --> 00:26:17.480
But you could also look at,


00:26:17.480 --> 00:26:19.600
if you can say, can you show me the symlink


00:26:19.600 --> 00:26:21.640
and it'll tell you about it if you ask.


00:26:21.640 --> 00:26:24.920
But if you don't, then it just magically works.


00:26:24.920 --> 00:26:29.920
And it's mostly, it's just, it turns out that traditionally


00:26:29.920 --> 00:26:32.520
Unix Pythons tend to use these,


00:26:32.520 --> 00:26:36.320
both for things like, you know, in your bin directory,


00:26:36.320 --> 00:26:37.920
you'll have the Python executable,


00:26:37.920 --> 00:26:40.800
and then you'll also have Python 3 as a same link to Python,


00:26:40.800 --> 00:26:43.800
and Python 3.11 is a same link to Python 3.


00:26:43.800 --> 00:26:46.200
And so, you know, one to preserve that.


00:26:46.200 --> 00:26:48.760
And also, it turns out on macOS,


00:26:48.760 --> 00:26:51.600
they have this very specific kind of layout they want


00:26:51.600 --> 00:26:52.560
with like framework,


00:26:52.560 --> 00:26:54.180
like I don't really understand it in detail,


00:26:54.180 --> 00:26:56.540
but there's sort of like a how a macOS app


00:26:56.540 --> 00:26:57.500
is supposed to be structured.


00:26:57.500 --> 00:26:59.500
And that it turns out to involve symlinks.


00:26:59.500 --> 00:27:01.380
So we just have to support.


00:27:01.380 --> 00:27:04.500
That said, I mean, the way we support them is like,


00:27:04.500 --> 00:27:06.740
it turns out there's a standard way to put them in zips.


00:27:06.740 --> 00:27:08.000
So I say, let's do that.


00:27:08.000 --> 00:27:10.980
Like, again, really trying to keep this as boring


00:27:10.980 --> 00:27:11.820
as possible.


00:27:11.820 --> 00:27:14.260
And then the last thing--


00:27:14.260 --> 00:27:15.860
- I didn't know you could have a symlink in a zip file.


00:27:15.860 --> 00:27:16.680
That's crazy.


00:27:16.680 --> 00:27:20.300
- Yeah, it's an extension from the InfoZip folks,


00:27:20.300 --> 00:27:21.900
but that it's because to, I don't know.


00:27:21.900 --> 00:27:22.980
Zip's a strange format.


00:27:22.980 --> 00:27:27.620
kind of like an oral tradition as much as like an actual like specified format.


00:27:27.620 --> 00:27:34.260
But there's an entire documentary on zip and I believe the guy who came up with it.


00:27:34.260 --> 00:27:38.900
There's yeah it's even controversial in its early days. It's nuts. But yeah it's


00:27:38.900 --> 00:27:43.300
seemed to have won the compression de facto standard these days. Yeah it's definitely


00:27:43.300 --> 00:27:47.700
got trade-offs but it's just in terms of it's just really useful just to think that everyone


00:27:47.700 --> 00:27:54.180
everything could understand. It's just so compatible. And it's also convenient to do


00:27:54.180 --> 00:27:59.060
random access, unlike some of the alternatives. You can pull out one file from the middle if you


00:27:59.060 --> 00:28:04.660
want to. The fact that anyone can open it is so much better than it might save one more percent.


00:28:04.660 --> 00:28:15.300
Yeah, for sure. Yeah. Cool. Okay, so we've got these... Basically, the pyby file is the zip file.


00:28:15.300 --> 00:28:20.580
Is that basically the entire interpreter just kind of bundled into a zip file?


00:28:20.580 --> 00:28:21.940
Like what's the deal there?


00:28:21.940 --> 00:28:24.340
Yeah. I mean, it's just literally like, you know,


00:28:24.340 --> 00:28:28.580
you install Python into a certain directory and then you take that directory,


00:28:28.580 --> 00:28:29.700
you put it in a zip file.


00:28:29.700 --> 00:28:33.700
There's a little bit of tweaking to like make sure it's self-contained and you can move it


00:28:33.700 --> 00:28:37.220
in a portable, relocatable, I guess is a better word.


00:28:37.220 --> 00:28:37.860
Yeah.


00:28:37.860 --> 00:28:42.100
So sometimes if you just install Python regularly, it's kind of, well, I've hard-coded.


00:28:42.100 --> 00:28:44.980
I know that I'm at this particular position on the file system.


00:28:44.980 --> 00:28:47.940
And so I need to make sure we don't do that.


00:28:47.940 --> 00:28:52.220
And also to make it self-contained, it's like the same thing we do with wheels.


00:28:52.220 --> 00:28:53.620
Like you have to vendor some libraries, right?


00:28:53.620 --> 00:28:59.500
If it wants to use read line as a library to for like in the REPL to be able to like


00:28:59.500 --> 00:29:03.140
edit your line as you're typing it, then, you know, we can't just assume it's on the


00:29:03.140 --> 00:29:04.580
system.


00:29:04.580 --> 00:29:06.860
We have to include that inside the PyBuy.


00:29:06.860 --> 00:29:07.860
Right.


00:29:07.860 --> 00:29:12.020
So, and but again, like this is stuff we've all already dealt with with wheels.


00:29:12.020 --> 00:29:13.220
There's tools for doing it.


00:29:13.220 --> 00:29:14.660
We understand how to do it.


00:29:14.660 --> 00:29:17.580
And I'm just reusing those tools.


00:29:17.580 --> 00:29:27.780
>> If I were to run a Python application delivered by one of these PyBys, does it have to unzip


00:29:27.780 --> 00:29:29.900
the contents into a location and then run it there?


00:29:29.900 --> 00:29:32.540
Or can it just run it straight out of memory?


00:29:32.540 --> 00:29:34.340
How does that work?


00:29:34.340 --> 00:29:40.020
>> Well, so by itself, the format, I mean, it's just a zip file, right?


00:29:40.020 --> 00:29:44.580
So you can do with it what you can do with a zip file, which, I mean, is not much on


00:29:44.580 --> 00:29:45.580
its own.


00:29:45.580 --> 00:29:46.580
You need some software to work with it, right?


00:29:46.580 --> 00:29:47.580
Yeah.


00:29:47.580 --> 00:29:52.540
Now, that said, I think, so yeah, so like if you just were starting with nothing and


00:29:52.540 --> 00:29:56.980
you're like, I just, I have a URL to some Py, a PyBuy and I want to use it, then you'd


00:29:56.980 --> 00:30:00.820
have to download it, run a numzip tool, and then you'd have a, you could go into that


00:30:00.820 --> 00:30:01.820
directory.


00:30:01.820 --> 00:30:02.820
It's a Python environment.


00:30:02.820 --> 00:30:05.700
You know, you could run pip in there or whatever.


00:30:05.700 --> 00:30:09.060
That said, I think this is a really useful building block


00:30:09.060 --> 00:30:10.740
for tools that want to go beyond that.


00:30:10.740 --> 00:30:13.860
So things like delivering a pre-built application


00:30:13.860 --> 00:30:16.220
that you can just run without unpacking.


00:30:16.220 --> 00:30:18.020
There are various tools to do that,


00:30:18.020 --> 00:30:20.900
like PyOxidizer, Py2App.


00:30:20.900 --> 00:30:21.440
I don't know.


00:30:21.440 --> 00:30:22.780
There's a ton of them, actually.


00:30:22.780 --> 00:30:24.740
I'm probably forgetting 10 more.


00:30:24.740 --> 00:30:26.400
Yeah, the ones that come to mind for me


00:30:26.400 --> 00:30:30.340
are Py2App, PyInstaller, and PyOxidizer, for sure.


00:30:30.340 --> 00:30:32.660
PyOxidizer being the newest of them.


00:30:32.660 --> 00:30:33.420
Yes.


00:30:33.420 --> 00:30:36.700
oxidizer because it involves rust somehow.


00:30:36.700 --> 00:30:39.500
>> Because all type of things involve rust.


00:30:39.500 --> 00:30:40.000
>> Yes.


00:30:40.000 --> 00:30:46.740
But yeah, so those tools that it's really useful to be able


00:30:46.740 --> 00:30:50.540
to say, OK, I'm going to do some clever thing to set up,


00:30:50.540 --> 00:30:53.820
I don't know, a self-extracting executable or whatever it is


00:30:53.820 --> 00:30:56.100
they do for their distribution mechanism.


00:30:56.100 --> 00:30:58.860
I'm going to create an installer program, whatever it is.


00:30:58.860 --> 00:31:02.220
But you still need an actual Python to put into that.


00:31:02.220 --> 00:31:06.780
Right. Yeah. And so having a straightforward way where it's okay, that's not their problem anymore


00:31:06.780 --> 00:31:11.340
to figure out how to find a Python and get it built and working for the target system.


00:31:11.340 --> 00:31:15.260
So they can just say, okay, there's, I can just like grab, you know, okay, yeah, you want to


00:31:15.260 --> 00:31:19.980
target, you know, many Linux, cool. I'll just go grab the right Python. It's already there. I know


00:31:19.980 --> 00:31:25.340
it works. And now I can take the files out of this PyBI and do whatever I want with them. I can pack


00:31:25.340 --> 00:31:30.700
them into my installer or do clever things to make them usable out of memory or whatever.


00:31:30.700 --> 00:31:36.620
And they can focus on that part instead of just the like, how do you even get a Python?


00:31:36.620 --> 00:31:38.620
Yeah


00:31:38.620 --> 00:31:46.580
Or how do you once find yourself in the wrong Python get the right Python? Yeah. Yeah. Yeah. Yeah


00:31:46.580 --> 00:31:51.820
That's a I don't know if that's trickier or less tricky, right? It's one thing to say


00:31:51.820 --> 00:31:58.500
Dear user go get Python. You need that. It's another thing to say go upgrade your Python and hope you don't break something


00:31:59.060 --> 00:32:00.060
You know, I think.


00:32:00.060 --> 00:32:05.420
Yeah, well, but also that's part of the point of these being self-contained is, so I mean,


00:32:05.420 --> 00:32:07.060
this is one of the more trivial use cases, right?


00:32:07.060 --> 00:32:10.520
But right now we all use virtual ends and mostly that's fine.


00:32:10.520 --> 00:32:13.780
But also sometimes, you know, they can get, you know, janking stuff could happen.


00:32:13.780 --> 00:32:17.700
Like, you know, you're on Linux, you do an app to upgrade and now your system Pythons


00:32:17.700 --> 00:32:20.380
change and all the virtual ends that were based on are broken now.


00:32:20.380 --> 00:32:21.380
Yeah.


00:32:21.380 --> 00:32:24.140
Because it like had some kind of dependence on that exact binary.


00:32:24.140 --> 00:32:28.020
Now, I won't say you would always want to do this, but at least it's nice to have the


00:32:28.020 --> 00:32:31.300
option, you could say, okay, instead of making virtual ends, I'm just going to make real


00:32:31.300 --> 00:32:35.780
ends. I'm just going to drop a new copy of Python in each environment. And that way,


00:32:35.780 --> 00:32:39.180
I just totally self-contained. I know exactly what I have. It upgrades when I decide to


00:32:39.180 --> 00:32:46.620
upgrade it. And it's just, you know, it's a nice option, right, sometimes to have that.


00:32:46.620 --> 00:32:51.300
And also, it gives you that total isolation, right? So you're just saying about that issue


00:32:51.300 --> 00:32:54.460
of like, oh, I wanted to use this. So I went and installed, upgraded my Python. But now


00:32:54.460 --> 00:32:57.500
that other thing I was already using broke because they're using the same Python. It's


00:32:57.500 --> 00:33:00.500
It's very easy to say, "No, just give them different pipelines."


00:33:00.500 --> 00:33:04.240
There's not that much that changes over time.


00:33:04.240 --> 00:33:06.240
That's a backwards breaking sort of thing.


00:33:06.240 --> 00:33:08.240
I mean, two to three, but I think that's enough.


00:33:08.240 --> 00:33:10.240
- Yeah. - Let's put that in the past.


00:33:10.240 --> 00:33:14.240
But I did recently, I was working with MongoDB


00:33:14.240 --> 00:33:17.240
using Beanie, which was using Motor,


00:33:17.240 --> 00:33:21.240
which was using the @async


00:33:21.240 --> 00:33:23.240
or @coroutine decorator,


00:33:23.240 --> 00:33:26.240
which was removed in 3.11 or 3.10.


00:33:26.240 --> 00:33:28.240
one of those recent upgrades.


00:33:28.240 --> 00:33:30.440
And it had been deprecated forever.


00:33:30.440 --> 00:33:32.320
The people at MongoDB said, we don't care.


00:33:32.320 --> 00:33:33.280
We're just going to leave it.


00:33:33.280 --> 00:33:36.140
Who wants to put the word async in front of my method?


00:33:36.140 --> 00:33:36.980
That's tricky.


00:33:36.980 --> 00:33:39.080
I mean, they just probably weren't paid attention.


00:33:39.080 --> 00:33:40.520
And my code wouldn't work.


00:33:40.520 --> 00:33:41.680
I'm like, why doesn't this work?


00:33:41.680 --> 00:33:44.360
Oh, the thing I depend on, which the thing it depends on,


00:33:44.360 --> 00:33:49.160
that thing needed less than 310 or whatever,


00:33:49.160 --> 00:33:50.360
310 or 311, whatever.


00:33:50.360 --> 00:33:55.360
- And that's where CKO struggles to adapt without breaking.


00:33:55.900 --> 00:33:58.440
- But yeah, stuff like this-- - Stuff like this does happen.


00:33:58.440 --> 00:34:02.740
And this kind of isolation gives you 100% confidence to say,


00:34:02.740 --> 00:34:06.240
"I'm going to make this new app. We're going to try running this app on this


00:34:06.240 --> 00:34:08.940
in production, and it's not going to hurt anything.


00:34:08.940 --> 00:34:10.380
And I don't need Docker."


00:34:10.380 --> 00:34:12.880
Yeah, and you can say, or you could say,


00:34:12.880 --> 00:34:17.720
"I'm going to use this exact point version in development,


00:34:17.720 --> 00:34:19.920
and then I'm going to take that and build it,


00:34:19.920 --> 00:34:22.200
use that to create my Docker image.


00:34:22.200 --> 00:34:24.400
Like, I don't need the pre-built Docker stuff.


00:34:24.400 --> 00:34:28.320
I could just grab Python from PyPI and I know it's the exact same version everyone else is using


00:34:28.320 --> 00:34:33.840
Built by the Python org folks, hopefully, you know, we're not there yet. But like that's kind of the


00:34:33.840 --> 00:34:38.320
That's why a PEP and not something on github, right? Yeah


00:34:38.320 --> 00:34:42.400
Sure. Well, it has been on github for a while, but you know, I have time to yeah


00:34:42.400 --> 00:34:45.680
Yeah, so maybe it's it's worth jumping over that but before we do


00:34:45.680 --> 00:34:49.680
Two questions, yeah


00:34:50.040 --> 00:34:57.480
two top-level questions anyway. So this is about the concept of kind of like pip install python 3.11


00:34:57.480 --> 00:35:04.440
or 10 beta 2 or whatever. Whatever it is, yeah. Yeah, does that, is there a way to say


00:35:04.440 --> 00:35:12.040
and these three packages off of PyPI? Like can I take and kind of bring a virtual environment


00:35:12.040 --> 00:35:18.840
effectively along with me with what you're doing so far? So okay, so PyPI is again by themselves,


00:35:18.840 --> 00:35:20.840
I mean, it's just an archive format, right?


00:35:20.840 --> 00:35:22.840
A package format. It doesn't do anything.


00:35:22.840 --> 00:35:27.840
That said, obviously, yeah, part of what we want is for these to be useful


00:35:27.840 --> 00:35:32.840
for things like building environments that have other packages in them and stuff.


00:35:32.840 --> 00:35:34.840
So that's the one other thing I didn't--


00:35:34.840 --> 00:35:37.840
I forgot to mention about defining the format.


00:35:37.840 --> 00:35:39.840
Probably the most interesting part, actually,


00:35:39.840 --> 00:35:44.840
is that we do add some new static metadata that we put into the package.


00:35:44.840 --> 00:35:49.920
And kind of the motivation there is that I try to figure out, okay, what do I need to


00:35:49.920 --> 00:35:56.120
know in order to install wheels into this Python without running it?


00:35:56.120 --> 00:35:57.120
Right?


00:35:57.120 --> 00:36:01.860
So right now, like, it assumes that it's running on the Python it's installing into.


00:36:01.860 --> 00:36:07.000
So any time it wonders, like, you know, okay, like, what ABIs does this Python support?


00:36:07.000 --> 00:36:08.000
What version is it?


00:36:08.000 --> 00:36:09.000
What platform am I on?


00:36:09.000 --> 00:36:11.920
It can just ask the interpreter it's running on, right?


00:36:11.920 --> 00:36:14.680
And it's like, OK, well, it would be really nice


00:36:14.680 --> 00:36:17.800
if you didn't have to do that, both for efficiency,


00:36:17.800 --> 00:36:23.680
like you want to be able to have your installer, your resolver,


00:36:23.680 --> 00:36:25.280
figure out which versions of everything


00:36:25.280 --> 00:36:28.160
it wants without having to download and run


00:36:28.160 --> 00:36:30.480
multiple versions of Python and stuff.


00:36:30.480 --> 00:36:32.200
You really like to avoid that.


00:36:32.200 --> 00:36:38.440
And it's also things like, I want to build release


00:36:38.440 --> 00:36:44.200
distributions for macOS, but I'm on Windows or vice versa.


00:36:44.200 --> 00:36:46.640
Or I just want to--


00:36:46.640 --> 00:36:50.400
I'm developing my package like Trio on Linux personally,


00:36:50.400 --> 00:36:53.280
but I would like it that when I lock my version,


00:36:53.280 --> 00:36:56.840
so I know all my collaborators are using the same versions,


00:36:56.840 --> 00:36:59.880
that we figure out locks that also work on Windows and Mac


00:36:59.880 --> 00:37:00.480
OS.


00:37:00.480 --> 00:37:05.960
And I can't just trivial run all those Pythons from one resolver


00:37:05.960 --> 00:37:08.320
because it's not running on all three at once.


00:37:08.320 --> 00:37:12.080
And Python packaging does have the ability


00:37:12.080 --> 00:37:14.880
to have different dependencies on different OSs.


00:37:14.880 --> 00:37:20.240
And it can get very complicated to figure out which packages


00:37:20.240 --> 00:37:21.940
do I need where.


00:37:21.940 --> 00:37:24.800
And so I want to put a bunch of metadata into the PyBI,


00:37:24.800 --> 00:37:28.480
all the stuff you need to solve those problems.


00:37:28.480 --> 00:37:31.320
So yeah, so the PyBI itself, I think normally they


00:37:31.320 --> 00:37:32.760
won't ship with any packages.


00:37:32.760 --> 00:37:35.440
Maybe again, callback, maybe in the future


00:37:35.440 --> 00:37:37.800
we'll start moving some of the standard library into wheels


00:37:37.800 --> 00:37:40.520
that are pre-installed, you could do that.


00:37:40.520 --> 00:37:45.520
But I'm guessing for now, they'll mostly just be


00:37:45.520 --> 00:37:47.520
a plain vanilla Python install.


00:37:47.520 --> 00:37:50.680
But then you could take that, you could take some wheels,


00:37:50.680 --> 00:37:53.560
bundle them all together into a new archive if you want.


00:37:53.560 --> 00:37:55.560
Or again, whatever you want to do with it,


00:37:55.560 --> 00:37:57.360
stick it in a Docker image, whatever.


00:37:57.360 --> 00:38:02.400
- Yeah, so it's a step towards,


00:38:02.400 --> 00:38:05.800
but not necessarily trying to propose an entire solution


00:38:05.800 --> 00:38:10.740
of here is the interpreter and all the dependencies


00:38:10.740 --> 00:38:13.820
and the code and just run it as if it was,


00:38:13.820 --> 00:38:17.360
it had no dependency on your system.


00:38:17.360 --> 00:38:19.980
Just treat it as like a .exe or a .app.


00:38:19.980 --> 00:38:22.080
I can just double click.


00:38:22.080 --> 00:38:25.480
- It makes that a lot easier than it is right now.


00:38:25.480 --> 00:38:27.640
Right now, first step is just to figure out


00:38:27.640 --> 00:38:30.240
how do I even build a Python that'll work like that?


00:38:30.240 --> 00:38:33.600
And that is like some arcane dark knowledge


00:38:33.600 --> 00:38:37.600
written on a tome in black ink on black paper


00:38:37.600 --> 00:38:41.200
and a black tomb you have to go find.


00:38:41.200 --> 00:38:45.120
It's just-- yeah, it's not easy.


00:38:45.120 --> 00:38:47.000
And so just having the ability to say, yeah,


00:38:47.000 --> 00:38:50.960
just grab this file, unzip it, drop some wheels in it,


00:38:50.960 --> 00:38:51.920
zip it up again.


00:38:51.920 --> 00:38:54.240
Now that's a package you can hand to someone,


00:38:54.240 --> 00:38:56.800
and it'll work on their system.


00:38:56.800 --> 00:38:59.720
That makes it a lot more accessible.


00:38:59.720 --> 00:39:01.080
I think I most personally--


00:39:01.080 --> 00:39:03.580
I'm not immediately going to go build that one last extra tool,


00:39:03.580 --> 00:39:11.580
that someone will. Yeah, I can imagine someone will for sure. Okay, my next question is not what


00:39:11.580 --> 00:39:20.460
our shared screen here but is, okay, what impact do you think this would have on PyPI? First of all,


00:39:20.460 --> 00:39:29.020
do you see PyPI the way the CDN that delivers packages like Trio and wheels like Trio,


00:39:30.220 --> 00:39:35.740
Do you see that as the same channel through which CPython 3.11 is delivered?


00:39:35.740 --> 00:39:43.660
yeah, I mean, so I would like these to literally be like you go to pypi/project/cpython


00:39:43.660 --> 00:39:48.220
it says like here's the latest release and you click on downloads and it shows you the, yeah,


00:39:48.220 --> 00:39:50.860
I'd like it to just literally be stuff you upload to PyPI.


00:39:50.860 --> 00:39:53.660
Right, and when you pip and solve from there it figures out the


00:39:53.660 --> 00:39:57.820
platform to pick from and it downloads that wheel and off it goes, right?


00:39:57.820 --> 00:39:58.380
Yeah.


00:39:58.380 --> 00:40:02.780
Do you think that that would add a huge burden to the amount of traffic?


00:40:02.780 --> 00:40:10.940
No. I mean, we'll have to see and adapt. But Python itself, it's like,


00:40:10.940 --> 00:40:13.900
shoot, it's tens of megabytes.


00:40:13.900 --> 00:40:16.940
Okay. There's plenty of other packages.


00:40:16.940 --> 00:40:20.060
There are a lot of much bigger, like go look at TensorFlow or something.


00:40:20.060 --> 00:40:24.460
There are hundreds of megabyte packages on Python that are very popular.


00:40:25.420 --> 00:40:29.900
Also, I mean, Python.org downloads go through the same CDN anyway. It's just sort of different


00:40:29.900 --> 00:40:34.060
infrastructure on the back end, but it's still fastly serving it and donating the bandwidth.


00:40:34.060 --> 00:40:40.860
So, you know, in that regard, I wouldn't expect much change. And also just, you know, like people


00:40:40.860 --> 00:40:45.740
tend to install, you know, wheels more often than they install Python, right? Again, it's hard to


00:40:45.740 --> 00:40:50.460
know sort of the second order effects. Like maybe virtual lens will be less popular in favor of full


00:40:50.460 --> 00:40:52.460
if this takes off.


00:40:52.460 --> 00:40:55.460
And then people start installing Python more than they do now.


00:40:55.460 --> 00:40:59.460
But nonetheless, I don't think it's a huge...


00:40:59.460 --> 00:41:05.460
I wouldn't anticipate it being a huge change.


00:41:05.460 --> 00:41:07.460
And if it turns out to be a problem,


00:41:07.460 --> 00:41:10.460
then we can kind of address it then.


00:41:10.460 --> 00:41:15.460
Well, you could also do, to a large degree,


00:41:15.460 --> 00:41:18.460
you could do like already that caches.


00:41:18.460 --> 00:41:19.460
Yeah.


00:41:19.460 --> 00:41:26.340
You would just cache the CPython, all the PyBI into the user profile and the second,


00:41:26.340 --> 00:41:27.340
third, fourth time you get it.


00:41:27.340 --> 00:41:32.020
It's really the CPython and all the doctors and all that stuff that don't understand what


00:41:32.020 --> 00:41:33.860
a cache is or any of that.


00:41:33.860 --> 00:41:34.860
Yeah.


00:41:34.860 --> 00:41:37.420
But then, you know, so like if it comes a real problem, you go to GitHub and you're


00:41:37.420 --> 00:41:42.780
like, "Hey, can we work something out so that, you know, you stick a cache in front of PyPI?"


00:41:42.780 --> 00:41:44.220
And you know, like stuff like that.


00:41:44.220 --> 00:41:48.940
It's not trivial, but you could talk to people and solve problems.


00:41:48.940 --> 00:41:55.100
Certainly, I don't think we should hold back the entire design of how we distribute Python


00:41:55.100 --> 00:41:59.660
and make it available because, oh, maybe it'll be too easy and people will use it too much.


00:41:59.660 --> 00:42:02.220
That's a good problem.


00:42:02.220 --> 00:42:03.420
I don't think they use it.


00:42:03.420 --> 00:42:03.900
Exactly.


00:42:03.900 --> 00:42:04.700
Look, they're using it.


00:42:04.700 --> 00:42:05.420
This is terrible.


00:42:05.420 --> 00:42:06.380
Yeah.


00:42:06.380 --> 00:42:09.820
First, make it easy to use and then figure out how to solve any problems that cause it.


00:42:09.820 --> 00:42:10.860
Yeah.


00:42:10.860 --> 00:42:17.420
I think we've more than once solved the problem of oh my gosh, they're using it like google netflix. You name it, you know, um


00:42:17.420 --> 00:42:21.340
Think of the benefit that you'll be doing for all the developers, especially those


00:42:21.340 --> 00:42:24.220
Who have python skills and are looking for a job?


00:42:24.220 --> 00:42:29.660
I mean if the popularity of python by downloads is one thing if you could like 4x that


00:42:29.660 --> 00:42:32.060
It'd all be more demand like right


00:42:32.060 --> 00:42:34.700
Really really downloaded now


00:42:34.700 --> 00:42:39.260
Right. Yeah, just go out there just download it five times in every ci job. Just you know


00:42:39.740 --> 00:42:42.300
- Exactly. - Throw four of them away.


00:42:42.300 --> 00:42:44.820
- Just do it a couple of times, just show.


00:42:44.820 --> 00:42:45.660
- Right.


00:42:45.660 --> 00:42:47.900
- Awesome.


00:42:47.900 --> 00:42:49.860
The question that you put into the pep


00:42:49.860 --> 00:42:52.020
here on the screen though, is why not just Conda?


00:42:52.020 --> 00:42:55.760
And I, not being a particularly data-focused person,


00:42:55.760 --> 00:42:59.820
I definitely prefer using pip over conda


00:42:59.820 --> 00:43:02.220
because especially it seems like a lot of the web packages


00:43:02.220 --> 00:43:06.420
are not as close to up to date.


00:43:06.420 --> 00:43:08.220
There's a latency before it hits conda


00:43:08.220 --> 00:43:11.220
and it's like immediately on pip.


00:43:11.220 --> 00:43:13.140
That said, there's a bunch of people who are like,


00:43:13.140 --> 00:43:15.260
I kind of use Conda for this.


00:43:15.260 --> 00:43:16.100
- Yeah.


00:43:16.100 --> 00:43:19.100
Yeah, and right, if you're just like,


00:43:19.100 --> 00:43:21.780
look, I don't really care about all this.


00:43:21.780 --> 00:43:24.660
Like I just, you know, I want to run my Jupyter notebooks


00:43:24.660 --> 00:43:28.700
and I, you know, just need a Python that can do that.


00:43:28.700 --> 00:43:30.780
And maybe, you know, some NumPy or whatever.


00:43:30.780 --> 00:43:33.460
Conda solves that really well.


00:43:33.460 --> 00:43:36.100
And this thing could, you know, I'm working on


00:43:36.100 --> 00:43:42.420
also potentially solve that really well. And so it feels duplicative to those people. And to them,


00:43:42.420 --> 00:43:47.860
it is. You know, it doesn't really -- they're both two solutions that work, but there isn't


00:43:47.860 --> 00:43:51.940
necessarily a reason for them to choose one or the other. But --


00:43:51.940 --> 00:43:58.180
>> This could also be a foundation for the way that Conda provides Python to itself.


00:43:58.180 --> 00:44:04.340
>> Maybe. I don't know. Like, there's a whole other question about how, like,


00:44:04.340 --> 00:44:10.660
we could bring Conda and PyPI, pip, that kind of world closer together and interoperate better.


00:44:10.660 --> 00:44:18.100
But that's a whole can of worms, lots of complicated stuff. I don't think this pep


00:44:18.100 --> 00:44:21.780
itself is going to be the thing that makes a big difference there.


00:44:21.780 --> 00:44:25.380
Okay. But it's not an anti-Conda type of thing.


00:44:25.380 --> 00:44:29.380
No. Yeah. Well, and so, right. And so, I mean, you can also get to see a version of this in the


00:44:29.380 --> 00:44:37.700
path. But basically the way I think about it is that the key reason why we just, like, why PyPI


00:44:37.700 --> 00:44:41.380
is a critical piece of infrastructure that, you know, cannot be replaced by anything else,


00:44:41.380 --> 00:44:51.220
is not because of its use for end users. I mean, it's great that end users use it and find it


00:44:51.220 --> 00:44:56.020
helpful and all that, but that isn't the people who absolutely need it and could not have any


00:44:56.020 --> 00:45:03.220
replacement. The reason why we just absolutely need it is for package developers because the way,


00:45:03.220 --> 00:45:07.140
again, you're talking about all those different ways you can get Python, right, and there's all


00:45:07.140 --> 00:45:11.620
these different ways Python packages get distributed, right? You can brew install packages,


00:45:11.620 --> 00:45:17.300
there's versions, you know, NumPy, a patched version of NumPy used to be part of the standard


00:45:17.300 --> 00:45:22.980
macOS install, maybe it still is, I don't know. You know, like when you install Blender, there


00:45:22.980 --> 00:45:24.940
there are Python packages in there.


00:45:24.940 --> 00:45:28.480
Install some game using, was it RenPy?


00:45:28.480 --> 00:45:31.380
It's gonna have Python packages in there.


00:45:31.380 --> 00:45:33.420
Or just, you know, there's just like,


00:45:33.420 --> 00:45:36.100
there's so many different ways that Python code


00:45:36.100 --> 00:45:37.500
goes out in the world and gets used


00:45:37.500 --> 00:45:39.180
in all these different contexts.


00:45:39.180 --> 00:45:41.660
And if you're developing some upstream library,


00:45:41.660 --> 00:45:43.660
like, you know, Trio again, or, but, you know,


00:45:43.660 --> 00:45:45.860
or requests or NumPy or anything,


00:45:45.860 --> 00:45:51.060
then what you absolutely don't want to do


00:45:51.060 --> 00:45:54.020
is have to maintain a separate distribution


00:45:54.020 --> 00:45:55.460
for all of those different things.


00:45:55.460 --> 00:45:59.220
You don't want to have to upload your package to CondaForge


00:45:59.220 --> 00:46:02.220
and also to Debian and also to Fedora


00:46:02.220 --> 00:46:05.020
and also to BlenderForge.


00:46:05.020 --> 00:46:10.900
That doesn't make any sense, right?


00:46:10.900 --> 00:46:12.300
So we need this,


00:46:12.300 --> 00:46:15.780
and then having every different package maintainer do that,


00:46:15.780 --> 00:46:17.700
like that just would be terrible, right?


00:46:17.700 --> 00:46:19.380
We just would be unworkable.


00:46:20.220 --> 00:46:25.420
So the critical role that PyPI serves, that just nothing else can, is it's this


00:46:25.420 --> 00:46:31.500
intermediation point between package uploaders and package users, including package redistributors.


00:46:31.500 --> 00:46:39.260
And so I make a release of my package, I upload it to PyPI, and then that's where CondaForge gets


00:46:39.260 --> 00:46:43.340
it, that's where Debian gets it, that's where end users get it if they're pulling straight from PyPI.


00:46:43.340 --> 00:46:49.420
Like sort of it fans out from there. And the key difference in terms of design between pip and


00:46:49.420 --> 00:46:56.860
Conda is that Pip's metadata formats and wheels and the metadata and source disks and all that


00:46:56.860 --> 00:47:01.740
are designed around this abstraction of you have some kind of Python environment,


00:47:01.740 --> 00:47:06.300
but it could be any of those. It could be on different OSs, it could be different


00:47:06.300 --> 00:47:12.140
ways of building it, different layout, different pieces could be missing, like whatever.


00:47:12.780 --> 00:47:16.540
you could be laid out in all kinds of different ways. I just know that there is some kind of


00:47:16.540 --> 00:47:22.060
Python environment and I have the metadata to figure out how to adapt to how this particular


00:47:22.060 --> 00:47:28.700
Python environment is put together. And Conda, on the other hand, is one of these sort of


00:47:28.700 --> 00:47:34.700
downstream systems. The reason people love it and like data science is because it's a full-fledged


00:47:34.700 --> 00:47:42.540
arbitrary application distribution thing. You can install random C libraries and you can install R


00:47:42.540 --> 00:47:48.460
and R packages. It's got compilers that are all there in the one thing. But because of that,


00:47:48.460 --> 00:47:55.100
it doesn't have this abstraction of, "Oh, I can handle any Python environment." A conda package,


00:47:55.100 --> 00:48:00.700
a Python package is set up to install in a conda Python that's laid out in a way a conda


00:48:00.700 --> 00:48:05.580
environment is laid out in the way that using the libraries a conda library has. And so it doesn't


00:48:05.580 --> 00:48:09.980
have that flexibility. If you just release something for conda, then it's great for conda,


00:48:09.980 --> 00:48:15.020
but it's not usable to Debian and Homebrew and all of those other folks.


00:48:15.020 --> 00:48:21.180
And so that's the key thing that PyPI does, right? It has that abstraction that lets you


00:48:21.180 --> 00:48:27.500
have the Python packaging ecosystem of all those packages and their dependencies on each other,


00:48:27.500 --> 00:48:32.540
and then you project it down into each of these more specific specialized packaging systems.


00:48:34.220 --> 00:48:37.260
And then also because, you know, as a...


00:48:37.260 --> 00:48:39.900
That's the other thing as a package maintainer.


00:48:39.900 --> 00:48:41.820
I don't just write my package and upload it.


00:48:41.820 --> 00:48:46.780
Like I'm also using all the other open source maintainers work as I do it.


00:48:46.780 --> 00:48:48.220
We're all working together, right?


00:48:48.220 --> 00:48:50.140
And I'm depending on their work and they're depending on mine.


00:48:50.140 --> 00:48:53.260
And so I need to be able to say like, okay, you know,


00:48:53.260 --> 00:48:56.140
my package needs those three other packages and here are the versions.


00:48:56.140 --> 00:49:00.140
And I need to be able to create an environment with those versions


00:49:00.140 --> 00:49:03.180
and test it before I upload my package to PyPI.


00:49:03.180 --> 00:49:07.740
And so again, all that work has to happen at that higher abstraction level.


00:49:07.740 --> 00:49:11.420
Like you can't just say, I'm going to take the latest version from Conda and test against it,


00:49:11.420 --> 00:49:15.900
because that's not necessarily the version that other people will get.


00:49:15.900 --> 00:49:19.500
Where you take the versions from PyPI, those are like the original ones.


00:49:19.500 --> 00:49:22.860
I can get exactly-- I have access to anything anyone has ever uploaded


00:49:22.860 --> 00:49:26.380
as soon as they upload it, and I can test them all together.


00:49:26.380 --> 00:49:31.740
And then if Conda wants to take some curated subset of those or whatever, that's great.


00:49:32.380 --> 00:49:37.340
that's a really valuable service, but they kind of need that underlying set of packages to curate.


00:49:37.340 --> 00:49:38.860
And that's what PyPI is.


00:49:38.860 --> 00:49:39.660
Yeah, that's true.


00:49:39.660 --> 00:49:40.160
Yeah.


00:49:40.160 --> 00:49:47.340
PyPI is kind of the definitive source of truth as the package creator intended it to be.


00:49:47.340 --> 00:49:53.500
Yeah. And then, of course, for a lot of end users, it turns out that just going straight


00:49:53.500 --> 00:50:00.460
to that without any intermediary works great for them. And that's really cool. But also,


00:50:00.460 --> 00:50:04.300
It's not like I don't have anything against people who prefer to go through Debian or


00:50:04.300 --> 00:50:12.300
Conda or whatever. I think that's also great if that works better for you. But for the folks who


00:50:12.300 --> 00:50:18.300
are developing packages to upload or who just would rather just get stuff straight from the source,


00:50:18.300 --> 00:50:23.580
the PyBIs I think can solve a lot of problems. That Conda, it just doesn't address those. It


00:50:23.580 --> 00:50:28.940
has a different focus. >> Right. Trying to make it swap over to do that might


00:50:29.660 --> 00:50:41.740
kill a little bit of what it's good for, you know? Yeah. All right. Let's see. So, let's move on to


00:50:41.740 --> 00:50:46.940
your announcement here. I think... >> Okay. Right. Yeah. >> So, over on discuss.python.org,


00:50:46.940 --> 00:50:52.060
when was this? This was January 21st. >> A few months ago. >> Yeah, a few months ago,


00:50:53.100 --> 00:51:01.340
you announced PyBI and Posi. And Posi is, we talked about this mythical pip that could pip


00:51:01.340 --> 00:51:05.660
install CPython 3.11. Posi is that mythical pip, right?


00:51:05.660 --> 00:51:12.380
>> Yeah, so yeah, the pip 7.11, the PyBI stuff is just the one brick in my master plan.


00:51:12.380 --> 00:51:19.020
So, right. Because, yeah, because sort of this vision I had in mind, I kind of alluded to earlier


00:51:19.020 --> 00:51:23.260
talking about like, you know, okay, if somebody does, you know, Git clone my project, I want them


00:51:23.260 --> 00:51:27.420
to just run the tests and know that they have the right version of Python and the right version of


00:51:27.420 --> 00:51:31.420
the dependencies and just kind of, you know, and they know how to run the, you know, just do it,


00:51:31.420 --> 00:51:38.220
right? Encode all that information somewhere. And Posey is sort of my experimental, it's not ready


00:51:38.220 --> 00:51:45.100
to use, but it does have a lot of stuff working. It's my attempt to solve that part of the problem.


00:51:45.100 --> 00:51:52.100
So the vision is Posi is a full re-implementation of Pip,


00:51:52.100 --> 00:51:57.260
the metadata parsers and dependency resolvers


00:51:57.260 --> 00:52:01.420
and archive installers and all of that,


00:52:01.420 --> 00:52:06.940
except I rewrote it all in Rust, as is the style.


00:52:06.940 --> 00:52:11.780
But it's all built around PyBI.


00:52:11.780 --> 00:52:14.420
So it doesn't-- maybe at some point


00:52:14.420 --> 00:52:18.620
will also start supporting VNs or user-installed Pythons.


00:52:18.620 --> 00:52:22.660
But for now, for the MVP, it's just like, OK, yeah,


00:52:22.660 --> 00:52:23.780
you have a PyBuy.


00:52:23.780 --> 00:52:24.660
I will grab that.


00:52:24.660 --> 00:52:27.100
I will grab packages that are compatible with it.


00:52:27.100 --> 00:52:31.500
I will arrange them all to run together based on--


00:52:31.500 --> 00:52:33.140
you just say what you need.


00:52:33.140 --> 00:52:34.540
I turn that into a lock file.


00:52:34.540 --> 00:52:36.140
I fetch those packages.


00:52:36.140 --> 00:52:39.740
I run your test script or whatever.


00:52:39.740 --> 00:52:44.060
And yeah, I mean, that is the core idea.


00:52:44.060 --> 00:52:50.300
And one advantage of being in Rust is that it's just because--


00:52:50.300 --> 00:52:53.100
so obviously, if you want to hack on it,


00:52:53.100 --> 00:52:54.840
then you need a Rust compiler and stuff.


00:52:54.840 --> 00:52:58.300
But if you just want to use it, then we can just take a--


00:52:58.300 --> 00:53:00.780
we can compile it down to a single binary


00:53:00.780 --> 00:53:04.020
that you just upload to wherever,


00:53:04.020 --> 00:53:05.380
install it from wherever.


00:53:05.380 --> 00:53:07.540
And you just drop it on your system, you run it,


00:53:07.540 --> 00:53:09.380
and it's self-contained.


00:53:09.380 --> 00:53:11.940
It can handle everything from there.


00:53:11.940 --> 00:53:16.180
So again, thinking of that target audience of beginners,


00:53:16.180 --> 00:53:19.180
you say, OK, install this one program.


00:53:19.180 --> 00:53:21.660
And now you type Posey run.


00:53:21.660 --> 00:53:23.380
And oh, look, you're in a REPL.


00:53:23.380 --> 00:53:25.020
And now internally, of course, I had


00:53:25.020 --> 00:53:26.980
to go find the latest version of Python


00:53:26.980 --> 00:53:30.260
and grab it and figure out which build is right for your system.


00:53:30.260 --> 00:53:32.900
But you don't have to think about that.


00:53:32.900 --> 00:53:34.700
You just hit Enter, and it happens.


00:53:34.700 --> 00:53:36.300
And there's your REPL.


00:53:36.300 --> 00:53:40.460
Or you say Posey add requests, or Posey add Jupyter,


00:53:40.460 --> 00:53:42.660
and then Posey run Notebook.


00:53:42.660 --> 00:53:48.980
And it kind of is handling the environments behind the scenes.


00:53:48.980 --> 00:53:52.860
>> Yeah, we did a panel discussion


00:53:52.860 --> 00:53:59.660
with a bunch of core developers around packaging recently.


00:53:59.660 --> 00:54:02.220
And a lot of them were saying things like--


00:54:02.220 --> 00:54:04.220
I don't really want to put words in their mouth,


00:54:04.220 --> 00:54:06.860
but I'm kind of getting the sense that, OK,


00:54:06.860 --> 00:54:09.900
so we have a bunch of tools that are really neat that


00:54:09.900 --> 00:54:16.180
live within Python, you know, Dickey and Hatch, Poetry, those, that category of tools, Pip


00:54:16.180 --> 00:54:18.500
itself even.


00:54:18.500 --> 00:54:22.680
And some of the challenges or problems that they would like to solve, they could unlock


00:54:22.680 --> 00:54:28.260
a simpler API if it was turned inside out, right?


00:54:28.260 --> 00:54:32.820
If the tool itself controlled Python, it didn't depend on Python to get started.


00:54:32.820 --> 00:54:39.380
They mentioned Rust up as a way to get started, which is a way to kind of install a version


00:54:39.380 --> 00:54:44.820
of rust and get started, right? And it feels to me like this is pretty close to that.


00:54:44.820 --> 00:54:50.420
Yeah, there's a lot of overlap, for sure, in terms of sort of goals and approach and


00:54:50.420 --> 00:54:54.100
all of that.


00:54:54.100 --> 00:55:04.620
So one challenge I see is, so like, for example, to run the application for the, with the Python


00:55:04.620 --> 00:55:06.900
and that's bundled up inside of one of these PyBIs


00:55:06.900 --> 00:55:10.820
is you would say posy run or posy some kind of file


00:55:10.820 --> 00:55:12.420
or something like that, right?


00:55:12.420 --> 00:55:13.900
- Sure, yeah, whatever exactly.


00:55:13.900 --> 00:55:15.860
- Yeah, yeah, yeah, whatever the CLI


00:55:15.860 --> 00:55:19.260
that's yet to be fully spec'd out comes out to be.


00:55:19.260 --> 00:55:22.940
But could you do things like, could you create,


00:55:22.940 --> 00:55:25.500
speaking of symlinks and other types of stuff,


00:55:25.500 --> 00:55:27.700
could you create just in the same folder


00:55:27.700 --> 00:55:29.760
where that app lives a Python


00:55:29.760 --> 00:55:33.980
that actually just calls posy the Python inside


00:55:33.980 --> 00:55:37.300
instead of Python itself and pip that says,


00:55:37.300 --> 00:55:39.820
you know, Posey run pip inside this Python


00:55:39.820 --> 00:55:43.220
to kind of bridge, to unify the API


00:55:43.220 --> 00:55:44.920
from where people are coming from.


00:55:44.920 --> 00:55:47.740
To kind of expose the same tools


00:55:47.740 --> 00:55:49.620
that are inside a little bit, you know what I mean?


00:55:49.620 --> 00:55:53.740
- Well, so yes, I mean, so the way I am currently


00:55:53.740 --> 00:55:57.540
sort of in my current prototype, basically,


00:55:57.540 --> 00:56:01.100
it doesn't work like that


00:56:02.240 --> 00:56:06.200
just because it felt sort of more complicated


00:56:06.200 --> 00:56:07.680
to then try to expose those things.


00:56:07.680 --> 00:56:09.980
So sort of the sense is like,


00:56:09.980 --> 00:56:14.240
let's see how far we can get with treating


00:56:14.240 --> 00:56:16.480
sort of the UI paradigm of like Posi


00:56:16.480 --> 00:56:18.560
is just your front end to Python.


00:56:18.560 --> 00:56:19.720
Like you don't, you just,


00:56:19.720 --> 00:56:21.180
you start your command with Posi


00:56:21.180 --> 00:56:23.980
and that's the only command you need to know kind of.


00:56:23.980 --> 00:56:28.340
And so, and that also allows some interesting things.


00:56:28.340 --> 00:56:31.440
So like the way Posi does environments right now


00:56:31.440 --> 00:56:34.800
is you can have multiple environments within a project.


00:56:34.800 --> 00:56:37.140
Like if you need to test against multiple Python versions


00:56:37.140 --> 00:56:39.740
or you need different installs for, I don't know,


00:56:39.740 --> 00:56:43.000
tests and for building your docs and whatever.


00:56:43.000 --> 00:56:46.140
But it doesn't actually materialize all those


00:56:46.140 --> 00:56:49.520
as separate independent virtual environments.


00:56:49.520 --> 00:56:51.100
Instead what it does is,


00:56:51.100 --> 00:56:55.400
for like each unique wheel or PyBi that it needs,


00:56:55.400 --> 00:56:57.680
it unpacks that into its own directory.


00:56:57.680 --> 00:57:00.000
And then on the fly, it assembles environments


00:57:00.000 --> 00:57:02.000
by setting up environment variables


00:57:02.000 --> 00:57:04.720
so that it can launch a Python in such a way


00:57:04.720 --> 00:57:07.840
that it picks the right Python and launches in such a way


00:57:07.840 --> 00:57:10.300
that it sees the right packages it's supposed to see.


00:57:10.300 --> 00:57:12.360
But there's only one copy of those packages on disk.


00:57:12.360 --> 00:57:14.620
If you have multiple environments,


00:57:14.620 --> 00:57:18.120
if you want to try out different versions or whatever,


00:57:18.120 --> 00:57:21.580
it can just sort of do that


00:57:21.580 --> 00:57:24.080
without having to go rearrange everything on disk.


00:57:24.080 --> 00:57:26.520
And that's just, it's convenient.


00:57:26.520 --> 00:57:28.120
It's just a really nice way to work


00:57:28.120 --> 00:57:31.040
with sort of having declarative Python environments.


00:57:31.040 --> 00:57:32.720
So you never update an environment in place.


00:57:32.720 --> 00:57:33.880
There is no environment in place.


00:57:33.880 --> 00:57:35.840
It's just on each command you run,


00:57:35.840 --> 00:57:37.360
it sort of knows declaratively,


00:57:37.360 --> 00:57:39.360
okay, these are which packages are supposed to be there.


00:57:39.360 --> 00:57:40.640
I'll give you those packages.


00:57:40.640 --> 00:57:42.320
So there isn't even a concept exactly


00:57:42.320 --> 00:57:44.820
of like pip upgrade or pip install.


00:57:44.820 --> 00:57:48.040
You can just say that next time I invoke environment,


00:57:48.040 --> 00:57:49.560
I'm gonna give you a different specification


00:57:49.560 --> 00:57:51.040
for which versions I want.


00:57:51.040 --> 00:57:52.880
And it'll make sure that happens.


00:57:52.880 --> 00:57:55.640
- Feels a little like Docker, right?


00:57:55.640 --> 00:57:57.840
Like if you create a Docker image


00:57:57.840 --> 00:58:00.280
and you run a container, you want to make changes to it.


00:58:00.280 --> 00:58:03.160
You don't log into the container typically and--


00:58:03.160 --> 00:58:05.000
- In that sense, right, yeah.


00:58:05.000 --> 00:58:06.480
- Yeah, but you would just say,


00:58:06.480 --> 00:58:07.720
okay, well, we changed the Dockerfile,


00:58:07.720 --> 00:58:09.440
we shut it down and we started back up


00:58:09.440 --> 00:58:11.840
with the new better version of itself, right?


00:58:11.840 --> 00:58:13.720
That in that sense, I think it's like Docker.


00:58:13.720 --> 00:58:14.880
- Yeah, the main difference,


00:58:14.880 --> 00:58:16.400
a big difference would be that in Docker,


00:58:16.400 --> 00:58:17.240
then when you build it,


00:58:17.240 --> 00:58:20.760
like the actual Dockerfile is this big old imperative,


00:58:20.760 --> 00:58:22.760
go scribble here and then delete that


00:58:22.760 --> 00:58:24.600
and then put something else, that kind of thing.


00:58:24.600 --> 00:58:27.200
It's not like, here's the list of things you need.


00:58:27.200 --> 00:58:32.600
Well, it feels to me like it may be a better solution than what Docker is giving you.


00:58:32.600 --> 00:58:37.400
If what you really just want to do is run a Python, an isolated Python thing repeatedly,


00:58:37.400 --> 00:58:41.880
because with Docker, the idea is like, well, you want it isolated.


00:58:41.880 --> 00:58:45.000
So let's do this. Let me give you an entire separate copy of Linux.


00:58:45.000 --> 00:58:46.280
Right.


00:58:46.280 --> 00:58:52.280
I know what you're running it in like not a full VM way, and it's not as heavy as a VM, but it's still,


00:58:52.280 --> 00:58:56.480
you're configuring a Linux computer inside of this container in the way that


00:58:56.480 --> 00:59:01.760
Whereas this is just like, I just want Python configured, not everything.


00:59:01.760 --> 00:59:04.800
Well, and even more, like, in Docker,


00:59:04.800 --> 00:59:07.300
if you want to make sure that you run Docker build twice


00:59:07.300 --> 00:59:10.440
and get the same package versions, you have to do that yourself.


00:59:10.440 --> 00:59:14.440
You have to use, I don't know, pip compile or something like create a lock file


00:59:14.440 --> 00:59:17.440
and then install from that instead of your original requirements.


00:59:17.440 --> 00:59:20.080
It's a whole thing with lots of ways to get it wrong.


00:59:20.080 --> 00:59:22.780
Whereas in Posi, the way I've written it currently,


00:59:22.780 --> 00:59:28.140
it's just like there is, you know, there's one operation, one internal function that takes a set


00:59:28.140 --> 00:59:32.380
of like, okay, these are the packages I want. And it like renders that down into a block file,


00:59:32.380 --> 00:59:35.820
like here's the exact set of packages you need, including all the dependencies and all their


00:59:35.820 --> 00:59:41.100
versions. And then that's the thing that you hand to the run me an environment. So like you have to


00:59:41.100 --> 00:59:45.900
go through that step. It's just built in. And so we can like, you know, so and of course, you know,


00:59:45.900 --> 00:59:49.820
as we build up the, you know, CLI and stuff, ideal will be that that will be then, you know,


00:59:49.820 --> 00:59:56.460
written to disk, similar to a cargo.lock or poetry.lock or whatever. And so you just automatically


00:59:56.460 --> 01:00:01.460
get that reproducibility, which you don't get that automatically from Docker.


01:00:01.460 --> 01:00:10.220
Right. Nice. So this is a thing that people could go get on your GitHub profile. They


01:00:10.220 --> 01:00:13.660
could check this out and they could try it, right?


01:00:13.660 --> 01:00:15.940
So yeah, let's see.


01:00:15.940 --> 01:00:21.140
So yeah, so obviously there's a lot of moving parts here.


01:00:21.140 --> 01:00:25.180
Folks want to help with the PyBI part, that PEP 7.11.


01:00:25.180 --> 01:00:27.860
There's lots of stuff you could use help with.


01:00:27.860 --> 01:00:30.180
But it is also-- there's a draft PEP up.


01:00:30.180 --> 01:00:32.820
And I have built lots of PyBI packages


01:00:32.820 --> 01:00:34.820
for lots of different versions of Python.


01:00:34.820 --> 01:00:38.140
For Mac, Windows, Linux, they're up on a CDN.


01:00:38.140 --> 01:00:41.460
So that uses the same API as PyPI.


01:00:41.460 --> 01:00:42.940
So you could pip install from there


01:00:42.940 --> 01:00:44.940
if you had a pip that did it.


01:00:44.940 --> 01:00:47.540
So it is stuff you can try out right now,


01:00:47.540 --> 01:00:48.940
experiment with at least.


01:00:48.940 --> 01:00:51.500
And then, yeah, as for the Posi part,


01:00:51.500 --> 01:00:54.180
again, like I said, it's mostly the backend stuff,


01:00:54.180 --> 01:00:56.020
but it is a pretty complete implementation


01:00:56.020 --> 01:00:58.540
of all the packaging stuff.


01:00:58.540 --> 01:01:00.820
It can actually do that demo I was just saying,


01:01:00.820 --> 01:01:02.620
of like, I need these three packages


01:01:02.620 --> 01:01:03.620
in this version of Python,


01:01:03.620 --> 01:01:07.060
and it can do the dependency resolution


01:01:07.060 --> 01:01:09.420
for a named specific operating system,


01:01:09.420 --> 01:01:11.140
which may not be the one you're running on,


01:01:11.140 --> 01:01:12.580
and then generate that environment


01:01:12.580 --> 01:01:14.580
and actually invoke it.


01:01:14.580 --> 01:01:16.740
Well, you can only invoke it if it's for the operating system


01:01:16.740 --> 01:01:17.740
you're running on, of course.


01:01:17.740 --> 01:01:19.340
But it can do all that stuff.


01:01:19.340 --> 01:01:22.900
There isn't really a UI in front of it yet.


01:01:22.900 --> 01:01:25.940
So it's not like something I'm suggesting you go start


01:01:25.940 --> 01:01:27.060
rolling out to your company.


01:01:27.060 --> 01:01:28.620
>> Everyone adopt it, yeah.


01:01:28.620 --> 01:01:33.060
>> But if this is like an exciting project for you,


01:01:33.060 --> 01:01:35.660
then you could check it out, see where it's at,


01:01:35.660 --> 01:01:38.860
join in, whatever.


01:01:38.860 --> 01:01:40.940
There's definitely tons of stuff to do.


01:01:40.940 --> 01:01:43.720
But there's a good, solid start.


01:01:43.720 --> 01:01:45.140
And I think it's--


01:01:45.140 --> 01:01:47.100
at this point, I'm pretty confident everything


01:01:47.100 --> 01:01:48.060
could work, right?


01:01:48.060 --> 01:01:55.100
Kind of the proving it out part is pretty much there, done.


01:01:55.100 --> 01:01:57.120
>> Question from Marwan audience.


01:01:57.120 --> 01:01:59.700
Hypothetically speaking, does a posy.lock


01:01:59.700 --> 01:02:02.620
work as is on different platforms?


01:02:02.620 --> 01:02:03.300
>> Right, yes.


01:02:03.300 --> 01:02:08.540
So cross-platform support is a huge issue with locking.


01:02:08.540 --> 01:02:10.900
I don't know if anyone's ever tried to do this with Pipkin


01:02:10.900 --> 01:02:16.180
pile. It just doesn't work. If you have anything complicated, like multiple Python versions,


01:02:16.180 --> 01:02:24.780
it just doesn't work. They tried hard, but yeah. So what I'm doing right now in Posey


01:02:24.780 --> 01:02:31.860
is I've tried to kind of keep it simple. I just say, like, you know, tell me which platforms


01:02:31.860 --> 01:02:41.700
you care about. You know, Resedish Linux and Windows 64 and macOS and Intel. You'll give


01:02:41.700 --> 01:02:48.380
me a list. And then it will -- it can go through -- just loop through that and for each one


01:02:48.380 --> 01:02:53.960
find the right PyBI, look up the metadata to figure out which kinds of packages are


01:02:53.960 --> 01:02:57.580
appropriate to install there and generate a lock file for each of those. And then you


01:02:57.580 --> 01:02:59.740
can somehow merge the common parts


01:02:59.740 --> 01:03:01.740
and write them to a file.


01:03:01.740 --> 01:03:07.300
So the individual things that resolve this set of versions--


01:03:07.300 --> 01:03:11.220
or set of package requests into an exact set of versions,


01:03:11.220 --> 01:03:16.580
that only runs for one specific platform at a time.


01:03:16.580 --> 01:03:18.220
But you can run it multiple times.


01:03:18.220 --> 01:03:24.180
It might be possible to do something smarter.


01:03:24.180 --> 01:03:26.220
So I know Poetry has some algorithm


01:03:26.220 --> 01:03:28.580
that I don't really understand very well,


01:03:28.580 --> 01:03:30.840
where they try to sort of simultaneously resolve


01:03:30.840 --> 01:03:32.760
all the platforms into their lock file.


01:03:32.760 --> 01:03:36.380
And then the way the lock file works is then you actually,


01:03:36.380 --> 01:03:38.980
it's like only like mostly resolved.


01:03:38.980 --> 01:03:40.540
And then when you actually go to install,


01:03:40.540 --> 01:03:43.020
it does like that last step to try to narrow it down


01:03:43.020 --> 01:03:44.580
to the exact platform you're on.


01:03:44.580 --> 01:03:48.780
And I just, I don't quite,


01:03:48.780 --> 01:03:50.340
no one's been able to explain to me


01:03:50.340 --> 01:03:51.800
at how exactly that algorithm works,


01:03:51.800 --> 01:03:55.040
or even like, I'm not a hundred percent sure it's even like,


01:03:55.040 --> 01:03:59.160
if it's fully correct or if it's heuristics-based or what.


01:03:59.160 --> 01:04:00.360
So I don't know.


01:04:00.360 --> 01:04:02.480
But we can change--


01:04:02.480 --> 01:04:03.680
there's lots of options.


01:04:03.680 --> 01:04:06.960
We can change the code if there's a better way to do it.


01:04:06.960 --> 01:04:08.920
Just that's where I'm at so far.


01:04:08.920 --> 01:04:09.880
- Yeah.


01:04:09.880 --> 01:04:11.400
So there's something that people can play with,


01:04:11.400 --> 01:04:12.640
but it's early days.


01:04:12.640 --> 01:04:13.460
- Yeah.


01:04:13.460 --> 01:04:14.640
- And you wouldn't mind having help if people wanted to--


01:04:14.640 --> 01:04:15.680
- I know, for sure.


01:04:15.680 --> 01:04:18.400
If you've been looking for an excuse to learn Rust,


01:04:18.400 --> 01:04:23.400
if you want to play around with cool...


01:04:23.680 --> 01:04:26.560
I mean, there's interesting problems in terms of things


01:04:26.560 --> 01:04:30.520
like how you efficiently resolve--


01:04:30.520 --> 01:04:31.520
do package resolution.


01:04:31.520 --> 01:04:36.240
It's like this whole messy logic programming problem.


01:04:36.240 --> 01:04:39.600
It's MP complete.


01:04:39.600 --> 01:04:42.240
There's just interesting system engineering problems of like,


01:04:42.240 --> 01:04:45.160
OK, we're going to really make this really nice to use.


01:04:45.160 --> 01:04:49.120
How do you unpack 20 wheels as fast as possible?


01:04:49.120 --> 01:04:51.080
You get to use threads and concurrency


01:04:51.080 --> 01:04:53.200
and all kinds of stuff.


01:04:53.200 --> 01:04:56.160
Yeah, there's lots of cool technical bits too.


01:04:56.160 --> 01:04:59.280
And of course, just making something that's like a joy to use,


01:04:59.280 --> 01:05:00.600
fits nicely in your hand.


01:05:00.600 --> 01:05:02.960
Lots of fun user interface problems.


01:05:02.960 --> 01:05:04.520
Yeah. - Yeah.


01:05:04.520 --> 01:05:06.280
- I'm excited about it, if you can probably tell.


01:05:06.280 --> 01:05:08.280
Like I just love all kinds of problems.


01:05:08.280 --> 01:05:10.560
- Yeah, absolutely.


01:05:10.560 --> 01:05:14.960
So this announcement was on discuss.python.org


01:05:14.960 --> 01:05:18.200
and I thought, okay, well, it says there's 72 responses.


01:05:18.200 --> 01:05:20.760
Let me flip down and see how this landed with people, right?


01:05:20.760 --> 01:05:21.600
- Okay, yeah.


01:05:22.600 --> 01:05:25.840
You know, a wide variety of responses.


01:05:25.840 --> 01:05:27.640
- Yeah, well, but I mean, I would say


01:05:27.640 --> 01:05:30.200
that at least the top batch, the first bunch of people,


01:05:30.200 --> 01:05:32.880
Paul Moore, deeply involved with Pip, jumps in, says,


01:05:32.880 --> 01:05:33.800
"This is beyond awesome.


01:05:33.800 --> 01:05:36.400
"I had realized you were working actively on this.


01:05:36.400 --> 01:05:37.240
"I'll take a look.


01:05:37.240 --> 01:05:38.480
"I'd love to help out too."


01:05:38.480 --> 01:05:40.680
Talks about Rust a little.


01:05:40.680 --> 01:05:42.760
Frederick says, "Really nice to see this.


01:05:42.760 --> 01:05:44.960
"This is a great direction."


01:05:44.960 --> 01:05:50.320
Ana says, "It certainly blew my mind.


01:05:50.320 --> 01:05:52.300
"Count me in on how we could explore how this might work


01:05:52.300 --> 01:05:54.420
for Conda and so on.


01:05:54.420 --> 01:05:59.900
And just I thought it was really, really quite positive


01:05:59.900 --> 01:06:02.660
how many next person-- this checks many of the boxes


01:06:02.660 --> 01:06:04.100
of what I have in mind.


01:06:04.100 --> 01:06:07.180
So it seems like it's landing well with the community.


01:06:07.180 --> 01:06:10.420
I hope that it continues to make good progress.


01:06:10.420 --> 01:06:10.940
Yeah.


01:06:10.940 --> 01:06:13.020
I think the biggest thing is there were definitely


01:06:13.020 --> 01:06:16.140
some folks going, OK, but why are you


01:06:16.140 --> 01:06:18.500
writing everything in Rust?


01:06:18.500 --> 01:06:20.540
Especially, we've spent a lot of effort


01:06:20.540 --> 01:06:26.460
not just making standards for Python packaging, but also implementing those. You can pip install


01:06:26.460 --> 01:06:33.340
packaging right now, and that is a library that can do things like unpack wheels and access the


01:06:33.340 --> 01:06:41.660
PyPI. I forget exactly which set, but a lot of the tricky stuff, parse Python metadata formats,


01:06:41.660 --> 01:06:46.060
and just all these different tricky things. It's like, why are you re-implementing this?


01:06:46.060 --> 01:06:51.500
And also, does it like send the wrong message that like, you know, when we wanted to do something


01:06:51.500 --> 01:06:58.060
complicated, we thought Python wasn't good enough, we needed to switch to Rust. And I get where


01:06:58.060 --> 01:07:05.180
they're coming from. But, well, I mean, there's a few things. So one is just that I thought writing


01:07:05.180 --> 01:07:09.500
in Rust would be fun. You know, I'm not telling you, you can't use Python for anything.


01:07:09.500 --> 01:07:14.300
Sure. I mean, well, let's take a step back and say, how would you propose writing that in Python?


01:07:14.300 --> 01:07:17.260
- If there is no Python, right? - No, it's possible, right?


01:07:17.260 --> 01:07:20.300
- So, like, Conda's written in Python, right? - Okay.


01:07:20.300 --> 01:07:23.420
But, and the way... So, it makes the distribution a little complicated,


01:07:23.420 --> 01:07:28.460
because, like, when you get your conda.sh or mini-conda, you know, like the installer,


01:07:28.460 --> 01:07:34.540
it has a Python package inside it, which it unpacks, so it uses it to run Conda to install,


01:07:34.540 --> 01:07:38.300
like, another Python or whatever it is that you want to install with Conda.


01:07:38.300 --> 01:07:43.420
But it sort of has one built in. And you could do the same thing for something like Posey.


01:07:43.420 --> 01:07:46.940
Use something like PyInstaller to build an executable.


01:07:46.940 --> 01:07:50.460
Exactly. Yeah, but then for PyInstaller effectively, right?


01:07:50.460 --> 01:07:57.740
Just kind of recursively do that. It's totally something one could do.


01:07:57.740 --> 01:08:05.980
So yeah, the main reasons I'm not to go that way is one is, like I said,


01:08:05.980 --> 01:08:12.940
was more interesting to me. It's one thing. There's also, like, every language has trade-offs,


01:08:12.940 --> 01:08:21.340
right? And the exact set of things you want from a package installer are kind of right in Rust


01:08:21.340 --> 01:08:27.420
sweet spot and not Pythons. So there's sort of four things that are really important for a tool


01:08:27.420 --> 01:08:37.100
like Posey. So there's the initial install. There's the how quickly it starts up. Because


01:08:37.100 --> 01:08:40.780
like this is in between you and invoking Python or whatever it is you actually want to do.


01:08:42.620 --> 01:08:49.100
there's how quickly you can resolve packages, and how quickly can it unpack packages.


01:08:49.100 --> 01:08:53.820
Like those are the things that you care about. Those are the big load-bearing pieces.


01:08:53.820 --> 01:08:57.100
And those are like kind of four of Python's weakest spots, honestly.


01:08:57.100 --> 01:09:03.180
So we just talked about the deployment part. You can make it work, but it's not as straightforward


01:09:03.180 --> 01:09:07.020
as some things. There'd be more possible moving parts, things that could go wrong.


01:09:07.020 --> 01:09:09.100
It's not the strongest argument, but it is there.


01:09:10.220 --> 01:09:14.380
For startup speed, just notoriously one of Python's weak spots because it has to do all


01:09:14.380 --> 01:09:19.340
those imports from scratch every time. Tools like Mercurial have struggled with a lot.


01:09:19.340 --> 01:09:23.980
Lots of Python applications, doesn't matter, but for this particular one,


01:09:23.980 --> 01:09:31.660
that would be a challenge. And then resolving is big, heavy, like that MP complete, just really


01:09:32.220 --> 01:09:39.660
gnarly burning as many CPUs as you can on complicated logical operations. Again, not


01:09:39.660 --> 01:09:43.980
Python's strongest point. It's not something you can use NumPy for and it's not like, you


01:09:43.980 --> 01:09:45.340
know, I/O bound or anything.


01:09:45.340 --> 01:09:49.100
>> Yeah. You could use something like Cython potentially, using no-gil.


01:09:49.100 --> 01:09:54.780
>> Yeah, right. But then you'd basically be writing it in C at that point, like the core


01:09:54.780 --> 01:09:55.780
logic.


01:09:55.780 --> 01:09:57.980
>> Yeah, you're pretty far from core Python in that anyway.


01:09:57.980 --> 01:10:03.740
Yeah. And then finally, unpacking files is totally I/O bound and so simple that it's


01:10:03.740 --> 01:10:10.940
actually a big advantage to be able to... I/O is so fast these days with SSDs and everything,


01:10:10.940 --> 01:10:17.980
and VME drives, that almost any overhead in the unpacking path actually is pretty substantial


01:10:17.980 --> 01:10:26.300
as a relative proportion. So you add one Python operation per 100 kilobytes written,


01:10:26.300 --> 01:10:29.100
and that might suddenly be like a 2x slowdown,


01:10:29.100 --> 01:10:30.900
just because everything else is so fast


01:10:30.900 --> 01:10:34.100
that even that small amount of Python overhead could be large.


01:10:34.100 --> 01:10:36.500
And, you know, in a tool like this, people are really sensitive.


01:10:36.500 --> 01:10:40.100
Like, they really care if it takes 10 seconds versus one second


01:10:40.100 --> 01:10:42.800
to unpack the environment.


01:10:42.800 --> 01:10:45.100
Like, that's just a huge difference in usability.


01:10:45.100 --> 01:10:47.600
So I think it's just kind of really...


01:10:47.600 --> 01:10:49.700
Like, it just happens to be an exact combination of things


01:10:49.700 --> 01:10:52.000
that makes Rust pretty compelling.


01:10:52.000 --> 01:10:54.000
But you could do it the other way, too.


01:10:54.000 --> 01:10:56.560
I'm not making a--


01:10:56.560 --> 01:10:58.880
it isn't meant as a political point.


01:10:58.880 --> 01:11:01.160
>>Luis: Yeah, OK, got it.


01:11:01.160 --> 01:11:02.840
Python is written in C.


01:11:02.840 --> 01:11:04.120
>>Tom: Yeah, sure.


01:11:04.120 --> 01:11:06.520
It's a PyPy, but--


01:11:06.520 --> 01:11:11.120
>>Luis: I mean, the core bit of it is written in C, right?


01:11:11.120 --> 01:11:13.160
>>Tom: No, but PyPy is written in Python, right?


01:11:13.160 --> 01:11:14.760
Hence the name.


01:11:14.760 --> 01:11:15.920
>>Luis: Yeah, that's true.


01:11:15.920 --> 01:11:17.520
>>Tom: But yeah, CPython written in C.


01:11:17.520 --> 01:11:18.960
It says it right there.


01:11:18.960 --> 01:11:20.360
>>Luis: Yeah, exactly.


01:11:20.360 --> 01:11:21.560
OK, interesting.


01:11:21.560 --> 01:11:23.560
>> Yeah.


01:11:23.560 --> 01:11:29.160
>> I think we're probably out of time to dive much further in this.


01:11:29.160 --> 01:11:31.160
>> Sure, yeah, I think we covered a lot.


01:11:31.160 --> 01:11:33.160
>> I think we covered a lot. I guess --


01:11:33.160 --> 01:11:35.160
>> Anything else you want to --


01:11:35.160 --> 01:11:43.160
>> Give me your thoughts on the future. What do you think -- is the PEP gaining traction? This is in draft mode. I don't know how much I emphasized at the beginning, but it is not an accepted --


01:11:43.160 --> 01:11:45.160
>> Yes, that is important to be clear on that.


01:11:45.160 --> 01:11:47.160
>> Yeah.


01:11:47.160 --> 01:11:49.260
I wrote it, I posted it for feedback.


01:11:49.260 --> 01:11:50.480
That's as far as it's gotten.


01:11:50.480 --> 01:11:54.200
There's no commitment on anyone's part


01:11:54.200 --> 01:11:56.560
to that this is what's actually going to happen.


01:11:56.560 --> 01:12:01.520
That said, I'm pretty optimistic.


01:12:01.520 --> 01:12:04.520
Like I said, I got a little bit of pushback on the POSI part


01:12:04.520 --> 01:12:06.600
because of the rust and whatever.


01:12:06.600 --> 01:12:09.280
But I don't think I've gotten--


01:12:09.280 --> 01:12:12.680
I can't think of really any pushback on the PEP 711,


01:12:12.680 --> 01:12:14.000
the actual PyBI part.


01:12:14.000 --> 01:12:15.560
Except people are like, well, but why aren't you


01:12:15.560 --> 01:12:18.000
using Conda or something, which, you know,


01:12:18.000 --> 01:12:19.760
fair question, but you know, there's an answer.


01:12:19.760 --> 01:12:22.240
And I don't think anyone, like,


01:12:22.240 --> 01:12:25.680
it's not something that like the people that you need,


01:12:25.680 --> 01:12:27.820
whose agreement you need to get this accepted are like,


01:12:27.820 --> 01:12:29.200
you know, the PyPI maintainers


01:12:29.200 --> 01:12:30.560
and Python packaging maintainers.


01:12:30.560 --> 01:12:32.220
And they are totally okay with like,


01:12:32.220 --> 01:12:34.320
Conda's not the solution to everything, obviously.


01:12:34.320 --> 01:12:35.160
Right?


01:12:35.160 --> 01:12:36.000
- Right, sure.


01:12:36.000 --> 01:12:38.440
Well, how complicated would it be to put Conda


01:12:38.440 --> 01:12:40.680
into this particular use case, right?


01:12:40.680 --> 01:12:41.940
- Yeah, I mean, there's definitely room


01:12:41.940 --> 01:12:44.040
to collaborate better there.


01:12:44.040 --> 01:12:45.960
And I would love to see that in the future.


01:12:45.960 --> 01:12:49.240
But yeah, but my sense is that there's just really hasn't


01:12:49.240 --> 01:12:51.920
been a lot of, like people just seem pretty much like,


01:12:51.920 --> 01:12:52.880
yeah, this is cool.


01:12:52.880 --> 01:12:55.480
I guess actually the biggest thing is that there's been


01:12:55.480 --> 01:12:59.440
some feedback from folks like the PyOxidizer folks


01:12:59.440 --> 01:13:01.800
saying like, hey, we would like a bit more metadata


01:13:01.800 --> 01:13:03.720
so we can fully, you know,


01:13:03.720 --> 01:13:05.920
dissolve some of our other things we wanna do.


01:13:05.920 --> 01:13:08.960
Like we wanna be able to cross compile for a given Python


01:13:08.960 --> 01:13:11.400
and we need to know a bit more about the target Python


01:13:11.400 --> 01:13:12.800
in order to do that.


01:13:12.800 --> 01:13:16.400
So that's just a very technical, it's like, yeah, okay, more stuff we should add and tweak.


01:13:16.400 --> 01:13:17.800
But the core idea...


01:13:17.800 --> 01:13:18.800
- I thought it was just an idea, it's just like a...


01:13:18.800 --> 01:13:22.800
- Yeah, I think the basic idea, generally people seem to be on board.


01:13:22.800 --> 01:13:28.800
I'm not going to like, you know, make a commitment to what like Python.org and PyPI and all they're actually going to do.


01:13:28.800 --> 01:13:31.800
But I'm pretty hopeful.


01:13:31.800 --> 01:13:37.800
I think that, you know, there are definitely some of the folks involved in like building the Python.org downloads right now are like,


01:13:37.800 --> 01:13:39.800
"Oh, yeah, I'd build one of these if that was standard, sure."


01:13:40.800 --> 01:13:44.160
So it isn't all signed off on,


01:13:44.160 --> 01:13:47.400
but there seems to be a pretty reasonable consensus


01:13:47.400 --> 01:13:49.880
that this is a good direction


01:13:49.880 --> 01:13:51.760
that we're interested in moving in.


01:13:51.760 --> 01:13:53.520
- Well, it sure caught my attention when I saw it.


01:13:53.520 --> 01:13:54.360
So I'm excited to see what it's like.


01:13:54.360 --> 01:13:58.160
- Yeah, well, thanks for having me on to talk about it.


01:13:58.160 --> 01:13:58.980
- Yeah, you bet.


01:13:58.980 --> 01:13:59.840
No, let me just ask you real quick,


01:13:59.840 --> 01:14:01.160
the final two questions,


01:14:01.160 --> 01:14:04.200
since it has been five years since I asked them of you.


01:14:04.200 --> 01:14:05.040
- Okay.


01:14:05.040 --> 01:14:05.860
- When you write some Python code,


01:14:05.860 --> 01:14:07.200
do you work on this?


01:14:07.200 --> 01:14:09.680
What editor are you using these days?


01:14:09.680 --> 01:14:13.400
I am using Emacs, same as I've been since I was 13.


01:14:13.400 --> 01:14:16.040
So that's not a political position.


01:14:16.040 --> 01:14:17.700
That's just, I'm stuck.


01:14:17.700 --> 01:14:21.000
- Like all your coming chords, right?


01:14:21.000 --> 01:14:21.840
Okay.


01:14:21.840 --> 01:14:23.720
- You know, like that's it.


01:14:23.720 --> 01:14:24.800
- Excellent.


01:14:24.800 --> 01:14:27.040
And then notable PyPI package?


01:14:27.040 --> 01:14:29.880
- Just some random PyPI package.


01:14:29.880 --> 01:14:31.360
- Yeah, just something you like ran across.


01:14:31.360 --> 01:14:32.180
This is awesome.


01:14:32.180 --> 01:14:33.120
People should know about this.


01:14:33.120 --> 01:14:35.480
Could be very popular, not popular at all.


01:14:35.480 --> 01:14:36.320
- Oh man, shoot.


01:14:36.320 --> 01:14:37.680
I did not prepare for this.


01:14:37.680 --> 01:14:38.520
Should have.


01:14:38.520 --> 01:14:42.320
I mean, I don't--


01:14:42.320 --> 01:14:43.600
like, there's some obvious--


01:14:43.600 --> 01:14:44.720
obviously, I like--


01:14:44.720 --> 01:14:46.180
Trio's been thinking about a lot,


01:14:46.180 --> 01:14:50.080
but that's not an interesting answer for this.


01:14:50.080 --> 01:14:52.920
>>Victor: You mentioned Ruff earlier.


01:14:52.920 --> 01:14:55.360
>>Tom: I think you mentioned Ruff, but Ruff is pretty cool.


01:14:55.360 --> 01:14:56.040
>>Victor: Maybe I didn't mention Ruff.


01:14:56.040 --> 01:14:57.080
Yeah, OK.


01:14:57.080 --> 01:14:58.760
>>Tom: Ruff is very awesome.


01:14:58.760 --> 01:15:02.720
If anyone doesn't know, Ruff is sort of Flake 8 and such


01:15:02.720 --> 01:15:05.800
reimplemented in Rust, so it's like 100 times faster.


01:15:05.800 --> 01:15:08.520
like, you just like instantaneously lint all your code,


01:15:08.520 --> 01:15:10.240
which is very sweet.


01:15:10.240 --> 01:15:13.160
- It is a selling point for Rust integrated with Python,


01:15:13.160 --> 01:15:14.000
right?


01:15:14.000 --> 01:15:16.520
Like another use case that looks pretty neat.


01:15:16.520 --> 01:15:17.360
- Yeah.


01:15:17.360 --> 01:15:19.240
And I, you know, sort of as I'm digging into it,


01:15:19.240 --> 01:15:21.800
I'm really impressed at how they, those two,


01:15:21.800 --> 01:15:22.680
how well they fit together.


01:15:22.680 --> 01:15:25.640
People put a lot of work into like making that really smooth


01:15:25.640 --> 01:15:27.520
and having them collaborate well.


01:15:27.520 --> 01:15:29.800
Actually, it's something I've just been working on at work


01:15:29.800 --> 01:15:32.220
is we've been having trouble with,


01:15:33.760 --> 01:15:39.200
So in an async library like Trio,


01:15:39.200 --> 01:15:42.080
you have lots of tasks running concurrently, but they only--


01:15:42.080 --> 01:15:44.560
the scheduler only gets to switch from one task to another


01:15:44.560 --> 01:15:46.960
when one task explicitly lets go,


01:15:46.960 --> 01:15:48.520
says, OK, I can stop here.


01:15:48.520 --> 01:15:50.440
We're using an await statement.


01:15:50.440 --> 01:15:53.560
So it's possible to write code where you accidentally


01:15:53.560 --> 01:15:55.680
don't do that for a long time, and that task


01:15:55.680 --> 01:15:58.360
will just hog all the runtime and block


01:15:58.360 --> 01:15:59.480
other tasks from running.


01:15:59.480 --> 01:16:00.600
And it'd be nice--


01:16:00.600 --> 01:16:02.880
it's hard to tell when that's happening.


01:16:02.880 --> 01:16:04.960
And a similar thing could happen with the gil.


01:16:04.960 --> 01:16:06.640
So if you have like an extension library,


01:16:06.640 --> 01:16:08.440
like PyTorch or something,


01:16:08.440 --> 01:16:09.680
and they forget to drop the gil


01:16:09.680 --> 01:16:11.760
before doing some big heavyweight operation,


01:16:11.760 --> 01:16:14.600
then it could just block any other threads from running.


01:16:14.600 --> 01:16:15.440
That's really awkward.


01:16:15.440 --> 01:16:17.440
We've been having trouble with that.


01:16:17.440 --> 01:16:19.280
But well, you know, like PySpy,


01:16:19.280 --> 01:16:20.680
there's another really cool package,


01:16:20.680 --> 01:16:22.120
if anyone's seen it,


01:16:22.120 --> 01:16:24.160
is a Rust profiler for Python


01:16:24.160 --> 01:16:25.880
that can just sit outside your process


01:16:25.880 --> 01:16:30.880
and can tell you what it's doing.


01:16:32.680 --> 01:16:39.360
But also it being in Rust and it's up on crates.io, I could just write a little program that imports


01:16:39.360 --> 01:16:45.520
PySpy and uses it as a library and tweak it so instead of looking for where's code spending


01:16:45.520 --> 01:16:55.040
time, it detects, OK, is something hogging the GIL or the run loop? And give me the traceback.


01:16:55.040 --> 01:17:00.280
Show me which code is doing that. And it's, again, really neat to be able to get that


01:17:00.280 --> 01:17:05.800
really deep insight into this Python stuff that we're still using it. It's still Python,


01:17:05.800 --> 01:17:09.240
but the Rust really is a great flavor that goes with it.


01:17:09.240 --> 01:17:15.600
Cool. PySpy. All right, people can check that out. That's sampling profiler for Python programs.


01:17:15.600 --> 01:17:18.400
Yes. Yes. PySpy is really cool.


01:17:18.400 --> 01:17:23.600
Indeed. All right. Well, thanks for being here. If people are interested in the PEP,


01:17:23.600 --> 01:17:24.600
what should they do?


01:17:24.600 --> 01:17:33.800
I mean, I guess the post on discuss.python.org is the best place for feedback.


01:17:33.800 --> 01:17:36.980
It's also where I posted about Posey.


01:17:36.980 --> 01:17:40.080
So if you want to see the discussion or join in, that's a good place.


01:17:40.080 --> 01:17:47.800
If you want to help, then yeah, github.com/njsmith/posey is the repository.


01:17:47.800 --> 01:17:51.280
Jump in, send PRs, file issues, whatever.


01:17:51.280 --> 01:17:54.320
Or just send me a--


01:17:54.320 --> 01:17:54.880
I don't know.


01:17:54.880 --> 01:17:57.400
What's the 2.me, I guess?


01:17:57.400 --> 01:17:59.760
The Mastodon version?


01:17:59.760 --> 01:18:01.260
I'm not really on Twitter these days.


01:18:01.260 --> 01:18:05.120
But yeah, njs@mastodon.social.


01:18:05.120 --> 01:18:06.120
And I'll see you there.


01:18:06.120 --> 01:18:06.640
Cool.


01:18:06.640 --> 01:18:08.280
All right, well, Nathaniel, thanks for being here.


01:18:08.280 --> 01:18:09.360
Thanks for this pep.


01:18:09.360 --> 01:18:10.320
It looks interesting.


01:18:10.320 --> 01:18:11.120
Yeah, thanks.


01:18:11.120 --> 01:18:13.080
It's great being here.


01:18:13.080 --> 01:18:14.800
Yeah, you bet.


01:18:14.800 --> 01:18:17.120
Hey, real quick before we call a wrap on the YouTube channel,


01:18:17.120 --> 01:18:19.480
let me just ask a follow-up real quick with one question.


01:18:19.480 --> 01:18:23.440
>> Good, Diego on the other side says, "I'm in academia and consider leaving for the private


01:18:23.440 --> 01:18:24.440
sector.


01:18:24.440 --> 01:18:25.440
Was leaving academia easy?


01:18:25.440 --> 01:18:27.040
Do you miss anything about it?"


01:18:27.040 --> 01:18:28.320
>> Oh, man.


01:18:28.320 --> 01:18:30.200
This is a big thing.


01:18:30.200 --> 01:18:33.400
So I did not leave academia voluntarily.


01:18:33.400 --> 01:18:36.360
I left academia because I got very ill.


01:18:36.360 --> 01:18:38.400
I have ulcerative colitis.


01:18:38.400 --> 01:18:40.280
It's one of these autoimmune things.


01:18:40.280 --> 01:18:47.240
Basically, yeah, my immune system decided my large intestine is evil and should be destroyed.


01:18:47.240 --> 01:18:50.920
And basically it is a thing about academia.


01:18:50.920 --> 01:19:00.560
There's many things I love about it, but it is a very sort of intense, like you can't,


01:19:00.560 --> 01:19:02.480
you basically, like there is no place in that.


01:19:02.480 --> 01:19:06.280
There is just no long-term place in academia for someone who isn't, you know, able to work


01:19:06.280 --> 01:19:12.320
like, you know, 60 hour weeks and just like really be grinding away.


01:19:12.320 --> 01:19:17.600
that is not compatible with being really sick and needing a few years to like figure out


01:19:17.600 --> 01:19:24.960
treatments and just all of the stuff I was dealing with. And so it was messy and complicated, but like


01:19:24.960 --> 01:19:29.760
you know I ended up leaving academia because of that. And now I'm kind of getting back on my feet


01:19:29.760 --> 01:19:34.960
and trying to get back into academia as a whole thing. And it's also like well I'm not sure I


01:19:34.960 --> 01:19:39.600
really am able to get up to that grind. And also you know I'm just in a rough position after you


01:19:39.600 --> 01:19:41.960
being ill for so long and all that.


01:19:41.960 --> 01:19:43.760
So I don't know where the future will lead.


01:19:43.760 --> 01:19:46.240
But I don't know.


01:19:46.240 --> 01:19:49.640
Academia is-- there's a lot of wonderful things.


01:19:49.640 --> 01:19:52.040
And there's kind of some brainwashing while you're in it,


01:19:52.040 --> 01:19:53.400
that this is the best.


01:19:53.400 --> 01:19:55.400
Everyone kind of reassuring themselves.


01:19:55.400 --> 01:19:57.640
Of course you want-- who wouldn't want to be here?


01:19:57.640 --> 01:19:58.960
Like, yeah, this is fantastic.


01:19:58.960 --> 01:19:59.600
We're the best.


01:19:59.600 --> 01:20:01.600
And there are all these unique advantages, too.


01:20:01.600 --> 01:20:04.280
But there are other options.


01:20:04.280 --> 01:20:05.920
Life is not over if you leave academia.


01:20:05.920 --> 01:20:09.360
There are lots of wonderful options.


01:20:09.360 --> 01:20:12.960
I left way earlier than you. I left in the middle of my PhD program.


01:20:12.960 --> 01:20:16.200
And the one thing, you know, asking, what did you miss?


01:20:16.200 --> 01:20:18.720
I thought I would miss teaching people because I got to teach, you know,


01:20:18.720 --> 01:20:20.480
calculus, linear algebra, stuff like that.


01:20:20.480 --> 01:20:22.920
I do that every day.


01:20:22.920 --> 01:20:25.480
Right. I do that with my podcast, I do that with my talk by the untrained,


01:20:25.480 --> 01:20:29.000
and I make courses like there's room for like that kind of stuff


01:20:29.000 --> 01:20:33.360
and all the freedom to explore and move and change jobs


01:20:33.360 --> 01:20:35.560
more than once every five years.


01:20:35.560 --> 01:20:38.040
Yeah. Or yeah, there's a lot of advantages.


01:20:38.040 --> 01:20:41.400
job in the world.


01:20:41.400 --> 01:20:43.160
Exactly, there's three job openings in the world. I


01:20:43.160 --> 01:20:45.880
apply for them in September, I get


01:20:45.880 --> 01:20:48.760
notified in April, and I get them in


01:20:48.760 --> 01:20:50.840
the next year. Like that is a crazy


01:20:50.840 --> 01:20:53.240
delay in


01:20:53.240 --> 01:20:55.320
opportunity to move around, and


01:20:55.320 --> 01:20:56.680
you don't have that as a straight-up


01:20:56.680 --> 01:20:58.280
developer. Yeah, and I think that's a good


01:20:58.280 --> 01:20:59.720
point that like there are a lot of


01:20:59.720 --> 01:21:02.360
opportunities for


01:21:02.360 --> 01:21:04.280
parts of the stuff that are great about


01:21:04.280 --> 01:21:06.040
academia, if you can find them. So like


01:21:04.280 --> 01:21:08.040
like you're talking about education, but


01:21:08.040 --> 01:21:10.200
also like


01:21:10.200 --> 01:21:12.520
realistically in terms of impact on the


01:21:12.520 --> 01:21:14.280
world, my theoretical work in


01:21:14.280 --> 01:21:16.200
my blog post on structured concurrency


01:21:16.200 --> 01:21:18.440
is probably much larger than my


01:21:18.440 --> 01:21:20.040
papers. I have some well-cited papers


01:21:20.040 --> 01:21:22.600
but it's kind of within one


01:21:22.600 --> 01:21:24.600
niche and that's just a blog post. I


01:21:24.600 --> 01:21:28.440
mean, there doesn't even have an


01:21:28.440 --> 01:21:29.960
OID or anything but


01:21:29.960 --> 01:21:31.800
but the true impact is pretty big. It


01:21:31.800 --> 01:21:33.160
may well be what I'm remembered for or


01:21:31.800 --> 01:21:32.800
or something, you know?


01:21:32.800 --> 01:21:34.560
Like, it's just, yeah.


01:21:34.560 --> 01:21:35.400
- Yeah, who knows?


01:21:35.400 --> 01:21:36.480
Cool, well, thanks for sharing that.


01:21:36.480 --> 01:21:38.680
And I'm glad to see you doing better.


01:21:38.680 --> 01:21:39.920
- Yeah, thanks a lot.


01:21:39.920 --> 01:21:40.760
- Yeah, cool.


01:21:40.760 --> 01:21:41.600
Thanks again for being on the show.


01:21:41.600 --> 01:21:42.420
See you later.


01:21:42.420 --> 01:21:43.260
- See you.


01:21:43.260 --> 01:21:53.260
[BLANK_AUDIO]

