WEBVTT

00:00:00.000 --> 00:00:01.000
Hey, YouTube.


00:00:01.000 --> 00:00:02.000
Hey, Chris.


00:00:02.000 --> 00:00:03.000
>> Hello.


00:00:03.000 --> 00:00:04.000
How are you?


00:00:04.000 --> 00:00:05.000
>> Doing excellent.


00:00:05.000 --> 00:00:06.000
Good to see you.


00:00:06.000 --> 00:00:07.000
>> Good to see you.


00:00:07.000 --> 00:00:08.000
>> Yeah.


00:00:08.000 --> 00:00:09.000
Very excited to be doing this show today.


00:00:09.000 --> 00:00:12.000
Those of you watching live, please put your comments and thoughts into the live chat,


00:00:12.000 --> 00:00:14.000
and we'll try to make them part of the show.


00:00:14.000 --> 00:00:17.000
If you're watching later, we don't have time travel, so we can't do that, but we still


00:00:17.000 --> 00:00:18.000
appreciate you watching.


00:00:18.000 --> 00:00:19.000
All right.


00:00:19.000 --> 00:00:20.000
Ready to kick this thing off?


00:00:20.000 --> 00:00:21.000
>> I'm ready.


00:00:21.000 --> 00:00:24.000
>> Chris, welcome back to Talk Python To Me.


00:00:24.000 --> 00:00:25.000
>> Thank you.


00:00:25.000 --> 00:00:26.000
Glad to be here again.


00:00:26.000 --> 00:00:27.000
>> My name is Chris.


00:00:27.000 --> 00:00:28.000
I'm the co-founder of Python.


00:00:28.000 --> 00:00:29.000
to be here again.


00:00:29.000 --> 00:00:31.420
- I'm glad to have you back.


00:00:31.420 --> 00:00:36.120
We originally had you on to talk about the work


00:00:36.120 --> 00:00:38.620
that you're doing at Practical Business Python


00:00:38.620 --> 00:00:41.380
and looking at the page now,


00:00:41.380 --> 00:00:43.820
your last article, "Pandas Group By Warning"


00:00:43.820 --> 00:00:47.540
on the 26th, which as of recording two days ago,


00:00:47.540 --> 00:00:48.780
looks like you're still really active


00:00:48.780 --> 00:00:50.460
on Practical Business Python.


00:00:50.460 --> 00:00:51.300
- I am.


00:00:51.300 --> 00:00:54.180
It's been a while, to be honest.


00:00:54.180 --> 00:00:55.900
I spent a lot of time working on the course


00:00:55.900 --> 00:00:57.140
that we'll talk about in a moment.


00:00:57.140 --> 00:01:00.020
And so some of this stuff fell by the wayside.


00:01:00.020 --> 00:01:03.220
And I think like everybody in the COVID times


00:01:03.220 --> 00:01:05.820
have been a weird time warp for us all.


00:01:05.820 --> 00:01:08.700
So I haven't spent as much time on it as I would like,


00:01:08.700 --> 00:01:11.100
but I am getting back into it.


00:01:11.100 --> 00:01:14.820
And as you mentioned, just put a short article up there


00:01:14.820 --> 00:01:17.500
that in some ways kind of encapsulates


00:01:17.500 --> 00:01:19.820
a lot of what I wanna do with Practical Business Python


00:01:19.820 --> 00:01:23.740
is I'm writing in this specific article in general


00:01:23.740 --> 00:01:27.260
on the blog about problems that I encounter


00:01:27.260 --> 00:01:29.100
that I think can help other people.


00:01:29.100 --> 00:01:32.260
And this was a short article about some kind of


00:01:32.260 --> 00:01:34.300
gotcha behavior with Group Buy


00:01:34.300 --> 00:01:37.140
that I've been bitten by a couple times.


00:01:37.140 --> 00:01:39.860
And this most recent time I decided, you know what?


00:01:39.860 --> 00:01:42.780
I need to write about this and share it with people


00:01:42.780 --> 00:01:44.600
so that hopefully they're not gonna fall


00:01:44.600 --> 00:01:46.980
into the same traps that I had.


00:01:46.980 --> 00:01:49.060
- I love when you write something


00:01:49.060 --> 00:01:52.340
as kind of a note for yourself or a roadmap for yourself.


00:01:52.340 --> 00:01:55.740
And then later you go back and you search for it.


00:01:55.740 --> 00:01:57.340
You're like, I gotta remember how this went.


00:01:57.340 --> 00:01:59.500
And like hit number one as your result.


00:01:59.500 --> 00:02:02.780
You're like, okay, I guess I don't remember this,


00:02:02.780 --> 00:02:03.780
but I'm going back to it.


00:02:03.780 --> 00:02:06.700
And I, you know, my future self


00:02:06.700 --> 00:02:08.580
thanks my old self for it, right?


00:02:08.580 --> 00:02:09.660
- Yes, exactly.


00:02:09.660 --> 00:02:12.780
And sometimes I even remember I wrote an article about it


00:02:12.780 --> 00:02:13.940
and will refer to it.


00:02:13.940 --> 00:02:15.300
And then a lot of times you're right.


00:02:15.300 --> 00:02:18.140
I'll do a Google search and like, oh yeah.


00:02:18.140 --> 00:02:19.900
I did tell that before.


00:02:19.900 --> 00:02:21.340
- How interesting.


00:02:21.340 --> 00:02:22.180
- Yeah, cool.


00:02:22.180 --> 00:02:23.000
What a great resource.


00:02:23.000 --> 00:02:25.420
People should be definitely checking this out


00:02:25.420 --> 00:02:27.740
if you wanna do data science,


00:02:27.740 --> 00:02:31.160
Python data science intersected with Python, of course.


00:02:31.160 --> 00:02:33.700
You were on the show a couple of times ago,


00:02:33.700 --> 00:02:36.980
way back on 2019 in the before times,


00:02:36.980 --> 00:02:39.540
escaping Excel hell with Python and Pandas.


00:02:39.540 --> 00:02:41.140
Basically, you were making the case


00:02:41.140 --> 00:02:45.260
for using the Python data science stack


00:02:45.260 --> 00:02:46.740
instead of Excel, right?


00:02:46.740 --> 00:02:47.980
- Yes, absolutely.


00:02:47.980 --> 00:02:51.700
Yeah, and you know, the blog and a lot of my experience


00:02:51.700 --> 00:02:55.860
has been doing data analysis, data manipulation,


00:02:55.860 --> 00:03:00.060
data science, and trying to leverage the power of Python.


00:03:00.060 --> 00:03:03.520
And most people in a business setting,


00:03:03.520 --> 00:03:07.100
their go-to data science tool,


00:03:07.100 --> 00:03:09.100
or data analysis tool is Excel.


00:03:09.100 --> 00:03:11.460
And it has its place, I'm not advocating


00:03:11.460 --> 00:03:14.700
we get rid of Excel, but I think there are a lot of things


00:03:14.700 --> 00:03:19.700
that we can do with Python that are much quicker,


00:03:19.700 --> 00:03:22.820
much less error prone and much more efficient


00:03:22.820 --> 00:03:24.660
than trying to do it in Excel.


00:03:24.660 --> 00:03:27.260
And Excel is one of those tools


00:03:27.260 --> 00:03:29.420
where there's such a wide range of usage.


00:03:29.420 --> 00:03:31.620
There's some people that are experts


00:03:31.620 --> 00:03:35.100
and can do really complex, very efficient things in Excel,


00:03:35.100 --> 00:03:37.700
but there's a lot of people that treat Excel


00:03:37.700 --> 00:03:40.280
like the proverbial hammer, everything's a nail.


00:03:40.280 --> 00:03:42.420
So you try and use Excel to do everything


00:03:42.420 --> 00:03:46.260
from data cleaning to building out your financial statements


00:03:46.260 --> 00:03:48.700
to, I don't know, machine learning.


00:03:48.700 --> 00:03:51.020
And it's probably not really the best tool


00:03:51.020 --> 00:03:52.100
for all of those things.


00:03:52.100 --> 00:03:54.820
I think Python really fills a nice niche


00:03:54.820 --> 00:03:58.320
and I've had the good fortune of using it


00:03:58.320 --> 00:04:02.020
for a lot of different types of activities


00:04:02.020 --> 00:04:05.380
in my business career and wanted to talk about that


00:04:05.380 --> 00:04:06.660
in the podcast.


00:04:06.660 --> 00:04:09.460
- You know, one thing that occurred to me,


00:04:09.460 --> 00:04:12.060
just thinking about the code that I've seen


00:04:12.060 --> 00:04:16.320
for like visualizing data and so on with Python


00:04:16.320 --> 00:04:21.320
compared to writing algorithms or web apps or something.


00:04:21.320 --> 00:04:23.860
It seems to me that the amount of Python


00:04:23.860 --> 00:04:25.500
that you have to know


00:04:25.500 --> 00:04:28.380
and able to maybe import pandas,


00:04:28.380 --> 00:04:30.740
load a CSV and then graph it,


00:04:30.740 --> 00:04:34.100
you almost hardly need to know Python at all.


00:04:34.100 --> 00:04:35.780
And it's more about knowing the APIs


00:04:35.780 --> 00:04:38.500
of the various visualization frameworks


00:04:38.500 --> 00:04:41.540
like Matplotlib or Seaborn, right?


00:04:41.540 --> 00:04:43.180
- No, absolutely, I agree completely.


00:04:43.180 --> 00:04:46.020
I mean, you basically need to know, like you said,


00:04:46.020 --> 00:04:49.960
how to import and even backing up probably the most,


00:04:49.960 --> 00:04:51.700
the biggest challenge is getting Python


00:04:51.700 --> 00:04:53.460
set up on your system,


00:04:53.460 --> 00:04:55.180
depending on the system you have and everything,


00:04:55.180 --> 00:04:57.240
getting your environments all squared away.


00:04:57.240 --> 00:04:59.260
But once that's done, you're right.


00:04:59.260 --> 00:05:01.540
The data visualization libraries,


00:05:01.540 --> 00:05:02.820
no matter which one you choose,


00:05:02.820 --> 00:05:06.700
essentially are knowing how to call functions.


00:05:06.700 --> 00:05:07.540
- Yeah, exactly.


00:05:07.540 --> 00:05:11.500
And they all often seem to have their own little DSL domains


00:05:11.500 --> 00:05:14.500
specific language for what they've decided they're going to do, right?


00:05:14.500 --> 00:05:18.620
Yes, exactly. And I think that's, you know, part of the part of the challenge is


00:05:18.620 --> 00:05:22.900
everybody thinks a different way. And sometimes like a library might make a lot


00:05:22.900 --> 00:05:27.260
of sense to you, but other people it doesn't. And so that's a lot of where I


00:05:27.260 --> 00:05:30.500
think some of the challenges in the visualization landscape are trying to


00:05:30.500 --> 00:05:35.020
find that right API that makes sense for the actual business problems or


00:05:35.020 --> 00:05:38.580
visualization problems that you have and how it fits in your brain.


00:05:39.700 --> 00:05:40.820
- Indeed.


00:05:40.820 --> 00:05:43.860
So if people are coming from a business perspective


00:05:43.860 --> 00:05:45.740
and maybe Excel is where they


00:05:45.740 --> 00:05:46.740
or their colleagues have been working,


00:05:46.740 --> 00:05:50.180
I definitely recommend people go check out episode 200.


00:05:50.180 --> 00:05:52.940
And then there was also 10 tips to move from Excel


00:05:52.940 --> 00:05:55.940
to Python, a lot of common themes here.


00:05:55.940 --> 00:05:56.780
- Yes.


00:05:56.780 --> 00:05:59.300
- Normally at the beginning of the show,


00:05:59.300 --> 00:06:03.140
I ask people how they got into programming in Python.


00:06:03.140 --> 00:06:06.260
I've got you to answer that at least once, maybe twice,


00:06:06.260 --> 00:06:09.580
but probably a third time is not required.


00:06:09.580 --> 00:06:12.260
So just give us an update on what you've been up to.


00:06:12.260 --> 00:06:13.140
- Sure.


00:06:13.140 --> 00:06:17.420
So I am still working in the medical device industry.


00:06:17.420 --> 00:06:19.480
My job doesn't require Python,


00:06:19.480 --> 00:06:23.560
but my job does involve a lot of data analysis


00:06:23.560 --> 00:06:27.100
and working with not necessarily large sets of data,


00:06:27.100 --> 00:06:28.860
but sometimes data sets that are big enough


00:06:28.860 --> 00:06:31.540
that it's a little bit painful to work in Excel.


00:06:31.540 --> 00:06:36.340
And I just continue to find Python


00:06:36.340 --> 00:06:37.740
as the tool that I reach for


00:06:37.740 --> 00:06:39.580
when I need to do data analysis.


00:06:39.580 --> 00:06:42.420
And I continue to use it to build repeatable


00:06:42.420 --> 00:06:44.420
data analysis pipelines.


00:06:44.420 --> 00:06:48.980
I use it to clean data, maybe take external data


00:06:48.980 --> 00:06:50.780
that we buy from a third party


00:06:50.780 --> 00:06:53.960
and integrate it with internal data sets.


00:06:53.960 --> 00:06:58.080
Or as we'll talk about doing data visualization.


00:06:58.080 --> 00:07:00.320
I think there are a lot of things that Python can do


00:07:00.320 --> 00:07:02.680
from a data visualization perspective


00:07:02.680 --> 00:07:05.960
that are easier than trying to use Excel


00:07:05.960 --> 00:07:08.280
or some of the other tools that are available


00:07:08.280 --> 00:07:09.760
in a traditional environment.


00:07:09.760 --> 00:07:13.520
So I've continued to live and breathe Python.


00:07:13.520 --> 00:07:18.120
And I would say, you know, every week I use it a little bit,


00:07:18.120 --> 00:07:20.160
some weeks a lot more than others,


00:07:20.160 --> 00:07:23.080
but continue to enjoy kind of that blend


00:07:23.080 --> 00:07:26.880
of using Python for real world problems


00:07:26.880 --> 00:07:29.580
and not just for software development sake.


00:07:29.580 --> 00:07:32.320
- Do the people you work with,


00:07:32.320 --> 00:07:35.360
since the program is not officially like your title,


00:07:35.360 --> 00:07:37.680
Do they look at you as kind of like a wizard?


00:07:37.680 --> 00:07:38.880
- A little bit, yeah.


00:07:38.880 --> 00:07:41.160
Yeah, they certainly do.


00:07:41.160 --> 00:07:43.300
And I mean, I've done,


00:07:43.300 --> 00:07:46.320
one of the things that I've worked on


00:07:46.320 --> 00:07:48.920
was a forecasting tool to help us forecast


00:07:48.920 --> 00:07:51.920
our business performance,


00:07:51.920 --> 00:07:53.360
anticipate what that's gonna look like,


00:07:53.360 --> 00:07:55.560
which I think a lot of people did over the COVID times,


00:07:55.560 --> 00:07:58.300
trying to forecast was extremely challenging.


00:07:58.300 --> 00:08:03.280
And they just call it, well, what does the Python tool say?


00:08:03.280 --> 00:08:07.120
So they don't really get what the underlying libraries are,


00:08:07.120 --> 00:08:10.600
what's going on, but they do associate my name with Python.


00:08:10.600 --> 00:08:13.900
And I don't know if they really understand


00:08:13.900 --> 00:08:15.080
what it all means.


00:08:15.080 --> 00:08:16.520
I certainly try and explain it,


00:08:16.520 --> 00:08:19.600
but at the end of the day, they're happy with the results.


00:08:19.600 --> 00:08:21.080
And like you said, they do kind of think


00:08:21.080 --> 00:08:22.580
there's a little bit of a superpower,


00:08:22.580 --> 00:08:25.820
as you frequently say, for knowing that.


00:08:25.820 --> 00:08:31.160
- Well, when you go and look at the basic things


00:08:31.160 --> 00:08:32.800
that a lot of the tools we're gonna talk about


00:08:32.800 --> 00:08:35.520
the frameworks that we're going to talk about result in,


00:08:35.520 --> 00:08:38.160
you could easily look over at something like Excel and go,


00:08:38.160 --> 00:08:41.200
"Well, six, one, half dozen of the other,


00:08:41.200 --> 00:08:42.320
that kind of the same."


00:08:42.320 --> 00:08:47.640
But then the amount of customization and specialization that if you go a little bit


00:08:47.640 --> 00:08:52.240
beyond just the give me a histogram of this data,


00:08:52.240 --> 00:08:54.400
but you dig into it a bit,


00:08:54.400 --> 00:08:58.200
it goes far beyond what things like Excel are able to do.


00:08:58.200 --> 00:09:00.240
>> Yes, absolutely.


00:09:00.240 --> 00:09:02.520
It's funny you mentioned histogram.


00:09:02.520 --> 00:09:07.880
Like even a few years ago, there wasn't even really a histogram function in Excel.


00:09:07.880 --> 00:09:13.560
You know, kind of one of the basic functions I use pretty much for any new data set is


00:09:13.560 --> 00:09:16.600
the histogram and Excel didn't have one out of the box.


00:09:16.600 --> 00:09:19.320
You could build one, but it wasn't there.


00:09:19.320 --> 00:09:25.200
And I think that just kind of speaks to Excel is approaching visualization from a very different


00:09:25.200 --> 00:09:27.880
perspective I think than the Python tools.


00:09:27.880 --> 00:09:33.720
is much more of a how can I quickly create something


00:09:33.720 --> 00:09:37.320
and guide the user through it and then give them


00:09:37.320 --> 00:09:40.680
almost infinite options to customize the visualization.


00:09:40.680 --> 00:09:44.280
So you can go in and tweak any individual data


00:09:44.280 --> 00:09:50.280
point or axes or colors, which is useful for getting started.


00:09:50.280 --> 00:09:52.080
But I don't think it scales very well.


00:09:52.080 --> 00:09:55.680
And it also doesn't have some of the more sophisticated,


00:09:55.680 --> 00:09:57.880
complex visualizations that you can do with


00:09:57.880 --> 00:09:59.940
the Python libraries that are out there.


00:09:59.940 --> 00:10:04.080
>> Like Sunburst and other amazing things.


00:10:04.080 --> 00:10:04.200
>> Exactly.


00:10:04.200 --> 00:10:06.000
>> Yeah, cool. All right.


00:10:06.000 --> 00:10:09.320
Well, let's mention your course real quick because


00:10:09.320 --> 00:10:13.320
what we're going to cover today is inspired by the course.


00:10:13.320 --> 00:10:14.460
It's not the same thing as the course,


00:10:14.460 --> 00:10:16.120
but you recently published a course over in


00:10:16.120 --> 00:10:18.720
Talk Python, Python Data Visualization.


00:10:18.720 --> 00:10:21.000
This is really nice because


00:10:21.000 --> 00:10:26.000
the visualization landscape is so diverse and varied.


00:10:26.000 --> 00:10:31.320
And it's hard to pick, I think, what should I choose?


00:10:31.320 --> 00:10:34.960
How do I find something that, as you say, fits your brain?


00:10:34.960 --> 00:10:36.480
How do you find something that's modern


00:10:36.480 --> 00:10:39.720
that maybe is interactive or is good for publications?


00:10:39.720 --> 00:10:42.760
And so in this course, you kind of do a survey


00:10:42.760 --> 00:10:44.600
of many of the popular options.


00:10:44.600 --> 00:10:47.280
You want to give the quick elevator pitch on this


00:10:47.280 --> 00:10:49.480
and then we'll dive into the topics?


00:10:49.480 --> 00:10:51.720
- Sure, yeah, like you said,


00:10:51.720 --> 00:10:56.720
I think the Python visualization landscape is so rich,


00:10:56.720 --> 00:11:01.200
there are so many options and many people are discouraged


00:11:01.200 --> 00:11:03.200
and don't even know where to start.


00:11:03.200 --> 00:11:06.160
And I think when you try and marry up that landscape


00:11:06.160 --> 00:11:08.280
with the different types of problems


00:11:08.280 --> 00:11:10.460
you can solve with visualization,


00:11:10.460 --> 00:11:13.160
it really requires you to spend a little bit of time


00:11:13.160 --> 00:11:15.600
with each one of the main libraries


00:11:15.600 --> 00:11:17.520
or several of the main libraries


00:11:17.520 --> 00:11:21.480
to think about how they're going to solve your problem.


00:11:21.480 --> 00:11:25.800
And so the course steps through many of the common libraries,


00:11:25.800 --> 00:11:27.760
gives you, like we were talking about,


00:11:27.760 --> 00:11:29.720
the amount of Python that you need to know


00:11:29.720 --> 00:11:32.160
to do visualization is fairly minimal.


00:11:32.160 --> 00:11:34.320
So we don't spend a lot of time on Python.


00:11:34.320 --> 00:11:37.440
It's more about the API and how to interact


00:11:37.440 --> 00:11:40.560
with each visualization library to use it


00:11:40.560 --> 00:11:42.720
in the way that it's intended.


00:11:42.720 --> 00:11:45.280
And then I also think it's important


00:11:45.280 --> 00:11:48.120
when people are thinking about visualization,


00:11:48.120 --> 00:11:50.120
it's not just about the library.


00:11:50.120 --> 00:11:52.800
It's also about thinking about visualization.


00:11:52.800 --> 00:11:54.720
And as I point out in the beginning of the course,


00:11:54.720 --> 00:11:56.480
visualization is a really broad topic.


00:11:56.480 --> 00:11:58.920
I mean, there are computer science classes


00:11:58.920 --> 00:12:00.840
that you can take a whole semester on.


00:12:00.840 --> 00:12:04.360
There are many, many books that are really strong.


00:12:04.360 --> 00:12:06.360
- Edward, "Tough Day" comes to mind, "Tough Day," yeah.


00:12:06.360 --> 00:12:07.960
- Exactly, exactly.


00:12:07.960 --> 00:12:11.840
And when you start thinking about visualization that way,


00:12:11.840 --> 00:12:14.520
it changes the way you approach visualization


00:12:14.520 --> 00:12:17.740
from the Excel approach of how do I just build a bar chart


00:12:17.740 --> 00:12:20.220
to what is the information I have


00:12:20.220 --> 00:12:24.960
and how am I trying to convey it to the end audience.


00:12:24.960 --> 00:12:29.420
And so I spent a lot of time talking about that.


00:12:29.420 --> 00:12:34.420
And then I also think that there is a data manipulation


00:12:34.420 --> 00:12:36.080
component to this.


00:12:36.080 --> 00:12:39.520
Once you start to understand how to structure your data


00:12:39.520 --> 00:12:43.000
correctly using, maybe not correctly,


00:12:43.000 --> 00:12:46.000
but most efficiently for data visualization.


00:12:46.000 --> 00:12:49.280
Once you start structuring your data in that tidy format,


00:12:49.280 --> 00:12:53.120
then it's very easy to iterate on your visualizations


00:12:53.120 --> 00:12:55.720
and zero in on what's gonna work best for you


00:12:55.720 --> 00:12:57.720
and your end users.


00:12:57.720 --> 00:12:59.120
So that's what the course talks through.


00:12:59.120 --> 00:13:00.880
It talks to the concepts,


00:13:00.880 --> 00:13:05.660
real world examples of developing visualizations


00:13:05.660 --> 00:13:09.020
using many of the libraries we'll talk about,


00:13:09.020 --> 00:13:11.620
and then how to customize those visualizations


00:13:11.620 --> 00:13:14.220
from very basics all the way up to building


00:13:14.220 --> 00:13:17.100
custom dashboards that can be highly interactive


00:13:17.100 --> 00:13:20.180
and potentially deployed for others to use.


00:13:20.180 --> 00:13:21.260
- Cool.


00:13:21.260 --> 00:13:24.740
Yeah, I definitely learned a ton going through your course.


00:13:24.740 --> 00:13:27.380
It's over at talkpython.fm/dataviz.


00:13:27.380 --> 00:13:29.100
People can check that out.


00:13:29.100 --> 00:13:32.100
Let's get maybe a high level landscape.


00:13:32.100 --> 00:13:37.100
So view of the landscape before we dive into these topics,


00:13:37.180 --> 00:13:42.180
because there's different branches of this,


00:13:42.180 --> 00:13:43.660
I guess you would say.


00:13:43.660 --> 00:13:46.540
So there's a GitHub repo that you point out


00:13:46.540 --> 00:13:50.300
by Nicolas Rogier.


00:13:50.300 --> 00:13:51.260
I'm not sure how to say his name.


00:13:51.260 --> 00:13:52.180
Sorry, Nicolas.


00:13:52.180 --> 00:13:57.460
This is an adaptation of Jake Vander Plaats' graphic


00:13:57.460 --> 00:13:58.900
about the landscape here.


00:13:58.900 --> 00:14:03.900
And so, how's this picture fit for you?


00:14:05.620 --> 00:14:08.420
Do you think this is pretty accurate?


00:14:08.420 --> 00:14:11.580
>>Yeah, I do, because I think it points out


00:14:11.580 --> 00:14:13.340
a couple different things when you start


00:14:13.340 --> 00:14:14.820
thinking about visualization.


00:14:14.820 --> 00:14:18.060
So one of the key things that you


00:14:18.060 --> 00:14:22.180
can glean from looking at this, and for the people that


00:14:22.180 --> 00:14:26.540
are listening, it's a kind of starburst plot.


00:14:26.540 --> 00:14:29.540
And you've got a whole bunch of linkages


00:14:29.540 --> 00:14:32.340
between these different visualization libraries.


00:14:32.340 --> 00:14:35.980
And something that jumps out is Matplotlib


00:14:35.980 --> 00:14:38.780
is at the center of many of these libraries


00:14:38.780 --> 00:14:41.080
and it's the foundational tool


00:14:41.080 --> 00:14:43.220
that's used to build other libraries.


00:14:43.220 --> 00:14:45.160
And so I think that's a key concept.


00:14:45.160 --> 00:14:47.860
You can use Matplotlib on its own


00:14:47.860 --> 00:14:50.980
or knowing Matplotlib makes it easier


00:14:50.980 --> 00:14:52.900
to use some of these other libraries


00:14:52.900 --> 00:14:54.860
that are built on top of it.


00:14:54.860 --> 00:14:57.600
And the other thing is not shown on this,


00:14:57.600 --> 00:14:59.700
but from a history perspective,


00:14:59.700 --> 00:15:02.120
Matplotlib is sort of the grandfather


00:15:02.120 --> 00:15:04.600
of all Python visualization libraries.


00:15:04.600 --> 00:15:06.240
It's been around a long time.


00:15:06.240 --> 00:15:08.620
And what you see on the,


00:15:08.620 --> 00:15:11.600
for people that can see the visualization,


00:15:11.600 --> 00:15:13.220
on the left-hand side,


00:15:13.220 --> 00:15:17.120
JavaScript visualization is a little bit more modern,


00:15:17.120 --> 00:15:19.360
like you said, and what people expect


00:15:19.360 --> 00:15:22.000
when you think about an interactive visualization tool.


00:15:22.000 --> 00:15:24.760
And so that's a different approach for visualization


00:15:24.760 --> 00:15:26.280
that has some pluses and minuses.


00:15:26.280 --> 00:15:29.160
So you've got that Matplotlib and JavaScript,


00:15:29.160 --> 00:15:32.860
I think are the key distinctions for how libraries


00:15:32.860 --> 00:15:35.400
are constructed for visualization in Python.


00:15:35.400 --> 00:15:38.100
There are some other ones, there are some other libraries,


00:15:38.100 --> 00:15:40.160
but the two that I really focus on


00:15:40.160 --> 00:15:43.460
are either Matplotlib based or JavaScript based.


00:15:43.460 --> 00:15:45.940
- Sure, in the Matplotlib side,


00:15:45.940 --> 00:15:47.980
we have things like Matplotlib itself,


00:15:47.980 --> 00:15:52.980
but also pandas and Seaborn and scikit-plot, ggplot,


00:15:52.980 --> 00:15:58.160
stuff that people may be familiar from there.


00:15:58.160 --> 00:16:03.160
And then on the JavaScript side, we've got Bokeh and Plotly,


00:16:03.160 --> 00:16:05.800
some of the more, as you say, interactive ones,


00:16:05.800 --> 00:16:10.800
and D3.js is in there as far as a foundational item as well.


00:16:10.800 --> 00:16:12.400
- Exactly.


00:16:12.400 --> 00:16:14.320
- Altair, I don't even see Altair in this list.


00:16:14.320 --> 00:16:16.080
Maybe it's in there somewhere, but Altair.


00:16:16.080 --> 00:16:20.160
Oh yeah, it's over there hanging out close to Matplotlib.


00:16:20.160 --> 00:16:21.360
- Exactly, yes.


00:16:21.360 --> 00:16:23.840
- More strongly related to JavaScript, got it.


00:16:23.840 --> 00:16:24.680
- Yes.


00:16:24.680 --> 00:16:27.720
- The third one, the three main branches here


00:16:27.720 --> 00:16:30.120
are OpenGL.


00:16:30.120 --> 00:16:31.560
What do you know about the OpenGL ones?


00:16:31.560 --> 00:16:33.600
- Yeah, it's a good question.


00:16:33.600 --> 00:16:35.160
I don't use them a whole lot.


00:16:35.160 --> 00:16:38.660
I don't have a whole lot of experience with them.


00:16:38.660 --> 00:16:42.400
I think there are certainly maybe a certain


00:16:42.400 --> 00:16:45.240
like a very high volume data analysis


00:16:45.240 --> 00:16:49.360
that might be where performance is really important,


00:16:49.360 --> 00:16:51.320
where some of those OpenGL libraries,


00:16:51.320 --> 00:16:53.480
I think were originally founded.


00:16:53.480 --> 00:16:58.120
But I get the sense that most people are gravitating


00:16:58.120 --> 00:17:01.040
towards either those Matplotlib or the JavaScript ones


00:17:01.040 --> 00:17:02.560
that we've talked about.


00:17:02.560 --> 00:17:05.900
I don't have as much experience nor see as much development


00:17:05.900 --> 00:17:08.600
there with those libraries.


00:17:08.600 --> 00:17:11.680
>>Yeah, maybe they're about visualizing changing data


00:17:11.680 --> 00:17:14.840
that is flowing in real time, and you can actually


00:17:14.840 --> 00:17:17.720
see a change because OpenGL is basically a graphics


00:17:17.720 --> 00:17:19.080
library for animation, right?


00:17:19.080 --> 00:17:19.580
>>Sure.


00:17:19.580 --> 00:17:21.200
Yeah, I think that real-time component


00:17:21.200 --> 00:17:23.000
is a good distinction.


00:17:23.000 --> 00:17:24.240
Yeah, probably.


00:17:24.240 --> 00:17:27.800
Now, before people run fleeing to the hills,


00:17:27.800 --> 00:17:29.680
just because some of these projects


00:17:29.680 --> 00:17:31.840
are grouped under JavaScript doesn't


00:17:31.840 --> 00:17:34.760
mean you have to write JavaScript to use them, right?


00:17:34.760 --> 00:17:35.920
Correct, absolutely.


00:17:35.920 --> 00:17:39.600
Yeah, and all the ones that I cover and the ones on here


00:17:39.600 --> 00:17:42.680
actually have a really nice API on top of it.


00:17:42.680 --> 00:17:46.240
The JavaScript is abstracted away.


00:17:46.240 --> 00:17:48.560
And in some ways, there's some benefits.


00:17:48.560 --> 00:17:53.560
like I'll call it Altair because it leverages Vega Light.


00:17:53.560 --> 00:17:58.040
And anytime that underlying JavaScript library is updated,


00:17:58.040 --> 00:18:00.000
you kind of get all of those benefits


00:18:00.000 --> 00:18:01.480
for free through Altair.


00:18:01.480 --> 00:18:04.120
So it's, you know, in the spirit of open source,


00:18:04.120 --> 00:18:06.400
building on the shoulders of others.


00:18:06.400 --> 00:18:08.480
And there's a lot of benefits


00:18:08.480 --> 00:18:10.360
to having that JavaScript foundation


00:18:10.360 --> 00:18:13.640
and you don't need to understand JavaScript


00:18:13.640 --> 00:18:16.000
to use any of them.


00:18:16.000 --> 00:18:19.080
>> Yeah, and Altair really is like a transformation layer


00:18:19.080 --> 00:18:21.680
into a Vega-Lite definition,


00:18:21.680 --> 00:18:24.720
which is then processed by JavaScript to be rendered.


00:18:24.720 --> 00:18:27.440
So there's even this sort of separation layer.


00:18:27.440 --> 00:18:30.400
So it's not like you necessarily have to change your code


00:18:30.400 --> 00:18:32.440
to pick up the changes there.


00:18:32.440 --> 00:18:34.440
>> No, and I think at some point,


00:18:34.440 --> 00:18:36.520
depending on how deep down the rabbit hole you go,


00:18:36.520 --> 00:18:38.800
there could be points where, okay, it is really,


00:18:38.800 --> 00:18:40.820
if you're doing something highly custom


00:18:40.820 --> 00:18:41.960
or something really unique,


00:18:41.960 --> 00:18:44.360
understanding what's going on under the hood


00:18:44.360 --> 00:18:47.800
could be useful, but you can get pretty far


00:18:47.800 --> 00:18:49.840
without having to know that.


00:18:49.840 --> 00:18:52.540
- Right, maybe you're trying to make a book or an article


00:18:52.540 --> 00:18:54.200
and you need something just so you're like,


00:18:54.200 --> 00:18:55.720
you know what, I'm just gonna dump out


00:18:55.720 --> 00:19:00.280
the Vega-Lite definition and just add two things to it,


00:19:00.280 --> 00:19:01.680
but create it through Altair.


00:19:01.680 --> 00:19:02.600
- Exactly.


00:19:02.600 --> 00:19:03.440
- Yeah.


00:19:03.440 --> 00:19:04.260
- Exactly.


00:19:04.260 --> 00:19:05.720
- Okay, fantastic.


00:19:05.720 --> 00:19:09.160
All right, well, let's start with the granddaddy,


00:19:09.160 --> 00:19:11.920
as you put it, Matt Plotlib.


00:19:11.920 --> 00:19:14.860
So there's so many shiny new things,


00:19:14.860 --> 00:19:20.100
but you make the case that knowing Matplotlib is still


00:19:20.100 --> 00:19:24.220
really worthwhile and really important, right?


00:19:24.220 --> 00:19:26.680
Because it is the foundation of so many things.


00:19:26.680 --> 00:19:27.700
>>Exactly.


00:19:27.700 --> 00:19:31.300
It is the foundation, and it's so important to know it.


00:19:31.300 --> 00:19:36.620
And also, it is extremely highly customizable.


00:19:36.620 --> 00:19:38.500
And I was thinking about this.


00:19:38.500 --> 00:19:43.780
And in some ways, I think if Matplotlib,


00:19:43.780 --> 00:19:48.380
if you stripped out a lot of the old and everything


00:19:48.380 --> 00:19:50.860
that they've done in the last three to five years


00:19:50.860 --> 00:19:53.780
and just focused on that new, and if you


00:19:53.780 --> 00:19:57.140
could erase all the old tutorials and all


00:19:57.140 --> 00:20:01.460
of the maybe ancient answers on Stack Overflow


00:20:01.460 --> 00:20:02.980
and just focused on the new stuff,


00:20:02.980 --> 00:20:05.260
people would have a much different perspective


00:20:05.260 --> 00:20:06.540
on Matplotlib.


00:20:06.540 --> 00:20:12.840
I think it's hard when you have something that's been around so long and has evolved,


00:20:12.840 --> 00:20:18.140
that you do get some cases out there where, okay, an API or the way they approached a


00:20:18.140 --> 00:20:24.580
visualization in the past was clunky, but in the five or 10 years since, it's improved.


00:20:24.580 --> 00:20:28.380
And if you use the new and improved, it's really streamlined and really easy.


00:20:28.380 --> 00:20:35.420
So I think it's important that people not get turned away right off the bat from Matplotlib.


00:20:35.420 --> 00:20:43.020
There are certain types of visualizations where if you need a high degree of customization if you want to


00:20:43.020 --> 00:20:50.800
Print it out or include in a manuscript or a book, you know, Matplotlib is really useful and powerful for it


00:20:50.800 --> 00:20:54.460
In that distinction about the new and the old


00:20:54.460 --> 00:20:58.060
Originally when Matplotlib came out, you know, correct me if I'm wrong


00:20:58.980 --> 00:21:02.740
it's my limited understanding, is it was somewhat modeled


00:21:02.740 --> 00:21:05.540
on the MATLAB way of programming,


00:21:05.540 --> 00:21:08.540
and it had this imperative API.


00:21:08.540 --> 00:21:11.780
The new one is more object-oriented, isn't it?


00:21:11.780 --> 00:21:14.080
- Yes, yes, that's exactly right.


00:21:14.080 --> 00:21:16.960
So there's this state-based interface


00:21:16.960 --> 00:21:18.580
that was based on MATLAB,


00:21:18.580 --> 00:21:20.380
and for people making that transition


00:21:20.380 --> 00:21:24.460
from MATLAB to Matplotlib, it was seamless, right?


00:21:24.460 --> 00:21:26.340
And they really understood it and it made sense,


00:21:26.340 --> 00:21:29.860
But that way of doing things doesn't--


00:21:29.860 --> 00:21:31.780
it's not really Pythonic.


00:21:31.780 --> 00:21:36.060
And so the object-oriented interface is newer


00:21:36.060 --> 00:21:40.900
and is clearly the direction that Matplotlib documentation


00:21:40.900 --> 00:21:42.940
wants to steer you down that path.


00:21:42.940 --> 00:21:47.180
And if you stay on that path, then it makes more sense,


00:21:47.180 --> 00:21:49.140
I think, from a Python perspective.


00:21:49.140 --> 00:21:51.940
And you do have a tremendous amount of power.


00:21:51.940 --> 00:21:54.600
And I would say the other thing that I think turns people off


00:21:54.600 --> 00:21:59.460
with Matplotlib in the past is the visualizations


00:21:59.460 --> 00:22:01.060
are relatively unstyled.


00:22:01.060 --> 00:22:04.500
I mean, they're kind of plain, whereas some


00:22:04.500 --> 00:22:07.060
of these newer libraries just out of the box


00:22:07.060 --> 00:22:09.240
make something that look really nice.


00:22:09.240 --> 00:22:11.560
Matplotlib allows you to customize it,


00:22:11.560 --> 00:22:13.380
but that's extra work.


00:22:13.380 --> 00:22:15.260
One of the things that Matplotlib has done


00:22:15.260 --> 00:22:22.220
is they have a new theming, or a relatively new theming API.


00:22:22.220 --> 00:22:24.860
And so if you use that, then you do


00:22:24.860 --> 00:22:28.380
get visualizations that look a little nicer out of the box


00:22:28.380 --> 00:22:31.780
and are more visually appealing.


00:22:31.780 --> 00:22:35.020
>>Yeah, it does have that kind of--


00:22:35.020 --> 00:22:37.340
it looks fine, but it kind of just looks a little bland,


00:22:37.340 --> 00:22:37.840
right?


00:22:37.840 --> 00:22:40.540
And it doesn't have that D3 JS feel.


00:22:40.540 --> 00:22:45.740
Although I got to give them some pretty mad props on the XKCD.


00:22:45.740 --> 00:22:48.740
>>Exactly.


00:22:48.740 --> 00:22:50.420
>>You've seen this, it sounds like.


00:22:50.420 --> 00:22:51.420
Yes, I have.


00:22:51.420 --> 00:22:57.140
So if people I'm sure most people out there listening know the XKCD comic,


00:22:57.140 --> 00:23:01.780
right, if you don't go to your terminal or command prompt and run Python three


00:23:01.780 --> 00:23:04.820
and then just type import anti gravity, then you'll know.


00:23:04.820 --> 00:23:08.980
But they have this it's been around forever and it has this sort of style


00:23:08.980 --> 00:23:11.220
of like handwritten but not handwritten.


00:23:11.220 --> 00:23:14.720
But one of the things you can get.


00:23:14.720 --> 00:23:19.180
Is you can get the XKCD theme.


00:23:19.680 --> 00:23:27.140
Exactly, yes, yeah, it's really cool and you know every once in a while you'll find an article that someone put together where they


00:23:27.140 --> 00:23:32.900
show this beautiful visualization and then you'd be surprised that's


00:23:32.900 --> 00:23:38.720
Matplotlib and they show all the steps and you can configure and you can make something as nice as any of the


00:23:38.720 --> 00:23:45.800
JavaScript frameworks that are out there, but it does take some time. There are more lines of code to get there


00:23:45.800 --> 00:23:49.440
Yeah, that's true


00:23:49.440 --> 00:23:51.840
on this XKCD thing, it might sound like it's,


00:23:51.840 --> 00:23:55.040
well, ha ha, that's funny, like everybody loves XKCD.


00:23:55.040 --> 00:23:59.520
I do think there is some value to presenting results,


00:23:59.520 --> 00:24:01.120
whether that be a user interface


00:24:01.120 --> 00:24:04.600
or a visualization of analysis,


00:24:04.600 --> 00:24:09.240
where you wanna give it this preliminary look,


00:24:09.240 --> 00:24:11.480
this unfinished look, right?


00:24:11.480 --> 00:24:13.320
And so if you're gonna come into a meeting


00:24:13.320 --> 00:24:16.280
and you wanna say, this is what the early data says,


00:24:16.280 --> 00:24:19.800
this is what our first pass analysis says.


00:24:19.800 --> 00:24:22.440
Put it in the XKCD, they might set that tone


00:24:22.440 --> 00:24:24.720
versus if it's like perfect and beautiful,


00:24:24.720 --> 00:24:25.560
like, well, you're done.


00:24:25.560 --> 00:24:26.560
Like, no, no, we're not done.


00:24:26.560 --> 00:24:28.480
We're not, we're really far from done.


00:24:28.480 --> 00:24:29.720
This is just the beginning.


00:24:29.720 --> 00:24:32.600
I just wanna give you a hint of what we're finding out.


00:24:32.600 --> 00:24:35.480
I think there's a way that you could actually use this.


00:24:35.480 --> 00:24:36.520
That would be practical.


00:24:36.520 --> 00:24:37.340
- I agree.


00:24:37.340 --> 00:24:38.400
I mean, it's a good point.


00:24:38.400 --> 00:24:41.040
And one of the things that I think


00:24:41.040 --> 00:24:42.960
when you go into a business setting,


00:24:42.960 --> 00:24:45.680
everybody's used to standard Excel plots.


00:24:45.680 --> 00:24:47.960
And when you bring in something else like this,


00:24:47.960 --> 00:24:51.880
like an XCD plot or some other plot


00:24:51.880 --> 00:24:52.760
that people aren't used to,


00:24:52.760 --> 00:24:55.060
it does get them to focus


00:24:55.060 --> 00:24:56.440
and look at it a little bit different


00:24:56.440 --> 00:25:01.440
and can steer the discussion in a little bit different way.


00:25:01.440 --> 00:25:02.440
- Yeah.


00:25:02.440 --> 00:25:08.000
Yeah, so one of the little areas that I thought was


00:25:08.000 --> 00:25:12.520
just really nice and really simple would be things like,


00:25:12.520 --> 00:25:15.640
if you go and plot something with Matplotlib


00:25:15.640 --> 00:25:19.760
and you have a lot of ticks along the bottom,


00:25:19.760 --> 00:25:22.960
it's very common that the words start to overlap each other


00:25:22.960 --> 00:25:26.040
and you're like, well, this isn't working.


00:25:26.040 --> 00:25:30.480
And just little simple things like putting an angle


00:25:30.480 --> 00:25:36.560
on the values in the x-axis can make it so much nicer.


00:25:36.560 --> 00:25:39.560
>>Yes.


00:25:39.560 --> 00:25:41.520
And one of the things that I--


00:25:41.520 --> 00:25:44.320
I do have a soft spot in my heart for Matplotlib.


00:25:44.320 --> 00:25:47.000
on the official documentation.


00:25:47.000 --> 00:25:49.760
I think under the tutorials, they


00:25:49.760 --> 00:25:53.240
took one of the blog posts that I wrote on matplotlib,


00:25:53.240 --> 00:25:57.160
and it has been incorporated into the official tutorial


00:25:57.160 --> 00:25:58.480
about how to get started.


00:25:58.480 --> 00:26:00.840
So I think that's kind of cool.


00:26:00.840 --> 00:26:03.760
I'm proud of that.


00:26:03.760 --> 00:26:04.280
Absolutely.


00:26:04.280 --> 00:26:07.240
Another one that I thought was nice to know about that's


00:26:07.240 --> 00:26:10.800
not at all obvious is formatters,


00:26:10.800 --> 00:26:16.360
using like f string formatter type things for when


00:26:16.360 --> 00:26:17.480
the data gets put up there.


00:26:17.480 --> 00:26:22.840
So maybe instead of having 201, 0, dot, da, da, da,


00:26:22.840 --> 00:26:24.640
some huge long decimal, you could


00:26:24.640 --> 00:26:28.840
format that as a number with no decimal point, no sense.


00:26:28.840 --> 00:26:32.280
>>Yeah, I use that all the time for currency.


00:26:32.280 --> 00:26:34.040
So if you're showing like millions,


00:26:34.040 --> 00:26:35.580
you don't want to have all the zeros,


00:26:35.580 --> 00:26:40.440
maybe just format as dollar sign 2m or whatever.


00:26:40.440 --> 00:26:43.960
And Matplotlib makes that very easy to do.


00:26:43.960 --> 00:26:45.840
And dates here, as you're showing,


00:26:45.840 --> 00:26:47.600
are always one of those challenges.


00:26:47.600 --> 00:26:49.640
With any time you're plotting something,


00:26:49.640 --> 00:26:52.920
trying to figure out the right level of dates


00:26:52.920 --> 00:26:55.320
that convey the information but don't crowd out


00:26:55.320 --> 00:26:57.000
the visualization.


00:26:57.000 --> 00:26:58.520
- Yeah, absolutely.


00:26:58.520 --> 00:27:02.600
So there's a lot to learn there, but yeah.


00:27:02.600 --> 00:27:05.640
I still think a lot of people will be doing Matplotlib,


00:27:05.640 --> 00:27:09.120
but also a lot of people will be choosing the newer ones.


00:27:09.120 --> 00:27:13.040
Now for each of these, you came up with some pros and cons.


00:27:13.040 --> 00:27:17.360
So for the pros category in Matplotlib,


00:27:17.360 --> 00:27:20.660
you have robust options that can do almost anything


00:27:20.660 --> 00:27:22.520
and lots of documentation examples.


00:27:22.520 --> 00:27:29.440
- Yeah, yeah, I mean, that is anything you wanna do,


00:27:29.440 --> 00:27:31.000
you can do it in Matplotlib.


00:27:31.000 --> 00:27:34.420
The challenge is gonna be,


00:27:34.420 --> 00:27:36.920
and you can find documentation examples,


00:27:36.920 --> 00:27:41.860
What does get challenging is because the API


00:27:41.860 --> 00:27:44.600
has evolved and changed over time,


00:27:44.600 --> 00:27:46.740
looking at the official docs are great,


00:27:46.740 --> 00:27:48.160
but when you can't find it there


00:27:48.160 --> 00:27:49.560
and you go searching on the web,


00:27:49.560 --> 00:27:52.800
you will find a tutorial from seven years ago


00:27:52.800 --> 00:27:55.400
and the way they're telling you to do it may work,


00:27:55.400 --> 00:27:58.520
but it's not the most efficient way


00:27:58.520 --> 00:28:00.160
or may not work well with the way


00:28:00.160 --> 00:28:01.920
the rest of your code is structured.


00:28:01.920 --> 00:28:03.080
So I think that's-- - Maybe it's not taking


00:28:03.080 --> 00:28:05.120
advantage of the themes or maybe it's using


00:28:05.120 --> 00:28:06.820
a stateful API instead.


00:28:06.820 --> 00:28:07.660
- Exactly.


00:28:07.660 --> 00:28:09.400
- There's a lot of reasons it could be off.


00:28:09.400 --> 00:28:14.400
- And then I think the final challenge with matplotlib


00:28:14.400 --> 00:28:17.680
is there is some degree of interactivity,


00:28:17.680 --> 00:28:19.640
but it's not at the high level


00:28:19.640 --> 00:28:21.040
that some of the other libraries have.


00:28:21.040 --> 00:28:23.160
So if you have a scatter plot


00:28:23.160 --> 00:28:26.180
and you wanna zoom in on an individual plot,


00:28:26.180 --> 00:28:27.600
look at the data,


00:28:27.600 --> 00:28:30.760
it's not as easy to do in matplotlib


00:28:30.760 --> 00:28:32.880
as it is in some of the other libraries.


00:28:32.880 --> 00:28:36.280
The other pro that I'd say with Matplotlib


00:28:36.280 --> 00:28:39.780
is if you are trying to get your visualization


00:28:39.780 --> 00:28:41.140
in another format--


00:28:41.140 --> 00:28:42.840
so you're trying to put it in a document,


00:28:42.840 --> 00:28:45.760
you're trying to put it in a PDF, SVG,


00:28:45.760 --> 00:28:50.240
any kind of graphic format, Matplotlib supports that.


00:28:50.240 --> 00:28:53.680
Out of the box, it's very easy to save it in any format


00:28:53.680 --> 00:28:57.920
and move it into whatever other document you have.


00:28:57.920 --> 00:29:01.520
Whereas some of the other ones are a little more challenging


00:29:01.520 --> 00:29:04.640
to do that or maybe don't have as high quality output


00:29:04.640 --> 00:29:06.440
as Matplotlib does.


00:29:06.440 --> 00:29:11.960
>>Especially if it's an SVG, you can scale that almost infinitely.


00:29:11.960 --> 00:29:13.960
>>Yes, exactly.


00:29:13.960 --> 00:29:15.640
>>Yeah.


00:29:15.640 --> 00:29:18.600
Another thing that is going to be a repeated theme


00:29:18.600 --> 00:29:23.200
throughout many of these frameworks, but is also here,


00:29:23.200 --> 00:29:28.800
is the ability not to just make one charge or one picture


00:29:28.800 --> 00:29:31.240
or one plot of some variation,


00:29:31.240 --> 00:29:34.760
but to build multiple plots, right?


00:29:34.760 --> 00:29:37.520
So for example, a matplotlib, you can put,


00:29:37.520 --> 00:29:39.640
there's a, on the examples here,


00:29:39.640 --> 00:29:41.320
they have a MRI with EEG.


00:29:41.320 --> 00:29:44.960
And so they've got the brain, a picture of the brain,


00:29:44.960 --> 00:29:49.080
and then a MRI, and then also some other measurement,


00:29:49.080 --> 00:29:51.840
which I don't know enough brain science to know


00:29:51.840 --> 00:29:52.720
what it's for, but--


00:29:52.720 --> 00:29:54.600
- Neither do I, it looks cool.


00:29:54.600 --> 00:29:55.440
- It looks cool, right?


00:29:55.440 --> 00:29:57.520
But you can create a single picture


00:29:57.520 --> 00:30:00.520
that puts like two graphs and then a graph below it, right?


00:30:00.520 --> 00:30:02.340
There's a way to compose these


00:30:02.340 --> 00:30:04.300
beyond just making one picture.


00:30:04.300 --> 00:30:07.860
- Exactly, and if you think, well, I could do this in Excel,


00:30:07.860 --> 00:30:10.060
I could put two or three graphs next to each other,


00:30:10.060 --> 00:30:12.500
but here's where the power of Matplotlib comes into play.


00:30:12.500 --> 00:30:15.780
Let's say you were running experiments in a lab


00:30:15.780 --> 00:30:18.100
and you're doing hundreds of these,


00:30:18.100 --> 00:30:19.300
you wouldn't go into Excel


00:30:19.300 --> 00:30:21.180
and individually position all this.


00:30:21.180 --> 00:30:23.100
No, you write your Python script,


00:30:23.100 --> 00:30:27.180
you develop that layout for those different visualizations,


00:30:27.180 --> 00:30:29.040
And then you're done.


00:30:29.040 --> 00:30:30.740
Once you get the data, you just kind of run through it


00:30:30.740 --> 00:30:31.860
and you can iterate through it.


00:30:31.860 --> 00:30:33.820
And that's really the power


00:30:33.820 --> 00:30:36.940
of using a real programming language to do visualization


00:30:36.940 --> 00:30:40.700
versus just trying to do one-off visualizations in Excel


00:30:40.700 --> 00:30:43.140
or some of the other tools out there.


00:30:43.140 --> 00:30:46.100
- Sure, and instead of necessarily putting those pictures


00:30:46.100 --> 00:30:48.780
into a notebook output, you could write a loop.


00:30:48.780 --> 00:30:51.740
It says, go get me this experiment's data


00:30:51.740 --> 00:30:54.620
and generate this graph and save it to a file.


00:30:54.620 --> 00:30:56.020
Get the next one.


00:30:56.020 --> 00:30:57.820
find out even what's in the folder,


00:30:57.820 --> 00:30:59.500
pull them all in, loop over them,


00:30:59.500 --> 00:31:01.860
generate one picture, then the next,


00:31:01.860 --> 00:31:03.580
and the next, and the next with the right name.


00:31:03.580 --> 00:31:05.900
And so it could just be all automatic,


00:31:05.900 --> 00:31:07.940
either in a script or just in a notebook


00:31:07.940 --> 00:31:09.740
that doesn't have as much output.


00:31:09.740 --> 00:31:11.620
- Right, exactly, yep.


00:31:11.620 --> 00:31:14.060
The full power of Python is at your fingertips.


00:31:14.060 --> 00:31:15.780
- Yeah, absolutely.


00:31:15.780 --> 00:31:20.580
All right, so that's the kernel of one half of this branch.


00:31:20.580 --> 00:31:24.220
The, maybe the next one,


00:31:24.220 --> 00:31:26.180
This one's a little bit surprising to me


00:31:26.180 --> 00:31:27.420
'cause I just don't do enough pandas,


00:31:27.420 --> 00:31:30.140
but pandas, when I think about pandas,


00:31:30.140 --> 00:31:32.380
it's about manipulating data and reading data


00:31:32.380 --> 00:31:36.020
and transforming data and doing that tidy data preparation


00:31:36.020 --> 00:31:38.280
that you spoke about, all those different things,


00:31:38.280 --> 00:31:42.380
but there's also graphing built into pandas itself.


00:31:42.380 --> 00:31:46.100
- Yes, and that graphing is built on top of Matplotlib.


00:31:46.100 --> 00:31:49.060
So that's why from a course perspective


00:31:49.060 --> 00:31:50.820
and thinking about visualization,


00:31:50.820 --> 00:31:54.440
I think having that matplotlib foundation sets you up


00:31:54.440 --> 00:31:57.440
so that when you're in Pandas, where, like you said,


00:31:57.440 --> 00:32:00.840
you'll be doing the majority of your data input, manipulation,


00:32:00.840 --> 00:32:06.000
and analysis, it's important to understand what visualization


00:32:06.000 --> 00:32:07.500
tools you have there.


00:32:07.500 --> 00:32:10.120
And a lot of the standard visualizations


00:32:10.120 --> 00:32:13.600
that you want to do with a line chart, scatter plots, bar


00:32:13.600 --> 00:32:18.560
charts, box plots, histograms, you can do with Pandas.


00:32:18.560 --> 00:32:23.880
And it's mostly a very thin wrapper around Matplotlib.


00:32:23.880 --> 00:32:26.800
So that's why it helps if you get this output


00:32:26.800 --> 00:32:28.520
and you look at it and say, well, I just


00:32:28.520 --> 00:32:30.240
want to customize it a little bit.


00:32:30.240 --> 00:32:33.400
Typically, if you know that Matplotlib API,


00:32:33.400 --> 00:32:36.400
then you could customize it in Pandas


00:32:36.400 --> 00:32:40.800
or go into Matplotlib and customize the Pandas output.


00:32:40.800 --> 00:32:43.920
So I think that is really useful.


00:32:43.920 --> 00:32:46.240
The other thing that's interesting about Pandas


00:32:46.240 --> 00:32:51.280
is it will allow you to plug in other backends.


00:32:51.280 --> 00:32:53.880
So matplotlib is the default, but you


00:32:53.880 --> 00:32:57.240
can enable backends for Plotly and a few


00:32:57.240 --> 00:32:58.920
of the other visualizations.


00:32:58.920 --> 00:33:02.320
So it can be kind of this universal interface


00:33:02.320 --> 00:33:04.360
to visualization.


00:33:04.360 --> 00:33:10.640
In my experience, I don't use the pandas visualization


00:33:10.640 --> 00:33:11.960
a whole lot.


00:33:11.960 --> 00:33:14.620
But I do think it's important for people


00:33:14.620 --> 00:33:16.780
to understand that it's out there because there are times


00:33:16.780 --> 00:33:20.580
where that's the quickest way to get something out there.


00:33:20.580 --> 00:33:25.580
And it's sufficient for the quick and dirty needs.


00:33:25.580 --> 00:33:29.100
- Well, yeah, sometimes you open up a Panda,


00:33:29.100 --> 00:33:30.660
you read something like a CSV or whatever,


00:33:30.660 --> 00:33:31.860
and you just wanna know, what is this?


00:33:31.860 --> 00:33:36.500
And you would type df, a data frame, df.head or tail.


00:33:36.500 --> 00:33:38.900
One of the, and it gives you just a little brief view


00:33:38.900 --> 00:33:43.020
into it, but, you know, there's the picture's worth


00:33:43.020 --> 00:33:44.260
a thousand words sort of thing.


00:33:44.260 --> 00:33:48.940
And if all you have to say is just dot plot, and that's it,


00:33:48.940 --> 00:33:53.500
or dot hist, and now you have a picture instead of that tail


00:33:53.500 --> 00:33:58.340
or head equivalent, that's a really cool way


00:33:58.340 --> 00:34:01.100
to just sort of quickly explore the data.


00:34:01.100 --> 00:34:02.660
>>Exactly.


00:34:02.660 --> 00:34:08.860
And there are some other more unique plots in pandas.


00:34:08.860 --> 00:34:13.780
So there are some plots called the Andrews curves.


00:34:13.780 --> 00:34:17.860
and parallel coordinates that are more advanced.


00:34:17.860 --> 00:34:22.860
And to be honest, it's more of a data science


00:34:22.860 --> 00:34:24.280
kind of machine learning plot.


00:34:24.280 --> 00:34:27.000
It's not something you use that often,


00:34:27.000 --> 00:34:30.000
but it is important to understand if you need it,


00:34:30.000 --> 00:34:34.760
that it is out there in Pandas for you.


00:34:34.760 --> 00:34:39.640
- Yeah, the Andrews curves reminds me a lot


00:34:39.640 --> 00:34:42.880
of like a Lawrence generator, a tractor.


00:34:42.880 --> 00:34:46.760
>> Something from Chaos Theory.


00:34:46.760 --> 00:34:49.800
A bunch of lines like looping over and over and over and over.


00:34:49.800 --> 00:34:51.640
>> Exactly. It looks pretty cool.


00:34:51.640 --> 00:34:54.120
You'd probably blow some people's minds if you put that up,


00:34:54.120 --> 00:34:56.600
but it's specialized.


00:34:56.600 --> 00:35:02.840
But it does speak to when you start getting into this visualization world,


00:35:02.840 --> 00:35:06.080
there are specialized libraries and you might find


00:35:06.080 --> 00:35:10.960
something in your niche that you're working that this is really useful,


00:35:10.960 --> 00:35:12.520
and it's really powerful and it's maybe hard to do


00:35:12.520 --> 00:35:15.400
in other tools and boom, it's easy in pandas


00:35:15.400 --> 00:35:16.860
or some of the other tools.


00:35:16.860 --> 00:35:20.160
- Yeah, so let me tell,


00:35:20.160 --> 00:35:24.400
I'd normally try to avoid saying code on here


00:35:24.400 --> 00:35:27.200
'cause it's audio, but given a data frame,


00:35:27.200 --> 00:35:32.480
I can say plot.figure and then just call Andrews curves,


00:35:32.480 --> 00:35:34.960
give it the data frame and a name and boom,


00:35:34.960 --> 00:35:38.560
you get this amazing visualization of your data


00:35:38.560 --> 00:35:41.960
like on three incredibly simple lines.


00:35:41.960 --> 00:35:43.160
- Yes.


00:35:43.160 --> 00:35:44.820
- This is the kind of stuff that I was referring to


00:35:44.820 --> 00:35:46.040
at the beginning when I said like,


00:35:46.040 --> 00:35:47.400
you almost don't need to know Python.


00:35:47.400 --> 00:35:49.520
I mean, technically there's a little bit of Python,


00:35:49.520 --> 00:35:52.000
but barely, right?


00:35:52.000 --> 00:35:53.080
- Right, right.


00:35:53.080 --> 00:35:57.040
And it's just starting to understand how to think about


00:35:57.040 --> 00:35:59.940
how you could use these tools and getting familiar with it


00:35:59.940 --> 00:36:02.800
so that the first time you're trying to build something


00:36:02.800 --> 00:36:05.560
is not, you're not also trying to learn in the API


00:36:05.560 --> 00:36:07.520
and all these other visualization topics


00:36:07.520 --> 00:36:09.800
on top of trying to solve whatever problem you're


00:36:09.800 --> 00:36:13.560
trying to solve with visualization.


00:36:13.560 --> 00:36:16.360
>> Well, yeah, there's definitely some neat stuff to do visually


00:36:16.360 --> 00:36:20.040
with pandas, and people should certainly be using it.


00:36:20.040 --> 00:36:24.800
Also, based on the matplotlib kernel, we have Seaborn.


00:36:24.800 --> 00:36:27.360
Where's this fit into the world?


00:36:27.360 --> 00:36:33.080
>> So Seaborn builds on top of matplotlib, like you said,


00:36:33.080 --> 00:36:38.440
But it really focuses more on doing statistical analysis


00:36:38.440 --> 00:36:41.360
of your data, and taking that data


00:36:41.360 --> 00:36:46.720
and frequently transforming it in some ways


00:36:46.720 --> 00:36:48.680
and developing a visualization.


00:36:48.680 --> 00:36:55.520
So I use it a lot for histograms and box plots.


00:36:55.520 --> 00:36:59.600
But where Seaborn is really, really powerful


00:36:59.600 --> 00:37:03.880
is the ability to do facets, facet plotting,


00:37:03.880 --> 00:37:05.760
or small multiples.


00:37:05.760 --> 00:37:11.760
And that's where you take a plot and you change a variable


00:37:11.760 --> 00:37:13.480
over each row or column.


00:37:13.480 --> 00:37:16.680
And then you get a grid of several plots.


00:37:16.680 --> 00:37:20.040
So you've got 9, 12, however many plots you need.


00:37:20.040 --> 00:37:28.000
And it gives you an opportunity to spot data anomalies, trends


00:37:28.000 --> 00:37:29.400
very easily.


00:37:29.400 --> 00:37:32.160
and present a wealth of information


00:37:32.160 --> 00:37:33.620
in a very compact frame.


00:37:33.620 --> 00:37:38.520
And what I like about Seaborn is it is very easy to do this.


00:37:38.520 --> 00:37:40.880
So the code that's required to do this


00:37:40.880 --> 00:37:43.720
is typically one or two lines of code.


00:37:43.720 --> 00:37:46.040
And you get this really nice plot


00:37:46.040 --> 00:37:48.120
that has different colors.


00:37:48.120 --> 00:37:51.840
It has data varying across the rows and columns.


00:37:51.840 --> 00:37:56.560
You can change the shape, the size, everything


00:37:56.560 --> 00:37:58.320
with those visualization concepts


00:37:58.320 --> 00:38:02.000
that we cover in the beginning to develop visualization


00:38:02.000 --> 00:38:05.800
that really give you a lot of insight very quickly.


00:38:05.800 --> 00:38:08.360
>>Yeah, absolutely.


00:38:08.360 --> 00:38:10.520
It's very statistical focused, isn't it?


00:38:10.520 --> 00:38:11.200
>>It is.


00:38:11.200 --> 00:38:12.600
It is.


00:38:12.600 --> 00:38:15.400
It is very statistical focused, and some of the plots


00:38:15.400 --> 00:38:17.500
are more complex.


00:38:17.500 --> 00:38:19.520
And having a statistical background


00:38:19.520 --> 00:38:20.720
will help you understand them.


00:38:20.720 --> 00:38:23.600
But simple things like just doing


00:38:23.600 --> 00:38:28.660
bar plots or histograms or a count plot or a heat map


00:38:28.660 --> 00:38:31.760
are relatively straightforward to explain to others


00:38:31.760 --> 00:38:35.680
and easy to create with Seaborn.


00:38:35.680 --> 00:38:36.660
And then you're right.


00:38:36.660 --> 00:38:39.440
There are some of the plots that are definitely much more


00:38:39.440 --> 00:38:42.820
deep in the statistical toolbox.


00:38:42.820 --> 00:38:48.000
And you have to know how you would explain them to others.


00:38:48.000 --> 00:38:51.360
>>Luis: So this faceting thing is pretty interesting.


00:38:51.360 --> 00:38:55.000
If you go to the Seaborn examples,


00:38:55.000 --> 00:38:58.800
they've got one for, it looks like five different variables,


00:38:58.800 --> 00:39:00.960
or sorry, four variables,


00:39:00.960 --> 00:39:03.840
and they're looking at two different groups on one of them.


00:39:03.840 --> 00:39:05.880
And you could just say, show me,


00:39:05.880 --> 00:39:09.040
basically, instead of give me a picture of this data,


00:39:09.040 --> 00:39:13.440
take any two pieces of information and generate a graph


00:39:13.440 --> 00:39:16.000
to show me how those things correlate, right?


00:39:16.000 --> 00:39:19.000
One of the pieces of data that you did a lot of work with


00:39:19.000 --> 00:39:24.000
was the automobile gasoline efficiency data


00:39:24.000 --> 00:39:25.440
from the EPA, right?


00:39:25.440 --> 00:39:27.480
- Yes, yeah.


00:39:27.480 --> 00:39:32.480
And what I find really fascinating about this


00:39:32.480 --> 00:39:36.140
is when you get the data set up properly


00:39:36.140 --> 00:39:39.520
and you wanna look at all these different relationships,


00:39:39.520 --> 00:39:43.220
it's very easy to slice and dice


00:39:43.220 --> 00:39:46.640
and mix up those relationships to see where the trends are.


00:39:46.640 --> 00:39:51.200
So if we're looking at fuel efficiency,


00:39:51.200 --> 00:39:54.880
we could look at it by the year the cars were manufactured.


00:39:54.880 --> 00:39:58.120
We could look at it by are they front wheel drive,


00:39:58.120 --> 00:40:01.160
all wheel drive cars, how many cylinders do they have,


00:40:01.160 --> 00:40:02.000
are they electric--


00:40:02.000 --> 00:40:04.680
- SUV versus car, all these things, yeah.


00:40:04.680 --> 00:40:07.600
- Yeah, there could be a price component,


00:40:07.600 --> 00:40:10.440
there could be just a whole bunch of different ways


00:40:10.440 --> 00:40:11.360
to look at it.


00:40:11.360 --> 00:40:13.440
And when you have a big data set,


00:40:13.440 --> 00:40:17.080
Those are the types of things that are very difficult to do


00:40:17.080 --> 00:40:18.340
just by looking at the numbers.


00:40:18.340 --> 00:40:21.160
And that's where visualization really shines


00:40:21.160 --> 00:40:25.000
and where Seaborn makes it tremendously easy to just


00:40:25.000 --> 00:40:26.960
quickly iterate through and say, OK, I


00:40:26.960 --> 00:40:28.880
want to look at these two variables together.


00:40:28.880 --> 00:40:30.380
Now let's layer in a third variable.


00:40:30.380 --> 00:40:31.760
Now there's a fourth variable.


00:40:31.760 --> 00:40:32.760
Well, I don't like this.


00:40:32.760 --> 00:40:34.760
Let's switch them around a different way.


00:40:34.760 --> 00:40:39.520
And I use Seaborn a lot because of that flexibility


00:40:39.520 --> 00:40:42.880
of just exploring the data, quickly figuring out


00:40:42.880 --> 00:40:45.360
what those trends are, what those insights are,


00:40:45.360 --> 00:40:52.680
and rapidly iterating through it for the exploratory analysis.


00:40:52.680 --> 00:40:56.480
>> Another thing that Seaborn has is it looks really nice,


00:40:56.480 --> 00:40:59.280
and it has this idea of themes.


00:40:59.280 --> 00:41:00.120
>> Yes.


00:41:00.120 --> 00:41:02.360
>> So easy to make it look good, right?


00:41:02.360 --> 00:41:02.920
>> It is.


00:41:02.920 --> 00:41:06.080
I mean, Seaborn out of the box applies some themes


00:41:06.080 --> 00:41:11.600
and also does things behind the scenes with the visualization


00:41:11.600 --> 00:41:15.860
to make it cleaner and to try and format the data


00:41:15.860 --> 00:41:18.960
so that dates line up appropriately


00:41:18.960 --> 00:41:23.760
and colors look nice and there's appropriate spacing


00:41:23.760 --> 00:41:25.280
and things like that.


00:41:25.280 --> 00:41:27.320
And there are some other things that


00:41:27.320 --> 00:41:30.880
are pretty easy to control, to turn on and off or change


00:41:30.880 --> 00:41:33.520
the color palettes with Seaborn.


00:41:33.520 --> 00:41:37.160
But generally, out of the box, it strives to look good


00:41:37.160 --> 00:41:38.120
and it looks nice.


00:41:38.120 --> 00:41:41.740
And what's also beneficial about it


00:41:41.740 --> 00:41:44.240
is it is just matplotlib under the hood.


00:41:44.240 --> 00:41:48.520
And so if you get to the point where you've done your analysis


00:41:48.520 --> 00:41:52.180
and things look pretty good, but you want to do some tweaks,


00:41:52.180 --> 00:41:54.240
there are some convenience functions in Seaborn


00:41:54.240 --> 00:41:55.120
to do that.


00:41:55.120 --> 00:41:58.800
But there's also-- it's just matplotlib under the hood.


00:41:58.800 --> 00:42:01.480
So if you know matplotlib and you want to tweak some things,


00:42:01.480 --> 00:42:04.320
you can do that as well.


00:42:04.320 --> 00:42:05.320
Yeah, for sure.


00:42:05.320 --> 00:42:08.040
One thing I want to maybe take a step back on here


00:42:08.040 --> 00:42:11.680
with Matt Plotlib on a lot of these examples,


00:42:11.680 --> 00:42:15.160
not this one I got up here, but on lots of them,


00:42:15.160 --> 00:42:16.520
I'll see--


00:42:16.520 --> 00:42:18.560
and you talked about this-- that they'll


00:42:18.560 --> 00:42:22.080
have semicolons some of the time.


00:42:22.080 --> 00:42:25.680
And Python's famous for not requiring semicolons


00:42:25.680 --> 00:42:27.840
at the end of lines.


00:42:27.840 --> 00:42:29.360
What's the story there?


00:42:29.360 --> 00:42:33.080
>>Yeah, the semicolons are just an artifact


00:42:33.080 --> 00:42:36.640
of when you're developing in a Jupyter Notebook


00:42:36.640 --> 00:42:40.540
And when you show that plot, the matplotlib


00:42:40.540 --> 00:42:44.240
will show additional information about the plot.


00:42:44.240 --> 00:42:47.260
So it will have a string descriptor,


00:42:47.260 --> 00:42:48.640
and then it will show the plot.


00:42:48.640 --> 00:42:50.980
And if you use the semicolon, it will


00:42:50.980 --> 00:42:52.800
suppress that extra information.


00:42:52.800 --> 00:42:54.560
So all you see is the plot.


00:42:54.560 --> 00:42:58.440
So it's certainly-- it's not required by any means.


00:42:58.440 --> 00:42:59.160
And you're right.


00:42:59.160 --> 00:43:02.300
It does-- for people that have played with Python for a while,


00:43:02.300 --> 00:43:04.120
you wonder why there's a semicolon there.


00:43:04.120 --> 00:43:09.760
but it's just to suppress some of that extra information that


00:43:09.760 --> 00:43:11.440
gets shown.


00:43:11.440 --> 00:43:12.680
And it's not on all the lines.


00:43:12.680 --> 00:43:14.560
It's just on certain plotting lines.


00:43:14.560 --> 00:43:15.840
The other lines don't need it.


00:43:15.840 --> 00:43:17.880
So it is a little unclear if you're not sure,


00:43:17.880 --> 00:43:20.520
which is why I'm bringing it up.


00:43:20.520 --> 00:43:23.480
All right, moving on from Seaborn,


00:43:23.480 --> 00:43:29.240
we start to bridge our way over into the JavaScript D3.js side


00:43:29.240 --> 00:43:31.680
of things with Altair.


00:43:31.680 --> 00:43:35.320
And Altair, I think is certainly very well known


00:43:35.320 --> 00:43:36.320
and very well respected.


00:43:36.320 --> 00:43:37.960
It's one of the newer ones, isn't it?


00:43:37.960 --> 00:43:39.080
- It is, yes.


00:43:39.080 --> 00:43:42.380
I have to look, I don't remember off the top of my head,


00:43:42.380 --> 00:43:46.800
but if Matplotlib was started in like 2012,


00:43:46.800 --> 00:43:52.280
Altair is probably in the last five years or so.


00:43:52.280 --> 00:43:53.120
- Yeah, yeah.


00:43:53.120 --> 00:43:54.840
- I would imagine.


00:43:54.840 --> 00:43:59.100
So definitely much newer, but has been,


00:44:01.520 --> 00:44:04.320
tremendous amount of updates.


00:44:04.320 --> 00:44:04.840
What was it?


00:44:04.840 --> 00:44:06.000
2015.


00:44:06.000 --> 00:44:07.080
OK.


00:44:07.080 --> 00:44:11.360
And Jake, who started it and maintains it,


00:44:11.360 --> 00:44:17.600
did an awesome job of leveraging a lot of the best practices


00:44:17.600 --> 00:44:21.920
from Python libraries as well as R to build Altair.


00:44:21.920 --> 00:44:25.280
And like we said, it's built on top of Vega.


00:44:25.280 --> 00:44:29.240
So there's that-- any time that new work


00:44:29.240 --> 00:44:31.560
is done in that JavaScript library,


00:44:31.560 --> 00:44:35.600
it's easier to port it to Python


00:44:35.600 --> 00:44:37.680
so that you can leverage that as well.


00:44:37.680 --> 00:44:42.040
- Yeah, quite popular, almost 8,000 GitHub stars.


00:44:42.040 --> 00:44:47.040
And Jake Vanderplass added or changed 353,000 lines,


00:44:47.040 --> 00:44:51.080
that removed 240,000 lines.


00:44:51.080 --> 00:44:54.160
And Allison BG as well, something on a similar scale.


00:44:54.160 --> 00:44:55.840
That's a ton of work.


00:44:55.840 --> 00:44:59.520
Yeah, yeah, no, it's it's it's a fabulous library.


00:44:59.520 --> 00:45:04.800
I mean, there's what one of the things I really like about the library is the gallery.


00:45:04.800 --> 00:45:06.240
Yeah, that's where we're going now.


00:45:06.240 --> 00:45:09.920
And the documentation is really great for Altair.


00:45:09.920 --> 00:45:15.160
And once you start to get into it, you need to spend a little bit of time.


00:45:15.160 --> 00:45:17.680
Just make sure you understand how the library works.


00:45:17.680 --> 00:45:22.800
But then probably 90 percent of the time you're going to go to the gallery and try and find something.


00:45:22.800 --> 00:45:25.440
And you look at the code and you're like, oh, OK, that's how I do it.


00:45:25.440 --> 00:45:27.320
- Yeah, like this is the one I want.


00:45:27.320 --> 00:45:29.340
- Yes, exactly.


00:45:29.340 --> 00:45:30.960
- There's a lot of interesting aspects


00:45:30.960 --> 00:45:32.040
about creating graphs here.


00:45:32.040 --> 00:45:36.240
So one of the common ones is to create a scatter plot,


00:45:36.240 --> 00:45:39.180
which is called Mark Circle in this world, right?


00:45:39.180 --> 00:45:42.400
And hopefully those are similar enough


00:45:42.400 --> 00:45:45.680
to be put together as the same thing.


00:45:45.680 --> 00:45:48.960
And those create little dots that show like,


00:45:48.960 --> 00:45:51.800
where's all the data from these different categories say.


00:45:51.800 --> 00:45:54.160
And one thing that's interesting,


00:45:54.160 --> 00:45:56.200
is you can say, I'd like the color,


00:45:56.200 --> 00:46:00.560
I want the X to be this value and the Y to be that value,


00:46:00.560 --> 00:46:02.760
but then I want the color of the dot


00:46:02.760 --> 00:46:05.320
to be based on another column,


00:46:05.320 --> 00:46:09.100
and maybe the size to be on a third one.


00:46:09.100 --> 00:46:11.880
So in this EPA car data, you could say,


00:46:11.880 --> 00:46:15.760
well, I want the color of the dot to be the type of vehicle,


00:46:15.760 --> 00:46:19.200
like an SUV or a car or whatever.


00:46:19.200 --> 00:46:21.360
And then I want the size to be the number of cylinders


00:46:21.360 --> 00:46:22.440
in the engine.


00:46:22.440 --> 00:46:25.560
And that's just incredibly easy, but it really


00:46:25.560 --> 00:46:28.240
draws out the data.


00:46:28.240 --> 00:46:28.960
>>It does.


00:46:28.960 --> 00:46:33.800
And Altair makes it easy to combine this in different ways.


00:46:33.800 --> 00:46:39.160
So if you want to have a scatter plot and a bar chart


00:46:39.160 --> 00:46:42.840
or a histogram, you can combine these together.


00:46:42.840 --> 00:46:45.400
You can also do the faceting that we talked about with


00:46:45.400 --> 00:46:46.160
Seaborn.


00:46:46.160 --> 00:46:49.320
You can do with Altair where you change the variable


00:46:49.320 --> 00:46:53.560
across the columns and rows to get different plots.


00:46:53.560 --> 00:46:56.520
And the other thing that Altair--


00:46:56.520 --> 00:46:58.720
one of the other things Altair introduces


00:46:58.720 --> 00:47:01.600
is interactivity out of the box.


00:47:01.600 --> 00:47:05.480
So because it is JavaScript-based,


00:47:05.480 --> 00:47:10.040
you then have that ability to go in and, as you're doing here,


00:47:10.040 --> 00:47:13.320
for the people who can see it, you can hover over a spot


00:47:13.320 --> 00:47:16.080
and then control what information


00:47:16.080 --> 00:47:18.740
is shown for that hover.


00:47:18.740 --> 00:47:22.700
So you can see, oh, what's going on with this individual dot?


00:47:22.700 --> 00:47:25.940
Well, it's a Volkswagen Rabbit from Europe,


00:47:25.940 --> 00:47:28.380
and it has a 71 horsepower engine


00:47:28.380 --> 00:47:31.140
and gets 31.9 miles per gallon.


00:47:31.140 --> 00:47:34.780
And so it's really cool and really useful


00:47:34.780 --> 00:47:37.180
for doing that exploratory analysis, where


00:47:37.180 --> 00:47:39.860
you want to see the individual data points


00:47:39.860 --> 00:47:42.260
and maybe drill into it a little bit more.


00:47:42.260 --> 00:47:45.060
Yeah, the interactivity is great.


00:47:45.060 --> 00:47:47.020
The ability to add custom tooltips


00:47:47.020 --> 00:47:50.180
and then have those tooltips have like F-string style


00:47:50.180 --> 00:47:53.220
formatting as well is pretty excellent.


00:47:53.220 --> 00:47:58.620
So if the data doesn't show up just the way you would like,


00:47:58.620 --> 00:47:59.980
you could have something.


00:47:59.980 --> 00:48:02.740
You could say small, medium, large versus this number,


00:48:02.740 --> 00:48:03.260
that number.


00:48:03.260 --> 00:48:05.860
So you can kind of think about it separately and differently,


00:48:05.860 --> 00:48:06.380
right?


00:48:06.380 --> 00:48:07.860
>>Exactly.


00:48:07.860 --> 00:48:11.100
And one of the other things that's interesting about Altair


00:48:11.100 --> 00:48:16.100
is it does try to infer different aspects about your data.


00:48:16.100 --> 00:48:22.260
So it tries to understand, well, is this data continuous data?


00:48:22.260 --> 00:48:23.820
Is it date data?


00:48:23.820 --> 00:48:27.860
And you can specify the different types of data.


00:48:27.860 --> 00:48:30.380
So you can say that it's quantitative


00:48:30.380 --> 00:48:33.940
or it's an ordinal value or nominal value.


00:48:33.940 --> 00:48:38.100
And the actual visualization will change a little bit


00:48:38.100 --> 00:48:39.980
depending on that data type.


00:48:39.980 --> 00:48:42.760
And so that's a unique thing that Altair does.


00:48:42.760 --> 00:48:44.180
And I think that's one of those things


00:48:44.180 --> 00:48:47.980
as you start going down this visualization path,


00:48:47.980 --> 00:48:50.580
you start to think about your data a little bit differently


00:48:50.580 --> 00:48:52.640
and think about how you want to present it.


00:48:52.640 --> 00:48:54.840
And Altair gives you that window


00:48:54.840 --> 00:48:58.960
into all the flexibility you have with presenting data.


00:48:58.960 --> 00:49:03.940
- One of the really nice aspects of interactivity


00:49:03.940 --> 00:49:06.080
of these is the legend.


00:49:06.080 --> 00:49:09.180
So the legend will show, you know, it really looks nice.


00:49:09.180 --> 00:49:10.940
and it matches the color and the name,


00:49:10.940 --> 00:49:14.220
and it's in a font that is pretty readable.


00:49:14.220 --> 00:49:15.580
But if you set it up right,


00:49:15.580 --> 00:49:19.700
you can go and actually click on these


00:49:19.700 --> 00:49:21.100
and either just highlight one,


00:49:21.100 --> 00:49:23.460
or you can have them sort of be toggle buttons.


00:49:23.460 --> 00:49:25.620
So if you wanna just focus on,


00:49:25.620 --> 00:49:27.980
let me pull out just, in this case,


00:49:27.980 --> 00:49:29.900
it's got agricultural, finance,


00:49:29.900 --> 00:49:31.260
government type of spending or something.


00:49:31.260 --> 00:49:32.260
You can just say, "I wanna just see


00:49:32.260 --> 00:49:34.420
the educational and health,"


00:49:34.420 --> 00:49:36.420
and click that, and it highlights that


00:49:36.420 --> 00:49:38.620
sort of separate from the rest of them.


00:49:38.620 --> 00:49:40.400
- Yes, and it's really easy.


00:49:40.400 --> 00:49:42.820
There's like one line of code


00:49:42.820 --> 00:49:45.460
that you need to do to set that all up.


00:49:45.460 --> 00:49:49.080
- Right, add selection or something simple like that, right?


00:49:49.080 --> 00:49:50.180
- Exactly, yep.


00:49:50.180 --> 00:49:54.900
- One other thing I wanna touch on with Altair here,


00:49:54.900 --> 00:49:57.980
and I also wanna talk about an example,


00:49:57.980 --> 00:50:01.760
but you talked about, was it data,


00:50:01.760 --> 00:50:04.260
was it transformed or something?


00:50:04.260 --> 00:50:07.860
You've gotta either use a file or a little server


00:50:07.860 --> 00:50:11.220
or something to process the data?


00:50:11.220 --> 00:50:12.500
What's the story with that?


00:50:12.500 --> 00:50:15.580
>> Yeah, so one of the things that


00:50:15.580 --> 00:50:21.140
can be a little tricky with Altair is behind the scenes,


00:50:21.140 --> 00:50:26.340
it's translating whatever data you have into a JSON file.


00:50:26.340 --> 00:50:30.420
And so what that means is when you have 10 or 20 data


00:50:30.420 --> 00:50:32.380
elements, it's not that big a deal.


00:50:32.380 --> 00:50:34.740
But when you have thousands of elements,


00:50:34.740 --> 00:50:36.300
you can suddenly get to a point where


00:50:36.300 --> 00:50:38.700
that file is really huge.


00:50:38.700 --> 00:50:43.140
And so rightly so, Altair makes sure


00:50:43.140 --> 00:50:47.180
that you don't inadvertently embed that in your notebook.


00:50:47.180 --> 00:50:50.060
So you could end up with your Jupyter notebook suddenly


00:50:50.060 --> 00:50:55.060
being 50 megs because you've got all these Altair


00:50:55.060 --> 00:50:56.420
visualizations in there.


00:50:56.420 --> 00:50:59.900
So there are some options for how


00:50:59.900 --> 00:51:03.300
you can manage that data so that it's not necessarily stored


00:51:03.300 --> 00:51:06.020
directly in the notebook file.


00:51:06.020 --> 00:51:08.780
Maybe you have that data stored separately,


00:51:08.780 --> 00:51:13.020
kind of like on a cache file in a directory,


00:51:13.020 --> 00:51:17.260
or potentially more of like a real-time streaming option


00:51:17.260 --> 00:51:19.740
where you have a backend service


00:51:19.740 --> 00:51:21.020
that's running behind the scenes


00:51:21.020 --> 00:51:22.500
that streams up the data to you.


00:51:22.500 --> 00:51:25.660
So there is a little bit more complexity sometimes


00:51:25.660 --> 00:51:27.740
with Altair to get it running.


00:51:27.740 --> 00:51:29.900
And because of that visualization,


00:51:29.900 --> 00:51:34.380
because of the JSON approach that it uses.


00:51:34.380 --> 00:51:38.120
So that's certainly one of the watch outs and things


00:51:38.120 --> 00:51:39.780
to keep in mind.


00:51:39.780 --> 00:51:42.460
I would say the other thing that sometimes


00:51:42.460 --> 00:51:44.220
has been a challenge for me with Altair


00:51:44.220 --> 00:51:46.260
is saving visualizations.


00:51:46.260 --> 00:51:50.940
So if you want to create something as an SVG


00:51:50.940 --> 00:51:54.740
in Matplotlib or Seaborn, it's very straightforward.


00:51:54.740 --> 00:51:57.300
You just save it with Altair.


00:51:57.300 --> 00:51:59.740
Sometimes it can be a little challenging because of the way


00:51:59.740 --> 00:52:02.380
it's trying to render those visualizations


00:52:02.380 --> 00:52:06.500
and save them to a PNG or SVG file.


00:52:06.500 --> 00:52:08.180
>> Yeah.


00:52:08.180 --> 00:52:12.660
Yeah, so you've got to set that up and select the right one.


00:52:12.660 --> 00:52:14.460
It'll work if you don't have too much data


00:52:14.460 --> 00:52:15.380
without doing that, right?


00:52:15.380 --> 00:52:15.780
But then--


00:52:15.780 --> 00:52:16.220
>> Correct.


00:52:16.220 --> 00:52:17.920
>> --there's some limit where it's like,


00:52:17.920 --> 00:52:19.020
this is too much.


00:52:19.020 --> 00:52:21.860
You've got to have to push it outside of the notebook.


00:52:21.860 --> 00:52:22.460
>> Yes.


00:52:22.460 --> 00:52:24.660
Yeah, and you'll get an error message,


00:52:24.660 --> 00:52:26.940
and it'll tell you what's going on.


00:52:26.940 --> 00:52:31.100
But I do mention it in the course, some of the options


00:52:31.100 --> 00:52:32.540
for getting around it.


00:52:32.540 --> 00:52:33.940
And the documentation is good


00:52:33.940 --> 00:52:36.140
about what those options are as well.


00:52:36.140 --> 00:52:36.980
- Sure.


00:52:36.980 --> 00:52:39.220
All right, so to wrap up Altair,


00:52:39.220 --> 00:52:41.600
I wanna talk through a little example here.


00:52:41.600 --> 00:52:46.140
And I'll put this example in the show notes


00:52:46.140 --> 00:52:47.520
so people can check it out.


00:52:47.520 --> 00:52:53.140
Let's try to describe this picture here.


00:52:53.140 --> 00:52:55.420
And like I said, I'll put it in the show notes


00:52:55.420 --> 00:52:57.140
so people can see it.


00:52:57.140 --> 00:52:59.220
You have this Amazon author reviews


00:52:59.220 --> 00:53:02.780
for the top 20 most reviewed books,


00:53:02.780 --> 00:53:05.700
most reviewed authors over the last 10 years


00:53:05.700 --> 00:53:07.180
or something like that, right?


00:53:07.180 --> 00:53:08.580
- Yes.


00:53:08.580 --> 00:53:09.900
- Tell us what's going on in this picture


00:53:09.900 --> 00:53:12.380
and we can maybe talk through just the API components


00:53:12.380 --> 00:53:13.260
that make it happen.


00:53:13.260 --> 00:53:16.220
- Sure, so behind the scenes, the data is,


00:53:16.220 --> 00:53:20.300
I can't even, well, I guess this one's through,


00:53:20.300 --> 00:53:25.300
what, 2016 or so, 10 years or so of Amazon reviews.


00:53:26.200 --> 00:53:31.200
So on the X axis, it's 2009 through 2020.


00:53:31.200 --> 00:53:34.320
And then on the Y axis, we have authors.


00:53:34.320 --> 00:53:38.640
So a lot of famous authors in this timeframe


00:53:38.640 --> 00:53:42.040
and some of these authors will have one book a year,


00:53:42.040 --> 00:53:43.960
they'll have multiple books a year.


00:53:43.960 --> 00:53:48.860
And so it will have a circle where for each author


00:53:48.860 --> 00:53:50.380
for the year they published a book


00:53:50.380 --> 00:53:52.320
and the size of the circle


00:53:52.320 --> 00:53:54.920
represents how many reviews they had.


00:53:54.920 --> 00:53:59.920
So this is a really quick way to see how consistent some of these top authors


00:53:59.920 --> 00:54:02.480
are over years. you know, it's,


00:54:02.480 --> 00:54:06.140
it's sort of interesting like Dale Carnegie is at the top. I mean,


00:54:06.140 --> 00:54:10.460
he wrote this book, I don't know, probably 50 plus years ago,


00:54:10.460 --> 00:54:13.460
but it's still a bestseller on Amazon.


00:54:13.460 --> 00:54:18.200
And then you have other people, that are,


00:54:18.200 --> 00:54:20.740
maybe a little more sporadic, but it's a,


00:54:20.740 --> 00:54:24.340
It's a very easy way to see the consistency


00:54:24.340 --> 00:54:25.980
and then the number of reviews


00:54:25.980 --> 00:54:28.940
that each author gets for a year.


00:54:28.940 --> 00:54:30.120
And I would say, you know,


00:54:30.120 --> 00:54:32.360
if an author has more than one book,


00:54:32.360 --> 00:54:34.320
obviously they'll have more reviews.


00:54:34.320 --> 00:54:37.960
So it's not broken out by book, it's just purely by author.


00:54:37.960 --> 00:54:40.420
- Right, and when you build up this picture,


00:54:40.420 --> 00:54:41.660
some of the things that happen is


00:54:41.660 --> 00:54:42.820
there's a legend that shows up.


00:54:42.820 --> 00:54:44.740
The legend is basically just a copy,


00:54:44.740 --> 00:54:46.980
slightly offset of what's on the left.


00:54:46.980 --> 00:54:47.980
But what you really wanna know


00:54:47.980 --> 00:54:49.900
is what's the size of the circle means.


00:54:49.900 --> 00:54:52.660
so you can add like an alternative legend


00:54:52.660 --> 00:54:54.900
and you can put a grid behind it


00:54:54.900 --> 00:54:56.660
and make it really easy to follow the timeline.


00:54:56.660 --> 00:55:00.460
There's just a really cool bunch of features.


00:55:00.460 --> 00:55:02.780
And this is the kind of picture I was thinking about


00:55:02.780 --> 00:55:05.260
when we were thinking, when I said, you know,


00:55:05.260 --> 00:55:09.420
like if you just go and call plot or circle


00:55:09.420 --> 00:55:11.640
or whatever, you know, mark circle,


00:55:11.640 --> 00:55:14.420
you end up with something that's not all that impressive.


00:55:14.420 --> 00:55:17.580
But if you layer a few of these ideas on, then it's great.


00:55:17.580 --> 00:55:18.080
Right.


00:55:18.080 --> 00:55:22.120
So like we said, we've got the author and the year,


00:55:22.120 --> 00:55:23.220
and then the size.


00:55:23.220 --> 00:55:26.340
We configure the size based on the number of reviews.


00:55:26.340 --> 00:55:28.860
Then we configure the color based on the author


00:55:28.860 --> 00:55:32.300
so that it's a little easier visually to look at this


00:55:32.300 --> 00:55:34.020
and see the information.


00:55:34.020 --> 00:55:37.160
And then we also do this thing that


00:55:37.160 --> 00:55:41.140
is interesting with Altair is when


00:55:41.140 --> 00:55:44.860
you think about Seaborn and Matplotlib and Pandas


00:55:44.860 --> 00:55:46.880
and some of the other libraries we'll talk about,


00:55:46.880 --> 00:55:51.180
You typically do the data manipulation in pandas.


00:55:51.180 --> 00:55:55.760
Altair has its own ability to do manipulation and transformation


00:55:55.760 --> 00:55:57.000
of data.


00:55:57.000 --> 00:55:59.400
And so there is this option--


00:55:59.400 --> 00:56:04.420
I could have filtered it down to the top 20 authors,


00:56:04.420 --> 00:56:11.600
but I use this transform filter to select only the top authors.


00:56:11.600 --> 00:56:17.040
And that's all in Altair, not using any pandas.


00:56:17.040 --> 00:56:18.480
And then the final thing that we do


00:56:18.480 --> 00:56:21.880
is configure the width and the height and the title.


00:56:21.880 --> 00:56:30.240
So that's all one long piece of code that looks intimidating,


00:56:30.240 --> 00:56:31.920
maybe if you haven't worked with Altair.


00:56:31.920 --> 00:56:35.800
But when you take a step back and break it down and think


00:56:35.800 --> 00:56:38.600
about what it is you're trying to do with your visualization,


00:56:38.600 --> 00:56:41.920
And then with a basic understanding of the Altair API,


00:56:41.920 --> 00:56:46.640
it's pretty straightforward and extremely powerful.


00:56:46.640 --> 00:56:47.140
>>Sure.


00:56:47.140 --> 00:56:48.760
You kind of got to do it in steps.


00:56:48.760 --> 00:56:51.120
It's a very fluent API.


00:56:51.120 --> 00:56:56.600
Alt.chart.markcircle.encode.config.


00:56:56.600 --> 00:57:00.240
But if you take each one of those relatively simple


00:57:00.240 --> 00:57:03.200
function calls, then try to understand that


00:57:03.200 --> 00:57:04.320
and see what you're doing.


00:57:04.320 --> 00:57:06.000
And then it turns out to be not too bad.


00:57:06.000 --> 00:57:06.720
>>Yeah, exactly.


00:57:06.720 --> 00:57:10.520
And what people need to realize when they're thinking


00:57:10.520 --> 00:57:14.240
about this course is, anytime I develop code


00:57:14.240 --> 00:57:16.080
and it looks like this and it has this many lines,


00:57:16.080 --> 00:57:17.920
you're right, it wasn't, I didn't start off.


00:57:17.920 --> 00:57:20.640
I did first, let's just do author versus year.


00:57:20.640 --> 00:57:23.120
Well, I don't like this, I need to tweak one more thing.


00:57:23.120 --> 00:57:24.560
Then I need to tweak one more thing


00:57:24.560 --> 00:57:27.720
and you iterate over it to get there.


00:57:27.720 --> 00:57:31.360
And once you kind of understand how all these libraries work


00:57:31.360 --> 00:57:34.400
it's not too much work, but it does take a little bit of time


00:57:34.400 --> 00:57:38.320
and that's why it's important to dive into the data


00:57:38.320 --> 00:57:40.840
and play with it and experiment with it


00:57:40.840 --> 00:57:43.200
and see what works for you.


00:57:43.200 --> 00:57:46.280
>>Yeah, it almost is its own little mini language.


00:57:46.280 --> 00:57:47.120
>>It is.


00:57:47.120 --> 00:57:48.160
>>It is.


00:57:48.160 --> 00:57:50.360
All right, before we move on to the next one,


00:57:50.360 --> 00:57:52.080
question from the audience, I'm all out there asking,


00:57:52.080 --> 00:57:54.540
can we do responsive and animated workflow diagrams


00:57:54.540 --> 00:57:56.280
with Matplotlib, for example,


00:57:56.280 --> 00:57:59.000
continuous builds development on different server


00:57:59.000 --> 00:58:01.760
or deployment on different servers?


00:58:01.760 --> 00:58:04.440
I'm not entirely sure exactly what you're asking,


00:58:04.440 --> 00:58:07.960
but certainly you can automate these things.


00:58:07.960 --> 00:58:09.440
It doesn't have to be in a notebook.


00:58:09.440 --> 00:58:11.720
This could all be put into a script, right?


00:58:11.720 --> 00:58:14.800
>>Yes, and there are--


00:58:14.800 --> 00:58:17.600
matplotlib does support some animation.


00:58:17.600 --> 00:58:19.480
And I can't remember how much of this


00:58:19.480 --> 00:58:23.040
is out of the box matplotlib versus third party libraries,


00:58:23.040 --> 00:58:25.800
but I've certainly seen visualizations


00:58:25.800 --> 00:58:28.480
that people have done with matplotlib where it's something


00:58:28.480 --> 00:58:32.460
changing over time or steps in a process,


00:58:32.460 --> 00:58:36.040
you can do that with Matplotlib.


00:58:36.040 --> 00:58:38.980
- So you could create one of those language battles.


00:58:38.980 --> 00:58:42.520
Have you ever seen those where like over 20 or 30 years,


00:58:42.520 --> 00:58:44.440
it's either the browser or the language


00:58:44.440 --> 00:58:47.920
is one of the most popular, then it goes up and all that.


00:58:47.920 --> 00:58:49.200
- Yeah, you could do that.


00:58:49.200 --> 00:58:52.400
I'd have to look and see what would be the best approach,


00:58:52.400 --> 00:58:54.640
but those sorts of options are out there.


00:58:54.640 --> 00:58:55.480
- Fun.


00:58:55.480 --> 00:58:56.300
All right.


00:58:58.240 --> 00:59:00.120
Sticking in the JavaScript side of things,


00:59:00.120 --> 00:59:02.920
the other really popular one over there is Plotly.


00:59:02.920 --> 00:59:06.660
What's special and unique about Plotly?


00:59:06.660 --> 00:59:11.880
- I think Plotly is special and unique


00:59:11.880 --> 00:59:16.880
because it is a newer plotting library


00:59:16.880 --> 00:59:20.080
kind of on the order of Altair.


00:59:20.080 --> 00:59:24.360
It is supported by a company out of Canada,


00:59:24.360 --> 00:59:29.760
but the Plotly visualization library


00:59:29.760 --> 00:59:31.480
is completely open source.


00:59:31.480 --> 00:59:33.960
It is based on JavaScript.


00:59:33.960 --> 00:59:38.000
But what I like about it is everything


00:59:38.000 --> 00:59:40.200
is interactive out of the box.


00:59:40.200 --> 00:59:43.720
So any plot you make, as soon as it renders,


00:59:43.720 --> 00:59:46.120
you can take your mouse and you can hover over it.


00:59:46.120 --> 00:59:47.600
You can zoom in.


00:59:47.600 --> 00:59:51.120
You can limit the range of data.


00:59:51.120 --> 00:59:54.200
And so that is really powerful.


00:59:54.200 --> 00:59:56.860
And then the second thing that I really like about it


00:59:56.860 --> 01:00:02.000
is the history of Plotly, there was a separate Plotly


01:00:02.000 --> 01:00:04.460
visualization, and then there was something


01:00:04.460 --> 01:00:08.180
called Plotly Express, which was streamlined.


01:00:08.180 --> 01:00:11.780
And the Plotly Express API, in my opinion,


01:00:11.780 --> 01:00:13.900
is very similar to Seaborn.


01:00:13.900 --> 01:00:16.380
And it is very--


01:00:16.380 --> 01:00:17.620
I think it's Pythonic.


01:00:17.620 --> 01:00:19.700
It's very easy to understand and pick up.


01:00:19.700 --> 01:00:21.420
And over time, they've expanded it


01:00:21.420 --> 01:00:25.500
to where now that's the default visualization.


01:00:25.500 --> 01:00:30.060
So it's very easy to get started with Plotly.


01:00:30.060 --> 01:00:34.740
It makes those interactive plots out of the gate.


01:00:34.740 --> 01:00:37.260
And then it does have some unique plots.


01:00:37.260 --> 01:00:43.140
So some of the custom tree map plots, scatter matrix,


01:00:43.140 --> 01:00:49.420
you can do some plotting on maps to show geographic plots.


01:00:49.420 --> 01:00:53.860
Those are all out of the box, work pretty well,


01:00:53.860 --> 01:00:58.460
and are fairly simple to create.


01:00:58.460 --> 01:01:01.100
>>Yeah, the tree map and the sunburst,


01:01:01.100 --> 01:01:02.620
those come from Plotly, right?


01:01:02.620 --> 01:01:03.120
>>Yes.


01:01:03.120 --> 01:01:06.700
>>Or at least are in Plotly is one of the options.


01:01:06.700 --> 01:01:08.620
>>And one of the other things that


01:01:08.620 --> 01:01:14.100
is interesting about Plotly, like any of these visualization


01:01:14.100 --> 01:01:20.460
tools, you have to be able to go in and configure and customize


01:01:20.460 --> 01:01:21.860
and tweak things.


01:01:21.860 --> 01:01:25.540
And Plotly gives you that ability to generate a plot,


01:01:25.540 --> 01:01:27.980
but then you can update it over time.


01:01:27.980 --> 01:01:29.540
So you can change colors.


01:01:29.540 --> 01:01:32.100
You can change the way data is presented.


01:01:32.100 --> 01:01:34.740
You can change pretty much anything


01:01:34.740 --> 01:01:39.700
with the plot using a fairly simple API as well.


01:01:39.700 --> 01:01:41.300
>>Yeah.


01:01:41.300 --> 01:01:45.060
People should definitely go and check out the tree maps example.


01:01:45.060 --> 01:01:59.780
One of the really cool interactions is, for example, the one that I'm looking at here, it has, here's the world, and then here's the different continents, so like Asia, Africa, the Americas, then if you want to, you know, within each one of those, they've got a little


01:02:00.220 --> 01:02:05.220
blocks that says, well, here's how large of an impact,


01:02:05.220 --> 01:02:09.140
like for example, Nigeria and Egypt are,


01:02:09.140 --> 01:02:10.940
you know, have more people in it,


01:02:10.940 --> 01:02:13.220
I guess, than the other countries.


01:02:13.220 --> 01:02:18.180
And then they're colored by what their actual values are.


01:02:18.180 --> 01:02:20.060
But if you wanna just focus on say Africa,


01:02:20.060 --> 01:02:22.340
you can just click on that section of this thing


01:02:22.340 --> 01:02:26.540
and it just zooms in to show you just that information.


01:02:26.540 --> 01:02:29.380
And this, you're not gonna get this with Matplotlib.


01:02:29.380 --> 01:02:31.540
No, no, no, you're not.


01:02:31.540 --> 01:02:32.040
And it's--


01:02:32.040 --> 01:02:34.420
>> This ability to just dive in and out of the data.


01:02:34.420 --> 01:02:35.380
>> Yeah, absolutely.


01:02:35.380 --> 01:02:38.780
And it is very simple.


01:02:38.780 --> 01:02:40.900
I use Plotly quite a bit, especially


01:02:40.900 --> 01:02:43.180
when I want to explore the data.


01:02:43.180 --> 01:02:46.620
So you want to have a scatterplot or this tree map


01:02:46.620 --> 01:02:48.500
or any of the other visualizations.


01:02:48.500 --> 01:02:56.460
And you can easily filter or zoom in, zoom out.


01:02:56.460 --> 01:03:00.920
And yeah, so you're showing some of the other cool kind of unique


01:03:00.920 --> 01:03:04.800
visualizations that are out there to plot lead that maybe aren't as


01:03:04.800 --> 01:03:06.320
available in some of the other libraries.


01:03:06.320 --> 01:03:11.640
Yeah, yeah, the sunburst has a real similar the sunburst is like a pie


01:03:11.640 --> 01:03:16.020
chart. But as you interact with it, it like zooms into those sections.


01:03:16.020 --> 01:03:17.920
Yes, pretty, pretty amazing ways.


01:03:17.920 --> 01:03:20.940
Yeah, well, that is pretty cool. I haven't actually seen that one.


01:03:22.520 --> 01:03:26.920
It's just like, it just says, I want to explore this data.


01:03:26.920 --> 01:03:29.360
Not only can I, but I'm going to.


01:03:29.360 --> 01:03:31.920
>> Yes, exactly.


01:03:31.920 --> 01:03:33.360
>> Yeah, cool.


01:03:33.360 --> 01:03:38.680
Does Plotly have this idea of a back end server, like Altair?


01:03:38.680 --> 01:03:43.240
>> Plotly, out of the box, no.


01:03:43.240 --> 01:03:48.320
It's more, I guess, I have to think behind the scenes,


01:03:48.320 --> 01:03:49.640
the actual architecture.


01:03:49.640 --> 01:03:50.640
I don't know.


01:03:50.640 --> 01:03:53.960
But I do know that you don't have to necessarily worry


01:03:53.960 --> 01:03:57.080
about your data as much and suddenly having


01:03:57.080 --> 01:04:00.680
a huge file that shows up in your notebook


01:04:00.680 --> 01:04:04.080
that you have to deal with like you do with Altair.


01:04:04.080 --> 01:04:05.760
>> Right.


01:04:05.760 --> 01:04:06.600
Yeah, amazing.


01:04:06.600 --> 01:04:09.760
OK, so this is good looking stuff.


01:04:09.760 --> 01:04:14.200
And really top marks on the animation and interactivity


01:04:14.200 --> 01:04:15.880
sort of diving into the data, right?


01:04:15.880 --> 01:04:16.480
>> Yes.


01:04:16.480 --> 01:04:17.560
Yep.


01:04:17.560 --> 01:04:17.880
>> Cool.


01:04:17.880 --> 01:04:21.480
All right, so that's the building block libraries


01:04:21.480 --> 01:04:22.780
for the different options.


01:04:22.780 --> 01:04:26.640
I know there's many other plotting libraries


01:04:26.640 --> 01:04:28.840
and we saw in our original graph


01:04:28.840 --> 01:04:30.600
that there's a bunch here that we didn't touch on,


01:04:30.600 --> 01:04:32.760
but these are the ones that you felt


01:04:32.760 --> 01:04:35.000
are most important right now, yeah?


01:04:35.000 --> 01:04:37.480
- Yeah, yeah, and it's interesting.


01:04:37.480 --> 01:04:40.800
I struggled a little bit with where to draw the line,


01:04:40.800 --> 01:04:42.160
what else, some of the other things


01:04:42.160 --> 01:04:43.800
I might wanna bring in.


01:04:43.800 --> 01:04:46.480
After I posted about the course,


01:04:46.480 --> 01:04:54.840
I did get some feedback, you know, how come we didn't talk about Bokeh and Panel and HoloVis?


01:04:54.840 --> 01:05:00.680
And you know, I think the short and sweet answer was I had to draw the line somewhere.


01:05:00.680 --> 01:05:04.240
I didn't have as much experience with those libraries.


01:05:04.240 --> 01:05:06.260
So I didn't dive into them.


01:05:06.260 --> 01:05:13.740
They are also libraries that are kind of undergoing some, they've undergone changes in the past


01:05:13.740 --> 01:05:16.980
and they are working to clean up their documentation,


01:05:16.980 --> 01:05:19.540
get the examples cleaned up.


01:05:19.540 --> 01:05:23.900
So I think it's certainly worth considering those as well.


01:05:23.900 --> 01:05:25.580
The other one that I would point out


01:05:25.580 --> 01:05:29.580
that is really interesting to me, but I haven't used it,


01:05:29.580 --> 01:05:32.100
but I think a lot of your listeners


01:05:32.100 --> 01:05:34.620
might be interested in is a library called


01:05:34.620 --> 01:05:38.060
Plot9 that is meant for people that have used


01:05:38.060 --> 01:05:41.060
ggplot from an R perspective.


01:05:41.060 --> 01:05:45.500
And it's essentially like a direct port of that to Python.


01:05:45.500 --> 01:05:49.980
So if you really like ggplot and miss it from R,


01:05:49.980 --> 01:05:53.940
then you can use plot 9 to replicate that in Python.


01:05:53.940 --> 01:05:57.700
And it uses matplotlib behind the scenes.


01:05:57.700 --> 01:06:04.100
And it looks fascinating to me, especially for people


01:06:04.100 --> 01:06:06.820
that come from that R background.


01:06:06.820 --> 01:06:07.420
>>Sure.


01:06:07.420 --> 01:06:10.580
Yeah, well, that's something we haven't even touched on,


01:06:10.580 --> 01:06:13.780
is like the influence of R and like the parallels there.


01:06:13.780 --> 01:06:15.060
And then--


01:06:15.060 --> 01:06:16.220
- Yes.


01:06:16.220 --> 01:06:17.740
- Yeah.


01:06:17.740 --> 01:06:18.780
We probably went too much.


01:06:18.780 --> 01:06:20.500
So we've got two more things to cover


01:06:20.500 --> 01:06:25.100
and these are, where do I maybe run my code?


01:06:25.100 --> 01:06:26.780
If I wanna put it online and make it interactive


01:06:26.780 --> 01:06:29.140
and let other people interact with it, right?


01:06:29.140 --> 01:06:33.460
So two of them, Streamlit and Plotly-.


01:06:33.460 --> 01:06:34.580
Tell us about these.


01:06:34.580 --> 01:06:35.420
- Yes.


01:06:35.420 --> 01:06:38.860
So, everything we've talked about now there,


01:06:38.860 --> 01:06:40.460
especially with Plotly and Altair,


01:06:40.460 --> 01:06:43.100
There is some degree of interactivity.


01:06:43.100 --> 01:06:47.340
But when you want to build a dashboard


01:06:47.340 --> 01:06:52.060
or want to build more of like an application


01:06:52.060 --> 01:06:54.280
where you can select and filter data,


01:06:54.280 --> 01:06:56.440
maybe have different visualizations,


01:06:56.440 --> 01:07:01.440
maybe have complex visualizations like maps,


01:07:01.440 --> 01:07:05.420
you need something more than just the out of the box


01:07:05.420 --> 01:07:07.580
Altair or Plotly.


01:07:07.580 --> 01:07:10.940
And Streamlit is a very simple way


01:07:10.940 --> 01:07:14.300
to wrap a little bit of extra Python code


01:07:14.300 --> 01:07:15.820
around your visualization


01:07:15.820 --> 01:07:19.780
and you get this interactive application for free.


01:07:19.780 --> 01:07:22.820
And so like the demo you're showing right now


01:07:22.820 --> 01:07:24.980
is a great, you know, really powerful example


01:07:24.980 --> 01:07:29.980
that shows Uber ride sharing in New York City.


01:07:29.980 --> 01:07:32.260
It has sliders for you to choose


01:07:32.260 --> 01:07:33.780
what time the pickup happens


01:07:33.780 --> 01:07:38.540
And then it has these real-time visualizations


01:07:38.540 --> 01:07:40.460
for different parts of the city about how


01:07:40.460 --> 01:07:42.140
many pickups are happening.


01:07:42.140 --> 01:07:45.780
And what's so cool about Streamlit


01:07:45.780 --> 01:07:49.860
is there is very little additional Python code


01:07:49.860 --> 01:07:51.700
you need to do that.


01:07:51.700 --> 01:07:56.700
So the workflow that I will typically do


01:07:56.700 --> 01:08:01.140
is I'll do my visualizations in Seaborn or Plotly or Altair.


01:08:01.140 --> 01:08:03.620
And then once I realize I need that next level,


01:08:03.620 --> 01:08:06.960
I can then just easily plop them into a separate file


01:08:06.960 --> 01:08:09.340
with a couple lines of Streamlit code,


01:08:09.340 --> 01:08:11.480
and boom, I've got an interactive application


01:08:11.480 --> 01:08:12.320
that I can run.


01:08:12.320 --> 01:08:17.900
- Yeah, it's a really interesting way of programming.


01:08:17.900 --> 01:08:21.300
You basically write a top to bottom procedural script


01:08:21.300 --> 01:08:23.400
that says, if I, in this case,


01:08:23.400 --> 01:08:26.620
what are we putting, we're putting the hour of a pickup,


01:08:26.620 --> 01:08:29.780
the hour of data you wanna slice and visualize.


01:08:29.780 --> 01:08:31.180
And you said, well, if I could write a function


01:08:31.180 --> 01:08:34.800
that would make a graph given the hour,


01:08:34.800 --> 01:08:38.380
then you just say, and make the web app.


01:08:38.380 --> 01:08:39.220
You know what I mean?


01:08:39.220 --> 01:08:41.420
And it gives you the interactive sliders


01:08:41.420 --> 01:08:43.020
for all the variables that go in.


01:08:43.020 --> 01:08:44.900
And then you just, as the slider changes,


01:08:44.900 --> 01:08:46.460
it just recalls your functions


01:08:46.460 --> 01:08:49.720
and you don't have to know anything about web programming


01:08:49.720 --> 01:08:54.720
or Ajax or front-end code and all of that just happens.


01:08:54.720 --> 01:08:56.660
It's pretty fantastic.


01:08:56.660 --> 01:08:59.420
Streamlit was recently acquired, I think,


01:08:59.420 --> 01:09:01.580
Not so recently, but within a year or two.


01:09:01.580 --> 01:09:03.260
- Yeah, they're required by Snowflake


01:09:03.260 --> 01:09:05.700
for a really large amount of money.


01:09:05.700 --> 01:09:07.940
I know a lot of people are kind of scratching their head


01:09:07.940 --> 01:09:11.020
at that valuation, not to knock on streamline.


01:09:11.020 --> 01:09:15.060
I mean, congrats to them, but it's a really interesting tool


01:09:15.060 --> 01:09:16.240
and it will be interesting to see


01:09:16.240 --> 01:09:18.860
what Snowflake does with them.


01:09:18.860 --> 01:09:22.700
But this tool right now is open source.


01:09:22.700 --> 01:09:26.980
And I do think it is a very powerful,


01:09:26.980 --> 01:09:30.700
easy way to get a real, you know,


01:09:30.700 --> 01:09:34.080
web native interactive app with very little code.


01:09:34.080 --> 01:09:37.820
- Yeah, absolutely.


01:09:37.820 --> 01:09:40.700
Let's see, Demetrius out there has a question says,


01:09:40.700 --> 01:09:44.100
there are all these ways to make graphs quickly,


01:09:44.100 --> 01:09:46.820
but I can't find anywhere on how,


01:09:46.820 --> 01:09:49.700
any information on how to make an interactive calendar


01:09:49.700 --> 01:09:50.960
with events quickly.


01:09:50.960 --> 01:09:54.660
- Yeah, that's a good question.


01:09:54.660 --> 01:09:56.100
I don't know.


01:09:56.100 --> 01:10:01.380
Yeah I don't know of any any of these plots that have like a calendar function.


01:10:01.380 --> 01:10:03.420
You know possibly streamlet.


01:10:03.420 --> 01:10:06.620
It might maybe so.


01:10:06.620 --> 01:10:13.940
So it's interesting you bring up streamlet because streamlet does have like third party apps or plugins that you can


01:10:13.940 --> 01:10:20.940
incorporate so that the individual post that I definitely encourage them to take a look at streamlet and see if there's


01:10:20.940 --> 01:10:21.700
something out there.


01:10:23.140 --> 01:10:27.620
- Sure, so I interviewed, I believe it was Adrian,


01:10:27.620 --> 01:10:31.180
double check, yeah, Adrian Truell,


01:10:31.180 --> 01:10:35.680
back early days, early days of Streamlit.


01:10:35.680 --> 01:10:37.080
We're talking two years ago.


01:10:37.080 --> 01:10:39.640
- Four years ago. - I was inquired about that.


01:10:39.640 --> 01:10:41.760
So people can check that out.


01:10:41.760 --> 01:10:43.000
And I'm somewhat familiar with that.


01:10:43.000 --> 01:10:45.480
With the other one though, that's very fascinating


01:10:45.480 --> 01:10:48.080
that I don't know about is Dash.


01:10:48.080 --> 01:10:49.480
How's that compared to Streamlit?


01:10:49.480 --> 01:10:52.400
What's the, this comes from the Plotly company as well.


01:10:52.400 --> 01:10:56.640
Yes. So Plotly, like we mentioned, is a company.


01:10:56.640 --> 01:11:01.640
They have Dash, which is a much more sophisticated


01:11:01.640 --> 01:11:07.080
and in-depth platform for developing


01:11:07.080 --> 01:11:09.940
interactive applications or dashboards.


01:11:09.940 --> 01:11:14.880
So whereas Streamlit is a little bit of code,


01:11:14.880 --> 01:11:19.880
Dash is much more of you kind of are embracing


01:11:20.220 --> 01:11:27.620
HTML and CSS and you're doing callbacks and you have just a ton of flexibility in how you


01:11:27.620 --> 01:11:32.460
Structure your application and like this demo you're having here


01:11:32.460 --> 01:11:38.940
you've got wind speed histograms and you've got a line chart that's fully interactive and


01:11:38.940 --> 01:11:44.420
Interactivity between the charts as you choose one it influences another


01:11:44.420 --> 01:11:47.180
you can


01:11:47.180 --> 01:11:49.180
- gives you


01:11:49.500 --> 01:11:53.900
to kind of manage the back end as well.


01:11:53.900 --> 01:11:57.540
So you can run it, I think it's a Flask server,


01:11:57.540 --> 01:11:59.740
like on your system, you could do that.


01:11:59.740 --> 01:12:04.020
But if you wanted to do an enterprise grade deployment,


01:12:04.020 --> 01:12:05.900
you could do that as well.


01:12:05.900 --> 01:12:09.500
It's really, if you could think of it,


01:12:09.500 --> 01:12:11.660
Dash will probably let you do it.


01:12:11.660 --> 01:12:13.180
And if you're a big enough company


01:12:13.180 --> 01:12:14.460
and it's mission critical,


01:12:14.460 --> 01:12:17.860
Dash does have that enterprise support


01:12:17.860 --> 01:12:20.420
where you can pay a company to host it


01:12:20.420 --> 01:12:21.820
and support it for you.


01:12:21.820 --> 01:12:26.460
- You built a few, people should go look at the gallery


01:12:26.460 --> 01:12:27.940
for the Plotly Dash.


01:12:27.940 --> 01:12:29.300
There's a bunch of interesting things.


01:12:29.300 --> 01:12:31.420
And one of the areas that stands out,


01:12:31.420 --> 01:12:36.020
I mean, you've got many, many different types


01:12:36.020 --> 01:12:37.460
of visualizations and whatnot,


01:12:37.460 --> 01:12:38.780
but one of the things that stands out for me


01:12:38.780 --> 01:12:42.500
is the streaming, the streaming data aspect,


01:12:42.500 --> 01:12:45.040
you know, create a dashboard where you hook it up


01:12:45.040 --> 01:12:50.040
to stock market data or IoT data, and it just goes, right?


01:12:50.040 --> 01:12:51.920
- Right, exactly.


01:12:51.920 --> 01:12:56.920
Yeah, it's designed to support a lot of data


01:12:56.920 --> 01:13:01.040
and low latency and all those kinds of things.


01:13:01.040 --> 01:13:03.960
So it's really powerful,


01:13:03.960 --> 01:13:08.920
but this is one of those areas we talked about.


01:13:08.920 --> 01:13:10.200
Everything up until now,


01:13:10.200 --> 01:13:13.320
you don't really have to know a whole lot of Python.


01:13:13.320 --> 01:13:16.200
Once you start getting into building Dash,


01:13:16.200 --> 01:13:18.140
it gets a little more complicated.


01:13:18.140 --> 01:13:21.480
And I think that's where you wanna make sure


01:13:21.480 --> 01:13:24.720
you've got a good solid Python foundation


01:13:24.720 --> 01:13:29.720
before you go and build a Dash dashboard to run your company.


01:13:29.720 --> 01:13:34.400
- Yeah, but it's very powerful.


01:13:34.400 --> 01:13:35.240
- Very powerful.


01:13:35.240 --> 01:13:37.600
- Yeah, the interactivity between the different elements


01:13:37.600 --> 01:13:39.000
is also quite interesting.


01:13:39.000 --> 01:13:40.040
- It is, yes.


01:13:40.040 --> 01:13:42.620
And that's one of the, I mean, you can do that


01:13:42.620 --> 01:13:45.100
to some degree with Streamlit,


01:13:45.100 --> 01:13:47.940
but Dash just makes, yeah,


01:13:47.940 --> 01:13:50.140
you can have a ton of interactivity


01:13:50.140 --> 01:13:52.260
between the different widgets


01:13:52.260 --> 01:13:54.700
and the different visualizations.


01:13:54.700 --> 01:13:56.340
- Cool, well, it looks great.


01:13:56.340 --> 01:13:58.300
If I had a dashboard that looked like this,


01:13:58.300 --> 01:13:59.620
I'd be proud of it.


01:13:59.620 --> 01:14:01.140
It's not one of those things that's just like,


01:14:01.140 --> 01:14:03.300
oh, I guess it works, you know?


01:14:03.300 --> 01:14:04.580
No, it looks great.


01:14:04.580 --> 01:14:06.180
- Yeah, I would be too.


01:14:06.180 --> 01:14:07.700
- Yeah, cool.


01:14:07.700 --> 01:14:10.960
All right, Chris, we've spent a lot of time on this.


01:14:10.960 --> 01:14:13.160
I think we should probably button it up, but--


01:14:13.160 --> 01:14:14.440
- Yeah, bring it home.


01:14:14.440 --> 01:14:15.520
- A lot of great stuff.


01:14:15.520 --> 01:14:19.960
Yeah, a lot of great stuff in the visualization space.


01:14:19.960 --> 01:14:21.320
I think that's one of the really


01:14:21.320 --> 01:14:24.280
very powerful aspects of Python is


01:14:24.280 --> 01:14:25.700
it's just all of these tools.


01:14:25.700 --> 01:14:28.900
It's not the language, it's not the standard library,


01:14:28.900 --> 01:14:30.480
which all those, they are important.


01:14:30.480 --> 01:14:32.320
Like it's, people need to think


01:14:32.320 --> 01:14:34.480
this is sort of what people are talking about


01:14:34.480 --> 01:14:37.640
when they say Python's awesome, it's great to use.


01:14:37.640 --> 01:14:38.880
It's not how it does a for loop.


01:14:38.880 --> 01:14:42.560
It's that I can say, you know, dot Andrews curve.


01:14:42.560 --> 01:14:43.720
- Yes, yeah.


01:14:43.720 --> 01:14:45.360
And it all builds, right?


01:14:45.360 --> 01:14:48.320
So if you're, you know, just starting on Python,


01:14:48.320 --> 01:14:50.880
then you start to build a little pandas knowledge,


01:14:50.880 --> 01:14:52.100
you don't have to throw that away


01:14:52.100 --> 01:14:53.720
and then focus on visualization.


01:14:53.720 --> 01:14:56.660
It all builds on top of it and you can leverage


01:14:56.660 --> 01:14:58.640
all that knowledge and then all the other


01:14:58.640 --> 01:15:00.280
wonderful libraries that are out there.


01:15:00.280 --> 01:15:01.280
Absolutely. - Yep.


01:15:01.280 --> 01:15:03.600
All right, before you get out of here though,


01:15:03.600 --> 01:15:05.240
final two questions.


01:15:05.240 --> 01:15:06.760
If you're gonna write some Python code,


01:15:06.760 --> 01:15:09.760
what editor or editors to use?


01:15:09.760 --> 01:15:13.400
- I'm pretty much a 100% VS Code now.


01:15:13.400 --> 01:15:14.640
- Right on.


01:15:14.640 --> 01:15:16.060
Okay.


01:15:16.060 --> 01:15:17.820
Even over notebooks?


01:15:17.820 --> 01:15:19.400
- Yes, yes.


01:15:19.400 --> 01:15:21.720
Yeah, I've gotten to where I use


01:15:21.720 --> 01:15:25.040
the native VS Code notebooks.


01:15:25.040 --> 01:15:28.440
- Like the comment divider type of style?


01:15:28.440 --> 01:15:33.800
- It's just, they have continued to update it so much


01:15:33.800 --> 01:15:38.800
that it just seems like it's a superior approach


01:15:38.800 --> 01:15:42.840
for what I do and how I manage my environments right now.


01:15:42.840 --> 01:15:43.800
- Nice.


01:15:43.800 --> 01:15:47.320
And then notable PyPI package or as?


01:15:47.320 --> 01:15:49.880
- Yeah, I put two in here.


01:15:49.880 --> 01:15:52.320
I don't have a ton of experience with them,


01:15:52.320 --> 01:15:53.680
but I wanted to call them out


01:15:53.680 --> 01:15:55.680
because I do wanna spend some time with it.


01:15:55.680 --> 01:15:58.040
So the first one is Splink.


01:15:58.040 --> 01:16:01.640
And I wrote an article a couple of years back


01:16:01.640 --> 01:16:04.920
about doing data linkage or data duplication.


01:16:04.920 --> 01:16:08.280
And so for those of you that aren't familiar,


01:16:08.280 --> 01:16:10.020
it could be a situation where let's say


01:16:10.020 --> 01:16:11.560
you have your customer database


01:16:11.560 --> 01:16:15.320
and it's got Chris Moffitt lives at 123 Main Street


01:16:15.320 --> 01:16:17.640
and you have a third party data set


01:16:17.640 --> 01:16:22.640
and it says Mr. Moffitt lives at 125 Main Street


01:16:22.640 --> 01:16:26.120
and street is spelled as street.


01:16:26.120 --> 01:16:28.800
How do you merge all that data together?


01:16:28.800 --> 01:16:30.800
How do you do fuzzy matching?


01:16:30.800 --> 01:16:34.320
And I played around with different options.


01:16:34.320 --> 01:16:38.640
And this Splink is one that's actually


01:16:38.640 --> 01:16:41.920
came out of the UK from an individual


01:16:41.920 --> 01:16:43.480
that works at the Ministry of Justice,


01:16:43.480 --> 01:16:45.860
which I think is just a cool name.


01:16:45.860 --> 01:16:50.080
And he talks about using this to merge


01:16:50.080 --> 01:16:51.580
millions of records together.


01:16:51.580 --> 01:16:55.520
And I think it's a kind of really interesting tool


01:16:55.520 --> 01:16:58.280
that is something that you can't really do in Excel.


01:16:58.280 --> 01:16:59.920
And it's a challenging problem.


01:16:59.920 --> 01:17:02.980
And anytime someone's spent some time on that kind of problem,


01:17:02.980 --> 01:17:04.320
I think it's really interesting.


01:17:04.320 --> 01:17:06.520
And I want to spend some more time looking at that.


01:17:06.520 --> 01:17:07.040
Yeah.


01:17:07.040 --> 01:17:08.520
And they have on their GitHub repo,


01:17:08.520 --> 01:17:10.320
they got a couple of videos introducing it,


01:17:10.320 --> 01:17:11.080
which is great.


01:17:11.080 --> 01:17:11.680
Yes.


01:17:11.680 --> 01:17:14.200
And the other one?


01:17:14.200 --> 01:17:15.480
Red Frames.


01:17:15.480 --> 01:17:19.280
So this is another one that I've seen come across my Twitter


01:17:19.280 --> 01:17:20.880
feed a couple of times.


01:17:20.880 --> 01:17:25.440
I have not used it directly, but it's


01:17:25.440 --> 01:17:34.240
another library for manipulating data that's interoperable with pandas, but gives a little


01:17:34.240 --> 01:17:39.280
bit more of that fluent API where you can kind of string all these commands together


01:17:39.280 --> 01:17:46.140
to modify your data in ways that pandas supports a lot of this, but there are certainly some


01:17:46.140 --> 01:17:49.140
things in pandas that are a little bit clunky.


01:17:49.140 --> 01:17:54.980
And this looks like it's an attempt to try and bring some of that R goodness to Python.


01:17:54.980 --> 01:17:55.980
>> Yeah.


01:17:55.980 --> 01:17:59.300
It also looks a little bit like bringing SQL to it.


01:17:59.300 --> 01:18:00.300
>> Yes.


01:18:00.300 --> 01:18:01.300
Yeah.


01:18:01.300 --> 01:18:02.300
Yeah.


01:18:02.300 --> 01:18:03.300
>> Select a filter, a group, a sort.


01:18:03.300 --> 01:18:08.860
You know, change the names a little bit and filter the way or sort, order by.


01:18:08.860 --> 01:18:11.060
You know, it looks a little bit like SQL.


01:18:11.060 --> 01:18:12.940
>> It just looks really interesting.


01:18:12.940 --> 01:18:16.340
And like I said, I wanted to get some visibility to it.


01:18:16.340 --> 01:18:18.040
I haven't used it extensively,


01:18:18.040 --> 01:18:19.980
but certainly wanna play around with it a little bit more


01:18:19.980 --> 01:18:23.020
and thought your listeners might be interested.


01:18:23.020 --> 01:18:24.140
- Yeah, it looks very cool.


01:18:24.140 --> 01:18:25.420
Thanks for sharing that.


01:18:25.420 --> 01:18:28.260
All right, people are interested


01:18:28.260 --> 01:18:29.980
in Python data visualization.


01:18:29.980 --> 01:18:31.220
They wanna know more.


01:18:31.220 --> 01:18:32.820
What do you tell them?


01:18:32.820 --> 01:18:34.340
- Hey, check out the course.


01:18:34.340 --> 01:18:36.780
So really excited about the course.


01:18:36.780 --> 01:18:39.540
You know, if you've liked what you've listened to here,


01:18:39.540 --> 01:18:44.540
the course on Talk Python Training has the examples,


01:18:45.220 --> 01:18:48.740
the notebooks for you to go through and learn and play with this on your own.


01:18:48.740 --> 01:18:52.020
And by the end of it, you should be at the point where you can start to apply it


01:18:52.020 --> 01:18:54.460
to your own data. So I encourage you to check it out.


01:18:54.460 --> 01:18:57.100
And if you do check it out, let me know. It'd be interesting to see what you think.


01:18:57.100 --> 01:19:00.780
Yeah, it definitely covers all of this in hands-on detail,


01:19:00.780 --> 01:19:04.300
not just conceptually. So yeah.


01:19:04.300 --> 01:19:08.620
Thanks for being here, Chris. Thanks for sharing your experience. And yeah,


01:19:08.620 --> 01:19:09.700
happy to have you back on the show.


01:19:09.700 --> 01:19:11.460
Thank you. Great discussion.


01:19:11.460 --> 01:19:12.940
Yeah, you bet. Bye bye.


01:19:12.940 --> 01:19:13.440
Bye.


01:19:13.440 --> 01:19:23.440
[BLANK_AUDIO]

