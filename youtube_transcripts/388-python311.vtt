WEBVTT

00:00:00.000 --> 00:00:06.000
Hey, everyone. Welcome to Talk Python to Me. It's great to have you all here.


00:00:06.000 --> 00:00:15.880
Rit, Brant, Pablo, and Mark, it's going to be super fun to speak with all of you about


00:00:15.880 --> 00:00:22.880
Python 3.11. So, before we get into it, I guess, just real quickly, I know some of you


00:00:22.880 --> 00:00:26.800
have been on the show before, but not all of you. So, let's just do a quick introduction


00:00:26.800 --> 00:00:30.560
about who you are and how you ended up here on the show.


00:00:30.560 --> 00:00:32.260
Yarit, do you want to start first?


00:00:32.260 --> 00:00:37.040
- Yeah, hi, I'm Yarit Kachriel.


00:00:37.040 --> 00:00:38.600
I'm a Python core dev.


00:00:38.600 --> 00:00:42.000
And earlier in the week,


00:00:42.000 --> 00:00:45.960
we streamed the release of Python 3.11.


00:00:45.960 --> 00:00:47.520
And on the back of that,


00:00:47.520 --> 00:00:49.840
Michael just invited us all here for chat.


00:00:49.840 --> 00:00:52.000
- Fantastic, yeah.


00:00:52.000 --> 00:00:53.120
That was a great live stream,


00:00:53.120 --> 00:00:55.160
and we'll talk about that for sure in a second.


00:00:55.160 --> 00:00:56.900
But, Brent, welcome back.


00:00:56.900 --> 00:01:00.160
- Hello, my name is Brent Bucher.


00:01:00.160 --> 00:01:03.040
I have been a core dev for like two years now


00:01:03.040 --> 00:01:04.680
and I work with Mark and Yurit


00:01:04.680 --> 00:01:06.720
on the Faster CPython team at Microsoft.


00:01:06.720 --> 00:01:08.440
- Right on.


00:01:08.440 --> 00:01:10.280
- And I was on the show like a month ago.


00:01:10.280 --> 00:01:13.120
- Yeah, you were talking about the Faster Python stuff,


00:01:13.120 --> 00:01:14.480
which we'll touch on again.


00:01:14.480 --> 00:01:18.160
- Hello, I'm Pablo Galindo.


00:01:18.160 --> 00:01:20.940
I'm the infamous release manager.


00:01:20.940 --> 00:01:22.480
I release Python 3.11


00:01:22.480 --> 00:01:27.160
and you can redirect all your complaints to my email address.


00:01:27.160 --> 00:01:28.640
No, please don't do that.


00:01:28.640 --> 00:01:30.840
So I'm a CPython core dev.


00:01:30.840 --> 00:01:34.280
I'm also serving this year and last year


00:01:34.280 --> 00:01:37.280
on the Python steering council.


00:01:37.280 --> 00:01:42.400
And I also released my effort Python 3.10 and 3.11,


00:01:42.400 --> 00:01:44.160
which is now the best version of Python.


00:01:44.160 --> 00:01:45.880
Download it today.


00:01:45.880 --> 00:01:47.880
Apart from that, I do a bunch of parser stuff.


00:01:47.880 --> 00:01:51.200
But now we are not talking about that here.


00:01:51.200 --> 00:01:52.040
- Yeah, fantastic.


00:01:52.040 --> 00:01:53.120
Well, welcome.


00:01:53.120 --> 00:01:54.760
Mark, welcome back.


00:01:54.760 --> 00:01:55.580
- Hi there.


00:01:55.580 --> 00:01:56.420
I'm Mark Chan.


00:01:56.420 --> 00:01:58.800
I'm the tech lead of the Faster CPython team.


00:01:58.800 --> 00:02:00.200
I work with Eric and Brandt,


00:02:00.200 --> 00:02:02.620
and I've been a core dev for some number of years,


00:02:02.620 --> 00:02:03.600
I don't recall.


00:02:03.600 --> 00:02:05.460
- Yeah.


00:02:05.460 --> 00:02:07.240
You've been spending a couple of years working


00:02:07.240 --> 00:02:09.740
on this Faster CPython thing,


00:02:09.740 --> 00:02:13.260
and very excited to see some of the fruits of those labors,


00:02:13.260 --> 00:02:18.600
starting to show up and get in the hands of everyone


00:02:18.600 --> 00:02:19.520
with this release.


00:02:19.520 --> 00:02:24.880
Yeah, it's good to have the stuff out actually in public and in people's hands.


00:02:24.880 --> 00:02:28.520
It's really rewarding to know that stuff you're working on is actually used and used by a


00:02:28.520 --> 00:02:29.520
lot of people.


00:02:29.520 --> 00:02:32.880
Yeah, that's, that is totally true.


00:02:32.880 --> 00:02:34.840
It's it's one thing to build software.


00:02:34.840 --> 00:02:36.840
I mean, just by itself, but it's fun.


00:02:36.840 --> 00:02:46.280
But all of you, all of you are working on code that touches so many people.


00:02:46.280 --> 00:02:48.120
Think about there's layers, right?


00:02:48.120 --> 00:02:51.160
The second layer is how many people use Python?


00:02:51.160 --> 00:02:52.740
Many, millions, millions.


00:02:52.740 --> 00:02:56.900
Does anyone know a reasonable estimate of this number?


00:02:56.900 --> 00:03:01.000
- I think some, I don't remember who came with the number,


00:03:01.000 --> 00:03:02.940
but I think they were estimating like six million


00:03:02.940 --> 00:03:05.560
Python developers, something like that.


00:03:05.560 --> 00:03:09.720
I mean probably it's between zero and a million, let's say.


00:03:09.720 --> 00:03:11.420
- Yeah.


00:03:11.420 --> 00:03:14.540
So that's a massive impact,


00:03:14.540 --> 00:03:18.780
and also maybe nervousness about pushing code out


00:03:18.780 --> 00:03:19.620
to that group.


00:03:19.620 --> 00:03:22.580
But then, those people build software for others, right?


00:03:22.580 --> 00:03:25.740
If you're using Instagram or using YouTube


00:03:25.740 --> 00:03:26.900
or other things, right?


00:03:26.900 --> 00:03:30.620
It's also having massive knock-on effects there.


00:03:30.620 --> 00:03:33.700
So thanks for putting all this together.


00:03:33.700 --> 00:03:37.820
Thanks for improving the tools that we all get to use.


00:03:37.820 --> 00:03:39.460
So yeah, big news.


00:03:39.460 --> 00:03:43.860
The big news is that Python 3.11 is out


00:03:43.860 --> 00:03:48.860
And as Iritz had said, you all live streamed that release.


00:03:48.860 --> 00:03:52.400
So here we're all together,


00:03:52.400 --> 00:03:54.680
we're having an awesome chat about the features


00:03:54.680 --> 00:03:57.520
and what people can do to take advantage of it


00:03:57.520 --> 00:03:59.160
and why they might care about new features


00:03:59.160 --> 00:04:00.360
and wanna learn them.


00:04:00.360 --> 00:04:02.800
But there you did a little bit of that,


00:04:02.800 --> 00:04:06.640
but also Pablo, you actually step-by-step


00:04:06.640 --> 00:04:10.920
did the release of CPython mostly live, right?


00:04:10.920 --> 00:04:12.120
- Yeah, I did.


00:04:12.120 --> 00:04:14.120
It was, except the boring part.


00:04:14.120 --> 00:04:15.380
(laughs)


00:04:15.380 --> 00:04:18.600
This is something that I started last year


00:04:18.600 --> 00:04:22.100
because apparently I didn't have enough things to worry,


00:04:22.100 --> 00:04:24.600
and I decided to make my life even more difficult.


00:04:24.600 --> 00:04:26.840
I'm an expert on that.


00:04:26.840 --> 00:04:27.680
Quite proficient.


00:04:27.680 --> 00:04:28.580
- I'm also an expert.


00:04:28.580 --> 00:04:31.240
I'm very bad at doing too many things.


00:04:31.240 --> 00:04:32.400
- You could be a release manager.


00:04:32.400 --> 00:04:33.600
It's the only requirement.


00:04:33.600 --> 00:04:35.840
(laughs)


00:04:35.840 --> 00:04:39.720
So yeah, the idea is that the kind of releasing Python


00:04:39.720 --> 00:04:42.280
It's a process that is quite complicated.


00:04:42.280 --> 00:04:43.520
It's also quite boring.


00:04:43.520 --> 00:04:47.960
So it's not like you need to have a galaxy brain kind of thing


00:04:47.960 --> 00:04:48.640
to do it.


00:04:48.640 --> 00:04:51.060
But it's just a lot of steps, and it's very easy to do it


00:04:51.060 --> 00:04:51.560
wrong.


00:04:51.560 --> 00:04:53.360
And it's very unglamorous.


00:04:53.360 --> 00:04:56.320
So I said, oh, wow, I'm sure people really


00:04:56.320 --> 00:04:58.880
would like to see a very unglamorous process happen


00:04:58.880 --> 00:04:59.380
in life.


00:04:59.380 --> 00:05:01.160
And then I said, let's do it.


00:05:01.160 --> 00:05:03.960
And I asked around, and I was surprised about how many people


00:05:03.960 --> 00:05:05.440
enjoy unglamorous processes.


00:05:05.440 --> 00:05:09.920
And then I did the release of Python 3.10 beta 1,


00:05:09.920 --> 00:05:12.280
which turned out to be much funnier than I thought,


00:05:12.280 --> 00:05:13.840
because we just broke GitHub.


00:05:13.840 --> 00:05:15.520
That happened live.


00:05:15.520 --> 00:05:16.760
Yes.


00:05:16.760 --> 00:05:18.040
I also added that--


00:05:18.040 --> 00:05:21.880
Was that when you imported all the issues


00:05:21.880 --> 00:05:24.480
and did that migration, or was that separate?


00:05:24.480 --> 00:05:26.880
You will think that that is a good candidate, but no.


00:05:26.880 --> 00:05:28.580
That was not the thing that broke GitHub.


00:05:28.580 --> 00:05:31.680
We renamed master domain on the CPython repo,


00:05:31.680 --> 00:05:33.480
and the whole GitHub platform was down.


00:05:33.480 --> 00:05:35.520
What about that?


00:05:35.520 --> 00:05:36.600
Wow.


00:05:36.600 --> 00:05:40.000
Yeah, you can see those Ruby workers really struggling


00:05:40.000 --> 00:05:43.280
with the renaming and all those forks.


00:05:43.280 --> 00:05:44.800
I think we were the, I don't know,


00:05:44.800 --> 00:05:46.480
someone at GitHub may confirm this,


00:05:46.480 --> 00:05:48.280
but I think we were the first big project


00:05:48.280 --> 00:05:52.160
to do the renaming and something went wrong.


00:05:52.160 --> 00:05:54.760
And it was very funny because I literally said,


00:05:54.760 --> 00:05:57.960
"How funny will it be if now I get a 500?"


00:05:57.960 --> 00:06:00.600
There you go, a 500 on the screen.


00:06:00.600 --> 00:06:01.800
Yeah, yeah, it's recorded.


00:06:01.800 --> 00:06:03.800
Someone actually recorded that clip.


00:06:03.800 --> 00:06:04.800
[laughter]


00:06:04.800 --> 00:06:08.300
Yeah, so I said, "Wow, man, this has been such an exciting thing


00:06:08.300 --> 00:06:09.800
that I can break such a big project.


00:06:09.800 --> 00:06:10.800
Let's do it more."


00:06:10.800 --> 00:06:15.800
So I decided also to stream the 3.10 release itself.


00:06:15.800 --> 00:06:18.800
And I said, "Well, technically, the final release


00:06:18.800 --> 00:06:21.800
is even more boring and longer,


00:06:21.800 --> 00:06:25.800
so that is actually probably not going to be even something


00:06:25.800 --> 00:06:26.800
that someone wants to see."


00:06:26.800 --> 00:06:28.800
So I said, "Okay, let's not do it alone."


00:06:28.800 --> 00:06:31.800
So I invited a bunch of friends and core developers


00:06:31.800 --> 00:06:35.800
so they can actually talk about the things that they worked on


00:06:35.800 --> 00:06:39.800
the Python 3.10 release and brand I needed were there


00:06:39.800 --> 00:06:44.800
so that they can probably tell you how they found out.


00:06:44.800 --> 00:06:47.800
But apparently it was something that a lot of people enjoy


00:06:47.800 --> 00:06:51.800
because it's not only an opportunity to see how the sausage is made


00:06:51.800 --> 00:06:55.800
because I was just explaining all the commands and all the phases and whatnot.


00:06:55.800 --> 00:06:58.480
and whatnot, but when something became very boring,


00:06:58.480 --> 00:07:01.920
then Brand and I were there to save the day


00:07:01.920 --> 00:07:04.320
and explain the cool things they work on,


00:07:04.320 --> 00:07:07.320
which is a very good opportunity


00:07:07.320 --> 00:07:10.040
because when is the last time you could hear


00:07:10.040 --> 00:07:11.880
the author of the feature that you love


00:07:11.880 --> 00:07:13.200
talk about the feature that you love?


00:07:13.200 --> 00:07:14.920
That is fantastic, and it happened.


00:07:14.920 --> 00:07:21.320
- Not only did it happen, but as they were explaining


00:07:21.320 --> 00:07:24.000
the feature that they built,


00:07:24.000 --> 00:07:28.160
the action of it being delivered to the entire world was happening.


00:07:28.160 --> 00:07:30.880
It was all coming together in a pretty awesome way.


00:07:30.880 --> 00:07:31.380
Exactly.


00:07:31.380 --> 00:07:33.560
And I could only do-- just to be fair also,


00:07:33.560 --> 00:07:38.600
and where credit is due-- I could only do that because the first time I


00:07:38.600 --> 00:07:43.760
did the live thing, I was also pushing all the buttons


00:07:43.760 --> 00:07:49.920
and at the same time doing all the video stuff with-- I don't know what


00:07:49.920 --> 00:07:53.800
is the software to do the stream, but whatever.


00:07:53.800 --> 00:07:59.640
And the second time, we used the help of the Python Discord team,


00:07:59.640 --> 00:08:03.080
which are fantastic, and they help us a lot.


00:08:03.080 --> 00:08:06.780
They have this fantastic UI,


00:08:06.780 --> 00:08:09.280
where all the questions that were asked on the chat


00:08:09.280 --> 00:08:11.280
are shown on the screen, and we couldn't use it.


00:08:11.280 --> 00:08:12.480
Do you know why?


00:08:12.480 --> 00:08:17.060
Because Facebook, or now Meta, decided to break DNS globally.


00:08:17.060 --> 00:08:20.500
What an incredible feat, just in time.


00:08:20.500 --> 00:08:25.980
So what I'm learning is if we need some sort of big cloud global outage, you all just need


00:08:25.980 --> 00:08:26.980
to lie.


00:08:26.980 --> 00:08:27.980
Just call Pablo.


00:08:27.980 --> 00:08:28.980
Yes, exactly.


00:08:28.980 --> 00:08:32.180
Just hire me today.


00:08:32.180 --> 00:08:37.420
So yes, now we were like two big outages on Python release.


00:08:37.420 --> 00:08:45.380
You know, there is only a line that passes through two points, but it was a good statistic


00:08:45.380 --> 00:08:46.380
already.


00:08:46.380 --> 00:08:49.380
So we said, what else can we break?


00:08:49.380 --> 00:08:52.460
So there you go. We decided to do the 3.11 release again.


00:08:52.460 --> 00:08:54.460
And Mark was there as well,


00:08:54.460 --> 00:08:58.700
which increases the probability of things being broken by a lot.


00:08:58.700 --> 00:08:59.820
[LAUGHS]


00:08:59.820 --> 00:09:01.820
Sorry, Mark, I had to do the joke.


00:09:01.820 --> 00:09:05.700
And he also fixes them, so it's fine.


00:09:05.700 --> 00:09:08.500
And nothing broke, so kudos to Mark.


00:09:08.500 --> 00:09:12.180
Everything thanks to that. And we did the release.


00:09:12.180 --> 00:09:14.540
So we did the same thing. We explained the whole thing


00:09:14.540 --> 00:09:18.260
so people could see from the authors themselves,


00:09:18.260 --> 00:09:20.900
like why all the switches are very cool,


00:09:20.900 --> 00:09:23.340
and I did the non-boring parts of the release.


00:09:23.340 --> 00:09:27.460
Then we have a bit of some dramas in backstage


00:09:27.460 --> 00:09:30.620
because my JubyKey that I used to sign release broke,


00:09:30.620 --> 00:09:32.980
and I freak out quite a lot.


00:09:32.980 --> 00:09:35.940
But I thankfully have a backup JubyKey,


00:09:35.940 --> 00:09:39.340
so nobody had -- yeah, yeah, so crazy,


00:09:39.340 --> 00:09:40.540
because if I didn't have that,


00:09:40.540 --> 00:09:42.860
then I would have to stop the whole thing.


00:09:42.860 --> 00:09:45.860
But we didn't have to do that. It was just backstage.


00:09:45.860 --> 00:09:47.380
So, yeah, quite exciting.


00:09:47.380 --> 00:09:48.660
nothing broke except my UVK.


00:09:48.660 --> 00:09:49.900
I suppose that's the third thing that broke.


00:09:49.900 --> 00:09:52.180
It's not a global, you know, software,


00:09:52.180 --> 00:09:55.140
but I still mourn it is here.


00:09:55.140 --> 00:09:55.980
- Yeah.


00:09:55.980 --> 00:09:58.540
It served you well, but now it's,


00:09:58.540 --> 00:10:00.540
it gave its life for Python 3.11.


00:10:00.540 --> 00:10:01.380
- Too much power.


00:10:01.380 --> 00:10:03.020
Like 3.11 was too powerful.


00:10:03.020 --> 00:10:03.860
It just broke it.


00:10:03.860 --> 00:10:08.380
- This is a dangerous job that you got.


00:10:08.380 --> 00:10:10.020
- Yeah.


00:10:10.020 --> 00:10:11.080
- But you've handed it off, right?


00:10:11.080 --> 00:10:14.980
This is your last time, last main release.


00:10:14.980 --> 00:10:24.480
Yeah, I need to do the security and bug fix releases, but I don't need to do the ones that you need to chase people down and ask for cherry picking.


00:10:24.480 --> 00:10:27.480
There was a bunch of things of the release that were quite boring.


00:10:27.480 --> 00:10:34.480
Normally we release the previous version, before the final version there is something called the release candidate,


00:10:34.480 --> 00:10:38.980
which is the last version that people need to try out before we do the final release.


00:10:38.980 --> 00:10:42.980
And ideally that is the last version that we publish.


00:10:42.980 --> 00:10:45.960
Normally, it means that you publish from that commit.


00:10:45.960 --> 00:10:47.720
But this was not the case.


00:10:47.720 --> 00:10:49.040
This is the first release that had


00:10:49.040 --> 00:10:51.640
130 something commits on top of that,


00:10:51.640 --> 00:10:55.160
and then I had to painstakingly cherry-pick.


00:10:55.160 --> 00:10:58.320
It was not fun, but I did that before the release,


00:10:58.320 --> 00:11:01.480
it's like two hours because you need to fix conflict and things like that.


00:11:01.480 --> 00:11:03.260
Yeah, very boring.


00:11:03.260 --> 00:11:07.880
But yeah, I started the stream with that already done, so it was fine.


00:11:07.880 --> 00:11:12.340
>> Yeah, fantastic. Now, before we get into all the features,


00:11:12.340 --> 00:11:19.540
And I want to maybe just talk a little bit about some of the tools for actually doing the release.


00:11:19.540 --> 00:11:26.420
And maybe, Arit, to start with you, is what does 3.11 mean for you all?


00:11:26.420 --> 00:11:30.500
Getting this out, what does that mean for the Python community from your perspective?


00:11:30.500 --> 00:11:36.540
Well, 3.11 is a huge release.


00:11:36.540 --> 00:11:40.500
There's a lot packed into it compared to the last few releases.


00:11:40.500 --> 00:11:49.820
There are new features, there's the performance work, it's just massive changes internally,


00:11:49.820 --> 00:11:51.620
it's just a huge release.


00:11:51.620 --> 00:11:59.180
Personally, I started working on Exception Groups about two years ago, so for me, it


00:11:59.180 --> 00:12:02.100
almost feels like finishing another PhD or something.


00:12:02.100 --> 00:12:09.180
It's a massive effort, and here it is, it's done.


00:12:09.180 --> 00:12:10.300
- It was a big day Monday.


00:12:10.300 --> 00:12:13.500
I had a bottle of champagne ready for the stream.


00:12:13.500 --> 00:12:15.380
It was a celebration.


00:12:15.380 --> 00:12:16.280
- Yeah, it was.


00:12:16.280 --> 00:12:18.500
Brent, how about you?


00:12:18.500 --> 00:12:22.580
- I'm really excited about 3.11


00:12:22.580 --> 00:12:25.540
because I think there's something for everyone in there.


00:12:25.540 --> 00:12:27.660
I think you'd be hard pressed to find someone


00:12:27.660 --> 00:12:29.780
who doesn't want their code to run faster


00:12:29.780 --> 00:12:31.980
and who doesn't want better error messages.


00:12:31.980 --> 00:12:33.340
And then you have all these other improvements


00:12:33.340 --> 00:12:34.760
on top of that.


00:12:34.760 --> 00:12:38.540
It's really nice to see both these new features,


00:12:38.540 --> 00:12:40.860
which are something that we get in most Python releases,


00:12:40.860 --> 00:12:43.820
but also just the stuff that's there for everyone else


00:12:43.820 --> 00:12:45.260
who just wants to upgrade Python


00:12:45.260 --> 00:12:47.820
and just have a better experience all around.


00:12:47.820 --> 00:12:49.060
- Yeah.


00:12:49.060 --> 00:12:50.720
I totally agree with that.


00:12:50.720 --> 00:12:53.020
- It's cool to see people's responses to that too,


00:12:53.020 --> 00:12:55.220
because responses have been really, really positive,


00:12:55.220 --> 00:12:57.340
which is another thing that I liked about the live stream,


00:12:57.340 --> 00:13:00.460
'cause we did live Q&A and we had the chat


00:13:00.460 --> 00:13:01.620
and everything going on.


00:13:01.620 --> 00:13:06.020
When you're staring at the same code base for like a year,


00:13:06.020 --> 00:13:07.420
you're like, okay, I'm pretty sure


00:13:07.420 --> 00:13:09.840
that what we've done here is really, really cool,


00:13:09.840 --> 00:13:13.340
but is it actually as awesome as I think it is?


00:13:13.340 --> 00:13:15.060
Or have I just been staring at it for too long


00:13:15.060 --> 00:13:17.260
and then released it to the world


00:13:17.260 --> 00:13:19.260
and people are even more stoked about it than you are


00:13:19.260 --> 00:13:21.140
and that's a really good feeling.


00:13:21.140 --> 00:13:22.980
- Yeah, it is awesome.


00:13:22.980 --> 00:13:24.420
Mark?


00:13:24.420 --> 00:13:26.700
- Yeah, well, I guess I started on trying


00:13:26.700 --> 00:13:30.220
to get Python faster 15 years ago, I guess,


00:13:30.220 --> 00:13:32.460
early PhD time. - Yeah, with HotPy, right?


00:13:32.460 --> 00:13:34.060
- Yeah, yes, that was a long,


00:13:34.060 --> 00:13:35.740
this has been a long time coming.


00:13:35.740 --> 00:13:39.020
So yeah, it's amazing to have it actually out


00:13:39.020 --> 00:13:40.980
and starting to see the speed ups.


00:13:40.980 --> 00:13:42.820
And obviously we're keeping working on it.


00:13:42.820 --> 00:13:45.120
So it's pretty good.


00:13:45.120 --> 00:13:47.620
- Yeah, fantastic.


00:13:47.620 --> 00:13:49.860
You must be really proud because like you said,


00:13:49.860 --> 00:13:52.780
you have been proposing this for a really long time.


00:13:52.780 --> 00:13:55.980
You've had a lot of ideas and finally you've got


00:13:55.980 --> 00:13:58.200
a group of people working on it.


00:13:58.200 --> 00:13:59.220
And you're written brand,


00:13:59.220 --> 00:14:02.380
you're all on the same team with Mark Guido.


00:14:02.380 --> 00:14:03.220
- Yes. - Yeah.


00:14:04.780 --> 00:14:09.780
and just making legitimate, serious progress here.


00:14:09.780 --> 00:14:14.140
So you must be really proud to just sort of see this


00:14:14.140 --> 00:14:16.180
actually go out the door.


00:14:16.180 --> 00:14:17.180
- Yes, definitely.


00:14:17.180 --> 00:14:20.380
- For me-- - Especially in--


00:14:20.380 --> 00:14:22.780
- Go ahead, Brent. - The Python too.


00:14:22.780 --> 00:14:25.620
It's really nice that we're able to, you know,


00:14:25.620 --> 00:14:27.420
deliver this for everyone.


00:14:27.420 --> 00:14:28.260
- Yeah.


00:14:28.260 --> 00:14:33.620
For me, I see basically three things.


00:14:33.620 --> 00:14:36.740
like you said, Brent, I see that obviously there's


00:14:36.740 --> 00:14:39.900
these new features like exception groups, which are lovely


00:14:39.900 --> 00:14:42.180
and make the language better.


00:14:42.180 --> 00:14:47.140
But it also gets friendlier, especially for beginners,


00:14:47.140 --> 00:14:49.940
but for everyone, of course, with the better error messages


00:14:49.940 --> 00:14:53.500
and better reporting and tracebacks.


00:14:53.500 --> 00:14:54.580
And it gets faster.


00:14:54.580 --> 00:14:57.860
And so on all the axes that seem to matter,


00:14:57.860 --> 00:14:59.660
it's really fantastic.


00:15:02.300 --> 00:15:05.220
Okay, so let's dive in.


00:15:05.220 --> 00:15:08.820
I just, you know, Pablo, let's go back just a little bit


00:15:08.820 --> 00:15:11.180
to the release process,


00:15:11.180 --> 00:15:12.740
'cause people got to watch you do it,


00:15:12.740 --> 00:15:15.540
but they didn't actually, you know,


00:15:15.540 --> 00:15:17.820
see exactly what you're typing on your screen


00:15:17.820 --> 00:15:18.640
the whole time.


00:15:18.640 --> 00:15:20.460
It was more of about a, like an event of it.


00:15:20.460 --> 00:15:22.540
Sometimes your screen was up, sometimes it wasn't,


00:15:22.540 --> 00:15:24.580
but there's an official PEP that talks about,


00:15:24.580 --> 00:15:27.940
like, here's the recipe for doing this, right?


00:15:27.940 --> 00:15:28.780
- That is correct.


00:15:28.780 --> 00:15:31.620
is PEP 101 doing Python releases.


00:15:31.620 --> 00:15:36.640
And that is a curious document, it's peculiar document


00:15:36.640 --> 00:15:38.640
that talks about how it's done, but it's like,


00:15:38.640 --> 00:15:40.340
it's kind of weird.


00:15:40.340 --> 00:15:42.340
So the document is up to date,


00:15:42.340 --> 00:15:45.480
like you can actually search PEP 101


00:15:45.480 --> 00:15:47.640
and it will show you the thing.


00:15:47.640 --> 00:15:49.840
So what is there is the actual process.


00:15:49.840 --> 00:15:53.100
It's just, it also contains these weird sentences,


00:15:53.100 --> 00:15:55.560
like if you search for it, there is a bunch of places


00:15:55.560 --> 00:15:58.960
says stop, stop, stop, stop, stop, quite funny.


00:15:58.960 --> 00:16:03.800
And that was, if I recall correctly, Larry Hastings.


00:16:03.800 --> 00:16:05.800
He wrote those things.


00:16:05.800 --> 00:16:09.520
And the idea is that he could search for those places.


00:16:09.520 --> 00:16:11.440
And he knows that at that stage, he


00:16:11.440 --> 00:16:13.560
needs to wait for something to happen or something.


00:16:13.560 --> 00:16:14.640
And we left it there.


00:16:14.640 --> 00:16:18.120
So there's a bunch of weird artifacts.


00:16:18.120 --> 00:16:22.320
And it's full of bullet points, because at some stages,


00:16:22.320 --> 00:16:24.120
you need to do some things and some others,


00:16:24.120 --> 00:16:25.200
and things like that.


00:16:25.200 --> 00:16:27.320
And it says, OK, if you're running a beta release,


00:16:27.320 --> 00:16:28.680
then you need to do this bunch of things.


00:16:28.680 --> 00:16:29.840
And if you're running an alpha release,


00:16:29.840 --> 00:16:31.300
you need to do this bunch of things.


00:16:31.300 --> 00:16:34.840
And I have done a state machine that


00:16:34.840 --> 00:16:36.080
goes through the whole thing.


00:16:36.080 --> 00:16:37.960
Because if you actually write this down,


00:16:37.960 --> 00:16:41.480
it's quite-- how is this called?


00:16:41.480 --> 00:16:44.920
The maintainability index of this process is insane.


00:16:44.920 --> 00:16:46.800
It just rejects your thing.


00:16:46.800 --> 00:16:49.080
It just doesn't merge.


00:16:49.080 --> 00:16:51.520
And I said, yeah, I'm not doing this, really.


00:16:51.520 --> 00:16:54.200
So one thing I did, which is the thing that I


00:16:54.200 --> 00:16:56.840
was using at the stream.


00:16:56.840 --> 00:16:59.280
My first work as a release manager is to say,


00:16:59.280 --> 00:17:01.880
I'm not going to do this by hand.


00:17:01.880 --> 00:17:03.560
And that is the vision.


00:17:03.560 --> 00:17:10.080
And then I did this script that is on github/python/releasetools.


00:17:10.080 --> 00:17:14.240
And it's my attempt at automating this process


00:17:14.240 --> 00:17:18.500
as much as possible, which unfortunately still requires


00:17:18.500 --> 00:17:21.600
a bunch of manual steps because that's life and things happen.


00:17:21.600 --> 00:17:25.760
But it's quite automatic, at least things that are not final releases.


00:17:25.760 --> 00:17:28.600
So Alphas and Release Candidates,


00:17:28.600 --> 00:17:31.060
and now that we are in back-fixed releases,


00:17:31.060 --> 00:17:33.000
it mostly runs automatically,


00:17:33.000 --> 00:17:36.900
except that in the final release, everything fails


00:17:36.900 --> 00:17:39.800
because that's the final release for you,


00:17:39.800 --> 00:17:41.640
and then you need to fix things manually.


00:17:41.640 --> 00:17:46.500
So I think you saw me executing a bunch of those fixes.


00:17:46.500 --> 00:17:48.840
At some point, I added a division by zero


00:17:48.840 --> 00:17:50.300
just to know that something was hit


00:17:50.300 --> 00:17:51.700
and that was seen on the screen.


00:17:51.700 --> 00:17:54.420
Because like, and people were like, division by zero?


00:17:54.420 --> 00:17:55.940
Why do you need that to release Python?


00:17:55.940 --> 00:17:57.340
I'm like, I don't know.


00:17:57.340 --> 00:17:58.900
That's very complicated.


00:17:58.900 --> 00:18:00.140
- I could have asserted false.


00:18:00.140 --> 00:18:01.380
Come on, anything would have worked here.


00:18:01.380 --> 00:18:02.620
- No, no, we divide by zero.


00:18:02.620 --> 00:18:04.180
I'm a physicist, so that's what I do.


00:18:04.180 --> 00:18:05.020
- Okay.


00:18:05.020 --> 00:18:06.140
- Assert false is more precise.


00:18:06.140 --> 00:18:08.500
- You studied black holes, right?


00:18:08.500 --> 00:18:09.580
- Yeah.


00:18:09.580 --> 00:18:11.740
- You were looking for some sort of like infinite


00:18:11.740 --> 00:18:14.100
sort of thing that you divide by zero.


00:18:14.100 --> 00:18:15.300
- I'm too tired for today.


00:18:15.300 --> 00:18:18.140
Let's just collapse the universe, dividing by zero.


00:18:18.140 --> 00:18:19.580
But Python was too friendly.


00:18:19.580 --> 00:18:20.820
Instead of collapsing the universe,


00:18:20.820 --> 00:18:22.820
it sold me an exception.


00:18:22.820 --> 00:18:24.460
Quite nice.


00:18:24.460 --> 00:18:25.860
All in 3.11.


00:18:25.860 --> 00:18:27.020
No, no, I'm joking.


00:18:27.020 --> 00:18:29.180
Anyway, so yes, yes, you can follow this pep


00:18:29.180 --> 00:18:34.060
and just enjoy the whole process on its glory,


00:18:34.060 --> 00:18:36.020
or you can see the script.


00:18:36.020 --> 00:18:37.180
But yeah, it's quite verbose.


00:18:37.180 --> 00:18:39.260
You can see that there's lots of places


00:18:39.260 --> 00:18:42.020
when everything can go wrong and you can panic.


00:18:42.020 --> 00:18:44.780
Now we know one more.


00:18:44.780 --> 00:18:46.220
Apparently your YubiKey can break,


00:18:46.220 --> 00:18:47.660
so that's something that can happen as well.


00:18:47.660 --> 00:18:51.620
but it's quite annoying and that's the main job


00:18:51.620 --> 00:18:54.420
of the release manager, go through this annoying process.


00:18:54.420 --> 00:18:58.780
- Yeah, I see that there are some parts in here.


00:18:58.780 --> 00:19:00.060
You should have a few more stops.


00:19:00.060 --> 00:19:01.260
I should say, stop, stop, stop.


00:19:01.260 --> 00:19:02.580
Make sure GitHub still works.


00:19:02.580 --> 00:19:03.420
Stop, stop, stop.


00:19:03.420 --> 00:19:04.580
Make sure Azure still works.


00:19:04.580 --> 00:19:06.220
Stop, stop, stop.


00:19:06.220 --> 00:19:07.060
- Don't cry.


00:19:07.060 --> 00:19:08.020
Don't cry at this stage.


00:19:08.020 --> 00:19:09.380
Everyone is looking at you.


00:19:09.380 --> 00:19:12.580
But yeah, the one thing that is known in this pub


00:19:12.580 --> 00:19:14.700
is that you also are in charge in theory


00:19:14.700 --> 00:19:19.980
this extreme abstract mandate, which is that you are in charge of the stability of the


00:19:19.980 --> 00:19:25.020
release, whatever that means, that translates mostly in chasing people because they broke


00:19:25.020 --> 00:19:26.020
things.


00:19:26.020 --> 00:19:32.100
And another unfortunate event that we are trying to also fix a bit for the releases


00:19:32.100 --> 00:19:37.180
is that most people turn to the release manager to solve problems.


00:19:37.180 --> 00:19:42.060
So they say, "Hey, this person says that we should do X, while this other person says


00:19:42.060 --> 00:19:43.420
that we should do Y.


00:19:43.420 --> 00:19:44.700
we need someone to the side.


00:19:44.700 --> 00:19:47.100
Let's reach to the release manager.


00:19:47.100 --> 00:19:50.180
But the release manager is this guy on the corner.


00:19:50.180 --> 00:19:51.140
He doesn't know shit.


00:19:51.140 --> 00:19:54.620
So he's not the best person to fetch it.


00:19:54.620 --> 00:19:56.580
But everybody was like, what do you think, Pablo?


00:19:56.580 --> 00:19:57.580
So we merged this.


00:19:57.580 --> 00:19:58.380
I don't know, man.


00:19:58.380 --> 00:19:59.980
This is some enum things.


00:19:59.980 --> 00:20:01.140
I don't know about this.


00:20:01.140 --> 00:20:02.860
I have no context whatsoever.


00:20:02.860 --> 00:20:05.900
- Your only concern is, will it still build and ship?


00:20:05.900 --> 00:20:06.740
- Exactly.


00:20:06.740 --> 00:20:10.020
It's like, yeah, what about these 2,000 lines of code


00:20:10.020 --> 00:20:11.140
that sold this tiny bug?


00:20:11.140 --> 00:20:13.340
It's like, well, maybe let's not merge that.


00:20:13.340 --> 00:20:16.900
But yeah, we are trying to also redirect all of this


00:20:16.900 --> 00:20:19.180
to the steering council, which also I am in the steering


00:20:19.180 --> 00:20:20.680
council, so apparently I'm not going


00:20:20.680 --> 00:20:22.660
to get rid of these questions.


00:20:22.660 --> 00:20:23.220
I'm joking.


00:20:23.220 --> 00:20:24.220
I enjoy all these questions.


00:20:24.220 --> 00:20:25.580
But as a release manager, I don't.


00:20:25.580 --> 00:20:27.900
So the key here is that the release manager should not


00:20:27.900 --> 00:20:30.860
take unilateral decisions on the evolution of these things,


00:20:30.860 --> 00:20:32.420
because it's just the release manager.


00:20:32.420 --> 00:20:34.060
So the reason the steering council is--


00:20:34.060 --> 00:20:36.060
>>You are the one who delivers the code.


00:20:36.060 --> 00:20:38.260
You could sneak a feature in there.


00:20:38.260 --> 00:20:38.760
Come on.


00:20:38.760 --> 00:20:39.260
>>No, no, no.


00:20:39.260 --> 00:20:40.620
I don't decide important things.


00:20:40.620 --> 00:20:42.420
I just execute and chase people.


00:20:42.420 --> 00:20:44.660
and I'm this annoying guy that says, "You wrote this, fix it."


00:20:44.660 --> 00:20:48.020
But then, if there is some important decisions to be taken,


00:20:48.020 --> 00:20:51.460
that's the steering council job, which is five people,


00:20:51.460 --> 00:20:54.540
because one person shouldn't decide these things.


00:20:54.540 --> 00:20:57.780
And this happens. Sometimes I say, "Hey, there is this PR


00:20:57.780 --> 00:20:59.540
when people are asking what should we do,


00:20:59.540 --> 00:21:02.740
and then this is my opinion as the member of the steering council,


00:21:02.740 --> 00:21:04.740
and the other four members maybe they say,


00:21:04.740 --> 00:21:07.220
"Well, actually, that's not a good opinion, so what about this?"


00:21:07.220 --> 00:21:09.300
And we ended up in a much better place


00:21:09.300 --> 00:21:11.060
because it was five people,


00:21:11.060 --> 00:21:13.880
five persons doing a decision instead of one.


00:21:13.880 --> 00:21:15.180
But yeah.


00:21:15.180 --> 00:21:16.020
- Yeah.


00:21:16.020 --> 00:21:17.780
Amazing.


00:21:17.780 --> 00:21:19.500
Okay, so if people wanna follow along with the process,


00:21:19.500 --> 00:21:21.300
they can check out PEP 101.


00:21:21.300 --> 00:21:24.600
Let's see, let's keep over here.


00:21:24.600 --> 00:21:26.300
You also talked about the Python build bot


00:21:26.300 --> 00:21:27.320
that people can check out,


00:21:27.320 --> 00:21:30.880
but I think maybe we wanna jump into our first feature.


00:21:30.880 --> 00:21:36.500
As Arit said, there's a ton of features and things in here,


00:21:36.500 --> 00:21:39.260
but there's also maybe some top level ones


00:21:39.260 --> 00:21:41.200
that'll be really important for a lot of folks.


00:21:41.200 --> 00:21:44.740
And, Ravit, you wanna tell us about your work?


00:21:44.740 --> 00:21:46.620
You mentioned it before, the exception groups


00:21:46.620 --> 00:21:48.940
and Exception Star. - Sure, yeah.


00:21:48.940 --> 00:21:52.920
So this is kind of a major new feature that we added.


00:21:52.920 --> 00:21:57.120
And the idea is that sometimes you have a situation


00:21:57.120 --> 00:21:59.660
where you did several things


00:21:59.660 --> 00:22:02.220
and maybe more than one of them raised an exception,


00:22:02.220 --> 00:22:05.780
and now you need to report that there was more than one error


00:22:05.780 --> 00:22:06.620
in whatever you did.


00:22:06.620 --> 00:22:10.260
and what you did could have been a bunch of asynchronous tasks,


00:22:10.260 --> 00:22:14.220
which is that was the use case that motivated this whole thing.


00:22:14.220 --> 00:22:19.060
But there are also situations where you just iterate over a few things


00:22:19.060 --> 00:22:22.260
and repeat them and accumulate exceptions,


00:22:22.260 --> 00:22:25.580
and you want to report all of them.


00:22:25.580 --> 00:22:30.460
And the PEP lists a bunch of examples of where this can happen.


00:22:30.460 --> 00:22:36.300
So people, typically what they do is they'll take a list of exceptions,


00:22:36.300 --> 00:22:38.780
wrap it in another exception, multi-error,


00:22:38.780 --> 00:22:41.980
some other kind of wrapper and throw that,


00:22:41.980 --> 00:22:43.580
and then you have to catch it.


00:22:43.580 --> 00:22:45.220
And then you have to iterate over the list


00:22:45.220 --> 00:22:46.420
and look at the exceptions,


00:22:46.420 --> 00:22:49.980
but you don't have a method to handle the exceptions.


00:22:49.980 --> 00:22:51.940
Like you have try accept, like catch these,


00:22:51.940 --> 00:22:54.340
but not catch exceptions.


00:22:54.340 --> 00:22:55.180
- Right, right.


00:22:55.180 --> 00:22:59.160
Because in accept you might have like accept socket error,


00:22:59.160 --> 00:23:01.220
or you might have accept, you know,


00:23:01.220 --> 00:23:03.100
like file not found type of thing.


00:23:03.100 --> 00:23:06.300
But if those both happen,


00:23:06.300 --> 00:23:08.700
neither of those would run in Python 3.10, right?


00:23:08.700 --> 00:23:10.220
'Cause it's some kind of weird wrapper


00:23:10.220 --> 00:23:11.780
and it's not a socket exception,


00:23:11.780 --> 00:23:12.740
it's not a file exception,


00:23:12.740 --> 00:23:14.060
but it kind of contains both.


00:23:14.060 --> 00:23:15.580
And so in a sense,


00:23:15.580 --> 00:23:17.460
- Right. - I don't know.


00:23:17.460 --> 00:23:19.860
- And then if you catch the wrapper,


00:23:19.860 --> 00:23:21.860
and you do something with some of the exceptions,


00:23:21.860 --> 00:23:23.860
you better not forget to raise the rest


00:23:23.860 --> 00:23:25.700
because you're not handling them.


00:23:25.700 --> 00:23:27.420
So, yeah, there are a lot of problems


00:23:27.420 --> 00:23:29.340
when you try to work around this


00:23:29.340 --> 00:23:31.820
and like what happened with Trio.


00:23:31.820 --> 00:23:34.740
So Trio had multi-error, it would raise this wrapper


00:23:34.740 --> 00:23:39.740
and it had to do a lot of complicated acrobatics


00:23:39.740 --> 00:23:42.160
just to have some error handling.


00:23:42.160 --> 00:23:46.060
So the motivation was, yeah, we have task groups


00:23:46.060 --> 00:23:50.640
in Python 3.11, which are kind of like Trio nurseries,


00:23:50.640 --> 00:23:56.340
kind of a structured collection of asynchronous tasks.


00:23:56.340 --> 00:23:59.660
And task groups were on the cards,


00:23:59.660 --> 00:24:02.340
They started like Yuri Sulevanov,


00:24:02.340 --> 00:24:05.140
who was kind of maintaining async.io in the beginning,


00:24:05.140 --> 00:24:07.380
he wrote a lot of async.io.


00:24:07.380 --> 00:24:11.580
He wanted to add task groups since 2017, 2018,


00:24:11.580 --> 00:24:12.500
something like that.


00:24:12.500 --> 00:24:16.100
And what was holding it up was error handling.


00:24:16.100 --> 00:24:19.140
There was no good way to handle errors.


00:24:19.140 --> 00:24:20.540
So now we have accept star,


00:24:20.540 --> 00:24:24.900
which is, which generalizes accept and works with groups.


00:24:24.900 --> 00:24:29.020
So you can say accept star socket error.


00:24:29.020 --> 00:24:31.720
and then it will just extract all the socket errors


00:24:31.720 --> 00:24:34.280
from the group and give you those


00:24:34.280 --> 00:24:36.740
and automatically re-erase everything else.


00:24:36.740 --> 00:24:38.680
So that's basically the idea.


00:24:38.680 --> 00:24:43.680
- Okay, so this is pretty interesting.


00:24:43.680 --> 00:24:47.480
We have try, do your thing, and then accept star,


00:24:47.480 --> 00:24:52.360
you know, one error type, accept star, another error type,


00:24:52.360 --> 00:24:55.380
accept star, a set of errors potentially.


00:24:55.380 --> 00:25:00.380
So what happens if I'm in this situation and say,


00:25:00.380 --> 00:25:02.900
the first error type,


00:25:02.900 --> 00:25:07.060
and maybe something from the third error catch clause


00:25:07.060 --> 00:25:10.380
is thrown in one of these task group, exception groups.


00:25:10.380 --> 00:25:14.540
- So each exception in the group will be handled


00:25:14.540 --> 00:25:16.020
by at most one of the clauses.


00:25:16.020 --> 00:25:20.060
So the first clause that matches its type will consume it,


00:25:20.060 --> 00:25:23.060
and each clause executes once.


00:25:23.060 --> 00:25:27.180
So if there are more than one errors of that type,


00:25:27.180 --> 00:25:31.660
then what gets kind of bound in the except star full error


00:25:31.660 --> 00:25:35.060
as E, what gets bound to E is a group of full errors.


00:25:35.060 --> 00:25:38.560
So you get all the full errors in a group,


00:25:38.560 --> 00:25:41.000
execute that clause and then move on to the next clause


00:25:41.000 --> 00:25:43.640
with whatever is not handled yet.


00:25:43.640 --> 00:25:46.160
- Interesting.


00:25:46.160 --> 00:25:49.740
So it might run two of the clauses,


00:25:49.740 --> 00:25:52.580
whereas in traditional exception handling,


00:25:52.580 --> 00:25:56.820
it goes from top to bottom and it looks for an inheritance type of match and the first one that


00:25:56.820 --> 00:26:03.060
matches that's it. But in this case with the star you could get multiple ones. I guess the star to


00:26:03.060 --> 00:26:11.380
me when I look at this the star is reminiscent of args star where you have unpacking. Yeah,


00:26:11.380 --> 00:26:17.620
yeah, yeah exactly. It's not exactly unpacking but it was it was kind of the intention to make it look


00:26:17.620 --> 00:26:20.020
a bit like unpacking.


00:26:20.020 --> 00:26:22.580
- Nice, yeah, this looks like a really cool feature.


00:26:22.580 --> 00:26:25.220
You know, you talked about the task groups


00:26:25.220 --> 00:26:28.220
and Trio and those things.


00:26:28.220 --> 00:26:30.260
So when I saw this, concurrent errors


00:26:30.260 --> 00:26:31.260
obviously come to mind,


00:26:31.260 --> 00:26:34.060
'cause if I try to both write something to a database


00:26:34.060 --> 00:26:36.220
and call a web service asynchronously


00:26:36.220 --> 00:26:38.820
and I start both of those and they both crash


00:26:38.820 --> 00:26:41.060
or multiple ones crash,


00:26:41.060 --> 00:26:41.900
which error do you want?


00:26:41.900 --> 00:26:43.660
The database error or do you want the API error?


00:26:43.660 --> 00:26:45.340
You probably wanna know about both of them, right?


00:26:45.340 --> 00:26:48.420
That's a real natural reason to bring these together.


00:26:48.420 --> 00:26:53.300
But maybe you'd also list out some of the other reasons


00:26:53.300 --> 00:26:55.300
that you might run into this.


00:26:55.300 --> 00:26:57.300
Maybe you have some other ideas.


00:26:57.300 --> 00:26:59.920
The example in the Socket module,


00:26:59.920 --> 00:27:01.920
we have the CreateConnection function.


00:27:01.920 --> 00:27:05.560
That function, I was showing it in the stream,


00:27:05.560 --> 00:27:08.720
it iterates over all the configurations


00:27:08.720 --> 00:27:10.720
that you could try to connect with,


00:27:10.720 --> 00:27:13.220
and then depending on what's going on the other side,


00:27:13.220 --> 00:27:15.220
hopefully one of them works.


00:27:15.220 --> 00:27:18.420
But if none of them work, you have to report errors.


00:27:18.420 --> 00:27:20.100
And what we do in Python 3.10


00:27:20.100 --> 00:27:22.340
is we just raise the last exception.


00:27:22.340 --> 00:27:24.700
So you don't know what happened really.


00:27:24.700 --> 00:27:27.460
You only know why the last attempt failed.


00:27:27.460 --> 00:27:29.180
You don't even know how many attempts we made


00:27:29.180 --> 00:27:33.300
to connect to, how many configurations did we try.


00:27:33.300 --> 00:27:37.820
So, you know, that was a longstanding open problem,


00:27:37.820 --> 00:27:40.820
kind of, can we do better than just report the last error?


00:27:40.820 --> 00:27:41.900
And we closed it.


00:27:41.900 --> 00:27:43.780
We just added a parameter to that set.


00:27:43.780 --> 00:27:45.380
- Give me a demo in the group.


00:27:45.380 --> 00:27:49.380
- Another place that comes to mind is,


00:27:49.380 --> 00:27:53.140
maybe you're all familiar with some of these retry libraries


00:27:53.140 --> 00:27:55.840
like retry, but I think there's others as well,


00:27:55.840 --> 00:27:59.380
where you put a decorator onto some function,


00:27:59.380 --> 00:28:02.900
you say, try this multiple times,


00:28:02.900 --> 00:28:06.020
and if it fails, do like some sort of exponential backoff


00:28:06.020 --> 00:28:09.020
'cause maybe the server's overloaded, right?


00:28:09.020 --> 00:28:10.980
Those types of things would be really great.


00:28:10.980 --> 00:28:13.980
Like if it retries all the times it's supposed to


00:28:13.980 --> 00:28:16.460
and it fails, it'd be good to get all the errors,


00:28:16.460 --> 00:28:18.340
not just the last one or the first one


00:28:18.340 --> 00:28:20.800
or whatever it decided it was gonna give you.


00:28:20.800 --> 00:28:22.020
- Yeah.


00:28:22.020 --> 00:28:22.860
- Yeah.


00:28:22.860 --> 00:28:24.700
- It's the kind of thing, exactly.


00:28:24.700 --> 00:28:25.620
- Yeah, nice.


00:28:25.620 --> 00:28:28.800
Hey, well, congratulations on getting that feature out.


00:28:28.800 --> 00:28:30.440
That's great.


00:28:30.440 --> 00:28:32.240
All right, what do we got next here?


00:28:32.240 --> 00:28:36.380
I think also related to this,


00:28:36.380 --> 00:28:41.240
I wanted to talk about this PEP 678.


00:28:41.240 --> 00:28:43.780
- Yes, that was--


00:28:43.780 --> 00:28:45.300
- You want to tell us about this one?


00:28:45.300 --> 00:28:49.100
- Yeah, that's a very small and simple feature


00:28:49.100 --> 00:28:54.100
that Zach Hadford Dodds wrote this PEP.


00:28:54.100 --> 00:28:56.940
He was trying out exception groups.


00:28:56.940 --> 00:28:58.580
He was the first kind of user,


00:28:58.580 --> 00:29:01.860
even before the PR was merged, he was trying it out.


00:29:01.860 --> 00:29:05.100
He was trying to integrate it with the hypothesis library.


00:29:05.100 --> 00:29:08.800
So there you write a test and the library executes it


00:29:08.800 --> 00:29:11.480
many times with different inputs and you get failures


00:29:11.480 --> 00:29:14.740
in some of the inputs and you want to report all of them.


00:29:14.740 --> 00:29:19.200
So Zach had an exception group, kind of an exception wrapper,


00:29:19.200 --> 00:29:20.640
kind of like to your multi-error,


00:29:20.640 --> 00:29:24.200
he had his own version that he built in his library.


00:29:24.200 --> 00:29:29.200
And he could associate each exception he attached to it,


00:29:29.200 --> 00:29:34.440
which input generated this error, which is very important.


00:29:34.760 --> 00:29:37.280
You need to tell people what the input was


00:29:37.280 --> 00:29:38.820
and what happened with it.


00:29:38.820 --> 00:29:43.340
And he couldn't do that in a convenient way


00:29:43.340 --> 00:29:44.700
with exception groups.


00:29:44.700 --> 00:29:47.900
So we added this to base exception.


00:29:47.900 --> 00:29:49.420
This is not a group feature.


00:29:49.420 --> 00:29:54.020
It's any exception you can add strings.


00:29:54.020 --> 00:29:55.820
You call add note, give it a string,


00:29:55.820 --> 00:29:57.740
and you can call it as many times as you want


00:29:57.740 --> 00:30:00.580
and add notes to the exceptions.


00:30:00.580 --> 00:30:02.180
And they will appear in the trace back,


00:30:02.180 --> 00:30:05.880
in the default trace back that the interpreter prints.


00:30:05.880 --> 00:30:06.720
So that's all it is.


00:30:06.720 --> 00:30:08.580
It's a very simple feature,


00:30:08.580 --> 00:30:13.580
but it was received surprisingly well.


00:30:13.580 --> 00:30:15.740
People kind of like it,


00:30:15.740 --> 00:30:19.780
that you can enrich an exception after you catch it.


00:30:19.780 --> 00:30:21.500
So you have the information that,


00:30:21.500 --> 00:30:24.580
the error message and the type,


00:30:24.580 --> 00:30:26.940
you decide that when you raise the exception,


00:30:26.940 --> 00:30:28.620
but then sometimes when you catch it,


00:30:28.620 --> 00:30:29.940
there's some more information,


00:30:29.940 --> 00:30:32.280
some context, like what was I trying to do


00:30:32.280 --> 00:30:34.060
when this error happened?


00:30:34.060 --> 00:30:34.900
- Sure.


00:30:34.900 --> 00:30:37.540
Yeah, 'cause often you'll see,


00:30:37.540 --> 00:30:40.060
except some type, some exception type,


00:30:40.060 --> 00:30:41.980
you'll deal with what you can,


00:30:41.980 --> 00:30:43.500
but you can't really handle it there,


00:30:43.500 --> 00:30:44.540
so you gotta raise it again.


00:30:44.540 --> 00:30:47.020
And this is a place to add more information


00:30:47.020 --> 00:30:49.240
without completely wrapping it, right?


00:30:49.240 --> 00:30:51.340
- Right, exactly.


00:30:51.340 --> 00:30:53.460
A lot of people have to chain it,


00:30:53.460 --> 00:30:55.260
say this raised from that.


00:30:55.260 --> 00:30:57.580
So there will be situations where


00:30:57.580 --> 00:30:59.740
maybe you won't need to do that.


00:30:59.740 --> 00:31:01.740
- Yeah, I'd love to see that go away.


00:31:01.740 --> 00:31:05.060
I'm sort of template libraries and stuff in the web


00:31:05.060 --> 00:31:08.500
all the time, I see like, there's all these different errors


00:31:08.500 --> 00:31:10.700
and you gotta hunt through a bunch of stuff


00:31:10.700 --> 00:31:11.540
to figure out what happened.


00:31:11.540 --> 00:31:14.280
- Yeah, also think about, for instance,


00:31:14.280 --> 00:31:17.700
I think this is super useful actually for end users even.


00:31:17.700 --> 00:31:20.660
Like, think about that you're doing some query


00:31:20.660 --> 00:31:21.660
to the database, right?


00:31:21.660 --> 00:31:24.480
And then, I don't know, it may fail for six million reasons


00:31:24.480 --> 00:31:27.780
and then you want to add what you're asking for, right?


00:31:27.780 --> 00:31:31.100
So you add your query or your user or whatever,


00:31:31.100 --> 00:31:34.820
because probably the exception that the Postgres thingy


00:31:34.820 --> 00:31:36.980
that is underneath is not going to contain


00:31:36.980 --> 00:31:38.620
your actual thing.


00:31:38.620 --> 00:31:42.100
So this actually may save you hours, right?


00:31:42.100 --> 00:31:45.300
Because in many enterprise environments,


00:31:45.300 --> 00:31:47.380
you don't even have easy access to that.


00:31:47.380 --> 00:31:50.780
So sorry to brought, so you cannot just go there


00:31:50.780 --> 00:31:52.260
and see what's going on.


00:31:52.260 --> 00:31:54.660
So it would be super cool that you say,


00:31:54.660 --> 00:31:58.600
If something fails, I was trying to do this with this data


00:31:58.600 --> 00:31:59.600
and with these things.


00:31:59.600 --> 00:32:02.100
So if it fails, now you can know what's going on,


00:32:02.100 --> 00:32:04.060
and you don't even need to log in, which is--


00:32:04.060 --> 00:32:05.560
>>Yeah, that's a great idea.


00:32:05.560 --> 00:32:07.500
Yeah, yeah, it's a great idea.


00:32:07.500 --> 00:32:11.340
Or if you know, here's probably why this happened.


00:32:11.340 --> 00:32:14.300
As a library developer, you're like, look, this is the error.


00:32:14.300 --> 00:32:15.300
But here's a note.


00:32:15.300 --> 00:32:17.920
This is probably because you didn't initialize the connection


00:32:17.920 --> 00:32:18.880
before you called this.


00:32:18.880 --> 00:32:23.920
So make sure-- another area where I see this could be useful


00:32:23.920 --> 00:32:27.600
is I want to raise, like the example you have


00:32:27.600 --> 00:32:30.280
in the docs is type error,


00:32:30.280 --> 00:32:32.560
but it could also be value error


00:32:32.560 --> 00:32:34.640
or some other built-in low-level type.


00:32:34.640 --> 00:32:35.660
You know, like really this is just,


00:32:35.660 --> 00:32:37.700
I wanna raise that error,


00:32:37.700 --> 00:32:39.680
but it doesn't have a place for me


00:32:39.680 --> 00:32:41.400
to put additional information.


00:32:41.400 --> 00:32:44.200
And so I wanna kind of enrich that with more.


00:32:44.200 --> 00:32:47.220
And so not just catch, add the data and then raise it again,


00:32:47.220 --> 00:32:49.920
but actually I wanna use a base error type


00:32:49.920 --> 00:32:51.600
that doesn't let me put more details in it


00:32:51.600 --> 00:32:53.200
and then just raise that, right?


00:32:53.200 --> 00:32:54.200
that would also work?


00:32:54.200 --> 00:32:57.120
- I think so.


00:32:57.120 --> 00:32:58.640
I mean, I think the intention was,


00:32:58.640 --> 00:33:01.360
there was some discussions about using notes


00:33:01.360 --> 00:33:03.280
in the interpreter and I pushed back on it


00:33:03.280 --> 00:33:05.880
because I said, this is owned by the application.


00:33:05.880 --> 00:33:08.440
The interpretation should touch the notes, you know,


00:33:08.440 --> 00:33:10.240
'cause people can wipe out the notes,


00:33:10.240 --> 00:33:12.000
they can change the order, they can do what they want.


00:33:12.000 --> 00:33:16.160
It's the applications, at least the way I see it.


00:33:16.160 --> 00:33:18.480
Application owns it, you put whatever context


00:33:18.480 --> 00:33:19.320
you wanna put.


00:33:19.320 --> 00:33:22.280
- Is there only one note?


00:33:22.280 --> 00:33:24.880
When I say add note, does that set the note


00:33:24.880 --> 00:33:26.600
or can I have a list of notes?


00:33:26.600 --> 00:33:28.280
- It's a list of notes.


00:33:28.280 --> 00:33:29.120
- Okay, got it.


00:33:29.120 --> 00:33:30.200
- Yeah, and you can wipe it out if you want.


00:33:30.200 --> 00:33:32.800
You can, it's just a list.


00:33:32.800 --> 00:33:34.000
It's attached to the exception.


00:33:34.000 --> 00:33:35.560
You can do what you want with it, really.


00:33:35.560 --> 00:33:36.400
- Yeah, cool.


00:33:36.400 --> 00:33:38.680
Okay, yeah, it's a great, it's a really great feature.


00:33:38.680 --> 00:33:42.360
I mean, it's, I'm sure it was way less work


00:33:42.360 --> 00:33:43.760
than accept star,


00:33:43.760 --> 00:33:46.320
but it's also gonna be really valuable, I think.


00:33:46.320 --> 00:33:50.520
- Yes, it's very simple, but it's, yeah.


00:33:50.520 --> 00:33:51.360
- Okay.


00:33:51.360 --> 00:33:53.760
- Yeah.


00:33:53.760 --> 00:33:55.720
Brent or Mark, you guys got any thought about this


00:33:55.720 --> 00:33:57.220
before we move on to the next?


00:33:57.220 --> 00:34:00.160
- I think it's really cool.


00:34:00.160 --> 00:34:01.240
I like it.


00:34:01.240 --> 00:34:02.080
Great work, Gary.


00:34:02.080 --> 00:34:04.640
- Indeed.


00:34:04.640 --> 00:34:05.520
I think it is as well.


00:34:05.520 --> 00:34:07.360
Actually, I'm really excited about it.


00:34:07.360 --> 00:34:08.980
Let's go.


00:34:08.980 --> 00:34:15.520
Talk about, let's talk about faster Python for a little bit.


00:34:15.520 --> 00:34:18.200
So Mark, I had you and Guido on back on,


00:34:19.320 --> 00:34:21.680
Wow, almost to the day a year ago.


00:34:21.680 --> 00:34:26.200
We're off by November 1st, 2021.


00:34:26.200 --> 00:34:30.020
So, not that long ago.


00:34:30.020 --> 00:34:32.660
But yeah, let's talk a little bit about


00:34:32.660 --> 00:34:34.320
the work that you're doing there.


00:34:34.320 --> 00:34:38.840
I guess the headline is that Python 3.11


00:34:38.840 --> 00:34:43.760
is 10 to 60, 10 to 50% faster than previous,


00:34:43.760 --> 00:34:46.920
sort of on a reasonable range of applications.


00:34:46.920 --> 00:34:48.140
Is that the story?


00:34:48.140 --> 00:34:54.220
Yeah, somewhere between minus a few percent and plus 100, but it varies a huge amount.


00:34:54.220 --> 00:35:00.780
I mean, if you've got some application that basically spends all its time in NumPy or


00:35:00.780 --> 00:35:04.780
something like that, you're not really going to speed up at all. But if it's pure Python,


00:35:04.780 --> 00:35:10.300
you'd expect it to be a good 40, 50 percent faster. But it depends.


00:35:10.300 --> 00:35:17.660
Right. That's a good point because a lot of people do make Python faster by writing C or Rust or


00:35:17.660 --> 00:35:22.300
other languages and at that point it's out of your hands.


00:35:22.300 --> 00:35:27.260
We're looking hopefully for 3.12 to start looking at the


00:35:27.260 --> 00:35:31.340
interface between Python and C code so we should speed up code even there's


00:35:31.340 --> 00:35:34.700
quite a lot of C code. We won't spend up the time spent in the C code


00:35:34.700 --> 00:35:37.820
in doing the actual work in the C code but there's still quite a lot of


00:35:37.820 --> 00:35:41.660
marshalling of data that happens and hopefully we'll streamline that.


00:35:41.660 --> 00:35:46.460
The existence of C extensions is in some ways limits our


00:35:46.460 --> 00:35:51.100
opportunity to speed things up, but it's also why Python is so popular in the first place,


00:35:51.100 --> 00:35:54.220
or one of the main reasons. So definitely need to acknowledge it.


00:35:54.220 --> 00:36:00.700
Yeah, absolutely. So, Brent, I'll definitely have you talk about the specializing interpreters,


00:36:00.700 --> 00:36:06.540
but Mark, maybe give us a rundown of some of the things from your plan that made it in here. I know


00:36:06.540 --> 00:36:09.580
some were aimed for 3.10, but they didn't make it until here, right?


00:36:09.580 --> 00:36:13.500
Yeah, so the whole thing, oh, that original plan I put up, that was more of a just to


00:36:14.860 --> 00:36:17.380
get the discussion going sort of thing.


00:36:17.380 --> 00:36:19.740
And it's basically more or less a year off.


00:36:19.740 --> 00:36:22.100
So if you just shift everything one forward,


00:36:22.100 --> 00:36:24.380
I mean, there was a lot of discussion on,


00:36:24.380 --> 00:36:26.620
you know, speeding up the interpreter


00:36:26.620 --> 00:36:29.580
in the first iteration and then looking more


00:36:29.580 --> 00:36:31.420
to the data structures in the second thing


00:36:31.420 --> 00:36:33.020
is much more jumbled than that.


00:36:33.020 --> 00:36:34.380
We're doing sort of a bit of everything.


00:36:34.380 --> 00:36:37.380
So obviously with, I was planning on, you know,


00:36:37.380 --> 00:36:38.580
expecting a smaller team.


00:36:38.580 --> 00:36:41.700
So things are being a bit shuffled.


00:36:41.700 --> 00:36:43.900
So yeah, there's this specializing interpreter,


00:36:43.900 --> 00:36:45.060
Obviously that's kind of key.


00:36:45.060 --> 00:36:46.620
There's also quite a lot of stuff we've done


00:36:46.620 --> 00:36:47.900
with data structures.


00:36:47.900 --> 00:36:50.700
I mean, we shrunk the Python object.


00:36:50.700 --> 00:36:53.340
So we've been, I mean, the Python object, you know,


00:36:53.340 --> 00:36:54.740
has been shrinking for years.


00:36:54.740 --> 00:36:56.980
I mean, I've got some numbers here.


00:36:56.980 --> 00:37:00.520
So like in 2.7 and 3.2,


00:37:00.520 --> 00:37:03.260
I like an object with just four attributes


00:37:03.260 --> 00:37:07.120
would take 352 bytes on a 64-bit machine.


00:37:07.120 --> 00:37:09.140
And for 3.11, we've got it down to 112.


00:37:09.140 --> 00:37:11.980
And for 3.12, 96.


00:37:11.980 --> 00:37:13.300
Well, before you get too excited,


00:37:13.300 --> 00:37:17.740
There's only 32 in C++, so we've got a bit of way to go.


00:37:17.740 --> 00:37:21.980
- Yeah, but it's going in the right direction for sure.


00:37:21.980 --> 00:37:26.180
I'm sure some people out there listening just say like,


00:37:26.180 --> 00:37:28.220
"Okay, well, it's half the size roughly,


00:37:28.220 --> 00:37:29.500
and it's gonna be less than that."


00:37:29.500 --> 00:37:32.740
So yay, we can use less memory,


00:37:32.740 --> 00:37:35.060
but maybe you could talk a little bit


00:37:35.060 --> 00:37:39.660
about how that affects things like L1, L2, L3 cache hits


00:37:39.660 --> 00:37:41.860
and other sort of,


00:37:41.860 --> 00:37:44.740
It's more important than just, I need less RAM, right?


00:37:44.740 --> 00:37:45.580
- Yeah, yeah.


00:37:45.580 --> 00:37:47.380
So there's two things that happen.


00:37:47.380 --> 00:37:49.380
There's, yeah, there's things are faster


00:37:49.380 --> 00:37:51.320
because the hardware is just happier.


00:37:51.320 --> 00:37:54.460
If you pack everything together, it's in a high level cache.


00:37:54.460 --> 00:37:56.980
So you're not getting these sort of long pauses


00:37:56.980 --> 00:37:58.320
as you hit main memory.


00:37:58.320 --> 00:38:02.260
And the other thing is just the data structures are,


00:38:02.260 --> 00:38:04.800
because there's less of them, there's less indirection.


00:38:04.800 --> 00:38:08.500
So for example, to load an attribute,


00:38:08.500 --> 00:38:11.140
we can, we've got it down for basically an old,


00:38:11.140 --> 00:38:14.980
older versions of Python, it was effectively five memory reads.


00:38:14.980 --> 00:38:16.420
And they were dependent memory reads.


00:38:16.420 --> 00:38:18.420
You have to read one before the next one and so on.


00:38:18.420 --> 00:38:19.460
- Right, right.


00:38:19.460 --> 00:38:22.740
Go to the object, find its dictionary.


00:38:22.740 --> 00:38:24.340
Find the pointer that's in the dictionary


00:38:24.340 --> 00:38:25.620
and then go to that, right?


00:38:25.620 --> 00:38:27.540
- Yeah, yeah, they're very much that.


00:38:27.540 --> 00:38:29.380
And that's down to more or less two now.


00:38:29.380 --> 00:38:32.820
So, I mean, obviously there's still


00:38:32.820 --> 00:38:34.020
interpretive overhead on that.


00:38:34.020 --> 00:38:38.500
So it's not quite that much faster,


00:38:38.500 --> 00:38:39.620
but it's getting there.


00:38:39.620 --> 00:38:43.700
So yeah, there's a day structures and end of the frames,


00:38:43.700 --> 00:38:48.300
the Python frames, every time you call a Python function,


00:38:48.300 --> 00:38:50.540
we used to just allocate a heap object for the frame


00:38:50.540 --> 00:38:52.380
and all this stuff would go in there.


00:38:52.380 --> 00:38:56.460
And now they're all basically in a big contiguous


00:38:56.460 --> 00:38:57.500
sort of block of memory.


00:38:57.500 --> 00:39:01.740
So it's just bumping a pointer rather than allocating,


00:39:01.740 --> 00:39:03.080
which is also faster.


00:39:03.080 --> 00:39:05.620
And frames are just more anyway,


00:39:05.620 --> 00:39:08.140
because of the zero cost exceptions,


00:39:08.140 --> 00:39:13.140
which I think we mentioned on the release thing.


00:39:13.140 --> 00:39:17.100
>> Yeah. Well, let's tell people about zero-cost exceptions.


00:39:17.100 --> 00:39:17.460
>> Okay.


00:39:17.460 --> 00:39:18.100
>> Zero-cost.


00:39:18.100 --> 00:39:19.300
>> You shouldn't have to pay for


00:39:19.300 --> 00:39:20.860
errors if you're not raising errors, right?


00:39:20.860 --> 00:39:23.300
>> Yeah. That's the idea and that's why they're called zero-cost.


00:39:23.300 --> 00:39:25.340
But zero-cost is in quotes in this.


00:39:25.340 --> 00:39:28.700
The reason for that is that's the name it has got.


00:39:28.700 --> 00:39:30.540
They're definitely not zero-cost.


00:39:30.540 --> 00:39:34.540
The idea is that they're pretty low cost if you don't have an exception,


00:39:34.540 --> 00:39:36.860
but they tend to be even more expensive if you do get


00:39:36.860 --> 00:39:41.820
exception because you have to do more lookup. But the important thing here is that just there was


00:39:41.820 --> 00:39:46.780
lots of runtime information we need to maintain and we don't now. So that again shrinks the frames


00:39:46.780 --> 00:39:52.460
and just makes calls faster because calls in Python were notoriously slow. So that's one


00:39:52.460 --> 00:40:00.860
thing we've sped up significantly. Yeah so the idea was in previous releases of Python, if you


00:40:00.860 --> 00:40:05.340
just enter a try block even if it was successful there was a little bit of overhead to set up the


00:40:05.340 --> 00:40:09.260
mechanisms of potentially handling the errors and the information you needed, right?


00:40:09.260 --> 00:40:16.940
Yeah, and this wasn't just that, right? Yeah, I mean it's actually not so much that overhead as


00:40:16.940 --> 00:40:22.140
just the space you had to put that data in had to be allocated every time you made a call,


00:40:22.140 --> 00:40:26.780
in case there was an exception. And then we had to, it was massively over allocated to the amount


00:40:26.780 --> 00:40:33.500
of space anyone ever needed. So just that was the big sort of advantage. Nice, yeah, this is


00:40:33.500 --> 00:40:39.420
fantastic. You don't want to discourage people from putting proper air handling in their code.


00:40:39.420 --> 00:40:45.180
Kharit, what do you think? I see your name on this feature here in GitHub.


00:40:45.180 --> 00:40:52.460
What are your thoughts on it? - Yeah, I think it's cool.


00:40:52.460 --> 00:41:02.700
It was a nice touch that Mark implemented it between when I wrote the prototype for


00:41:02.700 --> 00:41:11.260
exception groups and when the PEP was approved. So that got in the way a little bit, but it was good.


00:41:11.260 --> 00:41:17.180
I got intimately acquainted with zero-cost exceptions through that exercise.


00:41:17.180 --> 00:41:20.220
Well, it's zero cost for some people.


00:41:20.220 --> 00:41:30.460
Yeah, I tease Mark a lot about that, but no, I think it's a cool feature. And I mean,


00:41:32.060 --> 00:41:34.460
I followed up on that.


00:41:34.460 --> 00:41:37.860
We now have, after we removed that,


00:41:37.860 --> 00:41:40.160
we still had a, I was talking about this on Monday,


00:41:40.160 --> 00:41:43.140
we had a jump over the exception handler.


00:41:43.140 --> 00:41:45.740
And then I told, wait a minute, there's a jump.


00:41:45.740 --> 00:41:46.580
It's not zero.


00:41:46.580 --> 00:41:48.980
You have to jump over the exception handler


00:41:48.980 --> 00:41:50.700
if there's no exception.


00:41:50.700 --> 00:41:53.740
So now we have, we did,


00:41:53.740 --> 00:41:58.780
we identify exception handlers as called blocks.


00:41:58.780 --> 00:42:01.000
And before we lay out the code of the function,


00:42:01.000 --> 00:42:03.420
we put all the cold blocks in the end.


00:42:03.420 --> 00:42:04.940
So now if there's no exception,


00:42:04.940 --> 00:42:08.340
there isn't even an exception handler to jump over


00:42:08.340 --> 00:42:10.360
that would be in 3.12.


00:42:10.360 --> 00:42:11.440
So,


00:42:11.440 --> 00:42:12.280
- Excellent.


00:42:12.280 --> 00:42:13.120
- Yeah, this is


00:42:13.120 --> 00:42:14.760
- You made zero cost even faster.


00:42:14.760 --> 00:42:15.600
So now it's


00:42:15.600 --> 00:42:17.620
- I made zero even smaller, yeah.


00:42:17.620 --> 00:42:21.760
- It's asymptotically approaching zero.


00:42:21.760 --> 00:42:26.920
- Yeah, so, but it's kind of nice that we have this notion


00:42:26.920 --> 00:42:28.360
of cold blocks and hot blocks


00:42:28.360 --> 00:42:30.920
and we can maybe do other things with it.


00:42:30.920 --> 00:42:35.920
It's kind of nice that all the happy, the fast code


00:42:35.920 --> 00:42:39.660
is kind of in the beginning of the functions


00:42:39.660 --> 00:42:40.780
bytecode block.


00:42:40.780 --> 00:42:45.420
And in terms of caches and all that, you don't have to,


00:42:45.420 --> 00:42:47.620
I think it will bring a few benefits


00:42:47.620 --> 00:42:50.200
beyond just not having to jump.


00:42:50.200 --> 00:42:51.780
- Yeah, yeah, this is excellent.


00:42:51.780 --> 00:42:54.460
It's a really great feature and pretty straightforward.


00:42:54.460 --> 00:42:58.060
All right, let's, Brent, tell us about


00:42:58.060 --> 00:42:59.980
the specializing adaptive interpreter.


00:42:59.980 --> 00:43:01.180
That's a big deal.


00:43:01.180 --> 00:43:04.540
You and I spoke about that about six weeks ago, I think.


00:43:04.540 --> 00:43:06.380
- Yeah, yeah.


00:43:06.380 --> 00:43:09.500
Basically, the headline is the bytecode changes


00:43:09.500 --> 00:43:11.800
while it's running to adapt to your code,


00:43:11.800 --> 00:43:12.640
which is really neat.


00:43:12.640 --> 00:43:17.500
So it's kind of finding places where we can


00:43:17.500 --> 00:43:20.420
do the same thing, but using less work


00:43:20.420 --> 00:43:22.760
by like cheating a little bit.


00:43:22.760 --> 00:43:25.780
But cheating in a way that is not visible at all.


00:43:25.780 --> 00:43:30.780
So a good example is something like a global load,


00:43:30.780 --> 00:43:33.400
or a load from the built-in.


00:43:33.400 --> 00:43:35.500
So if I'm looking up like the len function,


00:43:35.500 --> 00:43:39.260
that requires two dictionary lookups.


00:43:39.260 --> 00:43:41.400
Every time I wanna look at the len function anywhere,


00:43:41.400 --> 00:43:43.100
I first need to check the global namespace,


00:43:43.100 --> 00:43:44.820
and that's gonna be a failed lookup.


00:43:44.820 --> 00:43:46.620
Then I need to check the built-ins dictionary,


00:43:46.620 --> 00:43:48.440
and that's gonna be a successful lookup.


00:43:48.440 --> 00:43:51.820
So every time I wanna use len, or range, or list,


00:43:51.820 --> 00:43:53.820
or any of those built-ins,


00:43:53.820 --> 00:43:56.220
that's the cost that I have to pay.


00:43:56.220 --> 00:44:00.500
But people don't change the global namespace that often.


00:44:00.500 --> 00:44:03.180
And people change the built-ins namespace even less often,


00:44:03.180 --> 00:44:06.220
or at least they shouldn't be changing it very often.


00:44:06.220 --> 00:44:08.020
- I'm gonna make false true and true false.


00:44:08.020 --> 00:44:09.220
Let's see what that does.


00:44:09.220 --> 00:44:11.620
- Yeah.


00:44:11.620 --> 00:44:15.780
And so, you know, you can make these observations


00:44:15.780 --> 00:44:18.860
where it's like, okay, well, if the set of keys


00:44:18.860 --> 00:44:21.340
in the global namespace hasn't changed since last time


00:44:21.340 --> 00:44:22.980
this bytecode instruction ran,


00:44:22.980 --> 00:44:24.900
then I know that that lookup's going to fail,


00:44:24.900 --> 00:44:27.660
because if it failed last time and the keys are the same,


00:44:27.660 --> 00:44:29.420
then it's going to fail this time as well.


00:44:29.420 --> 00:44:31.340
So we can just skip that.


00:44:31.340 --> 00:44:34.380
And same for the built-ins dictionary.


00:44:34.380 --> 00:44:39.740
If we know that the keys in that dictionary haven't changed,


00:44:39.740 --> 00:44:41.660
that actually means that the internal layout


00:44:41.660 --> 00:44:43.100
of the dictionary is the same.


00:44:43.100 --> 00:44:45.980
And we don't even need to look up


00:44:45.980 --> 00:44:47.660
len in the built-ins dictionary.


00:44:47.660 --> 00:44:49.820
We can reach directly to the last location


00:44:49.820 --> 00:44:53.180
where it was before and give you that instead.


00:44:53.180 --> 00:44:56.420
And so you'll often see in a lot of code,


00:44:56.420 --> 00:45:00.340
as like a older code is a kind of a micro optimization.


00:45:00.340 --> 00:45:03.220
Whenever someone was using a built-in


00:45:03.220 --> 00:45:05.280
in like a very hot Python loop,


00:45:05.280 --> 00:45:08.340
sometimes you'd see them like do this kind of quark trick


00:45:08.340 --> 00:45:10.420
where they make it a local variable by saying like


00:45:10.420 --> 00:45:12.460
len equals len or something like that


00:45:12.460 --> 00:45:14.740
as part of the functions arguments


00:45:14.740 --> 00:45:17.260
so that you turn it into a fast local load.


00:45:17.260 --> 00:45:20.620
and what we've essentially done is, you know,


00:45:20.620 --> 00:45:24.740
made ugly acts like that totally unnecessary.


00:45:24.740 --> 00:45:28.560
- Yeah, you do that behind the scenes transparently, yeah.


00:45:28.560 --> 00:45:31.380
- Exactly, and so that's just, you know, one example.


00:45:31.380 --> 00:45:34.860
We've done tons of specializations for all sorts of things,


00:45:34.860 --> 00:45:37.620
ranging from calls to attribute lookups,


00:45:37.620 --> 00:45:39.460
to attribute stores, et cetera.


00:45:39.460 --> 00:45:43.840
So yeah, no, it's a really, really powerful thing.


00:45:45.100 --> 00:45:50.100
The PEP was, what was it, 569, I think?


00:45:50.100 --> 00:45:54.300
Yeah, Mark wrote it.


00:45:54.300 --> 00:45:55.140
It was 659.


00:45:55.140 --> 00:45:57.800
- 659, almost there.


00:45:57.800 --> 00:46:00.540
- Yeah, so this interpreter is Mark's baby.


00:46:00.540 --> 00:46:02.740
He could tell you much more about it than I could.


00:46:02.740 --> 00:46:05.180
- Nice, I do wanna give you a chance to give,


00:46:05.180 --> 00:46:06.180
yeah, I just wanna give you a chance


00:46:06.180 --> 00:46:08.100
to give a shout out about Specialist.


00:46:08.100 --> 00:46:10.900
- Yeah, yeah, so this is why I was on your show


00:46:10.900 --> 00:46:11.860
a couple weeks ago.


00:46:13.060 --> 00:46:17.860
So looking at bytecode disassemblies is not fun.


00:46:17.860 --> 00:46:21.340
And so one thing that's kind of cool


00:46:21.340 --> 00:46:24.380
is if you upgrade to Python 3.11, you run your code


00:46:24.380 --> 00:46:28.420
and you saw it got 10%, 20%, 30% faster,


00:46:28.420 --> 00:46:32.060
you might be wondering, OK, where did it get faster?


00:46:32.060 --> 00:46:34.260
What is faster about my code?


00:46:34.260 --> 00:46:39.020
And so specialist is basically a package that I made.


00:46:39.020 --> 00:46:40.100
It's pip installable.


00:46:40.100 --> 00:46:41.500
It only works on 3.11.


00:46:41.500 --> 00:46:44.880
And basically, if you run your code using specialist instead


00:46:44.880 --> 00:46:46.320
of Python--


00:46:46.320 --> 00:46:50.600
so you just type specialist myproject.py or whatever--


00:46:50.600 --> 00:46:54.640
it will open a web browser and show you your code,


00:46:54.640 --> 00:46:56.840
but color highlighted to show you


00:46:56.840 --> 00:46:59.920
where the interpreter was able to specialize your code,


00:46:59.920 --> 00:47:01.800
where it wasn't.


00:47:01.800 --> 00:47:02.920
And that's really neat.


00:47:02.920 --> 00:47:05.140
So you can see, oh, actually, these


00:47:05.140 --> 00:47:06.840
are the attribute loads that got faster.


00:47:06.840 --> 00:47:09.720
These are the places where my global loads are being cached.


00:47:09.720 --> 00:47:11.200
That's what I mean.


00:47:11.200 --> 00:47:12.040
- Yeah, that's awesome.


00:47:12.040 --> 00:47:13.440
Yeah, this is a really cool project.


00:47:13.440 --> 00:47:16.160
And it has some proactive features,


00:47:16.160 --> 00:47:19.600
not just informational aspects, I think anyway.


00:47:19.600 --> 00:47:21.360
You know, if you run a profiler,


00:47:21.360 --> 00:47:24.420
it'll show you where your code's spending time.


00:47:24.420 --> 00:47:27.400
But it doesn't mean you should go change everything


00:47:27.400 --> 00:47:28.280
to make it faster.


00:47:28.280 --> 00:47:29.840
You should look at like, oh, this loop,


00:47:29.840 --> 00:47:31.860
or this one function is like the thing


00:47:31.860 --> 00:47:33.280
that maybe we should think about


00:47:33.280 --> 00:47:35.060
slightly changing the algorithm


00:47:35.060 --> 00:47:37.440
or the way we do a loop or something.


00:47:37.440 --> 00:47:38.720
And it's a little bit similar here


00:47:38.720 --> 00:47:41.800
because the specializing adaptive interpreter


00:47:41.800 --> 00:47:43.460
only specializes some things,


00:47:43.460 --> 00:47:47.560
like it doesn't specialize floats interacting with ints


00:47:47.560 --> 00:47:52.600
or those types of things, or I think division as well.


00:47:52.600 --> 00:47:54.000
And so there's certain ways you might be able


00:47:54.000 --> 00:47:56.700
to slightly change inside of a really hot loop,


00:47:56.700 --> 00:48:00.520
make something a float ahead of time


00:48:00.520 --> 00:48:01.720
if you know it's gonna be involved


00:48:01.720 --> 00:48:04.120
in floating point operations, right?


00:48:04.120 --> 00:48:07.740
- I think, yeah, the idea is that this is show us


00:48:07.740 --> 00:48:09.860
how we can fix things so that you don't need


00:48:09.860 --> 00:48:11.060
to mess with your code.


00:48:11.060 --> 00:48:14.420
- I see, so this is in the future.


00:48:14.420 --> 00:48:16.020
Okay, yeah, awesome.


00:48:16.020 --> 00:48:18.380
- I would not necessarily encourage people


00:48:18.380 --> 00:48:20.900
to start tuning individual bytecode instructions


00:48:20.900 --> 00:48:21.740
in their code.


00:48:21.740 --> 00:48:22.560
- Right.


00:48:22.560 --> 00:48:24.220
- Dude, they already have limitations.


00:48:24.220 --> 00:48:26.340
- They already have limitations, you don't see.


00:48:26.340 --> 00:48:27.340
- You don't mean I need to,


00:48:27.340 --> 00:48:29.700
I gotta take all those decimal points back out of my code?


00:48:29.700 --> 00:48:30.660
No, just kidding.


00:48:30.660 --> 00:48:33.420
- Yeah, I wanna get every single bytecode instruction green.


00:48:33.420 --> 00:48:36.180
No, yeah, no, it is, you know,


00:48:36.180 --> 00:48:37.660
some things will never specialize,


00:48:37.660 --> 00:48:39.500
And that's just an artifact of programs.


00:48:39.500 --> 00:48:43.540
But if we can specialize enough, and we typically do,


00:48:43.540 --> 00:48:46.980
out of one line, maybe 20 bytecode instructions,


00:48:46.980 --> 00:48:51.500
if four of them get specialized successfully and two of them


00:48:51.500 --> 00:48:53.500
don't, generally that would still be fast.


00:48:53.500 --> 00:48:56.380
- Do you know what you should do for April Fool?


00:48:56.380 --> 00:48:58.820
Like, you should do a Python spline that


00:48:58.820 --> 00:49:01.380
shows you the percentage of specialized instructions


00:49:01.380 --> 00:49:02.380
in your code.


00:49:02.380 --> 00:49:04.300
And people can fix the percentage.


00:49:04.300 --> 00:49:06.300
So they can say, fail my test suite


00:49:06.300 --> 00:49:09.380
if my code is not specialized more than 50%.


00:49:09.380 --> 00:49:12.660
- If you de-specialize it, it's like a performance regret.


00:49:12.660 --> 00:49:14.020
- Just don't say anything, drop it.


00:49:14.020 --> 00:49:16.220
- Yeah, it's like a coverage thing.


00:49:16.220 --> 00:49:18.380
Yeah, no, I was kind of thinking about this.


00:49:18.380 --> 00:49:20.420
So Pablo can tell you more about this,


00:49:20.420 --> 00:49:23.220
but his cool new tracebacks,


00:49:23.220 --> 00:49:27.780
the whole reason Specialists is able to do these cool,


00:49:27.780 --> 00:49:29.900
you know, column level highlighting of your source code


00:49:29.900 --> 00:49:33.220
is because we do have that fine-grained position information


00:49:33.220 --> 00:49:34.060
under the hood.


00:49:34.060 --> 00:49:38.060
We kind of just piggybacked on that feature in order to give you that.


00:49:38.060 --> 00:49:43.860
But I was kind of thinking another thing, another April Fool's project could be, you


00:49:43.860 --> 00:49:46.380
know, column level coverage information.


00:49:46.380 --> 00:49:49.620
So to get to 100% coverage, you have to cover every single column in your code.


00:49:49.620 --> 00:49:50.620
Exactly.


00:49:50.620 --> 00:49:52.620
I feel like people might take that too seriously.


00:49:52.620 --> 00:49:56.460
Even the white space, all this white space is not covered.


00:49:56.460 --> 00:49:57.460
Yeah.


00:49:57.460 --> 00:50:00.180
You think you're intense by having branch coverage turned on, just wait until you have


00:50:00.180 --> 00:50:01.180
column coverage turned on.


00:50:01.180 --> 00:50:02.180
Yeah.


00:50:02.180 --> 00:50:04.740
white spaces per line, so you got to call that a lot.


00:50:04.740 --> 00:50:07.740
All right. I think that's a perfect segue over to


00:50:07.740 --> 00:50:10.740
one of the most tangible contributions


00:50:10.740 --> 00:50:13.740
from Pablo here. Maybe tell us about this


00:50:13.740 --> 00:50:16.740
new fine-grained error locations and tracebacks.


00:50:16.740 --> 00:50:19.740
This is fantastic. This will save people being


00:50:19.740 --> 00:50:22.740
into buggers or rewriting their code


00:50:22.740 --> 00:50:25.740
with tons of print statements to figure out what's going on, I think.


00:50:25.740 --> 00:50:28.740
>> Yeah, thank you very much. We put a lot of effort


00:50:28.740 --> 00:50:31.500
I'm not a big developer into this.


00:50:31.500 --> 00:50:35.000
So this is, I don't even remember my PEP,


00:50:35.000 --> 00:50:37.060
so I don't know, it's PEP something something,


00:50:37.060 --> 00:50:39.060
and it has a horrendous name, as I always--


00:50:39.060 --> 00:50:41.340
- 657 and, let's see.


00:50:41.340 --> 00:50:42.500
- 657, thanks.


00:50:42.500 --> 00:50:46.540
- Include fine grained error locations and tracebacks.


00:50:46.540 --> 00:50:48.960
- Yeah, the worst name.


00:50:48.960 --> 00:50:50.660
I think I was talking with Mark


00:50:50.660 --> 00:50:52.240
in the Python Core Developer Spring,


00:50:52.240 --> 00:50:56.080
and he was saying, what it means, fine grained?


00:50:56.080 --> 00:50:58.080
Like, you know, like, is this very fine grained?


00:50:58.080 --> 00:51:01.640
Like, so I think we are renaming the PEP to fancy trace bugs.


00:51:01.640 --> 00:51:03.680
I think that's much better.


00:51:03.680 --> 00:51:06.780
Anyway, so this is a project I worked together


00:51:06.780 --> 00:51:09.480
with Batuhanta Skya and Omar Askar.


00:51:09.480 --> 00:51:10.680
So kudos to them as well,


00:51:10.680 --> 00:51:13.560
because they participated equally on this.


00:51:13.560 --> 00:51:17.800
And the idea is that we were like,


00:51:17.800 --> 00:51:20.900
we started this project to make, you know,


00:51:20.900 --> 00:51:23.080
to improve the error messages in the interpreter


00:51:23.080 --> 00:51:25.540
and the general experience,


00:51:25.540 --> 00:51:28.300
Not only for people, because when people talk about this,


00:51:28.300 --> 00:51:32.380
they normally refer to people starting to learn Python.


00:51:32.380 --> 00:51:34.740
But to be honest, most of these things


00:51:34.740 --> 00:51:37.380
also affect people that are experts.


00:51:37.380 --> 00:51:40.580
I always say that when I implemented the suggestions,


00:51:40.580 --> 00:51:42.380
I was the first one benefiting from them,


00:51:42.380 --> 00:51:43.820
because I make a lot of typos.


00:51:43.820 --> 00:51:46.660
And it says, oh, but you mean this.


00:51:46.660 --> 00:51:51.220
So the idea that we have is that most of the time,


00:51:51.220 --> 00:51:52.700
the lack of--


00:51:52.700 --> 00:51:55.900
the interpreter shows you the position when the error happens,


00:51:55.900 --> 00:51:59.340
but it's quite limited because most of the time,


00:51:59.340 --> 00:52:03.180
people tend to have, due to Python flexible syntax,


00:52:03.180 --> 00:52:06.380
a huge amount of complexity even in a single line.


00:52:06.380 --> 00:52:09.460
In the pub, there is a bunch of examples,


00:52:09.460 --> 00:52:12.100
like you access a bunch of keys in a dictionary


00:52:12.100 --> 00:52:15.060
and some of them doesn't work or is not there or is none


00:52:15.060 --> 00:52:17.700
or something like that, and then it fails.


00:52:17.700 --> 00:52:21.140
Or sometimes you have several function calls


00:52:21.140 --> 00:52:23.140
or several additions.


00:52:23.140 --> 00:52:26.300
And it's quite difficult, and most of the time,


00:52:26.300 --> 00:52:30.500
fixing these things involve going into a debugger, like PDB,


00:52:30.500 --> 00:52:33.340
and then trying to inspect every single object and say,


00:52:33.340 --> 00:52:36.580
"Okay, this dictionary doesn't have this key at this level."


00:52:36.580 --> 00:52:38.980
And that sucks.


00:52:38.980 --> 00:52:41.980
It's not good, because debuggers are cool,


00:52:41.980 --> 00:52:45.060
but it's cooler not to use them, right?


00:52:45.060 --> 00:52:48.060
And we thought, "What can we do here?"


00:52:48.060 --> 00:52:51.500
And we arrived to this idea, actually,


00:52:51.500 --> 00:52:54.140
also to mention everyone involved.


00:52:54.140 --> 00:52:57.980
This was originally inspired by some kind of prototype


00:52:57.980 --> 00:53:01.500
that Carl from the PyPi team made very long ago,


00:53:01.500 --> 00:53:06.020
when he saw a kind of minimal version of this.


00:53:06.020 --> 00:53:08.860
And then I said, "Okay, can we do this?"


00:53:08.860 --> 00:53:12.620
And what we do now is that we propagate,


00:53:12.620 --> 00:53:15.900
because the parser, our super cool spec parser,


00:53:16.620 --> 00:53:20.220
knows the position of all the tokens and things like that.


00:53:20.220 --> 00:53:23.320
So we are propagating that information


00:53:23.320 --> 00:53:24.780
through the interpreter.


00:53:24.780 --> 00:53:27.540
And we store this information now in code objects.


00:53:27.540 --> 00:53:29.220
So a side effect of this PEP actually


00:53:29.220 --> 00:53:31.540
is that code objects are slightly bigger,


00:53:31.540 --> 00:53:33.260
although because code objects don't


00:53:33.260 --> 00:53:35.900
tend to be a huge percentage of your application,


00:53:35.900 --> 00:53:37.380
it doesn't really matter that much.


00:53:37.380 --> 00:53:38.780
Maybe PYC files are a bit bigger,


00:53:38.780 --> 00:53:42.700
but you have a lot of disk space, I'm sure.


00:53:42.700 --> 00:53:45.660
And the idea is that we store this information


00:53:45.660 --> 00:53:46.420
in code objects.


00:53:46.420 --> 00:53:48.300
So when you raise an exception, we say,


00:53:48.300 --> 00:53:52.060
"What is the instruction that raised this exception?"


00:53:52.060 --> 00:53:54.420
And then once we know which is the instruction


00:53:54.420 --> 00:53:56.180
that raised the exception, then we go and say,


00:53:56.180 --> 00:53:58.820
"Okay, what is the position information


00:53:58.820 --> 00:54:00.540
that generated this instruction?"


00:54:00.540 --> 00:54:02.380
Because we propagated it, we know.


00:54:02.380 --> 00:54:06.580
And then we can say, "Okay, here is kind of like the lines,


00:54:06.580 --> 00:54:09.740
the columns that this instruction spans."


00:54:09.740 --> 00:54:14.660
So that kind of allows us to underline the specific location.


00:54:14.660 --> 00:54:16.380
But we go a bit further.


00:54:16.380 --> 00:54:17.780
Sorry, go ahead, Michael.


00:54:17.780 --> 00:54:20.020
- I was gonna say, this is super valuable.


00:54:20.020 --> 00:54:21.860
The example you have in the PEP is,


00:54:21.860 --> 00:54:25.660
you have a dictionary, you say bracket of key A,


00:54:25.660 --> 00:54:27.900
and then the thing that comes back is another dictionary.


00:54:27.900 --> 00:54:29.900
So you say bracket B, and then another dictionary,


00:54:29.900 --> 00:54:31.460
bracket C, and then bracket D.


00:54:31.460 --> 00:54:34.480
And in 3.10, the error's just like,


00:54:34.480 --> 00:54:37.140
if one of those is none,


00:54:37.140 --> 00:54:40.540
say none type is object is not subscriptable,


00:54:40.540 --> 00:54:43.380
or maybe does not contain that key,


00:54:43.380 --> 00:54:47.500
or some weird thing like that, but is it A, B, C, or D?


00:54:47.500 --> 00:54:48.580
You have no idea.


00:54:48.580 --> 00:54:50.620
You're in a debugger printing them out separately


00:54:50.620 --> 00:54:53.420
or something, but now it just goes, nope, it's the C one.


00:54:53.420 --> 00:54:56.500
That's, it's the third subscript one.


00:54:56.500 --> 00:54:58.380
And that's just, just jump right to it.


00:54:58.380 --> 00:55:01.580
- Yeah, also this error, non-type is not subscriptable.


00:55:01.580 --> 00:55:04.100
It's kind of like, thanks for the info.


00:55:04.100 --> 00:55:06.500
Like, it's like, you know, water is wet.


00:55:06.500 --> 00:55:07.940
Okay, thanks.


00:55:07.940 --> 00:55:09.540
It's not super useful.


00:55:09.540 --> 00:55:11.380
No, exactly, so tell me when it's going to rain.


00:55:11.380 --> 00:55:14.940
Anyway, we did the first version of this


00:55:14.940 --> 00:55:19.940
and then we realized that there was some kind of like,


00:55:19.940 --> 00:55:22.000
it was cool, most people really like it,


00:55:22.000 --> 00:55:24.860
but especially for instance with the example


00:55:24.860 --> 00:55:28.000
with the dictionary that has many dictionaries inside,


00:55:28.000 --> 00:55:30.400
there was some confusion because it underlines


00:55:30.400 --> 00:55:34.780
the whole thing and then, you know the order of operations


00:55:34.780 --> 00:55:37.820
and also with complex mathematical expressions


00:55:37.820 --> 00:55:40.980
like you do A plus B plus C and the last addition fails,


00:55:40.980 --> 00:55:47.380
it needs to underline A+B+C because what happened is that it first added A+B and that gives you something


00:55:47.380 --> 00:55:53.060
but then you added to C and what happened is that the last addition failed but that includes A+B


00:55:53.060 --> 00:55:58.100
so you need to underline the whole thing. If you know the order of operations and I just underline


00:55:58.100 --> 00:56:03.780
A+B+C you know that what will fail is the last one because that's the last one that is executed


00:56:03.780 --> 00:56:08.660
but it's still confusing because you know specifically also with the dictionary people were saying yeah


00:56:08.660 --> 00:56:11.020
"Okay, but you're underlining three keys here,


00:56:11.020 --> 00:56:12.260
which is the one that failed."


00:56:12.260 --> 00:56:14.740
I mean, you can learn by experience that it's the last one,


00:56:14.740 --> 00:56:17.580
but it's kind of like, it was not a great experience.


00:56:17.580 --> 00:56:20.100
So we went a step further.


00:56:20.100 --> 00:56:23.340
So what we do is that once we know the kind of range


00:56:23.340 --> 00:56:26.020
in the line that shows the problem,


00:56:26.020 --> 00:56:29.420
we reparse that chunk of expression.


00:56:29.420 --> 00:56:30.980
And then we know, okay, so we know now


00:56:30.980 --> 00:56:33.300
that this expression has this AST.


00:56:33.300 --> 00:56:35.820
And then we analyze the AST, and then we say,


00:56:35.820 --> 00:56:41.620
"Okay, is this AST something that we can further, you know, improve the error message?"


00:56:41.620 --> 00:56:46.620
Like, for instance, is this AST a bunch of key access in a dictionary or a bunch of attribute access


00:56:46.620 --> 00:56:50.620
or a bunch of function calls or maybe binary operations?


00:56:50.620 --> 00:56:56.520
And if it's the case, then we use a specialized, like, you know, underlying, I don't know,


00:56:56.520 --> 00:56:59.020
tildes or squiggles or whatever it's called.


00:56:59.020 --> 00:57:05.220
And, you know, the dictionary ones have this different one that marks which key access it was known.


00:57:05.220 --> 00:57:08.100
the same thing for binary operations and things like that.


00:57:08.100 --> 00:57:10.700
So we do this extra step at the end


00:57:10.700 --> 00:57:14.020
that does a bunch of extra work, but it tries to improve


00:57:14.020 --> 00:57:16.820
even upon the underlying line


00:57:16.820 --> 00:57:20.220
just so we can offer even more rich information.


00:57:20.220 --> 00:57:23.060
And I'm quite happy. I'm very pleased about this.


00:57:23.060 --> 00:57:27.700
Sorry, Mark, but I think it's the best feature of 3.11.


00:57:27.700 --> 00:57:31.420
Yeah, this is probably the second stream when I said this,


00:57:31.420 --> 00:57:33.420
but it's true.


00:57:33.420 --> 00:57:35.300
- Totally, totally true, 100% true.


00:57:35.300 --> 00:57:37.600
So I don't know, I'm very excited about this.


00:57:37.600 --> 00:57:39.140
I literally use this every day.


00:57:39.140 --> 00:57:42.420
Today I was deploying Python 3.11, well, this week, sorry.


00:57:42.420 --> 00:57:44.140
I was deploying Python 3.11 at Bloomberg


00:57:44.140 --> 00:57:45.540
and something went wrong,


00:57:45.540 --> 00:57:47.540
and literally, this thing saved my day.


00:57:47.540 --> 00:57:50.860
This saved me to just log in to some forsaken machine


00:57:50.860 --> 00:57:52.260
and understanding what's going on.


00:57:52.260 --> 00:57:53.160
What about that?


00:57:53.160 --> 00:57:55.660
So super cool, very happy.


00:57:55.660 --> 00:57:57.660
I hope that everybody that uses this


00:57:57.660 --> 00:58:00.360
and is happy, reach to us and say, I am happy.


00:58:00.360 --> 00:58:02.700
Because normally people reach to us


00:58:02.700 --> 00:58:07.260
they are not happy. They say, "Mmm, evil core developers, you break everything." But instead


00:58:07.260 --> 00:58:13.100
of that, you should reach to us and say, "Nice." >> You should tweet at Pablo or something,


00:58:13.100 --> 00:58:16.380
though. Don't open issues saying you're happy. >> Exactly.


00:58:16.380 --> 00:58:22.220
>> Just tweet a couple of tildes, a few carrots, and a smiley face at him.


00:58:22.220 --> 00:58:27.340
>> Exactly. Tweet at happy@python.org. I will take that email address.


00:58:29.020 --> 00:58:32.560
But yeah, it's that. We improve it a bit further.


00:58:32.560 --> 00:58:34.560
One of the things that happens is that,


00:58:34.560 --> 00:58:38.820
you know, like, sometimes if the whole line is wrong,


00:58:38.820 --> 00:58:41.400
because, for instance, this example you have there,


00:58:41.400 --> 00:58:43.200
sorry, for the ones listening--


00:58:43.200 --> 00:58:46.160
- What I had before, yep. - We have here some--


00:58:46.160 --> 00:58:48.160
We are seeing some output, but that's not that. Don't worry.


00:58:48.160 --> 00:58:50.160
I will describe it. So, for instance,


00:58:50.160 --> 00:58:52.580
if you're calling a function,


00:58:52.580 --> 00:58:54.580
and that's the whole thing that is in the line,


00:58:54.580 --> 00:58:57.380
we used to underline the whole thing.


00:58:57.380 --> 00:59:00.820
So we'll say, OK, even if the whole line is failing,


00:59:00.820 --> 00:59:03.180
so it's not like a part of the line is failing,


00:59:03.180 --> 00:59:05.580
the whole thing is failing, we used to underline that.


00:59:05.580 --> 00:59:08.260
And that apparently is still on the PEP.


00:59:08.260 --> 00:59:10.140
Maybe I should change that, because it's not


00:59:10.140 --> 00:59:11.300
like that anymore.


00:59:11.300 --> 00:59:13.300
Because someone suggested-- I mean, come on.


00:59:13.300 --> 00:59:14.980
Like, if the whole line is failing,


00:59:14.980 --> 00:59:17.300
underlining the whole line is actually not that useful.


00:59:17.300 --> 00:59:20.460
And you're spending vertical space,


00:59:20.460 --> 00:59:22.260
so you need to scroll a lot.


00:59:22.260 --> 00:59:26.020
And at the beginning, I say, yeah, but this is inconsistent.


00:59:26.020 --> 00:59:26.820
I don't like it.


00:59:26.820 --> 00:59:30.820
and I pushed back a bit, but then more people say,


00:59:30.820 --> 00:59:31.700
Pablo, you're wrong.


00:59:31.700 --> 00:59:33.780
And then I say, OK, I'm wrong.


00:59:33.780 --> 00:59:38.420
And we improve this further.


00:59:38.420 --> 00:59:40.420
But don't take this as advice.


00:59:40.420 --> 00:59:43.860
Don't tell me that I'm wrong collectively, please.


00:59:43.860 --> 00:59:48.380
But right, so now if the whole line is underlined,


00:59:48.380 --> 00:59:50.380
we don't underline it, because it doesn't really


00:59:50.380 --> 00:59:51.980
add any new information.


00:59:51.980 --> 00:59:55.740
So only if a part of the line contains the error,


00:59:55.740 --> 01:00:00.580
not the whole line. So this means that we are not going to consume a lot of vertical


01:00:00.580 --> 01:00:05.880
space for no reason. And the last thing I wanted to say is that there is some people


01:00:05.880 --> 01:00:11.680
somewhere in the universe that may care about that extra disk space on their PYC files or


01:00:11.680 --> 01:00:17.460
they just really, really hate squiggles. I don't know if that is even physically possible,


01:00:17.460 --> 01:00:23.700
but there are very different and diverse set of people. So if you are one of those, there


01:00:23.700 --> 01:00:28.280
is a collection of different ways you can deactivate this feature. There is an


01:00:28.280 --> 01:00:34.600
environment variable with a super long name and there is a -x option when


01:00:34.600 --> 01:00:38.480
you launch the interpreter so you can say Python -x something something I


01:00:38.480 --> 01:00:43.260
don't know how it's called I think it's called null debug ranges. What about that?


01:00:43.260 --> 01:00:48.960
What an incredible naming. And then you set null debug ranges to 1 and it


01:00:48.960 --> 01:00:51.560
It deactivates the feature, incredible, like magic.


01:00:51.560 --> 01:00:54.920
It's gone and you can reclaim your PYC files


01:00:54.920 --> 01:00:56.600
and you can even generate PYC files


01:00:56.600 --> 01:01:00.440
without this information if when you're compiling PYC files


01:01:00.440 --> 01:01:04.160
you set this evil environment, but don't do that,


01:01:04.160 --> 01:01:06.280
listeners, don't do that, it's evil, don't do that.


01:01:06.280 --> 01:01:07.960
Just use it, it's great.


01:01:07.960 --> 01:01:10.260
- Yeah.


01:01:10.260 --> 01:01:15.120
- There's another kind of type of errors


01:01:15.120 --> 01:01:17.600
that I think we're gonna get is about edge cases


01:01:17.600 --> 01:01:20.940
where the compiler doesn't get the line numbers right,


01:01:20.940 --> 01:01:24.460
because all these kind of fine-grained locations,


01:01:24.460 --> 01:01:27.860
it's all new, and we're still adding up.


01:01:27.860 --> 01:01:29.700
- There is a front-future, I think,


01:01:29.700 --> 01:01:32.460
that you put a bunch of things with the front-future,


01:01:32.460 --> 01:01:34.180
it just complains on a random place.


01:01:34.180 --> 01:01:36.460
- Yeah, today I found that one,


01:01:36.460 --> 01:01:38.500
but I've been looking at the compiler


01:01:38.500 --> 01:01:41.700
and line numbers, location information,


01:01:41.700 --> 01:01:42.900
and it's a bit off here and there,


01:01:42.900 --> 01:01:47.900
And we have received bug reports from other people as well.


01:01:47.900 --> 01:01:49.500
If the range here doesn't look right,


01:01:49.500 --> 01:01:52.060
the range here looks too broad.


01:01:52.060 --> 01:01:55.060
So yeah, we're gonna be ironing that out,


01:01:55.060 --> 01:01:57.140
I guess for 3.12.


01:01:57.140 --> 01:01:59.140
- Yeah, it's really nice when people are using betas


01:01:59.140 --> 01:02:00.220
and release candidates though,


01:02:00.220 --> 01:02:02.220
because we were able to catch a lot of those


01:02:02.220 --> 01:02:05.860
before the release, because there were a couple people,


01:02:05.860 --> 01:02:07.300
I forget exactly the name of the project,


01:02:07.300 --> 01:02:09.620
but they were working on like a code animation tool


01:02:09.620 --> 01:02:11.700
where it animates your code while it's running.


01:02:11.700 --> 01:02:13.500
And they were using these new ranges


01:02:13.500 --> 01:02:15.420
to identify AST notes and stuff.


01:02:15.420 --> 01:02:18.140
And so they did this thing, I guess,


01:02:18.140 --> 01:02:20.140
where they run their tool on the entire standard library


01:02:20.140 --> 01:02:20.980
to make sure it's correct.


01:02:20.980 --> 01:02:22.700
And so we got a bunch of bug reports


01:02:22.700 --> 01:02:25.620
that basically say, oh, this column information


01:02:25.620 --> 01:02:27.940
is off for this weird multi-line attribute access


01:02:27.940 --> 01:02:28.780
or something.


01:02:28.780 --> 01:02:32.980
- If you recall, I think you fixed an error.


01:02:32.980 --> 01:02:36.260
That was super weird because it was like a method access,


01:02:36.260 --> 01:02:39.420
like my instance of the form.


01:02:39.420 --> 01:02:43.420
And if the method access has some vowel or something like that,


01:02:43.420 --> 01:02:44.900
it was wrong.


01:02:44.900 --> 01:02:48.140
And if you added some extra letter, it was fine.


01:02:48.140 --> 01:02:48.740
And that was--


01:02:48.740 --> 01:02:53.060
>>Yeah, it was like if you split your method access across two lines,


01:02:53.060 --> 01:03:01.500
if you do like x.method or x.method or x.method on three lines or two lines


01:03:01.500 --> 01:03:04.420
or something, the way we trace those lines,


01:03:04.420 --> 01:03:07.980
we always trace the method when we're actually loading the method,


01:03:07.980 --> 01:03:11.580
even if it's on a different line as like where the actual method load started.


01:03:11.580 --> 01:03:15.900
And then we were doing some weird math to like figure out where the dot is.


01:03:15.900 --> 01:03:17.900
So we would try to put it on the same line as the dot.


01:03:17.900 --> 01:03:18.700
>> Yeah, that was insane.


01:03:18.700 --> 01:03:21.180
>> So we would just like subtract one from the length of the name.


01:03:21.180 --> 01:03:23.260
And so there was all sorts of crazy stuff that.


01:03:23.260 --> 01:03:25.980
>> And that came from the grave because we fixed that.


01:03:25.980 --> 01:03:30.460
And then it was wrong again because like we were like miscalculating the name.


01:03:30.460 --> 01:03:32.500
Like it's just so much that is.


01:03:32.500 --> 01:03:33.180
>> Oh my goodness.


01:03:33.180 --> 01:03:35.500
>> Yeah, so all sorts of fun stuff like that.


01:03:35.500 --> 01:03:37.780
>> Yeah, amazing.


01:03:37.780 --> 01:03:41.580
Well, yeah, this is definitely one of the highlight features


01:03:41.580 --> 01:03:43.540
for sure, and also the performance work


01:03:43.540 --> 01:03:44.500
that you're all doing.


01:03:44.500 --> 01:03:46.580
All right, we're getting very, very short on time.


01:03:46.580 --> 01:03:49.020
So I think maybe a super, super lightning round here.


01:03:49.020 --> 01:03:53.860
Let me just say we also got TomaLib support built in.


01:03:53.860 --> 01:03:59.780
We've got the async.io task groups a la Trio Nurturies.


01:03:59.780 --> 01:04:02.860
We've got new features for atomic grouping


01:04:02.860 --> 01:04:05.860
and regular expressions.


01:04:05.860 --> 01:04:06.940
Let's see.


01:04:06.940 --> 01:04:09.680
A lot of type things have been added.


01:04:09.680 --> 01:04:13.820
So we've got the self-type, Baryatric, Generics,


01:04:13.820 --> 01:04:15.640
literal strings, which is very interesting.


01:04:15.640 --> 01:04:20.120
Lucas did a talk about that on the release live stream.


01:04:20.120 --> 01:04:23.000
Stuff for type dict and data class transformations.


01:04:23.000 --> 01:04:25.180
So great stuff.


01:04:25.180 --> 01:04:28.000
Now let's just really quickly round out.


01:04:28.000 --> 01:04:32.400
What's the Python 3.11 story for HighScript, Pyodide?


01:04:32.400 --> 01:04:35.140
Is there, do you have anyone out there know?


01:04:36.000 --> 01:04:37.660
I don't know, I suppose it works.


01:04:37.660 --> 01:04:40.720
- Tier two or tier three supported platform, right?


01:04:40.720 --> 01:04:45.720
- Yeah, so Christian Himes is the unsung hero of TypeScript,


01:04:45.720 --> 01:04:47.880
sorry, TypeScript, I'm sorry,


01:04:47.880 --> 01:04:52.440
is the unsung hero of X, whatever, like the WASI thing,


01:04:52.440 --> 01:04:54.760
so it's the WebAssembly, that's it, sorry.


01:04:54.760 --> 01:04:57.400
I say all the things that were not that.


01:04:57.400 --> 01:04:59.240
So he has been making a lot of improvements


01:04:59.240 --> 01:05:01.800
to the build process, which is not easy,


01:05:01.800 --> 01:05:04.000
so kudos to Christian Himes.


01:05:04.000 --> 01:05:05.840
If you're listening, you're great.


01:05:05.840 --> 01:05:10.840
And I suppose that PyScript can, through PyOlight,


01:05:10.840 --> 01:05:14.220
this is how many layers is this?


01:05:14.220 --> 01:05:18.080
So PyOlight through this can leverage all these improvements


01:05:18.080 --> 01:05:21.240
because I don't know how is the whole layer


01:05:21.240 --> 01:05:22.760
that we're thinking is working,


01:05:22.760 --> 01:05:25.280
but PyOlight has a bunch of patches


01:05:25.280 --> 01:05:27.120
that you need to modify CPython


01:05:27.120 --> 01:05:29.680
so it builds nicely on WebAssembly platforms.


01:05:29.680 --> 01:05:30.960
I don't know the details on that,


01:05:30.960 --> 01:05:33.320
I just know that some of them are okayish,


01:05:33.320 --> 01:05:36.280
Some of them are not okay and quite difficult to maintain.


01:05:36.280 --> 01:05:39.720
And Christian Hanks has been making a lot of great effort


01:05:39.720 --> 01:05:42.880
to change here and there, and put a lot of macros


01:05:42.880 --> 01:05:45.080
and if-else and things like that.


01:05:45.080 --> 01:05:48.460
So CPython builds easier.


01:05:48.460 --> 01:05:51.640
This probably translates that PyLite, I hope,


01:05:51.640 --> 01:05:56.280
kind of can consume this build in an easier way


01:05:56.280 --> 01:05:58.280
with less patches, and I suppose that translates


01:05:58.280 --> 01:06:03.280
into PyScript, just using the PyLite thing easier.


01:06:03.280 --> 01:06:07.080
But yeah, I don't think that there is a huge amount


01:06:07.080 --> 01:06:09.120
of improvements more than--


01:06:09.120 --> 01:06:11.200
we are working towards official support,


01:06:11.200 --> 01:06:13.800
as Bram was mentioning.


01:06:13.800 --> 01:06:15.120
We have this new tier system.


01:06:15.120 --> 01:06:17.200
It's super cool.


01:06:17.200 --> 01:06:20.280
>>And as an unrelated fun fact, Mike Drapu,


01:06:20.280 --> 01:06:22.640
one of the early developers of Pyotite,


01:06:22.640 --> 01:06:25.720
is actually managing our team at Microsoft.


01:06:25.720 --> 01:06:30.080
>>Oh, it's funny how the circle comes back around, indeed.


01:06:30.080 --> 01:06:32.920
>>How the turntables.


01:06:32.920 --> 01:06:34.080
- That's right.


01:06:34.080 --> 01:06:38.640
All right, y'all, we are out of time, but super exciting.


01:06:38.640 --> 01:06:40.080
I wish we had some champagne,


01:06:40.080 --> 01:06:41.800
and Pablo, we didn't even bring hats


01:06:41.800 --> 01:06:43.240
to celebrate Python 3.11,


01:06:43.240 --> 01:06:45.560
but I know everyone out there is extremely excited.


01:06:45.560 --> 01:06:47.800
- People cannot see, but I have a Python 3.11.


01:06:47.800 --> 01:06:51.400
- Yes, yeah, it's a great new logo for 3.11 and stuff.


01:06:51.400 --> 01:06:53.400
Not for, in general, but just for the release.


01:06:53.400 --> 01:06:54.840
It's awesome.


01:06:54.840 --> 01:06:56.000
All right, before we get out of here,


01:06:56.000 --> 01:06:57.800
let me just ask you one final question,


01:06:57.800 --> 01:06:59.420
and then we'll call it a show.


01:06:59.420 --> 01:07:01.880
Notable PyPI package,


01:07:01.880 --> 01:07:03.480
I simply want to give a shout out to,


01:07:03.480 --> 01:07:06.800
we'll go top to bottom in the picture here, Pablo.


01:07:06.800 --> 01:07:08.560
- Not all by a package.


01:07:08.560 --> 01:07:10.120
- Yeah, yeah, some library.


01:07:10.120 --> 01:07:11.480
- Bunch of spam.


01:07:11.480 --> 01:07:14.280
And I'm going to say memory, use memory.


01:07:14.280 --> 01:07:16.880
The one and only Python memory profiler.


01:07:16.880 --> 01:07:20.200
Solve your problems on production today with memory.


01:07:20.200 --> 01:07:23.040
- That and the underlying errors, you'll be all good.


01:07:23.040 --> 01:07:24.840
- Exactly, yeah, what a combination.


01:07:24.840 --> 01:07:27.460
- Arit, how about you?


01:07:28.760 --> 01:07:30.560
- Well, I've had some interaction


01:07:30.560 --> 01:07:32.520
with the author of bytecode recently,


01:07:32.520 --> 01:07:37.440
because I was looking at things to do in the testing


01:07:37.440 --> 01:07:39.540
and in the interpreter that are kind of like that.


01:07:39.540 --> 01:07:41.760
So this is a library you can kind of


01:07:41.760 --> 01:07:43.800
from Python write bytecode.


01:07:43.800 --> 01:07:47.880
And it's pretty neat.


01:07:47.880 --> 01:07:51.160
And it is struggling with zero cost exceptions,


01:07:51.160 --> 01:07:53.440
but it is what it is.


01:07:53.440 --> 01:07:56.080
- It's like a inline assembly, but for Python.


01:07:57.080 --> 01:07:59.500
- Yeah, it's like from a Python script,


01:07:59.500 --> 01:08:04.120
you can kind of write a bit of byte code


01:08:04.120 --> 01:08:06.440
and get it to, I don't know,


01:08:06.440 --> 01:08:08.160
do a lot of interesting stuff with it.


01:08:08.160 --> 01:08:09.000
- That's awesome.


01:08:09.000 --> 01:08:11.120
Brent, how about you?


01:08:11.120 --> 01:08:13.640
- Well, I'm partial towards specialist,


01:08:13.640 --> 01:08:15.540
but if I had to choose something else,


01:08:15.540 --> 01:08:20.960
speaking of speed, I really like the scaling profiler.


01:08:20.960 --> 01:08:22.960
I've been using it a lot of my own projects


01:08:22.960 --> 01:08:24.240
and it's awesome.


01:08:24.240 --> 01:08:26.680
I don't know how it's memory profiling compares to memory.


01:08:26.680 --> 01:08:30.400
I'm sure memory is better, but scaling is really nice


01:08:30.400 --> 01:08:35.400
for measuring the performance across both Python and C.


01:08:35.400 --> 01:08:40.880
- Excellent, Mark.


01:08:40.880 --> 01:08:42.480
- Well, it's not actually a PyPI package.


01:08:42.480 --> 01:08:44.320
I was gonna say the sys module,


01:08:44.320 --> 01:08:45.720
which is like the pretty much


01:08:45.720 --> 01:08:47.080
the most fundamental module going.


01:08:47.080 --> 01:08:49.960
But there's all sorts of fun things in there.


01:08:49.960 --> 01:08:52.360
You can change the recursion limit and see,


01:08:52.360 --> 01:08:53.200
you can muddle it.


01:08:53.200 --> 01:08:54.580
If you're interested in how Python works,


01:08:54.580 --> 01:08:56.640
it's actually quite a sort of fun thing to play with.


01:08:56.640 --> 01:08:58.420
So cool.


01:08:58.420 --> 01:08:59.300
Right on.


01:08:59.300 --> 01:09:00.440
All right.


01:09:00.440 --> 01:09:03.560
Well, thank you all for all the hard work.


01:09:03.560 --> 01:09:07.380
And I know there are many people who did a ton of work as well, who are not on the


01:09:07.380 --> 01:09:10.020
show here, but you can represent them as well.


01:09:10.020 --> 01:09:11.900
So thanks all for being here.


01:09:11.900 --> 01:09:13.740
final call to action.


01:09:13.740 --> 01:09:16.700
People want to get started at three 11, you know, is what do you tell them?


01:09:16.700 --> 01:09:19.020
Is it ready for them to get going?


01:09:19.020 --> 01:09:19.660
What do you think?


01:09:19.660 --> 01:09:21.580
It's awesome.


01:09:21.580 --> 01:09:22.080
Yeah.


01:09:22.080 --> 01:09:22.980
It's awesome.


01:09:23.100 --> 01:09:26.140
And also now 3.11 comes with a bunch of wheels


01:09:26.140 --> 01:09:29.380
for all your packages because there has been a lot of good work


01:09:29.380 --> 01:09:32.500
in the people of third-party libraries.


01:09:32.500 --> 01:09:35.300
And now that people are using CI build wheel,


01:09:35.300 --> 01:09:39.780
3.11 was released with wheels for NumPy and Pandas


01:09:39.780 --> 01:09:42.780
and a bunch of other things that previously was failing massively


01:09:42.780 --> 01:09:45.980
because nobody could compile them on their crappy laptop.


01:09:45.980 --> 01:09:48.780
But now you don't need that. You can just download them and it works.


01:09:48.780 --> 01:09:50.660
So just use 3.11. There is no reason.


01:09:52.620 --> 01:09:54.060
- Yeah, that's excellent. - That's just boring.


01:09:54.060 --> 01:09:55.580
That would be a reason, if you're boring


01:09:55.580 --> 01:09:58.100
and you don't want to use 3.11, then don't use it.


01:09:58.100 --> 01:10:00.140
- It didn't break anything, not even a package,


01:10:00.140 --> 01:10:01.460
much less GitHub.


01:10:01.460 --> 01:10:03.980
- Right. (laughs)


01:10:03.980 --> 01:10:05.980
- And we need more benchmarks.


01:10:05.980 --> 01:10:11.460
So that's how people can help us make things faster,


01:10:11.460 --> 01:10:12.300
is more benchmarks.


01:10:12.300 --> 01:10:15.100
So yeah, we have a,


01:10:15.100 --> 01:10:17.300
there's a sort of standard Python performance suite,


01:10:17.300 --> 01:10:20.060
but it's kind of a bunch of toy programs and so on.


01:10:20.060 --> 01:10:24.580
So if you've got something that might make a nice benchmark,


01:10:24.580 --> 01:10:27.420
some self-contained but realistic program,


01:10:27.420 --> 01:10:28.540
then yeah, let us know.


01:10:28.540 --> 01:10:32.140
>>All right.


01:10:32.140 --> 01:10:32.640
Cool.


01:10:32.640 --> 01:10:33.420
Well, thanks again.


01:10:33.420 --> 01:10:35.180
Great work on it.


01:10:35.180 --> 01:10:38.060
Cam Gerlach out in the audience says, yay, CI Build Wheel.


01:10:38.060 --> 01:10:38.980
Yeah, absolutely.


01:10:38.980 --> 01:10:39.740
Great stuff.


01:10:39.740 --> 01:10:43.140
So thanks again, everyone.


01:10:43.140 --> 01:10:45.740
I'm super excited to start in 3.11 myself.


01:10:45.740 --> 01:10:48.740
So yeah, it's great to have you here.


01:10:48.740 --> 01:10:50.360
Thank you.


01:10:50.360 --> 01:10:51.800
Bye all.


01:10:51.800 --> 01:10:52.460
Bye.


01:10:52.460 --> 01:11:02.460
[BLANK_AUDIO]

