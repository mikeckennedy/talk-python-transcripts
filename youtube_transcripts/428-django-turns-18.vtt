WEBVTT

00:00:00.000 --> 00:00:04.160
>> Will Carlton, welcome to Talk Python To Me.


00:00:04.160 --> 00:00:06.720
It's awesome to have you both back on the show.


00:00:06.720 --> 00:00:09.200
>> Thank you for having us on again, Michael.


00:00:09.200 --> 00:00:10.960
>> Yes, thank you. It's always fun.


00:00:10.960 --> 00:00:14.800
>> Yeah, it's always fun to have other podcasters on the show.


00:00:14.800 --> 00:00:18.440
You guys have your audio game dialed and it's all.


00:00:18.440 --> 00:00:20.640
>> There's a smoothness that comes with it, right?


00:00:20.640 --> 00:00:26.640
There's an understanding of the glitches too and just, yeah.


00:00:26.640 --> 00:00:29.320
>> Yes, exactly.


00:00:29.320 --> 00:00:33.920
Okay, so we'll talk a bit about your podcast in a moment.


00:00:33.920 --> 00:00:35.440
Maybe just do a quick introduction.


00:00:35.440 --> 00:00:38.960
I know people probably know you from your show Django Chat.


00:00:38.960 --> 00:00:41.440
They know you from being on Talk by Dawn previously,


00:00:41.440 --> 00:00:43.680
but for those who don't.


00:00:43.680 --> 00:00:45.280
Will, we'll go first.


00:00:45.280 --> 00:00:47.760
- Sure, so William Vincent.


00:00:47.760 --> 00:00:49.320
I have three books on Django,


00:00:49.320 --> 00:00:51.040
most notably Django for Beginners.


00:00:51.040 --> 00:00:53.080
I run a site, LearnDjango.com.


00:00:53.080 --> 00:00:55.560
I just got off three years being on the board of Django,


00:00:55.560 --> 00:00:57.200
so Django's run by a non-profit.


00:00:58.360 --> 00:01:01.480
I run a weekly newsletter on Django, Django News.


00:01:01.480 --> 00:01:04.920
Too many things.


00:01:04.920 --> 00:01:07.740
So yeah, most of my time is spent doing some consulting


00:01:07.740 --> 00:01:09.600
and a lot of teaching and learning about Django.


00:01:09.600 --> 00:01:11.640
So I'm very happy to be at that stage.


00:01:11.640 --> 00:01:13.600
- It's a good combination, right?


00:01:13.600 --> 00:01:14.680
- If you can make it work, it is.


00:01:14.680 --> 00:01:17.040
Yeah, you need that sort of cycle of,


00:01:17.040 --> 00:01:19.440
you know, I need to learn too and be interested.


00:01:19.440 --> 00:01:24.440
But I really, I like learning and teaching, so.


00:01:24.440 --> 00:01:27.000
- One of the challenges that I think people can fall into


00:01:27.000 --> 00:01:31.680
of the traps is if you just teach,


00:01:31.680 --> 00:01:35.120
it's hard to have that, it looks like a good idea,


00:01:35.120 --> 00:01:36.980
but let me tell you, it's a bad idea.


00:01:36.980 --> 00:01:38.440
And here's the three reasons,


00:01:38.440 --> 00:01:39.880
and here are the tears that I've shed


00:01:39.880 --> 00:01:41.520
because I tried this way.


00:01:41.520 --> 00:01:44.840
You need a little hands-on.


00:01:44.840 --> 00:01:47.520
Like for me, it's running all the infrastructure


00:01:47.520 --> 00:01:50.000
and APIs and mobile app stuff at Talk Python,


00:01:50.000 --> 00:01:51.820
which is plenty to get the tears.


00:01:51.820 --> 00:01:54.080
I've pulled out plenty of hair,


00:01:54.080 --> 00:01:56.200
but I think consulting plus teaching


00:01:56.200 --> 00:01:58.920
is a really common mix for that.


00:01:58.920 --> 00:02:00.260
You like it?


00:02:00.260 --> 00:02:01.100
- Yeah, I do.


00:02:01.100 --> 00:02:01.940
I mean, so I've been working on,


00:02:01.940 --> 00:02:03.600
so I have this site, learnjango.com,


00:02:03.600 --> 00:02:07.060
that I'm trying to consolidate everything onto that site.


00:02:07.060 --> 00:02:08.860
And so that's been an effort I've been working on


00:02:08.860 --> 00:02:10.820
in earnest the last couple months.


00:02:10.820 --> 00:02:12.220
And so it's actually been really fun


00:02:12.220 --> 00:02:13.740
to just be an engineer for a change.


00:02:13.740 --> 00:02:15.980
And I kind of wish I could find a me


00:02:15.980 --> 00:02:18.660
to help me when I get stuck, but there is no,


00:02:18.660 --> 00:02:21.140
you know, being, as Carlton will share something,


00:02:21.140 --> 00:02:23.020
you know, being stuck is part of the game,


00:02:23.020 --> 00:02:27.900
But it's uniquely satisfying and frustrating to code


00:02:27.900 --> 00:02:30.500
because everything is solvable,


00:02:30.500 --> 00:02:34.700
but still I find things that stop me for a couple of days.


00:02:34.700 --> 00:02:36.500
And I'm just like, it brings me back


00:02:36.500 --> 00:02:38.380
to the first couple of months of coding


00:02:38.380 --> 00:02:41.180
and the terror of like, I'm not smart enough,


00:02:41.180 --> 00:02:43.500
I can't do this, but I know that I'll get it done.


00:02:43.500 --> 00:02:44.740
And I do get it done.


00:02:44.740 --> 00:02:47.300
So you get the yin and yang,


00:02:47.300 --> 00:02:50.180
but it's uniquely satisfying to do the commit


00:02:50.180 --> 00:02:51.100
and it's done, right?


00:02:51.100 --> 00:02:53.940
Whereas even a podcast, it's in the bank,


00:02:53.940 --> 00:02:58.540
but it's not quite the same binary feeling of accomplishment.


00:02:58.540 --> 00:02:59.460
- That's true.


00:02:59.460 --> 00:03:01.180
The getting stuck is frustrating,


00:03:01.180 --> 00:03:04.140
but also it means you're about to level up, right?


00:03:04.140 --> 00:03:04.960
- Well, that's the thing.


00:03:04.960 --> 00:03:05.860
- You've got to figure out something, yeah.


00:03:05.860 --> 00:03:09.540
- Yeah, yeah, no, it's, I try to be excited about it,


00:03:09.540 --> 00:03:10.800
'cause I know if I'm stuck,


00:03:10.800 --> 00:03:12.180
then lots of other people are gonna be stuck.


00:03:12.180 --> 00:03:14.140
Or a lot of times I'm stuck on one little thing,


00:03:14.140 --> 00:03:16.920
and it's really 'cause there's some other thing,


00:03:16.920 --> 00:03:19.220
some fundamental that I didn't know as well


00:03:19.220 --> 00:03:20.580
as I thought I did.


00:03:20.580 --> 00:03:23.900
So we can talk about that, but I have thoughts


00:03:23.900 --> 00:03:24.740
and all of that.


00:03:24.740 --> 00:03:26.060
So yeah, it's a nice mix to do.


00:03:26.060 --> 00:03:28.860
And more importantly, now I have friends and peers


00:03:28.860 --> 00:03:31.060
who when I get stuck, I can ask them.


00:03:31.060 --> 00:03:32.980
So Carlton, of course, is one of them,


00:03:32.980 --> 00:03:35.020
former Django fellow.


00:03:35.020 --> 00:03:35.860
- Hey Carlton, help.


00:03:35.860 --> 00:03:36.820
- I have a couple others.


00:03:36.820 --> 00:03:39.740
So it's important to, we can talk about this,


00:03:39.740 --> 00:03:41.140
but when you're learning, learning how to ask


00:03:41.140 --> 00:03:42.980
a good question on Stack Overflow,


00:03:42.980 --> 00:03:44.180
or Django has its own forum,


00:03:44.180 --> 00:03:47.340
which is a great resource, forum.djangoproject.com.


00:03:47.340 --> 00:03:50.560
But the next stage is like, I did a walk,


00:03:50.560 --> 00:03:53.900
I slept on it, like knowing when to ping a friend,


00:03:53.900 --> 00:03:55.240
'cause you don't wanna ping a friend all the time,


00:03:55.240 --> 00:03:57.960
but sometimes it's like, okay, like this is,


00:03:57.960 --> 00:03:58.840
I'm truly stuck.


00:03:58.840 --> 00:04:01.920
There's no point like wasting a week or two on this.


00:04:01.920 --> 00:04:03.860
So that's a really nice stage to get to.


00:04:03.860 --> 00:04:05.920
And it's also helpful to help other people too,


00:04:05.920 --> 00:04:06.920
'cause you're thinking about something


00:04:06.920 --> 00:04:08.920
and someone gives you something they're stuck on,


00:04:08.920 --> 00:04:10.480
you're like, oh, boom, that's that.


00:04:10.480 --> 00:04:12.080
And then you're like, hey, I'm working on,


00:04:12.080 --> 00:04:13.760
you know, something that's stuck.


00:04:13.760 --> 00:04:15.720
So anyways, having a community is really,


00:04:15.720 --> 00:04:17.280
really levels you up too.


00:04:17.280 --> 00:04:20.120
And also people who can relate to,


00:04:20.120 --> 00:04:25.160
know, good and bad things about code. You know, Django has Django is very stable but has a host of


00:04:25.160 --> 00:04:30.280
new features, many of which I haven't actually used. Carlton can talk about them. So it's


00:04:30.280 --> 00:04:36.360
important to have community, right? Not just be in your own room with the computer fighting with it.


00:04:36.360 --> 00:04:41.800
Like there are other anything you've any trouble or good or bad thing you've had many, many other


00:04:41.800 --> 00:04:47.080
people have had, you just have to find them. Yeah, unlike the movie stereotypes, it's way


00:04:47.080 --> 00:04:49.320
way more social, this coding thing.


00:04:49.320 --> 00:04:50.720
- It is, it is.


00:04:50.720 --> 00:04:53.520
- Yeah, before I let Carlton introduce himself,


00:04:53.520 --> 00:04:56.520
just a quick comment from the audience to make you


00:04:56.520 --> 00:04:58.040
feel good a bit from Bishnu says,


00:04:58.040 --> 00:05:00.840
"The first book I read on Django was William's book."


00:05:00.840 --> 00:05:01.760
So thank you.


00:05:01.760 --> 00:05:02.600
- Thank you, I appreciate that.


00:05:02.600 --> 00:05:03.960
Yeah, I just, one last point,


00:05:03.960 --> 00:05:05.040
and then I want Carlton to talk,


00:05:05.040 --> 00:05:07.040
but I wrote three books,


00:05:07.040 --> 00:05:09.520
"Django for Beginners," "APIs Professionals,"


00:05:09.520 --> 00:05:12.320
that first came out in 2018 and '19,


00:05:12.320 --> 00:05:14.480
and then I've updated all three of them


00:05:14.480 --> 00:05:15.920
every year since then.


00:05:15.920 --> 00:05:17.640
So on the one hand, it's been four years,


00:05:17.640 --> 00:05:22.200
I haven't had a new book, but it's also, I've written what?


00:05:22.200 --> 00:05:24.240
- Or you've had to Twardnet books.


00:05:24.240 --> 00:05:26.400
- Yeah, I mean, I really have, I really have.


00:05:26.400 --> 00:05:28.800
It doesn't feel quite as satisfying,


00:05:28.800 --> 00:05:31.720
but I know that I have a built-in audience and I've,


00:05:31.720 --> 00:05:33.920
so it's a weird dynamic to be in a situation


00:05:33.920 --> 00:05:36.960
where it's sustainable to maintain and update your stuff.


00:05:36.960 --> 00:05:39.080
I mean, I'm sure you can relate,


00:05:39.080 --> 00:05:40.480
you have all these different courses, right?


00:05:40.480 --> 00:05:41.560
That's the thing that falls off.


00:05:41.560 --> 00:05:43.640
You do all the effort, you get the course out,


00:05:43.640 --> 00:05:47.000
then it goes out of date or it could be made better but finding the...


00:05:47.000 --> 00:05:48.520
>> Or Pydantic 2 comes out.


00:05:48.520 --> 00:05:52.280
>> Or Django every eight months comes out. Yeah.


00:05:52.280 --> 00:05:52.920
>> Exactly.


00:05:52.920 --> 00:05:58.120
>> So it's, yeah, I try to think of the positive of it. It is, I feel like the book is so much


00:05:58.120 --> 00:06:02.520
better but a layperson or family members or friends are like, "When's the new book coming


00:06:02.520 --> 00:06:06.840
out?" It's like, "I just did it." So it's, yeah.


00:06:06.840 --> 00:06:10.360
>> Yeah, yeah, indeed. Carlton.


00:06:10.360 --> 00:06:11.800
>> Who are you, Carlton?


00:06:11.800 --> 00:06:12.760
>> Who are you?


00:06:12.760 --> 00:06:13.760
Who am I?


00:06:13.760 --> 00:06:14.760
Well, my name is Carlton.


00:06:14.760 --> 00:06:18.360
I do a podcast with Will.


00:06:18.360 --> 00:06:21.520
So basically I've just stepped down as Django Fellow.


00:06:21.520 --> 00:06:25.960
I've spent the last five years being a Django Fellow, which means I was contracted by the


00:06:25.960 --> 00:06:28.200
Django Software Foundation to help maintain Django itself.


00:06:28.200 --> 00:06:31.480
And they have a couple of Fellows and I was one of them for that period.


00:06:31.480 --> 00:06:35.960
And I've stepped down in order to go back to building things with Django rather than


00:06:35.960 --> 00:06:38.440
working just on Django.


00:06:38.440 --> 00:06:40.800
So it's a kind of, you know, after five years,


00:06:40.800 --> 00:06:42.840
that was a good time period.


00:06:42.840 --> 00:06:43.960
And it's time for me to go back


00:06:43.960 --> 00:06:44.960
to building things with Django.


00:06:44.960 --> 00:06:46.560
I've been using Django forever


00:06:46.560 --> 00:06:50.400
and I'm a maintainer on a lot of projects in the ecosystem.


00:06:50.400 --> 00:06:51.800
So I've worked on Django as framework,


00:06:51.800 --> 00:06:53.480
Django filter, Django crispy form,


00:06:53.480 --> 00:06:55.520
Django compressor, Django app comp.


00:06:55.520 --> 00:06:57.800
I've maintained the channels package.


00:06:57.800 --> 00:07:01.480
- Oh, your code runs on many, many servers, you should say.


00:07:01.480 --> 00:07:06.160
- More, yeah, more than I like to think about.


00:07:06.160 --> 00:07:08.280
So one thing when I was a fellow,


00:07:08.280 --> 00:07:10.840
We were always, people always give us a bit of grief


00:07:10.840 --> 00:07:12.760
about how conservative Django is.


00:07:12.760 --> 00:07:15.160
It's very stable and very, you know,


00:07:15.160 --> 00:07:17.840
we're very cautious about making backwards


00:07:17.840 --> 00:07:18.760
incompatible changes.


00:07:18.760 --> 00:07:19.680
We try not to do that.


00:07:19.680 --> 00:07:21.720
We've got a solid deprecation policy.


00:07:21.720 --> 00:07:23.480
We've got the long-term support policies.


00:07:23.480 --> 00:07:24.860
And then at DjangoCon last year,


00:07:24.860 --> 00:07:28.880
somebody read out the numbers, the download numbers.


00:07:28.880 --> 00:07:30.480
It's not, you know, it's not necessarily


00:07:30.480 --> 00:07:32.680
the most downloaded package, but it's millions,


00:07:32.680 --> 00:07:35.240
millions of downloads, millions of projects


00:07:35.240 --> 00:07:36.400
that are using it.


00:07:36.400 --> 00:07:39.000
And you really can't break it.


00:07:39.000 --> 00:07:42.940
And that's always really humbling and really kind of,


00:07:42.940 --> 00:07:45.920
yeah, actually all the work we put into making sure


00:07:45.920 --> 00:07:49.660
that the product is stable, that's good work.


00:07:49.660 --> 00:07:50.760
That's important work.


00:07:50.760 --> 00:07:52.120
- Yeah, Threads is using it, Carlton.


00:07:52.120 --> 00:07:53.680
You're helping out Mark Zuckerberg.


00:07:53.680 --> 00:07:54.760
- Yeah, yeah, yeah, well--


00:07:54.760 --> 00:07:55.800
- Well, they're using a fork of it.


00:07:55.800 --> 00:07:57.160
We can get into that, but yeah.


00:07:57.160 --> 00:08:00.400
- But I mean, I was looking at a comment on the forum.


00:08:00.400 --> 00:08:02.960
I got a little heart from somebody asked


00:08:02.960 --> 00:08:05.800
on the Django forum, does Django scale?


00:08:05.800 --> 00:08:07.960
Can I run it on lots of systems and i'm like well


00:08:07.960 --> 00:08:10.920
You do know that uh instagram was built on it


00:08:10.920 --> 00:08:14.360
you know, they're still using that core request response cycle and


00:08:14.360 --> 00:08:18.120
You know, my comment was you're not going to serve more traffic than instagram. So


00:08:18.120 --> 00:08:24.760
Yes, creds is built on the you know that core request response bit is still essentially janga


00:08:24.760 --> 00:08:28.120
Carlton, what are you working on? Oh, sorry. Go ahead michael


00:08:28.120 --> 00:08:34.440
Well, I just think maybe not everyone has is uh up on what threads is no not a parallels programming thing


00:08:34.520 --> 00:08:38.520
but a Twitter clone from Meta and Facebook, right?


00:08:38.520 --> 00:08:40.040
- Well, and we have-- - Sorry.


00:08:40.040 --> 00:08:42.360
We have an interview, maybe we can put in the show notes,


00:08:42.360 --> 00:08:45.160
with Carl Mayer, who was original core Django developer,


00:08:45.160 --> 00:08:47.160
who then went to Instagram.


00:08:47.160 --> 00:08:49.640
So he spoke for an hour about--


00:08:49.640 --> 00:08:54.360
So initially, it was pure Django.


00:08:54.360 --> 00:08:57.000
And then as they scaled, they did things like they ripped out the ORM,


00:08:57.000 --> 00:08:58.120
and they changed this and that.


00:08:58.120 --> 00:09:00.200
But there is still a core of it,


00:09:00.200 --> 00:09:02.360
the request-response cycle that's in there.


00:09:03.160 --> 00:09:08.840
And I think that's another interesting thing is Django, when you get to massive, massive size,


00:09:08.840 --> 00:09:13.800
a lot of companies, they have thousands of engineers, right? We have, we Django has just


00:09:13.800 --> 00:09:18.680
a community. So as soon as you hop off the guardrails, then you're kind of on your own.


00:09:18.680 --> 00:09:24.040
And that's sort of separate debate on whether it's worth it or not, but you can get quite large.


00:09:24.040 --> 00:09:30.280
And it's interesting by contrast, I believe Shopify is still on rails, I believe, or seem


00:09:30.280 --> 00:09:34.840
to have gone much longer. Carlton, yeah, you have something to add? Well, I don't think it's really,


00:09:34.840 --> 00:09:39.320
I mean, I know Instagram moved away from the ORM, but that was quite a long time ago. If you look at


00:09:39.320 --> 00:09:44.520
Octopus and Kraken, they're still basically using something that's basically vanilla Django to do.


00:09:44.520 --> 00:09:51.080
Yeah, like somebody said. And so, you know, what it was back in, you know, 1.6, 1.7, 1.8, when


00:09:51.080 --> 00:09:54.920
Instagram were needing to pull away from what Django is, is a lot different from what Django


00:09:54.920 --> 00:09:59.000
is it 2.2, 3, 4 now, 4.2 now.


00:09:59.000 --> 00:10:02.000
-Gonna be 5, yeah. -Yeah, gonna be 5.


00:10:02.000 --> 00:10:03.300
I wonder if they regret that.


00:10:03.300 --> 00:10:06.160
I wonder, not necessarily maybe it was the right choice at the time,


00:10:06.160 --> 00:10:09.360
but do they kind of wish, like, wish they had access,


00:10:09.360 --> 00:10:12.760
if nothing else, to fork version 5 instead of version 1.6?


00:10:12.760 --> 00:10:19.600
I wish they'd been a bit more pushback on Django from thinking about,


00:10:19.600 --> 00:10:21.600
because what was it that caused them to change?


00:10:21.600 --> 00:10:28.320
I think, you know the move from it being able to uh root string names strings as view names


00:10:28.320 --> 00:10:30.800
like and having to import the view itself and


00:10:30.800 --> 00:10:35.360
I think at that point like you know for instagram to rewrite the whole stack it


00:10:35.360 --> 00:10:38.640
Was it was too much and in the end they they kind of forked but


00:10:38.640 --> 00:10:44.000
It would have been great if we could have kept them on board. I think yeah, I guess for instagram


00:10:44.000 --> 00:10:47.360
They can they can you know, it's they've got enough engineering chops


00:10:47.360 --> 00:10:50.560
But it would have been much nicer for django if we could have kept them on board, I think


00:10:51.280 --> 00:10:57.600
Um, yeah, but well, that's like a quick positive shout out for the whole meta as a larger organization


00:10:57.600 --> 00:11:02.880
They seem to be doing a lot for python these days, you know for python. They're really working a lot on


00:11:02.880 --> 00:11:09.520
The you know sam gross's initiative on nogil and the faster python and cinder and


00:11:09.520 --> 00:11:14.880
You know all that probably does come out of some of the foundational stuff for instagram and running django there


00:11:14.880 --> 00:11:20.560
yeah, and I think carl may is still involved in very much in pushing python forwards and


00:11:20.560 --> 00:11:22.600
and what they're trying to do.


00:11:22.600 --> 00:11:24.340
So, all QDUPS do them.


00:11:24.340 --> 00:11:27.160
It's very easy to dog on the big corporations


00:11:27.160 --> 00:11:28.280
so they don't pay enough of it.


00:11:28.280 --> 00:11:30.920
But it's important to recognize when they do contribute


00:11:30.920 --> 00:11:32.920
that yes, actually that's--


00:11:32.920 --> 00:11:34.880
- Yeah, there's plenty that need dogging on,


00:11:34.880 --> 00:11:36.660
like a lot, most.


00:11:36.660 --> 00:11:40.320
- We still have support for Oracle in Django, for example.


00:11:40.320 --> 00:11:42.120
- Interesting.


00:11:42.120 --> 00:11:45.320
But Carlton, deployment,


00:11:45.320 --> 00:11:47.240
there's something else you're working on.


00:11:47.240 --> 00:11:48.080
- Well, yes.


00:11:48.080 --> 00:11:51.360
I mean, so one thing I wanted to quit


00:11:51.360 --> 00:11:53.440
or step down as fellow and get to working


00:11:53.440 --> 00:11:56.360
is my button tool, which is my simple deployment tool.


00:11:56.360 --> 00:11:58.580
So it's quite vanilla.


00:11:58.580 --> 00:11:59.440
It's old school.


00:11:59.440 --> 00:12:02.320
It uses virtual private server.


00:12:02.320 --> 00:12:03.480
It uses Ansible.


00:12:03.480 --> 00:12:06.000
It's all on AWS.


00:12:06.000 --> 00:12:08.840
And then I'm building UI and tooling on front of that.


00:12:08.840 --> 00:12:11.400
Slightly delayed because I've had personal issues


00:12:11.400 --> 00:12:13.880
that have taken me up.


00:12:13.880 --> 00:12:16.320
My plan was sit down in April, get on with it.


00:12:16.320 --> 00:12:17.440
My son's been ill for a while.


00:12:17.440 --> 00:12:20.240
So that's just on the backbone.


00:12:20.240 --> 00:12:25.720
The priority with all of these things is look after yourself.


00:12:25.720 --> 00:12:27.540
And in the situation we've been in,


00:12:27.540 --> 00:12:29.420
I haven't had time to work on it particularly.


00:12:29.420 --> 00:12:30.960
But that will be the autumn now.


00:12:30.960 --> 00:12:33.120
And that's kind of, yeah, I've been


00:12:33.120 --> 00:12:35.320
talking about it for a while, time to actually ship it


00:12:35.320 --> 00:12:37.040
and have some capacity to ship it.


00:12:37.040 --> 00:12:38.800
But can we give it a--


00:12:38.800 --> 00:12:41.480
maybe it's different angle of pitch, which is that--


00:12:41.480 --> 00:12:43.160
so it's built on--


00:12:43.160 --> 00:12:45.320
so deployment is trick-- we can talk about this.


00:12:45.320 --> 00:12:48.340
Going from local to production is hard.


00:12:48.340 --> 00:12:50.260
And who do you use these days, right?


00:12:50.260 --> 00:12:55.260
Like there's AWS, there's Azure, there's kind of Google,


00:12:55.260 --> 00:12:58.440
there still is Heroku, there's new entrants like Fly


00:12:58.440 --> 00:13:00.640
and some other ones, but what do you really need?


00:13:00.640 --> 00:13:02.560
Like if you're with Django, you want someone


00:13:02.560 --> 00:13:05.320
who knows Django who just like puts a layer


00:13:05.320 --> 00:13:08.840
on top of someone that's not going away like AWS.


00:13:08.840 --> 00:13:10.780
And essentially, as I understand it,


00:13:10.780 --> 00:13:14.720
Button is a Django fellow saying,


00:13:14.720 --> 00:13:19.560
have a Django app, you want to put it online, let me solve all the hard things, do all the


00:13:19.560 --> 00:13:24.280
hard work for you. And it's a beautiful UI on something that's not going to change. Yeah,


00:13:24.280 --> 00:13:31.040
here we go. To have it. Because all the... It's interesting. Yeah. I updated my books.


00:13:31.040 --> 00:13:35.460
I updated away from Heroku to Fly for the new update because Heroku eliminated their


00:13:35.460 --> 00:13:43.480
free tier. And I personally have really liked what Fly.io is doing, but it's hard to scale


00:13:43.480 --> 00:13:49.280
these companies. It's non-trivial to build what they have. And yet if you're AWS, all


00:13:49.280 --> 00:13:54.240
you're going to do is add, add, add, add features when big enterprise clients want things. And


00:13:54.240 --> 00:14:00.120
so at some point it becomes unusable for a solo person or a small startup. So I'm a fan


00:14:00.120 --> 00:14:01.120
of what Carlton's doing.


00:14:01.120 --> 00:14:04.760
You know what's even scarier? Just go to the AWS console dashboard.


00:14:04.760 --> 00:14:05.760
Right.


00:14:05.760 --> 00:14:06.760
Yeah.


00:14:06.760 --> 00:14:07.760
Right.


00:14:07.760 --> 00:14:08.760
Exactly.


00:14:08.760 --> 00:14:09.760
But you know, really, it's like...


00:14:09.760 --> 00:14:10.760
What should I use?


00:14:10.760 --> 00:14:13.440
There should be enough of those things. I have a Python web app or I have a JavaScript...


00:14:13.440 --> 00:14:16.040
whatever JavaScript people do, like a Rails app.


00:14:16.040 --> 00:14:19.280
I just want to get it up and have it not break.


00:14:19.280 --> 00:14:21.360
- But this came, so the idea for Button came out


00:14:21.360 --> 00:14:23.400
of exactly those kind of thoughts,


00:14:23.400 --> 00:14:25.640
was every week on Django chat,


00:14:25.640 --> 00:14:26.600
we'd have someone come along,


00:14:26.600 --> 00:14:27.880
and deployment would always come up,


00:14:27.880 --> 00:14:29.920
and it would be like some elaborate story


00:14:29.920 --> 00:14:30.840
about what they're doing.


00:14:30.840 --> 00:14:32.480
And it's like, well, actually,


00:14:32.480 --> 00:14:34.480
if you keep it simple and keep it neat,


00:14:34.480 --> 00:14:36.520
first of all, here's how I deploy,


00:14:36.520 --> 00:14:38.240
and here's how I get my clients to deploy,


00:14:38.240 --> 00:14:40.880
and here's how I've deployed many projects over many years,


00:14:40.880 --> 00:14:42.560
and it's continually evolving.


00:14:42.560 --> 00:14:45.920
And then on the other hand, when you go to the AWS console,


00:14:45.920 --> 00:14:48.600
though, it's like this, ah, too much.


00:14:48.600 --> 00:14:52.400
You don't need 58 services and every configuration option


00:14:52.400 --> 00:14:56.160
under the button, under the sun.


00:14:56.160 --> 00:14:59.480
But it's nice to be able to break out of that.


00:14:59.480 --> 00:15:01.440
You do need to scale, or you do need to do it.


00:15:01.440 --> 00:15:03.680
So anyway, this is my project.


00:15:03.680 --> 00:15:05.400
If it wasn't for life circumstances,


00:15:05.400 --> 00:15:06.920
I'd be slightly further along.


00:15:06.920 --> 00:15:08.360
But it's going to be the fall now.


00:15:08.360 --> 00:15:09.320
It's going to be--


00:15:09.320 --> 00:15:10.880
it's coming on nicely.


00:15:10.880 --> 00:15:15.720
And the idea is a simple approach


00:15:15.720 --> 00:15:18.280
and with a nice UI on top of it that you can use.


00:15:18.280 --> 00:15:21.360
- Well, you definitely have our wishes


00:15:21.360 --> 00:15:22.720
for your son to get well soon.


00:15:22.720 --> 00:15:24.600
So, that's rough. - Thank you, Mark.


00:15:24.600 --> 00:15:26.800
- Yeah, it's rough when you're sick.


00:15:26.800 --> 00:15:30.000
- It's been a full on year.


00:15:30.000 --> 00:15:32.640
It's been a little over a year now and it's just ongoing.


00:15:32.640 --> 00:15:34.920
And so, that was another part


00:15:34.920 --> 00:15:35.920
of why I stepped down as fellow.


00:15:35.920 --> 00:15:38.680
I needed to take a bit of time just for the family.


00:15:40.160 --> 00:15:42.720
Absolutely. I think back the


00:15:42.720 --> 00:15:45.760
Button for a second btn.dev by the way


00:15:45.760 --> 00:15:49.840
You can sign up for the mailing list or the or the alpha is available, too


00:15:49.840 --> 00:15:55.600
So nice i'm constantly trying to push carlton stuff because he always downplays everything he's doing i'm like come on, man


00:15:55.600 --> 00:15:59.520
Like yeah, but i've got that natural developer shyness. I would I have to wait


00:15:59.520 --> 00:16:03.280
I have to polish it and wait and he's perfect and then launch it and then yeah, and i'm british


00:16:03.280 --> 00:16:07.520
So i'm nice and reserved and you know, anyway, mike, are you gonna make a question?


00:16:08.080 --> 00:16:12.580
Well, I was just going to point out that it's exciting.


00:16:12.580 --> 00:16:14.580
And we were just talking about it.


00:16:14.580 --> 00:16:16.580
We were just hyping people up about it.


00:16:16.580 --> 00:16:21.060
How it's cool to have these huge deployments running tons of traffic,


00:16:21.060 --> 00:16:23.560
doing all sorts of amazing things with like,


00:16:23.560 --> 00:16:27.900
"Yeah, we scaled our server, so we went from 500 to 300 with this trick."


00:16:27.900 --> 00:16:30.200
Yes, that's a cool thing that pushes the envelope


00:16:30.200 --> 00:16:33.160
that makes a lot of stuff possible with frameworks like Django


00:16:33.160 --> 00:16:36.500
and language like Python.


00:16:36.500 --> 00:16:43.500
But on the other hand, most of us are not Instagram, you're not Microsoft, you're not Google, you're not all these.


00:16:43.500 --> 00:16:54.780
And having, or let's say you're not Netflix, I actually think that like what AWS console looks like has a lot to do with how Netflix works, probably given how early adopters they were.


00:16:54.780 --> 00:16:58.380
But I just think it's worth emphasizing.


00:16:58.380 --> 00:17:03.780
Push button, get it running on a simple server, make it secure, keep it up.


00:17:03.780 --> 00:17:08.780
zero downtime deploy type stuff,


00:17:08.780 --> 00:17:11.780
CI/CD, a push to a brand, all those types of things.


00:17:11.780 --> 00:17:16.780
That's more than enough for most people. Not just on your hobby projects, but on company business.


00:17:16.780 --> 00:17:22.780
Does your website get a thousand visitors a day? It doesn't need five servers with a little failover


00:17:22.780 --> 00:17:27.780
and Kubernetes clusters and sharded databases. It just doesn't.


00:17:27.780 --> 00:17:31.140
So having that option, something like button,


00:17:31.140 --> 00:17:33.140
it's pretty cool, I think.


00:17:33.140 --> 00:17:34.620
- Yeah, I mean, that's exactly it.


00:17:34.620 --> 00:17:35.500
Like as you speak there,


00:17:35.500 --> 00:17:37.020
you're just singing to the choir for me.


00:17:37.020 --> 00:17:41.300
It's like, you know, you can get a small box,


00:17:41.300 --> 00:17:43.220
get a slightly bigger box if you need to.


00:17:43.220 --> 00:17:44.620
Get a slightly bigger box than that.


00:17:44.620 --> 00:17:45.540
You can go get quite an,


00:17:45.540 --> 00:17:47.780
you can get an awful lot of box for not very much money.


00:17:47.780 --> 00:17:50.180
And then maybe one, maybe two boxes.


00:17:50.180 --> 00:17:51.480
Yeah, yeah, yeah, exactly.


00:17:51.480 --> 00:17:55.660
But this, the kind of architecture I go for,


00:17:55.660 --> 00:17:57.940
you can scale to a very big site.


00:17:57.940 --> 00:18:00.220
And I know in recent years, Stack Overflow


00:18:00.220 --> 00:18:03.220
moved to a much more modern and fancy thing.


00:18:03.220 --> 00:18:04.820
But for a long, long, long, long time,


00:18:04.820 --> 00:18:09.300
they were running on the same kind of big database,


00:18:09.300 --> 00:18:11.620
couple of front-end web servers, a load balancer,


00:18:11.620 --> 00:18:12.900
and nothing more than that.


00:18:12.900 --> 00:18:15.160
And you're not going to serve more traffic than Stack


00:18:15.160 --> 00:18:16.180
Overflow ever.


00:18:16.180 --> 00:18:19.840
Like, nobody-- not nobody, but basically, nobody's


00:18:19.840 --> 00:18:21.420
going to serve more traffic than that.


00:18:21.420 --> 00:18:23.900
So that's where I'm coming from.


00:18:23.900 --> 00:18:25.340
And it's not for everybody.


00:18:25.340 --> 00:18:26.840
There's lots of people who've got opinions,


00:18:26.840 --> 00:18:28.840
but it's for people who haven't got an opinion.


00:18:28.840 --> 00:18:31.720
It's like if you don't know how to deploy


00:18:31.720 --> 00:18:33.960
and you don't really have--


00:18:33.960 --> 00:18:35.640
if you're not already in the game,


00:18:35.640 --> 00:18:36.880
then well, this is how I do it.


00:18:36.880 --> 00:18:38.280
And you can choose to do it the same way


00:18:38.280 --> 00:18:39.520
or you can do it differently.


00:18:39.520 --> 00:18:40.520
>>Sure.


00:18:40.520 --> 00:18:42.480
>>You know, I'm really excited about it.


00:18:42.480 --> 00:18:44.200
And I have been talking about it for a long time


00:18:44.200 --> 00:18:46.200
and not having the capacity to work on it.


00:18:46.200 --> 00:18:49.520
And now I, bar, you know, the family situation,


00:18:49.520 --> 00:18:50.560
I have that capacity.


00:18:50.560 --> 00:18:52.280
And so I'm looking forward to getting it out.


00:18:52.280 --> 00:18:53.960
And, you know.


00:18:53.960 --> 00:18:57.960
Well, I think it's more broadly one of the things we're going to talk about is htmx


00:18:57.960 --> 00:19:00.760
And I think there is this these more iterative tools


00:19:00.760 --> 00:19:05.320
You know, you don't need to jump to react if you just want a little thing like you don't need to go


00:19:05.320 --> 00:19:09.640
I heard back in dev was done. It was just all apis now. Come on


00:19:09.640 --> 00:19:13.640
well, I I was it's it's all front end dad, I


00:19:13.640 --> 00:19:20.280
Put a toot up the other day that the you know, they convinced me. Otherwise, uh meme was jango is a front-end framework


00:19:20.360 --> 00:19:26.520
I'm busy writing an application. I'm using hdmx. I'm using alpine. I'm using tailwind and I'm doing it all in django


00:19:26.520 --> 00:19:29.320
I'm doing it all in django templates and it's like


00:19:29.320 --> 00:19:35.080
You know, i'm hardly doing any of the exciting back-end stuff that we love django for it's all


00:19:35.080 --> 00:19:38.200
Front-end and it's just vanilla django


00:19:38.200 --> 00:19:42.280
It is but that's I mean that's the thing that people who are learning


00:19:42.280 --> 00:19:47.640
They they're full stack developer and they're like apis. I gotta do it all and I mean you must have this michael with people


00:19:47.720 --> 00:19:50.560
your students, but I have this a lot of times,


00:19:50.560 --> 00:19:53.680
people who are new say, oh, I want this and that


00:19:53.680 --> 00:19:55.600
functionality, and I'm often like,


00:19:55.600 --> 00:19:57.480
don't go to APIs unless you need to,


00:19:57.480 --> 00:19:59.680
because if you're a professional Django developer


00:19:59.680 --> 00:20:01.720
on a team of more than 10 people,


00:20:01.720 --> 00:20:02.920
yeah, you're gonna write APIs,


00:20:02.920 --> 00:20:05.120
'cause there will be front-end people


00:20:05.120 --> 00:20:05.960
who just do front-end, but when it's just you--


00:20:05.960 --> 00:20:07.840
- Even if there's not front-end,


00:20:07.840 --> 00:20:09.620
there might be a mobile app.


00:20:09.620 --> 00:20:11.560
That's our primary use case of APIs.


00:20:11.560 --> 00:20:15.200
Or you might have a public API for users


00:20:15.200 --> 00:20:16.800
or other companies to work with.


00:20:16.800 --> 00:20:19.720
It doesn't have to be that you're not doing server-side.


00:20:19.720 --> 00:20:22.960
- But for a solo person or a small thing,


00:20:22.960 --> 00:20:26.680
don't just leap to it 'cause it adds so much complexity.


00:20:26.680 --> 00:20:29.320
Do you use Tornado or use an older Python?


00:20:29.320 --> 00:20:30.160
- I use Pyramid.


00:20:30.160 --> 00:20:32.000
- Pyramid, okay. - Pyramid, yeah.


00:20:32.000 --> 00:20:35.080
I've considered switching to something like FastAPI


00:20:35.080 --> 00:20:38.160
or something like that, but then I look and I'm like,


00:20:38.160 --> 00:20:40.280
you know, it's like a real thin layer


00:20:40.280 --> 00:20:42.100
over just what would be the same anyway,


00:20:42.100 --> 00:20:43.760
and the scalability is totally good.


00:20:43.760 --> 00:20:46.600
- I mean, it works, it works, too.


00:20:46.600 --> 00:20:48.520
It'll run for months without me touching it.


00:20:48.520 --> 00:20:50.440
Like, the chances the website go down,


00:20:50.440 --> 00:20:53.680
and it's not my fault 'cause I deployed something,


00:20:53.680 --> 00:20:55.040
is almost zero.


00:20:55.040 --> 00:20:57.080
Like, really, really, really close to zero.


00:20:57.080 --> 00:20:59.060
Either that or something's gone wrong in the data center.


00:20:59.060 --> 00:21:01.160
But like, the website itself,


00:21:01.160 --> 00:21:03.720
and so, yeah, I chose that eight years ago,


00:21:03.720 --> 00:21:05.880
and I'm still cruising with it, it's great.


00:21:05.880 --> 00:21:10.360
- I had a client ask me about HA, sorry,


00:21:10.360 --> 00:21:12.320
high availability one time.


00:21:12.320 --> 00:21:14.440
They were like, "Oh, don't we need multiple servers


00:21:14.440 --> 00:21:15.280
"and multiple this and that?"


00:21:15.280 --> 00:21:17.440
I'm like, well, how many nines do we need? Um


00:21:17.440 --> 00:21:19.280
and


00:21:19.280 --> 00:21:21.360
it's like if you if you if you have


00:21:21.360 --> 00:21:25.280
I don't know. I can't remember the exact number now off the top of my head, but the the


00:21:25.280 --> 00:21:28.880
You're already at three nines even just deploying on the kind of worst


00:21:28.880 --> 00:21:32.880
set up in the world because it you the number the amount of downtime you'll have will be


00:21:32.880 --> 00:21:40.400
Sub few minutes because and it'll be exactly that you and we deploy and then you revert it. Yeah, exactly. Oh my gosh quick


00:21:40.400 --> 00:21:41.840
uh


00:21:41.840 --> 00:21:48.820
But we have I think people necessarily don't fully appreciate how much really high-end technology


00:21:48.820 --> 00:21:52.720
For so little money we have accessible to us with these cloud providers


00:21:52.720 --> 00:21:55.440
All right. We have the best


00:21:55.440 --> 00:22:00.560
Data centers in the world for ten dollars, right? You know what I mean? It's not like well


00:22:00.560 --> 00:22:06.320
These people like you have the same thing that netflix is using and for a while. They're doing a third of the traffic of the internet


00:22:06.320 --> 00:22:08.640
right


00:22:08.640 --> 00:22:14.320
Yes, yeah, yeah, exactly. So three nines gives you nine hours off a year and you you won't even have nine hours off a year


00:22:14.320 --> 00:22:17.040
Like yeah, that's highly unlikely. Yeah


00:22:17.040 --> 00:22:20.000
you know


00:22:20.000 --> 00:22:24.240
You know if something goes down and you don't fix it, but like it's literally if you deploy


00:22:24.240 --> 00:22:28.400
You fix it quickly


00:22:28.400 --> 00:22:31.440
but you get that kind of uptime without having to have


00:22:31.440 --> 00:22:36.480
Multiple availability zones and boiler failover and all the things that you know, they like to sell


00:22:38.240 --> 00:22:45.440
Yeah. And yet getting to that point for people who are new, just the act of local versus production


00:22:45.440 --> 00:22:50.480
database stops people, like every single person, right? They build the site, like it's a blog,


00:22:50.480 --> 00:22:53.680
and then they deploy it. And they're like, "Where's my blog?" And it's like, "Oh, well,


00:22:53.680 --> 00:22:58.560
that database is different than this database." Like, you know, after a while, I get used to that


00:22:58.560 --> 00:23:04.160
idea. But it's like, the code is there. Why isn't the data there? Right? And then, so it's just this


00:23:04.160 --> 00:23:08.640
scale of up to how many nines do you need. But most people are focused on just put something


00:23:08.640 --> 00:23:13.600
up online and add continuous integration. I mean, really, what are the basics? But they're


00:23:13.600 --> 00:23:19.280
not basic when you're doing it the first couple times. No, they're not basic. They're not basic


00:23:19.280 --> 00:23:22.400
at all. So having something that kind of automates that. I think another thing is


00:23:22.400 --> 00:23:30.000
you have different team members or if you're an individual developer, maybe getting something up


00:23:30.000 --> 00:23:35.600
on the web, I know people I've spoken to about how daunting it is. Going from I've got zero


00:23:35.600 --> 00:23:41.520
web apps published to one is a major challenge, right? Like I don't know Linux, I don't know


00:23:41.520 --> 00:23:47.440
the terminal, I don't do SSH, I don't understand the security, I don't understand the best practices,


00:23:47.440 --> 00:23:54.880
like I just can't, you know? Yeah. Well, and that's something I emphasize in my books is getting


00:23:54.880 --> 00:23:59.440
something up as fast as possible. It was a little bit smoother with Heroku than Fly, but Fly is still


00:23:59.440 --> 00:24:03.160
pretty like I take some shortcuts but I tell I say they're shortcuts you know this isn't


00:24:03.160 --> 00:24:08.240
the most secure thing ever but just getting something up that first time because it doesn't


00:24:08.240 --> 00:24:12.560
have to be crazy complicated I think the sooner you're dealing with a real live website the


00:24:12.560 --> 00:24:19.840
better for many reasons but yeah that first the first one you know you've spent all this


00:24:19.840 --> 00:24:23.360
time building your application you're finally ready to you know put it online and then it's


00:24:23.360 --> 00:24:31.560
It's like, oh, learn about servers and learn about firewalls and learn about rewrite rules


00:24:31.560 --> 00:24:35.160
and learn about permissions and groups and users.


00:24:35.160 --> 00:24:36.160
Caching, yeah.


00:24:36.160 --> 00:24:37.160
But it's kind of nuts.


00:24:37.160 --> 00:24:38.160
Sorry, go ahead, Will.


00:24:38.160 --> 00:24:44.080
Well, I was just saying Django has a deployment checklist to help with this, but I still think


00:24:44.080 --> 00:24:48.960
and others may agree with me in the community that the local to production gap is a big


00:24:48.960 --> 00:24:51.360
one that Django could do things to address.


00:24:51.360 --> 00:24:56.800
example, like everything defaults to local setup. The deployment checklist, yes, a great


00:24:56.800 --> 00:25:01.200
resource. I spend a lot of time in my books covering this if you want, you know, hand


00:25:01.200 --> 00:25:02.200
holding.


00:25:02.200 --> 00:25:07.040
But it's not just a checklist on the like on the web that you look at, you can run manage.py


00:25:07.040 --> 00:25:09.000
test, you know, space check.


00:25:09.000 --> 00:25:13.160
Yes, management command. And there's a whole, you know, I guess would be the I think, how


00:25:13.160 --> 00:25:17.560
many 12 or something now is sort of the, like, really don't launch it without this. These


00:25:17.560 --> 00:25:18.780
These aren't even optimizations.


00:25:18.780 --> 00:25:22.760
This is like, just don't leak secrets everywhere.


00:25:22.760 --> 00:25:26.460
But still for Django, and I think for a lot of places, there's a tension between how friendly


00:25:26.460 --> 00:25:30.460
you are to beginners versus advanced users.


00:25:30.460 --> 00:25:34.780
I think Django overall has done a very good job of still being friendly to beginners,


00:25:34.780 --> 00:25:41.580
but most technologies over time move towards where the hardcore users are, because that's


00:25:41.580 --> 00:25:43.860
who's doing this stuff.


00:25:43.860 --> 00:25:46.940
So that's a tension Django feels, Python, others.


00:25:46.940 --> 00:25:51.780
Why do you still keep it beginner friendly, but the people who are in charge want different


00:25:51.780 --> 00:25:52.780
things often?


00:25:52.780 --> 00:25:53.780
So, that's a real thing.


00:25:53.780 --> 00:25:58.420
>> That's a real tension in programming and frameworks and all sorts of things.


00:25:58.420 --> 00:26:02.540
And I also think that that's why Python is so popular, honestly.


00:26:02.540 --> 00:26:05.020
You can do C++, you can do Rust.


00:26:05.020 --> 00:26:06.900
These are really great for advanced people.


00:26:06.900 --> 00:26:12.260
You can do, you know, BB6 or super simple old school things that are great, easy for


00:26:12.260 --> 00:26:13.260
beginners.


00:26:13.260 --> 00:26:15.780
But like Python is easy for beginners,


00:26:15.780 --> 00:26:19.140
but you can kind of bring in some more advanced stuff.


00:26:19.140 --> 00:26:22.500
You can bring in async, you can bring in generators,


00:26:22.500 --> 00:26:25.420
you can bring in ORMs, but you don't have to, right?


00:26:25.420 --> 00:26:26.980
Where a lot of languages are like,


00:26:26.980 --> 00:26:29.820
guess what, we're gonna start with a void voice,


00:26:29.820 --> 00:26:32.620
void star star, we're gonna go from there, you know?


00:26:32.620 --> 00:26:34.900
- Yeah, well, the old saying was second best for everything.


00:26:34.900 --> 00:26:37.980
And I think that's not, you know,


00:26:37.980 --> 00:26:40.660
I think it's first best a number of places now too.


00:26:41.820 --> 00:26:59.820
I agree. I think people say that, but I think honestly, if it's not the first best, it is on par with the other first best. It is a front-running contender for a thing where I would say it probably is the undisputed king as in data science and machine learning.


00:26:59.820 --> 00:27:01.820
Yes.


00:27:01.820 --> 00:27:07.820
There's not a competitor out there that is near the level of...


00:27:07.820 --> 00:27:11.380
Because there's R and R doesn't have open source


00:27:11.380 --> 00:27:14.820
in the community that Python does.


00:27:14.820 --> 00:27:15.660
Yeah.


00:27:15.660 --> 00:27:16.480
It seems to be.


00:27:16.480 --> 00:27:17.320
I mean, most like here in Boston,


00:27:17.320 --> 00:27:18.700
a lot of friends are scientists


00:27:18.700 --> 00:27:20.760
and it's either R or Python


00:27:20.760 --> 00:27:22.620
and they all kind of want to use Python,


00:27:22.620 --> 00:27:23.880
but sometimes they use R.


00:27:23.880 --> 00:27:27.900
But Python just can do more things.


00:27:27.900 --> 00:27:29.400
So depending on what you need.


00:27:29.400 --> 00:27:32.380
Yeah.


00:27:32.380 --> 00:27:34.280
The next episode I'm going to release,


00:27:34.280 --> 00:27:35.980
which I've already recorded, but I haven't released.


00:27:35.980 --> 00:27:38.500
so you all don't know about it necessarily,


00:27:38.500 --> 00:27:42.380
is Shiny for Python, which is pretty interesting.


00:27:42.380 --> 00:27:47.180
Like that's the R web story coming to Python,


00:27:47.180 --> 00:27:49.740
which I think is just more cool stuff


00:27:49.740 --> 00:27:51.140
you can do in Python, honestly.


00:27:51.140 --> 00:27:52.740
- Yeah, well, actually I need to check


00:27:52.740 --> 00:27:53.940
the Python version of that,


00:27:53.940 --> 00:27:56.500
'cause one of the, we just had DjangoCon Europe


00:27:56.500 --> 00:27:58.460
earlier this year, and one of the people


00:27:58.460 --> 00:28:01.340
who came up to me is someone who worked for the,


00:28:01.340 --> 00:28:04.820
what do you say, the UK government,


00:28:04.820 --> 00:28:09.300
they're putting systems together. And he had bought my books to get his team to move-


00:28:09.300 --> 00:28:11.460
Is it started with double O or something or other? I don't know.


00:28:11.460 --> 00:28:19.300
No, not that cool. It's just COVID information, health stuff, NHIS. Is that, yeah, Nathan and


00:28:19.300 --> 00:28:25.460
Holt, NHS. But they were able, so he had said that they were able to use R and use the,


00:28:25.460 --> 00:28:30.740
what is it called, the Webby to put things online. But for interactivity,


00:28:31.700 --> 00:28:37.780
that's where they hit problems. So he and his team of 12 had moved a lot of stuff over to Django


00:28:37.780 --> 00:28:44.740
for the just more interactivity of it all. But this is something the British government was doing.


00:28:44.740 --> 00:28:51.220
So it's an area I want to learn more about Shiny and how all that works because it's always been


00:28:51.220 --> 00:28:58.180
like, why can't you just take a Jupyter notebook and put it online? Often put it online. So I'm


00:28:58.180 --> 00:28:59.380
I'm trying to understand that too,


00:28:59.380 --> 00:29:01.980
because the data science space is so big


00:29:01.980 --> 00:29:04.380
and the web space feels small in comparison,


00:29:04.380 --> 00:29:08.100
but yeah, I look forward to that episode.


00:29:08.100 --> 00:29:11.860
- Yeah, well my quick takeaway, talking to Joe there,


00:29:11.860 --> 00:29:15.620
was they really thought about how to make it


00:29:15.620 --> 00:29:18.620
the Pythonic way, and it seems like they really embraced it,


00:29:18.620 --> 00:29:20.540
not just we'll get it to run on Python,


00:29:20.540 --> 00:29:22.780
but it seems like it's gonna be a good option


00:29:22.780 --> 00:29:24.700
for people out there, so that's really cool.


00:29:24.700 --> 00:29:26.680
All right, I wanna make sure that we talk about


00:29:26.680 --> 00:29:29.720
some of the history of Django and the future of Django.


00:29:29.720 --> 00:29:32.480
But I know something that all three of us are super


00:29:32.480 --> 00:29:35.840
excited about is HTMX.


00:29:35.840 --> 00:29:38.120
So let's, and we were talking about it,


00:29:38.120 --> 00:29:39.720
the front end stuff and the back end.


00:29:39.720 --> 00:29:41.960
And so I don't typically share jokes


00:29:41.960 --> 00:29:43.040
on TalkByThon that much.


00:29:43.040 --> 00:29:45.320
It's more Python Bytes the show at the end there.


00:29:45.320 --> 00:29:48.640
But there's this great meme and it has the back end dev


00:29:48.640 --> 00:29:52.280
and it has HTMX, two people on the HTMX one


00:29:52.280 --> 00:29:53.480
speaking to the back end dev.


00:29:53.480 --> 00:29:55.080
Says, "Look at me, look at me."


00:29:56.160 --> 00:29:57.520
HTML is talking to you.


00:29:57.520 --> 00:29:58.600
This is full stack now.


00:29:58.600 --> 00:29:59.680
You're full stack now.


00:29:59.680 --> 00:30:01.040
Come on.


00:30:01.040 --> 00:30:02.800
You're not just a backend developer,


00:30:02.800 --> 00:30:04.760
you're full stack 'cause you're doing HTML.


00:30:04.760 --> 00:30:07.000
I think, you know, it's funny.


00:30:07.000 --> 00:30:09.920
Also the thing called X that is kind of Twitter


00:30:09.920 --> 00:30:11.840
and half X and partially branded,


00:30:11.840 --> 00:30:13.560
that is a whole different joke.


00:30:13.560 --> 00:30:17.820
But I think just this joke up here,


00:30:17.820 --> 00:30:20.280
it really touches on something that I think


00:30:20.280 --> 00:30:24.280
makes Django, makes Blast,


00:30:24.280 --> 00:30:29.280
make all the Python web frameworks way more holistic


00:30:29.280 --> 00:30:31.920
and important coming back to build these apps, right?


00:30:31.920 --> 00:30:34.000
It's not just like, well, we have to use React,


00:30:34.000 --> 00:30:36.080
so we're gonna push you to just write JSON endpoints


00:30:36.080 --> 00:30:37.560
and so on and so on.


00:30:37.560 --> 00:30:40.160
No, you can actually flip that


00:30:40.160 --> 00:30:43.320
and just embrace Python more with HTMX.


00:30:43.320 --> 00:30:45.980
Who wants to start riffing on HTMX and Django?


00:30:45.980 --> 00:30:48.040
- Carlton, you go ahead.


00:30:48.040 --> 00:30:49.800
This is more of your--


00:30:49.800 --> 00:30:51.960
- Well, no, it's exactly that.


00:30:51.960 --> 00:30:54.840
So, I mean, two years ago, three years ago,


00:30:54.840 --> 00:30:57.600
it was all like, oh, Python's existential threat


00:30:57.600 --> 00:31:01.160
because everything's gonna be rewritten in JavaScript


00:31:01.160 --> 00:31:04.120
because everything on the front end is JavaScript.


00:31:04.120 --> 00:31:06.960
And so it doesn't make sense having these two languages.


00:31:06.960 --> 00:31:08.400
So it's all gonna just swipe over


00:31:08.400 --> 00:31:11.720
and Python's gonna disappear in a puff of JavaScript.


00:31:11.720 --> 00:31:14.080
Well, now it's kind of like, well, really,


00:31:14.080 --> 00:31:15.920
is that what I see happening?


00:31:15.920 --> 00:31:19.920
No, what I see is the super established,


00:31:19.920 --> 00:31:27.640
Mature web framework showing the real strength of the html tooling and the hypermedia tooling that they've you know


00:31:27.640 --> 00:31:35.040
It's it's just so fully developed. I mean jango's 18 years old summer, right? So it's there's a lot of history there


00:31:35.040 --> 00:31:40.000
There's a lot of development time gone in there's a lot of richness and once you start using


00:31:40.000 --> 00:31:45.200
Htmx it really is it's like oh, do you know what this just fits the patterns that?


00:31:46.100 --> 00:31:50.500
Django wants you to use, you know, it did like it works with django forms and just


00:31:50.500 --> 00:31:54.900
You know, oh look, it's just a form view and it's just all I do is, you know


00:31:54.900 --> 00:32:01.540
Add this little header in and oh look. I changed the template maybe and oh look. It's it's a fully interactive rich


00:32:01.540 --> 00:32:04.180
client that you know, you the


00:32:04.180 --> 00:32:11.220
Users can't tell the difference between that and a full spa you build redirect or perhaps they can because it loads quicker


00:32:11.220 --> 00:32:14.420
Because it's not it's actually faster and one of the great


00:32:15.140 --> 00:32:17.940
Reasons for switching to SBAs was they were meant to be quicker


00:32:17.940 --> 00:32:20.020
But the reality is after all these years


00:32:20.020 --> 00:32:24.980
they're loading so much javascript into the page and doing so much work in the browser in order to get the


00:32:24.980 --> 00:32:28.900
The html to be interactive that in fact they feel slower to the user


00:32:28.900 --> 00:32:31.620
Yeah, they just uh


00:32:31.620 --> 00:32:37.220
So for people who don't know htmx lets you put attributes on html not complicated stuff


00:32:37.220 --> 00:32:42.260
Like if you had an image you could say hx-get and give it a url


00:32:42.500 --> 00:32:45.140
And you could say hx-target is some other thing.


00:32:45.140 --> 00:32:47.820
So if you click on that image, it'll go,


00:32:47.820 --> 00:32:50.260
get this context, talk to Django,


00:32:50.260 --> 00:32:53.340
pull out back a fragment of HTML and pop it


00:32:53.340 --> 00:32:55.460
with possible animations and transitions and stuff


00:32:55.460 --> 00:32:58.180
into another section for like a master detail,


00:32:58.180 --> 00:33:02.860
like lists, details, view story.


00:33:02.860 --> 00:33:07.860
And it's just as nice as most single page app,


00:33:07.860 --> 00:33:11.020
most front end frameworks.


00:33:11.020 --> 00:33:13.320
I suppose if the thing completely loaded


00:33:13.320 --> 00:33:16.200
all the different data and had zero server interaction,


00:33:16.200 --> 00:33:19.160
but then the startup time of that would be completely bad,


00:33:19.160 --> 00:33:20.160
like you said, Carlton.


00:33:20.160 --> 00:33:23.080
So yeah, I think it's fantastic.


00:33:23.080 --> 00:33:25.680
And let's go back to like the beginner


00:33:25.680 --> 00:33:27.160
and the people doing simple stuff.


00:33:27.160 --> 00:33:28.800
HTMX is not just for beginners,


00:33:28.800 --> 00:33:31.280
but it really works well for them


00:33:31.280 --> 00:33:35.360
because they no longer have to learn a different framework


00:33:35.360 --> 00:33:37.360
or never different language and a framework


00:33:37.360 --> 00:33:39.160
like JavaScript and Vue.


00:33:39.160 --> 00:33:40.520
They don't have to write APIs.


00:33:40.520 --> 00:33:43.360
they just do the thing they're doing and all of a sudden,


00:33:43.360 --> 00:33:45.760
all this cool interactivity comes in, right?


00:33:45.760 --> 00:33:48.560
- Yeah, and like for a decade, it hasn't felt to me,


00:33:48.560 --> 00:33:50.760
you know, I'm 20 years in the business,


00:33:50.760 --> 00:33:53.120
I know how to do quite a lot,


00:33:53.120 --> 00:33:56.000
but for a decade or so, it hasn't felt to me feasible


00:33:56.000 --> 00:33:58.680
to be building web, good high quality,


00:33:58.680 --> 00:34:01.040
professional quality web applications single-handed.


00:34:01.040 --> 00:34:03.200
But it feels like that again.


00:34:03.200 --> 00:34:04.920
It feels like, do you know what?


00:34:04.920 --> 00:34:06.560
I don't need a whole team here.


00:34:06.560 --> 00:34:09.040
And with interest rates going up and inflation going up,


00:34:09.040 --> 00:34:14.240
You know, money being tight now, I honestly think there is a, a real big


00:34:14.240 --> 00:34:15.900
commercial competitive advantage.


00:34:15.900 --> 00:34:20.960
Coming back to sort of the backend and that's not just Django, but


00:34:20.960 --> 00:34:25.400
Jack Django flask and the, you know, rails, even if you want a different


00:34:25.400 --> 00:34:31.240
language, but those kinds of stacks where you, you can produce a really


00:34:31.240 --> 00:34:36.600
competent crowd backend in very little time, and then you can produce the


00:34:36.600 --> 00:34:41.800
front end that's rich enough and feels good and feels developed for a fraction of the


00:34:41.800 --> 00:34:45.800
team size, one, two developers instead of five, ten developers.


00:34:45.800 --> 00:34:46.800
Yeah.


00:34:46.800 --> 00:34:52.400
I think it also speaks to the wisdom, I would say, of Django has a templating language,


00:34:52.400 --> 00:34:54.200
but it's deliberately basic.


00:34:54.200 --> 00:35:00.960
You can use Jinja and Django, you know, by design, because 15 years, 18 years ago, the


00:35:00.960 --> 00:35:03.880
idea was, well, we're not a front end framework, who knows what's going to happen.


00:35:03.880 --> 00:35:09.640
that provides the opportunity for HTMX comes along, just slide it right in. Like Django


00:35:09.640 --> 00:35:14.840
is not doesn't have all this stuff built on top of it trying to do that too. So that can


00:35:14.840 --> 00:35:18.920
be a frustration for beginners that why doesn't why don't the templates do more, they actually


00:35:18.920 --> 00:35:25.240
do a lot, but it opens it up to, you know, HTMX. And then there's Django has third party


00:35:25.240 --> 00:35:28.680
package system. So there's one that Adam Johnson, who's a member of the community has Django


00:35:28.680 --> 00:35:34.840
HTML that has extensions, like basically everything you want to do, you can kind of copy and paste


00:35:34.840 --> 00:35:40.280
it in. I mean, understand what you're doing, but so this, yeah, Django HTML is a great resource.


00:35:40.280 --> 00:35:46.360
But it's not, it's not rocket science. It's not, you know, you're, you're not reinventing the wheel,


00:35:46.360 --> 00:35:50.520
right? You have a list view, detail view, you want to do auto scroll, you want to do some


00:35:50.520 --> 00:35:55.480
validation on a form, it's the same solve problems out there, you just have to know where to go quite


00:35:55.480 --> 00:35:57.480
Far with it. Yeah


00:35:57.480 --> 00:35:59.480
I I mean, yeah


00:35:59.480 --> 00:36:06.280
It's yeah, that would be an interesting question of where do you really need to not use it I mean


00:36:06.280 --> 00:36:08.920
Certainly


00:36:08.920 --> 00:36:12.440
Even in a team setting, you know, like it's just such


00:36:12.440 --> 00:36:17.080
Less complexity and it's arguably faster and it gets you what you need


00:36:17.080 --> 00:36:19.960
So the scenarios that I can think of


00:36:19.960 --> 00:36:21.640
Yeah, sorry. Go ahead carl


00:36:21.640 --> 00:36:22.860
- Well, I was just gonna say,


00:36:22.860 --> 00:36:25.760
and onto this point of Will's about where do you not use it.


00:36:25.760 --> 00:36:30.220
So I'm building a quite rich drag and drop interface


00:36:30.220 --> 00:36:33.920
for a tool.


00:36:33.920 --> 00:36:38.180
But it's pretty complex, it's pretty interactive,


00:36:38.180 --> 00:36:40.380
and I'm using Alpine to do that on the page.


00:36:40.380 --> 00:36:43.100
And then, but when it comes back to the server request,


00:36:43.100 --> 00:36:46.540
then dropping back to HTMX to send the things


00:36:46.540 --> 00:36:47.380
and get a chunk back,


00:36:47.380 --> 00:36:50.180
and I can quite often replace either a part


00:36:50.180 --> 00:36:52.940
or all of the Alpine component with the stuff


00:36:52.940 --> 00:36:57.420
from the HTMX, but still using rich JavaScript


00:36:57.420 --> 00:36:58.940
in the client where you need it.


00:36:58.940 --> 00:37:02.660
But you go an awful long way before you need that,


00:37:02.660 --> 00:37:04.140
you know, and you're dropping in forms


00:37:04.140 --> 00:37:05.980
and you've got a nested list view


00:37:05.980 --> 00:37:08.200
and you're fetching that nested list view


00:37:08.200 --> 00:37:10.460
and dropping that in place, and that's in a modal


00:37:10.460 --> 00:37:12.140
which is perhaps powered by Alpine,


00:37:12.140 --> 00:37:16.400
and it looks rich and smooth and it's everything you want,


00:37:16.400 --> 00:37:21.340
But the amount of code is very minimal, very minimal.


00:37:21.340 --> 00:37:23.960
- It's progressive too, right?


00:37:23.960 --> 00:37:26.560
I mean, Vue.js, when it first came on the scene,


00:37:26.560 --> 00:37:27.840
I forget if it's still doing this,


00:37:27.840 --> 00:37:29.500
but like its whole thing was the progressive,


00:37:29.500 --> 00:37:31.800
you know, you don't need the full React bundle,


00:37:31.800 --> 00:37:34.120
you can kind of ramp your way in.


00:37:34.120 --> 00:37:35.700
And so I think there's just more ways


00:37:35.700 --> 00:37:38.240
to get from here to there.


00:37:38.240 --> 00:37:39.840
And you don't have to just go to APIs


00:37:39.840 --> 00:37:42.080
and the full blown things.


00:37:42.080 --> 00:37:44.360
- I have to admit, last week I was,


00:37:44.360 --> 00:37:45.440
or perhaps the week before,


00:37:45.440 --> 00:37:47.880
I was sitting there going, I was doing everything with HTMX


00:37:47.880 --> 00:37:49.760
and I was like, I need a full page load here.


00:37:49.760 --> 00:37:51.360
I need it to refresh the whole page.


00:37:51.360 --> 00:37:52.200
How do I do that?


00:37:52.200 --> 00:37:53.020
How do I do that?


00:37:53.020 --> 00:37:54.960
And I had to step away, go and get a coffee.


00:37:54.960 --> 00:37:56.820
And as I was boiling the kettle, I was like,


00:37:56.820 --> 00:37:58.620
oh, I could just submit the form normally.


00:37:58.620 --> 00:38:00.880
(laughing)


00:38:00.880 --> 00:38:04.040
I'll fall back to just doing what the browser does


00:38:04.040 --> 00:38:04.880
by default.


00:38:04.880 --> 00:38:05.700
Oh yeah, okay.


00:38:05.700 --> 00:38:07.320
- You just always have to think if it's getting clever,


00:38:07.320 --> 00:38:08.560
like you're missing something.


00:38:08.560 --> 00:38:10.320
- Yeah, yeah, no, it was exactly that.


00:38:10.320 --> 00:38:13.040
It's like I was so in the zone that I'd forgotten,


00:38:13.040 --> 00:38:15.280
You know the base technology I was using


00:38:15.280 --> 00:38:18.480
Yeah, I I did a talk at pi bay


00:38:18.480 --> 00:38:22.640
the food cart edition a couple years ago, and I was talking about it on


00:38:22.640 --> 00:38:25.440
on x


00:38:25.440 --> 00:38:31.280
Twitter whatever that thing we're gonna figure this out until that thing's that that thing might be gone pretty soon, but we'll see


00:38:31.280 --> 00:38:36.560
Anyway, I I was talking about it and I said look you can you can write these awesome web apps with python


00:38:36.560 --> 00:38:40.660
You don't have to use javascript and somebody's like michael. That's really insensitive


00:38:41.280 --> 00:38:46.280
people, you shouldn't be degrading the JavaScript developers


00:38:46.280 --> 00:38:48.780
and like, you know what, that's not the message.


00:38:48.780 --> 00:38:50.940
It's the message that the language you choose,


00:38:50.940 --> 00:38:55.320
whatever it is, you can just embrace that and do a lot more.


00:38:55.320 --> 00:38:57.860
And like the biggest example of that is that


00:38:57.860 --> 00:39:02.860
this is a popular framework in the Node community, right?


00:39:02.860 --> 00:39:05.500
Which is JavaScript, right?


00:39:05.500 --> 00:39:07.940
And the big value here is that you don't have to


00:39:07.940 --> 00:39:10.360
also have APIs, you don't have to also have a front end


00:39:10.360 --> 00:39:13.700
and a backend framework in the context, right?


00:39:13.700 --> 00:39:15.240
Like you guys probably know,


00:39:15.240 --> 00:39:17.560
as I've been teaching and helping people deploy stuff,


00:39:17.560 --> 00:39:19.940
it's like, well, there's what your front end can do,


00:39:19.940 --> 00:39:23.500
and then there's the security of the browser,


00:39:23.500 --> 00:39:25.380
and there's all the constraints of that.


00:39:25.380 --> 00:39:26.700
And then your backend server,


00:39:26.700 --> 00:39:28.300
oh, it can talk to the database directly,


00:39:28.300 --> 00:39:29.420
and it could do these other things.


00:39:29.420 --> 00:39:31.900
But with HTMX, like your front end code


00:39:31.900 --> 00:39:34.660
executes in the same context as your backend code.


00:39:34.660 --> 00:39:36.460
So you don't have to have like two security models,


00:39:36.460 --> 00:39:38.180
two runtime models, two all these,


00:39:38.180 --> 00:39:39.860
two conceptual ways of like,


00:39:39.860 --> 00:39:44.900
Well, what's okay? It's happening here. So that means this like no it like all happens in one place and that's even valuable


00:39:44.900 --> 00:39:47.060
If you were doing node in javascript


00:39:47.060 --> 00:39:52.660
Yeah, no, absolutely. I think there's a on the htmx website. There's an awesome essay


00:39:52.660 --> 00:39:54.580
It could be the intercooler


00:39:54.580 --> 00:40:01.700
but it talks about this impedance between the two the two sides and the example it gives is graph ql, I think


00:40:01.700 --> 00:40:03.380
and


00:40:03.380 --> 00:40:07.860
The the graph ql gives amazing power onto the front end and you construct all these queries


00:40:07.860 --> 00:40:13.540
But are they safe and are they who knows and what companies end up often end up doing is white listing the query


00:40:13.540 --> 00:40:14.900
So it's in fact


00:40:14.900 --> 00:40:21.220
You can't leverage the full expressive power of graphql in the client because it's only a certain number of queries which are allowed


00:40:21.220 --> 00:40:27.140
um in order to get over this security problem those essays there are just phenomenal, um


00:40:27.140 --> 00:40:33.780
Well, we can we I mean we should mention so carlton's given two talks this year one of them at


00:40:34.260 --> 00:40:40.020
DjangoCon Europe, it touches upon the locality of behavior. I just put in the show notes for you,


00:40:40.020 --> 00:40:44.980
Michael. It's one of the essays, but some of his projects, I saw everyone around me was writing


00:40:44.980 --> 00:40:49.300
down. Perhaps you want to expound on that idea, Carlton, because it's not necessarily a new idea,


00:40:49.300 --> 00:40:52.020
but it really seemed to resonate at DjangoCon with people.


00:40:52.020 --> 00:40:58.020
Yeah, I mean, so the talk was called yak shaving to where the puck's going to be. And it was about,


00:40:58.020 --> 00:41:01.220
it's just been about what I've been doing since I stepped down as a fellow in


00:41:01.860 --> 00:41:07.220
End of march. So april I sat down to start writing software with django again rather than on django as I said at the beginning


00:41:07.220 --> 00:41:09.300
and


00:41:09.300 --> 00:41:14.980
the the sort of the hook that I built the whole talk around was htmx and this idea of locality behavior and so


00:41:14.980 --> 00:41:20.260
The example that I gave in the talk and which is from the essay there is you know


00:41:20.260 --> 00:41:27.780
htmx has got just the one html file open versus a jquery example, which is very similar, but it's over two files and


00:41:27.780 --> 00:41:29.300
you know


00:41:29.300 --> 00:41:34.740
But if you just it's not the only consideration but in that one case, you've got one file open versus two files open


00:41:34.740 --> 00:41:38.740
well, there's better locality of behavior where you've got one file open and


00:41:38.740 --> 00:41:41.380
that


00:41:41.380 --> 00:41:45.380
That that really when I read that essay really like struck a bell with me for years


00:41:45.380 --> 00:41:49.860
I've been talking to clients about this and like you've got a form a django form and it's perhaps only got


00:41:49.860 --> 00:41:55.940
Four lines or three lines. It's virtually nothing and it'll be off on its own in a separate forms.py file


00:41:56.100 --> 00:41:58.740
rather than next to the view that you're working on.


00:41:58.740 --> 00:42:00.700
And so you have to go and open that second form,


00:42:00.700 --> 00:42:02.780
stop five, PIVAR to see the form.


00:42:02.780 --> 00:42:04.300
And it's always just declares the fields


00:42:04.300 --> 00:42:05.140
and that's all it does.


00:42:05.140 --> 00:42:06.300
And then you go back to the view


00:42:06.300 --> 00:42:07.300
and you have to kind of remember it


00:42:07.300 --> 00:42:11.000
was if you just move that form kind of next to the view,


00:42:11.000 --> 00:42:15.540
all of a sudden it's all within one screen on your editor.


00:42:15.540 --> 00:42:17.420
And it's much easier to understand.


00:42:17.420 --> 00:42:21.380
And then your speed of development increases.


00:42:21.380 --> 00:42:23.300
And the more I've been playing with this,


00:42:23.300 --> 00:42:24.580
the more I've used this, it's just like,


00:42:24.580 --> 00:42:29.580
Yeah, actually, I'm able to work much faster by focus,


00:42:29.580 --> 00:42:31.380
particularly of a new code.


00:42:31.380 --> 00:42:33.620
Like when your code starts to get bigger and more gnarly


00:42:33.620 --> 00:42:35.340
and more curly, and there's more bits to it,


00:42:35.340 --> 00:42:36.700
then okay, you want to break it out


00:42:36.700 --> 00:42:41.700
so that it remains maintainable.


00:42:41.700 --> 00:42:43.200
But when you're first working on it


00:42:43.200 --> 00:42:45.580
and there isn't much of it and it's constantly in flux,


00:42:45.580 --> 00:42:48.140
keeping it all together, it just helps you go faster.


00:42:48.140 --> 00:42:50.180
It's this idea of locality of behavior.


00:42:50.180 --> 00:42:51.620
It's phenomenal.


00:42:51.620 --> 00:42:53.900
I'm just a massive fan of it.


00:42:53.900 --> 00:42:57.060
- Yeah, it's really a brilliant framework.


00:42:57.060 --> 00:43:00.820
So, for Django people, Django-htmx,


00:43:00.820 --> 00:43:03.580
that's where the magic is to get it easily integrated?


00:43:03.580 --> 00:43:07.260
- Yeah, so the basics of that is a middleware


00:43:07.260 --> 00:43:10.660
which will add an htmx attribute to the request object


00:43:10.660 --> 00:43:11.580
which lets you query it.


00:43:11.580 --> 00:43:13.300
So is this an htmx request?


00:43:13.300 --> 00:43:14.420
Has it got this header?


00:43:14.420 --> 00:43:16.460
Is it wanting to redirect?


00:43:16.460 --> 00:43:18.160
Is it wanting to do a full page refresh?


00:43:18.160 --> 00:43:21.300
Is it got the various headers that htmx sends


00:43:21.300 --> 00:43:22.900
that will embed those?


00:43:22.900 --> 00:43:26.740
A few other niceties as well. But yeah, you you may as well use that. That's a good package from that


00:43:26.740 --> 00:43:29.540
Yeah, yeah adam knows what he's talking about


00:43:29.540 --> 00:43:32.420
Nice. All right


00:43:32.420 --> 00:43:40.260
Django 18 18 years old. Yes. Yes. Amazingly amazingly. what can I say?


00:43:40.260 --> 00:43:44.100
Um, we can talk about enough to vote. Yeah. Yeah old enough to vote. Yeah


00:43:44.100 --> 00:43:50.100
It is old enough to vote not to drink yet, so it's not going to get into trouble and yet


00:43:51.300 --> 00:43:52.500
It's only solid in Europe.


00:43:52.500 --> 00:43:53.000
Yeah, OK.


00:43:53.000 --> 00:43:53.700
Well, that's true.


00:43:53.700 --> 00:43:54.460
Yes, OK.


00:43:54.460 --> 00:43:57.020
In Europe, it actually-- it totally is.


00:43:57.020 --> 00:43:59.580
I remember when we lived there, my daughters were 16,


00:43:59.580 --> 00:44:01.460
and we took them out for their 16th birthday.


00:44:01.460 --> 00:44:01.980
So--


00:44:01.980 --> 00:44:03.140
OK, fantastic.


00:44:03.140 --> 00:44:04.060
Yeah.


00:44:04.060 --> 00:44:06.860
Yeah, but in the US, we have these rules.


00:44:06.860 --> 00:44:08.060
Well, yeah.


00:44:08.060 --> 00:44:10.580
I was going to say, so two things.


00:44:10.580 --> 00:44:14.220
So Django has major releases updated every eight months.


00:44:14.220 --> 00:44:18.980
So 4.2 came out in April, 5.0 come out in December.


00:44:18.980 --> 00:44:25.220
In between, there's 4.2.1, 4.2.2. This is all the work the fellows, Carlton, would do.


00:44:25.220 --> 00:44:30.020
But there's also, so in the Django News newsletter, there is almost every day,


00:44:30.020 --> 00:44:36.180
there is a new PR accepted and merged into Django. So on the Django News newsletter,


00:44:36.180 --> 00:44:42.180
one of the things we have now is a section highlighting the changes this week. And I


00:44:42.180 --> 00:44:45.420
And I think last week there were 18 new PRs.


00:44:45.420 --> 00:44:48.780
And that's not just someone opening it up.


00:44:48.780 --> 00:44:51.940
That's like open, discussed, accepted, reviewed.


00:44:51.940 --> 00:44:54.620
There's so much activity going on.


00:44:54.620 --> 00:44:57.540
So even as it's 18 years old and it is mature,


00:44:57.540 --> 00:44:59.500
there is still just so much happening.


00:44:59.500 --> 00:45:01.380
And I think that's one of the messages Carlton


00:45:01.380 --> 00:45:03.740
and I try to get to people is it's not just


00:45:03.740 --> 00:45:06.100
this static thing at all.


00:45:06.100 --> 00:45:07.460
There's so much that's happening.


00:45:07.460 --> 00:45:10.440
And yet it won't break on you, unlike some other newer


00:45:10.440 --> 00:45:11.440
technologies.


00:45:11.440 --> 00:45:18.640
I mean, just one quick talk about the influx of tickets.


00:45:18.640 --> 00:45:19.640
Why does Django need fellows?


00:45:19.640 --> 00:45:23.560
The reason it needs fellows is because there's basically five new tickets every single day.


00:45:23.560 --> 00:45:28.440
There's over a thousand new tickets a year, 1,200 new tickets a year every year.


00:45:28.440 --> 00:45:29.880
And they keep getting handled.


00:45:29.880 --> 00:45:32.640
They keep getting dealt with.


00:45:32.640 --> 00:45:34.400
The PRs keep getting merged.


00:45:34.400 --> 00:45:35.720
The security releases keep coming.


00:45:35.720 --> 00:45:37.920
And without the fellows, it just wouldn't have happened.


00:45:37.920 --> 00:45:45.280
Would have sort of just ground into an ever bigger ball of unanswered tickets unresponded, you know things and so


00:45:45.280 --> 00:45:48.880
Without it's it's a project of such a size that without the paid


00:45:48.880 --> 00:45:52.720
role, it just wouldn't be maintainable. Yeah, I mean


00:45:52.720 --> 00:45:58.960
I'm just gonna say some of these do get resolved. I mean how long was lily's one on database constraints that was


00:45:58.960 --> 00:46:03.040
Okay. Yeah, so 13 years. Yeah tell that story. Yeah


00:46:04.000 --> 00:46:07.200
So this is going to be this is one of my favorite features of django 5.0


00:46:07.200 --> 00:46:11.680
It's coming out. So we haven't even talked about django 4.2, but django 5.0 is coming out soon and in there


00:46:11.680 --> 00:46:16.080
So there's good. There's some really big ones. There's database defaults


00:46:16.080 --> 00:46:20.160
So in you've always on a model field you've always been able to declare a default value


00:46:20.160 --> 00:46:25.440
So, you know if there isn't one give it a date time field give it now if it is a you know, classic default


00:46:25.440 --> 00:46:30.880
um, but those are from 5.0 you'll be able to declare those as database defaults, which


00:46:31.520 --> 00:46:35.040
You may not seem sound like much but a it's quicker. It's moving work into the database


00:46:35.040 --> 00:46:41.200
But b not every not every connection to your database goes by your django application. So you're able to have


00:46:41.200 --> 00:46:46.320
um, you know a database level default and so if there is a script which isn't using the django rm


00:46:46.320 --> 00:46:52.800
Then you still get the value of that and that ties in with work that's been done on constraints with database constraints


00:46:52.800 --> 00:46:56.000
Have been massively powered up and they'll even now, you know


00:46:56.000 --> 00:47:00.420
Your form generation will generate validators that are based on the database constraints


00:47:01.040 --> 00:47:08.580
And it's ah just so much richness coming out. I think I really think we're also going to get database cascades


00:47:08.580 --> 00:47:12.960
In django 5.0. It's so it's nearly ready. There's a month or so before the feature freeze


00:47:12.960 --> 00:47:18.800
I think it's going to go in in which case we're going to have db defaults and db level cascades both


00:47:18.800 --> 00:47:23.600
You know added to jango both of those it's a decade or more. Um


00:47:23.600 --> 00:47:30.320
In the resolving in a new release and that's it's just oh wow, that's really exciting. Um


00:47:30.320 --> 00:47:37.400
A job for a lot of people, a lot of companies, the database is the source of truth for the


00:47:37.400 --> 00:47:38.400
exact right.


00:47:38.400 --> 00:47:42.280
And like, sure, your code may talk to it, but what is in the database, like there are


00:47:42.280 --> 00:47:47.960
people whose job it is to defend the schema, they call them DBAs, right?


00:47:47.960 --> 00:47:48.960
Yeah.


00:47:48.960 --> 00:47:51.800
So Django 4.2 added DB comments.


00:47:51.800 --> 00:47:55.920
So you could add schema level comments to your model fields to explain the use of the


00:47:55.920 --> 00:47:56.920
model field.


00:47:56.920 --> 00:48:01.920
It's for people who are serious about their databases,


00:48:01.920 --> 00:48:04.180
these features are just massively important.


00:48:04.180 --> 00:48:10.360
- Yeah, and I think it's certainly worth considering


00:48:10.360 --> 00:48:13.160
that there will be other apps, there will be other tools,


00:48:13.160 --> 00:48:15.400
and maybe even data science, right?


00:48:15.400 --> 00:48:17.480
The data science angle is huge.


00:48:17.480 --> 00:48:19.540
Often wants to now talk to the database,


00:48:19.540 --> 00:48:23.040
and even if it's in Python, it's unlikely that in Jupyter


00:48:23.040 --> 00:48:24.260
you're gonna pull in your ORM,


00:48:24.260 --> 00:48:26.660
you're probably using some other data science


00:48:26.660 --> 00:48:29.300
oriented library to talk to that.


00:48:29.300 --> 00:48:32.060
And so pushing those defaults down is valuable.


00:48:32.060 --> 00:48:34.500
- Well so Michael, you're as situated as anyone


00:48:34.500 --> 00:48:35.340
to answer this.


00:48:35.340 --> 00:48:36.500
Carlton and I are in the Django world,


00:48:36.500 --> 00:48:39.900
but how do we bridge the data science to web?


00:48:39.900 --> 00:48:41.200
Doesn't need to be Django world.


00:48:41.200 --> 00:48:43.620
Like what, do they need to be on the web?


00:48:43.620 --> 00:48:45.860
And if so, what's holding them back?


00:48:45.860 --> 00:48:49.600
'Cause it just feels like this megaton star


00:48:49.600 --> 00:48:51.900
of data science in this tiny little web thing.


00:48:51.900 --> 00:48:52.780
How do they share stuff?


00:48:52.780 --> 00:48:54.620
How do they interact with it?


00:48:54.620 --> 00:48:55.740
- Yeah, you've got your notebook


00:48:55.740 --> 00:48:58.140
and then you wanna publish it somewhere, right?


00:48:58.140 --> 00:48:59.980
I mean--


00:48:59.980 --> 00:49:02.980
- Yeah, or just share your information


00:49:02.980 --> 00:49:05.700
or you have a database of COVID things.


00:49:05.700 --> 00:49:07.460
For example, in the UK, you wanna put online


00:49:07.460 --> 00:49:11.740
but let people make change in some way or make requests.


00:49:11.740 --> 00:49:13.900
I mean, the data isn't generally static.


00:49:13.900 --> 00:49:17.300
- So I think there's two answers from my perspective.


00:49:17.300 --> 00:49:21.140
I think there are the frameworks that are doing that


00:49:21.140 --> 00:49:23.280
and that would be things like Streamlit,


00:49:23.280 --> 00:49:26.660
is it Dash?


00:49:26.660 --> 00:49:29.280
Not Dashly, but the other dashboarding one.


00:49:29.280 --> 00:49:30.560
There's panel,


00:49:30.560 --> 00:49:34.380
Street, did I say Streamlit?


00:49:34.380 --> 00:49:35.520
Probably started with that one, right?


00:49:35.520 --> 00:49:38.320
So those kinds of things where you can get like kind of


00:49:38.320 --> 00:49:42.160
a simplified view, that's kind of an interactive thing.


00:49:42.160 --> 00:49:44.000
You wouldn't look at it like we're looking


00:49:44.000 --> 00:49:45.660
at this Django site and go, yeah, it looks like,


00:49:45.660 --> 00:49:46.800
it feels like this, right?


00:49:46.800 --> 00:49:47.800
It doesn't feel like that.


00:49:47.800 --> 00:49:50.320
It feels like you pushed a kind of a interactive,


00:49:50.320 --> 00:49:53.600
>> I think that's a pretty good answer for a lot of people.


00:49:53.600 --> 00:49:55.520
I think another is honestly,


00:49:55.520 --> 00:49:58.560
the stuff with HTMX.


00:49:58.560 --> 00:50:02.640
You need a lot of interactivity in many of these things,


00:50:02.640 --> 00:50:07.520
these data screens and to get that interactivity often.


00:50:07.520 --> 00:50:09.360
>> You don't need like G3 or something.


00:50:09.360 --> 00:50:11.560
>> Yeah. You need it to remember,


00:50:11.560 --> 00:50:15.600
we computed this stuff and I want it to give me the other info.


00:50:15.600 --> 00:50:18.720
You need a lot of interactivity.


00:50:18.720 --> 00:50:21.560
You kind of need, just because how long it takes


00:50:21.560 --> 00:50:23.400
to do a lot of the computation,


00:50:23.400 --> 00:50:26.500
you want a somewhat stateful type of behavior.


00:50:26.500 --> 00:50:30.020
And I think HTMX with Plotly or something like that,


00:50:30.020 --> 00:50:34.240
even Matplotlib, I've done some Matplotlib stuff,


00:50:34.240 --> 00:50:37.120
and just like returned it as an image in different areas.


00:50:37.120 --> 00:50:37.960
And yeah.


00:50:37.960 --> 00:50:40.860
Carlton, what do you think?


00:50:40.860 --> 00:50:42.460
- Yeah, no, I'm nodding, that's a good approach,


00:50:42.460 --> 00:50:44.800
because you can quite easily put in


00:50:44.800 --> 00:50:46.480
a little loading indicator there,


00:50:46.480 --> 00:50:48.600
when the HTML is ready.


00:50:48.600 --> 00:50:51.240
And just even if it took the same amount of time


00:50:51.240 --> 00:50:53.440
by just putting in that little animation while it loads,


00:50:53.440 --> 00:50:55.800
it feels as if it's responsive and doing something.


00:50:55.800 --> 00:50:57.480
And it's not rocket science.


00:50:57.480 --> 00:50:59.120
- Indexer, yep.


00:50:59.120 --> 00:51:01.360
- Yeah, you know.


00:51:01.360 --> 00:51:05.280
So I was nodding particularly when you said just,


00:51:05.280 --> 00:51:07.480
you know, use matplotlib and pull it in as an image.


00:51:07.480 --> 00:51:09.360
It's like, yeah, that goes an awful long way


00:51:09.360 --> 00:51:10.600
doing that kind of thing.


00:51:10.600 --> 00:51:13.560
- Yeah, I wasn't familiar with Streamlit.


00:51:13.560 --> 00:51:14.400
That's really cool.


00:51:14.400 --> 00:51:15.220
I mean, it makes sense.


00:51:15.220 --> 00:51:19.060
It's got to be some people doing this, solving this problem.


00:51:19.060 --> 00:51:22.460
- Yeah, Streamlit is really, really interesting.


00:51:22.460 --> 00:51:27.660
Basically, you have a regular script


00:51:27.660 --> 00:51:28.700
that's not even a web thing,


00:51:28.700 --> 00:51:30.880
and you put decorators onto the functions,


00:51:30.880 --> 00:51:33.060
and it says, oh, this parameter here


00:51:33.060 --> 00:51:35.600
is gonna be a combo box or something,


00:51:35.600 --> 00:51:38.140
and it knows how to wire the events.


00:51:38.140 --> 00:51:42.440
It's some voodoo, but it's cool.


00:51:42.440 --> 00:51:43.900
But it does look like a Streamlit app, right?


00:51:43.900 --> 00:51:47.680
it doesn't look like, well, here's my own custom website.


00:51:47.680 --> 00:51:49.120
It's like, well, here's my Streamlit app


00:51:49.120 --> 00:51:50.040
that I built for you, right?


00:51:50.040 --> 00:51:51.020
So there's--


00:51:51.020 --> 00:51:53.420
- Right, but I mean, and yet, you know,


00:51:53.420 --> 00:51:55.260
many people are using Tailwind now.


00:51:55.260 --> 00:51:57.040
And so every site looks like a Tailwind site


00:51:57.040 --> 00:51:59.220
and before it was Bootstrap and before, you know,


00:51:59.220 --> 00:52:01.420
so it's like, we can't get too high on our horse about it,


00:52:01.420 --> 00:52:03.140
you know, 'cause at the end of the day,


00:52:03.140 --> 00:52:06.420
it's like, it just needs to look modern-ish and like move on.


00:52:06.420 --> 00:52:09.060
- Yeah, absolutely, absolutely.


00:52:09.060 --> 00:52:11.900
And getting something out is super important.


00:52:11.900 --> 00:52:16.900
- Okay, so Django is, I would say it is the oldest


00:52:16.900 --> 00:52:22.260
popular Python web framework period, right?


00:52:22.260 --> 00:52:23.600
- Yeah, probably.


00:52:23.600 --> 00:52:24.700
- There may have been ones before,


00:52:24.700 --> 00:52:27.720
but it certainly seems to be of the few


00:52:27.720 --> 00:52:29.320
that are really, really popular,


00:52:29.320 --> 00:52:31.720
the one that's been around the longest.


00:52:31.720 --> 00:52:33.980
- Yeah, I mean, yeah, and I think it's,


00:52:33.980 --> 00:52:36.360
I mean, what's amazing for me about it


00:52:36.360 --> 00:52:40.940
is the way the community kind of keeps refreshing itself.


00:52:40.940 --> 00:52:45.780
Like it's not like the founders of Django


00:52:45.780 --> 00:52:48.780
are still merging every commit and every PR, far from it.


00:52:48.780 --> 00:52:53.900
I think Simon Willis made a commit in either 4.1 or 4.2,


00:52:53.900 --> 00:52:55.580
I can't remember, it was his first one for six years


00:52:55.580 --> 00:52:56.420
kind of thing.


00:52:56.420 --> 00:52:58.900
- He doesn't even live in Lawrence anymore, I mean, come on.


00:52:58.900 --> 00:52:59.740
- Yeah, right, exactly.


00:52:59.740 --> 00:53:01.420
- None of them do, yeah.


00:53:01.420 --> 00:53:05.220
- But the point being is that it was set up deliberately


00:53:05.220 --> 00:53:07.020
to like hand it on, let it go.


00:53:07.020 --> 00:53:09.300
And I think Django's probably on its fourth


00:53:09.300 --> 00:53:14.300
or even fifth cohort of generation of maintainers now.


00:53:14.300 --> 00:53:18.080
And there's a whole fresh batch of faces in the community


00:53:18.080 --> 00:53:19.920
who are doing new and exciting things.


00:53:19.920 --> 00:53:22.300
And it's just so wonderful to see


00:53:22.300 --> 00:53:24.260
'cause you get old and long in the tooth


00:53:24.260 --> 00:53:27.300
and you think, "Oh, I'm worried about the future of Django."


00:53:27.300 --> 00:53:29.500
No, Django's doing great, actually.


00:53:29.500 --> 00:53:30.760
- Yeah.


00:53:30.760 --> 00:53:31.600
- Well, and this is something--


00:53:31.600 --> 00:53:32.420
- Yeah, just think of it.


00:53:32.420 --> 00:53:33.260
Go ahead, go on.


00:53:33.260 --> 00:53:34.920
- I was just gonna say that at DjangoCon,


00:53:34.920 --> 00:53:36.260
we talk about Django things.


00:53:36.260 --> 00:53:38.940
And one of the things we don't necessarily describe


00:53:38.940 --> 00:53:47.180
others is what makes Django different than other frameworks out there. It is the community.


00:53:47.180 --> 00:53:52.220
Flask is an amazing resource and David Lord and people do great work, but there's no Flask


00:53:52.220 --> 00:54:02.580
cons. It's its own thing, but Django is relatively unique in that it's a non-profit. It has fellows,


00:54:02.580 --> 00:54:08.180
it has conferences, it has this whole ecosystem, third-party packages. So there's the saying,


00:54:08.180 --> 00:54:12.860
for the framework, stay for the community. It really is true, but you can't get that


00:54:12.860 --> 00:54:19.300
across to someone who just looks at the Django website, which looks like what it is, which


00:54:19.300 --> 00:54:22.540
it hasn't been redone in a number of years. You think, "Oh, maybe it's a little bit of


00:54:22.540 --> 00:54:27.260
a stale, crusty Python thing." It's like, no, it's alive. There's changes every day.


00:54:27.260 --> 00:54:32.820
You're just not seeing it. And it's hard to... You're HTMX. Carson does amazing work, but


00:54:32.820 --> 00:54:38.140
I think it's pretty much just him. It's not this community of dozens and dozens of people.


00:54:38.140 --> 00:54:43.280
And so one of the exciting things for Carleton and me is we're both transitioning away a


00:54:43.280 --> 00:54:46.380
little bit, but still helping bring in new people.


00:54:46.380 --> 00:54:49.300
And that's healthy, right?


00:54:49.300 --> 00:54:54.620
Like we know a bit, but sometimes I get, you know, I know the things that kind of I would


00:54:54.620 --> 00:54:56.420
like to change that may not change as quickly.


00:54:56.420 --> 00:54:59.060
And then new people have great ideas and enthusiasm.


00:54:59.060 --> 00:55:03.060
It's like, yes, let me support you because I don't want to get stale with this.


00:55:03.060 --> 00:55:04.620
Yeah, absolutely.


00:55:04.620 --> 00:55:09.620
- Pradip Bhan asks a pretty good question,


00:55:09.620 --> 00:55:12.140
which I think is a good question for any really large


00:55:12.140 --> 00:55:14.340
project that's been around a long time.


00:55:14.340 --> 00:55:17.140
It's like how do you get more involved with Django?


00:55:17.140 --> 00:55:20.100
For someone who's not proficient in Django,


00:55:20.100 --> 00:55:22.540
like super, super proficient,


00:55:22.540 --> 00:55:23.780
given that it's a mature project,


00:55:23.780 --> 00:55:26.380
it's really hard to get that first PR written.


00:55:26.380 --> 00:55:30.940
- Okay, so one thing that often comes up,


00:55:30.940 --> 00:55:33.000
oh, there's no low-hanging fruit,


00:55:33.000 --> 00:55:38.680
It's a mature framework. There's nothing easy to do inside. Well, yes and no. Yes. No, there are there are very few like


00:55:38.680 --> 00:55:41.160
You know nothing fixes, you know that


00:55:41.160 --> 00:55:47.560
An absolute beginner can just come in and get because they get snapped up really quickly and they just don't hang around for very long


00:55:47.560 --> 00:55:53.640
But we've got something like 800 open accepted tickets on django now of those 800 tickets


00:55:53.640 --> 00:55:59.080
Some of them are truly hard like adding database defaults, which took you know


00:55:59.320 --> 00:56:05.560
It took a dozen years and five django con sprints and you know, who knows what to actually get?


00:56:05.560 --> 00:56:08.040
over the line that's


00:56:08.040 --> 00:56:14.600
Truly hard, but most of the tickets aren't like that. Most of the tickets are no harder than a problem that you're solving in your everyday


00:56:14.600 --> 00:56:17.460
django or python


00:56:17.460 --> 00:56:22.040
programming work and what they need is time and love and so


00:56:22.040 --> 00:56:25.320
Um django cons i've run. Um django sprints


00:56:25.320 --> 00:56:28.600
I've run a kind of getting contributed workshop and the goal of it. You've only got a couple of hours


00:56:28.600 --> 00:56:33.360
It's only like half a morning and the goal is not to necessarily get your PR in but it's just to get you


00:56:33.360 --> 00:56:37.600
To look at a ticket in a bit of depth get set up with the test suite


00:56:37.600 --> 00:56:39.160
You know install it get set up


00:56:39.160 --> 00:56:41.220
but get involved in a ticket and come to


00:56:41.220 --> 00:56:48.120
Understand that ticket and realize that actually after that a couple of hours of thinking about that ticket you are literally the world expert on


00:56:48.120 --> 00:56:53.100
That that ticket and even though you're not like old established. I'm not a Django fellow


00:56:53.100 --> 00:56:58.440
I'm not established contributor you you as the world expert on that ticket you have


00:56:58.440 --> 00:57:02.880
a valid opinion and your insight will be valuable and yes you have to dig around


00:57:02.880 --> 00:57:08.240
and you have to learn some source code but you'll have an idea and it's


00:57:08.240 --> 00:57:11.540
going to be on the right track and if you put the time and work and love in


00:57:11.540 --> 00:57:16.000
you'll be able to resolve that ticket and once people have had that experience


00:57:16.000 --> 00:57:19.320
then it's like oh I can do another one and I can do another one and I can it


00:57:19.320 --> 00:57:23.280
can become the little side hobby and actually then I'm a Django contributor


00:57:23.280 --> 00:57:27.960
so it's take your time pick a ticket really focus on it become the world


00:57:27.960 --> 00:57:29.400
expert


00:57:29.400 --> 00:57:31.880
And in so doing even if you don't resolve the ticket


00:57:31.880 --> 00:57:37.400
You will learn an awful lot about django. You think you know django by developing django apps all day


00:57:37.400 --> 00:57:41.960
Well, you start digging around in the code. I'll guarantee you'll know it a lot better afterwards


00:57:41.960 --> 00:57:45.000
so that would be what I say is


00:57:45.000 --> 00:57:51.960
Find a ticket that grabs you and just take that little bit of time to to to really understand it


00:57:51.960 --> 00:57:55.160
Yeah, that's great advice


00:57:55.160 --> 00:57:58.780
I guess there's probably sprints you could drop into at some conferences


00:57:58.780 --> 00:58:03.160
Yeah, so after the django concert there's two days of sprint stay around


00:58:03.160 --> 00:58:09.480
There's a really great opportunity to meet people who are contributing and to get into contributing and be able to sit in the same room


00:58:09.480 --> 00:58:12.920
As somebody and say well, you know, how do I get started? How you know?


00:58:12.920 --> 00:58:14.680
Yeah, that is a good good play


00:58:14.680 --> 00:58:19.880
But you can I just sit there and look over your shoulder and as you two work on this. Yes. Yes


00:58:19.880 --> 00:58:24.440
I mean, yeah, that was the most recent django con. So there's django con us django con europe


00:58:24.440 --> 00:58:28.360
there's going to be a DjangoCon Africa this year for the first time. But the most recent DjangoCon


00:58:28.360 --> 00:58:33.960
US, I was at a sprint, talking with David Lord, who's the lead maintainer on Flask. And he had a


00:58:33.960 --> 00:58:38.120
question about something or other. And someone was like, Oh, like Simon Wilson knows about that.


00:58:38.120 --> 00:58:43.720
So I was like, Oh, grab Simon over and they'd never met. And now it's like, Oh, like, so if


00:58:43.720 --> 00:58:48.040
you can stay for the sprints, it seems like the nothing part, it's actually, I'd almost take the


00:58:48.040 --> 00:58:53.160
sprints over the conference, if you could, because it's literally just like anyone you want to talk


00:58:53.160 --> 00:58:59.200
to. And you don't have to, "What are you working on?" They're the best part. Maybe it seems


00:58:59.200 --> 00:59:03.720
intimidating, but it's really not. And to Carlton's point, the community really is welcoming.


00:59:03.720 --> 00:59:07.840
So even, especially if you're inexperienced, if you're making an effort and people can


00:59:07.840 --> 00:59:11.640
see that, they will be encouraging and want to loop you in.


00:59:11.640 --> 00:59:18.360
I should mention, there's a new, we can put a link, program called Django-Naut that's


00:59:18.360 --> 00:59:26.280
trying to pilot having some mentors to give this kind of hands-on help a little bit. So


00:59:26.280 --> 00:59:30.080
that's a new program. It's only, I think, six people right now, but they're trying to


00:59:30.080 --> 00:59:35.360
foster more mentoring of this type. But it is a challenge for a mature framework, right?


00:59:35.360 --> 00:59:40.400
You probably can't just go fix HTML. It's probably a little more meaty, but it's not


00:59:40.400 --> 00:59:44.360
all hard just because it's there. It's just that it got stuck for whatever reason. It


00:59:44.360 --> 00:59:46.800
It's as Carlton said, that oomph of someone to come in


00:59:46.800 --> 00:59:49.500
and put a couple hours and then be the world expert.


00:59:49.500 --> 00:59:51.480
- Absolutely.


00:59:51.480 --> 00:59:56.360
So what's the async story, Django these days?


00:59:56.360 --> 00:59:57.960
How's it looking?


00:59:57.960 --> 00:59:59.140
- It's looking really good.


00:59:59.140 --> 01:00:01.840
So do we get to talk about 4.2?


01:00:01.840 --> 01:00:06.840
Yes, Django 4.2 brought in async support


01:00:06.840 --> 01:00:08.920
for streaming responses.


01:00:08.920 --> 01:00:11.120
So within the core framework itself,


01:00:11.120 --> 01:00:12.560
you can do service and events,


01:00:12.560 --> 01:00:16.720
you can have a request come in, you can keep it open without blocking the worker,


01:00:16.720 --> 01:00:22.400
and you can periodically send messages down. That's really quite exciting in 4.2.


01:00:22.400 --> 01:00:30.080
And the other thing that came in 4.2 was PsychoPG 3, which allows async database connections.


01:00:30.080 --> 01:00:36.400
And so there's a link in the show notes there. Somebody put together exactly what I was hoping


01:00:36.400 --> 01:00:41.760
for which was the chat example but done 100% async.


01:00:41.760 --> 01:00:47.240
So without blocking ORM call with the server center events instead of long polling or without


01:00:47.240 --> 01:00:52.880
having to use an add on like channels which add on channels is great if you need it but


01:00:52.880 --> 01:00:57.400
isn't it cool that you can do server center events just in Django.


01:00:57.400 --> 01:01:03.880
And then in 5.0 which is coming we're going to have HTTP disconnect handling so there's


01:01:03.880 --> 01:01:08.760
long-lived requests if the client disconnects, you'll get an asyncio cancel there in your


01:01:08.760 --> 01:01:11.520
view and you'll be able to respond to it and do any cleanup.


01:01:11.520 --> 01:01:17.800
We've also in 5.0, we're going to have async signals, which gives you an 100% async request


01:01:17.800 --> 01:01:19.360
response pathway if you want it.


01:01:19.360 --> 01:01:24.080
Because before the only blocking bit there was the signals, which was synced.


01:01:24.080 --> 01:01:30.600
So you still had to do this sync to async, jump into a thread pool to dispatch the signals.


01:01:30.600 --> 01:01:35.640
back. If you've got async signal handles will all be async as well. So the entire request response


01:01:35.640 --> 01:01:44.600
flow can be async and then sessions is going to be async in 5.0 as well. Auth is going to be async


01:01:44.600 --> 01:01:52.440
as well in 5.0. So those kind of core flows are, you know, this is on top of the async interface


01:01:52.440 --> 01:01:58.520
to the ORM which was added. You know, it's all fleshing out and there's a few decorators which,


01:01:58.520 --> 01:02:05.160
You know aren't yet done, but they'll be done over the next few releases. It's really enriched and it's like yes. Yes


01:02:05.160 --> 01:02:09.960
Five six years seven years of work has gone into this and


01:02:09.960 --> 01:02:17.720
It's really maturing nicely. So I think async in django is very a very exciting time. so people say I want


01:02:17.720 --> 01:02:21.720
Yeah fast api, right? That's always the thing. Well, why not just use fast api?


01:02:21.720 --> 01:02:25.800
Well, no, if you want to use fast api go use fast api, but if you're using django


01:02:26.120 --> 01:02:31.960
But you need a couple of these endpoints which you need higher throughput or you know, what or you know a real-time or two


01:02:31.960 --> 01:02:36.120
Two-directional traffic or whatever. You shouldn't have to switch red framework just to have a couple of these


01:02:36.120 --> 01:02:42.920
These endpoints right? It's like python python needs to be in every area because you shouldn't have to switch language just because you need


01:02:42.920 --> 01:02:44.680
I don't know what


01:02:44.680 --> 01:02:49.080
To be a bit more serious about things so python needs to be able to account for those more serious use cases


01:02:49.080 --> 01:02:55.320
well same with django it needs an async story because you shouldn't have to change your web framework just for you know, service and events or


01:02:55.320 --> 01:02:57.880
or I don't know what other async,


01:02:57.880 --> 01:03:01.800
you know, a bit of real time, you might need.


01:03:01.800 --> 01:03:06.120
- Yeah, and nothing, almost nothing waits on other things


01:03:06.120 --> 01:03:08.160
like web frameworks do, right?


01:03:08.160 --> 01:03:11.720
They wait on database calls, they wait on the network,


01:03:11.720 --> 01:03:15.040
they wait on caches, you know, like Redis,


01:03:15.040 --> 01:03:18.280
they wait on maybe calling other APIs,


01:03:18.280 --> 01:03:21.920
like almost everything they do is coordinating


01:03:21.920 --> 01:03:23.440
other systems and waiting and then turning that


01:03:23.440 --> 01:03:25.120
to HTML or JSON.


01:03:25.120 --> 01:03:28.120
And so having this rich async support is fantastic.


01:03:28.120 --> 01:03:30.620
- Yeah, no, I mean, it's really coming on.


01:03:30.620 --> 01:03:33.320
And there are still, you know, there are bits inside,


01:03:33.320 --> 01:03:36.060
you know, I don't know if you need the, I don't know,


01:03:36.060 --> 01:03:39.260
user passage test decorator, permissions decorator.


01:03:39.260 --> 01:03:40.900
Is that yet async defined?


01:03:40.900 --> 01:03:43.600
I'm not sure if it is, but okay, that's not,


01:03:43.600 --> 01:03:45.740
we haven't got to, maybe we have, I need to check,


01:03:45.740 --> 01:03:47.040
but we haven't got to that bit yet.


01:03:47.040 --> 01:03:50.740
But okay, those kind of bits, we'll get there with those,


01:03:50.740 --> 01:03:53.080
but that kind of core, you know,


01:03:53.080 --> 01:03:55.080
The core i'm building something


01:03:55.080 --> 01:04:01.080
On the request response cycle with auth with sessions. Yeah, that's all now done. and so


01:04:01.080 --> 01:04:03.800
really maturing


01:04:03.800 --> 01:04:05.800
excellent


01:04:05.800 --> 01:04:07.960
Getting short on time here guys


01:04:07.960 --> 01:04:13.000
It's so nice to have you be in charge of this I should say right because whenever there's those pauses like my instinct is


01:04:13.000 --> 01:04:18.600
To jump in and like look at our notes, but like just like nope, you're you're captain of the ship. It's so nice. Yeah


01:04:19.800 --> 01:04:24.040
We're just out for a sunset cruise in the old bow,


01:04:24.040 --> 01:04:25.320
or coming back to the harbor.


01:04:25.320 --> 01:04:29.480
So what else about the future?


01:04:29.480 --> 01:04:32.720
We talked about Django being 18, a lot of the cool ideas


01:04:32.720 --> 01:04:34.360
and projects and resources.


01:04:34.360 --> 01:04:37.720
But what about the future, some of which we just covered,


01:04:37.720 --> 01:04:40.920
is really exciting, maybe we haven't given time to yet?


01:04:40.920 --> 01:04:47.720
I'm personally excited about the new people getting involved.


01:04:47.720 --> 01:04:49.980
I know that's not as tangible for folks,


01:04:49.980 --> 01:04:51.940
but coming from DjangoCon, coming,


01:04:51.940 --> 01:04:53.820
like I just stepped off the board


01:04:53.820 --> 01:04:56.060
as treasurer for three years.


01:04:56.060 --> 01:04:58.320
You know, I know who the new treasurer is,


01:04:58.320 --> 01:04:59.460
the current president.


01:04:59.460 --> 01:05:01.860
Like I'm really excited about the new people.


01:05:01.860 --> 01:05:04.420
And so I don't, for a while during COVID,


01:05:04.420 --> 01:05:06.900
I think some of us had concerns about like,


01:05:06.900 --> 01:05:08.580
you know, how do we keep this afloat


01:05:08.580 --> 01:05:11.300
and not have everything crash and burn?


01:05:11.300 --> 01:05:13.820
But I don't have those concerns anymore.


01:05:13.820 --> 01:05:14.640
- Yeah, yeah, yeah.


01:05:14.640 --> 01:05:17.660
- And so just the fact that if you want something in Python


01:05:17.660 --> 01:05:20.260
that solves almost every web problem you have


01:05:20.260 --> 01:05:21.940
and has a really supportive community,


01:05:21.940 --> 01:05:23.900
Django is still there for you.


01:05:23.900 --> 01:05:26.220
And so I guess that's the big one.


01:05:26.220 --> 01:05:28.700
It's just, and I think from a marketing side,


01:05:28.700 --> 01:05:31.900
it's just how do we express that it's still cool


01:05:31.900 --> 01:05:35.260
and interesting and powerful and yet won't break on you?


01:05:35.260 --> 01:05:39.620
It doesn't seem as shiny and new as the next whatever,


01:05:39.620 --> 01:05:42.220
but it's like if you look on Hacker News,


01:05:42.220 --> 01:05:43.580
every like six months, someone's like,


01:05:43.580 --> 01:05:45.060
"Wow, Django's like still around?


01:05:45.060 --> 01:05:47.100
"Oh, it's like kind of solves all these problems


01:05:47.100 --> 01:05:52.140
you have with this new JavaScript this or that. It's like, yeah, it's still just doing its thing.


01:05:52.140 --> 01:05:57.420
Sorry, so I would say the community side. I mean, also, like I've got projects,


01:05:57.420 --> 01:06:02.300
if you want to learn Django, I mean, like, let me, there's a lot of resources to learn it. There's a


01:06:02.300 --> 01:06:07.580
number, there's videos, you know, you have videos, books, tutorials, like some of these newer


01:06:07.580 --> 01:06:13.180
technologies. It's harder. There's not a community and it's harder to find the resources, you know,


01:06:13.180 --> 01:06:16.700
There's a lot of strength in being around for a while and yet not being totally stale


01:06:16.700 --> 01:06:19.340
So that would be my my tagline for django. How's that?


01:06:19.340 --> 01:06:23.100
Well, you know I


01:06:23.100 --> 01:06:28.460
I kind of go off that I I think actually it's it is cool and it's about as cool as it's been for a while


01:06:28.460 --> 01:06:34.540
I said in my uh django con europe talk that i'm as excited about the framework and where it's going now as I have been


01:06:34.540 --> 01:06:39.740
For for many years since I said since the drf kickstarter if you remember that back in the day


01:06:40.860 --> 01:06:46.540
There are over the last few releases and I don't just mean 4.2 and 5.0 coming up. I mean like the last


01:06:46.540 --> 01:06:49.820
3.2 4 4.0 4.1 like


01:06:49.820 --> 01:06:53.740
Last few years there's been a number of threads not just the async stuff


01:06:53.740 --> 01:07:00.380
There's been massive changes to the forms templating. There's been all these changes to the orm that powering up every single release


01:07:00.380 --> 01:07:04.880
And they've all come together and there are patterns now to be discovered


01:07:05.340 --> 01:07:09.420
Then and it's like I said, I'm stepping down in part because of life


01:07:09.420 --> 01:07:12.780
But in part to get back to working with django rather than just on django


01:07:12.780 --> 01:07:17.340
I do I want to play with all of these new toys that we've built over the last few releases


01:07:17.340 --> 01:07:25.020
And I want to discover those patterns and see them codified and see them come out in the community and it's just a massively fertile time


01:07:25.020 --> 01:07:27.980
Um, and so that's what i'm excited about. That's where we're going


01:07:27.980 --> 01:07:31.340
and I can't say every release django literally


01:07:32.280 --> 01:07:36.680
Gobsmacked by how many new features you think? Oh, there won't be any in the new one, but it gotta be done


01:07:36.680 --> 01:07:41.320
Again five point. Yeah, but 5.0 is coming out and it's just hitting out of the park again


01:07:41.320 --> 01:07:44.840
And it's like wow, we've only just had 4.2 4.2 is not even old yet


01:07:44.840 --> 01:07:51.080
5.0 is not even in alpha and we're already thinking. Oh, can we run it off main because it's so exciting.


01:07:51.080 --> 01:07:53.240
the future is just


01:07:53.240 --> 01:07:58.360
It so many things have come together. The future is just really exciting. So that that is my take. Yeah


01:07:58.520 --> 01:08:03.080
Yeah, and I'd say I feel like I would be bored by now with django like i'm i've only been doing it for over a


01:08:03.080 --> 01:08:08.540
Decade but like i'm if anything more interest, there's just so many new features, but also i'm understanding


01:08:08.540 --> 01:08:13.240
built-in functionality even better to solve problems that I just didn't have before so


01:08:13.240 --> 01:08:15.960
at some point maybe i'll be like I know it all but


01:08:15.960 --> 01:08:19.960
Uh, I feel the opposite. I feel like whoa, like I had no idea


01:08:19.960 --> 01:08:27.480
Just one concrete example doing all the work with templates and htmx and like coming to see the patterns about create


01:08:27.640 --> 01:08:33.400
you know again fresh for the first time in use really using templates for the first time in half a decade it's like okay


01:08:33.400 --> 01:08:34.520
Ah, yes


01:08:34.520 --> 01:08:39.000
I create a template tag here and I do it this way and I use I put a mapper in here to create a kind


01:08:39.000 --> 01:08:42.760
Of view model type thing so i'll pass in an orm model object into the template tag


01:08:42.760 --> 01:08:46.360
And then in the template tag I map it to what I need in the actual template itself


01:08:46.360 --> 01:08:50.600
Then the template comes in it's like oh, that's a really good and powerful pattern and it's really


01:08:50.600 --> 01:08:55.720
Encapsulated and neat and it makes my template expressive and oh


01:08:56.900 --> 01:08:59.620
rediscovering these things and then being able to say,


01:08:59.620 --> 01:09:01.620
"Right, okay, well what changes does a Django template


01:09:01.620 --> 01:09:04.420
"language need that it hasn't had in quite a few years


01:09:04.420 --> 01:09:05.700
"because no one was using it?"


01:09:05.700 --> 01:09:09.140
And, ah, yeah, it's just a massively fertile time.


01:09:09.140 --> 01:09:12.860
- It is, and it's no coincidence that we've been


01:09:12.860 --> 01:09:16.740
hitting on HTMX so much because it really puts the power


01:09:16.740 --> 01:09:19.940
of frameworks like Django back front and center


01:09:19.940 --> 01:09:22.940
in how you think about building and structuring


01:09:22.940 --> 01:09:24.260
your web apps, right?


01:09:24.260 --> 01:09:26.180
It's not like, "Well, there's this thing in the back end


01:09:26.180 --> 01:09:27.820
and then we'll kind of go do these other languages.


01:09:27.820 --> 01:09:29.700
It's like, you know, actually it could be all.


01:09:29.700 --> 01:09:32.140
And there's a bunch of cool features and capabilities


01:09:32.140 --> 01:09:33.420
that we've been talking about,


01:09:33.420 --> 01:09:35.620
and you can use them throughout your app


01:09:35.620 --> 01:09:37.740
if you leverage something like, not necessarily,


01:09:37.740 --> 01:09:41.300
but something like HTMX, which is really cool, I think.


01:09:41.300 --> 01:09:45.660
- And for me, it works just with the grain of the framework.


01:09:45.660 --> 01:09:48.460
It's like, this is the way I would do it, you know,


01:09:48.460 --> 01:09:50.980
if I was writing in 2005.


01:09:50.980 --> 01:09:55.060
And I do it exactly the same in 2023.


01:09:55.060 --> 01:10:00.060
And it just works and it's responsive and dynamic


01:10:00.060 --> 01:10:04.180
and all these nice things that clients want.


01:10:04.180 --> 01:10:05.580
- Yep, absolutely.


01:10:05.580 --> 01:10:07.180
All right, let's leave it there, guys.


01:10:07.180 --> 01:10:09.620
Thank you so much for covering all this


01:10:09.620 --> 01:10:14.380
and celebrating Django's 18th birthday.


01:10:14.380 --> 01:10:15.900
- 18th birthday, yeah.


01:10:15.900 --> 01:10:17.520
- Yeah, it's awesome.


01:10:17.520 --> 01:10:21.700
It is an adult and it's a cool framework for sure.


01:10:21.700 --> 01:10:24.540
Really, I think it's the community behind it,


01:10:24.540 --> 01:10:29.540
especially the fellows and all the board and stuff,


01:10:29.540 --> 01:10:33.180
it makes it really unique and it's certainly worth


01:10:33.180 --> 01:10:36.420
considering as part of the framework, right, as you said.


01:10:36.420 --> 01:10:38.360
Okay, with that, let's round this out


01:10:38.360 --> 01:10:41.420
with just a final shout out to


01:10:41.420 --> 01:10:44.300
what you guys have around Django.


01:10:44.300 --> 01:10:47.260
For example, the Django Chat podcast, right,


01:10:47.260 --> 01:10:48.500
which is excellent.


01:10:48.500 --> 01:10:50.340
Give us a shout about that, you know,


01:10:50.340 --> 01:10:52.540
Will, tell us about Learn Django


01:10:52.540 --> 01:10:54.500
and maybe button.dev or whatever else


01:10:54.500 --> 01:10:55.340
you want to throw in there.


01:10:55.340 --> 01:10:57.540
- Yeah, I should say djangochat.com,


01:10:57.540 --> 01:10:59.220
you're sort of the godfather of it


01:10:59.220 --> 01:11:00.780
'cause you gave me a lot of good advice


01:11:00.780 --> 01:11:02.460
when we were starting out in the early days


01:11:02.460 --> 01:11:05.500
around things and that there might be a market for it.


01:11:05.500 --> 01:11:07.100
So thank you for that.


01:11:07.100 --> 01:11:08.300
- You're welcome, it's going strong.


01:11:08.300 --> 01:11:09.180
It's a great show.


01:11:09.180 --> 01:11:11.180
I enjoy listening to the episodes.


01:11:11.180 --> 01:11:12.820
- Yeah, so we're gonna be back in the fall


01:11:12.820 --> 01:11:13.660
with new episodes.


01:11:13.660 --> 01:11:15.900
And then learndjango.com, that's my main website


01:11:15.900 --> 01:11:17.100
if you want to learn Django.


01:11:17.100 --> 01:11:19.860
Access books, lots of free tutorials,


01:11:19.860 --> 01:11:21.140
premium ones coming.


01:11:21.140 --> 01:11:22.900
That's sort of an all-in-one resource.


01:11:22.900 --> 01:11:25.420
And I think there's also a link to Django-news,


01:11:25.420 --> 01:11:27.340
which is a weekly Django newsletter


01:11:27.340 --> 01:11:30.660
with new news that's happening, new projects,


01:11:30.660 --> 01:11:32.620
new tutorials, not just mine.


01:11:32.620 --> 01:11:34.220
So that's something I've been doing with Jeff Triplett


01:11:34.220 --> 01:11:35.940
for a number of years now,


01:11:35.940 --> 01:11:39.780
and that's a good way to stay in tune with what's happening.


01:11:39.780 --> 01:11:43.060
- Yeah, that's kind of an essential resource, I'd say.


01:11:43.060 --> 01:11:44.980
- And then Button, Carlton.


01:11:44.980 --> 01:11:48.820
- Yeah, so okay, so I'm, well, I've got a website


01:11:48.820 --> 01:11:52.820
I've got a blog somewhere that's a button btn.dev


01:11:52.820 --> 01:11:55.060
that'll be live in the autumn now.


01:11:55.060 --> 01:12:00.020
But you can follow me on Foster Don or the Fediverse


01:12:00.020 --> 01:12:03.060
and on my website there's an RSS feed


01:12:03.060 --> 01:12:05.420
which you could subscribe to if you fancy that.


01:12:05.420 --> 01:12:08.300
My other big projects at the moment


01:12:08.300 --> 01:12:11.540
is I'm working on a set of opinionated crowd views


01:12:11.540 --> 01:12:15.820
for Django called Neapolitan, which is a bit of fun.


01:12:15.820 --> 01:12:17.140
I'm having a lot of fun of that.


01:12:17.140 --> 01:12:19.940
to watch my DjangoCon Europe talk for an introduction of that.


01:12:19.940 --> 01:12:24.340
And then I'm working on a package called Django template partials as well,


01:12:24.340 --> 01:12:27.740
which is about getting template fragments into the Django template language,


01:12:27.740 --> 01:12:30.740
which again, I'm talking about in the DjangoCon Europe talk.


01:12:30.740 --> 01:12:34.940
I know, now that he's not a fellow, he can do all the things he always wanted to.


01:12:34.940 --> 01:12:38.540
Yeah, when I started using this with Tristan,


01:12:38.540 --> 01:12:43.740
I'm like, man, you have got to come up with a way


01:12:43.740 --> 01:12:46.740
to like reuse HTML almost like functions.


01:12:46.740 --> 01:12:49.540
So I came up with Jinja partial. So what is yours called?


01:12:49.540 --> 01:12:54.180
Uh, django template partials template partials and your template


01:12:54.180 --> 01:13:00.260
Spacer that's close enough close enough. Yeah. No, it's not. I think I put a link in the notes. But yeah


01:13:00.260 --> 01:13:05.460
There you go. Yeah, there you are. There you are. So that's my my take.


01:13:05.460 --> 01:13:12.260
And it just enables you to define reusable components. there's there's a couple of pull requests open which will just


01:13:13.700 --> 01:13:20.020
Just change the api there slightly and then we'll start to think about rolling into django. Hopefully for now


01:13:20.020 --> 01:13:24.580
It's going to be django 5.1. There's no chance of me getting in for 5.0 this summer.


01:13:24.580 --> 01:13:30.260
But it's the same it's the same idea and the point with it is it's integrated with the django template loader


01:13:30.260 --> 01:13:34.180
So all you all you do in your view is change your template name


01:13:34.180 --> 01:13:41.060
Variable and you still return your template response the same as you always had with the context. There's no there's no adjusting your view logic


01:13:41.380 --> 01:13:45.140
Um, it's it's almost transparent to the view layer and there are you know


01:13:45.140 --> 01:13:48.660
I've seen people writing logic where they they pass the hx vows


01:13:48.660 --> 01:13:52.420
Which is where you pass extra parameters in your request from the client


01:13:52.420 --> 01:13:56.980
Which you could then specify the partial with and then your view logic wouldn't change at all


01:13:56.980 --> 01:14:04.260
um, that's out of scope for django template partials, but it's a possibility but the point being that you just it's


01:14:04.260 --> 01:14:09.300
It this for me or something like it is how django wants you to do


01:14:09.780 --> 01:14:15.700
Partials with the Django template language. Obviously with Jinja. There's an option as well with Django. So


01:14:15.700 --> 01:14:20.260
Useful outside of htmx required for htmx basically, right?


01:14:20.260 --> 01:14:23.780
Yeah, um


01:14:23.780 --> 01:14:29.540
Yeah, I mean you because what's the other way the problem with it is you are you then have if you don't have inline


01:14:29.540 --> 01:14:35.540
Partials you have to move it to a separate template and then you have to include that template in the other template and that's great


01:14:36.580 --> 01:14:43.700
a certain level of complexity, but again, it's this locality behavior thing when you're first starting you don't want that heavyweight kind of


01:14:43.700 --> 01:14:49.620
In your creative flow you're making progress and all of a sudden you have to put the brakes on to create a new file


01:14:49.620 --> 01:14:54.020
Move it open. What's the what's the file name again? Oh, i've spelt it wrong. Oh, it didn't load


01:14:54.020 --> 01:15:00.740
Oh because it was in the wrong file. You don't want all of that. You just want inline that bit be reusable, please


01:15:01.780 --> 01:15:03.060
- Yeah, very cool.


01:15:03.060 --> 01:15:04.360
Yeah, this is different.


01:15:04.360 --> 01:15:06.320
Mine doesn't embrace the locality behavior


01:15:06.320 --> 01:15:07.160
as much as yours does.


01:15:07.160 --> 01:15:08.320
So people should check this out.


01:15:08.320 --> 01:15:09.160
This is interesting.


01:15:09.160 --> 01:15:10.720
Obviously, mine doesn't work with Django either,


01:15:10.720 --> 01:15:12.100
so it doesn't really matter.


01:15:12.100 --> 01:15:13.940
- Well, it works with Jinja though, right?


01:15:13.940 --> 01:15:15.100
- It works with Jinja, right?


01:15:15.100 --> 01:15:18.000
- Mine, Jinja is swappable.


01:15:18.000 --> 01:15:23.000
- So the Django templates have swappable backends


01:15:23.000 --> 01:15:24.780
so you can use the Jinja backend


01:15:24.780 --> 01:15:26.320
to use Jinja templates with Django


01:15:26.320 --> 01:15:28.540
if that's your cup of tea.


01:15:28.540 --> 01:15:30.060
- All right, we gotta end this podcast.


01:15:30.060 --> 01:15:30.900
But if you're looking at--


01:15:30.900 --> 01:15:31.740
- Yeah, yeah, yeah.


01:15:31.740 --> 01:15:34.700
- Moving a Flask project over to Django,


01:15:34.700 --> 01:15:38.500
that would be a way to not touch the HTML very much, right?


01:15:38.500 --> 01:15:40.440
- Yes, exactly, because you could carry on


01:15:40.440 --> 01:15:41.700
using the same templates more.


01:15:41.700 --> 01:15:43.600
You know, you might need one or two edits


01:15:43.600 --> 01:15:46.020
to the, what's it called, the Django environment,


01:15:46.020 --> 01:15:48.620
the Jinja environment or something to, I don't know.


01:15:48.620 --> 01:15:51.980
- Cool, all right.


01:15:51.980 --> 01:15:53.740
Thank you guys for being on the show.


01:15:53.740 --> 01:15:56.340
It's always a great time to catch up with you.


01:15:56.340 --> 01:15:58.140
- Yeah, thank you for having us.


01:15:58.140 --> 01:15:58.980
- Yeah, you bet.

