WEBVTT

00:00:00.000 --> 00:00:05.000
- Hello, hello, hello everyone out there on the live stream.


00:00:05.000 --> 00:00:05.840
Hey Jack.


00:00:05.840 --> 00:00:09.040
- Hey Michael, thanks so much for having me along.


00:00:09.040 --> 00:00:10.560
- Yeah, it's great to have you here.


00:00:10.560 --> 00:00:13.120
And before we jump right into the show,


00:00:13.120 --> 00:00:15.560
let me just throw out a couple comments


00:00:15.560 --> 00:00:16.840
for the people watching live.


00:00:16.840 --> 00:00:19.640
If you've got questions, comments, links, info,


00:00:19.640 --> 00:00:21.400
so on, put them into the live chat


00:00:21.400 --> 00:00:22.920
and we'll make them part of the show.


00:00:22.920 --> 00:00:23.880
If you come along later,


00:00:23.880 --> 00:00:26.400
you should still be able to see the live chat


00:00:26.400 --> 00:00:28.180
historically on YouTube.


00:00:28.180 --> 00:00:32.180
Jack, welcome to Talk Python To Me.


00:00:32.180 --> 00:00:38.180
Thank you, Michael. It's great to meet you after hearing your voice for so many years.


00:00:38.180 --> 00:00:44.180
It's so great to have you on the show. It's always fun to have people who are listeners but have interesting stories to tell.


00:00:44.180 --> 00:00:56.180
Come on the show and you definitely have some interesting stories about the energy grid and doing data science around really important stuff like keeping the lights on in Australia.


00:00:56.180 --> 00:01:03.060
Australia. Yeah, I'm definitely looking forward to diving into that stuff. It's going to be


00:01:03.060 --> 00:01:07.940
a lot of fun, I think. Absolutely. Before we get to it, though, let's start with your


00:01:07.940 --> 00:01:10.740
story. How'd you get into programming and what brought you to Python?


00:01:10.740 --> 00:01:17.900
Yeah, well, I guess I have a very strange background. I actually started off at university


00:01:17.900 --> 00:01:23.980
enrolling in journalism and politics, right at the start of the GFC. I had never programmed


00:01:23.980 --> 00:01:27.660
before and I didn't even realize I was interested in it.


00:01:27.660 --> 00:01:31.540
And my lecturers kept telling me how many journalists


00:01:31.540 --> 00:01:34.740
were losing their jobs during the financial crisis.


00:01:34.740 --> 00:01:37.820
And so I actually dropped out


00:01:37.820 --> 00:01:40.460
and was trying to consider what I wanted to do.


00:01:40.460 --> 00:01:44.420
And I'd always had a passion for biology and science.


00:01:44.420 --> 00:01:47.480
And my hobby was, I was actually a beekeeper.


00:01:47.480 --> 00:01:50.420
I had six of my own hives at home.


00:01:50.420 --> 00:01:51.660
I really loved that.


00:01:51.660 --> 00:01:52.480
And so I thought-


00:01:52.480 --> 00:01:55.520
Are these like honeybee type of bees or what kind of bees?


00:01:55.520 --> 00:02:02.400
Yes, honeybees. Yes, absolutely. The ones that sting. I actually also had a couple of


00:02:02.400 --> 00:02:11.200
Australian native bees, Tetragonula carbonaria, which I'm not sure if you've heard of them


00:02:11.200 --> 00:02:15.520
before, but they're actually, they almost look like tiny little flies. They're stingless bees.


00:02:17.520 --> 00:02:24.720
and they will actually make their hives out of a resin of trees and they will build


00:02:24.720 --> 00:02:30.000
their brood in this beautiful kind of spiral pattern going up through the hive.


00:02:30.000 --> 00:02:39.040
And so I was just really interested in, I guess, all things bee and insect related at the time,


00:02:39.040 --> 00:02:47.440
and so I actually started blogging about bees and beekeeping and that was actually my introduction


00:02:47.440 --> 00:02:52.400
to code because I had, I think I had a website on blogger. And one day I suddenly thought,


00:02:52.400 --> 00:02:58.320
well, I'd love to actually be able to make my own website. How do I do that? And so I started


00:02:58.320 --> 00:03:04.560
learning HTML and JavaScript. And it was literally just so I could talk about my beads. I had no


00:03:04.560 --> 00:03:11.040
interest in programming. I think so many people get into programming that way who don't necessarily


00:03:11.040 --> 00:03:14.000
I feel like my goal is to go be a programmer,


00:03:14.000 --> 00:03:17.920
but they just really have something they're into


00:03:17.920 --> 00:03:19.840
and programming is almost in the way, right?


00:03:19.840 --> 00:03:21.640
It's just like something you've got to figure out


00:03:21.640 --> 00:03:23.240
so that you can actually get to the thing


00:03:23.240 --> 00:03:24.400
that you actually like.


00:03:24.400 --> 00:03:26.560
But then a lot of people find out,


00:03:26.560 --> 00:03:27.960
well, hey, this is actually kind of cool.


00:03:27.960 --> 00:03:30.600
And what else can I do now that I know this, right?


00:03:30.600 --> 00:03:31.480
- Absolutely.


00:03:31.480 --> 00:03:35.520
And that was really what made me change my degree.


00:03:35.520 --> 00:03:38.920
So initially I was gonna do a pure biology degree.


00:03:38.920 --> 00:03:42.600
And so I decided I would do biology and web development.


00:03:42.600 --> 00:03:45.600
And as I kind of went along with the degree,


00:03:45.600 --> 00:03:49.720
I suddenly started realizing that the programming skills


00:03:49.720 --> 00:03:52.360
I was picking up during my degree,


00:03:52.360 --> 00:03:56.480
so I learned PHP, Perl, and Python.


00:03:56.480 --> 00:03:59.080
Suddenly I realized that these skills


00:03:59.080 --> 00:04:02.560
could actually help me with working with scientific data.


00:04:02.560 --> 00:04:06.240
'Cause we kind of hit this point


00:04:06.240 --> 00:04:12.880
was just so much genomic data, really most people these days, at the time I was doing undergrad,


00:04:12.880 --> 00:04:19.760
but one of the things I've really noticed is most people these days that enroll in a biology PhD,


00:04:19.760 --> 00:04:24.000
you join the lab and it's almost like, right, you're learning Python or you're learning R,


00:04:24.000 --> 00:04:29.680
there's no other way you're working with this data. And so suddenly I kind of hit this point


00:04:29.680 --> 00:04:36.240
where I was like, wow, these kind of technical skills were letting me do things and be useful


00:04:36.240 --> 00:04:41.040
in ways that I never thought. And it let me answer research questions that I was really


00:04:41.040 --> 00:04:48.160
fascinated by. And that was my motivation to actually, I guess, go into and do a PhD


00:04:48.160 --> 00:04:51.600
and then try and take those skills further. What was your PhD in?


00:04:52.880 --> 00:04:59.840
So it was in computational biology. It was trying to develop software to automate


00:04:59.840 --> 00:05:09.680
the analysis of honeybee behavior in the hive. So the thing that was interesting was it was both a


00:05:09.680 --> 00:05:18.320
physical setup and the code as well. So the physical side was actually how do we set up


00:05:18.320 --> 00:05:25.120
a beehive in a building with a glass window in so that I can film them with an infrared camera


00:05:25.120 --> 00:05:32.640
in the dark? And how do I put little tags with patterns on them on the backs of the bees that I


00:05:32.640 --> 00:05:40.560
can then use Python and machine learning to identify and track over the course of several


00:05:40.560 --> 00:05:48.560
weeks and that kind of process ended up being much harder than I had anticipated because when


00:05:48.560 --> 00:05:54.000
I started out, I read a couple of papers by some computer scientists who mentioned that


00:05:54.000 --> 00:05:58.880
they'd printed out some card tags and they said that they filled the bees for a couple of hours,


00:05:58.880 --> 00:06:03.440
got the data and did an analysis and I thought, great, I'm going to do that, problem solved.


00:06:03.440 --> 00:06:09.040
It was only until later that I realized the reason that they only filmed them for a couple of hours


00:06:09.040 --> 00:06:14.640
was because that was how long it took the bees to chew the cardboard off each other in the hive.


00:06:14.640 --> 00:06:18.240
Oh, did they help each other? Like, "Hey, I've got this thing on my back. Get it off me."


00:06:18.240 --> 00:06:23.680
Yes, yes, they actually did. And that was the thing I would actually find time and time again.


00:06:23.680 --> 00:06:27.360
I would come up with the material and I would try and stick it on the back of the bees. And you


00:06:27.360 --> 00:06:33.840
would see their friends effectively come over and start trying to pry it off them in the hive. And


00:06:33.840 --> 00:06:38.240
And so it was actually a process to find something that didn't,


00:06:38.240 --> 00:06:40.440
I guess, trigger them, so to speak.


00:06:40.440 --> 00:06:43.040
And one of the things I,


00:06:43.040 --> 00:06:45.400
a really immensely frustrating experience I had


00:06:45.400 --> 00:06:48.280
when I was doing these experiments was


00:06:48.280 --> 00:06:52.240
I thought I had found a perfect fabric


00:06:52.240 --> 00:06:54.880
and the perfect glue to put them on the beads.


00:06:54.880 --> 00:06:58.480
And I spent hours tagging hundreds of them.


00:06:58.480 --> 00:07:00.320
I put them into the hive.


00:07:00.320 --> 00:07:02.240
And then I came back,


00:07:02.240 --> 00:07:05.600
I would come back a few hours later and all my tags had disappeared.


00:07:05.600 --> 00:07:08.680
And I couldn't understand why and I kept doing it.


00:07:08.680 --> 00:07:11.760
And then at one point I thought, you know what, I'm going to put a bucket outside the


00:07:11.760 --> 00:07:13.940
hive entrance just to see what happens.


00:07:13.940 --> 00:07:15.660
And I'm going to watch in the dark.


00:07:15.660 --> 00:07:19.780
And what actually happened was the bees didn't like the smell of the glue.


00:07:19.780 --> 00:07:25.360
So they were actually physically grabbing these bees that I'd tagged, dragging them


00:07:25.360 --> 00:07:30.720
to the entrance and flinging them out of the hive.


00:07:30.720 --> 00:07:38.180
And because the hive was, because these bees were juvenile bees, they were too young to


00:07:38.180 --> 00:07:41.520
fly yet, the ants were actually dragging them away.


00:07:41.520 --> 00:07:45.520
So I thought my tags were dropping off or being pulled off, but actually my poor bees


00:07:45.520 --> 00:07:50.680
were getting eaten by the ants because they couldn't fly away.


00:07:50.680 --> 00:07:54.840
And so I guess it's another example as well, you know, when you've got missing data, understand


00:07:54.840 --> 00:07:56.480
the process.


00:07:56.480 --> 00:08:00.200
Sometimes the process that made that data missing is significant.


00:08:00.200 --> 00:08:03.400
I would have never guessed. That's really pretty insane, actually.


00:08:03.400 --> 00:08:11.640
And so the solution for dealing with this was I would actually go through the process


00:08:11.640 --> 00:08:17.480
of tagging the beans. Then I would put them in this heated incubator on a frame of honey for


00:08:17.480 --> 00:08:24.120
several hours until all of the smell had kind of faded away. And then I could introduce them to the


00:08:24.120 --> 00:08:28.040
hive and they would be accepted. I see. Okay. Basically, wait until


00:08:28.040 --> 00:08:32.120
that dried and it was really on them? Yeah, well, wait until all the fumes were gone,


00:08:32.120 --> 00:08:38.280
and then they would be accepted and then it would work. Because I think this was the real challenge


00:08:38.280 --> 00:08:46.040
of my project was, we weren't interested in showing that we could write software that could


00:08:46.040 --> 00:08:52.680
track the bees. The specific application was to look at the social development over several weeks


00:08:52.680 --> 00:08:59.800
of these bees. So we needed a kind of experimental setup and the code to support it that would let us


00:08:59.800 --> 00:09:06.200
look at these extended periods of behavior. - Did they have different markings based on


00:09:06.200 --> 00:09:12.200
like their age or their role in the colony or something like were they all tagged the same


00:09:12.200 --> 00:09:15.880
and you just said well they kind of move around like this or were there like did you group them


00:09:15.880 --> 00:09:23.320
or something? Oh, so what I would often do is I had, I would use a laser engraver to burn patterns


00:09:23.320 --> 00:09:27.480
in the fabric that I would put on them. And so each bee had a unique pattern that I could use


00:09:27.480 --> 00:09:35.000
to identify it. And you are a code on the bee. Kind of like that, but not. In fact, I think if


00:09:35.000 --> 00:09:41.720
you scroll through the website to the bottom of the page, there's, there's some little patterns.


00:09:41.720 --> 00:09:44.200
This was some initial prototypes, but at the bottom,


00:09:44.200 --> 00:09:46.640
just if you scroll up a little bit more,


00:09:46.640 --> 00:09:49.480
the last image, yep, that one,


00:09:49.480 --> 00:09:53.600
I was literally using a Wingdings font


00:09:53.600 --> 00:09:55.480
to try out different patterns.


00:09:55.480 --> 00:09:57.000
- Wingdings, okay.


00:09:57.000 --> 00:09:59.920
- On the beads, because I just had,


00:09:59.920 --> 00:10:04.120
the idea was to have a relatively inexpensive 4K camera


00:10:04.120 --> 00:10:07.000
that could pick up the different patterns.


00:10:07.000 --> 00:10:09.480
Of course, if you had a really expensive


00:10:09.480 --> 00:10:12.920
high resolution camera, then you could do more with QR codes,


00:10:12.920 --> 00:10:18.300
for instance. And what I would do is I would do these experiments


00:10:18.300 --> 00:10:22.960
where I would, half of the bees would be, would be that I would


00:10:22.960 --> 00:10:26.000
introduce that would all be juvenile, except I would also


00:10:26.000 --> 00:10:28.360
mark the queen so I could know how they were interacting with


00:10:28.360 --> 00:10:31.520
the queen. But half the juvenile bees, I would introduce them to


00:10:31.520 --> 00:10:38.400
the hive would receive a label that I could reference later on.


00:10:38.640 --> 00:10:43.600
and half would receive a different label that I knew about.


00:10:43.600 --> 00:10:47.560
And the reason I did this was so I could actually do these,


00:10:47.560 --> 00:10:51.080
have these control and treatment groups in my experiment


00:10:51.080 --> 00:10:53.320
because I would do these experiments


00:10:53.320 --> 00:10:57.120
where I would treat the bees with caffeine


00:10:57.120 --> 00:10:59.400
to see how it would actually affect


00:10:59.400 --> 00:11:01.240
their social development in the hive.


00:11:01.240 --> 00:11:05.360
I guess to give a little bit more context to that,


00:11:07.160 --> 00:11:12.840
diving a little bit into the way that bees develop. You could almost think of a worker


00:11:12.840 --> 00:11:19.800
bee in the hive like the pictures I have on my site. The jobs that a bee does over its lifetime


00:11:19.800 --> 00:11:25.480
are influenced by how old it is. So these juvenile bees I was first introducing to the colony,


00:11:25.480 --> 00:11:30.760
they really would just have quite menial colonies. They'll do little cleaning tasks around the hive,


00:11:30.760 --> 00:11:34.680
they wouldn't do much. Then when they're a little bit older, they would start nursing


00:11:34.680 --> 00:11:40.680
other juvenile bees and then the eldest bees are the ones that you actually see out and about flying


00:11:40.680 --> 00:11:47.400
and collecting nectar and pollen. So those are actually the eldest of the bees in the colony


00:11:47.400 --> 00:11:58.040
typically. And so I wanted to see how this caffeine would affect that kind of behavioral


00:11:58.840 --> 00:12:06.600
process in the juvenile bees. How interesting. Briefly, what did you find that caffeine does to


00:12:06.600 --> 00:12:17.400
bees? So one of the things I found was it effectively meant that bees sped up how quickly


00:12:17.400 --> 00:12:24.600
they adjusted to the rhythms of the colony. So to put it in context, if you're a juvenile bee


00:12:24.600 --> 00:12:32.280
in the hive, you don't really care about circadian rhythms, day-night cycles, because you're in a


00:12:32.280 --> 00:12:43.560
hive, it's completely dark all the time. And so what we found was that we hadn't seen before,


00:12:43.560 --> 00:12:48.520
was these juvenile bees, even though they weren't exposed to the light and the outside,


00:12:48.520 --> 00:12:53.160
they would actually pick up these circadian rhythms by interacting with the older bees that


00:12:53.160 --> 00:12:54.000
that were coming back.


00:12:54.000 --> 00:12:56.320
It was effectively like a socially acquired


00:12:56.320 --> 00:12:57.920
circadian rhythm.


00:12:57.920 --> 00:13:01.320
And so what we found was that these,


00:13:01.320 --> 00:13:05.320
bees that were treated with caffeine effectively


00:13:05.320 --> 00:13:10.320
picked up this rhythm more quickly than bees that weren't


00:13:10.320 --> 00:13:13.560
and kind of progressed in their roles in the colony


00:13:13.560 --> 00:13:15.440
more quickly as well.


00:13:15.440 --> 00:13:19.560
Yeah, so there was that and I had a few other areas,


00:13:19.560 --> 00:13:22.480
but yeah, to be honest, a lot of the work


00:13:22.480 --> 00:13:28.480
was really just making the software and the bees all play nice.


00:13:28.480 --> 00:13:29.480
Yeah, absolutely.


00:13:29.480 --> 00:13:32.480
It was probably one of the most immensely...


00:13:32.480 --> 00:13:36.480
I will say one of the things that is quite nice about the energy sector


00:13:36.480 --> 00:13:41.480
is I don't have to deal with... I guess I can deal with machines


00:13:41.480 --> 00:13:44.480
which are a little bit less frustrating at times.


00:13:44.480 --> 00:13:47.480
More reliable, more predictable, and certain, that's for sure.


00:13:47.480 --> 00:13:49.480
Before we move on to the energy sector,


00:13:49.480 --> 00:13:54.180
sector. So just give us a quick overview of like the software that you use. Was


00:13:54.180 --> 00:13:56.300
Python a part of this role here?


00:13:56.300 --> 00:14:06.000
Yes, absolutely. So I used a mix of Python and OpenCV for a lot of the image


00:14:06.000 --> 00:14:13.960
process processing. And of course, TensorFlow and Keras as for training my


00:14:13.960 --> 00:14:19.000
neural network to identify the different tags. And that actually ended up being


00:14:19.000 --> 00:14:24.600
quite an interesting process building up that data set and improving it over time,


00:14:24.600 --> 00:14:30.600
because one of the things I found when I started trying to train that data set was I thought,


00:14:30.600 --> 00:14:37.400
"Okay, I can take my patterns, film them, add a little bit of noise and rotation,


00:14:37.400 --> 00:14:41.000
and then that's my kind of starter machine learning model."


00:14:41.000 --> 00:14:49.120
The problem was that when you put the tag on the bee, the way that they kind of walk


00:14:49.120 --> 00:14:55.300
around the hive, you'll see different kind of angles of, they kind of have this bit of


00:14:55.300 --> 00:14:57.440
wobble walk as they go around.


00:14:57.440 --> 00:15:02.840
So it kind of introduces this level of distortion to the tag.


00:15:02.840 --> 00:15:07.960
And then other, and so then also you could have other situations where bees would walk


00:15:07.960 --> 00:15:14.840
over each other, the block occluded tags as well. So one of the things I ended up having to do was


00:15:14.840 --> 00:15:21.800
I had to introduce a class to my, a predictive class to my model that was literally just like


00:15:21.800 --> 00:15:30.680
the "I don't know what this is" class. And effectively the idea was I'm going to see this


00:15:30.680 --> 00:15:35.640
bee, I'm going to have multiple attempts to classify this bee as it's walking around. So I


00:15:35.640 --> 00:15:39.640
I want to only attempt a classification when I'm seeing enough of the tag


00:15:39.640 --> 00:15:42.440
and I'm confident enough in that to attempt it.


00:15:42.440 --> 00:15:48.760
And so that was one of the techniques I found that helped improve the classification.


00:15:48.760 --> 00:15:51.800
And really, it ended up just becoming a process


00:15:51.800 --> 00:15:56.440
where I had a bit of a pipeline that would go through,


00:15:56.440 --> 00:16:01.880
it would extract tags, it would use the model at the current iteration to label them.


00:16:01.880 --> 00:16:04.040
I would then go in and manually review it


00:16:04.040 --> 00:16:09.400
and then figure out where it had stuffed up, where it was doing well, and then use that corrected


00:16:09.400 --> 00:16:14.600
data set to retrain the model and then see how well that iteration did. And it became


00:16:14.600 --> 00:16:21.560
almost like a semi-supervised problem to an extent when I was building it out.


00:16:21.560 --> 00:16:28.600
And at a certain point, it became just as good as me at doing these classifications.


00:16:28.600 --> 00:16:36.200
and then it was fully automated as well. But I think I ended up labeling about


00:16:36.200 --> 00:16:42.440
seven or eight hundred thousand images as part of doing this and my wife was actually, she was a


00:16:42.440 --> 00:16:47.560
PhD student in working in genetics at the time, she was helping me in her spare time,


00:16:47.560 --> 00:16:55.960
so she does not look favorably upon that project. She probably doesn't love winged


00:16:55.960 --> 00:17:00.040
fonts, maybe a B comes by, she's like, "Oh, not you again."


00:17:00.040 --> 00:17:01.040
Yeah, absolutely.


00:17:01.040 --> 00:17:05.400
But I'd say, yeah, so Python and OpenCV were big ones.


00:17:05.400 --> 00:17:13.280
And then the other tool I was using a lot of was Python's Cython library, where I would,


00:17:13.280 --> 00:17:19.720
for certain parts that I wanted to run really efficiently, I wrote those in C++ and then


00:17:19.720 --> 00:17:27.480
used Cython to expose some of those methods to it and that worked amazingly well. It was so


00:17:27.480 --> 00:17:39.000
impressive how you could pass a Python list to my C++ class and it would interpret that as a vector


00:17:39.000 --> 00:17:44.280
and then it would pass back the information as well. I think this is the reason I'm such a fan of


00:17:44.280 --> 00:17:49.560
Python is just how well it lets me do so many different things that I'm working on.


00:17:49.560 --> 00:17:54.520
That's a really interesting point. You know, a lot of people talk about well, Python is slow for this or it's slow for that


00:17:54.520 --> 00:17:56.920
and yet here's all these really


00:17:56.920 --> 00:18:02.200
intensive computational things that Python seems to be the preferred language for and I think this is one of the


00:18:02.200 --> 00:18:06.920
hidden secrets that's not apparent as people come into the ecosystem, right?


00:18:06.920 --> 00:18:10.360
Obviously people have been here for a long time. They kind of know that story but


00:18:10.360 --> 00:18:16.280
you know as people come in because there's there's all sorts of people coming into the Python world


00:18:17.080 --> 00:18:24.040
drawn in a little bit like you, you talked about how you started out in biology, not necessarily


00:18:24.040 --> 00:18:28.280
to be in software development specifically, but then you kind of got sucked into it, right?


00:18:28.280 --> 00:18:29.420
Yep.


00:18:29.420 --> 00:18:36.440
Yeah, I think this is a really, I think all of the conversations around the performance of Python


00:18:36.440 --> 00:18:40.600
is super interesting. It's like, oh, it's really slow, except for in this time where it's like as


00:18:40.600 --> 00:18:47.000
fast as C++. Wait a minute, is it slow or is it fast as C++? Well, it's both, right? It varies.


00:18:47.000 --> 00:18:50.800
but you can bring in these extra turbo boosts, right?


00:18:50.800 --> 00:18:54.400
Like Cython, or do your work in NumPy


00:18:54.400 --> 00:18:57.520
rather than in straight lists and stuff like that.


00:18:57.520 --> 00:18:59.840
- Absolutely, and like,


00:18:59.840 --> 00:19:04.360
one of the, initially when I started off my PhD,


00:19:04.360 --> 00:19:07.720
I actually wrote an initial prototype version of it


00:19:07.720 --> 00:19:12.720
all in C++ using OpenCV,


00:19:12.720 --> 00:19:15.240
OpenC++ library and a machine learning,


00:19:15.240 --> 00:19:21.960
a deep learning library called Caffe, which is a bit of a thing back in the day. And that


00:19:21.960 --> 00:19:29.240
process for dealing with data and even just converting data between, I think the best


00:19:29.240 --> 00:19:34.560
thing about Python is the fact that NumPy arrays is just understood by all the scientific


00:19:34.560 --> 00:19:39.560
libraries, whereas sometimes with other languages, it can be painful moving data between different


00:19:39.560 --> 00:19:41.040
libraries and tools.


00:19:41.040 --> 00:19:43.240
Oh, interesting. Yeah, you're right about that. Yeah.


00:19:43.240 --> 00:19:48.600
And so I remembered at one point during my PhD with that initial C++ version,


00:19:48.600 --> 00:19:56.200
I had a page of code to convert between an OpenCV matrix and a Caffe, I think, blob.


00:19:56.200 --> 00:20:01.720
And it was a page of code that I was terrified of breaking because I didn't understand how it worked.


00:20:01.720 --> 00:20:04.920
Whereas Python, it was like everything.


00:20:04.920 --> 00:20:11.680
I can move between scikit-learn, pandas, and all these other libraries.


00:20:11.680 --> 00:20:13.800
and it's all kind of got that common foundation


00:20:13.800 --> 00:20:15.520
that makes me really efficient.


00:20:15.520 --> 00:20:16.680
- Yeah. - And that I understand


00:20:16.680 --> 00:20:17.680
really well.


00:20:17.680 --> 00:20:19.280
- That's a really interesting insight


00:20:19.280 --> 00:20:22.240
that there's this sort of common data structure


00:20:22.240 --> 00:20:24.000
across the libraries, because you're right.


00:20:24.000 --> 00:20:26.240
I remember in C++ and other languages


00:20:26.240 --> 00:20:30.120
like C# and whatnot, this one will take something like this


00:20:30.120 --> 00:20:32.080
and you've got to reorder the data


00:20:32.080 --> 00:20:33.680
and reformat it to pass it over.


00:20:33.680 --> 00:20:35.200
And if you have to do that back and forth,


00:20:35.200 --> 00:20:38.040
it would completely slow things down,


00:20:38.040 --> 00:20:38.920
all sorts of stuff.


00:20:38.920 --> 00:20:40.760
Yeah, very interesting.


00:20:40.760 --> 00:20:51.320
And I think in a way as well, I really loved that the Python stack has let me do things


00:20:51.320 --> 00:21:00.600
during my PhD and then post PhD as well. The skills that I developed in analytics here,


00:21:00.600 --> 00:21:04.600
I've gone on to be able to use that in so many different places. For instance,


00:21:07.000 --> 00:21:13.160
one of the pieces of analysis I did was look, I used Python's NetworkX library to look at the


00:21:13.160 --> 00:21:20.040
social interactions between the queen and worker bees and I would build out these network graphs


00:21:20.040 --> 00:21:26.040
that would explore the number of interactions and the length of time of those interactions


00:21:26.040 --> 00:21:33.320
between the queen and the worker bee and this actually recording independent interactions


00:21:33.320 --> 00:21:38.280
actually became important because sometimes the queen would literally fall asleep behind another


00:21:38.280 --> 00:21:43.160
worker and it would look like she loves that worker but she just was stressed in for like


00:21:43.160 --> 00:21:48.440
over an hour or two. But what I've actually found is that those skills for working with data and


00:21:48.440 --> 00:21:54.600
with network analysis when I was working consulting I would use NetworkX to analyze


00:21:54.600 --> 00:22:01.400
the corporate structure of organizations that we're doing an org review for and then more recently


00:22:01.400 --> 00:22:06.120
I've done work in the energy sector looking at building out networks of power stations


00:22:06.120 --> 00:22:13.080
as well. And so it's, I think that's one of the things I love about this area is that you have


00:22:13.080 --> 00:22:21.160
this kind of transferable skill set that is, you're more limited by what you can think of


00:22:21.160 --> 00:22:27.560
but using it by rather than what you can actually do with it itself. Yeah, absolutely. And I think


00:22:27.560 --> 00:22:33.000
for a lot of people if they're out there listening and they're doing you know academic type stuff or


00:22:33.000 --> 00:22:39.160
working in one area but maybe that's not the area they necessarily want to stay in a lot of these


00:22:39.160 --> 00:22:44.840
skills are super transferable it's one of the things that's blown my mind as I've spent more


00:22:44.840 --> 00:22:49.480
and more time in the software industry was I remember I was doing professional training and


00:22:49.480 --> 00:22:54.480
And I spent one week at a stock brokerage in New York City


00:22:54.480 --> 00:22:57.320
teaching programming.


00:22:57.320 --> 00:22:59.320
And then I spent, two weeks later,


00:22:59.320 --> 00:23:01.780
I was like at an Air Force base


00:23:01.780 --> 00:23:04.060
working with some of the engineers there.


00:23:04.060 --> 00:23:05.620
The stuff that those two groups need to know,


00:23:05.620 --> 00:23:08.080
it sounds like it's entirely different worlds, right?


00:23:08.080 --> 00:23:11.000
It's like 90% identically the same.


00:23:11.000 --> 00:23:13.600
It's just a little bit of what do you do with that


00:23:13.600 --> 00:23:14.440
once you know it?


00:23:14.440 --> 00:23:16.060
Like what's the secret sauce on top of it


00:23:16.060 --> 00:23:16.900
that puts it together?


00:23:16.900 --> 00:23:17.740
But yeah.


00:23:17.740 --> 00:23:20.940
And it sounds like you kind of got that skill in your research.


00:23:20.940 --> 00:23:29.500
Yeah, absolutely. And I think this is one of the things I've noticed is that some PhDs can


00:23:29.500 --> 00:23:38.060
struggle to transition into industry. And often it's because there's people on the industry side


00:23:38.060 --> 00:23:43.500
that don't really understand how those skills can help them. But at the same time, I think


00:23:44.780 --> 00:23:51.420
it's actually a skill to be able to explain how you can link what you already know,


00:23:51.420 --> 00:23:56.700
what you're capable of and solve their kind of business problem. In fact, I think when I went into


00:23:56.700 --> 00:24:02.620
management consulting and I would do some work for some of the partners,


00:24:02.620 --> 00:24:08.940
it took me a little while to figure out that they weren't that interested in


00:24:08.940 --> 00:24:13.340
the code I was doing or even some of the raw data, but if I could figure out a way


00:24:13.340 --> 00:24:17.580
to link that to the business problem they were trying to solve, then they were interested.


00:24:17.580 --> 00:24:23.340
And being able to kind of communicate and act as like a bridge between those was something I


00:24:23.340 --> 00:24:29.740
didn't realize was a skill, but it is hugely valuable in organizations, I've really noticed.


00:24:29.740 --> 00:24:36.380
Yeah, absolutely. All right, one final question about your research before we get into the energy


00:24:36.380 --> 00:24:46.460
sector. What year did you do that work? Oh, so 2014 to 2017. Yeah, and that's not that long ago,


00:24:46.460 --> 00:24:54.620
and yet the machine learning story has probably progressed really quite a bit with deep learning,


00:24:54.620 --> 00:25:01.980
transfer learning, all sorts of stuff going on, the different use of GPUs and tensor compute units


00:25:01.980 --> 00:25:07.340
and whatnot. What would it look like now if you're doing it versus then? What would it


00:25:07.340 --> 00:25:08.340
be different?


00:25:08.340 --> 00:25:17.180
I think now, one of the big differences was really that TensorFlow only came out towards


00:25:17.180 --> 00:25:27.740
the second half of my PhD. So I think that was a difference. Having more accessible machine


00:25:27.740 --> 00:25:35.500
learning libraries and tools really made a big difference. The other one was, I think,


00:25:35.500 --> 00:25:41.260
when I started my project, I actually spent a lot of time playing around with, you know,


00:25:41.260 --> 00:25:46.300
now if you started your PhD, you would go image analysis, it's going to be deep learning.


00:25:46.300 --> 00:25:52.860
Whereas when I started, I was actually pointed in the direction of, oh, go check out, you know,


00:25:52.860 --> 00:25:59.020
support vector machines, try out random forest, try out a whole bunch of different feature


00:25:59.020 --> 00:26:03.900
engineering and machine learning techniques. And so I spent a lot of time kind of moving around


00:26:03.900 --> 00:26:10.220
between those before I literally had a, I got in touch with a researcher in the computer science


00:26:10.220 --> 00:26:15.900
department because I was in the biology department doing this work. And he literally, I had a chat


00:26:15.900 --> 00:26:20.860
with him and he literally looked at what I was doing and he said, "Use deep learning." And he


00:26:20.860 --> 00:26:26.620
said, "Hey, go check out these libraries, but this is what you need to do it." And I think,


00:26:26.620 --> 00:26:34.060
yeah, in a way, that type of, the libraries and the understanding about how you would solve this


00:26:34.060 --> 00:26:41.180
problem now is a lot further along and probably would have shortcut a lot of my initial frustration


00:26:41.180 --> 00:26:45.820
compared to... Yeah, probably. All the lessons you've learned with those late nights of it


00:26:45.820 --> 00:26:48.320
outworking and whatnot, right?


00:26:48.320 --> 00:26:53.080
One other thing really quickly is I'd love to look at this graph here,


00:26:53.080 --> 00:26:57.620
the Stack Overflow trends, and I'll link to this in the show notes.


00:26:57.620 --> 00:27:01.120
There was back in 2017,


00:27:01.120 --> 00:27:04.420
an article by Stack Overflow, their data science team,


00:27:04.420 --> 00:27:07.420
called "The Incredible Growth of Python."


00:27:07.420 --> 00:27:11.420
And they predicted, "Oh, Python's going to overtake some of these languages,


00:27:11.420 --> 00:27:13.120
and you're not going to believe it.


00:27:13.120 --> 00:27:14.920
It's going to be more popular than JavaScript,


00:27:14.920 --> 00:27:18.040
more popular than Java and people are like, no way,


00:27:18.040 --> 00:27:19.920
this is, there's, there's gotta be something wrong


00:27:19.920 --> 00:27:20.800
with the data.


00:27:20.800 --> 00:27:25.280
And obviously here we are in 2021,


00:27:25.280 --> 00:27:27.840
where I think they underestimated, honestly,


00:27:27.840 --> 00:27:30.240
I don't have the exact picture in my mind,


00:27:30.240 --> 00:27:32.080
but I'm pretty sure they underestimated


00:27:32.080 --> 00:27:34.400
the last couple of years, which is pretty interesting,


00:27:34.400 --> 00:27:36.120
but that's not what I want to talk about.


00:27:36.120 --> 00:27:39.600
What I want to talk about is that 2012,


00:27:39.600 --> 00:27:42.720
you know, Python had been around for at that time,


00:27:42.720 --> 00:27:44.520
25 years or something.


00:27:44.520 --> 00:27:47.360
And it was well known, it was a fairly popular language,


00:27:47.360 --> 00:27:49.640
but it was kind of just steady state.


00:27:49.640 --> 00:27:53.560
And then it's like somebody just lit the afterburner


00:27:53.560 --> 00:27:55.680
on that language and it just, you know,


00:27:55.680 --> 00:27:58.720
it just started going up and up right around that time.


00:27:58.720 --> 00:28:01.640
This is the time that you got into Python as well,


00:28:01.640 --> 00:28:03.240
more or less, right?


00:28:03.240 --> 00:28:06.480
I feel like so many people came from


00:28:06.480 --> 00:28:10.360
these not traditional programming spaces.


00:28:10.360 --> 00:28:11.560
I mean, still interested in programming,


00:28:11.560 --> 00:28:15.300
but not like a CS degree type of programming.


00:28:15.300 --> 00:28:17.880
And it just brought so many different,


00:28:17.880 --> 00:28:21.240
so much diversity in terms of the problems being solved.


00:28:21.240 --> 00:28:24.200
And I think this graph is exactly what's happening here.


00:28:24.200 --> 00:28:25.080
It sounds like you're part of that,


00:28:25.080 --> 00:28:27.080
making that curve go up there.


00:28:27.080 --> 00:28:28.600
- Yes, yeah, I guess so.


00:28:28.600 --> 00:28:31.880
And I think for me as well, when Pandas came out,


00:28:31.880 --> 00:28:33.720
I think around in 2012 for working with,


00:28:33.720 --> 00:28:35.240
you know, data frames as objects,


00:28:35.240 --> 00:28:38.840
I've used R, I really liked that kind of data frame feature


00:28:38.840 --> 00:28:45.560
initially. And it was a little bit frustrating before pandas was a thing, being able to,


00:28:45.560 --> 00:28:52.360
having to deal with CSV files and having to treat them as lists and indexing. So when pandas


00:28:52.360 --> 00:28:57.640
became a thing, that was almost one of the big reasons I pushed into using Python


00:28:57.640 --> 00:29:04.680
for so much. And I still feel like I've been using pandas for, yeah, I guess eight or nine years.


00:29:04.680 --> 00:29:09.480
And I'm pretty sure the project I'm on currently, I'm pretty sure I've learned a few extra things


00:29:09.480 --> 00:29:13.800
about the library just in the last couple of weeks. Yeah, it's crazy how that works, right?


00:29:13.800 --> 00:29:18.280
You're like, I've been doing this forever. How did I not know about this part of it, right?


00:29:18.280 --> 00:29:24.440
Yep, absolutely. Amazing, amazing. All right, well, super cool project you had there.


00:29:26.760 --> 00:29:34.760
Let's talk about energy. So you work for the Australian Energy Market Commission?


00:29:34.760 --> 00:29:44.920
Yes. So you could almost think of them as the rule maker for the energy market. We don't


00:29:44.920 --> 00:29:53.160
run the energy market, that's the Australian Energy Market operator, but they effectively


00:29:54.120 --> 00:29:59.960
pass the legislation that determines how people have to act within the energy market.


00:29:59.960 --> 00:30:10.680
Yeah and so and I think I came into, the reason I really joined the organization was because


00:30:10.680 --> 00:30:17.640
when I was working in consulting I did a lot of work in, I started doing work in the energy sector


00:30:17.640 --> 00:30:23.400
and I do work for energy retailers, the people that you pay for your electricity,


00:30:23.400 --> 00:30:31.240
I just worked for some industrial companies and one of the things I found was when I bumped into


00:30:31.240 --> 00:30:41.240
the wholesale energy data, it was almost like this, what was it, the city of gold in some way.


00:30:41.240 --> 00:30:48.680
It was immense amounts of reasonably well-structured and cleans data where the


00:30:48.680 --> 00:30:52.080
the limitation wasn't the data or cleaning it.


00:30:52.080 --> 00:30:54.200
The limitation was understanding


00:30:54.200 --> 00:30:56.560
the domain well enough to do interesting things with it.


00:30:56.560 --> 00:30:58.200
>> Right. Okay.


00:30:58.200 --> 00:31:01.840
>> That really became my obsession,


00:31:01.840 --> 00:31:03.840
was to learn as much as I could,


00:31:03.840 --> 00:31:05.320
so I could actually do more and


00:31:05.320 --> 00:31:07.880
more interesting things with the data.


00:31:07.880 --> 00:31:15.200
The reason I joined the AAMC was because it's one of


00:31:15.200 --> 00:31:21.980
the most amazing workplaces in terms of the capability of everyone there is so passionate


00:31:21.980 --> 00:31:28.600
and incredible at what they do. And so just being around these people and learning from


00:31:28.600 --> 00:31:33.140
them is just an experience in itself.


00:31:33.140 --> 00:31:38.660
Yeah, fantastic. That sounds super interesting. And it sounds like things like your network


00:31:38.660 --> 00:31:43.020
experience, you know, there's probably a lot of networks and energy and suppliers and whatnot


00:31:43.020 --> 00:31:46.380
there might go together.


00:31:46.380 --> 00:31:47.340
Absolutely.


00:31:47.340 --> 00:31:47.840
Yeah.


00:31:47.840 --> 00:31:57.380
Yeah, so basically, it's kind of a market


00:31:57.380 --> 00:32:00.020
that they set the price of energy.


00:32:00.020 --> 00:32:02.980
And then generators, like private companies


00:32:02.980 --> 00:32:07.260
that have power plants and solar farms and whatnot,


00:32:07.260 --> 00:32:08.660
they can decide whether or not they


00:32:08.660 --> 00:32:11.980
want to participate at that very moment in the grid,


00:32:11.980 --> 00:32:15.900
or how does it work? Yeah, absolutely. So yeah, this is one of the fascinating things about the


00:32:15.900 --> 00:32:23.020
wholesale energy market. You can almost think that every five minutes, the market operator is


00:32:23.020 --> 00:32:31.100
effectively running an auction where all power stations around on the East Coast of Australia


00:32:31.100 --> 00:32:38.460
are submitting in bids for how much they were willing to sell different volumes of electricity


00:32:38.460 --> 00:32:48.380
at. So for instance, a wind farm might say that they will sell this volume of power quite cheaply,


00:32:48.380 --> 00:32:54.940
whereas a gas generator that has quite a high cost of fuel will set a higher price. And the


00:32:54.940 --> 00:33:02.780
market operator will take all of these bids, and it knows the locations of these generators,


00:33:02.780 --> 00:33:08.140
it knows the capabilities of the transmission lines and the network and it will run this


00:33:08.140 --> 00:33:15.260
linear optimization to figure out, okay, what is the cheapest mix of generators that I should


00:33:15.260 --> 00:33:23.740
dispatch to satisfy demand while still making sure the network is secure. Okay, so it's like


00:33:23.740 --> 00:33:28.780
trying to optimize certain goals, like we are going to need however much energy in the grid at this


00:33:28.780 --> 00:33:34.900
this very moment and these people are willing to supply it at this, like, what, how do we


00:33:34.900 --> 00:33:39.860
get, you know, who do we take however much energy from until we get like both enough


00:33:39.860 --> 00:33:43.980
people that are willing to participate from a financial perspective and then what people


00:33:43.980 --> 00:33:44.980
also need, huh?


00:33:44.980 --> 00:33:45.980
Yes, absolutely.


00:33:45.980 --> 00:33:52.020
And that's, that's the thing that's so fascinating about this market is that at all times, supply


00:33:52.020 --> 00:33:55.740
and demand have to be, have to be matched.


00:33:55.740 --> 00:34:05.740
Very, very carefully because it'll break the grid if there's, well, too much is probably worse than too little because you just get a brownout, right? But too much could destroy things, right?


00:34:05.740 --> 00:34:19.740
Yeah, you don't want too much. If you have too much, then you need generators to start to try and reduce their output. And at the same time, if you have too little, then it can also create problems.


00:34:19.740 --> 00:34:24.740
And in fact, the grid has to be kept at this precise,


00:34:24.740 --> 00:34:30.540
such a precise level of balance that if it actually,


00:34:30.540 --> 00:34:32.340
you have too much or too little for too long,


00:34:32.340 --> 00:34:35.140
it will damage the machines that are connected to it.


00:34:35.140 --> 00:34:37.060
And in fact, to protect themselves,


00:34:37.060 --> 00:34:39.440
you will actually see them start to disconnect


00:34:39.440 --> 00:34:43.060
and it can actually create these kind of cascading problems.


00:34:43.060 --> 00:34:48.060
So unless you, we actually had a fascinating example


00:34:49.720 --> 00:34:54.720
recently in Queensland, where a coal turbine blew up.


00:34:54.720 --> 00:34:58.840
And it then tripped a whole bunch


00:34:58.840 --> 00:35:00.680
of other coal power stations


00:35:00.680 --> 00:35:04.620
that then stopped creating load.


00:35:04.620 --> 00:35:06.180
And so you suddenly had this situation


00:35:06.180 --> 00:35:09.620
where you had all this demand for electricity,


00:35:09.620 --> 00:35:13.360
and suddenly they just lost all of this generation ability.


00:35:13.360 --> 00:35:15.480
And what actually happened is the system


00:35:15.480 --> 00:35:20.000
just started disconnecting, well, it caused a blackout.


00:35:20.000 --> 00:35:22.640
It was this automated system in a fraction of a second


00:35:22.640 --> 00:35:25.420
that just started disconnecting load or demand


00:35:25.420 --> 00:35:27.900
to try and balance it as quickly as possible


00:35:27.900 --> 00:35:29.520
to try and arrest the problem.


00:35:29.520 --> 00:35:33.140
And so, and one of the things I've actually been doing


00:35:33.140 --> 00:35:35.340
has been looking at this at like a,


00:35:35.340 --> 00:35:38.840
on a four second basis, the events that happened on this day


00:35:38.840 --> 00:35:43.240
and how different units responded to these events.


00:35:43.240 --> 00:35:44.360
It's amazing.


00:35:44.360 --> 00:35:49.360
There's almost like the energy sector and the market,


00:35:49.360 --> 00:35:53.960
it's almost like there's the physical infrastructure


00:35:53.960 --> 00:35:57.400
and making everything work and all that amazing engineering.


00:35:57.400 --> 00:35:59.640
And then there's the financial market


00:35:59.640 --> 00:36:01.040
and the bids and everything like that


00:36:01.040 --> 00:36:02.460
that's built on top of it.


00:36:02.460 --> 00:36:04.840
And the market and the bids are fascinating,


00:36:04.840 --> 00:36:06.440
but at the end of the day,


00:36:06.440 --> 00:36:08.420
everything has to bow to the engineering.


00:36:08.420 --> 00:36:09.400
It has to work.


00:36:09.400 --> 00:36:10.840
- It has to work, yeah.


00:36:10.840 --> 00:36:12.760
Yeah, or it's all just gonna come apart.


00:36:12.760 --> 00:36:14.120
How interesting.


00:36:14.120 --> 00:36:16.240
AR out in the live stream says,


00:36:16.240 --> 00:36:19.260
is AEMC doing anything with Energy Web?


00:36:19.260 --> 00:36:23.040
- I'm not sure if I've come across that before,


00:36:23.040 --> 00:36:25.360
but I'd be interested in looking into it.


00:36:25.360 --> 00:36:28.600
- Yeah, and then also, it sounds like DERMS,


00:36:28.600 --> 00:36:30.720
what you're describing, or D-E-R-M-S,


00:36:30.720 --> 00:36:32.280
I'm not sure how you pronounce it.


00:36:32.280 --> 00:36:34.360
- That might be something, an acronym,


00:36:34.360 --> 00:36:39.160
from the U.S. energy markets.


00:36:39.160 --> 00:36:42.280
Everyone has their own kind of different acronym.


00:36:42.280 --> 00:36:43.720
- Oh yeah, that makes it easy, right,


00:36:43.720 --> 00:36:45.400
to not even be consistent.


00:36:45.400 --> 00:36:46.240
- Oh, cool, cool.


00:36:46.240 --> 00:36:50.320
- If you go to the market operators website,


00:36:50.320 --> 00:36:54.560
they have a glossary page where you can just scroll


00:36:54.560 --> 00:36:57.400
for all those days on all the acronyms.


00:36:57.400 --> 00:37:00.080
- Like an acronym, a source, we call it this,


00:37:00.080 --> 00:37:01.280
what do they call it?


00:37:01.280 --> 00:37:03.040
- Exactly, exactly.


00:37:03.040 --> 00:37:05.600
- So we have on the graph here,


00:37:05.600 --> 00:37:06.600
this picture on the screen,


00:37:06.600 --> 00:37:09.200
where energy went negative actually.


00:37:09.200 --> 00:37:11.240
And so,


00:37:13.280 --> 00:37:19.520
This is where people are so willing to pay to take energy that you've generated.


00:37:19.520 --> 00:37:21.520
That sounds completely insane.


00:37:21.520 --> 00:37:22.520
Yeah, I know.


00:37:22.520 --> 00:37:23.520
It sounds weird.


00:37:23.520 --> 00:37:30.680
So, yeah, to explain this figure, what's been happening this year in South Australia, the


00:37:30.680 --> 00:37:39.240
wholesale price of electricity has been around, averaged around negative $20 during the middle


00:37:39.240 --> 00:37:41.840
of the day, pretty much consistently.


00:37:41.840 --> 00:37:48.280
And so the way this works is because the generators submit bids for how much they're willing to


00:37:48.280 --> 00:37:55.160
sell their electricity for, because they'll effectively, when they run the optimization,


00:37:55.160 --> 00:37:59.840
the price of the bid that satisfies demand is the price that everyone gets paid.


00:37:59.840 --> 00:38:06.720
So what a lot of generators will do is they'll bid in quite cheaply at negative prices so


00:38:06.720 --> 00:38:10.080
that they're sure that they will get dispatched.


00:38:10.080 --> 00:38:15.200
But if everyone bids in a negative prices, then everyone gets the negative price.


00:38:15.200 --> 00:38:20.480
And so what we've actually been seeing is because there's now so much generation in


00:38:20.480 --> 00:38:26.560
the middle of the day, you're ending up with these really fascinating market events, like


00:38:26.560 --> 00:38:35.440
yeah, these negative prices where literally if you can get paid to consume electricity.


00:38:35.440 --> 00:38:40.440
- Yeah, that's, as a consumer, that sounds pretty good.


00:38:40.440 --> 00:38:43.880
Get it nice and chilly and you'll all be fine.


00:38:43.880 --> 00:38:46.240
One of the drivers of this, it sounds to me like,


00:38:46.240 --> 00:38:49.260
is solar energy in Australia, right?


00:38:49.260 --> 00:38:54.220
- Yes, yes, we now have so much rooftop solar.


00:38:54.220 --> 00:38:56.440
I can't remember the exact percentage,


00:38:56.440 --> 00:38:59.760
but a significant percentage of Australian households


00:38:59.760 --> 00:39:02.560
now have solar panels because the cost


00:39:02.560 --> 00:39:04.000
has come down so much.


00:39:05.000 --> 00:39:10.280
And so a lot of our work has involved looking at how that is impacting the grid,


00:39:10.280 --> 00:39:19.560
because if you imagine historically, the energy market was a process where,


00:39:19.560 --> 00:39:24.200
you know, the market operator could instruct generators to turn on or turn off.


00:39:24.200 --> 00:39:29.160
And now we're in a world where there's so much of these kind of small scale


00:39:29.160 --> 00:39:33.960
solar that you can't tell what to do.


00:39:33.960 --> 00:39:37.640
How do you factor that into balancing supply and demand


00:39:37.640 --> 00:39:38.920
in the grid?


00:39:38.920 --> 00:39:41.520
- Yeah, well, it definitely sounds like


00:39:41.520 --> 00:39:43.600
some interesting Python must be at play there.


00:39:43.600 --> 00:39:47.840
So give us an overview of sort of where,


00:39:47.840 --> 00:39:48.680
what kind of tools you're using,


00:39:48.680 --> 00:39:50.800
the types of problems you're solving.


00:39:50.800 --> 00:39:51.640
- Yeah, sure.


00:39:51.640 --> 00:39:54.720
So in the solar place,


00:39:55.880 --> 00:40:00.760
we've been using a Python, a software package called SAM,


00:40:00.760 --> 00:40:02.600
which is the system advisor model,


00:40:02.600 --> 00:40:07.600
which is actually released by the National Renewable Energy


00:40:07.600 --> 00:40:09.680
Laboratory in the States.


00:40:09.680 --> 00:40:12.520
And they've actually, and so what it lets you do


00:40:12.520 --> 00:40:16.960
is if you provide solar irradiance data


00:40:16.960 --> 00:40:19.120
and data from weather stations,


00:40:19.120 --> 00:40:24.120
you can use it to simulate the generation of a rooftop


00:40:25.520 --> 00:40:29.760
in different areas around the country on a granular,


00:40:29.760 --> 00:40:33.260
on a half hourly basis over the course of the year.


00:40:33.260 --> 00:40:37.300
And so what this lets us do is I can use,


00:40:37.300 --> 00:40:39.700
they've got a Python library that lets me kind of call


00:40:39.700 --> 00:40:44.080
and run this tool and I can simulate different


00:40:44.080 --> 00:40:49.160
PV system sizes and different locations and angles


00:40:49.160 --> 00:40:53.060
and all setups all around the country.


00:40:53.060 --> 00:40:55.860
so I can effectively simulate hundreds and hundreds


00:40:55.860 --> 00:40:57.580
of different PV systems.


00:40:57.580 --> 00:41:01.740
And if I combine that with how much the household


00:41:01.740 --> 00:41:06.740
is consuming and what the actual cost of electricity was


00:41:06.740 --> 00:41:09.540
in those half hour intervals,


00:41:09.540 --> 00:41:12.260
you can suddenly build up a picture


00:41:12.260 --> 00:41:16.840
for the economic effect of different,


00:41:16.840 --> 00:41:22.740
of PV panels for different households around the country.


00:41:22.740 --> 00:41:23.580
- Yeah, how interesting.


00:41:23.580 --> 00:41:26.780
Is this the right thing I pulled up here, this PySAM?


00:41:26.780 --> 00:41:27.820
- Yes, yes.


00:41:27.820 --> 00:41:32.620
And I will say that for your US listeners,


00:41:32.620 --> 00:41:39.060
the laboratory release all of the data


00:41:39.060 --> 00:41:41.700
for the US mainland in a format


00:41:41.700 --> 00:41:43.940
that's ready for you guys to go.


00:41:43.940 --> 00:41:46.380
I had to, a big part of my project


00:41:46.380 --> 00:41:49.400
was actually trying to turn the Australian data


00:41:49.400 --> 00:41:52.880
into a format that this program could understand.


00:41:52.880 --> 00:41:56.840
And that in itself was an interesting exercise


00:41:56.840 --> 00:42:00.720
in data cleaning and manipulation


00:42:00.720 --> 00:42:05.720
because for instance, all of the data on the irradiance


00:42:05.720 --> 00:42:10.120
for the country came as tens of thousands


00:42:10.120 --> 00:42:14.020
of these text files that were just these kind of grids,


00:42:14.020 --> 00:42:16.120
which pretty much they said,


00:42:16.120 --> 00:42:20.120
Each value represents a five by five kilometer grid


00:42:20.120 --> 00:42:21.680
on the Australian mainland.


00:42:21.680 --> 00:42:23.080
It starts at this coordinate.


00:42:23.080 --> 00:42:26.200
So I had to pretty much try and convert this text file


00:42:26.200 --> 00:42:30.360
into a map and then convert that into a format


00:42:30.360 --> 00:42:33.880
so I could know where the house fell in that as well.


00:42:33.880 --> 00:42:34.720
- Oh, wow.


00:42:34.720 --> 00:42:36.120
How interesting.


00:42:36.120 --> 00:42:38.760
Yeah, that's, you don't normally think of,


00:42:38.760 --> 00:42:41.840
excuse me, like taking a bunch of text files


00:42:41.840 --> 00:42:44.240
and turning, like piecing those together in a map,


00:42:44.240 --> 00:42:46.140
but I guess you do.


00:42:46.140 --> 00:42:49.200
Eugene, who was on the show a little while ago


00:42:49.200 --> 00:42:52.380
about the life lessons from machine learning,


00:42:52.380 --> 00:42:54.360
had brought an interesting quote.


00:42:54.360 --> 00:42:56.060
It was something to the effect of,


00:42:56.060 --> 00:42:59.800
"The data cleaning is not the grunt work.


00:42:59.800 --> 00:43:03.120
"It is the work of," like so much of this, right?


00:43:03.120 --> 00:43:05.640
Like it's getting everything right,


00:43:05.640 --> 00:43:08.360
making sure it's correct, converting it, formatting it,


00:43:08.360 --> 00:43:10.560
and then you feed it off to the magic library


00:43:10.560 --> 00:43:12.080
and get the answer, right?


00:43:12.080 --> 00:43:20.640
Yep, oh absolutely. And I think, yeah, the lessons that you learn from working with and


00:43:20.640 --> 00:43:28.880
cleaning the data often help inform your analysis later on. For instance, one of the things I was


00:43:28.880 --> 00:43:35.200
doing recently was I've been trying to correct for errors in this really large data set measuring


00:43:35.200 --> 00:43:41.600
output from these power stations. And so one of the pieces of advice I received was that if I see


00:43:41.600 --> 00:43:48.800
a data where the generation value from the power station does not change.


00:43:48.800 --> 00:43:53.800
It effectively says this power station is generating 100 megawatts and that value doesn't


00:43:53.800 --> 00:43:58.040
change for at least a minute.


00:43:58.040 --> 00:44:01.000
That means there's an error in the data collection.


00:44:01.000 --> 00:44:05.760
And so as I was cleaning up the data and I implemented that and I started looking for


00:44:05.760 --> 00:44:14.720
outliers and I actually discovered that you could see for some solar farms that it looks like if I


00:44:14.720 --> 00:44:21.680
used this metric that I'd implemented to pick out the bad data, it was actually removing cases where


00:44:21.680 --> 00:44:28.640
the power station, the solar farm was deliberately keeping their output perfectly leveled to match


00:44:28.640 --> 00:44:35.680
this instruction from the market operator. And so I think this is a case where they were actually


00:44:35.680 --> 00:44:40.480
foregoing additional generation to be more predictable. And I would have missed this whole


00:44:40.480 --> 00:44:47.280
interesting power station behavior if I just, you know, if I wasn't thinking about what the


00:44:47.280 --> 00:44:51.680
implications were of these different, you know, cleaning techniques that I was doing.


00:44:51.680 --> 00:44:58.720
Okay. Yeah. Cause maybe that, that advice comes from, I don't know, a gas power plant or a coal


00:44:58.720 --> 00:45:04.240
plant where they, they have to fluctuate because, you know, whatever reason, right. And this new


00:45:04.240 --> 00:45:08.960
world, the assumptions changed or the situation changed and the assumptions didn't, right?


00:45:08.960 --> 00:45:18.560
Absolutely. And I think, in a way, part of the reason I think I've always gravitated towards


00:45:18.560 --> 00:45:26.640
being passionate about combining the programming and the analytics with deep domain expertise is


00:45:26.640 --> 00:45:33.200
that I really love when I'm working with the data set. When I see something weird, I love


00:45:33.200 --> 00:45:39.040
that I can go, "That's wrong, I can remove that," or "That looks weird, I'm going to


00:45:39.040 --> 00:45:43.920
investigate this because I think that's interesting." And one of the things I found in consulting was


00:45:43.920 --> 00:45:50.560
the projects where I didn't understand the data or the industry as well were always a bit,


00:45:50.560 --> 00:45:57.680
and I was brought into the team to provide the analytics capability, but I was effectively


00:45:57.680 --> 00:46:03.680
turning the understanding of others into code, I've always found them a little bit less satisfying


00:46:03.680 --> 00:46:08.560
from a personal perspective because I didn't feel like I was the one who was really, you know,


00:46:08.560 --> 00:46:15.600
getting, who, I felt like I was a vehicle for other people to turn their thoughts into code,


00:46:15.600 --> 00:46:20.320
whereas I really like that if I understand the domain, then suddenly I can investigate


00:46:20.320 --> 00:46:27.120
and understand the area. Yeah, it becomes a puzzle, not just, I don't know, just more


00:46:27.120 --> 00:46:27.960
- Yeah.


00:46:27.960 --> 00:46:29.120
- Get information from these people,


00:46:29.120 --> 00:46:30.700
apply it to the data, see what comes out.


00:46:30.700 --> 00:46:31.540
Yeah, for sure.


00:46:31.540 --> 00:46:34.080
You know, someone asked me recently,


00:46:34.080 --> 00:46:35.640
they were looking to hire somebody.


00:46:35.640 --> 00:46:37.440
It was, I don't know if it was exactly


00:46:37.440 --> 00:46:40.040
in the data science world, but it's close enough.


00:46:40.040 --> 00:46:42.660
They were asking something to the effect of,


00:46:42.660 --> 00:46:45.960
should I go and try to find a computer science


00:46:45.960 --> 00:46:49.320
type of background person who I can then teach


00:46:49.320 --> 00:46:53.800
the subject matter to and kind of get them up to speed there


00:46:53.800 --> 00:46:55.520
'cause we need good programmers,


00:46:55.520 --> 00:47:00.720
Or should I find some people who really understand what we're doing and then try to teach them Python?


00:47:00.720 --> 00:47:07.360
What would you say to that? I have a thought on it, but I'd love to hear yours.


00:47:07.360 --> 00:47:18.000
I think to a certain extent, the experience, you want to have, I guess, the passion for learning about the domain.


00:47:18.000 --> 00:47:21.840
And obviously, if they understand the domain, that's really valuable.


00:47:22.120 --> 00:47:24.040
but you probably want them to be exposed


00:47:24.040 --> 00:47:26.700
at least a little bit to some programming concepts


00:47:26.700 --> 00:47:28.500
for them to know that they like it.


00:47:28.500 --> 00:47:33.500
In fact, I remember when I had a chat with my former boss


00:47:33.500 --> 00:47:37.020
who hired me into my current role,


00:47:37.020 --> 00:47:41.060
and he said that his hiring philosophy is


00:47:41.060 --> 00:47:44.980
he looks for people with interesting backgrounds.


00:47:44.980 --> 00:47:48.480
My background, he saw computational biology,


00:47:48.480 --> 00:47:49.980
and a lot of people would be like,


00:47:49.980 --> 00:47:52.100
oh, how does that apply to the energy sector?


00:47:52.100 --> 00:47:54.820
That's not for us. That's something totally different.


00:47:54.820 --> 00:48:01.540
Exactly. But he said, for him, that's an interesting story. And he could see how those skills can


00:48:01.540 --> 00:48:05.060
generalize to different areas. And then it's more about, are you passionate about the thing


00:48:05.060 --> 00:48:10.900
you're working on as well? So I think people can learn, people with domain expertise, I think


00:48:10.900 --> 00:48:17.140
learning Python can be like adding a bit of a superpower to your skills and domain skills as


00:48:17.140 --> 00:48:21.180
as well, but I also think that you wouldn't want to say,


00:48:21.180 --> 00:48:24.540
say for instance, you wouldn't want to hire someone


00:48:24.540 --> 00:48:26.940
who had good domain expertise into the team


00:48:26.940 --> 00:48:29.540
to be a programmer who'd never programmed before


00:48:29.540 --> 00:48:31.860
and discovered they needed programming as well.


00:48:31.860 --> 00:48:33.580
- Yeah, I think the assumption was


00:48:33.580 --> 00:48:35.700
that they had a little bit of programming experience


00:48:35.700 --> 00:48:37.340
or they were super interested in it,


00:48:37.340 --> 00:48:39.300
but maybe not all the way there.


00:48:39.300 --> 00:48:40.540
I mean, I thought it was,


00:48:40.540 --> 00:48:45.660
yeah, I think the subject matter expertise


00:48:45.660 --> 00:48:47.620
is really valuable.


00:48:47.620 --> 00:48:49.940
I think these days there's so many amazing libraries


00:48:49.940 --> 00:48:52.660
and Python, it's so accessible


00:48:52.660 --> 00:48:56.060
that it is really important to understand


00:48:56.060 --> 00:48:57.700
like deeply what's happening.


00:48:57.700 --> 00:48:59.740
But you should probably also have one or two people


00:48:59.740 --> 00:49:02.740
who have like a true software engineer experience.


00:49:02.740 --> 00:49:05.840
Like, hey, has anybody told anyone around here about Git?


00:49:05.840 --> 00:49:07.340
We need to be using source control.


00:49:07.340 --> 00:49:08.900
And what about continuous integration?


00:49:08.900 --> 00:49:10.340
Have you heard of testing?


00:49:10.340 --> 00:49:11.660
Like those kinds of things matter.


00:49:11.660 --> 00:49:15.420
But I think also having this like deep understanding


00:49:15.420 --> 00:49:17.060
It really matters.


00:49:17.060 --> 00:49:17.980
Absolutely.


00:49:17.980 --> 00:49:18.980
Yeah, cool.


00:49:18.980 --> 00:49:19.740
Cool, cool.


00:49:19.740 --> 00:49:25.700
All right, so you talked about this system advisor model.


00:49:25.700 --> 00:49:29.300
Are there other things like in, say, the astronomy space,


00:49:29.300 --> 00:49:32.580
there's AstroPi, like all the astronomers talk about.


00:49:32.580 --> 00:49:33.500
This is the library.


00:49:33.500 --> 00:49:34.340
These are the things.


00:49:34.340 --> 00:49:37.380
You talked about pandas and NumPy and whatnot already.


00:49:37.380 --> 00:49:40.560
But is there something like that or a couple libraries


00:49:40.560 --> 00:49:43.900
like that in the energy space?


00:49:43.900 --> 00:49:50.820
The closest I would probably say is the Paiomo optimization library that I think Clark mentioned


00:49:50.820 --> 00:49:51.820
in a previous interview.


00:49:51.820 --> 00:49:55.620
Yeah, yeah, we had Clark come on to talk about that and he was doing really cool stuff.


00:49:55.620 --> 00:49:56.620
Clark, yeah.


00:49:56.620 --> 00:50:03.460
I'm going to set up a chat with our team with Clark, and that's the plan at a later date


00:50:03.460 --> 00:50:10.060
because it was very interesting what he was able to do during his master's with learning


00:50:10.060 --> 00:50:11.060
optimization.


00:50:11.060 --> 00:50:17.820
And so I think, yeah, like really, there may be libraries out there that I haven't come


00:50:17.820 --> 00:50:23.140
across yet at this point, but I've really found that the whole, yeah, the Python stack


00:50:23.140 --> 00:50:32.740
of pandas, pyemo optimizations, and even things like, have you come across a library called


00:50:32.740 --> 00:50:34.860
Geopandas at all?


00:50:34.860 --> 00:50:35.860
Yes.


00:50:35.860 --> 00:50:38.300
Which has spatial elements and data frames.


00:50:38.300 --> 00:50:40.820
I use that for a lot of analysis as well.


00:50:40.820 --> 00:50:41.780
- Geopandas sounds cool.


00:50:41.780 --> 00:50:42.740
I haven't done anything with it,


00:50:42.740 --> 00:50:44.700
but I would love an opportunity


00:50:44.700 --> 00:50:46.780
to do something fun with Geopandas.


00:50:46.780 --> 00:50:49.540
- I did that when I was working in consulting.


00:50:49.540 --> 00:50:52.660
I used that library once for looking at data


00:50:52.660 --> 00:50:54.300
from the Australian Bureau of Statistics.


00:50:54.300 --> 00:50:57.860
And then suddenly I was in demand for every proposal


00:50:57.860 --> 00:51:00.460
to be making these heat maps of the country.


00:51:00.460 --> 00:51:01.500
I suddenly was just making,


00:51:01.500 --> 00:51:04.780
I had heat maps coming out everywhere.


00:51:04.780 --> 00:51:05.620
- Yeah.


00:51:05.620 --> 00:51:06.460
- It's a phenomenal--


00:51:06.460 --> 00:51:08.380
- Jack knows how to make these graphs.


00:51:08.380 --> 00:51:09.220
Give it to Jack.


00:51:09.220 --> 00:51:10.060
He'll build it for you.


00:51:10.060 --> 00:51:12.180
- Yeah, exactly.


00:51:12.180 --> 00:51:15.500
But GeoPandas, if you know a bit about


00:51:15.500 --> 00:51:19.580
using Pandas and data frames for working with data sets,


00:51:19.580 --> 00:51:23.960
it's pretty much like using a Pandas data frame,


00:51:23.960 --> 00:51:26.020
but it just adds a whole bunch of capability


00:51:26.020 --> 00:51:27.660
for working with spatial data sets


00:51:27.660 --> 00:51:32.220
and creating beautiful figures as well.


00:51:32.220 --> 00:51:34.040
It's amazing.


00:51:34.040 --> 00:51:35.580
- Yeah, it sounds super cool.


00:51:35.580 --> 00:51:37.740
Super cool, yeah, it works with Shapely.


00:51:37.740 --> 00:51:39.340
It sounds like it would work really well


00:51:39.340 --> 00:51:41.980
with your 10,000 text files almost even.


00:51:41.980 --> 00:51:43.320
- Yeah, yeah, yeah.


00:51:43.320 --> 00:51:45.280
For some of those things, you know.


00:51:45.280 --> 00:51:46.300
Yeah. - Yeah, yeah.


00:51:46.300 --> 00:51:48.700
Alexander out in the live streams coming back,


00:51:48.700 --> 00:51:49.940
just one quick thought says,


00:51:49.940 --> 00:51:51.580
"I wish people learned at least some programming.


00:51:51.580 --> 00:51:55.020
"Making custom software to cover simple cases


00:51:55.020 --> 00:51:55.920
"is definitely tiring,


00:51:55.920 --> 00:51:58.620
"and most of the time it's just a simple script."


00:51:58.620 --> 00:52:00.360
Yeah, I mean, kind of the automate the boring stuff


00:52:00.360 --> 00:52:03.040
could take a lot of people a long ways for sure.


00:52:03.040 --> 00:52:06.180
That level. - Yeah, absolutely.


00:52:06.180 --> 00:52:08.980
- Yeah, so, sorry, go ahead, Jack.


00:52:08.980 --> 00:52:10.980
Oh, yeah, I was going to say that.


00:52:10.980 --> 00:52:19.220
In a way, a lot of the little things that I would go around and be useful for when I was working in consulting,


00:52:19.220 --> 00:52:23.220
if people had a little bit of programming background,


00:52:23.220 --> 00:52:28.500
then yeah, they almost wouldn't need my input because they understood the area better than me.


00:52:28.500 --> 00:52:33.460
And if they had a little bit of Python and knew how to link up some data sets,


00:52:33.460 --> 00:52:38.820
then it would be like, they could just automate so much of some tedious things.


00:52:38.820 --> 00:52:43.140
One thing I heard a lot in that sort of realm was,


00:52:43.140 --> 00:52:45.380
"If you automate all these things,


00:52:45.380 --> 00:52:46.740
you're going to take our jobs away.


00:52:46.740 --> 00:52:47.540
What are we going to do?"


00:52:47.540 --> 00:52:52.300
This painful, tedious manual stuff that should be automated,


00:52:52.300 --> 00:52:54.660
that's our job because that's what a lot of


00:52:54.660 --> 00:52:56.500
the people that I had worked with for a while,


00:52:56.500 --> 00:52:58.900
that's what they did and they were legitimately a little


00:52:58.900 --> 00:53:01.420
concerned that if we wrote


00:53:01.420 --> 00:53:03.900
software that would do those things automatically,


00:53:03.900 --> 00:53:05.220
well, then what would they do?


00:53:05.220 --> 00:53:08.260
I saw year after year we would write that software,


00:53:08.260 --> 00:53:14.300
they would say, "Thank goodness we don't have to do this again." And they would just solve more problems, take on more data.


00:53:14.300 --> 00:53:18.820
They would just do more. And almost never did it result in, "Well, we don't need these people anymore."


00:53:18.820 --> 00:53:22.460
It just meant they got to do more interesting stuff in a bigger scale.


00:53:22.460 --> 00:53:28.340
Absolutely. This is what I find when I work with new data sets or problems.


00:53:28.340 --> 00:53:33.700
And once you've solved the problem, you understand that data, you fix the issues with it,


00:53:33.700 --> 00:53:40.580
Suddenly, having that kind of foundation and curated data set lets you actually build on


00:53:40.580 --> 00:53:42.980
it and do more interesting things going forward.


00:53:42.980 --> 00:53:48.420
It's not like you've done that, you never need to do that again.


00:53:48.420 --> 00:53:53.140
That's what drew me to the energy sector because it was like, the more I worked with these


00:53:53.140 --> 00:53:57.740
data sets, the more I understood and the more interesting questions I could answer, which


00:53:57.740 --> 00:53:58.740
is really satisfying.


00:53:58.740 --> 00:54:03.080
- Yeah, yeah, and the more things that are batch processes


00:54:03.080 --> 00:54:06.080
can become almost real time and really change things.


00:54:06.080 --> 00:54:07.200
So speaking of data,


00:54:07.200 --> 00:54:11.160
it sounds like you guys work with a ton of data over there.


00:54:11.160 --> 00:54:13.680
Give us a sense for the scale.


00:54:13.680 --> 00:54:18.680
- Yeah, so I guess the more standard data set is,


00:54:18.680 --> 00:54:23.280
there's a database that has pretty much everything going on


00:54:23.280 --> 00:54:26.720
in terms of dispatch on a five minute basis.


00:54:26.720 --> 00:54:28.720
And so for most of your users,


00:54:28.720 --> 00:54:30.680
if you just want to see what the power station is doing,


00:54:30.680 --> 00:54:32.460
what it's bidding, you can use that data.


00:54:32.460 --> 00:54:35.880
It's large, like pulling out some of these data sets


00:54:35.880 --> 00:54:38.640
and it's in, you know, 100 or 200 million rows


00:54:38.640 --> 00:54:40.160
looking at certain parts of it.


00:54:40.160 --> 00:54:42.500
But the thing I'm working on at the moment,


00:54:42.500 --> 00:54:46.120
it almost makes this kind of look small.


00:54:46.120 --> 00:54:49.800
And this is kind of that same data from that same database,


00:54:49.800 --> 00:54:51.920
but it's on a four second basis.


00:54:51.920 --> 00:54:56.440
So a single month of data is about 750 million rows.


00:54:56.440 --> 00:55:02.060
And it gets all released as thousands of zipped folders


00:55:02.060 --> 00:55:05.520
containing CSVs, one CSV for every half hour.


00:55:05.520 --> 00:55:07.280
- Oh my goodness.


00:55:07.280 --> 00:55:10.180
So is there like a big process that just goes along,


00:55:10.180 --> 00:55:12.880
unzips it, grabs it, inserts it into some database


00:55:12.880 --> 00:55:14.440
or something along those lines?


00:55:14.440 --> 00:55:16.760
- I think that's how it got,


00:55:16.760 --> 00:55:19.320
I think that was how it gets shared in some format.


00:55:19.320 --> 00:55:23.200
So this is how I was given the data on my current project.


00:55:23.200 --> 00:55:27.080
And so it's so big I can't actually unzip it on the machine.


00:55:27.080 --> 00:55:31.560
So I have to use, I'll actually use Python


00:55:31.560 --> 00:55:36.280
to kind of spin up a number of separate processes


00:55:36.280 --> 00:55:39.360
that will kind of work through the different zipped folders.


00:55:39.360 --> 00:55:42.760
It will then use, I think Python has a library called zip file,


00:55:42.760 --> 00:55:46.240
so it will unzip the folder in memory,


00:55:46.560 --> 00:55:49.320
read in the CSVs, process them,


00:55:49.320 --> 00:55:52.120
and then it will eventually concatenate it all back


00:55:52.120 --> 00:55:57.120
into a cleaned data frame that I can work with


00:55:57.120 --> 00:55:59.280
going forward.


00:55:59.280 --> 00:56:05.400
And so then I'm trying to use those sets of tools


00:56:05.400 --> 00:56:08.180
to try and then turn this into a more compressed,


00:56:08.180 --> 00:56:14.480
cleaned data set that I can work with going forward.


00:56:15.160 --> 00:56:21.840
Does that fit in memory or do you have to only pull out slices sort of dynamically with the zip file processing?


00:56:21.840 --> 00:56:27.920
Yeah, so I can fit about a month in memory on my machine.


00:56:27.920 --> 00:56:34.560
We do have some large servers and so I will transition to processing this in parallel on the servers,


00:56:34.560 --> 00:56:37.880
which should get an even better speed up.


00:56:37.880 --> 00:56:42.080
But yeah, at the moment I really just kind of look at things on a monthly basis.


00:56:42.080 --> 00:56:49.600
And so what I can actually do is, and there's a ton of processing I have to do with this


00:56:49.600 --> 00:56:56.720
four-second interval data because what I can see is I'll break the data up then into five-minute


00:56:56.720 --> 00:57:02.240
intervals and what I can do is I can see what the generator was doing on a four-second basis


00:57:02.240 --> 00:57:07.680
and then I can see what its target was. So when they run their optimization, they will say,


00:57:07.680 --> 00:57:12.800
we know you're sitting at this point here, you have to ramp up to hit this target here at the


00:57:12.800 --> 00:57:18.480
end of this five-minute period. And so I can use this data to tell how well the generators are


00:57:18.480 --> 00:57:24.720
actually hitting their targets and how well they're following instructions. But the funny


00:57:24.720 --> 00:57:32.400
thing is, even though you think of four-second data as being such a short interval of time,


00:57:32.400 --> 00:57:39.600
But if you look at some of the big batteries in the grid, that data is actually too slow


00:57:39.600 --> 00:57:43.280
for some of the batteries, because batteries can actually turn on,


00:57:43.280 --> 00:57:47.920
inject power and turn off again, and I can miss it in the four second data. It's amazing.


00:57:47.920 --> 00:57:55.600
Some of these big grid scale batteries, like the big Tesla battery in South Australia at Hornsdale,


00:57:55.600 --> 00:57:59.840
they're amazing feats of engineering that you really appreciate when you


00:58:01.120 --> 00:58:03.120
you realize you're missing things that are four seconds away.


00:58:03.120 --> 00:58:05.800
- They break your sensors and things like that.


00:58:05.800 --> 00:58:07.360
Yeah, Australia is really well known


00:58:07.360 --> 00:58:09.200
for having some of these big batteries


00:58:09.200 --> 00:58:10.560
in the energy sector.


00:58:10.560 --> 00:58:12.320
I think for some reason,


00:58:12.320 --> 00:58:14.160
Tesla seemed to have partnered up with you guys


00:58:14.160 --> 00:58:16.840
to build these.


00:58:16.840 --> 00:58:18.080
- Yeah, and we've got,


00:58:18.080 --> 00:58:22.240
the plan is to roll out a whole bunch more


00:58:22.240 --> 00:58:26.160
of these batteries around the grid as well.


00:58:26.160 --> 00:58:28.000
And they're just really impressive.


00:58:28.000 --> 00:58:31.360
that you know how I mentioned the whole challenge


00:58:31.360 --> 00:58:35.320
of constantly balancing supply and demand.


00:58:35.320 --> 00:58:38.960
And really that's what batteries are so good at doing is


00:58:38.960 --> 00:58:39.800
if we suddenly have-


00:58:39.800 --> 00:58:41.560
- The response time is almost instant, yeah.


00:58:41.560 --> 00:58:44.680
So you could just, they could take it in,


00:58:44.680 --> 00:58:47.320
they could eat the energy or they could initially fill,


00:58:47.320 --> 00:58:49.200
like immediately fill the gap, right?


00:58:49.200 --> 00:58:50.040
For a while.


00:58:50.040 --> 00:58:50.880
- Exactly.


00:58:50.880 --> 00:58:52.000
And sometimes with some of this data,


00:58:52.000 --> 00:58:54.040
you can actually see the battery


00:58:54.040 --> 00:58:57.280
will receive an instruction, it will quickly turn on,


00:58:57.280 --> 00:58:58.800
it will discharge some power,


00:58:58.800 --> 00:59:00.640
and then a couple of seconds later,


00:59:00.640 --> 00:59:02.800
it will actually then,


00:59:02.800 --> 00:59:04.480
because there's too much power in the grid,


00:59:04.480 --> 00:59:07.000
the battery will actually then suck up some of that power


00:59:07.000 --> 00:59:09.760
and recharge into the opposite effect.


00:59:09.760 --> 00:59:11.240
It's just amazing.


00:59:11.240 --> 00:59:12.080
- Yeah, fantastic.


00:59:12.080 --> 00:59:13.320
I would love to dive into that,


00:59:13.320 --> 00:59:14.600
but let's stay on target,


00:59:14.600 --> 00:59:16.760
because I'm super fascinated with batteries


00:59:16.760 --> 00:59:18.440
and their potential.


00:59:18.440 --> 00:59:20.200
So with all of this data,


00:59:20.200 --> 00:59:24.280
you said that you had basically learned some good advice,


00:59:24.280 --> 00:59:26.400
like certain things you can just easily do


00:59:26.400 --> 00:59:33.040
pandas and numpy on small data sets, maybe not so much on large data sets like that. Give us some


00:59:33.040 --> 00:59:39.200
of the things that you found to be useful and some of the tips and tricks. Absolutely. So there's a


00:59:39.200 --> 00:59:44.160
concept called vectorization. I'm not sure if you've come across it, but it's effectively


00:59:44.160 --> 00:59:50.800
how can you apply an operation to a whole column. So you're not writing a manual loop or using


00:59:50.800 --> 00:59:56.960
using conditionals. For instance, if I try to multiply a column with millions of rows


00:59:56.960 --> 01:00:02.660
by a number, it's really, really fast because that's all kind of, you know, optimized C


01:00:02.660 --> 01:00:08.480
under the hood. And so, with a lot of this, when I'm working with smaller data sets, you


01:00:08.480 --> 01:00:15.440
can get away with doing some manual loops yourself or using pandas to group by a column.


01:00:15.440 --> 01:00:20.080
For instance, I would often say, "This is the identifier for a power station.


01:00:20.080 --> 01:00:27.000
I want you to group by this column identifier and then sum up."


01:00:27.000 --> 01:00:32.180
And even those things start to become too slow once your data's kind of at this scale.


01:00:32.180 --> 01:00:38.760
And so the real trick I find is, yeah, it's how do you find ways where you can apply some


01:00:38.760 --> 01:00:46.680
operation, a calculation to the whole column. But the tricky part with that starts to be what


01:00:46.680 --> 01:00:52.040
happens if you want to do conditional calculations. And so one of the things I find is


01:00:52.040 --> 01:00:59.240
sometimes I want to see how much the output of, on a four second basis, how much is the


01:00:59.240 --> 01:01:05.400
generation of a power station changing. And so you can imagine that Pandas has a calculation


01:01:06.360 --> 01:01:12.120
that lets you effectively calculate the difference between the previous value that came before


01:01:12.120 --> 01:01:19.400
really, really efficiently. But because I've got all these different generators and intervals


01:01:19.400 --> 01:01:30.120
kind of all in the same data frame, I don't want to consider the first value in a five minute


01:01:30.120 --> 01:01:37.240
interval because that's affected by a different time interval as well. So what you can do is


01:01:37.240 --> 01:01:49.480
NumPy has this great functionality called where or select where you can pretty much pass it


01:01:49.480 --> 01:01:57.400
a column that turns out to be true or false for the whole data set and it will then replace the


01:01:57.400 --> 01:02:01.240
the value with something else really efficiently.


01:02:01.240 --> 01:02:04.520
So what I can do is I can run my calculation


01:02:04.520 --> 01:02:08.040
for the whole column, and then I can use numpy where


01:02:08.040 --> 01:02:10.980
to replace the first value in each five minute interval


01:02:10.980 --> 01:02:12.520
with a missing value.


01:02:12.520 --> 01:02:16.600
And that pretty much does things in a few seconds


01:02:16.600 --> 01:02:19.760
that would have taken, I don't even know how long,


01:02:19.760 --> 01:02:21.520
with the other way, hours at least.


01:02:21.520 --> 01:02:23.640
- Wow. - It's amazing.


01:02:23.640 --> 01:02:28.520
- Yeah, I think that the whole computational space


01:02:28.520 --> 01:02:30.160
with pandas and with NumPys,


01:02:30.160 --> 01:02:31.980
there's, you know, like in Python,


01:02:31.980 --> 01:02:33.800
we speak about Pythonic code, right?


01:02:33.800 --> 01:02:35.600
You would use a foreign loop


01:02:35.600 --> 01:02:37.900
instead of trying to index into things and so on.


01:02:37.900 --> 01:02:41.080
And then there's a whole special flavor of that


01:02:41.080 --> 01:02:42.580
in the pandas world, right?


01:02:42.580 --> 01:02:45.920
And a lot of it almost has the guidance of


01:02:45.920 --> 01:02:49.460
if you're doing a for loop, you're doing it wrong, right?


01:02:49.460 --> 01:02:51.960
Like there should be some sort of vector operation


01:02:51.960 --> 01:02:54.600
or something passed into pandas


01:02:54.600 --> 01:02:56.560
or something along those lines, right?


01:02:56.560 --> 01:03:00.000
- Absolutely, I think, yeah,


01:03:00.000 --> 01:03:02.280
it's almost like its own kind of


01:03:02.280 --> 01:03:03.800
type of problem solving in a way,


01:03:03.800 --> 01:03:08.040
because it's like, how can I apply this calculation


01:03:08.040 --> 01:03:10.360
to everything in a column,


01:03:10.360 --> 01:03:14.720
but also in these cases, do something else?


01:03:14.720 --> 01:03:17.200
That's really the problem solving in a lot of ways.


01:03:17.200 --> 01:03:18.160
Yeah.


01:03:18.160 --> 01:03:20.160
- Yeah, it's a lot more set-based thinking,


01:03:20.160 --> 01:03:21.360
almost like databases.


01:03:21.360 --> 01:03:31.200
So what about things like threading or multi-processing or stuff like that?


01:03:31.200 --> 01:03:35.200
Have you tried to scale out some of the things that you're doing in that way?


01:03:35.200 --> 01:03:45.680
Yes, so we have a server that has about 60 cores and about 700 gig of RAM on it.


01:03:45.680 --> 01:03:49.200
So the plan is I can ship my things over there once this project is approved.


01:03:49.200 --> 01:03:49.920
60 cores?


01:03:50.560 --> 01:03:55.360
That's pretty awesome actually. Yeah, we've got a couple of them, which is very useful for the


01:03:55.360 --> 01:04:07.760
energy modeling that we do. And usually what I'm doing is kind of a mix of, yes, using Python's


01:04:07.760 --> 01:04:16.000
multi-processing library to try and just split. Usually what I'm doing is I'm just processing


01:04:17.040 --> 01:04:23.680
a whole heap of data frames in parallel and then concatenating them back into a single data frame


01:04:23.680 --> 01:04:30.880
once they're kind of processed. And that workflow seems to work pretty well for a lot of the


01:04:30.880 --> 01:04:38.320
requirements. Yeah, because you get each subset data frame bit to do its own computation in


01:04:38.320 --> 01:04:44.320
parallel, right? Yes, yeah, exactly. And so, and the other thing too that can also benefit is that


01:04:44.880 --> 01:04:49.600
Usually, as part of the cleaning process, I'm kind of subsetting the data as well.


01:04:49.600 --> 01:04:57.280
So while the data is starting off at an immense size as well, I'm figuring out which parts of it


01:04:57.280 --> 01:05:02.800
I need and cleaning it. And then so then the data frame I end up concatenating back together can be


01:05:02.800 --> 01:05:07.280
of a more manageable size as well. - Right, right, right. Interesting.


01:05:07.280 --> 01:05:13.280
Have you looked at Dask for any of this? - Yes, we've had. I did some work


01:05:14.640 --> 01:05:19.280
on the server with for a different project looking at it and I think Dask might be


01:05:19.280 --> 01:05:26.480
once I've kind of built up a more curated version of this four second interval


01:05:26.480 --> 01:05:33.360
data, I think Dask will probably be what I'll use on the server for working with the


01:05:33.360 --> 01:05:39.920
whole data set. Yeah it sounds like it might really be, I mean I haven't actually tried to apply


01:05:39.920 --> 01:05:44.800
to that much data that you got there, but it's sort of its functionality, it sounds like it


01:05:44.800 --> 01:05:50.720
really might be the thing to do, because it'll take basically your description of breaking into


01:05:50.720 --> 01:05:55.360
the many data frames, having them run, and then bringing it back together. That sounds to me like


01:05:55.360 --> 01:06:00.240
what Dask is built for, right? Yeah, and I think the brilliance as well, I think, of the Dask


01:06:00.240 --> 01:06:08.480
project is how they were able to kind of emulate the Pandas way of doing things as well,


01:06:08.480 --> 01:06:15.440
which is great because it's nice not to have to relearn too many things and be efficient


01:06:15.440 --> 01:06:23.520
from the beginning. Also, I should probably just flag as well that these data sets that I'm working


01:06:23.520 --> 01:06:28.800
with, the four second interval and then the actual database on the five minute basis,


01:06:28.800 --> 01:06:34.000
one of the things that got me so into the energy sector and that's I think unique in a way about


01:06:34.000 --> 01:06:35.520
about the Australian energy market,


01:06:35.520 --> 01:06:36.720
although I stand to be corrected,


01:06:36.720 --> 01:06:38.920
is that this is all public data.


01:06:38.920 --> 01:06:41.600
If you want, you can go and download all of this data


01:06:41.600 --> 01:06:43.360
from the market operator's website.


01:06:43.360 --> 01:06:48.740
Which is an amazing amount of openness


01:06:48.740 --> 01:06:50.480
to be able to go in and look at


01:06:50.480 --> 01:06:52.000
what these power stations are doing


01:06:52.000 --> 01:06:53.720
and what prices that we're getting


01:06:53.720 --> 01:06:55.220
on such a granular basis.


01:06:55.220 --> 01:06:58.480
As well, that's been really what's fascinating.


01:06:58.480 --> 01:06:59.920
- Yeah, that's super cool.


01:06:59.920 --> 01:07:03.560
People are out there trying to do research,


01:07:03.560 --> 01:07:05.340
working on a thesis or something like that,


01:07:05.340 --> 01:07:08.080
they could just grab this data and it's,


01:07:08.080 --> 01:07:09.760
like you said, it's real.


01:07:09.760 --> 01:07:13.000
And a lot of people have both physical machine reasons


01:07:13.000 --> 01:07:15.960
and financial reasons to keep it accurate, right?


01:07:15.960 --> 01:07:17.940
- Yes, yes, absolutely.


01:07:17.940 --> 01:07:20.480
Yeah, and I think, and really,


01:07:20.480 --> 01:07:22.320
I guess I come back to that original point


01:07:22.320 --> 01:07:24.460
where the limitation for this data


01:07:24.460 --> 01:07:27.560
isn't how clean it is or the amount of data,


01:07:27.560 --> 01:07:30.320
it's just understanding the processes well enough


01:07:30.320 --> 01:07:32.760
to know what you can do with it.


01:07:32.760 --> 01:07:34.440
- Right, a little bit like that example you had


01:07:34.440 --> 01:07:39.440
about the solar farms versus coal generation, right?


01:07:39.440 --> 01:07:42.160
- Exactly, exactly, yeah.


01:07:42.160 --> 01:07:43.480
- Know that I mean different things.


01:07:43.480 --> 01:07:45.160
Yeah, yeah, very cool.


01:07:45.160 --> 01:07:48.200
All right, other advice or interesting things going on


01:07:48.200 --> 01:07:49.740
before we, we're getting short on time,


01:07:49.740 --> 01:07:51.800
but anything else you wanna throw out there


01:07:51.800 --> 01:07:53.440
about working with all this data?


01:07:53.440 --> 01:07:59.320
- I think, I'm trying to think.


01:07:59.320 --> 01:08:01.440
One of the areas I'm quite interested in at the moment


01:08:01.440 --> 01:08:06.440
is Python's number library, N-U-M-B-A.


01:08:06.440 --> 01:08:09.540
I think it uses the,


01:08:09.540 --> 01:08:13.140
able to kind of compile a Python code under the hood


01:08:13.140 --> 01:08:13.980
to get really high performance,


01:08:13.980 --> 01:08:17.180
and it can be perfect for my use.


01:08:17.180 --> 01:08:20.780
And the thing I, the reason I'm rather interested in it


01:08:20.780 --> 01:08:24.860
is that if I can vectorize a calculation,


01:08:24.860 --> 01:08:27.060
you know how I'm applying it to the whole column.


01:08:27.060 --> 01:08:30.620
But for instance, if I'm trying to do some calculation


01:08:30.620 --> 01:08:33.140
where I want to loop through it


01:08:33.140 --> 01:08:36.420
because my current calculation depends on the state


01:08:36.420 --> 01:08:38.180
of a previous calculation,


01:08:38.180 --> 01:08:39.820
then that can be a limitation


01:08:39.820 --> 01:08:43.580
of this kind of vectorization approach.


01:08:43.580 --> 01:08:44.420
- Right, right.


01:08:44.420 --> 01:08:47.220
You can't just apply it to the set and go,


01:08:47.220 --> 01:08:49.900
hey, every row here,


01:08:49.900 --> 01:08:54.580
just look back at yourself a little bit in that place


01:08:54.580 --> 01:08:55.820
and then do the thing.


01:08:55.820 --> 01:08:59.580
It's got some dependencies on what happened before, right?


01:08:59.580 --> 01:09:02.780
I mean, that, I have no idea how you would fix that straight.


01:09:02.780 --> 01:09:05.180
Maybe it's possible, but it's very tricky, right?


01:09:05.180 --> 01:09:07.100
And so number does that, okay?


01:09:07.100 --> 01:09:12.100
- Yeah, so number is effectively a way to write Python loops


01:09:12.100 --> 01:09:14.780
that run as fast as C, but within,


01:09:14.780 --> 01:09:16.380
for numeric calculations.


01:09:16.380 --> 01:09:18.900
So this is why I'm very interested in this


01:09:18.900 --> 01:09:22.460
for some of the areas that are a little bit trickier


01:09:22.460 --> 01:09:26.500
for me to vectorize using data frames.


01:09:26.500 --> 01:09:30.340
I'm very interested in the Numba library as a solution


01:09:30.340 --> 01:09:32.060
for some of those challenges.


01:09:32.060 --> 01:09:34.820
- Yeah, so Numba makes Python code fast, it says.


01:09:34.820 --> 01:09:37.020
It's an open source JIT compiler


01:09:37.020 --> 01:09:40.260
that translates a subset of Python and NumPy code


01:09:40.260 --> 01:09:41.340
into fast machine code.


01:09:41.340 --> 01:09:43.660
So I haven't used it,


01:09:43.660 --> 01:09:47.100
but it sounds like it really knows about NumPy


01:09:47.100 --> 01:09:47.920
in addition, right?


01:09:47.920 --> 01:09:48.780
'Cause you could use Cython,


01:09:48.780 --> 01:09:50.460
but Cython doesn't necessarily know anything


01:09:50.460 --> 01:09:52.540
about NumPy, for example, right?


01:09:52.540 --> 01:09:54.860
- Yes, yeah, you're exactly right.


01:09:54.860 --> 01:10:00.940
In a way, NumPy has kind of replaced what I would have used Python for in the past,


01:10:00.940 --> 01:10:08.860
but for my application. But what I could do, say for instance, if I have a NumPy array and I want to loop through it,


01:10:08.860 --> 01:10:14.620
and there's some calculation I want to do and then my next calculation depends on that previous calculation going forward,


01:10:14.620 --> 01:10:17.700
this lets me do that.


01:10:20.220 --> 01:10:23.300
And yeah, in a way, and I'm writing Python code.


01:10:23.300 --> 01:10:25.300
I don't have to write C or C++.


01:10:25.300 --> 01:10:27.340
You can see it, you're literally adding decorators,


01:10:27.340 --> 01:10:32.100
just like, you know, how Flask has that lovely


01:10:32.100 --> 01:10:34.040
kind of decorator syntax.


01:10:34.040 --> 01:10:35.700
It's almost like that to an extent.


01:10:35.700 --> 01:10:36.540
- Yeah, exactly.


01:10:36.540 --> 01:10:40.300
You say @number.jit, and then,


01:10:40.300 --> 01:10:42.020
do you want this to run in parallel or not?


01:10:42.020 --> 01:10:43.700
Yeah, sure, why not?


01:10:43.700 --> 01:10:46.000
- Exactly, and also, it even has,


01:10:46.000 --> 01:10:48.580
lets you run your calculations in parallel as well.


01:10:48.580 --> 01:10:50.340
you can see that little parallelism true.


01:10:50.340 --> 01:10:53.820
And it's actually true parallelism without the gill


01:10:53.820 --> 01:10:55.500
as well, which is amazing.


01:10:55.500 --> 01:10:58.740
- Yeah, this is super interesting.


01:10:58.740 --> 01:11:02.300
I knew that it was a compiler along the lines of Cython,


01:11:02.300 --> 01:11:04.380
but I didn't realize that it had this special integration


01:11:04.380 --> 01:11:06.100
with NumPy, that's very neat.


01:11:06.100 --> 01:11:10.980
- Yeah, I really recommend, like I think for most people,


01:11:10.980 --> 01:11:14.980
pandas is probably what you need,


01:11:14.980 --> 01:11:17.660
but if you're running into these kinds of, yeah,


01:11:17.660 --> 01:11:22.340
these types of problems, then I think number


01:11:22.340 --> 01:11:25.940
would be a solution before you would have to look to it,


01:11:25.940 --> 01:11:28.540
necessarily have to look to a different programming language.


01:11:28.540 --> 01:11:29.540
- Yeah, absolutely.


01:11:29.540 --> 01:11:31.100
And like, this is how I started off


01:11:31.100 --> 01:11:33.260
our conversation together.


01:11:33.260 --> 01:11:36.820
The performance side of Python is super interesting


01:11:36.820 --> 01:11:38.580
because it's like, oh, it's not really fast enough


01:11:38.580 --> 01:11:39.780
until you apply this decorator,


01:11:39.780 --> 01:11:41.900
then all of a sudden it's just as fast and it's amazing.


01:11:41.900 --> 01:11:44.820
I literally just, all these little edge cases


01:11:44.820 --> 01:11:45.780
that are super neat.


01:11:46.740 --> 01:11:56.500
I look back to some of the code I wrote during my PhD and I cringe at some of the bad performance practices I probably had for working with them.


01:11:56.500 --> 01:12:02.580
And I think this comes back to your point about having people in the team who are a bit more experienced in this area,


01:12:02.580 --> 01:12:09.060
because if you can have people who understand this and point team members to these tools for optimizing their code,


01:12:09.060 --> 01:12:15.460
then I think that can deal with a lot of the issues for people who may not be as experienced with writing Python themselves.


01:12:15.460 --> 01:12:17.540
- Yeah, that's super advice.


01:12:17.540 --> 01:12:21.560
And then if you've got data that maybe


01:12:21.560 --> 01:12:22.940
is like the other side of your story,


01:12:22.940 --> 01:12:24.780
it's like too big to fit in RAM


01:12:24.780 --> 01:12:28.940
or you want more sort of automatic rather,


01:12:28.940 --> 01:12:32.220
parallelism across say a large data frame,


01:12:32.220 --> 01:12:34.900
then Dask is definitely a good thing to look at.


01:12:34.900 --> 01:12:35.740
- Absolutely.


01:12:35.740 --> 01:12:38.820
- All right, Jack, this has been super interesting.


01:12:38.820 --> 01:12:40.660
I think we're getting a little long on time.


01:12:40.660 --> 01:12:42.540
I don't wanna take up your entire day.


01:12:42.540 --> 01:12:46.380
So I will have to call it a show on that bit.


01:12:46.380 --> 01:12:48.300
But before we get out of here,


01:12:48.300 --> 01:12:49.420
of course you have to answer


01:12:49.420 --> 01:12:51.660
the two final questions as always.


01:12:51.660 --> 01:12:54.620
So if you're gonna write some code,


01:12:54.620 --> 01:12:56.340
work on some of these projects,


01:12:56.340 --> 01:12:58.500
what editor do you use?


01:12:58.500 --> 01:13:02.380
- VS Code, especially since they added Jupyter Notebooks


01:13:02.380 --> 01:13:05.800
into the editor as well.


01:13:05.800 --> 01:13:07.820
- Yeah, it's really interesting to see


01:13:07.820 --> 01:13:10.260
both what VS Code and PyCharm are doing


01:13:10.260 --> 01:13:14.320
to try to bring either just bring notebooks into the space


01:13:14.320 --> 01:13:19.220
or try to come up with a more native alternative, right?


01:13:19.220 --> 01:13:21.220
Like, well, here's a cell and it's separated


01:13:21.220 --> 01:13:23.240
by like this special comment,


01:13:23.240 --> 01:13:25.580
but you can still run it in notebook style,


01:13:25.580 --> 01:13:28.100
but it's like, feels like a text file you're working with.


01:13:28.100 --> 01:13:30.980
And yeah, it's an exciting time for that stuff.


01:13:30.980 --> 01:13:32.320
- Absolutely.


01:13:32.320 --> 01:13:33.360
- Yeah.


01:13:33.360 --> 01:13:35.180
And then you've already given a shout out


01:13:35.180 --> 01:13:37.180
to a couple of different projects,


01:13:37.180 --> 01:13:39.660
but any notable PyPI packages?


01:13:39.660 --> 01:13:46.420
to tell people about? Yeah, I mean, I guess numbers the one I'm fascinated with in terms


01:13:46.420 --> 01:13:55.060
of learning more about at the moment, but I think in terms of getting things done, just


01:13:55.060 --> 01:14:03.300
pandas and geopandas and the kind of scientific stack, it's just, it's amazing what people,


01:14:03.300 --> 01:14:07.500
the code that people have done that makes me so effective just by being able to use


01:14:07.500 --> 01:14:13.980
their libraries. It's phenomenal. It's phenomenal. Yeah. Are you a Jupyter or a JupyterLab person


01:14:13.980 --> 01:14:21.180
or something else? I used mainly Jupyter, mainly because at least at the time when I tried out


01:14:21.180 --> 01:14:26.380
JupyterLab, I couldn't collapse some of the outputs from cells as well. They may have fixed that,


01:14:26.380 --> 01:14:32.940
but I'll take a peek at JupyterLab every couple of months or so and see what's new.


01:14:33.500 --> 01:14:39.740
All right. Fantastic. All right. Well, Final Call Action, people are interested in maybe they work


01:14:39.740 --> 01:14:45.020
in energy somewhere else in the world, or they're trying to do research with it. You know, what do


01:14:45.020 --> 01:14:51.740
you tell them? Yeah, like, if you're interested in getting in touch with me, we run some, we run a


01:14:51.740 --> 01:14:56.940
few meetups for energy modelers in Sydney. So if you're ever interested in getting in touch to chat


01:14:56.940 --> 01:15:02.940
about some of the data in Australia, or some of the work we're doing, feel free. Is that, is that


01:15:02.940 --> 01:15:08.140
zoomable these days or is it impossible? The plan is for the meetup to be


01:15:08.140 --> 01:15:17.740
stuff as a zoom one. So that's the plan. All right, fantastic. Well, Jack, it's been great


01:15:17.740 --> 01:15:21.740
to have you here. Thanks so much for sharing what you're up to. Thanks so much, Michael. It was


01:15:21.740 --> 01:15:27.980
great meeting you and thanks for having me. Keep the lights on down under. Thank you, I will. Bye.


01:15:27.980 --> 01:15:30.060
Bye. Have a good night.


01:15:30.060 --> 01:15:40.060
[BLANK_AUDIO]

