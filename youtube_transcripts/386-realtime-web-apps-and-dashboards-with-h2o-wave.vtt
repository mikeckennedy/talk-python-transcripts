WEBVTT

00:00:00.000 --> 00:00:01.000
Hey, YouTube.


00:00:01.000 --> 00:00:02.000
Hey, Martin.


00:00:02.000 --> 00:00:03.000
>> Hey, Michael.


00:00:03.000 --> 00:00:11.000
>> Excellent to have you here on the stream and very shortly on Talk Python.


00:00:11.000 --> 00:00:13.920
Everyone out there watching the live stream, thanks for being here.


00:00:13.920 --> 00:00:17.560
If you've got thoughts and ideas and comments, please put them into the live chat.


00:00:17.560 --> 00:00:19.920
We'll make them part of the show if we can.


00:00:19.920 --> 00:00:21.440
Makes sense?


00:00:21.440 --> 00:00:23.360
And for those of you watching later, thanks for watching later.


00:00:23.360 --> 00:00:26.600
We don't have time travel, so no help with the comments, but thanks anyway.


00:00:26.600 --> 00:00:29.000
All right, Martin, ready to kick this off?


00:00:29.000 --> 00:00:30.000
- Yeah, definitely.


00:00:30.000 --> 00:00:35.300
- Martin, welcome to Talk Python To Me.


00:00:35.300 --> 00:00:39.520
- Thanks Michael, thanks for having me.


00:00:39.520 --> 00:00:41.540
- Oh, it's really great to have you here.


00:00:41.540 --> 00:00:45.580
I'm super excited to learn about H2O Wave.


00:00:45.580 --> 00:00:47.460
It looks like a really cool project.


00:00:47.460 --> 00:00:52.460
That's one of these enabling, empowering projects


00:00:52.460 --> 00:00:54.680
for people who don't feel like,


00:00:54.680 --> 00:00:56.020
oh, I could take my,


00:00:57.000 --> 00:00:59.720
whatever I'm building my ML model or whatever,


00:00:59.720 --> 00:01:03.760
or my data analysis and turn it into a website or an app


00:01:03.760 --> 00:01:04.880
or any of those sorts of things.


00:01:04.880 --> 00:01:09.320
And they'll see that they can with Wave, right?


00:01:09.320 --> 00:01:11.200
- Yeah, that's right.


00:01:11.200 --> 00:01:13.520
- Yeah, should be tons of fun.


00:01:13.520 --> 00:01:16.640
I think it's gonna be a relevant topic for a lot of people.


00:01:16.640 --> 00:01:18.000
Before we get to any of it though,


00:01:18.000 --> 00:01:20.120
tell me about your background.


00:01:20.120 --> 00:01:22.600
How'd you get into programming in Python?


00:01:22.600 --> 00:01:31.240
So I would say I got just like most people do, I went to college,


00:01:31.240 --> 00:01:35.400
studied programming, computer science,


00:01:35.400 --> 00:01:41.160
and then I started working originally as a Java developer actually,


00:01:41.160 --> 00:01:46.840
then switched to web developer because there was a lack of front-end engineers.


00:01:47.760 --> 00:01:52.760
And once I joined H2O, I mostly work on front end


00:01:52.760 --> 00:01:56.920
here as well, but I somehow got in charge


00:01:56.920 --> 00:01:59.100
of this Python framework.


00:01:59.100 --> 00:02:01.880
So I need to write a lot of Python


00:02:01.880 --> 00:02:04.200
on day-to-day basis as well.


00:02:04.200 --> 00:02:05.380
- Yeah, that's cool.


00:02:05.380 --> 00:02:10.380
I think one of the big ironies of these like


00:02:10.380 --> 00:02:13.740
data science tools and these nice Python visualization tools


00:02:13.740 --> 00:02:16.700
is they're there to let people write Python


00:02:16.700 --> 00:02:19.780
so they don't have to write a ton of front-end code


00:02:19.780 --> 00:02:21.580
or those kinds of things,


00:02:21.580 --> 00:02:23.280
or write their own web frameworks,


00:02:23.280 --> 00:02:25.220
or use Vue or React.


00:02:25.220 --> 00:02:28.740
And yet people like you who actually make them,


00:02:28.740 --> 00:02:29.900
you spend so much time


00:02:29.900 --> 00:02:31.940
in the JavaScript side of things, right?


00:02:31.940 --> 00:02:33.980
I mean, same thing for Jupyter.


00:02:33.980 --> 00:02:37.180
You know, it's, someone's got to do it


00:02:37.180 --> 00:02:40.140
and you're kind of doing it for everyone else who uses it


00:02:40.140 --> 00:02:42.340
and gets to avoid it, right?


00:02:42.340 --> 00:02:43.940
- Yeah, that's right.


00:02:43.940 --> 00:02:46.800
I mean, if you have a look at it,


00:02:46.800 --> 00:02:51.800
then front-end engineering is quite complex topic these days


00:02:51.800 --> 00:02:56.440
compared to what it has been, let's say 10 years ago.


00:02:56.440 --> 00:02:57.560
So-- - You mean it's more


00:02:57.560 --> 00:03:01.940
than just linking to jQuery on a CDN?


00:03:01.940 --> 00:03:03.840
- Definitely. (laughs)


00:03:03.840 --> 00:03:07.240
- It used to be so straightforward and it really is.


00:03:07.240 --> 00:03:08.400
If you don't do a day-to-day,


00:03:08.400 --> 00:03:09.640
it's like, how do I even get started


00:03:09.640 --> 00:03:11.080
to get this app up and going?


00:03:11.080 --> 00:03:12.200
It's crazy.


00:03:12.200 --> 00:03:14.580
- Yeah, exactly, and that's why we are here today,


00:03:14.580 --> 00:03:18.580
to talk about how to make everyone's life easier.


00:03:18.580 --> 00:03:19.900
- That's right, well, everyone but yours.


00:03:19.900 --> 00:03:22.100
You take the pain for the rest of us.


00:03:22.100 --> 00:03:26.300
- Yeah, but I kind of enjoy it, so that's not the problem.


00:03:26.300 --> 00:03:29.740
- Yeah, of course, if you love it, then it's all good.


00:03:29.740 --> 00:03:33.500
Before we get into Wave, you said you did,


00:03:33.500 --> 00:03:34.940
you switched over to front-end stuff.


00:03:34.940 --> 00:03:37.980
What are your front-end technology favorites,


00:03:37.980 --> 00:03:39.780
like front-end frameworks and stuff?


00:03:40.740 --> 00:03:43.340
To be honest, I don't like frameworks at all.


00:03:43.340 --> 00:03:46.780
I like web as a platform


00:03:46.780 --> 00:03:51.780
because it also has become very powerful.


00:03:51.780 --> 00:03:55.900
We have a lot of stuff that we didn't have before.


00:03:55.900 --> 00:04:00.900
But you know, if you want to build something enterprising


00:04:00.900 --> 00:04:05.980
or something that needs longer maintenance


00:04:05.980 --> 00:04:08.380
then you need to reach out for frameworks.


00:04:08.380 --> 00:04:11.320
So currently I work on in React,


00:04:11.320 --> 00:04:14.120
which is I would say industry standard,


00:04:14.120 --> 00:04:16.800
but also have experience with Vue or Angular.


00:04:16.800 --> 00:04:21.800
So at the end of the day, it's just a tool in our toolbox.


00:04:21.800 --> 00:04:23.920
- Pick one and go with it.


00:04:23.920 --> 00:04:25.640
And other friend in question,


00:04:25.640 --> 00:04:28.120
straight JavaScript or TypeScript?


00:04:28.120 --> 00:04:30.040
- Definitely TypeScript all the way.


00:04:30.040 --> 00:04:31.080
- Yeah?


00:04:31.080 --> 00:04:32.200
- Yeah.


00:04:32.200 --> 00:04:36.500
I mean, once you try TypeScript, then there's no way back.


00:04:36.500 --> 00:04:37.840
- Okay.


00:04:37.840 --> 00:04:39.500
I've done a little bit of TypeScript,


00:04:39.500 --> 00:04:41.980
but not enough to really pick it up, I don't think.


00:04:41.980 --> 00:04:45.460
My JavaScript front end experience is pretty limited.


00:04:45.460 --> 00:04:48.220
I try to stick with the Python side of things,


00:04:48.220 --> 00:04:51.460
the server side type of things as much as possible.


00:04:51.460 --> 00:04:54.360
Speaking of which, sticking with Python,


00:04:54.360 --> 00:05:00.820
I guess maybe could get to the other question


00:05:00.820 --> 00:05:01.940
of what do you do day to day,


00:05:01.940 --> 00:05:04.540
kind of edge our way into this project.


00:05:04.540 --> 00:05:05.820
Did they work on this?


00:05:05.820 --> 00:05:09.460
- H2O, right?


00:05:09.460 --> 00:05:10.540
- Exactly.


00:05:10.540 --> 00:05:14.420
So basically I work on H2O Wave,


00:05:14.420 --> 00:05:18.300
which is a framework for not only data scientists


00:05:18.300 --> 00:05:20.980
and people making AI models


00:05:20.980 --> 00:05:23.500
to make their life easier, as you have already said,


00:05:23.500 --> 00:05:27.660
and to allow them to build web applications


00:05:27.660 --> 00:05:31.300
without regular web knowledge,


00:05:31.300 --> 00:05:33.380
like HTML, CSS, and JavaScript.


00:05:34.300 --> 00:05:42.660
And my day-to-day consists of basically helping people out community-wise, answering questions,


00:05:42.660 --> 00:05:45.800
getting new feature requests in.


00:05:45.800 --> 00:05:55.220
Then I have also two people, two developers that I help with bringing their issues up,


00:05:55.220 --> 00:05:56.700
unblocking them.


00:05:56.700 --> 00:06:02.140
And I also need to code some bigger features.


00:06:02.140 --> 00:06:06.580
And basically speaking on podcasts, if I have time.


00:06:06.580 --> 00:06:08.260
(laughing)


00:06:08.260 --> 00:06:10.580
- Yeah, it sounds a little bit like a blend


00:06:10.580 --> 00:06:13.780
between sort of a program manager,


00:06:13.780 --> 00:06:15.620
software developer on one half


00:06:15.620 --> 00:06:19.200
and then dev evangelist almost on the other.


00:06:19.200 --> 00:06:23.100
- Yeah, in country where I come from,


00:06:23.100 --> 00:06:25.260
we call it a girl for everything.


00:06:25.260 --> 00:06:30.140
So basically you need to jump on a lot of heads.


00:06:30.140 --> 00:06:31.600
- Yeah, perfect.


00:06:31.600 --> 00:06:38.360
All right, well, give us the quick elevator pitch of H2O Wave.


00:06:38.360 --> 00:06:46.360
It's for people, the headline, I guess, the H1 of your website, if you will, is make AI


00:06:46.360 --> 00:06:47.360
apps.


00:06:47.360 --> 00:06:49.800
Yeah, that's right.


00:06:49.800 --> 00:06:56.800
So basically, as I've already said, H2O Wave is a framework that allows you to build web


00:06:56.800 --> 00:07:00.160
applications and dashboards with nothing but Python.


00:07:00.160 --> 00:07:03.600
No CSS, no HTML, no JavaScript required.


00:07:03.600 --> 00:07:09.040
However, if you wish to sprinkle a little bit of JavaScript or CSS, then


00:07:09.040 --> 00:07:16.320
you definitely can, it's not a problem. And basically we try to build


00:07:16.320 --> 00:07:22.560
a rich library of widgets or components that are ready to use and that


00:07:22.560 --> 00:07:26.400
should cover a wide range of scenarios


00:07:26.400 --> 00:07:29.520
that people might encounter.


00:07:29.520 --> 00:07:31.960
So at the end of the day,


00:07:31.960 --> 00:07:35.960
you end up with a very little bit of Python code


00:07:35.960 --> 00:07:39.000
that does very much, basically.


00:07:39.000 --> 00:07:42.120
- Yeah, let's set the stage a little,


00:07:42.120 --> 00:07:46.960
maybe thinking about what options do people have today?


00:07:46.960 --> 00:07:49.880
They've got an ML model that makes predictions,


00:07:49.880 --> 00:07:53.800
or maybe they've got something that will slice and dice


00:07:53.800 --> 00:07:55.420
the data and turn it into a graph,


00:07:55.420 --> 00:07:59.260
but you wanna let them maybe pick the country


00:07:59.260 --> 00:08:01.180
by which you pull the data from,


00:08:01.180 --> 00:08:04.280
or the time range, or some other aspect,


00:08:04.280 --> 00:08:06.120
and make it a little bit interactive,


00:08:06.120 --> 00:08:08.880
or even not, if you don't have that option,


00:08:08.880 --> 00:08:10.600
just make it static, I guess.


00:08:10.600 --> 00:08:13.540
What are the different things people are doing now


00:08:13.540 --> 00:08:15.240
that might relate to this?


00:08:15.240 --> 00:08:17.020
- Yeah, that's a great question.


00:08:17.020 --> 00:08:26.060
So the simplest thing that people can do is the regular tool of their interest is


00:08:26.060 --> 00:08:30.540
Jupyter Notebook, which is very user friendly.


00:08:30.540 --> 00:08:33.100
You have just a single prompt


00:08:33.100 --> 00:08:39.860
which you type into and that behaves as a REPL.


00:08:39.860 --> 00:08:41.700
And


00:08:42.500 --> 00:08:47.500
Basically, what they get in response


00:08:47.500 --> 00:08:52.860
are just static images of graphs or whatever.


00:08:52.860 --> 00:08:56.860
And these then can be then copy pasted as screenshots


00:08:56.860 --> 00:08:59.580
to either PowerPoint presentations or whatnot.


00:08:59.580 --> 00:09:03.460
However, this approach is, as you have said,


00:09:03.460 --> 00:09:08.460
somewhat static and can be not so engaging, let's say.


00:09:11.620 --> 00:09:16.380
So that's where web applications come into play,


00:09:16.380 --> 00:09:19.100
which can sprinkle a little bit of interactivity.


00:09:19.100 --> 00:09:21.860
So let's say you have a sidebar


00:09:21.860 --> 00:09:26.860
that has various controls like filters


00:09:26.860 --> 00:09:31.860
or maybe some sliders that adjust model values.


00:09:31.860 --> 00:09:33.020
And on the right side,


00:09:33.020 --> 00:09:38.020
you get your visualization interactively in real time.


00:09:38.200 --> 00:09:43.200
So this is something that has more storytelling power,


00:09:43.200 --> 00:09:44.840
let's say.


00:09:44.840 --> 00:09:50.720
H2O Wave was initially built with this in mind as well.


00:09:50.720 --> 00:09:54.080
- Right, and Jupyter is fantastic.


00:09:54.080 --> 00:09:56.440
I mean, so many people work in Jupyter


00:09:56.440 --> 00:09:58.840
and do amazing things,


00:09:58.840 --> 00:10:03.840
but it's not necessarily what you deliver to an end user.


00:10:03.840 --> 00:10:07.760
If the CEO of your company says,


00:10:07.760 --> 00:10:12.740
Hey, I want to, I want you to give me a dashboard that helps me understand,


00:10:12.740 --> 00:10:15.940
say sales and costs this month.


00:10:15.940 --> 00:10:20.260
You probably aren't going to just point them at your Jupyter notebook on GitHub.


00:10:20.260 --> 00:10:25.740
You probably still are not even going to point them at a version


00:10:25.740 --> 00:10:28.620
running on your server, right?


00:10:28.620 --> 00:10:33.220
What if they want that updated every minute, you know, with like


00:10:33.740 --> 00:10:39.940
Highlights are important stuff and they want to access it on their phone in a way that is like, you know


00:10:39.940 --> 00:10:42.340
You have more control over how it lays out


00:10:42.340 --> 00:10:47.580
You know, it's just Jupyter is great, but it's not an end-user


00:10:47.580 --> 00:10:55.940
Technology, it's it's an enabling technology, right? It's like saying well, I'm gonna give power pi charm to a user to run my app


00:10:55.940 --> 00:10:57.860
It's like well, no, no, no


00:10:57.860 --> 00:10:58.660
It's cool


00:10:58.660 --> 00:10:59.820
If you could run your code


00:10:59.820 --> 00:11:02.540
but that's not the tool that you give them to do it with, right?


00:11:02.540 --> 00:11:05.340
You package it up into a .app or whatever you're after.


00:11:05.340 --> 00:11:07.340
Yeah, exactly.


00:11:07.340 --> 00:11:09.580
That's kind of the gap you're trying to close, right?


00:11:09.580 --> 00:11:12.220
That's right.


00:11:12.220 --> 00:11:14.860
Well, cool.


00:11:14.860 --> 00:11:19.820
Okay, now when I hear that, I think of a couple of other projects.


00:11:19.820 --> 00:11:25.260
Streamlit, I interviewed Adrian back, I think it was 2019, who founded Streamlit.


00:11:26.380 --> 00:11:34.220
And Streamlit is about building these really simple dashboards,


00:11:34.220 --> 00:11:40.780
sort of interactive places where, say, on the left,


00:11:40.780 --> 00:11:43.820
you've got a few things you can change.


00:11:43.820 --> 00:11:46.260
And on the right, you might have some kind of graph,


00:11:46.260 --> 00:11:49.540
or you might get a 404 if you're clicking through the gallery


00:11:49.540 --> 00:11:50.820
right now.


00:11:50.820 --> 00:11:54.540
But this is in that realm.


00:11:54.540 --> 00:11:59.540
And then also PlotlyDash as well.


00:11:59.540 --> 00:12:03.540
Give us a sense of how those compare.


00:12:03.540 --> 00:12:05.540
Because there's probably people listening who are like,


00:12:05.540 --> 00:12:07.540
"Well, yeah, I'm really interested in this, but I've already


00:12:07.540 --> 00:12:11.540
considered working with Streamlit. Should I choose H2O Wave?


00:12:11.540 --> 00:12:14.540
Or should I stick with Streamlit or whatever?"


00:12:14.540 --> 00:12:17.540
Yeah, definitely. So basically, one of the main reasons


00:12:17.540 --> 00:12:21.540
that Wave was built, because it's very similar to


00:12:21.540 --> 00:12:31.460
project that you mentioned is that we were not very satisfied with either of performance


00:12:31.460 --> 00:12:41.320
and this the second reason was that for example Streamlit apps used to be very resource heavy


00:12:41.320 --> 00:12:46.460
that means a lot of money in production costs.


00:12:46.460 --> 00:12:57.460
So the reason was that Streamlit used to run a separate process for every single browser tab,


00:12:57.460 --> 00:13:00.460
which of course demanded a lot of memory.


00:13:00.460 --> 00:13:06.460
However, I've checked before this podcast to be 100% sure,


00:13:06.460 --> 00:13:12.460
and it seems like they migrated to a single-threaded async.io approach since then,


00:13:12.460 --> 00:13:18.540
which is the same approach that let's say Dash or H2O Wave also follow.


00:13:18.540 --> 00:13:21.420
So this is not a differentiator anymore.


00:13:21.420 --> 00:13:31.180
The biggest differentiator is that H2O Wave has the most features, let's say,


00:13:31.180 --> 00:13:35.820
most widgets for you to use.


00:13:35.820 --> 00:13:42.220
And we also haven't seen any, let's say, regular web application


00:13:42.220 --> 00:13:49.820
beyond these filters and sliders that change your model outputs.


00:13:49.820 --> 00:13:56.820
But with H2O Wave, we've seen like web applications that you would guess


00:13:56.820 --> 00:14:01.820
maybe only software engineers could build, not the data scientists.


00:14:01.820 --> 00:14:05.820
- Right, so for example with Streamlit,


00:14:05.820 --> 00:14:08.620
what I often get, like here I pulled up an example


00:14:08.620 --> 00:14:12.000
that they have, some real-time texting,


00:14:12.000 --> 00:14:14.260
and what you get is kind of this interactive,


00:14:14.260 --> 00:14:17.760
this one doesn't even have a sidebar,


00:14:17.760 --> 00:14:19.300
it's pretty nice, so you can,


00:14:19.300 --> 00:14:20.840
I got a little dropdown and a button


00:14:20.840 --> 00:14:22.600
to start working with it,


00:14:22.600 --> 00:14:26.680
but you don't have like a footer and a nav bar


00:14:26.680 --> 00:14:29.320
and multiple things on there with responsive layout,


00:14:29.320 --> 00:14:31.320
and you know, like a lot of the stuff you would expect,


00:14:31.320 --> 00:14:37.320
expect, right? It's still pretty close to what you might see on a notebook.


00:14:37.320 --> 00:14:39.960
As nice as it is, I do really like Streamliner.


00:14:39.960 --> 00:14:46.520
Yeah, exactly. We call this concept toy apps, let's say.


00:14:46.520 --> 00:14:53.400
These are more like POCs and the stuff that we have talked a while ago.


00:14:53.400 --> 00:15:01.160
Wave is originally built with this in mind, but then somehow grew


00:15:01.160 --> 00:15:05.280
much larger that we can talk about it in a minute.


00:15:05.280 --> 00:15:11.820
- Yeah, it definitely seems like it's grown a bit more.


00:15:11.820 --> 00:15:14.380
I haven't checked up on Streamlit enough


00:15:14.380 --> 00:15:15.980
to be able to follow along


00:15:15.980 --> 00:15:20.420
with exactly how many widgets they have and so on, but yeah.


00:15:20.420 --> 00:15:23.020
- And also-


00:15:23.020 --> 00:15:26.140
- Maybe compared to Plotly Dash as well.


00:15:27.620 --> 00:15:32.100
Yes, so I'm not very experienced with Plotly,


00:15:32.100 --> 00:15:35.820
but I assume it's the same story there.


00:15:35.820 --> 00:15:40.140
So they have a few form widgets,


00:15:40.140 --> 00:15:43.500
like text boxes, sliders, drop downs, et cetera,


00:15:43.500 --> 00:15:47.080
that let you control the visualizations.


00:15:47.080 --> 00:15:52.280
But also if you have a look,


00:15:52.280 --> 00:15:54.560
these visualizations that you present,


00:15:54.560 --> 00:15:57.300
and these are like 3D models for our listeners


00:15:57.300 --> 00:15:59.620
who can see our screen,


00:15:59.620 --> 00:16:04.480
are most likely just some third-party JavaScript library,


00:16:04.480 --> 00:16:06.660
which means that it's not necessarily


00:16:06.660 --> 00:16:08.900
a part of Blockly Dash.


00:16:08.900 --> 00:16:13.080
So no Python API.


00:16:13.080 --> 00:16:15.920
- Right, okay.


00:16:15.920 --> 00:16:21.400
So if we look over here at H2O Wave,


00:16:21.400 --> 00:16:26.740
you know, the headline is "Make AI Apps,"


00:16:26.740 --> 00:16:31.380
but it sounds to me like a broad range of apps


00:16:31.380 --> 00:16:32.960
could really land here.


00:16:32.960 --> 00:16:37.060
If you're interested in almost any kind of reporting,


00:16:37.060 --> 00:16:39.880
dashboard, visualization, give us some ideas


00:16:39.880 --> 00:16:42.980
of the types of apps that people are building here.


00:16:42.980 --> 00:16:47.980
- Yes, so the most common applications are the toy apps,


00:16:47.980 --> 00:16:54.100
as we have already discussed,


00:16:54.100 --> 00:16:59.100
But once people truly discovered the power of Wave,


00:16:59.100 --> 00:17:06.500
then they started to amaze us as developers


00:17:06.500 --> 00:17:10.260
because they started to build


00:17:10.260 --> 00:17:12.220
like production grade applications


00:17:12.220 --> 00:17:14.980
that could be deployed and put to production


00:17:14.980 --> 00:17:17.540
and work just fine, right?


00:17:17.540 --> 00:17:22.540
So for example, H2O organized a public,


00:17:23.540 --> 00:17:28.540
let's say, hackathon that aimed to save


00:17:28.540 --> 00:17:33.460
or to predict wildfires in California.


00:17:33.460 --> 00:17:36.460
I believe in California, maybe in the whole world.


00:17:36.460 --> 00:17:42.460
And one kind of software engineer


00:17:42.460 --> 00:17:48.140
built a truly wonderful web app


00:17:48.140 --> 00:17:53.140
that allowed them to submit their models


00:17:53.140 --> 00:17:59.460
to preview them, to make scoreboard and everything within web application


00:17:59.460 --> 00:18:03.940
and it took him like two weeks, which is like incredible.


00:18:03.940 --> 00:18:05.940
That's amazing.


00:18:05.940 --> 00:18:13.540
Yeah, but maybe some success story from a data scientist context, let's say.


00:18:13.540 --> 00:18:20.500
We have a team at H2O that wasn't very happy with one of our data science products.


00:18:20.500 --> 00:18:24.020
So they decided, let's build one ourselves.


00:18:24.020 --> 00:18:32.220
And the result was that they have built, it's called Hydrogen Torch,


00:18:32.220 --> 00:18:35.420
and it's a framework for deep learning.


00:18:35.420 --> 00:18:40.420
And the result is a wave application that was built within a week or two,


00:18:40.420 --> 00:18:42.860
as an initial concept.


00:18:42.860 --> 00:18:47.060
And it has features like, you can train your models,


00:18:47.060 --> 00:18:54.500
you can see how it predicts, let's say, computer vision models with the image annotations.


00:18:54.500 --> 00:19:03.140
It has support for audio, if I remember correctly, and it's... yeah, exactly. And it's simply


00:19:03.140 --> 00:19:07.620
just everything that you can expect from a regular web application.


00:19:07.620 --> 00:19:15.780
And that blew my mind because the guys behind Hydrogen Torch are not software engineers. They


00:19:15.780 --> 00:19:17.820
They are purely data scientists.


00:19:17.820 --> 00:19:19.820
They are even Kaggle grandmasters


00:19:19.820 --> 00:19:24.820
for those who are aware of Kaggle platform.


00:19:24.820 --> 00:19:29.900
And they were able to build it themselves,


00:19:29.900 --> 00:19:34.420
which is mind-blowing to me. - Oh, that's fantastic.


00:19:34.420 --> 00:19:35.900
Hydrogen torch, okay.


00:19:35.900 --> 00:19:37.500
Yeah, I haven't heard of that.


00:19:37.500 --> 00:19:38.320
It looks pretty cool.


00:19:38.320 --> 00:19:41.380
It has experiment flow and dataset connectors


00:19:41.380 --> 00:19:44.260
and even pre-processed datasets.


00:19:44.260 --> 00:19:46.740
- Yes, and remember that these features


00:19:46.740 --> 00:19:49.060
were built by data scientists,


00:19:49.060 --> 00:19:53.420
which is something that you would typically require


00:19:53.420 --> 00:19:56.420
hold of software engineering team, right?


00:19:56.420 --> 00:19:57.860
- Right, and they probably didn't even use


00:19:57.860 --> 00:19:59.860
any TypeScript or React.


00:19:59.860 --> 00:20:00.700
- No, no.


00:20:00.700 --> 00:20:04.420
- No, that's cool.


00:20:04.420 --> 00:20:07.380
I think maybe to make this a little bit concrete


00:20:07.380 --> 00:20:12.380
to help people get a sense of how you work with this


00:20:12.380 --> 00:20:13.700
and what it has to offer,


00:20:13.700 --> 00:20:16.300
I wanna maybe talk through two areas.


00:20:16.300 --> 00:20:18.000
I wanna talk through kind of getting started


00:20:18.000 --> 00:20:20.740
what it looks like to write some code here


00:20:20.740 --> 00:20:24.660
and also maybe talk through some of the widgets


00:20:24.660 --> 00:20:25.720
because as you pointed out,


00:20:25.720 --> 00:20:28.580
if you look through the widget section,


00:20:28.580 --> 00:20:33.500
it's like a multi-level hierarchy of things


00:20:33.500 --> 00:20:37.620
but there's several hundred widgets that you can use.


00:20:37.620 --> 00:20:42.580
So that's a lot to just be able to, you know,


00:20:42.580 --> 00:20:46.340
write a few one line of Python and bring in some amazing UI


00:20:46.340 --> 00:20:47.740
element, right?


00:20:47.740 --> 00:20:49.860
>> Yeah, exactly.


00:20:49.860 --> 00:20:53.460
>> But let's start with going through the tutorial.


00:20:53.460 --> 00:20:56.100
So we can talk through maybe a couple of these,


00:20:56.100 --> 00:20:58.140
because I think they're a little bit interesting.


00:20:58.140 --> 00:20:59.460
They're all quite short.


00:20:59.460 --> 00:21:02.460
And I'll keep it simple, because I know code on the internet


00:21:02.460 --> 00:21:04.660
is hard, but just to kind of give you a sense of some


00:21:04.660 --> 00:21:06.500
of the moving parts.


00:21:06.500 --> 00:21:11.500
So in order to do any of this stuff,


00:21:11.500 --> 00:21:13.500
maybe we should also think a little bit


00:21:13.500 --> 00:21:18.060
about the architecture is you have a Wave server


00:21:18.060 --> 00:21:20.680
and you have Wave applications, right?


00:21:20.680 --> 00:21:24.820
You write these Wave applications in Python,


00:21:24.820 --> 00:21:28.220
but the server itself is like a Go centralized host


00:21:28.220 --> 00:21:31.300
like micro-Whiskey or G-Unicorn or something,


00:21:31.300 --> 00:21:33.020
but for Wave, right?


00:21:33.020 --> 00:21:34.340
- Yeah, exactly.


00:21:34.340 --> 00:21:37.620
So basically, as you have said that there are two parts,


00:21:37.620 --> 00:21:39.620
Wave server and Wave application.


00:21:39.620 --> 00:21:43.220
web server is written in Golang and it provides


00:21:43.220 --> 00:21:50.080
one of the highlight features, let's say of Wave.


00:21:50.080 --> 00:21:54.900
And that is seamless integration with the OpenID Connect,


00:21:54.900 --> 00:21:58.060
which is authentication,


00:21:58.060 --> 00:21:59.840
let's say authentication protocol,


00:21:59.840 --> 00:22:05.900
because most of your enterprise applications


00:22:05.900 --> 00:22:08.500
need to be secured somehow, right?


00:22:08.500 --> 00:22:13.500
And as a data scientist, you just don't want to


00:22:13.500 --> 00:22:15.700
and cannot do that yourself


00:22:15.700 --> 00:22:20.700
because it's a security-wise threat, let's say.


00:22:20.700 --> 00:22:23.160
- Yeah, sure, and even if you did,


00:22:23.160 --> 00:22:26.180
a lot of the OAuth flow requires you setting up


00:22:26.180 --> 00:22:28.860
certain endpoints and it's tricky.


00:22:28.860 --> 00:22:30.260
- Yeah, exactly.


00:22:30.260 --> 00:22:33.280
It's tricky even for regular software engineers.


00:22:34.260 --> 00:22:39.260
So that's why we provide this feature out of the box


00:22:39.260 --> 00:22:42.700
and it's provided by Wave server,


00:22:42.700 --> 00:22:46.740
which our Wave app, which is a Python server,


00:22:46.740 --> 00:22:51.740
connects to and talks to browser through as a proxy,


00:22:51.740 --> 00:22:53.100
let's say.


00:22:53.100 --> 00:22:59.060
So all the data goes from Python application


00:23:00.360 --> 00:23:04.560
to Wave server and then Wave server keeps


00:23:04.560 --> 00:23:06.680
an open WebSocket connection with browser


00:23:06.680 --> 00:23:09.600
to perform real-time stuff.


00:23:09.600 --> 00:23:15.940
- Okay, so to get started, you start the Wave server,


00:23:15.940 --> 00:23:18.420
create a virtual environment,


00:23:18.420 --> 00:23:23.120
pip install h2o-wave,


00:23:23.120 --> 00:23:26.720
and then that's it, you just have that one dependency.


00:23:27.880 --> 00:23:30.960
I guess you might have to pip install h2away


00:23:30.960 --> 00:23:32.480
before you can start the server,


00:23:32.480 --> 00:23:34.680
if you haven't got it globally available.


00:23:34.680 --> 00:23:39.080
Then you just have to write a little bit of code.


00:23:39.080 --> 00:23:42.440
Now there's some interesting paradigms


00:23:42.440 --> 00:23:44.460
that you've chosen here.


00:23:44.460 --> 00:23:50.280
A lot of the web frameworks are stateless, right?


00:23:50.280 --> 00:23:52.160
Here's an endpoint, and the only thing


00:23:52.160 --> 00:23:53.920
this endpoint knows about anything


00:23:53.920 --> 00:23:56.720
is that here's the request coming in.


00:23:56.720 --> 00:23:58.040
maybe a cookie is passed,


00:23:58.040 --> 00:24:00.700
maybe a query string is passed or a form.


00:24:00.700 --> 00:24:01.680
But other than that,


00:24:01.680 --> 00:24:06.680
like it's separate, unknown, unrelated, no history, right?


00:24:06.680 --> 00:24:08.240
And with these apps,


00:24:08.240 --> 00:24:11.760
it's a little bit more like a single running script


00:24:11.760 --> 00:24:13.800
that has a bit of a memory, right?


00:24:13.800 --> 00:24:16.320
- Yes.


00:24:16.320 --> 00:24:21.320
So basically, a wave has two concepts, let's say.


00:24:21.320 --> 00:24:25.800
One is, one are wave scripts


00:24:25.800 --> 00:24:29.520
and the other one is Wave app.


00:24:29.520 --> 00:24:32.360
And the difference is that Wave script is,


00:24:32.360 --> 00:24:34.400
as the name suggests, it's just a script.


00:24:34.400 --> 00:24:38.040
So you write the Python code,


00:24:38.040 --> 00:24:42.240
hit pipe, you invoke it like,


00:24:42.240 --> 00:24:45.080
let's say Python hello world.py,


00:24:45.080 --> 00:24:47.520
not like you would do with the normal,


00:24:47.520 --> 00:24:49.520
regular Python script.


00:24:49.520 --> 00:24:52.960
And what that does is it converts


00:24:52.960 --> 00:24:56.960
your Python script, Wave data,


00:24:56.960 --> 00:25:00.800
into a JSON, sends it to Wave server and keeps it there.


00:25:00.800 --> 00:25:04.240
So that means that your Wave,


00:25:04.240 --> 00:25:07.560
your Python process is finished


00:25:07.560 --> 00:25:11.080
and you only serve your data from Wave server


00:25:11.080 --> 00:25:15.360
to your users, which is much more performant


00:25:15.360 --> 00:25:18.260
than if you had to rerun the script


00:25:18.260 --> 00:25:21.960
for every single user as you would normally do.


00:25:21.960 --> 00:25:22.800
- Yeah, okay.


00:25:22.800 --> 00:25:27.000
- And another concept is a Wave app,


00:25:27.000 --> 00:25:32.000
which is something that most our users use.


00:25:32.000 --> 00:25:37.060
And Wave app lets you add interactivity


00:25:37.060 --> 00:25:39.580
because with WaveScript,


00:25:39.580 --> 00:25:42.260
WaveScripts are more suited for dashboards,


00:25:42.260 --> 00:25:46.940
which are just static read-only web apps, let's say,


00:25:46.940 --> 00:25:51.580
and you can even update it as you wish.


00:25:51.580 --> 00:25:53.220
but with web application,


00:25:53.220 --> 00:25:57.700
you probably want to handle your button clicks


00:25:57.700 --> 00:25:59.820
or dropdown changes.


00:25:59.820 --> 00:26:04.820
And all this needs to be recorded back on Python server


00:26:04.820 --> 00:26:07.880
and handled.


00:26:07.880 --> 00:26:12.020
- Yeah, you're gonna trigger elements of the page changing


00:26:12.020 --> 00:26:14.020
and things of that sort.


00:26:14.020 --> 00:26:19.020
So one thing that's interesting here is you create a site


00:26:20.140 --> 00:26:22.600
by giving it an endpoint like /hello.


00:26:22.600 --> 00:26:24.480
And you can have multiple ones of these running


00:26:24.480 --> 00:26:26.760
on the Wave server, right?


00:26:26.760 --> 00:26:29.120
These multiple scripts from multiple apps.


00:26:29.120 --> 00:26:31.120
And then you start working with these widgets


00:26:31.120 --> 00:26:34.000
and these widgets can be composable and hierarchical


00:26:34.000 --> 00:26:36.280
and they feel a little bit like,


00:26:36.280 --> 00:26:38.760
almost like working with Flutter, right?


00:26:38.760 --> 00:26:41.700
You have these UI elements and you might have like a layout


00:26:41.700 --> 00:26:43.360
which has a grid and then to the grid,


00:26:43.360 --> 00:26:46.600
you might put a table and into the table,


00:26:46.600 --> 00:26:47.980
you might put cards, right?


00:26:47.980 --> 00:26:51.340
You kind of build this up in code, mostly.


00:26:51.340 --> 00:26:56.340
You can use HTML and other templating languages,


00:26:56.340 --> 00:26:59.540
but mostly you write it in code by,


00:26:59.540 --> 00:27:00.860
for this example we have here,


00:27:00.860 --> 00:27:04.240
you just say, I'm gonna create a UI.markdown card, right?


00:27:04.240 --> 00:27:10.380
- Yes, so basically the basic building block of Wave,


00:27:10.380 --> 00:27:15.380
be it the scripts or apps, is something called card.


00:27:17.220 --> 00:27:20.980
So even in the example in front of us,


00:27:20.980 --> 00:27:24.780
you have specified UI.markdownCard,


00:27:24.780 --> 00:27:27.460
which is, as the name suggests,


00:27:27.460 --> 00:27:30.620
a card that lets you display markdown and interpret it.


00:27:30.620 --> 00:27:33.300
And that's about it.


00:27:33.300 --> 00:27:38.300
You put your cards into the layout, and that's it.


00:27:38.300 --> 00:27:46.660
- Yeah, you also have the idea of basically a grid layout


00:27:46.660 --> 00:27:50.180
where you can position these cards to be


00:27:50.180 --> 00:27:52.420
in a certain offset and a certain size, right?


00:27:52.420 --> 00:27:54.260
So in your Hello World example,


00:27:54.260 --> 00:27:57.460
you have the position is box one, one, two, two,


00:27:57.460 --> 00:28:01.400
which means the top left and then two wide, two tall.


00:28:01.400 --> 00:28:02.240
- Yes, exactly.


00:28:02.240 --> 00:28:07.240
So the box one, one, two, two means cone one, row one,


00:28:07.240 --> 00:28:10.420
and width two and height two.


00:28:10.420 --> 00:28:15.340
And we also support another type of layout


00:28:15.340 --> 00:28:19.040
and that's responsive layouts for more advanced users.


00:28:19.040 --> 00:28:25.460
This grid layout is more like the simplest layout


00:28:25.460 --> 00:28:29.220
that we could write, but it's fixed.


00:28:29.220 --> 00:28:31.700
So it means that it may not work well


00:28:31.700 --> 00:28:34.000
on every single screen.


00:28:34.000 --> 00:28:37.420
But if you want more responsiveness,


00:28:37.420 --> 00:28:39.620
then definitely go for responsive layout,


00:28:39.620 --> 00:28:41.560
which is based on Flexbox.


00:28:41.560 --> 00:28:45.320
- Right, so maybe it's five wide if you got a big screen,


00:28:45.320 --> 00:28:48.240
but if it's on a phone, they just all go vertical.


00:28:48.240 --> 00:28:49.080
- Exactly.


00:28:49.080 --> 00:28:51.920
- Okay.


00:28:51.920 --> 00:28:54.360
And let's see, what else do I wanna call here?


00:28:54.360 --> 00:28:56.900
All right, I think that one's pretty good.


00:28:56.900 --> 00:29:01.800
You also have this idea of editing your page from the REPL.


00:29:01.800 --> 00:29:06.400
So after you've run that, you can then just fire up Python


00:29:06.400 --> 00:29:08.020
and start working with it again.


00:29:08.020 --> 00:29:09.020
How does that work?


00:29:09.020 --> 00:29:12.720
- It's mostly just for playing around.


00:29:12.720 --> 00:29:13.560
I don't think that--


00:29:13.560 --> 00:29:15.220
- You mean debugging?


00:29:15.220 --> 00:29:19.820
maybe debugging, but I don't think that people would develop that way.


00:29:19.820 --> 00:29:28.340
It's just to show people that it's really nothing but Python.


00:29:28.340 --> 00:29:32.300
No hidden concepts, nothing like that.


00:29:32.300 --> 00:29:38.860
So you can basically hit up your REPL and work from there as well if you want to.


00:29:38.860 --> 00:29:44.780
Yeah, but what surprises me is you can exit your Python script and then you can open the


00:29:44.780 --> 00:29:50.820
the REPL, import the code, and then make some calls to it, and it actually changes the running


00:29:50.820 --> 00:29:54.500
code that I see, right?


00:29:54.500 --> 00:30:02.700
Yeah, basically the magic behind that is, if you notice, we have the page.save function,


00:30:02.700 --> 00:30:11.660
which basically, what it does is it makes a diff of what has changed from your previous


00:30:11.660 --> 00:30:17.960
save and sends it over to the web server and web server then deals with that and


00:30:17.960 --> 00:30:20.960
displays whatever changes you have made.


00:30:20.960 --> 00:30:29.960
So since it's the static file effectively it's just there's a singleton copy on the server that everybody's requesting.


00:30:29.960 --> 00:30:33.960
Exactly. That's why it's very suitable for dashboards.


00:30:33.960 --> 00:30:43.520
Sure. So another thing that jumps out is you make this change, and then people who have


00:30:43.520 --> 00:30:52.080
the browser open to that page, it just changes. They don't have to reload, right? It has built-in


00:30:52.080 --> 00:30:57.640
kind of smart hot reload. Tell us about that.


00:30:57.640 --> 00:31:06.640
So this is one of the things that I think that may be appealing even to, let's say,


00:31:06.640 --> 00:31:09.240
regular software engineers.


00:31:09.240 --> 00:31:14.000
Because the problem with software engineers is like, if you present them with framework


00:31:14.000 --> 00:31:19.240
like this, then they want to have more control, right?


00:31:19.240 --> 00:31:24.720
We as software developers, we need to have control over everything.


00:31:24.720 --> 00:31:27.040
That's why we don't like, let's say, WordPress.


00:31:27.040 --> 00:31:32.240
That's our great undoing, the shiny new thing, and we have to create it ourselves.


00:31:32.240 --> 00:31:34.320
Yeah, exactly.


00:31:34.320 --> 00:31:39.680
But the problem with, let's say, the typical approach to building a web application today,


00:31:39.680 --> 00:31:48.260
which is a single-page application, is that all the initial triggers need to be done from


00:31:48.260 --> 00:31:50.640
the client side, from the browser.


00:31:50.640 --> 00:31:56.900
But if you want to reflect changes that happened on the backend side, then this can be a bit


00:31:56.900 --> 00:32:03.060
problematic. You either need to introduce polling, which means calling your


00:32:03.060 --> 00:32:10.100
Wave server, your backend regularly, but that may not be ideal because you


00:32:10.100 --> 00:32:14.820
can flood your server unnecessarily.


00:32:14.820 --> 00:32:18.420
I don't know why we can only support 20 users at a time. This doesn't make any


00:32:18.420 --> 00:32:20.740
sense.


00:32:21.220 --> 00:32:29.220
Or you can use WebSockets, which is not so easy to implement, let's say.


00:32:29.220 --> 00:32:34.220
And what Wave uses is exactly these WebSockets.


00:32:34.220 --> 00:32:39.220
So it allows you to push changes from server to UI seamlessly.


00:32:39.220 --> 00:32:43.220
And that's also one of the wonderful features of Wave.


00:32:43.220 --> 00:32:48.220
Right, so basically the takeaway for most people is


00:32:48.220 --> 00:32:52.060
as you develop your code, as you develop your project, your app,


00:32:52.060 --> 00:32:55.900
you'll have it maybe open on the side in your browser, you make some changes,


00:32:55.900 --> 00:33:00.060
if you just hit save, then it should automatically...


00:33:00.060 --> 00:33:06.460
maybe you have to rerun your script, but you won't have to go and refresh your browser as well, right?


00:33:06.460 --> 00:33:11.900
Yes, exactly. And even with the Wave applications, we use UVCurrent


00:33:11.900 --> 00:33:17.260
as an underlying Python server which has built-in hot reload,


00:33:17.260 --> 00:33:21.140
And that means that you can just save your file


00:33:21.140 --> 00:33:24.100
and everything reloads automatically.


00:33:24.100 --> 00:33:27.980
- Cool, so your unicorn is watching


00:33:27.980 --> 00:33:29.500
your Python files for changes.


00:33:29.500 --> 00:33:32.100
So when you save it automatically restarts it.


00:33:32.100 --> 00:33:32.940
- Yeah, exactly.


00:33:32.940 --> 00:33:37.940
It's restarted and also your browser is refreshed.


00:33:37.940 --> 00:33:40.940
- Yep, okay, fantastic.


00:33:40.940 --> 00:33:43.220
So that's a pretty cool little hello world.


00:33:44.260 --> 00:33:47.340
The next one is to get the browser to sing


00:33:47.340 --> 00:33:49.300
99 bottles of beer on the wall,


00:33:49.300 --> 00:33:52.260
which is a fun little demo.


00:33:52.260 --> 00:33:54.780
But this one takes us from,


00:33:54.780 --> 00:33:58.580
oh, this one is still a script so far, right?


00:33:58.580 --> 00:33:59.860
- Yes.


00:33:59.860 --> 00:34:02.460
- And then the next one we'll convert it to an app.


00:34:02.460 --> 00:34:04.060
Okay, so for this one,


00:34:04.060 --> 00:34:09.940
the core takeaway here is basically a way to introduce


00:34:13.980 --> 00:34:17.060
like pushing updates from the server to the client.


00:34:17.060 --> 00:34:19.940
So for example, you know, people don't know


00:34:19.940 --> 00:34:21.820
there's the 99 bottles of beer in the world,


00:34:21.820 --> 00:34:23.980
99 bottles of beer, take one down, pass around.


00:34:23.980 --> 00:34:26.500
Now there's 98, then 97, then 96, right?


00:34:26.500 --> 00:34:29.000
So you wanted to have it like keep doing that


00:34:29.000 --> 00:34:30.580
over and over and over.


00:34:30.580 --> 00:34:34.340
So if this was a console app, how would I do it?


00:34:34.340 --> 00:34:39.340
I would probably say for I in range and just for 99


00:34:39.340 --> 00:34:41.300
and the 90 and I would just print,


00:34:41.300 --> 00:34:42.940
just print, print, print, print.


00:34:43.820 --> 00:34:47.180
What you can do with Wave is you can have that exact same


00:34:47.180 --> 00:34:49.260
super straightforward for loop,


00:34:49.260 --> 00:34:52.540
and then you just go to your card that you put in the page


00:34:52.540 --> 00:34:56.060
and you just say content equals some F string, right?


00:34:56.060 --> 00:35:00.780
That verse for that number, and then you just call page


00:35:00.780 --> 00:35:01.980
and then you don't want it to happen


00:35:01.980 --> 00:35:04.440
as fast as possible as you sleep, right?


00:35:04.440 --> 00:35:05.660
Make it come out a little bit slower,


00:35:05.660 --> 00:35:10.260
but that does the multicast broadcast


00:35:10.260 --> 00:35:12.420
to all the clients watching just straight away, right?


00:35:12.420 --> 00:35:14.740
just loop over the code, make some changes,


00:35:14.740 --> 00:35:16.780
and that will automatically push it.


00:35:16.780 --> 00:35:18.980
I guess you gotta call save, but then it'll push it.


00:35:18.980 --> 00:35:20.220
That's pretty impressive.


00:35:20.220 --> 00:35:22.580
- Yeah, thanks.


00:35:22.580 --> 00:35:26.740
And by the way, just not to forget,


00:35:26.740 --> 00:35:31.180
the original author of this framework is not me,


00:35:31.180 --> 00:35:33.060
but it's my boss, Prithvi Prabhu,


00:35:33.060 --> 00:35:34.700
which I would like to give shout out to,


00:35:34.700 --> 00:35:37.720
because he's the mastermind behind all this framework.


00:35:40.100 --> 00:35:43.100
Yeah, cool. It's definitely a cool framework.


00:35:43.100 --> 00:35:46.100
So this opens up a lot of possibilities, right?


00:35:46.100 --> 00:35:48.300
For people coming to your site


00:35:48.300 --> 00:35:50.780
and getting some form of interactivity.


00:35:50.780 --> 00:35:54.500
Now, one thing he said is like,


00:35:54.500 --> 00:35:59.500
I could build say like a chat app or like some kind of bot.


00:35:59.500 --> 00:36:01.500
And what I've seen so far,


00:36:01.500 --> 00:36:05.640
it feels like what is happening on the server


00:36:05.640 --> 00:36:08.180
is shared with everyone


00:36:08.180 --> 00:36:10.740
rather than dedicated to a particular user


00:36:10.740 --> 00:36:12.140
or group of users.


00:36:12.140 --> 00:36:15.980
How do I combine this to say like,


00:36:15.980 --> 00:36:17.260
I want them to sing this song,


00:36:17.260 --> 00:36:19.420
but I want everyone maybe who logs in


00:36:19.420 --> 00:36:21.580
to have their own copy, right?


00:36:21.580 --> 00:36:25.380
Like Sarah came 30 seconds later,


00:36:25.380 --> 00:36:28.500
she shouldn't join the song halfway through


00:36:28.500 --> 00:36:29.420
or a third of the way through,


00:36:29.420 --> 00:36:32.460
she should get it from 99 going down.


00:36:32.460 --> 00:36:34.220
- Yeah, that's definitely possible.


00:36:36.180 --> 00:36:40.500
The reason that you see for every single tab,


00:36:40.500 --> 00:36:43.780
the same output is because we are only looking


00:36:43.780 --> 00:36:47.140
at the scripts, which in case of dashboards,


00:36:47.140 --> 00:36:49.900
that's totally understandable, right?


00:36:49.900 --> 00:36:51.740
Everybody should see the same dashboard


00:36:51.740 --> 00:36:54.140
because the data is always the same.


00:36:54.140 --> 00:36:59.140
But with web apps, you get the,


00:36:59.140 --> 00:37:05.780
basically the common behavior as you would suggest.


00:37:05.780 --> 00:37:10.180
So every tab can have its own state.


00:37:10.180 --> 00:37:11.020
- I see.


00:37:11.020 --> 00:37:11.840
- So let's say if you have-


00:37:11.840 --> 00:37:13.280
- Like its own session basically.


00:37:13.280 --> 00:37:14.120
- Exactly.


00:37:14.120 --> 00:37:16.420
So if you have, let's say a counter app


00:37:16.420 --> 00:37:18.740
that has a single button,


00:37:18.740 --> 00:37:22.120
and once you click it, then it increments counter.


00:37:22.120 --> 00:37:27.120
You can basically have a single button instance


00:37:27.120 --> 00:37:31.280
for every single tab if you want to.


00:37:31.280 --> 00:37:36.280
but we also have something called multicast


00:37:36.280 --> 00:37:38.620
and broadcast modes.


00:37:38.620 --> 00:37:43.120
And that means that the value could be synced


00:37:43.120 --> 00:37:46.920
across every single tab if you wanted to.


00:37:46.920 --> 00:37:49.320
But the default mode is called unicast


00:37:49.320 --> 00:37:52.180
and that means that the change is only propagated


00:37:52.180 --> 00:37:54.600
to the current client, which is broadcast.


00:37:54.600 --> 00:37:55.880
- I see.


00:37:55.880 --> 00:37:57.780
Okay, yeah, that makes a lot of sense.


00:37:59.000 --> 00:38:03.000
Maybe this is a good time to pause


00:38:03.000 --> 00:38:04.840
going through some of these code examples


00:38:04.840 --> 00:38:06.520
and some of these capabilities.


00:38:06.520 --> 00:38:11.340
And, you know, Bob Vanni has a good question.


00:38:11.340 --> 00:38:15.960
What databases are supported?


00:38:15.960 --> 00:38:17.560
Not necessarily even just databases,


00:38:17.560 --> 00:38:19.480
but like where does this code run?


00:38:19.480 --> 00:38:21.640
Is this PyScript and PyId?


00:38:21.640 --> 00:38:23.540
Is this on the server?


00:38:23.540 --> 00:38:27.160
Right, like what capabilities do I have?


00:38:27.160 --> 00:38:29.420
Can I pip install whatever I want?


00:38:29.420 --> 00:38:30.620
Or am I really limited?


00:38:30.620 --> 00:38:33.780
- There are, sky's the limit, you know,


00:38:33.780 --> 00:38:37.140
because all the code is running in the server.


00:38:37.140 --> 00:38:40.140
So that means that you can basically connect


00:38:40.140 --> 00:38:43.020
to any database of your choice,


00:38:43.020 --> 00:38:47.300
the same way as you would do, let's say,


00:38:47.300 --> 00:38:49.580
in Django or Flask app.


00:38:49.580 --> 00:38:53.780
And so basically, you can pip install anything you want


00:38:53.780 --> 00:38:54.600
on your server.


00:38:54.600 --> 00:38:55.440
- I see.


00:38:55.440 --> 00:38:57.360
- If you're supported with Python


00:38:57.360 --> 00:39:01.840
or in some crazy indirect way that you might write some C,


00:39:01.840 --> 00:39:03.880
you could call from Python, you could call it,


00:39:03.880 --> 00:39:06.240
it's gonna be like, it's full Python.


00:39:06.240 --> 00:39:08.480
So it does whatever you want it to do.


00:39:08.480 --> 00:39:09.440
- Exactly.


00:39:09.440 --> 00:39:11.600
Whatever you can make Python to do,


00:39:11.600 --> 00:39:14.460
then it's possible in Wave as well.


00:39:14.460 --> 00:39:16.160
- Sure, that's really good to know.


00:39:16.160 --> 00:39:20.080
All right, so I guess maybe the third thing


00:39:20.080 --> 00:39:23.040
that really is, let's talk about two things real quick.


00:39:24.520 --> 00:39:26.120
Before I get to the third one here,


00:39:26.120 --> 00:39:28.360
one thing that's kind of interesting is


00:39:28.360 --> 00:39:30.120
what you're setting here in this example


00:39:30.120 --> 00:39:31.520
is in the for loop,


00:39:31.520 --> 00:39:34.320
you're saying the content is this F string


00:39:34.320 --> 00:39:37.800
and you regenerate the entire F string.


00:39:37.800 --> 00:39:39.880
And for this example, it's like a tiny little,


00:39:39.880 --> 00:39:42.240
it's a verse and a song and who cares?


00:39:42.240 --> 00:39:45.920
But you know, if this was a much more interesting,


00:39:45.920 --> 00:39:48.440
like a full on Jinja style template


00:39:48.440 --> 00:39:51.000
and you want to just change one little small piece,


00:39:51.920 --> 00:39:56.240
you know, re round tripping that full HTML every time


00:39:56.240 --> 00:39:58.520
is not the most efficient.


00:39:58.520 --> 00:40:00.720
So what you have because you're doing WebSockets


00:40:00.720 --> 00:40:04.300
is you have this idea of like an expression


00:40:04.300 --> 00:40:06.840
to send some values over.


00:40:06.840 --> 00:40:08.800
So you pass a dictionary of the values


00:40:08.800 --> 00:40:12.040
and then you set the content to be an expression,


00:40:12.040 --> 00:40:16.600
a little handlebar thing like JavaScript front end binding


00:40:16.600 --> 00:40:20.800
or a Jinja value, something along those lines, right?


00:40:20.800 --> 00:40:22.800
Tell us about this and how that works.


00:40:22.800 --> 00:40:28.800
Yeah, so basically it works...


00:40:28.800 --> 00:40:35.800
Basically, you always send just the difference, the diffs or let's say deltas,


00:40:35.800 --> 00:40:39.800
of what has changed to the UI.


00:40:39.800 --> 00:40:44.800
And once these changes arrive to the browser,


00:40:44.800 --> 00:40:49.800
then React takes over it and renders whatever changes have come.


00:40:49.800 --> 00:40:54.680
So in this particular case, the first change would be the whole string,


00:40:54.680 --> 00:40:57.080
because there is nothing else there.


00:40:57.080 --> 00:41:00.120
It would be rendered,


00:41:00.120 --> 00:41:08.920
but all the subsequent updates will only contain changes in the form of dictionary values,


00:41:08.920 --> 00:41:15.800
which is much less to care about on the network bandwidth side.


00:41:15.800 --> 00:41:19.640
And once these values arrive, then React again takes over


00:41:19.640 --> 00:41:23.400
and does its magic and updates the UI correctly.


00:41:23.400 --> 00:41:25.880
- Yeah, that's really neat.


00:41:25.880 --> 00:41:30.400
So really great way to be super efficient


00:41:30.400 --> 00:41:34.440
just by setting some values like on your card.data.


00:41:34.440 --> 00:41:36.040
Whatever you want to call it, and then call save.


00:41:36.040 --> 00:41:41.040
And those correspond over to your expression, right?


00:41:41.040 --> 00:41:43.200
That makes up your template.


00:41:43.200 --> 00:41:54.020
Yeah, and that's even more important in our domain because data scientists usually have a lot of data.


00:41:54.020 --> 00:41:56.020
Extremely a lot of data.


00:41:56.020 --> 00:42:03.020
And that means that they would like to push it all into browser and render their plots.


00:42:03.020 --> 00:42:10.820
But if they did on every single update, then it might not be the best way, right?


00:42:10.820 --> 00:42:12.660
So that's why we have to include this.


00:42:12.660 --> 00:42:14.020
- If you've got a great big page


00:42:14.020 --> 00:42:16.340
and a tiny little plot that you want to change,


00:42:16.340 --> 00:42:17.580
you know, it'd be better to just say,


00:42:17.580 --> 00:42:18.660
just change that plot,


00:42:18.660 --> 00:42:20.180
but leave all the other stuff there.


00:42:20.180 --> 00:42:21.700
- Yeah, exactly, exactly.


00:42:21.700 --> 00:42:24.140
- Cool.


00:42:24.140 --> 00:42:26.900
All right, let's talk of the last little thing here


00:42:26.900 --> 00:42:31.900
about how this looks if we make it an actual, an app,


00:42:31.900 --> 00:42:32.980
I think.


00:42:32.980 --> 00:42:35.340
- You need to go to the to-do list.


00:42:35.340 --> 00:42:36.400
- The list, okay.


00:42:36.400 --> 00:42:39.220
- Or maybe bean counter, maybe.


00:42:39.220 --> 00:42:40.060
- I think the bean counter,


00:42:40.060 --> 00:42:42.900
Let's do the-- I think the bean counter one.


00:42:42.900 --> 00:42:44.140
Yeah, the bean counter one.


00:42:44.140 --> 00:42:44.940
Yeah, exactly.


00:42:44.940 --> 00:42:46.300
Yeah, this is a real simple one.


00:42:46.300 --> 00:42:48.260
So the bean counter one is like a button.


00:42:48.260 --> 00:42:51.260
You press it, it just goes one, two, three, four.


00:42:51.260 --> 00:42:54.580
It shows things like state, though, and whatnot.


00:42:54.580 --> 00:43:00.340
But tell us, how does it look different to create something--


00:43:00.340 --> 00:43:04.220
like in the script, I didn't do anything hardly about URLs


00:43:04.220 --> 00:43:07.020
or functions to call or returning.


00:43:07.020 --> 00:43:10.120
I just did some stuff and then it somehow magically changed.


00:43:10.120 --> 00:43:13.400
But this looks a little bit more like Flask, right?


00:43:13.400 --> 00:43:15.880
- Yes.


00:43:15.880 --> 00:43:19.980
So the difference in syntax is that you need to have


00:43:19.980 --> 00:43:24.100
a single function that's asynchronous


00:43:24.100 --> 00:43:28.760
because we use async AO in order not to block your UI.


00:43:28.760 --> 00:43:32.800
And that function needs to be annotated


00:43:32.800 --> 00:43:37.800
with an @app annotation that takes a single


00:43:37.800 --> 00:43:45.180
required parameter, which is a URL path


00:43:45.180 --> 00:43:47.980
that you want your app to be listened on.


00:43:47.980 --> 00:43:51.840
And within this-- - Can I listen on a forward slash?


00:43:51.840 --> 00:43:53.880
Like all these examples are like slash counter


00:43:53.880 --> 00:43:55.040
and slash hello and so on.


00:43:55.040 --> 00:43:59.160
- Yeah, you can use also a root


00:43:59.160 --> 00:44:02.000
which will be just the forward slash and that's it.


00:44:02.000 --> 00:44:03.540
- Okay, yeah, okay.


00:44:03.540 --> 00:44:10.120
- And just to get back, so the annotate function


00:44:10.120 --> 00:44:14.140
will give you one parameter, which is Q,


00:44:14.140 --> 00:44:15.780
and that stands for query.


00:44:15.780 --> 00:44:20.520
And that allows you to control your Wave app.


00:44:20.520 --> 00:44:23.920
So it has methods like Q.save,


00:44:23.920 --> 00:44:27.920
or Q.pagesave, I would say.


00:44:27.920 --> 00:44:28.760
- Yeah, Q.pagesave.


00:44:28.760 --> 00:44:33.760
which is an equivalent of page.save


00:44:33.760 --> 00:44:37.800
in our previous script example.


00:44:37.800 --> 00:44:42.800
And you also, instead of page dictionary


00:44:42.800 --> 00:44:46.080
that you put your cards in,


00:44:46.080 --> 00:44:48.560
you need to just prefix it with Q.


00:44:48.560 --> 00:44:51.520
So you end up with Q page,


00:44:51.520 --> 00:44:54.440
and then you specify your card.


00:44:54.440 --> 00:44:57.960
- And this is how you get the per user type of thing,


00:44:57.960 --> 00:45:00.260
is that queue is probably tied to them, right?


00:45:00.260 --> 00:45:03.200
- Not necessarily.


00:45:03.200 --> 00:45:05.720
The per user thing is by default,


00:45:05.720 --> 00:45:10.560
but if you go to the app annotation,


00:45:10.560 --> 00:45:12.520
you can specify mode there.


00:45:12.520 --> 00:45:15.040
So by default, it's Unicast,


00:45:15.040 --> 00:45:18.760
and that's how it distributes the changes.


00:45:18.760 --> 00:45:20.200
The queue is more like,


00:45:20.200 --> 00:45:25.920
you can think of it as a source of what has changed


00:45:25.920 --> 00:45:28.320
and how to update your UI.


00:45:28.320 --> 00:45:32.920
So when we go through the example further,


00:45:32.920 --> 00:45:36.960
you will see that it can also store some local state


00:45:36.960 --> 00:45:39.520
or app-wide state, et cetera.


00:45:39.520 --> 00:45:42.320
- Okay.


00:45:42.320 --> 00:45:45.720
One of the things that really jumped out to me was here,


00:45:45.720 --> 00:45:49.600
it was seeing the async and await stuff everywhere.


00:45:49.600 --> 00:45:51.680
So you have an async method,


00:45:51.680 --> 00:45:55.840
you call await page.save, q.page.save,


00:45:55.840 --> 00:46:00.280
And presumably, if you want to work with Beanie and MongoDB,


00:46:00.280 --> 00:46:02.040
you could use its async API.


00:46:02.040 --> 00:46:06.080
If you want to call an API endpoint with HTTPX,


00:46:06.080 --> 00:46:08.080
you could await those calls, right?


00:46:08.080 --> 00:46:12.560
So it really allows you to create really scalable code,


00:46:12.560 --> 00:46:14.000
right?


00:46:14.000 --> 00:46:15.240
- Yeah, definitely.


00:46:15.240 --> 00:46:17.080
And especially,


00:46:17.080 --> 00:46:23.440
the reason why it's async is because


00:46:23.440 --> 00:46:26.560
If you had a case like you had a single app,


00:46:26.560 --> 00:46:28.480
which has two users,


00:46:28.480 --> 00:46:32.560
and the first user would create some blocking action,


00:46:32.560 --> 00:46:35.720
then it would block also the second user


00:46:35.720 --> 00:46:37.640
because server is busy, right?


00:46:37.640 --> 00:46:38.740
It cannot respond.


00:46:38.740 --> 00:46:43.320
So that's why you need to make everything as synchronous.


00:46:43.320 --> 00:46:48.400
- And you said you're using UVicorn behind the scenes.


00:46:48.400 --> 00:46:52.340
So that's a super, a great server


00:46:52.340 --> 00:46:54.540
for this kind of code.


00:46:54.540 --> 00:46:56.340
- Yes, exactly.


00:46:56.340 --> 00:46:57.180
- Yeah.


00:46:57.180 --> 00:46:59.740
- It does a lot of heavy lifting for us, so.


00:46:59.740 --> 00:47:01.500
- Yeah, absolutely.


00:47:01.500 --> 00:47:03.260
It's really good to build on it.


00:47:03.260 --> 00:47:05.940
Is it running some kind of Python framework


00:47:05.940 --> 00:47:09.380
that we don't see, like a Flask or FastAPI or something,


00:47:09.380 --> 00:47:10.960
or is it just all custom?


00:47:10.960 --> 00:47:16.340
- It's, it uses Starlette,


00:47:16.340 --> 00:47:20.780
although I'm not sure if it's actual server,


00:47:20.780 --> 00:47:23.500
because I'm not very familiar with it.


00:47:23.500 --> 00:47:24.660
- Yeah.


00:47:24.660 --> 00:47:25.500
- But-


00:47:25.500 --> 00:47:29.100
- Yeah, so it's the same foundation as FastAPI


00:47:29.100 --> 00:47:31.640
and other things as well, so that's pretty cool.


00:47:31.640 --> 00:47:34.860
All right, well, there's a cool getting started


00:47:34.860 --> 00:47:36.980
people can walk through and check it out.


00:47:36.980 --> 00:47:39.140
It's pretty interesting,


00:47:39.140 --> 00:47:41.900
'cause it is a different programming model


00:47:41.900 --> 00:47:47.740
compared to how many people would be familiar with Flask


00:47:47.740 --> 00:47:50.740
and those types of things that are very stateless


00:47:50.740 --> 00:47:52.140
and you've got to somehow figure out


00:47:52.140 --> 00:47:54.660
how to get their session and store them in a database


00:47:54.660 --> 00:47:56.620
or a Redis queue and then get that back


00:47:56.620 --> 00:47:58.300
and then regenerate it, right?


00:47:58.300 --> 00:48:02.000
You have this inner information more round trip.


00:48:02.000 --> 00:48:05.300
I think it'll resonate with a lot of people.


00:48:05.300 --> 00:48:06.460
It's definitely easier.


00:48:06.460 --> 00:48:11.940
So I want to talk about the widgets,


00:48:11.940 --> 00:48:14.940
but actually before we talk about the widgets,


00:48:14.940 --> 00:48:18.100
Let's touch on one thing over in the examples here.


00:48:18.100 --> 00:48:23.700
But so,


00:48:23.700 --> 00:48:30.500
when I write traditional web applications, let's call them,


00:48:30.500 --> 00:48:32.540
I'll create an HTML file


00:48:32.540 --> 00:48:34.440
and I'll probably use some template language


00:48:34.440 --> 00:48:39.440
like Chameleon or Jinja2 or Dango templates


00:48:39.440 --> 00:48:41.380
and pass a dictionary over there.


00:48:41.380 --> 00:48:44.940
but I mostly think about what's on the page


00:48:44.940 --> 00:48:49.940
by structuring HTML file that has CSS and JavaScript


00:48:49.940 --> 00:48:52.900
and placeholders for my things to go into and loop,


00:48:52.900 --> 00:48:54.740
that sort of thing.


00:48:54.740 --> 00:48:58.260
Is there a way in HTO Wave


00:48:58.260 --> 00:49:00.640
to have some kind of template like that?


00:49:00.640 --> 00:49:03.180
- Definitely.


00:49:03.180 --> 00:49:07.540
Although we do not encourage it very much


00:49:07.540 --> 00:49:17.540
because we usually tend to think about using your custom HTML as an escape hatch, let's say.


00:49:17.540 --> 00:49:24.140
And instead, we try to provide you with Python APIs whenever possible.


00:49:24.140 --> 00:49:30.540
But if you really, really want, there is also HTML templating if you need to.


00:49:30.540 --> 00:49:37.340
And that's also work the same way as we described the script data updates.


00:49:37.340 --> 00:49:47.340
So it takes one dictionary with the values and then an HTML with the templating language.


00:49:47.340 --> 00:49:52.340
Right. Does it do the partial updates based on that as well?


00:49:52.340 --> 00:49:56.340
Or does it round trip the template, the whole thing?


00:49:56.340 --> 00:50:03.940
- I'm not sure about that one, but I would say it also is capable of partial updates.


00:50:03.940 --> 00:50:13.460
- Okay. Yeah, this looks really neat. So basically, the examples that you have here are,


00:50:13.460 --> 00:50:18.980
you have a little tiny fragment, like a fragment of HTML that'll go onto the page, and then


00:50:18.980 --> 00:50:24.660
that's the template. It sounds a little bit like Vue components and that style.


00:50:24.660 --> 00:50:25.660
>> Yeah.


00:50:25.660 --> 00:50:30.660
>> We put the code and the markdown a little bit together.


00:50:30.660 --> 00:50:32.660
>> Yeah, exactly.


00:50:32.660 --> 00:50:36.660
And maybe one more interesting thing to note,


00:50:36.660 --> 00:50:41.660
because the app that we are currently looking at


00:50:41.660 --> 00:50:44.660
is called H2O Wave Tour,


00:50:44.660 --> 00:50:48.660
and that's also a Wave app in itself.


00:50:48.660 --> 00:50:51.660
So you can see it looks nice,


00:50:51.660 --> 00:50:54.940
even though you have a smaller screen.


00:50:54.940 --> 00:50:59.460
And it's a perfect example of what Wave is capable


00:50:59.460 --> 00:51:04.260
because all the code that we see in front of us


00:51:04.260 --> 00:51:07.140
is rendered in VS Code editor,


00:51:07.140 --> 00:51:08.640
which is called Monaco editor.


00:51:08.640 --> 00:51:14.620
And that's implemented via incorporating


00:51:14.620 --> 00:51:16.740
custom JavaScript into Wave.


00:51:16.740 --> 00:51:19.820
So that means if you really need to include


00:51:19.820 --> 00:51:22.540
some third-party libraries in JavaScript,


00:51:22.540 --> 00:51:24.900
then we got to cover it as well.


00:51:24.900 --> 00:51:26.780
So there's-- - That's really awesome.


00:51:26.780 --> 00:51:31.300
Yeah, so this H2O Wave Tour lets you run the code locally


00:51:31.300 --> 00:51:34.400
and explore it and search through the different examples,


00:51:34.400 --> 00:51:35.780
which is really fantastic.


00:51:35.780 --> 00:51:38.980
So if you go to the website, there's a getting started


00:51:38.980 --> 00:51:42.160
that shows you how to get this up and running.


00:51:42.160 --> 00:51:45.300
What we get is a nav bar across the top


00:51:45.300 --> 00:51:47.220
and then like a dropdown combo box


00:51:47.220 --> 00:51:50.760
and next previous button on the right side of the page,


00:51:50.760 --> 00:51:53.040
we have the rendered output that's live.


00:51:53.040 --> 00:51:54.100
And then on the left side,


00:51:54.100 --> 00:51:55.920
we have the code that makes it happen.


00:51:55.920 --> 00:51:57.820
So what you're telling me is that little square


00:51:57.820 --> 00:52:00.980
on the left pane of my two pane window,


00:52:00.980 --> 00:52:03.220
that's basically VS Code.


00:52:03.220 --> 00:52:04.380
- Yes, you can edit it.


00:52:04.380 --> 00:52:06.540
You can, you have even snippets.


00:52:06.540 --> 00:52:10.540
So if you can try to type into it and hit W


00:52:10.540 --> 00:52:14.540
and let's say button,


00:52:16.940 --> 00:52:18.180
Or maybe not.


00:52:18.180 --> 00:52:20.120
Maybe I remembered wrongly.


00:52:20.120 --> 00:52:23.620
Try, try command.


00:52:23.620 --> 00:52:25.960
- Maybe my ad blockers make it angry as well.


00:52:25.960 --> 00:52:27.180
You never know.


00:52:27.180 --> 00:52:28.020
- Okay, okay.


00:52:28.020 --> 00:52:30.700
- But yeah, that's cool.


00:52:30.700 --> 00:52:35.660
You get like highlighting and indentations and.


00:52:35.660 --> 00:52:38.420
- Yeah, you can edit it and your changes


00:52:38.420 --> 00:52:41.140
should be reflected on the right side as well.


00:52:41.140 --> 00:52:41.980
- Yeah.


00:52:41.980 --> 00:52:43.700
- So it's kind of interactive.


00:52:43.700 --> 00:52:48.100
>> Yeah.


00:52:48.100 --> 00:52:50.180
>> You can just set there and edit them.


00:52:50.180 --> 00:52:52.020
That's a really cool way to play with it.


00:52:52.020 --> 00:52:53.480
You have stuff that'll say,


00:52:53.480 --> 00:52:55.780
take you to Repl.it or whatever.


00:52:55.780 --> 00:52:57.460
There's all these panes, like, "Okay,


00:52:57.460 --> 00:52:59.620
what do I click to actually make this show up?


00:52:59.620 --> 00:53:01.300
Where is it supposed to go?" This is


00:53:01.300 --> 00:53:04.260
a really cool way to explore, I think.


00:53:04.260 --> 00:53:05.780
>> Yeah.


00:53:05.780 --> 00:53:08.420
>> Okay. So the thing


00:53:08.420 --> 00:53:10.020
I wanted to talk about was these templates.


00:53:10.020 --> 00:53:12.020
So there is some way to do little bits,


00:53:12.020 --> 00:53:16.220
but it sounds to me more like it's a little bit


00:53:16.220 --> 00:53:18.360
this component model, like this little section,


00:53:18.360 --> 00:53:20.680
this card that we're gonna put somewhere on the screen,


00:53:20.680 --> 00:53:22.880
here's its little fragment of HTML


00:53:22.880 --> 00:53:24.880
that is an expression that goes with it.


00:53:24.880 --> 00:53:28.120
- Yes, that's right.


00:53:28.120 --> 00:53:29.380
- Okay, yeah.


00:53:29.380 --> 00:53:32.400
Very, very neat.


00:53:32.400 --> 00:53:35.320
The other one that's pretty nice is Markdown.


00:53:35.320 --> 00:53:40.760
You have nice support for just Markdown out of the box.


00:53:40.760 --> 00:53:50.760
So I think that's great.


00:53:50.760 --> 00:53:54.760
We have various, there's hundreds of examples,


00:53:54.760 --> 00:53:58.760
and some people can go play with it, but there's a couple for the different how


00:53:58.760 --> 00:54:02.760
Markdown gets applied and used.


00:54:02.760 --> 00:54:06.760
Let's see. Another thing, you know, you talked


00:54:06.760 --> 00:54:15.720
about it hit you told me to type like W button and hit and tab. So that's part of one of the code


00:54:15.720 --> 00:54:22.200
extensions or plugins depending on the editor you're using. So you have VS Code and you have


00:54:22.200 --> 00:54:29.800
PyCharm plugins that allow us to create things like if I got a form or something right I could


00:54:29.800 --> 00:54:39.880
type like w form tab and it would go potentially create some kind of UI element instead of


00:54:39.880 --> 00:54:44.840
me having to do that right or if I want to get a scaffold up a starter application.


00:54:44.840 --> 00:54:52.520
Yes, that's right. So we have VS Code extension and PyCharm plugin which have the same features


00:54:53.480 --> 00:55:01.640
And the features are, one is called snippets or let's say templates


00:55:01.640 --> 00:55:07.160
that allows you to streamline your typing a little bit.


00:55:07.160 --> 00:55:12.920
So you don't need to think about what are the possible attributes.


00:55:12.920 --> 00:55:17.560
In the button for example you can just...


00:55:17.560 --> 00:55:26.120
Yeah, there is a nice little demo. So you can just type w_ and your card name


00:55:26.120 --> 00:55:32.360
and it will basically give you all the code that is needed.


00:55:32.360 --> 00:55:38.280
And the second part is an advanced autocomplete because most of the stuff


00:55:38.280 --> 00:55:43.640
in Wave is based on dictionaries which are dynamic in their nature so


00:55:43.640 --> 00:55:47.840
there is not much that the type system can infer.


00:55:47.840 --> 00:55:52.080
So we help with that a little bit as well.


00:55:52.080 --> 00:55:53.760
>> Yeah.


00:55:53.760 --> 00:55:57.400
It's amazing how much those sort of focus templates are like,


00:55:57.400 --> 00:55:59.160
I'm here to create UI widgets.


00:55:59.160 --> 00:56:01.200
I'm telling you, this reminds me a lot of Flutter.


00:56:01.200 --> 00:56:03.720
I don't know if you've done anything with Flutter.


00:56:03.720 --> 00:56:05.360
>> Just a little bit.


00:56:05.360 --> 00:56:08.080
>> But like the sort of style of like the way


00:56:08.080 --> 00:56:11.560
you create these sort of nested UI widgets


00:56:11.560 --> 00:56:14.480
and then the editor tools to build them.


00:56:14.480 --> 00:56:15.880
It's really nice, I like it.


00:56:15.880 --> 00:56:20.520
But yeah, I certainly, if people are gonna build


00:56:20.520 --> 00:56:24.200
real apps with this, they should be considering


00:56:24.200 --> 00:56:26.520
these extensions or plugins, right?


00:56:26.520 --> 00:56:27.480
- Yeah, definitely.


00:56:27.480 --> 00:56:30.520
- Yeah, so Phil on the audience has an idea.


00:56:30.520 --> 00:56:32.120
It says, "Less intelligent, more basic.


00:56:32.120 --> 00:56:33.740
"This might provide an easy way to build


00:56:33.740 --> 00:56:36.360
"a personal media streaming service on my Raspberry Pi


00:56:36.360 --> 00:56:38.260
"and a remote control interface to control


00:56:38.260 --> 00:56:39.360
"and view from my phone."


00:56:39.360 --> 00:56:40.840
What do you think?


00:56:40.840 --> 00:56:42.340
- Definitely, go for it.


00:56:42.340 --> 00:56:48.600
- Cool, I'd say it sounds pretty possible.


00:56:48.600 --> 00:56:52.660
- Also, just-- - A little bit shorter.


00:56:52.660 --> 00:56:53.660
Yeah, go ahead, yeah, go ahead.


00:56:53.660 --> 00:56:55.420
- Sorry, Michael, just a quick note


00:56:55.420 --> 00:56:59.020
that we are very interested in everything


00:56:59.020 --> 00:57:00.340
that our community does.


00:57:00.340 --> 00:57:02.460
So if you have some cool way up,


00:57:02.460 --> 00:57:05.060
don't hesitate and bring it up.


00:57:05.060 --> 00:57:09.940
You can go to our GitHub discussions


00:57:09.940 --> 00:57:12.460
and then we have a discussion dedicated


00:57:12.460 --> 00:57:14.500
to our community showcase.


00:57:14.500 --> 00:57:18.800
- Yeah, definitely a good idea.


00:57:18.800 --> 00:57:21.400
A lot of things I wanna ask you about,


00:57:21.400 --> 00:57:24.100
but we're gonna run out of time.


00:57:24.100 --> 00:57:28.480
So let's talk about deployment.


00:57:28.480 --> 00:57:35.740
Is this a thing I have to buy in order to use H2O Wave?


00:57:35.740 --> 00:57:40.740
So suppose I have a virtual Linux server at Linode.


00:57:40.740 --> 00:57:45.180
I wanna run this there, could I do it?


00:57:45.180 --> 00:57:49.660
- Definitely, Wave is 100% free of charge.


00:57:49.660 --> 00:57:53.260
So you can use it even for commercial projects.


00:57:53.260 --> 00:57:54.700
Our license permits it.


00:57:54.700 --> 00:57:58.660
And you can deploy it wherever you want.


00:57:58.660 --> 00:58:01.540
We even have some blog posts


00:58:01.540 --> 00:58:04.980
about deploying Wave apps on Heroku.


00:58:04.980 --> 00:58:09.260
and we plan to also add for, let's say, AWS,


00:58:09.260 --> 00:58:12.500
EC2 or Linode or whatever.


00:58:12.500 --> 00:58:13.340
- Yeah.


00:58:13.340 --> 00:58:16.700
- And however, if you are enterprise,


00:58:16.700 --> 00:58:20.140
then the part of our business model


00:58:20.140 --> 00:58:24.780
is that we basically provide the cloud solution


00:58:24.780 --> 00:58:28.520
for app deployment for you.


00:58:28.520 --> 00:58:31.020
So that's about it, I would say.


00:58:31.020 --> 00:58:34.380
- Okay, so if I have like a team of data scientists


00:58:34.380 --> 00:58:39.380
and I don't want a dedicated H2O Wave DevOps person.


00:58:39.380 --> 00:58:43.380
I can just pay you all some sort of money


00:58:43.380 --> 00:58:48.380
and you'll set up some number of apps.


00:58:48.380 --> 00:58:49.980
How's the pricing work there?


00:58:49.980 --> 00:58:55.340
- I'm not sure because I'm not working


00:58:55.340 --> 00:58:58.060
on the cloud side of things,


00:58:58.060 --> 00:59:01.180
but just to give you maybe more,


00:59:01.180 --> 00:59:06.180
just to shed more light on our initial intentions with Wave,


00:59:06.180 --> 00:59:10.380
we wanted to solve basically three problems.


00:59:10.380 --> 00:59:13.740
One was building nice UIs.


00:59:13.740 --> 00:59:16.480
Second was authentication out of the box,


00:59:16.480 --> 00:59:18.060
because this is painful.


00:59:18.060 --> 00:59:20.300
And the third one was deployment,


00:59:20.300 --> 00:59:21.940
because if you are a data scientist,


00:59:21.940 --> 00:59:24.780
you probably don't know much about it, right?


00:59:24.780 --> 00:59:25.620
- Right.


00:59:25.620 --> 00:59:28.580
- So that's where our cloud platform comes to play,


00:59:28.580 --> 00:59:32.460
which allows you to easily deploy your web apps


00:59:32.460 --> 00:59:33.820
using CLI.


00:59:33.820 --> 00:59:36.680
It's basically like Heroku, let's say.


00:59:36.680 --> 00:59:37.520
- Cool.


00:59:37.520 --> 00:59:39.920
So your business model is basically,


00:59:39.920 --> 00:59:43.380
H2O Wave is free, open source,


00:59:43.380 --> 00:59:44.700
people can deploy it where they want,


00:59:44.700 --> 00:59:47.540
but if they don't wanna manage the running


00:59:47.540 --> 00:59:50.460
and upgrading and backups and all that,


00:59:50.460 --> 00:59:53.860
they can buy that as a service from you.


00:59:53.860 --> 00:59:55.100
- Exactly.


00:59:55.100 --> 00:59:56.340
- Yeah, that sounds fair.


00:59:58.260 --> 01:00:00.980
Is it hard to set up if I want to host it myself?


01:00:00.980 --> 01:00:03.240
- Well, not really.


01:00:03.240 --> 01:00:07.600
Basically, the simplest thing that you need to do


01:00:07.600 --> 01:00:12.600
is just hit the Wave Run and then your app.py.


01:00:12.600 --> 01:00:17.280
And that should basically run your application,


01:00:17.280 --> 01:00:20.020
you expose your correct ports, and that's it.


01:00:20.020 --> 01:00:22.040
And we also have--


01:00:22.040 --> 01:00:26.300
- I suppose I could put it behind Nginx successfully.


01:00:28.240 --> 01:00:30.400
- Yes, that's also possible.


01:00:30.400 --> 01:00:31.680
- I do gotta do something special


01:00:31.680 --> 01:00:34.140
for like the WebSocket aspect of it.


01:00:34.140 --> 01:00:37.280
- I don't think so because--


01:00:37.280 --> 01:00:38.760
- I don't think so either.


01:00:38.760 --> 01:00:41.920
- Because you just need to expose the Wave server part,


01:00:41.920 --> 01:00:44.840
the Wave app application part


01:00:44.840 --> 01:00:46.440
doesn't need to be exposed at all.


01:00:46.440 --> 01:00:49.200
And since Wave server is the one that handles WebSockets,


01:00:49.200 --> 01:00:50.960
then it should work.


01:00:50.960 --> 01:00:52.680
- Right, I think it just tells the browser,


01:00:52.680 --> 01:00:55.360
hey, we're upgrading the WebSockets, let's keep going.


01:00:55.360 --> 01:00:58.400
and that should go through Nginx, I would guess.


01:00:58.400 --> 01:01:01.360
Okay, that way, like I could do, say, open as,


01:01:01.360 --> 01:01:03.120
I could do let's encrypt over


01:01:03.120 --> 01:01:07.260
and all that management stuff at the Nginx level.


01:01:07.260 --> 01:01:11.320
- Yes, exactly.


01:01:11.320 --> 01:01:13.080
- Yeah, this sounds good.


01:01:13.080 --> 01:01:14.720
The reason I ask is I know there's a bunch


01:01:14.720 --> 01:01:17.400
of data scientists who don't wanna do that,


01:01:17.400 --> 01:01:22.000
but there's also people like me who are mostly programmers,


01:01:22.000 --> 01:01:23.960
but have a business with a bunch of dashboards


01:01:23.960 --> 01:01:25.960
that might be cool to build.


01:01:25.960 --> 01:01:28.720
And I've already got eight servers,


01:01:28.720 --> 01:01:31.920
a bunch of stuff I could easily host it on one of them.


01:01:31.920 --> 01:01:35.040
You know, so for me, I could set it up and use it.


01:01:35.040 --> 01:01:38.360
Like I'm asking in a indirect but more broad sense,


01:01:38.360 --> 01:01:40.760
like how is, you know, this is useful for people


01:01:40.760 --> 01:01:43.160
beyond just the traditional,


01:01:43.160 --> 01:01:47.080
I want slightly more than Jupyter crowd, right?


01:01:47.080 --> 01:01:48.280
- Yes, exactly.


01:01:48.280 --> 01:01:51.160
And we even think that it might be useful


01:01:51.160 --> 01:01:56.160
for maybe people like you who are more of a software engineer.


01:01:56.160 --> 01:02:00.960
My boss likes to say that we would like to compete


01:02:00.960 --> 01:02:04.840
with Django, although our,


01:02:04.840 --> 01:02:10.880
it's not really direct competition, let's say, I would say,


01:02:10.880 --> 01:02:15.880
because Django requires you to know HTML


01:02:15.880 --> 01:02:19.340
and CSS and JavaScript, whereas we don't.


01:02:19.340 --> 01:02:22.700
but at the people side,


01:02:22.700 --> 01:02:26.740
we want to target also Python developers.


01:02:26.740 --> 01:02:27.580
- Sure.


01:02:27.580 --> 01:02:31.180
If you're doing pure HTML,


01:02:31.180 --> 01:02:33.740
which Django serves up,


01:02:33.740 --> 01:02:35.660
you can start bringing in designers


01:02:35.660 --> 01:02:37.500
and front end people, right?


01:02:37.500 --> 01:02:41.580
There's a different kind of app that often gets built,


01:02:41.580 --> 01:02:44.020
but, or can be built,


01:02:44.020 --> 01:02:47.860
but especially if you're talking about businesses,


01:02:47.860 --> 01:02:52.180
80% of the apps that they actually build are just like forms over data.


01:02:52.180 --> 01:02:56.900
I need to see what's in the database, select a thing, filter thing, click,


01:02:56.900 --> 01:02:59.540
do something to it, and that's the entire app, right?


01:02:59.540 --> 01:03:05.220
And it sounds like these Wave apps might be a good fit for,


01:03:05.220 --> 01:03:09.700
it doesn't have to look like an Airbnb landing page.


01:03:09.700 --> 01:03:13.300
What it needs to do is show me this stuff and let people get to it quick


01:03:13.300 --> 01:03:16.740
and select them and make some actions real quickly, right?


01:03:16.740 --> 01:03:18.860
right, without spending weeks to do it.


01:03:18.860 --> 01:03:20.180
Exactly.


01:03:20.180 --> 01:03:21.900
Would it be good for those kinds of apps?


01:03:21.900 --> 01:03:23.100
Definitely.


01:03:23.100 --> 01:03:28.940
We also have success stories related to that because we had some, let's say,


01:03:28.940 --> 01:03:33.860
product people with some engineering skills or data science skills.


01:03:33.860 --> 01:03:40.540
And they needed some, let's say, small internal app that would allow them, for


01:03:40.540 --> 01:03:48.300
example, to bring people to give trial access to people to our cloud platform.


01:03:48.300 --> 01:03:53.420
And this needed to be done by back-end developers before because there was no


01:03:53.420 --> 01:04:01.300
infrastructure supporting it. So one of our product managers went ahead and


01:04:01.300 --> 01:04:10.060
built a web app that did exactly that. It listed all the pending trial users and


01:04:10.060 --> 01:04:14.780
and allow you to basically give them access.


01:04:14.780 --> 01:04:16.340
And that's it, right?


01:04:16.340 --> 01:04:19.300
It's a very small application, but it


01:04:19.300 --> 01:04:23.380
was building in no time with a tremendous value.


01:04:23.380 --> 01:04:24.860
So definitely.


01:04:24.860 --> 01:04:26.660
And you have all the widgets you need.


01:04:26.660 --> 01:04:27.780
You've got buttons.


01:04:27.780 --> 01:04:32.220
You can type in various things.


01:04:32.220 --> 01:04:34.220
You can sort of build up this interaction, right?


01:04:34.220 --> 01:04:38.980
You've got dropdowns and search and the make


01:04:38.980 --> 01:04:41.380
happen type of buttons. Do you have a grid?


01:04:41.380 --> 01:04:44.280
Yes, it's called table.


01:04:44.280 --> 01:04:47.480
If you if you will search for it.


01:04:47.480 --> 01:04:51.980
And it's one of the


01:04:51.980 --> 01:04:55.380
one of the search. There you go.


01:04:55.380 --> 01:04:56.980
Yeah.


01:04:56.980 --> 01:05:01.880
And basically this is one of the fundamental


01:05:01.880 --> 01:05:06.280
components for data scientists, right? Because you want to


01:05:06.280 --> 01:05:08.780
showcase your data sets and


01:05:08.780 --> 01:05:10.940
This is like the perfect component for it.


01:05:10.940 --> 01:05:13.220
- Mm-hmm, yeah.


01:05:13.220 --> 01:05:16.900
Even have little cool circular progress bars,


01:05:16.900 --> 01:05:19.440
which is, those are really nice looking widgets.


01:05:19.440 --> 01:05:22.400
Yeah, very good.


01:05:22.400 --> 01:05:23.660
And then I guess you even have,


01:05:23.660 --> 01:05:28.580
it was a page that was filtering, but yeah, very, very cool.


01:05:28.580 --> 01:05:31.540
- Yes, we support search, filter, sort,


01:05:31.540 --> 01:05:33.100
even pagination if you want,


01:05:33.100 --> 01:05:36.220
and have really a lot of data.


01:05:36.220 --> 01:05:37.260
- Yeah.


01:05:37.260 --> 01:05:38.640
We didn't even really get a chance


01:05:38.640 --> 01:05:42.580
to go through all the widgets.


01:05:42.580 --> 01:05:48.860
But you've got most things I can imagine you want to use


01:05:48.860 --> 01:05:51.460
to build an app.


01:05:51.460 --> 01:05:53.020
You've got a color picker.


01:05:53.020 --> 01:05:56.260
You've got choice groups like a radio button, I'm presuming.


01:05:56.260 --> 01:05:58.460
You've got images.


01:05:58.460 --> 01:06:01.620
You've got file upload.


01:06:01.620 --> 01:06:04.340
Do you have a video player?


01:06:04.340 --> 01:06:07.380
- Not yet, but it should land soon


01:06:07.380 --> 01:06:11.460
because we are working on a video annotator component


01:06:11.460 --> 01:06:15.100
which should basically be also usable as a video player.


01:06:15.100 --> 01:06:18.620
- Okay, so you have a text annotator


01:06:18.620 --> 01:06:20.220
and this would be kind of the same thing


01:06:20.220 --> 01:06:22.300
and also an image annotator.


01:06:22.300 --> 01:06:24.520
That's on the ML side where you say,


01:06:24.520 --> 01:06:28.100
"Here's the thing I'm gonna feed my model.


01:06:28.100 --> 01:06:31.980
"Tell it that this is a person and that is a cat.


01:06:31.980 --> 01:06:33.980
"Don't let it think the cat is a person."


01:06:33.980 --> 01:06:35.920
- Whatever, right?


01:06:35.920 --> 01:06:37.560
- Yes, exactly.


01:06:37.560 --> 01:06:38.400
- Okay.


01:06:38.400 --> 01:06:40.580
Okay, yeah, cool.


01:06:40.580 --> 01:06:42.800
So you'll probably have the video player


01:06:42.800 --> 01:06:45.100
as a building block there, right?


01:06:45.100 --> 01:06:47.400
- Yes.


01:06:47.400 --> 01:06:48.960
- That sounds fun.


01:06:48.960 --> 01:06:52.640
Okay, any other widgets you wanna give a quick shout out to?


01:06:52.640 --> 01:06:55.020
I said that, I mean, there's a whole host of plotting.


01:06:55.020 --> 01:06:57.920
I guess also you can integrate with things like Altair


01:06:57.920 --> 01:06:59.280
and Plotly and Matplotlib.


01:06:59.280 --> 01:07:01.480
You don't have to stick with just your widgets.


01:07:01.480 --> 01:07:04.720
- Yes, and you can even go to overlay sections


01:07:04.720 --> 01:07:07.400
and we have things like dialogues,


01:07:07.400 --> 01:07:10.980
sidebars, et cetera, notification bars,


01:07:10.980 --> 01:07:13.200
whatever you can think of.


01:07:13.200 --> 01:07:17.920
And if there is something that you need and is not there,


01:07:17.920 --> 01:07:20.020
you can always file a feature request.


01:07:20.020 --> 01:07:24.320
- Yep, and that'll land on your desk or on your screen


01:07:24.320 --> 01:07:26.820
and you'll think about it, perfect.


01:07:26.820 --> 01:07:30.280
Well, it certainly looks like a capable platform


01:07:30.280 --> 01:07:32.640
and ability to take it and just go run with it


01:07:32.640 --> 01:07:35.480
and deploy it, pretty excellent.


01:07:35.480 --> 01:07:38.480
And if people out there and they don't want to deploy it,


01:07:38.480 --> 01:07:41.260
then you have a business for them, business offering.


01:07:41.260 --> 01:07:43.520
- Yes, that's right.


01:07:43.520 --> 01:07:45.240
- Yeah, yeah, very cool.


01:07:45.240 --> 01:07:47.080
All right, real quickly,


01:07:47.080 --> 01:07:50.360
'cause like I said, we're getting short on time, two things.


01:07:50.360 --> 01:07:54.240
Let me pull up the actual app here.


01:07:54.240 --> 01:07:57.440
So you have themes, right?


01:07:59.200 --> 01:08:03.760
like five or six different ways in which your site can look and you can just apply a theme or


01:08:03.760 --> 01:08:10.880
you can create custom themes or if you want to go crazy you can actually include custom CSS right?


01:08:10.880 --> 01:08:19.280
Yes but you probably most likely don't want to do that but if you want to you are free to go.


01:08:19.280 --> 01:08:28.000
Okay yeah there's a way to create a UI widget that is a meta head element where you can say


01:08:28.000 --> 01:08:30.260
they include this JavaScript either off your server


01:08:30.260 --> 01:08:33.200
or off a CBN or CSS?


01:08:33.200 --> 01:08:35.800
And also the other question,


01:08:35.800 --> 01:08:38.560
the other thing I wanna touch on is JavaScript support.


01:08:38.560 --> 01:08:42.440
- Yes, so basically we support


01:08:42.440 --> 01:08:44.580
arbitrary JavaScript as well.


01:08:44.580 --> 01:08:48.040
You just include your script as if you did in,


01:08:48.040 --> 01:08:51.040
let's say Django or whatever


01:08:51.040 --> 01:08:54.280
of these other server-side frameworks


01:08:54.280 --> 01:08:56.520
and you are good to go.


01:08:57.640 --> 01:09:02.320
The example should be called inline script or script,


01:09:02.320 --> 01:09:03.160
if you...


01:09:03.160 --> 01:09:09.040
Yes, and whatever you wish.


01:09:09.040 --> 01:09:09.880
- There we go.


01:09:09.880 --> 01:09:10.700
How about this?


01:09:10.700 --> 01:09:15.540
Yeah, so what's interesting is there's a way to set up


01:09:15.540 --> 01:09:19.320
in JavaScript to push back into the Wave app


01:09:19.320 --> 01:09:23.600
and trigger that function to run with new arguments, right?


01:09:23.600 --> 01:09:24.660
- Yes, exactly.


01:09:24.660 --> 01:09:27.780
So that's how you can basically bridge the gap


01:09:27.780 --> 01:09:29.500
between JavaScript and Python.


01:09:29.500 --> 01:09:33.300
You can send your data back to Python.


01:09:33.300 --> 01:09:36.140
- You just say wave.emit in the event


01:09:36.140 --> 01:09:38.980
and then arguments basically, right?


01:09:38.980 --> 01:09:39.820
- Exactly.


01:09:39.820 --> 01:09:44.620
- Okay, well, it's always nice to have these escape hatches.


01:09:44.620 --> 01:09:48.460
It's 85% of what I need.


01:09:48.460 --> 01:09:51.000
I just need a little bit, something different here.


01:09:51.000 --> 01:09:53.180
And if I could just put two lines of JavaScript,


01:09:53.180 --> 01:09:55.660
I know I could get there, or I need to style this just


01:09:55.660 --> 01:09:57.940
a little bit differently.


01:09:57.940 --> 01:09:58.440
Yeah.


01:09:58.440 --> 01:09:59.620
Exactly.


01:09:59.620 --> 01:10:01.580
Cool.


01:10:01.580 --> 01:10:02.260
All right, Martin.


01:10:02.260 --> 01:10:06.260
Well, very cool project that you're working on here.


01:10:06.260 --> 01:10:07.900
Congrats on getting it out there.


01:10:07.900 --> 01:10:10.380
It looks like it's pretty popular.


01:10:10.380 --> 01:10:12.420
People are definitely digging it.


01:10:12.420 --> 01:10:17.740
And also, I love the Command-K stuff


01:10:17.740 --> 01:10:21.660
that you have here on your home page,


01:10:21.660 --> 01:10:24.300
where you can just instantly jump in


01:10:24.300 --> 01:10:26.620
and like search around, that's pretty cool.


01:10:26.620 --> 01:10:31.340
But 3000 GitHub stars, looks like a cool framework.


01:10:31.340 --> 01:10:34.180
Not exactly a direct head-to-head competitor


01:10:34.180 --> 01:10:37.580
Django and Flask, but not that far off either, right?


01:10:37.580 --> 01:10:40.820
- Not yet, but let's hope that one day.


01:10:40.820 --> 01:10:43.540
- Give it a year or two, okay, cool.


01:10:43.540 --> 01:10:44.820
I love it.


01:10:44.820 --> 01:10:46.140
All right, now, before we get out of here,


01:10:46.140 --> 01:10:47.700
got the final two questions for you.


01:10:47.700 --> 01:10:51.140
If we're gonna write some code, what editor do you use?


01:10:51.140 --> 01:10:55.960
I prefer VS Code with the wonderful Vim extension.


01:10:55.960 --> 01:10:58.460
I cannot live without it anymore.


01:10:58.460 --> 01:11:01.440
However, I do think that PyCharm


01:11:01.440 --> 01:11:03.860
has much better language support.


01:11:03.860 --> 01:11:06.980
So, but I prefer VS Code


01:11:06.980 --> 01:11:09.680
because I need to jump between multiple languages.


01:11:09.680 --> 01:11:12.280
- Cool, got it.


01:11:12.280 --> 01:11:16.020
And I'm sure that you run the Wave extension or plugin.


01:11:16.020 --> 01:11:18.480
There as well, right?


01:11:18.480 --> 01:11:19.920
- Yes, of course.


01:11:19.920 --> 01:11:20.760
- Of course.


01:11:20.760 --> 01:11:23.040
- Is there a notable PyPI package,


01:11:23.040 --> 01:11:25.840
something you find interesting or you want to recommend?


01:11:25.840 --> 01:11:30.720
- There are many, of course,


01:11:30.720 --> 01:11:35.120
but maybe one that I would like to give a shout out to


01:11:35.120 --> 01:11:37.420
is Playwright.


01:11:37.420 --> 01:11:42.420
And that's basically end-to-end testing framework,


01:11:42.420 --> 01:11:45.660
something like Cypress.


01:11:45.660 --> 01:11:47.480
But what I found it,


01:11:49.100 --> 01:11:51.900
I found that it can be used for much more


01:11:51.900 --> 01:11:54.220
than just end-to-end testing.


01:11:54.220 --> 01:11:57.220
We use it for visual regression testing,


01:11:57.220 --> 01:12:01.900
we use it for generating our imagery into documentation,


01:12:01.900 --> 01:12:06.900
and I have even done some load tests using that as well.


01:12:06.900 --> 01:12:10.940
So it's a pretty versatile tool.


01:12:10.940 --> 01:12:14.980
- Yeah, it's like the new Selenium.


01:12:14.980 --> 01:12:16.260
- Exactly.


01:12:16.260 --> 01:12:17.100
- Yeah.


01:12:18.040 --> 01:12:22.800
I did interview Andy Knight three, four months ago


01:12:22.800 --> 01:12:24.000
about this.


01:12:24.000 --> 01:12:26.040
Playwright is really neat.


01:12:26.040 --> 01:12:28.680
If I had to do visual testing or testing


01:12:28.680 --> 01:12:31.080
where I can interact with the UI,


01:12:31.080 --> 01:12:33.080
definitely what I would pick these days.


01:12:33.080 --> 01:12:33.920
- Yes.


01:12:33.920 --> 01:12:36.520
- Excellent.


01:12:36.520 --> 01:12:39.120
All right, Martin, final call to action.


01:12:39.120 --> 01:12:42.200
People want to get started with Wave.


01:12:42.200 --> 01:12:43.040
What do they do?


01:12:43.040 --> 01:12:46.640
- They can either go to our docs,


01:12:46.640 --> 01:12:49.040
which is a wave.h2o.ai,


01:12:49.040 --> 01:12:54.040
or they can start on our GitHub repository


01:12:54.040 --> 01:12:58.680
and they will find their way there, I believe.


01:12:58.680 --> 01:13:01.360
And maybe just a quick note,


01:13:01.360 --> 01:13:04.160
we are participating in Hacktoberfest.


01:13:04.160 --> 01:13:06.640
So if you feel like you would like to contribute


01:13:06.640 --> 01:13:09.500
to open source, then you are more than welcome.


01:13:09.500 --> 01:13:12.200
- Nice, okay.


01:13:12.200 --> 01:13:15.200
I'm sure a lot of people are familiar with Hacktoberfest,


01:13:15.200 --> 01:13:18.480
maybe some aren't. What's the story there?


01:13:18.480 --> 01:13:24.320
So basically, October 1st is a month-long celebration of open source,


01:13:24.320 --> 01:13:31.440
and it encourages people to contribute back to open source. And if they do four


01:13:31.440 --> 01:13:38.640
valid pull requests, then they might be eligible for a swag or t-shirt.


01:13:39.680 --> 01:13:43.280
Cool. And it is October, recording on October 3rd.


01:13:43.280 --> 01:13:46.360
So awesome. Get out there and be part of it.


01:13:46.360 --> 01:13:47.720
That sounds fun.


01:13:47.720 --> 01:13:49.560
Well, Wave sounds like a really cool framework.


01:13:49.560 --> 01:13:53.080
We have so many choices, and I love that it takes advantage


01:13:53.080 --> 01:13:56.080
of some of these modern Python ideas like async and await


01:13:56.080 --> 01:13:58.200
and whatever else you want to bring into it.


01:13:58.200 --> 01:14:00.080
So very cool work.


01:14:00.080 --> 01:14:02.480
Thanks for being on the show to share it with us.


01:14:02.480 --> 01:14:04.400
- Thanks for having me, Michael.


01:14:04.400 --> 01:14:06.160
- Yeah, you bet. Bye.


01:14:06.160 --> 01:14:07.000
- Bye.


01:14:07.000 --> 01:14:17.000
[BLANK_AUDIO]

