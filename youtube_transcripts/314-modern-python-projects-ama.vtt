WEBVTT

00:00:00.000 --> 00:00:03.920
- Hey, everyone out there.


00:00:03.920 --> 00:00:05.760
Thank you so much for being here today.


00:00:05.760 --> 00:00:08.400
It's exciting to have you here in the live stream


00:00:08.400 --> 00:00:11.640
or if you're watching later, watching the record.


00:00:11.640 --> 00:00:14.320
So Sebastian, welcome.


00:00:14.320 --> 00:00:17.200
It's great to have you part of this, Ask Me Anything.


00:00:17.200 --> 00:00:19.480
In fact, it's your Ask Me Anything, really.


00:00:19.480 --> 00:00:22.760
- Thank you, yeah, I'm excited to be here.


00:00:22.760 --> 00:00:24.520
- Yeah, of course, I'll give my thoughts as well,


00:00:24.520 --> 00:00:28.400
but you've done a lot of thinking about tooling


00:00:28.400 --> 00:00:29.880
and putting the right tools together


00:00:29.880 --> 00:00:33.140
and what maybe constitutes what you might call


00:00:33.140 --> 00:00:35.540
a modern Python project,


00:00:35.540 --> 00:00:39.140
or the tool chain of a modern Python developer.


00:00:39.140 --> 00:00:41.460
And there's a couple of things


00:00:41.460 --> 00:00:42.580
that we've already done together


00:00:42.580 --> 00:00:44.280
that are maybe worth calling out


00:00:44.280 --> 00:00:46.380
that we'll build on here today.


00:00:46.380 --> 00:00:49.060
So a while ago, I guess, what was this?


00:00:49.060 --> 00:00:53.780
Oh my gosh, this was back last year, August 29th, 2020.


00:00:53.780 --> 00:00:56.100
You were on Talk Python, you came on and talked


00:00:56.100 --> 00:00:58.100
about the modern Python developers toolkit.


00:00:58.100 --> 00:00:59.860
And then we talked a little bit after that


00:00:59.860 --> 00:01:01.460
and said, "You know, it would be really cool actually


00:01:01.460 --> 00:01:03.520
"to put a course like this together for people."


00:01:03.520 --> 00:01:04.900
So over at Talk Python Training,


00:01:04.900 --> 00:01:07.780
you created the Modern Python Projects course.


00:01:07.780 --> 00:01:09.560
This is almost a nine hour course


00:01:09.560 --> 00:01:12.120
that takes a lot of the ideas you mentioned


00:01:12.120 --> 00:01:15.460
there previously in the podcast and makes them concrete,


00:01:15.460 --> 00:01:20.140
makes it something that actually people can employ and use.


00:01:20.140 --> 00:01:22.520
And so yeah, those are some of the things


00:01:22.520 --> 00:01:24.620
that we've done together before,


00:01:24.620 --> 00:01:27.420
but we're just gonna take a broader view


00:01:27.420 --> 00:01:30.260
and talk about what this whole idea


00:01:30.260 --> 00:01:32.020
of modern Python projects might be.


00:01:32.020 --> 00:01:36.100
So maybe, yeah, so let's just kick it off


00:01:36.100 --> 00:01:40.260
with a quick high level overview.


00:01:40.260 --> 00:01:41.540
Like what are your thoughts?


00:01:41.540 --> 00:01:44.840
You know, what constitutes modern Python development?


00:01:44.840 --> 00:01:46.820
How has it changed over time?


00:01:46.820 --> 00:01:47.660
Things like that.


00:01:47.660 --> 00:01:50.620
Then we'll get to the people's individual questions.


00:01:50.620 --> 00:01:51.820
- Sure.


00:01:51.820 --> 00:01:53.100
Yeah, so as you mentioned,


00:01:53.100 --> 00:01:56.140
this whole idea started as a PyCon workshop


00:01:56.140 --> 00:02:00.580
where I wanted to share with people some ideas


00:02:00.580 --> 00:02:02.940
for tools that I've been using.


00:02:02.940 --> 00:02:05.300
And I know that a lot of other people have been using


00:02:05.300 --> 00:02:08.260
'cause I sometimes see people like start programming


00:02:08.260 --> 00:02:10.420
in Python and they still stick to using


00:02:10.420 --> 00:02:12.620
the default Python shell.


00:02:12.620 --> 00:02:15.740
And they don't know about many great tools


00:02:15.740 --> 00:02:17.540
that are in the ecosystem.


00:02:17.540 --> 00:02:20.220
- So you're like, "Oh, I used Idle to try to run this."


00:02:20.220 --> 00:02:21.140
And you're like, "Whoa, whoa, whoa,


00:02:21.140 --> 00:02:22.060
please don't use Idle."


00:02:22.060 --> 00:02:22.940
I mean, it's built in,


00:02:22.940 --> 00:02:25.780
but there's really more helpful options these days, right?


00:02:25.780 --> 00:02:27.340
Something like that.


00:02:27.340 --> 00:02:29.220
- Yeah, I mean, Python is really cool


00:02:29.220 --> 00:02:30.640
with the batteries included


00:02:30.640 --> 00:02:32.540
'cause you have a lot of things there,


00:02:32.540 --> 00:02:35.880
but at the same time, there are a lot of other different


00:02:35.880 --> 00:02:38.460
tools and projects that can make your life much, much easier


00:02:38.460 --> 00:02:41.860
and that's what I wanted to share with people.


00:02:41.860 --> 00:02:43.180
- Nice, and I would like to point out


00:02:43.180 --> 00:02:44.840
for people who maybe don't know,


00:02:44.840 --> 00:02:47.080
there's a lot of amazing tools


00:02:47.080 --> 00:02:50.580
that are not part of Python on purpose.


00:02:50.580 --> 00:02:52.260
And the reason they're not part of Python


00:02:52.260 --> 00:02:54.040
is not that they're amazing,


00:02:54.040 --> 00:02:57.100
it's that Python releases, it used to be every 18 months


00:02:57.100 --> 00:02:58.120
and now every 12 months.


00:02:58.120 --> 00:02:59.680
And once something goes into Python,


00:02:59.680 --> 00:03:01.920
it can't be taken out almost ever.


00:03:01.920 --> 00:03:05.240
So it's very hard to move fast and break things


00:03:05.240 --> 00:03:08.600
type of mentality with Python itself


00:03:08.600 --> 00:03:11.240
and the standard library and so on.


00:03:11.240 --> 00:03:13.780
But stuff outside of it can be much more rapid.


00:03:13.780 --> 00:03:16.640
For example, there was a conversation around


00:03:16.640 --> 00:03:19.040
with the core devs around making requests,


00:03:19.040 --> 00:03:22.000
the package part of Python as a better way to do


00:03:22.000 --> 00:03:26.000
because it's vastly a better way to do it than the built-in HTTP libraries.


00:03:26.000 --> 00:03:29.500
They decided not to put requests into Python itself


00:03:29.500 --> 00:03:33.740
because they said it would actually slow down and hamper requests


00:03:33.740 --> 00:03:36.740
and make it less valuable, and it's better to leave it


00:03:36.740 --> 00:03:38.340
as its own standalone thing.


00:03:38.340 --> 00:03:41.640
And I think that touches on a lot of what you're talking about, Sebastian,


00:03:41.640 --> 00:03:45.740
is that there's what's built into Python,


00:03:45.740 --> 00:03:49.240
and a lot of it is really good, but oftentimes there's better things outside,


00:03:49.240 --> 00:03:52.440
and they're not likely to be moved into Python


00:03:52.440 --> 00:03:53.560
for their own good.


00:03:53.560 --> 00:03:55.920
- Yeah, exactly.


00:03:55.920 --> 00:03:58.880
And since installing new packages or tools in Python


00:03:58.880 --> 00:04:00.920
is just one pip command away,


00:04:00.920 --> 00:04:04.960
it's very easy to add new tools, experiment with them.


00:04:04.960 --> 00:04:06.720
But at the same time, it's worth knowing


00:04:06.720 --> 00:04:09.520
which tools are kind of like the,


00:04:09.520 --> 00:04:12.520
backed up by the Python community,


00:04:12.520 --> 00:04:15.080
like which one are the most popular.


00:04:15.080 --> 00:04:17.440
- Right, what are the de facto primary ways?


00:04:17.440 --> 00:04:20.800
- Just like pytest, for example, would be a case there.


00:04:20.800 --> 00:04:21.640
- Exactly.


00:04:21.640 --> 00:04:22.460
- Yeah, okay.


00:04:22.460 --> 00:04:26.280
- Yeah, for example, I wanted to mention Cookie Cutter,


00:04:26.280 --> 00:04:29.440
'cause if you're looking for a way to start a new project,


00:04:29.440 --> 00:04:33.160
then you're wondering, no matter if it's a Django website


00:04:33.160 --> 00:04:34.680
or if it's a Python module,


00:04:34.680 --> 00:04:37.720
a lot of people know about Cookie Cutter templates,


00:04:37.720 --> 00:04:39.160
and they are a great way to start,


00:04:39.160 --> 00:04:42.280
because you use a template that many people use before you.


00:04:42.280 --> 00:04:44.760
It has a lot of sane defaults already set up for you,


00:04:44.760 --> 00:04:48.660
But if you never heard about cookie cutter templates,


00:04:48.660 --> 00:04:51.980
there is like no way you're gonna randomly find it.


00:04:51.980 --> 00:04:54.340
'Cause like cookie cutter doesn't even have Python


00:04:54.340 --> 00:04:55.180
in its name.


00:04:55.180 --> 00:04:56.900
So unless you know there is a tool for that,


00:04:56.900 --> 00:04:58.900
there is like no way for you to find it.


00:04:58.900 --> 00:05:00.660
- Right, exactly.


00:05:00.660 --> 00:05:01.940
But it's so super helpful.


00:05:01.940 --> 00:05:03.260
Okay, fantastic.


00:05:03.260 --> 00:05:05.020
Well, we have a bunch of questions


00:05:05.020 --> 00:05:08.000
from the ask us anything or ask you anything


00:05:08.000 --> 00:05:09.060
that we've already gotten


00:05:09.060 --> 00:05:10.460
'cause we sent out an email and said,


00:05:10.460 --> 00:05:12.540
"Hey, send us your questions."


00:05:12.540 --> 00:05:16.140
We're also, Norbert has a question here in chat,


00:05:16.140 --> 00:05:18.580
the live chat, which would you like to go with first?


00:05:18.580 --> 00:05:19.940
You wanna do the live chat question?


00:05:19.940 --> 00:05:22.780
You wanna pick some out of our previous ones


00:05:22.780 --> 00:05:24.700
so we make sure we get to them since they asked first.


00:05:24.700 --> 00:05:25.860
What are your thoughts?


00:05:25.860 --> 00:05:28.860
- So maybe go with the one that we got beforehand


00:05:28.860 --> 00:05:31.100
because there are some interesting questions


00:05:31.100 --> 00:05:32.860
that we picked up and I think they will be useful


00:05:32.860 --> 00:05:36.260
to more people and then we will do the live chat.


00:05:36.260 --> 00:05:38.100
- Yeah, all right, that sounds great.


00:05:38.100 --> 00:05:40.300
So folks out there, please keep putting your questions


00:05:40.300 --> 00:05:43.300
and follow up questions to what we're about to talk about


00:05:43.300 --> 00:05:45.260
in the live chat and we'll get to them.


00:05:45.260 --> 00:05:48.220
All right, so the first one is,


00:05:48.220 --> 00:05:51.740
what's the point of setting up something like PieENV,


00:05:51.740 --> 00:05:55.860
using VENV and so on, when you can just use Docker?


00:05:55.860 --> 00:05:57.760
- Yeah, so--


00:05:57.760 --> 00:05:59.220
- Maybe a little bit of background just for people


00:05:59.220 --> 00:06:02.260
who are like not really sure what all these things are


00:06:02.260 --> 00:06:04.340
and then the trade-offs.


00:06:04.340 --> 00:06:07.360
- Exactly, so PieENV is a tool that you can use


00:06:07.360 --> 00:06:09.620
to manage different Python versions on your computer.


00:06:09.620 --> 00:06:13.860
So for example, if you want to have Python 3.6, 3.7, 3.8,


00:06:13.860 --> 00:06:15.620
3.9 installed at the same time


00:06:15.620 --> 00:06:18.460
and easily switch between them, you can use that.


00:06:18.460 --> 00:06:22.820
And then VNV is a tool used to create virtual environments.


00:06:22.820 --> 00:06:26.540
So it's a way to isolate the dependencies of your project.


00:06:26.540 --> 00:06:29.220
So basically you would use PyEnv and VNV


00:06:29.220 --> 00:06:32.900
to isolate Python and Python packages.


00:06:32.900 --> 00:06:36.140
- Right, so Python is getting the version you want


00:06:36.140 --> 00:06:38.340
and then VNV is isolating that


00:06:38.340 --> 00:06:40.420
for a particular project, right?


00:06:40.420 --> 00:06:41.260
- Exactly.


00:06:41.260 --> 00:06:43.060
- Okay. - They work together.


00:06:43.060 --> 00:06:45.380
And then the same thing could be solved with Docker


00:06:45.380 --> 00:06:47.940
where you have like Docker image


00:06:47.940 --> 00:06:50.140
that you use to spin Docker containers


00:06:50.140 --> 00:06:52.460
and everything is isolated inside of it.


00:06:52.460 --> 00:06:55.740
So you have a specific Python version


00:06:55.740 --> 00:06:58.240
that you choose based on which Docker image you use.


00:06:58.240 --> 00:07:00.140
And then inside this Docker container,


00:07:00.140 --> 00:07:02.860
you install big packages and they are isolated


00:07:02.860 --> 00:07:06.800
from both your computer and other Docker images,


00:07:06.800 --> 00:07:07.820
Docker containers.


00:07:07.820 --> 00:07:13.000
And so coming back to the question, I actually use both.


00:07:13.000 --> 00:07:18.000
I use Docker in a lot of my projects and it's very convenient


00:07:18.000 --> 00:07:23.380
and especially if you want to later deploy your project


00:07:23.380 --> 00:07:25.600
or share it with your colleagues.


00:07:25.600 --> 00:07:29.080
But at the same time, I don't want to spin up a Docker image


00:07:29.080 --> 00:07:30.880
if I just want to run a Python script.


00:07:30.880 --> 00:07:35.040
So I still use pyenv to manage Python versions


00:07:35.040 --> 00:07:36.040
on my computer.


00:07:36.040 --> 00:07:40.200
So I can use pyenv to install,


00:07:40.200 --> 00:07:43.100
to change the global version of Python on my computer.


00:07:43.100 --> 00:07:46.720
And I saw that it's already useful for me


00:07:46.720 --> 00:07:50.520
'cause sometimes when I'm installing packages with Homebrew,


00:07:50.520 --> 00:07:51.440
by the way, I'm using Mac,


00:07:51.440 --> 00:07:54.000
so Homebrew is the package manager for Mac.


00:07:54.000 --> 00:07:55.200
- Yeah, I use Homebrew as well.


00:07:55.200 --> 00:07:58.360
And I think that's also part of the modern tool chain


00:07:58.360 --> 00:08:01.080
is that you have something that updates your tools.


00:08:01.080 --> 00:08:02.880
- Yeah, exactly. - Automatically, yeah.


00:08:02.880 --> 00:08:05.600
- And then each time it's installing something,


00:08:05.600 --> 00:08:08.600
I see that it's trying to install some Python version


00:08:08.600 --> 00:08:09.520
in the background.


00:08:09.520 --> 00:08:12.160
And at the beginning I was worried


00:08:12.160 --> 00:08:16.440
because it was messing up the global Python versions.


00:08:16.440 --> 00:08:18.720
But with PyEnv, I have Python versions


00:08:18.720 --> 00:08:20.040
separated from my system.


00:08:20.040 --> 00:08:22.040
So whatever Homebrew is messing up there,


00:08:22.040 --> 00:08:23.080
I don't really care.


00:08:23.080 --> 00:08:26.080
I have PyEnv that lives in a separate folder


00:08:26.080 --> 00:08:29.880
and it modifies the system path variables.


00:08:29.880 --> 00:08:32.360
So the separate folders are being read


00:08:32.360 --> 00:08:34.720
before the system Python.


00:08:34.720 --> 00:08:38.200
And that works in front of the homebrew.


00:08:38.200 --> 00:08:41.200
So I don't really care what's the system Python


00:08:41.200 --> 00:08:42.440
on my computer.


00:08:42.440 --> 00:08:46.080
By the way, Mac is still using 2.7.


00:08:46.080 --> 00:08:47.680
I don't care what homebrew is installing.


00:08:47.680 --> 00:08:50.600
I have IAMP and that works really flawlessly.


00:08:50.600 --> 00:08:55.840
But Docker is also really great


00:08:55.840 --> 00:08:58.880
'cause if you want to start project


00:08:58.880 --> 00:09:00.240
using a different Python version,


00:09:00.240 --> 00:09:02.800
you just change one variable in the Docker file


00:09:02.800 --> 00:09:04.240
and that's it.


00:09:04.240 --> 00:09:05.080
- Yeah.


00:09:05.080 --> 00:09:08.080
- So there are many benefits to using that.


00:09:08.080 --> 00:09:09.280
Do you want to add something, Michael?


00:09:09.280 --> 00:09:14.280
- Yeah, well, I think Docker is really useful


00:09:14.280 --> 00:09:18.200
and I do use it some of the time,


00:09:18.200 --> 00:09:23.200
but it's not the first tool that I reach for


00:09:23.440 --> 00:09:26.800
Because a lot of times I don't need that complexity.


00:09:26.800 --> 00:09:28.800
You know, if I'm going to say, fire up something like,


00:09:28.800 --> 00:09:30.520
oh, I need Redis just like this,


00:09:30.520 --> 00:09:32.240
and I need Celery like that,


00:09:32.240 --> 00:09:35.160
and I need MongoDB like set up like that.


00:09:35.160 --> 00:09:36.040
And then I want to just make


00:09:36.040 --> 00:09:37.760
that whole package work together.


00:09:37.760 --> 00:09:40.160
And I really would like it to be exactly on Ubuntu,


00:09:40.160 --> 00:09:42.280
which is the way I run things in production.


00:09:42.280 --> 00:09:44.200
Then I would definitely reach for Docker.


00:09:44.200 --> 00:09:47.480
But if I just want to just develop one of my web apps


00:09:47.480 --> 00:09:49.480
or some API I'm working on,


00:09:49.480 --> 00:09:52.600
chances are running it locally is totally good.


00:09:52.600 --> 00:09:55.520
and it's just fewer things in the mix to worry about.


00:09:55.520 --> 00:09:57.160
So to me, a virtual environment


00:09:57.160 --> 00:09:59.120
seems totally good for that.


00:09:59.120 --> 00:10:03.700
To me, it's easy to see what everyone is super excited about


00:10:03.700 --> 00:10:05.500
and then go, "Oh, I have to do that as well."


00:10:05.500 --> 00:10:07.980
And that makes sense when there's enough complexity


00:10:07.980 --> 00:10:09.820
or you're in the same sort of situation


00:10:09.820 --> 00:10:11.180
that they're also excited about,


00:10:11.180 --> 00:10:13.060
but it doesn't mean it applies everywhere.


00:10:13.060 --> 00:10:15.900
Like if I just wanted to do basic Jupyter work


00:10:15.900 --> 00:10:17.420
on something that I could run on my machine,


00:10:17.420 --> 00:10:20.420
I wouldn't necessarily fire up Docker to make that happen.


00:10:20.420 --> 00:10:21.240
- Yeah, exactly.


00:10:21.240 --> 00:10:23.960
- I would also point out that this question is specific


00:10:23.960 --> 00:10:28.240
about using Docker to replace Py and virtual environments.


00:10:28.240 --> 00:10:30.920
And it's not about using Docker in general.


00:10:30.920 --> 00:10:33.440
I think we have another question coming up later


00:10:33.440 --> 00:10:35.120
about using Docker in general.


00:10:35.120 --> 00:10:36.560
- Yeah, yeah, exactly.


00:10:36.560 --> 00:10:39.880
All right, another thing worth pointing out


00:10:39.880 --> 00:10:41.140
while we have this on the screen


00:10:41.140 --> 00:10:44.600
is it doesn't work exactly on Windows, right?


00:10:44.600 --> 00:10:49.600
But there is a pyenv-win, W-I-N.


00:10:49.600 --> 00:10:51.060
Yeah. - Yeah.


00:10:51.060 --> 00:10:54.200
So the question is, what's the benefit of using that


00:10:54.200 --> 00:10:56.960
on Windows over say, Conda?


00:10:56.960 --> 00:10:59.800
And I feel like almost it's like a general question.


00:10:59.800 --> 00:11:02.920
What's the advantages of something like pyenv


00:11:02.920 --> 00:11:07.140
plus virtual environments and pip over Conda almost?


00:11:07.140 --> 00:11:11.960
- So I would say if you're using Conda on Windows


00:11:11.960 --> 00:11:15.400
or whatever operating system and you are happy with it,


00:11:15.400 --> 00:11:19.160
I don't really see any reason to switch to something else.


00:11:19.160 --> 00:11:21.560
I mean, Conda is like this one huge tool


00:11:21.560 --> 00:11:23.880
that you can use to manage both Python versions,


00:11:23.880 --> 00:11:27.440
dependencies, installing packages and stuff like that.


00:11:27.440 --> 00:11:29.800
So I would say, if you're happy, just stick with it.


00:11:29.800 --> 00:11:33.360
But if you're not using Conda and for some reason


00:11:33.360 --> 00:11:35.780
you don't want to use it, but you're on Windows


00:11:35.780 --> 00:11:38.320
and you want to install different versions of Python,


00:11:38.320 --> 00:11:41.240
then PyEnv Win is a great tool to do that.


00:11:41.240 --> 00:11:43.600
'Cause unlike Conda, it's very specific.


00:11:43.600 --> 00:11:46.280
It's just for managing Python versions.


00:11:46.280 --> 00:11:50.280
it doesn't do a lot of other things that Conda does.


00:11:50.280 --> 00:11:52.880
But if you're looking for this specific type of tool,


00:11:52.880 --> 00:11:54.920
then I would stick with PyAndWin.


00:11:54.920 --> 00:12:00.320
- Yeah, I think one of the things


00:12:00.320 --> 00:12:05.320
that I would point out here is that the Conda packages


00:12:05.320 --> 00:12:09.080
to some degree, and certainly the official Anaconda version,


00:12:09.080 --> 00:12:12.160
not necessarily the Conda Forge version,


00:12:12.160 --> 00:12:15.360
they do lag a little in version number


00:12:15.360 --> 00:12:16.800
to what is out there.


00:12:16.800 --> 00:12:20.840
You know, something gets published by the author


00:12:20.840 --> 00:12:23.760
of that package to pip, the PyPI immediately.


00:12:23.760 --> 00:12:25.440
And then eventually, you know,


00:12:25.440 --> 00:12:28.120
once it's been verified to be working well and all that,


00:12:28.120 --> 00:12:30.400
it gets brought into Anaconda.


00:12:30.400 --> 00:12:32.720
And generally, that's not a big deal,


00:12:32.720 --> 00:12:35.720
but sometimes if you want to be on the absolute latest,


00:12:35.720 --> 00:12:36.840
there's a little bit of a delay.


00:12:36.840 --> 00:12:39.660
And the place where absolute latest matters the most


00:12:39.660 --> 00:12:41.620
is if there's a security vulnerability


00:12:41.620 --> 00:12:45.540
in an API framework or a web framework,


00:12:45.540 --> 00:12:47.500
you want to update, if something like that


00:12:47.500 --> 00:12:48.660
were to come out, say with Django,


00:12:48.660 --> 00:12:50.480
which has happened recently,


00:12:50.480 --> 00:12:53.080
you would like to update to the new version immediately


00:12:53.080 --> 00:12:55.660
before anybody starts poking around in those things.


00:12:55.660 --> 00:12:59.620
And things like Honda and these other more verified places


00:12:59.620 --> 00:13:01.020
sometimes lag behind.


00:13:01.020 --> 00:13:03.780
And if it takes a little bit longer to get


00:13:03.780 --> 00:13:07.180
the latest notebook, UI or whatever, who cares?


00:13:07.180 --> 00:13:09.940
But if there's an active exploit


00:13:09.940 --> 00:13:12.420
on the internet against my thing, excuse me,


00:13:12.420 --> 00:13:14.980
then you definitely are going to want


00:13:14.980 --> 00:13:17.620
the latest, latest, latest as soon as possible.


00:13:17.620 --> 00:13:19.660
So I think that's one thing to consider


00:13:19.660 --> 00:13:20.860
if that's your world.


00:13:20.860 --> 00:13:22.760
I know that's something I've run into.


00:13:22.760 --> 00:13:26.820
Yeah, all right.


00:13:26.820 --> 00:13:29.220
Let's see, a couple of comments.


00:13:29.220 --> 00:13:34.060
Let's take a couple of things out of the livestream comments


00:13:34.060 --> 00:13:36.500
just because they're follow-ups, right?


00:13:36.500 --> 00:13:39.740
So one question is, what's the best homebrew equivalent


00:13:39.740 --> 00:13:40.700
for Windows.


00:13:40.700 --> 00:13:43.820
I've got some thoughts, but go ahead, Sebastian.


00:13:43.820 --> 00:13:44.660
If you got any.


00:13:44.660 --> 00:13:45.700
- I'm not a Windows user.


00:13:45.700 --> 00:13:46.700
I have no idea.


00:13:46.700 --> 00:13:49.440
I've heard about Chocolaty,


00:13:49.440 --> 00:13:52.020
but I only heard about it, sorry.


00:13:52.020 --> 00:13:52.860
- Yeah.


00:13:52.860 --> 00:13:53.680
So,


00:13:53.680 --> 00:13:57.140
Encrusted says


00:13:57.140 --> 00:14:01.400
Chocolaty, and then Scoop and Wingit.


00:14:01.400 --> 00:14:03.340
I don't know about Scoop or Wingit,


00:14:03.340 --> 00:14:06.500
but Chocolaty is very much like Homebrew,


00:14:06.500 --> 00:14:07.980
and I'm familiar with that one,


00:14:07.980 --> 00:14:09.120
and that one works pretty well.


00:14:09.120 --> 00:14:11.960
So that's pretty cool.


00:14:11.960 --> 00:14:13.480
So I definitely recommend if you're on Windows,


00:14:13.480 --> 00:14:14.920
check out Chocolaty.


00:14:14.920 --> 00:14:16.920
If you're on Mac, check out Homebrew.


00:14:16.920 --> 00:14:19.580
And then, a lot of the Linux distributions


00:14:19.580 --> 00:14:20.760
already actually have this, right?


00:14:20.760 --> 00:14:23.560
Like apt on Ubuntu and so on.


00:14:23.560 --> 00:14:24.960
You don't need to go searching for those


00:14:24.960 --> 00:14:27.320
'cause that's the primary way.


00:14:27.320 --> 00:14:28.160
Yeah.


00:14:28.160 --> 00:14:30.800
And then, whoops.


00:14:30.800 --> 00:14:33.240
Finally, Mike Levin says,


00:14:33.240 --> 00:14:35.640
"The best Homebrew equivalent for Window


00:14:35.640 --> 00:14:37.920
"is an Ubuntu repo under WSL."


00:14:37.920 --> 00:14:39.480
Okay, that's an interesting one as well.


00:14:39.480 --> 00:14:40.880
But yeah, so you also have WSL,


00:14:40.880 --> 00:14:43.000
but then you have apt as well.


00:14:43.000 --> 00:14:43.880
All right, cool.


00:14:43.880 --> 00:14:44.720
Thank you everyone for that.


00:14:44.720 --> 00:14:47.860
And we'll get back to some of the main questions as well.


00:14:47.860 --> 00:14:54.800
So next one, Sebastian, is about poetry.


00:14:54.800 --> 00:14:57.440
I've been using setup.py in my Python projects,


00:14:57.440 --> 00:14:59.920
but I see a lot of tutorials recommending other tools


00:14:59.920 --> 00:15:02.120
like pip, env or poetry.


00:15:02.120 --> 00:15:03.400
Should you switch?


00:15:06.600 --> 00:15:14.600
So basically Poetry and pipenv can be used to manage projects.


00:15:14.600 --> 00:15:18.400
So they are much more than just like a setup.py replacement.


00:15:18.400 --> 00:15:22.200
Actually, pipenv is not a replacement for setup.py,


00:15:22.200 --> 00:15:25.160
but I will get to that in a moment.


00:15:25.160 --> 00:15:27.200
So basically, those are like bigger tools


00:15:27.200 --> 00:15:29.620
that you can use to manage your whole project.


00:15:29.620 --> 00:15:31.480
You can use it to add dependencies,


00:15:31.480 --> 00:15:32.920
to update dependencies.


00:15:32.920 --> 00:15:36.440
They will manage the virtual environments for you.


00:15:36.440 --> 00:15:39.440
so you don't have to activate anything and things like that.


00:15:39.440 --> 00:15:43.220
And with Poetry, you can also publish packages to pip,


00:15:43.220 --> 00:15:46.560
which is basically a replacement for setup.py.


00:15:46.560 --> 00:15:49.520
You don't need to have setup.py with Poetry,


00:15:49.520 --> 00:15:50.480
which is kind of convenient


00:15:50.480 --> 00:15:51.720
'cause I always have to Google


00:15:51.720 --> 00:15:55.200
what I should put in the setup.py.


00:15:55.200 --> 00:15:56.760
There is also a package called fleet


00:15:56.760 --> 00:15:59.240
if you want the lightweight replacement for setup.py,


00:15:59.240 --> 00:16:00.760
but that's an off topic.


00:16:03.200 --> 00:16:08.200
Yeah, so if you like using setup.py,


00:16:08.200 --> 00:16:10.920
and again, you don't have a real reason


00:16:10.920 --> 00:16:12.600
to switch to something else,


00:16:12.600 --> 00:16:14.840
I would say stick with setup.py


00:16:14.840 --> 00:16:18.080
'cause that's like the de facto way


00:16:18.080 --> 00:16:20.000
of doing things in Python.


00:16:20.000 --> 00:16:23.840
Setup.py is supported by Python itself.


00:16:23.840 --> 00:16:26.120
There is also this project, Toml,


00:16:26.120 --> 00:16:28.960
that is now supported with like recent pip,


00:16:28.960 --> 00:16:30.040
but for many years,


00:16:30.040 --> 00:16:33.640
about .py was the way of building packages.


00:16:33.640 --> 00:16:37.160
So I wouldn't just switch for the sake of switching,


00:16:37.160 --> 00:16:40.040
but if you're looking for a tool that can manage


00:16:40.040 --> 00:16:44.360
your whole project, then I would use either pipenv or poetry.


00:16:44.360 --> 00:16:47.640
And if you want to publish, then I would go with poetry.


00:16:47.640 --> 00:16:48.480
- Yeah.


00:16:48.480 --> 00:16:49.880
And I think you also want to consider,


00:16:49.880 --> 00:16:53.560
are you building a package or are you building an application


00:16:53.560 --> 00:16:55.320
because some of the things that you do differently,


00:16:55.320 --> 00:16:57.560
it's particularly around like pipenv,


00:16:58.880 --> 00:17:01.560
is a little bit more targeted at building applications


00:17:01.560 --> 00:17:03.760
than it is packages, from my understanding.


00:17:03.760 --> 00:17:06.160
- Yeah, exactly.


00:17:06.160 --> 00:17:10.760
And one thing to consider is that both Poetry and PIVENV


00:17:10.760 --> 00:17:13.720
will be an external dependency for your project.


00:17:13.720 --> 00:17:16.920
So if for some reason they break or stop being maintained,


00:17:16.920 --> 00:17:20.720
then you're gonna have to migrate to something else.


00:17:20.720 --> 00:17:24.920
While if you still use setup.py and requirements files,


00:17:24.920 --> 00:17:28.960
then all the tools are there when you install Python.


00:17:28.960 --> 00:17:29.800
It's not a big problem.


00:17:29.800 --> 00:17:30.840
- Yeah, that's a good point.


00:17:30.840 --> 00:17:33.920
But also, yeah, it's like a bootstrapping step


00:17:33.920 --> 00:17:34.760
to get started.


00:17:34.760 --> 00:17:37.360
So if you have set up PY,


00:17:37.360 --> 00:17:38.840
you don't need to install anything else


00:17:38.840 --> 00:17:41.480
to kind of like check it out and try it.


00:17:41.480 --> 00:17:45.480
Whereas, you know, if you have Poetry,


00:17:45.480 --> 00:17:47.560
the first thing you have to do with a new environment


00:17:47.560 --> 00:17:48.400
is set up Poetry,


00:17:48.400 --> 00:17:51.880
so then you can then initialize all the stuff, right?


00:17:51.880 --> 00:17:52.720
- Yeah, exactly.


00:17:52.720 --> 00:17:56.000
I think I was recording an episode for the courses


00:17:56.000 --> 00:17:59.380
with Poetry and the first package that I wanted to add


00:17:59.380 --> 00:18:01.360
was the latest pytest.


00:18:01.360 --> 00:18:03.160
And the first command I got was an error


00:18:03.160 --> 00:18:06.280
because Poetry already had an older version


00:18:06.280 --> 00:18:07.960
of pytest pinned down.


00:18:07.960 --> 00:18:11.320
So I had to like open the config file and remove it.


00:18:11.320 --> 00:18:14.440
But the first impression was kind of weird


00:18:14.440 --> 00:18:17.220
as you try to add the package and it breaks.


00:18:17.220 --> 00:18:19.040
But otherwise I would say it's a good tool


00:18:19.040 --> 00:18:20.440
if you like it, use it.


00:18:20.440 --> 00:18:23.700
but keep in mind that it's yet another dependency for you.


00:18:23.700 --> 00:18:27.080
- Okay, let me ask a follow-up


00:18:27.080 --> 00:18:30.720
from Encrusted on the live stream.


00:18:30.720 --> 00:18:33.500
What is the best way, if any,


00:18:33.500 --> 00:18:35.980
for distributing Python applications to non-developers?


00:18:35.980 --> 00:18:39.420
So this conversation of Poetry and pipenv,


00:18:39.420 --> 00:18:41.120
all that is for developers, right?


00:18:41.120 --> 00:18:43.980
- Yeah. - Yeah.


00:18:43.980 --> 00:18:46.240
So what's the story on,


00:18:46.240 --> 00:18:48.820
where's the icon thing I can put my doc


00:18:48.820 --> 00:18:51.300
or pin to my taskbar and let people click?


00:18:51.300 --> 00:18:53.300
What do I do there?


00:18:53.300 --> 00:18:55.260
- Yeah, that's a good question.


00:18:55.260 --> 00:18:57.700
I also covered this in the course


00:18:57.700 --> 00:18:59.540
'cause I was also looking for a way


00:18:59.540 --> 00:19:01.740
that you can distribute your Python application


00:19:01.740 --> 00:19:04.060
with people who don't know what Python is.


00:19:04.060 --> 00:19:06.420
And there is this PyInstaller package


00:19:06.420 --> 00:19:09.980
that you can use to create an executable files


00:19:09.980 --> 00:19:12.500
that contains all the dependencies.


00:19:12.500 --> 00:19:14.160
And it works really great.


00:19:14.160 --> 00:19:17.580
I was able to spin up a Windows machine,


00:19:17.580 --> 00:19:20.220
create an executable, then spin up another Windows machine


00:19:20.220 --> 00:19:22.500
without even Python installed, move it there,


00:19:22.500 --> 00:19:23.740
and it was working fine.


00:19:23.740 --> 00:19:26.580
It was using like a graphical user interface.


00:19:26.580 --> 00:19:30.740
The only downside I saw is that they are not cross compilers.


00:19:30.740 --> 00:19:34.020
So if you want to build an application for Windows,


00:19:34.020 --> 00:19:35.860
you have to compile it on Windows.


00:19:35.860 --> 00:19:37.420
If you want to build a Mac application,


00:19:37.420 --> 00:19:39.420
you have to do the same thing on Mac.


00:19:39.420 --> 00:19:43.460
But otherwise I would say PyInstaller is a really great way.


00:19:43.460 --> 00:19:46.140
Yeah, we have a comment about that.


00:19:46.140 --> 00:19:50.240
It's a really great way to build executable Python binaries.


00:19:50.240 --> 00:19:52.340
- Yeah, I agree.


00:19:52.340 --> 00:19:53.880
And so does Patrick Lobiel.


00:19:53.880 --> 00:19:56.340
Hey, Patrick, thanks for that.


00:19:56.340 --> 00:19:59.900
I'll also add one thing really quick to this.


00:19:59.900 --> 00:20:01.900
I really, really quickly,


00:20:01.900 --> 00:20:03.820
partly to show it as an example for people,


00:20:03.820 --> 00:20:06.700
and partly 'cause this is a thing that I do all the time.


00:20:06.700 --> 00:20:10.980
I built the little thing, a little Mac menu bar app,


00:20:10.980 --> 00:20:15.020
100% in Python and distributed it as a .app file,


00:20:15.020 --> 00:20:17.060
just like you all are talking about here.


00:20:17.060 --> 00:20:20.980
So create this thing, it looks like this.


00:20:20.980 --> 00:20:22.140
It does a few more things now,


00:20:22.140 --> 00:20:24.980
but if you're copying some title


00:20:24.980 --> 00:20:26.440
and you want to turn it to a file name


00:20:26.440 --> 00:20:28.360
or you want to make sure you strip off stuff


00:20:28.360 --> 00:20:31.140
or clean out the text before you paste it somewhere else,


00:20:31.140 --> 00:20:34.580
I built this little thing that goes in the menu bar,


00:20:34.580 --> 00:20:38.820
build it with Python and it runs with PyInstaller,


00:20:38.820 --> 00:20:41.860
I believe, no, that uses Py2App actually,


00:20:41.860 --> 00:20:45.420
is the one that it uses, I think.


00:20:45.420 --> 00:20:47.740
So anyway, there's a couple of options,


00:20:47.740 --> 00:20:49.940
but yeah, it's usually some variation


00:20:49.940 --> 00:20:52.580
of what you need to do on Windows and on Mac,


00:20:52.580 --> 00:20:54.540
and you actually have to have a Windows machine


00:20:54.540 --> 00:20:57.300
and you have to have a macOS machine


00:20:57.300 --> 00:20:59.480
in order to create those distributables.


00:20:59.480 --> 00:21:02.640
So kind of a pain there.


00:21:02.640 --> 00:21:04.220
- By the way, if someone is wondering


00:21:04.220 --> 00:21:07.220
what's this Pi 2 app, 'cause I was checking this as well.


00:21:07.220 --> 00:21:09.320
So there is Pi installer that can be used


00:21:09.320 --> 00:21:11.940
for Windows, Mac and Linux distributions.


00:21:11.940 --> 00:21:15.080
And there is this PI2 app that is like a PI installer


00:21:15.080 --> 00:21:17.640
but for creating Mac application.


00:21:17.640 --> 00:21:20.920
And there's also PI2Win, which is also again like a--


00:21:20.920 --> 00:21:22.300
- PI2XE, right?


00:21:22.300 --> 00:21:24.120
- Yeah, PI2XE.


00:21:24.120 --> 00:21:27.400
That is like a subset of PI installer for Windows.


00:21:27.400 --> 00:21:29.440
- I feel like they might be more specific,


00:21:29.440 --> 00:21:33.640
like covering, adding things like icons and other stuff,


00:21:33.640 --> 00:21:36.000
maybe a little bit better, I'm not sure.


00:21:36.000 --> 00:21:37.920
For example, like this one, it has,


00:21:37.920 --> 00:21:40.960
like an icon set that you create for it.


00:21:40.960 --> 00:21:44.440
And the reason I chose PytoApp is it's,


00:21:44.440 --> 00:21:49.200
this is based on Rumps, which is a ridiculously


00:21:49.200 --> 00:21:53.120
uncomplicated like Mac notifications or something like,


00:21:53.120 --> 00:21:55.540
I don't remember what the URL, the acronym stands for,


00:21:55.540 --> 00:21:57.960
but it's 100% a Mac app.


00:21:57.960 --> 00:22:02.100
So I figured I'd just use the Mac app builder thing for it


00:22:02.100 --> 00:22:04.400
because there's no chance it's running on any other thing


00:22:04.400 --> 00:22:07.680
'cause the framework itself is only for Macs.


00:22:07.680 --> 00:22:10.660
So yeah, anyway, let's go to the next question.


00:22:10.660 --> 00:22:12.360
Here we go.


00:22:12.360 --> 00:22:13.780
Follow up to the above question,


00:22:13.780 --> 00:22:16.420
which by the way is about setup.py


00:22:16.420 --> 00:22:17.600
'cause we've been jumping around,


00:22:17.600 --> 00:22:19.260
but the follow up to the recorded,


00:22:19.260 --> 00:22:23.740
the pre setup question is which one should I choose,


00:22:23.740 --> 00:22:26.580
pipenv or Poetry or something else?


00:22:26.580 --> 00:22:30.660
- So I would say they are both very similar.


00:22:30.660 --> 00:22:32.940
It's just that Poetry allows you


00:22:32.940 --> 00:22:35.780
to easily publish packages on PyPI.


00:22:35.780 --> 00:22:37.600
So if you're building a Python package,


00:22:37.600 --> 00:22:39.080
I would go with Poetry.


00:22:39.080 --> 00:22:41.420
If you're not building a Python package,


00:22:41.420 --> 00:22:43.680
then I think both should be fine.


00:22:43.680 --> 00:22:45.780
They offer a similar set of functionality.


00:22:45.780 --> 00:22:49.240
- Okay, yeah, very cool, very cool.


00:22:49.240 --> 00:22:52.140
Conda versus Pip.


00:22:52.140 --> 00:22:53.520
We sort of touched on this a little bit,


00:22:53.520 --> 00:22:55.560
but maybe a little more.


00:22:55.560 --> 00:22:59.040
- Yeah, so that's an interesting question


00:22:59.040 --> 00:23:02.480
because with Conda,


00:23:02.480 --> 00:23:05.480
you install binaries from the Conda repository,


00:23:05.480 --> 00:23:09.300
- Well, with pip, you install packages from PyPI


00:23:09.300 --> 00:23:11.160
and they are not always binaries.


00:23:11.160 --> 00:23:16.160
So the main difference is when there is no binary.


00:23:16.160 --> 00:23:18.240
So if there is no binary,


00:23:18.240 --> 00:23:21.040
PIP will try to build this package from sources.


00:23:21.040 --> 00:23:23.280
And if you're missing some dependencies on your computer,


00:23:23.280 --> 00:23:25.200
then it's going to crash.


00:23:25.200 --> 00:23:26.040
With Combat, there is no such problem.


00:23:26.040 --> 00:23:27.240
- If you've done Windows and you see,


00:23:27.240 --> 00:23:31.520
cannot find vcvars.bat, this is the problem.


00:23:31.520 --> 00:23:34.000
If you're somewhere else and it just fails to install


00:23:34.000 --> 00:23:37.920
something that looks like a C++ compile error, that's the problem.


00:23:37.920 --> 00:23:41.440
And that's part of the problem what conda is trying to solve, right?


00:23:41.440 --> 00:23:45.120
Exactly. So with conda, there is no such problem because


00:23:45.120 --> 00:23:49.200
every package that is published in the conda repository is a binary.


00:23:49.200 --> 00:23:52.480
So it contains all the dependencies which can be


00:23:52.480 --> 00:23:57.280
super helpful if you're not like, if you don't have a computer science background


00:23:57.280 --> 00:24:02.720
or if you're not very experienced with debugging this missing whatever you said,


00:24:02.720 --> 00:24:03.720
- Thank you, Michael.


00:24:03.720 --> 00:24:05.980
(laughing)


00:24:05.980 --> 00:24:09.320
I don't know if you're a data scientist


00:24:09.320 --> 00:24:12.800
and you just want to have your code running,


00:24:12.800 --> 00:24:15.420
you don't care about setting up stuff,


00:24:15.420 --> 00:24:18.940
you just want to install some packages and have it running.


00:24:18.940 --> 00:24:21.200
Conda is an excellent choice because it has


00:24:21.200 --> 00:24:24.880
like a very good support for all those data science packages


00:24:24.880 --> 00:24:27.120
you just install them,


00:24:27.120 --> 00:24:29.400
you have all the dependencies installed.


00:24:29.400 --> 00:24:32.400
So it makes things much, much easier in that sense.


00:24:32.400 --> 00:24:35.280
- Yeah. - On the other hand--


00:24:35.280 --> 00:24:36.620
- Especially in the data science world


00:24:36.620 --> 00:24:38.100
where there's really weird dependencies,


00:24:38.100 --> 00:24:39.600
like you need a Fortran compiler.


00:24:39.600 --> 00:24:42.320
Like I definitely don't have that on my machine.


00:24:42.320 --> 00:24:46.640
- Yeah, on the other hand, as you already mentioned, Michael,


00:24:46.640 --> 00:24:50.200
those binaries don't always have the latest version.


00:24:50.200 --> 00:24:52.440
So someone first have to create this binary


00:24:52.440 --> 00:24:55.000
and if there is like a vulnerability,


00:24:55.000 --> 00:24:56.480
then you have a problem.


00:24:56.480 --> 00:25:00.160
And there might be some like less popular packages


00:25:00.160 --> 00:25:01.520
that are available on PyPI,


00:25:01.520 --> 00:25:03.560
but no one created the binary for Conda.


00:25:03.560 --> 00:25:06.800
So either you have to wait until someone does that


00:25:06.800 --> 00:25:08.680
or you have to create it yourself.


00:25:08.680 --> 00:25:12.540
'Cause with Conda you can also install packages from pip,


00:25:12.540 --> 00:25:15.240
from PyPI, but you basically have to build


00:25:15.240 --> 00:25:16.700
a binary yourself.


00:25:16.700 --> 00:25:20.160
So again, if you're not like very experienced developer,


00:25:20.160 --> 00:25:22.840
you probably don't know how to do this.


00:25:22.840 --> 00:25:25.520
So I would say like the benefit of using PIP


00:25:25.520 --> 00:25:27.980
is that you can install any package from PyPI


00:25:27.980 --> 00:25:29.980
while with Conda you can't,


00:25:29.980 --> 00:25:32.860
but with Conda installing things is much easier.


00:25:32.860 --> 00:25:37.020
- Yeah, I think that sounds like a pretty good summary.


00:25:37.020 --> 00:25:38.940
It's worth pointing out that the workflow


00:25:38.940 --> 00:25:41.480
is quite different from a virtual environment,


00:25:41.480 --> 00:25:42.620
from Conda, right?


00:25:42.620 --> 00:25:43.900
Like Conda, you create the environment


00:25:43.900 --> 00:25:45.540
off somewhere magical with the name


00:25:45.540 --> 00:25:47.980
and then you activate it by saying the name,


00:25:47.980 --> 00:25:51.260
whereas it's more, you explicitly say this one here


00:25:51.260 --> 00:25:52.360
in this location.


00:25:53.500 --> 00:25:56.460
- So Mike Levin has a chat stream.


00:25:56.460 --> 00:25:57.620
I'll go through here.


00:25:57.620 --> 00:25:58.740
Thanks, Mike.


00:25:58.740 --> 00:26:01.940
So Oconda was, he says only necessary.


00:26:01.940 --> 00:26:05.740
I'll say was more necessary before pip included binaries,


00:26:05.740 --> 00:26:08.060
specifically with wheels.


00:26:08.060 --> 00:26:11.020
And now that wheels, it doesn't happen as much.


00:26:11.020 --> 00:26:12.900
PIP can replace Anaconda now.


00:26:12.900 --> 00:26:15.620
That's true, but Frankie One says,


00:26:15.620 --> 00:26:19.140
"Yeah, but not everything has a cross-platform wheel


00:26:19.140 --> 00:26:19.980
as well."


00:26:19.980 --> 00:26:22.220
So I do agree with that.


00:26:22.220 --> 00:26:24.380
for example, micro-WSGI, when I install that,


00:26:24.380 --> 00:26:28.780
it seems to like compile away for a good 30 seconds


00:26:28.780 --> 00:26:30.960
instead of coming with some binary version


00:26:30.960 --> 00:26:33.000
that can just drop in or so on.


00:26:33.000 --> 00:26:37.460
So yeah, anyway, that's, I agree, Mike,


00:26:37.460 --> 00:26:38.700
that that's generally true,


00:26:38.700 --> 00:26:41.300
that things are much better now that we have wheels,


00:26:41.300 --> 00:26:44.080
but it's not, it's true also that it's not 100%.


00:26:44.080 --> 00:26:44.980
What do you think?


00:26:44.980 --> 00:26:47.820
- Yeah, I agree with that.


00:26:47.820 --> 00:26:51.180
And one thing that I want to also add is that,


00:26:51.180 --> 00:26:54.480
Well, we are talking about binaries and dependencies.


00:26:54.480 --> 00:26:56.520
If you are, let's say, a web developer


00:26:56.520 --> 00:26:59.240
and you're installing Django or FastAPI,


00:26:59.240 --> 00:27:01.960
there is like very little chance


00:27:01.960 --> 00:27:03.860
that you're gonna be missing some dependencies.


00:27:03.860 --> 00:27:07.060
So you probably will never have problems with pip.


00:27:07.060 --> 00:27:10.060
So for most cases, for some cases,


00:27:10.060 --> 00:27:12.180
using pip is going to be perfectly fine


00:27:12.180 --> 00:27:15.840
for all your work life.


00:27:15.840 --> 00:27:19.320
- Yeah, so it's the weirder farther out it gets.


00:27:19.320 --> 00:27:24.320
Like I said, Fortran dependencies with some weird C library or something.


00:27:24.320 --> 00:27:28.320
And then also Joan Pinole says,


00:27:28.320 --> 00:27:31.520
"I've used PyInstaller for some side projects and it works really well."


00:27:31.520 --> 00:27:34.320
Yeah, quite cool. That's definitely a neat option.


00:27:34.320 --> 00:27:38.400
All right, Sebastian, on to the next.


00:27:38.400 --> 00:27:43.200
"How do you hide secrets for development for production?"


00:27:43.200 --> 00:27:47.160
We've talked about, I think, we haven't talked about it yet,


00:27:47.160 --> 00:27:52.160
but there's shget, as in sh-secret, get,


00:27:52.160 --> 00:27:57.460
which is quite unnerving to see shget going along here


00:27:57.460 --> 00:28:00.380
and finding all the secrets that people have put


00:28:00.380 --> 00:28:03.480
into public repos or what were private repos,


00:28:03.480 --> 00:28:06.320
but then got turned public and people are pulling these out.


00:28:06.320 --> 00:28:09.080
That's very much not good.


00:28:09.080 --> 00:28:11.360
This is not what you want to do.


00:28:11.360 --> 00:28:13.800
Just put the secrets right in your source code.


00:28:13.800 --> 00:28:15.000
So what do you do?


00:28:15.000 --> 00:28:16.760
What are your recommendations here?


00:28:16.760 --> 00:28:20.600
- So my recommendation is pretty standard


00:28:20.600 --> 00:28:23.040
to use the environment to hide the,


00:28:23.040 --> 00:28:28.920
well, the secrets and start them as environment variables.


00:28:28.920 --> 00:28:33.820
And for example, you can have like a file


00:28:33.820 --> 00:28:35.460
with the YAML extension


00:28:35.460 --> 00:28:38.800
and you can put it in the Git repository.


00:28:38.800 --> 00:28:41.180
It's just, you don't put the secrets there.


00:28:41.180 --> 00:28:42.760
You just put the structure


00:28:42.760 --> 00:28:44.440
and let's say dummy values or whatever.


00:28:44.440 --> 00:28:47.260
So you remember that you have to set up


00:28:47.260 --> 00:28:49.420
all those environment variables.


00:28:49.420 --> 00:28:50.620
- Right, that's one of the challenges


00:28:50.620 --> 00:28:52.580
because if you put it in environment variables


00:28:52.580 --> 00:28:54.060
or you put it in the,


00:28:54.060 --> 00:28:59.180
some like secrets template.yaml versus secrets.yaml


00:28:59.180 --> 00:29:01.620
where the secrets.yaml is not in the repository.


00:29:01.620 --> 00:29:04.660
In a real project, there's gonna be a bunch of stuff.


00:29:04.660 --> 00:29:05.820
You gotta have the names just right.


00:29:05.820 --> 00:29:08.100
And you gotta, like knowing what you're even supposed


00:29:08.100 --> 00:29:10.060
to fill out for the app to work is a challenge.


00:29:10.060 --> 00:29:12.860
So having this template around is super helpful,


00:29:12.860 --> 00:29:15.580
but not with the real secrets, right?


00:29:15.580 --> 00:29:18.260
- Yeah, and there are some libraries that you can use


00:29:18.260 --> 00:29:22.900
that will make managing those templates much easier for you.


00:29:22.900 --> 00:29:24.560
And why am I saying about those templates?


00:29:24.560 --> 00:29:29.380
Is that quite often when there is no template,


00:29:29.380 --> 00:29:32.180
people start putting variables into the environment


00:29:32.180 --> 00:29:33.620
and they spin up a new server


00:29:33.620 --> 00:29:35.560
and they realize that they forgot


00:29:35.560 --> 00:29:37.040
about some environment variables


00:29:37.040 --> 00:29:40.100
and then things stop working.


00:29:40.100 --> 00:29:43.460
So a good practice is to have this like


00:29:43.460 --> 00:29:46.500
an example environment variables file


00:29:46.500 --> 00:29:49.860
where you list all the variables that have to be set.


00:29:49.860 --> 00:29:52.060
And then you have like a proper environment file


00:29:52.060 --> 00:29:53.860
that you never put to the GitHub repository


00:29:53.860 --> 00:29:56.860
where you actually specify the real secrets


00:29:56.860 --> 00:29:58.860
and then you load it to the environment.


00:29:58.860 --> 00:30:01.940
- Yeah.


00:30:01.940 --> 00:30:03.940
And Crested has an interesting location.


00:30:03.940 --> 00:30:07.620
Under a rock.


00:30:07.620 --> 00:30:09.180
Under a rock, yeah, yeah.


00:30:09.180 --> 00:30:11.820
- No, but then more seriously points out


00:30:11.820 --> 00:30:13.900
that there are tools for keeping secrets


00:30:13.900 --> 00:30:16.500
in version control too, like, you know,


00:30:16.500 --> 00:30:17.500
certain vaults, right?


00:30:17.500 --> 00:30:19.340
Like HashiCorp has something,


00:30:19.340 --> 00:30:24.060
and we've had some sponsors who talk Python with,


00:30:24.060 --> 00:30:25.900
and things where you basically set up


00:30:25.900 --> 00:30:30.320
like the equivalent of one password or last pass,


00:30:30.320 --> 00:30:31.900
but for your server, right?


00:30:31.900 --> 00:30:35.080
- Yeah, definitely.


00:30:35.080 --> 00:30:37.420
If you have to be more careful about your secret,


00:30:37.420 --> 00:30:40.120
it makes sense to use an external tool.


00:30:40.120 --> 00:30:43.920
But if a lot of those things can be mitigated


00:30:43.920 --> 00:30:45.880
by setting up the API keys properly.


00:30:45.880 --> 00:30:50.000
For example, if you have like API key for AWS,


00:30:50.000 --> 00:30:53.700
you just limit what this account can do.


00:30:53.700 --> 00:30:56.380
And that way you don't spin up.


00:30:56.380 --> 00:30:59.500
If it leaks, then you don't spin up 1000 servers


00:30:59.500 --> 00:31:00.520
mining Bitcoins for you.


00:31:00.520 --> 00:31:02.760
And then you wake up with like $1 million debt


00:31:02.760 --> 00:31:03.720
or something like that.


00:31:03.720 --> 00:31:05.480
So there are different ways to mitigate


00:31:05.480 --> 00:31:07.520
depends on what's the level of risk,


00:31:07.520 --> 00:31:10.340
but the easiest thing is to use the environment.


00:31:10.340 --> 00:31:12.200
- Yeah, yeah.


00:31:12.200 --> 00:31:13.640
And you can combine them as well, right?


00:31:13.640 --> 00:31:15.120
Like you could have an encryption key


00:31:15.120 --> 00:31:16.240
in the environment variable


00:31:16.240 --> 00:31:20.360
and then actually encrypt the other elements in ways


00:31:20.360 --> 00:31:22.120
and then use instead of, you know,


00:31:22.120 --> 00:31:24.120
'cause that way if it's just in the environment,


00:31:24.120 --> 00:31:27.360
like you could log in, if you hack into the process,


00:31:27.360 --> 00:31:30.320
you could just go, well, os.env, like what's in here?


00:31:30.320 --> 00:31:31.640
Let's just look around.


00:31:31.640 --> 00:31:32.880
If it's all full of encrypted stuff,


00:31:32.880 --> 00:31:34.800
you're like, I don't have no idea how to unencrypt it.


00:31:34.800 --> 00:31:36.720
So there's layers, right?


00:31:36.720 --> 00:31:39.600
And obviously running your app as lower privileges


00:31:39.600 --> 00:31:41.680
is really important.


00:31:41.680 --> 00:31:44.000
Firewalls and isolate, there's like layers.


00:31:44.000 --> 00:31:45.360
This is not the only thing,


00:31:45.360 --> 00:31:48.520
but one of the things is not to put raw passwords


00:31:48.520 --> 00:31:50.420
and API keys in your source code.


00:31:50.420 --> 00:31:52.920
- Yeah.


00:31:52.920 --> 00:31:53.820
- Cool, all right.


00:31:53.820 --> 00:31:56.600
Let's talk Docker again.


00:31:56.600 --> 00:31:57.800
Should people use Docker?


00:31:57.800 --> 00:31:59.080
What do you think?


00:31:59.080 --> 00:32:00.480
- Yeah. - More broadly.


00:32:00.480 --> 00:32:01.720
- This is, yeah, exactly.


00:32:01.720 --> 00:32:04.480
This is a more broad question than the first one we had.


00:32:04.480 --> 00:32:07.720
It depends who you ask, because there are some people


00:32:07.720 --> 00:32:09.960
who will tell you that you should always use Docker.


00:32:09.960 --> 00:32:11.320
And when you start using Docker,


00:32:11.320 --> 00:32:13.440
you should spin up a Kubernetes cluster.


00:32:13.440 --> 00:32:15.480
And then you finally will be able to deploy


00:32:15.480 --> 00:32:17.340
your almost static block there.


00:32:17.340 --> 00:32:19.840
- Yeah.


00:32:19.840 --> 00:32:20.840
- But don't listen to those people.


00:32:20.840 --> 00:32:24.520
I mean, it really depends on what you're trying to do.


00:32:24.520 --> 00:32:27.400
'Cause Docker has those amazing benefits


00:32:27.400 --> 00:32:31.280
that it makes deploying your application much, much easier.


00:32:31.280 --> 00:32:33.960
So especially when you want to scale something up,


00:32:33.960 --> 00:32:36.640
it Docker really pays off.


00:32:36.640 --> 00:32:38.100
Because for example, let's say you're deploying


00:32:38.100 --> 00:32:39.400
your website for the first time,


00:32:39.400 --> 00:32:42.360
then probably renting a virtual private server


00:32:42.360 --> 00:32:44.440
and then installing a Django website there,


00:32:44.440 --> 00:32:47.380
it's easier than writing a Docker file.


00:32:47.380 --> 00:32:49.840
But if you want to scale your Django application


00:32:49.840 --> 00:32:53.000
to like hundreds of machines with Docker,


00:32:53.000 --> 00:32:56.560
it's much easier 'cause you always use the same Docker file


00:32:56.560 --> 00:32:59.040
and spinning up 100 virtual private servers by hand,


00:32:59.040 --> 00:33:01.560
it's probably not something that you want to do.


00:33:01.560 --> 00:33:04.520
So there is a higher cost upfront


00:33:04.520 --> 00:33:08.560
'cause you'd need this additional tool in your tool set,


00:33:08.560 --> 00:33:11.640
but in the long run, it will pay off.


00:33:11.640 --> 00:33:13.960
And another huge advantage of Docker


00:33:13.960 --> 00:33:18.040
is that it makes collaborating with people much easier.


00:33:18.040 --> 00:33:19.920
'Cause I remember back in the days


00:33:19.920 --> 00:33:21.720
when I was joining a new team,


00:33:21.720 --> 00:33:23.240
there were like some setup scripts


00:33:23.240 --> 00:33:24.800
and you had to install some dependencies


00:33:24.800 --> 00:33:26.740
and you had to set up some environment variables.


00:33:26.740 --> 00:33:28.320
And then after two days,


00:33:28.320 --> 00:33:30.600
you were finally able to start coding.


00:33:30.600 --> 00:33:33.580
And now when I join new projects that are using Docker,


00:33:33.580 --> 00:33:36.900
it's just two commands, Docker build and Docker run.


00:33:36.900 --> 00:33:40.380
And you have this whole development environment running.


00:33:40.380 --> 00:33:42.780
You have the website there, you have the database,


00:33:42.780 --> 00:33:45.300
you have the ready server, whatever.


00:33:45.300 --> 00:33:49.640
So it makes joining a new team much, much easier.


00:33:49.640 --> 00:33:52.620
But on the other hand,


00:33:52.620 --> 00:33:54.700
let's say if you have like a Python script


00:33:54.700 --> 00:33:57.820
or like one off script that you want to, I don't know,


00:33:57.820 --> 00:34:00.020
scrape some data from the internet,


00:34:00.020 --> 00:34:04.900
there is like absolutely no point in adding yourself


00:34:04.900 --> 00:34:06.780
more work to write a Docker file


00:34:06.780 --> 00:34:08.660
if you know that you're going to be throwing away


00:34:08.660 --> 00:34:10.060
this code like tomorrow.


00:34:10.060 --> 00:34:13.460
So it depends on what's your use case.


00:34:13.460 --> 00:34:16.340
If it's for like simple things, I wouldn't bother


00:34:16.340 --> 00:34:18.500
unless you really like using Docker,


00:34:18.500 --> 00:34:20.500
but for like more advanced projects,


00:34:20.500 --> 00:34:23.140
it will probably pay off.


00:34:23.140 --> 00:34:26.020
- Yeah, I was speaking with one of the


00:34:26.020 --> 00:34:29.060
Talk Python listeners having a,


00:34:29.060 --> 00:34:30.180
"Hey, what do you think about this?


00:34:30.180 --> 00:34:31.220
"And how do we solve this problem?"


00:34:31.220 --> 00:34:32.480
type of conversation.


00:34:32.480 --> 00:34:34.980
And it was basically,


00:34:34.980 --> 00:34:38.900
how do I make sure that everyone on my team


00:34:38.900 --> 00:34:41.180
has exactly the same version of Python?


00:34:41.180 --> 00:34:46.220
I wanna make sure that they're using 3.9.2,


00:34:46.220 --> 00:34:49.780
not 3.9.3, not 3.9.1.


00:34:49.780 --> 00:34:50.780
Well, you definitely don't want one


00:34:50.780 --> 00:34:53.220
'cause that has that floating point vulnerability,


00:34:53.220 --> 00:34:54.180
but you know what I mean?


00:34:54.180 --> 00:34:56.460
Like you don't want variation,


00:34:56.460 --> 00:34:58.020
you want exactly that thing.


00:34:58.020 --> 00:35:00.500
If you really care down to that degree,


00:35:00.500 --> 00:35:02.820
your Docker is great because then you just make everyone


00:35:02.820 --> 00:35:05.000
run the same Docker image.


00:35:05.000 --> 00:35:06.380
You provide it in some, I don't know,


00:35:06.380 --> 00:35:09.780
local Docker hub type thing,


00:35:09.780 --> 00:35:12.620
or just put the Docker file into version control.


00:35:12.620 --> 00:35:15.260
And if it changes, then it just rebuilds and it runs


00:35:15.260 --> 00:35:16.960
and off you go, right?


00:35:16.960 --> 00:35:19.040
- Yeah.


00:35:19.040 --> 00:35:20.220
- Yeah, so that helps a lot for that.


00:35:20.220 --> 00:35:21.040
But I totally agree.


00:35:21.040 --> 00:35:24.100
I wouldn't use it for like super simple things.


00:35:24.100 --> 00:35:27.020
You're just causing yourself more challenges


00:35:27.020 --> 00:35:32.020
and often it's not really that useful or that needed,


00:35:32.020 --> 00:35:33.820
I guess is the way to put it.


00:35:33.820 --> 00:35:37.420
So there's some interesting followups here


00:35:37.420 --> 00:35:38.500
in the live stream.


00:35:38.500 --> 00:35:40.300
In addition to under a rock,


00:35:40.300 --> 00:35:41.700
Frankie one says,


00:35:41.700 --> 00:35:43.620
I thought GitHub now automatically detects


00:35:43.620 --> 00:35:45.840
when you commit secrets accidentally.


00:35:45.840 --> 00:35:49.100
I think I did hear that it takes an attempt.


00:35:49.100 --> 00:35:52.840
I wouldn't count on GitHub catching all of my secrets.


00:35:52.840 --> 00:35:54.660
I would be more deliberate about it.


00:35:54.660 --> 00:35:57.000
What do you, any, do you know anything about this?


00:35:57.000 --> 00:35:59.600
- Not really.


00:35:59.600 --> 00:36:01.320
I know that there are those bots that check


00:36:01.320 --> 00:36:03.560
like for vulnerabilities and stuff like that.


00:36:03.560 --> 00:36:06.200
So I would imagine that it also has a bot


00:36:06.200 --> 00:36:08.120
to detect secrets in the comments


00:36:08.120 --> 00:36:10.280
but I'm just wondering how it works


00:36:10.280 --> 00:36:12.040
because when you push something to GitHub


00:36:12.040 --> 00:36:13.520
it's automatically available there.


00:36:13.520 --> 00:36:18.440
So does GitHub put some blocker on your repo


00:36:18.440 --> 00:36:20.200
to not show the latest comment?


00:36:20.200 --> 00:36:22.800
'Cause usually what I see people doing is that


00:36:22.800 --> 00:36:27.160
they commit, they push a commit with a secret


00:36:27.160 --> 00:36:28.880
and they realize they pushed that.


00:36:28.880 --> 00:36:30.920
So they push another commit, removing the secret


00:36:30.920 --> 00:36:33.160
but they're like bots running through GitHub


00:36:33.160 --> 00:36:34.040
harvesting those.


00:36:34.040 --> 00:36:37.560
So the moment you push it, it's already distributed


00:36:37.560 --> 00:36:39.840
to some people or to Shigit.


00:36:39.840 --> 00:36:42.360
- It's too late.


00:36:42.360 --> 00:36:43.200
It's too late.


00:36:43.200 --> 00:36:46.320
The stream has already been observed.


00:36:46.320 --> 00:36:48.180
Yeah, it's really not good.


00:36:48.180 --> 00:36:51.640
Related to this sort of follow on,


00:36:51.640 --> 00:36:55.720
I think related to the Docker a little bit,


00:36:55.720 --> 00:36:57.020
maybe in some ways.


00:36:57.020 --> 00:37:01.220
So THP says, if you're not an expert Pythonista,


00:37:01.220 --> 00:37:02.960
how do you manage supply chain,


00:37:02.960 --> 00:37:05.120
tool chain attacks appropriately?


00:37:05.120 --> 00:37:08.080
You wanna maybe give people an idea


00:37:08.080 --> 00:37:12.160
what supply chain vulnerabilities are,


00:37:12.160 --> 00:37:14.680
and then we could talk about this?


00:37:14.680 --> 00:37:17.800
- I don't know what our supply chain vulnerabilities are.


00:37:17.800 --> 00:37:19.000
- I'll give you the,


00:37:19.000 --> 00:37:22.920
So for example, recently there were about 4,000 malicious packages


00:37:22.920 --> 00:37:24.920
that were put into PyPI.


00:37:24.920 --> 00:37:28.840
Then there was another vulnerability where if you're running a private PyPI server


00:37:28.840 --> 00:37:32.800
so that you can have like, your team can publish and share packages


00:37:32.800 --> 00:37:37.800
across applications and then often those will like fall through to the real PyPI.


00:37:37.800 --> 00:37:41.680
So I could just say pip install requests, and it'll get the one from PyPI.


00:37:41.680 --> 00:37:45.520
If I say pip install data layer, it'll get our local data layer.


00:37:45.520 --> 00:37:47.400
Right, one of the vulnerabilities was


00:37:47.400 --> 00:37:51.180
if somebody finds a way to publish your private name thing,


00:37:51.180 --> 00:37:54.340
but to PyPI with a higher version number,


00:37:54.340 --> 00:37:58.180
Pip would prefer that one and go give that,


00:37:58.180 --> 00:38:00.380
but that might be one that has some sort of vulnerability


00:38:00.380 --> 00:38:02.340
or something along those lines.


00:38:02.340 --> 00:38:05.100
Right, so this, you know, maybe more,


00:38:05.100 --> 00:38:08.660
like more concerning is in PHP,


00:38:08.660 --> 00:38:11.380
somebody put in some code to run


00:38:11.380 --> 00:38:14.580
that if you put the rhodium, I believe,


00:38:14.580 --> 00:38:18.540
as a header, I think it was in the headers or no,


00:38:18.540 --> 00:38:19.540
it was in the user agent.


00:38:19.540 --> 00:38:23.600
If you put the word Zerodium and then some PHP code


00:38:23.600 --> 00:38:26.980
in the user agent and request it against a PHP site,


00:38:26.980 --> 00:38:30.460
which 79% of the internet runs on, I think a lot,


00:38:30.460 --> 00:38:33.460
it would actually just run that arbitrary code.


00:38:33.460 --> 00:38:35.300
So those are the types of things I think


00:38:35.300 --> 00:38:36.820
that we're talking about here.


00:38:36.820 --> 00:38:39.620
- That's a very good question.


00:38:39.620 --> 00:38:42.860
And to be honest, I don't really know


00:38:42.860 --> 00:38:45.420
how you can mitigate those kind of attacks.


00:38:45.420 --> 00:38:49.380
'Cause like, yeah, the package name typos can happen


00:38:49.380 --> 00:38:53.260
and there is probably not much you can do.


00:38:53.260 --> 00:38:56.540
The only thing that comes to my mind is to use like a,


00:38:56.540 --> 00:38:59.100
if you don't know how to solve those problems,


00:38:59.100 --> 00:39:02.700
it's probably worth paying someone to take care of that.


00:39:02.700 --> 00:39:04.580
So I don't know, maybe using Heroku


00:39:04.580 --> 00:39:08.420
would be a bit more helpful.


00:39:08.420 --> 00:39:12.220
I don't know how they can mitigate this stuff.


00:39:12.220 --> 00:39:13.180
I know, what if I do my--


00:39:13.180 --> 00:39:15.060
- Yeah, I got a couple of ideas.


00:39:15.060 --> 00:39:16.380
None of them are perfect.


00:39:16.380 --> 00:39:18.820
You can pin your versions.


00:39:18.820 --> 00:39:21.660
So you can go and look at all the libraries you're using


00:39:21.660 --> 00:39:24.860
and say, okay, I trust them as they are now.


00:39:24.860 --> 00:39:27.500
And if you pin the version and your requirements.txt


00:39:27.500 --> 00:39:29.500
or pyproject.toml or whatever,


00:39:29.500 --> 00:39:32.300
you're not going to automatically get the latest version,


00:39:32.300 --> 00:39:35.700
which may have some kind of vulnerability snuck into it.


00:39:35.700 --> 00:39:41.180
So you can consciously decide to move to the next version.


00:39:41.180 --> 00:39:43.740
Hopefully, if somebody were to hack into Django,


00:39:43.740 --> 00:39:46.940
maybe that gets out, but it wouldn't last very long, right?


00:39:46.940 --> 00:39:49.620
And so if you don't automatically upgrade


00:39:49.620 --> 00:39:50.980
on just the next deploy,


00:39:50.980 --> 00:39:53.260
then you're going to at least be a little bit better off.


00:39:53.260 --> 00:39:55.460
So pin your versions, it's probably one.


00:39:55.460 --> 00:39:59.340
You could whitelist, you can do things like set up


00:39:59.340 --> 00:40:02.100
a private PyPI server and just whitelist packages.


00:40:02.100 --> 00:40:05.780
So people can't arbitrarily install various things,


00:40:05.780 --> 00:40:09.060
but they only install ones you approve.


00:40:09.060 --> 00:40:10.180
You can use this thing.


00:40:10.180 --> 00:40:14.020
You can use this as the sneak package advisor.


00:40:14.020 --> 00:40:15.940
So if I want to learn about FastAPI,


00:40:15.940 --> 00:40:17.900
like what's the story of FastAPI.


00:40:17.900 --> 00:40:19.640
This is cool because it's not just security,


00:40:19.640 --> 00:40:21.640
but it's more than just security.


00:40:21.640 --> 00:40:24.420
Gives you like the health,


00:40:24.420 --> 00:40:29.180
the maintainability level or how much it's maintained,


00:40:29.180 --> 00:40:30.900
whether it has any known security issues,


00:40:30.900 --> 00:40:34.120
whether community's active, whether it's influential,


00:40:34.120 --> 00:40:36.420
all sorts of cool graphs about who's working on it,


00:40:36.420 --> 00:40:39.020
when it's been worked on, amount of funding,


00:40:39.020 --> 00:40:42.980
It's a security analysis by Snyk and so on.


00:40:42.980 --> 00:40:44.300
So this is a pretty good thing.


00:40:44.300 --> 00:40:45.980
So together, right?


00:40:45.980 --> 00:40:49.500
So if I were to say, I'm going to pin my versions


00:40:49.500 --> 00:40:51.740
and then those versions are going to be verified


00:40:51.740 --> 00:40:54.220
or maybe I'm going to create a white list


00:40:54.220 --> 00:40:55.900
and only allow you to install from the white list.


00:40:55.900 --> 00:40:57.380
And I'll make sure that everything that gets


00:40:57.380 --> 00:40:59.180
through the white list at least has been checked out


00:40:59.180 --> 00:41:00.140
by Snyk.


00:41:00.140 --> 00:41:02.380
It's not perfect, but it's better than just pip install


00:41:02.380 --> 00:41:04.180
random thing and hope for the best.


00:41:06.780 --> 00:41:10.860
So yeah, anyway, that's some of it.


00:41:10.860 --> 00:41:12.400
Let's see.


00:41:12.400 --> 00:41:14.920
Encrypted also follows on with,


00:41:14.920 --> 00:41:19.360
is vendoring dependencies an appropriate mitigation?


00:41:19.360 --> 00:41:22.880
Like instead of pip installing requests,


00:41:22.880 --> 00:41:24.420
like finding the key bits of requests


00:41:24.420 --> 00:41:28.400
and just copying that code into your application.


00:41:28.400 --> 00:41:29.640
It certainly would help.


00:41:29.640 --> 00:41:34.160
On the downside, if a non-intended vulnerability


00:41:34.160 --> 00:41:36.320
were to get into requests, not a hack,


00:41:36.320 --> 00:41:40.280
but just something that was a ultimately become a security hole,


00:41:40.280 --> 00:41:43.600
you've now vendored in that instead of automatically getting the upgrade, right?


00:41:43.600 --> 00:41:45.600
So I don't know, what do you think?


00:41:45.600 --> 00:41:49.200
Yeah, I think it's easy to do this because you can basically


00:41:49.200 --> 00:41:53.320
put the virtual environment folder with your project and that's it.


00:41:53.320 --> 00:41:58.040
But in the long run, it's probably harder to maintain.


00:41:58.040 --> 00:42:00.960
And I think as you said, like


00:42:00.960 --> 00:42:04.440
pinning the dependency versions, making sure you don't have typos,


00:42:04.440 --> 00:42:09.120
probably can save you from a lot of those problems.


00:42:09.120 --> 00:42:11.400
- Yeah, be very careful when you pip install something


00:42:11.400 --> 00:42:13.480
that you get the spelling right,


00:42:13.480 --> 00:42:15.600
because there was one of those vulnerable ones,


00:42:15.600 --> 00:42:18.660
it was something like asteroids versus asteroid.


00:42:18.660 --> 00:42:21.760
I mean, it was like plural versus singular,


00:42:21.760 --> 00:42:23.280
and that was it, right?


00:42:23.280 --> 00:42:25.160
It's very subtle.


00:42:25.160 --> 00:42:29.120
- Yeah, and I guess if you're using like


00:42:29.120 --> 00:42:32.320
more popular packages, then you probably should be safe.


00:42:32.320 --> 00:42:34.840
I would say like with some more obscure packages,


00:42:34.840 --> 00:42:37.960
it can maybe happen that they will get abandoned


00:42:37.960 --> 00:42:40.240
and someone will either hack the git repository


00:42:40.240 --> 00:42:41.840
or like squat it.


00:42:41.840 --> 00:42:44.040
I don't know if it's actually possible with PyPI,


00:42:44.040 --> 00:42:49.040
but with bigger packages, it's probably not an issue.


00:42:49.040 --> 00:42:52.240
- Yeah, for sure.


00:42:52.240 --> 00:42:54.220
I think it's a relative thing.


00:42:54.220 --> 00:42:57.360
So let's see.


00:42:57.360 --> 00:42:59.880
Piling, hey, Piling, also says you can develop


00:42:59.880 --> 00:43:03.880
in a VM or Docker and related to that, Doug Farrell.


00:43:03.880 --> 00:43:05.120
Hey, Doug.


00:43:05.120 --> 00:43:06.720
He says, really interested in how to set up


00:43:06.720 --> 00:43:08.600
a Docker-based deployment environment


00:43:08.600 --> 00:43:10.200
or development environment, excuse me.


00:43:10.200 --> 00:43:14.240
So one of the things I think you want to distinguish here


00:43:14.240 --> 00:43:17.880
in this supply chain thing is I'm trying something out.


00:43:17.880 --> 00:43:20.300
And if it's going to run that setup high


00:43:20.300 --> 00:43:22.240
when I pip install it, it could, you know,


00:43:22.240 --> 00:43:24.480
pip install virus onto my machine.


00:43:24.480 --> 00:43:25.920
If that's your concern,


00:43:25.920 --> 00:43:27.540
you can develop in a virtual machine,


00:43:27.540 --> 00:43:29.280
you can develop in Docker,


00:43:29.280 --> 00:43:32.000
because then all it sees is what's inside the Docker machine,


00:43:32.000 --> 00:43:34.240
which is nothing, basically.


00:43:34.240 --> 00:43:36.520
So that's really cool.


00:43:36.520 --> 00:43:41.520
But also as Encrusted points out,


00:43:41.520 --> 00:43:43.680
if this is developing your application


00:43:43.680 --> 00:43:45.600
and pushing it to production,


00:43:45.600 --> 00:43:48.360
that vulnerability comes along on side the web server.


00:43:48.360 --> 00:43:50.560
So that's a challenge, right?


00:43:50.560 --> 00:43:52.560
So in this exploratory world,


00:43:52.560 --> 00:43:54.840
I think things like Docker actually help a lot


00:43:54.840 --> 00:43:56.280
to solve this problem.


00:43:56.280 --> 00:43:58.840
But in a production world, it does nothing.


00:43:58.840 --> 00:44:00.260
Nothing to help.


00:44:00.260 --> 00:44:03.160
But maybe let's follow on real quick with that.


00:44:03.160 --> 00:44:06.400
I think this development environment based on Docker


00:44:06.400 --> 00:44:07.220
is pretty interesting.


00:44:07.220 --> 00:44:10.840
For example, PyCharm now lets you set up a Docker image


00:44:10.840 --> 00:44:14.920
as the run target, which you can even debug into.


00:44:14.920 --> 00:44:17.300
And so you just press run and it starts the Docker thing,


00:44:17.300 --> 00:44:20.220
it attaches to it, you just run it there.


00:44:20.220 --> 00:44:24.700
I think VS Code also has something along these lines.


00:44:24.700 --> 00:44:27.840
What do you think about this?


00:44:27.840 --> 00:44:29.400
- Yeah, because I'm using VS Code.


00:44:29.400 --> 00:44:32.200
I was trying to set it up with Docker some time ago


00:44:32.200 --> 00:44:35.400
and it was possible to also like put the breakpoints there


00:44:35.400 --> 00:44:39.520
and maybe like run, let's say a Django application in Docker


00:44:39.520 --> 00:44:41.520
and have breakpoints work there.


00:44:41.520 --> 00:44:43.800
It just requires a bit of setup,


00:44:43.800 --> 00:44:48.800
but I would guess that either by now or soon in the future,


00:44:48.800 --> 00:44:51.320
they will even, the guys from the VS Code


00:44:51.320 --> 00:44:53.840
will further simplify it


00:44:53.840 --> 00:44:55.480
because they just keep adding things


00:44:55.480 --> 00:44:57.440
to make stuff easier there.


00:44:57.440 --> 00:44:58.360
- Yeah. - So it's definitely


00:44:58.360 --> 00:45:00.080
a viable option.


00:45:00.080 --> 00:45:02.060
- Yeah, yeah, that sounds good.


00:45:02.060 --> 00:45:05.240
Here is the,


00:45:05.240 --> 00:45:09.240
in for PyCharm, right?


00:45:09.240 --> 00:45:11.920
Basically configure an interpreter using Docker


00:45:11.920 --> 00:45:15.360
and just press go and then boom, off it runs in Docker,


00:45:15.360 --> 00:45:17.320
which is I think pretty awesome.


00:45:17.320 --> 00:45:20.800
So yeah, people can check those kinds of things out.


00:45:20.800 --> 00:45:22.880
All right, what else have we got here?


00:45:26.520 --> 00:45:30.320
Yeah, some comments about this basically being so much about dependencies and stuff.


00:45:30.320 --> 00:45:33.920
But I do think a lot of it really is...


00:45:33.920 --> 00:45:36.920
It's like, how do you get the right libraries?


00:45:36.920 --> 00:45:38.320
How do you keep those libraries up to date?


00:45:38.320 --> 00:45:40.520
How do you do that securely?


00:45:40.520 --> 00:45:42.520
How do you deploy those things out to the world?


00:45:42.520 --> 00:45:43.520
How do you share that with the user?


00:45:43.520 --> 00:45:48.120
So much of this stuff is a pretty interesting thing to talk about.


00:45:48.120 --> 00:45:52.520
One follow-up here from Doug is,


00:45:52.520 --> 00:45:55.020
"Are there resources or links that would help me and everyone


00:45:55.020 --> 00:46:00.460
understand how to build a Django debuggable Docker environment.


00:46:00.460 --> 00:46:05.420
I think actually the thing that I have on the screen here, if you're into PyCharm, is


00:46:05.420 --> 00:46:08.300
one, I'll throw that into the live chat here.


00:46:08.300 --> 00:46:14.460
I mean, that is, you know, click these three buttons and then press the debug button and


00:46:14.460 --> 00:46:15.460
it runs in Docker.


00:46:15.460 --> 00:46:21.780
Do you have something like this for VS Code?


00:46:21.780 --> 00:46:23.640
So what I did, I checked the documentation.


00:46:23.640 --> 00:46:28.640
I think VS Code was also using Django example as in,


00:46:28.640 --> 00:46:31.840
Django as an example in the documentation.


00:46:31.840 --> 00:46:34.280
So you would have to dig in their docs,


00:46:34.280 --> 00:46:36.360
but they're pretty easy to follow.


00:46:36.360 --> 00:46:39.640
But from the top of my head, I don't know anything.


00:46:39.640 --> 00:46:41.120
- Sure.


00:46:41.120 --> 00:46:41.960
Yeah, okay.


00:46:41.960 --> 00:46:43.640
So let's see.


00:46:43.640 --> 00:46:46.000
I think Incrested has a pretty interesting


00:46:46.000 --> 00:46:48.920
comment, question here.


00:46:48.920 --> 00:46:51.500
What's the story around code formatters, linters,


00:46:51.500 --> 00:46:55.040
and type checkers, autocomplete got the better of them there


00:46:55.040 --> 00:46:56.000
but no problem.


00:46:56.000 --> 00:46:58.940
Yeah.


00:46:58.940 --> 00:47:01.060
- Could you be more specific?


00:47:01.060 --> 00:47:05.840
- Well, yeah, I'm guessing like, should you use black?


00:47:05.840 --> 00:47:07.160
Should you use mypy?


00:47:07.160 --> 00:47:09.260
Things like that I would guess, but yeah,


00:47:09.260 --> 00:47:12.240
and Chris give us a follow up if you want.


00:47:12.240 --> 00:47:14.380
- So I will start and you can clarify the questions.


00:47:14.380 --> 00:47:17.240
I would say definitely use some of those tools.


00:47:19.180 --> 00:47:22.020
- Definitely I would recommend using black


00:47:22.020 --> 00:47:25.360
because well, some people don't like it,


00:47:25.360 --> 00:47:27.660
it's opinionated and you might not like


00:47:27.660 --> 00:47:28.860
how it formats some codes,


00:47:28.860 --> 00:47:32.300
even though you can actually put comments


00:47:32.300 --> 00:47:34.860
to disable formatting if you want to like preserve


00:47:34.860 --> 00:47:37.580
your beautifully form a dictionary of list


00:47:37.580 --> 00:47:40.280
of tuples of dictionaries and stuff like that.


00:47:40.280 --> 00:47:44.500
But if everyone on your team is using code formatter,


00:47:44.500 --> 00:47:46.580
no matter if it's black or if it's something else,


00:47:46.580 --> 00:47:48.160
then at least during the code reviews,


00:47:48.160 --> 00:47:52.640
you don't have some silly discussions about code styles.


00:47:52.640 --> 00:47:55.320
And I had those discussions in the past


00:47:55.320 --> 00:47:57.700
and they were terrible because code reviews should focus


00:47:57.700 --> 00:47:59.700
on what's happening in the code,


00:47:59.700 --> 00:48:01.180
not how the code looks like.


00:48:01.180 --> 00:48:05.300
So definitely some kind of formatter is very, very useful.


00:48:05.300 --> 00:48:06.700
Black is the most popular one.


00:48:06.700 --> 00:48:08.740
It works out of the box.


00:48:08.740 --> 00:48:11.300
So I would suggest using that.


00:48:11.300 --> 00:48:17.060
And speaking of linters, I really like Flake 8,


00:48:17.060 --> 00:48:21.420
but there's also PyLint and you can actually use both of them.


00:48:21.420 --> 00:48:25.460
And even though I have like, I don't know,


00:48:25.460 --> 00:48:27.420
eight years, nine years of Python,


00:48:27.420 --> 00:48:32.420
I still, I think I'd still find some silly bugs


00:48:32.420 --> 00:48:33.660
that I'm doing in the code.


00:48:33.660 --> 00:48:35.540
And 'cause like sometimes you're tired,


00:48:35.540 --> 00:48:38.860
you made like assigned to an undefined variables


00:48:38.860 --> 00:48:39.680
and stuff like that.


00:48:39.680 --> 00:48:43.140
So instead of like waiting for your code to actually run


00:48:43.140 --> 00:48:43.980
and give you this error


00:48:43.980 --> 00:48:46.820
because there is like no compilation.


00:48:46.820 --> 00:48:49.360
so you can't get the errors beforehand,


00:48:49.360 --> 00:48:54.360
you immediately can get those easy to spot errors for free.


00:48:54.360 --> 00:48:56.820
So I'll definitely spend some time


00:48:56.820 --> 00:48:59.420
adding them to your code editor.


00:48:59.420 --> 00:49:01.340
And then you can keep going crazy


00:49:01.340 --> 00:49:03.780
because like Flag8 has plenty of plugins


00:49:03.780 --> 00:49:05.980
that you can further extend it.


00:49:05.980 --> 00:49:09.860
You have a bunch of other static analysis tools.


00:49:09.860 --> 00:49:11.340
I'm listing them in the course.


00:49:11.340 --> 00:49:12.780
I think there is like a website


00:49:12.780 --> 00:49:14.340
with the resources for the course


00:49:14.340 --> 00:49:16.580
that you can find some cool plugins.


00:49:16.580 --> 00:49:18.380
And there is stuff like, for example, sorcery,


00:49:18.380 --> 00:49:20.740
that I really like that gives you some recommendations


00:49:20.740 --> 00:49:22.100
of how to reformat your code.


00:49:22.100 --> 00:49:25.420
For example, when you're writing a for loop


00:49:25.420 --> 00:49:27.660
and it's basically building a list,


00:49:27.660 --> 00:49:29.860
you will get a recommendation to use a list comprehension


00:49:29.860 --> 00:49:32.500
showing you how this comprehension will look like.


00:49:32.500 --> 00:49:34.740
So that's yet another tool that-


00:49:34.740 --> 00:49:37.100
- Yeah, one of the things about sorcery


00:49:37.100 --> 00:49:39.260
that annoyed me quite a bit is,


00:49:39.260 --> 00:49:43.540
in the early days, it would recommend all these refactorings


00:49:43.540 --> 00:49:45.380
and like nine out of 10, I'm like,


00:49:45.380 --> 00:49:46.500
yeah, that's a great refactoring.


00:49:46.500 --> 00:49:48.660
other times, like, no, this is a horrible refactoring.


00:49:48.660 --> 00:49:50.900
Like, I don't want this change.


00:49:50.900 --> 00:49:53.140
And I know the pattern I'm using is better than this,


00:49:53.140 --> 00:49:56.260
even though you're programmed to think this is it,


00:49:56.260 --> 00:49:59.340
and you couldn't disable notification.


00:49:59.340 --> 00:50:00.860
So I just have this permanent, like,


00:50:00.860 --> 00:50:05.380
mark of a warning on my screen for certain bits of code.


00:50:05.380 --> 00:50:07.020
They recently added a way to add


00:50:07.020 --> 00:50:10.140
for you to disable that on a per project basis.


00:50:10.140 --> 00:50:12.420
So now I'm also all about sorcery.


00:50:12.420 --> 00:50:15.100
Now that I can turn off the one or two refactorings


00:50:15.100 --> 00:50:16.260
that I'm not a huge fan of,


00:50:16.260 --> 00:50:19.100
And then the rest are really, really nice, like you say.


00:50:19.100 --> 00:50:23.100
- Yeah, I didn't have this experience with sorcery.


00:50:23.100 --> 00:50:24.500
I like it.


00:50:24.500 --> 00:50:26.340
But as I said, there are like plenty of tools,


00:50:26.340 --> 00:50:27.960
so you can check them out.


00:50:27.960 --> 00:50:29.820
Each of them works in a slightly different way.


00:50:29.820 --> 00:50:31.980
You can combine them, you can disable some stuff


00:50:31.980 --> 00:50:33.380
if you don't like.


00:50:33.380 --> 00:50:34.860
For example, I didn't like piling


00:50:34.860 --> 00:50:37.020
because it was too strict.


00:50:37.020 --> 00:50:39.460
Like when you had a class that had too many,


00:50:39.460 --> 00:50:42.460
too little, too few methods, it was saying like,


00:50:42.460 --> 00:50:44.580
well, this shouldn't be class and stuff like that.


00:50:44.580 --> 00:50:46.620
- Right, but you're putting it there


00:50:46.620 --> 00:50:49.600
'cause it's gonna get bigger in a month as the thing grows,


00:50:49.600 --> 00:50:53.020
but you're like putting that flexibility in now


00:50:53.020 --> 00:50:54.940
and it's gonna tell you, no, you shouldn't have it, right?


00:50:54.940 --> 00:50:57.140
Which is not necessarily the case.


00:50:57.140 --> 00:51:00.060
- Exactly, I mean, it's trying to make you write


00:51:00.060 --> 00:51:01.340
the most beautiful code,


00:51:01.340 --> 00:51:04.900
it's just sometimes I prefer my ugly code.


00:51:04.900 --> 00:51:06.900
- Yeah, well, yeah, for sure.


00:51:06.900 --> 00:51:08.340
And so a couple of other follow-ups,


00:51:08.340 --> 00:51:09.180
Patrick Leville says,


00:51:09.180 --> 00:51:11.860
"I love using black and flake eight with pre-commit."


00:51:11.860 --> 00:51:12.700
Very cool.


00:51:12.700 --> 00:51:17.220
So the thought, Doug had the same thought as I did


00:51:17.220 --> 00:51:19.380
that what he really likes about ID is like PyCharm


00:51:19.380 --> 00:51:21.700
and VS Code and the tools and plugins


00:51:21.700 --> 00:51:24.560
is that they basically do this while you're writing code.


00:51:24.560 --> 00:51:27.260
And to me, like I don't run Flake 8 separately.


00:51:27.260 --> 00:51:29.920
I just use PyCharm with all its settings turned on


00:51:29.920 --> 00:51:32.500
and it's super obvious if something's wrong.


00:51:32.500 --> 00:51:34.980
And actually what I did when I redid all my stuff


00:51:34.980 --> 00:51:38.340
with Sorcery, I went through like the 20,000 lines


00:51:38.340 --> 00:51:41.280
of Python code that are talked by them training.


00:51:41.280 --> 00:51:43.760
And I went and accepted every refactoring


00:51:43.760 --> 00:51:46.400
that Sorcery was giving me,


00:51:46.400 --> 00:51:49.320
except for that one that I don't like.


00:51:49.320 --> 00:51:50.360
And then while I was going through,


00:51:50.360 --> 00:51:53.520
I found there's a few PyCharm warnings


00:51:53.520 --> 00:51:54.360
that I had been ignoring.


00:51:54.360 --> 00:51:55.180
They were fine, but they're like,


00:51:55.180 --> 00:51:57.080
you really should do this other thing.


00:51:57.080 --> 00:51:58.960
And I just fixed everything


00:51:58.960 --> 00:52:00.920
and got it pristine and perfect.


00:52:00.920 --> 00:52:03.140
And so now I really pay attention to those warnings


00:52:03.140 --> 00:52:07.520
because there's no like leftover junk warnings.


00:52:07.520 --> 00:52:09.000
And I think that's actually a really big deal


00:52:09.000 --> 00:52:09.840
about a lot of this.


00:52:09.840 --> 00:52:12.160
And who was it over here?


00:52:12.160 --> 00:52:16.000
Someone, I don't see the comment and maybe I'll find it,


00:52:16.000 --> 00:52:19.320
but was asking basically, how hard do you enforce this?


00:52:19.320 --> 00:52:20.160
Yeah, here you go.


00:52:20.160 --> 00:52:23.320
And Chris it says, my pie and others should black


00:52:23.320 --> 00:52:24.360
be hard enforced?


00:52:24.360 --> 00:52:25.800
How strictly should you adhere to those?


00:52:25.800 --> 00:52:28.880
Like, for example, do you break continuous integration


00:52:28.880 --> 00:52:31.980
if some linter fails or something like that?


00:52:31.980 --> 00:52:34.520
- Yeah, that's a very good question.


00:52:34.520 --> 00:52:38.560
I think it's a matter of how the rest of the teams like it.


00:52:38.560 --> 00:52:41.380
I work with some teams that were very reluctant


00:52:41.380 --> 00:52:42.660
to use any of those tools.


00:52:42.660 --> 00:52:47.660
I work with some team leaders that said that CI has to work,


00:52:47.660 --> 00:52:52.380
your commit has to pass all the CI checks.


00:52:52.380 --> 00:52:54.220
So it's a matter of reference.


00:52:54.220 --> 00:52:57.440
I mean, tools are there to help you, not to hinder you.


00:52:57.440 --> 00:53:00.020
So if some tool doesn't work well for you,


00:53:00.020 --> 00:53:04.020
you should kind of configure it or maybe replace it.


00:53:04.020 --> 00:53:04.920
- Sure.


00:53:04.920 --> 00:53:07.820
So I know one question that we had.


00:53:07.820 --> 00:53:12.440
kind of queued up and some people maybe a little bit


00:53:12.440 --> 00:53:14.800
touched on it, but we haven't really talked about


00:53:14.800 --> 00:53:16.300
the language hardly at all, have we?


00:53:16.300 --> 00:53:17.920
Like using language features and stuff.


00:53:17.920 --> 00:53:21.080
So what do you think about things like hypens,


00:53:21.080 --> 00:53:24.400
like this, this kind of stuff?


00:53:24.400 --> 00:53:29.180
- Yeah, that's another sensitive topic.


00:53:29.180 --> 00:53:32.000
I would say they can be definitely useful.


00:53:32.000 --> 00:53:35.320
I mean, if you, especially if you have like a lot of code,


00:53:35.320 --> 00:53:39.300
some legacy code and being able to immediately see


00:53:39.300 --> 00:53:42.480
what are the argument types that the given function takes,


00:53:42.480 --> 00:53:44.160
what's the return value,


00:53:44.160 --> 00:53:47.640
what's the type of the return value a function returns


00:53:47.640 --> 00:53:50.880
in your code editor is super useful.


00:53:50.880 --> 00:53:53.640
And even though with Python, we have duck typing,


00:53:53.640 --> 00:53:56.800
so we can get quite far with this.


00:53:56.800 --> 00:54:01.040
There can be some subtle bugs that type hints can help you.


00:54:01.040 --> 00:54:05.560
But the thing with type hints is,


00:54:05.560 --> 00:54:07.760
well, my problem with type hints is the same problem


00:54:07.760 --> 00:54:09.480
as with test and documentation.


00:54:09.480 --> 00:54:11.140
It's not strictly a problem,


00:54:11.140 --> 00:54:13.840
but it's a yet another thing that you have to take care of.


00:54:13.840 --> 00:54:15.940
I'm not saying I don't like writing type hints,


00:54:15.940 --> 00:54:18.720
but for example, let's say you're writing code


00:54:18.720 --> 00:54:19.900
and then you have to add test,


00:54:19.900 --> 00:54:22.560
you have to have documentation and you have to have type hints


00:54:22.560 --> 00:54:24.020
and then you code changes


00:54:24.020 --> 00:54:26.080
and you have to update all three places.


00:54:26.080 --> 00:54:28.000
Because it's not only about updating test


00:54:28.000 --> 00:54:30.080
and documentation, you also have to make sure


00:54:30.080 --> 00:54:32.040
that your type hints are updated


00:54:32.040 --> 00:54:35.240
because you have wrong type hints, then they are useless.


00:54:35.240 --> 00:54:37.360
And of course there are tools like mypy,


00:54:37.360 --> 00:54:38.440
but they are external tools.


00:54:38.440 --> 00:54:40.200
So you have to configure them.


00:54:40.200 --> 00:54:42.400
And at the beginning, you'll probably have a lot of warnings


00:54:42.400 --> 00:54:43.280
and stuff like that.


00:54:43.280 --> 00:54:47.200
So I would say that type hints will give you back


00:54:47.200 --> 00:54:49.140
as much love as you give them.


00:54:49.140 --> 00:54:51.340
So if you spend time making sure


00:54:51.340 --> 00:54:53.800
that the type hints are properly declared,


00:54:53.800 --> 00:54:58.080
that you're not using any in all around your code,


00:54:58.080 --> 00:55:00.840
and they are going to be very, very useful.


00:55:00.840 --> 00:55:04.560
- Yeah, I absolutely love the type hints,


00:55:04.560 --> 00:55:07.440
but I think you should remain Pythonic


00:55:07.440 --> 00:55:08.740
as you think about using them.


00:55:08.740 --> 00:55:10.600
So I think there's two blends.


00:55:10.600 --> 00:55:12.960
One is you want to go down the mypy,


00:55:12.960 --> 00:55:16.120
have the checkers completely verify


00:55:16.120 --> 00:55:18.540
everything is absolutely hanging together


00:55:18.540 --> 00:55:21.840
like C# or C++ compilers do.


00:55:21.840 --> 00:55:24.400
Like it's 100%, this is an integer


00:55:24.400 --> 00:55:26.400
and everywhere it's an integer.


00:55:26.400 --> 00:55:28.060
So you like lay all that out.


00:55:28.060 --> 00:55:30.500
That's one way of using these.


00:55:30.500 --> 00:55:32.300
The other way, which is the way that I like,


00:55:32.300 --> 00:55:34.520
is put them on the boundaries, right?


00:55:34.520 --> 00:55:36.460
If I'm creating a package,


00:55:36.460 --> 00:55:38.100
and I wanna put that package on PyPI,


00:55:38.100 --> 00:55:42.460
it would be awesome if the public API of that package


00:55:42.460 --> 00:55:45.280
all had type hints or type annotations.


00:55:45.280 --> 00:55:47.640
Because then when I use it, I know automatically,


00:55:47.640 --> 00:55:49.100
my editor knows automatically,


00:55:49.100 --> 00:55:50.700
am I doing the right thing or the wrong thing


00:55:50.700 --> 00:55:53.540
without having to constantly dive into the documentation?


00:55:53.540 --> 00:55:57.380
Is this a string or a class that contains the information


00:55:57.380 --> 00:55:59.700
that I'm supposed to pass for location.


00:55:59.700 --> 00:56:03.980
All right, is that a quote, Portland, Oregon,


00:56:03.980 --> 00:56:06.700
or is it a location object,


00:56:06.700 --> 00:56:08.540
but those two things said, or a dictionary,


00:56:08.540 --> 00:56:09.820
or what the heck goes in here, right?


00:56:09.820 --> 00:56:12.100
Like those kinds of answers just go away instantly.


00:56:12.100 --> 00:56:13.220
And when you're using it wrong,


00:56:13.220 --> 00:56:16.180
your editors will like put some kind of squiggly


00:56:16.180 --> 00:56:18.380
or something and say, no, no, you're using it wrong.


00:56:18.380 --> 00:56:21.260
And I think that's the biggest value of type hints


00:56:21.260 --> 00:56:22.700
is like right in those boundaries


00:56:22.700 --> 00:56:25.420
where you may be unfamiliar with it or something,


00:56:25.420 --> 00:56:27.380
it'll really communicate that across.


00:56:27.380 --> 00:56:32.440
- Yeah, I wouldn't use type hints on like throwaway code,


00:56:32.440 --> 00:56:35.800
but I usually try to start to add them


00:56:35.800 --> 00:56:37.260
as my project grows bigger.


00:56:37.260 --> 00:56:38.500
So for like small project,


00:56:38.500 --> 00:56:40.380
it's easy to kind of understand what's going on,


00:56:40.380 --> 00:56:42.060
but as it keeps growing,


00:56:42.060 --> 00:56:46.960
it really pays off to start adding type hints.


00:56:46.960 --> 00:56:49.280
- Yeah, for sure.


00:56:49.280 --> 00:56:53.300
All right, we're getting short on our time here,


00:56:53.300 --> 00:56:55.320
but I know there's a couple of people who got in right,


00:56:55.320 --> 00:56:57.320
and we kind of skipped over it a little bit


00:56:57.320 --> 00:57:03.320
just because we were getting to the pre-requested questions first.


00:57:03.320 --> 00:57:06.320
But Patrick Lovile has one that I think is worth touching about.


00:57:06.320 --> 00:57:12.320
What do you think that good Python GUI development...


00:57:12.320 --> 00:57:14.320
Why do you think they're rare, especially for beginners?


00:57:14.320 --> 00:57:18.320
Seeing a real UI is way more motivating than terminal output.


00:57:18.320 --> 00:57:20.320
I agree that it is way more motivating,


00:57:20.320 --> 00:57:24.320
and I also agree that we're quite short on good UI development,


00:57:24.320 --> 00:57:27.360
GUI development options.


00:57:27.360 --> 00:57:28.680
Sebastian.


00:57:28.680 --> 00:57:30.240
- Yeah, same opinion.


00:57:30.240 --> 00:57:32.200
I was never using a lot of GUI,


00:57:32.200 --> 00:57:35.240
so I'm not very familiar how many tutorials are there,


00:57:35.240 --> 00:57:38.720
but I was building one for the course


00:57:38.720 --> 00:57:43.160
and I decided to use TKinter because it comes with Python.


00:57:43.160 --> 00:57:46.520
And there weren't that many tutorials, you're right.


00:57:46.520 --> 00:57:48.200
I found one that was very useful


00:57:48.200 --> 00:57:50.280
because it was showing a lot of different


00:57:51.880 --> 00:57:53.880
components of TKinter.


00:57:53.880 --> 00:57:59.160
But apart from that, I would say there weren't many


00:57:59.160 --> 00:58:03.800
showing you how to build some specific thing,


00:58:03.800 --> 00:58:06.980
the GUI, like a specific project or something like that.


00:58:06.980 --> 00:58:09.360
- Yeah.


00:58:09.360 --> 00:58:12.080
I just dream of the days when we got something like VB6


00:58:12.080 --> 00:58:14.960
or Windows Forms, it was in .NET,


00:58:14.960 --> 00:58:17.280
where you just have a nice UI thing.


00:58:17.280 --> 00:58:18.520
Oh, here's a button, here's a text box,


00:58:18.520 --> 00:58:19.960
you put it over there.


00:58:19.960 --> 00:58:21.400
You want code to run, you double click it.


00:58:21.400 --> 00:58:23.480
you write the three lines of code, you go back to working.


00:58:23.480 --> 00:58:25.600
Like you push a button, you get a thing


00:58:25.600 --> 00:58:27.400
that you distribute to people's applications.


00:58:27.400 --> 00:58:30.600
Like I don't really understand why we don't have


00:58:30.600 --> 00:58:32.280
something like that in Python,


00:58:32.280 --> 00:58:35.640
where it's sort of a visual layout, push a button,


00:58:35.640 --> 00:58:39.240
it does something Pi installer magic or Pi to app magic.


00:58:39.240 --> 00:58:40.720
Here's your app, give it to someone.


00:58:40.720 --> 00:58:42.800
Like that would be transformative.


00:58:42.800 --> 00:58:44.640
And we just, we don't have it.


00:58:44.640 --> 00:58:46.200
I think it's a bit of a chicken and egg thing,


00:58:46.200 --> 00:58:49.320
but you know, one can dream, one can dream.


00:58:49.320 --> 00:58:52.360
All right, Norbert Kirkpatrick also talks


00:58:52.360 --> 00:58:54.760
about some enterprise development stuff.


00:58:54.760 --> 00:58:57.980
Is what's your take on things like Azure Active Directory


00:58:57.980 --> 00:59:00.400
and security, DB encryption,


00:59:00.400 --> 00:59:03.800
major cloud platform deployments and so on.


00:59:03.800 --> 00:59:04.920
It's a bit of an open-ended one,


00:59:04.920 --> 00:59:06.760
but what are your thoughts generally?


00:59:06.760 --> 00:59:14.520
- I have almost no experience with Azure.


00:59:14.520 --> 00:59:17.360
And yeah, as you said, it's kind of a broad topic.


00:59:17.360 --> 00:59:21.520
So I don't really know what to say here.


00:59:21.520 --> 00:59:23.520
- I'll throw a few things out there.


00:59:23.520 --> 00:59:27.000
One, Azure Active Directory seems pretty interesting to me.


00:59:27.000 --> 00:59:28.600
One of the things that's an ultra pain


00:59:28.600 --> 00:59:32.540
is federated identity or trusting other people's identity.


00:59:32.540 --> 00:59:36.040
Like if I wanna let all of your users


00:59:36.040 --> 00:59:37.240
single sign on at your place


00:59:37.240 --> 00:59:38.640
and then single sign on at my site,


00:59:38.640 --> 00:59:40.680
like that's not an easy thing to do right now.


00:59:40.680 --> 00:59:43.840
And I think Azure Active Directory makes that quite easy.


00:59:43.840 --> 00:59:46.780
I haven't done a lot with it, but in that use case,


00:59:46.780 --> 00:59:48.340
I think it's pretty useful.


00:59:48.340 --> 00:59:50.660
I honestly don't do much with Active Directory at all,


00:59:50.660 --> 00:59:53.340
like corporate accounts and like, you know,


00:59:53.340 --> 00:59:55.140
building public web apps and things like that.


00:59:55.140 --> 00:59:57.700
So that they don't make sense in that world.


00:59:57.700 --> 01:00:00.820
Database encryption, very interesting.


01:00:00.820 --> 01:00:04.780
There's a lot of levels of this data encrypted at rest.


01:00:04.780 --> 01:00:05.900
Is it encrypted in memory?


01:00:05.900 --> 01:00:08.260
Is it encrypted in the response?


01:00:08.260 --> 01:00:09.940
You know, a lot of the modern databases


01:00:09.940 --> 01:00:11.500
have like encrypted columns.


01:00:11.500 --> 01:00:14.700
For example, MongoDB has different encrypted columns


01:00:14.700 --> 01:00:17.700
you can have and then certain clients as they talk to it,


01:00:17.700 --> 01:00:19.820
they either may or may not be permitted


01:00:19.820 --> 01:00:21.160
to decrypt that column.


01:00:21.160 --> 01:00:24.320
So it could return all the columns or values


01:00:24.320 --> 01:00:27.520
without overexposing the data potentially.


01:00:27.520 --> 01:00:30.100
And there's, I don't do anything like that,


01:00:30.100 --> 01:00:32.240
but also encrypting backups, right?


01:00:32.240 --> 01:00:34.160
Like, what do you think about,


01:00:34.160 --> 01:00:36.760
I got to take a backup of the database, now what?


01:00:36.760 --> 01:00:40.360
This is like the worst possible thing I could lose


01:00:40.360 --> 01:00:43.640
is the backup to the database, right?


01:00:43.640 --> 01:00:45.440
The only thing worse is letting people get access


01:00:45.440 --> 01:00:46.620
to the live database.


01:00:46.620 --> 01:00:50.720
I don't know, you got thoughts on that?


01:00:50.720 --> 01:00:51.960
Do you have any recommendations?


01:00:51.960 --> 01:00:54.000
I can tell people what I've been doing lately,


01:00:54.000 --> 01:00:56.280
but it's not perfect.


01:00:56.280 --> 01:00:58.240
- No, I will leave this question to you.


01:00:58.240 --> 01:01:01.640
- Yeah, so I've been using encrypted volumes.


01:01:01.640 --> 01:01:04.600
Like in Mac, you can create virtual encrypted volumes


01:01:04.600 --> 01:01:06.320
that you can just open and close,


01:01:06.320 --> 01:01:08.120
like highly, highly encrypted.


01:01:08.120 --> 01:01:10.000
And so, but it appears as a drive.


01:01:10.000 --> 01:01:12.080
So I've been doing my backups lately,


01:01:12.080 --> 01:01:16.480
straight to that thing, and then closing the encrypted vault


01:01:16.480 --> 01:01:18.880
when I'm not actively backing up a database.


01:01:18.880 --> 01:01:22.680
So then I put that somewhere safe.


01:01:22.680 --> 01:01:25.920
But if for some reason something were to happen to it,


01:01:25.920 --> 01:01:29.600
at least what they get hold of is an encrypted vault


01:01:29.600 --> 01:01:32.760
with a huge password that they probably can't mess with.


01:01:32.760 --> 01:01:34.480
So I don't know.


01:01:34.480 --> 01:01:37.280
Lots to think about, lots to be up late at night worrying


01:01:37.280 --> 01:01:39.960
about.


01:01:39.960 --> 01:01:42.040
Yeah, and then Vincent throws out there,


01:01:42.040 --> 01:01:43.280
we have VB style and Anvil.


01:01:43.280 --> 01:01:45.320
And yes, Anvil was certainly on my mind.


01:01:45.320 --> 01:01:47.200
I didn't quite call it out, but.


01:01:47.200 --> 01:01:49.760
- I forgot about it,


01:01:49.760 --> 01:01:51.800
but then I remembered them from some conferences.


01:01:51.800 --> 01:01:53.680
- Anvil is really interesting in that it has that.


01:01:53.680 --> 01:01:57.400
It's the thing that's different here is what you get is,


01:01:57.400 --> 01:01:58.340
Anvil is super neat,


01:01:58.340 --> 01:02:03.240
but you do get a specific type of web application.


01:02:03.240 --> 01:02:06.600
But if that specific type of web application works for you,


01:02:06.600 --> 01:02:08.560
then they do have this VB style,


01:02:08.560 --> 01:02:11.880
drag and drop, double click, run your code, which is absolutely beautiful.


01:02:11.880 --> 01:02:19.620
But if I wanted like, I don't know, to build Todoist or one password in


01:02:19.620 --> 01:02:25.520
Python, there's no real way to do that nicely, you know, let's see.


01:02:25.520 --> 01:02:26.180
Yeah, good.


01:02:26.180 --> 01:02:30.100
I think, I think one nice thing about Anvil is that it actually generates a


01:02:30.100 --> 01:02:32.420
nice, nice code that is readable.


01:02:32.420 --> 01:02:36.980
Cause the one problem I have with this, what you see is what you get text


01:02:36.980 --> 01:02:41.580
editors is that I remember them from the time when you were building websites like that.


01:02:41.580 --> 01:02:47.580
And the resulting HTML was an abomination. You just couldn't modify it by hand anymore.


01:02:47.580 --> 01:02:53.180
So I'm worried that if we get tools like that for Python, it's also going to result in like


01:02:53.180 --> 01:02:58.460
unreadable code. But I know that Anvil actually generates a pretty nice code.


01:02:58.460 --> 01:03:04.980
Yeah. I remember some of the tools you would look at the, here's the auto-generated code.


01:03:04.980 --> 01:03:07.460
and it was like, basically there's giant comments.


01:03:07.460 --> 01:03:09.180
Don't touch this, don't try to read this,


01:03:09.180 --> 01:03:10.720
just leave it alone.


01:03:10.720 --> 01:03:11.720
Any attempt to mess with it


01:03:11.720 --> 01:03:13.820
will probably just break everything.


01:03:13.820 --> 01:03:14.940
Don't touch it.


01:03:14.940 --> 01:03:16.460
Yeah, so cool.


01:03:16.460 --> 01:03:19.460
Yeah, Doug also thinks Anvil is awesome.


01:03:19.460 --> 01:03:21.140
Yeah, very cool.


01:03:21.140 --> 01:03:23.380
And it used to be it had to run on the Anvil cloud.


01:03:23.380 --> 01:03:25.140
I believe they've open sourced their runtime


01:03:25.140 --> 01:03:26.820
so you can like self-host it and stuff.


01:03:26.820 --> 01:03:28.260
That's worth checking out.


01:03:28.260 --> 01:03:33.260
And then, I don't know, maybe this is the last comment.


01:03:33.260 --> 01:03:34.700
I'd see maybe one more out there.


01:03:34.700 --> 01:03:37.120
worth throwing out something out there.


01:03:37.120 --> 01:03:40.920
But Kristen says, "Are there any courses out there


01:03:40.920 --> 01:03:41.860
"that teach you how to get started


01:03:41.860 --> 01:03:42.840
"with a lot of what we're talking about


01:03:42.840 --> 01:03:44.640
"without any background knowledge?"


01:03:44.640 --> 01:03:49.000
I certainly will give another shout out to your course,


01:03:49.000 --> 01:03:50.840
Sebastian, Modern Python Projects,


01:03:50.840 --> 01:03:52.200
over at Talk Python Training.


01:03:52.200 --> 01:03:56.240
That is definitely a great course


01:03:56.240 --> 01:03:57.760
that goes deep into all these things,


01:03:57.760 --> 01:04:00.280
like nine hours of conversation of like,


01:04:00.280 --> 01:04:03.840
here's my screen, let's go do these things.


01:04:03.840 --> 01:04:06.640
Is it with no background knowledge?


01:04:06.640 --> 01:04:09.000
I mean, you do have to know Python, right, to do this.


01:04:09.000 --> 01:04:12.220
So basically what are the assumptions for your course?


01:04:12.220 --> 01:04:16.040
- You have to know Python and that's it.


01:04:16.040 --> 01:04:17.800
I show you a lot of those tools,


01:04:17.800 --> 01:04:19.760
but I always start from scratch.


01:04:19.760 --> 01:04:24.760
Like I even had like a empty macOS account,


01:04:24.760 --> 01:04:28.760
so I made sure that I don't miss some dependencies


01:04:28.760 --> 01:04:29.640
and stuff like that.


01:04:29.640 --> 01:04:32.160
I also like spin up a Windows VM


01:04:32.160 --> 01:04:33.720
for some parts that required Windows.


01:04:33.720 --> 01:04:37.020
So I think you should be good with just knowing Python.


01:04:37.020 --> 01:04:39.060
- Yeah.


01:04:39.060 --> 01:04:42.680
Okay, a couple of real quick ones here.


01:04:42.680 --> 01:04:45.960
Doug says, "Oh man, yes, Visual Python would be amazing.


01:04:45.960 --> 01:04:46.940
I like Visual Basic."


01:04:46.940 --> 01:04:47.780
I agree.


01:04:47.780 --> 01:04:51.640
And then THP says, "Fman build system is a pretty cool."


01:04:51.640 --> 01:04:54.600
Fman is a pretty cool UI in the Fman build system


01:04:54.600 --> 01:04:58.680
for building those things up and distributed.


01:04:58.680 --> 01:04:59.520
And that's pretty interesting.


01:04:59.520 --> 01:05:01.960
I haven't done anything with Fman, have you?


01:05:01.960 --> 01:05:03.760
- No, first time I heard the name.


01:05:03.760 --> 01:05:08.480
- Yeah, it's like a file management tool,


01:05:08.480 --> 01:05:10.760
I believe in Python, the person who created it


01:05:10.760 --> 01:05:12.200
then also built this build system


01:05:12.200 --> 01:05:13.480
and this UI on top of it.


01:05:13.480 --> 01:05:14.700
So pretty interesting.


01:05:14.700 --> 01:05:20.060
Let's see, there's another one from Joan.


01:05:20.060 --> 01:05:24.840
Is Cort and its async capabilities ready


01:05:24.840 --> 01:05:27.760
to level up Flask web apps for medium-sized enterprises


01:05:27.760 --> 01:05:29.760
or currently better to stick with Flask?


01:05:31.320 --> 01:05:32.920
I have no experience with Quart,


01:05:32.920 --> 01:05:35.280
so I don't know, what about you, Michael?


01:05:35.280 --> 01:05:36.120
- None.


01:05:36.120 --> 01:05:38.720
I mean, I've talked, I interviewed the guy who did it,


01:05:38.720 --> 01:05:42.580
and I've played around with it, and it seems okay,


01:05:42.580 --> 01:05:45.360
but at enterprise, like, it's gotta be, you know,


01:05:45.360 --> 01:05:48.720
five nines level of up, I've never run anything like that.


01:05:48.720 --> 01:05:51.780
Honestly, if I was really, really looking to build a web app


01:05:51.780 --> 01:05:54.320
with async capability, I would either look at


01:05:54.320 --> 01:05:56.160
FastAPI or Starlet.


01:05:56.160 --> 01:05:59.440
Like, I know people might think, oh, with FastAPI,


01:05:59.440 --> 01:06:03.600
That's an API thing, not a web thing, but to be honest,


01:06:03.600 --> 01:06:07.560
you know, it can be, definitely can be done.


01:06:07.560 --> 01:06:10.480
And I actually built a whole class on how to take FastAPI


01:06:10.480 --> 01:06:12.600
and sort of replace Flask with it.


01:06:12.600 --> 01:06:14.880
So it's not that hard.


01:06:14.880 --> 01:06:17.160
It supports templates, supports static files,


01:06:17.160 --> 01:06:18.740
all those kinds of things.


01:06:18.740 --> 01:06:19.580
It is super cool.


01:06:19.580 --> 01:06:22.080
And yeah, thanks Norbert for the shout out


01:06:22.080 --> 01:06:24.400
on the 10 apps course.


01:06:24.400 --> 01:06:26.320
That's really a fun one.


01:06:26.320 --> 01:06:27.700
But yeah, so I think actually,


01:06:27.700 --> 01:06:30.460
If I was trying to go all in on async,


01:06:30.460 --> 01:06:32.980
I feel like FastAPI is one of the best


01:06:32.980 --> 01:06:35.220
async frameworks out there.


01:06:35.220 --> 01:06:37.300
It's just, it all holds together really, really well.


01:06:37.300 --> 01:06:40.180
So, yeah.


01:06:40.180 --> 01:06:43.900
All right.


01:06:43.900 --> 01:06:45.760
Anything else we want to cover?


01:06:45.760 --> 01:06:50.220
Yeah, I think that that might be it.


01:06:50.220 --> 01:06:52.180
Sebastian, you want to just maybe give us


01:06:52.180 --> 01:06:55.600
some wrap up thoughts here on this whole idea?


01:06:55.600 --> 01:07:01.000
- Well, thank you for coming and thank you for those questions.


01:07:01.000 --> 01:07:02.880
They were really great.


01:07:02.880 --> 01:07:05.640
And I hope we answered all of them.


01:07:05.640 --> 01:07:09.400
And I don't know what else to say.


01:07:09.400 --> 01:07:10.400
- Yeah.


01:07:10.400 --> 01:07:11.400
Well, I think...


01:07:11.400 --> 01:07:12.400
- Thank you, Michael.


01:07:12.400 --> 01:07:16.880
- Yeah, I think, you know, there's so much variety.


01:07:16.880 --> 01:07:19.120
I've worked in different technologies over the years.


01:07:19.120 --> 01:07:21.240
I've been doing development like 25 years or so.


01:07:21.240 --> 01:07:28.360
And some of the time you'll find some language or some ecosystem where there's a sort of


01:07:28.360 --> 01:07:33.200
a central, like this is how you do things, like specifically in the Microsoft space with


01:07:33.200 --> 01:07:36.520
.NET, I go, here's the one web framework you use.


01:07:36.520 --> 01:07:41.760
Here's the one database ORM you use to talk to the one database you use.


01:07:41.760 --> 01:07:45.120
And while that's really helpful, that like, well, now I know what to do.


01:07:45.120 --> 01:07:46.620
I do these four things and I'm good.


01:07:46.620 --> 01:07:47.800
This is the recommended way.


01:07:47.800 --> 01:07:49.800
In Python, we don't have that.


01:07:49.800 --> 01:07:56.000
And that's absolutely a blessing, but it's something of a curse as well, in that there's


01:07:56.000 --> 01:07:57.800
this paradox of choice, right?


01:07:57.800 --> 01:07:58.800
Oh, it's amazing.


01:07:58.800 --> 01:08:00.160
We have this cool ORM library.


01:08:00.160 --> 01:08:01.160
Oh, wait, there's 10.


01:08:01.160 --> 01:08:04.680
Well, if there's 10 ORM libraries, which one should I choose?


01:08:04.680 --> 01:08:06.760
And we're having this conversation, should we use Flask?


01:08:06.760 --> 01:08:07.760
Should we use FastAPI?


01:08:07.760 --> 01:08:09.760
Should we use court on top of Flask?


01:08:09.760 --> 01:08:10.760
Should we use Django?


01:08:10.760 --> 01:08:16.760
Like you can just go on and on and on about all the trade offs that you have to make.


01:08:16.760 --> 01:08:23.040
And so I think one of the big challenges is choosing a path


01:08:23.040 --> 01:08:24.120
and then going down it.


01:08:24.120 --> 01:08:29.280
Choosing-- say, I'm going to use Poetry, Flask, MicroWizKey,


01:08:29.280 --> 01:08:31.880
let's go, or something like that.


01:08:31.880 --> 01:08:35.040
Whatever your branch that you happen to follow,


01:08:35.040 --> 01:08:36.340
I think that's a big challenge.


01:08:36.340 --> 01:08:40.160
And maybe I'll throw out one more thing for people


01:08:40.160 --> 01:08:44.280
out there on the live stream, if I can pull it up quick enough,


01:08:44.280 --> 01:08:49.280
is awesome-python.com, or awesome-python.com.


01:08:49.280 --> 01:08:53.440
This kind of helps at least narrow that list, right?


01:08:53.440 --> 01:08:55.940
So for example, if I'm interested in caching,


01:08:55.940 --> 01:09:00.500
like here are probably the eight most popular


01:09:00.500 --> 01:09:02.520
caching libraries that you might use


01:09:02.520 --> 01:09:03.360
or something like that.


01:09:03.360 --> 01:09:05.440
It's not perfect, but at least it gives you


01:09:05.440 --> 01:09:07.240
some way to explore when you're totally new.


01:09:07.240 --> 01:09:09.600
'Cause I think that that's one of the big challenges here,


01:09:09.600 --> 01:09:12.680
Sebastian, is not that there are not enough choices,


01:09:12.680 --> 01:09:16.440
but there are so many choices at each step of the way


01:09:16.440 --> 01:09:19.840
that that's a challenge, right?


01:09:19.840 --> 01:09:22.880
There's the T-shirt, I learned Python in the weekend.


01:09:22.880 --> 01:09:24.080
It was, I learned Python.


01:09:24.080 --> 01:09:25.560
It was a great weekend, right?


01:09:25.560 --> 01:09:27.160
Like that's funny and also kind of true


01:09:27.160 --> 01:09:28.400
at the language level,


01:09:28.400 --> 01:09:30.080
but I don't know about how you feel Sebastian.


01:09:30.080 --> 01:09:32.760
I'm still learning Python after so many years


01:09:32.760 --> 01:09:33.600
and all day.


01:09:33.600 --> 01:09:36.520
- Yeah, same here and like tools come and go.


01:09:36.520 --> 01:09:39.040
I bet in like five years,


01:09:39.040 --> 01:09:41.920
this list will be completely different than it is now.


01:09:41.920 --> 01:09:45.780
So it's definitely important to spend some time


01:09:45.780 --> 01:09:48.460
trying to figure out which tool you should use.


01:09:48.460 --> 01:09:49.880
'Cause as you said, with Python,


01:09:49.880 --> 01:09:52.960
you can mix and match different tools.


01:09:52.960 --> 01:09:54.940
And sometimes there are like no tutorials


01:09:54.940 --> 01:09:56.880
explaining how to do things.


01:09:56.880 --> 01:09:58.920
Sometimes the tool might get popular,


01:09:58.920 --> 01:10:03.220
but then it's abandoned and it's no longer maintained.


01:10:03.220 --> 01:10:07.180
So yeah, I mean, a lot of tools to choose from.


01:10:07.180 --> 01:10:10.280
- Yeah, I guess we'll leave with that.


01:10:10.280 --> 01:10:12.920
There's a lot of tools to choose from,


01:10:12.920 --> 01:10:14.660
and we've covered a bunch of options


01:10:14.660 --> 01:10:15.620
and a lot of trade-offs here.


01:10:15.620 --> 01:10:19.200
So Sebastian, it's been great to chat with you about that.


01:10:19.200 --> 01:10:21.200
Thanks for coming on the live stream.


01:10:21.200 --> 01:10:22.040
- Thank you.


01:10:22.040 --> 01:10:23.960
Likewise, it was great to talk with you.


01:10:23.960 --> 01:10:24.800
- Yeah, you as well.


01:10:24.800 --> 01:10:26.520
And thank you everyone for all the questions,


01:10:26.520 --> 01:10:29.480
those who emailed them in previously and the live ones.


01:10:29.480 --> 01:10:31.320
It was a great conversation.


01:10:31.320 --> 01:10:32.800
See you around next time.


01:10:32.800 --> 01:10:34.080
- Thanks for coming.


01:10:34.080 --> 01:10:34.920
Bye guys.


01:10:34.920 --> 01:10:35.760
Thank you.


01:10:35.760 --> 01:10:45.760
[BLANK_AUDIO]

