WEBVTT

00:00:00.000 --> 00:00:04.040
- Hey Samuel, welcome back to Talk Python To Me.

00:00:04.040 --> 00:00:06.720
- Thank you, thank you very much for having me again.

00:00:06.720 --> 00:00:08.520
So soon after last time.

00:00:08.520 --> 00:00:11.760
- Yeah, it's always amazing to have you on.

00:00:11.760 --> 00:00:15.100
In fact, you were on just last week

00:00:15.100 --> 00:00:20.100
in a really cool show that tons of people enjoyed

00:00:20.100 --> 00:00:22.600
and is not yet out at the time of recording,

00:00:22.600 --> 00:00:24.760
but will be released to the world

00:00:24.760 --> 00:00:26.960
by the time your show goes out live.

00:00:26.960 --> 00:00:30.400
So it's a bit of a time travel thing, very appropriate here.

00:00:30.400 --> 00:00:35.400
But it was under the full-time open source developers panel

00:00:35.400 --> 00:00:38.080
of like a bunch of folks, for example,

00:00:38.080 --> 00:00:43.080
Charlie Marsh, Will McGugan, Gina Houska, and so on, right?

00:00:43.080 --> 00:00:48.520
And you snuck in for a minute there on your travels,

00:00:48.520 --> 00:00:51.520
but now you're back and we're here to talk properly

00:00:51.520 --> 00:00:54.560
about something really excellent that you put together

00:00:55.640 --> 00:01:00.240
called Fast UI, which is gonna be a lot of fun.

00:01:00.240 --> 00:01:01.680
- Yeah, thanks so much for having me.

00:01:01.680 --> 00:01:03.880
And yeah, I'm in a slightly better environment

00:01:03.880 --> 00:01:08.000
for a podcast than the stairwell of a restaurant

00:01:08.000 --> 00:01:09.920
in somewhere in Istanbul.

00:01:09.920 --> 00:01:11.840
So yeah, it's nice to be back.

00:01:11.840 --> 00:01:14.600
- High marks for effort there, come on, that was great.

00:01:14.600 --> 00:01:19.000
- It was, yeah, it was good fun, but it was, yeah,

00:01:19.000 --> 00:01:21.360
this is a better place to talk about these things.

00:01:21.360 --> 00:01:22.720
- Yeah, well, I hope you had a good trip

00:01:22.720 --> 00:01:26.160
and that you're back and at it.

00:01:26.160 --> 00:01:27.360
Kim out in the audience points out,

00:01:27.360 --> 00:01:29.240
"Hey, could you just write another impressive tool

00:01:29.240 --> 00:01:30.280
for the next week's show?"

00:01:30.280 --> 00:01:34.160
'Cause things are going pretty prolifically over there.

00:01:34.160 --> 00:01:36.320
You tell people a bit about Pydantic,

00:01:36.320 --> 00:01:38.280
the company, they probably heard of the library,

00:01:38.280 --> 00:01:40.400
but just what are you up to these days?

00:01:40.400 --> 00:01:42.520
- Yeah, so Pydantic's obviously been around

00:01:42.520 --> 00:01:46.440
since 2017 originally, but then it's like,

00:01:46.440 --> 00:01:48.560
something weird happened at the beginning of 2021.

00:01:48.560 --> 00:01:51.720
I don't know quite what that was, but like Pydantic,

00:01:51.720 --> 00:01:53.520
like the downloads just like went crazy.

00:01:53.520 --> 00:01:55.120
So we were at like 5 million downloads then,

00:01:55.120 --> 00:01:57.160
and we're now at 130 million.

00:01:57.160 --> 00:01:59.800
So like the, yeah, it's gone crazy.

00:01:59.800 --> 00:02:02.440
And then just a bit more than a year ago,

00:02:02.440 --> 00:02:04.720
I was very lucky, Sequoia got in touch with me

00:02:04.720 --> 00:02:07.720
and basically said that I wanna start a company.

00:02:07.720 --> 00:02:11.560
I had been meaning to do that after I released Pydantic V2

00:02:11.560 --> 00:02:13.760
that I was then working on, but yeah,

00:02:13.760 --> 00:02:16.480
I started the company beginning of this year

00:02:16.480 --> 00:02:20.720
and now have an amazing team of 10 people working with me.

00:02:20.720 --> 00:02:22.640
So we released Pydantic V2 finally,

00:02:22.640 --> 00:02:23.480
having originally told people

00:02:23.480 --> 00:02:25.840
it would take me alone three months.

00:02:25.840 --> 00:02:29.280
It took me and I guess then six people, a year in total,

00:02:29.280 --> 00:02:32.840
but that was released back in the summer.

00:02:32.840 --> 00:02:35.960
And now we're working on a platform

00:02:35.960 --> 00:02:37.160
that I'm not gonna talk about now,

00:02:37.160 --> 00:02:39.360
but I would love it if you'd have me back,

00:02:39.360 --> 00:02:41.200
I guess beginning of Q2.

00:02:41.200 --> 00:02:43.280
- Is that next week or whatever?

00:02:43.280 --> 00:02:44.560
- It's not quite next week.

00:02:44.560 --> 00:02:47.360
- Q2 2024, something like that.

00:02:47.360 --> 00:02:49.840
- Yeah, I think we're gonna try and get to open beta

00:02:49.840 --> 00:02:52.360
in Q1, so yeah.

00:02:52.360 --> 00:02:53.520
- Okay, fantastic.

00:02:53.520 --> 00:02:55.800
Yeah, well.

00:02:55.800 --> 00:02:58.800
- But off the back of, so that,

00:02:58.800 --> 00:03:00.840
without getting into a lot of details on it,

00:03:00.840 --> 00:03:04.600
has a platform component to it.

00:03:04.600 --> 00:03:06.080
And so we have people,

00:03:06.080 --> 00:03:08.320
people will be logging in, et cetera, et cetera.

00:03:08.320 --> 00:03:11.440
And I was just thinking about all of the path

00:03:11.440 --> 00:03:16.440
and the churn of building the relatively mechanical bits

00:03:16.440 --> 00:03:19.280
of an application again,

00:03:19.280 --> 00:03:20.560
with, it doesn't matter actually,

00:03:20.560 --> 00:03:22.800
if you're building it with React

00:03:22.800 --> 00:03:24.600
or with one of the other front-end frameworks,

00:03:24.600 --> 00:03:26.240
you end up having a whole bunch of stuff

00:03:26.240 --> 00:03:30.040
that's duplicated between what the front-end guys are doing

00:03:30.040 --> 00:03:31.800
and what the full-stack developers

00:03:31.800 --> 00:03:34.920
or the backend developers are building for us.

00:03:34.920 --> 00:03:35.760
And I guess for lots of people,

00:03:35.760 --> 00:03:37.680
there's a Pydantic model that's kind of at the core

00:03:37.680 --> 00:03:39.080
of lots of those bits.

00:03:39.080 --> 00:03:41.200
And I was just dreading all of that churn.

00:03:41.200 --> 00:03:43.000
And I had been wanting to build something

00:03:43.000 --> 00:03:45.360
like a fast UI for a long time,

00:03:45.360 --> 00:03:48.160
but the fact that we're gonna be using it internally

00:03:48.160 --> 00:03:50.800
really spurred me on to go and get it built

00:03:50.800 --> 00:03:54.720
and release it in a very incomplete phase

00:03:54.720 --> 00:03:55.600
to see what people thought.

00:03:55.600 --> 00:03:58.440
And yeah, there's been a great reaction and here I am.

00:03:58.440 --> 00:04:01.680
- Yeah, there has been quite the reaction to it.

00:04:01.680 --> 00:04:05.320
Let's see, do the GitHub star test.

00:04:05.320 --> 00:04:10.320
It's 2.6 thousand stars and it's what, two weeks old?

00:04:10.320 --> 00:04:12.040
- Yeah. - A month old?

00:04:12.040 --> 00:04:14.680
Yeah, a month old, last month anyway.

00:04:14.680 --> 00:04:16.400
- Well, it was only released publicly,

00:04:16.400 --> 00:04:18.320
but yeah, two weeks, less than two weeks ago.

00:04:18.320 --> 00:04:19.160
- Oh, that's right.

00:04:19.160 --> 00:04:21.040
Yeah, you probably, so you worked on it

00:04:21.040 --> 00:04:23.200
a little bit private and then you flipped the bit

00:04:23.200 --> 00:04:25.520
on the public status.

00:04:25.520 --> 00:04:27.920
Yeah, that makes a lot of sense.

00:04:27.920 --> 00:04:28.960
'Cause you don't want people just to go,

00:04:28.960 --> 00:04:30.160
whoa, what are they building?

00:04:30.160 --> 00:04:31.000
I mean, maybe you do.

00:04:31.000 --> 00:04:33.200
Maybe you're like, what is this GitHub repo?

00:04:33.200 --> 00:04:36.000
They misspelled FastAPI.

00:04:36.000 --> 00:04:38.120
I don't know what they're working on.

00:04:38.120 --> 00:04:39.120
- Yeah, exactly.

00:04:39.120 --> 00:04:42.160
And also, I mean, we have a team with lots of people

00:04:42.160 --> 00:04:43.160
who've done lots of open source,

00:04:43.160 --> 00:04:45.960
very strongly opinionated engineers.

00:04:45.960 --> 00:04:48.360
I can't even get my team to use it

00:04:48.360 --> 00:04:50.320
without kind of proving the value in it.

00:04:50.320 --> 00:04:52.160
So I worked on it a bit without really talking to them.

00:04:52.160 --> 00:04:54.680
And then was like, right, I built this thing.

00:04:54.680 --> 00:04:57.040
Let's at least give it a try.

00:04:57.040 --> 00:04:59.720
'Cause I don't know, maybe I'm wrong in this,

00:04:59.720 --> 00:05:03.240
but I think it's quite a fundamentally different way

00:05:03.240 --> 00:05:06.320
of thinking about how you build user interfaces

00:05:06.320 --> 00:05:09.400
from lots of the tools that exist today

00:05:09.400 --> 00:05:10.480
in the Python ecosystem.

00:05:10.480 --> 00:05:13.160
And so there's a bit of a like education piece

00:05:13.160 --> 00:05:15.200
and trying to understand the principle,

00:05:15.200 --> 00:05:18.520
as well as the like mechanics of going and using it.

00:05:18.520 --> 00:05:19.880
- Yeah, absolutely.

00:05:19.880 --> 00:05:22.160
Well, we're gonna dive into the philosophy,

00:05:22.160 --> 00:05:26.400
but I'll give people the TL, too long, didn't read version.

00:05:26.400 --> 00:05:31.880
Basically, you can create UIs in pure Python

00:05:31.880 --> 00:05:36.880
in sort of dynamic web framework friendly ways, right?

00:05:36.880 --> 00:05:41.080
- Yeah, so the thing that I think,

00:05:41.080 --> 00:05:43.280
and maybe I think that probably the mistake

00:05:43.280 --> 00:05:44.480
is in my description of it,

00:05:44.480 --> 00:05:46.680
because yes, it does that,

00:05:46.680 --> 00:05:49.440
but where I personally think FastUI is powerful

00:05:49.440 --> 00:05:52.840
and where we're using it within the Pydantic team

00:05:52.840 --> 00:05:56.080
is actually, we have got front end developers.

00:05:56.080 --> 00:05:57.640
We've got some really expert guys

00:05:57.640 --> 00:06:01.080
like who are very comfortable building stuff in React.

00:06:01.080 --> 00:06:04.960
But we don't want those two roles

00:06:04.960 --> 00:06:07.240
to have to constantly communicate

00:06:07.240 --> 00:06:08.920
to build every individual bit.

00:06:08.920 --> 00:06:11.520
So the idea is, I think if you go down the page a little bit,

00:06:11.520 --> 00:06:12.480
I kind of explained it,

00:06:12.480 --> 00:06:15.400
but for a Python developer,

00:06:15.400 --> 00:06:17.360
it's this way of building UIs

00:06:17.360 --> 00:06:20.480
without having to touch TypeScript or JavaScript or NPM

00:06:20.480 --> 00:06:25.480
or any of those Byzantine like massive build tools.

00:06:25.480 --> 00:06:26.880
But then for a front end developer,

00:06:26.880 --> 00:06:28.560
it's this opportunity to go and build

00:06:28.560 --> 00:06:30.360
the best components you can

00:06:30.360 --> 00:06:34.040
and allow, basically provide a powerful interface

00:06:34.040 --> 00:06:37.240
for your backend guys to go and build a UI with it.

00:06:37.240 --> 00:06:39.960
To kind of split those two things up

00:06:39.960 --> 00:06:44.000
and I guess allow React to do what React does brilliantly,

00:06:44.000 --> 00:06:47.720
which is provide these reusable components.

00:06:47.720 --> 00:06:48.920
- Yeah, absolutely.

00:06:48.920 --> 00:06:52.360
Kind of a framework as well to bring the navigation

00:06:52.360 --> 00:06:55.080
and the cohesion of the whole app together,

00:06:55.080 --> 00:06:57.120
not just a particular view or a page too,

00:06:57.120 --> 00:06:58.320
you would say, right?

00:06:58.320 --> 00:06:59.280
- Yeah, yeah.

00:06:59.280 --> 00:07:04.280
So the weird bit is this principle of RESTful interfaces.

00:07:08.440 --> 00:07:10.360
We've all heard of RESTful

00:07:10.360 --> 00:07:11.440
and we all think we know what it means,

00:07:11.440 --> 00:07:14.720
which is basically something to do with the URL structure

00:07:14.720 --> 00:07:18.360
and return me some JSON that gives me the data I need

00:07:18.360 --> 00:07:19.560
to render my view.

00:07:19.560 --> 00:07:24.040
Well, if you look at Roy Fielding's original PhD,

00:07:24.040 --> 00:07:26.480
as is brilliantly described in this HTMX article

00:07:26.480 --> 00:07:28.600
that I talk about further on down here,

00:07:28.600 --> 00:07:30.000
he's not really talking about that stuff.

00:07:30.000 --> 00:07:32.920
Sure, he has some stuff on what the URL structure should be,

00:07:32.920 --> 00:07:36.760
but really his principle is that the data returned

00:07:36.760 --> 00:07:39.320
from the backend should be self-describing,

00:07:39.320 --> 00:07:41.720
as if it should have everything you need

00:07:41.720 --> 00:07:43.320
to go and render the user interface.

00:07:43.320 --> 00:07:45.080
So let's say, I think that he,

00:07:45.080 --> 00:07:46.960
they're using the HTMX example,

00:07:46.960 --> 00:07:50.160
example of like a bank account.

00:07:50.160 --> 00:07:54.640
And if you go down to like principle, the long version,

00:07:54.640 --> 00:07:55.480
here we are, right?

00:07:55.480 --> 00:07:57.440
I've linked to the PhD, but more importantly,

00:07:57.440 --> 00:08:00.080
the HTMX article, which explains it really well.

00:08:00.080 --> 00:08:01.120
So I think if we follow that, yeah,

00:08:01.120 --> 00:08:03.320
I think they'll even on that page,

00:08:03.320 --> 00:08:04.360
he'll have, there's a very,

00:08:04.360 --> 00:08:06.200
have a jokey tone lots of the time HTMX,

00:08:06.200 --> 00:08:08.720
but they also talk about some really cool things.

00:08:08.720 --> 00:08:09.760
- Yeah, absolutely. - Somewhere I think

00:08:09.760 --> 00:08:11.360
they have, yeah, here we are, right?

00:08:11.360 --> 00:08:14.680
So if you look at the traditional JSON response,

00:08:14.680 --> 00:08:16.280
which I think is the second one,

00:08:16.280 --> 00:08:20.760
and you were trying to show, yeah, right.

00:08:20.760 --> 00:08:24.400
So this, you and I as humans can read this and be like,

00:08:24.400 --> 00:08:26.160
yeah, that kind of explains my bank account

00:08:26.160 --> 00:08:28.280
and what's going on, but there was not enough information.

00:08:28.280 --> 00:08:30.120
- It's got like an account number and a balance,

00:08:30.120 --> 00:08:31.680
which is a more complicated object,

00:08:31.680 --> 00:08:33.960
nested objects and those types of things.

00:08:33.960 --> 00:08:35.440
- Right, it's got all the things that we can,

00:08:35.440 --> 00:08:37.200
we can read account number, cool, that's a number,

00:08:37.200 --> 00:08:39.120
balance, yeah, that makes sense.

00:08:39.120 --> 00:08:41.920
But if your computer, there's not enough there

00:08:41.920 --> 00:08:43.880
to go and render someone the nice user interface

00:08:43.880 --> 00:08:45.520
they would want where they would have it

00:08:45.520 --> 00:08:46.680
displayed on a page.

00:08:46.680 --> 00:08:49.280
So if you were the engineering team in the bank

00:08:49.280 --> 00:08:54.040
trying to turn this into a web interface,

00:08:54.040 --> 00:08:57.000
you then need to go and have lots of very

00:08:57.000 --> 00:09:00.400
application specific or page specific logic

00:09:00.400 --> 00:09:01.880
to show where the account number goes

00:09:01.880 --> 00:09:04.040
and where the balance goes and where the status goes

00:09:04.040 --> 00:09:05.040
and stuff like that.

00:09:05.640 --> 00:09:07.360
And that causes enormous amounts of churn

00:09:07.360 --> 00:09:09.400
and it means that it's particularly difficult

00:09:09.400 --> 00:09:11.480
for when you have those engineers working

00:09:11.480 --> 00:09:13.560
in different time zones because you end up

00:09:13.560 --> 00:09:15.240
having this spec between the two.

00:09:15.240 --> 00:09:17.720
And then you always have this problem with software

00:09:17.720 --> 00:09:19.000
where fine, we can get it to work,

00:09:19.000 --> 00:09:21.040
but what happens when we come to add it?

00:09:21.040 --> 00:09:23.760
So what's the process of, let's say we want to show

00:09:23.760 --> 00:09:28.200
as well on this page, your like joint account balance,

00:09:28.200 --> 00:09:29.880
let's say, just to make something up.

00:09:29.880 --> 00:09:31.400
What we probably need to do is we need to get

00:09:31.400 --> 00:09:35.240
back end guys to go and add that to the end point

00:09:35.240 --> 00:09:37.800
and then the front end, and that can be deployed

00:09:37.800 --> 00:09:40.160
and then the front end can be updated to show that

00:09:40.160 --> 00:09:41.440
and the data's available.

00:09:41.440 --> 00:09:44.720
That is lots of churn, lots of delay in that.

00:09:44.720 --> 00:09:45.840
So the principle--

00:09:45.840 --> 00:09:49.400
- Lots of coordination between the two domain experts

00:09:49.400 --> 00:09:52.200
and then it kinda, you got that microservice cascading

00:09:52.200 --> 00:09:55.800
like it's gotta do this, then this one's gotta be upgraded

00:09:55.800 --> 00:09:59.360
and then eventually there's enough flow of data

00:09:59.360 --> 00:10:02.880
through the system that the UI people can put it up there.

00:10:02.880 --> 00:10:06.120
- Right, and it's bad in this case of like

00:10:06.120 --> 00:10:08.200
showing your bank balance, but it gets even worse

00:10:08.200 --> 00:10:11.600
when you have a form where every field in the form

00:10:11.600 --> 00:10:14.720
needs to be completed, for example.

00:10:14.720 --> 00:10:17.160
And so we basically have to deploy the front end

00:10:17.160 --> 00:10:19.200
that has all of the form components and the back end

00:10:19.200 --> 00:10:22.280
that receives that new form at the same time.

00:10:22.280 --> 00:10:26.920
And we've got this Pydantic model that if we,

00:10:26.920 --> 00:10:28.400
depending on how we've done it,

00:10:28.400 --> 00:10:30.080
probably is used to define our form

00:10:30.080 --> 00:10:32.960
and it might even be used to define our database.

00:10:32.960 --> 00:10:36.000
But like we're not using a Pydantic model in the front end.

00:10:36.000 --> 00:10:40.160
TypeScript, in my opinion, is big Achilles heel in typing

00:10:40.160 --> 00:10:41.160
is that you don't have any,

00:10:41.160 --> 00:10:42.960
you can't use type into runtime.

00:10:42.960 --> 00:10:46.720
And so we don't have an equivalent of Pydantic

00:10:46.720 --> 00:10:49.800
and so we're basically trusting that data is how it is.

00:10:49.800 --> 00:10:53.920
And so yeah, FastAPI is an attempt, sorry,

00:10:53.920 --> 00:10:57.440
FastUI is an attempt to basically remove that need

00:10:58.040 --> 00:11:02.520
to like have complete synchronization

00:11:02.520 --> 00:11:03.600
between back end and front end

00:11:03.600 --> 00:11:07.800
by having beautifully designed components in the front end.

00:11:07.800 --> 00:11:09.560
Not saying what we have now is that beautiful,

00:11:09.560 --> 00:11:11.080
but that's the idea long-term.

00:11:11.080 --> 00:11:14.720
But then the back end can basically just,

00:11:14.720 --> 00:11:18.160
can do the orchestration, can say, show me a table,

00:11:18.160 --> 00:11:20.760
show me a form, show me a modal

00:11:20.760 --> 00:11:23.120
and put the following content in it, et cetera.

00:11:23.120 --> 00:11:25.120
- Excellent.

00:11:26.360 --> 00:11:27.960
Nice comment from Tony on the audience says,

00:11:27.960 --> 00:11:31.040
"I originally started in Python and went to use in TypeScript

00:11:31.040 --> 00:11:34.720
Pydantic made the transition back to Python so nice."

00:11:34.720 --> 00:11:38.360
And so in your description, you also have up here

00:11:38.360 --> 00:11:42.280
that this Pydantic is interesting, is involved here.

00:11:42.280 --> 00:11:44.840
Like what is the role that Pydantic plays?

00:11:44.840 --> 00:11:48.600
- Right, so the idea is that we're getting to,

00:11:48.600 --> 00:11:53.600
of this RESTful UI is really that we end up having

00:11:54.520 --> 00:11:57.920
a bunch of components in a shared definition

00:11:57.920 --> 00:11:59.120
of some components.

00:11:59.120 --> 00:12:00.840
And we basically promise that the back end

00:12:00.840 --> 00:12:05.480
is gonna send data that matches the types defined

00:12:05.480 --> 00:12:06.560
in the front end.

00:12:06.560 --> 00:12:09.040
Well, that's all very well, but if you're not careful,

00:12:09.040 --> 00:12:10.800
you end up not sending quite the right data.

00:12:10.800 --> 00:12:13.200
So what's nice is that all of the components

00:12:13.200 --> 00:12:16.160
that you can return from fast UI

00:12:16.160 --> 00:12:18.200
are themselves Pydantic models.

00:12:18.200 --> 00:12:22.040
And so Pydantic goes off and does not only the validation,

00:12:22.040 --> 00:12:23.240
but also the coercion.

00:12:23.240 --> 00:12:25.240
And it does stuff like uses camel case

00:12:25.240 --> 00:12:26.880
so that front end developers are happy

00:12:26.880 --> 00:12:30.080
'cause we've got every, no underscores anywhere.

00:12:30.080 --> 00:12:32.760
And so yeah, all of the front end,

00:12:32.760 --> 00:12:35.680
sorry, the backend code for fast UI is basically,

00:12:35.680 --> 00:12:40.120
is just Pydantic models, which implement these components.

00:12:40.120 --> 00:12:46.160
So it might be useful for those who can see this to go in

00:12:46.160 --> 00:12:47.680
and I can talk through an example.

00:12:47.680 --> 00:12:52.080
If we go into the code here and I can talk you through

00:12:52.080 --> 00:12:53.600
like a very basic component,

00:12:53.600 --> 00:12:55.360
oh, maybe it'd be easier if I showed it here.

00:12:55.360 --> 00:12:59.120
So I've got the code base open here.

00:12:59.120 --> 00:13:00.160
I'm just working on something,

00:13:00.160 --> 00:13:05.040
but if I open up here, source and then the Python package,

00:13:05.040 --> 00:13:07.160
and then we look into components

00:13:07.160 --> 00:13:09.440
and we can look at like a really simple component,

00:13:09.440 --> 00:13:12.640
probably a button, which would be a kind of understandable

00:13:12.640 --> 00:13:13.840
to everyone, where's button?

00:13:13.840 --> 00:13:14.800
Here we are.

00:13:14.800 --> 00:13:17.520
So this is just a plain Pydantic model,

00:13:17.520 --> 00:13:19.840
which contains text, which is the text you would put

00:13:19.840 --> 00:13:21.120
within the button.

00:13:21.120 --> 00:13:23.320
Then it contains the event that you wanna fire

00:13:23.320 --> 00:13:27.640
when someone clicks on it and HTML type,

00:13:27.640 --> 00:13:31.120
which matches what you can get in HTML,

00:13:31.120 --> 00:13:34.200
button, reset, submits, and then class name,

00:13:34.200 --> 00:13:36.600
which becomes the classes that get applied.

00:13:36.600 --> 00:13:39.200
And then critically this type, which is a literal,

00:13:39.200 --> 00:13:40.600
which has to be button.

00:13:40.600 --> 00:13:44.880
And that is used by the discriminated union in Pydantic

00:13:44.880 --> 00:13:47.400
to do the validation of different types.

00:13:47.400 --> 00:13:50.160
And it's also used by a big switch statement

00:13:50.160 --> 00:13:54.200
in the TypeScript to basically decide what component

00:13:54.200 --> 00:13:57.200
I'll go and render when I get back an object.

00:13:57.200 --> 00:14:00.600
- Right, so there's some TypeScript,

00:14:00.600 --> 00:14:04.240
maybe it makes sense to talk a bit about

00:14:04.240 --> 00:14:06.000
the building blocks.

00:14:06.000 --> 00:14:08.720
So you say FastUI is made up of four things,

00:14:08.720 --> 00:14:11.120
just so people can get a sense of like,

00:14:11.120 --> 00:14:12.800
what's at play here?

00:14:12.800 --> 00:14:15.080
- Right, so the four things that we have now

00:14:15.080 --> 00:14:18.760
are a PyPI package, a Python package called FastUI,

00:14:18.760 --> 00:14:21.800
which I was just showing you there the types for.

00:14:21.800 --> 00:14:26.800
And then we have a NPM package called FastUI again,

00:14:26.800 --> 00:14:29.100
it's in the Pydantic organization,

00:14:29.100 --> 00:14:34.160
which is where the meat of the logic resides.

00:14:34.160 --> 00:14:36.240
And that's implementing basically

00:14:36.240 --> 00:14:41.080
the most of the components and all of the wiring

00:14:41.080 --> 00:14:43.400
to mean that when I return a button,

00:14:43.400 --> 00:14:45.840
the button component gets rendered.

00:14:45.840 --> 00:14:49.040
And then, but obviously, we don't probably want to end up

00:14:49.040 --> 00:14:52.800
using a vanilla button when we come to display it.

00:14:52.800 --> 00:14:56.960
So then I've implemented a basic customization

00:14:56.960 --> 00:14:59.840
of the FastUI React library using Bootstrap.

00:14:59.840 --> 00:15:02.280
So all that's really doing is it's deciding what classes

00:15:02.280 --> 00:15:05.840
to append to use with each component

00:15:05.840 --> 00:15:07.480
and also just customizing a few of them.

00:15:07.480 --> 00:15:09.880
So for example, modal, there's no like nice way

00:15:09.880 --> 00:15:10.880
to do a vanilla modal.

00:15:10.880 --> 00:15:13.280
So the modal implementation in the default

00:15:13.280 --> 00:15:16.680
FastUI NPM package just basically shows me alert

00:15:16.680 --> 00:15:18.360
saying this isn't implemented,

00:15:18.360 --> 00:15:21.400
whereas the Bootstrap one uses a nice Bootstrap modal.

00:15:21.400 --> 00:15:24.400
And then we have finally FastUI prebuilt,

00:15:24.400 --> 00:15:28.560
which basically uses the FastUI package,

00:15:28.560 --> 00:15:30.640
customizes it with FastUI Bootstrap,

00:15:30.640 --> 00:15:31.880
and then builds it.

00:15:31.880 --> 00:15:36.320
And that means we can go and basically return

00:15:36.320 --> 00:15:39.720
that prebuilt React app without having to get our hands

00:15:39.720 --> 00:15:43.680
dirty with NPM on Yarn and Vite and all the other--

00:15:43.680 --> 00:15:48.400
- All the web packy bundling minifying,

00:15:48.400 --> 00:15:51.000
transpiling business.

00:15:51.000 --> 00:15:55.640
- But the cool bit, in my opinion, of FastUI is that

00:15:55.640 --> 00:15:58.480
at its core, it's really the definition

00:15:58.480 --> 00:16:02.560
of a bunch of different schemas effectively.

00:16:02.560 --> 00:16:04.720
The schemas are defined in Pydantic

00:16:04.720 --> 00:16:07.080
and they're defined in TypeScript,

00:16:07.080 --> 00:16:09.440
but they could perfectly well be,

00:16:09.440 --> 00:16:13.120
and really nicely, I just merged it the other day,

00:16:13.120 --> 00:16:16.320
we now use the JSON schema generated by Pydantic

00:16:16.320 --> 00:16:21.320
and JSON schema generated by the React types

00:16:21.320 --> 00:16:24.680
to basically go and test that there's an equivalence

00:16:24.680 --> 00:16:26.920
between those two, those models everywhere.

00:16:26.920 --> 00:16:28.720
But in theory, there's nothing to stop the front end

00:16:28.720 --> 00:16:31.120
from being built with another JavaScript library

00:16:31.120 --> 00:16:34.520
or even with something like HTML and HTMX,

00:16:34.520 --> 00:16:37.540
or even you could go and use React Native and build,

00:16:37.540 --> 00:16:40.600
or even some kind of embedded device.

00:16:40.600 --> 00:16:42.680
You could go and implement those components.

00:16:42.680 --> 00:16:45.280
And then on the other side, and this is even more achievable,

00:16:45.280 --> 00:16:49.520
you could go and return data that matches those models

00:16:49.520 --> 00:16:54.520
from a Rust or Go service, and in theory,

00:16:54.520 --> 00:16:56.000
not have to change your UI at all,

00:16:56.000 --> 00:16:58.320
because all you're doing is I promise that I'm gonna match

00:16:58.320 --> 00:17:02.160
these schemas and then whatever front end

00:17:02.160 --> 00:17:04.620
and whatever back end can then communicate.

00:17:04.620 --> 00:17:06.940
Whether that comes to pass, I don't know yet.

00:17:06.940 --> 00:17:10.160
And obviously I built the default back end in Python

00:17:10.160 --> 00:17:11.120
'cause that's what I know best

00:17:11.120 --> 00:17:13.560
and where I think Pydantic's really helpful.

00:17:13.560 --> 00:17:17.440
And I built the first front end in React and TypeScript

00:17:17.440 --> 00:17:18.440
'cause one, that's what I know,

00:17:18.440 --> 00:17:20.280
and two, it's what we're using within Pydantic.

00:17:20.280 --> 00:17:23.960
But lots of people have asked about HTMX.

00:17:23.960 --> 00:17:27.660
People have also asked about Svelte and others.

00:17:27.660 --> 00:17:30.360
I think I wouldn't see the point in building

00:17:30.360 --> 00:17:33.400
a fast UI in Vue because I don't think it adds much.

00:17:33.400 --> 00:17:34.840
It's just a lot of work.

00:17:34.840 --> 00:17:36.560
But I think there's a world where we build

00:17:36.560 --> 00:17:41.560
a HTMX template rendered version of fast UIs front end

00:17:41.560 --> 00:17:43.680
that could be super valuable.

00:17:43.680 --> 00:17:44.800
- That's interesting.

00:17:44.800 --> 00:17:49.120
So first point is these different components

00:17:49.120 --> 00:17:52.200
sound like they are potentially a little mix and match.

00:17:52.200 --> 00:17:53.800
You could take it all as one big thing,

00:17:53.800 --> 00:17:56.180
or you could say, I really like the way it defines

00:17:56.180 --> 00:17:58.920
the React front end, but we're gonna implement it

00:17:58.920 --> 00:18:01.000
in some other endpoint.

00:18:01.000 --> 00:18:05.200
- Yeah, I think it's something like,

00:18:05.200 --> 00:18:07.160
it'll be slightly skewed now because of tests,

00:18:07.160 --> 00:18:10.520
but I'd say it's sort of twice as much

00:18:10.520 --> 00:18:14.280
front end to back end at the moment as in the,

00:18:14.280 --> 00:18:15.500
yeah, it's skewed a bit by tests,

00:18:15.500 --> 00:18:17.040
but even now there's more TypeScript.

00:18:17.040 --> 00:18:19.260
So I think the simplest thing to do,

00:18:19.260 --> 00:18:21.000
and you could do it pretty trivially,

00:18:21.000 --> 00:18:22.800
would be to use another back end,

00:18:22.800 --> 00:18:27.280
another language for your back end service.

00:18:27.280 --> 00:18:29.560
And as long as it matches those types,

00:18:29.560 --> 00:18:31.800
and you could even go and use something like JSON Schema

00:18:31.800 --> 00:18:32.760
to enforce that.

00:18:32.760 --> 00:18:38.180
But yeah, re-implementing the front end,

00:18:38.180 --> 00:18:40.320
probably a bigger piece of work, but totally doable.

00:18:40.320 --> 00:18:42.680
I mean, I did it in my spare time in two weeks,

00:18:42.680 --> 00:18:43.520
built the whole thing.

00:18:43.520 --> 00:18:46.040
So it's not millions of different things.

00:18:46.040 --> 00:18:47.680
There's kind of 20 components at the moment

00:18:47.680 --> 00:18:49.280
that are then composable to build

00:18:49.280 --> 00:18:51.800
reasonably sophisticated UIs.

00:18:51.800 --> 00:18:56.380
- So this is a web front end.

00:18:57.060 --> 00:19:01.580
Like Flask or Django sort of framework,

00:19:01.580 --> 00:19:04.580
but a way that really incorporates building the UI

00:19:04.580 --> 00:19:08.480
in Python and validating and enforcing that with PyDandic,

00:19:08.480 --> 00:19:12.100
rather than just, hey, file new HTML.

00:19:12.100 --> 00:19:14.460
Let's just start typing and hope they line up.

00:19:14.460 --> 00:19:18.140
Instead of trying to juggle all those different languages,

00:19:18.140 --> 00:19:22.980
CSS, HTML, all the JavaScript tooling for packing up stuff,

00:19:22.980 --> 00:19:24.700
just let's write Python, right?

00:19:24.700 --> 00:19:28.300
So maybe you got a simple example of what it looks like

00:19:28.300 --> 00:19:33.300
to define a real simple example here on the readme.

00:19:33.300 --> 00:19:39.620
It's got a very interesting parity

00:19:39.620 --> 00:19:41.980
between what is in the HTML DOM

00:19:41.980 --> 00:19:46.340
and is what is in the Python abstract syntax tree,

00:19:46.340 --> 00:19:48.540
I guess, right?

00:19:48.540 --> 00:19:50.740
And visually as well, the way you look at the code,

00:19:50.740 --> 00:19:53.700
it looks like the way it might look in HTML.

00:19:53.700 --> 00:19:56.740
Like give us a sense of what writing a UI

00:19:56.740 --> 00:19:58.220
in this would look like.

00:19:58.220 --> 00:19:59.500
- Right, so I think the first of all,

00:19:59.500 --> 00:20:01.420
we have to talk about like the two enormous,

00:20:01.420 --> 00:20:03.820
the two most obvious pitfalls for this.

00:20:03.820 --> 00:20:07.140
One end of the pitfall you have,

00:20:07.140 --> 00:20:09.460
which I think is the biggest temptation

00:20:09.460 --> 00:20:14.060
is to basically mirror all of HTML in Python.

00:20:14.060 --> 00:20:16.540
And for those of us who are happy writing HTML

00:20:16.540 --> 00:20:18.500
or writing React, that sounds like hell.

00:20:18.500 --> 00:20:19.940
It's gonna be slow because you have to do

00:20:19.940 --> 00:20:22.500
some weird rendering, but it's also just gonna be a pig

00:20:22.500 --> 00:20:25.020
because I don't wanna have to define every A,

00:20:25.020 --> 00:20:30.020
H ref and everything else in Python code.

00:20:30.020 --> 00:20:32.660
It says, and there are gonna be,

00:20:32.660 --> 00:20:35.100
it requires for start, it requires you to know two things,

00:20:35.100 --> 00:20:37.540
Python and HTML, whereas to write HTML,

00:20:37.540 --> 00:20:39.620
you only need to know one.

00:20:39.620 --> 00:20:41.380
- Yeah, and also I always find these things

00:20:41.380 --> 00:20:46.180
that try to dodge, like dodge the fact that HTML exists.

00:20:46.180 --> 00:20:47.820
I find them, I don't know, I just,

00:20:47.820 --> 00:20:48.820
they don't resonate with me.

00:20:48.820 --> 00:20:50.420
I'm not entirely sure why.

00:20:50.420 --> 00:20:53.820
It's like, we have really nice things like CSS

00:20:53.820 --> 00:20:58.140
and we have really, there's just so much tooling

00:20:58.140 --> 00:21:02.700
and frameworks, you mentioned BruteStrap already, right?

00:21:02.700 --> 00:21:03.780
That just plug into there.

00:21:03.780 --> 00:21:06.460
And if it's like, well, we're just gonna write,

00:21:06.460 --> 00:21:07.660
recreate it in Python.

00:21:07.660 --> 00:21:09.940
Well, it has all the oddities of HTML

00:21:09.940 --> 00:21:12.540
if it's gonna be really high parity.

00:21:12.540 --> 00:21:15.420
And then you just have a less well-known way

00:21:15.420 --> 00:21:16.540
to do the same weird thing.

00:21:16.540 --> 00:21:17.540
You know, I don't know, it just,

00:21:17.540 --> 00:21:19.380
it doesn't resonate super with me.

00:21:19.380 --> 00:21:22.580
- I agree, and I found the same thing at times with ORMs,

00:21:22.580 --> 00:21:24.900
that you end up, the worst case of an ORM

00:21:24.900 --> 00:21:27.340
is you work out what you need to do in SQL,

00:21:27.340 --> 00:21:30.380
then you try and translate back from SQL to ORM,

00:21:30.380 --> 00:21:32.820
and it would be much nicer just to write my SQL.

00:21:32.820 --> 00:21:33.660
I mean, not always the case.

00:21:33.660 --> 00:21:36.260
ORMs can be powerful, but I think that they both

00:21:36.260 --> 00:21:39.380
can fall into the same trap if you're not careful.

00:21:39.380 --> 00:21:41.420
And then I was gonna say, at the far end of the spectrum,

00:21:41.420 --> 00:21:43.740
the other end of the spectrum, you have,

00:21:43.740 --> 00:21:46.260
and I guess Django's admin view,

00:21:46.260 --> 00:21:48.100
for understandable reasons, could suffer from this,

00:21:48.100 --> 00:21:49.840
that you basically have a very small set of things.

00:21:49.840 --> 00:21:53.140
You have a table page and a details page

00:21:53.140 --> 00:21:54.900
and a form page, and that's kind of it, right?

00:21:54.900 --> 00:21:56.780
So there's this difficult trade-off,

00:21:56.780 --> 00:21:58.820
and where in that continuum do we try

00:21:58.820 --> 00:22:02.200
to choose what size of component to implement, right?

00:22:02.200 --> 00:22:04.900
So for example, here we have a heading,

00:22:04.900 --> 00:22:07.180
which is almost one-for-one matches

00:22:07.180 --> 00:22:08.420
what you would do in HTML.

00:22:08.420 --> 00:22:10.300
We have the text that goes within it,

00:22:10.300 --> 00:22:11.980
and we have the level, which, you know,

00:22:11.980 --> 00:22:13.340
it's slightly different syntax,

00:22:13.340 --> 00:22:17.220
but it's basically one-for-one matching an HTML tag.

00:22:17.220 --> 00:22:20.220
But then we have a table, which,

00:22:20.220 --> 00:22:22.860
it doesn't look very much like an HTML table at all.

00:22:22.860 --> 00:22:25.660
We're not having to explicitly define

00:22:25.660 --> 00:22:27.740
the table body versus the table head,

00:22:27.740 --> 00:22:29.640
we're not having to put in each column,

00:22:29.640 --> 00:22:31.100
we're not having to worry, yeah,

00:22:31.100 --> 00:22:33.540
there's lots of stuff here that is much less like it.

00:22:33.540 --> 00:22:38.360
And that's where, it's in these very common components

00:22:38.360 --> 00:22:40.220
where there is consistent things

00:22:40.220 --> 00:22:41.660
that lots of people wanna do,

00:22:41.660 --> 00:22:44.260
or lots of places in your app where you might wanna do them,

00:22:44.260 --> 00:22:47.020
where I think a framework like FastUI

00:22:47.020 --> 00:22:50.300
gets super powerful because we can get you a table

00:22:50.300 --> 00:22:53.940
here with users defined,

00:22:53.940 --> 00:22:56.300
and with a few columns with some customization

00:22:56.300 --> 00:22:57.980
on what happens when you,

00:22:57.980 --> 00:23:00.540
how we render each column much more quickly

00:23:00.540 --> 00:23:03.020
than we could go write out all the HTML for that.

00:23:03.020 --> 00:23:04.900
And it's much more concise to read,

00:23:04.900 --> 00:23:10.100
it's consistent enough that something like

00:23:10.100 --> 00:23:12.260
GitHub Copilot will help you write it out

00:23:12.260 --> 00:23:14.380
where you do have a bit of customization to do.

00:23:14.380 --> 00:23:16.740
I think this is where it can be super powerful.

00:23:16.740 --> 00:23:21.140
- It is pretty interesting, and I like the hierarchy.

00:23:21.140 --> 00:23:23.460
For people listening, just check out

00:23:23.460 --> 00:23:25.980
github.com/pydanics/fastui,

00:23:25.980 --> 00:23:27.700
the example right there on the page.

00:23:27.700 --> 00:23:31.180
But what you do is you create a,

00:23:31.180 --> 00:23:34.420
in this case, a FastAPI, API endpoint,

00:23:34.420 --> 00:23:39.020
and then you return a hierarchy of elements out of FastUI.

00:23:39.020 --> 00:23:41.460
So we have a page, the page has components,

00:23:41.460 --> 00:23:44.660
the components are a list of a header and a table,

00:23:44.660 --> 00:23:48.060
the table has data, which maps over to a list

00:23:48.060 --> 00:23:51.060
of pydantic models, which then help say

00:23:51.060 --> 00:23:55.340
what goes in the field and for the column headings

00:23:55.340 --> 00:23:57.380
and things like that.

00:23:57.380 --> 00:24:00.020
It's pretty interesting, I think it's neat.

00:24:00.020 --> 00:24:02.260
- Yeah, thank you.

00:24:02.260 --> 00:24:03.700
And obviously we can add other components

00:24:03.700 --> 00:24:05.340
like pagination that works.

00:24:05.340 --> 00:24:07.020
I think just to come back to the top,

00:24:07.020 --> 00:24:09.060
to how we do these views.

00:24:09.060 --> 00:24:11.620
The very simple, and it's most simple

00:24:11.620 --> 00:24:14.660
what FastUI's React app does,

00:24:14.660 --> 00:24:17.060
is it basically takes whatever the URL is you go to,

00:24:17.060 --> 00:24:20.500
so in this case you might go to slash, to the base URL,

00:24:20.500 --> 00:24:25.020
and it prepends slash API and makes a request

00:24:25.020 --> 00:24:28.260
to that endpoint to basically say, what should I render?

00:24:28.260 --> 00:24:31.740
And it gets back, so this, here we're basically returning

00:24:31.740 --> 00:24:35.820
a list of pydantic models, all that the FastUI model

00:24:35.820 --> 00:24:38.580
is really doing is taking that list of pydantic models

00:24:38.580 --> 00:24:41.700
and calling model dump JSON on it

00:24:41.700 --> 00:24:45.260
to get the JSON that we return to the front end.

00:24:45.260 --> 00:24:48.340
As I say, the front end then knows how to render

00:24:48.340 --> 00:24:51.620
each of those, each dictionary in the list

00:24:51.620 --> 00:24:52.860
is what it is at its core.

00:24:52.860 --> 00:24:55.220
At its core, it's a list of objects

00:24:55.220 --> 00:24:58.420
to use JavaScript parlance, and it just knows

00:24:58.420 --> 00:25:00.940
how to render each of them and renders each of them in turn.

00:25:00.940 --> 00:25:04.740
And then obviously they can then have nested other models,

00:25:04.740 --> 00:25:07.100
all of which it knows how to render.

00:25:07.100 --> 00:25:10.800
- Yeah, absolutely, it reminds me of a couple of things.

00:25:10.800 --> 00:25:14.300
I have an example of this, no, somewhere along here,

00:25:14.300 --> 00:25:19.140
I pulled it up, it reminds me of kind of what React

00:25:19.140 --> 00:25:20.980
looks like, people have done React, you know,

00:25:20.980 --> 00:25:25.980
you write a function that returns kind of an HTML thing,

00:25:25.980 --> 00:25:30.420
but then it has JavaScript arrow functions, right?

00:25:30.420 --> 00:25:34.580
But it has the same nested feel, right?

00:25:34.580 --> 00:25:36.940
Did React inspire you to create it this way,

00:25:36.940 --> 00:25:38.980
or not really?

00:25:38.980 --> 00:25:41.220
- Yeah, it did, I've done quite a lot of React,

00:25:41.220 --> 00:25:43.300
and I like it a lot, I know there are,

00:25:43.300 --> 00:25:45.020
as a popular piece of technology,

00:25:45.020 --> 00:25:49.220
there are lots of people who like to berate it,

00:25:49.220 --> 00:25:51.940
but I do think React's been a powerful step forward,

00:25:51.940 --> 00:25:55.820
and the greatest form of flattery is copying,

00:25:55.820 --> 00:25:58.220
and there are enough other, like, sure,

00:25:58.220 --> 00:26:00.600
there are other more powerful, arguably more powerful,

00:26:00.600 --> 00:26:03.320
arguably more performant new front end libraries,

00:26:03.320 --> 00:26:05.940
but everything is component-based now.

00:26:05.940 --> 00:26:09.380
Like, React has changed, changed the sea change

00:26:09.380 --> 00:26:12.420
in how we did front end with that component architecture,

00:26:12.420 --> 00:26:14.940
and JSX, similarly, is super powerful.

00:26:14.940 --> 00:26:17.580
- So, one of the things that I think,

00:26:17.580 --> 00:26:19.260
we're gonna get to, I don't wanna dive into it yet,

00:26:19.260 --> 00:26:20.840
but like, in React, you would say, like,

00:26:20.840 --> 00:26:24.460
we're gonna return a photo context,

00:26:24.460 --> 00:26:27.980
or a switch, or something that is not typically known

00:26:27.980 --> 00:26:30.900
in HTML, and these are higher order building blocks

00:26:30.900 --> 00:26:32.060
in the UI space, right?

00:26:32.060 --> 00:26:36.660
So, when people think about what they're creating here

00:26:36.660 --> 00:26:41.260
in Python, it's not just the fundamental DOM objects

00:26:41.260 --> 00:26:42.500
and elements, is it?

00:26:42.500 --> 00:26:44.220
- Right, so that is actually, yeah.

00:26:44.220 --> 00:26:46.740
So, page here is a bit of ambiguity

00:26:46.740 --> 00:26:48.740
about how we're gonna define a page.

00:26:48.740 --> 00:26:50.980
Like, default implementation does something

00:26:50.980 --> 00:26:54.500
reasonably sensible, it like, you know, pads it, et cetera,

00:26:54.500 --> 00:26:58.740
but like, heading, there isn't much to do, really.

00:26:58.740 --> 00:26:59.680
You're gonna return a heading,

00:26:59.680 --> 00:27:01.340
but when you come to a table,

00:27:01.340 --> 00:27:04.700
there's a lot of debate about how you're gonna do that.

00:27:04.700 --> 00:27:06.340
And then, when you move on to like,

00:27:06.340 --> 00:27:09.540
even higher order components, like a modal,

00:27:09.540 --> 00:27:12.820
then that's, how exactly that's implemented is,

00:27:12.820 --> 00:27:15.180
you know, in some sense, it's completely the choice

00:27:15.180 --> 00:27:16.780
of how you've implemented it in the front end.

00:27:16.780 --> 00:27:18.300
You could do lots of different things,

00:27:18.300 --> 00:27:21.600
but yeah, the whole point is that it doesn't,

00:27:21.600 --> 00:27:26.060
and shouldn't be, like, each HTML tag is written out,

00:27:26.060 --> 00:27:27.780
'cause as I say, I think that would be a like,

00:27:27.780 --> 00:27:30.460
obvious failure mode for this.

00:27:30.460 --> 00:27:31.900
- Yeah, yeah.

00:27:31.900 --> 00:27:34.100
The other thing this reminds me of, by the way,

00:27:34.100 --> 00:27:36.840
just for people out there listening, is,

00:27:36.840 --> 00:27:40.540
it looks a lot like a Flutter.

00:27:40.540 --> 00:27:42.180
If people have done any Flutter,

00:27:42.180 --> 00:27:45.140
you've got these widget hierarchies.

00:27:45.140 --> 00:27:47.620
You build them, you maybe set some properties,

00:27:47.620 --> 00:27:51.220
you add in a bunch of elements, you know,

00:27:51.220 --> 00:27:55.140
set some children to an array of other sub elements,

00:27:55.140 --> 00:27:56.540
and this is done, of course, in Dart,

00:27:56.540 --> 00:28:01.100
but it's, you know, this is kind of a Python version

00:28:01.100 --> 00:28:03.620
that's similar as well, these higher order widgets.

00:28:03.620 --> 00:28:04.980
- Yeah, absolutely, similar thing,

00:28:04.980 --> 00:28:07.820
and actually, the other place where I've built this before

00:28:07.820 --> 00:28:10.340
is that internally, Pydantic core,

00:28:10.340 --> 00:28:13.020
the Rust bit of Pydantic is effectively

00:28:13.020 --> 00:28:14.540
not entirely different to this, right?

00:28:14.540 --> 00:28:18.740
You define these nested structures of different validators.

00:28:18.740 --> 00:28:22.100
Everything at its core is a, like, combined validator,

00:28:22.100 --> 00:28:24.460
which is, in Rust terms, an enormous enum

00:28:24.460 --> 00:28:26.180
of all the different types of validator,

00:28:26.180 --> 00:28:27.660
some of which have nested within them,

00:28:27.660 --> 00:28:30.980
or more validators, and that's how you build up

00:28:30.980 --> 00:28:33.380
nested structures of Pydantic models,

00:28:33.380 --> 00:28:34.940
which, in turn, is what these are.

00:28:34.940 --> 00:28:36.740
We're getting a bit-- - Right.

00:28:36.740 --> 00:28:38.500
Yeah, the validators and the UI,

00:28:38.500 --> 00:28:41.340
they kind of, like, have a similar structure.

00:28:41.340 --> 00:28:43.940
Bit of a sidebar, just a bit of piece of code in here,

00:28:43.940 --> 00:28:46.380
you've got table, which is a class,

00:28:46.380 --> 00:28:50.220
square bracket, user, which is another class,

00:28:50.220 --> 00:28:51.980
square bracket.

00:28:51.980 --> 00:28:53.980
I imagine that you and your team

00:28:53.980 --> 00:28:56.060
are deeper into the Python type system

00:28:56.060 --> 00:29:00.620
than the vast majority of others out there,

00:29:00.620 --> 00:29:02.100
with all the work with Pydantic

00:29:02.100 --> 00:29:04.420
and the interoperability with Rust.

00:29:04.420 --> 00:29:05.300
What is that?

00:29:05.300 --> 00:29:06.940
Tell people about this.

00:29:06.940 --> 00:29:08.980
- Yeah, so table is a generic.

00:29:08.980 --> 00:29:11.740
So you can imagine if you were doing list of ints,

00:29:11.740 --> 00:29:14.140
you would do list, square bracket, int,

00:29:14.140 --> 00:29:16.900
and that's basically, the point is that list

00:29:16.900 --> 00:29:19.980
is a generic around its elements,

00:29:19.980 --> 00:29:22.660
same as a dict is generic around its keys and its values,

00:29:22.660 --> 00:29:26.220
while table here is generic around the Pydantic model

00:29:26.220 --> 00:29:31.220
that you're using for each row.

00:29:31.220 --> 00:29:34.180
And particularly what that means is that,

00:29:34.180 --> 00:29:37.380
what it means practically is that table has access

00:29:37.380 --> 00:29:41.740
to the class when it's deciding

00:29:41.740 --> 00:29:42.980
what the default columns are.

00:29:42.980 --> 00:29:45.580
So if you don't define the columns list as we have here

00:29:45.580 --> 00:29:47.420
to say what columns to display,

00:29:47.420 --> 00:29:50.620
it'll show all of the fields in the Pydantic model.

00:29:50.620 --> 00:29:53.420
And the point is we get access to that to the user

00:29:53.420 --> 00:29:58.300
before we've, even if data was empty

00:29:58.300 --> 00:30:00.540
or before the validation has happened.

00:30:00.540 --> 00:30:02.540
Is it necessary?

00:30:02.540 --> 00:30:05.540
Is it slightly like, yeah,

00:30:05.540 --> 00:30:08.660
fancy use of Pydantic types, Python types, maybe it is.

00:30:08.660 --> 00:30:12.540
But yeah, forgive the Pydantic team or me in particular

00:30:12.540 --> 00:30:15.140
for occasionally doing fancy things with Python types.

00:30:15.140 --> 00:30:17.580
That is definitely occupational hazards of what we do.

00:30:17.580 --> 00:30:19.940
- Yeah, I didn't mean it as a negative.

00:30:19.940 --> 00:30:21.380
I just thought it was interesting.

00:30:21.380 --> 00:30:22.220
- No, I agree.

00:30:22.220 --> 00:30:24.620
And actually I had it somewhere else on forms

00:30:24.620 --> 00:30:27.220
and I removed it and realized it was unnecessary.

00:30:27.220 --> 00:30:29.540
So you can definitely do too much such a thing

00:30:29.540 --> 00:30:31.820
as too much Python typing.

00:30:31.820 --> 00:30:33.420
- Yeah, yeah, for sure though.

00:30:33.420 --> 00:30:34.380
It is pretty interesting.

00:30:34.380 --> 00:30:38.240
So let's maybe talk about some of the examples.

00:30:38.240 --> 00:30:39.740
Actually, before we do,

00:30:39.740 --> 00:30:44.020
just give us a sense of where does this fit

00:30:44.020 --> 00:30:46.540
in the UI space for Python.

00:30:46.540 --> 00:30:50.060
On one hand, we've got Flask, Django,

00:30:50.060 --> 00:30:53.540
FastAPI returning HTML, et cetera,

00:30:53.540 --> 00:30:56.740
where it's all on you, right?

00:30:56.740 --> 00:31:01.140
You're doing all the five languages of web apps,

00:31:01.140 --> 00:31:06.140
SQL or some query language, Python, JavaScript, CSS,

00:31:06.140 --> 00:31:08.540
some other tools, right?

00:31:08.540 --> 00:31:10.940
Like you're doing all that and you're doing my hand.

00:31:10.940 --> 00:31:13.460
On the other end, we've got tools that are pretty cool.

00:31:13.460 --> 00:31:17.460
Like we've got Anvil that lets you just write Python

00:31:17.460 --> 00:31:19.260
and do a draggy droppy sort of thing,

00:31:19.260 --> 00:31:20.540
which is really neat,

00:31:20.540 --> 00:31:24.580
but it fits into a kind of a box for those types of apps.

00:31:24.580 --> 00:31:26.300
I just discovered DropBase.

00:31:26.300 --> 00:31:27.540
Have you heard of DropBase?

00:31:27.540 --> 00:31:28.820
- I've not seen DropBase.

00:31:28.820 --> 00:31:33.220
Yeah, I've seen a lot of these like,

00:31:33.220 --> 00:31:35.740
get me a UI more quickly.

00:31:35.740 --> 00:31:37.660
- A lot of them are like kind of low code.

00:31:37.660 --> 00:31:39.220
Anvil, maybe I wouldn't really quite put it there,

00:31:39.220 --> 00:31:40.740
but they're pretty like low code,

00:31:40.740 --> 00:31:43.340
but then there's places where Python goes

00:31:43.340 --> 00:31:45.380
to make it dynamic, right?

00:31:45.380 --> 00:31:49.820
So where in that spectrum would you put FastUI

00:31:49.820 --> 00:31:50.940
as it is today?

00:31:50.940 --> 00:31:52.460
- So interestingly,

00:31:52.460 --> 00:31:53.860
and one of the reasons I wanted to come and talk to you

00:31:53.860 --> 00:31:56.260
was I heard you were talking the other day

00:31:56.260 --> 00:31:57.980
on your other podcast,

00:31:57.980 --> 00:32:00.940
and I heard you talking about FastUI

00:32:00.940 --> 00:32:04.340
and kind of, I'd say categorizing it into that group.

00:32:04.340 --> 00:32:07.780
And one of the things I wanted to come and say was,

00:32:07.780 --> 00:32:08.860
yes, we can do that,

00:32:08.860 --> 00:32:11.460
but the use case we have within Pydantic

00:32:11.460 --> 00:32:13.860
is actually to go and build a pretty complex,

00:32:13.860 --> 00:32:15.260
fully fledged application

00:32:15.260 --> 00:32:17.860
with front-end developers building components,

00:32:17.860 --> 00:32:19.820
but just get rid of that churn.

00:32:19.820 --> 00:32:21.980
- Right, so more like Gmail,

00:32:21.980 --> 00:32:25.060
less like here's a table that I can click on

00:32:25.060 --> 00:32:27.540
and see some related table.

00:32:27.540 --> 00:32:28.380
- Right, exactly.

00:32:28.380 --> 00:32:30.740
And what I should probably have put in the demo

00:32:30.740 --> 00:32:33.740
and probably where Pydantic is people most associate it

00:32:33.740 --> 00:32:36.740
and where this is gonna be most useful is within forms.

00:32:36.740 --> 00:32:39.220
So I don't know if you wanna go to the demo

00:32:39.220 --> 00:32:40.300
and I can talk people through,

00:32:40.300 --> 00:32:45.300
but like a lot of logic within FastUI is dedicated to forms.

00:32:45.300 --> 00:32:47.460
We can do things like nested Pydantic models

00:32:47.460 --> 00:32:50.580
all become components within a form.

00:32:50.580 --> 00:32:52.700
And obviously we can do client-side validation

00:32:52.700 --> 00:32:53.620
with a whole bunch of stuff,

00:32:53.620 --> 00:32:56.100
and we can also do server-side validation,

00:32:56.100 --> 00:32:58.460
but then we get all the fancy stuff like

00:32:58.460 --> 00:33:05.380
if the data is invalid and you get a validation error

00:33:05.380 --> 00:33:07.580
on the server side,

00:33:07.580 --> 00:33:09.380
we'll then basically re-render the form

00:33:09.380 --> 00:33:10.980
with the errors in place,

00:33:10.980 --> 00:33:14.180
all that stuff that like anyone building a web application

00:33:14.180 --> 00:33:16.340
has to go and implement some version of it.

00:33:16.340 --> 00:33:20.580
At the moment, there are some React libraries

00:33:20.580 --> 00:33:23.620
that will build you a form from JSON schema,

00:33:23.620 --> 00:33:27.780
but they don't perfectly fit in with what Pydantic does

00:33:27.780 --> 00:33:29.460
or with FastAPI.

00:33:29.460 --> 00:33:33.940
And so I have built some variant of that about five times.

00:33:33.940 --> 00:33:37.300
I still think the state of the art until now is Django,

00:33:37.300 --> 00:33:39.860
but like lots of us don't wanna build our web applications

00:33:39.860 --> 00:33:42.860
completely with Django because it's pretty all or nothing,

00:33:42.860 --> 00:33:45.060
despite the wonder that is Django.

00:33:45.060 --> 00:33:47.980
And so that's the kind of space where for me,

00:33:47.980 --> 00:33:51.820
this like becomes a really stands out

00:33:51.820 --> 00:33:54.100
because what would have been to do it properly,

00:33:54.100 --> 00:33:57.780
it's days of work to get form submission to work,

00:33:57.780 --> 00:34:01.260
get client-side validation, server-side validation,

00:34:01.260 --> 00:34:02.780
get the redirect after your form,

00:34:02.780 --> 00:34:04.540
none of that stuff is entirely trivial,

00:34:04.540 --> 00:34:06.740
even for those of us who've done it before.

00:34:06.740 --> 00:34:10.300
Whereas with the theory is with FastUI,

00:34:10.300 --> 00:34:14.660
and in although FastUI does not require FastAPI,

00:34:14.660 --> 00:34:17.860
the form stuff is quite tightly integrated with FastAPI

00:34:17.860 --> 00:34:20.660
and you can get, yeah, a really good experience

00:34:20.660 --> 00:34:23.060
of building stuff like forms.

00:34:23.060 --> 00:34:26.100
I think that where the alternative really today

00:34:26.100 --> 00:34:30.340
is to use no disrespect to any of the fast libraries

00:34:30.340 --> 00:34:31.180
or any of the other things,

00:34:31.180 --> 00:34:34.140
but I think the only real alternative right now

00:34:34.140 --> 00:34:36.660
is implement it yourself or use Django.

00:34:36.660 --> 00:34:39.700
- Okay, interesting.

00:34:39.700 --> 00:34:42.300
But I do wanna go to the demo and I wanna talk about,

00:34:42.300 --> 00:34:44.060
yeah, but I do also wanna,

00:34:44.060 --> 00:34:45.220
but maybe before we get to that,

00:34:45.220 --> 00:34:48.420
let's try to take a little survey of what are these widgets,

00:34:48.420 --> 00:34:50.140
these building blocks that you can use.

00:34:50.140 --> 00:34:51.380
Yeah, is that right?

00:34:51.380 --> 00:34:52.420
- Yeah, absolutely.

00:34:52.420 --> 00:34:54.420
- I think I can find them here, yes.

00:34:54.420 --> 00:34:55.260
Yeah.

00:34:55.260 --> 00:34:56.740
So you've got a FastUI demo,

00:34:56.740 --> 00:35:01.020
which I'll link to at onrender.com prefix.

00:35:01.020 --> 00:35:02.700
But you talk about some of the things

00:35:02.700 --> 00:35:06.620
that you can just create in that Python hierarchy

00:35:06.620 --> 00:35:10.420
that you return that builds up your UI.

00:35:10.420 --> 00:35:12.500
So maybe you talk us through some of the things right here.

00:35:12.500 --> 00:35:15.460
- Yes, so we have the kind of generic markdown component,

00:35:15.460 --> 00:35:18.340
which will go off and renders the markdown.

00:35:18.340 --> 00:35:20.380
This table itself is implemented

00:35:20.380 --> 00:35:22.060
using the markdown component.

00:35:22.060 --> 00:35:25.180
Just one side note, the markdown and the code,

00:35:25.180 --> 00:35:27.740
because they have quite a lot of JavaScript

00:35:27.740 --> 00:35:28.580
associated with them,

00:35:28.580 --> 00:35:29.900
but they're actually lazily loaded

00:35:29.900 --> 00:35:34.900
to make the pre-built FastUI app faster to load.

00:35:34.900 --> 00:35:39.820
Then we have text, probably the simplest one of all,

00:35:39.820 --> 00:35:41.420
just render some text.

00:35:41.420 --> 00:35:44.060
Paragraph, again, very simple.

00:35:44.060 --> 00:35:45.580
Page titles, a slightly funny one.

00:35:45.580 --> 00:35:47.500
It doesn't actually display anything on the page,

00:35:47.500 --> 00:35:49.940
but it changes the browser title.

00:35:49.940 --> 00:35:52.500
So what you see in the tab at the top of the page.

00:35:52.500 --> 00:35:53.620
- It's not always easy to do.

00:35:53.620 --> 00:35:56.180
How do you inject it into the head when you're in the body?

00:35:56.180 --> 00:35:58.860
And it takes a little bit of integration there, yeah.

00:35:58.860 --> 00:35:59.700
- Right, exactly.

00:35:59.700 --> 00:36:03.820
Heading, again, very simple, like one to six HTML heading.

00:36:03.820 --> 00:36:05.900
Code, a bit more sophisticated.

00:36:05.900 --> 00:36:08.540
And if you click on code, maybe those who can see it

00:36:08.540 --> 00:36:10.300
will be able to click through.

00:36:10.300 --> 00:36:12.220
Code is there.

00:36:12.220 --> 00:36:17.220
We get a highlighted bit of source code displayed.

00:36:17.220 --> 00:36:22.300
- It's color-coded with class types having a color

00:36:22.300 --> 00:36:23.420
and keywords having a color.

00:36:23.420 --> 00:36:24.300
That's nice.

00:36:24.300 --> 00:36:26.420
- Like you would see in GitHub or something like that.

00:36:26.420 --> 00:36:28.900
So again, that should just work out of the box.

00:36:28.900 --> 00:36:31.620
Then we have some components like a link list and link,

00:36:31.620 --> 00:36:35.380
which are used in other components mostly.

00:36:35.380 --> 00:36:37.580
So if you, the nav bar you see at the top of the page there,

00:36:37.580 --> 00:36:40.340
that uses a link list, and then we have links.

00:36:40.340 --> 00:36:44.060
And then we get into kind of more sophisticated components.

00:36:44.060 --> 00:36:47.020
So the first one, you see a button, which loads a modal,

00:36:47.020 --> 00:36:49.220
and then the button, which loads a dynamic modal.

00:36:49.220 --> 00:36:52.180
So when the modal loads, it will make a request

00:36:52.180 --> 00:36:54.580
to get the content you want to see within that modal.

00:36:54.580 --> 00:36:58.180
So that could be a form or it could be customized

00:36:58.180 --> 00:37:00.940
depending on the form and the page.

00:37:00.940 --> 00:37:02.900
Then we have loading content from the server,

00:37:02.900 --> 00:37:04.500
which is the same thing we were doing in the modal,

00:37:04.500 --> 00:37:05.940
but on the page.

00:37:05.940 --> 00:37:07.540
Then we have this SSE component.

00:37:07.540 --> 00:37:12.180
So again, very simple to use within Fast UI,

00:37:12.180 --> 00:37:15.060
but like quite a lot of work to use server-side events

00:37:15.060 --> 00:37:17.900
to basically dynamically update a React component

00:37:17.900 --> 00:37:19.900
if you weren't using that.

00:37:19.900 --> 00:37:24.900
- So your server load SSE widget.

00:37:24.900 --> 00:37:25.820
- Yeah.

00:37:27.100 --> 00:37:30.100
- That provides, like you said, server-sent events,

00:37:30.100 --> 00:37:32.540
which I don't know how many people are familiar with SSE.

00:37:32.540 --> 00:37:34.900
I'm sure they're familiar with WebSockets,

00:37:34.900 --> 00:37:37.340
and they're familiar with just like a JavaScript event,

00:37:37.340 --> 00:37:39.980
but this is like an intermediate sort of lightweight,

00:37:39.980 --> 00:37:43.340
one directional, but normally the opposite,

00:37:43.340 --> 00:37:45.500
in reverse, I guess, from the server to the client,

00:37:45.500 --> 00:37:46.800
sort of pushing out stuff, right?

00:37:46.800 --> 00:37:48.140
So that's a really powerful thing.

00:37:48.140 --> 00:37:51.220
And if it's that easy to just hook a function call

00:37:51.220 --> 00:37:52.700
when something happens, that's pretty cool.

00:37:52.700 --> 00:37:54.980
- Yeah, one of the things I want to try with SSE

00:37:54.980 --> 00:37:57.880
that I think will work really nicely is LLM responses

00:37:57.880 --> 00:37:59.580
where you get like one token at a time

00:37:59.580 --> 00:38:01.060
because you don't want to wait for the whole thing.

00:38:01.060 --> 00:38:01.900
- Yeah.

00:38:01.900 --> 00:38:02.860
- Server-sent events would be perfect

00:38:02.860 --> 00:38:06.060
for basically printing out the response from an LLM.

00:38:06.060 --> 00:38:08.320
And again, it would be like two lines of code

00:38:08.320 --> 00:38:10.460
to add that to an app with Fast UI.

00:38:10.460 --> 00:38:11.680
It would not be two lines of code

00:38:11.680 --> 00:38:13.660
to go and implement that yourself,

00:38:13.660 --> 00:38:16.460
whether you're using pure JavaScript or React

00:38:16.460 --> 00:38:17.540
or whatever framework.

00:38:17.540 --> 00:38:21.380
Then we have iFrame, which, yeah, again,

00:38:21.380 --> 00:38:23.380
kind of map, we're back to kind of mapping one-to-one

00:38:23.380 --> 00:38:25.060
to a component.

00:38:25.060 --> 00:38:28.300
One of the nice things to say about both iFrame and Image

00:38:28.300 --> 00:38:30.620
is they were contributed by other people.

00:38:30.620 --> 00:38:32.700
So I don't think I'd even created an issue asking for them,

00:38:32.700 --> 00:38:34.580
but people have come along and added them.

00:38:34.580 --> 00:38:36.300
It's been one of the nice things to see.

00:38:36.300 --> 00:38:38.780
I think we had 18 or so people contribute

00:38:38.780 --> 00:38:41.940
to the first release, first release after my initial release

00:38:41.940 --> 00:38:44.060
or sorry, the second release of Fast UI.

00:38:44.060 --> 00:38:46.980
So yeah, good engagement from lots of people.

00:38:46.980 --> 00:38:47.800
Image.

00:38:48.940 --> 00:38:51.700
- Yeah, so you've got a bunch of UI stuff here

00:38:51.700 --> 00:38:55.260
and it just, as I look at this and I see what you're building

00:38:55.260 --> 00:38:56.860
it just makes me think of like,

00:38:56.860 --> 00:38:59.400
wow, there's an opportunity for stuff like,

00:38:59.400 --> 00:39:02.700
like what you get out, not necessarily the same as,

00:39:02.700 --> 00:39:05.260
but like what you get out of say, Tailwind UI,

00:39:05.260 --> 00:39:08.700
where the things you might work with are,

00:39:08.700 --> 00:39:11.180
you know, on-off switches, you know, like toggles,

00:39:11.180 --> 00:39:12.300
like you might see in your phone

00:39:12.300 --> 00:39:15.780
or other sort of elements that have like

00:39:16.620 --> 00:39:19.300
a lot of design imbued in them

00:39:19.300 --> 00:39:21.220
that people can just grab and use,

00:39:21.220 --> 00:39:24.180
almost like a Django philosophy for the front end

00:39:24.180 --> 00:39:25.580
in a sense there.

00:39:25.580 --> 00:39:28.900
Is that something that you are dreaming of or?

00:39:28.900 --> 00:39:29.740
- Yeah, definitely.

00:39:29.740 --> 00:39:32.580
And I think there's, I haven't,

00:39:32.580 --> 00:39:33.820
someone was complaining somewhere

00:39:33.820 --> 00:39:35.380
that we didn't have a grid component yet.

00:39:35.380 --> 00:39:37.460
And I think we'll do one, but like,

00:39:37.460 --> 00:39:39.180
those bits get quite opinionated, but yeah,

00:39:39.180 --> 00:39:42.080
like calendar, completely obvious choice, right?

00:39:42.080 --> 00:39:45.100
Complete faff to go and implement that yourself in HTML,

00:39:45.100 --> 00:39:49.180
commonly used, trivial to define because the definition,

00:39:49.180 --> 00:39:50.700
there aren't that many different things to define.

00:39:50.700 --> 00:39:52.900
You choose your month, you know,

00:39:52.900 --> 00:39:55.220
most of us are on the Gregorian calendar, right?

00:39:55.220 --> 00:39:58.220
We're not gonna have to change too much

00:39:58.220 --> 00:39:59.340
what calendar we're gonna render.

00:39:59.340 --> 00:40:02.500
So yeah, that's a perfect example of the kind of thing.

00:40:02.500 --> 00:40:04.020
Tiles like this, again,

00:40:04.020 --> 00:40:09.180
totally possible to go and implement them.

00:40:09.180 --> 00:40:12.100
And again, obviously you can use,

00:40:12.100 --> 00:40:13.820
we can provide some nice default,

00:40:13.820 --> 00:40:16.300
but also if you're a bigger company

00:40:16.300 --> 00:40:18.540
and you want to go and customize it,

00:40:18.540 --> 00:40:19.460
you can totally do that.

00:40:19.460 --> 00:40:21.420
And you can have a front end developer go through

00:40:21.420 --> 00:40:24.140
and implement the classes that basically customize,

00:40:24.140 --> 00:40:25.820
customize the look.

00:40:25.820 --> 00:40:28.540
But I just wanted to come back just and show you some of

00:40:28.540 --> 00:40:30.940
the, so that some of the other components.

00:40:30.940 --> 00:40:33.420
So we were on the, yeah.

00:40:33.420 --> 00:40:34.260
- This one.

00:40:34.260 --> 00:40:35.960
- Yeah, I don't know if we have anything more below that,

00:40:35.960 --> 00:40:38.500
but I would love to show you the tables

00:40:38.500 --> 00:40:39.740
because the tables and the forms

00:40:39.740 --> 00:40:41.380
are really where it comes into.

00:40:41.380 --> 00:40:42.980
So cities is probably the best example.

00:40:42.980 --> 00:40:43.860
- Cities is the one, okay.

00:40:43.860 --> 00:40:44.700
Yeah, awesome.

00:40:44.700 --> 00:40:49.340
- So this is a list of cities just for some public data set

00:40:49.340 --> 00:40:51.980
with country and population.

00:40:51.980 --> 00:40:54.100
But at the top you see where we have a filter

00:40:54.100 --> 00:40:56.280
to choose by country.

00:40:56.280 --> 00:40:57.120
And if we click here,

00:40:57.120 --> 00:41:00.580
if you start searching like UN or something,

00:41:00.580 --> 00:41:02.140
you'll see we're doing a server side,

00:41:02.140 --> 00:41:04.060
we're loading from the server, the list of cities.

00:41:04.060 --> 00:41:06.620
So again, this component to go and implement,

00:41:06.620 --> 00:41:08.140
if you were gonna do that from scratch,

00:41:08.140 --> 00:41:11.220
you've got to have, use some clever,

00:41:11.220 --> 00:41:12.300
this is a list of countries.

00:41:12.300 --> 00:41:13.140
So if you do like-

00:41:13.140 --> 00:41:15.380
- Oh, countries, sorry, I'm typing in cities.

00:41:15.380 --> 00:41:16.220
- You did like UN,

00:41:16.220 --> 00:41:18.380
you'll get United Kingdom and United States.

00:41:18.380 --> 00:41:20.460
- Perfect, there you go.

00:41:20.460 --> 00:41:23.540
- Right, and then we do United States or whatever.

00:41:23.540 --> 00:41:24.820
You know, yeah.

00:41:24.820 --> 00:41:27.300
And then we'll get a bunch of cities in the United States.

00:41:27.300 --> 00:41:29.260
Building this and wiring it all up

00:41:29.260 --> 00:41:31.620
and using one of the, we use React Select here,

00:41:31.620 --> 00:41:34.300
but you can use Select Two or one of those components.

00:41:34.300 --> 00:41:35.140
It's not trivial.

00:41:35.140 --> 00:41:36.820
You need to also set up the backend.

00:41:36.820 --> 00:41:38.460
You need to set up,

00:41:38.460 --> 00:41:40.380
there's like a few hundred lines of React

00:41:40.380 --> 00:41:44.620
dedicated just to setting up those selects correctly.

00:41:44.620 --> 00:41:46.620
And as you'll see in a minute on a form,

00:41:46.620 --> 00:41:51.620
you can add this to a form with VastUI pretty trivially.

00:41:51.620 --> 00:41:55.500
Secondly, if you go to the bottom of the page on cities,

00:41:55.500 --> 00:41:56.860
you'll see pagination.

00:41:56.860 --> 00:41:59.020
Again, not a trivial thing to go and set up.

00:41:59.020 --> 00:42:01.980
If you've got, if you're just starting from scratch

00:42:01.980 --> 00:42:04.660
and you wanna show like, build an internal endpoint,

00:42:04.660 --> 00:42:06.780
for example, to show all of your users.

00:42:06.780 --> 00:42:09.700
Doing all that pagination and like wiring all that up

00:42:09.700 --> 00:42:12.300
is not trivial, but we effectively do the work for you

00:42:12.300 --> 00:42:15.060
to have that component and do the maths

00:42:15.060 --> 00:42:18.020
of which page you were on and stuff like that.

00:42:18.020 --> 00:42:20.780
Again, I wanna like reiterate,

00:42:20.780 --> 00:42:22.940
this is the VastUI is not just designed

00:42:22.940 --> 00:42:25.740
as a kind of Django admin interface alternative.

00:42:25.740 --> 00:42:27.980
We within Panasonic are gonna go and use it

00:42:27.980 --> 00:42:30.980
for UI that we're gonna show to end users.

00:42:30.980 --> 00:42:32.780
But obviously it also comes into its own

00:42:32.780 --> 00:42:35.140
when people wanna just get something up quickly.

00:42:35.140 --> 00:42:38.660
- If we have a design language or something like that,

00:42:38.660 --> 00:42:41.060
or even using a framework, I mean, you mentioned Bootstrap,

00:42:41.060 --> 00:42:45.100
but Tailwind or Bulba, is that one of the new ones?

00:42:45.100 --> 00:42:47.260
Like if we're working with one of those

00:42:47.260 --> 00:42:48.620
and we wanted to use this,

00:42:48.620 --> 00:42:53.500
like how easy is it to sort of bring in those elements there?

00:42:53.500 --> 00:42:56.780
- So if I show you here on boot,

00:42:56.780 --> 00:42:58.740
so I'll show you how we customize it with Bootstrap,

00:42:58.740 --> 00:43:01.300
which is probably the best definition of it.

00:43:01.300 --> 00:43:04.780
So you'll see here, this is in the,

00:43:04.780 --> 00:43:06.540
this is the, where am I looking?

00:43:06.540 --> 00:43:07.660
This is the prebuilt version.

00:43:07.660 --> 00:43:10.580
So this is obviously the prebuilt version

00:43:10.580 --> 00:43:13.380
of VastUI you can get, but it's actually just,

00:43:13.380 --> 00:43:15.900
it's a very simple app in terms of React.

00:43:15.900 --> 00:43:17.860
This app has one, well, two components.

00:43:17.860 --> 00:43:20.740
It has a div which contains the VastUI component.

00:43:20.740 --> 00:43:22.540
And then we customize it in a bunch of ways.

00:43:22.540 --> 00:43:25.260
We have a like component that we render for not found.

00:43:25.260 --> 00:43:27.180
We have a component we render for spinner

00:43:27.180 --> 00:43:28.580
and for transitioning.

00:43:28.580 --> 00:43:30.020
But then these are the two that really matter,

00:43:30.020 --> 00:43:32.020
where we can customize the classes

00:43:32.020 --> 00:43:35.820
and we can customize how we render certain components.

00:43:35.820 --> 00:43:38.660
So if we come in here to have this function from Bootstrap,

00:43:38.660 --> 00:43:41.060
which is how we customize the classes,

00:43:41.060 --> 00:43:44.180
you'll see that at its core, it's just this big old switch.

00:43:44.180 --> 00:43:47.300
So this is all TypeScript, like type safe,

00:43:47.300 --> 00:43:50.100
because types are very powerful in TypeScript,

00:43:50.100 --> 00:43:52.820
but like all of the props will have this type key.

00:43:52.820 --> 00:43:53.660
As I showed you earlier,

00:43:53.660 --> 00:43:55.780
when we were looking at the Python code,

00:43:55.780 --> 00:43:58.260
- It's like the button and all the different things, yeah.

00:43:58.260 --> 00:43:59.660
- Based on the switch, we just go through,

00:43:59.660 --> 00:44:02.220
and this is all just like defining the classes we want

00:44:02.220 --> 00:44:04.580
for all of the different components.

00:44:04.580 --> 00:44:06.900
Some of them depending on the exact state of the component.

00:44:06.900 --> 00:44:08.940
So all of these form inputs,

00:44:08.940 --> 00:44:11.500
we customize them depending on which type they are

00:44:11.500 --> 00:44:14.020
and on which mode we're in, et cetera, et cetera.

00:44:14.020 --> 00:44:16.060
But it's all very mechanical,

00:44:16.060 --> 00:44:17.740
just like laying out the classes we need

00:44:17.740 --> 00:44:19.660
for each individual case.

00:44:19.660 --> 00:44:22.860
And then we have the other way of customizing it,

00:44:22.860 --> 00:44:25.300
which is to use custom components.

00:44:25.300 --> 00:44:27.900
We basically for three in particular components,

00:44:27.900 --> 00:44:30.780
Napbar, modal and pagination,

00:44:30.780 --> 00:44:35.060
we define our own custom React components.

00:44:35.060 --> 00:44:37.060
So here's the one for Napbar,

00:44:37.060 --> 00:44:39.660
where we use a bunch of bootstrap types

00:44:39.660 --> 00:44:41.700
to render a bootstrap Napbar.

00:44:41.700 --> 00:44:45.300
- But you could basically create a React component

00:44:45.300 --> 00:44:48.180
that has all the settings necessary

00:44:48.180 --> 00:44:51.140
to create a Napbar in Tailwind or whatever, right?

00:44:51.140 --> 00:44:51.980
- Right, right.

00:44:51.980 --> 00:44:54.140
So if you wanted to use Tailwind, what's this?

00:44:54.140 --> 00:44:57.180
Like 20, it's like a hundred lines of code

00:44:57.180 --> 00:44:58.740
to define all of the classes.

00:44:58.740 --> 00:45:00.940
And it's pretty mechanical code, right?

00:45:00.940 --> 00:45:05.940
So it wouldn't be hard at all to go and use Tailwind CSS.

00:45:05.940 --> 00:45:07.620
And then you might want to define

00:45:07.620 --> 00:45:10.140
a few of your components specifically.

00:45:10.140 --> 00:45:11.980
But actually modal, I think is the only one

00:45:11.980 --> 00:45:14.460
that really requires it to be custom implemented

00:45:14.460 --> 00:45:16.340
'cause the default just shows you an alert

00:45:16.340 --> 00:45:17.180
'cause there's nothing--

00:45:17.180 --> 00:45:19.900
- Right, JavaScript, the page says,

00:45:19.900 --> 00:45:21.740
it's like, "Oh no, the page doesn't say

00:45:21.740 --> 00:45:23.220
"this isn't gonna work."

00:45:23.220 --> 00:45:27.540
- Yeah, so yeah, I think this is one of the bits

00:45:27.540 --> 00:45:29.700
I'm most proud of here is that like

00:45:29.700 --> 00:45:31.660
how much you could customize it

00:45:31.660 --> 00:45:34.540
and how simply you could start to customize it.

00:45:34.540 --> 00:45:38.580
- It's really like kind of pluggable or extensible.

00:45:38.580 --> 00:45:41.700
So you don't have to get in and know too much about it.

00:45:41.700 --> 00:45:44.060
You just plug in the class name generator

00:45:44.060 --> 00:45:47.180
and the renderer for exactly one.

00:45:47.180 --> 00:45:50.500
- And so, yeah, and all of the types,

00:45:50.500 --> 00:45:51.420
it's all typescripted.

00:45:51.420 --> 00:45:53.540
So the types should do a lot of help telling you

00:45:53.540 --> 00:45:55.460
what you can implement.

00:45:55.460 --> 00:45:57.620
Last thing I'll show you is,

00:45:57.620 --> 00:46:00.180
yeah, so here in the default build,

00:46:00.180 --> 00:46:03.180
as I said, our custom render function

00:46:03.180 --> 00:46:05.100
is not just a bootstrap one.

00:46:05.100 --> 00:46:07.740
We do one special thing,

00:46:07.740 --> 00:46:10.940
which is where we have this idea of a custom component,

00:46:10.940 --> 00:46:14.540
which basically all it has is a subtype,

00:46:14.540 --> 00:46:17.540
which basically you should use to render it

00:46:17.540 --> 00:46:18.380
however you like.

00:46:18.380 --> 00:46:22.180
So in our case, we take custom

00:46:22.180 --> 00:46:25.420
and if the subtype is cow say,

00:46:25.420 --> 00:46:28.300
we render that as a particular block,

00:46:28.300 --> 00:46:31.260
like use this component here

00:46:31.260 --> 00:46:33.300
and we print out the cow says whatever it was

00:46:33.300 --> 00:46:34.740
that the input was from the server.

00:46:34.740 --> 00:46:37.260
And otherwise we just go back to using the bootstrap render.

00:46:37.260 --> 00:46:40.500
And so if you look at that component here,

00:46:40.500 --> 00:46:42.900
yeah, we've got this like slightly silly example

00:46:42.900 --> 00:46:46.220
of a custom component of cow say saying something.

00:46:46.220 --> 00:46:47.220
- Oh, that's funny.

00:46:47.220 --> 00:46:50.700
- But yeah, it shouldn't be too difficult to customize.

00:46:50.700 --> 00:46:51.940
And then even if you're customizing

00:46:51.940 --> 00:46:53.460
to go back to using bootstrap

00:46:53.460 --> 00:46:56.060
for the fallback case of everything else.

00:46:56.060 --> 00:46:58.780
- Okay, so you could almost just for one section

00:46:58.780 --> 00:47:01.500
that has to be really specialized to some custom,

00:47:01.500 --> 00:47:03.780
but otherwise just lean on a framework.

00:47:03.780 --> 00:47:04.820
- Yeah. - Okay.

00:47:04.820 --> 00:47:08.060
Yeah, this looks like something that one person

00:47:08.060 --> 00:47:09.700
could take one for the team,

00:47:09.700 --> 00:47:14.700
create a tailwind or a whatever generator,

00:47:14.700 --> 00:47:16.100
class name generator,

00:47:16.100 --> 00:47:18.860
and then put that as either a contribution

00:47:18.860 --> 00:47:20.780
or put it up on GitHub

00:47:20.780 --> 00:47:23.020
and then you just, you're kind of good to go.

00:47:23.580 --> 00:47:25.340
- Yeah, I think we might actually do it.

00:47:25.340 --> 00:47:28.340
We're using tailwind and radix within Pydantic.

00:47:28.340 --> 00:47:30.820
So I suspect our front end guys will at some point

00:47:30.820 --> 00:47:32.420
get annoyed with my use of bootstrap

00:47:32.420 --> 00:47:35.700
and go off and go and change it.

00:47:35.700 --> 00:47:37.180
One of the reasons I use bootstrap

00:47:37.180 --> 00:47:39.260
is that because bootstrap is completely customized

00:47:39.260 --> 00:47:44.260
by SCSS and the SCSS compilers for Python,

00:47:44.260 --> 00:47:46.780
we have the, at least a possibility in future

00:47:46.780 --> 00:47:48.820
to allow you to customize the complete look

00:47:48.820 --> 00:47:52.100
and feel of your app without ever having to touch NPM

00:47:52.100 --> 00:47:55.540
'cause you just go change basically the color definitions

00:47:55.540 --> 00:47:56.380
as we do here.

00:47:56.380 --> 00:48:00.740
So the default version of,

00:48:00.740 --> 00:48:01.860
maybe I can even change it here

00:48:01.860 --> 00:48:02.940
and as it's running, it'll change.

00:48:02.940 --> 00:48:05.140
But if I, here you see I've set the primary color

00:48:05.140 --> 00:48:06.380
to be black.

00:48:06.380 --> 00:48:10.060
And so you'll see the buttons here are all rendered as black

00:48:10.060 --> 00:48:12.540
if I were to change it,

00:48:12.540 --> 00:48:14.580
I haven't tried this for a bit, so I hope it works.

00:48:14.580 --> 00:48:16.980
If I commented out primary,

00:48:16.980 --> 00:48:19.460
you'll see that all of the--

00:48:19.460 --> 00:48:21.020
- Changed to blue?

00:48:21.020 --> 00:48:22.460
- They've all changed to blue.

00:48:22.460 --> 00:48:24.020
- Which is the bootstrap primary,

00:48:24.020 --> 00:48:24.860
you know, button, dash, dash, button.

00:48:24.860 --> 00:48:28.380
- Right, and if I changed, I got rid of the default font,

00:48:28.380 --> 00:48:30.860
you would see we went back to whatever the other font was.

00:48:30.860 --> 00:48:33.220
So there's a world in future where we allow you

00:48:33.220 --> 00:48:34.900
to customize the look and feel

00:48:34.900 --> 00:48:37.540
even within bootstrap from Python code.

00:48:37.540 --> 00:48:40.460
- Yeah, tell people maybe who don't know what SCSS is.

00:48:40.460 --> 00:48:42.180
They probably know what CSS is.

00:48:42.180 --> 00:48:44.860
- So it's generally referred to as SAS,

00:48:44.860 --> 00:48:47.980
which is S-A-S-S, which was,

00:48:47.980 --> 00:48:52.060
is basically a more powerful version of CSS

00:48:52.060 --> 00:48:53.780
where you can-- - Yeah, SAS and LESS.

00:48:53.780 --> 00:48:54.940
Those were the two.

00:48:54.940 --> 00:48:56.100
- Yeah, there was SAS and LESS,

00:48:56.100 --> 00:48:57.900
and then we kind of settled on SAS,

00:48:57.900 --> 00:49:02.900
but then we had SCSS, which is SAS with more CSS-y syntax.

00:49:02.900 --> 00:49:08.100
It's a way to do slightly more powerful things in CSS

00:49:08.100 --> 00:49:11.220
and minify it and have stuff like variables

00:49:11.220 --> 00:49:14.380
before they were available in CSS and defaults,

00:49:14.380 --> 00:49:17.780
and even you can do weird stuff like map functions,

00:49:17.780 --> 00:49:20.020
and they're used very heavily in bootstrap.

00:49:20.020 --> 00:49:23.580
But the nice bit is because the compiler is written in C,

00:49:23.580 --> 00:49:26.340
there's libsas in Python where you can get

00:49:26.340 --> 00:49:28.660
kind of a front-end customization

00:49:28.660 --> 00:49:30.820
without needing the whole of Node

00:49:30.820 --> 00:49:34.200
and the whole dog and pony show of front-end development.

00:49:34.200 --> 00:49:36.020
- Yeah, excellent.

00:49:36.020 --> 00:49:41.420
All right, well, I think it's got a lot of legs.

00:49:41.420 --> 00:49:43.820
So when I saw this, and I saw, okay,

00:49:43.820 --> 00:49:47.060
this is for web apps, and it's kind of got this,

00:49:47.060 --> 00:49:49.860
this Python code running that defines the backend,

00:49:49.860 --> 00:49:53.580
and it's got the UI, and it's all a little self-contained,

00:49:53.580 --> 00:49:55.580
one of the thoughts I had was,

00:49:55.580 --> 00:50:00.700
wouldn't it be neat if there was a little bundler

00:50:00.700 --> 00:50:03.900
type of thing that made this into an Electron app?

00:50:03.900 --> 00:50:04.980
Would this be possible?

00:50:04.980 --> 00:50:07.140
Could we get something that you could send out,

00:50:07.140 --> 00:50:10.060
or is this really just gonna be intended to be

00:50:10.060 --> 00:50:14.780
kind of a friend of Django type of thing?

00:50:14.780 --> 00:50:17.620
- I have not used Electron for a very long time,

00:50:17.620 --> 00:50:19.500
so I don't pretend to be an expert.

00:50:19.500 --> 00:50:24.500
What I will say is that unlike some of the other UI libraries

00:50:24.500 --> 00:50:26.940
we're not trying to do clever things with WebSockets

00:50:26.940 --> 00:50:31.860
and do all of the rendering requiring duplex communication

00:50:31.860 --> 00:50:34.060
between the client and the server, it's pretty simple.

00:50:34.060 --> 00:50:37.260
It's like, make a request, and the JSON contains

00:50:37.260 --> 00:50:38.940
some information about how to render it,

00:50:38.940 --> 00:50:40.620
and then the front-end goes off and renders it.

00:50:40.620 --> 00:50:42.980
So it's, the result, what you get when you finish,

00:50:42.980 --> 00:50:46.260
is very, in terms of from a networking point of view,

00:50:46.260 --> 00:50:48.500
very simple, very conventional.

00:50:48.500 --> 00:50:51.980
It's like, make an HTTP request, get back JSON,

00:50:51.980 --> 00:50:53.680
JavaScript knows how to render it.

00:50:53.680 --> 00:50:59.620
And so I don't see why it shouldn't work in Electron.

00:50:59.620 --> 00:51:01.260
There's even the world in which we don't need

00:51:01.260 --> 00:51:03.140
the whole of Electron, and we could,

00:51:03.140 --> 00:51:06.620
someone could go and build fast UI components

00:51:06.620 --> 00:51:09.220
for whatever native library, and we could get

00:51:09.220 --> 00:51:12.420
native apps running that are based on fast UI.

00:51:12.420 --> 00:51:14.460
Not saying that's necessarily a good idea,

00:51:14.460 --> 00:51:16.300
but those possibilities exist.

00:51:16.300 --> 00:51:18.260
- It is, it does exist.

00:51:18.260 --> 00:51:20.980
Okay, yeah, yeah, very interesting.

00:51:20.980 --> 00:51:24.660
Another thing that is a convention, I suppose,

00:51:24.660 --> 00:51:25.980
I'll see if I can pull it out here,

00:51:25.980 --> 00:51:29.340
is the UI, a lot of times you'll have either just slash,

00:51:29.340 --> 00:51:34.340
you'll have slash users, but then you'll have an API

00:51:34.340 --> 00:51:37.420
that backs it, and there's this convention

00:51:37.420 --> 00:51:40.580
that if it's in the URL, if you have slash API slash,

00:51:40.580 --> 00:51:42.420
in this example we were talking about before,

00:51:42.420 --> 00:51:43.780
it's like slash table slash cities,

00:51:43.780 --> 00:51:48.180
if you say API slash table slash, that's the data endpoint,

00:51:48.180 --> 00:51:51.980
and then if you drop the API, that's the front end

00:51:51.980 --> 00:51:53.860
that then turns around and calls the back end

00:51:53.860 --> 00:51:55.660
with the API inserted, right?

00:51:55.660 --> 00:51:57.220
You wanna talk about that convention a little bit

00:51:57.220 --> 00:51:59.740
so people kinda see where that's going?

00:51:59.740 --> 00:52:02.740
- Yeah, so that's how I've set it up in the default app.

00:52:02.740 --> 00:52:04.420
It doesn't, you don't have to do it like that,

00:52:04.420 --> 00:52:06.500
and I think we're using a separate subdomain

00:52:06.500 --> 00:52:11.100
to avoid path-based routing and all that fun,

00:52:11.100 --> 00:52:14.460
but yeah, the default simplest way

00:52:14.460 --> 00:52:18.940
of basically doing a calculation to go from,

00:52:18.940 --> 00:52:21.060
I've got a URL, how do I get the data for it,

00:52:21.060 --> 00:52:24.480
is, as I said earlier, basically prepend slash API.

00:52:24.480 --> 00:52:27.580
- So maybe a more general way to think about it

00:52:27.580 --> 00:52:30.340
is for every page, there is an endpoint

00:52:30.340 --> 00:52:33.820
that is a FastAPI endpoint, or a pair of them maybe even,

00:52:33.820 --> 00:52:38.820
one returns the HTML front end stuff that makes it work,

00:52:38.820 --> 00:52:42.020
that talks around and goes back to itself, right?

00:52:42.020 --> 00:52:44.740
- Yeah, so what we have in the default app here,

00:52:44.740 --> 00:52:48.900
and what I would generally recommend is, where are we?

00:52:48.900 --> 00:52:53.900
We have, yeah, we have a bunch of routers

00:52:53.900 --> 00:52:58.020
that connect and do all of the API stuff,

00:52:58.020 --> 00:52:59.420
and I've just been implementing auth,

00:52:59.420 --> 00:53:00.660
which I can show you in a minute,

00:53:00.660 --> 00:53:02.660
but that's not available, there's a PR for it,

00:53:02.660 --> 00:53:05.660
but it's not available in the demo you're looking at.

00:53:05.660 --> 00:53:08.220
Like basically catch all endpoint,

00:53:08.220 --> 00:53:10.140
which if nothing else has been hit,

00:53:10.140 --> 00:53:12.900
will render the standard HTML,

00:53:12.900 --> 00:53:15.820
and one of the nice things is that the Python library

00:53:15.820 --> 00:53:17.260
gives you this pre-built HTML,

00:53:17.260 --> 00:53:20.940
which will basically render you the HTML that you'll get

00:53:20.940 --> 00:53:24.980
if I went here and I view page source,

00:53:24.980 --> 00:53:28.460
you'll see it's just returning, well, yeah,

00:53:28.460 --> 00:53:30.460
in this particular, if I went to 8000,

00:53:30.460 --> 00:53:32.620
then it wouldn't be messed up by Vite.

00:53:32.620 --> 00:53:34.100
You just get this very simple HTML,

00:53:34.100 --> 00:53:35.620
which in turn renders the app.

00:53:35.620 --> 00:53:38.620
So yeah, effectively you're right,

00:53:38.620 --> 00:53:40.860
there's two, there's like matching endpoints

00:53:40.860 --> 00:53:43.380
for every view you might wanna have,

00:53:43.380 --> 00:53:45.500
one to get them to return the JSON,

00:53:45.500 --> 00:53:47.580
the one to render the HTML.

00:53:47.580 --> 00:53:48.420
What's one of the--

00:53:48.420 --> 00:53:50.060
- But you don't write them both, right?

00:53:50.060 --> 00:53:53.380
You write the API one and then FastUI

00:53:53.380 --> 00:53:56.340
magically turns it into UI.

00:53:56.340 --> 00:53:58.060
- Right, and whatever, and this would,

00:53:58.060 --> 00:53:59.940
all of most of this, with the exception

00:53:59.940 --> 00:54:01.940
of the form submission, would all just work out the box

00:54:01.940 --> 00:54:04.220
with any Python web framework.

00:54:04.220 --> 00:54:07.660
You just need to produce your financing model,

00:54:07.660 --> 00:54:12.140
dump it to JSON and return that in a response.

00:54:12.140 --> 00:54:17.140
One of the really nice things about this being,

00:54:17.140 --> 00:54:20.860
the like actual data existing in JSON

00:54:20.860 --> 00:54:23.380
is that writing a test, there's quite a lot here,

00:54:23.380 --> 00:54:25.260
but you'll see most of it is Markdown.

00:54:25.260 --> 00:54:28.020
So writing a test that our views contain

00:54:28.020 --> 00:54:30.460
what we expect them to is massively easier

00:54:30.460 --> 00:54:31.780
when we're testing against JSON,

00:54:31.780 --> 00:54:34.340
which we can convert to Python objects and test

00:54:34.340 --> 00:54:36.220
than it would be if we've got an HTML page

00:54:36.220 --> 00:54:37.620
and we're running a bunch of regexes

00:54:37.620 --> 00:54:40.260
for does this page contain the user's name?

00:54:40.260 --> 00:54:41.900
Does it contain the word log out?

00:54:41.900 --> 00:54:42.820
Blah, blah, blah.

00:54:42.820 --> 00:54:47.820
- Yeah, by write type of things or those types of tests.

00:54:47.820 --> 00:54:52.100
- Or yeah, even worse, you end up with that Playwright

00:54:52.100 --> 00:54:54.980
and like take an image of it and see if the image looks

00:54:54.980 --> 00:54:57.440
like the image used to look and yeah.

00:54:57.440 --> 00:54:59.620
Things I don't wanna have to build.

00:54:59.620 --> 00:55:01.140
I mean, they have to happen occasionally,

00:55:01.140 --> 00:55:03.020
but like we're, and ironically,

00:55:03.020 --> 00:55:04.660
we'll probably end up with them in fast UI

00:55:04.660 --> 00:55:06.600
to like even more certainty

00:55:06.600 --> 00:55:07.900
that our components work correctly,

00:55:07.900 --> 00:55:10.860
but hopefully that thereby avoid everyone else

00:55:10.860 --> 00:55:13.220
having to go and build them.

00:55:13.220 --> 00:55:18.220
- Is there any concern that maybe there's unintended APIs

00:55:18.220 --> 00:55:20.900
in the sense that like all of this stuff,

00:55:20.900 --> 00:55:22.220
I'm sure this is probably true

00:55:22.220 --> 00:55:25.260
for pretty much any React site,

00:55:25.260 --> 00:55:28.220
but like a lot of the pages available also as an API,

00:55:28.220 --> 00:55:30.020
even if you don't intend it to be an API,

00:55:30.020 --> 00:55:31.420
like what's--

00:55:31.420 --> 00:55:34.660
- Yeah, I think that's a limitation of any,

00:55:34.660 --> 00:55:37.640
I mean, in some ways the data will be slightly less nice to,

00:55:37.640 --> 00:55:38.480
yeah, you're right.

00:55:38.480 --> 00:55:43.480
If you're a company that give people foreign exchange rates

00:55:43.480 --> 00:55:46.060
and you want them to always come to your site,

00:55:46.060 --> 00:55:48.260
you obviously can't render that with React

00:55:48.260 --> 00:55:49.660
'cause there's gonna be a JSON endpoint

00:55:49.660 --> 00:55:52.300
where someone can just go scrape your exchange rates

00:55:52.300 --> 00:55:53.140
or whatever else it might be.

00:55:53.140 --> 00:55:55.620
- Right, right, but you can still do session based auth

00:55:55.620 --> 00:55:57.740
and say you have to log in to do it, right?

00:55:57.740 --> 00:56:01.300
It's not just that it's public, it just,

00:56:01.300 --> 00:56:02.740
there's always a JSON version,

00:56:02.740 --> 00:56:06.140
but honestly, there's so many interesting ways

00:56:06.140 --> 00:56:07.860
to pull data out of HTML, like--

00:56:07.860 --> 00:56:11.320
- Yeah, if someone's determined, if it's that valuable,

00:56:11.320 --> 00:56:12.540
someone will do it anyway.

00:56:12.540 --> 00:56:15.780
I also think that like, in theory,

00:56:15.780 --> 00:56:20.780
if your options are build pure React or do this,

00:56:20.780 --> 00:56:23.580
then this has the, like, as I say,

00:56:23.580 --> 00:56:26.060
there's the realistic chance someone's gonna come along

00:56:26.060 --> 00:56:29.740
and implement a fast UI front end that renders HTML

00:56:29.740 --> 00:56:34.420
and then you don't have to expose those JSON endpoints at all

00:56:34.420 --> 00:56:37.240
and you could return HTML from your server.

00:56:37.240 --> 00:56:39.660
We just haven't got around to building it yet.

00:56:39.660 --> 00:56:42.240
- Yeah, sure, okay.

00:56:42.240 --> 00:56:45.100
I guess you could maybe do some kind of server side

00:56:45.100 --> 00:56:47.100
rendering potentially as well.

00:56:47.100 --> 00:56:48.100
- Exactly, that's what I mean.

00:56:48.100 --> 00:56:49.620
Whether it's Python server side rendering

00:56:49.620 --> 00:56:51.980
or whether it's JavaScript server side rendering

00:56:51.980 --> 00:56:53.140
or whether it's edge rendering,

00:56:53.140 --> 00:56:55.540
I've tried to build a sort of edge rendering thing

00:56:55.540 --> 00:56:58.140
in Cloudflare years ago using Rust

00:56:58.140 --> 00:57:00.020
and for a bunch of reasons it didn't quite work,

00:57:00.020 --> 00:57:02.940
but there's real possibility of doing, like,

00:57:02.940 --> 00:57:04.660
yeah, any number of different things in that direction.

00:57:04.660 --> 00:57:05.580
- That's interesting.

00:57:05.580 --> 00:57:10.580
Yeah, like some of the CDNs have pretty dynamic stuff

00:57:10.580 --> 00:57:13.340
right at the edge where you can sort of put

00:57:13.340 --> 00:57:15.020
your last bit of code.

00:57:15.020 --> 00:57:16.940
I haven't done anything with that.

00:57:16.940 --> 00:57:18.460
- That's kind of what Remix is doing

00:57:18.460 --> 00:57:20.500
and Next.js to a lesser extent.

00:57:20.500 --> 00:57:25.060
So, but again, in theory, I mean, maybe I'm overblowing it

00:57:25.060 --> 00:57:27.300
and FastUI will remain what it is now,

00:57:27.300 --> 00:57:31.780
but in theory we've set up this language

00:57:31.780 --> 00:57:35.300
of different components that hopefully is,

00:57:35.300 --> 00:57:38.180
whilst by no means universal, complete enough

00:57:38.180 --> 00:57:40.300
that you can build lots of common user interfaces with it

00:57:40.300 --> 00:57:42.400
and then if it really gains adoption,

00:57:42.400 --> 00:57:44.580
then people can go and build new backends

00:57:44.580 --> 00:57:46.460
and new frontends and they all, in theory,

00:57:46.460 --> 00:57:49.340
should be able to mix and match with each other.

00:57:49.340 --> 00:57:50.860
We'll see if that happens.

00:57:50.860 --> 00:57:52.700
- Yeah, and widgets too, right?

00:57:52.700 --> 00:57:56.180
Kind of like see a Tailwind UI create a paid thing

00:57:56.180 --> 00:57:58.600
for higher order widgets potentially.

00:57:58.600 --> 00:58:02.100
Just being React already makes that,

00:58:02.100 --> 00:58:04.340
that probably exists, I just don't know.

00:58:04.340 --> 00:58:05.980
- And there's been a number of issues

00:58:05.980 --> 00:58:09.820
of people wanting to render existing,

00:58:09.820 --> 00:58:14.100
existing basically build extensions to FastUI

00:58:14.100 --> 00:58:15.260
to render their widgets.

00:58:15.260 --> 00:58:19.700
I think we will probably support the Repra HTML

00:58:19.700 --> 00:58:23.700
that things like pandas data frames already return

00:58:23.700 --> 00:58:25.660
so that you could, for example, return a data frame

00:58:25.660 --> 00:58:26.980
and it might not be pretty,

00:58:26.980 --> 00:58:29.500
but you'll get something coming up as HTML

00:58:29.500 --> 00:58:33.220
and start ugly and then move on to doing those things

00:58:33.220 --> 00:58:35.300
in an even more powerful way.

00:58:35.300 --> 00:58:37.460
- Sure, yeah, I didn't even think of the data science side,

00:58:37.460 --> 00:58:40.260
but there's probably a lot of cool dashboard widgets

00:58:40.260 --> 00:58:41.940
connected to pandas and pullers

00:58:41.940 --> 00:58:43.860
that are potential out there.

00:58:43.860 --> 00:58:46.940
- Yeah, and charts and visualizing data

00:58:46.940 --> 00:58:49.140
is something that I think is interesting.

00:58:49.140 --> 00:58:51.620
There's no reason why a lot of them couldn't be implemented

00:58:51.620 --> 00:58:56.620
as FastUI components and then, yeah, displayed.

00:58:56.620 --> 00:58:58.980
- Yep, okay.

00:58:58.980 --> 00:59:02.020
We are running pretty short on time,

00:59:02.020 --> 00:59:04.300
but I feel like we should probably,

00:59:04.300 --> 00:59:07.780
bring a little more pedantic to the side

00:59:07.780 --> 00:59:09.900
and just talk real quickly about forms, right?

00:59:09.900 --> 00:59:10.940
What do you think?

00:59:10.940 --> 00:59:11.780
- Yeah, absolutely.

00:59:11.780 --> 00:59:15.220
Let me, yes, so if you, probably easiest,

00:59:15.220 --> 00:59:17.100
if you share, let me see, share my screen.

00:59:17.100 --> 00:59:19.100
I'll do it from here 'cause I can also,

00:59:19.100 --> 00:59:20.700
it's like the full screen.

00:59:20.700 --> 00:59:22.620
- You can show more behind the scenes, yeah, yeah, yeah.

00:59:22.620 --> 00:59:26.020
- It's probably most interesting if we look at the,

00:59:26.020 --> 00:59:31.020
how the form is implemented in the code first

00:59:31.020 --> 00:59:33.100
and then we look at what that means for the UI.

00:59:33.100 --> 00:59:35.780
So this is the login form that Michael,

00:59:35.780 --> 00:59:37.820
you were just showing here that I can show.

00:59:37.820 --> 00:59:40.260
- So there's a login form with an email address,

00:59:40.260 --> 00:59:43.420
password, some validation, basically like that.

00:59:43.420 --> 00:59:45.100
- That's powered entirely by, again,

00:59:45.100 --> 00:59:46.940
a completely vanilla Pydantic model.

00:59:46.940 --> 00:59:52.320
And the way that we return that is we return three things.

00:59:52.320 --> 00:59:57.420
Heading, which is just like just telling the person

00:59:57.420 --> 00:59:58.620
what we're looking at here in the demo.

00:59:58.620 --> 01:00:00.780
And then this third thing is the interesting bit

01:00:00.780 --> 01:00:04.900
where again, actually the model form is again,

01:00:04.900 --> 01:00:07.060
generic around the Pydantic model.

01:00:07.060 --> 01:00:08.700
And then it takes one other argument,

01:00:08.700 --> 01:00:10.260
which is the submit URL.

01:00:10.260 --> 01:00:11.100
And that's enough information.

01:00:11.100 --> 01:00:13.660
- Right, so what you're returning as part of that hierarchy

01:00:13.660 --> 01:00:18.660
in Python is a model form and you give it a Pydantic model.

01:00:18.660 --> 01:00:22.020
And so it looks at the pedantic class and says,

01:00:22.020 --> 01:00:24.140
we're going to create like an email address

01:00:24.140 --> 01:00:26.980
and a password field and so on, right?

01:00:26.980 --> 01:00:27.980
- Exactly that.

01:00:27.980 --> 01:00:29.660
- Awesome, okay.

01:00:29.660 --> 01:00:32.180
- And then when you submit that form,

01:00:32.180 --> 01:00:37.180
it's submitted as form data.

01:00:37.180 --> 01:00:42.980
So as not as JSON data, but as a vanilla HTML form.

01:00:43.220 --> 01:00:45.740
- Standard form post type of thing.

01:00:45.740 --> 01:00:47.800
- Post form, and then we have this,

01:00:47.800 --> 01:00:51.020
this syntax is definitely slightly funky here,

01:00:51.020 --> 01:00:54.140
but it's how we do it in FastAPI.

01:00:54.140 --> 01:00:56.820
We have form, which is annotated as a login form,

01:00:56.820 --> 01:00:59.380
but it's also got fast UI form,

01:00:59.380 --> 01:01:02.340
which in turn, which also takes login form,

01:01:02.340 --> 01:01:03.540
all of which looks a bit ugly,

01:01:03.540 --> 01:01:05.420
but what we're really doing in the background

01:01:05.420 --> 01:01:10.420
is converting form data into the Pydantic model,

01:01:11.500 --> 01:01:15.260
including flattening and de-flattening the model

01:01:15.260 --> 01:01:16.700
in the case where we have nested models,

01:01:16.700 --> 01:01:17.740
which I'll show you in a minute.

01:01:17.740 --> 01:01:20.100
But the result of this is, once we,

01:01:20.100 --> 01:01:23.260
in our post endpoint, we get an instance of the login form

01:01:23.260 --> 01:01:24.960
that we can then go do stuff with.

01:01:24.960 --> 01:01:28.900
If I show you a more comprehensive or complex example,

01:01:28.900 --> 01:01:33.420
this big model here becomes a big form.

01:01:33.420 --> 01:01:35.220
And this has a bunch more stuff in it.

01:01:35.220 --> 01:01:37.540
So it has file inputs.

01:01:37.540 --> 01:01:39.060
Now file inputs are one of the reasons

01:01:39.060 --> 01:01:41.100
we can't just submit JSON,

01:01:41.100 --> 01:01:43.380
because they can be very large.

01:01:43.380 --> 01:01:46.260
- Multi-part encoding and all those things, yeah.

01:01:46.260 --> 01:01:47.780
- All those things, right.

01:01:47.780 --> 01:01:51.900
And so here we have name.

01:01:51.900 --> 01:01:53.940
We use bold again, as I have before,

01:01:53.940 --> 01:01:56.140
to indicate required fields.

01:01:56.140 --> 01:01:57.820
So we could, I don't know,

01:01:57.820 --> 01:02:01.580
I've got some pedantic logos here that I'll use as images.

01:02:01.580 --> 01:02:03.380
This one is multiple images.

01:02:03.380 --> 01:02:06.400
So we can select multiple images,

01:02:06.400 --> 01:02:09.860
a date field in this case, date of birth.

01:02:09.860 --> 01:02:11.260
- Calendar picker, very nice.

01:02:11.260 --> 01:02:13.540
Is that just input type equals?

01:02:13.540 --> 01:02:16.380
- That's just input type equals date.

01:02:16.380 --> 01:02:17.300
We have switches.

01:02:17.300 --> 01:02:19.740
We have, and then you'll see here,

01:02:19.740 --> 01:02:22.300
we have size model, arrow width,

01:02:22.300 --> 01:02:23.660
and size model, arrow height.

01:02:23.660 --> 01:02:25.940
And the point is that we're doing here,

01:02:25.940 --> 01:02:27.580
and these are integer fields,

01:02:27.580 --> 01:02:29.740
but the cool bit is that they map

01:02:29.740 --> 01:02:33.500
to a nested Pydantic model within the big model.

01:02:33.500 --> 01:02:37.580
And so what FastUI is doing internally

01:02:37.580 --> 01:02:42.580
is basically flattening this into one list of form fields,

01:02:42.580 --> 01:02:44.940
which is then what we get rendered here.

01:02:44.940 --> 01:02:49.300
- So in your Pydantic model, you have a size object,

01:02:49.300 --> 01:02:51.500
but then in the form, it just has the width

01:02:51.500 --> 01:02:52.700
and the height, the one after another.

01:02:52.700 --> 01:02:54.460
- Size width and size height, exactly that.

01:02:54.460 --> 01:02:58.900
- If I put a requirement or a restriction,

01:02:58.900 --> 01:03:01.780
like min or max onto the field in the size model,

01:03:01.780 --> 01:03:05.740
would that become a client side min and max in the form?

01:03:05.740 --> 01:03:07.860
- There's an open PR to do exactly that.

01:03:07.860 --> 01:03:09.140
- Awesome. - Yeah, so that we will do,

01:03:09.140 --> 01:03:11.700
but obviously we will get server-side validation as well.

01:03:11.700 --> 01:03:13.180
- And we've only been at it for a couple of weeks,

01:03:13.180 --> 01:03:16.300
so like it's, there's more to do, right?

01:03:16.300 --> 01:03:17.140
But that's awesome.

01:03:17.140 --> 01:03:18.500
That'll be fun. - Yeah, and then you'll see

01:03:18.500 --> 01:03:20.540
in uploads, we have some quite powerful things

01:03:20.540 --> 01:03:21.380
we can do here.

01:03:21.380 --> 01:03:26.380
So we use the upload file, which is a starlet type,

01:03:26.380 --> 01:03:30.860
but we can also annotate it with form file,

01:03:30.860 --> 01:03:33.140
which takes two optional arguments

01:03:33.140 --> 01:03:36.620
of what rule, what except to apply.

01:03:36.620 --> 01:03:40.220
So that will, both in the browser, when you open the--

01:03:40.220 --> 01:03:43.780
- Yeah, when you choose a file browse dialog.

01:03:43.780 --> 01:03:45.220
- It'll tell you what size-- - You have a MIME,

01:03:45.220 --> 01:03:47.300
so for people listening, you have the MIME typeset,

01:03:47.300 --> 01:03:50.260
not like an extension, but you have image/star,

01:03:50.260 --> 01:03:53.420
which means, you know, image/jpeg, png, webp, et cetera,

01:03:53.420 --> 01:03:54.540
right? - Right, and that's understood

01:03:54.540 --> 01:03:58.580
by the browser and then by the OS to let you select files,

01:03:58.580 --> 01:04:00.340
but it's also validated server-side.

01:04:00.340 --> 01:04:02.140
So if someone goes and edits their HTML

01:04:02.140 --> 01:04:05.500
and submits a not image, the server-side validation

01:04:05.500 --> 01:04:07.460
will check, at least based on the file extension,

01:04:07.460 --> 01:04:09.260
that it looks like an image.

01:04:09.260 --> 01:04:11.540
And you get back the bytes, so you could also go

01:04:11.540 --> 01:04:14.340
to validation that the bytes are a valid image

01:04:14.340 --> 01:04:16.220
if you so wanted.

01:04:16.220 --> 01:04:20.380
- To read the BOM, the mark that indicates the file type

01:04:20.380 --> 01:04:22.500
that's sometimes in these different files, yeah.

01:04:22.500 --> 01:04:26.100
- Right, and so if I submit this, but let's say,

01:04:26.100 --> 01:04:27.660
well, first of all, if I try to submit this,

01:04:27.660 --> 01:04:29.100
because we've got server-side validation

01:04:29.100 --> 01:04:31.100
of which fields are required, it won't let me submit

01:04:31.100 --> 01:04:34.100
if this file field is not completed.

01:04:34.100 --> 01:04:37.780
And then I think if we put in name

01:04:37.780 --> 01:04:40.100
and we don't capitalize it in this case,

01:04:40.100 --> 01:04:42.340
we'll go off and do the validation and come back

01:04:42.340 --> 01:04:44.020
and we'll say name must start with a capital

01:04:44.020 --> 01:04:45.660
because I've implemented it.

01:04:45.660 --> 01:04:47.020
- Where's that validation?

01:04:47.020 --> 01:04:49.660
Oh, I see, it's a function that you write.

01:04:49.660 --> 01:04:51.140
- Right, so just to prove the point,

01:04:51.140 --> 01:04:54.700
I've just written a validator in Pydantic

01:04:54.700 --> 01:04:57.540
which says this must start with uppercase.

01:04:57.540 --> 01:05:02.260
And if I then went in here and edited that

01:05:02.260 --> 01:05:05.660
to print out the form, is that gonna now clear my form?

01:05:05.660 --> 01:05:07.580
No, it's not, which is magic.

01:05:07.580 --> 01:05:09.460
And if I submit that, you'll see here

01:05:09.460 --> 01:05:12.020
where I printed out the form,

01:05:12.020 --> 01:05:14.180
we got the different file objects

01:05:14.180 --> 01:05:15.820
and we got the raw data all come through

01:05:15.820 --> 01:05:17.180
as the Pydantic model.

01:05:17.180 --> 01:05:18.500
- Yeah, that's really cool.

01:05:18.500 --> 01:05:22.900
And so I love how even the custom validators in Pydantic,

01:05:22.900 --> 01:05:25.180
like Python code that you wrote appears

01:05:25.180 --> 01:05:28.180
on what feels like client side

01:05:28.180 --> 01:05:32.580
but is really server side validation run by React, right?

01:05:32.580 --> 01:05:33.420
- Yeah, exactly that.

01:05:33.420 --> 01:05:35.260
And so we'll do stuff like length checks

01:05:35.260 --> 01:05:37.900
and all the things you can do on an input client side

01:05:37.900 --> 01:05:41.140
as well, but of course there'll also be enforced server side

01:05:41.140 --> 01:05:42.500
which obviously if you're building anything

01:05:42.500 --> 01:05:45.360
that is gonna be exposed to the internet, you've gotta do.

01:05:45.360 --> 01:05:49.460
- Yeah, you should never, never trust

01:05:49.460 --> 01:05:50.980
what comes into your web app.

01:05:50.980 --> 01:05:53.100
It's just put it online for five minutes

01:05:53.100 --> 01:05:53.940
and look at the log.

01:05:53.940 --> 01:05:58.300
Somebody's already after wpadmin.php.

01:05:58.300 --> 01:05:59.820
- Yeah, exactly that.

01:05:59.820 --> 01:06:02.580
So yeah, and then the last thing I'll show,

01:06:02.580 --> 01:06:03.900
I know we haven't got very long at all,

01:06:03.900 --> 01:06:07.260
is authentication which I've just been working on now.

01:06:07.260 --> 01:06:08.940
So this is again, it's a simple form.

01:06:08.940 --> 01:06:10.860
I'm just gonna select an email,

01:06:10.860 --> 01:06:14.460
put in a random password and I can log in.

01:06:14.460 --> 01:06:16.020
And in this case, I've logged in.

01:06:16.020 --> 01:06:18.700
It just says who I am and how many people are logged in.

01:06:18.700 --> 01:06:21.280
If I come back to this page, it'll show me logged in

01:06:21.280 --> 01:06:24.200
and I can do post request to log out.

01:06:24.200 --> 01:06:27.240
And what it's doing internally is,

01:06:27.240 --> 01:06:28.080
and again, this is the kind of thing

01:06:28.080 --> 01:06:29.760
that would be lots and lots of work to implement

01:06:29.760 --> 01:06:31.140
if you're doing it yourself,

01:06:31.140 --> 01:06:34.580
is it's storing in session storage, the auth token,

01:06:34.580 --> 01:06:37.200
then adding it as a header where we do the fetch

01:06:37.200 --> 01:06:39.040
from the front end to the back end

01:06:39.040 --> 01:06:42.880
so we can effectively store sessions that way.

01:06:42.880 --> 01:06:43.920
- Oh yeah, very cool.

01:06:43.920 --> 01:06:47.680
Yeah, auth tokens coming in as a header item

01:06:47.680 --> 01:06:49.600
or being set as a header item, excellent.

01:06:49.600 --> 01:06:50.520
- Right, exactly.

01:06:51.360 --> 01:06:52.280
- Cool.

01:06:52.280 --> 01:06:55.320
- So yeah, I hope that we've done a bit of a whirlwind tour

01:06:55.320 --> 01:06:57.160
through FastUI and what's there now

01:06:57.160 --> 01:06:58.920
and what I hope is coming up

01:06:58.920 --> 01:07:03.240
and the slightly philosophy of how, why I built it.

01:07:03.240 --> 01:07:05.000
But yeah, I hope that was interesting.

01:07:05.000 --> 01:07:08.800
- It's super interesting and it's really early days.

01:07:08.800 --> 01:07:10.360
I'm looking forward to two things,

01:07:10.360 --> 01:07:11.720
to see what people go do with it,

01:07:11.720 --> 01:07:13.640
what widgets and stuff they build.

01:07:13.640 --> 01:07:15.320
So can you drop in, like you said,

01:07:15.320 --> 01:07:17.800
a calendar or something awesome like that.

01:07:17.800 --> 01:07:19.080
And I'm also looking forward to see

01:07:19.080 --> 01:07:22.520
what you all internally release in a couple months.

01:07:22.520 --> 01:07:24.680
- Absolutely.

01:07:24.680 --> 01:07:27.920
Yeah, thanks so much for having me

01:07:27.920 --> 01:07:32.280
and letting me witter on about this random library.

01:07:32.280 --> 01:07:34.320
- Yeah, of course, good work.

01:07:34.320 --> 01:07:35.780
It's certainly creative.

01:07:35.780 --> 01:07:40.000
Maybe just give people a sense of, as we wrap it up,

01:07:40.000 --> 01:07:41.180
can they use it now?

01:07:41.180 --> 01:07:42.640
Should they use it now?

01:07:42.640 --> 01:07:43.600
Can they contribute?

01:07:43.600 --> 01:07:44.560
Maybe they're interested.

01:07:44.560 --> 01:07:46.920
What do you tell that crew?

01:07:46.920 --> 01:07:48.680
- I'd love people to contribute.

01:07:48.680 --> 01:07:52.040
Both, I mean, almost most useful is issues saying

01:07:52.040 --> 01:07:54.800
how you're using it, where it's working, where it's not.

01:07:54.800 --> 01:07:57.320
There is a bunch of people who've already submitted PRs

01:07:57.320 --> 01:07:59.120
and continue to do so.

01:07:59.120 --> 01:08:03.400
And yeah, I think what works, works pretty rigorously

01:08:03.400 --> 01:08:06.460
and is probably better implemented and tested

01:08:06.460 --> 01:08:08.980
than lots of private code.

01:08:08.980 --> 01:08:14.440
But definitely within, internal uses, use it now.

01:08:14.440 --> 01:08:18.960
Like I say, Pydantic is building things with it now.

01:08:18.960 --> 01:08:23.320
So look, I mean, I give the open source guarantee

01:08:23.320 --> 01:08:24.560
that it's relatively safe,

01:08:24.560 --> 01:08:26.840
which is the guarantee that means nothing.

01:08:26.840 --> 01:08:28.640
But mostly because at the end,

01:08:28.640 --> 01:08:31.160
it's just defining how you build your UI

01:08:31.160 --> 01:08:34.400
and how you implement your session authentication.

01:08:34.400 --> 01:08:36.200
It's not having strong opinions about that.

01:08:36.200 --> 01:08:39.520
So yeah, I think it's the place where people should go

01:08:39.520 --> 01:08:42.320
and try it and give feedback.

01:08:42.320 --> 01:08:43.160
- Excellent.

01:08:43.160 --> 01:08:45.480
Well, thanks again for coming on the show.

01:08:45.480 --> 01:08:48.160
Looking forward to talking to you next week.

01:08:48.160 --> 01:08:49.000
No, just kidding.

01:08:49.000 --> 01:08:50.200
Like two in a row, I suppose.

01:08:50.200 --> 01:08:52.520
Looking forward to talking to you 2024.

01:08:52.520 --> 01:08:53.360
- Absolutely.

01:08:53.360 --> 01:08:54.180
Have a good Christmas.

01:08:54.180 --> 01:08:55.020
Thank you so much.

01:08:55.020 --> 01:08:55.860
- Yeah, thanks.

01:08:55.860 --> 01:08:56.680
Bye.

01:08:56.680 --> 01:08:58.340
[The End]

