WEBVTT

00:00:00.000 --> 00:00:01.320
- Hey, Jimmy.

00:00:01.320 --> 00:00:02.800
- Hey, Michael, how are you doing?

00:00:02.800 --> 00:00:03.800
- I'm doing well.

00:00:03.800 --> 00:00:05.600
Welcome to Talk Python to Me.

00:00:05.600 --> 00:00:07.320
It's fantastic to have you here.

00:00:07.320 --> 00:00:09.000
- Thank you, I'm really excited.

00:00:09.000 --> 00:00:10.160
- Yeah, I am too.

00:00:10.160 --> 00:00:12.160
I saw DropBase, I saw what you all are building.

00:00:12.160 --> 00:00:15.160
I'm like, that is pretty darn interesting.

00:00:15.160 --> 00:00:17.480
I think people will want to check it out.

00:00:17.480 --> 00:00:21.560
So we'll dive into this app and this platform

00:00:21.560 --> 00:00:25.280
that you made for app building, basically.

00:00:25.280 --> 00:00:26.680
And we'll have a lot of fun.

00:00:26.680 --> 00:00:29.080
Now, we're gonna go ahead and get started.

00:00:29.080 --> 00:00:30.920
Now, before we get into that, though,

00:00:30.920 --> 00:00:33.800
just give us a quick bit of background on yourself.

00:00:33.800 --> 00:00:35.120
How'd you get into programming?

00:00:35.120 --> 00:00:39.240
How'd you find yourself writing a Python building platform?

00:00:39.240 --> 00:00:43.400
- Awesome, yeah, I went to school for engineering.

00:00:43.400 --> 00:00:45.640
This was actually back in Canada.

00:00:45.640 --> 00:00:47.680
I studied in Montreal at a little school

00:00:47.680 --> 00:00:49.240
called McGill University.

00:00:49.240 --> 00:00:50.080
- Nice.

00:00:50.080 --> 00:00:51.480
- And so we started then.

00:00:51.480 --> 00:00:54.160
I used to intern, by the way,

00:00:54.160 --> 00:00:56.000
at this company called Research in Motion

00:00:56.000 --> 00:00:58.760
that used to make BlackBerries way back in the time.

00:00:58.760 --> 00:01:01.040
- Oh, yeah, awesome.

00:01:01.040 --> 00:01:02.640
In the heyday?

00:01:02.640 --> 00:01:03.880
- In the heyday, yeah.

00:01:03.880 --> 00:01:06.720
I remember when they said we had 50%

00:01:06.720 --> 00:01:09.640
of the US smartphone market share.

00:01:09.640 --> 00:01:12.680
But the platform was actually built on Java, not Python.

00:01:12.680 --> 00:01:16.000
Python was something afterwards.

00:01:16.000 --> 00:01:19.560
Actually, my co-founder is the Python programmer,

00:01:19.560 --> 00:01:22.360
and I picked up Python after we started working together.

00:01:22.360 --> 00:01:24.360
- Yeah, cool.

00:01:24.360 --> 00:01:27.880
You got any fun stories from your time at BlackBerry?

00:01:27.880 --> 00:01:28.720
Did you enjoy it?

00:01:28.720 --> 00:01:30.680
How long were you there?

00:01:30.680 --> 00:01:32.600
- I was there as an intern only.

00:01:32.600 --> 00:01:37.160
Spent about 16 to 20 months of internships.

00:01:37.160 --> 00:01:38.000
- Yeah.

00:01:38.000 --> 00:01:40.640
- At the time, I was, I think, in my third year of school.

00:01:40.640 --> 00:01:44.160
And we were just working on these little Java apps

00:01:44.160 --> 00:01:46.480
for the smartphones,

00:01:46.480 --> 00:01:49.760
and just making sure everything was working.

00:01:49.760 --> 00:01:52.600
The cool thing is when you work at a company

00:01:52.600 --> 00:01:54.360
that's making devices,

00:01:54.360 --> 00:01:57.680
devices have a very long development cycle.

00:01:57.680 --> 00:02:00.160
So imagine, for example, you worked at Apple today.

00:02:00.160 --> 00:02:04.000
Like the iPhone, what, 15, whichever one's coming next,

00:02:04.000 --> 00:02:05.800
they've been working on it for at least a year.

00:02:05.800 --> 00:02:07.400
- Yeah. - Probably longer.

00:02:07.400 --> 00:02:10.080
So you get access to all these prototypes

00:02:10.080 --> 00:02:11.320
that you get to use,

00:02:11.320 --> 00:02:13.720
'cause you're building for it, you're testing it.

00:02:13.720 --> 00:02:15.720
So that was a really nice, nice, nice thing.

00:02:15.720 --> 00:02:17.400
But you actually couldn't tell anybody about it.

00:02:17.400 --> 00:02:19.080
But it was really cool to know that you were

00:02:19.080 --> 00:02:20.880
on the last thing.

00:02:20.880 --> 00:02:22.880
- And you couldn't lose it in a bar,

00:02:22.880 --> 00:02:24.400
or anything like that, right? - Oh, absolutely not.

00:02:24.400 --> 00:02:25.880
You remember those stories, right?

00:02:25.880 --> 00:02:26.720
- Yes, exactly.

00:02:26.720 --> 00:02:29.000
- I've heard that story a few times.

00:02:29.000 --> 00:02:31.680
- Somebody got a hold of a lost phone,

00:02:31.680 --> 00:02:33.840
and it was sold, and there was all sorts of drama.

00:02:33.840 --> 00:02:34.680
It was a big deal.

00:02:34.680 --> 00:02:35.800
- Oh, yeah.

00:02:35.800 --> 00:02:39.680
- That was around iPhone four, three, four, five,

00:02:39.680 --> 00:02:41.400
sort of timeframe.

00:02:41.400 --> 00:02:42.240
- That's right, yeah.

00:02:42.240 --> 00:02:43.640
I remember that very clearly.

00:02:43.640 --> 00:02:44.480
- Yeah. - That was a whole drama.

00:02:44.480 --> 00:02:45.480
- So you didn't wanna be that.

00:02:45.480 --> 00:02:47.160
You wanted to make sure you hung on to it.

00:02:47.160 --> 00:02:49.600
- Oh, yeah, no, you get that, yeah.

00:02:49.600 --> 00:02:52.280
- Yeah, I think working for a company like that

00:02:52.280 --> 00:02:54.560
would have been awesome, at least in the heyday.

00:02:54.560 --> 00:02:58.880
It's cool to work for a tech company

00:02:58.880 --> 00:03:00.480
that's got a lot of wind that it's back,

00:03:00.480 --> 00:03:02.240
and a lot of people using it.

00:03:02.240 --> 00:03:03.680
It's kinda neat.

00:03:03.680 --> 00:03:05.520
- It was very fun.

00:03:05.520 --> 00:03:06.960
I was very happy.

00:03:06.960 --> 00:03:10.800
We had a lot of other interns that they hired at the time.

00:03:10.800 --> 00:03:14.000
So you just had a blast working there over the summers.

00:03:14.000 --> 00:03:16.440
- Yeah, a lot of excited people to do stuff.

00:03:16.440 --> 00:03:18.080
Excellent.

00:03:18.080 --> 00:03:22.000
Cool, and so then you picked up Python,

00:03:22.000 --> 00:03:23.360
I guess, when you started this project.

00:03:23.360 --> 00:03:24.200
Is that right?

00:03:24.960 --> 00:03:26.040
- Just a little bit before.

00:03:26.040 --> 00:03:30.000
So when we started our startup, this was back in 2020.

00:03:30.000 --> 00:03:36.920
My co-founder had been using Python.

00:03:36.920 --> 00:03:41.680
He did a master's degree, computer science,

00:03:41.680 --> 00:03:44.080
focused on machine learning, actually.

00:03:44.080 --> 00:03:46.720
And so in that field,

00:03:46.720 --> 00:03:49.640
Python is really the main language you use.

00:03:49.640 --> 00:03:50.480
- Yeah, it is.

00:03:50.480 --> 00:03:52.120
- And so he was very familiar with it.

00:03:52.120 --> 00:03:57.120
And so he set our stack, basically, to be a Python backend.

00:03:57.120 --> 00:03:59.560
And then just through that process,

00:03:59.560 --> 00:04:04.560
just looking at things and designing features,

00:04:04.560 --> 00:04:07.160
we just all got involved with Python.

00:04:07.160 --> 00:04:08.840
So it kinda just became the same.

00:04:08.840 --> 00:04:12.240
And this is actually the reason why we're working

00:04:12.240 --> 00:04:13.720
on a Python builder,

00:04:13.720 --> 00:04:16.680
is we're kinda building a product for ourselves.

00:04:16.680 --> 00:04:19.600
It's something where it fits our own needs,

00:04:19.600 --> 00:04:21.760
that works with our mental models.

00:04:21.760 --> 00:04:23.680
So that's pretty much it.

00:04:23.680 --> 00:04:29.200
So today, I spent a lot of time building apps

00:04:29.200 --> 00:04:31.840
with Dropbase, so internal tools.

00:04:31.840 --> 00:04:35.000
And that's most of the app building I do now.

00:04:35.000 --> 00:04:37.840
So building demos, testing the product,

00:04:37.840 --> 00:04:40.040
making sure everything is working,

00:04:40.040 --> 00:04:41.640
and then just finding other ways

00:04:41.640 --> 00:04:44.480
to make the developer experience more convenient.

00:04:44.480 --> 00:04:49.720
- It seems like something you could really take care

00:04:49.720 --> 00:04:53.600
of a bunch of internal automation type of apps.

00:04:53.600 --> 00:04:57.840
You don't have to create full-on web apps

00:04:57.840 --> 00:05:00.920
to secretize this data or to get that dashboard

00:05:00.920 --> 00:05:02.080
or whatever, right?

00:05:02.080 --> 00:05:03.640
You just fire up your own platform

00:05:03.640 --> 00:05:05.240
and point at your data sources.

00:05:05.240 --> 00:05:07.040
- That's right, yeah.

00:05:07.040 --> 00:05:11.400
So the big difference with other frameworks, right,

00:05:11.400 --> 00:05:13.360
is that you're gonna use these frameworks

00:05:13.360 --> 00:05:15.760
to build your customer-facing applications.

00:05:15.760 --> 00:05:20.280
And customers have very high expectations

00:05:20.280 --> 00:05:21.520
about what they need.

00:05:21.520 --> 00:05:25.800
Interactions sometimes make a big difference for them,

00:05:25.800 --> 00:05:29.480
UI components, the way models come up.

00:05:29.480 --> 00:05:30.800
It's all part of the experience.

00:05:30.800 --> 00:05:32.280
And so for that, you really need

00:05:32.280 --> 00:05:36.440
a lot of extra components complexity.

00:05:36.440 --> 00:05:37.280
- Yeah.

00:05:37.280 --> 00:05:39.080
- For internal tools, it's not to say

00:05:39.080 --> 00:05:42.600
that internal users don't have high expectations,

00:05:42.600 --> 00:05:45.960
but the kinds of things that you do with those tools

00:05:45.960 --> 00:05:47.720
tend to be very, very similar.

00:05:47.720 --> 00:05:54.400
You search for data, you get context about that.

00:05:54.400 --> 00:05:57.920
So for example, you search for a transaction or for a user,

00:05:57.920 --> 00:05:59.240
you get some more context to make sure

00:05:59.240 --> 00:06:01.040
that that's the user or the transaction

00:06:01.040 --> 00:06:02.520
that you want to act on.

00:06:02.520 --> 00:06:03.600
And then you just act on it, right?

00:06:03.600 --> 00:06:06.520
Like you trigger an action on that item

00:06:06.520 --> 00:06:09.800
or that resource or that person.

00:06:09.800 --> 00:06:12.960
And so it helps you simplify the kind of things you need.

00:06:12.960 --> 00:06:16.520
And so for that, having a framework,

00:06:16.520 --> 00:06:20.080
a builder to make this happen is super convenient.

00:06:20.080 --> 00:06:27.840
- So the subtitle catchphrase of DropBase

00:06:27.840 --> 00:06:31.040
is build internal web apps with just Python,

00:06:31.040 --> 00:06:32.400
which is awesome.

00:06:32.400 --> 00:06:35.000
And when I think of internal web apps,

00:06:35.000 --> 00:06:38.160
or even traditionally, if you look back a ways,

00:06:38.160 --> 00:06:40.320
there was VB6 and Windows Forms

00:06:40.320 --> 00:06:41.280
and those types of things

00:06:41.280 --> 00:06:43.840
that were kind of playing the same role.

00:06:43.840 --> 00:06:47.680
So same basic idea.

00:06:47.680 --> 00:06:50.160
There was a lot of people who refer to that

00:06:50.160 --> 00:06:52.640
as forms over data.

00:06:52.640 --> 00:06:57.560
It kind of the, not quite a negative term,

00:06:57.560 --> 00:06:59.440
but kind of like we're sort of doing

00:06:59.440 --> 00:07:02.640
the same basic architecture over and over,

00:07:02.640 --> 00:07:04.440
but it's a different problem every time.

00:07:04.440 --> 00:07:06.680
And so we kind of got to write code,

00:07:06.680 --> 00:07:08.880
create these projects from scratch every time,

00:07:08.880 --> 00:07:11.960
but they're the same kind of thing.

00:07:11.960 --> 00:07:15.320
And so, I think that's partly why VB6

00:07:15.320 --> 00:07:18.200
with its kind of visual drag and dropy experience

00:07:18.200 --> 00:07:19.080
became real popular

00:07:19.080 --> 00:07:20.520
'cause you could drag a table on there,

00:07:20.520 --> 00:07:22.200
drag a data source, bind it to that,

00:07:22.200 --> 00:07:25.200
make a button click when somebody touches this thing.

00:07:25.200 --> 00:07:28.920
And that didn't create something that would rival,

00:07:28.920 --> 00:07:31.160
say, airbnb.com,

00:07:31.160 --> 00:07:35.760
or where you have these really dynamic design sites,

00:07:35.760 --> 00:07:37.040
but that's not what they need.

00:07:37.040 --> 00:07:41.200
The company says, "Look, we need, this week,

00:07:41.200 --> 00:07:44.960
I need our sales people to be able to answer this question

00:07:44.960 --> 00:07:46.120
and make this change."

00:07:46.120 --> 00:07:49.160
That's what we need you to build this week.

00:07:49.160 --> 00:07:51.240
And if it's from scratch every time,

00:07:51.240 --> 00:07:53.720
that's a ton of rework.

00:07:53.720 --> 00:07:57.440
- Absolutely, it's a lot of work.

00:07:57.440 --> 00:08:01.240
It's funny you mentioned the forms over data.

00:08:01.240 --> 00:08:04.200
It is true that a lot of the,

00:08:04.200 --> 00:08:06.600
well, if you take it at a very high level,

00:08:06.600 --> 00:08:08.600
all apps are forms over data.

00:08:08.600 --> 00:08:14.960
Or all SaaS apps are forms over a database in some sense.

00:08:14.960 --> 00:08:22.840
And then you start hearing also about the similar things

00:08:22.840 --> 00:08:27.760
with, you've heard about the GPT wrappers, right?

00:08:27.760 --> 00:08:32.640
It's the same concept where it's like an oversimplification

00:08:32.640 --> 00:08:34.640
of what's happening,

00:08:34.640 --> 00:08:37.880
but at the same time, it is kind of core to what's happening

00:08:37.880 --> 00:08:40.320
and for internal tooling at least,

00:08:40.320 --> 00:08:44.680
is exactly what you need, forms over data, but very quickly.

00:08:44.680 --> 00:08:49.480
So that developers don't have to spend a lot of time

00:08:49.480 --> 00:08:51.760
basically doing the same things over and over again.

00:08:51.760 --> 00:08:53.240
You wanna make their lives easier

00:08:53.240 --> 00:08:55.760
to support their internal users.

00:08:55.760 --> 00:08:59.120
So people in customer support and operations.

00:08:59.120 --> 00:09:01.000
And I think sometimes even supporting

00:09:01.000 --> 00:09:02.400
other engineers as well.

00:09:02.400 --> 00:09:06.760
- Yeah, and it's not that people in companies

00:09:06.760 --> 00:09:11.480
don't have expectations of nice apps and nice interactions.

00:09:11.480 --> 00:09:15.120
It's just that it's more utilitarian.

00:09:15.120 --> 00:09:21.200
So many of these big enterprises,

00:09:21.200 --> 00:09:22.880
when you kind of think of them,

00:09:22.880 --> 00:09:24.200
maybe the right way to think of them is

00:09:24.200 --> 00:09:25.760
there's a massive Postgres

00:09:25.760 --> 00:09:27.880
or Microsoft SQL Server at the center.

00:09:27.880 --> 00:09:32.440
And it almost connects the business divisions

00:09:32.440 --> 00:09:34.800
like the sales team and the marketing team

00:09:34.800 --> 00:09:38.240
and the product team and all that.

00:09:38.240 --> 00:09:43.160
And if you can get into the database and answer questions,

00:09:43.160 --> 00:09:45.480
expose data, expose relationships,

00:09:45.480 --> 00:09:47.640
put a UI to some aspect of that,

00:09:47.640 --> 00:09:51.160
you're really right at the heart of the company

00:09:51.160 --> 00:09:52.200
in some sense.

00:09:52.200 --> 00:09:56.840
- Yeah, it's definitely about effectiveness.

00:09:56.840 --> 00:09:58.640
So one way we think about

00:09:58.640 --> 00:10:02.560
what these kinds of tools should do,

00:10:02.560 --> 00:10:05.920
is you have to enable developers

00:10:05.920 --> 00:10:10.920
to very quickly build apps that have maximal value,

00:10:10.920 --> 00:10:17.960
that lets you get the job done as effectively as possible,

00:10:17.960 --> 00:10:21.360
but also that's easy to use for the end user.

00:10:21.360 --> 00:10:23.360
So, if it's like a business operator

00:10:23.360 --> 00:10:25.160
or someone in the operations team,

00:10:25.160 --> 00:10:26.680
they also need to be able to learn quickly

00:10:26.680 --> 00:10:29.560
how to use it and trigger actions.

00:10:29.560 --> 00:10:34.560
And so we call that sort of effectiveness of the apps,

00:10:34.560 --> 00:10:37.320
some sort of like effectiveness score.

00:10:37.320 --> 00:10:40.120
And it just combines these components.

00:10:40.120 --> 00:10:41.520
And that's really the,

00:10:41.520 --> 00:10:43.480
like if you can get to the essence of it

00:10:43.480 --> 00:10:46.640
and create a framework or a tool builder

00:10:46.640 --> 00:10:48.960
that maximizes for that,

00:10:48.960 --> 00:10:50.600
I think you're in a really good place.

00:10:50.600 --> 00:10:53.680
It is something we're trying to do with DropBase.

00:10:53.680 --> 00:10:57.080
The components are simple.

00:10:57.080 --> 00:11:00.880
The kinds of apps that you can build look roughly the same,

00:11:00.880 --> 00:11:02.120
but they look really nice.

00:11:02.120 --> 00:11:05.040
And they're also quite simple to understand.

00:11:05.040 --> 00:11:08.200
They're modeled after spreadsheets in a way,

00:11:08.200 --> 00:11:11.920
where you have sort of data, a grid or table in the middle,

00:11:11.920 --> 00:11:12.960
and then there's a sidebar

00:11:12.960 --> 00:11:14.840
from where you can trigger actions.

00:11:14.840 --> 00:11:18.240
And this ties back to this concept of,

00:11:18.240 --> 00:11:22.040
when you ask people in operations,

00:11:22.040 --> 00:11:25.640
what they do, like sales, marketing, business operations,

00:11:25.640 --> 00:11:28.040
essentially ties back to the previous comments,

00:11:28.040 --> 00:11:31.280
which was you search for something,

00:11:31.280 --> 00:11:34.480
you get context about it and you trigger action.

00:11:34.480 --> 00:11:37.120
And so the way we translated that insight

00:11:37.120 --> 00:11:39.960
about what people just end up doing over and over again,

00:11:39.960 --> 00:11:41.720
we said, well, then you really just need

00:11:41.720 --> 00:11:43.360
some sort of search bar,

00:11:43.360 --> 00:11:48.240
you need a grid and you need a sidebar

00:11:48.240 --> 00:11:51.040
with some buttons or some other dropdowns

00:11:51.040 --> 00:11:52.480
and other components.

00:11:52.480 --> 00:11:53.680
And then you realize, okay,

00:11:53.680 --> 00:11:54.680
this is kind of what spreadsheets

00:11:54.680 --> 00:11:56.840
have been trying to do for a long time.

00:11:56.840 --> 00:11:57.680
- Yeah, that's true.

00:11:57.680 --> 00:11:58.520
- But it's exactly--

00:11:58.520 --> 00:12:00.360
- People do like oddly connect,

00:12:00.360 --> 00:12:02.400
yeah, people do oddly connect Excel

00:12:02.400 --> 00:12:03.920
to like external data sources

00:12:03.920 --> 00:12:05.760
and all sorts of weird things as well.

00:12:05.760 --> 00:12:06.600
Yeah.

00:12:06.600 --> 00:12:08.600
Or write EDA that makes some change.

00:12:08.600 --> 00:12:10.800
They probably should just not be doing that.

00:12:10.800 --> 00:12:15.200
- Yeah, there's a lot of, it's actually a big use case.

00:12:15.200 --> 00:12:18.800
On our previous product, we actually did exactly that.

00:12:18.800 --> 00:12:19.640
- Okay.

00:12:19.640 --> 00:12:24.640
- So we let you connect any database source

00:12:24.640 --> 00:12:27.600
to your Google Sheets

00:12:27.600 --> 00:12:30.520
and just kind of run that on a schedule, right?

00:12:30.520 --> 00:12:34.880
So you'd imagine in a business setting,

00:12:34.880 --> 00:12:38.280
you have sort of these like weekly, daily reports

00:12:38.280 --> 00:12:40.720
that analysts end up working on, right?

00:12:40.720 --> 00:12:45.720
And what you want is for the data to be fresh, up to date.

00:12:46.240 --> 00:12:48.680
And so people just wanted a way to,

00:12:48.680 --> 00:12:52.440
at 7 a.m., 8 a.m. on Monday morning,

00:12:52.440 --> 00:12:54.920
basically automatically pull data from a database,

00:12:54.920 --> 00:12:56.880
load it up to your spreadsheet,

00:12:56.880 --> 00:12:59.800
and then all your tables and calculations,

00:12:59.800 --> 00:13:01.760
which is sort of update,

00:13:01.760 --> 00:13:05.040
because they're referencing a tab,

00:13:05.040 --> 00:13:07.360
a sheet basically that has fresh data.

00:13:07.360 --> 00:13:10.240
And that helps people solve problems.

00:13:10.240 --> 00:13:11.840
And so it was very interesting,

00:13:11.840 --> 00:13:13.480
the evolution of all these tools.

00:13:13.480 --> 00:13:15.560
- Yeah, it is really interesting.

00:13:15.560 --> 00:13:20.560
Maybe one of the big differences is the interactivity here

00:13:20.560 --> 00:13:24.680
versus what you might do in that story, right?

00:13:24.680 --> 00:13:26.680
- That's right.

00:13:26.680 --> 00:13:29.480
So that's read-only, really.

00:13:29.480 --> 00:13:31.240
And then here, what we're doing is letting you

00:13:31.240 --> 00:13:34.080
trigger actions, perform actions,

00:13:34.080 --> 00:13:36.000
basically outside the app.

00:13:36.000 --> 00:13:37.840
So you might call an API,

00:13:37.840 --> 00:13:40.920
or you might trigger an internal endpoint,

00:13:40.920 --> 00:13:44.200
or just some triggers matching in the UI.

00:13:44.200 --> 00:13:45.400
- Yeah.

00:13:45.400 --> 00:13:47.360
So I think we'll get to this more later,

00:13:47.360 --> 00:13:48.560
but I wanna maybe touch on it

00:13:48.560 --> 00:13:49.800
since there's a good question,

00:13:49.800 --> 00:13:53.360
and also it might be a question a lot of people have.

00:13:53.360 --> 00:13:56.480
So what's the pricing model for this, right?

00:13:56.480 --> 00:13:57.720
Basically, more broadly,

00:13:57.720 --> 00:14:00.680
what is the business model around here?

00:14:00.680 --> 00:14:03.240
Luis says, "Already amazed by it.

00:14:03.240 --> 00:14:06.320
"Would like to compare it."

00:14:06.320 --> 00:14:08.360
First thought, there's nothing like this available

00:14:08.360 --> 00:14:10.440
in open source, so very neat.

00:14:10.440 --> 00:14:13.120
Yeah. - Yeah.

00:14:13.120 --> 00:14:15.240
So interesting.

00:14:15.240 --> 00:14:20.240
So the business model is we're gonna sell the product

00:14:20.240 --> 00:14:25.000
on a per user per month basis.

00:14:25.000 --> 00:14:27.600
So it's a B2B SaaS app product.

00:14:27.600 --> 00:14:32.560
Now, developers need to be able to play around with products

00:14:32.560 --> 00:14:36.240
before they can decide whether that's something they want.

00:14:36.240 --> 00:14:41.240
And so we have a sort of a free version of the products

00:14:42.680 --> 00:14:46.560
that you can set up locally, like in your own machine,

00:14:46.560 --> 00:14:49.760
or you can just put it up on an EC2,

00:14:49.760 --> 00:14:51.600
and you can just build apps for yourself.

00:14:51.600 --> 00:14:55.720
Like if you wanna automate personal tasks,

00:14:55.720 --> 00:14:58.120
you can totally use this for it.

00:14:58.120 --> 00:15:02.240
And then the way that we, in a way, layer the pricing

00:15:02.240 --> 00:15:05.880
is like if you need very complex permission systems,

00:15:05.880 --> 00:15:08.760
so like you build an app and you want it accessible

00:15:08.760 --> 00:15:12.560
by this person, by person A, but not person B,

00:15:12.560 --> 00:15:14.840
then you'll need very granular permission systems.

00:15:14.840 --> 00:15:16.760
And so that's an indicator that you're probably

00:15:16.760 --> 00:15:19.960
like a corporate user, you're a business user.

00:15:19.960 --> 00:15:22.440
And so we do the pricing based on that.

00:15:22.440 --> 00:15:25.240
- Cool, yeah.

00:15:25.240 --> 00:15:30.120
So there's an open, the source is open, at least.

00:15:30.120 --> 00:15:32.200
People can go and check it out, right?

00:15:32.200 --> 00:15:33.640
Is that true? - Let me clarify that.

00:15:33.640 --> 00:15:36.200
So you can self-host it. - Yes.

00:15:36.200 --> 00:15:40.840
- And you can look at the repo.

00:15:41.760 --> 00:15:46.760
Behind the scenes, it's a Docker image that you set.

00:15:46.760 --> 00:15:52.240
So the code for DropBase is not immediately,

00:15:52.240 --> 00:15:55.720
you can't just browse it through the file system,

00:15:55.720 --> 00:15:58.840
but the code is basically sitting in your machine

00:15:58.840 --> 00:16:00.600
when you set this up locally.

00:16:00.600 --> 00:16:03.920
Now, the difference here is if you look at the directory,

00:16:03.920 --> 00:16:06.640
where you have the workspace.

00:16:06.640 --> 00:16:10.440
So the workspace directory is where all of your apps

00:16:11.440 --> 00:16:16.440
all your apps files would be generated as you build the apps.

00:16:16.440 --> 00:16:18.520
- Okay. - And so that's really nice

00:16:18.520 --> 00:16:21.480
because you can essentially version control this

00:16:21.480 --> 00:16:24.360
from day one, you can build apps,

00:16:24.360 --> 00:16:26.400
you can check it in GitHub,

00:16:26.400 --> 00:16:29.720
and then you can just keep your code, you can version it.

00:16:29.720 --> 00:16:33.200
And so it's really, it's open source, it's clarified that,

00:16:33.200 --> 00:16:35.440
but you can self-host it.

00:16:35.440 --> 00:16:37.280
- Okay, so yeah, right.

00:16:37.280 --> 00:16:40.160
So you've got, it's on GitHub,

00:16:40.160 --> 00:16:45.160
but the licensing is really not like just straight up

00:16:45.160 --> 00:16:48.120
GPL open source type of thing, right?

00:16:48.120 --> 00:16:49.320
- That's correct, yes.

00:16:49.320 --> 00:16:51.440
- And what are the-- - And it's on GitHub

00:16:51.440 --> 00:16:54.440
because you need to clone, you do need to clone the repo

00:16:54.440 --> 00:16:58.040
and then you need to set it up and install it.

00:16:58.040 --> 00:16:59.640
- Yeah, yeah.

00:16:59.640 --> 00:17:02.480
Yeah, so the free tier doesn't allow self-hosting,

00:17:02.480 --> 00:17:05.240
but if you pay for some, one of the versions,

00:17:06.040 --> 00:17:08.200
then it does have a self-hosting option.

00:17:08.200 --> 00:17:10.400
So when you, just to wrap this up on the price,

00:17:10.400 --> 00:17:13.240
when you say it's $10 per user per month,

00:17:13.240 --> 00:17:17.520
is that per person that makes the project,

00:17:17.520 --> 00:17:18.720
that builds the apps,

00:17:18.720 --> 00:17:22.200
or is that per person that interacts with the web app?

00:17:22.200 --> 00:17:27.400
- So this is currently per member of your workspace.

00:17:27.400 --> 00:17:29.960
So we're not yet differentiating between someone

00:17:29.960 --> 00:17:33.040
who is building the app or using the app,

00:17:33.040 --> 00:17:34.560
although that might be something

00:17:34.560 --> 00:17:36.600
that we'll have to add later on.

00:17:36.600 --> 00:17:39.600
- Sure, so if you had say four salespeople

00:17:39.600 --> 00:17:42.520
and one developer, in quotes maybe,

00:17:42.520 --> 00:17:45.920
developer, that would be five users under this story.

00:17:45.920 --> 00:17:46.760
- Correct.

00:17:46.760 --> 00:17:47.760
- Okay. - Under the current pricing,

00:17:47.760 --> 00:17:50.160
yes. - Yes, yeah, yeah, okay.

00:17:50.160 --> 00:17:51.240
Cool.

00:17:51.240 --> 00:17:54.920
And I do, even if it's not just pure open source,

00:17:54.920 --> 00:17:55.760
take it and run with it,

00:17:55.760 --> 00:17:58.880
I do like the self-hosting aspect of it

00:17:58.880 --> 00:18:02.400
because if you've got private data,

00:18:02.400 --> 00:18:04.360
or maybe even more important than any of that,

00:18:04.360 --> 00:18:09.280
is I wanna connect it to data sources that are,

00:18:09.280 --> 00:18:10.640
I don't wanna give your cloud access

00:18:10.640 --> 00:18:12.760
to my company database, for example.

00:18:12.760 --> 00:18:13.640
- That's right.

00:18:13.640 --> 00:18:15.160
I can expand on that actually.

00:18:15.160 --> 00:18:17.120
So we did this-- - Yeah, go ahead.

00:18:17.120 --> 00:18:21.720
- Specifically with that comment in mind, in a sense.

00:18:21.720 --> 00:18:24.400
So when you're using internal tools,

00:18:24.400 --> 00:18:29.360
it's very, well, let's say it's almost all the cases,

00:18:29.360 --> 00:18:32.480
you are interacting with production,

00:18:32.480 --> 00:18:35.160
at least one production database, right?

00:18:35.160 --> 00:18:36.960
Like if you're supporting customers

00:18:36.960 --> 00:18:39.000
and you're issuing them a refund,

00:18:39.000 --> 00:18:40.360
you don't do that in tests

00:18:40.360 --> 00:18:42.760
and then take it to staging and then deploy it, right?

00:18:42.760 --> 00:18:46.800
You basically, you act on it on your production data.

00:18:46.800 --> 00:18:49.360
And so we thought, okay,

00:18:49.360 --> 00:18:52.040
people are probably going to be very hesitant

00:18:52.040 --> 00:18:57.040
to basically say, let me load up all my creds,

00:18:57.040 --> 00:19:01.720
all my API keys into some new player, a new cloud,

00:19:01.720 --> 00:19:03.560
and then like hope for the best, right?

00:19:03.560 --> 00:19:06.320
So when we designed DropBase,

00:19:06.320 --> 00:19:09.760
we call it the worker or the worker's server.

00:19:09.760 --> 00:19:12.040
The way you connect to data sources

00:19:12.040 --> 00:19:15.520
is you basically go to your .env file

00:19:15.520 --> 00:19:18.680
and you just add your database creds.

00:19:18.680 --> 00:19:22.920
That env file sits in the same directory

00:19:22.920 --> 00:19:25.160
that that workspace directory sits,

00:19:25.160 --> 00:19:27.800
the one that we saw on GitHub.

00:19:27.800 --> 00:19:30.080
And that's completely on your side

00:19:30.080 --> 00:19:33.120
and that's in your VPC or in your local machine.

00:19:33.120 --> 00:19:38.120
And the same server is the one that triggers the task

00:19:38.120 --> 00:19:41.600
to query your database.

00:19:41.600 --> 00:19:45.720
So, and that's also sitting on your side in your machine.

00:19:45.720 --> 00:19:49.960
And so the entire part of the product that processes,

00:19:49.960 --> 00:19:53.640
queries, touches your data, your data sources,

00:19:53.640 --> 00:19:58.240
your credentials, that's completely on the user side.

00:19:58.240 --> 00:20:01.040
And the only part that we manage

00:20:01.040 --> 00:20:04.000
is really just the permission system.

00:20:04.000 --> 00:20:06.520
So that controlling the workspace

00:20:06.520 --> 00:20:08.680
and controlling the app permissions,

00:20:08.680 --> 00:20:11.640
that's the layer that we control.

00:20:11.640 --> 00:20:12.880
And that's really like the part

00:20:12.880 --> 00:20:15.800
where we can do the pricing on to begin with.

00:20:15.800 --> 00:20:19.680
Like that's the feature set thing that helps us say,

00:20:19.680 --> 00:20:21.400
okay, this is gonna be paid customers

00:20:21.400 --> 00:20:22.520
and these are gonna be developers

00:20:22.520 --> 00:20:25.240
who are just gonna learn how to code in Python

00:20:25.240 --> 00:20:27.400
or just wanna build little apps

00:20:27.400 --> 00:20:29.440
for their own personal use.

00:20:29.440 --> 00:20:30.560
- Yeah.

00:20:30.560 --> 00:20:31.760
All right, that makes sense.

00:20:31.760 --> 00:20:35.840
You know, let's maybe talk through an example.

00:20:35.840 --> 00:20:38.320
If you go to dropbase.io, there's a,

00:20:38.320 --> 00:20:43.000
right at the top, there's a sort of tutorial

00:20:43.000 --> 00:20:46.480
or a demo video of you using it.

00:20:46.480 --> 00:20:49.480
I think, obviously I don't wanna just play the video,

00:20:49.480 --> 00:20:53.360
but maybe just talk us through the steps

00:20:53.360 --> 00:20:56.160
of what this app is and what are the steps to build it.

00:20:56.160 --> 00:20:59.320
And just for people who are listening

00:20:59.320 --> 00:21:00.880
and haven't watched that video,

00:21:00.880 --> 00:21:02.440
maybe I think it's 12 minutes long

00:21:02.440 --> 00:21:04.280
and you're like, let's create a new project.

00:21:04.280 --> 00:21:06.920
And here it is published at the end, right?

00:21:06.920 --> 00:21:07.760
Which is really nice.

00:21:07.760 --> 00:21:09.520
So yeah, talk us through.

00:21:09.520 --> 00:21:10.360
- Sure, yeah.

00:21:10.360 --> 00:21:13.680
Okay, so I'm gonna try to recreate the exact same one

00:21:13.680 --> 00:21:15.280
that you have on the screen, right?

00:21:15.280 --> 00:21:18.800
So it looks like an app that has two tables

00:21:18.800 --> 00:21:21.360
and you can somehow perform an action

00:21:21.360 --> 00:21:23.640
with a button on the sidebar.

00:21:23.640 --> 00:21:28.840
So basically it just notifies,

00:21:28.840 --> 00:21:32.000
either notifies a user or it performs some sort of--

00:21:32.000 --> 00:21:34.440
- I think what this one does is it has workspaces

00:21:34.440 --> 00:21:35.920
and then users are in a workspace

00:21:35.920 --> 00:21:38.520
and you can make them admins or not admins

00:21:38.520 --> 00:21:39.360
of that workspace. - Okay, gotcha.

00:21:39.360 --> 00:21:40.760
- Is the one, is that-- - Gotcha.

00:21:40.760 --> 00:21:41.920
- Does that help? - Perfect, okay.

00:21:41.920 --> 00:21:42.760
Yeah, okay.

00:21:42.760 --> 00:21:45.120
So, okay, so I'll describe how you build this app.

00:21:45.120 --> 00:21:47.360
So you go to our app studio

00:21:47.360 --> 00:21:49.120
and it's gonna be a blank canvas.

00:21:49.120 --> 00:21:52.680
In that canvas, you can add tables.

00:21:52.680 --> 00:21:55.520
So the first thing you do is you add table one,

00:21:55.520 --> 00:21:56.760
you add the first table,

00:21:56.760 --> 00:22:00.480
and then you would add table two,

00:22:00.480 --> 00:22:02.160
which is the second table.

00:22:02.160 --> 00:22:05.400
And then you add a widget, so on the sidebar.

00:22:05.400 --> 00:22:07.640
So you just click on add button

00:22:07.640 --> 00:22:10.800
and then it just places a button on the screen for you.

00:22:10.800 --> 00:22:13.280
So that would be sort of a shell of the application.

00:22:13.280 --> 00:22:15.280
It'll be just the UI part.

00:22:15.280 --> 00:22:18.120
At this point, it's just a few mouse clicks.

00:22:18.120 --> 00:22:20.000
There's no JavaScript code

00:22:20.000 --> 00:22:21.880
or Python code that you're writing.

00:22:21.880 --> 00:22:24.840
The next step is to add the sort of the logic

00:22:24.840 --> 00:22:26.000
behind the scenes.

00:22:26.000 --> 00:22:29.640
The first thing we need to do is to populate the first table

00:22:29.640 --> 00:22:32.400
with data about your workspaces.

00:22:32.400 --> 00:22:36.440
And essentially what we do is you click on create new,

00:22:36.440 --> 00:22:38.200
you create a new function.

00:22:38.200 --> 00:22:40.760
And in that function, it could be a SQL function

00:22:40.760 --> 00:22:42.480
or a Python function.

00:22:42.480 --> 00:22:44.080
Because that's just a table,

00:22:44.080 --> 00:22:46.400
you can just create a new SQL function.

00:22:46.400 --> 00:22:49.240
So you do create a new function,

00:22:49.240 --> 00:22:51.240
select everything from workspaces,

00:22:51.240 --> 00:22:53.320
let's say that's the table.

00:22:53.320 --> 00:22:55.240
And then you can see a little preview

00:22:55.240 --> 00:22:58.040
of what that select statement will result in.

00:22:58.040 --> 00:23:01.800
So you can verify that that's the data that you wanna show.

00:23:01.800 --> 00:23:05.760
Once you've done that, you just save that file, that query,

00:23:05.760 --> 00:23:08.640
and you do something we call binding.

00:23:08.640 --> 00:23:11.280
So in the UI, you can select table one

00:23:11.280 --> 00:23:13.800
and it'll present you with the tables properties.

00:23:13.800 --> 00:23:18.400
And one of the properties is which SQL file,

00:23:18.400 --> 00:23:21.160
which SQL script it's bound to.

00:23:21.160 --> 00:23:25.120
So you just click bind to the SQL file that you just wrote,

00:23:25.120 --> 00:23:27.640
and then it just automatically populates it

00:23:27.640 --> 00:23:29.880
with data for your workspace.

00:23:29.880 --> 00:23:32.560
Now, the second table is a little bit more interesting

00:23:32.560 --> 00:23:36.120
because the second table will update

00:23:36.120 --> 00:23:39.000
depending on what row you've selected in the first table.

00:23:39.000 --> 00:23:42.840
So when you click on a workspace in the first table,

00:23:42.840 --> 00:23:45.040
it should load all of the users

00:23:45.040 --> 00:23:47.440
that are part of a particular workspace.

00:23:47.440 --> 00:23:52.880
And so we do this, we have a feature called dependent tables

00:23:52.880 --> 00:23:54.120
and that's exactly what it does.

00:23:54.120 --> 00:23:57.880
So for the second table, you still write a SQL query

00:23:57.880 --> 00:24:00.840
and the query would just say, select everything from users

00:24:00.840 --> 00:24:06.840
where the workspace ID is the selected row works as ID

00:24:06.840 --> 00:24:11.160
from the first table.

00:24:11.160 --> 00:24:13.360
And we use that sort of a Jinja,

00:24:13.360 --> 00:24:16.360
I'm not sure maybe the audience will be familiar with Jinja.

00:24:16.360 --> 00:24:18.280
It's sort of like Jinja templating style

00:24:18.280 --> 00:24:21.320
where you say select everything from users

00:24:21.320 --> 00:24:26.320
where workspace ID is double curly brace.

00:24:26.320 --> 00:24:28.760
And then we have something called state.

00:24:28.760 --> 00:24:32.040
State basically gives you the state of the UI

00:24:32.040 --> 00:24:34.360
at any point in time when you click something.

00:24:34.360 --> 00:24:36.640
And it's really related to class

00:24:36.640 --> 00:24:41.640
so you can say state.tables.table1.workspaceID.

00:24:41.640 --> 00:24:50.000
And then we resolve that into the value

00:24:50.000 --> 00:24:53.640
that's the workspace ID from the first table.

00:24:53.640 --> 00:24:58.880
And then you do the same thing, you save that SQL query,

00:24:58.880 --> 00:25:00.680
you bind it to the second table

00:25:00.680 --> 00:25:02.640
and then we automatically infer that

00:25:02.640 --> 00:25:07.440
whenever you select a different row in the first table,

00:25:07.440 --> 00:25:11.160
the second table will update the workspace ID value,

00:25:11.160 --> 00:25:14.080
rerun the query and then show you the data for it.

00:25:14.080 --> 00:25:14.920
- Yeah, that's cool.

00:25:14.920 --> 00:25:16.520
I was wondering how that happened.

00:25:16.520 --> 00:25:19.400
I thought you must have to wire some on change event,

00:25:19.400 --> 00:25:21.320
clicks over here, then it triggers that,

00:25:21.320 --> 00:25:23.680
but you just have that all automatic, right?

00:25:23.680 --> 00:25:24.520
- That's right, yeah.

00:25:24.520 --> 00:25:29.520
So the UI actually knows that which tables are related.

00:25:29.840 --> 00:25:32.760
So the UI sends a payload to the backend saying,

00:25:32.760 --> 00:25:36.240
this table was clicked and this other table

00:25:36.240 --> 00:25:37.800
is related to it.

00:25:37.800 --> 00:25:42.080
And so we kind of know that we need to process those again.

00:25:42.080 --> 00:25:45.560
And so that's how we do this dependent table.

00:25:45.560 --> 00:25:49.840
For getting the value of the workspace ID

00:25:49.840 --> 00:25:52.400
in the first table, we basically,

00:25:52.400 --> 00:25:57.240
we resolve the sort of the variables in the backend

00:25:57.240 --> 00:25:58.620
and then pass the value

00:25:58.620 --> 00:26:00.840
so that we can update the query.

00:26:00.840 --> 00:26:03.160
So let's say that you stop at that point, right?

00:26:03.160 --> 00:26:05.260
And then you just say, preview the app.

00:26:05.260 --> 00:26:07.880
The app would look like two tables

00:26:07.880 --> 00:26:10.960
where it's really just lets you see all the users

00:26:10.960 --> 00:26:15.220
for each workspace that you have in your database.

00:26:15.220 --> 00:26:18.320
And then a few more things to make that very useful

00:26:18.320 --> 00:26:21.960
is you might want to search for a workspace

00:26:21.960 --> 00:26:24.520
before you know who to support.

00:26:24.520 --> 00:26:27.980
So let's say each workspace is associated

00:26:27.980 --> 00:26:29.800
with one of your customers.

00:26:29.800 --> 00:26:32.240
So let's say company A is your customer

00:26:32.240 --> 00:26:34.680
and company A gives you a call, a support call and says,

00:26:34.680 --> 00:26:39.060
hey, can you make John in our company an admin?

00:26:39.060 --> 00:26:42.000
So the first thing you want to do is you want to find,

00:26:42.000 --> 00:26:45.320
you search for company A and then find John.

00:26:45.320 --> 00:26:48.040
So we have this nice feature that basically

00:26:48.040 --> 00:26:50.920
automatically creates searches for you.

00:26:50.920 --> 00:26:53.280
So let's say in the first table,

00:26:53.280 --> 00:26:57.180
you can click on a button to convert it to a smart table.

00:26:58.180 --> 00:27:02.560
And when you do that, we basically generate filters for you.

00:27:02.560 --> 00:27:06.840
So you can then just say, I'd like to search by company name

00:27:06.840 --> 00:27:09.660
and you can select the filter

00:27:09.660 --> 00:27:12.100
and you can pin the filter into the table

00:27:12.100 --> 00:27:14.860
and that automatically performs a search for you.

00:27:14.860 --> 00:27:17.140
I say it's just pretty neat that way.

00:27:17.140 --> 00:27:19.380
- It is, it reminds me a little bit of Notion,

00:27:19.380 --> 00:27:20.220
Notion tables.

00:27:20.220 --> 00:27:21.780
I don't know if you play with Notion any.

00:27:21.780 --> 00:27:22.900
- Yes, yes.

00:27:22.900 --> 00:27:26.520
- Yeah, you've got those pin sorts and those pin filters

00:27:26.520 --> 00:27:29.260
and different things you can kind of put at the top of the,

00:27:29.260 --> 00:27:31.940
I guess their databases are called in Notion.

00:27:31.940 --> 00:27:32.780
A little like that.

00:27:32.780 --> 00:27:35.380
- Actually, it's very similar to that

00:27:35.380 --> 00:27:40.620
in the sense that you're not writing any code

00:27:40.620 --> 00:27:42.660
to be able to search through tables,

00:27:42.660 --> 00:27:45.620
but you can still modify what you let people search

00:27:45.620 --> 00:27:47.820
by pinning certain filters.

00:27:47.820 --> 00:27:50.620
Now, the really interesting thing that we've done here

00:27:50.620 --> 00:27:55.620
is that we let you do joins.

00:27:56.560 --> 00:27:58.480
And still provides you that feature.

00:27:58.480 --> 00:28:02.080
So in Notion, for example, you would just have one database

00:28:02.080 --> 00:28:04.360
and you can filter and sort that database.

00:28:04.360 --> 00:28:07.040
With DropBase, what we have is,

00:28:07.040 --> 00:28:10.080
let's say you have a table called users

00:28:10.080 --> 00:28:12.520
and a table called roles.

00:28:12.520 --> 00:28:15.900
And then they're related by an ID where,

00:28:15.900 --> 00:28:20.000
let's say ID one is users, ID two is developers,

00:28:20.000 --> 00:28:21.920
ID three is admins.

00:28:21.920 --> 00:28:24.240
You might have to join those two tables first.

00:28:25.320 --> 00:28:29.080
And so that same smart table feature,

00:28:29.080 --> 00:28:30.540
you can just write that SQL statement,

00:28:30.540 --> 00:28:32.560
like join statements,

00:28:32.560 --> 00:28:36.440
and we can still generate sort of the right filters for you.

00:28:36.440 --> 00:28:39.520
And we'll actually let you edit those tables as well.

00:28:39.520 --> 00:28:42.320
So what we do is we take your SQL statement

00:28:42.320 --> 00:28:47.320
and then we infer all the SQL required to search

00:28:47.320 --> 00:28:51.240
or edit any column within the SQL statement.

00:28:51.240 --> 00:28:53.480
- Yeah, that sounds awesome.

00:28:54.400 --> 00:28:56.760
- Yeah, that's really neat feature,

00:28:56.760 --> 00:29:01.760
especially for the people who are used to

00:29:01.760 --> 00:29:04.860
using something like Django admin,

00:29:04.860 --> 00:29:10.120
in the sense that it helps you very quickly

00:29:10.120 --> 00:29:15.120
build an admin panel with very little developer work.

00:29:15.120 --> 00:29:16.760
- Yeah, that's true.

00:29:16.760 --> 00:29:19.120
- Essentially, you can just write a SQL statement

00:29:19.120 --> 00:29:21.240
and then we give you an admin panel.

00:29:21.240 --> 00:29:22.080
- Yeah.

00:29:22.080 --> 00:29:23.560
- And so that's really neat.

00:29:23.560 --> 00:29:25.880
The final thing with the app here in the demo

00:29:25.880 --> 00:29:27.920
is the little button on the right side.

00:29:27.920 --> 00:29:29.720
- Yeah.

00:29:29.720 --> 00:29:31.360
- So that is a Python function.

00:29:31.360 --> 00:29:33.840
So you create a new Python function

00:29:33.840 --> 00:29:36.520
and you essentially say,

00:29:36.520 --> 00:29:41.880
you essentially write a database update

00:29:41.880 --> 00:29:44.560
to update the role from whatever it was,

00:29:44.560 --> 00:29:47.400
let's say from developer to an admin.

00:29:47.400 --> 00:29:49.960
So it's just really a select statement,

00:29:49.960 --> 00:29:54.960
update table, set column, something on this particular ID.

00:29:54.960 --> 00:29:57.960
And so that's just a Python function.

00:29:57.960 --> 00:30:01.600
And the final thing is just to connect that button

00:30:01.600 --> 00:30:03.400
to run this Python function.

00:30:03.400 --> 00:30:06.000
So you click on the button, we run the function

00:30:06.000 --> 00:30:07.520
and then we perform a database update

00:30:07.520 --> 00:30:10.120
to update the role to whichever role you want.

00:30:10.120 --> 00:30:13.840
And that really is just the gist of the demo.

00:30:13.840 --> 00:30:15.400
- Yeah.

00:30:15.400 --> 00:30:18.080
So a couple of things about that Python function

00:30:18.080 --> 00:30:18.960
that's pretty interesting.

00:30:18.960 --> 00:30:20.040
When you create it, you can say,

00:30:20.040 --> 00:30:21.360
I wanna create a function and it says,

00:30:21.360 --> 00:30:23.480
do you want SQL or do you want Python?

00:30:23.480 --> 00:30:25.440
Which is pretty interesting.

00:30:25.440 --> 00:30:28.920
The Python function has access to the UI widgets.

00:30:28.920 --> 00:30:30.720
I could in the actual video,

00:30:30.720 --> 00:30:32.000
not the screenshot of the video,

00:30:32.000 --> 00:30:35.600
I think you've got a dropdown select box.

00:30:35.600 --> 00:30:37.400
And so the Python function go,

00:30:37.400 --> 00:30:38.760
well, what did the user select?

00:30:38.760 --> 00:30:41.080
And then we'll make the change to the person

00:30:41.080 --> 00:30:44.000
in the workspace along those lines.

00:30:44.000 --> 00:30:45.720
So that's pretty cool, right?

00:30:45.720 --> 00:30:48.080
That you interact with this UI

00:30:48.080 --> 00:30:51.720
in kind of a object oriented way, I suppose.

00:30:51.720 --> 00:30:52.560
- That's right.

00:30:52.560 --> 00:30:53.400
Yeah.

00:30:53.400 --> 00:30:54.720
So that's exactly how it works.

00:30:54.720 --> 00:30:59.720
So behind the scenes, we have two classes.

00:30:59.720 --> 00:31:04.080
One is called state and one is called a context.

00:31:04.080 --> 00:31:07.480
So the state class just lets us access

00:31:07.480 --> 00:31:10.880
all of the UI state at any point in time.

00:31:10.880 --> 00:31:15.280
So anything you enter in an input component

00:31:15.280 --> 00:31:17.440
or a row you select in the tables,

00:31:18.280 --> 00:31:23.040
you can see the currently selected values of it.

00:31:23.040 --> 00:31:26.480
And so whenever you click on a button

00:31:26.480 --> 00:31:27.920
or you perform an action,

00:31:27.920 --> 00:31:32.600
that state is passed to the backend,

00:31:32.600 --> 00:31:35.280
just as a payload, just like a dictionary.

00:31:35.280 --> 00:31:40.280
And the backend, we generate all the classes,

00:31:40.280 --> 00:31:43.960
all the objects related to state and context.

00:31:43.960 --> 00:31:46.120
So we just have to pass the values in

00:31:46.120 --> 00:31:47.560
and then execute the function

00:31:47.560 --> 00:31:49.720
with those values as the input.

00:31:49.720 --> 00:31:51.240
And so that's how we're able to do

00:31:51.240 --> 00:31:53.920
the state thing with Python.

00:31:53.920 --> 00:31:58.920
And if you've seen how you would do it in Python,

00:31:58.920 --> 00:32:00.640
it is very much a dot notation, right?

00:32:00.640 --> 00:32:04.320
So you would say, to get the value of column one

00:32:04.320 --> 00:32:07.040
in table one, you basically just say,

00:32:07.040 --> 00:32:10.920
state dot tables, which gives you all the tables,

00:32:10.920 --> 00:32:14.920
dot table one, dot column one.

00:32:14.920 --> 00:32:19.160
And that basically resolves into the value

00:32:19.160 --> 00:32:22.640
of the table, of the row in that table for that column.

00:32:22.640 --> 00:32:25.160
- Yeah, that's cool.

00:32:25.160 --> 00:32:27.640
I can imagine the implementation of that thing.

00:32:27.640 --> 00:32:30.920
It's like dot a dunder get adder.

00:32:30.920 --> 00:32:33.720
And if you ask for the thing, you look in the dictionary

00:32:33.720 --> 00:32:35.640
and you traverse the thing.

00:32:35.640 --> 00:32:37.840
But with that in mind,

00:32:37.840 --> 00:32:39.480
what I thought was really nice about this

00:32:39.480 --> 00:32:41.640
is you had pretty decent autocomplete

00:32:41.640 --> 00:32:43.720
in your embedded Python editor.

00:32:43.720 --> 00:32:44.560
How'd you pull that off?

00:32:44.560 --> 00:32:45.400
- Good that you noticed.

00:32:45.400 --> 00:32:48.000
Yeah, we spent a lot of time on it.

00:32:48.000 --> 00:32:49.000
- I bet you did.

00:32:49.000 --> 00:32:52.640
- Yeah, so.

00:32:52.640 --> 00:32:53.480
- Yeah, how'd that work?

00:32:53.480 --> 00:32:54.320
How's that work?

00:32:54.320 --> 00:32:56.160
- Yeah, so when we were designing this,

00:32:56.160 --> 00:33:00.760
we were thinking, damn, VS Code is really nice, right?

00:33:00.760 --> 00:33:03.560
You have all the plugins,

00:33:03.560 --> 00:33:05.360
all the autocomplete and everything.

00:33:05.360 --> 00:33:08.320
But we had two choices, right?

00:33:08.320 --> 00:33:12.480
Either we build this whole UI builder into VS Code,

00:33:12.480 --> 00:33:14.920
or we kind of take some of the things

00:33:14.920 --> 00:33:16.320
that make VS Code great

00:33:16.320 --> 00:33:18.680
and then bring it into the job-based studio.

00:33:18.680 --> 00:33:22.120
So we don't know sort of the final,

00:33:22.120 --> 00:33:23.840
eventually where this will be,

00:33:23.840 --> 00:33:26.120
but the current version of this is we thought,

00:33:26.120 --> 00:33:29.380
you know what, I think we need to give users an editor,

00:33:29.380 --> 00:33:32.240
like a built-in editor, so they can just quickly,

00:33:32.240 --> 00:33:34.960
they can have the best experience building the app

00:33:34.960 --> 00:33:39.240
and the access to UI and context and state really quickly.

00:33:40.200 --> 00:33:45.200
And so, yeah, so we just did it that way,

00:33:45.200 --> 00:33:51.560
where we added in LSP, so like a language server.

00:33:51.560 --> 00:33:56.560
And so anytime you type code in your Python function,

00:33:56.560 --> 00:34:01.560
it's basically over a WebSocket connection,

00:34:01.560 --> 00:34:05.000
basically streaming the code changes

00:34:05.000 --> 00:34:07.280
and saving them in your file system.

00:34:08.160 --> 00:34:10.160
That's the only way we can do this,

00:34:10.160 --> 00:34:14.240
this like object-oriented Python dot notation access.

00:34:14.240 --> 00:34:18.360
And so we need to have access to all the files.

00:34:18.360 --> 00:34:20.960
And so we set this up so that not only

00:34:20.960 --> 00:34:22.840
you can do autocomplete,

00:34:22.840 --> 00:34:25.460
but also that we can actually do the state and context

00:34:25.460 --> 00:34:27.600
approach to the web framework.

00:34:27.600 --> 00:34:30.360
And it was a bit complicated

00:34:30.360 --> 00:34:34.640
because we hadn't been really exposed to LSPs before.

00:34:34.640 --> 00:34:36.520
And so we had to learn how to use LSPs

00:34:36.520 --> 00:34:39.520
and we had to sort of hijack sort of the,

00:34:39.520 --> 00:34:44.560
sort of the WebSocket connection in a way,

00:34:44.560 --> 00:34:45.960
so like we intercept the code

00:34:45.960 --> 00:34:48.360
and then we save it in your file system.

00:34:48.360 --> 00:34:51.380
So we had to customize it a little bit to do this.

00:34:51.380 --> 00:34:54.580
And it's really nice because now you can do autocomplete

00:34:54.580 --> 00:34:56.440
for all your files.

00:34:56.440 --> 00:34:59.360
And it's just a neat, it's so hard to develop now,

00:34:59.360 --> 00:35:01.280
we're so used to these tools.

00:35:01.280 --> 00:35:03.920
And now with things like Copilot,

00:35:03.920 --> 00:35:06.560
like we're used to even more than just autocomplete, right?

00:35:06.560 --> 00:35:08.680
It's like autocomplete the function,

00:35:08.680 --> 00:35:10.600
not just the variable, right?

00:35:10.600 --> 00:35:13.840
- Yeah, absolutely.

00:35:13.840 --> 00:35:15.120
Well, it's certain,

00:35:15.120 --> 00:35:18.000
I feel like autocomplete is just table stakes,

00:35:18.000 --> 00:35:20.960
especially in this kind of thing.

00:35:20.960 --> 00:35:23.440
There's somebody who's just done Python forever

00:35:23.440 --> 00:35:26.440
and they're just, they'd rather get it out of the way.

00:35:26.440 --> 00:35:27.920
And it's fine.

00:35:27.920 --> 00:35:31.000
It's not my way of working, but it's fine for people

00:35:31.000 --> 00:35:31.840
who wanna do that.

00:35:31.840 --> 00:35:35.840
- Yeah, if you're working with somebody

00:35:35.840 --> 00:35:37.880
who might not be a full-time developer,

00:35:37.880 --> 00:35:40.160
but they wanna use your framework,

00:35:40.160 --> 00:35:43.040
your service to build some app, right?

00:35:43.040 --> 00:35:44.960
It seems like this could really empower them.

00:35:44.960 --> 00:35:47.240
But if you give them something with zero autocomplete,

00:35:47.240 --> 00:35:48.760
zero highlighting,

00:35:48.760 --> 00:35:51.360
they're gonna be having a rough time, you know?

00:35:51.360 --> 00:35:55.520
- Yeah, I mean, even for a more experienced developer,

00:35:55.520 --> 00:35:58.040
I think it's still a hard time.

00:35:58.040 --> 00:35:59.760
- Yeah, even if you can do it,

00:35:59.760 --> 00:36:01.920
it's just less productive to go like, oh yeah.

00:36:01.920 --> 00:36:03.000
- Way less productive.

00:36:03.000 --> 00:36:04.480
- Yeah, way less productive.

00:36:04.480 --> 00:36:10.280
In general, I'm somewhat,

00:36:10.280 --> 00:36:15.440
I think AI gets added to apps a lot

00:36:15.440 --> 00:36:17.280
just to kind of check a box,

00:36:17.280 --> 00:36:19.840
but the result of it is not that great.

00:36:19.840 --> 00:36:23.640
Think of my email client that has AI integrated,

00:36:23.640 --> 00:36:26.200
but it almost always seems like, well, that's not something.

00:36:26.200 --> 00:36:27.040
Yeah, that's something I wanna read.

00:36:27.040 --> 00:36:28.520
Like, I don't really wanna read that.

00:36:28.520 --> 00:36:30.520
And I don't need to summarize it.

00:36:30.520 --> 00:36:31.880
That's emails, you know?

00:36:31.880 --> 00:36:34.760
Just seems like a lot of energy goes into it

00:36:34.760 --> 00:36:36.560
when it's not that big of a value,

00:36:36.560 --> 00:36:39.880
but maybe something like Copilot could be here.

00:36:39.880 --> 00:36:44.840
- Yeah, so this is something we've talked about,

00:36:44.840 --> 00:36:45.920
me and my co-founder.

00:36:45.920 --> 00:36:50.360
So one of the things that we didn't get to cover,

00:36:50.360 --> 00:36:52.920
because we're not gonna go through all the demos,

00:36:52.920 --> 00:36:57.080
but the way that we render data in these tables

00:36:57.080 --> 00:37:02.080
is we basically format it as a pandas data frame.

00:37:02.080 --> 00:37:03.400
- Okay.

00:37:03.400 --> 00:37:08.400
- Okay, so what that means is that,

00:37:08.400 --> 00:37:13.920
let's say that you query data from Stripe, right?

00:37:13.920 --> 00:37:16.720
Like you get all your customers from Stripe.

00:37:16.720 --> 00:37:19.760
Stripe is not gonna return a data frame for you.

00:37:19.760 --> 00:37:22.440
It's gonna return like an object, right?

00:37:22.440 --> 00:37:23.680
Dictionary.

00:37:23.680 --> 00:37:28.320
And then you basically have to take that dictionary

00:37:28.320 --> 00:37:30.760
and then basically convert it into a data frame.

00:37:30.760 --> 00:37:31.760
And then we automatically know

00:37:31.760 --> 00:37:33.560
how to render everything else from there.

00:37:33.560 --> 00:37:36.320
So we've thought about this in like,

00:37:36.320 --> 00:37:40.240
wouldn't it be cool if as soon as you get the response

00:37:40.240 --> 00:37:44.760
from an endpoints, let's say as a JSON dictionary,

00:37:44.760 --> 00:37:47.200
that we suggest that we can just take it

00:37:47.200 --> 00:37:48.440
that next step for you,

00:37:48.440 --> 00:37:51.040
which is just to like convert it into a data frame.

00:37:51.040 --> 00:37:53.440
And then you wouldn't have to hustle with it.

00:37:53.440 --> 00:37:54.280
- Yeah.

00:37:54.280 --> 00:37:56.080
- And so we've done that,

00:37:56.080 --> 00:37:59.640
but in theory that sounds very, very helpful.

00:37:59.640 --> 00:38:03.360
If you're proficient in pandas and using data frames,

00:38:03.360 --> 00:38:04.960
it's actually not that hard.

00:38:04.960 --> 00:38:07.040
It's a very quick thing for you.

00:38:07.040 --> 00:38:08.520
But if you just know Python,

00:38:08.520 --> 00:38:13.520
but not exposed to the whole data frame ecosystem,

00:38:13.520 --> 00:38:17.600
then maybe it would be really nice if you just said,

00:38:17.600 --> 00:38:19.840
okay, we just turned it to data frame for you.

00:38:19.840 --> 00:38:22.040
And then that's all you have to care about.

00:38:22.040 --> 00:38:22.880
So we've thought about this.

00:38:22.880 --> 00:38:24.080
We haven't added this yet.

00:38:24.080 --> 00:38:26.480
- I think it's fine without,

00:38:26.480 --> 00:38:28.800
but it's kind of one of those things like you're in there

00:38:28.800 --> 00:38:30.280
and you've got these data sources

00:38:30.280 --> 00:38:31.960
and maybe you're not super familiar with them.

00:38:31.960 --> 00:38:33.920
Maybe you could pull them together somehow.

00:38:33.920 --> 00:38:34.760
- Oh yeah.

00:38:34.760 --> 00:38:36.120
So yeah, like, so one of the things

00:38:36.120 --> 00:38:38.360
that I find myself struggling with is,

00:38:38.360 --> 00:38:40.680
let's say I want to build a demo

00:38:40.680 --> 00:38:43.800
and let's say I haven't been exposed to like

00:38:43.800 --> 00:38:47.240
the SendGrid API or the HubSpot API,

00:38:47.240 --> 00:38:52.160
then I have to go to their documentation to figure out,

00:38:52.160 --> 00:38:54.800
how do I, you know, what's the package name

00:38:54.800 --> 00:38:56.760
so I can install it?

00:38:56.760 --> 00:38:58.560
How do I authenticate in?

00:38:58.560 --> 00:39:03.120
How do I call a few endpoints to do what I need to do?

00:39:03.120 --> 00:39:04.720
And I think in that case where it's like,

00:39:04.720 --> 00:39:06.760
it's not about your knowledge of Python.

00:39:06.760 --> 00:39:09.600
It really is about your knowledge of this other thing

00:39:09.600 --> 00:39:11.080
that you're using.

00:39:11.080 --> 00:39:14.200
In those cases, it seems that it could be extremely helpful

00:39:14.200 --> 00:39:16.240
for someone to build apps very quickly

00:39:16.240 --> 00:39:19.640
if they somehow had access to either a quick documentation

00:39:19.640 --> 00:39:22.040
or it just suggested what you might want to do.

00:39:22.040 --> 00:39:26.920
- Yeah, that's kind of what I was thinking as well.

00:39:26.920 --> 00:39:30.040
So speaking of that sort of external resources,

00:39:30.040 --> 00:39:32.200
you've got this Python function.

00:39:32.200 --> 00:39:34.200
What can I put in there?

00:39:34.200 --> 00:39:35.960
Can I use external packages?

00:39:35.960 --> 00:39:40.960
Can I call out on the network to talk to some API endpoints?

00:39:40.960 --> 00:39:44.360
Can I spin up threads?

00:39:44.360 --> 00:39:46.320
Like what can I do?

00:39:46.320 --> 00:39:48.080
How much Python can I do there?

00:39:49.520 --> 00:39:50.920
- Pretty much all of the above.

00:39:50.920 --> 00:39:53.320
So I'll elaborate what I mean by that.

00:39:53.320 --> 00:39:56.280
So the standard way that you would connect

00:39:56.280 --> 00:40:00.320
to some of these services, these third-party services,

00:40:00.320 --> 00:40:02.600
is you'll make like an HTTP request,

00:40:02.600 --> 00:40:05.000
like get request, post request.

00:40:05.000 --> 00:40:08.040
So you can just like import requests,

00:40:08.040 --> 00:40:09.400
basically pip install requests,

00:40:09.400 --> 00:40:11.760
and then just do it over the standard Python,

00:40:11.760 --> 00:40:14.440
basically Python package.

00:40:14.440 --> 00:40:18.200
Now, it is way more convenient when you use an SDK

00:40:18.200 --> 00:40:20.440
provided by one of these third parties.

00:40:20.440 --> 00:40:22.200
So if you want to use Stripe,

00:40:22.200 --> 00:40:24.040
if you're able to just import Stripe,

00:40:24.040 --> 00:40:26.160
it'll make your life a lot easier.

00:40:26.160 --> 00:40:27.000
- Oh yeah.

00:40:27.000 --> 00:40:29.120
- Very nicely, Pythonic, everything's set up.

00:40:29.120 --> 00:40:33.520
So you can, in DropBase, you can install anything

00:40:33.520 --> 00:40:36.160
that you can install via PyPI.

00:40:36.160 --> 00:40:41.160
So you just, we have a file called custom requirements.

00:40:41.160 --> 00:40:44.960
And if you just list them out,

00:40:44.960 --> 00:40:46.320
when you set up DropBase,

00:40:46.320 --> 00:40:48.640
we'll basically install those for you.

00:40:48.640 --> 00:40:50.120
And then when you write a function,

00:40:50.120 --> 00:40:53.000
you can just basically import Stripe directly

00:40:53.000 --> 00:40:55.800
into function without pip installing it again,

00:40:55.800 --> 00:40:57.040
and then you just use it.

00:40:57.040 --> 00:41:01.200
And so that's really nice, basically anything.

00:41:01.200 --> 00:41:05.040
I think you were doing a previous UV, you were talking--

00:41:05.040 --> 00:41:06.600
- Yeah, yeah, I was talking to Charlie Marsh

00:41:06.600 --> 00:41:08.800
about uv earlier today, yeah.

00:41:08.800 --> 00:41:10.240
- We haven't looked into it yet,

00:41:10.240 --> 00:41:14.880
but anything you can pip install from PyPI,

00:41:14.880 --> 00:41:17.040
you can install in DropBase,

00:41:17.040 --> 00:41:19.360
which makes it really, really powerful.

00:41:19.360 --> 00:41:22.920
Then there's a database connections.

00:41:22.920 --> 00:41:25.480
So you can, I mean, you could use SQLAlchemy

00:41:25.480 --> 00:41:27.080
or you can import whatever else you want,

00:41:27.080 --> 00:41:31.600
but we make those a bit more native

00:41:31.600 --> 00:41:34.120
because we know that you're gonna connect to databases.

00:41:34.120 --> 00:41:37.120
So we wanna make it a bit more convenient.

00:41:37.120 --> 00:41:40.760
- And your tables need sort of direct access to it

00:41:40.760 --> 00:41:41.600
as well, right?

00:41:41.600 --> 00:41:45.320
Not just the output of some access to the database,

00:41:45.320 --> 00:41:47.000
but you've got to figure out the columns

00:41:47.000 --> 00:41:48.800
and all that kind of stuff, right?

00:41:48.800 --> 00:41:50.360
- That's right, yeah, that's correct.

00:41:50.360 --> 00:41:54.440
So we created a little library,

00:41:54.440 --> 00:41:56.600
like a utility slash helper

00:41:56.600 --> 00:42:01.200
that lets you perform database operations very quickly.

00:42:01.200 --> 00:42:03.640
So if you've added your database credentials

00:42:03.640 --> 00:42:08.640
to the .env file, then you can quickly perform

00:42:08.680 --> 00:42:12.200
like a select statement or make an update

00:42:12.200 --> 00:42:14.160
to that database via functions,

00:42:14.160 --> 00:42:16.520
but without the standard thing where you do,

00:42:16.520 --> 00:42:18.840
if you use SQLAlchemy, for example,

00:42:18.840 --> 00:42:22.040
where you like start a session, start a connection,

00:42:22.040 --> 00:42:23.200
you know, like all those steps,

00:42:23.200 --> 00:42:24.880
we kind of abstract that for you,

00:42:24.880 --> 00:42:28.080
but you can totally use SQLAlchemy in its full glory

00:42:28.080 --> 00:42:30.760
if that's what you're used to.

00:42:30.760 --> 00:42:33.820
- Nice, can I write Python files,

00:42:33.820 --> 00:42:35.720
like separate Python scripts and stuff,

00:42:35.720 --> 00:42:38.600
and then just import and call them from there?

00:42:38.600 --> 00:42:39.440
Or does it have to be in the UI?

00:42:39.440 --> 00:42:40.800
- That's totally, yeah, totally, totally.

00:42:40.800 --> 00:42:44.200
Yeah, this is actually one of the biggest advantages

00:42:44.200 --> 00:42:48.440
of DropBase is that if you have like a Python script

00:42:48.440 --> 00:42:51.960
lying around and you want to sort of use it in DropBase,

00:42:51.960 --> 00:42:53.880
you can add it to that file system

00:42:53.880 --> 00:42:57.560
somewhere in the workspace directory,

00:42:57.560 --> 00:43:00.680
and you can just import it in via your function.

00:43:00.680 --> 00:43:03.160
So you just like, from your file,

00:43:03.160 --> 00:43:05.200
you can import a specific function in that file,

00:43:05.200 --> 00:43:06.040
for example.

00:43:07.560 --> 00:43:11.480
And so the implication of this is that

00:43:11.480 --> 00:43:15.080
you can set up DropBase in a way that it just lives

00:43:15.080 --> 00:43:17.440
in your existing Python code base.

00:43:17.440 --> 00:43:19.360
So imagine you already, you know,

00:43:19.360 --> 00:43:20.920
you've set up your company,

00:43:20.920 --> 00:43:22.600
you've got product market fit, you know,

00:43:22.600 --> 00:43:23.680
things are running, right?

00:43:23.680 --> 00:43:25.360
And you have a Python backend,

00:43:25.360 --> 00:43:28.640
and now you're starting to scale

00:43:28.640 --> 00:43:30.360
and you need to build tools.

00:43:30.360 --> 00:43:35.240
So your first option would be to do all custom, obviously.

00:43:35.240 --> 00:43:38.760
The second option is to use some sort of tools builder,

00:43:38.760 --> 00:43:44.240
but every single action you take is done over

00:43:44.240 --> 00:43:46.840
an HTTP request with authentication, with everything.

00:43:46.840 --> 00:43:50.240
So it's just like a standard internet communication, right?

00:43:50.240 --> 00:43:54.040
But if you wanted to just interact with an existing

00:43:54.040 --> 00:43:57.040
functions or internal endpoints,

00:43:57.040 --> 00:43:59.800
then you'd have to either set up an RPC server,

00:43:59.800 --> 00:44:04.360
or you might want to use some other way to get in there,

00:44:04.360 --> 00:44:05.200
right?

00:44:05.200 --> 00:44:08.960
With DropBase, you basically just set up DropBase

00:44:08.960 --> 00:44:11.760
in the same directory as your app,

00:44:11.760 --> 00:44:15.480
and you can then import selectively what functions you need.

00:44:15.480 --> 00:44:18.400
It's sort of like a window into your code base

00:44:18.400 --> 00:44:22.480
that is like a plugin to that code base

00:44:22.480 --> 00:44:25.080
where you can now expand and build a lot of internal tools

00:44:25.080 --> 00:44:28.360
that leverages everything that you've already built.

00:44:28.360 --> 00:44:29.200
- Yeah, so--

00:44:29.200 --> 00:44:31.280
- Oh, that's today, by the way, yeah.

00:44:31.280 --> 00:44:32.760
- Yeah, so when you've got,

00:44:32.760 --> 00:44:34.680
yeah, there's the requirements that custom, right?

00:44:34.680 --> 00:44:37.240
So you've got your Docker compose file.

00:44:37.240 --> 00:44:40.240
I mean, could you set it up just so as you build,

00:44:40.240 --> 00:44:43.920
maybe even better, just set up a volume

00:44:43.920 --> 00:44:46.920
so that it can directly find,

00:44:46.920 --> 00:44:48.280
I mean, I guess that's what you're kind of showing

00:44:48.280 --> 00:44:49.120
right here, right?

00:44:49.120 --> 00:44:50.600
Is that you can--

00:44:50.600 --> 00:44:52.600
- Yeah, we're mounting the volume.

00:44:52.600 --> 00:44:56.240
- Mount the volume just directly into,

00:44:56.240 --> 00:44:59.800
say, your Git repo for your big project code,

00:44:59.800 --> 00:45:01.280
and then you can just start importing that

00:45:01.280 --> 00:45:03.160
and doing stuff with it, right?

00:45:03.160 --> 00:45:05.360
- Something that, we still need to do some tweaks

00:45:05.360 --> 00:45:08.000
because of relative paths,

00:45:08.000 --> 00:45:09.680
but the idea is that you can do that

00:45:09.680 --> 00:45:13.120
with a little bit of customization.

00:45:13.120 --> 00:45:15.720
But yeah, our workspace server, basically,

00:45:15.720 --> 00:45:18.000
you mount files or directories,

00:45:18.000 --> 00:45:20.460
and then we can look into those to execute.

00:45:20.460 --> 00:45:23.920
- Yeah, manage those files with Git or something like that.

00:45:23.920 --> 00:45:26.120
- So a good example of this is,

00:45:26.120 --> 00:45:28.640
are you familiar with Django and Django admin?

00:45:30.240 --> 00:45:31.960
Not super, it's something I do every day,

00:45:31.960 --> 00:45:33.560
but I'm aware, sure.

00:45:33.560 --> 00:45:37.240
- Right, so Django, it's a great web framework.

00:45:37.240 --> 00:45:38.560
It's used by a lot of companies.

00:45:38.560 --> 00:45:39.960
It's like, if you want to build web apps,

00:45:39.960 --> 00:45:42.600
you have Django, it comes with a lot of stuff, right?

00:45:42.600 --> 00:45:46.600
And there's this thing called Django admin

00:45:46.600 --> 00:45:51.600
that basically automatically generates admin panels for you

00:45:51.600 --> 00:45:54.360
based on your Django models.

00:45:55.880 --> 00:46:00.840
And so if you have a model for a book, right,

00:46:00.840 --> 00:46:02.840
and the book has authors,

00:46:02.840 --> 00:46:06.840
it basically exposes that to the Django admin,

00:46:06.840 --> 00:46:09.480
and then now you can edit a book

00:46:09.480 --> 00:46:11.800
without really doing anything.

00:46:11.800 --> 00:46:13.320
Like, it all kind of comes for free.

00:46:13.320 --> 00:46:14.160
Like, it's pretty neat.

00:46:14.160 --> 00:46:17.360
- I think that's like half the appeal of Django right there.

00:46:17.360 --> 00:46:18.200
- It is, yeah.

00:46:18.200 --> 00:46:20.200
- I think a lot of people use it for that.

00:46:20.200 --> 00:46:21.560
Yeah, they're like, "I don't want to write that stuff.

00:46:21.560 --> 00:46:22.600
I'm using Django."

00:46:22.600 --> 00:46:23.440
Yeah, for real.

00:46:23.440 --> 00:46:25.200
- Right, and it's great.

00:46:25.200 --> 00:46:27.360
Now, at some point,

00:46:27.360 --> 00:46:32.520
when your company hits a certain milestone

00:46:32.520 --> 00:46:36.240
or is a certain number of customers,

00:46:36.240 --> 00:46:42.040
you will need to customize those admin panels.

00:46:42.040 --> 00:46:45.800
You might need to create admin panels

00:46:45.800 --> 00:46:48.600
for things that maybe you don't have models for yet,

00:46:48.600 --> 00:46:53.000
or for things that combine data from your database

00:46:53.000 --> 00:46:56.600
with data from like Stripe or some other source.

00:46:56.600 --> 00:47:01.120
And so what we see when we talk to these people

00:47:01.120 --> 00:47:02.920
is that they kind of struggle to like,

00:47:02.920 --> 00:47:05.440
either do I like keep using this,

00:47:05.440 --> 00:47:09.120
or do I like completely rebuild everything, right?

00:47:09.120 --> 00:47:11.960
And so for those users,

00:47:11.960 --> 00:47:13.560
when we talk to them about DropBase,

00:47:13.560 --> 00:47:16.600
they get very excited because with DropBase,

00:47:16.600 --> 00:47:17.760
you can install Django,

00:47:17.760 --> 00:47:20.320
and it can sit in your file system.

00:47:20.320 --> 00:47:22.600
And so essentially all the models

00:47:22.600 --> 00:47:24.800
that you've already built in Django,

00:47:24.800 --> 00:47:28.120
you can basically call them via DropBase,

00:47:28.120 --> 00:47:29.200
with DropBase function,

00:47:29.200 --> 00:47:30.800
'cause it's all Python, right?

00:47:30.800 --> 00:47:31.640
- Yeah.

00:47:31.640 --> 00:47:34.520
- And so it gives you this like, okay,

00:47:34.520 --> 00:47:37.120
Django admins are great up to a certain point,

00:47:37.120 --> 00:47:38.760
and then after that, what happens, right?

00:47:38.760 --> 00:47:40.600
Like you might not wanna rebuild everything

00:47:40.600 --> 00:47:43.080
just so you can have internal tooling.

00:47:43.080 --> 00:47:46.920
And so I think that's quite of a nice spot for us to say,

00:47:46.920 --> 00:47:49.720
look, DropBase can live in your code base,

00:47:49.720 --> 00:47:51.760
uses everything you already have,

00:47:51.760 --> 00:47:54.120
but it gives you some extra things

00:47:54.120 --> 00:47:57.320
if you want to build internal tools very quickly.

00:47:57.320 --> 00:48:01.000
So that's something we're obviously very, very excited about.

00:48:01.000 --> 00:48:02.400
- Yeah, that's really cool.

00:48:02.400 --> 00:48:03.760
I like that aspect of it.

00:48:03.760 --> 00:48:06.440
So when we talk about this code,

00:48:06.440 --> 00:48:08.400
I guess there's two scenarios,

00:48:08.400 --> 00:48:11.160
the cloud version or the self-hosted version,

00:48:11.160 --> 00:48:13.920
but where and how does this Python run?

00:48:13.920 --> 00:48:16.800
Is it, it must be full CPython,

00:48:16.800 --> 00:48:19.400
is it running in isolated Docker containers,

00:48:19.400 --> 00:48:21.680
or in your cloud, what happens?

00:48:21.680 --> 00:48:25.080
Is it functions like AWS functions, Lambda?

00:48:25.080 --> 00:48:31.480
- So this is just runs either on your local machine,

00:48:31.480 --> 00:48:34.880
if you've set it up as a developer,

00:48:34.880 --> 00:48:36.200
it's all running there, obviously,

00:48:36.200 --> 00:48:39.440
if you turn off your machine, you can't use your apps.

00:48:39.440 --> 00:48:42.520
And then if you set it up in a production instance,

00:48:42.520 --> 00:48:45.680
let's say you deploy this on an EC2, right?

00:48:45.680 --> 00:48:49.640
So your Python functions are running on that EC2,

00:48:50.520 --> 00:48:55.520
but it's running via a Docker container inside.

00:48:55.520 --> 00:48:57.680
So-- - Okay.

00:48:57.680 --> 00:49:03.240
So it gets a little isolation, a little bit of protection,

00:49:03.240 --> 00:49:04.080
that kind of stuff. - That's right.

00:49:04.080 --> 00:49:05.880
But yeah, and we're assuming that,

00:49:05.880 --> 00:49:09.080
I mean, you're building these apps

00:49:09.080 --> 00:49:10.880
to run on your own infrastructure,

00:49:10.880 --> 00:49:14.200
is that you would, that you know what you're doing.

00:49:14.200 --> 00:49:19.200
So this is as opposed to us having a full cloud version,

00:49:20.000 --> 00:49:22.840
where all customers run untrusted code

00:49:22.840 --> 00:49:25.480
in the same sort of backend system,

00:49:25.480 --> 00:49:27.320
which would be obviously very dangerous,

00:49:27.320 --> 00:49:30.960
'cause I'm sure there's ways a customer can somehow,

00:49:30.960 --> 00:49:32.000
you know, go through the back

00:49:32.000 --> 00:49:36.040
and then access other customers' untrusted code.

00:49:36.040 --> 00:49:37.400
And that would be a nightmare.

00:49:37.400 --> 00:49:39.840
And so, you know, we have isolation.

00:49:39.840 --> 00:49:42.720
First layer is, well, it's in your infrastructure,

00:49:42.720 --> 00:49:46.000
you're gonna do, it's just your company's code.

00:49:46.000 --> 00:49:50.760
But then further, you know, we run Python in containers

00:49:50.760 --> 00:49:52.800
in that instance. - Yeah.

00:49:52.800 --> 00:49:56.520
But that sounds more like a durability thing than anything.

00:49:56.520 --> 00:49:58.960
I mean, it is also for isolation protection,

00:49:58.960 --> 00:50:01.120
but first and foremost,

00:50:01.120 --> 00:50:05.280
just don't let bad Python code take down the whole thing,

00:50:05.280 --> 00:50:06.820
you know? (laughs)

00:50:06.820 --> 00:50:08.840
- That's right, yeah. - Yeah.

00:50:08.840 --> 00:50:10.720
- Hopefully there's a,

00:50:10.720 --> 00:50:15.080
so the way we recommend people using Dropbox

00:50:15.080 --> 00:50:18.360
or setting up their dev sort of process with Dropbase

00:50:18.360 --> 00:50:21.480
is that they would clone,

00:50:21.480 --> 00:50:25.040
that's like basically fork the, fork Dropbase,

00:50:25.040 --> 00:50:27.240
and then they will develop locally.

00:50:27.240 --> 00:50:29.140
They will test changes,

00:50:29.140 --> 00:50:32.400
and once they're happy with the new code,

00:50:32.400 --> 00:50:33.640
you know, they'll push it back,

00:50:33.640 --> 00:50:38.280
and then they will have CI/CD into the production instance.

00:50:38.280 --> 00:50:40.160
And then they can version control everything.

00:50:40.160 --> 00:50:42.800
So that also gives you that extra layer of,

00:50:42.800 --> 00:50:46.240
okay, let's make sure that whatever we're pushing is tested.

00:50:46.240 --> 00:50:49.480
You can always add test databases

00:50:49.480 --> 00:50:50.840
that you develop locally with

00:50:50.840 --> 00:50:52.480
before you push to production,

00:50:52.480 --> 00:50:55.600
where it's gonna have to act on your production data.

00:50:55.600 --> 00:50:57.200
- Yeah, that's pretty interesting.

00:50:57.200 --> 00:50:59.360
I like the version control aspect of it.

00:50:59.360 --> 00:51:04.360
That gives it a much nicer touch to, you know,

00:51:04.360 --> 00:51:05.800
connection to real software,

00:51:05.800 --> 00:51:09.360
rather than just it's a text input area in an app

00:51:09.360 --> 00:51:11.240
that who knows what happens. - That's right.

00:51:11.240 --> 00:51:12.680
I think as developers,

00:51:12.680 --> 00:51:14.640
it sometimes feels a bit scary, right?

00:51:14.640 --> 00:51:15.760
Like you're building something,

00:51:15.760 --> 00:51:19.920
and it's in this other framework, in this other cloud,

00:51:19.920 --> 00:51:23.840
and it just feels like you can't kind of get,

00:51:23.840 --> 00:51:25.240
like if the thing goes away,

00:51:25.240 --> 00:51:27.880
like you can't even see your previous code.

00:51:27.880 --> 00:51:30.120
And so that's sort of the,

00:51:30.120 --> 00:51:32.960
that was another key concept that we wanted to have

00:51:32.960 --> 00:51:36.800
is in this tool that it feels friendly for developers,

00:51:36.800 --> 00:51:40.240
that it matches your mental models,

00:51:40.240 --> 00:51:43.800
and your sort of like your development process,

00:51:43.800 --> 00:51:46.360
let's call it, like how you're used to making apps

00:51:46.360 --> 00:51:47.480
or developing code,

00:51:47.480 --> 00:51:49.080
that we keep that feeling

00:51:49.080 --> 00:51:51.440
when you're building apps with DropBase.

00:51:51.440 --> 00:51:54.920
- Right, I wanna maybe have a PR

00:51:54.920 --> 00:51:59.200
to understand if we accept this change to it, right?

00:51:59.200 --> 00:52:01.600
- That's right.

00:52:01.600 --> 00:52:03.200
- Yeah, you don't normally hear that kind of stuff

00:52:03.200 --> 00:52:05.760
around these kinds of tools, you know?

00:52:05.760 --> 00:52:10.120
- No, and if you do, I think it tends to be like,

00:52:10.120 --> 00:52:12.600
yeah, okay, it's like a huge enterprise contract,

00:52:12.600 --> 00:52:14.760
you know, pay us $50,000 a year,

00:52:14.760 --> 00:52:16.520
and then you get version control,

00:52:16.520 --> 00:52:20.760
which to me, it sounds, it sounds scary.

00:52:20.760 --> 00:52:21.600
I mean, it just,

00:52:21.600 --> 00:52:23.400
it will make me a little bit less comfortable.

00:52:23.400 --> 00:52:24.920
Now, obviously, if I'm a big company,

00:52:24.920 --> 00:52:27.680
and I just really need the tool,

00:52:27.680 --> 00:52:29.040
sure, maybe I'll just pay for it,

00:52:29.040 --> 00:52:30.240
and I get version control,

00:52:30.240 --> 00:52:32.240
but you know, getting version control,

00:52:32.240 --> 00:52:35.280
it just feels so like,

00:52:35.280 --> 00:52:37.080
like table stakes for developers,

00:52:37.080 --> 00:52:40.160
especially today, that, yeah,

00:52:40.160 --> 00:52:41.720
it just wouldn't make sense otherwise for us.

00:52:41.720 --> 00:52:43.720
I mean, it's the way we're approaching this product.

00:52:43.720 --> 00:52:45.320
- Yeah, well, the other aspect is,

00:52:45.320 --> 00:52:48.120
you know, what are you version controlling?

00:52:48.120 --> 00:52:51.240
You know, do you end up with, you know,

00:52:51.240 --> 00:52:53.320
something like effectively a Jupyter notebook,

00:52:53.320 --> 00:52:56.160
like big blob of something,

00:52:56.160 --> 00:52:58.520
and then there's an older blob of something,

00:52:58.520 --> 00:53:00.080
and then you diff it, you're like, what is this?

00:53:00.080 --> 00:53:01.760
But since you end up with just these, you know,

00:53:01.760 --> 00:53:04.800
your workspace files that just live there, right?

00:53:04.800 --> 00:53:07.040
It's a real, you know, optimized,

00:53:07.040 --> 00:53:09.760
like show me the changes, show me what's happened here.

00:53:09.760 --> 00:53:10.920
- Yeah, it all lives there,

00:53:10.920 --> 00:53:15.920
including the component properties.

00:53:15.920 --> 00:53:19.720
Like we don't store this in like a separate database

00:53:19.720 --> 00:53:21.000
or anything like that.

00:53:21.000 --> 00:53:24.320
So like, you know, like for some of the tools,

00:53:24.320 --> 00:53:28.680
they will store all the components in their database.

00:53:28.680 --> 00:53:29.520
- Yeah.

00:53:29.520 --> 00:53:30.800
- And so what they do is, you know,

00:53:30.800 --> 00:53:33.520
when you load up their tools, like their tools builder,

00:53:33.520 --> 00:53:36.960
it'll fetch all the components from the provider's database,

00:53:36.960 --> 00:53:40.120
combine it with maybe your custom code,

00:53:40.120 --> 00:53:41.480
and then it'll do it.

00:53:41.480 --> 00:53:43.400
And so even that feels like, okay,

00:53:43.400 --> 00:53:46.200
but where's like config for my components?

00:53:46.200 --> 00:53:47.040
- Yeah.

00:53:47.040 --> 00:53:49.640
Yeah, where'd this button come from?

00:53:49.640 --> 00:53:50.480
Why is it gone?

00:53:50.480 --> 00:53:53.400
- Yeah, that's tough.

00:53:53.400 --> 00:53:54.240
Yeah, that's tough.

00:53:54.240 --> 00:53:57.400
And then like, imagine if you wanted to like share apps,

00:53:57.400 --> 00:53:59.280
or, you know, it's just like version control

00:53:59.280 --> 00:54:00.360
makes a bit less sense.

00:54:00.360 --> 00:54:03.320
I mean, you're just version controlling

00:54:03.320 --> 00:54:04.720
just like the individual functions,

00:54:04.720 --> 00:54:07.240
maybe like some custom part of the code that you write,

00:54:07.240 --> 00:54:10.160
which is still useful,

00:54:10.160 --> 00:54:12.320
but it still feels like you don't have the full picture

00:54:12.320 --> 00:54:13.360
of what's happening.

00:54:13.360 --> 00:54:15.320
- Yeah, you don't have a full record.

00:54:15.320 --> 00:54:17.680
It could easily get out of sync.

00:54:17.680 --> 00:54:19.240
- Yeah, same here.

00:54:19.240 --> 00:54:20.080
- Yeah.

00:54:20.080 --> 00:54:22.600
- Quite interesting.

00:54:22.600 --> 00:54:27.040
So I guess one thing we touched on a little bit

00:54:27.040 --> 00:54:29.780
before I press go here in the show,

00:54:31.960 --> 00:54:34.440
you said that at one point you were considering

00:54:34.440 --> 00:54:37.760
using Jupyter and this whole mechanism.

00:54:37.760 --> 00:54:39.800
Yeah, what's the story around that?

00:54:39.800 --> 00:54:44.360
- Yeah, so we love Jupyter.

00:54:44.360 --> 00:54:47.360
We love notebooks and we love the experience of them,

00:54:47.360 --> 00:54:50.800
the sense that you can write some code

00:54:50.800 --> 00:54:53.520
and you can quickly test and execute the code

00:54:53.520 --> 00:54:59.400
without basically without needing to write anything else.

00:55:00.960 --> 00:55:05.080
So for prototyping, for getting quick feedback, it's great.

00:55:05.080 --> 00:55:09.760
And we wanted to give our developers something like that

00:55:09.760 --> 00:55:11.560
because when you build these apps,

00:55:11.560 --> 00:55:12.800
you're kind of iterating, right?

00:55:12.800 --> 00:55:13.840
You're like, you're testing it.

00:55:13.840 --> 00:55:16.040
A lot of the times you don't even know the documentation

00:55:16.040 --> 00:55:19.120
for Stripe or Hotspot.

00:55:19.120 --> 00:55:21.520
And so like, there's a lot of experimentation.

00:55:21.520 --> 00:55:23.960
And so we wanted a quick way to do that.

00:55:23.960 --> 00:55:27.560
So we considered maybe having something

00:55:27.560 --> 00:55:30.920
like a Jupyter kernel within DropBase,

00:55:30.920 --> 00:55:33.080
that allowed people to do it.

00:55:33.080 --> 00:55:37.440
Now, there were some issues with it,

00:55:37.440 --> 00:55:41.880
is in the sense that the kernel actually stores results

00:55:41.880 --> 00:55:43.880
from like previous blocks.

00:55:43.880 --> 00:55:45.840
And sometimes that gets in the way

00:55:45.840 --> 00:55:48.840
of you triggering an action in a later block.

00:55:48.840 --> 00:55:51.760
And so we were like, okay,

00:55:51.760 --> 00:55:54.960
maybe that's a little bit more than we need.

00:55:54.960 --> 00:55:56.240
- Yeah, it's not quite the same.

00:55:56.240 --> 00:55:58.480
- Eventually we want something like that.

00:55:58.480 --> 00:56:01.240
- Yeah, so we hacked it in a way.

00:56:01.240 --> 00:56:04.200
Like, so the way that we do it is,

00:56:04.200 --> 00:56:06.520
you can write a Python function.

00:56:06.520 --> 00:56:08.160
You basically get one block.

00:56:08.160 --> 00:56:09.960
You can write a Python function

00:56:09.960 --> 00:56:12.720
and you can click on a play button

00:56:12.720 --> 00:56:15.100
to basically run that function,

00:56:15.100 --> 00:56:17.520
but it's not like a kernel.

00:56:17.520 --> 00:56:20.640
So what we do is behind the scenes,

00:56:20.640 --> 00:56:22.920
we have like a main function.

00:56:22.920 --> 00:56:24.720
And when you trigger that function,

00:56:24.720 --> 00:56:28.400
we take the state from the client.

00:56:28.400 --> 00:56:30.720
So whatever you've selected or input it,

00:56:30.720 --> 00:56:34.320
we take the underlying file for your Python function,

00:56:34.320 --> 00:56:36.600
and then we call it from me.

00:56:36.600 --> 00:56:39.600
And so we kind of simulate that experience

00:56:39.600 --> 00:56:42.900
of like instantly testing code that you just wrote,

00:56:42.900 --> 00:56:47.280
but there is no Jupyter kernel behind the scenes.

00:56:47.280 --> 00:56:49.120
And then you can only do one block at a time.

00:56:49.120 --> 00:56:52.800
And so, we said, okay, for now,

00:56:52.800 --> 00:56:55.760
as we're getting started with it, it's good enough.

00:56:55.760 --> 00:56:56.840
You can write your functions,

00:56:56.840 --> 00:56:58.880
you can run and test them immediately,

00:56:58.880 --> 00:56:59.860
which is really nice.

00:56:59.860 --> 00:57:01.440
You can't do this with VS Code, by the way,

00:57:01.440 --> 00:57:03.000
like you would have to open up the terminal

00:57:03.000 --> 00:57:05.320
and then basically run your function.

00:57:05.320 --> 00:57:07.520
And so we still wanted this feature where you can click

00:57:07.520 --> 00:57:09.200
and just see your outputs

00:57:09.200 --> 00:57:13.420
and basically debug and troubleshoot,

00:57:13.420 --> 00:57:15.400
but it'd be really nice if we get out multiple blocks

00:57:15.400 --> 00:57:17.160
and you can just build functions that way.

00:57:17.160 --> 00:57:19.400
So maybe for the future, yeah.

00:57:19.400 --> 00:57:21.940
- Okay, interesting.

00:57:21.940 --> 00:57:26.640
- Did you say that you were a core developer

00:57:26.640 --> 00:57:28.720
for Jupyter?

00:57:28.720 --> 00:57:30.760
- No, no, I just spoke to them.

00:57:30.760 --> 00:57:34.800
It sounds fun, but no, I interviewed a whole bunch

00:57:34.800 --> 00:57:38.040
of them recently and what I thought was interesting

00:57:38.040 --> 00:57:41.160
is Jupyter is such an empowering thing

00:57:41.160 --> 00:57:42.440
for Python developers,

00:57:42.440 --> 00:57:45.480
but many of the core developers are so focused

00:57:45.480 --> 00:57:47.920
on writing JavaScript and TypeScript

00:57:47.920 --> 00:57:50.240
to sort of make these interactions possible

00:57:50.240 --> 00:57:53.920
so that the rest of us don't have to write JavaScript

00:57:53.920 --> 00:57:55.720
and that kind of stuff.

00:57:55.720 --> 00:57:58.720
- So I think we're getting about to the end of our time here.

00:57:58.720 --> 00:58:03.440
I'm sure that actually this is somewhat similar.

00:58:03.440 --> 00:58:06.440
It's really a dynamic interactive web app.

00:58:06.440 --> 00:58:09.000
And in that case, it probably has to have some interesting

00:58:09.000 --> 00:58:11.200
front-end JavaScript stuff going on.

00:58:11.200 --> 00:58:12.680
What's the JavaScript story?

00:58:12.680 --> 00:58:15.960
- Yeah.

00:58:15.960 --> 00:58:18.000
- What framework you use and stuff like that.

00:58:18.000 --> 00:58:23.000
- Yeah, we use React to build our components.

00:58:24.720 --> 00:58:26.720
Obviously we abstract that away

00:58:26.720 --> 00:58:29.480
so that you as a Python developer,

00:58:29.480 --> 00:58:31.600
you're just writing Python.

00:58:31.600 --> 00:58:32.960
Well, you're writing SQL as well,

00:58:32.960 --> 00:58:34.320
but let's call that Python.

00:58:34.320 --> 00:58:40.160
And then we deal with the components for you.

00:58:40.160 --> 00:58:43.520
And so it's not the kind of framework

00:58:43.520 --> 00:58:46.560
where you're writing Python and like we're generating

00:58:46.560 --> 00:58:49.360
like HTMLX or something like that.

00:58:52.120 --> 00:58:55.200
So obviously we understand React

00:58:55.200 --> 00:58:58.040
and we know we can build some beautiful components,

00:58:58.040 --> 00:58:59.960
customize them with it.

00:58:59.960 --> 00:59:02.920
And so, we weren't about to create

00:59:02.920 --> 00:59:06.000
a completely new framework where we somehow

00:59:06.000 --> 00:59:08.240
just generate HTML from Python.

00:59:08.240 --> 00:59:12.000
I think there's a few people working on that actually.

00:59:12.000 --> 00:59:14.040
But we already know React,

00:59:14.040 --> 00:59:15.920
so let's just build those components

00:59:15.920 --> 00:59:17.720
or customize those components

00:59:17.720 --> 00:59:20.080
and then just let people declare them

00:59:20.080 --> 00:59:23.680
and then sort of access and modify them

00:59:23.680 --> 00:59:28.680
via the context objects in your Python functions.

00:59:28.680 --> 00:59:34.120
So our stack, we use FastAPI for our backend,

00:59:34.120 --> 00:59:35.520
which is great.

00:59:35.520 --> 00:59:40.040
I'm not sure if you've had the creator here on--

00:59:40.040 --> 00:59:41.840
- Yeah, I've had Sebastian on--

00:59:41.840 --> 00:59:42.680
- Sebastian, right?

00:59:42.680 --> 00:59:45.600
- I think at least three times, Sebastian Ramirez.

00:59:45.600 --> 00:59:46.440
- Yeah, he's great.

00:59:46.440 --> 00:59:48.760
He's great. - Yeah, he's really great.

00:59:48.760 --> 00:59:51.280
And FastAPI is fantastic.

00:59:51.280 --> 00:59:54.440
So yeah, we use them.

00:59:54.440 --> 00:59:56.800
We use React on our client side

00:59:56.800 --> 01:00:01.200
and we are a lot of our infrastructure is on AWS.

01:00:01.200 --> 01:00:05.840
- Okay, yeah, sounds really interesting.

01:00:05.840 --> 01:00:08.320
Sounds like a fun app to work on.

01:00:08.320 --> 01:00:10.200
- Yeah, you should play around with it.

01:00:10.200 --> 01:00:12.440
I can help you build some apps

01:00:12.440 --> 01:00:14.920
to manage your podcast library.

01:00:14.920 --> 01:00:15.880
- Nice, awesome.

01:00:17.480 --> 01:00:18.560
All right, well, Jimmy,

01:00:18.560 --> 01:00:21.440
I think we are pretty much out of time.

01:00:21.440 --> 01:00:25.280
Final thought for people listening,

01:00:25.280 --> 01:00:26.720
maybe they're excited to try this out.

01:00:26.720 --> 01:00:28.960
What are you telling them?

01:00:28.960 --> 01:00:31.760
- Yeah, just go to dropbase.io and sign up

01:00:31.760 --> 01:00:33.640
for a free account.

01:00:33.640 --> 01:00:34.560
It's free for developers.

01:00:34.560 --> 01:00:35.960
You can set it up locally.

01:00:35.960 --> 01:00:39.240
If you have any issues setting it up, just reach out.

01:00:39.240 --> 01:00:42.320
I'll personally help you get it up and running.

01:00:42.320 --> 01:00:44.400
And yeah, you can look at the documentation

01:00:44.400 --> 01:00:46.560
for everything else.

01:00:46.560 --> 01:00:47.520
- Yeah. - That's about it.

01:00:47.520 --> 01:00:48.800
Try it, give us some feedback.

01:00:48.800 --> 01:00:50.680
We'd love to hear from you.

01:00:50.680 --> 01:00:51.720
- Awesome.

01:00:51.720 --> 01:00:54.640
Congrats on building a cool project for people

01:00:54.640 --> 01:00:56.080
and yeah, good luck with it.

01:00:56.080 --> 01:00:58.520
- Thanks, Michael.

01:00:58.520 --> 01:00:59.600
- Yeah, you bet, bye.

