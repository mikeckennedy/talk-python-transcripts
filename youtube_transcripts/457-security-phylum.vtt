WEBVTT

00:00:00.000 --> 00:00:00.720
>> Hey, Charlie.

00:00:00.720 --> 00:00:02.800
Welcome to Talk Python To Me.

00:00:02.800 --> 00:00:05.200
>> Hi, Michael.

00:00:05.200 --> 00:00:06.320
>> Great to have you here.

00:00:06.320 --> 00:00:10.960
We have corresponded back and forth about security things.

00:00:10.960 --> 00:00:13.760
And now, are you here to scare us?

00:00:13.760 --> 00:00:16.360
Is that what's going to happen?

00:00:16.360 --> 00:00:17.560
>> It's going to seem that way.

00:00:17.560 --> 00:00:19.320
There are threats everywhere, especially

00:00:19.320 --> 00:00:20.320
when you start looking.

00:00:20.320 --> 00:00:21.720
And that's the problem.

00:00:21.720 --> 00:00:23.080
You look, you'll find them.

00:00:23.080 --> 00:00:27.640
And if you're not looking, you might get affected

00:00:27.640 --> 00:00:29.720
without even knowing it.

00:00:29.720 --> 00:00:31.880
>> Yeah, but that's true.

00:00:31.880 --> 00:00:34.240
But we're also going to come with some tools and techniques

00:00:34.240 --> 00:00:37.240
and tips on how to avoid security

00:00:37.240 --> 00:00:39.320
problems with your Python code.

00:00:39.320 --> 00:00:41.160
>> Yes, absolutely.

00:00:41.160 --> 00:00:47.320
>> Yeah, I think it's especially concerning--

00:00:47.320 --> 00:00:49.480
that certainly catches my attention--

00:00:49.480 --> 00:00:54.400
that if you mess with somebody's software,

00:00:54.400 --> 00:00:57.720
like the software builders, the developers,

00:00:57.720 --> 00:01:00.120
it gets shipped to however many users

00:01:00.120 --> 00:01:02.720
are on the other side of that equation.

00:01:02.720 --> 00:01:06.720
It's not like I just took over some teenager's gaming PC,

00:01:06.720 --> 00:01:07.960
and now what can I do?

00:01:07.960 --> 00:01:10.760
It's like, I took over--

00:01:10.760 --> 00:01:14.000
name your big web app, and now we're

00:01:14.000 --> 00:01:16.400
going to start shipping some stuff around.

00:01:16.400 --> 00:01:20.600
All right, that's where the multiplicative aspect of this

00:01:20.600 --> 00:01:24.120
gets more concerning than just standard personal computer

00:01:24.120 --> 00:01:25.440
safety, right?

00:01:25.440 --> 00:01:28.520
>> Oh, absolutely.

00:01:28.520 --> 00:01:34.200
A single developer can have very broad impact.

00:01:34.200 --> 00:01:36.960
Maybe they publish one package, but that one package

00:01:36.960 --> 00:01:41.040
could be included in hundreds, thousands of other packages

00:01:41.040 --> 00:01:42.000
as a dependency.

00:01:42.000 --> 00:01:47.040
And then everyone using those packages could be affected,

00:01:47.040 --> 00:01:50.880
whether the code is good and works as intended

00:01:50.880 --> 00:01:53.640
or poorly written and has bugs and vulnerabilities.

00:01:53.640 --> 00:01:54.480
>> Yeah, this is--

00:01:54.480 --> 00:01:55.440
>> And it's malicious.

00:01:55.440 --> 00:01:58.280
>> It's not to say there's any chance of there

00:01:58.280 --> 00:01:59.520
being a problem with Pydantic.

00:01:59.520 --> 00:02:02.680
But just to make your point, if you go to Pydantic or Request

00:02:02.680 --> 00:02:07.760
or something like that, a lot of these have used by projects,

00:02:07.760 --> 00:02:08.260
right?

00:02:08.260 --> 00:02:12.920
And this Pydantic is used by 315,000 people--

00:02:12.920 --> 00:02:16.120
not people, software projects that themselves have users,

00:02:16.120 --> 00:02:16.600
right?

00:02:16.600 --> 00:02:18.920
And so that's the kind of stuff that I'm

00:02:18.920 --> 00:02:21.440
thinking about when I said that multiplicative effect, right?

00:02:21.440 --> 00:02:24.360
It's a big multiplier, not just a couple.

00:02:24.360 --> 00:02:25.000
>> Oh, yeah.

00:02:25.000 --> 00:02:26.200
Yeah, for sure.

00:02:26.200 --> 00:02:26.700
>> Yeah.

00:02:26.700 --> 00:02:30.080
Now, before we dive into our main topic, of course,

00:02:30.080 --> 00:02:32.920
tell people a bit about yourself.

00:02:32.920 --> 00:02:34.880
>> Hi, well, my name is Charles Coggins.

00:02:34.880 --> 00:02:37.280
I usually go by Charlie.

00:02:37.280 --> 00:02:40.520
And I'm a Python developer.

00:02:40.520 --> 00:02:42.160
I'm a software developer, but not

00:02:42.160 --> 00:02:43.360
through the traditional sense.

00:02:43.360 --> 00:02:45.120
I don't have a computer science degree.

00:02:45.120 --> 00:02:49.360
I didn't come to this straight out of school.

00:02:49.360 --> 00:02:55.000
I got my first taste of programming long enough ago,

00:02:55.000 --> 00:02:57.280
back in the '80s, in 1987.

00:02:57.280 --> 00:02:59.360
My dad got a computer for us.

00:02:59.360 --> 00:03:04.400
And I was messing around on there with some games,

00:03:04.400 --> 00:03:07.560
always with games, right?

00:03:07.560 --> 00:03:09.280
At the time, it was basic.

00:03:09.280 --> 00:03:11.640
It was this bowling game that my brother and I would play.

00:03:11.640 --> 00:03:14.400
And I saw that I could look at the code.

00:03:14.400 --> 00:03:15.480
I could look at the source.

00:03:15.480 --> 00:03:17.720
And I went in there and modified it a bit

00:03:17.720 --> 00:03:20.600
to make it so that I would always win whenever I played

00:03:20.600 --> 00:03:22.840
them.

00:03:22.840 --> 00:03:24.800
>> How long did it take him to catch on?

00:03:24.800 --> 00:03:26.400
>> Oh, he figured out pretty quickly.

00:03:26.400 --> 00:03:28.960
And he was in there, too, changing ball speed

00:03:28.960 --> 00:03:34.720
and how often he could get a gutter or make him get a gutter.

00:03:34.720 --> 00:03:38.920
But yeah, I took a class or two in high school and college.

00:03:38.920 --> 00:03:43.480
But I was an electrical engineering major.

00:03:43.480 --> 00:03:46.920
And then I went to work for the government,

00:03:46.920 --> 00:03:49.160
doing something that wasn't even really that.

00:03:49.160 --> 00:03:53.240
So I spent 10 years working for the government

00:03:53.240 --> 00:03:58.720
before they stood up the US Cyber Command

00:03:58.720 --> 00:04:03.200
and decided or figured out that they

00:04:03.200 --> 00:04:07.840
needed to hire 6,000 new developers to fill

00:04:07.840 --> 00:04:08.720
the positions.

00:04:08.720 --> 00:04:11.920
And there weren't that many available in the industry,

00:04:11.920 --> 00:04:14.880
let alone those who could pass the clearances

00:04:14.880 --> 00:04:17.040
and work in that environment.

00:04:17.040 --> 00:04:20.880
So they looked to people already working in the government.

00:04:20.880 --> 00:04:21.760
And I raised my hand.

00:04:21.760 --> 00:04:24.560
I said, yes, yes, I want to cross-train.

00:04:24.560 --> 00:04:25.720
I'll be a developer.

00:04:25.720 --> 00:04:27.520
And so they trained me.

00:04:27.520 --> 00:04:28.020
>> Excellent.

00:04:28.020 --> 00:04:31.840
What did they teach you for language in that program?

00:04:31.840 --> 00:04:35.320
>> We started with C, C++.

00:04:35.320 --> 00:04:37.360
And then there was some Python.

00:04:37.360 --> 00:04:39.680
So I went through a couple of boot camps

00:04:39.680 --> 00:04:42.880
and a lot of self-learning, self-teaching.

00:04:43.880 --> 00:04:45.880
>> Python's the one that really clicked for me.

00:04:45.880 --> 00:04:48.520
It just made sense in my head.

00:04:48.520 --> 00:04:49.720
>> Yeah, of course.

00:04:49.720 --> 00:04:52.800
If you're learning to do cybersecurity stuff,

00:04:52.800 --> 00:04:54.720
a lot of times I'd be happy to tell people,

00:04:54.720 --> 00:05:00.080
ah, you don't really need to learn C or Rust or Java.

00:05:00.080 --> 00:05:04.680
If you just know Python, you're probably 90% of the time

00:05:04.680 --> 00:05:05.760
golden.

00:05:05.760 --> 00:05:08.400
But if you're trying to do cybersecurity, a lot of times

00:05:08.400 --> 00:05:12.240
it's about the machine-level stuff, right?

00:05:12.240 --> 00:05:16.040
Understanding things like C and pointers and buffer overflows

00:05:16.040 --> 00:05:19.040
and all of that kind of stuff is where you actually

00:05:19.040 --> 00:05:20.240
need to be.

00:05:20.240 --> 00:05:21.960
>> And they taught us all that as well.

00:05:21.960 --> 00:05:25.000
In fact, we learned assembly language as well.

00:05:25.000 --> 00:05:30.920
And that one really didn't fit in my brain.

00:05:30.920 --> 00:05:35.120
>> You're like, I want to become an assembly language programmer.

00:05:35.120 --> 00:05:38.280
>> I mean, yeah, that's a whole different brand.

00:05:38.280 --> 00:05:41.000
>> That's a whole different breed.

00:05:41.000 --> 00:05:42.160
>> Yeah, it sure is.

00:05:42.160 --> 00:05:43.640
And it used to be--

00:05:43.640 --> 00:05:45.520
I remember when I first got into programming,

00:05:45.520 --> 00:05:47.000
I was doing some C, C++.

00:05:47.000 --> 00:05:50.200
And inline assembly was something people

00:05:50.200 --> 00:05:52.040
would do a lot to optimize.

00:05:52.040 --> 00:05:56.440
A lot like people might do Cython or Numba or something

00:05:56.440 --> 00:05:58.120
like that to make Python fast.

00:05:58.120 --> 00:06:00.520
We'll find this little part, and we'll rewrite it in this way.

00:06:00.520 --> 00:06:02.680
And be like, we're just going to do inline assembly.

00:06:02.680 --> 00:06:06.040
I'm like, that just doesn't seem like it's worthwhile.

00:06:06.040 --> 00:06:07.560
I don't need that much performance.

00:06:07.560 --> 00:06:09.240
We're going to not do that.

00:06:09.240 --> 00:06:10.000
>> Yeah, yeah.

00:06:10.000 --> 00:06:13.600
>> Fun.

00:06:13.600 --> 00:06:16.400
So now you're working at Phylum.

00:06:16.400 --> 00:06:22.760
Is it Python focused or just software security?

00:06:22.760 --> 00:06:24.600
>> It's not Python focused.

00:06:24.600 --> 00:06:29.360
In fact, the company primarily develops with Rust,

00:06:29.360 --> 00:06:31.960
as you were mentioning.

00:06:31.960 --> 00:06:35.600
Yeah, we've got some excellent Rust developers

00:06:35.600 --> 00:06:36.600
at our company.

00:06:36.600 --> 00:06:39.320
And I think that's what's attracted a lot of them

00:06:39.320 --> 00:06:42.960
is that that is the primary language we use.

00:06:42.960 --> 00:06:45.320
But we also have some elements in Python.

00:06:45.320 --> 00:06:48.760
And when I came on board, I got assigned

00:06:48.760 --> 00:06:52.240
to work on our integrations.

00:06:52.240 --> 00:06:58.680
So like GitHub integrations, GitLab, pre-commit hooks,

00:06:58.680 --> 00:06:59.360
things like that.

00:06:59.360 --> 00:07:04.160
And so I was able to architect it the way I thought best.

00:07:04.160 --> 00:07:07.200
And because I love Python, I made it all in Python

00:07:07.200 --> 00:07:12.440
and exposed it through Docker containers.

00:07:12.440 --> 00:07:18.560
>> Are you doing direct integration with Rust, like Py03?

00:07:18.560 --> 00:07:22.960
Or is it more issuing commands out?

00:07:22.960 --> 00:07:25.480
>> The Rust elements that our company works on,

00:07:25.480 --> 00:07:29.880
like our API, the command line interface,

00:07:29.880 --> 00:07:32.400
a lot of the back end, it's just written straight Rust.

00:07:32.400 --> 00:07:35.560
And then the Python is just plain Python.

00:07:35.560 --> 00:07:40.160
There's no interface between the two, really.

00:07:40.160 --> 00:07:42.840
>> Yeah, OK, consuming APIs and Docker containers

00:07:42.840 --> 00:07:43.720
and stuff like that.

00:07:43.720 --> 00:07:45.160
>> Right, right, right.

00:07:45.160 --> 00:07:47.800
Although I am interested in the Py03.

00:07:47.800 --> 00:07:53.960
And I think there's room to bridge the two

00:07:53.960 --> 00:07:56.160
languages at our company.

00:07:56.160 --> 00:07:59.760
>> I mean, for sure, people are adopting Rust

00:07:59.760 --> 00:08:03.640
for the performance foundations of Python.

00:08:03.640 --> 00:08:06.440
It's pretty interesting.

00:08:06.440 --> 00:08:09.120
>> Yeah, yeah.

00:08:09.120 --> 00:08:11.880
I've been at the company almost two years now.

00:08:11.880 --> 00:08:14.280
I keep saying it's what I'm going to learn next, is Rust.

00:08:14.280 --> 00:08:16.840
And I felt like I would just kind of absorb it

00:08:16.840 --> 00:08:20.400
by going through code reviews and people on my team.

00:08:20.400 --> 00:08:21.760
It hasn't happened yet.

00:08:21.760 --> 00:08:24.040
I can kind of understand what's going on by reading it.

00:08:24.040 --> 00:08:27.040
But I just-- yeah, I need to jump in.

00:08:27.040 --> 00:08:28.440
>> Findef, OK, got it.

00:08:28.440 --> 00:08:29.240
Those are the same.

00:08:29.240 --> 00:08:29.760
OK, got it.

00:08:29.760 --> 00:08:32.000
>> Yeah, yeah.

00:08:32.000 --> 00:08:33.600
>> No, it's interesting.

00:08:33.600 --> 00:08:35.600
Well, we're not here to talk about Rust.

00:08:35.600 --> 00:08:38.440
Although I do think it's becoming

00:08:38.440 --> 00:08:42.000
one of those things that is sort of--

00:08:42.000 --> 00:08:44.920
if you need to be a little one level deeper in the Python

00:08:44.920 --> 00:08:48.120
space, that used to be C. And now I

00:08:48.120 --> 00:08:52.480
think it's pretty solidly moving to be Rust.

00:08:52.480 --> 00:08:55.320
There's a lot of popular things, identic, for example,

00:08:55.320 --> 00:08:58.280
I pulled up earlier, where that's the foundation.

00:08:58.280 --> 00:09:00.720
But that also seems to be where the momentum is.

00:09:00.720 --> 00:09:05.040
>> Yeah, the oxidation of Python libraries is a real thing.

00:09:05.040 --> 00:09:07.640
I mean, look at Ruff.

00:09:07.640 --> 00:09:08.800
>> Yeah, Ruff.

00:09:08.800 --> 00:09:13.240
I just heard about Granian, I think it was,

00:09:13.240 --> 00:09:15.440
which is a new--

00:09:15.440 --> 00:09:18.680
similar to G-Unicorn.

00:09:18.680 --> 00:09:23.040
And MicroWSGI is a Rust-based async server.

00:09:23.040 --> 00:09:25.120
It goes on and on.

00:09:25.120 --> 00:09:25.620
Awesome.

00:09:25.620 --> 00:09:28.840
All right, well, let's talk about software security,

00:09:28.840 --> 00:09:31.480
though.

00:09:31.480 --> 00:09:33.920
We touched on it a little bit with the multiplicative aspect

00:09:33.920 --> 00:09:37.640
of why software developers should care.

00:09:37.640 --> 00:09:42.200
But maybe let's start with some ways

00:09:42.200 --> 00:09:45.080
in which viruses might get on your computer

00:09:45.080 --> 00:09:49.120
from a software perspective, not from like, oh, you know,

00:09:49.120 --> 00:09:51.000
I found this cool app on BitTorrent.

00:09:51.000 --> 00:09:52.680
Normally it's paid, but this one's free.

00:09:52.680 --> 00:09:55.120
It's like, maybe don't install that.

00:09:55.120 --> 00:09:56.680
But not that kind of advice, right?

00:09:56.680 --> 00:09:59.800
But specifically for software developers.

00:09:59.800 --> 00:10:00.480
>> Right, right.

00:10:00.480 --> 00:10:08.200
So for software developers, I think the primary vector

00:10:08.200 --> 00:10:12.160
for malicious code running in your environment,

00:10:12.160 --> 00:10:15.400
or really any developer environment along the way--

00:10:15.400 --> 00:10:18.720
doesn't just have to be your system, it could be your CI/CD

00:10:18.720 --> 00:10:21.560
servers, your runners--

00:10:21.560 --> 00:10:23.760
is going to be software dependencies,

00:10:23.760 --> 00:10:26.440
third-party code, right?

00:10:26.440 --> 00:10:28.840
Code from strangers on the internet, right?

00:10:28.840 --> 00:10:32.920
That's really what it boils down to.

00:10:32.920 --> 00:10:35.880
>> Charlie, they're just here to help out.

00:10:35.880 --> 00:10:37.680
They're just giving you the code to help out.

00:10:37.680 --> 00:10:39.200
They have no bad intentions.

00:10:39.200 --> 00:10:40.200
>> Right, right.

00:10:40.200 --> 00:10:41.120
>> Except for that one.

00:10:41.120 --> 00:10:43.880
That one over there, don't take their code.

00:10:43.880 --> 00:10:50.000
>> Yeah, and it's hard to tell what's good, what's bad.

00:10:50.000 --> 00:10:55.800
And I think we all rely on third-party code.

00:10:55.800 --> 00:10:59.840
I mean, I think it's a rare company, rare project that

00:10:59.840 --> 00:11:02.480
writes everything from scratch on their own

00:11:02.480 --> 00:11:05.440
without any dependencies.

00:11:05.440 --> 00:11:06.440
>> Yeah.

00:11:06.440 --> 00:11:09.840
>> So that's a vector, for sure, is

00:11:09.840 --> 00:11:15.040
allowing code from strangers on the internet to run.

00:11:15.040 --> 00:11:22.040
I think the name of the game for attackers and threat actors

00:11:22.040 --> 00:11:25.280
is arbitrary code execution.

00:11:25.280 --> 00:11:27.480
That's the key phrase, arbitrary code execution.

00:11:27.480 --> 00:11:30.280
If I can get arbitrary code execution

00:11:30.280 --> 00:11:32.360
with this vulnerability, then I've won.

00:11:32.360 --> 00:11:32.840
I can--

00:11:32.840 --> 00:11:35.840
>> You're going to get a CVE score of 9 or above.

00:11:35.840 --> 00:11:36.760
It's right there.

00:11:36.760 --> 00:11:37.960
>> Yeah, exactly.

00:11:37.960 --> 00:11:39.360
And that's for vulnerabilities.

00:11:39.360 --> 00:11:44.120
That's just poorly written code or code with bugs.

00:11:44.120 --> 00:11:46.000
But forget about vulnerabilities.

00:11:46.000 --> 00:11:50.520
I mean, if you're an attacker, you're a threat actor,

00:11:50.520 --> 00:11:54.000
you've already got the perfect means to run arbitrary code,

00:11:54.000 --> 00:11:57.960
to gain arbitrary code execution on a developer system.

00:11:57.960 --> 00:11:59.720
That's with third-party dependencies.

00:11:59.720 --> 00:12:04.520
Open source software is just the perfect target

00:12:04.520 --> 00:12:12.080
for writing malware or shipping malware into packages.

00:12:12.080 --> 00:12:15.120
Now, when people hear this, we've talked about it enough.

00:12:15.120 --> 00:12:18.960
It actually came as quite a surprise a few years ago.

00:12:18.960 --> 00:12:21.320
People theoretically knew that it could happen,

00:12:21.320 --> 00:12:26.920
but that it was happening is that packages on package stores

00:12:26.920 --> 00:12:33.000
like PyPI and NPM and so on got published vulnerabilities

00:12:33.000 --> 00:12:35.240
that people could then install and make part of theirs.

00:12:35.240 --> 00:12:37.880
But there's a whole software supply chain, right?

00:12:37.880 --> 00:12:40.240
Maybe talk us through some of the different elements that

00:12:40.240 --> 00:12:40.960
make that up.

00:12:40.960 --> 00:12:43.360
Only one of which is these libraries, right?

00:12:43.360 --> 00:12:44.320
>> That's right.

00:12:44.320 --> 00:12:50.920
So the software supply chain is using third-party code

00:12:50.920 --> 00:12:55.120
securely, as well as securing the end-to-end development

00:12:55.120 --> 00:12:56.240
process.

00:12:56.240 --> 00:13:00.480
So that process is very broadly broken into three phases.

00:13:00.480 --> 00:13:04.560
You've got the source phase.

00:13:04.560 --> 00:13:08.000
That's source control management systems,

00:13:08.000 --> 00:13:11.240
and then actually coding, developers

00:13:11.240 --> 00:13:17.000
coding on their systems, committing to repositories.

00:13:17.000 --> 00:13:22.160
>> Yeah, you mentioned the dependencies like pip install

00:13:22.160 --> 00:13:23.360
this or that.

00:13:23.360 --> 00:13:28.560
There's also, for many of the really popular IDs and editors,

00:13:28.560 --> 00:13:35.200
there's a whole massive array of varying levels of trusted

00:13:35.200 --> 00:13:39.000
plugins or extensions as well.

00:13:39.000 --> 00:13:39.680
>> That's right.

00:13:39.680 --> 00:13:44.200
Yeah, like Visual Studio Code, that's what I use for my IDE.

00:13:44.200 --> 00:13:49.080
It's got an extensive extension ecosystem.

00:13:49.080 --> 00:13:51.960
Just about anything you want to do,

00:13:51.960 --> 00:13:54.680
I get a little pop-up when I open a new project and it says,

00:13:54.680 --> 00:13:56.760
oh, I recognize you're using a YAML file.

00:13:56.760 --> 00:13:59.080
Do you want to download this extension that

00:13:59.080 --> 00:14:01.560
will lint YAML files?

00:14:01.560 --> 00:14:03.000
>> Yeah, I got one for CVEs.

00:14:03.000 --> 00:14:09.120
It was like rainbow CSV syntax highlighters.

00:14:09.120 --> 00:14:10.680
You know what?

00:14:10.680 --> 00:14:14.480
That's not really made by a trusted company.

00:14:14.480 --> 00:14:16.880
It's probably fine.

00:14:16.880 --> 00:14:21.360
But I don't need my CSV files highlighted so much so

00:14:21.360 --> 00:14:23.320
that I'm willing to just run arbitrary code

00:14:23.320 --> 00:14:24.800
from a stranger on the internet.

00:14:24.800 --> 00:14:25.840
>> That's right.

00:14:25.840 --> 00:14:26.480
>> Right?

00:14:26.480 --> 00:14:31.400
And I use both PyCharm and VS Code.

00:14:31.400 --> 00:14:33.240
And they both, especially PyCharm,

00:14:33.240 --> 00:14:36.080
has a warning that says, this is untrusted.

00:14:36.080 --> 00:14:37.120
It's a third-party thing.

00:14:37.120 --> 00:14:39.720
Are you sure you want it?

00:14:39.720 --> 00:14:44.200
But that's a pretty light warning.

00:14:44.200 --> 00:14:45.800
Also, they're not the same, right?

00:14:45.800 --> 00:14:48.800
Is it installed by a million people, used every day?

00:14:48.800 --> 00:14:51.920
Or is it for you, the fourth person to use it?

00:14:51.920 --> 00:14:57.760
And it hasn't had the experience of people going,

00:14:57.760 --> 00:14:59.440
why is it opening a network socket?

00:14:59.440 --> 00:15:00.920
What's it doing?

00:15:00.920 --> 00:15:03.240
Something like that.

00:15:03.240 --> 00:15:05.840
>> Yeah, that's another entry point

00:15:05.840 --> 00:15:09.680
you got to be careful about.

00:15:09.680 --> 00:15:11.080
>> All right, well, I cut you off.

00:15:11.080 --> 00:15:13.040
We're only in square one of maybe nine.

00:15:13.040 --> 00:15:15.000
>> Yeah, square one, source code,

00:15:15.000 --> 00:15:18.520
and then there's the build phase.

00:15:18.520 --> 00:15:20.680
That's where you take the code, you

00:15:20.680 --> 00:15:24.400
take the commits that have gone into source control,

00:15:24.400 --> 00:15:27.000
and you build something with it.

00:15:27.000 --> 00:15:30.120
This usually happens in your CI/CD systems,

00:15:30.120 --> 00:15:35.160
your GitHubs and GitLabs of the world.

00:15:35.160 --> 00:15:41.200
And it's at that point where your third-party dependencies

00:15:41.200 --> 00:15:47.320
get included and wrapped up into your artifacts,

00:15:47.320 --> 00:15:53.320
which brings us to the third stage of the software supply

00:15:53.320 --> 00:15:59.080
chain, which is the package and deploy phase.

00:15:59.080 --> 00:16:00.960
That's where you're creating your artifacts

00:16:00.960 --> 00:16:05.760
and making them available to the world to use.

00:16:05.760 --> 00:16:06.560
>> Could be anything.

00:16:06.560 --> 00:16:11.120
Could be a wheel for a library that other parts of your company

00:16:11.120 --> 00:16:12.400
use to build software.

00:16:12.400 --> 00:16:14.040
>> Yeah, wheels.

00:16:14.040 --> 00:16:15.040
>> Some app you ship.

00:16:15.040 --> 00:16:18.800
It could actually be a website, an API, who knows, right?

00:16:18.800 --> 00:16:20.600
>> Yeah.

00:16:20.600 --> 00:16:21.720
>> Docker container.

00:16:21.720 --> 00:16:22.200
>> Yeah.

00:16:22.200 --> 00:16:24.440
>> Yeah, exactly.

00:16:24.440 --> 00:16:26.920
>> And then by the time you get to that,

00:16:26.920 --> 00:16:32.120
the end of the supply chain and the packaged product

00:16:32.120 --> 00:16:37.000
that people are going to see and use and work with,

00:16:37.000 --> 00:16:41.080
you've baked in so many elements at that point,

00:16:41.080 --> 00:16:43.560
from your third-party dependencies

00:16:43.560 --> 00:16:55.400
to any other external resources that

00:16:55.400 --> 00:16:57.320
are getting called.

00:16:57.320 --> 00:17:04.000
So there's lots of points along the way that it's possible to--

00:17:04.000 --> 00:17:05.760
>> One of the things that can be sneaky

00:17:05.760 --> 00:17:09.200
is it doesn't happen that often in Python,

00:17:09.200 --> 00:17:12.800
but if you're shipping a Windows or a Mac app,

00:17:12.800 --> 00:17:17.240
there's a digital signature roof of,

00:17:17.240 --> 00:17:20.080
we're going to sign this with our trusted certificate.

00:17:20.080 --> 00:17:22.120
So it doesn't even give you any warnings.

00:17:22.120 --> 00:17:24.520
Like, look, it's signed by the company.

00:17:24.520 --> 00:17:25.960
It is trusted.

00:17:25.960 --> 00:17:27.360
Here you go.

00:17:27.360 --> 00:17:28.680
Take it, right?

00:17:28.680 --> 00:17:31.760
And somewhere upstream from that,

00:17:31.760 --> 00:17:35.840
there's an issue, like with packages or other things.

00:17:35.840 --> 00:17:37.400
Well, that issue is now--

00:17:37.400 --> 00:17:41.760
that problem is signed and verified as well.

00:17:41.760 --> 00:17:42.640
>> Yeah, yeah.

00:17:42.640 --> 00:17:47.080
You know, so you mentioned code signing.

00:17:47.080 --> 00:17:48.920
The research team at our company,

00:17:48.920 --> 00:17:53.360
I mean, they're an amazing, amazing group there.

00:17:53.360 --> 00:17:56.440
They're always finding new and novel attacks.

00:17:56.440 --> 00:17:59.440
And one they found just this past week

00:17:59.440 --> 00:18:04.320
involves something kind of cool, where the attacker had bundled

00:18:04.320 --> 00:18:08.800
up a valid Microsoft binary.

00:18:08.800 --> 00:18:11.720
It had been signed by Microsoft, but they bundled it

00:18:11.720 --> 00:18:16.360
with a DLL that was malicious.

00:18:16.360 --> 00:18:19.960
It was named something to be expected, right?

00:18:19.960 --> 00:18:24.600
So when you run the executable on the binary,

00:18:24.600 --> 00:18:30.800
you could see that there's this Microsoft signs application

00:18:30.800 --> 00:18:33.080
looking for permissions, looking to continue.

00:18:33.080 --> 00:18:34.560
And you think, oh, yeah, great, signed by Microsoft,

00:18:34.560 --> 00:18:35.240
no problem.

00:18:35.240 --> 00:18:39.880
But then it uses this technique called DLL search order

00:18:39.880 --> 00:18:41.920
hijacking.

00:18:41.920 --> 00:18:42.880
That technique, right?

00:18:42.880 --> 00:18:48.680
So if you have a DLL that's being called by the application

00:18:48.680 --> 00:18:53.120
more locally than not, that's what's going to be called.

00:18:53.120 --> 00:18:55.400
>> I see, so it's looking for something in like--

00:18:55.400 --> 00:18:55.920
>> Yeah.

00:18:55.920 --> 00:18:58.800
It'll look like they're looking for the name of the DLL

00:18:58.800 --> 00:19:01.720
in the same directory first, basically, is what's happening.

00:19:01.720 --> 00:19:02.640
>> Right, right.

00:19:02.640 --> 00:19:06.440
>> And they had shipped their bad DLL with the good binary.

00:19:06.440 --> 00:19:09.920
>> So you pick something in system 32 that's

00:19:09.920 --> 00:19:16.640
got a real common name, like vc runtime whatever dot DLL,

00:19:16.640 --> 00:19:17.920
some of the standard ones.

00:19:17.920 --> 00:19:20.400
But then you completely reprogram it.

00:19:20.400 --> 00:19:20.920
>> Yeah.

00:19:20.920 --> 00:19:22.360
>> And stick it in there with that app.

00:19:22.360 --> 00:19:25.000
Or maybe not completely, because you need the app to not crash.

00:19:25.000 --> 00:19:28.920
But you give it some extra boost when it does something, right?

00:19:28.920 --> 00:19:29.560
>> Yeah.

00:19:29.560 --> 00:19:32.400
Yeah, in this case, they had just

00:19:32.400 --> 00:19:35.360
copied all the files needed for execution

00:19:35.360 --> 00:19:39.080
into a new directory, including the known good binary,

00:19:39.080 --> 00:19:40.800
the known bad DLL.

00:19:40.800 --> 00:19:43.760
And then it had everything it needed in that directory to run.

00:19:43.760 --> 00:19:45.560
And it looked like it was legitimate.

00:19:45.560 --> 00:19:47.560
>> Right, because a lot of the OS--

00:19:47.560 --> 00:19:52.240
a lot of these OS checks are on the executable, not the system

00:19:52.240 --> 00:19:54.000
libraries that they use, right?

00:19:54.000 --> 00:19:54.600
>> Right.

00:19:54.600 --> 00:19:55.040
>> Right, right.

00:19:55.040 --> 00:19:56.480
You'll see-- like this executable

00:19:56.480 --> 00:19:59.120
is downloaded from the internet to show you want to run it.

00:19:59.120 --> 00:20:02.920
That doesn't say-- this executable, which you trust,

00:20:02.920 --> 00:20:06.040
is maybe possibly using a library that you downloaded.

00:20:06.040 --> 00:20:07.280
It doesn't say that, right?

00:20:07.280 --> 00:20:09.920
>> Right, right.

00:20:09.920 --> 00:20:12.240
>> Yeah, because we could never get work done if it's

00:20:12.240 --> 00:20:14.920
that level of checking all over the place.

00:20:14.920 --> 00:20:16.720
This is an updated somewhere.

00:20:16.720 --> 00:20:19.120
All right, so that's kind of the space

00:20:19.120 --> 00:20:20.440
that we're talking about, right?

00:20:20.440 --> 00:20:22.600
We've got editors.

00:20:22.600 --> 00:20:27.000
We've got libraries that you use, CI/CD pipelines.

00:20:27.000 --> 00:20:32.520
Containers are super interesting as well, and all the tools

00:20:32.520 --> 00:20:33.840
to go with those.

00:20:33.840 --> 00:20:37.000
So let's talk through some of the posts

00:20:37.000 --> 00:20:39.680
that you've written and also just selected

00:20:39.680 --> 00:20:41.920
about some of these things, maybe starting

00:20:41.920 --> 00:20:45.480
to the front of that list there with lock files.

00:20:45.480 --> 00:20:50.000
>> Yeah, OK, so yes, I wrote a blog post.

00:20:50.000 --> 00:20:52.240
I guess it's looking at the date on your screen.

00:20:52.240 --> 00:20:54.960
Looks like it was over a year ago now.

00:20:54.960 --> 00:20:56.680
>> And probably seems like yesterday, but--

00:20:56.680 --> 00:20:57.640
>> Yeah, that's right.

00:20:57.640 --> 00:20:59.200
>> --2022 it was.

00:20:59.200 --> 00:21:01.920
>> So I'm sure the landscape has changed since then a bit,

00:21:01.920 --> 00:21:04.120
and maybe there's some new players out there.

00:21:04.120 --> 00:21:11.160
But yeah, I think one thing you can do as a developer,

00:21:11.160 --> 00:21:16.000
a big one I would recommend is use lock files

00:21:16.000 --> 00:21:17.800
for your dependencies, right?

00:21:17.800 --> 00:21:22.960
And what's a lock file?

00:21:22.960 --> 00:21:28.960
Well, it's the fully resolved set

00:21:28.960 --> 00:21:35.160
of dependencies that are used by your application, your package.

00:21:35.160 --> 00:21:42.920
And if nothing else, you should know what's

00:21:42.920 --> 00:21:45.480
going into your code, right?

00:21:45.480 --> 00:21:46.120
>> Right.

00:21:46.120 --> 00:21:48.360
Well, one of the ways this helps--

00:21:48.360 --> 00:21:49.040
yeah, exactly.

00:21:49.040 --> 00:21:51.160
That's a bit of a challenge, right?

00:21:51.160 --> 00:21:55.640
And I think I'll admit, when I first got into Python,

00:21:55.640 --> 00:21:58.080
I didn't do this that well.

00:21:58.080 --> 00:22:02.960
And to me, it felt like probably the biggest issue I might run

00:22:02.960 --> 00:22:05.880
into is instability in my app, right?

00:22:05.880 --> 00:22:08.360
Like, for example, if I don't pin a dependency,

00:22:08.360 --> 00:22:11.840
some new thing comes out, I reinstall it on a new computer,

00:22:11.840 --> 00:22:13.720
maybe it gets an upgraded version,

00:22:13.720 --> 00:22:15.920
and there's some library that doesn't work, right?

00:22:15.920 --> 00:22:19.160
I mean, there's been certainly popular libraries that

00:22:19.160 --> 00:22:21.480
just said, we're having a major version change,

00:22:21.480 --> 00:22:24.200
and we're fixing the mistakes we made 10 years ago,

00:22:24.200 --> 00:22:27.240
and these three functions are changing, or whatever, right?

00:22:27.240 --> 00:22:28.240
That would break it.

00:22:28.240 --> 00:22:32.680
But it could also be there's now a malicious version

00:22:32.680 --> 00:22:36.160
of library x, and that's version 2.

00:22:36.160 --> 00:22:39.400
But if you pinned it on version 1, even though it's bad,

00:22:39.400 --> 00:22:42.600
you're still not getting the bad one, at least for a while,

00:22:42.600 --> 00:22:43.640
right?

00:22:43.640 --> 00:22:45.520
>> Absolutely, yes.

00:22:45.520 --> 00:22:48.840
So I think-- I got to look it up.

00:22:48.840 --> 00:22:50.080
I always forget.

00:22:50.080 --> 00:22:53.560
PEP 665.

00:22:53.560 --> 00:22:54.560
>> OK.

00:22:54.560 --> 00:22:57.160
>> Yeah, PEP 665.

00:22:57.160 --> 00:22:59.400
It's a rejected PEP, unfortunately,

00:22:59.400 --> 00:23:02.560
but it was written by Brett Cannon and some others.

00:23:02.560 --> 00:23:05.480
I know you've had Brett on the show a number of times.

00:23:05.480 --> 00:23:06.960
I love the stuff he does.

00:23:06.960 --> 00:23:08.280
He really understands all this.

00:23:08.280 --> 00:23:09.720
>> Yeah, he does excellent work.

00:23:09.720 --> 00:23:11.600
>> And it's kind of a shame this was rejected,

00:23:11.600 --> 00:23:16.680
but this PEP tried to create a standard lock file

00:23:16.680 --> 00:23:19.960
format for Python.

00:23:19.960 --> 00:23:24.880
And if you look into the PEP a little bit,

00:23:24.880 --> 00:23:27.960
there's some motivation about why you'd want to do this.

00:23:27.960 --> 00:23:29.520
And four big reasons.

00:23:29.520 --> 00:23:30.880
And the third one is one I really

00:23:30.880 --> 00:23:35.800
key on, which is that lock files allow for reproducibility.

00:23:35.800 --> 00:23:39.200
And reproducibility is just more secure.

00:23:39.200 --> 00:23:41.120
Because when-- I'm quoting here from the PEP.

00:23:41.120 --> 00:23:43.080
It says, "When you control exactly what files

00:23:43.080 --> 00:23:46.160
are installed, you can make sure no malicious actor is

00:23:46.160 --> 00:23:49.360
attempting to slip nefarious code into your application,

00:23:49.360 --> 00:23:50.000
i.e.

00:23:50.000 --> 00:23:51.920
some supply chain attacks.

00:23:51.920 --> 00:23:53.400
By using a lock file, which always

00:23:53.400 --> 00:23:55.200
leads to reproducible installs, we

00:23:55.200 --> 00:23:57.800
can avoid certain risks entirely."

00:23:57.800 --> 00:24:01.920
And I mean, that's the name of the game.

00:24:01.920 --> 00:24:05.480
That's what our company focuses on,

00:24:05.480 --> 00:24:11.600
which is avoiding those risks by ensuring you know which

00:24:11.600 --> 00:24:13.840
dependencies you're using and you're knowing that those

00:24:13.840 --> 00:24:17.760
dependencies are benign or good, doing no harm.

00:24:17.760 --> 00:24:20.400
>> Even if there is something that happens,

00:24:20.400 --> 00:24:24.680
usually it's going to happen to a popular library

00:24:24.680 --> 00:24:25.720
because you're using it.

00:24:25.720 --> 00:24:28.800
Hence, probably other people are using it

00:24:28.800 --> 00:24:31.160
other than typosquatty, which we can talk about.

00:24:31.160 --> 00:24:35.400
But if you pin your dependencies,

00:24:35.400 --> 00:24:38.320
chances are these things only stick around

00:24:38.320 --> 00:24:39.160
for a little while.

00:24:39.160 --> 00:24:40.480
It's not like, oh, they discovered it.

00:24:40.480 --> 00:24:41.920
It had been there for eight months.

00:24:41.920 --> 00:24:44.880
It's like, oh my gosh, we heard about it.

00:24:44.880 --> 00:24:47.120
A few people got it, and then we got rid of it, right?

00:24:47.120 --> 00:24:47.600
>> Yes.

00:24:47.600 --> 00:24:49.480
>> Because folks at PyPA are pretty excellent.

00:24:49.480 --> 00:24:52.200
So it's, to some degree, a timing issue as well.

00:24:52.200 --> 00:24:53.560
>> Yes.

00:24:53.560 --> 00:24:55.760
Vulnerabilities are different, right?

00:24:55.760 --> 00:24:58.280
That's what a lot of people focus on.

00:24:58.280 --> 00:25:02.800
A lot of the tooling exists to discover vulnerabilities

00:25:02.800 --> 00:25:05.480
in your dependencies, which is good to know about those.

00:25:05.480 --> 00:25:08.720
But those exist for a long time, right?

00:25:08.720 --> 00:25:11.600
You have CVEs for known vulnerabilities,

00:25:11.600 --> 00:25:13.040
and they end up in these databases.

00:25:13.040 --> 00:25:14.200
And they're there for years.

00:25:14.200 --> 00:25:16.520
And if you're using old dependencies

00:25:16.520 --> 00:25:21.040
or maybe transitive dependencies are using old ones

00:25:21.040 --> 00:25:22.600
and you're stuck on it, then you're

00:25:22.600 --> 00:25:24.520
going to be exposed to those vulnerabilities.

00:25:24.520 --> 00:25:25.840
But what's different about--

00:25:25.840 --> 00:25:28.120
>> Examples-- sorry, examples of those

00:25:28.120 --> 00:25:31.960
include the WebP library not too long ago, right?

00:25:31.960 --> 00:25:34.360
That was baked into Python.

00:25:34.360 --> 00:25:37.320
And then also OpenSSL, right?

00:25:37.320 --> 00:25:38.880
So people discovered issues in those.

00:25:38.880 --> 00:25:41.240
Those are baked into different aspects of Python

00:25:41.240 --> 00:25:42.320
or some of the libraries.

00:25:42.320 --> 00:25:44.840
And it's like, well, all of a sudden,

00:25:44.840 --> 00:25:46.760
there's this fire drill, which is

00:25:46.760 --> 00:25:48.220
different than somebody going, I'm

00:25:48.220 --> 00:25:50.160
going to sneak a thing into the library system.

00:25:50.160 --> 00:25:50.920
>> Right.

00:25:50.920 --> 00:25:52.960
>> And then it is a timing matter.

00:25:52.960 --> 00:25:55.360
So malicious dependencies, that's a whole other story.

00:25:55.360 --> 00:25:59.600
Because if a malicious package is discovered,

00:25:59.600 --> 00:26:01.480
there's not a CVE created for it.

00:26:01.480 --> 00:26:04.840
The package is just taken off of the registry.

00:26:04.840 --> 00:26:07.880
You report it to the good people at PyPI,

00:26:07.880 --> 00:26:11.720
and they'll review the submission and take it down.

00:26:11.720 --> 00:26:13.320
I've done a few of those myself.

00:26:13.320 --> 00:26:15.760
And they're really fast.

00:26:15.760 --> 00:26:18.160
But there's still a window of time

00:26:18.160 --> 00:26:21.760
where that malicious package, that malicious dependency

00:26:21.760 --> 00:26:23.200
is up and available.

00:26:23.200 --> 00:26:25.840
And that's--

00:26:25.840 --> 00:26:27.160
>> Yeah.

00:26:27.160 --> 00:26:28.640
I do think pinning your dependency--

00:26:28.640 --> 00:26:29.320
>> --often all that's pinned.

00:26:29.320 --> 00:26:29.980
>> Yeah, exactly.

00:26:29.980 --> 00:26:32.680
I do think having a pinned dependency there is worthwhile.

00:26:32.680 --> 00:26:36.000
Because if you make a commit, your CI runs, et cetera, et

00:26:36.000 --> 00:26:36.720
cetera, right?

00:26:36.720 --> 00:26:38.880
The chances that you just bump the version

00:26:38.880 --> 00:26:42.240
to this malicious thing is pretty low.

00:26:42.240 --> 00:26:43.240
>> Yeah, exactly.

00:26:43.240 --> 00:26:44.640
So yeah.

00:26:44.640 --> 00:26:48.800
Yeah, and having version ranges is not enough.

00:26:48.800 --> 00:26:51.400
You need to have explicit versions.

00:26:51.400 --> 00:26:54.120
>> All right, let's talk more about these lock files then.

00:26:54.120 --> 00:26:54.620
>> Yes.

00:26:54.620 --> 00:26:59.280
>> So there's actually a bunch of choices these days.

00:26:59.280 --> 00:27:03.520
And Brett's PEP tried to make it less of a choice,

00:27:03.520 --> 00:27:07.560
say, well, it doesn't matter if you use Hatch or pip or Poetry

00:27:07.560 --> 00:27:08.640
or whatever.

00:27:08.640 --> 00:27:10.120
The outcome is the same.

00:27:10.120 --> 00:27:13.760
And for reasons that I haven't learned enough about,

00:27:13.760 --> 00:27:15.400
I don't know why that didn't work.

00:27:15.400 --> 00:27:18.160
But let's talk about what's out there now.

00:27:18.160 --> 00:27:20.640
Because there's a couple options at this point.

00:27:20.640 --> 00:27:21.760
>> Sure.

00:27:21.760 --> 00:27:22.640
I think the-- yeah.

00:27:22.640 --> 00:27:24.880
So most Python developers are going

00:27:24.880 --> 00:27:27.760
to be most familiar with Pip, right?

00:27:27.760 --> 00:27:30.800
That's the standard.

00:27:30.800 --> 00:27:33.600
And pip has requirements files.

00:27:33.600 --> 00:27:39.680
And they're unique in the lock file world.

00:27:39.680 --> 00:27:43.520
Because they can be named anything, right?

00:27:43.520 --> 00:27:46.440
Most other lock files have a defined name.

00:27:46.440 --> 00:27:48.440
We're talking about Rust earlier.

00:27:48.440 --> 00:27:50.520
They're the gold standard for a lot of this stuff.

00:27:50.520 --> 00:27:53.160
And they're very clear.

00:27:53.160 --> 00:27:54.600
They have cargo.lock.

00:27:54.600 --> 00:27:55.560
That's their lock file.

00:27:55.560 --> 00:27:57.920
You can't name it anything else.

00:27:57.920 --> 00:28:00.200
Its contents are well-defined.

00:28:00.200 --> 00:28:01.040
It is what it is.

00:28:01.040 --> 00:28:04.280
But in Python with Pip, I mean, you

00:28:04.280 --> 00:28:06.480
could name it whatever you want.

00:28:06.480 --> 00:28:08.360
Dev requirements.txt.

00:28:08.360 --> 00:28:10.000
You could name it cargo.lock.

00:28:10.000 --> 00:28:13.000
But it could contain Python dependencies in it.

00:28:13.000 --> 00:28:13.920
>> Surprise.

00:28:13.920 --> 00:28:16.640
I'm not Rust.

00:28:16.640 --> 00:28:20.160
Basically, you can just put more or less arbitrary commands

00:28:20.160 --> 00:28:23.120
that are sent to pip into any text file, right?

00:28:23.120 --> 00:28:24.640
Which is more or less what it is.

00:28:24.640 --> 00:28:25.560
>> Yeah.

00:28:25.560 --> 00:28:26.400
Yep.

00:28:26.400 --> 00:28:28.680
Any command line option you can feed the Pip,

00:28:28.680 --> 00:28:31.600
you can put in a requirements file.

00:28:31.600 --> 00:28:34.320
>> It's cool because you can import by saying

00:28:34.320 --> 00:28:36.480
-r some other file.

00:28:36.480 --> 00:28:37.480
>> Yes.

00:28:37.480 --> 00:28:39.120
>> But it's also not super structured.

00:28:39.120 --> 00:28:40.440
>> The hierarchy that way.

00:28:40.440 --> 00:28:40.940
>> Yeah.

00:28:40.940 --> 00:28:41.440
Yeah.

00:28:41.440 --> 00:28:43.840
[LAUGHTER]

00:28:43.840 --> 00:28:48.600
>> So there are some tools available to turn

00:28:48.600 --> 00:28:51.320
those loose requirements files, the pip requirements

00:28:51.320 --> 00:28:55.000
files, into strict lock files, right?

00:28:55.000 --> 00:28:59.640
Where every entry is pinned to a specific version.

00:28:59.640 --> 00:29:04.560
And pip itself can do it with the pip freeze command.

00:29:04.560 --> 00:29:06.440
So that's the one most people know about.

00:29:06.440 --> 00:29:09.160
But that one's kind of not so great

00:29:09.160 --> 00:29:12.760
because it only freezes the packages for the environment

00:29:12.760 --> 00:29:15.080
that you ran pip freeze in.

00:29:15.080 --> 00:29:20.600
Maybe you're trying to publish your lock file for users

00:29:20.600 --> 00:29:22.680
of a different platform or system.

00:29:22.680 --> 00:29:24.560
>> The other thing that I don't like about it

00:29:24.560 --> 00:29:26.800
is you want to put just the things you actually

00:29:26.800 --> 00:29:28.440
use into your requirements file.

00:29:28.440 --> 00:29:32.360
Like, I'm using HTTPX and Pydantic.

00:29:32.360 --> 00:29:33.760
That's it.

00:29:33.760 --> 00:29:37.000
But what it really installs when you run that

00:29:37.000 --> 00:29:40.360
is the transitive closure of all those things, which is fine.

00:29:40.360 --> 00:29:45.280
But you're not necessarily expressing that

00:29:45.280 --> 00:29:48.040
with just your requirements.txt, right?

00:29:48.040 --> 00:29:48.880
>> Right.

00:29:48.880 --> 00:29:49.380
Yeah.

00:29:49.880 --> 00:29:53.960
Your two packages could balloon to 100 dependencies.

00:29:53.960 --> 00:29:57.080
And that's not uncommon.

00:29:57.080 --> 00:29:58.080
It's not even that bad.

00:29:58.080 --> 00:30:00.640
Like, in the JavaScript ecosystem,

00:30:00.640 --> 00:30:03.800
the same handful of top-level dependencies

00:30:03.800 --> 00:30:07.560
could have two orders of magnitude explosion,

00:30:07.560 --> 00:30:10.680
where you end up with 1,000.

00:30:10.680 --> 00:30:11.200
>> Oh, gosh.

00:30:11.200 --> 00:30:12.040
I can't find it.

00:30:12.040 --> 00:30:13.040
You know what?

00:30:13.040 --> 00:30:15.440
I think I put it on the Python bytes.

00:30:15.440 --> 00:30:16.560
But there's a really funny--

00:30:16.560 --> 00:30:18.440
I want to be able to pull this up for people

00:30:18.440 --> 00:30:19.480
so they can find it.

00:30:19.480 --> 00:30:24.400
There's a funny, funny thing that somebody did--

00:30:24.400 --> 00:30:28.600
well, for some definition of funny.

00:30:28.600 --> 00:30:34.360
They put somebody created an npm package called everything.

00:30:34.360 --> 00:30:36.160
And so there's an article called,

00:30:36.160 --> 00:30:37.720
"When Everything Becomes Too Much,

00:30:37.720 --> 00:30:41.040
the npm package chaos of 2024."

00:30:41.040 --> 00:30:44.680
An npm user named PatrickJS launched a troll campaign

00:30:44.680 --> 00:30:46.160
with a package called everything,

00:30:46.160 --> 00:30:49.120
which depends on every package in npm.

00:30:49.120 --> 00:30:49.640
>> Yeah.

00:30:49.640 --> 00:30:50.640
Yeah.

00:30:50.640 --> 00:30:53.920
I think it's the-- npm's the largest package registry

00:30:53.920 --> 00:30:54.440
out there.

00:30:54.440 --> 00:30:57.920
So it's already massive.

00:30:57.920 --> 00:31:00.280
I remember your early episodes, you

00:31:00.280 --> 00:31:03.800
would recount how many packages were on PyPI.

00:31:03.800 --> 00:31:04.880
And then we got to that--

00:31:04.880 --> 00:31:05.440
>> I don't even know.

00:31:05.440 --> 00:31:07.040
Are we past half a million?

00:31:07.040 --> 00:31:07.760
>> Well, yeah.

00:31:07.760 --> 00:31:08.960
I remember it was a big deal.

00:31:08.960 --> 00:31:09.960
We got up to 100,000.

00:31:09.960 --> 00:31:12.600
And now it's, what, 400,000?

00:31:12.600 --> 00:31:13.120
500,000?

00:31:13.120 --> 00:31:13.760
>> Look at that.

00:31:13.760 --> 00:31:16.560
508,509 by rounding.

00:31:16.560 --> 00:31:17.280
Yeah.

00:31:17.280 --> 00:31:18.160
Half a million.

00:31:18.160 --> 00:31:20.760
Congratulations, world.

00:31:20.760 --> 00:31:22.440
Amazing.

00:31:22.440 --> 00:31:24.080
I just added two new ones last week.

00:31:24.080 --> 00:31:27.880
So I guess I made a huge difference in that number.

00:31:27.880 --> 00:31:28.400
>> Nice.

00:31:28.400 --> 00:31:28.880
>> Yeah.

00:31:28.880 --> 00:31:30.680
So basically, PyPI is awesome.

00:31:30.680 --> 00:31:32.160
And it does a bunch of great stuff.

00:31:32.160 --> 00:31:34.880
And one of the things I really like about working with PyP

00:31:34.880 --> 00:31:37.840
is I don't need to teach people anything if they

00:31:37.840 --> 00:31:39.360
want to work with my project.

00:31:39.360 --> 00:31:42.200
I don't need to teach them, like, oh, I know you love poetry.

00:31:42.200 --> 00:31:45.160
But I'm using a combination of the Hatch build back end

00:31:45.160 --> 00:31:46.240
with PDM.

00:31:46.240 --> 00:31:47.080
You're like, what?

00:31:47.080 --> 00:31:49.600
I don't even know what those are.

00:31:49.600 --> 00:31:52.880
There's a lot of ways in which you

00:31:52.880 --> 00:31:55.720
work that are brought in with a lot of these tools here.

00:31:55.720 --> 00:31:57.840
So PyPI is kind of like--

00:31:57.840 --> 00:31:59.320
it just kind of works, right?

00:31:59.320 --> 00:31:59.840
>> Yes.

00:31:59.840 --> 00:32:03.560
>> But having this transitive closure managed

00:32:03.560 --> 00:32:05.440
is not part of what it does.

00:32:05.440 --> 00:32:07.040
But it's super important, because if I

00:32:07.040 --> 00:32:08.680
need to upgrade something, I can't just

00:32:08.680 --> 00:32:11.760
change my version number in my requirements,

00:32:11.760 --> 00:32:14.880
because that doesn't affect its dependency possibly, right?

00:32:14.880 --> 00:32:16.680
Like, it depends on what it said.

00:32:16.680 --> 00:32:18.280
So I'm a huge fan of PyPI tools.

00:32:18.280 --> 00:32:20.360
This is actually what I do most of the time.

00:32:20.360 --> 00:32:22.280
>> Yes, PyPI tools is another one.

00:32:25.040 --> 00:32:27.840
You can-- it's great, I think.

00:32:27.840 --> 00:32:32.600
It has this pip compile command that

00:32:32.600 --> 00:32:36.800
will take as an input, I think, just about any Python manifest

00:32:36.800 --> 00:32:37.960
type that's out there.

00:32:37.960 --> 00:32:45.680
So you can do setup.py, requirements.txt.

00:32:45.680 --> 00:32:49.480
I'm forgetting the other ones.

00:32:49.480 --> 00:32:52.680
>> The pipenv.lock, maybe.

00:32:52.680 --> 00:32:55.480
setup.cfg, pyproject.toml.

00:32:55.480 --> 00:32:58.800
It just recognizes all the different ways

00:32:58.800 --> 00:33:03.880
people could express their loose requirements, the manifest

00:33:03.880 --> 00:33:06.680
files.

00:33:06.680 --> 00:33:07.200
Yeah, so--

00:33:07.200 --> 00:33:08.720
>> Yeah, I really like it.

00:33:08.720 --> 00:33:12.160
And you can say pip compile upgrade,

00:33:12.160 --> 00:33:13.880
and it'll look at all the dependencies

00:33:13.880 --> 00:33:16.480
and upgrade them all as high as they can go.

00:33:16.480 --> 00:33:19.000
But what's nice about that is, if you're working for a while,

00:33:19.000 --> 00:33:20.720
then you choose, like, well, let me just

00:33:20.720 --> 00:33:23.840
do a refresh on the dependencies right now

00:33:23.840 --> 00:33:25.760
and repin them and see how that works,

00:33:25.760 --> 00:33:29.480
and then just carry on with your business for a while, right?

00:33:29.480 --> 00:33:33.000
And it'll manage that transitive closure as well with, like--

00:33:33.000 --> 00:33:35.760
actually, a really nice lock file where it describes, like,

00:33:35.760 --> 00:33:37.480
these are all the things in the lock file.

00:33:37.480 --> 00:33:39.640
And the reason that, for example, in your blog post

00:33:39.640 --> 00:33:41.320
you say they're certified, this version,

00:33:41.320 --> 00:33:42.960
and it's there because you asked for it

00:33:42.960 --> 00:33:44.880
and because request needs it.

00:33:44.880 --> 00:33:47.760
If you're like, why is this in my virtual environment?

00:33:47.760 --> 00:33:49.760
Why do I have this weird thing that I don't know?

00:33:49.760 --> 00:33:52.040
It'll tell you, here's why it's there.

00:33:52.040 --> 00:33:53.160
>>Yeah.

00:33:53.160 --> 00:33:55.160
Yeah, one of the downsides, though--

00:33:55.160 --> 00:33:57.720
I think pip-tools has this issue.

00:33:57.720 --> 00:34:02.840
I know pip does-- is that in determining

00:34:02.840 --> 00:34:07.720
that transitive dependency resolution,

00:34:07.720 --> 00:34:09.720
it is very possible-- in fact, it usually

00:34:09.720 --> 00:34:14.120
happens that you have arbitrary code execution on your system.

00:34:14.120 --> 00:34:17.080
Like, if you start with the two top-level dependencies,

00:34:17.080 --> 00:34:19.960
like you mentioned, and it lists dependencies, well,

00:34:19.960 --> 00:34:23.560
then it'll pull those in, and it acquires the metadata

00:34:23.560 --> 00:34:25.920
from the wheel if that exists.

00:34:25.920 --> 00:34:28.240
But if it doesn't, it'll build a package just

00:34:28.240 --> 00:34:30.280
to get the metadata file just to figure out

00:34:30.280 --> 00:34:32.640
which dependencies that needs.

00:34:32.640 --> 00:34:35.520
>>Are you saying I should set up a Docker container

00:34:35.520 --> 00:34:36.680
to execute this?

00:34:36.680 --> 00:34:38.760
>>That's-- yeah, that's kind of what's happening.

00:34:38.760 --> 00:34:40.560
>>Maybe I should, yeah.

00:34:40.560 --> 00:34:47.520
>>And yeah, running in a sandbox is another option, right?

00:34:47.520 --> 00:34:50.800
Where that's what my company, Phylum,

00:34:50.800 --> 00:34:54.520
that's one of the solutions we offer.

00:34:54.520 --> 00:34:56.600
We have extensions for our CLI where

00:34:56.600 --> 00:35:01.200
you can wrap pip by just calling Phylum pip,

00:35:01.200 --> 00:35:03.280
and then everything runs in the sandbox.

00:35:03.280 --> 00:35:05.360
So that's another solution.

00:35:05.360 --> 00:35:06.600
Yeah, yeah, yeah.

00:35:06.600 --> 00:35:08.480
Because I mean, pip is a funny one,

00:35:08.480 --> 00:35:11.400
because they even have a command line option called

00:35:11.400 --> 00:35:15.200
dry run, tactac dry run, which you would think,

00:35:15.200 --> 00:35:17.840
oh, nothing's going to happen on my system.

00:35:17.840 --> 00:35:18.360
It's just--

00:35:18.360 --> 00:35:20.440
>>Except for running code from strangers on the internet

00:35:20.440 --> 00:35:21.040
at that point.

00:35:21.040 --> 00:35:21.760
>>But it does, yes.

00:35:21.760 --> 00:35:26.200
Dry run, even using dry run for pip install and pip download

00:35:26.200 --> 00:35:30.520
commands will or has the possibility of downloading

00:35:30.520 --> 00:35:34.240
and running arbitrary code from strangers on the internet.

00:35:34.240 --> 00:35:39.080
>>If we had-- wheels came along far after Pip, right?

00:35:39.080 --> 00:35:41.800
And we've got the source distributions and setup.py

00:35:41.800 --> 00:35:42.960
and all that kind of stuff.

00:35:42.960 --> 00:35:46.080
And so if wheels existed from day one,

00:35:46.080 --> 00:35:49.200
it very well may be the case that this is not a problem,

00:35:49.200 --> 00:35:49.720
right?

00:35:49.720 --> 00:35:51.520
But what is pip supposed to do?

00:35:51.520 --> 00:35:54.880
It has to evaluate this dynamic thing

00:35:54.880 --> 00:35:56.120
to figure out what it wants.

00:35:56.120 --> 00:35:57.440
>>Yes, yes, yeah.

00:35:57.440 --> 00:36:02.240
Wheels are great, because they have a metadata file in there

00:36:02.240 --> 00:36:06.680
that clearly lays out what the dependencies are.

00:36:06.680 --> 00:36:09.200
And there's no arbitrary code running when you install a

00:36:09.200 --> 00:36:09.720
wheel.

00:36:09.720 --> 00:36:13.680
It's just extracting and copying.

00:36:13.680 --> 00:36:15.040
A wheel is just a zip file.

00:36:15.040 --> 00:36:17.760
You extract that zip file and then copy the contents

00:36:17.760 --> 00:36:19.840
to various locations.

00:36:19.840 --> 00:36:21.920
But yes, as you said, because we've

00:36:21.920 --> 00:36:27.040
had source distributions, tarballs, and then even eggs

00:36:27.040 --> 00:36:30.200
before that, and probably never going

00:36:30.200 --> 00:36:34.400
to fully get rid of those, it just

00:36:34.400 --> 00:36:37.800
takes one, one dependency anywhere in your chain

00:36:37.800 --> 00:36:41.080
that is only distributed as a source distribution

00:36:41.080 --> 00:36:45.440
before now you're downloading and building a package just

00:36:45.440 --> 00:36:48.480
to get metadata to continue.

00:36:48.480 --> 00:36:50.760
>>Yeah, and maybe you didn't actually choose it, right?

00:36:50.760 --> 00:36:53.600
It's the dependency of a dependency of a dependency.

00:36:53.600 --> 00:36:54.960
>>Absolutely, yeah.

00:36:54.960 --> 00:36:57.760
Yeah, that's-- yeah, yeah.

00:36:57.760 --> 00:37:03.960
People often respond to some of the findings

00:37:03.960 --> 00:37:06.880
our company has where we'll post these malicious packages

00:37:06.880 --> 00:37:08.640
with all sorts of crazy names.

00:37:08.640 --> 00:37:12.720
And people will respond to say, why would I install that?

00:37:12.720 --> 00:37:18.080
Why would I ever install this random package

00:37:18.080 --> 00:37:19.080
that no one's heard of?

00:37:19.080 --> 00:37:20.600
It's like, well, you wouldn't.

00:37:20.600 --> 00:37:27.520
But it could be included in the transit dependencies, right?

00:37:27.520 --> 00:37:32.040
If it gets added to a slightly more legitimate package

00:37:32.040 --> 00:37:37.360
or worked up the chain that way, then yes, eventually, you'll

00:37:37.360 --> 00:37:39.240
be running it unknowingly.

00:37:39.240 --> 00:37:42.080
>>Yeah, I think there's two important things we should

00:37:42.080 --> 00:37:44.440
talk about this before we move on,

00:37:44.440 --> 00:37:46.520
because there are some interesting ways in which you

00:37:46.520 --> 00:37:47.720
might unknowingly-- you might even

00:37:47.720 --> 00:37:49.800
try to do the right thing, and you might actually

00:37:49.800 --> 00:37:52.760
shoot yourself in the foot by doing so.

00:37:52.760 --> 00:37:58.360
So number one, these super strict lock files

00:37:58.360 --> 00:38:01.080
are awesome when you're building an application.

00:38:01.080 --> 00:38:03.400
I want to ship TalkBython training out.

00:38:03.400 --> 00:38:04.840
It's got its strict APIs.

00:38:04.840 --> 00:38:06.080
It runs on this version.

00:38:06.080 --> 00:38:08.600
It uses that version of Pydanic, that version of Beanie,

00:38:08.600 --> 00:38:10.120
and whatever.

00:38:10.120 --> 00:38:13.440
I want that to be fixed, fixed, zero flexibility,

00:38:13.440 --> 00:38:16.600
until I decide, through maybe a pip compile update or whatever,

00:38:16.600 --> 00:38:18.280
that I want a new one.

00:38:18.280 --> 00:38:21.800
However, if I was building a library that someone else was

00:38:21.800 --> 00:38:25.640
using, I would do them many headaches and a disservice

00:38:25.640 --> 00:38:30.600
to say, I depend on Pydanic 2.7.0.

00:38:30.600 --> 00:38:35.360
You're like, but my other library needs Pydanic 8, 2.8,

00:38:35.360 --> 00:38:38.480
and I can't use it and your library together, right?

00:38:38.480 --> 00:38:40.480
So you need the-- it's a different story

00:38:40.480 --> 00:38:43.480
when you're building a library that others are going to consume

00:38:43.480 --> 00:38:46.280
than it is when you're building an application.

00:38:46.280 --> 00:38:49.440
And there was some disagreement, I guess,

00:38:49.440 --> 00:38:51.840
about the recommendation of pipenv for a while.

00:38:51.840 --> 00:38:54.320
And it's because I believe that pipenv is really

00:38:54.320 --> 00:38:56.640
focused on the application side.

00:38:56.640 --> 00:38:58.680
And I don't think it was made super clear

00:38:58.680 --> 00:39:01.400
that maybe it doesn't make as much sense for libraries,

00:39:01.400 --> 00:39:01.920
right?

00:39:01.920 --> 00:39:03.680
So do you want to speak to that a little?

00:39:03.680 --> 00:39:05.160
Yeah.

00:39:05.160 --> 00:39:09.520
I'm an advocate for lock files for everyone, applications

00:39:09.520 --> 00:39:14.000
for sure, but also libraries and their developers, right?

00:39:14.000 --> 00:39:20.640
Because when you distribute a library,

00:39:20.640 --> 00:39:26.160
sure, loose dependencies is probably the way to go there.

00:39:26.160 --> 00:39:28.040
But library developers, people who

00:39:28.040 --> 00:39:30.920
want to contribute to your projects, the developers

00:39:30.920 --> 00:39:34.840
themselves, maybe you work on a team,

00:39:34.840 --> 00:39:39.560
having a lock file alongside your library

00:39:39.560 --> 00:39:41.400
is still going to be useful, right?

00:39:41.400 --> 00:39:43.240
Yeah, because that way you can say everyone,

00:39:43.240 --> 00:39:46.480
if somebody makes a change or they report a bug or whatever,

00:39:46.480 --> 00:39:48.800
they're not bringing in a change from a different version

00:39:48.800 --> 00:39:51.760
of a dependency, or maybe something changed, right?

00:39:51.760 --> 00:39:52.800
Yes, yes.

00:39:52.800 --> 00:39:54.120
Yeah.

00:39:54.120 --> 00:39:56.600
And then plus it still allows you

00:39:56.600 --> 00:40:00.320
to start from a known good spot.

00:40:00.320 --> 00:40:10.240
And then maybe if you know you want to get the latest,

00:40:10.240 --> 00:40:12.960
then you can do it in a controlled environment,

00:40:12.960 --> 00:40:18.360
like a sandbox or maybe on CI in a throwaway runner that

00:40:18.360 --> 00:40:23.240
has no access to any secrets or sensitive--

00:40:23.240 --> 00:40:24.080
That's interesting.

00:40:24.080 --> 00:40:31.520
I hadn't really thought about having a specific requirements

00:40:31.520 --> 00:40:34.840
lock file type of thing for the libraries

00:40:34.840 --> 00:40:37.840
that I've been working on for the developers, right?

00:40:37.840 --> 00:40:39.480
For people who want to contribute,

00:40:39.480 --> 00:40:42.240
because it's just been like a loose requirement

00:40:42.240 --> 00:40:44.320
so that people that built against it

00:40:44.320 --> 00:40:46.760
aren't pinned into some very specific thing.

00:40:46.760 --> 00:40:48.720
But yeah, that makes a lot of sense, I think.

00:40:48.720 --> 00:40:49.480
Yeah.

00:40:49.480 --> 00:40:51.160
There's a link in that blog post.

00:40:51.160 --> 00:40:53.560
It's kind of dated now, but it's from the folks

00:40:53.560 --> 00:40:56.600
who built Yarn, the JavaScripting system.

00:40:56.600 --> 00:41:01.640
But they say it a lot more eloquently than I can.

00:41:01.640 --> 00:41:03.120
Yeah, that's the one.

00:41:03.120 --> 00:41:04.640
Lock files should be committed.

00:41:04.640 --> 00:41:06.040
On all projects, yeah.

00:41:06.040 --> 00:41:09.760
I mean, it's a bit old now, but they go down the lists

00:41:09.760 --> 00:41:11.560
and spell it out a lot more clearly than me

00:41:11.560 --> 00:41:15.800
and I think that's kind of why libraries even

00:41:15.800 --> 00:41:18.840
can benefit from publishing a lock file.

00:41:18.840 --> 00:41:20.440
Yeah, people can check that out.

00:41:20.440 --> 00:41:21.600
That's cool.

00:41:21.600 --> 00:41:23.760
Yeah, and that's the JavaScript package manager.

00:41:23.760 --> 00:41:25.680
So in JavaScript years, like 100 years,

00:41:25.680 --> 00:41:27.240
or something that's been a couple years.

00:41:27.240 --> 00:41:28.160
That's right.

00:41:28.160 --> 00:41:30.080
You got dog years, you got JavaScript years.

00:41:30.080 --> 00:41:33.280
JavaScript years just tick by like the second hand.

00:41:33.280 --> 00:41:34.560
Yeah, yeah.

00:41:34.560 --> 00:41:36.280
All right, cool.

00:41:36.280 --> 00:41:38.720
So I see we're making great progress to our list of things

00:41:38.720 --> 00:41:41.320
to talk about here.

00:41:41.320 --> 00:41:43.120
Like 15 left, we'll have plenty of time.

00:41:43.120 --> 00:41:46.600
[LAUGHTER]

00:41:46.600 --> 00:41:48.000
So yeah, let's see.

00:41:48.000 --> 00:41:51.680
So another one, another PEP I think we're talking about here

00:41:51.680 --> 00:41:55.920
is 5.1.7, a build system independent format

00:41:55.920 --> 00:41:57.000
for source trees.

00:41:57.000 --> 00:41:57.880
I have no idea what this is.

00:41:57.880 --> 00:41:58.440
What is this?

00:41:58.440 --> 00:42:01.720
Yeah, PEP 5.17 and 5.18 kind of go together.

00:42:01.720 --> 00:42:06.000
This was like the transition away from setup.py

00:42:06.000 --> 00:42:08.360
towards pyproject.toml.

00:42:08.360 --> 00:42:13.080
5.18 is the one that specifies pyproject.toml,

00:42:13.080 --> 00:42:14.320
kind of things that go in it.

00:42:14.320 --> 00:42:21.720
And then 5.17 is all about build systems and build back ends.

00:42:21.720 --> 00:42:28.640
So like in your pyproject.toml and your build system key,

00:42:28.640 --> 00:42:33.160
you'll often see things like Poetry Core, or Flit,

00:42:33.160 --> 00:42:35.760
or Hatchling, or these kinds of things.

00:42:35.760 --> 00:42:39.440
And so PEP 5.17 is specifying what

00:42:39.440 --> 00:42:42.600
it means to be one of those build back ends.

00:42:42.600 --> 00:42:47.360
It's really just defining two mandatory hooks.

00:42:47.360 --> 00:42:51.120
What does it mean to build wheel and build sdist?

00:42:51.120 --> 00:42:52.960
There's three optional hooks as well.

00:42:52.960 --> 00:42:55.680
And I think there's even another PEP that followed on from this

00:42:55.680 --> 00:43:01.320
that talks about building editable packages.

00:43:01.320 --> 00:43:04.680
Right, the -e equivalence.

00:43:04.680 --> 00:43:06.760
Yeah, exactly.

00:43:06.760 --> 00:43:12.400
But really, it just boils down to defining a way

00:43:12.400 --> 00:43:15.160
to build a wheel and build a source distribution.

00:43:15.160 --> 00:43:17.000
Yeah, and this is part of what opened up

00:43:17.000 --> 00:43:21.960
all the different choices we now have for package management

00:43:21.960 --> 00:43:24.160
and things like that, right?

00:43:24.160 --> 00:43:27.800
Because now there's a common way they can all work together.

00:43:27.800 --> 00:43:29.280
A little bit like WSGI.

00:43:29.280 --> 00:43:31.720
Yes.

00:43:31.720 --> 00:43:34.320
Yeah, I've been using Hatchling for my build back end

00:43:34.320 --> 00:43:36.880
recently, and it's been working real nicely.

00:43:36.880 --> 00:43:38.640
OK.

00:43:38.640 --> 00:43:44.120
Yeah, I was just looking at Hatchling the other day,

00:43:44.120 --> 00:43:45.040
and they've got--

00:43:45.040 --> 00:43:50.240
yeah, they're one of the build back ends

00:43:50.240 --> 00:43:52.400
that offers build hooks.

00:43:58.200 --> 00:44:05.600
Prior to PyProject.toml and wheels and bdus wheels,

00:44:05.600 --> 00:44:07.480
and you go back to the source distributions

00:44:07.480 --> 00:44:11.280
and your setup.py files, where it's just Python code.

00:44:11.280 --> 00:44:16.480
You can be doing anything in your setup.py file, which

00:44:16.480 --> 00:44:19.120
runs when you install the package.

00:44:19.120 --> 00:44:23.280
Well, now we're starting to see methods

00:44:23.280 --> 00:44:26.200
to do the same thing in these more modern packaging

00:44:26.200 --> 00:44:27.080
and build back ends.

00:44:27.080 --> 00:44:32.800
So Hatch has their build hooks, build system hooks,

00:44:32.800 --> 00:44:39.200
where you can point it to, I think, yeah, just Python code

00:44:39.200 --> 00:44:42.680
and have it run as part of the build.

00:44:42.680 --> 00:44:45.520
Yeah, at least it only runs at build time, not install time.

00:44:45.520 --> 00:44:49.600
Right?

00:44:49.600 --> 00:44:53.320
Yeah, I'm looking at the documentation now.

00:44:53.320 --> 00:44:55.360
Yeah, this is still new to me, but there

00:44:55.360 --> 00:44:59.760
might be hooks for install as well.

00:44:59.760 --> 00:45:01.920
OK.

00:45:01.920 --> 00:45:04.080
While you're thinking about it, one of the things--

00:45:04.080 --> 00:45:05.520
I got a couple of questions I want

00:45:05.520 --> 00:45:07.440
to highlight from the audience here.

00:45:07.440 --> 00:45:14.040
But also, one of the things that I think maybe was considered--

00:45:14.040 --> 00:45:16.720
I have no awareness of this, but if it wasn't,

00:45:16.720 --> 00:45:22.480
would be excellent-- is what if the people at PIP

00:45:22.480 --> 00:45:26.240
just pre-computed all that metadata from--

00:45:26.240 --> 00:45:28.520
at least for the common platforms--

00:45:28.520 --> 00:45:31.760
that you would get that pip needs to download, run

00:45:31.760 --> 00:45:34.520
setup.py, and then throw it away just to get that data?

00:45:34.520 --> 00:45:38.280
Like for Mac, Windows, and Linux,

00:45:38.280 --> 00:45:40.320
if it would just go, OK, we're just going to--

00:45:40.320 --> 00:45:41.960
as you upload it, it would just kick off

00:45:41.960 --> 00:45:44.080
a job that does that on those three platforms

00:45:44.080 --> 00:45:46.600
and puts it in a JSON blob.

00:45:46.600 --> 00:45:49.400
It seems like that would be worthwhile.

00:45:49.400 --> 00:45:51.600
I'm fairly certain there's discussions already

00:45:51.600 --> 00:45:55.080
around that type of a solution and maybe even

00:45:55.080 --> 00:45:58.400
a PEP for proposal for it.

00:45:58.400 --> 00:46:01.520
But yeah, getting away from having to build a package just

00:46:01.520 --> 00:46:03.080
to get metadata--

00:46:03.080 --> 00:46:04.080
Yeah.

00:46:04.080 --> 00:46:08.120
You got packages that are downloaded billions of times

00:46:08.120 --> 00:46:10.040
with a B. It's insane.

00:46:10.040 --> 00:46:12.760
And if somebody could do that three times instead

00:46:12.760 --> 00:46:16.080
of a billion times, it would make it work faster,

00:46:16.080 --> 00:46:17.680
and it would also make it safe.

00:46:17.680 --> 00:46:19.240
I think it'd be great.

00:46:19.240 --> 00:46:22.920
All right, a couple of questions here.

00:46:22.920 --> 00:46:24.360
This one.

00:46:24.360 --> 00:46:27.280
So Tony on the audience says, "PIP compiles

00:46:27.280 --> 00:46:30.520
great for finding your transitive dependencies.

00:46:30.520 --> 00:46:33.120
One interesting thing that they've done

00:46:33.120 --> 00:46:35.400
is package up code with Pants Build,

00:46:35.400 --> 00:46:37.640
which supports locks files, just to look through what

00:46:37.640 --> 00:46:39.440
code gets packaged up.

00:46:39.440 --> 00:46:42.280
Is this anything you've explored?

00:46:42.280 --> 00:46:43.560
I've heard of Pants.

00:46:43.560 --> 00:46:46.640
I haven't looked into it myself yet.

00:46:46.640 --> 00:46:48.280
OK, yeah.

00:46:48.280 --> 00:46:50.320
So just use it like, OK, you're going

00:46:50.320 --> 00:46:53.120
to have to build this thing and give me a little manifest

00:46:53.120 --> 00:46:54.680
and whatnot, and then we can just look at that.

00:46:54.680 --> 00:46:55.560
That's cool.

00:46:55.560 --> 00:46:57.080
And then Tamir says, "Do you have

00:46:57.080 --> 00:47:00.600
a solution for taking already locked dependencies with you

00:47:00.600 --> 00:47:01.680
when you start a new app?"

00:47:01.680 --> 00:47:09.600
I'm guessing maybe-- yeah, I don't know.

00:47:09.600 --> 00:47:12.080
I guess maybe you've already got a project you're working on,

00:47:12.080 --> 00:47:14.320
and you want to say, I want this project to use that.

00:47:14.320 --> 00:47:17.080
Probably you could just copy the lock file, right?

00:47:17.080 --> 00:47:18.840
Yeah, yeah.

00:47:18.840 --> 00:47:25.080
I mean, really, if you start a new project or new application,

00:47:25.080 --> 00:47:28.840
you're going to have new manifest file.

00:47:28.840 --> 00:47:31.480
PyProject.toml, maybe you have the same dependencies,

00:47:31.480 --> 00:47:33.400
the top level dependencies or not.

00:47:33.400 --> 00:47:36.680
But the fully resolved set of dependencies

00:47:36.680 --> 00:47:38.440
that makes up your lock file, that

00:47:38.440 --> 00:47:40.320
can very easily be different.

00:47:40.320 --> 00:47:43.880
I'm not exactly sure how you just

00:47:43.880 --> 00:47:46.320
port over one to another.

00:47:46.320 --> 00:47:47.640
One more bit from Tony.

00:47:47.640 --> 00:47:51.480
This is something that I now remember from Pan.

00:47:51.480 --> 00:47:54.400
It says, "If it just looks through your code,

00:47:54.400 --> 00:47:56.280
and if you use the import statement,

00:47:56.280 --> 00:47:58.720
regardless of whether you put it in your requirements files,

00:47:58.720 --> 00:48:01.320
it'll figure out what your requirements

00:48:01.320 --> 00:48:04.280
file should have been if you were a bad developer."

00:48:04.280 --> 00:48:06.480
Basically.

00:48:06.480 --> 00:48:08.400
That's kind of cool, just to see what it uses.

00:48:08.400 --> 00:48:09.720
Yeah.

00:48:09.720 --> 00:48:11.960
Nice, all right.

00:48:11.960 --> 00:48:13.800
On to the next thing.

00:48:13.800 --> 00:48:17.960
Specifying PEP 518, specifying minimum build system

00:48:17.960 --> 00:48:20.400
requirements for Python projects.

00:48:20.400 --> 00:48:23.240
Yeah, this is PyProject.toml.

00:48:23.240 --> 00:48:28.120
This is the PEP for that.

00:48:28.120 --> 00:48:29.800
There's not much to it, other than to say

00:48:29.800 --> 00:48:31.800
that they've settled on that name,

00:48:31.800 --> 00:48:33.800
rejected a bunch of other possibilities.

00:48:33.800 --> 00:48:36.520
And then they've got the few entries

00:48:36.520 --> 00:48:39.240
that are required for defining your build system.

00:48:39.240 --> 00:48:40.680
Excellent.

00:48:40.720 --> 00:48:43.720
Yeah, you don't have to have a PyProject.toml for Python.

00:48:43.720 --> 00:48:48.040
But if you're building a Python library,

00:48:48.040 --> 00:48:49.400
and you don't want to use setup.py,

00:48:49.400 --> 00:48:53.480
then you're much better off having a PyProject.toml,

00:48:53.480 --> 00:48:54.400
right?

00:48:54.400 --> 00:48:55.360
Yes.

00:48:55.360 --> 00:48:56.720
Yeah, yeah.

00:48:56.720 --> 00:48:58.280
It's more on the library side that it--

00:48:58.280 --> 00:49:00.600
I mean, it's not that you can't use it on an application,

00:49:00.600 --> 00:49:03.160
but it's more required on the library side.

00:49:03.160 --> 00:49:05.280
Yeah.

00:49:05.280 --> 00:49:06.360
That's the thing.

00:49:06.360 --> 00:49:07.840
All right, so let's talk about some

00:49:07.840 --> 00:49:11.840
of the ways in which your packages might go wrong.

00:49:11.840 --> 00:49:13.840
We've already talked about typosquatting.

00:49:13.840 --> 00:49:16.880
We also talked about everything that's different.

00:49:16.880 --> 00:49:17.640
Yeah.

00:49:17.640 --> 00:49:21.160
But typosquatting is tricky.

00:49:21.160 --> 00:49:23.520
I think it's pretty well understood at this point.

00:49:23.520 --> 00:49:25.360
But maybe just tell people real quick

00:49:25.360 --> 00:49:27.320
to cover that base, you know?

00:49:27.320 --> 00:49:28.000
Sure.

00:49:28.000 --> 00:49:31.560
Typosquatting is publishing a package

00:49:31.560 --> 00:49:36.640
with a name that's similar, but not the same as an existing

00:49:36.640 --> 00:49:38.320
known good package, right?

00:49:38.320 --> 00:49:44.280
So instead of requests, maybe you get request without the S.

00:49:44.280 --> 00:49:50.920
Or one that gets me, because I make the typo all the time,

00:49:50.920 --> 00:49:53.680
is the cryptography package.

00:49:53.680 --> 00:49:55.760
Like if I put you on the spot, would you

00:49:55.760 --> 00:49:58.320
know how to spell cryptography right away?

00:49:58.320 --> 00:50:01.480
I always get the first couple of letters jumbled up a bit.

00:50:01.480 --> 00:50:05.240
And there have been malicious packages published and then

00:50:05.240 --> 00:50:13.160
taken down with the spelled C-R-P-Y instead of C-R-Y-P.

00:50:13.160 --> 00:50:14.440
Cryptography, right?

00:50:14.440 --> 00:50:15.600
Yeah.

00:50:15.600 --> 00:50:22.120
But the idea is that you can overlook a package,

00:50:22.120 --> 00:50:24.320
because it looks like a good one.

00:50:24.320 --> 00:50:27.400
It's not necessarily that you're going to install it

00:50:27.400 --> 00:50:29.000
because you type it wrong.

00:50:29.000 --> 00:50:32.800
Although that is one technique, right?

00:50:32.800 --> 00:50:34.760
The drive-by installs, where someone just

00:50:34.760 --> 00:50:38.120
fat fingers the package name.

00:50:38.120 --> 00:50:43.640
But really, having a typosquatted package

00:50:43.640 --> 00:50:46.720
is going to allow these threat actors to be

00:50:46.720 --> 00:50:49.800
a little more stealthy in their inclusion of that package

00:50:49.800 --> 00:50:53.840
in legitimate code reviews and commits

00:50:53.840 --> 00:50:56.320
and dependencies of dependencies, right?

00:50:56.320 --> 00:50:59.360
And so the other thing that goes with typosquatting--

00:50:59.360 --> 00:51:02.000
I don't know if I had a link for you there yet--

00:51:02.000 --> 00:51:03.960
is starjacking.

00:51:03.960 --> 00:51:07.080
So a lot of times, if you're going

00:51:07.080 --> 00:51:09.960
to typosquat on a known good package-- OK, there it is.

00:51:09.960 --> 00:51:16.800
These threat actors, they just straight up

00:51:16.800 --> 00:51:20.960
copy the known good project, right?

00:51:20.960 --> 00:51:26.360
Just clone the repository and then change the package name.

00:51:26.360 --> 00:51:31.240
And then when they post the package to PyPI,

00:51:31.240 --> 00:51:37.160
for instance, the metadata that goes with the package

00:51:37.160 --> 00:51:38.440
still exists, right?

00:51:38.440 --> 00:51:41.720
So on PyPI, for a given package, you

00:51:41.720 --> 00:51:44.880
can see on the left-hand side, it shows some statistics.

00:51:44.880 --> 00:51:52.200
If the URL was given to a GitHub-hosted project,

00:51:52.200 --> 00:51:56.880
for instance, it'll go in there and tell you how many stars.

00:51:56.880 --> 00:51:58.600
>>Nick: Right, right, right.

00:51:58.600 --> 00:52:01.080
That's actually a signal that it seems like it should be good,

00:52:01.080 --> 00:52:01.600
right?

00:52:01.600 --> 00:52:02.080
It'll have--

00:52:02.080 --> 00:52:03.760
>>Mark: Yeah.

00:52:03.760 --> 00:52:05.520
That's what starjacking is doing,

00:52:05.520 --> 00:52:10.600
is just copying the metadata of a known good package

00:52:10.600 --> 00:52:12.920
so that on first look--

00:52:12.920 --> 00:52:13.720
yeah, there you go.

00:52:13.720 --> 00:52:15.120
You can see--

00:52:15.120 --> 00:52:17.720
>>Nick: I did pull up pytest, and it says statistics.

00:52:17.720 --> 00:52:20.680
GitHub statistics, 11,000 stars, 2,000 forks.

00:52:20.680 --> 00:52:21.680
OK, this is legit.

00:52:21.680 --> 00:52:22.560
Let's install it.

00:52:22.560 --> 00:52:23.120
>>Mark: Right.

00:52:23.120 --> 00:52:25.880
So I could go clone pytest repository right now,

00:52:25.880 --> 00:52:30.760
change the name to pytest spelled P-I-T-E-S-T,

00:52:30.760 --> 00:52:31.880
and then push that to PyPI.

00:52:31.880 --> 00:52:33.280
>>Nick: The math version of testing, yeah.

00:52:33.280 --> 00:52:35.480
>>Mark: And you're going to get these same statistics,

00:52:35.480 --> 00:52:37.840
and you're going to get the same maintainers that you see

00:52:37.840 --> 00:52:43.160
if you scroll down a little bit in the metadata.

00:52:43.160 --> 00:52:44.960
Yeah, so you get the maintainers list.

00:52:44.960 --> 00:52:49.880
All of that metadata that you enter in your pyproject.toml

00:52:49.880 --> 00:52:55.240
or setup.py file gets read here on PyPI and just published.

00:52:55.240 --> 00:52:58.000
So you can fake people out by--

00:52:58.000 --> 00:53:00.320
>>Nick: Yeah, that's actually really--

00:53:00.320 --> 00:53:01.680
OK, well, there's a new terrifying thing

00:53:01.680 --> 00:53:02.160
that I hadn't thought about.

00:53:02.160 --> 00:53:02.960
>>Mark: Yeah, yeah.

00:53:02.960 --> 00:53:05.120
So starjacking and typosquatting,

00:53:05.120 --> 00:53:07.800
where you just take a known good package, clone it,

00:53:07.800 --> 00:53:13.360
and then maybe you make a change to existing function.

00:53:13.360 --> 00:53:15.160
The function does what it's supposed to do,

00:53:15.160 --> 00:53:16.720
but it also does some other stuff,

00:53:16.720 --> 00:53:20.800
like ship off secrets from your CI server or--

00:53:20.800 --> 00:53:23.160
>>Nick: Mm-hmm.

00:53:23.160 --> 00:53:25.760
It could lay dormant and wait for some sort

00:53:25.760 --> 00:53:28.600
of production environment and grab some SSH keys

00:53:28.600 --> 00:53:29.760
or something terrible.

00:53:29.760 --> 00:53:30.800
Yeah, yeah, yeah.

00:53:30.800 --> 00:53:31.800
That's the other--

00:53:31.800 --> 00:53:32.560
>>Mark: Indeed.

00:53:32.560 --> 00:53:33.640
>>Nick: --the other thing.

00:53:33.640 --> 00:53:34.640
Dependency confusion.

00:53:34.640 --> 00:53:36.360
OK, that's the next one you've got up.

00:53:36.360 --> 00:53:38.200
>>Mark: Yeah, this is one we kind of talked--

00:53:38.200 --> 00:53:42.360
similar to what we talked about before with--

00:53:42.360 --> 00:53:44.160
I can't remember, but I said we're

00:53:44.160 --> 00:53:45.320
going to come back to this.

00:53:45.320 --> 00:53:46.720
So here it is again.

00:53:46.720 --> 00:53:50.480
This is dependency confusion, where

00:53:50.480 --> 00:53:53.800
if you get the wrong version or the wrong name,

00:53:53.800 --> 00:53:56.360
it could actually-- you try to be safe by having

00:53:56.360 --> 00:53:58.720
a whitelisted list.

00:53:58.720 --> 00:54:00.920
>>Nick: Well, so this is one where

00:54:00.920 --> 00:54:05.120
it's the same package name, different source of where

00:54:05.120 --> 00:54:06.320
you acquire that package.

00:54:06.320 --> 00:54:06.880
>>Mark: Yes.

00:54:06.880 --> 00:54:07.600
>>Nick: So this is--

00:54:07.600 --> 00:54:14.200
these attacks are mostly like companies, enterprises.

00:54:14.200 --> 00:54:15.760
>>Mark: This is the enterprise attack.

00:54:15.760 --> 00:54:16.600
>>Nick: Yeah, yeah.

00:54:16.600 --> 00:54:17.080
So--

00:54:17.080 --> 00:54:19.080
>>Mark: We're using artifactory, and we only

00:54:19.080 --> 00:54:20.680
put our stuff there.

00:54:20.680 --> 00:54:25.280
And we're going to call it like international company

00:54:25.280 --> 00:54:27.000
underscore data access.

00:54:27.000 --> 00:54:28.200
>>Nick: That's right.

00:54:28.200 --> 00:54:33.520
And it's tricky, because if you don't know--

00:54:33.520 --> 00:54:35.800
if you don't have your build system set up in a way,

00:54:35.800 --> 00:54:38.600
and then your CI server set up in a way

00:54:38.600 --> 00:54:41.600
to install your dependencies in the proper order,

00:54:41.600 --> 00:54:44.840
like excluding public registries first

00:54:44.840 --> 00:54:48.320
and only looking for packages in your private registry,

00:54:48.320 --> 00:54:50.760
then it's very easy, especially with pip,

00:54:50.760 --> 00:54:53.880
which defaults to looking on PyPI, the public registry,

00:54:53.880 --> 00:54:58.320
first, and then only falling back to your extra index

00:54:58.320 --> 00:55:02.560
URL specifications secondly.

00:55:02.560 --> 00:55:07.240
That if someone had the knowledge or just guessed

00:55:07.240 --> 00:55:09.560
at the package name that you had published

00:55:09.560 --> 00:55:12.200
on your internal registry, and then they made their own package

00:55:12.200 --> 00:55:14.520
with the same name, but put it on PIPI,

00:55:14.520 --> 00:55:17.480
that's the one that's going to get installed.

00:55:17.480 --> 00:55:21.840
And there was a whole series of bug bounties

00:55:21.840 --> 00:55:25.600
that were claimed over this back a few years ago,

00:55:25.600 --> 00:55:28.320
because people just went around guessing

00:55:28.320 --> 00:55:29.840
at internal package names.

00:55:29.840 --> 00:55:32.560
Or maybe they used to work there or knew people--

00:55:32.560 --> 00:55:33.360
>>Dylan: Yeah, yeah.

00:55:33.360 --> 00:55:35.800
I'll give you 100 bucks just to share your quorum

00:55:35.800 --> 00:55:36.960
at sot.txt with me.

00:55:36.960 --> 00:55:39.040
>>Nick: Right, right, right, right.

00:55:39.040 --> 00:55:43.880
>>Dylan: You know, it's kind of--

00:55:43.880 --> 00:55:48.800
it's extra sneaky, because it only affects people--

00:55:48.800 --> 00:55:53.280
it only affects people who are going out of their way

00:55:53.280 --> 00:55:54.520
to be more secure, right?

00:55:54.520 --> 00:55:56.160
They're going out of their way to say,

00:55:56.160 --> 00:55:58.360
we're only going to-- we're going to actually set up

00:55:58.360 --> 00:56:01.440
a whole server, and we're going to whitelist a bunch of stuff.

00:56:01.440 --> 00:56:05.040
You can only ask for the names of the things on this server.

00:56:05.040 --> 00:56:06.160
>>Nick: Yes, yes.

00:56:06.160 --> 00:56:10.120
And that might still work if you limit it

00:56:10.120 --> 00:56:14.080
to your internal registry only, or a mirror, perhaps,

00:56:14.080 --> 00:56:18.640
of the public registries.

00:56:18.640 --> 00:56:19.880
What do you think about that?

00:56:19.880 --> 00:56:22.960
It's pretty easy to create your own internal copy,

00:56:22.960 --> 00:56:26.000
download a bunch of external ones,

00:56:26.000 --> 00:56:27.440
and mirror them locally, and say,

00:56:27.440 --> 00:56:30.520
these are the ones that are pre-approved at our company.

00:56:30.520 --> 00:56:31.680
Nothing else.

00:56:31.680 --> 00:56:32.840
>>Dylan: Yeah, yeah.

00:56:32.840 --> 00:56:35.760
I've worked in an environment where

00:56:35.760 --> 00:56:37.160
that's exactly what we did.

00:56:37.160 --> 00:56:39.720
And I think there is merit to that.

00:56:39.720 --> 00:56:42.480
You just have to know that anything

00:56:42.480 --> 00:56:45.400
you're mirroring to the trusted internal network

00:56:45.400 --> 00:56:48.480
is, in fact, secure.

00:56:48.480 --> 00:56:51.400
Yeah, yeah, for sure.

00:56:51.400 --> 00:56:54.480
I think it doesn't really make sense,

00:56:54.480 --> 00:56:57.400
except for a few very rare cases to say you cannot

00:56:57.400 --> 00:57:00.480
use external dependencies.

00:57:00.480 --> 00:57:03.640
You're just saying, what we want is to not build software,

00:57:03.640 --> 00:57:06.520
but while the rest of the world does.

00:57:06.520 --> 00:57:08.240
Because that's part of the magic.

00:57:08.240 --> 00:57:10.520
We just saw there's over half a million libraries

00:57:10.520 --> 00:57:11.760
you can choose from.

00:57:11.760 --> 00:57:13.840
When you say we have zero of those,

00:57:13.840 --> 00:57:16.440
you're really, really constraining

00:57:16.440 --> 00:57:20.280
the type of software and the velocity at which you can build.

00:57:20.280 --> 00:57:22.040
>>Mark: Yeah, yeah.

00:57:22.040 --> 00:57:26.200
Yeah, it reminds me of that line,

00:57:26.200 --> 00:57:29.640
like, why do you rob banks?

00:57:29.640 --> 00:57:30.920
>>Dylan: Because they have the money?

00:57:30.920 --> 00:57:32.200
>>Mark: Because that's where the money is, right?

00:57:32.200 --> 00:57:34.040
It's like, well, why do attackers--

00:57:34.040 --> 00:57:37.040
why are attackers going after open source software now?

00:57:37.040 --> 00:57:40.240
It's like, well, that's where it's easiest

00:57:40.240 --> 00:57:42.720
to get arbitrary code to run.

00:57:42.720 --> 00:57:44.640
That's where developers are.

00:57:44.640 --> 00:57:46.480
To be fair, though, it's not only--

00:57:46.480 --> 00:57:49.400
it's not only, right, there's SolarWinds, which really

00:57:49.400 --> 00:57:51.160
had almost nothing to do with open source,

00:57:51.160 --> 00:57:54.680
but it had to do with CI/CD systems and other sneakiness,

00:57:54.680 --> 00:57:55.200
right?

00:57:55.200 --> 00:57:56.160
>>Dylan: Yeah, yeah.

00:57:56.160 --> 00:58:00.520
>>Mark: Yeah, and got into places that, you know,

00:58:00.520 --> 00:58:02.120
instead of getting into libraries,

00:58:02.120 --> 00:58:03.360
you get into the build system.

00:58:03.360 --> 00:58:08.880
And you just give it a little extra include tag there.

00:58:08.880 --> 00:58:10.920
Bringing that DLL, like you said, right?

00:58:10.920 --> 00:58:12.760
So dependency and confusion is sneaky,

00:58:12.760 --> 00:58:14.920
because you're asking for a local version

00:58:14.920 --> 00:58:16.040
off a local server.

00:58:16.040 --> 00:58:17.560
It doesn't exist on PyPI.

00:58:17.560 --> 00:58:20.920
But if it could be made to exist on PyPI, all of a sudden,

00:58:20.920 --> 00:58:22.680
that gets installed.

00:58:22.680 --> 00:58:23.920
Potentially, that's not good.

00:58:23.920 --> 00:58:25.040
>>Dylan: Potentially, yeah.

00:58:25.040 --> 00:58:29.160
Yeah, that's how it works in all the default cases.

00:58:29.160 --> 00:58:33.200
And it's pretty tricky, actually, to exclude--

00:58:33.200 --> 00:58:34.440
[LAUGHS]

00:58:34.440 --> 00:58:36.160
--to do it in the correct order and exclude

00:58:36.160 --> 00:58:37.680
those public registries.

00:58:37.680 --> 00:58:42.360
>>Mark: Yeah, what I do to help this is I just

00:58:42.360 --> 00:58:47.120
run the uuid command to get one of those 16-digit arbitrary hex

00:58:47.120 --> 00:58:47.800
things.

00:58:47.800 --> 00:58:49.400
And I just name all my libraries that.

00:58:49.400 --> 00:58:53.800
And so it's like, oh, you have the F3DC.

00:58:53.800 --> 00:58:55.320
That's the API one.

00:58:55.320 --> 00:58:55.960
That's right.

00:58:55.960 --> 00:58:56.800
Import that, right?

00:58:56.800 --> 00:58:58.600
No one is going to do this.

00:58:58.600 --> 00:59:00.320
It's such a safe space, I tell you.

00:59:00.320 --> 00:59:02.040
[LAUGHS]

00:59:02.040 --> 00:59:03.240
All right, on to the next one.

00:59:03.240 --> 00:59:06.680
>>Dylan: Yeah, that would work.

00:59:06.680 --> 00:59:08.160
>>Mark: Expired author domains.

00:59:08.160 --> 00:59:10.000
This is super sneaky.

00:59:10.000 --> 00:59:10.960
>>Dylan: Yeah, yeah.

00:59:10.960 --> 00:59:12.760
So this is one--

00:59:12.760 --> 00:59:20.400
it might be less of a factor now.

00:59:20.400 --> 00:59:22.680
I think it was just earlier this month

00:59:22.680 --> 00:59:25.720
that PyPI enforced two-factor authentication

00:59:25.720 --> 00:59:28.680
for all their users.

00:59:28.680 --> 00:59:39.480
But a lot of sites and even PyPI, I think, before this month

00:59:39.480 --> 00:59:42.120
have password reset features, where

00:59:42.120 --> 00:59:44.080
if you lose access to your account

00:59:44.080 --> 00:59:47.360
or you forget your password, just send me an email.

00:59:47.360 --> 00:59:49.560
Reset your password.

00:59:49.560 --> 00:59:56.560
But it's very possible that people years ago submitted

00:59:56.560 --> 00:59:57.600
a package.

00:59:57.600 --> 00:59:59.360
They don't maintain it anymore.

00:59:59.360 --> 01:00:02.520
They submitted it under an old email account

01:00:02.520 --> 01:00:04.320
that has expired, right?

01:00:04.320 --> 01:00:04.840
Maybe they--

01:00:04.840 --> 01:00:06.840
>>Mark: They had some domain.

01:00:06.840 --> 01:00:07.640
>>Dylan: Yeah.

01:00:07.640 --> 01:00:10.960
It doesn't work that well for Gmail or Outlook.

01:00:10.960 --> 01:00:11.840
>>Mark: Right, right.

01:00:11.840 --> 01:00:12.840
Custom domain.

01:00:12.840 --> 01:00:15.080
>>Dylan: If you had a custom domain,

01:00:15.080 --> 01:00:19.520
as would be awesome, have your own Michael@talkpython.fm,

01:00:19.520 --> 01:00:20.480
that kind of thing.

01:00:20.480 --> 01:00:21.480
>>Mark: Yeah, yeah.

01:00:21.480 --> 01:00:24.600
Say you win the lottery and--

01:00:24.600 --> 01:00:25.360
>>Dylan: I'm out.

01:00:25.360 --> 01:00:25.880
Beach time.

01:00:25.880 --> 01:00:26.400
>>Mark: --put your page up.

01:00:26.400 --> 01:00:28.320
Yeah, and then you let your domain expire.

01:00:28.320 --> 01:00:33.560
And well, maybe there's still a linkage for the Talk Python

01:00:33.560 --> 01:00:35.680
domain to PyPI.

01:00:35.680 --> 01:00:37.240
And then I go and buy that domain.

01:00:37.240 --> 01:00:39.040
And request password.

01:00:39.040 --> 01:00:40.200
>>Dylan: Set up some server.

01:00:40.200 --> 01:00:40.720
Yeah.

01:00:40.720 --> 01:00:41.520
>>Mark: Account reset.

01:00:41.520 --> 01:00:42.440
>>Dylan: Set up email.

01:00:42.440 --> 01:00:45.840
>>Mark: Yeah, and then now I can publish new versions

01:00:45.840 --> 01:00:48.520
of the packages there.

01:00:48.520 --> 01:00:50.440
>>Dylan: Yeah, yeah, it's not good.

01:00:50.440 --> 01:00:51.640
>>Mark: Yeah.

01:00:51.640 --> 01:00:53.640
>>Dylan: Yeah, so I don't really know

01:00:53.640 --> 01:00:54.680
what to do about that one.

01:00:54.680 --> 01:00:59.760
But there's an amazing joke that I found on Mastodon.

01:00:59.760 --> 01:01:03.920
Somebody posted-- see here.

01:01:03.920 --> 01:01:05.640
It's two big red buttons.

01:01:05.640 --> 01:01:07.320
Think Ren and Stimpy or whatever.

01:01:07.320 --> 01:01:09.880
And one of the red buttons says, admit to yourself

01:01:09.880 --> 01:01:11.360
that your dream is dead.

01:01:11.360 --> 01:01:17.040
The other one says, pay $12 for domain renewal, right?

01:01:17.040 --> 01:01:18.120
I mean, it's funny.

01:01:18.120 --> 01:01:20.360
But there's plenty of people who will get a domain.

01:01:20.360 --> 01:01:22.120
I'm going to totally go-- and then they're just like,

01:01:22.120 --> 01:01:22.800
you know what?

01:01:22.800 --> 01:01:24.960
I haven't done anything with that for like five years.

01:01:24.960 --> 01:01:26.360
I'm not paying another $12.

01:01:26.360 --> 01:01:28.920
But if they had set up an account under that,

01:01:28.920 --> 01:01:31.480
this is what you're talking about.

01:01:31.480 --> 01:01:32.000
Yeah.

01:01:32.000 --> 01:01:34.240
>>Mark: Yeah, yeah, exactly.

01:01:34.240 --> 01:01:37.560
That's why you got to buy your domains for that 100 year

01:01:37.560 --> 01:01:38.680
renewal period.

01:01:38.680 --> 01:01:39.720
>>Dylan: Exactly.

01:01:39.720 --> 01:01:41.360
Take out that loan.

01:01:41.360 --> 01:01:42.200
You get your domain.

01:01:42.200 --> 01:01:44.560
[LAUGHTER]

01:01:44.560 --> 01:01:45.200
All right.

01:01:45.200 --> 01:01:46.600
We're getting short on time here.

01:01:46.600 --> 01:01:48.120
Let's just go through.

01:01:48.120 --> 01:01:49.800
I'll just list off a few real quick.

01:01:49.800 --> 01:01:51.320
Maybe we do light and round, OK?

01:01:51.320 --> 01:01:53.040
Unverifiable dependency.

01:01:53.040 --> 01:01:58.120
>>Mark: OK, these are for specifying dependencies

01:01:58.120 --> 01:02:02.920
that are not necessarily published to PyPI, right?

01:02:02.920 --> 01:02:08.720
So that maybe you're pointing to a GitHub repository.

01:02:08.720 --> 01:02:12.720
Pip calls these VCS project URLs,

01:02:12.720 --> 01:02:14.960
if you look in their help output.

01:02:14.960 --> 01:02:18.320
>>Dylan: Yeah, it's like pip installed Git plus HTTP

01:02:18.320 --> 01:02:20.080
to a thing that has a PyPI project on it.

01:02:20.080 --> 01:02:20.920
>>Mark: Yeah, exactly.

01:02:20.920 --> 01:02:23.760
And that thing, it can point to a repository.

01:02:23.760 --> 01:02:25.080
Maybe it points to a tag.

01:02:25.080 --> 01:02:28.880
Maybe it points to a branch.

01:02:28.880 --> 01:02:32.760
None of that is stable, right?

01:02:32.760 --> 01:02:34.400
The tag could change out from under you.

01:02:34.400 --> 01:02:37.360
The code that's related to that tag

01:02:37.360 --> 01:02:38.680
could change out from under you.

01:02:38.680 --> 01:02:40.480
The code at the branch you're pointing to

01:02:40.480 --> 01:02:43.840
could change while the name remains the same.

01:02:43.840 --> 01:02:47.200
So those are risky for that reason, right?

01:02:47.200 --> 01:02:49.440
If you're not pinning to a very specific version

01:02:49.440 --> 01:02:51.880
or a very specific hash, if you're

01:02:51.880 --> 01:02:54.880
going to point to a repository or a Git URL--

01:02:54.880 --> 01:02:55.760
>>Dylan: Interesting.

01:02:55.760 --> 01:02:56.680
>>Mark: Yeah, make sure it's true.

01:02:56.680 --> 01:02:58.220
>>Dylan: I kind of feel a lot of times

01:02:58.220 --> 01:03:00.880
like the hash is maybe a little bit redundant given

01:03:00.880 --> 01:03:02.240
the immutability of PyPI.

01:03:02.240 --> 01:03:03.520
But if you're pointing at something like this,

01:03:03.520 --> 01:03:05.520
then maybe all of a sudden you really, really

01:03:05.520 --> 01:03:07.440
do want that for sure.

01:03:07.440 --> 01:03:09.200
OK.

01:03:09.200 --> 01:03:11.200
Repo jacking?

01:03:11.200 --> 01:03:17.160
>>Mark: Yeah, this is similar to the expired author domain.

01:03:17.160 --> 01:03:20.680
So if someone was pointing to one of those Git dependencies,

01:03:20.680 --> 01:03:24.200
a VCS project URL, as pip calls it,

01:03:24.200 --> 01:03:31.080
and that account went dormant or expired, relinquished,

01:03:31.080 --> 01:03:35.640
whatever, and someone else took it over, then yeah,

01:03:35.640 --> 01:03:38.920
they can now change--

01:03:38.920 --> 01:03:40.080
>>Dylan: What's there, yeah.

01:03:40.080 --> 01:03:41.000
>>Mark: Yeah, exactly.

01:03:41.000 --> 01:03:43.000
A lot of people are requiring.

01:03:43.000 --> 01:03:43.760
>>Dylan: All right.

01:03:43.760 --> 01:03:45.920
And then maybe last bit, get a chance

01:03:45.920 --> 01:03:50.520
to talk a bit about your Phylum CI project.

01:03:50.520 --> 01:03:53.120
I do want to point out really quick, though, that Phylum

01:03:53.120 --> 01:03:55.880
was a sponsor of the show a while ago.

01:03:55.880 --> 01:03:58.000
But this is not a sponsored episode.

01:03:58.000 --> 01:04:00.400
This is just-- you and I had been talking prior to that,

01:04:00.400 --> 01:04:03.120
actually, and decided to put this show together.

01:04:03.120 --> 01:04:05.960
So just to be clear, but let's talk about this project

01:04:05.960 --> 01:04:07.760
you guys got anyway.

01:04:07.760 --> 01:04:08.520
>>Mark: Yeah, yeah.

01:04:08.520 --> 01:04:10.240
So you can pip install Phylum right now,

01:04:10.240 --> 01:04:14.720
or like I prefer, pipx, pipx install Phylum.

01:04:14.720 --> 01:04:16.240
>>Dylan: Yeah, I love pipx.

01:04:16.240 --> 01:04:16.880
It's awesome.

01:04:16.880 --> 01:04:17.680
>>Mark: Yeah, me too.

01:04:17.680 --> 01:04:19.040
Yeah.

01:04:19.040 --> 01:04:22.800
I think I heard about it from you, actually.

01:04:22.800 --> 01:04:24.120
>>Dylan: So the circle goes.

01:04:24.120 --> 01:04:24.840
>>Mark: Yes, yes.

01:04:24.840 --> 01:04:27.440
So this package, it does two main things.

01:04:27.440 --> 01:04:31.240
One is it exposes two entry points.

01:04:31.240 --> 01:04:33.680
One of them is called Phylum init.

01:04:33.680 --> 01:04:38.280
And that'll get you the Phylum command line

01:04:38.280 --> 01:04:42.320
interface written in Rust, but installed with Python.

01:04:42.320 --> 01:04:48.480
It'll get you the Phylum CLI locally.

01:04:48.480 --> 01:04:51.280
And then the other one is called Phylum CI.

01:04:51.280 --> 01:04:53.160
That's just a catch-all entry point,

01:04:53.160 --> 01:04:56.000
the thing that gets exposed through our Docker container

01:04:56.000 --> 01:05:00.280
to handle almost all of our integrations.

01:05:00.280 --> 01:05:05.960
So if you want to monitor your PRs on GitHub, for instance,

01:05:05.960 --> 01:05:07.920
we've got an integration for that.

01:05:07.920 --> 01:05:09.640
>>Dylan: So the idea is basically

01:05:09.640 --> 01:05:11.760
that I could set this up in GitHub.

01:05:11.760 --> 01:05:13.960
A PR comes in, I could set up an action.

01:05:13.960 --> 01:05:18.480
Phylum will scan it for known mischievousness.

01:05:18.480 --> 01:05:19.360
>>Mark: That's right.

01:05:19.360 --> 01:05:21.120
>>Dylan: And make that part of the PR,

01:05:21.120 --> 01:05:22.480
maybe even block it out, right?

01:05:22.480 --> 01:05:23.360
>>Mark: Yeah, exactly.

01:05:23.360 --> 01:05:28.000
It'll fail your build if you don't pass your default policy

01:05:28.000 --> 01:05:33.120
or established policy on any of your given

01:05:33.120 --> 01:05:34.280
lock files or manifests.

01:05:34.280 --> 01:05:36.080
We deal with manifests as well.

01:05:36.080 --> 01:05:37.080
And you mentioned GitHub.

01:05:37.080 --> 01:05:39.480
So even with GitHub, we went a step further.

01:05:39.480 --> 01:05:40.920
We have an app as well.

01:05:40.920 --> 01:05:43.040
So you don't even have to modify a workflow.

01:05:43.040 --> 01:05:44.400
You could just install a GitHub app

01:05:44.400 --> 01:05:49.960
and automatically monitor your repositories.

01:05:49.960 --> 01:05:53.560
But a lot of the other ecosystems don't have that.

01:05:53.560 --> 01:05:56.840
So we just provide Docker containers.

01:05:56.840 --> 01:05:58.320
>>Dylan: I love the Docker container.

01:05:58.320 --> 01:06:03.160
So you use Docker run against your code or whatever.

01:06:03.160 --> 01:06:03.760
So--

01:06:03.760 --> 01:06:05.120
>>Mark: Yeah.

01:06:05.120 --> 01:06:10.480
And then there's even a pre-commit hook we expose as well.

01:06:10.480 --> 01:06:11.360
>>Dylan: That is nice.

01:06:11.360 --> 01:06:11.840
>>Mark: So you can--

01:06:11.840 --> 01:06:12.520
>>Dylan: Nice.

01:06:12.520 --> 01:06:15.320
I genuinely don't know the answer to this question.

01:06:15.320 --> 01:06:16.680
Does this cost money?

01:06:16.680 --> 01:06:17.680
>>Mark: No.

01:06:17.680 --> 01:06:21.640
We have-- anyone can sign up for free.

01:06:21.640 --> 01:06:25.280
There's a community edition where you

01:06:25.280 --> 01:06:27.640
can have up to five projects.

01:06:27.640 --> 01:06:28.440
>>Dylan: OK, cool.

01:06:28.440 --> 01:06:29.560
You guys have to eat there.

01:06:29.560 --> 01:06:30.960
It must be some way you charge for--

01:06:30.960 --> 01:06:31.560
>>Mark: Oh, exactly.

01:06:31.560 --> 01:06:32.120
Yeah, yeah.

01:06:32.120 --> 01:06:36.600
So there's the paid version, which unlimited projects.

01:06:36.600 --> 01:06:39.600
You get access to group-based management.

01:06:39.600 --> 01:06:40.800
There's a few extra features.

01:06:40.800 --> 01:06:41.760
It's a freemium model.

01:06:41.760 --> 01:06:44.960
>>Dylan: More of a Teams, enterprise-y angle.

01:06:44.960 --> 01:06:45.760
>>Mark: Yeah, yeah.

01:06:45.760 --> 01:06:50.200
For this audience, I would love if everyone just

01:06:50.200 --> 01:06:52.480
went that little extra step of securing

01:06:52.480 --> 01:06:56.480
their open source software and go with the free option.

01:06:56.480 --> 01:07:00.080
I'm not trying to sell you anything here.

01:07:00.080 --> 01:07:03.560
Just monitor your manifest, your lock files.

01:07:03.560 --> 01:07:05.720
Make sure that you remain secure.

01:07:05.720 --> 01:07:08.080
You're not exposing your secrets.

01:07:08.080 --> 01:07:10.400
Because that's what we're finding now,

01:07:10.400 --> 01:07:14.200
is that developers are the new high-value targets.

01:07:14.200 --> 01:07:15.840
That's what attackers want to go after,

01:07:15.840 --> 01:07:18.440
because we know that developers, they have the secrets.

01:07:18.440 --> 01:07:20.680
They've got the keys.

01:07:20.680 --> 01:07:22.320
>>Dylan: We write the code that then

01:07:22.320 --> 01:07:26.480
gets run on the production server inside the firewalls.

01:07:26.480 --> 01:07:27.560
>>Mark: Yeah, yeah.

01:07:27.560 --> 01:07:31.160
We have all the access, all the secrets, all the keys.

01:07:31.160 --> 01:07:37.960
So if you can find a way to get arbitrary code from strangers

01:07:37.960 --> 01:07:39.560
to run on developer systems, you're

01:07:39.560 --> 01:07:41.200
going to have a much better chance of--

01:07:41.200 --> 01:07:42.400
>>Dylan: We have a good time.

01:07:42.400 --> 01:07:44.680
>>Mark: We have a good time.

01:07:44.680 --> 01:07:46.200
By that, I mean having a bad time.

01:07:46.200 --> 01:07:46.960
>>Dylan: Right.

01:07:46.960 --> 01:07:47.920
>>Mark: Yeah.

01:07:47.920 --> 01:07:48.880
Doing bad things.

01:07:48.880 --> 01:07:49.640
OK.

01:07:49.640 --> 01:07:50.800
Let's not do that.

01:07:50.800 --> 01:07:51.300
Awesome.

01:07:51.300 --> 01:07:52.200
Well, excellent work.

01:07:52.200 --> 01:07:54.320
I think probably we'll just leave it there.

01:07:54.320 --> 01:07:56.600
We're pretty much out of time for the rest of the stuff.

01:07:56.600 --> 01:08:01.240
But close it out for us, Charlie.

01:08:01.240 --> 01:08:05.080
People maybe both have a few new tools to work with,

01:08:05.080 --> 01:08:07.880
but also techniques, but maybe also a little freaked out.

01:08:07.880 --> 01:08:08.960
What do you tell them?

01:08:08.960 --> 01:08:11.440
>>Charlie: I recommend everyone to restrict

01:08:11.440 --> 01:08:15.320
their use of dependencies to lock files.

01:08:15.320 --> 01:08:21.040
And then carefully gate or guard the inclusion of new lock

01:08:21.040 --> 01:08:23.200
files or updates of existing ones--

01:08:23.200 --> 01:08:25.520
or sorry, dependencies in those lock files

01:08:25.520 --> 01:08:29.200
with careful analysis.

01:08:29.200 --> 01:08:31.040
Don't allow arbitrary code to run anywhere

01:08:31.040 --> 01:08:32.240
in your development process.

01:08:32.240 --> 01:08:33.920
And give filing a try.

01:08:33.920 --> 01:08:35.920
We've got the free Community Edition.

01:08:35.920 --> 01:08:38.600
We will provide that analysis and ensure

01:08:38.600 --> 01:08:42.680
that you don't have malware running on your system

01:08:42.680 --> 01:08:44.440
through bad dependencies.

01:08:44.440 --> 01:08:45.560
>>Dylan: Awesome.

01:08:45.560 --> 01:08:47.840
All right, well, it's been very interesting

01:08:47.840 --> 01:08:49.760
and a lot of new things to think about.

01:08:49.760 --> 01:08:51.160
So thanks for being here.

01:08:51.160 --> 01:08:52.440
>>Charlie: Thank you, Michael.

01:08:52.440 --> 01:08:53.600
>>Dylan: Yeah, see you later.

01:08:53.600 --> 01:08:55.160
>>Charlie: Bye.

