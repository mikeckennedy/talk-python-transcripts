WEBVTT

00:00:00.000 --> 00:00:06.000
Hey, guys. Welcome back to Talk Python To Me.


00:00:06.000 --> 00:00:08.000
>> Thanks, Michael.


00:00:08.000 --> 00:00:10.000
>> Hey.


00:00:10.000 --> 00:00:13.000
>> Yeah, Fabio, Nicholas, Brett, it's really great to have you all here.


00:00:13.000 --> 00:00:18.000
And I know you are all very excited about this topic.


00:00:18.000 --> 00:00:28.000
Brett, I believe the last pre-COVID PyCon, we did a live on the expo floor show about WebAssembly.


00:00:28.000 --> 00:00:29.600
- We did.


00:00:29.600 --> 00:00:32.220
- Yeah, Fabio, we recently talked about PyScripts


00:00:32.220 --> 00:00:34.520
and Nicholas, you're right in there as well,


00:00:34.520 --> 00:00:39.520
working on WebAssembly, Pyodide, PyScripts stuff as well.


00:00:39.520 --> 00:00:42.760
So I know a lot of people know all of you,


00:00:42.760 --> 00:00:43.920
but maybe let's just kick it off


00:00:43.920 --> 00:00:47.240
with a quick round of introductions and background,


00:00:47.240 --> 00:00:49.780
not too deep since we've all done it before.


00:00:49.780 --> 00:00:52.440
Brett, let's go with you first.


00:00:52.440 --> 00:00:54.840
- Okay, keep it short.


00:00:54.840 --> 00:00:57.800
I am the dev manager in charge of the Python experience


00:00:57.800 --> 00:01:01.040
been a core developer for 19 years,


00:01:01.040 --> 00:01:03.320
been on the Python steering Council since


00:01:03.320 --> 00:01:05.680
Guido's retirement and I'll stop there.


00:01:05.680 --> 00:01:09.800
Yeah. Fabio.


00:01:09.800 --> 00:01:17.080
So I'm creative by script current.


00:01:17.080 --> 00:01:19.760
Maintainer with Nicholas been working


00:01:19.760 --> 00:01:23.640
with for an icon to four years now.


00:01:23.640 --> 00:01:26.480
Right now I'm tech lead for for


00:01:26.480 --> 00:01:30.360
and been doing a lot of community stuff


00:01:30.360 --> 00:01:32.360
around Python for a long time as well.


00:01:32.360 --> 00:01:34.440
- Yeah, fantastic.


00:01:34.440 --> 00:01:37.400
PyScript was the big news out of PyCon last year.


00:01:37.400 --> 00:01:39.320
That I think caught a lot of people by surprise


00:01:39.320 --> 00:01:43.400
and people were very excited about that, including myself.


00:01:43.400 --> 00:01:46.400
- Yeah, I'm very excited and yeah,


00:01:46.400 --> 00:01:49.240
got a lot of attention for good and bad, right?


00:01:49.240 --> 00:01:52.080
(both laughing)


00:01:52.080 --> 00:01:54.520
- Well, it's gonna get some more attention today.


00:01:54.520 --> 00:01:55.580
- Yeah, hopefully.


00:01:55.580 --> 00:01:56.820
(laughing)


00:01:56.820 --> 00:01:59.540
- Indeed, Nicholas, welcome.


00:01:59.540 --> 00:02:03.980
- Hi, so yeah, I'm a colleague of Fabio's.


00:02:03.980 --> 00:02:06.280
I'm a principal engineer on the PyScript team.


00:02:06.280 --> 00:02:10.020
Prior to joining Anaconda in the summer,


00:02:10.020 --> 00:02:13.180
I'd been a Pythonista for far too many years,


00:02:13.180 --> 00:02:15.100
and I care to remember.


00:02:15.100 --> 00:02:17.780
Before that, I was a teacher,


00:02:17.780 --> 00:02:21.660
and before that, I was a classically trained musician.


00:02:22.500 --> 00:02:26.580
And that probably explains my interest in Python


00:02:26.580 --> 00:02:30.220
in education and the activities that I still do


00:02:30.220 --> 00:02:31.300
in that sphere.


00:02:31.300 --> 00:02:32.820
So that's me.


00:02:32.820 --> 00:02:33.660
- That's fantastic.


00:02:33.660 --> 00:02:35.900
You were involved with the BBC micro bit, right?


00:02:35.900 --> 00:02:40.740
- Yes, I was involved with the BBC micro bit.


00:02:40.740 --> 00:02:43.860
- Yeah, absolutely.


00:02:43.860 --> 00:02:45.580
Yeah, that's awesome.


00:02:45.580 --> 00:02:46.580
And we talked about that before.


00:02:46.580 --> 00:02:47.540
Okay.


00:02:47.540 --> 00:02:52.540
Well, let's talk about running Python in the browser.


00:02:52.540 --> 00:02:56.340
There've been some attempts before


00:02:56.340 --> 00:02:59.100
and those attempts are still used in different places.


00:02:59.100 --> 00:03:03.020
I'm thinking of like Brython and Sculpt


00:03:03.020 --> 00:03:04.440
and those types of things.


00:03:04.440 --> 00:03:10.740
Anyone who has seen the birth and death of JavaScript,


00:03:10.740 --> 00:03:13.040
that famous 15 minute talk,


00:03:13.040 --> 00:03:16.460
which has gotta be one of the most hilarious


00:03:16.460 --> 00:03:19.160
and yet insightful, like educational,


00:03:19.160 --> 00:03:22.480
the foundations of the web and JavaScript


00:03:22.480 --> 00:03:27.100
and what became WebAssembly talks of all time


00:03:27.100 --> 00:03:28.500
is really great.


00:03:28.500 --> 00:03:30.620
And I think those kind of land in that realm.


00:03:30.620 --> 00:03:32.800
But since then, as we started,


00:03:32.800 --> 00:03:39.040
WebAssembly has allowed us to bring real run times,


00:03:39.040 --> 00:03:41.120
mostly things based on C or Rust,


00:03:41.120 --> 00:03:43.640
but older things are based on C,


00:03:43.640 --> 00:03:45.280
into the browser and run there.


00:03:45.280 --> 00:03:50.280
So who wants to sort of introduce this whole idea


00:03:50.280 --> 00:03:53.400
of WebAssembly quickly for those who don't necessarily know


00:03:53.400 --> 00:03:54.480
and sort of set the stage


00:03:54.480 --> 00:03:56.380
so people see where we're coming from?


00:03:56.380 --> 00:03:59.900
- All right, I'll take it.


00:03:59.900 --> 00:04:03.120
So you can kind of think of WebAssembly


00:04:03.120 --> 00:04:07.480
as almost a portable CPU, right?


00:04:07.480 --> 00:04:10.160
It's technically an instruction sets


00:04:10.160 --> 00:04:12.680
that basically is almost like assembly designed


00:04:12.680 --> 00:04:14.160
to just run anywhere.


00:04:14.160 --> 00:04:17.640
It's all abstracted, it's technically stack-based,


00:04:17.640 --> 00:04:19.800
much like CPython's interpreter,


00:04:19.800 --> 00:04:21.800
for those of you who wanna know


00:04:21.800 --> 00:04:24.500
insider baseball knowledge or insider football.


00:04:24.500 --> 00:04:27.400
But that's basically it.


00:04:27.400 --> 00:04:30.300
WebAssembly is really just a portable target


00:04:30.300 --> 00:04:32.700
to compile stuff for that more or less


00:04:32.700 --> 00:04:36.160
you make a runtime work for that target


00:04:36.160 --> 00:04:38.080
and it gets run everywhere.


00:04:38.080 --> 00:04:39.480
There's more details we can get into


00:04:39.480 --> 00:04:43.840
in terms of WASM versus WASI and platform-specific stuff,


00:04:43.840 --> 00:04:47.000
that the core base low level thing underpinning


00:04:47.000 --> 00:04:49.360
all of our discussion today is WebAssembly,


00:04:49.360 --> 00:04:51.660
which is basically just a portable CPU target.


00:04:51.660 --> 00:04:55.260
- Yeah, okay, excellent.


00:04:55.260 --> 00:04:59.480
And CPython, I guess as the name would very strongly


00:04:59.480 --> 00:05:01.040
indicate, although people might not know,


00:05:01.040 --> 00:05:04.040
is largely C at its core.


00:05:04.040 --> 00:05:07.000
It's not Python code.


00:05:07.000 --> 00:05:09.760
Some of the standard library is, but not,


00:05:09.760 --> 00:05:13.360
you know, at the heart, there's an insane switch statement


00:05:13.360 --> 00:05:16.560
- Wow, Luke, that is written in C.


00:05:16.560 --> 00:05:19.560
And so that, if we can get that into WebAssembly,


00:05:19.560 --> 00:05:23.060
then we can get Python, the runtime, into the browser.


00:05:23.060 --> 00:05:25.160
- Correct.


00:05:25.160 --> 00:05:27.600
Technically, as long as you can compile


00:05:27.600 --> 00:05:29.640
whatever language you want to WebAssembly,


00:05:29.640 --> 00:05:30.560
that's how we get it in.


00:05:30.560 --> 00:05:33.240
And traditionally, the tool chains


00:05:33.240 --> 00:05:36.140
that have supported compiling data WebAssembly,


00:05:36.140 --> 00:05:39.240
either statically compiled languages


00:05:39.240 --> 00:05:43.480
that use something like Clang as a build toolchain,


00:05:43.480 --> 00:05:48.480
or which typically is fallen under C and C++, Rust,


00:05:48.480 --> 00:05:51.680
because once again, Rust is based off of Clang


00:05:51.680 --> 00:05:52.960
for their compiler.


00:05:52.960 --> 00:05:55.420
As long as your language could use a toolchain


00:05:55.420 --> 00:05:58.440
that already had this work to compile down to WebAssembly


00:05:58.440 --> 00:06:01.140
as a CPU architecture or target,


00:06:01.140 --> 00:06:02.760
you were able to get some WebAssembly.


00:06:02.760 --> 00:06:05.720
So in CPython's case, because it's implemented,


00:06:05.720 --> 00:06:10.760
The key parts are in C. That was able to be compiled down


00:06:10.760 --> 00:06:12.280
such that I can run some WebAssembly.


00:06:12.280 --> 00:06:14.760
Nicholas's work with MicroPython is the same.


00:06:14.760 --> 00:06:17.600
MicroPython is written mostly, I believe, in C as well.


00:06:17.600 --> 00:06:21.320
And so basically, that allowed both projects


00:06:21.320 --> 00:06:25.320
to basically just use a specific compiler with specific flags


00:06:25.320 --> 00:06:27.560
to just say, instead of writing out


00:06:27.560 --> 00:06:32.080
x64 assembly for my AMD or Intel chip or your ARM


00:06:32.080 --> 00:06:35.840
chip on your Mac, write me out some WebAssembly instead.


00:06:35.840 --> 00:06:39.760
- People's first impression when they hear this is like,


00:06:39.760 --> 00:06:43.800
oh my gosh, binary code executing the browser,


00:06:43.800 --> 00:06:45.400
run for your life, right?


00:06:45.400 --> 00:06:47.200
And it's really no different than JavaScript.


00:06:47.200 --> 00:06:50.400
It has the same permissions and liabilities


00:06:50.400 --> 00:06:53.860
and benefits of JavaScript, just different execution model.


00:06:53.860 --> 00:06:57.000
Yeah.


00:06:57.000 --> 00:06:57.840
- Yeah, it's the same soundbite.


00:06:57.840 --> 00:07:01.700
- Fabio, yeah, Nicholas, anything else you wanna add


00:07:01.700 --> 00:07:04.100
about WebAssembly to sort of set the stage here?


00:07:04.100 --> 00:07:10.100
- I think, yeah, overall, that's the core.


00:07:10.100 --> 00:07:15.000
There are a lot of nuances that comes with how it is.


00:07:15.000 --> 00:07:16.280
It's taught, right?


00:07:16.280 --> 00:07:19.720
One, it's still in a very young phase,


00:07:19.720 --> 00:07:22.120
despite all the usage and acceleration,


00:07:22.120 --> 00:07:23.580
everybody's excited about it.


00:07:23.580 --> 00:07:29.760
But as Brett said, it's mainly a portable CPU


00:07:30.180 --> 00:07:34.320
And it doesn't really come with the rest of what you would expect


00:07:34.320 --> 00:07:38.860
from an operating system, and especially like file system and things like this.


00:07:38.860 --> 00:07:44.520
So there's a lot of extra work that the larger community is trying to add now


00:07:44.520 --> 00:07:45.720
to figure things out.


00:07:45.720 --> 00:07:47.560
And...


00:07:47.560 --> 00:07:48.660
Oh, sorry, go ahead.


00:07:48.660 --> 00:07:50.020
- No, no, go for it, Fabio.


00:07:50.020 --> 00:07:55.720
- No, and the other small detail that I wanted to add is, yes,


00:07:55.720 --> 00:07:59.460
it's basically just like JavaScript on the browser.


00:07:59.920 --> 00:08:02.720
with the exception that some APIs are not available.


00:08:02.720 --> 00:08:05.960
For instance, access to DOM and other things like this.


00:08:05.960 --> 00:08:10.460
Yeah, I was going to say, it's worth pointing out that


00:08:10.460 --> 00:08:16.460
what Fabio was saying about it's not like having an operating system.


00:08:16.460 --> 00:08:19.460
There are projects, you know, Brett mentioned Wazze,


00:08:19.460 --> 00:08:20.960
there's also EndScript as well,


00:08:20.960 --> 00:08:24.300
which gives you abstractions of a file system and so on and so forth,


00:08:24.300 --> 00:08:25.960
such that you could,


00:08:26.960 --> 00:08:33.280
And it's always important to be wary when a developer uses the word just but one could just compile


00:08:33.280 --> 00:08:41.520
Python to wasm and it will just work in the browser. but of course to get that to happen


00:08:41.520 --> 00:08:46.720
um, it takes, rather a lot of work and


00:08:46.720 --> 00:08:54.080
Browser-based expertise to actually get you to for instance the uh python prompt, uh in a repl


00:08:54.080 --> 00:08:56.480
As it were right


00:08:56.480 --> 00:09:02.160
Which is why you know it wouldn't it be fun if there was some sort of project that got you to python in the browser


00:09:02.160 --> 00:09:04.400
Without having to do all of that boilerplate stuff


00:09:04.400 --> 00:09:09.440
Yeah, I wonder if we could find one of those, yeah


00:09:09.440 --> 00:09:14.800
I I one of the things we spoke about before brett was


00:09:14.800 --> 00:09:20.420
So much of what comes with python the batteries included the standard library


00:09:20.420 --> 00:09:23.840
Assumes a slightly larger


00:09:25.100 --> 00:09:29.080
execution environment than front end browser code, right?


00:09:29.080 --> 00:09:31.160
Like it assumes a file system.


00:09:31.160 --> 00:09:33.920
It assumes that you can probably open a network socket,


00:09:33.920 --> 00:09:36.200
these types of things, right?


00:09:36.200 --> 00:09:38.200
And so one of the challenges here is,


00:09:38.200 --> 00:09:40.560
well, if you can compile it down,


00:09:40.560 --> 00:09:43.660
that doesn't mean it's gonna be permitted to just


00:09:43.660 --> 00:09:46.600
take some code and jam in a webpage and run it, right?


00:09:46.600 --> 00:09:51.560
- Yeah, I mean, taking the CPU analogy, the next step,


00:09:51.560 --> 00:09:56.560
Like when you compile something down to a CPU for like x64,


00:09:56.560 --> 00:10:00.520
that's great, but how are you going to read a file system?


00:10:00.520 --> 00:10:02.800
That doesn't exist to the concept of a CPU.


00:10:02.800 --> 00:10:04.800
How do you make things show up on the screen?


00:10:04.800 --> 00:10:07.000
How do you do lots of other things, right?


00:10:07.000 --> 00:10:09.160
Like that's all implemented by your operating system, right?


00:10:09.160 --> 00:10:13.040
It's the next layer above your CPU in terms of abstraction.


00:10:13.040 --> 00:10:17.120
And WebAssembly only has the start of this concept


00:10:17.120 --> 00:10:18.840
in one area, which is WASI,


00:10:18.840 --> 00:10:21.600
and in another area, it kind of just leans hard


00:10:21.600 --> 00:10:22.640
into the browser space,


00:10:22.640 --> 00:10:24.520
and that's kind of what we call emscripten, right?


00:10:24.520 --> 00:10:28.200
So generally the way all this plugs together is,


00:10:28.200 --> 00:10:29.880
if you look at it from a browser perspective,


00:10:29.880 --> 00:10:33.040
there's a tool called emscripten, E-M-scripten,


00:10:33.040 --> 00:10:37.000
and it's basically a kind of compiler front end


00:10:37.000 --> 00:10:39.660
that uses Clang to compile stuff to WebAssembly,


00:10:39.660 --> 00:10:42.120
and then has a bunch of shims into the browser


00:10:42.120 --> 00:10:45.480
to implement stuff like file access, as Nicholas pointed out


00:10:45.480 --> 00:10:47.440
and all these other things you can get


00:10:47.440 --> 00:10:49.620
in a rich web environment,


00:10:49.620 --> 00:10:52.860
but it's provided by this project called Emscripten.


00:10:52.860 --> 00:10:57.120
And it's not quite an OS, but it's not nothing either.


00:10:57.120 --> 00:10:59.000
It's this interesting kind of middle ground


00:10:59.000 --> 00:11:01.720
and it's project specific.


00:11:01.720 --> 00:11:04.620
But then on the other side of all this,


00:11:04.620 --> 00:11:05.800
there's a project called Wazzy.


00:11:05.800 --> 00:11:07.920
And this is what, when you think of WebAssembly,


00:11:07.920 --> 00:11:09.480
you start hearing people talking about this


00:11:09.480 --> 00:11:12.320
compared to containers or edge compute


00:11:12.320 --> 00:11:15.280
and all this kind of server scenarios,


00:11:15.280 --> 00:11:17.800
where Wazzy acts like POSIX, right?


00:11:17.800 --> 00:11:20.520
So it's not actually an implementation of an OS almost,


00:11:20.520 --> 00:11:21.720
kind of like what Descriptan does,


00:11:21.720 --> 00:11:24.720
but instead it's a actual abstraction


00:11:24.720 --> 00:11:28.480
over what you might expect an OS to provide you.


00:11:28.480 --> 00:11:30.060
So in Wazzy's case, for instance,


00:11:30.060 --> 00:11:31.840
it doesn't implement file access,


00:11:31.840 --> 00:11:34.980
it implements the function to call from WebAssembly


00:11:34.980 --> 00:11:36.680
that gives you the file access.


00:11:36.680 --> 00:11:39.800
So in that case, what you have is you have a runtime.


00:11:39.800 --> 00:11:41.680
And that runtime is actually what provides


00:11:41.680 --> 00:11:44.480
that level of OS that you need.


00:11:44.480 --> 00:11:47.400
So if you've ever heard of things like Wasm Time


00:11:47.400 --> 00:11:49.760
or Wasm Edge or Wasmr,


00:11:49.760 --> 00:11:52.200
all of these are actually WASI run times


00:11:52.200 --> 00:11:54.640
that basically load up your WebAssembly,


00:11:54.640 --> 00:11:58.920
inject into that code the functions that WASI specifies


00:11:58.920 --> 00:12:02.560
on how to read files or how to print a standard out


00:12:02.560 --> 00:12:04.280
or read standard in,


00:12:04.280 --> 00:12:07.020
and then allow them to run in an abstracted fashion.


00:12:07.020 --> 00:12:12.020
So it's almost half between Emscripten and kind of an OS,


00:12:12.880 --> 00:12:14.960
but above WebAssembly.


00:12:14.960 --> 00:12:18.320
But as you can notice, it's a weird little split here


00:12:18.320 --> 00:12:20.280
because there's the web part and the server part.


00:12:20.280 --> 00:12:21.380
And this is where this whole discussion


00:12:21.380 --> 00:12:22.460
gets really interesting, right?


00:12:22.460 --> 00:12:24.680
Because it's now, we're starting to have discussions


00:12:24.680 --> 00:12:26.020
about abstraction layers


00:12:26.020 --> 00:12:29.000
and which abstraction layers are provided where.


00:12:29.000 --> 00:12:32.640
And this is kind of where WebAssembly's youth,


00:12:32.640 --> 00:12:35.080
to put it one way, really shines through


00:12:35.080 --> 00:12:38.860
in terms of showing that it's all still very much


00:12:38.860 --> 00:12:40.960
actively being developed, which I'm sure Fabio and Nicholas


00:12:40.960 --> 00:12:42.800
have some very fun stories to tell you about


00:12:42.800 --> 00:12:45.840
with PyScript and trying to get this all working today.


00:12:45.840 --> 00:12:49.120
But this is where this whole OS concept kind of ties in,


00:12:49.120 --> 00:12:51.720
where Wazzy's POSIX, just kind of abstractions


00:12:51.720 --> 00:12:53.440
that someone has to provide.


00:12:53.440 --> 00:12:55.040
And then you have tools like in scripting


00:12:55.040 --> 00:12:58.100
that try to kind of specifically in the browser,


00:12:58.100 --> 00:13:00.960
just go ahead and just lean hard in the browser specs


00:13:00.960 --> 00:13:02.520
that the W3C has given us


00:13:02.520 --> 00:13:04.680
and the browsers hopefully implement,


00:13:04.680 --> 00:13:07.280
and just use those to implement those things


00:13:07.280 --> 00:13:08.440
that you would expect from an OS.


00:13:08.440 --> 00:13:11.040
So it is, as you said, an interesting problem


00:13:11.040 --> 00:13:13.220
where from CPython's perspective


00:13:13.220 --> 00:13:15.220
and most Python implementations, right?


00:13:15.220 --> 00:13:17.180
Historically, we've had a full operating system.


00:13:17.180 --> 00:13:18.740
MicroPython is going to be the exception,


00:13:18.740 --> 00:13:20.860
which Nicholas, I'm sure we'll talk about.


00:13:20.860 --> 00:13:24.420
But from a CPython perspective, PyPy, whatever,


00:13:24.420 --> 00:13:28.520
we're used to running on Windows, Linux, Mac, right?


00:13:28.520 --> 00:13:29.360
Like full operating systems.


00:13:29.360 --> 00:13:33.100
- Might get jammed down into a tiny Raspberry Pi.


00:13:33.100 --> 00:13:35.020
That doesn't happen anymore 'cause you can't buy them.


00:13:35.020 --> 00:13:35.860
They're unattainable.


00:13:35.860 --> 00:13:38.820
(laughing)


00:13:38.820 --> 00:13:39.660
- But yeah, but I mean,


00:13:39.660 --> 00:13:41.920
The key point is like a full OS, right?


00:13:41.920 --> 00:13:43.480
Where we didn't have to concern ourselves


00:13:43.480 --> 00:13:45.360
about what was or was not available.


00:13:45.360 --> 00:13:46.700
But in a WebAssembly case, right?


00:13:46.700 --> 00:13:48.440
Like in the browser, if you use Emscripten,


00:13:48.440 --> 00:13:51.200
you only have available what Emscripten gives you.


00:13:51.200 --> 00:13:53.540
In the Wazze case, you only have what's been standardized


00:13:53.540 --> 00:13:55.920
by Wazze and that the runtime you choose to use


00:13:55.920 --> 00:13:57.360
has actually implemented.


00:13:57.360 --> 00:13:59.320
So we're in this interesting new kind of world


00:13:59.320 --> 00:14:02.240
where what you might expect from the standard library,


00:14:02.240 --> 00:14:04.480
for instance, in Python, that's always been there,


00:14:04.480 --> 00:14:07.360
like threads, aren't necessarily there.


00:14:07.360 --> 00:14:09.760
So it actually goes back to an interesting perspective


00:14:09.760 --> 00:14:11.520
of what's Python the language


00:14:11.520 --> 00:14:14.400
versus the runtime of Python that you're using


00:14:14.400 --> 00:14:15.700
and what is provided by that.


00:14:15.700 --> 00:14:17.720
We're kind of going back in time in a way


00:14:17.720 --> 00:14:19.980
of kind of this clear separation


00:14:19.980 --> 00:14:22.440
of language versus implementation


00:14:22.440 --> 00:14:25.200
and kind of what does that mean to us as a community


00:14:25.200 --> 00:14:28.100
and what's possible in this new space that is WebAssembly.


00:14:28.100 --> 00:14:33.600
- It's very exciting and very fresh,


00:14:33.600 --> 00:14:35.960
both meaning that in a good and bad way, right?


00:14:36.880 --> 00:14:40.480
it reminds me a little bit of what happened with Node.js.


00:14:40.480 --> 00:14:43.840
People are like, look, we're writing all this advanced code


00:14:43.840 --> 00:14:46.240
and the browsers are getting really fast


00:14:46.240 --> 00:14:48.480
at running JavaScript.


00:14:48.480 --> 00:14:50.980
Like, no, no, they're not.


00:14:50.980 --> 00:14:52.600
Similar to Apple Silicon, you're like,


00:14:52.600 --> 00:14:55.080
you can't take a phone and make that your fastest computer.


00:14:55.080 --> 00:14:56.480
No, no, and then somebody does,


00:14:56.480 --> 00:14:58.440
you're like, wait a minute, look at this thing go.


00:14:58.440 --> 00:15:01.240
Wow, you could have a server-side JavaScript,


00:15:01.240 --> 00:15:02.660
which I don't necessarily wanna go touch,


00:15:02.660 --> 00:15:05.520
but it's a similar transition


00:15:05.520 --> 00:15:10.520
that like we could have Python in multiple places, right?


00:15:10.520 --> 00:15:13.100
And it theoretically could run the WebAssembly version


00:15:13.100 --> 00:15:14.680
on the server as well for parody


00:15:14.680 --> 00:15:16.540
or I don't know if that makes any sense,


00:15:16.540 --> 00:15:19.960
but you know, like it's sort of a similar transition


00:15:19.960 --> 00:15:22.640
in ways maybe in the reverse direction than JavaScript,


00:15:22.640 --> 00:15:24.440
but somewhat like that.


00:15:24.440 --> 00:15:30.000
- It actually has, it's hard to predict


00:15:30.000 --> 00:15:32.040
as you are living through things, right?


00:15:32.040 --> 00:15:37.040
But thinking about how Python became popular


00:15:37.040 --> 00:15:43.080
as most popular language


00:15:43.080 --> 00:15:45.680
without actually having a solid story


00:15:45.680 --> 00:15:48.160
for the most popular hardware today,


00:15:48.160 --> 00:15:50.360
which is tablets or mobile,


00:15:50.360 --> 00:15:52.960
like basically mobile phones and stuff.


00:15:52.960 --> 00:15:56.600
And also not having a great story


00:15:56.600 --> 00:16:01.320
for the most popular virtualization software around,


00:16:01.320 --> 00:16:06.320
which is the browser, imagining how Python will change


00:16:06.320 --> 00:16:10.980
with the Wasm stories, I find it very interesting


00:16:10.980 --> 00:16:14.940
'cause it basically introduces a series of concepts


00:16:14.940 --> 00:16:16.340
that we are not used to.


00:16:16.340 --> 00:16:21.680
It's not just like run your environment there.


00:16:21.680 --> 00:16:24.600
There's a whole packaging part of the process


00:16:24.600 --> 00:16:25.840
that we need to think about


00:16:25.840 --> 00:16:27.900
and how do we distribute that code?


00:16:27.900 --> 00:16:32.300
And that opens up for things that we haven't been used to


00:16:32.300 --> 00:16:36.500
around optimizing space and building effective


00:16:36.500 --> 00:16:40.600
bundles of your environment,


00:16:40.600 --> 00:16:42.060
where we can tree shake stuff


00:16:42.060 --> 00:16:45.640
and all of those funny things.


00:16:45.640 --> 00:16:47.260
So I think for Python,


00:16:47.260 --> 00:16:50.680
it can be a very revolutionary moment


00:16:50.680 --> 00:16:52.420
where in five years from now,


00:16:52.420 --> 00:16:55.300
we're looking at a different ecosystem,


00:16:55.300 --> 00:16:56.800
hopefully bigger and better.


00:16:57.740 --> 00:17:04.860
I agree on this to sort of adapt and change and make the most of the opportunities that


00:17:04.860 --> 00:17:07.900
that wasm presenters, but as


00:17:07.900 --> 00:17:14.860
Brett and fabio have said it's a strange world in that it's not like i've got a libc and i know i'm going to be able


00:17:14.860 --> 00:17:17.100
To get to the file system and things like that. There's


00:17:17.100 --> 00:17:22.460
There there are these kind of shims and slightly different abstractions that


00:17:22.460 --> 00:17:24.700
um


00:17:24.700 --> 00:17:28.780
That may make python feel like it's uh


00:17:28.780 --> 00:17:32.860
I was gonna say a duck out of water snake out of water. I don't know


00:17:32.860 --> 00:17:35.660
You know what? I mean? It's not in its natural habitat water moccasin


00:17:35.660 --> 00:17:38.700
but but it but it yeah, but it it


00:17:38.700 --> 00:17:47.660
But I think I you know, i'm pretty confident and bullish about the python community and our ability collectively to find a way


00:17:47.660 --> 00:17:49.800
forwards with this, um


00:17:49.800 --> 00:17:53.600
You know, we've got a beautiful language. let's bring it to island


00:17:53.600 --> 00:17:58.500
- We do, and many people love it.


00:17:58.500 --> 00:18:02.480
And when people say I love Python,


00:18:02.480 --> 00:18:04.000
they might mean the language,


00:18:04.000 --> 00:18:06.320
but usually I think that's only a part of it, right?


00:18:06.320 --> 00:18:09.940
Often that's the ecosystem and this whole broad, right?


00:18:09.940 --> 00:18:12.020
All the packages and all the people on the projects.


00:18:12.020 --> 00:18:15.640
And in that sense, like Python is very much empowered


00:18:15.640 --> 00:18:18.360
to make some really cool transitions there.


00:18:18.360 --> 00:18:21.960
We don't have to always kick it back to the core devs


00:18:21.960 --> 00:18:22.860
for all the work.


00:18:22.860 --> 00:18:27.420
[LAUGHTER]


00:18:27.420 --> 00:18:31.780
Although, Brett, congratulations, I guess, on 3.11.


00:18:31.780 --> 00:18:32.280
Right?


00:18:32.280 --> 00:18:33.020
I mean, you guys--


00:18:33.020 --> 00:18:34.100
Yeah.


00:18:34.100 --> 00:18:35.140
That's a big deal.


00:18:35.140 --> 00:18:38.020
I did a small amount, but thank you.


00:18:38.020 --> 00:18:40.780
It seems to have been taken very well.


00:18:40.780 --> 00:18:43.380
The community seems to have picked it up


00:18:43.380 --> 00:18:46.420
faster than usual, which has been really fantastic.


00:18:46.420 --> 00:18:50.140
Dependencies seem to have been ready for this


00:18:50.140 --> 00:18:52.220
and got wheels out early, which was great


00:18:52.220 --> 00:18:53.920
'cause it made transitioning a lot easier.


00:18:53.920 --> 00:18:56.180
So kudos and thanks to the community


00:18:56.180 --> 00:18:58.900
for putting in that effort to get stuff ready to go


00:18:58.900 --> 00:19:01.140
as of October so that when things launched


00:19:01.140 --> 00:19:04.120
and we were able to do that .0 release,


00:19:04.120 --> 00:19:06.300
people were able to just install it, download packages


00:19:06.300 --> 00:19:09.600
and have the wheels ready to go and pretty smoothly.


00:19:09.600 --> 00:19:11.300
- Yeah, that's awesome.


00:19:11.300 --> 00:19:14.680
Either you, other guys have any contributions to 3.11?


00:19:14.680 --> 00:19:16.700
- No.


00:19:16.700 --> 00:19:18.420
- Yeah.


00:19:18.420 --> 00:19:20.340
- No, we are happy consumers.


00:19:20.340 --> 00:19:23.300
- Yes, exactly, exactly.


00:19:23.300 --> 00:19:25.260
All right, one other concept,


00:19:25.260 --> 00:19:26.500
I really wanna quickly throw out there


00:19:26.500 --> 00:19:28.560
and just get your thoughts on,


00:19:28.560 --> 00:19:31.220
don't wanna go deep on this,


00:19:31.220 --> 00:19:33.980
but one of the things that seems to me


00:19:33.980 --> 00:19:37.460
like an interesting benefit for WebAssembly


00:19:37.460 --> 00:19:39.760
is the interoperability with other languages.


00:19:39.760 --> 00:19:41.820
Like WebAssembly can call WebAssembly,


00:19:41.820 --> 00:19:45.540
so if somebody could compile their Rust or their C#


00:19:45.540 --> 00:19:49.160
or their, you name it, over to WebAssembly,


00:19:49.160 --> 00:19:52.280
you might be able to consume libraries in a broader way


00:19:52.280 --> 00:19:54.560
than you can now in Python.


00:19:54.560 --> 00:19:55.540
What do you think about this?


00:19:55.540 --> 00:19:57.040
Yes, or is this just dreaming?


00:19:57.040 --> 00:20:00.320
- I think the answer is you could,


00:20:00.320 --> 00:20:02.320
but I also refer the honorable gentleman


00:20:02.320 --> 00:20:05.340
to my esteemed colleague, Brett's earlier answer


00:20:05.340 --> 00:20:08.240
about this being a relatively immature space as well.


00:20:08.240 --> 00:20:09.480
I mean, to be honest with you,


00:20:09.480 --> 00:20:12.160
I used to be a .NET developer before I came to Python.


00:20:12.160 --> 00:20:16.080
And the fact that .NET has this notion of the CLR,


00:20:16.080 --> 00:20:19.400
the common language runtime to which C#, C++,


00:20:19.400 --> 00:20:22.720
visual basic, F sharp, I am Python,


00:20:22.720 --> 00:20:25.000
I don't know, whatever compiles to,


00:20:25.000 --> 00:20:27.720
it feels like it's a very similar space


00:20:27.720 --> 00:20:29.120
as you're implying, Michael.


00:20:29.120 --> 00:20:34.480
- The Blazor app actually is like incredibly near


00:20:34.480 --> 00:20:37.160
what they're doing, which is,


00:20:37.160 --> 00:20:38.060
I haven't done anything with it,


00:20:38.060 --> 00:20:39.820
but it looks quite impressive.


00:20:39.820 --> 00:20:42.680
Yeah.


00:20:42.680 --> 00:20:43.640
Okay.


00:20:43.640 --> 00:20:44.640
So, Nicholas.


00:20:44.640 --> 00:20:47.640
So there's a piece of tech we can quickly touch here.


00:20:47.640 --> 00:20:49.160
Is there's something-- and I think


00:20:49.160 --> 00:20:51.280
it's actually on the page you're looking at right now


00:20:51.280 --> 00:20:52.320
if you're watching the live stream.


00:20:52.320 --> 00:20:53.600
It's right below the fold.


00:20:53.600 --> 00:20:55.800
The important note, WASI is in transition.


00:20:55.800 --> 00:20:58.760
The transition part is there is work


00:20:58.760 --> 00:21:04.680
towards something called the component model, specifically


00:21:04.680 --> 00:21:07.640
in WASI, which is defined more or less what you're


00:21:07.640 --> 00:21:10.280
talking about, Michael, which honestly feels like Korba


00:21:10.280 --> 00:21:12.840
for the new millennia.


00:21:12.840 --> 00:21:16.480
to date myself or at least date my PhD supervisor


00:21:16.480 --> 00:21:18.480
who did his PhD relating to Corbus.


00:21:18.480 --> 00:21:19.880
- You said Corbus, right?


00:21:19.880 --> 00:21:21.760
I have not thought about Corbus.


00:21:21.760 --> 00:21:24.000
I have not thought about that since like the year 2000.


00:21:24.000 --> 00:21:24.840
So, okay.


00:21:24.840 --> 00:21:25.660
- Oh, aha.


00:21:25.660 --> 00:21:29.040
But the thing here is the component model


00:21:29.040 --> 00:21:31.720
is a spec being worked on that's meant to build


00:21:31.720 --> 00:21:34.400
for you to specify at the WebAssembly level,


00:21:34.400 --> 00:21:38.560
kind of the API that your WebAssembly code exports, right?


00:21:38.560 --> 00:21:39.840
I mean, for the Python audience,


00:21:39.840 --> 00:21:41.920
you can think of it as almost the CPython API, right?


00:21:41.920 --> 00:21:44.280
is kind of like what does CPython export out


00:21:44.280 --> 00:21:46.960
and then what can you use from your extension modules.


00:21:46.960 --> 00:21:47.840
It's a similar thing,


00:21:47.840 --> 00:21:49.360
except it's done at the WebAssembly level.


00:21:49.360 --> 00:21:50.200
So you can just say like,


00:21:50.200 --> 00:21:55.200
"Okay, this function will return a string."


00:21:55.200 --> 00:21:57.520
And then there's a definition of what a string is


00:21:57.520 --> 00:21:58.500
for WebAssembly.


00:21:58.500 --> 00:21:59.440
So that when you say,


00:21:59.440 --> 00:22:01.960
"Oh, internally, I might use UTF-16,


00:22:01.960 --> 00:22:04.840
but a string in the WebAssembly component model context


00:22:04.840 --> 00:22:05.680
is UTF-8."


00:22:05.680 --> 00:22:07.240
So you have to encode out to UTF-8.


00:22:07.240 --> 00:22:08.200
And the other side you go,


00:22:08.200 --> 00:22:09.520
"Oh, hey, I'm gonna call this function.


00:22:09.520 --> 00:22:10.520
Oh, it gives me a string.


00:22:10.520 --> 00:22:12.200
that's going to come as UTF-8.


00:22:12.200 --> 00:22:13.520
If you can keep using it that way, great.


00:22:13.520 --> 00:22:16.520
If you have to change it to UTF-32 or something, you can.


00:22:16.520 --> 00:22:20.520
But it's defining the seam of your WebAssembly module


00:22:20.520 --> 00:22:24.000
and what it looks like in terms of what it exposes to other people.


00:22:24.000 --> 00:22:28.800
So that's that big dream you mentioned of people writing stuff in other languages


00:22:28.800 --> 00:22:31.960
that we can just consume directly from WebAssembly.


00:22:31.960 --> 00:22:36.460
But there's obviously, as Nicholas pointed out,


00:22:36.460 --> 00:22:38.920
immature stuff in this community where we have to figure out


00:22:38.920 --> 00:22:40.880
How do we even expose that from the Python side, right?


00:22:40.880 --> 00:22:43.400
Like I don't even know technologically what we would do


00:22:43.400 --> 00:22:45.600
to make that work in terms of pulling


00:22:45.600 --> 00:22:46.680
another WebAssembly module.


00:22:46.680 --> 00:22:49.540
'Cause honestly, it's basically like linking,


00:22:49.540 --> 00:22:51.600
but we don't have that concept of linking in Python.


00:22:51.600 --> 00:22:52.760
You just run an import statement.


00:22:52.760 --> 00:22:54.480
- There's no header, there's no definition


00:22:54.480 --> 00:22:55.560
of what's on the other side.


00:22:55.560 --> 00:22:56.560
- Exactly, right?


00:22:56.560 --> 00:23:00.080
And that's exactly what the component model does, right?


00:23:00.080 --> 00:23:02.200
It's an interesting position.


00:23:02.200 --> 00:23:04.260
Actually credit to Peter Wang,


00:23:04.260 --> 00:23:07.920
who you can save the love/hate toots to later


00:23:07.920 --> 00:23:11.000
on this analogy, but up to this point, right?


00:23:11.000 --> 00:23:13.320
A lot of the WebAssembly world has been these languages


00:23:13.320 --> 00:23:14.260
that are compiled, right?


00:23:14.260 --> 00:23:16.840
Like the C and C++ and the Rust stuff


00:23:16.840 --> 00:23:18.360
like where you just pull in all your code,


00:23:18.360 --> 00:23:19.720
you compile it and it all just kind of works.


00:23:19.720 --> 00:23:22.800
And it's very much set up in these worlds where,


00:23:22.800 --> 00:23:24.520
oh yeah, it's static compiled, whatever.


00:23:24.520 --> 00:23:26.680
As you said, header files, it kind of comes together.


00:23:26.680 --> 00:23:29.880
But we come from this world where people have poured


00:23:29.880 --> 00:23:34.320
all this time and energy to wrap all of this esoteric C,


00:23:34.320 --> 00:23:39.320
C++, Fortran even, code, and give us this nice API in Python.


00:23:39.320 --> 00:23:42.800
But once again, Python doesn't operate like C and C++


00:23:42.800 --> 00:23:45.040
and Rust and all these other statically compiled languages


00:23:45.040 --> 00:23:47.040
where we have these concept of these interfaces


00:23:47.040 --> 00:23:48.920
and they just load it, plug it right in,


00:23:48.920 --> 00:23:49.740
and it just works.


00:23:49.740 --> 00:23:52.640
Like, no, no, we're gonna import some Python code


00:23:52.640 --> 00:23:54.940
and it's gonna execute as part of import, right?


00:23:54.940 --> 00:23:56.200
Like, I don't know how people know that,


00:23:56.200 --> 00:23:58.120
but literally the way import works


00:23:58.120 --> 00:24:01.400
is it calls exec on your code, right?


00:24:01.400 --> 00:24:05.800
Extension modules use some really crazy chips from glibc


00:24:05.800 --> 00:24:07.760
to pull in that data off that module,


00:24:07.760 --> 00:24:09.760
which we don't have in WebAssembly and stuff.


00:24:09.760 --> 00:24:13.440
So there's a potential disconnect here at the moment.


00:24:13.440 --> 00:24:15.500
And hopefully, as Fabio said, in five years time,


00:24:15.500 --> 00:24:18.240
we can kind of work together to kind of work


00:24:18.240 --> 00:24:20.440
with the WebAssembly community to make this a solved problem.


00:24:20.440 --> 00:24:22.120
But as of right now,


00:24:22.120 --> 00:24:25.040
that component model is not designed for us.


00:24:25.040 --> 00:24:26.560
The Python community is designed more


00:24:26.560 --> 00:24:28.120
for the C/C++ Rust world.


00:24:28.120 --> 00:24:29.360
And we're probably gonna have to work with them


00:24:29.360 --> 00:24:31.680
to try to figure out how to make that work with us.


00:24:31.680 --> 00:24:34.360
Because to be frank, we're bleeding edge


00:24:34.360 --> 00:24:36.440
in terms of a dynamic programming language


00:24:36.440 --> 00:24:38.800
with an interpreter as we are coming into this


00:24:38.800 --> 00:24:40.240
and not being a compiled language.


00:24:40.240 --> 00:24:41.720
And I think we're going to be,


00:24:41.720 --> 00:24:44.700
I don't wanna say bringing the WebAssembly world


00:24:44.700 --> 00:24:45.540
kicking and screaming.


00:24:45.540 --> 00:24:46.600
I think they're just not,


00:24:46.600 --> 00:24:48.360
we haven't fully introduced ourselves yet.


00:24:48.360 --> 00:24:50.360
And I think they're gonna come to get to know us


00:24:50.360 --> 00:24:52.160
and we're gonna start bringing in some new stuff.


00:24:52.160 --> 00:24:55.440
So I don't think we're quite ready for this whole magic,


00:24:55.440 --> 00:24:56.680
bringing other WebAssembly stuff,


00:24:56.680 --> 00:24:58.320
but hopefully we can work with them to make that happen.


00:24:58.320 --> 00:25:02.060
because as of right now, it's not in the cards.


00:25:02.060 --> 00:25:05.560
- Yeah, I'd like to make a comment on this one


00:25:05.560 --> 00:25:09.660
'cause it actually is a topic of,


00:25:09.660 --> 00:25:12.700
we have the running joke inside the PyScript team


00:25:12.700 --> 00:25:17.700
where Antonio Cooney and I always argue about everything


00:25:17.700 --> 00:25:23.080
or argue, discuss, and this is a big topic of discussion


00:25:23.080 --> 00:25:28.080
because Antonio is more lower level


00:25:28.120 --> 00:25:29.480
and very smart.


00:25:29.480 --> 00:25:32.840
And I look at things more on the higher level side.


00:25:32.840 --> 00:25:37.840
And I often tell, I really wanna see Python working


00:25:37.840 --> 00:25:43.200
alongside with R or other languages for data science,


00:25:43.200 --> 00:25:47.020
or just, I would love my kids to be using Python


00:25:47.020 --> 00:25:50.100
to drive a gaming library in JavaScript on the browser


00:25:50.100 --> 00:25:50.940
or something like this.


00:25:50.940 --> 00:25:53.980
And he's like, it's never gonna work the way you want to


00:25:53.980 --> 00:25:57.380
because you don't know how types are gonna be.


00:25:57.380 --> 00:26:01.280
translated into WASM for different languages


00:26:01.280 --> 00:26:02.880
and yada, yada, yada.


00:26:02.880 --> 00:26:07.740
But one bridge that we have right now is JavaScript


00:26:07.740 --> 00:26:11.240
and having proxy objects in JavaScript


00:26:11.240 --> 00:26:15.300
that relates to Python on the browser or Rust or things


00:26:15.300 --> 00:26:18.200
can be a possibility too.


00:26:18.200 --> 00:26:22.540
But in general, I think we'll,


00:26:22.540 --> 00:26:26.720
what I always end up saying is to Antonio is like,


00:26:26.720 --> 00:26:30.360
We're kind of in creative mode right now,


00:26:30.360 --> 00:26:33.160
or experimentation mode, where we can try stuff,


00:26:33.160 --> 00:26:35.920
and maybe it's not the right way,


00:26:35.920 --> 00:26:38.120
but it may work 90% of the time,


00:26:38.120 --> 00:26:41.660
which gets a lot of work done for a lot of people.


00:26:41.660 --> 00:26:44.600
In the meantime, we'll figure out the correct way


00:26:44.600 --> 00:26:48.080
and how different languages will actually talk


00:26:48.080 --> 00:26:51.840
to each other or what it means for Wasm.


00:26:51.840 --> 00:26:54.840
Anyway, I think it's interesting.


00:26:54.840 --> 00:26:58.600
This is such an interesting conversation on so many levels


00:26:58.600 --> 00:27:01.280
because Brett mentioned Corba, which


00:27:01.280 --> 00:27:04.960
is this thing from way back when, before I was ever


00:27:04.960 --> 00:27:08.120
a software engineer.


00:27:08.120 --> 00:27:13.520
And Fabio is talking about how he has a high-level view.


00:27:13.520 --> 00:27:18.960
Antonio from PyPy has a very different perspective on this.


00:27:18.960 --> 00:27:21.720
And I would say that--


00:27:21.720 --> 00:27:29.400
And also fabio's pragmatism as well about what we need to get something to work because then we can do cool stuff with python


00:27:29.400 --> 00:27:31.160
in the browser


00:27:31.160 --> 00:27:32.120
and


00:27:32.120 --> 00:27:37.720
Basically what i'm saying is that you need both of those attitudes the antonio and the fabio and bring them together because that's when


00:27:37.720 --> 00:27:41.320
Interesting things happen. I'm not saying it's interesting watching these to have a


00:27:41.320 --> 00:27:46.760
Interesting discussion in our morning stand-ups or whatever. What i'm talking about is that that's the intellectually


00:27:47.540 --> 00:27:50.300
stimulating thing because you have two different perspectives.


00:27:50.300 --> 00:27:53.900
And if like Fabio and Antonio are you, they're excellent


00:27:53.900 --> 00:27:56.580
engineers, and they can see and empathize with what the other


00:27:56.580 --> 00:27:59.500
person is talking about and adjust their position. And then


00:27:59.500 --> 00:28:04.660
eventually, we kind of zone in on various potential solutions,


00:28:04.660 --> 00:28:06.980
which kind of goes back to the Corba thing, which is why I


00:28:06.980 --> 00:28:10.540
brought it up is that, you know, I remember meeting an old gray


00:28:10.540 --> 00:28:14.260
beard programmer when I was a young whippersnapper, and he was


00:28:14.260 --> 00:28:17.420
I can't remember, something had been announced. And I was like,


00:28:17.420 --> 00:28:19.540
"Ah, this is amazing, it's gonna change the world


00:28:19.540 --> 00:28:21.540
in that way young programmers have."


00:28:21.540 --> 00:28:23.860
And he was like, "Oh yeah, we were doing this in the 70s


00:28:23.860 --> 00:28:25.660
with punch cards or something like that."


00:28:25.660 --> 00:28:28.660
And so once again, that sort of,


00:28:28.660 --> 00:28:31.780
we have this cyclical nature in the history of programming


00:28:31.780 --> 00:28:34.980
where we're coming back to these kind of archetypal


00:28:34.980 --> 00:28:38.340
solutions implemented in different ways.


00:28:38.340 --> 00:28:40.220
And you can actually see perhaps the whole


00:28:40.220 --> 00:28:45.220
Waz and Wazzy thing as yet another iteration of this


00:28:45.420 --> 00:28:48.300
because we're rethinking what a computing platform is.


00:28:48.300 --> 00:28:50.260
It's this virtualized thing.


00:28:50.260 --> 00:28:52.560
And it's taken us maybe 20 or 30 years


00:28:52.560 --> 00:28:54.680
to get to that new space


00:28:54.680 --> 00:28:56.640
after lots of different experiments.


00:28:56.640 --> 00:28:59.380
We're still gonna be flapping around like headless chickens


00:28:59.380 --> 00:29:01.200
trying to figure out how to make the damn thing work


00:29:01.200 --> 00:29:03.400
because all of this stuff keeps moving on


00:29:03.400 --> 00:29:05.000
and that's called progress, folks.


00:29:05.000 --> 00:29:08.360
But this is why it's so interesting.


00:29:08.360 --> 00:29:10.080
This is why I'm a software engineer.


00:29:10.080 --> 00:29:14.480
It's because I get to work with clever people


00:29:14.480 --> 00:29:17.800
on interesting problems that if we get it right,


00:29:17.800 --> 00:29:21.800
a bunch of 11 year olds in the school down the road from me


00:29:21.800 --> 00:29:24.760
are gonna be able to build Python applications


00:29:24.760 --> 00:29:29.040
on a little device like this using PyScript.


00:29:29.040 --> 00:29:32.480
And you know, that is something to work for.


00:29:32.480 --> 00:29:35.240
- Yeah, that's fantastic.


00:29:35.240 --> 00:29:37.000
- And if you don't like the tools--


00:29:37.000 --> 00:29:37.820
- And if you don't like the tools--


00:29:37.820 --> 00:29:39.560
- A little device with the phone.


00:29:39.560 --> 00:29:41.420
- Yes, it's our express.


00:29:42.680 --> 00:29:45.320
By the way, we're not paying Nicholas


00:29:45.320 --> 00:29:48.480
for every pitch on PyScript.


00:29:48.480 --> 00:29:50.000
It's out of his heart.


00:29:50.000 --> 00:29:53.760
He does an amazing job.


00:29:53.760 --> 00:29:54.600
- Absolutely.


00:29:54.600 --> 00:29:56.160
All right, well, let's, Nicholas,


00:29:56.160 --> 00:29:57.660
let's go to you on this one.


00:29:57.660 --> 00:30:02.020
Let's talk about a little bit about MicroPython.


00:30:02.020 --> 00:30:05.320
You know, MicroPython is amazing.


00:30:05.320 --> 00:30:08.000
I recently, sitting here at my desk,


00:30:08.000 --> 00:30:13.000
stuck Velcroed to one of the posts of my desk


00:30:13.000 --> 00:30:17.580
is one of these ESP feather 32s,


00:30:17.580 --> 00:30:19.980
32 feathers, I don't know how, feather, I don't know.


00:30:19.980 --> 00:30:22.080
Some order of those words.


00:30:22.080 --> 00:30:23.260
Thank you.


00:30:23.260 --> 00:30:27.780
Device, running Python, connected to my wifi,


00:30:27.780 --> 00:30:29.340
seeking a bunch of stuff on the cloud


00:30:29.340 --> 00:30:31.180
and just that little thing, it blinks every now and then


00:30:31.180 --> 00:30:32.220
to tell me everything's cool.


00:30:32.220 --> 00:30:35.780
It's doing its job and it just, these are amazing.


00:30:35.780 --> 00:30:39.660
And yeah, I mean, I know CircuitPython


00:30:39.660 --> 00:30:41.140
is not identical to MicroPython,


00:30:41.140 --> 00:30:42.900
but they're very near and they've been


00:30:42.900 --> 00:30:45.180
brought closer together as well, which is great.


00:30:45.180 --> 00:30:50.180
So if we download the entire CPython runtime


00:30:50.180 --> 00:30:54.040
over WebAssembly, it's not totally small, right?


00:30:54.040 --> 00:30:56.600
- It's about 11 megs.


00:30:56.600 --> 00:31:02.080
- Yeah, which we have fast computers,


00:31:02.080 --> 00:31:05.040
but on the other hand, you wouldn't put it


00:31:05.040 --> 00:31:10.560
like a public site that's there to load quick and be fast for SEO and all these things, right?


00:31:10.560 --> 00:31:15.440
But you do have this project called MicroPython. Maybe tell us a bit about that. That's smaller,


00:31:15.440 --> 00:31:24.080
right? Okay, so MicroPython is the wonderful creation of Damian George. Damian


00:31:24.080 --> 00:31:33.440
is a physicist by training. He once told me what his PhD thesis title was, and it's something like


00:31:33.440 --> 00:31:44.240
11 dimensional and then he lost me. Okay, but he was at Cambridge and one of his hobbies


00:31:44.240 --> 00:31:52.640
or part of his background in his studies was working with robotics and he was part of the


00:31:52.640 --> 00:32:00.080
Australia team that entered the Robo World Cup for Americans, that's soccer as it were,


00:32:01.280 --> 00:32:09.280
And which is rather appropriate given the the fact that the world cup in for human beings is happening right now


00:32:09.280 --> 00:32:16.000
Um, but what he wants to do is write a scripting language so that they could very quickly update what was going on in these robots


00:32:16.000 --> 00:32:16.960
Okay


00:32:16.960 --> 00:32:21.200
And he learned a lot by doing that and then realized well


00:32:21.200 --> 00:32:24.400
Actually, perhaps if I take the things that i've learned


00:32:24.400 --> 00:32:27.280
building this stuff, uh to a


00:32:27.280 --> 00:32:30.000
proper scripting language


00:32:30.000 --> 00:32:35.520
Um, then that'd be a cool project. And so he looked around thinking well, what's


00:32:35.520 --> 00:32:38.480
What are cool scripting languages and arrived at python?


00:32:38.480 --> 00:32:40.220
uh


00:32:40.220 --> 00:32:47.200
created a uh an early version of micropython put it on kickstarter thinking that he could sell a few boards


00:32:47.200 --> 00:32:54.080
Make a little bit of money and you know micropython would be there. Well, I think a hundred thousand plus dollars later


00:32:54.080 --> 00:32:59.440
and you know, uh lots and lots of uh orders for boards later, uh


00:32:59.440 --> 00:33:04.440
Micropython has become this amazing success.


00:33:04.440 --> 00:33:07.440
- Oh no, I caught the car moment, right?


00:33:07.440 --> 00:33:09.840
The dog's like, "I caught the car, here we go."


00:33:09.840 --> 00:33:10.680
(laughs)


00:33:10.680 --> 00:33:12.760
- Yeah, well, yeah.


00:33:12.760 --> 00:33:16.600
I think it rather surprised Damien, to say the least.


00:33:16.600 --> 00:33:19.960
But now, Micropython is designed to run


00:33:19.960 --> 00:33:21.880
in highly constrained environments.


00:33:21.880 --> 00:33:26.600
So, for instance, I believe it can work


00:33:26.600 --> 00:33:32.360
With only 16k of ram for instance clearly when you're running it on your board


00:33:32.360 --> 00:33:39.400
Actual python is running on the flash memory rather than the ram which is something different. Um


00:33:39.400 --> 00:33:44.840
And damien pulls an awful lot of tricks to actually make it work really efficiently


00:33:44.840 --> 00:33:51.400
But because he's a physicist he knows how to do experiments and so that's what he does. literally he he


00:33:51.800 --> 00:33:58.760
He tries to work out how can I get this big fat snake that's just eaten an elephant and squash it down into


00:33:58.760 --> 00:34:04.040
this small space so that we can still have a full re-implementation of


00:34:04.040 --> 00:34:08.680
Python 3 on something that maybe has 16k


00:34:08.680 --> 00:34:15.320
Of ram, like I don't know a micro bit unsurprising. I have a box of micro bits on my yeah, beautiful


00:34:15.320 --> 00:34:18.600
Yeah, okay and circuit python, uh is


00:34:19.160 --> 00:34:23.960
is a friendly fork of MicroPython by the wonderful folk at Adafruit.


00:34:23.960 --> 00:34:27.260
So, you know, it's...


00:34:27.260 --> 00:34:29.960
I think it creates an interesting dynamic


00:34:29.960 --> 00:34:33.860
because MicroPython is perhaps the industry version,


00:34:33.860 --> 00:34:38.160
whereas CircuitPython, it provides a consistent API


00:34:38.160 --> 00:34:41.760
for all the Adafruit boards, it's aimed at education,


00:34:41.760 --> 00:34:45.060
they've got a whole bunch of tutorials and support for that sort of stuff,


00:34:45.060 --> 00:34:47.760
and they're forever bringing out incredible new devices,


00:34:48.860 --> 00:34:53.580
As i'm sure we've all picked up at pycon. you know the circuit playground express


00:34:53.580 --> 00:34:56.220
Great conference band


00:34:56.220 --> 00:34:59.180
um, so that's micropython in a nutshell, so


00:34:59.180 --> 00:35:01.660
What's it doing on wasm?


00:35:01.660 --> 00:35:09.820
Well, it's because 16 megabytes is rather a lot to try and download even today over a 4g network and these devices


00:35:09.820 --> 00:35:14.140
Uh subtitles here. This is a phone i'm holding up. you know


00:35:14.860 --> 00:35:20.380
Are underpowered compared to the rather beefy map book i'm sort of using to talk to you now


00:35:20.380 --> 00:35:21.580
and so


00:35:21.580 --> 00:35:24.640
Uh the one of the first things I did when I joined anaconda


00:35:24.640 --> 00:35:31.660
Was just see well what happened if you run it on a mobile phone and it took 16 seconds to get to hello world


00:35:31.660 --> 00:35:34.060
um, which


00:35:34.060 --> 00:35:41.420
Not an optimal kind of solution so what would work and very quickly, you know, I I came to


00:35:42.300 --> 00:35:49.500
uh playing around with micro python and micro python is you know under 100 milliseconds to start up and get you to


00:35:49.500 --> 00:35:51.820
Hello world. It's fast enough and you've got


00:35:51.820 --> 00:35:59.980
So here's the interesting thing i'm interested to hear what brett says here it's a full re-implementation of python 3


00:35:59.980 --> 00:36:05.260
However, there are differences and so we get to brett's rather interesting angle of well


00:36:05.260 --> 00:36:08.960
What is python in the abstract and in the actual detail of implementation?


00:36:08.960 --> 00:36:11.580
Um, you've kind of got this platonic python


00:36:11.580 --> 00:36:14.440
this ideal Python that doesn't actually exist,


00:36:14.440 --> 00:36:17.500
and then you have all of these implementations,


00:36:17.500 --> 00:36:19.260
of which, of course, the C,


00:36:19.260 --> 00:36:22.020
the CPython version is the touchstone.


00:36:22.020 --> 00:36:25.940
But MicroPython doesn't have all the APIs.


00:36:25.940 --> 00:36:27.860
It doesn't have the full standard library,


00:36:27.860 --> 00:36:29.780
and depending on the size of the device,


00:36:29.780 --> 00:36:31.940
it might not even support floating point numbers,


00:36:31.940 --> 00:36:33.520
for instance.


00:36:33.520 --> 00:36:35.040
But it's Python.


00:36:35.040 --> 00:36:36.260
It's the Python that we love.


00:36:36.260 --> 00:36:38.420
You've still got indentation in the white space


00:36:38.420 --> 00:36:40.460
that annoys the C developers or whatever, you know.


00:36:40.460 --> 00:36:42.980
So it's good enough for me.


00:36:42.980 --> 00:36:49.780
- So we can compile this much, much, much smaller,


00:36:49.780 --> 00:36:52.860
more lightweight version to WebAssembly


00:36:52.860 --> 00:36:55.620
and do similar things,


00:36:55.620 --> 00:36:58.540
but instead of downloading a whole huge thing,


00:36:58.540 --> 00:37:00.020
maybe it's a light little thing


00:37:00.020 --> 00:37:01.800
that still lets us write Python


00:37:01.800 --> 00:37:05.360
and do front end stuff in interesting ways.


00:37:05.360 --> 00:37:06.200
- Yeah.


00:37:06.200 --> 00:37:08.920
- All right, Brett, when I talked about speaking back


00:37:08.920 --> 00:37:12.840
in 2019, I guess it was, in Cleveland.


00:37:12.840 --> 00:37:14.880
We did touch on, well, if you're not


00:37:14.880 --> 00:37:17.440
going to be able to do all the Python things,


00:37:17.440 --> 00:37:22.560
how do you define a standard Python?


00:37:22.560 --> 00:37:25.440
And way back in Greek philosophy,


00:37:25.440 --> 00:37:29.200
in the platonic Python, if you will--


00:37:29.200 --> 00:37:30.360
Platonic ideal.


00:37:30.360 --> 00:37:32.560
--the ideal, the essence.


00:37:32.560 --> 00:37:35.480
Yeah, I mean, you're a philosopher.


00:37:35.480 --> 00:37:38.720
The essence, the core.


00:37:38.720 --> 00:37:40.320
this is the little bit we circle and say,


00:37:40.320 --> 00:37:42.120
oh, Python does this.


00:37:42.120 --> 00:37:45.060
What is your thought on this micro invasion


00:37:45.060 --> 00:37:46.460
of Python in the front end?


00:37:46.460 --> 00:37:50.820
- Well, I have to be very clear on my bias here.


00:37:50.820 --> 00:37:53.200
I'm somewhat notorious as having written the pep


00:37:53.200 --> 00:37:57.200
that causes all accelerator modules written in C


00:37:57.200 --> 00:38:00.500
for CPython to have to have a Python equivalent specifically


00:38:00.500 --> 00:38:02.920
so that projects like MicroPython and PyPy


00:38:02.920 --> 00:38:04.840
weren't left behind from the standard library


00:38:04.840 --> 00:38:08.060
so that they could just work and not have to re-implement


00:38:08.060 --> 00:38:11.260
the C API for key things like the date time module.


00:38:11.260 --> 00:38:14.140
So I have a massive bias in this statement to be very clear.


00:38:14.140 --> 00:38:17.560
So I am not representing necessarily the entire Python,


00:38:17.560 --> 00:38:20.060
the core development team or the steering council on this,


00:38:20.060 --> 00:38:24.320
but for me, it has always been a separate concept


00:38:24.320 --> 00:38:25.480
of what the language is


00:38:25.480 --> 00:38:27.660
and what the reference implementation is, right?


00:38:27.660 --> 00:38:31.020
Like we may do development of the language


00:38:31.020 --> 00:38:33.980
using the CPython reference implementation.


00:38:33.980 --> 00:38:35.740
And I am very specifically using


00:38:35.740 --> 00:38:40.740
term reference implementation as a way to help make the language evolve.


00:38:40.740 --> 00:38:43.540
But for me personally, they are two separate concepts.


00:38:43.540 --> 00:38:46.700
These happen to be developed simultaneously and by the same group.


00:38:46.700 --> 00:38:51.840
And it's mainly for convenience and just be able to work faster.


00:38:51.840 --> 00:38:54.300
But I do view them as separate things.


00:38:54.300 --> 00:38:55.600
And it does make sense, right?


00:38:55.600 --> 00:39:00.580
Like there are people on the Python core team who are way more into the esoteric


00:39:00.580 --> 00:39:04.540
bits of the language spec and how the language functions.


00:39:04.540 --> 00:39:07.480
and some people just care about the eval loop


00:39:07.480 --> 00:39:10.020
that makes CPython run, the big switch statement


00:39:10.020 --> 00:39:12.020
you mentioned earlier, Michael.


00:39:12.020 --> 00:39:14.520
So for me, this is totally great.


00:39:14.520 --> 00:39:18.160
We have versions of the language specified in the language spec,


00:39:18.160 --> 00:39:24.160
which, to be fair, is not a spec from a ECMA


00:39:24.160 --> 00:39:27.500
or ISO level standard, but hopefully good enough


00:39:27.500 --> 00:39:30.800
for people to be able to follow to implement the language.


00:39:30.800 --> 00:39:34.000
And to me, that is really what people are targeting.


00:39:34.000 --> 00:39:37.040
I honestly, once again, major bias showing here,


00:39:37.040 --> 00:39:39.440
I don't consider the standard library part of the language.


00:39:39.440 --> 00:39:43.600
The standard library is a very key piece of functionality


00:39:43.600 --> 00:39:49.440
and a key convenience and potential differentiator for Python in some people's eyes,


00:39:49.440 --> 00:39:51.360
but I do not consider it part of the language.


00:39:51.360 --> 00:39:54.160
It is just something that we have developed over the years


00:39:54.160 --> 00:39:57.200
that has helped accelerate Python's growth


00:39:57.200 --> 00:40:01.280
because back in the day, batteries had to be included


00:40:01.280 --> 00:40:01.920
because guess what?


00:40:01.920 --> 00:40:08.320
we didn't have PyPI. Like, Vaults of Parnassus had little animated GIFs of a website where you


00:40:08.320 --> 00:40:12.960
downloaded zip files and you unzipped your stuff. Everyone vendored everything because there was no


00:40:12.960 --> 00:40:17.040
installer. There was no pip, right? Like showing my age in the Python community, right? Like,


00:40:17.040 --> 00:40:20.160
we had to do the batteries included thing to get people...


00:40:20.160 --> 00:40:26.480
>> Did you un-UU encode it off of Usenet to get your package or...?


00:40:26.480 --> 00:40:30.560
No, no, I was not that far back into programming that I mean I


00:40:30.560 --> 00:40:31.460
use use that.


00:40:31.460 --> 00:40:34.260
Don't get me wrong, but I was not coding at the


00:40:34.260 --> 00:40:34.600
time.


00:40:34.600 --> 00:40:37.200
Yeah, and use that was the way that it was


00:40:37.200 --> 00:40:39.880
kind of just like it's wherever it ends up.


00:40:39.880 --> 00:40:42.320
You grab it and you put it in your project


00:40:42.320 --> 00:40:43.840
and you run with it right?


00:40:43.840 --> 00:40:45.760
There wasn't a set exactly location.


00:40:45.760 --> 00:40:48.160
Yeah, and so to me there is a very clear


00:40:48.160 --> 00:40:51.760
separation here and I personally view the standard library as


00:40:51.760 --> 00:40:52.280
a.


00:40:52.280 --> 00:40:55.200
Thing that represents the time of when it was created,


00:40:55.200 --> 00:40:57.200
To me, it has never been the language.


00:40:57.200 --> 00:40:59.540
The language is what's in the language guide


00:40:59.540 --> 00:41:02.740
and more or less what's built in.


00:41:02.740 --> 00:41:04.600
And that's kind of it.


00:41:04.600 --> 00:41:07.440
The import statement brings all this wonderful stuff in for you,


00:41:07.440 --> 00:41:10.580
but that's not-- the import statement's part of the language,


00:41:10.580 --> 00:41:12.920
but what you can import into it,


00:41:12.920 --> 00:41:15.480
unless it's like Dunder Future,


00:41:15.480 --> 00:41:19.180
which is baked into the language definition,


00:41:19.180 --> 00:41:20.420
I don't consider that part of the language.


00:41:20.420 --> 00:41:22.560
And I've said this controversially once


00:41:22.560 --> 00:41:26.400
on the former website that we all used to hang out on before Mastodon,


00:41:26.400 --> 00:41:29.920
where I actually said, like, the REPL, for instance, is not part of the language either,


00:41:29.920 --> 00:41:33.440
technically, if you think about it. It's a wonderful tool, and don't get me wrong,


00:41:33.440 --> 00:41:37.680
it definitely makes Python more useful, but for me, personally, the REPL is not part of


00:41:37.680 --> 00:41:42.000
the language either. It's just something we all ship because it's so useful to use and


00:41:42.000 --> 00:41:47.680
Python enables that kind of development process. But so, MicroPython saying it targets Python,


00:41:47.680 --> 00:41:50.560
I believe technically 3.4 with extras.


00:41:50.560 --> 00:41:56.880
Yeah, means it is a rough is an implementation of Python for Python 3.4 and that's great.


00:41:56.880 --> 00:42:00.400
And whether it comes with everything that the standard library that CPython have for 3.4


00:42:00.400 --> 00:42:06.000
is a positive is a plus what it has and but to me that's not the language.


00:42:06.000 --> 00:42:08.400
And to me they're very clearly separate concepts.


00:42:08.400 --> 00:42:12.080
It's just people get very spoiled when they just download CPython.


00:42:12.080 --> 00:42:13.280
Well my code doesn't work over here.


00:42:13.280 --> 00:42:17.360
It's like well you can use CPython almost as a platform.


00:42:17.360 --> 00:42:19.760
and this platform just doesn't have the same platform.


00:42:19.760 --> 00:42:21.680
The same language, just different platform.


00:42:21.680 --> 00:42:23.280
And to me, that's fine.


00:42:23.280 --> 00:42:24.880
That just is what it is.


00:42:24.880 --> 00:42:25.840
- Okay. - That's it.


00:42:25.840 --> 00:42:28.080
- So it sounds like you're okay with the micro invasion.


00:42:28.080 --> 00:42:30.080
- Oh yeah.


00:42:30.080 --> 00:42:31.760
I care about the language, right?


00:42:31.760 --> 00:42:34.320
If CPython is the way you get it, fantastic.


00:42:34.320 --> 00:42:36.400
If you get it some other way, that's also fantastic.


00:42:36.400 --> 00:42:38.000
I personally care about the language.


00:42:38.000 --> 00:42:41.040
And I mean, we all know the community


00:42:41.040 --> 00:42:43.200
that comes with the language more than the implementation.


00:42:43.200 --> 00:42:43.920
- And the fashion. - Right.


00:42:43.920 --> 00:42:44.960
- Don't forget the fashion.


00:42:44.960 --> 00:42:46.160
- And the fashion, yes.


00:42:46.160 --> 00:42:48.160
That's it's a really good point


00:42:48.160 --> 00:42:51.280
Sorry, go ahead


00:42:51.280 --> 00:42:54.960
No, go ahead. I was gonna say that was a pre before we press record. That was a running joke, but


00:42:54.960 --> 00:42:57.760
Bring us back to the serious conversation. Nicholas


00:42:57.760 --> 00:43:04.560
All right, brett sandals. so the what the more serious point I was going to make is that


00:43:04.560 --> 00:43:10.000
What brett just said is actually easy to miss but of vital importance


00:43:10.000 --> 00:43:13.860
Which is if you're coding with say for example micropython


00:43:14.400 --> 00:43:18.960
And you can't expect your code to work with CPython and vice versa


00:43:18.960 --> 00:43:24.080
because of the differences in the wider platform ecosystem that you might have.


00:43:24.080 --> 00:43:27.440
Mostly the behavior is the same, although there are some very subtle differences.


00:43:27.440 --> 00:43:37.520
But yeah, it's mostly the experiments I've been doing where I've been using Pyedide


00:43:37.520 --> 00:43:42.560
as the sort of the reference and MicroPython as the sort of the thing to compare.


00:43:44.320 --> 00:43:48.880
I can just slot one in and slot the other out and pi script sits on top of it


00:43:48.880 --> 00:43:54.320
And I I can make things work as I want to uh when i'm testing python things


00:43:54.320 --> 00:44:00.400
There's a whole conversation which I think I can see coming down the tube right now about how do you interact with the dom?


00:44:00.400 --> 00:44:03.200
and things like that we'll get to that when we get to it, but


00:44:03.200 --> 00:44:05.120
um


00:44:05.120 --> 00:44:12.000
It's mostly the same but folks should know that they are different. and well, there you go


00:44:12.080 --> 00:44:14.320
I'm just flagging that. I need to flag that.


00:44:14.320 --> 00:44:16.640
Yeah, absolutely. All right.


00:44:16.640 --> 00:44:18.400
Quick question from the audience here is,


00:44:18.400 --> 00:44:22.880
Claude says, do you think more stuff needs to be removed from CPython?


00:44:22.880 --> 00:44:27.200
I mean, I know actually that was one of the things that the 3.11 release


00:44:27.200 --> 00:44:31.600
addressed was a bunch of models were either removed or deprecated.


00:44:31.600 --> 00:44:35.880
Before I think, Brett, we spoke about that


00:44:35.880 --> 00:44:38.280
a year ago or something, maybe.


00:44:39.000 --> 00:44:42.600
>> Yeah, Christian and I came on maybe, yeah, almost a year ago,


00:44:42.600 --> 00:44:45.400
to the-- not the day, but maybe to the month or-- yeah,


00:44:45.400 --> 00:44:46.680
October last year.


00:44:46.680 --> 00:44:49.640
We came on here and talked about us removing modules


00:44:49.640 --> 00:44:52.440
from the standard library.


00:44:52.440 --> 00:44:54.360
Yeah, to directly talk about this, once again,


00:44:54.360 --> 00:44:59.240
personally, not speaking on behalf of any other group,


00:44:59.240 --> 00:45:01.960
I think we--


00:45:01.960 --> 00:45:04.680
I am-- I've actually put myself back up for the Python


00:45:04.680 --> 00:45:05.240
steering council.


00:45:05.240 --> 00:45:07.560
And one of the things I put in my self-nomination


00:45:07.560 --> 00:45:10.860
is I want to have a discussion about what the standard library is, right?


00:45:10.860 --> 00:45:15.860
Which evolves around how do we want to evolve it, maintain it?


00:45:15.860 --> 00:45:19.080
What would go in there today if we were to have guidelines?


00:45:19.080 --> 00:45:22.540
Because we actually don't have guidelines on what should go in.


00:45:22.540 --> 00:45:25.080
Historically, it's just been a core dev has gone, I want this in,


00:45:25.080 --> 00:45:27.840
and people just kind of in general consensus go, okay.


00:45:27.840 --> 00:45:30.120
Or honestly, I'm going to add this.


00:45:30.120 --> 00:45:33.760
And they sometimes have added it because five or some odd core devs


00:45:33.760 --> 00:45:35.420
all agreed to it and just kind of goes in,


00:45:35.420 --> 00:45:37.300
and they just didn't think they have a wider discussion.


00:45:37.300 --> 00:45:40.660
like not going to go down details on that one.


00:45:40.660 --> 00:45:44.460
Anyway, point is, it's not had any guidance to it,


00:45:44.460 --> 00:45:46.980
and it's a discussion I want to have.


00:45:46.980 --> 00:45:51.060
And I don't know if it's going to lead to a shrinkage of the standard library,


00:45:51.060 --> 00:45:53.780
just because, once again, from CPython perspective,


00:45:53.780 --> 00:45:56.580
there's compatibility to consider, right?


00:45:56.580 --> 00:45:58.780
And we don't want to just rip stuff out,


00:45:58.780 --> 00:46:01.660
but it is possible we might start deprecating more stuff, right?


00:46:01.660 --> 00:46:02.900
Beyond what the deb batteries were,


00:46:02.900 --> 00:46:05.260
because the deb battery list was very conservative.


00:46:05.260 --> 00:46:08.960
Basically, almost anyone brought up any objection to something,


00:46:08.960 --> 00:46:12.060
we left it, whether we thought it was reasonable or not.


00:46:12.060 --> 00:46:17.100
So I can very much see a future where we maybe have a list of,


00:46:17.100 --> 00:46:19.840
like, yeah, this stuff's here, but don't really rely on it.


00:46:19.840 --> 00:46:23.140
And obviously, MicroPython probably doesn't already ship that stuff now anyway.


00:46:23.140 --> 00:46:27.480
But yeah, personally, I would love to see the standard library a bit smaller,


00:46:27.480 --> 00:46:29.780
if for any other reason that it just makes it easier to maintain,


00:46:29.780 --> 00:46:33.580
because there used to be before the dead battery pep,


00:46:33.580 --> 00:46:36.220
more modules in their countries in the world.


00:46:36.220 --> 00:46:38.500
So like I have a 198.


00:46:38.500 --> 00:46:41.500
So there's a lot of stuff in there and we can probably stand to shrink.


00:46:41.500 --> 00:46:44.060
And once again, it kind of makes it a little easier for


00:46:44.060 --> 00:46:46.580
other projects to not get pushed back from people like,


00:46:46.580 --> 00:46:48.220
well, where's this module?


00:46:48.220 --> 00:46:49.580
It's in CPython.


00:46:49.580 --> 00:46:51.220
It's like, well, we don't have it.


00:46:51.220 --> 00:46:52.020
Well, why not?


00:46:52.020 --> 00:46:53.700
It's like, if it's not there to begin with,


00:46:53.700 --> 00:46:56.220
it makes their lives a little easier to not have to


00:46:56.220 --> 00:46:57.900
try to support it and push back to people.


00:46:57.900 --> 00:47:01.260
It's like, it just doesn't make sense for us as a platform.


00:47:01.260 --> 00:47:02.100
Right.


00:47:02.100 --> 00:47:03.140
And it was we talked about before.


00:47:03.140 --> 00:47:05.480
came from some of these things being included came from a


00:47:05.480 --> 00:47:07.340
different time. For sure.


00:47:07.340 --> 00:47:10.420
I remember when I got rid of gopher live. So


00:47:10.420 --> 00:47:15.020
also worth noting, but Archie, we're gonna keep we're sticking


00:47:15.020 --> 00:47:17.060
with Archie. Sorry, go ahead.


00:47:17.060 --> 00:47:22.220
I know. No, I was saying they those batteries have a cost. And


00:47:22.220 --> 00:47:26.340
every time you have to run limited devices like micro Python


00:47:26.340 --> 00:47:30.140
or the browser, like you realize that and then the question


00:47:30.140 --> 00:47:38.380
becomes, well, is that user base significant to the Python project to make a change on


00:47:38.380 --> 00:47:45.340
those, right? And that comes with conversation and evolution. So I think it's a problem.


00:47:45.340 --> 00:47:51.020
It's always a trade-off. You say, let's remove TKinter because it's a GUI from the mid-90s


00:47:51.020 --> 00:47:57.540
and nobody uses it. And then everybody points out that the turtle module mostly uses TKinter


00:47:57.540 --> 00:48:05.700
teachers all over the world will scream, you know, and you've got a big problem. So, yeah,


00:48:05.700 --> 00:48:08.420
it's a Gordonian knot.


00:48:08.420 --> 00:48:15.700
Sure is. All right, let's bring in the third major project here, which we've touched on a


00:48:15.700 --> 00:48:20.180
few times. But Fabio, tell us about PyScript. What a cool project.


00:48:21.860 --> 00:48:24.060
- Cool, thank you. - Where does it fit in this


00:48:24.060 --> 00:48:27.540
this Pyodine WebAssembly, MicroPython world?


00:48:27.540 --> 00:48:28.980
What's the angle here?


00:48:28.980 --> 00:48:33.980
- I think it fits as a glue.


00:48:33.980 --> 00:48:37.060
Well, pretty much like Python was glue for a lot of things.


00:48:37.060 --> 00:48:39.820
Like the concept of PyScript was really,


00:48:39.820 --> 00:48:42.100
you know, realizing that a lot of,


00:48:42.100 --> 00:48:45.420
most of the technology for Python to run the browser


00:48:45.420 --> 00:48:49.140
is there and it's been there for years now.


00:48:49.140 --> 00:48:54.140
And what we're missing is the easiness


00:48:54.140 --> 00:48:57.900
to just use it without being,


00:48:57.900 --> 00:49:00.860
without having to spend hours or days looking


00:49:00.860 --> 00:49:03.300
for how to import things on our,


00:49:03.300 --> 00:49:05.480
or the JavaScript side of it,


00:49:05.480 --> 00:49:07.140
what it means on the browser,


00:49:07.140 --> 00:49:11.300
on the, as a web dev to start using Python.


00:49:11.300 --> 00:49:13.900
So the idea was really like--


00:49:13.900 --> 00:49:16.340
- It's one thing to have WebAssembly,


00:49:16.340 --> 00:49:18.460
sorry, it's one thing to have WebAssembly,


00:49:18.460 --> 00:49:24.860
Python. It's another to build meaningful things in the browser with that as a piece, right? And so


00:49:24.860 --> 00:49:29.500
PyScript kind of gives you a framework to write Python code in the browser


00:49:29.500 --> 00:49:35.020
based on this WebAssembly, right? Correct. Nicholas, you want to say?


00:49:35.020 --> 00:49:41.020
Yeah, it's not a framework. It's a platform. And we fully expect people to write


00:49:41.020 --> 00:49:47.980
Pythonic frameworks on the platform that is PyScript to do whatever funky stuff they want


00:49:47.980 --> 00:49:49.540
They want to do in the browser.


00:49:49.540 --> 00:49:50.920
That's their business.


00:49:50.920 --> 00:49:54.340
And I know that I trust the Python community will come up


00:49:54.340 --> 00:49:59.260
with something that we can't even begin to imagine now.


00:49:59.260 --> 00:50:02.340
But the thing to do is remember that PyScript


00:50:02.340 --> 00:50:07.560
is that sort of platform layer rather than a framework.


00:50:07.560 --> 00:50:09.620
But in that platform, what we're looking at


00:50:09.620 --> 00:50:14.660
is perhaps pluggable runtimes and a bare minimum of APIs


00:50:14.660 --> 00:50:17.420
and heuristics and ways of working


00:50:17.420 --> 00:50:19.360
such that you can start to build your frameworks


00:50:19.360 --> 00:50:21.800
on top of this and make the funky stuff,


00:50:21.800 --> 00:50:24.540
Michael, like you said, that's useful for folks.


00:50:24.540 --> 00:50:26.400
- Well, okay.


00:50:26.400 --> 00:50:28.920
Well, so we might have Pyodide,


00:50:28.920 --> 00:50:30.880
which is a more full featured version.


00:50:30.880 --> 00:50:34.740
Might we have MicroPython for a fast, speedy version?


00:50:34.740 --> 00:50:41.580
- Yeah, and there are other projects as well


00:50:41.580 --> 00:50:46.580
that are coming up and, or other languages too, right?


00:50:46.580 --> 00:50:48.300
- Yeah.


00:50:48.300 --> 00:50:50.020
- Yeah.


00:50:50.020 --> 00:50:52.660
Hmm, so this is definitely in the--


00:50:52.660 --> 00:50:54.740
- Would not be interesting.


00:50:54.740 --> 00:50:55.580
- Exactly.


00:50:55.580 --> 00:50:58.300
- There was a big announcement that got thrown in here.


00:50:58.300 --> 00:50:59.140
We'll go this way.


00:50:59.140 --> 00:51:00.260
We'll go with Simon Wilson,


00:51:00.260 --> 00:51:03.260
who was on the previous show about Mastodon,


00:51:03.260 --> 00:51:05.100
previous episode.


00:51:05.100 --> 00:51:08.420
And he has a toot, which by the way, I don't know, Brett,


00:51:08.420 --> 00:51:09.620
you said toot as well earlier,


00:51:09.620 --> 00:51:12.660
But they just, the button on there used to say toot


00:51:12.660 --> 00:51:15.660
until like last week, they just call it publish now.


00:51:15.660 --> 00:51:16.700
I think they're downplaying the toot,


00:51:16.700 --> 00:51:17.980
but it's gonna live on.


00:51:17.980 --> 00:51:22.980
The toot said huge Python WebAssembly news tucked away


00:51:22.980 --> 00:51:25.740
in this post from Anaconda here.


00:51:25.740 --> 00:51:27.940
When you apply MicroPython to Wasm


00:51:27.940 --> 00:51:29.220
and its default configuration,


00:51:29.220 --> 00:51:31.300
something new and exciting emerges


00:51:31.300 --> 00:51:33.580
with a total size of 300 kilobytes.


00:51:33.580 --> 00:51:35.860
This new runtime loads instantly


00:51:35.860 --> 00:51:38.140
and starts executing MicroPython logic


00:51:38.140 --> 00:51:40.040
in less than 100 milliseconds.


00:51:40.040 --> 00:51:42.680
That means the cost of running MicroPython on the web


00:51:42.680 --> 00:51:46.020
is now equivalent to serving up a large image.


00:51:46.020 --> 00:51:48.720
This is awesome, you guys.


00:51:48.720 --> 00:51:50.120
Where are we going with this?


00:51:50.120 --> 00:51:53.480
- Well, whenever you meet Damien,


00:51:53.480 --> 00:51:57.360
you buy him a beer is pretty much what I would suggest.


00:51:57.360 --> 00:51:58.560
Although not too many.


00:51:58.560 --> 00:51:59.400
- Although it's unfair.


00:51:59.400 --> 00:52:00.740
- You want him sober.


00:52:00.740 --> 00:52:03.000
(laughing)


00:52:06.900 --> 00:52:08.360
- Yeah, this is fantastic.


00:52:08.360 --> 00:52:10.280
Because if we do have a really small runtime,


00:52:10.280 --> 00:52:12.480
then all of a sudden you could.


00:52:12.480 --> 00:52:14.640
So when people saw PyScript Fabio, they're like,


00:52:14.640 --> 00:52:17.680
"Oh my gosh, could we replace JavaScript with Python?"


00:52:17.680 --> 00:52:22.140
And the answer was sometimes, but not in general, right?


00:52:22.140 --> 00:52:24.040
- Yeah.


00:52:24.040 --> 00:52:24.860
- Not practically.


00:52:24.860 --> 00:52:29.600
- This is, Paul Everett, who's been around


00:52:29.600 --> 00:52:32.960
the Python ecosystem for a lifetime and is really great.


00:52:32.960 --> 00:52:35.560
And we were talking about that


00:52:35.560 --> 00:52:38.720
and Python for web during PyCon.


00:52:38.720 --> 00:52:41.440
And he often comes up with this distinction


00:52:41.440 --> 00:52:45.860
between the app web versus the content web,


00:52:45.860 --> 00:52:48.240
where in terms of content web,


00:52:48.240 --> 00:52:50.320
you need things to load immediately,


00:52:50.320 --> 00:52:52.920
and you're mostly wanting to show content


00:52:52.920 --> 00:52:55.580
rather than a full blown application.


00:52:55.580 --> 00:52:58.360
And I think he still thinks


00:52:58.360 --> 00:53:03.140
Python is not gonna be a reality for the content web.


00:53:03.140 --> 00:53:07.420
I think this brings it really, really, really close.


00:53:07.420 --> 00:53:12.420
And you can have basically Python running for content,


00:53:12.420 --> 00:53:16.960
but also the amount of possibilities around education,


00:53:16.960 --> 00:53:19.800
around exploration, real time and stuff like this


00:53:19.800 --> 00:53:21.380
is tremendous.


00:53:21.380 --> 00:53:25.500
And if we can actually, as a community,


00:53:25.500 --> 00:53:29.740
gather and understand how we wanna build layers


00:53:29.740 --> 00:53:32.440
on top of other things,


00:53:32.440 --> 00:53:35.220
I think we can come up with really interesting solutions.


00:53:35.220 --> 00:53:37.440
And let me explain, like,


00:53:37.440 --> 00:53:40.480
MicroPython for instance,


00:53:40.480 --> 00:53:43.460
doesn't have a JavaScript interface, right?


00:53:43.460 --> 00:53:45.880
So if we could have a module,


00:53:45.880 --> 00:53:48.820
maybe it's the Pyodide one that we strip out,


00:53:48.820 --> 00:53:52.380
or we develop a new one where we can explore


00:53:52.380 --> 00:53:54.580
that Python to JavaScript interface


00:53:54.580 --> 00:53:57.940
and make it available for all the interpreters.


00:53:57.940 --> 00:54:01.020
And it's just like a package and you can install it.


00:54:01.020 --> 00:54:03.460
we open up a new channel,


00:54:03.460 --> 00:54:08.460
and or the whole packaging story for Python on the browser.


00:54:08.460 --> 00:54:11.620
And if we can figure that out in a way that,


00:54:11.620 --> 00:54:13.580
we can just install packages


00:54:13.580 --> 00:54:16.820
and doesn't matter the interpreter


00:54:16.820 --> 00:54:19.160
because it all ended up like being Wasm.


00:54:19.160 --> 00:54:24.420
Then I think we can build a very strong ecosystem


00:54:24.420 --> 00:54:27.700
where if you need more complicated things,


00:54:27.700 --> 00:54:30.980
you run with your full CPython and Wasm.


00:54:30.980 --> 00:54:34.060
interpreter, otherwise you can just use micro Python.


00:54:34.060 --> 00:54:37.940
But I think right now is the time


00:54:37.940 --> 00:54:40.300
where we start doing those things.


00:54:40.300 --> 00:54:44.220
- Coming from the Anaconda world,


00:54:44.220 --> 00:54:47.220
there's one view of like,


00:54:47.220 --> 00:54:49.340
what does Python computation mean, right?


00:54:49.340 --> 00:54:52.660
Often that means kind of notebooks and data science


00:54:52.660 --> 00:54:55.300
and like scientific computing.


00:54:55.300 --> 00:54:58.400
And there's a big desire to sort of move that


00:54:58.400 --> 00:55:01.240
to the front end and just say,


00:55:01.240 --> 00:55:02.700
let people run that on their computers


00:55:02.700 --> 00:55:05.880
and they can do kind of like notebook things


00:55:05.880 --> 00:55:07.320
on the front end.


00:55:07.320 --> 00:55:10.300
But there's a whole other side of the web that says,


00:55:10.300 --> 00:55:14.300
I wanna build Gmail, but not in JavaScript on the front end,


00:55:14.300 --> 00:55:16.920
but I want that interactivity or I want maps


00:55:16.920 --> 00:55:21.920
or I want most modern highlight dynamic,


00:55:21.920 --> 00:55:24.880
single page app type of web apps,


00:55:24.880 --> 00:55:26.580
but I wanna write that in Python.


00:55:27.560 --> 00:55:29.900
Those, that to me feels like


00:55:29.900 --> 00:55:31.720
that's almost the dividing point of like,


00:55:31.720 --> 00:55:35.480
well, we want the Pyodide runtime where it's rich


00:55:35.480 --> 00:55:38.560
and we can just straight grab matplotlib


00:55:38.560 --> 00:55:40.800
and run with it or pandas


00:55:40.800 --> 00:55:43.080
versus I'm willing to give up a lot


00:55:43.080 --> 00:55:45.280
to not write JavaScript.


00:55:45.280 --> 00:55:46.120
You know what I mean?


00:55:46.120 --> 00:55:47.520
If I've got to only use a few packages


00:55:47.520 --> 00:55:50.240
and I could still write Python end to end,


00:55:50.240 --> 00:55:51.600
that makes me super happy.


00:55:51.600 --> 00:55:53.920
- Right.


00:55:53.920 --> 00:55:55.600
And as you said,


00:55:55.600 --> 00:55:59.360
like we can augment the things that Python can do.


00:55:59.360 --> 00:56:03.520
Like if we all of a sudden have access to the browser APIs


00:56:03.520 --> 00:56:06.600
for geolocation or other things,


00:56:06.600 --> 00:56:08.940
then you can write very interesting applications


00:56:08.940 --> 00:56:11.900
that is just Python or, you know,


00:56:11.900 --> 00:56:14.800
even a mobile and stuff like this,


00:56:14.800 --> 00:56:17.840
'cause WebAssembly can run on mobile as well.


00:56:17.840 --> 00:56:22.160
So yeah, the competition between that,


00:56:22.160 --> 00:56:25.520
all the arguments framing PyScript versus JavaScript,


00:56:25.520 --> 00:56:28.280
I think they really missed the point where it is,


00:56:28.280 --> 00:56:31.240
it is augmenting both ecosystems, right?


00:56:31.240 --> 00:56:36.240
Right now, we now can use D3 in Python and vice versa.


00:56:36.240 --> 00:56:40.480
JavaScript developers can use NumPy or pandas.


00:56:40.480 --> 00:56:43.120
It's a win-win to be honest.


00:56:43.120 --> 00:56:45.840
- Yeah, one of the things I think maybe people


00:56:45.840 --> 00:56:48.000
when they hear this don't necessarily know,


00:56:48.000 --> 00:56:51.080
and I forget which is maybe the best one to look at,


00:56:51.080 --> 00:56:54.640
but not only can you run Python code in the browser


00:56:54.640 --> 00:56:57.060
with PyScript, but you can hook JavaScript events


00:56:57.060 --> 00:56:59.160
and then you can change DOM elements.


00:56:59.160 --> 00:57:01.600
This was the JavaScript DOM interaction layer


00:57:01.600 --> 00:57:04.160
you were talking about before, right?


00:57:04.160 --> 00:57:05.280
- Yeah, yes.


00:57:05.280 --> 00:57:07.680
And actually to what Nicholas was saying


00:57:07.680 --> 00:57:09.520
about the difference between,


00:57:09.520 --> 00:57:14.520
we wanna really sell the point that PyScript is a platform.


00:57:14.520 --> 00:57:18.200
We're currently working on plugins


00:57:18.200 --> 00:57:23.160
where we want developers to actually write Python code


00:57:23.160 --> 00:57:26.640
to add custom elements to the DOM as well, right?


00:57:26.640 --> 00:57:28.960
And not use any JavaScript.


00:57:28.960 --> 00:57:31.680
I hope we can get it in this next release,


00:57:31.680 --> 00:57:34.180
but for sure before the end of the year,


00:57:34.180 --> 00:57:35.140
we are allowing that.


00:57:35.140 --> 00:57:37.520
And it's gonna be a huge improvement


00:57:37.520 --> 00:57:41.120
in what people can do with PyScript


00:57:41.120 --> 00:57:44.280
and actually how can people extend the platform


00:57:44.280 --> 00:57:45.620
creating new frameworks.


00:57:45.620 --> 00:57:51.280
- So are you envisioning or are you at least aiming for,


00:57:51.280 --> 00:57:56.280
if not fully envisioning something like PyView or PyReact


00:57:56.280 --> 00:58:00.000
or like some of these traditional front-end frameworks,


00:58:00.000 --> 00:58:01.540
but a Python equivalent.


00:58:01.540 --> 00:58:04.180
- Nicholas.


00:58:04.180 --> 00:58:09.400
- That's a loaded question.


00:58:09.400 --> 00:58:11.920
I think, I think--


00:58:11.920 --> 00:58:12.960
- PyAngular?


00:58:12.960 --> 00:58:13.800
No, just kidding.


00:58:13.800 --> 00:58:15.560
- Pangular.


00:58:19.640 --> 00:58:26.680
I think that it makes a great story if you're a journalist that Python's going to come up and eat JavaScript's


00:58:26.680 --> 00:58:30.200
Lunch in the browser. that's a false dichotomy


00:58:30.200 --> 00:58:35.720
That's a that's a great way of getting clickbait and things if you want to write


00:58:35.720 --> 00:58:37.880
um


00:58:37.880 --> 00:58:39.240
you know app


00:58:39.240 --> 00:58:43.720
Uh web-based app stuff and you're familiar with javascript and react, you know


00:58:44.040 --> 00:58:49.320
Just use the tools that you're that they empower you to write the stuff that you want


00:58:49.320 --> 00:58:55.000
But for the quartet of us in this conversation, we're all python easters. We we all


00:58:55.000 --> 00:59:02.760
Appreciate the aesthetic of that language in the way it works. and so, uh


00:59:02.760 --> 00:59:07.000
I would go back to the difference between a platform and a framework


00:59:07.000 --> 00:59:08.520
um


00:59:08.520 --> 00:59:15.420
Our point from earlier on which is it's going to be fun to trust the community our remarkable community


00:59:15.420 --> 00:59:19.400
And see what interesting things what itches that they scratch


00:59:19.400 --> 00:59:25.080
Um so that they create fun stuff and feedback to us ways in which we can improve


00:59:25.080 --> 00:59:30.680
The pi script offering because this is a story that's going to keep going. you know software is never finished


00:59:30.680 --> 00:59:32.680
um


00:59:32.680 --> 00:59:33.560
but


00:59:33.560 --> 00:59:35.320
I think that


00:59:35.320 --> 00:59:36.440
um


00:59:36.440 --> 00:59:43.480
One thing I hope and if i'm honest with you, this is really why I joined anaconda was to help


00:59:43.480 --> 00:59:47.160
Think about these things exactly the question that you've just asked michael, you know


00:59:47.160 --> 00:59:51.640
What about all of these kind of things of building apps with python in the browser?


00:59:51.640 --> 00:59:53.240
um


00:59:53.240 --> 00:59:54.120
well


00:59:54.120 --> 00:59:56.920
What I found is that I need to dig a bit lower to do some


00:59:56.920 --> 01:00:00.680
More call pi scripty things and then dig a bit lower to look at perhaps


01:00:00.680 --> 01:00:05.240
What the runtimes are doing and blah and here I am messing around with with micropython now


01:00:05.320 --> 01:00:11.400
But hopefully I want to sort of surface as it were and get back to what I thought I was going to be doing


01:00:11.400 --> 01:00:15.000
Which is thinking about these sorts of things and what I really hope to do


01:00:15.000 --> 01:00:19.480
But what I really hope to see from the python community as well is engagement in


01:00:19.480 --> 01:00:23.640
Frameworks that


01:00:23.640 --> 01:00:30.040
Will empower people and i'm thinking of the educational sphere as well here because let's face it


01:00:30.040 --> 01:00:34.840
I don't know if you've ever faced 30 teenagers on a friday afternoon and somebody's introduced you as


01:00:34.840 --> 01:00:40.920
Nicholas a coder who's going to teach you about python. there's nothing more intimidating than that.


01:00:40.920 --> 01:00:45.560
So, and let me tell you print. Hello world doesn't cut the mustard


01:00:45.560 --> 01:00:47.880
Okay, this is not exciting for them


01:00:47.880 --> 01:00:53.720
But if we can make I want to build this thing. I saw an unreal engine 5 in python. Exactly


01:00:53.720 --> 01:00:55.800
Exactly exactly


01:00:55.800 --> 01:01:00.920
But if we could make it so that they can do the equivalent of, you know, the MySpace,


01:01:00.920 --> 01:01:05.720
"Hi Nan, I'm on the internet," and you know, within two minutes you've got a website.


01:01:05.720 --> 01:01:10.360
You know, you've got a very quick way of getting onto a mobile phone or tablet, which,


01:01:10.360 --> 01:01:13.640
let's face it, for today's teenagers, that's their primary computing device.


01:01:13.640 --> 01:01:17.240
And I've been in classrooms where, you know, kids can't type.


01:01:17.240 --> 01:01:19.560
It's not because they don't know what a keyboard is.


01:01:19.560 --> 01:01:22.440
They use a keyboard every day, but they just use their thumbs like this with it.


01:01:22.440 --> 01:01:24.120
And when you give them an actual mechanical keyboard,


01:01:24.120 --> 01:01:26.120
It's just really bad.


01:01:26.120 --> 01:01:29.000
We are dinosaurs using these keyboards now, right?


01:01:29.000 --> 01:01:32.120
Okay, we're going to evolve massive thumbs or something,


01:01:32.120 --> 01:01:35.240
but it's that sort of a situation, okay?


01:01:35.240 --> 01:01:38.200
We've got to be aware of what these platforms are


01:01:38.200 --> 01:01:40.240
that folks are using,


01:01:40.240 --> 01:01:42.840
that may be outside of our kind of age group and usage


01:01:42.840 --> 01:01:45.160
and help them do things with that.


01:01:45.160 --> 01:01:47.840
You're touching on a very important part


01:01:47.840 --> 01:01:49.680
of the PyScript vision,


01:01:49.680 --> 01:01:54.680
and it's really not about the current Python community


01:01:54.680 --> 01:01:56.120
or user base.


01:01:56.120 --> 01:01:58.860
Like it actually is,


01:01:58.860 --> 01:02:03.860
how can we democratize programming and Python and everything?


01:02:03.860 --> 01:02:07.240
And so we really wanna be thinking about


01:02:07.240 --> 01:02:09.400
who's not thinking about coding at all.


01:02:09.400 --> 01:02:12.820
Like people that would love to use a programming language


01:02:12.820 --> 01:02:15.700
as a tool for them to do things,


01:02:15.700 --> 01:02:18.120
and they can't either because, you know,


01:02:18.120 --> 01:02:22.520
time or because it's too complicated to get Python working or all of that.


01:02:22.520 --> 01:02:32.200
So that's a pluggable, and I'm going to quote Peter again because we were talking and


01:02:32.200 --> 01:02:40.200
welcome back, Nicholas. Peter at some point mentioned something like


01:02:40.200 --> 01:02:45.160
system design with plugins from the beginning is kind of indication of the developers not


01:02:45.160 --> 01:02:51.520
really knowing what they're doing or not really knowing what it should do, which sometimes


01:02:51.520 --> 01:02:53.120
is a negative connotation.


01:02:53.120 --> 01:02:59.320
But for PyScript, it's definitely intentional because we want the community to be able to


01:02:59.320 --> 01:03:00.600
create their own things.


01:03:00.600 --> 01:03:03.560
And it's really greenfield.


01:03:03.560 --> 01:03:05.480
So I don't know what they're going to be doing.


01:03:05.480 --> 01:03:12.720
I want to allow them to do crazy things and surprises.


01:03:12.720 --> 01:03:22.400
DjangoCon, Patrick came up with this experiment of running Django on either PyScript or PyDi.


01:03:22.400 --> 01:03:31.280
And my first question was, why? Right? But then, who cares? Like, I don't need to know why.


01:03:31.280 --> 01:03:34.480
>> The web is inside the web. >> Exactly.


01:03:37.440 --> 01:03:38.880
So that's the whole point.


01:03:38.880 --> 01:03:40.580
I can we want to make it money,


01:03:40.580 --> 01:03:43.420
accessible and a hacker hackerspace.


01:03:43.420 --> 01:03:44.500
A safe hackerspace.


01:03:44.500 --> 01:03:46.620
Yeah, it's such awesome.


01:03:46.620 --> 01:03:49.260
Or congratulations you guys on this.


01:03:49.260 --> 01:03:51.780
When will we see something that we


01:03:51.780 --> 01:03:54.540
outside that don't want to grab onto


01:03:54.540 --> 01:03:57.260
an in flight open source project,


01:03:57.260 --> 01:04:00.560
but like a release equivalent of this?


01:04:00.560 --> 01:04:03.140
Is there some time frame some


01:04:03.140 --> 01:04:05.380
thought about when that's out?


01:04:06.420 --> 01:04:08.900
Niklas, this is the right time to drop from the call.


01:04:08.900 --> 01:04:18.180
Okay, so I can certainly tell you what the state of play is right now and you can extrapolate when


01:04:18.180 --> 01:04:25.940
you may see sort of things like MicroPython. So because PyScript, proper PyScript,


01:04:25.940 --> 01:04:35.460
is undergoing active development, I didn't want to try and plug in new run times, new interpreters,


01:04:35.460 --> 01:04:39.620
was whilst the sand underneath me was shifting, as it were.


01:04:39.620 --> 01:04:42.840
So I created a very small and simple test harness


01:04:42.840 --> 01:04:45.400
version of PyScript that I've called,


01:04:45.400 --> 01:04:47.780
surprisingly enough, MicroPyScript.


01:04:47.780 --> 01:04:49.920
That is going to be thrown away.


01:04:49.920 --> 01:04:53.360
Its sole purpose was to allow me to just poke these things


01:04:53.360 --> 01:04:55.120
with a stick and see what happens.


01:04:55.120 --> 01:04:57.360
And I'm still using that to, for instance,


01:04:57.360 --> 01:05:01.280
figure out how we can do MicroPython DOM


01:05:01.280 --> 01:05:04.920
connectivity and interactions as well.


01:05:04.920 --> 01:05:06.960
That's literally what I've been doing all day today,


01:05:06.960 --> 01:05:11.960
is reading articles that I needed to do to make that happen.


01:05:11.960 --> 01:05:14.500
- That's awesome.


01:05:14.500 --> 01:05:15.420
That's what we've talked so much.


01:05:15.420 --> 01:05:18.440
Once the DOM is in play, then all of a sudden it's on.


01:05:18.440 --> 01:05:21.320
- Everything else is, yes, exactly, exactly.


01:05:21.320 --> 01:05:26.320
Once that's in place, what I imagine will happen


01:05:26.320 --> 01:05:28.880
is Nicholas is gonna be spending a lot of time


01:05:28.880 --> 01:05:33.840
with the main code base and pairing with people


01:05:33.840 --> 01:05:38.320
Know it a lot better than I currently do because it's been maybe a couple of months since i've last looked at it


01:05:38.320 --> 01:05:42.960
Um, and it's changed a lot since then and we'll integrate that work


01:05:42.960 --> 01:05:47.440
So I I expect and this is a finger in the air and remember i'm in it


01:05:47.440 --> 01:05:52.980
You know, the right answer is when it's ready, but I imagine it's going to be kind of springtime


01:05:52.980 --> 01:05:55.200
uh


01:05:55.200 --> 01:06:01.200
time, uh first third of you say maybe in april like i'm not gonna mention any day


01:06:01.200 --> 01:06:02.040
- 2020. - 2020.


01:06:02.040 --> 01:06:02.880
- 2020, I'm like, oh. - 'Cause you're just


01:06:02.880 --> 01:06:03.700
gonna hold me to it, aren't you?


01:06:03.700 --> 01:06:04.540
(laughing)


01:06:04.540 --> 01:06:06.800
I'm not gonna mention any date.


01:06:06.800 --> 01:06:09.400
- I'm just teasing you, I'm not holding you to that.


01:06:09.400 --> 01:06:15.520
- I hear that, you know, conferenceware is very real,


01:06:15.520 --> 01:06:19.000
so we can promise for PyCon, no problem.


01:06:19.000 --> 01:06:21.480
- Yeah, I hear a good place to announce


01:06:21.480 --> 01:06:26.420
new JavaScript packages is Salt Lake City in April.


01:06:26.420 --> 01:06:28.440
So, Brett, I'm gonna give you the final word here,


01:06:28.440 --> 01:06:30.800
maybe to like put one more thought into this


01:06:30.800 --> 01:06:32.100
before we wrap up our show.


01:06:32.100 --> 01:06:36.760
- Nicholas talked about, and Fabio also talked about,


01:06:36.760 --> 01:06:38.280
like how do we, you know,


01:06:38.280 --> 01:06:40.580
this could be an empowering thing for other people, right?


01:06:40.580 --> 01:06:43.560
Like if for kids in education and whatnot,


01:06:43.560 --> 01:06:47.120
if you look at a lot of education is Chromebooks,


01:06:47.120 --> 01:06:48.720
you know what runs great on Chromebooks?


01:06:48.720 --> 01:06:50.240
The web.


01:06:50.240 --> 01:06:52.560
Also VS Code in the browser.


01:06:52.560 --> 01:06:57.360
Like there's, is there some thought of like interesting


01:06:57.360 --> 01:07:00.080
pure web development environments, runtime environments,


01:07:00.080 --> 01:07:03.120
like end to end things that could be done.


01:07:03.120 --> 01:07:06.600
- We actually announced that for VS Code in our last release.


01:07:06.600 --> 01:07:07.960
If you go read our release notes,


01:07:07.960 --> 01:07:10.400
we actually have an extension that will load up


01:07:10.400 --> 01:07:13.080
into vscode.dev, which is an actual website,


01:07:13.080 --> 01:07:14.080
not the name of a product.


01:07:14.080 --> 01:07:15.440
You literally go to vscode.dev,


01:07:15.440 --> 01:07:17.440
it'll load up VS Code in the browser.


01:07:17.440 --> 01:07:19.880
And there's a Python extension by my teammate Dirk


01:07:19.880 --> 01:07:22.280
that uses Wazzy and the CPython build,


01:07:22.280 --> 01:07:25.240
where you have a REPL,


01:07:25.240 --> 01:07:28.200
you can run code from your workspace,


01:07:28.200 --> 01:07:29.440
wherever it's loaded, right?


01:07:29.440 --> 01:07:30.820
It doesn't have to be on disk.


01:07:30.820 --> 01:07:32.080
It can come from GitHub,


01:07:32.080 --> 01:07:34.400
anywhere VS Code can read files from.


01:07:34.400 --> 01:07:39.280
It can load and be seen by Python interpreter itself.


01:07:39.280 --> 01:07:40.200
So that's all working.


01:07:40.200 --> 01:07:44.260
And just this past week, it's not out yet, to be very clear,


01:07:44.260 --> 01:07:47.560
Dirk got debugging working using Wazzy


01:07:47.560 --> 01:07:50.720
and a very cool trick that everyone can,


01:07:50.720 --> 01:07:53.880
it's very Unix-y.


01:07:53.880 --> 01:07:56.060
Well, I don't want to spoil it.


01:07:56.060 --> 01:07:56.900
It's going to be open source,


01:07:56.900 --> 01:07:58.340
so it's not a trade secret or anything,


01:07:58.340 --> 01:08:01.140
It's way easier to read about it than try to explain it on a podcast,


01:08:01.140 --> 01:08:03.140
but we got debugging working as well.


01:08:03.140 --> 01:08:09.100
So we are trying to work towards a complete development story


01:08:09.100 --> 01:08:13.580
such that, once again, for beginners, for learners, for the education market,


01:08:13.580 --> 01:08:17.100
to at least have a baseline Python experience


01:08:17.100 --> 01:08:23.580
where you can write code, read code, read files, debug,


01:08:23.580 --> 01:08:26.420
like what you would want to have when you're facing down


01:08:26.420 --> 01:08:30.760
that classroom of 30 kids that Nicholas has shown is very scary


01:08:30.760 --> 01:08:33.260
to at least have something you can have them all just pull up.


01:08:33.260 --> 01:08:37.820
I do want to add two other things to this, though,


01:08:37.820 --> 01:08:42.320
is actually kind of call to actions for the community around all this.


01:08:42.320 --> 01:08:46.420
One is I don't think we've all started to think about the opportunities here


01:08:46.420 --> 01:08:47.860
beyond what we've talked about.


01:08:47.860 --> 01:08:50.260
There's more to this than just what we have in the browser.


01:08:50.260 --> 01:08:53.260
And it's one of these rising ties lifts all shifts.


01:08:53.260 --> 01:08:56.860
so it's not that I want to take away from what Price Script's done,


01:08:56.860 --> 01:08:57.960
all this wonderful stuff in the browser,


01:08:57.960 --> 01:09:00.160
but I think if we can get more WebAssembly stuff kind of going,


01:09:00.160 --> 01:09:02.560
it helps cause everyone to try to look into this more,


01:09:02.560 --> 01:09:04.960
which will lead to more Price Script engagement.


01:09:04.960 --> 01:09:08.960
So I think there's some use cases we haven't really tackled yet in the community,


01:09:08.960 --> 01:09:14.860
where if you just stop and look about where's things really oriented towards JavaScript as a platform,


01:09:14.860 --> 01:09:17.560
and go like, "Oh, you know what? We might be able to use Python here now."


01:09:17.560 --> 01:09:21.460
For instance, you could probably, and I haven't had time to test this,


01:09:21.460 --> 01:09:23.460
but I see zero reason why this couldn't work.


01:09:23.460 --> 01:09:26.460
You could probably start writing GitHub Actions in Python now.


01:09:26.460 --> 01:09:30.160
Because guess what? It runs on Node, and Node can run WebAssembly.


01:09:30.160 --> 01:09:34.160
So we could totally take either Nicholas's MicroPython build,


01:09:34.160 --> 01:09:36.260
or we could take the CPython build,


01:09:36.260 --> 01:09:38.960
and totally just have as part of a GitHub Action,


01:09:38.960 --> 01:09:41.760
as the first step in the JavaScript, load Python,


01:09:41.760 --> 01:09:43.560
and then suddenly just say, "Call this function,"


01:09:43.560 --> 01:09:46.360
and then suddenly all your stuff's going through Python.


01:09:46.360 --> 01:09:49.160
Because guess what? At that point, GitHub Actions is all totally driven


01:09:49.160 --> 01:09:51.160
and some special formatting in it.


01:09:51.160 --> 01:09:53.160
So you could totally just do that.


01:09:53.160 --> 01:09:55.160
And I think Nicholas wants to interject.


01:09:55.160 --> 01:09:57.160
Yeah, it's worth pointing out that Damien,


01:09:57.160 --> 01:09:59.160
who has done a lot of work on getting


01:09:59.160 --> 01:10:01.160
MicroPython to work with Wasm,


01:10:01.160 --> 01:10:03.160
because clearly he knows the code base


01:10:03.160 --> 01:10:05.160
and things like that.


01:10:05.160 --> 01:10:07.160
MicroPython, if you look very carefully


01:10:07.160 --> 01:10:09.160
at the WebAssembly port,


01:10:09.160 --> 01:10:11.160
you'll notice that


01:10:11.160 --> 01:10:13.160
there are conditionals that check


01:10:13.160 --> 01:10:15.160
whether it's running in Node


01:10:15.160 --> 01:10:17.160
or in a browser.


01:10:17.160 --> 01:10:20.840
Browsers, so go knock yourself out. Try that. I've not tried it.


01:10:20.840 --> 01:10:27.080
I've clearly been busy doing other things but folks might want to have a go, uh at using I mean


01:10:27.080 --> 01:10:32.520
I feel like we should award a prize or something you you you you win a thumbs up or something like that if you can


01:10:32.520 --> 01:10:35.160
Get a github action running micro python


01:10:35.160 --> 01:10:40.600
The other call. yeah, I mean that's fantastic, right? Like I I think there's opportunities here


01:10:40.600 --> 01:10:43.960
We just haven't even touched yet that the community can totally just lean into that


01:10:43.960 --> 01:10:46.700
that we haven't had opportunity to be able to do before.


01:10:46.700 --> 01:10:48.000
The other thing I want to lean into here


01:10:48.000 --> 01:10:49.440
that we've talked about languages


01:10:49.440 --> 01:10:50.680
versus platforms and all this,


01:10:50.680 --> 01:10:53.620
the one key thing across all of this story


01:10:53.620 --> 01:10:55.680
is Python the language.


01:10:55.680 --> 01:10:57.640
So this is going to sound a little weird,


01:10:57.640 --> 01:11:00.840
but I want to push people to write more Python code.


01:11:00.840 --> 01:11:03.980
And the reason I phrase it this way is we've historically


01:11:03.980 --> 01:11:05.680
as a community done great about this,


01:11:05.680 --> 01:11:08.280
but we will reach for that Rust code


01:11:08.280 --> 01:11:09.520
or that C code or whatever


01:11:09.520 --> 01:11:11.680
to write that little bit a little faster.


01:11:11.680 --> 01:11:15.520
But when you do that, well, right now, Fabio and Nicholas


01:11:15.520 --> 01:11:17.680
shed a tear because that makes it that much harder


01:11:17.680 --> 01:11:19.200
to make that run in PyScript, right?


01:11:19.200 --> 01:11:20.840
And same for anyone else who wants to do


01:11:20.840 --> 01:11:21.980
this WebAssembly thing, right?


01:11:21.980 --> 01:11:24.860
Anytime you write anything in something other than Python,


01:11:24.860 --> 01:11:27.480
it's harder to get running, right, somewhere else.


01:11:27.480 --> 01:11:30.400
Now, you mentioned the 3.11 release, Michael.


01:11:30.400 --> 01:11:32.280
My hope here is now that we've got


01:11:32.280 --> 01:11:34.360
that nice little performance boost there,


01:11:34.360 --> 01:11:35.980
that's going to motivate people


01:11:35.980 --> 01:11:38.600
who are primarily trying to see Python at the moment


01:11:38.600 --> 01:11:41.400
to write more code in Python and reach for the C code


01:11:41.400 --> 01:11:43.820
the rest code less because once again,


01:11:43.820 --> 01:11:45.480
that stuff can get brought over today.


01:11:45.480 --> 01:11:48.260
There is nothing you have to do to make this work.


01:11:48.260 --> 01:11:52.020
You can load pure Python wheels in PyScript.


01:11:52.020 --> 01:11:53.420
You can do that on WebAssembly.


01:11:53.420 --> 01:11:55.340
It just runs.


01:11:55.340 --> 01:11:59.640
We can nudge the community back towards running more Python and


01:11:59.640 --> 01:12:01.980
leaning less on the accelerator code that


01:12:01.980 --> 01:12:05.380
we have historically written for these platforms or do both.


01:12:05.380 --> 01:12:08.100
If you can at least prototype in Python and keep that running,


01:12:08.100 --> 01:12:10.700
and then write the accelerator code behind the scenes.


01:12:10.700 --> 01:12:13.700
You can have multiple wheels, including a pure Python wheel.


01:12:13.700 --> 01:12:17.040
Right? Like coverage.py, we all know, does this exact thing,


01:12:17.040 --> 01:12:19.040
so it works no matter where you are.


01:12:19.040 --> 01:12:21.040
Same thing for this case, right?


01:12:21.040 --> 01:12:23.380
Like, if you can get the pure Python wheel out there,


01:12:23.380 --> 01:12:25.380
then it's going to be usable everywhere.


01:12:25.380 --> 01:12:27.380
And so that's kind of a baseline target.


01:12:27.380 --> 01:12:30.380
I hope the community kind of leans into more than we have


01:12:30.380 --> 01:12:32.380
in the last few years,


01:12:32.380 --> 01:12:36.380
where, yeah, write your Python code even more than you may have before,


01:12:36.380 --> 01:12:38.380
because it's usable in more places.


01:12:39.380 --> 01:12:43.380
That's the really great advice.


01:12:43.380 --> 01:12:47.380
And it's not done getting faster, right? The faster CPython


01:12:47.380 --> 01:12:51.380
team is still making a bunch of steps. So it's much faster now, but there's


01:12:51.380 --> 01:12:55.380
still 3.11, 3.13, or 3.12, 3.13, so on.


01:12:55.380 --> 01:12:59.380
Yeah, exactly. It's going to keep going. I don't know how much faster


01:12:59.380 --> 01:13:03.380
3.12 may or may not be. I think there's some plans for 3.12 that are


01:13:03.380 --> 01:13:07.380
really foundational. So the bump might not be quite as big as 3.11, but


01:13:07.380 --> 01:13:11.220
3.13, if the foundation lays in 3.12, we'll hopefully get the bump.


01:13:11.220 --> 01:13:15.180
So yeah, it's hopeful you'll keep getting those wins going forward, right?


01:13:15.180 --> 01:13:19.140
And I know Damien's still working on mycopython to make it faster and smaller


01:13:19.140 --> 01:13:20.020
and better and all that stuff.


01:13:20.020 --> 01:13:21.820
So it's not just a CPython thing either.


01:13:21.820 --> 01:13:25.620
Like the whole, everyone's always trying to make Python run better on all these


01:13:25.620 --> 01:13:28.380
platforms. So key thing though, is the common,


01:13:28.380 --> 01:13:32.500
the common bottom layer of all these platforms is actually Python itself.


01:13:32.500 --> 01:13:34.660
So if we can target that more as a community,


01:13:34.980 --> 01:13:37.700
will actually be able to get more use out of the code


01:13:37.700 --> 01:13:40.420
and for what people have produced in more places.


01:13:40.420 --> 01:13:43.620
And once again, help Nicholas when he faces down that class of 30.


01:13:43.620 --> 01:13:45.620
[LAUGHTER]


01:13:45.620 --> 01:13:49.940
Yes, you can create call of duty. Okay.


01:13:49.940 --> 01:13:52.500
Thank you, Brett. That's great thoughts.


01:13:52.500 --> 01:13:55.540
And it also points out I should pay more attention to those release notes


01:13:55.540 --> 01:13:57.140
when they come up in my VS Code.


01:13:57.140 --> 01:14:00.100
I'm like, "Oh, new one. Out of the way. Maybe I'll read them."


01:14:00.100 --> 01:14:02.100
[LAUGHTER]


01:14:02.340 --> 01:14:04.100
All right, you guys, thank you so much


01:14:04.100 --> 01:14:05.620
for all the work on this.


01:14:05.620 --> 01:14:07.700
This is super exciting.


01:14:07.700 --> 01:14:12.700
And yeah, I'm looking forward to hearing about it in spring


01:14:12.700 --> 01:14:14.300
or whenever it's ready.


01:14:14.300 --> 01:14:18.820
Brett, Fabio, Nicholas, thanks for being here.


01:14:18.820 --> 01:14:20.260
It's been great.


01:14:20.260 --> 01:14:21.100
- Thanks, Michael.


01:14:21.100 --> 01:14:21.920
- Thank you, Michael.


01:14:21.920 --> 01:14:23.940
It was great. - Thank you, Michael.


01:14:23.940 --> 01:14:25.060
- Yeah, you bet, bye all.


01:14:25.060 --> 01:14:26.580
Thanks everyone for listening.


01:14:26.580 --> 01:14:36.580
[BLANK_AUDIO]

