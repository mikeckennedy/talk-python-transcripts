WEBVTT

00:00:00.000 --> 00:00:02.500
- Hey YouTube, hey Peter.


00:00:02.500 --> 00:00:07.260
- Hi Michael, thanks for inviting me to your podcast.


00:00:07.260 --> 00:00:08.220
- Yeah, absolutely.


00:00:08.220 --> 00:00:12.020
I'm so happy to have you first here on the channel


00:00:12.020 --> 00:00:15.660
here at YouTube and of course on the podcast.


00:00:15.660 --> 00:00:17.680
So if you're listening live,


00:00:17.680 --> 00:00:19.420
give us some comments and feedback.


00:00:19.420 --> 00:00:22.460
I can already see a pre-question has been posted here


00:00:22.460 --> 00:00:25.500
in the live chat, so we'll try to get to that.


00:00:25.500 --> 00:00:27.740
If you're watching the replay, thanks for watching.


00:00:27.740 --> 00:00:29.660
All right, ready to kick this off?


00:00:29.660 --> 00:00:30.580
- Yeah.


00:00:30.580 --> 00:00:33.080
- All right, Fyodor, welcome to Talk Python to Me.


00:00:33.080 --> 00:00:35.500
- Thanks.


00:00:35.500 --> 00:00:42.340
So I'm Fyodor Fitsner, I'm working on this flat project.


00:00:42.340 --> 00:00:46.820
- So excited about your project.


00:00:46.820 --> 00:00:48.620
- Well, I'm excited as well.


00:00:48.620 --> 00:00:51.860
It's something new, yeah, it's open source,


00:00:51.860 --> 00:00:54.640
I love open source, and it's actually,


00:00:54.640 --> 00:00:58.740
this project is a spin-off.


00:00:58.740 --> 00:01:03.280
you know, it's like a second iteration.


00:01:03.280 --> 00:01:06.740
Yeah, because I started...


00:01:06.740 --> 00:01:07.740
Yeah, yeah.


00:01:07.740 --> 00:01:09.740
You had a project called...


00:01:09.740 --> 00:01:10.740
What was it called?


00:01:10.740 --> 00:01:12.740
It's called Pagelet, right?


00:01:12.740 --> 00:01:14.240
Is that what you're referring to?


00:01:14.240 --> 00:01:17.240
So yeah, it was Pagelet.


00:01:17.240 --> 00:01:26.240
So we started as an internal tool for making quick apps,


00:01:26.240 --> 00:01:29.360
you know, like throwaway apps.


00:01:29.360 --> 00:01:31.280
And it was for web mostly.


00:01:31.280 --> 00:01:35.760
So it's like, it started like as a web thing.


00:01:35.760 --> 00:01:39.600
And yeah, it was PageLab.


00:01:39.600 --> 00:01:44.160
Then I shortened the name to PGLab.


00:01:44.160 --> 00:01:46.960
And some guy on Hacker News said


00:01:46.960 --> 00:01:49.440
that it's probably about like Polgram,


00:01:49.440 --> 00:01:52.640
something like, or PostgresQL.


00:01:52.640 --> 00:01:54.320
Yeah, so I got confused.


00:01:54.320 --> 00:01:57.800
and I started calling it like BeGlad.


00:01:57.800 --> 00:02:03.560
So I didn't like the name and I didn't like that it's only web.


00:02:03.560 --> 00:02:04.120
>> Yeah.


00:02:04.120 --> 00:02:08.720
>> Because the next step right after web,


00:02:08.720 --> 00:02:15.200
I started looking into doing desktop apps with this stuff,


00:02:15.200 --> 00:02:21.880
and realized that actually the only choice is using WebView.


00:02:21.880 --> 00:02:26.440
And WebView is really platform specific.


00:02:26.440 --> 00:02:30.640
So on macOS is one thing, it's like Safari.


00:02:30.640 --> 00:02:35.640
On Windows is like either like WebView 1, WebView 2,


00:02:35.640 --> 00:02:38.320
which is quite a separate level, et cetera, et cetera.


00:02:38.320 --> 00:02:39.140
So I-


00:02:39.140 --> 00:02:41.520
- A lot of times they don't have like full support


00:02:41.520 --> 00:02:43.920
for modern HTML as well.


00:02:43.920 --> 00:02:46.700
So certain things you do might act janky


00:02:46.700 --> 00:02:48.340
on a certain version of an OS.


00:02:48.340 --> 00:02:51.180
Yeah, it's always a weird, weird thing, isn't it?


00:02:51.180 --> 00:02:56.940
Yeah, so yeah, this page lab was made on React


00:02:56.940 --> 00:03:05.300
and I realized pretty quickly that you cannot open it like right away


00:03:05.300 --> 00:03:10.860
in a web view on Windows because it's this, you know, Microsoft Edge browser


00:03:10.860 --> 00:03:17.260
so you have to add some like polyfills, etc. to make it work on Windows, so yeah.


00:03:18.140 --> 00:03:26.540
So then I don't remember the exact moment, but probably I saw like an announcement from Google


00:03:26.540 --> 00:03:34.300
that they're releasing this like Flutter something like into production for web and desktop.


00:03:34.300 --> 00:03:34.940
Yes.


00:03:34.940 --> 00:03:40.940
And I become interested, you know, what is that, you know, like, and they're looking to like


00:03:40.940 --> 00:03:45.540
Flutter thing, you know, and I realized actually that it was,


00:03:45.540 --> 00:03:50.420
it's been on the market like for a long time and mostly useful


00:03:50.420 --> 00:03:52.860
for, yeah, for mobile apps.


00:03:52.860 --> 00:03:58.740
And I'd always kind of just dismissed Dart as just, you


00:03:58.740 --> 00:04:01.580
know, kind of like a weird CoffeeScript type of thing.


00:04:01.580 --> 00:04:03.980
It's like, oh, just another language to program to write


00:04:03.980 --> 00:04:09.100
JavaScript. Boring. But then when Flutter came around, it


00:04:09.100 --> 00:04:10.740
it got way more interesting.


00:04:10.740 --> 00:04:15.100
So before we dive into what Flutter is


00:04:15.100 --> 00:04:17.260
and how we work with it and why you built it and so on,


00:04:17.260 --> 00:04:19.740
let's actually take a bit of a step back.


00:04:19.740 --> 00:04:24.060
And let's actually talk about the two building blocks,


00:04:24.060 --> 00:04:26.820
or one of the building blocks.


00:04:26.820 --> 00:04:29.620
We have Dart, the programming language,


00:04:29.620 --> 00:04:32.460
which has been around since 2011 or so.


00:04:32.460 --> 00:04:35.660
And then we have Flutter, the UI framework


00:04:35.660 --> 00:04:39.500
that traditionally or normally you would use with Dart


00:04:39.500 --> 00:04:42.860
to build initially,


00:04:42.860 --> 00:04:45.900
I think it was just initially web apps, wasn't it?


00:04:45.900 --> 00:04:47.580
- Yeah. - And then they added mobile,


00:04:47.580 --> 00:04:48.840
and then they added desktop,


00:04:48.840 --> 00:04:52.400
and the combination of those three things is fantastic.


00:04:52.400 --> 00:04:53.240
- Exactly.


00:04:53.240 --> 00:04:55.100
- All right, we'll start with Dart.


00:04:55.100 --> 00:04:56.420
Tell people about Dart.


00:04:56.420 --> 00:04:58.020
I'm not a super expert in it,


00:04:58.020 --> 00:05:01.280
but I have been experimenting to see


00:05:01.280 --> 00:05:04.260
whether using Dart and Flutter might be the right way


00:05:04.260 --> 00:05:07.940
to rebuild the Talk Python Training mobile apps


00:05:07.940 --> 00:05:11.920
because they're okay now, they have bugs.


00:05:11.920 --> 00:05:14.020
There's a whole story about the App Store


00:05:14.020 --> 00:05:16.020
about why they're not fixed as part of the problem,


00:05:16.020 --> 00:05:17.940
not just the way that they're written.


00:05:17.940 --> 00:05:19.500
But I would really like to modernize them


00:05:19.500 --> 00:05:22.060
and I'm thinking that Flutter is the way to go.


00:05:22.060 --> 00:05:23.460
So I'm personally interested,


00:05:23.460 --> 00:05:26.020
but not very experienced in it.


00:05:26.020 --> 00:05:27.520
But I've done a little bit.


00:05:27.520 --> 00:05:30.020
So that's the perspective I'm coming at this with.


00:05:30.020 --> 00:05:33.180
Tell us maybe about your background with it as well


00:05:33.180 --> 00:05:36.180
and then we'll talk a tad about Dart and Flutter


00:05:36.180 --> 00:05:38.680
before we get into the Python side.


00:05:38.680 --> 00:05:41.060
- Sure.


00:05:41.060 --> 00:05:46.060
So I have to say I'm coming from Microsoft world, .NET.


00:05:46.060 --> 00:05:53.300
I've been in .NET like since the earliest bettas, you know?


00:05:53.300 --> 00:05:54.620
So I grew up--


00:05:54.620 --> 00:05:57.300
- Since like the year 2001 or something, right?


00:05:57.300 --> 00:05:58.640
- Yeah, yeah.


00:05:58.640 --> 00:06:02.420
We were going through the language specifications


00:06:02.420 --> 00:06:07.420
sent to us by Microsoft, you know, like in the Microsoft Word file.


00:06:07.420 --> 00:06:08.420
So at that time.


00:06:08.420 --> 00:06:12.100
So, web then...


00:06:12.100 --> 00:06:15.140
I'm a JavaScript guy, of course.


00:06:15.140 --> 00:06:19.140
Yeah, and then I learned like anyone else, like TypeScript.


00:06:19.140 --> 00:06:21.540
And then Flutter.


00:06:21.540 --> 00:06:27.100
So my impressions about Dart


00:06:27.100 --> 00:06:30.860
are very, very positive, you know.


00:06:31.540 --> 00:06:40.020
It's so nice. I mean, maybe it's me, but it looks and it feels better than TypeScript.


00:06:40.020 --> 00:06:45.380
Like to me, maybe it's because they have a great tool in Visual Studio Code, maybe.


00:06:45.380 --> 00:06:50.020
But it felt so natural to write something in Dart.


00:06:50.020 --> 00:07:00.340
And especially I love this like, this sound references, you know, like where you can have basically nulls.


00:07:00.340 --> 00:07:04.820
You know, it's a really, like, huge problem, like,


00:07:04.820 --> 00:07:08.580
like this nulls or nils or like...


00:07:08.580 --> 00:07:10.580
like...


00:07:10.580 --> 00:07:12.580
So, yeah, Rust...


00:07:12.580 --> 00:07:19.060
like, deals with that, you know, there are no nulls, you know.


00:07:19.060 --> 00:07:25.940
Go, somewhere like in between, so, you know, this flat server is written in Go and


00:07:25.940 --> 00:07:33.320
In Go, you can have like, like new strings, but you can have new references like new references.


00:07:33.320 --> 00:07:40.900
But Dart is great by default, it doesn't allow news and it, you know, it makes your app working


00:07:40.900 --> 00:07:42.940
as expected, you know, and,


00:07:42.940 --> 00:07:49.540
And for people who don't know, Dart is out in the audience, Tushar puts it as a modern


00:07:49.540 --> 00:07:54.140
language, which is the mix of the good parts of JavaScript and Java.


00:07:54.140 --> 00:07:57.100
I would say, yeah, it feels a bit like Java,


00:07:57.100 --> 00:08:02.100
a bit like C# in its syntax and the way that it works.


00:08:02.100 --> 00:08:04.660
Also a little bit like Swift with its optional,


00:08:04.660 --> 00:08:06.860
like explicit optional type system.


00:08:06.860 --> 00:08:09.620
It's kind of a mix of all the stuff


00:08:09.620 --> 00:08:11.740
that was either in those languages


00:08:11.740 --> 00:08:14.340
or came out in Swift later.


00:08:14.340 --> 00:08:16.820
And it's a pretty nice language.


00:08:16.820 --> 00:08:18.580
It's really different than Python.


00:08:18.580 --> 00:08:21.700
- Oh, well, yeah.


00:08:21.700 --> 00:08:23.700
- Especially untyped Python, right?


00:08:23.700 --> 00:08:34.900
Yeah, yeah, yeah, you know, yeah, so Dart, I mean, yeah, you can see all different things


00:08:34.900 --> 00:08:44.100
in Dart, like TypeScript, you know, like C#, yeah, yeah, I agree, but it's so, I mean,


00:08:44.100 --> 00:08:51.580
I would love to see many things like implemented in Dart, like transferred to JavaScript, but


00:08:51.580 --> 00:08:54.740
of TypeScript, you know, like it's pretty, it's pretty,


00:08:54.740 --> 00:08:56.020
it's pretty easy to write.


00:08:56.020 --> 00:08:56.860
Yeah.


00:08:56.860 --> 00:08:57.700
- It is.


00:08:57.700 --> 00:08:58.700
- Yeah.


00:08:58.700 --> 00:09:00.460
- Before we, if people who are listening,


00:09:00.460 --> 00:09:02.980
we might not want to scare them away thinking


00:09:02.980 --> 00:09:05.980
they would have to learn Dart in order to do this, right?


00:09:05.980 --> 00:09:10.460
The whole project that you are working on is sort of a,


00:09:10.460 --> 00:09:12.660
well, what if we used Python instead of Dart,


00:09:12.660 --> 00:09:15.540
but we still kind of use the building blocks of Flutter,


00:09:15.540 --> 00:09:18.260
which I think we should probably discuss as well,


00:09:18.260 --> 00:09:21.540
'cause it's a unique way of programming, yeah?


00:09:21.540 --> 00:09:22.820
Absolutely, yeah.


00:09:22.820 --> 00:09:26.460
So, the problem is not in Dart itself.


00:09:26.460 --> 00:09:27.860
Dart is a great language.


00:09:27.860 --> 00:09:33.260
I mean, you can spend like a few days and pick up like basic things


00:09:33.260 --> 00:09:36.620
and like you become really decent and write that.


00:09:36.620 --> 00:09:38.220
The Dart is not the problem.


00:09:38.220 --> 00:09:43.540
The problem is in Flutter, you know?


00:09:43.540 --> 00:09:46.900
I mean, it's a great framework.


00:09:46.900 --> 00:09:48.100
It's so flexible.


00:09:48.100 --> 00:09:50.500
It's so powerful.


00:09:50.500 --> 00:09:56.660
But it could be kind of like, you know, a steep learning curve, you know, like it's,


00:09:56.660 --> 00:10:00.980
I would compare Flutter to React.


00:10:00.980 --> 00:10:07.140
So if you're coming from React, it could be easier to do, you know, to...


00:10:07.140 --> 00:10:08.580
Yeah, React Native, yeah.


00:10:08.580 --> 00:10:15.860
So yeah, you know what, I, again, as a guy coming from like .NET world,


00:10:16.980 --> 00:10:22.980
I remember those times when we were writing apps using like ASP.NET web forms, you know,


00:10:22.980 --> 00:10:32.660
stateful controls, sessions, you know, on server side. And now we translated to these stateless


00:10:32.660 --> 00:10:40.180
apps, like single page applications, you know, where the UI is built of like application state.


00:10:40.820 --> 00:10:45.940
And to my mind, like this application state,


00:10:45.940 --> 00:10:49.780
managing application state, like mutating application state,


00:10:49.780 --> 00:10:54.900
you know, like it is the most challenging thing, you know?


00:10:54.900 --> 00:10:55.380
It is.


00:10:55.380 --> 00:10:58.180
It's all right for a simple Hello World apps,


00:10:58.180 --> 00:11:01.380
but if you write something really complex,


00:11:01.380 --> 00:11:06.020
you know, there are a lot of tons of libraries, you know, like Redux,


00:11:06.020 --> 00:11:10.740
like probably the most probable, like there is block for Flutter,


00:11:10.740 --> 00:11:14.260
So it's a really challenging problem, you know.


00:11:14.260 --> 00:11:18.020
Yeah, I've been working, like I said, I've been exploring and trying to learn some Flutter


00:11:18.020 --> 00:11:20.420
to see if it makes sense to work with.


00:11:20.420 --> 00:11:22.560
And the state stuff about it is crazy.


00:11:22.560 --> 00:11:29.220
It's really difficult to figure out kind of where does this fit in my application code?


00:11:29.220 --> 00:11:30.820
Yeah, yeah.


00:11:30.820 --> 00:11:37.380
Sometimes you just want to take, you know, something and write like a simple app, you


00:11:37.380 --> 00:11:41.380
you know, like, don't bother with this state, you know?


00:11:41.380 --> 00:11:45.380
Yeah, it could be really challenging.


00:11:45.380 --> 00:11:49.380
There are a lot of questions, why would my...


00:11:49.380 --> 00:11:53.380
if we're talking about React, like, tree re-renders


00:11:53.380 --> 00:11:57.380
all the time, you know, like, what's going on?


00:11:57.380 --> 00:12:01.380
Is it alright to use this or that? So, it's


00:12:01.380 --> 00:12:05.380
kind of... if you look at any...


00:12:05.380 --> 00:12:09.580
even trivial app in React or Flutter,


00:12:09.580 --> 00:12:14.980
it's pretty complex right away.


00:12:14.980 --> 00:12:20.160
We're not talking about backend because you have to


00:12:20.160 --> 00:12:27.340
fetch data, synchronize data with the database on the server side.


00:12:27.340 --> 00:12:34.060
It adds even more complexity like having a backend.


00:12:34.060 --> 00:12:35.260
So yeah, it's still...


00:12:35.260 --> 00:12:36.900
- For sure, you got to create all the APIs


00:12:36.900 --> 00:12:38.560
and then you somehow got to keep them in sync.


00:12:38.560 --> 00:12:39.680
Then you've got to do security


00:12:39.680 --> 00:12:41.160
from the front end to the backend.


00:12:41.160 --> 00:12:42.860
And there's a whole bunch of stuff.


00:12:42.860 --> 00:12:45.980
So just having a single app that just has all your code,


00:12:45.980 --> 00:12:48.800
all your state running is really convenient.


00:12:48.800 --> 00:12:51.400
- Yeah, yeah.


00:12:51.400 --> 00:12:56.400
I mean, I don't remember exactly when we transitioned,


00:12:56.400 --> 00:13:01.020
like we developers transitioned to that,


00:13:01.020 --> 00:13:08.300
like a common concept, you know, like that those apps should be made like


00:13:08.300 --> 00:13:16.060
of like front-end and back-end, you know, it should be like... So we abandoned the idea of monolith


00:13:16.060 --> 00:13:24.300
or like maybe because they're not scaled well, you know, but you know what actually the idea behind


00:13:24.300 --> 00:13:36.540
like flat. So we're not trying to pursue like a framework for building apps serving millions of users.


00:13:36.540 --> 00:13:46.380
So if you're building a line of business app and you have a huge developer's team,


00:13:46.380 --> 00:13:52.300
maybe you don't need that framework. But if you're doing something small to serve hundreds


00:13:52.300 --> 00:13:56.020
like of users, you know, like it's all right to assume


00:13:56.020 --> 00:14:00.180
that you can eat memory, you can be a little bit slower here,


00:14:00.180 --> 00:14:02.780
you know, like, so you can lose a little bit


00:14:02.780 --> 00:14:04.260
your requirements, you know?


00:14:04.260 --> 00:14:07.100
- Yeah, and I think it's probably worth just taking


00:14:07.100 --> 00:14:09.780
a step back just for a second and talking about Flutter


00:14:09.780 --> 00:14:14.340
and how it runs, because while some of these things


00:14:14.340 --> 00:14:16.140
you're saying are true, a lot of this would be running


00:14:16.140 --> 00:14:18.740
on the client side, so that's fine,


00:14:18.740 --> 00:14:19.940
it's running on the desktop app,


00:14:19.940 --> 00:14:25.220
running in your web browser but as a sort of a front end type of thing or whatever,


00:14:25.220 --> 00:14:27.220
right? It's not so server focused.


00:14:27.220 --> 00:14:33.420
Yeah, yeah, yeah. If it's, you know, it depends on the application. Exactly. So if you write


00:14:33.420 --> 00:14:39.620
in the game, like, let's say, yeah, it's all about it's everything is running on the client,


00:14:39.620 --> 00:14:48.740
right? So but most of like business applications, or like, you know, like, I don't know, like


00:14:48.740 --> 00:14:54.220
admin panels or tooling.


00:14:54.220 --> 00:14:54.720
Yeah.


00:14:54.720 --> 00:14:59.860
I just need a dashboard that shows me the recent orders and I need to click them off


00:14:59.860 --> 00:15:03.740
to turn them to say we've finished them or they're pending or like that.


00:15:03.740 --> 00:15:07.780
It doesn't have to be Netflix level of design.


00:15:07.780 --> 00:15:10.900
You just want something quick and get it up and share it, right?


00:15:10.900 --> 00:15:11.900
Yeah.


00:15:11.900 --> 00:15:18.900
And these apps, if you look into these apps, like every click on a UI, actually it's a


00:15:18.900 --> 00:15:21.700
call to a backend.


00:15:21.700 --> 00:15:28.460
So yeah, if you write something that can work on a mobile, like on a desktop, yeah, it's


00:15:28.460 --> 00:15:30.660
a standalone app.


00:15:30.660 --> 00:15:37.020
Maybe it requires some service like for authentication, but if it's mostly a standalone app, yeah,


00:15:37.020 --> 00:15:41.820
you don't need backend and Flutter is great, etc.


00:15:41.820 --> 00:15:45.860
So if you look, for people who are listening, if you go to flutter.dev, you can see some


00:15:45.860 --> 00:15:50.500
of the apps that are in the App Store with Flutter.


00:15:50.500 --> 00:15:51.960
And there's some really nice ones here.


00:15:51.960 --> 00:15:57.420
You've got the BMW car app, you've got Stadia, you've got whatever the heck it's called Google


00:15:57.420 --> 00:15:58.420
Pay.


00:15:58.420 --> 00:16:02.220
There's a showcase you can go and they actually talk about the different apps that are up


00:16:02.220 --> 00:16:03.220
here.


00:16:03.220 --> 00:16:07.460
Google Pay, ByteDance, eBay, iRobot, like there's legit...


00:16:07.460 --> 00:16:08.460
- iRobot.


00:16:08.460 --> 00:16:09.460
- Yeah, iRobot.


00:16:09.460 --> 00:16:10.460
- I got this app.


00:16:10.460 --> 00:16:11.740
- I got this, yeah, boy.


00:16:11.740 --> 00:16:15.380
- Rive, there's a question in the comments,


00:16:15.380 --> 00:16:18.460
but we'll get to in a minute about that, actually.


00:16:18.460 --> 00:16:20.860
Bunch of apps, and then you can also go and see


00:16:20.860 --> 00:16:23.180
that there's a thing called, it's all widgets.


00:16:23.180 --> 00:16:26.980
As you'll see, the way in which you design these apps


00:16:26.980 --> 00:16:29.300
is code first, and you create these things called widgets.


00:16:29.300 --> 00:16:31.780
You have some interesting ideas around that, Fedora.


00:16:31.780 --> 00:16:33.780
But yeah, you can flip through,


00:16:33.780 --> 00:16:34.700
and there's just tons of apps.


00:16:34.700 --> 00:16:36.620
So here, at least the ones people submitted,


00:16:36.620 --> 00:16:39.660
there's like 3,000 apps in this showcase, which, you know.


00:16:39.660 --> 00:16:43.640
So it's a pretty well used project, right?


00:16:43.640 --> 00:16:47.580
So we have Flutter, and it's not like React Native


00:16:47.580 --> 00:16:49.800
or something where it puts HTML into your code,


00:16:49.800 --> 00:16:54.000
but it kind of is powered on top of the HTML engines.


00:16:54.000 --> 00:16:57.700
It runs by using an HTML canvas,


00:16:57.700 --> 00:17:01.620
but then it just completely does its own rendering to that,


00:17:01.620 --> 00:17:04.580
like 120 frames a second type of render.


00:17:04.580 --> 00:17:06.860
But the idea is it's supposed to be completely


00:17:06.860 --> 00:17:08.800
in control of the pixels so that it looks,


00:17:08.800 --> 00:17:10.940
pixel perfect across all the devices.


00:17:10.940 --> 00:17:15.140
That's their selling point, and you can see how well they go.


00:17:15.140 --> 00:17:17.620
But until recently, I thought the only way


00:17:17.620 --> 00:17:20.860
to program that was Dart.


00:17:20.860 --> 00:17:23.460
And then I learned about your project, Flet.


00:17:23.460 --> 00:17:25.240
And I got to say, I'm not the only one who


00:17:25.240 --> 00:17:26.980
thought it was pretty cool.


00:17:26.980 --> 00:17:30.020
Out in the audience, we've got--


00:17:30.020 --> 00:17:32.980
Abhay says, Fedora, I love you, man.


00:17:32.980 --> 00:17:34.100
Thanks for creating Flet.


00:17:34.100 --> 00:17:36.740
And then there's another--


00:17:36.740 --> 00:17:38.740
Nice, thank you for your support.


00:17:38.740 --> 00:17:39.580
(laughs)


00:17:39.580 --> 00:17:42.580
- Yeah, there's another, you know,


00:17:42.580 --> 00:17:44.300
biggest fan and so on.


00:17:44.300 --> 00:17:47.300
So people definitely appreciate this project.


00:17:47.300 --> 00:17:49.340
So what is the story?


00:17:49.340 --> 00:17:52.020
You know, I gave my limited experience


00:17:52.020 --> 00:17:54.740
with what Flutter by default is.


00:17:54.740 --> 00:17:56.100
Oh, also we mentioned this,


00:17:56.100 --> 00:17:59.220
but it's worth just emphasizing once again,


00:17:59.220 --> 00:18:01.260
Flutter compiles to different targets.


00:18:01.260 --> 00:18:05.940
Flutter runs as a JavaScript app on the browser,


00:18:05.940 --> 00:18:10.060
but it compiles natively with a head-of-time compilation


00:18:10.060 --> 00:18:12.620
to execute on the desktop and on mobile, right?


00:18:12.620 --> 00:18:17.280
So it's not just running some sort of web-interpreted type


00:18:17.280 --> 00:18:19.420
of thing, it's literally compiled in native code


00:18:19.420 --> 00:18:21.860
on the other platforms, right?


00:18:21.860 --> 00:18:22.700
- Yeah.


00:18:22.700 --> 00:18:24.660
- So tell us about Flutter.


00:18:24.660 --> 00:18:28.540
This F-L-E-T, the fastest way to build Flutter apps


00:18:28.540 --> 00:18:29.900
in Python, so exciting.


00:18:29.900 --> 00:18:31.060
What is this thing?


00:18:31.060 --> 00:18:32.740
- So, all right.


00:18:34.340 --> 00:18:41.340
I have to admit maybe the current title, a little bit clickbaity.


00:18:41.340 --> 00:18:43.340
Yeah, because I was...


00:18:43.340 --> 00:18:47.340
There's a whole thing about marketing open source projects and gaining momentum.


00:18:47.340 --> 00:18:49.340
And, you know, I'm not going to hold it against you.


00:18:49.340 --> 00:18:56.340
Yeah, I was thinking a lot about how would I tell people what I'm working on.


00:18:56.340 --> 00:18:59.340
But heck, why not?


00:18:59.340 --> 00:19:04.680
we maybe we're not building Flutter apps per se but we help to build your Flutter


00:19:04.680 --> 00:19:11.640
apps what what what if that if it's if not Flutter apps so yeah I can say yes


00:19:11.640 --> 00:19:20.700
we you can build Flutter app in Python and it's good you know like flat it's


00:19:20.700 --> 00:19:29.200
not just about like reflecting all the widgets all the the power available


00:19:29.200 --> 00:19:34.920
and Flutter to Python space.


00:19:34.920 --> 00:19:35.920
It's not.


00:19:35.920 --> 00:19:53.720
In Flutter, we're trying to cater all these, to present all those widgets and their combinations


00:19:53.720 --> 00:19:58.720
to Python users in a very digestible form, like Flutter.


00:19:58.720 --> 00:20:07.060
Those widgets, they're very highly specialized in Flutter.


00:20:07.060 --> 00:20:11.680
There is a widget for padding, there is a widget for opacity,


00:20:11.680 --> 00:20:12.980
there is a widget for that.


00:20:12.980 --> 00:20:18.040
So it's like, if you try to write something real,


00:20:18.040 --> 00:20:23.040
you will get this ladder of widgets,


00:20:23.040 --> 00:20:28.160
widgets and it could be really challenging to work with this letter.


00:20:28.160 --> 00:20:29.160
Yeah, it is.


00:20:29.160 --> 00:20:35.560
In fact, we, yeah, in fact, we're trying to combine some widgets, you know, like to flatten


00:20:35.560 --> 00:20:42.960
this hierarchy, you know, to make people more productive, you know.


00:20:42.960 --> 00:20:46.440
I've been trying to look around the Flutter site and I'm not doing very well while we're


00:20:46.440 --> 00:20:47.440
talking.


00:20:47.440 --> 00:20:52.200
For an example, but the way that you write code, the Dart code version and the Flutter


00:20:52.200 --> 00:21:00.760
code version, the Python version, is some UI frameworks have kind of a designer, right?


00:21:00.760 --> 00:21:07.640
Think Xcode and storyboards, think Visual Basic or Windows Forms or WPF, like where


00:21:07.640 --> 00:21:13.680
you can see it and you can drag things around. Flutter is very code-focused on using these


00:21:13.680 --> 00:21:20.280
widgets. So you might create a list tile and then you would have the contents equals a


00:21:20.280 --> 00:21:24.720
a list of rows and the row object you're allocating


00:21:24.720 --> 00:21:27.000
or creating there has like a list of things


00:21:27.000 --> 00:21:29.120
that are buttons and it's just,


00:21:29.120 --> 00:21:32.240
it's like very, you see almost the hierarchy


00:21:32.240 --> 00:21:34.680
on the screen, right?


00:21:34.680 --> 00:21:38.160
And in some sense, programming in Flet


00:21:38.160 --> 00:21:41.000
feels a lot like that, right?


00:21:41.000 --> 00:21:42.360
You could sort of see on the home screen


00:21:42.360 --> 00:21:46.880
that there's this place where you're adding,


00:21:46.880 --> 00:21:48.280
going to a page and adding a row,


00:21:48.280 --> 00:21:51.520
which takes a list of icons and so on.


00:21:51.520 --> 00:21:53.520
But it sounds to me like you've also done some work


00:21:53.520 --> 00:21:58.520
to build larger building blocks than just that, right?


00:21:58.520 --> 00:22:01.560
You call them components and not just widgets.


00:22:01.560 --> 00:22:05.760
- Yeah, so, well, definitely to work with these frameworks,


00:22:05.760 --> 00:22:10.760
you have to have a pretty good sense of balance,


00:22:10.760 --> 00:22:12.960
you know, like imagination, you know,


00:22:12.960 --> 00:22:16.680
like you put these controls and you have to imagine


00:22:16.680 --> 00:22:21.800
like what would be like on the screen. And also, flutter has


00:22:21.800 --> 00:22:25.800
like hot reload. So you can experiment with your first like,


00:22:25.800 --> 00:22:31.920
and there is also a project flutter floor. I looked into


00:22:31.920 --> 00:22:36.040
that project. And it's really nice. It's a new startup. Maybe


00:22:36.040 --> 00:22:40.800
you can cover it. What's it called? flutter floor. It's like


00:22:40.800 --> 00:22:46.440
web flutter floor like that. No, like flow like, Oh, I see flow


00:22:46.440 --> 00:22:50.760
like that. It's like, yeah, like a footer flow. Okay. Yeah. Oh,


00:22:50.760 --> 00:22:55.480
interesting. Okay. So these guys, so yeah, you can drag and


00:22:55.480 --> 00:23:00.400
drop and they produce like a flutter like a, like a package,


00:23:00.400 --> 00:23:03.960
you know, like, I see it's a UI designer, and it'll generate the


00:23:03.960 --> 00:23:06.240
hierarchy of widget probably it writes the codes behind the


00:23:06.240 --> 00:23:10.160
scene for you or something like that, right? Yeah. Okay. Wow.


00:23:10.160 --> 00:23:16.400
We'll have something, you know, in in our roadmap as well. So we


00:23:16.400 --> 00:23:24.800
we're gonna make something very similar but instead of like Flutter code it will


00:23:24.800 --> 00:23:36.280
be generating like Python code so it's gonna be interesting as well so yeah and


00:23:36.280 --> 00:23:44.640
components so we call them controls we call them controls people asking about


00:23:44.640 --> 00:23:53.000
like why control like why not call them widgets I don't know I maybe I didn't


00:23:53.000 --> 00:23:59.600
didn't use term widget a lot at the time like but it's historically maybe maybe


00:23:59.600 --> 00:24:05.600
it's because of its kind of like from like desire to replicate the speed of


00:24:05.600 --> 00:24:10.880
net web forms yeah yeah that was the terminology there sure yeah controls and


00:24:10.880 --> 00:24:15.760
And WPF, you know, like Windows Presentation Foundation,


00:24:15.760 --> 00:24:20.760
also like controls and Xamarin controls.


00:24:20.760 --> 00:24:22.600
Yeah, so.


00:24:22.600 --> 00:24:24.360
- You've been swimming in this terminology.


00:24:24.360 --> 00:24:25.920
So here it is, right?


00:24:25.920 --> 00:24:28.240
- So yeah, it's controls.


00:24:28.240 --> 00:24:31.880
And again, it's not like one-to-one


00:24:31.880 --> 00:24:39.040
like reflection of Flutter widgets.


00:24:39.040 --> 00:24:41.040
We're trying to be creative.


00:24:41.040 --> 00:24:43.040
So we're like


00:24:43.040 --> 00:24:45.040
trying to have some


00:24:45.040 --> 00:24:47.040
opinion, you know, like what


00:24:47.040 --> 00:24:49.040
would we like to put into


00:24:49.040 --> 00:24:51.040
control, so we don't want


00:24:51.040 --> 00:24:53.040
them very generic.


00:24:53.040 --> 00:24:55.040
We don't want them


00:24:55.040 --> 00:24:57.040
very complex. So


00:24:57.040 --> 00:25:01.040
so yeah. And actually it's


00:25:01.040 --> 00:25:03.040
an interesting thing if we


00:25:03.040 --> 00:25:05.040
if we talk


00:25:05.040 --> 00:25:07.040
about like


00:25:07.040 --> 00:25:17.280
paradigm, React and Flutter, they're like declarative style programming, you know?


00:25:17.280 --> 00:25:22.080
And we are converting this back to imperative style.


00:25:22.080 --> 00:25:31.440
So you can find an article on Flutter website, like, describing the differences and why it's


00:25:31.440 --> 00:25:36.080
cool, you know, like to build UI from the state.


00:25:36.080 --> 00:25:41.760
But we are like with flat, we are going back to imperative style, like Xamarin style.


00:25:41.760 --> 00:25:42.760
Right.


00:25:42.760 --> 00:25:43.760
Okay.


00:25:43.760 --> 00:25:48.400
Where you change control properties, you know, and they have a state, you know.


00:25:48.400 --> 00:25:49.400
Yeah.


00:25:49.400 --> 00:25:52.440
You can say like a dot text equals type of model.


00:25:52.440 --> 00:25:53.440
Yeah.


00:25:53.440 --> 00:25:58.760
So let's actually, I think maybe the best way for us to understand this, there's a ton


00:25:58.760 --> 00:26:00.920
of questions about how it runs.


00:26:00.920 --> 00:26:01.920
Like does it transpiled?


00:26:01.920 --> 00:26:02.920
It's a compile.


00:26:02.920 --> 00:26:03.920
How's it?


00:26:03.920 --> 00:26:07.820
But I think the best way for us to set the stage


00:26:07.820 --> 00:26:11.020
for that discussion is let's talk through your tutorial, okay?


00:26:11.020 --> 00:26:13.920
Because that'll cover a lot of the capabilities,


00:26:13.920 --> 00:26:16.120
some of the programming model and so on.


00:26:16.120 --> 00:26:20.320
And if people drop over to flit.dev/docs


00:26:20.320 --> 00:26:22.620
and click on the tutorials,


00:26:22.620 --> 00:26:25.920
you have the obligatory to-do app.


00:26:25.920 --> 00:26:29.220
But the one that looks interesting to me is this calculator app, right?


00:26:29.220 --> 00:26:32.720
Like here's something that looks...


00:26:32.720 --> 00:26:37.220
It looks literally like the one that I have on my iPhone.


00:26:37.220 --> 00:26:40.960
It boggles my mind that a trillion-dollar company


00:26:40.960 --> 00:26:45.100
cannot put a calculator on their larger version of their iPhone.


00:26:45.100 --> 00:26:47.100
So I can't say it looks like my iPad one,


00:26:47.100 --> 00:26:49.100
but this would run on my iPad as well.


00:26:49.100 --> 00:26:53.100
But this looks like something I would really like to interact with.


00:26:53.100 --> 00:26:56.100
This is built with Flutter, running on Flutter with Python.


00:26:56.100 --> 00:26:59.100
So let's go, and what's cool is you can find a live demo


00:26:59.100 --> 00:27:09.500
Because Flutter has a single page app in the web.


00:27:09.500 --> 00:27:13.500
It runs on iOS and Android.


00:27:13.500 --> 00:27:14.420
It runs on the desktop.


00:27:14.420 --> 00:27:20.020
So if I say 5 times 10, granted, it's a calculator.


00:27:20.020 --> 00:27:22.740
But it's pretty neat.


00:27:22.740 --> 00:27:27.020
And this is just one of the deploy targets, right?


00:27:27.020 --> 00:27:30.720
So let's talk us through like how to, first thing,


00:27:30.720 --> 00:27:33.100
I can pip install, do I have to have Flutter?


00:27:33.100 --> 00:27:35.860
Do I have to do, there's like quite a series of steps


00:27:35.860 --> 00:27:38.300
to set up your machine to be a Flutter dev machine.


00:27:38.300 --> 00:27:40.740
It's gotta have like iOS simulators potentially


00:27:40.740 --> 00:27:43.380
and the Flutter and Dart SDKs,


00:27:43.380 --> 00:27:46.060
all of that's a prerequisite to this, right?


00:27:46.060 --> 00:27:47.580
- Yeah, you know what?


00:27:47.580 --> 00:27:49.820
Actually, it's also a huge obstacle.


00:27:49.820 --> 00:27:52.820
Like if you wanna start doing Flutter,


00:27:52.820 --> 00:27:57.820
It's like I have both like Windows and macOS machines.


00:27:57.820 --> 00:27:59.500
- Same. - Like at work.


00:27:59.500 --> 00:28:02.940
You have to install a lot of things


00:28:02.940 --> 00:28:05.340
to start doing something like in the,


00:28:05.340 --> 00:28:07.740
especially on macOS, it's Xcode,


00:28:07.740 --> 00:28:10.220
you know, like something like,


00:28:10.220 --> 00:28:12.660
I'm still trying to figure out the whole like,


00:28:12.660 --> 00:28:13.820
bunch of tools you need.


00:28:13.820 --> 00:28:18.280
Yeah, like for, especially for deployment, but here.


00:28:18.280 --> 00:28:19.980
- So Flutter actually comes with this thing


00:28:19.980 --> 00:28:21.980
called Flutter Doctor.


00:28:21.980 --> 00:28:25.740
And I'll put up a screenshot of what I get when I run it.


00:28:25.740 --> 00:28:27.600
I'm running it right now and it's still running.


00:28:27.600 --> 00:28:28.600
There we go here, hold on.


00:28:28.600 --> 00:28:31.500
I'll put this up so that people can see.


00:28:31.500 --> 00:28:33.600
- Sure.


00:28:33.600 --> 00:28:35.320
- Does it, it doesn't really wanna,


00:28:35.320 --> 00:28:38.640
I just don't wanna load it, come on.


00:28:38.640 --> 00:28:41.760
In order to share it, I gotta get it to come up.


00:28:41.760 --> 00:28:42.600
There we go.


00:28:42.600 --> 00:28:45.320
So I'll try to include a screenshot


00:28:45.320 --> 00:28:46.440
or a link to this something.


00:28:46.440 --> 00:28:48.880
But it's like, checks that Flutter is installed.


00:28:48.880 --> 00:28:51.600
Check that the Android toolchain is installed.


00:28:51.600 --> 00:28:52.800
check that Xcode is installed,


00:28:52.800 --> 00:28:53.840
check that Chrome is there,


00:28:53.840 --> 00:28:57.100
Android Studio, IntelliJ or VS Code,


00:28:57.100 --> 00:28:58.900
that there's host development, like,


00:28:58.900 --> 00:29:01.960
there's a bunch of steps to make all this happen, right?


00:29:01.960 --> 00:29:05.000
So we still need to do this though, that's my question is,


00:29:05.000 --> 00:29:07.200
I still need to go through the steps to generate


00:29:07.200 --> 00:29:10.880
like the Flutter configuration on my machine.


00:29:10.880 --> 00:29:14.880
- So I have to say you have ideally green list,


00:29:14.880 --> 00:29:17.800
because I have some gaps,


00:29:17.800 --> 00:29:20.600
like I didn't install like IntelliJ,


00:29:20.600 --> 00:29:32.440
like a little something. So in flat, in flat. So this client part, like it's a Flutter


00:29:32.440 --> 00:29:41.360
app which knows how to render let's say JSON tree like page or UI


00:29:41.360 --> 00:29:49.920
representation in JSON format. So it knows how to render it and it has like a


00:29:49.920 --> 00:29:55.600
a final functionality. So it's compiled, it's pre-compiled for all the platforms, like for


00:29:55.600 --> 00:30:03.360
Windows, for Macs, and these executables, they're included into Python, like, wheels, you know.


00:30:03.360 --> 00:30:10.800
So when you install Flutter, it basically downloads, like, as a part of a wheel, it downloads


00:30:10.800 --> 00:30:18.880
Flutter Client, which is Flutter, like, compile Flutter app, and it downloads Flutter Server.


00:30:18.880 --> 00:30:21.280
Oh, so I might not actually need to do this.


00:30:21.280 --> 00:30:24.480
Well, yeah, you don't see it.


00:30:24.480 --> 00:30:26.480
I mean, you can see it in logs,


00:30:26.480 --> 00:30:30.480
or if you go and see site packages


00:30:30.480 --> 00:30:32.480
of your Python installation,


00:30:32.480 --> 00:30:34.760
you'll see all those executables.


00:30:34.760 --> 00:30:36.760
Okay, interesting.


00:30:36.760 --> 00:30:40.760
Yeah, that's why you need nothing, you know.


00:30:40.760 --> 00:30:42.760
Oh, that's fantastic, yeah.


00:30:42.760 --> 00:30:44.760
Yeah, it's for desktop, for web,


00:30:44.760 --> 00:30:52.680
web like compiled Flutter web app is embedded into flat server.


00:30:52.680 --> 00:31:00.580
So it's like it adds another two megabytes of to like executable itself.


00:31:00.580 --> 00:31:09.480
But so yeah, we have embedded like web part and you don't log either Linux, Windows or


00:31:09.480 --> 00:31:11.760
macOS client with your wheel.


00:31:11.760 --> 00:31:12.760
Right.


00:31:12.760 --> 00:31:13.760
Okay.


00:31:13.760 --> 00:31:16.840
The wheel knows which platform it's being installed on.


00:31:16.840 --> 00:31:18.160
- Yeah, exactly.


00:31:18.160 --> 00:31:20.480
- Yeah, let me check how big this thing is.


00:31:20.480 --> 00:31:22.440
I went through your example


00:31:22.440 --> 00:31:25.120
and that we're gonna talk through


00:31:25.120 --> 00:31:29.520
and I compiled it to a .app, a Mac.app application


00:31:29.520 --> 00:31:30.680
and it's 38 megs.


00:31:30.680 --> 00:31:32.960
That's seems totally reasonable for me


00:31:32.960 --> 00:31:34.860
for the base runtime basically.


00:31:34.860 --> 00:31:38.680
- Well, Michael, but oh yeah, you're on frozen.


00:31:38.680 --> 00:31:40.560
You know, you were.


00:31:40.560 --> 00:31:41.400
- I was, sorry.


00:31:42.680 --> 00:31:44.680
I was just thinking about it. I was just thinking a lot.


00:31:44.680 --> 00:31:45.240
That's all.


00:31:45.240 --> 00:31:45.740
Yeah.


00:31:45.740 --> 00:31:47.640
It's pretty...


00:31:47.640 --> 00:31:52.680
Yeah, for macOS it's the biggest, you know, like...


00:31:52.680 --> 00:31:54.520
Yeah, like you said, like 30 something.


00:31:54.520 --> 00:31:57.720
Like for Windows it's probably the smallest size.


00:31:57.720 --> 00:31:58.220
Maybe not.


00:31:58.220 --> 00:32:01.880
Yeah, but when you compare that, say, to an Electron app.


00:32:01.880 --> 00:32:05.160
An Electron app is very large compared to that.


00:32:05.160 --> 00:32:10.680
And yeah, yeah, because it packages browsers.


00:32:10.680 --> 00:32:14.120
So you have the same picture on all platforms, right?


00:32:14.120 --> 00:32:17.200
So yeah, exactly.


00:32:17.200 --> 00:32:21.440
Flutter is nice because like you said before,


00:32:21.440 --> 00:32:26.360
it's the same rendering engine like on all platforms.


00:32:26.360 --> 00:32:30.760
Like Skia, something like, and even on web, it's Canvas.


00:32:30.760 --> 00:32:34.440
So you have the same picture on all platforms.


00:32:34.440 --> 00:32:35.840
- Yeah, fantastic. - And this is nice.


00:32:35.840 --> 00:32:36.680
- It is.


00:32:36.680 --> 00:32:38.480
All right, let's talk through this example.


00:32:38.480 --> 00:32:40.520
So pip install flut, that takes care of all of it.


00:32:40.520 --> 00:32:43.340
I'm sorry, I derailed us talking about all the setup


00:32:43.340 --> 00:32:45.680
of Flutter and Dart and all that.


00:32:45.680 --> 00:32:48.140
And so in order to write code with this,


00:32:48.140 --> 00:32:49.380
I don't wanna talk through too much code,


00:32:49.380 --> 00:32:51.620
but I wanna give people a sense of what it feels like


00:32:51.620 --> 00:32:52.460
to write code with this.


00:32:52.460 --> 00:32:56.380
It feels like a very much like kind of a Python variation


00:32:56.380 --> 00:33:01.020
with the difference that it's more imperative, as you said.


00:33:01.020 --> 00:33:04.820
So we would say from flat import page and text,


00:33:04.820 --> 00:33:07.380
and you have a main method that is past a page.


00:33:08.660 --> 00:33:11.460
And then you just say, add text and you set the value.


00:33:11.460 --> 00:33:13.940
You could set the background color and then say run.


00:33:13.940 --> 00:33:16.100
And well, hello world, flat.


00:33:16.100 --> 00:33:17.100
There you are, right?


00:33:17.100 --> 00:33:24.060
But you have other controls, like you have elevated button


00:33:24.060 --> 00:33:25.620
and then you have a bunch of layout.


00:33:25.620 --> 00:33:29.300
I mean, you like you as the developer.


00:33:29.300 --> 00:33:30.140
- Yeah, like row.


00:33:30.140 --> 00:33:32.620
- Because Flutter provides a lot of these,


00:33:32.620 --> 00:33:36.740
like it provides row and column and containers


00:33:36.740 --> 00:33:38.060
and all of those things.


00:33:38.060 --> 00:33:42.060
So you just have a way to talk to those from Python, right?


00:33:42.060 --> 00:33:43.060
Yep.


00:33:43.060 --> 00:33:45.820
How does that happen?


00:33:45.820 --> 00:33:52.260
What's the interop layer between Flutter and Dart and Go and all those low-level aspects?


00:33:52.260 --> 00:33:56.060
And then when I write Python code, how does that work?


00:33:56.060 --> 00:33:59.220
It's a good question, right?


00:33:59.220 --> 00:34:07.620
Because people are constantly asking about like, during APK, like all AP files from


00:34:07.620 --> 00:34:13.780
from this stuff like and those are the compiled output for the what you ship to the App Store


00:34:13.780 --> 00:34:15.260
for people who haven't done that.


00:34:15.260 --> 00:34:16.260
Yeah, yeah.


00:34:16.260 --> 00:34:23.500
So the way it works is the following in the middle of all these.


00:34:23.500 --> 00:34:27.380
There is a web app basically like written in go in go land.


00:34:27.380 --> 00:34:35.900
called flat server or flat d for short and it holds in memory this like current


00:34:35.900 --> 00:34:43.660
state of the page you know like when you when you like from one side of this


00:34:43.660 --> 00:34:53.940
server is language or like this Python library like basically when you when you


00:34:53.940 --> 00:35:00.460
When you do this page.add,


00:35:00.460 --> 00:35:05.420
it sends like a JSON basically to


00:35:05.420 --> 00:35:08.860
this web server and updates the state.


00:35:08.860 --> 00:35:12.140
>> When I do this, I'm working in Python and the result is to


00:35:12.140 --> 00:35:15.900
send to build up this control structure,


00:35:15.900 --> 00:35:18.300
this widget structure, and then it sends over


00:35:18.300 --> 00:35:22.060
to this embedded web server that's native,


00:35:22.060 --> 00:35:26.100
that says build this in Flutter now, right?


00:35:26.100 --> 00:35:26.740
Exactly.


00:35:26.740 --> 00:35:27.300
Okay.


00:35:27.300 --> 00:35:27.940
Exactly.


00:35:27.940 --> 00:35:34.440
So this Flutter client from other side, it connects to this server with web


00:35:34.440 --> 00:35:36.540
sockets, so like in real time.


00:35:36.540 --> 00:35:41.500
And there is like a bi-directional channel between like this server and the client.


00:35:41.500 --> 00:35:47.180
When you push changes from the language to this server, it sends like, you know,


00:35:47.180 --> 00:35:50.460
like a, an update to Flutter app.


00:35:50.980 --> 00:35:55.660
And when you click something on Flutter in Flutter, you know, like you do some like type


00:35:55.660 --> 00:35:57.700
text in the text box.


00:35:57.700 --> 00:35:58.700
Some event is raised.


00:35:58.700 --> 00:35:59.700
Yes, yes.


00:35:59.700 --> 00:36:02.220
Back to server and server.


00:36:02.220 --> 00:36:04.740
Rouse it back to Python code.


00:36:04.740 --> 00:36:13.460
So yeah, it's like three components like client library in language right now is Python, server


00:36:13.460 --> 00:36:14.540
and client.


00:36:14.540 --> 00:36:16.820
So it's like three things.


00:36:16.820 --> 00:36:21.860
So when I execute my Python code, is that running on full CPython or is that running


00:36:21.860 --> 00:36:27.140
on some limited lesser thing?


00:36:27.140 --> 00:36:30.820
Like do I have full access to all of Python?


00:36:30.820 --> 00:36:32.260
Exactly.


00:36:32.260 --> 00:36:41.140
And when we're talking about deployment of this stuff to mobile devices, on the first


00:36:41.140 --> 00:36:47.220
stages we're gonna support this so-called like server driven UI approach


00:36:47.220 --> 00:36:54.300
and yes your code runs by a real Python and you have access to all libraries


00:36:54.300 --> 00:37:00.780
yeah because yeah if you if you decide to put this on a phone like Python there


00:37:00.780 --> 00:37:06.380
there could be as you know there could be limitations right and and most of


00:37:06.380 --> 00:37:15.020
those projects I went through Kyvee and the Beware project as well.


00:37:15.020 --> 00:37:19.820
Yep, Beware, Kyvee. Those are both interesting.


00:37:19.820 --> 00:37:29.500
They do an absolutely amazing job like by packaging Python for mobile devices but there are always like but you know like so


00:37:29.500 --> 00:37:36.700
So mostly they encourage you to use like pure Python modules, right?


00:37:36.700 --> 00:37:42.560
Because if you decide to use like modules with native libraries in them, you have to


00:37:42.560 --> 00:37:46.740
make sure that those are compiled for ARM64 architectures, right?


00:37:46.740 --> 00:37:49.220
Right, which gets really tricky.


00:37:49.220 --> 00:37:52.460
Sort of related to that out in the audience, maybe the first question we'll take before


00:37:52.460 --> 00:37:57.780
we get to some of the others is, can we use other Python packages with Flet?


00:37:57.780 --> 00:38:00.340
Could we run machine learning code on the click of a button?


00:38:00.340 --> 00:38:01.740
Asked Raul.


00:38:01.740 --> 00:38:05.220
Yeah, yes, absolutely.


00:38:05.220 --> 00:38:14.020
And the idea of Flare was not like to be a central part, like in your app,


00:38:14.020 --> 00:38:18.980
but to be on the side, you know, like to add UI to your application.


00:38:18.980 --> 00:38:23.940
So you can make your app live, you know, like...


00:38:24.500 --> 00:38:32.100
And goal was, first of all, to add web-based UI.


00:38:32.100 --> 00:38:38.500
So you can share your app with your colleagues, with your team, customers.


00:38:38.500 --> 00:38:43.500
So yeah, absolutely, you can use any libraries.


00:38:43.500 --> 00:38:49.900
But we lack some visualization controls yet,


00:38:49.900 --> 00:38:53.340
compared to other tools like Streamlit, for example,


00:38:53.340 --> 00:38:55.980
like for scientists, absolutely.


00:38:55.980 --> 00:39:00.260
Or there is another project like DeerPiGui.


00:39:00.260 --> 00:39:01.540
- DeerPi, yeah, DeerPiGui.


00:39:01.540 --> 00:39:03.740
Yeah, I've had both of those groups on the show before.


00:39:03.740 --> 00:39:08.740
- Yeah, which is amazing, like for very fast visualizations.


00:39:08.740 --> 00:39:13.380
Flat wouldn't be there probably, like, you know.


00:39:13.380 --> 00:39:14.700
- Right, right, right.


00:39:14.700 --> 00:39:19.500
More of a building interactive applications, perhaps.


00:39:19.500 --> 00:39:20.620
- The low latency, yeah.


00:39:20.620 --> 00:39:21.860
- Yeah, let's see.


00:39:21.860 --> 00:39:25.100
So I feel like we kind of answered this,


00:39:25.100 --> 00:39:26.980
but I think it's also maybe worth pointing out.


00:39:26.980 --> 00:39:28.260
I think Tushar asked,


00:39:28.260 --> 00:39:30.660
is this a transpile to Dart project?


00:39:30.660 --> 00:39:33.660
It sounds like definitely no, it runs in CPython


00:39:33.660 --> 00:39:38.660
and it serializes the UI to this other part of its process.


00:39:38.660 --> 00:39:42.060
- Yeah, there is no transpiling.


00:39:42.060 --> 00:39:44.960
Yeah, and you know, I saw a lot of,


00:39:44.960 --> 00:39:46.420
I know what people talking about,


00:39:46.420 --> 00:39:55.020
I saw a lot of horrible implementations like transpiling Rust to Dart, Dart to Rust, Python to...


00:39:55.020 --> 00:40:03.140
All these guys, I mean, it's going to be a fragile solution, unnatural, you know, to my mind.


00:40:03.140 --> 00:40:06.340
Well, as soon as you say, "Well, can I use this library or that library?"


00:40:06.340 --> 00:40:08.740
The answer almost always is no.


00:40:08.740 --> 00:40:10.580
Right? If you're...


00:40:10.580 --> 00:40:14.980
You think of something like Sculpt or Brython, which is like Python in the browser,


00:40:14.980 --> 00:40:17.700
but transpiled the JavaScript, it's, well,


00:40:17.700 --> 00:40:19.980
how do you use these other libraries?


00:40:19.980 --> 00:40:20.820
Like, there's no way to really--


00:40:20.820 --> 00:40:21.640
- You will hit the wall.


00:40:21.640 --> 00:40:24.060
You will hit the wall at some point, you know?


00:40:24.060 --> 00:40:27.140
So if I were like an engineering manager,


00:40:27.140 --> 00:40:28.420
I would never go for that, you know,


00:40:28.420 --> 00:40:30.140
like in a real project.


00:40:30.140 --> 00:40:30.980
- Yeah, yeah.


00:40:30.980 --> 00:40:33.140
Except for maybe some real special tools or use cases,


00:40:33.140 --> 00:40:33.980
but yeah.


00:40:33.980 --> 00:40:39.740
All right, moving on down the line of our tutorial here,


00:40:39.740 --> 00:40:42.420
one of the things that you have to keep in mind


00:40:42.420 --> 00:40:45.580
and focus on when you're working with Flutter in general


00:40:45.580 --> 00:40:50.500
and Flutter with Python is how do you build out these layouts


00:40:50.500 --> 00:40:52.020
and how do you position the controls?


00:40:52.020 --> 00:40:53.200
And it looks like if you know one,


00:40:53.200 --> 00:40:55.260
you kind of know the other pretty well.


00:40:55.260 --> 00:40:58.500
So for example, here we're adding a row


00:40:58.500 --> 00:41:00.100
whose control is like the output,


00:41:00.100 --> 00:41:02.520
but then the next row is, you say,


00:41:02.520 --> 00:41:05.160
the controls are the first row of buttons.


00:41:05.160 --> 00:41:06.760
And then another row whose controls


00:41:06.760 --> 00:41:07.820
are the next row of buttons.


00:41:07.820 --> 00:41:09.140
And you just keep building this up


00:41:09.140 --> 00:41:13.820
and you pretty quickly end up in something that looks


00:41:13.820 --> 00:41:16.340
like it's kind of a real basic calculator app.


00:41:16.340 --> 00:41:17.180
- Yeah.


00:41:17.180 --> 00:41:19.140
- And then you get into containers, right?


00:41:19.140 --> 00:41:23.780
Where you've got a container contains like a column


00:41:23.780 --> 00:41:26.180
that has each row and you kind of like put it together


00:41:26.180 --> 00:41:27.060
like this, right?


00:41:27.060 --> 00:41:33.140
But I guess the question I wanted to ask you here


00:41:33.140 --> 00:41:36.860
is how similar or different is this than Flutter?


00:41:36.860 --> 00:41:41.620
It feels to me like it's pretty similar, at least in the zen of it.


00:41:41.620 --> 00:41:42.120
Yeah.


00:41:42.120 --> 00:41:42.860
Yep.


00:41:42.860 --> 00:41:43.580
You know what?


00:41:43.580 --> 00:41:45.000
So,


00:41:45.000 --> 00:41:53.380
PageLit was based on Microsoft Fluent UI library and for making new layouts,


00:41:53.380 --> 00:41:55.300
there was like stack.


00:41:55.300 --> 00:41:58.860
So stack could be like horizontal or vertical.


00:41:59.580 --> 00:42:07.020
And here we decided to do not bend Flutter into something else,


00:42:07.020 --> 00:42:10.140
but go with the same terminology.


00:42:10.140 --> 00:42:14.020
So stack is basically like a bunch of layers,


00:42:14.020 --> 00:42:20.180
and we use row and column and all this stuff, you know.


00:42:20.180 --> 00:42:25.220
And it feels good, you know, like row and columns inside,


00:42:25.220 --> 00:42:29.840
like rather than having stack everywhere or like div,


00:42:29.840 --> 00:42:33.940
if you will, like div and then add some like semantics


00:42:33.940 --> 00:42:37.460
to div by classes, you know, like it's still horrible,


00:42:37.460 --> 00:42:39.420
like div, div, div, div, div, div.


00:42:39.420 --> 00:42:42.540
Here we have row, column, column, row, at least,


00:42:42.540 --> 00:42:45.180
so you can, you know, like distinguish these,


00:42:45.180 --> 00:42:47.100
like, you know, visually, so.


00:42:47.100 --> 00:42:49.220
- Right, one of the benefits of structuring your code


00:42:49.220 --> 00:42:51.860
like this, and you do touch on it in this tutorial,


00:42:51.860 --> 00:42:56.860
is that you can build little reusable segments, right?


00:42:56.860 --> 00:42:58.920
So for example, if you've got a row


00:42:58.920 --> 00:43:00.420
that has a column of stuff


00:43:00.420 --> 00:43:02.320
and then another row with more columns,


00:43:02.320 --> 00:43:04.540
you could take that, just that column


00:43:04.540 --> 00:43:07.440
or even build up just one row at a time


00:43:07.440 --> 00:43:09.460
and put that into its own function or its own class


00:43:09.460 --> 00:43:11.260
and then sort of include that


00:43:11.260 --> 00:43:14.780
kind of in the control sense of the traditional,


00:43:14.780 --> 00:43:17.820
you know, Visual Basic, Windows Forms,


00:43:17.820 --> 00:43:21.380
like here's the, now I have a bigger thing to drag around,


00:43:21.380 --> 00:43:24.620
but in this world, drag around is just like write code to create it


00:43:24.620 --> 00:43:26.620
and put it in the right spot.


00:43:26.620 --> 00:43:28.620
You know what?


00:43:28.620 --> 00:43:34.220
I've been really amazed, because it works so good.


00:43:34.220 --> 00:43:39.060
I understand the first question people ask,


00:43:39.060 --> 00:43:42.900
how would I make my own like Flutter component?


00:43:42.900 --> 00:43:47.100
But you know what? You can do these user controls


00:43:48.740 --> 00:43:54.660
in uh in made of this uh primitives


00:43:54.660 --> 00:43:58.420
flat provides and it works pretty well they're


00:43:58.420 --> 00:44:05.140
isolated they can handle events inside them like if you put few of those user


00:44:05.140 --> 00:44:08.980
controls like on a page in different places they


00:44:08.980 --> 00:44:12.980
will be all behave like you know separately and it's so


00:44:12.980 --> 00:44:16.500
nice i mean maybe it's side effect you know


00:44:16.500 --> 00:44:21.300
I wasn't thinking about that while doing this stuff,


00:44:21.300 --> 00:44:23.060
but it's so good.


00:44:23.060 --> 00:44:23.900
So you can build--


00:44:23.900 --> 00:44:26.660
- And can these controls, do they have their own state?


00:44:26.660 --> 00:44:29.340
- Absolutely, yeah.


00:44:29.340 --> 00:44:30.180
- Oh, that's awesome.


00:44:30.180 --> 00:44:31.980
So you can have like put information about it


00:44:31.980 --> 00:44:33.780
and need some buttons to interact with it.


00:44:33.780 --> 00:44:37.020
They sort of keep track of just that little block, right?


00:44:37.020 --> 00:44:39.100
- Even better, you know,


00:44:39.100 --> 00:44:44.100
like it's whatever you do on flat UI,


00:44:44.740 --> 00:44:47.740
it's getting persisted right away.


00:44:47.740 --> 00:44:50.980
So whatever, let's say if you have a huge form


00:44:50.980 --> 00:44:54.060
and you type something into this form


00:44:54.060 --> 00:44:57.100
and you do refresh in your browser,


00:44:57.100 --> 00:45:00.580
all the information will be there after refresh.


00:45:00.580 --> 00:45:03.420
So it's like, I mean, yeah, it's so great.


00:45:03.420 --> 00:45:05.940
- And for a desktop app, say if I close it


00:45:05.940 --> 00:45:08.620
and open it again, will it remember?


00:45:08.620 --> 00:45:11.460
- No, it depends.


00:45:11.460 --> 00:45:13.700
So right now it's a standalone app


00:45:13.700 --> 00:45:20.700
and when you open it again, it will load another instance of this flat server with a clean state.


00:45:20.700 --> 00:45:22.700
Right, so it kind of loses the state, yeah.


00:45:22.700 --> 00:45:23.700
Yeah, so but...


00:45:23.700 --> 00:45:26.700
I suspect you have access to the file system somehow.


00:45:26.700 --> 00:45:29.700
You could save it if you wrote the code to do it, right?


00:45:29.700 --> 00:45:33.700
Sure, yeah, sure, yeah, yeah, we're gonna make it, yeah.


00:45:33.700 --> 00:45:40.700
Since this is Python executing, could I do like SQLite and say SQLAlchemy


00:45:40.700 --> 00:45:47.020
and figure out like I'll put the file in my users app you know data directory in


00:45:47.020 --> 00:45:51.300
the profile. Absolutely right now we're working on the only more advanced example


00:45:51.300 --> 00:45:57.240
with like using database I mean like not advanced like but with using the


00:45:57.240 --> 00:46:03.940
database and also we're gonna add data table control for for working with


00:46:03.940 --> 00:46:09.700
grease you know because it's missing right now yeah yeah related to that out


00:46:09.700 --> 00:46:11.780
out in the audience, Raul, asks,


00:46:11.780 --> 00:46:16.220
is the way it looks and feels, is this material UI?


00:46:16.220 --> 00:46:18.140
Can we change the theme and styling?


00:46:18.140 --> 00:46:20.340
I know in raw Flutter, you can have


00:46:20.340 --> 00:46:23.500
buttons out of the material design


00:46:23.500 --> 00:46:25.500
or you can have buttons out of, what should they call it?


00:46:25.500 --> 00:46:29.100
They call it Darwin or whatever the iOS equivalent.


00:46:29.100 --> 00:46:30.780
There's different places you get the buttons


00:46:30.780 --> 00:46:34.500
to look different and what's the story around that?


00:46:34.500 --> 00:46:37.500
- So, right, it's a good question.


00:46:37.500 --> 00:46:39.580
Again, I came from Microsoft world


00:46:39.580 --> 00:46:44.060
and there they have Fluent UI and it looks different.


00:46:44.060 --> 00:46:49.220
And actually Flutter was my first experience


00:46:49.220 --> 00:46:50.460
with material UI.


00:46:50.460 --> 00:46:51.420
And you know what?


00:46:51.420 --> 00:46:57.100
I see-- honestly, even compared to Fluent UI,


00:46:57.100 --> 00:46:58.420
it's pretty solid.


00:46:58.420 --> 00:47:01.900
And I would say they have a strong commitment


00:47:01.900 --> 00:47:08.460
to this material UI strategy.


00:47:08.460 --> 00:47:11.220
And it looks really nice.


00:47:11.220 --> 00:47:14.900
You don't have to sell people what it is.


00:47:14.900 --> 00:47:18.380
Like I would probably need to sell people Fluent UI,


00:47:18.380 --> 00:47:21.940
but I don't need to sell people like this material UI.


00:47:21.940 --> 00:47:23.460
It's nice right away.


00:47:23.460 --> 00:47:24.460
It looks nice.


00:47:24.460 --> 00:47:26.660
It looks really solid.


00:47:26.660 --> 00:47:30.900
But for different styles, yes, you can style,


00:47:30.900 --> 00:47:37.820
like there are limited styling features right now.


00:47:38.360 --> 00:47:42.040
like in flat, but we're going to pull more.


00:47:42.040 --> 00:47:47.040
And also we will be doing these adaptive controls.


00:47:47.040 --> 00:47:51.440
- Oh, so if I run the app on windows,


00:47:51.440 --> 00:47:53.280
it might look different than it might be material


00:47:53.280 --> 00:47:54.760
versus over on it on macOS,


00:47:54.760 --> 00:47:57.040
it'll be the, whatever the heck is the Darwin.


00:47:57.040 --> 00:47:59.440
- Exactly, so I don't know.


00:47:59.440 --> 00:48:01.120
Yeah, you can actually, I,


00:48:01.120 --> 00:48:07.280
you can, I don't know how to share a link with you,


00:48:07.280 --> 00:48:11.360
>> Yeah. There's a private chat here in the streaming.


00:48:11.360 --> 00:48:14.120
>> I will show you how it might look like.


00:48:14.120 --> 00:48:16.320
>> Oh, fantastic.


00:48:16.320 --> 00:48:20.040
>> While you're looking at it, I just also want to point out for


00:48:20.040 --> 00:48:23.520
event handling is a super important thing in UIs.


00:48:23.520 --> 00:48:26.080
UIs are basically get the stuff on the screen and


00:48:26.080 --> 00:48:29.200
start handling events and updating the UI accordingly.


00:48:29.200 --> 00:48:32.080
In Flet, all you got to do is, for example,


00:48:32.080 --> 00:48:33.680
for your button you say onClick


00:48:33.680 --> 00:48:36.560
equals a function called buttonClicked,


00:48:36.560 --> 00:48:38.560
and you get past the data


00:48:38.560 --> 00:48:43.120
and you can also associate like here's the indicator or the data of the button


00:48:43.120 --> 00:48:46.320
and when it's clicked, pass that over to it like, for example,


00:48:46.320 --> 00:48:50.880
the action to take and those can even be lambda expressions, right?


00:48:50.880 --> 00:48:52.880
Yeah, absolutely. Yeah.


00:48:52.880 --> 00:48:57.920
If you manage to put it in the single line like, you know...


00:48:57.920 --> 00:49:03.040
So lambdas in Python are limited somehow, you know, like...


00:49:03.040 --> 00:49:05.840
Yeah. Oh, yeah, they're single line.


00:49:05.840 --> 00:49:10.300
>> I use it a lot like print something as lambdas


00:49:10.300 --> 00:49:14.120
in event handlers to see if it's being called.


00:49:14.120 --> 00:49:14.700
>> Yeah.


00:49:14.700 --> 00:49:18.360
>> So I drop you a link to Fluent UI.


00:49:18.360 --> 00:49:19.040
>> Yeah.


00:49:19.040 --> 00:49:21.460
>> It's a library for Flutter.


00:49:21.460 --> 00:49:25.620
It's really cool and there is a web demo,


00:49:25.620 --> 00:49:28.500
even like in the reason also like Flutter,


00:49:28.500 --> 00:49:32.140
macOS, something like that.


00:49:32.140 --> 00:49:34.980
>> All right.


00:49:34.980 --> 00:49:47.760
drop me a link as well. So, and for mobile apps, we have a lot of controls like this


00:49:47.760 --> 00:49:48.760
Cupertino library.


00:49:48.760 --> 00:49:51.660
That's what it's called, Cupertino. Yes, not Darwin.


00:49:51.660 --> 00:49:53.940
Yeah, right away. Yeah, yeah, yeah.


00:49:53.940 --> 00:50:02.660
I get it. I get it. For many users, it could be really inappropriate to see like a fluent


00:50:02.660 --> 00:50:07.660
UI through, let's say toggle button on the iOS, you know?


00:50:07.660 --> 00:50:11.060
- This is fantastic.


00:50:11.060 --> 00:50:11.900
Yeah.


00:50:11.900 --> 00:50:15.540
I mean, when you open an app and it clearly looks


00:50:15.540 --> 00:50:17.100
like it doesn't belong in the platform,


00:50:17.100 --> 00:50:18.300
you're like, hmm, this is weird.


00:50:18.300 --> 00:50:19.540
What is this?


00:50:19.540 --> 00:50:21.940
It just, it doesn't bring the right impression.


00:50:21.940 --> 00:50:24.020
And this, I mean, the stuff that you're showing


00:50:24.020 --> 00:50:26.900
on the screen, I will link to the examples.


00:50:26.900 --> 00:50:31.180
Like I can be convinced this is a proper macOS app


00:50:31.180 --> 00:50:37.420
as well as proper Android or whatever it is you're looking at, right?


00:50:37.420 --> 00:50:38.580
Beautiful.


00:50:38.580 --> 00:50:46.220
Well, if you like a specialist, you can definitely see some odds.


00:50:46.220 --> 00:50:48.300
Yeah, yeah, you're like, oh, that button's not quite--


00:50:48.300 --> 00:50:49.820
Yeah, yeah, yeah.


00:50:49.820 --> 00:50:51.580
Drawn, you know, like--


00:50:51.580 --> 00:50:56.420
Right, the way Flutter works is it doesn't pull in the underlying window


00:50:56.420 --> 00:50:57.420
widgets out of your OS.


00:50:57.420 --> 00:50:59.940
It literally redraws them from scratch, but they try really


00:50:59.940 --> 00:51:01.500
hard to make it look the same.


00:51:01.500 --> 00:51:09.500
You know what, it's always a debate, you know, if you go somewhere like in Harken News, you


00:51:09.500 --> 00:51:14.020
will have these debates, you know, what would be like, because React Native, it's about


00:51:14.020 --> 00:51:17.260
like displaying native controls, right?


00:51:17.260 --> 00:51:19.220
But is it a good thing?


00:51:19.220 --> 00:51:27.220
Like when you precise design and I work with designers in big companies, like, it could


00:51:27.220 --> 00:51:33.820
be a problem if you cannot deliver precise design.


00:51:33.820 --> 00:51:38.860
This gives you more stability across platforms for your look and feel.


00:51:38.860 --> 00:51:43.780
Question in the audience, which I think we're going to get to in a second.


00:51:43.780 --> 00:51:48.180
Sugato, can you create mobile apps with Flet?


00:51:48.180 --> 00:51:51.720
I don't know if this is on the roadmap or this is already ready.


00:51:51.720 --> 00:51:56.220
We might have to save a bit of the conversation for the roadmap discussion.


00:51:56.220 --> 00:52:06.900
So as requested multiple times by our users, I put this, I assembled this like mobile strategy.


00:52:06.900 --> 00:52:10.460
If you, Michael, if you can open this in the blog, it's in the blog.


00:52:10.460 --> 00:52:11.460
Ah, the blog.


00:52:11.460 --> 00:52:12.460
Gotcha.


00:52:12.460 --> 00:52:15.060
It's a blog, flat mobile strategy.


00:52:15.060 --> 00:52:17.060
There you go.


00:52:17.060 --> 00:52:18.060
Cool.


00:52:18.060 --> 00:52:25.140
So yeah, definitely we, it's, it's not, it's not like we forgot about mobile devices.


00:52:25.140 --> 00:52:31.800
quite the opposite where I'm always thinking about mobile experience, you


00:52:31.800 --> 00:52:36.960
know, we are getting there, like maybe slowly but we're getting there and we


00:52:36.960 --> 00:52:42.180
will be there. So we want to deliver not just, you know, like the way you can


00:52:42.180 --> 00:52:50.320
build like APK, you know, we want to like enable developers, you know, like to


00:52:50.320 --> 00:52:55.420
quickly test for example these like experiences on mobile devices because


00:52:55.420 --> 00:53:02.320
you know it's it's a complex process you know like yeah like packaging and


00:53:02.320 --> 00:53:09.600
and signing and publishing reviewing etc so it's and many companies they are


00:53:09.600 --> 00:53:16.460
moving to this server driven approach like Airbnb like Lyft you know like


00:53:16.460 --> 00:53:23.820
big players so they can bypass like app store reviews you know and push some new functionality


00:53:23.820 --> 00:53:30.300
like right away from the web servers so we we're going to explore this approach first


00:53:30.300 --> 00:53:44.140
and yeah definitely we will look into packaging everything into like mobile package like I mean


00:53:44.700 --> 00:53:51.820
Python compiled for ARM64, this Go server compiled for ARM.


00:53:51.820 --> 00:53:59.740
And so making this like a sandwich, working on mobile and packaging it and delivering to mobile.


00:53:59.740 --> 00:54:01.900
It's like the last...


00:54:01.900 --> 00:54:05.500
This is the biggest challenge for you all, right?


00:54:05.500 --> 00:54:06.060
It's a challenge.


00:54:06.060 --> 00:54:08.620
It's not quite there yet, right?


00:54:09.180 --> 00:54:15.180
It's a challenge. Yeah, it requires you to be a low-level programmer, you know.


00:54:15.180 --> 00:54:20.880
Yeah, and Sugato actually has a follow-up saying,


00:54:20.880 --> 00:54:24.680
"Cool, PyTorch is trying to make model serving available with React,


00:54:24.680 --> 00:54:28.980
and using Flet could be a very accessible alternative."


00:54:28.980 --> 00:54:31.680
I will look into that, you know.


00:54:31.680 --> 00:54:33.180
Yeah, that is interesting.


00:54:33.180 --> 00:54:35.180
It's a fancy topic, right?


00:54:35.180 --> 00:54:42.060
Yeah, so for now, out of the box, I can package this up as a desktop app or a mobile app.


00:54:42.060 --> 00:54:46.620
And desktop means Linux, Windows, macOS.


00:54:46.620 --> 00:54:55.020
So yeah, just to make it right, like you can package it like as a desktop app, Windows,


00:54:55.020 --> 00:54:58.140
Linux, Mac, and there's a web app.


00:54:58.140 --> 00:54:59.140
Yeah.


00:54:59.140 --> 00:55:07.780
On the mobile experience, you can use it as Power PWA app.


00:55:07.780 --> 00:55:08.780
Right.


00:55:08.780 --> 00:55:12.260
So you package it as a mobile app and then you install that as a progressive web app


00:55:12.260 --> 00:55:14.300
and then it's kind of good to go.


00:55:14.300 --> 00:55:15.300
Yes.


00:55:15.300 --> 00:55:16.300
Okay.


00:55:16.300 --> 00:55:17.300
Yes.


00:55:17.300 --> 00:55:21.340
But not like a native mobile experience.


00:55:21.340 --> 00:55:25.540
I'm working on it right now and there is a branch for that.


00:55:25.540 --> 00:55:26.540
Okay.


00:55:26.540 --> 00:55:27.540
Exciting.


00:55:27.540 --> 00:55:31.220
and live real time, yeah.


00:55:31.220 --> 00:55:32.820
- Yeah. - So yeah.


00:55:32.820 --> 00:55:34.180
- Okay, fantastic.


00:55:34.180 --> 00:55:39.180
Let's maybe do, let's see, where's my tutorial here.


00:55:39.180 --> 00:55:40.700
So the very last thing,


00:55:40.700 --> 00:55:42.820
there's some stuff we talked about the events.


00:55:42.820 --> 00:55:45.220
You have in there, you talk about how to package it up


00:55:45.220 --> 00:55:48.860
as an executable and basically that's PyInstaller.


00:55:48.860 --> 00:55:52.260
And then you have it's steps on how to, you know,


00:55:52.260 --> 00:55:54.120
package it up as a web app as well.


00:55:54.120 --> 00:55:56.620
Cool.


00:55:56.620 --> 00:56:00.100
So let me ask you, maybe I'll pull up the roadmap as,


00:56:00.100 --> 00:56:03.940
put that as the background.


00:56:03.940 --> 00:56:05.820
Is this ready for people to build apps with?


00:56:05.820 --> 00:56:08.420
Like what's the state of Flet?


00:56:08.420 --> 00:56:10.660
It's very exciting and it looks quite capable,


00:56:10.660 --> 00:56:12.820
but should people be using it yet?


00:56:12.820 --> 00:56:16.460
Should they be giving feedback or where are you with this?


00:56:16.460 --> 00:56:21.460
- So as it's basically like a second iteration,


00:56:25.060 --> 00:56:40.060
So we had this proof of concept like page lead as a proof of concept and this guy, it's still, yeah, despite it's like a second iteration, it's still 0.something.


00:56:40.060 --> 00:56:50.180
So there could be, I don't expect any drastical changes into API, but there could be some breaking changes going forward.


00:56:50.780 --> 00:56:59.580
But and also to have a complete feature, I would love to have like a mobile experience


00:56:59.580 --> 00:57:05.020
to like to complete the cycle, you know, like web, desktop, mobile.


00:57:05.020 --> 00:57:16.140
But in general, it's pretty ready to build like these apps where like apps it made for,


00:57:16.140 --> 00:57:20.300
you know, like, like, yeah, we're talking about the forms over data, the little portals


00:57:20.300 --> 00:57:22.380
and the dashboards that we talked about at the beginning, right?


00:57:22.380 --> 00:57:28.420
Exactly. So I think it's pretty much ready for primetime.


00:57:28.420 --> 00:57:30.620
Nice.


00:57:30.620 --> 00:57:33.020
All modern software is beta, you know.


00:57:33.020 --> 00:57:36.580
Yeah, so it's prime, you know.


00:57:36.580 --> 00:57:38.580
It's always evolving.


00:57:38.580 --> 00:57:41.580
What's the contributor story?


00:57:41.580 --> 00:57:44.580
Are you open to having other people submit PRs


00:57:44.580 --> 00:57:47.580
and help out with, say, tutorials and stuff?


00:57:47.580 --> 00:57:51.380
Absolutely. Absolutely. Absolutely. All people welcome.


00:57:51.380 --> 00:57:52.380
Awesome.


00:57:52.380 --> 00:57:55.980
And I know it's a challenge for some projects,


00:57:55.980 --> 00:57:59.580
but I really want to spend time on that.


00:57:59.580 --> 00:58:05.380
Working with people, writing guidelines, etc.


00:58:05.380 --> 00:58:06.780
Establishing rules.


00:58:06.780 --> 00:58:08.780
So, absolutely.


00:58:08.780 --> 00:58:13.380
Because it's not an open source project if you're not accepting PRs.


00:58:13.380 --> 00:58:16.380
Or if you don't work with people.


00:58:16.380 --> 00:58:18.540
It's like published source version.


00:58:18.540 --> 00:58:20.260
- For sure, yeah, exactly.


00:58:20.260 --> 00:58:23.420
It's source open, not open source, that's right.


00:58:23.420 --> 00:58:25.500
Let me put an idea out there.


00:58:25.500 --> 00:58:27.740
You have two really great tutorials here.


00:58:27.740 --> 00:58:31.980
Are you willing to accept more tutorials?


00:58:31.980 --> 00:58:32.980
- Sure.


00:58:32.980 --> 00:58:37.620
- So over on the flutter.dev/learn section,


00:58:37.620 --> 00:58:39.520
they have some tutorials over here.


00:58:39.520 --> 00:58:42.700
Maybe it would be fun if people could like try


00:58:42.700 --> 00:58:48.900
to create the equivalent of these tutorials, but in flat, I don't know, that might be a


00:58:48.900 --> 00:58:52.180
cool thing to create and see how they come out.


00:58:52.180 --> 00:59:00.220
Yeah, yeah, it's a nice idea, but you know, maybe it's not even worth a separate tutorial.


00:59:00.220 --> 00:59:04.860
Like in flat, it could be like a single page of code, you know.


00:59:04.860 --> 00:59:06.300
Yeah, absolutely.


00:59:06.300 --> 00:59:12.660
So when I look at this, this looks a lot like, you know, I'm looking at the Flutter.


00:59:12.660 --> 00:59:16.660
This looks a lot like a Dart version of Flutter,


00:59:16.660 --> 00:59:19.660
or Flutter looks like a Python version of this, right?


00:59:19.660 --> 00:59:22.660
It has this same hierarchical code type of thing.


00:59:22.660 --> 00:59:24.660
There are some differences, like we talked about,


00:59:24.660 --> 00:59:27.660
like state and stuff, but it looks really, really similar.


00:59:27.660 --> 00:59:32.660
So if I am a Flutter developer, how easy is it to go to Flutter?


00:59:32.660 --> 00:59:35.660
And if I go to-- if I learn Flutter,


00:59:35.660 --> 00:59:37.660
and like, I really need the true native version,


00:59:37.660 --> 00:59:39.660
how easy is it to go to, like, pick up Dart


00:59:39.660 --> 00:59:41.660
and then go to Flutter?


00:59:41.660 --> 00:59:49.740
You know, if you already a Flutter developer, well, the only requirement there probably


00:59:49.740 --> 00:59:51.860
is you should know Python, right?


00:59:51.860 --> 00:59:52.860
Like at the moment.


00:59:52.860 --> 00:59:53.860
>> Yeah, I'm assuming that you know Python.


00:59:53.860 --> 00:59:54.860
Yeah, yeah, sure.


00:59:54.860 --> 00:59:55.860
>> Yeah.


00:59:55.860 --> 01:00:02.980
And I think it's pretty acceptable to write something in Flutter.


01:00:02.980 --> 01:00:10.060
I especially love the idea of using Flutter as a prototyping thing.


01:00:10.060 --> 01:00:11.740
you can easily do something.


01:00:11.740 --> 01:00:13.180
It's so much easier.


01:00:13.180 --> 01:00:14.540
It's so much easier.


01:00:14.540 --> 01:00:16.380
People who have not tried to write in Dart.


01:00:16.380 --> 01:00:21.260
I feel like I am constantly chasing what const means.


01:00:21.260 --> 01:00:22.700
I didn't mean to double it up.


01:00:22.700 --> 01:00:24.540
Constantly chasing const around.


01:00:24.540 --> 01:00:26.220
I do not understand this language.


01:00:26.220 --> 01:00:29.580
So you might have a class which you're passing as const


01:00:29.580 --> 01:00:32.220
and you might need to take away that const,


01:00:32.220 --> 01:00:34.700
but then it's required to have const in other places.


01:00:34.700 --> 01:00:35.980
But then it like cascade.


01:00:35.980 --> 01:00:38.380
It's just like, okay, there's like five places.


01:00:38.380 --> 01:00:42.380
I got to either remove or add cons because I just want to change like this is driving


01:00:42.380 --> 01:00:45.660
me insane and I don't see any of that in flat and it makes me happy.


01:00:45.660 --> 01:00:48.860
It sounds like you've been on this as well Fedor.


01:00:48.860 --> 01:00:51.180
Yeah, because maybe you're a perfectionist, you know, like


01:00:51.180 --> 01:00:57.260
you're trying to avoid all those, you know, like warnings.


01:00:57.260 --> 01:01:00.640
Yeah.


01:01:00.640 --> 01:01:01.440
Yeah.


01:01:01.440 --> 01:01:03.500
So yeah, it's a, so yeah.


01:01:03.500 --> 01:01:04.880
Yeah.


01:01:04.880 --> 01:01:05.440
Yeah.


01:01:05.900 --> 01:01:09.500
Sorry, it makes me think like maybe you could build that stuff really quick because it's


01:01:09.500 --> 01:01:13.340
you don't have to deal with all those little weird language edge cases.


01:01:13.340 --> 01:01:25.100
Yeah, yeah, and I had a few customers, like users on Discord coming from Flutter world.


01:01:25.100 --> 01:01:35.100
So yeah, and again, the way back to Flutter from flat is also possible. Why not? I mean,


01:01:35.100 --> 01:01:40.100
I mean, if you grow up, grow out of this flat thing,


01:01:40.100 --> 01:01:45.620
you need something really unique, like animations,


01:01:45.620 --> 01:01:50.780
some weird transitions, so why not?


01:01:50.780 --> 01:01:53.700
So you can go and learn Flutter


01:01:53.700 --> 01:01:55.760
and dive into this world.


01:01:55.760 --> 01:02:01.240
- Yeah, I think, I agree that they should be


01:02:01.240 --> 01:02:02.620
pretty transferable.


01:02:02.620 --> 01:02:04.820
Certainly knowing one will help you know the other.


01:02:04.820 --> 01:02:09.700
no doubt about it. Absolutely. And the way you think is real similar. So John asks,


01:02:09.700 --> 01:02:15.620
how do you handle Android and iOS permissions entitlements? It sounds like you're not quite


01:02:15.620 --> 01:02:22.500
there yet, but maybe you have some ideas on where that might go. So as right now,


01:02:22.500 --> 01:02:31.940
we actually, you know what, we are not like delivering this anywhere, like, but we already


01:02:32.660 --> 01:02:39.540
building iOS and Android packages as part of our CI process.


01:02:39.540 --> 01:02:44.260
So they're already there and they're already published into App Store,


01:02:44.260 --> 01:02:49.620
ready to be like sent for review, you know.


01:02:49.620 --> 01:02:51.700
So yeah, it is like...


01:02:51.700 --> 01:02:55.300
- Do you just put the entitlement in that compilation target, basically?


01:02:55.300 --> 01:02:58.180
- Yeah, yeah, yeah, yeah.


01:02:58.180 --> 01:03:02.340
So definitely if...


01:03:02.340 --> 01:03:12.260
So yeah, all these permissions right now, they have to be put into this pre-compiled Flutter client,


01:03:12.260 --> 01:03:14.260
like Flat Client app.


01:03:14.260 --> 01:03:19.780
Or right now we're working on a Flutter widget.


01:03:19.780 --> 01:03:22.260
So Flutter widget called Flat.


01:03:22.260 --> 01:03:28.980
So you can embed Flutter experience into any existing Flutter app.


01:03:28.980 --> 01:03:32.420
So that sounds like you're doing it in reverse.


01:03:32.420 --> 01:03:38.180
So you would create a build a Flutter application, a native one, compile it,


01:03:38.180 --> 01:03:42.980
but what you can do is you can create a section of your UI that is Flutter.


01:03:42.980 --> 01:03:49.060
Yeah, exactly. Imagine you already have an app written in Flutter or


01:03:49.060 --> 01:03:51.740
native app like in Kotlin,


01:03:51.740 --> 01:03:54.620
you know, like for or Swift.


01:03:54.620 --> 01:03:57.580
You can replace part of your app with


01:03:57.580 --> 01:04:04.260
these like flat driven by server-side code written in Python.


01:04:04.260 --> 01:04:07.340
>> Cool. In that scenario,


01:04:07.340 --> 01:04:08.880
where does the Python run?


01:04:08.880 --> 01:04:10.220
It runs on the server?


01:04:10.220 --> 01:04:11.780
>> On the server, yeah.


01:04:11.780 --> 01:04:12.180
>> Okay.


01:04:12.180 --> 01:04:15.900
>> You can actually have in this app,


01:04:15.900 --> 01:04:23.660
your mobile app deployed to client devices, you basically have to redeploy code, Python


01:04:23.660 --> 01:04:28.860
code in the server to deliver new experience, new UI, new clicks, you know, like whatever.


01:04:28.860 --> 01:04:32.940
>> I don't know how relevant this is, but it might be. Have you looked at PyScript?


01:04:32.940 --> 01:04:35.180
>> Yeah, sure.


01:04:35.180 --> 01:04:42.380
>> You know, if some of the challenges is like, well, how do I end up running the Python part?


01:04:42.380 --> 01:04:47.340
you know, could you WebAssembly your Python in and get it native?


01:04:47.340 --> 01:04:53.340
And get it locally like for offline version?


01:04:53.340 --> 01:05:00.220
So yeah, people asking like, there are a lot of technologies right now, right?


01:05:00.220 --> 01:05:08.780
Like, if we're talking about PyScript and WebAssembly, it makes sense for web apps, right?


01:05:08.780 --> 01:05:14.540
You know what? And actually, Dart itself is being compiled.


01:05:14.540 --> 01:05:19.900
Okay, right now it's only part, it's Kia engine is in WebAssembly,


01:05:19.900 --> 01:05:26.380
but they have, Google have plans to compile Dart


01:05:26.380 --> 01:05:29.900
Flutter apps into WebAssemblies as well.


01:05:29.900 --> 01:05:32.780
So it makes sense for web.


01:05:32.780 --> 01:05:35.500
For mobile, it should be native code.


01:05:35.500 --> 01:05:36.460
Yeah.


01:05:36.460 --> 01:05:38.460
So for mobile, it should be native code.


01:05:38.460 --> 01:05:48.460
I'm not sure, maybe tomorrow we'll see some engines translating this WASM into native code.


01:05:48.460 --> 01:05:55.260
If you could run WASM in your native application on iOS, then maybe this opens some kind of door.


01:05:55.260 --> 01:06:01.660
But again, as far as I know, it's a really restrictive environment model.


01:06:01.660 --> 01:06:04.060
Yes, yeah.


01:06:04.060 --> 01:06:06.020
- Yeah, it's not the same as saying,


01:06:06.020 --> 01:06:09.320
well, sure, you can use PyTorch or requests or whatever.


01:06:09.320 --> 01:06:12.100
- Yep.


01:06:12.100 --> 01:06:16.060
- Okay, well, Fedor, I think we're just,


01:06:16.060 --> 01:06:18.180
I think we're out of time,


01:06:18.180 --> 01:06:21.660
but I wanna congratulate you on a super interesting project.


01:06:21.660 --> 01:06:23.040
It's really cool.


01:06:23.040 --> 01:06:26.100
- Thank you, thank you very much.


01:06:26.100 --> 01:06:26.940
- Yeah, you bet.


01:06:26.940 --> 01:06:27.760
Now, before you get out of here,


01:06:27.760 --> 01:06:29.660
you gotta answer the final two questions.


01:06:29.660 --> 01:06:30.500
- Sure.


01:06:30.500 --> 01:06:31.860
- If you're gonna write some Python code,


01:06:31.860 --> 01:06:34.940
What editor do you use these days?


01:06:34.940 --> 01:06:36.420
Nice.


01:06:36.420 --> 01:06:39.900
I love Visual Studio Code, you know?


01:06:39.900 --> 01:06:41.780
I mean, I would love-- some people


01:06:41.780 --> 01:06:45.060
recommend trying PyCharm.


01:06:45.060 --> 01:06:47.740
And I believe it's a really great idea.


01:06:47.740 --> 01:06:50.780
Maybe I will look into that, especially if it's


01:06:50.780 --> 01:06:52.420
free for open source projects.


01:06:52.420 --> 01:06:54.300
But right now, it's VS Code.


01:06:54.300 --> 01:06:55.460
Yeah, it's great.


01:06:55.460 --> 01:06:59.380
I can tell you your calculator tutorial works all the way


01:06:59.380 --> 01:07:05.140
through on PyCharm because I just did it right before our show.


01:07:05.140 --> 01:07:06.140
So it's all good.


01:07:06.140 --> 01:07:07.140
It's all good.


01:07:07.140 --> 01:07:12.740
Now, also notable PyPI package, like obviously, Flut is a good one, but other libraries you


01:07:12.740 --> 01:07:15.940
may have run across recently, like, oh, this is cool, people should know about.


01:07:15.940 --> 01:07:29.300
Well, for me, it's a really challenging question because I'm a new guy to Biden and I don't


01:07:29.300 --> 01:07:36.300
I don't have any really any like, like, very packages, you know?


01:07:36.300 --> 01:07:37.300
Yeah.


01:07:37.300 --> 01:07:39.300
We can throw flat out there.


01:07:39.300 --> 01:07:40.300
How's that?


01:07:40.300 --> 01:07:42.300
So yeah, maybe flat is nice.


01:07:42.300 --> 01:07:44.300
It's not allowed.


01:07:44.300 --> 01:07:45.300
You pip install it.


01:07:45.300 --> 01:07:46.300
You can say that.


01:07:46.300 --> 01:07:47.300
Yeah.


01:07:47.300 --> 01:07:50.300
And you know, it's actually, it's non-trivial.


01:07:50.300 --> 01:07:57.460
And I spent a lot of nights trying to put these wheels, right?


01:07:57.460 --> 01:07:59.900
You know, like to include these binaries.


01:07:59.900 --> 01:08:01.580
So it's pretty cool.


01:08:01.580 --> 01:08:08.180
And I can, like, if you guys have some questions, like, how would you repackage those wheels


01:08:08.180 --> 01:08:09.800
during the CI process?


01:08:09.800 --> 01:08:14.580
So I would be really happy to share my experience, you know?


01:08:14.580 --> 01:08:20.260
Because I learned a lot of packages in the internal structure to understand how it works.


01:08:20.260 --> 01:08:25.060
you know, like, basically like zip files, you know, what's inside.


01:08:25.060 --> 01:08:26.060
Awesome.


01:08:26.060 --> 01:08:27.060
All right.


01:08:27.060 --> 01:08:28.940
Well, final call to action.


01:08:28.940 --> 01:08:32.060
People want to get started with flat, they want to build an app with it, or maybe even


01:08:32.060 --> 01:08:33.820
contribute to it.


01:08:33.820 --> 01:08:36.060
What do you tell them?


01:08:36.060 --> 01:08:39.740
Absolutely go and try.


01:08:39.740 --> 01:08:44.260
Hope on discord, you know, I'm always online.


01:08:44.260 --> 01:08:47.540
Let me know what you like, what you didn't like.


01:08:47.540 --> 01:08:49.740
We're always listening.


01:08:49.740 --> 01:08:54.020
So indefinitely contributions are welcome.


01:08:54.020 --> 01:08:55.020
So yeah.


01:08:55.020 --> 01:08:56.020
Awesome.


01:08:56.020 --> 01:09:00.180
And you at the bottom of the homepage of Flet.DEV, you've got a subscribe to our newsletter.


01:09:00.180 --> 01:09:04.020
I guess people can get updates on the project if they want there, right?


01:09:04.020 --> 01:09:05.020
Yeah.


01:09:05.020 --> 01:09:08.580
I haven't sent anything there yet, but yeah.


01:09:08.580 --> 01:09:12.660
All about building up the group of people who are interested in what you're doing.


01:09:12.660 --> 01:09:13.660
All right.


01:09:13.660 --> 01:09:14.980
So it's mostly Discord right now.


01:09:14.980 --> 01:09:15.980
Yeah.


01:09:15.980 --> 01:09:16.980
Got it.


01:09:16.980 --> 01:09:17.980
So it's pretty active.


01:09:17.980 --> 01:09:18.980
Yeah.


01:09:18.980 --> 01:09:23.260
All right, well, once again, super exciting project.


01:09:23.260 --> 01:09:25.760
I've ranted on this before,


01:09:25.760 --> 01:09:30.100
having some kind of UI framework


01:09:30.100 --> 01:09:32.780
that is really modern and fresh in Python


01:09:32.780 --> 01:09:33.940
is super important.


01:09:33.940 --> 01:09:35.820
Flutter is quite interesting in that space.


01:09:35.820 --> 01:09:40.020
Having a very viable mobile story for Python,


01:09:40.020 --> 01:09:41.600
also really interesting.


01:09:41.600 --> 01:09:44.180
So as much as you bring those things forward,


01:09:44.180 --> 01:09:47.080
more power to you, we love it.


01:09:48.100 --> 01:09:50.060
- Yeah, sounds great.


01:09:50.060 --> 01:09:51.860
- Yeah, thanks.


01:09:51.860 --> 01:09:53.020
See you later. - Thank you, Michael.


01:09:53.020 --> 01:09:53.860
- Yeah, bye-bye.


01:09:53.860 --> 01:09:55.140
Thanks everyone for listening. - Bye.


01:09:55.140 --> 01:09:55.980
- Bye.

