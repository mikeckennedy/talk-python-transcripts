00:00:00 >> Jay, welcome back to Talk Python To Me.

00:00:04 >> It is always a pleasure to join the show and hang out.

00:00:09 >> Yeah, it's a pleasure to have you here.

00:00:11 You help out with all sorts of things and it's been great to bounce ideas off of you.

00:00:16 I've had you on the show a couple of times, literally two times so far, I believe.

00:00:21 >> How many more before I get like that golden jacket like they do on SNL?

00:00:25 >> You get the golden jacket after 10.

00:00:27 It's just a really, it is a commitment to get the jacket.

00:00:31 We've only-- - Wow.

00:00:32 - Yeah, well, we'll pick up the cadence here and we'll get you the jacket.

00:00:36 I mean, you're a third of the way there basically.

00:00:38 - All right, all right, I got goals now.

00:00:41 Before I retire from the Python community, I will have my golden jacket from Talk Python.

00:00:46 - That's right, oh man, if you come on 10 times, you are getting a jacket.

00:00:49 I'll figure out how to get one of those.

00:00:51 - I'll demand one.

00:00:52 - Awesome, well, thank you for being here.

00:00:54 This episode is going to be something of a reversal, but not 100% reversal.

00:00:59 I've got all these ideas about developer productivity.

00:01:03 I've been bouncing around and I want to share them with the audience.

00:01:07 And so we're going to kind of share those together, right?

00:01:10 I'll present them because I, it's my idea.

00:01:13 I want to, I don't want to force that recommendation coming out of anyone else.

00:01:17 Not, not, or, you know, you in particular.

00:01:19 So I'll present them and then we'll discuss them.

00:01:21 Right.

00:01:21 So you'll be both the guest and the sounding board.

00:01:25 How's that sound?

00:01:26 - I get to be the Simon Cowell to your performance.

00:01:29 I love it.

00:01:31 - Yeah, exactly.

00:01:32 Well, hopefully you're in a good mood because Simon, he can be tough sometimes.

00:01:37 We'll see how it goes.

00:01:38 We'll see how it goes.

00:01:39 - I've seen the talk.

00:01:40 I think there's a lot of great points in there and some stuff that I immediately was like, oh, and then I heard you explain it.

00:01:46 I go, actually, you know, that's not a bad idea.

00:01:47 So.

00:01:49 - Well, you let me know where you disagree because a lot of these things, one thing that works for one person is exactly the wrong thing for others.

00:01:57 Now, before we jump into it though, you've been on the show a couple of times.

00:02:02 The most recent time we were on, we talked about little automation tools, which was super fun.

00:02:07 We had you, we had Rusty, we had Kim Van Wick, and we had Rivers Cuomo, of all people, who did a fantastic job on the show.

00:02:15 So that was really fun, and I feel like that's a really good lead-in to this conversation here.

00:02:20 Before we get to it though, you know, just for people who don't know you, it has been a little while.

00:02:27 When was that?

00:02:28 That was back in July since you've been on the show.

00:02:29 Tell people a little bit about yourself.

00:02:31 Yeah.

00:02:32 So I'm Jay Miller.

00:02:33 I'm a developer advocate for a company called Elastic.

00:02:38 We do Elasticsearch.

00:02:41 I also do podcasting and a lot of productivity automation.

00:02:46 And you can usually find that stuff over either on relay.fm, where my podcast lives, or on YouTube where I'm often talking about different productivity tools around the macOS ecosystem or the iOS ecosystem, mostly Mac.

00:03:02 And I guess the biggest difference there is I don't shy away from like the programming friendly stuff.

00:03:09 I am the more that I can hack in, you know, shell scripting, Python scripts, even Swift from time to time, like, bring it on.

00:03:19 I am here for it.

00:03:21 And yeah, so you're not, you're not, you're going to see some software recommendations from me, but I often tell people like, let's use what we know, build what we can, and ultimately just make things that work for us.

00:03:33 And it's kind of me, it's kind of what I do.

00:03:36 - That's awesome.

00:03:37 If it's got to be solved with if this than that, then let it be solved that way.

00:03:41 Right.

00:03:41 Absolutely.

00:03:42 Yeah.

00:03:44 You want to give a quick shout out to your podcast in particular conduit.

00:03:47 Yes.

00:03:47 That's kind of new, right?

00:03:48 You also did the productivity podcasts before this and then transitioned over here.

00:03:53 Right.

00:03:54 Yeah.

00:03:55 So before I did a show called productivity and tech, it was, you know, just a general productivity conversation with people around the tech, I guess, lowercase word tech ecosystem, just learning how they did things and how they were more productive.

00:04:10 Somewhere along the lines, I found my co-host for my current show, Kathy Campbell. And we do a show on Relay.fm called Conduit, where we talk about productivity, but make it so that it fits no matter what tools you're using. We do like to make up our own different funny names for things, different techniques and tools and stuff. But ultimately, the idea is whether you like GTD, whether you like bullet journaling or whether you absolutely have to build to-do lists in Visual Studio Code, like whatever you're choosing to do, like hopefully we can provide some guidance on how to do it to the best of your abilities.

00:04:50 Yeah, that's awesome. We all have different tools. I remember being in one high-level meeting with some executives and such and they said, for some reason my screen was being shared because I was demoing something I said, Michael, can you just go and take some notes on so I guess sure. So I fired up VS Code in markdown mode and just started taking notes. So I go, okay, I see how we're taking notes here. This is very like, I didn't know they expected like one note or something. I know what they wanted.

00:05:16 But yeah, like, no, this is how we do it. We're doing this.

00:05:18 Yeah, I mean, you'll often hear me talk. I'm a notebook pen and paper person. So when it comes to managing projects or tasks, I'm often starting in my notebooks, and then I'll move it over to a digital format, like if I need to share it out or something like that.

00:05:34 Yeah, right on. Also, from the audience, Jaylee says, "Please make that golden jacket a thing." Goals. Yeah, we got goals. I think so. It's easy for me to stand behind this because I'm pretty sure we don't have any 10-time repeat guests.

00:05:48 I've put the bar pretty high, but we'll get there. It'll happen. It'll be awesome.

00:05:53 I feel like I'm in the race with people like Rusty Van Wick and Anthony Shaw and maybe Brian.

00:06:00 I feel like Brian can sneak his way on.

00:06:01 - Brian does sneak in periodically.

00:06:03 He's an easy one to reach out to and like, hey, we gotta cover this topic and I can't find somebody.

00:06:08 You wanna drop in and do it?

00:06:10 Yeah, awesome.

00:06:12 So what do you think?

00:06:16 Should we jump into the tips straight away?

00:06:18 - Let's do it, I'm excited to.

00:06:20 - Awesome.

00:06:22 Well, I think there's a lot of little things that you pick up when you work in software.

00:06:29 And I feel like you and I share this belief that software is the superpower to whatever you're actually trying to do.

00:06:36 Right. You talk so much about, "I found this cool tool to automate that." Like, you've even created mail through automation.

00:06:44 And stuff like that. It's beautiful.

00:06:48 Yeah, I you know, I think the coolest part about tools is that they are that they're tools.

00:06:54 I love artists that are able to take a tool that wasn't designed for that thing and like, make something truly beautiful with it. Like I mean, the first time I saw like Bob Ross on like TV, you see some of the brushes that he uses. And they're not like these little ones that you've used in like your high school arts class. They're like shop brushes that you would use like paint in a fence and like somehow he could still make these crazy pictures in like 30 minutes.

00:07:23 - That's where the happy trees come from.

00:07:25 - Exactly.

00:07:26 - Awesome, so the things we're gonna cover here, they're like that, they're a bunch of little things and I specifically chose them because I thought they're incredibly easy to try out, right?

00:07:38 They're not like, oh, you know what you should do?

00:07:40 You should move to a NoSQL key value store database.

00:07:45 That would be better.

00:07:46 You're like, yeah, no, that's like a month and then we have to live with the consequences.

00:07:49 Like, so everything that we're gonna talk about here, I believe is something you could try out really quick and say, yeah, that's cool.

00:07:56 Actually, no, maybe not.

00:07:59 Okay, if we got some time, I'm gonna throw in some extra ones there.

00:08:03 - I think everything here is free, except for like one or two things.

00:08:08 So like, absolutely.

00:08:10 Your download manager like might get exhausted, but your bank account won't.

00:08:15 - Exactly, exactly.

00:08:17 So the first one that I wanted to start out with, and I feel like this is a very bimodal distribution, is shells or terminals or command prompts, depending on your origin, where you're coming to think about these things.

00:08:32 And I say bimodal because I feel like there's one group of developers that lives in the shell, even more than me by quite a wide margin.

00:08:40 They're incredibly talented there.

00:08:42 And then there's a whole group that are just like, well, whatever is on my system, that's what I'm using.

00:08:47 What do you think? What would your estimation on that population be like?

00:08:50 it's tough because I think as the community continues to grow, you're going to have more and more people that are not back in my day, we had the green screen with the blinky dot, you know, like, I don't think you're going to have as many people that are doing that. And I don't think that's necessarily a bad thing. I think the first programming thing I learned was like, when I was I was like eight or nine and like my grandfather was using Eclipse.

00:09:20 >> Yeah.

00:09:21 >> It's like I don't go anywhere near Eclipse now, like that's not me at all.

00:09:27 But nowadays, even in my IDE, I find myself often going into Vim to make changes.

00:09:36 In my IDE, instead of just clicking on the file right there, making the change, it's like, "Oh, I know I can do this faster just from my muscle memory." I think having at least some knowledge of, if I need to dig into the shell, I can.

00:09:54 I think that was actually one of the things you talked about here was using different tools to augment the shell.

00:10:00 >> Yeah.

00:10:01 >> I think that even if you're not going to go in there a lot, at least when you have to go in there, make it at least enjoyable.

00:10:08 >> Yeah. There's a bunch of little tools.

00:10:11 There really seems to be a renaissance of the tools around the terminal.

00:10:16 We've got things like rich and textual, allowing people to make really cool apps there.

00:10:21 We've got, oh, my Z shell, oh, my posh, bunch of things there, some stuff called fig.io.

00:10:29 I'm not totally sure I want to make a recommendation for it yet, but I'll sort of bring it out there and so on.

00:10:34 So yeah, so my recommendation was, if you open up your terminal or command prompt, if you're on Windows and you're still using cmd.exe, If it looks like the way it looked when you got the machine, there's a problem.

00:10:52 You're doing it wrong.

00:10:53 If it just comes out of the box and it's just cmd.exe, that's what you're using.

00:10:57 Or if you just open up macOS and it's the white bash, like you're missing out on so much.

00:11:05 Yeah, Brandon Brainer, hey out there in the audience, says I'm using Fig and it's pretty awesome.

00:11:09 I just started checking out Fig.

00:11:10 I'll pull up Fig in a moment.

00:11:12 We'll talk about that.

00:11:13 So on one hand, there's a bunch of people who are incredibly talented, but there's also all these things that support being more efficient on the terminal.

00:11:24 So for example, I'm a big fan of omyzsh, o-my-z-s-h, at o-my-z-dot-s-h, which I learned that macOS now switched to zshell as the default terminal, so that's interesting, but that means it's even easier to install omyzsh 'cause you've already got ZSH or Zshell.

00:11:44 And there's just so many little nice tricks.

00:11:48 Like if you go into a directory and that directory happens to be within a Git repo, you get information about your Git repo right there in the prompt.

00:11:57 It tells you what branch you're on and what repo you're in and all those kinds of things.

00:12:01 If you can get it to say things about like the Python version that you're on and so on.

00:12:05 Do you ever use Zshell?

00:12:08 What do you use?

00:12:08 - Yeah, I use all my Zshell.

00:12:10 Absolutely. Like it's to me, if I'm not using it, I immediately know because of like, it's like, wait a minute, what's happening here? I'm typing stuff and nothing's happening. And I don't I hit tab and it didn't help. Or I hit, I typed a few things hit back here and it just went back to the previous command. This is broken. So so we can't I can't give you the name on it. Because I guess we'll try to be a family friendly episode. But there's One of the things I like about my Z shell is that they have these plugins that do a lot of the configuration for you, which is already a big help.

00:12:47 >> Yeah, autocomplete and all sorts of things.

00:12:50 >> Not even that, just the fact that I don't have to go into my ZSHRC and then put a bunch of path statements and this crazy shell scripting to make things work.

00:13:01 I can just go to the plugin section and type something in.

00:13:04 But one of my favorite ones, The command for it is WTF, so if you know, you know.

00:13:11 But the way that it works is if you type in something wrong, like if you mistype it, if you type in the magical phrase, it'll go, "Oh, I think you meant to type in this." You can just hit Y and then it inputs it in for you.

00:13:30 If you can't remember what's that one weird command that you have to use, if you're using something like sed or oc, which I will, I have a another suggestion if you're using those still, like, you can be like, oh, I think you meant awk/this, not awk/this other thing.

00:13:47 Yeah, like, yeah, that's what I meant.

00:13:49 And you just said, okay. - That's awesome.

00:13:50 There's one also that is the spelling out of the last of those three letters.

00:13:56 - Yeah. - In there.

00:13:59 And you type that and it'll say, did you, like, if you do like a get checkout and it meant get branch or something like that, you can just type that and go, did you mean this?

00:14:08 You say yes, and it'll fix it.

00:14:09 Yeah, it sounds similar as well.

00:14:11 That's awesome.

00:14:12 - Yeah, and things like FastD and ASDF, like ASDF I'm sure we'll talk about later, but FastD, like the fact that you can do things like fuzzy searching, you don't have to remember the exact path.

00:14:22 You just know the name of the directory you want to go into.

00:14:25 You hit Z space, the name of the directory, hit enter, and then now you're in that directory.

00:14:30 And if it ever messes up, you just hit tab, and then you can manually set it to whatever you want it to be so in the future, it doesn't mess up again.

00:14:38 To me, it's like you're missing out on a very modern and clean browser experience if you're not kind of unleashing it with some of these extra plugins and oh my Z shell is the way to start with those.

00:14:51 - To me, it feels a little bit like I'm programming in notepad versus I'm programming in PyCharm or VS Code.

00:14:57 Like, why would you not want all this stuff that can help you with what you're trying to do?

00:15:01 Okay, if you just take the base one.

00:15:02 All right, so now if you're in Mac, I think macOS has the best shell of all the OSs.

00:15:08 And then you've got Linux, there's a lot of good stuff there, they're very, very similar.

00:15:12 But then if you're on Windows, I felt like that's just a different world, right?

00:15:17 It's just, you're not meant to be on the terminal command prompt that much.

00:15:22 Until recently.

00:15:25 So Microsoft released this thing called the Windows Terminal, which I started using on my Windows machines.

00:15:32 and I really like the Windows Terminal.

00:15:34 There's a bunch of good stuff in there.

00:15:37 And in particular, you can install Oh My Posh on there and get fantastic similar experiences over on Windows Terminal plus Oh My Posh.

00:15:46 - Yeah, I haven't gotten to play around with the new Windows Terminal experience, but everything that I've seen makes me really impressed with what they've been able to do in the last few years.

00:15:59 - Yeah, totally.

00:16:00 And you can set up Windows so that If you just say open command prompt, open terminal, the default terminal is the Windows terminal.

00:16:09 And then within Windows terminal, you can set up the new PowerShell, the PowerShell 7 or whatever it is, not the old school PowerShell 3 or command prompt version.

00:16:18 So it'll also drop in to like the latest version with Oh My Posh set up, and then you're in a pretty good place on Windows actually.

00:16:25 - Yeah, and I guess on Mac too, I mean, terminal is fine, use iTerm.

00:16:30 Like iTerm2, it is--

00:16:32 unless you're using a shell emulator of some sort, I would highly suggest iTerm2 to replace it.

00:16:42 OK.

00:16:43 Thanks for the recommendation.

00:16:44 Now, a couple other things.

00:16:48 A lot of time-- we're going slow.

00:16:50 But we'll make it.

00:16:50 We'll make it.

00:16:51 We've got a lot of stuff to cover.

00:16:53 Something I came across--

00:16:54 This is the most exciting one for me, because it's like, oh, you want recommendations.

00:16:57 I'm here for it.

00:16:58 Yeah, absolutely.

00:16:59 Oh, it's so good.

00:17:00 Yeah, if we spend a lot of time here, I think that's also totally fine.

00:17:04 So one of the things I much prefer about all my Z shell over say bash is I could type git space and hit the up arrow and it'll only show me stuff that started with git.

00:17:17 So if I'm like, all right, what were the git commands I recently did?

00:17:20 I hit up arrow, up arrow and it'll cycle through and very common like SSH.

00:17:23 And like, I need the third server I was recently on and I don't wanna type it.

00:17:26 So SSH space, up arrow, up arrow, up arrow, enter, right?

00:17:28 And that's really good.

00:17:30 Something I've been using for about a month now that's really neat was recommended to us by somebody listening to Python Bytes.

00:17:37 We covered it there.

00:17:38 It was McFly.

00:17:39 Are you familiar with McFly?

00:17:41 - I'm not.

00:17:42 And now I wanna know, 'cause I have a very specific wish that OhMyZshell would do.

00:17:48 And if this does it, I will Insta-download it.

00:17:51 - Okay, first thing that makes this nice is it integrates in a non-conflicting way with OhMyZshell.

00:17:58 So I have McFly and my Z shell working together.

00:18:02 Okay.

00:18:03 So McFly, what it does is if you type normally, if you type control R, it'll go to a reverse search like on bash or Z shell or whatever, right?

00:18:11 And that's I find to be very useless.

00:18:14 - I've never done that.

00:18:15 - Yeah.

00:18:15 You know, I'll tell you what I do.

00:18:16 I'm like, oh, I tried to type something else and I accidentally hit it.

00:18:19 I'm like, darn it, I gotta get out of this thing.

00:18:21 I know that you can search for stuff historically and it's useful.

00:18:24 But my, what I already talked about with the up arrow stuff, That's like the way I go through history in Z shell, like open my Z shell, really nice.

00:18:32 But this, imagine if you could just say, actually, what I want you to do is use artificial intelligence, a context, and fuzzy matching to show me a dropdown Emacs-like experience from my history that I can then run.

00:18:48 So what you can do is you can type a part of a command and hit Control + R, and this replaces your Control + R with this like full screen select mode that'll show you all the stuff, which is really cool.

00:19:00 The stuff that matches, and it doesn't have to just be the beginning, it can match in the middle of strings and commands.

00:19:07 So you're like, "Oh, I checked out this branch.

00:19:09 "I don't remember where it was." Or you just type part of the word of the branch and hit Control + R and then boom, there's all the commands you ever issued to that branch, basically, which is fantastic.

00:19:17 It uses context.

00:19:19 So if you're in a certain directory, or you had just typed one command that's usually followed by another command, it'll give you different ordering on your history, not just the order you typed in, but like usually go to this directory and type that.

00:19:30 So you're in this directory, you ask for help on it.

00:19:32 So we're gonna suggest that one first.

00:19:33 Isn't that cool?

00:19:34 - See, that's the exact problem that I had was the directory sensitive like context.

00:19:40 And I mean, I guess the big example for me is if I'm building something in like Flask, I often use something like Tailwind CSS to do the styling for it.

00:19:49 And I need to reload Tailwind from time to time to add the changes.

00:19:55 And on some project I might put that CSS file in like static CSS tailwind/tailwindcss or something like that.

00:20:04 And the other one might be in like static tailwindcss.

00:20:07 And the thing I need to remember is when I do npx tailwindcss output, whatever that file name is, I always mess it up and I always put it in the wrong folder.

00:20:17 So if I knew what folder, like based on history, it was supposed to be in, like to me that solves that problem.

00:20:24 Yeah, I don't know how well it'll work there, but that's one of the types of things it takes into account.

00:20:31 You can also optionally turn on fuzzy matching and some other stuff.

00:20:35 So, so far it's been working pretty well.

00:20:38 I'm pretty psyched with it.

00:20:40 So yeah, this one's fun.

00:20:43 I would recommend people check it out.

00:20:45 It's been working well for me.

00:20:46 - I'm gonna give this a shot, but I have one that I recently just started using, and I think that this is, This might be something that a lot of folks have had issues with.

00:20:56 Have you ever tried to do like a grep for something and then you find the thing that you're looking for and then you're like, wait, but now I need to go and replace that thing.

00:21:06 How do I do that?

00:21:07 Yeah.

00:21:08 Like I found a program called Amber, which has two commands to it, ambr and ambs.

00:21:16 And the way I think I sent you a link in.

00:21:21 Oh, it's a link in the doc there for you.

00:21:23 But AMBR is a replace and AMBS is a search and everything else is basically the same.

00:21:33 And it uses that grep-like feature.

00:21:35 So you could do AMBR for, sorry, AMBS for search and then type in what you're searching for, what file directory you wanna have it search through.

00:21:46 It'll do some nice, you know, stylized matching.

00:21:50 And then when you're ready to replace it, just hit up, replace the S with an R and then add whatever you want to change it to.

00:21:58 And it'll just go in and make that change. So like if, if you, if you don't have to remember, like how does said work or how does awkward, it's like, you know what, just a MBR, I found what I'm looking for or in MBS other way around.

00:22:12 I always, that's the one thing I will say is I get them confused and mix them up when I'm talking about it. But you, You don't have to remember two different languages.

00:22:21 You just have to remember, replace one character with another and then add whatever I want to do as my substitute.

00:22:29 - Oh, that's pretty, pretty nice.

00:22:30 Yeah, I haven't heard of this.

00:22:31 This is great.

00:22:32 So another one, the one that Brandon talked about that I mentioned was FigIO.

00:22:38 This one is new and interesting.

00:22:42 So with tools like PyCharm and VS Code, as you type things, you get auto-complete dropdown.

00:22:49 What if you could have that as part of all of your shell?

00:22:53 That's what this fig thing is.

00:22:56 And it has crazy integration, like all sorts of coloration and stuff.

00:23:00 And to the point where I have a bunch of custom icons I put for certain folders so I can find them more quickly, when it shows the folders, if I type cd space, like GitHub space, like talk, and start to type talk Python, it'll show the talk Python icon on the folder.

00:23:17 It's auto completing in the terminal.

00:23:18 Like it's, it's ridiculous.

00:23:20 - This seed, this is where like, I wish that there was like co-pilot for just working through the shell.

00:23:28 Like I just start typing something.

00:23:30 It's oh, you meant to do this.

00:23:31 And it's like, yes, exactly.

00:23:33 And I hit okay and I'm good.

00:23:35 - So I was trying it.

00:23:36 They updated today.

00:23:37 It broke some stuff.

00:23:38 I got frustrated.

00:23:39 I've only tried it for one day.

00:23:40 So it's not a real recommendation.

00:23:41 Brandon seems to like it out in the live stream.

00:23:44 I thought it was pretty cool, but I can't give a full recommendation, but I can tell you to check that out.

00:23:49 All right.

00:23:50 So that was a bunch of stuff for just the shell, but I think this is really one of the things that's super important.

00:23:57 I'd also like to point out our ship.

00:24:02 Is that the one?

00:24:03 Yeah, Starship was the reason why I specified use iTerm if you're not using some type of emulator, because Starship is actually pretty cool.

00:24:12 Yeah, that's the one Brett Cannon definitely recommends all the time and.

00:24:15 I definitely admire his recommendations, so this is another one.

00:24:21 If you're not on the oh my zoo shell bandwagon, that sounds like it'd be pretty good.

00:24:26 This one's more about the prompt and not the whole shell, so you can like swap it from place to place, which is also pretty cool.

00:24:31 All right.

00:24:32 In Grok, have you done anything with in Grok?

00:24:37 I haven't please like I was taking a look at it and I was like this seems amazing But I also don't know if I have a need for this in grok.com Yeah in grok.com so There's this there's like three or four scenarios that are just so painful That this solves so well. So in grok is a tool that's free but also as a paid plan it's like a hundred dollars a year they get a hundred of my dollars every year because it's extra useful what you can do with the paid plan for me, but maybe it's not for you, so you can try it for free.

00:25:09 So let me give you a scenario.

00:25:11 I'm working on rewriting the credit card e-commerce system of TalkByLine training, yeah?

00:25:20 And the way this new site that I'm at, or new service I'm gonna integrate with, tells me somebody bought something because you don't wanna do all the processing on your server 'cause then you have PCI compliance and all that stuff.

00:25:30 Like they do the processing and they let me know, and they take the person to where I tell them they need to go.

00:25:36 The way they let me know is they do a webhook, a call into my server with the results, and then I create the access to the course and then redirect, and then when they go to that place, they have access to it, for example, right?

00:25:50 - Okay.

00:25:51 - So I've gotta debug this, and I've gotta debug their server calling into my server.

00:25:56 And you're like, well, how do you do that, right?

00:26:00 So one terrible way would be to like open up your router and put your computer straight on the internet.

00:26:07 But with ngrok, you could just say ngrok, I wanna accept HTTP messages to my local machine.

00:26:12 It opens an SSH tunnel out.

00:26:14 So it doesn't have to open any firewalls, any ports.

00:26:17 It can be as complicated on the way out of town as it wants to be.

00:26:21 And then it listens on ngrok.com for an HTTPS URL that then is SSH tunneled back to my local server.

00:26:28 So I put a breakpoint in PyCharm, go to their little app and type in my stuff and say, "Test this purchase," and then boom, paused in PyCharm, pausing their server requests as I'm going through.

00:26:39 - See, I thought about something like that.

00:26:42 And as soon as you pulled up the site, an actual use case for me popped up.

00:26:47 And a good example of this was, you know, doing the developer advocate thing, I often have like builds of stuff, servers, you know, Docker composed instances.

00:26:56 I keep all of this on a Mac mini at my house.

00:26:59 The one time I actually needed it and it bit me in the backside was, I was in LA for KubeCon recently.

00:27:08 I was like, "Oh no, I want to do this demo." But all of my database stuff is on my server at home because we haven't been going anywhere for a long time.

00:27:20 >> You forgot what it meant to leave the home.

00:27:22 >> Exactly. Had I had something like this, I could have just said like, you know, open up access on this port and this port only and say like, hey, now I can actually access data on my home server and keep all of my configs the same.

00:27:37 Instead of doing what I had to do, which was like re-download all the data, open up a Cloud instance and then move everything to the Cloud, and then get a call from our company saying, hey, your bill went up like several hundreds of dollars, what gives?

00:27:52 It's like, I'm sorry, I was downloading gigabytes of data.

00:27:55 - I forgot and left it on, yeah.

00:27:57 - Yeah, on conference Wi-Fi nonetheless.

00:28:00 - Yeah, yeah, so you don't even have to open up ports.

00:28:03 It's just like you run this and then it SSH tunnels in reverse back.

00:28:09 It's really, really awesome.

00:28:11 So, and you can just leave it running for days if you want.

00:28:14 Another example is when we were debugging the mobile apps for viewing the courses, we just told it the URL was that, opened up the phone, it didn't matter if we were on LTE or whatever, hit a button and boom, break point again.

00:28:30 Another one that I think this would be really helpful for is, hey, I'm in this standup meeting, I wanna show everybody this new feature we added to the website, but it's only on my local version, we haven't deployed it.

00:28:41 But you don't wanna show it over Zoom 'cause like the animations look crappy and all that, just end grok it, give everybody in the meeting a URL and they can interact with it live with all like the JavaScript fanciness.

00:28:51 but it's running on your server, right?

00:28:53 It's just the latest one.

00:28:54 It's beautiful.

00:28:54 - I was thinking about that in terms of like, what's the overall latency of what is happening there?

00:29:00 Because in my mind, I'm like, this is the better way to show people things.

00:29:05 It's like, you can go to this website and you can play around with this.

00:29:08 And at the end of the day, like you just close the ngrok connection and you know, it's all done.

00:29:13 You don't have to-- - Exactly, control C and like you're off the network again.

00:29:16 Yeah. - Yeah.

00:29:17 I might have to play with this as soon as we're off this call 'cause I have a demo that I have to do soon.

00:29:22 - Yeah, it's awesome.

00:29:23 One of the things you get with the paid plan is you can create a stable URL.

00:29:27 Whereas if you have a free one, it always resets the URL.

00:29:30 So you gotta like reshare it, which might be fine.

00:29:32 It might actually be good, but anyway.

00:29:34 - That's good for me.

00:29:34 I need it to reset on its own.

00:29:37 - Yeah, so instead of trying to set up some crazy server setup at home and trying to do like router NAT routing, which you probably don't wanna even expose your server to the air, your machine to the internet, just fire up an ngrok session, good to go.

00:29:50 I really think this is a, I've been using this like all week and it just reminds me how much I love it.

00:29:54 I'm like, yep, it's just set the sandbox URL to have my ngrok endpoint instead of the production endpoint and boom, it's good to go.

00:30:05 - You know, one of the things that I was thinking about as a productivity tip is very much for the beginners out there.

00:30:11 Like I have always struggled in the idea of like, Oh, what do I do with all of this server admin stuff that I don't want to have to do?

00:30:23 Yeah, I remember how intimidating that stuff was.

00:30:26 Yeah. And I think that this is, you know, it's kind of a good segue between, you know, the next topic that you're going to talk about and this existing one. And that's like the idea of like you, it's okay to embrace, you know, not necessarily the serverless ecosystem, but like the power like the past product as a service ecosystem to where like, "Hey, I just want to build my app and I don't want to be a sysadmin, can I do that?" Now with stuff like Netlify, Vercel, DigitalOcean has a thing now like-

00:31:00 >> Heroku.

00:31:02 >> Heroku.

00:31:02 >> Yeah.

00:31:03 >> Like taking advantage of some of those things or even doing something like ngrok that you can spin up when you're done with it, tear it down.

00:31:11 I think that was actually a tip on the last time we were in this call is like I often build admin consoles and flask Do them locally have them connect to my servers off-site to do any database changes and that way I know for a fact I'm not leaving anything secure open because I'm just doing local hosts It's sending the API calls and when I'm done and I close the terminal it Disconnects and there's no more access unless someone has my API keys. I'm not putting anything up on the server I'm not putting anything up in GitHub and I don't have to maintain it and be worried about it. I can just go Oh Python app dot PI enter and then go to localhost 5000 make my changes and then close it and then cool Got access don't got access that easy. Yeah, that's very nice. I love it Jaley out there also says I'm using in grok for to work with my RPI Raspberry Pi Yeah, for home security services works great. Yeah, that's another thing on like devices like that aren't necessarily listening You get him to sort of push out and then start listening again on the public. Yeah, there's a lot of good use of the Intelligence in grok thing. It's it's the thing of beauty. All right So another thing that I think speaking of people who are beginners and struggle, right?

00:32:27 Has to do with security right you push something out on the internet You know, who knows what's gonna how quickly will it get owned right? It's not gonna be good And there's a bunch of recommendations from a wasp That they say look these types of things we found to be common vulnerabilities that websites have like injection cross-site scripting Other things like if you don't explicitly disallow it, people can take your site and embed them in an iframe and then wrap other stuff around it, right?

00:33:07 Like go to your login screen, but actually overlay something that captures the keystrokes or other weird things, right?

00:33:15 So how do you keep track of these?

00:33:17 How do you prevent them?

00:33:18 So this thing called SecurePy is fantastic.

00:33:24 And it's got the most amazing IPI name, just secure, like how they got that name, I have no idea, that's incredible.

00:33:34 But it integrates, one of the things I like is it just, it's like a couple of lines of code to integrate into whatever framework you're using.

00:33:41 So, court, responder, sanic, flask, FastAPI, Django, pyramid, AIO, HTTP, like all of these things.

00:33:49 And it's just a couple of lines of code to get it integrated.

00:33:54 Usually it's some kind of like middleware type of thing that you wrap it up with.

00:34:00 And so in order to use it, all you have to do is create one of these secure headers and then you set a couple of values like whether or not you wanna allow cross-site scripting and things like that.

00:34:13 And then what it'll do is it'll automatically put all the security controlling headers into the response coming out of your website.

00:34:22 So for example, X content type options, no sniff.

00:34:26 Did you know you hear that?

00:34:27 Want to protect against that X frame thing or I frame, X frame options, same origin.

00:34:32 So that you can do it, but no one else.

00:34:35 Things about the referrers and so on.

00:34:37 Cross site origin for JavaScript and whatnot.

00:34:41 So it's super easy to integrate with what you're doing.

00:34:45 Also, it's like a tamper proof cookie type of option for doing that as well.

00:34:51 So what do you think of this one?

00:34:53 - So I know when I first saw this, I was like, oh, what is this obfuscation of like what's happening behind the scenes?

00:34:59 And I literally just talked about this 30 seconds ago, like, oh, you don't wanna have to think about that stuff.

00:35:06 Yeah, I'm gonna completely walk that back.

00:35:09 And in my own projects that I'm building, it's like, I wanna know what's happening.

00:35:15 I just don't wanna have to maintain it.

00:35:17 Which is like, and that's kind of where you actually, your response in like showing how this works and showing like, it's just adding the headers on that it needs, makes me feel a lot better because I mean, I'm in a DevOps space where we're like, we do a lot of like APM stuff.

00:35:35 And I just got off a live stream where someone was like, yeah, it just connects to your platform.

00:35:40 And it's like looking and digging and getting like logging of all of this stuff that like is a dependency of the tools that you're using.

00:35:48 and it's like, oh, that's kind of, I mean, it's cool.

00:35:51 - Should it be doing that?

00:35:52 I don't know if it should be.

00:35:53 - I mean, it's great because I know that I can drill down and see where the problem is, but at the same time, like I wanna know that it's doing that.

00:36:00 And that's my concern with tools like this, but I will always say, leave security to people who know security and don't try to roll your own.

00:36:15 I think Jacob Kaplan Moss said that.

00:36:17 - Yeah, that's good advice.

00:36:18 One of the things that in my dream world imagination or idealification of this thing is, if a new recommendation comes out, some new header that we should all be adding that we are not paying attention to, that we should have added, but we didn't for some sort of configuration change for security, SecurePy could be updated to make those changes and you just pick them up and you don't even have to know that that was improved.

00:36:45 So, directly.

00:36:48 That makes me wonder, do you know if any of these protections come in at a platform level?

00:36:57 Like if you're using something like a Netlify, you say, "Oh, I use Netlify functions to load a thing." I wonder if Netlify is doing something on their end to also include some of these.

00:37:10 And that's where a lot of my concern comes from, is that if down the road I'm doing a thing and then like my provider is also doing a thing, am I going to run into some goofy error that I have to troubleshoot?

00:37:23 - I would guess because it's headers, just they would overwrite what your app creates.

00:37:27 This is more intended for like Flask or Django or something like that, where you're kind of the beginning and the end of the security statement, you know what I mean?

00:37:38 Something like that.

00:37:39 - Absolutely, and like I said, I will always leave security to, in the hands of people who get paid to think about security because I know I should be thinking about it.

00:37:50 And the most secure thing I can do is say, hey, I need an adult in this situation.

00:37:56 - Yeah, I've thought a lot about this and I haven't, absolutely.

00:37:59 I also would like to point out that if you're not doing Python and web apps, I mean, first of all, what's wrong with you?

00:38:05 No, but seriously, second, there's tools like this for other frameworks for like ASP.NET and other ones.

00:38:12 If you want it, if you seek it out, they have a totally different names.

00:38:16 Very unlikely to have a cool name like secure, but there's other tools for other frameworks and platforms as well.

00:38:21 - You'll have to listen to talk whatever that language is to me, I guess, to hear about those. - Exactly.

00:38:27 Yeah, yeah.

00:38:28 Talk Cobalt to me about our APIs.

00:38:31 All right.

00:38:32 So yeah, to integrate it is like incredibly easy.

00:38:34 So that's super cool.

00:38:35 All right, so here's a recommendation, which is in some sense in contrast to how much I went on and on about how much I love the shell and the terminal.

00:38:45 And that is don't shy away from UIs for your Git.

00:38:49 For source control basically.

00:38:50 - This is the one that I was like, oh, I'm ready to fight on this one.

00:38:54 - All right, let's battle.

00:38:55 So here's the thing.

00:38:57 I think there's a lot of value to having nice visualizations of what's happening, right?

00:39:05 Like for example, my first thing I pulled up for this was source tree from Atlassian.

00:39:11 And when you open up a repo, you see the branch history and who has made what changes and where the tags are all in like one quick shot.

00:39:19 And you still have hotkeys.

00:39:20 Like if you wanna just do a pull latest, you shift command L and that's the same as get pull.

00:39:24 Wanna push, shift command.

00:39:27 I don't remember what the push button is.

00:39:29 P maybe, but you know, there's a couple of hotkeys that are sort of give you a quick access that is like being on the terminal, but you also have really nice and beautiful things one for if you're an expert or two, like if you have two branches, you want to merge one, you drag one branch on the other and that merges the changes from one to the other.

00:39:48 There's things that help people who are new a lot.

00:39:51 So I find this doesn't mean you should never do source control in the terminal or with Git in the terminal, but that also shouldn't mean you should never use UI tools.

00:40:01 That's my stance.

00:40:03 How do you feel about this?

00:40:04 - Okay. - The same, I can tell.

00:40:05 You feel the same.

00:40:06 - With that phrasing, I'm like, fine.

00:40:10 But I took the first word on this one.

00:40:14 So, go from there.

00:40:16 So I have many a tweet that has said, I have made said mistake.

00:40:23 I need to unmistake it.

00:40:25 And how do I do this?

00:40:27 And almost like clockwork, I do it wrong.

00:40:31 And I wind up, yeah, I just, I wind up deleting things that weren't supposed to be deleted and then I'm banging my head against the wall and and figuring out how do I fix this.

00:40:40 >> The biggest Git undo is just delete the whole directory.

00:40:44 >> That is actually.

00:40:46 >> Check it out again and just hope that you can get it back.

00:40:49 >> Yeah, that's exactly my solution in most cases.

00:40:54 Again, I also want to say, I am not saying that any type of UI is bad.

00:41:01 I'm just saying, if you're getting started, learn the basics because you're going to be on a server one day, You're not going to have access to tower or source tree or something else.

00:41:13 And you're going to need to know what was that command.

00:41:16 Like what is cherry picking, get whatever, whatever.

00:41:21 And it's like, you're going to need to know it.

00:41:23 And if you have an over reliance and you don't understand what's happening behind the scenes, that's when you're going to be in trouble.

00:41:31 So for me, it is very much You can use the UIs, you can use the tools, know what's happening behind the scenes, and know what they are as well.

00:41:45 I love this comment, why make things more difficult?

00:41:48 There's so much to memorize in our languages already, why do we need to memorize the Git commands as well?

00:41:53 That's the thing.

00:41:54 You don't have to memorize all of the commands.

00:41:57 You just need to get a good understanding of what you do need to know.

00:42:01 On top of that, plus we already talked about, use things like OhMyZSH, where you can just tap through it and get a list, and you can use man, and you can learn about all the different commands and what they do.

00:42:11 But again, if you hit "Delete" on the GitHub interface, what is that doing?

00:42:22 Is that deleting your entire repo?

00:42:25 Is that deleting the clone that you have locally?

00:42:27 What is happening?

00:42:29 What happens when you go to use some other tool and they use the exact same phrasing to do something different.

00:42:35 What happens when you go to a new company and your Git workflow changes and you're like, "Oh, well now we don't do branch stuff, we do tagging and things like that." I'm not saying that you can't use the UI.

00:42:50 I'm just saying it's good to understand what the UI is doing so that if you ever need to change it or if you ever need to change what UI you're using, you can do so and do it in confidence.

00:43:02 And when you're stuck in that one situation that I have personally been in, where it's like, crap, I don't have the button that I press.

00:43:09 Like, what do I need to do?

00:43:11 Like, you can at least have a better chance at making the right decision.

00:43:15 - Yeah, no, that's fair.

00:43:16 I would say to Robert, I think RJL is Robert.

00:43:20 Hopefully I got that right, Robert.

00:43:22 There's probably five or six Git commands you need to actually know how to do.

00:43:28 And then the rest, I would go to the UI.

00:43:31 Because to me, it's like, do I really need to like visualize the branching in some other way?

00:43:35 Nah, I'll just open up source tree and look at it.

00:43:37 That's gonna be totally fine.

00:43:39 But if I need to know how, you know, get pull, get commit, get add, get push, get checkout.

00:43:47 Like these are the various things I need to know, you know.

00:43:50 But like a complicated rebase, maybe I'll just go, all right, I'm gonna find the server or the UI and I'm gonna do it.

00:44:00 We've all done that interactive rebase and we're just like, why am I doing?

00:44:03 We get like three of them through and we're like, yeah, sure, whatever.

00:44:07 Just accept the rest of them and go.

00:44:09 And then you realize that you weren't, you shouldn't have done that.

00:44:12 (laughing)

00:44:14 I'm totally there.

00:44:15 - Why am I in VI?

00:44:18 Just accept theirs, accept theirs.

00:44:20 - But I think that that's the thing is like, no, I'm not typing git commit dash M, insert my message and then all the files that I wanna commit.

00:44:29 I'm often just doing git add.gcam for git commit, add message, all, and then whatever my message is.

00:44:37 But at least I understand what those commands are doing.

00:44:41 So that down the road, and to be fair.

00:44:44 And to be fair, sometimes the tools, like you're also giving access to your repo.

00:44:49 Like, I mean, it's cool if you're using like GitHub and everything's public, but like, you're also adding a layer of opening to another company.

00:45:02 And I would be hesitant to say that there's no company out there that's not going to be vulnerable to some type of attack.

00:45:11 And then you got to revoke access to your repos and things like that.

00:45:15 Because again, in order for these UIs to work, you're giving it a lot of access to what you're doing.

00:45:21 So again-

00:45:22 - And some of them, I think, I think source tree mostly just work, like you can just drag a folder onto it and it'll start to do its thing.

00:45:29 Whereas there's other ones where you're like, OAuth, all the OAuth signing into GitHub or GitLab or something, yeah.

00:45:38 All right, I'm gonna let Anthony from the audience have the final word here.

00:45:41 Don't roll over SourceTree today.

00:45:43 - Yeah, not at all, not at all.

00:45:45 Like use the tools.

00:45:46 I think Tower's great.

00:45:47 I think the GitHub UI is great.

00:45:49 I've never actually used SourceTree.

00:45:50 I'm sure it's fine.

00:45:51 - I would say SourceTree is the one that hides the least.

00:45:54 It's there to help you and there's UI, but like it's actually pretty complicated in what it does.

00:45:58 And I don't mean that in a bad way.

00:46:00 Like it's it's not hiding everything behind pseudo actions.

00:46:04 Yeah. And I'll also throw out there.

00:46:06 I am probably not the best, you know, subject test case for this because most of the project that projects that I work on, it's just me or it's me and like one or two other people.

00:46:18 So it's easy to follow that tree.

00:46:20 If you've got 50 people working on a thing and you need to be able to trace back and forth what's happening.

00:46:26 I totally get using a tool to help with that.

00:46:29 >> Yeah. If you find yourself over here, in the XKCD world, where you start out writing beautiful code, like created main loop and timing control, enabled config parser, and at the end you'd find yourself just eight A's, A, F, D, K, F, S, G, my hands are typing worse.

00:46:49 Yeah, you're breaking down there.

00:46:52 - All right.

00:46:53 - Yeah.

00:46:53 - So I reset this on accident.

00:46:56 - Where did they get access to my Git commit messages?

00:46:58 - Exactly, how did they do that?

00:47:01 All right, there's also GitHub desktop, which I reckon is kind of neat.

00:47:05 I would say the other area that just point out really quick is a lot of the tools we have already have built in awesome Git stuff.

00:47:11 Like PyCharm has fantastic Git integration and so does VS Code with like Git lens and stuff.

00:47:16 So you might already have a UI for it if you just press the button, you know what I mean?

00:47:22 - Yeah.

00:47:23 - All right, keeping along with Git, if you've got a Git repo that you've forked, something that's always driven me crazy is like, I've got to go and there's a series of events I got to do on the terminal, like add a remote origin, and then I can earn upstream origin, and then I can do some commands to pull the upstream origin and merge it back into my main branch and so on.

00:47:50 And so GitHub added a button that just says, have you forked this?

00:47:53 Oh, look, there are changes.

00:47:54 Press this button to make them the same.

00:47:57 I love this fetch upstream and fetch and merge.

00:47:59 This is awesome.

00:48:01 - I really wanna give a shout out to like, a lot of the features that Git has added recently that like, every time I go in there and like I see something, I'm like, oh, this is nice.

00:48:13 - Yeah, GitHub is coming along.

00:48:14 Yeah, there was concern about what would happen to it and Microsoft bought it.

00:48:18 it's only gotten better. Yeah, I think because I'm such a professional open source contributor, there was a misspelling in a readme and I wanted to tilt my glasses up my brim and go, "Well, actually, you swapped the T and the H in without." Yeah. And you're like, "And by the way, I am a contributor to Django now." Exactly. And just the process of doing all of those things can sometimes be more when it's like this is a simple fix and like in your mind you're like now I gotta go do this thing I need to fork the code base I need to go and do all this stuff and like I literally did everything just in the browser and then it was like hey do you want to sync this or hey do you want to create a new you know do you want to put this on the branch do you want to do a new thing how do you want the PR to look hey they accepted your PR do you want to go ahead and delete this and it's like all this maintenance stuff that I am bad at doing.

00:49:18 I am glad that GitHub will be like, "Hey, it looks like you merged a PR." To me, Microsoft just clipified GitHub and made it easier for me to do what I do.

00:49:29 >> Good afternoon, Jay.

00:49:30 Are you trying to write a letter or merge PR?

00:49:33 >> It looks like you're trying to rebase.

00:49:35 Would you like some help with that?

00:49:37 >> Wait a minute, first, why are you rebasing?

00:49:40 I love this. This is like a single button click.

00:49:43 it solves a lot of the problems really nice because keeping your forks in sync have been a problem.

00:49:48 What I would love to do is just say, yes, and do this every day and don't tell me about it ever again.

00:49:52 Just make it happen. Make it as if they're committing to mine.

00:49:56 It depends on what I'm working on, but there's a lot I would be happy to do that on.

00:49:59 >> Yeah. I think as long as I maybe give me a deadline, give me like, "Hey, we're going to auto merge this in after five days." At least that way you can get the messages of like, "Hey, we broke this thing.

00:50:12 don't do it, don't do it.

00:50:13 Yeah, sure.

00:50:14 So for me, there's like two reasons I'll pork a repo.

00:50:18 One is because I really love it and I want to contribute to or explore.

00:50:21 The other is just I really want a personal copy of this thing that I can control.

00:50:25 Just because I depend on this so much, I want a copy of it.

00:50:29 And for those just keep it in sync.

00:50:32 You know, I can always go back to the version before.

00:50:34 I was wondering, like, how many like were you doing this for like dependency management. But I don't know if I I don't know how much I'm doing that I'm not really forking someone else's code and then like bundling it in with my projects. But I mean, there, I'm never going to say never, because that's the one time you need to go and do that.

00:50:56 Yeah, yeah, for sure. All right. Well, so glad that we're I mean, we're only partway into like, we're halfway through now. And we're just barely into the podcast, so it'll be fine.

00:51:09 Oh, I mean, some of some of these I am just like, I agree next. Like, yeah, this one's perfect. If you're not using Let's Encrypt, and like you're not a company that buys their own certificates and other things like just just use Let's Encrypt.

00:51:25 Yeah, and it is so simple. I would say getting a certificate is kind of a challenge. I remember being on the phone with a certificate company and having to verify the identity of where's the office and what do you do there? Maybe we'll give you an SSL certificate. It might've been one of those enhanced ones or something that didn't really matter, but they thought it would matter. And it was just such a hassle. And then, oh my goodness, if you've got to renew that and you don't remember the details or the person who originally got it is gone.

00:51:57 What a hassle, right?

00:51:59 And so one of the benefits of Let's Encrypt is not just you get an SSL certificate, CLS certificate, you also get them automatically renewed behind the scenes without you doing anything. That's beautiful.

00:52:11 And this is, I mean, again, this is a plus one for those platforms as a service.

00:52:15 I know like Jamstack and all this other stuff, people are like, I don't want to have time to deal with that.

00:52:20 The fact that I can just commit to GitHub, push my repo up to GitHub, and then from there I know my website's done and I don't have to worry about the certificate renewals and everything else.

00:52:34 I will always go that route, but I do have servers that I run for like, hey, I wanna show you what it looks like to run the server.

00:52:41 Let's Encrypt is absolutely the first step in that process.

00:52:45 Like, okay, let's make sure this is good to go.

00:52:47 - And I always imagined this would be kind of complicated until I actually saw the steps.

00:52:51 The steps are apt install software properties common, apt add apt repository universe, apt update, and then just apt install certbot, Python 3 certbot nginx, and then just run certbot nginx.

00:53:09 That's it.

00:53:09 - Boom.

00:53:10 - Then say yes to the prompts.

00:53:12 You know what I mean?

00:53:13 That's it.

00:53:14 Yeah, it's really, really not that intimidating.

00:53:16 So people should absolutely be using it.

00:53:19 And the audience RJL Robert says, hey, don't forget about FlaskCon in a couple of weeks.

00:53:22 Michael will be speaking at it.

00:53:23 I will indeed, that'll be super fun.

00:53:25 And he agrees with us.

00:53:27 - I'm also speaking at a FlaskCon.

00:53:29 - You're speaking at FlaskCon?

00:53:30 I had no idea, awesome.

00:53:31 We didn't even get a chance to connect.

00:53:32 What is your talk on?

00:53:34 - My talk is on utilizing the Google Maps autocomplete API to do location-based searching with Elasticsearch.

00:53:43 And I'm demoing it in my college board clone.

00:53:48 So anybody that's in high school getting ready to go to college and wants to know how much student loan debt you're gonna go into, yeah, check out my talk.

00:53:55 - There you go, awesome.

00:53:56 No, congratulations on being there.

00:53:57 You could run ngrok and let the audience interact with it, right?

00:54:01 - That's why I said I was gonna test this as soon as we're done here.

00:54:04 - Nice, yeah, I'm doing Flask plus HTMX stuff.

00:54:08 I'm a big fan of that.

00:54:08 And it's not even on my list of my suggestions.

00:54:10 All right, here's another one I find really challenging is testing web apps.

00:54:17 And yes, you should write very focused tests, like, oh, here's the e-commerce section, and this is what the price is when I set a discount code, and I'm not logged in, and I tried to purchase it.

00:54:28 But sometimes you wanna know, will the thing just catch on fire in 500, or will it actually work if I were to push this to production?

00:54:38 So this recommendation is that if you have a site map, and most sites do, one of your tests could be and just request all the pages and see if they 500 or 404 or if they return something that looks like a response, like 200, 201, 302, something like that.

00:54:55 - I'm trying to remember what it was called.

00:54:56 I think it was like pytest request or something like that that does something similar.

00:55:02 But I love the idea of using site maps.

00:55:05 I'm gonna do a shameless plug.

00:55:07 One of the things that we started doing with our search platform is adding a crawler that you can tell it to just go and brute force all of the links on your site and make sure they're good, but you're gonna miss something.

00:55:21 Like you will miss something that way, but you can also just add a sitemap.

00:55:24 So sitemaps are a great tool.

00:55:27 And it's one of those things that like a lot of, like I don't think Flask does it by default, Django doesn't do it by default, but there's usually a very simple way to add a sitemap to those applications.

00:55:40 And I think if anything, this is just another reason to implement sitemaps.

00:55:47 Also search engines do like sitemaps.

00:55:49 So if you wanna get another bump in the SEO ranking, this is the way to do it.

00:55:54 - Yeah, absolutely.

00:55:55 Super easy.

00:55:57 It's not a lot of work for the relative benefit you get.

00:56:00 John out in the audience says, ngrok sounds similar to Cloudflare tunnels, which are also free.

00:56:04 That's awesome.

00:56:05 I have no idea what Cloudflare tunnels are, but it's a good recommendation.

00:56:09 People can check that out.

00:56:09 - Thanks, John.

00:56:10 - I'm gonna add that to the list.

00:56:12 - Right on.

00:56:13 All right, here's actually the code I put up there.

00:56:16 Like it literally is 15 lines of code or something to do the sitemap test, which is pretty straightforward.

00:56:23 Another one, you're talking about the SEO aspect.

00:56:27 Google has been paying attention to how fast your site responds and not just what is the server response, but how long does it take to get all the JavaScript and parse it and run it?

00:56:38 How long does it take to read the HTML and then get the images and resize them and all kinds of stuff.

00:56:44 So there's a place called PageSpeed Insights by Google, which you can just go put any webpage, your root page or some sub page in there.

00:56:54 And it'll give you not just what they think your speed is, but what their recommendations are.

00:57:01 Like your image is too large here on wimpy processors like phones, it's gonna slow down the page load, so you should resize, like you're saying 300 in your CSS, but the image is 1,000, just make it 300.

00:57:16 - I'm writing the orange on my site, so I got, I'm at the high, I'm like right underneath green, so I got some changes I can do, but one of the things that I thought about this, and I love the idea, and I absolutely agree with it 100%, One, if you're doing static, static tends to be faster.

00:57:38 - Oh yeah. - Just gonna throw that in there.

00:57:39 But, 'cause I love static sites.

00:57:40 - But it's not as easy of a fix as you would think.

00:57:44 There's still a lot of problems you can have with a static page.

00:57:47 - Yeah, and actually one of the things that I wanted to add onto that, speaking of like scores and ranking, is the idea of accessibility scores and ranking as well.

00:57:57 We don't wanna be dominoes.

00:58:00 We don't wanna be the company that gets sued for not having good accessibility.

00:58:04 Luckily, I don't think anyone here is building stuff like that.

00:58:08 And if you are, hi, welcome.

00:58:09 I'd love to chat sometime.

00:58:11 But I do think that it's important to be good stewards in the community.

00:58:16 That's something that I think is really great.

00:58:18 And if your site isn't accessible, you're cutting off a lot of people.

00:58:23 And a lot of people are like, well, it's hard to do this.

00:58:26 And what else can I do?

00:58:27 There are a lot of great tools out there.

00:58:29 The one that I'm going to promote is WAVE, which is the WAVE web accessibility tool.

00:58:36 And it gives you a bunch of different things.

00:58:39 It even does its own evaluation.

00:58:42 And you can use it to say how accessible is my website.

00:58:46 - Yeah, that's cool.

00:58:48 Definitely people should check that out.

00:58:50 This is important.

00:58:52 I think it might even be legally required.

00:58:54 And then also page speed is starting to be used for actual ranking as well.

00:58:58 So people should consider that.

00:59:00 All right, here's an interesting one, which I don't know how you feel about this, but I find if I set up a server and the server's job is to run a website or an API and I log into it, there is about a half of 1% chance that I want to change details about the service of the system Python.

00:59:23 There's a 99.5% chance that anything I need to change is with packages or details or commands involving the service I set up.

00:59:33 And I found I was always, I would log in there, like, okay, well, where's the virtual environment?

00:59:36 I got to activate this thing, and now I can issue the pip install this new thing or do some other command that I needed to do on the server.

00:59:45 And then it occurred to me, like, why do I do this every time?

00:59:48 Why don't I just set my ZSHRC to say the last thing is to source activate the virtual environment.

00:59:55 So now when my servers, when I log in, at least the ones that are web servers, it automatically activates the virtual environment that runs the web app.

01:00:03 - So are you familiar with DRMV, D-I-R-E-N-V?

01:00:07 - Yes.

01:00:08 - So to me, my solution here is DRMV.

01:00:12 For those that don't know. - Tell people what this is.

01:00:13 Yeah.

01:00:14 - Yeah, so DRMV is this way to load an environment in based on the path that you're in.

01:00:22 And in most cases, this works for just environment variables, which I mean, I love it means I don't have to put stuff in open source, I don't have to risk putting a password in there, I can just point to an environment variable, load that stuff in, and then know that if I'm actually in that folder, then the variables are loaded properly.

01:00:43 Right, exactly. If you're in the folder that contains the somewhere above it contains the virtual environment, it's going to use that set up.

01:00:50 - Exactly, and the thing that's really cool about this is there's another tool called ASDF that uses something similar to PyEnvironment or pyenv that you can put into your environment variables to say, layout Python and the Python version.

01:01:08 And it creates a virtual environment the same way that when you load into that directory, you're loading into a virtual environment that you can control the actual version of Python that you wanna run.

01:01:20 and that works for both pip and the Python environment.

01:01:23 So when it's like calling pie and V every time you, you change directories into a certain, you know, path.

01:01:32 And to me, like, this is the new way of doing it.

01:01:35 When Python 310 came out, all I had to do when I wanted to test for 310 was change my env RC to say layout Python 3.9.1 to 3.10.0.

01:01:47 And from there, that was it.

01:01:50 I CD'd out of it, CD'd back in, it created a new environment, I reloaded my requirements and I was off to the races.

01:01:56 - That's pretty awesome, yeah.

01:01:58 Yeah, very cool.

01:01:59 Yeah, I think that's good as well.

01:02:01 I would definitely lean heavy on that for the dev side.

01:02:07 For the servers, I'm like, I might not log into the location I wanna be in.

01:02:11 It depends on if I have a bunch of services running there, just one.

01:02:14 - Yeah.

01:02:15 - But yeah, those are good recommendations for sure.

01:02:16 especially like I said on the dev side, where you're doing lots of different projects.

01:02:21 - Yeah.

01:02:22 - All right.

01:02:22 Last one is dependencies, and there's all sorts of dependency stuff going on here.

01:02:28 So there's levels.

01:02:30 So you can pip install some package, like I can pip install pyramid, that would install pyramid.

01:02:35 It'll get me the latest one, unless I already have it, then it says you already have it, so you're good, even if there's a newer version.

01:02:41 It's cool.

01:02:42 So you just do --upgrade, and you get a new one, right?

01:02:47 But pyramid might install chameleon and my chameleon might be out of date, but this pip install pyramid --upgrade doesn't upgrade my chameleon, right?

01:02:57 It doesn't upgrade the transitive closure of all the dependencies, which is a hassle.

01:03:03 And then, you know, you got to remember to run these commands.

01:03:07 What if there's like a security vulnerability that I just got a notification a couple of days ago, there was some security vulnerability and not something I'm using, but something that I'm using is using, right?

01:03:17 Very indirect.

01:03:18 So there's all these challenges, I think, around dependencies.

01:03:23 You talked about GitHub having cool features.

01:03:25 If you pin a version in your pyproject.toml or your requirements.txt, and there's a security problem, right?

01:03:35 If I say I'm using flask 0.1, and there's a security vulnerability that was fixed in flask 2, GitHub will automatically create a PR for me and say, there's a problem, accept this PR to fix it.

01:03:46 Right, that's pretty cool, right?

01:03:49 - So one of the questions I had with this was, does pip-tools solve this second problem of like doing upgrade, but then it only upgrades like the top level and none of the stuff below?

01:04:00 - Yes, and that is my current solution is I'm using pip-tools.

01:04:07 And I think the command is actually pip compile I don't remember I've aliased it away. So it's like gone from my mind. I just like pip pip. I think it is pip compile update all or something like pip compile --upgrade. I did the same thing except for I never thought to just alias the whole pip compile upgrade plus pip sync like that. Exactly. Yeah I've aliased these things away. They're all down to like pip install -r requirements dash dev .txt is just p-i-r PIRD if you want to without the devies PIR like I'm all about the aliases.

01:04:42 My NeoVim because I could never remember NVIM I just do VVI.

01:04:46 Yeah nice.

01:04:48 So the pip-tools is my current recommendation because what you do is you create a requirements.in and you put the things you would have pip installed yourself like pip install flask, pip install SQLAlchemy, not their dependencies just the things you want.

01:05:06 And then when you run the command that you talked about, it'll create the requirements.txt with the closure of all of the dependencies and actually will indent them showing why they're in there.

01:05:17 Like, Flask depends on it's dangerous.

01:05:19 So it would put that in there and it would be clear, this is a dependency of Flask, and it pins the versions of all of them.

01:05:25 And then if, for say, it drops the it's dangerous requirement and you rerun this again, that'll come out of your txt file entirely, which is also nice.

01:05:35 So there's I think this is fantastic.

01:05:38 You sounds like you're using it as well.

01:05:39 Yeah, that's I mean, that's part of my default setup of any new project is install, you know, pip-tools and then from there build my requirements.

01:05:49 I in and then immediately compile and upgrade.

01:05:52 Yeah. Yeah. Awesome.

01:05:55 Also, package managers for the OS like homebrew.

01:05:58 I use homebrew on my macOS.

01:06:00 I know there's other things you use, but that works well.

01:06:02 Windows has chocolatey, which I think a lot of people on Windows are not using a package manager I think chocolatey is awesome. You can install Python that way Obviously, there's apt and other things on the Linux, right?

01:06:13 Yeah, I I really like homebrew. I know they were I think they're now m1 there Yeah, they are one ready. Okay on this computer. We're talking on I got this one in December 2020 It has the Intel homebrew on it, but my new MacBook Pro I put just the straight-up up in the Apple Silicon version on there and it's been working fine.

01:06:37 I haven't had any problems.

01:06:38 OK, yeah, homebrew to me, it just makes sense.

01:06:42 The one thing that I will say is ASDF.

01:06:45 If you're using that, your you don't want to run, you know, Pippin or brew install Python because then you have different.

01:06:55 They're like your stems and stuff get all weird.

01:06:59 So install Python through ASDF if you're using that.

01:07:04 But other than that, like, yeah, I think homebrew is great.

01:07:07 And I guess the other bonus to ASDF is you can use that not just for Python, but if you're doing like Ruby and you have like RVM or, you know, you need to manage node versions, which I hate managing node versions, but you have to do it, I guess.

01:07:22 That's like you can do all of those things in that environment control area of envrc. And again, with homebrew, it's like it works, but when it doesn't work, you're just like, "Okay, great. Now I need to uninstall this. I need to run brew doctor." >> I'm going to format the computer. >> Exactly. You just need to just format your hard drive. >> It's destroyed. It's destroyed.

01:07:45 It won't upgrade Python anymore. We're done. >> I've had so many times where just updating Python is just giving me time to be like, "Well, I'm done with this." - Yeah, yeah, all right.

01:07:57 A couple other things out in the audience.

01:08:00 Anthony suggests pip Deptry, which will show you kind of that, here's the top level things you installed and what they depend upon, which is great.

01:08:07 That's really a good one.

01:08:09 Pradafond says, "Pip Audit is a cool tool "if you want something on security." It's a project by Dustin Ingram, who is associated with PyPI.org and PyPA and stuff, which is awesome.

01:08:20 One more thing I'll throw out there, is pip dash or pypi dash changes.

01:08:26 So this just came out and you type pypi dash changes and you point at the Python executable in a virtual environment and it'll list all the things you have installed, what version they are, how old they were.

01:08:38 Like here's a thing I've installed, it's 10 years old.

01:08:41 Maybe I should think of something newer, but also whether or not there's an update.

01:08:44 So this is a fun one as well.

01:08:46 - That's nice.

01:08:49 Again, I'm really impressed with, you know, a lot of these tools and companies like I mean, the fact that, you know, Python now has some folks that are dedicated to working on these systems, and it's what they do.

01:09:02 I mean, talking about like Lucas and having a developer in residence.

01:09:07 I think this is the benefit that we see of this is you get these little touches that just make each version of Python not just, you know, more performant, but also nicer to work with and nicer to play around with.

01:09:19 - Yeah, it gives you joy, not frustration as you work with some of these things for sure.

01:09:23 - Exactly.

01:09:24 - All right, so those were the 10.

01:09:27 How about I just throw a real quick thing out there for people as a delightful little takeaway.

01:09:32 Nerd fonts, have you played nerd fonts?

01:09:34 - I haven't, what is this?

01:09:35 - Oh my gosh.

01:09:36 So if you want fonts that are good for programming that support font ligatures, and for example, the Oh My Posh I talked about, they have all sorts of weird like continuation between like a transitional characters and stuff.

01:09:49 All those things test against nerd fonts to make sure every nerd font will work well in that shell fancy extension.

01:09:56 So if you go over here to the downloads, you can see there's like a huge scroll bar, but of all these different fonts that support font ligatures, nerd fonts, et cetera, et cetera, that you get here.

01:10:09 So, and they all come with a ton of variations.

01:10:11 So if you wanna have a bunch of cool programming fonts, You've got like neto nerd font looks pretty good.

01:10:17 Pro font nerd font.

01:10:19 That's not a nerd action.

01:10:20 Open is what is nerd font if you're dyslexic.

01:10:23 - That's if you like ligatures.

01:10:26 - You can turn them off.

01:10:27 I mean, you can turn them off.

01:10:27 - Okay.

01:10:28 - You can turn them off.

01:10:29 - I was gonna say, I don't wanna start that war of whether or not ligatures are a thing.

01:10:32 - I love ligatures, but I don't wanna battle that out right now.

01:10:36 But I went and installed every one of these nerd fonts on my new MacBook.

01:10:40 It took half an hour or longer for that little font book app was like locked up.

01:10:45 I thought it destroyed my computer, but nope, it just had 2,600 font families to install or something.

01:10:51 - I'm glad you don't use Photoshop.

01:10:54 It probably doesn't like you either.

01:10:56 - Probably not.

01:10:57 - What are all these fonts?

01:10:58 - Exactly.

01:10:59 No, but if you're looking for good programming fonts, I don't have one over the other to recommend, but there are many, many of them here.

01:11:07 All right, and then I see Antonio out there in the audience who is saying we got to wrap this up with a notable PyPI package.

01:11:16 I mean, I had I had two that weren't included in the list, and that was black and I sort.

01:11:24 I'm pretty sure the folks listening know like, black is a great formatter for your code.

01:11:31 If you're like me, and paid is a thing that you want to you want to understand and believe But from time to time you're like, but what about this weird scenario? I don't think about that anymore I just run black and then I'm done with it Value that black ads is not necessarily that it does the formatting like I could open up I charm go to the top level of Project right-click and save format everything in this directory and it would format it the way I told by charm I like it, but it solves the debate. It's like you don't have to debate Is there a space before the comma or after the comma does it go on one line?

01:12:07 Or does it go on three lines like black puts it on the lines?

01:12:09 We've agreed that we're just going to take this and nobody's gonna be 100% happy But you're gonna be 84% happy and we're just gonna stop fighting about the formatting and I sort is the exact same except for it does this with sorting your imports and I I mean, I will say sometimes when I'm writing code, it's messy. Thank goodness I have black and I sort to make it not so messy whenever I have to give a talk and then someone goes Is there a repo for this code?

01:12:38 I'm like, give me 30 seconds, black, isort. Okay, now there is.

01:12:42 >> Now I'm willing to share this.

01:12:47 That's right. It's not embarrassing anymore.

01:12:49 >> Awesome. John out in the audience says, I was just going to say black and isort.

01:12:53 Get out of my head, Jay.

01:12:56 >> Other than that, you've talked about rumps so many times.

01:13:03 >> I love rumps.

01:13:04 We can we can play the classics, you know all the time here. I personally I try to not do a lot of installation of stuff, but if I go to some of my projects really quick and just open up, you know, actually, I think I do know of one and let's see.

01:13:27 I don't remember what it's called.

01:13:31 Yeah, I have an app I built with rumps, Python 3 and Pi 2 app that's running up in my Mac terminal bar.

01:13:40 And if I'm really unlucky, it'll get hidden in the notch of my new MacBook.

01:13:46 I haven't played with rumps recently.

01:13:48 I need to do some more with rumps.

01:13:52 Honestly some of these little dependencies that I add to some of my projects that I mean, I could probably do my own, but also I don't want to like slugify.

01:14:01 Yeah, you know if you've ever again a lot of this is just getting rid of.

01:14:07 How do I do this? One of my projects that I just started working on is this idea of we've all done, you know, markdown and then you convert it to like a markdown table or you know you convert it like HTML and you gotta do some stuff with it and then you gotta process that HTML.

01:14:24 But what about doing like markdown to Jason?

01:14:27 Like where I have a markdown table and I want to convert that table into a CSV file or a Jason file.

01:14:32 So I'm like playing around with this and in my head I am.

01:14:36 I'm like physically pulling my hair out, but I'm also like banging my head against the wall going like.

01:14:40 Oh, but how do what's the regular expression for this thing?

01:14:44 And that's where stuff like validators is absolutely amazing because you can just go.

01:14:48 Is this an email if it is OK good run this you know this a properly formed It is good.

01:14:54 Okay, run this.

01:14:55 Like, I don't need to rebuild those things.

01:14:58 - Yeah, awesome.

01:14:59 Yeah, a bunch of good recommendations.

01:15:01 So thanks for being here, Jay.

01:15:03 This was a lot of fun.

01:15:04 I love just going through a bunch of these little tools because I learned a bunch from you and it looks like people in the audience have found a bunch of interesting ones that we covered as well.

01:15:13 - I love it.

01:15:14 I mean, as always, now that I'm a front runner for the Golden Jacket Club of, you know, Talk Python, I absolutely love coming on and you know, just now that you got the chat here, they're talking about products.

01:15:28 I'm like, what's that?

01:15:29 Let me add that to my list.

01:15:30 And you know, I get to learn as much as, you know, everyone else does.

01:15:34 - Yeah, that's awesome.

01:15:35 Yeah, I just want to give a shout out to the YouTube live stream.

01:15:38 It's been really fun to have so many of you all come and join the streams and give us feedback and thoughts during the show.

01:15:43 I think it lets the audience have a little bit of representation.

01:15:46 If you want to watch that one, just go to the episode page.

01:15:49 You can click it right at the top, it'll be there.

01:15:51 Or subscribe to the newsletter.

01:15:53 There's a link to the YouTube videos every newsletter drop.

01:15:57 They are in there absolutely every time.

01:15:59 It's awesome.

01:16:01 All right.

01:16:02 Robert says, thanks again, Jay and Michael.

01:16:04 This has been very informative.

01:16:05 Thank you so much for being here, Robert.

01:16:07 Jay, final word, call to action.

01:16:09 People are psyched about this stuff.

01:16:10 What will you tell them?

01:16:12 Honestly, just play around with it.

01:16:15 Have fun.

01:16:16 Be a good steward of the community.

01:16:18 and absolutely take someone that was like me seven years ago that was like, this Python thing seems hard, but I really like Flask, so I'm gonna keep trying it and just continue to pour time and energy into them.

01:16:33 Trust me, it'll pay off for them in the future and they'll be sure to thank you with all the drinks that they can.

01:16:40 And yeah, if you ever wanna get in touch with me, you can do so.

01:16:43 I'm on Twitter, K-A-J-A-Y Miller on Twitter, LinkedIn.

01:16:46 That's kind of it.

01:16:47 Yeah, I'll definitely put that in the show notes as well.

01:16:50 Yeah, and yeah, again, if you're interested in my productivity takes and wild hilarious opinions on things, but you know, you want to get outside of the Python space, check out Conduit on Relay.fm, Relay.fm/conduit, where we put out an episode every other week.

01:17:09 This next one actually talks about having to do your job when you're in physical pain, which is something that you don't think about until you have that migraine for like the third day in a row and you're like, all right, how do I do this?

01:17:22 My most recent example was when I fell in a river and landed on some mossy rocks and broke my finger in three or four places and couldn't and had a cast that went to the tips of my fingers could only work with one hand for two months.

01:17:34 Let me tell you, you got to find some productivity tips to keep things going at that point.

01:17:39 That was a while, a couple of years ago, but still.

01:17:41 Yeah, it's it's all of a sudden it usually realized, oh, boy, I got to keep going, but this is not so easy.

01:17:47 Awesome.

01:17:48 Oh, man.

01:17:49 Yeah, so people should check out Conduit.

01:17:51 And yeah, thanks for being here.

01:17:53 It's been great.

01:17:54 Absolutely.

01:17:55 Yep.

01:17:56 Bye.

01:17:57 Thanks, everyone, on the live stream.

01:17:58 See you later.

01:17:58 [BLANK_AUDIO]

