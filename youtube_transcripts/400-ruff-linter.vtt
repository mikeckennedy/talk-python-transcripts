WEBVTT

00:00:00.000 --> 00:00:03.240
- Hey YouTube, hey Charlie.


00:00:03.240 --> 00:00:06.600
- Hey, thanks so much for having me on.


00:00:06.600 --> 00:00:08.080
- Yeah, it's great.


00:00:08.080 --> 00:00:08.960
Good to have you here.


00:00:08.960 --> 00:00:11.760
Everyone out in the audience, please let me know


00:00:11.760 --> 00:00:13.800
if you got questions, thoughts, comments.


00:00:13.800 --> 00:00:17.520
And with that, let's go ahead and kick it off.


00:00:17.520 --> 00:00:19.440
Charlie, welcome to Talk Python to Me.


00:00:19.440 --> 00:00:22.800
- Thanks so much, it's my pleasure to be here.


00:00:22.800 --> 00:00:25.980
- Yeah, it's a pleasure to have you.


00:00:25.980 --> 00:00:30.220
We're gonna talk about making Python code fast.


00:00:30.220 --> 00:00:35.220
Bit built some pretty interesting tools here with rough.


00:00:35.220 --> 00:00:40.460
And we're gonna, we'll see about integrating rust


00:00:40.460 --> 00:00:44.540
into rough and some of, you know, it's,


00:00:44.540 --> 00:00:46.840
there's a lot of cool tools around this sort of


00:00:46.840 --> 00:00:49.420
code quality side of things, right?


00:00:49.420 --> 00:00:52.020
Like black took off in ways I think,


00:00:52.020 --> 00:00:54.940
even though Lukas didn't maybe imagine it would take off.


00:00:54.940 --> 00:00:58.220
and this is kind of in that same realm, and of course,


00:00:58.220 --> 00:00:59.380
and integrates well,


00:00:59.380 --> 00:01:01.900
it plays well with black along the way as well.


00:01:01.900 --> 00:01:04.680
So we'll get to talk all about those things.


00:01:04.680 --> 00:01:06.920
It's gonna be tons of fun to dig into them,


00:01:06.920 --> 00:01:08.700
but before we get to it, let's start with your story.


00:01:08.700 --> 00:01:11.540
How'd you get into programming in Python?


00:01:11.540 --> 00:01:12.380
And Rust.


00:01:12.380 --> 00:01:14.020
- Yeah, yeah.


00:01:14.020 --> 00:01:15.820
So I got into programming,


00:01:15.820 --> 00:01:19.340
I guess the summer before I went to college,


00:01:19.340 --> 00:01:21.840
when I guess I was supposed to be like doing something fun,


00:01:21.840 --> 00:01:24.780
I taught myself Java.


00:01:24.780 --> 00:01:27.220
And it was the sort of thing that a lot of people


00:01:27.220 --> 00:01:28.320
had told me I would like,


00:01:28.320 --> 00:01:30.560
but I never really had a chance to dig into.


00:01:30.560 --> 00:01:34.380
I ended up, I went to school, majored in computer science.


00:01:34.380 --> 00:01:38.220
So, did a bunch of internships while I was in college.


00:01:38.220 --> 00:01:43.100
And then when I, my sort of junior year internship


00:01:43.100 --> 00:01:44.740
and my first year out of school,


00:01:44.740 --> 00:01:47.620
I worked at a company called Khan Academy,


00:01:47.620 --> 00:01:50.080
which is like an education technology company.


00:01:51.360 --> 00:01:55.320
And at the time, this is less true now,


00:01:55.320 --> 00:01:57.960
but at the time they were a really big Python job


00:01:57.960 --> 00:02:02.960
and they had one of the biggest like App Engine deployments.


00:02:02.960 --> 00:02:06.680
It was like Khan Academy and like Snapchat


00:02:06.680 --> 00:02:07.640
and like a couple other.


00:02:07.640 --> 00:02:09.240
- Wow, I had no idea.


00:02:09.240 --> 00:02:10.560
- Someone.


00:02:10.560 --> 00:02:13.320
- Yeah, obviously I'm familiar with Khan Academy,


00:02:13.320 --> 00:02:15.920
K-H-A-N, I'm sure a lot of people are.


00:02:15.920 --> 00:02:17.760
But I didn't realize that one,


00:02:17.760 --> 00:02:21.080
they were such a GCP customer and that was Python.


00:02:21.080 --> 00:02:25.520
Was that Flask or Django on GCP or what was it?


00:02:25.520 --> 00:02:28.320
It was like Flask on App Engine.


00:02:28.320 --> 00:02:32.000
We did not use Django.


00:02:32.000 --> 00:02:37.840
But they actually, I mean, it's a whole nother story, but they did a big Go rewrite after


00:02:37.840 --> 00:02:39.560
I left, which is also super interesting.


00:02:39.560 --> 00:02:42.480
I mean, it's not Python, but it is still very interesting.


00:02:42.480 --> 00:02:46.320
Just like migrating a system that big from any language to any other language is always


00:02:46.320 --> 00:02:47.800
pretty interesting.


00:02:47.800 --> 00:02:52.800
At Khan Academy, yeah, I did some Python.


00:02:52.800 --> 00:02:57.660
I would say that I mostly did web,


00:02:57.660 --> 00:02:59.280
and we can talk a little bit more about this


00:02:59.280 --> 00:03:01.240
'cause really through my career,


00:03:01.240 --> 00:03:03.840
I've kind of jumped between a lot of different ecosystems.


00:03:03.840 --> 00:03:08.560
And so at Khan Academy, I did, I think, a year of Android,


00:03:08.560 --> 00:03:12.120
and did a little bit of iOS, did a lot of web,


00:03:12.120 --> 00:03:13.480
did a little bit of Python.


00:03:13.480 --> 00:03:16.560
And then most recently,


00:03:16.560 --> 00:03:18.480
I worked at a company called Spring Discovery,


00:03:18.480 --> 00:03:22.400
which is like a computational biotech company.


00:03:22.400 --> 00:03:25.740
And everything we were doing was based on computer vision.


00:03:25.740 --> 00:03:29.000
So we'd like take really high resolution pictures of cells


00:03:29.000 --> 00:03:31.040
and then try to model like the way that they change


00:03:31.040 --> 00:03:32.560
when you add drugs.


00:03:32.560 --> 00:03:33.400
- Wow, okay.


00:03:33.400 --> 00:03:34.880
- Which is, yeah, it's pretty wild.


00:03:34.880 --> 00:03:37.480
I mean, I came into that with no bio background.


00:03:37.480 --> 00:03:39.320
I joined as like the second engineer


00:03:39.320 --> 00:03:41.560
and build out a lot of our like data


00:03:41.560 --> 00:03:43.060
and machine learning platform.


00:03:43.060 --> 00:03:45.120
So that was kind of a crash course


00:03:45.120 --> 00:03:47.360
and building a massive system in Python, right?


00:03:47.360 --> 00:03:49.200
We were doing scientific computing,


00:03:49.200 --> 00:03:50.720
so it made a lot of sense to use Python,


00:03:50.720 --> 00:03:53.720
so we ended up using Python for almost everything.


00:03:53.720 --> 00:03:57.360
- Python's a really good choice for the web,


00:03:57.360 --> 00:04:02.360
but it's the de facto choice for data science, right?


00:04:02.360 --> 00:04:03.680
- Yes, yeah, exactly.


00:04:03.680 --> 00:04:05.260
- There's not a whole lot of other choices,


00:04:05.260 --> 00:04:08.240
whereas on the web, there's five or six other platforms


00:04:08.240 --> 00:04:13.240
and languages that are also contenders for that space.


00:04:13.240 --> 00:04:14.080
- Right, right.


00:04:14.080 --> 00:04:21.480
So we built out what I consider to be a fairly large Python code base.


00:04:21.480 --> 00:04:24.320
It was a big monorepo.


00:04:24.320 --> 00:04:30.720
And I spent, I can't remember, four or five years building that out and really writing


00:04:30.720 --> 00:04:33.120
a lot of Python every day.


00:04:33.120 --> 00:04:37.600
And that's where a lot of my Python experience comes from.


00:04:37.600 --> 00:04:42.560
And that experience specifically also informed a lot of Ruff.


00:04:42.560 --> 00:04:45.720
And I can talk more about how those experiences intertwined,


00:04:45.720 --> 00:04:49.440
but that's kind of my Python background.


00:04:49.440 --> 00:04:51.700
It must have been really fun to explore


00:04:51.700 --> 00:04:55.680
some of this visualizing cells and interacting


00:04:55.680 --> 00:04:58.160
with microscopes and--


00:04:58.160 --> 00:04:59.000
That was amazing.


00:04:59.000 --> 00:04:59.500
Yeah.


00:04:59.500 --> 00:05:01.040
--all those kind of things.


00:05:01.040 --> 00:05:04.000
The coolest part of the job was just


00:05:04.000 --> 00:05:08.760
that if you bucket it really crudely, a third of our team


00:05:08.760 --> 00:05:12.120
were software engineers or data scientists, machine learning


00:05:12.120 --> 00:05:13.880
researchers.


00:05:13.880 --> 00:05:19.680
And then a third were wet lab biologists, PhDs.


00:05:19.680 --> 00:05:25.800
And so every day, I was working directly with scientists


00:05:25.800 --> 00:05:27.640
and building software for scientists, which


00:05:27.640 --> 00:05:29.680
was just a super cool thing to be able to do


00:05:29.680 --> 00:05:32.440
as part of a small team.


00:05:32.440 --> 00:05:35.840
But yeah, wrote a lot of Python.


00:05:35.840 --> 00:05:36.720
That's awesome.


00:05:36.720 --> 00:05:41.840
I worked at a place that was a bunch of PhD researchers doing


00:05:41.840 --> 00:05:45.480
eye tracking, like not Apple, but your actual eyes,


00:05:45.480 --> 00:05:46.760
like what are you looking at?


00:05:46.760 --> 00:05:49.480
Wrote the software to actually control the device


00:05:49.480 --> 00:05:51.360
and get all the information off of it


00:05:51.360 --> 00:05:53.560
and then like analyze that and put,


00:05:53.560 --> 00:05:56.520
you know, generate like reports for the scientists and stuff.


00:05:56.520 --> 00:06:00.340
And it's, there's a special kind of cool for software


00:06:00.340 --> 00:06:04.120
that touches like reality, right?


00:06:04.120 --> 00:06:05.040
- Yes.


00:06:05.040 --> 00:06:06.080
Yeah, yeah.


00:06:06.080 --> 00:06:09.040
I mean, it adds a lot of complications.


00:06:09.040 --> 00:06:09.880
- Of course it does.


00:06:09.880 --> 00:06:11.480
- But it is very cool.


00:06:11.480 --> 00:06:13.520
You don't get exact numbers, you want to test it,


00:06:13.520 --> 00:06:15.840
like, you got to approximate all the things,


00:06:15.840 --> 00:06:19.160
but still, yeah, that sounds like a super fun job.


00:06:19.160 --> 00:06:20.560
How did it inform Ruff?


00:06:20.560 --> 00:06:23.480
Like, what are some of the experiences that--


00:06:23.480 --> 00:06:25.000
- Yeah, totally, so--


00:06:25.000 --> 00:06:25.840
- Came over.


00:06:25.840 --> 00:06:28.520
Hold on one second, before we,


00:06:28.520 --> 00:06:32.840
just so people know, Ruff is like a super fast linter.


00:06:32.840 --> 00:06:34.200
Just give us the quick elevator pitch


00:06:34.200 --> 00:06:36.000
so they know what the heck Ruff is.


00:06:36.000 --> 00:06:37.120
We'll dive more into it later.


00:06:37.120 --> 00:06:37.960
- Sure.


00:06:37.960 --> 00:06:39.660
Yeah, yeah, so Ruff is,


00:06:39.660 --> 00:06:44.940
what I call an extremely fast Python linter.


00:06:44.940 --> 00:06:49.140
So if you've used linters in Python in the past, you've probably used something like


00:06:49.140 --> 00:06:55.600
Flake 8 or PyLint or maybe PyCode style.


00:06:55.600 --> 00:07:01.060
Maybe use other tools to help manage your code style like Black or like AutoPep8, all


00:07:01.060 --> 00:07:04.740
this stuff that deals with effectively code style.


00:07:04.740 --> 00:07:07.500
So Ruff is a linter.


00:07:07.500 --> 00:07:12.460
it looks at your source code and it tries to report back and flag and tell you about


00:07:12.460 --> 00:07:19.420
issues with it. And those could be stylistic issues, like this variable name is not great,


00:07:19.420 --> 00:07:26.100
or they could be logical issues, like you reference a variable here that isn't defined.


00:07:26.100 --> 00:07:30.740
And I think there's a lot that distinguishes Ruff, but the thing that I think caught a


00:07:30.740 --> 00:07:33.500
a lot of people's attention was just how fast it is.


00:07:33.500 --> 00:07:38.260
So I sort of hate benchmarks, because no matter


00:07:38.260 --> 00:07:40.140
how much time you put into a benchmark,


00:07:40.140 --> 00:07:42.860
it's always wrong from a certain perspective,


00:07:42.860 --> 00:07:45.460
and people always complain about them.


00:07:45.460 --> 00:07:49.780
I think Rough is comfortably somewhere in 10 to 100 times


00:07:49.780 --> 00:07:50.300
faster.


00:07:50.300 --> 00:07:52.780
Some people even say 1,000 times faster on their setup.


00:07:52.780 --> 00:07:56.580
So it can be really, really dramatically faster.


00:07:56.580 --> 00:08:01.740
And it can also do a lot of auto fixing,


00:08:01.740 --> 00:08:05.580
which is kind of a distinctive feature that I don't know


00:08:05.580 --> 00:08:07.420
that many other tools.


00:08:07.420 --> 00:08:09.740
There are certainly tools that do code transformation


00:08:09.740 --> 00:08:14.380
in Python, but like Pylint and Flake 8 and such don't do this.


00:08:14.380 --> 00:08:17.620
So for lots of the errors that Ruffle flag,


00:08:17.620 --> 00:08:19.460
it can actually fix the code for you


00:08:19.460 --> 00:08:22.860
and fix the issue for you, which is a big time saver.


00:08:22.860 --> 00:08:24.400
I don't know if this is one of them,


00:08:24.400 --> 00:08:25.740
but just to give people an idea.


00:08:25.740 --> 00:08:28.740
one of the errors or warnings rather that it'll give you


00:08:28.740 --> 00:08:30.640
is you have an F string,


00:08:30.640 --> 00:08:34.700
but you're not leveraging its F string capabilities, right?


00:08:34.700 --> 00:08:35.540
It'll just say F,


00:08:35.540 --> 00:08:38.620
and then it has just static text, a literal string.


00:08:38.620 --> 00:08:39.860
So it doesn't need the F.


00:08:39.860 --> 00:08:43.520
All right, theoretically, you could say autofix


00:08:43.520 --> 00:08:45.340
and it just, it drops the F for you.


00:08:45.340 --> 00:08:47.860
It's like, yeah, you don't need that, right?


00:08:47.860 --> 00:08:51.100
- Yeah, and we can also go the other direction.


00:08:51.100 --> 00:08:55.540
So if you're doing a bunch of percent string formatting


00:08:55.540 --> 00:09:02.500
or you're using the dot format style helpers,


00:09:02.500 --> 00:09:06.580
we're actually-- we can fix at least one of those right now.


00:09:06.580 --> 00:09:08.000
The swings are really complicated,


00:09:08.000 --> 00:09:09.880
but we can actually rewrite, I think,


00:09:09.880 --> 00:09:12.580
the dot format calls into strings, which is cool.


00:09:12.580 --> 00:09:15.380
So another thing we can do is we can kind of keep


00:09:15.380 --> 00:09:18.780
your code modern in a way.


00:09:18.780 --> 00:09:21.700
We've taken a lot of inspiration from other tools.


00:09:21.700 --> 00:09:25.640
like PyUpgrade2 has like so much cool stuff


00:09:25.640 --> 00:09:27.520
and functionality in it if you haven't seen it.


00:09:27.520 --> 00:09:30.320
And we've, we take some of the rules from PyUpgrade


00:09:30.320 --> 00:09:32.400
and basically re-implement them in Rust


00:09:32.400 --> 00:09:36.800
and package them into a single interface in a single tool.


00:09:36.800 --> 00:09:40.200
So you just install one thing and you get, you know,


00:09:40.200 --> 00:09:42.960
370 something rules.


00:09:42.960 --> 00:09:49.160
- Yeah, that's, I can assert that it is indeed fast.


00:09:50.080 --> 00:09:52.040
Well, I'll dive into a little bit later,


00:09:52.040 --> 00:09:55.400
but I ran it on Talk Python Training,


00:09:55.400 --> 00:09:56.640
the courses website that I have.


00:09:56.640 --> 00:09:58.880
And I think that's got 20,000 lines of Python,


00:09:58.880 --> 00:10:01.840
and it's instant.


00:10:01.840 --> 00:10:03.840
It's like you press Enter, and then out,


00:10:03.840 --> 00:10:05.680
you know, the stuff is just printing out.


00:10:05.680 --> 00:10:09.520
These are the things it found, which is pretty awesome.


00:10:09.520 --> 00:10:12.280
So back to your data science work.


00:10:12.280 --> 00:10:17.120
How did what you're doing influence your creation of Ruff?


00:10:17.120 --> 00:10:21.040
Like why not just use Flake 8 or something like that?


00:10:21.040 --> 00:10:22.840
- Well, we did.


00:10:22.840 --> 00:10:26.120
So like, or sorry, you know, in that role,


00:10:26.120 --> 00:10:28.080
you know, like I said,


00:10:28.080 --> 00:10:30.240
I'd like worked in a lot of other ecosystems


00:10:30.240 --> 00:10:32.840
where with sort of like stricter languages, right?


00:10:32.840 --> 00:10:35.200
Like Java and whatever else.


00:10:35.200 --> 00:10:38.040
And it's not to say those ecosystems are better,


00:10:38.040 --> 00:10:40.220
but I often come at this stuff from a perspective


00:10:40.220 --> 00:10:44.560
of wanting a lot of like static analysis tooling.


00:10:44.560 --> 00:10:46.680
So we had like a really heavily typed code base.


00:10:46.680 --> 00:10:55.200
We used mypy, we used Black, we used Flake 8, we used Isort,


00:10:55.200 --> 00:10:55.720
we used--


00:10:55.720 --> 00:10:59.520
what else?


00:10:59.520 --> 00:11:01.120
I don't know, like docformatter.


00:11:01.120 --> 00:11:03.480
There's a lot of different stuff that we used.


00:11:03.480 --> 00:11:08.440
And really, my job was I was the maintainer of this big system.


00:11:08.440 --> 00:11:11.760
And a lot of people on the team were effectively


00:11:11.760 --> 00:11:13.480
clients of that code base.


00:11:13.480 --> 00:11:16.160
So they were kind of like using the stuff that I


00:11:16.160 --> 00:11:18.760
and some others were building as like a library.


00:11:18.760 --> 00:11:22.760
And so I had to maintain like this really big system


00:11:22.760 --> 00:11:25.400
and like the more static tools you have,


00:11:25.400 --> 00:11:28.800
in my opinion, it just like greatly increases the leverage


00:11:28.800 --> 00:11:30.500
that you can have as a maintainer.


00:11:30.500 --> 00:11:33.320
So we use a lot of tooling


00:11:33.320 --> 00:11:36.600
and I think like a couple of things happened.


00:11:36.600 --> 00:11:40.520
One, I was spending a lot of my time in Python


00:11:40.520 --> 00:11:42.360
but I was also doing a lot of web.


00:11:42.360 --> 00:11:45.040
And so, you know, like one week I'd be doing Python,


00:11:45.040 --> 00:11:47.400
the next I'd be going and doing like React


00:11:47.400 --> 00:11:49.280
and TypeScript and whatever else.


00:11:49.280 --> 00:11:54.280
And so people complain a lot about web tooling


00:11:54.280 --> 00:11:56.280
and like, you know, there are certainly lots


00:11:56.280 --> 00:11:57.440
of valid complaints about it,


00:11:57.440 --> 00:12:00.260
but there's been a lot of interesting innovation,


00:12:00.260 --> 00:12:01.360
I think in that space.


00:12:01.360 --> 00:12:04.000
And I was certainly influenced by some of it,


00:12:04.000 --> 00:12:05.800
just seeing some of the tools that came out


00:12:05.800 --> 00:12:07.060
and how fast they were.


00:12:07.060 --> 00:12:10.240
And the fact that a lot of those tools


00:12:10.240 --> 00:12:12.080
were not being written in JavaScript,


00:12:12.080 --> 00:12:14.480
sort of intentionally to make them super performant


00:12:14.480 --> 00:12:16.120
was pretty interesting to me.


00:12:16.120 --> 00:12:18.160
So like, I don't know,


00:12:18.160 --> 00:12:19.660
I don't wanna like name drop a bunch of tools,


00:12:19.660 --> 00:12:21.500
but in the web ecosystem,


00:12:21.500 --> 00:12:24.460
more tooling is being written in like Go, Rust,


00:12:24.460 --> 00:12:27.140
and even some other sort of more out there languages


00:12:27.140 --> 00:12:28.760
like Zig.


00:12:28.760 --> 00:12:30.400
And to me, that was kind of an interesting thing.


00:12:30.400 --> 00:12:31.820
It was like, well,


00:12:31.820 --> 00:12:34.320
does the Python tooling have to be written in Python?


00:12:34.320 --> 00:12:37.200
Like what does, like, why does that have to be the case?


00:12:37.200 --> 00:12:39.800
And like, what does it buy you and what do you lose?


00:12:41.080 --> 00:12:42.280
So that was one thing.


00:12:42.280 --> 00:12:44.600
The other was we actually started to do


00:12:44.600 --> 00:12:50.200
a lot of Rust Python hybrid stuff in our own code base.


00:12:50.200 --> 00:12:53.160
So, our code base was fully Python


00:12:53.160 --> 00:12:55.600
and over time we took some of the like


00:12:55.600 --> 00:12:57.640
really performance critical pieces


00:12:57.640 --> 00:12:59.960
and started to rewrite them in Rust


00:12:59.960 --> 00:13:03.180
and expose them to the Python side


00:13:03.180 --> 00:13:06.800
using some of these like really great


00:13:06.800 --> 00:13:08.120
Rust Python hybrid tools


00:13:08.120 --> 00:13:09.880
that maybe we'll get into later.


00:13:10.880 --> 00:13:14.680
So one example is we were dealing with image data.


00:13:14.680 --> 00:13:17.600
So a common thing we had to do is just


00:13:17.600 --> 00:13:22.080
download a lot of image files really, really fast.


00:13:22.080 --> 00:13:24.060
And so we wrote that in Python.


00:13:24.060 --> 00:13:25.480
We wrote a bunch of versions that


00:13:25.480 --> 00:13:27.960
use all sorts of multiprocessing, threading,


00:13:27.960 --> 00:13:29.640
and we tried everything.


00:13:29.640 --> 00:13:32.280
And then eventually, we rewrote it in Rust.


00:13:32.280 --> 00:13:36.180
And so we had a really simple Rust module


00:13:36.180 --> 00:13:38.040
that would just download files really fast.


00:13:38.040 --> 00:13:40.880
And we expose that as a Python API.


00:13:40.880 --> 00:13:43.880
So from the Python code, it just looked like Python.


00:13:43.880 --> 00:13:45.560
But the actual code that was running


00:13:45.560 --> 00:13:50.040
and the way it was built and executed all went through Rust.


00:13:50.040 --> 00:13:50.560
Right.


00:13:50.560 --> 00:13:54.120
So you have these big data, let's say big computation


00:13:54.120 --> 00:13:57.760
problems, where you're like, this could be better.


00:13:57.760 --> 00:14:00.720
At the same time, you're looking at this happening on the web


00:14:00.720 --> 00:14:03.720
side, webpack or whatever it is.


00:14:03.720 --> 00:14:07.560
And it's like, this is way better.


00:14:07.560 --> 00:14:09.360
We can do this in Python, but we aren't.


00:14:09.360 --> 00:14:10.860
So let's start, right?


00:14:10.860 --> 00:14:12.400
Probably you got a little experience there,


00:14:12.400 --> 00:14:14.160
and you're like, you know what?


00:14:14.160 --> 00:14:17.440
What else can I build with Rust now that I know how?


00:14:17.440 --> 00:14:18.280
- Yeah, yeah.


00:14:18.280 --> 00:14:20.800
I mean, I think like, yeah, I was seeing the way


00:14:20.800 --> 00:14:23.000
that this innovation was happening in the web.


00:14:23.000 --> 00:14:27.200
I was seeing specifically the Rust Python opportunity


00:14:27.200 --> 00:14:28.160
from what we were doing.


00:14:28.160 --> 00:14:31.840
And then I was, frankly, feeling a fair amount


00:14:31.840 --> 00:14:33.960
of frustration just with the performance


00:14:33.960 --> 00:14:35.520
of a lot of the existing tools.


00:14:37.520 --> 00:14:38.020
I don't know.


00:14:38.020 --> 00:14:40.400
I'm always really careful with how I talk about this stuff


00:14:40.400 --> 00:14:43.220
because I'm really not a hater.


00:14:43.220 --> 00:14:45.940
And I've actually gotten so much value out


00:14:45.940 --> 00:14:48.740
of all of those tools.


00:14:48.740 --> 00:14:51.380
But I was being like, hmm, well, should it really


00:14:51.380 --> 00:14:54.540
take one to two minutes to lint my code?


00:14:54.540 --> 00:14:56.700
Couldn't it be much faster?


00:14:56.700 --> 00:14:58.580
It's like a big code base.


00:14:58.580 --> 00:15:01.260
And as you add more plugins and everything else,


00:15:01.260 --> 00:15:04.780
it really changes how you feel about the tool.


00:15:04.780 --> 00:15:07.900
It's no longer like something I just run and get feedback.


00:15:07.900 --> 00:15:10.580
It's like, oh, I have to run the linter now.


00:15:10.580 --> 00:15:11.700
Oh, I have to run the vlog.


00:15:11.700 --> 00:15:14.340
And I was sort of craving that.


00:15:14.340 --> 00:15:16.380
- Yeah, and if you're doing it on a team,


00:15:16.380 --> 00:15:19.740
my experience at least has been


00:15:19.740 --> 00:15:23.340
some people in the team continue to run it


00:15:23.340 --> 00:15:25.380
because they find more value than stress.


00:15:25.380 --> 00:15:28.460
And others are like, eh, I'm not running that stupid thing.


00:15:28.460 --> 00:15:30.660
But then their problems get pushed


00:15:30.660 --> 00:15:32.260
onto the people who still care.


00:15:32.260 --> 00:15:34.240
And so then it creates this kind of like a tension,


00:15:34.240 --> 00:15:38.280
and like, you know, Joe's code is always kind of crappy


00:15:38.280 --> 00:15:39.780
'cause he won't lint it, but then like,


00:15:39.780 --> 00:15:42.860
when I check out his code, my stuff starts reporting.


00:15:42.860 --> 00:15:45.160
You know, like, those are the weird dynamics


00:15:45.160 --> 00:15:48.200
that happen from tools that are like super slow unit tests


00:15:48.200 --> 00:15:51.060
or super slow linting or those types of things


00:15:51.060 --> 00:15:53.300
where certain people stop working with them


00:15:53.300 --> 00:15:56.580
and others don't, and then you get these weird tensions.


00:15:56.580 --> 00:16:00.760
So having it fast, there's like real value to that.


00:16:01.800 --> 00:16:04.800
Yeah, I mean, and I think for me,


00:16:04.800 --> 00:16:10.040
I left Spring in mid to late August.


00:16:10.040 --> 00:16:13.720
And I started working on Ruff along with a couple


00:16:13.720 --> 00:16:14.600
other projects.


00:16:14.600 --> 00:16:19.080
And I never built a linter before.


00:16:19.080 --> 00:16:22.680
So I didn't really know what I was doing.


00:16:22.680 --> 00:16:28.160
But it felt-- maybe this is a little bit of hubris or not,


00:16:28.160 --> 00:16:29.760
I guess, because it seems to be working.


00:16:29.760 --> 00:16:32.600
but I was kind of like, I'll start with a linter


00:16:32.600 --> 00:16:36.080
'cause it feels like a tractable scope of problem.


00:16:36.080 --> 00:16:38.920
I was like, type checker, I know that's hard


00:16:38.920 --> 00:16:40.440
and I don't really know much about it.


00:16:40.440 --> 00:16:43.080
A linter, I feel like I could learn some of the concepts.


00:16:43.080 --> 00:16:46.740
I have a good understanding of how it might work.


00:16:46.740 --> 00:16:50.840
- To me, when I look at it, I think linting people's code,


00:16:50.840 --> 00:16:52.720
like abstract syntax trees and stuff,


00:16:52.720 --> 00:16:54.640
I'm like, "Ah, that doesn't sound like a problem to me."


00:16:54.640 --> 00:16:57.320
But it's good that you saw it that way.


00:16:57.320 --> 00:16:58.160
'Cause you did get through it.


00:16:58.160 --> 00:16:59.920
- I think you can do it.


00:16:59.920 --> 00:17:01.080
- Yeah, yeah.


00:17:01.080 --> 00:17:06.080
Well, the first version I released was like very limited.


00:17:06.080 --> 00:17:08.760
It was sort of, I sort of needed to get it out


00:17:08.760 --> 00:17:10.440
because I wasn't sure that people


00:17:10.440 --> 00:17:11.820
would actually really care that much


00:17:11.820 --> 00:17:13.160
about like what I was doing.


00:17:13.160 --> 00:17:18.400
'Cause like I've described to you a lot of like pain points.


00:17:18.400 --> 00:17:20.220
They're also sort of like opinions, right?


00:17:20.220 --> 00:17:24.060
But like, you know, I wasn't like a faster linter,


00:17:24.060 --> 00:17:27.400
like who cares was sort of, I wasn't sure.


00:17:27.400 --> 00:17:31.260
So, you know, when I released it, I was like,


00:17:31.260 --> 00:17:32.780
I want to prove it's possible.


00:17:32.780 --> 00:17:35.180
I want to like have reasonable confidence


00:17:35.180 --> 00:17:37.040
that the performance won't get worse


00:17:37.040 --> 00:17:39.020
or much worse as I expand it.


00:17:39.020 --> 00:17:41.000
But I only supported like, I don't know,


00:17:41.000 --> 00:17:44.860
maybe like 20 rules, which was fine with me


00:17:44.860 --> 00:17:46.700
'cause I was really trying to prove a point


00:17:46.700 --> 00:17:50.880
more than, you know, get people to adopt it even.


00:17:50.880 --> 00:17:54.640
- Well, and a lot of times, go into that experience,


00:17:54.640 --> 00:17:57.220
even if very few people used it,


00:17:57.220 --> 00:18:00.040
you learn fantastic things, right?


00:18:00.040 --> 00:18:03.980
- Yeah, I learned so much and I read a ton of code.


00:18:03.980 --> 00:18:11.900
I've read a lot of source code now.


00:18:11.900 --> 00:18:14.500
So I've read all of like, you know, PyFlakes,


00:18:14.500 --> 00:18:19.500
like PyDoc style, PyCode style,


00:18:19.500 --> 00:18:20.980
like, you know, 'cause I've spent time


00:18:20.980 --> 00:18:23.420
like trying to re-implement a lot of those rules


00:18:23.420 --> 00:18:25.500
and like understand how they do things.


00:18:25.500 --> 00:18:31.220
And you just learn a lot from reading and trying stuff.


00:18:31.220 --> 00:18:34.060
Rust is sort of like a whole other thing


00:18:34.060 --> 00:18:36.580
where I did some Rust at Spring.


00:18:36.580 --> 00:18:40.780
But I would say that building Ruf was really


00:18:40.780 --> 00:18:44.420
like my Rust learning experience.


00:18:44.420 --> 00:18:47.500
I think I had to kind of try to build something from scratch


00:18:47.500 --> 00:18:49.580
to really understand the language.


00:18:49.580 --> 00:18:50.080
>> Sure.


00:18:50.080 --> 00:18:52.140
>> Like everything--


00:18:52.140 --> 00:18:54.420
>> You do all the tutorials.


00:18:54.420 --> 00:18:55.260
- Yeah, and I was like--


00:18:55.260 --> 00:18:56.660
- You can do all the tutorials you want,


00:18:56.660 --> 00:18:58.120
but yeah, sorry, go ahead.


00:18:58.120 --> 00:19:02.060
- No, no, I just like, you know,


00:19:02.060 --> 00:19:04.700
I didn't do the initial Rust migration at Spring.


00:19:04.700 --> 00:19:07.060
I worked with another like super talented engineer


00:19:07.060 --> 00:19:08.100
who did that.


00:19:08.100 --> 00:19:10.780
And so every time I went into to, you know,


00:19:10.780 --> 00:19:12.580
and I made a bunch of changes to it,


00:19:12.580 --> 00:19:14.220
but every time I was going in and out,


00:19:14.220 --> 00:19:17.980
I was like, I just need to like ship this and like move on.


00:19:17.980 --> 00:19:19.600
Like, I'm not gonna spend a bunch of time


00:19:19.600 --> 00:19:22.460
like really understanding everything that's going on here.


00:19:22.460 --> 00:19:23.980
I just want to get it to work.


00:19:23.980 --> 00:19:28.060
And so I needed to sit down and really focus


00:19:28.060 --> 00:19:31.300
and be presented with a blank slate, I think, to learn


00:19:31.300 --> 00:19:34.260
and just fail a lot and build stuff that didn't compile


00:19:34.260 --> 00:19:36.780
and figure out how to resolve those problems.


00:19:36.780 --> 00:19:40.060
It's honestly, it's a tough, it is a tough learning curve.


00:19:40.060 --> 00:19:41.660
- Yeah, I'm sure that it is.


00:19:41.660 --> 00:19:42.980
I started out in C++,


00:19:42.980 --> 00:19:45.940
and so I know there are harder languages


00:19:45.940 --> 00:19:47.940
and there are easier languages.


00:19:47.940 --> 00:19:49.140
So Eddie, I'm not-- - I've never even learned


00:19:49.140 --> 00:19:49.980
C++.


00:19:52.140 --> 00:19:54.580
You're not missing that much, I would say.


00:19:54.580 --> 00:19:56.540
Eddie out there says, "Rough is so awesome.


00:19:56.540 --> 00:19:58.220
"I actually changed all the switch statements


00:19:58.220 --> 00:20:00.920
"in my Python 3.10 code back to if else blocks


00:20:00.920 --> 00:20:05.380
"so I could switch to rough," which is pretty awesome.


00:20:05.380 --> 00:20:07.900
- That's super nice and slightly embarrassing


00:20:07.900 --> 00:20:10.180
'cause we don't support match statements.


00:20:10.180 --> 00:20:12.260
- So we support the match, yeah.


00:20:12.260 --> 00:20:15.220
- That's the one big language feature


00:20:15.220 --> 00:20:16.540
that we don't support yet.


00:20:16.540 --> 00:20:18.180
- You could just kind of comment it out.


00:20:18.180 --> 00:20:20.260
We're gonna just ignore, whatever's in the switch,


00:20:20.260 --> 00:20:22.140
it must be fine, onto the next part.


00:20:22.140 --> 00:20:24.100
- Yeah, exactly, right?


00:20:24.100 --> 00:20:24.940
- Yeah, yeah, yeah.


00:20:24.940 --> 00:20:26.900
I mean, not for your code, but for linting.


00:20:26.900 --> 00:20:30.500
And then maybe let's start our dive in


00:20:30.500 --> 00:20:32.620
with this comment from Tyler who says,


00:20:32.620 --> 00:20:34.420
"What are the differences between linters


00:20:34.420 --> 00:20:36.020
"like rough and flake-8,


00:20:36.020 --> 00:20:40.580
"those versus code stylers or formatters like black?"


00:20:40.580 --> 00:20:43.380
And maybe rough lives in the middle of that spectrum,


00:20:43.380 --> 00:20:44.220
I'm not sure.


00:20:44.220 --> 00:20:46.380
- Yeah.


00:20:48.100 --> 00:20:53.380
There's certainly, like you said, it's a spectrum.


00:20:53.380 --> 00:20:57.860
So I guess there's a couple of different ways


00:20:57.860 --> 00:20:58.620
to think about it.


00:20:58.620 --> 00:21:00.780
And with those tools specifically,


00:21:00.780 --> 00:21:04.020
some of the responsibilities have, in my mind at least,


00:21:04.020 --> 00:21:06.780
shifted a bit over time.


00:21:06.780 --> 00:21:12.260
So for example, Flake 8, it doesn't change your code at all.


00:21:12.260 --> 00:21:14.940
And it'll just tell you about issues.


00:21:14.940 --> 00:21:17.020
And those issues could be style issues.


00:21:17.020 --> 00:21:22.020
like you have extra white space here, or I don't know.


00:21:22.020 --> 00:21:23.060
>> Your lines are too long.


00:21:23.060 --> 00:21:24.580
>> This line is too long, yeah.


00:21:24.580 --> 00:21:25.080
>> Yeah.


00:21:25.080 --> 00:21:30.280
>> But it could also be a logical issue, which is something


00:21:30.280 --> 00:21:32.180
that Black wouldn't touch.


00:21:32.180 --> 00:21:36.020
So it might be like this import is unused.


00:21:36.020 --> 00:21:39.660
So on the one end, you have different collections of rules


00:21:39.660 --> 00:21:41.860
and maybe not really changing the code,


00:21:41.860 --> 00:21:44.580
just kind of telling you about it.


00:21:44.580 --> 00:21:49.140
Black is different in that Black just reformats your code.


00:21:49.140 --> 00:21:53.420
So it's not actually aware of the logic in the code.


00:21:53.420 --> 00:21:55.540
It doesn't know that an import's unused.


00:21:55.540 --> 00:21:59.780
It doesn't know that a function is never called.


00:21:59.780 --> 00:22:02.940
It just takes that abstract--


00:22:02.940 --> 00:22:04.820
well, not exactly the abstract syntax tree,


00:22:04.820 --> 00:22:06.740
but it basically preserves your code as is


00:22:06.740 --> 00:22:08.900
and just tries to restyle it.


00:22:08.900 --> 00:22:13.140
And so it's interesting because if you use Black,


00:22:13.140 --> 00:22:16.580
you probably don't need a lot of style linting.


00:22:16.580 --> 00:22:19.060
Like if you're using black to format your code,


00:22:19.060 --> 00:22:23.580
a lot of the rules in Flake 8 aren't that relevant anymore.


00:22:23.580 --> 00:22:24.740
They'll say something like--


00:22:24.740 --> 00:22:25.460
Not all of them.


00:22:25.460 --> 00:22:26.060
Yeah.


00:22:26.060 --> 00:22:27.660
They'll say something like, you should


00:22:27.660 --> 00:22:31.260
have followed the rules of this, but black automatically


00:22:31.260 --> 00:22:32.780
follows those rules for you, right?


00:22:32.780 --> 00:22:34.380
So they're kind of--


00:22:34.380 --> 00:22:36.140
you don't need to correct the line length,


00:22:36.140 --> 00:22:39.540
because black will wrap it, because that's what black does.


00:22:39.540 --> 00:22:41.000
- Yeah, or even like,


00:22:41.000 --> 00:22:45.600
you know, if you have like X equals one


00:22:45.600 --> 00:22:48.660
with like no spaces between the X and the equals


00:22:48.660 --> 00:22:50.140
and the equals and the one,


00:22:50.140 --> 00:22:51.860
like the linter will yell at you for that,


00:22:51.860 --> 00:22:53.660
but black fixes that for you.


00:22:53.660 --> 00:22:57.500
So a lot of people will turn off those rules.


00:22:57.500 --> 00:22:59.180
You know, this is why I say the responsibilities


00:22:59.180 --> 00:23:00.740
have shifted a bit over time.


00:23:00.740 --> 00:23:04.360
I think you're right that rough,


00:23:04.360 --> 00:23:06.700
like it kind of sits in the middle.


00:23:06.700 --> 00:23:11.140
We do less stylistic linting for this exact reason.


00:23:11.140 --> 00:23:12.640
I use black a lot.


00:23:12.640 --> 00:23:15.560
Black is immensely popular.


00:23:15.560 --> 00:23:19.400
So I actually heavily deprioritized


00:23:19.400 --> 00:23:23.040
all of the stylistic rules that are made redundant by black.


00:23:23.040 --> 00:23:30.040
But the difference is we do do a lot of that automatic fixing.


00:23:30.040 --> 00:23:36.400
So we can remove unused imports for you.


00:23:36.400 --> 00:23:38.960
We can even do a lot of more complicated rewrites.


00:23:38.960 --> 00:23:43.440
Like if you're using a dictionary


00:23:43.440 --> 00:23:48.740
constructor, like the actual D-I-C-T parentheses arguments,


00:23:48.740 --> 00:23:52.000
we can actually rewrite that as a literal.


00:23:52.000 --> 00:23:54.960
If you have the rules enabled and you want to do that,


00:23:54.960 --> 00:23:57.880
there's a bunch of rules around comprehensions and literals,


00:23:57.880 --> 00:24:00.920
and we can do those rewrites too.


00:24:00.920 --> 00:24:05.880
So it can do style and reformatting.


00:24:05.880 --> 00:24:08.120
but it's somewhere in the middle.


00:24:08.120 --> 00:24:10.640
- Yeah.


00:24:10.640 --> 00:24:12.600
Yeah, the fact that it makes some changes,


00:24:12.600 --> 00:24:16.560
but it doesn't go completely all in like black


00:24:16.560 --> 00:24:18.320
is kind of why I think it lives a little bit


00:24:18.320 --> 00:24:19.320
in the middle there.


00:24:19.320 --> 00:24:23.760
One of the things that I think might give people a lot of,


00:24:23.760 --> 00:24:27.480
what's the right word?


00:24:27.480 --> 00:24:30.520
A lot of faith or willingness to give it a try,


00:24:30.520 --> 00:24:33.520
is there's a lot of projects out here


00:24:33.520 --> 00:24:38.060
that are large projects that people would know


00:24:38.060 --> 00:24:43.060
that have adopted, actively adopted and started using Ruff.


00:24:43.060 --> 00:24:48.700
I saw a quote from Sebastian Ramirez from FastAPI.


00:24:48.700 --> 00:24:52.700
Right now in the audience, we have Olfeg says,


00:24:52.700 --> 00:24:54.240
"The next release of Hatch,


00:24:54.240 --> 00:24:56.200
"which I hope to do this weekend,


00:24:56.200 --> 00:24:59.220
"will have all the new projects generated with config


00:24:59.220 --> 00:25:01.140
"for a Linting environment that uses Ruff,"


00:25:01.140 --> 00:25:03.080
which I think is pretty excellent.


00:25:03.080 --> 00:25:07.000
Can you speak to some of that, about these projects,


00:25:07.000 --> 00:25:09.640
adopting it and how that's helped you?


00:25:09.640 --> 00:25:11.360
- Yeah, yeah, totally.


00:25:11.360 --> 00:25:17.800
I mean, yeah, I never expected this.


00:25:17.800 --> 00:25:19.000
Maybe that goes without saying.


00:25:19.000 --> 00:25:20.360
I think you'd have to be super arrogant


00:25:20.360 --> 00:25:22.000
to release something and expect a bunch


00:25:22.000 --> 00:25:23.560
of these people to use it.


00:25:23.560 --> 00:25:29.120
It's, yeah, it's been kind of wild.


00:25:29.120 --> 00:25:32.560
Initially, there were a couple big projects


00:25:32.560 --> 00:25:35.920
that I would call like really early adopters.


00:25:35.920 --> 00:25:39.220
And they helped shape the project a lot.


00:25:39.220 --> 00:25:43.760
Like, Pydantic was a very early adopter.


00:25:43.760 --> 00:25:46.520
Zulip was a very early adopter.


00:25:46.520 --> 00:25:49.760
FastAPI was actually like a pretty early adopter too.


00:25:49.760 --> 00:25:55.560
And then like Pandas and Airflow and stuff,


00:25:55.560 --> 00:25:57.780
those kind of are more recent.


00:25:59.240 --> 00:26:03.620
I think it's been very interesting to reflect


00:26:03.620 --> 00:26:05.600
on how that's happened.


00:26:05.600 --> 00:26:10.240
Because on the one hand, it's sort of ridiculous


00:26:10.240 --> 00:26:12.240
that all these projects would migrate over.


00:26:12.240 --> 00:26:16.700
Because I don't even really have a proper versioning system


00:26:16.700 --> 00:26:17.280
right now.


00:26:17.280 --> 00:26:21.680
I'm on v0.0.225 or something.


00:26:21.680 --> 00:26:24.240
I basically release every day.


00:26:24.240 --> 00:26:27.440
And I consider-- I don't really make--


00:26:27.440 --> 00:26:29.360
We've made very few breaking changes,


00:26:29.360 --> 00:26:31.720
but in theory, we could make breaking changes.


00:26:31.720 --> 00:26:35.800
I don't want to, but at least if you have scribe December,


00:26:35.800 --> 00:26:37.360
we could make changes like that.


00:26:37.360 --> 00:26:40.640
There's not really docs.


00:26:40.640 --> 00:26:42.520
The docs are just this huge readme.


00:26:42.520 --> 00:26:45.560
So it's kind of wild.


00:26:45.560 --> 00:26:48.440
We don't support all of the Python 3.10 features.


00:26:48.440 --> 00:26:49.440
We don't support match statements.


00:26:49.440 --> 00:26:51.640
So on the one hand, it's kind of wild


00:26:51.640 --> 00:26:53.640
that all these projects would move over.


00:26:54.600 --> 00:26:58.200
I think there are a couple of things that helped a lot.


00:26:58.200 --> 00:27:02.080
So one is that the entire time, I've


00:27:02.080 --> 00:27:04.520
been very, very focused on compatibility


00:27:04.520 --> 00:27:06.040
with existing tools.


00:27:06.040 --> 00:27:10.960
And that comes at a lot of cost.


00:27:10.960 --> 00:27:13.240
If there are things that I don't agree with,


00:27:13.240 --> 00:27:16.280
or whatever else, I sometimes still support them or implement


00:27:16.280 --> 00:27:16.780
them.


00:27:21.360 --> 00:27:24.780
But the upside is it's very easy for people to migrate.


00:27:24.780 --> 00:27:29.200
- Right, it might change nothing, potentially, right?


00:27:29.200 --> 00:27:30.040
It just goes faster.


00:27:30.040 --> 00:27:31.400
- Yeah, hopefully.


00:27:31.400 --> 00:27:36.200
And over time, we don't have a third-party plugin system.


00:27:36.200 --> 00:27:40.600
We've just implemented everything in Rust as part of Ruf.


00:27:40.600 --> 00:27:44.600
And I viewed that as, I'm just gonna look


00:27:44.600 --> 00:27:47.980
at the most popular plugins and the most important roles,


00:27:47.980 --> 00:27:51.780
And I'm just going to figure out what's a blocker for whom?


00:27:51.780 --> 00:27:54.860
And what do I need to implement in order to unblock people


00:27:54.860 --> 00:27:56.540
and make sure they can use it?


00:27:56.540 --> 00:28:00.620
>> Is there a way for people to let you know which of those


00:28:00.620 --> 00:28:01.820
are really important to them?


00:28:01.820 --> 00:28:04.460
For example, if there's some big project out there,


00:28:04.460 --> 00:28:06.140
it's like, we would love to move to Ruff,


00:28:06.140 --> 00:28:11.300
but there's this one plugin we're waiting on.


00:28:11.300 --> 00:28:13.380
>> Yeah, I mostly hear about it in issues.


00:28:15.940 --> 00:28:20.180
And there are a couple issues where it's like--


00:28:20.180 --> 00:28:21.540
it's kind of a big GitHub issue.


00:28:21.540 --> 00:28:23.660
It'll be like, implement this plugin.


00:28:23.660 --> 00:28:25.540
And a lot of people will come and give it


00:28:25.540 --> 00:28:28.180
a thumbs up or whatever.


00:28:28.180 --> 00:28:31.940
We have pretty good coverage now, actually.


00:28:31.940 --> 00:28:33.540
I mean, there is a long tail.


00:28:33.540 --> 00:28:36.140
There's a big ecosystem of Flake 8 plugins.


00:28:36.140 --> 00:28:41.660
And sometimes someone will come along and ask for a plugin


00:28:41.660 --> 00:28:44.700
that I haven't really seen before.


00:28:44.700 --> 00:28:46.560
And then it's just a calculus of like,


00:28:46.560 --> 00:28:48.500
what do I want to prioritize?


00:28:48.500 --> 00:28:49.860
Or how much work is it?


00:28:49.860 --> 00:28:50.700
All that kind of stuff. - Yeah, exactly.


00:28:50.700 --> 00:28:53.580
Is this a super easy line thing to do?


00:28:53.580 --> 00:28:55.660
Like, oh, the line is too long, that's easy.


00:28:55.660 --> 00:28:58.180
Or is it, you know, rewrite this?


00:28:58.180 --> 00:28:59.220
- Yeah.


00:28:59.220 --> 00:29:01.860
- This generator in this other interesting way, yeah?


00:29:01.860 --> 00:29:07.020
- Yeah, that happened with, well, a lot of people want,


00:29:07.020 --> 00:29:09.740
like, I don't know how to pronounce this library,


00:29:09.740 --> 00:29:14.020
but like Darglint, like D-Arglint, Darglint?


00:29:14.020 --> 00:29:14.520
I don't know.


00:29:14.520 --> 00:29:15.560
Anyway, it has a lot--


00:29:15.560 --> 00:29:17.360
>>That's probably-- I would go with that as well.


00:29:17.360 --> 00:29:17.860
Yeah.


00:29:17.860 --> 00:29:19.260
Yeah, Darglin, let's go with that.


00:29:19.260 --> 00:29:19.760
>>Yeah.


00:29:19.760 --> 00:29:21.760
It's very popular, but I've looked at the source.


00:29:21.760 --> 00:29:22.760
It's pretty complicated.


00:29:22.760 --> 00:29:25.200
So I need to--


00:29:25.200 --> 00:29:27.400
that's not something I can just turn around in a day.


00:29:27.400 --> 00:29:30.440
But I hear what people want.


00:29:30.440 --> 00:29:34.600
And I mean, some of those migrations, though,


00:29:34.600 --> 00:29:38.320
I didn't even know about them until they'd happened.


00:29:38.320 --> 00:29:38.800
>>Right.


00:29:38.800 --> 00:29:39.720
>>Which is always cool.


00:29:39.720 --> 00:29:41.480
>>Yeah, of course.


00:29:41.480 --> 00:29:47.680
And then sometimes people come, they submit issues,


00:29:47.680 --> 00:29:50.020
I look at their profiles, I see what they're working on,


00:29:50.020 --> 00:29:52.200
I get a sense for what their projects are.


00:29:52.200 --> 00:29:54.840
So sometimes I know, and then I'm


00:29:54.840 --> 00:29:57.000
kind of fixing things knowing that hopefully it's


00:29:57.000 --> 00:29:59.880
unblocking them in different ways.


00:29:59.880 --> 00:30:02.440
But yeah, I mean, I think, like I said,


00:30:02.440 --> 00:30:05.240
I think the compatibility piece is really huge.


00:30:05.240 --> 00:30:09.280
And I actually think that Black and iSort


00:30:09.280 --> 00:30:10.600
and the popularity of those things


00:30:10.600 --> 00:30:15.000
made compatibility for me a little bit easier because I can just adhere to what they do.


00:30:15.000 --> 00:30:19.880
Yeah, so many people have centralized. Yeah, they centralized around what,


00:30:19.880 --> 00:30:26.520
black is the truth and then we'll debate beyond that. But we're just going to accept black because


00:30:26.520 --> 00:30:32.440
it's no fun to go commas on the end of the line, no commas on the trailing thing in the list.


00:30:32.440 --> 00:30:39.480
Those kind of debates just go on and on. I think black kind of solves that by just


00:30:39.480 --> 00:30:41.480
making a decision for you.


00:30:41.480 --> 00:30:43.480
And not everyone's totally happy with every choice,


00:30:43.480 --> 00:30:45.480
but it stops the debate,


00:30:45.480 --> 00:30:47.480
and that actually probably wins the day


00:30:47.480 --> 00:30:49.480
for most of them.


00:30:49.480 --> 00:30:51.480
One thing that's interesting here that I'm noticing


00:30:51.480 --> 00:30:53.480
about these projects


00:30:53.480 --> 00:30:55.480
in the large open-source projects


00:30:55.480 --> 00:30:57.480
that have adopted Ruff,


00:30:57.480 --> 00:30:59.480
not all of them,


00:30:59.480 --> 00:31:01.480
surely, but many of them,


00:31:01.480 --> 00:31:03.480
like Pydantic and Polars


00:31:03.480 --> 00:31:05.480
and so on,


00:31:05.480 --> 00:31:07.480
themselves are adopting Rust.


00:31:07.480 --> 00:31:13.680
Rust. Do you see a synergy of those? Like, well, where are we writing Pynandic core in


00:31:13.680 --> 00:31:19.600
Rust like Samuel Colvin is, or the folks behind Polar's art? Like that's the core of it is


00:31:19.600 --> 00:31:25.120
about Rust and, you know, that's the RS on the end, I think. So there might be a little


00:31:25.120 --> 00:31:27.560
extra draw there, right?


00:31:27.560 --> 00:31:33.760
Yeah, I think there's, I think it's just more like, like spiritual alignment.


00:31:33.760 --> 00:31:36.000
Yes, exactly. Because it doesn't matter.


00:31:36.000 --> 00:31:38.000
It's not like, no, it doesn't.


00:31:38.000 --> 00:31:39.000
(laughs)


00:31:39.000 --> 00:31:40.460
- But seriously.


00:31:40.460 --> 00:31:44.060
- But there's, yeah, and there's a little bit of a bug.


00:31:44.060 --> 00:31:45.660
Sorry, bug in the sense of like,


00:31:45.660 --> 00:31:50.300
like once people start writing some stuff in Rust


00:31:50.300 --> 00:31:51.540
and improving their Python,


00:31:51.540 --> 00:31:54.700
they're kind of like more open to like, you know,


00:31:54.700 --> 00:31:58.460
trying out other things that are written in Rust and so on.


00:31:58.460 --> 00:32:01.460
So it's, I mean, that community has like been very


00:32:01.460 --> 00:32:04.260
interesting to sort of watch and be a part of


00:32:04.260 --> 00:32:09.260
the Rust Python community, it still feels pretty nascent.


00:32:09.260 --> 00:32:15.220
But the tooling is actually really great.


00:32:15.220 --> 00:32:19.800
And we could talk about that more,


00:32:19.800 --> 00:32:24.580
but there was definitely a bunch of initial setup


00:32:24.580 --> 00:32:28.220
for actually distributing Ruf on IPI


00:32:28.220 --> 00:32:29.840
and making it insoluble.


00:32:29.840 --> 00:32:33.780
But now that that's over, it all just works.


00:32:33.780 --> 00:32:38.260
And I mean, I wouldn't say it's like requires no effort,


00:32:38.260 --> 00:32:41.180
but it's actually pretty amazing.


00:32:41.180 --> 00:32:44.020
Like how, like the degree of integration


00:32:44.020 --> 00:32:46.500
and how much you can do now with these tools


00:32:46.500 --> 00:32:50.460
like Py03 and Matcher and some others.


00:32:50.460 --> 00:32:52.040
- Yeah.


00:32:52.040 --> 00:32:54.220
That was one of the things that was really nice surprise


00:32:54.220 --> 00:32:56.860
for me as well, is how easy it is to install, right?


00:32:56.860 --> 00:32:59.060
Like, unless you told me,


00:32:59.060 --> 00:33:03.140
unless it wasn't part of, you know, the elevator pitch,


00:33:03.140 --> 00:33:06.960
you know, the little one sentence subtitle on the project,


00:33:06.960 --> 00:33:09.760
like you would know from a interacting perspective,


00:33:09.760 --> 00:33:12.020
which is kind of exactly what you want.


00:33:12.020 --> 00:33:13.080
Also think that it's really,


00:33:13.080 --> 00:33:16.400
there's some value to having these popular projects adopt


00:33:16.400 --> 00:33:18.880
Ruff because Martin and audience, for example,


00:33:18.880 --> 00:33:20.940
says I found out about Ruff by looking to see


00:33:20.940 --> 00:33:23.440
what FastAPI does because presumably


00:33:23.440 --> 00:33:26.480
it's a ton of respect for FastAPI and Sebastian,


00:33:26.480 --> 00:33:28.080
his choices.


00:33:28.080 --> 00:33:30.400
So yeah, it's got to sort of create


00:33:30.400 --> 00:33:32.840
the snowball effect as well.


00:33:32.840 --> 00:33:34.760
- Yeah, I mean, I think like one thing


00:33:34.760 --> 00:33:36.240
that's a little bit overlooked


00:33:36.240 --> 00:33:40.040
about like why that adoption is useful


00:33:40.040 --> 00:33:43.020
is that it actually like feeds back into the project


00:33:43.020 --> 00:33:45.960
in like so many great ways.


00:33:45.960 --> 00:33:49.240
So, you know, for example, like


00:33:49.240 --> 00:33:57.720
Dagster adopted Ruff and like they have like a really big


00:33:57.720 --> 00:34:00.200
like Python monorepo with like, I don't know,


00:34:00.200 --> 00:34:08.520
50 or 100 separate Python modules or packages in there. And they filed a bunch of issues


00:34:08.520 --> 00:34:15.420
around how can we make Ruff better for monorepos. And so now they can run Ruff once and it runs


00:34:15.420 --> 00:34:20.680
over all their separate projects that can all have their own configuration. And that's


00:34:20.680 --> 00:34:25.360
a really, really powerful thing and something that if I was just sort of sitting around


00:34:25.360 --> 00:34:29.840
building Ruff, I don't know that I would have known to prioritize that or what it should


00:34:29.840 --> 00:34:30.840
look like.


00:34:30.840 --> 00:34:34.440
And so, actually, working with people who want to adopt ROUF


00:34:34.440 --> 00:34:37.880
and figuring out what stops them from using it


00:34:37.880 --> 00:34:42.080
provides a ton of value to the project and just prioritization.


00:34:42.080 --> 00:34:45.920
A lot of the isort stuff, I pushed on it a lot


00:34:45.920 --> 00:34:47.920
when I started because ROUF does import sorting.


00:34:47.920 --> 00:34:51.480
So you can use it if you want in lieu of isort.


00:34:51.480 --> 00:34:54.960
And we implement a lot of the same configuration options,


00:34:54.960 --> 00:34:56.960
not all the same.


00:34:56.960 --> 00:34:58.840
Isort just is really configurable.


00:34:58.840 --> 00:35:01.600
So we implement-- we certainly implement them


00:35:01.600 --> 00:35:03.440
as they get requested.


00:35:03.440 --> 00:35:06.340
But anyway, I prioritize that stuff


00:35:06.340 --> 00:35:08.400
because a lot of people wanted it.


00:35:08.400 --> 00:35:10.200
And they were coming to the issues and being like, hey,


00:35:10.200 --> 00:35:12.520
this would really help me adopt it, blah, blah, blah.


00:35:12.520 --> 00:35:17.140
So just getting the feedback and hearing what's blocking people,


00:35:17.140 --> 00:35:19.760
that itself is so valuable for the project.


00:35:19.760 --> 00:35:20.480
>>Andy: Right.


00:35:20.480 --> 00:35:22.720
And you have a lot of people involved in these larger


00:35:22.720 --> 00:35:27.920
projects, and they have specific polished needs.


00:35:27.920 --> 00:35:33.600
Like, there's a lot of people who work on Pandas or FastAPI,


00:35:33.600 --> 00:35:35.880
and those are mature code bases.


00:35:35.880 --> 00:35:39.120
It's not just a pet project, right?


00:35:39.120 --> 00:35:40.080
>>Yeah.


00:35:40.080 --> 00:35:41.200
Yeah, those are very mature.


00:35:41.200 --> 00:35:42.280
Yeah.


00:35:42.280 --> 00:35:43.080
>>Yeah, exactly.


00:35:43.080 --> 00:35:45.800
That's good, but also it's a challenge.


00:35:45.800 --> 00:35:47.640
One other thing I would like to point out,


00:35:47.640 --> 00:35:50.680
you started off by introducing Ruff, saying,


00:35:50.680 --> 00:35:52.040
maybe people will be interested.


00:35:52.040 --> 00:35:53.120
I don't really know if they will.


00:35:53.120 --> 00:35:53.800
Maybe they will.


00:35:53.800 --> 00:35:54.720
That'd be cool.


00:35:54.720 --> 00:36:05.040
6.5, 6.4 thousand stars, that's a non-trivial amount of interest. That's a lot of love.


00:36:05.040 --> 00:36:11.680
Yeah. Yeah. Yeah. And like, I don't know, one thing that I guess I feel weird, like


00:36:11.680 --> 00:36:15.040
highlighting all the big projects, because one thing that I really appreciate is just


00:36:15.040 --> 00:36:21.760
like anyone who's willing to try a tool like this, like moving tools and trying new tools


00:36:21.760 --> 00:36:24.240
is a big decision.


00:36:24.240 --> 00:36:26.720
And I just really appreciate everyone


00:36:26.720 --> 00:36:29.280
who says nice things about it or everyone


00:36:29.280 --> 00:36:32.880
who's willing to give it a try, no matter what they're


00:36:32.880 --> 00:36:35.000
working on.


00:36:35.000 --> 00:36:37.040
It's nice to have a platform to say that out loud,


00:36:37.040 --> 00:36:39.600
so hopefully people hear it.


00:36:39.600 --> 00:36:40.720
Yeah, absolutely.


00:36:40.720 --> 00:36:44.120
So the other thing I want to highlight about the repo here,


00:36:44.120 --> 00:36:47.040
not just the stars, but when I look at a project


00:36:47.040 --> 00:36:51.600
and I want to assess, I really want to adopt this thing,


00:36:51.600 --> 00:36:56.560
Do I want to make this part of my dependencies or things


00:36:56.560 --> 00:36:58.400
or layers that I got to live with here?


00:36:58.400 --> 00:37:01.280
And if it goes sideways, I got to change something.


00:37:01.280 --> 00:37:04.760
Is, you know, how old is the project?


00:37:04.760 --> 00:37:06.400
How active is the project?


00:37:06.400 --> 00:37:07.400
And so on.


00:37:07.400 --> 00:37:12.200
So, you know, look, we started this podcast,


00:37:12.200 --> 00:37:14.480
let's see, 40 minutes ago.


00:37:14.480 --> 00:37:19.200
The last commit was 52 minutes ago.


00:37:19.200 --> 00:37:20.040
Did a replay.


00:37:20.040 --> 00:37:20.880
- Oh yeah, sorry.


00:37:20.880 --> 00:37:21.880
- Yeah, it was kind of.


00:37:21.880 --> 00:37:22.720
- That's awesome.


00:37:22.720 --> 00:37:23.560
I mean, you're like,


00:37:23.560 --> 00:37:26.080
what are you looking here and it's then it's yesterday,


00:37:26.080 --> 00:37:28.820
it's last week there.


00:37:28.820 --> 00:37:31.040
I wanna point out there's just a lot of activity,


00:37:31.040 --> 00:37:35.000
78 contributors, there's, it's a very lively project


00:37:35.000 --> 00:37:36.200
and not just something that's cool,


00:37:36.200 --> 00:37:39.680
but there's a lot of interest and energy in it,


00:37:39.680 --> 00:37:41.760
which I think is a very strong signal


00:37:41.760 --> 00:37:45.040
that it's something people should be comfortable adopting.


00:37:45.040 --> 00:37:47.960
- Yeah, thanks.


00:37:47.960 --> 00:37:50.620
I appreciate you calling that out.


00:37:50.620 --> 00:37:53.740
I think, I guess a couple of things.


00:37:53.740 --> 00:37:56.260
One, that's actually something that when I talked before


00:37:56.260 --> 00:37:58.860
about why would these big projects adopt this thing


00:37:58.860 --> 00:38:00.780
that like seems really experimental,


00:38:00.780 --> 00:38:04.980
that's actually something that comes up a lot is,


00:38:04.980 --> 00:38:06.240
and I'm not in the conversation,


00:38:06.240 --> 00:38:10.980
but obviously I'm sleuthing a little bit on the PRs, right?


00:38:10.980 --> 00:38:13.680
They're saying, well, it doesn't support X,


00:38:13.680 --> 00:38:16.020
but it's like really actively developed.


00:38:16.020 --> 00:38:18.980
And I'm like very confident that they will support that,


00:38:18.980 --> 00:38:20.540
you know, at some point.


00:38:20.540 --> 00:38:25.280
And so just having something that is clearly very actively


00:38:25.280 --> 00:38:27.760
worked on, I think, is quite appealing and comforting


00:38:27.760 --> 00:38:29.720
to people.


00:38:29.720 --> 00:38:34.240
And I actually do feel bad saying this,


00:38:34.240 --> 00:38:36.260
but one of my favorite--


00:38:36.260 --> 00:38:41.800
not favorite, but an interaction that happens on the repo


00:38:41.800 --> 00:38:44.820
is someone will file an issue, and they'll


00:38:44.820 --> 00:38:49.420
say, this is actually also a bug that exists in the--


00:38:49.420 --> 00:38:51.620
let's call it the upstream implementation.


00:38:51.620 --> 00:38:55.220
So the existing Python version of that tool also has that.


00:38:55.220 --> 00:38:57.820
- Right, like PyLand or Flake 8 or something like that.


00:38:57.820 --> 00:38:58.780
- Yeah.


00:38:58.780 --> 00:39:01.020
- It does this, but we think it's wrong.


00:39:01.020 --> 00:39:02.620
We disagree with it, right?


00:39:02.620 --> 00:39:03.980
- Or there's an issue where, you know,


00:39:03.980 --> 00:39:07.140
the maintainer is like, oh yeah, this is broken, right?


00:39:07.140 --> 00:39:09.220
- Yeah, yeah, yeah, okay.


00:39:09.220 --> 00:39:10.340
- And it's really not, like,


00:39:10.340 --> 00:39:12.340
the reason I feel that thing is like, you know,


00:39:12.340 --> 00:39:15.580
like every project is different and like every maintainer,


00:39:15.580 --> 00:39:18.500
like most, like everyone's doing this like for free, right?


00:39:18.500 --> 00:39:21.140
I'm not here to call out other maintainers,


00:39:21.140 --> 00:39:24.220
but I think it's a very satisfying interaction for people


00:39:24.220 --> 00:39:27.900
when they link to an issue, it's been open for maybe


00:39:27.900 --> 00:39:31.980
for like years, and then I can actually just fix it


00:39:31.980 --> 00:39:35.220
in like pretty quickly and ship a release in the same day.


00:39:35.220 --> 00:39:40.220
And like that, I think that's like a really powerful thing


00:39:40.220 --> 00:39:42.020
that resonates with people a lot,


00:39:42.020 --> 00:39:45.900
is just the feeling of like stuff getting shipped


00:39:45.900 --> 00:39:48.180
and it was getting thick.


00:39:48.180 --> 00:39:51.460
And yeah, I'm working on this full time,


00:39:51.460 --> 00:39:54.580
so I'm fortunate to be able to do that.


00:39:54.580 --> 00:39:57.340
And I totally get it that other projects just


00:39:57.340 --> 00:39:59.140
are in different states and stuff.


00:39:59.140 --> 00:40:02.060
But I get a lot of value out of that.


00:40:02.060 --> 00:40:03.900
And people are always super appreciative.


00:40:03.900 --> 00:40:08.020
And so it all just funnels into giving me energy.


00:40:08.020 --> 00:40:09.380
Yeah.


00:40:09.380 --> 00:40:12.100
Eddie has called you a commit machine.


00:40:12.100 --> 00:40:14.500
Literally every time I update my project with Peninsulas,


00:40:14.500 --> 00:40:16.980
guaranteed to see new stuff on Ruff.


00:40:16.980 --> 00:40:18.660
- I appreciate that.


00:40:18.660 --> 00:40:19.900
I do appreciate that.


00:40:19.900 --> 00:40:23.740
Yeah, I do try to write a lot of code,


00:40:23.740 --> 00:40:25.940
but it's obviously not just me.


00:40:25.940 --> 00:40:30.220
And the contributors have been awesome.


00:40:30.220 --> 00:40:35.180
And I think, I mean, one thing I'm particularly impressed by


00:40:35.180 --> 00:40:37.780
is just the number of people who,


00:40:37.780 --> 00:40:39.180
I don't even know if I always believe them


00:40:39.180 --> 00:40:41.900
when they say this, but just the number of people


00:40:41.900 --> 00:40:45.020
who are like, this is my first time writing Rust,


00:40:45.020 --> 00:40:48.220
or I'm really not good at Rust, or blah, blah, blah.


00:40:48.220 --> 00:40:49.860
- And here's something amazing.


00:40:49.860 --> 00:40:52.140
- Yeah, and they just make great contributions.


00:40:52.140 --> 00:40:54.060
And they're like, hey, I'm trying to learn Rust.


00:40:54.060 --> 00:40:57.860
And I obviously love that stuff.


00:40:57.860 --> 00:40:59.420
If people are interested in learning Rust,


00:40:59.420 --> 00:41:02.100
I actually think Ruff is a great project


00:41:02.100 --> 00:41:04.500
and a great place for that.


00:41:04.500 --> 00:41:11.140
But yeah, I mean, there are people who are working on stuff


00:41:11.780 --> 00:41:13.720
Especially the stuff that I just like,


00:41:13.720 --> 00:41:16.500
it's like big things I can't like focus all my time on


00:41:16.500 --> 00:41:17.980
and just like having great contributors


00:41:17.980 --> 00:41:20.260
who are like really,


00:41:20.260 --> 00:41:26.340
you know, like thoughtful and like prolific.


00:41:26.340 --> 00:41:28.940
Like, you know, every project is lucky


00:41:28.940 --> 00:41:30.180
to have people like that.


00:41:30.180 --> 00:41:33.020
- How old is the project?


00:41:33.020 --> 00:41:34.120
When did you start it?


00:41:34.120 --> 00:41:36.740
- In August.


00:41:36.740 --> 00:41:38.860
So it's like...


00:41:38.860 --> 00:41:40.940
- Yeah, so not that old.


00:41:40.940 --> 00:41:43.660
My time, my brain is like melting, but it's somewhere.


00:41:43.660 --> 00:41:47.060
I think it's like somewhere between four and six months.


00:41:47.060 --> 00:41:47.900
- Okay.


00:41:47.900 --> 00:41:48.740
- Sorry.


00:41:48.740 --> 00:41:51.180
- Did you say you're working on this full time?


00:41:51.180 --> 00:41:52.980
Is that like your full time job?


00:41:52.980 --> 00:41:53.820
- Yeah.


00:41:53.820 --> 00:41:54.660
- Okay.


00:41:54.660 --> 00:41:55.480
And so how's that work?


00:41:55.480 --> 00:41:58.780
Is that GitHub sponsors or are you employed by someone


00:41:58.780 --> 00:41:59.980
to completely work out?


00:41:59.980 --> 00:42:00.820
What's the story?


00:42:00.820 --> 00:42:02.460
That sounds awesome.


00:42:02.460 --> 00:42:04.860
- Still figuring out, you know,


00:42:04.860 --> 00:42:07.100
I'll probably share more on that soon.


00:42:07.100 --> 00:42:07.940
- Okay.


00:42:07.940 --> 00:42:09.580
- I don't have sponsors enabled right now.


00:42:09.580 --> 00:42:13.900
Still figuring out exactly how I want that all to evolve.


00:42:13.900 --> 00:42:16.740
But I am working on it full time.


00:42:16.740 --> 00:42:19.100
I don't anticipate that changing in any way.


00:42:19.100 --> 00:42:24.540
Like I'm really happy in getting so much out of this.


00:42:24.540 --> 00:42:28.420
And I think there are lots of ways to make it work.


00:42:28.420 --> 00:42:32.980
And if not rough, I want to be working on other Python


00:42:32.980 --> 00:42:33.500
tooling.


00:42:33.500 --> 00:42:36.660
So I think there's more stuff to come.


00:42:36.660 --> 00:42:38.260
OK.


00:42:38.260 --> 00:42:40.260
Well, it certainly is neat tooling.


00:42:40.260 --> 00:42:43.660
Let's go through the GitHub page here a little bit.


00:42:43.660 --> 00:42:48.820
So I think we've talked about speed a couple of times.


00:42:48.820 --> 00:42:51.500
We've talked about ways in which that happens.


00:42:51.500 --> 00:42:53.180
You know, rust is an important part,


00:42:53.180 --> 00:42:56.660
but it sounds like it's not the only reason that it's fast.


00:42:56.660 --> 00:43:01.020
You have a chart with the obvious little asterisk,


00:43:01.020 --> 00:43:03.060
caveat, benchmarks.


00:43:03.060 --> 00:43:03.900
- Yeah.


00:43:03.900 --> 00:43:05.060
- Are tough to make.


00:43:05.060 --> 00:43:06.580
- You can read it.


00:43:06.580 --> 00:43:09.140
It's reproducible, you know, like all the stuff


00:43:09.140 --> 00:43:09.980
you can read maybe.


00:43:09.980 --> 00:43:10.800
- Yeah, yeah, yeah, yeah.


00:43:10.800 --> 00:43:12.220
But you're like, that's fast in this situation,


00:43:12.220 --> 00:43:13.700
but my situation is different,


00:43:13.700 --> 00:43:16.620
in which case, you know, such and such, right?


00:43:16.620 --> 00:43:20.200
But for some large code base,


00:43:20.200 --> 00:43:24.220
we've got rough in 0.3 seconds,


00:43:24.220 --> 00:43:29.220
autoflake at six, pylint at over 60 seconds, just barely.


00:43:29.220 --> 00:43:31.940
This is on the CPython code base from scratch,


00:43:31.940 --> 00:43:34.220
which is pretty ridiculous.


00:43:34.220 --> 00:43:35.420
And I already told you the numbers.


00:43:35.420 --> 00:43:38.140
I don't have a millisecond number,


00:43:38.140 --> 00:43:40.960
but it appears to be instant on,


00:43:40.960 --> 00:43:45.540
20,000 lines of Python code that I wrote.


00:43:45.540 --> 00:43:46.460
And it found some issues,


00:43:46.460 --> 00:43:48.660
which I thought would already be discovered.


00:43:48.660 --> 00:43:50.160
So that's pretty excellent.


00:43:50.160 --> 00:43:56.220
It's nearly Python 3.11, 100% compatible, right?


00:43:56.220 --> 00:43:58.380
You said the one major language feature


00:43:58.380 --> 00:43:59.300
is the match statement,


00:43:59.300 --> 00:44:02.020
but other than that, it's compatible, right?


00:44:02.020 --> 00:44:03.080
- Correct.


00:44:03.080 --> 00:44:08.080
- Yeah, it supports some of the other language features


00:44:08.080 --> 00:44:10.660
like that are maybe less high profile,


00:44:10.660 --> 00:44:14.880
like the parenthesized with statements and stuff like that,


00:44:14.880 --> 00:44:15.920
but it doesn't support


00:44:15.920 --> 00:44:19.040
the structural pattern matching yet.


00:44:19.040 --> 00:44:21.520
- Right, got it.


00:44:21.520 --> 00:44:24.440
So it's got the auto fix support near parity


00:44:24.440 --> 00:44:27.160
with the flaky rule set, which is cool.


00:44:27.160 --> 00:44:31.140
You talked about the way that you keep the performance fast,


00:44:31.140 --> 00:44:33.560
but still have parity with Flake 8


00:44:33.560 --> 00:44:36.520
is you have native reimplementations of the Flake 8


00:44:36.520 --> 00:44:38.680
plugins.


00:44:38.680 --> 00:44:39.540
>>That's right.


00:44:39.540 --> 00:44:44.240
Yeah, so we reimplement everything in Rust.


00:44:44.240 --> 00:44:49.600
And a lot of the time, that's me or whoever's working on it,


00:44:49.600 --> 00:44:53.160
looking actually at the plugin and the logic it uses


00:44:53.160 --> 00:44:56.520
and trying to mimic that in a high-fidelity way.


00:44:56.520 --> 00:45:00.600
And often, we'll try to use the same test suite


00:45:00.600 --> 00:45:05.460
and really try to make sure that we're compatible,


00:45:05.460 --> 00:45:07.980
except in cases where we think there's


00:45:07.980 --> 00:45:09.580
an actual sort of factual error.


00:45:09.580 --> 00:45:20.520
I think why Ruff is fast, the plugin stuff,


00:45:20.520 --> 00:45:21.900
there's a lot of interesting stuff


00:45:21.900 --> 00:45:24.740
to say about the plugins.


00:45:24.740 --> 00:45:32.380
Because I think Rust is a big part of why Ruff is fast.


00:45:32.380 --> 00:45:34.340
But there are a couple of other big pieces.


00:45:34.340 --> 00:45:40.540
So one is that we take a lot of care in the code base


00:45:40.540 --> 00:45:45.220
to only do necessary work, if that makes sense.


00:45:45.220 --> 00:45:48.820
So we support 300-something rules.


00:45:48.820 --> 00:45:51.740
But depending on which exact rules you have enabled,


00:45:51.740 --> 00:45:54.620
we'll skip a lot of unnecessary work.


00:45:54.620 --> 00:45:55.540
- Okay.


00:45:55.540 --> 00:45:57.100
- And that can help a lot.


00:45:57.100 --> 00:45:59.020
So, you know, it's basically tailored


00:45:59.020 --> 00:46:00.520
to how much you're using it.


00:46:00.520 --> 00:46:04.380
So like, if you're not using it as an import sorter,


00:46:04.380 --> 00:46:06.180
you know, there's a bunch of stuff that we can skip.


00:46:06.180 --> 00:46:08.460
It's how I would think about it.


00:46:08.460 --> 00:46:10.900
But the other like really big one is,


00:46:10.900 --> 00:46:16.340
because everything is sort of implemented


00:46:16.340 --> 00:46:17.940
in like one system,


00:46:17.940 --> 00:46:22.420
there's a lot of work that would normally be duplicated


00:46:22.420 --> 00:46:24.260
between a lot of different tools


00:46:24.260 --> 00:46:27.140
that can actually just be done once.


00:46:27.140 --> 00:46:30.780
So the way to think of that is if you


00:46:30.780 --> 00:46:35.460
look at Flake 8 with Flake 8 docstrings,


00:46:35.460 --> 00:46:37.780
is maybe one example, which uses PyDocStyle.


00:46:37.780 --> 00:46:40.780
Sorry, I know it's like a tree of tools.


00:46:40.780 --> 00:46:43.540
But if you add that plug-in--


00:46:43.540 --> 00:46:46.500
so PyFlakes is going to parse your source code


00:46:46.500 --> 00:46:48.340
and turn that into an AST.


00:46:48.340 --> 00:46:52.260
And then PyDocStyle actually has basically its own parser


00:46:52.260 --> 00:46:54.220
that will go back over the source code


00:46:54.220 --> 00:46:56.860
and look at all the tokens and extract the doc strings.


00:46:56.860 --> 00:46:59.960
And if you have a bunch of different tools,


00:46:59.960 --> 00:47:03.420
some of them will share that abstract syntax tree.


00:47:03.420 --> 00:47:05.040
But a lot of them end up doing work


00:47:05.040 --> 00:47:07.420
that other tools are also doing.


00:47:07.420 --> 00:47:09.860
Right, because they can't count on necessarily


00:47:09.860 --> 00:47:14.740
that being done, or the plug-in system doesn't provide work


00:47:14.740 --> 00:47:16.160
that's already been done to them,


00:47:16.160 --> 00:47:18.300
so they've got to start over anyway, right?


00:47:18.300 --> 00:47:19.940
Yeah, or they might want to do things


00:47:19.940 --> 00:47:21.260
in a slightly different-- maybe you


00:47:21.260 --> 00:47:23.300
have three different plugins.


00:47:23.300 --> 00:47:28.020
I guess one example is a lot of different--


00:47:28.020 --> 00:47:30.940
a lot of plugins need some way to tell if a function is


00:47:30.940 --> 00:47:33.660
public or private.


00:47:33.660 --> 00:47:39.860
And it's not super complicated, but it's not totally trivial.


00:47:39.860 --> 00:47:42.020
You need to account for functions


00:47:42.020 --> 00:47:43.980
that are inside of classes.


00:47:43.980 --> 00:47:45.780
Is it a public method or a private method?


00:47:45.780 --> 00:47:46.860
You need to account for functions


00:47:46.860 --> 00:47:48.420
that are inside of other functions.


00:47:48.420 --> 00:47:50.800
So there's a lot of rules, actually,


00:47:50.800 --> 00:47:53.820
for determining what's public and private.


00:47:53.820 --> 00:47:56.320
And you might have one Lint rule that's


00:47:56.320 --> 00:47:58.980
like all public methods need to have docstrings.


00:47:58.980 --> 00:48:00.740
And then you might have another rule


00:48:00.740 --> 00:48:04.340
that's like all public methods need to have type annotations.


00:48:04.340 --> 00:48:07.440
And if you have two separate plugins that are doing that,


00:48:07.440 --> 00:48:12.220
they both need a way to actually extract that information.


00:48:12.220 --> 00:48:15.220
And it's not necessarily the case


00:48:15.220 --> 00:48:20.140
that it'll be way faster to do it with one pass and one--


00:48:20.140 --> 00:48:21.100
I think it will.


00:48:21.100 --> 00:48:23.500
It may not be Or's magnitude.


00:48:23.500 --> 00:48:27.380
But the other thing is you have a lot of consistency.


00:48:27.380 --> 00:48:29.780
So it's defined in one way.


00:48:29.780 --> 00:48:33.020
You're not going to be at the whims of small decisions


00:48:33.020 --> 00:48:36.500
that the tools have to make.


00:48:36.500 --> 00:48:42.340
For us, as maintainers and building rough,


00:48:42.340 --> 00:48:48.040
There's a lot of stuff you don't have to implement multiple times. I can leverage that and go


00:48:48.040 --> 00:48:52.520
and implement other Lint rules. I don't have to figure out from scratch how do I determine


00:48:52.520 --> 00:48:56.400
what's public and private? How do I extract all the doc strings from a file? We already


00:48:56.400 --> 00:49:06.560
have all that infrastructure. There's economies of scale, I guess, to implementing new stuff.


00:49:06.560 --> 00:49:11.160
It sort of snowballs a little bit. The tool gets more powerful. It gets easier to do things.


00:49:11.160 --> 00:49:17.280
things. I think you'd be surprised how much of building a tool -- I don't know about you


00:49:17.280 --> 00:49:25.360
personally, but I was surprised by how much of building a tool like this is just -- there's


00:49:25.360 --> 00:49:31.320
like settings and configuration and how do people express their settings? What does the


00:49:31.320 --> 00:49:36.360
command line interface look like? How do you find all the Python files in a directory?


00:49:36.360 --> 00:49:41.040
It sounds trivial, but do you also want to respect git ignores? Do you want users to


00:49:41.040 --> 00:49:47.200
be able to ignore files? There's a lot of rules. And so, again, it's like if I look


00:49:47.200 --> 00:49:52.800
at a new Python tool that wants to go off and implement something, they might have to


00:49:52.800 --> 00:49:57.800
implement all that stuff themselves. But for us, it's like we have all that infrastructure


00:49:57.800 --> 00:50:01.960
in place. And so, if we want to build a new piece of functionality, it's just sort of


00:50:01.960 --> 00:50:04.920
defining the rule and we get all this other stuff for free.


00:50:04.920 --> 00:50:07.800
- Yeah, you can definitely build on the layers


00:50:07.800 --> 00:50:10.560
that are in place 'cause it's all together, it's cool.


00:50:10.560 --> 00:50:12.520
All right, let's look through here a little bit.


00:50:12.520 --> 00:50:14.520
Like I said, there's the testimonials


00:50:14.520 --> 00:50:18.400
from the different projects like Brian from Bokeh


00:50:18.400 --> 00:50:22.120
or Sebastian from FastAPI and whatnot there.


00:50:22.120 --> 00:50:24.840
But let's start with installing it.


00:50:24.840 --> 00:50:27.360
Like I said, you would know


00:50:27.360 --> 00:50:30.040
that this wasn't just a Python tool you could use.


00:50:30.040 --> 00:50:31.920
Pip install, rough, that's the way to go.


00:50:31.920 --> 00:50:34.120
But when I installed it, I didn't pip install,


00:50:34.120 --> 00:50:36.440
I pipx installed it.


00:50:36.440 --> 00:50:39.160
Are you a fan of pipx?


00:50:39.160 --> 00:50:41.680
- Yeah, I use pipx.


00:50:41.680 --> 00:50:42.760
- Yeah. - Yeah, it's great.


00:50:42.760 --> 00:50:44.380
- To me, yeah, to me it seems like rough


00:50:44.380 --> 00:50:46.520
is something I wanna run on different projects


00:50:46.520 --> 00:50:49.520
and I just kinda want rough in my tool set.


00:50:49.520 --> 00:50:52.680
And so I pipx installed rough.


00:50:52.680 --> 00:50:54.520
What do you think?


00:50:54.520 --> 00:50:55.340
Good idea?


00:50:55.340 --> 00:50:56.280
Is it better to put it, say,


00:50:56.280 --> 00:50:58.720
like in a per version at per project?


00:51:00.880 --> 00:51:04.640
So like everything, I think it probably depends.


00:51:04.640 --> 00:51:08.360
But I definitely saw a lot of stuff with PIPX.


00:51:08.360 --> 00:51:11.040
I think the one thing that I--


00:51:11.040 --> 00:51:14.920
the one issue with rough, and I guess


00:51:14.920 --> 00:51:19.000
I recognize why this can be annoying for some people,


00:51:19.000 --> 00:51:20.080
for sure.


00:51:20.080 --> 00:51:21.320
We release a lot.


00:51:21.320 --> 00:51:25.760
And so if projects don't pin their dependencies,


00:51:25.760 --> 00:51:30.440
then they can start to see new errors as we add new rules.


00:51:30.440 --> 00:51:30.940
Yeah.


00:51:30.940 --> 00:51:34.780
Which I guess in some sense is like a breaking change,


00:51:34.780 --> 00:51:37.780
but I don't really consider it as such.


00:51:37.780 --> 00:51:42.500
It's like they have the--


00:51:42.500 --> 00:51:45.900
let's say they have a Simplify rule set enabled,


00:51:45.900 --> 00:51:48.200
and we add a new rule, and that gets turned on for them.


00:51:48.200 --> 00:51:52.940
So anyway, the point is, I guess I


00:51:52.940 --> 00:51:54.780
recommend pinning rough if you're using it


00:51:54.780 --> 00:51:57.380
for a project, which I mean, with PIPX,


00:51:57.380 --> 00:51:59.180
you're just going to stay on one version.


00:51:59.180 --> 00:52:02.860
- Right, so you run pipx upgrade-all or whatever,


00:52:02.860 --> 00:52:04.700
or upgrade that thing in, exactly.


00:52:04.700 --> 00:52:06.420
So in a sense, it's kind of a pin,


00:52:06.420 --> 00:52:08.900
but it's pinned globally, and it gets upgraded globally


00:52:08.900 --> 00:52:11.620
and not per project, yeah.


00:52:11.620 --> 00:52:12.460
- Yeah, yeah.


00:52:12.460 --> 00:52:13.280
- For me, that's kind of okay,


00:52:13.280 --> 00:52:14.980
but if I was on a large team,


00:52:14.980 --> 00:52:18.300
lots of people who were working on it,


00:52:18.300 --> 00:52:21.140
you might wanna control that more, I can see that.


00:52:21.140 --> 00:52:21.980
- Yeah, yeah.


00:52:21.980 --> 00:52:27.900
Yeah, so we have a homebrew distribution


00:52:27.900 --> 00:52:32.820
and a conda distribution on Conda Forge.


00:52:32.820 --> 00:52:34.700
And then I did those.


00:52:34.700 --> 00:52:38.780
And then everything else was done by other people.


00:52:38.780 --> 00:52:41.300
So I'm like-- which is cool, but it also


00:52:41.300 --> 00:52:43.180
means I'm less familiar with them.


00:52:43.180 --> 00:52:43.740
Yeah, sure.


00:52:43.740 --> 00:52:46.220
So I mean, I don't know.


00:52:46.220 --> 00:52:48.200
Publishing on Homebrew and Conda Forge


00:52:48.200 --> 00:52:50.460
was a pretty interesting experience for me, actually,


00:52:50.460 --> 00:52:52.140
because I've never done that.


00:52:52.140 --> 00:52:53.940
And I didn't actually really know that much


00:52:53.940 --> 00:52:55.940
about how those worked.


00:52:55.940 --> 00:53:01.420
So that was cool, hopefully it's useful for people.


00:53:01.420 --> 00:53:02.860
There's definitely some complexity


00:53:02.860 --> 00:53:08.180
with the packaging and release stuff, which I don't know


00:53:08.180 --> 00:53:10.580
if you want to talk about that or not.


00:53:10.580 --> 00:53:12.140
Because we're building Rust, there's


00:53:12.140 --> 00:53:13.680
a couple of things that we need to do


00:53:13.680 --> 00:53:16.460
that are a little different from a standard Python package.


00:53:16.460 --> 00:53:19.900
Maybe just touch on it a bit, because what you deliver


00:53:19.900 --> 00:53:20.740
is a wheel, right?


00:53:20.740 --> 00:53:24.900
But it's got the compiled Rust bit for me


00:53:24.900 --> 00:53:29.020
on my ARM64 macOS build, right?


00:53:29.020 --> 00:53:30.580
Yeah, that's right.


00:53:30.580 --> 00:53:33.420
So basically, it just means we have to--


00:53:33.420 --> 00:53:38.060
the wheel is a sort of pre-compiled version


00:53:38.060 --> 00:53:40.180
of the package, as opposed to just giving you


00:53:40.180 --> 00:53:41.700
the source code.


00:53:41.700 --> 00:53:44.940
Like, if I just gave you the source code and not the wheel,


00:53:44.940 --> 00:53:47.100
you'd actually need to have Rust installed,


00:53:47.100 --> 00:53:49.300
because you'd have to actually build the thing


00:53:49.300 --> 00:53:51.860
and install it, which is, of course,


00:53:51.860 --> 00:53:56.220
an extremely unreasonable expectation for the people who


00:53:56.220 --> 00:53:58.340
are using this for the most part.


00:53:58.340 --> 00:54:00.820
- Yeah, but before the wheels really became popular,


00:54:00.820 --> 00:54:02.300
that was part of the stuff, right?


00:54:02.300 --> 00:54:04.140
It would just build for you.


00:54:04.140 --> 00:54:05.540
Yeah, yeah.


00:54:05.540 --> 00:54:06.360
- Yeah, so.


00:54:06.360 --> 00:54:08.060
- Or it wouldn't build for you, which was frustrating,


00:54:08.060 --> 00:54:08.900
but that was part of the stuff, right?


00:54:08.900 --> 00:54:10.340
- Yeah, yeah.


00:54:10.340 --> 00:54:12.940
So basically, yeah, we just build wheels


00:54:12.940 --> 00:54:17.940
for all the platforms that I know of.


00:54:17.940 --> 00:54:19.660
- Yeah, is it all CI/CD?


00:54:19.660 --> 00:54:22.260
You just push it to some branch and magic happens


00:54:22.260 --> 00:54:25.220
and then wheels start appearing in places.


00:54:25.220 --> 00:54:26.060
- Yeah, that's right.


00:54:26.060 --> 00:54:28.580
So whenever I cut a release on GitHub,


00:54:28.580 --> 00:54:31.640
like I just use like GitHub releases basically,


00:54:31.640 --> 00:54:33.820
or I just use GitHub releases.


00:54:33.820 --> 00:54:35.500
It kicks off a release job


00:54:35.500 --> 00:54:37.760
and then that's all through GitHub actions.


00:54:37.760 --> 00:54:39.940
So it just has a big matrix, right,


00:54:39.940 --> 00:54:43.100
of all the different operating systems.


00:54:43.100 --> 00:54:44.700
We only have to build,


00:54:44.700 --> 00:54:46.720
thankfully we only have to build one wheel


00:54:46.720 --> 00:54:48.820
per operating system.


00:54:48.820 --> 00:54:52.080
We don't have to build one wheel per Python version, which


00:54:52.080 --> 00:54:53.700
is something that can happen sometimes.


00:54:53.700 --> 00:54:57.780
And then you have a mass explosion of number of wheels.


00:54:57.780 --> 00:55:02.420
But that's all facilitated with a tool called Naturan,


00:55:02.420 --> 00:55:06.980
which I'm a big fan of, which is--


00:55:06.980 --> 00:55:10.060
it's sort of like, I don't know, like setup tools


00:55:10.060 --> 00:55:11.900
and a bunch of other stuff bundled together,


00:55:11.900 --> 00:55:16.980
but specifically for shipping mixed Rust Python projects.


00:55:16.980 --> 00:55:19.860
So I don't actually really have to do anything,


00:55:19.860 --> 00:55:22.620
for the most part, to make that work.


00:55:22.620 --> 00:55:28.460
My PyProject.toml has Matran at the top,


00:55:28.460 --> 00:55:32.260
and I have a Rust project, and I call Matran build,


00:55:32.260 --> 00:55:33.380
and it creates a wheel.


00:55:33.380 --> 00:55:35.660
So it's all like--


00:55:35.660 --> 00:55:36.500
I don't know.


00:55:36.500 --> 00:55:38.100
I think it's super cool that works.


00:55:38.100 --> 00:55:42.060
Yeah, that sounds super smooth and super neat.


00:55:42.060 --> 00:55:45.860
And like I said, as a consumer of it, also very smooth.


00:55:45.860 --> 00:55:47.460
I didn't have to wait on some build.


00:55:47.460 --> 00:55:49.180
I didn't need build tools or config


00:55:49.180 --> 00:55:51.180
that I don't care about or don't use.


00:55:51.180 --> 00:55:52.980
I'm pretty sure I do have Rust,


00:55:52.980 --> 00:55:56.460
the Rust C as a CLI option I can use here,


00:55:56.460 --> 00:55:59.420
but you don't want to depend on that, right?


00:55:59.420 --> 00:56:00.260
- No.


00:56:00.260 --> 00:56:02.460
- So you run it on the command line,


00:56:02.460 --> 00:56:05.220
you say rough and you point at either a file


00:56:05.220 --> 00:56:08.980
or a directory or some pattern of files, right?


00:56:08.980 --> 00:56:10.980
Some star type of thing,


00:56:10.980 --> 00:56:14.420
which is cool and that gives you the output.


00:56:14.420 --> 00:56:15.820
gives you the output.


00:56:15.820 --> 00:56:18.380
You can also do it with a --watch


00:56:18.380 --> 00:56:22.540
and just run it constantly, which is pretty cool, right?


00:56:22.540 --> 00:56:25.420
It's fast enough that basically, as you save it,


00:56:25.420 --> 00:56:28.220
if there's problems, that'll just appear in the terminal,


00:56:28.220 --> 00:56:29.180
right?


00:56:29.180 --> 00:56:31.100
Or wherever you run it.


00:56:31.100 --> 00:56:33.500
That's kind of a funny example because I based--


00:56:33.500 --> 00:56:39.020
it's a good example because I'm pretty sure I took that exactly


00:56:39.020 --> 00:56:44.020
from probably from TSC, which is the TypeScript compiler.


00:56:44.020 --> 00:56:48.220
They have a watch setting and I like how it works.


00:56:48.220 --> 00:56:50.140
And so I wanted that for Ralph.


00:56:50.140 --> 00:56:52.460
So it's just, that's a very literal example


00:56:52.460 --> 00:56:55.040
of me looking at another tool from like another space


00:56:55.040 --> 00:56:57.460
and being like, oh, that's really nice.


00:56:57.460 --> 00:57:00.020
- I suspect it's not terribly difficult.


00:57:00.020 --> 00:57:03.220
Yes, I suppose it's not terribly difficult to implement.


00:57:03.220 --> 00:57:06.020
You take the pattern and you put a watch


00:57:06.020 --> 00:57:08.580
in the OS watch implementation


00:57:08.580 --> 00:57:10.280
and you say, call me back when something changes.


00:57:10.280 --> 00:57:12.140
And because it's fast, it just reruns, right?


00:57:12.140 --> 00:57:12.860
But it's still--


00:57:12.860 --> 00:57:14.220
- Yeah, that's exactly right.


00:57:14.220 --> 00:57:16.860
- It's very handy though that it's there.


00:57:16.860 --> 00:57:18.940
The other thing that's interesting is


00:57:18.940 --> 00:57:22.860
you can do it as a pre-commit hook, which is nice.


00:57:22.860 --> 00:57:25.500
- Yep, yeah, that's...


00:57:25.500 --> 00:57:30.860
Yeah, that works pretty well for people, I think.


00:57:30.860 --> 00:57:35.660
A lot of people seem to use it, so I'm glad that it exists.


00:57:35.660 --> 00:57:36.500
- Yeah.


00:57:37.860 --> 00:57:38.820
It's a little bit of a weird setup


00:57:38.820 --> 00:57:40.460
'cause maybe it's actually not that interesting


00:57:40.460 --> 00:57:42.660
to talk about, but it's in like a separate repo


00:57:42.660 --> 00:57:44.220
for sort of like complicated reasons


00:57:44.220 --> 00:57:46.420
that I can't even really remember.


00:57:46.420 --> 00:57:48.580
- Okay, I see.


00:57:48.580 --> 00:57:52.300
Now, to configure it, it has a,


00:57:52.300 --> 00:57:56.180
let's say, comprehensive CLI set of options.


00:57:56.180 --> 00:57:59.180
Yeah, I can't remember, maybe 15 or so command line options


00:57:59.180 --> 00:58:03.060
you can pass it, but you can also put it


00:58:03.060 --> 00:58:07.220
into the pyproject.toml with things just like


00:58:07.220 --> 00:58:10.340
and then you can put your various settings in there, right?


00:58:10.340 --> 00:58:14.060
So it just sort of integrates along that,


00:58:14.060 --> 00:58:18.300
or you can have a rough.toml and then put it in there.


00:58:18.300 --> 00:58:23.020
- Yeah, so that's something that I took basically from Hatch.


00:58:23.020 --> 00:58:26.620
So within Hatch, you can have a pyproject.toml


00:58:26.620 --> 00:58:29.780
or a hatch.toml, and the hatch.toml


00:58:29.780 --> 00:58:32.660
kind of like unnests the configuration.


00:58:32.660 --> 00:58:34.380
Like if you use a rough.toml,


00:58:34.380 --> 00:58:37.020
you don't need to have like tool.rough at the top


00:58:37.020 --> 00:58:39.460
and stuff like that.


00:58:39.460 --> 00:58:45.740
I think one thing that I'm quite happy that we have


00:58:45.740 --> 00:58:51.700
is the configuration is very type safe.


00:58:51.700 --> 00:58:54.980
So if you try to--


00:58:54.980 --> 00:58:57.860
so that line, select equals EF, those


00:58:57.860 --> 00:59:01.020
are error rule codes that are defined in Ruff.


00:59:01.020 --> 00:59:04.700
And so if you replaced F with some string that


00:59:04.700 --> 00:59:14.140
wasn't a real rule, you'll get an error saying your PyProject.toml was invalid.


00:59:14.140 --> 00:59:25.060
And similarly, we also create what are called JSON schemas for the configuration. So if


00:59:25.060 --> 00:59:31.260
you're in PyCharm and you open up a PyProject.toml and you type tool.rough, it'll show you all


00:59:31.260 --> 00:59:37.080
the options, it'll actually surface the documentation we have for the options too.


00:59:37.080 --> 00:59:38.080
Oh, nice.


00:59:38.080 --> 00:59:44.880
Which is pretty cool. Yeah. So I'd like more tools to do that because I think it's super


00:59:44.880 --> 00:59:54.600
useful. I think Poetry has it, but not too many others do. You can get it in VS Code


00:59:54.600 --> 01:00:01.000
as well, but you need to install an extension. It's called Even Better Toml, I think.


01:00:01.000 --> 01:00:03.000
Right, OK.


01:00:03.000 --> 01:00:04.600
But I'm happy with those things.


01:00:04.600 --> 01:00:06.000
I think it makes it like--


01:00:06.000 --> 01:00:08.880
I think small things like that add up.


01:00:08.880 --> 01:00:12.600
And I'm glad we're able to do them.


01:00:12.600 --> 01:00:14.960
Yeah, when I looked at the configuration settings,


01:00:14.960 --> 01:00:17.600
like the exclude directories and various other things,


01:00:17.600 --> 01:00:20.360
that's kind of a lot to put on a command line.


01:00:20.360 --> 01:00:22.440
It would be nice if you could just put it in, say,


01:00:22.440 --> 01:00:23.920
rough.toml or pyproject.toml.


01:00:23.920 --> 01:00:26.080
And then when you just type rough the thing,


01:00:26.080 --> 01:00:29.400
it sees that, and it uses it, right?


01:00:29.400 --> 01:00:37.480
Yeah, and yeah, I've kind of like intentionally like not put a lot of these arguments on the


01:00:37.480 --> 01:00:41.960
command line, like for that reason, like you could imagine taking everything here and exposing


01:00:41.960 --> 01:00:46.840
it on the command line. But the command line really just deals with like, how should the


01:00:46.840 --> 01:00:52.360
thing execute and not like, I don't know, what should the max complexity be? Yeah,


01:00:52.360 --> 01:00:54.040
the cave complexity, Jack and stuff.


01:00:54.040 --> 01:00:57.800
I think that's fair. Like, put the common stuff on the command line and then say,


01:00:57.800 --> 01:01:00.760
and if you need to go crazy, here's your --config.


01:01:00.760 --> 01:01:02.760
Pass that in.


01:01:02.760 --> 01:01:04.760
- Right. - Yeah, yeah.


01:01:04.760 --> 01:01:06.760
- Yeah. - Sorry, one second.


01:01:06.760 --> 01:01:08.760
There you go.


01:01:08.760 --> 01:01:10.760
One thing that I did want to talk about,


01:01:10.760 --> 01:01:12.760
and you kind of touched on, there's a bunch of the command line arguments.


01:01:12.760 --> 01:01:14.760
One of the things I did want to talk about is the


01:01:14.760 --> 01:01:18.120
the editor integration.


01:01:18.120 --> 01:01:20.120
There's a huge bunch of rules here.


01:01:20.120 --> 01:01:22.120
You got to scroll through on the homepage to get down to it.


01:01:22.120 --> 01:01:24.120
- Yeah, sorry. - It's awesome.


01:01:24.120 --> 01:01:26.840
No, no, it's good. I mean, these are like all the things that checks


01:01:26.840 --> 01:01:30.200
that I don't have to think about anymore, which is great.


01:01:30.200 --> 01:01:31.700
Eventually, though,


01:01:31.700 --> 01:01:35.640
geez, I forgot it was this long.


01:01:35.640 --> 01:01:38.400
Eventually, though, it has plugins,


01:01:38.400 --> 01:01:41.640
or maybe that's not quite what I said.


01:01:41.640 --> 01:01:43.840
It has an extension for VS Code,


01:01:43.840 --> 01:01:47.160
and it has ways to basically add it


01:01:47.160 --> 01:01:49.680
as a command to PyCharm, right?


01:01:49.680 --> 01:01:52.560
Which is, those are both awesome editors


01:01:52.560 --> 01:01:55.000
that are kind of very friendly


01:01:55.000 --> 01:01:56.520
to thinking about code formatting,


01:01:56.520 --> 01:01:59.640
and exposing the errors that this would as well.


01:01:59.640 --> 01:02:00.480
So that's great.


01:02:00.480 --> 01:02:03.240
You might wanna just talk about that just real quick.


01:02:03.240 --> 01:02:04.080
- Yeah, totally.


01:02:04.080 --> 01:02:06.300
So yeah, we have a VS Code extension.


01:02:06.300 --> 01:02:15.920
So that was my first time writing a VS Code extension.


01:02:15.920 --> 01:02:20.520
And actually these extensions use,


01:02:20.520 --> 01:02:21.840
or they conform to something called


01:02:21.840 --> 01:02:23.760
the language server protocol.


01:02:24.920 --> 01:02:30.800
And effectively, that's sort of like a standard--


01:02:30.800 --> 01:02:33.160
I believe-- I'll probably get a bunch of the history wrong,


01:02:33.160 --> 01:02:36.920
but I believe it's Microsoft that publishes and maintains


01:02:36.920 --> 01:02:39.480
that spec.


01:02:39.480 --> 01:02:42.280
And the nice thing about that protocol


01:02:42.280 --> 01:02:46.560
is you can actually use--


01:02:46.560 --> 01:02:49.560
almost all of the code behind the VS Code extension


01:02:49.560 --> 01:02:53.120
is actually published as a language server, rough LSP.


01:02:53.120 --> 01:03:00.480
And what that means is you can actually get the exact same behaviors in all sorts of different


01:03:00.480 --> 01:03:01.480
editors.


01:03:01.480 --> 01:03:03.840
It's not confined to VS Code.


01:03:03.840 --> 01:03:12.200
So if you use NeoVim or Sublime Text or whatever else, those all support this standard protocol.


01:03:12.200 --> 01:03:17.120
And they all have ways to tap into that rough language server protocol.


01:03:17.120 --> 01:03:21.320
So we have the standalone LSP, which


01:03:21.320 --> 01:03:27.440
we have instructions for Sublime and other tools.


01:03:27.440 --> 01:03:29.280
And then we have the actual extension,


01:03:29.280 --> 01:03:32.360
which is published on the Marketplace.


01:03:32.360 --> 01:03:34.360
And those are things I definitely


01:03:34.360 --> 01:03:35.640
want to keep supporting.


01:03:35.640 --> 01:03:42.080
And I view them as official arms of the project, which


01:03:42.080 --> 01:03:42.800
I think is nice.


01:03:42.800 --> 01:03:45.360
So people should know that those are official.


01:03:45.360 --> 01:03:48.360
and like, I fix bugs in them and all that kind of stuff.


01:03:48.360 --> 01:03:51.280
- Nice, and then for PyCharm,


01:03:51.280 --> 01:03:53.840
you just add it as an external tool,


01:03:53.840 --> 01:03:56.640
and then you have the rough command around,


01:03:56.640 --> 01:03:58.760
or for both of these, if you prefer,


01:03:58.760 --> 01:04:00.600
you just add it as a pre-commit hook.


01:04:00.600 --> 01:04:02.520
- Yep. - That's also.


01:04:02.520 --> 01:04:04.080
- Yeah, that's right.


01:04:04.080 --> 01:04:07.040
- Yeah, that then like, as you interact with it,


01:04:07.040 --> 01:04:08.840
it'll run the pre-commit hook as well


01:04:08.840 --> 01:04:11.140
if you try to check things in.


01:04:11.140 --> 01:04:14.600
All right, yeah, super, super cool here.


01:04:14.600 --> 01:04:18.240
I think this is a neat project.


01:04:18.240 --> 01:04:21.400
I ran it as my project and I thought,


01:04:21.400 --> 01:04:25.260
everything is pretty much good to go.


01:04:25.260 --> 01:04:30.620
Where, when I'm using PyCharm, for example,


01:04:30.620 --> 01:04:32.700
it'll often tell me many of these things.


01:04:32.700 --> 01:04:34.960
Like it'll say there's a local variable that's unused


01:04:34.960 --> 01:04:38.160
or it'll automatically remove unused imports.


01:04:38.160 --> 01:04:42.840
And yet I'm looking at 331 issues,


01:04:42.840 --> 01:04:47.380
108 are potentially fixable with the --fix option.


01:04:47.380 --> 01:04:50.860
So that sounds like there's a lot of value


01:04:50.860 --> 01:04:53.160
to make that part of my tool chain.


01:04:53.160 --> 01:04:58.460
- Yeah, I mean, feel free to have some of your own opinions


01:04:58.460 --> 01:05:01.060
about which of those rules actually matter.


01:05:01.060 --> 01:05:03.140
- Sure, I suspect you can disable them


01:05:03.140 --> 01:05:04.020
in your config file, right?


01:05:04.020 --> 01:05:06.500
You can say this rule I don't care about.


01:05:06.500 --> 01:05:07.340
Okay.


01:05:07.340 --> 01:05:10.700
- Yeah, and this is another sort of compatibility thing.


01:05:10.700 --> 01:05:15.540
Like the API for actually turning rules on and off


01:05:15.540 --> 01:05:20.260
is essentially identical to the Flake 8 API.


01:05:20.260 --> 01:05:23.980
So that's also useful for people migrating over.


01:05:23.980 --> 01:05:25.740
Yeah, I comment no QA is one option.


01:05:25.740 --> 01:05:29.540
Yeah, we respect those two.


01:05:29.540 --> 01:05:32.660
We also respect high sorts action comments.


01:05:32.660 --> 01:05:38.460
So we do a lot of stuff to try and maintain compatibility.


01:05:38.460 --> 01:05:39.060
Nice.


01:05:39.060 --> 01:05:41.060
Maybe another interesting thing in that vein


01:05:41.060 --> 01:05:46.060
is that we ship a tool called Flake 8 to Ruff, which


01:05:46.060 --> 01:05:49.180
does sort of what it sounds like.


01:05:49.180 --> 01:05:51.460
So you point it to a Flake 8 configuration file,


01:05:51.460 --> 01:05:56.860
and it spits out a toml for Ruff that's compatible.


01:05:56.860 --> 01:05:59.120
And it also tells you if there were things in the file


01:05:59.120 --> 01:06:01.100
that we don't support, which is useful too.


01:06:01.100 --> 01:06:03.140
Like, oh, hey, you're using these rules.


01:06:03.140 --> 01:06:05.700
Those actually aren't implemented yet.


01:06:05.700 --> 01:06:09.540
So that's also maintained as part of the project.


01:06:09.540 --> 01:06:13.060
So I recommend checking it out.


01:06:13.060 --> 01:06:13.900
- Excellent.


01:06:13.900 --> 01:06:17.020
Well, Charlie, I think we're getting short on time,


01:06:17.020 --> 01:06:18.500
but not short on topic.


01:06:18.500 --> 01:06:20.860
There's a whole lot more to dive into.


01:06:20.860 --> 01:06:23.300
I think it's a really cool project.


01:06:23.300 --> 01:06:26.180
- Yeah, are we gonna do a big Wasm section?


01:06:26.180 --> 01:06:28.380
(laughing)


01:06:28.380 --> 01:06:29.740
No, I'm kidding, I'm kidding.


01:06:29.740 --> 01:06:31.900
- Yeah, we could do a Wasm section.


01:06:31.900 --> 01:06:36.620
We even have some great chat GCP questions in the audience.


01:06:36.620 --> 01:06:38.620
I don't necessarily think that there's


01:06:38.620 --> 01:06:39.860
time for those, unfortunately.


01:06:39.860 --> 01:06:41.920
But there is one final question that I


01:06:41.920 --> 01:06:43.780
want to ask that's inspired by the audience,


01:06:43.780 --> 01:06:45.900
but I think it's good for everyone.


01:06:45.900 --> 01:06:48.980
Jean-Gabriel asks, is there a roadmap or timeline


01:06:48.980 --> 01:06:52.420
for rough development out there?


01:06:52.420 --> 01:06:54.860
What's next, basically?


01:06:54.860 --> 01:06:55.620
- Yeah, totally.


01:06:55.620 --> 01:07:02.460
So there is no--


01:07:02.460 --> 01:07:04.120
I guess the short answer to that is no.


01:07:04.120 --> 01:07:08.740
There's not a published timeline, unfortunately.


01:07:08.740 --> 01:07:12.740
Most of this stuff exists in my head and in issues.


01:07:12.740 --> 01:07:14.620
Everything happens on issues.


01:07:14.620 --> 01:07:17.260
We're just talking a lot on issues.


01:07:17.260 --> 01:07:20.100
But I'll maybe talk a bit about the things


01:07:20.100 --> 01:07:22.300
that I'm thinking about.


01:07:22.300 --> 01:07:30.380
So one is fixing the structural pattern matching issue,


01:07:30.380 --> 01:07:35.860
and so getting full Python compatibility, which


01:07:35.860 --> 01:07:38.260
is sort of like one bug, but then unlocks


01:07:38.260 --> 01:07:41.340
us doing what I hope will be a stable release,


01:07:41.340 --> 01:07:43.260
even if that's not that much changes


01:07:43.260 --> 01:07:45.580
and it's just kind of the marketing of it.


01:07:45.580 --> 01:07:47.200
But hopefully, we'll fix that, and then


01:07:47.200 --> 01:07:48.340
we can do a stable release.


01:07:51.620 --> 01:07:53.660
There are two other big things on my mind.


01:07:53.660 --> 01:07:59.420
So one is this is a really big project by--


01:07:59.420 --> 01:08:01.900
not Ruff, the thing I'm about to talk about.


01:08:01.900 --> 01:08:08.220
But I want to extend Ruff to do full code auto formatting


01:08:08.220 --> 01:08:12.860
so that people could use it in lieu of Black if they wanted to.


01:08:12.860 --> 01:08:16.740
I think it's a really natural fit for what Ruff is doing.


01:08:16.740 --> 01:08:20.140
And a lot of people ask about it.


01:08:20.140 --> 01:08:23.260
So the way that that will-- there's


01:08:23.260 --> 01:08:25.980
an issue where we talk about this on the repo.


01:08:25.980 --> 01:08:28.380
It's not some big secret reveal.


01:08:28.380 --> 01:08:33.220
But the way that I think about that, like with all things,


01:08:33.220 --> 01:08:37.980
is I want it to be sort of incrementally adoptable.


01:08:37.980 --> 01:08:42.300
So right now, you can use rough with isort,


01:08:42.300 --> 01:08:44.260
or you can use just rough, or you


01:08:44.260 --> 01:08:47.260
can use rough to your input sorting, but not as a linter.


01:08:47.260 --> 01:08:49.860
You can kind of pick and choose what you want to use.


01:08:49.860 --> 01:08:52.680
And I view the autoformatter is the same way.


01:08:52.680 --> 01:08:56.680
I fully expect that people will keep using rough and black.


01:08:56.680 --> 01:08:58.860
But it's just the kind of functionality


01:08:58.860 --> 01:09:01.200
that makes a lot of sense given what we're already doing


01:09:01.200 --> 01:09:04.240
and the way that the project's evolving.


01:09:04.240 --> 01:09:11.700
So I need to be careful because that's a lot of work.


01:09:11.700 --> 01:09:14.280
And so I'm not saying exactly when that will be done.


01:09:14.280 --> 01:09:18.020
But I do want to start working on it.


01:09:18.020 --> 01:09:20.740
And then the other thing, which is maybe a little bit less


01:09:20.740 --> 01:09:24.100
exciting to other people, is I think at some point,


01:09:24.100 --> 01:09:28.740
I'd like Rough to get to a world where it stands alone


01:09:28.740 --> 01:09:30.700
a little bit more and isn't viewed quite as much


01:09:30.700 --> 01:09:32.300
as a compatibility--


01:09:32.300 --> 01:09:34.340
as this compatibility layer.


01:09:34.340 --> 01:09:36.500
Right now, all the rules map back


01:09:36.500 --> 01:09:38.540
to Playgate or other tools.


01:09:38.540 --> 01:09:40.000
And when you're using Rough, you're


01:09:40.000 --> 01:09:42.460
kind of thinking in the mindset of those other tools,


01:09:42.460 --> 01:09:46.340
like what are the rules and how do I configure them?


01:09:46.340 --> 01:09:48.220
At some point in the future, I'd actually


01:09:48.220 --> 01:09:53.340
like Rough to have its own API and own indexing of the rules


01:09:53.340 --> 01:09:57.740
and to view that as a compatibility layer that


01:09:57.740 --> 01:09:59.020
will not go away.


01:09:59.020 --> 01:10:00.580
This won't put a burden on users.


01:10:00.580 --> 01:10:03.300
But I'd like to get to a point where, conceptually, a lot


01:10:03.300 --> 01:10:05.740
of this stuff is first class in Rough.


01:10:05.740 --> 01:10:07.940
And it's not viewed as re-implementation


01:10:07.940 --> 01:10:10.820
of other extensions, which I think


01:10:10.820 --> 01:10:12.580
will enable us to do a lot of cool things.


01:10:12.580 --> 01:10:14.180
But I'm hopeful that--


01:10:14.180 --> 01:10:15.660
I plan on doing that in a way that


01:10:15.660 --> 01:10:18.420
has no disruption to users.


01:10:18.420 --> 01:10:21.580
So we should continue to support the existing API and such.


01:10:21.580 --> 01:10:22.260
Yeah.


01:10:22.260 --> 01:10:22.860
Yeah.


01:10:22.860 --> 01:10:24.300
Yeah, exactly.


01:10:24.300 --> 01:10:25.460
Very exciting.


01:10:25.460 --> 01:10:26.180
Very exciting.


01:10:26.180 --> 01:10:28.300
Well, congratulations on a project


01:10:28.300 --> 01:10:29.340
that people seem to love.


01:10:29.340 --> 01:10:32.100
It's got a lot of traction and definitely


01:10:32.100 --> 01:10:34.220
doing some cool stuff.


01:10:34.220 --> 01:10:36.780
So before we get out of here, though, final two questions.


01:10:36.780 --> 01:10:38.560
If you're going to write some Python code,


01:10:38.560 --> 01:10:41.660
what editor are you using these days?


01:10:41.660 --> 01:10:44.220
I use PyCharm for everything.


01:10:44.220 --> 01:10:45.260
And that includes Rust.


01:10:45.260 --> 01:10:48.860
So I do all my Rust and my Python and PyCharm.


01:10:48.860 --> 01:10:49.360
>>Nice.


01:10:49.360 --> 01:10:53.540
Is there a cool plugin that basically adds Rust support to--


01:10:53.540 --> 01:10:57.700
>>Yeah, there's an official IntelliJ Rust plugin.


01:10:57.700 --> 01:10:58.200
>>Got it.


01:10:58.200 --> 01:10:59.540
Nice.


01:10:59.540 --> 01:11:00.900
>>Works really well.


01:11:00.900 --> 01:11:02.300
>>Yeah, I haven't tried.


01:11:02.300 --> 01:11:05.060
I've used IntelliJ for--


01:11:05.060 --> 01:11:07.460
I like that platform for Dart and Flutter.


01:11:07.460 --> 01:11:09.260
But I haven't tried to plug Rust into it.


01:11:09.260 --> 01:11:10.980
But it does do a lot of things.


01:11:10.980 --> 01:11:11.660
Cool.


01:11:11.660 --> 01:11:14.740
And then notable PyPI package, something out there.


01:11:14.740 --> 01:11:17.700
You've named a couple that do the Rust integration nicely,


01:11:17.700 --> 01:11:20.340
but anything you wanna give a shout out to?


01:11:20.340 --> 01:11:21.620
- Yeah, I really wanna give a shout out.


01:11:21.620 --> 01:11:22.940
I've already mentioned it a few times,


01:11:22.940 --> 01:11:25.620
but I think if you're interested in doing Rust Python stuff,


01:11:25.620 --> 01:11:27.700
you should really look at Matrin.


01:11:27.700 --> 01:11:30.420
- Matrin, all right. - M-A-T-U-R-I-N.


01:11:30.420 --> 01:11:34.860
It just makes the publishing really easy,


01:11:34.860 --> 01:11:38.340
and you still have to learn Rust, which is not easy,


01:11:38.340 --> 01:11:39.300
but I do.


01:11:39.300 --> 01:11:42.260
It's worthwhile, I think, but it's not easy.


01:11:42.260 --> 01:11:45.900
But it makes the publishing of Rust code to PyPI--


01:11:45.900 --> 01:11:47.340
or PyPI, sorry--


01:11:47.340 --> 01:11:48.620
really easy.


01:11:48.620 --> 01:11:49.820
Yeah.


01:11:49.820 --> 01:11:50.320
Awesome.


01:11:50.320 --> 01:11:52.020
Well, great recommendation.


01:11:52.020 --> 01:11:52.980
Thanks for being here.


01:11:52.980 --> 01:11:53.700
Final call to action.


01:11:53.700 --> 01:11:54.940
People want to get started with Ruff.


01:11:54.940 --> 01:11:55.820
What do you tell them?


01:11:55.820 --> 01:12:00.380
Sorry.


01:12:00.380 --> 01:12:03.860
Well, I think the main thing that I would like to say


01:12:03.860 --> 01:12:06.540
is if you're interested in contributing,


01:12:06.540 --> 01:12:08.500
even if you don't know that much Rust


01:12:08.500 --> 01:12:12.660
and are interested in learning, I'd love to see you on the repo.


01:12:12.660 --> 01:12:16.620
And I hope it's a place that people feel really welcome


01:12:16.620 --> 01:12:19.900
to come and contribute, even if they aren't 100% certain


01:12:19.900 --> 01:12:22.460
if their code is right or anything like that.


01:12:22.460 --> 01:12:26.300
So definitely really excited to have more contributors


01:12:26.300 --> 01:12:28.780
and have more people coming into the project.


01:12:28.780 --> 01:12:31.940
And of course, you should also try using it yourself.


01:12:31.940 --> 01:12:33.700
All right, excellent.


01:12:33.700 --> 01:12:35.260
Well, thanks for being here.


01:12:35.260 --> 01:12:37.820
It was a great, great conversation with you.


01:12:37.820 --> 01:12:41.620
Yeah, thanks so much for having me. It was a really cool opportunity. Appreciate it.


01:12:41.620 --> 01:12:43.620
Yeah, you bet. Bye.

