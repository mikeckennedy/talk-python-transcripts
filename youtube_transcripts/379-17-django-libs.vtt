WEBVTT

00:00:00.000 --> 00:00:02.000
Hey, YouTube. Hey, Chris.


00:00:02.000 --> 00:00:04.000
Hey there.


00:00:04.000 --> 00:00:08.000
Hey, awesome to have you here on the live stream


00:00:08.000 --> 00:00:12.000
and in just a moment on the podcast. So for those of you out there listening,


00:00:12.000 --> 00:00:16.000
if you've got some comments, throw them in the live chat. We'll try to make them part of the show.


00:00:16.000 --> 00:00:20.000
Got a bunch of cool libraries to share and if you have more ideas


00:00:20.000 --> 00:00:24.000
on things that are similar, throw those out there as well and we'll try to pull them up potentially.


00:00:24.000 --> 00:00:27.000
And with that, Chris, you ready to kick this off?


00:00:27.000 --> 00:00:29.000
Let's go.


00:00:29.000 --> 00:00:32.740
- All right, Chris, welcome to Talk Python To Me.


00:00:32.740 --> 00:00:34.880
- Ah, thanks for having me.


00:00:34.880 --> 00:00:36.600
- Yeah, it's great to have you here on the show.


00:00:36.600 --> 00:00:38.480
You know, we've worked on some projects together


00:00:38.480 --> 00:00:40.240
and talked otherwise,


00:00:40.240 --> 00:00:42.860
but your first time here on Talk Python.


00:00:42.860 --> 00:00:45.080
- Monumental.


00:00:45.080 --> 00:00:47.520
- Indeed, indeed.


00:00:47.520 --> 00:00:50.520
So I'm super excited to talk about Django.


00:00:50.520 --> 00:00:51.920
I don't do that much Django,


00:00:51.920 --> 00:00:53.560
which is why you're here


00:00:53.560 --> 00:00:55.240
because you do a ton of stuff with Django.


00:00:55.240 --> 00:00:58.760
So really excited to have you share your experience.


00:00:58.760 --> 00:01:01.220
and we're gonna focus on a bunch of cool little tools


00:01:01.220 --> 00:01:03.420
and apps that you can plug into Django


00:01:03.420 --> 00:01:05.080
and make it better, make it do more,


00:01:05.080 --> 00:01:07.320
and do a lot of the Django things,


00:01:07.320 --> 00:01:08.620
you know, pull a few pieces together


00:01:08.620 --> 00:01:10.980
and make your app better without a lot of coding, right?


00:01:10.980 --> 00:01:12.680
- That's the idea.


00:01:12.680 --> 00:01:13.520
- Indeed.


00:01:13.520 --> 00:01:14.680
Before we get to all that though,


00:01:14.680 --> 00:01:16.820
let's just start with your background.


00:01:16.820 --> 00:01:19.320
How'd you get in programming and Python?


00:01:19.320 --> 00:01:23.800
- So I'm an old man, not punch card old,


00:01:23.800 --> 00:01:26.800
but single digit megahertz old.


00:01:26.800 --> 00:01:29.240
My dad worked for IBM.


00:01:29.240 --> 00:01:32.520
So my first computer was an IBM PC Junior.


00:01:32.520 --> 00:01:36.720
256 kilobytes of memory with the expansion card,


00:01:36.720 --> 00:01:39.600
no hard drive, five and a quarter floppy


00:01:39.600 --> 00:01:42.360
and 4.77 megahertz.


00:01:42.360 --> 00:01:44.480
And that second seven is really, really important.


00:01:44.480 --> 00:01:46.480
It made all the difference.


00:01:46.480 --> 00:01:47.320
I'm pretty sure the--


00:01:47.320 --> 00:01:49.280
- Did it have a turbo button?


00:01:49.280 --> 00:01:50.440
- Sorry?


00:01:50.440 --> 00:01:52.160
- Did it have a turbo button?


00:01:52.160 --> 00:01:53.000
- It did not.


00:01:53.000 --> 00:01:57.200
IBM did not, did not do that little bit of marketing stuff,


00:01:57.200 --> 00:02:01.600
but I'm pretty sure my USB charger has more processing power now.


00:02:01.600 --> 00:02:07.080
But all my friends had Commodores and so I couldn't trade pirated games with


00:02:07.080 --> 00:02:08.280
them cause that's what everyone did.


00:02:08.280 --> 00:02:13.480
And the box came with this kid friendly teach yourself basic book.


00:02:13.480 --> 00:02:15.640
And so that was kind of my intro.


00:02:15.640 --> 00:02:16.240
There was,


00:02:16.240 --> 00:02:18.600
I had one game and nothing else to do with the computer.


00:02:19.640 --> 00:02:24.640
And the first program I remember writing was a Batman logo,


00:02:24.640 --> 00:02:28.200
not copying it from a book, like on my own kind of thing.


00:02:28.200 --> 00:02:32.000
And so like the basic library had like draw arc


00:02:32.000 --> 00:02:34.760
and fill in yellow and it kind of clicked for me.


00:02:34.760 --> 00:02:39.760
And 30 years later, I was running a software department


00:02:39.760 --> 00:02:42.600
at a company that got acquired by a large firm


00:02:42.600 --> 00:02:43.880
who shall remain nameless.


00:02:43.880 --> 00:02:46.640
They just own all of your favorite movie franchises


00:02:46.640 --> 00:02:47.720
and have a rodent fronting it.


00:02:47.720 --> 00:02:49.460
I think you know who I'm talking about.


00:02:49.460 --> 00:02:52.700
And as part of that acquisition, the department got shut down,


00:02:52.700 --> 00:02:55.160
but we were asked to stick around to help with the transition.


00:02:55.160 --> 00:02:58.980
We had about two weeks worth of work to do, and we had six months to do it in.


00:02:58.980 --> 00:03:02.640
So I had a fair amount of spare time on my hands and I used that to pick up


00:03:02.640 --> 00:03:03.480
Python.


00:03:03.480 --> 00:03:07.940
And the first script I wrote in Python was,


00:03:07.940 --> 00:03:13.740
uh, that we had a photo sharing site and the due diligence of the transfer


00:03:13.740 --> 00:03:17.740
included looking for questionable content in that photo sharing site.


00:03:17.760 --> 00:03:20.800
and I had to, for the police investigation,


00:03:20.800 --> 00:03:23.440
go off and grab a whole bunch of stuff out of S3


00:03:23.440 --> 00:03:25.960
and download it that belonged to this one individual.


00:03:25.960 --> 00:03:27.280
So the script was kind of icky,


00:03:27.280 --> 00:03:30.560
but I was very, very impressed on how little code


00:03:30.560 --> 00:03:33.240
I had to write in comparison to previous languages.


00:03:33.240 --> 00:03:34.480
Part of that's Python itself,


00:03:34.480 --> 00:03:36.020
and part of it was just, you know,


00:03:36.020 --> 00:03:37.640
pip install, pip install, pip install,


00:03:37.640 --> 00:03:39.400
and it solved all these problems.


00:03:39.400 --> 00:03:41.160
And I've never looked back.


00:03:41.160 --> 00:03:44.460
It's been my primary language for almost 15 years now.


00:03:46.500 --> 00:03:48.420
- Yeah, what a good language, what a good choice.


00:03:48.420 --> 00:03:50.500
Who knew 15 years ago or 10 years ago


00:03:50.500 --> 00:03:52.260
or whenever we all got into it


00:03:52.260 --> 00:03:55.740
that it would be so incredibly popular?


00:03:55.740 --> 00:03:57.300
- Yeah, it's grown a lot.


00:03:57.300 --> 00:03:59.500
It's, yeah, it's really taken off.


00:03:59.500 --> 00:04:03.260
- I just saw an article, what was it called?


00:04:03.260 --> 00:04:07.460
The Unstoppable Programming Language


00:04:07.460 --> 00:04:09.940
or something like that from InfoWorld.


00:04:09.940 --> 00:04:13.360
And boy, I'll even pull it up.


00:04:16.220 --> 00:04:19.520
What an interesting situation where,


00:04:19.520 --> 00:04:21.440
you know, the subtitle of the article is


00:04:21.440 --> 00:04:23.420
Unstoppable Python, once again,


00:04:23.420 --> 00:04:26.020
ranked number one in the TOV index.


00:04:26.020 --> 00:04:28.180
Yeah.


00:04:28.180 --> 00:04:31.180
- It's the, I think it's the breadth of the libraries,


00:04:31.180 --> 00:04:34.340
right? Like most other languages, there's, you know,


00:04:34.340 --> 00:04:36.220
JavaScript is often at the top of that list,


00:04:36.220 --> 00:04:38.140
but it's only really for one purpose.


00:04:38.140 --> 00:04:39.620
It's for building web applications.


00:04:39.620 --> 00:04:41.180
And I know you can do other things in it


00:04:41.180 --> 00:04:43.740
and not trying to upset the internet,


00:04:43.740 --> 00:04:45.580
but with the data science behind it,


00:04:45.580 --> 00:04:47.340
- You're gonna get us email, Chris.


00:04:47.340 --> 00:04:48.380
- Oh yeah, I'm sure.


00:04:48.380 --> 00:04:50.900
Well, you'll get them email, I'll be long gone.


00:04:50.900 --> 00:04:51.740
So that's fine.


00:04:51.740 --> 00:04:57.220
With the data science side, with the ML side,


00:04:57.220 --> 00:04:59.660
with the, you can do things on the website, right?


00:04:59.660 --> 00:05:02.620
Like there's being number two in all of these areas


00:05:02.620 --> 00:05:05.260
very easily makes you number one overall, right?


00:05:05.260 --> 00:05:09.460
So it's, yeah, I think it's the breadth more than anything.


00:05:09.460 --> 00:05:10.540
- Yeah.


00:05:10.540 --> 00:05:14.460
You talked about how the company went out, was acquired


00:05:14.460 --> 00:05:18.180
had all this sort of time to kind of think about changes.


00:05:18.180 --> 00:05:22.780
I find times like that are really interesting ways


00:05:22.780 --> 00:05:27.380
to maybe refocus your career or to think about where you've


00:05:27.380 --> 00:05:29.380
been and where you might be going,


00:05:29.380 --> 00:05:31.100
maybe whether you should turn left or right


00:05:31.100 --> 00:05:33.300
or just keep going the way you are.


00:05:33.300 --> 00:05:36.420
I've had a few like that and those are some good


00:05:36.420 --> 00:05:38.500
opportunities to take if you can get them.


00:05:38.500 --> 00:05:41.820
- Yeah, it gives you a chance to experiment if nothing else.


00:05:41.820 --> 00:05:43.420
There was no pressure to pick up a language.


00:05:43.420 --> 00:05:46.920
I was a manager at the time, so there was no pressure at all, period.


00:05:46.920 --> 00:05:51.880
But yeah, it gives you the breathing room to go and play with a few things


00:05:51.880 --> 00:05:52.920
and get comfortable with it.


00:05:52.920 --> 00:05:57.080
And the next job I took was helping a small startup.


00:05:57.080 --> 00:06:01.960
And a manager comes to me and says, oh, pick the language, pick the stack.


00:06:01.960 --> 00:06:04.960
And I was like, OK, we'll do Python, we'll do Django.


00:06:04.960 --> 00:06:07.120
Then it sort of went from there.


00:06:07.120 --> 00:06:09.760
Yeah, good choice.


00:06:09.760 --> 00:06:10.320
How about now?


00:06:10.320 --> 00:06:11.760
What are you doing these days?


00:06:11.760 --> 00:06:15.080
So my marketing people tell me I'm supposed to call myself


00:06:15.080 --> 00:06:17.020
a fractional CTO.


00:06:17.020 --> 00:06:20.120
So I help organizations with technical decisions


00:06:20.120 --> 00:06:21.320
and software processes.


00:06:21.320 --> 00:06:23.600
So that's architecture, some coding,


00:06:23.600 --> 00:06:26.200
often it means nowadays the agile process stuff.


00:06:26.200 --> 00:06:28.100
So it's a bit of a mixed bag.


00:06:28.100 --> 00:06:30.860
Tend to specialize in trying to get small teams


00:06:30.860 --> 00:06:33.300
more efficient in some tech way,


00:06:33.300 --> 00:06:36.420
either the process or the learning itself.


00:06:36.420 --> 00:06:37.800
And because of the agile thing,


00:06:37.800 --> 00:06:39.640
I've done a fair amount of teaching


00:06:39.640 --> 00:06:41.520
'cause oftentimes when you're bootstrapping new teams,


00:06:41.520 --> 00:06:42.980
you gotta start out with Scrum 101


00:06:42.980 --> 00:06:44.240
and all that kind of good stuff.


00:06:44.240 --> 00:06:46.440
And that kind of led into the screencasting


00:06:46.440 --> 00:06:48.680
and online teaching world.


00:06:48.680 --> 00:06:51.320
So now I've done over 30 courses in Python


00:06:51.320 --> 00:06:52.800
and I'm still clicking along.


00:06:52.800 --> 00:06:57.520
So it's become this sort of side thing that I have


00:06:57.520 --> 00:07:01.100
that has blown up into its own thing.


00:07:01.100 --> 00:07:03.880
- Yeah, I can relate.


00:07:03.880 --> 00:07:04.720
I can definitely relate.


00:07:04.720 --> 00:07:05.560
That's awesome. - Yes.


00:07:05.560 --> 00:07:07.960
(laughing)


00:07:07.960 --> 00:07:09.160
- Well, cool.


00:07:09.160 --> 00:07:11.720
So part of that actually is,


00:07:11.720 --> 00:07:14.040
you and I just recently worked on a course


00:07:14.040 --> 00:07:16.700
for Talk Python Training, Django Getting Started,


00:07:16.700 --> 00:07:19.040
which there's been, it's a six hour course,


00:07:19.040 --> 00:07:21.640
people can check it out, there's a bunch of good stuff.


00:07:21.640 --> 00:07:23.320
We're not gonna really talk about that,


00:07:23.320 --> 00:07:26.120
but it kind of got me thinking like,


00:07:26.120 --> 00:07:28.540
hey, wouldn't it be great to just cover


00:07:28.540 --> 00:07:31.820
all the cool little things that you touch on here


00:07:31.820 --> 00:07:35.040
and then just in your other training.


00:07:35.040 --> 00:07:36.840
I guess people probably could reach out to you


00:07:36.840 --> 00:07:41.080
if they've got a team and they want to maybe help them shift gears,


00:07:41.080 --> 00:07:43.960
help them change technologies or change the way they're working?


00:07:43.960 --> 00:07:45.440
Sure.


00:07:45.440 --> 00:07:49.800
Always, always nice to have the pipeline full. So for sure.


00:07:49.800 --> 00:07:52.720
Indeed. Yeah. So, you know, you always,


00:07:52.720 --> 00:07:55.880
you might be brought into to do one thing like, Hey,


00:07:55.880 --> 00:08:00.000
help us do Django or help us change the way we're working with,


00:08:00.000 --> 00:08:03.240
sort of deploying our apps or whatever. But then there's like, Oh,


00:08:03.240 --> 00:08:04.400
but did you know about this tool?


00:08:04.400 --> 00:08:06.100
And have you tried this and wouldn't it be easier


00:08:06.100 --> 00:08:06.940
if you use that?


00:08:06.940 --> 00:08:10.320
And so how about we make that the next hour?


00:08:10.320 --> 00:08:12.880
- Yeah, and this kind of ties back to that,


00:08:12.880 --> 00:08:14.100
we were sort of talking about Python


00:08:14.100 --> 00:08:16.060
and the breadth of that, right?


00:08:16.060 --> 00:08:18.940
One of the reasons it's so easy to get a lot of things going


00:08:18.940 --> 00:08:20.400
is because there were so many libraries


00:08:20.400 --> 00:08:22.800
that have been there and done that.


00:08:22.800 --> 00:08:27.120
And I often, we're gonna talk about later,


00:08:27.120 --> 00:08:29.800
one of the ones that's sort of a catch-all.


00:08:29.800 --> 00:08:31.960
And every time I'm in there, I'm like, oh, oh wait,


00:08:31.960 --> 00:08:33.680
I need to remember that's in here.


00:08:33.680 --> 00:08:36.520
'cause I keep writing that code, right?


00:08:36.520 --> 00:08:37.880
So knowing that things are out there


00:08:37.880 --> 00:08:41.040
and finding this stuff can make a big difference


00:08:41.040 --> 00:08:42.960
in how little code you have to write.


00:08:42.960 --> 00:08:45.000
And it's always great when someone else has tested it


00:08:45.000 --> 00:08:47.480
because then not only are you not having to write it


00:08:47.480 --> 00:08:49.060
yourself, but it's probably more stable


00:08:49.060 --> 00:08:50.480
than the stuff that you're writing yourself.


00:08:50.480 --> 00:08:52.200
Or at least I'll speak for myself.


00:08:52.200 --> 00:08:54.600
More stable than my code. - Yeah, yeah, yeah, for sure.


00:08:54.600 --> 00:08:56.800
Well, I think, you know, people who are getting


00:08:56.800 --> 00:08:59.200
into programming think about what is an expert?


00:08:59.200 --> 00:09:02.640
An expert is somebody who could write these crazy algorithms


00:09:02.640 --> 00:09:06.680
or implement this wild file processing stuff from scratch.


00:09:06.680 --> 00:09:09.140
And that somewhat is true,


00:09:09.140 --> 00:09:11.700
but more often the expert is the person


00:09:11.700 --> 00:09:13.660
that knows they can pip install this other thing


00:09:13.660 --> 00:09:14.980
and not have to write that.


00:09:14.980 --> 00:09:17.260
You know, they're like, "Oh, these libraries exist.


00:09:17.260 --> 00:09:19.740
And I know they'll work in this situation.


00:09:19.740 --> 00:09:20.660
I don't need to do this."


00:09:20.660 --> 00:09:23.220
Right? So yeah.


00:09:23.220 --> 00:09:24.060
- Once you've written it.


00:09:24.060 --> 00:09:25.940
- It's both the power, but it's also really like


00:09:25.940 --> 00:09:27.760
knowing Python, I think knowing Python


00:09:27.760 --> 00:09:30.420
is partly knowing the libraries


00:09:30.420 --> 00:09:32.060
outside of just the language.


00:09:32.060 --> 00:09:37.060
I would say more than partly like picking up a new language is if you've done a


00:09:37.060 --> 00:09:40.120
few before and it's in the same vein, although you know,


00:09:40.120 --> 00:09:43.700
all the grandchildren of C based languages, it's like, okay, so how do they,


00:09:43.700 --> 00:09:46.580
what's variable assignment look like? What, what does for loops look like?


00:09:46.580 --> 00:09:49.660
Once you've done that, you know, a few days later you're ready to go.


00:09:49.660 --> 00:09:53.620
Knowing the depth of what's out there so that you don't have to write it,


00:09:53.620 --> 00:09:56.860
that takes forever. Right. So, you know, there's,


00:09:56.860 --> 00:10:00.880
there's language expertise within months. There's library expertise,


00:10:00.880 --> 00:10:03.620
which is years and is constantly changing too.


00:10:03.620 --> 00:10:04.940
- It's nonstop.


00:10:04.940 --> 00:10:06.500
It's like, you can't learn them as quickly


00:10:06.500 --> 00:10:08.000
as they come out really,


00:10:08.000 --> 00:10:09.240
especially if you're in JavaScript.


00:10:09.240 --> 00:10:10.560
That's another story.


00:10:10.560 --> 00:10:12.740
Yeah, I saw a funny t-shirt that said,


00:10:12.740 --> 00:10:15.420
"I learned Python, it was a great weekend."


00:10:15.420 --> 00:10:18.200
And that's true, right?


00:10:18.200 --> 00:10:20.640
But on the other, you'll compare and contrast that


00:10:20.640 --> 00:10:22.560
to like, I feel like I've been doing this forever


00:10:22.560 --> 00:10:25.060
and I'm still learning every single day.


00:10:25.060 --> 00:10:25.900
- Yep.


00:10:25.900 --> 00:10:27.340
- How do you square those two things, right?


00:10:27.340 --> 00:10:29.920
It's a lot largely what you just said.


00:10:29.920 --> 00:10:31.700
Yeah. All right.


00:10:31.700 --> 00:10:36.000
So we're going to talk about a bunch of different topics.


00:10:36.000 --> 00:10:37.440
We'll see what the final number is.


00:10:37.440 --> 00:10:40.640
17-ish different libraries,


00:10:40.640 --> 00:10:44.320
some of them directly pluggable into Django


00:10:44.320 --> 00:10:45.340
for specific things,


00:10:45.340 --> 00:10:47.940
and some of them just really helpful for Django.


00:10:47.940 --> 00:10:50.080
So you want to kick us off with the first one here?


00:10:50.080 --> 00:10:52.200
- Yeah. So there's sort of two groups.


00:10:52.200 --> 00:10:54.080
And the first group of things that we're going to talk about


00:10:54.080 --> 00:10:57.760
are libraries that any project of a reasonable size


00:10:57.760 --> 00:10:58.760
should consider using.


00:10:58.760 --> 00:10:59.760
So these are, like you said,


00:10:59.760 --> 00:11:01.080
these aren't the Django specific stuff.


00:11:01.080 --> 00:11:03.160
And then we'll get through a few of those


00:11:03.160 --> 00:11:04.680
and then we'll get into the actual,


00:11:04.680 --> 00:11:06.520
this you should use this for Django.


00:11:06.520 --> 00:11:08.840
So this first one that you've got up on the screen there,


00:11:08.840 --> 00:11:10.240
this is coverage.


00:11:10.240 --> 00:11:13.280
This measures how much of your code gets run


00:11:13.280 --> 00:11:15.660
when you run your code.


00:11:15.660 --> 00:11:18.520
So it's typically used for your user tests.


00:11:18.520 --> 00:11:20.320
And what you're trying to figure out is


00:11:20.320 --> 00:11:23.920
how much of your code has been exercised


00:11:23.920 --> 00:11:25.720
when you run your tests.


00:11:25.720 --> 00:11:28.800
So it has sub commands, one of which is run


00:11:28.800 --> 00:11:31.140
and you basically hand it any script


00:11:31.140 --> 00:11:34.120
and it will give you a output listing


00:11:34.120 --> 00:11:37.520
of what it saw as it went along.


00:11:37.520 --> 00:11:40.480
That output listing is like a file by file listing


00:11:40.480 --> 00:11:42.320
and shows you like a percentage mark that says,


00:11:42.320 --> 00:11:45.240
oh, you know, 30% or 50% or whatever of this file


00:11:45.240 --> 00:11:46.720
got executed in your run.


00:11:46.720 --> 00:11:52.000
And then there's a couple other commands that you can run


00:11:52.000 --> 00:11:54.840
that will combine all this information into a report


00:11:54.840 --> 00:11:57.280
and the report is spit out in HTML.


00:11:57.280 --> 00:12:00.400
And that gives you a fully annotated list of your code.


00:12:00.400 --> 00:12:02.840
So you can go in and see, oh, there's the red line.


00:12:02.840 --> 00:12:04.740
That's a line that didn't get triggered.


00:12:04.740 --> 00:12:07.000
So often I find when I'm writing tests,


00:12:07.000 --> 00:12:11.240
it's usually fairly easy to get the easy path through,


00:12:11.240 --> 00:12:12.080
right?


00:12:12.080 --> 00:12:13.000
You're not thinking about the errors or whatever.


00:12:13.000 --> 00:12:14.320
You just heard, oh, I exercised it.


00:12:14.320 --> 00:12:16.600
And then you go, oh, I've only got 75%.


00:12:16.600 --> 00:12:18.480
Well, finding if you want that,


00:12:18.480 --> 00:12:20.600
you want to have something higher than that.


00:12:20.600 --> 00:12:22.080
You go in, you look at the report and you go,


00:12:22.080 --> 00:12:24.000
oh, that red line is that error condition.


00:12:24.000 --> 00:12:27.360
I need to add a test to make sure that that error condition is handled properly.


00:12:27.360 --> 00:12:32.960
So I often take this one and then write a little bash script that does this,


00:12:32.960 --> 00:12:35.280
runs my tests, and then runs a linter afterwards.


00:12:35.280 --> 00:12:37.920
So it's my little check-in hook, right?


00:12:37.920 --> 00:12:42.400
So just before I do a push, it'll go off and run all my tests and give me coverage.


00:12:42.400 --> 00:12:45.280
And if I don't like the numbers, then I go off and fix it some more.


00:12:45.280 --> 00:12:49.600
- I think when you're learning about testing,


00:12:49.600 --> 00:12:53.280
it's important to test the happy path,


00:12:53.280 --> 00:12:57.740
But that's the one that is often kind of obvious, right?


00:12:57.740 --> 00:13:01.080
It's you're going to know right away if that thing is broken,


00:13:01.080 --> 00:13:02.620
but it's those edge cases.


00:13:02.620 --> 00:13:07.380
What if I put a string into this input where, you know,


00:13:07.380 --> 00:13:10.340
a number like the word seven versus the number seven?


00:13:10.340 --> 00:13:14.560
Is that a 500 server error or is that a sorry invalid data


00:13:14.560 --> 00:13:17.220
ideally even caught on the client side


00:13:17.220 --> 00:13:19.940
with HTML5 validation or something, right?


00:13:19.940 --> 00:13:22.860
Those kinds of things are really hard to think about


00:13:22.860 --> 00:13:25.920
and coverage really points out, you know what?


00:13:25.920 --> 00:13:28.680
All the parts that are red, that are uncovered,


00:13:28.680 --> 00:13:31.360
those are the error handling or the guarding clauses


00:13:31.360 --> 00:13:35.360
or the other cases where you're not normally


00:13:35.360 --> 00:13:36.720
gonna run into them, so you really need


00:13:36.720 --> 00:13:38.440
to have a test to check them.


00:13:38.440 --> 00:13:39.600
- Yeah, that's right.


00:13:39.600 --> 00:13:41.200
I'm also, independent of coverage,


00:13:41.200 --> 00:13:44.300
I'm also a big fan of when bugs show up.


00:13:44.300 --> 00:13:48.760
I'm not a pure TDD guy until bugs show up.


00:13:48.760 --> 00:13:51.360
So when the bug shows up, I go and write the test


00:13:51.360 --> 00:13:54.160
that triggers the bug and then I fix it


00:13:54.160 --> 00:13:56.760
'cause then I'm adding to my regression test as well.


00:13:56.760 --> 00:13:58.620
So that's also one that to your point,


00:13:58.620 --> 00:14:01.260
it's those weird conditions that you didn't even think of.


00:14:01.260 --> 00:14:04.580
And coverage, because it is only line-based,


00:14:04.580 --> 00:14:08.460
you can get into trouble where the first part of an if clause


00:14:08.460 --> 00:14:10.500
passes and the second part doesn't.


00:14:10.500 --> 00:14:12.720
And so it's green, it looks like it's happy,


00:14:12.720 --> 00:14:14.300
but that doesn't mean you don't have a bug.


00:14:14.300 --> 00:14:16.280
So there's always this mix and go,


00:14:16.280 --> 00:14:18.960
but coverage can help you find this stuff


00:14:18.960 --> 00:14:21.920
the first time through if you're looking.


00:14:21.920 --> 00:14:23.880
- Yeah, I'm definitely not a purist,


00:14:23.880 --> 00:14:25.400
TDD purist myself either.


00:14:25.400 --> 00:14:29.000
I find there's, tests add a lot of value,


00:14:29.000 --> 00:14:30.840
but there's also a practical,


00:14:30.840 --> 00:14:32.160
I just gotta get some stuff done


00:14:32.160 --> 00:14:34.080
and I don't need to like retest everything.


00:14:34.080 --> 00:14:34.920
It'll--


00:14:34.920 --> 00:14:37.020
- Only so many hours in the day, yes.


00:14:37.020 --> 00:14:40.800
- Exactly, but I do like this idea of like,


00:14:40.800 --> 00:14:42.600
once you've found a bug,


00:14:42.600 --> 00:14:44.360
if you can reproduce it with a test,


00:14:44.360 --> 00:14:46.800
you kind of pin it down so you don't play whack-a-mole


00:14:46.800 --> 00:14:48.240
and have it ever come back.


00:14:48.240 --> 00:14:50.440
- Yep, exactly. - Yep, yeah.


00:14:50.440 --> 00:14:53.240
Kind of related to this whole part of the conversation,


00:14:53.240 --> 00:14:55.600
Anthony in the audience asks,


00:14:55.600 --> 00:14:58.320
he's interested to know how best to test


00:14:58.320 --> 00:15:00.440
Django web apps with pytest.


00:15:00.440 --> 00:15:03.720
Feels that there ought to be ready-made recipes for this


00:15:03.720 --> 00:15:06.080
given how opinionated Django is.


00:15:06.080 --> 00:15:07.480
Do you got any thoughts on that?


00:15:07.480 --> 00:15:09.680
- I don't actually use pytest myself.


00:15:09.680 --> 00:15:13.640
So I'm only vaguely familiar with it.


00:15:13.640 --> 00:15:14.880
There are some recipes out there.


00:15:14.880 --> 00:15:19.200
I know there are Django apps that you can install


00:15:19.200 --> 00:15:22.880
that will help you and have pre-canned with the recipes.


00:15:22.880 --> 00:15:26.360
Django is fairly robust itself.


00:15:26.360 --> 00:15:28.160
It builds a whole bunch of things on top


00:15:28.160 --> 00:15:32.400
of the unit test framework that is very Django specific.


00:15:32.400 --> 00:15:36.020
And it allows you to shortcut the web as well.


00:15:36.020 --> 00:15:38.440
So you can access the views directly,


00:15:38.440 --> 00:15:40.360
which means you don't have to worry about


00:15:40.360 --> 00:15:42.400
like a lot of JavaScript and things like that.


00:15:42.400 --> 00:15:45.080
And it also has a live server mode,


00:15:45.080 --> 00:15:47.560
which I was playing with this afternoon, actually,


00:15:47.560 --> 00:15:49.740
which runs a server so that you can run things


00:15:49.740 --> 00:15:50.980
like Selenium on top of it.


00:15:50.980 --> 00:15:55.360
So there's a fairly rich set of mechanisms in there


00:15:55.360 --> 00:15:57.200
for Django to begin with.


00:15:57.200 --> 00:15:59.240
From what I understand of the pytest library,


00:15:59.240 --> 00:16:02.520
it really just sort of makes some of those hooks easier


00:16:02.520 --> 00:16:04.840
and exposes them rather than introducing


00:16:04.840 --> 00:16:07.740
a lot of extra functionality.


00:16:07.740 --> 00:16:09.520
- For sure.


00:16:09.520 --> 00:16:12.720
Wouldn't you know that there's an awesome Django list?


00:16:12.720 --> 00:16:15.680
And it happens to be done by Will Benson.


00:16:15.680 --> 00:16:19.640
In here, there's a whole section on testing.


00:16:19.640 --> 00:16:22.320
Oh, it's right there.


00:16:22.320 --> 00:16:26.960
And you've got some pytest Django.


00:16:26.960 --> 00:16:30.560
You've got Factory Boy for test fixture replacements.


00:16:30.560 --> 00:16:32.640
A feature flipper, Django waffle.


00:16:32.640 --> 00:16:34.960
That's kind of an interesting name.


00:16:34.960 --> 00:16:38.620
model bakery for creating, I'm guessing,


00:16:38.620 --> 00:16:42.440
the ORM models in interesting ways.


00:16:42.440 --> 00:16:45.860
And yeah, people can check this out.


00:16:45.860 --> 00:16:47.980
Another related question, Nick asks,


00:16:47.980 --> 00:16:50.680
I'd like to hear opinions on mocking the ORM database


00:16:50.680 --> 00:16:53.080
when testing versus actually using the database.


00:16:53.080 --> 00:16:57.220
I don't know how you feel about this, Chris.


00:16:57.220 --> 00:17:00.740
- I don't tend to mock unless I absolutely have to.


00:17:00.740 --> 00:17:03.400
I usually mock for things like,


00:17:03.400 --> 00:17:05.120
oh, we have to do something with dates


00:17:05.120 --> 00:17:08.200
and that dates and times always cause problem


00:17:08.200 --> 00:17:10.260
'cause you're running the test now.


00:17:10.260 --> 00:17:15.680
For the ORM, I tend to just use tests straight into the ORM.


00:17:15.680 --> 00:17:18.560
Django comes with a lot of mechanisms like fixtures


00:17:18.560 --> 00:17:20.800
that allow you to push things into the database.


00:17:20.800 --> 00:17:24.200
And the test suite automatically will install those fixtures


00:17:24.200 --> 00:17:26.900
and wraps each test in transactions.


00:17:26.900 --> 00:17:29.480
So it does it and then undoes what you did.


00:17:29.480 --> 00:17:31.240
So you're always in a known good state


00:17:31.240 --> 00:17:33.700
at the beginning of each one of your functions.


00:17:33.700 --> 00:17:35.480
So I haven't really come across a case


00:17:35.480 --> 00:17:38.360
where I really need to mock out the ORM.


00:17:38.360 --> 00:17:43.100
I would guess there's probably a argument about speed there,


00:17:43.100 --> 00:17:47.100
but I tend to get around that


00:17:47.100 --> 00:17:49.180
with things like tagging my tests.


00:17:49.180 --> 00:17:51.660
So I will tag much that are like the smoke tests,


00:17:51.660 --> 00:17:52.980
the quick one pass through.


00:17:52.980 --> 00:17:56.560
And if I need like a really fast test to run on say check-in


00:17:56.560 --> 00:17:59.940
then use a smoke tag and then let the regression run


00:17:59.940 --> 00:18:01.580
overnight if I have to or whatever.


00:18:01.580 --> 00:18:03.480
So I haven't come across the need


00:18:03.480 --> 00:18:06.740
for mocking it out yet myself.


00:18:06.740 --> 00:18:09.020
- Yeah, and you can use SQLite


00:18:09.020 --> 00:18:11.540
with an in-memory database model as well.


00:18:11.540 --> 00:18:13.660
And just as started the whole test run,


00:18:13.660 --> 00:18:15.500
you could fill that in-memory version up


00:18:15.500 --> 00:18:18.340
with known good test data.


00:18:18.340 --> 00:18:20.580
The transactions will kind of roll it back each time, right?


00:18:20.580 --> 00:18:24.300
And so just let it rip on SQLite in memory


00:18:24.300 --> 00:18:28.420
and then disappear into the ether of RAM.


00:18:28.420 --> 00:18:33.660
Yeah, yeah, it's it tends to be unless you're doing huge amounts of work.


00:18:33.660 --> 00:18:35.260
It tends to be pretty peppy.


00:18:35.260 --> 00:18:38.500
Yeah, it's sure.


00:18:38.500 --> 00:18:40.500
Yeah. And you can choose how much data you put in it, right?


00:18:40.500 --> 00:18:41.660
So you can


00:18:41.660 --> 00:18:44.500
chill out on that. All right.


00:18:44.500 --> 00:18:48.340
The next thing kind of related to that is pie flakes.


00:18:48.340 --> 00:18:51.280
So I mentioned at the end of that.


00:18:51.280 --> 00:18:52.080
Yeah, go ahead, Chris.


00:18:52.080 --> 00:18:54.180
I mentioned at the end of that that I often use a winter.


00:18:54.180 --> 00:18:56.580
This is the one that I tend to go to.


00:18:56.580 --> 00:18:58.740
PyFlakes is a little--


00:18:58.740 --> 00:19:01.780
it is code-focused rather than style-focused.


00:19:01.780 --> 00:19:05.020
So when I first started linting Python,


00:19:05.020 --> 00:19:06.580
a lot of the code I was maintaining


00:19:06.580 --> 00:19:08.980
was not PEP 8 compliant.


00:19:08.980 --> 00:19:11.860
And we'd run the linters, and they were just constantly


00:19:11.860 --> 00:19:13.580
screaming about everything.


00:19:13.580 --> 00:19:17.180
PyFlakes was like a nice little happy medium for us.


00:19:17.180 --> 00:19:20.900
It runs using the abstract syntax trees,


00:19:20.900 --> 00:19:23.140
which mean it doesn't actually load the modules, which


00:19:23.140 --> 00:19:24.260
is good, because that means you're not


00:19:24.260 --> 00:19:26.660
having to do the side effects of your actual code.


00:19:26.660 --> 00:19:29.860
And I usually use it for things like finding unused imports


00:19:29.860 --> 00:19:32.340
and weird variables and things like that.


00:19:32.340 --> 00:19:34.180
The other place is I find if I've


00:19:34.180 --> 00:19:37.100
made a lot of changes across a whole bunch of files,


00:19:37.100 --> 00:19:39.180
running PyFlex before I run my tests,


00:19:39.180 --> 00:19:40.980
it's a bit of an idiot check.


00:19:40.980 --> 00:19:42.860
So the things that don't compile or whatever,


00:19:42.860 --> 00:19:45.500
it'll go through and run everything once for you.


00:19:45.500 --> 00:19:48.480
And it seems I find it faster to do that than, say,


00:19:48.480 --> 00:19:50.460
run all my tests first.


00:19:50.460 --> 00:19:51.020
>>Sure.


00:19:51.020 --> 00:19:53.900
This is kind of like a compiler.


00:19:53.900 --> 00:19:57.600
and compiled languages, C++, C#, whatever,


00:19:57.600 --> 00:19:59.340
you press compile and there's a,


00:19:59.340 --> 00:20:02.080
how does it all hang together sort of check


00:20:02.080 --> 00:20:04.280
that the system has to go through as a static language.


00:20:04.280 --> 00:20:06.200
And we don't have that.


00:20:06.200 --> 00:20:07.360
Even if you put type hints,


00:20:07.360 --> 00:20:10.800
that's a hint, not a requirement for accuracy.


00:20:10.800 --> 00:20:13.800
And so not saying that this does, you know,


00:20:13.800 --> 00:20:15.360
type validation like mypy,


00:20:15.360 --> 00:20:17.320
but it makes sure that your code


00:20:17.320 --> 00:20:19.520
at least somewhat hangs together, right?


00:20:19.520 --> 00:20:21.720
- Yeah, it's a sanity checking, yeah.


00:20:23.400 --> 00:20:24.240
- Absolutely.


00:20:24.240 --> 00:20:25.840
- And there's a version of this,


00:20:25.840 --> 00:20:28.080
if you wanna dig down into it,


00:20:28.080 --> 00:20:29.600
that is called Flake 8,


00:20:29.600 --> 00:20:32.000
that combines PyFlakes with PEP 8.


00:20:32.000 --> 00:20:33.880
So if you wanna get all anal retentive


00:20:33.880 --> 00:20:37.240
about the code cleaning and all the rest of that,


00:20:37.240 --> 00:20:38.200
you can dig into that.


00:20:38.200 --> 00:20:39.520
And essentially it's just called


00:20:39.520 --> 00:20:42.080
the same kind of commands after it.


00:20:42.080 --> 00:20:45.040
Also has a nice little,


00:20:45.040 --> 00:20:46.500
one of the things I always look for in a linter


00:20:46.500 --> 00:20:49.080
is the pragma that says ignore this line,


00:20:49.080 --> 00:20:50.680
so that you can turn off the noise


00:20:50.680 --> 00:20:51.920
'cause every once in a while,


00:20:51.920 --> 00:20:54.500
there's gonna be something that you want it to ignore.


00:20:54.500 --> 00:20:56.880
And I find as soon as you've got warnings popping up


00:20:56.880 --> 00:21:00.300
in your code, it starts to become broken window theory.


00:21:00.300 --> 00:21:01.920
Right? Like, oh, there's a warning there.


00:21:01.920 --> 00:21:03.160
Oh, now there's two warnings there.


00:21:03.160 --> 00:21:04.200
Now there's three warnings there.


00:21:04.200 --> 00:21:05.880
And the next thing you know, you've got a hundred warnings


00:21:05.880 --> 00:21:07.120
and nobody's doing anything about them.


00:21:07.120 --> 00:21:07.960
So I like to try-


00:21:07.960 --> 00:21:10.600
- That's exactly the analogy I was thinking as well.


00:21:10.600 --> 00:21:12.360
And that's the way it is.


00:21:12.360 --> 00:21:15.060
'Cause especially in a team situation,


00:21:15.060 --> 00:21:20.000
there's some people who really bought into like CI


00:21:20.000 --> 00:21:20.820
and that kind of stuff.


00:21:20.820 --> 00:21:24.300
other people who are not really that interested and worried


00:21:24.300 --> 00:21:26.780
whether the test still passed or worried about whether the


00:21:26.780 --> 00:21:30.780
linters pass and they're just going to go along. But


00:21:30.780 --> 00:21:34.680
certainly if that kind of stuff starts showing up, they're like,


00:21:34.680 --> 00:21:37.920
well, if it's already got warnings, I don't care about one


00:21:37.920 --> 00:21:38.500
more, you know?


00:21:38.500 --> 00:21:42.260
Yeah, yeah. So zero warnings policy is pretty good. And this


00:21:42.260 --> 00:21:44.820
kind of thing helps you find that and check it easily.


00:21:44.820 --> 00:21:49.260
Right. So for people who are listening, you just put hash for


00:21:49.260 --> 00:21:55.260
comment flake8 colon no QA on a line and then it'll skip that line. You know


00:21:55.260 --> 00:22:00.340
there's times when you get advice that in general is good advice like try


00:22:00.340 --> 00:22:05.540
accept pass or something like that you should never do that except for


00:22:05.540 --> 00:22:09.860
sometimes in little weird situations you're like no I really just need this


00:22:09.860 --> 00:22:14.820
to not care if there's an error and just keep going and we're just you know stuff


00:22:14.820 --> 00:22:18.220
And you'll be stuck with this permanent warning.


00:22:18.220 --> 00:22:19.620
This file has an error.


00:22:19.620 --> 00:22:21.140
You're catching too broad of an exception.


00:22:21.140 --> 00:22:23.860
You're like, in general, yes, but right now I don't care.


00:22:23.860 --> 00:22:24.820
I accept that.


00:22:24.820 --> 00:22:26.740
Let's just keep going together.


00:22:26.740 --> 00:22:28.660
And this kind of stuff really is great


00:22:28.660 --> 00:22:30.260
for making those warnings go away.


00:22:30.260 --> 00:22:33.280
- Well, and you can tie it into your PR process as well.


00:22:33.280 --> 00:22:36.360
So if I'm doing a poll review for something you've done


00:22:36.360 --> 00:22:38.540
where you've put this, we can have a policy that says


00:22:38.540 --> 00:22:39.940
there better be a comment above it


00:22:39.940 --> 00:22:42.420
that explains why you're allowed to ignore it


00:22:42.420 --> 00:22:43.240
in this session.


00:22:43.240 --> 00:22:46.160
becomes sort of two kinds of flag.


00:22:46.160 --> 00:22:48.880
It's a flag for PyFlakes and it's also a flag


00:22:48.880 --> 00:22:50.000
for your code reviewer to go,


00:22:50.000 --> 00:22:53.680
oh, we should explain why, you know, is this a valid case?


00:22:53.680 --> 00:22:54.500
Oh yes, we do.


00:22:54.500 --> 00:22:56.400
This is the generic.


00:22:56.400 --> 00:22:58.680
So let's put a comment that says, yes, we meant to do this


00:22:58.680 --> 00:23:01.580
rather than I was just too lazy to fix it.


00:23:01.580 --> 00:23:02.720
- Yeah, that's a really good point.


00:23:02.720 --> 00:23:04.520
Actually, I like that a lot.


00:23:04.520 --> 00:23:06.440
All right, onto another.


00:23:06.440 --> 00:23:09.880
Sphinx, the Python documentation generator.


00:23:09.880 --> 00:23:13.480
- Yeah, so this is a sort of bit of a left turn here.


00:23:13.480 --> 00:23:16.800
I will admit I am obsessive compulsive


00:23:16.800 --> 00:23:19.060
when it comes to comments and documentation.


00:23:19.060 --> 00:23:21.640
I did co-op in university,


00:23:21.640 --> 00:23:24.520
which is what I think they call paid internships in the US.


00:23:24.520 --> 00:23:27.880
And my third co-op term was with the same department


00:23:27.880 --> 00:23:29.360
as my second.


00:23:29.360 --> 00:23:31.960
And the first day back into the office,


00:23:31.960 --> 00:23:33.080
I said hello to everyone.


00:23:33.080 --> 00:23:33.920
And then my boss says,


00:23:33.920 --> 00:23:35.880
"Hey, there's a bug in the code you wrote last term,


00:23:35.880 --> 00:23:37.360
go fix it."


00:23:37.360 --> 00:23:39.480
And if my name had not been at the top of the commit,


00:23:39.480 --> 00:23:41.680
I would have sworn this was written by somebody else.


00:23:41.680 --> 00:23:43.540
The code was just hideous.


00:23:43.540 --> 00:23:45.860
And this is where I learned the whole comments


00:23:45.860 --> 00:23:47.720
are for other people is only half right.


00:23:47.720 --> 00:23:50.860
Sometimes you're that other person like eight months later.


00:23:50.860 --> 00:23:56.300
Yeah, so I've become very, very retentive about it.


00:23:56.300 --> 00:23:59.900
And so what Sphinx is, is a mechanism


00:23:59.900 --> 00:24:02.420
for taking your PyDoc comments


00:24:02.420 --> 00:24:04.980
and turning it into documentation.


00:24:04.980 --> 00:24:08.060
And so if you were writing your comments already,


00:24:08.060 --> 00:24:10.600
it gives you a couple little formatting tags


00:24:10.600 --> 00:24:11.940
that you should take advantage of.


00:24:11.940 --> 00:24:13.140
But once you've done that,


00:24:13.140 --> 00:24:14.680
it isn't really much more effort


00:24:14.680 --> 00:24:16.540
than just say writing the comment.


00:24:16.540 --> 00:24:18.300
And then you can write this script


00:24:18.300 --> 00:24:20.820
and it will spit out documentation.


00:24:20.820 --> 00:24:24.360
It's based on a restructured text format.


00:24:24.360 --> 00:24:26.120
So that's the .RST file,


00:24:26.120 --> 00:24:29.340
which is similar to Markdown if you're used to that.


00:24:29.340 --> 00:24:33.580
And it includes thing, you can do basic type setting


00:24:33.580 --> 00:24:36.620
like bolding and that kind of stuff, tables.


00:24:36.620 --> 00:24:40.120
But one of the things I find I use a lot is you can...


00:24:40.120 --> 00:24:46.260
highlight references to other parts of your code.


00:24:46.260 --> 00:24:49.860
So if I've got a class that I'm using here,


00:24:49.860 --> 00:24:51.380
an object that is some sort of class,


00:24:51.380 --> 00:24:53.820
if I note it properly in the comment,


00:24:53.820 --> 00:24:56.340
when the documentation is created, I can click a link


00:24:56.340 --> 00:24:57.780
and it'll take me through to it.


00:24:57.780 --> 00:25:00.980
So you can always find the cross-references.


00:25:00.980 --> 00:25:01.820
It generates...


00:25:01.820 --> 00:25:02.660
- Fantastic.


00:25:02.660 --> 00:25:05.980
- It generates all sorts of different kinds of output.


00:25:05.980 --> 00:25:07.740
personally only ever use the HTML,


00:25:07.740 --> 00:25:10.020
but it does EPUB, man pages,


00:25:10.020 --> 00:25:11.940
LaTeX if you wanna spit out some PDF


00:25:11.940 --> 00:25:14.300
and some other things as well.


00:25:14.300 --> 00:25:17.180
Comes with a sort of a quick start command


00:25:17.180 --> 00:25:20.740
that builds all your cookie cutter files for what you need.


00:25:20.740 --> 00:25:26.660
And it also allows you to intermix in general RST files.


00:25:26.660 --> 00:25:30.860
So if you want to write, say a how-to guide


00:25:30.860 --> 00:25:31.860
separate from your code,


00:25:31.860 --> 00:25:34.940
but then suck in some documentation from your code,


00:25:34.940 --> 00:25:36.880
it allows you to mix and match that.


00:25:36.880 --> 00:25:37.720
So as an example--


00:25:37.720 --> 00:25:39.760
- So a tutorial or installing or something like that.


00:25:39.760 --> 00:25:40.600
- Exactly, yeah.


00:25:40.600 --> 00:25:42.560
So I often will write,


00:25:42.560 --> 00:25:44.520
although Markdown is the most common format


00:25:44.520 --> 00:25:46.400
for the README file on GitHub,


00:25:46.400 --> 00:25:48.680
I use README.RST.


00:25:48.680 --> 00:25:51.860
And the reason I do that is because I usually use


00:25:51.860 --> 00:25:56.180
that same README file as the intro file in my Sphinx doc.


00:25:56.180 --> 00:26:00.000
So I essentially just say, oh, go grab that README.RST,


00:26:00.000 --> 00:26:02.280
pull it in here as the title page,


00:26:02.280 --> 00:26:05.080
add a little table of contents flag on the bottom of it.


00:26:05.080 --> 00:26:08.040
And the next thing you know, you've got some documentation.


00:26:08.040 --> 00:26:10.520
- So yeah, that's really fantastic.


00:26:10.520 --> 00:26:15.520
And when you can get your work to multiply automatically.


00:26:15.520 --> 00:26:18.780
- Yeah, and obviously, you've got to have been


00:26:18.780 --> 00:26:21.120
in the habit of doing this kind of stuff anyways,


00:26:21.120 --> 00:26:24.840
but if you were adding a little bit of a rigor


00:26:24.840 --> 00:26:27.400
to how you're writing the comments helps a lot.


00:26:27.400 --> 00:26:30.280
And I find particularly with things like APIs, right?


00:26:30.280 --> 00:26:32.500
'cause you should be writing that doc string anyways


00:26:32.500 --> 00:26:34.020
that says this is what the call is,


00:26:34.020 --> 00:26:36.080
these are the parameters and what they mean,


00:26:36.080 --> 00:26:38.300
and it turns all that into a PDF document


00:26:38.300 --> 00:26:41.100
that you can hand off to managers or whatever,


00:26:41.100 --> 00:26:44.420
put up on your webpage or however you like to do that.


00:26:44.420 --> 00:26:47.780
- Yeah, and for those who are not a fan


00:26:47.780 --> 00:26:52.780
of restructured text, there's the Mist MYST Markdown version


00:26:52.780 --> 00:26:56.720
or a plugin, so you can do Markdown as well these days.


00:26:56.720 --> 00:26:58.420
- I have to check that out,


00:26:58.420 --> 00:27:00.100
I haven't played with that one yet.


00:27:00.100 --> 00:27:01.740
- Yeah, yeah, it's pretty neat.


00:27:01.740 --> 00:27:04.060
You can even do inline restructured text


00:27:04.060 --> 00:27:05.220
within your markdowns.


00:27:05.220 --> 00:27:06.580
You're like markdown, markdown,


00:27:06.580 --> 00:27:08.980
oh, I need something a little bit more complicated.


00:27:08.980 --> 00:27:10.800
There's a way, I don't remember what the syntax is,


00:27:10.800 --> 00:27:14.500
but there's a way to inline a little restructured text.


00:27:14.500 --> 00:27:15.580
- Excellent. - And then fall back


00:27:15.580 --> 00:27:16.420
to markdown, yeah.


00:27:16.420 --> 00:27:20.020
- And then embed your HTML inside of your restructured text


00:27:20.020 --> 00:27:21.220
inside of your markdown.


00:27:21.220 --> 00:27:23.300
It's turtles all the way down, excellent.


00:27:23.300 --> 00:27:24.660
- Absolutely.


00:27:24.660 --> 00:27:28.380
- The other thing, there are companion plugins


00:27:28.380 --> 00:27:29.860
for this as well.


00:27:29.860 --> 00:27:33.940
So one of the other libraries that I use is something called a Sphinx RTD theme,


00:27:33.940 --> 00:27:37.900
which is a read the docs style theme and plugs right in.


00:27:37.900 --> 00:27:43.300
And essentially it allows you to generate your HTML looking like the read the


00:27:43.300 --> 00:27:47.100
docs site. And if you combine that with a get hook into read the docs,


00:27:47.100 --> 00:27:50.340
a your read the docs will get automatically updated every single time you do


00:27:50.340 --> 00:27:53.220
your pushup to get so nice little combination.


00:27:53.220 --> 00:27:55.100
Yeah, that's very cool.


00:27:55.100 --> 00:27:59.420
I do find it sort of meta that the Sphinx read the docs theme is hosted on read


00:27:59.440 --> 00:28:12.320
docs. Yes. So fun. All right. PUDB. Is that the right? I have no idea how you're supposed


00:28:12.320 --> 00:28:15.440
to pronounce it. I always say PUDB, but that's fine.


00:28:15.440 --> 00:28:20.960
Well, I do feel like a lot of these projects like this one, if you have too much of an


00:28:20.960 --> 00:28:25.080
acronym or you're too clever of a name, you really should put a, and here's the MP3 of


00:28:25.080 --> 00:28:27.080
- I love how you say it. - Hey, there you go.


00:28:27.080 --> 00:28:30.080
Yes, the little-- I loved that answer with Linux.


00:28:30.080 --> 00:28:33.080
It was, "Hi, my name is Linus, and this is how you spell Linux."


00:28:33.080 --> 00:28:36.080
And I couldn't understand his accent, and it didn't clear anything up.


00:28:36.080 --> 00:28:38.080
- It was fantastic. - That's funny.


00:28:38.080 --> 00:28:42.080
So I think I've mentioned up front that I'm old.


00:28:42.080 --> 00:28:45.080
So a lot of my early career was spent on Unix systems,


00:28:45.080 --> 00:28:47.080
SunSpark systems, that kind of stuff.


00:28:47.080 --> 00:28:51.080
And at the time, there was this whole war between VI and Emacs.


00:28:51.080 --> 00:28:54.080
The war is over, I think, VS Code 1.


00:28:54.080 --> 00:29:00.800
But I picked VI because it was the only thing guaranteed to be installed on any of the systems I was telnetting into.


00:29:00.800 --> 00:29:04.800
And so I'm still very old school using Vim to this day.


00:29:04.800 --> 00:29:07.800
I mean, you just said the word telnet, come on.


00:29:07.800 --> 00:29:11.800
I'm keeping it. It was telnetting. It was pre-SSH.


00:29:11.800 --> 00:29:16.800
I know. Now, hold on now. Did you do like Archie and Gopher before telnet?


00:29:16.800 --> 00:29:22.800
A little bit of Gopher. I was never on an Archie system. I did a little bit of Gopher.


00:29:22.800 --> 00:29:25.440
Yeah, so it could even go more old school than that.


00:29:25.440 --> 00:29:26.320
But yeah, OK.


00:29:26.320 --> 00:29:27.200
Yeah, OK, great.


00:29:27.200 --> 00:29:30.480
So maybe these days you're SSHed in, but same basic idea, right?


00:29:30.480 --> 00:29:31.320
Same basic idea.


00:29:31.320 --> 00:29:33.440
So why am I babbling about this?


00:29:33.440 --> 00:29:36.640
Well, what this means is because I use an editor rather than an IDE.


00:29:36.640 --> 00:29:38.880
And of course, there's another place where you'll get letters


00:29:38.880 --> 00:29:40.680
because you can do everything in Vim script.


00:29:40.680 --> 00:29:41.800
So it's an IDE as well.


00:29:41.800 --> 00:29:44.200
But I tend to just use it as a letter editor.


00:29:44.200 --> 00:29:47.880
What that means is I tend to use a standalone debugger.


00:29:47.880 --> 00:29:50.760
So Pudby is one of those.


00:29:50.760 --> 00:29:52.560
It's a standalone debugger.


00:29:52.560 --> 00:29:56.520
I'm not sure why, but I've never been a big fan of PDB,


00:29:56.520 --> 00:29:58.540
the one that comes with Python.


00:29:58.540 --> 00:30:00.540
Part of that is 'cause it's based on GDB,


00:30:00.540 --> 00:30:02.060
which I never liked either.


00:30:02.060 --> 00:30:05.700
I just need to see more screen,


00:30:05.700 --> 00:30:08.180
more code on my screen at a time.


00:30:08.180 --> 00:30:12.920
And so this is a TUI program, which is text user interface.


00:30:12.920 --> 00:30:14.960
And it's for, and if you wanna, again,


00:30:14.960 --> 00:30:16.840
shout out to the old folks in the audience,


00:30:16.840 --> 00:30:19.120
it's got a very Borland turbo feel to it.


00:30:19.120 --> 00:30:21.480
So you can see the screen and the text


00:30:21.480 --> 00:30:22.300
that you're working on.


00:30:22.300 --> 00:30:24.500
and then there's a couple little side windows with your stack


00:30:24.500 --> 00:30:27.020
and your variables and set breakpoints,


00:30:27.020 --> 00:30:29.340
all the things you expect a debugger to do.


00:30:29.340 --> 00:30:33.580
And if you're stopped at a breakpoint, you can open up a REPL,


00:30:33.580 --> 00:30:35.740
and it gives you full context of where you are,


00:30:35.740 --> 00:30:37.300
just like you would with inside a PDB.


00:30:37.300 --> 00:30:40.180
So I find oftentimes I'm doing more debugging in the REPL


00:30:40.180 --> 00:30:42.780
in context than I am actually in the debugger.


00:30:42.780 --> 00:30:48.980
Now, why this is a big deal for me is, let alone the local,


00:30:48.980 --> 00:30:52.220
if I were using PyCharm or whatever, I can work locally,


00:30:52.220 --> 00:30:54.980
this will work anywhere where I can SSH into.


00:30:54.980 --> 00:30:57.460
So it, because it runs over the terminal,


00:30:57.460 --> 00:31:00.660
I can get into a machine, I can use this and have it work.


00:31:00.660 --> 00:31:02.540
And it means I'm using consistent environment


00:31:02.540 --> 00:31:04.460
across all the places I go.


00:31:04.460 --> 00:31:07.260
So I don't try to sell this to other people.


00:31:07.260 --> 00:31:10.060
When I manage teams, I don't say you will use this,


00:31:10.060 --> 00:31:11.740
but it tends to be my go-to.


00:31:11.740 --> 00:31:14.680
And I like to tell people that it's out there


00:31:14.680 --> 00:31:18.240
'cause you never know when you have to do that remote stuff.


00:31:19.500 --> 00:31:22.060
- Yeah, a lot of times, you know, like,


00:31:22.060 --> 00:31:23.780
it works on my machine,


00:31:23.780 --> 00:31:25.740
and you get the certification even there.


00:31:25.740 --> 00:31:27.140
It works on my machine.


00:31:27.140 --> 00:31:29.760
And then I go to the server and it doesn't work.


00:31:29.760 --> 00:31:32.960
And I can't really figure out why, you know,


00:31:32.960 --> 00:31:34.980
especially when you're setting up a new environment,


00:31:34.980 --> 00:31:37.940
you're like, ah, trying to run the web app now


00:31:37.940 --> 00:31:39.000
in micro WSGI over here,


00:31:39.000 --> 00:31:41.540
and it just won't start or something like that, right?


00:31:41.540 --> 00:31:44.060
So the ability to get a little more insight


00:31:44.060 --> 00:31:45.820
over SSH is pretty cool.


00:31:45.820 --> 00:31:47.300
- Yep.


00:31:47.300 --> 00:31:48.780
- Yeah.


00:31:48.780 --> 00:31:50.780
Good. All right.


00:31:50.780 --> 00:31:54.780
Is this I think this may be our last


00:31:54.780 --> 00:31:58.780
sort of no second to last general general library is talks.


00:31:58.780 --> 00:32:02.780
Yep. So this is a wrapper for all your tests. So it


00:32:02.780 --> 00:32:06.780
essentially builds virtual environments based on


00:32:06.780 --> 00:32:10.780
quick little configuration file. So give you an example.


00:32:10.780 --> 00:32:14.780
Let's say I've got a line that says


00:32:14.780 --> 00:32:19.780
by brace 373839310-django400.


00:32:19.780 --> 00:32:22.360
It knows how to split that apart


00:32:22.360 --> 00:32:25.560
and will do all the combinations of running Python 3.7


00:32:25.560 --> 00:32:28.680
with 400, 3.8 with 400, et cetera, et cetera, et cetera.


00:32:28.680 --> 00:32:30.360
And it creates a little virtual environment


00:32:30.360 --> 00:32:32.360
for each one of those combinations


00:32:32.360 --> 00:32:35.320
and then runs all of your unit tests


00:32:35.320 --> 00:32:37.600
inside of that virtual environment.


00:32:37.600 --> 00:32:39.440
So if you're doing library support


00:32:39.440 --> 00:32:40.840
across multiple Python versions


00:32:40.840 --> 00:32:43.120
or across multiple, say, Django versions,


00:32:43.120 --> 00:32:45.620
then you can mix and match these with just a few lines


00:32:45.620 --> 00:32:47.180
inside of a configuration file,


00:32:47.180 --> 00:32:49.600
and it will go off and run all of this.


00:32:49.600 --> 00:32:52.700
And those virtual environments are created locally


00:32:52.700 --> 00:32:55.260
and cached, so although the first time it runs,


00:32:55.260 --> 00:32:58.060
it's dreadfully slow 'cause it has to pip install


00:32:58.060 --> 00:33:00.340
all of your requirements in each one of those environments.


00:33:00.340 --> 00:33:02.980
Once that's set up, it just leaves them there,


00:33:02.980 --> 00:33:05.740
which means first time hurts,


00:33:05.740 --> 00:33:07.380
and after that, it's not too bad.


00:33:07.380 --> 00:33:10.060
- So what are those trade-offs between,


00:33:10.060 --> 00:33:14.820
I want an absolutely clean from scratch reproducible thing.


00:33:14.820 --> 00:33:18.820
But I also want to get my job done.


00:33:18.820 --> 00:33:20.220
So if you're going to test across


00:33:20.220 --> 00:33:21.860
five different versions of Python,


00:33:21.860 --> 00:33:25.180
maybe don't try to pip install something like microWISGY


00:33:25.180 --> 00:33:30.140
or other things that have to compile for a great long while.


00:33:30.140 --> 00:33:32.220
Just leave it there.


00:33:32.220 --> 00:33:33.220
- Yes.


00:33:33.220 --> 00:33:38.220
Well, you know, because it does compile and leave it,


00:33:38.860 --> 00:33:42.540
let it do it, go get dinner, come back and just never delete


00:33:42.540 --> 00:33:45.660
that virtual environment ever, ever again.


00:33:45.660 --> 00:33:46.500
- There you go.


00:33:46.500 --> 00:33:50.400
Yeah, I suspect it has multiple levels of caching as well.


00:33:50.400 --> 00:33:52.040
Like if I pip install something


00:33:52.040 --> 00:33:53.380
and it's exactly the same version,


00:33:53.380 --> 00:33:55.460
it'll still be cached even on my machine,


00:33:55.460 --> 00:33:57.020
even if I recreate the virtual environment.


00:33:57.020 --> 00:33:58.740
So it's probably.


00:33:58.740 --> 00:34:01.700
- Yes, so there's levels of it.


00:34:01.700 --> 00:34:04.020
It essentially just creates a, I'm trying to remember,


00:34:04.020 --> 00:34:06.940
I think it's ., it might even be .vm,


00:34:06.940 --> 00:34:08.740
it might be .talks, I can't remember,


00:34:08.740 --> 00:34:10.200
But it essentially just creates a directory


00:34:10.200 --> 00:34:11.860
and creates a directory inside of that


00:34:11.860 --> 00:34:13.340
for each one of your combinations.


00:34:13.340 --> 00:34:16.400
And then pip installs into that virtual environment.


00:34:16.400 --> 00:34:17.780
So when it runs the next time,


00:34:17.780 --> 00:34:19.560
it'll do upgrades and things like that.


00:34:19.560 --> 00:34:21.140
And if you need to, you can just go in


00:34:21.140 --> 00:34:23.200
and RMRF the directory and blow it away


00:34:23.200 --> 00:34:24.180
if you're running into trouble


00:34:24.180 --> 00:34:25.740
and need to start from scratch.


00:34:25.740 --> 00:34:28.820
- It sounds interesting for a web app.


00:34:28.820 --> 00:34:32.860
It sounds super useful for a library package.


00:34:32.860 --> 00:34:34.060
- That's where I tend to use it.


00:34:34.060 --> 00:34:37.560
So we'll talk later about one of my little bits


00:34:37.560 --> 00:34:38.540
of self-promotion here.


00:34:38.540 --> 00:34:41.000
but I've got a couple Django libraries that are out there


00:34:41.000 --> 00:34:44.140
and I support 3.6 through 4.0,


00:34:44.140 --> 00:34:46.140
I haven't got around to 4.1 yet,


00:34:46.140 --> 00:34:49.500
and three or four versions of Django in it.


00:34:49.500 --> 00:34:51.640
And every once in a while, you'll run into something


00:34:51.640 --> 00:34:54.780
that just doesn't work in some version


00:34:54.780 --> 00:34:55.980
that you think is generic.


00:34:55.980 --> 00:34:57.680
And it's become a lot easier


00:34:57.680 --> 00:34:59.340
since I've dropped support for 2.7


00:34:59.340 --> 00:35:02.020
'cause there was a lot more crap having to deal with that.


00:35:02.020 --> 00:35:04.220
But that's how you catch those things.


00:35:04.220 --> 00:35:05.220
- Yeah, absolutely.


00:35:06.660 --> 00:35:10.340
- Right, and the last general one.


00:35:10.340 --> 00:35:11.780
- Yeah, this is, I mean,


00:35:11.780 --> 00:35:13.540
well, this one's right on the order.


00:35:13.540 --> 00:35:14.380
- Programming too long


00:35:14.380 --> 00:35:16.060
and you just need to take like a little bit of a nap


00:35:16.060 --> 00:35:17.220
or what's going on? - That's what it's for.


00:35:17.220 --> 00:35:18.500
That's right.


00:35:18.500 --> 00:35:21.020
So a pillow is for sleeping


00:35:21.020 --> 00:35:25.620
and it's also for image manipulation.


00:35:25.620 --> 00:35:28.740
So I don't do a lot of graphics stuff.


00:35:28.740 --> 00:35:30.300
My Batman logo notwithstanding,


00:35:30.300 --> 00:35:32.940
it was very early on in my programming career.


00:35:33.980 --> 00:35:38.980
But in fact, Django has a semi-dependency on this.


00:35:38.980 --> 00:35:41.340
So you don't need it out of the gate,


00:35:41.340 --> 00:35:43.040
but if you're using certain features in Django,


00:35:43.040 --> 00:35:44.720
you do have to have it installed.


00:35:44.720 --> 00:35:47.660
There's a field in Django, which is the image file field,


00:35:47.660 --> 00:35:50.260
and it uses the pillow library to make sure


00:35:50.260 --> 00:35:52.300
that the files that are associated with it


00:35:52.300 --> 00:35:54.540
actually are images.


00:35:54.540 --> 00:35:56.060
So this is a really deep,


00:35:56.060 --> 00:35:58.200
really cool image processing library,


00:35:58.200 --> 00:36:00.500
and I tend to just skim the surface of it.


00:36:00.500 --> 00:36:01.340
I use it for image,


00:36:01.340 --> 00:36:02.980
and I use it for a couple libraries as well


00:36:02.980 --> 00:36:05.840
that deal with image thumbnails,


00:36:05.840 --> 00:36:07.940
but otherwise I don't really touch it.


00:36:07.940 --> 00:36:09.940
But it tends to be one of those things that,


00:36:09.940 --> 00:36:12.900
if I go through all of the virtual environments


00:36:12.900 --> 00:36:14.460
set up on my system, I'm finding,


00:36:14.460 --> 00:36:16.180
oh, it's installed in a lot of them.


00:36:16.180 --> 00:36:17.820
So it's one of those that's kind of common


00:36:17.820 --> 00:36:19.620
that I, because I don't do a lot of image stuff,


00:36:19.620 --> 00:36:23.500
it's not something that I'm playing with a lot,


00:36:23.500 --> 00:36:24.700
but it's very, very powerful.


00:36:24.700 --> 00:36:26.200
So if you're into this kind of stuff,


00:36:26.200 --> 00:36:28.180
this is a great library to play with.


00:36:28.180 --> 00:36:32.600
And if you're not, you may want just the surface level pieces


00:36:32.600 --> 00:36:35.140
for some web things like thumbnails.


00:36:35.140 --> 00:36:39.160
- If you're running a website that accepts,


00:36:39.160 --> 00:36:41.640
say, image upload, for example.


00:36:41.640 --> 00:36:42.680
- Yes.


00:36:42.680 --> 00:36:45.620
- You obviously need this for the Django ORM field


00:36:45.620 --> 00:36:48.500
that's the image type, but you could also say,


00:36:48.500 --> 00:36:50.800
if it's too large, let's just resize it,


00:36:50.800 --> 00:36:54.800
or you can resize it to the same size all the time.


00:36:54.800 --> 00:36:57.000
It drives me crazy when I go to sites that are like,


00:36:57.000 --> 00:36:59.760
this image is 1500 by something,


00:36:59.760 --> 00:37:01.320
and we only support 1280.


00:37:01.320 --> 00:37:02.820
Like just resize it then.


00:37:02.820 --> 00:37:04.820
>> Yes.


00:37:04.820 --> 00:37:06.180
Yeah.


00:37:06.180 --> 00:37:10.260
I've also used it in some command line scripts, which


00:37:10.260 --> 00:37:14.340
will create two or three versions of an image that


00:37:14.340 --> 00:37:15.720
is in the static files.


00:37:15.720 --> 00:37:17.260
So it'll automatically go through.


00:37:17.260 --> 00:37:20.180
And like you said, OK, we've got our master that's 1,500


00:37:20.180 --> 00:37:20.940
by 1,500.


00:37:20.940 --> 00:37:23.140
And it'll go create some extra ones or whatever.


00:37:23.140 --> 00:37:24.780
And you run a command, and it'll run


00:37:24.780 --> 00:37:26.220
through all your static files and check


00:37:26.220 --> 00:37:27.740
that there's two or three size versions


00:37:27.740 --> 00:37:28.620
or that kind of thing.


00:37:28.620 --> 00:37:32.380
So again, playing with the web size is important, right?


00:37:32.380 --> 00:37:33.720
So.


00:37:33.720 --> 00:37:37.340
- Yeah, for example, if you wanna have icons


00:37:37.340 --> 00:37:41.100
for your web app that can be saved to iOS home screens,


00:37:41.100 --> 00:37:42.740
you know, they want all these different sizes


00:37:42.740 --> 00:37:45.440
from like 512 down to 64.


00:37:45.440 --> 00:37:47.460
And if you're doing retina or high resolution,


00:37:47.460 --> 00:37:50.040
you can have different ones that get swapped in and out.


00:37:50.040 --> 00:37:51.540
And like, it would be really nice


00:37:51.540 --> 00:37:53.340
to just automate all that, right?


00:37:53.340 --> 00:37:54.700
- That's right, yeah.


00:37:54.700 --> 00:37:56.880
- Yep, cool, all right.


00:37:56.880 --> 00:38:07.200
This one, I'm going to vote this next one here as probably the best icon of all the


00:38:07.200 --> 00:38:08.880
things we're going to talk about.


00:38:08.880 --> 00:38:10.440
It's the Django Ninja.


00:38:10.440 --> 00:38:14.920
Yes, they've done a good job with it.


00:38:14.920 --> 00:38:20.200
It's a very special flavor of marketing to open source projects, isn't there?


00:38:20.200 --> 00:38:21.200
Yes, there is.


00:38:21.200 --> 00:38:22.200
Yes.


00:38:22.200 --> 00:38:23.200
I think it's called none.


00:38:23.200 --> 00:38:25.460
(laughing)


00:38:25.460 --> 00:38:30.440
We could talk for hours on why it's called the GIMP.


00:38:30.440 --> 00:38:35.440
Anyways, so I find that because I'm a Django guy,


00:38:35.440 --> 00:38:38.900
I don't have a really strong need


00:38:38.900 --> 00:38:41.000
for single page applications.


00:38:41.000 --> 00:38:44.900
A lot of the work I find I end up doing Django templates


00:38:44.900 --> 00:38:47.460
is good enough for many of the pages in the application,


00:38:47.460 --> 00:38:48.720
but then there's gonna be some pages


00:38:48.720 --> 00:38:50.320
where you wanna do fancier stuff.


00:38:50.320 --> 00:38:52.840
So I often use view.js,


00:38:52.840 --> 00:38:55.040
so that I can do best of both worlds there.


00:38:55.040 --> 00:38:58.540
So I, you know, this is kind of a multi-page application.


00:38:58.540 --> 00:39:02.680
So those pages that require SPA kind of feel to it,


00:39:02.680 --> 00:39:04.100
they have view on it.


00:39:04.100 --> 00:39:05.240
And those that don't,


00:39:05.240 --> 00:39:09.840
I just use generic 1.0 web style stuff.


00:39:09.840 --> 00:39:13.280
So in the 2.0 world,


00:39:13.280 --> 00:39:17.200
you need REST APIs and enter Django Ninja.


00:39:17.200 --> 00:39:18.040
This is what it does.


00:39:18.040 --> 00:39:20.840
So it sits on top of a Django view


00:39:20.840 --> 00:39:23.340
and essentially restifies the view.


00:39:23.340 --> 00:39:26.020
And when I say on top, I mean that literally,


00:39:26.020 --> 00:39:27.580
you actually use decorators.


00:39:27.580 --> 00:39:30.480
So you write a view, decorate it with an HTTP method


00:39:30.480 --> 00:39:34.560
like get or put, and then that view outputs JSON


00:39:34.560 --> 00:39:36.480
instead of your usual HTML.


00:39:36.480 --> 00:39:40.680
The library is built on top of Pydantic,


00:39:40.680 --> 00:39:45.460
so it relies heavily on the types


00:39:45.460 --> 00:39:47.960
to help it define the JSON that comes out.


00:39:47.960 --> 00:39:50.420
You write a little schema file that says the names


00:39:50.420 --> 00:39:53.100
on types of the fields for the JSON output.


00:39:53.100 --> 00:39:58.100
And it's got a schema that is based on top of Django models.


00:39:58.100 --> 00:40:02.020
So this works a lot like a model form


00:40:02.020 --> 00:40:03.180
if you've ever used one of those.


00:40:03.180 --> 00:40:07.460
So let's say I've got a Django model called a customer,


00:40:07.460 --> 00:40:10.340
I can create a schema called customer out


00:40:10.340 --> 00:40:14.020
that inherits from Django, from Ninja's model schema.


00:40:14.020 --> 00:40:16.020
I create a subclass called config,


00:40:16.020 --> 00:40:18.700
which is kind of like the meta subclass in Django.


00:40:18.700 --> 00:40:22.100
and it sets the model attribute to point to the customer.


00:40:22.100 --> 00:40:25.780
And if I wanna use all the fields in the model, that's it.


00:40:25.780 --> 00:40:27.620
It's basically just the three lines.


00:40:27.620 --> 00:40:32.500
And you can customize that to like model form.


00:40:32.500 --> 00:40:34.500
You can say, don't use all the fields,


00:40:34.500 --> 00:40:35.540
only use these fields,


00:40:35.540 --> 00:40:37.700
or you can add fields if there's things like,


00:40:37.700 --> 00:40:40.120
say you want a field called name


00:40:40.120 --> 00:40:41.760
that combines first name and last name,


00:40:41.760 --> 00:40:43.940
you can build something that computes that


00:40:43.940 --> 00:40:46.340
so that it doesn't actually use the model directly.


00:40:47.340 --> 00:40:51.540
So oftentimes you end up having to write a couple of these


00:40:51.540 --> 00:40:54.300
'cause you often need the inbound and the outbound


00:40:54.300 --> 00:40:55.620
to have different fields in it.


00:40:55.620 --> 00:40:58.820
So a common practice is to have your schema


00:40:58.820 --> 00:41:02.980
for customer be called say customer out or customer in.


00:41:02.980 --> 00:41:05.060
And there's nothing that enforces that,


00:41:05.060 --> 00:41:06.700
but that's how they do it in their documentation


00:41:06.700 --> 00:41:09.340
and that kind of just sort of habit as you go along.


00:41:09.340 --> 00:41:11.900
- Yeah, it's so tempting sometimes to think,


00:41:11.900 --> 00:41:14.180
oh, we can just exchange the same model,


00:41:14.180 --> 00:41:15.440
inbound and outbound.


00:41:16.260 --> 00:41:19.200
in so many ways that just doesn't pan out.


00:41:19.200 --> 00:41:23.960
Even if you're using something like a Beanie or SQL model


00:41:23.960 --> 00:41:26.580
or something where like literally the Pydantic model


00:41:26.580 --> 00:41:27.940
goes in the database as well,


00:41:27.940 --> 00:41:29.500
often that's not even the same thing.


00:41:29.500 --> 00:41:32.060
'Cause for example, you're inbound create user,


00:41:32.060 --> 00:41:34.260
you want a password, your response,


00:41:34.260 --> 00:41:37.260
you'd never want to send the user a password directly back.


00:41:37.260 --> 00:41:39.260
You shouldn't even know what it is.


00:41:39.260 --> 00:41:41.700
- The ID field is the most common thing, right?


00:41:41.700 --> 00:41:43.980
Like every model's got one.


00:41:43.980 --> 00:41:45.740
And there's hacks you can do to say,


00:41:45.740 --> 00:41:47.340
oh, if it's zero, it's a create,


00:41:47.340 --> 00:41:49.420
and that's a common way of doing things.


00:41:49.420 --> 00:41:50.900
But for Django Ninja,


00:41:50.900 --> 00:41:52.820
what I often just do is just leave it out.


00:41:52.820 --> 00:41:55.180
And because they're objects like anything else,


00:41:55.180 --> 00:41:56.180
you can inherit it, right?


00:41:56.180 --> 00:41:58.460
So you can start with the in and then add the out


00:41:58.460 --> 00:42:01.060
and add the ID to it.


00:42:01.060 --> 00:42:03.660
So there's ways around that's what it comes down to.


00:42:03.660 --> 00:42:08.100
- So the Django Ninja can be plugged


00:42:08.100 --> 00:42:09.900
into an existing Django app.


00:42:09.900 --> 00:42:11.780
It's not like a separate thing that I run


00:42:11.780 --> 00:42:13.780
that is also like Tinga?


00:42:13.780 --> 00:42:17.920
Yeah, so it's actually just stuff that sits on top.


00:42:17.920 --> 00:42:20.720
It's got its own routes. So essentially, you're building


00:42:20.720 --> 00:42:24.800
Django views, but you're decorating them with the ninja.


00:42:24.800 --> 00:42:28.060
And when you decorate it, it automatically collects


00:42:28.060 --> 00:42:31.840
all of those underneath one path in the URLs file.


00:42:31.840 --> 00:42:36.740
So you set up a router, usually you set it to say something like /api.


00:42:36.740 --> 00:42:39.240
And so back to that customer example I was using,


00:42:39.240 --> 00:42:42.300
If I added a view for createCustomer,


00:42:42.300 --> 00:42:45.440
I set it to the customer path, and because it's decorated,


00:42:45.440 --> 00:42:48.560
it automatically ends up under /API/customers.


00:42:48.560 --> 00:42:51.560
So it takes care of a lot of that for you.


00:42:51.560 --> 00:42:55.740
And it looks like it also has Async support as well,


00:42:55.740 --> 00:42:56.740
which is pretty neat.


00:42:56.740 --> 00:42:59.360
It started from scratch with the Async.io.


00:42:59.360 --> 00:43:02.240
I'm not 100% sure of this, but I think there's a couple


00:43:02.240 --> 00:43:05.860
former DRF guys on here, and I think it was a rewrite


00:43:05.860 --> 00:43:09.460
from scratch with async from the beginning and Pydantic.


00:43:09.460 --> 00:43:12.500
So I think it's sort of the next generation.


00:43:12.500 --> 00:43:16.060
And if they aren't, if the key writers weren't in the DRF,


00:43:16.060 --> 00:43:21.020
they obviously took a lot of learning from what was there


00:43:21.020 --> 00:43:23.420
and what worked and what didn't work.


00:43:23.420 --> 00:43:27.300
- It's pretty familiar to FastAPI type of programming.


00:43:27.300 --> 00:43:30.700
And it has a lot of uses of type hints, right?


00:43:30.700 --> 00:43:33.900
For example, you have an API function that takes a delay.


00:43:33.900 --> 00:43:34.820
It says it's an integer.


00:43:34.820 --> 00:43:38.740
I suppose it probably actually parses that and validates it.


00:43:38.740 --> 00:43:42.040
Yes, yeah. Well, and it's particularly useful as well,


00:43:42.040 --> 00:43:46.940
because by the time you're getting things down into your web string,


00:43:46.940 --> 00:43:48.940
everything is string, right?


00:43:48.940 --> 00:43:50.940
When you post it, it's all coming up in the string.


00:43:50.940 --> 00:43:53.900
So somebody somewhere has to go, "Oh, that's supposed to be an int,"


00:43:53.900 --> 00:43:56.980
and try to convert it. So it takes care of a lot of that kind of stuff.


00:43:56.980 --> 00:44:00.380
And in fact, one of the reasons there's so little coding in this,


00:44:00.380 --> 00:44:03.580
particularly with the schema definitions, is because you're just...


00:44:03.580 --> 00:44:17.860
if you've already got that model file, it knows the Django field is a text field or is a Boolean or is an integer and it goes, Oh, okay, I know what to do with that, right? So it essentially, it's building on top of that stuff that's already there for your existing code.


00:44:17.860 --> 00:44:30.460
That's really cool. And you basically so much of the validation has already happened by the time it gets to you. Yeah, you're much closer to the right answer. You have to check so many things, but much less code you have to write.


00:44:31.060 --> 00:44:37.780
And if that's not good enough, on top of all of this is it comes with a web-based debugging view.


00:44:37.780 --> 00:44:41.780
So it lists all of your registered calls, you can go and click on things,


00:44:41.780 --> 00:44:46.340
if authentication is required for the call, and it's got a whole bunch of stuff in the back end for that as well.


00:44:46.340 --> 00:44:54.420
You can click through and say, okay, I push this button and paste in my key or hit the login button in my Django and then use it that way.


00:44:54.420 --> 00:44:59.780
So it allows you to sort of see all of this and it includes in it the output in curl.


00:44:59.780 --> 00:45:03.700
So as you're using the debugger, you can copy and paste the line


00:45:03.700 --> 00:45:06.340
into your terminal and then run it and curl.


00:45:06.340 --> 00:45:10.260
So it's a quick little tool for helping you sort of figure it all out.


00:45:10.260 --> 00:45:12.260
Pretty powerful.


00:45:12.260 --> 00:45:17.860
Mm-hmm. It even has an interesting sync to async adapter decorator


00:45:17.860 --> 00:45:20.180
to allow you to work with the ORM.


00:45:20.180 --> 00:45:22.180
- Yeah. - So it's kind of a...


00:45:22.180 --> 00:45:27.300
Well, it shouldn't be as necessary now that 4.1's out


00:45:27.300 --> 00:45:29.500
'cause that was one of the major changes in Django 4.1


00:45:29.500 --> 00:45:31.060
is they added async to the ORM.


00:45:31.060 --> 00:45:32.780
So-- - Yeah, that's really


00:45:32.780 --> 00:45:33.740
a big deal.


00:45:33.740 --> 00:45:35.380
- I actually remember one of the comments


00:45:35.380 --> 00:45:38.580
that's on Twitter after 4.1 came out,


00:45:38.580 --> 00:45:41.220
"Oh, the Django guys, the Ninja guys are gonna love this."


00:45:41.220 --> 00:45:43.340
I'm like, yeah. (laughs)


00:45:43.340 --> 00:45:44.700
- Sounds like it.


00:45:44.700 --> 00:45:47.060
All right, Julio asks,


00:45:47.060 --> 00:45:49.580
"Is this as complete as Django REST framework?"


00:45:49.580 --> 00:45:50.660
And Nick Harvey says,


00:45:50.660 --> 00:45:53.460
"It looks lighter than Django REST framework."


00:45:53.460 --> 00:45:55.060
Maybe give your thoughts


00:45:55.060 --> 00:45:57.480
and then we can maybe pull up the next topic.


00:45:57.480 --> 00:46:00.860
Why don't we punt seeing as the next one is the Django rest framework?


00:46:00.860 --> 00:46:02.860
Yeah, then we'll come back.


00:46:02.860 --> 00:46:04.740
Talk about it as we go along.


00:46:04.740 --> 00:46:07.120
The short answer is no, it's definitely not as complete.


00:46:07.120 --> 00:46:12.540
So the Django rest framework or DRF to its friends is Ninja's granddaddy.


00:46:12.540 --> 00:46:16.260
And it for a long time was the go to rest library in Django.


00:46:16.260 --> 00:46:20.040
Like Ninja, it breaks things down into serializers.


00:46:20.040 --> 00:46:22.800
That's the equivalent of a schema and then views and routes.


00:46:23.140 --> 00:46:26.640
And like Ninja, it supports decorators, but it also supports classes.


00:46:26.640 --> 00:46:30.180
But because it's older, it doesn't support the type mechanism.


00:46:30.180 --> 00:46:33.520
So you have to do a little more boilerplate code to get this going.


00:46:33.520 --> 00:46:36.660
You have to do a few more things with the serializers.


00:46:36.660 --> 00:46:42.120
It tends to I was going to say it tends to favor a class based approach.


00:46:42.120 --> 00:46:43.160
I'm not sure if that's true.


00:46:43.160 --> 00:46:46.420
When I write with the DRF, I tend to use the class based approach.


00:46:46.420 --> 00:46:49.000
There are other mechanisms in there, but it seems to be the one


00:46:49.000 --> 00:46:51.440
that felt natural for me there.


00:46:51.440 --> 00:46:54.340
It has a concept called a ViewSet class,


00:46:54.340 --> 00:46:57.680
and this is really where it shines


00:46:57.680 --> 00:47:00.520
because you define an object which is an endpoint,


00:47:00.520 --> 00:47:02.520
and then you can say inside of that endpoint,


00:47:02.520 --> 00:47:05.760
I want to do list and create and retrieve and update and destroy,


00:47:05.760 --> 00:47:07.820
and you tie that into your query set,


00:47:07.820 --> 00:47:10.420
and it does all of those things for your object.


00:47:10.420 --> 00:47:15.200
So back to my customer example, I could build out that customer endpoint,


00:47:15.200 --> 00:47:18.400
and then I can say I want to use list, create, and retrieve,


00:47:18.400 --> 00:47:20.200
and it'll allow me to create a customer


00:47:20.200 --> 00:47:23.100
or list all the customers or get a specific customer.


00:47:23.100 --> 00:47:26.900
And it does it based on mix-ins, so you can mix and match


00:47:26.900 --> 00:47:29.780
which of those choices you want.


00:47:29.780 --> 00:47:32.580
So it's sort of this composing kind of mechanism.


00:47:32.580 --> 00:47:46.900
Sorry, I lost my thoughts there for a second.


00:47:46.900 --> 00:47:50.580
- Yeah, I have a question or sort of an observation here


00:47:50.580 --> 00:47:54.700
from, to be fair, I haven't done much with DRF,


00:47:54.700 --> 00:47:58.780
but it feels to me like a lot of what you're getting


00:47:58.780 --> 00:48:02.260
with DRF is like, I have a database table,


00:48:02.260 --> 00:48:04.940
let me do the rest things to it.


00:48:04.940 --> 00:48:07.140
Like I wanna be able to do a get against,


00:48:07.140 --> 00:48:08.700
and get all of them, or get against an ID


00:48:08.700 --> 00:48:09.780
and get individual ones.


00:48:09.780 --> 00:48:13.740
I wanna be able to do a post and maybe create one


00:48:13.740 --> 00:48:15.980
where it's a lot, it seems like it's very structured


00:48:15.980 --> 00:48:20.340
around CRUD, but over API.


00:48:20.340 --> 00:48:22.620
- Yes. - Is that accurate or no?


00:48:22.620 --> 00:48:24.580
- So there are ways around it.


00:48:24.580 --> 00:48:26.340
So that the concept of a serializer


00:48:26.340 --> 00:48:28.700
does not have to be tied to a model,


00:48:28.700 --> 00:48:31.560
but this is a tool for Django.


00:48:31.560 --> 00:48:33.300
So it's not really a surprise


00:48:33.300 --> 00:48:34.660
that it's kind of tied to the models.


00:48:34.660 --> 00:48:37.820
And that's for the most part, even with Ninja,


00:48:37.820 --> 00:48:41.020
I find 80% of what you're doing over the rest API


00:48:41.020 --> 00:48:43.780
is mapping to your database models in the first place,


00:48:43.780 --> 00:48:47.040
particularly if you're doing it for something like React


00:48:47.040 --> 00:48:49.040
because the things in your database


00:48:49.040 --> 00:48:51.420
are usually what you're showing up on the screen,


00:48:51.420 --> 00:48:54.180
so it usually tends to map fairly easily.


00:48:54.180 --> 00:48:57.920
And there's enough depth there that if you need to introduce


00:48:57.920 --> 00:49:01.560
new fields or do something custom, it doesn't handcuff you.


00:49:01.560 --> 00:49:06.100
It does allow you to do a lot of this stuff easier though.


00:49:06.100 --> 00:49:09.040
So if you are sticking with things that map nicely


00:49:09.040 --> 00:49:12.640
to your database, then it requires far less code,


00:49:12.640 --> 00:49:14.720
is what it comes down to.


00:49:14.720 --> 00:49:15.560
- Sure.


00:49:15.560 --> 00:49:20.060
- So the, I guess to get back to that sort of question,


00:49:20.060 --> 00:49:22.640
Ninja's definitely lighter weight.


00:49:22.640 --> 00:49:26.600
It definitely I find requires less code than the DRF


00:49:26.600 --> 00:49:29.680
because it takes advantage of things like the typing


00:49:29.680 --> 00:49:31.700
which DRF's older and it didn't exist


00:49:31.700 --> 00:49:33.520
and it was compatible with Python 2


00:49:33.520 --> 00:49:36.960
and some of the stuff where those type pieces weren't there.


00:49:36.960 --> 00:49:40.960
It has, DRF has a much richer output listing.


00:49:40.960 --> 00:49:43.240
output listing.


00:49:43.240 --> 00:49:45.840
So if I were going to need something


00:49:45.840 --> 00:49:49.600
that was not JSON based, for example, over REST,


00:49:49.600 --> 00:49:50.880
I might go back to the DRF.


00:49:50.880 --> 00:49:53.840
So it's got mechanisms for either through it


00:49:53.840 --> 00:49:58.840
or through plugins, YAML, XML, MessagePack, Excel,


00:49:58.840 --> 00:49:59.960
even LaTeX, right?


00:49:59.960 --> 00:50:02.280
So there's libraries that go with these libraries


00:50:02.280 --> 00:50:06.160
that sort of connect these things together.


00:50:06.160 --> 00:50:08.040
So yeah, there's a lot of depth here.


00:50:08.880 --> 00:50:13.760
The only place that the DRF makes me really, really nervous


00:50:13.760 --> 00:50:16.500
and is the permission mechanism.


00:50:16.500 --> 00:50:18.280
I have shot myself in the foot


00:50:18.280 --> 00:50:20.440
a few too many times doing it.


00:50:20.440 --> 00:50:22.040
It's fine by default,


00:50:22.040 --> 00:50:25.400
but then as soon as you start mucking with it a little bit,


00:50:25.400 --> 00:50:27.680
it seems to open up a whole bunch of things.


00:50:27.680 --> 00:50:30.840
You have to make sure once you start playing in that space


00:50:30.840 --> 00:50:33.160
that you do it correctly and test properly.


00:50:33.160 --> 00:50:35.660
Otherwise you could have gaping holes.


00:50:35.660 --> 00:50:38.640
Ninja seemed to be a little more locked down by default.


00:50:38.640 --> 00:50:40.680
So I kind of liked that, but that could just


00:50:40.680 --> 00:50:42.680
because I'm missing toes from playing


00:50:42.680 --> 00:50:44.680
with the DRF over the years.


00:50:44.680 --> 00:50:46.120
[LAUGHS]


00:50:46.120 --> 00:50:47.920
>> You know what the guns look like?


00:50:47.920 --> 00:50:49.000
>> Yeah.


00:50:49.000 --> 00:50:49.920
>> Yeah.


00:50:49.920 --> 00:50:51.920
Tshar asks, I think this is probably


00:50:51.920 --> 00:50:53.560
in reference to the Django Ninja.


00:50:53.560 --> 00:50:57.080
It looks similar to FastAPI, and how would you compare them?


00:50:57.080 --> 00:51:01.680
>> Yeah, it's a lot of similar kind of concepts.


00:51:01.680 --> 00:51:06.680
And in fact, either between FastAPI,


00:51:06.680 --> 00:51:12.760
the typing mechanisms, is FastAPI directly based on Pydantic


00:51:12.760 --> 00:51:14.520
or just deeply influenced by it?


00:51:14.520 --> 00:51:15.760
- I think yes.


00:51:15.760 --> 00:51:19.520
I feel like Pydantic became very popular


00:51:19.520 --> 00:51:21.960
because of FastAPI, but they're separate projects.


00:51:21.960 --> 00:51:22.800
- Okay, yeah.


00:51:22.800 --> 00:51:27.560
So Ninja is built on top of Pydantic.


00:51:27.560 --> 00:51:31.520
So they're all being inspired by the same thing


00:51:31.520 --> 00:51:33.320
and trying to solve very similar problems.


00:51:33.320 --> 00:51:35.920
So it's not surprising that people are seeing.


00:51:35.920 --> 00:51:38.600
- Yeah, exactly.


00:51:38.600 --> 00:51:40.560
And at the bottom of the Django Ninja site,


00:51:40.560 --> 00:51:44.020
it says this project was heavily inspired by FastAPI.


00:51:44.020 --> 00:51:47.000
My feeling is like, if you're already doing Django


00:51:47.000 --> 00:51:49.920
and you wanna add APIs and you like FastAPI,


00:51:49.920 --> 00:51:51.680
this might be a really good option


00:51:51.680 --> 00:51:53.960
because it brings so much of a similar model,


00:51:53.960 --> 00:51:56.040
but you don't have to now maintain two apps


00:51:56.040 --> 00:51:59.600
that like run separately or version separately, all that.


00:51:59.600 --> 00:52:00.560
- Yeah, yeah.


00:52:00.560 --> 00:52:05.460
I also find it's got a little bit of a flask flavoring


00:52:05.460 --> 00:52:07.500
as well, right, as to how some of those pieces.


00:52:07.500 --> 00:52:08.520
And again, that's the same thing,


00:52:08.520 --> 00:52:11.720
FastAPI using the decorators, using the types, right?


00:52:11.720 --> 00:52:15.700
So it's a similar kind of influences, if nothing else.


00:52:15.700 --> 00:52:18.740
- Yeah, very neat, I think.


00:52:18.740 --> 00:52:22.420
All right, Django Grappelli.


00:52:22.420 --> 00:52:24.800
What's this one for?


00:52:24.800 --> 00:52:27.920
- All right, so a little bit of a tangent here for a second.


00:52:27.920 --> 00:52:35.680
Django is named after a jazz guitarist named Django Reinhardt and he was often a duo working


00:52:35.680 --> 00:52:40.960
with somebody named Stefan Grappelli. So if you're looking for a name for a library for Django,


00:52:40.960 --> 00:52:49.360
Grappelli is a good fit. So now great we've got a name, what does it do? This is actually a


00:52:49.360 --> 00:52:54.800
re-skinning of the Django admin. So the Grappelli folks have taken advantage of the fact that the


00:52:54.800 --> 00:52:59.060
the Django admin is built on top of the Django templating mechanism.


00:52:59.060 --> 00:53:02.560
And they've rewritten all those templates using a new style.


00:53:02.560 --> 00:53:05.400
The style still feels a little dated,


00:53:05.400 --> 00:53:07.980
but not quite as dated as the Django admin.


00:53:07.980 --> 00:53:09.980
So it's a step in the right direction.


00:53:09.980 --> 00:53:15.480
It does logical things like a lot of the top right hand corner,


00:53:15.480 --> 00:53:17.320
you know, reset password view page,


00:53:17.320 --> 00:53:20.700
a lot of that stuff gets moved into like little drop downs and that kind of thing.


00:53:20.700 --> 00:53:23.120
The coloring is a little more consistent.


00:53:23.120 --> 00:53:29.860
It uses a footer. So like the actions are always in the same place. It just generally feels cleaner to me


00:53:29.860 --> 00:53:31.540
I


00:53:31.540 --> 00:53:39.240
Often use the Django admin for like my back-end support people. I don't tend to use it customer facing


00:53:39.240 --> 00:53:44.700
So I you know folks who are trainable and I find that when I've used it with them


00:53:44.700 --> 00:53:48.500
Grappelli feels better for them. They just it feels a little more intuitive


00:53:48.620 --> 00:53:55.040
So it's just a really is just a skin, but it's a nice skin and it's a really easy install


00:53:55.040 --> 00:54:00.520
You have very little you have to do you get a couple couple changes to your settings.py file and it's all done for you. So


00:54:00.520 --> 00:54:08.280
Yeah, also it looks like it, you know, you hear skin you think oh it's pretty but it also seems like it adds


00:54:08.280 --> 00:54:14.560
More functionality like it adds autocomplete for foreign keys and relationships it as


00:54:15.120 --> 00:54:18.680
Like a tiny MC which is rich text editor


00:54:18.680 --> 00:54:22.960
It adds reordering through drag-and-drop. I mean those are a


00:54:22.960 --> 00:54:28.920
Little bit more than just pretty right? Yeah, it's it's modernization of the interface is really what it comes down to. Yeah


00:54:28.920 --> 00:54:31.680
Mm-hmm. Yeah, very cool


00:54:31.680 --> 00:54:37.220
So another random Django bit of history to go along with the musicians


00:54:37.220 --> 00:54:40.960
Was created in Lawrence, Kansas, right? Yes


00:54:41.760 --> 00:54:44.040
- Newspaper? - Yep, by the newspaper.


00:54:44.040 --> 00:54:46.120
That's where I went to college, so.


00:54:46.120 --> 00:54:47.560
- Ah, okay.


00:54:47.560 --> 00:54:50.160
- Right down the street from the home of Django,


00:54:50.160 --> 00:54:51.560
around the same timeframe.


00:54:51.560 --> 00:54:52.920
- There you go.


00:54:52.920 --> 00:54:55.120
- Right, all right, so what's up next?


00:54:55.120 --> 00:54:56.400
Import/export.


00:54:56.400 --> 00:54:57.920
- Yep, so unlike-- - So it's like a distributor,


00:54:57.920 --> 00:54:59.720
it's gonna make some money off selling rugs,


00:54:59.720 --> 00:55:00.960
or what's the deal?


00:55:00.960 --> 00:55:02.960
- Rugs, yes, sure, rugs.


00:55:02.960 --> 00:55:05.280
(both laughing)


00:55:05.280 --> 00:55:10.280
So unlike Gripteli, where you have no idea by the name,


00:55:10.720 --> 00:55:12.720
This one's a little better.


00:55:12.720 --> 00:55:14.720
You have an idea what it does.


00:55:14.720 --> 00:55:16.720
Let's create it more straight to the point.


00:55:16.720 --> 00:55:18.720
This is a utilitarian name.


00:55:18.720 --> 00:55:20.720
I can import and I can export stuff from Django.


00:55:20.720 --> 00:55:22.720
That's exactly it.


00:55:22.720 --> 00:55:24.720
How does it work?


00:55:24.720 --> 00:55:26.720
Not just a database dump, probably.


00:55:26.720 --> 00:55:28.720
Something more.


00:55:28.720 --> 00:55:30.720
It's built on top of Tablib,


00:55:30.720 --> 00:55:32.720
which is a Python library for tabular data formats.


00:55:32.720 --> 00:55:34.720
Essentially, it maps things out of your ORM


00:55:34.720 --> 00:55:36.720
to whatever Tablib can handle.


00:55:36.720 --> 00:55:38.720
That's Excel, JSON, YAML,


00:55:38.720 --> 00:55:43.720
JSON, YAML, Pandas, HTML, JIRA, TSV, ODS, CSV, DBF,


00:55:43.720 --> 00:55:47.420
and I even know what some of those acronyms mean.


00:55:47.420 --> 00:55:50.220
So yeah, it's essentially your go-to place


00:55:50.220 --> 00:55:52.940
for spitting stuff out.


00:55:52.940 --> 00:55:55.620
Like Ninja and like the DRF,


00:55:55.620 --> 00:55:58.540
it has this, what it calls resources.


00:55:58.540 --> 00:55:59.980
This is like our schema.


00:55:59.980 --> 00:56:02.540
And it essentially does that mapping thing again.


00:56:02.540 --> 00:56:04.660
So you can say, I wanna take this model


00:56:04.660 --> 00:56:07.460
and I wanna map it to this mechanism.


00:56:07.460 --> 00:56:10.460
and then you just run it and say, "Export this to JSON,"


00:56:10.460 --> 00:56:12.660
and you'll get it in JSON. "Export this to YAML,"


00:56:12.660 --> 00:56:14.660
and it'll export it to YAML.


00:56:14.660 --> 00:56:17.900
There are mechanisms inside of the resources,


00:56:17.900 --> 00:56:20.500
similar to what I was talking about in Ninja and the DRF,


00:56:20.500 --> 00:56:23.820
to do compositing. If I want a name field,


00:56:23.820 --> 00:56:25.620
which is based on first name and last name,


00:56:25.620 --> 00:56:28.620
it'll combine all those things and give that to you together.


00:56:28.620 --> 00:56:31.540
And one of the things that I like most,


00:56:31.540 --> 00:56:33.940
I haven't used this library a lot, but when I have used it,


00:56:33.940 --> 00:56:37.060
it's because of this feature, which is it integrates nicely


00:56:37.060 --> 00:56:38.500
with the Django admin.


00:56:38.500 --> 00:56:41.700
So you essentially can build one of these resources,


00:56:41.700 --> 00:56:43.620
let's say back to my customer example,


00:56:43.620 --> 00:56:46.940
let's say you wanna be able to import customers.


00:56:46.940 --> 00:56:49.720
You can essentially define the resource


00:56:49.720 --> 00:56:53.160
and then you add a mix in to your customer admin object.


00:56:53.160 --> 00:56:55.620
And it automatically gives you an import button


00:56:55.620 --> 00:56:56.620
on the client screen.


00:56:56.620 --> 00:56:59.020
And when you hit that import, it'll upload,


00:56:59.020 --> 00:57:00.340
you give it the CSV file,


00:57:00.340 --> 00:57:02.500
it gives you a little screen that says,


00:57:02.500 --> 00:57:04.500
oh, this is the data that's coming in.


00:57:04.500 --> 00:57:05.900
And you can say, yes, I like it.


00:57:05.900 --> 00:57:07.820
and it'll put it into the database.


00:57:07.820 --> 00:57:09.580
And it's smart enough to know the difference


00:57:09.580 --> 00:57:11.260
between creates and updates.


00:57:11.260 --> 00:57:13.820
So depending on whether or not your ID field is blank,


00:57:13.820 --> 00:57:15.340
this is back to that zero thing


00:57:15.340 --> 00:57:17.240
we were talking about before,


00:57:17.240 --> 00:57:19.180
it will actually update things that are there.


00:57:19.180 --> 00:57:22.260
So if you've got a situation where,


00:57:22.260 --> 00:57:25.700
you've got a client phone book or something


00:57:25.700 --> 00:57:27.780
that's maintained through some other system


00:57:27.780 --> 00:57:29.380
and you need to keep them in sync,


00:57:29.380 --> 00:57:32.300
this is a quick and easy way to do that.


00:57:32.300 --> 00:57:35.240
Throw it together with say a management command


00:57:35.240 --> 00:57:37.040
and stick it in a cron job,


00:57:37.040 --> 00:57:39.440
and you can constantly push these things through.


00:57:39.440 --> 00:57:43.240
- It might sound really simple,


00:57:43.240 --> 00:57:45.560
but the ability to say,


00:57:45.560 --> 00:57:48.880
"Hey, business person or manager or salesperson,


00:57:48.880 --> 00:57:51.580
"you can just take your CSV and upload it,


00:57:51.580 --> 00:57:54.380
"and you don't have to bother the dev team


00:57:54.380 --> 00:57:55.560
"to add your data."


00:57:55.560 --> 00:57:58.440
That's pretty fantastic, actually.


00:57:58.440 --> 00:58:01.920
- One of my clients is a very lightweight CMS.


00:58:01.920 --> 00:58:05.240
And of course, when they sign up a new customer,


00:58:05.240 --> 00:58:06.960
they don't wanna have to input


00:58:06.960 --> 00:58:08.720
their customer's data by hand, right?


00:58:08.720 --> 00:58:10.000
So you can say, oh, it goes,


00:58:10.000 --> 00:58:12.160
you have it in an Excel file somewhere, great.


00:58:12.160 --> 00:58:15.240
Save as, put it in this format, suck it all the data in.


00:58:15.240 --> 00:58:17.720
So it can make a big difference.


00:58:17.720 --> 00:58:21.160
- Yeah, and the preview, make sure this looks good.


00:58:21.160 --> 00:58:22.880
I think that's also important.


00:58:22.880 --> 00:58:26.000
- And I find that's a lifesaver, right?


00:58:26.000 --> 00:58:27.680
You know exactly what you're getting in there.


00:58:27.680 --> 00:58:30.440
You can check it rather than it going,


00:58:30.440 --> 00:58:32.440
running havoc all over your database.


00:58:32.440 --> 00:58:36.480
- Which it probably would if people just


00:58:36.480 --> 00:58:38.240
randomly start uploading stuff.


00:58:38.240 --> 00:58:39.560
- Exactly.


00:58:39.560 --> 00:58:40.740
- And that might make your app crash,


00:58:40.740 --> 00:58:42.400
but you could use the Django debug toolbar


00:58:42.400 --> 00:58:44.040
to figure out what's going on.


00:58:44.040 --> 00:58:45.680
- Look at you, king of the segues.


00:58:45.680 --> 00:58:47.320
Yes. - Oh yeah.


00:58:47.320 --> 00:58:49.280
- So the next one here is, as you said,


00:58:49.280 --> 00:58:50.800
this is the Django debug toolbar.


00:58:50.800 --> 00:58:54.960
So this is a plugin for Django that overlays over your views


00:58:54.960 --> 00:58:56.520
and gives you all sorts of information


00:58:56.520 --> 00:58:58.320
what's going on in your page.


00:58:58.320 --> 00:59:00.880
The installation's a little more involved than,


00:59:00.880 --> 00:59:02.600
hey, just add this settings.py


00:59:02.600 --> 00:59:04.200
'cause you need some middleware


00:59:04.200 --> 00:59:05.920
and some static files and things.


00:59:05.920 --> 00:59:07.760
But once you've, the instructions are good though,


00:59:07.760 --> 00:59:09.600
so as long as you follow the instructions closely,


00:59:09.600 --> 00:59:10.640
you'll be okay.


00:59:10.640 --> 00:59:11.880
And once you got that going,


00:59:11.880 --> 00:59:14.620
it pops up in the top right-hand corner.


00:59:14.620 --> 00:59:16.280
I think that's actually configurable.


00:59:16.280 --> 00:59:18.920
And it has a list of panels.


00:59:18.920 --> 00:59:21.440
It comes with, I think it's 12 of them,


00:59:21.440 --> 00:59:22.960
and then there's a whole bunch of plugins


00:59:22.960 --> 00:59:24.600
that you can do as well.


00:59:24.600 --> 00:59:28.060
So for example, there's a history information,


00:59:28.060 --> 00:59:31.280
a useful one I find I use a fair amount is the time panel.


00:59:31.280 --> 00:59:34.120
So it shows you the breakdown of where,


00:59:34.120 --> 00:59:36.820
you know, where your call has been spent.


00:59:36.820 --> 00:59:38.620
The one you've got up on the screen there right now


00:59:38.620 --> 00:59:42.140
is the one that saves my bacon all the time,


00:59:42.140 --> 00:59:43.900
which is the SQL panel.


00:59:43.900 --> 00:59:46.180
So it shows you exactly what queries were run,


00:59:46.180 --> 00:59:48.100
how long each of them took.


00:59:48.100 --> 00:59:49.580
I understand enough database stuff


00:59:49.580 --> 00:59:50.860
to just get me in trouble, right?


00:59:50.860 --> 00:59:53.300
The ORM provides this nice abstraction


00:59:53.300 --> 00:59:54.380
that I find really helpful,


00:59:54.380 --> 00:59:55.860
but I'm aware that I'm, you know,


00:59:55.860 --> 00:59:58.980
sometimes I'm doing things that aren't efficient in SQL.


00:59:58.980 --> 00:59:59.820
So if you've got a sluggish--


00:59:59.820 --> 01:00:01.780
- Or you don't know you're doing something inefficient,


01:00:01.780 --> 01:00:04.660
right, you might not be aware you forgot a join.


01:00:04.660 --> 01:00:05.500
- Exactly. - And so you have this


01:00:05.500 --> 01:00:06.740
N plus one problem where you're like,


01:00:06.740 --> 01:00:08.900
I thought I did one query, why are there 50 queries,


01:00:08.900 --> 01:00:10.380
51 queries on this page? - Exactly.


01:00:10.380 --> 01:00:12.460
- You know, it's like, well.


01:00:12.460 --> 01:00:14.500
- And so when you've got that sluggishness,


01:00:14.500 --> 01:00:15.500
you go to the time panel,


01:00:15.500 --> 01:00:18.100
you see that you're spending all your time in the SQL space,


01:00:18.100 --> 01:00:19.820
then you go to the SQL panel and you go,


01:00:19.820 --> 01:00:21.500
oh, okay, so this is where it is,


01:00:21.500 --> 01:00:23.900
I'm beating my database to death, why?


01:00:23.900 --> 01:00:25.240
And then you can figure out, like you said,


01:00:25.240 --> 01:00:26.380
oh, I need to add an index


01:00:26.380 --> 01:00:28.820
or I need to change the join or whatever.


01:00:28.820 --> 01:00:29.660
So.


01:00:29.660 --> 01:00:31.460
- Right, so in the Django debug toolbar,


01:00:31.460 --> 01:00:35.260
it has a time section that says CPU and total.


01:00:35.260 --> 01:00:37.740
And if the CPU time is the majority,


01:00:37.740 --> 01:00:39.380
then it's your Python code.


01:00:39.380 --> 01:00:42.100
If it's not, then it's like, what are you waiting on?


01:00:42.100 --> 01:00:44.200
Are you waiting on the database or an API


01:00:44.200 --> 01:00:45.620
or go look somewhere else


01:00:45.620 --> 01:00:47.300
'cause it's not your code exactly.


01:00:47.300 --> 01:00:51.640
It's an external resource that's holding it up, right?


01:00:51.640 --> 01:00:54.720
Yeah, so it helps you sort of pull these things through it.


01:00:54.720 --> 01:00:56.120
And it's information that's available


01:00:56.120 --> 01:00:57.340
in any profiler as well,


01:00:57.340 --> 01:00:59.360
but it's there in combined with other things.


01:00:59.360 --> 01:01:01.400
So you don't have to go do it separately.


01:01:01.400 --> 01:01:03.760
So there's other ones there,


01:01:03.760 --> 01:01:08.760
things like caching, headers, signal registering, logging,


01:01:08.760 --> 01:01:15.160
the list goes on and then it's a published mechanism


01:01:15.160 --> 01:01:16.560
for how you build your own panels.


01:01:16.560 --> 01:01:18.440
So even on the main site,


01:01:18.440 --> 01:01:20.760
there's another 19 panels with instructions


01:01:20.760 --> 01:01:22.140
on how to write your own.


01:01:22.140 --> 01:01:23.160
And if you go digging,


01:01:23.160 --> 01:01:25.360
there are people that aren't in the official list as well.


01:01:25.360 --> 01:01:28.100
So there are dozens and dozens of them out there.


01:01:28.100 --> 01:01:30.480
- Yeah, for sure.


01:01:30.480 --> 01:01:32.960
Probably in the awesome Django,


01:01:32.960 --> 01:01:34.460
I bet you pulled up, you know,


01:01:34.460 --> 01:01:38.440
I bet there's like a whole thing on the toolbar.


01:01:38.440 --> 01:01:41.800
- Yeah, it was right there at the top of your testing.


01:01:41.800 --> 01:01:42.640
That's right.


01:01:42.640 --> 01:01:45.120
- Yeah, I thought maybe there'd be a list of plug-ins.


01:01:45.120 --> 01:01:46.560
- Oh, a subsection, yeah.


01:01:46.560 --> 01:01:48.460
- Yeah, yeah, yeah, like a sub section.


01:01:48.460 --> 01:01:51.040
But these things are really nice,


01:01:51.040 --> 01:01:54.540
and I find them to be quite useful.


01:01:54.540 --> 01:01:55.800
Yeah, they've got different--


01:01:55.800 --> 01:01:56.880
I got the whole list here.


01:01:56.880 --> 01:02:00.120
Profiling, that's kind of cool.


01:02:00.120 --> 01:02:03.040
I guess one also, one really quick thing


01:02:03.040 --> 01:02:04.960
you might want to touch on for everybody


01:02:04.960 --> 01:02:09.360
is it might not be best to put this in production.


01:02:09.360 --> 01:02:10.120
>>Yes.


01:02:10.120 --> 01:02:12.160
>>I think there's a rule against turning this off


01:02:12.160 --> 01:02:13.760
in production.


01:02:13.760 --> 01:02:15.580
>>If I remember correctly, it will not


01:02:15.580 --> 01:02:18.540
if debug is set to true-- is to false, excuse me.


01:02:18.540 --> 01:02:20.420
So out of the box.


01:02:20.420 --> 01:02:22.620
So if you're following best practices


01:02:22.620 --> 01:02:25.100
of setting debug to false in your production environments,


01:02:25.100 --> 01:02:27.180
it won't be there.


01:02:27.180 --> 01:02:30.180
It doesn't hurt to belt and suspenders that, though.


01:02:30.180 --> 01:02:32.100
I usually put this-- if I'm using it,


01:02:32.100 --> 01:02:36.660
I usually put it inside of my requirements-dev.


01:02:36.660 --> 01:02:42.980
And I have a little hack I use to build up my installed apps


01:02:42.980 --> 01:02:46.260
that I add to it from local things, which there's a podcast


01:02:46.260 --> 01:02:48.940
in and of itself there as to how you configure in different


01:02:48.940 --> 01:02:53.240
environments. But I often only add this to that piece, or, you


01:02:53.240 --> 01:02:56.240
know, hackishly commented in out as I need to.


01:02:56.240 --> 01:03:02.220
Well, it's a little bit of a crude lever. But if it's not in


01:03:02.220 --> 01:03:05.420
the requirements that txt or pyproject.toml or whatever,


01:03:05.420 --> 01:03:08.540
you're not going to accidentally run the toolbar if it's not


01:03:08.540 --> 01:03:10.540
installed. Don't install it in production.


01:03:10.540 --> 01:03:11.620
Yep, exactly.


01:03:12.060 --> 01:03:18.860
effective, right? All right. How about some local favor?


01:03:18.860 --> 01:03:26.300
Yeah, local flavor. So this package, eons ago used to actually be inside of Django. And it just got


01:03:26.300 --> 01:03:30.700
kept getting bigger and bigger. And essentially, this is the localization information for


01:03:30.700 --> 01:03:36.940
different countries. So for example, the CA folder is for Canada, which is where I'm from,


01:03:36.940 --> 01:03:41.500
includes a list of all the provinces, that's what we call states. It's got a widget for


01:03:41.500 --> 01:03:43.920
for postal codes, which is what we call zip codes


01:03:43.920 --> 01:03:45.900
and social insurance numbers,


01:03:45.900 --> 01:03:48.680
which is what we call social insurance numbers.


01:03:48.680 --> 01:03:51.300
Although we use a different acronym for whatever reason.


01:03:51.300 --> 01:03:52.660
So essentially if you're using things


01:03:52.660 --> 01:03:56.580
like shipping addresses, you want local flavor.


01:03:56.580 --> 01:03:59.700
It's mostly just giant dictionaries


01:03:59.700 --> 01:04:01.340
and collections of tuples,


01:04:01.340 --> 01:04:03.580
but it's useful data that often


01:04:03.580 --> 01:04:04.860
you would end up writing yourself


01:04:04.860 --> 01:04:07.700
and it's always nice when somebody else is maintaining it.


01:04:07.700 --> 01:04:10.640
And for any fellow non-Americans listening,


01:04:10.640 --> 01:04:15.760
it is spelt without the U. I'm not sure if it was intentional when they picked the name


01:04:15.760 --> 01:04:20.360
that the name itself needs internationalization or whether that was just an amusing little


01:04:20.360 --> 01:04:23.360
accident but that's what it is.


01:04:23.360 --> 01:04:29.940
Yeah, pretty funny. Even just having a country code is great. Is this something that maybe


01:04:29.940 --> 01:04:34.200
makes sense to use outside of Django or is it or not?


01:04:34.200 --> 01:04:38.020
I'm not sure how easy, I've never done it.


01:04:38.020 --> 01:04:39.140
It might work.


01:04:39.140 --> 01:04:41.140
It really is just a long dictionary


01:04:41.140 --> 01:04:43.080
and collections of tuples,


01:04:43.080 --> 01:04:46.220
but some of it's kind of Django-esque.


01:04:46.220 --> 01:04:48.940
For example, the list of provinces is set up


01:04:48.940 --> 01:04:52.100
so that you can use it easily inside of a dropdown


01:04:52.100 --> 01:04:54.460
in a choices field.


01:04:54.460 --> 01:04:58.220
So you might be able to take advantage of it without that,


01:04:58.220 --> 01:04:59.940
but it's formatted in a fashion


01:04:59.940 --> 01:05:02.000
that makes sense in the Django world.


01:05:02.940 --> 01:05:04.940
Good to know. All right.


01:05:04.940 --> 01:05:07.940
We already talked about the import and the export buttons,


01:05:07.940 --> 01:05:09.940
but even more buttons on the admin.


01:05:09.940 --> 01:05:12.940
Even more buttons. Yes, you can always do with more buttons.


01:05:12.940 --> 01:05:15.940
So I've only used this one a couple times,


01:05:15.940 --> 01:05:17.940
but it saved me a whole bunch of work,


01:05:17.940 --> 01:05:20.940
so I thought it deserved a mention.


01:05:20.940 --> 01:05:25.940
The Django admin area pretty much is mapped to your model objects.


01:05:25.940 --> 01:05:28.940
It really is just sitting on top of your ORM.


01:05:28.940 --> 01:05:31.940
And every once in a while, you're going to need something


01:05:31.940 --> 01:05:34.320
that you want your support staff to be able to do


01:05:34.320 --> 01:05:37.520
that isn't really directly tied to the ORM.


01:05:37.520 --> 01:05:40.100
And in fact, I've seen libraries out there


01:05:40.100 --> 01:05:43.780
that hack things creating fake objects inside of the database


01:05:43.780 --> 01:05:46.200
so that they will show up in the ORM properly.


01:05:46.200 --> 01:05:49.040
And instead of doing that, you use Admin Extra Buttons.


01:05:49.040 --> 01:05:52.460
So this is really just a way of inserting views


01:05:52.460 --> 01:05:55.300
into your admin.


01:05:55.300 --> 01:05:58.980
And it's got a quick little mechanism for forms


01:05:58.980 --> 01:06:01.680
so that if you hit a button, it'll pop up the form for you,


01:06:01.680 --> 01:06:03.880
you can fill in the form, and then it'll give you the data


01:06:03.880 --> 01:06:06.380
from the form as a callback, and then you can do whatever


01:06:06.380 --> 01:06:09.380
you want with it. So where I've used it recently


01:06:09.380 --> 01:06:13.480
was I had a complex account creation mechanism


01:06:13.480 --> 01:06:15.980
that has to create five or six different objects


01:06:15.980 --> 01:06:18.780
that have to be tied together. So instead of having


01:06:18.780 --> 01:06:21.080
my support staff going in and using the admin


01:06:21.080 --> 01:06:23.080
to create each one of those separately,


01:06:23.080 --> 01:06:25.380
I gave them a little button, they fill in the form,


01:06:25.380 --> 01:06:28.080
and it creates all the objects and ties them together nicely.


01:06:28.080 --> 01:06:31.080
And actually, just a couple days ago, I added one


01:06:31.080 --> 01:06:35.080
which was sometimes I'll have in production code


01:06:35.080 --> 01:06:37.480
a couple accounts that are like sample accounts


01:06:37.480 --> 01:06:39.980
that you want to reset the data to a known state


01:06:39.980 --> 01:06:41.980
so that you can hand it off to demo somebody


01:06:41.980 --> 01:06:45.260
or quick if you're trying to sell a client or something.


01:06:45.260 --> 01:06:47.760
So this doesn't even require the form.


01:06:47.760 --> 01:06:49.960
There's a mechanism in here called confirm action,


01:06:49.960 --> 01:06:51.960
which essentially gives you the button,


01:06:51.960 --> 01:06:54.460
it pops up a little thing that says, "Are you sure you want to do this?"


01:06:54.460 --> 01:06:59.200
And if you say yes, it goes off and calls your little five lines of code.


01:06:59.200 --> 01:07:01.200
So it's nice and clean.


01:07:01.200 --> 01:07:05.800
The form rendering is, I think, ugly is the word,


01:07:05.800 --> 01:07:07.800
but that kind of fits with the--


01:07:07.800 --> 01:07:09.000
Traditional, traditional.


01:07:09.000 --> 01:07:10.000
It's traditional.


01:07:10.000 --> 01:07:12.800
It fits very nicely with what's inside of the Django admin.


01:07:12.800 --> 01:07:17.000
It doesn't look out of place, but there's nothing sexy with it.


01:07:17.000 --> 01:07:19.400
I have not used it in combination with Grappelli yet,


01:07:19.400 --> 01:07:22.800
so it'd be interesting to see what happens in that case.


01:07:22.800 --> 01:07:24.800
There's basically very little styling on the form,


01:07:24.800 --> 01:07:28.300
but it has saved me a whole bunch of code.


01:07:28.300 --> 01:07:31.300
And oftentimes, I find when you're writing things


01:07:31.300 --> 01:07:34.300
for your support staff, they're spending 90% of the time


01:07:34.300 --> 01:07:37.300
inside of the admin anyways, so pulling them out of it


01:07:37.300 --> 01:07:40.300
for one special page is a bit of a pain.


01:07:40.300 --> 01:07:43.300
And you usually have to write a whole bunch of extra stuff on top of it.


01:07:43.300 --> 01:07:45.800
And so this, because it inserts it right inside of the admin,


01:07:45.800 --> 01:07:47.800
means you don't have to get them into a different place,


01:07:47.800 --> 01:07:50.300
and they're in an interface that they know how to use,


01:07:50.300 --> 01:07:52.300
and makes things easier.


01:07:52.300 --> 01:07:54.300
So very much like that import/export.


01:07:54.300 --> 01:07:56.800
If import/export didn't exist and give you that button up top,


01:07:56.800 --> 01:07:58.300
this would be a way of building it.


01:07:58.300 --> 01:08:02.860
Yeah, really nice. And it's very decorator heavy.


01:08:02.860 --> 01:08:08.980
It is. Yes. Yeah, everything's a button or a view. And you've


01:08:08.980 --> 01:08:10.940
got up on the screen there, right? That's the confirm that I


01:08:10.940 --> 01:08:14.800
was talking about at the top, you call it, decorate the view.


01:08:14.800 --> 01:08:17.820
And that's because in this case, you're inserting it inside of


01:08:17.820 --> 01:08:21.180
the actual Django admin model pieces, right? So you have to


01:08:21.180 --> 01:08:24.820
essentially, the decorators are doing the registration to say,


01:08:24.820 --> 01:08:28.420
okay, this is extra code for the admin. It's how they're


01:08:28.420 --> 01:08:32.420
hooking it all. Yep. Yeah, it looks very, very useful. All


01:08:32.420 --> 01:08:35.620
right. We got a couple more. Yep, this one. I think I know


01:08:35.620 --> 01:08:38.660
the guy who created this one. I Yes. So this is a little bit of


01:08:38.660 --> 01:08:43.940
blatant self promotion. This is Django all a WL like the leather


01:08:43.940 --> 01:08:48.580
working tool. And yeah, this is one of mine. I if I had been


01:08:48.580 --> 01:08:51.060
aware of the Django extensions library at the time that I wrote


01:08:51.060 --> 01:08:53.540
this, I probably should have just contributed to the Django


01:08:53.540 --> 01:08:56.100
extensions library would have been the smarter thing. But at


01:08:56.100 --> 01:08:58.900
the time, I wasn't familiar with it. And since then, I've been


01:08:58.900 --> 01:09:03.220
maintaining this beast. It's a general collection of a whole


01:09:03.220 --> 01:09:06.780
bunch of crap like extensions that I just found I was writing


01:09:06.780 --> 01:09:08.900
over and over again, every single time I went to a client.


01:09:08.900 --> 01:09:12.060
So one of the times I was doing that the client, I went to the


01:09:12.060 --> 01:09:14.260
client and said, let's open source this stuff. And they


01:09:14.260 --> 01:09:17.540
went, Okay, great. And since then, I've been doing this. So


01:09:17.540 --> 01:09:21.740
you sell widgets, you don't sell Django admin extensions, like


01:09:21.740 --> 01:09:25.220
Let's make the world a better place and contribute back ideas.


01:09:25.220 --> 01:09:26.220
Exactly.


01:09:26.220 --> 01:09:27.220
This will hurt you.


01:09:27.220 --> 01:09:30.980
So big list of random crap, right?


01:09:30.980 --> 01:09:38.020
So a bunch of mix ins, CSS color utilities, some context processor pieces.


01:09:38.020 --> 01:09:39.980
There's a custom admin commands.


01:09:39.980 --> 01:09:40.980
Yep.


01:09:40.980 --> 01:09:47.060
There's decorators in here that make sure that you're doing a post with JSON content


01:09:47.060 --> 01:09:50.740
so that if somebody is calling your view in the illegal way,


01:09:50.740 --> 01:09:53.740
it screams ranked models.


01:09:53.740 --> 01:09:55.420
So one, two, three, four, five,


01:09:55.420 --> 01:09:57.700
and gives you a little thing inside of the admin


01:09:57.700 --> 01:09:59.620
to move them up and down.


01:09:59.620 --> 01:10:00.820
Some testing tools.


01:10:00.820 --> 01:10:04.380
So there's a custom test runner in here,


01:10:04.380 --> 01:10:06.700
which adds a whole bunch of features for doing things


01:10:06.700 --> 01:10:10.300
like getting out information out of the Django admin


01:10:10.300 --> 01:10:12.940
and checking that the fields in the admin are correct.


01:10:12.940 --> 01:10:17.660
So really just sort of a little catch all that's out there.


01:10:17.660 --> 01:10:21.620
But yeah, it's here and I happily take PRs.


01:10:21.620 --> 01:10:23.900
So go find it, break it.


01:10:23.900 --> 01:10:25.540
If you find it useful, great.


01:10:25.540 --> 01:10:27.740
If you don't send me a note and tell me why not


01:10:27.740 --> 01:10:29.220
and I'll fix it.


01:10:29.220 --> 01:10:30.060
- Yeah, lovely.


01:10:30.060 --> 01:10:31.100
It looks really useful.


01:10:31.100 --> 01:10:33.580
And then-


01:10:33.580 --> 01:10:36.560
- I'll stop with the shameless promotion after this one.


01:10:36.560 --> 01:10:40.980
This is Django Airplane.


01:10:40.980 --> 01:10:47.740
So I used to have to do a lot of traveling when I was consulting and being on a plane


01:10:47.740 --> 01:10:52.000
is a great place to get some uninterrupted four or five hours of coding in, unless you're


01:10:52.000 --> 01:10:55.400
coding on the web and particularly in the olden days when you didn't get Wi-Fi on the


01:10:55.400 --> 01:10:58.000
planes and even now it's spotty and expensive.


01:10:58.000 --> 01:10:59.960
You can't really count on it, yeah.


01:10:59.960 --> 01:11:04.880
So what I found was, you know, if I'm using something like Bootstrap from a CDN, I would


01:11:04.880 --> 01:11:08.720
get in and I'd be trying to run my Django site and be like, oh crap, nothing's looking


01:11:08.720 --> 01:11:11.220
right because the CDN's there.


01:11:11.220 --> 01:11:13.720
So this is essentially a little tag that you use anywhere


01:11:13.720 --> 01:11:18.720
where you would use an HRF for links or style sheets or whatever.


01:11:18.720 --> 01:11:24.560
And then there is a setting that defines the mode of the system.


01:11:24.560 --> 01:11:27.860
And if you're in build mode, anytime these tags find it,


01:11:27.860 --> 01:11:30.860
they'll go off, they'll grab the content, and they'll save it to the disk


01:11:30.860 --> 01:11:32.860
and just runs the page normally.


01:11:32.860 --> 01:11:36.160
And then when you're in cache mode, instead of trying to get to the internet,


01:11:36.160 --> 01:11:38.160
it pulls it off of the disk.


01:11:38.160 --> 01:11:43.840
So it's nothing terribly complicated, but it solved a particular problem that I was


01:11:43.840 --> 01:11:45.240
having a lot.


01:11:45.240 --> 01:11:49.960
And now that I'm not really traveling, I'm not touching it as much, but if folks out


01:11:49.960 --> 01:11:50.960
there find it useful.


01:11:50.960 --> 01:11:51.960
>>DANIEL: Except for change in the world, people travel less.


01:11:51.960 --> 01:11:52.960
I don't know.


01:11:52.960 --> 01:11:53.960
It's kind of weird.


01:11:53.960 --> 01:11:54.960
>>ANDREW: Yeah.


01:11:54.960 --> 01:11:55.960
Yeah.


01:11:55.960 --> 01:11:56.960
There's been a few changes.


01:11:56.960 --> 01:11:57.960
Life has changed.


01:11:57.960 --> 01:12:00.440
>>DANIEL: There have been changes.


01:12:00.440 --> 01:12:02.640
Although I did travel recently and it pandemonium.


01:12:02.640 --> 01:12:05.360
So if you want madness, you can go back and try to fly.


01:12:05.360 --> 01:12:06.360
Yeah.


01:12:06.360 --> 01:12:07.360
So this is really nice.


01:12:07.360 --> 01:12:12.980
you say airplane instead of a static ref to a CD and you say airplane and then the reference to the


01:12:12.980 --> 01:12:15.280
CDN and either it just passes through


01:12:15.280 --> 01:12:21.080
or it can download and then pass through or you can say I'm in this development mode just I


01:12:21.080 --> 01:12:27.480
Don't have I'm either at like a coffee shop or I'm traveling or whatever and just let me I'm you know


01:12:27.480 --> 01:12:33.280
Another good use case not just airplane even though that's the name is if you're at a hotel with notoriously bad internet


01:12:33.280 --> 01:12:35.380
that you're traveling for work


01:12:35.380 --> 01:12:36.640
and you gotta get a presentation


01:12:36.640 --> 01:12:38.640
or new version ready for the morning,


01:12:38.640 --> 01:12:41.280
like that can be a super frustrating experience.


01:12:41.280 --> 01:12:42.640
- Yeah, well, it's, you know,


01:12:42.640 --> 01:12:44.640
it essentially moves anything that's normally


01:12:44.640 --> 01:12:46.640
on your internet down to your hard drive


01:12:46.640 --> 01:12:48.840
if you've tagged it properly.


01:12:48.840 --> 01:12:50.480
And there's a couple of management commands as well.


01:12:50.480 --> 01:12:52.560
So like, it'll tell you what's in your cache


01:12:52.560 --> 01:12:53.680
and you know, how to see it


01:12:53.680 --> 01:12:55.740
and how to wipe it out if you need to.


01:12:55.740 --> 01:12:57.320
So there's a couple of little utilities,


01:12:57.320 --> 01:13:01.000
but like I said, it's one of those libraries


01:13:01.000 --> 01:13:03.880
that is simple, doesn't do a lot,


01:13:03.880 --> 01:13:05.520
but solves a particular problem.


01:13:05.520 --> 01:13:08.080
So if you're having that problem, go for it.


01:13:08.080 --> 01:13:09.080
>>Luis: Yeah, fantastic.


01:13:09.080 --> 01:13:11.160
Your example is for CSS.


01:13:11.160 --> 01:13:16.200
Can I leverage this to do JSON API somehow,


01:13:16.200 --> 01:13:18.080
like offline some API calls or anything?


01:13:18.080 --> 01:13:20.720
Or is there not really a way to fit that together?


01:13:20.720 --> 01:13:23.480
>>Tom: I don't think it would work.


01:13:23.480 --> 01:13:25.760
If it's a straight URL that was always


01:13:25.760 --> 01:13:28.560
coming back with the same value and it was hard coded,


01:13:28.560 --> 01:13:30.480
it probably shouldn't care.


01:13:30.480 --> 01:13:34.200
But yeah, it would depend on how you were using it.


01:13:34.200 --> 01:13:35.440
- Yeah, sure.


01:13:35.440 --> 01:13:36.800
All right, let's see.


01:13:36.800 --> 01:13:38.600
Last one.


01:13:38.600 --> 01:13:42.720
That's when you always put last security, right?


01:13:42.720 --> 01:13:43.960
Just kidding.


01:13:43.960 --> 01:13:44.960
- Okay, we're skipping ahead.


01:13:44.960 --> 01:13:45.920
Got it, no problem.


01:13:45.920 --> 01:13:47.000
- Oh, are we skipping ahead?


01:13:47.000 --> 01:13:50.240
- I had Django extensions next, so.


01:13:50.240 --> 01:13:51.720
- Oh yeah.


01:13:51.720 --> 01:13:53.520
I think I just didn't open that one.


01:13:53.520 --> 01:13:54.680
- Okay, that's fine.


01:13:54.680 --> 01:13:58.280
So I kind of touched on this one


01:13:58.280 --> 01:14:00.200
when I was talking about Django all.


01:14:00.200 --> 01:14:03.420
This is a collection of things


01:14:03.420 --> 01:14:05.820
that probably should just be built into Django.


01:14:05.820 --> 01:14:07.640
It's really what it comes down to.


01:14:07.640 --> 01:14:09.240
There's a whole bunch of different areas.


01:14:09.240 --> 01:14:11.600
Again, it's this huge hodgepodge.


01:14:11.600 --> 01:14:13.520
So there's extra tools for the admin,


01:14:13.520 --> 01:14:16.720
more management commands, more signals,


01:14:16.720 --> 01:14:20.720
template filters, extra model fields, job management.


01:14:20.720 --> 01:14:22.280
It's a very lightweight job management,


01:14:22.280 --> 01:14:24.580
but if you're not at the level where you want to use Celery


01:14:24.580 --> 01:14:27.360
or something like that, this might be good enough for you.


01:14:27.360 --> 01:14:30.960
some model mix-ins, permission mix-ins, extra validators,


01:14:30.960 --> 01:14:32.960
some utility methods.


01:14:32.960 --> 01:14:34.760
The one I use here all the time,


01:14:34.760 --> 01:14:37.200
particularly when I was learning Django Ninja


01:14:37.200 --> 01:14:40.600
and I was trying to understand how the router worked


01:14:40.600 --> 01:14:43.520
is a management command called show URLs.


01:14:43.520 --> 01:14:45.640
It'll show you all the URLs you've registered,


01:14:45.640 --> 01:14:48.840
what their keywords are and how to call them.


01:14:48.840 --> 01:14:51.440
So it's a nice little introspective kind of thing


01:14:51.440 --> 01:14:53.880
to work through backwards.


01:14:53.880 --> 01:14:58.880
It's got another management command called run script.


01:14:58.880 --> 01:15:02.600
And this one's so useful that I had the exact same thing


01:15:02.600 --> 01:15:04.180
in Django all again, as I said,


01:15:04.180 --> 01:15:06.840
I should have just looked at this library first.


01:15:06.840 --> 01:15:10.840
And the idea of run script is it gives you a Django context


01:15:10.840 --> 01:15:12.540
for running a Python script.


01:15:12.540 --> 01:15:15.640
So this is kind of like the dash dot slash management


01:15:15.640 --> 01:15:18.740
shell command, where it gives you inside of a Django context


01:15:18.740 --> 01:15:21.620
but it does it for the script that you're running.


01:15:21.620 --> 01:15:22.460
So if you--


01:15:22.460 --> 01:15:23.280
- Oh, that's cool.


01:15:23.280 --> 01:15:25.780
- So things like the database are initialized and stuff?


01:15:25.780 --> 01:15:26.620
- Exactly.


01:15:26.620 --> 01:15:27.440
- Okay.


01:15:27.440 --> 01:15:31.200
- So I find I generally use it if I'm debugging, right?


01:15:31.200 --> 01:15:32.920
So if I've got three or four things I want to do


01:15:32.920 --> 01:15:34.840
in the database and I need to run it three or four times


01:15:34.840 --> 01:15:36.560
until I figured out what the problem is,


01:15:36.560 --> 01:15:38.520
rather than constantly doing that in the REPL


01:15:38.520 --> 01:15:40.600
over and over again, you stick it in a file,


01:15:40.600 --> 01:15:42.740
run the script, look at your debug,


01:15:42.740 --> 01:15:45.120
or use it in the debugger, of course,


01:15:45.120 --> 01:15:45.940
is the other thing there,


01:15:45.940 --> 01:15:47.380
'cause you can step through that a lot easier


01:15:47.380 --> 01:15:50.240
than you can say inside of a REPL.


01:15:50.240 --> 01:15:52.320
So a lot of good stuff here.


01:15:52.320 --> 01:15:54.040
And it's one of those libraries that I find


01:15:54.040 --> 01:15:55.120
every time I look at it, I'm like,


01:15:55.120 --> 01:15:56.280
oh, I have to remember that's there.


01:15:56.280 --> 01:15:58.640
And then I forget, but you always have to sort of go back


01:15:58.640 --> 01:15:59.780
and dig through it.


01:15:59.780 --> 01:16:03.000
So it's a good little toolbox.


01:16:03.000 --> 01:16:06.840
- SQL diff looks cool for probably pre-post migration.


01:16:06.840 --> 01:16:09.960
- Yeah, there's three or four SQL commands in there


01:16:09.960 --> 01:16:13.800
that'll tell you how your migrations are,


01:16:13.800 --> 01:16:15.840
how they've changed, how you're managing them,


01:16:15.840 --> 01:16:17.180
what it's doing to them.


01:16:17.180 --> 01:16:20.720
Django has since added a couple of things


01:16:20.720 --> 01:16:22.560
that are similar to it inside of the core library,


01:16:22.560 --> 01:16:24.760
but these are definitely more powerful.


01:16:24.760 --> 01:16:26.080
So yeah, if you're trying to figure out


01:16:26.080 --> 01:16:27.120
what's going on with your models,


01:16:27.120 --> 01:16:29.760
there's some interesting stuff in there as well.


01:16:29.760 --> 01:16:30.960
- Yeah, fantastic.


01:16:30.960 --> 01:16:32.960
All right, maybe that brings us to Django AllAuth.


01:16:32.960 --> 01:16:34.800
- There we go, this is it.


01:16:34.800 --> 01:16:36.080
This is the last one.


01:16:36.080 --> 01:16:40.080
So this is Django AllAuth.


01:16:40.080 --> 01:16:43.080
This is your go-to place for authentication.


01:16:43.080 --> 01:16:45.320
It has a series of workflows in it


01:16:45.320 --> 01:16:47.680
that are your typical user management things


01:16:47.680 --> 01:16:51.280
like sign up, email addresses, email verification,


01:16:51.280 --> 01:16:52.980
password resets.


01:16:52.980 --> 01:16:55.880
And so I don't usually use it for that.


01:16:55.880 --> 01:16:57.700
I use it for the thing that most people use it for,


01:16:57.700 --> 01:16:59.060
which is it's got this hook


01:16:59.060 --> 01:17:01.600
for your social media account authentication.


01:17:01.600 --> 01:17:06.040
So most social media sites use either OAuth or OAuth 2.


01:17:06.040 --> 01:17:08.120
And so if you've ever been on one of those webpages


01:17:08.120 --> 01:17:10.560
that says, you can sign in or create an account


01:17:10.560 --> 01:17:12.720
with your Facebook account or your Google account,


01:17:12.720 --> 01:17:14.960
this is a plugin that allows you to do that


01:17:14.960 --> 01:17:16.520
inside of your Django space.


01:17:16.520 --> 01:17:19.360
They have over a hundred different providers.


01:17:19.360 --> 01:17:22.460
I stopped counting. I just gave up after a while.


01:17:22.460 --> 01:17:23.460
Yeah.


01:17:23.460 --> 01:17:26.960
Most of them are overlays on top of OAuth 2,


01:17:26.960 --> 01:17:29.160
but there are also some that are custom as well.


01:17:29.160 --> 01:17:34.000
And what happens is when a user signs up using one of these,


01:17:34.000 --> 01:17:36.680
it still uses the standard Django user,


01:17:36.680 --> 01:17:39.140
but then it creates an associated object.


01:17:39.140 --> 01:17:42.940
And the advantage of this design is it means different users can use different things.


01:17:42.940 --> 01:17:46.420
I can sign in using Facebook, you can sign in using Git


01:17:46.420 --> 01:17:52.380
or Google or what GitHub or Google, but we still end up with in the same user style account


01:17:52.380 --> 01:17:53.700
inside of the database.


01:17:53.700 --> 01:17:57.180
But the other advantage of it is you can also associate multiple things.


01:17:57.180 --> 01:18:00.740
So say you were writing a site that wanted people to be able to log in through GitHub


01:18:00.740 --> 01:18:05.980
or GitLab, but also wanted to be able to tweet, where you could not necessarily allow logging


01:18:05.980 --> 01:18:09.740
in with Twitter, but you could allow them to authenticate through it so that they you


01:18:09.740 --> 01:18:11.140
could tweet on their behalf.


01:18:11.140 --> 01:18:15.100
So it allows you to start connecting and play with all those things.


01:18:15.100 --> 01:18:17.620
The plugin, the workflow is plugin.


01:18:17.620 --> 01:18:18.460
I love that.


01:18:18.460 --> 01:18:19.280
Try that again.


01:18:19.280 --> 01:18:21.140
The workflow is pluggable as well.


01:18:21.140 --> 01:18:23.780
So there's hooks inside of the signup process.


01:18:23.780 --> 01:18:25.540
So let's say you've got some questions


01:18:25.540 --> 01:18:27.420
that you need to ask the user when they sign up,


01:18:27.420 --> 01:18:30.460
like extra information that Django doesn't normally have.


01:18:30.460 --> 01:18:32.700
It's got a flow for that that helps you with it.


01:18:32.700 --> 01:18:36.000
So really, really comprehensive library.


01:18:36.000 --> 01:18:38.300
The only thing I find that's challenging with this


01:18:38.300 --> 01:18:40.260
really has nothing to do with the library itself.


01:18:40.260 --> 01:18:43.820
It's just that third party authentication tends to be messy


01:18:43.820 --> 01:19:10.580
and you're, you're, you are always dealing with tokens and provider sites and all the rest of it. And you're going to register your, your OAuth application at, you know, exactly. And you're always going to be in this space of, did I screw it up? Is it the token that's not right? Am I not hooking the library incorrectly? I always find it's a little finicky. Now once you get it going, it's fine. But there it does tend to be a little cumbersome getting there.


01:19:10.780 --> 01:19:22.300
Yeah, it's a little magical and like the traditional sense like it can just work amazingly and but if it doesn't like I just don't know what the incantation was to give it is because it's just not it won't it won't do the thing.


01:19:22.300 --> 01:19:31.580
You're debugging something that is somebody else's responsibilities you're not getting a lot of information out of the host system usually.


01:19:31.660 --> 01:19:36.580
Yeah, and often it's encrypted and signed and like stuff doesn't match.


01:19:36.580 --> 01:19:39.500
It's like, how are you supposed to know how it doesn't match anyway?


01:19:39.500 --> 01:19:44.580
But I mean, that's the story of OAuth and OAuth2, not this library problem, right?


01:19:44.580 --> 01:19:46.620
The library makes it a lot easier.


01:19:46.620 --> 01:19:51.860
It's just like you said, there's still a level that is painful.


01:19:51.860 --> 01:19:54.380
It swims in complex water.


01:19:54.380 --> 01:19:58.500
One thing that is kind of nice here is you can unroll your OAuth as well.


01:19:58.500 --> 01:20:01.460
You can say I did originally sign up on GitHub,


01:20:01.460 --> 01:20:06.660
But I just want to make an account password from my account now and let you drop that out, which is I think kind of cool.


01:20:06.660 --> 01:20:14.940
Yeah, I think it was a very smart architectural decision to continue to use the Django authentication mechanism underneath.


01:20:14.940 --> 01:20:20.100
It means from a support standpoint, you don't have to worry about a lot of things.


01:20:20.100 --> 01:20:21.740
You can still see them inside of the admin.


01:20:21.740 --> 01:20:23.420
You're not have to worry those pieces.


01:20:23.420 --> 01:20:28.860
And like you said, if something goes wrong with somebody's Facebook account, you don't lose anything.


01:20:28.860 --> 01:20:31.180
you basically, you know, they can send you a support email


01:20:31.180 --> 01:20:32.860
and you can send them a password reset


01:20:32.860 --> 01:20:35.580
off of a primary account and re-hook them up another way,


01:20:35.580 --> 01:20:38.540
which is a thing of beauty.


01:20:38.540 --> 01:20:39.580
- Yeah, that's great.


01:20:39.580 --> 01:20:43.760
All right, well, I would say we're a little over time,


01:20:43.760 --> 01:20:45.260
but it's been a super interesting list


01:20:45.260 --> 01:20:46.140
to talk through with.


01:20:46.140 --> 01:20:50.380
So let's maybe call it a wrap


01:20:50.380 --> 01:20:53.180
on however many topics we came up with.


01:20:53.180 --> 01:20:57.100
A whole bunch of cool ideas for doing more with Django


01:20:57.100 --> 01:20:59.020
and Python web apps in general.


01:20:59.020 --> 01:20:59.940
So thanks for that.


01:20:59.940 --> 01:21:02.180
- Happy to do it.


01:21:02.180 --> 01:21:03.780
- Yeah, now before we get out of here,


01:21:03.780 --> 01:21:05.580
got to answer the two questions.


01:21:05.580 --> 01:21:07.700
- Well, I've answered one of them already.


01:21:07.700 --> 01:21:09.900
(both laughing)


01:21:09.900 --> 01:21:12.780
- You can write some code, but what editor do you use?


01:21:12.780 --> 01:21:14.300
- Yeah, so I'm Vim.


01:21:14.300 --> 01:21:16.500
And for those who are taking the course,


01:21:16.500 --> 01:21:17.460
I used PyCharm there,


01:21:17.460 --> 01:21:19.300
so you don't have to understand antiquated,


01:21:19.300 --> 01:21:22.100
speaking of magic, you don't have to follow along there.


01:21:22.100 --> 01:21:25.820
So I did use PyCharm there, but Vim is still my standard.


01:21:25.820 --> 01:21:29.000
- Right on, and then notable PyPI package.


01:21:29.000 --> 01:21:31.040
It can be any one of these you wanna give a shout out to.


01:21:31.040 --> 01:21:33.880
We've really kind of answered that question a bunch of times


01:21:33.880 --> 01:21:35.840
but if you wanna give a shout out to something else as well.


01:21:35.840 --> 01:21:38.840
- I got something else for you, which is AsciiMatics.


01:21:38.840 --> 01:21:41.960
So I do a lot of Tui work


01:21:41.960 --> 01:21:44.720
and I'm really keen on this library.


01:21:44.720 --> 01:21:47.280
They have a bunch of form widget stuff


01:21:47.280 --> 01:21:50.260
and also a whole bunch of cool, awesome


01:21:50.260 --> 01:21:52.960
80s style animation bits and pieces.


01:21:52.960 --> 01:21:55.800
Core developer is a guy named Peter Britton.


01:21:55.800 --> 01:21:58.000
Very responsive, always looking for MR.


01:21:58.000 --> 01:21:59.840
So yay, Peter and AsciiMatic.


01:21:59.840 --> 01:22:02.080
So if you're into this space,


01:22:02.080 --> 01:22:04.600
this is definitely something to check out.


01:22:04.600 --> 01:22:06.040
- Wow, amazing.


01:22:06.040 --> 01:22:07.440
Yeah, it looks pretty awesome.


01:22:07.440 --> 01:22:08.960
All right, great example.


01:22:08.960 --> 01:22:10.320
All right, final call to action.


01:22:10.320 --> 01:22:13.040
So many of the things that we've talked about here,


01:22:13.040 --> 01:22:13.880
if they're interesting,


01:22:13.880 --> 01:22:15.600
people wanna learn how to actually use them,


01:22:15.600 --> 01:22:18.460
Grappelli, create your own admin command,


01:22:18.460 --> 01:22:20.720
a bunch of other stuff covered in your course.


01:22:20.720 --> 01:22:23.880
So you can check that out over at talkpython.fm.


01:22:23.880 --> 01:22:26.800
So I'm gonna go ahead and click on the course.


01:22:26.800 --> 01:22:28.880
And I'm gonna go ahead and click on the course.


01:22:28.880 --> 01:22:30.800
And I'm gonna go ahead and click on the course.


01:22:30.800 --> 01:22:32.800
And I'm gonna go ahead and click on the course.


01:22:32.800 --> 01:22:34.800
And I'm gonna go ahead and click on the course.


01:22:34.800 --> 01:22:36.800
And I'm gonna go ahead and click on the course.


01:22:36.800 --> 01:22:38.800
And I'm gonna go ahead and click on the course.


01:22:38.800 --> 01:22:40.800
And I'm gonna go ahead and click on the course.


01:22:40.800 --> 01:22:42.800
And I'm gonna go ahead and click on the course.


01:22:42.800 --> 01:22:44.800
And I'm gonna go ahead and click on the course.


01:22:44.800 --> 01:22:46.800
And I'm gonna go ahead and click on the course.


01:22:46.800 --> 01:22:48.800
And I'm gonna go ahead and click on the course.


01:22:48.800 --> 01:22:50.800
And I'm gonna go ahead and click on the course.


01:22:50.800 --> 01:22:52.800
And I'm gonna go ahead and click on the course.


01:22:52.800 --> 01:22:56.600
If you're, you know, if you just want to play a little bit,


01:22:56.600 --> 01:22:59.600
then, or you're learning more about how Django works,


01:22:59.600 --> 01:23:03.380
the debug toolbar is a fantastic way of sort of learning


01:23:03.380 --> 01:23:05.080
some of the internals and taking your Django


01:23:05.080 --> 01:23:07.400
to the next level, 'cause it's exposing a bunch of that stuff


01:23:07.400 --> 01:23:10.520
that you kind of think you know how it works.


01:23:10.520 --> 01:23:12.920
So it's a nice little place of doing a tutorial.


01:23:12.920 --> 01:23:15.800
So those might be good places to start.


01:23:15.800 --> 01:23:16.640
- Yeah, that's cool.


01:23:16.640 --> 01:23:18.200
The framework tries to hide a lot of that stuff.


01:23:18.200 --> 01:23:21.240
The toolbar will like reveal it, what's going on, right?


01:23:21.240 --> 01:23:23.200
Yeah, well as good framework should,


01:23:23.200 --> 01:23:24.840
but every once in a while you want to see


01:23:24.840 --> 01:23:26.800
the guy behind the curtain, so.


01:23:26.800 --> 01:23:27.640
- That's right.


01:23:27.640 --> 01:23:30.520
All right, Chris, well, thank you so much for being here.


01:23:30.520 --> 01:23:32.040
It's been a whole lot of fun.


01:23:32.040 --> 01:23:33.640
- Yeah, enjoyed it.


01:23:33.640 --> 01:23:35.080
- Yeah, same, see ya.

