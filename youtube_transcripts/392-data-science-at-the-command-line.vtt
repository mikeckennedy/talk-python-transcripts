WEBVTT

00:00:00.000 --> 00:00:05.000
Hey, YouTube. Hey, Jeroen.


00:00:05.000 --> 00:00:07.000
Hey, Michael.


00:00:07.000 --> 00:00:09.000
Hey, fantastic to have you here.


00:00:09.000 --> 00:00:13.000
Thanks, everybody, for watching live.


00:00:13.000 --> 00:00:15.000
If you've got comments, thoughts, feedback,


00:00:15.000 --> 00:00:17.000
throw them into the live chat,


00:00:17.000 --> 00:00:19.000
and we'll try to make them part of the show.


00:00:19.000 --> 00:00:21.000
With that, let's kick it off.


00:00:21.000 --> 00:00:23.000
Jeroen, welcome to Talk Python to Me.


00:00:23.000 --> 00:00:26.000
Hey, thank you. I'm very happy to be here.


00:00:26.000 --> 00:00:29.000
Yeah, I'm really happy to have you here.


00:00:29.000 --> 00:00:34.600
I saw your book and the title was Data Science at the Command Line.


00:00:34.600 --> 00:00:37.000
I thought, okay, that's different.


00:00:37.000 --> 00:00:40.200
You know, there's a lot of people that talk about data science tools


00:00:40.200 --> 00:00:42.000
and JupyterLab's amazing.


00:00:42.000 --> 00:00:46.700
And like, if you look over the fence, like RStudio and those kinds of things.


00:00:46.700 --> 00:00:51.200
And yet, so much of what we can kind of do and orchestrate


00:00:51.200 --> 00:00:54.500
and create as a building block happens in the terminal.


00:00:54.500 --> 00:00:57.600
And bringing some of these data science ideas


00:00:57.600 --> 00:01:01.840
and some of these concepts from the terminal to support data scientists, I think is a really


00:01:01.840 --> 00:01:02.840
cool idea.


00:01:02.840 --> 00:01:04.320
So we're going to have a great time talking about it.


00:01:04.320 --> 00:01:05.320
Yeah, yeah.


00:01:05.320 --> 00:01:07.280
I love to talk about this.


00:01:07.280 --> 00:01:09.320
And yeah, you're right.


00:01:09.320 --> 00:01:15.160
I still find it an interesting juxtaposition of these two terms, data science and the command


00:01:15.160 --> 00:01:16.160
line.


00:01:16.160 --> 00:01:24.000
One being, well, nowadays, let's say 10 years old, at least the term is, and the other one,


00:01:24.000 --> 00:01:26.640
the command line is over 50 years old.


00:01:26.640 --> 00:01:30.480
- Yeah, the command line is, it's ancient


00:01:30.480 --> 00:01:32.000
in computer terms, right?


00:01:32.000 --> 00:01:36.000
It's one of the absolute very first ways


00:01:36.000 --> 00:01:37.600
of interacting with computers.


00:01:37.600 --> 00:01:42.500
I mean, you've got cards where you programmed on paper


00:01:42.500 --> 00:01:45.400
and then you had the shell, right after that.


00:01:45.400 --> 00:01:47.320
- Before there were any screens.


00:01:47.320 --> 00:01:49.320
- Yeah, yeah.


00:01:49.320 --> 00:01:53.060
Yeah, when computers were green, they were all green.


00:01:53.060 --> 00:01:54.180
It was amazing.


00:01:54.180 --> 00:01:57.520
Okay, so I'm looking forward to diving into that


00:01:57.520 --> 00:01:58.860
and it's gonna be a lot of fun.


00:01:58.860 --> 00:02:01.260
And I just wanna also put out there for people who are like,


00:02:01.260 --> 00:02:04.340
but I'm not a data scientist, so should I check out?


00:02:04.340 --> 00:02:07.740
I actually think there's a ton of cool ideas in there


00:02:07.740 --> 00:02:14.300
just for people who do all sorts of Python


00:02:14.300 --> 00:02:15.420
and other types of programming.


00:02:15.420 --> 00:02:17.580
It's not just data scientists, right?


00:02:17.580 --> 00:02:18.700
- No, absolutely.


00:02:18.700 --> 00:02:23.700
And I mean, I don't really care much for titles,


00:02:24.100 --> 00:02:28.260
but even when you're an engineer or a developer,


00:02:28.260 --> 00:02:32.720
you would be surprised if you really think about


00:02:32.720 --> 00:02:35.380
how much data you actually work with.


00:02:35.380 --> 00:02:38.680
I mean, just log files on a server,


00:02:38.680 --> 00:02:42.400
that's data too.


00:02:42.400 --> 00:02:47.400
So there are still a lot of opportunities


00:02:47.400 --> 00:02:48.520
to use the command line,


00:02:48.520 --> 00:02:51.420
even if you don't consider yourself


00:02:51.420 --> 00:02:53.480
to be a data scientist per se.


00:02:53.480 --> 00:02:55.200
- Yeah, I totally agree.


00:02:55.200 --> 00:02:56.440
All right, let's start with your story.


00:02:56.440 --> 00:03:00.560
How'd you get into programming and data science and Python?


00:03:00.560 --> 00:03:02.760
I know you do Python and R and some other things.


00:03:02.760 --> 00:03:05.760
So how'd you get into programming?


00:03:05.760 --> 00:03:10.760
- Yeah, it actually started when I was about 12 years old.


00:03:10.760 --> 00:03:14.800
We got this old computer.


00:03:14.800 --> 00:03:18.520
It was already old by then, the 286.


00:03:18.520 --> 00:03:21.440
And I opened up this program


00:03:21.440 --> 00:03:23.900
and I wanted to write a story.


00:03:23.900 --> 00:03:27.380
And I was just typing, I was journaling,


00:03:27.380 --> 00:03:29.980
and then I got all these error messages.


00:03:29.980 --> 00:03:34.500
Turns out the program that I had opened was QBasic,


00:03:34.500 --> 00:03:36.700
and it didn't really like what I had to say.


00:03:36.700 --> 00:03:39.500
And then I started reading the help,


00:03:39.500 --> 00:03:41.340
and then I realized like,


00:03:41.340 --> 00:03:45.380
"Hey, I can make this computer do things.


00:03:45.380 --> 00:03:47.820
It just needs a particular language."


00:03:47.820 --> 00:03:51.820
And that's really how I got into programming.


00:03:51.820 --> 00:03:54.300
Yeah, and then of course,


00:03:54.300 --> 00:03:57.300
there's a whole range of programming languages


00:03:57.300 --> 00:03:58.660
that then come by.


00:03:58.660 --> 00:04:05.700
Visual Basic at a certain point, Pascal, Java, C.


00:04:05.700 --> 00:04:07.620
And you know what?


00:04:07.620 --> 00:04:08.660
I've forgotten most of it.


00:04:08.660 --> 00:04:13.420
So if this sounds intimidating, then please don't worry.


00:04:14.420 --> 00:04:19.420
But yeah, nowadays Python plays a big role


00:04:19.420 --> 00:04:24.500
in my professional career, also R, right?


00:04:24.500 --> 00:04:27.820
And those two happen to be the most popular


00:04:27.820 --> 00:04:30.520
programming languages for doing data science.


00:04:30.520 --> 00:04:35.100
And JavaScript, obviously,


00:04:35.100 --> 00:04:37.260
when you're doing some more front-end work.


00:04:37.260 --> 00:04:40.540
- JavaScript finds its way into all these little cracks.


00:04:40.540 --> 00:04:42.020
You're like, why JavaScript?


00:04:42.020 --> 00:04:46.400
Come on, I was just looking at programmable dynamic DNS


00:04:46.400 --> 00:04:47.840
as a service.


00:04:47.840 --> 00:04:49.760
And the way you program it is you, I know,


00:04:49.760 --> 00:04:52.120
and you jam in little bits of JavaScript


00:04:52.120 --> 00:04:55.080
to make a decision on how to like route a DNS query.


00:04:55.080 --> 00:04:57.120
I'm like, JavaScript.


00:04:57.120 --> 00:04:58.360
- Oh yeah.


00:04:58.360 --> 00:05:03.360
I'm now using Eleventy, which is a static site generator.


00:05:03.360 --> 00:05:08.760
And ironically enough, it uses JavaScript.


00:05:08.760 --> 00:05:10.000
- Yeah, sure.


00:05:10.000 --> 00:05:11.040
- Yeah.


00:05:11.040 --> 00:05:11.880
- That's fantastic.


00:05:11.880 --> 00:05:13.920
- There are really good things about Eleventy


00:05:13.920 --> 00:05:15.900
and I just started using Hugo,


00:05:15.900 --> 00:05:17.880
which is also a static site generator,


00:05:17.880 --> 00:05:19.600
but that one's written in Go.


00:05:19.600 --> 00:05:22.040
And I just decided I care about writing in Markdown


00:05:22.040 --> 00:05:24.200
and I want a static site and I don't care,


00:05:24.200 --> 00:05:25.800
long as I run a command on the terminal.


00:05:25.800 --> 00:05:27.400
Actually, I want to tell the story a little bit


00:05:27.400 --> 00:05:30.920
about sort of coordinating over the shell


00:05:30.920 --> 00:05:32.580
for some of these static site things.


00:05:32.580 --> 00:05:34.880
But I decided I don't care if it's,


00:05:34.880 --> 00:05:37.320
the guts of it are in the language that I can program,


00:05:37.320 --> 00:05:38.240
it's a tool.


00:05:38.240 --> 00:05:40.480
If it's a good tool for me, I'm gonna use it.


00:05:40.480 --> 00:05:42.640
Okay, so that's how you got into programming.


00:05:42.640 --> 00:05:43.480
How about day to day?


00:05:43.480 --> 00:05:45.120
What are you doing these days?


00:05:45.120 --> 00:05:50.120
- Yeah, so at this very moment, as we're recording this,


00:05:50.120 --> 00:05:54.800
I have my own company called Data Science Workshops,


00:05:54.800 --> 00:05:59.720
where I give training at companies to developers


00:05:59.720 --> 00:06:02.340
and researchers and occasionally managers.


00:06:02.340 --> 00:06:07.480
But I have decided to stop with that.


00:06:07.480 --> 00:06:13.480
So in a couple of weeks, I'll actually join another company.


00:06:13.480 --> 00:06:17.380
So in the past six years, I have...


00:06:17.380 --> 00:06:24.840
We can talk about how that company came about and it's probably related to everything, of course.


00:06:24.840 --> 00:06:31.980
But I just want to say that this is actually the very first time that I'm talking about this,


00:06:31.980 --> 00:06:36.800
but I'm going to be a machine learning engineer.


00:06:36.800 --> 00:06:45.200
So there are two reasons why I decided to stop with my own company.


00:06:45.200 --> 00:06:50.800
First of all, I really miss working with people, working with colleagues.


00:06:50.800 --> 00:06:53.320
And secondly, I miss building things.


00:06:53.320 --> 00:07:01.800
So that's why I'm joining, well, January 1st, I'm joining Xomnia, a consultancy based in


00:07:01.800 --> 00:07:03.640
Amsterdam, the Netherlands.


00:07:03.640 --> 00:07:04.640
Excellent.


00:07:04.640 --> 00:07:07.320
- That sounds really fun.


00:07:07.320 --> 00:07:10.600
I also run my own company and I really enjoy it,


00:07:10.600 --> 00:07:12.740
but I completely get what you're saying.


00:07:12.740 --> 00:07:17.440
Sometimes it's nice to be with a team.


00:07:17.440 --> 00:07:21.880
And you also, it makes you learn different skills


00:07:21.880 --> 00:07:25.900
or hone different skills to show up at a client company


00:07:25.900 --> 00:07:29.700
where they've got a million requests an hour


00:07:29.700 --> 00:07:31.640
trying to answer something which machine learning


00:07:31.640 --> 00:07:35.480
versus doing some research and talking about


00:07:35.480 --> 00:07:36.520
how to improve the shell, right?


00:07:36.520 --> 00:07:38.280
These are two very different jobs.


00:07:38.280 --> 00:07:42.480
And so it's cool to sort of mix up the career across those.


00:07:42.480 --> 00:07:44.480
- Say again?


00:07:44.480 --> 00:07:45.960
- It's great to mix up your career


00:07:45.960 --> 00:07:48.040
and do some of both, right?


00:07:48.040 --> 00:07:49.840
'Cause if all you did is work at a consultancy,


00:07:49.840 --> 00:07:51.720
you'd be like, I can't wait to start my own company


00:07:51.720 --> 00:07:52.960
and do something else.


00:07:52.960 --> 00:07:54.120
- Right, right, right.


00:07:54.120 --> 00:07:57.680
And you know, the company just happened.


00:07:57.680 --> 00:08:03.720
That's actually thanks to the book that I wrote a long time ago.


00:08:03.720 --> 00:08:09.380
Once it was done, the first edition, that is, in 2014,


00:08:09.380 --> 00:08:13.260
and we're talking about Data Science at the command line here,


00:08:13.260 --> 00:08:15.260
I was asked to give a workshop.


00:08:15.260 --> 00:08:20.240
I'd never given a workshop before, but I was asked by a games company


00:08:20.240 --> 00:08:24.340
in Barcelona to give a one-day workshop.


00:08:24.340 --> 00:08:29.820
and I liked it and I liked it so much that I started doing this more often until I decided


00:08:29.820 --> 00:08:31.020
to do this full time.


00:08:31.020 --> 00:08:38.900
So I didn't choose the company life, the startup life, although you can't really think of it


00:08:38.900 --> 00:08:39.900
as a startup.


00:08:39.900 --> 00:08:42.900
But yeah, these things happen.


00:08:42.900 --> 00:08:44.900
The independent life, that's right.


00:08:44.900 --> 00:08:45.900
Yeah, exactly.


00:08:45.900 --> 00:08:46.900
Yeah, cool.


00:08:46.900 --> 00:08:47.900
All right.


00:08:47.900 --> 00:08:51.200
All right, well, let's talk about the terminal.


00:08:51.200 --> 00:08:54.200
People on Windows might notice the command prompt,


00:08:54.200 --> 00:08:57.600
although you, as I, would also recommend


00:08:57.600 --> 00:09:00.840
that people generally stay away from the command prompt


00:09:00.840 --> 00:09:02.900
in at least for some of these tools,


00:09:02.900 --> 00:09:05.500
but we do have the Windows terminal,


00:09:05.500 --> 00:09:08.700
which is relatively new and much, much nicer,


00:09:08.700 --> 00:09:12.240
much, much closer to the way--


00:09:12.240 --> 00:09:14.340
- The PowerShell, you mean? - Yeah.


00:09:14.340 --> 00:09:15.700
Well, there's the PowerShell,


00:09:15.700 --> 00:09:20.100
but then there's also a new Windows Terminal application,


00:09:20.100 --> 00:09:24.980
and then it can even do things like bash into Windows subsystem for Linux, right?


00:09:24.980 --> 00:09:27.060
So if you wanted to use some of these tools,


00:09:27.060 --> 00:09:29.060
you could fire up Windows subsystem for Linux,


00:09:29.060 --> 00:09:30.980
and then you would literally have the same tool chain,


00:09:30.980 --> 00:09:32.420
because it's just Ubuntu or something.


00:09:32.420 --> 00:09:36.820
- Oh, right. Yeah, I mean, I'm familiar with WSL,


00:09:36.820 --> 00:09:41.300
but I haven't tried out this new Windows Terminal.


00:09:41.300 --> 00:09:43.540
- Yeah, the new Windows Terminal is pretty nice.


00:09:44.100 --> 00:09:46.020
Well, let me see if I can pull it up for everybody,


00:09:46.020 --> 00:09:47.260
Windows Terminal.


00:09:47.260 --> 00:09:50.740
But yeah, it's just in the Windows 11


00:09:50.740 --> 00:09:55.740
store, I guess you call it, I don't know.


00:09:55.740 --> 00:10:00.740
But it's a lot closer to the other tools.


00:10:00.740 --> 00:10:03.820
So if you're on Windows, you owe it to yourself


00:10:03.820 --> 00:10:07.780
to not use cmd.exe, but get this instead.


00:10:07.780 --> 00:10:09.860
So what I wanna talk about just real quickly


00:10:09.860 --> 00:10:14.860
to set the stage is, I just went through a period of,


00:10:14.860 --> 00:10:19.100
oh, my computer has been the same setup


00:10:19.100 --> 00:10:21.100
for a couple of years, it's getting crufty,


00:10:21.100 --> 00:10:23.140
I'm gonna just format it.


00:10:23.140 --> 00:10:25.620
Not restore from some backup, but format it


00:10:25.620 --> 00:10:28.460
and reset up everything so it's completely fresh


00:10:28.460 --> 00:10:31.180
and like better, 'cause I really made some mistakes


00:10:31.180 --> 00:10:33.940
when I first set it up, now it's better.


00:10:33.940 --> 00:10:36.900
But I opened up the terminal and it's this tiny font,


00:10:36.900 --> 00:10:40.780
dreadful white background with black text


00:10:40.780 --> 00:10:44.000
and it has some old version of Bash.


00:10:44.000 --> 00:10:47.120
And so I kind of wanted to get your thoughts on like,


00:10:47.120 --> 00:10:51.680
what do you do to make your terminal better?


00:10:51.680 --> 00:10:52.520
- Right.


00:10:52.520 --> 00:10:54.060
- You probably do something,


00:10:54.060 --> 00:10:55.960
you probably install some extras and other things


00:10:55.960 --> 00:10:59.320
to make your experience on the terminal nicer.


00:10:59.320 --> 00:11:03.160
- Yeah, so I'm guessing you're on macOS then?


00:11:03.160 --> 00:11:04.240
- Yes, I am.


00:11:04.240 --> 00:11:08.200
I do macOS and I do a Linux for the servers.


00:11:08.200 --> 00:11:10.480
And I think some combination thereof


00:11:10.480 --> 00:11:13.280
is pretty common for most of the listeners.


00:11:13.280 --> 00:11:18.280
- So for macOS, the biggest gain you get


00:11:18.280 --> 00:11:21.240
when you install iTerm.


00:11:21.240 --> 00:11:25.200
So a different terminal, right?


00:11:25.200 --> 00:11:28.240
The application that would launch your shell.


00:11:32.560 --> 00:11:36.520
- macOS, yeah, the terminal emulator.


00:11:36.520 --> 00:11:37.360
What do they call it?


00:11:37.360 --> 00:11:39.480
The macOS terminal replacement.


00:11:39.480 --> 00:11:40.320
There you go.


00:11:40.320 --> 00:11:44.920
- Yeah, this is, I'd say the most popular one on macOS.


00:11:44.920 --> 00:11:49.920
There are others, but yeah, that's what I start with.


00:11:49.920 --> 00:11:56.320
You mentioned the shell, which is it still Bash?


00:11:56.320 --> 00:11:57.800
Is that still the default one?


00:11:57.800 --> 00:11:59.040
- Yeah, it's the Bash by default.


00:11:59.040 --> 00:12:00.120
Yeah, yeah.


00:12:00.120 --> 00:12:02.440
And I think it's an old version of Bash.


00:12:02.440 --> 00:12:06.280
So yeah, there are other shells out there.


00:12:06.280 --> 00:12:08.640
The Z-shell is quite popular,


00:12:08.640 --> 00:12:11.240
largely compatible with Bash.


00:12:11.240 --> 00:12:14.040
I've heard good things about Phish.


00:12:14.040 --> 00:12:16.600
- Yes, Phish is good.


00:12:16.600 --> 00:12:19.000
- Yeah, which actually,


00:12:19.000 --> 00:12:24.440
it's not really POSIX compliant, as they say.


00:12:24.440 --> 00:12:28.600
So it's quite different from what you might get


00:12:28.600 --> 00:12:30.920
from Bash or the Z-shell.


00:12:30.920 --> 00:12:35.000
But from what I've seen, the syntax, especially looping,


00:12:35.000 --> 00:12:40.000
might appeal to the Python developer out there.


00:12:40.000 --> 00:12:44.860
It's closer to Python, but I haven't tried it myself.


00:12:44.860 --> 00:12:47.740
So--


00:12:47.740 --> 00:12:51.380
- Also the conch shell, is that how you say it?


00:12:51.380 --> 00:12:56.380
X-O-N dot, if you're willing to give up Cossix,


00:12:56.380 --> 00:13:00.340
then this is like literally Python in the shell.


00:13:00.340 --> 00:13:03.820
you can just type like import JSON and do a for loop.


00:13:03.820 --> 00:13:04.660
- Yeah.


00:13:04.660 --> 00:13:06.580
- I've never, I've not gone this far.


00:13:06.580 --> 00:13:10.420
I'm still, I'm on the Z shell side of things.


00:13:10.420 --> 00:13:11.520
I really like how that works,


00:13:11.520 --> 00:13:14.060
but if you really wanted to embrace


00:13:14.060 --> 00:13:15.660
the sort of Python in the shell.


00:13:15.660 --> 00:13:20.420
- Exactly, it's this trade off of how far do you wanna go?


00:13:20.420 --> 00:13:23.360
How much do you, do you wanna deviate


00:13:23.360 --> 00:13:26.900
from what is then considered to be the default, right?


00:13:26.900 --> 00:13:30.900
because you mentioned you also work a lot on servers.


00:13:30.900 --> 00:13:31.900
>> Yeah.


00:13:31.900 --> 00:13:37.400
>> There, you're then presented with a completely different shell,


00:13:37.400 --> 00:13:40.260
perhaps, and set of tools.


00:13:40.260 --> 00:13:43.740
It's a trade-off.


00:13:43.740 --> 00:13:48.100
Also, how much time do you really want to spend customizing this?


00:13:48.100 --> 00:13:52.540
Because our time is precious.


00:13:52.540 --> 00:13:55.740
>> Yeah. William out in the audience says,


00:13:55.740 --> 00:13:58.660
for the Windows people, OhMyPosh,


00:13:58.660 --> 00:14:02.380
which have you done stuff with OhMyPosh?


00:14:02.380 --> 00:14:03.980
That's is also really nice.


00:14:03.980 --> 00:14:06.660
- So I guess Posh is for, oh no, any shell.


00:14:06.660 --> 00:14:08.780
So not just the PowerShell.


00:14:08.780 --> 00:14:12.460
- Yes, I think it came out of the PowerShell,


00:14:12.460 --> 00:14:13.460
so the Posh part.


00:14:13.460 --> 00:14:15.620
I think it originally was for that,


00:14:15.620 --> 00:14:19.860
but I use this with Zshell and OhMyZSH together.


00:14:19.860 --> 00:14:22.220
And it's basically that controls my prompt


00:14:22.220 --> 00:14:25.100
and OhMyZshell is like all the plugins


00:14:25.100 --> 00:14:28.460
and complete your Git branches type of thing.


00:14:28.460 --> 00:14:30.020
- Yeah. - Yeah, this is really,


00:14:30.020 --> 00:14:31.980
this is really pretty neat too.


00:14:31.980 --> 00:14:34.300
- It is. - Works well for Windows people.


00:14:34.300 --> 00:14:38.700
- I'd say then indeed, so if your terminal is one thing


00:14:38.700 --> 00:14:41.980
where you can get a lot of benefit from


00:14:41.980 --> 00:14:44.580
customizing your prompt so that it gives you


00:14:44.580 --> 00:14:47.520
a little bit more information and context


00:14:47.520 --> 00:14:51.060
of where you are or what your state,


00:14:51.060 --> 00:14:52.940
in which state your Git repo is in


00:14:52.940 --> 00:14:56.320
or in which virtual environment you're working,


00:14:56.320 --> 00:14:57.540
that can be helpful too.


00:14:57.540 --> 00:15:02.060
Because that is something that you lose easily


00:15:02.060 --> 00:15:05.180
when you're working at the command line is context.


00:15:05.180 --> 00:15:08.760
- Right, I ran this command and it's not working


00:15:08.760 --> 00:15:12.060
because actually I forgot to activate


00:15:12.060 --> 00:15:14.580
the virtual environment so it doesn't have the dependencies


00:15:14.580 --> 00:15:16.620
or the environmental variables that I set up


00:15:16.620 --> 00:15:18.380
in that virtual environment, right?


00:15:18.380 --> 00:15:19.220
- Exactly.


00:15:20.540 --> 00:15:23.180
- Let me give one more shout out for one other thing


00:15:23.180 --> 00:15:27.180
while people are thinking about making their stuff better.


00:15:27.180 --> 00:15:28.020
Is Nerd Fonts.


00:15:28.020 --> 00:15:28.840
- Yeah, great.


00:15:28.840 --> 00:15:31.260
I'm always eager to learn these things.


00:15:31.260 --> 00:15:33.260
There is so much out there.


00:15:33.260 --> 00:15:37.020
- So Nerd Fonts, if you're gonna get like Oh My Posh


00:15:37.020 --> 00:15:39.380
and some of these other extensions


00:15:39.380 --> 00:15:42.500
that you wanna make your shell better,


00:15:42.500 --> 00:15:45.860
so many of them depend on having what are called Nerd Fonts.


00:15:45.860 --> 00:15:49.740
Because if you look at say on the Oh My Posh page,


00:15:49.740 --> 00:15:52.820
There's like these, these arrows with gaps in them.


00:15:52.820 --> 00:15:57.580
You're like, what font could possibly have like a get branch symbol.


00:15:57.580 --> 00:16:01.740
And as these like connecting arrows that have colors interwoven


00:16:01.740 --> 00:16:03.740
and all that stuff is nerd fonts.


00:16:03.740 --> 00:16:08.220
So if you're going to try to run them, you download and install one of these nerd


00:16:08.220 --> 00:16:09.660
fonts, and then those will work.


00:16:09.660 --> 00:16:13.420
Otherwise they're like those, I don't understand Unicode square blocks, you


00:16:13.420 --> 00:16:15.780
know, like a, you know, mojis got that.


00:16:15.780 --> 00:16:17.780
Individual fonts.


00:16:17.780 --> 00:16:18.020
Yeah.


00:16:18.020 --> 00:16:21.260
So it's kind of like you take consolata or something


00:16:21.260 --> 00:16:23.400
or some other font and it's patched


00:16:23.400 --> 00:16:25.820
with these additional characters.


00:16:25.820 --> 00:16:26.800
- Yeah, something like that.


00:16:26.800 --> 00:16:28.700
Yeah, so it does, you only need one,


00:16:28.700 --> 00:16:32.580
but you have to set your terminal to one of these,


00:16:32.580 --> 00:16:34.340
to make a choice, set it to one of them,


00:16:34.340 --> 00:16:35.300
and then it'll work.


00:16:35.300 --> 00:16:38.500
But if you don't, then you'll end up with just like these,


00:16:38.500 --> 00:16:40.820
a lot of these extensions don't work.


00:16:40.820 --> 00:16:41.740
So, yeah.


00:16:41.740 --> 00:16:42.580
- Yeah.


00:16:42.580 --> 00:16:43.400
- Yeah.


00:16:44.900 --> 00:16:47.860
>> Yeah, so when it comes to customizing your shell then,


00:16:47.860 --> 00:16:49.640
if you still want to talk about that.


00:16:49.640 --> 00:16:52.120
>> Yeah, let's keep going.


00:16:52.120 --> 00:16:59.500
>> Right. One of the things I think everybody does most often is


00:16:59.500 --> 00:17:04.420
navigating around moving from one directory to another.


00:17:04.420 --> 00:17:07.560
It can be quite cumbersome to keep on


00:17:07.560 --> 00:17:11.980
re-typing all these long and deeply nested directories.


00:17:11.980 --> 00:17:15.260
So there are a number of solutions that can help with that.


00:17:15.260 --> 00:17:21.100
I use FASD, F-A-S-D.


00:17:21.100 --> 00:17:30.220
It keeps track of what you've been visiting most often,


00:17:30.220 --> 00:17:31.620
and most recently.


00:17:31.620 --> 00:17:38.900
And it also, I don't think if,


00:17:38.900 --> 00:17:42.140
I wonder if that one also allows you to set bookmarks.


00:17:42.140 --> 00:17:43.560
That's what I used to do.


00:17:43.560 --> 00:17:47.820
I would keep, I would have this set of custom shells,


00:17:47.820 --> 00:17:51.820
shells functions, which actually made,


00:17:51.820 --> 00:17:53.320
made it into a plugin,


00:17:53.320 --> 00:17:57.680
but nine years ago into OhMyZshell.


00:17:57.680 --> 00:17:59.500
So if you, if you have OhMyZshell


00:17:59.500 --> 00:18:02.460
and the jump plugin is still in there.


00:18:02.460 --> 00:18:07.020
Yeah, that's a, yep, yep.


00:18:07.020 --> 00:18:09.940
you can just jump around. I see.


00:18:09.940 --> 00:18:16.100
>> You would say mark this directory under this alias.


00:18:16.100 --> 00:18:18.040
Although it's not really an alias,


00:18:18.040 --> 00:18:19.140
but it's like a bookmark.


00:18:19.140 --> 00:18:21.980
Then you say, "Okay, jump to this directory."


00:18:21.980 --> 00:18:24.460
So that really helps.


00:18:24.460 --> 00:18:27.740
>> Right. So maybe the source directory for talk Python,


00:18:27.740 --> 00:18:31.500
I would just mark it as TP and I could say on the terminal,


00:18:31.500 --> 00:18:34.940
I could say jspace tp and it would take me


00:18:34.940 --> 00:18:36.680
this super long complex directory,


00:18:36.680 --> 00:18:38.100
just bam, you're there, right?


00:18:38.100 --> 00:18:40.100
>> Exactly. I like it.


00:18:40.100 --> 00:18:41.660
>> I might need to try this out.


00:18:41.660 --> 00:18:44.420
It comes with MyZShell?


00:18:44.420 --> 00:18:47.980
>> This one? No, this one it doesn't.


00:18:47.980 --> 00:18:50.060
It's a separate tool, I believe.


00:18:50.060 --> 00:18:52.500
Although it might even be a plug-in.


00:18:52.500 --> 00:18:54.340
By now, I don't even know.


00:18:54.340 --> 00:18:56.740
It's been a long time since I installed it,


00:18:56.740 --> 00:19:00.060
but FASD, that's what you want to look for.


00:19:00.060 --> 00:19:02.380
>> Okay. Very, very cool.


00:19:02.380 --> 00:19:07.260
I have one that I use a lot called McFly.


00:19:07.260 --> 00:19:09.140
Have you seen McFly?


00:19:09.140 --> 00:19:10.180
- No.


00:19:10.180 --> 00:19:11.180
- So it's similar.


00:19:11.180 --> 00:19:13.980
And what you do is, you know, if you type control R


00:19:13.980 --> 00:19:16.820
it'll give you reverse incremental search


00:19:16.820 --> 00:19:17.900
or whatever that is.


00:19:17.900 --> 00:19:18.980
- Yeah.


00:19:18.980 --> 00:19:20.220
- So this overrides that.


00:19:20.220 --> 00:19:22.540
So if you type control R, it brings up an Emax


00:19:22.540 --> 00:19:25.740
like auto-complete type thing that has fuzzy searching.


00:19:25.740 --> 00:19:30.140
So you could type SSH and then like part of a domain name


00:19:30.140 --> 00:19:34.220
and it would find you typed SSH root@ some,


00:19:34.220 --> 00:19:37.140
that domain name, and it'll give you a list


00:19:37.140 --> 00:19:39.620
of like all these smart options


00:19:39.620 --> 00:19:41.240
looking through your history.


00:19:41.240 --> 00:19:43.780
- Yeah, so yeah, that's amazing.


00:19:43.780 --> 00:19:45.940
And even now as we talk,


00:19:45.940 --> 00:19:49.040
I've learned like a dozen new things.


00:19:49.040 --> 00:19:50.820
One thing I have noticed though,


00:19:50.820 --> 00:19:53.260
is that, you know, you may,


00:19:53.260 --> 00:19:55.900
the next time you're installing,


00:19:55.900 --> 00:19:57.520
you're setting up your system,


00:19:57.520 --> 00:20:02.520
You may feel very productive and elite-like


00:20:02.520 --> 00:20:05.580
when you're installing all these tools,


00:20:05.580 --> 00:20:08.480
but you still gotta make use of them, right?


00:20:08.480 --> 00:20:11.380
You gotta turn it into some kind of a habit.


00:20:11.380 --> 00:20:15.480
And what I have noticed, for me at least,


00:20:15.480 --> 00:20:19.160
what works best is to just take it one tool at a time,


00:20:19.160 --> 00:20:22.980
make a little cheat sheet for yourself on a piece of paper,


00:20:24.760 --> 00:20:27.720
and just see if you like that tool,


00:20:27.720 --> 00:20:30.640
if you get any benefit from it.


00:20:30.640 --> 00:20:33.120
>> Yeah, absolutely.


00:20:33.120 --> 00:20:38.120
>> Related to this actually is the concept of aliases,


00:20:38.120 --> 00:20:39.840
in a more generic sense,


00:20:39.840 --> 00:20:41.800
in the pure shell sense,


00:20:41.800 --> 00:20:45.080
in that you can define an alias that would then be


00:20:45.080 --> 00:20:53.120
expanded into some command with zero or more arguments.


00:20:53.120 --> 00:20:57.060
So if you have commands that you would often type,


00:20:57.060 --> 00:21:02.260
like LS for listing your files,


00:21:02.260 --> 00:21:04.700
and you have all these arguments that you don't want to keep on


00:21:04.700 --> 00:21:08.320
typing then aliases is the way to go.


00:21:08.320 --> 00:21:10.500
>> I go crazy with aliases.


00:21:10.500 --> 00:21:11.780
I absolutely love this.


00:21:11.780 --> 00:21:19.060
Yeah, I have probably 150 aliases in my RC file.


00:21:19.060 --> 00:21:21.740
>> Oh, that's nice. Yeah, that's nice.


00:21:21.740 --> 00:21:32.380
So at some point, what you may have done is go through your history and then see how often you use these aliases.


00:21:32.380 --> 00:21:33.380
Yeah.


00:21:33.380 --> 00:21:36.380
That's always a fun thing to do.


00:21:36.380 --> 00:21:40.220
Yeah, for me, it's kind of frustration. I'm like, "Oh, I don't want to do this."


00:21:40.220 --> 00:21:42.220
I've got to remember, I've got to type,


00:21:42.220 --> 00:21:48.060
"Oh, no, I've got to go into this directory and then I've got to first type this command and then I can do this other thing."


00:21:48.060 --> 00:21:50.700
So, for example, we talked about the static site generators.


00:21:50.700 --> 00:21:53.380
So one of the things I have to do in order to


00:21:53.380 --> 00:21:56.860
create new content and see how it looks in the browser


00:21:56.860 --> 00:21:59.460
is I have to go to a certain directory,


00:21:59.460 --> 00:22:02.020
not where the content is, but a couple up,


00:22:02.020 --> 00:22:06.280
run Hugo-D server there,


00:22:06.280 --> 00:22:07.340
and then it'll auto reload,


00:22:07.340 --> 00:22:09.860
and as I edit the markdown, it'll just refresh.


00:22:09.860 --> 00:22:13.620
So instead of always remembering how to find that directory


00:22:13.620 --> 00:22:15.980
and then go into the right sort of parent directory


00:22:15.980 --> 00:22:18.100
and run it, I just now just type Hugo right,


00:22:18.100 --> 00:22:20.460
and that's an alias, and just, it does that.


00:22:20.460 --> 00:22:23.660
Boom, it just pops open and it's running.


00:22:23.660 --> 00:22:24.500
I do my thing.


00:22:24.500 --> 00:22:27.140
Then I got to do a whole bunch of automation


00:22:27.140 --> 00:22:29.500
in Python on top of it and then build it


00:22:29.500 --> 00:22:30.740
and ship it to the Git


00:22:30.740 --> 00:22:33.220
and push it for a continuous deployment.


00:22:33.220 --> 00:22:35.340
Now I have just Hugo publish, boom.


00:22:35.340 --> 00:22:36.780
And these are all like aliases.


00:22:36.780 --> 00:22:38.860
The other thing you talked about a single commands


00:22:38.860 --> 00:22:41.220
is maybe talk about chaining commands


00:22:41.220 --> 00:22:42.780
and multiple commands.


00:22:42.780 --> 00:22:46.220
- Yeah, because you just mentioned automation in Python.


00:22:46.220 --> 00:22:48.540
And then I of course immediately go like,


00:22:48.540 --> 00:22:50.460
Hmm, what's going on there?


00:22:50.460 --> 00:22:56.060
Yeah, so I've got a couple of I guess their go commands 'cause


00:22:56.060 --> 00:22:58.660
they're Hugo and then I've got some Python code that generates


00:22:58.660 --> 00:23:01.540
a tag cloud and then a git command that will publish it. So


00:23:01.540 --> 00:23:08.820
it's like, Hugo, Hugo, git, no, Hugo, git, Hugo, Python, Hugo,


00:23:08.820 --> 00:23:12.340
git is that all in one alias, right? Which is beautiful.


00:23:12.340 --> 00:23:16.180
Yeah, it's beautiful. And that, you know, I don't know if we've


00:23:16.220 --> 00:23:21.420
Exactly. I guess I opened a little bit talking about your book, but one of the really core ideas of your book is


00:23:21.420 --> 00:23:29.340
That the shell can be the integration environment across technologies like go python and git


00:23:29.340 --> 00:23:38.540
Exactly. Exactly the command line doesn't care in what language something has been written, right? It's it's like a


00:23:38.540 --> 00:23:41.740
super glue or or duct tape more really


00:23:41.740 --> 00:23:45.260
Uh that that binds everything together


00:23:45.260 --> 00:23:46.100
- Yeah.


00:23:46.100 --> 00:23:46.940
- To a certain extent, right?


00:23:46.940 --> 00:23:47.760
Like duct tape.


00:23:47.760 --> 00:23:50.860
- Yeah, well, it's, you know, loosely bound,


00:23:50.860 --> 00:23:53.460
but it's, there's a ton of flexibility in there.


00:23:53.460 --> 00:23:54.300
And if you think, well,


00:23:54.300 --> 00:23:56.740
I really just want to do these four things,


00:23:56.740 --> 00:23:59.540
maybe that would be a macro in Excel


00:23:59.540 --> 00:24:03.860
or some kind of like scripting replay in Windows.


00:24:03.860 --> 00:24:04.900
But this is,


00:24:04.900 --> 00:24:09.060
it's on the terminal, programs can run it.


00:24:09.060 --> 00:24:09.900
You can run it.


00:24:09.900 --> 00:24:10.940
It's clearly editable.


00:24:10.940 --> 00:24:14.460
It's not some weird specific type of macro.


00:24:14.460 --> 00:24:17.460
You can just say ampersand, ampersand between them.


00:24:17.460 --> 00:24:20.460
And it'll say run this first thing, then run the other.


00:24:20.460 --> 00:24:21.460
Those are independent.


00:24:21.460 --> 00:24:24.460
You can also pipe inputs and outputs between them, right?


00:24:24.460 --> 00:24:25.460
I see that.


00:24:25.460 --> 00:24:28.460
You've got some really interesting ways to do that multi-line stuff


00:24:28.460 --> 00:24:29.460
in your book as well.


00:24:29.460 --> 00:24:30.460
Yeah.


00:24:30.460 --> 00:24:31.460
Well, yeah.


00:24:31.460 --> 00:24:34.460
So it depends on what you're doing.


00:24:34.460 --> 00:24:36.460
So if you're doing a multi-line,


00:24:36.460 --> 00:24:38.460
you're doing a multi-line, you're doing a multi-line.


00:24:38.460 --> 00:24:39.460
You're doing a multi-line.


00:24:39.460 --> 00:24:40.460
You're doing a multi-line.


00:24:40.460 --> 00:24:41.460
You're doing a multi-line.


00:24:41.460 --> 00:24:46.840
So it depends on what kind of tools you want to combine.


00:24:46.840 --> 00:24:50.740
So you just mentioned double ampersand.


00:24:50.740 --> 00:24:55.340
So that should be used when you only


00:24:55.340 --> 00:24:58.740
want to run the second command when the first one has


00:24:58.740 --> 00:25:00.200
succeeded.


00:25:00.200 --> 00:25:02.040
If you want to run the second one regardless


00:25:02.040 --> 00:25:06.300
of what the first one did, you can just use a semicolon.


00:25:06.300 --> 00:25:09.820
Or if you only want to run the second command when


00:25:09.820 --> 00:25:17.220
first one failed, there might be a situation where you want to do that, you can use double


00:25:17.220 --> 00:25:18.220
pipe.


00:25:18.220 --> 00:25:19.220
Okay.


00:25:19.220 --> 00:25:20.220
Yeah.


00:25:20.220 --> 00:25:21.220
Interesting.


00:25:21.220 --> 00:25:22.220
Okay.


00:25:22.220 --> 00:25:25.820
And then you just mentioned piping.


00:25:25.820 --> 00:25:29.700
And that's, well, a whole other story.


00:25:29.700 --> 00:25:38.260
That's when you want to use the output from the first command as input to the second command.


00:25:38.260 --> 00:25:42.660
This is where data, again, comes into play.


00:25:42.660 --> 00:25:49.200
You just also mentioned macros.


00:25:49.200 --> 00:25:53.620
Another way to think of them are functions


00:25:53.620 --> 00:25:58.140
that you then combine.


00:25:58.140 --> 00:26:01.820
Yes, incredibly powerful.


00:26:01.820 --> 00:26:05.120
But that goes a little bit beyond...


00:26:05.120 --> 00:26:09.020
then, of course, you should be working with commands


00:26:09.020 --> 00:26:15.460
that produce some text that you want to then further work on.


00:26:15.460 --> 00:26:19.980
Yeah. You also talk about creating Bash scripts,


00:26:19.980 --> 00:26:23.020
which is pretty interesting. I think many people probably know about that,


00:26:23.020 --> 00:26:28.060
or shell scripts, .sh files, I guess it could be ZShell scripts as well.


00:26:28.060 --> 00:26:29.060
Yeah.


00:26:29.060 --> 00:26:33.220
So you gave an interesting presentation back at the Strata Conference,


00:26:33.220 --> 00:26:37.940
And it's, you had a lot of fun ideas


00:26:37.940 --> 00:26:38.940
that I think are relevant here.


00:26:38.940 --> 00:26:40.940
So maybe let me just throw out some one-liners


00:26:40.940 --> 00:26:42.940
and you could maybe riff on that a little bit, okay?


00:26:42.940 --> 00:26:44.940
- Yeah, yeah, sure.


00:26:44.940 --> 00:26:46.440
- So one of the reasons you said,


00:26:46.440 --> 00:26:48.440
you gave 50 reasons that the shell was awesome.


00:26:48.440 --> 00:26:50.440
And I want to just point out a couple,


00:26:50.440 --> 00:26:52.940
highlight a couple, let you speak to them.


00:26:52.940 --> 00:26:55.940
So you said the shell is like a REPL


00:26:55.940 --> 00:26:57.940
that lets you just play with your data.


00:26:57.940 --> 00:27:00.940
We know the REPL from Python and also from Jupyter.


00:27:00.940 --> 00:27:03.900
but I never really thought of the shell as a REPL,


00:27:03.900 --> 00:27:05.140
but it kind of is, right?


00:27:05.140 --> 00:27:09.760
- Yeah, I think that the shell is the mother of all REPLs,


00:27:09.760 --> 00:27:13.420
the read eval print loop, right?


00:27:13.420 --> 00:27:18.420
Having this short feedback loop of doing things


00:27:18.420 --> 00:27:23.580
and seeing output and then elaborating on that.


00:27:23.580 --> 00:27:27.220
I think that is tremendously valuable


00:27:27.220 --> 00:27:34.060
And Python users, of course, may recognize this from Python itself.


00:27:34.060 --> 00:27:39.160
If you just execute Python, you get a REPL, IPython or Jupyter console,


00:27:39.160 --> 00:27:43.700
and to a certain extent, also Jupyter Notebook or JupyterLab.


00:27:43.700 --> 00:27:50.480
There are some similarities there where you, again, have this quick feedback loop,


00:27:50.480 --> 00:27:54.980
and it's a very different experience from writing a script from top to bottom,


00:27:54.980 --> 00:27:58.980
or starting at the top, and then executing that script


00:27:58.980 --> 00:28:02.980
from the start every time you want to test something.


00:28:02.980 --> 00:28:07.980
So, yeah, it's a different way of working,


00:28:07.980 --> 00:28:10.980
and I'm not saying one is better than the other,


00:28:10.980 --> 00:28:13.980
but what I do want to say is that there are situations


00:28:13.980 --> 00:28:17.980
where having such a tight feedback loop


00:28:17.980 --> 00:28:20.980
can be very efficient.


00:28:20.980 --> 00:28:23.980
Yeah, especially in the exploration stage, right?


00:28:23.980 --> 00:28:31.900
right? Yeah, exactly. Once you go to production, right? Once you, whatever that means, right?


00:28:31.900 --> 00:28:38.460
Once you want things to be a bit more stable, you don't want to just use duct tape, but you want to


00:28:38.460 --> 00:28:46.700
use a proper construction. Then, yeah, then of course the command line can have different roles


00:28:47.500 --> 00:28:54.300
there. Yeah. Yeah, but it's kind of the rad GUI, the rapid application development GUI, but


00:28:54.300 --> 00:28:59.580
for data exploration, right? These REPLs, you know, that's probably why Jupyter is so popular.


00:28:59.580 --> 00:29:03.900
It just lets you play and see and then try and it just that quick feedback loop is amazing.


00:29:03.900 --> 00:29:07.420
Another reason, you said it's awesome, close to the file system.


00:29:07.420 --> 00:29:16.060
Yeah, I mean, in the end, it's all files, right? Whether you're producing code that lives somewhere,


00:29:16.060 --> 00:29:22.980
in a file, or whether you're working with images or log files that get written to something,


00:29:22.980 --> 00:29:27.280
or you have some configuration that's... it's all files.


00:29:27.280 --> 00:29:29.320
And we got to do things with these files.


00:29:29.320 --> 00:29:37.760
We have to move them around, we have to rename them, delete them, put them into Git.


00:29:37.760 --> 00:29:41.800
So you want to be close to your file system.


00:29:41.800 --> 00:29:44.320
don't want to be importing a whole bunch of


00:29:44.320 --> 00:29:49.600
libraries before you can start doing things with these files.


00:29:49.600 --> 00:29:52.140
>> Also, when you're doing data science,


00:29:52.140 --> 00:29:56.240
often it starts with this ingest and understanding files,


00:29:56.240 --> 00:29:59.340
CSV or text or others.


00:29:59.340 --> 00:30:09.360
>> Yeah. I sometimes try to immediately do read CSV in Pandas,


00:30:09.360 --> 00:30:13.000
But then, very often,


00:30:13.000 --> 00:30:16.360
I get presented, I get some Unicode error,


00:30:16.360 --> 00:30:26.880
or it turns out the comma is not the limiter being used.


00:30:26.880 --> 00:30:30.240
Yeah, you can do that in a trial and error way,


00:30:30.240 --> 00:30:34.760
you can fix that, but it really helps just being able to look at


00:30:34.760 --> 00:30:38.180
a file as it is, no parsing, just boom,


00:30:38.180 --> 00:30:39.540
There's my file.


00:30:39.540 --> 00:30:41.620
Then yep, once you're comfortable,


00:30:41.620 --> 00:30:43.160
once you're confident like,


00:30:43.160 --> 00:30:45.940
okay, this is what my file looks like,


00:30:45.940 --> 00:30:47.360
this is its structure,


00:30:47.360 --> 00:30:50.140
then of course, you can always move on to


00:30:50.140 --> 00:30:54.860
using some other package like pandas.


00:30:54.860 --> 00:30:59.340
>> Another one that you've said,


00:30:59.340 --> 00:31:01.300
another recommendation you had or


00:31:01.300 --> 00:31:04.900
a way for playing with this was to use Docker.


00:31:04.900 --> 00:31:07.140
I don't know how many people out there


00:31:07.140 --> 00:31:09.340
who haven't done this for are really familiar.


00:31:09.340 --> 00:31:12.980
But basically, when you start up a Docker image,


00:31:12.980 --> 00:31:16.860
you might say dash it bash or zsh.


00:31:16.860 --> 00:31:21.900
And what you get is just you get a basic shell inside the Docker container.


00:31:21.900 --> 00:31:28.100
But in that space, then you can kind of go crazy and do whatever you want to the shell and try it out, right?


00:31:28.100 --> 00:31:33.260
Exactly. Yeah. So there are two scenarios that I can think of.


00:31:33.260 --> 00:31:36.860
So when you're just starting out with the command line,


00:31:36.860 --> 00:31:40.460
it's a very intimidating environment,


00:31:40.460 --> 00:31:44.220
and it's quite easy to wreck your system if you're not careful.


00:31:44.220 --> 00:31:48.060
So being inside an isolated environment


00:31:48.060 --> 00:31:53.180
that is sort of shielded off your host operating system


00:31:53.180 --> 00:31:56.060
can be comforting.


00:31:56.060 --> 00:32:00.300
So that's one recommendation that I would say


00:32:00.300 --> 00:32:03.540
that why I think you should use Docker.


00:32:03.540 --> 00:32:05.880
And the other one is reproducibility.


00:32:05.880 --> 00:32:14.840
Also in Python, we're dealing with packages that get updated,


00:32:14.840 --> 00:32:19.320
that get different version numbers, where APIs change.


00:32:19.320 --> 00:32:24.980
And being able to reproduce a certain environment


00:32:24.980 --> 00:32:29.980
so that you get consistent results is also very valuable.


00:32:29.980 --> 00:32:34.020
- Yeah, and I'd like to sort of highlight


00:32:34.020 --> 00:32:36.160
the converse as well.


00:32:36.160 --> 00:32:38.500
You said playing with Docker containers


00:32:38.500 --> 00:32:40.980
is a cool way to experiment with the shell.


00:32:40.980 --> 00:32:42.660
If you care about Docker containers,


00:32:42.660 --> 00:32:45.600
you need to know the shell to do things to it.


00:32:45.600 --> 00:32:46.440
'Cause you might think,


00:32:46.440 --> 00:32:47.620
"Oh, I'm just going to make a Docker file.


00:32:47.620 --> 00:32:48.600
I don't need to know the shell."


00:32:48.600 --> 00:32:50.340
Like what goes in the Docker file?


00:32:50.340 --> 00:32:53.220
A whole bunch of commands that many of them look like


00:32:53.220 --> 00:32:55.360
exactly what you would run on the shell,


00:32:55.360 --> 00:32:57.560
you just put it in a certain location


00:32:57.560 --> 00:32:59.320
or as a command argument


00:32:59.320 --> 00:33:01.040
to some configuration thing in there.


00:33:01.040 --> 00:33:02.560
And so you really,


00:33:02.560 --> 00:33:05.360
if you're gonna do things with containers,


00:33:05.360 --> 00:33:07.680
the way you speak to them is mostly


00:33:07.680 --> 00:33:10.760
through shell-like commands, right?


00:33:10.760 --> 00:33:13.340
- Yeah, yeah, right, yeah.


00:33:13.340 --> 00:33:15.320
- Yeah. - Yeah.


00:33:15.320 --> 00:33:16.280
- Let's see.


00:33:16.280 --> 00:33:19.160
Oh, so one of the cool tools that you had


00:33:19.160 --> 00:33:21.680
in that presentation was,


00:33:21.680 --> 00:33:24.440
you talked about explain shell.com.


00:33:24.440 --> 00:33:26.120
Yeah.


00:33:26.120 --> 00:33:26.960
What is this?


00:33:26.960 --> 00:33:31.880
Well, it, yeah, you can, you can try out.


00:33:31.880 --> 00:33:37.360
So, so what you see here on the screen is, is explain shell.com and it will


00:33:37.360 --> 00:33:41.680
break down a long command and, start explaining.


00:33:41.680 --> 00:33:49.480
Um, so it will, it will, what I think the authors, have done is, they


00:33:49.480 --> 00:33:56.740
have used all these manual pages and extracted bits and pieces that they then present to


00:33:56.740 --> 00:34:03.060
you in an order that corresponds to the command that you're pasting into this.


00:34:03.060 --> 00:34:09.380
So if you see on Stack Overflow, you see this incantation and you're like, "All right, what


00:34:09.380 --> 00:34:10.380
does it mean?"


00:34:10.380 --> 00:34:13.300
And you don't want to go through the manual page yourself.


00:34:13.300 --> 00:34:16.620
Right? Okay. So what does dash F mean?


00:34:16.620 --> 00:34:21.620
And what is this X, Z, V, F for the tar command mean?


00:34:21.620 --> 00:34:26.700
Right? Then explain shell can do this trick for you.


00:34:26.700 --> 00:34:27.540
It's a.


00:34:27.540 --> 00:34:28.700
- Yeah. It's amazing.


00:34:28.700 --> 00:34:30.300
When I first thought, I thought, okay, well,


00:34:30.300 --> 00:34:33.060
what this is going to be is this is going to be like


00:34:33.060 --> 00:34:33.900
the man page.


00:34:33.900 --> 00:34:38.860
If you type LS, it'll show you a simple list directory


00:34:38.860 --> 00:34:40.020
content and you click on it,


00:34:40.020 --> 00:34:43.180
it'll give you additional arguments you can pass.


00:34:43.180 --> 00:34:46.980
But you could then say, like you said, you could say -l


00:34:46.980 --> 00:34:49.580
and it'll say the ls means list contents.


00:34:49.580 --> 00:34:52.060
The l means use the long listing format.


00:34:52.060 --> 00:34:53.860
And like, oh, okay, hold on.


00:34:53.860 --> 00:34:58.860
What if I said, get checkout main


00:34:58.860 --> 00:35:01.060
and it'll say, okay, well, get checkout does this.


00:35:01.060 --> 00:35:04.340
And then main, it'll actually parse it apart.


00:35:04.340 --> 00:35:07.500
And there's some really wild examples on here


00:35:07.500 --> 00:35:10.820
that like right on the page that are highlighted


00:35:10.820 --> 00:35:12.620
on the homepage of that site.


00:35:12.620 --> 00:35:15.040
you click it and boom, it gives you this cool graph


00:35:15.040 --> 00:35:18.280
of like what the heck, it even shows like the ampersand,


00:35:18.280 --> 00:35:21.400
the double ampersand and the double or combining


00:35:21.400 --> 00:35:23.320
as you mentioned before.


00:35:23.320 --> 00:35:25.160
- Yeah. - This is amazing.


00:35:25.160 --> 00:35:28.520
- It is, it's really useful, especially when you're just,


00:35:28.520 --> 00:35:31.440
you know, getting started with the command line


00:35:31.440 --> 00:35:34.160
and you're overwhelmed like we all are in the beginning


00:35:34.160 --> 00:35:36.760
and sometimes still are, then, you know,


00:35:36.760 --> 00:35:39.640
adding some context like this really helps.


00:35:39.640 --> 00:35:45.400
I once wrote a utility that allowed you to use explain shell.com from the command line.


00:35:45.400 --> 00:35:51.480
So you would just, you wouldn't leave the command line. I don't think it works any longer,


00:35:51.480 --> 00:35:58.680
but yeah, that was a fun exercise. >> Yeah. Oh yeah. Very neat. One of the things that I learned


00:35:58.680 --> 00:36:02.040
was parallel. >> Oh yeah.


00:36:02.040 --> 00:36:05.480
>> Tell us about parallel.


00:36:05.480 --> 00:36:10.600
This is a command you can run on the terminal.


00:36:10.600 --> 00:36:13.640
It sounds like it does stuff in parallel. That sounds amazing.


00:36:13.640 --> 00:36:17.200
>> Yeah. Like the name implies.


00:36:17.200 --> 00:36:23.680
Parallel is a tool and we're talking about GNU Parallel here.


00:36:23.680 --> 00:36:28.720
There's another version out there that is similar but different.


00:36:28.720 --> 00:36:33.320
Gnu Parallel is this tool that doesn't do anything by itself,


00:36:33.320 --> 00:36:39.620
but it's a force multiplier for all the other tools.


00:36:39.620 --> 00:36:50.680
What this tool is able to do, it will parallelize your pipeline.


00:36:50.680 --> 00:36:57.820
It will be able to run jobs on multiple cores,


00:36:57.820 --> 00:37:03.660
and even distribute them to other machines if you have those available.


00:37:03.660 --> 00:37:07.860
Michael, you mentioned you're working on a server.


00:37:07.860 --> 00:37:12.540
Well, if you can SSH into other servers as well,


00:37:12.540 --> 00:37:13.620
you can leverage those.


00:37:13.620 --> 00:37:16.380
That's something that Blue Parallel can do.


00:37:16.380 --> 00:37:21.940
The way it works is that you feed it a list of something.


00:37:21.940 --> 00:37:23.580
Could be a list of file names,


00:37:23.580 --> 00:37:25.420
could be a list of URLs,


00:37:25.420 --> 00:37:28.960
could be your log files.


00:37:28.960 --> 00:37:34.300
If you can then think of the problem that you want to solve,


00:37:34.300 --> 00:37:38.020
if you can break it down into smaller chunks,


00:37:38.020 --> 00:37:41.820
then GNU Parallel might be able to help you out there.


00:37:41.820 --> 00:37:46.140
These jobs should be working independently from each other.


00:37:46.140 --> 00:37:49.700
There can be, it's nearly impossible to


00:37:49.700 --> 00:37:52.820
have those two jobs communicate with each other.


00:37:52.820 --> 00:37:55.380
But let's say you have for your blog,


00:37:55.380 --> 00:37:59.400
in Hugo, you have a whole bunch of


00:37:59.400 --> 00:38:03.940
ping files that you want to convert to JPEGs.


00:38:03.940 --> 00:38:05.380
>> Web view or something, yeah, sure.


00:38:05.380 --> 00:38:07.960
>> Yeah. It's a bad example because


00:38:07.960 --> 00:38:10.140
this particular tool that I would then use


00:38:10.140 --> 00:38:12.920
already supports doing multiple files,


00:38:12.920 --> 00:38:14.420
but let's just assume that


00:38:14.420 --> 00:38:17.540
this tool can only handle one file at a time.


00:38:17.540 --> 00:38:22.540
Yeah, then you would specify your command, right?


00:38:22.540 --> 00:38:27.000
And then at certain places where necessary use placeholders.


00:38:27.000 --> 00:38:29.520
Like, so, okay, this is where the file name goes


00:38:29.520 --> 00:38:32.860
and this is where the file name goes with a new extension.


00:38:32.860 --> 00:38:37.460
So it's one of my favorite tools, really.


00:38:37.460 --> 00:38:38.640
- Yeah, that's fantastic.


00:38:38.640 --> 00:38:41.620
So for example, if you had a bunch of web pages


00:38:41.620 --> 00:38:44.040
and you wanted to compute the sentiment analysis, right?


00:38:44.040 --> 00:38:45.380
As a data scientist, right?


00:38:45.380 --> 00:38:48.180
You want to download it, compute the sentiment analysis,


00:38:48.180 --> 00:38:52.820
and then save that to a CSV or pin it to a CSV.


00:38:52.820 --> 00:38:54.500
Maybe somebody gave you that script,


00:38:54.500 --> 00:38:58.220
and it's only written to talk to one thing,


00:38:58.220 --> 00:39:00.980
and you don't want to rewrite it or touch it or get involved


00:39:00.980 --> 00:39:01.700
with it.


00:39:01.700 --> 00:39:04.780
This is your way to unlock the parallels on there, right?


00:39:04.780 --> 00:39:05.460
Yeah.


00:39:05.460 --> 00:39:07.500
In fact, let's talk a little bit more about this,


00:39:07.500 --> 00:39:10.100
because I think this is an important point in that, I


00:39:10.100 --> 00:39:13.300
mean, I'm sure that we've all come across when we're


00:39:13.300 --> 00:39:16.840
working in Python and you're thinking like, okay, I can speed this up.


00:39:16.840 --> 00:39:19.500
I want to do things in parallel. You know what?


00:39:19.500 --> 00:39:24.220
I'm going to do multi-threading or what is it that you use these days in


00:39:24.220 --> 00:39:25.060
Python?


00:39:25.060 --> 00:39:28.900
Yeah. Async and await. Maybe if it's IO bound or something like that.


00:39:28.900 --> 00:39:32.220
You've got your pool of workers or I don't know. Basically you're,


00:39:32.220 --> 00:39:34.620
you're programming it yourself from the ground up.


00:39:34.620 --> 00:39:37.340
Right. Multi-processing potentially might be the closest.


00:39:37.340 --> 00:39:40.580
Right. Right. Right. Right. So, so,


00:39:41.900 --> 00:39:47.900
The trick then is to realize that there is already a tool out there that can do that for you.


00:39:47.900 --> 00:39:55.580
All that you need to do is make sure that your Python code becomes a command line tool.


00:39:55.580 --> 00:40:05.140
And we can talk a little bit more about that, but there are just five, six steps needed to make that happen.


00:40:05.140 --> 00:40:07.780
And once you realize that,


00:40:07.780 --> 00:40:12.820
then you can start turning existing Python code into command line tools


00:40:12.820 --> 00:40:16.420
and start combining it with all the other tools that are already available,


00:40:16.420 --> 00:40:18.420
including Parallel.


00:40:18.420 --> 00:40:19.860
Yeah.


00:40:19.860 --> 00:40:24.260
It's awesome. I think it's a really cool idea because


00:40:24.260 --> 00:40:29.700
maybe the person working with the code doesn't understand


00:40:29.700 --> 00:40:34.340
multiprocessing and thread synchronization and all these tricky concepts.


00:40:34.340 --> 00:40:38.500
Just give me a thing that does it once with command line arguments and I got it.


00:40:38.500 --> 00:40:41.780
You know, like, or you picked it up from somewhere.


00:40:41.780 --> 00:40:45.060
Out in the audience, the question is, is there a gil associated with this?


00:40:45.060 --> 00:40:50.500
And I mean, technically, yes, but it's not interfering with the computation


00:40:50.500 --> 00:40:52.180
because it's multiple processes.


00:40:52.180 --> 00:40:54.660
It's not threads within a process, right?


00:40:54.660 --> 00:40:57.460
So it should be able to just run and take advantage of all your cores.


00:40:57.460 --> 00:40:58.580
- Yeah.


00:40:58.580 --> 00:41:01.780
There will be one gil per Python process, right?


00:41:01.780 --> 00:41:03.860
- Yep, that's right.


00:41:03.860 --> 00:41:04.980
- Right, and so it doesn't matter


00:41:04.980 --> 00:41:07.240
because if you say there's five jobs,


00:41:07.240 --> 00:41:09.420
you have five processes, right?


00:41:09.420 --> 00:41:11.180
There's no contention there.


00:41:11.180 --> 00:41:12.740
- Yep.


00:41:12.740 --> 00:41:13.940
- Yeah, absolutely.


00:41:13.940 --> 00:41:16.500
All right.


00:41:16.500 --> 00:41:19.380
Oh, so yeah, let's talk a little bit about this idea


00:41:19.380 --> 00:41:22.940
of turning Python scripts into command line tools.


00:41:22.940 --> 00:41:24.660
- Yeah.


00:41:24.660 --> 00:41:28.260
- I think that that's really valuable for people.


00:41:28.260 --> 00:41:33.100
- It is, and I think we can then put it in the show notes.


00:41:33.100 --> 00:41:35.100
I might have already given a talk about this.


00:41:35.100 --> 00:41:40.680
I'm actually not sure if it's publicly available.


00:41:40.680 --> 00:41:45.340
Anyway, there are only a couple of steps, and it's not that difficult.


00:41:45.340 --> 00:41:49.440
So, first of all, let's assume that you have some Python code out there.


00:41:49.440 --> 00:41:55.240
You have it in a file, and let's just, for simplicity's sake,


00:41:55.240 --> 00:41:57.160
assume it's a single file.


00:41:57.160 --> 00:42:01.980
So what would you then need to do to turn this into a command line tool?


00:42:01.980 --> 00:42:04.860
something that can be run on the command line.


00:42:04.860 --> 00:42:08.900
The way that you can currently run this is by saying,


00:42:08.900 --> 00:42:11.560
okay, Python and then the name of the file.


00:42:11.560 --> 00:42:14.960
That doesn't really sound like it's a command line tool.


00:42:14.960 --> 00:42:21.540
The very first thing here then is to add one line at


00:42:21.540 --> 00:42:27.100
the very top that would then start with a hash and an exclamation mark,


00:42:27.100 --> 00:42:30.800
or a hash bang, or a shebang as it's called.


00:42:30.800 --> 00:42:34.720
These are two special characters and they


00:42:34.720 --> 00:42:41.320
instruct the shell that this can be executed.


00:42:41.320 --> 00:42:44.400
>> What is the binary that's going to?


00:42:44.400 --> 00:42:47.480
>> Exactly. That's what then would come after that.


00:42:47.480 --> 00:42:50.440
You would have hash bang,


00:42:50.440 --> 00:42:55.320
and then it would point to the Python executable.


00:42:55.320 --> 00:42:57.520
There's some details there.


00:42:57.520 --> 00:42:58.960
>> It could be a certain version,


00:42:58.960 --> 00:43:00.960
It could be out of a virtual environment potential,


00:43:00.960 --> 00:43:03.400
and it could go wherever, right?


00:43:03.400 --> 00:43:05.040
Don't want to overcomplicate it probably,


00:43:05.040 --> 00:43:10.040
but you could point to different versions of Python.


00:43:10.040 --> 00:43:10.760
You could point--


00:43:10.760 --> 00:43:13.520
because you give it a full path that's executable.


00:43:13.520 --> 00:43:14.640
Exactly, exactly.


00:43:14.640 --> 00:43:17.480
There's some compatibility issues there.


00:43:17.480 --> 00:43:21.080
But essentially, you tell your shell, OK,


00:43:21.080 --> 00:43:25.240
which program should interpret my code.


00:43:25.240 --> 00:43:29.700
and that is some Python out there that you have installed.


00:43:29.700 --> 00:43:31.480
So that's the first step.


00:43:31.480 --> 00:43:37.100
Then after you've done this,


00:43:37.100 --> 00:43:40.240
you no longer need to type Python anymore


00:43:40.240 --> 00:43:42.240
because the file itself contains


00:43:42.240 --> 00:43:46.240
which executable should be run.


00:43:46.240 --> 00:43:47.840
But then you'll notice that you don't have


00:43:47.840 --> 00:43:49.640
the necessary permissions.


00:43:49.640 --> 00:43:54.540
What you need to do is you need to enable the execution bit.


00:43:54.540 --> 00:44:00.940
Yeah, so this would give you as the user permission to actually execute this file.


00:44:00.940 --> 00:44:04.540
You do that, of course, with a command line tool.


00:44:04.540 --> 00:44:09.440
It's called chmod, C-H-M-O-D, for change mode.


00:44:09.440 --> 00:44:12.240
And then U+X, the name of the file, right?


00:44:12.240 --> 00:44:14.840
These details are, if you're really interested,


00:44:14.840 --> 00:44:19.240
one place where you can find them is in chapter four


00:44:19.240 --> 00:44:22.340
of my book, Data Science at the Command Line, which you can read for free.


00:44:23.040 --> 00:44:30.240
Okay, but let's say that you've enabled the execution bit, now you can run it.


00:44:30.240 --> 00:44:35.980
You would still need to type a period and a slash,


00:44:35.980 --> 00:44:40.240
because this file is presumably not yet on your search path.


00:44:40.240 --> 00:44:44.540
So your search path is a list of directories


00:44:44.540 --> 00:44:50.240
where your shell will be looking for the executable that you want to run.


00:44:50.240 --> 00:44:52.100
Where is your tool located?


00:44:52.100 --> 00:44:55.060
well, should be somewhere on the search path.


00:44:55.060 --> 00:44:59.580
So either you add another path to the search path


00:44:59.580 --> 00:45:01.300
or you move the tool


00:45:01.300 --> 00:45:03.540
to one of the existing directories out there.


00:45:03.540 --> 00:45:10.100
That's about it for making your code executable,


00:45:10.100 --> 00:45:13.580
but then you probably want to change one or two things


00:45:13.580 --> 00:45:15.180
about the code itself.


00:45:15.180 --> 00:45:16.940
Yeah, so I would,


00:45:19.380 --> 00:45:30.180
one thing to do is look for any hard-coded values that you actually want to be, want to make dynamic, right?


00:45:30.180 --> 00:45:33.780
These should be turned into command line arguments.


00:45:33.780 --> 00:45:36.680
And actually, you can take that one step further.


00:45:36.680 --> 00:45:43.680
If you have, if one portion of your file is doing something that can be done by another command line tool,


00:45:43.680 --> 00:45:45.580
then consider removing that.


00:45:45.580 --> 00:45:47.380
For example, downloading a file.


00:45:47.980 --> 00:45:51.660
Yeah, there's of course a tool for that on the command line.


00:45:51.660 --> 00:45:56.660
Why would you then write this yourself?


00:45:56.660 --> 00:45:58.660
Of course, there's a time and a place for that.


00:45:58.660 --> 00:46:07.300
But let's say, okay, a very contrived example is a Python program that would count words.


00:46:07.300 --> 00:46:09.300
Yeah, right.


00:46:09.300 --> 00:46:15.620
If your code has some hard coded website, yeah, I mean, why?


00:46:15.620 --> 00:46:20.380
it would be, you would make your tool more generic


00:46:20.380 --> 00:46:23.200
by getting rid of that hard-coded URL


00:46:23.200 --> 00:46:26.080
and well, turn it into a command line argument.


00:46:26.080 --> 00:46:28.840
Okay, which website would you like to download?


00:46:28.840 --> 00:46:31.560
Or to go one step further is to think,


00:46:31.560 --> 00:46:32.520
okay, you know what?


00:46:32.520 --> 00:46:35.500
I don't really care where the text is coming from.


00:46:35.500 --> 00:46:37.420
I just want to count words.


00:46:37.420 --> 00:46:38.480
So-


00:46:38.480 --> 00:46:39.880
- Give me text somehow.


00:46:39.880 --> 00:46:41.060
- Yeah. - Sorry?


00:46:41.060 --> 00:46:42.100
- Just give me the text.


00:46:42.100 --> 00:46:43.840
Don't tell me the URL.


00:46:43.840 --> 00:46:48.640
>> Your tool should then be reading from standard input,


00:46:48.640 --> 00:46:54.080
which is a special channel from which you can receive data.


00:46:54.080 --> 00:46:57.760
This is also where the piping would come in.


00:46:57.760 --> 00:47:01.440
You would first use a tool that would get this text,


00:47:01.440 --> 00:47:03.240
maybe it's some log file,


00:47:03.240 --> 00:47:08.200
so you want to count your errors or it's another website,


00:47:08.200 --> 00:47:11.800
and you want to do stuff to that.


00:47:11.800 --> 00:47:14.840
It doesn't really matter, but you would then,


00:47:14.840 --> 00:47:17.340
that would write to its standard output.


00:47:17.340 --> 00:47:18.180
Yeah.


00:47:18.180 --> 00:47:20.400
And you would combine the standard output


00:47:20.400 --> 00:47:23.560
from the first tool with your standard input


00:47:23.560 --> 00:47:25.780
using the pipe operator.


00:47:25.780 --> 00:47:30.780
So that's, that's basically it for, I mean, of course,


00:47:30.780 --> 00:47:35.280
if you want to take this further, you can think about,


00:47:35.280 --> 00:47:39.520
you know, adding some help, some nice looking help.


00:47:39.520 --> 00:47:41.680
Think about the arguments themselves,


00:47:41.680 --> 00:47:45.440
You want to use short options or long options.


00:47:45.440 --> 00:47:47.320
>> Exactly.


00:47:47.320 --> 00:47:50.040
>> Something like Typer or Click or one of


00:47:50.040 --> 00:47:53.160
these formal CLI frameworks.


00:47:53.160 --> 00:47:58.960
>> Yeah. Python, of course, has R parse.


00:47:58.960 --> 00:48:03.600
But there are packages out there


00:48:03.600 --> 00:48:09.960
that can really help you build beautiful command line tools.


00:48:09.960 --> 00:48:13.760
Typer is one of them. I'm currently using Click.


00:48:13.760 --> 00:48:17.960
Also, Click in combination with Rich.


00:48:17.960 --> 00:48:24.960
So, of course, the author of Rich was on the show a couple of episodes ago.


00:48:24.960 --> 00:48:27.360
Yeah, Will McGugan. Very good stuff.


00:48:27.360 --> 00:48:33.860
While we're talking about that, you know, the other thing that's really pretty interesting is the Rich CLI.


00:48:33.860 --> 00:48:35.860
Have you played with Rich CLI?


00:48:35.860 --> 00:48:38.420
which, oh, yeah, okay.


00:48:38.420 --> 00:48:41.720
So that's indeed a command line tool in itself


00:48:41.720 --> 00:48:43.140
that can do a whole bunch of things.


00:48:43.140 --> 00:48:46.500
Yeah, you wanna tell us something about that?


00:48:46.500 --> 00:48:47.900
- You know, I haven't done much with it,


00:48:47.900 --> 00:48:52.680
but you can do things like, if you install the rich CLI,


00:48:52.680 --> 00:48:56.600
then you can say things, there's lots of ways to install it.


00:48:56.600 --> 00:48:59.780
You could say like rich and then a Python file


00:48:59.780 --> 00:49:01.620
or a JavaScript file or a JSON file,


00:49:01.620 --> 00:49:04.580
and it'll give you pretty printed color,


00:49:04.580 --> 00:49:07.100
you know, syntax highlighted print out,


00:49:07.100 --> 00:49:10.260
you can say, rich some CSV file,


00:49:10.260 --> 00:49:12.860
and it will give you a formatted table


00:49:12.860 --> 00:49:15.020
inside your terminal with colors and everything


00:49:15.020 --> 00:49:19.380
of it understands markdown and like renders markdown.


00:49:19.380 --> 00:49:21.580
And there's all sorts.


00:49:21.580 --> 00:49:23.340
So if you're kind of exploring files


00:49:23.340 --> 00:49:25.020
and you're happy with Python things


00:49:25.020 --> 00:49:26.900
and like installing the rich CLI


00:49:26.900 --> 00:49:29.680
is a pretty neat way to go as well.


00:49:29.680 --> 00:49:32.620
- Yeah, it's a nifty tool, but just not to get confused.


00:49:32.620 --> 00:49:42.620
This tool is provided by Rich and it uses Rich to produce nice looking output.


00:49:42.620 --> 00:49:46.980
But just imagine that you can write your own command line tools that would also produce


00:49:46.980 --> 00:49:53.100
this nice looking output and for that you can then use this package called Rich.


00:49:53.100 --> 00:49:57.580
In combination perhaps with things like Typer or Click.


00:49:57.580 --> 00:50:01.820
And DocOpt is another way you can go.


00:50:01.820 --> 00:50:03.740
There are so many tools out there.


00:50:03.740 --> 00:50:06.380
- Yeah, there absolutely are.


00:50:06.380 --> 00:50:09.780
One other thing I would like to point out that,


00:50:09.780 --> 00:50:12.980
so there's taking the script and making it executable


00:50:12.980 --> 00:50:13.800
and put it in the path.


00:50:13.800 --> 00:50:17.500
That's kind of a, it's a great way to take scripts


00:50:17.500 --> 00:50:20.660
that you have and make them CLI commands for you.


00:50:20.660 --> 00:50:23.940
If you want to like formalize this a little bit more,


00:50:23.940 --> 00:50:26.780
I recently ran across this project called


00:50:26.780 --> 00:50:29.860
the Twitter Archive Parser.


00:50:29.860 --> 00:50:30.900
And I don't know if you've noticed,


00:50:30.900 --> 00:50:32.500
but there's a lot of turmoil at Twitter.


00:50:32.500 --> 00:50:34.660
And so what you can do is you go to Twitter


00:50:34.660 --> 00:50:37.240
and download your entire history


00:50:37.240 --> 00:50:39.760
of like thousands of tweets or whatever


00:50:39.760 --> 00:50:44.420
as a HTML file and some JSON files


00:50:44.420 --> 00:50:46.100
and you can save them for yourself.


00:50:46.100 --> 00:50:49.900
But the content of like all of the links


00:50:49.900 --> 00:50:54.900
are the shortened to.co Twitter short links.


00:50:54.900 --> 00:50:56.300
And if Twitter were to go away,


00:50:56.300 --> 00:50:58.260
you'd have no idea what any of your links


00:50:58.260 --> 00:50:59.940
you've ever mentioned ever were.


00:50:59.940 --> 00:51:03.780
And also the images that you get are the low res images


00:51:03.780 --> 00:51:05.260
and you can get the high res images


00:51:05.260 --> 00:51:06.740
if you know how to download them.


00:51:06.740 --> 00:51:10.420
So this guy, Tim Hutton, created this really cool utility


00:51:10.420 --> 00:51:13.220
that you can take that downloaded archive


00:51:13.220 --> 00:51:16.300
and upgrade it to standalone with high res images


00:51:16.300 --> 00:51:19.820
and full resolved links, not shortened links.


00:51:19.820 --> 00:51:20.940
Pretty cool, right?


00:51:20.940 --> 00:51:23.900
But if you look at the way to, like, how do you use it?


00:51:23.900 --> 00:51:25.340
Okay, where does it say this?


00:51:25.340 --> 00:51:28.380
Not sure where it is.


00:51:28.380 --> 00:51:29.300
Yeah, so how do I use it?


00:51:29.300 --> 00:51:32.640
I download my Twitter archive and unzip it fine.


00:51:32.640 --> 00:51:36.140
And then I download the Python file


00:51:36.140 --> 00:51:39.080
to the working directory.


00:51:39.080 --> 00:51:43.140
And then I go in there and I type Python that file.


00:51:43.140 --> 00:51:45.660
Wouldn't it be better if I could just,


00:51:45.660 --> 00:51:47.920
you know, it has dependencies it has to install


00:51:47.920 --> 00:51:48.800
in order for it to run.


00:51:48.800 --> 00:51:51.360
Wouldn't it be better if I could just use this as a command?


00:51:51.360 --> 00:51:55.760
So what I did is I forked this and I said,


00:51:55.760 --> 00:51:58.240
I'm gonna add a pyproject.toml


00:51:58.240 --> 00:52:00.680
to turn this into a package.


00:52:00.680 --> 00:52:03.800
And then, under the pyproject.toml,


00:52:03.800 --> 00:52:05.520
you say project.scripts,


00:52:05.520 --> 00:52:07.440
Twitter archive markdown, Twitter archive images,


00:52:07.440 --> 00:52:09.680
and you map into your package


00:52:09.680 --> 00:52:13.640
and then in functions that you wanna call.


00:52:13.640 --> 00:52:16.560
And then once you pip install this,


00:52:16.560 --> 00:52:19.880
these commands become just CLI commands.


00:52:19.880 --> 00:52:22.280
And it doesn't matter how that happened,


00:52:22.280 --> 00:52:24.860
long as your Python packages are in the path,


00:52:24.860 --> 00:52:27.200
which they generally have to be anyway,


00:52:27.200 --> 00:52:28.960
'cause you wanna do things like pytest and black,


00:52:28.960 --> 00:52:31.040
then if you just pip install this project,


00:52:31.040 --> 00:52:33.900
it adopts all these commands here, which is pretty cool.


00:52:33.900 --> 00:52:35.640
- Nice.


00:52:35.640 --> 00:52:40.640
Is it then necessary to add this bin directory once


00:52:40.640 --> 00:52:43.400
to your search path?


00:52:43.400 --> 00:52:47.360
Because it lives somewhere on their site packages, right?


00:52:47.360 --> 00:52:48.200
- Yes, exactly.


00:52:48.200 --> 00:52:51.200
And so if you have a Python installation


00:52:51.200 --> 00:52:52.680
and you try to pip install something,


00:52:52.680 --> 00:52:54.640
you'll get a warning that the site packages


00:52:54.640 --> 00:52:55.840
are not in the path.


00:52:55.840 --> 00:52:57.320
So you do have to do that.


00:52:57.320 --> 00:53:00.680
And then go one further, you could do pipx.


00:53:00.680 --> 00:53:03.040
I don't know if you played with pipx.


00:53:03.040 --> 00:53:04.440
pipx is awesome.


00:53:04.440 --> 00:53:07.440
So it'll generate the package environments


00:53:07.440 --> 00:53:09.560
and install the dependencies in an isolated environment.


00:53:09.560 --> 00:53:12.160
And it'll set up the path if you just say, intrapath.


00:53:12.160 --> 00:53:14.000
Then so if you pipx install the thing


00:53:14.000 --> 00:53:16.320
with the commands in it,


00:53:16.320 --> 00:53:21.040
those automatically get managed and upgraded by pipx


00:53:21.040 --> 00:53:22.240
as just part of your CLI,


00:53:22.240 --> 00:53:25.200
which like that's a perfect chain of like a four,


00:53:25.200 --> 00:53:27.160
but you've got to have a formal package


00:53:27.160 --> 00:53:30.080
and like a place to install it from like Git or PyPI


00:53:30.080 --> 00:53:33.320
or whatever, but it's still like a neat


00:53:33.320 --> 00:53:35.520
pro level type of thing, I think.


00:53:35.520 --> 00:53:38.520
- Yeah, yeah, you can take this pretty far,


00:53:38.520 --> 00:53:40.340
make it really professional.


00:53:40.340 --> 00:53:44.600
And before you know it, you start maintaining it for.


00:53:44.600 --> 00:53:45.760
- Exactly.


00:53:45.760 --> 00:53:47.440
When am I doing PRs on this silly thing?


00:53:47.440 --> 00:53:48.520
I don't know.


00:53:48.520 --> 00:53:52.080
- Yeah, but just to clarify,


00:53:52.080 --> 00:53:55.420
if you say for a one-off or a two-off,


00:53:55.420 --> 00:53:58.820
you want to make something that is reproducible,


00:53:58.820 --> 00:54:00.960
so a reusable command line tool,


00:54:00.960 --> 00:54:02.960
not reproducible, reusable,


00:54:02.960 --> 00:54:07.160
you don't really need any other packages.


00:54:07.160 --> 00:54:12.160
You can just use sys.argv.


00:54:12.160 --> 00:54:15.000
You import sys and then you have your sys.argv.


00:54:15.000 --> 00:54:17.000
- I do that a fair amount of times.


00:54:17.000 --> 00:54:21.140
It's only for me, I've created an alias,


00:54:21.140 --> 00:54:22.460
So it always gets the right argument.


00:54:22.460 --> 00:54:24.620
There's like, there's no ambiguity.


00:54:24.620 --> 00:54:28.320
It's just Rv bracket one, let's go.


00:54:28.320 --> 00:54:29.500
- Exactly, yep.


00:54:29.500 --> 00:54:32.380
- Yeah, yeah, yeah, for sure.


00:54:32.380 --> 00:54:35.900
All right, so we've talked a lot about,


00:54:35.900 --> 00:54:37.620
sort of around all the cool things we can do


00:54:37.620 --> 00:54:39.340
with the command line, but in your book,


00:54:39.340 --> 00:54:44.140
you actually talked about a bunch of surprising tools.


00:54:44.140 --> 00:54:46.220
So like, one of the things you talked about


00:54:46.220 --> 00:54:48.620
is obtaining data and you hinted at this before,


00:54:48.620 --> 00:54:50.100
like you can just use curl.


00:54:50.100 --> 00:54:53.680
for downloading those kinds of things.


00:54:53.680 --> 00:54:55.380
But if you get a little bit farther,


00:54:55.380 --> 00:54:57.440
like under scrubbing data,


00:54:57.440 --> 00:55:04.220
you talk about grep and awk that a lot of people maybe know.


00:55:04.220 --> 00:55:06.780
But then if we go a tad further over to say,


00:55:06.780 --> 00:55:09.320
exploring data, then all of a sudden,


00:55:09.320 --> 00:55:13.580
you can type things like head of some CSV file


00:55:13.580 --> 00:55:16.580
and it kind of does the same thing as Jupyter.


00:55:16.580 --> 00:55:21.580
Or there's things like CSV cut and SQL, CSV, CSV, SQL.


00:55:21.580 --> 00:55:29.140
Talk about some of these maybe more direct data science tools


00:55:29.140 --> 00:55:30.200
that people can use.


00:55:30.200 --> 00:55:36.520
- Right, so let's see then where to begin.


00:55:36.520 --> 00:55:43.100
What you just mentioned,


00:55:43.100 --> 00:55:45.660
so you mentioned a couple of tools, right?


00:55:45.660 --> 00:55:50.460
the head and awk and grep, those are,


00:55:50.460 --> 00:55:54.900
I would consider them the classic command line tools, right?


00:55:54.900 --> 00:55:58.460
Part of core utils, GNU core utils, right?


00:55:58.460 --> 00:56:03.300
You can, if you have a fresh install,


00:56:03.300 --> 00:56:06.220
then you can expect those tools to be present.


00:56:06.220 --> 00:56:08.980
Yeah, if you're not on Windows.


00:56:08.980 --> 00:56:13.980
So those tools, they operate on text, on plain text,


00:56:14.820 --> 00:56:19.700
and they have no notion of any other structure


00:56:19.700 --> 00:56:21.620
that might be present in this data,


00:56:21.620 --> 00:56:26.620
say CSV for when you have some rectangular structure


00:56:26.620 --> 00:56:28.640
or JSON when you can have


00:56:28.640 --> 00:56:31.260
a potentially deeply nested data structure.


00:56:31.260 --> 00:56:33.180
These tools know nothing about that.


00:56:33.180 --> 00:56:36.360
That doesn't make them entirely useless, right?


00:56:36.360 --> 00:56:38.260
There are ways to work around them,


00:56:38.260 --> 00:56:42.760
around that issue.


00:56:42.760 --> 00:56:46.800
But there are nowadays plenty of tools available


00:56:46.800 --> 00:56:50.800
that are able to work with this structure.


00:56:50.800 --> 00:56:55.800
And one of them is actually a suite of tools.


00:56:55.800 --> 00:56:57.880
It's called CSV kit.


00:56:57.880 --> 00:57:01.000
And you can install it as a Python package


00:57:01.000 --> 00:57:06.520
through pip, which of course we do at the command line.


00:57:06.520 --> 00:57:07.960
And then you have-


00:57:07.960 --> 00:57:09.640
- CSV kit, you say?


00:57:09.640 --> 00:57:11.240
- Yeah, exactly.


00:57:11.240 --> 00:57:13.240
Uh-huh.


00:57:13.240 --> 00:57:23.560
And then you get a whole bunch of tools that understand that, you know, lines are rows.


00:57:23.560 --> 00:57:31.640
The first line is a header, and all these fields are delimited by default by a comma.


00:57:31.640 --> 00:57:40.920
And then you can do things like extract columns or sort a file according to a certain column.


00:57:40.920 --> 00:57:51.640
Yeah, so this is more difficult for when you're working with the core data utils.


00:57:51.640 --> 00:57:58.140
And of course, all of these things you can do in pandas, and it might even be faster


00:57:58.140 --> 00:58:06.720
in pandas, as opposed to these CSV tools, not as opposed to the classic command line


00:58:06.720 --> 00:58:07.880
tools.


00:58:07.880 --> 00:58:13.400
But I mean, in order to get started with pandas, right, just imagine that you're given this


00:58:13.400 --> 00:58:20.880
file by your colleague, and you're asked to quickly sum things together.


00:58:20.880 --> 00:58:25.560
In order to just get started with pandas, what are then the things that you need to


00:58:25.560 --> 00:58:26.560
do?


00:58:26.560 --> 00:58:32.440
Fire up JupyterLab, import pandas, maybe a bunch of other things.


00:58:32.440 --> 00:58:36.640
There is, of course, also a time and a place for that.


00:58:36.640 --> 00:58:37.640
Definitely.


00:58:37.640 --> 00:58:40.920
I always use the tool that gets the job done, don't get me wrong here.


00:58:40.920 --> 00:58:53.060
But it's just so incredibly powerful if it solves the job to just whip up a command on the command line


00:58:53.060 --> 00:58:55.860
using a couple of tools there.


00:58:55.860 --> 00:59:04.120
If you're going that route, then CSV Kit is not the only suite of tools that you should know about.


00:59:04.120 --> 00:59:08.760
XSV written in Rust.


00:59:08.760 --> 00:59:12.920
But yeah, you shouldn't care about that because the command line doesn't care.


00:59:12.920 --> 00:59:15.720
Yeah, but it's generally faster.


00:59:15.720 --> 00:59:19.320
One thing that CSV kit can do, by the way,


00:59:19.320 --> 00:59:23.160
and I'm actually kind of proud that I have been able to contribute


00:59:23.160 --> 00:59:26.040
that tool to the suite of tools,


00:59:26.040 --> 00:59:31.080
is CSV SQL, and it allows you to


00:59:31.080 --> 00:59:35.840
run a SQL query directly on the CSV file.


00:59:35.840 --> 00:59:40.500
So if you are familiar with SQL,


00:59:40.500 --> 00:59:43.640
then you can leverage that knowledge directly at


00:59:43.640 --> 00:59:46.600
the command line without first having to create


00:59:46.600 --> 00:59:50.600
a new database and import that CSV file in there and so forth.


00:59:50.600 --> 00:59:54.640
>> One of the things you can do on the command line is basically,


00:59:54.640 --> 00:59:59.780
just give it, like here's a SQLite file database,


00:59:59.780 --> 01:00:04.780
and now go insert all the things from the CSV file into it.


01:00:04.780 --> 01:00:07.780
Here in this example, it has this create table statement.


01:00:07.780 --> 01:00:09.700
Does it figure that out from the CSV


01:00:09.700 --> 01:00:11.140
or do you need to write that?


01:00:11.140 --> 01:00:14.820
- It figures it out.


01:00:14.820 --> 01:00:18.140
Yeah, it does some, it looks at the first,


01:00:18.140 --> 01:00:20.860
say a thousand rows and then figure out like,


01:00:20.860 --> 01:00:23.900
okay, this is a number, this is a text.


01:00:23.900 --> 01:00:24.740
- Yeah, cool.


01:00:26.500 --> 01:00:30.340
But I was actually talking about the other tool,


01:00:30.340 --> 01:00:32.500
and that's SQL2 CSV.


01:00:32.500 --> 01:00:33.940
I always mix those up.


01:00:33.940 --> 01:00:34.940
- The reverse, yeah.


01:00:34.940 --> 01:00:38.420
- Yes, exactly, this one.


01:00:38.420 --> 01:00:42.740
And there, it still uses SQLite under the hood,


01:00:42.740 --> 01:00:44.140
but you don't need to worry about that.


01:00:44.140 --> 01:00:46.980
It takes care of all that boilerplate for you.


01:00:46.980 --> 01:00:48.860
You just say, okay,


01:00:48.860 --> 01:00:54.100
select these columns from standard input,


01:00:54.100 --> 01:00:58.340
order them by this column and this is the file


01:00:58.340 --> 01:00:59.760
or I've piped.


01:00:59.760 --> 01:01:03.060
- Yeah, that's cool.


01:01:03.060 --> 01:01:04.600
- Yeah, yeah.


01:01:04.600 --> 01:01:07.580
So, yep, yeah, it's pretty cool.


01:01:07.580 --> 01:01:10.680
- Yeah, I mean, maybe you've got like some production


01:01:10.680 --> 01:01:12.860
database and you wanna filter out,


01:01:12.860 --> 01:01:17.340
I just need this table with this particular query, right?


01:01:17.340 --> 01:01:21.240
It's like, I only wanna focus on my region of this data,


01:01:21.240 --> 01:01:23.100
give it to me as a CSV file.


01:01:23.100 --> 01:01:25.140
then you can go work on it all you want.


01:01:25.140 --> 01:01:29.180
You don't have to be connected to the database or near it


01:01:29.180 --> 01:01:30.340
or any of those things, right?


01:01:30.340 --> 01:01:32.860
Potentially, if it doesn't have any sensitive data,


01:01:32.860 --> 01:01:34.380
you could share that, right?


01:01:34.380 --> 01:01:35.940
You would never share the connection string


01:01:35.940 --> 01:01:36.780
to your database.


01:01:36.780 --> 01:01:38.100
That'd be insane.


01:01:38.100 --> 01:01:38.940
- Yep.


01:01:38.940 --> 01:01:39.940
Yeah.


01:01:39.940 --> 01:01:40.780
Exactly.


01:01:40.780 --> 01:01:43.140
- Okay.


01:01:43.140 --> 01:01:46.100
Very cool.


01:01:46.100 --> 01:01:47.460
So what are some of the other tools?


01:01:47.460 --> 01:01:51.140
Well, if we go back, if I go back to the CSV kit,


01:01:51.140 --> 01:01:54.580
You can see there's some of these you talked about,


01:01:54.580 --> 01:01:59.240
there's into CSV, that one takes an Excel,


01:01:59.240 --> 01:02:04.300
XSL or XSLX and converts it to a CSV


01:02:04.300 --> 01:02:07.220
just on the command prompt or the terminal, right?


01:02:07.220 --> 01:02:08.340
- Yep, yeah.


01:02:08.340 --> 01:02:12.860
Also, I should point out that I'm not the author


01:02:12.860 --> 01:02:14.380
of CSV kit, right?


01:02:14.380 --> 01:02:17.620
I just contributed a very small portion to it


01:02:17.620 --> 01:02:20.520
because of the ingredients that were already there.


01:02:20.520 --> 01:02:25.520
Still proud of it though, but it's being created


01:02:25.520 --> 01:02:28.960
by many other people.


01:02:28.960 --> 01:02:29.960
- Sure, of course.


01:02:29.960 --> 01:02:35.380
Some other things it has is like CSV stat and CSV rep.


01:02:35.380 --> 01:02:40.380
Yeah, a lot of cool command line options


01:02:40.380 --> 01:02:42.040
to point at these things, right?


01:02:42.040 --> 01:02:47.200
Let's see, I pulled out some others.


01:02:49.700 --> 01:02:50.540
Let's see here.


01:02:50.540 --> 01:02:58.940
Rush.


01:02:58.940 --> 01:03:01.160
So one of the areas that,


01:03:01.160 --> 01:03:03.920
the graph, basically plotting,


01:03:03.920 --> 01:03:04.900
we're basically out of time,


01:03:04.900 --> 01:03:07.260
but I wanna talk about two things really quick.


01:03:07.260 --> 01:03:11.700
Some of this, which chapter did you put under


01:03:11.700 --> 01:03:13.580
where you have the pictures?


01:03:13.580 --> 01:03:15.380
- Seven.


01:03:15.380 --> 01:03:19.420
So visualizing, exploring data, and then it's--


01:03:19.420 --> 01:03:20.260
- Yeah, here we go.


01:03:20.260 --> 01:03:23.420
- So if you, so tell us a little bit about this.


01:03:23.420 --> 01:03:27.480
Like you can plot stuff in your terminal.


01:03:27.480 --> 01:03:29.140
- Yeah, yeah, it's kind of crazy.


01:03:29.140 --> 01:03:30.040
And you know what?


01:03:30.040 --> 01:03:35.040
I should say that Rush is a proof of concept, right?


01:03:35.040 --> 01:03:40.220
It's one of those projects that have a lot of potential,


01:03:40.220 --> 01:03:44.460
but don't necessarily have enough users.


01:03:44.460 --> 01:03:47.540
And I don't necessarily have enough time


01:03:47.540 --> 01:03:49.020
to maintain it properly,


01:03:49.020 --> 01:03:53.540
but it does prove the concept.


01:03:53.540 --> 01:03:58.420
So, Rush, the name, I mean, it's for when you're in a rush,


01:03:58.420 --> 01:04:00.020
it's R on the shell.


01:04:00.020 --> 01:04:06.260
And what it does, it leverages R under the hood.


01:04:06.260 --> 01:04:13.660
And for plotting, it leverages a particular R package,


01:04:13.660 --> 01:04:18.420
ggplot2, which is the data visualization package


01:04:18.420 --> 01:04:20.460
for when you're working with R.


01:04:20.460 --> 01:04:23.220
- Yeah, kind of the sibling,


01:04:23.220 --> 01:04:25.580
where Matplotlib is a little bit derived from that,


01:04:25.580 --> 01:04:26.420
I believe, right?


01:04:26.420 --> 01:04:29.500
- Well, well, well, now you're mentioning that.


01:04:29.500 --> 01:04:33.140
Actually, Matplotlib is very different.


01:04:33.140 --> 01:04:36.260
Matplotlib is very low level


01:04:36.260 --> 01:04:38.800
and gives you a lot of flexibility,


01:04:38.800 --> 01:04:42.140
but also requires a lot of work.


01:04:42.140 --> 01:04:47.140
Now, if you wanna visualize data in Python


01:04:47.940 --> 01:04:52.100
in a similar way that ggplot uses,


01:04:52.100 --> 01:04:54.420
then I can recommend PlotMine.


01:04:54.420 --> 01:04:59.700
So that's a Python package that is modeled


01:04:59.700 --> 01:05:02.340
after ggplot2's API.


01:05:02.340 --> 01:05:06.060
But that was a little segue there.


01:05:06.060 --> 01:05:11.940
Now, somebody else created a backend for ggplot


01:05:11.940 --> 01:05:15.660
that allows you to create visualizations


01:05:15.660 --> 01:05:22.060
on the command line, what I then did was create this interface.


01:05:22.060 --> 01:05:27.020
So something that would translate arguments


01:05:27.020 --> 01:05:31.740
and their values to the appropriate function call,


01:05:31.740 --> 01:05:33.740
and also does a lot of boilerplate


01:05:33.740 --> 01:05:39.300
when it comes to reading in the CSV file that you provide.


01:05:39.300 --> 01:05:42.940
If you were to do this in R itself,


01:05:42.940 --> 01:05:47.940
it would require, let's say, about five lines of code


01:05:47.940 --> 01:05:50.280
in order to get started, right?


01:05:50.280 --> 01:05:52.420
And the same holds for Python, right?


01:05:52.420 --> 01:05:54.280
So similar concept, right?


01:05:54.280 --> 01:05:57.940
Import the appropriate packages or modules,


01:05:57.940 --> 01:06:03.100
reading in some file, and there's all this setup.


01:06:03.100 --> 01:06:06.300
And you know, again, that is probably what you want


01:06:06.300 --> 01:06:09.420
when you want things to be a little bit more robust,


01:06:09.420 --> 01:06:12.740
but when you wanna get stuff done quickly,


01:06:12.740 --> 01:06:15.420
really helps to be able to do that as a one-liner


01:06:15.420 --> 01:06:16.860
on a command line.


01:06:16.860 --> 01:06:19.940
And this is where Rush would then come in.


01:06:19.940 --> 01:06:24.940
So I make use of all this, yeah,


01:06:24.940 --> 01:06:30.100
elaborate machinery, you know, in R,


01:06:30.100 --> 01:06:32.600
just to use that at the command line.


01:06:32.600 --> 01:06:34.260
- So like a beautiful little wrapper


01:06:34.260 --> 01:06:35.460
around this complex thing.


01:06:35.460 --> 01:06:36.580
- It is really a wrapper.


01:06:36.580 --> 01:06:39.100
- Hide the complexity, right?


01:06:39.100 --> 01:06:40.460
- Exactly, exactly.


01:06:40.460 --> 01:06:43.980
- Yeah, so you can do beautiful like bar plots.


01:06:43.980 --> 01:06:46.700
There's a lot of neat stuff in here.


01:06:46.700 --> 01:06:47.700
I really like this.


01:06:47.700 --> 01:06:50.620
- It is really nice.


01:06:50.620 --> 01:06:55.620
And yeah, now that I see this again,


01:06:55.620 --> 01:06:58.460
I get excited again.


01:06:58.460 --> 01:07:01.500
There is definitely potential there,


01:07:01.500 --> 01:07:05.360
but you know, it's again, yet another open source project


01:07:05.360 --> 01:07:08.220
that has to be maintained.


01:07:08.220 --> 01:07:13.220
And unfortunately, my time is limited like everybody else's.


01:07:13.220 --> 01:07:15.620
- Yeah, of course, of course.


01:07:15.620 --> 01:07:18.300
All right, the last thing we have time for


01:07:18.300 --> 01:07:20.660
is this polyglot data science.


01:07:20.660 --> 01:07:22.380
Tell us a little bit about this.


01:07:22.380 --> 01:07:26.460
- Yeah, so polyglot data science is the idea


01:07:26.460 --> 01:07:30.560
that in order to get things done,


01:07:30.560 --> 01:07:35.560
you might need to use multiple tools,


01:07:35.560 --> 01:07:37.940
multiple languages, really.


01:07:37.940 --> 01:07:41.580
And throughout the book, so up until then,


01:07:41.580 --> 01:07:43.140
up until that chapter,


01:07:43.140 --> 01:07:49.660
we have mainly been focusing on using other languages


01:07:49.660 --> 01:07:51.980
from the command line,


01:07:51.980 --> 01:07:56.980
but this chapter considers the other way around, right?


01:07:56.980 --> 01:07:59.940
Using the command line from another language.


01:07:59.940 --> 01:08:03.580
So there might've been a situation


01:08:03.580 --> 01:08:06.620
where you're working in Python,


01:08:06.620 --> 01:08:08.900
And then all of a sudden, like, oh, now I


01:08:08.900 --> 01:08:12.080
got to do this regular expression,


01:08:12.080 --> 01:08:16.020
or I got to do some globbing, or I


01:08:16.020 --> 01:08:23.460
have to call this other tool that is not written in Python


01:08:23.460 --> 01:08:26.380
but can be called from the command line.


01:08:26.380 --> 01:08:30.140
Maybe use subprocess, the subprocess module for that.


01:08:30.140 --> 01:08:33.000
These are situations where you want


01:08:33.000 --> 01:08:35.380
to leverage the command line, where you want to break out


01:08:35.380 --> 01:08:40.960
of Python and do parts of your computation on a command line.


01:08:40.960 --> 01:08:46.520
And in that chapter, chapter 10, I demonstrate this not only


01:08:46.520 --> 01:08:50.880
for Python itself, but also in other languages and tools,


01:08:50.880 --> 01:08:55.600
including JupyterLab, where you can pass around, say,


01:08:55.600 --> 01:09:01.360
a variable as standard input and also retrieve the output then


01:09:01.360 --> 01:09:04.600
so that you can continue working in Python again


01:09:04.600 --> 01:09:05.720
with the output.


01:09:05.720 --> 01:09:10.720
So, and what is still very interesting to me


01:09:10.720 --> 01:09:16.720
is that even new languages and tools


01:09:16.720 --> 01:09:21.600
somehow still offer a way to leverage the command line.


01:09:21.600 --> 01:09:26.600
So Spark, Apache Spark has a pipe method


01:09:26.600 --> 01:09:31.240
where you can pass an entire dataset, right?


01:09:31.240 --> 01:09:35.560
RDD through a command line tool.


01:09:35.560 --> 01:09:37.400
And I think that is just,


01:09:37.400 --> 01:09:43.480
maybe it was just a fun little hack,


01:09:43.480 --> 01:09:45.760
what the authors did, I don't know.


01:09:45.760 --> 01:09:49.100
I tried to view it as a compliment,


01:09:49.100 --> 01:09:53.360
like, okay, sometimes we just need to go back to the basics


01:09:53.360 --> 01:09:57.120
and use the command line, because once you're there,


01:09:57.120 --> 01:09:59.140
you're back in this environment


01:09:59.140 --> 01:10:00.460
where you can use everything else.


01:10:00.460 --> 01:10:02.960
- Everything we've spoken about so far


01:10:02.960 --> 01:10:04.900
is now accessible as a command,


01:10:04.900 --> 01:10:09.100
be it Go or Python or your own script or whatever.


01:10:09.100 --> 01:10:11.420
- Exactly, so let's say you've written this,


01:10:11.420 --> 01:10:14.000
you've come across this really nice tool,


01:10:14.000 --> 01:10:16.520
but it's written in Ruby.


01:10:16.520 --> 01:10:19.160
Oh no, what are you gonna do?


01:10:19.160 --> 01:10:22.920
Are you gonna all of a sudden become involved into Ruby?


01:10:22.920 --> 01:10:26.000
No, assuming that this tool can be used


01:10:26.000 --> 01:10:28.840
from the command line, you can of course relax,


01:10:28.840 --> 01:10:33.840
just use the sub process module and still you incorporate


01:10:33.840 --> 01:10:36.700
that Ruby tool into your own script.


01:10:36.700 --> 01:10:38.340
That's the idea.


01:10:38.340 --> 01:10:41.780
- Yeah, I do wanna maybe point out just really quickly here.


01:10:41.780 --> 01:10:46.360
Like this has got a little bit of a little Bobby Tables


01:10:46.360 --> 01:10:48.620
warning asterisk by it, you know.


01:10:48.620 --> 01:10:49.900
- Yeah, yeah, yeah.


01:10:49.900 --> 01:10:51.940
- Right, so for example, one of the things that's awesome


01:10:51.940 --> 01:10:54.700
here is I could run Jupyter console as you show.


01:10:54.700 --> 01:10:57.820
And then if you say exclamation mark command,


01:10:57.820 --> 01:10:59.260
that pumps it straight to the shell.


01:10:59.260 --> 01:11:01.200
So you could say, bang date,


01:11:01.200 --> 01:11:02.040
and it would tell you the date.


01:11:02.040 --> 01:11:05.240
You could have a bang pip install --upgrade request,


01:11:05.240 --> 01:11:07.600
and that'll go and execute that command.


01:11:07.600 --> 01:11:10.240
Don't do that with user input, right?


01:11:10.240 --> 01:11:12.800
'Cause who knows what they're gonna send you.


01:11:12.800 --> 01:11:15.960
You can also do that within Jupyter Notebooks,


01:11:15.960 --> 01:11:17.560
you point out, right?


01:11:17.560 --> 01:11:21.920
So you can do, what is it, percent percent bash,


01:11:21.920 --> 01:11:26.800
and then some interesting complicated thing there, right?


01:11:26.800 --> 01:11:29.960
- Yeah, yeah, that's indeed the magic command


01:11:29.960 --> 01:11:32.760
that you can use in Jupyter notebook.


01:11:32.760 --> 01:11:33.600
- Right, and then--


01:11:33.600 --> 01:11:35.120
- To interpret the entire cell as bash.


01:11:35.120 --> 01:11:37.180
- Yeah, and so then you take what's left of that


01:11:37.180 --> 01:11:39.120
and then you head over to explain shell


01:11:39.120 --> 01:11:40.720
and figure out what the heck it means.


01:11:40.720 --> 01:11:42.160
(laughing)


01:11:42.160 --> 01:11:44.600
- Yeah, maybe do that before you run it, yeah.


01:11:44.600 --> 01:11:45.600
- Yeah, that's a good idea.


01:11:45.600 --> 01:11:48.440
And then also in Python,


01:11:48.440 --> 01:11:55.380
using subprocess is something that I've done several times,


01:11:55.380 --> 01:12:00.380
I need to automate generating some big import


01:12:00.380 --> 01:12:05.860
of say 150 video files across a bunch of directories


01:12:05.860 --> 01:12:08.540
to build a course that we're going to offer.


01:12:08.540 --> 01:12:10.080
Well, and to the database I have to put


01:12:10.080 --> 01:12:11.480
how long is each one of those?


01:12:11.480 --> 01:12:14.980
I have no idea how to get the duration out of an MP4


01:12:14.980 --> 01:12:17.880
or MOV file, but you know what?


01:12:17.880 --> 01:12:22.580
There's a really cool command line program I can run


01:12:22.580 --> 01:12:23.500
and it'll tell me.


01:12:23.500 --> 01:12:25.500
So I just use subprocess and call that,


01:12:25.500 --> 01:12:27.500
and then I can script out the rest in Python.


01:12:27.500 --> 01:12:30.740
And subprocess is not to be underestimated, I think.


01:12:30.740 --> 01:12:32.960
- Yeah, yeah, exactly.


01:12:32.960 --> 01:12:34.240
No, it makes a lot of sense.


01:12:34.240 --> 01:12:36.620
I mean, at a certain point, shell scripts


01:12:36.620 --> 01:12:41.140
can get a little bit too hairy to work with.


01:12:41.140 --> 01:12:43.740
Being able to automate your things


01:12:43.740 --> 01:12:47.740
and use Python as your super glue, right?


01:12:47.740 --> 01:12:49.960
So a little bit stronger than duct tape,


01:12:49.960 --> 01:12:52.820
I think makes a lot of sense.


01:12:52.820 --> 01:12:55.980
- Yeah, we talked at the beginning about how


01:12:55.980 --> 01:12:57.620
you're in this exploration stage


01:12:57.620 --> 01:12:59.020
and you just wanna just run a bunch of stuff


01:12:59.020 --> 01:13:00.180
on the command line and figure it out.


01:13:00.180 --> 01:13:01.720
But when you go to production and you said,


01:13:01.720 --> 01:13:04.180
whatever that means, like this could be one of,


01:13:04.180 --> 01:13:05.260
one thing that it means.


01:13:05.260 --> 01:13:06.940
We're gonna write formal Python code


01:13:06.940 --> 01:13:09.380
and then use subprocess to kind of bring in


01:13:09.380 --> 01:13:11.340
some of this functionality potentially.


01:13:11.340 --> 01:13:13.640
- Yeah, exactly.


01:13:13.640 --> 01:13:17.100
I mean, the command line is by definition,


01:13:17.100 --> 01:13:18.780
very ad hoc, right?


01:13:18.780 --> 01:13:20.460
- Yeah. - In nature.


01:13:20.460 --> 01:13:23.100
still, if you're doing things in production,


01:13:23.100 --> 01:13:27.500
meaning you're interacting with other environments, with servers,


01:13:27.500 --> 01:13:31.500
or you have some kind of continuous integration going on,


01:13:31.500 --> 01:13:36.780
there are these places, these are places where the command line keeps popping up.


01:13:36.780 --> 01:13:37.280
Yeah.


01:13:37.280 --> 01:13:44.940
So even there, it is useful to at least be comfortable


01:13:44.940 --> 01:13:49.980
with this stark and unforgiving environment.


01:13:49.980 --> 01:13:55.460
I think it's really excellent. I think there's a lot of cool stuff that we talked about. I think there's a lot of


01:13:55.460 --> 01:14:07.980
a lot of value for people to learn this. I guess, you know, maybe we close this out with just one comment that I remember from your Strata presentation. You said the command line is like


01:14:07.980 --> 01:14:19.340
wine. Maybe it takes a while to appreciate, but it gets better with age. And I certainly, my first experience was like, okay, I'm going to go from Windows and Mac Dev


01:14:19.340 --> 01:14:23.500
development over to setting up and running servers over SSH.


01:14:23.500 --> 01:14:26.860
It was like, I am beyond lost.


01:14:26.860 --> 01:14:29.540
I have no idea even like just how to get started, right?


01:14:29.540 --> 01:14:30.380
Many years ago.


01:14:30.380 --> 01:14:33.100
And now it's like, well, of course that's a beautiful way.


01:14:33.100 --> 01:14:36.540
And it just, you slowly build up these skills


01:14:36.540 --> 01:14:38.780
and it's really lovely.


01:14:38.780 --> 01:14:40.260
- Yeah, it is.


01:14:40.260 --> 01:14:42.260
No, it took me a long time to get comfortable


01:14:42.260 --> 01:14:43.500
with the command line actually,


01:14:43.500 --> 01:14:45.780
or Linux in a more generic sense.


01:14:45.780 --> 01:14:48.660
I, for the longest time I was running Windows


01:14:48.660 --> 01:14:52.400
and Linux in a dual boot machine.


01:14:52.400 --> 01:14:55.340
And so I just couldn't make the jump.


01:14:55.340 --> 01:14:58.060
And this was over 10 years ago,


01:14:58.060 --> 01:15:01.820
but no, it definitely didn't come overnight


01:15:01.820 --> 01:15:02.980
and I wasn't born with it.


01:15:02.980 --> 01:15:07.580
So, but I also believe that everybody, you know,


01:15:07.580 --> 01:15:11.300
is able to embrace the command line, if you will.


01:15:11.300 --> 01:15:13.660
But you just gotta, you know,


01:15:13.660 --> 01:15:16.080
make yourself a little bit comfortable there as well.


01:15:16.080 --> 01:15:18.280
We talked about that in the beginning, right?


01:15:18.280 --> 01:15:20.560
the right terminal, the right aliases


01:15:20.560 --> 01:15:21.960
can get you a long way.


01:15:21.960 --> 01:15:25.800
- They get you so far and tools like OMYZ Shell


01:15:25.800 --> 01:15:27.720
and some of these others,


01:15:27.720 --> 01:15:31.440
the fast that will help you remember


01:15:31.440 --> 01:15:33.840
the thing you needed to type or like you said,


01:15:33.840 --> 01:15:35.720
aliases and kind of bring it all together.


01:15:35.720 --> 01:15:37.080
Like, I know I did that thing.


01:15:37.080 --> 01:15:39.080
Let me just do a quick search for,


01:15:39.080 --> 01:15:39.920
yeah, there it is.


01:15:39.920 --> 01:15:42.760
Five weeks ago I ran this and this is how I,


01:15:42.760 --> 01:15:44.200
this is how I restart the web server.


01:15:44.200 --> 01:15:45.400
Oh yeah, now I remember.


01:15:45.400 --> 01:15:47.320
- Yeah, yeah.


01:15:47.320 --> 01:15:50.720
I can talk about this all night.


01:15:50.720 --> 01:15:53.760
>> I think we're probably out of time though.


01:15:53.760 --> 01:15:55.400
Let me ask you the final two questions


01:15:55.400 --> 01:15:57.320
before you get out of here.


01:15:57.320 --> 01:16:01.280
If you're going to do some editing or write some code,


01:16:01.280 --> 01:16:04.040
what editor do you choose these days?


01:16:04.040 --> 01:16:09.640
>> I am torn between Visual Studio Code,


01:16:09.640 --> 01:16:15.000
Doom Emacs, and NeoVim.


01:16:15.000 --> 01:16:18.500
But wherever I am in these editors,


01:16:18.500 --> 01:16:22.380
I always have my Vim key bindings set up.


01:16:22.380 --> 01:16:24.980
So it kind of depends on the project.


01:16:24.980 --> 01:16:31.580
But yeah, as long as I have my Vim key bindings, I'm happy.


01:16:31.580 --> 01:16:33.940
- Yeah, yeah, absolutely.


01:16:33.940 --> 01:16:36.260
And then notable,


01:16:36.260 --> 01:16:40.260
normally I ask notable PyPI project or library,


01:16:40.260 --> 01:16:41.940
but maybe broaden a little bit.


01:16:41.940 --> 01:16:44.580
Like if you could recommend one tool,


01:16:44.580 --> 01:16:46.100
one library people could install


01:16:46.100 --> 01:16:50.440
for the command prompt of the shell, what would you say?


01:16:50.440 --> 01:17:02.340
- One tool or one command line tool


01:17:02.340 --> 01:17:05.820
for that they could install on the shell.


01:17:05.820 --> 01:17:09.020
- Just something, it doesn't have to be the most popular.


01:17:09.020 --> 01:17:11.100
Something like people, if I ran across this,


01:17:11.100 --> 01:17:12.260
It was delightful.


01:17:12.260 --> 01:17:14.060
People should know about X.


01:17:14.060 --> 01:17:16.580
- Yeah.


01:17:16.580 --> 01:17:20.660
Canoe parallel, let's do it.


01:17:20.660 --> 01:17:22.540
Let's, yeah, we talked about it.


01:17:22.540 --> 01:17:26.020
So it doesn't require any further explanation.


01:17:26.020 --> 01:17:28.280
It's the tool that, you know,


01:17:28.280 --> 01:17:31.880
makes every other tool way cooler.


01:17:31.880 --> 01:17:35.460
So yeah, if you have that one in your arsenal,


01:17:35.460 --> 01:17:38.020
you can become very powerful.


01:17:38.020 --> 01:17:40.860
- Good recommendation.


01:17:40.860 --> 01:17:42.700
All right, well, final call to action.


01:17:42.700 --> 01:17:43.740
People are excited about this.


01:17:43.740 --> 01:17:44.620
They want to learn more about it.


01:17:44.620 --> 01:17:46.500
What do you tell them?


01:17:46.500 --> 01:17:49.340
- Yeah, a couple of things they can do.


01:17:49.340 --> 01:17:52.520
So my book, "Data Science at the Command Line"


01:17:52.520 --> 01:17:54.240
is freely available.


01:17:54.240 --> 01:17:58.700
Yeah, so the second edition came out a year ago.


01:17:58.700 --> 01:18:02.800
You can read it for free on datascience@commandline.com.


01:18:02.800 --> 01:18:08.960
I also offer a cohort-based course


01:18:08.960 --> 01:18:12.880
that I do twice a year.


01:18:12.880 --> 01:18:18.160
The next cohort is coming up in April,


01:18:18.160 --> 01:18:23.160
and this is, yeah, there, we have six live sessions,


01:18:23.160 --> 01:18:27.280
and then I will, I help a group of researchers


01:18:27.280 --> 01:18:31.240
and developers embracing the command line.


01:18:31.240 --> 01:18:35.660
It's a very different experience than reading a book.


01:18:38.560 --> 01:18:40.660
If you want to know more about that, then also


01:18:40.660 --> 01:18:45.560
data science@commandline.com has a link to that.


01:18:45.560 --> 01:18:48.680
Apart from that, yeah, I mean, if you just


01:18:48.680 --> 01:18:52.280
follow Hacker News, you'll come across--


01:18:52.280 --> 01:18:54.680
now that you're aware of all these tools,


01:18:54.680 --> 01:18:58.400
you'll come across quite a lot of tools every now and then.


01:18:58.400 --> 01:19:03.520
There's not a week in which there's not


01:19:03.520 --> 01:19:05.200
a tool being mentioned.


01:19:05.200 --> 01:19:08.560
There are tools being developed every day.


01:19:08.560 --> 01:19:09.680
Even though it's, you know,


01:19:09.680 --> 01:19:11.320
the technology is over 50 years old,


01:19:11.320 --> 01:19:15.200
it's impossible to keep up, but--


01:19:15.200 --> 01:19:17.200
- It's only getting cooler.


01:19:17.200 --> 01:19:18.040
- Say again?


01:19:18.040 --> 01:19:19.560
- It's only getting cooler.


01:19:19.560 --> 01:19:22.160
- It is only getting cooler.


01:19:22.160 --> 01:19:23.000
Definitely.


01:19:23.000 --> 01:19:27.080
So yeah, that's my recommendation there.


01:19:27.080 --> 01:19:27.960
- All right, fantastic.


01:19:27.960 --> 01:19:28.800
Well, thanks for being here.


01:19:28.800 --> 01:19:30.000
It's been great.


01:19:30.000 --> 01:19:33.520
Congrats on the book and putting all this together.


01:19:33.520 --> 01:19:35.620
Yeah, thank you very much for having me.


01:19:35.620 --> 01:19:37.100
- Yeah, you bet, bye.


01:19:37.100 --> 01:19:37.940
- Bye-bye.


01:19:37.940 --> 01:19:47.940
[BLANK_AUDIO]

