WEBVTT

00:00:00.000 --> 00:00:09.120
Hello, YouTube. Hello, Ryan. Hello, Joe. Hey, Mike. Hey, Michael. Hey, all. If you're out


00:00:09.120 --> 00:00:13.320
there watching the live stream, please feel free to throw some comments in, or I guess


00:00:13.320 --> 00:00:16.320
if you're watching later in the comment section below. But live comments, we'll try to make


00:00:16.320 --> 00:00:21.140
them part of the show. And with that, let's kick off the podcast. Joe, Ryan, welcome to


00:00:21.140 --> 00:00:26.680
Talk Python to Me. Hey, it's great to be here. Thanks for having us. It's fantastic to have


00:00:26.680 --> 00:00:30.960
I'm really excited to talk about earth science


00:00:30.960 --> 00:00:34.640
and all the cool large-scale computing stuff


00:00:34.640 --> 00:00:37.240
and cloud computing and things like that with you.


00:00:37.240 --> 00:00:38.340
It'll be a lot of fun.


00:00:38.340 --> 00:00:43.560
So really looking forward to getting into that.


00:00:43.560 --> 00:00:47.000
Now, before we dive into the topics,


00:00:47.000 --> 00:00:48.720
let's just start with your story.


00:00:48.720 --> 00:00:49.680
Joe, I guess you go first.


00:00:49.680 --> 00:00:51.780
How'd you get into programming and Python?


00:00:51.780 --> 00:00:55.880
- Yeah, so my path came through grad school.


00:00:55.880 --> 00:01:00.360
I was studying civil engineering and climate modeling


00:01:00.360 --> 00:01:03.060
as a graduate student at the University of Washington.


00:01:03.060 --> 00:01:06.360
I was in a computational hydrology group,


00:01:06.360 --> 00:01:08.080
so we were doing lots of computer things.


00:01:08.080 --> 00:01:11.360
And my PhD advisor at the time was like,


00:01:11.360 --> 00:01:13.160
"We wanna do Python stuff.


00:01:13.160 --> 00:01:15.000
I don't know anything about it,


00:01:15.000 --> 00:01:16.320
or I don't know much about it.


00:01:16.320 --> 00:01:17.920
You should be the kind of the guinea pig student


00:01:17.920 --> 00:01:20.840
to bring our group into the modern era."


00:01:20.840 --> 00:01:23.280
So, kind of threw me to the wolves,


00:01:23.280 --> 00:01:28.280
And I ended up really kind of taking on a role that like,


00:01:28.280 --> 00:01:29.720
not just learned it,


00:01:29.720 --> 00:01:31.060
but then started teaching other people.


00:01:31.060 --> 00:01:33.560
And I ended up contributing to open source packages


00:01:33.560 --> 00:01:35.280
and kind of the rest is history.


00:01:35.280 --> 00:01:36.800
- Oh, that's fantastic.


00:01:36.800 --> 00:01:38.240
What were you using before?


00:01:38.240 --> 00:01:39.840
You said you brought them into the modern era.


00:01:39.840 --> 00:01:41.280
Where were you coming from?


00:01:41.280 --> 00:01:43.040
What was the dark ages?


00:01:43.040 --> 00:01:47.920
- Yeah, some terrible mix of like Perl and C shell


00:01:47.920 --> 00:01:52.000
and C and Fortran and a bunch of other shell scripting


00:01:52.000 --> 00:01:54.600
languages. So it's a total spaghetti land.


00:01:54.600 --> 00:01:56.560
Wow. That is a spaghetti land.


00:01:56.560 --> 00:02:00.960
I would say Python and Jupyter and the sci-fi stack probably sounds a little


00:02:00.960 --> 00:02:01.800
simpler.


00:02:01.800 --> 00:02:05.640
Yeah. The connections are a little more natural for sure.


00:02:05.640 --> 00:02:08.440
Indeed. How did people receive it?


00:02:08.440 --> 00:02:13.840
It's been, I mean, it's been great. I think for me personally, it was like,


00:02:13.840 --> 00:02:19.080
uh, quite the revolution revolution and what was possible.


00:02:19.120 --> 00:02:21.160
but then passing it around the lab


00:02:21.160 --> 00:02:23.960
and then around kind of the research community since then,


00:02:23.960 --> 00:02:27.160
I think it's been overwhelmingly positively received


00:02:27.160 --> 00:02:28.720
and we're doing totally different things


00:02:28.720 --> 00:02:30.960
than we could have done without it.


00:02:30.960 --> 00:02:32.640
And I think that's the big change.


00:02:32.640 --> 00:02:35.080
It's not just that it's like a little easier to program,


00:02:35.080 --> 00:02:36.840
but that you can do things


00:02:36.840 --> 00:02:39.080
that you couldn't have done before.


00:02:39.080 --> 00:02:39.920
- Interesting.


00:02:39.920 --> 00:02:41.240
Yeah, people worry that, you know,


00:02:41.240 --> 00:02:43.080
coming from C and Fortran,


00:02:43.080 --> 00:02:44.600
that Python wasn't fast enough.


00:02:44.600 --> 00:02:45.440
They're like, we can't use this.


00:02:45.440 --> 00:02:47.600
This is one of these slow scripting languages.


00:02:47.600 --> 00:02:50.360
or was it you'd already proven it was fine?


00:02:50.360 --> 00:02:52.320
- No, I think, I mean, you hear that on occasion,


00:02:52.320 --> 00:02:56.720
but I think the developer velocity,


00:02:56.720 --> 00:02:59.040
like outweighs that in 99% of the cases.


00:02:59.040 --> 00:02:59.880
- Yeah, I agree.


00:02:59.880 --> 00:03:03.280
- You can always optimize the 1% case further.


00:03:03.280 --> 00:03:04.600
- For sure.


00:03:04.600 --> 00:03:05.520
Ryan, how about you?


00:03:05.520 --> 00:03:08.240
How'd you get into programming in Python?


00:03:08.240 --> 00:03:09.680
- Kind of been a lifelong programmer.


00:03:09.680 --> 00:03:11.560
So I was actually just thinking back when you asked that,


00:03:11.560 --> 00:03:15.000
I think I wrote my first basic code at age seven.


00:03:15.000 --> 00:03:16.240
My dad worked for IBM.


00:03:16.240 --> 00:03:19.840
And so I'm like really been like a kind of lifelong computer


00:03:19.840 --> 00:03:23.720
nerd, drifted away from that a little bit in college


00:03:23.720 --> 00:03:26.400
where I majored in physics.


00:03:26.400 --> 00:03:32.600
But then in graduate school, I did a PhD in climate physics


00:03:32.600 --> 00:03:35.200
and chemistry at MIT.


00:03:35.200 --> 00:03:40.680
And I had a huge need for scientific computing in that.


00:03:40.680 --> 00:03:44.160
So all of a sudden, sort of my computer stuff


00:03:44.160 --> 00:03:47.920
started really coming back full and center my world.


00:03:47.920 --> 00:03:51.120
And it was a MATLAB shop, you know,


00:03:51.120 --> 00:03:54.480
MATLAB Fortran was the stack, you know, there.


00:03:54.480 --> 00:03:58.640
And after I sort of did my first project


00:03:58.640 --> 00:04:02.080
around 2006, 2007 in MATLAB,


00:04:02.080 --> 00:04:04.560
I decided, you know, I just, I'd been doing open source,


00:04:04.560 --> 00:04:08.520
you know, hackery for in other languages for many years.


00:04:08.520 --> 00:04:09.560
And I was like, oh, I got it.


00:04:09.560 --> 00:04:13.320
I need an open source scientific computing solution.


00:04:13.320 --> 00:04:16.640
So I tried Python, got into Python around 2008.


00:04:16.640 --> 00:04:19.120
So that was when, like, I've been at it long enough


00:04:19.120 --> 00:04:21.160
to have like compiled NumPy.


00:04:21.160 --> 00:04:23.760
- Yeah, that's like really when NumPy was basically


00:04:23.760 --> 00:04:25.440
coming out is right around that time.


00:04:25.440 --> 00:04:29.480
- Before Anaconda and the other one.


00:04:29.480 --> 00:04:33.760
And, you know, then just rolled with it ever since.


00:04:33.760 --> 00:04:36.480
So I was like the early adopter Python guy around there.


00:04:36.480 --> 00:04:40.760
I like, you know, helped get a lot of other people into it.


00:04:40.760 --> 00:04:44.880
but it was still always just in my own projects, right?


00:04:44.880 --> 00:04:47.480
Like there was no community.


00:04:47.480 --> 00:04:50.080
I really got into open source community development


00:04:50.080 --> 00:04:55.080
probably around 2014, 2015, when I discovered X-Array.


00:04:55.080 --> 00:05:01.040
And that is like the project that really like turned me


00:05:01.040 --> 00:05:03.960
from just a user to a contributor.


00:05:03.960 --> 00:05:04.780
- Fantastic.


00:05:04.780 --> 00:05:10.680
Yeah, that's like multi-dimensional numpy goodness, right?


00:05:10.680 --> 00:05:12.160
- Yeah, we'll get into it.


00:05:12.160 --> 00:05:13.600
Yeah.


00:05:13.600 --> 00:05:16.880
Was that other distribution to Anaconda?


00:05:16.880 --> 00:05:18.000
Was that Canopy?


00:05:18.000 --> 00:05:18.840
- Yes, Canopy.


00:05:18.840 --> 00:05:19.840
- I see out in the audience.


00:05:19.840 --> 00:05:21.520
Thank you, Yuri.


00:05:21.520 --> 00:05:22.360
Cool.


00:05:22.360 --> 00:05:24.240
The other one I was thinking of was ActiveState.


00:05:24.240 --> 00:05:26.480
So yeah, there's these different distributions


00:05:26.480 --> 00:05:29.600
people can get for optimizing for different stuff.


00:05:29.600 --> 00:05:30.680
It's great.


00:05:30.680 --> 00:05:32.080
All right, how about now?


00:05:32.080 --> 00:05:33.600
Ryan, what are you doing day to day?


00:05:33.600 --> 00:05:35.520
It sounds like you both are still doing


00:05:35.520 --> 00:05:37.440
research university-like things.


00:05:37.440 --> 00:05:38.260
- Absolutely.


00:05:38.260 --> 00:05:40.440
So I'm a professor here at Columbia University in LeMont.


00:05:40.440 --> 00:05:49.360
Earth Observatory and I sort of manage a medium-sized scientific research lab and


00:05:49.360 --> 00:05:54.160
teach at the University, but then I like wear this total other hat as like an


00:05:54.160 --> 00:05:58.720
open-source developer and contributor and so that can that can be sometimes a


00:05:58.720 --> 00:06:02.560
little exhausting to try and wear both those hats at the same time, but I


00:06:02.560 --> 00:06:08.040
really enjoy it. Our work in our lab is focused on computational


00:06:08.040 --> 00:06:13.800
oceanography, trying to understand the role the ocean plays in the climate system, particularly


00:06:13.800 --> 00:06:20.680
the role that small-scale ocean processes, eddies, fronts, instabilities that are occurring


00:06:20.680 --> 00:06:27.120
like at the, say, 10 to 100 kilometer scale, how that sort of turbulence and variability


00:06:27.120 --> 00:06:33.400
influences a large-scale ocean and the role it plays in our changing climate.


00:06:33.400 --> 00:06:38.800
The way we do that research is by working with large scale satellite data from NASA.


00:06:38.800 --> 00:06:45.960
So I'm involved in the NASA surface water and ocean topography science team, a new satellite mission that's launching this year.


00:06:45.960 --> 00:06:51.120
I do a ton of numerical modeling, simulating the ocean with computers.


00:06:51.120 --> 00:07:00.960
And so, you know, at the end of the day, we're doing data analysis, some of which was sort of traditional statistics and visualization.


00:07:01.140 --> 00:07:04.100
Increasingly, machine learning, AI, ML


00:07:04.100 --> 00:07:06.460
are part of our toolkit that we use


00:07:06.460 --> 00:07:08.480
to try and understand the ocean.


00:07:08.480 --> 00:07:09.820
But the bottom line is, yeah,


00:07:09.820 --> 00:07:12.060
just working with a lot of data every day,


00:07:12.060 --> 00:07:16.340
diverse projects, and that has really forced me


00:07:16.340 --> 00:07:20.500
to center the rule of these tools in our work


00:07:20.500 --> 00:07:22.460
and recognize them as sort of,


00:07:22.460 --> 00:07:25.700
that is our, like a lot of my colleagues,


00:07:25.700 --> 00:07:27.340
in other buildings at our lab,


00:07:27.340 --> 00:07:30.160
like they'll have like a million dollar mass spectrometer.


00:07:30.160 --> 00:07:33.180
they have an instrument they use to do science.


00:07:33.180 --> 00:07:35.680
- Some crazy laser or something, right?


00:07:35.680 --> 00:07:36.980
- Yeah, and they turn the crank.


00:07:36.980 --> 00:07:39.620
And we're a data-driven lab.


00:07:39.620 --> 00:07:44.620
And so I think of Pangeo in a way as our instrument


00:07:44.620 --> 00:07:46.920
that we all contribute to and maintain


00:07:46.920 --> 00:07:51.080
that then helps us to do all of the research projects


00:07:51.080 --> 00:07:53.360
that we wanna pursue.


00:07:53.360 --> 00:07:54.920
- Yeah, how fascinating.


00:07:54.920 --> 00:07:59.200
I think you talked about running a research lab


00:07:59.200 --> 00:08:01.800
and then also doing this open source thing,


00:08:01.800 --> 00:08:03.380
this dual hat thing.


00:08:03.380 --> 00:08:06.440
The world may has changed,


00:08:06.440 --> 00:08:09.040
but when I took a couple of computer science classes


00:08:09.040 --> 00:08:11.400
at university when I was my undergraduate degree,


00:08:11.400 --> 00:08:14.920
I didn't feel like a lot of the instructors


00:08:14.920 --> 00:08:19.560
or professors there really had much real world experience


00:08:19.560 --> 00:08:20.980
in programming and stuff.


00:08:20.980 --> 00:08:23.880
And I think things like this, like contributing to X-Ray,


00:08:23.880 --> 00:08:27.400
it must give you this really grounded sense of,


00:08:27.400 --> 00:08:29.900
not only these are the tools that you can use,


00:08:29.900 --> 00:08:30.980
but like, here's how it works.


00:08:30.980 --> 00:08:31.920
These are the people doing it.


00:08:31.920 --> 00:08:33.200
Like you're in the trenches.


00:08:33.200 --> 00:08:35.560
Like, do you think that makes a big difference?


00:08:35.560 --> 00:08:38.340
- I think we have a major education problem


00:08:38.340 --> 00:08:43.260
around computational science in that there's no,


00:08:43.260 --> 00:08:45.520
and I say this as someone like a university professor,


00:08:45.520 --> 00:08:49.480
like we have no curriculum to teach someone


00:08:49.480 --> 00:08:52.480
how to be like an effective computational science,


00:08:52.480 --> 00:08:55.440
and particularly in the context of like open source,


00:08:55.440 --> 00:08:57.560
community-driven software development.


00:08:57.560 --> 00:08:59.520
We have computer science classes


00:08:59.520 --> 00:09:00.920
that will teach you a lot of great things


00:09:00.920 --> 00:09:02.700
about algorithms and data structures


00:09:02.700 --> 00:09:04.020
and even machine learning,


00:09:04.020 --> 00:09:07.080
but they won't teach you how to write effective software.


00:09:07.080 --> 00:09:09.440
And as you said, currently we assume


00:09:09.440 --> 00:09:11.480
you have to learn that in the trenches,


00:09:11.480 --> 00:09:13.160
just getting into a project,


00:09:13.160 --> 00:09:14.640
maybe you work at a company.


00:09:14.640 --> 00:09:17.960
For me, definitely I upped my software engineering game


00:09:17.960 --> 00:09:20.520
so much after I got involved in community open source


00:09:20.520 --> 00:09:23.360
'cause there were people like Stephan Hoyer,


00:09:23.360 --> 00:09:27.160
Google staff engineer who were like reviewing my PRs.


00:09:27.160 --> 00:09:31.220
And so that was huge, but I wish actually


00:09:31.220 --> 00:09:33.500
the university could teach this skillset


00:09:33.500 --> 00:09:35.700
'cause I think it would help the world a lot.


00:09:35.700 --> 00:09:38.220
- Yeah, I think it would as well.


00:09:38.220 --> 00:09:40.700
I think we can absolutely find space


00:09:40.700 --> 00:09:42.780
in the curriculum for it.


00:09:42.780 --> 00:09:45.500
I think math might need to give up a little bit


00:09:45.500 --> 00:09:50.500
to allow for computational math rather than symbolic math.


00:09:51.620 --> 00:09:54.020
If I could pick, I don't want to do realist too much


00:09:54.020 --> 00:09:55.180
and I would do one of your,


00:09:55.180 --> 00:09:56.460
let Joe go to Chinstock as well.


00:09:56.460 --> 00:10:01.140
But I think geometry and the going through proofs


00:10:01.140 --> 00:10:03.020
and the thinking about how do I take axioms


00:10:03.020 --> 00:10:05.100
and using proofs to solve problems


00:10:05.100 --> 00:10:08.580
is exactly the same mindset and the way of thinking


00:10:08.580 --> 00:10:10.500
as solving a computer program


00:10:10.500 --> 00:10:13.060
or solving a problem with a program.


00:10:13.060 --> 00:10:14.620
And I haven't applied geometry that much,


00:10:14.620 --> 00:10:15.940
but I've sure applied a lot of computers.


00:10:15.940 --> 00:10:18.260
So anyway, I just put that out there for people.


00:10:18.260 --> 00:10:19.940
- You might be a little biased.


00:10:19.940 --> 00:10:20.940
- I may be a little biased.


00:10:20.940 --> 00:10:23.140
Although I do have two math degrees for what it's worth.


00:10:23.140 --> 00:10:23.980
- Yeah, there you go.


00:10:23.980 --> 00:10:26.820
- But I'm still willing to put geometry out there.


00:10:26.820 --> 00:10:28.660
Anyway, Joe, how about you?


00:10:28.660 --> 00:10:30.660
What are you doing these days?


00:10:30.660 --> 00:10:32.300
- Yeah, so I wear a couple hats as well.


00:10:32.300 --> 00:10:35.740
My main hat is I'm the technology director at Carbon Plan,


00:10:35.740 --> 00:10:39.700
a nonprofit that's working on the climate problem.


00:10:39.700 --> 00:10:43.900
And there, our focus is really on improving the transparency


00:10:43.900 --> 00:10:45.180
and the scientific integrity


00:10:45.180 --> 00:10:47.300
and quality of climate solutions.


00:10:47.300 --> 00:10:51.780
And we do that by building open source tools and open data


00:10:51.780 --> 00:10:55.260
and doing research into the various climate solutions that


00:10:55.260 --> 00:10:55.800
are out there.


00:10:55.800 --> 00:10:58.300
So we use a lot of open source software to do that.


00:10:58.300 --> 00:11:01.180
And we build a lot of open source tooling,


00:11:01.180 --> 00:11:03.560
including software, to help tell stories


00:11:03.560 --> 00:11:05.520
about different climate solutions.


00:11:05.520 --> 00:11:07.180
The other hat I wear, I'm a scientist


00:11:07.180 --> 00:11:09.260
at the National Center for Atmospheric Research,


00:11:09.260 --> 00:11:13.300
where that part of my role looks a lot like Ryan's day to day.


00:11:13.300 --> 00:11:16.460
We study different things, but I work with big climate model


00:11:16.460 --> 00:11:19.940
data and do data analysis and all of that.


00:11:19.940 --> 00:11:21.020
- Yeah, it sounds really fascinating.


00:11:21.020 --> 00:11:25.300
At Carbon Plant, what kind of data do you all use?


00:11:25.300 --> 00:11:27.780
Do you like hook into electric grids?


00:11:27.780 --> 00:11:31.200
Do you analyze the mixture of electric grids


00:11:31.200 --> 00:11:34.620
or transportation or what kind of problems


00:11:34.620 --> 00:11:36.220
and things do you solve in there?


00:11:36.220 --> 00:11:38.340
- Yeah, so it's a bit of everything.


00:11:38.340 --> 00:11:41.740
We do big data, little data and everything in between.


00:11:41.740 --> 00:11:44.100
But, so like one of the areas we spend a lot of time


00:11:44.100 --> 00:11:46.700
working is in the area of forest offsets


00:11:46.700 --> 00:11:48.820
and trying to ask questions about the quality


00:11:48.820 --> 00:11:53.020
and the potential of using forests as a climate solution.


00:11:53.020 --> 00:11:54.980
And so there we're using everything


00:11:54.980 --> 00:11:58.100
from in situ observations where people go out


00:11:58.100 --> 00:11:59.820
and measure trees with a tape measure


00:11:59.820 --> 00:12:02.260
and they do that every five years.


00:12:02.260 --> 00:12:04.020
And that's like actually a fairly small data set


00:12:04.020 --> 00:12:05.740
even though there's a lot of trees out there.


00:12:05.740 --> 00:12:08.840
It's just, there's only so many measurements you can make.


00:12:08.840 --> 00:12:12.580
And then we also work with climate model data.


00:12:12.580 --> 00:12:15.520
we study climate risk to forests.


00:12:15.520 --> 00:12:18.000
And so there we're building models


00:12:18.000 --> 00:12:20.960
of future forest fire risk


00:12:20.960 --> 00:12:23.480
and trying to understand how that's gonna change


00:12:23.480 --> 00:12:24.320
in the future.


00:12:24.320 --> 00:12:26.360
So that's like big data stuff.


00:12:26.360 --> 00:12:29.600
We're doing lots and lots of model building


00:12:29.600 --> 00:12:30.920
and machine learning and that sort of thing


00:12:30.920 --> 00:12:32.400
on top of climate model data.


00:12:32.400 --> 00:12:34.080
- That sounds fascinating.


00:12:34.080 --> 00:12:36.160
You and I are both in the Pacific Northwest


00:12:36.160 --> 00:12:40.160
and last year was not too terrible for fire season,


00:12:40.160 --> 00:12:44.040
but recently we've had some pretty bad forest fires up here


00:12:44.040 --> 00:12:46.640
and it's definitely concerning.


00:12:46.640 --> 00:12:49.760
- Yeah, it definitely feels like


00:12:49.760 --> 00:12:52.840
I'm studying the world around me more than ever


00:12:52.840 --> 00:12:55.120
when we're working on these fire problems


00:12:55.120 --> 00:12:57.960
and then also experiencing the smoky weather


00:12:57.960 --> 00:12:59.240
that we've been having in the summers


00:12:59.240 --> 00:13:00.760
in the West Coast the last few years.


00:13:00.760 --> 00:13:02.520
- Yeah, it's been pretty crazy.


00:13:02.520 --> 00:13:03.840
- And I mean, I think that's a theme


00:13:03.840 --> 00:13:06.400
in climate science right now.


00:13:06.400 --> 00:13:10.520
It's gone very quickly from this academic problem


00:13:10.520 --> 00:13:12.960
to something that so much of society


00:13:12.960 --> 00:13:15.560
and our economy is engaging with.


00:13:15.560 --> 00:13:19.320
Companies are just getting to work


00:13:19.320 --> 00:13:21.080
on adapting to climate change


00:13:21.080 --> 00:13:25.240
because they're feeling it in their bottom line.


00:13:25.240 --> 00:13:28.560
And it's different than things were 10 years ago.


00:13:28.560 --> 00:13:31.040
- Well, that's good to hear.


00:13:31.040 --> 00:13:34.720
I'm both pessimistic and optimistic


00:13:34.720 --> 00:13:37.520
about how things could go.


00:13:37.520 --> 00:13:40.400
There are so many cool discoveries.


00:13:40.400 --> 00:13:44.840
Folks like you are using Python and computation


00:13:44.840 --> 00:13:47.200
to really understand exactly what's happening


00:13:47.200 --> 00:13:49.960
and keep your finger on the pulse of where they're going.


00:13:49.960 --> 00:13:55.440
And then also I see a mom and her one small kid


00:13:55.440 --> 00:14:00.600
in a Chevy Suburban next to me idling in traffic.


00:14:00.600 --> 00:14:03.200
And it's like, I don't know.


00:14:03.200 --> 00:14:08.200
People do have to internalize it, I think a little bit more,


00:14:08.200 --> 00:14:11.700
but I wonder if it is maybe in business,


00:14:11.700 --> 00:14:16.040
they're starting to react a little bit sooner, right?


00:14:16.040 --> 00:14:19.980
I think companies feel pressure of economics sooner


00:14:19.980 --> 00:14:21.900
than people do a lot of the times.


00:14:21.900 --> 00:14:26.760
- Yeah, I think that's true.


00:14:26.760 --> 00:14:28.400
I think there's also social pressures


00:14:28.400 --> 00:14:32.020
that are pushing companies to act soon.


00:14:32.020 --> 00:14:37.020
And so it's not just, sometimes it's altruistic,


00:14:37.020 --> 00:14:41.300
but also I think there's marketing involved in--


00:14:41.300 --> 00:14:45.660
- Right, just don't wanna look like the bad company


00:14:45.660 --> 00:14:48.460
if they can put on a good image and it's worth it.


00:14:48.460 --> 00:14:50.940
But whatever gets them to do it, I don't care if it's--


00:14:50.940 --> 00:14:53.180
- Yeah, that's what I was just gonna say.


00:14:53.180 --> 00:14:54.500
We don't have to shame that.


00:14:54.500 --> 00:14:56.540
I think that there's a lot of action that needs to happen


00:14:56.540 --> 00:14:58.020
in a lot of sectors right now.


00:14:58.020 --> 00:15:00.620
And so to the extent we can motivate that


00:15:00.620 --> 00:15:02.140
through one mechanism or another,


00:15:02.140 --> 00:15:03.540
that sounds like a good idea.


00:15:03.540 --> 00:15:06.880
- We're getting maybe down this climate rabbit hole,


00:15:06.880 --> 00:15:09.220
but this is probably the most important issue of our time.


00:15:09.220 --> 00:15:10.500
So let's go down it.


00:15:10.500 --> 00:15:13.100
I mean, you gotta distinguish between,


00:15:13.100 --> 00:15:18.660
the terms we use are mitigation versus adaptation, right?


00:15:18.660 --> 00:15:20.620
So mitigating climate is doing things


00:15:20.620 --> 00:15:23.220
like burning less fossil fuels


00:15:23.220 --> 00:15:26.020
that are gonna reduce the potential impacts


00:15:26.020 --> 00:15:27.180
of climate change.


00:15:27.180 --> 00:15:29.300
Adaptation is just accepting


00:15:29.300 --> 00:15:34.180
that climate change is happening, is going to happen, and changing our behavior like


00:15:34.180 --> 00:15:37.380
infrastructure, planning.


00:15:37.380 --> 00:15:41.400
And so when I say I see a lot of companies taking action, I see especially a lot of companies


00:15:41.400 --> 00:15:46.740
taking action from where I sit on adaptation, using Earth system data, using our projections


00:15:46.740 --> 00:15:53.380
from our climate models to make business decisions under this changing climate.


00:15:53.380 --> 00:15:56.980
Mitigation is what we've been calling for for decades.


00:15:56.980 --> 00:16:01.500
that's where like the Chevy Suburban comes in and you know, I I guess I really


00:16:01.500 --> 00:16:04.200
push back against the idea that like


00:16:04.200 --> 00:16:09.520
Personal choices are like an important part of mitigation


00:16:09.520 --> 00:16:12.080
This is I think this narrative has actually been counterproductive


00:16:12.080 --> 00:16:18.500
Like I don't think we need to rely on personal like ethical choices about like which type of like, you know


00:16:18.500 --> 00:16:25.040
Bags to bring to the grocery store. I mean like it's important but like what this is a very very large scale


00:16:25.040 --> 00:16:30.420
It's solving the problem. I think very, very much on the edges when you're just going like but there's this huge middle part


00:16:30.420 --> 00:16:37.780
What are we doing? We need global scale regulation around carbon emissions in order to mitigate climate and that's a political problem


00:16:37.780 --> 00:16:39.760
Yes, it is


00:16:39.760 --> 00:16:46.120
Well, the renewable energy story seems to be coming on faster than people thought recently. So there is a lot of hope in that space


00:16:46.120 --> 00:16:52.760
Now let's talk, you know, you both mentioned a little bit of this sort of blend of


00:16:53.520 --> 00:17:00.720
like open source side of things and then the science side of things let's just talk for a moment about


00:17:00.720 --> 00:17:09.120
Just some general best practices with open source and science and stuff like that. So


00:17:09.120 --> 00:17:12.480
Yeah


00:17:12.480 --> 00:17:15.260
One of the things I guess is Ryan you talked about


00:17:15.260 --> 00:17:22.000
having people like these high-end software engineers reviewing your code and stuff and I suspect there's a lot of


00:17:22.480 --> 00:17:28.180
lessons you've learned that you can kind of bring back to the science world from that open source experience?


00:17:28.180 --> 00:17:32.720
I think there's this whole spectrum of


00:17:32.720 --> 00:17:42.120
open science, right, and open source activities, right? So right now it's pretty common in scientific fields to encourage


00:17:42.120 --> 00:17:49.100
projects, research projects, to publish their research code under


00:17:49.760 --> 00:17:54.400
an open license or put it on github or something like that and


00:17:54.400 --> 00:18:00.560
There's you know, I see that it's just like a very very first step towards a much more


00:18:00.560 --> 00:18:05.940
Transformative way we do science as a community, right?


00:18:05.940 --> 00:18:08.220
like as you well know like just putting a


00:18:08.220 --> 00:18:15.940
Repo up on github has essentially no no impact right like if no like no one uses it like if someone


00:18:16.640 --> 00:18:24.520
pushes their their commit and in a forest and and no one you know, here's it land like okay great like you checked a box


00:18:24.520 --> 00:18:29.360
The real goal of open science is to encourage more reuse


00:18:29.360 --> 00:18:35.360
more collaboration and and accelerate the velocity of scientific discovery and


00:18:35.360 --> 00:18:38.240
That takes more than just putting your code out there


00:18:38.240 --> 00:18:41.720
It takes of course putting your code out there the first step


00:18:41.720 --> 00:18:44.640
but it actually takes making sure people can run it.


00:18:44.640 --> 00:18:46.520
Like they have the environment for it.


00:18:46.520 --> 00:18:52.000
Like they can access the data that it needs to run, that they understand what it can do, that it's coded in a way


00:18:52.000 --> 00:18:58.660
that is extensible and modular, right? And all of those things are a lot more than a license. They're about essentially writing good


00:18:58.660 --> 00:19:06.760
scientific code. And so, yeah, I do think that just the process of getting involved in open source is a huge


00:19:06.760 --> 00:19:10.760
form of education for scientists about how


00:19:11.480 --> 00:19:15.960
collaboration can work, not just even in code, but in general,


00:19:15.960 --> 00:19:19.760
the way the collaboration process works in a well-functioning


00:19:19.760 --> 00:19:23.200
open source project is kind of miraculous.


00:19:23.200 --> 00:19:26.200
Yeah, it absolutely is.


00:19:26.200 --> 00:19:30.400
And, you know, there's a lot of barometers people use when they go


00:19:30.400 --> 00:19:34.840
and look at an open source project to decide, can I trust this thing?


00:19:34.840 --> 00:19:35.720
Right.


00:19:35.720 --> 00:19:39.640
The obvious ones are like, how many stars and forks, like, is it a popular


00:19:39.640 --> 00:19:45.240
that people seem to care about, but others are, does it have tests or does it seem to be operated


00:19:45.240 --> 00:19:51.720
in a way that is going to lead to contributors being able to contribute and the software


00:19:51.720 --> 00:19:59.320
evolving over time in a way that they could depend upon, right? Yeah, I think another thing here


00:19:59.320 --> 00:20:04.520
that's really important to think about is what the incentive structures are for a researcher working


00:20:04.520 --> 00:20:07.240
on a scientific programming problem.


00:20:07.240 --> 00:20:08.240
Absolutely.


00:20:08.240 --> 00:20:13.640
For most graduate students or researchers at institutions that Ryan and I work at, the


00:20:13.640 --> 00:20:16.720
goal is to write a paper or to produce a dataset.


00:20:16.720 --> 00:20:21.560
The software has been thought of as a tool you use to get there, but it's not necessarily


00:20:21.560 --> 00:20:25.120
a tool that you fix or improve along the way.


00:20:25.120 --> 00:20:29.240
And I think one of the things that we've been trying to do is break that pattern a little


00:20:29.240 --> 00:20:32.160
bit and think of that.


00:20:32.160 --> 00:20:34.440
the whole ecosystem of tools that we're working with


00:20:34.440 --> 00:20:38.200
is improvable so that we don't have to reinvent the wheel.


00:20:38.200 --> 00:20:41.000
And individual researchers have,


00:20:41.000 --> 00:20:44.560
I actually, and maybe just speaking for myself,


00:20:44.560 --> 00:20:47.280
being able to say, okay, I'm gonna take a,


00:20:47.280 --> 00:20:49.640
rather than take the shortcut path


00:20:49.640 --> 00:20:51.000
to get to the end of the paper,


00:20:51.000 --> 00:20:53.080
I'm gonna improve the ecosystem


00:20:53.080 --> 00:20:55.960
so that later on I can reuse this improvement,


00:20:55.960 --> 00:20:59.920
but also Ryan and others in the community can reuse it.


00:20:59.920 --> 00:21:01.400
And that's a fundamentally different way


00:21:01.400 --> 00:21:03.920
thinking about the tools you're using.


00:21:03.920 --> 00:21:05.240
- That's interesting, it sure is.


00:21:05.240 --> 00:21:08.540
I've only spent a couple of years in that space,


00:21:08.540 --> 00:21:11.680
but my experience was so much of the code,


00:21:11.680 --> 00:21:14.080
at least traditionally, had been written


00:21:14.080 --> 00:21:16.680
just to solve a very focused problem


00:21:16.680 --> 00:21:18.840
and not in a way that could be


00:21:18.840 --> 00:21:21.280
adapted to future problems, right?


00:21:21.280 --> 00:21:23.280
It'd be like, well, we're changing the algorithm,


00:21:23.280 --> 00:21:24.680
or it's slightly different data,


00:21:24.680 --> 00:21:26.120
so we'll make a copy of this script,


00:21:26.120 --> 00:21:27.120
and we'll copy it over there,


00:21:27.120 --> 00:21:28.080
and we'll just like, you know,


00:21:28.080 --> 00:21:29.920
maybe there's not a single function in the whole thing,


00:21:29.920 --> 00:21:31.800
It's just top to bottom.


00:21:31.800 --> 00:21:35.980
And I suspect adopting some of these techniques


00:21:35.980 --> 00:21:39.560
to sort of produce more of a library out of it,


00:21:39.560 --> 00:21:42.000
even if you put it on GitHub and nobody comes,


00:21:42.000 --> 00:21:44.220
it still would benefit you and your research


00:21:44.220 --> 00:21:45.600
over time, I would imagine.


00:21:45.600 --> 00:21:50.180
- And I would say that is a big part of Python


00:21:50.180 --> 00:21:54.880
and why Python is a good tool for science


00:21:54.880 --> 00:21:59.880
because it is easy to build higher level abstractions.


00:21:59.880 --> 00:22:03.320
coming from the MATLAB world, you basically got MATLAB and its toolboxes,


00:22:03.320 --> 00:22:04.920
and then you got your scripts.


00:22:04.920 --> 00:22:08.920
And there's this hard divide between the platform and the tool,


00:22:08.920 --> 00:22:10.760
and your own work.


00:22:10.760 --> 00:22:14.920
And so you're used to thinking,


00:22:14.920 --> 00:22:18.040
"Well, these are the primitives provided by the tool,


00:22:18.040 --> 00:22:21.480
and here's what I have to do."


00:22:21.480 --> 00:22:26.280
But Python allows you to build very flexibly,


00:22:26.280 --> 00:22:28.760
and has this great ecosystem, right?


00:22:28.760 --> 00:22:32.000
And so I mean, I think this segues naturally into X-Ray.


00:22:32.000 --> 00:22:39.440
Like many of us in, say, in 2014 had our own sort of private version of a code


00:22:39.440 --> 00:22:45.320
that did what X-Ray did, thinking like that's code that needs to live in user space.


00:22:45.320 --> 00:22:48.920
That's not a package provided by the ecosystem.


00:22:48.920 --> 00:22:53.440
But then once sort of X-Ray started to catch on and we realized how powerful and how cool it was


00:22:53.440 --> 00:22:56.680
and how well it was, like what a solid foundation it had,


00:22:56.680 --> 00:23:01.880
many of us immediately stopped working on our own sort of private X-ray like thing and started


00:23:01.880 --> 00:23:07.240
contributing to X-ray. And we've seen over, say, the past, you know, five or six years, this really


00:23:07.240 --> 00:23:13.720
steady growth in like the capabilities, both in terms of features and robustness like of X-ray,


00:23:13.720 --> 00:23:19.720
that we never would have done if there hadn't been that coalescence around, like, okay, we're all


00:23:19.720 --> 00:23:26.440
going to work together on this. Yeah. And then you have these knock on effects, right? There's now


00:23:26.440 --> 00:23:30.080
other libraries and other systems that use X-Ray.


00:23:30.080 --> 00:23:31.520
And so if you're programming against it,


00:23:31.520 --> 00:23:33.280
it's super easy to plug into it,


00:23:33.280 --> 00:23:36.720
kind of like what Pandas and Dask are doing.


00:23:36.720 --> 00:23:38.060
Like if you program against Pandas,


00:23:38.060 --> 00:23:40.640
you kind of automatically get like the scale up version


00:23:40.640 --> 00:23:43.760
because Dask is just Pandas, but more, right?


00:23:43.760 --> 00:23:47.240
- And you don't have to write code to like read CSVs.


00:23:47.240 --> 00:23:48.200
- Yes, exactly.


00:23:48.200 --> 00:23:52.320
So I gave the elevator pitch for X-Ray,


00:23:52.320 --> 00:23:54.400
but let's go ahead and dive into that.


00:23:54.400 --> 00:23:58.840
And maybe give us the story for Pangeo


00:23:58.840 --> 00:24:02.240
where X-ray is one of the sort of umbrella,


00:24:02.240 --> 00:24:03.800
is covered under that umbrella.


00:24:03.800 --> 00:24:06.920
- Yeah, so, yeah, I'll start,


00:24:06.920 --> 00:24:09.720
but I think, you know, just to take maybe a slight step back


00:24:09.720 --> 00:24:13.200
and say what X-ray is one more time, I think.


00:24:13.200 --> 00:24:15.340
So X-ray is a package, a Python package


00:24:15.340 --> 00:24:17.920
for working with multidimensional labeled arrays


00:24:17.920 --> 00:24:22.000
and datasets, and it integrates with NumPy and Pandas,


00:24:22.000 --> 00:24:23.400
and in many ways you can think of it


00:24:23.400 --> 00:24:25.200
is a multi-dimensional pandas.


00:24:25.200 --> 00:24:26.040
- Yeah.


00:24:26.040 --> 00:24:29.320
- And so it's used really widely


00:24:29.320 --> 00:24:31.840
in the climate science community and the geosciences,


00:24:31.840 --> 00:24:35.920
but it's also used in fields outside of the geosciences.


00:24:35.920 --> 00:24:37.120
- Right.


00:24:37.120 --> 00:24:39.040
Could be finance or all sorts of things, right?


00:24:39.040 --> 00:24:42.040
- Yeah, so finance and biomedical


00:24:42.040 --> 00:24:44.760
and bioimaging, et cetera.


00:24:44.760 --> 00:24:45.600
So-


00:24:45.600 --> 00:24:47.240
- Give us a sense of like the data that you might load up


00:24:47.240 --> 00:24:51.080
off of some oceanography studies.


00:24:51.080 --> 00:24:54.080
Oh yeah, Ryan, go ahead and take the oceanography example.


00:24:54.080 --> 00:24:57.960
- Like something I think that like our go-to data set


00:24:57.960 --> 00:25:00.480
for oceanography is like ocean sea surface temperatures.


00:25:00.480 --> 00:25:03.360
Satellites observe the ocean from space,


00:25:03.360 --> 00:25:06.040
infrared or microwave observations


00:25:06.040 --> 00:25:09.220
can tell how warm the water is.


00:25:09.220 --> 00:25:11.200
That gets processed by NASA.


00:25:11.200 --> 00:25:15.020
They distribute essentially a bunch of net CDF files


00:25:15.020 --> 00:25:19.760
that are up on like a, basically an HTTP or FTP server,


00:25:19.760 --> 00:25:24.760
One file per day for the past 30 years,


00:25:24.760 --> 00:25:28.360
quarter-degree resolution, each file is a couple of 10,


00:25:28.360 --> 00:25:31.400
10, 20 megabytes or something like that.


00:25:31.400 --> 00:25:35.400
And we want to do an analysis on that data.


00:25:35.400 --> 00:25:39.760
And so X-Ray can open that individual file,


00:25:39.760 --> 00:25:42.440
but it can also open that collection of thousands of files


00:25:42.440 --> 00:25:44.320
as one coherent dataset object.


00:25:44.320 --> 00:25:47.280
- Interesting, so do you give it something like a directory


00:25:47.280 --> 00:25:51.540
and a file pattern and it just somehow does a sort


00:25:51.540 --> 00:25:52.660
and then loads them up together?


00:25:52.660 --> 00:25:57.140
- Yep, it can do globbing, you can pass it a list.


00:25:57.140 --> 00:26:00.180
And actually that is one of the killer features of X-Ray


00:26:00.180 --> 00:26:01.940
that I think brought a lot of people into it.


00:26:01.940 --> 00:26:06.940
'Cause we were all kind of used to writing code around files


00:26:06.940 --> 00:26:08.360
like, okay, I've got to do this analysis.


00:26:08.360 --> 00:26:12.660
Here's like a hundred files for each file


00:26:12.660 --> 00:26:14.860
in my list of files, do this, right?


00:26:14.860 --> 00:26:17.540
and instead the workflow changes with X-Ray.


00:26:17.540 --> 00:26:20.140
It's like, okay, open multi-file data set,


00:26:20.140 --> 00:26:23.980
mean, done, right?


00:26:23.980 --> 00:26:28.220
Like, and so it's just like this cognitive load


00:26:28.220 --> 00:26:29.700
that's lifted.


00:26:29.700 --> 00:26:30.540
- That's cool.


00:26:30.540 --> 00:26:33.920
Yeah, there's, especially in the data science space,


00:26:33.920 --> 00:26:35.500
I see a lot of these things,


00:26:35.500 --> 00:26:39.300
and it's almost about learning about the packages


00:26:39.300 --> 00:26:41.140
and the way that you can use them.


00:26:41.140 --> 00:26:43.360
You know, like an example that really quickly comes to mind


00:26:43.360 --> 00:26:46.720
for me is like, if I wanted to get a table


00:26:46.720 --> 00:26:49.240
out of an HTML page, out of a website,


00:26:49.240 --> 00:26:51.640
and then pull that in and like process it,


00:26:51.640 --> 00:26:55.160
I could go get the page with requests.


00:26:55.160 --> 00:26:57.840
I could do some beautiful soup thing to find the table.


00:26:57.840 --> 00:26:59.500
And then I could, I don't know,


00:26:59.500 --> 00:27:00.760
try to parse it or something,


00:27:00.760 --> 00:27:01.800
and then convert the elements


00:27:01.800 --> 00:27:03.400
if they were really supposed to be numbers,


00:27:03.400 --> 00:27:04.960
you gotta parse them as numbers,


00:27:04.960 --> 00:27:07.840
and then get that into some data structure.


00:27:07.840 --> 00:27:10.280
Or you go to Pandas and you say,


00:27:10.280 --> 00:27:13.640
read HTML tables bracket two or something like that.


00:27:13.640 --> 00:27:17.080
Like those kinds of things seem to appear so much


00:27:17.080 --> 00:27:18.340
in these data science libraries.


00:27:18.340 --> 00:27:21.120
Like, oh, you could do this big long computer sciencey thing.


00:27:21.120 --> 00:27:22.440
You could call this function over here


00:27:22.440 --> 00:27:23.520
and you got the same outcome.


00:27:23.520 --> 00:27:27.500
And it's really about knowing about that those exist, right?


00:27:27.500 --> 00:27:30.260
- Yeah, totally.


00:27:30.260 --> 00:27:35.160
So, okay, to go back to your original question,


00:27:35.160 --> 00:27:36.280
I mean, we can come back to X,


00:27:36.280 --> 00:27:37.600
I think we've spent a long time on X-ray,


00:27:37.600 --> 00:27:39.280
but I wanted to make the connection


00:27:39.280 --> 00:27:41.240
since you have the Pangeo website up on the screen.


00:27:41.240 --> 00:27:42.080
- Yeah, yeah.


00:27:42.080 --> 00:27:45.120
- After a couple of years of working on X-ray,


00:27:45.120 --> 00:27:46.760
a handful of us were starting to think,


00:27:46.760 --> 00:27:48.480
okay, we're onto something here.


00:27:48.480 --> 00:27:51.800
This is really the beginnings of


00:27:51.800 --> 00:27:55.920
kind of a platform for doing research.


00:27:55.920 --> 00:28:00.920
So we all got together at Columbia University.


00:28:00.920 --> 00:28:04.600
Ryan hosted a workshop in late 2016.


00:28:04.600 --> 00:28:08.360
I don't even remember what the name of the workshop was,


00:28:08.360 --> 00:28:11.800
PyAOS, Atmosphere Ocean Sciences, or something like that.


00:28:11.800 --> 00:28:14.800
It was a name that got dropped pretty quickly.


00:28:14.800 --> 00:28:16.700
But the idea was that we were,


00:28:16.700 --> 00:28:21.240
it was probably 20 of us that worked on X-ray and Dask,


00:28:21.240 --> 00:28:24.560
mostly, and it was kind of a mix of software developers


00:28:24.560 --> 00:28:25.660
and scientists.


00:28:25.660 --> 00:28:28.540
We got together and just kind of shared out the use cases


00:28:28.540 --> 00:28:30.920
that we were wrestling with and the problems.


00:28:30.920 --> 00:28:34.920
And out of that grew the Pangea Project and a few ideas.


00:28:34.920 --> 00:28:37.480
So the mission that you read on the website today


00:28:37.480 --> 00:28:41.640
is what we wrote that weekend, which is to try to tackle


00:28:41.640 --> 00:28:45.840
a few key problems that we're facing in our community,


00:28:45.840 --> 00:28:49.120
mostly big data, reproducibility,


00:28:49.120 --> 00:28:53.800
and really aiming at supporting a software ecosystem


00:28:53.800 --> 00:28:55.760
that connected all those dots.


00:28:55.760 --> 00:28:58.760
And since then, the Pangea project has grown


00:28:58.760 --> 00:29:01.200
into a wider community project


00:29:01.200 --> 00:29:04.200
that has a lot of software packages involved,


00:29:04.200 --> 00:29:05.640
not just X-Ray and Dask.


00:29:05.640 --> 00:29:10.640
So that's the origin story.


00:29:10.640 --> 00:29:14.640
It really started with X-Ray as the beginnings.


00:29:14.640 --> 00:29:15.640
Okay, interesting.


00:29:15.640 --> 00:29:17.640
And then from there it became a bunch of other things.


00:29:17.640 --> 00:29:18.640
Yeah, very cool.


00:29:18.640 --> 00:29:21.640
Maybe we could talk a little bit about the other packages.


00:29:21.640 --> 00:29:27.640
So we've got X-Ray and then there's a list of packages on the website.


00:29:27.640 --> 00:29:29.640
Iris, I know you all don't do too much with Iris,


00:29:29.640 --> 00:29:31.640
but maybe just tell us really quick what that is.


00:29:31.640 --> 00:29:35.760
- Yeah, Iris is in, it sits at the same level


00:29:35.760 --> 00:29:36.760
of the stack as X-Ray.


00:29:36.760 --> 00:29:40.660
So you're probably using either X-Ray or Iris.


00:29:40.660 --> 00:29:42.720
And Iris is, I would say,


00:29:42.720 --> 00:29:45.560
like it's maybe a little bit more opinionated than X-Ray


00:29:45.560 --> 00:29:50.560
in the sense that it's scoped to like geo data or like data,


00:29:50.560 --> 00:29:55.140
you know, or that has things built into it


00:29:55.140 --> 00:29:59.280
that are like more specific to that domain.


00:29:59.280 --> 00:30:01.360
- Like some of the specific file formats,


00:30:01.360 --> 00:30:04.320
which I'm not familiar with, but like grib and--


00:30:04.320 --> 00:30:06.960
No, actually, X-Ray gets all of those file formats.


00:30:06.960 --> 00:30:08.560
-Oh, okay. -It's more--


00:30:08.560 --> 00:30:11.700
I think it's more about the API,


00:30:11.700 --> 00:30:16.000
like an understanding that what latitude and longitude actually mean


00:30:16.000 --> 00:30:20.000
and supporting things like re-gridding directly


00:30:20.000 --> 00:30:22.780
rather than, say, through third-party packages


00:30:22.780 --> 00:30:24.780
like we would use with X-Ray.


00:30:24.780 --> 00:30:26.780
It's a great project,


00:30:26.780 --> 00:30:30.080
and it is in many ways very complementary to X-Ray


00:30:30.080 --> 00:30:32.000
and highly interoperable as well.


00:30:32.000 --> 00:30:35.200
You can like X-ray to Iris dataset,


00:30:35.200 --> 00:30:37.920
you know, Iris dataset to X-ray.


00:30:37.920 --> 00:30:42.420
You can think of them all as wrappers


00:30:42.420 --> 00:30:46.000
of higher level data structures around arrays, right?


00:30:46.000 --> 00:30:48.980
So many of us have probably coded, written,


00:30:48.980 --> 00:30:50.580
if you work with NumPy at any level,


00:30:50.580 --> 00:30:55.240
you probably had a dictionary with NumPy arrays in it,


00:30:55.240 --> 00:30:59.200
like multiple different arrays you want to keep together.


00:30:59.200 --> 00:31:01.720
And at that point I would say like just use X-ray


00:31:01.720 --> 00:31:04.320
whenever you're starting to program in that pattern.


00:31:04.320 --> 00:31:08.200
- Yeah, because that's basically what X-ray is, right?


00:31:08.200 --> 00:31:09.840
As how do you label it?


00:31:09.840 --> 00:31:11.120
That's the keys.


00:31:11.120 --> 00:31:14.980
And then multidimensional is multiple arrays, right?


00:31:14.980 --> 00:31:17.640
- Yes, and then understanding relationships between these


00:31:17.640 --> 00:31:20.140
and then metadata, another huge part of this, right?


00:31:20.140 --> 00:31:22.200
Like, so X-ray, both X-ray and Iris


00:31:22.200 --> 00:31:24.940
and anything in this space is gonna really understand


00:31:24.940 --> 00:31:26.520
metadata that comes with those things.


00:31:26.520 --> 00:31:29.600
So things like units or conventions


00:31:29.600 --> 00:31:32.920
that tell you how the variables are related to each other.


00:31:32.920 --> 00:31:36.000
And then it can do things with that metadata computationally,


00:31:36.000 --> 00:31:40.240
not just like drag it around for posterity,


00:31:40.240 --> 00:31:43.760
but actually leverage it to make certain syntax


00:31:43.760 --> 00:31:45.480
or certain computation.


00:31:45.480 --> 00:31:48.600
- You filter by all the ones that are tagged


00:31:48.600 --> 00:31:51.120
by state or whatever.


00:31:51.120 --> 00:31:53.080
Interesting. - Yep.


00:31:53.080 --> 00:31:57.840
- Okay, so then the next one in the overall banner


00:31:57.840 --> 00:31:59.380
of Pangeo is Dask.


00:31:59.380 --> 00:32:01.980
I've had Matthew Rocklin on the show before


00:32:01.980 --> 00:32:03.920
to talk about Dask, but it's been a while.


00:32:03.920 --> 00:32:06.480
So maybe tell folks about Dask.


00:32:06.480 --> 00:32:12.040
- Yeah, so Dask is a library for doing parallel computing


00:32:12.040 --> 00:32:16.260
in Python, and it has a bunch of different containers.


00:32:16.260 --> 00:32:19.100
And so there's Dask array, which is what X-ray uses,


00:32:19.100 --> 00:32:20.920
but there's also a Dask data frame,


00:32:20.920 --> 00:32:25.220
which does kind of parallel chunked operations


00:32:25.220 --> 00:32:26.900
on pandas data frames.


00:32:26.900 --> 00:32:29.840
And then there's the like catch all the Dask bag,


00:32:29.840 --> 00:32:33.340
which does graph style parallel computing.


00:32:33.340 --> 00:32:38.340
So where this comes in for X-ray is that,


00:32:38.340 --> 00:32:40.360
and actually for Iris as well,


00:32:40.360 --> 00:32:41.700
since we were just talking about Iris,


00:32:41.700 --> 00:32:46.700
but the arrays in an X-ray dataset can be backed


00:32:46.700 --> 00:32:49.620
by a Dask array instead of a NumPy array.


00:32:49.620 --> 00:32:51.340
And by just kind of swapping that out,


00:32:51.340 --> 00:32:53.520
it's almost a behind the scenes swap out.


00:32:53.520 --> 00:32:56.760
You do a dot chunk on your X-ray dataset.


00:32:56.760 --> 00:33:00.440
And then your operations are gonna be handled by Dask,


00:33:00.440 --> 00:33:02.680
which means they're gonna be streamed


00:33:02.680 --> 00:33:05.040
through the Dask scheduler.


00:33:05.040 --> 00:33:08.280
You'll be able to scale out to a cluster of workers


00:33:08.280 --> 00:33:11.840
and do instead of, you know, say gigabyte style operations,


00:33:11.840 --> 00:33:14.280
you can do terabyte scale


00:33:14.280 --> 00:33:18.880
or even petabyte scales at some day data analysis.


00:33:18.880 --> 00:33:21.240
So Dask is the thing that gives X-Ray


00:33:21.240 --> 00:33:23.440
its horizontal scalability.


00:33:23.440 --> 00:33:24.760
- Yeah, very cool.


00:33:24.760 --> 00:33:26.580
So scaling across machines.


00:33:26.580 --> 00:33:29.720
Now, when I learned about Dask,


00:33:29.720 --> 00:33:34.720
I saw it as, it's like the local pandas


00:33:34.720 --> 00:33:38.680
or the other types of things that models,


00:33:38.680 --> 00:33:41.040
but you set up a cluster and it runs there.


00:33:41.040 --> 00:33:42.680
And then when I spoke to Matthew about it,


00:33:42.680 --> 00:33:45.800
I realized, he pointed out that it's useful


00:33:45.800 --> 00:33:48.980
even on a single machine some of the times, right?


00:33:48.980 --> 00:33:53.340
If you've got a ton of data, but not enough RAM to hold it,


00:33:53.340 --> 00:33:57.300
or even have like my pretty simple computer here


00:33:57.300 --> 00:33:59.600
has eight cores, if I run something on Pandas,


00:33:59.600 --> 00:34:02.500
I get one core worth of processing power, right?


00:34:02.500 --> 00:34:04.340
So maybe, Joey, you're shaking your head,


00:34:04.340 --> 00:34:06.720
like tell people about like that use case.


00:34:06.720 --> 00:34:09.980
- Yeah, so Dask has a bunch of schedulers


00:34:09.980 --> 00:34:11.660
and some of those are local schedulers


00:34:11.660 --> 00:34:12.880
that run on a single machine


00:34:12.880 --> 00:34:15.740
and they can either use Python's multi-processing module


00:34:15.740 --> 00:34:19.540
or threading multiple threads to do computation.


00:34:19.540 --> 00:34:22.140
It also has distributed schedulers


00:34:22.140 --> 00:34:25.500
that might live on Kubernetes or on an HPC machine.


00:34:25.500 --> 00:34:28.740
There's now companies like that,


00:34:28.740 --> 00:34:30.980
Matt Rockland has gone on to start Coiled,


00:34:30.980 --> 00:34:34.940
which has managed Dask clusters for you.


00:34:34.940 --> 00:34:37.400
But the idea is that like at a small scale,


00:34:37.400 --> 00:34:39.360
when you're using the threaded scheduler,


00:34:39.360 --> 00:34:41.080
it's going to stream computation.


00:34:41.080 --> 00:34:45.100
So when you say taking the average of a terabyte size array,


00:34:45.100 --> 00:34:47.040
it's going to use its chunks


00:34:47.040 --> 00:34:48.860
and process those chunks one at a time


00:34:48.860 --> 00:34:51.460
and then aggregate those processed chunks


00:34:51.460 --> 00:34:53.180
to the final result.


00:34:53.180 --> 00:34:56.420
- Yeah, a lot of times, if it's the simple path


00:34:56.420 --> 00:34:59.080
of you go find some tutorial or example code


00:34:59.080 --> 00:35:00.380
or something on Stack Overflow,


00:35:00.380 --> 00:35:02.820
it's just like, well, first you just load this up,


00:35:02.820 --> 00:35:05.980
you read the CSV or you load the JSON file


00:35:05.980 --> 00:35:06.980
and then you go over it like this,


00:35:06.980 --> 00:35:09.620
and you're like, but I have a terabyte of data


00:35:09.620 --> 00:35:11.940
and 16 gigs of RAM,


00:35:11.940 --> 00:35:16.400
and so you need this iterative streaming style to get there.


00:35:16.400 --> 00:35:21.280
The brilliance of Dask, the game-changing flavor of Dask


00:35:21.280 --> 00:35:25.820
is that for many cases, the user doesn't really have to rewrite


00:35:25.820 --> 00:35:28.080
their code at all to scale out.


00:35:28.080 --> 00:35:32.280
Right? So typically with X-Ray, when we teach it


00:35:32.280 --> 00:35:34.820
and we really want to get people the sense of the power,


00:35:34.820 --> 00:35:38.160
we start by downloading a 10-megabyte file


00:35:38.160 --> 00:35:41.120
and opening it with X-Ray and doing some analysis.


00:35:41.120 --> 00:35:46.000
And then they learn the API, and they use it.


00:35:46.000 --> 00:35:50.560
And then we point it, then we point people to a massive


00:35:50.560 --> 00:35:54.720
100-gigabyte dataset in the cloud and a Dask cluster,


00:35:54.720 --> 00:35:56.720
and we say, "Write the same code."


00:35:56.720 --> 00:35:58.960
And it just works, and it's pretty fast,


00:35:58.960 --> 00:36:04.000
and it is able to scale out without much, really,


00:36:04.000 --> 00:36:08.000
any expertise on the user's side about distributed computing.


00:36:08.000 --> 00:36:10.400
So I love that feature.


00:36:10.400 --> 00:36:14.280
On the other hand, I've also come around to the feeling that it can sometimes,


00:36:14.280 --> 00:36:16.740
you know, it's a double-edged sword,


00:36:16.740 --> 00:36:19.240
because some things actually just fail


00:36:19.240 --> 00:36:22.380
if you don't think hard about the parallelization strategy.


00:36:22.380 --> 00:36:23.680
It's not magic.


00:36:23.680 --> 00:36:26.280
It depends on the operation that you want to do.


00:36:26.280 --> 00:36:30.620
And so the flip side of that ease of parallelization


00:36:30.620 --> 00:36:33.060
is that sometimes users will think it is--


00:36:33.060 --> 00:36:37.600
Dask is smarter or more capability than it really could ever be,


00:36:37.600 --> 00:36:42.600
and expect it to just automatically parallelize anything,


00:36:42.600 --> 00:36:47.800
even say, just IO patterns that are just not parallelizable,


00:36:47.800 --> 00:36:49.080
not scalable, right?


00:36:49.080 --> 00:36:51.880
Or other operations that are just not,


00:36:51.880 --> 00:36:54.280
can't be accelerated.


00:36:54.280 --> 00:36:56.920
- Yeah, it seems like it just automatically fixes


00:36:56.920 --> 00:36:58.520
the problem, it just makes it faster


00:36:58.520 --> 00:37:00.200
with magic programming dust,


00:37:00.200 --> 00:37:01.640
and then like, obviously,


00:37:01.640 --> 00:37:04.000
some points that comes undone, right?


00:37:04.000 --> 00:37:04.840
- Totally.


00:37:04.840 --> 00:37:09.840
mentioned Coiled at the Rocklands company


00:37:09.840 --> 00:37:13.000
that he started with some other folks, I believe.


00:37:13.000 --> 00:37:15.840
And this is a really interesting story.


00:37:15.840 --> 00:37:20.840
Like we talked about how you've got your X-ray light code


00:37:20.840 --> 00:37:25.240
or you got your pandas light code


00:37:25.240 --> 00:37:26.520
that you just wrote for yourself.


00:37:26.520 --> 00:37:29.400
And then by sort of adopting one of these libraries


00:37:29.400 --> 00:37:32.520
and maybe even contributing it and like building it up


00:37:32.520 --> 00:37:34.520
you get these knock on effects, right?


00:37:34.520 --> 00:37:37.400
So I gave the pandas to Dask example.


00:37:37.400 --> 00:37:39.560
And like, here's the next step in that chain, right?


00:37:39.560 --> 00:37:42.980
Like now you have, oh, I can just spin up a cluster


00:37:42.980 --> 00:37:45.480
on the cloud automatically through coiled


00:37:45.480 --> 00:37:47.600
with like one or two lines of code


00:37:47.600 --> 00:37:51.160
because I built on Dask because I built on pandas.


00:37:51.160 --> 00:37:53.240
You know, like that chain just keeps going


00:37:53.240 --> 00:37:54.780
of like how it all sort of,


00:37:54.780 --> 00:37:57.760
the synergy between all of them.


00:37:57.760 --> 00:37:59.720
- Absolutely.


00:37:59.720 --> 00:38:03.800
And I mean, I would say like, it's not just like coincidental


00:38:03.800 --> 00:38:10.280
Matt Rocklin was at that Pangeo meeting at Columbia in 2016 or whatever.


00:38:10.280 --> 00:38:13.240
And actually, we've watched this evolution.


00:38:13.240 --> 00:38:16.080
So a big part of what we have been doing in Pangeo


00:38:16.080 --> 00:38:18.680
is experimenting with cloud computing.


00:38:18.680 --> 00:38:23.680
I think a little bit earlier and more in a different way


00:38:23.680 --> 00:38:27.040
than a lot of the other scientific community was.


00:38:27.040 --> 00:38:29.800
And we can thank Matt for that to some degree,


00:38:29.800 --> 00:38:33.280
because the story with Pangeo and cloud


00:38:33.280 --> 00:38:37.600
is that after that workshop, we wrote our first proposal to the NSF,


00:38:37.600 --> 00:38:42.160
and we got a grant to develop some of these stuff


00:38:42.160 --> 00:38:45.840
and develop Pangeo and support scientific use cases.


00:38:45.840 --> 00:38:50.160
And what we had put into that original grant


00:38:50.160 --> 00:38:52.760
were we had a bunch of servers that we wanted to buy


00:38:52.760 --> 00:38:55.240
to host data and run stuff, because that's what you do


00:38:55.240 --> 00:38:56.880
when you write a scientific grant, right?


00:38:56.880 --> 00:39:00.320
And NSF asked us to trim our budget,


00:39:01.120 --> 00:39:04.040
And we decided, OK, we'll cut out these servers,


00:39:04.040 --> 00:39:06.520
but why don't you give us some credits on the cloud?


00:39:06.520 --> 00:39:08.800
Because at the time, NSF was running this pilot program


00:39:08.800 --> 00:39:11.160
called Big Data, where they were granting--


00:39:11.160 --> 00:39:13.720
it was like a partnership with Google and Amazon and stuff.


00:39:13.720 --> 00:39:17.120
And so we got like $100,000 worth of Google Cloud credits.


00:39:17.120 --> 00:39:19.920
And we just started playing around


00:39:19.920 --> 00:39:23.960
to see how well we could make this stack work in the cloud.


00:39:23.960 --> 00:39:26.640
And Matt was instrumental, actually, at that time.


00:39:26.640 --> 00:39:28.440
He was really involved and was helping


00:39:28.440 --> 00:39:31.440
us figure out how to deploy stuff on the cloud.


00:39:31.440 --> 00:39:34.160
And we learned all about Kubernetes and object storage


00:39:34.160 --> 00:39:35.360
and all of this stuff.


00:39:35.360 --> 00:39:39.760
And it was incredibly fortunate for us to have that


00:39:39.760 --> 00:39:42.560
because I think we really figured out a lot of stuff


00:39:42.560 --> 00:39:46.080
early on about how scientific research


00:39:46.080 --> 00:39:47.500
can interact with cloud computing.


00:39:47.500 --> 00:39:51.320
And that's where a lot of our focus and energy is today.


00:39:51.320 --> 00:39:52.160
- That's cool.


00:39:52.160 --> 00:39:53.120
Yeah, there's a lot of interesting things


00:39:53.120 --> 00:39:55.340
about large data sets, right?


00:39:55.340 --> 00:39:57.800
You can put them, as you said, in object storage


00:39:57.800 --> 00:40:00.060
and then people can come into that cloud


00:40:00.060 --> 00:40:02.900
and like use the data without trying to download it


00:40:02.900 --> 00:40:05.120
or move it around or like some of these data sets


00:40:05.120 --> 00:40:06.740
are terabytes, right?


00:40:06.740 --> 00:40:09.420
What are you gonna do to get those shared, right?


00:40:09.420 --> 00:40:11.900
- Yeah, I know some of them are petabytes at this point.


00:40:11.900 --> 00:40:12.740
And--


00:40:12.740 --> 00:40:14.700
- That's terabytes you can do petabytes.


00:40:14.700 --> 00:40:16.580
That might be like a little bit beyond


00:40:16.580 --> 00:40:19.420
what your ISP is gonna let you do to download.


00:40:19.420 --> 00:40:20.260
- That's right, yeah.


00:40:20.260 --> 00:40:21.780
- Or you get a hard drive for it, right?


00:40:21.780 --> 00:40:22.900
Where are you gonna put it?


00:40:22.900 --> 00:40:24.460
- Yeah, exactly.


00:40:24.460 --> 00:40:25.460
Yeah, I think that's the big,


00:40:25.460 --> 00:40:28.460
The thing that our work on cloud computing


00:40:28.460 --> 00:40:31.460
really unlocked for us was this idea that we could federate access


00:40:31.460 --> 00:40:33.460
not only to compute, right?


00:40:33.460 --> 00:40:35.460
Everyone kind of knew, yeah, you can spin up a VM,


00:40:35.460 --> 00:40:41.460
but federating access to the data in a way that was


00:40:41.460 --> 00:40:45.460
infinitely scalable, both in terms of access,


00:40:45.460 --> 00:40:50.960
but also in storage, is a total game-changer.


00:40:50.960 --> 00:40:53.460
And so as we've gone down this rabbit hole,


00:40:53.460 --> 00:40:55.540
and we've gone fairly deep at this point,


00:40:55.540 --> 00:40:59.020
the idea of putting data in object store


00:40:59.020 --> 00:41:02.820
and letting anyone in the research community access that


00:41:02.820 --> 00:41:05.220
has kind of revolutionized the way we think


00:41:05.220 --> 00:41:07.740
about what scientific computing platforms


00:41:07.740 --> 00:41:09.260
should look like going forward.


00:41:09.260 --> 00:41:10.100
- Yeah, absolutely.


00:41:10.100 --> 00:41:12.160
It solves like half of the problem.


00:41:12.160 --> 00:41:13.800
One is the computational time and power,


00:41:13.800 --> 00:41:15.700
but the other is just the storage and the data


00:41:15.700 --> 00:41:18.020
and the memory and all those kinds of things, right?


00:41:18.020 --> 00:41:19.860
- Absolutely.


00:41:19.860 --> 00:41:23.420
And I think data providers are really reckoning now


00:41:23.420 --> 00:41:26.140
with what the cloud means, right?


00:41:26.140 --> 00:41:31.140
Because what we had seen in geosciences


00:41:31.140 --> 00:41:34.220
and climate sciences is,


00:41:34.220 --> 00:41:36.580
there were a lot of data portals out there.


00:41:36.580 --> 00:41:39.740
An agency or a group would decide,


00:41:39.740 --> 00:41:41.080
we have a dataset we wanna share,


00:41:41.080 --> 00:41:42.280
we have this data we wanna share,


00:41:42.280 --> 00:41:43.120
let's make a portal,


00:41:43.120 --> 00:41:46.500
which was almost always sort of a highly customized website


00:41:46.500 --> 00:41:47.660
with a browser,


00:41:47.660 --> 00:41:50.060
and maybe you had to click through to do some JavaScript


00:41:50.060 --> 00:41:51.140
and like do it,


00:41:51.140 --> 00:41:52.520
like you had to interact with the browser


00:41:52.520 --> 00:41:55.720
to get data files and then you would like get some data files.


00:41:55.720 --> 00:42:00.120
And, you know, it's like maybe it seemed like a good idea.


00:42:00.120 --> 00:42:01.960
There was reasons why they wanted to have a portal.


00:42:01.960 --> 00:42:06.000
But like from a user point of view, especially like an expert user point of view,


00:42:06.000 --> 00:42:08.720
they're just incredibly frustrating to interact with data that way.


00:42:08.720 --> 00:42:15.800
And so with with cloud object storage, you know, I linked in the chat this blog post I wrote about this,


00:42:15.800 --> 00:42:22.320
my fantasy about how like how to it's this facetious post about how to create a big data portal.


00:42:22.320 --> 00:42:26.620
And you can see there's like one step.


00:42:26.620 --> 00:42:29.360
It's like upload your data to S3.


00:42:29.360 --> 00:42:30.200
(laughing)


00:42:30.200 --> 00:42:31.020
Right?


00:42:31.020 --> 00:42:31.860
- Exactly.


00:42:31.860 --> 00:42:34.460
- And you know, I think it's provocative,


00:42:34.460 --> 00:42:35.580
but like I think it,


00:42:35.580 --> 00:42:40.440
the fact is there's a lot of vested energy expertise


00:42:40.440 --> 00:42:41.620
within the scientific community


00:42:41.620 --> 00:42:42.840
about how to build and maintain


00:42:42.840 --> 00:42:46.700
these really bespoke data access solutions


00:42:46.700 --> 00:42:50.160
when I think really we should be moving to a very,


00:42:50.160 --> 00:42:52.720
we should just really be using object storage


00:42:52.720 --> 00:42:55.680
and the scalability of cloud style computing


00:42:55.680 --> 00:42:57.160
to distribute scientific data.


00:42:57.160 --> 00:43:01.160
It doesn't mean we need to just like go all in on AWS,


00:43:01.160 --> 00:43:03.800
although actually that's exactly what NASA has done.


00:43:03.800 --> 00:43:07.920
But there's a lot of cloud storage like things


00:43:07.920 --> 00:43:11.080
that provide a really scalable base layer of storage


00:43:11.080 --> 00:43:13.040
for internet enabled computing.


00:43:13.040 --> 00:43:18.600
There's like Wasabi, alternative to Amazon.


00:43:18.600 --> 00:43:21.160
there's like CloudFlare now is launching


00:43:21.160 --> 00:43:24.440
a data storage service, which I'm super excited about.


00:43:24.440 --> 00:43:26.840
- Yeah, that's put it on the edge, interesting.


00:43:26.840 --> 00:43:30.780
Yeah, and you might end up with a copy of that data.


00:43:30.780 --> 00:43:33.640
Maybe you have a copy in AWS, a copy in Azure,


00:43:33.640 --> 00:43:37.280
maybe even like Linode, DigitalOcean, places like that.


00:43:37.280 --> 00:43:40.120
Right, but that's only four or five copies,


00:43:40.120 --> 00:43:42.840
not every researcher trying to figure out


00:43:42.840 --> 00:43:45.400
how they're gonna deal with it, right?


00:43:45.400 --> 00:43:53.080
Exactly, or you outsource that sort of mirroring to a service that knows how to scale that sort of thing.


00:43:53.080 --> 00:44:01.800
Another really interesting player in this space is IPFS and the distributed web.


00:44:01.800 --> 00:44:09.560
Where we're at now is like people are very excited about in science or like about S3 and cloud computing,


00:44:09.560 --> 00:44:14.360
but on the other hand, the scientific community is wary of being too dependent on the big tech giants,


00:44:14.360 --> 00:44:16.100
and it always has sort of a do-it-yourself


00:44:16.100 --> 00:44:18.620
sort of distributed approach to infrastructure.


00:44:18.620 --> 00:44:23.620
So I'm really excited about IPFS interplanetary file system,


00:44:23.620 --> 00:44:28.660
which is a distributed yet highly performant way


00:44:28.660 --> 00:44:34.120
of sharing petabyte scale data on the internet.


00:44:34.120 --> 00:44:36.820
- Now that sounds really interesting.


00:44:36.820 --> 00:44:39.540
Let's see, really quick, James out in the audience


00:44:39.540 --> 00:44:42.420
is asking, are there any Pangeo specific resources


00:44:42.420 --> 00:44:46.260
the help with that transition, that jump from the workstation to cloud computing?


00:44:46.260 --> 00:44:50.980
Yeah, I think this is a good opportunity to show off


00:44:50.980 --> 00:44:56.300
and talk about the list of tutorials


00:44:56.300 --> 00:44:58.540
and examples that we have.


00:44:58.540 --> 00:45:00.740
So I think, you know,


00:45:00.740 --> 00:45:03.300
Pangeo has a collection of Jupyter notebooks


00:45:03.300 --> 00:45:06.220
that show how to use...


00:45:06.220 --> 00:45:09.780
Yeah, so this is gallery.pangeo.io,


00:45:09.780 --> 00:45:13.320
And there's a list of Jupyter Notebooks here


00:45:13.320 --> 00:45:16.520
that walk through real-world examples


00:45:16.520 --> 00:45:21.520
of working with large geoscientific data in the cloud.


00:45:21.520 --> 00:45:25.080
And so I'd encourage people that are listening


00:45:25.080 --> 00:45:27.160
to pull this site up and take a look.


00:45:27.160 --> 00:45:29.120
- And I'll put a link in the show notes


00:45:29.120 --> 00:45:29.960
so people can find it as well.


00:45:29.960 --> 00:45:30.800
- Yeah, perfect.


00:45:30.800 --> 00:45:31.620
- Yeah.


00:45:31.620 --> 00:45:33.100
- Yeah, so I think this is a good example


00:45:33.100 --> 00:45:37.900
of one of the best resources we can point folks to.


00:45:37.900 --> 00:45:38.740
- Okay.


00:45:38.740 --> 00:45:40.580
I mean, to get a little bit more specific,


00:45:40.580 --> 00:45:43.080
the idea is actually you don't have to change very much at all


00:45:43.080 --> 00:45:45.380
about your workflow when moving to the cloud, right?


00:45:45.380 --> 00:45:47.480
That's what we're aiming for with Pangea.


00:45:47.480 --> 00:45:50.380
And a key part of this, and sort of another pillar of Pangea


00:45:50.380 --> 00:45:52.760
that we haven't discussed yet is Jupyter, right?


00:45:52.760 --> 00:45:54.620
So Jupyter is a key part of our effort.


00:45:54.620 --> 00:45:58.200
We work very closely with the Jupyter developers


00:45:58.200 --> 00:46:01.200
and also the team at 2i2c,


00:46:01.200 --> 00:46:03.000
who I know you've talked to recently, right?


00:46:03.000 --> 00:46:12.040
And Jupyter has been, I think, an amazing sort of Trojan horse for cloud computing, because


00:46:12.040 --> 00:46:17.880
the way when you use Jupyter for the first time, it launches up a notebook in your browser.


00:46:17.880 --> 00:46:23.000
Honestly, the hardest way to use Jupyter is to try to use it locally, because you got to install


00:46:23.000 --> 00:46:27.160
it and configure it and run it. The cloud story is just even easier.


00:46:27.160 --> 00:46:32.600
Exactly. So we now have the scientific community who like scientists, a huge number of scientists


00:46:32.600 --> 00:46:36.600
in many different languages are all just used to the idea that we're going to do our science in


00:46:36.600 --> 00:46:43.160
our browser through this type of IDE, essentially. And JupyterLab especially has so many more


00:46:43.160 --> 00:46:49.400
features than classic notebook that make for a really rich, interactive scientific computing


00:46:49.400 --> 00:46:55.480
environment. So then moving the work to the cloud is trivial, I mean, for the user. And so in Pangeo,


00:46:55.480 --> 00:47:01.880
we operate some cloud-based JupyterHubs, and also we have been operating in Binder. And those


00:47:01.880 --> 00:47:04.520
So those Jupyter hubs, basically you just log on,


00:47:04.520 --> 00:47:06.880
like, and anyone out there can actually sign up


00:47:06.880 --> 00:47:11.480
for the Pangeo hubs or apply to get access to these hubs.


00:47:11.480 --> 00:47:14.560
And then you just have a notebook environment in the cloud.


00:47:14.560 --> 00:47:16.600
Of course, just having your notebook in the cloud


00:47:16.600 --> 00:47:20.000
is not that cool, but what we can augment it with


00:47:20.000 --> 00:47:22.120
are some capabilities to run Dask.


00:47:22.120 --> 00:47:24.200
So we use Dask gateway in those hubs


00:47:24.200 --> 00:47:26.400
as a Dask deployment solution, but, you know,


00:47:26.400 --> 00:47:29.960
Coiled is another example of a Dask deployment solution.


00:47:29.960 --> 00:47:32.640
And then the key, though, what is


00:47:32.640 --> 00:47:36.520
going to bring scientists to the cloud is that data.


00:47:36.520 --> 00:47:42.040
So that is what makes this appealing and game-changing.


00:47:42.040 --> 00:47:43.880
The fact that now you log into this hub--


00:47:43.880 --> 00:47:47.080
OK, you're in Google Cloud US Central 1.


00:47:47.080 --> 00:47:51.400
We got a petabyte of data from the World Climate Research


00:47:51.400 --> 00:47:54.760
Program coupled model intercomparison program


00:47:54.760 --> 00:47:57.840
project sitting there, organized, analysis-ready,


00:47:57.840 --> 00:47:59.680
that you can start doing science with.


00:47:59.680 --> 00:48:02.360
So when, before you know that,


00:48:02.360 --> 00:48:05.280
if a grad student say would decide,


00:48:05.280 --> 00:48:07.160
okay, I'm gonna work with these client models


00:48:07.160 --> 00:48:08.480
and do this research project,


00:48:08.480 --> 00:48:11.000
they would literally spend months downloading,


00:48:11.000 --> 00:48:12.880
organizing and sorting that data on a computer


00:48:12.880 --> 00:48:14.240
before they can get started.


00:48:14.240 --> 00:48:16.120
Now you can get started in five minutes


00:48:16.120 --> 00:48:17.360
and be processing data.


00:48:17.360 --> 00:48:20.360
And that's what gets me excited


00:48:20.360 --> 00:48:25.360
and motivates me to devote energy to this project.


00:48:25.360 --> 00:48:27.560
- Maybe that also involved writing a grant


00:48:27.560 --> 00:48:30.640
so that you could get enough compute to locally hold


00:48:30.640 --> 00:48:32.240
and work on that and you gotta wait,


00:48:32.240 --> 00:48:35.880
okay, I'm gonna order our Silicon Graphics or our Cray


00:48:35.880 --> 00:48:37.240
or whatever it is you're getting,


00:48:37.240 --> 00:48:38.960
whatever the super computers are these days


00:48:38.960 --> 00:48:41.360
and they'll wait for some big thing to show up


00:48:41.360 --> 00:48:46.360
or you fire up a notebook in AWS, take your pick.


00:48:46.360 --> 00:48:50.920
I suspect this is also democratized computing


00:48:50.920 --> 00:48:52.280
somewhat as well.


00:48:52.280 --> 00:48:56.200
You don't need as much compute to set up something like this


00:48:56.200 --> 00:48:58.660
and access that existing cloud database.


00:48:58.660 --> 00:49:03.320
- Yeah, I think that's true.


00:49:03.320 --> 00:49:06.320
And I think part of that is we've separated


00:49:06.320 --> 00:49:09.360
in the cloud model of separation of concerns,


00:49:09.360 --> 00:49:12.580
the storage is not necessarily directly attached to compute.


00:49:12.580 --> 00:49:14.200
Whereas like in a super computing center,


00:49:14.200 --> 00:49:17.000
it's all one warehouse, right?


00:49:17.000 --> 00:49:19.600
And so, yeah, like if you're doing a small problem,


00:49:19.600 --> 00:49:22.440
you get a small VM or you get a small cluster,


00:49:22.440 --> 00:49:23.400
a small DAS cluster.


00:49:23.400 --> 00:49:25.960
If you're doing a big problem, you scale out.


00:49:25.960 --> 00:49:29.400
and so you can sort your, or you can arrange


00:49:29.400 --> 00:49:32.160
your compute infrastructure appropriate


00:49:32.160 --> 00:49:33.800
to the problem you're working on.


00:49:33.800 --> 00:49:36.920
And the other thing is the way we're storing the data


00:49:36.920 --> 00:49:41.920
allows for partial queries of these large array.


00:49:41.920 --> 00:49:46.080
So the data that Ryan was talking about,


00:49:46.080 --> 00:49:49.080
the CMIP6 data, it's a petabyte in scale,


00:49:49.080 --> 00:49:50.680
but you don't have to open the whole thing


00:49:50.680 --> 00:49:52.200
and you don't have to load the whole thing.


00:49:52.200 --> 00:49:53.960
We're able to slice into that


00:49:53.960 --> 00:49:56.480
and grab out just the parts that are interesting


00:49:56.480 --> 00:49:57.520
for the research project.


00:49:57.520 --> 00:49:58.360
- Right, exactly.


00:49:58.360 --> 00:49:59.300
That's awesome.


00:49:59.300 --> 00:50:03.040
One thing I did want to ask you two about real quick


00:50:03.040 --> 00:50:04.840
before we're getting short on time here,


00:50:04.840 --> 00:50:08.200
but do projects like JupyterLite,


00:50:08.200 --> 00:50:11.240
which is Jupyter but running on WebAssembly in the browser


00:50:11.240 --> 00:50:14.840
or the Python stack a little bit running on the browser


00:50:14.840 --> 00:50:16.360
or PyIoDyed,


00:50:16.360 --> 00:50:21.160
do these projects offer any benefits to you all?


00:50:21.160 --> 00:50:22.000
Are you tracking them?


00:50:22.000 --> 00:50:22.840
Are you interested?


00:50:22.840 --> 00:50:29.840
Yeah, I think it's super cool, JupyterLight and Pyodide.


00:50:29.840 --> 00:50:35.840
I think it really lowers the bar to providing, just like getting something up and running.


00:50:35.840 --> 00:50:46.840
I would say that the motivations for getting into Pangeo, for starting Pangeo, a big part of it was big data.


00:50:46.840 --> 00:50:50.840
We have large data sets, right? And so we want to do data proximate computing.


00:50:50.840 --> 00:50:55.340
So by putting a hub in the cloud, we're putting our compute next to the data.


00:50:55.340 --> 00:50:57.340
Pydot actually takes it back to the laptop.


00:50:57.340 --> 00:51:01.340
Yeah, yeah. This doesn't solve the data problem. This kind of wrecks that.


00:51:01.340 --> 00:51:06.340
But it does give computational capabilities without.


00:51:06.340 --> 00:51:10.340
And if you couple that with something like Coiled or any Dask solution,


00:51:10.340 --> 00:51:16.340
where you can actually then call out to a data processing layer that is in the cloud,


00:51:16.340 --> 00:51:21.300
cloud, it's it will it would make the need for us to operate those Jupyter hubs potentially go away


00:51:21.300 --> 00:51:26.580
or reduce or go away. Oh, that's interesting. So you've you've got the Dask cluster or whatever


00:51:26.580 --> 00:51:32.900
next to the data in the cloud. And this is just like handling the results of all that. Okay,


00:51:32.900 --> 00:51:37.220
I hadn't thought about combining those in that way. Very cool. Well, if you want if you want


00:51:37.220 --> 00:51:40.820
to process like many terabytes of data, you're not going to do it in your browser. You're not


00:51:40.820 --> 00:51:42.100
you're not gonna need any laptops at all.


00:51:42.100 --> 00:51:44.180
You do need a big computer, right?


00:51:44.180 --> 00:51:47.740
- Yeah, but still, it certainly expands what's possible


00:51:47.740 --> 00:51:50.500
larger than maybe the first impressions.


00:51:50.500 --> 00:51:52.460
All right, guys.


00:51:52.460 --> 00:51:56.540
- Just a quick shout out.


00:51:56.540 --> 00:52:00.500
We recently added a JupyterLite example tutorial


00:52:00.500 --> 00:52:03.740
to the X-Ray homepage at xray.dev.


00:52:03.740 --> 00:52:06.380
So if folks wanna go try out X-Ray really quick


00:52:06.380 --> 00:52:10.380
without having to start up a JupyterLab server or something,


00:52:10.380 --> 00:52:12.180
it's there and you can run through.


00:52:12.180 --> 00:52:13.980
- Oh, that's fantastic.


00:52:13.980 --> 00:52:14.980
Yeah, we've got Binder,


00:52:14.980 --> 00:52:17.140
which sort of creates a cloud instance


00:52:17.140 --> 00:52:19.020
to run all these examples,


00:52:19.020 --> 00:52:21.060
but a lot of them could actually just run like this,


00:52:21.060 --> 00:52:22.140
which is great.


00:52:22.140 --> 00:52:22.980
Makes it a lot simpler.


00:52:22.980 --> 00:52:23.820
Yeah.


00:52:23.820 --> 00:52:24.780
All right.


00:52:24.780 --> 00:52:26.180
We could talk for much longer,


00:52:26.180 --> 00:52:30.300
but I also know that we don't have too much time left.


00:52:30.300 --> 00:52:32.220
So let me ask you both real quickly,


00:52:32.220 --> 00:52:34.100
the final two questions.


00:52:34.100 --> 00:52:36.180
Joe, you can go first.


00:52:36.180 --> 00:52:38.300
Can you write some code?


00:52:38.300 --> 00:52:40.700
Python code, what editor do you use?


00:52:40.700 --> 00:52:42.780
- VS Code.


00:52:42.780 --> 00:52:43.700
- VS Code, all right.


00:52:43.700 --> 00:52:45.240
- Or Vim if I can't.


00:52:45.240 --> 00:52:46.140
(laughing)


00:52:46.140 --> 00:52:47.260
- Okay.


00:52:47.260 --> 00:52:49.820
- I use Atom and I feel like I'm behind the times,


00:52:49.820 --> 00:52:51.220
but like that's what I use.


00:52:51.220 --> 00:52:53.460
- That's like OG VS Code.


00:52:53.460 --> 00:52:56.040
- It doesn't, it gets what I need to do done,


00:52:56.040 --> 00:52:57.660
but I feel like I'm missing out on things.


00:52:57.660 --> 00:52:59.640
So I probably need to upgrade.


00:52:59.640 --> 00:53:02.820
But I do feel like my development environment


00:53:02.820 --> 00:53:04.940
is increasingly owned by Microsoft.


00:53:04.940 --> 00:53:08.660
And so I have like some mild reluctance


00:53:08.660 --> 00:53:10.040
to switch to VS Code.


00:53:10.040 --> 00:53:11.180
- Sure, I hear you.


00:53:11.180 --> 00:53:12.020
Awesome.


00:53:12.020 --> 00:53:13.760
And then a notable PyPI package,


00:53:13.760 --> 00:53:15.380
some library you've come across lately


00:53:15.380 --> 00:53:16.820
that you thought was awesome.


00:53:16.820 --> 00:53:21.600
I mean, obviously shout out to Pangeo


00:53:21.600 --> 00:53:22.440
and all of its libraries.


00:53:22.440 --> 00:53:24.260
- But it's not a package.


00:53:24.260 --> 00:53:25.740
Like you can't check it out in Pangeo.


00:53:25.740 --> 00:53:26.580
- Yeah.


00:53:26.580 --> 00:53:31.260
- I'm gonna go with one of my favorites,


00:53:31.260 --> 00:53:32.900
which is not something I came across recently,


00:53:32.900 --> 00:53:33.740
but I think everybody should know about it.


00:53:33.740 --> 00:53:35.740
- I'm sure you know about it. - Yeah, that works as well, sure.


00:53:35.740 --> 00:53:39.860
- Is FSSpec, and it's a library for accessing data


00:53:39.860 --> 00:53:42.340
across a bunch of different file storage systems,


00:53:42.340 --> 00:53:45.680
and it is a game changer for working with remote data.


00:53:45.680 --> 00:53:47.020
Everyone should know about it.


00:53:47.020 --> 00:53:47.860
- Yeah, absolutely.


00:53:47.860 --> 00:53:49.340
That's a super interesting one.


00:53:49.340 --> 00:53:51.540
Basically, you can connect it


00:53:51.540 --> 00:53:54.660
to all these different backends and stuff, right?


00:53:54.660 --> 00:53:57.820
I don't remember where to find them, but yeah,


00:53:57.820 --> 00:54:01.060
you could connect S3 like it was a file


00:54:01.060 --> 00:54:02.520
and stuff like that, right?


00:54:02.520 --> 00:54:03.360
- Yep, exactly.


00:54:03.360 --> 00:54:05.400
- Fantastic, all right, Ryan, quick.


00:54:05.400 --> 00:54:08.040
- Well, mine is a shameless self-promotion,


00:54:08.040 --> 00:54:12.080
but it's for a new project we have called Pangeo Forge.


00:54:12.080 --> 00:54:12.920
- Okay.


00:54:12.920 --> 00:54:15.320
- Which is basically an ETL tool


00:54:15.320 --> 00:54:18.480
for this X-ray scientific data space, right?


00:54:18.480 --> 00:54:22.280
So what we've found is that a lot of the ETL tools


00:54:22.280 --> 00:54:27.280
that exist for business style data analytics


00:54:27.280 --> 00:54:28.680
don't necessarily play well


00:54:28.680 --> 00:54:31.280
with our multi-dimensional data model


00:54:31.280 --> 00:54:35.680
that we use in geosciences and sciences more broadly.


00:54:35.680 --> 00:54:40.520
And so we're building this open source Python package


00:54:40.520 --> 00:54:44.280
called Pangea Forge Recipes that is designed to help us


00:54:44.280 --> 00:54:46.000
with all this data movement,


00:54:46.000 --> 00:54:47.960
data transformation that needs to happen


00:54:47.960 --> 00:54:50.680
as we're migrating so many sort of legacy datasets


00:54:50.680 --> 00:54:52.880
into this cloud native format.


00:54:52.880 --> 00:54:55.640
- Oh, that's fantastic.


00:54:55.640 --> 00:54:57.480
All right, yeah, good shout out.


00:54:57.480 --> 00:55:00.760
We'll put a link to that so people can check it out.


00:55:00.760 --> 00:55:02.520
- Right, Joe, Ryan, it's been a lot of fun.


00:55:02.520 --> 00:55:04.320
A quick final call to action.


00:55:04.320 --> 00:55:07.280
People wanna get started with Pangeo.


00:55:07.280 --> 00:55:08.120
What do you say?


00:55:08.120 --> 00:55:13.320
- Come to our forum, right?


00:55:13.320 --> 00:55:15.000
- Yeah, you mentioned before we hit record,


00:55:15.000 --> 00:55:16.720
you mentioned that the discuss page


00:55:16.720 --> 00:55:18.520
is like really where the action is at right now,


00:55:18.520 --> 00:55:19.920
the discuss forum, right?


00:55:19.920 --> 00:55:21.760
Discourse, sorry, not discuss.


00:55:21.760 --> 00:55:24.260
- So I mean, the tools and the stuff


00:55:24.260 --> 00:55:26.380
is self-documenting on the website,


00:55:26.380 --> 00:55:28.800
but what we really emphasize about Pangeo


00:55:28.800 --> 00:55:30.340
is the community aspect of it.


00:55:30.340 --> 00:55:33.580
We are not just trying to build a tool and put it out there.


00:55:33.580 --> 00:55:36.560
We're really trying to build a community where scientists


00:55:36.560 --> 00:55:38.500
are talking to software developers,


00:55:38.500 --> 00:55:41.020
are talking to infrastructure maintainers,


00:55:41.020 --> 00:55:43.780
are talking to data providers, and are collectively


00:55:43.780 --> 00:55:45.960
sort of trying to keep this flywheel spinning


00:55:45.960 --> 00:55:48.860
of innovation and development, ultimately


00:55:48.860 --> 00:55:51.620
with the goal of empowering more scientific discoveries.


00:55:51.620 --> 00:55:56.320
And so if you have questions, if stuff breaks,


00:55:56.320 --> 00:56:00.100
if you don't know if it's the right tool for you,


00:56:00.100 --> 00:56:02.380
This forum is where we can welcome you.


00:56:02.380 --> 00:56:03.340
We don't have a Slack.


00:56:03.340 --> 00:56:07.120
We try to be more open than as a community than a Slack.


00:56:07.120 --> 00:56:09.880
So this is where the discussion happens.


00:56:09.880 --> 00:56:11.300
- I can second that.


00:56:11.300 --> 00:56:12.140
It's a good idea.


00:56:12.140 --> 00:56:12.980
Awesome.


00:56:12.980 --> 00:56:17.200
And then Joe, you also wanted to throw out xray.dev, right?


00:56:17.200 --> 00:56:20.460
- Yeah, so there's, yeah, exactly.


00:56:20.460 --> 00:56:23.020
There's, this is a relatively new site


00:56:23.020 --> 00:56:24.620
that sits on top of our documentation site,


00:56:24.620 --> 00:56:26.740
but there's the JupyterLite interface


00:56:26.740 --> 00:56:28.300
is down below the fold.


00:56:28.300 --> 00:56:32.140
and it's a great starting point for folks.


00:56:32.140 --> 00:56:33.020
- All right, fantastic.


00:56:33.020 --> 00:56:34.700
All right, thank you both for being here.


00:56:34.700 --> 00:56:35.860
This has been really interesting


00:56:35.860 --> 00:56:38.020
and thanks for all the hard work.


00:56:38.020 --> 00:56:39.340
- Thanks for having us. - Thanks for inviting us.


00:56:39.340 --> 00:56:40.820
- Yep, you bet, bye.

