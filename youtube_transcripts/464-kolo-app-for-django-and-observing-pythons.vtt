WEBVTT

00:00:00.001 --> 00:00:04.180
- Well, welcome to Talk Python To Me.

00:00:04.180 --> 00:00:06.000
- Hello, yeah, excited to be here, Michael.

00:00:06.000 --> 00:00:07.600
I've been listening to Talk Python for,

00:00:07.600 --> 00:00:08.680
I can't even remember how long,

00:00:08.680 --> 00:00:11.980
but I'm pretty sure it was before I had a first Python job.

00:00:11.980 --> 00:00:14.920
So, yeah, a long, long time.

00:00:14.920 --> 00:00:15.760
- Oh, that's amazing.

00:00:15.760 --> 00:00:19.080
Well, now you're helping create it.

00:00:19.080 --> 00:00:19.920
It's amazing.

00:00:19.920 --> 00:00:20.840
- Yeah, exactly.

00:00:20.840 --> 00:00:23.360
No, yeah, super excited to be on, Chad Colo.

00:00:23.360 --> 00:00:25.800
- Yeah, we're gonna talk about Colo,

00:00:25.800 --> 00:00:30.120
your Visual Studio Code Django,

00:00:30.120 --> 00:00:30.960
I don't even know what to call it.

00:00:30.960 --> 00:00:33.160
It's pretty advanced, pretty in-depth.

00:00:33.160 --> 00:00:35.600
Extension seems to be not quite enough.

00:00:35.600 --> 00:00:39.160
So, what any project, people are gonna really dig that,

00:00:39.160 --> 00:00:43.400
people who Django, and we'll see what the future plans are.

00:00:43.400 --> 00:00:46.400
We could talk you into other ones,

00:00:46.400 --> 00:00:49.760
but for now, Django plus VS Code

00:00:49.760 --> 00:00:51.260
is gonna be super interesting.

00:00:51.260 --> 00:00:54.280
Before we get to that, of course,

00:00:54.280 --> 00:00:55.360
you must know the drill.

00:00:55.360 --> 00:00:56.960
Tell us a bit about yourself.

00:00:56.960 --> 00:00:57.800
- Yeah, for sure.

00:00:57.800 --> 00:00:59.840
So, my name is Will.

00:00:59.840 --> 00:01:02.120
I've been using Django since,

00:01:02.120 --> 00:01:06.200
well, I guess I've been using Python since about 2013,

00:01:06.200 --> 00:01:08.660
I wanna say, so a little over 10 years.

00:01:08.660 --> 00:01:13.260
And yeah, just kind of like fell in love with it,

00:01:13.260 --> 00:01:16.740
wanted to make websites, started using Django.

00:01:16.740 --> 00:01:20.220
And yeah, I guess never really looked back.

00:01:20.220 --> 00:01:23.800
That was in school back then,

00:01:23.800 --> 00:01:26.200
but kind of always had a love for tinkering

00:01:26.200 --> 00:01:27.680
and building side projects.

00:01:27.680 --> 00:01:31.520
I actually studied, did a management degree in university,

00:01:31.520 --> 00:01:32.480
but I really loved hanging out

00:01:32.480 --> 00:01:33.680
with all the computer science kids,

00:01:33.680 --> 00:01:35.280
all the computer science students.

00:01:35.280 --> 00:01:37.960
And I think a part of me really wanted to impress them.

00:01:37.960 --> 00:01:39.680
So, I was always building side projects.

00:01:39.680 --> 00:01:44.680
And one of them was actually a Slack app called SimplePol.

00:01:44.680 --> 00:01:48.880
And yeah, we were trying to organize something in Slack

00:01:48.880 --> 00:01:50.600
and really felt like the need for polls.

00:01:50.600 --> 00:01:52.080
So, built this little side project,

00:01:52.080 --> 00:01:54.280
just like during university.

00:01:54.280 --> 00:01:56.320
And then it became really, really popular.

00:01:56.320 --> 00:01:59.960
And a few years later, it became my full-time job.

00:01:59.960 --> 00:02:02.000
So, for the past- - No kidding, that's awesome.

00:02:02.000 --> 00:02:04.400
- Yeah, four years, I've been running SimplePol

00:02:04.400 --> 00:02:05.880
as a Slack app, building out the team

00:02:05.880 --> 00:02:07.480
up to like seven, eight of us.

00:02:07.480 --> 00:02:11.940
And yeah, had a great time doing that.

00:02:11.940 --> 00:02:15.740
In the middle, I actually worked at GitHub for two years,

00:02:15.740 --> 00:02:17.040
working on Ruby and Rails.

00:02:17.040 --> 00:02:19.520
And that was super fun, like a great company,

00:02:19.520 --> 00:02:21.460
great people, huge code base.

00:02:22.260 --> 00:02:24.400
Learned a lot there.

00:02:24.400 --> 00:02:25.540
That was really fun.

00:02:25.540 --> 00:02:27.580
But yeah, I left after about two years

00:02:27.580 --> 00:02:29.660
to work full-time on SimplePol.

00:02:29.660 --> 00:02:31.180
So, SimplePol had been running as a side project

00:02:31.180 --> 00:02:32.700
kind of in the background.

00:02:32.700 --> 00:02:34.060
And actually, it's interesting,

00:02:34.060 --> 00:02:36.340
like I think kind of the order of events,

00:02:36.340 --> 00:02:41.340
thinking back, Microsoft acquired GitHub while I was there.

00:02:41.340 --> 00:02:44.140
And then suddenly, all of my colleagues

00:02:44.140 --> 00:02:48.360
started talking about buying boats and leaving the company.

00:02:48.360 --> 00:02:49.200
(both laughing)

00:02:49.200 --> 00:02:54.200
And I thought, hmm, I don't quite have boat money,

00:02:54.200 --> 00:02:58.800
but how can I, what's an ace I might have up my sleeve?

00:02:58.800 --> 00:03:02.160
And it was SimplePol, which had got like tons of users,

00:03:02.160 --> 00:03:04.140
but I never monetized it.

00:03:04.140 --> 00:03:05.640
So I set out to monetize it.

00:03:05.640 --> 00:03:08.040
And then a year later, it was actually bringing

00:03:08.040 --> 00:03:09.920
in more revenue than my salary at GitHub.

00:03:09.920 --> 00:03:11.840
So I decided to quit.

00:03:11.840 --> 00:03:14.360
So that's kind of the SimplePol backstory.

00:03:14.360 --> 00:03:18.240
So SimplePol's a Django app, reasonably sized now,

00:03:18.240 --> 00:03:19.720
bunch of people working on it.

00:03:19.720 --> 00:03:21.200
And then yeah, at some point in the journey

00:03:21.200 --> 00:03:22.320
of building SimplePol,

00:03:22.320 --> 00:03:27.320
I kind of started playing around with Colo.

00:03:27.320 --> 00:03:29.840
So Colo also kind of, just like SimplePol,

00:03:29.840 --> 00:03:31.640
started as a side project,

00:03:31.640 --> 00:03:33.760
but now not to make polls in Slack,

00:03:33.760 --> 00:03:37.080
but instead to improve my own developer experience

00:03:37.080 --> 00:03:39.640
building SimplePol.

00:03:39.640 --> 00:03:44.640
So kind of built it as my own tool for making Django,

00:03:44.640 --> 00:03:47.880
yeah, working with Django more fun, give me more insight,

00:03:47.880 --> 00:03:51.000
give me access to some of the data that I felt was so close,

00:03:51.000 --> 00:03:53.320
but that I had to just like manually get in there

00:03:53.320 --> 00:03:55.000
and print out.

00:03:55.000 --> 00:03:58.000
So the reasons Colo started out as supporting just Django

00:03:58.000 --> 00:04:01.040
and VS Code is because that's what I was using.

00:04:01.040 --> 00:04:02.840
And it was an internal side project.

00:04:02.840 --> 00:04:09.320
And yeah, and now actually handed over SimplePol

00:04:09.320 --> 00:04:11.160
to a new CEO.

00:04:11.160 --> 00:04:12.680
I'm no longer involved day to day

00:04:12.680 --> 00:04:15.840
and I'm working full-time on Colo.

00:04:15.840 --> 00:04:18.720
- Man, congratulations on like multiple levels.

00:04:18.720 --> 00:04:20.120
That's awesome.

00:04:20.120 --> 00:04:21.200
- Thank you.

00:04:21.200 --> 00:04:25.360
- Yeah, I wanna talk to you a bit about SimplePol

00:04:25.360 --> 00:04:28.000
for just a minute, but before then,

00:04:28.000 --> 00:04:31.680
you pointed out like, look, I made this side project

00:04:31.680 --> 00:04:34.600
and how many hours are you spending on it?

00:04:34.600 --> 00:04:35.840
A week maybe?

00:04:35.840 --> 00:04:36.680
- Oh, it was interesting.

00:04:36.680 --> 00:04:39.720
So honestly, like, so this would like right at the beginning,

00:04:39.720 --> 00:04:41.280
like when it was first started.

00:04:41.280 --> 00:04:45.680
Yeah, it's a good question.

00:04:45.680 --> 00:04:47.160
I always joke that the best thing

00:04:47.160 --> 00:04:50.840
about my management degree was that I had a lot of free time

00:04:50.840 --> 00:04:52.920
to like do build side projects.

00:04:52.920 --> 00:04:55.000
Honestly, I think it could have been like 20, 30,

00:04:55.000 --> 00:04:56.120
40 hours a week.

00:04:56.120 --> 00:05:01.160
Yeah, that was, yeah, it could have, I think, yeah,

00:05:01.160 --> 00:05:03.440
it definitely varied week to week.

00:05:03.440 --> 00:05:04.440
- And then later on?

00:05:04.440 --> 00:05:07.560
- And then, yeah, and then while I was working,

00:05:07.560 --> 00:05:09.120
but I had a full-time job as a software engineer.

00:05:09.120 --> 00:05:10.120
Yeah, that was a lot tougher.

00:05:10.120 --> 00:05:12.080
It was like nights and weekends,

00:05:12.080 --> 00:05:14.840
rarely had energy during the week to work on it.

00:05:14.840 --> 00:05:17.280
And then honestly, like, since it was a real project

00:05:17.280 --> 00:05:18.960
with real users, I ended up spending a lot

00:05:18.960 --> 00:05:21.600
of the weekend doing like support.

00:05:21.600 --> 00:05:23.760
- It's like support stuff, yeah, absolutely.

00:05:23.760 --> 00:05:25.920
- Support, and like, then you charge,

00:05:25.920 --> 00:05:28.920
and then now you have finance stuff and like legal stuff.

00:05:28.920 --> 00:05:30.880
So that wasn't super fun.

00:05:30.880 --> 00:05:32.760
- It really slows down the features

00:05:32.760 --> 00:05:35.920
and the creation of stuff, doesn't it?

00:05:35.920 --> 00:05:38.920
Yeah, I would say I probably spent fully 50%

00:05:38.920 --> 00:05:43.480
of my full-time job doing email support,

00:05:43.480 --> 00:05:45.440
that kind of stuff, you know, just like,

00:05:45.440 --> 00:05:48.000
there's tons of people taking courses

00:05:48.000 --> 00:05:50.360
and listening to podcasts, and they'll have questions

00:05:50.360 --> 00:05:52.600
and thoughts and, you know, and it's awesome,

00:05:52.600 --> 00:05:54.720
but it also is really tricky.

00:05:54.720 --> 00:05:58.720
So the reason I ask is I always find it fascinating.

00:05:58.720 --> 00:06:01.480
You'll see like news articles, I don't know,

00:06:01.480 --> 00:06:03.160
they're always click baity or whatever.

00:06:03.160 --> 00:06:06.640
This person makes three times their job working 10 hours

00:06:06.640 --> 00:06:07.800
a week on this other thing.

00:06:07.800 --> 00:06:10.440
Like you make three times what you make for your job.

00:06:10.440 --> 00:06:12.040
What are you doing at your job?

00:06:12.040 --> 00:06:13.560
(laughing)

00:06:13.560 --> 00:06:17.120
- Right, and just the ability to say,

00:06:17.120 --> 00:06:19.600
you could make that step where you go from

00:06:19.600 --> 00:06:21.440
kind of tired at nights, extra time,

00:06:21.440 --> 00:06:24.680
and squeezing on the weekends to full-time, full energy.

00:06:24.680 --> 00:06:25.520
- Yeah.

00:06:25.520 --> 00:06:27.440
- If it's already doing well, you know,

00:06:27.440 --> 00:06:29.640
on like a very thin life support,

00:06:29.640 --> 00:06:31.800
like then give it full time and energy.

00:06:31.800 --> 00:06:34.640
It's just, of course it's gonna be better, right?

00:06:34.640 --> 00:06:35.480
- Yeah, it's so interesting.

00:06:35.480 --> 00:06:36.720
I actually have a lot of thoughts about this.

00:06:36.720 --> 00:06:38.560
Maybe I should write something about this at some point,

00:06:38.560 --> 00:06:43.560
but yeah, I actually think running like a bootstrap

00:06:43.560 --> 00:06:46.360
side project kind of business as you have a job

00:06:46.360 --> 00:06:49.280
can be really good because it really forces you

00:06:49.280 --> 00:06:51.880
to prioritize and build the most important things.

00:06:51.880 --> 00:06:54.000
- Yeah, it's kind of like having kids.

00:06:54.000 --> 00:06:54.840
- Oh, nice, yeah, yeah.

00:06:54.840 --> 00:06:56.080
I need to try that someday.

00:06:56.080 --> 00:06:57.040
(laughing)

00:06:57.040 --> 00:06:58.400
- Oh, you'll be real tired, I tell you.

00:06:58.400 --> 00:06:59.800
You'll love to prioritize your time.

00:06:59.800 --> 00:07:00.840
(laughing)

00:07:00.840 --> 00:07:01.680
That's awesome.

00:07:01.680 --> 00:07:03.920
- No, yeah, I think it really forced you to prioritize.

00:07:03.920 --> 00:07:06.640
So I actually sometimes recommend when folks ask me

00:07:06.640 --> 00:07:08.200
like for advice, like should I quit my job

00:07:08.200 --> 00:07:09.700
to go all in or not?

00:07:09.700 --> 00:07:14.440
I actually sometimes think there's a lot of nice stability

00:07:14.440 --> 00:07:17.480
and that comes from having a job plus.

00:07:17.480 --> 00:07:19.320
It's actually really nice to have coworkers.

00:07:19.320 --> 00:07:20.460
It's nice to have structure.

00:07:20.460 --> 00:07:22.840
Like you actually need to take all of that,

00:07:22.840 --> 00:07:26.120
well, work in a way on yourself.

00:07:26.120 --> 00:07:28.120
Like it's, you know, if you have to make your own structure,

00:07:28.120 --> 00:07:29.240
like if you're building your own thing

00:07:29.240 --> 00:07:31.040
and that can actually be a bit tricky.

00:07:31.040 --> 00:07:33.720
Like I really struggled with that at the beginning.

00:07:33.720 --> 00:07:35.880
So I think there's something to be said for,

00:07:36.960 --> 00:07:38.800
yeah, for working on,

00:07:38.800 --> 00:07:42.920
yeah, for spending like limited time on something basically

00:07:42.920 --> 00:07:45.280
and prioritizing just the most important.

00:07:45.280 --> 00:07:46.120
- That's an interesting angle

00:07:46.120 --> 00:07:48.160
and I don't necessarily disagree with that.

00:07:48.160 --> 00:07:49.000
It's interesting.

00:07:49.000 --> 00:07:50.520
- Yeah, and then also I think,

00:07:50.520 --> 00:07:51.880
so for me it was interesting,

00:07:51.880 --> 00:07:55.240
like in terms of like how much,

00:07:55.240 --> 00:07:57.720
like, you know, life support energy you put in

00:07:57.720 --> 00:08:00.000
versus like full-time energy.

00:08:00.000 --> 00:08:05.000
I was growing decently, like while I was still at GitHub

00:08:05.240 --> 00:08:09.800
and I thought, okay, I'm gonna go in on this full-time.

00:08:09.800 --> 00:08:14.240
And if I go from like 10 hours a week or less

00:08:14.240 --> 00:08:16.040
to like 40 hours a week,

00:08:16.040 --> 00:08:18.360
that would probably forex the growth rate as well.

00:08:18.360 --> 00:08:19.840
That's how it works, right?

00:08:19.840 --> 00:08:20.680
- Yeah, of course.

00:08:20.680 --> 00:08:23.280
- And like it totally didn't work.

00:08:23.280 --> 00:08:27.080
In fact, like I think the month after I left,

00:08:27.080 --> 00:08:29.240
I had like my first down month

00:08:29.240 --> 00:08:31.160
where like the revenue decreased.

00:08:31.160 --> 00:08:33.080
And I was like, wait a minute, what's going on here?

00:08:33.080 --> 00:08:34.240
How, that doesn't make any sense.

00:08:34.240 --> 00:08:35.360
That's not fair.

00:08:35.360 --> 00:08:37.320
So I think that also points at like,

00:08:37.320 --> 00:08:39.720
there, yeah, you can definitely spend more hours

00:08:39.720 --> 00:08:41.760
on something and it can be like the wrong things

00:08:41.760 --> 00:08:44.120
or yeah, not doubling down on something

00:08:44.120 --> 00:08:45.240
that's really working.

00:08:45.240 --> 00:08:48.360
So, but overall, obviously you, yeah,

00:08:48.360 --> 00:08:50.920
at some point, like just being able to like test out

00:08:50.920 --> 00:08:53.320
more ideas is like really valuable.

00:08:53.320 --> 00:08:54.920
And for that, like, yeah, I mean,

00:08:54.920 --> 00:08:58.720
if you only have time to do support on your project,

00:08:58.720 --> 00:08:59.680
that's really working well

00:08:59.680 --> 00:09:02.520
and your full-time job is the rest of the,

00:09:02.520 --> 00:09:04.400
how you spend your week, then yeah,

00:09:04.400 --> 00:09:06.600
it feels like you should give yourself some time

00:09:06.600 --> 00:09:09.040
to build features and maybe quit the job.

00:09:09.040 --> 00:09:12.080
- Yeah, well, it's also an interesting point

00:09:12.080 --> 00:09:16.160
about the structure because not everyone

00:09:16.160 --> 00:09:19.960
is gonna get up at eight o'clock, sit at their desk

00:09:19.960 --> 00:09:21.040
and they're gonna be like,

00:09:21.040 --> 00:09:22.920
you know, I kind of can just do whatever.

00:09:22.920 --> 00:09:26.080
And it's, you know, it's its own discipline,

00:09:26.080 --> 00:09:27.960
its own learned skill.

00:09:27.960 --> 00:09:29.200
- A hundred percent, yeah, yep.

00:09:29.200 --> 00:09:31.280
I remember like one of the first weeks

00:09:31.280 --> 00:09:34.080
after I was full-time on SimplePol,

00:09:34.080 --> 00:09:35.520
I woke up in the morning and said,

00:09:35.520 --> 00:09:38.280
well, the money's coming in, I don't need to work.

00:09:38.280 --> 00:09:39.280
I don't have a boss.

00:09:39.280 --> 00:09:42.000
And I just sat in bed and watched YouTube videos all day.

00:09:42.000 --> 00:09:44.680
And then I just felt miserable at the end of the day.

00:09:44.680 --> 00:09:47.160
Like I was like, this is supposed to feel great.

00:09:47.160 --> 00:09:48.960
Why all this freedom I've wanted

00:09:48.960 --> 00:09:50.160
and dreamt about for so long,

00:09:50.160 --> 00:09:52.160
where like, why does it not feel great?

00:09:52.160 --> 00:09:57.280
- Yeah, also feels like risk

00:09:57.280 --> 00:09:59.960
and more different kinds of responsibility.

00:09:59.960 --> 00:10:01.760
So SimplePol, the reason I said

00:10:01.760 --> 00:10:04.640
it'd be worth talking about a little bit is,

00:10:04.640 --> 00:10:06.240
you know, Slack's a popular platform

00:10:06.240 --> 00:10:08.520
and this is based on Django, right?

00:10:08.520 --> 00:10:11.800
- Yeah, so SimplePol is a full-on Django app.

00:10:11.800 --> 00:10:13.200
- Yeah.

00:10:13.200 --> 00:10:16.040
- And it's funny, sometimes people joke that,

00:10:16.040 --> 00:10:17.960
I don't know if you've gone through

00:10:17.960 --> 00:10:19.920
the official Django tutorial,

00:10:19.920 --> 00:10:22.920
but in there you actually make a polls app in the browser.

00:10:22.920 --> 00:10:24.840
Sometimes people joke, wait,

00:10:24.840 --> 00:10:26.880
did you just turn this into like a Slack app?

00:10:26.880 --> 00:10:27.720
And then--

00:10:27.720 --> 00:10:29.920
- You productize the getting started tutorial, yeah.

00:10:29.920 --> 00:10:30.760
(both laughing)

00:10:30.760 --> 00:10:32.320
- Exactly.

00:10:32.320 --> 00:10:35.480
But yeah, like it turned out that like polls

00:10:35.480 --> 00:10:37.240
and then yeah, getting, you know,

00:10:37.240 --> 00:10:40.520
your team more connected and Slack and more engaged

00:10:40.520 --> 00:10:42.400
are like things people really care about.

00:10:42.400 --> 00:10:47.040
So yeah, it came to the Slack,

00:10:47.040 --> 00:10:50.000
SimplePol joined the Slack platform like at the perfect time

00:10:50.000 --> 00:10:53.520
and has just been growing super well since then.

00:10:53.520 --> 00:10:58.440
- Tell people a little bit about what it takes technically

00:10:58.440 --> 00:11:00.920
to make a Slack app.

00:11:00.920 --> 00:11:05.200
I mean, Slack is not built in Python as far as I know

00:11:05.200 --> 00:11:08.280
and it's probably JavaScript and Electron

00:11:08.280 --> 00:11:10.000
mostly the people interact with, right?

00:11:10.000 --> 00:11:11.440
So what is the deal here?

00:11:11.440 --> 00:11:13.040
- Yeah, it's actually super interesting.

00:11:13.040 --> 00:11:16.640
So the way you build like a Slack app,

00:11:16.640 --> 00:11:18.640
it's actually all backend based.

00:11:18.640 --> 00:11:20.760
So when a user interacts in Slack,

00:11:20.760 --> 00:11:24.240
Slack sends your app, your backend, like a JSON payload

00:11:24.240 --> 00:11:26.360
saying like this user clicked this button

00:11:26.360 --> 00:11:30.960
and then you can just send a JSON payload back saying,

00:11:30.960 --> 00:11:33.720
all right, now show this message, now show this modal.

00:11:33.720 --> 00:11:36.840
And they have their own JSON based block kit framework

00:11:36.840 --> 00:11:39.080
where you can render different types of content.

00:11:39.080 --> 00:11:41.360
So you don't actually have to think about JavaScript

00:11:41.360 --> 00:11:43.320
or React or any of their stack at all.

00:11:43.320 --> 00:11:45.840
It's basically all sending JSON payloads around

00:11:45.840 --> 00:11:48.240
and calling various parts of the Slack API.

00:11:48.240 --> 00:11:52.360
So you can build a Slack app in your favorite language,

00:11:52.360 --> 00:11:55.320
any kind of exotic language if you wanted to.

00:11:55.320 --> 00:11:58.480
But yeah, I love Python.

00:11:58.480 --> 00:12:00.840
So I decided to build it in Python and Django.

00:12:00.840 --> 00:12:02.200
So yeah, actually building Slack app

00:12:02.200 --> 00:12:05.240
is a really like pleasant experience.

00:12:05.240 --> 00:12:07.120
- Interesting.

00:12:07.120 --> 00:12:12.000
What's the deployment backend story look like?

00:12:12.000 --> 00:12:16.120
Is it a pass sort of thing, serverless?

00:12:16.120 --> 00:12:19.800
- Yeah, so at the time it was Heroku.

00:12:19.800 --> 00:12:21.520
Simplify was running on Heroku.

00:12:21.520 --> 00:12:26.520
And then I think a few years ago we migrated it to AWS.

00:12:26.520 --> 00:12:31.240
So now it's running on AWS and ECS.

00:12:31.240 --> 00:12:32.400
- Nice, okay.

00:12:32.400 --> 00:12:33.240
- Yeah.

00:12:33.240 --> 00:12:35.640
- So Docker for the win, right on.

00:12:35.640 --> 00:12:37.160
- Yeah, how does it work in Torque Python?

00:12:37.160 --> 00:12:39.280
I'm curious, where are you deployed?

00:12:39.280 --> 00:12:40.720
- It's all DigitalOcean.

00:12:40.720 --> 00:12:45.720
And then I have one big like eight CPU server running,

00:12:45.720 --> 00:12:50.800
I think 16 different Django apps, not Django,

00:12:50.800 --> 00:12:51.640
- Oh, no way.

00:12:51.640 --> 00:12:56.160
- No, sorry, Docker apps that are all doing like,

00:12:56.160 --> 00:12:58.560
some of them share a database that's in Docker.

00:12:58.560 --> 00:13:02.520
And some of them do sort of have their own

00:13:02.520 --> 00:13:07.520
self-contained pair of like web app and database and so on.

00:13:07.520 --> 00:13:12.360
But it's all Docker on one big server,

00:13:12.360 --> 00:13:15.880
which it's fairly new for me and it's glorious.

00:13:15.880 --> 00:13:16.720
It's glorious.

00:13:16.720 --> 00:13:17.600
- That's awesome.

00:13:17.600 --> 00:13:18.440
- Yeah.

00:13:18.440 --> 00:13:19.280
- Very cool.

00:13:19.280 --> 00:13:20.100
- Yeah.

00:13:20.100 --> 00:13:23.440
- So again, congrats on this, very, very neat.

00:13:23.440 --> 00:13:27.680
Let's talk Colo.

00:13:27.680 --> 00:13:28.520
So--

00:13:28.520 --> 00:13:29.340
- Let's do it.

00:13:29.340 --> 00:13:32.040
- I first came across this,

00:13:32.040 --> 00:13:34.680
come across it independently twice.

00:13:34.680 --> 00:13:37.120
Once,

00:13:37.120 --> 00:13:44.760
when the Django chat guys recommended that I talk to you

00:13:44.760 --> 00:13:46.760
'cause they're like, Will's doing cool stuff,

00:13:46.760 --> 00:13:47.920
you should definitely talk to him.

00:13:47.920 --> 00:13:52.100
He's doing a thing for VS Code is super cool.

00:13:52.100 --> 00:13:56.220
But also, I can't remember, there's somebody on your team

00:13:56.220 --> 00:13:59.140
whose social media profile I came across and I saw this

00:13:59.140 --> 00:14:01.420
and I'm like, oh, this is pretty neat.

00:14:01.420 --> 00:14:04.140
I think we even covered it on the Python Bytes podcast.

00:14:04.140 --> 00:14:05.980
- Oh, no way.

00:14:05.980 --> 00:14:06.900
- Let's see.

00:14:06.900 --> 00:14:08.220
Yeah, sure.

00:14:08.220 --> 00:14:09.540
In January we did.

00:14:09.540 --> 00:14:10.380
So--

00:14:10.380 --> 00:14:11.200
- Awesome.

00:14:11.200 --> 00:14:12.040
- Yeah.

00:14:12.040 --> 00:14:13.960
So that's what we talked about a little bit,

00:14:13.960 --> 00:14:15.980
but this just looks like such a neat thing.

00:14:15.980 --> 00:14:19.560
And I encourage people who may be interested in this

00:14:19.560 --> 00:14:23.040
to visit colo.app because it's a super visual

00:14:23.040 --> 00:14:26.480
sort of experience of understanding your code, right?

00:14:26.480 --> 00:14:27.720
Would you agree?

00:14:27.720 --> 00:14:28.920
- Yeah, I mean, 100%.

00:14:28.920 --> 00:14:31.260
Yeah, that's a funny thought.

00:14:31.260 --> 00:14:33.400
I hadn't really thought yet that, yeah,

00:14:33.400 --> 00:14:35.800
a podcast is gonna be a hard way to describe

00:14:35.800 --> 00:14:40.380
the visual beauty and magic that Colo can bring to your code.

00:14:40.380 --> 00:14:42.120
But yeah, 100%, yeah.

00:14:42.120 --> 00:14:45.760
So Colo very much started as the idea of,

00:14:45.760 --> 00:14:50.360
hey, I should be able to see how my code actually flows.

00:14:50.360 --> 00:14:53.760
I think all of us, as we build software,

00:14:53.760 --> 00:14:55.000
as we write our Python code,

00:14:55.000 --> 00:14:56.600
we have this kind of mental model

00:14:56.600 --> 00:15:00.120
of how all the different functions fit together,

00:15:00.120 --> 00:15:04.800
how a bit of data ends up from the beginning to the end.

00:15:04.800 --> 00:15:06.440
It passes through maybe a bunch of functions,

00:15:06.440 --> 00:15:09.840
it passes through a bunch of classes, a bunch of loops,

00:15:09.840 --> 00:15:12.040
all the state gets modified.

00:15:12.040 --> 00:15:14.360
And we have this kind of mental picture

00:15:15.280 --> 00:15:16.880
of all of that in our head.

00:15:16.880 --> 00:15:20.640
And the kind of very beginning of Colo,

00:15:20.640 --> 00:15:22.160
the question I asked myself was like,

00:15:22.160 --> 00:15:24.640
is there a way we can just visualize that?

00:15:24.640 --> 00:15:27.360
Is there a way we can just actually print that out

00:15:27.360 --> 00:15:30.040
onto a screen?

00:15:30.040 --> 00:15:31.160
So if you go to colo.app,

00:15:31.160 --> 00:15:33.320
it kind of looks like this funny sun chart

00:15:33.320 --> 00:15:37.320
with lots of, like a kind of a sunny tree chart

00:15:37.320 --> 00:15:39.620
with lots of nodes going from the center

00:15:39.620 --> 00:15:42.920
and going off into the distance,

00:15:42.920 --> 00:15:46.680
which I think is like, yeah, similar to like what folks

00:15:46.680 --> 00:15:47.960
kind of might already have in their head

00:15:47.960 --> 00:15:52.280
about like how the code flows.

00:15:52.280 --> 00:15:54.280
Maybe another way to describe it is,

00:15:54.280 --> 00:15:59.280
imagine like you enable a debugger

00:15:59.280 --> 00:16:02.880
at the beginning of every function

00:16:02.880 --> 00:16:05.760
and at the end of every function in your code,

00:16:05.760 --> 00:16:09.000
and you print out like, what was the function name?

00:16:09.000 --> 00:16:10.240
What were the input arguments?

00:16:10.240 --> 00:16:11.760
What was the return value?

00:16:11.760 --> 00:16:13.880
And then you arrange all of that in a graph

00:16:13.880 --> 00:16:17.600
that then shows which function called which other function.

00:16:17.600 --> 00:16:20.400
- Yeah, it almost looks like what you get out of profilers.

00:16:20.400 --> 00:16:21.240
- Right. - You know,

00:16:21.240 --> 00:16:24.000
where you say like, okay, this function took 20%,

00:16:24.000 --> 00:16:25.800
but if you expand it out, I'll say,

00:16:25.800 --> 00:16:28.600
well, it really spent 5% there, 10% there,

00:16:28.600 --> 00:16:32.160
and then a bunch of it, and you can kind of traverse that.

00:16:32.160 --> 00:16:33.880
- 100%, yeah. - But you're not,

00:16:33.880 --> 00:16:35.640
I'm guessing you're not really interested

00:16:35.640 --> 00:16:36.520
in how long it took,

00:16:36.520 --> 00:16:38.520
although maybe you can probably get that out of it.

00:16:38.520 --> 00:16:40.780
It's, the important is more,

00:16:41.780 --> 00:16:44.580
what is the dependency?

00:16:44.580 --> 00:16:46.860
What are the variables being passed

00:16:46.860 --> 00:16:50.220
and like understanding individual behavior, right?

00:16:50.220 --> 00:16:52.060
- Right, exactly. - So what do you think?

00:16:52.060 --> 00:16:54.820
- Yeah, 100%, I think like, it's interesting

00:16:54.820 --> 00:16:56.420
because Colo actually uses under the hood,

00:16:56.420 --> 00:16:59.260
like a bunch of the Python profiling APIs,

00:16:59.260 --> 00:17:02.500
and I think people often think of Colo as a profiler.

00:17:02.500 --> 00:17:04.100
We do actually have a,

00:17:04.100 --> 00:17:09.260
a like traditional profiling based chart,

00:17:09.260 --> 00:17:10.700
which puts the timing at the center,

00:17:10.700 --> 00:17:12.600
but you're absolutely right that,

00:17:12.600 --> 00:17:16.100
like the focus of our like main chart,

00:17:16.100 --> 00:17:17.500
the one that we're both looking at,

00:17:17.500 --> 00:17:21.380
that has like this idea of the function overview

00:17:21.380 --> 00:17:22.840
and like which function calls which,

00:17:22.840 --> 00:17:25.420
the idea there is like absolutely the hierarchy

00:17:25.420 --> 00:17:29.540
and seeing like giving yourself essentially that,

00:17:29.540 --> 00:17:32.520
yeah, giving yourself that same mental model

00:17:32.520 --> 00:17:35.060
that someone who's worked on a code base for three months

00:17:35.060 --> 00:17:36.740
has in their head,

00:17:36.740 --> 00:17:38.940
immediately like yourself by just looking at it.

00:17:38.940 --> 00:17:43.300
So you can kind of, usually in the way these charts turn out

00:17:43.300 --> 00:17:45.820
you can notice that there's like points of interest.

00:17:45.820 --> 00:17:48.140
Like there's one function that has a lot of children.

00:17:48.140 --> 00:17:51.000
So that clearly is coordinating like a bunch of the work

00:17:51.000 --> 00:17:52.760
where you can see kind of similarities

00:17:52.760 --> 00:17:56.220
in the structure of some of the sub trees.

00:17:56.220 --> 00:17:58.300
So, you know, oh, okay, maybe that's like a loop

00:17:58.300 --> 00:18:00.580
and it's the same thing happening a couple of times.

00:18:00.580 --> 00:18:04.260
So you can essentially, I get this overview

00:18:04.260 --> 00:18:06.500
and then it's fully interactive

00:18:06.500 --> 00:18:10.580
and you can dive in to like what exactly is happening.

00:18:10.580 --> 00:18:11.900
- Yeah, is it interactive?

00:18:11.900 --> 00:18:15.660
So I can like click on these pieces and it'll pull them.

00:18:15.660 --> 00:18:19.820
- Yeah, so we actually, and this is what's,

00:18:19.820 --> 00:18:22.740
it'll be live by the time this podcast goes live.

00:18:22.740 --> 00:18:25.660
We actually have a playground in the browser.

00:18:25.660 --> 00:18:26.780
This is also super fun.

00:18:26.780 --> 00:18:27.600
We can talk about this.

00:18:27.600 --> 00:18:29.820
Well, let me drop you a link real quick.

00:18:29.820 --> 00:18:31.980
This will be at play.colo.app.

00:18:31.980 --> 00:18:36.380
So with this, yeah, this is super fun

00:18:36.380 --> 00:18:39.060
because this is fully Python just running in the browser

00:18:39.060 --> 00:18:41.060
using Pyodide and like WebAssembly.

00:18:41.060 --> 00:18:42.460
- Oh, nice, okay.

00:18:42.460 --> 00:18:45.660
- But yeah, so this is the fully visual version

00:18:45.660 --> 00:18:48.380
where you can, yeah, it defaults to loading

00:18:48.380 --> 00:18:50.740
like a simple Fibonacci algorithm.

00:18:50.740 --> 00:18:54.980
And you can see like what the cola visualization

00:18:54.980 --> 00:18:56.540
of Fibonacci looks like.

00:18:56.540 --> 00:18:58.140
And you can actually edit the code

00:18:58.140 --> 00:19:01.900
and see how it changes with your edits and all of that.

00:19:01.900 --> 00:19:04.300
We have a couple other examples.

00:19:04.300 --> 00:19:07.380
- Wow, the pandas one and the whack-a-mole one

00:19:07.380 --> 00:19:08.220
are pretty intense.

00:19:08.220 --> 00:19:09.220
They're pretty wild pictures.

00:19:09.220 --> 00:19:13.260
They look like sort of Japanese fans or whatever.

00:19:13.260 --> 00:19:14.100
- Yeah, exactly.

00:19:14.100 --> 00:19:16.140
We once had a competition at a conference

00:19:16.140 --> 00:19:20.180
to see who could make like the most fun looking algorithm

00:19:20.180 --> 00:19:23.380
and visualize it with Colo.

00:19:23.380 --> 00:19:26.420
But yeah, like the, yeah, it's fun.

00:19:26.420 --> 00:19:29.260
Like visualizing code is really great.

00:19:29.260 --> 00:19:30.540
- Yeah, that's awesome.

00:19:30.540 --> 00:19:32.840
So this is super cool.

00:19:33.840 --> 00:19:36.440
It's just all from scratch.

00:19:36.440 --> 00:19:38.960
It's besides Pyodide here,

00:19:38.960 --> 00:19:42.000
not like a VS Code in the browser.

00:19:42.000 --> 00:19:44.800
- Yeah, I think it's using Monaco in this case

00:19:44.800 --> 00:19:47.640
or CodeMirror, but otherwise this is all,

00:19:47.640 --> 00:19:51.040
yeah, this is Pyodide and a little bit of React

00:19:51.040 --> 00:19:53.400
to like pull kind of the data together.

00:19:53.400 --> 00:19:56.280
But yeah, we're really, yeah.

00:19:56.280 --> 00:20:00.120
It's otherwise homemade.

00:20:01.840 --> 00:20:06.080
- And yeah, this is kind of like the,

00:20:06.080 --> 00:20:09.480
kind of what Colo has been for like the past,

00:20:09.480 --> 00:20:12.080
like two years or so has been this kind of side project

00:20:12.080 --> 00:20:16.480
for SimplePol to help like just visualize

00:20:16.480 --> 00:20:17.960
and understand code better.

00:20:17.960 --> 00:20:19.520
The SimplePol code base, to be honest,

00:20:19.520 --> 00:20:21.840
has grown so large that like there's parts of it

00:20:21.840 --> 00:20:23.280
that I wrote like five years ago

00:20:23.280 --> 00:20:25.080
that I don't understand anymore.

00:20:25.080 --> 00:20:27.400
And it's like annoying to get back to that

00:20:27.400 --> 00:20:28.560
and having to spend like a day

00:20:28.560 --> 00:20:30.660
to re-familiarize myself with everything.

00:20:30.660 --> 00:20:32.360
It's a lot nicer to just like,

00:20:32.360 --> 00:20:37.560
to actually kind of explain like end to end how it works.

00:20:37.560 --> 00:20:39.880
You install, like in a Django project,

00:20:39.880 --> 00:20:42.400
you install Colo as a middleware.

00:20:42.400 --> 00:20:47.160
And then as you just browse and use your Django app

00:20:47.160 --> 00:20:50.600
and make requests, traces get saved.

00:20:50.600 --> 00:20:52.360
So Colo records these traces.

00:20:52.360 --> 00:20:56.420
They get actually get saved in a local SQLite database.

00:20:56.420 --> 00:20:59.320
And then you can view the traces,

00:20:59.320 --> 00:21:00.580
which includes the visualization,

00:21:00.580 --> 00:21:02.200
but also like lots of other data.

00:21:02.200 --> 00:21:04.040
Like you can actually see in the version you have there,

00:21:04.040 --> 00:21:05.940
like we show every single function call,

00:21:05.940 --> 00:21:09.480
like the inputs and outputs for each function call.

00:21:09.480 --> 00:21:11.680
So that main idea of Colo is to like really show you

00:21:11.680 --> 00:21:14.120
everything that happened in your code.

00:21:14.120 --> 00:21:17.500
So in a Django app, that would be like the request,

00:21:17.500 --> 00:21:19.720
the response, like all the headers,

00:21:19.720 --> 00:21:22.320
every single function call, input and output,

00:21:22.320 --> 00:21:24.440
outbound requests, SQL queries as well.

00:21:24.440 --> 00:21:27.320
So the really the goal is to show you everything.

00:21:27.320 --> 00:21:31.460
And then you can view these stored traces

00:21:31.460 --> 00:21:33.620
either through VS Code or,

00:21:33.620 --> 00:21:36.260
and this is also will be live by the time

00:21:36.260 --> 00:21:41.260
this episode goes live through like a web middleware version

00:21:41.260 --> 00:21:46.740
which is a bit similar to Django debug toolbar.

00:21:46.740 --> 00:21:49.260
Not sure if you've played around much with Django debug.

00:21:49.260 --> 00:21:50.100
- Yeah, a little bit.

00:21:50.100 --> 00:21:52.540
Yeah, those things are actually pretty impressive.

00:21:52.540 --> 00:21:54.860
Right, I played out with that one and the pyramid one.

00:21:54.860 --> 00:21:59.360
And you can see more than I think you would reasonably

00:21:59.360 --> 00:22:03.040
expect from just a little thing on the side of your web app.

00:22:03.040 --> 00:22:04.360
- Yeah, yeah, exactly.

00:22:04.360 --> 00:22:06.960
It's like really, and that's very much our goal too,

00:22:06.960 --> 00:22:10.680
like very kind of deep, deep insight.

00:22:10.680 --> 00:22:14.780
And, but in our minds, this is almost like a bit

00:22:14.780 --> 00:22:17.000
like old news, like we've been using this

00:22:17.000 --> 00:22:18.740
for like a few years basically.

00:22:18.740 --> 00:22:20.800
And then at some point, like last year,

00:22:20.800 --> 00:22:23.280
we started playing around with this idea of like,

00:22:23.280 --> 00:22:27.540
okay, so we have this trace that has information

00:22:27.540 --> 00:22:29.520
about like pretty much everything that happened

00:22:29.520 --> 00:22:31.440
in like a request.

00:22:31.440 --> 00:22:34.320
Can we, is there any way we could use that

00:22:34.320 --> 00:22:37.820
to solve this like reasonably large pain point for us

00:22:37.820 --> 00:22:39.520
which is like writing tests?

00:22:39.520 --> 00:22:42.420
I'm actually curious, do you enjoy writing tests?

00:22:42.420 --> 00:22:48.600
- No, I'll tell you what I used to actually.

00:22:48.600 --> 00:22:50.480
I used to really enjoy writing tests.

00:22:50.480 --> 00:22:53.120
I used to enjoy thinking a lot about it.

00:22:53.120 --> 00:22:56.520
And then as the projects would get bigger,

00:22:56.520 --> 00:22:58.060
I'm like, you know, this is,

00:22:58.060 --> 00:23:00.360
these tests don't really cover

00:23:00.360 --> 00:23:01.840
what I need them to cover anymore.

00:23:01.840 --> 00:23:04.160
And they're kind of dragging it down.

00:23:04.160 --> 00:23:06.200
And then, you know, the thing that really

00:23:06.200 --> 00:23:09.400
kind of knocked it out for me is I'd have like teammates

00:23:09.400 --> 00:23:10.760
and they wouldn't care about the tests at all.

00:23:10.760 --> 00:23:12.960
So they would break the tests

00:23:12.960 --> 00:23:15.280
or just write a bunch of code without tests.

00:23:15.280 --> 00:23:20.280
And I felt kind of like a parent cleaning up after kids.

00:23:20.280 --> 00:23:22.280
And you're like, why is it so,

00:23:22.280 --> 00:23:24.400
can we just pick up, like, why are there dishes here?

00:23:24.400 --> 00:23:27.120
And they're just going around and like,

00:23:27.120 --> 00:23:28.080
this is not what I want to do.

00:23:28.080 --> 00:23:29.680
Like, I want to just write software

00:23:29.680 --> 00:23:32.520
and I understand the value of tests, of course.

00:23:32.520 --> 00:23:35.960
But at the same time,

00:23:35.960 --> 00:23:39.920
I feel like maybe higher order integration tests often,

00:23:39.920 --> 00:23:43.200
for me at least, serve more value

00:23:43.200 --> 00:23:45.760
because it's like I could write 20 little unit tests

00:23:45.760 --> 00:23:48.520
or I could write two integration tests.

00:23:48.520 --> 00:23:51.480
- I'm actually completely with you on that.

00:23:51.480 --> 00:23:52.320
- Okay. - Yeah.

00:23:52.320 --> 00:23:55.040
- I think the bang for the buck of integration tests

00:23:55.040 --> 00:23:58.760
are like great, like really, really useful.

00:23:58.760 --> 00:24:02.160
Like, yeah, I think you can almost think of tests

00:24:02.160 --> 00:24:03.800
as having like two purposes.

00:24:03.800 --> 00:24:07.600
One being like, well, actually,

00:24:07.600 --> 00:24:09.560
I think this would be too simple an explanation.

00:24:09.560 --> 00:24:13.040
Let me not make grand claims about all the uses of tests.

00:24:13.040 --> 00:24:17.680
I think the most, the use of it that most people are after

00:24:17.680 --> 00:24:19.600
is this idea of like,

00:24:19.600 --> 00:24:23.200
what I've built isn't gonna break by accident.

00:24:23.200 --> 00:24:24.400
- Yeah.

00:24:24.400 --> 00:24:27.720
- Like, you want confidence that any future change you make

00:24:27.720 --> 00:24:31.360
doesn't impact a bunch of unrelated stuff

00:24:31.360 --> 00:24:33.040
that it's not supposed to impact.

00:24:33.040 --> 00:24:37.120
I think that's what most people are after with tests.

00:24:37.120 --> 00:24:40.540
And I think for that specific desired result,

00:24:40.540 --> 00:24:43.000
like integration tests are the way to go.

00:24:43.000 --> 00:24:46.540
And there's some cool writing about this from,

00:24:47.540 --> 00:24:49.960
there is a, yeah, I wrote a little blog post

00:24:49.960 --> 00:24:53.040
about Colo's test generation abilities.

00:24:53.040 --> 00:24:57.000
And in there, I linked to a post from Kent C. Dodds

00:24:57.000 --> 00:24:59.680
from the JavaScript community who has a great post about,

00:24:59.680 --> 00:25:01.280
I think it's called,

00:25:01.280 --> 00:25:05.480
write tests, not too many, mostly integration.

00:25:05.480 --> 00:25:08.200
Kind of after this idea of like,

00:25:08.200 --> 00:25:10.280
eat not too much, mostly vegetables.

00:25:10.280 --> 00:25:11.120
I think that's the-

00:25:11.120 --> 00:25:13.080
- Yeah, exactly, exactly, yeah.

00:25:13.080 --> 00:25:14.240
- I'm a big fan of that.

00:25:14.240 --> 00:25:15.720
And actually, it's interesting,

00:25:15.720 --> 00:25:17.360
speaking to a bunch of folks over the past,

00:25:17.360 --> 00:25:18.680
like year about tests.

00:25:18.680 --> 00:25:21.840
I think a lot of people,

00:25:21.840 --> 00:25:26.140
a lot of engineers think about writing tests as vegetables.

00:25:26.140 --> 00:25:28.980
And obviously some people love vegetables.

00:25:28.980 --> 00:25:31.180
And some of us love writing tests.

00:25:31.180 --> 00:25:32.740
But it seems like for a lot of folks,

00:25:32.740 --> 00:25:35.920
it's kind of like a obviously necessary part

00:25:35.920 --> 00:25:37.300
of creating great software,

00:25:37.300 --> 00:25:42.140
but it's maybe not like the most fun part of our job.

00:25:42.140 --> 00:25:42.980
- Right.

00:25:44.980 --> 00:25:49.980
Or you pick up some project, you're a consultant,

00:25:49.980 --> 00:25:52.860
or you're taking over some open source project,

00:25:52.860 --> 00:25:54.540
and you're like, this has no tests.

00:25:54.540 --> 00:25:56.260
- Right, yeah, yeah.

00:25:56.260 --> 00:25:58.060
- It's kind of like running a linter.

00:25:58.060 --> 00:25:59.260
And it says there's a thousand errors.

00:25:59.260 --> 00:26:01.100
You're like, well, we're not gonna do that.

00:26:01.100 --> 00:26:01.940
- Yeah.

00:26:01.940 --> 00:26:03.620
- We're just not gonna run the linter against it,

00:26:03.620 --> 00:26:06.500
'cause it's just too messed up at this point, right?

00:26:06.500 --> 00:26:09.380
- It's interesting you mentioned the picking up

00:26:09.380 --> 00:26:10.580
like a project with no tests,

00:26:10.580 --> 00:26:13.900
because I think within the next three months,

00:26:13.900 --> 00:26:15.140
we're not quite there yet,

00:26:15.140 --> 00:26:16.200
but I think in the next three months

00:26:16.200 --> 00:26:18.260
with Colo's test generation abilities,

00:26:18.260 --> 00:26:20.020
we'll have a thing where, yeah,

00:26:20.020 --> 00:26:23.020
all we need is a Python code base to get started.

00:26:23.020 --> 00:26:25.560
And then we can bring that to like a really respectable

00:26:25.560 --> 00:26:28.460
level of code coverage just by using Colo.

00:26:28.460 --> 00:26:31.440
- Okay, how?

00:26:31.440 --> 00:26:34.900
- Cool, let's talk about the how.

00:26:34.900 --> 00:26:39.300
So yeah, I was kind of talking about this a second ago.

00:26:39.300 --> 00:26:41.860
I'm sorry, it was just a helicopter flying by.

00:26:41.860 --> 00:26:43.140
- Yeah, I don't hear it, it's fine.

00:26:43.140 --> 00:26:45.140
You're good, you got a good mic.

00:26:45.140 --> 00:26:49.020
- Nice, yeah, so I was kind of describing a second ago

00:26:49.020 --> 00:26:51.500
how like we kind of, you know,

00:26:51.500 --> 00:26:53.260
SimplePol has tons of integration tests.

00:26:53.260 --> 00:26:56.740
SimplePol actually is about 80,000 lines of application code

00:26:56.740 --> 00:27:00.260
not including migrations and like config files.

00:27:00.260 --> 00:27:03.300
And then it's about 100,000 lines of tests.

00:27:03.300 --> 00:27:06.020
And most of that is integration tests.

00:27:06.020 --> 00:27:09.020
So SimplePol very well tested lots of,

00:27:09.020 --> 00:27:11.480
yeah, really mostly integration tests,

00:27:11.480 --> 00:27:14.980
but it is always a bit of a chore to like write them.

00:27:14.980 --> 00:27:16.380
So we started thinking about like,

00:27:16.380 --> 00:27:20.300
hmm, this like Colo tracing we're doing,

00:27:20.300 --> 00:27:22.580
can that help us with making tests somehow?

00:27:22.580 --> 00:27:23.960
And then we started experimenting with it.

00:27:23.960 --> 00:27:26.380
And like to our surprise, it's actually, yeah.

00:27:26.380 --> 00:27:28.500
I'm still sometimes surprised that it actually works.

00:27:28.500 --> 00:27:31.780
But basically the idea is that if you have a trace

00:27:31.780 --> 00:27:36.780
that has, that captures everything in the request,

00:27:37.860 --> 00:27:42.860
you can kind of invert it to build a integration test.

00:27:42.860 --> 00:27:45.680
So let me give an example of what that means.

00:27:45.680 --> 00:27:50.300
So the biggest challenge we found

00:27:50.300 --> 00:27:52.200
with creating integration tests

00:27:52.200 --> 00:27:55.660
is actually the test data setup.

00:27:55.660 --> 00:28:00.280
So getting your application into the right shape

00:28:00.280 --> 00:28:02.360
before you can send a request to it

00:28:02.360 --> 00:28:04.600
or before you can call a certain function,

00:28:04.600 --> 00:28:06.200
that's like kind of the hardest part.

00:28:06.200 --> 00:28:10.340
Writing the asserts is almost like easy or even like fun,

00:28:10.340 --> 00:28:11.180
but like- - Right.

00:28:11.180 --> 00:28:13.420
There's the three A's of unit testing.

00:28:13.420 --> 00:28:15.180
Range, assert, and act.

00:28:15.180 --> 00:28:17.020
Wait, arrange, act, and assert.

00:28:17.020 --> 00:28:18.020
- Exactly, yeah.

00:28:18.020 --> 00:28:19.740
- The first and the third one

00:28:19.740 --> 00:28:21.940
that you kind of have data on, right?

00:28:21.940 --> 00:28:22.780
- Exactly, yeah.

00:28:22.780 --> 00:28:24.540
So we're like, wait a second.

00:28:24.540 --> 00:28:28.900
We actually can like kind of extract this,

00:28:28.900 --> 00:28:31.100
like the act, so like the setting,

00:28:31.100 --> 00:28:33.420
sorry, the arrange, setting up the data,

00:28:33.420 --> 00:28:37.600
the act, like actually making the HTTP request,

00:28:37.600 --> 00:28:40.800
and then the assert, like to ensure the status change

00:28:40.800 --> 00:28:43.040
or that the request go to 200 or something.

00:28:43.040 --> 00:28:45.520
We actually have the data for this.

00:28:45.520 --> 00:28:47.040
And it's reasonably straightforward.

00:28:47.040 --> 00:28:50.600
Like if you capture in, you know, just your like normal,

00:28:50.600 --> 00:28:52.040
like imagine you have a local to-do app

00:28:52.040 --> 00:28:55.840
and you browse like a to-do kind of demo, simple to-do app,

00:28:55.840 --> 00:28:57.080
and you browse to the homepage

00:28:57.080 --> 00:28:59.820
and the homepage maybe lists the to-dos.

00:28:59.820 --> 00:29:01.240
And if you've got Colo enabled,

00:29:01.240 --> 00:29:03.580
then Colo will have captured the request, right?

00:29:03.580 --> 00:29:05.840
So like the request went to the homepage

00:29:05.840 --> 00:29:07.320
and it returned to 200.

00:29:07.320 --> 00:29:10.280
So that's already like two things we can now turn into code

00:29:10.280 --> 00:29:11.800
in our integration test.

00:29:11.800 --> 00:29:14.480
So first step being, well,

00:29:14.480 --> 00:29:17.480
I guess this is the act and the assert

00:29:17.480 --> 00:29:19.720
in the sense that the assert is the 200,

00:29:19.720 --> 00:29:22.660
and then the act is firing off a request to the homepage.

00:29:22.660 --> 00:29:24.800
Now the tricky bit,

00:29:24.800 --> 00:29:28.280
and this is where it gets the most fun, is the arrange.

00:29:28.280 --> 00:29:32.040
So if we just put those two things into our test,

00:29:32.040 --> 00:29:33.700
in our two imaginary test,

00:29:33.700 --> 00:29:35.300
there wouldn't have been any to-dos there, right?

00:29:35.300 --> 00:29:37.480
So it's actually not an interesting test yet.

00:29:37.480 --> 00:29:40.160
But in your local version where the trace was recorded,

00:29:40.160 --> 00:29:42.920
you actually had maybe like three to-dos

00:29:42.920 --> 00:29:45.800
already in your database.

00:29:45.800 --> 00:29:46.840
Does that make sense so far?

00:29:46.840 --> 00:29:48.080
- Yeah, yeah, absolutely.

00:29:48.080 --> 00:29:51.440
- So on the homepage,

00:29:51.440 --> 00:29:54.640
like your to-do app might make a SQL query

00:29:54.640 --> 00:29:57.320
to like select all the to-dos

00:29:57.320 --> 00:29:59.880
or all the to-dos for the currently logged in user.

00:29:59.880 --> 00:30:04.360
So, and then Kolo would store that SQL query,

00:30:04.360 --> 00:30:05.560
would store that select,

00:30:05.560 --> 00:30:07.920
and would also store actually what data

00:30:07.920 --> 00:30:10.400
the database returned.

00:30:10.400 --> 00:30:12.000
This is actually something where,

00:30:12.000 --> 00:30:15.180
yeah, Kolo goes beyond a lot of the existing

00:30:15.180 --> 00:30:17.580
kind of like debugging tooling that might exist,

00:30:17.580 --> 00:30:20.760
like actually showing exactly what data

00:30:20.760 --> 00:30:23.100
the database returned in a given SQL query.

00:30:24.120 --> 00:30:28.260
But imagine we get like a single to-do return, right?

00:30:28.260 --> 00:30:34.140
We now know that to replicate this like trace in our test,

00:30:34.140 --> 00:30:39.140
we need to start by seeding that to-do into the database.

00:30:39.140 --> 00:30:42.560
So that's where like the trace inversion comes in.

00:30:42.560 --> 00:30:46.760
If like a request starts with a select of like

00:30:46.760 --> 00:30:48.000
the to-do table,

00:30:48.000 --> 00:30:49.560
then the first thing that needs to happen

00:30:49.560 --> 00:30:52.560
in the integration test is actually a,

00:30:52.560 --> 00:30:55.440
like creating like an insert into the database

00:30:55.440 --> 00:30:56.760
for that to-do.

00:30:56.760 --> 00:30:59.120
And now when you fire off the request to the homepage,

00:30:59.120 --> 00:31:01.640
it actually goes through your real code path

00:31:01.640 --> 00:31:03.360
where like an actual to-do gets loaded

00:31:03.360 --> 00:31:06.060
and gets printed out onto the page.

00:31:06.060 --> 00:31:09.880
So that's like the most basic kind of example of like,

00:31:09.880 --> 00:31:14.440
how can you turn like a locally captured trace of a request

00:31:14.440 --> 00:31:17.320
that like made a SQL query and returned 200

00:31:17.320 --> 00:31:19.680
into like an integration test.

00:31:19.680 --> 00:31:20.840
- Yeah, that's awesome.

00:31:22.240 --> 00:31:24.160
You know, one of the big,

00:31:24.160 --> 00:31:27.400
one of the things that makes me wanna write fewer unit tests

00:31:27.400 --> 00:31:31.200
or not write a unit test in a certain case

00:31:31.200 --> 00:31:35.240
is I can test given using mocking,

00:31:35.240 --> 00:31:39.920
given my, let's say SQLAlchemy or Beanie or whatever,

00:31:39.920 --> 00:31:41.700
Django ORM model,

00:31:41.700 --> 00:31:45.640
it theoretically matches the database.

00:31:45.640 --> 00:31:48.040
I can do some stuff, set some values and check and that,

00:31:48.040 --> 00:31:49.520
that's all good.

00:31:49.520 --> 00:31:52.520
But in practice, if the shape,

00:31:52.520 --> 00:31:54.440
if the schema in the database

00:31:54.440 --> 00:31:56.340
doesn't match the shape of my object,

00:31:56.340 --> 00:32:00.320
the system freaks out and crashes and says,

00:32:00.320 --> 00:32:01.760
"Well, that's not gonna work, right?

00:32:01.760 --> 00:32:02.600
There's no way."

00:32:02.600 --> 00:32:05.100
And so it doesn't matter how good I mock it out.

00:32:05.100 --> 00:32:09.400
It has to go end to end before I feel very good about it.

00:32:09.400 --> 00:32:12.240
Oh yeah, okay, it's gonna really, really work, right?

00:32:12.240 --> 00:32:13.200
- Yeah, exactly.

00:32:13.200 --> 00:32:14.800
I feel like- - It's an interesting story

00:32:14.800 --> 00:32:16.000
like you're saying to like,

00:32:16.000 --> 00:32:19.220
let's actually see if we can just create the data,

00:32:19.220 --> 00:32:21.440
but like let it run all the way through, right?

00:32:21.440 --> 00:32:23.400
- And no, I'm totally with you.

00:32:23.400 --> 00:32:25.960
And I think, yeah, I've seen,

00:32:25.960 --> 00:32:28.120
I've often seen like unit tests pass and say,

00:32:28.120 --> 00:32:29.640
I mean, there's like lots of memes about this, right?

00:32:29.640 --> 00:32:31.640
How like unit tests say everything is good,

00:32:31.640 --> 00:32:34.800
but the server is down, like, how's that possible?

00:32:34.800 --> 00:32:36.040
I think in Django world,

00:32:36.040 --> 00:32:39.440
it's reasonably common to write integration tests like this,

00:32:39.440 --> 00:32:41.680
as in like the actual database gets hit.

00:32:41.680 --> 00:32:45.560
You have this idea of like the Django test client,

00:32:45.560 --> 00:32:49.140
which sends like a, you know, real in air quotes,

00:32:49.140 --> 00:32:52.540
HTTP request through the entire Django stack,

00:32:52.540 --> 00:32:54.460
as opposed to doing the more unit test approach.

00:32:54.460 --> 00:32:55.980
So- - Yeah, so it hits the routes,

00:32:55.980 --> 00:32:58.980
it hits like all of the,

00:32:58.980 --> 00:32:59.820
that sort of stuff all the way in.

00:32:59.820 --> 00:33:02.340
- It's the route. - And the template, yeah.

00:33:02.340 --> 00:33:03.660
- Yep, yep.

00:33:03.660 --> 00:33:04.540
And then at the end,

00:33:04.540 --> 00:33:07.260
you can assert based on like the content of the response,

00:33:07.260 --> 00:33:08.780
or you can check, like,

00:33:08.780 --> 00:33:11.340
imagine if we go back to the to-do example,

00:33:11.340 --> 00:33:16.240
if we're testing like the add to-do endpoint,

00:33:16.240 --> 00:33:17.880
or form submission,

00:33:17.880 --> 00:33:20.960
then you could make a, like a database query at the end.

00:33:20.960 --> 00:33:22.640
And Kolo actually does this as well,

00:33:22.640 --> 00:33:23.960
because like, again,

00:33:23.960 --> 00:33:27.460
we know like that you inserted a to-do in your request,

00:33:27.460 --> 00:33:29.000
so we can actually make an assert.

00:33:29.000 --> 00:33:31.860
This is a different example of the trace inversion.

00:33:31.860 --> 00:33:34.960
If there's an insert in your request that you captured,

00:33:34.960 --> 00:33:38.160
then we know at the end of the integration test,

00:33:38.160 --> 00:33:41.920
you wanna assert that this row now exists in the database.

00:33:41.920 --> 00:33:46.320
So yeah, you can assert at the very end to say,

00:33:46.320 --> 00:33:50.260
does this row actually exist in the database now?

00:33:50.260 --> 00:33:53.840
So it's a very nice kind of reasonably end-to-end,

00:33:53.840 --> 00:33:55.040
but still integration test.

00:33:55.040 --> 00:33:57.420
It's not like a brittle click around in the browser

00:33:57.420 --> 00:33:59.380
and kind of hope for the best kind of thing.

00:33:59.380 --> 00:34:01.500
It's like, yeah, yeah.

00:34:01.500 --> 00:34:02.340
As we said at the beginning,

00:34:02.340 --> 00:34:04.580
I think like integration tests just get you great bang

00:34:04.580 --> 00:34:05.420
for your buck.

00:34:05.420 --> 00:34:06.500
- They really do.

00:34:06.500 --> 00:34:11.200
It's like the 80/20 rule of unit testing for sure.

00:34:11.200 --> 00:34:12.600
- Yup, yup.

00:34:12.600 --> 00:34:13.440
And yeah.

00:34:13.440 --> 00:34:17.040
- So is this all algorithmic or?

00:34:17.040 --> 00:34:18.480
- Yup, great question.

00:34:18.480 --> 00:34:19.320
- Is it?

00:34:19.320 --> 00:34:21.040
- Yeah.

00:34:21.040 --> 00:34:21.860
- Is it LLMs?

00:34:21.860 --> 00:34:24.280
Like how much VC funding are you looking for?

00:34:24.280 --> 00:34:25.120
Like, you know,

00:34:25.120 --> 00:34:26.120
like if you got the LLMs in there,

00:34:26.120 --> 00:34:27.480
like coming out of the woodwork.

00:34:27.480 --> 00:34:28.320
I'm just kidding.

00:34:28.320 --> 00:34:30.840
No, how does this happen?

00:34:30.840 --> 00:34:33.080
- Yeah, so it's actually all algorithmic

00:34:33.080 --> 00:34:35.440
and rule-based at the moment.

00:34:35.440 --> 00:34:40.440
So this idea of a select becomes like a,

00:34:40.440 --> 00:34:45.140
like an insert and an insert becomes like a select assert.

00:34:45.140 --> 00:34:51.140
We were surprised how far we could get with just rules.

00:34:51.140 --> 00:34:54.020
And the benefit we have is that we kind of have this like

00:34:54.020 --> 00:34:58.020
full-sized SimplePol Django code base to play around with.

00:34:58.020 --> 00:35:01.860
And yeah, like generating integration tests in SimplePol

00:35:01.860 --> 00:35:03.060
just like fully works.

00:35:03.060 --> 00:35:06.200
There's a bunch of tweaks we like had to make to,

00:35:06.200 --> 00:35:09.080
yeah, as soon as I guess you work in kind of like

00:35:09.080 --> 00:35:10.960
outside of a demo example,

00:35:10.960 --> 00:35:13.940
you want like time mocking and HTTP mocking,

00:35:13.940 --> 00:35:18.680
and you want to use your like factory boy factories.

00:35:18.680 --> 00:35:21.420
And like, maybe you have a custom unit test,

00:35:21.420 --> 00:35:23.480
like base class and all of this.

00:35:23.480 --> 00:35:27.000
But yeah, it like actually, it actually works now.

00:35:27.000 --> 00:35:30.680
I gave a talk at DjangoCon Europe last year,

00:35:30.680 --> 00:35:32.080
and there was kind of like,

00:35:32.080 --> 00:35:36.480
it's kind of like a bit of a wow moment in the audience

00:35:36.480 --> 00:35:40.500
where, yeah, you just click generate test,

00:35:40.500 --> 00:35:43.060
and it generates you like a hundred line integration test,

00:35:43.060 --> 00:35:44.380
and the test actually passes.

00:35:44.380 --> 00:35:48.500
So that was like, yeah, people just started clapping,

00:35:48.500 --> 00:35:50.220
which was a great feeling.

00:35:50.220 --> 00:35:51.660
I'm still a bit surprised that it works on it,

00:35:51.660 --> 00:35:54.220
but yeah, no LLM at all.

00:35:54.220 --> 00:35:56.780
I do think like LLMs could probably make these tests

00:35:56.780 --> 00:35:59.900
like even better, or you know how I was saying a second ago,

00:35:59.900 --> 00:36:02.920
like in three months, we could go take a code base

00:36:02.920 --> 00:36:07.920
from like zero test coverage to maybe like 60%, 80%.

00:36:07.920 --> 00:36:12.320
I imagine if we made use of LLMs,

00:36:12.320 --> 00:36:14.840
that would help make that happen.

00:36:14.840 --> 00:36:19.960
- Yeah, yeah, you could talk to it about like,

00:36:19.960 --> 00:36:22.440
well, these things aren't covered.

00:36:22.440 --> 00:36:23.280
- Right.

00:36:23.280 --> 00:36:24.640
- What can we do to cover them?

00:36:25.840 --> 00:36:29.940
- I don't know if you maybe could do fully, fully automated,

00:36:29.940 --> 00:36:31.760
just push the button and let it generate it,

00:36:31.760 --> 00:36:35.160
but it could also be like a conversational,

00:36:35.160 --> 00:36:37.200
not a conversation, sort of a guided,

00:36:37.200 --> 00:36:38.440
let's get the rest of the test,

00:36:38.440 --> 00:36:40.440
you know, like, okay, we're down to 80,

00:36:40.440 --> 00:36:42.880
we've got 80%, but there's the last bit a little tricky,

00:36:42.880 --> 00:36:44.320
like what ones are missing?

00:36:44.320 --> 00:36:46.180
All right, so how do you think we could do this?

00:36:46.180 --> 00:36:48.060
Is that about, no, no, you need to,

00:36:48.060 --> 00:36:49.920
that's not really the kind of data we're gonna pass,

00:36:49.920 --> 00:36:52.160
I don't know, it seems something like that, right?

00:36:52.160 --> 00:36:53.080
- I really liked that.

00:36:53.080 --> 00:36:55.320
I had not thought about like a conversation

00:36:55.320 --> 00:36:58.640
as a way to generate tests, but that makes so much sense.

00:36:58.640 --> 00:37:00.680
- Right, and kind of bringing the developer

00:37:00.680 --> 00:37:01.760
along with them.

00:37:01.760 --> 00:37:02.600
- Yeah, exactly.

00:37:02.600 --> 00:37:04.360
- If it's gotten too hard or something, you know?

00:37:04.360 --> 00:37:06.360
- Yeah, there's something cool about just clicking a button

00:37:06.360 --> 00:37:08.520
and see how much code coverage you could get to,

00:37:08.520 --> 00:37:11.400
but yeah, chatting to it.

00:37:11.400 --> 00:37:15.160
I think also, honestly, like so far,

00:37:15.160 --> 00:37:19.320
like our test generation logic is a bit of a black box.

00:37:19.320 --> 00:37:20.960
It just kind of like works

00:37:20.960 --> 00:37:24.240
until the point where like it doesn't.

00:37:24.240 --> 00:37:26.040
So we're actually kind of in the process

00:37:26.040 --> 00:37:28.360
of like shining a bit more of a light

00:37:28.360 --> 00:37:33.180
into like essentially the like internal data model

00:37:33.180 --> 00:37:37.000
that Colo keeps track of to know what the database state

00:37:37.000 --> 00:37:39.800
should be like in this arrange part

00:37:39.800 --> 00:37:41.480
of the integration test.

00:37:41.480 --> 00:37:45.200
And yeah, we're actually like in the process of like,

00:37:45.200 --> 00:37:49.280
yeah, talking to a bunch of users who are already using it

00:37:49.280 --> 00:37:53.040
and also finding like companies who want

00:37:53.040 --> 00:37:54.880
to increase their test coverage

00:37:54.880 --> 00:37:56.440
or who have problems with their testing

00:37:56.440 --> 00:37:59.040
and want to improve that and kind of working closely

00:37:59.040 --> 00:38:01.740
with them to make that happen.

00:38:01.740 --> 00:38:07.200
Yeah, and yeah, that's kind of a huge focus for us

00:38:07.200 --> 00:38:12.200
as we figure out like, how do we wanna monetize Colo?

00:38:12.200 --> 00:38:14.280
Like so far, Colo has just been kind of supported

00:38:14.280 --> 00:38:16.080
by SimplePool as a side project,

00:38:16.080 --> 00:38:17.520
but we're kind of making it real,

00:38:17.520 --> 00:38:19.040
making it its own business.

00:38:19.040 --> 00:38:22.340
So yeah, and we think the test generation

00:38:22.340 --> 00:38:25.240
is gonna play a big part in that.

00:38:25.240 --> 00:38:26.720
- Right, like that could be a certainly

00:38:26.720 --> 00:38:29.400
a premium team feature sort of thing.

00:38:29.400 --> 00:38:30.480
- Exactly, yeah.

00:38:30.480 --> 00:38:32.000
So-- - Enterprise.

00:38:32.000 --> 00:38:34.480
Enterprise version comes with auto testing.

00:38:34.480 --> 00:38:37.520
- Yeah, exactly, something like that, yeah.

00:38:37.520 --> 00:38:39.500
So yeah, I mean, if there's anyone listening

00:38:39.500 --> 00:38:41.440
and like they're keen to increase their code coverage,

00:38:41.440 --> 00:38:43.120
please email me, maybe we can leave my email

00:38:43.120 --> 00:38:44.960
in the notes or something like that.

00:38:44.960 --> 00:38:46.080
- Yeah, I'll put your contact info

00:38:46.080 --> 00:38:47.440
in the show notes for sure.

00:38:47.440 --> 00:38:49.680
- It's, yeah, it's actually really nice.

00:38:49.680 --> 00:38:52.040
It's just w@colo.app.

00:38:52.040 --> 00:38:52.980
- Oh, very nice.

00:38:52.980 --> 00:38:55.260
- So yeah, if anyone's listening

00:38:55.260 --> 00:38:57.420
and wants to kind of like increase their code coverage

00:38:57.420 --> 00:38:59.860
or has a lot of code bases that have zero coverage

00:38:59.860 --> 00:39:01.140
that would benefit from getting

00:39:01.140 --> 00:39:03.360
to like some level of coverage,

00:39:03.360 --> 00:39:05.000
we'd love to help you and talk to you.

00:39:05.000 --> 00:39:07.020
Even if the solution doesn't like involve using Colo,

00:39:07.020 --> 00:39:09.460
just really, really keen to talk to anyone

00:39:09.460 --> 00:39:13.280
about like Python tests and what can be done there.

00:39:13.280 --> 00:39:15.820
So yeah, please hit me up.

00:39:15.820 --> 00:39:18.100
- Awesome, yeah, I'll definitely put some details

00:39:18.100 --> 00:39:19.380
in the show notes for that.

00:39:19.380 --> 00:39:21.260
All right, so I have some questions as well.

00:39:21.260 --> 00:39:22.380
- Please, yes.

00:39:22.380 --> 00:39:24.420
- Right here, I'm looking at the webpage

00:39:24.420 --> 00:39:29.420
and the angle bracket title is Colo for Django.

00:39:29.420 --> 00:39:33.340
But in the playground thing you sent me,

00:39:33.340 --> 00:39:35.060
it was on plain Python code.

00:39:35.060 --> 00:39:36.420
It was on algorithms.

00:39:36.420 --> 00:39:38.780
It was on pandas, which I thought was pretty interesting

00:39:38.780 --> 00:39:40.900
how much you could see inside pandas.

00:39:40.900 --> 00:39:43.460
Makes me wonder, you know, if you look at the web frameworks,

00:39:43.460 --> 00:39:46.300
there's two or three more that are pretty popular out there

00:39:46.300 --> 00:39:48.700
and they all support middleware.

00:39:48.700 --> 00:39:49.620
- Yeah, 100%.

00:39:49.620 --> 00:39:54.620
So Colo kind of started as like this like side project

00:39:54.620 --> 00:39:58.220
for our Django app.

00:39:58.220 --> 00:40:01.780
And I think that that's why we kind of went there first,

00:40:01.780 --> 00:40:04.560
kind of the audience we know best.

00:40:04.560 --> 00:40:07.120
- The dog food as well, yeah.

00:40:07.120 --> 00:40:09.100
- Exactly, dog food.

00:40:09.100 --> 00:40:12.660
Lily, who's an engineer on the team is,

00:40:12.660 --> 00:40:16.660
and has been building kind of a lot of like, yeah,

00:40:16.660 --> 00:40:18.940
a lot of the Python side of Colo

00:40:18.940 --> 00:40:21.760
is like a core contributor to Django.

00:40:21.760 --> 00:40:24.320
So Django is like really where we're home.

00:40:24.320 --> 00:40:26.800
And to be honest, I think when building a new product,

00:40:26.800 --> 00:40:28.820
it's kind of nice to keep the audience

00:40:28.820 --> 00:40:30.380
somewhat small initially,

00:40:30.380 --> 00:40:33.540
keep like building for very specific needs

00:40:33.540 --> 00:40:36.340
as opposed to going like very wide, very early.

00:40:36.340 --> 00:40:39.420
So that was kind of very much the intention.

00:40:39.420 --> 00:40:44.420
But there's no reason why Colo can support Flask, FastAPI,

00:40:44.740 --> 00:40:48.580
or the scientific Python stack.

00:40:48.580 --> 00:40:51.180
Yeah, like as you can see in the playground,

00:40:51.180 --> 00:40:54.800
it does totally work on plain Python.

00:40:54.800 --> 00:40:57.560
It's really just a matter of, yeah,

00:40:57.560 --> 00:41:00.900
like honestly like FastAPI support

00:41:00.900 --> 00:41:04.980
would probably be like a 40 line config file in--

00:41:04.980 --> 00:41:06.380
- Yeah, exactly.

00:41:06.380 --> 00:41:08.020
- In like our code.

00:41:08.020 --> 00:41:11.500
And there's actually, yeah, we're thinking of ways to,

00:41:13.420 --> 00:41:15.220
we're thinking of ways to just make that

00:41:15.220 --> 00:41:17.860
actually a bit more pluggable as well.

00:41:17.860 --> 00:41:19.580
There's only like so many things

00:41:19.580 --> 00:41:22.620
we can reasonably support well ourselves.

00:41:22.620 --> 00:41:26.400
But to get like even, oh, sorry, go on.

00:41:26.400 --> 00:41:28.660
- I was just gonna say, if somebody else out there

00:41:28.660 --> 00:41:29.900
has an open source project,

00:41:29.900 --> 00:41:31.820
they want it to have good support for this, right?

00:41:31.820 --> 00:41:36.820
Like, hey, I run HTTPX or I run Litestar or whatever,

00:41:36.820 --> 00:41:39.860
and I want mine to look good here too, right?

00:41:39.860 --> 00:41:42.300
- Yeah, no, no, totally.

00:41:42.300 --> 00:41:43.820
So the thing you can do already today

00:41:43.820 --> 00:41:47.180
is there's a little bit of config you can pass in.

00:41:47.180 --> 00:41:49.220
And actually, if you look back on the pandas example,

00:41:49.220 --> 00:41:50.500
you'll see this.

00:41:50.500 --> 00:41:53.700
By default, Colo actually doesn't show you library code

00:41:53.700 --> 00:41:55.980
if you use it in your own code base,

00:41:55.980 --> 00:41:58.620
but you can tell it, show me everything that happened,

00:41:58.620 --> 00:42:00.220
like literally everything.

00:42:00.220 --> 00:42:01.700
And then it will do that for you.

00:42:01.700 --> 00:42:03.100
So in this example you're looking at,

00:42:03.100 --> 00:42:05.920
or if anyone's looking at the playground,

00:42:05.920 --> 00:42:07.440
if you look at the pandas example,

00:42:07.440 --> 00:42:10.620
it'll say like include everything in pandas.

00:42:10.620 --> 00:42:12.900
And that'll give you like a lot more context.

00:42:12.900 --> 00:42:15.780
The thinking there is that most people don't really need,

00:42:15.780 --> 00:42:17.500
like the issues you're gonna be looking at

00:42:17.500 --> 00:42:18.820
will be in your own code

00:42:18.820 --> 00:42:20.900
or in your own company's code base.

00:42:20.900 --> 00:42:22.600
You don't really need to look at the abstractions,

00:42:22.600 --> 00:42:24.620
but you totally can.

00:42:24.620 --> 00:42:25.700
But yeah, to answer the question,

00:42:25.700 --> 00:42:28.840
like we have this like internal version of a plugin system

00:42:28.840 --> 00:42:32.340
where yeah, like anyone could add FastAPI support

00:42:32.340 --> 00:42:37.340
or like a great insight into PyTorch or what have you.

00:42:37.340 --> 00:42:39.140
The way it all works technically really

00:42:39.140 --> 00:42:43.660
is it's totally built on top of this Python API

00:42:43.660 --> 00:42:45.540
called set profile.

00:42:45.540 --> 00:42:46.380
- Yeah. - I'm not sure.

00:42:46.380 --> 00:42:48.260
Have you come across this before?

00:42:48.260 --> 00:42:50.420
It's a bit similar to set trace actually.

00:42:50.420 --> 00:42:52.300
- Yeah, I think so.

00:42:52.300 --> 00:42:57.220
I think I've done it for some C profile things before.

00:42:57.220 --> 00:42:58.380
I'm not too sure. - Nice.

00:42:58.380 --> 00:43:00.740
- Yeah. - Yeah, it's a really neat API

00:43:00.740 --> 00:43:03.660
to be honest, because Python calls back to your,

00:43:03.660 --> 00:43:05.580
like the callback that you register

00:43:05.580 --> 00:43:09.100
on every function, enter and exit.

00:43:09.100 --> 00:43:11.780
And then Colo essentially looks at all of these functions,

00:43:11.780 --> 00:43:14.780
enters and exits and decides which ones are interesting.

00:43:14.780 --> 00:43:18.060
So the matter of like supporting say FastAPI

00:43:18.060 --> 00:43:19.840
is basically just telling Colo,

00:43:19.840 --> 00:43:22.540
these are the FastAPI functions that are interesting.

00:43:22.540 --> 00:43:23.900
This is the FastAPI function

00:43:23.900 --> 00:43:27.940
for like an HTTP request that was served.

00:43:27.940 --> 00:43:31.380
This is the HTTP response, or similarly for SQLAlchemy.

00:43:31.380 --> 00:43:34.880
This is the function where the query was actually executed

00:43:34.880 --> 00:43:36.220
and sent to the database.

00:43:36.220 --> 00:43:38.700
This is the variable which has the query result.

00:43:38.700 --> 00:43:40.500
Like there's a little bit more to it

00:43:40.500 --> 00:43:43.980
and I'm definitely like, yeah, generalizing,

00:43:43.980 --> 00:43:47.380
but it's kind of like in principle, it's as simple as that.

00:43:47.380 --> 00:43:49.460
It's like telling Colo, here's the bits of code

00:43:49.460 --> 00:43:51.260
in a given library that are interesting.

00:43:51.260 --> 00:43:53.020
Now just kind of like display that

00:43:53.020 --> 00:43:55.420
and make that available for the test generation.

00:43:55.420 --> 00:43:58.540
- Yeah, excellent.

00:43:58.540 --> 00:44:01.700
Yeah, I totally agree with you that getting focused,

00:44:01.700 --> 00:44:06.500
it probably gets you some more full attention

00:44:06.500 --> 00:44:07.740
from the Django audience.

00:44:07.740 --> 00:44:09.700
And the Django audience is quite a large

00:44:09.700 --> 00:44:11.940
and influential group in the Python web space.

00:44:11.940 --> 00:44:13.180
So that makes a ton of sense,

00:44:13.180 --> 00:44:15.020
especially since you're using it.

00:44:15.020 --> 00:44:18.660
By the way, it was Lily's Mastodon profile,

00:44:18.660 --> 00:44:21.540
I believe that I ran across that I first discovered Colo from

00:44:21.540 --> 00:44:22.740
- That would make sense.

00:44:22.740 --> 00:44:23.900
- Of all the places, yeah.

00:44:23.900 --> 00:44:27.620
Or a post from her or something like that.

00:44:27.620 --> 00:44:28.620
- That's awesome.

00:44:28.620 --> 00:44:29.580
- Yeah, cool.

00:44:29.580 --> 00:44:32.580
All right, so let's talk about a couple other things here.

00:44:32.580 --> 00:44:37.220
Yeah, so for people who haven't seen it yet,

00:44:37.220 --> 00:44:39.780
like you get quite a bit of information.

00:44:39.780 --> 00:44:43.780
So if you see like the get request,

00:44:43.780 --> 00:44:46.340
you actually see the JSON response

00:44:46.340 --> 00:44:49.060
that was returned out of that request

00:44:49.060 --> 00:44:54.060
and it integrates kind of into your editor directly, right?

00:44:54.060 --> 00:44:55.700
If you've seen Code Lens before,

00:44:55.700 --> 00:44:57.500
it's kind of like Code Lens, right?

00:44:57.500 --> 00:44:58.540
- Exactly, yeah.

00:44:58.540 --> 00:45:00.420
Yeah, this is another thing which I think

00:45:00.420 --> 00:45:02.500
is pretty novel with Colo.

00:45:02.500 --> 00:45:04.620
Like I think it's reasonably common

00:45:04.620 --> 00:45:07.940
for existing debugging tools to show you like,

00:45:07.940 --> 00:45:09.940
oh yeah, this is the headers for the request

00:45:09.940 --> 00:45:12.540
or this is like the response status code.

00:45:12.540 --> 00:45:17.020
But especially working with the Slack API in SimplePol,

00:45:17.020 --> 00:45:19.300
you're constantly looking at payloads

00:45:19.300 --> 00:45:21.780
and what were the values and what are you returning?

00:45:21.780 --> 00:45:23.980
- You don't directly, in production,

00:45:23.980 --> 00:45:26.300
you don't directly get to even make those

00:45:26.300 --> 00:45:27.740
or receive those requests, right?

00:45:27.740 --> 00:45:30.620
There's some like system in Slack

00:45:30.620 --> 00:45:32.060
who was like chatting with your thing.

00:45:32.060 --> 00:45:34.100
You're like, well, what is happening here, right?

00:45:34.100 --> 00:45:37.820
Not that you actually run this in there, but you know.

00:45:37.820 --> 00:45:38.780
- I mean, it's funny you mentioned this

00:45:38.780 --> 00:45:42.700
because there is one experiment we wanna run

00:45:42.700 --> 00:45:45.340
of kind of actually enabling these extremely deep

00:45:45.340 --> 00:45:48.780
and detailed Colo traces in production.

00:45:48.780 --> 00:45:50.620
We haven't explored this too much yet

00:45:50.620 --> 00:45:52.300
and I think we're gonna focus a little bit more

00:45:52.300 --> 00:45:56.660
on the test generation, but you could imagine like a user

00:45:56.660 --> 00:45:59.460
who's using, who's on the Talk Python site

00:45:59.460 --> 00:46:03.060
and they've got some incredibly niche error

00:46:03.060 --> 00:46:06.780
that no one else is like encountering

00:46:06.780 --> 00:46:09.780
and you've tried to reproduce it, but you can't reproduce it.

00:46:09.780 --> 00:46:11.420
Maybe there's a little bit of information

00:46:11.420 --> 00:46:14.180
in like your logging system, but it's just not enough

00:46:14.180 --> 00:46:15.420
and you keep adding more logging

00:46:15.420 --> 00:46:19.020
and you keep adding more logging and it's just not helping.

00:46:19.020 --> 00:46:20.660
Like imagine a world where you can say,

00:46:20.660 --> 00:46:23.180
just for that user, like enable Colo

00:46:23.180 --> 00:46:25.500
and enable like these really deep traces.

00:46:25.500 --> 00:46:28.900
And then you can see whenever the user next interacts,

00:46:28.900 --> 00:46:31.900
like the value for every single variable

00:46:31.900 --> 00:46:35.300
for every single code path that executed for that user.

00:46:35.300 --> 00:46:36.820
That's just like, yeah.

00:46:36.820 --> 00:46:38.140
I think one of our users described

00:46:38.140 --> 00:46:39.860
as like a debugger on steroids.

00:46:39.860 --> 00:46:41.660
- Yeah, it's pretty interesting.

00:46:41.660 --> 00:46:47.780
Sounds a little bit like what you get with Sentry

00:46:47.780 --> 00:46:49.020
and some of those things,

00:46:49.020 --> 00:46:52.020
but maybe also a little bit different.

00:46:52.020 --> 00:46:55.300
So, you could do something like,

00:46:55.300 --> 00:46:58.460
here's a dear user with problem.

00:46:58.460 --> 00:46:59.300
Here's a URL.

00:46:59.300 --> 00:47:02.060
If you click this, it'll set a cookie in your browser

00:47:02.060 --> 00:47:05.940
and then all subsequent behavior, it just hits on it.

00:47:05.940 --> 00:47:06.780
You know what I mean?

00:47:06.780 --> 00:47:07.900
It's like recording it.

00:47:07.900 --> 00:47:08.740
- Exactly.

00:47:08.740 --> 00:47:09.900
- That'd be pretty interesting.

00:47:09.900 --> 00:47:12.460
- Fully debug your, yeah, I think it makes sense

00:47:12.460 --> 00:47:14.380
in the case, like if a user,

00:47:14.380 --> 00:47:16.980
it could even be an automated support thing, right?

00:47:16.980 --> 00:47:20.380
Like if, I think a couple of sites have this

00:47:20.380 --> 00:47:22.500
where you can like do like a debug dump

00:47:22.500 --> 00:47:24.580
before you submit your support ticket.

00:47:24.580 --> 00:47:26.340
This is almost like that.

00:47:26.340 --> 00:47:28.900
And then as an engineer who's tasked with,

00:47:28.900 --> 00:47:30.940
you know, digging into that user's bug,

00:47:30.940 --> 00:47:33.740
you don't have to start with like piecing together.

00:47:33.740 --> 00:47:36.380
What was this variable at this time

00:47:36.380 --> 00:47:38.260
when they made that request three days ago?

00:47:38.260 --> 00:47:40.020
You like, you can just see it.

00:47:40.020 --> 00:47:42.020
- How about this?

00:47:42.020 --> 00:47:44.620
If an error ever encounters an exception on your site,

00:47:44.620 --> 00:47:46.260
you just set the cookie.

00:47:46.260 --> 00:47:47.100
- Right.

00:47:47.100 --> 00:47:48.660
- Everything else they do is now just recorded

00:47:48.660 --> 00:47:49.700
until you turn it off.

00:47:49.700 --> 00:47:51.700
- Oh my God, you're giving me so many good ideas.

00:47:51.700 --> 00:47:52.540
- That'd be fun, right?

00:47:52.540 --> 00:47:54.060
- I'm gonna start writing this stuff down.

00:47:54.060 --> 00:47:55.300
- Hey, let's record it.

00:47:55.300 --> 00:47:56.140
It'll be fine.

00:47:56.140 --> 00:47:58.380
(laughing)

00:47:58.380 --> 00:48:00.100
- That's awesome.

00:48:00.100 --> 00:48:02.580
- Yeah, there's a bunch of stuff that's interesting.

00:48:02.580 --> 00:48:04.100
People can check it on the site.

00:48:04.100 --> 00:48:05.460
It's all good.

00:48:05.460 --> 00:48:09.340
However, let's, we talked a little bit

00:48:09.340 --> 00:48:10.380
about the production thing.

00:48:10.380 --> 00:48:12.460
Like another thing you could do for production,

00:48:12.460 --> 00:48:15.780
this requires both a decent amount of traffic

00:48:15.780 --> 00:48:19.140
and maybe you could actually pull this off

00:48:19.140 --> 00:48:21.380
on just a single server, but you could do like,

00:48:21.380 --> 00:48:24.420
let's just run this for 1% of the traffic

00:48:24.420 --> 00:48:26.540
so that you don't kill the system,

00:48:26.540 --> 00:48:29.220
but you get, if that's why I see you have enough traffic,

00:48:29.220 --> 00:48:32.860
it's like statistically significant sampling

00:48:32.860 --> 00:48:35.940
of what people do without actually recording,

00:48:35.940 --> 00:48:39.300
a million requests a day or something.

00:48:39.300 --> 00:48:40.140
- 100%.

00:48:40.140 --> 00:48:41.620
I think there's really something there.

00:48:41.620 --> 00:48:43.860
Or like, I mean, how cool would it be if,

00:48:43.860 --> 00:48:49.020
yeah, honestly, I could go on about this whole idea

00:48:49.020 --> 00:48:51.260
of like runtime data and like improving software

00:48:51.260 --> 00:48:53.760
understanding for days, because I just think like,

00:48:54.480 --> 00:48:56.600
it's really this like missing layer, right?

00:48:56.600 --> 00:48:59.240
Like all of us constantly imagine like what is,

00:48:59.240 --> 00:49:01.440
like we play computer looking at our code,

00:49:01.440 --> 00:49:04.520
imagining what the values can be, but like, yeah.

00:49:04.520 --> 00:49:07.920
Say you're looking at some complex function in production

00:49:07.920 --> 00:49:09.600
and you want to understand how it works.

00:49:09.600 --> 00:49:12.960
Like how useful would it be if you could see like the 10,

00:49:12.960 --> 00:49:14.400
the last 10 times it was called,

00:49:14.400 --> 00:49:16.160
like what were the values going into it

00:49:16.160 --> 00:49:18.760
and what were the values coming out of it?

00:49:18.760 --> 00:49:20.840
Like that would be, I just think like,

00:49:20.840 --> 00:49:22.440
why do we not have this already?

00:49:22.440 --> 00:49:24.520
Like why does your editor not show you

00:49:24.520 --> 00:49:26.920
for every single function in the code base?

00:49:26.920 --> 00:49:30.880
Like give examples of like how it's actually used

00:49:30.880 --> 00:49:32.040
like in production.

00:49:32.040 --> 00:49:33.080
- Yeah, yeah.

00:49:33.080 --> 00:49:34.640
And then use those to generate unit tests.

00:49:34.640 --> 00:49:37.340
And if there's an error, use that to generate the edge case,

00:49:37.340 --> 00:49:39.720
like the negative case, not the positive case.

00:49:39.720 --> 00:49:40.560
- Exactly.

00:49:40.560 --> 00:49:42.040
- There you go.

00:49:42.040 --> 00:49:42.940
All right.

00:49:42.940 --> 00:49:44.440
- It's all like kind of hanging together.

00:49:44.440 --> 00:49:45.280
Like, yeah.

00:49:45.280 --> 00:49:46.280
- Yeah, yeah.

00:49:46.280 --> 00:49:48.640
Once you have the data, you have interesting options.

00:49:48.640 --> 00:49:49.480
- Yeah.

00:49:49.480 --> 00:49:52.080
- Yeah, so business model.

00:49:52.840 --> 00:49:54.200
- This is not, this,

00:49:54.200 --> 00:49:56.000
I maybe should have started sooner with this,

00:49:56.000 --> 00:49:58.360
but it's not entirely open source.

00:49:58.360 --> 00:50:00.440
There may be a little bits and pieces of it,

00:50:00.440 --> 00:50:03.060
but in general, it's not open source.

00:50:03.060 --> 00:50:03.900
- That's correct.

00:50:03.900 --> 00:50:04.720
Yeah, yeah.

00:50:04.720 --> 00:50:05.560
Yeah.

00:50:05.560 --> 00:50:06.720
- I'm not putting that out there as a negative, right?

00:50:06.720 --> 00:50:08.080
This looks like a super powerful tool

00:50:08.080 --> 00:50:11.240
that people can use to write code and that's fine.

00:50:11.240 --> 00:50:12.200
- No, for sure.

00:50:12.200 --> 00:50:13.800
Like, yeah, I think the open source question

00:50:13.800 --> 00:50:14.640
is super interesting.

00:50:14.640 --> 00:50:18.560
Like I think it's always been like something

00:50:18.560 --> 00:50:20.640
we've thought about or considered.

00:50:20.640 --> 00:50:22.640
I think there is, yeah, with developer tools,

00:50:22.640 --> 00:50:24.980
I think business models are always super interesting

00:50:24.980 --> 00:50:27.860
and we wanna make sure that we can have a business model

00:50:27.860 --> 00:50:30.920
for Colo and like run it as like a sustainable thing

00:50:30.920 --> 00:50:33.640
as opposed to it just being like a simple poll side project

00:50:33.640 --> 00:50:34.880
kind of indefinitely.

00:50:34.880 --> 00:50:37.480
Be great if Colo could like support itself

00:50:37.480 --> 00:50:38.760
and yeah, have a business model.

00:50:38.760 --> 00:50:40.480
I think that's how it can like really

00:50:40.480 --> 00:50:42.000
fulfill its potential in a way.

00:50:42.000 --> 00:50:44.600
But that's not to say that like Colo

00:50:44.600 --> 00:50:45.940
won't ever be open source.

00:50:45.940 --> 00:50:49.480
Like I think there's a lot to be said for open sourcing it.

00:50:49.480 --> 00:50:52.880
I think especially like the capturing of the traces

00:50:52.880 --> 00:50:57.140
is maybe something like I could see us open sourcing.

00:50:57.140 --> 00:50:59.240
I think the open source community is fantastic.

00:50:59.240 --> 00:51:02.480
I do also think it's not like a thing you get for free.

00:51:02.480 --> 00:51:03.320
Right?

00:51:03.320 --> 00:51:06.700
Like as soon as you say, hey, we're open source,

00:51:06.700 --> 00:51:10.940
you open yourself up to contributions, right?

00:51:10.940 --> 00:51:13.480
And to like the community actually getting involved

00:51:13.480 --> 00:51:16.840
and that's great, but it also takes time.

00:51:16.840 --> 00:51:19.840
And I think like that's a path I would like to go down

00:51:19.840 --> 00:51:22.120
when we're a little bit clearer on like

00:51:22.120 --> 00:51:26.000
what Colo actually is and like where it's valuable,

00:51:26.000 --> 00:51:26.840
if that makes sense.

00:51:26.840 --> 00:51:28.120
- Yeah, yeah, sure.

00:51:28.120 --> 00:51:31.340
- If it turns out that no one cares about like what,

00:51:31.340 --> 00:51:32.960
how like how to visualize code,

00:51:32.960 --> 00:51:38.840
then like that's a great like learning for us to have made.

00:51:38.840 --> 00:51:43.880
But I'd rather get there without like a lot of work

00:51:43.880 --> 00:51:46.120
in the middle that we could have kind of avoided

00:51:46.120 --> 00:51:46.960
if that makes sense.

00:51:46.960 --> 00:51:51.960
So like it's, it feels like once we have a better sense

00:51:51.960 --> 00:51:54.600
of the shape of Colo and what the business model

00:51:54.600 --> 00:51:58.480
actually looks like, then we can be a bit more,

00:51:58.480 --> 00:52:02.160
yeah, we can invest into open source a little bit more.

00:52:02.160 --> 00:52:04.600
But to be honest, like based on how everything's looking

00:52:04.600 --> 00:52:07.360
right now, like I would not be surprised at all

00:52:07.360 --> 00:52:10.320
if like big chunks, if like Colo becomes open core

00:52:10.320 --> 00:52:13.300
or big chunks of it are like open source.

00:52:14.840 --> 00:52:15.680
Yeah.

00:52:15.680 --> 00:52:19.080
- Yeah, it makes sense to me.

00:52:19.080 --> 00:52:20.560
- It is fully free at the moment.

00:52:20.560 --> 00:52:22.080
So I should, that's worth calling out.

00:52:22.080 --> 00:52:25.160
Like it's, there's no cost or anything.

00:52:25.160 --> 00:52:27.600
You can also like, you know, you download the Python package

00:52:27.600 --> 00:52:28.440
and guess what?

00:52:28.440 --> 00:52:30.360
You can look at all of the code.

00:52:30.360 --> 00:52:31.800
Like it actually is all of theirs.

00:52:31.800 --> 00:52:34.080
It is all kind of visible.

00:52:34.080 --> 00:52:34.920
- Yeah, yeah.

00:52:34.920 --> 00:52:38.280
And I, that kind of leads into the next question is,

00:52:38.280 --> 00:52:41.760
you know, I've never used GitHub Copilot

00:52:41.760 --> 00:52:44.640
and a few of those other things because it's like,

00:52:44.640 --> 00:52:49.080
here, check this box to allow us to upload all of your code

00:52:49.080 --> 00:52:51.320
and maybe your access keys and everything else

00:52:51.320 --> 00:52:52.160
that's interesting.

00:52:52.160 --> 00:52:54.660
So we can, one, train our models and two,

00:52:54.660 --> 00:52:56.920
you know, give you some answers.

00:52:56.920 --> 00:52:59.900
And that just always felt a little bit off to me.

00:52:59.900 --> 00:53:02.800
What's the story with the data?

00:53:02.800 --> 00:53:05.880
- Yeah, Greg, I mean, so at the moment,

00:53:05.880 --> 00:53:08.720
Colo is like entirely like a local product, right?

00:53:08.720 --> 00:53:13.720
So it's all local, like you don't have to,

00:53:13.800 --> 00:53:16.160
yeah, you can get like all of the visualization,

00:53:16.160 --> 00:53:21.160
everything just by using local Colo in VS Code.

00:53:21.160 --> 00:53:24.160
We do have a way to like upload traces

00:53:24.160 --> 00:53:27.880
and share them like with a colleague.

00:53:27.880 --> 00:53:30.280
This is actually also something I think is like,

00:53:30.280 --> 00:53:33.560
kind of playing with the idea of like writing a little like

00:53:33.560 --> 00:53:36.440
Colo manifesto, like what are the things that we believe in?

00:53:36.440 --> 00:53:37.720
One of them that I believe in,

00:53:37.720 --> 00:53:39.520
and this goes back to the whole like

00:53:39.520 --> 00:53:42.840
runtime layer on top of code.

00:53:42.840 --> 00:53:45.280
And like, there's this whole dimension,

00:53:45.280 --> 00:53:46.880
this like third dimension to code

00:53:46.880 --> 00:53:49.000
that we're all simulating in our heads.

00:53:49.000 --> 00:53:51.600
I think like it should totally be possible

00:53:51.600 --> 00:53:54.360
to not just like link to a snippet of code,

00:53:54.360 --> 00:53:57.720
like on GitHub, but it should be possible to have a like,

00:53:57.720 --> 00:54:01.680
link like a URL to a specific execution of code,

00:54:01.680 --> 00:54:04.560
like a specific function and actually talk about that.

00:54:04.560 --> 00:54:06.280
It's kind of wild to me that we don't have this

00:54:06.280 --> 00:54:09.240
at the moment, like you can't send a link to a colleague

00:54:09.240 --> 00:54:11.840
saying, "Hey, look at this execution.

00:54:11.840 --> 00:54:13.040
That looks a bit weird."

00:54:13.040 --> 00:54:13.880
Right?

00:54:13.880 --> 00:54:16.800
- Yeah, we ran this in continuous integration

00:54:16.800 --> 00:54:18.120
and it crashed, but I understand.

00:54:18.120 --> 00:54:20.120
Let's look at the exact.

00:54:20.120 --> 00:54:21.120
- Right.

00:54:21.120 --> 00:54:23.040
You can link to like CI runs,

00:54:23.040 --> 00:54:25.080
you can link to like sentry errors,

00:54:25.080 --> 00:54:26.400
but like if you're just seeing something

00:54:26.400 --> 00:54:29.080
slightly weird locally, or like even something

00:54:29.080 --> 00:54:31.320
slightly like weird in production where there's no area,

00:54:31.320 --> 00:54:33.920
you can't really like link to that.

00:54:33.920 --> 00:54:37.000
Anyway, like this is kind of a roundabout way of

00:54:37.000 --> 00:54:40.000
me saying that like, I think that totally should be a thing

00:54:40.000 --> 00:54:42.120
that you should be able to link like generically

00:54:42.120 --> 00:54:43.680
to like a execution of a function

00:54:43.680 --> 00:54:45.400
or an execution of a request.

00:54:45.400 --> 00:54:49.720
And like that would totally have to live somewhere, right?

00:54:49.720 --> 00:54:51.360
So this is where there's some idea of like

00:54:51.360 --> 00:54:54.120
Colo Cloud comes in and this is where you could like

00:54:54.120 --> 00:54:58.840
connect your repository and then Colo would like,

00:54:58.840 --> 00:55:00.800
as part of that, you know, just like GitHub does

00:55:00.800 --> 00:55:03.240
have access to your code and like show you the code

00:55:03.240 --> 00:55:05.480
in like the Colo Cloud.

00:55:05.480 --> 00:55:08.800
So I think there's definitely like useful things

00:55:08.800 --> 00:55:11.080
that are possible there, but at the moment,

00:55:11.080 --> 00:55:14.480
it's a fully local experience.

00:55:14.480 --> 00:55:18.200
Like your code doesn't ever leave your system.

00:55:18.200 --> 00:55:20.680
You can, if you want to like upload traces

00:55:20.680 --> 00:55:23.960
and then Colo stores the like trace data,

00:55:23.960 --> 00:55:25.980
not the code, just the trace data.

00:55:25.980 --> 00:55:28.800
But yeah, very local experience right now.

00:55:28.800 --> 00:55:31.280
- Okay, yeah, a little SQLite database.

00:55:31.280 --> 00:55:32.320
- Exactly, yep.

00:55:32.320 --> 00:55:34.320
- Yeah, SQLite's pretty awesome.

00:55:34.320 --> 00:55:36.800
- Yeah, it's an incredible piece of software.

00:55:36.800 --> 00:55:38.640
- Yeah, it really, really is.

00:55:38.640 --> 00:55:41.840
All right, let's close out our conversation here

00:55:41.840 --> 00:55:44.640
with a little bit of a request from Michael.

00:55:44.640 --> 00:55:46.520
Right now it's VS Code only.

00:55:46.520 --> 00:55:48.840
Any chance for some PyCharm in there?

00:55:48.840 --> 00:55:53.040
- Yeah, so this is our top request, like PyCharm support.

00:55:53.040 --> 00:55:57.240
And we've decided, yeah, like super small team,

00:55:57.240 --> 00:55:59.120
like we want to kind of support everyone,

00:55:59.120 --> 00:56:02.440
but we've been working very heavily actually

00:56:02.440 --> 00:56:05.600
the past few months on a web-based version,

00:56:06.520 --> 00:56:11.520
which is, I'm happy to say like very much nearing completion

00:56:11.520 --> 00:56:14.400
and there's a few bits and pieces where like,

00:56:14.400 --> 00:56:16.760
it's really nice to be integrated super deeply

00:56:16.760 --> 00:56:19.760
into the editor, like the code lenses and all of that.

00:56:19.760 --> 00:56:21.080
And I think there's a chance we'll have that

00:56:21.080 --> 00:56:22.820
for PyCharm eventually as well.

00:56:22.820 --> 00:56:24.800
But we actually found that like,

00:56:24.800 --> 00:56:27.080
they're building out this web version.

00:56:27.080 --> 00:56:29.320
There's a few things that are actually much nicer

00:56:29.320 --> 00:56:31.720
when you have the full control over the UI

00:56:31.720 --> 00:56:33.560
in terms of like browsing around a trace,

00:56:33.560 --> 00:56:35.400
highlighting little bits of code.

00:56:35.400 --> 00:56:40.400
So for example, we in Colo, like a given function call,

00:56:40.400 --> 00:56:44.960
we call a frame and you can look at a given frame,

00:56:44.960 --> 00:56:47.160
both in VS Code, but also in the web version

00:56:47.160 --> 00:56:49.800
and see the code and see all of the data

00:56:49.800 --> 00:56:51.240
that passed through the code.

00:56:51.240 --> 00:56:53.920
But something we can do in the web version,

00:56:53.920 --> 00:56:56.160
we can't do in VS Code is actually show

00:56:56.160 --> 00:56:58.160
where the current function was called from

00:56:58.160 --> 00:57:00.840
and actually show like a preview of that code.

00:57:00.840 --> 00:57:02.720
In VS Code, you can't really show like--

00:57:02.720 --> 00:57:05.080
- Yeah, you can layer multiple files together

00:57:05.080 --> 00:57:05.920
or different-- - Exactly.

00:57:05.920 --> 00:57:07.280
- Yeah, exactly.

00:57:07.280 --> 00:57:10.280
- So we actually have like, there's actually a lot of,

00:57:10.280 --> 00:57:13.560
like I was surprised by how many different novel

00:57:13.560 --> 00:57:17.700
like kind of ways we had in the web

00:57:17.700 --> 00:57:19.580
that we just never even considered

00:57:19.580 --> 00:57:21.080
with like a direct editor integration

00:57:21.080 --> 00:57:23.580
in terms of displaying this runtime data.

00:57:23.580 --> 00:57:27.120
So like long story short, like you want

00:57:27.120 --> 00:57:28.760
a PyCharm integration, let me give you something

00:57:28.760 --> 00:57:31.760
even better, a web version.

00:57:31.760 --> 00:57:36.600
- So would that work like you run a certain command

00:57:36.600 --> 00:57:38.740
or something when you run your web app

00:57:38.740 --> 00:57:41.040
and then it just generates the SQL lite file

00:57:41.040 --> 00:57:42.920
and then you could just explore it with a web view

00:57:42.920 --> 00:57:44.360
or what are you--

00:57:44.360 --> 00:57:47.120
- Yeah, it's actually kind of cooler than that.

00:57:47.120 --> 00:57:49.420
So if you're using Django or in the future,

00:57:49.420 --> 00:57:52.160
like other things with a typical middleware,

00:57:52.160 --> 00:57:53.920
you would just like go to your,

00:57:53.920 --> 00:57:55.680
you would just go to localhost 8000.

00:57:55.680 --> 00:57:56.520
- Oh, I see.

00:57:56.520 --> 00:57:57.560
- That's cool.

00:57:57.560 --> 00:57:58.520
- Yeah, yeah, yeah.

00:57:58.520 --> 00:58:03.360
- Kind of like you do for Open API docs.

00:58:03.360 --> 00:58:04.560
- Yep, exactly, yep.

00:58:04.560 --> 00:58:06.400
And then the whole experience is just there.

00:58:06.400 --> 00:58:08.040
If you're not using a middleware,

00:58:08.040 --> 00:58:12.200
we'll have a command like colo serve or something like that.

00:58:12.200 --> 00:58:16.520
And that'll host the same experience for you.

00:58:16.520 --> 00:58:17.560
- Nice, yeah.

00:58:17.560 --> 00:58:21.040
Just make sure it's off by default

00:58:21.040 --> 00:58:25.520
or it only responds on localhost or something like that.

00:58:25.520 --> 00:58:27.000
You know, like--

00:58:27.000 --> 00:58:27.840
- Yeah, exactly.

00:58:27.840 --> 00:58:30.200
- Don't let people ship it on accident.

00:58:30.200 --> 00:58:31.040
- Yeah, yeah.

00:58:31.040 --> 00:58:31.880
- That would be bad news.

00:58:31.880 --> 00:58:33.680
- No production use of this.

00:58:33.680 --> 00:58:37.080
- Yeah, I mean, people already know about the Django

00:58:37.080 --> 00:58:39.760
debug settings, but right,

00:58:39.760 --> 00:58:41.880
I guess you could sort of layer onto that, right?

00:58:41.880 --> 00:58:42.720
Probably.

00:58:42.720 --> 00:58:44.120
- Yeah, I think we actually do that at the moment,

00:58:44.120 --> 00:58:47.000
but yeah, it's worth remembering.

00:58:47.000 --> 00:58:48.960
- I know, I just think, you know, like,

00:58:48.960 --> 00:58:51.560
well, this is really cool to explore.

00:58:51.560 --> 00:58:52.400
- 100%.

00:58:52.400 --> 00:58:53.840
- CNN.com is awesome.

00:58:53.840 --> 00:58:54.680
Look what it's doing.

00:58:54.680 --> 00:58:56.920
- Look at all these requests and all this.

00:58:56.920 --> 00:58:58.200
- Yeah, exactly.

00:58:58.200 --> 00:58:59.040
- 100%.

00:58:59.040 --> 00:58:59.880
- Yeah.

00:58:59.880 --> 00:59:01.480
- Oh, and the API key is so interesting.

00:59:01.480 --> 00:59:06.040
Anyway, that's a bit of a side conversation.

00:59:06.040 --> 00:59:08.880
Let's just, let's wrap it up with final call action.

00:59:08.880 --> 00:59:10.760
People are interested.

00:59:10.760 --> 00:59:12.320
What do they do?

00:59:12.320 --> 00:59:15.240
- Yeah, go to colo.app and check it out.

00:59:15.240 --> 00:59:18.400
We have a playground link there, play.colo.app.

00:59:18.400 --> 00:59:21.920
Easiest way to kind of see what Colo is and what Colo does.

00:59:21.920 --> 00:59:24.480
But we'll say the most powerful way

00:59:24.480 --> 00:59:25.920
to actually see Colo in action

00:59:25.920 --> 00:59:27.760
is to use it on your own code base.

00:59:27.760 --> 00:59:30.160
So seeing the visualization

00:59:30.160 --> 00:59:33.120
and the test generation capabilities is just like,

00:59:33.120 --> 00:59:34.440
yeah, the most useful when you use it

00:59:34.440 --> 00:59:35.840
on your own code base.

00:59:35.840 --> 00:59:38.920
So hopefully the playground can entice that a little bit.

00:59:38.920 --> 00:59:40.080
And yeah, really the main,

00:59:40.080 --> 00:59:41.920
most important thing for us right now is, yeah,

00:59:41.920 --> 00:59:44.680
chatting to folks who want to increase their test coverage,

00:59:44.680 --> 00:59:46.520
want to like build automated testing

00:59:46.520 --> 00:59:47.840
as part of their workflow.

00:59:47.840 --> 00:59:50.280
And yeah, work very closely with you to make that happen.

00:59:50.280 --> 00:59:55.280
So if that's you, please email me at w@colo.app.

00:59:56.120 --> 00:59:58.680
- You need that pause for the W, that's right.

00:59:58.680 --> 01:00:01.560
The two at's, awesome.

01:00:01.560 --> 01:00:02.920
Will, thanks for being on the show.

01:00:02.920 --> 01:00:04.920
Congrats on both of your projects.

01:00:04.920 --> 01:00:06.280
They look really neat.

01:00:06.280 --> 01:00:07.120
- Thanks so much for having me.

01:00:07.120 --> 01:00:08.840
Yeah, so excited to have been on.

01:00:08.840 --> 01:00:10.560
- Yeah, you bet, bye.

