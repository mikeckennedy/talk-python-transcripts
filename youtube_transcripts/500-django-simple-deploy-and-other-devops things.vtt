WEBVTT

00:00:00.001 --> 00:00:04.400
Eric, welcome back to Talk Python to Me. Great to have you here.

00:00:04.400 --> 00:00:05.940
Nice to see you again, Michael.

00:00:05.940 --> 00:00:15.180
Nice to see you as well. Last time we talked about your book, right? And now your project,

00:00:15.180 --> 00:00:19.500
your deployment project. I love talking about deployment because I think it's such an enabling

00:00:19.500 --> 00:00:28.700
technology or enabling skill. And your project Django Simple Deploy is certainly in that realm.

00:00:29.640 --> 00:00:32.580
Yes, I have appreciated your comments about deployment over the years.

00:00:32.580 --> 00:00:41.120
Thanks. Well, they're a hard one. My skills in deployment are a hard one. I kind of want to

00:00:41.120 --> 00:00:49.720
talk a little bit about the journey for people, but not yet. Let's get a quick introduction of

00:00:49.720 --> 00:00:54.160
who is Eric? What do you do? What's new in your life since the last time you were on the show?

00:00:54.160 --> 00:00:59.200
Oh, gosh. Yeah. It's all context for this project because this project

00:00:59.280 --> 00:01:03.760
ties together a lot of the different things that I've done. Short version, I grew up in New Hampshire,

00:01:03.760 --> 00:01:09.360
moved to New York City, then moved to Alaska. Just last year, moved to Western North Carolina.

00:01:09.360 --> 00:01:17.220
And I had a background in science. I studied physics in college and got pulled into teaching,

00:01:17.220 --> 00:01:24.820
spent a long time teaching math and science, fifth grade through 12th grade, which was super fun because

00:01:24.820 --> 00:01:31.300
it's not at the level of undergrad or grad work, but the questions young people ask always make things

00:01:31.300 --> 00:01:37.100
interesting. And I got pulled into programming because I always did it on the side.

00:01:37.100 --> 00:01:45.280
And I kind of felt like, I always felt like at some point, I might focus more on programming and less on

00:01:45.280 --> 00:01:51.140
classroom teaching. So for the past five, six years, I've been a full-time writer and programmer.

00:01:51.140 --> 00:01:58.740
It's been enjoyable. Yeah. And congrats on the move. You really like to sample different

00:01:58.740 --> 00:02:06.260
weather systems, different environments. You're going to get a different summer experience

00:02:06.260 --> 00:02:10.260
in North Carolina than you might in Alaska. I know it gets warm somewhat there, but

00:02:10.260 --> 00:02:16.180
it's warm a lot in North Carolina. Yeah. We're in the mountains so we can have cool nights at least.

00:02:16.180 --> 00:02:21.780
Yeah. Lovely. My brother lives there and I think North Carolina is a really new place.

00:02:21.780 --> 00:02:29.860
It is. Yes. Yeah. Yeah. Yeah. So let's talk about this going from science to teaching

00:02:29.860 --> 00:02:36.100
to programming just a little bit, because I did a very similar journey. I think mine was accelerated in

00:02:36.100 --> 00:02:43.860
terms of its timeframe, but I was in grad school. I studied math and then taught math, calculus,

00:02:43.860 --> 00:02:52.020
linear algebra, those kinds of things at universities at GTA, and then kind of got into programming as

00:02:52.020 --> 00:02:56.900
part of it. And then I'm like, wow, this is really fun. How do I, how do I do more of this? You know what

00:02:56.900 --> 00:03:02.180
I mean? And after evaluating it, just academia didn't seem like a thing I really wanted to

00:03:03.460 --> 00:03:09.620
try to chase. And so I basically, I took one or two programming classes, but otherwise, other than

00:03:09.620 --> 00:03:17.300
that, I taught myself programming a number of years ago. That is kind of scary last century, let's say.

00:03:17.300 --> 00:03:25.220
And I don't know, I feel totally confident about it these days, but at first it was, you know, do I belong

00:03:25.220 --> 00:03:33.220
here? All the things seem hard. Yep. Should, what am I doing wrong? Should I have gotten a CS degree? I don't

00:03:33.220 --> 00:03:37.620
think any of those things are true. I think just, you know, as I learned hanging out with CS people,

00:03:37.620 --> 00:03:42.900
it was hard for them too. Like it's, but maybe talk a little bit about your journey, right? Because

00:03:42.900 --> 00:03:47.220
I'm sure it would be helpful to other people. There's many people out there who are doing something

00:03:47.220 --> 00:03:55.940
somewhat similar. Yeah. Questions about academia kind of steered me this way as well. I studied physics in

00:03:55.940 --> 00:04:01.140
undergrad because I started as chemical engineer because I had a great chemistry class in high school,

00:04:01.140 --> 00:04:06.820
school. But I found that engineering classes felt like being taught how to solve other people's

00:04:06.820 --> 00:04:12.900
problems. And my favorite class as an undergrad, or as a freshman was physics, because it was the only

00:04:12.900 --> 00:04:17.860
class that really seemed about truly trying to understand the world. And I love that. So that's

00:04:17.860 --> 00:04:22.900
what led me to focus on physics. And I was going to be a particle physicist, but I did not want to be--

00:04:22.900 --> 00:04:27.940
I wanted to spend some time outside Chicago or wherever. Yeah. Okay.

00:04:27.940 --> 00:04:35.140
Yeah. And I, yeah, when I was really young, I heard about atom smashers. I thought somebody like

00:04:35.140 --> 00:04:38.820
literally had hammers where they smashed atoms. So every stage--

00:04:38.820 --> 00:04:39.620
Very small hammers.

00:04:39.620 --> 00:04:44.820
Yes. Every stage I learned more about it, it was more and more fascinating. But I didn't want to be a

00:04:44.820 --> 00:04:52.740
student forever. And so I wanted to do something outside of being a student before pursuing the

00:04:52.740 --> 00:04:57.940
graduate work that would get to be--get me to be a particle physicist. So when I was looking what to do,

00:04:58.500 --> 00:05:04.900
I had been a tutor in undergrad, and I tutored calculus and physics. And I tutored those classes

00:05:04.900 --> 00:05:12.500
because I watched classmates hate--start to hate math and physics because of how they were taught. And

00:05:12.500 --> 00:05:18.580
that's the only reason people hated those topics. And it was really humbling because I was 18, 19 years

00:05:18.580 --> 00:05:23.380
old and tutoring people in their 30s and 40s who were doing mid-career changes.

00:05:23.380 --> 00:05:29.460
Speaking of feeling like you maybe don't necessarily belong there telling someone how to do something.

00:05:29.460 --> 00:05:33.060
When--but--but at the same time, you probably knew it really well, right?

00:05:33.060 --> 00:05:39.300
Yeah. Yeah. And I felt like I belonged, but it was really humbling as far as just sorting out like

00:05:39.300 --> 00:05:45.140
school systems and where to go. So anyway, that led me into teaching. And I thought I would just teach

00:05:45.140 --> 00:05:50.980
for a couple years and then go back to science. But I found that the challenge of reaching everybody in

00:05:50.980 --> 00:05:56.660
the classroom was as hard and as satisfying as hard science. And so I just love teaching.

00:05:56.660 --> 00:06:02.260
I love what it brings up for other people. And yeah, it's always stayed interesting.

00:06:02.260 --> 00:06:03.460
Yeah.

00:06:03.460 --> 00:06:10.820
For me--for me--for me--I'm sorry--for me to transition into more focus on programming was my father died.

00:06:10.820 --> 00:06:15.780
I've told this story a few times over the years about the origin of the book Python Crash Course. But my

00:06:15.780 --> 00:06:21.460
father died in 2011. And my mom asked--he was a programmer. That's how I first learned to program.

00:06:21.460 --> 00:06:26.500
My mom asked me to go through his computer and she found all these--or she asked me to go through his

00:06:26.500 --> 00:06:33.300
computer to see if there was anything worth keeping. And there wasn't. But for me, it was a really personal

00:06:33.300 --> 00:06:38.660
experience of seeing all these projects he had started that would never get finished. And I realized that I had a bunch of

00:06:38.660 --> 00:06:46.340
those programming projects as well. And so that kind of was a turning point for me to get me out of the

00:06:46.340 --> 00:06:52.500
practice of just building a bunch of side projects and started to focus on one or two real world projects

00:06:52.500 --> 00:06:54.100
that other people would benefit from.

00:06:54.100 --> 00:07:04.500
That's a great story. That's certainly one of the challenges of you can build a project and you can

00:07:04.500 --> 00:07:13.220
get it to run. But you're maybe halfway there getting it out to the world in a real world sort of way.

00:07:13.220 --> 00:07:20.020
You know, you've got all these challenges of, "Well, I need to pick a place to run my app."

00:07:20.020 --> 00:07:26.660
Wait a minute. Databases? Why are these migrations so hard? How do I do migrations? Like,

00:07:26.660 --> 00:07:30.580
I got the first one up and now I can't change it. It just breaks. It doesn't run anymore. And

00:07:31.140 --> 00:07:37.220
you know, there's just all these aspects and not even taking into account the stuff you got to add

00:07:37.220 --> 00:07:43.300
to go from a toy project to making it real. Logging, error handling, et cetera, et cetera, right?

00:07:43.300 --> 00:07:50.340
Yeah. I mean, this is all a good segue into the topic of today. I mean, Django Simple Deployed,

00:07:50.340 --> 00:07:56.420
to kind of put it out there for people who haven't heard of it, it's a package that automates

00:07:57.380 --> 00:08:02.180
Django deployments. So if your project runs locally on your computer and you get to the

00:08:02.180 --> 00:08:07.220
point where you want to make it public for other people to use, if you haven't already gone through

00:08:07.220 --> 00:08:11.460
the deployment process, for most people that's a cliff and they kind of just fall off. I spend all

00:08:11.460 --> 00:08:15.300
this time learning Django, all this time building this project they really care about, solves the

00:08:15.300 --> 00:08:21.700
problem, does it better than other people's work because, you know, it's new and whatnot. And then they

00:08:21.700 --> 00:08:28.260
go to deploy it and they find that they have to spend so much time reading a platform's documentation,

00:08:28.260 --> 00:08:35.060
tweaking their settings, adding this file or that file, and then kind of crossing your fingers and hoping

00:08:35.060 --> 00:08:41.460
that it works. Every time I've gone through that process, I've kind of thought to myself, this is all

00:08:41.460 --> 00:08:47.060
just boilerplate. Like we're just being told to everybody's being told to add the same settings, make the

00:08:47.060 --> 00:08:54.100
same modifications. And so I had that shower. Like automation. Yeah. Yeah. I had that shower thought

00:08:54.100 --> 00:09:00.900
of like, okay, how could we do this configuration from the Django side? So when we're just looking at

00:09:00.900 --> 00:09:07.460
the user's computer, you've got a project that's working locally. We know it works. How can we do

00:09:07.460 --> 00:09:13.300
all the configuration automatically so that you then just push your automatically correctly configured project

00:09:13.300 --> 00:09:18.500
to your hosting platform? So Django simple deploy does that you pick install on Django simple deploy.

00:09:18.500 --> 00:09:25.380
You need to have a plugin for the platform that you're using. So fly IO is a go to example.

00:09:25.380 --> 00:09:33.380
And then you add Django simple deploy to install that. And then there's two modes for this project work.

00:09:33.380 --> 00:09:38.340
The fully automated mode is easier to talk about because you run one command,

00:09:38.340 --> 00:09:44.740
Wifi manage.py deploy --automate all. And if you do that, and you have that platform CLI installed,

00:09:44.740 --> 00:09:52.580
it configures your project, makes a git commit and pushes your project and your project appears

00:09:52.580 --> 00:09:55.940
in a new browser window, which feels like magic.

00:09:55.940 --> 00:09:58.580
Yeah, that's kind of magical actually.

00:09:58.580 --> 00:10:10.420
Yeah, yeah. All right. So I want to talk about what platforms are supported. But before we do,

00:10:10.420 --> 00:10:17.700
maybe we could talk more broadly about just hosting platforms that you've considered that you see out

00:10:17.700 --> 00:10:24.740
there that people publish Django apps to. Right. On one hand, we've got really, really straightforward platforms.

00:10:24.740 --> 00:10:33.140
On the other, you can get as complicated as you want. Basically, you play the game of how many AWS

00:10:33.140 --> 00:10:37.220
services can you combine into one Django app? Yeah.

00:10:37.220 --> 00:10:44.180
You know, it's kind of like the obfuscated code contest. How much can you fit under one line that's

00:10:44.180 --> 00:10:46.660
unlegible, but still does the thing or whatever, right?

00:10:46.660 --> 00:10:54.500
Yeah. You know, we started this with a conversation about our backgrounds. And so kind of weaving this

00:10:54.500 --> 00:11:00.180
for a little bit back into that background story. I do remember one of my transitions to doing more

00:11:00.180 --> 00:11:06.900
professional programming work was when I was teaching, I would write programs to address inefficiencies and

00:11:06.900 --> 00:11:13.460
difficulties we had in our school for our staff. And so I remember like exactly this, getting something that

00:11:13.460 --> 00:11:21.140
like automated report card generation for our staff and I got it working on my computer. So like,

00:11:21.140 --> 00:11:26.500
for me writing report cards was so much easier than for everybody else. And so I learned Django and like,

00:11:26.500 --> 00:11:31.460
cool, I can share this with everybody else. And I tried to deploy it and it just, I could not do it.

00:11:31.460 --> 00:11:56.020
It just, I fell apart. And I sort of figured it out. So my first deployment platform was a laptop in a closet in my school, connected directly to the school network. So the deployment worked for people on our network. And it was only out of the kindness of our IT staff that would allow me to do that. Clearly not a solution for most people.

00:11:56.020 --> 00:11:57.700
And very limited.

00:11:57.700 --> 00:12:01.700
This is really hard to deploy. Let me just deploy my machine to the school.

00:12:01.700 --> 00:12:04.900
Yes. Yes. Update. Let me go to that closet.

00:12:04.900 --> 00:12:07.460
Yeah. Yeah. Yeah. Yeah.

00:12:07.460 --> 00:12:10.900
Yeah. I'm gonna be in here for a few hours. I'm programming on the server.

00:12:10.900 --> 00:12:21.220
Yeah. So, okay. Heroku is the first one to talk about because Heroku was one of the first platforms that really automated a lot of the DevOps work.

00:12:21.220 --> 00:12:22.100
Mm-hmm.

00:12:22.100 --> 00:12:29.140
And allowed us the classic sales pitch for Heroku was run, get push Heroku main and your project is live.

00:12:29.140 --> 00:12:29.940
Yeah.

00:12:29.940 --> 00:12:36.020
There's always a bit more to it than that, including that configuration to make your project work on Heroku.

00:12:37.300 --> 00:12:44.420
So the platforms I start thinking about are the ones that manage the DevOps aspect for you. Heroku,

00:12:44.420 --> 00:12:52.740
fly to IO, platform.sh, Python Anywhere is in there.

00:12:52.980 --> 00:13:01.060
Yeah. So to take a step back even further, this project started because I used Heroku for a while.

00:13:01.060 --> 00:13:09.540
In Python Crash Course, the first edition, I taught people, I walked people through deploying a Django project to Heroku.

00:13:10.100 --> 00:13:16.420
It's the only part of the book that felt like I'm not really teaching anything. I'm just telling people to write certain things and add certain files.

00:13:16.420 --> 00:13:23.540
A bit of explanation about what it does, but mostly it's, you know, make these changes and cross your fingers that you type them all right.

00:13:24.980 --> 00:13:34.900
So I wrote a Heroku build pack that did the configuration automatically, but it did it on Heroku servers.

00:13:34.900 --> 00:13:42.180
So you'd specify this build pack, it would load that build pack onto Heroku servers, and then all your configuration changes would happen on their end.

00:13:42.180 --> 00:13:43.300
And so that-

00:13:43.300 --> 00:13:44.580
Tell us about it. What is a build pack?

00:13:44.580 --> 00:13:49.860
I'm not sure that I can tell you. It's basically, I said it, my-

00:13:49.860 --> 00:13:53.700
I'll tell you, I've never built a build pack myself and I've deployed a lot of Python, so.

00:13:54.260 --> 00:14:07.220
Yeah. The short, my short description is it's a set of programs, body of code that configures your project for running on that specific platform.

00:14:07.220 --> 00:14:08.260
Got it. Okay.

00:14:08.260 --> 00:14:16.020
And so typically it's, it's generic and it's not targeting, it's not trying to do any changes to your, your project.

00:14:16.020 --> 00:14:19.540
We won't go further. I'll say something wrong.

00:14:19.540 --> 00:14:20.580
Yeah, yeah, sure. Yeah, yeah. Sounds good.

00:14:20.580 --> 00:14:24.100
But the takeaway for that is it felt like doing Heroku's work for them.

00:14:24.980 --> 00:14:33.060
And so it was nice for anybody trying to push Django to Heroku, but that, that boundary of like, what's our work? What's their work? Are we doing work free for them?

00:14:33.060 --> 00:14:38.100
That's an interesting question. And it really felt like it was skewed towards doing their work.

00:14:39.540 --> 00:14:55.860
Right. Well, I've done it once or twice, deployed an app to Heroku, never for real work, but to, you know, play around with it and sort of check it out because Heroku was definitely a darling of the Python space.

00:14:55.860 --> 00:15:00.500
And certainly of the Python tutorials, right?

00:15:00.500 --> 00:15:04.260
Because for a long time they had a free tier.

00:15:04.260 --> 00:15:13.620
And so everybody who needed to deploy something was like, here's how you put it on Heroku to sort of complete the loop and get it out there in the world. Right.

00:15:15.780 --> 00:15:24.020
Right. And then, yeah, you know, a testament to Heroku is how long it has worked without a lot of attention from them.

00:15:24.500 --> 00:15:33.620
And so they, they lost a lot of trust in the community, not just from doing away with their free tier.

00:15:33.620 --> 00:15:38.900
It's really hard to maintain a free tier. It's just puts a big target on the platform for abuse.

00:15:39.860 --> 00:15:48.180
But it's, it's about some reliability issues and communication issues around, around issues on the platform.

00:15:48.180 --> 00:15:55.460
So there was an exodus from Heroku for a while. And I was, I was working on this automation problem for a while.

00:15:55.460 --> 00:16:04.660
And I had that shower thought of like, okay, all that work that I'm doing through the build pack on Heroku's end could be done through a management command with Njango.

00:16:04.660 --> 00:16:10.900
So you can do all that, the changes to your project on your computer, if you know what to do.

00:16:10.900 --> 00:16:17.300
So internally, Django simple deploy is just a single management command that deploy command.

00:16:17.300 --> 00:16:24.660
And when you run that command, based on the plugin that you have installed, it knows which platform you're targeting.

00:16:24.660 --> 00:16:31.380
And then basically I've just spent hours pouring over the documentation for a few different platforms.

00:16:31.860 --> 00:16:39.140
And so we pick up the platform that you're trying to deploy to make all the changes necessary for a basic initial deployment to that platform.

00:16:39.140 --> 00:16:42.420
And then there's two ways you can, you can push your project.

00:16:42.420 --> 00:16:52.100
The fully automated mode makes it puts all those changes into a single commit, runs that platform's deploy command and pops up your project in a new, a new window.

00:16:52.100 --> 00:16:53.540
Yeah.

00:16:53.540 --> 00:16:54.020
And it does.

00:16:54.020 --> 00:16:55.060
Go ahead.

00:16:55.060 --> 00:17:00.020
The trends, the transport mechanism is get right.

00:17:00.020 --> 00:17:02.420
Good question.

00:17:02.420 --> 00:17:03.780
Not necessarily.

00:17:03.780 --> 00:17:04.820
Okay.

00:17:04.820 --> 00:17:08.980
The transport mechanism is whatever that platform uses.

00:17:08.980 --> 00:17:09.860
Okay.

00:17:09.860 --> 00:17:17.380
So for fly, Django simple deploy makes the configuration changes for your project.

00:17:17.380 --> 00:17:20.580
And then it calls the fly deploy command.

00:17:20.580 --> 00:17:26.100
So I don't even have to know what fly deploy is using behind the scenes.

00:17:26.100 --> 00:17:32.660
Because you, you have the CLI installed simple deploy calls that, that deploy command.

00:17:33.140 --> 00:17:42.100
And then it's, for Heroku, when it gets to that deployment stage, in the automated mode, Django simple deploy runs, get push Heroku main.

00:17:42.100 --> 00:17:45.860
And so it's, it's one of the nice things about this project.

00:17:45.860 --> 00:17:53.220
And part of the reason it has taken so long to get to 1.0 is, it is quite adaptable to different approaches.

00:17:55.300 --> 00:17:55.540
Yeah.

00:17:55.540 --> 00:17:56.580
That's, that's pretty wild.

00:17:56.580 --> 00:17:59.700
Because you're just automating the CLI for that platform, right?

00:17:59.700 --> 00:18:02.020
Right.

00:18:02.020 --> 00:18:09.540
and Chris, Chris is commenting, there should be one obvious way to deploy your Django project to a service.

00:18:09.540 --> 00:18:11.300
Yeah, he's right.

00:18:11.300 --> 00:18:19.460
The nice thing about this is, Django simple deploy becomes this abstraction layer between your work and the platform.

00:18:20.020 --> 00:18:24.580
So it creates a nice consistent interface for deploying to a wide range of platforms.

00:18:24.580 --> 00:18:32.980
And when, when a platform inevitably changes their deployment process, or configuration requirements,

00:18:32.980 --> 00:18:44.340
as long as one person makes that update to the Django simple deploy plugin, everybody else gets to just keep using that consistent interface for how you do your initial deployment, which is really, really nice.

00:18:45.140 --> 00:18:46.340
Yeah, it is really nice.

00:18:46.340 --> 00:18:55.940
You don't have to worry about all the details and also the ability to move without losing all of your expertise, you know?

00:18:55.940 --> 00:18:57.060
Right.

00:18:57.060 --> 00:19:07.380
this is where it gets really fun to talk about this project because, you know, people think when the people first hear about this project, they think it's just for beginners, right?

00:19:07.380 --> 00:19:09.220
It's just for people who already know deployment.

00:19:09.220 --> 00:19:10.580
yeah.

00:19:11.140 --> 00:19:14.500
But, where was I going with that?

00:19:14.500 --> 00:19:23.940
oh, so thinking about writers, authors, myself first, but content creators, tutorial writers, presenters.

00:19:23.940 --> 00:19:35.380
If you're, wanting to include deployment as part of your, your process that you're teaching people, then a lot of people have chosen not to do that.

00:19:35.380 --> 00:19:42.660
Because as soon as you include deployment, you're now tied to that platforms, stability.

00:19:42.660 --> 00:19:46.740
As soon as they change their process, you've got to update your materials or it's broken.

00:19:46.740 --> 00:19:49.220
And, that's not appealing.

00:19:49.220 --> 00:20:03.700
So for somebody who uses Django simple deploy in their tutorial, again, as long as one of us keeps the plugin updated to work on that platform, your, your learning resources stays the same.

00:20:03.700 --> 00:20:06.420
That is really nice.

00:20:06.420 --> 00:20:06.420
Yeah.

00:20:06.420 --> 00:20:12.020
Whether you're teaching a college class or you're just writing something for your blog, it is really nice.

00:20:12.020 --> 00:20:12.420
Yeah.

00:20:12.420 --> 00:20:14.740
And I think about the Django girls workshops.

00:20:14.740 --> 00:20:21.220
And so, you know, part of that, the goal of that conclusion of, of deploying your project, it's just to see a live.

00:20:21.220 --> 00:20:22.980
Like, why are we doing this if we can't see a live?

00:20:22.980 --> 00:20:27.140
you don't necessarily want to spend a whole bunch of time focused on deployment.

00:20:27.140 --> 00:20:31.380
And so if you can kind of really crunch that into like, okay, we're going to run these commands.

00:20:31.380 --> 00:20:33.380
We have a working deployment.

00:20:33.380 --> 00:20:36.420
It's not about hiding deployment from people.

00:20:36.420 --> 00:20:42.340
Because one of the coolest parts of this project is that it contains all those configuration changes in a single gate command.

00:20:42.340 --> 00:20:47.300
Is there a verbose mode where you get it to show all the little steps it's doing and stuff?

00:20:47.860 --> 00:20:48.260
Yeah.

00:20:48.260 --> 00:20:48.340
Yeah.

00:20:48.340 --> 00:20:51.620
it is, verbose by default.

00:20:51.620 --> 00:21:04.820
So you get to basically it's, it streams and dumps all the platforms output, as it's deploying, which is kind of important because if you don't do that, you just see this blank screen for two, three, seven minutes.

00:21:04.820 --> 00:21:04.980
Yeah.

00:21:04.980 --> 00:21:05.060
Yeah.

00:21:05.060 --> 00:21:06.020
Just that they're spinning.

00:21:06.020 --> 00:21:07.060
Yeah.

00:21:07.060 --> 00:21:10.820
but to slow this down, take a step back for a minute.

00:21:10.820 --> 00:21:21.220
I've, I've mentioned the automated mode where you include this --automate all that's easiest to talk about because it, it boils down this deployment process to three steps.

00:21:21.220 --> 00:21:29.380
I don't actually recommend that for most people because it, it, it makes a, git commit for you, runs a deploy command.

00:21:29.380 --> 00:21:32.540
And maybe you want to have a little more control about that process.

00:21:33.100 --> 00:21:39.260
There's a configuration only mode, which is every, every bit is helpful.

00:21:39.260 --> 00:21:42.300
but it lets you kind of take a little more control.

00:21:42.300 --> 00:21:50.860
And so what you do for most platforms, you have to create a resource, basically a deployed project, an empty project on that platform.

00:21:50.860 --> 00:22:01.180
And then you run deploy, and Django simple deploy recognizes the resource you just created on that platform, configures your project.

00:22:01.660 --> 00:22:03.340
and, and then it stops.

00:22:03.340 --> 00:22:12.380
And so you now have a configured project and you can run, get diff and you get to see all the configuration that were changes that were made on your behalf.

00:22:12.380 --> 00:22:14.860
You know, you see, you don't have to just trust it.

00:22:14.860 --> 00:22:15.740
Yeah.

00:22:15.740 --> 00:22:16.420
Yeah.

00:22:16.540 --> 00:22:21.180
So when I shared this on, the Django discord yesterday, somebody was excited about it.

00:22:21.180 --> 00:22:25.820
And then I said something about that commit that was made and they said, Oh, it makes commits for you.

00:22:25.820 --> 00:22:27.420
Oh, I'm not sure I want to use that.

00:22:27.420 --> 00:22:28.140
Is it okay.

00:22:28.140 --> 00:22:32.140
You can, you can do the longer mode where you get to review that.

00:22:32.140 --> 00:22:37.020
and then you can, you can see all the files that were created for that platform.

00:22:37.020 --> 00:22:40.540
You can see the settings changes that were made to make your project work.

00:22:40.540 --> 00:22:43.420
and then you can choose to make that commit.

00:22:43.420 --> 00:22:45.020
you can choose to push it.

00:22:45.020 --> 00:22:45.420
Yeah.

00:22:45.420 --> 00:22:46.860
or revert it.

00:22:46.860 --> 00:22:51.180
Even if you use the automated mode, is still all the configuration is one commit.

00:22:51.180 --> 00:22:54.780
And so you can just revert that commit and you're right back to your, your project.

00:22:54.780 --> 00:22:57.020
I'll throw one more piece in there right away.

00:22:57.020 --> 00:23:02.540
One of the priorities of the project is that it does not change the local behavior of your project.

00:23:02.540 --> 00:23:09.340
And so when I run the test suite, it tests that all the configuration changes are correct for

00:23:09.340 --> 00:23:16.540
the target platform, but it also runs run server again, locally and make sure that we haven't,

00:23:17.260 --> 00:23:20.620
impacted, the local, local running of your project.

00:23:20.620 --> 00:23:21.660
Oh, interesting.

00:23:21.660 --> 00:23:23.660
It'll run it to make sure it basically starts.

00:23:23.660 --> 00:23:26.460
Nice.

00:23:26.460 --> 00:23:27.900
Yeah.

00:23:27.900 --> 00:23:28.140
Yeah.

00:23:28.140 --> 00:23:31.500
You know, this, automated versus config sort of deal.

00:23:31.500 --> 00:23:37.900
It, it reminds me a little bit of how maybe DBAs feel about ORMs.

00:23:37.900 --> 00:23:43.980
You know, like they're, they're like, Oh, you can't just let, let it run arbitrary queries against

00:23:43.980 --> 00:23:44.620
my database.

00:23:44.620 --> 00:23:45.500
Like, right.

00:23:45.500 --> 00:23:47.420
How do we know it's doing the right thing?

00:23:47.420 --> 00:23:53.180
And I'm sure you feel that way for a while, you know, but eventually, all right, we've,

00:23:53.180 --> 00:23:54.460
we've reviewed them.

00:23:54.460 --> 00:23:55.180
They're fine.

00:23:55.180 --> 00:23:55.420
Right.

00:23:55.420 --> 00:23:59.900
So maybe this config thing you do a couple of times, you're like, yeah, that's what I would

00:23:59.900 --> 00:24:00.380
do anyway.

00:24:00.380 --> 00:24:01.820
Just run it.

00:24:01.820 --> 00:24:02.060
Right.

00:24:02.060 --> 00:24:02.540
Yeah.

00:24:02.540 --> 00:24:03.580
What else are you going to do?

00:24:03.580 --> 00:24:07.740
You're probably going to create a script that does the things you expect it to do anyway

00:24:07.740 --> 00:24:10.380
for yourself as a bash script or something.

00:24:10.380 --> 00:24:10.700
Right.

00:24:10.700 --> 00:24:13.740
And so might as well be a Python script.

00:24:13.740 --> 00:24:15.100
Yeah.

00:24:15.100 --> 00:24:19.340
I mean, it's funny hearing you talk about this because this project started as a pile of bash

00:24:19.340 --> 00:24:19.740
scripts.

00:24:19.740 --> 00:24:22.060
And so, yeah, yeah.

00:24:22.060 --> 00:24:23.820
I got a pile of bash scripts on my server.

00:24:23.820 --> 00:24:24.300
They do things.

00:24:24.300 --> 00:24:25.580
Yeah.

00:24:25.580 --> 00:24:31.580
One of the pre 1.0 tasks was a long issue that was just about converting all these shell

00:24:31.580 --> 00:24:33.340
scripts to, to Python.

00:24:33.340 --> 00:24:36.940
And mostly that was about creating, making this work cross platform.

00:24:37.660 --> 00:24:41.100
So it's basically taken me like four years to get this to 1.0.

00:24:41.100 --> 00:24:46.780
And it's that 80, 20 principle turned into like 595 principle.

00:24:46.780 --> 00:24:50.700
Yeah.

00:24:50.700 --> 00:24:50.700
Yeah.

00:24:50.700 --> 00:24:55.020
so another reason, so a good thing to, to kind of move into.

00:24:55.020 --> 00:25:02.300
Another reason it took so long to get to 1.0 was originally, this was all one library.

00:25:02.300 --> 00:25:03.980
And so it was just Django simple deploy.

00:25:04.460 --> 00:25:09.980
And originally you would run manage.py deploy --platform, fly.io.

00:25:09.980 --> 00:25:16.940
And so the entire project contained all the code for all the different platforms.

00:25:16.940 --> 00:25:23.260
and that felt better than the original project, just targeting Heroku because you have

00:25:23.260 --> 00:25:25.980
choice, but it felt like a nightmare for maintenance.

00:25:25.980 --> 00:25:26.460
Yeah.

00:25:26.460 --> 00:25:33.500
It's anytime any project changes, it's gonna need an update and it's just gonna grow exponentially.

00:25:34.060 --> 00:25:34.220
Yeah.

00:25:34.220 --> 00:25:37.740
It becomes combinatorially complex in terms of dependencies.

00:25:37.740 --> 00:25:38.060
Yeah.

00:25:38.060 --> 00:25:44.140
Which is not a good, order of magnitude or, and, yeah, it's not good.

00:25:44.140 --> 00:25:45.740
Yeah.

00:25:45.740 --> 00:25:52.620
So I had some people kind of, you know, very kindheartedly nudging me towards just doing a

00:25:52.620 --> 00:25:55.740
1.0 release to get over that, that fear of a 1.0 release.

00:25:56.460 --> 00:26:03.660
but it was always about having, I had a vision, that the mature version of this project should be

00:26:03.660 --> 00:26:04.460
plugin based.

00:26:04.460 --> 00:26:10.140
so the core project Django simple deploy is small, it's platform agnostic.

00:26:10.140 --> 00:26:15.820
All it does is inspect your project, inspect your system, and then hand out the rest of the

00:26:15.820 --> 00:26:16.540
work to a plugin.

00:26:16.540 --> 00:26:23.260
And so currently there's a plugin targeting fly.io plugin for platform.sh platform for Heroku.

00:26:23.820 --> 00:26:31.260
I have a proof of concept, plugin for code red and I'm working on a proof of concept for digital

00:26:31.260 --> 00:26:31.660
ocean.

00:26:32.940 --> 00:26:34.540
awesome.

00:26:34.540 --> 00:26:35.420
Yeah.

00:26:35.420 --> 00:26:37.340
So many cool things to talk about with this.

00:26:37.340 --> 00:26:38.140
yeah.

00:26:38.140 --> 00:26:38.300
Yeah.

00:26:38.300 --> 00:26:38.540
Yeah.

00:26:38.540 --> 00:26:44.860
Before we go, I do want to maybe just, go through some of these, these hosts and let,

00:26:44.860 --> 00:26:50.620
let you give a talk about maybe why they're included, which ones are there's stuff out there,

00:26:50.620 --> 00:26:51.820
obviously that's not included.

00:26:51.820 --> 00:26:52.780
Why is it not included?

00:26:52.780 --> 00:26:53.420
Right.

00:26:53.420 --> 00:26:59.820
So Heroku obvious, especially when you started, when they had the free tier and stuff like that.

00:26:59.820 --> 00:27:02.300
I, I kind of want to get them.

00:27:02.300 --> 00:27:03.740
I know people are angry at them.

00:27:03.740 --> 00:27:07.500
I understand that, but I also, I kind of want to give them a little bit of a pass, like

00:27:07.500 --> 00:27:14.060
offering free hosting to the world where people just put up malware and other badness and use

00:27:14.060 --> 00:27:20.060
the trust of your domain to sort of leverage, leverage that is it's challenging.

00:27:20.060 --> 00:27:25.020
And I don't know, I understand people are frustrated with them, but that's, that's tough.

00:27:25.020 --> 00:27:29.820
So Heroku platform as a service, you push your stuff up.

00:27:29.820 --> 00:27:31.180
You say, here's my code.

00:27:31.180 --> 00:27:32.380
Here's how you started.

00:27:32.380 --> 00:27:33.340
Run it for me, please.

00:27:33.340 --> 00:27:34.940
There's not a lot of Linux.

00:27:34.940 --> 00:27:38.300
There's not a lot of shell, right?

00:27:38.300 --> 00:27:39.420
They kind of take care of that for you.

00:27:39.420 --> 00:27:39.660
Yes.

00:27:39.660 --> 00:27:41.580
They do.

00:27:41.580 --> 00:27:42.940
And there's still, yeah.

00:27:42.940 --> 00:27:48.620
I've had conversations with people who, with founders of a number of these platforms

00:27:48.620 --> 00:27:51.260
over the years, because it's always interesting to talk about this.

00:27:51.260 --> 00:27:55.900
and platforms would love to see an easier way to deploy Django projects.

00:27:55.900 --> 00:28:01.180
one of those founders said something really insightful at one point, and I appreciated the

00:28:01.180 --> 00:28:01.820
honesty.

00:28:01.820 --> 00:28:04.300
He said, we're all trying to be second best for beginners.

00:28:04.300 --> 00:28:11.340
because if you, if you draw that crowd, you're drawing more support than the benefit in the short term.

00:28:11.340 --> 00:28:15.100
And so for, yeah, for a long time, Heroku paid that cost.

00:28:15.100 --> 00:28:17.660
they were willing to be the go-to for everybody.

00:28:18.140 --> 00:28:21.260
So there's still a lot of projects running long-term on Heroku.

00:28:21.260 --> 00:28:24.220
I know some important Python ones that are there.

00:28:24.220 --> 00:28:24.860
Yeah.

00:28:24.860 --> 00:28:25.100
Yeah.

00:28:25.100 --> 00:28:26.700
Yeah.

00:28:26.700 --> 00:28:27.340
Okay.

00:28:27.340 --> 00:28:33.420
And then we got fly.io and platform.sh, you know, what's the story of these?

00:28:33.420 --> 00:28:35.820
Honestly, I haven't used either of them.

00:28:35.820 --> 00:28:36.620
I've heard of them.

00:28:36.620 --> 00:28:37.180
I haven't used them.

00:28:37.180 --> 00:28:44.460
So the selling principle for selling point for fly.io is they're an edge-based platform.

00:28:44.460 --> 00:28:47.820
And so they take, yeah, they take your

00:28:48.380 --> 00:28:54.220
if I'm saying this right, they take your project and they, they put, push your application

00:28:54.220 --> 00:28:55.980
code to a bunch of different nodes.

00:28:55.980 --> 00:28:58.540
And so your code is kind of like a CDN, right?

00:28:58.540 --> 00:28:59.660
Yeah.

00:28:59.660 --> 00:28:59.820
Yeah.

00:28:59.820 --> 00:29:01.580
CDN for your application code.

00:29:01.580 --> 00:29:04.540
And so your code is close to your end users.

00:29:04.540 --> 00:29:09.420
And so I don't need it, but they've been, they've built it well enough that I can just

00:29:09.420 --> 00:29:11.260
push a project there and it works.

00:29:11.260 --> 00:29:14.460
And I'm a big fan of, you know, if your project does what you needed to,

00:29:14.460 --> 00:29:16.700
is it good question?

00:29:16.700 --> 00:29:17.340
Is it good enough?

00:29:17.340 --> 00:29:19.580
And so it's been good enough for me for a lot.

00:29:19.580 --> 00:29:22.940
And I know it's targeting some more complex use cases.

00:29:22.940 --> 00:29:24.940
I have so many questions.

00:29:24.940 --> 00:29:25.660
Yeah.

00:29:25.660 --> 00:29:27.420
It's so interesting.

00:29:27.420 --> 00:29:31.180
Well, I just think the first thing that comes to mind is what about databases, right?

00:29:31.180 --> 00:29:36.940
If they, if your app is running, yeah, you gotta, you gotta have some way to like correlate

00:29:36.940 --> 00:29:40.940
and centralize and make the consistency of the database and all that work.

00:29:40.940 --> 00:29:41.100
Yeah.

00:29:41.100 --> 00:29:41.980
Yeah.

00:29:41.980 --> 00:29:45.260
They've got some fantastic people working for them and they have some fantastic blog posts.

00:29:45.260 --> 00:29:52.220
So they've done really interesting cutting edge work around distributed SQLite, SQLite.

00:29:52.220 --> 00:29:53.260
Yeah.

00:29:53.260 --> 00:29:53.340
Yeah.

00:29:53.340 --> 00:29:54.700
Databases.

00:29:55.340 --> 00:29:58.940
And so, yeah, they are quite familiar with that question and they-

00:29:58.940 --> 00:29:59.500
I'm sure they are.

00:29:59.500 --> 00:30:02.060
I've answered it, have answered it well and they are entering it well.

00:30:02.940 --> 00:30:07.100
If you can answer that question well, then you can get some stuff that flies, you know?

00:30:07.100 --> 00:30:07.100
Yeah.

00:30:07.100 --> 00:30:09.420
I mean, I guess, hence the name.

00:30:09.420 --> 00:30:11.260
I didn't even do that on purpose.

00:30:11.260 --> 00:30:21.260
I've been using bunny.net, which is a really nice, really nice CDN platform, but just for static content,

00:30:21.260 --> 00:30:21.580
you know?

00:30:21.580 --> 00:30:28.460
Not for, not for application code that talks to the database.

00:30:28.460 --> 00:30:34.620
And I understand how you would replicate the database, but the challenge is if you have chatty rights,

00:30:35.180 --> 00:30:35.500
right?

00:30:35.500 --> 00:30:42.460
You know, if you're- all of a sudden you're pushing your database away from your app,

00:30:42.460 --> 00:30:45.980
which has its own sort of latency and stuff, but what an interesting idea.

00:30:45.980 --> 00:30:46.540
Okay.

00:30:46.540 --> 00:30:48.700
And Platform.sh?

00:30:48.700 --> 00:30:56.380
Platform.sh started as a PHP- I believe started as a PHP-only platform, but then expanded to

00:30:56.380 --> 00:30:59.420
support other languages.

00:30:59.420 --> 00:31:03.180
And so they had been sponsors of DjangoCon for a long time.

00:31:04.060 --> 00:31:07.340
And I really enjoy working with their platform.

00:31:07.340 --> 00:31:10.060
Deployment is pretty straightforward.

00:31:10.060 --> 00:31:18.060
And then, you know, one of the things I look for in these platform as a service is, so once you push it,

00:31:18.060 --> 00:31:21.180
I'm very happy to have them managing the DevOps work.

00:31:21.180 --> 00:31:25.340
I also want to be able to like get into the server and run commands and see what's going on.

00:31:25.340 --> 00:31:27.260
And so they make it easy to do that.

00:31:27.260 --> 00:31:27.980
Yeah.

00:31:27.980 --> 00:31:31.900
If things are not starting or they're crashing or something, sometimes just go, just

00:31:32.860 --> 00:31:36.460
30 seconds at a glance, it's a log file or something.

00:31:36.460 --> 00:31:37.420
Oh yeah.

00:31:37.420 --> 00:31:40.700
Or, or maybe why is that file?

00:31:40.700 --> 00:31:41.900
That file is actually missing.

00:31:41.900 --> 00:31:42.540
Oh, that's weird.

00:31:42.540 --> 00:31:43.580
Let me see if I can just get that.

00:31:43.580 --> 00:31:46.300
And then, then you're back to like, okay, back to the platform as a service and you're good.

00:31:46.300 --> 00:31:46.620
You know?

00:31:46.620 --> 00:31:47.660
Yeah.

00:31:47.660 --> 00:31:51.820
And that's the, you know, platform as a service certainly works for people who know nothing about,

00:31:51.820 --> 00:31:54.300
you know, hopping into a server and running commands.

00:31:54.300 --> 00:31:57.660
But they're also for like people who know how to do that and don't want to do that.

00:31:58.140 --> 00:32:05.420
And so a service like platform.sh that makes it easy to do both is also an, I see it as an onboarding

00:32:05.420 --> 00:32:12.620
for people who, who have something worth deploying, don't know DevOps yet, but letting them hop in and

00:32:12.620 --> 00:32:13.580
start to do that.

00:32:13.580 --> 00:32:14.380
It's pretty interesting.

00:32:14.380 --> 00:32:15.260
Yeah.

00:32:15.260 --> 00:32:16.060
It's very interesting.

00:32:16.780 --> 00:32:17.340
Okay.

00:32:17.340 --> 00:32:24.140
So I can run Python manage.py deploy --automate all, and that will take my app and put

00:32:24.140 --> 00:32:26.860
it into whatever destination you pick, right?

00:32:26.860 --> 00:32:27.580
Of those three.

00:32:27.580 --> 00:32:27.820
Right.

00:32:27.820 --> 00:32:33.420
For these platforms as a service, a lot of times you have to have a database.

00:32:33.420 --> 00:32:41.100
Sometimes that's a managed Postgres or whatever you might have data that has to import initially,

00:32:41.100 --> 00:32:45.420
you know, if you're like, well, here's all the counties in the United States and we have to query

00:32:45.420 --> 00:32:45.980
them for stuff.

00:32:45.980 --> 00:32:51.340
So we preload that at first or how does all that get connected and, and happen?

00:32:51.340 --> 00:32:52.460
Right.

00:32:52.460 --> 00:32:57.500
If I had like no database, I just have a pure Django app that just runs Python.

00:32:57.500 --> 00:32:59.020
Easy.

00:32:59.020 --> 00:33:02.780
I see how this works, but then there's like, there's settings and stuff here that vary by

00:33:02.780 --> 00:33:04.140
production versus dev.

00:33:04.140 --> 00:33:06.220
Yeah.

00:33:06.220 --> 00:33:06.940
Fun question.

00:33:08.540 --> 00:33:13.100
So I've done most of the development work on Django simple deploy.

00:33:13.100 --> 00:33:16.460
I've actually run sprints at several picons and several Django cons.

00:33:16.460 --> 00:33:21.420
And this project has brought together like eight to 15 people at each sprint.

00:33:22.220 --> 00:33:23.260
It draws some interest.

00:33:23.260 --> 00:33:27.580
And so I, the project would not be where it is without those contributions.

00:33:27.580 --> 00:33:33.100
A lot of those people have made some contributions and, you know, not done a whole lot outside of the

00:33:33.100 --> 00:33:37.260
conferences, but that whole group of people has been available to just bounce ideas off of.

00:33:37.900 --> 00:33:42.300
And so a lot of the pre 1.0 work was also like me getting rid of all the baggage.

00:33:42.300 --> 00:33:46.700
It just kind of only made sense to me, or you really need to have, you know, years of contact

00:33:46.700 --> 00:33:48.060
with the project to make sense of it.

00:33:48.060 --> 00:33:53.180
And so now it's at a place where like the structure is pretty consistent.

00:33:54.380 --> 00:33:59.340
And so one of the things I'm looking forward to is, you know, somebody else who knows fly.io

00:33:59.340 --> 00:34:04.940
managing the fly.io plugin more than me.

00:34:04.940 --> 00:34:09.340
And so they don't need to go deal with Django simple deploy.

00:34:09.340 --> 00:34:13.420
They can focus on the parts of the script that do the things you were just talking about.

00:34:13.420 --> 00:34:20.540
So all the configuration has been largely my choice, you know, okay, on Heroku, we'll choose this

00:34:20.540 --> 00:34:24.780
Postgres instance because it's cheaper because it lets people get started.

00:34:24.780 --> 00:34:33.260
It's possible for somebody to either take the Heroku plugin and add a few more CLI flags to give

00:34:33.260 --> 00:34:37.580
you a bit more choice or just write your own Heroku plugin.

00:34:37.580 --> 00:34:42.940
And so right now the plugin for Heroku is dsd-Heroku.

00:34:42.940 --> 00:34:50.220
Somebody else could do like dsd-Heroku-large and it's meant for scaling large or deploying

00:34:50.620 --> 00:34:52.540
large scale Heroku projects.

00:34:52.540 --> 00:34:56.780
And so that's not a, I don't want to do that work.

00:34:56.780 --> 00:34:58.380
They should write their own.

00:34:58.380 --> 00:35:02.380
That's if you have a use case that you know well and you want to automate.

00:35:02.380 --> 00:35:11.100
Simple deploy just becomes this again, abstraction layer for, you know, you have a consistent interface for

00:35:11.100 --> 00:35:14.300
running that deployment from, from within Django.

00:35:15.340 --> 00:35:15.580
Yeah.

00:35:15.580 --> 00:35:19.500
There's a nice plugin model, which really opens things up.

00:35:19.500 --> 00:35:26.460
I suppose the answer probably the short answer is probably, well, the Django ORM will create the

00:35:26.460 --> 00:35:27.660
database structure for you.

00:35:27.660 --> 00:35:29.420
If you could just tell it where the database is.

00:35:29.420 --> 00:35:30.620
Right.

00:35:30.620 --> 00:35:30.940
Right.

00:35:30.940 --> 00:35:39.260
And I know certain apps I've built, if they have data that has to be preloaded, I'll just have a

00:35:39.260 --> 00:35:42.140
little check like, hey, is this table got any data in it?

00:35:42.140 --> 00:35:45.420
If not, run the load up the database the first time.

00:35:45.420 --> 00:35:48.380
Otherwise, assume it's all good and keep going.

00:35:48.380 --> 00:35:50.140
And that pretty much handles it.

00:35:51.740 --> 00:35:52.460
Yeah.

00:35:52.460 --> 00:35:55.660
I think, you know, there's kind of two directions I'll take this.

00:35:55.660 --> 00:36:01.420
You know, a short list of the projects I've done over the years, they tend to be smaller,

00:36:01.420 --> 00:36:03.020
but they tend to be impactful.

00:36:03.020 --> 00:36:07.740
So one project, automated report cards for students.

00:36:07.740 --> 00:36:13.180
I used to work with struggling students, students who were plenty smart, but life had happened and they

00:36:13.180 --> 00:36:15.340
had gotten off track with, with school.

00:36:15.340 --> 00:36:21.260
And so they just had holes in their, in their, in their graduation requirements.

00:36:21.260 --> 00:36:26.540
And so those students wanted to graduate, but they didn't know where to focus their, their efforts.

00:36:26.540 --> 00:36:31.660
And so looking at a transcript was really hard because it's just a bunch of like letters and numbers.

00:36:31.660 --> 00:36:37.740
So I wrote a program that automated a generation of visual transcripts.

00:36:37.740 --> 00:36:42.140
So I'd read their text-based transcript and then give them basically a chart with a bunch of like gauges.

00:36:42.140 --> 00:36:46.060
And you just look at it in 30 seconds, know which classes you needed to focus on.

00:36:46.060 --> 00:36:50.620
And it also went from deficiencies to strengths.

00:36:50.620 --> 00:36:53.980
So traditionally we talked to students who are struggling and think you're, you need to do this.

00:36:53.980 --> 00:36:54.700
You need to do that.

00:36:54.700 --> 00:36:59.660
You could see where they needed to do their work, but you could also see where they had, had been shining.

00:36:59.660 --> 00:37:00.780
You could see where the strengths were.

00:37:00.780 --> 00:37:07.180
And so I wrote a project, I worked with whale researchers and people don't know this.

00:37:07.820 --> 00:37:13.260
Sperm whales have learned to pick the fish off of, take a step back.

00:37:13.260 --> 00:37:25.100
People catch halibut, fish for halibut by putting like literally miles long cables on the ocean floor or lines with a hook every six to 10 feet.

00:37:26.540 --> 00:37:30.460
And so you put a thousand hooks on the ocean floor, leave it overnight or pull it.

00:37:30.460 --> 00:37:31.820
And that's how you catch halibut.

00:37:31.820 --> 00:37:42.460
And sperm whales have learned to listen for the sound of the transmission changes when somebody puts their boat into gear to pull those, those hooks.

00:37:42.460 --> 00:37:45.740
They swim towards that sound and they just pick the fish off those lines.

00:37:45.740 --> 00:37:46.460
Wow.

00:37:46.460 --> 00:37:57.020
And so these researchers were starting to put transponders on boats that would allow anybody who saw a sperm whale to report that.

00:37:57.020 --> 00:38:01.420
And then you could kind of time your, your fishing sets to be away from the sperm whales.

00:38:01.420 --> 00:38:06.860
And so I wrote a project that just like these researchers didn't know how to get their data from one place to another.

00:38:07.180 --> 00:38:14.700
And so I just wrote a small Django project that listened for that data and gave them a visible place where they could go to it and share it.

00:38:14.700 --> 00:38:20.620
And one other, oh, I lived in Southeast Alaska.

00:38:20.620 --> 00:38:26.300
We were having increasing landslides, more, more frequent landslides and more impactful.

00:38:27.180 --> 00:38:35.820
And so I wrote a small project that examines real time stream data, stream gauge data and turns that into a measure of landside risk.

00:38:35.820 --> 00:38:39.820
And I gave a talk about that last year at PyCon.

00:38:39.820 --> 00:38:41.740
All those projects are small.

00:38:41.740 --> 00:38:43.740
They're never going to scale to like millions of users.

00:38:43.740 --> 00:38:45.580
They all need a database.

00:38:45.580 --> 00:38:49.420
And so they all fit this model of something like I personally would build.

00:38:49.420 --> 00:38:53.740
And if I didn't know deployment, those would not have ended up being useful.

00:38:53.740 --> 00:38:59.420
And so this tool takes all these people out there right now who are getting the skills to build something that works locally.

00:38:59.420 --> 00:39:05.420
And they don't have to like go through that three weeks to three months of learning how to deploy things.

00:39:05.420 --> 00:39:11.420
So I appreciate you bringing up the questions of like what happens with these larger scale projects.

00:39:11.420 --> 00:39:18.460
But there's also a whole class before you even get there of projects that are, that would make the world better if they could be easily deployed.

00:39:20.460 --> 00:39:28.860
Such a challenge because if you go down the, there's so many paths that people get led down that are not good paths.

00:39:28.860 --> 00:39:31.020
You know, it's sort of the architectural equivalent.

00:39:31.020 --> 00:39:37.740
I guess even just the DevOps equivalent of you're not Microsoft, you're not Google, you're not Netflix.

00:39:37.740 --> 00:39:41.820
You probably don't need the chaos monkey running around your whale research project.

00:39:41.820 --> 00:39:43.100
Right, right.

00:39:43.100 --> 00:39:43.980
Yeah.

00:39:43.980 --> 00:39:52.700
But people read that and they're like, well, I saw a really awesome conference talk and people loved it about how they, they had like geo replication of their database and stuff.

00:39:52.700 --> 00:39:54.540
You're like, yes, interesting.

00:39:54.540 --> 00:39:55.500
Not for you.

00:39:55.500 --> 00:39:56.540
Yeah.

00:39:56.540 --> 00:40:01.580
So the other direction that's interesting to, to finish up this discussion.

00:40:01.580 --> 00:40:04.060
So I'm targeting a VPS right now.

00:40:04.060 --> 00:40:12.140
I have deployed Django project to digital ocean, just on the bare VPS for people less familiar with that virtual private server.

00:40:12.140 --> 00:40:16.940
It's basically a brand new virtual Linux machine that you push your project to.

00:40:18.300 --> 00:40:34.380
And so this is more complicated because rather than just like making a few configuration changes to your project and then running a platforms deploy command, you have to do that whole, like, you know, update the server, install Django, set up a git push if you want to do that approach.

00:40:34.380 --> 00:40:36.060
Yeah.

00:40:36.060 --> 00:40:39.260
Make the right like port changes and whatnot, expose that.

00:40:40.940 --> 00:40:52.860
So it's more work for me to get that proof of concept done, but once it's done, you know, the work I'm doing to write a plugin for digital ocean would work just as well for Hetzner, just as well for Linode.

00:40:52.860 --> 00:40:58.540
And then it opens up to all the different approaches that people take to deployment.

00:40:58.540 --> 00:41:02.620
One of the interesting questions about Django simple deploy is what are the boundaries?

00:41:02.620 --> 00:41:03.580
So what is simple?

00:41:03.580 --> 00:41:09.020
yeah, and I don't even, I don't know the answer to that yet.

00:41:09.020 --> 00:41:10.620
It shouldn't become tube loaded.

00:41:10.620 --> 00:41:15.580
It shouldn't like re implement the entire CLI, for a platform.

00:41:15.580 --> 00:41:19.740
but the bounds are pretty large.

00:41:19.740 --> 00:41:20.700
Yeah.

00:41:20.700 --> 00:41:28.620
So you could have a digital ocean, you know, that targets, you know, NGINX, Benicorn.

00:41:28.620 --> 00:41:31.980
You could have one that targets using the Docker approach.

00:41:31.980 --> 00:41:35.420
You could have one that targets, external databases.

00:41:36.060 --> 00:41:43.660
There's really, it's a pretty open, platform for automating deployment processes.

00:41:43.660 --> 00:41:46.700
Yeah, absolutely.

00:41:46.700 --> 00:41:47.100
Lots of people.

00:41:47.100 --> 00:41:59.180
I mean, once you knock out one of those virtual servers, it's really, really close to seeing, well, anything that can run a Linux VM pretty much can do it.

00:41:59.180 --> 00:42:00.780
And you were talking about NGINX.

00:42:00.780 --> 00:42:03.260
You know, you might, I don't know, have you considered Caddy?

00:42:03.260 --> 00:42:04.940
Caddy server.com?

00:42:04.940 --> 00:42:04.940
Yes.

00:42:04.940 --> 00:42:09.020
And as I was saying NGINX, I was like, oh wait, there's another one that I should be saying.

00:42:09.020 --> 00:42:16.300
Well, I use NGINX for all of my stuff because it's all, it's gotten over the years, gotten more and more complicated.

00:42:17.420 --> 00:42:23.020
However, you know, it's, you've got to run, you've got to independently manage Let's Encrypt.

00:42:23.020 --> 00:42:26.700
And there's this sort of scaling up process.

00:42:26.700 --> 00:42:29.740
So first you've got to put the non-encrypted version up.

00:42:30.700 --> 00:42:34.780
Then so that cert bot and all the Let's Encrypt stuff can find it.

00:42:34.780 --> 00:42:37.500
Then you create the SSL certificate.

00:42:37.500 --> 00:42:39.340
Then you change the configuration again.

00:42:39.340 --> 00:42:47.500
So because it won't run saying it's SSL until it actually has this, like, there's this scaffolding step that's always messy.

00:42:47.500 --> 00:43:01.180
And if I think like easy getting started for people, Caddy, which manages the security and all that, and has a real simple configuration language, it seems like it might be a good option.

00:43:01.180 --> 00:43:03.580
And it has 62,000 GitHub stars.

00:43:03.580 --> 00:43:07.740
It's, I think a person or two uses it, you know, that's kind of neat.

00:43:07.740 --> 00:43:08.780
Yeah.

00:43:09.180 --> 00:43:17.740
Last week, when I, before I started the DigitalOcean plugin, I asked on Mastodon how people are deploying to VPS these days.

00:43:17.740 --> 00:43:20.540
And Caddy was one of the things that came up.

00:43:20.540 --> 00:43:23.580
It was super interesting to see the range of approaches that people are using.

00:43:23.580 --> 00:43:35.980
So, you know, as I go through this, I'm kind of asking the question for basic initial deployment for somebody new to this platform, what are the, what are some sane choices?

00:43:37.100 --> 00:43:40.780
So Caddy or Nginx, Postgres or SQLite.

00:43:40.780 --> 00:43:42.540
So I'll make those choices.

00:43:42.540 --> 00:43:49.820
And one of the open questions that I don't have clear answers to is, you know, where are the boundaries around those plugins?

00:43:49.820 --> 00:43:57.740
So I'll, I'll certainly implement a --DB flag that lets you choose like Postgres or SQLite.

00:43:57.740 --> 00:44:03.420
But I don't want to do a flag for like --approach, daku or whatnot.

00:44:03.740 --> 00:44:11.020
At some point it makes more sense to have other people write other plugins and just foster that plugin ecosystem.

00:44:11.020 --> 00:44:11.420
Yeah.

00:44:11.420 --> 00:44:11.980
Yeah.

00:44:11.980 --> 00:44:20.860
So another consideration and came out in the audience was hinting at this before, and it's certainly the way that I'm doing things these days is Docker.

00:44:20.860 --> 00:44:22.780
So let me just give you an example.

00:44:22.780 --> 00:44:29.900
Like, yeah, you can go all in and you can run on like the doc, like EKS and all these kinds of things.

00:44:29.900 --> 00:44:31.260
You can go way, way deep on it.

00:44:31.260 --> 00:44:37.440
Or you can just do stuff as simple as like, Hey, I want, I want the front end web server to be caddy.

00:44:38.140 --> 00:44:46.180
I could install caddy on the server using apt or whatever, but then, you know, those kinds of update more slowly.

00:44:46.180 --> 00:44:47.320
You have less control over it.

00:44:47.320 --> 00:44:59.300
You could just as equally well run a caddy Docker image on that machine and have basically a zero touch experience on the server itself, other than just having a Docker thing there.

00:44:59.300 --> 00:44:59.540
Right.

00:44:59.860 --> 00:45:01.660
And you can do whatever you want to that Docker image.

00:45:01.660 --> 00:45:12.020
You could even have a, a caddy Django simple deploy one based off their original one or, you know, things like that, where you've got it exactly configured.

00:45:12.020 --> 00:45:14.300
What's the story with Docker?

00:45:14.300 --> 00:45:17.160
And how have you been thinking about that?

00:45:17.160 --> 00:45:23.900
Because once you start to go to virtual server, you start to get into some of these processes and some of these ideas.

00:45:23.900 --> 00:45:25.760
Yeah.

00:45:25.760 --> 00:45:26.840
Great question.

00:45:26.840 --> 00:45:28.800
And it certainly has come up multiple times.

00:45:29.340 --> 00:45:36.560
My main experience with Docker is working with fly because fly is a Docker based approach.

00:45:36.560 --> 00:45:42.340
I have not written my own Docker files, but I have learned about them.

00:45:42.340 --> 00:45:51.040
And so short answer, you know, Docker is an approach to deployment and there's nothing stopping anybody from writing a plugin that has Docker based approach.

00:45:51.040 --> 00:45:55.960
This kind of gets back to the question of like, what's next?

00:45:55.960 --> 00:45:58.420
Yeah, it definitely does.

00:45:58.820 --> 00:45:59.240
Yeah.

00:45:59.240 --> 00:45:59.260
Yeah.

00:45:59.260 --> 00:46:04.780
I'm going to finish the plugin for a proof of concept plugin for digital ocean.

00:46:04.780 --> 00:46:08.980
I'll take it to the 1.0 version of that approach.

00:46:08.980 --> 00:46:15.760
So people can reliably deploy to digital ocean with a particular, you know, articulated approach.

00:46:15.760 --> 00:46:22.380
It'll be, it'll probably be, catty choice of SQLite or Progres.

00:46:22.380 --> 00:46:35.440
Whereas, and then I'm probably like my best approach is probably to back off of writing more plugins because I could spend the next few years just enjoying exploring all these platforms and approaches.

00:46:35.440 --> 00:46:48.600
but I really should back off just continue to let people know the project exists, make sure these plugins have started continue to work.

00:46:48.600 --> 00:46:52.600
And so I think it's easier and easier to, for other people to write plugins.

00:46:52.600 --> 00:46:52.980
Yeah.

00:46:52.980 --> 00:46:58.760
I can already tell from the way you're talking, like you could, you know, I have a, DSD plugin template repository.

00:46:58.760 --> 00:47:02.620
It's in the Django simple deploy organization.

00:47:02.620 --> 00:47:06.880
And so if you want to write a plugin, you don't start from scratch.

00:47:06.880 --> 00:47:12.480
You, download that, that repository for the DSD plugin template.

00:47:12.480 --> 00:47:15.240
You don't clone it because there's no upstream for it.

00:47:15.240 --> 00:47:16.040
Download it.

00:47:16.040 --> 00:47:16.240
Yeah.

00:47:16.240 --> 00:47:20.820
install it alongside simple deploy and development mode.

00:47:20.820 --> 00:47:23.400
and you can run tests right away.

00:47:23.400 --> 00:47:27.600
So you run an integration test and it just verifies that like, you know, it gives you a couple of questions.

00:47:27.600 --> 00:47:28.560
What's the name of your platform?

00:47:28.560 --> 00:47:31.120
What's the, command you want people to use?

00:47:31.120 --> 00:47:33.400
do you support automate all?

00:47:33.640 --> 00:47:45.520
And then it, it writes a new plugin for you with all the plumbing there, you run tests, verify that it works, and then you start writing your platform specific code.

00:47:45.520 --> 00:47:54.640
And so there's a bit of a learning curve for developers where you got to learn like, okay, what, you know, Django simple deploy has a module called plugin utils.

00:47:54.640 --> 00:47:59.840
And so that's how you like write output in a way that's consistent with the rest of the project feeds into its logging.

00:47:59.840 --> 00:48:05.200
there's a run quick command for small changes you're making to the project.

00:48:05.200 --> 00:48:11.240
There's a run slow command for things like deploy to make sure, you know, we're capturing output, streaming it and whatnot.

00:48:11.240 --> 00:48:21.960
So you learn those utilities, but you pretty quickly get to a place where you're just focusing on your expertise or opinion about how to approach deployment for a particular platform.

00:48:21.960 --> 00:48:23.400
Yeah.

00:48:23.400 --> 00:48:24.520
Okay.

00:48:24.520 --> 00:48:26.940
I'm sure there's a ton out there.

00:48:26.940 --> 00:48:29.380
People can be like, well, what about my platform?

00:48:29.380 --> 00:48:29.680
Right.

00:48:29.680 --> 00:48:35.960
You know, I'm sure there's some folks who are experts at wherever they're deploying their code that could maybe come and create a plugin.

00:48:35.960 --> 00:48:36.220
Right.

00:48:36.220 --> 00:48:37.740
Absolutely.

00:48:37.740 --> 00:48:47.560
And I, somebody tried to, write, write in support for Google.

00:48:47.560 --> 00:48:48.520
What was it?

00:48:48.520 --> 00:48:49.220
Google cloud.

00:48:49.220 --> 00:48:50.220
Yeah.

00:48:50.220 --> 00:48:50.840
Google.

00:48:50.840 --> 00:48:51.220
Yeah.

00:48:51.220 --> 00:48:51.580
GCP.

00:48:51.580 --> 00:48:52.400
Google cloud.

00:48:52.400 --> 00:48:53.820
Yeah.

00:48:53.820 --> 00:48:54.660
A couple of years ago.

00:48:54.660 --> 00:48:58.020
but that was back when there was no plugin system.

00:48:58.020 --> 00:49:04.640
And so it got bogged down and just like all the back and forth between core and, and that platform.

00:49:04.640 --> 00:49:12.500
These days that person could just, download that, that plugin template and start focusing on the platform.

00:49:12.500 --> 00:49:13.280
Yeah.

00:49:13.280 --> 00:49:13.580
Awesome.

00:49:13.580 --> 00:49:17.500
I'm sure that there's people out there thinking, Hey, we could do this for Azure.

00:49:17.500 --> 00:49:19.580
Hey, we could do this for AWS as well.

00:49:19.580 --> 00:49:19.960
Right.

00:49:19.960 --> 00:49:24.340
You know, I'm really blown away about how many people choose.

00:49:24.340 --> 00:49:29.700
Does the hyperscale clouds, given how complicated and expensive they are.

00:49:30.240 --> 00:49:33.240
there was some stat in one of the recent surveys.

00:49:33.240 --> 00:49:38.880
I don't know if it was the TSF chip brains one or just a more general developer one.

00:49:38.880 --> 00:49:40.000
I, anyway, it doesn't matter.

00:49:40.000 --> 00:49:47.980
One of the bigger surveys, 75, 78% people, percent of the people used either Azure AWS or GCP.

00:49:47.980 --> 00:49:49.060
Yeah.

00:49:49.620 --> 00:49:58.440
And I look at those, I'm like, geez, I don't think 75% of the apps out there need the stuff that those are offering.

00:49:58.440 --> 00:50:01.540
And it's so, so much more expensive.

00:50:01.540 --> 00:50:08.540
I don't think people fully understand how much more expensive it is to get like a VM on one versus the other.

00:50:08.540 --> 00:50:24.480
I did some, I think, you know, it always depends on which one you pick or something, but for a $20 Hetzner server, it's, I think $60 on DigitalOcean, 200 something dollars on AWS.

00:50:24.480 --> 00:50:35.300
And I think pushing up towards $300 for, for Azure and what you get when you go up to these prices, you don't get a better experience.

00:50:35.300 --> 00:50:40.860
You get a worse one because all the complexity, all the stuff that you got to deal with is not like, well, just here's your server.

00:50:40.860 --> 00:50:43.620
Go with like, oh no, no, there's all these other things you got to bring in.

00:50:43.620 --> 00:50:48.000
And it just, it super surprises me, that that's the case.

00:50:48.000 --> 00:50:49.600
And so, yeah, I don't know.

00:50:50.220 --> 00:50:54.640
Yeah, I built working support for Azure early on.

00:50:54.640 --> 00:51:00.940
My goal, you know, I worked for Voco originally, then I made it work for one other platform, which was Fly.

00:51:00.940 --> 00:51:01.820
Like, okay, cool.

00:51:01.820 --> 00:51:03.080
This isn't tied to one platform.

00:51:03.080 --> 00:51:05.200
And then the rule of three, I did a platform in a stage.

00:51:05.200 --> 00:51:07.620
Like, okay, now I've gotten all the generalities out.

00:51:09.800 --> 00:51:20.280
Moving over to VPS as opposed to platform as a service opens up a few new things, but I can, I can, I can put those in internally without making breaking changes in the project.

00:51:20.280 --> 00:51:21.340
Yeah.

00:51:21.340 --> 00:51:24.400
And Azure does have a platform as a service offering.

00:51:24.400 --> 00:51:25.040
Right.

00:51:25.040 --> 00:51:30.020
For example, I'm not, I think I'm sure AWS does as well, although I haven't tried to try to use it.

00:51:31.300 --> 00:51:31.740
Yeah.

00:51:31.740 --> 00:51:34.500
So, I mean, but there are analogies, I don't know.

00:51:34.500 --> 00:51:38.000
Well, I also focused on, Veroco.

00:51:38.000 --> 00:51:41.580
One of the things for Veroco is, it's, it's one of the fastest deployments I've used.

00:51:41.580 --> 00:51:43.840
they've kind of got it dialed.

00:51:43.840 --> 00:51:47.060
Azure was taking like 10 or 15 minutes.

00:51:47.060 --> 00:51:49.460
So it was hard to do development work against that.

00:51:49.460 --> 00:51:52.960
Kim, Kim posted this interesting question or comment.

00:51:52.960 --> 00:51:55.920
The various deployment mechanisms, presumably all need credentials.

00:51:55.920 --> 00:51:58.480
Are these provided as NV variables?

00:51:58.900 --> 00:52:01.400
Many beginners perhaps don't know what it has to do with these.

00:52:01.400 --> 00:52:02.680
This project may help.

00:52:02.680 --> 00:52:03.860
I agree completely.

00:52:03.860 --> 00:52:11.980
so this project is like, I'm approaching VPS credentials around SSH as NV variables.

00:52:11.980 --> 00:52:13.480
Cause that's what I've used in the past.

00:52:13.480 --> 00:52:21.240
NV variables being files that have basically key values that you don't put into Git, but you

00:52:21.240 --> 00:52:22.980
create on the platform, right?

00:52:22.980 --> 00:52:23.540
Something like that.

00:52:23.540 --> 00:52:24.520
Yeah.

00:52:24.520 --> 00:52:28.820
And so the quick start guide will say like export these two environment variables.

00:52:28.820 --> 00:52:34.200
You know, your, your IP address and your, your host password, maybe a username if you've

00:52:34.200 --> 00:52:35.540
already created a non-root user.

00:52:35.540 --> 00:52:40.720
but it goes through and it basically, if you don't give it a username, it tries the default

00:52:40.720 --> 00:52:43.460
Django user username and it goes through root and whatnot.

00:52:44.240 --> 00:52:51.200
I, it's, it's a little humbling to make these plugins because it shows you exactly where my current

00:52:51.200 --> 00:52:51.880
knowledge is at.

00:52:51.880 --> 00:52:54.300
but it's also a starting place that works.

00:52:54.300 --> 00:52:58.500
And so if somebody looks at this and says like, Hey, you really shouldn't be using the NV variables.

00:52:58.500 --> 00:53:01.100
Here's the current best way to use, to deal with credentials.

00:53:01.620 --> 00:53:02.980
We can write that into the plugin.

00:53:02.980 --> 00:53:09.400
And as Kim is pointing out, it steers all beginners, all people from that point forward, into that

00:53:09.400 --> 00:53:10.120
better usage.

00:53:10.120 --> 00:53:13.440
And it also comes back to that idea that this isn't just for beginners.

00:53:13.440 --> 00:53:17.180
Think about all the people out there who are using NV variables, because that's what they learned.

00:53:17.180 --> 00:53:22.240
And maybe if there's something better and the latest version of the plugins cheers them towards that as

00:53:22.240 --> 00:53:22.440
well.

00:53:22.440 --> 00:53:23.640
yeah.

00:53:23.740 --> 00:53:28.640
I've often found there are things that are good for beginners that end up being really helpful for

00:53:28.640 --> 00:53:29.780
everybody else as well.

00:53:29.780 --> 00:53:31.780
and this product feels like one of those.

00:53:31.780 --> 00:53:33.480
Yeah.

00:53:33.480 --> 00:53:34.360
That's very cool.

00:53:34.360 --> 00:53:36.280
Certainly making your life easier.

00:53:36.280 --> 00:53:37.620
Everybody wants that, right?

00:53:37.620 --> 00:53:38.880
Yes.

00:53:38.880 --> 00:53:39.460
Yes.

00:53:39.460 --> 00:53:40.280
Yeah.

00:53:40.280 --> 00:53:40.980
Yeah.

00:53:40.980 --> 00:53:41.860
Automated a lot of things.

00:53:41.860 --> 00:53:43.060
Okay.

00:53:43.060 --> 00:53:45.580
Well, I mean, I'll throw one more thought out there.

00:53:45.580 --> 00:53:51.760
Like as you're working on the server, the virtual server side of things, I think there's a lot of

00:53:51.760 --> 00:53:53.120
opportunities to leverage.

00:53:53.120 --> 00:53:59.420
Docker to say, like, if you could build an image that is 90% the way there, you could just say,

00:53:59.420 --> 00:54:02.460
run this Docker image, run this Docker container based on this image.

00:54:02.460 --> 00:54:05.460
And what, it doesn't even matter what server it's on.

00:54:05.460 --> 00:54:08.840
I think there's, I think there's some interesting stuff you could do with Docker here, but.

00:54:08.840 --> 00:54:09.820
Oh, absolutely.

00:54:09.820 --> 00:54:10.400
Yes.

00:54:10.400 --> 00:54:12.080
I'll let you go down that path.

00:54:12.080 --> 00:54:13.500
I certainly have enjoyed it.

00:54:13.500 --> 00:54:15.600
yeah.

00:54:15.600 --> 00:54:17.780
So what's next?

00:54:17.780 --> 00:54:21.900
What do you have to, by the way, I don't know if we called it out.

00:54:21.980 --> 00:54:27.440
I mean, this is kind of the 1.0 you mentioned it in passing, but this is the 1.0

00:54:27.440 --> 00:54:29.120
milestone sort of thing.

00:54:29.120 --> 00:54:29.340
Right.

00:54:29.340 --> 00:54:30.620
Yeah.

00:54:30.620 --> 00:54:34.980
The 1.0 for this is really about like, people should be able to trust that it's reliable from

00:54:34.980 --> 00:54:35.680
this point forward.

00:54:35.680 --> 00:54:36.720
It does work.

00:54:36.720 --> 00:54:38.280
It works on all three OSs.

00:54:38.280 --> 00:54:40.960
for the officially supported, plugins.

00:54:42.020 --> 00:54:46.400
I'm going to try to keep a list of, plugins that I'm aware of that are being worked on,

00:54:46.400 --> 00:54:50.380
um, and sort out that whole, you know, how do you manage an ecosystem?

00:54:50.380 --> 00:54:55.680
but you know, I've also thought of this as like a gift to the Django community.

00:54:55.680 --> 00:54:58.140
I wanted to release 1.0 on Christmas.

00:54:58.140 --> 00:54:59.560
so I couldn't quite get there.

00:55:00.480 --> 00:55:06.360
you know, if you listen to Django chat, when the word deployment comes up, there's

00:55:06.360 --> 00:55:10.320
always this grown of, Oh, and that's been there for 20 years.

00:55:10.320 --> 00:55:11.300
He's excited as well.

00:55:11.300 --> 00:55:12.320
He loves it.

00:55:12.320 --> 00:55:12.560
Yes.

00:55:12.560 --> 00:55:18.220
but so this, this problem has been in Django in the Django world for 20 years.

00:55:18.220 --> 00:55:22.980
How do we deal with the fact that it's hard to deploy Django harder than PHP, harder than

00:55:22.980 --> 00:55:23.820
some other things.

00:55:23.820 --> 00:55:30.140
And I really think this, this project kind of answers that question or it goes a long way

00:55:30.140 --> 00:55:30.880
towards entering it.

00:55:30.880 --> 00:55:37.240
and there's a good number of people in the Django community who have been kind of cheerleading

00:55:37.240 --> 00:55:38.960
in this, this project for a while.

00:55:38.960 --> 00:55:42.320
because if they've seen it, I've announced it in public.

00:55:42.320 --> 00:55:45.660
I've kind of done the development in public and that Django cons whatnot.

00:55:45.660 --> 00:55:48.180
Yeah.

00:55:48.180 --> 00:55:48.940
So awesome.

00:55:48.940 --> 00:55:51.840
I'm going to, I'm going to step back from creating more plugins.

00:55:51.840 --> 00:55:56.320
I'm going to continue to refine the internals and I'm going to go back to my own like actual

00:55:56.320 --> 00:55:57.100
Django projects.

00:55:57.100 --> 00:55:59.000
You're going to use it rather than build.

00:55:59.000 --> 00:55:59.360
Yes.

00:55:59.360 --> 00:55:59.960
Yes.

00:55:59.960 --> 00:56:02.460
You know, that's the way to do it.

00:56:02.460 --> 00:56:03.460
Yep.

00:56:03.460 --> 00:56:07.080
You know, I think one of the bits of magic of Python and why it's

00:56:07.080 --> 00:56:12.700
so popular is it's very welcoming to beginners, right?

00:56:12.700 --> 00:56:17.480
People coming from science, like we talked about or other things, they kind of get sucked

00:56:17.480 --> 00:56:18.780
in and they're like, huh, it's nice here.

00:56:18.780 --> 00:56:19.420
Maybe I'll stay.

00:56:19.420 --> 00:56:25.540
And, you know, these kinds of things sort of tell that same story for web developers.

00:56:25.540 --> 00:56:26.120
Right.

00:56:26.120 --> 00:56:26.560
Right.

00:56:26.560 --> 00:56:31.680
There might be a point where people outgrow this or they don't, but, but they might, but

00:56:31.680 --> 00:56:37.080
it might've gotten them that year's worth of experience running a server or running a platform

00:56:37.080 --> 00:56:41.960
as a service app and dealing with all of that so that they're then ready to take whatever

00:56:41.960 --> 00:56:43.400
next step that needs to be taken.

00:56:43.400 --> 00:56:44.280
If it needs to.

00:56:44.280 --> 00:56:45.380
Yeah.

00:56:45.380 --> 00:56:50.020
It really smooths out that learning process because you just described it.

00:56:50.020 --> 00:56:52.100
you know, Python's welcoming people to learn Python.

00:56:52.100 --> 00:56:54.400
They say, Ooh, I want a web front end for this.

00:56:54.400 --> 00:56:58.360
Going back to like my father, not releasing his projects.

00:56:58.360 --> 00:57:01.580
he was a software developer in like seventies and eighties.

00:57:01.580 --> 00:57:07.460
and so he, for him deployment was, I need to make my projects so good.

00:57:07.460 --> 00:57:10.520
It can be printed to like 10,000 physical copies.

00:57:10.780 --> 00:57:11.220
Yeah.

00:57:11.220 --> 00:57:15.440
That's so it's no fault to him for having those unreleased projects.

00:57:15.440 --> 00:57:21.020
so the pathway these days is people learn Python and say, okay, I'm solving my problem

00:57:21.020 --> 00:57:21.460
with Python.

00:57:21.460 --> 00:57:24.120
I want a web front front end so other people can access it.

00:57:24.120 --> 00:57:26.400
They learn Django because they already know Python.

00:57:26.400 --> 00:57:27.820
That's all smooth.

00:57:27.820 --> 00:57:32.280
You know, Django is a bit hard, but you can learn it if you know Python and then they get

00:57:32.280 --> 00:57:36.420
to deployment and it's this entirely different class of things to learn.

00:57:36.660 --> 00:57:38.500
And that's where that cliff comes in.

00:57:38.500 --> 00:57:43.680
And so simple deploy tends to smooth out that.

00:57:43.680 --> 00:57:45.040
It basically removes that cliff.

00:57:45.040 --> 00:57:47.880
And so you go right from where you are.

00:57:47.880 --> 00:57:50.160
I have a project working on my system.

00:57:50.160 --> 00:57:52.300
Now it's working on the road server.

00:57:52.300 --> 00:57:58.780
I don't fully understand it, but it's much easier to poke around at the working deployment

00:57:58.780 --> 00:58:02.940
than poke around at something that you're trying to do that's broken and people end up giving

00:58:02.940 --> 00:58:03.180
up.

00:58:03.180 --> 00:58:05.720
So yeah, I'm excited about to learn.

00:58:06.120 --> 00:58:09.120
Yeah, I'm excited about like opening that pathway for people.

00:58:09.120 --> 00:58:10.500
Yeah, absolutely.

00:58:10.500 --> 00:58:11.000
That's awesome.

00:58:11.000 --> 00:58:11.640
Nice work.

00:58:11.640 --> 00:58:12.880
And thanks for doing it.

00:58:12.880 --> 00:58:18.360
There's already so much to learn to build a web app to even go from, I know, Python to

00:58:18.360 --> 00:58:25.100
a web app because CSS, databases, you know, HTML, JavaScript.

00:58:25.100 --> 00:58:31.040
There's already enough that you don't need to throw Linux and CDNs and all that at people

00:58:31.040 --> 00:58:31.980
at the same time, right?

00:58:31.980 --> 00:58:37.020
Let them go across a chasm and they'll figure it out on the other side.

00:58:37.020 --> 00:58:38.260
All right.

00:58:38.260 --> 00:58:40.560
Well, thanks for this project.

00:58:40.560 --> 00:58:42.740
Maybe final call to action.

00:58:42.740 --> 00:58:43.700
People want to get started with it.

00:58:43.700 --> 00:58:44.200
What do you tell them?

00:58:44.200 --> 00:58:46.680
Go take a look at the docs.

00:58:46.680 --> 00:58:49.860
There's a friendly quick start docs show you how it's used.

00:58:49.860 --> 00:58:52.060
And there's pretty comprehensive contributing docs.

00:58:52.260 --> 00:58:55.060
If you're curious to write a plugin or how about otherwise?

00:58:55.060 --> 00:58:55.860
Yeah.

00:58:55.860 --> 00:58:57.740
I guess let's close it out with this.

00:58:58.220 --> 00:59:06.840
If you got a platform out there, if you're somebody like fly.io, but a different one, consider

00:59:06.840 --> 00:59:07.840
creating one of these plugins.

00:59:07.840 --> 00:59:09.520
It blows my mind, Eric.

00:59:09.520 --> 00:59:14.360
I don't know how you feel, but there'll be some major, major service and you'll go there

00:59:14.360 --> 00:59:18.460
and they're like, well, you can use our, our JavaScript API, or you can just write it

00:59:18.460 --> 00:59:18.960
from scratch.

00:59:19.460 --> 00:59:24.320
Like how much effort is it for one of these companies to spend a week, create a package

00:59:24.320 --> 00:59:26.100
for their thing and make it go.

00:59:26.100 --> 00:59:29.520
And I think, you know, a sort of a similar call to action, like, Hey, if you want to make

00:59:29.520 --> 00:59:34.600
it really easy for people to just switch to your platform, you know, consider following

00:59:34.600 --> 00:59:37.840
the steps that you talked about to build a plugin for this.

00:59:37.840 --> 00:59:38.060
Right.

00:59:38.060 --> 00:59:39.680
Yeah.

00:59:39.680 --> 00:59:40.040
Yeah.

00:59:40.040 --> 00:59:43.260
And for anybody getting, anybody interested in writing a plugin, feel free to reach out.

00:59:43.260 --> 00:59:47.040
I'm happy to, to make sure that works the first time people do it.

00:59:47.040 --> 00:59:48.300
Yeah, absolutely.

00:59:48.300 --> 00:59:48.720
All right.

00:59:49.100 --> 00:59:50.300
Thanks for being here again.

00:59:50.300 --> 00:59:50.880
Talk to you later.

00:59:50.880 --> 00:59:51.260
Thank you, Michael.

00:59:51.260 --> 00:59:52.260
Bye.

00:59:52.260 --> 00:59:53.200
Bye.

