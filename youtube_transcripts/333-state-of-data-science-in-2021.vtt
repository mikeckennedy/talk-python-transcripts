WEBVTT

00:00:00.000 --> 00:00:04.720
- Hey, everyone out there in the live stream,


00:00:04.720 --> 00:00:07.000
either watching live or watching the replay.


00:00:07.000 --> 00:00:08.320
Thank you, thank you for being here.


00:00:08.320 --> 00:00:09.860
Hey, Stan.


00:00:09.860 --> 00:00:11.160
- Hello, how's it going?


00:00:11.160 --> 00:00:12.680
- Hey, it's going well.


00:00:12.680 --> 00:00:15.180
Welcome, welcome to the live stream


00:00:15.180 --> 00:00:16.440
and almost to the podcast.


00:00:16.440 --> 00:00:18.920
So we're gonna talk about some fun Anaconda stuff.


00:00:18.920 --> 00:00:20.440
You already kicked this off?


00:00:20.440 --> 00:00:21.360
- Yeah, let's do it.


00:00:21.360 --> 00:00:22.200
- All right.


00:00:22.200 --> 00:00:25.760
Stan, welcome to Talk Python To Me.


00:00:25.760 --> 00:00:28.520
- Hey, nice to be here.


00:00:28.520 --> 00:00:29.800
- Yeah, it's great to have you here.


00:00:29.800 --> 00:00:32.920
I'm super excited to talk about data science things,


00:00:32.920 --> 00:00:35.480
Anaconda things, and we'll even squeeze a little


00:00:35.480 --> 00:00:38.640
of one of my favorites, the Apple M1 stuff


00:00:38.640 --> 00:00:40.680
mixed in with data science.


00:00:40.680 --> 00:00:43.240
So it should be a fun conversation.


00:00:43.240 --> 00:00:44.280
- Cool, looking forward to it.


00:00:44.280 --> 00:00:45.240
Yeah, it should be good.


00:00:45.240 --> 00:00:47.480
I'm also very excited about the M1.


00:00:47.480 --> 00:00:50.880
- Nice, yeah, we can geek out about that a little bit.


00:00:50.880 --> 00:00:51.700
That'll be fun.


00:00:51.700 --> 00:00:54.040
But before we get there, let's just start with your story.


00:00:54.040 --> 00:00:56.320
How'd you get into programming in Python?


00:00:56.320 --> 00:00:59.160
- Yeah, programming started as a kid,


00:00:59.160 --> 00:01:00.000
dating myself here.


00:01:00.000 --> 00:01:02.480
I learned to program basic on the Osborne 1,


00:01:02.480 --> 00:01:06.960
a suitcase of a computer that we happened to have as a kid.


00:01:06.960 --> 00:01:10.520
And then eventually picked up C and stuff like that.


00:01:10.520 --> 00:01:13.060
Didn't learn Python until college,


00:01:13.060 --> 00:01:15.440
mostly because I was frustrated with Perl.


00:01:15.440 --> 00:01:19.000
I just found that Perl just never fit in my brain right.


00:01:19.000 --> 00:01:20.840
And so I was like, well, what other scripting languages


00:01:20.840 --> 00:01:21.680
are there?


00:01:21.680 --> 00:01:22.560
And I found Python.


00:01:22.560 --> 00:01:25.600
And that was a huge game changer.


00:01:25.600 --> 00:01:27.160
I didn't really use it professionally


00:01:27.160 --> 00:01:29.880
or like super seriously until grad school


00:01:29.880 --> 00:01:31.680
when I had a summer research job.


00:01:31.680 --> 00:01:34.880
And I realized that this new thing called NumPy


00:01:34.880 --> 00:01:37.080
could help me do my analysis.


00:01:37.080 --> 00:01:38.920
And so that was when I really started


00:01:38.920 --> 00:01:40.280
to pick up Python seriously.


00:01:40.280 --> 00:01:42.080
And now here I am.


00:01:42.080 --> 00:01:44.280
- Yeah, what were you studying in grad school?


00:01:44.280 --> 00:01:45.960
- I was doing physics.


00:01:45.960 --> 00:01:49.760
So I did particle physics and used Python quite extensively


00:01:49.760 --> 00:01:51.280
actually throughout my research.


00:01:51.280 --> 00:01:54.600
And C++ unfortunately for better or worse.


00:01:54.600 --> 00:01:55.440
- Yeah.


00:01:55.440 --> 00:01:56.440
- So yeah, but that's how I ended up.


00:01:56.440 --> 00:01:58.800
I always ended up kind of being the software person


00:01:58.800 --> 00:02:00.360
on experiments.


00:02:00.360 --> 00:02:03.000
So when I was leaving academia,


00:02:03.000 --> 00:02:04.040
going into software engineering


00:02:04.040 --> 00:02:06.800
kind of was a logical step for me.


00:02:06.800 --> 00:02:07.640
- Yeah, that's really cool.


00:02:07.640 --> 00:02:09.560
I was studying math in grad school


00:02:09.560 --> 00:02:13.080
and did a lot of programming as well.


00:02:13.080 --> 00:02:15.360
And I just sort of trended more and more


00:02:15.360 --> 00:02:16.600
towards the computer side


00:02:16.600 --> 00:02:18.720
and decided that that was the path as well.


00:02:18.720 --> 00:02:19.960
But it's cool.


00:02:19.960 --> 00:02:22.800
A lot of the sort of logical thinking


00:02:22.800 --> 00:02:24.560
and problem solving you learn in physics


00:02:24.560 --> 00:02:25.440
or math or whatever,


00:02:25.440 --> 00:02:28.560
they translate pretty well to programming.


00:02:28.560 --> 00:02:29.400
- Yeah, yeah.


00:02:29.400 --> 00:02:31.720
And definitely working on large experiments.


00:02:31.720 --> 00:02:34.840
A lot of the sort of soft skills of software engineering,


00:02:34.840 --> 00:02:36.720
things like how do you coordinate with people?


00:02:36.720 --> 00:02:39.200
How do you design software for multiple people to use?


00:02:39.200 --> 00:02:40.520
That sort of thing.


00:02:40.520 --> 00:02:43.840
I inadvertently was learning how to be a software manager


00:02:43.840 --> 00:02:46.560
as a physicist and then only realized it later


00:02:46.560 --> 00:02:48.880
when I went into industry.


00:02:48.880 --> 00:02:50.600
- Yeah, excellent.


00:02:50.600 --> 00:02:51.800
And how about now?


00:02:51.800 --> 00:02:53.840
You're over at Anaconda, right?


00:02:53.840 --> 00:02:56.160
- Yeah, so maybe I'm doing the same thing.


00:02:56.160 --> 00:02:59.960
So now I'm both a developer and a manager at Anaconda.


00:02:59.960 --> 00:03:02.600
- It's a direct path from like PhD physics,


00:03:02.600 --> 00:03:06.680
particle physics to programming to data science at Anaconda.


00:03:06.680 --> 00:03:07.760
Is that how it goes?


00:03:07.760 --> 00:03:11.920
- Yeah, I mean, we employ a surprising number of scientists


00:03:11.920 --> 00:03:13.400
who are now software engineers.


00:03:13.400 --> 00:03:16.480
And so I manage the team that does


00:03:16.480 --> 00:03:18.120
a lot of the open source at Anaconda.


00:03:18.120 --> 00:03:20.160
So we work on stuff like Numba and Dask


00:03:20.160 --> 00:03:22.280
and various projects like that.


00:03:22.280 --> 00:03:25.880
Just recently hired the piston developers


00:03:25.880 --> 00:03:28.840
to broaden our scope into more Python


00:03:28.840 --> 00:03:31.120
JIT optimization kind of stuff.


00:03:31.120 --> 00:03:33.600
So yeah, so I'm doing a mix of actual development


00:03:33.600 --> 00:03:37.080
on some projects as well as just managing strategy,


00:03:37.080 --> 00:03:38.840
the usual kind of stuff.


00:03:38.840 --> 00:03:39.680
- Yeah.


00:03:39.680 --> 00:03:43.200
Well, I suspect most people out there know what Anaconda is,


00:03:43.200 --> 00:03:45.400
but I have listeners who come from all over.


00:03:45.400 --> 00:03:48.400
What is Anaconda?


00:03:48.400 --> 00:03:50.440
It's kind of like a Python you download,


00:03:50.440 --> 00:03:54.560
but it's also, it has its own special advantages, right?


00:03:54.560 --> 00:03:57.320
- Yeah, I mean, where we came out of


00:03:57.320 --> 00:04:00.600
and still is our main focus is how to get Python


00:04:00.600 --> 00:04:02.360
and just broader data science tools.


00:04:02.360 --> 00:04:03.800
One of the interesting things about data science


00:04:03.800 --> 00:04:05.880
is it's not just Python.


00:04:05.880 --> 00:04:08.400
Most of people are gonna have to combine Python


00:04:08.400 --> 00:04:09.400
and maybe they don't realize it,


00:04:09.400 --> 00:04:11.440
but with Fortran and C++ and all the things


00:04:11.440 --> 00:04:14.160
that underpin all of these amazing libraries.


00:04:14.160 --> 00:04:16.280
And so a lot of what we do is try to get Python


00:04:16.280 --> 00:04:18.160
into the hands of data scientists,


00:04:18.160 --> 00:04:20.080
is get them the latest things


00:04:20.080 --> 00:04:21.360
and make it easy for them to install


00:04:21.360 --> 00:04:23.160
on whatever platform they're on,


00:04:23.160 --> 00:04:25.400
Windows, Mac, Linux, that sort of thing.


00:04:25.400 --> 00:04:30.400
So Anaconda has a free, we call it individual edition.


00:04:30.400 --> 00:04:32.680
It's basically a package distribution


00:04:32.680 --> 00:04:34.800
and installer that lets you get started.


00:04:34.800 --> 00:04:37.960
And then you can, there are thousands of conda packages,


00:04:37.960 --> 00:04:39.120
conda is the packaging system.


00:04:39.120 --> 00:04:41.480
There are thousands of conda packages that you can install


00:04:41.480 --> 00:04:44.680
where we or the broader community


00:04:44.680 --> 00:04:45.760
have done a lot of the hard work


00:04:45.760 --> 00:04:48.520
to make sure all of those compiled packages


00:04:48.520 --> 00:04:50.720
are built to run on your system.


00:04:50.720 --> 00:04:53.480
- That's one of the real big challenges


00:04:53.480 --> 00:04:55.120
of the data science stuff


00:04:55.120 --> 00:04:57.520
is getting it compiled for your system.


00:04:57.520 --> 00:05:01.280
Because if I use requests, it's, you know,


00:05:01.280 --> 00:05:03.560
pip install requests, I probably,


00:05:03.560 --> 00:05:05.080
maybe it runs a setup high,


00:05:05.080 --> 00:05:07.440
maybe it just comes down as a wheel, I don't know,


00:05:07.440 --> 00:05:08.560
but it's just pure Python


00:05:08.560 --> 00:05:10.800
and there's not a whole lot of magic.


00:05:10.800 --> 00:05:12.600
If I'm really getting that far out there,


00:05:12.600 --> 00:05:14.080
maybe I'm using SQLAlchemy


00:05:14.080 --> 00:05:16.080
and it has some C optimizations,


00:05:16.080 --> 00:05:17.720
it will try to compile.


00:05:17.720 --> 00:05:18.560
And if it doesn't,


00:05:18.560 --> 00:05:21.680
well, it'll run some slower Python version probably.


00:05:21.680 --> 00:05:23.880
But in the data science world,


00:05:23.880 --> 00:05:26.520
you've got really heavy dependencies, right?


00:05:26.520 --> 00:05:27.360
Like, as you said,


00:05:27.360 --> 00:05:30.720
stuff that requires a Fortran compiler on your computer.


00:05:30.720 --> 00:05:33.080
I don't know if I have a Fortran compiler on my Mac.


00:05:33.080 --> 00:05:34.160
I'm pretty sure I don't,


00:05:34.160 --> 00:05:35.720
but maybe it's hidden there.


00:05:35.720 --> 00:05:37.200
Probably not, right?


00:05:37.200 --> 00:05:39.880
And as maybe C++,


00:05:39.880 --> 00:05:42.800
probably I have a C++ compiler,


00:05:42.800 --> 00:05:44.080
but maybe not the right one,


00:05:44.080 --> 00:05:46.080
maybe not the right version.


00:05:46.080 --> 00:05:47.800
Maybe my path is not set up right.


00:05:47.800 --> 00:05:49.440
And plus it's slow, right?


00:05:49.440 --> 00:05:51.480
All of these things are a challenge.


00:05:51.480 --> 00:05:54.000
So Anaconda tries to basically be,


00:05:54.000 --> 00:05:56.400
let's pre-build that stuff


00:05:56.400 --> 00:05:58.280
with a tool chain that we know will work


00:05:58.280 --> 00:06:00.480
and then deliver you the final binaries, right?


00:06:00.480 --> 00:06:03.440
But the challenge with that for a lot of tooling is,


00:06:03.440 --> 00:06:08.280
it's downloaded and installed to different machines


00:06:08.280 --> 00:06:09.760
with different architectures, right?


00:06:09.760 --> 00:06:12.840
So you've gone and built stuff for macOS,


00:06:12.840 --> 00:06:13.840
you built stuff for Linux,


00:06:13.840 --> 00:06:16.240
you built stuff for Windows and whatnot.


00:06:16.240 --> 00:06:17.360
Is that right?


00:06:17.360 --> 00:06:18.200
- Yeah, yeah.


00:06:18.200 --> 00:06:21.880
Building software is non-trivial


00:06:21.880 --> 00:06:25.440
and no matter how much a developer tries to automate it


00:06:25.440 --> 00:06:27.280
so that things just work,


00:06:27.280 --> 00:06:31.040
it helps to have someone do a little bit of quality control


00:06:31.040 --> 00:06:34.040
and a little bit of just deciding how to set


00:06:34.040 --> 00:06:36.680
all the switches to make sure that you get a thing that works


00:06:36.680 --> 00:06:39.120
so that you can just get going quickly.


00:06:39.120 --> 00:06:43.240
Early on, I remember in the sort of 2014, 2015 era,


00:06:44.000 --> 00:06:46.960
Anaconda was extremely popular with Windows users


00:06:46.960 --> 00:06:48.680
who did not have a lot of good options


00:06:48.680 --> 00:06:49.520
for how to get this stuff.


00:06:49.520 --> 00:06:50.600
- Right, right.


00:06:50.600 --> 00:06:52.360
- With Linux, you could kind of get it together


00:06:52.360 --> 00:06:53.400
and get it going.


00:06:53.400 --> 00:06:54.800
If you were motivated on Windows,


00:06:54.800 --> 00:06:56.720
it was often just like a very much,


00:06:56.720 --> 00:06:58.240
I don't know what to do.


00:06:58.240 --> 00:07:01.800
And so making it sort of one-stop shopping


00:07:01.800 --> 00:07:02.920
for all of these packages.


00:07:02.920 --> 00:07:04.240
And another thing we wanted to do


00:07:04.240 --> 00:07:06.200
is make sure that there was a whole community


00:07:06.200 --> 00:07:07.160
of package building around it.


00:07:07.160 --> 00:07:08.640
It wasn't just us.


00:07:08.640 --> 00:07:10.280
So things like CondaForge


00:07:10.280 --> 00:07:12.080
is a community of package builders


00:07:12.080 --> 00:07:16.000
that we are part of and hugely support.


00:07:16.000 --> 00:07:17.960
'Cause there's a long tail.


00:07:17.960 --> 00:07:19.960
There's always gonna be stuff that is gonna be,


00:07:19.960 --> 00:07:21.920
we're never gonna get around to packaging.


00:07:21.920 --> 00:07:23.720
- Right, there's important stuff that you're like,


00:07:23.720 --> 00:07:24.840
this is essential.


00:07:24.840 --> 00:07:28.560
So NumPy, Matplotlib, and so on.


00:07:28.560 --> 00:07:32.120
You all take control of making sure that that one gets out.


00:07:32.120 --> 00:07:35.380
But there's some biology library


00:07:35.380 --> 00:07:38.480
that people don't know about that you're not in charge of.


00:07:38.480 --> 00:07:41.640
And that's what the CondaForge plus Conda is.


00:07:41.640 --> 00:07:44.040
It's sort of like pip and PyPI,


00:07:44.040 --> 00:07:47.040
but also in a slightly more structured way.


00:07:47.040 --> 00:07:47.880
- Yeah, yeah.


00:07:47.880 --> 00:07:49.720
And that was why Conda was built to help make it


00:07:49.720 --> 00:07:53.400
so that it is possible for this community to grow up,


00:07:53.400 --> 00:07:55.440
for people to package things that aren't Python at all


00:07:55.440 --> 00:07:58.160
that you might need, all kinds of stuff like that.


00:07:58.160 --> 00:08:00.280
And yeah, there's always going to be


00:08:00.280 --> 00:08:02.940
in your specific scientific discipline.


00:08:02.940 --> 00:08:03.920
I mean, so for example,


00:08:03.920 --> 00:08:07.400
BioConda is a really interesting distribution of packages


00:08:07.400 --> 00:08:10.520
built by the bioinformatics community.


00:08:10.520 --> 00:08:12.480
Built on Conda, but they have all of the packages


00:08:12.480 --> 00:08:13.320
that they care about,


00:08:13.320 --> 00:08:15.080
and many of which I've never heard of.


00:08:15.080 --> 00:08:15.920
- Right.


00:08:15.920 --> 00:08:16.820
- And aren't in common use,


00:08:16.820 --> 00:08:19.940
but are really important to that scientific discipline.


00:08:19.940 --> 00:08:21.800
- Yeah, it's really amazing that that's out there.


00:08:21.800 --> 00:08:23.100
That's great.


00:08:23.100 --> 00:08:24.040
Out in the live stream,


00:08:24.040 --> 00:08:26.360
we have a question from Neil Heather.


00:08:26.360 --> 00:08:27.560
Hey, Neil.


00:08:27.560 --> 00:08:30.980
I mentioned Linux, Windows, macOS.


00:08:30.980 --> 00:08:34.160
Neil asked, does Anaconda work on Raspberry Pi OS,


00:08:34.160 --> 00:08:36.160
as in ARM64?


00:08:36.160 --> 00:08:40.320
- Yeah, so the answer to that is Anaconda, not yet.


00:08:40.320 --> 00:08:44.280
Conda Forge does have a set of community built packages


00:08:44.280 --> 00:08:46.920
for Raspberry Pi OS.


00:08:46.920 --> 00:08:49.280
The main challenge there is actually,


00:08:49.280 --> 00:08:52.760
we just a couple of months ago announced ARM64 support,


00:08:52.760 --> 00:08:55.840
but it was aimed at the server ARM machines


00:08:55.840 --> 00:08:59.480
that are running ARM 8.2 instruction set,


00:08:59.480 --> 00:09:02.240
which the Raspberry Pi is 8.0.


00:09:02.240 --> 00:09:04.200
And so the packages we built,


00:09:04.200 --> 00:09:05.800
which will work great on server ARM,


00:09:05.800 --> 00:09:07.840
are missing or using some instructions


00:09:07.840 --> 00:09:10.160
that Raspberry Pis can't support.


00:09:10.160 --> 00:09:13.360
But Conda Forge, so if you go look up Conda Forge


00:09:13.360 --> 00:09:15.380
and Raspberry Pi, you'll find some instructions


00:09:15.380 --> 00:09:17.520
on how to install for that.


00:09:17.520 --> 00:09:18.800
- Yeah, excellent.


00:09:18.800 --> 00:09:21.000
Yeah, it's really cool that it works over there.


00:09:21.000 --> 00:09:23.880
And ARM, ARM is interesting, right?


00:09:23.880 --> 00:09:26.160
So let's talk a little bit about that


00:09:26.160 --> 00:09:31.160
because I find that this whole Apple Silicon move,


00:09:31.160 --> 00:09:35.040
you know, they took, they created their M1 processor


00:09:35.040 --> 00:09:36.160
and they said, you know what?


00:09:36.160 --> 00:09:40.000
We're dropping Intel, dropping x86, more importantly,


00:09:40.000 --> 00:09:43.800
and we're going to switch to basically iPad processors,


00:09:43.800 --> 00:09:46.000
slightly amped up iPad processors


00:09:46.000 --> 00:09:48.900
that turn out to be really, really fast,


00:09:48.900 --> 00:09:52.480
which is actually blew my mind and it was unexpected.


00:09:52.480 --> 00:09:56.620
But I think the success of Apple


00:09:56.620 --> 00:10:00.920
is actually going to encourage others to do this as well.


00:10:00.920 --> 00:10:04.960
And it's going to add more platforms


00:10:04.960 --> 00:10:09.560
that things like Anaconda, Conda Forge and stuff


00:10:09.560 --> 00:10:10.880
are going to have to support, right?


00:10:10.880 --> 00:10:15.880
So there's a cool article over here by you on Anaconda


00:10:15.880 --> 00:10:19.480
called a Python Data Scientist's Guide


00:10:19.480 --> 00:10:21.240
to the Apple Silicon Transition.


00:10:21.240 --> 00:10:26.220
- Yeah, this was, you know, I've been, I'm a huge chip nerd


00:10:26.220 --> 00:10:28.640
just due to background and thinking about optimization


00:10:28.640 --> 00:10:29.480
and performance.


00:10:29.480 --> 00:10:33.620
And so this came out of, you know, some experiments


00:10:33.620 --> 00:10:35.400
I was doing to just understand, I mean,


00:10:35.400 --> 00:10:38.520
we got some M1 Mac minis into our data center


00:10:38.520 --> 00:10:40.000
and started immediately playing with them.


00:10:40.000 --> 00:10:42.240
And then I realized after some, you know,


00:10:42.240 --> 00:10:45.040
I should take the stuff I was learning and finding


00:10:45.040 --> 00:10:46.720
and put it together in a document for other people


00:10:46.720 --> 00:10:49.440
'cause I couldn't find this information anywhere


00:10:49.440 --> 00:10:51.520
organized in a way that was, you know,


00:10:51.520 --> 00:10:55.040
for me as a Python developer,


00:10:55.040 --> 00:10:57.200
I was having a hard time putting it all together.


00:10:57.200 --> 00:11:00.800
- Right, there was some anecdotal stuff


00:11:00.800 --> 00:11:02.960
about just like, yeah, this kind of works for me


00:11:02.960 --> 00:11:04.720
or this is kind of fast or this is kind of slow,


00:11:04.720 --> 00:11:06.160
but this is a little more,


00:11:07.000 --> 00:11:11.520
like here's the whole picture and what the history is


00:11:11.520 --> 00:11:13.080
and where it's going and what it means


00:11:13.080 --> 00:11:18.080
and specifically focused on the Conda side of things, right?


00:11:18.080 --> 00:11:21.040
- Yeah, and even just the Python side,


00:11:21.040 --> 00:11:23.960
it's, I mean, it's sort of an interesting problem of,


00:11:23.960 --> 00:11:25.360
you know, Python's an interpreter language.


00:11:25.360 --> 00:11:27.240
So you're like, well, I don't have any machine code


00:11:27.240 --> 00:11:28.280
to worry about, right?


00:11:28.280 --> 00:11:30.720
But the interpreter of course is compiled.


00:11:30.720 --> 00:11:32.080
So you at least need that.


00:11:32.080 --> 00:11:34.560
And then many, many Python packages


00:11:34.560 --> 00:11:37.320
also contain compiled bits and you'll need those too.


00:11:37.320 --> 00:11:40.000
And this is an interesting broad problem


00:11:40.000 --> 00:11:44.040
for the whole Python ecosystem to try and tackle


00:11:44.040 --> 00:11:45.760
because it's not too often a whole new platform


00:11:45.760 --> 00:11:48.240
kind of just appears, you know,


00:11:48.240 --> 00:11:50.520
making a whole new architecture takes a while.


00:11:50.520 --> 00:11:52.680
- It absolutely does.


00:11:52.680 --> 00:11:55.000
I think there's a lot of interesting benefits to come.


00:11:55.000 --> 00:11:58.040
I do want to point out for people listening,


00:11:58.040 --> 00:12:02.560
if you jump over to the PSF JetBrains Python Developer Survey,


00:12:02.560 --> 00:12:04.640
the most recent one from 2020,


00:12:04.640 --> 00:12:08.040
look around a bit, you'll see that


00:12:08.040 --> 00:12:14.080
while we don't run production stuff on macOS that much,


00:12:14.080 --> 00:12:18.760
29% of the developers are using macOS


00:12:18.760 --> 00:12:21.760
to develop Python code, right?


00:12:21.760 --> 00:12:26.480
So Apple's pledged that we're going to take 100% of this


00:12:26.480 --> 00:12:28.640
and move it over to Silicon.


00:12:28.640 --> 00:12:32.720
Which means almost a third of the people running Python


00:12:32.720 --> 00:12:36.880
in a couple of years will be under this environment, right?


00:12:36.880 --> 00:12:40.440
And even if you have a Windows or Linux machine


00:12:40.440 --> 00:12:42.560
and you don't care about macOS,


00:12:42.560 --> 00:12:46.640
you may be maintaining a package for people who do.


00:12:46.640 --> 00:12:49.000
And that means Apple Silicon, right?


00:12:49.000 --> 00:12:50.640
- Yeah, and I mean, it's interesting.


00:12:50.640 --> 00:12:51.920
There's a whole, I mean,


00:12:51.920 --> 00:12:53.840
just other stuff you take for granted, you know,


00:12:53.840 --> 00:12:58.440
the availability of free continuous integration services.


00:12:58.440 --> 00:12:59.280
- Yeah.


00:12:59.280 --> 00:13:02.080
- That has been transformative for the open source community.


00:13:02.080 --> 00:13:03.600
I mean, it's really improved the software quality


00:13:03.600 --> 00:13:04.800
that all these open source projects


00:13:04.800 --> 00:13:07.920
can automatically run their tests and build packages


00:13:07.920 --> 00:13:10.160
every time there's a new change.


00:13:10.160 --> 00:13:11.760
However, something like this comes out


00:13:11.760 --> 00:13:16.520
and until you get, you know, ARM Macs into these services


00:13:16.520 --> 00:13:19.360
and if they're, you know, until they're freely available,


00:13:19.360 --> 00:13:21.600
a lot of the infrastructure of these open source projects,


00:13:21.600 --> 00:13:23.800
they don't have a way to test on an M1 Mac,


00:13:23.800 --> 00:13:25.960
except manually if they happen to have one.


00:13:25.960 --> 00:13:28.240
And they don't have a way to automate their build


00:13:28.240 --> 00:13:31.040
on an M1 Mac until that sorts out.


00:13:31.040 --> 00:13:32.720
- Yeah, and thinking about the workflow here,


00:13:32.720 --> 00:13:36.160
there's two challenges that this presents.


00:13:36.160 --> 00:13:41.040
One is you wanna do a Git push production


00:13:41.040 --> 00:13:43.320
or Git push to some branch or tag it,


00:13:43.320 --> 00:13:45.760
and that's gonna trigger a CI build


00:13:45.760 --> 00:13:48.600
that might fork off to run a Windows compile,


00:13:48.600 --> 00:13:51.040
a Linux compile, a Mac compile,


00:13:51.040 --> 00:13:53.680
generate some platform specific wheels


00:13:53.680 --> 00:13:56.160
with like Fortran compiled in there or whatever,


00:13:56.160 --> 00:13:58.160
and then you're gonna ship that off.


00:13:58.160 --> 00:14:03.160
If that CI system doesn't have an Apple Silicon machine,


00:14:03.160 --> 00:14:07.560
it can't build for Apple Silicon, right?


00:14:07.560 --> 00:14:08.640
- Yep.


00:14:08.640 --> 00:14:11.880
- Right, so like, where do you go to the time?


00:14:11.880 --> 00:14:12.920
Yeah, sorry.


00:14:12.920 --> 00:14:13.920
Yeah, well, where do you, you know,


00:14:13.920 --> 00:14:17.200
where do you get M1 in the cloud, right?


00:14:17.200 --> 00:14:20.240
As a normal, I know there's a few hosted places,


00:14:20.240 --> 00:14:24.200
but as a like a normal GitHub or an Azure,


00:14:24.200 --> 00:14:26.440
it's not common to just go grab a bunch of those


00:14:26.440 --> 00:14:27.680
and pile them up, right?


00:14:28.200 --> 00:14:29.640
- Yeah, it'll take time.


00:14:29.640 --> 00:14:31.440
I mean, eventually, in the same way that, you know,


00:14:31.440 --> 00:14:32.560
I was thinking back to, you know,


00:14:32.560 --> 00:14:35.240
go back four or five years ago,


00:14:35.240 --> 00:14:36.920
it was, there wasn't a whole lot of options


00:14:36.920 --> 00:14:40.160
for Windows CI available.


00:14:40.160 --> 00:14:41.480
There were a couple of providers


00:14:41.480 --> 00:14:44.000
and then there was sort of a huge change


00:14:44.000 --> 00:14:46.320
and then pretty much everyone offered a Windows option


00:14:46.320 --> 00:14:48.080
and they were faster and all of this stuff.


00:14:48.080 --> 00:14:50.640
And so I think, but that took time.


00:14:50.640 --> 00:14:53.080
And I think that's the thing is these,


00:14:53.080 --> 00:14:54.920
the hardware is in people's hands now


00:14:54.920 --> 00:14:57.240
and it's just gonna get more and more.


00:14:57.240 --> 00:15:01.280
And it's unclear how quickly we can catch up.


00:15:01.280 --> 00:15:02.120
- Yeah.


00:15:02.120 --> 00:15:03.800
- That's gonna be a challenge for all of us.


00:15:03.800 --> 00:15:04.960
- It's absolutely gonna be a challenge.


00:15:04.960 --> 00:15:06.200
It's interesting.


00:15:06.200 --> 00:15:08.200
I hope that we get there soon.


00:15:08.200 --> 00:15:10.840
The other problem in this same workflow


00:15:10.840 --> 00:15:15.840
is I was actually just looking at some NumPy issues,


00:15:15.840 --> 00:15:20.680
specifically issue 18,143.


00:15:20.680 --> 00:15:23.120
I'm sure people have that right off the top of their head.


00:15:23.120 --> 00:15:26.240
The title is, please provide universal two wheels


00:15:26.240 --> 00:15:27.200
for macOS.


00:15:27.200 --> 00:15:32.200
And there's a huge long conversation about,


00:15:32.200 --> 00:15:35.160
I mean, this is like many, many lines of,


00:15:35.160 --> 00:15:37.700
many messages in the thread.


00:15:37.700 --> 00:15:41.320
And one of the problems they brought up is like,


00:15:41.320 --> 00:15:46.320
look, we can find a way to compile the binary bits,


00:15:46.320 --> 00:15:50.080
the C++ bits for M1, but we can't test it.


00:15:50.080 --> 00:15:55.040
If we can't, we as developers cannot run this output.


00:15:55.040 --> 00:15:59.360
It's a little sketchy to just compile


00:15:59.360 --> 00:16:00.880
and ship it to the world.


00:16:00.880 --> 00:16:04.760
And to be fair, this is on January 9th of 2021,


00:16:04.760 --> 00:16:06.680
when it was still hard.


00:16:06.680 --> 00:16:08.680
These things were still shipping and still arriving there.


00:16:08.680 --> 00:16:12.320
It was not like just go to the Apple store and pick one up.


00:16:12.320 --> 00:16:13.160
- Yeah, yeah.


00:16:13.160 --> 00:16:15.920
As an interesting example,


00:16:15.920 --> 00:16:18.600
I mean, CondaForge was able to get conda packages


00:16:18.600 --> 00:16:20.800
for Apple Silicon out pretty quickly,


00:16:20.800 --> 00:16:22.560
but they did it with a clever


00:16:22.560 --> 00:16:24.040
sort of cross compilation strategy


00:16:24.040 --> 00:16:28.640
where they were building on x86 max,


00:16:28.640 --> 00:16:32.480
the arm packages and pushing them out.


00:16:32.480 --> 00:16:35.100
And so, but they had enough people manually testing


00:16:35.100 --> 00:16:37.560
that they had confidence in the process that it was okay.


00:16:37.560 --> 00:16:38.920
But it was, that's very different


00:16:38.920 --> 00:16:40.120
than how they build other packages,


00:16:40.120 --> 00:16:43.480
which are built and tested immediately, automatically.


00:16:43.480 --> 00:16:45.760
And if they fail tests, they don't get uploaded.


00:16:45.760 --> 00:16:48.100
So that's, it's a risk,


00:16:48.100 --> 00:16:49.440
but it helped get the software out


00:16:49.440 --> 00:16:51.300
in people's hands quicker.


00:16:51.300 --> 00:16:53.360
But yeah, long-term, we need to get these machines


00:16:53.360 --> 00:16:55.120
onto all of these CI systems


00:16:55.120 --> 00:16:58.080
so that we can use the same techniques


00:16:58.080 --> 00:16:59.120
we've built up over the years


00:16:59.120 --> 00:17:01.320
to ensure we have quality software.


00:17:01.320 --> 00:17:02.280
- Yeah.


00:17:02.280 --> 00:17:03.320
I think we'll get there,


00:17:03.320 --> 00:17:06.200
but it's just gonna take some time, right?


00:17:06.200 --> 00:17:07.520
- Yep, yep. Yeah.


00:17:07.520 --> 00:17:09.840
- Let's see.


00:17:09.840 --> 00:17:11.200
Neil on live stream says,


00:17:11.200 --> 00:17:12.480
speaking of open source,


00:17:12.480 --> 00:17:15.760
Apple is rumored to be hiring experts in a risk.


00:17:15.760 --> 00:17:17.320
V5s have perhaps moved away


00:17:17.320 --> 00:17:19.680
from having to pay licensing fees to arm.


00:17:19.680 --> 00:17:21.920
Yeah. I'm not sure about that, but interesting.


00:17:21.920 --> 00:17:23.720
- Yeah. I mean, it's a,


00:17:23.720 --> 00:17:25.760
what's interesting here is the,


00:17:25.760 --> 00:17:28.500
I mean, other chip architectures


00:17:28.500 --> 00:17:30.260
have been around for a long, long time,


00:17:30.260 --> 00:17:33.280
but until very recently,


00:17:33.280 --> 00:17:37.080
average users didn't have to think about x86 versus arm.


00:17:37.080 --> 00:17:39.840
Arm was for mobile phones and other,


00:17:39.840 --> 00:17:41.280
never had to worry about PowerPC or anything like that.


00:17:41.280 --> 00:17:42.920
- Not for real computers.


00:17:42.920 --> 00:17:43.760
Yeah.


00:17:43.760 --> 00:17:46.640
- And so, but now, once you,


00:17:46.640 --> 00:17:49.120
once going from one to two is a big step,


00:17:49.120 --> 00:17:50.200
now the floodgates are open


00:17:50.200 --> 00:17:51.040
and now we're thinking about,


00:17:51.040 --> 00:17:52.000
well, what else is out there?


00:17:52.000 --> 00:17:53.560
I mean, you know, RISC-V,


00:17:53.560 --> 00:17:54.400
I'm not sure how you say it,


00:17:54.400 --> 00:17:56.480
I think RISC-V is what you call it,


00:17:56.480 --> 00:18:01.120
is an interesting thing and has even,


00:18:01.120 --> 00:18:03.640
you know, being a completely open standard,


00:18:03.640 --> 00:18:06.440
you don't have to even pay licensing fees, as mentioned.


00:18:06.440 --> 00:18:10.120
I don't know if Apple's gonna make this transition again,


00:18:10.120 --> 00:18:13.440
so quickly, but I can guarantee you that,


00:18:13.440 --> 00:18:15.640
you know, everyone probably somewhere in a basement


00:18:15.640 --> 00:18:17.000
is thinking about it,


00:18:17.000 --> 00:18:19.000
maybe doing some experiments,


00:18:19.000 --> 00:18:20.560
but yeah, chips move slowly,


00:18:20.560 --> 00:18:22.520
but it's interesting to think about.


00:18:22.520 --> 00:18:25.120
- Yeah, this is not a thing you can change very frequently


00:18:25.120 --> 00:18:26.560
and drag the developers along.


00:18:26.560 --> 00:18:29.280
I mean, we're talking about all the challenges,


00:18:29.280 --> 00:18:32.600
you know, that are just down the pipeline from that.


00:18:32.600 --> 00:18:33.440
- Yeah. - Very interesting.


00:18:33.440 --> 00:18:34.640
All right, well, let's just talk a few,


00:18:34.640 --> 00:18:36.320
a little bit about this.


00:18:36.320 --> 00:18:40.520
First, you're excited about these as a data scientist?


00:18:40.520 --> 00:18:43.480
- Yeah, it's, I'm there really for sort of two reasons.


00:18:43.480 --> 00:18:44.880
I mean, one thing that's interesting


00:18:44.880 --> 00:18:46.640
is just the power efficiency.


00:18:46.640 --> 00:18:49.200
I always, there was a talk long ago


00:18:49.200 --> 00:18:50.640
from the chief scientist at NVIDIA,


00:18:50.640 --> 00:18:51.680
which really had an impression on me,


00:18:51.680 --> 00:18:53.160
in which he, you know, paraphrasing roughly,


00:18:53.160 --> 00:18:54.280
basically said that,


00:18:54.280 --> 00:18:57.440
because everything is now power constrained,


00:18:57.440 --> 00:19:01.240
power efficiency equals performance.


00:19:01.240 --> 00:19:02.920
- Yeah. - In a way that is,


00:19:02.920 --> 00:19:03.840
you know, normally you just think,


00:19:03.840 --> 00:19:04.960
well, just put more power in there,


00:19:04.960 --> 00:19:06.480
but that heat has to go somewhere.


00:19:06.480 --> 00:19:09.120
So, you know, we long since hit that wall,


00:19:09.120 --> 00:19:10.880
and so now you just have to get more efficient


00:19:10.880 --> 00:19:12.400
to get more performance.


00:19:12.400 --> 00:19:13.240
- Right. - That's an interesting


00:19:13.240 --> 00:19:14.280
opportunity. - I mean, you can get more,


00:19:14.280 --> 00:19:15.960
you can get like larger power supplies


00:19:15.960 --> 00:19:17.320
and larger computers.


00:19:17.320 --> 00:19:20.040
I have a gaming sim computer,


00:19:20.040 --> 00:19:22.480
and it is so loud if you get it going full power.


00:19:22.480 --> 00:19:23.480
Like if the windows are open,


00:19:23.480 --> 00:19:25.120
you can hear it outside the house.


00:19:25.120 --> 00:19:26.520
It's literally that loud.


00:19:26.520 --> 00:19:29.240
But at the same time,


00:19:29.240 --> 00:19:31.160
it's not just on your personal computer,


00:19:31.160 --> 00:19:34.640
you know, in the cloud and places like that, right?


00:19:34.640 --> 00:19:39.640
You pay not just, you know, how much performance you get.


00:19:39.640 --> 00:19:42.240
There's some sort of combination of how much energy


00:19:42.240 --> 00:19:44.840
does that particular processor take to run?


00:19:44.840 --> 00:19:46.720
And if it's one fifth,


00:19:46.720 --> 00:19:48.920
you might be able to buy more cloud compute.


00:19:48.920 --> 00:19:51.400
- Yeah. - Per dollar.


00:19:51.400 --> 00:19:54.680
- Yeah, power and cooling is a huge part


00:19:54.680 --> 00:19:57.560
of computer data center expenses.


00:19:57.560 --> 00:20:00.480
And even just, you know,


00:20:00.480 --> 00:20:05.200
you can put maybe, you know, one to 300 watts into a CPU.


00:20:05.200 --> 00:20:07.000
You're not gonna put, you know,


00:20:07.000 --> 00:20:08.640
multiple kilowatts in there or something.


00:20:08.640 --> 00:20:10.040
And so where is that?


00:20:10.040 --> 00:20:12.440
What else can you do?


00:20:12.440 --> 00:20:13.720
And a lot of that is that, you know,


00:20:13.720 --> 00:20:16.160
Moore's law is driven a lot by just every time


00:20:16.160 --> 00:20:19.720
you shrink the process, you do get more power efficient.


00:20:19.720 --> 00:20:21.720
But now it's interesting to think about architectures


00:20:21.720 --> 00:20:23.680
that have been sort of thought of,


00:20:23.680 --> 00:20:26.680
that ARM has come in into its own


00:20:26.680 --> 00:20:28.760
in a extremely power constrained environment.


00:20:28.760 --> 00:20:31.760
And so now we're letting it loose on a laptop,


00:20:31.760 --> 00:20:34.400
which has way more power compared to a cell phone.


00:20:34.400 --> 00:20:37.000
- Yeah, you're like, what could we do if we fed,


00:20:37.000 --> 00:20:39.920
you know, right into the socket in the wall?


00:20:39.920 --> 00:20:41.280
- Yeah, you know, what happens


00:20:41.280 --> 00:20:43.440
if I put it in the data center?


00:20:43.440 --> 00:20:44.280
- Yeah. - So that's--


00:20:44.560 --> 00:20:45.840
- I think ARM in the data center


00:20:45.840 --> 00:20:48.520
is gonna be really important.


00:20:48.520 --> 00:20:50.560
- Yeah. - For this, yeah.


00:20:50.560 --> 00:20:52.200
- I think it's definitely,


00:20:52.200 --> 00:20:55.880
I'd always expected that to come before the desktop,


00:20:55.880 --> 00:20:56.720
to be honest.


00:20:56.720 --> 00:20:59.560
I was surprised as many people were


00:20:59.560 --> 00:21:03.080
by the, you know, suddenness of the Apple transition.


00:21:03.080 --> 00:21:04.880
'Cause I had assumed this maybe would happen


00:21:04.880 --> 00:21:08.520
much after we all got used to ARM in the data center,


00:21:08.520 --> 00:21:10.080
where you're probably running Linux


00:21:10.080 --> 00:21:12.280
and it's easy to recompile compared to, you know,


00:21:12.280 --> 00:21:13.960
Mac and stuff like that.


00:21:13.960 --> 00:21:16.040
- Yeah, yeah, that's what I thought as well.


00:21:16.040 --> 00:21:17.720
The payoff is so high, right?


00:21:17.720 --> 00:21:22.400
They spend so much energy on both direct electricity


00:21:22.400 --> 00:21:24.520
as well as then cooling from the waste heat,


00:21:24.520 --> 00:21:26.600
from that energy, that it's,


00:21:26.600 --> 00:21:30.720
the payoff is just completely, completely clear, right?


00:21:30.720 --> 00:21:31.680
All right, so let's see.


00:21:31.680 --> 00:21:33.200
A couple of things that you pointed out


00:21:33.200 --> 00:21:35.040
that make a big difference here is obviously


00:21:35.040 --> 00:21:39.480
ARM versus x86, built-in on-chip GPU,


00:21:39.480 --> 00:21:42.440
the whole system as a, system on a chip thing,


00:21:42.440 --> 00:21:44.640
rather than a bunch of pieces going through motherboard


00:21:44.640 --> 00:21:46.520
is pretty interesting.


00:21:46.520 --> 00:21:50.000
But I think the, maybe the most interesting one


00:21:50.000 --> 00:21:52.000
has to do with the acceleration,


00:21:52.000 --> 00:21:54.680
things like the Apple neural engine that's built in


00:21:54.680 --> 00:21:55.520
and whatnot.


00:21:55.520 --> 00:21:58.680
It sounds like the data science libraries in general


00:21:58.680 --> 00:22:02.400
are not targeting the built-in neural engines yet,


00:22:02.400 --> 00:22:04.240
but maybe they should, maybe they will in the future,


00:22:04.240 --> 00:22:05.080
I don't know.


00:22:05.080 --> 00:22:07.360
- Yeah, it's something that we're gonna have to figure out


00:22:07.360 --> 00:22:09.480
because, I mean, I think it was a bit of chicken and the egg


00:22:09.480 --> 00:22:11.240
that, you know, until this happened,


00:22:11.240 --> 00:22:12.360
you didn't have this kind of hardware


00:22:12.360 --> 00:22:14.080
just sitting on people's desks


00:22:14.080 --> 00:22:15.680
and you weren't gonna, you know,


00:22:15.680 --> 00:22:18.480
run data science stuff on your phone.


00:22:18.480 --> 00:22:20.800
So now that it's here, now the question is,


00:22:20.800 --> 00:22:22.880
okay, what can we do with it?


00:22:22.880 --> 00:22:24.520
I mean, right now, for example, you know,


00:22:24.520 --> 00:22:25.480
for the Apple neural engine,


00:22:25.480 --> 00:22:27.520
you can take advantage of it using something called


00:22:27.520 --> 00:22:31.720
Core ML tools, which actually did a webinar sometime back


00:22:31.720 --> 00:22:34.540
on, and, but that's like for basically,


00:22:34.540 --> 00:22:36.840
you've trained a model and you want to run inference on it


00:22:36.840 --> 00:22:38.280
more efficiently and quickly.


00:22:38.280 --> 00:22:40.440
But that's, you know, that's it.


00:22:40.440 --> 00:22:44.000
There's an alpha release of TensorFlow


00:22:44.000 --> 00:22:47.120
that's GPU accelerated, and it will take advantage of the,


00:22:47.120 --> 00:22:49.240
you know, on the M1 if you're running it there,


00:22:49.240 --> 00:22:51.120
but that's super early.


00:22:51.120 --> 00:22:54.160
And there's a lot more opportunities like that,


00:22:54.160 --> 00:22:56.720
but again, that will take time to adapt.


00:22:56.720 --> 00:22:58.000
- It will.


00:22:58.000 --> 00:23:02.400
I suspect as there's bigger gains to be had,


00:23:02.400 --> 00:23:06.240
they'll probably more likely to be adopted, right?


00:23:06.240 --> 00:23:09.500
So for example, I have my Mac mini here


00:23:09.500 --> 00:23:13.240
that I just completely love, but it's not that powerful,


00:23:13.240 --> 00:23:15.800
say compared to like a GeForce video card


00:23:15.800 --> 00:23:17.280
or something like that.


00:23:17.280 --> 00:23:22.240
But if Apple announces something like a huge Apple Pro,


00:23:22.240 --> 00:23:25.720
Mac Pro with many, many, you know,


00:23:25.720 --> 00:23:28.740
128 cores instead of 16 or whatever, right?


00:23:28.740 --> 00:23:31.000
Then all of a sudden, and the neural engine,


00:23:31.000 --> 00:23:31.960
all of a sudden that neural engine


00:23:31.960 --> 00:23:34.080
becomes really interesting, right?


00:23:34.080 --> 00:23:36.200
Maybe it's worth going to the extra effort


00:23:36.200 --> 00:23:38.560
of writing specific code for it.


00:23:38.560 --> 00:23:39.400
- Yeah, yeah.


00:23:39.400 --> 00:23:40.800
That's the other thing that's interesting about this


00:23:40.800 --> 00:23:43.240
is we've only seen one of these chips


00:23:43.240 --> 00:23:45.380
and it is by definition the slowest one


00:23:45.380 --> 00:23:46.480
that will ever be made.


00:23:46.480 --> 00:23:47.760
(laughing)


00:23:47.760 --> 00:23:51.400
And so we don't even know how, you know,


00:23:51.400 --> 00:23:52.480
what is it gonna be like to scale up?


00:23:52.480 --> 00:23:54.080
I mean, one of those things that is, you know,


00:23:54.080 --> 00:23:56.680
if you're targeting that big desktop user,


00:23:56.680 --> 00:23:59.080
how are they going to scale this up?


00:23:59.080 --> 00:24:01.220
This all fit on one package.


00:24:01.220 --> 00:24:02.100
Can they still do that?


00:24:02.100 --> 00:24:04.780
Will they have to split out into multiple packages?


00:24:04.780 --> 00:24:06.480
There's a lot of engineering challenges


00:24:06.480 --> 00:24:07.360
that they have to solve,


00:24:07.360 --> 00:24:09.240
and we're not sure how they're gonna solve them yet


00:24:09.240 --> 00:24:10.440
out on the outside.


00:24:10.440 --> 00:24:14.240
So we're gonna have to see.


00:24:14.240 --> 00:24:16.560
- It's gonna be exciting to see that come along here.


00:24:16.560 --> 00:24:19.480
All right, so let's touch on just a couple of things.


00:24:19.480 --> 00:24:22.200
Getting Python packages for M1,


00:24:22.200 --> 00:24:24.160
what are some of the options there?


00:24:24.160 --> 00:24:26.760
- Yeah, so the status still


00:24:26.760 --> 00:24:28.600
is roughly how I have in this article,


00:24:28.600 --> 00:24:30.900
which is basically you can use pip to install stuff


00:24:30.900 --> 00:24:32.160
if wheels have been built.


00:24:32.160 --> 00:24:34.320
And a number of packages like NumPy


00:24:34.320 --> 00:24:37.140
have started to catch up and have wheels


00:24:37.140 --> 00:24:38.560
that will run on the M1.


00:24:38.560 --> 00:24:41.080
Another option, which works surprisingly well,


00:24:41.080 --> 00:24:45.640
is to just use an x86 Python package distribution.


00:24:45.640 --> 00:24:47.280
- Yeah, I think that's actually what I'm doing


00:24:47.280 --> 00:24:49.720
because it just runs over Rosetta 2.


00:24:49.720 --> 00:24:52.960
- Yeah, it just works. - And yeah, it's pretty fast.


00:24:52.960 --> 00:24:53.960
- It is shocking.


00:24:53.960 --> 00:24:55.360
I mean, Rosetta 2 on average,


00:24:55.360 --> 00:24:58.040
I'm finding is sort of like a 20% speed hit,


00:24:58.040 --> 00:25:02.360
which for an entire architecture switch is amazing.


00:25:02.360 --> 00:25:05.480
I've never seen that before.


00:25:05.480 --> 00:25:08.540
Or you can use Condaforge has, as I mentioned earlier,


00:25:08.540 --> 00:25:12.580
their sort of experimental macOS ARM package distribution,


00:25:12.580 --> 00:25:16.220
which doesn't have everything, but has a lot of things


00:25:16.220 --> 00:25:18.820
and is using them, it is all built for ARM.


00:25:18.820 --> 00:25:21.460
There's no translation or anything going on there.


00:25:21.460 --> 00:25:24.680
- Right, and on python.org, I believe the Python


00:25:24.680 --> 00:25:27.500
is that if you go and download,


00:25:27.500 --> 00:25:32.500
I believe it's a universal binary now, pretty sure.


00:25:32.780 --> 00:25:36.520
So that means it'll adapt and just run on ARM


00:25:36.520 --> 00:25:39.480
or run on x86, you just get one binary.


00:25:39.480 --> 00:25:44.480
The NumPy conversation was kind of around that as well,


00:25:44.480 --> 00:25:46.040
I believe.


00:25:46.040 --> 00:25:50.300
All right, you did some performance analysis


00:25:50.300 --> 00:25:52.880
on the performance cores versus efficiency cores.


00:25:52.880 --> 00:25:54.080
That was pretty interesting.


00:25:54.080 --> 00:25:56.880
And so that was pretty similar to hyper-threading.


00:25:56.880 --> 00:25:58.720
If you wanna run Linux or Windows,


00:25:58.720 --> 00:26:01.080
you basically gotta go with Docker or Parallels.


00:26:01.080 --> 00:26:02.940
And then I guess maybe the last thing is like,


00:26:02.940 --> 00:26:05.660
let's wrap up this subtopic with like pros and cons


00:26:05.660 --> 00:26:06.660
for data scientists.


00:26:06.660 --> 00:26:07.940
People out there listening, they're like,


00:26:07.940 --> 00:26:10.980
I can't take hearing about how cool the M1 is anymore.


00:26:10.980 --> 00:26:12.900
Maybe I'm gonna have to get one of these, like, should they?


00:26:12.900 --> 00:26:15.420
Like, what do you think as a data scientist?


00:26:15.420 --> 00:26:17.000
- Yeah, as a data scientist, my takeaway


00:26:17.000 --> 00:26:18.900
from all the testing was you should be really excited


00:26:18.900 --> 00:26:22.460
about this, but I would wait unless you are doing


00:26:22.460 --> 00:26:24.380
what I would describe as a little bit of data science


00:26:24.380 --> 00:26:26.420
on the side and not a huge amount.


00:26:26.420 --> 00:26:29.860
Mainly because what they've proven is the architecture


00:26:29.860 --> 00:26:32.820
has great performance and great battery life.


00:26:32.820 --> 00:26:34.680
The thing we still have to see is how are they gonna get


00:26:34.680 --> 00:26:35.520
more RAM in there?


00:26:35.520 --> 00:26:37.500
How are they gonna get more cores in there?


00:26:37.500 --> 00:26:39.940
And then also when is the rest of the ecosystem


00:26:39.940 --> 00:26:42.860
gonna catch up on package support?


00:26:42.860 --> 00:26:45.580
So honestly, if you're interested in sort of bleeding edge,


00:26:45.580 --> 00:26:48.380
knowing what's coming, I would totally jump in.


00:26:48.380 --> 00:26:49.780
If you want this for your day-to-day,


00:26:49.780 --> 00:26:53.260
I would probably still wait and see what comes out next,


00:26:53.260 --> 00:26:55.340
because I think a data scientist especially


00:26:55.340 --> 00:26:57.420
is gonna want some of the more cores and more RAM,


00:26:57.420 --> 00:26:59.940
especially than what these machines offer.


00:26:59.940 --> 00:27:01.380
- Right, there's always remote desktop


00:27:01.380 --> 00:27:03.940
or SSH or something like that, right?


00:27:03.940 --> 00:27:06.180
If you've got an Intel machine sitting around,


00:27:06.180 --> 00:27:09.260
you can just connect over the network locally.


00:27:09.260 --> 00:27:10.180
Yeah, very cool.


00:27:10.180 --> 00:27:11.020
All right, excellent.


00:27:11.020 --> 00:27:13.060
I just wanna give a quick mention that Paul Everett


00:27:13.060 --> 00:27:15.660
from JetBrains and I did a Python developer


00:27:15.660 --> 00:27:19.380
explores Apple's in one way, way back in December 11th,


00:27:19.380 --> 00:27:21.560
the 2020, right when this thing came out.


00:27:21.560 --> 00:27:23.140
So people can check that out,


00:27:23.140 --> 00:27:25.660
I'll put that in the show notes as well.


00:27:25.660 --> 00:27:30.660
All right, let's talk about the state of data science 2021.


00:27:30.660 --> 00:27:33.440
How'd you all find out about this?


00:27:33.440 --> 00:27:34.500
How do you know the state?


00:27:34.500 --> 00:27:35.860
(Paul laughs)


00:27:35.860 --> 00:27:37.580
- Yeah, so this is something we've been doing


00:27:37.580 --> 00:27:38.420
for a few years now.


00:27:38.420 --> 00:27:42.460
I mean, since we have a big data scientist audience,


00:27:42.460 --> 00:27:43.660
a couple of years back, we decided,


00:27:43.660 --> 00:27:46.660
hey, let's ask them about what challenges


00:27:46.660 --> 00:27:48.020
they're seeing in their jobs,


00:27:48.020 --> 00:27:49.380
and then publish the results


00:27:49.380 --> 00:27:51.380
so that the whole industry can learn a little bit more


00:27:51.380 --> 00:27:53.460
about what are data scientists seeing


00:27:53.460 --> 00:27:54.540
in their day-to-day jobs.


00:27:54.540 --> 00:27:57.100
That's going well, going poorly,


00:27:57.100 --> 00:27:58.260
where do they wanna see improvements?


00:27:58.260 --> 00:28:01.440
What are they sort of feeling and thinking?


00:28:01.440 --> 00:28:04.660
- Yeah, so you got a bunch of people


00:28:04.660 --> 00:28:09.660
to come fill out the survey and give you some feedback.


00:28:09.660 --> 00:28:15.140
- Yeah, yeah, we, you know, 140 plus countries,


00:28:15.140 --> 00:28:17.760
so we have pretty good reach across the world.


00:28:17.760 --> 00:28:21.140
And more than 4,200 people took the survey.


00:28:21.140 --> 00:28:24.140
So it's, yeah, we got a lot of responses.


00:28:24.780 --> 00:28:26.340
It's always amazing to see.


00:28:26.340 --> 00:28:30.140
- Yeah, quick side thought here, I guess.


00:28:30.140 --> 00:28:32.140
So you've got in that survey,


00:28:32.140 --> 00:28:35.940
which I'll link to the PDF results in the share notes,


00:28:35.940 --> 00:28:37.420
you've got all the countries highlighted,


00:28:37.420 --> 00:28:39.660
and obviously North America is basically


00:28:39.660 --> 00:28:43.540
completely lit up as like a popular place of results.


00:28:43.540 --> 00:28:48.460
So is Western Europe, Australia, and even Brazil.


00:28:49.700 --> 00:28:54.660
Africa's pretty light on the side.


00:28:54.660 --> 00:28:57.680
What else can be done to get more Python,


00:28:57.680 --> 00:29:00.340
more data science going in Africa, do you think?


00:29:00.340 --> 00:29:01.860
Do you have any thoughts on that?


00:29:01.860 --> 00:29:04.380
- No, I don't, that's a good, that's an excellent question.


00:29:04.380 --> 00:29:06.780
I don't, that's actually might be a good question


00:29:06.780 --> 00:29:09.460
for a future survey, to be honest, is I can speculate.


00:29:09.460 --> 00:29:12.160
You know, I don't know if it's, you know,


00:29:12.160 --> 00:29:14.660
access to the computing, or if it's bandwidth,


00:29:14.660 --> 00:29:18.860
or if it's, you know, resources available


00:29:18.860 --> 00:29:20.700
in the local languages.


00:29:20.700 --> 00:29:21.540
I mean, there's all sorts of possibilities.


00:29:21.540 --> 00:29:23.700
- One thing that is really nice about Python


00:29:23.700 --> 00:29:26.580
and data science is so much of the stuff is free, right?


00:29:26.580 --> 00:29:28.900
So it's not like, oh, you gotta pay, you know,


00:29:28.900 --> 00:29:33.740
some huge Oracle database license to use it or whatever.


00:29:33.740 --> 00:29:36.660
So I mean, there's a real possibility of that.


00:29:36.660 --> 00:29:40.220
So yeah, I don't really know either, but let's see.


00:29:40.220 --> 00:29:43.660
There's the standard stuff about like education level.


00:29:43.660 --> 00:29:46.860
I guess one of the areas maybe we could start on


00:29:46.860 --> 00:29:50.700
is just, you know, people who are doing data science,


00:29:50.700 --> 00:29:54.580
like where do they live in the organization, right?


00:29:54.580 --> 00:29:56.140
Are they the CEO?


00:29:56.140 --> 00:29:57.900
Are they vice president?


00:29:57.900 --> 00:30:00.220
A good portion of them were,


00:30:00.220 --> 00:30:04.700
50% is either senior folks or managers.


00:30:04.700 --> 00:30:06.980
That's kind of interesting, right?


00:30:06.980 --> 00:30:11.020
- Yeah, I can see it sort of coming out of data science


00:30:11.020 --> 00:30:14.060
as helping in decision-making and that sort of thing.


00:30:14.060 --> 00:30:17.820
So I can see it gravitating towards the decision-makers


00:30:17.820 --> 00:30:20.900
in an organization and that sort of thing.


00:30:20.900 --> 00:30:22.860
I mean, one of the interesting things that maybe


00:30:22.860 --> 00:30:27.780
is in a later one of the pages is how spread out


00:30:27.780 --> 00:30:31.900
data science is across the different departments as well.


00:30:31.900 --> 00:30:34.420
That there was, you know, obviously IT and R&D


00:30:34.420 --> 00:30:36.780
show up higher than the others,


00:30:36.780 --> 00:30:40.180
but you kind of see a long tail in all the departments.


00:30:40.180 --> 00:30:43.460
And, you know, my theory on that is I think


00:30:43.460 --> 00:30:46.220
we're seeing data science evolving into sort of


00:30:46.220 --> 00:30:49.500
a profession and a professional skill, if that makes sense.


00:30:49.500 --> 00:30:51.340
So in the same way that like, you know,


00:30:51.340 --> 00:30:53.340
knowledge workers are always expected to do writing


00:30:53.340 --> 00:30:55.180
and to know how to write.


00:30:55.180 --> 00:30:58.020
But we also hire professional technical writers.


00:30:58.020 --> 00:31:00.260
I think we're getting into a space where we'll have,


00:31:00.260 --> 00:31:03.380
everyone will need to have some numerical literacy


00:31:03.380 --> 00:31:05.060
and data science skills,


00:31:05.060 --> 00:31:07.980
even while we also employ professional data scientists.


00:31:07.980 --> 00:31:09.740
- Is it the new Excel?


00:31:09.740 --> 00:31:14.740
Like if I'm a manager and I don't know how to use Excel,


00:31:14.740 --> 00:31:17.020
people are gonna go, what is wrong with you?


00:31:17.020 --> 00:31:18.900
Why are you, how did you get here? Right?


00:31:18.900 --> 00:31:21.140
You're gonna have to know how to use a spreadsheet.


00:31:21.140 --> 00:31:23.180
I mean, it could be Google sheets or whatever,


00:31:23.180 --> 00:31:26.580
but something like that to, you know, pull in data,


00:31:26.580 --> 00:31:28.540
sum it up, put it in a graph and so on.


00:31:28.540 --> 00:31:32.700
And are you seeing that more formal data science,


00:31:32.700 --> 00:31:34.900
you know, Jupyter type stuff is kind of


00:31:34.900 --> 00:31:36.500
edging in on that world?


00:31:36.500 --> 00:31:39.020
- Yeah, it's gonna, again, I think we'll have to see


00:31:39.020 --> 00:31:40.980
sort of how the tools settle out.


00:31:40.980 --> 00:31:43.180
One thing I know for sure is that you will have to


00:31:43.180 --> 00:31:45.700
at least become familiar with the concepts


00:31:45.700 --> 00:31:48.180
so that even if the people doing the data science


00:31:48.180 --> 00:31:50.260
and reporting to you are using whatever


00:31:50.260 --> 00:31:51.740
their favorite tool set is,


00:31:51.740 --> 00:31:53.380
at least understanding their workflow


00:31:53.380 --> 00:31:55.940
and how data goes through that life cycle


00:31:55.940 --> 00:32:00.020
and data cleaning and modeling and inference


00:32:00.020 --> 00:32:01.140
and all of those things.


00:32:01.140 --> 00:32:02.620
You'll have to understand that at least enough


00:32:02.620 --> 00:32:04.500
to interpret what is being told


00:32:04.500 --> 00:32:05.980
and ask the right questions about.


00:32:05.980 --> 00:32:08.700
- Right, so if somebody comes to you and says,


00:32:08.700 --> 00:32:09.980
you asked me this question,


00:32:09.980 --> 00:32:11.780
so I put together a Jupyter notebook


00:32:11.780 --> 00:32:13.540
that's using PyTorch forecasting.


00:32:13.540 --> 00:32:14.860
Maybe you can do none of those,


00:32:14.860 --> 00:32:17.020
but you should kind of understand


00:32:17.020 --> 00:32:18.820
the realm of what that means, something like that.


00:32:18.820 --> 00:32:21.220
- Yes, yes, you'll have to know at least what steps


00:32:21.220 --> 00:32:22.900
they had to go through to get to the answer


00:32:22.900 --> 00:32:24.780
so you can ask good questions about.


00:32:24.780 --> 00:32:26.420
'Cause if you were a decision maker,


00:32:26.420 --> 00:32:29.620
you need to be able to kind of defend your decision,


00:32:29.620 --> 00:32:31.260
which means you're gonna have to at least understand,


00:32:31.260 --> 00:32:34.220
you know, what went into the inputs into that decision, so.


00:32:34.220 --> 00:32:38.180
- Yeah, well, we bought that company 'cause,


00:32:38.180 --> 00:32:41.580
Jeff over in business analytics said it was a good idea.


00:32:41.580 --> 00:32:45.020
Turned out he didn't replace the not a number section


00:32:45.020 --> 00:32:46.420
and that really broke it, so.


00:32:46.420 --> 00:32:51.860
- I guess one of the requisite topics we should talk about


00:32:51.860 --> 00:32:54.380
is probably COVID-19, 'cause that was gonna be over


00:32:54.380 --> 00:32:56.900
in a few weeks or months, but then it wasn't.


00:32:56.900 --> 00:32:58.020
So it's still ongoing.


00:32:58.020 --> 00:32:59.940
And one of the things that you all asked about


00:32:59.940 --> 00:33:02.660
and studied was basically, did COVID-19


00:33:02.660 --> 00:33:05.420
and more specifically sort of the shutdown


00:33:05.420 --> 00:33:09.420
as a result of it result in more data science,


00:33:09.420 --> 00:33:13.820
less data science, increased investment, not so much?


00:33:13.820 --> 00:33:15.660
What did you all find there?


00:33:15.660 --> 00:33:18.020
- Yeah, so interestingly, I think we found


00:33:18.020 --> 00:33:20.900
that there was sort of all,


00:33:20.900 --> 00:33:22.940
different organizations had every possible answer.


00:33:22.940 --> 00:33:24.260
So, you know. - Yes.


00:33:24.260 --> 00:33:30.060
- You know, about a third decreased investment,


00:33:30.060 --> 00:33:31.820
but a quarter increased investment


00:33:31.820 --> 00:33:33.660
and another quarter stayed the same.


00:33:33.660 --> 00:33:37.340
And so that's, you know, there wasn't one definitive answer


00:33:37.340 --> 00:33:39.140
that everyone had for that, which is,


00:33:39.140 --> 00:33:41.860
I think probably has a lot to do with where data science


00:33:41.860 --> 00:33:43.060
is at in their organization.


00:33:43.060 --> 00:33:45.660
I mean, on one hand, data science is an activity


00:33:45.660 --> 00:33:49.500
that is easy to do remotely.


00:33:49.500 --> 00:33:51.220
You can, you know, there are a lot of jobs


00:33:51.220 --> 00:33:52.740
that you can't do remotely.


00:33:52.740 --> 00:33:54.260
Data science is one you could do remotely.


00:33:54.260 --> 00:33:57.460
So that part isn't an obstacle so much.


00:33:57.460 --> 00:34:00.020
But is, a lot of it also has to do with risk.


00:34:00.020 --> 00:34:01.860
I mean, everyone, when they faced this,


00:34:01.860 --> 00:34:04.660
was thinking with their business hats on,


00:34:04.660 --> 00:34:06.220
what is the risk to my organization


00:34:06.220 --> 00:34:09.980
of an unknown economic impact of this pandemic?


00:34:09.980 --> 00:34:13.100
And so a lot of places might have viewed their data science


00:34:13.100 --> 00:34:16.860
as being a risky, still early kind of thing.


00:34:16.860 --> 00:34:18.220
And so let's pull back a little bit.


00:34:18.220 --> 00:34:19.060
Let's not spend the money.


00:34:19.060 --> 00:34:19.980
- Is it optional?


00:34:19.980 --> 00:34:21.300
Okay, we cancel it for a while.


00:34:21.300 --> 00:34:22.140
We put it on hold.


00:34:22.140 --> 00:34:22.980
- Yeah.


00:34:22.980 --> 00:34:25.140
- Or is it-- - But clearly,


00:34:25.140 --> 00:34:26.700
for some organizations, it was so important


00:34:26.700 --> 00:34:28.620
they put more money in.


00:34:28.620 --> 00:34:30.100
And so a lot of it had to do


00:34:30.100 --> 00:34:32.580
with just where you're at in the journey, I think.


00:34:32.580 --> 00:34:34.220
- Yeah, yeah, absolutely.


00:34:34.220 --> 00:34:36.700
Let's see.


00:34:36.700 --> 00:34:40.660
Industries, you found out where people


00:34:40.660 --> 00:34:42.660
were doing data science.


00:34:42.660 --> 00:34:44.980
Obviously technology, right?


00:34:44.980 --> 00:34:48.020
Tech companies, I'm guessing this is like Airbnb, Netflix,


00:34:48.020 --> 00:34:48.860
those kinds of places.


00:34:48.860 --> 00:34:51.500
There's a lot of data science happening in those worlds.


00:34:51.500 --> 00:34:53.660
Academic was number two.


00:34:53.660 --> 00:34:56.660
- Yeah, I mean, data science is still


00:34:56.660 --> 00:34:58.500
a actively researched thing.


00:34:58.500 --> 00:35:01.700
I mean, as you see, sometimes it's hard to keep up


00:35:01.700 --> 00:35:04.020
with all of the new advancements and changes and everything,


00:35:04.020 --> 00:35:06.180
not just in the software, but in techniques.


00:35:06.180 --> 00:35:08.940
And so academia is super busy on this.


00:35:08.940 --> 00:35:10.260
- Yeah.


00:35:10.260 --> 00:35:11.620
- Banking is also a top one,


00:35:11.620 --> 00:35:14.500
because I kind of think of banking and finance


00:35:14.500 --> 00:35:19.300
as being some of the original corporate data scientists


00:35:19.300 --> 00:35:20.140
in some ways.


00:35:20.140 --> 00:35:22.340
And so obviously they're,


00:35:22.340 --> 00:35:23.660
it was interesting to see automotive


00:35:23.660 --> 00:35:25.020
actually score so highly.


00:35:25.020 --> 00:35:26.500
- That's the one that surprised me as well.


00:35:26.500 --> 00:35:30.740
Automotive is 6% and the highest industry was 10%.


00:35:30.740 --> 00:35:32.860
So yeah, that's really quite high.


00:35:32.860 --> 00:35:35.260
I wonder how much of that is self-driving cars.


00:35:35.260 --> 00:35:37.060
- You know, I don't know that.


00:35:37.060 --> 00:35:38.380
I mean, the other one is,


00:35:38.380 --> 00:35:40.820
as we've heard with the chip shortages,


00:35:40.820 --> 00:35:44.220
supply chain logistics is an interesting use of data science


00:35:44.220 --> 00:35:47.260
to try and predict how much supply of all the things


00:35:47.260 --> 00:35:48.860
you're gonna have where and when,


00:35:48.860 --> 00:35:50.380
and how should you transport stuff.


00:35:50.380 --> 00:35:54.660
And I imagine car manufacturing is especially challenging,


00:35:54.660 --> 00:35:55.500
especially now.


00:35:55.500 --> 00:35:56.460
- Interesting, yeah.


00:35:56.460 --> 00:35:59.140
They really shot themselves in the foot, didn't they?


00:35:59.140 --> 00:36:00.460
When they said, you know what?


00:36:00.460 --> 00:36:02.820
All these extra chips, people aren't gonna need cars.


00:36:02.820 --> 00:36:04.500
They're not gonna buy cars during this downturn.


00:36:04.500 --> 00:36:05.460
So let's cancel our order.


00:36:05.460 --> 00:36:07.220
We'll just pick it back up in six months.


00:36:07.220 --> 00:36:09.740
And six months later, there are no chips that we had.


00:36:09.740 --> 00:36:11.900
So there we have it.


00:36:11.900 --> 00:36:13.940
Yeah, I mean, GM, I think it's even shutting down


00:36:13.940 --> 00:36:17.100
a significant portion of their production in the US


00:36:17.100 --> 00:36:19.540
'cause they're just out of chips, which is crazy.


00:36:19.540 --> 00:36:23.660
Antonio out in the live stream says


00:36:23.660 --> 00:36:25.780
he's doing data science with his team


00:36:25.780 --> 00:36:27.620
in the energy, oil, and gas industry,


00:36:27.620 --> 00:36:29.180
and we're not the only ones.


00:36:29.180 --> 00:36:32.100
It's funny that doesn't appear in the list.


00:36:32.100 --> 00:36:36.260
- We do have energy, but they're down at 2%.


00:36:36.260 --> 00:36:37.860
Again, all of the percentages are low


00:36:37.860 --> 00:36:38.940
'cause there's so many industries


00:36:38.940 --> 00:36:41.460
and everyone was all over the place.


00:36:41.460 --> 00:36:43.060
- Yeah, absolutely, cool.


00:36:43.060 --> 00:36:46.540
Let's see, team size is interesting.


00:36:46.540 --> 00:36:48.500
I think one of the things that is interesting here


00:36:48.500 --> 00:36:52.660
is when I think of software developers,


00:36:52.660 --> 00:36:54.540
they kind of cluster together


00:36:54.540 --> 00:36:57.860
in like development team groups, right?


00:36:57.860 --> 00:36:59.860
They've got the software development department


00:36:59.860 --> 00:37:03.980
maybe in a company or a team building a piece of software


00:37:03.980 --> 00:37:05.420
or running a website.


00:37:05.420 --> 00:37:08.820
To me, data scientists feel like


00:37:08.820 --> 00:37:11.380
they might be more embedded within little groups.


00:37:11.380 --> 00:37:12.740
There might be a data scientist


00:37:12.740 --> 00:37:13.980
in the marketing department,


00:37:13.980 --> 00:37:18.980
a data scientist in the DevOps department, and so on.


00:37:18.980 --> 00:37:21.460
Is that maybe correct?


00:37:21.460 --> 00:37:23.060
- Yeah, I think we've seen companies


00:37:23.060 --> 00:37:24.980
actually do both at the same time even,


00:37:24.980 --> 00:37:25.860
where sometimes they'll have,


00:37:25.860 --> 00:37:26.940
I mean, one of the things we have listed


00:37:26.940 --> 00:37:28.980
is a data science center of excellence.


00:37:28.980 --> 00:37:31.540
And what that ends up being is some sense


00:37:31.540 --> 00:37:34.380
of a group that is pathfinding for an organization.


00:37:34.380 --> 00:37:35.980
They're saying, okay, these are the best practices,


00:37:35.980 --> 00:37:38.620
these are the tools, this is what to do,


00:37:38.620 --> 00:37:40.140
figuring that out and then rolling it out


00:37:40.140 --> 00:37:42.340
to all the departments who have their embedded data scientists


00:37:42.340 --> 00:37:43.900
who can take advantage of that.


00:37:43.900 --> 00:37:46.140
'Cause I think it's valuable to have a data scientist


00:37:46.140 --> 00:37:47.260
embedded in the department


00:37:47.260 --> 00:37:48.580
because one of the most important things


00:37:48.580 --> 00:37:51.300
as a data scientist is your understanding


00:37:51.300 --> 00:37:54.860
of the data you're analyzing and your familiarity with it.


00:37:54.860 --> 00:37:57.900
I would really prefer the person analyzing


00:37:57.900 --> 00:38:01.180
car supply chains understand what goes into that


00:38:01.180 --> 00:38:02.740
and also know data science,


00:38:02.740 --> 00:38:04.820
as opposed to a data scientist for whom it's all numbers


00:38:04.820 --> 00:38:06.020
and they don't know.


00:38:06.020 --> 00:38:09.740
- Right, if you could trade absolute expertise in Git


00:38:09.740 --> 00:38:12.620
versus really good understanding of the problem domain,


00:38:12.620 --> 00:38:13.740
you're probably better off going,


00:38:13.740 --> 00:38:15.100
you know what, just keep zipping it up


00:38:15.100 --> 00:38:18.140
and just really answer these questions well.


00:38:18.140 --> 00:38:19.540
You don't actually have to make that trade off,


00:38:19.540 --> 00:38:22.500
but I agree that domain knowledge is more important here.


00:38:22.500 --> 00:38:25.700
Yeah, so IT had the highest,


00:38:25.700 --> 00:38:28.180
so think of the departments where data scientists live.


00:38:28.180 --> 00:38:31.220
IT was pretty high, then R&D,


00:38:31.220 --> 00:38:34.700
and then this data center of excellence you spoke about,


00:38:34.700 --> 00:38:38.100
then ops, finance, administration, marketing,


00:38:38.100 --> 00:38:39.980
human resources, it's really spread out,


00:38:39.980 --> 00:38:42.340
which is sort of what I was getting at before.


00:38:42.340 --> 00:38:44.700
- Yeah, yeah, so I think there are a lot of,


00:38:44.700 --> 00:38:47.060
seeing a lot of organizations


00:38:47.060 --> 00:38:48.900
build their data science expertise ground up,


00:38:48.900 --> 00:38:49.940
department by department,


00:38:49.940 --> 00:38:52.180
and then maybe we'll coalesce some of it


00:38:52.180 --> 00:38:54.900
into a single department at some point.


00:38:54.900 --> 00:38:57.260
- Right, maybe that department makes the APIs


00:38:57.260 --> 00:39:00.260
for the rest of the sort of isolated folks and so on.


00:39:00.260 --> 00:39:03.020
One that was interesting is how do you spend your time?


00:39:03.020 --> 00:39:05.060
I mean, you think about these AI models


00:39:05.060 --> 00:39:06.460
or these plotly graphs


00:39:06.460 --> 00:39:09.980
and all these things that data scientists produce.


00:39:09.980 --> 00:39:12.060
Then there's the quote that data cleaning


00:39:12.060 --> 00:39:15.140
is not the grunge work, it is the work, right?


00:39:15.140 --> 00:39:16.940
And you sort of have this chart of like,


00:39:16.940 --> 00:39:18.220
how do you spend your time?


00:39:18.220 --> 00:39:20.740
And 22% is data preparation,


00:39:20.740 --> 00:39:23.580
17% on top of that is data cleaning.


00:39:23.580 --> 00:39:27.020
And so, yeah, that's a pretty significant portion


00:39:27.020 --> 00:39:29.780
of just getting ready to ask questions.


00:39:29.780 --> 00:39:31.180
- Yeah, and that's really,


00:39:31.180 --> 00:39:33.540
that's the piece that requires that domain expertise


00:39:33.540 --> 00:39:36.580
to know what you're looking at, what's relevant,


00:39:36.580 --> 00:39:37.620
what problems it'll have.


00:39:37.620 --> 00:39:38.940
No data set is perfect,


00:39:38.940 --> 00:39:42.540
and no data set is perfect for all questions.


00:39:42.540 --> 00:39:45.340
And so even if, you know,


00:39:45.340 --> 00:39:47.100
you can't ever clean the data just once


00:39:47.100 --> 00:39:48.220
'cause what you're doing is preparing it


00:39:48.220 --> 00:39:50.060
for the questions you're going to ask.


00:39:50.060 --> 00:39:52.740
And so you need someone who can, you know,


00:39:52.740 --> 00:39:54.180
understand what's gonna happen there and do that.


00:39:54.180 --> 00:39:56.300
And that's really the expertise you want.


00:39:56.300 --> 00:39:58.540
- Yeah, cool.


00:39:58.540 --> 00:40:00.340
Another topic you asked about was


00:40:00.340 --> 00:40:02.540
barriers to going to production.


00:40:02.540 --> 00:40:06.260
So some pretty intense graphs,


00:40:06.260 --> 00:40:10.860
lots of many, many options across many categories.


00:40:10.860 --> 00:40:11.700
But basically you asked,


00:40:11.700 --> 00:40:13.060
what are the roadblocks do you face


00:40:13.060 --> 00:40:15.660
when moving your models to a production environment?


00:40:15.660 --> 00:40:18.420
- Yeah, the-- - Yeah, go ahead.


00:40:18.420 --> 00:40:19.260
- Yeah, go ahead.


00:40:19.260 --> 00:40:22.180
I was gonna say, yeah, the, you know,


00:40:22.180 --> 00:40:24.460
intense graphs are really that


00:40:24.460 --> 00:40:26.580
everyone has a slightly different perception of this


00:40:26.580 --> 00:40:28.460
depending on what seat they're in.


00:40:28.460 --> 00:40:30.140
Are they the analyst?


00:40:30.140 --> 00:40:31.140
Are they the data scientist?


00:40:31.140 --> 00:40:32.500
Are they the DevOps person?


00:40:32.500 --> 00:40:33.580
Everyone has a different answer


00:40:33.580 --> 00:40:35.420
for what the roadblocks are.


00:40:35.420 --> 00:40:36.460
- Right.


00:40:36.460 --> 00:40:37.940
- And which just makes sense


00:40:37.940 --> 00:40:41.020
'cause you're gonna see what is relevant to your job.


00:40:41.020 --> 00:40:42.380
When you sum everyone up,


00:40:42.380 --> 00:40:47.380
you kind of sort of see this even split across IT security.


00:40:47.380 --> 00:40:49.100
Honestly, what I found interesting


00:40:49.100 --> 00:40:51.540
was that there was both converting your model


00:40:51.540 --> 00:40:54.020
from Python or R into another language


00:40:54.020 --> 00:40:56.020
and also converting from another language


00:40:56.020 --> 00:40:57.420
into Python and R.


00:40:57.420 --> 00:40:58.260
- Yeah, exactly.


00:40:58.260 --> 00:41:02.740
So one of the challenges that people had was,


00:41:02.740 --> 00:41:03.580
just like you said,


00:41:03.580 --> 00:41:07.380
recoding models from Python or R into another language.


00:41:07.380 --> 00:41:08.740
And then the exact reverse.


00:41:08.740 --> 00:41:10.380
And they were almost exactly tied.


00:41:10.380 --> 00:41:11.820
24% of the people said,


00:41:11.820 --> 00:41:13.340
"Oh, I gotta convert these Python models


00:41:13.340 --> 00:41:15.300
"to Java or whatever."


00:41:15.300 --> 00:41:16.140
The other people are like,


00:41:16.140 --> 00:41:17.300
"I got this Java model.


00:41:17.300 --> 00:41:18.340
"I gotta get into Python


00:41:18.340 --> 00:41:20.500
"so I can put it in FastAPI on the web."


00:41:20.500 --> 00:41:21.340
Right?


00:41:21.340 --> 00:41:22.180
Something like that.


00:41:22.180 --> 00:41:23.380
- Yeah, anecdotally, I mean,


00:41:23.380 --> 00:41:25.380
I think the, you know,


00:41:25.380 --> 00:41:26.700
maybe we'll have to change the phrasing


00:41:26.700 --> 00:41:27.820
of this question in the future


00:41:27.820 --> 00:41:29.700
because putting Python and R together


00:41:29.700 --> 00:41:33.500
might have conflated a couple of things potentially.


00:41:33.500 --> 00:41:36.180
'Cause so I just know anecdotal evidence,


00:41:36.180 --> 00:41:37.580
you know, we have talked to customers


00:41:37.580 --> 00:41:40.100
who their data scientists wrote everything in R,


00:41:40.100 --> 00:41:42.020
but they didn't wanna put R in production


00:41:42.020 --> 00:41:44.460
and were asking them to recode it into Python


00:41:44.460 --> 00:41:47.100
because Python was okay for production.


00:41:47.100 --> 00:41:48.460
But I've also had the conversation


00:41:48.460 --> 00:41:49.300
where people are like,


00:41:49.300 --> 00:41:51.220
"We do all of our data modeling in Python


00:41:51.220 --> 00:41:52.940
"and Python's not okay for production.


00:41:52.940 --> 00:41:54.900
"Java's okay for production."


00:41:54.900 --> 00:41:55.740
- Yeah.


00:41:55.740 --> 00:41:57.980
- And so it's this weird problem


00:41:57.980 --> 00:42:00.900
of companies have built up how they do deployments


00:42:00.900 --> 00:42:02.340
on specific languages.


00:42:02.340 --> 00:42:03.380
And those aren't the languages


00:42:03.380 --> 00:42:06.140
that people are doing data science in all the time.


00:42:06.140 --> 00:42:06.980
- Right.


00:42:06.980 --> 00:42:07.900
And I suspect in the Java one,


00:42:07.900 --> 00:42:11.660
it's just like we have a bunch of Java APIs and apps running


00:42:11.660 --> 00:42:13.580
and those people that do that stuff,


00:42:13.580 --> 00:42:16.100
they run those apps and you're gonna give us a model


00:42:16.100 --> 00:42:18.340
that's just gonna fit into that world.


00:42:18.340 --> 00:42:22.020
But if you are already running Python for your web servers,


00:42:22.020 --> 00:42:22.980
just put it in production,


00:42:22.980 --> 00:42:24.780
it's already right there, right?


00:42:24.780 --> 00:42:26.820
- Yep, yep, yep, yeah.


00:42:26.820 --> 00:42:27.820
- Yeah, quite interesting.


00:42:27.820 --> 00:42:28.660
Okay.


00:42:28.660 --> 00:42:34.900
Let's see, I'll flip through here and find a couple more.


00:42:34.900 --> 00:42:36.940
One was interesting, it was about open source,


00:42:36.940 --> 00:42:38.900
enterprise adoption of open source.


00:42:38.900 --> 00:42:42.500
Yeah, you may wanna speak to the results there.


00:42:42.500 --> 00:42:44.260
- Yeah, I wish we could have asked this question


00:42:44.260 --> 00:42:46.620
10 years ago, 'cause I think it would have been fascinating


00:42:46.620 --> 00:42:47.740
to compare to now.


00:42:47.740 --> 00:42:50.740
- Yeah, yeah, it's the trend that's super interesting, yeah?


00:42:50.740 --> 00:42:54.660
- One of the surprising things for me was the outcome


00:42:54.660 --> 00:42:59.340
that said, well, less surprising was 87% of organizations


00:42:59.340 --> 00:43:00.980
said that they allow the use of open source


00:43:00.980 --> 00:43:01.820
inside their organization.


00:43:01.820 --> 00:43:03.540
I think that's not too surprising.


00:43:03.540 --> 00:43:05.900
I mean, even just Linux is kind of like this sort


00:43:05.900 --> 00:43:08.820
of baseline, how is your organization functioning


00:43:08.820 --> 00:43:09.660
without Linux?


00:43:09.660 --> 00:43:11.820
- Yeah, and then almost what programming language


00:43:11.820 --> 00:43:16.260
could you choose these days that's not open source, right?


00:43:16.260 --> 00:43:20.460
You know, you've got Java, you've got .NET,


00:43:20.460 --> 00:43:23.660
like especially .NET was one that wasn't open source,


00:43:23.660 --> 00:43:25.220
it was pretty popular, like too late,


00:43:25.220 --> 00:43:26.820
that's all open source and installed


00:43:26.820 --> 00:43:28.140
through package managers now,


00:43:28.140 --> 00:43:31.300
and then the move to Python, and yeah, I mean,


00:43:31.300 --> 00:43:34.260
I can hardly think of a language or a place to run


00:43:34.260 --> 00:43:37.180
where you can't use some level of open source.


00:43:37.180 --> 00:43:39.620
- Yeah, but the second question, which was,


00:43:39.620 --> 00:43:41.380
does your employer encourage you


00:43:41.380 --> 00:43:42.980
to contribute to open source?


00:43:42.980 --> 00:43:45.300
I was surprised to see 65% said yes,


00:43:45.300 --> 00:43:49.740
that is a huge fraction and is interesting


00:43:49.740 --> 00:43:51.700
because that has not always been that high.


00:43:51.700 --> 00:43:55.140
I know that we have spoken again to people


00:43:55.140 --> 00:43:57.740
who have said, hey, I wish I could contribute,


00:43:57.740 --> 00:44:00.700
but my employer, we just don't have a policy for this


00:44:00.700 --> 00:44:01.540
or we don't have a--


00:44:01.540 --> 00:44:03.460
- Yeah, I used to hear that a lot, right?


00:44:03.460 --> 00:44:05.820
That it's just, it's too complicated,


00:44:05.820 --> 00:44:08.660
I might leak something out, yeah,


00:44:08.660 --> 00:44:11.220
or bring in some GPL stuff


00:44:11.220 --> 00:44:13.900
and mess up our commercial product or whatever, right?


00:44:13.900 --> 00:44:17.700
- Yeah, so I don't know how all these companies


00:44:17.700 --> 00:44:21.020
have solved that internally, but I am excited to see


00:44:21.020 --> 00:44:22.860
that there's now a huge potential base


00:44:22.860 --> 00:44:24.620
of open source contributors out there that,


00:44:24.620 --> 00:44:26.620
commercially, that there wasn't before.


00:44:26.620 --> 00:44:30.980
- I do think there's something about creating a culture


00:44:30.980 --> 00:44:33.180
for software developers and data scientists


00:44:33.180 --> 00:44:34.420
where they want to be,


00:44:34.420 --> 00:44:36.100
and people don't wanna be in a place


00:44:36.100 --> 00:44:39.700
where they're forced to use just proprietary tools


00:44:39.700 --> 00:44:41.660
that are old and crusty


00:44:41.660 --> 00:44:43.020
and they're not allowed to share their work


00:44:43.020 --> 00:44:44.020
or talk about their work.


00:44:44.020 --> 00:44:45.740
And there's people who would do that,


00:44:45.740 --> 00:44:48.660
but as a, I would love to be in that environment,


00:44:48.660 --> 00:44:49.820
like that's not that feeling,


00:44:49.820 --> 00:44:52.140
and talent's hard to come by,


00:44:52.140 --> 00:44:54.300
so people are probably creating environments


00:44:54.300 --> 00:44:56.900
that attract the best developers.


00:44:56.900 --> 00:44:58.860
Best developers don't wanna be locked in a basement


00:44:58.860 --> 00:45:02.300
and told they can't share or contribute to anything, yeah.


00:45:02.300 --> 00:45:04.260
- Yeah, I definitely agree with that.


00:45:04.260 --> 00:45:07.540
- Another thing that's hot these days,


00:45:07.540 --> 00:45:10.140
hot as you don't want it,


00:45:10.140 --> 00:45:13.020
but it's very hot potato style,


00:45:13.020 --> 00:45:18.020
is supply chain stuff and open source pipeline issues.


00:45:18.020 --> 00:45:21.260
The survey actually mentioned that one of the problems


00:45:21.260 --> 00:45:22.700
that people mentioned,


00:45:22.700 --> 00:45:25.260
one of the reasons that they don't want to use open source


00:45:25.260 --> 00:45:26.900
is they believed it was insecure,


00:45:26.900 --> 00:45:31.620
because our $20 billion bank is now depending


00:45:31.620 --> 00:45:36.500
on this project from Sarah about padding numbers


00:45:36.500 --> 00:45:37.340
or whatever, right?


00:45:37.340 --> 00:45:39.300
Like, if somebody takes over a thing,


00:45:39.300 --> 00:45:40.780
we're gonna pip install a virus


00:45:40.780 --> 00:45:42.100
into the core trading engine,


00:45:42.100 --> 00:45:43.060
that's gonna be bad, right?


00:45:43.060 --> 00:45:44.900
Like that's an extreme example.


00:45:44.900 --> 00:45:46.940
But you did ask about what people are doing


00:45:46.940 --> 00:45:50.460
to secure their, basically the code they're acquiring


00:45:50.460 --> 00:45:52.140
through open source.


00:45:52.140 --> 00:45:53.700
- Yeah, and this is something, I mean,


00:45:53.700 --> 00:45:55.260
we're interested in just generally,


00:45:55.260 --> 00:45:57.020
because there's a lot more focus on security


00:45:57.020 --> 00:45:59.500
and you see more reports about supply chain attacks


00:45:59.500 --> 00:46:00.860
on software, and so we're curious


00:46:00.860 --> 00:46:03.780
how different organizations are tackling the problem.


00:46:03.780 --> 00:46:08.740
Unsurprisingly, the most popular answer at 45%


00:46:08.740 --> 00:46:10.180
was they use a managed repository,


00:46:10.180 --> 00:46:12.580
which I interpret to mean basically,


00:46:12.580 --> 00:46:14.700
it's kind of like you have a private mirror


00:46:14.700 --> 00:46:17.260
of the packages that are approved in your organization,


00:46:17.260 --> 00:46:18.380
and everyone pulls from there,


00:46:18.380 --> 00:46:20.780
not from the internet directly,


00:46:20.780 --> 00:46:22.500
which is a smart approach,


00:46:22.500 --> 00:46:26.820
because it gives you a natural sort of gating thing


00:46:26.820 --> 00:46:29.100
that you can do where there is a review process


00:46:29.100 --> 00:46:30.540
to bring new software in there.


00:46:30.540 --> 00:46:31.700
- Yeah.


00:46:31.700 --> 00:46:35.460
- And so there's a lot of things here.


00:46:35.460 --> 00:46:37.140
I mean, obviously, even commercially,


00:46:37.140 --> 00:46:40.140
we sell a repository for conda packages


00:46:40.140 --> 00:46:42.060
for precisely this reason,


00:46:42.060 --> 00:46:45.980
because customers want some governance


00:46:45.980 --> 00:46:48.700
and are more than happy to pay us.


00:46:48.700 --> 00:46:52.700
Yeah, team edition is our on-package repository.


00:46:52.700 --> 00:46:55.740
And so this was an ask from customers,


00:46:55.740 --> 00:46:57.980
which is why we built this product,


00:46:57.980 --> 00:46:59.100
is they were like, "Hey, we want your stuff,


00:46:59.100 --> 00:47:01.220
"but we want it inside our firewall.


00:47:01.220 --> 00:47:03.460
"We don't wanna go directly to your public repo."


00:47:03.460 --> 00:47:05.620
- You want to opt in to saying,


00:47:05.620 --> 00:47:08.260
"Yes, we want the new NumPy, not just,


00:47:08.260 --> 00:47:11.420
"oh, somebody randomly pushed something out,


00:47:11.420 --> 00:47:12.780
"and so we're gonna just grab it


00:47:12.780 --> 00:47:14.940
"and assume that it's good," right?


00:47:14.940 --> 00:47:16.460
- And you can apply-- - But not a lot of time,


00:47:16.460 --> 00:47:17.420
yeah, go ahead.


00:47:17.420 --> 00:47:19.340
- I was gonna say, you can apply policies as well.


00:47:19.340 --> 00:47:21.820
That's common is a lot of places will say no GPL software


00:47:21.820 --> 00:47:24.060
for various reasons, or they might say,


00:47:24.060 --> 00:47:27.740
"Oh, if they're reported CVEs,


00:47:27.740 --> 00:47:32.300
"these security reports that go through NIST,"


00:47:32.300 --> 00:47:33.940
they might say, "I want no packages


00:47:33.940 --> 00:47:36.340
"with a CVE more severe than some level."


00:47:36.340 --> 00:47:41.500
And every IT department wants some handles


00:47:41.500 --> 00:47:45.220
to control that kind of policy decision-making.


00:47:45.220 --> 00:47:48.060
And so, yeah, so that's obviously,


00:47:48.060 --> 00:47:49.980
I think that's why that's the most popular option,


00:47:49.980 --> 00:47:53.500
is it's the easiest thing to get a handle on.


00:47:53.500 --> 00:47:57.100
- Yeah, you can set up a private PyPI server,


00:47:57.100 --> 00:47:58.860
pretty straightforward.


00:47:58.860 --> 00:48:01.620
There's a cool article on testdriven.io.


00:48:01.620 --> 00:48:05.380
But yeah, the Anaconda version that you all offer,


00:48:05.380 --> 00:48:06.300
that's pretty cool.


00:48:06.300 --> 00:48:10.940
Okay, so yeah, 45%, that's high.


00:48:10.940 --> 00:48:12.480
I didn't expect that many companies


00:48:12.480 --> 00:48:14.380
to have a private repository.


00:48:14.380 --> 00:48:16.500
- Yeah, that's-- - It's good,


00:48:16.500 --> 00:48:20.060
but I just expected it to be, I don't know, lower.


00:48:20.060 --> 00:48:22.420
- Yeah, although on the other side,


00:48:22.420 --> 00:48:24.660
that means 55% of those were just downloading


00:48:24.660 --> 00:48:26.500
random stuff from the internet.


00:48:26.500 --> 00:48:29.500
So it's good, I think the message is getting out


00:48:29.500 --> 00:48:30.740
that you have to think about these things


00:48:30.740 --> 00:48:32.220
from a risk perspective.


00:48:32.220 --> 00:48:36.540
- Yeah, another was 33% of the organizations


00:48:36.540 --> 00:48:39.280
do manual checks against a vulnerability database.


00:48:39.280 --> 00:48:43.620
- Yeah, so this is what I was describing earlier,


00:48:43.620 --> 00:48:47.900
these CVE databases are often a common vulnerability.


00:48:47.900 --> 00:48:49.820
Manual checks, that's a lot of labor.


00:48:49.820 --> 00:48:53.420
So it'll be interesting to see how many places


00:48:53.420 --> 00:48:55.260
move to automating that in some fashion


00:48:55.260 --> 00:48:59.080
in order to, the hard part there is those databases have,


00:48:59.080 --> 00:49:03.140
again, to data prep and data cleaning,


00:49:03.140 --> 00:49:05.140
often to make use of those public databases,


00:49:05.140 --> 00:49:07.280
you need to do some amount of curation


00:49:07.280 --> 00:49:08.620
'cause there's a lot of stuff that ends up in there


00:49:08.620 --> 00:49:11.500
that's mis-tagged or unclear or whatever.


00:49:11.500 --> 00:49:13.660
And so a lot of this manual checking


00:49:13.660 --> 00:49:16.380
is probably also just doing that curation.


00:49:16.380 --> 00:49:18.500
- Yeah, one of the things that's nice,


00:49:18.500 --> 00:49:20.420
yeah, one of the things that's nice is GitHub


00:49:20.420 --> 00:49:24.220
will now do automatic PRs for security problems


00:49:24.220 --> 00:49:25.980
that it knows about at least.


00:49:25.980 --> 00:49:27.820
- Yeah, yeah, that kind of automation


00:49:27.820 --> 00:49:30.120
is gonna be really important, I think, in the future,


00:49:30.120 --> 00:49:33.060
just 'cause you can't manually go through all those things.


00:49:33.060 --> 00:49:35.700
- What are you seeing around source control?


00:49:35.700 --> 00:49:38.620
You know, source code, algorithms,


00:49:38.620 --> 00:49:40.620
these are really important


00:49:40.620 --> 00:49:43.720
and people wanna keep them super secure,


00:49:43.720 --> 00:49:44.820
but if they put them on their own


00:49:44.820 --> 00:49:47.940
private source code repositories,


00:49:47.940 --> 00:49:49.140
they lose a lot of benefits


00:49:49.140 --> 00:49:52.460
like automatic vulnerability checking and stuff like that.


00:49:52.460 --> 00:49:56.660
What's the GitHub or GitLab versus other stuff,


00:49:56.660 --> 00:49:58.460
maybe Enterprise GitHub?


00:49:58.460 --> 00:50:02.300
- Yeah, I mean, the interesting thing there is, yeah,


00:50:02.300 --> 00:50:04.340
everyone is using source control at some point


00:50:04.340 --> 00:50:07.620
and oftentimes they want it managed inside their firewall.


00:50:07.620 --> 00:50:09.780
And so, yeah, things like GitHub Enterprise and things


00:50:09.780 --> 00:50:12.380
and GitLab are pretty popular for that.


00:50:12.380 --> 00:50:13.860
A lot of times I think what a places will do


00:50:13.860 --> 00:50:18.000
is they'll use some kind of the next item here,


00:50:18.000 --> 00:50:20.580
the 30% that they're using a vulnerability scanner.


00:50:20.580 --> 00:50:22.020
A lot of those vulnerability scanners,


00:50:22.020 --> 00:50:25.220
you can use on your own internal source repositories.


00:50:25.220 --> 00:50:28.180
And so that way they're not taking advantage of GitHub


00:50:28.180 --> 00:50:30.000
automatically doing that for them,


00:50:30.000 --> 00:50:32.760
but they at least have some solution probably


00:50:32.760 --> 00:50:33.600
for looking for stuff.


00:50:33.600 --> 00:50:35.020
- Yeah, yeah, hopefully.


00:50:35.020 --> 00:50:37.820
All right, let's see.


00:50:37.820 --> 00:50:42.820
Yeah, also 20% said they have no idea what they're doing.


00:50:42.820 --> 00:50:45.980
And then another 20% said we're not doing anything.


00:50:45.980 --> 00:50:47.080
Well, I'm sure of it.


00:50:48.020 --> 00:50:51.380
Let's maybe close out this overview


00:50:51.380 --> 00:50:55.380
of the survey results here by talking about Python.


00:50:55.380 --> 00:50:59.940
Python's popularity, is it growing?


00:50:59.940 --> 00:51:00.760
Is it shrinking?


00:51:00.760 --> 00:51:03.900
Is everyone switching to Julia or have they all gone to Go?


00:51:03.900 --> 00:51:05.600
What are they doing?


00:51:05.600 --> 00:51:07.740
- Yeah, so I think Python's advantage here


00:51:07.740 --> 00:51:11.460
is being a pretty good at a lot of things.


00:51:11.460 --> 00:51:13.820
And so it ends up being a natural meeting point


00:51:13.820 --> 00:51:17.000
of people who are interested in web development


00:51:17.000 --> 00:51:19.300
and data science or system administration,


00:51:19.300 --> 00:51:20.880
automation and all of that.


00:51:20.880 --> 00:51:23.500
So I think Python still has some growth to go,


00:51:23.500 --> 00:51:25.220
but I mean, what's interesting is,


00:51:25.220 --> 00:51:29.000
in our survey, I would say the second most popular


00:51:29.000 --> 00:51:31.420
was SQL, which has been around forever.


00:51:31.420 --> 00:51:33.740
- Yeah, and those are often used, yeah, exactly.


00:51:33.740 --> 00:51:35.340
And they're often used in parallel, right?


00:51:35.340 --> 00:51:38.180
Like I'm gonna do a SQL query


00:51:38.180 --> 00:51:40.260
and then run some Python code against the results,


00:51:40.260 --> 00:51:41.540
that type of thing.


00:51:41.540 --> 00:51:42.380
- Yeah, yeah, definitely.


00:51:42.380 --> 00:51:45.020
I'm a big believer in that there is no one language


00:51:45.020 --> 00:51:47.400
for everything and there never will be.


00:51:47.400 --> 00:51:51.240
But there is a lot of different options


00:51:51.240 --> 00:51:52.280
that people are looking to.


00:51:52.280 --> 00:51:54.880
I mean, Go makes sense for a lot of sort of


00:51:54.880 --> 00:51:56.120
network service kind of things.


00:51:56.120 --> 00:51:58.920
I mean, Kubernetes is built almost entirely out of Go,


00:51:58.920 --> 00:52:02.280
but I'm not sure if I'd want to do any data science


00:52:02.280 --> 00:52:04.080
in Go at this point.


00:52:04.080 --> 00:52:05.420
- Sure.


00:52:05.420 --> 00:52:07.780
- And so it's gonna always be a mix.


00:52:07.780 --> 00:52:10.280
- It might not even be that you're doing one or the other,


00:52:10.280 --> 00:52:11.620
you might be doing both.


00:52:11.620 --> 00:52:14.680
Like for example, maybe you've written some core engine


00:52:14.680 --> 00:52:17.300
in Rust, but then you wrap it in Python


00:52:17.300 --> 00:52:19.020
to program against it, right?


00:52:19.020 --> 00:52:20.520
It could be both.


00:52:20.520 --> 00:52:23.740
I guess it could even be a more combination than that.


00:52:23.740 --> 00:52:27.080
But yeah, the popularity of Python looks strong.


00:52:27.080 --> 00:52:32.080
So it looks like it's still right up near the top.


00:52:32.080 --> 00:52:34.040
I mean, obviously the group that you pulled


00:52:34.040 --> 00:52:35.720
is somewhat self-selecting, right?


00:52:35.720 --> 00:52:39.400
But that's still a general trend outside of your space.


00:52:39.400 --> 00:52:41.520
- Yeah, yeah, this is definitely gonna be skewed to Python


00:52:41.520 --> 00:52:43.640
'cause otherwise why are you taking an Anaconda survey?


00:52:43.640 --> 00:52:47.600
But still I think, yeah, it is definitely something


00:52:47.600 --> 00:52:49.720
you see broadly in the industry as well.


00:52:49.720 --> 00:52:51.800
- Yeah, okay, cool.


00:52:51.800 --> 00:52:52.960
Anything else you wanna add real quick


00:52:52.960 --> 00:52:54.160
before we wrap this up?


00:52:54.160 --> 00:52:56.760
- Nope, no, I think this has been great.


00:52:56.760 --> 00:52:57.840
- Yeah, cool.


00:52:57.840 --> 00:52:59.960
Speaking of different languages and stuff


00:52:59.960 --> 00:53:02.840
out in the live stream, Alexander Siminov says,


00:53:02.840 --> 00:53:05.320
"Just learned that I can use Rust in JupyterLab


00:53:05.320 --> 00:53:06.800
"with some help from Anaconda.


00:53:06.800 --> 00:53:07.880
"My mind is blown."


00:53:07.880 --> 00:53:08.720
Good job.


00:53:08.720 --> 00:53:09.540
(laughing)


00:53:09.540 --> 00:53:11.840
- Yeah, that's the one thing I should mention about Python


00:53:11.840 --> 00:53:13.520
is one of the advantages is if you're using Python,


00:53:13.520 --> 00:53:16.040
you're probably benefiting from most of the languages


00:53:16.040 --> 00:53:18.320
on the stack, even if you're not writing them.


00:53:18.320 --> 00:53:21.320
And so the ability of Python to connect to anything


00:53:21.320 --> 00:53:22.200
is I think its strength


00:53:22.200 --> 00:53:24.960
and why it continues to top these lists.


00:53:24.960 --> 00:53:26.440
- Yeah. - Yeah.


00:53:26.440 --> 00:53:27.640
- Absolutely.


00:53:27.640 --> 00:53:29.280
And then Paul out there has a question


00:53:29.280 --> 00:53:32.680
about the commercial license.


00:53:32.680 --> 00:53:34.240
And I guess there was some changes to it.


00:53:34.240 --> 00:53:35.080
Can you maybe speak to that?


00:53:35.080 --> 00:53:38.040
I don't really track the details well enough to--


00:53:38.040 --> 00:53:43.040
- Yeah, so what we did was the Anaconda distribution


00:53:43.400 --> 00:53:46.480
packages have a terms of service that says


00:53:46.480 --> 00:53:49.200
if you are in an organization above a certain size,


00:53:49.200 --> 00:53:50.640
we want you to have a commercial license


00:53:50.640 --> 00:53:52.880
if you're using it in your business.


00:53:52.880 --> 00:53:56.280
I forget the exact threshold where that's at.


00:53:56.280 --> 00:53:59.600
And the reason there was to help one support


00:53:59.600 --> 00:54:00.920
the development of those packages.


00:54:00.920 --> 00:54:02.200
And I should say, by the way,


00:54:02.200 --> 00:54:04.640
that terms of service does not apply to conda-forge.


00:54:04.640 --> 00:54:07.040
Obviously, those are community packages.


00:54:07.040 --> 00:54:09.680
But if you want the assurances that Anaconda's providing


00:54:09.680 --> 00:54:13.080
on those packages and you are a company of a certain size,


00:54:13.080 --> 00:54:15.960
we would like you to have a commercial license.


00:54:15.960 --> 00:54:17.800
That allows us to support you more directly.


00:54:17.800 --> 00:54:21.040
It allows us to fund continued work on those packages.


00:54:21.040 --> 00:54:25.000
And that's sort of, it's a sustainability thing, I think.


00:54:25.000 --> 00:54:29.360
But for most people, it's not an issue


00:54:29.360 --> 00:54:30.480
'cause they're either below that size


00:54:30.480 --> 00:54:31.920
or you're just using it individually.


00:54:31.920 --> 00:54:34.120
- Do you know what that size is, what that cutoff is?


00:54:34.120 --> 00:54:35.840
- I do not recall off the top of my head


00:54:35.840 --> 00:54:37.080
and so I'm afraid to quote a number.


00:54:37.080 --> 00:54:38.640
- Yeah, yeah, sure, no worries.


00:54:38.640 --> 00:54:42.280
Cool, all right, well, thanks for giving us that info.


00:54:42.280 --> 00:54:45.880
I mean, it seems fair that large companies


00:54:45.880 --> 00:54:48.720
benefiting from your tools contribute back.


00:54:48.720 --> 00:54:51.720
I think that statement should be applied


00:54:51.720 --> 00:54:53.640
to open source in general, right?


00:54:53.640 --> 00:54:56.640
If your company is built on Python,


00:54:56.640 --> 00:54:58.840
you should give back to the Python space.


00:54:58.840 --> 00:55:01.480
If your company's built on Java, it's Oracle,


00:55:01.480 --> 00:55:02.320
I don't know if they need help.


00:55:02.320 --> 00:55:05.280
But in general, if you're built on top of something,


00:55:05.280 --> 00:55:07.440
there's a lot of support you can give back, right?


00:55:07.440 --> 00:55:10.400
It's kind of insane to me that banks


00:55:10.400 --> 00:55:13.720
that are worth many, many billions of dollars


00:55:13.720 --> 00:55:17.920
do very little in terms of directly supporting


00:55:17.920 --> 00:55:21.160
the people who they're built upon, right?


00:55:21.160 --> 00:55:25.400
They can hire, pay for a couple of people


00:55:25.400 --> 00:55:26.400
building the core libraries.


00:55:26.400 --> 00:55:28.880
Like if you're using Flask, right?


00:55:28.880 --> 00:55:31.400
Support the Flask Palettes organization,


00:55:31.400 --> 00:55:33.000
something like that.


00:55:33.000 --> 00:55:35.520
- Yeah, and we in turn take that licensing money


00:55:35.520 --> 00:55:37.200
and some fraction of it goes to NumFocus


00:55:37.200 --> 00:55:39.520
for the broader sort of data science,


00:55:39.520 --> 00:55:41.360
open source community, in addition to us


00:55:41.360 --> 00:55:44.120
directly funding some open source projects as well.


00:55:44.120 --> 00:55:44.960
- Yeah, cool.


00:55:44.960 --> 00:55:47.960
All right, well, we're about at a time stand,


00:55:47.960 --> 00:55:49.880
but let's talk real quickly about Piston


00:55:49.880 --> 00:55:54.840
because Piston is not rewriting Python in Rust.


00:55:54.840 --> 00:55:59.840
It's not replacing it with Cython or just moving to Go.


00:55:59.840 --> 00:56:04.000
It's about making core Python faster, right?


00:56:04.000 --> 00:56:05.280
- Yeah, this is something, I mean,


00:56:05.280 --> 00:56:07.720
we've been thinking about performance


00:56:07.720 --> 00:56:09.840
in Python for a long time.


00:56:09.840 --> 00:56:13.200
One of the early projects that Anaconda created


00:56:13.200 --> 00:56:15.440
is called Numba, it's a Python compiler.


00:56:15.440 --> 00:56:17.160
It's focused on numerical use cases


00:56:17.160 --> 00:56:20.240
and it really does its best job


00:56:20.240 --> 00:56:23.560
in dealing with that kind of numerical loop heavy code.


00:56:23.560 --> 00:56:26.920
But it's not gonna optimize your entire program,


00:56:26.920 --> 00:56:28.400
but optimize the specific functions.


00:56:28.400 --> 00:56:31.400
And so Numba is very good at a very specific thing.


00:56:31.400 --> 00:56:32.600
And so we've been thinking for a long time


00:56:32.600 --> 00:56:34.920
about how we could broaden our impact.


00:56:34.920 --> 00:56:37.120
And so when I saw that Piston,


00:56:37.120 --> 00:56:39.960
which among many Python compiler projects


00:56:39.960 --> 00:56:43.680
had re-emerged in 2020 with a new version


00:56:43.680 --> 00:56:47.040
written from scratch based on Python 3.8


00:56:47.040 --> 00:56:49.200
as a just-in-time compiler in the interpreter.


00:56:49.200 --> 00:56:52.640
So it's designed to optimize any Python program.


00:56:52.640 --> 00:56:55.200
It can't necessarily do any given thing


00:56:55.200 --> 00:56:58.120
as fast as Numba might be for a specific


00:56:58.120 --> 00:57:00.000
numerical algorithm, but the breadth


00:57:00.000 --> 00:57:02.760
is really what is interesting to us.


00:57:02.760 --> 00:57:04.480
And so when I saw this project had emerged,


00:57:04.480 --> 00:57:06.600
Piston 2.0 kind of came on the scene,


00:57:06.600 --> 00:57:07.880
I started looking more closely at it


00:57:07.880 --> 00:57:09.440
and we started talking with them.


00:57:09.440 --> 00:57:10.800
And we realized that there's a lot


00:57:10.800 --> 00:57:14.280
that I think the Piston and Anaconda could do together.


00:57:14.280 --> 00:57:18.320
And so we have hired the Piston team on


00:57:18.320 --> 00:57:19.240
to our open source group.


00:57:19.240 --> 00:57:21.360
So they are funded to work on Piston


00:57:21.360 --> 00:57:23.000
the same way we fund open source developers


00:57:23.000 --> 00:57:24.960
to work on other projects.


00:57:24.960 --> 00:57:27.160
And so we're really, with the benefit


00:57:27.160 --> 00:57:29.400
that there's other help we can give


00:57:29.400 --> 00:57:31.120
and resources and infrastructure


00:57:31.120 --> 00:57:32.320
that we can offer this project.


00:57:32.320 --> 00:57:33.240
And so we're really excited to see


00:57:33.240 --> 00:57:35.400
where this is gonna go from here.


00:57:35.400 --> 00:57:36.520
- Yeah, I'm excited as well.


00:57:36.520 --> 00:57:38.640
All these different things that people are doing


00:57:38.640 --> 00:57:41.000
to make Python faster for everyone,


00:57:41.000 --> 00:57:44.520
not just, well, let's try to recompile this loop,


00:57:44.520 --> 00:57:47.520
but just you run Python and it just goes better.


00:57:47.520 --> 00:57:49.400
I think that's pretty exciting.


00:57:49.400 --> 00:57:52.240
You know, we've got the Cinder projects from Facebook.


00:57:52.240 --> 00:57:55.000
- Yeah, this is a really good year


00:57:55.000 --> 00:57:57.720
for Python optimization projects.


00:57:57.720 --> 00:57:59.080
- I should be careful about typing that


00:57:59.080 --> 00:58:03.200
into a search engine, but the Cinder project,


00:58:03.200 --> 00:58:07.160
is not something that's publicly available really.


00:58:07.160 --> 00:58:09.200
It's not like a supported improvement,


00:58:09.200 --> 00:58:11.720
but it's a, here's what they did at Instagram.


00:58:11.720 --> 00:58:12.800
There's a bunch of speed ups.


00:58:12.800 --> 00:58:14.040
Maybe you all can bring some of that


00:58:14.040 --> 00:58:15.800
back into regular Python.


00:58:15.800 --> 00:58:18.280
But yeah, there's a lot of these types of ideas


00:58:18.280 --> 00:58:19.520
and yeah, awesome.


00:58:19.520 --> 00:58:21.320
Looking forward to see what you all do with this.


00:58:21.320 --> 00:58:25.200
- And you know, the CPython core developers


00:58:25.200 --> 00:58:26.840
have even announced that they're going to,


00:58:26.840 --> 00:58:29.760
you're undertaking a new effort to speed up CPython.


00:58:29.760 --> 00:58:33.320
And so we're looking to collaborate with them.


00:58:33.320 --> 00:58:35.640
They're gonna have to figure out how,


00:58:35.640 --> 00:58:39.600
what they can do within the confines of CPython,


00:58:39.600 --> 00:58:43.280
because you are the Python interpreter for the world.


00:58:43.280 --> 00:58:45.000
And so you need to be careful,


00:58:45.000 --> 00:58:46.080
but there's a lot they're gonna do.


00:58:46.080 --> 00:58:49.040
And we're gonna try and share ideas as much as we can,


00:58:49.040 --> 00:58:51.280
because these are both open source projects.


00:58:51.280 --> 00:58:55.000
- Right, a lot of the challenges have been in compatibility.


00:58:55.000 --> 00:58:56.480
Right, like, oh, we could do this,


00:58:56.480 --> 00:58:58.360
but then C extensions don't work.


00:58:58.360 --> 00:59:00.360
And those are also important for performance


00:59:00.360 --> 00:59:03.200
in big ways and other stuff.


00:59:03.200 --> 00:59:06.280
But yeah, so they do have to be careful, but that's great.


00:59:06.280 --> 00:59:09.520
All right, final comment real quick, follow up from Paul.


00:59:09.520 --> 00:59:12.360
I'd like my company to do more open source,


00:59:12.360 --> 00:59:14.560
more to do more to support open source.


00:59:14.560 --> 00:59:16.000
Any advice on promoting that?


00:59:16.000 --> 00:59:19.920
- Yeah, I think the best first place to start


00:59:19.920 --> 00:59:21.360
is identifying what open source


00:59:21.360 --> 00:59:23.600
does your company absolutely rely on.


00:59:23.600 --> 00:59:26.920
And especially if you can find an open source project


00:59:26.920 --> 00:59:28.480
that you absolutely rely on that doesn't seem


00:59:28.480 --> 00:59:30.760
to be getting a lot of support.


00:59:30.760 --> 00:59:34.200
And then go look at those projects and see what are they,


00:59:34.200 --> 00:59:37.200
do they have an established way to donate funds?


00:59:37.200 --> 00:59:40.120
Do they have other needs?


00:59:40.120 --> 00:59:42.240
That's something I think that is easier to sell


00:59:42.240 --> 00:59:45.080
is you say, look, our organization absolutely depends on X,


00:59:45.080 --> 00:59:48.920
whatever this is, as opposed to picking a project at random.


00:59:48.920 --> 00:59:51.360
It's easier to show a specific business need.


00:59:51.360 --> 00:59:52.240
- Yeah, yeah, for sure.


00:59:52.240 --> 00:59:54.160
You can say, look, this is the core thing that we do


00:59:54.160 --> 00:59:55.560
and it's built on this rather than,


00:59:55.560 --> 00:59:56.960
oh, here's some projects I ran across.


00:59:56.960 --> 00:59:58.880
We should give some of our money away.


00:59:58.880 --> 00:59:59.720
- Yeah.


00:59:59.720 --> 01:00:03.920
- That's a harder sell to stockholders, I guess.


01:00:03.920 --> 01:00:05.840
All right, well, Stan, this has been really fun.


01:00:05.840 --> 01:00:07.480
Let me ask you the final two questions


01:00:07.480 --> 01:00:09.280
before we get out of here.


01:00:09.280 --> 01:00:11.040
If you're gonna write some Python code,


01:00:11.040 --> 01:00:12.480
what editor do you use?


01:00:12.480 --> 01:00:16.920
- So if I'm on a terminal, it's Emacs.


01:00:16.920 --> 01:00:18.520
If I have a actual GUI desktop,


01:00:18.520 --> 01:00:20.640
I'm usually using VS Code these days.


01:00:20.640 --> 01:00:21.480
- Okay, cool.


01:00:21.480 --> 01:00:24.000
And then notable PyPI package or conda package


01:00:24.000 --> 01:00:25.360
that you're like, oh, this thing is awesome.


01:00:25.360 --> 01:00:27.440
People should know about whatever library.


01:00:27.440 --> 01:00:31.120
- Yeah, wearing my GPU fan hat,


01:00:31.120 --> 01:00:34.080
I think a lot more people should know about cuPy, C-U-P-Y.


01:00:34.080 --> 01:00:36.720
It's a Python package that's basically,


01:00:36.720 --> 01:00:39.960
if you took NumPy but made it run on the GPU,


01:00:39.960 --> 01:00:42.240
it's the easiest way I can think of


01:00:42.240 --> 01:00:44.120
to get started in GPU computing


01:00:44.120 --> 01:00:47.880
'cause it just uses NumPy calls that you're familiar with.


01:00:47.880 --> 01:00:50.120
So I would highly recommend if you are at all curious


01:00:50.120 --> 01:00:52.600
about GPU computing, go check out cuPy.


01:00:52.600 --> 01:00:54.760
- Cool, yeah, that's a great one.


01:00:54.760 --> 01:00:57.200
So over there on that computer, I have over there,


01:00:57.200 --> 01:01:00.720
it has a GeForce, but on this one,


01:01:00.720 --> 01:01:04.080
it obviously doesn't have Nvidia on my Mac.


01:01:04.080 --> 01:01:05.520
Does that work?


01:01:05.520 --> 01:01:09.000
CUDA cores, the CU part of that is for the Nvidia bits.


01:01:09.000 --> 01:01:13.640
What's my GPU story if I don't have Nvidia on my machine?


01:01:13.640 --> 01:01:15.400
- Not as clear.


01:01:15.400 --> 01:01:19.960
Yeah, CUDA has kind of come to dominate the space


01:01:19.960 --> 01:01:22.720
being sort of first out of the gate.


01:01:22.720 --> 01:01:24.960
There's a lot more Python projects for CUDA.


01:01:24.960 --> 01:01:28.480
There are not really clear choices, I think,


01:01:28.480 --> 01:01:32.760
for AMD or for built-in GPUs at this point.


01:01:32.760 --> 01:01:35.200
Although I've definitely watched the space.


01:01:35.200 --> 01:01:37.160
Intel is coming out with their own GPUs


01:01:37.160 --> 01:01:40.360
sort of this year and starting next year.


01:01:40.360 --> 01:01:41.960
And they have been collaborating


01:01:41.960 --> 01:01:43.400
with various open source projects,


01:01:43.400 --> 01:01:45.400
including the Number project,


01:01:45.400 --> 01:01:49.240
to build Python tools to run on Intel GPUs,


01:01:49.240 --> 01:01:50.800
both embedded and discrete.


01:01:50.800 --> 01:01:52.520
So-- - Yeah, okay.


01:01:52.520 --> 01:01:53.840
- So this may change in the future.


01:01:53.840 --> 01:01:55.480
It'll be interesting to see.


01:01:55.480 --> 01:01:56.560
- Yeah, absolutely.


01:01:56.560 --> 01:01:59.520
All right, final call to action.


01:01:59.520 --> 01:02:02.600
People are excited about digging more into these results


01:02:02.600 --> 01:02:04.680
and learning more about the state of the industry.


01:02:04.680 --> 01:02:05.520
What do they do?


01:02:05.520 --> 01:02:09.280
- Go search for state of data science, Anaconda,


01:02:09.280 --> 01:02:11.720
and you'll find the results of the survey.


01:02:11.720 --> 01:02:12.760
There's a lot of detail in there,


01:02:12.760 --> 01:02:13.680
so I would definitely go through


01:02:13.680 --> 01:02:16.440
and take a look at all of the charts and things,


01:02:16.440 --> 01:02:20.080
'cause there's all kinds of topics covered in there.


01:02:20.080 --> 01:02:22.120
- Yeah, I think it's 46 pages or something,


01:02:22.120 --> 01:02:24.840
we just covered some of the highlights, so absolutely.


01:02:24.840 --> 01:02:27.680
All right, Stan, well, thank you for being here.


01:02:27.680 --> 01:02:29.280
It's been great to chat with you.


01:02:29.280 --> 01:02:30.920
- Thanks, it's been great.


01:02:30.920 --> 01:02:31.920
- You bet.


01:02:31.920 --> 01:02:32.760
Bye, everyone.


01:02:32.760 --> 01:02:34.840
- [Aglia] That's interesting.

